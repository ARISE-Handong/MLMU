[;, public, static, final, int, DEFAULT_ROBUSTNESS_ITERS, =, 2, ;, public, static, final, double, DEFAULT_ACCURACY, =, 1e-12, ;, private, static, final]
[;, public, static, final, double, DEFAULT_ACCURACY, =, 1e-12, ;, private, static, final, long, serialVersionUID, =, 5204927143605193821L, ;, private, final, double]
[;, private, static, final, long, serialVersionUID, =, 5204927143605193821L, ;, private, final, double, bandwidth, ;, private, final, int, robustnessIters, ;, private]
[;, private, final, double, bandwidth, ;, private, final, int, robustnessIters, ;, private, final, double, accuracy, ;, public, LoessInterpolator, (, )]
[=, DEFAULT_BANDWIDTH, ;, this, ., robustnessIters, =, DEFAULT_ROBUSTNESS_ITERS, ;, this, ., accuracy, =, DEFAULT_ACCURACY, ;, }, public, LoessInterpolator, (, double]
[., bandwidth, =, DEFAULT_BANDWIDTH, ;, this, ., robustnessIters, =, DEFAULT_ROBUSTNESS_ITERS, ;, this, ., accuracy, =, DEFAULT_ACCURACY, ;, }, public, LoessInterpolator]
[;, this, ., robustnessIters, =, DEFAULT_ROBUSTNESS_ITERS, ;, this, ., accuracy, =, DEFAULT_ACCURACY, ;, }, public, LoessInterpolator, (, double, bandwidth, ,]
[=, DEFAULT_ROBUSTNESS_ITERS, ;, this, ., accuracy, =, DEFAULT_ACCURACY, ;, }, public, LoessInterpolator, (, double, bandwidth, ,, int, robustnessIters, ), {]
[., robustnessIters, =, DEFAULT_ROBUSTNESS_ITERS, ;, this, ., accuracy, =, DEFAULT_ACCURACY, ;, }, public, LoessInterpolator, (, double, bandwidth, ,, int, robustnessIters]
[;, this, ., accuracy, =, DEFAULT_ACCURACY, ;, }, public, LoessInterpolator, (, double, bandwidth, ,, int, robustnessIters, ), {, this, (]
[=, DEFAULT_ACCURACY, ;, }, public, LoessInterpolator, (, double, bandwidth, ,, int, robustnessIters, ), {, this, (, bandwidth, ,, robustnessIters, ,]
[., accuracy, =, DEFAULT_ACCURACY, ;, }, public, LoessInterpolator, (, double, bandwidth, ,, int, robustnessIters, ), {, this, (, bandwidth, ,]
[;, }, public, LoessInterpolator, (, double, bandwidth, ,, int, robustnessIters, ), {, this, (, bandwidth, ,, robustnessIters, ,, DEFAULT_ACCURACY, )]
[,, robustnessIters, ,, DEFAULT_ACCURACY, ), ;, }, public, LoessInterpolator, (, double, bandwidth, ,, int, robustnessIters, ,, double, accuracy, ), throws]
[,, DEFAULT_ACCURACY, ), ;, }, public, LoessInterpolator, (, double, bandwidth, ,, int, robustnessIters, ,, double, accuracy, ), throws, OutOfRangeException, ,]
[), ;, }, public, LoessInterpolator, (, double, bandwidth, ,, int, robustnessIters, ,, double, accuracy, ), throws, OutOfRangeException, ,, NotPositiveException, {]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., BANDWIDTH, ,, bandwidth, ,, 0, ,, 1, ), ;, }, this, .]
[||, bandwidth, >, 1, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., BANDWIDTH, ,, bandwidth, ,, 0, ,, 1, )]
[<, 0, ||, bandwidth, >, 1, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., BANDWIDTH, ,, bandwidth, ,, 0, ,]
[||, bandwidth, >, 1, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., BANDWIDTH, ,, bandwidth, ,, 0, ,, 1, )]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., BANDWIDTH, ,, bandwidth, ,, 0, ,, 1, ), ;, }, this, .]
[>, 1, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., BANDWIDTH, ,, bandwidth, ,, 0, ,, 1, ), ;, }]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., BANDWIDTH, ,, bandwidth, ,, 0, ,, 1, ), ;, }, this, .]
[;, }, this, ., bandwidth, =, bandwidth, ;, if, (, robustnessIters, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats]
[,, bandwidth, ,, 0, ,, 1, ), ;, }, this, ., bandwidth, =, bandwidth, ;, if, (, robustnessIters, <, 0]
[., BANDWIDTH, ,, bandwidth, ,, 0, ,, 1, ), ;, }, this, ., bandwidth, =, bandwidth, ;, if, (, robustnessIters]
[,, 0, ,, 1, ), ;, }, this, ., bandwidth, =, bandwidth, ;, if, (, robustnessIters, <, 0, ), {]
[,, 1, ), ;, }, this, ., bandwidth, =, bandwidth, ;, if, (, robustnessIters, <, 0, ), {, throw, new]
[), ;, }, this, ., bandwidth, =, bandwidth, ;, if, (, robustnessIters, <, 0, ), {, throw, new, NotPositiveException, (]
[=, bandwidth, ;, if, (, robustnessIters, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., ROBUSTNESS_ITERATIONS, ,, robustnessIters, )]
[., bandwidth, =, bandwidth, ;, if, (, robustnessIters, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., ROBUSTNESS_ITERATIONS, ,]
[;, if, (, robustnessIters, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., ROBUSTNESS_ITERATIONS, ,, robustnessIters, ), ;, }]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., ROBUSTNESS_ITERATIONS, ,, robustnessIters, ), ;, }, this, ., robustnessIters, =, robustnessIters, ;]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., ROBUSTNESS_ITERATIONS, ,, robustnessIters, ), ;, }, this, ., robustnessIters, =]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., ROBUSTNESS_ITERATIONS, ,, robustnessIters, ), ;, }, this, ., robustnessIters, =, robustnessIters, ;]
[;, }, this, ., robustnessIters, =, robustnessIters, ;, this, ., accuracy, =, accuracy, ;, }, public, final, PolynomialSplineFunction, interpolate, (]
[,, robustnessIters, ), ;, }, this, ., robustnessIters, =, robustnessIters, ;, this, ., accuracy, =, accuracy, ;, }, public, final]
[., ROBUSTNESS_ITERATIONS, ,, robustnessIters, ), ;, }, this, ., robustnessIters, =, robustnessIters, ;, this, ., accuracy, =, accuracy, ;, }]
[), ;, }, this, ., robustnessIters, =, robustnessIters, ;, this, ., accuracy, =, accuracy, ;, }, public, final, PolynomialSplineFunction, interpolate]
[=, robustnessIters, ;, this, ., accuracy, =, accuracy, ;, }, public, final, PolynomialSplineFunction, interpolate, (, final, double, [, ], xval]
[., robustnessIters, =, robustnessIters, ;, this, ., accuracy, =, accuracy, ;, }, public, final, PolynomialSplineFunction, interpolate, (, final, double, []
[;, this, ., accuracy, =, accuracy, ;, }, public, final, PolynomialSplineFunction, interpolate, (, final, double, [, ], xval, ,, final]
[=, accuracy, ;, }, public, final, PolynomialSplineFunction, interpolate, (, final, double, [, ], xval, ,, final, double, [, ], yval]
[., accuracy, =, accuracy, ;, }, public, final, PolynomialSplineFunction, interpolate, (, final, double, [, ], xval, ,, final, double, []
[;, }, public, final, PolynomialSplineFunction, interpolate, (, final, double, [, ], xval, ,, final, double, [, ], yval, ), throws]
[;, }, public, final, double, [, ], smooth, (, final, double, [, ], xval, ,, final, double, [, ], yval]
[., interpolate, (, xval, ,, smooth, (, xval, ,, yval, ), ), ;, }, public, final, double, [, ], smooth]
[,, smooth, (, xval, ,, yval, ), ), ;, }, public, final, double, [, ], smooth, (, final, double, []
[), ;, }, public, final, double, [, ], smooth, (, final, double, [, ], xval, ,, final, double, [, ]]
[,, yval, ), ), ;, }, public, final, double, [, ], smooth, (, final, double, [, ], xval, ,, final]
[), ), ;, }, public, final, double, [, ], smooth, (, final, double, [, ], xval, ,, final, double, []
[), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, ), ;, }, final, int, n, =]
[!=, yval, ., length, ), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, ), ;, }]
[., length, !=, yval, ., length, ), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, )]
[), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, ), ;, }, final, int, n, =]
[., length, ), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, ), ;, }, final, int]
[;, }, final, int, n, =, xval, ., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException]
[,, yval, ., length, ), ;, }, final, int, n, =, xval, ., length, ;, if, (, n, ==, 0]
[., length, ,, yval, ., length, ), ;, }, final, int, n, =, xval, ., length, ;, if, (, n]
[), ;, }, final, int, n, =, xval, ., length, ;, if, (, n, ==, 0, ), {, throw, new]
[., length, ), ;, }, final, int, n, =, xval, ., length, ;, if, (, n, ==, 0, ), {]
[;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, checkAllFiniteReal, (, xval, ), ;]
[., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, checkAllFiniteReal, (, xval]
[), {, throw, new, NoDataException, (, ), ;, }, checkAllFiniteReal, (, xval, ), ;, checkAllFiniteReal, (, yval, ), ;, checkAllFiniteReal]
[==, 0, ), {, throw, new, NoDataException, (, ), ;, }, checkAllFiniteReal, (, xval, ), ;, checkAllFiniteReal, (, yval, )]
[), {, throw, new, NoDataException, (, ), ;, }, checkAllFiniteReal, (, xval, ), ;, checkAllFiniteReal, (, yval, ), ;, checkAllFiniteReal]
[;, }, checkAllFiniteReal, (, xval, ), ;, checkAllFiniteReal, (, yval, ), ;, checkAllFiniteReal, (, weights, ), ;, MathArrays, ., checkOrder]
[;, checkAllFiniteReal, (, yval, ), ;, checkAllFiniteReal, (, weights, ), ;, MathArrays, ., checkOrder, (, xval, ), ;, if, (]
[), ;, checkAllFiniteReal, (, yval, ), ;, checkAllFiniteReal, (, weights, ), ;, MathArrays, ., checkOrder, (, xval, ), ;, if]
[;, checkAllFiniteReal, (, weights, ), ;, MathArrays, ., checkOrder, (, xval, ), ;, if, (, n, ==, 1, ), {]
[), ;, checkAllFiniteReal, (, weights, ), ;, MathArrays, ., checkOrder, (, xval, ), ;, if, (, n, ==, 1, )]
[;, MathArrays, ., checkOrder, (, xval, ), ;, if, (, n, ==, 1, ), {, return, new, double, [, ]]
[), ;, MathArrays, ., checkOrder, (, xval, ), ;, if, (, n, ==, 1, ), {, return, new, double, []
[;, if, (, n, ==, 1, ), {, return, new, double, [, ], {, yval, [, 0, ], }, ;]
[., checkOrder, (, xval, ), ;, if, (, n, ==, 1, ), {, return, new, double, [, ], {, yval]
[), ;, if, (, n, ==, 1, ), {, return, new, double, [, ], {, yval, [, 0, ], }]
[), {, return, new, double, [, ], {, yval, [, 0, ], }, ;, }, if, (, n, ==, 2]
[==, 1, ), {, return, new, double, [, ], {, yval, [, 0, ], }, ;, }, if, (, n]
[), {, return, new, double, [, ], {, yval, [, 0, ], }, ;, }, if, (, n, ==, 2]
[;, }, if, (, n, ==, 2, ), {, return, new, double, [, ], {, yval, [, 0, ], ,]
[;, }, if, (, n, ==, 2, ), {, return, new, double, [, ], {, yval, [, 0, ], ,]
[}, ;, }, if, (, n, ==, 2, ), {, return, new, double, [, ], {, yval, [, 0, ]]
[[, 0, ], }, ;, }, if, (, n, ==, 2, ), {, return, new, double, [, ], {, yval]
[], }, ;, }, if, (, n, ==, 2, ), {, return, new, double, [, ], {, yval, [, 0]
[), {, return, new, double, [, ], {, yval, [, 0, ], ,, yval, [, 1, ], }, ;, }]
[==, 2, ), {, return, new, double, [, ], {, yval, [, 0, ], ,, yval, [, 1, ], }]
[), {, return, new, double, [, ], {, yval, [, 0, ], ,, yval, [, 1, ], }, ;, }]
[;, }, int, bandwidthInPoints, =, (, int, ), (, bandwidth, *, n, ), ;, if, (, bandwidthInPoints, <, 2, )]
[;, }, int, bandwidthInPoints, =, (, int, ), (, bandwidth, *, n, ), ;, if, (, bandwidthInPoints, <, 2, )]
[,, yval, [, 1, ], }, ;, }, int, bandwidthInPoints, =, (, int, ), (, bandwidth, *, n, ), ;]
[[, 0, ], ,, yval, [, 1, ], }, ;, }, int, bandwidthInPoints, =, (, int, ), (, bandwidth, *]
[], ,, yval, [, 1, ], }, ;, }, int, bandwidthInPoints, =, (, int, ), (, bandwidth, *, n, )]
[}, ;, }, int, bandwidthInPoints, =, (, int, ), (, bandwidth, *, n, ), ;, if, (, bandwidthInPoints, <, 2]
[[, 1, ], }, ;, }, int, bandwidthInPoints, =, (, int, ), (, bandwidth, *, n, ), ;, if, (]
[], }, ;, }, int, bandwidthInPoints, =, (, int, ), (, bandwidth, *, n, ), ;, if, (, bandwidthInPoints, <]
[;, if, (, bandwidthInPoints, <, 2, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., BANDWIDTH, ,, bandwidthInPoints, ,, 2, ,]
[;, if, (, bandwidthInPoints, <, 2, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., BANDWIDTH, ,, bandwidthInPoints, ,, 2, ,]
[), ;, if, (, bandwidthInPoints, <, 2, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., BANDWIDTH, ,, bandwidthInPoints, ,, 2]
[*, n, ), ;, if, (, bandwidthInPoints, <, 2, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., BANDWIDTH, ,, bandwidthInPoints]
[), ;, if, (, bandwidthInPoints, <, 2, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., BANDWIDTH, ,, bandwidthInPoints, ,, 2]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., BANDWIDTH, ,, bandwidthInPoints, ,, 2, ,, true, ), ;, }, final, double]
[<, 2, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., BANDWIDTH, ,, bandwidthInPoints, ,, 2, ,, true, ), ;, }]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., BANDWIDTH, ,, bandwidthInPoints, ,, 2, ,, true, ), ;, }, final, double]
[;, }, final, double, [, ], res, =, new, double, [, n, ], ;, final, double, [, ], residuals, =]
[,, bandwidthInPoints, ,, 2, ,, true, ), ;, }, final, double, [, ], res, =, new, double, [, n, ]]
[., BANDWIDTH, ,, bandwidthInPoints, ,, 2, ,, true, ), ;, }, final, double, [, ], res, =, new, double, []
[,, 2, ,, true, ), ;, }, final, double, [, ], res, =, new, double, [, n, ], ;, final]
[,, true, ), ;, }, final, double, [, ], res, =, new, double, [, n, ], ;, final, double, []
[), ;, }, final, double, [, ], res, =, new, double, [, n, ], ;, final, double, [, ], residuals]
[;, final, double, [, ], residuals, =, new, double, [, n, ], ;, final, double, [, ], sortedResiduals, =, new]
[], ;, final, double, [, ], residuals, =, new, double, [, n, ], ;, final, double, [, ], sortedResiduals, =]
[;, final, double, [, ], sortedResiduals, =, new, double, [, n, ], ;, final, double, [, ], robustnessWeights, =, new]
[], ;, final, double, [, ], sortedResiduals, =, new, double, [, n, ], ;, final, double, [, ], robustnessWeights, =]
[;, final, double, [, ], robustnessWeights, =, new, double, [, n, ], ;, Arrays, ., fill, (, robustnessWeights, ,, 1]
[], ;, final, double, [, ], robustnessWeights, =, new, double, [, n, ], ;, Arrays, ., fill, (, robustnessWeights, ,]
[;, Arrays, ., fill, (, robustnessWeights, ,, 1, ), ;, for, (, int, iter, =, 0, ;, iter, <=, robustnessIters]
[], ;, Arrays, ., fill, (, robustnessWeights, ,, 1, ), ;, for, (, int, iter, =, 0, ;, iter, <=]
[;, for, (, int, iter, =, 0, ;, iter, <=, robustnessIters, ;, ++, iter, ), {, final, int, [, ]]
[., fill, (, robustnessWeights, ,, 1, ), ;, for, (, int, iter, =, 0, ;, iter, <=, robustnessIters, ;, ++]
[,, 1, ), ;, for, (, int, iter, =, 0, ;, iter, <=, robustnessIters, ;, ++, iter, ), {, final]
[), ;, for, (, int, iter, =, 0, ;, iter, <=, robustnessIters, ;, ++, iter, ), {, final, int, []
[;, iter, <=, robustnessIters, ;, ++, iter, ), {, final, int, [, ], bandwidthInterval, =, {, 0, ,, bandwidthInPoints, -]
[;, ++, iter, ), {, final, int, [, ], bandwidthInterval, =, {, 0, ,, bandwidthInPoints, -, 1, }, ;, for]
[<=, robustnessIters, ;, ++, iter, ), {, final, int, [, ], bandwidthInterval, =, {, 0, ,, bandwidthInPoints, -, 1, }]
[;, ++, iter, ), {, final, int, [, ], bandwidthInterval, =, {, 0, ,, bandwidthInPoints, -, 1, }, ;, for]
[), {, final, int, [, ], bandwidthInterval, =, {, 0, ,, bandwidthInPoints, -, 1, }, ;, for, (, int, i]
[), {, final, int, [, ], bandwidthInterval, =, {, 0, ,, bandwidthInPoints, -, 1, }, ;, for, (, int, i]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, final, double, x, =]
[,, bandwidthInPoints, -, 1, }, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, )]
[}, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, final, double, x]
[-, 1, }, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, final]
[}, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, final, double, x]
[;, i, <, n, ;, ++, i, ), {, final, double, x, =, xval, [, i, ], ;, if, (]
[;, ++, i, ), {, final, double, x, =, xval, [, i, ], ;, if, (, i, >, 0, )]
[<, n, ;, ++, i, ), {, final, double, x, =, xval, [, i, ], ;, if, (, i, >]
[;, ++, i, ), {, final, double, x, =, xval, [, i, ], ;, if, (, i, >, 0, )]
[), {, final, double, x, =, xval, [, i, ], ;, if, (, i, >, 0, ), {, updateBandwidthInterval, (]
[), {, final, double, x, =, xval, [, i, ], ;, if, (, i, >, 0, ), {, updateBandwidthInterval, (]
[;, if, (, i, >, 0, ), {, updateBandwidthInterval, (, xval, ,, weights, ,, i, ,, bandwidthInterval, ), ;, }]
[[, i, ], ;, if, (, i, >, 0, ), {, updateBandwidthInterval, (, xval, ,, weights, ,, i, ,, bandwidthInterval]
[], ;, if, (, i, >, 0, ), {, updateBandwidthInterval, (, xval, ,, weights, ,, i, ,, bandwidthInterval, ), ;]
[), {, updateBandwidthInterval, (, xval, ,, weights, ,, i, ,, bandwidthInterval, ), ;, }, final, int, ileft, =, bandwidthInterval, []
[>, 0, ), {, updateBandwidthInterval, (, xval, ,, weights, ,, i, ,, bandwidthInterval, ), ;, }, final, int, ileft, =]
[), {, updateBandwidthInterval, (, xval, ,, weights, ,, i, ,, bandwidthInterval, ), ;, }, final, int, ileft, =, bandwidthInterval, []
[;, }, final, int, ileft, =, bandwidthInterval, [, 0, ], ;, final, int, iright, =, bandwidthInterval, [, 1, ], ;]
[,, weights, ,, i, ,, bandwidthInterval, ), ;, }, final, int, ileft, =, bandwidthInterval, [, 0, ], ;, final, int]
[,, i, ,, bandwidthInterval, ), ;, }, final, int, ileft, =, bandwidthInterval, [, 0, ], ;, final, int, iright, =]
[,, bandwidthInterval, ), ;, }, final, int, ileft, =, bandwidthInterval, [, 0, ], ;, final, int, iright, =, bandwidthInterval, []
[), ;, }, final, int, ileft, =, bandwidthInterval, [, 0, ], ;, final, int, iright, =, bandwidthInterval, [, 1, ]]
[;, final, int, iright, =, bandwidthInterval, [, 1, ], ;, final, int, edge, ;, if, (, xval, [, i, ]]
[[, 0, ], ;, final, int, iright, =, bandwidthInterval, [, 1, ], ;, final, int, edge, ;, if, (, xval]
[], ;, final, int, iright, =, bandwidthInterval, [, 1, ], ;, final, int, edge, ;, if, (, xval, [, i]
[;, final, int, edge, ;, if, (, xval, [, i, ], -, xval, [, ileft, ], >, xval, [, iright]
[[, 1, ], ;, final, int, edge, ;, if, (, xval, [, i, ], -, xval, [, ileft, ], >]
[], ;, final, int, edge, ;, if, (, xval, [, i, ], -, xval, [, ileft, ], >, xval, []
[), {, edge, =, ileft, ;, }, else, {, edge, =, iright, ;, }, double, sumWeights, =, 0, ;, double]
[>, xval, [, iright, ], -, xval, [, i, ], ), {, edge, =, ileft, ;, }, else, {, edge]
[-, xval, [, ileft, ], >, xval, [, iright, ], -, xval, [, i, ], ), {, edge, =, ileft]
[[, i, ], -, xval, [, ileft, ], >, xval, [, iright, ], -, xval, [, i, ], ), {]
[], -, xval, [, ileft, ], >, xval, [, iright, ], -, xval, [, i, ], ), {, edge, =]
[>, xval, [, iright, ], -, xval, [, i, ], ), {, edge, =, ileft, ;, }, else, {, edge]
[[, ileft, ], >, xval, [, iright, ], -, xval, [, i, ], ), {, edge, =, ileft, ;, }]
[], >, xval, [, iright, ], -, xval, [, i, ], ), {, edge, =, ileft, ;, }, else, {]
[), {, edge, =, ileft, ;, }, else, {, edge, =, iright, ;, }, double, sumWeights, =, 0, ;, double]
[-, xval, [, i, ], ), {, edge, =, ileft, ;, }, else, {, edge, =, iright, ;, }, double]
[[, iright, ], -, xval, [, i, ], ), {, edge, =, ileft, ;, }, else, {, edge, =, iright]
[], -, xval, [, i, ], ), {, edge, =, ileft, ;, }, else, {, edge, =, iright, ;, }]
[), {, edge, =, ileft, ;, }, else, {, edge, =, iright, ;, }, double, sumWeights, =, 0, ;, double]
[[, i, ], ), {, edge, =, ileft, ;, }, else, {, edge, =, iright, ;, }, double, sumWeights, =]
[], ), {, edge, =, ileft, ;, }, else, {, edge, =, iright, ;, }, double, sumWeights, =, 0, ;]
[=, ileft, ;, }, else, {, edge, =, iright, ;, }, double, sumWeights, =, 0, ;, double, sumX, =, 0]
[;, }, else, {, edge, =, iright, ;, }, double, sumWeights, =, 0, ;, double, sumX, =, 0, ;, double]
[=, iright, ;, }, double, sumWeights, =, 0, ;, double, sumX, =, 0, ;, double, sumXSquared, =, 0, ;, double]
[;, }, double, sumWeights, =, 0, ;, double, sumX, =, 0, ;, double, sumXSquared, =, 0, ;, double, sumY, =]
[;, double, sumX, =, 0, ;, double, sumXSquared, =, 0, ;, double, sumY, =, 0, ;, double, sumXY, =, 0]
[;, double, sumXSquared, =, 0, ;, double, sumY, =, 0, ;, double, sumXY, =, 0, ;, double, denom, =, FastMath]
[;, double, sumY, =, 0, ;, double, sumXY, =, 0, ;, double, denom, =, FastMath, ., abs, (, 1.0, /]
[;, double, sumXY, =, 0, ;, double, denom, =, FastMath, ., abs, (, 1.0, /, (, xval, [, edge, ]]
[;, double, denom, =, FastMath, ., abs, (, 1.0, /, (, xval, [, edge, ], -, x, ), ), ;]
[;, for, (, int, k, =, ileft, ;, k, <=, iright, ;, ++, k, ), {, final, double, xk, =]
[., abs, (, 1.0, /, (, xval, [, edge, ], -, x, ), ), ;, for, (, int, k, =]
[), ;, for, (, int, k, =, ileft, ;, k, <=, iright, ;, ++, k, ), {, final, double, xk]
[/, (, xval, [, edge, ], -, x, ), ), ;, for, (, int, k, =, ileft, ;, k, <=]
[), ;, for, (, int, k, =, ileft, ;, k, <=, iright, ;, ++, k, ), {, final, double, xk]
[), ), ;, for, (, int, k, =, ileft, ;, k, <=, iright, ;, ++, k, ), {, final, double]
[-, x, ), ), ;, for, (, int, k, =, ileft, ;, k, <=, iright, ;, ++, k, ), {]
[[, edge, ], -, x, ), ), ;, for, (, int, k, =, ileft, ;, k, <=, iright, ;, ++]
[], -, x, ), ), ;, for, (, int, k, =, ileft, ;, k, <=, iright, ;, ++, k, )]
[), ), ;, for, (, int, k, =, ileft, ;, k, <=, iright, ;, ++, k, ), {, final, double]
[;, k, <=, iright, ;, ++, k, ), {, final, double, xk, =, xval, [, k, ], ;, final, double]
[;, ++, k, ), {, final, double, xk, =, xval, [, k, ], ;, final, double, yk, =, yval, []
[<=, iright, ;, ++, k, ), {, final, double, xk, =, xval, [, k, ], ;, final, double, yk, =]
[;, ++, k, ), {, final, double, xk, =, xval, [, k, ], ;, final, double, yk, =, yval, []
[), {, final, double, xk, =, xval, [, k, ], ;, final, double, yk, =, yval, [, k, ], ;]
[), {, final, double, xk, =, xval, [, k, ], ;, final, double, yk, =, yval, [, k, ], ;]
[;, final, double, yk, =, yval, [, k, ], ;, final, double, dist, =, (, k, <, i, ), ?]
[[, k, ], ;, final, double, yk, =, yval, [, k, ], ;, final, double, dist, =, (, k, <]
[], ;, final, double, yk, =, yval, [, k, ], ;, final, double, dist, =, (, k, <, i, )]
[;, final, double, dist, =, (, k, <, i, ), ?, x, -, xk, :, xk, -, x, ;, final]
[[, k, ], ;, final, double, dist, =, (, k, <, i, ), ?, x, -, xk, :, xk, -]
[], ;, final, double, dist, =, (, k, <, i, ), ?, x, -, xk, :, xk, -, x, ;]
[;, final, double, w, =, tricube, (, dist, *, denom, ), *, robustnessWeights, [, k, ], *, weights, [, k]
[?, x, -, xk, :, xk, -, x, ;, final, double, w, =, tricube, (, dist, *, denom, ), *]
[), ?, x, -, xk, :, xk, -, x, ;, final, double, w, =, tricube, (, dist, *, denom, )]
[<, i, ), ?, x, -, xk, :, xk, -, x, ;, final, double, w, =, tricube, (, dist, *]
[), ?, x, -, xk, :, xk, -, x, ;, final, double, w, =, tricube, (, dist, *, denom, )]
[:, xk, -, x, ;, final, double, w, =, tricube, (, dist, *, denom, ), *, robustnessWeights, [, k, ]]
[-, xk, :, xk, -, x, ;, final, double, w, =, tricube, (, dist, *, denom, ), *, robustnessWeights, []
[:, xk, -, x, ;, final, double, w, =, tricube, (, dist, *, denom, ), *, robustnessWeights, [, k, ]]
[;, final, double, w, =, tricube, (, dist, *, denom, ), *, robustnessWeights, [, k, ], *, weights, [, k]
[-, x, ;, final, double, w, =, tricube, (, dist, *, denom, ), *, robustnessWeights, [, k, ], *, weights]
[;, final, double, w, =, tricube, (, dist, *, denom, ), *, robustnessWeights, [, k, ], *, weights, [, k]
[;, final, double, xkw, =, xk, *, w, ;, sumWeights, +=, w, ;, sumX, +=, xkw, ;, sumXSquared, +=, xk]
[*, weights, [, k, ], ;, final, double, xkw, =, xk, *, w, ;, sumWeights, +=, w, ;, sumX, +=]
[*, robustnessWeights, [, k, ], *, weights, [, k, ], ;, final, double, xkw, =, xk, *, w, ;, sumWeights]
[), *, robustnessWeights, [, k, ], *, weights, [, k, ], ;, final, double, xkw, =, xk, *, w, ;]
[*, denom, ), *, robustnessWeights, [, k, ], *, weights, [, k, ], ;, final, double, xkw, =, xk, *]
[), *, robustnessWeights, [, k, ], *, weights, [, k, ], ;, final, double, xkw, =, xk, *, w, ;]
[*, weights, [, k, ], ;, final, double, xkw, =, xk, *, w, ;, sumWeights, +=, w, ;, sumX, +=]
[[, k, ], *, weights, [, k, ], ;, final, double, xkw, =, xk, *, w, ;, sumWeights, +=, w]
[], *, weights, [, k, ], ;, final, double, xkw, =, xk, *, w, ;, sumWeights, +=, w, ;, sumX]
[;, final, double, xkw, =, xk, *, w, ;, sumWeights, +=, w, ;, sumX, +=, xkw, ;, sumXSquared, +=, xk]
[[, k, ], ;, final, double, xkw, =, xk, *, w, ;, sumWeights, +=, w, ;, sumX, +=, xkw, ;]
[], ;, final, double, xkw, =, xk, *, w, ;, sumWeights, +=, w, ;, sumX, +=, xkw, ;, sumXSquared, +=]
[;, sumWeights, +=, w, ;, sumX, +=, xkw, ;, sumXSquared, +=, xk, *, xkw, ;, sumY, +=, yk, *, w]
[*, w, ;, sumWeights, +=, w, ;, sumX, +=, xkw, ;, sumXSquared, +=, xk, *, xkw, ;, sumY, +=, yk]
[;, sumWeights, +=, w, ;, sumX, +=, xkw, ;, sumXSquared, +=, xk, *, xkw, ;, sumY, +=, yk, *, w]
[+=, w, ;, sumX, +=, xkw, ;, sumXSquared, +=, xk, *, xkw, ;, sumY, +=, yk, *, w, ;, sumXY]
[;, sumX, +=, xkw, ;, sumXSquared, +=, xk, *, xkw, ;, sumY, +=, yk, *, w, ;, sumXY, +=, yk]
[+=, xkw, ;, sumXSquared, +=, xk, *, xkw, ;, sumY, +=, yk, *, w, ;, sumXY, +=, yk, *, xkw]
[;, sumXSquared, +=, xk, *, xkw, ;, sumY, +=, yk, *, w, ;, sumXY, +=, yk, *, xkw, ;, }]
[+=, xk, *, xkw, ;, sumY, +=, yk, *, w, ;, sumXY, +=, yk, *, xkw, ;, }, final, double]
[;, sumY, +=, yk, *, w, ;, sumXY, +=, yk, *, xkw, ;, }, final, double, meanX, =, sumX, /]
[*, xkw, ;, sumY, +=, yk, *, w, ;, sumXY, +=, yk, *, xkw, ;, }, final, double, meanX, =]
[;, sumY, +=, yk, *, w, ;, sumXY, +=, yk, *, xkw, ;, }, final, double, meanX, =, sumX, /]
[+=, yk, *, w, ;, sumXY, +=, yk, *, xkw, ;, }, final, double, meanX, =, sumX, /, sumWeights, ;]
[;, sumXY, +=, yk, *, xkw, ;, }, final, double, meanX, =, sumX, /, sumWeights, ;, final, double, meanY, =]
[*, w, ;, sumXY, +=, yk, *, xkw, ;, }, final, double, meanX, =, sumX, /, sumWeights, ;, final, double]
[;, sumXY, +=, yk, *, xkw, ;, }, final, double, meanX, =, sumX, /, sumWeights, ;, final, double, meanY, =]
[+=, yk, *, xkw, ;, }, final, double, meanX, =, sumX, /, sumWeights, ;, final, double, meanY, =, sumY, /]
[;, }, final, double, meanX, =, sumX, /, sumWeights, ;, final, double, meanY, =, sumY, /, sumWeights, ;, final, double]
[*, xkw, ;, }, final, double, meanX, =, sumX, /, sumWeights, ;, final, double, meanY, =, sumY, /, sumWeights, ;]
[;, }, final, double, meanX, =, sumX, /, sumWeights, ;, final, double, meanY, =, sumY, /, sumWeights, ;, final, double]
[;, final, double, meanY, =, sumY, /, sumWeights, ;, final, double, meanXY, =, sumXY, /, sumWeights, ;, final, double, meanXSquared]
[/, sumWeights, ;, final, double, meanY, =, sumY, /, sumWeights, ;, final, double, meanXY, =, sumXY, /, sumWeights, ;, final]
[;, final, double, meanY, =, sumY, /, sumWeights, ;, final, double, meanXY, =, sumXY, /, sumWeights, ;, final, double, meanXSquared]
[;, final, double, meanXY, =, sumXY, /, sumWeights, ;, final, double, meanXSquared, =, sumXSquared, /, sumWeights, ;, final, double, beta]
[/, sumWeights, ;, final, double, meanXY, =, sumXY, /, sumWeights, ;, final, double, meanXSquared, =, sumXSquared, /, sumWeights, ;, final]
[;, final, double, meanXY, =, sumXY, /, sumWeights, ;, final, double, meanXSquared, =, sumXSquared, /, sumWeights, ;, final, double, beta]
[;, final, double, meanXSquared, =, sumXSquared, /, sumWeights, ;, final, double, beta, ;, if, (, FastMath, ., sqrt, (, FastMath]
[/, sumWeights, ;, final, double, meanXSquared, =, sumXSquared, /, sumWeights, ;, final, double, beta, ;, if, (, FastMath, ., sqrt]
[;, final, double, meanXSquared, =, sumXSquared, /, sumWeights, ;, final, double, beta, ;, if, (, FastMath, ., sqrt, (, FastMath]
[;, final, double, beta, ;, if, (, FastMath, ., sqrt, (, FastMath, ., abs, (, meanXSquared, -, meanX, *, meanX]
[/, sumWeights, ;, final, double, beta, ;, if, (, FastMath, ., sqrt, (, FastMath, ., abs, (, meanXSquared, -, meanX]
[;, final, double, beta, ;, if, (, FastMath, ., sqrt, (, FastMath, ., abs, (, meanXSquared, -, meanX, *, meanX]
[), {, beta, =, 0, ;, }, else, {, beta, =, (, meanXY, -, meanX, *, meanY, ), /, (]
[<, accuracy, ), {, beta, =, 0, ;, }, else, {, beta, =, (, meanXY, -, meanX, *, meanY, )]
[., sqrt, (, FastMath, ., abs, (, meanXSquared, -, meanX, *, meanX, ), ), <, accuracy, ), {, beta, =]
[), <, accuracy, ), {, beta, =, 0, ;, }, else, {, beta, =, (, meanXY, -, meanX, *, meanY]
[., abs, (, meanXSquared, -, meanX, *, meanX, ), ), <, accuracy, ), {, beta, =, 0, ;, }, else]
[), ), <, accuracy, ), {, beta, =, 0, ;, }, else, {, beta, =, (, meanXY, -, meanX, *]
[-, meanX, *, meanX, ), ), <, accuracy, ), {, beta, =, 0, ;, }, else, {, beta, =, (]
[), ), <, accuracy, ), {, beta, =, 0, ;, }, else, {, beta, =, (, meanXY, -, meanX, *]
[*, meanX, ), ), <, accuracy, ), {, beta, =, 0, ;, }, else, {, beta, =, (, meanXY, -]
[), ), <, accuracy, ), {, beta, =, 0, ;, }, else, {, beta, =, (, meanXY, -, meanX, *]
[), {, beta, =, 0, ;, }, else, {, beta, =, (, meanXY, -, meanX, *, meanY, ), /, (]
[=, 0, ;, }, else, {, beta, =, (, meanXY, -, meanX, *, meanY, ), /, (, meanXSquared, -, meanX]
[;, }, else, {, beta, =, (, meanXY, -, meanX, *, meanY, ), /, (, meanXSquared, -, meanX, *, meanX]
[=, (, meanXY, -, meanX, *, meanY, ), /, (, meanXSquared, -, meanX, *, meanX, ), ;, }, final, double]
[;, }, final, double, alpha, =, meanY, -, beta, *, meanX, ;, res, [, i, ], =, beta, *, x]
[/, (, meanXSquared, -, meanX, *, meanX, ), ;, }, final, double, alpha, =, meanY, -, beta, *, meanX, ;]
[), /, (, meanXSquared, -, meanX, *, meanX, ), ;, }, final, double, alpha, =, meanY, -, beta, *, meanX]
[-, meanX, *, meanY, ), /, (, meanXSquared, -, meanX, *, meanX, ), ;, }, final, double, alpha, =, meanY]
[), /, (, meanXSquared, -, meanX, *, meanX, ), ;, }, final, double, alpha, =, meanY, -, beta, *, meanX]
[*, meanY, ), /, (, meanXSquared, -, meanX, *, meanX, ), ;, }, final, double, alpha, =, meanY, -, beta]
[), /, (, meanXSquared, -, meanX, *, meanX, ), ;, }, final, double, alpha, =, meanY, -, beta, *, meanX]
[;, }, final, double, alpha, =, meanY, -, beta, *, meanX, ;, res, [, i, ], =, beta, *, x]
[), ;, }, final, double, alpha, =, meanY, -, beta, *, meanX, ;, res, [, i, ], =, beta, *]
[-, meanX, *, meanX, ), ;, }, final, double, alpha, =, meanY, -, beta, *, meanX, ;, res, [, i]
[), ;, }, final, double, alpha, =, meanY, -, beta, *, meanX, ;, res, [, i, ], =, beta, *]
[*, meanX, ), ;, }, final, double, alpha, =, meanY, -, beta, *, meanX, ;, res, [, i, ], =]
[), ;, }, final, double, alpha, =, meanY, -, beta, *, meanX, ;, res, [, i, ], =, beta, *]
[;, res, [, i, ], =, beta, *, x, +, alpha, ;, residuals, [, i, ], =, FastMath, ., abs]
[-, beta, *, meanX, ;, res, [, i, ], =, beta, *, x, +, alpha, ;, residuals, [, i, ]]
[;, res, [, i, ], =, beta, *, x, +, alpha, ;, residuals, [, i, ], =, FastMath, ., abs]
[*, meanX, ;, res, [, i, ], =, beta, *, x, +, alpha, ;, residuals, [, i, ], =, FastMath]
[;, res, [, i, ], =, beta, *, x, +, alpha, ;, residuals, [, i, ], =, FastMath, ., abs]
[=, beta, *, x, +, alpha, ;, residuals, [, i, ], =, FastMath, ., abs, (, yval, [, i, ]]
[[, i, ], =, beta, *, x, +, alpha, ;, residuals, [, i, ], =, FastMath, ., abs, (, yval]
[], =, beta, *, x, +, alpha, ;, residuals, [, i, ], =, FastMath, ., abs, (, yval, [, i]
[;, residuals, [, i, ], =, FastMath, ., abs, (, yval, [, i, ], -, res, [, i, ], )]
[+, alpha, ;, residuals, [, i, ], =, FastMath, ., abs, (, yval, [, i, ], -, res, [, i]
[*, x, +, alpha, ;, residuals, [, i, ], =, FastMath, ., abs, (, yval, [, i, ], -, res]
[+, alpha, ;, residuals, [, i, ], =, FastMath, ., abs, (, yval, [, i, ], -, res, [, i]
[;, residuals, [, i, ], =, FastMath, ., abs, (, yval, [, i, ], -, res, [, i, ], )]
[=, FastMath, ., abs, (, yval, [, i, ], -, res, [, i, ], ), ;, }, if, (, iter]
[[, i, ], =, FastMath, ., abs, (, yval, [, i, ], -, res, [, i, ], ), ;, }]
[], =, FastMath, ., abs, (, yval, [, i, ], -, res, [, i, ], ), ;, }, if, (]
[;, }, if, (, iter, ==, robustnessIters, ), {, break, ;, }, System, ., arraycopy, (, residuals, ,, 0, ,]
[., abs, (, yval, [, i, ], -, res, [, i, ], ), ;, }, if, (, iter, ==, robustnessIters]
[), ;, }, if, (, iter, ==, robustnessIters, ), {, break, ;, }, System, ., arraycopy, (, residuals, ,, 0]
[-, res, [, i, ], ), ;, }, if, (, iter, ==, robustnessIters, ), {, break, ;, }, System, .]
[[, i, ], -, res, [, i, ], ), ;, }, if, (, iter, ==, robustnessIters, ), {, break, ;]
[], -, res, [, i, ], ), ;, }, if, (, iter, ==, robustnessIters, ), {, break, ;, }, System]
[), ;, }, if, (, iter, ==, robustnessIters, ), {, break, ;, }, System, ., arraycopy, (, residuals, ,, 0]
[[, i, ], ), ;, }, if, (, iter, ==, robustnessIters, ), {, break, ;, }, System, ., arraycopy, (]
[], ), ;, }, if, (, iter, ==, robustnessIters, ), {, break, ;, }, System, ., arraycopy, (, residuals, ,]
[), {, break, ;, }, System, ., arraycopy, (, residuals, ,, 0, ,, sortedResiduals, ,, 0, ,, n, ), ;]
[==, robustnessIters, ), {, break, ;, }, System, ., arraycopy, (, residuals, ,, 0, ,, sortedResiduals, ,, 0, ,, n]
[), {, break, ;, }, System, ., arraycopy, (, residuals, ,, 0, ,, sortedResiduals, ,, 0, ,, n, ), ;]
[;, Arrays, ., sort, (, sortedResiduals, ), ;, final, double, medianResidual, =, sortedResiduals, [, n, /, 2, ], ;, if]
[., arraycopy, (, residuals, ,, 0, ,, sortedResiduals, ,, 0, ,, n, ), ;, Arrays, ., sort, (, sortedResiduals, )]
[,, 0, ,, sortedResiduals, ,, 0, ,, n, ), ;, Arrays, ., sort, (, sortedResiduals, ), ;, final, double, medianResidual]
[,, sortedResiduals, ,, 0, ,, n, ), ;, Arrays, ., sort, (, sortedResiduals, ), ;, final, double, medianResidual, =, sortedResiduals]
[,, 0, ,, n, ), ;, Arrays, ., sort, (, sortedResiduals, ), ;, final, double, medianResidual, =, sortedResiduals, [, n]
[,, n, ), ;, Arrays, ., sort, (, sortedResiduals, ), ;, final, double, medianResidual, =, sortedResiduals, [, n, /, 2]
[), ;, Arrays, ., sort, (, sortedResiduals, ), ;, final, double, medianResidual, =, sortedResiduals, [, n, /, 2, ], ;]
[;, final, double, medianResidual, =, sortedResiduals, [, n, /, 2, ], ;, if, (, FastMath, ., abs, (, medianResidual, )]
[., sort, (, sortedResiduals, ), ;, final, double, medianResidual, =, sortedResiduals, [, n, /, 2, ], ;, if, (, FastMath]
[), ;, final, double, medianResidual, =, sortedResiduals, [, n, /, 2, ], ;, if, (, FastMath, ., abs, (, medianResidual]
[;, if, (, FastMath, ., abs, (, medianResidual, ), <, accuracy, ), {, break, ;, }, for, (, int, i]
[[, n, /, 2, ], ;, if, (, FastMath, ., abs, (, medianResidual, ), <, accuracy, ), {, break, ;]
[], ;, if, (, FastMath, ., abs, (, medianResidual, ), <, accuracy, ), {, break, ;, }, for, (, int]
[/, 2, ], ;, if, (, FastMath, ., abs, (, medianResidual, ), <, accuracy, ), {, break, ;, }, for]
[], ;, if, (, FastMath, ., abs, (, medianResidual, ), <, accuracy, ), {, break, ;, }, for, (, int]
[), {, break, ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[<, accuracy, ), {, break, ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i]
[., abs, (, medianResidual, ), <, accuracy, ), {, break, ;, }, for, (, int, i, =, 0, ;, i]
[), <, accuracy, ), {, break, ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[), {, break, ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[;, i, <, n, ;, ++, i, ), {, final, double, arg, =, residuals, [, i, ], /, (, 6]
[;, ++, i, ), {, final, double, arg, =, residuals, [, i, ], /, (, 6, *, medianResidual, ), ;]
[<, n, ;, ++, i, ), {, final, double, arg, =, residuals, [, i, ], /, (, 6, *, medianResidual]
[;, ++, i, ), {, final, double, arg, =, residuals, [, i, ], /, (, 6, *, medianResidual, ), ;]
[), {, final, double, arg, =, residuals, [, i, ], /, (, 6, *, medianResidual, ), ;, if, (, arg]
[), {, final, double, arg, =, residuals, [, i, ], /, (, 6, *, medianResidual, ), ;, if, (, arg]
[;, if, (, arg, >=, 1, ), {, robustnessWeights, [, i, ], =, 0, ;, }, else, {, final, double]
[/, (, 6, *, medianResidual, ), ;, if, (, arg, >=, 1, ), {, robustnessWeights, [, i, ], =, 0]
[[, i, ], /, (, 6, *, medianResidual, ), ;, if, (, arg, >=, 1, ), {, robustnessWeights, [, i]
[], /, (, 6, *, medianResidual, ), ;, if, (, arg, >=, 1, ), {, robustnessWeights, [, i, ], =]
[;, if, (, arg, >=, 1, ), {, robustnessWeights, [, i, ], =, 0, ;, }, else, {, final, double]
[), ;, if, (, arg, >=, 1, ), {, robustnessWeights, [, i, ], =, 0, ;, }, else, {, final]
[*, medianResidual, ), ;, if, (, arg, >=, 1, ), {, robustnessWeights, [, i, ], =, 0, ;, }, else]
[), ;, if, (, arg, >=, 1, ), {, robustnessWeights, [, i, ], =, 0, ;, }, else, {, final]
[), {, robustnessWeights, [, i, ], =, 0, ;, }, else, {, final, double, w, =, 1, -, arg, *]
[>=, 1, ), {, robustnessWeights, [, i, ], =, 0, ;, }, else, {, final, double, w, =, 1, -]
[), {, robustnessWeights, [, i, ], =, 0, ;, }, else, {, final, double, w, =, 1, -, arg, *]
[=, 0, ;, }, else, {, final, double, w, =, 1, -, arg, *, arg, ;, robustnessWeights, [, i, ]]
[[, i, ], =, 0, ;, }, else, {, final, double, w, =, 1, -, arg, *, arg, ;, robustnessWeights]
[], =, 0, ;, }, else, {, final, double, w, =, 1, -, arg, *, arg, ;, robustnessWeights, [, i]
[;, }, else, {, final, double, w, =, 1, -, arg, *, arg, ;, robustnessWeights, [, i, ], =, w]
[;, robustnessWeights, [, i, ], =, w, *, w, ;, }, }, }, return, res, ;, }, public, final, double]
[-, arg, *, arg, ;, robustnessWeights, [, i, ], =, w, *, w, ;, }, }, }, return, res, ;]
[;, robustnessWeights, [, i, ], =, w, *, w, ;, }, }, }, return, res, ;, }, public, final, double]
[*, arg, ;, robustnessWeights, [, i, ], =, w, *, w, ;, }, }, }, return, res, ;, }, public]
[;, robustnessWeights, [, i, ], =, w, *, w, ;, }, }, }, return, res, ;, }, public, final, double]
[=, w, *, w, ;, }, }, }, return, res, ;, }, public, final, double, [, ], smooth, (, final]
[[, i, ], =, w, *, w, ;, }, }, }, return, res, ;, }, public, final, double, [, ]]
[], =, w, *, w, ;, }, }, }, return, res, ;, }, public, final, double, [, ], smooth, (]
[;, }, }, }, return, res, ;, }, public, final, double, [, ], smooth, (, final, double, [, ], xval]
[*, w, ;, }, }, }, return, res, ;, }, public, final, double, [, ], smooth, (, final, double, []
[;, }, }, }, return, res, ;, }, public, final, double, [, ], smooth, (, final, double, [, ], xval]
[;, }, public, final, double, [, ], smooth, (, final, double, [, ], xval, ,, final, double, [, ], yval]
[), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, ), ;, }, final, double, [, ]]
[!=, yval, ., length, ), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, ), ;, }]
[., length, !=, yval, ., length, ), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, )]
[), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, ), ;, }, final, double, [, ]]
[., length, ), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, ), ;, }, final, double]
[;, }, final, double, [, ], unitWeights, =, new, double, [, xval, ., length, ], ;, Arrays, ., fill, (]
[,, yval, ., length, ), ;, }, final, double, [, ], unitWeights, =, new, double, [, xval, ., length, ]]
[., length, ,, yval, ., length, ), ;, }, final, double, [, ], unitWeights, =, new, double, [, xval, .]
[), ;, }, final, double, [, ], unitWeights, =, new, double, [, xval, ., length, ], ;, Arrays, ., fill]
[., length, ), ;, }, final, double, [, ], unitWeights, =, new, double, [, xval, ., length, ], ;, Arrays]
[;, Arrays, ., fill, (, unitWeights, ,, 1.0, ), ;, return, smooth, (, xval, ,, yval, ,, unitWeights, ), ;]
[], ;, Arrays, ., fill, (, unitWeights, ,, 1.0, ), ;, return, smooth, (, xval, ,, yval, ,, unitWeights, )]
[., length, ], ;, Arrays, ., fill, (, unitWeights, ,, 1.0, ), ;, return, smooth, (, xval, ,, yval, ,]
[;, return, smooth, (, xval, ,, yval, ,, unitWeights, ), ;, }, private, static, void, updateBandwidthInterval, (, final, double, []
[., fill, (, unitWeights, ,, 1.0, ), ;, return, smooth, (, xval, ,, yval, ,, unitWeights, ), ;, }, private]
[,, 1.0, ), ;, return, smooth, (, xval, ,, yval, ,, unitWeights, ), ;, }, private, static, void, updateBandwidthInterval, (]
[), ;, return, smooth, (, xval, ,, yval, ,, unitWeights, ), ;, }, private, static, void, updateBandwidthInterval, (, final, double]
[;, }, private, static, void, updateBandwidthInterval, (, final, double, [, ], xval, ,, final, double, [, ], weights, ,, final]
[,, yval, ,, unitWeights, ), ;, }, private, static, void, updateBandwidthInterval, (, final, double, [, ], xval, ,, final, double]
[,, unitWeights, ), ;, }, private, static, void, updateBandwidthInterval, (, final, double, [, ], xval, ,, final, double, [, ]]
[), ;, }, private, static, void, updateBandwidthInterval, (, final, double, [, ], xval, ,, final, double, [, ], weights, ,]
[;, final, int, right, =, bandwidthInterval, [, 1, ], ;, int, nextRight, =, nextNonzero, (, weights, ,, right, ), ;]
[[, 0, ], ;, final, int, right, =, bandwidthInterval, [, 1, ], ;, int, nextRight, =, nextNonzero, (, weights, ,]
[], ;, final, int, right, =, bandwidthInterval, [, 1, ], ;, int, nextRight, =, nextNonzero, (, weights, ,, right, )]
[;, int, nextRight, =, nextNonzero, (, weights, ,, right, ), ;, if, (, nextRight, <, xval, ., length, &&, xval]
[[, 1, ], ;, int, nextRight, =, nextNonzero, (, weights, ,, right, ), ;, if, (, nextRight, <, xval, .]
[], ;, int, nextRight, =, nextNonzero, (, weights, ,, right, ), ;, if, (, nextRight, <, xval, ., length, &&]
[;, if, (, nextRight, <, xval, ., length, &&, xval, [, nextRight, ], -, xval, [, i, ], <, xval]
[,, right, ), ;, if, (, nextRight, <, xval, ., length, &&, xval, [, nextRight, ], -, xval, [, i]
[), ;, if, (, nextRight, <, xval, ., length, &&, xval, [, nextRight, ], -, xval, [, i, ], <]
[), {, int, nextLeft, =, nextNonzero, (, weights, ,, bandwidthInterval, [, 0, ], ), ;, bandwidthInterval, [, 0, ], =]
[&&, xval, [, nextRight, ], -, xval, [, i, ], <, xval, [, i, ], -, xval, [, left, ]]
[<, xval, ., length, &&, xval, [, nextRight, ], -, xval, [, i, ], <, xval, [, i, ], -]
[&&, xval, [, nextRight, ], -, xval, [, i, ], <, xval, [, i, ], -, xval, [, left, ]]
[., length, &&, xval, [, nextRight, ], -, xval, [, i, ], <, xval, [, i, ], -, xval, []
[), {, int, nextLeft, =, nextNonzero, (, weights, ,, bandwidthInterval, [, 0, ], ), ;, bandwidthInterval, [, 0, ], =]
[<, xval, [, i, ], -, xval, [, left, ], ), {, int, nextLeft, =, nextNonzero, (, weights, ,, bandwidthInterval]
[-, xval, [, i, ], <, xval, [, i, ], -, xval, [, left, ], ), {, int, nextLeft, =]
[[, nextRight, ], -, xval, [, i, ], <, xval, [, i, ], -, xval, [, left, ], ), {]
[], -, xval, [, i, ], <, xval, [, i, ], -, xval, [, left, ], ), {, int, nextLeft]
[<, xval, [, i, ], -, xval, [, left, ], ), {, int, nextLeft, =, nextNonzero, (, weights, ,, bandwidthInterval]
[[, i, ], <, xval, [, i, ], -, xval, [, left, ], ), {, int, nextLeft, =, nextNonzero, (]
[], <, xval, [, i, ], -, xval, [, left, ], ), {, int, nextLeft, =, nextNonzero, (, weights, ,]
[), {, int, nextLeft, =, nextNonzero, (, weights, ,, bandwidthInterval, [, 0, ], ), ;, bandwidthInterval, [, 0, ], =]
[-, xval, [, left, ], ), {, int, nextLeft, =, nextNonzero, (, weights, ,, bandwidthInterval, [, 0, ], ), ;]
[[, i, ], -, xval, [, left, ], ), {, int, nextLeft, =, nextNonzero, (, weights, ,, bandwidthInterval, [, 0]
[], -, xval, [, left, ], ), {, int, nextLeft, =, nextNonzero, (, weights, ,, bandwidthInterval, [, 0, ], )]
[), {, int, nextLeft, =, nextNonzero, (, weights, ,, bandwidthInterval, [, 0, ], ), ;, bandwidthInterval, [, 0, ], =]
[[, left, ], ), {, int, nextLeft, =, nextNonzero, (, weights, ,, bandwidthInterval, [, 0, ], ), ;, bandwidthInterval, []
[], ), {, int, nextLeft, =, nextNonzero, (, weights, ,, bandwidthInterval, [, 0, ], ), ;, bandwidthInterval, [, 0, ]]
[;, bandwidthInterval, [, 0, ], =, nextLeft, ;, bandwidthInterval, [, 1, ], =, nextRight, ;, }, }, private, static, int]
[,, bandwidthInterval, [, 0, ], ), ;, bandwidthInterval, [, 0, ], =, nextLeft, ;, bandwidthInterval, [, 1, ], =, nextRight]
[), ;, bandwidthInterval, [, 0, ], =, nextLeft, ;, bandwidthInterval, [, 1, ], =, nextRight, ;, }, }, private, static]
[[, 0, ], ), ;, bandwidthInterval, [, 0, ], =, nextLeft, ;, bandwidthInterval, [, 1, ], =, nextRight, ;, }]
[], ), ;, bandwidthInterval, [, 0, ], =, nextLeft, ;, bandwidthInterval, [, 1, ], =, nextRight, ;, }, }, private]
[=, nextLeft, ;, bandwidthInterval, [, 1, ], =, nextRight, ;, }, }, private, static, int, nextNonzero, (, final, double, []
[[, 0, ], =, nextLeft, ;, bandwidthInterval, [, 1, ], =, nextRight, ;, }, }, private, static, int, nextNonzero, (]
[], =, nextLeft, ;, bandwidthInterval, [, 1, ], =, nextRight, ;, }, }, private, static, int, nextNonzero, (, final, double]
[;, bandwidthInterval, [, 1, ], =, nextRight, ;, }, }, private, static, int, nextNonzero, (, final, double, [, ], weights]
[=, nextRight, ;, }, }, private, static, int, nextNonzero, (, final, double, [, ], weights, ,, final, int, i, )]
[[, 1, ], =, nextRight, ;, }, }, private, static, int, nextNonzero, (, final, double, [, ], weights, ,, final]
[], =, nextRight, ;, }, }, private, static, int, nextNonzero, (, final, double, [, ], weights, ,, final, int, i]
[;, }, }, private, static, int, nextNonzero, (, final, double, [, ], weights, ,, final, int, i, ), {, int]
[;, while, (, j, <, weights, ., length, &&, weights, [, j, ], ==, 0, ), {, ++, j, ;]
[+, 1, ;, while, (, j, <, weights, ., length, &&, weights, [, j, ], ==, 0, ), {, ++]
[;, while, (, j, <, weights, ., length, &&, weights, [, j, ], ==, 0, ), {, ++, j, ;]
[), {, ++, j, ;, }, return, j, ;, }, private, static, double, tricube, (, final, double, x, ), {]
[&&, weights, [, j, ], ==, 0, ), {, ++, j, ;, }, return, j, ;, }, private, static, double]
[<, weights, ., length, &&, weights, [, j, ], ==, 0, ), {, ++, j, ;, }, return, j, ;]
[&&, weights, [, j, ], ==, 0, ), {, ++, j, ;, }, return, j, ;, }, private, static, double]
[., length, &&, weights, [, j, ], ==, 0, ), {, ++, j, ;, }, return, j, ;, }, private]
[), {, ++, j, ;, }, return, j, ;, }, private, static, double, tricube, (, final, double, x, ), {]
[==, 0, ), {, ++, j, ;, }, return, j, ;, }, private, static, double, tricube, (, final, double, x]
[[, j, ], ==, 0, ), {, ++, j, ;, }, return, j, ;, }, private, static, double, tricube, (]
[], ==, 0, ), {, ++, j, ;, }, return, j, ;, }, private, static, double, tricube, (, final, double]
[), {, ++, j, ;, }, return, j, ;, }, private, static, double, tricube, (, final, double, x, ), {]
[;, }, return, j, ;, }, private, static, double, tricube, (, final, double, x, ), {, final, double, absX, =]
[;, }, return, j, ;, }, private, static, double, tricube, (, final, double, x, ), {, final, double, absX, =]
[;, }, private, static, double, tricube, (, final, double, x, ), {, final, double, absX, =, FastMath, ., abs, (]
[;, if, (, absX, >=, 1.0, ), {, return, 0.0, ;, }, final, double, tmp, =, 1, -, absX, *]
[., abs, (, x, ), ;, if, (, absX, >=, 1.0, ), {, return, 0.0, ;, }, final, double, tmp]
[), ;, if, (, absX, >=, 1.0, ), {, return, 0.0, ;, }, final, double, tmp, =, 1, -, absX]
[), {, return, 0.0, ;, }, final, double, tmp, =, 1, -, absX, *, absX, *, absX, ;, return, tmp]
[>=, 1.0, ), {, return, 0.0, ;, }, final, double, tmp, =, 1, -, absX, *, absX, *, absX, ;]
[), {, return, 0.0, ;, }, final, double, tmp, =, 1, -, absX, *, absX, *, absX, ;, return, tmp]
[;, }, final, double, tmp, =, 1, -, absX, *, absX, *, absX, ;, return, tmp, *, tmp, *, tmp]
[;, return, tmp, *, tmp, *, tmp, ;, }, private, static, void, checkAllFiniteReal, (, final, double, [, ], values, )]
[-, absX, *, absX, *, absX, ;, return, tmp, *, tmp, *, tmp, ;, }, private, static, void, checkAllFiniteReal, (]
[;, return, tmp, *, tmp, *, tmp, ;, }, private, static, void, checkAllFiniteReal, (, final, double, [, ], values, )]
[*, absX, ;, return, tmp, *, tmp, *, tmp, ;, }, private, static, void, checkAllFiniteReal, (, final, double, [, ]]
[*, absX, *, absX, ;, return, tmp, *, tmp, *, tmp, ;, }, private, static, void, checkAllFiniteReal, (, final, double]
[*, absX, ;, return, tmp, *, tmp, *, tmp, ;, }, private, static, void, checkAllFiniteReal, (, final, double, [, ]]
[;, return, tmp, *, tmp, *, tmp, ;, }, private, static, void, checkAllFiniteReal, (, final, double, [, ], values, )]
[;, }, private, static, void, checkAllFiniteReal, (, final, double, [, ], values, ), {, for, (, int, i, =, 0]
[*, tmp, ;, }, private, static, void, checkAllFiniteReal, (, final, double, [, ], values, ), {, for, (, int, i]
[*, tmp, *, tmp, ;, }, private, static, void, checkAllFiniteReal, (, final, double, [, ], values, ), {, for, (]
[*, tmp, ;, }, private, static, void, checkAllFiniteReal, (, final, double, [, ], values, ), {, for, (, int, i]
[;, }, private, static, void, checkAllFiniteReal, (, final, double, [, ], values, ), {, for, (, int, i, =, 0]
[;, i, <, values, ., length, ;, i, ++, ), {, MathUtils, ., checkFinite, (, values, [, i, ], )]
[;, i, ++, ), {, MathUtils, ., checkFinite, (, values, [, i, ], ), ;, }, }, }]
[<, values, ., length, ;, i, ++, ), {, MathUtils, ., checkFinite, (, values, [, i, ], ), ;, }]
[;, i, ++, ), {, MathUtils, ., checkFinite, (, values, [, i, ], ), ;, }, }, }]
[., length, ;, i, ++, ), {, MathUtils, ., checkFinite, (, values, [, i, ], ), ;, }, }, }]
[), {, MathUtils, ., checkFinite, (, values, [, i, ], ), ;, }, }, }]
[++, ), {, MathUtils, ., checkFinite, (, values, [, i, ], ), ;, }, }, }]
[;, }, }, }]
[., checkFinite, (, values, [, i, ], ), ;, }, }, }]
[), ;, }, }, }]
[[, i, ], ), ;, }, }, }]
[], ), ;, }, }, }]
