[=, new, ArrayList, <, Double, >, (, ), ;, this, ., topDiagonal, =, new, ArrayList, <, double, [, ], >]
[., abscissae, =, new, ArrayList, <, Double, >, (, ), ;, this, ., topDiagonal, =, new, ArrayList, <, double, []
[;, this, ., topDiagonal, =, new, ArrayList, <, double, [, ], >, (, ), ;, this, ., bottomDiagonal, =, new]
[=, new, ArrayList, <, double, [, ], >, (, ), ;, this, ., bottomDiagonal, =, new, ArrayList, <, double, []
[., topDiagonal, =, new, ArrayList, <, double, [, ], >, (, ), ;, this, ., bottomDiagonal, =, new, ArrayList, <]
[;, this, ., bottomDiagonal, =, new, ArrayList, <, double, [, ], >, (, ), ;, }, public, void, addSamplePoint, (]
[=, new, ArrayList, <, double, [, ], >, (, ), ;, }, public, void, addSamplePoint, (, final, double, x, ,]
[., bottomDiagonal, =, new, ArrayList, <, double, [, ], >, (, ), ;, }, public, void, addSamplePoint, (, final, double]
[;, }, public, void, addSamplePoint, (, final, double, x, ,, final, double, [, ], ..., value, ), throws, ZeroException, ,]
[;, i, <, value, ., length, ;, ++, i, ), {, final, double, [, ], y, =, value, [, i]
[;, ++, i, ), {, final, double, [, ], y, =, value, [, i, ], ., clone, (, ), ;]
[<, value, ., length, ;, ++, i, ), {, final, double, [, ], y, =, value, [, i, ], .]
[;, ++, i, ), {, final, double, [, ], y, =, value, [, i, ], ., clone, (, ), ;]
[., length, ;, ++, i, ), {, final, double, [, ], y, =, value, [, i, ], ., clone, (]
[), {, final, double, [, ], y, =, value, [, i, ], ., clone, (, ), ;, if, (, i]
[), {, final, double, [, ], y, =, value, [, i, ], ., clone, (, ), ;, if, (, i]
[;, if, (, i, >, 1, ), {, double, inv, =, 1.0, /, CombinatoricsUtils, ., factorial, (, i, ), ;]
[., clone, (, ), ;, if, (, i, >, 1, ), {, double, inv, =, 1.0, /, CombinatoricsUtils, ., factorial]
[[, i, ], ., clone, (, ), ;, if, (, i, >, 1, ), {, double, inv, =, 1.0, /]
[], ., clone, (, ), ;, if, (, i, >, 1, ), {, double, inv, =, 1.0, /, CombinatoricsUtils, .]
[), {, double, inv, =, 1.0, /, CombinatoricsUtils, ., factorial, (, i, ), ;, for, (, int, j, =, 0]
[>, 1, ), {, double, inv, =, 1.0, /, CombinatoricsUtils, ., factorial, (, i, ), ;, for, (, int, j]
[), {, double, inv, =, 1.0, /, CombinatoricsUtils, ., factorial, (, i, ), ;, for, (, int, j, =, 0]
[;, for, (, int, j, =, 0, ;, j, <, y, ., length, ;, ++, j, ), {, y, []
[/, CombinatoricsUtils, ., factorial, (, i, ), ;, for, (, int, j, =, 0, ;, j, <, y, ., length]
[;, for, (, int, j, =, 0, ;, j, <, y, ., length, ;, ++, j, ), {, y, []
[., factorial, (, i, ), ;, for, (, int, j, =, 0, ;, j, <, y, ., length, ;, ++]
[), ;, for, (, int, j, =, 0, ;, j, <, y, ., length, ;, ++, j, ), {, y]
[;, j, <, y, ., length, ;, ++, j, ), {, y, [, j, ], *=, inv, ;, }, }]
[;, ++, j, ), {, y, [, j, ], *=, inv, ;, }, }, final, int, n, =, abscissae, .]
[<, y, ., length, ;, ++, j, ), {, y, [, j, ], *=, inv, ;, }, }, final, int]
[;, ++, j, ), {, y, [, j, ], *=, inv, ;, }, }, final, int, n, =, abscissae, .]
[., length, ;, ++, j, ), {, y, [, j, ], *=, inv, ;, }, }, final, int, n, =]
[), {, y, [, j, ], *=, inv, ;, }, }, final, int, n, =, abscissae, ., size, (, )]
[), {, y, [, j, ], *=, inv, ;, }, }, final, int, n, =, abscissae, ., size, (, )]
[*=, inv, ;, }, }, final, int, n, =, abscissae, ., size, (, ), ;, bottomDiagonal, ., add, (, n]
[[, j, ], *=, inv, ;, }, }, final, int, n, =, abscissae, ., size, (, ), ;, bottomDiagonal, .]
[], *=, inv, ;, }, }, final, int, n, =, abscissae, ., size, (, ), ;, bottomDiagonal, ., add, (]
[;, }, }, final, int, n, =, abscissae, ., size, (, ), ;, bottomDiagonal, ., add, (, n, -, i]
[;, bottomDiagonal, ., add, (, n, -, i, ,, y, ), ;, double, [, ], bottom0, =, y, ;, for]
[., size, (, ), ;, bottomDiagonal, ., add, (, n, -, i, ,, y, ), ;, double, [, ], bottom0]
[;, double, [, ], bottom0, =, y, ;, for, (, int, j, =, i, ;, j, <, n, ;, ++]
[., add, (, n, -, i, ,, y, ), ;, double, [, ], bottom0, =, y, ;, for, (, int]
[,, y, ), ;, double, [, ], bottom0, =, y, ;, for, (, int, j, =, i, ;, j, <]
[-, i, ,, y, ), ;, double, [, ], bottom0, =, y, ;, for, (, int, j, =, i, ;]
[,, y, ), ;, double, [, ], bottom0, =, y, ;, for, (, int, j, =, i, ;, j, <]
[), ;, double, [, ], bottom0, =, y, ;, for, (, int, j, =, i, ;, j, <, n, ;]
[;, for, (, int, j, =, i, ;, j, <, n, ;, ++, j, ), {, final, double, [, ]]
[;, j, <, n, ;, ++, j, ), {, final, double, [, ], bottom1, =, bottomDiagonal, ., get, (, n]
[;, ++, j, ), {, final, double, [, ], bottom1, =, bottomDiagonal, ., get, (, n, -, (, j, +]
[<, n, ;, ++, j, ), {, final, double, [, ], bottom1, =, bottomDiagonal, ., get, (, n, -, (]
[;, ++, j, ), {, final, double, [, ], bottom1, =, bottomDiagonal, ., get, (, n, -, (, j, +]
[), {, final, double, [, ], bottom1, =, bottomDiagonal, ., get, (, n, -, (, j, +, 1, ), )]
[), {, final, double, [, ], bottom1, =, bottomDiagonal, ., get, (, n, -, (, j, +, 1, ), )]
[;, final, double, inv, =, 1.0, /, (, x, -, abscissae, ., get, (, n, -, (, j, +, 1]
[., get, (, n, -, (, j, +, 1, ), ), ;, final, double, inv, =, 1.0, /, (, x]
[), ;, final, double, inv, =, 1.0, /, (, x, -, abscissae, ., get, (, n, -, (, j, +]
[-, (, j, +, 1, ), ), ;, final, double, inv, =, 1.0, /, (, x, -, abscissae, ., get]
[), ;, final, double, inv, =, 1.0, /, (, x, -, abscissae, ., get, (, n, -, (, j, +]
[), ), ;, final, double, inv, =, 1.0, /, (, x, -, abscissae, ., get, (, n, -, (, j]
[+, 1, ), ), ;, final, double, inv, =, 1.0, /, (, x, -, abscissae, ., get, (, n, -]
[), ), ;, final, double, inv, =, 1.0, /, (, x, -, abscissae, ., get, (, n, -, (, j]
[;, if, (, Double, ., isInfinite, (, inv, ), ), {, throw, new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x]
[/, (, x, -, abscissae, ., get, (, n, -, (, j, +, 1, ), ), ), ;, if, (]
[;, if, (, Double, ., isInfinite, (, inv, ), ), {, throw, new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x]
[), ;, if, (, Double, ., isInfinite, (, inv, ), ), {, throw, new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,]
[-, abscissae, ., get, (, n, -, (, j, +, 1, ), ), ), ;, if, (, Double, ., isInfinite]
[), ;, if, (, Double, ., isInfinite, (, inv, ), ), {, throw, new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,]
[., get, (, n, -, (, j, +, 1, ), ), ), ;, if, (, Double, ., isInfinite, (, inv]
[), ), ;, if, (, Double, ., isInfinite, (, inv, ), ), {, throw, new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO]
[-, (, j, +, 1, ), ), ), ;, if, (, Double, ., isInfinite, (, inv, ), ), {, throw]
[), ), ;, if, (, Double, ., isInfinite, (, inv, ), ), {, throw, new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO]
[), ), ), ;, if, (, Double, ., isInfinite, (, inv, ), ), {, throw, new, ZeroException, (, LocalizedFormats, .]
[+, 1, ), ), ), ;, if, (, Double, ., isInfinite, (, inv, ), ), {, throw, new, ZeroException, (]
[), ), ), ;, if, (, Double, ., isInfinite, (, inv, ), ), {, throw, new, ZeroException, (, LocalizedFormats, .]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x, ), ;, }, for, (, int, k, =, 0]
[., isInfinite, (, inv, ), ), {, throw, new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x, ), ;, }, for]
[), ), {, throw, new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x, ), ;, }, for, (, int, k, =]
[;, }, for, (, int, k, =, 0, ;, k, <, y, ., length, ;, ++, k, ), {, bottom1]
[,, x, ), ;, }, for, (, int, k, =, 0, ;, k, <, y, ., length, ;, ++, k]
[., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x, ), ;, }, for, (, int, k, =, 0, ;, k, <, y, ., length, ;]
[), ;, }, for, (, int, k, =, 0, ;, k, <, y, ., length, ;, ++, k, ), {]
[;, k, <, y, ., length, ;, ++, k, ), {, bottom1, [, k, ], =, inv, *, (, bottom0]
[;, ++, k, ), {, bottom1, [, k, ], =, inv, *, (, bottom0, [, k, ], -, bottom1, []
[<, y, ., length, ;, ++, k, ), {, bottom1, [, k, ], =, inv, *, (, bottom0, [, k]
[;, ++, k, ), {, bottom1, [, k, ], =, inv, *, (, bottom0, [, k, ], -, bottom1, []
[., length, ;, ++, k, ), {, bottom1, [, k, ], =, inv, *, (, bottom0, [, k, ], -]
[), {, bottom1, [, k, ], =, inv, *, (, bottom0, [, k, ], -, bottom1, [, k, ], )]
[), {, bottom1, [, k, ], =, inv, *, (, bottom0, [, k, ], -, bottom1, [, k, ], )]
[=, inv, *, (, bottom0, [, k, ], -, bottom1, [, k, ], ), ;, }, bottom0, =, bottom1, ;]
[[, k, ], =, inv, *, (, bottom0, [, k, ], -, bottom1, [, k, ], ), ;, }, bottom0]
[], =, inv, *, (, bottom0, [, k, ], -, bottom1, [, k, ], ), ;, }, bottom0, =, bottom1]
[;, }, bottom0, =, bottom1, ;, }, topDiagonal, ., add, (, bottom0, ., clone, (, ), ), ;, abscissae, .]
[*, (, bottom0, [, k, ], -, bottom1, [, k, ], ), ;, }, bottom0, =, bottom1, ;, }, topDiagonal]
[;, }, bottom0, =, bottom1, ;, }, topDiagonal, ., add, (, bottom0, ., clone, (, ), ), ;, abscissae, .]
[), ;, }, bottom0, =, bottom1, ;, }, topDiagonal, ., add, (, bottom0, ., clone, (, ), ), ;, abscissae]
[-, bottom1, [, k, ], ), ;, }, bottom0, =, bottom1, ;, }, topDiagonal, ., add, (, bottom0, ., clone]
[[, k, ], -, bottom1, [, k, ], ), ;, }, bottom0, =, bottom1, ;, }, topDiagonal, ., add, (]
[], -, bottom1, [, k, ], ), ;, }, bottom0, =, bottom1, ;, }, topDiagonal, ., add, (, bottom0, .]
[), ;, }, bottom0, =, bottom1, ;, }, topDiagonal, ., add, (, bottom0, ., clone, (, ), ), ;, abscissae]
[[, k, ], ), ;, }, bottom0, =, bottom1, ;, }, topDiagonal, ., add, (, bottom0, ., clone, (, )]
[], ), ;, }, bottom0, =, bottom1, ;, }, topDiagonal, ., add, (, bottom0, ., clone, (, ), ), ;]
[=, bottom1, ;, }, topDiagonal, ., add, (, bottom0, ., clone, (, ), ), ;, abscissae, ., add, (, x]
[;, }, topDiagonal, ., add, (, bottom0, ., clone, (, ), ), ;, abscissae, ., add, (, x, ), ;]
[;, abscissae, ., add, (, x, ), ;, }, }, public, PolynomialFunction, [, ], getPolynomials, (, ), throws, NoDataException, {]
[., add, (, bottom0, ., clone, (, ), ), ;, abscissae, ., add, (, x, ), ;, }, }, public]
[), ;, abscissae, ., add, (, x, ), ;, }, }, public, PolynomialFunction, [, ], getPolynomials, (, ), throws, NoDataException]
[., clone, (, ), ), ;, abscissae, ., add, (, x, ), ;, }, }, public, PolynomialFunction, [, ], getPolynomials]
[;, }, }, public, PolynomialFunction, [, ], getPolynomials, (, ), throws, NoDataException, {, checkInterpolation, (, ), ;, final, PolynomialFunction, zero]
[., add, (, x, ), ;, }, }, public, PolynomialFunction, [, ], getPolynomials, (, ), throws, NoDataException, {, checkInterpolation, (]
[), ;, }, }, public, PolynomialFunction, [, ], getPolynomials, (, ), throws, NoDataException, {, checkInterpolation, (, ), ;, final, PolynomialFunction]
[;, final, PolynomialFunction, zero, =, polynomial, (, 0, ), ;, PolynomialFunction, [, ], polynomials, =, new, PolynomialFunction, [, topDiagonal, .]
[;, PolynomialFunction, [, ], polynomials, =, new, PolynomialFunction, [, topDiagonal, ., get, (, 0, ), ., length, ], ;, for]
[), ;, PolynomialFunction, [, ], polynomials, =, new, PolynomialFunction, [, topDiagonal, ., get, (, 0, ), ., length, ], ;]
[;, for, (, int, i, =, 0, ;, i, <, polynomials, ., length, ;, ++, i, ), {, polynomials, []
[], ;, for, (, int, i, =, 0, ;, i, <, polynomials, ., length, ;, ++, i, ), {, polynomials]
[., length, ], ;, for, (, int, i, =, 0, ;, i, <, polynomials, ., length, ;, ++, i, )]
[., get, (, 0, ), ., length, ], ;, for, (, int, i, =, 0, ;, i, <, polynomials, .]
[), ., length, ], ;, for, (, int, i, =, 0, ;, i, <, polynomials, ., length, ;, ++, i]
[;, i, <, polynomials, ., length, ;, ++, i, ), {, polynomials, [, i, ], =, zero, ;, }, PolynomialFunction]
[;, ++, i, ), {, polynomials, [, i, ], =, zero, ;, }, PolynomialFunction, coeff, =, polynomial, (, 1, )]
[<, polynomials, ., length, ;, ++, i, ), {, polynomials, [, i, ], =, zero, ;, }, PolynomialFunction, coeff, =]
[;, ++, i, ), {, polynomials, [, i, ], =, zero, ;, }, PolynomialFunction, coeff, =, polynomial, (, 1, )]
[., length, ;, ++, i, ), {, polynomials, [, i, ], =, zero, ;, }, PolynomialFunction, coeff, =, polynomial, (]
[), {, polynomials, [, i, ], =, zero, ;, }, PolynomialFunction, coeff, =, polynomial, (, 1, ), ;, for, (]
[), {, polynomials, [, i, ], =, zero, ;, }, PolynomialFunction, coeff, =, polynomial, (, 1, ), ;, for, (]
[=, zero, ;, }, PolynomialFunction, coeff, =, polynomial, (, 1, ), ;, for, (, int, i, =, 0, ;, i]
[[, i, ], =, zero, ;, }, PolynomialFunction, coeff, =, polynomial, (, 1, ), ;, for, (, int, i, =]
[], =, zero, ;, }, PolynomialFunction, coeff, =, polynomial, (, 1, ), ;, for, (, int, i, =, 0, ;]
[;, }, PolynomialFunction, coeff, =, polynomial, (, 1, ), ;, for, (, int, i, =, 0, ;, i, <, topDiagonal]
[;, for, (, int, i, =, 0, ;, i, <, topDiagonal, ., size, (, ), ;, ++, i, ), {]
[), ;, for, (, int, i, =, 0, ;, i, <, topDiagonal, ., size, (, ), ;, ++, i, )]
[;, i, <, topDiagonal, ., size, (, ), ;, ++, i, ), {, double, [, ], tdi, =, topDiagonal, .]
[;, ++, i, ), {, double, [, ], tdi, =, topDiagonal, ., get, (, i, ), ;, for, (, int]
[<, topDiagonal, ., size, (, ), ;, ++, i, ), {, double, [, ], tdi, =, topDiagonal, ., get, (]
[;, ++, i, ), {, double, [, ], tdi, =, topDiagonal, ., get, (, i, ), ;, for, (, int]
[., size, (, ), ;, ++, i, ), {, double, [, ], tdi, =, topDiagonal, ., get, (, i, )]
[), {, double, [, ], tdi, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0]
[), {, double, [, ], tdi, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0]
[;, for, (, int, k, =, 0, ;, k, <, polynomials, ., length, ;, ++, k, ), {, polynomials, []
[., get, (, i, ), ;, for, (, int, k, =, 0, ;, k, <, polynomials, ., length, ;, ++]
[), ;, for, (, int, k, =, 0, ;, k, <, polynomials, ., length, ;, ++, k, ), {, polynomials]
[;, k, <, polynomials, ., length, ;, ++, k, ), {, polynomials, [, k, ], =, polynomials, [, k, ]]
[;, ++, k, ), {, polynomials, [, k, ], =, polynomials, [, k, ], ., add, (, coeff, ., multiply]
[<, polynomials, ., length, ;, ++, k, ), {, polynomials, [, k, ], =, polynomials, [, k, ], ., add]
[;, ++, k, ), {, polynomials, [, k, ], =, polynomials, [, k, ], ., add, (, coeff, ., multiply]
[., length, ;, ++, k, ), {, polynomials, [, k, ], =, polynomials, [, k, ], ., add, (, coeff]
[), {, polynomials, [, k, ], =, polynomials, [, k, ], ., add, (, coeff, ., multiply, (, polynomial, (]
[), {, polynomials, [, k, ], =, polynomials, [, k, ], ., add, (, coeff, ., multiply, (, polynomial, (]
[=, polynomials, [, k, ], ., add, (, coeff, ., multiply, (, polynomial, (, tdi, [, k, ], ), )]
[[, k, ], =, polynomials, [, k, ], ., add, (, coeff, ., multiply, (, polynomial, (, tdi, [, k]
[], =, polynomials, [, k, ], ., add, (, coeff, ., multiply, (, polynomial, (, tdi, [, k, ], )]
[;, }, coeff, =, coeff, ., multiply, (, polynomial, (, -, abscissae, ., get, (, i, ), ,, 1.0, )]
[., add, (, coeff, ., multiply, (, polynomial, (, tdi, [, k, ], ), ), ), ;, }, coeff, =]
[[, k, ], ., add, (, coeff, ., multiply, (, polynomial, (, tdi, [, k, ], ), ), ), ;]
[], ., add, (, coeff, ., multiply, (, polynomial, (, tdi, [, k, ], ), ), ), ;, }, coeff]
[), ;, }, coeff, =, coeff, ., multiply, (, polynomial, (, -, abscissae, ., get, (, i, ), ,, 1.0]
[., multiply, (, polynomial, (, tdi, [, k, ], ), ), ), ;, }, coeff, =, coeff, ., multiply, (]
[), ), ;, }, coeff, =, coeff, ., multiply, (, polynomial, (, -, abscissae, ., get, (, i, ), ,]
[), ), ), ;, }, coeff, =, coeff, ., multiply, (, polynomial, (, -, abscissae, ., get, (, i, )]
[[, k, ], ), ), ), ;, }, coeff, =, coeff, ., multiply, (, polynomial, (, -, abscissae, ., get]
[], ), ), ), ;, }, coeff, =, coeff, ., multiply, (, polynomial, (, -, abscissae, ., get, (, i]
[=, coeff, ., multiply, (, polynomial, (, -, abscissae, ., get, (, i, ), ,, 1.0, ), ), ;, }]
[;, }, return, polynomials, ;, }, public, double, [, ], value, (, double, x, ), throws, NoDataException, {, checkInterpolation, (]
[., multiply, (, polynomial, (, -, abscissae, ., get, (, i, ), ,, 1.0, ), ), ;, }, return, polynomials]
[), ;, }, return, polynomials, ;, }, public, double, [, ], value, (, double, x, ), throws, NoDataException, {, checkInterpolation]
[,, 1.0, ), ), ;, }, return, polynomials, ;, }, public, double, [, ], value, (, double, x, ), throws]
[,, 1.0, ), ), ;, }, return, polynomials, ;, }, public, double, [, ], value, (, double, x, ), throws]
[., get, (, i, ), ,, 1.0, ), ), ;, }, return, polynomials, ;, }, public, double, [, ], value]
[), ,, 1.0, ), ), ;, }, return, polynomials, ;, }, public, double, [, ], value, (, double, x, )]
[), ), ;, }, return, polynomials, ;, }, public, double, [, ], value, (, double, x, ), throws, NoDataException, {]
[;, }, public, double, [, ], value, (, double, x, ), throws, NoDataException, {, checkInterpolation, (, ), ;, final, double]
[;, final, double, [, ], value, =, new, double, [, topDiagonal, ., get, (, 0, ), ., length, ], ;]
[;, double, valueCoeff, =, 1, ;, for, (, int, i, =, 0, ;, i, <, topDiagonal, ., size, (, )]
[], ;, double, valueCoeff, =, 1, ;, for, (, int, i, =, 0, ;, i, <, topDiagonal, ., size, (]
[., length, ], ;, double, valueCoeff, =, 1, ;, for, (, int, i, =, 0, ;, i, <, topDiagonal, .]
[., get, (, 0, ), ., length, ], ;, double, valueCoeff, =, 1, ;, for, (, int, i, =, 0]
[), ., length, ], ;, double, valueCoeff, =, 1, ;, for, (, int, i, =, 0, ;, i, <, topDiagonal]
[;, for, (, int, i, =, 0, ;, i, <, topDiagonal, ., size, (, ), ;, ++, i, ), {]
[;, i, <, topDiagonal, ., size, (, ), ;, ++, i, ), {, double, [, ], dividedDifference, =, topDiagonal, .]
[;, ++, i, ), {, double, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int]
[<, topDiagonal, ., size, (, ), ;, ++, i, ), {, double, [, ], dividedDifference, =, topDiagonal, ., get, (]
[;, ++, i, ), {, double, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int]
[., size, (, ), ;, ++, i, ), {, double, [, ], dividedDifference, =, topDiagonal, ., get, (, i, )]
[), {, double, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0]
[), {, double, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0]
[;, for, (, int, k, =, 0, ;, k, <, value, ., length, ;, ++, k, ), {, value, []
[., get, (, i, ), ;, for, (, int, k, =, 0, ;, k, <, value, ., length, ;, ++]
[), ;, for, (, int, k, =, 0, ;, k, <, value, ., length, ;, ++, k, ), {, value]
[;, k, <, value, ., length, ;, ++, k, ), {, value, [, k, ], +=, dividedDifference, [, k, ]]
[;, ++, k, ), {, value, [, k, ], +=, dividedDifference, [, k, ], *, valueCoeff, ;, }, final, double]
[<, value, ., length, ;, ++, k, ), {, value, [, k, ], +=, dividedDifference, [, k, ], *, valueCoeff]
[;, ++, k, ), {, value, [, k, ], +=, dividedDifference, [, k, ], *, valueCoeff, ;, }, final, double]
[., length, ;, ++, k, ), {, value, [, k, ], +=, dividedDifference, [, k, ], *, valueCoeff, ;, }]
[), {, value, [, k, ], +=, dividedDifference, [, k, ], *, valueCoeff, ;, }, final, double, deltaX, =, x]
[), {, value, [, k, ], +=, dividedDifference, [, k, ], *, valueCoeff, ;, }, final, double, deltaX, =, x]
[+=, dividedDifference, [, k, ], *, valueCoeff, ;, }, final, double, deltaX, =, x, -, abscissae, ., get, (, i]
[[, k, ], +=, dividedDifference, [, k, ], *, valueCoeff, ;, }, final, double, deltaX, =, x, -, abscissae, .]
[], +=, dividedDifference, [, k, ], *, valueCoeff, ;, }, final, double, deltaX, =, x, -, abscissae, ., get, (]
[;, }, final, double, deltaX, =, x, -, abscissae, ., get, (, i, ), ;, valueCoeff, *=, deltaX, ;, }]
[*, valueCoeff, ;, }, final, double, deltaX, =, x, -, abscissae, ., get, (, i, ), ;, valueCoeff, *=, deltaX]
[[, k, ], *, valueCoeff, ;, }, final, double, deltaX, =, x, -, abscissae, ., get, (, i, ), ;]
[], *, valueCoeff, ;, }, final, double, deltaX, =, x, -, abscissae, ., get, (, i, ), ;, valueCoeff, *=]
[;, }, final, double, deltaX, =, x, -, abscissae, ., get, (, i, ), ;, valueCoeff, *=, deltaX, ;, }]
[;, valueCoeff, *=, deltaX, ;, }, return, value, ;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, x, )]
[-, abscissae, ., get, (, i, ), ;, valueCoeff, *=, deltaX, ;, }, return, value, ;, }, public, DerivativeStructure, []
[;, valueCoeff, *=, deltaX, ;, }, return, value, ;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, x, )]
[., get, (, i, ), ;, valueCoeff, *=, deltaX, ;, }, return, value, ;, }, public, DerivativeStructure, [, ], value]
[), ;, valueCoeff, *=, deltaX, ;, }, return, value, ;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, x]
[*=, deltaX, ;, }, return, value, ;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, x, ), throws, NoDataException]
[;, }, return, value, ;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, x, ), throws, NoDataException, {, checkInterpolation]
[;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, x, ), throws, NoDataException, {, checkInterpolation, (, ), ;, final]
[;, final, DerivativeStructure, [, ], value, =, new, DerivativeStructure, [, topDiagonal, ., get, (, 0, ), ., length, ], ;]
[;, Arrays, ., fill, (, value, ,, x, ., getField, (, ), ., getZero, (, ), ), ;, DerivativeStructure, valueCoeff]
[], ;, Arrays, ., fill, (, value, ,, x, ., getField, (, ), ., getZero, (, ), ), ;, DerivativeStructure]
[., length, ], ;, Arrays, ., fill, (, value, ,, x, ., getField, (, ), ., getZero, (, ), )]
[., get, (, 0, ), ., length, ], ;, Arrays, ., fill, (, value, ,, x, ., getField, (, )]
[), ., length, ], ;, Arrays, ., fill, (, value, ,, x, ., getField, (, ), ., getZero, (, )]
[;, DerivativeStructure, valueCoeff, =, x, ., getField, (, ), ., getOne, (, ), ;, for, (, int, i, =, 0]
[., fill, (, value, ,, x, ., getField, (, ), ., getZero, (, ), ), ;, DerivativeStructure, valueCoeff, =, x]
[,, x, ., getField, (, ), ., getZero, (, ), ), ;, DerivativeStructure, valueCoeff, =, x, ., getField, (, )]
[), ;, DerivativeStructure, valueCoeff, =, x, ., getField, (, ), ., getOne, (, ), ;, for, (, int, i, =]
[., getZero, (, ), ), ;, DerivativeStructure, valueCoeff, =, x, ., getField, (, ), ., getOne, (, ), ;, for]
[., getField, (, ), ., getZero, (, ), ), ;, DerivativeStructure, valueCoeff, =, x, ., getField, (, ), ., getOne]
[;, for, (, int, i, =, 0, ;, i, <, topDiagonal, ., size, (, ), ;, ++, i, ), {]
[., getOne, (, ), ;, for, (, int, i, =, 0, ;, i, <, topDiagonal, ., size, (, ), ;]
[., getField, (, ), ., getOne, (, ), ;, for, (, int, i, =, 0, ;, i, <, topDiagonal, .]
[;, i, <, topDiagonal, ., size, (, ), ;, ++, i, ), {, double, [, ], dividedDifference, =, topDiagonal, .]
[;, ++, i, ), {, double, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int]
[<, topDiagonal, ., size, (, ), ;, ++, i, ), {, double, [, ], dividedDifference, =, topDiagonal, ., get, (]
[;, ++, i, ), {, double, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int]
[., size, (, ), ;, ++, i, ), {, double, [, ], dividedDifference, =, topDiagonal, ., get, (, i, )]
[), {, double, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0]
[), {, double, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0]
[;, for, (, int, k, =, 0, ;, k, <, value, ., length, ;, ++, k, ), {, value, []
[., get, (, i, ), ;, for, (, int, k, =, 0, ;, k, <, value, ., length, ;, ++]
[), ;, for, (, int, k, =, 0, ;, k, <, value, ., length, ;, ++, k, ), {, value]
[;, k, <, value, ., length, ;, ++, k, ), {, value, [, k, ], =, value, [, k, ]]
[;, ++, k, ), {, value, [, k, ], =, value, [, k, ], ., add, (, valueCoeff, ., multiply]
[<, value, ., length, ;, ++, k, ), {, value, [, k, ], =, value, [, k, ], ., add]
[;, ++, k, ), {, value, [, k, ], =, value, [, k, ], ., add, (, valueCoeff, ., multiply]
[., length, ;, ++, k, ), {, value, [, k, ], =, value, [, k, ], ., add, (, valueCoeff]
[), {, value, [, k, ], =, value, [, k, ], ., add, (, valueCoeff, ., multiply, (, dividedDifference, []
[), {, value, [, k, ], =, value, [, k, ], ., add, (, valueCoeff, ., multiply, (, dividedDifference, []
[=, value, [, k, ], ., add, (, valueCoeff, ., multiply, (, dividedDifference, [, k, ], ), ), ;, }]
[[, k, ], =, value, [, k, ], ., add, (, valueCoeff, ., multiply, (, dividedDifference, [, k, ], )]
[], =, value, [, k, ], ., add, (, valueCoeff, ., multiply, (, dividedDifference, [, k, ], ), ), ;]
[;, }, final, DerivativeStructure, deltaX, =, x, ., subtract, (, abscissae, ., get, (, i, ), ), ;, valueCoeff, =]
[., add, (, valueCoeff, ., multiply, (, dividedDifference, [, k, ], ), ), ;, }, final, DerivativeStructure, deltaX, =, x]
[[, k, ], ., add, (, valueCoeff, ., multiply, (, dividedDifference, [, k, ], ), ), ;, }, final, DerivativeStructure]
[], ., add, (, valueCoeff, ., multiply, (, dividedDifference, [, k, ], ), ), ;, }, final, DerivativeStructure, deltaX, =]
[), ;, }, final, DerivativeStructure, deltaX, =, x, ., subtract, (, abscissae, ., get, (, i, ), ), ;, valueCoeff]
[., multiply, (, dividedDifference, [, k, ], ), ), ;, }, final, DerivativeStructure, deltaX, =, x, ., subtract, (, abscissae]
[), ), ;, }, final, DerivativeStructure, deltaX, =, x, ., subtract, (, abscissae, ., get, (, i, ), ), ;]
[[, k, ], ), ), ;, }, final, DerivativeStructure, deltaX, =, x, ., subtract, (, abscissae, ., get, (, i]
[], ), ), ;, }, final, DerivativeStructure, deltaX, =, x, ., subtract, (, abscissae, ., get, (, i, ), )]
[;, valueCoeff, =, valueCoeff, ., multiply, (, deltaX, ), ;, }, return, value, ;, }, private, void, checkInterpolation, (, )]
[., subtract, (, abscissae, ., get, (, i, ), ), ;, valueCoeff, =, valueCoeff, ., multiply, (, deltaX, ), ;]
[), ;, valueCoeff, =, valueCoeff, ., multiply, (, deltaX, ), ;, }, return, value, ;, }, private, void, checkInterpolation, (]
[., get, (, i, ), ), ;, valueCoeff, =, valueCoeff, ., multiply, (, deltaX, ), ;, }, return, value, ;]
[), ), ;, valueCoeff, =, valueCoeff, ., multiply, (, deltaX, ), ;, }, return, value, ;, }, private, void, checkInterpolation]
[=, valueCoeff, ., multiply, (, deltaX, ), ;, }, return, value, ;, }, private, void, checkInterpolation, (, ), throws, NoDataException]
[;, }, return, value, ;, }, private, void, checkInterpolation, (, ), throws, NoDataException, {, if, (, abscissae, ., isEmpty, (]
[., multiply, (, deltaX, ), ;, }, return, value, ;, }, private, void, checkInterpolation, (, ), throws, NoDataException, {, if]
[), ;, }, return, value, ;, }, private, void, checkInterpolation, (, ), throws, NoDataException, {, if, (, abscissae, ., isEmpty]
[;, }, private, void, checkInterpolation, (, ), throws, NoDataException, {, if, (, abscissae, ., isEmpty, (, ), ), {, throw]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_INTERPOLATION_SAMPLE, ), ;, }, }, private, PolynomialFunction, polynomial, (, double, ..., c]
[., isEmpty, (, ), ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_INTERPOLATION_SAMPLE, ), ;, }, }, private, PolynomialFunction, polynomial]
[;, }, }, private, PolynomialFunction, polynomial, (, double, ..., c, ), {, return, new, PolynomialFunction, (, c, ), ;, }]
[), ;, }, }, private, PolynomialFunction, polynomial, (, double, ..., c, ), {, return, new, PolynomialFunction, (, c, ), ;]
[., EMPTY_INTERPOLATION_SAMPLE, ), ;, }, }, private, PolynomialFunction, polynomial, (, double, ..., c, ), {, return, new, PolynomialFunction, (, c]
[;, }, }]
[), ;, }, }]
