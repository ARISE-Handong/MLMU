[jfree, ., data, ., Range, ;, public, class, AbstractBlock, implements, Cloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[padding, ;, private, double, width, ;, private, double, height, ;, private, transient, Rectangle2D, bounds, ;, protected, AbstractBlock, (, ), {]
[padding, ;, private, double, width, ;, private, double, height, ;, private, transient, Rectangle2D, bounds, ;, protected, AbstractBlock, (, ), {]
[width, ;, private, double, height, ;, private, transient, Rectangle2D, bounds, ;, protected, AbstractBlock, (, ), {, this, ., id, =]
[private, double, height, ;, private, transient, Rectangle2D, bounds, ;, protected, AbstractBlock, (, ), {, this, ., id, =, null, ;]
[private, double, height, ;, private, transient, Rectangle2D, bounds, ;, protected, AbstractBlock, (, ), {, this, ., id, =, null, ;]
[private, transient, Rectangle2D, bounds, ;, protected, AbstractBlock, (, ), {, this, ., id, =, null, ;, this, ., width, =]
[Rectangle2D, bounds, ;, protected, AbstractBlock, (, ), {, this, ., id, =, null, ;, this, ., width, =, 0.0, ;]
[Rectangle2D, bounds, ;, protected, AbstractBlock, (, ), {, this, ., id, =, null, ;, this, ., width, =, 0.0, ;]
[AbstractBlock, (, ), {, this, ., id, =, null, ;, this, ., width, =, 0.0, ;, this, ., height, =]
[), {, this, ., id, =, null, ;, this, ., width, =, 0.0, ;, this, ., height, =, 0.0, ;]
[), {, this, ., id, =, null, ;, this, ., width, =, 0.0, ;, this, ., height, =, 0.0, ;]
[id, =, null, ;, this, ., width, =, 0.0, ;, this, ., height, =, 0.0, ;, this, ., bounds, =]
[=, 0.0, ;, this, ., height, =, 0.0, ;, this, ., bounds, =, new, Rectangle2D, ., Float, (, ), ;]
[=, 0.0, ;, this, ., height, =, 0.0, ;, this, ., bounds, =, new, Rectangle2D, ., Float, (, ), ;]
[., height, =, 0.0, ;, this, ., bounds, =, new, Rectangle2D, ., Float, (, ), ;, this, ., margin, =]
[., height, =, 0.0, ;, this, ., bounds, =, new, Rectangle2D, ., Float, (, ), ;, this, ., margin, =]
[;, this, ., bounds, =, new, Rectangle2D, ., Float, (, ), ;, this, ., margin, =, RectangleInsets, ., ZERO_INSETS, ;]
[;, this, ., bounds, =, new, Rectangle2D, ., Float, (, ), ;, this, ., margin, =, RectangleInsets, ., ZERO_INSETS, ;]
[=, new, Rectangle2D, ., Float, (, ), ;, this, ., margin, =, RectangleInsets, ., ZERO_INSETS, ;, this, ., frame, =]
[=, new, Rectangle2D, ., Float, (, ), ;, this, ., margin, =, RectangleInsets, ., ZERO_INSETS, ;, this, ., frame, =]
[Float, (, ), ;, this, ., margin, =, RectangleInsets, ., ZERO_INSETS, ;, this, ., frame, =, BlockBorder, ., NONE, ;]
[Float, (, ), ;, this, ., margin, =, RectangleInsets, ., ZERO_INSETS, ;, this, ., frame, =, BlockBorder, ., NONE, ;]
[this, ., margin, =, RectangleInsets, ., ZERO_INSETS, ;, this, ., frame, =, BlockBorder, ., NONE, ;, this, ., padding, =]
[this, ., margin, =, RectangleInsets, ., ZERO_INSETS, ;, this, ., frame, =, BlockBorder, ., NONE, ;, this, ., padding, =]
[BlockBorder, ., NONE, ;, this, ., padding, =, RectangleInsets, ., ZERO_INSETS, ;, }, public, String, getID, (, ), {, return]
[BlockBorder, ., NONE, ;, this, ., padding, =, RectangleInsets, ., ZERO_INSETS, ;, }, public, String, getID, (, ), {, return]
[public, String, getID, (, ), {, return, this, ., id, ;, }, public, void, setID, (, String, id, ), {]
[public, String, getID, (, ), {, return, this, ., id, ;, }, public, void, setID, (, String, id, ), {]
[), {, return, this, ., id, ;, }, public, void, setID, (, String, id, ), {, this, ., id, =]
[setID, (, String, id, ), {, this, ., id, =, id, ;, }, public, double, getWidth, (, ), {, return]
[setID, (, String, id, ), {, this, ., id, =, id, ;, }, public, double, getWidth, (, ), {, return]
[public, double, getWidth, (, ), {, return, this, ., width, ;, }, public, void, setWidth, (, double, width, ), {]
[public, double, getWidth, (, ), {, return, this, ., width, ;, }, public, void, setWidth, (, double, width, ), {]
[), {, return, this, ., width, ;, }, public, void, setWidth, (, double, width, ), {, this, ., width, =]
[setWidth, (, double, width, ), {, this, ., width, =, width, ;, }, public, double, getHeight, (, ), {, return]
[setWidth, (, double, width, ), {, this, ., width, =, width, ;, }, public, double, getHeight, (, ), {, return]
[public, double, getHeight, (, ), {, return, this, ., height, ;, }, public, void, setHeight, (, double, height, ), {]
[public, double, getHeight, (, ), {, return, this, ., height, ;, }, public, void, setHeight, (, double, height, ), {]
[), {, return, this, ., height, ;, }, public, void, setHeight, (, double, height, ), {, this, ., height, =]
[setHeight, (, double, height, ), {, this, ., height, =, height, ;, }, public, RectangleInsets, getMargin, (, ), {, return]
[setHeight, (, double, height, ), {, this, ., height, =, height, ;, }, public, RectangleInsets, getMargin, (, ), {, return]
[getMargin, (, ), {, return, this, ., margin, ;, }, public, void, setMargin, (, RectangleInsets, margin, ), {, if, (]
[getMargin, (, ), {, return, this, ., margin, ;, }, public, void, setMargin, (, RectangleInsets, margin, ), {, if, (]
[), {, return, this, ., margin, ;, }, public, void, setMargin, (, RectangleInsets, margin, ), {, if, (, margin, ==]
[., margin, ;, }, public, void, setMargin, (, RectangleInsets, margin, ), {, if, (, margin, ==, null, ), {, throw]
[}, public, void, setMargin, (, RectangleInsets, margin, ), {, if, (, margin, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, RectangleInsets, margin, ), {, if, (, margin, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'margin' argument.", ), ;, }]
[(, RectangleInsets, margin, ), {, if, (, margin, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'margin' argument.", ), ;, }]
[{, if, (, margin, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'margin' argument.", ), ;, }, this, ., margin, =]
[margin, ;, }, public, void, setMargin, (, double, top, ,, double, left, ,, double, bottom, ,, double, right, ), {]
[}, public, void, setMargin, (, double, top, ,, double, left, ,, double, bottom, ,, double, right, ), {, setMargin, (]
[setMargin, (, double, top, ,, double, left, ,, double, bottom, ,, double, right, ), {, setMargin, (, new, RectangleInsets, (]
[double, top, ,, double, left, ,, double, bottom, ,, double, right, ), {, setMargin, (, new, RectangleInsets, (, top, ,]
[,, double, left, ,, double, bottom, ,, double, right, ), {, setMargin, (, new, RectangleInsets, (, top, ,, left, ,]
[left, ,, double, bottom, ,, double, right, ), {, setMargin, (, new, RectangleInsets, (, top, ,, left, ,, bottom, ,]
[RectangleInsets, (, top, ,, left, ,, bottom, ,, right, ), ), ;, }, public, BlockFrame, getFrame, (, ), {, return]
[RectangleInsets, (, top, ,, left, ,, bottom, ,, right, ), ), ;, }, public, BlockFrame, getFrame, (, ), {, return]
[getFrame, (, ), {, return, this, ., frame, ;, }, public, void, setFrame, (, BlockFrame, frame, ), {, if, (]
[getFrame, (, ), {, return, this, ., frame, ;, }, public, void, setFrame, (, BlockFrame, frame, ), {, if, (]
[), {, return, this, ., frame, ;, }, public, void, setFrame, (, BlockFrame, frame, ), {, if, (, frame, ==]
[., frame, ;, }, public, void, setFrame, (, BlockFrame, frame, ), {, if, (, frame, ==, null, ), {, throw]
[}, public, void, setFrame, (, BlockFrame, frame, ), {, if, (, frame, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, BlockFrame, frame, ), {, if, (, frame, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'frame' argument.", ), ;, }]
[(, BlockFrame, frame, ), {, if, (, frame, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'frame' argument.", ), ;, }]
[{, if, (, frame, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'frame' argument.", ), ;, }, this, ., frame, =]
[IllegalArgumentException, (, "Null 'frame' argument.", ), ;, }, this, ., frame, =, frame, ;, }, public, RectangleInsets, getPadding, (, ), {, return]
[IllegalArgumentException, (, "Null 'frame' argument.", ), ;, }, this, ., frame, =, frame, ;, }, public, RectangleInsets, getPadding, (, ), {, return]
[getPadding, (, ), {, return, this, ., padding, ;, }, public, void, setPadding, (, RectangleInsets, padding, ), {, if, (]
[getPadding, (, ), {, return, this, ., padding, ;, }, public, void, setPadding, (, RectangleInsets, padding, ), {, if, (]
[), {, return, this, ., padding, ;, }, public, void, setPadding, (, RectangleInsets, padding, ), {, if, (, padding, ==]
[., padding, ;, }, public, void, setPadding, (, RectangleInsets, padding, ), {, if, (, padding, ==, null, ), {, throw]
[}, public, void, setPadding, (, RectangleInsets, padding, ), {, if, (, padding, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, RectangleInsets, padding, ), {, if, (, padding, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'padding' argument.", ), ;, }]
[(, RectangleInsets, padding, ), {, if, (, padding, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'padding' argument.", ), ;, }]
[{, if, (, padding, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'padding' argument.", ), ;, }, this, ., padding, =]
[padding, ;, }, public, void, setPadding, (, double, top, ,, double, left, ,, double, bottom, ,, double, right, ), {]
[}, public, void, setPadding, (, double, top, ,, double, left, ,, double, bottom, ,, double, right, ), {, setPadding, (]
[setPadding, (, double, top, ,, double, left, ,, double, bottom, ,, double, right, ), {, setPadding, (, new, RectangleInsets, (]
[double, top, ,, double, left, ,, double, bottom, ,, double, right, ), {, setPadding, (, new, RectangleInsets, (, top, ,]
[,, double, left, ,, double, bottom, ,, double, right, ), {, setPadding, (, new, RectangleInsets, (, top, ,, left, ,]
[left, ,, double, bottom, ,, double, right, ), {, setPadding, (, new, RectangleInsets, (, top, ,, left, ,, bottom, ,]
[RectangleInsets, (, top, ,, left, ,, bottom, ,, right, ), ), ;, }, public, double, getContentXOffset, (, ), {, return]
[RectangleInsets, (, top, ,, left, ,, bottom, ,, right, ), ), ;, }, public, double, getContentXOffset, (, ), {, return]
[RectangleInsets, (, top, ,, left, ,, bottom, ,, right, ), ), ;, }, public, double, getContentXOffset, (, ), {, return]
[RectangleInsets, (, top, ,, left, ,, bottom, ,, right, ), ), ;, }, public, double, getContentXOffset, (, ), {, return]
[RectangleInsets, (, top, ,, left, ,, bottom, ,, right, ), ), ;, }, public, double, getContentXOffset, (, ), {, return]
[right, ), ), ;, }, public, double, getContentXOffset, (, ), {, return, this, ., margin, ., getLeft, (, ), +]
[right, ), ), ;, }, public, double, getContentXOffset, (, ), {, return, this, ., margin, ., getLeft, (, ), +]
[right, ), ), ;, }, public, double, getContentXOffset, (, ), {, return, this, ., margin, ., getLeft, (, ), +]
[right, ), ), ;, }, public, double, getContentXOffset, (, ), {, return, this, ., margin, ., getLeft, (, ), +]
[this, ., margin, ., getLeft, (, ), +, this, ., frame, ., getInsets, (, ), ., getLeft, (, ), +]
[this, ., margin, ., getLeft, (, ), +, this, ., frame, ., getInsets, (, ), ., getLeft, (, ), +]
[this, ., margin, ., getLeft, (, ), +, this, ., frame, ., getInsets, (, ), ., getLeft, (, ), +]
[getLeft, (, ), +, this, ., padding, ., getLeft, (, ), ;, }, public, double, getContentYOffset, (, ), {, return]
[getLeft, (, ), +, this, ., padding, ., getLeft, (, ), ;, }, public, double, getContentYOffset, (, ), {, return]
[getLeft, (, ), +, this, ., padding, ., getLeft, (, ), ;, }, public, double, getContentYOffset, (, ), {, return]
[getLeft, (, ), +, this, ., padding, ., getLeft, (, ), ;, }, public, double, getContentYOffset, (, ), {, return]
[getLeft, (, ), +, this, ., padding, ., getLeft, (, ), ;, }, public, double, getContentYOffset, (, ), {, return]
[getLeft, (, ), ;, }, public, double, getContentYOffset, (, ), {, return, this, ., margin, ., getTop, (, ), +]
[getLeft, (, ), ;, }, public, double, getContentYOffset, (, ), {, return, this, ., margin, ., getTop, (, ), +]
[getLeft, (, ), ;, }, public, double, getContentYOffset, (, ), {, return, this, ., margin, ., getTop, (, ), +]
[getLeft, (, ), ;, }, public, double, getContentYOffset, (, ), {, return, this, ., margin, ., getTop, (, ), +]
[this, ., margin, ., getTop, (, ), +, this, ., frame, ., getInsets, (, ), ., getTop, (, ), +]
[this, ., margin, ., getTop, (, ), +, this, ., frame, ., getInsets, (, ), ., getTop, (, ), +]
[this, ., margin, ., getTop, (, ), +, this, ., frame, ., getInsets, (, ), ., getTop, (, ), +]
[), +, this, ., padding, ., getTop, (, ), ;, }, public, Size2D, arrange, (, Graphics2D, g2, ), {, return]
[this, ., padding, ., getTop, (, ), ;, }, public, Size2D, arrange, (, Graphics2D, g2, ), {, return, arrange, (]
[padding, ., getTop, (, ), ;, }, public, Size2D, arrange, (, Graphics2D, g2, ), {, return, arrange, (, g2, ,]
[padding, ., getTop, (, ), ;, }, public, Size2D, arrange, (, Graphics2D, g2, ), {, return, arrange, (, g2, ,]
[RectangleConstraint, ., NONE, ), ;, }, public, Size2D, arrange, (, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, base, =]
[), ;, }, public, Size2D, arrange, (, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, base, =, new, Size2D, (]
[Size2D, arrange, (, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, base, =, new, Size2D, (, getWidth, (, ), ,]
[RectangleConstraint, constraint, ), {, Size2D, base, =, new, Size2D, (, getWidth, (, ), ,, getHeight, (, ), ), ;, return]
[RectangleConstraint, constraint, ), {, Size2D, base, =, new, Size2D, (, getWidth, (, ), ,, getHeight, (, ), ), ;, return]
[Size2D, base, =, new, Size2D, (, getWidth, (, ), ,, getHeight, (, ), ), ;, return, constraint, ., calculateConstrainedSize, (]
[(, ), ), ;, return, constraint, ., calculateConstrainedSize, (, base, ), ;, }, public, Rectangle2D, getBounds, (, ), {, return]
[(, ), ), ;, return, constraint, ., calculateConstrainedSize, (, base, ), ;, }, public, Rectangle2D, getBounds, (, ), {, return]
[getBounds, (, ), {, return, this, ., bounds, ;, }, public, void, setBounds, (, Rectangle2D, bounds, ), {, if, (]
[getBounds, (, ), {, return, this, ., bounds, ;, }, public, void, setBounds, (, Rectangle2D, bounds, ), {, if, (]
[), {, return, this, ., bounds, ;, }, public, void, setBounds, (, Rectangle2D, bounds, ), {, if, (, bounds, ==]
[., bounds, ;, }, public, void, setBounds, (, Rectangle2D, bounds, ), {, if, (, bounds, ==, null, ), {, throw]
[}, public, void, setBounds, (, Rectangle2D, bounds, ), {, if, (, bounds, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Rectangle2D, bounds, ), {, if, (, bounds, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'bounds' argument.", ), ;, }]
[(, Rectangle2D, bounds, ), {, if, (, bounds, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'bounds' argument.", ), ;, }]
[{, if, (, bounds, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'bounds' argument.", ), ;, }, this, ., bounds, =]
[;, }, this, ., bounds, =, bounds, ;, }, protected, double, trimToContentWidth, (, double, fixedWidth, ), {, double, result, =]
[;, }, this, ., bounds, =, bounds, ;, }, protected, double, trimToContentWidth, (, double, fixedWidth, ), {, double, result, =]
[;, }, this, ., bounds, =, bounds, ;, }, protected, double, trimToContentWidth, (, double, fixedWidth, ), {, double, result, =]
[bounds, ;, }, protected, double, trimToContentWidth, (, double, fixedWidth, ), {, double, result, =, this, ., margin, ., trimWidth, (]
[protected, double, trimToContentWidth, (, double, fixedWidth, ), {, double, result, =, this, ., margin, ., trimWidth, (, fixedWidth, ), ;]
[trimToContentWidth, (, double, fixedWidth, ), {, double, result, =, this, ., margin, ., trimWidth, (, fixedWidth, ), ;, result, =]
[trimToContentWidth, (, double, fixedWidth, ), {, double, result, =, this, ., margin, ., trimWidth, (, fixedWidth, ), ;, result, =]
[trimToContentWidth, (, double, fixedWidth, ), {, double, result, =, this, ., margin, ., trimWidth, (, fixedWidth, ), ;, result, =]
[trimToContentWidth, (, double, fixedWidth, ), {, double, result, =, this, ., margin, ., trimWidth, (, fixedWidth, ), ;, result, =]
[., margin, ., trimWidth, (, fixedWidth, ), ;, result, =, this, ., frame, ., getInsets, (, ), ., trimWidth, (]
[trimWidth, (, fixedWidth, ), ;, result, =, this, ., frame, ., getInsets, (, ), ., trimWidth, (, result, ), ;]
[fixedWidth, ), ;, result, =, this, ., frame, ., getInsets, (, ), ., trimWidth, (, result, ), ;, result, =]
[fixedWidth, ), ;, result, =, this, ., frame, ., getInsets, (, ), ., trimWidth, (, result, ), ;, result, =]
[fixedWidth, ), ;, result, =, this, ., frame, ., getInsets, (, ), ., trimWidth, (, result, ), ;, result, =]
[., frame, ., getInsets, (, ), ., trimWidth, (, result, ), ;, result, =, this, ., padding, ., trimWidth, (]
[(, ), ., trimWidth, (, result, ), ;, result, =, this, ., padding, ., trimWidth, (, result, ), ;, return]
[(, ), ., trimWidth, (, result, ), ;, result, =, this, ., padding, ., trimWidth, (, result, ), ;, return]
[(, result, ), ;, result, =, this, ., padding, ., trimWidth, (, result, ), ;, return, Math, ., max, (]
[), ;, result, =, this, ., padding, ., trimWidth, (, result, ), ;, return, Math, ., max, (, result, ,]
[., max, (, result, ,, 0.0, ), ;, }, protected, double, trimToContentHeight, (, double, fixedHeight, ), {, double, result, =]
[., max, (, result, ,, 0.0, ), ;, }, protected, double, trimToContentHeight, (, double, fixedHeight, ), {, double, result, =]
[., max, (, result, ,, 0.0, ), ;, }, protected, double, trimToContentHeight, (, double, fixedHeight, ), {, double, result, =]
[), ;, }, protected, double, trimToContentHeight, (, double, fixedHeight, ), {, double, result, =, this, ., margin, ., trimHeight, (]
[protected, double, trimToContentHeight, (, double, fixedHeight, ), {, double, result, =, this, ., margin, ., trimHeight, (, fixedHeight, ), ;]
[trimToContentHeight, (, double, fixedHeight, ), {, double, result, =, this, ., margin, ., trimHeight, (, fixedHeight, ), ;, result, =]
[trimToContentHeight, (, double, fixedHeight, ), {, double, result, =, this, ., margin, ., trimHeight, (, fixedHeight, ), ;, result, =]
[trimToContentHeight, (, double, fixedHeight, ), {, double, result, =, this, ., margin, ., trimHeight, (, fixedHeight, ), ;, result, =]
[trimToContentHeight, (, double, fixedHeight, ), {, double, result, =, this, ., margin, ., trimHeight, (, fixedHeight, ), ;, result, =]
[., margin, ., trimHeight, (, fixedHeight, ), ;, result, =, this, ., frame, ., getInsets, (, ), ., trimHeight, (]
[trimHeight, (, fixedHeight, ), ;, result, =, this, ., frame, ., getInsets, (, ), ., trimHeight, (, result, ), ;]
[fixedHeight, ), ;, result, =, this, ., frame, ., getInsets, (, ), ., trimHeight, (, result, ), ;, result, =]
[fixedHeight, ), ;, result, =, this, ., frame, ., getInsets, (, ), ., trimHeight, (, result, ), ;, result, =]
[fixedHeight, ), ;, result, =, this, ., frame, ., getInsets, (, ), ., trimHeight, (, result, ), ;, result, =]
[., frame, ., getInsets, (, ), ., trimHeight, (, result, ), ;, result, =, this, ., padding, ., trimHeight, (]
[(, ), ., trimHeight, (, result, ), ;, result, =, this, ., padding, ., trimHeight, (, result, ), ;, return]
[(, ), ., trimHeight, (, result, ), ;, result, =, this, ., padding, ., trimHeight, (, result, ), ;, return]
[(, result, ), ;, result, =, this, ., padding, ., trimHeight, (, result, ), ;, return, Math, ., max, (]
[), ;, result, =, this, ., padding, ., trimHeight, (, result, ), ;, return, Math, ., max, (, result, ,]
[Math, ., max, (, result, ,, 0.0, ), ;, }, protected, RectangleConstraint, toContentConstraint, (, RectangleConstraint, c, ), {, if, (]
[Math, ., max, (, result, ,, 0.0, ), ;, }, protected, RectangleConstraint, toContentConstraint, (, RectangleConstraint, c, ), {, if, (]
[max, (, result, ,, 0.0, ), ;, }, protected, RectangleConstraint, toContentConstraint, (, RectangleConstraint, c, ), {, if, (, c, ==]
[0.0, ), ;, }, protected, RectangleConstraint, toContentConstraint, (, RectangleConstraint, c, ), {, if, (, c, ==, null, ), {, throw]
[}, protected, RectangleConstraint, toContentConstraint, (, RectangleConstraint, c, ), {, if, (, c, ==, null, ), {, throw, new, IllegalArgumentException, (]
[c, ), {, if, (, c, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'c' argument.", ), ;, }, if, (]
[c, ), {, if, (, c, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'c' argument.", ), ;, }, if, (]
[(, c, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'c' argument.", ), ;, }, if, (, c, ., equals, (]
[(, c, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'c' argument.", ), ;, }, if, (, c, ., equals, (]
[new, IllegalArgumentException, (, "Null 'c' argument.", ), ;, }, if, (, c, ., equals, (, RectangleConstraint, ., NONE, ), ), {, return]
[}, if, (, c, ., equals, (, RectangleConstraint, ., NONE, ), ), {, return, c, ;, }, double, w, =]
[}, if, (, c, ., equals, (, RectangleConstraint, ., NONE, ), ), {, return, c, ;, }, double, w, =]
[NONE, ), ), {, return, c, ;, }, double, w, =, c, ., getWidth, (, ), ;, Range, wr, =]
[NONE, ), ), {, return, c, ;, }, double, w, =, c, ., getWidth, (, ), ;, Range, wr, =]
[w, =, c, ., getWidth, (, ), ;, Range, wr, =, c, ., getWidthRange, (, ), ;, double, h, =]
[w, =, c, ., getWidth, (, ), ;, Range, wr, =, c, ., getWidthRange, (, ), ;, double, h, =]
[wr, =, c, ., getWidthRange, (, ), ;, double, h, =, c, ., getHeight, (, ), ;, Range, hr, =]
[wr, =, c, ., getWidthRange, (, ), ;, double, h, =, c, ., getHeight, (, ), ;, Range, hr, =]
[h, =, c, ., getHeight, (, ), ;, Range, hr, =, c, ., getHeightRange, (, ), ;, double, ww, =]
[c, ., getHeight, (, ), ;, Range, hr, =, c, ., getHeightRange, (, ), ;, double, ww, =, trimToContentWidth, (]
[Range, hr, =, c, ., getHeightRange, (, ), ;, double, ww, =, trimToContentWidth, (, w, ), ;, double, hh, =]
[=, c, ., getHeightRange, (, ), ;, double, ww, =, trimToContentWidth, (, w, ), ;, double, hh, =, trimToContentHeight, (]
[;, double, ww, =, trimToContentWidth, (, w, ), ;, double, hh, =, trimToContentHeight, (, h, ), ;, Range, wwr, =]
[ww, =, trimToContentWidth, (, w, ), ;, double, hh, =, trimToContentHeight, (, h, ), ;, Range, wwr, =, trimToContentWidth, (]
[;, double, hh, =, trimToContentHeight, (, h, ), ;, Range, wwr, =, trimToContentWidth, (, wr, ), ;, Range, hhr, =]
[hh, =, trimToContentHeight, (, h, ), ;, Range, wwr, =, trimToContentWidth, (, wr, ), ;, Range, hhr, =, trimToContentHeight, (]
[h, ), ;, Range, wwr, =, trimToContentWidth, (, wr, ), ;, Range, hhr, =, trimToContentHeight, (, hr, ), ;, return]
[Range, wwr, =, trimToContentWidth, (, wr, ), ;, Range, hhr, =, trimToContentHeight, (, hr, ), ;, return, new, RectangleConstraint, (]
[=, trimToContentWidth, (, wr, ), ;, Range, hhr, =, trimToContentHeight, (, hr, ), ;, return, new, RectangleConstraint, (, ww, ,]
[(, wr, ), ;, Range, hhr, =, trimToContentHeight, (, hr, ), ;, return, new, RectangleConstraint, (, ww, ,, wwr, ,]
[(, wr, ), ;, Range, hhr, =, trimToContentHeight, (, hr, ), ;, return, new, RectangleConstraint, (, ww, ,, wwr, ,]
[=, trimToContentHeight, (, hr, ), ;, return, new, RectangleConstraint, (, ww, ,, wwr, ,, c, ., getWidthConstraintType, (, ), ,]
[(, hr, ), ;, return, new, RectangleConstraint, (, ww, ,, wwr, ,, c, ., getWidthConstraintType, (, ), ,, hh, ,]
[), ;, return, new, RectangleConstraint, (, ww, ,, wwr, ,, c, ., getWidthConstraintType, (, ), ,, hh, ,, hhr, ,]
[), ;, return, new, RectangleConstraint, (, ww, ,, wwr, ,, c, ., getWidthConstraintType, (, ), ,, hh, ,, hhr, ,]
[hhr, ,, c, ., getHeightConstraintType, (, ), ), ;, }, private, Range, trimToContentWidth, (, Range, r, ), {, if, (]
[hhr, ,, c, ., getHeightConstraintType, (, ), ), ;, }, private, Range, trimToContentWidth, (, Range, r, ), {, if, (]
[c, ., getHeightConstraintType, (, ), ), ;, }, private, Range, trimToContentWidth, (, Range, r, ), {, if, (, r, ==]
[), ), ;, }, private, Range, trimToContentWidth, (, Range, r, ), {, if, (, r, ==, null, ), {, return]
[trimToContentWidth, (, Range, r, ), {, if, (, r, ==, null, ), {, return, null, ;, }, double, lowerBound, =]
[{, if, (, r, ==, null, ), {, return, null, ;, }, double, lowerBound, =, 0.0, ;, double, upperBound, =]
[{, if, (, r, ==, null, ), {, return, null, ;, }, double, lowerBound, =, 0.0, ;, double, upperBound, =]
[), {, return, null, ;, }, double, lowerBound, =, 0.0, ;, double, upperBound, =, Double, ., POSITIVE_INFINITY, ;, if, (]
[), {, return, null, ;, }, double, lowerBound, =, 0.0, ;, double, upperBound, =, Double, ., POSITIVE_INFINITY, ;, if, (]
[), {, return, null, ;, }, double, lowerBound, =, 0.0, ;, double, upperBound, =, Double, ., POSITIVE_INFINITY, ;, if, (]
[double, lowerBound, =, 0.0, ;, double, upperBound, =, Double, ., POSITIVE_INFINITY, ;, if, (, r, ., getLowerBound, (, ), >]
[0.0, ;, double, upperBound, =, Double, ., POSITIVE_INFINITY, ;, if, (, r, ., getLowerBound, (, ), >, 0.0, ), {]
[double, upperBound, =, Double, ., POSITIVE_INFINITY, ;, if, (, r, ., getLowerBound, (, ), >, 0.0, ), {, lowerBound, =]
[=, Double, ., POSITIVE_INFINITY, ;, if, (, r, ., getLowerBound, (, ), >, 0.0, ), {, lowerBound, =, trimToContentWidth, (]
[=, Double, ., POSITIVE_INFINITY, ;, if, (, r, ., getLowerBound, (, ), >, 0.0, ), {, lowerBound, =, trimToContentWidth, (]
[(, ), >, 0.0, ), {, lowerBound, =, trimToContentWidth, (, r, ., getLowerBound, (, ), ), ;, }, if, (]
[(, ), >, 0.0, ), {, lowerBound, =, trimToContentWidth, (, r, ., getLowerBound, (, ), ), ;, }, if, (]
[(, ), >, 0.0, ), {, lowerBound, =, trimToContentWidth, (, r, ., getLowerBound, (, ), ), ;, }, if, (]
[lowerBound, =, trimToContentWidth, (, r, ., getLowerBound, (, ), ), ;, }, if, (, r, ., getUpperBound, (, ), <]
[lowerBound, =, trimToContentWidth, (, r, ., getLowerBound, (, ), ), ;, }, if, (, r, ., getUpperBound, (, ), <]
[., getLowerBound, (, ), ), ;, }, if, (, r, ., getUpperBound, (, ), <, Double, ., POSITIVE_INFINITY, ), {]
[(, ), ), ;, }, if, (, r, ., getUpperBound, (, ), <, Double, ., POSITIVE_INFINITY, ), {, upperBound, =]
[), ;, }, if, (, r, ., getUpperBound, (, ), <, Double, ., POSITIVE_INFINITY, ), {, upperBound, =, trimToContentWidth, (]
[), ;, }, if, (, r, ., getUpperBound, (, ), <, Double, ., POSITIVE_INFINITY, ), {, upperBound, =, trimToContentWidth, (]
[), <, Double, ., POSITIVE_INFINITY, ), {, upperBound, =, trimToContentWidth, (, r, ., getUpperBound, (, ), ), ;, }, return]
[., POSITIVE_INFINITY, ), {, upperBound, =, trimToContentWidth, (, r, ., getUpperBound, (, ), ), ;, }, return, new, Range, (]
[), {, upperBound, =, trimToContentWidth, (, r, ., getUpperBound, (, ), ), ;, }, return, new, Range, (, lowerBound, ,]
[return, new, Range, (, lowerBound, ,, upperBound, ), ;, }, private, Range, trimToContentHeight, (, Range, r, ), {, if, (]
[return, new, Range, (, lowerBound, ,, upperBound, ), ;, }, private, Range, trimToContentHeight, (, Range, r, ), {, if, (]
[Range, (, lowerBound, ,, upperBound, ), ;, }, private, Range, trimToContentHeight, (, Range, r, ), {, if, (, r, ==]
[upperBound, ), ;, }, private, Range, trimToContentHeight, (, Range, r, ), {, if, (, r, ==, null, ), {, return]
[trimToContentHeight, (, Range, r, ), {, if, (, r, ==, null, ), {, return, null, ;, }, double, lowerBound, =]
[{, if, (, r, ==, null, ), {, return, null, ;, }, double, lowerBound, =, 0.0, ;, double, upperBound, =]
[{, if, (, r, ==, null, ), {, return, null, ;, }, double, lowerBound, =, 0.0, ;, double, upperBound, =]
[), {, return, null, ;, }, double, lowerBound, =, 0.0, ;, double, upperBound, =, Double, ., POSITIVE_INFINITY, ;, if, (]
[), {, return, null, ;, }, double, lowerBound, =, 0.0, ;, double, upperBound, =, Double, ., POSITIVE_INFINITY, ;, if, (]
[), {, return, null, ;, }, double, lowerBound, =, 0.0, ;, double, upperBound, =, Double, ., POSITIVE_INFINITY, ;, if, (]
[double, lowerBound, =, 0.0, ;, double, upperBound, =, Double, ., POSITIVE_INFINITY, ;, if, (, r, ., getLowerBound, (, ), >]
[0.0, ;, double, upperBound, =, Double, ., POSITIVE_INFINITY, ;, if, (, r, ., getLowerBound, (, ), >, 0.0, ), {]
[double, upperBound, =, Double, ., POSITIVE_INFINITY, ;, if, (, r, ., getLowerBound, (, ), >, 0.0, ), {, lowerBound, =]
[=, Double, ., POSITIVE_INFINITY, ;, if, (, r, ., getLowerBound, (, ), >, 0.0, ), {, lowerBound, =, trimToContentHeight, (]
[=, Double, ., POSITIVE_INFINITY, ;, if, (, r, ., getLowerBound, (, ), >, 0.0, ), {, lowerBound, =, trimToContentHeight, (]
[(, ), >, 0.0, ), {, lowerBound, =, trimToContentHeight, (, r, ., getLowerBound, (, ), ), ;, }, if, (]
[(, ), >, 0.0, ), {, lowerBound, =, trimToContentHeight, (, r, ., getLowerBound, (, ), ), ;, }, if, (]
[(, ), >, 0.0, ), {, lowerBound, =, trimToContentHeight, (, r, ., getLowerBound, (, ), ), ;, }, if, (]
[lowerBound, =, trimToContentHeight, (, r, ., getLowerBound, (, ), ), ;, }, if, (, r, ., getUpperBound, (, ), <]
[lowerBound, =, trimToContentHeight, (, r, ., getLowerBound, (, ), ), ;, }, if, (, r, ., getUpperBound, (, ), <]
[., getLowerBound, (, ), ), ;, }, if, (, r, ., getUpperBound, (, ), <, Double, ., POSITIVE_INFINITY, ), {]
[(, ), ), ;, }, if, (, r, ., getUpperBound, (, ), <, Double, ., POSITIVE_INFINITY, ), {, upperBound, =]
[), ;, }, if, (, r, ., getUpperBound, (, ), <, Double, ., POSITIVE_INFINITY, ), {, upperBound, =, trimToContentHeight, (]
[), ;, }, if, (, r, ., getUpperBound, (, ), <, Double, ., POSITIVE_INFINITY, ), {, upperBound, =, trimToContentHeight, (]
[), <, Double, ., POSITIVE_INFINITY, ), {, upperBound, =, trimToContentHeight, (, r, ., getUpperBound, (, ), ), ;, }, return]
[., POSITIVE_INFINITY, ), {, upperBound, =, trimToContentHeight, (, r, ., getUpperBound, (, ), ), ;, }, return, new, Range, (]
[), {, upperBound, =, trimToContentHeight, (, r, ., getUpperBound, (, ), ), ;, }, return, new, Range, (, lowerBound, ,]
[new, Range, (, lowerBound, ,, upperBound, ), ;, }, protected, double, calculateTotalWidth, (, double, contentWidth, ), {, double, result, =]
[(, lowerBound, ,, upperBound, ), ;, }, protected, double, calculateTotalWidth, (, double, contentWidth, ), {, double, result, =, contentWidth, ;]
[,, upperBound, ), ;, }, protected, double, calculateTotalWidth, (, double, contentWidth, ), {, double, result, =, contentWidth, ;, result, =]
[,, upperBound, ), ;, }, protected, double, calculateTotalWidth, (, double, contentWidth, ), {, double, result, =, contentWidth, ;, result, =]
[,, upperBound, ), ;, }, protected, double, calculateTotalWidth, (, double, contentWidth, ), {, double, result, =, contentWidth, ;, result, =]
[double, calculateTotalWidth, (, double, contentWidth, ), {, double, result, =, contentWidth, ;, result, =, this, ., padding, ., extendWidth, (]
[double, contentWidth, ), {, double, result, =, contentWidth, ;, result, =, this, ., padding, ., extendWidth, (, result, ), ;]
[), {, double, result, =, contentWidth, ;, result, =, this, ., padding, ., extendWidth, (, result, ), ;, result, =]
[), {, double, result, =, contentWidth, ;, result, =, this, ., padding, ., extendWidth, (, result, ), ;, result, =]
[), {, double, result, =, contentWidth, ;, result, =, this, ., padding, ., extendWidth, (, result, ), ;, result, =]
[), {, double, result, =, contentWidth, ;, result, =, this, ., padding, ., extendWidth, (, result, ), ;, result, =]
[., padding, ., extendWidth, (, result, ), ;, result, =, this, ., frame, ., getInsets, (, ), ., extendWidth, (]
[extendWidth, (, result, ), ;, result, =, this, ., frame, ., getInsets, (, ), ., extendWidth, (, result, ), ;]
[result, ), ;, result, =, this, ., frame, ., getInsets, (, ), ., extendWidth, (, result, ), ;, result, =]
[result, ), ;, result, =, this, ., frame, ., getInsets, (, ), ., extendWidth, (, result, ), ;, result, =]
[result, ), ;, result, =, this, ., frame, ., getInsets, (, ), ., extendWidth, (, result, ), ;, result, =]
[., frame, ., getInsets, (, ), ., extendWidth, (, result, ), ;, result, =, this, ., margin, ., extendWidth, (]
[(, ), ., extendWidth, (, result, ), ;, result, =, this, ., margin, ., extendWidth, (, result, ), ;, return]
[extendWidth, (, result, ), ;, return, result, ;, }, protected, double, calculateTotalHeight, (, double, contentHeight, ), {, double, result, =]
[result, ), ;, return, result, ;, }, protected, double, calculateTotalHeight, (, double, contentHeight, ), {, double, result, =, contentHeight, ;]
[;, return, result, ;, }, protected, double, calculateTotalHeight, (, double, contentHeight, ), {, double, result, =, contentHeight, ;, result, =]
[;, return, result, ;, }, protected, double, calculateTotalHeight, (, double, contentHeight, ), {, double, result, =, contentHeight, ;, result, =]
[;, return, result, ;, }, protected, double, calculateTotalHeight, (, double, contentHeight, ), {, double, result, =, contentHeight, ;, result, =]
[double, calculateTotalHeight, (, double, contentHeight, ), {, double, result, =, contentHeight, ;, result, =, this, ., padding, ., extendHeight, (]
[double, contentHeight, ), {, double, result, =, contentHeight, ;, result, =, this, ., padding, ., extendHeight, (, result, ), ;]
[), {, double, result, =, contentHeight, ;, result, =, this, ., padding, ., extendHeight, (, result, ), ;, result, =]
[), {, double, result, =, contentHeight, ;, result, =, this, ., padding, ., extendHeight, (, result, ), ;, result, =]
[), {, double, result, =, contentHeight, ;, result, =, this, ., padding, ., extendHeight, (, result, ), ;, result, =]
[), {, double, result, =, contentHeight, ;, result, =, this, ., padding, ., extendHeight, (, result, ), ;, result, =]
[., padding, ., extendHeight, (, result, ), ;, result, =, this, ., frame, ., getInsets, (, ), ., extendHeight, (]
[extendHeight, (, result, ), ;, result, =, this, ., frame, ., getInsets, (, ), ., extendHeight, (, result, ), ;]
[result, ), ;, result, =, this, ., frame, ., getInsets, (, ), ., extendHeight, (, result, ), ;, result, =]
[result, ), ;, result, =, this, ., frame, ., getInsets, (, ), ., extendHeight, (, result, ), ;, result, =]
[result, ), ;, result, =, this, ., frame, ., getInsets, (, ), ., extendHeight, (, result, ), ;, result, =]
[., frame, ., getInsets, (, ), ., extendHeight, (, result, ), ;, result, =, this, ., margin, ., extendHeight, (]
[(, ), ., extendHeight, (, result, ), ;, result, =, this, ., margin, ., extendHeight, (, result, ), ;, return]
[., margin, ., extendHeight, (, result, ), ;, return, result, ;, }, protected, Rectangle2D, trimMargin, (, Rectangle2D, area, ), {]
[., margin, ., extendHeight, (, result, ), ;, return, result, ;, }, protected, Rectangle2D, trimMargin, (, Rectangle2D, area, ), {]
[., margin, ., extendHeight, (, result, ), ;, return, result, ;, }, protected, Rectangle2D, trimMargin, (, Rectangle2D, area, ), {]
[), ;, return, result, ;, }, protected, Rectangle2D, trimMargin, (, Rectangle2D, area, ), {, this, ., margin, ., trim, (]
[;, }, protected, Rectangle2D, trimMargin, (, Rectangle2D, area, ), {, this, ., margin, ., trim, (, area, ), ;, return]
[., margin, ., trim, (, area, ), ;, return, area, ;, }, protected, Rectangle2D, trimBorder, (, Rectangle2D, area, ), {]
[., margin, ., trim, (, area, ), ;, return, area, ;, }, protected, Rectangle2D, trimBorder, (, Rectangle2D, area, ), {]
[., margin, ., trim, (, area, ), ;, return, area, ;, }, protected, Rectangle2D, trimBorder, (, Rectangle2D, area, ), {]
[., margin, ., trim, (, area, ), ;, return, area, ;, }, protected, Rectangle2D, trimBorder, (, Rectangle2D, area, ), {]
[;, }, protected, Rectangle2D, trimBorder, (, Rectangle2D, area, ), {, this, ., frame, ., getInsets, (, ), ., trim, (]
[trimBorder, (, Rectangle2D, area, ), {, this, ., frame, ., getInsets, (, ), ., trim, (, area, ), ;, return]
[(, ), ., trim, (, area, ), ;, return, area, ;, }, protected, Rectangle2D, trimPadding, (, Rectangle2D, area, ), {]
[(, ), ., trim, (, area, ), ;, return, area, ;, }, protected, Rectangle2D, trimPadding, (, Rectangle2D, area, ), {]
[(, ), ., trim, (, area, ), ;, return, area, ;, }, protected, Rectangle2D, trimPadding, (, Rectangle2D, area, ), {]
[), ;, return, area, ;, }, protected, Rectangle2D, trimPadding, (, Rectangle2D, area, ), {, this, ., padding, ., trim, (]
[;, }, protected, Rectangle2D, trimPadding, (, Rectangle2D, area, ), {, this, ., padding, ., trim, (, area, ), ;, return]
[trim, (, area, ), ;, return, area, ;, }, protected, void, drawBorder, (, Graphics2D, g2, ,, Rectangle2D, area, ), {]
[trim, (, area, ), ;, return, area, ;, }, protected, void, drawBorder, (, Graphics2D, g2, ,, Rectangle2D, area, ), {]
[trim, (, area, ), ;, return, area, ;, }, protected, void, drawBorder, (, Graphics2D, g2, ,, Rectangle2D, area, ), {]
[area, ;, }, protected, void, drawBorder, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, this, ., frame, ., draw, (]
[}, protected, void, drawBorder, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, this, ., frame, ., draw, (, g2, ,]
[frame, ., draw, (, g2, ,, area, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[frame, ., draw, (, g2, ,, area, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[draw, (, g2, ,, area, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[area, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, AbstractBlock, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, AbstractBlock, ), ), {, return, false, ;, }, AbstractBlock, that, =]
[if, (, !, (, obj, instanceof, AbstractBlock, ), ), {, return, false, ;, }, AbstractBlock, that, =, (, AbstractBlock, )]
[obj, instanceof, AbstractBlock, ), ), {, return, false, ;, }, AbstractBlock, that, =, (, AbstractBlock, ), obj, ;, if, (]
[instanceof, AbstractBlock, ), ), {, return, false, ;, }, AbstractBlock, that, =, (, AbstractBlock, ), obj, ;, if, (, !]
[instanceof, AbstractBlock, ), ), {, return, false, ;, }, AbstractBlock, that, =, (, AbstractBlock, ), obj, ;, if, (, !]
[{, return, false, ;, }, AbstractBlock, that, =, (, AbstractBlock, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (]
[{, return, false, ;, }, AbstractBlock, that, =, (, AbstractBlock, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (]
[}, AbstractBlock, that, =, (, AbstractBlock, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (, this, ., id, ,]
[}, AbstractBlock, that, =, (, AbstractBlock, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (, this, ., id, ,]
[obj, ;, if, (, !, ObjectUtilities, ., equal, (, this, ., id, ,, that, ., id, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., id, ,, that, ., id, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., id, ,, that, ., id, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., id, ,, that, ., id, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., id, ,, that, ., id, ), ), {, return, false, ;, }, if, (, !]
[,, that, ., id, ), ), {, return, false, ;, }, if, (, !, this, ., frame, ., equals, (]
[,, that, ., id, ), ), {, return, false, ;, }, if, (, !, this, ., frame, ., equals, (]
[return, false, ;, }, if, (, !, this, ., frame, ., equals, (, that, ., frame, ), ), {, return]
[(, !, this, ., frame, ., equals, (, that, ., frame, ), ), {, return, false, ;, }, if, (]
[!, this, ., frame, ., equals, (, that, ., frame, ), ), {, return, false, ;, }, if, (, !]
[!, this, ., frame, ., equals, (, that, ., frame, ), ), {, return, false, ;, }, if, (, !]
[!, this, ., frame, ., equals, (, that, ., frame, ), ), {, return, false, ;, }, if, (, !]
[(, that, ., frame, ), ), {, return, false, ;, }, if, (, !, this, ., bounds, ., equals, (]
[(, that, ., frame, ), ), {, return, false, ;, }, if, (, !, this, ., bounds, ., equals, (]
[return, false, ;, }, if, (, !, this, ., bounds, ., equals, (, that, ., bounds, ), ), {, return]
[(, !, this, ., bounds, ., equals, (, that, ., bounds, ), ), {, return, false, ;, }, if, (]
[!, this, ., bounds, ., equals, (, that, ., bounds, ), ), {, return, false, ;, }, if, (, !]
[!, this, ., bounds, ., equals, (, that, ., bounds, ), ), {, return, false, ;, }, if, (, !]
[!, this, ., bounds, ., equals, (, that, ., bounds, ), ), {, return, false, ;, }, if, (, !]
[(, that, ., bounds, ), ), {, return, false, ;, }, if, (, !, this, ., margin, ., equals, (]
[(, that, ., bounds, ), ), {, return, false, ;, }, if, (, !, this, ., margin, ., equals, (]
[return, false, ;, }, if, (, !, this, ., margin, ., equals, (, that, ., margin, ), ), {, return]
[(, !, this, ., margin, ., equals, (, that, ., margin, ), ), {, return, false, ;, }, if, (]
[!, this, ., margin, ., equals, (, that, ., margin, ), ), {, return, false, ;, }, if, (, !]
[!, this, ., margin, ., equals, (, that, ., margin, ), ), {, return, false, ;, }, if, (, !]
[!, this, ., margin, ., equals, (, that, ., margin, ), ), {, return, false, ;, }, if, (, !]
[(, that, ., margin, ), ), {, return, false, ;, }, if, (, !, this, ., padding, ., equals, (]
[(, that, ., margin, ), ), {, return, false, ;, }, if, (, !, this, ., padding, ., equals, (]
[return, false, ;, }, if, (, !, this, ., padding, ., equals, (, that, ., padding, ), ), {, return]
[(, !, this, ., padding, ., equals, (, that, ., padding, ), ), {, return, false, ;, }, if, (]
[(, !, this, ., padding, ., equals, (, that, ., padding, ), ), {, return, false, ;, }, if, (]
[(, !, this, ., padding, ., equals, (, that, ., padding, ), ), {, return, false, ;, }, if, (]
[padding, ., equals, (, that, ., padding, ), ), {, return, false, ;, }, if, (, this, ., height, !=]
[padding, ., equals, (, that, ., padding, ), ), {, return, false, ;, }, if, (, this, ., height, !=]
[padding, ), ), {, return, false, ;, }, if, (, this, ., height, !=, that, ., height, ), {, return]
[false, ;, }, if, (, this, ., height, !=, that, ., height, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., height, !=, that, ., height, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., height, !=, that, ., height, ), {, return, false, ;, }, if, (]
[(, this, ., height, !=, that, ., height, ), {, return, false, ;, }, if, (, this, ., width, !=]
[(, this, ., height, !=, that, ., height, ), {, return, false, ;, }, if, (, this, ., width, !=]
[., height, ), {, return, false, ;, }, if, (, this, ., width, !=, that, ., width, ), {, return]
[return, false, ;, }, if, (, this, ., width, !=, that, ., width, ), {, return, false, ;, }, return]
[{, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, AbstractBlock, clone, =]
[;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, AbstractBlock, clone, =, (, AbstractBlock, )]
[;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, AbstractBlock, clone, =, (, AbstractBlock, )]
[public, Object, clone, (, ), throws, CloneNotSupportedException, {, AbstractBlock, clone, =, (, AbstractBlock, ), super, ., clone, (, ), ;]
[public, Object, clone, (, ), throws, CloneNotSupportedException, {, AbstractBlock, clone, =, (, AbstractBlock, ), super, ., clone, (, ), ;]
[), throws, CloneNotSupportedException, {, AbstractBlock, clone, =, (, AbstractBlock, ), super, ., clone, (, ), ;, clone, ., bounds, =]
[{, AbstractBlock, clone, =, (, AbstractBlock, ), super, ., clone, (, ), ;, clone, ., bounds, =, (, Rectangle2D, )]
[{, AbstractBlock, clone, =, (, AbstractBlock, ), super, ., clone, (, ), ;, clone, ., bounds, =, (, Rectangle2D, )]
[(, AbstractBlock, ), super, ., clone, (, ), ;, clone, ., bounds, =, (, Rectangle2D, ), ShapeUtilities, ., clone, (]
[(, AbstractBlock, ), super, ., clone, (, ), ;, clone, ., bounds, =, (, Rectangle2D, ), ShapeUtilities, ., clone, (]
[), ;, clone, ., bounds, =, (, Rectangle2D, ), ShapeUtilities, ., clone, (, this, ., bounds, ), ;, if, (]
[), ;, clone, ., bounds, =, (, Rectangle2D, ), ShapeUtilities, ., clone, (, this, ., bounds, ), ;, if, (]
[), ;, clone, ., bounds, =, (, Rectangle2D, ), ShapeUtilities, ., clone, (, this, ., bounds, ), ;, if, (]
[., clone, (, this, ., bounds, ), ;, if, (, this, ., frame, instanceof, PublicCloneable, ), {, PublicCloneable, pc, =]
[this, ., bounds, ), ;, if, (, this, ., frame, instanceof, PublicCloneable, ), {, PublicCloneable, pc, =, (, PublicCloneable, )]
[this, ., bounds, ), ;, if, (, this, ., frame, instanceof, PublicCloneable, ), {, PublicCloneable, pc, =, (, PublicCloneable, )]
[;, if, (, this, ., frame, instanceof, PublicCloneable, ), {, PublicCloneable, pc, =, (, PublicCloneable, ), this, ., frame, ;]
[;, if, (, this, ., frame, instanceof, PublicCloneable, ), {, PublicCloneable, pc, =, (, PublicCloneable, ), this, ., frame, ;]
[., frame, instanceof, PublicCloneable, ), {, PublicCloneable, pc, =, (, PublicCloneable, ), this, ., frame, ;, clone, ., frame, =]
[PublicCloneable, ), {, PublicCloneable, pc, =, (, PublicCloneable, ), this, ., frame, ;, clone, ., frame, =, (, BlockFrame, )]
[PublicCloneable, ), {, PublicCloneable, pc, =, (, PublicCloneable, ), this, ., frame, ;, clone, ., frame, =, (, BlockFrame, )]
[), this, ., frame, ;, clone, ., frame, =, (, BlockFrame, ), pc, ., clone, (, ), ;, }, return]
[., clone, (, ), ;, }, return, clone, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[., clone, (, ), ;, }, return, clone, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[return, clone, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;]
[return, clone, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;]
[private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writeShape, (]
[private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writeShape, (]
[ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writeShape, (, this, ., bounds, ,]
[this, ., bounds, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {]
[this, ., bounds, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., bounds, =]
[stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., bounds, =, (, Rectangle2D, )]
[stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., bounds, =, (, Rectangle2D, )]
[,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., bounds, =, (, Rectangle2D, ), SerialUtilities, ., readShape, (]
