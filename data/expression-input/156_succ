[=, compiler, ;, this, ., tryNodesContainingReturnStatements, =, new, HashSet, <, Node, >, (, ), ;, }, @, Override, public, void]
[., compiler, =, compiler, ;, this, ., tryNodesContainingReturnStatements, =, new, HashSet, <, Node, >, (, ), ;, }, @, Override]
[;, this, ., tryNodesContainingReturnStatements, =, new, HashSet, <, Node, >, (, ), ;, }, @, Override, public, void, process, (]
[=, new, HashSet, <, Node, >, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., tryNodesContainingReturnStatements, =, new, HashSet, <, Node, >, (, ), ;, }, @, Override, public, void, process, (, Node, externs]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[;, }, private, class, RemoveTryCatchCode, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[., traverse, (, compiler, ,, root, ,, new, RemoveTryCatchCode, (, ), ), ;, }, private, class, RemoveTryCatchCode, extends, AbstractPostOrderCallback, {]
[,, root, ,, new, RemoveTryCatchCode, (, ), ), ;, }, private, class, RemoveTryCatchCode, extends, AbstractPostOrderCallback, {, @, Override, public, void]
[,, new, RemoveTryCatchCode, (, ), ), ;, }, private, class, RemoveTryCatchCode, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (]
[), ;, }, private, class, RemoveTryCatchCode, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[), {, case, Token, ., TRY, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=]
[., getType, (, ), ), {, case, Token, ., TRY, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;]
[:, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., shouldPreserveTry, (]
[., TRY, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, .]
[;, if, (, info, !=, null, &&, info, ., shouldPreserveTry, (, ), ), {, return, ;, }, Node, tryBlock, =]
[., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., shouldPreserveTry, (, ), ), {, return, ;]
[), {, return, ;, }, Node, tryBlock, =, n, ., getFirstChild, (, ), ;, Node, catchBlock, =, tryBlock, ., getNext]
[&&, info, ., shouldPreserveTry, (, ), ), {, return, ;, }, Node, tryBlock, =, n, ., getFirstChild, (, ), ;]
[!=, null, &&, info, ., shouldPreserveTry, (, ), ), {, return, ;, }, Node, tryBlock, =, n, ., getFirstChild, (]
[&&, info, ., shouldPreserveTry, (, ), ), {, return, ;, }, Node, tryBlock, =, n, ., getFirstChild, (, ), ;]
[), {, return, ;, }, Node, tryBlock, =, n, ., getFirstChild, (, ), ;, Node, catchBlock, =, tryBlock, ., getNext]
[., shouldPreserveTry, (, ), ), {, return, ;, }, Node, tryBlock, =, n, ., getFirstChild, (, ), ;, Node, catchBlock]
[;, Node, catchBlock, =, tryBlock, ., getNext, (, ), ;, Node, finallyBlock, =, catchBlock, !=, null, ?, catchBlock, ., getNext]
[., getFirstChild, (, ), ;, Node, catchBlock, =, tryBlock, ., getNext, (, ), ;, Node, finallyBlock, =, catchBlock, !=, null]
[;, Node, finallyBlock, =, catchBlock, !=, null, ?, catchBlock, ., getNext, (, ), :, null, ;, if, (, finallyBlock, !=]
[., getNext, (, ), ;, Node, finallyBlock, =, catchBlock, !=, null, ?, catchBlock, ., getNext, (, ), :, null, ;]
[;, if, (, finallyBlock, !=, null, &&, tryNodesContainingReturnStatements, ., contains, (, n, ), ), {, return, ;, }, if, (]
[?, catchBlock, ., getNext, (, ), :, null, ;, if, (, finallyBlock, !=, null, &&, tryNodesContainingReturnStatements, ., contains, (, n]
[!=, null, ?, catchBlock, ., getNext, (, ), :, null, ;, if, (, finallyBlock, !=, null, &&, tryNodesContainingReturnStatements, ., contains]
[?, catchBlock, ., getNext, (, ), :, null, ;, if, (, finallyBlock, !=, null, &&, tryNodesContainingReturnStatements, ., contains, (, n]
[:, null, ;, if, (, finallyBlock, !=, null, &&, tryNodesContainingReturnStatements, ., contains, (, n, ), ), {, return, ;, }]
[., getNext, (, ), :, null, ;, if, (, finallyBlock, !=, null, &&, tryNodesContainingReturnStatements, ., contains, (, n, ), )]
[;, if, (, finallyBlock, !=, null, &&, tryNodesContainingReturnStatements, ., contains, (, n, ), ), {, return, ;, }, if, (]
[), {, return, ;, }, if, (, catchBlock, ., hasOneChild, (, ), ), {, NodeUtil, ., redeclareVarsInsideBranch, (, catchBlock, )]
[&&, tryNodesContainingReturnStatements, ., contains, (, n, ), ), {, return, ;, }, if, (, catchBlock, ., hasOneChild, (, ), )]
[!=, null, &&, tryNodesContainingReturnStatements, ., contains, (, n, ), ), {, return, ;, }, if, (, catchBlock, ., hasOneChild, (]
[&&, tryNodesContainingReturnStatements, ., contains, (, n, ), ), {, return, ;, }, if, (, catchBlock, ., hasOneChild, (, ), )]
[), {, return, ;, }, if, (, catchBlock, ., hasOneChild, (, ), ), {, NodeUtil, ., redeclareVarsInsideBranch, (, catchBlock, )]
[., contains, (, n, ), ), {, return, ;, }, if, (, catchBlock, ., hasOneChild, (, ), ), {, NodeUtil]
[), ), {, return, ;, }, if, (, catchBlock, ., hasOneChild, (, ), ), {, NodeUtil, ., redeclareVarsInsideBranch, (, catchBlock]
[), {, NodeUtil, ., redeclareVarsInsideBranch, (, catchBlock, ), ;, }, n, ., detachChildren, (, ), ;, Node, block, ;, if]
[., hasOneChild, (, ), ), {, NodeUtil, ., redeclareVarsInsideBranch, (, catchBlock, ), ;, }, n, ., detachChildren, (, ), ;]
[;, }, n, ., detachChildren, (, ), ;, Node, block, ;, if, (, !, NodeUtil, ., isStatementBlock, (, parent, )]
[., redeclareVarsInsideBranch, (, catchBlock, ), ;, }, n, ., detachChildren, (, ), ;, Node, block, ;, if, (, !, NodeUtil]
[), ;, }, n, ., detachChildren, (, ), ;, Node, block, ;, if, (, !, NodeUtil, ., isStatementBlock, (, parent]
[;, Node, block, ;, if, (, !, NodeUtil, ., isStatementBlock, (, parent, ), ), {, block, =, IR, ., block]
[., detachChildren, (, ), ;, Node, block, ;, if, (, !, NodeUtil, ., isStatementBlock, (, parent, ), ), {, block]
[), {, block, =, IR, ., block, (, ), ;, parent, ., replaceChild, (, n, ,, block, ), ;, block]
[), {, block, =, IR, ., block, (, ), ;, parent, ., replaceChild, (, n, ,, block, ), ;, block]
[., isStatementBlock, (, parent, ), ), {, block, =, IR, ., block, (, ), ;, parent, ., replaceChild, (, n]
[), ), {, block, =, IR, ., block, (, ), ;, parent, ., replaceChild, (, n, ,, block, ), ;]
[=, IR, ., block, (, ), ;, parent, ., replaceChild, (, n, ,, block, ), ;, block, ., addChildToFront, (]
[;, parent, ., replaceChild, (, n, ,, block, ), ;, block, ., addChildToFront, (, tryBlock, ), ;, }, else, {]
[., block, (, ), ;, parent, ., replaceChild, (, n, ,, block, ), ;, block, ., addChildToFront, (, tryBlock, )]
[;, block, ., addChildToFront, (, tryBlock, ), ;, }, else, {, parent, ., replaceChild, (, n, ,, tryBlock, ), ;]
[., replaceChild, (, n, ,, block, ), ;, block, ., addChildToFront, (, tryBlock, ), ;, }, else, {, parent, .]
[,, block, ), ;, block, ., addChildToFront, (, tryBlock, ), ;, }, else, {, parent, ., replaceChild, (, n, ,]
[), ;, block, ., addChildToFront, (, tryBlock, ), ;, }, else, {, parent, ., replaceChild, (, n, ,, tryBlock, )]
[;, }, else, {, parent, ., replaceChild, (, n, ,, tryBlock, ), ;, block, =, parent, ;, }, if, (]
[., addChildToFront, (, tryBlock, ), ;, }, else, {, parent, ., replaceChild, (, n, ,, tryBlock, ), ;, block, =]
[), ;, }, else, {, parent, ., replaceChild, (, n, ,, tryBlock, ), ;, block, =, parent, ;, }, if]
[;, block, =, parent, ;, }, if, (, finallyBlock, !=, null, ), {, block, ., addChildAfter, (, finallyBlock, ,, tryBlock]
[., replaceChild, (, n, ,, tryBlock, ), ;, block, =, parent, ;, }, if, (, finallyBlock, !=, null, ), {]
[,, tryBlock, ), ;, block, =, parent, ;, }, if, (, finallyBlock, !=, null, ), {, block, ., addChildAfter, (]
[), ;, block, =, parent, ;, }, if, (, finallyBlock, !=, null, ), {, block, ., addChildAfter, (, finallyBlock, ,]
[=, parent, ;, }, if, (, finallyBlock, !=, null, ), {, block, ., addChildAfter, (, finallyBlock, ,, tryBlock, ), ;]
[;, }, if, (, finallyBlock, !=, null, ), {, block, ., addChildAfter, (, finallyBlock, ,, tryBlock, ), ;, }, compiler]
[), {, block, ., addChildAfter, (, finallyBlock, ,, tryBlock, ), ;, }, compiler, ., reportCodeChange, (, ), ;, break, ;]
[!=, null, ), {, block, ., addChildAfter, (, finallyBlock, ,, tryBlock, ), ;, }, compiler, ., reportCodeChange, (, ), ;]
[), {, block, ., addChildAfter, (, finallyBlock, ,, tryBlock, ), ;, }, compiler, ., reportCodeChange, (, ), ;, break, ;]
[;, }, compiler, ., reportCodeChange, (, ), ;, break, ;, case, Token, ., RETURN, :, boolean, isInTryBlock, =, false, ;]
[., addChildAfter, (, finallyBlock, ,, tryBlock, ), ;, }, compiler, ., reportCodeChange, (, ), ;, break, ;, case, Token, .]
[,, tryBlock, ), ;, }, compiler, ., reportCodeChange, (, ), ;, break, ;, case, Token, ., RETURN, :, boolean, isInTryBlock]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, break, ;, case, Token, ., RETURN, :, boolean, isInTryBlock, =, false]
[;, break, ;, case, Token, ., RETURN, :, boolean, isInTryBlock, =, false, ;, for, (, Node, anc, =, parent, ;]
[., reportCodeChange, (, ), ;, break, ;, case, Token, ., RETURN, :, boolean, isInTryBlock, =, false, ;, for, (, Node]
[:, boolean, isInTryBlock, =, false, ;, for, (, Node, anc, =, parent, ;, anc, !=, null, &&, !, anc, .]
[., RETURN, :, boolean, isInTryBlock, =, false, ;, for, (, Node, anc, =, parent, ;, anc, !=, null, &&, !]
[;, for, (, Node, anc, =, parent, ;, anc, !=, null, &&, !, anc, ., isFunction, (, ), ;, anc]
[;, anc, !=, null, &&, !, anc, ., isFunction, (, ), ;, anc, =, anc, ., getParent, (, ), )]
[;, anc, =, anc, ., getParent, (, ), ), {, if, (, anc, ., isTry, (, ), ), {, tryNodesContainingReturnStatements]
[&&, !, anc, ., isFunction, (, ), ;, anc, =, anc, ., getParent, (, ), ), {, if, (, anc]
[!=, null, &&, !, anc, ., isFunction, (, ), ;, anc, =, anc, ., getParent, (, ), ), {, if]
[&&, !, anc, ., isFunction, (, ), ;, anc, =, anc, ., getParent, (, ), ), {, if, (, anc]
[;, anc, =, anc, ., getParent, (, ), ), {, if, (, anc, ., isTry, (, ), ), {, tryNodesContainingReturnStatements]
[;, anc, =, anc, ., getParent, (, ), ), {, if, (, anc, ., isTry, (, ), ), {, tryNodesContainingReturnStatements]
[., isFunction, (, ), ;, anc, =, anc, ., getParent, (, ), ), {, if, (, anc, ., isTry, (]
[=, anc, ., getParent, (, ), ), {, if, (, anc, ., isTry, (, ), ), {, tryNodesContainingReturnStatements, ., add]
[), {, if, (, anc, ., isTry, (, ), ), {, tryNodesContainingReturnStatements, ., add, (, anc, ), ;, break, ;]
[., getParent, (, ), ), {, if, (, anc, ., isTry, (, ), ), {, tryNodesContainingReturnStatements, ., add, (, anc]
[), {, tryNodesContainingReturnStatements, ., add, (, anc, ), ;, break, ;, }, }, break, ;, }, }, }, }]
[., isTry, (, ), ), {, tryNodesContainingReturnStatements, ., add, (, anc, ), ;, break, ;, }, }, break, ;, }]
[;, break, ;, }, }, break, ;, }, }, }, }]
[., add, (, anc, ), ;, break, ;, }, }, break, ;, }, }, }, }]
[), ;, break, ;, }, }, break, ;, }, }, }, }]
