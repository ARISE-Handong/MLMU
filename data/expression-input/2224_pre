[time, ., DurationField, ;, import, org, ., joda, ., time, ., DurationFieldType, ;, public, abstract, class, ImpreciseDateTimeField, extends, BaseDateTimeField, {]
[;, import, org, ., joda, ., time, ., DurationFieldType, ;, public, abstract, class, ImpreciseDateTimeField, extends, BaseDateTimeField, {, @, SuppressWarnings, (]
[DurationFieldType, ;, public, abstract, class, ImpreciseDateTimeField, extends, BaseDateTimeField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long, serialVersionUID, =]
[long, iUnitMillis, ;, private, final, DurationField, iDurationField, ;, public, ImpreciseDateTimeField, (, DateTimeFieldType, type, ,, long, unitMillis, ), {, super, (]
[private, final, DurationField, iDurationField, ;, public, ImpreciseDateTimeField, (, DateTimeFieldType, type, ,, long, unitMillis, ), {, super, (, type, ), ;]
[DurationField, iDurationField, ;, public, ImpreciseDateTimeField, (, DateTimeFieldType, type, ,, long, unitMillis, ), {, super, (, type, ), ;, iUnitMillis, =]
[;, public, ImpreciseDateTimeField, (, DateTimeFieldType, type, ,, long, unitMillis, ), {, super, (, type, ), ;, iUnitMillis, =, unitMillis, ;]
[ImpreciseDateTimeField, (, DateTimeFieldType, type, ,, long, unitMillis, ), {, super, (, type, ), ;, iUnitMillis, =, unitMillis, ;, iDurationField, =]
[type, ,, long, unitMillis, ), {, super, (, type, ), ;, iUnitMillis, =, unitMillis, ;, iDurationField, =, new, LinkedDurationField, (]
[type, ,, long, unitMillis, ), {, super, (, type, ), ;, iUnitMillis, =, unitMillis, ;, iDurationField, =, new, LinkedDurationField, (]
[(, long, instant, ,, long, value, ), ;, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[(, long, instant, ,, long, value, ), ;, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[long, value, ), ;, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, FieldUtils, ., safeToInt, (]
[), ;, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, FieldUtils, ., safeToInt, (, getDifferenceAsLong, (]
[public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, FieldUtils, ., safeToInt, (, getDifferenceAsLong, (, minuendInstant, ,]
[minuendInstant, ,, subtrahendInstant, ), ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (]
[minuendInstant, ,, subtrahendInstant, ), ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (]
[subtrahendInstant, ), ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, <]
[}, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, <, subtrahendInstant, ), {, return]
[public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, <, subtrahendInstant, ), {, return, -]
[getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, <, subtrahendInstant, ), {, return, -, getDifferenceAsLong, (]
[long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, <, subtrahendInstant, ), {, return, -, getDifferenceAsLong, (, subtrahendInstant, ,]
[if, (, minuendInstant, <, subtrahendInstant, ), {, return, -, getDifferenceAsLong, (, subtrahendInstant, ,, minuendInstant, ), ;, }, long, difference, =]
[if, (, minuendInstant, <, subtrahendInstant, ), {, return, -, getDifferenceAsLong, (, subtrahendInstant, ,, minuendInstant, ), ;, }, long, difference, =]
[(, minuendInstant, <, subtrahendInstant, ), {, return, -, getDifferenceAsLong, (, subtrahendInstant, ,, minuendInstant, ), ;, }, long, difference, =, (]
[(, minuendInstant, <, subtrahendInstant, ), {, return, -, getDifferenceAsLong, (, subtrahendInstant, ,, minuendInstant, ), ;, }, long, difference, =, (]
[<, subtrahendInstant, ), {, return, -, getDifferenceAsLong, (, subtrahendInstant, ,, minuendInstant, ), ;, }, long, difference, =, (, minuendInstant, -]
[{, return, -, getDifferenceAsLong, (, subtrahendInstant, ,, minuendInstant, ), ;, }, long, difference, =, (, minuendInstant, -, subtrahendInstant, ), /]
[(, subtrahendInstant, ,, minuendInstant, ), ;, }, long, difference, =, (, minuendInstant, -, subtrahendInstant, ), /, iUnitMillis, ;, if, (]
[(, subtrahendInstant, ,, minuendInstant, ), ;, }, long, difference, =, (, minuendInstant, -, subtrahendInstant, ), /, iUnitMillis, ;, if, (]
[,, minuendInstant, ), ;, }, long, difference, =, (, minuendInstant, -, subtrahendInstant, ), /, iUnitMillis, ;, if, (, add, (]
[), ;, }, long, difference, =, (, minuendInstant, -, subtrahendInstant, ), /, iUnitMillis, ;, if, (, add, (, subtrahendInstant, ,]
[long, difference, =, (, minuendInstant, -, subtrahendInstant, ), /, iUnitMillis, ;, if, (, add, (, subtrahendInstant, ,, difference, ), <]
[-, subtrahendInstant, ), /, iUnitMillis, ;, if, (, add, (, subtrahendInstant, ,, difference, ), <, minuendInstant, ), {, do, {]
[-, subtrahendInstant, ), /, iUnitMillis, ;, if, (, add, (, subtrahendInstant, ,, difference, ), <, minuendInstant, ), {, do, {]
[if, (, add, (, subtrahendInstant, ,, difference, ), <, minuendInstant, ), {, do, {, difference, ++, ;, }, while, (]
[if, (, add, (, subtrahendInstant, ,, difference, ), <, minuendInstant, ), {, do, {, difference, ++, ;, }, while, (]
[add, (, subtrahendInstant, ,, difference, ), <, minuendInstant, ), {, do, {, difference, ++, ;, }, while, (, add, (]
[subtrahendInstant, ,, difference, ), <, minuendInstant, ), {, do, {, difference, ++, ;, }, while, (, add, (, subtrahendInstant, ,]
[), <, minuendInstant, ), {, do, {, difference, ++, ;, }, while, (, add, (, subtrahendInstant, ,, difference, ), <=]
[), {, do, {, difference, ++, ;, }, while, (, add, (, subtrahendInstant, ,, difference, ), <=, minuendInstant, ), ;]
[), {, do, {, difference, ++, ;, }, while, (, add, (, subtrahendInstant, ,, difference, ), <=, minuendInstant, ), ;]
[}, while, (, add, (, subtrahendInstant, ,, difference, ), <=, minuendInstant, ), ;, difference, --, ;, }, else, if, (]
[}, while, (, add, (, subtrahendInstant, ,, difference, ), <=, minuendInstant, ), ;, difference, --, ;, }, else, if, (]
[(, add, (, subtrahendInstant, ,, difference, ), <=, minuendInstant, ), ;, difference, --, ;, }, else, if, (, add, (]
[(, subtrahendInstant, ,, difference, ), <=, minuendInstant, ), ;, difference, --, ;, }, else, if, (, add, (, subtrahendInstant, ,]
[difference, ), <=, minuendInstant, ), ;, difference, --, ;, }, else, if, (, add, (, subtrahendInstant, ,, difference, ), >]
[;, difference, --, ;, }, else, if, (, add, (, subtrahendInstant, ,, difference, ), >, minuendInstant, ), {, do, {]
[;, difference, --, ;, }, else, if, (, add, (, subtrahendInstant, ,, difference, ), >, minuendInstant, ), {, do, {]
[if, (, add, (, subtrahendInstant, ,, difference, ), >, minuendInstant, ), {, do, {, difference, --, ;, }, while, (]
[if, (, add, (, subtrahendInstant, ,, difference, ), >, minuendInstant, ), {, do, {, difference, --, ;, }, while, (]
[add, (, subtrahendInstant, ,, difference, ), >, minuendInstant, ), {, do, {, difference, --, ;, }, while, (, add, (]
[subtrahendInstant, ,, difference, ), >, minuendInstant, ), {, do, {, difference, --, ;, }, while, (, add, (, subtrahendInstant, ,]
[), >, minuendInstant, ), {, do, {, difference, --, ;, }, while, (, add, (, subtrahendInstant, ,, difference, ), >]
[do, {, difference, --, ;, }, while, (, add, (, subtrahendInstant, ,, difference, ), >, minuendInstant, ), ;, }, return]
[,, difference, ), >, minuendInstant, ), ;, }, return, difference, ;, }, public, final, DurationField, getDurationField, (, ), {, return]
[(, ), ;, public, abstract, long, roundFloor, (, long, instant, ), ;, protected, final, long, getDurationUnitMillis, (, ), {, return]
[(, ), {, return, iUnitMillis, ;, }, private, final, class, LinkedDurationField, extends, BaseDurationField, {, private, static, final, long, serialVersionUID, =]
[), {, return, iUnitMillis, ;, }, private, final, class, LinkedDurationField, extends, BaseDurationField, {, private, static, final, long, serialVersionUID, =, -]
[extends, BaseDurationField, {, private, static, final, long, serialVersionUID, =, -, 203813474600094134L, ;, LinkedDurationField, (, DurationFieldType, type, ), {, super, (]
[;, LinkedDurationField, (, DurationFieldType, type, ), {, super, (, type, ), ;, }, public, boolean, isPrecise, (, ), {, return]
[), ;, }, public, boolean, isPrecise, (, ), {, return, false, ;, }, public, long, getUnitMillis, (, ), {, return]
[getUnitMillis, (, ), {, return, iUnitMillis, ;, }, public, int, getValue, (, long, duration, ,, long, instant, ), {, return]
[getUnitMillis, (, ), {, return, iUnitMillis, ;, }, public, int, getValue, (, long, duration, ,, long, instant, ), {, return]
[;, }, public, int, getValue, (, long, duration, ,, long, instant, ), {, return, ImpreciseDateTimeField, ., this, ., getDifference, (]
[;, }, public, int, getValue, (, long, duration, ,, long, instant, ), {, return, ImpreciseDateTimeField, ., this, ., getDifference, (]
[public, int, getValue, (, long, duration, ,, long, instant, ), {, return, ImpreciseDateTimeField, ., this, ., getDifference, (, instant, +]
[getValue, (, long, duration, ,, long, instant, ), {, return, ImpreciseDateTimeField, ., this, ., getDifference, (, instant, +, duration, ,]
[instant, +, duration, ,, instant, ), ;, }, public, long, getValueAsLong, (, long, duration, ,, long, instant, ), {, return]
[instant, +, duration, ,, instant, ), ;, }, public, long, getValueAsLong, (, long, duration, ,, long, instant, ), {, return]
[;, }, public, long, getValueAsLong, (, long, duration, ,, long, instant, ), {, return, ImpreciseDateTimeField, ., this, ., getDifferenceAsLong, (]
[;, }, public, long, getValueAsLong, (, long, duration, ,, long, instant, ), {, return, ImpreciseDateTimeField, ., this, ., getDifferenceAsLong, (]
[public, long, getValueAsLong, (, long, duration, ,, long, instant, ), {, return, ImpreciseDateTimeField, ., this, ., getDifferenceAsLong, (, instant, +]
[getValueAsLong, (, long, duration, ,, long, instant, ), {, return, ImpreciseDateTimeField, ., this, ., getDifferenceAsLong, (, instant, +, duration, ,]
[instant, +, duration, ,, instant, ), ;, }, public, long, getMillis, (, int, value, ,, long, instant, ), {, return]
[instant, +, duration, ,, instant, ), ;, }, public, long, getMillis, (, int, value, ,, long, instant, ), {, return]
[instant, +, duration, ,, instant, ), ;, }, public, long, getMillis, (, int, value, ,, long, instant, ), {, return]
[;, }, public, long, getMillis, (, int, value, ,, long, instant, ), {, return, ImpreciseDateTimeField, ., this, ., add, (]
[public, long, getMillis, (, int, value, ,, long, instant, ), {, return, ImpreciseDateTimeField, ., this, ., add, (, instant, ,]
[(, int, value, ,, long, instant, ), {, return, ImpreciseDateTimeField, ., this, ., add, (, instant, ,, value, ), -]
[instant, ,, value, ), -, instant, ;, }, public, long, getMillis, (, long, value, ,, long, instant, ), {, return]
[instant, ,, value, ), -, instant, ;, }, public, long, getMillis, (, long, value, ,, long, instant, ), {, return]
[instant, ,, value, ), -, instant, ;, }, public, long, getMillis, (, long, value, ,, long, instant, ), {, return]
[;, }, public, long, getMillis, (, long, value, ,, long, instant, ), {, return, ImpreciseDateTimeField, ., this, ., add, (]
[public, long, getMillis, (, long, value, ,, long, instant, ), {, return, ImpreciseDateTimeField, ., this, ., add, (, instant, ,]
[(, long, value, ,, long, instant, ), {, return, ImpreciseDateTimeField, ., this, ., add, (, instant, ,, value, ), -]
[instant, ,, value, ), -, instant, ;, }, public, long, add, (, long, instant, ,, int, value, ), {, return]
[instant, ,, value, ), -, instant, ;, }, public, long, add, (, long, instant, ,, int, value, ), {, return]
[;, }, public, long, add, (, long, instant, ,, int, value, ), {, return, ImpreciseDateTimeField, ., this, ., add, (]
[public, long, add, (, long, instant, ,, int, value, ), {, return, ImpreciseDateTimeField, ., this, ., add, (, instant, ,]
[add, (, instant, ,, value, ), ;, }, public, long, add, (, long, instant, ,, long, value, ), {, return]
[add, (, instant, ,, value, ), ;, }, public, long, add, (, long, instant, ,, long, value, ), {, return]
[;, }, public, long, add, (, long, instant, ,, long, value, ), {, return, ImpreciseDateTimeField, ., this, ., add, (]
[public, long, add, (, long, instant, ,, long, value, ), {, return, ImpreciseDateTimeField, ., this, ., add, (, instant, ,]
[add, (, instant, ,, value, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[add, (, instant, ,, value, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, ImpreciseDateTimeField, ., this, ., getDifference, (]
[public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, ImpreciseDateTimeField, ., this, ., getDifference, (, minuendInstant, ,]
[getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, ImpreciseDateTimeField, ., this, ., getDifferenceAsLong, (]
[public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, ImpreciseDateTimeField, ., this, ., getDifferenceAsLong, (, minuendInstant, ,]
