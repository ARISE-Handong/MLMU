[;, private, static, final, double, [, ], STATIC_C, =, {, 2.0, /, 9.0, ,, 1.0, /, 3.0, ,, 1.0, /]
[;, private, static, final, double, [, ], [, ], STATIC_A, =, {, {, 2.0, /, 9.0, }, ,, {, 1.0]
[,, 1.0, /, 3.0, ,, 1.0, /, 2.0, ,, 3.0, /, 5.0, ,, 1.0, ,, 1.0, }, ;, private, static]
[/, 9.0, ,, 1.0, /, 3.0, ,, 1.0, /, 2.0, ,, 3.0, /, 5.0, ,, 1.0, ,, 1.0, }, ;]
[,, 1.0, /, 3.0, ,, 1.0, /, 2.0, ,, 3.0, /, 5.0, ,, 1.0, ,, 1.0, }, ;, private, static]
[,, 1.0, /, 2.0, ,, 3.0, /, 5.0, ,, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ]]
[/, 3.0, ,, 1.0, /, 2.0, ,, 3.0, /, 5.0, ,, 1.0, ,, 1.0, }, ;, private, static, final, double]
[,, 1.0, /, 2.0, ,, 3.0, /, 5.0, ,, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ]]
[,, 3.0, /, 5.0, ,, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ], [, ], STATIC_A, =]
[/, 2.0, ,, 3.0, /, 5.0, ,, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ], [, ]]
[,, 3.0, /, 5.0, ,, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ], [, ], STATIC_A, =]
[,, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ], [, ], STATIC_A, =, {, {, 2.0, /]
[/, 5.0, ,, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ], [, ], STATIC_A, =, {, {]
[,, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ], [, ], STATIC_A, =, {, {, 2.0, /]
[,, 1.0, }, ;, private, static, final, double, [, ], [, ], STATIC_A, =, {, {, 2.0, /, 9.0, }]
[}, ;, private, static, final, double, [, ], [, ], STATIC_A, =, {, {, 2.0, /, 9.0, }, ,, {]
[;, private, static, final, double, [, ], STATIC_B, =, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,]
[,, {, 1.0, /, 12.0, ,, 1.0, /, 4.0, }, ,, {, 1.0, /, 8.0, ,, 0.0, ,, 3.0, /]
[}, ,, {, 1.0, /, 12.0, ,, 1.0, /, 4.0, }, ,, {, 1.0, /, 8.0, ,, 0.0, ,, 3.0]
[/, 9.0, }, ,, {, 1.0, /, 12.0, ,, 1.0, /, 4.0, }, ,, {, 1.0, /, 8.0, ,, 0.0]
[}, ,, {, 1.0, /, 12.0, ,, 1.0, /, 4.0, }, ,, {, 1.0, /, 8.0, ,, 0.0, ,, 3.0]
[,, {, 1.0, /, 8.0, ,, 0.0, ,, 3.0, /, 8.0, }, ,, {, 91.0, /, 500.0, ,, -, 27.0]
[,, 1.0, /, 4.0, }, ,, {, 1.0, /, 8.0, ,, 0.0, ,, 3.0, /, 8.0, }, ,, {, 91.0]
[/, 12.0, ,, 1.0, /, 4.0, }, ,, {, 1.0, /, 8.0, ,, 0.0, ,, 3.0, /, 8.0, }, ,]
[,, 1.0, /, 4.0, }, ,, {, 1.0, /, 8.0, ,, 0.0, ,, 3.0, /, 8.0, }, ,, {, 91.0]
[}, ,, {, 1.0, /, 8.0, ,, 0.0, ,, 3.0, /, 8.0, }, ,, {, 91.0, /, 500.0, ,, -]
[/, 4.0, }, ,, {, 1.0, /, 8.0, ,, 0.0, ,, 3.0, /, 8.0, }, ,, {, 91.0, /, 500.0]
[}, ,, {, 1.0, /, 8.0, ,, 0.0, ,, 3.0, /, 8.0, }, ,, {, 91.0, /, 500.0, ,, -]
[,, {, 91.0, /, 500.0, ,, -, 27.0, /, 100.0, ,, 78.0, /, 125.0, ,, 8.0, /, 125.0, }, ,]
[,, 0.0, ,, 3.0, /, 8.0, }, ,, {, 91.0, /, 500.0, ,, -, 27.0, /, 100.0, ,, 78.0, /]
[/, 8.0, ,, 0.0, ,, 3.0, /, 8.0, }, ,, {, 91.0, /, 500.0, ,, -, 27.0, /, 100.0, ,]
[,, 0.0, ,, 3.0, /, 8.0, }, ,, {, 91.0, /, 500.0, ,, -, 27.0, /, 100.0, ,, 78.0, /]
[,, 3.0, /, 8.0, }, ,, {, 91.0, /, 500.0, ,, -, 27.0, /, 100.0, ,, 78.0, /, 125.0, ,]
[}, ,, {, 91.0, /, 500.0, ,, -, 27.0, /, 100.0, ,, 78.0, /, 125.0, ,, 8.0, /, 125.0, }]
[/, 8.0, }, ,, {, 91.0, /, 500.0, ,, -, 27.0, /, 100.0, ,, 78.0, /, 125.0, ,, 8.0, /]
[}, ,, {, 91.0, /, 500.0, ,, -, 27.0, /, 100.0, ,, 78.0, /, 125.0, ,, 8.0, /, 125.0, }]
[,, {, -, 11.0, /, 20.0, ,, 27.0, /, 20.0, ,, 12.0, /, 5.0, ,, -, 36.0, /, 5.0, ,]
[,, -, 27.0, /, 100.0, ,, 78.0, /, 125.0, ,, 8.0, /, 125.0, }, ,, {, -, 11.0, /, 20.0]
[/, 500.0, ,, -, 27.0, /, 100.0, ,, 78.0, /, 125.0, ,, 8.0, /, 125.0, }, ,, {, -, 11.0]
[,, -, 27.0, /, 100.0, ,, 78.0, /, 125.0, ,, 8.0, /, 125.0, }, ,, {, -, 11.0, /, 20.0]
[,, 78.0, /, 125.0, ,, 8.0, /, 125.0, }, ,, {, -, 11.0, /, 20.0, ,, 27.0, /, 20.0, ,]
[/, 100.0, ,, 78.0, /, 125.0, ,, 8.0, /, 125.0, }, ,, {, -, 11.0, /, 20.0, ,, 27.0, /]
[/, 100.0, ,, 78.0, /, 125.0, ,, 8.0, /, 125.0, }, ,, {, -, 11.0, /, 20.0, ,, 27.0, /]
[,, 78.0, /, 125.0, ,, 8.0, /, 125.0, }, ,, {, -, 11.0, /, 20.0, ,, 27.0, /, 20.0, ,]
[,, 8.0, /, 125.0, }, ,, {, -, 11.0, /, 20.0, ,, 27.0, /, 20.0, ,, 12.0, /, 5.0, ,]
[/, 125.0, ,, 8.0, /, 125.0, }, ,, {, -, 11.0, /, 20.0, ,, 27.0, /, 20.0, ,, 12.0, /]
[,, 8.0, /, 125.0, }, ,, {, -, 11.0, /, 20.0, ,, 27.0, /, 20.0, ,, 12.0, /, 5.0, ,]
[}, ,, {, -, 11.0, /, 20.0, ,, 27.0, /, 20.0, ,, 12.0, /, 5.0, ,, -, 36.0, /, 5.0]
[/, 125.0, }, ,, {, -, 11.0, /, 20.0, ,, 27.0, /, 20.0, ,, 12.0, /, 5.0, ,, -, 36.0]
[}, ,, {, -, 11.0, /, 20.0, ,, 27.0, /, 20.0, ,, 12.0, /, 5.0, ,, -, 36.0, /, 5.0]
[,, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0]
[,, 27.0, /, 20.0, ,, 12.0, /, 5.0, ,, -, 36.0, /, 5.0, ,, 5.0, }, ,, {, 1.0, /]
[/, 20.0, ,, 27.0, /, 20.0, ,, 12.0, /, 5.0, ,, -, 36.0, /, 5.0, ,, 5.0, }, ,, {]
[/, 20.0, ,, 27.0, /, 20.0, ,, 12.0, /, 5.0, ,, -, 36.0, /, 5.0, ,, 5.0, }, ,, {]
[,, 27.0, /, 20.0, ,, 12.0, /, 5.0, ,, -, 36.0, /, 5.0, ,, 5.0, }, ,, {, 1.0, /]
[,, 12.0, /, 5.0, ,, -, 36.0, /, 5.0, ,, 5.0, }, ,, {, 1.0, /, 12.0, ,, 0.0, ,]
[/, 20.0, ,, 12.0, /, 5.0, ,, -, 36.0, /, 5.0, ,, 5.0, }, ,, {, 1.0, /, 12.0, ,]
[,, 12.0, /, 5.0, ,, -, 36.0, /, 5.0, ,, 5.0, }, ,, {, 1.0, /, 12.0, ,, 0.0, ,]
[,, -, 36.0, /, 5.0, ,, 5.0, }, ,, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,]
[/, 5.0, ,, -, 36.0, /, 5.0, ,, 5.0, }, ,, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /]
[,, -, 36.0, /, 5.0, ,, 5.0, }, ,, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,]
[,, 5.0, }, ,, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,]
[/, 5.0, ,, 5.0, }, ,, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /]
[/, 5.0, ,, 5.0, }, ,, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /]
[,, 5.0, }, ,, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,]
[}, ,, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,, 125.0, /]
[}, ;, private, static, final, double, [, ], STATIC_B, =, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0]
[,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0, ,, 5.0, /, 48.0, }]
[/, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0, ,, 5.0, /]
[,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0, ,, 5.0, /, 48.0, }]
[,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0, ,, 5.0, /, 48.0, }, }, ;]
[,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0, ,, 5.0, /, 48.0, }, }, ;, private, static, final, double]
[/, 32.0, ,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0, ,, 5.0, /, 48.0, }, }, ;, private, static]
[,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0, ,, 5.0, /, 48.0, }, }, ;, private, static, final, double]
[,, 125.0, /, 96.0, ,, 5.0, /, 48.0, }, }, ;, private, static, final, double, [, ], STATIC_B, =, {]
[/, 3.0, ,, 125.0, /, 96.0, ,, 5.0, /, 48.0, }, }, ;, private, static, final, double, [, ], STATIC_B]
[/, 3.0, ,, 125.0, /, 96.0, ,, 5.0, /, 48.0, }, }, ;, private, static, final, double, [, ], STATIC_B]
[,, 125.0, /, 96.0, ,, 5.0, /, 48.0, }, }, ;, private, static, final, double, [, ], STATIC_B, =, {]
[,, 5.0, /, 48.0, }, }, ;, private, static, final, double, [, ], STATIC_B, =, {, 1.0, /, 12.0, ,]
[/, 96.0, ,, 5.0, /, 48.0, }, }, ;, private, static, final, double, [, ], STATIC_B, =, {, 1.0, /]
[,, 5.0, /, 48.0, }, }, ;, private, static, final, double, [, ], STATIC_B, =, {, 1.0, /, 12.0, ,]
[}, }, ;, private, static, final, double, [, ], STATIC_B, =, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /]
[/, 48.0, }, }, ;, private, static, final, double, [, ], STATIC_B, =, {, 1.0, /, 12.0, ,, 0.0, ,]
[}, }, ;, private, static, final, double, [, ], STATIC_B, =, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /]
[;, private, static, final, double, [, ], STATIC_E, =, {, -, 1.0, /, 20.0, ,, 0.0, ,, 81.0, /, 160.0]
[,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0, ,, 5.0, /, 48.0, ,]
[/, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0, ,, 5.0, /]
[,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0, ,, 5.0, /, 48.0, ,]
[,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0, ,, 5.0, /, 48.0, ,, 0.0, }]
[,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0, ,, 5.0, /, 48.0, ,, 0.0, }, ;, private, static, final]
[/, 32.0, ,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0, ,, 5.0, /, 48.0, ,, 0.0, }, ;, private]
[,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0, ,, 5.0, /, 48.0, ,, 0.0, }, ;, private, static, final]
[,, 125.0, /, 96.0, ,, 5.0, /, 48.0, ,, 0.0, }, ;, private, static, final, double, [, ], STATIC_E, =]
[/, 3.0, ,, 125.0, /, 96.0, ,, 5.0, /, 48.0, ,, 0.0, }, ;, private, static, final, double, [, ]]
[/, 3.0, ,, 125.0, /, 96.0, ,, 5.0, /, 48.0, ,, 0.0, }, ;, private, static, final, double, [, ]]
[,, 125.0, /, 96.0, ,, 5.0, /, 48.0, ,, 0.0, }, ;, private, static, final, double, [, ], STATIC_E, =]
[,, 5.0, /, 48.0, ,, 0.0, }, ;, private, static, final, double, [, ], STATIC_E, =, {, -, 1.0, /]
[/, 96.0, ,, 5.0, /, 48.0, ,, 0.0, }, ;, private, static, final, double, [, ], STATIC_E, =, {, -]
[,, 5.0, /, 48.0, ,, 0.0, }, ;, private, static, final, double, [, ], STATIC_E, =, {, -, 1.0, /]
[,, 0.0, }, ;, private, static, final, double, [, ], STATIC_E, =, {, -, 1.0, /, 20.0, ,, 0.0, ,]
[/, 48.0, ,, 0.0, }, ;, private, static, final, double, [, ], STATIC_E, =, {, -, 1.0, /, 20.0, ,]
[,, 0.0, }, ;, private, static, final, double, [, ], STATIC_E, =, {, -, 1.0, /, 20.0, ,, 0.0, ,]
[}, ;, private, static, final, double, [, ], STATIC_E, =, {, -, 1.0, /, 20.0, ,, 0.0, ,, 81.0, /]
[;, public, HighamHall54Integrator, (, final, double, minStep, ,, final, double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, )]
[,, 0.0, ,, 81.0, /, 160.0, ,, -, 6.0, /, 5.0, ,, 25.0, /, 32.0, ,, 1.0, /, 16.0, ,]
[/, 20.0, ,, 0.0, ,, 81.0, /, 160.0, ,, -, 6.0, /, 5.0, ,, 25.0, /, 32.0, ,, 1.0, /]
[/, 20.0, ,, 0.0, ,, 81.0, /, 160.0, ,, -, 6.0, /, 5.0, ,, 25.0, /, 32.0, ,, 1.0, /]
[,, 0.0, ,, 81.0, /, 160.0, ,, -, 6.0, /, 5.0, ,, 25.0, /, 32.0, ,, 1.0, /, 16.0, ,]
[,, 81.0, /, 160.0, ,, -, 6.0, /, 5.0, ,, 25.0, /, 32.0, ,, 1.0, /, 16.0, ,, -, 1.0]
[,, -, 6.0, /, 5.0, ,, 25.0, /, 32.0, ,, 1.0, /, 16.0, ,, -, 1.0, /, 10.0, }, ;]
[/, 160.0, ,, -, 6.0, /, 5.0, ,, 25.0, /, 32.0, ,, 1.0, /, 16.0, ,, -, 1.0, /, 10.0]
[,, -, 6.0, /, 5.0, ,, 25.0, /, 32.0, ,, 1.0, /, 16.0, ,, -, 1.0, /, 10.0, }, ;]
[,, 25.0, /, 32.0, ,, 1.0, /, 16.0, ,, -, 1.0, /, 10.0, }, ;, public, HighamHall54Integrator, (, final, double]
[/, 5.0, ,, 25.0, /, 32.0, ,, 1.0, /, 16.0, ,, -, 1.0, /, 10.0, }, ;, public, HighamHall54Integrator, (]
[/, 5.0, ,, 25.0, /, 32.0, ,, 1.0, /, 16.0, ,, -, 1.0, /, 10.0, }, ;, public, HighamHall54Integrator, (]
[,, 25.0, /, 32.0, ,, 1.0, /, 16.0, ,, -, 1.0, /, 10.0, }, ;, public, HighamHall54Integrator, (, final, double]
[,, 1.0, /, 16.0, ,, -, 1.0, /, 10.0, }, ;, public, HighamHall54Integrator, (, final, double, minStep, ,, final, double]
[/, 32.0, ,, 1.0, /, 16.0, ,, -, 1.0, /, 10.0, }, ;, public, HighamHall54Integrator, (, final, double, minStep, ,]
[,, 1.0, /, 16.0, ,, -, 1.0, /, 10.0, }, ;, public, HighamHall54Integrator, (, final, double, minStep, ,, final, double]
[,, -, 1.0, /, 10.0, }, ;, public, HighamHall54Integrator, (, final, double, minStep, ,, final, double, maxStep, ,, final, double]
[/, 16.0, ,, -, 1.0, /, 10.0, }, ;, public, HighamHall54Integrator, (, final, double, minStep, ,, final, double, maxStep, ,]
[,, -, 1.0, /, 10.0, }, ;, public, HighamHall54Integrator, (, final, double, minStep, ,, final, double, maxStep, ,, final, double]
[}, ;, public, HighamHall54Integrator, (, final, double, minStep, ,, final, double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance]
[/, 10.0, }, ;, public, HighamHall54Integrator, (, final, double, minStep, ,, final, double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final]
[/, 10.0, }, ;, public, HighamHall54Integrator, (, final, double, minStep, ,, final, double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final]
[}, ;, public, HighamHall54Integrator, (, final, double, minStep, ,, final, double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance]
[,, false, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,, new, HighamHall54StepInterpolator, (, ), ,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,]
[,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,, new, HighamHall54StepInterpolator, (, ), ,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, )]
[,, STATIC_A, ,, STATIC_B, ,, new, HighamHall54StepInterpolator, (, ), ,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, }]
[,, STATIC_B, ,, new, HighamHall54StepInterpolator, (, ), ,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, }, public, HighamHall54Integrator]
[,, new, HighamHall54StepInterpolator, (, ), ,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, }, public, HighamHall54Integrator, (, final]
[,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, }, public, HighamHall54Integrator, (, final, double, minStep, ,, final, double]
[,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, }, public, HighamHall54Integrator, (, final, double, minStep, ,, final, double, maxStep, ,]
[,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, }, public, HighamHall54Integrator, (, final, double, minStep, ,, final, double, maxStep, ,, final, double]
[,, scalRelativeTolerance, ), ;, }, public, HighamHall54Integrator, (, final, double, minStep, ,, final, double, maxStep, ,, final, double, [, ]]
[), ;, }, public, HighamHall54Integrator, (, final, double, minStep, ,, final, double, maxStep, ,, final, double, [, ], vecAbsoluteTolerance, ,]
[,, false, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,, new, HighamHall54StepInterpolator, (, ), ,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,]
[,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,, new, HighamHall54StepInterpolator, (, ), ,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, )]
[,, STATIC_A, ,, STATIC_B, ,, new, HighamHall54StepInterpolator, (, ), ,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, }]
[,, STATIC_B, ,, new, HighamHall54StepInterpolator, (, ), ,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, }, @, Override]
[,, new, HighamHall54StepInterpolator, (, ), ,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, }, @, Override, public, int]
[,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, }, @, Override, public, int, getOrder, (, ), {, return]
[,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, }, @, Override, public, int, getOrder, (, ), {, return, 5, ;]
[,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, }, @, Override, public, int, getOrder, (, ), {, return, 5, ;, }, @]
[,, vecRelativeTolerance, ), ;, }, @, Override, public, int, getOrder, (, ), {, return, 5, ;, }, @, Override, protected]
[), ;, }, @, Override, public, int, getOrder, (, ), {, return, 5, ;, }, @, Override, protected, double, estimateError]
[;, }, @, Override, protected, double, estimateError, (, final, double, [, ], [, ], yDotK, ,, final, double, [, ]]
[;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, double, errSum, =, STATIC_E]
[;, j, <, mainSetDimension, ;, ++, j, ), {, double, errSum, =, STATIC_E, [, 0, ], *, yDotK, [, 0]
[;, ++, j, ), {, double, errSum, =, STATIC_E, [, 0, ], *, yDotK, [, 0, ], [, j, ]]
[<, mainSetDimension, ;, ++, j, ), {, double, errSum, =, STATIC_E, [, 0, ], *, yDotK, [, 0, ], []
[;, ++, j, ), {, double, errSum, =, STATIC_E, [, 0, ], *, yDotK, [, 0, ], [, j, ]]
[), {, double, errSum, =, STATIC_E, [, 0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (]
[), {, double, errSum, =, STATIC_E, [, 0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (]
[;, for, (, int, l, =, 1, ;, l, <, STATIC_E, ., length, ;, ++, l, ), {, errSum, +=]
[*, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l, <, STATIC_E, .]
[[, 0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l]
[], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l, <, STATIC_E]
[;, for, (, int, l, =, 1, ;, l, <, STATIC_E, ., length, ;, ++, l, ), {, errSum, +=]
[[, j, ], ;, for, (, int, l, =, 1, ;, l, <, STATIC_E, ., length, ;, ++, l, )]
[[, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l, <, STATIC_E, ., length, ;]
[], [, j, ], ;, for, (, int, l, =, 1, ;, l, <, STATIC_E, ., length, ;, ++, l]
[], ;, for, (, int, l, =, 1, ;, l, <, STATIC_E, ., length, ;, ++, l, ), {, errSum]
[;, l, <, STATIC_E, ., length, ;, ++, l, ), {, errSum, +=, STATIC_E, [, l, ], *, yDotK, []
[;, ++, l, ), {, errSum, +=, STATIC_E, [, l, ], *, yDotK, [, l, ], [, j, ], ;]
[<, STATIC_E, ., length, ;, ++, l, ), {, errSum, +=, STATIC_E, [, l, ], *, yDotK, [, l, ]]
[;, ++, l, ), {, errSum, +=, STATIC_E, [, l, ], *, yDotK, [, l, ], [, j, ], ;]
[., length, ;, ++, l, ), {, errSum, +=, STATIC_E, [, l, ], *, yDotK, [, l, ], [, j]
[), {, errSum, +=, STATIC_E, [, l, ], *, yDotK, [, l, ], [, j, ], ;, }, final, double]
[), {, errSum, +=, STATIC_E, [, l, ], *, yDotK, [, l, ], [, j, ], ;, }, final, double]
[+=, STATIC_E, [, l, ], *, yDotK, [, l, ], [, j, ], ;, }, final, double, yScale, =, FastMath]
[;, }, final, double, yScale, =, FastMath, ., max, (, FastMath, ., abs, (, y0, [, j, ], ), ,]
[*, yDotK, [, l, ], [, j, ], ;, }, final, double, yScale, =, FastMath, ., max, (, FastMath, .]
[[, l, ], *, yDotK, [, l, ], [, j, ], ;, }, final, double, yScale, =, FastMath, ., max]
[], *, yDotK, [, l, ], [, j, ], ;, }, final, double, yScale, =, FastMath, ., max, (, FastMath]
[;, }, final, double, yScale, =, FastMath, ., max, (, FastMath, ., abs, (, y0, [, j, ], ), ,]
[[, j, ], ;, }, final, double, yScale, =, FastMath, ., max, (, FastMath, ., abs, (, y0, [, j]
[[, l, ], [, j, ], ;, }, final, double, yScale, =, FastMath, ., max, (, FastMath, ., abs, (]
[], [, j, ], ;, }, final, double, yScale, =, FastMath, ., max, (, FastMath, ., abs, (, y0, []
[], ;, }, final, double, yScale, =, FastMath, ., max, (, FastMath, ., abs, (, y0, [, j, ], )]
[;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (]
[., max, (, FastMath, ., abs, (, y0, [, j, ], ), ,, FastMath, ., abs, (, y1, [, j]
[,, FastMath, ., abs, (, y1, [, j, ], ), ), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null]
[., abs, (, y0, [, j, ], ), ,, FastMath, ., abs, (, y1, [, j, ], ), ), ;]
[), ,, FastMath, ., abs, (, y1, [, j, ], ), ), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==]
[[, j, ], ), ,, FastMath, ., abs, (, y1, [, j, ], ), ), ;, final, double, tol, =]
[], ), ,, FastMath, ., abs, (, y1, [, j, ], ), ), ;, final, double, tol, =, (, vecAbsoluteTolerance]
[), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :]
[., abs, (, y1, [, j, ], ), ), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?]
[), ), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, )]
[[, j, ], ), ), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance]
[], ), ), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale]
[;, final, double, ratio, =, h, *, errSum, /, tol, ;, error, +=, ratio, *, ratio, ;, }, return, FastMath]
[?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, [, j, ], *]
[), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, [, j, ]]
[==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, []
[), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, [, j, ]]
[:, (, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =, h]
[), :, (, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =]
[+, scalRelativeTolerance, *, yScale, ), :, (, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, [, j, ], *, yScale, ), ;]
[), :, (, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =]
[*, yScale, ), :, (, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double]
[), :, (, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =]
[;, final, double, ratio, =, h, *, errSum, /, tol, ;, error, +=, ratio, *, ratio, ;, }, return, FastMath]
[), ;, final, double, ratio, =, h, *, errSum, /, tol, ;, error, +=, ratio, *, ratio, ;, }, return]
[+, vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =, h, *, errSum, /, tol, ;, error]
[[, j, ], +, vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =, h, *, errSum, /]
[], +, vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =, h, *, errSum, /, tol, ;]
[), ;, final, double, ratio, =, h, *, errSum, /, tol, ;, error, +=, ratio, *, ratio, ;, }, return]
[*, yScale, ), ;, final, double, ratio, =, h, *, errSum, /, tol, ;, error, +=, ratio, *, ratio, ;]
[[, j, ], *, yScale, ), ;, final, double, ratio, =, h, *, errSum, /, tol, ;, error, +=, ratio]
[], *, yScale, ), ;, final, double, ratio, =, h, *, errSum, /, tol, ;, error, +=, ratio, *, ratio]
[), ;, final, double, ratio, =, h, *, errSum, /, tol, ;, error, +=, ratio, *, ratio, ;, }, return]
[;, error, +=, ratio, *, ratio, ;, }, return, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, }, }]
[/, tol, ;, error, +=, ratio, *, ratio, ;, }, return, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;]
[*, errSum, /, tol, ;, error, +=, ratio, *, ratio, ;, }, return, FastMath, ., sqrt, (, error, /, mainSetDimension]
[/, tol, ;, error, +=, ratio, *, ratio, ;, }, return, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;]
[;, error, +=, ratio, *, ratio, ;, }, return, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, }, }]
[+=, ratio, *, ratio, ;, }, return, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, }, }]
[;, }, return, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, }, }]
[*, ratio, ;, }, return, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, }, }]
[;, }, return, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, }, }]
[;, }, }]
[., sqrt, (, error, /, mainSetDimension, ), ;, }, }]
[), ;, }, }]
[/, mainSetDimension, ), ;, }, }]
[), ;, }, }]
