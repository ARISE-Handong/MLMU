[>, escaped, ;, MustBeReachingVariableDef, (, ControlFlowGraph, <, Node, >, cfg, ,, Scope, jsScope, ,, AbstractCompiler, compiler, ), {, super, (]
[;, MustBeReachingVariableDef, (, ControlFlowGraph, <, Node, >, cfg, ,, Scope, jsScope, ,, AbstractCompiler, compiler, ), {, super, (, cfg, ,]
[>, cfg, ,, Scope, jsScope, ,, AbstractCompiler, compiler, ), {, super, (, cfg, ,, new, MustDefJoin, (, ), ), ;]
[>, cfg, ,, Scope, jsScope, ,, AbstractCompiler, compiler, ), {, super, (, cfg, ,, new, MustDefJoin, (, ), ), ;]
[jsScope, ,, AbstractCompiler, compiler, ), {, super, (, cfg, ,, new, MustDefJoin, (, ), ), ;, this, ., jsScope, =]
[AbstractCompiler, compiler, ), {, super, (, cfg, ,, new, MustDefJoin, (, ), ), ;, this, ., jsScope, =, jsScope, ;]
[AbstractCompiler, compiler, ), {, super, (, cfg, ,, new, MustDefJoin, (, ), ), ;, this, ., jsScope, =, jsScope, ;]
[super, (, cfg, ,, new, MustDefJoin, (, ), ), ;, this, ., jsScope, =, jsScope, ;, this, ., compiler, =]
[cfg, ,, new, MustDefJoin, (, ), ), ;, this, ., jsScope, =, jsScope, ;, this, ., compiler, =, compiler, ;]
[cfg, ,, new, MustDefJoin, (, ), ), ;, this, ., jsScope, =, jsScope, ;, this, ., compiler, =, compiler, ;]
[(, ), ), ;, this, ., jsScope, =, jsScope, ;, this, ., compiler, =, compiler, ;, this, ., escaped, =]
[(, ), ), ;, this, ., jsScope, =, jsScope, ;, this, ., compiler, =, compiler, ;, this, ., escaped, =]
[jsScope, =, jsScope, ;, this, ., compiler, =, compiler, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;]
[jsScope, ;, this, ., compiler, =, compiler, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (]
[this, ., compiler, =, compiler, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,]
[compiler, =, compiler, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,, escaped, ,]
[,, compiler, ), ;, }, static, class, Definition, {, final, Node, node, ;, final, Set, <, Var, >, depends, =]
[,, compiler, ), ;, }, static, class, Definition, {, final, Node, node, ;, final, Set, <, Var, >, depends, =]
[Node, node, ;, final, Set, <, Var, >, depends, =, Sets, ., newHashSet, (, ), ;, private, boolean, unknownDependencies, =]
[depends, =, Sets, ., newHashSet, (, ), ;, private, boolean, unknownDependencies, =, false, ;, Definition, (, Node, node, ), {]
[depends, =, Sets, ., newHashSet, (, ), ;, private, boolean, unknownDependencies, =, false, ;, Definition, (, Node, node, ), {]
[newHashSet, (, ), ;, private, boolean, unknownDependencies, =, false, ;, Definition, (, Node, node, ), {, this, ., node, =]
[{, this, ., node, =, node, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[this, ., node, =, node, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, !]
[., node, =, node, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, !, (]
[., node, =, node, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, !, (]
[Override, public, boolean, equals, (, Object, other, ), {, if, (, !, (, other, instanceof, Definition, ), ), {, return]
[other, ), {, if, (, !, (, other, instanceof, Definition, ), ), {, return, false, ;, }, Definition, otherDef, =]
[if, (, !, (, other, instanceof, Definition, ), ), {, return, false, ;, }, Definition, otherDef, =, (, Definition, )]
[(, other, instanceof, Definition, ), ), {, return, false, ;, }, Definition, otherDef, =, (, Definition, ), other, ;, return]
[(, other, instanceof, Definition, ), ), {, return, false, ;, }, Definition, otherDef, =, (, Definition, ), other, ;, return]
[(, other, instanceof, Definition, ), ), {, return, false, ;, }, Definition, otherDef, =, (, Definition, ), other, ;, return]
[), ), {, return, false, ;, }, Definition, otherDef, =, (, Definition, ), other, ;, return, otherDef, ., node, ==]
[final, class, MustDef, implements, LatticeElement, {, final, Map, <, Var, ,, Definition, >, reachingDef, ;, public, MustDef, (, ), {]
[MustDef, implements, LatticeElement, {, final, Map, <, Var, ,, Definition, >, reachingDef, ;, public, MustDef, (, ), {, reachingDef, =]
[MustDef, implements, LatticeElement, {, final, Map, <, Var, ,, Definition, >, reachingDef, ;, public, MustDef, (, ), {, reachingDef, =]
[(, ), ;, }, public, MustDef, (, Iterator, <, Var, >, vars, ), {, this, (, ), ;, while, (]
[(, ), ;, }, public, MustDef, (, Iterator, <, Var, >, vars, ), {, this, (, ), ;, while, (]
[>, vars, ), {, this, (, ), ;, while, (, vars, ., hasNext, (, ), ), {, Var, var, =]
[>, vars, ), {, this, (, ), ;, while, (, vars, ., hasNext, (, ), ), {, Var, var, =]
[), ;, while, (, vars, ., hasNext, (, ), ), {, Var, var, =, vars, ., next, (, ), ;]
[), ;, while, (, vars, ., hasNext, (, ), ), {, Var, var, =, vars, ., next, (, ), ;]
[vars, ., hasNext, (, ), ), {, Var, var, =, vars, ., next, (, ), ;, reachingDef, ., put, (]
[hasNext, (, ), ), {, Var, var, =, vars, ., next, (, ), ;, reachingDef, ., put, (, var, ,]
[), {, Var, var, =, vars, ., next, (, ), ;, reachingDef, ., put, (, var, ,, new, Definition, (]
[), {, Var, var, =, vars, ., next, (, ), ;, reachingDef, ., put, (, var, ,, new, Definition, (]
[), {, Var, var, =, vars, ., next, (, ), ;, reachingDef, ., put, (, var, ,, new, Definition, (]
[(, var, ., scope, ., getRootNode, (, ), ), ), ;, }, }, public, MustDef, (, MustDef, other, ), {]
[., scope, ., getRootNode, (, ), ), ), ;, }, }, public, MustDef, (, MustDef, other, ), {, reachingDef, =]
[., scope, ., getRootNode, (, ), ), ), ;, }, }, public, MustDef, (, MustDef, other, ), {, reachingDef, =]
[(, ), ), ), ;, }, }, public, MustDef, (, MustDef, other, ), {, reachingDef, =, Maps, ., newHashMap, (]
[(, ), ), ), ;, }, }, public, MustDef, (, MustDef, other, ), {, reachingDef, =, Maps, ., newHashMap, (]
[., newHashMap, (, other, ., reachingDef, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return]
[., newHashMap, (, other, ., reachingDef, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return]
[newHashMap, (, other, ., reachingDef, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, (]
[newHashMap, (, other, ., reachingDef, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, (]
[), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, (, other, instanceof, MustDef, ), &&]
[), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, (, other, instanceof, MustDef, ), &&]
[), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, (, other, instanceof, MustDef, ), &&]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, (, other, instanceof, MustDef, ), &&, (]
[Override, public, boolean, equals, (, Object, other, ), {, return, (, other, instanceof, MustDef, ), &&, (, (, MustDef, )]
[), {, return, (, other, instanceof, MustDef, ), &&, (, (, MustDef, ), other, ), ., reachingDef, ., equals, (]
[), {, return, (, other, instanceof, MustDef, ), &&, (, (, MustDef, ), other, ), ., reachingDef, ., equals, (]
[<, MustDef, >, {, @, Override, public, MustDef, apply, (, MustDef, a, ,, MustDef, b, ), {, MustDef, result, =]
[MustDef, b, ), {, MustDef, result, =, new, MustDef, (, ), ;, Map, <, Var, ,, Definition, >, resultMap, =]
[MustDef, b, ), {, MustDef, result, =, new, MustDef, (, ), ;, Map, <, Var, ,, Definition, >, resultMap, =]
[Definition, >, resultMap, =, result, ., reachingDef, ;, for, (, Map, ., Entry, <, Var, ,, Definition, >, varEntry, :]
[Definition, >, resultMap, =, result, ., reachingDef, ;, for, (, Map, ., Entry, <, Var, ,, Definition, >, varEntry, :]
[Definition, >, resultMap, =, result, ., reachingDef, ;, for, (, Map, ., Entry, <, Var, ,, Definition, >, varEntry, :]
[Entry, <, Var, ,, Definition, >, varEntry, :, a, ., reachingDef, ., entrySet, (, ), ), {, Var, var, =]
[Entry, <, Var, ,, Definition, >, varEntry, :, a, ., reachingDef, ., entrySet, (, ), ), {, Var, var, =]
[., reachingDef, ., entrySet, (, ), ), {, Var, var, =, varEntry, ., getKey, (, ), ;, Definition, aDef, =]
[., reachingDef, ., entrySet, (, ), ), {, Var, var, =, varEntry, ., getKey, (, ), ;, Definition, aDef, =]
[Var, var, =, varEntry, ., getKey, (, ), ;, Definition, aDef, =, varEntry, ., getValue, (, ), ;, if, (]
[Var, var, =, varEntry, ., getKey, (, ), ;, Definition, aDef, =, varEntry, ., getValue, (, ), ;, if, (]
[=, varEntry, ., getKey, (, ), ;, Definition, aDef, =, varEntry, ., getValue, (, ), ;, if, (, aDef, ==]
[getKey, (, ), ;, Definition, aDef, =, varEntry, ., getValue, (, ), ;, if, (, aDef, ==, null, ), {]
[getKey, (, ), ;, Definition, aDef, =, varEntry, ., getValue, (, ), ;, if, (, aDef, ==, null, ), {]
[Definition, aDef, =, varEntry, ., getValue, (, ), ;, if, (, aDef, ==, null, ), {, resultMap, ., put, (]
[=, varEntry, ., getValue, (, ), ;, if, (, aDef, ==, null, ), {, resultMap, ., put, (, var, ,]
[aDef, ==, null, ), {, resultMap, ., put, (, var, ,, null, ), ;, continue, ;, }, Node, aNode, =]
[aDef, ==, null, ), {, resultMap, ., put, (, var, ,, null, ), ;, continue, ;, }, Node, aNode, =]
[., put, (, var, ,, null, ), ;, continue, ;, }, Node, aNode, =, aDef, ., node, ;, if, (]
[., put, (, var, ,, null, ), ;, continue, ;, }, Node, aNode, =, aDef, ., node, ;, if, (]
[., put, (, var, ,, null, ), ;, continue, ;, }, Node, aNode, =, aDef, ., node, ;, if, (]
[), ;, continue, ;, }, Node, aNode, =, aDef, ., node, ;, if, (, b, ., reachingDef, ., containsKey, (]
[=, aDef, ., node, ;, if, (, b, ., reachingDef, ., containsKey, (, var, ), ), {, Definition, bDef, =]
[=, aDef, ., node, ;, if, (, b, ., reachingDef, ., containsKey, (, var, ), ), {, Definition, bDef, =]
[=, aDef, ., node, ;, if, (, b, ., reachingDef, ., containsKey, (, var, ), ), {, Definition, bDef, =]
[(, b, ., reachingDef, ., containsKey, (, var, ), ), {, Definition, bDef, =, b, ., reachingDef, ., get, (]
[containsKey, (, var, ), ), {, Definition, bDef, =, b, ., reachingDef, ., get, (, var, ), ;, if, (]
[containsKey, (, var, ), ), {, Definition, bDef, =, b, ., reachingDef, ., get, (, var, ), ;, if, (]
[), {, Definition, bDef, =, b, ., reachingDef, ., get, (, var, ), ;, if, (, aDef, ., equals, (]
[=, b, ., reachingDef, ., get, (, var, ), ;, if, (, aDef, ., equals, (, bDef, ), ), {]
[=, b, ., reachingDef, ., get, (, var, ), ;, if, (, aDef, ., equals, (, bDef, ), ), {]
[., get, (, var, ), ;, if, (, aDef, ., equals, (, bDef, ), ), {, resultMap, ., put, (]
[(, var, ), ;, if, (, aDef, ., equals, (, bDef, ), ), {, resultMap, ., put, (, var, ,]
[aDef, ., equals, (, bDef, ), ), {, resultMap, ., put, (, var, ,, aDef, ), ;, }, else, {]
[aDef, ., equals, (, bDef, ), ), {, resultMap, ., put, (, var, ,, aDef, ), ;, }, else, {]
[bDef, ), ), {, resultMap, ., put, (, var, ,, aDef, ), ;, }, else, {, resultMap, ., put, (]
[), {, resultMap, ., put, (, var, ,, aDef, ), ;, }, else, {, resultMap, ., put, (, var, ,]
[,, aDef, ), ;, }, else, {, resultMap, ., put, (, var, ,, null, ), ;, }, }, else, {]
[,, aDef, ), ;, }, else, {, resultMap, ., put, (, var, ,, null, ), ;, }, }, else, {]
[}, else, {, resultMap, ., put, (, var, ,, null, ), ;, }, }, else, {, resultMap, ., put, (]
[{, resultMap, ., put, (, var, ,, null, ), ;, }, }, else, {, resultMap, ., put, (, var, ,]
[(, var, ,, aDef, ), ;, }, }, for, (, Map, ., Entry, <, Var, ,, Definition, >, entry, :]
[(, var, ,, aDef, ), ;, }, }, for, (, Map, ., Entry, <, Var, ,, Definition, >, entry, :]
[(, var, ,, aDef, ), ;, }, }, for, (, Map, ., Entry, <, Var, ,, Definition, >, entry, :]
[Entry, <, Var, ,, Definition, >, entry, :, b, ., reachingDef, ., entrySet, (, ), ), {, Var, var, =]
[Entry, <, Var, ,, Definition, >, entry, :, b, ., reachingDef, ., entrySet, (, ), ), {, Var, var, =]
[b, ., reachingDef, ., entrySet, (, ), ), {, Var, var, =, entry, ., getKey, (, ), ;, if, (]
[., reachingDef, ., entrySet, (, ), ), {, Var, var, =, entry, ., getKey, (, ), ;, if, (, !]
[., reachingDef, ., entrySet, (, ), ), {, Var, var, =, entry, ., getKey, (, ), ;, if, (, !]
[., reachingDef, ., entrySet, (, ), ), {, Var, var, =, entry, ., getKey, (, ), ;, if, (, !]
[), {, Var, var, =, entry, ., getKey, (, ), ;, if, (, !, a, ., reachingDef, ., containsKey, (]
[=, entry, ., getKey, (, ), ;, if, (, !, a, ., reachingDef, ., containsKey, (, var, ), ), {]
[=, entry, ., getKey, (, ), ;, if, (, !, a, ., reachingDef, ., containsKey, (, var, ), ), {]
[(, ), ;, if, (, !, a, ., reachingDef, ., containsKey, (, var, ), ), {, resultMap, ., put, (]
[;, if, (, !, a, ., reachingDef, ., containsKey, (, var, ), ), {, resultMap, ., put, (, var, ,]
[;, if, (, !, a, ., reachingDef, ., containsKey, (, var, ), ), {, resultMap, ., put, (, var, ,]
[var, ), ), {, resultMap, ., put, (, var, ,, entry, ., getValue, (, ), ), ;, }, }, return]
[getValue, (, ), ), ;, }, }, return, result, ;, }, }, @, Override, boolean, isForward, (, ), {, return]
[}, @, Override, boolean, isForward, (, ), {, return, true, ;, }, @, Override, MustDef, createEntryLattice, (, ), {, return]
[boolean, isForward, (, ), {, return, true, ;, }, @, Override, MustDef, createEntryLattice, (, ), {, return, new, MustDef, (]
[boolean, isForward, (, ), {, return, true, ;, }, @, Override, MustDef, createEntryLattice, (, ), {, return, new, MustDef, (]
[return, new, MustDef, (, jsScope, ., getVars, (, ), ), ;, }, @, Override, MustDef, createInitialEstimateLattice, (, ), {, return]
[MustDef, (, ), ;, }, @, Override, MustDef, flowThrough, (, Node, n, ,, MustDef, input, ), {, MustDef, output, =]
[;, }, @, Override, MustDef, flowThrough, (, Node, n, ,, MustDef, input, ), {, MustDef, output, =, new, MustDef, (]
[Override, MustDef, flowThrough, (, Node, n, ,, MustDef, input, ), {, MustDef, output, =, new, MustDef, (, input, ), ;]
[flowThrough, (, Node, n, ,, MustDef, input, ), {, MustDef, output, =, new, MustDef, (, input, ), ;, computeMustDef, (]
[Node, n, ,, MustDef, input, ), {, MustDef, output, =, new, MustDef, (, input, ), ;, computeMustDef, (, n, ,]
[,, MustDef, input, ), {, MustDef, output, =, new, MustDef, (, input, ), ;, computeMustDef, (, n, ,, n, ,]
[input, ), {, MustDef, output, =, new, MustDef, (, input, ), ;, computeMustDef, (, n, ,, n, ,, output, ,]
[output, =, new, MustDef, (, input, ), ;, computeMustDef, (, n, ,, n, ,, output, ,, false, ), ;, return]
[}, private, void, computeMustDef, (, Node, n, ,, Node, cfgNode, ,, MustDef, output, ,, boolean, conditional, ), {, switch, (]
[}, private, void, computeMustDef, (, Node, n, ,, Node, cfgNode, ,, MustDef, output, ,, boolean, conditional, ), {, switch, (]
[Node, cfgNode, ,, MustDef, output, ,, boolean, conditional, ), {, switch, (, n, ., getType, (, ), ), {, case]
[Node, cfgNode, ,, MustDef, output, ,, boolean, conditional, ), {, switch, (, n, ., getType, (, ), ), {, case]
[,, boolean, conditional, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., BLOCK, :, case]
[,, boolean, conditional, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., BLOCK, :, case]
[n, ., getType, (, ), ), {, case, Token, ., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case]
[n, ., getType, (, ), ), {, case, Token, ., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case]
[), {, case, Token, ., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case, Token, ., WHILE, :, case]
[), {, case, Token, ., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case, Token, ., WHILE, :, case]
[BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case]
[BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case]
[., FUNCTION, :, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :]
[:, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :, computeMustDef, (]
[:, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :, computeMustDef, (]
[Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :, computeMustDef, (, NodeUtil, ., getConditionExpression, (]
[:, case, Token, ., DO, :, case, Token, ., IF, :, computeMustDef, (, NodeUtil, ., getConditionExpression, (, n, ), ,]
[Token, ., DO, :, case, Token, ., IF, :, computeMustDef, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,]
[DO, :, case, Token, ., IF, :, computeMustDef, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,]
[:, computeMustDef, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case]
[:, computeMustDef, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case]
[(, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (]
[n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (, !]
[n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (, !]
[,, output, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (]
[), ;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {]
[return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, computeMustDef, (]
[return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, computeMustDef, (]
[., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, computeMustDef, (, NodeUtil, ., getConditionExpression, (]
[if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, computeMustDef, (, NodeUtil, ., getConditionExpression, (, n, ), ,]
[!, NodeUtil, ., isForIn, (, n, ), ), {, computeMustDef, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,]
[., isForIn, (, n, ), ), {, computeMustDef, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,]
[NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, }, else, {, Node, lhs, =]
[NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, }, else, {, Node, lhs, =]
[output, ,, conditional, ), ;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =]
[output, ,, conditional, ), ;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =]
[Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (]
[Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (]
[), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, lhs, ., isVar, (, ), ), {]
[Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, lhs, ., isVar, (, ), ), {, lhs, =]
[Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, lhs, ., isVar, (, ), ), {, lhs, =]
[if, (, lhs, ., isVar, (, ), ), {, lhs, =, lhs, ., getLastChild, (, ), ;, }, if, (]
[if, (, lhs, ., isVar, (, ), ), {, lhs, =, lhs, ., getLastChild, (, ), ;, }, if, (]
[), {, lhs, =, lhs, ., getLastChild, (, ), ;, }, if, (, lhs, ., isName, (, ), ), {]
[lhs, =, lhs, ., getLastChild, (, ), ;, }, if, (, lhs, ., isName, (, ), ), {, addToDefIfLocal, (]
[lhs, =, lhs, ., getLastChild, (, ), ;, }, if, (, lhs, ., isName, (, ), ), {, addToDefIfLocal, (]
[), ;, }, if, (, lhs, ., isName, (, ), ), {, addToDefIfLocal, (, lhs, ., getString, (, ), ,]
[}, if, (, lhs, ., isName, (, ), ), {, addToDefIfLocal, (, lhs, ., getString, (, ), ,, cfgNode, ,]
[(, lhs, ., isName, (, ), ), {, addToDefIfLocal, (, lhs, ., getString, (, ), ,, cfgNode, ,, rhs, ,]
[addToDefIfLocal, (, lhs, ., getString, (, ), ,, cfgNode, ,, rhs, ,, output, ), ;, }, }, return, ;, case]
[addToDefIfLocal, (, lhs, ., getString, (, ), ,, cfgNode, ,, rhs, ,, output, ), ;, }, }, return, ;, case]
[(, ), ,, cfgNode, ,, rhs, ,, output, ), ;, }, }, return, ;, case, Token, ., AND, :, case]
[(, ), ,, cfgNode, ,, rhs, ,, output, ), ;, }, }, return, ;, case, Token, ., AND, :, case]
[,, rhs, ,, output, ), ;, }, }, return, ;, case, Token, ., AND, :, case, Token, ., OR, :]
[,, output, ), ;, }, }, return, ;, case, Token, ., AND, :, case, Token, ., OR, :, computeMustDef, (]
[,, output, ), ;, }, }, return, ;, case, Token, ., AND, :, case, Token, ., OR, :, computeMustDef, (]
[return, ;, case, Token, ., AND, :, case, Token, ., OR, :, computeMustDef, (, n, ., getFirstChild, (, ), ,]
[case, Token, ., AND, :, case, Token, ., OR, :, computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode, ,]
[., AND, :, case, Token, ., OR, :, computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,]
[case, Token, ., OR, :, computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;]
[., OR, :, computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, computeMustDef, (]
[., OR, :, computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, computeMustDef, (]
[., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, computeMustDef, (, n, ., getLastChild, (, ), ,]
[(, ), ,, cfgNode, ,, output, ,, conditional, ), ;, computeMustDef, (, n, ., getLastChild, (, ), ,, cfgNode, ,]
[,, cfgNode, ,, output, ,, conditional, ), ;, computeMustDef, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,]
[), ;, computeMustDef, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, return, ;, case]
[), ;, computeMustDef, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, return, ;, case]
[n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, return, ;, case, Token, ., HOOK, :]
[getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, return, ;, case, Token, ., HOOK, :, computeMustDef, (]
[getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, return, ;, case, Token, ., HOOK, :, computeMustDef, (]
[output, ,, true, ), ;, return, ;, case, Token, ., HOOK, :, computeMustDef, (, n, ., getFirstChild, (, ), ,]
[true, ), ;, return, ;, case, Token, ., HOOK, :, computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode, ,]
[;, return, ;, case, Token, ., HOOK, :, computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,]
[case, Token, ., HOOK, :, computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;]
[., HOOK, :, computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, computeMustDef, (]
[., HOOK, :, computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, computeMustDef, (]
[., HOOK, :, computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, computeMustDef, (]
[,, cfgNode, ,, output, ,, conditional, ), ;, computeMustDef, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,]
[,, output, ,, conditional, ), ;, computeMustDef, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,]
[,, conditional, ), ;, computeMustDef, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,, output, ,]
[;, computeMustDef, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,, output, ,, true, ), ;]
[(, n, ., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMustDef, (]
[(, n, ., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMustDef, (]
[., getNext, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMustDef, (, n, ., getLastChild, (, ), ,]
[(, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMustDef, (, n, ., getLastChild, (, ), ,, cfgNode, ,]
[,, cfgNode, ,, output, ,, true, ), ;, computeMustDef, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,]
[), ;, computeMustDef, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, return, ;, case]
[), ;, computeMustDef, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, return, ;, case]
[,, cfgNode, ,, output, ,, true, ), ;, return, ;, case, Token, ., VAR, :, for, (, Node, c, =]
[,, cfgNode, ,, output, ,, true, ), ;, return, ;, case, Token, ., VAR, :, for, (, Node, c, =]
[), ;, return, ;, case, Token, ., VAR, :, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[), ;, return, ;, case, Token, ., VAR, :, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[return, ;, case, Token, ., VAR, :, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[case, Token, ., VAR, :, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[., VAR, :, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[., VAR, :, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[null, ;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., hasChildren, (, ), ), {]
[c, =, c, ., getNext, (, ), ), {, if, (, c, ., hasChildren, (, ), ), {, computeMustDef, (]
[c, =, c, ., getNext, (, ), ), {, if, (, c, ., hasChildren, (, ), ), {, computeMustDef, (]
[), ), {, if, (, c, ., hasChildren, (, ), ), {, computeMustDef, (, c, ., getFirstChild, (, ), ,]
[{, if, (, c, ., hasChildren, (, ), ), {, computeMustDef, (, c, ., getFirstChild, (, ), ,, cfgNode, ,]
[(, c, ., hasChildren, (, ), ), {, computeMustDef, (, c, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,]
[hasChildren, (, ), ), {, computeMustDef, (, c, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;]
[), ), {, computeMustDef, (, c, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, addToDefIfLocal, (]
[), ), {, computeMustDef, (, c, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, addToDefIfLocal, (]
[., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, addToDefIfLocal, (, c, ., getString, (, ), ,]
[., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, addToDefIfLocal, (, c, ., getString, (, ), ,]
[(, ), ,, cfgNode, ,, output, ,, conditional, ), ;, addToDefIfLocal, (, c, ., getString, (, ), ,, conditional, ?]
[,, cfgNode, ,, output, ,, conditional, ), ;, addToDefIfLocal, (, c, ., getString, (, ), ,, conditional, ?, null, :]
[,, output, ,, conditional, ), ;, addToDefIfLocal, (, c, ., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,]
[,, output, ,, conditional, ), ;, addToDefIfLocal, (, c, ., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,]
[addToDefIfLocal, (, c, ., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,, c, ., getFirstChild, (, ), ,]
[:, cfgNode, ,, c, ., getFirstChild, (, ), ,, output, ), ;, }, }, return, ;, default, :, if, (]
[:, cfgNode, ,, c, ., getFirstChild, (, ), ,, output, ), ;, }, }, return, ;, default, :, if, (]
[., getFirstChild, (, ), ,, output, ), ;, }, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (]
[), ;, }, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, n, ), ), {, if, (]
[), ;, }, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, n, ), ), {, if, (]
[), ;, }, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, n, ), ), {, if, (]
[n, ), ), {, if, (, n, ., getFirstChild, (, ), ., isName, (, ), ), {, Node, name, =]
[n, ), ), {, if, (, n, ., getFirstChild, (, ), ., isName, (, ), ), {, Node, name, =]
[n, ., getFirstChild, (, ), ., isName, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;]
[getFirstChild, (, ), ., isName, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, computeMustDef, (]
[getFirstChild, (, ), ., isName, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, computeMustDef, (]
[), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, computeMustDef, (, name, ., getNext, (, ), ,]
[{, Node, name, =, n, ., getFirstChild, (, ), ;, computeMustDef, (, name, ., getNext, (, ), ,, cfgNode, ,]
[name, =, n, ., getFirstChild, (, ), ;, computeMustDef, (, name, ., getNext, (, ), ,, cfgNode, ,, output, ,]
[., getFirstChild, (, ), ;, computeMustDef, (, name, ., getNext, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;]
[(, ), ;, computeMustDef, (, name, ., getNext, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, addToDefIfLocal, (]
[(, ), ;, computeMustDef, (, name, ., getNext, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, addToDefIfLocal, (]
[., getNext, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, addToDefIfLocal, (, name, ., getString, (, ), ,]
[., getNext, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, addToDefIfLocal, (, name, ., getString, (, ), ,]
[(, ), ,, cfgNode, ,, output, ,, conditional, ), ;, addToDefIfLocal, (, name, ., getString, (, ), ,, conditional, ?]
[,, cfgNode, ,, output, ,, conditional, ), ;, addToDefIfLocal, (, name, ., getString, (, ), ,, conditional, ?, null, :]
[,, output, ,, conditional, ), ;, addToDefIfLocal, (, name, ., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,]
[,, output, ,, conditional, ), ;, addToDefIfLocal, (, name, ., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,]
[addToDefIfLocal, (, name, ., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,, n, ., getLastChild, (, ), ,]
[?, null, :, cfgNode, ,, n, ., getLastChild, (, ), ,, output, ), ;, return, ;, }, else, if, (]
[?, null, :, cfgNode, ,, n, ., getLastChild, (, ), ,, output, ), ;, return, ;, }, else, if, (]
[,, n, ., getLastChild, (, ), ,, output, ), ;, return, ;, }, else, if, (, NodeUtil, ., isGet, (]
[,, n, ., getLastChild, (, ), ,, output, ), ;, return, ;, }, else, if, (, NodeUtil, ., isGet, (]
[;, }, else, if, (, NodeUtil, ., isGet, (, n, ., getFirstChild, (, ), ), ), {, Node, obj, =]
[;, }, else, if, (, NodeUtil, ., isGet, (, n, ., getFirstChild, (, ), ), ), {, Node, obj, =]
[;, }, else, if, (, NodeUtil, ., isGet, (, n, ., getFirstChild, (, ), ), ), {, Node, obj, =]
[(, ), ), ), {, Node, obj, =, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, if, (]
[(, ), ), ), {, Node, obj, =, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, if, (]
[(, ), ), ), {, Node, obj, =, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, if, (]
[obj, =, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, if, (, obj, ., isName, (, ), &&]
[obj, =, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, if, (, obj, ., isName, (, ), &&]
[getFirstChild, (, ), ., getFirstChild, (, ), ;, if, (, obj, ., isName, (, ), &&, "arguments", ., equals, (]
[getFirstChild, (, ), ., getFirstChild, (, ), ;, if, (, obj, ., isName, (, ), &&, "arguments", ., equals, (]
[if, (, obj, ., isName, (, ), &&, "arguments", ., equals, (, obj, ., getString, (, ), ), ), {]
[obj, ., isName, (, ), &&, "arguments", ., equals, (, obj, ., getString, (, ), ), ), {, escapeParameters, (]
[equals, (, obj, ., getString, (, ), ), ), {, escapeParameters, (, output, ), ;, }, }, }, if, (]
[equals, (, obj, ., getString, (, ), ), ), {, escapeParameters, (, output, ), ;, }, }, }, if, (]
[equals, (, obj, ., getString, (, ), ), ), {, escapeParameters, (, output, ), ;, }, }, }, if, (]
[), ), ), {, escapeParameters, (, output, ), ;, }, }, }, if, (, n, ., isName, (, ), &&]
[), ), ), {, escapeParameters, (, output, ), ;, }, }, }, if, (, n, ., isName, (, ), &&]
[escapeParameters, (, output, ), ;, }, }, }, if, (, n, ., isName, (, ), &&, "arguments", ., equals, (]
[escapeParameters, (, output, ), ;, }, }, }, if, (, n, ., isName, (, ), &&, "arguments", ., equals, (]
[if, (, n, ., isName, (, ), &&, "arguments", ., equals, (, n, ., getString, (, ), ), ), {]
[n, ., isName, (, ), &&, "arguments", ., equals, (, n, ., getString, (, ), ), ), {, escapeParameters, (]
["arguments", ., equals, (, n, ., getString, (, ), ), ), {, escapeParameters, (, output, ), ;, }, if, (]
["arguments", ., equals, (, n, ., getString, (, ), ), ), {, escapeParameters, (, output, ), ;, }, if, (]
["arguments", ., equals, (, n, ., getString, (, ), ), ), {, escapeParameters, (, output, ), ;, }, if, (]
[getString, (, ), ), ), {, escapeParameters, (, output, ), ;, }, if, (, n, ., isDec, (, ), ||]
[getString, (, ), ), ), {, escapeParameters, (, output, ), ;, }, if, (, n, ., isDec, (, ), ||]
[;, }, if, (, n, ., isDec, (, ), ||, n, ., isInc, (, ), ), {, Node, target, =]
[;, }, if, (, n, ., isDec, (, ), ||, n, ., isInc, (, ), ), {, Node, target, =]
[), ||, n, ., isInc, (, ), ), {, Node, target, =, n, ., getFirstChild, (, ), ;, if, (]
[), ||, n, ., isInc, (, ), ), {, Node, target, =, n, ., getFirstChild, (, ), ;, if, (]
[), {, Node, target, =, n, ., getFirstChild, (, ), ;, if, (, target, ., isName, (, ), ), {]
[Node, target, =, n, ., getFirstChild, (, ), ;, if, (, target, ., isName, (, ), ), {, addToDefIfLocal, (]
[Node, target, =, n, ., getFirstChild, (, ), ;, if, (, target, ., isName, (, ), ), {, addToDefIfLocal, (]
[(, ), ;, if, (, target, ., isName, (, ), ), {, addToDefIfLocal, (, target, ., getString, (, ), ,]
[(, ), ;, if, (, target, ., isName, (, ), ), {, addToDefIfLocal, (, target, ., getString, (, ), ,]
[;, if, (, target, ., isName, (, ), ), {, addToDefIfLocal, (, target, ., getString, (, ), ,, conditional, ?]
[(, target, ., isName, (, ), ), {, addToDefIfLocal, (, target, ., getString, (, ), ,, conditional, ?, null, :]
[., isName, (, ), ), {, addToDefIfLocal, (, target, ., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,]
[(, ), ), {, addToDefIfLocal, (, target, ., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,, null, ,]
[conditional, ?, null, :, cfgNode, ,, null, ,, output, ), ;, return, ;, }, }, for, (, Node, c, =]
[conditional, ?, null, :, cfgNode, ,, null, ,, output, ), ;, return, ;, }, }, for, (, Node, c, =]
[null, ,, output, ), ;, return, ;, }, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[null, ,, output, ), ;, return, ;, }, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[output, ), ;, return, ;, }, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[;, return, ;, }, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[;, }, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[;, }, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[=, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, computeMustDef, (]
[(, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, computeMustDef, (, c, ,]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, computeMustDef, (, c, ,, cfgNode, ,]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, computeMustDef, (, c, ,, cfgNode, ,, output, ,]
[String, name, ,, @, Nullable, Node, node, ,, @, Nullable, Node, rValue, ,, MustDef, def, ), {, Var, var, =]
[String, name, ,, @, Nullable, Node, node, ,, @, Nullable, Node, rValue, ,, MustDef, def, ), {, Var, var, =]
[Nullable, Node, node, ,, @, Nullable, Node, rValue, ,, MustDef, def, ), {, Var, var, =, jsScope, ., getVar, (]
[Nullable, Node, rValue, ,, MustDef, def, ), {, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (]
[Nullable, Node, rValue, ,, MustDef, def, ), {, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (]
[Nullable, Node, rValue, ,, MustDef, def, ), {, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (]
[rValue, ,, MustDef, def, ), {, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (, var, ==]
[MustDef, def, ), {, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (, var, ==, null, ||]
[MustDef, def, ), {, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (, var, ==, null, ||]
[MustDef, def, ), {, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (, var, ==, null, ||]
[Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (, var, ==, null, ||, var, ., scope, !=]
[(, var, ==, null, ||, var, ., scope, !=, jsScope, ), {, return, ;, }, for, (, Var, other, :]
[(, var, ==, null, ||, var, ., scope, !=, jsScope, ), {, return, ;, }, for, (, Var, other, :]
[(, var, ==, null, ||, var, ., scope, !=, jsScope, ), {, return, ;, }, for, (, Var, other, :]
[return, ;, }, for, (, Var, other, :, def, ., reachingDef, ., keySet, (, ), ), {, Definition, otherDef, =]
[return, ;, }, for, (, Var, other, :, def, ., reachingDef, ., keySet, (, ), ), {, Definition, otherDef, =]
[return, ;, }, for, (, Var, other, :, def, ., reachingDef, ., keySet, (, ), ), {, Definition, otherDef, =]
[other, :, def, ., reachingDef, ., keySet, (, ), ), {, Definition, otherDef, =, def, ., reachingDef, ., get, (]
[., keySet, (, ), ), {, Definition, otherDef, =, def, ., reachingDef, ., get, (, other, ), ;, if, (]
[., keySet, (, ), ), {, Definition, otherDef, =, def, ., reachingDef, ., get, (, other, ), ;, if, (]
[(, ), ), {, Definition, otherDef, =, def, ., reachingDef, ., get, (, other, ), ;, if, (, otherDef, ==]
[., reachingDef, ., get, (, other, ), ;, if, (, otherDef, ==, null, ), {, continue, ;, }, if, (]
[., reachingDef, ., get, (, other, ), ;, if, (, otherDef, ==, null, ), {, continue, ;, }, if, (]
[., reachingDef, ., get, (, other, ), ;, if, (, otherDef, ==, null, ), {, continue, ;, }, if, (]
[), ;, if, (, otherDef, ==, null, ), {, continue, ;, }, if, (, otherDef, ., depends, ., contains, (]
[otherDef, ==, null, ), {, continue, ;, }, if, (, otherDef, ., depends, ., contains, (, var, ), ), {]
[otherDef, ==, null, ), {, continue, ;, }, if, (, otherDef, ., depends, ., contains, (, var, ), ), {]
[otherDef, ==, null, ), {, continue, ;, }, if, (, otherDef, ., depends, ., contains, (, var, ), ), {]
[;, }, if, (, otherDef, ., depends, ., contains, (, var, ), ), {, def, ., reachingDef, ., put, (]
[if, (, otherDef, ., depends, ., contains, (, var, ), ), {, def, ., reachingDef, ., put, (, other, ,]
[(, var, ), ), {, def, ., reachingDef, ., put, (, other, ,, null, ), ;, }, }, if, (]
[var, ), ), {, def, ., reachingDef, ., put, (, other, ,, null, ), ;, }, }, if, (, !]
[var, ), ), {, def, ., reachingDef, ., put, (, other, ,, null, ), ;, }, }, if, (, !]
[def, ., reachingDef, ., put, (, other, ,, null, ), ;, }, }, if, (, !, escaped, ., contains, (]
[other, ,, null, ), ;, }, }, if, (, !, escaped, ., contains, (, var, ), ), {, if, (]
[other, ,, null, ), ;, }, }, if, (, !, escaped, ., contains, (, var, ), ), {, if, (]
[null, ), ;, }, }, if, (, !, escaped, ., contains, (, var, ), ), {, if, (, node, ==]
[}, }, if, (, !, escaped, ., contains, (, var, ), ), {, if, (, node, ==, null, ), {]
[}, }, if, (, !, escaped, ., contains, (, var, ), ), {, if, (, node, ==, null, ), {]
[}, }, if, (, !, escaped, ., contains, (, var, ), ), {, if, (, node, ==, null, ), {]
[., contains, (, var, ), ), {, if, (, node, ==, null, ), {, def, ., reachingDef, ., put, (]
[(, var, ), ), {, if, (, node, ==, null, ), {, def, ., reachingDef, ., put, (, var, ,]
[null, ), {, def, ., reachingDef, ., put, (, var, ,, null, ), ;, }, else, {, Definition, definition, =]
[def, ., reachingDef, ., put, (, var, ,, null, ), ;, }, else, {, Definition, definition, =, new, Definition, (]
[(, var, ,, null, ), ;, }, else, {, Definition, definition, =, new, Definition, (, node, ), ;, if, (]
[(, var, ,, null, ), ;, }, else, {, Definition, definition, =, new, Definition, (, node, ), ;, if, (]
[,, null, ), ;, }, else, {, Definition, definition, =, new, Definition, (, node, ), ;, if, (, rValue, !=]
[;, }, else, {, Definition, definition, =, new, Definition, (, node, ), ;, if, (, rValue, !=, null, ), {]
[else, {, Definition, definition, =, new, Definition, (, node, ), ;, if, (, rValue, !=, null, ), {, computeDependence, (]
[Definition, definition, =, new, Definition, (, node, ), ;, if, (, rValue, !=, null, ), {, computeDependence, (, definition, ,]
[Definition, (, node, ), ;, if, (, rValue, !=, null, ), {, computeDependence, (, definition, ,, rValue, ), ;, }]
[Definition, (, node, ), ;, if, (, rValue, !=, null, ), {, computeDependence, (, definition, ,, rValue, ), ;, }]
[Definition, (, node, ), ;, if, (, rValue, !=, null, ), {, computeDependence, (, definition, ,, rValue, ), ;, }]
[(, rValue, !=, null, ), {, computeDependence, (, definition, ,, rValue, ), ;, }, def, ., reachingDef, ., put, (]
[!=, null, ), {, computeDependence, (, definition, ,, rValue, ), ;, }, def, ., reachingDef, ., put, (, var, ,]
[;, }, }, }, private, void, escapeParameters, (, MustDef, output, ), {, for, (, Iterator, <, Var, >, i, =]
[;, }, }, }, private, void, escapeParameters, (, MustDef, output, ), {, for, (, Iterator, <, Var, >, i, =]
[escapeParameters, (, MustDef, output, ), {, for, (, Iterator, <, Var, >, i, =, jsScope, ., getVars, (, ), ;]
[escapeParameters, (, MustDef, output, ), {, for, (, Iterator, <, Var, >, i, =, jsScope, ., getVars, (, ), ;]
[>, i, =, jsScope, ., getVars, (, ), ;, i, ., hasNext, (, ), ;, ), {, Var, v, =]
[>, i, =, jsScope, ., getVars, (, ), ;, i, ., hasNext, (, ), ;, ), {, Var, v, =]
[;, i, ., hasNext, (, ), ;, ), {, Var, v, =, i, ., next, (, ), ;, if, (]
[., hasNext, (, ), ;, ), {, Var, v, =, i, ., next, (, ), ;, if, (, isParameter, (]
[;, ), {, Var, v, =, i, ., next, (, ), ;, if, (, isParameter, (, v, ), ), {]
[;, ), {, Var, v, =, i, ., next, (, ), ;, if, (, isParameter, (, v, ), ), {]
[;, ), {, Var, v, =, i, ., next, (, ), ;, if, (, isParameter, (, v, ), ), {]
[i, ., next, (, ), ;, if, (, isParameter, (, v, ), ), {, output, ., reachingDef, ., put, (]
[next, (, ), ;, if, (, isParameter, (, v, ), ), {, output, ., reachingDef, ., put, (, v, ,]
[., put, (, v, ,, null, ), ;, }, }, for, (, Entry, <, Var, ,, Definition, >, pair, :]
[., put, (, v, ,, null, ), ;, }, }, for, (, Entry, <, Var, ,, Definition, >, pair, :]
[., put, (, v, ,, null, ), ;, }, }, for, (, Entry, <, Var, ,, Definition, >, pair, :]
[Entry, <, Var, ,, Definition, >, pair, :, output, ., reachingDef, ., entrySet, (, ), ), {, Definition, value, =]
[Entry, <, Var, ,, Definition, >, pair, :, output, ., reachingDef, ., entrySet, (, ), ), {, Definition, value, =]
[output, ., reachingDef, ., entrySet, (, ), ), {, Definition, value, =, pair, ., getValue, (, ), ;, if, (]
[output, ., reachingDef, ., entrySet, (, ), ), {, Definition, value, =, pair, ., getValue, (, ), ;, if, (]
[reachingDef, ., entrySet, (, ), ), {, Definition, value, =, pair, ., getValue, (, ), ;, if, (, value, ==]
[., getValue, (, ), ;, if, (, value, ==, null, ), {, continue, ;, }, for, (, Var, dep, :]
[., getValue, (, ), ;, if, (, value, ==, null, ), {, continue, ;, }, for, (, Var, dep, :]
[value, ==, null, ), {, continue, ;, }, for, (, Var, dep, :, value, ., depends, ), {, if, (]
[null, ), {, continue, ;, }, for, (, Var, dep, :, value, ., depends, ), {, if, (, isParameter, (]
[;, }, for, (, Var, dep, :, value, ., depends, ), {, if, (, isParameter, (, dep, ), ), {]
[;, }, for, (, Var, dep, :, value, ., depends, ), {, if, (, isParameter, (, dep, ), ), {]
[;, }, for, (, Var, dep, :, value, ., depends, ), {, if, (, isParameter, (, dep, ), ), {]
[:, value, ., depends, ), {, if, (, isParameter, (, dep, ), ), {, output, ., reachingDef, ., put, (]
[:, value, ., depends, ), {, if, (, isParameter, (, dep, ), ), {, output, ., reachingDef, ., put, (]
[if, (, isParameter, (, dep, ), ), {, output, ., reachingDef, ., put, (, pair, ., getKey, (, ), ,]
[getKey, (, ), ,, null, ), ;, }, }, }, }, private, boolean, isParameter, (, Var, v, ), {, return]
[getKey, (, ), ,, null, ), ;, }, }, }, }, private, boolean, isParameter, (, Var, v, ), {, return]
[getKey, (, ), ,, null, ), ;, }, }, }, }, private, boolean, isParameter, (, Var, v, ), {, return]
[(, ), ., isParamList, (, ), ;, }, private, void, computeDependence, (, final, Definition, def, ,, Node, rValue, ), {]
[(, ), ., isParamList, (, ), ;, }, private, void, computeDependence, (, final, Definition, def, ,, Node, rValue, ), {]
[(, ), ;, }, private, void, computeDependence, (, final, Definition, def, ,, Node, rValue, ), {, NodeTraversal, ., traverse, (]
[;, }, private, void, computeDependence, (, final, Definition, def, ,, Node, rValue, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[private, void, computeDependence, (, final, Definition, def, ,, Node, rValue, ), {, NodeTraversal, ., traverse, (, compiler, ,, rValue, ,]
[), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, Var, dep, =]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, Var, dep, =]
[Node, parent, ), {, if, (, n, ., isName, (, ), ), {, Var, dep, =, jsScope, ., getVar, (]
[Node, parent, ), {, if, (, n, ., isName, (, ), ), {, Var, dep, =, jsScope, ., getVar, (]
[(, ), ), {, Var, dep, =, jsScope, ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[(, ), ), {, Var, dep, =, jsScope, ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[), {, Var, dep, =, jsScope, ., getVar, (, n, ., getString, (, ), ), ;, if, (, dep, ==]
[dep, =, jsScope, ., getVar, (, n, ., getString, (, ), ), ;, if, (, dep, ==, null, ), {]
[dep, =, jsScope, ., getVar, (, n, ., getString, (, ), ), ;, if, (, dep, ==, null, ), {]
[getVar, (, n, ., getString, (, ), ), ;, if, (, dep, ==, null, ), {, def, ., unknownDependencies, =]
[(, ), ), ;, if, (, dep, ==, null, ), {, def, ., unknownDependencies, =, true, ;, }, else, {]
[(, ), ), ;, if, (, dep, ==, null, ), {, def, ., unknownDependencies, =, true, ;, }, else, {]
[(, ), ), ;, if, (, dep, ==, null, ), {, def, ., unknownDependencies, =, true, ;, }, else, {]
[dep, ==, null, ), {, def, ., unknownDependencies, =, true, ;, }, else, {, def, ., depends, ., add, (]
[dep, ), ;, }, }, }, }, ), ;, }, Definition, getDef, (, String, name, ,, Node, useNode, ), {]
[dep, ), ;, }, }, }, }, ), ;, }, Definition, getDef, (, String, name, ,, Node, useNode, ), {]
[}, }, }, ), ;, }, Definition, getDef, (, String, name, ,, Node, useNode, ), {, Preconditions, ., checkArgument, (]
[}, }, }, ), ;, }, Definition, getDef, (, String, name, ,, Node, useNode, ), {, Preconditions, ., checkArgument, (]
[Definition, getDef, (, String, name, ,, Node, useNode, ), {, Preconditions, ., checkArgument, (, getCfg, (, ), ., hasNode, (]
[checkArgument, (, getCfg, (, ), ., hasNode, (, useNode, ), ), ;, GraphNode, <, Node, ,, Branch, >, n, =]
[checkArgument, (, getCfg, (, ), ., hasNode, (, useNode, ), ), ;, GraphNode, <, Node, ,, Branch, >, n, =]
[hasNode, (, useNode, ), ), ;, GraphNode, <, Node, ,, Branch, >, n, =, getCfg, (, ), ., getNode, (]
[,, Branch, >, n, =, getCfg, (, ), ., getNode, (, useNode, ), ;, FlowState, <, MustDef, >, state, =]
[,, Branch, >, n, =, getCfg, (, ), ., getNode, (, useNode, ), ;, FlowState, <, MustDef, >, state, =]
[), ., getNode, (, useNode, ), ;, FlowState, <, MustDef, >, state, =, n, ., getAnnotation, (, ), ;, return]
[), ., getNode, (, useNode, ), ;, FlowState, <, MustDef, >, state, =, n, ., getAnnotation, (, ), ;, return]
[), ., getNode, (, useNode, ), ;, FlowState, <, MustDef, >, state, =, n, ., getAnnotation, (, ), ;, return]
[), ., getNode, (, useNode, ), ;, FlowState, <, MustDef, >, state, =, n, ., getAnnotation, (, ), ;, return]
[>, state, =, n, ., getAnnotation, (, ), ;, return, state, ., getIn, (, ), ., reachingDef, ., get, (]
[>, state, =, n, ., getAnnotation, (, ), ;, return, state, ., getIn, (, ), ., reachingDef, ., get, (]
[., getAnnotation, (, ), ;, return, state, ., getIn, (, ), ., reachingDef, ., get, (, jsScope, ., getVar, (]
[getVar, (, name, ), ), ;, }, Node, getDefNode, (, String, name, ,, Node, useNode, ), {, Definition, def, =]
[name, ), ), ;, }, Node, getDefNode, (, String, name, ,, Node, useNode, ), {, Definition, def, =, getDef, (]
[), ;, }, Node, getDefNode, (, String, name, ,, Node, useNode, ), {, Definition, def, =, getDef, (, name, ,]
[getDefNode, (, String, name, ,, Node, useNode, ), {, Definition, def, =, getDef, (, name, ,, useNode, ), ;, return]
[getDefNode, (, String, name, ,, Node, useNode, ), {, Definition, def, =, getDef, (, name, ,, useNode, ), ;, return]
[getDefNode, (, String, name, ,, Node, useNode, ), {, Definition, def, =, getDef, (, name, ,, useNode, ), ;, return]
[String, name, ,, Node, useNode, ), {, Definition, def, =, getDef, (, name, ,, useNode, ), ;, return, def, ==]
[,, Node, useNode, ), {, Definition, def, =, getDef, (, name, ,, useNode, ), ;, return, def, ==, null, ?]
[useNode, ), {, Definition, def, =, getDef, (, name, ,, useNode, ), ;, return, def, ==, null, ?, null, :]
[useNode, ), {, Definition, def, =, getDef, (, name, ,, useNode, ), ;, return, def, ==, null, ?, null, :]
[def, ==, null, ?, null, :, def, ., node, ;, }, boolean, dependsOnOuterScopeVars, (, Definition, def, ), {, if, (]
[def, ==, null, ?, null, :, def, ., node, ;, }, boolean, dependsOnOuterScopeVars, (, Definition, def, ), {, if, (]
[def, ., node, ;, }, boolean, dependsOnOuterScopeVars, (, Definition, def, ), {, if, (, def, ., unknownDependencies, ), {, return]
[Definition, def, ), {, if, (, def, ., unknownDependencies, ), {, return, true, ;, }, for, (, Var, s, :]
[Definition, def, ), {, if, (, def, ., unknownDependencies, ), {, return, true, ;, }, for, (, Var, s, :]
[., unknownDependencies, ), {, return, true, ;, }, for, (, Var, s, :, def, ., depends, ), {, if, (]
[., unknownDependencies, ), {, return, true, ;, }, for, (, Var, s, :, def, ., depends, ), {, if, (]
[., unknownDependencies, ), {, return, true, ;, }, for, (, Var, s, :, def, ., depends, ), {, if, (]
[return, true, ;, }, for, (, Var, s, :, def, ., depends, ), {, if, (, s, ., scope, !=]
[for, (, Var, s, :, def, ., depends, ), {, if, (, s, ., scope, !=, jsScope, ), {, return]
[def, ., depends, ), {, if, (, s, ., scope, !=, jsScope, ), {, return, true, ;, }, }, return]
