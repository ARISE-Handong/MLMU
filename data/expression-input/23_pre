[commons, ., math3, ., random, ., Well19937c, ;, public, class, CauchyDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =]
[public, class, CauchyDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =, 1e-9, ;, private, static, final, long, serialVersionUID, =]
[double, median, ;, private, final, double, scale, ;, private, final, double, solverAbsoluteAccuracy, ;, public, CauchyDistribution, (, ), {, this, (]
[;, private, final, double, scale, ;, private, final, double, solverAbsoluteAccuracy, ;, public, CauchyDistribution, (, ), {, this, (, 0, ,]
[this, (, 0, ,, 1, ), ;, }, public, CauchyDistribution, (, double, median, ,, double, scale, ), {, this, (]
[0, ,, 1, ), ;, }, public, CauchyDistribution, (, double, median, ,, double, scale, ), {, this, (, median, ,]
[1, ), ;, }, public, CauchyDistribution, (, double, median, ,, double, scale, ), {, this, (, median, ,, scale, ,]
[,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, CauchyDistribution, (, double, median, ,, double, scale, ,, double, inverseCumAccuracy, ), {, this, (]
[public, CauchyDistribution, (, double, median, ,, double, scale, ,, double, inverseCumAccuracy, ), {, this, (, new, Well19937c, (, ), ,]
[(, double, median, ,, double, scale, ,, double, inverseCumAccuracy, ), {, this, (, new, Well19937c, (, ), ,, median, ,]
[median, ,, double, scale, ,, double, inverseCumAccuracy, ), {, this, (, new, Well19937c, (, ), ,, median, ,, scale, ,]
[;, }, public, CauchyDistribution, (, RandomGenerator, rng, ,, double, median, ,, double, scale, ,, double, inverseCumAccuracy, ), {, super, (]
[RandomGenerator, rng, ,, double, median, ,, double, scale, ,, double, inverseCumAccuracy, ), {, super, (, rng, ), ;, if, (]
[RandomGenerator, rng, ,, double, median, ,, double, scale, ,, double, inverseCumAccuracy, ), {, super, (, rng, ), ;, if, (]
[,, double, median, ,, double, scale, ,, double, inverseCumAccuracy, ), {, super, (, rng, ), ;, if, (, scale, <=]
[double, scale, ,, double, inverseCumAccuracy, ), {, super, (, rng, ), ;, if, (, scale, <=, 0, ), {, throw]
[double, inverseCumAccuracy, ), {, super, (, rng, ), ;, if, (, scale, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[double, inverseCumAccuracy, ), {, super, (, rng, ), ;, if, (, scale, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[super, (, rng, ), ;, if, (, scale, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,]
[;, if, (, scale, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }]
[;, if, (, scale, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, this, ., scale, =]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, this, ., scale, =, scale, ;]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, this, ., scale, =, scale, ;]
[NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, this, ., scale, =, scale, ;, this, ., median, =]
[LocalizedFormats, ., SCALE, ,, scale, ), ;, }, this, ., scale, =, scale, ;, this, ., median, =, median, ;]
[SCALE, ,, scale, ), ;, }, this, ., scale, =, scale, ;, this, ., median, =, median, ;, solverAbsoluteAccuracy, =]
[this, ., median, =, median, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, cumulativeProbability, (, double, x, ), {, return]
[this, ., median, =, median, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, cumulativeProbability, (, double, x, ), {, return]
[median, =, median, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, cumulativeProbability, (, double, x, ), {, return, 0.5, +]
[=, median, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, cumulativeProbability, (, double, x, ), {, return, 0.5, +, (]
[=, median, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, cumulativeProbability, (, double, x, ), {, return, 0.5, +, (]
[=, median, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, cumulativeProbability, (, double, x, ), {, return, 0.5, +, (]
[=, inverseCumAccuracy, ;, }, public, double, cumulativeProbability, (, double, x, ), {, return, 0.5, +, (, FastMath, ., atan, (]
[=, inverseCumAccuracy, ;, }, public, double, cumulativeProbability, (, double, x, ), {, return, 0.5, +, (, FastMath, ., atan, (]
[inverseCumAccuracy, ;, }, public, double, cumulativeProbability, (, double, x, ), {, return, 0.5, +, (, FastMath, ., atan, (, (]
[inverseCumAccuracy, ;, }, public, double, cumulativeProbability, (, double, x, ), {, return, 0.5, +, (, FastMath, ., atan, (, (]
[}, public, double, cumulativeProbability, (, double, x, ), {, return, 0.5, +, (, FastMath, ., atan, (, (, x, -]
[cumulativeProbability, (, double, x, ), {, return, 0.5, +, (, FastMath, ., atan, (, (, x, -, median, ), /]
[x, ), {, return, 0.5, +, (, FastMath, ., atan, (, (, x, -, median, ), /, scale, ), /]
[x, ), {, return, 0.5, +, (, FastMath, ., atan, (, (, x, -, median, ), /, scale, ), /]
[-, median, ), /, scale, ), /, FastMath, ., PI, ), ;, }, public, double, getMedian, (, ), {, return]
[), ;, }, public, double, getMedian, (, ), {, return, median, ;, }, public, double, getScale, (, ), {, return]
[getScale, (, ), {, return, scale, ;, }, public, double, density, (, double, x, ), {, final, double, dev, =]
[getScale, (, ), {, return, scale, ;, }, public, double, density, (, double, x, ), {, final, double, dev, =]
[), {, return, scale, ;, }, public, double, density, (, double, x, ), {, final, double, dev, =, x, -]
[scale, ;, }, public, double, density, (, double, x, ), {, final, double, dev, =, x, -, median, ;, return]
[scale, ;, }, public, double, density, (, double, x, ), {, final, double, dev, =, x, -, median, ;, return]
[;, }, public, double, density, (, double, x, ), {, final, double, dev, =, x, -, median, ;, return, (]
[;, }, public, double, density, (, double, x, ), {, final, double, dev, =, x, -, median, ;, return, (]
[public, double, density, (, double, x, ), {, final, double, dev, =, x, -, median, ;, return, (, 1, /]
[public, double, density, (, double, x, ), {, final, double, dev, =, x, -, median, ;, return, (, 1, /]
[x, ), {, final, double, dev, =, x, -, median, ;, return, (, 1, /, FastMath, ., PI, ), *]
[), {, final, double, dev, =, x, -, median, ;, return, (, 1, /, FastMath, ., PI, ), *, (]
[), {, final, double, dev, =, x, -, median, ;, return, (, 1, /, FastMath, ., PI, ), *, (]
[final, double, dev, =, x, -, median, ;, return, (, 1, /, FastMath, ., PI, ), *, (, scale, /]
[double, dev, =, x, -, median, ;, return, (, 1, /, FastMath, ., PI, ), *, (, scale, /, (]
[double, dev, =, x, -, median, ;, return, (, 1, /, FastMath, ., PI, ), *, (, scale, /, (]
[double, dev, =, x, -, median, ;, return, (, 1, /, FastMath, ., PI, ), *, (, scale, /, (]
[=, x, -, median, ;, return, (, 1, /, FastMath, ., PI, ), *, (, scale, /, (, dev, *]
[-, median, ;, return, (, 1, /, FastMath, ., PI, ), *, (, scale, /, (, dev, *, dev, +]
[-, median, ;, return, (, 1, /, FastMath, ., PI, ), *, (, scale, /, (, dev, *, dev, +]
[;, return, (, 1, /, FastMath, ., PI, ), *, (, scale, /, (, dev, *, dev, +, scale, *]
[), ;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if, (]
[), ;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if, (]
[), ;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if, (]
[}, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if, (, p, <]
[Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if, (, p, <, 0, ||]
[Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if, (, p, <, 0, ||]
[double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if, (, p, <, 0, ||, p, >]
[p, ), throws, OutOfRangeException, {, double, ret, ;, if, (, p, <, 0, ||, p, >, 1, ), {, throw]
[OutOfRangeException, {, double, ret, ;, if, (, p, <, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (]
[double, ret, ;, if, (, p, <, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (, p, ,]
[;, if, (, p, <, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,]
[p, >, 1, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, else, if, (]
[p, >, 1, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, else, if, (]
[1, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, else, if, (, p, ==]
[throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, else, if, (, p, ==, 0, ), {]
[OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, else, if, (, p, ==, 0, ), {, ret, =]
[OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, else, if, (, p, ==, 0, ), {, ret, =]
[;, }, else, if, (, p, ==, 0, ), {, ret, =, Double, ., NEGATIVE_INFINITY, ;, }, else, if, (]
[;, }, else, if, (, p, ==, 0, ), {, ret, =, Double, ., NEGATIVE_INFINITY, ;, }, else, if, (]
[else, if, (, p, ==, 0, ), {, ret, =, Double, ., NEGATIVE_INFINITY, ;, }, else, if, (, p, ==]
[p, ==, 0, ), {, ret, =, Double, ., NEGATIVE_INFINITY, ;, }, else, if, (, p, ==, 1, ), {]
[0, ), {, ret, =, Double, ., NEGATIVE_INFINITY, ;, }, else, if, (, p, ==, 1, ), {, ret, =]
[0, ), {, ret, =, Double, ., NEGATIVE_INFINITY, ;, }, else, if, (, p, ==, 1, ), {, ret, =]
[NEGATIVE_INFINITY, ;, }, else, if, (, p, ==, 1, ), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {]
[}, else, if, (, p, ==, 1, ), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =]
[}, else, if, (, p, ==, 1, ), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =]
[if, (, p, ==, 1, ), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =, median, +]
[if, (, p, ==, 1, ), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =, median, +]
[p, ==, 1, ), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =, median, +, scale, *]
[p, ==, 1, ), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =, median, +, scale, *]
[{, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =, median, +, scale, *, FastMath, ., tan, (]
[{, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =, median, +, scale, *, FastMath, ., tan, (]
[{, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =, median, +, scale, *, FastMath, ., tan, (]
[., POSITIVE_INFINITY, ;, }, else, {, ret, =, median, +, scale, *, FastMath, ., tan, (, FastMath, ., PI, *]
[POSITIVE_INFINITY, ;, }, else, {, ret, =, median, +, scale, *, FastMath, ., tan, (, FastMath, ., PI, *, (]
[POSITIVE_INFINITY, ;, }, else, {, ret, =, median, +, scale, *, FastMath, ., tan, (, FastMath, ., PI, *, (]
[}, else, {, ret, =, median, +, scale, *, FastMath, ., tan, (, FastMath, ., PI, *, (, p, -]
[+, scale, *, FastMath, ., tan, (, FastMath, ., PI, *, (, p, -, .5, ), ), ;, }, return]
[p, -, .5, ), ), ;, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return]
[}, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, return]
[}, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, return]
[}, public, double, getNumericalMean, (, ), {, return, Double, ., NaN, ;, }, public, double, getNumericalVariance, (, ), {, return]
[}, public, double, getNumericalMean, (, ), {, return, Double, ., NaN, ;, }, public, double, getNumericalVariance, (, ), {, return]
[}, public, double, getNumericalVariance, (, ), {, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (, ), {, return]
[}, public, double, getNumericalVariance, (, ), {, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (, ), {, return]
[}, public, double, getSupportLowerBound, (, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[}, public, double, getSupportLowerBound, (, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[}, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return]
[POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return]
[false, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportConnected, (, ), {, return]
