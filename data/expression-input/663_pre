[., Arrays, ;, final, class, CharRanges, {, private, final, int, [, ], ranges, ;, public, static, final, CharRanges, EMPTY, =]
[final, class, CharRanges, {, private, final, int, [, ], ranges, ;, public, static, final, CharRanges, EMPTY, =, new, CharRanges, (]
[{, private, final, int, [, ], ranges, ;, public, static, final, CharRanges, EMPTY, =, new, CharRanges, (, new, int, []
[final, CharRanges, EMPTY, =, new, CharRanges, (, new, int, [, 0, ], ), ;, public, static, final, CharRanges, ALL_CODE_UNITS, =]
[=, new, CharRanges, (, new, int, [, 0, ], ), ;, public, static, final, CharRanges, ALL_CODE_UNITS, =, new, CharRanges, (]
[new, int, [, 0, ], ), ;, public, static, final, CharRanges, ALL_CODE_UNITS, =, new, CharRanges, (, new, int, [, ]]
[int, [, 0, ], ), ;, public, static, final, CharRanges, ALL_CODE_UNITS, =, new, CharRanges, (, new, int, [, ], {]
[0, ], ), ;, public, static, final, CharRanges, ALL_CODE_UNITS, =, new, CharRanges, (, new, int, [, ], {, 0, ,]
[0, ,, 0x10000, }, ), ;, public, static, CharRanges, inclusive, (, int, start, ,, int, end, ), {, if, (]
[0, ,, 0x10000, }, ), ;, public, static, CharRanges, inclusive, (, int, start, ,, int, end, ), {, if, (]
[0x10000, }, ), ;, public, static, CharRanges, inclusive, (, int, start, ,, int, end, ), {, if, (, start, >]
[public, static, CharRanges, inclusive, (, int, start, ,, int, end, ), {, if, (, start, >, end, ), {, throw]
[inclusive, (, int, start, ,, int, end, ), {, if, (, start, >, end, ), {, throw, new, IndexOutOfBoundsException, (]
[inclusive, (, int, start, ,, int, end, ), {, if, (, start, >, end, ), {, throw, new, IndexOutOfBoundsException, (]
[inclusive, (, int, start, ,, int, end, ), {, if, (, start, >, end, ), {, throw, new, IndexOutOfBoundsException, (]
[int, start, ,, int, end, ), {, if, (, start, >, end, ), {, throw, new, IndexOutOfBoundsException, (, start, +]
[,, int, end, ), {, if, (, start, >, end, ), {, throw, new, IndexOutOfBoundsException, (, start, +, " > ", +]
[if, (, start, >, end, ), {, throw, new, IndexOutOfBoundsException, (, start, +, " > ", +, end, ), ;, }, return]
[>, end, ), {, throw, new, IndexOutOfBoundsException, (, start, +, " > ", +, end, ), ;, }, return, new, CharRanges, (]
[throw, new, IndexOutOfBoundsException, (, start, +, " > ", +, end, ), ;, }, return, new, CharRanges, (, new, int, [, ]]
[new, IndexOutOfBoundsException, (, start, +, " > ", +, end, ), ;, }, return, new, CharRanges, (, new, int, [, ], {]
[(, start, +, " > ", +, end, ), ;, }, return, new, CharRanges, (, new, int, [, ], {, start, ,]
[(, start, +, " > ", +, end, ), ;, }, return, new, CharRanges, (, new, int, [, ], {, start, ,]
[+, " > ", +, end, ), ;, }, return, new, CharRanges, (, new, int, [, ], {, start, ,, end, +]
[start, ,, end, +, 1, }, ), ;, }, public, static, CharRanges, withMembers, (, int, ..., members, ), {, return]
[+, 1, }, ), ;, }, public, static, CharRanges, withMembers, (, int, ..., members, ), {, return, new, CharRanges, (]
[}, ), ;, }, public, static, CharRanges, withMembers, (, int, ..., members, ), {, return, new, CharRanges, (, intArrayToRanges, (]
[}, ), ;, }, public, static, CharRanges, withMembers, (, int, ..., members, ), {, return, new, CharRanges, (, intArrayToRanges, (]
[(, members, ., clone, (, ), ), ), ;, }, public, static, CharRanges, withRanges, (, int, ..., ranges, ), {]
[., clone, (, ), ), ), ;, }, public, static, CharRanges, withRanges, (, int, ..., ranges, ), {, ranges, =]
[., clone, (, ), ), ), ;, }, public, static, CharRanges, withRanges, (, int, ..., ranges, ), {, ranges, =]
[public, static, CharRanges, withRanges, (, int, ..., ranges, ), {, ranges, =, ranges, ., clone, (, ), ;, if, (]
[public, static, CharRanges, withRanges, (, int, ..., ranges, ), {, ranges, =, ranges, ., clone, (, ), ;, if, (]
[static, CharRanges, withRanges, (, int, ..., ranges, ), {, ranges, =, ranges, ., clone, (, ), ;, if, (, (]
[static, CharRanges, withRanges, (, int, ..., ranges, ), {, ranges, =, ranges, ., clone, (, ), ;, if, (, (]
[static, CharRanges, withRanges, (, int, ..., ranges, ), {, ranges, =, ranges, ., clone, (, ), ;, if, (, (]
[int, ..., ranges, ), {, ranges, =, ranges, ., clone, (, ), ;, if, (, (, ranges, ., length, &]
[), {, ranges, =, ranges, ., clone, (, ), ;, if, (, (, ranges, ., length, &, 1, ), !=]
[ranges, ., clone, (, ), ;, if, (, (, ranges, ., length, &, 1, ), !=, 0, ), {, throw]
[length, &, 1, ), !=, 0, ), {, throw, new, IllegalArgumentException, (, ), ;, }, for, (, int, i, =]
[1, ), !=, 0, ), {, throw, new, IllegalArgumentException, (, ), ;, }, for, (, int, i, =, 1, ;]
[1, ), !=, 0, ), {, throw, new, IllegalArgumentException, (, ), ;, }, for, (, int, i, =, 1, ;]
[!=, 0, ), {, throw, new, IllegalArgumentException, (, ), ;, }, for, (, int, i, =, 1, ;, i, <]
[!=, 0, ), {, throw, new, IllegalArgumentException, (, ), ;, }, for, (, int, i, =, 1, ;, i, <]
[throw, new, IllegalArgumentException, (, ), ;, }, for, (, int, i, =, 1, ;, i, <, ranges, ., length, ;]
[new, IllegalArgumentException, (, ), ;, }, for, (, int, i, =, 1, ;, i, <, ranges, ., length, ;, ++]
[}, for, (, int, i, =, 1, ;, i, <, ranges, ., length, ;, ++, i, ), {, if, (]
[}, for, (, int, i, =, 1, ;, i, <, ranges, ., length, ;, ++, i, ), {, if, (]
[}, for, (, int, i, =, 1, ;, i, <, ranges, ., length, ;, ++, i, ), {, if, (]
[(, int, i, =, 1, ;, i, <, ranges, ., length, ;, ++, i, ), {, if, (, ranges, []
[=, 1, ;, i, <, ranges, ., length, ;, ++, i, ), {, if, (, ranges, [, i, ], <=]
[=, 1, ;, i, <, ranges, ., length, ;, ++, i, ), {, if, (, ranges, [, i, ], <=]
[;, i, <, ranges, ., length, ;, ++, i, ), {, if, (, ranges, [, i, ], <=, ranges, []
[;, i, <, ranges, ., length, ;, ++, i, ), {, if, (, ranges, [, i, ], <=, ranges, []
[<, ranges, ., length, ;, ++, i, ), {, if, (, ranges, [, i, ], <=, ranges, [, i, -]
[++, i, ), {, if, (, ranges, [, i, ], <=, ranges, [, i, -, 1, ], ), {, throw]
[{, if, (, ranges, [, i, ], <=, ranges, [, i, -, 1, ], ), {, throw, new, IllegalArgumentException, (]
[{, if, (, ranges, [, i, ], <=, ranges, [, i, -, 1, ], ), {, throw, new, IllegalArgumentException, (]
[{, if, (, ranges, [, i, ], <=, ranges, [, i, -, 1, ], ), {, throw, new, IllegalArgumentException, (]
[{, if, (, ranges, [, i, ], <=, ranges, [, i, -, 1, ], ), {, throw, new, IllegalArgumentException, (]
[(, ranges, [, i, ], <=, ranges, [, i, -, 1, ], ), {, throw, new, IllegalArgumentException, (, ranges, []
[i, ], <=, ranges, [, i, -, 1, ], ), {, throw, new, IllegalArgumentException, (, ranges, [, i, ], +]
[<=, ranges, [, i, -, 1, ], ), {, throw, new, IllegalArgumentException, (, ranges, [, i, ], +, " > ", +]
[<=, ranges, [, i, -, 1, ], ), {, throw, new, IllegalArgumentException, (, ranges, [, i, ], +, " > ", +]
[[, i, -, 1, ], ), {, throw, new, IllegalArgumentException, (, ranges, [, i, ], +, " > ", +, ranges, []
[[, i, -, 1, ], ), {, throw, new, IllegalArgumentException, (, ranges, [, i, ], +, " > ", +, ranges, []
[-, 1, ], ), {, throw, new, IllegalArgumentException, (, ranges, [, i, ], +, " > ", +, ranges, [, i, -]
[IllegalArgumentException, (, ranges, [, i, ], +, " > ", +, ranges, [, i, -, 1, ], ), ;, }, }, return]
[[, i, ], +, " > ", +, ranges, [, i, -, 1, ], ), ;, }, }, return, new, CharRanges, (]
[;, }, }, return, new, CharRanges, (, ranges, ), ;, }, private, CharRanges, (, int, [, ], ranges, ), {]
[;, }, }, return, new, CharRanges, (, ranges, ), ;, }, private, CharRanges, (, int, [, ], ranges, ), {]
[new, CharRanges, (, ranges, ), ;, }, private, CharRanges, (, int, [, ], ranges, ), {, this, ., ranges, =]
[=, ranges, ;, }, private, static, int, [, ], intArrayToRanges, (, int, [, ], members, ), {, int, nMembers, =]
[=, ranges, ;, }, private, static, int, [, ], intArrayToRanges, (, int, [, ], members, ), {, int, nMembers, =]
[int, [, ], intArrayToRanges, (, int, [, ], members, ), {, int, nMembers, =, members, ., length, ;, if, (]
[int, [, ], intArrayToRanges, (, int, [, ], members, ), {, int, nMembers, =, members, ., length, ;, if, (]
[], intArrayToRanges, (, int, [, ], members, ), {, int, nMembers, =, members, ., length, ;, if, (, nMembers, ==]
[[, ], members, ), {, int, nMembers, =, members, ., length, ;, if, (, nMembers, ==, 0, ), {, return]
[), {, int, nMembers, =, members, ., length, ;, if, (, nMembers, ==, 0, ), {, return, new, int, []
[=, members, ., length, ;, if, (, nMembers, ==, 0, ), {, return, new, int, [, 0, ], ;, }]
[=, members, ., length, ;, if, (, nMembers, ==, 0, ), {, return, new, int, [, 0, ], ;, }]
[;, if, (, nMembers, ==, 0, ), {, return, new, int, [, 0, ], ;, }, Arrays, ., sort, (]
[), {, return, new, int, [, 0, ], ;, }, Arrays, ., sort, (, members, ), ;, int, nRuns, =]
[], ;, }, Arrays, ., sort, (, members, ), ;, int, nRuns, =, 1, ;, for, (, int, i, =]
[}, Arrays, ., sort, (, members, ), ;, int, nRuns, =, 1, ;, for, (, int, i, =, 1, ;]
[}, Arrays, ., sort, (, members, ), ;, int, nRuns, =, 1, ;, for, (, int, i, =, 1, ;]
[., sort, (, members, ), ;, int, nRuns, =, 1, ;, for, (, int, i, =, 1, ;, i, <]
[(, members, ), ;, int, nRuns, =, 1, ;, for, (, int, i, =, 1, ;, i, <, nMembers, ;]
[members, ), ;, int, nRuns, =, 1, ;, for, (, int, i, =, 1, ;, i, <, nMembers, ;, ++]
[1, ;, for, (, int, i, =, 1, ;, i, <, nMembers, ;, ++, i, ), {, int, current, =]
[1, ;, for, (, int, i, =, 1, ;, i, <, nMembers, ;, ++, i, ), {, int, current, =]
[for, (, int, i, =, 1, ;, i, <, nMembers, ;, ++, i, ), {, int, current, =, members, []
[1, ;, i, <, nMembers, ;, ++, i, ), {, int, current, =, members, [, i, ], ,, last, =]
[1, ;, i, <, nMembers, ;, ++, i, ), {, int, current, =, members, [, i, ], ,, last, =]
[i, <, nMembers, ;, ++, i, ), {, int, current, =, members, [, i, ], ,, last, =, members, []
[i, <, nMembers, ;, ++, i, ), {, int, current, =, members, [, i, ], ,, last, =, members, []
[nMembers, ;, ++, i, ), {, int, current, =, members, [, i, ], ,, last, =, members, [, i, -]
[{, int, current, =, members, [, i, ], ,, last, =, members, [, i, -, 1, ], ;, if, (]
[{, int, current, =, members, [, i, ], ,, last, =, members, [, i, -, 1, ], ;, if, (]
[current, =, members, [, i, ], ,, last, =, members, [, i, -, 1, ], ;, if, (, current, ==]
[=, members, [, i, -, 1, ], ;, if, (, current, ==, last, ), {, continue, ;, }, if, (]
[=, members, [, i, -, 1, ], ;, if, (, current, ==, last, ), {, continue, ;, }, if, (]
[[, i, -, 1, ], ;, if, (, current, ==, last, ), {, continue, ;, }, if, (, current, !=]
[[, i, -, 1, ], ;, if, (, current, ==, last, ), {, continue, ;, }, if, (, current, !=]
[-, 1, ], ;, if, (, current, ==, last, ), {, continue, ;, }, if, (, current, !=, last, +]
[;, if, (, current, ==, last, ), {, continue, ;, }, if, (, current, !=, last, +, 1, ), {]
[if, (, current, ==, last, ), {, continue, ;, }, if, (, current, !=, last, +, 1, ), {, ++]
[}, if, (, current, !=, last, +, 1, ), {, ++, nRuns, ;, }, }, int, [, ], ranges, =]
[current, !=, last, +, 1, ), {, ++, nRuns, ;, }, }, int, [, ], ranges, =, new, int, []
[current, !=, last, +, 1, ), {, ++, nRuns, ;, }, }, int, [, ], ranges, =, new, int, []
[last, +, 1, ), {, ++, nRuns, ;, }, }, int, [, ], ranges, =, new, int, [, nRuns, *]
[), {, ++, nRuns, ;, }, }, int, [, ], ranges, =, new, int, [, nRuns, *, 2, ], ;]
[), {, ++, nRuns, ;, }, }, int, [, ], ranges, =, new, int, [, nRuns, *, 2, ], ;]
[++, nRuns, ;, }, }, int, [, ], ranges, =, new, int, [, nRuns, *, 2, ], ;, ranges, []
[}, }, int, [, ], ranges, =, new, int, [, nRuns, *, 2, ], ;, ranges, [, 0, ], =]
[}, }, int, [, ], ranges, =, new, int, [, nRuns, *, 2, ], ;, ranges, [, 0, ], =]
[int, [, ], ranges, =, new, int, [, nRuns, *, 2, ], ;, ranges, [, 0, ], =, members, []
[int, [, nRuns, *, 2, ], ;, ranges, [, 0, ], =, members, [, 0, ], ;, int, k, =]
[ranges, [, 0, ], =, members, [, 0, ], ;, int, k, =, 0, ;, for, (, int, i, =]
[0, ], =, members, [, 0, ], ;, int, k, =, 0, ;, for, (, int, i, =, 1, ;]
[0, ], =, members, [, 0, ], ;, int, k, =, 0, ;, for, (, int, i, =, 1, ;]
[0, ], =, members, [, 0, ], ;, int, k, =, 0, ;, for, (, int, i, =, 1, ;]
[=, members, [, 0, ], ;, int, k, =, 0, ;, for, (, int, i, =, 1, ;, k, +]
[[, 0, ], ;, int, k, =, 0, ;, for, (, int, i, =, 1, ;, k, +, 2, <]
[[, 0, ], ;, int, k, =, 0, ;, for, (, int, i, =, 1, ;, k, +, 2, <]
[int, k, =, 0, ;, for, (, int, i, =, 1, ;, k, +, 2, <, ranges, ., length, ;]
[k, =, 0, ;, for, (, int, i, =, 1, ;, k, +, 2, <, ranges, ., length, ;, ++]
[int, i, =, 1, ;, k, +, 2, <, ranges, ., length, ;, ++, i, ), {, int, current, =]
[int, i, =, 1, ;, k, +, 2, <, ranges, ., length, ;, ++, i, ), {, int, current, =]
[=, 1, ;, k, +, 2, <, ranges, ., length, ;, ++, i, ), {, int, current, =, members, []
[2, <, ranges, ., length, ;, ++, i, ), {, int, current, =, members, [, i, ], ,, last, =]
[2, <, ranges, ., length, ;, ++, i, ), {, int, current, =, members, [, i, ], ,, last, =]
[ranges, ., length, ;, ++, i, ), {, int, current, =, members, [, i, ], ,, last, =, members, []
[ranges, ., length, ;, ++, i, ), {, int, current, =, members, [, i, ], ,, last, =, members, []
[length, ;, ++, i, ), {, int, current, =, members, [, i, ], ,, last, =, members, [, i, -]
[{, int, current, =, members, [, i, ], ,, last, =, members, [, i, -, 1, ], ;, if, (]
[{, int, current, =, members, [, i, ], ,, last, =, members, [, i, -, 1, ], ;, if, (]
[current, =, members, [, i, ], ,, last, =, members, [, i, -, 1, ], ;, if, (, current, ==]
[=, members, [, i, -, 1, ], ;, if, (, current, ==, last, ), {, continue, ;, }, if, (]
[=, members, [, i, -, 1, ], ;, if, (, current, ==, last, ), {, continue, ;, }, if, (]
[[, i, -, 1, ], ;, if, (, current, ==, last, ), {, continue, ;, }, if, (, current, !=]
[[, i, -, 1, ], ;, if, (, current, ==, last, ), {, continue, ;, }, if, (, current, !=]
[-, 1, ], ;, if, (, current, ==, last, ), {, continue, ;, }, if, (, current, !=, last, +]
[;, if, (, current, ==, last, ), {, continue, ;, }, if, (, current, !=, last, +, 1, ), {]
[;, if, (, current, ==, last, ), {, continue, ;, }, if, (, current, !=, last, +, 1, ), {]
[(, current, ==, last, ), {, continue, ;, }, if, (, current, !=, last, +, 1, ), {, ranges, []
[current, ==, last, ), {, continue, ;, }, if, (, current, !=, last, +, 1, ), {, ranges, [, ++]
[), {, continue, ;, }, if, (, current, !=, last, +, 1, ), {, ranges, [, ++, k, ], =]
[), {, continue, ;, }, if, (, current, !=, last, +, 1, ), {, ranges, [, ++, k, ], =]
[continue, ;, }, if, (, current, !=, last, +, 1, ), {, ranges, [, ++, k, ], =, last, +]
[}, if, (, current, !=, last, +, 1, ), {, ranges, [, ++, k, ], =, last, +, 1, ;]
[}, if, (, current, !=, last, +, 1, ), {, ranges, [, ++, k, ], =, last, +, 1, ;]
[(, current, !=, last, +, 1, ), {, ranges, [, ++, k, ], =, last, +, 1, ;, ranges, []
[current, !=, last, +, 1, ), {, ranges, [, ++, k, ], =, last, +, 1, ;, ranges, [, ++]
[+, 1, ), {, ranges, [, ++, k, ], =, last, +, 1, ;, ranges, [, ++, k, ], =]
[ranges, [, ++, k, ], =, last, +, 1, ;, ranges, [, ++, k, ], =, current, ;, }, }]
[ranges, [, ++, k, ], =, last, +, 1, ;, ranges, [, ++, k, ], =, current, ;, }, }]
[++, k, ], =, last, +, 1, ;, ranges, [, ++, k, ], =, current, ;, }, }, ranges, []
[k, ], =, last, +, 1, ;, ranges, [, ++, k, ], =, current, ;, }, }, ranges, [, ++]
[last, +, 1, ;, ranges, [, ++, k, ], =, current, ;, }, }, ranges, [, ++, k, ], =]
[last, +, 1, ;, ranges, [, ++, k, ], =, current, ;, }, }, ranges, [, ++, k, ], =]
[last, +, 1, ;, ranges, [, ++, k, ], =, current, ;, }, }, ranges, [, ++, k, ], =]
[1, ;, ranges, [, ++, k, ], =, current, ;, }, }, ranges, [, ++, k, ], =, members, []
[1, ;, ranges, [, ++, k, ], =, current, ;, }, }, ranges, [, ++, k, ], =, members, []
[ranges, [, ++, k, ], =, current, ;, }, }, ranges, [, ++, k, ], =, members, [, nMembers, -]
[k, ], =, current, ;, }, }, ranges, [, ++, k, ], =, members, [, nMembers, -, 1, ], +]
[current, ;, }, }, ranges, [, ++, k, ], =, members, [, nMembers, -, 1, ], +, 1, ;, return]
[nMembers, -, 1, ], +, 1, ;, return, ranges, ;, }, public, boolean, contains, (, int, bit, ), {, return]
[nMembers, -, 1, ], +, 1, ;, return, ranges, ;, }, public, boolean, contains, (, int, bit, ), {, return]
[-, 1, ], +, 1, ;, return, ranges, ;, }, public, boolean, contains, (, int, bit, ), {, return, (]
[-, 1, ], +, 1, ;, return, ranges, ;, }, public, boolean, contains, (, int, bit, ), {, return, (]
[-, 1, ], +, 1, ;, return, ranges, ;, }, public, boolean, contains, (, int, bit, ), {, return, (]
[1, ;, return, ranges, ;, }, public, boolean, contains, (, int, bit, ), {, return, (, Arrays, ., binarySearch, (]
[return, ranges, ;, }, public, boolean, contains, (, int, bit, ), {, return, (, Arrays, ., binarySearch, (, ranges, ,]
[}, public, boolean, contains, (, int, bit, ), {, return, (, Arrays, ., binarySearch, (, ranges, ,, bit, ), &]
[contains, (, int, bit, ), {, return, (, Arrays, ., binarySearch, (, ranges, ,, bit, ), &, 1, ), ==]
[binarySearch, (, ranges, ,, bit, ), &, 1, ), ==, 0, ;, }, public, int, minSetBit, (, ), {, return]
[binarySearch, (, ranges, ,, bit, ), &, 1, ), ==, 0, ;, }, public, int, minSetBit, (, ), {, return]
[binarySearch, (, ranges, ,, bit, ), &, 1, ), ==, 0, ;, }, public, int, minSetBit, (, ), {, return]
[binarySearch, (, ranges, ,, bit, ), &, 1, ), ==, 0, ;, }, public, int, minSetBit, (, ), {, return]
[bit, ), &, 1, ), ==, 0, ;, }, public, int, minSetBit, (, ), {, return, ranges, ., length, >=]
[&, 1, ), ==, 0, ;, }, public, int, minSetBit, (, ), {, return, ranges, ., length, >=, 0, ?]
[&, 1, ), ==, 0, ;, }, public, int, minSetBit, (, ), {, return, ranges, ., length, >=, 0, ?]
[), ==, 0, ;, }, public, int, minSetBit, (, ), {, return, ranges, ., length, >=, 0, ?, ranges, []
[;, }, public, int, minSetBit, (, ), {, return, ranges, ., length, >=, 0, ?, ranges, [, 0, ], :]
[;, }, public, int, minSetBit, (, ), {, return, ranges, ., length, >=, 0, ?, ranges, [, 0, ], :]
[>=, 0, ?, ranges, [, 0, ], :, Integer, ., MIN_VALUE, ;, }, public, boolean, isEmpty, (, ), {, return]
[>=, 0, ?, ranges, [, 0, ], :, Integer, ., MIN_VALUE, ;, }, public, boolean, isEmpty, (, ), {, return]
[>=, 0, ?, ranges, [, 0, ], :, Integer, ., MIN_VALUE, ;, }, public, boolean, isEmpty, (, ), {, return]
[[, 0, ], :, Integer, ., MIN_VALUE, ;, }, public, boolean, isEmpty, (, ), {, return, ranges, ., length, ==]
[boolean, isEmpty, (, ), {, return, ranges, ., length, ==, 0, ;, }, public, int, getNumRanges, (, ), {, return]
[boolean, isEmpty, (, ), {, return, ranges, ., length, ==, 0, ;, }, public, int, getNumRanges, (, ), {, return]
[boolean, isEmpty, (, ), {, return, ranges, ., length, ==, 0, ;, }, public, int, getNumRanges, (, ), {, return]
[return, ranges, ., length, ==, 0, ;, }, public, int, getNumRanges, (, ), {, return, ranges, ., length, >, >]
[), {, return, ranges, ., length, >, >, 1, ;, }, public, int, start, (, int, i, ), {, return]
[), {, return, ranges, ., length, >, >, 1, ;, }, public, int, start, (, int, i, ), {, return]
[return, ranges, ., length, >, >, 1, ;, }, public, int, start, (, int, i, ), {, return, ranges, []
[return, ranges, ., length, >, >, 1, ;, }, public, int, start, (, int, i, ), {, return, ranges, []
[., length, >, >, 1, ;, }, public, int, start, (, int, i, ), {, return, ranges, [, i, <<]
[), {, return, ranges, [, i, <<, 1, ], ;, }, public, int, end, (, int, i, ), {, return]
[), {, return, ranges, [, i, <<, 1, ], ;, }, public, int, end, (, int, i, ), {, return]
[return, ranges, [, i, <<, 1, ], ;, }, public, int, end, (, int, i, ), {, return, ranges, []
[return, ranges, [, i, <<, 1, ], ;, }, public, int, end, (, int, i, ), {, return, ranges, []
[ranges, [, i, <<, 1, ], ;, }, public, int, end, (, int, i, ), {, return, ranges, [, (]
[ranges, [, i, <<, 1, ], ;, }, public, int, end, (, int, i, ), {, return, ranges, [, (]
[i, <<, 1, ], ;, }, public, int, end, (, int, i, ), {, return, ranges, [, (, i, <<]
[], ;, }, public, int, end, (, int, i, ), {, return, ranges, [, (, i, <<, 1, ), |]
[1, ), |, 1, ], ;, }, public, CharRanges, union, (, CharRanges, other, ), {, int, [, ], q, =]
[1, ), |, 1, ], ;, }, public, CharRanges, union, (, CharRanges, other, ), {, int, [, ], q, =]
[}, public, CharRanges, union, (, CharRanges, other, ), {, int, [, ], q, =, this, ., ranges, ,, r, =]
[}, public, CharRanges, union, (, CharRanges, other, ), {, int, [, ], q, =, this, ., ranges, ,, r, =]
[), {, int, [, ], q, =, this, ., ranges, ,, r, =, other, ., ranges, ;, int, m, =]
[), {, int, [, ], q, =, this, ., ranges, ,, r, =, other, ., ranges, ;, int, m, =]
[=, this, ., ranges, ,, r, =, other, ., ranges, ;, int, m, =, q, ., length, ,, n, =]
[=, this, ., ranges, ,, r, =, other, ., ranges, ;, int, m, =, q, ., length, ,, n, =]
[=, other, ., ranges, ;, int, m, =, q, ., length, ,, n, =, r, ., length, ;, if, (]
[=, other, ., ranges, ;, int, m, =, q, ., length, ,, n, =, r, ., length, ;, if, (]
[., ranges, ;, int, m, =, q, ., length, ,, n, =, r, ., length, ;, if, (, m, ==]
[m, =, q, ., length, ,, n, =, r, ., length, ;, if, (, m, ==, 0, ), {, return]
[,, n, =, r, ., length, ;, if, (, m, ==, 0, ), {, return, other, ;, }, if, (]
[,, n, =, r, ., length, ;, if, (, m, ==, 0, ), {, return, other, ;, }, if, (]
[=, r, ., length, ;, if, (, m, ==, 0, ), {, return, other, ;, }, if, (, n, ==]
[;, if, (, m, ==, 0, ), {, return, other, ;, }, if, (, n, ==, 0, ), {, return]
[return, other, ;, }, if, (, n, ==, 0, ), {, return, this, ;, }, int, [, ], out, =]
[}, if, (, n, ==, 0, ), {, return, this, ;, }, int, [, ], out, =, new, int, []
[}, if, (, n, ==, 0, ), {, return, this, ;, }, int, [, ], out, =, new, int, []
[(, n, ==, 0, ), {, return, this, ;, }, int, [, ], out, =, new, int, [, m, +]
[return, this, ;, }, int, [, ], out, =, new, int, [, m, +, n, ], ;, int, i, =]
[int, [, ], out, =, new, int, [, m, +, n, ], ;, int, i, =, 0, ,, j, =]
[=, new, int, [, m, +, n, ], ;, int, i, =, 0, ,, j, =, 0, ,, k, =]
[m, +, n, ], ;, int, i, =, 0, ,, j, =, 0, ,, k, =, 0, ;, while, (]
[m, +, n, ], ;, int, i, =, 0, ,, j, =, 0, ,, k, =, 0, ;, while, (]
[m, +, n, ], ;, int, i, =, 0, ,, j, =, 0, ,, k, =, 0, ;, while, (]
[n, ], ;, int, i, =, 0, ,, j, =, 0, ,, k, =, 0, ;, while, (, i, <]
[;, int, i, =, 0, ,, j, =, 0, ,, k, =, 0, ;, while, (, i, <, m, &&]
[;, int, i, =, 0, ,, j, =, 0, ,, k, =, 0, ;, while, (, i, <, m, &&]
[i, =, 0, ,, j, =, 0, ,, k, =, 0, ;, while, (, i, <, m, &&, j, <]
[0, ,, k, =, 0, ;, while, (, i, <, m, &&, j, <, n, ), {, int, a0, =]
[0, ,, k, =, 0, ;, while, (, i, <, m, &&, j, <, n, ), {, int, a0, =]
[k, =, 0, ;, while, (, i, <, m, &&, j, <, n, ), {, int, a0, =, q, []
[(, i, <, m, &&, j, <, n, ), {, int, a0, =, q, [, i, ], ,, a1, =]
[(, i, <, m, &&, j, <, n, ), {, int, a0, =, q, [, i, ], ,, a1, =]
[<, m, &&, j, <, n, ), {, int, a0, =, q, [, i, ], ,, a1, =, q, []
[<, m, &&, j, <, n, ), {, int, a0, =, q, [, i, ], ,, a1, =, q, []
[&&, j, <, n, ), {, int, a0, =, q, [, i, ], ,, a1, =, q, [, i, +]
[{, int, a0, =, q, [, i, ], ,, a1, =, q, [, i, +, 1, ], ,, b0, =]
[{, int, a0, =, q, [, i, ], ,, a1, =, q, [, i, +, 1, ], ,, b0, =]
[a0, =, q, [, i, ], ,, a1, =, q, [, i, +, 1, ], ,, b0, =, r, []
[], ,, a1, =, q, [, i, +, 1, ], ,, b0, =, r, [, j, ], ,, b1, =]
[], ,, a1, =, q, [, i, +, 1, ], ,, b0, =, r, [, j, ], ,, b1, =]
[a1, =, q, [, i, +, 1, ], ,, b0, =, r, [, j, ], ,, b1, =, r, []
[a1, =, q, [, i, +, 1, ], ,, b0, =, r, [, j, ], ,, b1, =, r, []
[q, [, i, +, 1, ], ,, b0, =, r, [, j, ], ,, b1, =, r, [, j, +]
[], ,, b0, =, r, [, j, ], ,, b1, =, r, [, j, +, 1, ], ;, if, (]
[], ,, b0, =, r, [, j, ], ,, b1, =, r, [, j, +, 1, ], ;, if, (]
[b0, =, r, [, j, ], ,, b1, =, r, [, j, +, 1, ], ;, if, (, a1, <]
[[, j, ], ,, b1, =, r, [, j, +, 1, ], ;, if, (, a1, <, b0, ), {]
[[, j, ], ,, b1, =, r, [, j, +, 1, ], ;, if, (, a1, <, b0, ), {]
[], ,, b1, =, r, [, j, +, 1, ], ;, if, (, a1, <, b0, ), {, out, []
[], ,, b1, =, r, [, j, +, 1, ], ;, if, (, a1, <, b0, ), {, out, []
[r, [, j, +, 1, ], ;, if, (, a1, <, b0, ), {, out, [, k, ++, ], =]
[j, +, 1, ], ;, if, (, a1, <, b0, ), {, out, [, k, ++, ], =, a0, ;]
[j, +, 1, ], ;, if, (, a1, <, b0, ), {, out, [, k, ++, ], =, a0, ;]
[1, ], ;, if, (, a1, <, b0, ), {, out, [, k, ++, ], =, a0, ;, out, []
[1, ], ;, if, (, a1, <, b0, ), {, out, [, k, ++, ], =, a0, ;, out, []
[(, a1, <, b0, ), {, out, [, k, ++, ], =, a0, ;, out, [, k, ++, ], =]
[<, b0, ), {, out, [, k, ++, ], =, a0, ;, out, [, k, ++, ], =, a1, ;]
[), {, out, [, k, ++, ], =, a0, ;, out, [, k, ++, ], =, a1, ;, i, +=]
[], =, a0, ;, out, [, k, ++, ], =, a1, ;, i, +=, 2, ;, }, else, if, (]
[], =, a0, ;, out, [, k, ++, ], =, a1, ;, i, +=, 2, ;, }, else, if, (]
[a0, ;, out, [, k, ++, ], =, a1, ;, i, +=, 2, ;, }, else, if, (, b1, <]
[[, k, ++, ], =, a1, ;, i, +=, 2, ;, }, else, if, (, b1, <, a0, ), {]
[[, k, ++, ], =, a1, ;, i, +=, 2, ;, }, else, if, (, b1, <, a0, ), {]
[++, ], =, a1, ;, i, +=, 2, ;, }, else, if, (, b1, <, a0, ), {, out, []
[++, ], =, a1, ;, i, +=, 2, ;, }, else, if, (, b1, <, a0, ), {, out, []
[;, i, +=, 2, ;, }, else, if, (, b1, <, a0, ), {, out, [, k, ++, ], =]
[+=, 2, ;, }, else, if, (, b1, <, a0, ), {, out, [, k, ++, ], =, b0, ;]
[+=, 2, ;, }, else, if, (, b1, <, a0, ), {, out, [, k, ++, ], =, b0, ;]
[;, }, else, if, (, b1, <, a0, ), {, out, [, k, ++, ], =, b0, ;, out, []
[;, }, else, if, (, b1, <, a0, ), {, out, [, k, ++, ], =, b0, ;, out, []
[(, b1, <, a0, ), {, out, [, k, ++, ], =, b0, ;, out, [, k, ++, ], =]
[<, a0, ), {, out, [, k, ++, ], =, b0, ;, out, [, k, ++, ], =, b1, ;]
[), {, out, [, k, ++, ], =, b0, ;, out, [, k, ++, ], =, b1, ;, j, +=]
[b0, ;, out, [, k, ++, ], =, b1, ;, j, +=, 2, ;, }, else, {, int, start, =]
[b0, ;, out, [, k, ++, ], =, b1, ;, j, +=, 2, ;, }, else, {, int, start, =]
[k, ++, ], =, b1, ;, j, +=, 2, ;, }, else, {, int, start, =, Math, ., min, (]
[], =, b1, ;, j, +=, 2, ;, }, else, {, int, start, =, Math, ., min, (, a0, ,]
[2, ;, }, else, {, int, start, =, Math, ., min, (, a0, ,, b0, ), ;, int, end, =]
[2, ;, }, else, {, int, start, =, Math, ., min, (, a0, ,, b0, ), ;, int, end, =]
[{, int, start, =, Math, ., min, (, a0, ,, b0, ), ;, int, end, =, Math, ., max, (]
[start, =, Math, ., min, (, a0, ,, b0, ), ;, int, end, =, Math, ., max, (, a1, ,]
[., min, (, a0, ,, b0, ), ;, int, end, =, Math, ., max, (, a1, ,, b1, ), ;]
[(, a0, ,, b0, ), ;, int, end, =, Math, ., max, (, a1, ,, b1, ), ;, i, +=]
[,, b0, ), ;, int, end, =, Math, ., max, (, a1, ,, b1, ), ;, i, +=, 2, ;]
[), ;, int, end, =, Math, ., max, (, a1, ,, b1, ), ;, i, +=, 2, ;, j, +=]
[=, Math, ., max, (, a1, ,, b1, ), ;, i, +=, 2, ;, j, +=, 2, ;, while, (]
[=, Math, ., max, (, a1, ,, b1, ), ;, i, +=, 2, ;, j, +=, 2, ;, while, (]
[=, Math, ., max, (, a1, ,, b1, ), ;, i, +=, 2, ;, j, +=, 2, ;, while, (]
[., max, (, a1, ,, b1, ), ;, i, +=, 2, ;, j, +=, 2, ;, while, (, i, <]
[(, a1, ,, b1, ), ;, i, +=, 2, ;, j, +=, 2, ;, while, (, i, <, m, ||]
[(, a1, ,, b1, ), ;, i, +=, 2, ;, j, +=, 2, ;, while, (, i, <, m, ||]
[,, b1, ), ;, i, +=, 2, ;, j, +=, 2, ;, while, (, i, <, m, ||, j, <]
[+=, 2, ;, j, +=, 2, ;, while, (, i, <, m, ||, j, <, n, ), {, if, (]
[+=, 2, ;, j, +=, 2, ;, while, (, i, <, m, ||, j, <, n, ), {, if, (]
[+=, 2, ;, j, +=, 2, ;, while, (, i, <, m, ||, j, <, n, ), {, if, (]
[;, j, +=, 2, ;, while, (, i, <, m, ||, j, <, n, ), {, if, (, i, <]
[+=, 2, ;, while, (, i, <, m, ||, j, <, n, ), {, if, (, i, <, m, &&]
[+=, 2, ;, while, (, i, <, m, ||, j, <, n, ), {, if, (, i, <, m, &&]
[+=, 2, ;, while, (, i, <, m, ||, j, <, n, ), {, if, (, i, <, m, &&]
[;, while, (, i, <, m, ||, j, <, n, ), {, if, (, i, <, m, &&, q, []
[i, <, m, ||, j, <, n, ), {, if, (, i, <, m, &&, q, [, i, ], <=]
[||, j, <, n, ), {, if, (, i, <, m, &&, q, [, i, ], <=, end, ), {]
[<, n, ), {, if, (, i, <, m, &&, q, [, i, ], <=, end, ), {, end, =]
[<, n, ), {, if, (, i, <, m, &&, q, [, i, ], <=, end, ), {, end, =]
[if, (, i, <, m, &&, q, [, i, ], <=, end, ), {, end, =, Math, ., max, (]
[i, <, m, &&, q, [, i, ], <=, end, ), {, end, =, Math, ., max, (, end, ,]
[i, <, m, &&, q, [, i, ], <=, end, ), {, end, =, Math, ., max, (, end, ,]
[m, &&, q, [, i, ], <=, end, ), {, end, =, Math, ., max, (, end, ,, q, []
[m, &&, q, [, i, ], <=, end, ), {, end, =, Math, ., max, (, end, ,, q, []
[q, [, i, ], <=, end, ), {, end, =, Math, ., max, (, end, ,, q, [, i, +]
[<=, end, ), {, end, =, Math, ., max, (, end, ,, q, [, i, +, 1, ], ), ;]
[), {, end, =, Math, ., max, (, end, ,, q, [, i, +, 1, ], ), ;, i, +=]
[max, (, end, ,, q, [, i, +, 1, ], ), ;, i, +=, 2, ;, }, else, if, (]
[max, (, end, ,, q, [, i, +, 1, ], ), ;, i, +=, 2, ;, }, else, if, (]
[max, (, end, ,, q, [, i, +, 1, ], ), ;, i, +=, 2, ;, }, else, if, (]
[end, ,, q, [, i, +, 1, ], ), ;, i, +=, 2, ;, }, else, if, (, j, <]
[q, [, i, +, 1, ], ), ;, i, +=, 2, ;, }, else, if, (, j, <, n, &&]
[q, [, i, +, 1, ], ), ;, i, +=, 2, ;, }, else, if, (, j, <, n, &&]
[q, [, i, +, 1, ], ), ;, i, +=, 2, ;, }, else, if, (, j, <, n, &&]
[i, +, 1, ], ), ;, i, +=, 2, ;, }, else, if, (, j, <, n, &&, r, []
[], ), ;, i, +=, 2, ;, }, else, if, (, j, <, n, &&, r, [, j, ], <=]
[i, +=, 2, ;, }, else, if, (, j, <, n, &&, r, [, j, ], <=, end, ), {]
[2, ;, }, else, if, (, j, <, n, &&, r, [, j, ], <=, end, ), {, end, =]
[2, ;, }, else, if, (, j, <, n, &&, r, [, j, ], <=, end, ), {, end, =]
[if, (, j, <, n, &&, r, [, j, ], <=, end, ), {, end, =, Math, ., max, (]
[j, <, n, &&, r, [, j, ], <=, end, ), {, end, =, Math, ., max, (, end, ,]
[j, <, n, &&, r, [, j, ], <=, end, ), {, end, =, Math, ., max, (, end, ,]
[n, &&, r, [, j, ], <=, end, ), {, end, =, Math, ., max, (, end, ,, r, []
[n, &&, r, [, j, ], <=, end, ), {, end, =, Math, ., max, (, end, ,, r, []
[r, [, j, ], <=, end, ), {, end, =, Math, ., max, (, end, ,, r, [, j, +]
[<=, end, ), {, end, =, Math, ., max, (, end, ,, r, [, j, +, 1, ], ), ;]
[), {, end, =, Math, ., max, (, end, ,, r, [, j, +, 1, ], ), ;, j, +=]
[,, r, [, j, +, 1, ], ), ;, j, +=, 2, ;, }, else, {, break, ;, }, }]
[,, r, [, j, +, 1, ], ), ;, j, +=, 2, ;, }, else, {, break, ;, }, }]
[[, j, +, 1, ], ), ;, j, +=, 2, ;, }, else, {, break, ;, }, }, out, []
[[, j, +, 1, ], ), ;, j, +=, 2, ;, }, else, {, break, ;, }, }, out, []
[], ), ;, j, +=, 2, ;, }, else, {, break, ;, }, }, out, [, k, ++, ], =]
[;, j, +=, 2, ;, }, else, {, break, ;, }, }, out, [, k, ++, ], =, start, ;]
[;, j, +=, 2, ;, }, else, {, break, ;, }, }, out, [, k, ++, ], =, start, ;]
[+=, 2, ;, }, else, {, break, ;, }, }, out, [, k, ++, ], =, start, ;, out, []
[+=, 2, ;, }, else, {, break, ;, }, }, out, [, k, ++, ], =, start, ;, out, []
[else, {, break, ;, }, }, out, [, k, ++, ], =, start, ;, out, [, k, ++, ], =]
[out, [, k, ++, ], =, start, ;, out, [, k, ++, ], =, end, ;, }, }, if, (]
[out, [, k, ++, ], =, start, ;, out, [, k, ++, ], =, end, ;, }, }, if, (]
[k, ++, ], =, start, ;, out, [, k, ++, ], =, end, ;, }, }, if, (, i, <]
[=, start, ;, out, [, k, ++, ], =, end, ;, }, }, if, (, i, <, m, ), {]
[=, start, ;, out, [, k, ++, ], =, end, ;, }, }, if, (, i, <, m, ), {]
[[, k, ++, ], =, end, ;, }, }, if, (, i, <, m, ), {, System, ., arraycopy, (]
[++, ], =, end, ;, }, }, if, (, i, <, m, ), {, System, ., arraycopy, (, q, ,]
[=, end, ;, }, }, if, (, i, <, m, ), {, System, ., arraycopy, (, q, ,, i, ,]
[;, }, }, if, (, i, <, m, ), {, System, ., arraycopy, (, q, ,, i, ,, out, ,]
[}, if, (, i, <, m, ), {, System, ., arraycopy, (, q, ,, i, ,, out, ,, k, ,]
[}, if, (, i, <, m, ), {, System, ., arraycopy, (, q, ,, i, ,, out, ,, k, ,]
[(, i, <, m, ), {, System, ., arraycopy, (, q, ,, i, ,, out, ,, k, ,, m, -]
[m, ), {, System, ., arraycopy, (, q, ,, i, ,, out, ,, k, ,, m, -, i, ), ;]
[{, System, ., arraycopy, (, q, ,, i, ,, out, ,, k, ,, m, -, i, ), ;, k, +=]
[{, System, ., arraycopy, (, q, ,, i, ,, out, ,, k, ,, m, -, i, ), ;, k, +=]
[., arraycopy, (, q, ,, i, ,, out, ,, k, ,, m, -, i, ), ;, k, +=, m, -]
[,, out, ,, k, ,, m, -, i, ), ;, k, +=, m, -, i, ;, }, else, if, (]
[,, out, ,, k, ,, m, -, i, ), ;, k, +=, m, -, i, ;, }, else, if, (]
[,, k, ,, m, -, i, ), ;, k, +=, m, -, i, ;, }, else, if, (, j, <]
[m, -, i, ), ;, k, +=, m, -, i, ;, }, else, if, (, j, <, n, ), {]
[m, -, i, ), ;, k, +=, m, -, i, ;, }, else, if, (, j, <, n, ), {]
[;, k, +=, m, -, i, ;, }, else, if, (, j, <, n, ), {, System, ., arraycopy, (]
[+=, m, -, i, ;, }, else, if, (, j, <, n, ), {, System, ., arraycopy, (, r, ,]
[-, i, ;, }, else, if, (, j, <, n, ), {, System, ., arraycopy, (, r, ,, j, ,]
[;, }, else, if, (, j, <, n, ), {, System, ., arraycopy, (, r, ,, j, ,, out, ,]
[else, if, (, j, <, n, ), {, System, ., arraycopy, (, r, ,, j, ,, out, ,, k, ,]
[else, if, (, j, <, n, ), {, System, ., arraycopy, (, r, ,, j, ,, out, ,, k, ,]
[(, j, <, n, ), {, System, ., arraycopy, (, r, ,, j, ,, out, ,, k, ,, n, -]
[n, ), {, System, ., arraycopy, (, r, ,, j, ,, out, ,, k, ,, n, -, j, ), ;]
[{, System, ., arraycopy, (, r, ,, j, ,, out, ,, k, ,, n, -, j, ), ;, k, +=]
[{, System, ., arraycopy, (, r, ,, j, ,, out, ,, k, ,, n, -, j, ), ;, k, +=]
[., arraycopy, (, r, ,, j, ,, out, ,, k, ,, n, -, j, ), ;, k, +=, n, -]
[j, ,, out, ,, k, ,, n, -, j, ), ;, k, +=, n, -, j, ;, }, if, (]
[j, ,, out, ,, k, ,, n, -, j, ), ;, k, +=, n, -, j, ;, }, if, (]
[out, ,, k, ,, n, -, j, ), ;, k, +=, n, -, j, ;, }, if, (, k, !=]
[out, ,, k, ,, n, -, j, ), ;, k, +=, n, -, j, ;, }, if, (, k, !=]
[+=, n, -, j, ;, }, if, (, k, !=, out, ., length, ), {, int, [, ], clipped, =]
[j, ;, }, if, (, k, !=, out, ., length, ), {, int, [, ], clipped, =, new, int, []
[if, (, k, !=, out, ., length, ), {, int, [, ], clipped, =, new, int, [, k, ], ;]
[if, (, k, !=, out, ., length, ), {, int, [, ], clipped, =, new, int, [, k, ], ;]
[out, ., length, ), {, int, [, ], clipped, =, new, int, [, k, ], ;, System, ., arraycopy, (]
[length, ), {, int, [, ], clipped, =, new, int, [, k, ], ;, System, ., arraycopy, (, out, ,]
[{, int, [, ], clipped, =, new, int, [, k, ], ;, System, ., arraycopy, (, out, ,, 0, ,]
[[, ], clipped, =, new, int, [, k, ], ;, System, ., arraycopy, (, out, ,, 0, ,, clipped, ,]
[clipped, =, new, int, [, k, ], ;, System, ., arraycopy, (, out, ,, 0, ,, clipped, ,, 0, ,]
[int, [, k, ], ;, System, ., arraycopy, (, out, ,, 0, ,, clipped, ,, 0, ,, k, ), ;]
[k, ], ;, System, ., arraycopy, (, out, ,, 0, ,, clipped, ,, 0, ,, k, ), ;, out, =]
[., arraycopy, (, out, ,, 0, ,, clipped, ,, 0, ,, k, ), ;, out, =, clipped, ;, }, return]
[out, ,, 0, ,, clipped, ,, 0, ,, k, ), ;, out, =, clipped, ;, }, return, new, CharRanges, (]
[new, CharRanges, (, out, ), ;, }, public, CharRanges, intersection, (, CharRanges, other, ), {, int, [, ], aRanges, =]
[), ;, }, public, CharRanges, intersection, (, CharRanges, other, ), {, int, [, ], aRanges, =, ranges, ,, bRanges, =]
[), ;, }, public, CharRanges, intersection, (, CharRanges, other, ), {, int, [, ], aRanges, =, ranges, ,, bRanges, =]
[CharRanges, other, ), {, int, [, ], aRanges, =, ranges, ,, bRanges, =, other, ., ranges, ;, int, aLen, =]
[CharRanges, other, ), {, int, [, ], aRanges, =, ranges, ,, bRanges, =, other, ., ranges, ;, int, aLen, =]
[], aRanges, =, ranges, ,, bRanges, =, other, ., ranges, ;, int, aLen, =, aRanges, ., length, ,, bLen, =]
[], aRanges, =, ranges, ,, bRanges, =, other, ., ranges, ;, int, aLen, =, aRanges, ., length, ,, bLen, =]
[=, other, ., ranges, ;, int, aLen, =, aRanges, ., length, ,, bLen, =, bRanges, ., length, ;, if, (]
[=, other, ., ranges, ;, int, aLen, =, aRanges, ., length, ,, bLen, =, bRanges, ., length, ;, if, (]
[., ranges, ;, int, aLen, =, aRanges, ., length, ,, bLen, =, bRanges, ., length, ;, if, (, aLen, ==]
[aLen, =, aRanges, ., length, ,, bLen, =, bRanges, ., length, ;, if, (, aLen, ==, 0, ), {, return]
[,, bLen, =, bRanges, ., length, ;, if, (, aLen, ==, 0, ), {, return, this, ;, }, if, (]
[,, bLen, =, bRanges, ., length, ;, if, (, aLen, ==, 0, ), {, return, this, ;, }, if, (]
[=, bRanges, ., length, ;, if, (, aLen, ==, 0, ), {, return, this, ;, }, if, (, bLen, ==]
[;, if, (, aLen, ==, 0, ), {, return, this, ;, }, if, (, bLen, ==, 0, ), {, return]
[), {, return, this, ;, }, if, (, bLen, ==, 0, ), {, return, other, ;, }, int, aIdx, =]
[;, }, if, (, bLen, ==, 0, ), {, return, other, ;, }, int, aIdx, =, 0, ,, bIdx, =]
[), {, return, other, ;, }, int, aIdx, =, 0, ,, bIdx, =, 0, ;, int, [, ], intersection, =]
[other, ;, }, int, aIdx, =, 0, ,, bIdx, =, 0, ;, int, [, ], intersection, =, new, int, []
[other, ;, }, int, aIdx, =, 0, ,, bIdx, =, 0, ;, int, [, ], intersection, =, new, int, []
[aIdx, =, 0, ,, bIdx, =, 0, ;, int, [, ], intersection, =, new, int, [, Math, ., min, (]
[0, ,, bIdx, =, 0, ;, int, [, ], intersection, =, new, int, [, Math, ., min, (, aLen, ,]
[[, ], intersection, =, new, int, [, Math, ., min, (, aLen, ,, bLen, ), ], ;, int, intersectionIdx, =]
[int, [, Math, ., min, (, aLen, ,, bLen, ), ], ;, int, intersectionIdx, =, 0, ;, int, pos, =]
[int, [, Math, ., min, (, aLen, ,, bLen, ), ], ;, int, intersectionIdx, =, 0, ;, int, pos, =]
[min, (, aLen, ,, bLen, ), ], ;, int, intersectionIdx, =, 0, ;, int, pos, =, Math, ., min, (]
[min, (, aLen, ,, bLen, ), ], ;, int, intersectionIdx, =, 0, ;, int, pos, =, Math, ., min, (]
[aLen, ,, bLen, ), ], ;, int, intersectionIdx, =, 0, ;, int, pos, =, Math, ., min, (, aRanges, []
[), ], ;, int, intersectionIdx, =, 0, ;, int, pos, =, Math, ., min, (, aRanges, [, 0, ], ,]
[), ], ;, int, intersectionIdx, =, 0, ;, int, pos, =, Math, ., min, (, aRanges, [, 0, ], ,]
[;, int, intersectionIdx, =, 0, ;, int, pos, =, Math, ., min, (, aRanges, [, 0, ], ,, bRanges, []
[int, pos, =, Math, ., min, (, aRanges, [, 0, ], ,, bRanges, [, 0, ], ), ;, while, (]
[int, pos, =, Math, ., min, (, aRanges, [, 0, ], ,, bRanges, [, 0, ], ), ;, while, (]
[int, pos, =, Math, ., min, (, aRanges, [, 0, ], ,, bRanges, [, 0, ], ), ;, while, (]
[=, Math, ., min, (, aRanges, [, 0, ], ,, bRanges, [, 0, ], ), ;, while, (, aIdx, <]
[., min, (, aRanges, [, 0, ], ,, bRanges, [, 0, ], ), ;, while, (, aIdx, <, aLen, &&]
[., min, (, aRanges, [, 0, ], ,, bRanges, [, 0, ], ), ;, while, (, aIdx, <, aLen, &&]
[(, aRanges, [, 0, ], ,, bRanges, [, 0, ], ), ;, while, (, aIdx, <, aLen, &&, bIdx, <]
[,, bRanges, [, 0, ], ), ;, while, (, aIdx, <, aLen, &&, bIdx, <, bLen, ), {, if, (]
[,, bRanges, [, 0, ], ), ;, while, (, aIdx, <, aLen, &&, bIdx, <, bLen, ), {, if, (]
[,, bRanges, [, 0, ], ), ;, while, (, aIdx, <, aLen, &&, bIdx, <, bLen, ), {, if, (]
[[, 0, ], ), ;, while, (, aIdx, <, aLen, &&, bIdx, <, bLen, ), {, if, (, aRanges, []
[[, 0, ], ), ;, while, (, aIdx, <, aLen, &&, bIdx, <, bLen, ), {, if, (, aRanges, []
[], ), ;, while, (, aIdx, <, aLen, &&, bIdx, <, bLen, ), {, if, (, aRanges, [, aIdx, +]
[while, (, aIdx, <, aLen, &&, bIdx, <, bLen, ), {, if, (, aRanges, [, aIdx, +, 1, ], <=]
[<, aLen, &&, bIdx, <, bLen, ), {, if, (, aRanges, [, aIdx, +, 1, ], <=, pos, ), {]
[&&, bIdx, <, bLen, ), {, if, (, aRanges, [, aIdx, +, 1, ], <=, pos, ), {, aIdx, +=]
[if, (, aRanges, [, aIdx, +, 1, ], <=, pos, ), {, aIdx, +=, 2, ;, }, else, if, (]
[if, (, aRanges, [, aIdx, +, 1, ], <=, pos, ), {, aIdx, +=, 2, ;, }, else, if, (]
[if, (, aRanges, [, aIdx, +, 1, ], <=, pos, ), {, aIdx, +=, 2, ;, }, else, if, (]
[aRanges, [, aIdx, +, 1, ], <=, pos, ), {, aIdx, +=, 2, ;, }, else, if, (, bRanges, []
[aRanges, [, aIdx, +, 1, ], <=, pos, ), {, aIdx, +=, 2, ;, }, else, if, (, bRanges, []
[aIdx, +, 1, ], <=, pos, ), {, aIdx, +=, 2, ;, }, else, if, (, bRanges, [, bIdx, +]
[], <=, pos, ), {, aIdx, +=, 2, ;, }, else, if, (, bRanges, [, bIdx, +, 1, ], <=]
[), {, aIdx, +=, 2, ;, }, else, if, (, bRanges, [, bIdx, +, 1, ], <=, pos, ), {]
[aIdx, +=, 2, ;, }, else, if, (, bRanges, [, bIdx, +, 1, ], <=, pos, ), {, bIdx, +=]
[bRanges, [, bIdx, +, 1, ], <=, pos, ), {, bIdx, +=, 2, ;, }, else, {, int, start, =]
[bRanges, [, bIdx, +, 1, ], <=, pos, ), {, bIdx, +=, 2, ;, }, else, {, int, start, =]
[1, ], <=, pos, ), {, bIdx, +=, 2, ;, }, else, {, int, start, =, Math, ., max, (]
[1, ], <=, pos, ), {, bIdx, +=, 2, ;, }, else, {, int, start, =, Math, ., max, (]
[<=, pos, ), {, bIdx, +=, 2, ;, }, else, {, int, start, =, Math, ., max, (, aRanges, []
[{, bIdx, +=, 2, ;, }, else, {, int, start, =, Math, ., max, (, aRanges, [, aIdx, ], ,]
[{, bIdx, +=, 2, ;, }, else, {, int, start, =, Math, ., max, (, aRanges, [, aIdx, ], ,]
[+=, 2, ;, }, else, {, int, start, =, Math, ., max, (, aRanges, [, aIdx, ], ,, bRanges, []
[int, start, =, Math, ., max, (, aRanges, [, aIdx, ], ,, bRanges, [, bIdx, ], ), ;, if, (]
[int, start, =, Math, ., max, (, aRanges, [, aIdx, ], ,, bRanges, [, bIdx, ], ), ;, if, (]
[=, Math, ., max, (, aRanges, [, aIdx, ], ,, bRanges, [, bIdx, ], ), ;, if, (, pos, <]
[max, (, aRanges, [, aIdx, ], ,, bRanges, [, bIdx, ], ), ;, if, (, pos, <, start, ), {]
[aRanges, [, aIdx, ], ,, bRanges, [, bIdx, ], ), ;, if, (, pos, <, start, ), {, pos, =]
[], ), ;, if, (, pos, <, start, ), {, pos, =, start, ;, }, else, {, int, end, =]
[], ), ;, if, (, pos, <, start, ), {, pos, =, start, ;, }, else, {, int, end, =]
[(, pos, <, start, ), {, pos, =, start, ;, }, else, {, int, end, =, Math, ., min, (]
[(, pos, <, start, ), {, pos, =, start, ;, }, else, {, int, end, =, Math, ., min, (]
[<, start, ), {, pos, =, start, ;, }, else, {, int, end, =, Math, ., min, (, aRanges, []
[<, start, ), {, pos, =, start, ;, }, else, {, int, end, =, Math, ., min, (, aRanges, []
[), {, pos, =, start, ;, }, else, {, int, end, =, Math, ., min, (, aRanges, [, aIdx, +]
[=, start, ;, }, else, {, int, end, =, Math, ., min, (, aRanges, [, aIdx, +, 1, ], ,]
[=, start, ;, }, else, {, int, end, =, Math, ., min, (, aRanges, [, aIdx, +, 1, ], ,]
[;, }, else, {, int, end, =, Math, ., min, (, aRanges, [, aIdx, +, 1, ], ,, bRanges, []
[;, }, else, {, int, end, =, Math, ., min, (, aRanges, [, aIdx, +, 1, ], ,, bRanges, []
[else, {, int, end, =, Math, ., min, (, aRanges, [, aIdx, +, 1, ], ,, bRanges, [, bIdx, +]
[., min, (, aRanges, [, aIdx, +, 1, ], ,, bRanges, [, bIdx, +, 1, ], ), ;, if, (]
[., min, (, aRanges, [, aIdx, +, 1, ], ,, bRanges, [, bIdx, +, 1, ], ), ;, if, (]
[., min, (, aRanges, [, aIdx, +, 1, ], ,, bRanges, [, bIdx, +, 1, ], ), ;, if, (]
[(, aRanges, [, aIdx, +, 1, ], ,, bRanges, [, bIdx, +, 1, ], ), ;, if, (, intersectionIdx, !=]
[[, aIdx, +, 1, ], ,, bRanges, [, bIdx, +, 1, ], ), ;, if, (, intersectionIdx, !=, 0, &&]
[[, aIdx, +, 1, ], ,, bRanges, [, bIdx, +, 1, ], ), ;, if, (, intersectionIdx, !=, 0, &&]
[+, 1, ], ,, bRanges, [, bIdx, +, 1, ], ), ;, if, (, intersectionIdx, !=, 0, &&, pos, ==]
[+, 1, ], ,, bRanges, [, bIdx, +, 1, ], ), ;, if, (, intersectionIdx, !=, 0, &&, pos, ==]
[], ,, bRanges, [, bIdx, +, 1, ], ), ;, if, (, intersectionIdx, !=, 0, &&, pos, ==, intersection, []
[], ,, bRanges, [, bIdx, +, 1, ], ), ;, if, (, intersectionIdx, !=, 0, &&, pos, ==, intersection, []
[bRanges, [, bIdx, +, 1, ], ), ;, if, (, intersectionIdx, !=, 0, &&, pos, ==, intersection, [, intersectionIdx, -]
[1, ], ), ;, if, (, intersectionIdx, !=, 0, &&, pos, ==, intersection, [, intersectionIdx, -, 1, ], ), {]
[1, ], ), ;, if, (, intersectionIdx, !=, 0, &&, pos, ==, intersection, [, intersectionIdx, -, 1, ], ), {]
[), ;, if, (, intersectionIdx, !=, 0, &&, pos, ==, intersection, [, intersectionIdx, -, 1, ], ), {, intersection, []
[), ;, if, (, intersectionIdx, !=, 0, &&, pos, ==, intersection, [, intersectionIdx, -, 1, ], ), {, intersection, []
[if, (, intersectionIdx, !=, 0, &&, pos, ==, intersection, [, intersectionIdx, -, 1, ], ), {, intersection, [, intersectionIdx, -]
[!=, 0, &&, pos, ==, intersection, [, intersectionIdx, -, 1, ], ), {, intersection, [, intersectionIdx, -, 1, ], =]
[intersectionIdx, -, 1, ], ), {, intersection, [, intersectionIdx, -, 1, ], =, end, ;, }, else, {, if, (]
[intersectionIdx, -, 1, ], ), {, intersection, [, intersectionIdx, -, 1, ], =, end, ;, }, else, {, if, (]
[1, ], ), {, intersection, [, intersectionIdx, -, 1, ], =, end, ;, }, else, {, if, (, intersectionIdx, ==]
[1, ], ), {, intersection, [, intersectionIdx, -, 1, ], =, end, ;, }, else, {, if, (, intersectionIdx, ==]
[=, end, ;, }, else, {, if, (, intersectionIdx, ==, intersection, ., length, ), {, int, [, ], newArr, =]
[}, else, {, if, (, intersectionIdx, ==, intersection, ., length, ), {, int, [, ], newArr, =, new, int, []
[}, else, {, if, (, intersectionIdx, ==, intersection, ., length, ), {, int, [, ], newArr, =, new, int, []
[{, if, (, intersectionIdx, ==, intersection, ., length, ), {, int, [, ], newArr, =, new, int, [, intersectionIdx, *]
[intersectionIdx, ==, intersection, ., length, ), {, int, [, ], newArr, =, new, int, [, intersectionIdx, *, 2, ], ;]
[intersectionIdx, ==, intersection, ., length, ), {, int, [, ], newArr, =, new, int, [, intersectionIdx, *, 2, ], ;]
[length, ), {, int, [, ], newArr, =, new, int, [, intersectionIdx, *, 2, ], ;, System, ., arraycopy, (]
[{, int, [, ], newArr, =, new, int, [, intersectionIdx, *, 2, ], ;, System, ., arraycopy, (, intersection, ,]
[[, ], newArr, =, new, int, [, intersectionIdx, *, 2, ], ;, System, ., arraycopy, (, intersection, ,, 0, ,]
[newArr, =, new, int, [, intersectionIdx, *, 2, ], ;, System, ., arraycopy, (, intersection, ,, 0, ,, newArr, ,]
[new, int, [, intersectionIdx, *, 2, ], ;, System, ., arraycopy, (, intersection, ,, 0, ,, newArr, ,, 0, ,]
[intersectionIdx, *, 2, ], ;, System, ., arraycopy, (, intersection, ,, 0, ,, newArr, ,, 0, ,, intersectionIdx, ), ;]
[2, ], ;, System, ., arraycopy, (, intersection, ,, 0, ,, newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =]
[System, ., arraycopy, (, intersection, ,, 0, ,, newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr, ;, }]
[System, ., arraycopy, (, intersection, ,, 0, ,, newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr, ;, }]
[arraycopy, (, intersection, ,, 0, ,, newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr, ;, }, intersection, []
[arraycopy, (, intersection, ,, 0, ,, newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr, ;, }, intersection, []
[0, ,, newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr, ;, }, intersection, [, intersectionIdx, ++, ], =]
[newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr, ;, }, intersection, [, intersectionIdx, ++, ], =, pos, ;]
[newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr, ;, }, intersection, [, intersectionIdx, ++, ], =, pos, ;]
[0, ,, intersectionIdx, ), ;, intersection, =, newArr, ;, }, intersection, [, intersectionIdx, ++, ], =, pos, ;, intersection, []
[0, ,, intersectionIdx, ), ;, intersection, =, newArr, ;, }, intersection, [, intersectionIdx, ++, ], =, pos, ;, intersection, []
[;, intersection, =, newArr, ;, }, intersection, [, intersectionIdx, ++, ], =, pos, ;, intersection, [, intersectionIdx, ++, ], =]
[newArr, ;, }, intersection, [, intersectionIdx, ++, ], =, pos, ;, intersection, [, intersectionIdx, ++, ], =, end, ;, }]
[}, intersection, [, intersectionIdx, ++, ], =, pos, ;, intersection, [, intersectionIdx, ++, ], =, end, ;, }, pos, =]
[pos, ;, intersection, [, intersectionIdx, ++, ], =, end, ;, }, pos, =, end, ;, }, }, }, if, (]
[pos, ;, intersection, [, intersectionIdx, ++, ], =, end, ;, }, pos, =, end, ;, }, }, }, if, (]
[intersection, [, intersectionIdx, ++, ], =, end, ;, }, pos, =, end, ;, }, }, }, if, (, intersectionIdx, !=]
[intersection, [, intersectionIdx, ++, ], =, end, ;, }, pos, =, end, ;, }, }, }, if, (, intersectionIdx, !=]
[=, end, ;, }, }, }, if, (, intersectionIdx, !=, intersection, ., length, ), {, int, [, ], newArr, =]
[}, }, }, if, (, intersectionIdx, !=, intersection, ., length, ), {, int, [, ], newArr, =, new, int, []
[if, (, intersectionIdx, !=, intersection, ., length, ), {, int, [, ], newArr, =, new, int, [, intersectionIdx, ], ;]
[if, (, intersectionIdx, !=, intersection, ., length, ), {, int, [, ], newArr, =, new, int, [, intersectionIdx, ], ;]
[intersection, ., length, ), {, int, [, ], newArr, =, new, int, [, intersectionIdx, ], ;, System, ., arraycopy, (]
[length, ), {, int, [, ], newArr, =, new, int, [, intersectionIdx, ], ;, System, ., arraycopy, (, intersection, ,]
[{, int, [, ], newArr, =, new, int, [, intersectionIdx, ], ;, System, ., arraycopy, (, intersection, ,, 0, ,]
[[, ], newArr, =, new, int, [, intersectionIdx, ], ;, System, ., arraycopy, (, intersection, ,, 0, ,, newArr, ,]
[newArr, =, new, int, [, intersectionIdx, ], ;, System, ., arraycopy, (, intersection, ,, 0, ,, newArr, ,, 0, ,]
[int, [, intersectionIdx, ], ;, System, ., arraycopy, (, intersection, ,, 0, ,, newArr, ,, 0, ,, intersectionIdx, ), ;]
[intersectionIdx, ], ;, System, ., arraycopy, (, intersection, ,, 0, ,, newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =]
[., arraycopy, (, intersection, ,, 0, ,, newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr, ;, }, return]
[intersection, ,, 0, ,, newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr, ;, }, return, new, CharRanges, (]
[new, CharRanges, (, intersection, ), ;, }, public, CharRanges, difference, (, CharRanges, subtrahendRanges, ), {, int, [, ], minuend, =]
[new, CharRanges, (, intersection, ), ;, }, public, CharRanges, difference, (, CharRanges, subtrahendRanges, ), {, int, [, ], minuend, =]
[difference, (, CharRanges, subtrahendRanges, ), {, int, [, ], minuend, =, this, ., ranges, ;, int, [, ], subtrahend, =]
[difference, (, CharRanges, subtrahendRanges, ), {, int, [, ], minuend, =, this, ., ranges, ;, int, [, ], subtrahend, =]
[[, ], minuend, =, this, ., ranges, ;, int, [, ], subtrahend, =, subtrahendRanges, ., ranges, ;, int, mn, =]
[[, ], minuend, =, this, ., ranges, ;, int, [, ], subtrahend, =, subtrahendRanges, ., ranges, ;, int, mn, =]
[ranges, ;, int, [, ], subtrahend, =, subtrahendRanges, ., ranges, ;, int, mn, =, minuend, ., length, ,, sn, =]
[ranges, ;, int, [, ], subtrahend, =, subtrahendRanges, ., ranges, ;, int, mn, =, minuend, ., length, ,, sn, =]
[=, subtrahendRanges, ., ranges, ;, int, mn, =, minuend, ., length, ,, sn, =, subtrahend, ., length, ;, if, (]
[=, subtrahendRanges, ., ranges, ;, int, mn, =, minuend, ., length, ,, sn, =, subtrahend, ., length, ;, if, (]
[=, subtrahendRanges, ., ranges, ;, int, mn, =, minuend, ., length, ,, sn, =, subtrahend, ., length, ;, if, (]
[., ranges, ;, int, mn, =, minuend, ., length, ,, sn, =, subtrahend, ., length, ;, if, (, mn, ==]
[;, int, mn, =, minuend, ., length, ,, sn, =, subtrahend, ., length, ;, if, (, mn, ==, 0, ||]
[;, int, mn, =, minuend, ., length, ,, sn, =, subtrahend, ., length, ;, if, (, mn, ==, 0, ||]
[mn, =, minuend, ., length, ,, sn, =, subtrahend, ., length, ;, if, (, mn, ==, 0, ||, sn, ==]
[length, ,, sn, =, subtrahend, ., length, ;, if, (, mn, ==, 0, ||, sn, ==, 0, ), {, return]
[if, (, mn, ==, 0, ||, sn, ==, 0, ), {, return, this, ;, }, int, [, ], difference, =]
[==, 0, ||, sn, ==, 0, ), {, return, this, ;, }, int, [, ], difference, =, new, int, []
[==, 0, ||, sn, ==, 0, ), {, return, this, ;, }, int, [, ], difference, =, new, int, []
[return, this, ;, }, int, [, ], difference, =, new, int, [, minuend, ., length, ], ;, int, mIdx, =]
[int, [, ], difference, =, new, int, [, minuend, ., length, ], ;, int, mIdx, =, 0, ,, sIdx, =]
[=, new, int, [, minuend, ., length, ], ;, int, mIdx, =, 0, ,, sIdx, =, 0, ,, dIdx, =]
[., length, ], ;, int, mIdx, =, 0, ,, sIdx, =, 0, ,, dIdx, =, 0, ;, int, pos, =]
[., length, ], ;, int, mIdx, =, 0, ,, sIdx, =, 0, ,, dIdx, =, 0, ;, int, pos, =]
[], ;, int, mIdx, =, 0, ,, sIdx, =, 0, ,, dIdx, =, 0, ;, int, pos, =, minuend, []
[0, ,, sIdx, =, 0, ,, dIdx, =, 0, ;, int, pos, =, minuend, [, 0, ], ;, while, (]
[0, ,, sIdx, =, 0, ,, dIdx, =, 0, ;, int, pos, =, minuend, [, 0, ], ;, while, (]
[sIdx, =, 0, ,, dIdx, =, 0, ;, int, pos, =, minuend, [, 0, ], ;, while, (, mIdx, <]
[=, 0, ;, int, pos, =, minuend, [, 0, ], ;, while, (, mIdx, <, mn, ), {, if, (]
[=, 0, ;, int, pos, =, minuend, [, 0, ], ;, while, (, mIdx, <, mn, ), {, if, (]
[;, int, pos, =, minuend, [, 0, ], ;, while, (, mIdx, <, mn, ), {, if, (, pos, >=]
[;, int, pos, =, minuend, [, 0, ], ;, while, (, mIdx, <, mn, ), {, if, (, pos, >=]
[pos, =, minuend, [, 0, ], ;, while, (, mIdx, <, mn, ), {, if, (, pos, >=, minuend, []
[pos, =, minuend, [, 0, ], ;, while, (, mIdx, <, mn, ), {, if, (, pos, >=, minuend, []
[minuend, [, 0, ], ;, while, (, mIdx, <, mn, ), {, if, (, pos, >=, minuend, [, mIdx, +]
[;, while, (, mIdx, <, mn, ), {, if, (, pos, >=, minuend, [, mIdx, +, 1, ], ), {]
[(, mIdx, <, mn, ), {, if, (, pos, >=, minuend, [, mIdx, +, 1, ], ), {, mIdx, +=]
[if, (, pos, >=, minuend, [, mIdx, +, 1, ], ), {, mIdx, +=, 2, ;, }, else, if, (]
[if, (, pos, >=, minuend, [, mIdx, +, 1, ], ), {, mIdx, +=, 2, ;, }, else, if, (]
[pos, >=, minuend, [, mIdx, +, 1, ], ), {, mIdx, +=, 2, ;, }, else, if, (, pos, <]
[pos, >=, minuend, [, mIdx, +, 1, ], ), {, mIdx, +=, 2, ;, }, else, if, (, pos, <]
[minuend, [, mIdx, +, 1, ], ), {, mIdx, +=, 2, ;, }, else, if, (, pos, <, minuend, []
[1, ], ), {, mIdx, +=, 2, ;, }, else, if, (, pos, <, minuend, [, mIdx, ], ), {]
[), {, mIdx, +=, 2, ;, }, else, if, (, pos, <, minuend, [, mIdx, ], ), {, pos, =]
[), {, mIdx, +=, 2, ;, }, else, if, (, pos, <, minuend, [, mIdx, ], ), {, pos, =]
[mIdx, +=, 2, ;, }, else, if, (, pos, <, minuend, [, mIdx, ], ), {, pos, =, minuend, []
[(, pos, <, minuend, [, mIdx, ], ), {, pos, =, minuend, [, mIdx, ], ;, }, else, if, (]
[(, pos, <, minuend, [, mIdx, ], ), {, pos, =, minuend, [, mIdx, ], ;, }, else, if, (]
[(, pos, <, minuend, [, mIdx, ], ), {, pos, =, minuend, [, mIdx, ], ;, }, else, if, (]
[<, minuend, [, mIdx, ], ), {, pos, =, minuend, [, mIdx, ], ;, }, else, if, (, sIdx, <]
[[, mIdx, ], ), {, pos, =, minuend, [, mIdx, ], ;, }, else, if, (, sIdx, <, sn, &&]
[[, mIdx, ], ), {, pos, =, minuend, [, mIdx, ], ;, }, else, if, (, sIdx, <, sn, &&]
[], ), {, pos, =, minuend, [, mIdx, ], ;, }, else, if, (, sIdx, <, sn, &&, pos, >=]
[], ), {, pos, =, minuend, [, mIdx, ], ;, }, else, if, (, sIdx, <, sn, &&, pos, >=]
[{, pos, =, minuend, [, mIdx, ], ;, }, else, if, (, sIdx, <, sn, &&, pos, >=, subtrahend, []
[[, mIdx, ], ;, }, else, if, (, sIdx, <, sn, &&, pos, >=, subtrahend, [, sIdx, ], ), {]
[], ;, }, else, if, (, sIdx, <, sn, &&, pos, >=, subtrahend, [, sIdx, ], ), {, pos, =]
[], ;, }, else, if, (, sIdx, <, sn, &&, pos, >=, subtrahend, [, sIdx, ], ), {, pos, =]
[}, else, if, (, sIdx, <, sn, &&, pos, >=, subtrahend, [, sIdx, ], ), {, pos, =, subtrahend, []
[}, else, if, (, sIdx, <, sn, &&, pos, >=, subtrahend, [, sIdx, ], ), {, pos, =, subtrahend, []
[if, (, sIdx, <, sn, &&, pos, >=, subtrahend, [, sIdx, ], ), {, pos, =, subtrahend, [, sIdx, +]
[<, sn, &&, pos, >=, subtrahend, [, sIdx, ], ), {, pos, =, subtrahend, [, sIdx, +, 1, ], ;]
[&&, pos, >=, subtrahend, [, sIdx, ], ), {, pos, =, subtrahend, [, sIdx, +, 1, ], ;, sIdx, +=]
[{, pos, =, subtrahend, [, sIdx, +, 1, ], ;, sIdx, +=, 2, ;, }, else, {, int, end, =]
[{, pos, =, subtrahend, [, sIdx, +, 1, ], ;, sIdx, +=, 2, ;, }, else, {, int, end, =]
[{, pos, =, subtrahend, [, sIdx, +, 1, ], ;, sIdx, +=, 2, ;, }, else, {, int, end, =]
[=, subtrahend, [, sIdx, +, 1, ], ;, sIdx, +=, 2, ;, }, else, {, int, end, =, sIdx, <]
[[, sIdx, +, 1, ], ;, sIdx, +=, 2, ;, }, else, {, int, end, =, sIdx, <, sn, ?]
[[, sIdx, +, 1, ], ;, sIdx, +=, 2, ;, }, else, {, int, end, =, sIdx, <, sn, ?]
[], ;, sIdx, +=, 2, ;, }, else, {, int, end, =, sIdx, <, sn, ?, Math, ., min, (]
[], ;, sIdx, +=, 2, ;, }, else, {, int, end, =, sIdx, <, sn, ?, Math, ., min, (]
[sIdx, +=, 2, ;, }, else, {, int, end, =, sIdx, <, sn, ?, Math, ., min, (, minuend, []
[sIdx, +=, 2, ;, }, else, {, int, end, =, sIdx, <, sn, ?, Math, ., min, (, minuend, []
[2, ;, }, else, {, int, end, =, sIdx, <, sn, ?, Math, ., min, (, minuend, [, mIdx, +]
[else, {, int, end, =, sIdx, <, sn, ?, Math, ., min, (, minuend, [, mIdx, +, 1, ], ,]
[else, {, int, end, =, sIdx, <, sn, ?, Math, ., min, (, minuend, [, mIdx, +, 1, ], ,]
[int, end, =, sIdx, <, sn, ?, Math, ., min, (, minuend, [, mIdx, +, 1, ], ,, subtrahend, []
[<, sn, ?, Math, ., min, (, minuend, [, mIdx, +, 1, ], ,, subtrahend, [, sIdx, ], ), :]
[<, sn, ?, Math, ., min, (, minuend, [, mIdx, +, 1, ], ,, subtrahend, [, sIdx, ], ), :]
[?, Math, ., min, (, minuend, [, mIdx, +, 1, ], ,, subtrahend, [, sIdx, ], ), :, minuend, []
[?, Math, ., min, (, minuend, [, mIdx, +, 1, ], ,, subtrahend, [, sIdx, ], ), :, minuend, []
[., min, (, minuend, [, mIdx, +, 1, ], ,, subtrahend, [, sIdx, ], ), :, minuend, [, mIdx, +]
[mIdx, +, 1, ], ,, subtrahend, [, sIdx, ], ), :, minuend, [, mIdx, +, 1, ], ;, if, (]
[mIdx, +, 1, ], ,, subtrahend, [, sIdx, ], ), :, minuend, [, mIdx, +, 1, ], ;, if, (]
[mIdx, +, 1, ], ,, subtrahend, [, sIdx, ], ), :, minuend, [, mIdx, +, 1, ], ;, if, (]
[1, ], ,, subtrahend, [, sIdx, ], ), :, minuend, [, mIdx, +, 1, ], ;, if, (, dIdx, !=]
[,, subtrahend, [, sIdx, ], ), :, minuend, [, mIdx, +, 1, ], ;, if, (, dIdx, !=, 0, &&]
[,, subtrahend, [, sIdx, ], ), :, minuend, [, mIdx, +, 1, ], ;, if, (, dIdx, !=, 0, &&]
[,, subtrahend, [, sIdx, ], ), :, minuend, [, mIdx, +, 1, ], ;, if, (, dIdx, !=, 0, &&]
[[, sIdx, ], ), :, minuend, [, mIdx, +, 1, ], ;, if, (, dIdx, !=, 0, &&, difference, []
[[, sIdx, ], ), :, minuend, [, mIdx, +, 1, ], ;, if, (, dIdx, !=, 0, &&, difference, []
[], ), :, minuend, [, mIdx, +, 1, ], ;, if, (, dIdx, !=, 0, &&, difference, [, dIdx, -]
[minuend, [, mIdx, +, 1, ], ;, if, (, dIdx, !=, 0, &&, difference, [, dIdx, -, 1, ], ==]
[+, 1, ], ;, if, (, dIdx, !=, 0, &&, difference, [, dIdx, -, 1, ], ==, pos, ), {]
[+, 1, ], ;, if, (, dIdx, !=, 0, &&, difference, [, dIdx, -, 1, ], ==, pos, ), {]
[], ;, if, (, dIdx, !=, 0, &&, difference, [, dIdx, -, 1, ], ==, pos, ), {, difference, []
[], ;, if, (, dIdx, !=, 0, &&, difference, [, dIdx, -, 1, ], ==, pos, ), {, difference, []
[if, (, dIdx, !=, 0, &&, difference, [, dIdx, -, 1, ], ==, pos, ), {, difference, [, dIdx, -]
[!=, 0, &&, difference, [, dIdx, -, 1, ], ==, pos, ), {, difference, [, dIdx, -, 1, ], =]
[1, ], ==, pos, ), {, difference, [, dIdx, -, 1, ], =, pos, ;, }, else, {, if, (]
[1, ], ==, pos, ), {, difference, [, dIdx, -, 1, ], =, pos, ;, }, else, {, if, (]
[==, pos, ), {, difference, [, dIdx, -, 1, ], =, pos, ;, }, else, {, if, (, dIdx, ==]
[==, pos, ), {, difference, [, dIdx, -, 1, ], =, pos, ;, }, else, {, if, (, dIdx, ==]
[=, pos, ;, }, else, {, if, (, dIdx, ==, difference, ., length, ), {, int, [, ], newArr, =]
[}, else, {, if, (, dIdx, ==, difference, ., length, ), {, int, [, ], newArr, =, new, int, []
[}, else, {, if, (, dIdx, ==, difference, ., length, ), {, int, [, ], newArr, =, new, int, []
[{, if, (, dIdx, ==, difference, ., length, ), {, int, [, ], newArr, =, new, int, [, dIdx, *]
[dIdx, ==, difference, ., length, ), {, int, [, ], newArr, =, new, int, [, dIdx, *, 2, ], ;]
[dIdx, ==, difference, ., length, ), {, int, [, ], newArr, =, new, int, [, dIdx, *, 2, ], ;]
[length, ), {, int, [, ], newArr, =, new, int, [, dIdx, *, 2, ], ;, System, ., arraycopy, (]
[{, int, [, ], newArr, =, new, int, [, dIdx, *, 2, ], ;, System, ., arraycopy, (, difference, ,]
[[, ], newArr, =, new, int, [, dIdx, *, 2, ], ;, System, ., arraycopy, (, difference, ,, 0, ,]
[newArr, =, new, int, [, dIdx, *, 2, ], ;, System, ., arraycopy, (, difference, ,, 0, ,, newArr, ,]
[new, int, [, dIdx, *, 2, ], ;, System, ., arraycopy, (, difference, ,, 0, ,, newArr, ,, 0, ,]
[dIdx, *, 2, ], ;, System, ., arraycopy, (, difference, ,, 0, ,, newArr, ,, 0, ,, dIdx, ), ;]
[2, ], ;, System, ., arraycopy, (, difference, ,, 0, ,, newArr, ,, 0, ,, dIdx, ), ;, difference, =]
[System, ., arraycopy, (, difference, ,, 0, ,, newArr, ,, 0, ,, dIdx, ), ;, difference, =, newArr, ;, }]
[System, ., arraycopy, (, difference, ,, 0, ,, newArr, ,, 0, ,, dIdx, ), ;, difference, =, newArr, ;, }]
[arraycopy, (, difference, ,, 0, ,, newArr, ,, 0, ,, dIdx, ), ;, difference, =, newArr, ;, }, difference, []
[arraycopy, (, difference, ,, 0, ,, newArr, ,, 0, ,, dIdx, ), ;, difference, =, newArr, ;, }, difference, []
[0, ,, newArr, ,, 0, ,, dIdx, ), ;, difference, =, newArr, ;, }, difference, [, dIdx, ++, ], =]
[newArr, ,, 0, ,, dIdx, ), ;, difference, =, newArr, ;, }, difference, [, dIdx, ++, ], =, pos, ;]
[newArr, ,, 0, ,, dIdx, ), ;, difference, =, newArr, ;, }, difference, [, dIdx, ++, ], =, pos, ;]
[0, ,, dIdx, ), ;, difference, =, newArr, ;, }, difference, [, dIdx, ++, ], =, pos, ;, difference, []
[0, ,, dIdx, ), ;, difference, =, newArr, ;, }, difference, [, dIdx, ++, ], =, pos, ;, difference, []
[;, difference, =, newArr, ;, }, difference, [, dIdx, ++, ], =, pos, ;, difference, [, dIdx, ++, ], =]
[newArr, ;, }, difference, [, dIdx, ++, ], =, pos, ;, difference, [, dIdx, ++, ], =, end, ;, }]
[}, difference, [, dIdx, ++, ], =, pos, ;, difference, [, dIdx, ++, ], =, end, ;, }, pos, =]
[=, pos, ;, difference, [, dIdx, ++, ], =, end, ;, }, pos, =, end, ;, }, }, if, (]
[=, pos, ;, difference, [, dIdx, ++, ], =, end, ;, }, pos, =, end, ;, }, }, if, (]
[;, difference, [, dIdx, ++, ], =, end, ;, }, pos, =, end, ;, }, }, if, (, dIdx, !=]
[;, difference, [, dIdx, ++, ], =, end, ;, }, pos, =, end, ;, }, }, if, (, dIdx, !=]
[pos, =, end, ;, }, }, if, (, dIdx, !=, difference, ., length, ), {, int, [, ], newArr, =]
[;, }, }, if, (, dIdx, !=, difference, ., length, ), {, int, [, ], newArr, =, new, int, []
[if, (, dIdx, !=, difference, ., length, ), {, int, [, ], newArr, =, new, int, [, dIdx, ], ;]
[if, (, dIdx, !=, difference, ., length, ), {, int, [, ], newArr, =, new, int, [, dIdx, ], ;]
[difference, ., length, ), {, int, [, ], newArr, =, new, int, [, dIdx, ], ;, System, ., arraycopy, (]
[length, ), {, int, [, ], newArr, =, new, int, [, dIdx, ], ;, System, ., arraycopy, (, difference, ,]
[{, int, [, ], newArr, =, new, int, [, dIdx, ], ;, System, ., arraycopy, (, difference, ,, 0, ,]
[[, ], newArr, =, new, int, [, dIdx, ], ;, System, ., arraycopy, (, difference, ,, 0, ,, newArr, ,]
[newArr, =, new, int, [, dIdx, ], ;, System, ., arraycopy, (, difference, ,, 0, ,, newArr, ,, 0, ,]
[int, [, dIdx, ], ;, System, ., arraycopy, (, difference, ,, 0, ,, newArr, ,, 0, ,, dIdx, ), ;]
[dIdx, ], ;, System, ., arraycopy, (, difference, ,, 0, ,, newArr, ,, 0, ,, dIdx, ), ;, difference, =]
[., arraycopy, (, difference, ,, 0, ,, newArr, ,, 0, ,, dIdx, ), ;, difference, =, newArr, ;, }, return]
[difference, ,, 0, ,, newArr, ,, 0, ,, dIdx, ), ;, difference, =, newArr, ;, }, return, new, CharRanges, (]
[new, CharRanges, (, difference, ), ;, }, public, boolean, containsAll, (, CharRanges, sub, ), {, int, [, ], superRanges, =]
[new, CharRanges, (, difference, ), ;, }, public, boolean, containsAll, (, CharRanges, sub, ), {, int, [, ], superRanges, =]
[containsAll, (, CharRanges, sub, ), {, int, [, ], superRanges, =, this, ., ranges, ;, int, [, ], subRanges, =]
[containsAll, (, CharRanges, sub, ), {, int, [, ], superRanges, =, this, ., ranges, ;, int, [, ], subRanges, =]
[[, ], superRanges, =, this, ., ranges, ;, int, [, ], subRanges, =, sub, ., ranges, ;, int, superIdx, =]
[this, ., ranges, ;, int, [, ], subRanges, =, sub, ., ranges, ;, int, superIdx, =, 0, ,, subIdx, =]
[[, ], subRanges, =, sub, ., ranges, ;, int, superIdx, =, 0, ,, subIdx, =, 0, ;, int, superLen, =]
[[, ], subRanges, =, sub, ., ranges, ;, int, superIdx, =, 0, ,, subIdx, =, 0, ;, int, superLen, =]
[ranges, ;, int, superIdx, =, 0, ,, subIdx, =, 0, ;, int, superLen, =, superRanges, ., length, ,, subLen, =]
[ranges, ;, int, superIdx, =, 0, ,, subIdx, =, 0, ;, int, superLen, =, superRanges, ., length, ,, subLen, =]
[,, subIdx, =, 0, ;, int, superLen, =, superRanges, ., length, ,, subLen, =, subRanges, ., length, ;, while, (]
[,, subIdx, =, 0, ;, int, superLen, =, superRanges, ., length, ,, subLen, =, subRanges, ., length, ;, while, (]
[=, 0, ;, int, superLen, =, superRanges, ., length, ,, subLen, =, subRanges, ., length, ;, while, (, subIdx, <]
[=, superRanges, ., length, ,, subLen, =, subRanges, ., length, ;, while, (, subIdx, <, subLen, ), {, if, (]
[=, superRanges, ., length, ,, subLen, =, subRanges, ., length, ;, while, (, subIdx, <, subLen, ), {, if, (]
[., length, ,, subLen, =, subRanges, ., length, ;, while, (, subIdx, <, subLen, ), {, if, (, superIdx, ==]
[=, subRanges, ., length, ;, while, (, subIdx, <, subLen, ), {, if, (, superIdx, ==, superLen, ), {, return]
[while, (, subIdx, <, subLen, ), {, if, (, superIdx, ==, superLen, ), {, return, false, ;, }, if, (]
[while, (, subIdx, <, subLen, ), {, if, (, superIdx, ==, superLen, ), {, return, false, ;, }, if, (]
[while, (, subIdx, <, subLen, ), {, if, (, superIdx, ==, superLen, ), {, return, false, ;, }, if, (]
[subIdx, <, subLen, ), {, if, (, superIdx, ==, superLen, ), {, return, false, ;, }, if, (, superRanges, []
[subIdx, <, subLen, ), {, if, (, superIdx, ==, superLen, ), {, return, false, ;, }, if, (, superRanges, []
[subLen, ), {, if, (, superIdx, ==, superLen, ), {, return, false, ;, }, if, (, superRanges, [, superIdx, +]
[if, (, superIdx, ==, superLen, ), {, return, false, ;, }, if, (, superRanges, [, superIdx, +, 1, ], <=]
[if, (, superIdx, ==, superLen, ), {, return, false, ;, }, if, (, superRanges, [, superIdx, +, 1, ], <=]
[superIdx, ==, superLen, ), {, return, false, ;, }, if, (, superRanges, [, superIdx, +, 1, ], <=, subRanges, []
[{, return, false, ;, }, if, (, superRanges, [, superIdx, +, 1, ], <=, subRanges, [, subIdx, ], ), {]
[false, ;, }, if, (, superRanges, [, superIdx, +, 1, ], <=, subRanges, [, subIdx, ], ), {, superIdx, +=]
[[, superIdx, +, 1, ], <=, subRanges, [, subIdx, ], ), {, superIdx, +=, 2, ;, }, else, if, (]
[[, superIdx, +, 1, ], <=, subRanges, [, subIdx, ], ), {, superIdx, +=, 2, ;, }, else, if, (]
[[, superIdx, +, 1, ], <=, subRanges, [, subIdx, ], ), {, superIdx, +=, 2, ;, }, else, if, (]
[+, 1, ], <=, subRanges, [, subIdx, ], ), {, superIdx, +=, 2, ;, }, else, if, (, superRanges, []
[<=, subRanges, [, subIdx, ], ), {, superIdx, +=, 2, ;, }, else, if, (, superRanges, [, superIdx, ], >]
[<=, subRanges, [, subIdx, ], ), {, superIdx, +=, 2, ;, }, else, if, (, superRanges, [, superIdx, ], >]
[[, subIdx, ], ), {, superIdx, +=, 2, ;, }, else, if, (, superRanges, [, superIdx, ], >, subRanges, []
[superIdx, +=, 2, ;, }, else, if, (, superRanges, [, superIdx, ], >, subRanges, [, subIdx, ], ), {, return]
[if, (, superRanges, [, superIdx, ], >, subRanges, [, subIdx, ], ), {, return, false, ;, }, else, if, (]
[if, (, superRanges, [, superIdx, ], >, subRanges, [, subIdx, ], ), {, return, false, ;, }, else, if, (]
[if, (, superRanges, [, superIdx, ], >, subRanges, [, subIdx, ], ), {, return, false, ;, }, else, if, (]
[superRanges, [, superIdx, ], >, subRanges, [, subIdx, ], ), {, return, false, ;, }, else, if, (, superRanges, []
[superRanges, [, superIdx, ], >, subRanges, [, subIdx, ], ), {, return, false, ;, }, else, if, (, superRanges, []
[superIdx, ], >, subRanges, [, subIdx, ], ), {, return, false, ;, }, else, if, (, superRanges, [, superIdx, +]
[subRanges, [, subIdx, ], ), {, return, false, ;, }, else, if, (, superRanges, [, superIdx, +, 1, ], >=]
[subRanges, [, subIdx, ], ), {, return, false, ;, }, else, if, (, superRanges, [, superIdx, +, 1, ], >=]
[subIdx, ], ), {, return, false, ;, }, else, if, (, superRanges, [, superIdx, +, 1, ], >=, subRanges, []
[subIdx, ], ), {, return, false, ;, }, else, if, (, superRanges, [, superIdx, +, 1, ], >=, subRanges, []
[), {, return, false, ;, }, else, if, (, superRanges, [, superIdx, +, 1, ], >=, subRanges, [, subIdx, +]
[;, }, else, if, (, superRanges, [, superIdx, +, 1, ], >=, subRanges, [, subIdx, +, 1, ], ), {]
[else, if, (, superRanges, [, superIdx, +, 1, ], >=, subRanges, [, subIdx, +, 1, ], ), {, subIdx, +=]
[+, 1, ], >=, subRanges, [, subIdx, +, 1, ], ), {, subIdx, +=, 2, ;, }, else, {, return]
[[, subIdx, +, 1, ], ), {, subIdx, +=, 2, ;, }, else, {, return, false, ;, }, }, return]
[[, subIdx, +, 1, ], ), {, subIdx, +=, 2, ;, }, else, {, return, false, ;, }, }, return]
[+, 1, ], ), {, subIdx, +=, 2, ;, }, else, {, return, false, ;, }, }, return, subIdx, ==]
[;, }, }, return, subIdx, ==, subLen, ;, }, public, CharRanges, shift, (, int, delta, ), {, int, n, =]
[;, }, }, return, subIdx, ==, subLen, ;, }, public, CharRanges, shift, (, int, delta, ), {, int, n, =]
[subLen, ;, }, public, CharRanges, shift, (, int, delta, ), {, int, n, =, ranges, ., length, ;, if, (]
[subLen, ;, }, public, CharRanges, shift, (, int, delta, ), {, int, n, =, ranges, ., length, ;, if, (]
[subLen, ;, }, public, CharRanges, shift, (, int, delta, ), {, int, n, =, ranges, ., length, ;, if, (]
[}, public, CharRanges, shift, (, int, delta, ), {, int, n, =, ranges, ., length, ;, if, (, delta, ==]
[CharRanges, shift, (, int, delta, ), {, int, n, =, ranges, ., length, ;, if, (, delta, ==, 0, ||]
[CharRanges, shift, (, int, delta, ), {, int, n, =, ranges, ., length, ;, if, (, delta, ==, 0, ||]
[(, int, delta, ), {, int, n, =, ranges, ., length, ;, if, (, delta, ==, 0, ||, n, ==]
[{, int, n, =, ranges, ., length, ;, if, (, delta, ==, 0, ||, n, ==, 0, ), {, return]
[., length, ;, if, (, delta, ==, 0, ||, n, ==, 0, ), {, return, this, ;, }, if, (]
[., length, ;, if, (, delta, ==, 0, ||, n, ==, 0, ), {, return, this, ;, }, if, (]
[;, if, (, delta, ==, 0, ||, n, ==, 0, ), {, return, this, ;, }, if, (, delta, <]
[||, n, ==, 0, ), {, return, this, ;, }, if, (, delta, <, 0, ), {, long, lmin, =]
[||, n, ==, 0, ), {, return, this, ;, }, if, (, delta, <, 0, ), {, long, lmin, =]
[||, n, ==, 0, ), {, return, this, ;, }, if, (, delta, <, 0, ), {, long, lmin, =]
[==, 0, ), {, return, this, ;, }, if, (, delta, <, 0, ), {, long, lmin, =, ranges, []
[{, return, this, ;, }, if, (, delta, <, 0, ), {, long, lmin, =, ranges, [, 0, ], +]
[}, if, (, delta, <, 0, ), {, long, lmin, =, ranges, [, 0, ], +, delta, ;, if, (]
[}, if, (, delta, <, 0, ), {, long, lmin, =, ranges, [, 0, ], +, delta, ;, if, (]
[(, delta, <, 0, ), {, long, lmin, =, ranges, [, 0, ], +, delta, ;, if, (, lmin, <]
[(, delta, <, 0, ), {, long, lmin, =, ranges, [, 0, ], +, delta, ;, if, (, lmin, <]
[long, lmin, =, ranges, [, 0, ], +, delta, ;, if, (, lmin, <, Integer, ., MIN_VALUE, ), {, throw]
[lmin, <, Integer, ., MIN_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }, else, {, long, lmax, =]
[lmin, <, Integer, ., MIN_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }, else, {, long, lmax, =]
[lmin, <, Integer, ., MIN_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }, else, {, long, lmax, =]
[Integer, ., MIN_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }, else, {, long, lmax, =, ranges, []
[Integer, ., MIN_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }, else, {, long, lmax, =, ranges, []
[MIN_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }, else, {, long, lmax, =, ranges, [, n, -]
[throw, new, IndexOutOfBoundsException, (, ), ;, }, }, else, {, long, lmax, =, ranges, [, n, -, 1, ], +]
[), ;, }, }, else, {, long, lmax, =, ranges, [, n, -, 1, ], +, delta, ;, if, (]
[), ;, }, }, else, {, long, lmax, =, ranges, [, n, -, 1, ], +, delta, ;, if, (]
[}, }, else, {, long, lmax, =, ranges, [, n, -, 1, ], +, delta, ;, if, (, lmax, >]
[}, }, else, {, long, lmax, =, ranges, [, n, -, 1, ], +, delta, ;, if, (, lmax, >]
[=, ranges, [, n, -, 1, ], +, delta, ;, if, (, lmax, >, Integer, ., MAX_VALUE, ), {, throw]
[lmax, >, Integer, ., MAX_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }, int, [, ], shiftedRanges, =]
[., MAX_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }, int, [, ], shiftedRanges, =, new, int, []
[), ;, }, }, int, [, ], shiftedRanges, =, new, int, [, n, ], ;, for, (, int, i, =]
[}, }, int, [, ], shiftedRanges, =, new, int, [, n, ], ;, for, (, int, i, =, n, ;]
[}, }, int, [, ], shiftedRanges, =, new, int, [, n, ], ;, for, (, int, i, =, n, ;]
[}, int, [, ], shiftedRanges, =, new, int, [, n, ], ;, for, (, int, i, =, n, ;, --]
[[, ], shiftedRanges, =, new, int, [, n, ], ;, for, (, int, i, =, n, ;, --, i, >=]
[new, int, [, n, ], ;, for, (, int, i, =, n, ;, --, i, >=, 0, ;, ), {]
[new, int, [, n, ], ;, for, (, int, i, =, n, ;, --, i, >=, 0, ;, ), {]
[[, n, ], ;, for, (, int, i, =, n, ;, --, i, >=, 0, ;, ), {, shiftedRanges, []
[;, for, (, int, i, =, n, ;, --, i, >=, 0, ;, ), {, shiftedRanges, [, i, ], =]
[;, for, (, int, i, =, n, ;, --, i, >=, 0, ;, ), {, shiftedRanges, [, i, ], =]
[;, for, (, int, i, =, n, ;, --, i, >=, 0, ;, ), {, shiftedRanges, [, i, ], =]
[(, int, i, =, n, ;, --, i, >=, 0, ;, ), {, shiftedRanges, [, i, ], =, ranges, []
[=, n, ;, --, i, >=, 0, ;, ), {, shiftedRanges, [, i, ], =, ranges, [, i, ], +]
[i, >=, 0, ;, ), {, shiftedRanges, [, i, ], =, ranges, [, i, ], +, delta, ;, }, return]
[;, ), {, shiftedRanges, [, i, ], =, ranges, [, i, ], +, delta, ;, }, return, new, CharRanges, (]
[}, return, new, CharRanges, (, shiftedRanges, ), ;, }, @, Override, public, String, toString, (, ), {, StringBuilder, sb, =]
[shiftedRanges, ), ;, }, @, Override, public, String, toString, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;]
[shiftedRanges, ), ;, }, @, Override, public, String, toString, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;]
[@, Override, public, String, toString, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (]
[StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (, '[', ), ;, for, (, int, i, =]
[=, new, StringBuilder, (, ), ;, sb, ., append, (, '[', ), ;, for, (, int, i, =, 0, ;]
[=, new, StringBuilder, (, ), ;, sb, ., append, (, '[', ), ;, for, (, int, i, =, 0, ;]
[StringBuilder, (, ), ;, sb, ., append, (, '[', ), ;, for, (, int, i, =, 0, ;, i, <]
[StringBuilder, (, ), ;, sb, ., append, (, '[', ), ;, for, (, int, i, =, 0, ;, i, <]
[sb, ., append, (, '[', ), ;, for, (, int, i, =, 0, ;, i, <, ranges, ., length, ;]
[., append, (, '[', ), ;, for, (, int, i, =, 0, ;, i, <, ranges, ., length, ;, ++]
[;, for, (, int, i, =, 0, ;, i, <, ranges, ., length, ;, ++, i, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, ranges, ., length, ;, ++, i, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, ranges, ., length, ;, ++, i, ), {, if, (]
[for, (, int, i, =, 0, ;, i, <, ranges, ., length, ;, ++, i, ), {, if, (, (]
[for, (, int, i, =, 0, ;, i, <, ranges, ., length, ;, ++, i, ), {, if, (, (]
[int, i, =, 0, ;, i, <, ranges, ., length, ;, ++, i, ), {, if, (, (, i, &]
[0, ;, i, <, ranges, ., length, ;, ++, i, ), {, if, (, (, i, &, 1, ), !=]
[i, <, ranges, ., length, ;, ++, i, ), {, if, (, (, i, &, 1, ), !=, 0, &&]
[i, <, ranges, ., length, ;, ++, i, ), {, if, (, (, i, &, 1, ), !=, 0, &&]
[i, <, ranges, ., length, ;, ++, i, ), {, if, (, (, i, &, 1, ), !=, 0, &&]
[ranges, ., length, ;, ++, i, ), {, if, (, (, i, &, 1, ), !=, 0, &&, ranges, []
[;, ++, i, ), {, if, (, (, i, &, 1, ), !=, 0, &&, ranges, [, i, ], ==]
[;, ++, i, ), {, if, (, (, i, &, 1, ), !=, 0, &&, ranges, [, i, ], ==]
[;, ++, i, ), {, if, (, (, i, &, 1, ), !=, 0, &&, ranges, [, i, ], ==]
[i, ), {, if, (, (, i, &, 1, ), !=, 0, &&, ranges, [, i, ], ==, ranges, []
[i, ), {, if, (, (, i, &, 1, ), !=, 0, &&, ranges, [, i, ], ==, ranges, []
[{, if, (, (, i, &, 1, ), !=, 0, &&, ranges, [, i, ], ==, ranges, [, i, -]
[(, i, &, 1, ), !=, 0, &&, ranges, [, i, ], ==, ranges, [, i, -, 1, ], +]
[ranges, [, i, ], ==, ranges, [, i, -, 1, ], +, 1, ), {, continue, ;, }, if, (]
[ranges, [, i, ], ==, ranges, [, i, -, 1, ], +, 1, ), {, continue, ;, }, if, (]
[i, ], ==, ranges, [, i, -, 1, ], +, 1, ), {, continue, ;, }, if, (, i, !=]
[ranges, [, i, -, 1, ], +, 1, ), {, continue, ;, }, if, (, i, !=, 0, ), {]
[ranges, [, i, -, 1, ], +, 1, ), {, continue, ;, }, if, (, i, !=, 0, ), {]
[1, ], +, 1, ), {, continue, ;, }, if, (, i, !=, 0, ), {, sb, ., append, (]
[1, ], +, 1, ), {, continue, ;, }, if, (, i, !=, 0, ), {, sb, ., append, (]
[1, ], +, 1, ), {, continue, ;, }, if, (, i, !=, 0, ), {, sb, ., append, (]
[], +, 1, ), {, continue, ;, }, if, (, i, !=, 0, ), {, sb, ., append, (, (]
[], +, 1, ), {, continue, ;, }, if, (, i, !=, 0, ), {, sb, ., append, (, (]
[1, ), {, continue, ;, }, if, (, i, !=, 0, ), {, sb, ., append, (, (, i, &]
[continue, ;, }, if, (, i, !=, 0, ), {, sb, ., append, (, (, i, &, 1, ), ==]
[}, if, (, i, !=, 0, ), {, sb, ., append, (, (, i, &, 1, ), ==, 0, ?]
[(, i, !=, 0, ), {, sb, ., append, (, (, i, &, 1, ), ==, 0, ?, ' ', :]
[), {, sb, ., append, (, (, i, &, 1, ), ==, 0, ?, ' ', :, '-', ), ;, }]
[), {, sb, ., append, (, (, i, &, 1, ), ==, 0, ?, ' ', :, '-', ), ;, }]
[), {, sb, ., append, (, (, i, &, 1, ), ==, 0, ?, ' ', :, '-', ), ;, }]
[append, (, (, i, &, 1, ), ==, 0, ?, ' ', :, '-', ), ;, }, sb, ., append, (]
[1, ), ==, 0, ?, ' ', :, '-', ), ;, }, sb, ., append, (, "0x", ), ., append, (]
[1, ), ==, 0, ?, ' ', :, '-', ), ;, }, sb, ., append, (, "0x", ), ., append, (]
[?, ' ', :, '-', ), ;, }, sb, ., append, (, "0x", ), ., append, (, Integer, ., toString, (]
[?, ' ', :, '-', ), ;, }, sb, ., append, (, "0x", ), ., append, (, Integer, ., toString, (]
[?, ' ', :, '-', ), ;, }, sb, ., append, (, "0x", ), ., append, (, Integer, ., toString, (]
[:, '-', ), ;, }, sb, ., append, (, "0x", ), ., append, (, Integer, ., toString, (, ranges, []
[;, }, sb, ., append, (, "0x", ), ., append, (, Integer, ., toString, (, ranges, [, i, ], -]
[}, sb, ., append, (, "0x", ), ., append, (, Integer, ., toString, (, ranges, [, i, ], -, (]
[}, sb, ., append, (, "0x", ), ., append, (, Integer, ., toString, (, ranges, [, i, ], -, (]
[., append, (, "0x", ), ., append, (, Integer, ., toString, (, ranges, [, i, ], -, (, i, &]
["0x", ), ., append, (, Integer, ., toString, (, ranges, [, i, ], -, (, i, &, 1, ), ,]
[Integer, ., toString, (, ranges, [, i, ], -, (, i, &, 1, ), ,, 16, ), ), ;, }]
[Integer, ., toString, (, ranges, [, i, ], -, (, i, &, 1, ), ,, 16, ), ), ;, }]
[ranges, [, i, ], -, (, i, &, 1, ), ,, 16, ), ), ;, }, sb, ., append, (]
[-, (, i, &, 1, ), ,, 16, ), ), ;, }, sb, ., append, (, ']', ), ;, return]
[-, (, i, &, 1, ), ,, 16, ), ), ;, }, sb, ., append, (, ']', ), ;, return]
[return, sb, ., toString, (, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (]
[sb, ., toString, (, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !]
[., toString, (, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (]
[., toString, (, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (]
[Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (, o, instanceof, CharRanges, ), ), {, return]
[(, Object, o, ), {, if, (, !, (, o, instanceof, CharRanges, ), ), {, return, false, ;, }, return]
[(, Object, o, ), {, if, (, !, (, o, instanceof, CharRanges, ), ), {, return, false, ;, }, return]
[{, if, (, !, (, o, instanceof, CharRanges, ), ), {, return, false, ;, }, return, Arrays, ., equals, (]
[{, if, (, !, (, o, instanceof, CharRanges, ), ), {, return, false, ;, }, return, Arrays, ., equals, (]
[(, o, instanceof, CharRanges, ), ), {, return, false, ;, }, return, Arrays, ., equals, (, this, ., ranges, ,]
[(, o, instanceof, CharRanges, ), ), {, return, false, ;, }, return, Arrays, ., equals, (, this, ., ranges, ,]
[o, instanceof, CharRanges, ), ), {, return, false, ;, }, return, Arrays, ., equals, (, this, ., ranges, ,, (]
[), ), {, return, false, ;, }, return, Arrays, ., equals, (, this, ., ranges, ,, (, (, CharRanges, )]
[CharRanges, ), o, ), ., ranges, ), ;, }, @, Override, public, int, hashCode, (, ), {, int, hc, =]
[;, }, @, Override, public, int, hashCode, (, ), {, int, hc, =, 0, ;, for, (, int, i, =]
[public, int, hashCode, (, ), {, int, hc, =, 0, ;, for, (, int, i, =, 0, ,, n, =]
[public, int, hashCode, (, ), {, int, hc, =, 0, ;, for, (, int, i, =, 0, ,, n, =]
[), {, int, hc, =, 0, ;, for, (, int, i, =, 0, ,, n, =, Math, ., min, (]
[int, hc, =, 0, ;, for, (, int, i, =, 0, ,, n, =, Math, ., min, (, 16, ,]
[int, hc, =, 0, ;, for, (, int, i, =, 0, ,, n, =, Math, ., min, (, 16, ,]
[for, (, int, i, =, 0, ,, n, =, Math, ., min, (, 16, ,, ranges, ., length, ), ;]
[for, (, int, i, =, 0, ,, n, =, Math, ., min, (, 16, ,, ranges, ., length, ), ;]
[int, i, =, 0, ,, n, =, Math, ., min, (, 16, ,, ranges, ., length, ), ;, i, <]
[=, 0, ,, n, =, Math, ., min, (, 16, ,, ranges, ., length, ), ;, i, <, n, ;]
[0, ,, n, =, Math, ., min, (, 16, ,, ranges, ., length, ), ;, i, <, n, ;, ++]
[=, Math, ., min, (, 16, ,, ranges, ., length, ), ;, i, <, n, ;, ++, i, ), {]
[., min, (, 16, ,, ranges, ., length, ), ;, i, <, n, ;, ++, i, ), {, hc, =]
[., min, (, 16, ,, ranges, ., length, ), ;, i, <, n, ;, ++, i, ), {, hc, =]
[min, (, 16, ,, ranges, ., length, ), ;, i, <, n, ;, ++, i, ), {, hc, =, (]
[min, (, 16, ,, ranges, ., length, ), ;, i, <, n, ;, ++, i, ), {, hc, =, (]
[16, ,, ranges, ., length, ), ;, i, <, n, ;, ++, i, ), {, hc, =, (, hc, <<]
[., length, ), ;, i, <, n, ;, ++, i, ), {, hc, =, (, hc, <<, 2, ), +]
[., length, ), ;, i, <, n, ;, ++, i, ), {, hc, =, (, hc, <<, 2, ), +]
[), ;, i, <, n, ;, ++, i, ), {, hc, =, (, hc, <<, 2, ), +, ranges, []
[;, ++, i, ), {, hc, =, (, hc, <<, 2, ), +, ranges, [, i, ], ;, }, return]
