[;, private, int, maxOrder, ;, private, int, [, ], sequence, ;, private, int, [, ], costPerStep, ;, private, double, []
[,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,]
[,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -, 1]
[,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -, 1, ), ;]
[,, scalRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setControlFactors, (]
[), ;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -, 1]
[;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -, 1]
[,, -, 1, ,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -]
[,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -]
[,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -]
[,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;]
[,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;]
[), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -]
[), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -]
[;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;, setInterpolationControl, (, true, ,, -, 1, )]
[,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -]
[,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -]
[,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;]
[,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;]
[,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;, setInterpolationControl, (, true]
[,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;, setInterpolationControl, (, true]
[), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;, setInterpolationControl, (, true, ,, -, 1]
[), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;, setInterpolationControl, (, true, ,, -, 1]
[;, setInterpolationControl, (, true, ,, -, 1, ), ;, }, public, GraggBulirschStoerIntegrator, (, final, double, minStep, ,, final, double, maxStep]
[,, -, 1, ,, -, 1, ), ;, setInterpolationControl, (, true, ,, -, 1, ), ;, }, public, GraggBulirschStoerIntegrator, (]
[,, -, 1, ,, -, 1, ), ;, setInterpolationControl, (, true, ,, -, 1, ), ;, }, public, GraggBulirschStoerIntegrator, (]
[,, -, 1, ), ;, setInterpolationControl, (, true, ,, -, 1, ), ;, }, public, GraggBulirschStoerIntegrator, (, final, double, minStep]
[,, -, 1, ), ;, setInterpolationControl, (, true, ,, -, 1, ), ;, }, public, GraggBulirschStoerIntegrator, (, final, double, minStep]
[), ;, setInterpolationControl, (, true, ,, -, 1, ), ;, }, public, GraggBulirschStoerIntegrator, (, final, double, minStep, ,, final, double]
[), ;, setInterpolationControl, (, true, ,, -, 1, ), ;, }, public, GraggBulirschStoerIntegrator, (, final, double, minStep, ,, final, double]
[;, }, public, GraggBulirschStoerIntegrator, (, final, double, minStep, ,, final, double, maxStep, ,, final, double, [, ], vecAbsoluteTolerance, ,, final]
[,, -, 1, ), ;, }, public, GraggBulirschStoerIntegrator, (, final, double, minStep, ,, final, double, maxStep, ,, final, double, []
[), ;, }, public, GraggBulirschStoerIntegrator, (, final, double, minStep, ,, final, double, maxStep, ,, final, double, [, ], vecAbsoluteTolerance, ,]
[), ;, }, public, GraggBulirschStoerIntegrator, (, final, double, minStep, ,, final, double, maxStep, ,, final, double, [, ], vecAbsoluteTolerance, ,]
[,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,]
[,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -, 1]
[,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -, 1, ), ;]
[,, vecRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setControlFactors, (]
[), ;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -, 1]
[;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -, 1]
[,, -, 1, ,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -]
[,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -]
[,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -]
[,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;]
[,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;]
[), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -]
[), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -]
[;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;, setInterpolationControl, (, true, ,, -, 1, )]
[,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -]
[,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -]
[,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;]
[,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;]
[,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;, setInterpolationControl, (, true]
[,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;, setInterpolationControl, (, true]
[), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;, setInterpolationControl, (, true, ,, -, 1]
[), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;, setInterpolationControl, (, true, ,, -, 1]
[;, setInterpolationControl, (, true, ,, -, 1, ), ;, }, public, void, setStabilityCheck, (, final, boolean, performStabilityCheck, ,, final, int]
[,, -, 1, ,, -, 1, ), ;, setInterpolationControl, (, true, ,, -, 1, ), ;, }, public, void, setStabilityCheck]
[,, -, 1, ,, -, 1, ), ;, setInterpolationControl, (, true, ,, -, 1, ), ;, }, public, void, setStabilityCheck]
[,, -, 1, ), ;, setInterpolationControl, (, true, ,, -, 1, ), ;, }, public, void, setStabilityCheck, (, final, boolean]
[,, -, 1, ), ;, setInterpolationControl, (, true, ,, -, 1, ), ;, }, public, void, setStabilityCheck, (, final, boolean]
[), ;, setInterpolationControl, (, true, ,, -, 1, ), ;, }, public, void, setStabilityCheck, (, final, boolean, performStabilityCheck, ,, final]
[), ;, setInterpolationControl, (, true, ,, -, 1, ), ;, }, public, void, setStabilityCheck, (, final, boolean, performStabilityCheck, ,, final]
[;, }, public, void, setStabilityCheck, (, final, boolean, performStabilityCheck, ,, final, int, maxNumIter, ,, final, int, maxNumChecks, ,, final, double]
[,, -, 1, ), ;, }, public, void, setStabilityCheck, (, final, boolean, performStabilityCheck, ,, final, int, maxNumIter, ,, final, int]
[), ;, }, public, void, setStabilityCheck, (, final, boolean, performStabilityCheck, ,, final, int, maxNumIter, ,, final, int, maxNumChecks, ,, final]
[), ;, }, public, void, setStabilityCheck, (, final, boolean, performStabilityCheck, ,, final, int, maxNumIter, ,, final, int, maxNumChecks, ,, final]
[=, performStabilityCheck, ;, this, ., maxIter, =, (, maxNumIter, <=, 0, ), ?, 2, :, maxNumIter, ;, this, ., maxChecks]
[., performTest, =, performStabilityCheck, ;, this, ., maxIter, =, (, maxNumIter, <=, 0, ), ?, 2, :, maxNumIter, ;, this]
[;, this, ., maxIter, =, (, maxNumIter, <=, 0, ), ?, 2, :, maxNumIter, ;, this, ., maxChecks, =, (]
[=, (, maxNumIter, <=, 0, ), ?, 2, :, maxNumIter, ;, this, ., maxChecks, =, (, maxNumChecks, <=, 0, )]
[., maxIter, =, (, maxNumIter, <=, 0, ), ?, 2, :, maxNumIter, ;, this, ., maxChecks, =, (, maxNumChecks, <=]
[;, this, ., maxChecks, =, (, maxNumChecks, <=, 0, ), ?, 1, :, maxNumChecks, ;, if, (, (, stepsizeReductionFactor, <]
[?, 2, :, maxNumIter, ;, this, ., maxChecks, =, (, maxNumChecks, <=, 0, ), ?, 1, :, maxNumChecks, ;, if]
[), ?, 2, :, maxNumIter, ;, this, ., maxChecks, =, (, maxNumChecks, <=, 0, ), ?, 1, :, maxNumChecks, ;]
[<=, 0, ), ?, 2, :, maxNumIter, ;, this, ., maxChecks, =, (, maxNumChecks, <=, 0, ), ?, 1, :]
[), ?, 2, :, maxNumIter, ;, this, ., maxChecks, =, (, maxNumChecks, <=, 0, ), ?, 1, :, maxNumChecks, ;]
[:, maxNumIter, ;, this, ., maxChecks, =, (, maxNumChecks, <=, 0, ), ?, 1, :, maxNumChecks, ;, if, (, (]
[;, this, ., maxChecks, =, (, maxNumChecks, <=, 0, ), ?, 1, :, maxNumChecks, ;, if, (, (, stepsizeReductionFactor, <]
[=, (, maxNumChecks, <=, 0, ), ?, 1, :, maxNumChecks, ;, if, (, (, stepsizeReductionFactor, <, 0.0001, ), ||, (]
[., maxChecks, =, (, maxNumChecks, <=, 0, ), ?, 1, :, maxNumChecks, ;, if, (, (, stepsizeReductionFactor, <, 0.0001, )]
[;, if, (, (, stepsizeReductionFactor, <, 0.0001, ), ||, (, stepsizeReductionFactor, >, 0.9999, ), ), {, this, ., stabilityReduction, =]
[?, 1, :, maxNumChecks, ;, if, (, (, stepsizeReductionFactor, <, 0.0001, ), ||, (, stepsizeReductionFactor, >, 0.9999, ), ), {]
[), ?, 1, :, maxNumChecks, ;, if, (, (, stepsizeReductionFactor, <, 0.0001, ), ||, (, stepsizeReductionFactor, >, 0.9999, ), )]
[<=, 0, ), ?, 1, :, maxNumChecks, ;, if, (, (, stepsizeReductionFactor, <, 0.0001, ), ||, (, stepsizeReductionFactor, >, 0.9999]
[), ?, 1, :, maxNumChecks, ;, if, (, (, stepsizeReductionFactor, <, 0.0001, ), ||, (, stepsizeReductionFactor, >, 0.9999, ), )]
[:, maxNumChecks, ;, if, (, (, stepsizeReductionFactor, <, 0.0001, ), ||, (, stepsizeReductionFactor, >, 0.9999, ), ), {, this, .]
[;, if, (, (, stepsizeReductionFactor, <, 0.0001, ), ||, (, stepsizeReductionFactor, >, 0.9999, ), ), {, this, ., stabilityReduction, =]
[), {, this, ., stabilityReduction, =, 0.5, ;, }, else, {, this, ., stabilityReduction, =, stepsizeReductionFactor, ;, }, }, public]
[||, (, stepsizeReductionFactor, >, 0.9999, ), ), {, this, ., stabilityReduction, =, 0.5, ;, }, else, {, this, ., stabilityReduction]
[), ||, (, stepsizeReductionFactor, >, 0.9999, ), ), {, this, ., stabilityReduction, =, 0.5, ;, }, else, {, this, .]
[<, 0.0001, ), ||, (, stepsizeReductionFactor, >, 0.9999, ), ), {, this, ., stabilityReduction, =, 0.5, ;, }, else, {]
[), ||, (, stepsizeReductionFactor, >, 0.9999, ), ), {, this, ., stabilityReduction, =, 0.5, ;, }, else, {, this, .]
[), {, this, ., stabilityReduction, =, 0.5, ;, }, else, {, this, ., stabilityReduction, =, stepsizeReductionFactor, ;, }, }, public]
[), ), {, this, ., stabilityReduction, =, 0.5, ;, }, else, {, this, ., stabilityReduction, =, stepsizeReductionFactor, ;, }, }]
[>, 0.9999, ), ), {, this, ., stabilityReduction, =, 0.5, ;, }, else, {, this, ., stabilityReduction, =, stepsizeReductionFactor, ;]
[), ), {, this, ., stabilityReduction, =, 0.5, ;, }, else, {, this, ., stabilityReduction, =, stepsizeReductionFactor, ;, }, }]
[=, 0.5, ;, }, else, {, this, ., stabilityReduction, =, stepsizeReductionFactor, ;, }, }, public, void, setControlFactors, (, final, double]
[., stabilityReduction, =, 0.5, ;, }, else, {, this, ., stabilityReduction, =, stepsizeReductionFactor, ;, }, }, public, void, setControlFactors, (]
[;, }, else, {, this, ., stabilityReduction, =, stepsizeReductionFactor, ;, }, }, public, void, setControlFactors, (, final, double, control1, ,]
[=, stepsizeReductionFactor, ;, }, }, public, void, setControlFactors, (, final, double, control1, ,, final, double, control2, ,, final, double, control3]
[., stabilityReduction, =, stepsizeReductionFactor, ;, }, }, public, void, setControlFactors, (, final, double, control1, ,, final, double, control2, ,, final]
[;, }, }, public, void, setControlFactors, (, final, double, control1, ,, final, double, control2, ,, final, double, control3, ,, final]
[), {, this, ., stepControl1, =, 0.65, ;, }, else, {, this, ., stepControl1, =, control1, ;, }, if, (]
[||, (, control1, >, 0.9999, ), ), {, this, ., stepControl1, =, 0.65, ;, }, else, {, this, ., stepControl1]
[), ||, (, control1, >, 0.9999, ), ), {, this, ., stepControl1, =, 0.65, ;, }, else, {, this, .]
[<, 0.0001, ), ||, (, control1, >, 0.9999, ), ), {, this, ., stepControl1, =, 0.65, ;, }, else, {]
[), ||, (, control1, >, 0.9999, ), ), {, this, ., stepControl1, =, 0.65, ;, }, else, {, this, .]
[), {, this, ., stepControl1, =, 0.65, ;, }, else, {, this, ., stepControl1, =, control1, ;, }, if, (]
[), ), {, this, ., stepControl1, =, 0.65, ;, }, else, {, this, ., stepControl1, =, control1, ;, }, if]
[>, 0.9999, ), ), {, this, ., stepControl1, =, 0.65, ;, }, else, {, this, ., stepControl1, =, control1, ;]
[), ), {, this, ., stepControl1, =, 0.65, ;, }, else, {, this, ., stepControl1, =, control1, ;, }, if]
[=, 0.65, ;, }, else, {, this, ., stepControl1, =, control1, ;, }, if, (, (, control2, <, 0.0001, )]
[., stepControl1, =, 0.65, ;, }, else, {, this, ., stepControl1, =, control1, ;, }, if, (, (, control2, <]
[;, }, else, {, this, ., stepControl1, =, control1, ;, }, if, (, (, control2, <, 0.0001, ), ||, (]
[=, control1, ;, }, if, (, (, control2, <, 0.0001, ), ||, (, control2, >, 0.9999, ), ), {, this]
[., stepControl1, =, control1, ;, }, if, (, (, control2, <, 0.0001, ), ||, (, control2, >, 0.9999, ), )]
[;, }, if, (, (, control2, <, 0.0001, ), ||, (, control2, >, 0.9999, ), ), {, this, ., stepControl2]
[), {, this, ., stepControl2, =, 0.94, ;, }, else, {, this, ., stepControl2, =, control2, ;, }, if, (]
[||, (, control2, >, 0.9999, ), ), {, this, ., stepControl2, =, 0.94, ;, }, else, {, this, ., stepControl2]
[), ||, (, control2, >, 0.9999, ), ), {, this, ., stepControl2, =, 0.94, ;, }, else, {, this, .]
[<, 0.0001, ), ||, (, control2, >, 0.9999, ), ), {, this, ., stepControl2, =, 0.94, ;, }, else, {]
[), ||, (, control2, >, 0.9999, ), ), {, this, ., stepControl2, =, 0.94, ;, }, else, {, this, .]
[), {, this, ., stepControl2, =, 0.94, ;, }, else, {, this, ., stepControl2, =, control2, ;, }, if, (]
[), ), {, this, ., stepControl2, =, 0.94, ;, }, else, {, this, ., stepControl2, =, control2, ;, }, if]
[>, 0.9999, ), ), {, this, ., stepControl2, =, 0.94, ;, }, else, {, this, ., stepControl2, =, control2, ;]
[), ), {, this, ., stepControl2, =, 0.94, ;, }, else, {, this, ., stepControl2, =, control2, ;, }, if]
[=, 0.94, ;, }, else, {, this, ., stepControl2, =, control2, ;, }, if, (, (, control3, <, 0.0001, )]
[., stepControl2, =, 0.94, ;, }, else, {, this, ., stepControl2, =, control2, ;, }, if, (, (, control3, <]
[;, }, else, {, this, ., stepControl2, =, control2, ;, }, if, (, (, control3, <, 0.0001, ), ||, (]
[=, control2, ;, }, if, (, (, control3, <, 0.0001, ), ||, (, control3, >, 0.9999, ), ), {, this]
[., stepControl2, =, control2, ;, }, if, (, (, control3, <, 0.0001, ), ||, (, control3, >, 0.9999, ), )]
[;, }, if, (, (, control3, <, 0.0001, ), ||, (, control3, >, 0.9999, ), ), {, this, ., stepControl3]
[), {, this, ., stepControl3, =, 0.02, ;, }, else, {, this, ., stepControl3, =, control3, ;, }, if, (]
[||, (, control3, >, 0.9999, ), ), {, this, ., stepControl3, =, 0.02, ;, }, else, {, this, ., stepControl3]
[), ||, (, control3, >, 0.9999, ), ), {, this, ., stepControl3, =, 0.02, ;, }, else, {, this, .]
[<, 0.0001, ), ||, (, control3, >, 0.9999, ), ), {, this, ., stepControl3, =, 0.02, ;, }, else, {]
[), ||, (, control3, >, 0.9999, ), ), {, this, ., stepControl3, =, 0.02, ;, }, else, {, this, .]
[), {, this, ., stepControl3, =, 0.02, ;, }, else, {, this, ., stepControl3, =, control3, ;, }, if, (]
[), ), {, this, ., stepControl3, =, 0.02, ;, }, else, {, this, ., stepControl3, =, control3, ;, }, if]
[>, 0.9999, ), ), {, this, ., stepControl3, =, 0.02, ;, }, else, {, this, ., stepControl3, =, control3, ;]
[), ), {, this, ., stepControl3, =, 0.02, ;, }, else, {, this, ., stepControl3, =, control3, ;, }, if]
[=, 0.02, ;, }, else, {, this, ., stepControl3, =, control3, ;, }, if, (, (, control4, <, 1.0001, )]
[., stepControl3, =, 0.02, ;, }, else, {, this, ., stepControl3, =, control3, ;, }, if, (, (, control4, <]
[;, }, else, {, this, ., stepControl3, =, control3, ;, }, if, (, (, control4, <, 1.0001, ), ||, (]
[=, control3, ;, }, if, (, (, control4, <, 1.0001, ), ||, (, control4, >, 999.9, ), ), {, this]
[., stepControl3, =, control3, ;, }, if, (, (, control4, <, 1.0001, ), ||, (, control4, >, 999.9, ), )]
[;, }, if, (, (, control4, <, 1.0001, ), ||, (, control4, >, 999.9, ), ), {, this, ., stepControl4]
[), {, this, ., stepControl4, =, 4.0, ;, }, else, {, this, ., stepControl4, =, control4, ;, }, }, public]
[||, (, control4, >, 999.9, ), ), {, this, ., stepControl4, =, 4.0, ;, }, else, {, this, ., stepControl4]
[), ||, (, control4, >, 999.9, ), ), {, this, ., stepControl4, =, 4.0, ;, }, else, {, this, .]
[<, 1.0001, ), ||, (, control4, >, 999.9, ), ), {, this, ., stepControl4, =, 4.0, ;, }, else, {]
[), ||, (, control4, >, 999.9, ), ), {, this, ., stepControl4, =, 4.0, ;, }, else, {, this, .]
[), {, this, ., stepControl4, =, 4.0, ;, }, else, {, this, ., stepControl4, =, control4, ;, }, }, public]
[), ), {, this, ., stepControl4, =, 4.0, ;, }, else, {, this, ., stepControl4, =, control4, ;, }, }]
[>, 999.9, ), ), {, this, ., stepControl4, =, 4.0, ;, }, else, {, this, ., stepControl4, =, control4, ;]
[), ), {, this, ., stepControl4, =, 4.0, ;, }, else, {, this, ., stepControl4, =, control4, ;, }, }]
[=, 4.0, ;, }, else, {, this, ., stepControl4, =, control4, ;, }, }, public, void, setOrderControl, (, final, int]
[., stepControl4, =, 4.0, ;, }, else, {, this, ., stepControl4, =, control4, ;, }, }, public, void, setOrderControl, (]
[;, }, else, {, this, ., stepControl4, =, control4, ;, }, }, public, void, setOrderControl, (, final, int, maximalOrder, ,]
[=, control4, ;, }, }, public, void, setOrderControl, (, final, int, maximalOrder, ,, final, double, control1, ,, final, double, control2]
[., stepControl4, =, control4, ;, }, }, public, void, setOrderControl, (, final, int, maximalOrder, ,, final, double, control1, ,, final]
[;, }, }, public, void, setOrderControl, (, final, int, maximalOrder, ,, final, double, control1, ,, final, double, control2, ), {]
[), {, this, ., maxOrder, =, 18, ;, }, if, (, (, control1, <, 0.0001, ), ||, (, control1, >]
[||, (, maximalOrder, %, 2, !=, 0, ), ), {, this, ., maxOrder, =, 18, ;, }, if, (, (]
[), ||, (, maximalOrder, %, 2, !=, 0, ), ), {, this, ., maxOrder, =, 18, ;, }, if, (]
[<=, 6, ), ||, (, maximalOrder, %, 2, !=, 0, ), ), {, this, ., maxOrder, =, 18, ;, }]
[), ||, (, maximalOrder, %, 2, !=, 0, ), ), {, this, ., maxOrder, =, 18, ;, }, if, (]
[), {, this, ., maxOrder, =, 18, ;, }, if, (, (, control1, <, 0.0001, ), ||, (, control1, >]
[), ), {, this, ., maxOrder, =, 18, ;, }, if, (, (, control1, <, 0.0001, ), ||, (, control1]
[!=, 0, ), ), {, this, ., maxOrder, =, 18, ;, }, if, (, (, control1, <, 0.0001, ), ||]
[%, 2, !=, 0, ), ), {, this, ., maxOrder, =, 18, ;, }, if, (, (, control1, <, 0.0001]
[!=, 0, ), ), {, this, ., maxOrder, =, 18, ;, }, if, (, (, control1, <, 0.0001, ), ||]
[), ), {, this, ., maxOrder, =, 18, ;, }, if, (, (, control1, <, 0.0001, ), ||, (, control1]
[=, 18, ;, }, if, (, (, control1, <, 0.0001, ), ||, (, control1, >, 0.9999, ), ), {, this]
[., maxOrder, =, 18, ;, }, if, (, (, control1, <, 0.0001, ), ||, (, control1, >, 0.9999, ), )]
[;, }, if, (, (, control1, <, 0.0001, ), ||, (, control1, >, 0.9999, ), ), {, this, ., orderControl1]
[), {, this, ., orderControl1, =, 0.8, ;, }, else, {, this, ., orderControl1, =, control1, ;, }, if, (]
[||, (, control1, >, 0.9999, ), ), {, this, ., orderControl1, =, 0.8, ;, }, else, {, this, ., orderControl1]
[), ||, (, control1, >, 0.9999, ), ), {, this, ., orderControl1, =, 0.8, ;, }, else, {, this, .]
[<, 0.0001, ), ||, (, control1, >, 0.9999, ), ), {, this, ., orderControl1, =, 0.8, ;, }, else, {]
[), ||, (, control1, >, 0.9999, ), ), {, this, ., orderControl1, =, 0.8, ;, }, else, {, this, .]
[), {, this, ., orderControl1, =, 0.8, ;, }, else, {, this, ., orderControl1, =, control1, ;, }, if, (]
[), ), {, this, ., orderControl1, =, 0.8, ;, }, else, {, this, ., orderControl1, =, control1, ;, }, if]
[>, 0.9999, ), ), {, this, ., orderControl1, =, 0.8, ;, }, else, {, this, ., orderControl1, =, control1, ;]
[), ), {, this, ., orderControl1, =, 0.8, ;, }, else, {, this, ., orderControl1, =, control1, ;, }, if]
[=, 0.8, ;, }, else, {, this, ., orderControl1, =, control1, ;, }, if, (, (, control2, <, 0.0001, )]
[., orderControl1, =, 0.8, ;, }, else, {, this, ., orderControl1, =, control1, ;, }, if, (, (, control2, <]
[;, }, else, {, this, ., orderControl1, =, control1, ;, }, if, (, (, control2, <, 0.0001, ), ||, (]
[=, control1, ;, }, if, (, (, control2, <, 0.0001, ), ||, (, control2, >, 0.9999, ), ), {, this]
[., orderControl1, =, control1, ;, }, if, (, (, control2, <, 0.0001, ), ||, (, control2, >, 0.9999, ), )]
[;, }, if, (, (, control2, <, 0.0001, ), ||, (, control2, >, 0.9999, ), ), {, this, ., orderControl2]
[), {, this, ., orderControl2, =, 0.9, ;, }, else, {, this, ., orderControl2, =, control2, ;, }, initializeArrays, (]
[||, (, control2, >, 0.9999, ), ), {, this, ., orderControl2, =, 0.9, ;, }, else, {, this, ., orderControl2]
[), ||, (, control2, >, 0.9999, ), ), {, this, ., orderControl2, =, 0.9, ;, }, else, {, this, .]
[<, 0.0001, ), ||, (, control2, >, 0.9999, ), ), {, this, ., orderControl2, =, 0.9, ;, }, else, {]
[), ||, (, control2, >, 0.9999, ), ), {, this, ., orderControl2, =, 0.9, ;, }, else, {, this, .]
[), {, this, ., orderControl2, =, 0.9, ;, }, else, {, this, ., orderControl2, =, control2, ;, }, initializeArrays, (]
[), ), {, this, ., orderControl2, =, 0.9, ;, }, else, {, this, ., orderControl2, =, control2, ;, }, initializeArrays]
[>, 0.9999, ), ), {, this, ., orderControl2, =, 0.9, ;, }, else, {, this, ., orderControl2, =, control2, ;]
[), ), {, this, ., orderControl2, =, 0.9, ;, }, else, {, this, ., orderControl2, =, control2, ;, }, initializeArrays]
[=, 0.9, ;, }, else, {, this, ., orderControl2, =, control2, ;, }, initializeArrays, (, ), ;, }, @, Override]
[., orderControl2, =, 0.9, ;, }, else, {, this, ., orderControl2, =, control2, ;, }, initializeArrays, (, ), ;, }]
[;, }, else, {, this, ., orderControl2, =, control2, ;, }, initializeArrays, (, ), ;, }, @, Override, public, void]
[=, control2, ;, }, initializeArrays, (, ), ;, }, @, Override, public, void, addStepHandler, (, final, StepHandler, handler, ), {]
[., orderControl2, =, control2, ;, }, initializeArrays, (, ), ;, }, @, Override, public, void, addStepHandler, (, final, StepHandler, handler]
[;, }, initializeArrays, (, ), ;, }, @, Override, public, void, addStepHandler, (, final, StepHandler, handler, ), {, super, .]
[;, }, @, Override, public, void, addStepHandler, (, final, StepHandler, handler, ), {, super, ., addStepHandler, (, handler, ), ;]
[;, initializeArrays, (, ), ;, }, @, Override, public, void, addEventHandler, (, final, EventHandler, function, ,, final, double, maxCheckInterval, ,]
[., addStepHandler, (, handler, ), ;, initializeArrays, (, ), ;, }, @, Override, public, void, addEventHandler, (, final, EventHandler, function]
[), ;, initializeArrays, (, ), ;, }, @, Override, public, void, addEventHandler, (, final, EventHandler, function, ,, final, double, maxCheckInterval]
[;, }, @, Override, public, void, addEventHandler, (, final, EventHandler, function, ,, final, double, maxCheckInterval, ,, final, double, convergence, ,]
[;, initializeArrays, (, ), ;, }, private, void, initializeArrays, (, ), {, final, int, size, =, maxOrder, /, 2, ;]
[., addEventHandler, (, function, ,, maxCheckInterval, ,, convergence, ,, maxIterationCount, ,, solver, ), ;, initializeArrays, (, ), ;, }, private]
[,, maxCheckInterval, ,, convergence, ,, maxIterationCount, ,, solver, ), ;, initializeArrays, (, ), ;, }, private, void, initializeArrays, (, )]
[,, convergence, ,, maxIterationCount, ,, solver, ), ;, initializeArrays, (, ), ;, }, private, void, initializeArrays, (, ), {, final]
[,, maxIterationCount, ,, solver, ), ;, initializeArrays, (, ), ;, }, private, void, initializeArrays, (, ), {, final, int, size]
[,, solver, ), ;, initializeArrays, (, ), ;, }, private, void, initializeArrays, (, ), {, final, int, size, =, maxOrder]
[), ;, initializeArrays, (, ), ;, }, private, void, initializeArrays, (, ), {, final, int, size, =, maxOrder, /, 2]
[;, }, private, void, initializeArrays, (, ), {, final, int, size, =, maxOrder, /, 2, ;, if, (, (, sequence]
[;, if, (, (, sequence, ==, null, ), ||, (, sequence, ., length, !=, size, ), ), {, sequence, =]
[/, 2, ;, if, (, (, sequence, ==, null, ), ||, (, sequence, ., length, !=, size, ), ), {]
[;, if, (, (, sequence, ==, null, ), ||, (, sequence, ., length, !=, size, ), ), {, sequence, =]
[), {, sequence, =, new, int, [, size, ], ;, costPerStep, =, new, int, [, size, ], ;, coeff, =]
[||, (, sequence, ., length, !=, size, ), ), {, sequence, =, new, int, [, size, ], ;, costPerStep, =]
[), ||, (, sequence, ., length, !=, size, ), ), {, sequence, =, new, int, [, size, ], ;, costPerStep]
[==, null, ), ||, (, sequence, ., length, !=, size, ), ), {, sequence, =, new, int, [, size, ]]
[), ||, (, sequence, ., length, !=, size, ), ), {, sequence, =, new, int, [, size, ], ;, costPerStep]
[), {, sequence, =, new, int, [, size, ], ;, costPerStep, =, new, int, [, size, ], ;, coeff, =]
[), ), {, sequence, =, new, int, [, size, ], ;, costPerStep, =, new, int, [, size, ], ;, coeff]
[!=, size, ), ), {, sequence, =, new, int, [, size, ], ;, costPerStep, =, new, int, [, size, ]]
[., length, !=, size, ), ), {, sequence, =, new, int, [, size, ], ;, costPerStep, =, new, int, []
[), ), {, sequence, =, new, int, [, size, ], ;, costPerStep, =, new, int, [, size, ], ;, coeff]
[=, new, int, [, size, ], ;, costPerStep, =, new, int, [, size, ], ;, coeff, =, new, double, []
[;, costPerStep, =, new, int, [, size, ], ;, coeff, =, new, double, [, size, ], [, ], ;, costPerTimeUnit]
[], ;, costPerStep, =, new, int, [, size, ], ;, coeff, =, new, double, [, size, ], [, ], ;]
[=, new, int, [, size, ], ;, coeff, =, new, double, [, size, ], [, ], ;, costPerTimeUnit, =, new]
[;, coeff, =, new, double, [, size, ], [, ], ;, costPerTimeUnit, =, new, double, [, size, ], ;, optimalStep]
[], ;, coeff, =, new, double, [, size, ], [, ], ;, costPerTimeUnit, =, new, double, [, size, ], ;]
[=, new, double, [, size, ], [, ], ;, costPerTimeUnit, =, new, double, [, size, ], ;, optimalStep, =, new]
[;, costPerTimeUnit, =, new, double, [, size, ], ;, optimalStep, =, new, double, [, size, ], ;, }, for, (]
[], [, ], ;, costPerTimeUnit, =, new, double, [, size, ], ;, optimalStep, =, new, double, [, size, ], ;]
[=, new, double, [, size, ], ;, optimalStep, =, new, double, [, size, ], ;, }, for, (, int, k]
[;, optimalStep, =, new, double, [, size, ], ;, }, for, (, int, k, =, 0, ;, k, <, size]
[], ;, optimalStep, =, new, double, [, size, ], ;, }, for, (, int, k, =, 0, ;, k, <]
[=, new, double, [, size, ], ;, }, for, (, int, k, =, 0, ;, k, <, size, ;, ++]
[;, }, for, (, int, k, =, 0, ;, k, <, size, ;, ++, k, ), {, sequence, [, k]
[], ;, }, for, (, int, k, =, 0, ;, k, <, size, ;, ++, k, ), {, sequence, []
[;, k, <, size, ;, ++, k, ), {, sequence, [, k, ], =, 4, *, k, +, 2, ;]
[;, ++, k, ), {, sequence, [, k, ], =, 4, *, k, +, 2, ;, }, costPerStep, [, 0]
[<, size, ;, ++, k, ), {, sequence, [, k, ], =, 4, *, k, +, 2, ;, }, costPerStep]
[;, ++, k, ), {, sequence, [, k, ], =, 4, *, k, +, 2, ;, }, costPerStep, [, 0]
[), {, sequence, [, k, ], =, 4, *, k, +, 2, ;, }, costPerStep, [, 0, ], =, sequence]
[), {, sequence, [, k, ], =, 4, *, k, +, 2, ;, }, costPerStep, [, 0, ], =, sequence]
[=, 4, *, k, +, 2, ;, }, costPerStep, [, 0, ], =, sequence, [, 0, ], +, 1, ;]
[[, k, ], =, 4, *, k, +, 2, ;, }, costPerStep, [, 0, ], =, sequence, [, 0, ]]
[], =, 4, *, k, +, 2, ;, }, costPerStep, [, 0, ], =, sequence, [, 0, ], +, 1]
[;, }, costPerStep, [, 0, ], =, sequence, [, 0, ], +, 1, ;, for, (, int, k, =, 1]
[+, 2, ;, }, costPerStep, [, 0, ], =, sequence, [, 0, ], +, 1, ;, for, (, int, k]
[*, k, +, 2, ;, }, costPerStep, [, 0, ], =, sequence, [, 0, ], +, 1, ;, for, (]
[+, 2, ;, }, costPerStep, [, 0, ], =, sequence, [, 0, ], +, 1, ;, for, (, int, k]
[;, }, costPerStep, [, 0, ], =, sequence, [, 0, ], +, 1, ;, for, (, int, k, =, 1]
[=, sequence, [, 0, ], +, 1, ;, for, (, int, k, =, 1, ;, k, <, size, ;, ++]
[[, 0, ], =, sequence, [, 0, ], +, 1, ;, for, (, int, k, =, 1, ;, k, <]
[], =, sequence, [, 0, ], +, 1, ;, for, (, int, k, =, 1, ;, k, <, size, ;]
[;, for, (, int, k, =, 1, ;, k, <, size, ;, ++, k, ), {, costPerStep, [, k, ]]
[+, 1, ;, for, (, int, k, =, 1, ;, k, <, size, ;, ++, k, ), {, costPerStep, []
[[, 0, ], +, 1, ;, for, (, int, k, =, 1, ;, k, <, size, ;, ++, k, )]
[], +, 1, ;, for, (, int, k, =, 1, ;, k, <, size, ;, ++, k, ), {, costPerStep]
[;, for, (, int, k, =, 1, ;, k, <, size, ;, ++, k, ), {, costPerStep, [, k, ]]
[;, k, <, size, ;, ++, k, ), {, costPerStep, [, k, ], =, costPerStep, [, k, -, 1, ]]
[;, ++, k, ), {, costPerStep, [, k, ], =, costPerStep, [, k, -, 1, ], +, sequence, [, k]
[<, size, ;, ++, k, ), {, costPerStep, [, k, ], =, costPerStep, [, k, -, 1, ], +, sequence]
[;, ++, k, ), {, costPerStep, [, k, ], =, costPerStep, [, k, -, 1, ], +, sequence, [, k]
[), {, costPerStep, [, k, ], =, costPerStep, [, k, -, 1, ], +, sequence, [, k, ], ;, }]
[), {, costPerStep, [, k, ], =, costPerStep, [, k, -, 1, ], +, sequence, [, k, ], ;, }]
[=, costPerStep, [, k, -, 1, ], +, sequence, [, k, ], ;, }, for, (, int, k, =, 0]
[[, k, ], =, costPerStep, [, k, -, 1, ], +, sequence, [, k, ], ;, }, for, (, int]
[], =, costPerStep, [, k, -, 1, ], +, sequence, [, k, ], ;, }, for, (, int, k, =]
[;, }, for, (, int, k, =, 0, ;, k, <, size, ;, ++, k, ), {, coeff, [, k]
[+, sequence, [, k, ], ;, }, for, (, int, k, =, 0, ;, k, <, size, ;, ++, k]
[[, k, -, 1, ], +, sequence, [, k, ], ;, }, for, (, int, k, =, 0, ;, k]
[], +, sequence, [, k, ], ;, }, for, (, int, k, =, 0, ;, k, <, size, ;, ++]
[-, 1, ], +, sequence, [, k, ], ;, }, for, (, int, k, =, 0, ;, k, <, size]
[], +, sequence, [, k, ], ;, }, for, (, int, k, =, 0, ;, k, <, size, ;, ++]
[;, }, for, (, int, k, =, 0, ;, k, <, size, ;, ++, k, ), {, coeff, [, k]
[[, k, ], ;, }, for, (, int, k, =, 0, ;, k, <, size, ;, ++, k, ), {]
[], ;, }, for, (, int, k, =, 0, ;, k, <, size, ;, ++, k, ), {, coeff, []
[;, k, <, size, ;, ++, k, ), {, coeff, [, k, ], =, (, k, >, 0, ), ?]
[;, ++, k, ), {, coeff, [, k, ], =, (, k, >, 0, ), ?, new, double, [, k]
[<, size, ;, ++, k, ), {, coeff, [, k, ], =, (, k, >, 0, ), ?, new, double]
[;, ++, k, ), {, coeff, [, k, ], =, (, k, >, 0, ), ?, new, double, [, k]
[), {, coeff, [, k, ], =, (, k, >, 0, ), ?, new, double, [, k, ], :, null]
[), {, coeff, [, k, ], =, (, k, >, 0, ), ?, new, double, [, k, ], :, null]
[=, (, k, >, 0, ), ?, new, double, [, k, ], :, null, ;, for, (, int, l, =]
[[, k, ], =, (, k, >, 0, ), ?, new, double, [, k, ], :, null, ;, for, (]
[], =, (, k, >, 0, ), ?, new, double, [, k, ], :, null, ;, for, (, int, l]
[;, for, (, int, l, =, 0, ;, l, <, k, ;, ++, l, ), {, final, double, ratio, =]
[?, new, double, [, k, ], :, null, ;, for, (, int, l, =, 0, ;, l, <, k, ;]
[), ?, new, double, [, k, ], :, null, ;, for, (, int, l, =, 0, ;, l, <, k]
[>, 0, ), ?, new, double, [, k, ], :, null, ;, for, (, int, l, =, 0, ;, l]
[), ?, new, double, [, k, ], :, null, ;, for, (, int, l, =, 0, ;, l, <, k]
[:, null, ;, for, (, int, l, =, 0, ;, l, <, k, ;, ++, l, ), {, final, double]
[], :, null, ;, for, (, int, l, =, 0, ;, l, <, k, ;, ++, l, ), {, final]
[;, for, (, int, l, =, 0, ;, l, <, k, ;, ++, l, ), {, final, double, ratio, =]
[;, l, <, k, ;, ++, l, ), {, final, double, ratio, =, (, (, double, ), sequence, [, k]
[;, ++, l, ), {, final, double, ratio, =, (, (, double, ), sequence, [, k, ], ), /, sequence]
[<, k, ;, ++, l, ), {, final, double, ratio, =, (, (, double, ), sequence, [, k, ], )]
[;, ++, l, ), {, final, double, ratio, =, (, (, double, ), sequence, [, k, ], ), /, sequence]
[), {, final, double, ratio, =, (, (, double, ), sequence, [, k, ], ), /, sequence, [, k, -]
[), {, final, double, ratio, =, (, (, double, ), sequence, [, k, ], ), /, sequence, [, k, -]
[;, coeff, [, k, ], [, l, ], =, 1.0, /, (, ratio, *, ratio, -, 1.0, ), ;, }]
[/, sequence, [, k, -, l, -, 1, ], ;, coeff, [, k, ], [, l, ], =, 1.0, /]
[), /, sequence, [, k, -, l, -, 1, ], ;, coeff, [, k, ], [, l, ], =, 1.0]
[), /, sequence, [, k, -, l, -, 1, ], ;, coeff, [, k, ], [, l, ], =, 1.0]
[[, k, ], ), /, sequence, [, k, -, l, -, 1, ], ;, coeff, [, k, ], [, l]
[], ), /, sequence, [, k, -, l, -, 1, ], ;, coeff, [, k, ], [, l, ], =]
[;, coeff, [, k, ], [, l, ], =, 1.0, /, (, ratio, *, ratio, -, 1.0, ), ;, }]
[[, k, -, l, -, 1, ], ;, coeff, [, k, ], [, l, ], =, 1.0, /, (, ratio]
[], ;, coeff, [, k, ], [, l, ], =, 1.0, /, (, ratio, *, ratio, -, 1.0, ), ;]
[-, 1, ], ;, coeff, [, k, ], [, l, ], =, 1.0, /, (, ratio, *, ratio, -, 1.0]
[-, l, -, 1, ], ;, coeff, [, k, ], [, l, ], =, 1.0, /, (, ratio, *, ratio]
[-, 1, ], ;, coeff, [, k, ], [, l, ], =, 1.0, /, (, ratio, *, ratio, -, 1.0]
[], ;, coeff, [, k, ], [, l, ], =, 1.0, /, (, ratio, *, ratio, -, 1.0, ), ;]
[=, 1.0, /, (, ratio, *, ratio, -, 1.0, ), ;, }, }, }, public, void, setInterpolationControl, (, final, boolean]
[[, l, ], =, 1.0, /, (, ratio, *, ratio, -, 1.0, ), ;, }, }, }, public, void, setInterpolationControl]
[[, k, ], [, l, ], =, 1.0, /, (, ratio, *, ratio, -, 1.0, ), ;, }, }, }]
[], [, l, ], =, 1.0, /, (, ratio, *, ratio, -, 1.0, ), ;, }, }, }, public, void]
[], =, 1.0, /, (, ratio, *, ratio, -, 1.0, ), ;, }, }, }, public, void, setInterpolationControl, (, final]
[;, }, }, }, public, void, setInterpolationControl, (, final, boolean, useInterpolationErrorForControl, ,, final, int, mudifControlParameter, ), {, this, ., useInterpolationError]
[/, (, ratio, *, ratio, -, 1.0, ), ;, }, }, }, public, void, setInterpolationControl, (, final, boolean, useInterpolationErrorForControl, ,]
[;, }, }, }, public, void, setInterpolationControl, (, final, boolean, useInterpolationErrorForControl, ,, final, int, mudifControlParameter, ), {, this, ., useInterpolationError]
[), ;, }, }, }, public, void, setInterpolationControl, (, final, boolean, useInterpolationErrorForControl, ,, final, int, mudifControlParameter, ), {, this, .]
[-, 1.0, ), ;, }, }, }, public, void, setInterpolationControl, (, final, boolean, useInterpolationErrorForControl, ,, final, int, mudifControlParameter, ), {]
[*, ratio, -, 1.0, ), ;, }, }, }, public, void, setInterpolationControl, (, final, boolean, useInterpolationErrorForControl, ,, final, int, mudifControlParameter]
[-, 1.0, ), ;, }, }, }, public, void, setInterpolationControl, (, final, boolean, useInterpolationErrorForControl, ,, final, int, mudifControlParameter, ), {]
[), ;, }, }, }, public, void, setInterpolationControl, (, final, boolean, useInterpolationErrorForControl, ,, final, int, mudifControlParameter, ), {, this, .]
[=, useInterpolationErrorForControl, ;, if, (, (, mudifControlParameter, <=, 0, ), ||, (, mudifControlParameter, >=, 7, ), ), {, this, .]
[., useInterpolationError, =, useInterpolationErrorForControl, ;, if, (, (, mudifControlParameter, <=, 0, ), ||, (, mudifControlParameter, >=, 7, ), ), {]
[;, if, (, (, mudifControlParameter, <=, 0, ), ||, (, mudifControlParameter, >=, 7, ), ), {, this, ., mudif, =]
[), {, this, ., mudif, =, 4, ;, }, else, {, this, ., mudif, =, mudifControlParameter, ;, }, }, private]
[||, (, mudifControlParameter, >=, 7, ), ), {, this, ., mudif, =, 4, ;, }, else, {, this, ., mudif]
[), ||, (, mudifControlParameter, >=, 7, ), ), {, this, ., mudif, =, 4, ;, }, else, {, this, .]
[<=, 0, ), ||, (, mudifControlParameter, >=, 7, ), ), {, this, ., mudif, =, 4, ;, }, else, {]
[), ||, (, mudifControlParameter, >=, 7, ), ), {, this, ., mudif, =, 4, ;, }, else, {, this, .]
[), {, this, ., mudif, =, 4, ;, }, else, {, this, ., mudif, =, mudifControlParameter, ;, }, }, private]
[), ), {, this, ., mudif, =, 4, ;, }, else, {, this, ., mudif, =, mudifControlParameter, ;, }, }]
[>=, 7, ), ), {, this, ., mudif, =, 4, ;, }, else, {, this, ., mudif, =, mudifControlParameter, ;]
[), ), {, this, ., mudif, =, 4, ;, }, else, {, this, ., mudif, =, mudifControlParameter, ;, }, }]
[=, 4, ;, }, else, {, this, ., mudif, =, mudifControlParameter, ;, }, }, private, void, rescale, (, final, double]
[., mudif, =, 4, ;, }, else, {, this, ., mudif, =, mudifControlParameter, ;, }, }, private, void, rescale, (]
[;, }, else, {, this, ., mudif, =, mudifControlParameter, ;, }, }, private, void, rescale, (, final, double, [, ]]
[=, mudifControlParameter, ;, }, }, private, void, rescale, (, final, double, [, ], y1, ,, final, double, [, ], y2]
[., mudif, =, mudifControlParameter, ;, }, }, private, void, rescale, (, final, double, [, ], y1, ,, final, double, []
[;, }, }, private, void, rescale, (, final, double, [, ], y1, ,, final, double, [, ], y2, ,, final]
[), {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, final]
[==, null, ), {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, )]
[), {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, final]
[;, i, <, scale, ., length, ;, ++, i, ), {, final, double, yi, =, FastMath, ., max, (, FastMath]
[;, ++, i, ), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs, (, y1, [, i]
[<, scale, ., length, ;, ++, i, ), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs]
[;, ++, i, ), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs, (, y1, [, i]
[., length, ;, ++, i, ), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs, (, y1]
[), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs, (, y1, [, i, ], ), ,]
[), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs, (, y1, [, i, ], ), ,]
[;, scale, [, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yi, ;, }, }, else, {, for, (, int, i]
[., max, (, FastMath, ., abs, (, y1, [, i, ], ), ,, FastMath, ., abs, (, y2, [, i]
[,, FastMath, ., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance]
[., abs, (, y1, [, i, ], ), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;]
[), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ], =, scalAbsoluteTolerance, +]
[[, i, ], ), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ]]
[], ), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ], =, scalAbsoluteTolerance]
[), ;, scale, [, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yi, ;, }, }, else, {, for, (, int]
[., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yi]
[), ), ;, scale, [, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yi, ;, }, }, else, {, for, (]
[[, i, ], ), ), ;, scale, [, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yi, ;, }, }, else]
[], ), ), ;, scale, [, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yi, ;, }, }, else, {, for]
[=, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yi, ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <]
[[, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yi, ;, }, }, else, {, for, (, int, i, =, 0]
[], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yi, ;, }, }, else, {, for, (, int, i, =, 0, ;, i]
[;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i]
[+, scalRelativeTolerance, *, yi, ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, scale, .]
[;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i]
[*, yi, ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;]
[;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i]
[;, i, <, scale, ., length, ;, ++, i, ), {, final, double, yi, =, FastMath, ., max, (, FastMath]
[;, ++, i, ), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs, (, y1, [, i]
[<, scale, ., length, ;, ++, i, ), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs]
[;, ++, i, ), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs, (, y1, [, i]
[., length, ;, ++, i, ), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs, (, y1]
[), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs, (, y1, [, i, ], ), ,]
[), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs, (, y1, [, i, ], ), ,]
[;, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ], *, yi, ;, }, }]
[., max, (, FastMath, ., abs, (, y1, [, i, ], ), ,, FastMath, ., abs, (, y2, [, i]
[,, FastMath, ., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ], =, vecAbsoluteTolerance, [, i]
[., abs, (, y1, [, i, ], ), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;]
[), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ], =, vecAbsoluteTolerance, []
[[, i, ], ), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ]]
[], ), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ], =, vecAbsoluteTolerance]
[), ;, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ], *, yi, ;, }]
[., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +]
[), ), ;, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ], *, yi, ;]
[[, i, ], ), ), ;, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ]]
[], ), ), ;, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ], *, yi]
[=, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ], *, yi, ;, }, }, }, private, boolean, tryStep, (]
[[, i, ], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ], *, yi, ;, }, }, }, private]
[], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ], *, yi, ;, }, }, }, private, boolean, tryStep]
[;, }, }, }, private, boolean, tryStep, (, final, double, t0, ,, final, double, [, ], y0, ,, final, double]
[+, vecRelativeTolerance, [, i, ], *, yi, ;, }, }, }, private, boolean, tryStep, (, final, double, t0, ,, final]
[[, i, ], +, vecRelativeTolerance, [, i, ], *, yi, ;, }, }, }, private, boolean, tryStep, (, final, double]
[], +, vecRelativeTolerance, [, i, ], *, yi, ;, }, }, }, private, boolean, tryStep, (, final, double, t0, ,]
[;, }, }, }, private, boolean, tryStep, (, final, double, t0, ,, final, double, [, ], y0, ,, final, double]
[*, yi, ;, }, }, }, private, boolean, tryStep, (, final, double, t0, ,, final, double, [, ], y0, ,]
[[, i, ], *, yi, ;, }, }, }, private, boolean, tryStep, (, final, double, t0, ,, final, double, []
[], *, yi, ;, }, }, }, private, boolean, tryStep, (, final, double, t0, ,, final, double, [, ], y0]
[;, }, }, }, private, boolean, tryStep, (, final, double, t0, ,, final, double, [, ], y0, ,, final, double]
[;, final, double, subStep, =, step, /, n, ;, final, double, subStep2, =, 2, *, subStep, ;, double, t, =]
[[, k, ], ;, final, double, subStep, =, step, /, n, ;, final, double, subStep2, =, 2, *, subStep, ;]
[], ;, final, double, subStep, =, step, /, n, ;, final, double, subStep2, =, 2, *, subStep, ;, double, t]
[;, final, double, subStep2, =, 2, *, subStep, ;, double, t, =, t0, +, subStep, ;, for, (, int, i]
[/, n, ;, final, double, subStep2, =, 2, *, subStep, ;, double, t, =, t0, +, subStep, ;, for, (]
[;, final, double, subStep2, =, 2, *, subStep, ;, double, t, =, t0, +, subStep, ;, for, (, int, i]
[;, double, t, =, t0, +, subStep, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length]
[*, subStep, ;, double, t, =, t0, +, subStep, ;, for, (, int, i, =, 0, ;, i, <, y0]
[;, double, t, =, t0, +, subStep, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length]
[;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, yTmp, []
[+, subStep, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, yTmp, []
[;, i, <, y0, ., length, ;, ++, i, ), {, yTmp, [, i, ], =, y0, [, i, ]]
[;, ++, i, ), {, yTmp, [, i, ], =, y0, [, i, ], ;, yEnd, [, i, ], =]
[<, y0, ., length, ;, ++, i, ), {, yTmp, [, i, ], =, y0, [, i, ], ;, yEnd]
[;, ++, i, ), {, yTmp, [, i, ], =, y0, [, i, ], ;, yEnd, [, i, ], =]
[., length, ;, ++, i, ), {, yTmp, [, i, ], =, y0, [, i, ], ;, yEnd, [, i]
[), {, yTmp, [, i, ], =, y0, [, i, ], ;, yEnd, [, i, ], =, y0, [, i]
[), {, yTmp, [, i, ], =, y0, [, i, ], ;, yEnd, [, i, ], =, y0, [, i]
[=, y0, [, i, ], ;, yEnd, [, i, ], =, y0, [, i, ], +, subStep, *, f, []
[[, i, ], =, y0, [, i, ], ;, yEnd, [, i, ], =, y0, [, i, ], +, subStep]
[], =, y0, [, i, ], ;, yEnd, [, i, ], =, y0, [, i, ], +, subStep, *, f]
[;, yEnd, [, i, ], =, y0, [, i, ], +, subStep, *, f, [, 0, ], [, i, ]]
[[, i, ], ;, yEnd, [, i, ], =, y0, [, i, ], +, subStep, *, f, [, 0, ]]
[], ;, yEnd, [, i, ], =, y0, [, i, ], +, subStep, *, f, [, 0, ], [, i]
[=, y0, [, i, ], +, subStep, *, f, [, 0, ], [, i, ], ;, }, computeDerivatives, (, t]
[[, i, ], =, y0, [, i, ], +, subStep, *, f, [, 0, ], [, i, ], ;, }]
[], =, y0, [, i, ], +, subStep, *, f, [, 0, ], [, i, ], ;, }, computeDerivatives, (]
[;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, 1, ], ), ;, for, (, int, j, =, 1]
[+, subStep, *, f, [, 0, ], [, i, ], ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, []
[[, i, ], +, subStep, *, f, [, 0, ], [, i, ], ;, }, computeDerivatives, (, t, ,, yEnd]
[], +, subStep, *, f, [, 0, ], [, i, ], ;, }, computeDerivatives, (, t, ,, yEnd, ,, f]
[;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, 1, ], ), ;, for, (, int, j, =, 1]
[*, f, [, 0, ], [, i, ], ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, 1, ]]
[;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, 1, ], ), ;, for, (, int, j, =, 1]
[[, i, ], ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, 1, ], ), ;, for, (, int]
[[, 0, ], [, i, ], ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, 1, ], ), ;]
[], [, i, ], ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, 1, ], ), ;, for, (]
[], ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, 1, ], ), ;, for, (, int, j, =]
[;, for, (, int, j, =, 1, ;, j, <, n, ;, ++, j, ), {, if, (, 2, *]
[,, yEnd, ,, f, [, 1, ], ), ;, for, (, int, j, =, 1, ;, j, <, n, ;]
[,, f, [, 1, ], ), ;, for, (, int, j, =, 1, ;, j, <, n, ;, ++, j]
[), ;, for, (, int, j, =, 1, ;, j, <, n, ;, ++, j, ), {, if, (, 2]
[[, 1, ], ), ;, for, (, int, j, =, 1, ;, j, <, n, ;, ++, j, ), {]
[], ), ;, for, (, int, j, =, 1, ;, j, <, n, ;, ++, j, ), {, if, (]
[;, j, <, n, ;, ++, j, ), {, if, (, 2, *, j, ==, n, ), {, System, .]
[;, ++, j, ), {, if, (, 2, *, j, ==, n, ), {, System, ., arraycopy, (, yEnd, ,]
[<, n, ;, ++, j, ), {, if, (, 2, *, j, ==, n, ), {, System, ., arraycopy, (]
[;, ++, j, ), {, if, (, 2, *, j, ==, n, ), {, System, ., arraycopy, (, yEnd, ,]
[), {, if, (, 2, *, j, ==, n, ), {, System, ., arraycopy, (, yEnd, ,, 0, ,, yMiddle]
[), {, if, (, 2, *, j, ==, n, ), {, System, ., arraycopy, (, yEnd, ,, 0, ,, yMiddle]
[), {, System, ., arraycopy, (, yEnd, ,, 0, ,, yMiddle, ,, 0, ,, y0, ., length, ), ;, }]
[==, n, ), {, System, ., arraycopy, (, yEnd, ,, 0, ,, yMiddle, ,, 0, ,, y0, ., length, )]
[*, j, ==, n, ), {, System, ., arraycopy, (, yEnd, ,, 0, ,, yMiddle, ,, 0, ,, y0, .]
[==, n, ), {, System, ., arraycopy, (, yEnd, ,, 0, ,, yMiddle, ,, 0, ,, y0, ., length, )]
[), {, System, ., arraycopy, (, yEnd, ,, 0, ,, yMiddle, ,, 0, ,, y0, ., length, ), ;, }]
[;, }, t, +=, subStep, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++]
[., arraycopy, (, yEnd, ,, 0, ,, yMiddle, ,, 0, ,, y0, ., length, ), ;, }, t, +=, subStep]
[,, 0, ,, yMiddle, ,, 0, ,, y0, ., length, ), ;, }, t, +=, subStep, ;, for, (, int]
[,, yMiddle, ,, 0, ,, y0, ., length, ), ;, }, t, +=, subStep, ;, for, (, int, i, =]
[,, 0, ,, y0, ., length, ), ;, }, t, +=, subStep, ;, for, (, int, i, =, 0, ;]
[,, y0, ., length, ), ;, }, t, +=, subStep, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, }, t, +=, subStep, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;]
[., length, ), ;, }, t, +=, subStep, ;, for, (, int, i, =, 0, ;, i, <, y0, .]
[+=, subStep, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, final, double]
[;, i, <, y0, ., length, ;, ++, i, ), {, final, double, middle, =, yEnd, [, i, ], ;]
[;, ++, i, ), {, final, double, middle, =, yEnd, [, i, ], ;, yEnd, [, i, ], =, yTmp]
[<, y0, ., length, ;, ++, i, ), {, final, double, middle, =, yEnd, [, i, ], ;, yEnd, []
[;, ++, i, ), {, final, double, middle, =, yEnd, [, i, ], ;, yEnd, [, i, ], =, yTmp]
[., length, ;, ++, i, ), {, final, double, middle, =, yEnd, [, i, ], ;, yEnd, [, i, ]]
[), {, final, double, middle, =, yEnd, [, i, ], ;, yEnd, [, i, ], =, yTmp, [, i, ]]
[), {, final, double, middle, =, yEnd, [, i, ], ;, yEnd, [, i, ], =, yTmp, [, i, ]]
[;, yEnd, [, i, ], =, yTmp, [, i, ], +, subStep2, *, f, [, j, ], [, i, ]]
[[, i, ], ;, yEnd, [, i, ], =, yTmp, [, i, ], +, subStep2, *, f, [, j, ]]
[], ;, yEnd, [, i, ], =, yTmp, [, i, ], +, subStep2, *, f, [, j, ], [, i]
[=, yTmp, [, i, ], +, subStep2, *, f, [, j, ], [, i, ], ;, yTmp, [, i, ]]
[[, i, ], =, yTmp, [, i, ], +, subStep2, *, f, [, j, ], [, i, ], ;, yTmp]
[], =, yTmp, [, i, ], +, subStep2, *, f, [, j, ], [, i, ], ;, yTmp, [, i]
[;, yTmp, [, i, ], =, middle, ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, j, +, 1]
[+, subStep2, *, f, [, j, ], [, i, ], ;, yTmp, [, i, ], =, middle, ;, }, computeDerivatives]
[[, i, ], +, subStep2, *, f, [, j, ], [, i, ], ;, yTmp, [, i, ], =, middle]
[], +, subStep2, *, f, [, j, ], [, i, ], ;, yTmp, [, i, ], =, middle, ;, }]
[;, yTmp, [, i, ], =, middle, ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, j, +, 1]
[*, f, [, j, ], [, i, ], ;, yTmp, [, i, ], =, middle, ;, }, computeDerivatives, (, t]
[;, yTmp, [, i, ], =, middle, ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, j, +, 1]
[[, i, ], ;, yTmp, [, i, ], =, middle, ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, []
[[, j, ], [, i, ], ;, yTmp, [, i, ], =, middle, ;, }, computeDerivatives, (, t, ,, yEnd]
[], [, i, ], ;, yTmp, [, i, ], =, middle, ;, }, computeDerivatives, (, t, ,, yEnd, ,, f]
[], ;, yTmp, [, i, ], =, middle, ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, j, +]
[=, middle, ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, j, +, 1, ], ), ;, if, (]
[[, i, ], =, middle, ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, j, +, 1, ], )]
[], =, middle, ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, j, +, 1, ], ), ;, if]
[;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, j, +, 1, ], ), ;, if, (, performTest, &&]
[;, if, (, performTest, &&, (, j, <=, maxChecks, ), &&, (, k, <, maxIter, ), ), {, double, initialNorm]
[,, yEnd, ,, f, [, j, +, 1, ], ), ;, if, (, performTest, &&, (, j, <=, maxChecks, )]
[,, f, [, j, +, 1, ], ), ;, if, (, performTest, &&, (, j, <=, maxChecks, ), &&, (]
[), ;, if, (, performTest, &&, (, j, <=, maxChecks, ), &&, (, k, <, maxIter, ), ), {, double]
[[, j, +, 1, ], ), ;, if, (, performTest, &&, (, j, <=, maxChecks, ), &&, (, k, <]
[], ), ;, if, (, performTest, &&, (, j, <=, maxChecks, ), &&, (, k, <, maxIter, ), ), {]
[+, 1, ], ), ;, if, (, performTest, &&, (, j, <=, maxChecks, ), &&, (, k, <, maxIter, )]
[], ), ;, if, (, performTest, &&, (, j, <=, maxChecks, ), &&, (, k, <, maxIter, ), ), {]
[), {, double, initialNorm, =, 0.0, ;, for, (, int, l, =, 0, ;, l, <, scale, ., length, ;]
[&&, (, k, <, maxIter, ), ), {, double, initialNorm, =, 0.0, ;, for, (, int, l, =, 0, ;]
[&&, (, j, <=, maxChecks, ), &&, (, k, <, maxIter, ), ), {, double, initialNorm, =, 0.0, ;, for]
[&&, (, k, <, maxIter, ), ), {, double, initialNorm, =, 0.0, ;, for, (, int, l, =, 0, ;]
[), &&, (, k, <, maxIter, ), ), {, double, initialNorm, =, 0.0, ;, for, (, int, l, =, 0]
[<=, maxChecks, ), &&, (, k, <, maxIter, ), ), {, double, initialNorm, =, 0.0, ;, for, (, int, l]
[), &&, (, k, <, maxIter, ), ), {, double, initialNorm, =, 0.0, ;, for, (, int, l, =, 0]
[), {, double, initialNorm, =, 0.0, ;, for, (, int, l, =, 0, ;, l, <, scale, ., length, ;]
[), ), {, double, initialNorm, =, 0.0, ;, for, (, int, l, =, 0, ;, l, <, scale, ., length]
[<, maxIter, ), ), {, double, initialNorm, =, 0.0, ;, for, (, int, l, =, 0, ;, l, <, scale]
[), ), {, double, initialNorm, =, 0.0, ;, for, (, int, l, =, 0, ;, l, <, scale, ., length]
[;, for, (, int, l, =, 0, ;, l, <, scale, ., length, ;, ++, l, ), {, final, double]
[;, l, <, scale, ., length, ;, ++, l, ), {, final, double, ratio, =, f, [, 0, ], []
[;, ++, l, ), {, final, double, ratio, =, f, [, 0, ], [, l, ], /, scale, [, l]
[<, scale, ., length, ;, ++, l, ), {, final, double, ratio, =, f, [, 0, ], [, l, ]]
[;, ++, l, ), {, final, double, ratio, =, f, [, 0, ], [, l, ], /, scale, [, l]
[., length, ;, ++, l, ), {, final, double, ratio, =, f, [, 0, ], [, l, ], /, scale]
[), {, final, double, ratio, =, f, [, 0, ], [, l, ], /, scale, [, l, ], ;, initialNorm]
[), {, final, double, ratio, =, f, [, 0, ], [, l, ], /, scale, [, l, ], ;, initialNorm]
[;, initialNorm, +=, ratio, *, ratio, ;, }, double, deltaNorm, =, 0.0, ;, for, (, int, l, =, 0, ;]
[/, scale, [, l, ], ;, initialNorm, +=, ratio, *, ratio, ;, }, double, deltaNorm, =, 0.0, ;, for, (]
[[, l, ], /, scale, [, l, ], ;, initialNorm, +=, ratio, *, ratio, ;, }, double, deltaNorm, =, 0.0]
[[, 0, ], [, l, ], /, scale, [, l, ], ;, initialNorm, +=, ratio, *, ratio, ;, }, double]
[], [, l, ], /, scale, [, l, ], ;, initialNorm, +=, ratio, *, ratio, ;, }, double, deltaNorm, =]
[], /, scale, [, l, ], ;, initialNorm, +=, ratio, *, ratio, ;, }, double, deltaNorm, =, 0.0, ;, for]
[;, initialNorm, +=, ratio, *, ratio, ;, }, double, deltaNorm, =, 0.0, ;, for, (, int, l, =, 0, ;]
[[, l, ], ;, initialNorm, +=, ratio, *, ratio, ;, }, double, deltaNorm, =, 0.0, ;, for, (, int, l]
[], ;, initialNorm, +=, ratio, *, ratio, ;, }, double, deltaNorm, =, 0.0, ;, for, (, int, l, =, 0]
[+=, ratio, *, ratio, ;, }, double, deltaNorm, =, 0.0, ;, for, (, int, l, =, 0, ;, l, <]
[;, }, double, deltaNorm, =, 0.0, ;, for, (, int, l, =, 0, ;, l, <, scale, ., length, ;]
[*, ratio, ;, }, double, deltaNorm, =, 0.0, ;, for, (, int, l, =, 0, ;, l, <, scale, .]
[;, }, double, deltaNorm, =, 0.0, ;, for, (, int, l, =, 0, ;, l, <, scale, ., length, ;]
[;, for, (, int, l, =, 0, ;, l, <, scale, ., length, ;, ++, l, ), {, final, double]
[;, l, <, scale, ., length, ;, ++, l, ), {, final, double, ratio, =, (, f, [, j, +]
[;, ++, l, ), {, final, double, ratio, =, (, f, [, j, +, 1, ], [, l, ], -]
[<, scale, ., length, ;, ++, l, ), {, final, double, ratio, =, (, f, [, j, +, 1, ]]
[;, ++, l, ), {, final, double, ratio, =, (, f, [, j, +, 1, ], [, l, ], -]
[., length, ;, ++, l, ), {, final, double, ratio, =, (, f, [, j, +, 1, ], [, l]
[), {, final, double, ratio, =, (, f, [, j, +, 1, ], [, l, ], -, f, [, 0]
[), {, final, double, ratio, =, (, f, [, j, +, 1, ], [, l, ], -, f, [, 0]
[;, deltaNorm, +=, ratio, *, ratio, ;, }, if, (, deltaNorm, >, 4, *, FastMath, ., max, (, 1.0e-15, ,]
[/, scale, [, l, ], ;, deltaNorm, +=, ratio, *, ratio, ;, }, if, (, deltaNorm, >, 4, *, FastMath]
[), /, scale, [, l, ], ;, deltaNorm, +=, ratio, *, ratio, ;, }, if, (, deltaNorm, >, 4, *]
[-, f, [, 0, ], [, l, ], ), /, scale, [, l, ], ;, deltaNorm, +=, ratio, *, ratio]
[[, l, ], -, f, [, 0, ], [, l, ], ), /, scale, [, l, ], ;, deltaNorm, +=]
[[, j, +, 1, ], [, l, ], -, f, [, 0, ], [, l, ], ), /, scale, []
[], [, l, ], -, f, [, 0, ], [, l, ], ), /, scale, [, l, ], ;, deltaNorm]
[+, 1, ], [, l, ], -, f, [, 0, ], [, l, ], ), /, scale, [, l, ]]
[], [, l, ], -, f, [, 0, ], [, l, ], ), /, scale, [, l, ], ;, deltaNorm]
[], -, f, [, 0, ], [, l, ], ), /, scale, [, l, ], ;, deltaNorm, +=, ratio, *]
[), /, scale, [, l, ], ;, deltaNorm, +=, ratio, *, ratio, ;, }, if, (, deltaNorm, >, 4, *]
[[, l, ], ), /, scale, [, l, ], ;, deltaNorm, +=, ratio, *, ratio, ;, }, if, (, deltaNorm]
[[, 0, ], [, l, ], ), /, scale, [, l, ], ;, deltaNorm, +=, ratio, *, ratio, ;, }]
[], [, l, ], ), /, scale, [, l, ], ;, deltaNorm, +=, ratio, *, ratio, ;, }, if, (]
[], ), /, scale, [, l, ], ;, deltaNorm, +=, ratio, *, ratio, ;, }, if, (, deltaNorm, >, 4]
[;, deltaNorm, +=, ratio, *, ratio, ;, }, if, (, deltaNorm, >, 4, *, FastMath, ., max, (, 1.0e-15, ,]
[[, l, ], ;, deltaNorm, +=, ratio, *, ratio, ;, }, if, (, deltaNorm, >, 4, *, FastMath, ., max]
[], ;, deltaNorm, +=, ratio, *, ratio, ;, }, if, (, deltaNorm, >, 4, *, FastMath, ., max, (, 1.0e-15]
[+=, ratio, *, ratio, ;, }, if, (, deltaNorm, >, 4, *, FastMath, ., max, (, 1.0e-15, ,, initialNorm, )]
[;, }, if, (, deltaNorm, >, 4, *, FastMath, ., max, (, 1.0e-15, ,, initialNorm, ), ), {, return, false]
[*, ratio, ;, }, if, (, deltaNorm, >, 4, *, FastMath, ., max, (, 1.0e-15, ,, initialNorm, ), ), {]
[;, }, if, (, deltaNorm, >, 4, *, FastMath, ., max, (, 1.0e-15, ,, initialNorm, ), ), {, return, false]
[), {, return, false, ;, }, }, }, for, (, int, i, =, 0, ;, i, <, y0, ., length]
[>, 4, *, FastMath, ., max, (, 1.0e-15, ,, initialNorm, ), ), {, return, false, ;, }, }, }, for]
[), {, return, false, ;, }, }, }, for, (, int, i, =, 0, ;, i, <, y0, ., length]
[*, FastMath, ., max, (, 1.0e-15, ,, initialNorm, ), ), {, return, false, ;, }, }, }, for, (, int]
[), {, return, false, ;, }, }, }, for, (, int, i, =, 0, ;, i, <, y0, ., length]
[., max, (, 1.0e-15, ,, initialNorm, ), ), {, return, false, ;, }, }, }, for, (, int, i, =]
[,, initialNorm, ), ), {, return, false, ;, }, }, }, for, (, int, i, =, 0, ;, i, <]
[), ), {, return, false, ;, }, }, }, for, (, int, i, =, 0, ;, i, <, y0, .]
[;, }, }, }, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, )]
[;, i, <, y0, ., length, ;, ++, i, ), {, yEnd, [, i, ], =, 0.5, *, (, yTmp]
[;, ++, i, ), {, yEnd, [, i, ], =, 0.5, *, (, yTmp, [, i, ], +, yEnd, []
[<, y0, ., length, ;, ++, i, ), {, yEnd, [, i, ], =, 0.5, *, (, yTmp, [, i]
[;, ++, i, ), {, yEnd, [, i, ], =, 0.5, *, (, yTmp, [, i, ], +, yEnd, []
[., length, ;, ++, i, ), {, yEnd, [, i, ], =, 0.5, *, (, yTmp, [, i, ], +]
[), {, yEnd, [, i, ], =, 0.5, *, (, yTmp, [, i, ], +, yEnd, [, i, ], +]
[), {, yEnd, [, i, ], =, 0.5, *, (, yTmp, [, i, ], +, yEnd, [, i, ], +]
[=, 0.5, *, (, yTmp, [, i, ], +, yEnd, [, i, ], +, subStep, *, f, [, n, ]]
[[, i, ], =, 0.5, *, (, yTmp, [, i, ], +, yEnd, [, i, ], +, subStep, *, f]
[], =, 0.5, *, (, yTmp, [, i, ], +, yEnd, [, i, ], +, subStep, *, f, [, n]
[;, }, return, true, ;, }, private, void, extrapolate, (, final, int, offset, ,, final, int, k, ,, final, double]
[*, (, yTmp, [, i, ], +, yEnd, [, i, ], +, subStep, *, f, [, n, ], [, i]
[;, }, return, true, ;, }, private, void, extrapolate, (, final, int, offset, ,, final, int, k, ,, final, double]
[), ;, }, return, true, ;, }, private, void, extrapolate, (, final, int, offset, ,, final, int, k, ,, final]
[+, subStep, *, f, [, n, ], [, i, ], ), ;, }, return, true, ;, }, private, void, extrapolate]
[+, yEnd, [, i, ], +, subStep, *, f, [, n, ], [, i, ], ), ;, }, return, true]
[[, i, ], +, yEnd, [, i, ], +, subStep, *, f, [, n, ], [, i, ], ), ;]
[], +, yEnd, [, i, ], +, subStep, *, f, [, n, ], [, i, ], ), ;, }, return]
[+, subStep, *, f, [, n, ], [, i, ], ), ;, }, return, true, ;, }, private, void, extrapolate]
[[, i, ], +, subStep, *, f, [, n, ], [, i, ], ), ;, }, return, true, ;, }]
[], +, subStep, *, f, [, n, ], [, i, ], ), ;, }, return, true, ;, }, private, void]
[), ;, }, return, true, ;, }, private, void, extrapolate, (, final, int, offset, ,, final, int, k, ,, final]
[*, f, [, n, ], [, i, ], ), ;, }, return, true, ;, }, private, void, extrapolate, (, final]
[), ;, }, return, true, ;, }, private, void, extrapolate, (, final, int, offset, ,, final, int, k, ,, final]
[[, i, ], ), ;, }, return, true, ;, }, private, void, extrapolate, (, final, int, offset, ,, final, int]
[[, n, ], [, i, ], ), ;, }, return, true, ;, }, private, void, extrapolate, (, final, int, offset]
[], [, i, ], ), ;, }, return, true, ;, }, private, void, extrapolate, (, final, int, offset, ,, final]
[], ), ;, }, return, true, ;, }, private, void, extrapolate, (, final, int, offset, ,, final, int, k, ,]
[;, }, private, void, extrapolate, (, final, int, offset, ,, final, int, k, ,, final, double, [, ], [, ]]
[;, j, <, k, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, last, .]
[;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, last, ., length, ;, ++, i]
[<, k, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, last, ., length, ;]
[;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, last, ., length, ;, ++, i]
[), {, for, (, int, i, =, 0, ;, i, <, last, ., length, ;, ++, i, ), {, diag]
[), {, for, (, int, i, =, 0, ;, i, <, last, ., length, ;, ++, i, ), {, diag]
[;, i, <, last, ., length, ;, ++, i, ), {, diag, [, k, -, j, -, 1, ], []
[;, ++, i, ), {, diag, [, k, -, j, -, 1, ], [, i, ], =, diag, [, k]
[<, last, ., length, ;, ++, i, ), {, diag, [, k, -, j, -, 1, ], [, i, ]]
[;, ++, i, ), {, diag, [, k, -, j, -, 1, ], [, i, ], =, diag, [, k]
[., length, ;, ++, i, ), {, diag, [, k, -, j, -, 1, ], [, i, ], =, diag]
[), {, diag, [, k, -, j, -, 1, ], [, i, ], =, diag, [, k, -, j, ]]
[), {, diag, [, k, -, j, -, 1, ], [, i, ], =, diag, [, k, -, j, ]]
[=, diag, [, k, -, j, ], [, i, ], +, coeff, [, k, +, offset, ], [, j, -]
[[, i, ], =, diag, [, k, -, j, ], [, i, ], +, coeff, [, k, +, offset, ]]
[[, k, -, j, -, 1, ], [, i, ], =, diag, [, k, -, j, ], [, i, ]]
[], [, i, ], =, diag, [, k, -, j, ], [, i, ], +, coeff, [, k, +, offset]
[-, 1, ], [, i, ], =, diag, [, k, -, j, ], [, i, ], +, coeff, [, k]
[-, j, -, 1, ], [, i, ], =, diag, [, k, -, j, ], [, i, ], +, coeff]
[-, 1, ], [, i, ], =, diag, [, k, -, j, ], [, i, ], +, coeff, [, k]
[], [, i, ], =, diag, [, k, -, j, ], [, i, ], +, coeff, [, k, +, offset]
[], =, diag, [, k, -, j, ], [, i, ], +, coeff, [, k, +, offset, ], [, j]
[;, }, }, for, (, int, i, =, 0, ;, i, <, last, ., length, ;, ++, i, ), {]
[+, coeff, [, k, +, offset, ], [, j, -, 1, ], *, (, diag, [, k, -, j, ]]
[[, i, ], +, coeff, [, k, +, offset, ], [, j, -, 1, ], *, (, diag, [, k]
[[, k, -, j, ], [, i, ], +, coeff, [, k, +, offset, ], [, j, -, 1, ]]
[], [, i, ], +, coeff, [, k, +, offset, ], [, j, -, 1, ], *, (, diag, []
[-, j, ], [, i, ], +, coeff, [, k, +, offset, ], [, j, -, 1, ], *, (]
[], [, i, ], +, coeff, [, k, +, offset, ], [, j, -, 1, ], *, (, diag, []
[], +, coeff, [, k, +, offset, ], [, j, -, 1, ], *, (, diag, [, k, -, j]
[;, }, }, for, (, int, i, =, 0, ;, i, <, last, ., length, ;, ++, i, ), {]
[*, (, diag, [, k, -, j, ], [, i, ], -, diag, [, k, -, j, -, 1, ]]
[[, j, -, 1, ], *, (, diag, [, k, -, j, ], [, i, ], -, diag, [, k]
[[, k, +, offset, ], [, j, -, 1, ], *, (, diag, [, k, -, j, ], [, i]
[], [, j, -, 1, ], *, (, diag, [, k, -, j, ], [, i, ], -, diag, []
[+, offset, ], [, j, -, 1, ], *, (, diag, [, k, -, j, ], [, i, ], -]
[], [, j, -, 1, ], *, (, diag, [, k, -, j, ], [, i, ], -, diag, []
[], *, (, diag, [, k, -, j, ], [, i, ], -, diag, [, k, -, j, -, 1]
[-, 1, ], *, (, diag, [, k, -, j, ], [, i, ], -, diag, [, k, -, j]
[], *, (, diag, [, k, -, j, ], [, i, ], -, diag, [, k, -, j, -, 1]
[;, }, }, for, (, int, i, =, 0, ;, i, <, last, ., length, ;, ++, i, ), {]
[), ;, }, }, for, (, int, i, =, 0, ;, i, <, last, ., length, ;, ++, i, )]
[-, diag, [, k, -, j, -, 1, ], [, i, ], ), ;, }, }, for, (, int, i]
[[, i, ], -, diag, [, k, -, j, -, 1, ], [, i, ], ), ;, }, }, for]
[[, k, -, j, ], [, i, ], -, diag, [, k, -, j, -, 1, ], [, i, ]]
[], [, i, ], -, diag, [, k, -, j, -, 1, ], [, i, ], ), ;, }, }]
[-, j, ], [, i, ], -, diag, [, k, -, j, -, 1, ], [, i, ], ), ;]
[], [, i, ], -, diag, [, k, -, j, -, 1, ], [, i, ], ), ;, }, }]
[], -, diag, [, k, -, j, -, 1, ], [, i, ], ), ;, }, }, for, (, int]
[), ;, }, }, for, (, int, i, =, 0, ;, i, <, last, ., length, ;, ++, i, )]
[[, i, ], ), ;, }, }, for, (, int, i, =, 0, ;, i, <, last, ., length, ;]
[[, k, -, j, -, 1, ], [, i, ], ), ;, }, }, for, (, int, i, =, 0]
[], [, i, ], ), ;, }, }, for, (, int, i, =, 0, ;, i, <, last, ., length]
[-, 1, ], [, i, ], ), ;, }, }, for, (, int, i, =, 0, ;, i, <, last]
[-, j, -, 1, ], [, i, ], ), ;, }, }, for, (, int, i, =, 0, ;, i]
[-, 1, ], [, i, ], ), ;, }, }, for, (, int, i, =, 0, ;, i, <, last]
[], [, i, ], ), ;, }, }, for, (, int, i, =, 0, ;, i, <, last, ., length]
[], ), ;, }, }, for, (, int, i, =, 0, ;, i, <, last, ., length, ;, ++, i]
[;, i, <, last, ., length, ;, ++, i, ), {, last, [, i, ], =, diag, [, 0, ]]
[;, ++, i, ), {, last, [, i, ], =, diag, [, 0, ], [, i, ], +, coeff, []
[<, last, ., length, ;, ++, i, ), {, last, [, i, ], =, diag, [, 0, ], [, i]
[;, ++, i, ), {, last, [, i, ], =, diag, [, 0, ], [, i, ], +, coeff, []
[., length, ;, ++, i, ), {, last, [, i, ], =, diag, [, 0, ], [, i, ], +]
[), {, last, [, i, ], =, diag, [, 0, ], [, i, ], +, coeff, [, k, +, offset]
[), {, last, [, i, ], =, diag, [, 0, ], [, i, ], +, coeff, [, k, +, offset]
[=, diag, [, 0, ], [, i, ], +, coeff, [, k, +, offset, ], [, k, -, 1, ]]
[[, i, ], =, diag, [, 0, ], [, i, ], +, coeff, [, k, +, offset, ], [, k]
[], =, diag, [, 0, ], [, i, ], +, coeff, [, k, +, offset, ], [, k, -, 1]
[;, }, }, @, Override, public, void, integrate, (, final, ExpandableStatefulODE, equations, ,, final, double, t, ), throws, NumberIsTooSmallException, ,]
[+, coeff, [, k, +, offset, ], [, k, -, 1, ], *, (, diag, [, 0, ], [, i]
[[, i, ], +, coeff, [, k, +, offset, ], [, k, -, 1, ], *, (, diag, [, 0]
[[, 0, ], [, i, ], +, coeff, [, k, +, offset, ], [, k, -, 1, ], *, (]
[], [, i, ], +, coeff, [, k, +, offset, ], [, k, -, 1, ], *, (, diag, []
[], +, coeff, [, k, +, offset, ], [, k, -, 1, ], *, (, diag, [, 0, ], []
[;, }, }, @, Override, public, void, integrate, (, final, ExpandableStatefulODE, equations, ,, final, double, t, ), throws, NumberIsTooSmallException, ,]
[*, (, diag, [, 0, ], [, i, ], -, last, [, i, ], ), ;, }, }, @, Override]
[[, k, -, 1, ], *, (, diag, [, 0, ], [, i, ], -, last, [, i, ], )]
[[, k, +, offset, ], [, k, -, 1, ], *, (, diag, [, 0, ], [, i, ], -]
[], [, k, -, 1, ], *, (, diag, [, 0, ], [, i, ], -, last, [, i, ]]
[+, offset, ], [, k, -, 1, ], *, (, diag, [, 0, ], [, i, ], -, last, []
[], [, k, -, 1, ], *, (, diag, [, 0, ], [, i, ], -, last, [, i, ]]
[], *, (, diag, [, 0, ], [, i, ], -, last, [, i, ], ), ;, }, }, @]
[-, 1, ], *, (, diag, [, 0, ], [, i, ], -, last, [, i, ], ), ;, }]
[], *, (, diag, [, 0, ], [, i, ], -, last, [, i, ], ), ;, }, }, @]
[;, }, }, @, Override, public, void, integrate, (, final, ExpandableStatefulODE, equations, ,, final, double, t, ), throws, NumberIsTooSmallException, ,]
[), ;, }, }, @, Override, public, void, integrate, (, final, ExpandableStatefulODE, equations, ,, final, double, t, ), throws, NumberIsTooSmallException]
[-, last, [, i, ], ), ;, }, }, @, Override, public, void, integrate, (, final, ExpandableStatefulODE, equations, ,, final]
[[, i, ], -, last, [, i, ], ), ;, }, }, @, Override, public, void, integrate, (, final, ExpandableStatefulODE]
[[, 0, ], [, i, ], -, last, [, i, ], ), ;, }, }, @, Override, public, void, integrate]
[], [, i, ], -, last, [, i, ], ), ;, }, }, @, Override, public, void, integrate, (, final]
[], -, last, [, i, ], ), ;, }, }, @, Override, public, void, integrate, (, final, ExpandableStatefulODE, equations, ,]
[), ;, }, }, @, Override, public, void, integrate, (, final, ExpandableStatefulODE, equations, ,, final, double, t, ), throws, NumberIsTooSmallException]
[[, i, ], ), ;, }, }, @, Override, public, void, integrate, (, final, ExpandableStatefulODE, equations, ,, final, double, t]
[], ), ;, }, }, @, Override, public, void, integrate, (, final, ExpandableStatefulODE, equations, ,, final, double, t, ), throws]
[;, setEquations, (, equations, ), ;, final, boolean, forward, =, t, >, equations, ., getTime, (, ), ;, final, double]
[,, t, ), ;, setEquations, (, equations, ), ;, final, boolean, forward, =, t, >, equations, ., getTime, (, )]
[), ;, setEquations, (, equations, ), ;, final, boolean, forward, =, t, >, equations, ., getTime, (, ), ;, final]
[;, final, boolean, forward, =, t, >, equations, ., getTime, (, ), ;, final, double, [, ], y0, =, equations]
[), ;, final, boolean, forward, =, t, >, equations, ., getTime, (, ), ;, final, double, [, ], y0, =]
[;, final, double, [, ], y0, =, equations, ., getCompleteState, (, ), ;, final, double, [, ], y, =, y0]
[>, equations, ., getTime, (, ), ;, final, double, [, ], y0, =, equations, ., getCompleteState, (, ), ;, final]
[;, final, double, [, ], y0, =, equations, ., getCompleteState, (, ), ;, final, double, [, ], y, =, y0]
[., getTime, (, ), ;, final, double, [, ], y0, =, equations, ., getCompleteState, (, ), ;, final, double, []
[;, final, double, [, ], y, =, y0, ., clone, (, ), ;, final, double, [, ], yDot0, =, new]
[., getCompleteState, (, ), ;, final, double, [, ], y, =, y0, ., clone, (, ), ;, final, double, []
[;, final, double, [, ], yDot0, =, new, double, [, y, ., length, ], ;, final, double, [, ], y1]
[., clone, (, ), ;, final, double, [, ], yDot0, =, new, double, [, y, ., length, ], ;, final]
[;, final, double, [, ], y1, =, new, double, [, y, ., length, ], ;, final, double, [, ], yTmp]
[], ;, final, double, [, ], y1, =, new, double, [, y, ., length, ], ;, final, double, [, ]]
[., length, ], ;, final, double, [, ], y1, =, new, double, [, y, ., length, ], ;, final, double]
[;, final, double, [, ], yTmp, =, new, double, [, y, ., length, ], ;, final, double, [, ], yTmpDot]
[], ;, final, double, [, ], yTmp, =, new, double, [, y, ., length, ], ;, final, double, [, ]]
[., length, ], ;, final, double, [, ], yTmp, =, new, double, [, y, ., length, ], ;, final, double]
[;, final, double, [, ], yTmpDot, =, new, double, [, y, ., length, ], ;, final, double, [, ], []
[], ;, final, double, [, ], yTmpDot, =, new, double, [, y, ., length, ], ;, final, double, [, ]]
[., length, ], ;, final, double, [, ], yTmpDot, =, new, double, [, y, ., length, ], ;, final, double]
[;, final, double, [, ], [, ], diagonal, =, new, double, [, sequence, ., length, -, 1, ], [, ]]
[], ;, final, double, [, ], [, ], diagonal, =, new, double, [, sequence, ., length, -, 1, ], []
[., length, ], ;, final, double, [, ], [, ], diagonal, =, new, double, [, sequence, ., length, -, 1]
[;, final, double, [, ], [, ], y1Diag, =, new, double, [, sequence, ., length, -, 1, ], [, ]]
[], [, ], ;, final, double, [, ], [, ], y1Diag, =, new, double, [, sequence, ., length, -, 1]
[-, 1, ], [, ], ;, final, double, [, ], [, ], y1Diag, =, new, double, [, sequence, ., length]
[., length, -, 1, ], [, ], ;, final, double, [, ], [, ], y1Diag, =, new, double, [, sequence]
[], [, ], ;, final, double, [, ], [, ], y1Diag, =, new, double, [, sequence, ., length, -, 1]
[;, for, (, int, k, =, 0, ;, k, <, sequence, ., length, -, 1, ;, ++, k, ), {]
[], [, ], ;, for, (, int, k, =, 0, ;, k, <, sequence, ., length, -, 1, ;, ++]
[-, 1, ], [, ], ;, for, (, int, k, =, 0, ;, k, <, sequence, ., length, -, 1]
[., length, -, 1, ], [, ], ;, for, (, int, k, =, 0, ;, k, <, sequence, ., length]
[], [, ], ;, for, (, int, k, =, 0, ;, k, <, sequence, ., length, -, 1, ;, ++]
[;, k, <, sequence, ., length, -, 1, ;, ++, k, ), {, diagonal, [, k, ], =, new, double]
[;, ++, k, ), {, diagonal, [, k, ], =, new, double, [, y, ., length, ], ;, y1Diag, []
[<, sequence, ., length, -, 1, ;, ++, k, ), {, diagonal, [, k, ], =, new, double, [, y]
[;, ++, k, ), {, diagonal, [, k, ], =, new, double, [, y, ., length, ], ;, y1Diag, []
[-, 1, ;, ++, k, ), {, diagonal, [, k, ], =, new, double, [, y, ., length, ], ;]
[., length, -, 1, ;, ++, k, ), {, diagonal, [, k, ], =, new, double, [, y, ., length]
[;, ++, k, ), {, diagonal, [, k, ], =, new, double, [, y, ., length, ], ;, y1Diag, []
[), {, diagonal, [, k, ], =, new, double, [, y, ., length, ], ;, y1Diag, [, k, ], =]
[), {, diagonal, [, k, ], =, new, double, [, y, ., length, ], ;, y1Diag, [, k, ], =]
[=, new, double, [, y, ., length, ], ;, y1Diag, [, k, ], =, new, double, [, y, ., length]
[[, k, ], =, new, double, [, y, ., length, ], ;, y1Diag, [, k, ], =, new, double, []
[], =, new, double, [, y, ., length, ], ;, y1Diag, [, k, ], =, new, double, [, y, .]
[;, y1Diag, [, k, ], =, new, double, [, y, ., length, ], ;, }, final, double, [, ], []
[], ;, y1Diag, [, k, ], =, new, double, [, y, ., length, ], ;, }, final, double, [, ]]
[., length, ], ;, y1Diag, [, k, ], =, new, double, [, y, ., length, ], ;, }, final, double]
[=, new, double, [, y, ., length, ], ;, }, final, double, [, ], [, ], [, ], fk, =]
[[, k, ], =, new, double, [, y, ., length, ], ;, }, final, double, [, ], [, ], []
[], =, new, double, [, y, ., length, ], ;, }, final, double, [, ], [, ], [, ], fk]
[;, }, final, double, [, ], [, ], [, ], fk, =, new, double, [, sequence, ., length, ], []
[], ;, }, final, double, [, ], [, ], [, ], fk, =, new, double, [, sequence, ., length, ]]
[., length, ], ;, }, final, double, [, ], [, ], [, ], fk, =, new, double, [, sequence, .]
[;, for, (, int, k, =, 0, ;, k, <, sequence, ., length, ;, ++, k, ), {, fk, []
[], [, ], [, ], ;, for, (, int, k, =, 0, ;, k, <, sequence, ., length, ;, ++]
[., length, ], [, ], [, ], ;, for, (, int, k, =, 0, ;, k, <, sequence, ., length]
[;, k, <, sequence, ., length, ;, ++, k, ), {, fk, [, k, ], =, new, double, [, sequence]
[;, ++, k, ), {, fk, [, k, ], =, new, double, [, sequence, [, k, ], +, 1, ]]
[<, sequence, ., length, ;, ++, k, ), {, fk, [, k, ], =, new, double, [, sequence, [, k]
[;, ++, k, ), {, fk, [, k, ], =, new, double, [, sequence, [, k, ], +, 1, ]]
[., length, ;, ++, k, ), {, fk, [, k, ], =, new, double, [, sequence, [, k, ], +]
[), {, fk, [, k, ], =, new, double, [, sequence, [, k, ], +, 1, ], [, ], ;]
[), {, fk, [, k, ], =, new, double, [, sequence, [, k, ], +, 1, ], [, ], ;]
[=, new, double, [, sequence, [, k, ], +, 1, ], [, ], ;, fk, [, k, ], [, 0]
[[, k, ], =, new, double, [, sequence, [, k, ], +, 1, ], [, ], ;, fk, [, k]
[], =, new, double, [, sequence, [, k, ], +, 1, ], [, ], ;, fk, [, k, ], []
[;, fk, [, k, ], [, 0, ], =, yDot0, ;, for, (, int, l, =, 0, ;, l, <]
[], [, ], ;, fk, [, k, ], [, 0, ], =, yDot0, ;, for, (, int, l, =, 0]
[+, 1, ], [, ], ;, fk, [, k, ], [, 0, ], =, yDot0, ;, for, (, int, l]
[[, k, ], +, 1, ], [, ], ;, fk, [, k, ], [, 0, ], =, yDot0, ;, for]
[], +, 1, ], [, ], ;, fk, [, k, ], [, 0, ], =, yDot0, ;, for, (, int]
[], [, ], ;, fk, [, k, ], [, 0, ], =, yDot0, ;, for, (, int, l, =, 0]
[=, yDot0, ;, for, (, int, l, =, 0, ;, l, <, sequence, [, k, ], ;, ++, l, )]
[[, 0, ], =, yDot0, ;, for, (, int, l, =, 0, ;, l, <, sequence, [, k, ], ;]
[[, k, ], [, 0, ], =, yDot0, ;, for, (, int, l, =, 0, ;, l, <, sequence, []
[], [, 0, ], =, yDot0, ;, for, (, int, l, =, 0, ;, l, <, sequence, [, k, ]]
[], =, yDot0, ;, for, (, int, l, =, 0, ;, l, <, sequence, [, k, ], ;, ++, l]
[;, for, (, int, l, =, 0, ;, l, <, sequence, [, k, ], ;, ++, l, ), {, fk]
[;, l, <, sequence, [, k, ], ;, ++, l, ), {, fk, [, k, ], [, l, +, 1]
[;, ++, l, ), {, fk, [, k, ], [, l, +, 1, ], =, new, double, [, y0, .]
[<, sequence, [, k, ], ;, ++, l, ), {, fk, [, k, ], [, l, +, 1, ], =]
[;, ++, l, ), {, fk, [, k, ], [, l, +, 1, ], =, new, double, [, y0, .]
[[, k, ], ;, ++, l, ), {, fk, [, k, ], [, l, +, 1, ], =, new, double]
[], ;, ++, l, ), {, fk, [, k, ], [, l, +, 1, ], =, new, double, [, y0]
[), {, fk, [, k, ], [, l, +, 1, ], =, new, double, [, y0, ., length, ], ;]
[), {, fk, [, k, ], [, l, +, 1, ], =, new, double, [, y0, ., length, ], ;]
[=, new, double, [, y0, ., length, ], ;, }, }, if, (, y, !=, y0, ), {, System, .]
[[, l, +, 1, ], =, new, double, [, y0, ., length, ], ;, }, }, if, (, y, !=]
[[, k, ], [, l, +, 1, ], =, new, double, [, y0, ., length, ], ;, }, }, if]
[], [, l, +, 1, ], =, new, double, [, y0, ., length, ], ;, }, }, if, (, y]
[], =, new, double, [, y0, ., length, ], ;, }, }, if, (, y, !=, y0, ), {, System]
[+, 1, ], =, new, double, [, y0, ., length, ], ;, }, }, if, (, y, !=, y0, )]
[], =, new, double, [, y0, ., length, ], ;, }, }, if, (, y, !=, y0, ), {, System]
[;, }, }, if, (, y, !=, y0, ), {, System, ., arraycopy, (, y0, ,, 0, ,, y, ,]
[], ;, }, }, if, (, y, !=, y0, ), {, System, ., arraycopy, (, y0, ,, 0, ,, y]
[., length, ], ;, }, }, if, (, y, !=, y0, ), {, System, ., arraycopy, (, y0, ,, 0]
[), {, System, ., arraycopy, (, y0, ,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, }]
[!=, y0, ), {, System, ., arraycopy, (, y0, ,, 0, ,, y, ,, 0, ,, y0, ., length, )]
[), {, System, ., arraycopy, (, y0, ,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, }]
[;, }, final, double, [, ], yDot1, =, new, double, [, y0, ., length, ], ;, final, double, [, ]]
[., arraycopy, (, y0, ,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, }, final, double, []
[,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, }, final, double, [, ], yDot1, =, new]
[,, y, ,, 0, ,, y0, ., length, ), ;, }, final, double, [, ], yDot1, =, new, double, []
[,, 0, ,, y0, ., length, ), ;, }, final, double, [, ], yDot1, =, new, double, [, y0, .]
[,, y0, ., length, ), ;, }, final, double, [, ], yDot1, =, new, double, [, y0, ., length, ]]
[), ;, }, final, double, [, ], yDot1, =, new, double, [, y0, ., length, ], ;, final, double, []
[., length, ), ;, }, final, double, [, ], yDot1, =, new, double, [, y0, ., length, ], ;, final]
[;, final, double, [, ], [, ], yMidDots, =, new, double, [, 1, +, 2, *, sequence, ., length, ]]
[], ;, final, double, [, ], [, ], yMidDots, =, new, double, [, 1, +, 2, *, sequence, ., length]
[., length, ], ;, final, double, [, ], [, ], yMidDots, =, new, double, [, 1, +, 2, *, sequence]
[;, final, double, [, ], scale, =, new, double, [, mainSetDimension, ], ;, rescale, (, y, ,, y, ,, scale]
[], [, y0, ., length, ], ;, final, double, [, ], scale, =, new, double, [, mainSetDimension, ], ;, rescale]
[+, 2, *, sequence, ., length, ], [, y0, ., length, ], ;, final, double, [, ], scale, =, new]
[], [, y0, ., length, ], ;, final, double, [, ], scale, =, new, double, [, mainSetDimension, ], ;, rescale]
[*, sequence, ., length, ], [, y0, ., length, ], ;, final, double, [, ], scale, =, new, double, []
[], [, y0, ., length, ], ;, final, double, [, ], scale, =, new, double, [, mainSetDimension, ], ;, rescale]
[., length, ], [, y0, ., length, ], ;, final, double, [, ], scale, =, new, double, [, mainSetDimension, ]]
[], ;, final, double, [, ], scale, =, new, double, [, mainSetDimension, ], ;, rescale, (, y, ,, y, ,]
[., length, ], ;, final, double, [, ], scale, =, new, double, [, mainSetDimension, ], ;, rescale, (, y, ,]
[;, rescale, (, y, ,, y, ,, scale, ), ;, final, double, tol, =, (, vecRelativeTolerance, ==, null, ), ?]
[], ;, rescale, (, y, ,, y, ,, scale, ), ;, final, double, tol, =, (, vecRelativeTolerance, ==, null, )]
[;, final, double, tol, =, (, vecRelativeTolerance, ==, null, ), ?, scalRelativeTolerance, :, vecRelativeTolerance, [, 0, ], ;, final, double]
[,, y, ,, scale, ), ;, final, double, tol, =, (, vecRelativeTolerance, ==, null, ), ?, scalRelativeTolerance, :, vecRelativeTolerance, []
[,, scale, ), ;, final, double, tol, =, (, vecRelativeTolerance, ==, null, ), ?, scalRelativeTolerance, :, vecRelativeTolerance, [, 0, ]]
[), ;, final, double, tol, =, (, vecRelativeTolerance, ==, null, ), ?, scalRelativeTolerance, :, vecRelativeTolerance, [, 0, ], ;, final]
[;, final, double, log10R, =, FastMath, ., log10, (, FastMath, ., max, (, 1.0e-10, ,, tol, ), ), ;, int]
[?, scalRelativeTolerance, :, vecRelativeTolerance, [, 0, ], ;, final, double, log10R, =, FastMath, ., log10, (, FastMath, ., max, (]
[), ?, scalRelativeTolerance, :, vecRelativeTolerance, [, 0, ], ;, final, double, log10R, =, FastMath, ., log10, (, FastMath, ., max]
[==, null, ), ?, scalRelativeTolerance, :, vecRelativeTolerance, [, 0, ], ;, final, double, log10R, =, FastMath, ., log10, (, FastMath]
[), ?, scalRelativeTolerance, :, vecRelativeTolerance, [, 0, ], ;, final, double, log10R, =, FastMath, ., log10, (, FastMath, ., max]
[:, vecRelativeTolerance, [, 0, ], ;, final, double, log10R, =, FastMath, ., log10, (, FastMath, ., max, (, 1.0e-10, ,]
[;, final, double, log10R, =, FastMath, ., log10, (, FastMath, ., max, (, 1.0e-10, ,, tol, ), ), ;, int]
[[, 0, ], ;, final, double, log10R, =, FastMath, ., log10, (, FastMath, ., max, (, 1.0e-10, ,, tol, )]
[], ;, final, double, log10R, =, FastMath, ., log10, (, FastMath, ., max, (, 1.0e-10, ,, tol, ), ), ;]
[;, int, targetIter, =, FastMath, ., max, (, 1, ,, FastMath, ., min, (, sequence, ., length, -, 2, ,]
[., log10, (, FastMath, ., max, (, 1.0e-10, ,, tol, ), ), ;, int, targetIter, =, FastMath, ., max, (]
[), ;, int, targetIter, =, FastMath, ., max, (, 1, ,, FastMath, ., min, (, sequence, ., length, -, 2]
[., max, (, 1.0e-10, ,, tol, ), ), ;, int, targetIter, =, FastMath, ., max, (, 1, ,, FastMath, .]
[,, tol, ), ), ;, int, targetIter, =, FastMath, ., max, (, 1, ,, FastMath, ., min, (, sequence, .]
[), ), ;, int, targetIter, =, FastMath, ., max, (, 1, ,, FastMath, ., min, (, sequence, ., length, -]
[;, final, AbstractStepInterpolator, interpolator, =, new, GraggBulirschStoerStepInterpolator, (, y, ,, yDot0, ,, y1, ,, yDot1, ,, yMidDots, ,, forward, ,]
[., max, (, 1, ,, FastMath, ., min, (, sequence, ., length, -, 2, ,, (, int, ), FastMath, .]
[,, FastMath, ., min, (, sequence, ., length, -, 2, ,, (, int, ), FastMath, ., floor, (, 0.5, -]
[), ;, final, AbstractStepInterpolator, interpolator, =, new, GraggBulirschStoerStepInterpolator, (, y, ,, yDot0, ,, y1, ,, yDot1, ,, yMidDots, ,, forward]
[., min, (, sequence, ., length, -, 2, ,, (, int, ), FastMath, ., floor, (, 0.5, -, 0.6, *]
[,, (, int, ), FastMath, ., floor, (, 0.5, -, 0.6, *, log10R, ), ), ), ;, final, AbstractStepInterpolator, interpolator]
[-, 2, ,, (, int, ), FastMath, ., floor, (, 0.5, -, 0.6, *, log10R, ), ), ), ;, final]
[., length, -, 2, ,, (, int, ), FastMath, ., floor, (, 0.5, -, 0.6, *, log10R, ), ), )]
[,, (, int, ), FastMath, ., floor, (, 0.5, -, 0.6, *, log10R, ), ), ), ;, final, AbstractStepInterpolator, interpolator]
[), ), ;, final, AbstractStepInterpolator, interpolator, =, new, GraggBulirschStoerStepInterpolator, (, y, ,, yDot0, ,, y1, ,, yDot1, ,, yMidDots, ,]
[), ), ;, final, AbstractStepInterpolator, interpolator, =, new, GraggBulirschStoerStepInterpolator, (, y, ,, yDot0, ,, y1, ,, yDot1, ,, yMidDots, ,]
[., floor, (, 0.5, -, 0.6, *, log10R, ), ), ), ;, final, AbstractStepInterpolator, interpolator, =, new, GraggBulirschStoerStepInterpolator, (, y]
[), ), ), ;, final, AbstractStepInterpolator, interpolator, =, new, GraggBulirschStoerStepInterpolator, (, y, ,, yDot0, ,, y1, ,, yDot1, ,, yMidDots]
[-, 0.6, *, log10R, ), ), ), ;, final, AbstractStepInterpolator, interpolator, =, new, GraggBulirschStoerStepInterpolator, (, y, ,, yDot0, ,, y1]
[), ), ), ;, final, AbstractStepInterpolator, interpolator, =, new, GraggBulirschStoerStepInterpolator, (, y, ,, yDot0, ,, y1, ,, yDot1, ,, yMidDots]
[*, log10R, ), ), ), ;, final, AbstractStepInterpolator, interpolator, =, new, GraggBulirschStoerStepInterpolator, (, y, ,, yDot0, ,, y1, ,, yDot1]
[), ), ), ;, final, AbstractStepInterpolator, interpolator, =, new, GraggBulirschStoerStepInterpolator, (, y, ,, yDot0, ,, y1, ,, yDot1, ,, yMidDots]
[;, interpolator, ., storeTime, (, equations, ., getTime, (, ), ), ;, stepStart, =, equations, ., getTime, (, ), ;]
[,, yDot0, ,, y1, ,, yDot1, ,, yMidDots, ,, forward, ,, equations, ., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers]
[,, y1, ,, yDot1, ,, yMidDots, ,, forward, ,, equations, ., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers, (, )]
[,, yDot1, ,, yMidDots, ,, forward, ,, equations, ., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers, (, ), ), ;]
[,, yMidDots, ,, forward, ,, equations, ., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers, (, ), ), ;, interpolator, .]
[,, forward, ,, equations, ., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers, (, ), ), ;, interpolator, ., storeTime, (]
[,, equations, ., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers, (, ), ), ;, interpolator, ., storeTime, (, equations, .]
[,, equations, ., getSecondaryMappers, (, ), ), ;, interpolator, ., storeTime, (, equations, ., getTime, (, ), ), ;, stepStart]
[., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers, (, ), ), ;, interpolator, ., storeTime, (, equations, ., getTime, (]
[), ;, interpolator, ., storeTime, (, equations, ., getTime, (, ), ), ;, stepStart, =, equations, ., getTime, (, )]
[., getSecondaryMappers, (, ), ), ;, interpolator, ., storeTime, (, equations, ., getTime, (, ), ), ;, stepStart, =, equations]
[;, stepStart, =, equations, ., getTime, (, ), ;, double, hNew, =, 0, ;, double, maxError, =, Double, ., MAX_VALUE]
[., storeTime, (, equations, ., getTime, (, ), ), ;, stepStart, =, equations, ., getTime, (, ), ;, double, hNew]
[), ;, stepStart, =, equations, ., getTime, (, ), ;, double, hNew, =, 0, ;, double, maxError, =, Double, .]
[., getTime, (, ), ), ;, stepStart, =, equations, ., getTime, (, ), ;, double, hNew, =, 0, ;, double]
[=, equations, ., getTime, (, ), ;, double, hNew, =, 0, ;, double, maxError, =, Double, ., MAX_VALUE, ;, boolean]
[;, double, hNew, =, 0, ;, double, maxError, =, Double, ., MAX_VALUE, ;, boolean, previousRejected, =, false, ;, boolean, firstTime]
[., getTime, (, ), ;, double, hNew, =, 0, ;, double, maxError, =, Double, ., MAX_VALUE, ;, boolean, previousRejected, =]
[;, double, maxError, =, Double, ., MAX_VALUE, ;, boolean, previousRejected, =, false, ;, boolean, firstTime, =, true, ;, boolean, newStep]
[;, boolean, previousRejected, =, false, ;, boolean, firstTime, =, true, ;, boolean, newStep, =, true, ;, boolean, firstStepAlreadyComputed, =, false]
[., MAX_VALUE, ;, boolean, previousRejected, =, false, ;, boolean, firstTime, =, true, ;, boolean, newStep, =, true, ;, boolean, firstStepAlreadyComputed]
[;, boolean, firstTime, =, true, ;, boolean, newStep, =, true, ;, boolean, firstStepAlreadyComputed, =, false, ;, initIntegration, (, equations, .]
[;, boolean, newStep, =, true, ;, boolean, firstStepAlreadyComputed, =, false, ;, initIntegration, (, equations, ., getTime, (, ), ,, y0]
[;, boolean, firstStepAlreadyComputed, =, false, ;, initIntegration, (, equations, ., getTime, (, ), ,, y0, ,, t, ), ;, costPerTimeUnit]
[;, initIntegration, (, equations, ., getTime, (, ), ,, y0, ,, t, ), ;, costPerTimeUnit, [, 0, ], =, 0]
[;, costPerTimeUnit, [, 0, ], =, 0, ;, isLastStep, =, false, ;, do, {, double, error, ;, boolean, reject, =]
[,, y0, ,, t, ), ;, costPerTimeUnit, [, 0, ], =, 0, ;, isLastStep, =, false, ;, do, {, double]
[., getTime, (, ), ,, y0, ,, t, ), ;, costPerTimeUnit, [, 0, ], =, 0, ;, isLastStep, =, false]
[,, t, ), ;, costPerTimeUnit, [, 0, ], =, 0, ;, isLastStep, =, false, ;, do, {, double, error, ;]
[), ;, costPerTimeUnit, [, 0, ], =, 0, ;, isLastStep, =, false, ;, do, {, double, error, ;, boolean, reject]
[=, 0, ;, isLastStep, =, false, ;, do, {, double, error, ;, boolean, reject, =, false, ;, if, (, newStep]
[[, 0, ], =, 0, ;, isLastStep, =, false, ;, do, {, double, error, ;, boolean, reject, =, false, ;]
[], =, 0, ;, isLastStep, =, false, ;, do, {, double, error, ;, boolean, reject, =, false, ;, if, (]
[;, isLastStep, =, false, ;, do, {, double, error, ;, boolean, reject, =, false, ;, if, (, newStep, ), {]
[=, false, ;, do, {, double, error, ;, boolean, reject, =, false, ;, if, (, newStep, ), {, interpolator, .]
[;, do, {, double, error, ;, boolean, reject, =, false, ;, if, (, newStep, ), {, interpolator, ., shift, (]
[;, if, (, newStep, ), {, interpolator, ., shift, (, ), ;, if, (, !, firstStepAlreadyComputed, ), {, computeDerivatives, (]
[), {, interpolator, ., shift, (, ), ;, if, (, !, firstStepAlreadyComputed, ), {, computeDerivatives, (, stepStart, ,, y, ,]
[;, if, (, !, firstStepAlreadyComputed, ), {, computeDerivatives, (, stepStart, ,, y, ,, yDot0, ), ;, }, if, (, firstTime]
[., shift, (, ), ;, if, (, !, firstStepAlreadyComputed, ), {, computeDerivatives, (, stepStart, ,, y, ,, yDot0, ), ;]
[), {, computeDerivatives, (, stepStart, ,, y, ,, yDot0, ), ;, }, if, (, firstTime, ), {, hNew, =, initializeStep]
[), {, computeDerivatives, (, stepStart, ,, y, ,, yDot0, ), ;, }, if, (, firstTime, ), {, hNew, =, initializeStep]
[;, }, if, (, firstTime, ), {, hNew, =, initializeStep, (, forward, ,, 2, *, targetIter, +, 1, ,, scale]
[,, y, ,, yDot0, ), ;, }, if, (, firstTime, ), {, hNew, =, initializeStep, (, forward, ,, 2, *]
[,, yDot0, ), ;, }, if, (, firstTime, ), {, hNew, =, initializeStep, (, forward, ,, 2, *, targetIter, +]
[), ;, }, if, (, firstTime, ), {, hNew, =, initializeStep, (, forward, ,, 2, *, targetIter, +, 1, ,]
[), {, hNew, =, initializeStep, (, forward, ,, 2, *, targetIter, +, 1, ,, scale, ,, stepStart, ,, y, ,]
[=, initializeStep, (, forward, ,, 2, *, targetIter, +, 1, ,, scale, ,, stepStart, ,, y, ,, yDot0, ,, yTmp]
[;, }, newStep, =, false, ;, }, stepSize, =, hNew, ;, if, (, (, forward, &&, (, stepStart, +, stepSize]
[,, 2, *, targetIter, +, 1, ,, scale, ,, stepStart, ,, y, ,, yDot0, ,, yTmp, ,, yTmpDot, ), ;]
[,, scale, ,, stepStart, ,, y, ,, yDot0, ,, yTmp, ,, yTmpDot, ), ;, }, newStep, =, false, ;, }]
[+, 1, ,, scale, ,, stepStart, ,, y, ,, yDot0, ,, yTmp, ,, yTmpDot, ), ;, }, newStep, =, false]
[*, targetIter, +, 1, ,, scale, ,, stepStart, ,, y, ,, yDot0, ,, yTmp, ,, yTmpDot, ), ;, }, newStep]
[+, 1, ,, scale, ,, stepStart, ,, y, ,, yDot0, ,, yTmp, ,, yTmpDot, ), ;, }, newStep, =, false]
[,, scale, ,, stepStart, ,, y, ,, yDot0, ,, yTmp, ,, yTmpDot, ), ;, }, newStep, =, false, ;, }]
[,, stepStart, ,, y, ,, yDot0, ,, yTmp, ,, yTmpDot, ), ;, }, newStep, =, false, ;, }, stepSize, =]
[,, y, ,, yDot0, ,, yTmp, ,, yTmpDot, ), ;, }, newStep, =, false, ;, }, stepSize, =, hNew, ;]
[,, yDot0, ,, yTmp, ,, yTmpDot, ), ;, }, newStep, =, false, ;, }, stepSize, =, hNew, ;, if, (]
[,, yTmp, ,, yTmpDot, ), ;, }, newStep, =, false, ;, }, stepSize, =, hNew, ;, if, (, (, forward]
[,, yTmpDot, ), ;, }, newStep, =, false, ;, }, stepSize, =, hNew, ;, if, (, (, forward, &&, (]
[), ;, }, newStep, =, false, ;, }, stepSize, =, hNew, ;, if, (, (, forward, &&, (, stepStart, +]
[=, false, ;, }, stepSize, =, hNew, ;, if, (, (, forward, &&, (, stepStart, +, stepSize, >, t, )]
[;, }, stepSize, =, hNew, ;, if, (, (, forward, &&, (, stepStart, +, stepSize, >, t, ), ), ||]
[=, hNew, ;, if, (, (, forward, &&, (, stepStart, +, stepSize, >, t, ), ), ||, (, (, !]
[;, if, (, (, forward, &&, (, stepStart, +, stepSize, >, t, ), ), ||, (, (, !, forward, )]
[), {, stepSize, =, t, -, stepStart, ;, }, final, double, nextT, =, stepStart, +, stepSize, ;, isLastStep, =, forward]
[||, (, (, !, forward, ), &&, (, stepStart, +, stepSize, <, t, ), ), ), {, stepSize, =, t]
[), ||, (, (, !, forward, ), &&, (, stepStart, +, stepSize, <, t, ), ), ), {, stepSize, =]
[&&, (, stepStart, +, stepSize, >, t, ), ), ||, (, (, !, forward, ), &&, (, stepStart, +, stepSize]
[), ||, (, (, !, forward, ), &&, (, stepStart, +, stepSize, <, t, ), ), ), {, stepSize, =]
[), ), ||, (, (, !, forward, ), &&, (, stepStart, +, stepSize, <, t, ), ), ), {, stepSize]
[>, t, ), ), ||, (, (, !, forward, ), &&, (, stepStart, +, stepSize, <, t, ), ), )]
[+, stepSize, >, t, ), ), ||, (, (, !, forward, ), &&, (, stepStart, +, stepSize, <, t, )]
[>, t, ), ), ||, (, (, !, forward, ), &&, (, stepStart, +, stepSize, <, t, ), ), )]
[), ), ||, (, (, !, forward, ), &&, (, stepStart, +, stepSize, <, t, ), ), ), {, stepSize]
[), {, stepSize, =, t, -, stepStart, ;, }, final, double, nextT, =, stepStart, +, stepSize, ;, isLastStep, =, forward]
[), ), {, stepSize, =, t, -, stepStart, ;, }, final, double, nextT, =, stepStart, +, stepSize, ;, isLastStep, =]
[&&, (, stepStart, +, stepSize, <, t, ), ), ), {, stepSize, =, t, -, stepStart, ;, }, final, double]
[), &&, (, stepStart, +, stepSize, <, t, ), ), ), {, stepSize, =, t, -, stepStart, ;, }, final]
[), &&, (, stepStart, +, stepSize, <, t, ), ), ), {, stepSize, =, t, -, stepStart, ;, }, final]
[), ), {, stepSize, =, t, -, stepStart, ;, }, final, double, nextT, =, stepStart, +, stepSize, ;, isLastStep, =]
[), ), ), {, stepSize, =, t, -, stepStart, ;, }, final, double, nextT, =, stepStart, +, stepSize, ;, isLastStep]
[<, t, ), ), ), {, stepSize, =, t, -, stepStart, ;, }, final, double, nextT, =, stepStart, +, stepSize]
[+, stepSize, <, t, ), ), ), {, stepSize, =, t, -, stepStart, ;, }, final, double, nextT, =, stepStart]
[<, t, ), ), ), {, stepSize, =, t, -, stepStart, ;, }, final, double, nextT, =, stepStart, +, stepSize]
[), ), ), {, stepSize, =, t, -, stepStart, ;, }, final, double, nextT, =, stepStart, +, stepSize, ;, isLastStep]
[=, t, -, stepStart, ;, }, final, double, nextT, =, stepStart, +, stepSize, ;, isLastStep, =, forward, ?, (, nextT]
[;, }, final, double, nextT, =, stepStart, +, stepSize, ;, isLastStep, =, forward, ?, (, nextT, >=, t, ), :]
[-, stepStart, ;, }, final, double, nextT, =, stepStart, +, stepSize, ;, isLastStep, =, forward, ?, (, nextT, >=, t]
[;, }, final, double, nextT, =, stepStart, +, stepSize, ;, isLastStep, =, forward, ?, (, nextT, >=, t, ), :]
[;, isLastStep, =, forward, ?, (, nextT, >=, t, ), :, (, nextT, <=, t, ), ;, int, k, =]
[+, stepSize, ;, isLastStep, =, forward, ?, (, nextT, >=, t, ), :, (, nextT, <=, t, ), ;, int]
[;, isLastStep, =, forward, ?, (, nextT, >=, t, ), :, (, nextT, <=, t, ), ;, int, k, =]
[=, forward, ?, (, nextT, >=, t, ), :, (, nextT, <=, t, ), ;, int, k, =, -, 1]
[;, int, k, =, -, 1, ;, for, (, boolean, loop, =, true, ;, loop, ;, ), {, ++, k]
[?, (, nextT, >=, t, ), :, (, nextT, <=, t, ), ;, int, k, =, -, 1, ;, for]
[:, (, nextT, <=, t, ), ;, int, k, =, -, 1, ;, for, (, boolean, loop, =, true, ;]
[), :, (, nextT, <=, t, ), ;, int, k, =, -, 1, ;, for, (, boolean, loop, =, true]
[>=, t, ), :, (, nextT, <=, t, ), ;, int, k, =, -, 1, ;, for, (, boolean, loop]
[), :, (, nextT, <=, t, ), ;, int, k, =, -, 1, ;, for, (, boolean, loop, =, true]
[;, int, k, =, -, 1, ;, for, (, boolean, loop, =, true, ;, loop, ;, ), {, ++, k]
[), ;, int, k, =, -, 1, ;, for, (, boolean, loop, =, true, ;, loop, ;, ), {, ++]
[<=, t, ), ;, int, k, =, -, 1, ;, for, (, boolean, loop, =, true, ;, loop, ;, )]
[), ;, int, k, =, -, 1, ;, for, (, boolean, loop, =, true, ;, loop, ;, ), {, ++]
[;, for, (, boolean, loop, =, true, ;, loop, ;, ), {, ++, k, ;, if, (, !, tryStep, (]
[;, for, (, boolean, loop, =, true, ;, loop, ;, ), {, ++, k, ;, if, (, !, tryStep, (]
[;, loop, ;, ), {, ++, k, ;, if, (, !, tryStep, (, stepStart, ,, y, ,, stepSize, ,, k]
[;, ), {, ++, k, ;, if, (, !, tryStep, (, stepStart, ,, y, ,, stepSize, ,, k, ,, scale]
[;, if, (, !, tryStep, (, stepStart, ,, y, ,, stepSize, ,, k, ,, scale, ,, fk, [, k, ]]
[;, if, (, !, tryStep, (, stepStart, ,, y, ,, stepSize, ,, k, ,, scale, ,, fk, [, k, ]]
[), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, ), ), ;]
[), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, ), ), ;]
[,, y, ,, stepSize, ,, k, ,, scale, ,, fk, [, k, ], ,, (, k, ==, 0, ), ?]
[,, stepSize, ,, k, ,, scale, ,, fk, [, k, ], ,, (, k, ==, 0, ), ?, yMidDots, []
[,, k, ,, scale, ,, fk, [, k, ], ,, (, k, ==, 0, ), ?, yMidDots, [, 0, ]]
[,, scale, ,, fk, [, k, ], ,, (, k, ==, 0, ), ?, yMidDots, [, 0, ], :, diagonal]
[,, fk, [, k, ], ,, (, k, ==, 0, ), ?, yMidDots, [, 0, ], :, diagonal, [, k]
[,, (, k, ==, 0, ), ?, yMidDots, [, 0, ], :, diagonal, [, k, -, 1, ], ,, (]
[[, k, ], ,, (, k, ==, 0, ), ?, yMidDots, [, 0, ], :, diagonal, [, k, -, 1]
[], ,, (, k, ==, 0, ), ?, yMidDots, [, 0, ], :, diagonal, [, k, -, 1, ], ,]
[,, (, k, ==, 0, ), ?, y1, :, y1Diag, [, k, -, 1, ], ,, yTmp, ), ), {]
[?, yMidDots, [, 0, ], :, diagonal, [, k, -, 1, ], ,, (, k, ==, 0, ), ?, y1]
[), ?, yMidDots, [, 0, ], :, diagonal, [, k, -, 1, ], ,, (, k, ==, 0, ), ?]
[==, 0, ), ?, yMidDots, [, 0, ], :, diagonal, [, k, -, 1, ], ,, (, k, ==, 0]
[), ?, yMidDots, [, 0, ], :, diagonal, [, k, -, 1, ], ,, (, k, ==, 0, ), ?]
[:, diagonal, [, k, -, 1, ], ,, (, k, ==, 0, ), ?, y1, :, y1Diag, [, k, -]
[[, 0, ], :, diagonal, [, k, -, 1, ], ,, (, k, ==, 0, ), ?, y1, :, y1Diag]
[], :, diagonal, [, k, -, 1, ], ,, (, k, ==, 0, ), ?, y1, :, y1Diag, [, k]
[,, (, k, ==, 0, ), ?, y1, :, y1Diag, [, k, -, 1, ], ,, yTmp, ), ), {]
[[, k, -, 1, ], ,, (, k, ==, 0, ), ?, y1, :, y1Diag, [, k, -, 1, ]]
[], ,, (, k, ==, 0, ), ?, y1, :, y1Diag, [, k, -, 1, ], ,, yTmp, ), )]
[-, 1, ], ,, (, k, ==, 0, ), ?, y1, :, y1Diag, [, k, -, 1, ], ,, yTmp]
[], ,, (, k, ==, 0, ), ?, y1, :, y1Diag, [, k, -, 1, ], ,, yTmp, ), )]
[,, yTmp, ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false]
[?, y1, :, y1Diag, [, k, -, 1, ], ,, yTmp, ), ), {, hNew, =, FastMath, ., abs, (]
[), ?, y1, :, y1Diag, [, k, -, 1, ], ,, yTmp, ), ), {, hNew, =, FastMath, ., abs]
[==, 0, ), ?, y1, :, y1Diag, [, k, -, 1, ], ,, yTmp, ), ), {, hNew, =, FastMath]
[), ?, y1, :, y1Diag, [, k, -, 1, ], ,, yTmp, ), ), {, hNew, =, FastMath, ., abs]
[:, y1Diag, [, k, -, 1, ], ,, yTmp, ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (]
[,, yTmp, ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false]
[[, k, -, 1, ], ,, yTmp, ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *]
[], ,, yTmp, ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,]
[-, 1, ], ,, yTmp, ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,]
[], ,, yTmp, ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,]
[), ), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, ), )]
[=, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, ), ), ;, reject, =, true]
[;, reject, =, true, ;, loop, =, false, ;, }, else, {, if, (, k, >, 0, ), {, extrapolate]
[., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, ), ), ;, reject, =, true, ;, loop]
[), ;, reject, =, true, ;, loop, =, false, ;, }, else, {, if, (, k, >, 0, ), {]
[,, forward, ,, false, ), ), ;, reject, =, true, ;, loop, =, false, ;, }, else, {, if, (]
[*, stabilityReduction, ,, forward, ,, false, ), ), ;, reject, =, true, ;, loop, =, false, ;, }, else, {]
[,, forward, ,, false, ), ), ;, reject, =, true, ;, loop, =, false, ;, }, else, {, if, (]
[,, false, ), ), ;, reject, =, true, ;, loop, =, false, ;, }, else, {, if, (, k, >]
[), ), ;, reject, =, true, ;, loop, =, false, ;, }, else, {, if, (, k, >, 0, )]
[=, true, ;, loop, =, false, ;, }, else, {, if, (, k, >, 0, ), {, extrapolate, (, 0]
[;, loop, =, false, ;, }, else, {, if, (, k, >, 0, ), {, extrapolate, (, 0, ,, k]
[=, false, ;, }, else, {, if, (, k, >, 0, ), {, extrapolate, (, 0, ,, k, ,, y1Diag]
[;, }, else, {, if, (, k, >, 0, ), {, extrapolate, (, 0, ,, k, ,, y1Diag, ,, y1]
[), {, extrapolate, (, 0, ,, k, ,, y1Diag, ,, y1, ), ;, rescale, (, y, ,, y1, ,, scale]
[>, 0, ), {, extrapolate, (, 0, ,, k, ,, y1Diag, ,, y1, ), ;, rescale, (, y, ,, y1]
[), {, extrapolate, (, 0, ,, k, ,, y1Diag, ,, y1, ), ;, rescale, (, y, ,, y1, ,, scale]
[;, rescale, (, y, ,, y1, ,, scale, ), ;, error, =, 0, ;, for, (, int, j, =, 0]
[,, k, ,, y1Diag, ,, y1, ), ;, rescale, (, y, ,, y1, ,, scale, ), ;, error, =, 0]
[,, y1Diag, ,, y1, ), ;, rescale, (, y, ,, y1, ,, scale, ), ;, error, =, 0, ;, for]
[,, y1, ), ;, rescale, (, y, ,, y1, ,, scale, ), ;, error, =, 0, ;, for, (, int]
[), ;, rescale, (, y, ,, y1, ,, scale, ), ;, error, =, 0, ;, for, (, int, j, =]
[;, error, =, 0, ;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {]
[,, y1, ,, scale, ), ;, error, =, 0, ;, for, (, int, j, =, 0, ;, j, <, mainSetDimension]
[,, scale, ), ;, error, =, 0, ;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++]
[), ;, error, =, 0, ;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, )]
[=, 0, ;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, final, double]
[;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, final, double, e, =]
[;, j, <, mainSetDimension, ;, ++, j, ), {, final, double, e, =, FastMath, ., abs, (, y1, [, j]
[;, ++, j, ), {, final, double, e, =, FastMath, ., abs, (, y1, [, j, ], -, y1Diag, []
[<, mainSetDimension, ;, ++, j, ), {, final, double, e, =, FastMath, ., abs, (, y1, [, j, ], -]
[;, ++, j, ), {, final, double, e, =, FastMath, ., abs, (, y1, [, j, ], -, y1Diag, []
[), {, final, double, e, =, FastMath, ., abs, (, y1, [, j, ], -, y1Diag, [, 0, ], []
[), {, final, double, e, =, FastMath, ., abs, (, y1, [, j, ], -, y1Diag, [, 0, ], []
[;, error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, if]
[/, scale, [, j, ], ;, error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error]
[., abs, (, y1, [, j, ], -, y1Diag, [, 0, ], [, j, ], ), /, scale, [, j]
[), /, scale, [, j, ], ;, error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (]
[-, y1Diag, [, 0, ], [, j, ], ), /, scale, [, j, ], ;, error, +=, e, *, e]
[[, j, ], -, y1Diag, [, 0, ], [, j, ], ), /, scale, [, j, ], ;, error, +=]
[], -, y1Diag, [, 0, ], [, j, ], ), /, scale, [, j, ], ;, error, +=, e, *]
[), /, scale, [, j, ], ;, error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (]
[[, j, ], ), /, scale, [, j, ], ;, error, +=, e, *, e, ;, }, error, =, FastMath]
[[, 0, ], [, j, ], ), /, scale, [, j, ], ;, error, +=, e, *, e, ;, }]
[], [, j, ], ), /, scale, [, j, ], ;, error, +=, e, *, e, ;, }, error, =]
[], ), /, scale, [, j, ], ;, error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt]
[;, error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, if]
[[, j, ], ;, error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error, /, mainSetDimension]
[], ;, error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;]
[+=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, if, (, (]
[;, }, error, =, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, if, (, (, error, >, 1.0e15, )]
[*, e, ;, }, error, =, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, if, (, (, error, >]
[;, }, error, =, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, if, (, (, error, >, 1.0e15, )]
[=, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, if, (, (, error, >, 1.0e15, ), ||, (, (]
[;, if, (, (, error, >, 1.0e15, ), ||, (, (, k, >, 1, ), &&, (, error, >, maxError]
[., sqrt, (, error, /, mainSetDimension, ), ;, if, (, (, error, >, 1.0e15, ), ||, (, (, k, >]
[), ;, if, (, (, error, >, 1.0e15, ), ||, (, (, k, >, 1, ), &&, (, error, >]
[/, mainSetDimension, ), ;, if, (, (, error, >, 1.0e15, ), ||, (, (, k, >, 1, ), &&, (]
[), ;, if, (, (, error, >, 1.0e15, ), ||, (, (, k, >, 1, ), &&, (, error, >]
[), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, ), ), ;]
[||, (, (, k, >, 1, ), &&, (, error, >, maxError, ), ), ), {, hNew, =, FastMath, .]
[), ||, (, (, k, >, 1, ), &&, (, error, >, maxError, ), ), ), {, hNew, =, FastMath]
[>, 1.0e15, ), ||, (, (, k, >, 1, ), &&, (, error, >, maxError, ), ), ), {, hNew]
[), ||, (, (, k, >, 1, ), &&, (, error, >, maxError, ), ), ), {, hNew, =, FastMath]
[), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, ), ), ;]
[), ), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, ), )]
[&&, (, error, >, maxError, ), ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction]
[), &&, (, error, >, maxError, ), ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *]
[>, 1, ), &&, (, error, >, maxError, ), ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (]
[), &&, (, error, >, maxError, ), ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *]
[), ), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, ), )]
[), ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, )]
[>, maxError, ), ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,]
[), ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, )]
[=, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, ), ), ;, reject, =, true]
[;, reject, =, true, ;, loop, =, false, ;, }, else, {, maxError, =, FastMath, ., max, (, 4, *]
[., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, ), ), ;, reject, =, true, ;, loop]
[), ;, reject, =, true, ;, loop, =, false, ;, }, else, {, maxError, =, FastMath, ., max, (, 4]
[,, forward, ,, false, ), ), ;, reject, =, true, ;, loop, =, false, ;, }, else, {, maxError, =]
[*, stabilityReduction, ,, forward, ,, false, ), ), ;, reject, =, true, ;, loop, =, false, ;, }, else, {]
[,, forward, ,, false, ), ), ;, reject, =, true, ;, loop, =, false, ;, }, else, {, maxError, =]
[,, false, ), ), ;, reject, =, true, ;, loop, =, false, ;, }, else, {, maxError, =, FastMath, .]
[), ), ;, reject, =, true, ;, loop, =, false, ;, }, else, {, maxError, =, FastMath, ., max, (]
[=, true, ;, loop, =, false, ;, }, else, {, maxError, =, FastMath, ., max, (, 4, *, error, ,]
[;, loop, =, false, ;, }, else, {, maxError, =, FastMath, ., max, (, 4, *, error, ,, 1.0, )]
[=, false, ;, }, else, {, maxError, =, FastMath, ., max, (, 4, *, error, ,, 1.0, ), ;, final]
[;, }, else, {, maxError, =, FastMath, ., max, (, 4, *, error, ,, 1.0, ), ;, final, double, exp]
[=, FastMath, ., max, (, 4, *, error, ,, 1.0, ), ;, final, double, exp, =, 1.0, /, (, 2]
[;, final, double, exp, =, 1.0, /, (, 2, *, k, +, 1, ), ;, double, fac, =, stepControl2, /]
[., max, (, 4, *, error, ,, 1.0, ), ;, final, double, exp, =, 1.0, /, (, 2, *, k]
[,, 1.0, ), ;, final, double, exp, =, 1.0, /, (, 2, *, k, +, 1, ), ;, double, fac]
[*, error, ,, 1.0, ), ;, final, double, exp, =, 1.0, /, (, 2, *, k, +, 1, ), ;]
[,, 1.0, ), ;, final, double, exp, =, 1.0, /, (, 2, *, k, +, 1, ), ;, double, fac]
[), ;, final, double, exp, =, 1.0, /, (, 2, *, k, +, 1, ), ;, double, fac, =, stepControl2]
[;, double, fac, =, stepControl2, /, FastMath, ., pow, (, error, /, stepControl1, ,, exp, ), ;, final, double, pow]
[/, (, 2, *, k, +, 1, ), ;, double, fac, =, stepControl2, /, FastMath, ., pow, (, error, /]
[;, double, fac, =, stepControl2, /, FastMath, ., pow, (, error, /, stepControl1, ,, exp, ), ;, final, double, pow]
[), ;, double, fac, =, stepControl2, /, FastMath, ., pow, (, error, /, stepControl1, ,, exp, ), ;, final, double]
[+, 1, ), ;, double, fac, =, stepControl2, /, FastMath, ., pow, (, error, /, stepControl1, ,, exp, ), ;]
[*, k, +, 1, ), ;, double, fac, =, stepControl2, /, FastMath, ., pow, (, error, /, stepControl1, ,, exp]
[+, 1, ), ;, double, fac, =, stepControl2, /, FastMath, ., pow, (, error, /, stepControl1, ,, exp, ), ;]
[), ;, double, fac, =, stepControl2, /, FastMath, ., pow, (, error, /, stepControl1, ,, exp, ), ;, final, double]
[;, final, double, pow, =, FastMath, ., pow, (, stepControl3, ,, exp, ), ;, fac, =, FastMath, ., max, (]
[/, FastMath, ., pow, (, error, /, stepControl1, ,, exp, ), ;, final, double, pow, =, FastMath, ., pow, (]
[;, final, double, pow, =, FastMath, ., pow, (, stepControl3, ,, exp, ), ;, fac, =, FastMath, ., max, (]
[., pow, (, error, /, stepControl1, ,, exp, ), ;, final, double, pow, =, FastMath, ., pow, (, stepControl3, ,]
[,, exp, ), ;, final, double, pow, =, FastMath, ., pow, (, stepControl3, ,, exp, ), ;, fac, =, FastMath]
[/, stepControl1, ,, exp, ), ;, final, double, pow, =, FastMath, ., pow, (, stepControl3, ,, exp, ), ;, fac]
[,, exp, ), ;, final, double, pow, =, FastMath, ., pow, (, stepControl3, ,, exp, ), ;, fac, =, FastMath]
[), ;, final, double, pow, =, FastMath, ., pow, (, stepControl3, ,, exp, ), ;, fac, =, FastMath, ., max]
[;, fac, =, FastMath, ., max, (, pow, /, stepControl4, ,, FastMath, ., min, (, 1, /, pow, ,, fac]
[., pow, (, stepControl3, ,, exp, ), ;, fac, =, FastMath, ., max, (, pow, /, stepControl4, ,, FastMath, .]
[,, exp, ), ;, fac, =, FastMath, ., max, (, pow, /, stepControl4, ,, FastMath, ., min, (, 1, /]
[), ;, fac, =, FastMath, ., max, (, pow, /, stepControl4, ,, FastMath, ., min, (, 1, /, pow, ,]
[=, FastMath, ., max, (, pow, /, stepControl4, ,, FastMath, ., min, (, 1, /, pow, ,, fac, ), )]
[;, optimalStep, [, k, ], =, FastMath, ., abs, (, filterStep, (, stepSize, *, fac, ,, forward, ,, true, )]
[., max, (, pow, /, stepControl4, ,, FastMath, ., min, (, 1, /, pow, ,, fac, ), ), ;, optimalStep]
[,, FastMath, ., min, (, 1, /, pow, ,, fac, ), ), ;, optimalStep, [, k, ], =, FastMath, .]
[/, stepControl4, ,, FastMath, ., min, (, 1, /, pow, ,, fac, ), ), ;, optimalStep, [, k, ], =]
[,, FastMath, ., min, (, 1, /, pow, ,, fac, ), ), ;, optimalStep, [, k, ], =, FastMath, .]
[), ;, optimalStep, [, k, ], =, FastMath, ., abs, (, filterStep, (, stepSize, *, fac, ,, forward, ,, true]
[., min, (, 1, /, pow, ,, fac, ), ), ;, optimalStep, [, k, ], =, FastMath, ., abs, (]
[,, fac, ), ), ;, optimalStep, [, k, ], =, FastMath, ., abs, (, filterStep, (, stepSize, *, fac, ,]
[/, pow, ,, fac, ), ), ;, optimalStep, [, k, ], =, FastMath, ., abs, (, filterStep, (, stepSize, *]
[,, fac, ), ), ;, optimalStep, [, k, ], =, FastMath, ., abs, (, filterStep, (, stepSize, *, fac, ,]
[), ), ;, optimalStep, [, k, ], =, FastMath, ., abs, (, filterStep, (, stepSize, *, fac, ,, forward, ,]
[=, FastMath, ., abs, (, filterStep, (, stepSize, *, fac, ,, forward, ,, true, ), ), ;, costPerTimeUnit, [, k]
[[, k, ], =, FastMath, ., abs, (, filterStep, (, stepSize, *, fac, ,, forward, ,, true, ), ), ;]
[], =, FastMath, ., abs, (, filterStep, (, stepSize, *, fac, ,, forward, ,, true, ), ), ;, costPerTimeUnit, []
[;, costPerTimeUnit, [, k, ], =, costPerStep, [, k, ], /, optimalStep, [, k, ], ;, switch, (, k, -]
[., abs, (, filterStep, (, stepSize, *, fac, ,, forward, ,, true, ), ), ;, costPerTimeUnit, [, k, ], =]
[), ;, costPerTimeUnit, [, k, ], =, costPerStep, [, k, ], /, optimalStep, [, k, ], ;, switch, (, k]
[,, forward, ,, true, ), ), ;, costPerTimeUnit, [, k, ], =, costPerStep, [, k, ], /, optimalStep, [, k]
[*, fac, ,, forward, ,, true, ), ), ;, costPerTimeUnit, [, k, ], =, costPerStep, [, k, ], /, optimalStep]
[,, forward, ,, true, ), ), ;, costPerTimeUnit, [, k, ], =, costPerStep, [, k, ], /, optimalStep, [, k]
[,, true, ), ), ;, costPerTimeUnit, [, k, ], =, costPerStep, [, k, ], /, optimalStep, [, k, ], ;]
[), ), ;, costPerTimeUnit, [, k, ], =, costPerStep, [, k, ], /, optimalStep, [, k, ], ;, switch, (]
[=, costPerStep, [, k, ], /, optimalStep, [, k, ], ;, switch, (, k, -, targetIter, ), {, case, -]
[[, k, ], =, costPerStep, [, k, ], /, optimalStep, [, k, ], ;, switch, (, k, -, targetIter, )]
[], =, costPerStep, [, k, ], /, optimalStep, [, k, ], ;, switch, (, k, -, targetIter, ), {, case]
[;, switch, (, k, -, targetIter, ), {, case, -, 1, :, if, (, (, targetIter, >, 1, ), &&]
[/, optimalStep, [, k, ], ;, switch, (, k, -, targetIter, ), {, case, -, 1, :, if, (, (]
[[, k, ], /, optimalStep, [, k, ], ;, switch, (, k, -, targetIter, ), {, case, -, 1, :]
[], /, optimalStep, [, k, ], ;, switch, (, k, -, targetIter, ), {, case, -, 1, :, if, (]
[;, switch, (, k, -, targetIter, ), {, case, -, 1, :, if, (, (, targetIter, >, 1, ), &&]
[[, k, ], ;, switch, (, k, -, targetIter, ), {, case, -, 1, :, if, (, (, targetIter, >]
[], ;, switch, (, k, -, targetIter, ), {, case, -, 1, :, if, (, (, targetIter, >, 1, )]
[), {, case, -, 1, :, if, (, (, targetIter, >, 1, ), &&, !, previousRejected, ), {, if, (]
[-, targetIter, ), {, case, -, 1, :, if, (, (, targetIter, >, 1, ), &&, !, previousRejected, ), {]
[), {, case, -, 1, :, if, (, (, targetIter, >, 1, ), &&, !, previousRejected, ), {, if, (]
[:, if, (, (, targetIter, >, 1, ), &&, !, previousRejected, ), {, if, (, error, <=, 1.0, ), {]
[:, if, (, (, targetIter, >, 1, ), &&, !, previousRejected, ), {, if, (, error, <=, 1.0, ), {]
[), {, if, (, error, <=, 1.0, ), {, loop, =, false, ;, }, else, {, final, double, ratio, =]
[&&, !, previousRejected, ), {, if, (, error, <=, 1.0, ), {, loop, =, false, ;, }, else, {, final]
[), &&, !, previousRejected, ), {, if, (, error, <=, 1.0, ), {, loop, =, false, ;, }, else, {]
[>, 1, ), &&, !, previousRejected, ), {, if, (, error, <=, 1.0, ), {, loop, =, false, ;, }]
[), &&, !, previousRejected, ), {, if, (, error, <=, 1.0, ), {, loop, =, false, ;, }, else, {]
[), {, if, (, error, <=, 1.0, ), {, loop, =, false, ;, }, else, {, final, double, ratio, =]
[), {, if, (, error, <=, 1.0, ), {, loop, =, false, ;, }, else, {, final, double, ratio, =]
[), {, loop, =, false, ;, }, else, {, final, double, ratio, =, (, (, double, ), sequence, [, targetIter]
[<=, 1.0, ), {, loop, =, false, ;, }, else, {, final, double, ratio, =, (, (, double, ), sequence]
[), {, loop, =, false, ;, }, else, {, final, double, ratio, =, (, (, double, ), sequence, [, targetIter]
[=, false, ;, }, else, {, final, double, ratio, =, (, (, double, ), sequence, [, targetIter, ], *, sequence]
[;, }, else, {, final, double, ratio, =, (, (, double, ), sequence, [, targetIter, ], *, sequence, [, targetIter]
[;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false, ;, targetIter, =]
[/, (, sequence, [, 0, ], *, sequence, [, 0, ], ), ;, if, (, error, >, ratio, *, ratio]
[), /, (, sequence, [, 0, ], *, sequence, [, 0, ], ), ;, if, (, error, >, ratio, *]
[*, sequence, [, targetIter, +, 1, ], ), /, (, sequence, [, 0, ], *, sequence, [, 0, ], )]
[*, sequence, [, targetIter, +, 1, ], ), /, (, sequence, [, 0, ], *, sequence, [, 0, ], )]
[[, targetIter, ], *, sequence, [, targetIter, +, 1, ], ), /, (, sequence, [, 0, ], *, sequence, []
[], *, sequence, [, targetIter, +, 1, ], ), /, (, sequence, [, 0, ], *, sequence, [, 0, ]]
[), /, (, sequence, [, 0, ], *, sequence, [, 0, ], ), ;, if, (, error, >, ratio, *]
[[, targetIter, +, 1, ], ), /, (, sequence, [, 0, ], *, sequence, [, 0, ], ), ;, if]
[], ), /, (, sequence, [, 0, ], *, sequence, [, 0, ], ), ;, if, (, error, >, ratio]
[+, 1, ], ), /, (, sequence, [, 0, ], *, sequence, [, 0, ], ), ;, if, (, error]
[], ), /, (, sequence, [, 0, ], *, sequence, [, 0, ], ), ;, if, (, error, >, ratio]
[;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false, ;, targetIter, =]
[), ;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false, ;, targetIter]
[*, sequence, [, 0, ], ), ;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;]
[[, 0, ], *, sequence, [, 0, ], ), ;, if, (, error, >, ratio, *, ratio, ), {, reject]
[], *, sequence, [, 0, ], ), ;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true]
[), ;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false, ;, targetIter]
[[, 0, ], ), ;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;, loop, =]
[], ), ;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false, ;]
[), {, reject, =, true, ;, loop, =, false, ;, targetIter, =, k, ;, if, (, (, targetIter, >, 1]
[>, ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false, ;, targetIter, =, k, ;, if, (]
[), {, reject, =, true, ;, loop, =, false, ;, targetIter, =, k, ;, if, (, (, targetIter, >, 1]
[*, ratio, ), {, reject, =, true, ;, loop, =, false, ;, targetIter, =, k, ;, if, (, (, targetIter]
[), {, reject, =, true, ;, loop, =, false, ;, targetIter, =, k, ;, if, (, (, targetIter, >, 1]
[=, true, ;, loop, =, false, ;, targetIter, =, k, ;, if, (, (, targetIter, >, 1, ), &&, (]
[;, loop, =, false, ;, targetIter, =, k, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, []
[=, false, ;, targetIter, =, k, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -]
[;, targetIter, =, k, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ]]
[=, k, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1]
[;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit]
[), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, }, break, ;, case, 0]
[&&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter]
[), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --]
[>, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), )]
[), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --]
[), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, }, break, ;, case, 0]
[), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, }, break, ;, case]
[<, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ]]
[[, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew]
[], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter]
[-, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep]
[], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter]
[), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, }, break, ;, case]
[*, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }]
[), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, }, break, ;, case]
[[, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, }]
[], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, }, break, ;]
[;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, }, break, ;, case, 0, :, if, (, error]
[;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, }, break, ;, case, 0, :, if, (, error]
[=, optimalStep, [, targetIter, ], ;, }, }, }, break, ;, case, 0, :, if, (, error, <=, 1.0, )]
[;, }, }, }, break, ;, case, 0, :, if, (, error, <=, 1.0, ), {, loop, =, false, ;]
[[, targetIter, ], ;, }, }, }, break, ;, case, 0, :, if, (, error, <=, 1.0, ), {, loop]
[], ;, }, }, }, break, ;, case, 0, :, if, (, error, <=, 1.0, ), {, loop, =, false]
[:, if, (, error, <=, 1.0, ), {, loop, =, false, ;, }, else, {, final, double, ratio, =, (]
[), {, loop, =, false, ;, }, else, {, final, double, ratio, =, (, (, double, ), sequence, [, k]
[<=, 1.0, ), {, loop, =, false, ;, }, else, {, final, double, ratio, =, (, (, double, ), sequence]
[), {, loop, =, false, ;, }, else, {, final, double, ratio, =, (, (, double, ), sequence, [, k]
[=, false, ;, }, else, {, final, double, ratio, =, (, (, double, ), sequence, [, k, +, 1, ]]
[;, }, else, {, final, double, ratio, =, (, (, double, ), sequence, [, k, +, 1, ], ), /]
[;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false, ;, if, (]
[/, sequence, [, 0, ], ;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;, loop]
[), /, sequence, [, 0, ], ;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;]
[), /, sequence, [, 0, ], ;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;]
[[, k, +, 1, ], ), /, sequence, [, 0, ], ;, if, (, error, >, ratio, *, ratio, )]
[], ), /, sequence, [, 0, ], ;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true]
[+, 1, ], ), /, sequence, [, 0, ], ;, if, (, error, >, ratio, *, ratio, ), {, reject]
[], ), /, sequence, [, 0, ], ;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true]
[;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false, ;, if, (]
[[, 0, ], ;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false]
[], ;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false, ;, if]
[), {, reject, =, true, ;, loop, =, false, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit]
[>, ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false, ;, if, (, (, targetIter, >, 1]
[), {, reject, =, true, ;, loop, =, false, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit]
[*, ratio, ), {, reject, =, true, ;, loop, =, false, ;, if, (, (, targetIter, >, 1, ), &&]
[), {, reject, =, true, ;, loop, =, false, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit]
[=, true, ;, loop, =, false, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -]
[;, loop, =, false, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ]]
[=, false, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1]
[;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit]
[), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, break, ;, case, 1, :]
[&&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter]
[), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --]
[>, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), )]
[), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --]
[), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, break, ;, case, 1, :]
[), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, break, ;, case, 1]
[<, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ]]
[[, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew]
[], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter]
[-, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep]
[], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter]
[), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, break, ;, case, 1]
[*, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }]
[), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, break, ;, case, 1]
[[, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, break]
[], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, break, ;, case]
[;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, break, ;, case, 1, :, if, (, error, >]
[;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, break, ;, case, 1, :, if, (, error, >]
[=, optimalStep, [, targetIter, ], ;, }, }, break, ;, case, 1, :, if, (, error, >, 1.0, ), {]
[;, }, }, break, ;, case, 1, :, if, (, error, >, 1.0, ), {, reject, =, true, ;, if]
[[, targetIter, ], ;, }, }, break, ;, case, 1, :, if, (, error, >, 1.0, ), {, reject, =]
[], ;, }, }, break, ;, case, 1, :, if, (, error, >, 1.0, ), {, reject, =, true, ;]
[:, if, (, error, >, 1.0, ), {, reject, =, true, ;, if, (, (, targetIter, >, 1, ), &&]
[), {, reject, =, true, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1]
[>, 1.0, ), {, reject, =, true, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter]
[), {, reject, =, true, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1]
[=, true, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1]
[;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit]
[), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, loop, =, false, ;, break, ;]
[&&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter]
[), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --]
[>, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), )]
[), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --]
[), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, loop, =, false, ;, break, ;]
[), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, loop, =, false, ;, break]
[<, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ]]
[[, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew]
[], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter]
[-, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep]
[], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter]
[), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, loop, =, false, ;, break]
[*, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }]
[), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, loop, =, false, ;, break]
[[, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, loop, =]
[], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, loop, =, false, ;]
[;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, loop, =, false, ;, break, ;, default, :, if, (]
[;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, loop, =, false, ;, break, ;, default, :, if, (]
[=, optimalStep, [, targetIter, ], ;, }, loop, =, false, ;, break, ;, default, :, if, (, (, firstTime, ||]
[;, }, loop, =, false, ;, break, ;, default, :, if, (, (, firstTime, ||, isLastStep, ), &&, (, error]
[[, targetIter, ], ;, }, loop, =, false, ;, break, ;, default, :, if, (, (, firstTime, ||, isLastStep, )]
[], ;, }, loop, =, false, ;, break, ;, default, :, if, (, (, firstTime, ||, isLastStep, ), &&, (]
[=, false, ;, break, ;, default, :, if, (, (, firstTime, ||, isLastStep, ), &&, (, error, <=, 1.0, )]
[;, break, ;, default, :, if, (, (, firstTime, ||, isLastStep, ), &&, (, error, <=, 1.0, ), ), {]
[), {, loop, =, false, ;, }, break, ;, }, }, }, }, }, if, (, !, reject, ), {]
[&&, (, error, <=, 1.0, ), ), {, loop, =, false, ;, }, break, ;, }, }, }, }, }]
[), &&, (, error, <=, 1.0, ), ), {, loop, =, false, ;, }, break, ;, }, }, }, }]
[||, isLastStep, ), &&, (, error, <=, 1.0, ), ), {, loop, =, false, ;, }, break, ;, }, }]
[), &&, (, error, <=, 1.0, ), ), {, loop, =, false, ;, }, break, ;, }, }, }, }]
[), {, loop, =, false, ;, }, break, ;, }, }, }, }, }, if, (, !, reject, ), {]
[), ), {, loop, =, false, ;, }, break, ;, }, }, }, }, }, if, (, !, reject, )]
[<=, 1.0, ), ), {, loop, =, false, ;, }, break, ;, }, }, }, }, }, if, (, !]
[), ), {, loop, =, false, ;, }, break, ;, }, }, }, }, }, if, (, !, reject, )]
[=, false, ;, }, break, ;, }, }, }, }, }, if, (, !, reject, ), {, computeDerivatives, (, stepStart]
[;, }, break, ;, }, }, }, }, }, if, (, !, reject, ), {, computeDerivatives, (, stepStart, +, stepSize]
[), {, computeDerivatives, (, stepStart, +, stepSize, ,, y1, ,, yDot1, ), ;, }, double, hInt, =, getMaxStep, (, )]
[), {, computeDerivatives, (, stepStart, +, stepSize, ,, y1, ,, yDot1, ), ;, }, double, hInt, =, getMaxStep, (, )]
[;, }, double, hInt, =, getMaxStep, (, ), ;, if, (, !, reject, ), {, for, (, int, j, =]
[,, y1, ,, yDot1, ), ;, }, double, hInt, =, getMaxStep, (, ), ;, if, (, !, reject, ), {]
[+, stepSize, ,, y1, ,, yDot1, ), ;, }, double, hInt, =, getMaxStep, (, ), ;, if, (, !, reject]
[,, y1, ,, yDot1, ), ;, }, double, hInt, =, getMaxStep, (, ), ;, if, (, !, reject, ), {]
[,, yDot1, ), ;, }, double, hInt, =, getMaxStep, (, ), ;, if, (, !, reject, ), {, for, (]
[), ;, }, double, hInt, =, getMaxStep, (, ), ;, if, (, !, reject, ), {, for, (, int, j]
[;, if, (, !, reject, ), {, for, (, int, j, =, 1, ;, j, <=, k, ;, ++, j]
[), {, for, (, int, j, =, 1, ;, j, <=, k, ;, ++, j, ), {, extrapolate, (, 0]
[), {, for, (, int, j, =, 1, ;, j, <=, k, ;, ++, j, ), {, extrapolate, (, 0]
[;, j, <=, k, ;, ++, j, ), {, extrapolate, (, 0, ,, j, ,, diagonal, ,, yMidDots, [, 0]
[;, ++, j, ), {, extrapolate, (, 0, ,, j, ,, diagonal, ,, yMidDots, [, 0, ], ), ;, }]
[<=, k, ;, ++, j, ), {, extrapolate, (, 0, ,, j, ,, diagonal, ,, yMidDots, [, 0, ], )]
[;, ++, j, ), {, extrapolate, (, 0, ,, j, ,, diagonal, ,, yMidDots, [, 0, ], ), ;, }]
[), {, extrapolate, (, 0, ,, j, ,, diagonal, ,, yMidDots, [, 0, ], ), ;, }, final, int, mu]
[), {, extrapolate, (, 0, ,, j, ,, diagonal, ,, yMidDots, [, 0, ], ), ;, }, final, int, mu]
[;, }, final, int, mu, =, 2, *, k, -, mudif, +, 3, ;, for, (, int, l, =, 0]
[,, j, ,, diagonal, ,, yMidDots, [, 0, ], ), ;, }, final, int, mu, =, 2, *, k, -]
[,, diagonal, ,, yMidDots, [, 0, ], ), ;, }, final, int, mu, =, 2, *, k, -, mudif, +]
[,, yMidDots, [, 0, ], ), ;, }, final, int, mu, =, 2, *, k, -, mudif, +, 3, ;]
[), ;, }, final, int, mu, =, 2, *, k, -, mudif, +, 3, ;, for, (, int, l, =]
[[, 0, ], ), ;, }, final, int, mu, =, 2, *, k, -, mudif, +, 3, ;, for, (]
[], ), ;, }, final, int, mu, =, 2, *, k, -, mudif, +, 3, ;, for, (, int, l]
[;, for, (, int, l, =, 0, ;, l, <, mu, ;, ++, l, ), {, final, int, l2, =]
[+, 3, ;, for, (, int, l, =, 0, ;, l, <, mu, ;, ++, l, ), {, final, int]
[-, mudif, +, 3, ;, for, (, int, l, =, 0, ;, l, <, mu, ;, ++, l, ), {]
[*, k, -, mudif, +, 3, ;, for, (, int, l, =, 0, ;, l, <, mu, ;, ++, l]
[-, mudif, +, 3, ;, for, (, int, l, =, 0, ;, l, <, mu, ;, ++, l, ), {]
[+, 3, ;, for, (, int, l, =, 0, ;, l, <, mu, ;, ++, l, ), {, final, int]
[;, for, (, int, l, =, 0, ;, l, <, mu, ;, ++, l, ), {, final, int, l2, =]
[;, l, <, mu, ;, ++, l, ), {, final, int, l2, =, l, /, 2, ;, double, factor, =]
[;, ++, l, ), {, final, int, l2, =, l, /, 2, ;, double, factor, =, FastMath, ., pow, (]
[<, mu, ;, ++, l, ), {, final, int, l2, =, l, /, 2, ;, double, factor, =, FastMath, .]
[;, ++, l, ), {, final, int, l2, =, l, /, 2, ;, double, factor, =, FastMath, ., pow, (]
[), {, final, int, l2, =, l, /, 2, ;, double, factor, =, FastMath, ., pow, (, 0.5, *, sequence]
[), {, final, int, l2, =, l, /, 2, ;, double, factor, =, FastMath, ., pow, (, 0.5, *, sequence]
[;, double, factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, l2, ], ,, l, ), ;, int, middleIndex]
[/, 2, ;, double, factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, l2, ], ,, l, ), ;]
[;, double, factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, l2, ], ,, l, ), ;, int, middleIndex]
[;, int, middleIndex, =, fk, [, l2, ], ., length, /, 2, ;, for, (, int, i, =, 0, ;]
[., pow, (, 0.5, *, sequence, [, l2, ], ,, l, ), ;, int, middleIndex, =, fk, [, l2, ]]
[,, l, ), ;, int, middleIndex, =, fk, [, l2, ], ., length, /, 2, ;, for, (, int, i]
[*, sequence, [, l2, ], ,, l, ), ;, int, middleIndex, =, fk, [, l2, ], ., length, /, 2]
[,, l, ), ;, int, middleIndex, =, fk, [, l2, ], ., length, /, 2, ;, for, (, int, i]
[[, l2, ], ,, l, ), ;, int, middleIndex, =, fk, [, l2, ], ., length, /, 2, ;, for]
[], ,, l, ), ;, int, middleIndex, =, fk, [, l2, ], ., length, /, 2, ;, for, (, int]
[), ;, int, middleIndex, =, fk, [, l2, ], ., length, /, 2, ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, yMidDots, []
[/, 2, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[., length, /, 2, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i]
[[, l2, ], ., length, /, 2, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length]
[], ., length, /, 2, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++]
[;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, yMidDots, []
[;, i, <, y0, ., length, ;, ++, i, ), {, yMidDots, [, l, +, 1, ], [, i, ]]
[;, ++, i, ), {, yMidDots, [, l, +, 1, ], [, i, ], =, factor, *, fk, [, l2]
[<, y0, ., length, ;, ++, i, ), {, yMidDots, [, l, +, 1, ], [, i, ], =, factor]
[;, ++, i, ), {, yMidDots, [, l, +, 1, ], [, i, ], =, factor, *, fk, [, l2]
[., length, ;, ++, i, ), {, yMidDots, [, l, +, 1, ], [, i, ], =, factor, *, fk]
[), {, yMidDots, [, l, +, 1, ], [, i, ], =, factor, *, fk, [, l2, ], [, middleIndex]
[), {, yMidDots, [, l, +, 1, ], [, i, ], =, factor, *, fk, [, l2, ], [, middleIndex]
[=, factor, *, fk, [, l2, ], [, middleIndex, +, l, ], [, i, ], ;, }, for, (, int]
[[, i, ], =, factor, *, fk, [, l2, ], [, middleIndex, +, l, ], [, i, ], ;, }]
[[, l, +, 1, ], [, i, ], =, factor, *, fk, [, l2, ], [, middleIndex, +, l, ]]
[], [, i, ], =, factor, *, fk, [, l2, ], [, middleIndex, +, l, ], [, i, ], ;]
[+, 1, ], [, i, ], =, factor, *, fk, [, l2, ], [, middleIndex, +, l, ], [, i]
[], [, i, ], =, factor, *, fk, [, l2, ], [, middleIndex, +, l, ], [, i, ], ;]
[], =, factor, *, fk, [, l2, ], [, middleIndex, +, l, ], [, i, ], ;, }, for, (]
[;, }, for, (, int, j, =, 1, ;, j, <=, k, -, l2, ;, ++, j, ), {, factor]
[*, fk, [, l2, ], [, middleIndex, +, l, ], [, i, ], ;, }, for, (, int, j, =]
[;, }, for, (, int, j, =, 1, ;, j, <=, k, -, l2, ;, ++, j, ), {, factor]
[[, i, ], ;, }, for, (, int, j, =, 1, ;, j, <=, k, -, l2, ;, ++, j]
[[, middleIndex, +, l, ], [, i, ], ;, }, for, (, int, j, =, 1, ;, j, <=, k]
[[, l2, ], [, middleIndex, +, l, ], [, i, ], ;, }, for, (, int, j, =, 1, ;]
[], [, middleIndex, +, l, ], [, i, ], ;, }, for, (, int, j, =, 1, ;, j, <=]
[], [, i, ], ;, }, for, (, int, j, =, 1, ;, j, <=, k, -, l2, ;, ++]
[+, l, ], [, i, ], ;, }, for, (, int, j, =, 1, ;, j, <=, k, -, l2]
[], [, i, ], ;, }, for, (, int, j, =, 1, ;, j, <=, k, -, l2, ;, ++]
[], ;, }, for, (, int, j, =, 1, ;, j, <=, k, -, l2, ;, ++, j, ), {]
[;, j, <=, k, -, l2, ;, ++, j, ), {, factor, =, FastMath, ., pow, (, 0.5, *, sequence]
[;, ++, j, ), {, factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, j, +, l2, ], ,]
[<=, k, -, l2, ;, ++, j, ), {, factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, j]
[;, ++, j, ), {, factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, j, +, l2, ], ,]
[-, l2, ;, ++, j, ), {, factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, j, +, l2]
[;, ++, j, ), {, factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, j, +, l2, ], ,]
[), {, factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, j, +, l2, ], ,, l, ), ;]
[), {, factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, j, +, l2, ], ,, l, ), ;]
[=, FastMath, ., pow, (, 0.5, *, sequence, [, j, +, l2, ], ,, l, ), ;, middleIndex, =, fk]
[;, middleIndex, =, fk, [, l2, +, j, ], ., length, /, 2, ;, for, (, int, i, =, 0]
[., pow, (, 0.5, *, sequence, [, j, +, l2, ], ,, l, ), ;, middleIndex, =, fk, [, l2]
[,, l, ), ;, middleIndex, =, fk, [, l2, +, j, ], ., length, /, 2, ;, for, (, int]
[*, sequence, [, j, +, l2, ], ,, l, ), ;, middleIndex, =, fk, [, l2, +, j, ], .]
[,, l, ), ;, middleIndex, =, fk, [, l2, +, j, ], ., length, /, 2, ;, for, (, int]
[[, j, +, l2, ], ,, l, ), ;, middleIndex, =, fk, [, l2, +, j, ], ., length, /]
[], ,, l, ), ;, middleIndex, =, fk, [, l2, +, j, ], ., length, /, 2, ;, for, (]
[+, l2, ], ,, l, ), ;, middleIndex, =, fk, [, l2, +, j, ], ., length, /, 2, ;]
[], ,, l, ), ;, middleIndex, =, fk, [, l2, +, j, ], ., length, /, 2, ;, for, (]
[), ;, middleIndex, =, fk, [, l2, +, j, ], ., length, /, 2, ;, for, (, int, i, =]
[=, fk, [, l2, +, j, ], ., length, /, 2, ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, diagonal, []
[/, 2, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[., length, /, 2, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i]
[[, l2, +, j, ], ., length, /, 2, ;, for, (, int, i, =, 0, ;, i, <, y0]
[], ., length, /, 2, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++]
[+, j, ], ., length, /, 2, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length]
[], ., length, /, 2, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++]
[;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, diagonal, []
[;, i, <, y0, ., length, ;, ++, i, ), {, diagonal, [, j, -, 1, ], [, i, ]]
[;, ++, i, ), {, diagonal, [, j, -, 1, ], [, i, ], =, factor, *, fk, [, l2]
[<, y0, ., length, ;, ++, i, ), {, diagonal, [, j, -, 1, ], [, i, ], =, factor]
[;, ++, i, ), {, diagonal, [, j, -, 1, ], [, i, ], =, factor, *, fk, [, l2]
[., length, ;, ++, i, ), {, diagonal, [, j, -, 1, ], [, i, ], =, factor, *, fk]
[), {, diagonal, [, j, -, 1, ], [, i, ], =, factor, *, fk, [, l2, +, j, ]]
[), {, diagonal, [, j, -, 1, ], [, i, ], =, factor, *, fk, [, l2, +, j, ]]
[=, factor, *, fk, [, l2, +, j, ], [, middleIndex, +, l, ], [, i, ], ;, }, extrapolate]
[[, i, ], =, factor, *, fk, [, l2, +, j, ], [, middleIndex, +, l, ], [, i, ]]
[[, j, -, 1, ], [, i, ], =, factor, *, fk, [, l2, +, j, ], [, middleIndex, +]
[], [, i, ], =, factor, *, fk, [, l2, +, j, ], [, middleIndex, +, l, ], [, i]
[-, 1, ], [, i, ], =, factor, *, fk, [, l2, +, j, ], [, middleIndex, +, l, ]]
[], [, i, ], =, factor, *, fk, [, l2, +, j, ], [, middleIndex, +, l, ], [, i]
[], =, factor, *, fk, [, l2, +, j, ], [, middleIndex, +, l, ], [, i, ], ;, }]
[;, }, extrapolate, (, l2, ,, j, ,, diagonal, ,, yMidDots, [, l, +, 1, ], ), ;, }, for]
[*, fk, [, l2, +, j, ], [, middleIndex, +, l, ], [, i, ], ;, }, extrapolate, (, l2]
[;, }, extrapolate, (, l2, ,, j, ,, diagonal, ,, yMidDots, [, l, +, 1, ], ), ;, }, for]
[[, i, ], ;, }, extrapolate, (, l2, ,, j, ,, diagonal, ,, yMidDots, [, l, +, 1, ], )]
[[, middleIndex, +, l, ], [, i, ], ;, }, extrapolate, (, l2, ,, j, ,, diagonal, ,, yMidDots, []
[[, l2, +, j, ], [, middleIndex, +, l, ], [, i, ], ;, }, extrapolate, (, l2, ,, j]
[], [, middleIndex, +, l, ], [, i, ], ;, }, extrapolate, (, l2, ,, j, ,, diagonal, ,, yMidDots]
[+, j, ], [, middleIndex, +, l, ], [, i, ], ;, }, extrapolate, (, l2, ,, j, ,, diagonal]
[], [, middleIndex, +, l, ], [, i, ], ;, }, extrapolate, (, l2, ,, j, ,, diagonal, ,, yMidDots]
[], [, i, ], ;, }, extrapolate, (, l2, ,, j, ,, diagonal, ,, yMidDots, [, l, +, 1, ]]
[+, l, ], [, i, ], ;, }, extrapolate, (, l2, ,, j, ,, diagonal, ,, yMidDots, [, l, +]
[], [, i, ], ;, }, extrapolate, (, l2, ,, j, ,, diagonal, ,, yMidDots, [, l, +, 1, ]]
[], ;, }, extrapolate, (, l2, ,, j, ,, diagonal, ,, yMidDots, [, l, +, 1, ], ), ;, }]
[;, }, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, yMidDots]
[,, j, ,, diagonal, ,, yMidDots, [, l, +, 1, ], ), ;, }, for, (, int, i, =, 0]
[,, diagonal, ,, yMidDots, [, l, +, 1, ], ), ;, }, for, (, int, i, =, 0, ;, i]
[,, yMidDots, [, l, +, 1, ], ), ;, }, for, (, int, i, =, 0, ;, i, <, y0]
[), ;, }, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[[, l, +, 1, ], ), ;, }, for, (, int, i, =, 0, ;, i, <, y0, ., length]
[], ), ;, }, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, )]
[+, 1, ], ), ;, }, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++]
[], ), ;, }, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, )]
[;, i, <, y0, ., length, ;, ++, i, ), {, yMidDots, [, l, +, 1, ], [, i, ]]
[;, ++, i, ), {, yMidDots, [, l, +, 1, ], [, i, ], *=, stepSize, ;, }, for, (]
[<, y0, ., length, ;, ++, i, ), {, yMidDots, [, l, +, 1, ], [, i, ], *=, stepSize]
[;, ++, i, ), {, yMidDots, [, l, +, 1, ], [, i, ], *=, stepSize, ;, }, for, (]
[., length, ;, ++, i, ), {, yMidDots, [, l, +, 1, ], [, i, ], *=, stepSize, ;, }]
[), {, yMidDots, [, l, +, 1, ], [, i, ], *=, stepSize, ;, }, for, (, int, j, =]
[), {, yMidDots, [, l, +, 1, ], [, i, ], *=, stepSize, ;, }, for, (, int, j, =]
[*=, stepSize, ;, }, for, (, int, j, =, (, l, +, 1, ), /, 2, ;, j, <=, k]
[[, i, ], *=, stepSize, ;, }, for, (, int, j, =, (, l, +, 1, ), /, 2, ;]
[[, l, +, 1, ], [, i, ], *=, stepSize, ;, }, for, (, int, j, =, (, l, +]
[], [, i, ], *=, stepSize, ;, }, for, (, int, j, =, (, l, +, 1, ), /, 2]
[+, 1, ], [, i, ], *=, stepSize, ;, }, for, (, int, j, =, (, l, +, 1, )]
[], [, i, ], *=, stepSize, ;, }, for, (, int, j, =, (, l, +, 1, ), /, 2]
[], *=, stepSize, ;, }, for, (, int, j, =, (, l, +, 1, ), /, 2, ;, j, <=]
[;, }, for, (, int, j, =, (, l, +, 1, ), /, 2, ;, j, <=, k, ;, ++]
[;, j, <=, k, ;, ++, j, ), {, for, (, int, m, =, fk, [, j, ], ., length]
[/, 2, ;, j, <=, k, ;, ++, j, ), {, for, (, int, m, =, fk, [, j, ]]
[), /, 2, ;, j, <=, k, ;, ++, j, ), {, for, (, int, m, =, fk, [, j]
[+, 1, ), /, 2, ;, j, <=, k, ;, ++, j, ), {, for, (, int, m, =, fk]
[), /, 2, ;, j, <=, k, ;, ++, j, ), {, for, (, int, m, =, fk, [, j]
[;, j, <=, k, ;, ++, j, ), {, for, (, int, m, =, fk, [, j, ], ., length]
[;, ++, j, ), {, for, (, int, m, =, fk, [, j, ], ., length, -, 1, ;, m]
[<=, k, ;, ++, j, ), {, for, (, int, m, =, fk, [, j, ], ., length, -, 1]
[;, ++, j, ), {, for, (, int, m, =, fk, [, j, ], ., length, -, 1, ;, m]
[), {, for, (, int, m, =, fk, [, j, ], ., length, -, 1, ;, m, >=, 2, *]
[), {, for, (, int, m, =, fk, [, j, ], ., length, -, 1, ;, m, >=, 2, *]
[;, m, >=, 2, *, (, l, +, 1, ), ;, --, m, ), {, for, (, int, i, =]
[-, 1, ;, m, >=, 2, *, (, l, +, 1, ), ;, --, m, ), {, for, (, int]
[., length, -, 1, ;, m, >=, 2, *, (, l, +, 1, ), ;, --, m, ), {, for]
[[, j, ], ., length, -, 1, ;, m, >=, 2, *, (, l, +, 1, ), ;, --, m]
[], ., length, -, 1, ;, m, >=, 2, *, (, l, +, 1, ), ;, --, m, ), {]
[;, m, >=, 2, *, (, l, +, 1, ), ;, --, m, ), {, for, (, int, i, =]
[;, --, m, ), {, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i]
[>=, 2, *, (, l, +, 1, ), ;, --, m, ), {, for, (, int, i, =, 0, ;]
[;, --, m, ), {, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i]
[*, (, l, +, 1, ), ;, --, m, ), {, for, (, int, i, =, 0, ;, i, <]
[;, --, m, ), {, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i]
[), ;, --, m, ), {, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++]
[+, 1, ), ;, --, m, ), {, for, (, int, i, =, 0, ;, i, <, y0, ., length]
[), ;, --, m, ), {, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++]
[), {, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, fk]
[), {, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, fk]
[;, i, <, y0, ., length, ;, ++, i, ), {, fk, [, j, ], [, m, ], [, i]
[;, ++, i, ), {, fk, [, j, ], [, m, ], [, i, ], -=, fk, [, j, ]]
[<, y0, ., length, ;, ++, i, ), {, fk, [, j, ], [, m, ], [, i, ], -=]
[;, ++, i, ), {, fk, [, j, ], [, m, ], [, i, ], -=, fk, [, j, ]]
[., length, ;, ++, i, ), {, fk, [, j, ], [, m, ], [, i, ], -=, fk, []
[), {, fk, [, j, ], [, m, ], [, i, ], -=, fk, [, j, ], [, m, -]
[), {, fk, [, j, ], [, m, ], [, i, ], -=, fk, [, j, ], [, m, -]
[-=, fk, [, j, ], [, m, -, 2, ], [, i, ], ;, }, }, }, }, if, (]
[[, i, ], -=, fk, [, j, ], [, m, -, 2, ], [, i, ], ;, }, }, }]
[[, m, ], [, i, ], -=, fk, [, j, ], [, m, -, 2, ], [, i, ], ;]
[[, j, ], [, m, ], [, i, ], -=, fk, [, j, ], [, m, -, 2, ], []
[], [, m, ], [, i, ], -=, fk, [, j, ], [, m, -, 2, ], [, i, ]]
[], [, i, ], -=, fk, [, j, ], [, m, -, 2, ], [, i, ], ;, }, }]
[], -=, fk, [, j, ], [, m, -, 2, ], [, i, ], ;, }, }, }, }, if]
[;, }, }, }, }, if, (, mu, >=, 0, ), {, final, GraggBulirschStoerStepInterpolator, gbsInterpolator, =, (, GraggBulirschStoerStepInterpolator, ), interpolator]
[[, i, ], ;, }, }, }, }, if, (, mu, >=, 0, ), {, final, GraggBulirschStoerStepInterpolator, gbsInterpolator, =, (]
[[, m, -, 2, ], [, i, ], ;, }, }, }, }, if, (, mu, >=, 0, ), {]
[[, j, ], [, m, -, 2, ], [, i, ], ;, }, }, }, }, if, (, mu, >=]
[], [, m, -, 2, ], [, i, ], ;, }, }, }, }, if, (, mu, >=, 0, )]
[], [, i, ], ;, }, }, }, }, if, (, mu, >=, 0, ), {, final, GraggBulirschStoerStepInterpolator, gbsInterpolator, =]
[-, 2, ], [, i, ], ;, }, }, }, }, if, (, mu, >=, 0, ), {, final, GraggBulirschStoerStepInterpolator]
[], [, i, ], ;, }, }, }, }, if, (, mu, >=, 0, ), {, final, GraggBulirschStoerStepInterpolator, gbsInterpolator, =]
[], ;, }, }, }, }, if, (, mu, >=, 0, ), {, final, GraggBulirschStoerStepInterpolator, gbsInterpolator, =, (, GraggBulirschStoerStepInterpolator, )]
[), {, final, GraggBulirschStoerStepInterpolator, gbsInterpolator, =, (, GraggBulirschStoerStepInterpolator, ), interpolator, ;, gbsInterpolator, ., computeCoefficients, (, mu, ,, stepSize, ), ;]
[>=, 0, ), {, final, GraggBulirschStoerStepInterpolator, gbsInterpolator, =, (, GraggBulirschStoerStepInterpolator, ), interpolator, ;, gbsInterpolator, ., computeCoefficients, (, mu, ,, stepSize]
[), {, final, GraggBulirschStoerStepInterpolator, gbsInterpolator, =, (, GraggBulirschStoerStepInterpolator, ), interpolator, ;, gbsInterpolator, ., computeCoefficients, (, mu, ,, stepSize, ), ;]
[;, gbsInterpolator, ., computeCoefficients, (, mu, ,, stepSize, ), ;, if, (, useInterpolationError, ), {, final, double, interpError, =, gbsInterpolator]
[;, gbsInterpolator, ., computeCoefficients, (, mu, ,, stepSize, ), ;, if, (, useInterpolationError, ), {, final, double, interpError, =, gbsInterpolator]
[;, if, (, useInterpolationError, ), {, final, double, interpError, =, gbsInterpolator, ., estimateError, (, scale, ), ;, hInt, =, FastMath]
[., computeCoefficients, (, mu, ,, stepSize, ), ;, if, (, useInterpolationError, ), {, final, double, interpError, =, gbsInterpolator, ., estimateError]
[,, stepSize, ), ;, if, (, useInterpolationError, ), {, final, double, interpError, =, gbsInterpolator, ., estimateError, (, scale, ), ;]
[), ;, if, (, useInterpolationError, ), {, final, double, interpError, =, gbsInterpolator, ., estimateError, (, scale, ), ;, hInt, =]
[), {, final, double, interpError, =, gbsInterpolator, ., estimateError, (, scale, ), ;, hInt, =, FastMath, ., abs, (, stepSize]
[;, hInt, =, FastMath, ., abs, (, stepSize, /, FastMath, ., max, (, FastMath, ., pow, (, interpError, ,, 1.0]
[., estimateError, (, scale, ), ;, hInt, =, FastMath, ., abs, (, stepSize, /, FastMath, ., max, (, FastMath, .]
[), ;, hInt, =, FastMath, ., abs, (, stepSize, /, FastMath, ., max, (, FastMath, ., pow, (, interpError, ,]
[=, FastMath, ., abs, (, stepSize, /, FastMath, ., max, (, FastMath, ., pow, (, interpError, ,, 1.0, /, (]
[;, if, (, interpError, >, 10.0, ), {, hNew, =, hInt, ;, reject, =, true, ;, }, }, }, }]
[., abs, (, stepSize, /, FastMath, ., max, (, FastMath, ., pow, (, interpError, ,, 1.0, /, (, mu, +]
[), ;, if, (, interpError, >, 10.0, ), {, hNew, =, hInt, ;, reject, =, true, ;, }, }, }]
[/, FastMath, ., max, (, FastMath, ., pow, (, interpError, ,, 1.0, /, (, mu, +, 4, ), ), ,]
[), ;, if, (, interpError, >, 10.0, ), {, hNew, =, hInt, ;, reject, =, true, ;, }, }, }]
[., max, (, FastMath, ., pow, (, interpError, ,, 1.0, /, (, mu, +, 4, ), ), ,, 0.01, )]
[,, 0.01, ), ), ;, if, (, interpError, >, 10.0, ), {, hNew, =, hInt, ;, reject, =, true, ;]
[., pow, (, interpError, ,, 1.0, /, (, mu, +, 4, ), ), ,, 0.01, ), ), ;, if, (]
[,, 1.0, /, (, mu, +, 4, ), ), ,, 0.01, ), ), ;, if, (, interpError, >, 10.0, )]
[), ,, 0.01, ), ), ;, if, (, interpError, >, 10.0, ), {, hNew, =, hInt, ;, reject, =, true]
[/, (, mu, +, 4, ), ), ,, 0.01, ), ), ;, if, (, interpError, >, 10.0, ), {, hNew]
[), ,, 0.01, ), ), ;, if, (, interpError, >, 10.0, ), {, hNew, =, hInt, ;, reject, =, true]
[), ), ,, 0.01, ), ), ;, if, (, interpError, >, 10.0, ), {, hNew, =, hInt, ;, reject, =]
[+, 4, ), ), ,, 0.01, ), ), ;, if, (, interpError, >, 10.0, ), {, hNew, =, hInt, ;]
[), ), ,, 0.01, ), ), ;, if, (, interpError, >, 10.0, ), {, hNew, =, hInt, ;, reject, =]
[), ), ;, if, (, interpError, >, 10.0, ), {, hNew, =, hInt, ;, reject, =, true, ;, }, }]
[), {, hNew, =, hInt, ;, reject, =, true, ;, }, }, }, }, if, (, !, reject, ), {]
[>, 10.0, ), {, hNew, =, hInt, ;, reject, =, true, ;, }, }, }, }, if, (, !, reject]
[), {, hNew, =, hInt, ;, reject, =, true, ;, }, }, }, }, if, (, !, reject, ), {]
[=, hInt, ;, reject, =, true, ;, }, }, }, }, if, (, !, reject, ), {, interpolator, ., storeTime]
[;, reject, =, true, ;, }, }, }, }, if, (, !, reject, ), {, interpolator, ., storeTime, (, stepStart]
[=, true, ;, }, }, }, }, if, (, !, reject, ), {, interpolator, ., storeTime, (, stepStart, +, stepSize]
[;, }, }, }, }, if, (, !, reject, ), {, interpolator, ., storeTime, (, stepStart, +, stepSize, ), ;]
[), {, interpolator, ., storeTime, (, stepStart, +, stepSize, ), ;, stepStart, =, acceptStep, (, interpolator, ,, y1, ,, yDot1]
[), {, interpolator, ., storeTime, (, stepStart, +, stepSize, ), ;, stepStart, =, acceptStep, (, interpolator, ,, y1, ,, yDot1]
[;, stepStart, =, acceptStep, (, interpolator, ,, y1, ,, yDot1, ,, t, ), ;, interpolator, ., storeTime, (, stepStart, )]
[., storeTime, (, stepStart, +, stepSize, ), ;, stepStart, =, acceptStep, (, interpolator, ,, y1, ,, yDot1, ,, t, )]
[), ;, stepStart, =, acceptStep, (, interpolator, ,, y1, ,, yDot1, ,, t, ), ;, interpolator, ., storeTime, (, stepStart]
[+, stepSize, ), ;, stepStart, =, acceptStep, (, interpolator, ,, y1, ,, yDot1, ,, t, ), ;, interpolator, ., storeTime]
[), ;, stepStart, =, acceptStep, (, interpolator, ,, y1, ,, yDot1, ,, t, ), ;, interpolator, ., storeTime, (, stepStart]
[=, acceptStep, (, interpolator, ,, y1, ,, yDot1, ,, t, ), ;, interpolator, ., storeTime, (, stepStart, ), ;, System]
[;, interpolator, ., storeTime, (, stepStart, ), ;, System, ., arraycopy, (, y1, ,, 0, ,, y, ,, 0, ,]
[,, y1, ,, yDot1, ,, t, ), ;, interpolator, ., storeTime, (, stepStart, ), ;, System, ., arraycopy, (, y1]
[,, yDot1, ,, t, ), ;, interpolator, ., storeTime, (, stepStart, ), ;, System, ., arraycopy, (, y1, ,, 0]
[,, t, ), ;, interpolator, ., storeTime, (, stepStart, ), ;, System, ., arraycopy, (, y1, ,, 0, ,, y]
[), ;, interpolator, ., storeTime, (, stepStart, ), ;, System, ., arraycopy, (, y1, ,, 0, ,, y, ,, 0]
[;, System, ., arraycopy, (, y1, ,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, System, .]
[., storeTime, (, stepStart, ), ;, System, ., arraycopy, (, y1, ,, 0, ,, y, ,, 0, ,, y0, .]
[), ;, System, ., arraycopy, (, y1, ,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, System]
[;, System, ., arraycopy, (, yDot1, ,, 0, ,, yDot0, ,, 0, ,, y0, ., length, ), ;, firstStepAlreadyComputed, =]
[., arraycopy, (, y1, ,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, System, ., arraycopy, (]
[,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, System, ., arraycopy, (, yDot1, ,, 0, ,]
[,, y, ,, 0, ,, y0, ., length, ), ;, System, ., arraycopy, (, yDot1, ,, 0, ,, yDot0, ,]
[,, 0, ,, y0, ., length, ), ;, System, ., arraycopy, (, yDot1, ,, 0, ,, yDot0, ,, 0, ,]
[,, y0, ., length, ), ;, System, ., arraycopy, (, yDot1, ,, 0, ,, yDot0, ,, 0, ,, y0, .]
[), ;, System, ., arraycopy, (, yDot1, ,, 0, ,, yDot0, ,, 0, ,, y0, ., length, ), ;, firstStepAlreadyComputed]
[., length, ), ;, System, ., arraycopy, (, yDot1, ,, 0, ,, yDot0, ,, 0, ,, y0, ., length, )]
[;, firstStepAlreadyComputed, =, true, ;, int, optimalIter, ;, if, (, k, ==, 1, ), {, optimalIter, =, 2, ;, if]
[., arraycopy, (, yDot1, ,, 0, ,, yDot0, ,, 0, ,, y0, ., length, ), ;, firstStepAlreadyComputed, =, true, ;]
[,, 0, ,, yDot0, ,, 0, ,, y0, ., length, ), ;, firstStepAlreadyComputed, =, true, ;, int, optimalIter, ;, if]
[,, yDot0, ,, 0, ,, y0, ., length, ), ;, firstStepAlreadyComputed, =, true, ;, int, optimalIter, ;, if, (, k]
[,, 0, ,, y0, ., length, ), ;, firstStepAlreadyComputed, =, true, ;, int, optimalIter, ;, if, (, k, ==, 1]
[,, y0, ., length, ), ;, firstStepAlreadyComputed, =, true, ;, int, optimalIter, ;, if, (, k, ==, 1, ), {]
[), ;, firstStepAlreadyComputed, =, true, ;, int, optimalIter, ;, if, (, k, ==, 1, ), {, optimalIter, =, 2, ;]
[., length, ), ;, firstStepAlreadyComputed, =, true, ;, int, optimalIter, ;, if, (, k, ==, 1, ), {, optimalIter, =]
[=, true, ;, int, optimalIter, ;, if, (, k, ==, 1, ), {, optimalIter, =, 2, ;, if, (, previousRejected]
[;, int, optimalIter, ;, if, (, k, ==, 1, ), {, optimalIter, =, 2, ;, if, (, previousRejected, ), {]
[), {, optimalIter, =, 2, ;, if, (, previousRejected, ), {, optimalIter, =, 1, ;, }, }, else, if, (]
[==, 1, ), {, optimalIter, =, 2, ;, if, (, previousRejected, ), {, optimalIter, =, 1, ;, }, }, else]
[), {, optimalIter, =, 2, ;, if, (, previousRejected, ), {, optimalIter, =, 1, ;, }, }, else, if, (]
[=, 2, ;, if, (, previousRejected, ), {, optimalIter, =, 1, ;, }, }, else, if, (, k, <=, targetIter]
[;, if, (, previousRejected, ), {, optimalIter, =, 1, ;, }, }, else, if, (, k, <=, targetIter, ), {]
[), {, optimalIter, =, 1, ;, }, }, else, if, (, k, <=, targetIter, ), {, optimalIter, =, k, ;]
[=, 1, ;, }, }, else, if, (, k, <=, targetIter, ), {, optimalIter, =, k, ;, if, (, costPerTimeUnit]
[;, }, }, else, if, (, k, <=, targetIter, ), {, optimalIter, =, k, ;, if, (, costPerTimeUnit, [, k]
[), {, optimalIter, =, k, ;, if, (, costPerTimeUnit, [, k, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, k]
[<=, targetIter, ), {, optimalIter, =, k, ;, if, (, costPerTimeUnit, [, k, -, 1, ], <, orderControl1, *, costPerTimeUnit]
[), {, optimalIter, =, k, ;, if, (, costPerTimeUnit, [, k, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, k]
[=, k, ;, if, (, costPerTimeUnit, [, k, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, k, ], ), {]
[;, if, (, costPerTimeUnit, [, k, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, k, ], ), {, optimalIter, =]
[), {, optimalIter, =, k, -, 1, ;, }, else, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit]
[<, orderControl1, *, costPerTimeUnit, [, k, ], ), {, optimalIter, =, k, -, 1, ;, }, else, if, (, costPerTimeUnit]
[[, k, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, k, ], ), {, optimalIter, =, k, -, 1, ;]
[], <, orderControl1, *, costPerTimeUnit, [, k, ], ), {, optimalIter, =, k, -, 1, ;, }, else, if, (]
[-, 1, ], <, orderControl1, *, costPerTimeUnit, [, k, ], ), {, optimalIter, =, k, -, 1, ;, }, else]
[], <, orderControl1, *, costPerTimeUnit, [, k, ], ), {, optimalIter, =, k, -, 1, ;, }, else, if, (]
[), {, optimalIter, =, k, -, 1, ;, }, else, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit]
[*, costPerTimeUnit, [, k, ], ), {, optimalIter, =, k, -, 1, ;, }, else, if, (, costPerTimeUnit, [, k]
[), {, optimalIter, =, k, -, 1, ;, }, else, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit]
[[, k, ], ), {, optimalIter, =, k, -, 1, ;, }, else, if, (, costPerTimeUnit, [, k, ], <]
[], ), {, optimalIter, =, k, -, 1, ;, }, else, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *]
[=, k, -, 1, ;, }, else, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -]
[;, }, else, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), {]
[-, 1, ;, }, else, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ]]
[;, }, else, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), {]
[), {, optimalIter, =, FastMath, ., min, (, k, +, 1, ,, sequence, ., length, -, 2, ), ;, }]
[<, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), {, optimalIter, =, FastMath, ., min, (, k, +, 1]
[[, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), {, optimalIter, =, FastMath, ., min, (]
[], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), {, optimalIter, =, FastMath, ., min, (, k, +]
[), {, optimalIter, =, FastMath, ., min, (, k, +, 1, ,, sequence, ., length, -, 2, ), ;, }]
[*, costPerTimeUnit, [, k, -, 1, ], ), {, optimalIter, =, FastMath, ., min, (, k, +, 1, ,, sequence]
[), {, optimalIter, =, FastMath, ., min, (, k, +, 1, ,, sequence, ., length, -, 2, ), ;, }]
[[, k, -, 1, ], ), {, optimalIter, =, FastMath, ., min, (, k, +, 1, ,, sequence, ., length]
[], ), {, optimalIter, =, FastMath, ., min, (, k, +, 1, ,, sequence, ., length, -, 2, ), ;]
[-, 1, ], ), {, optimalIter, =, FastMath, ., min, (, k, +, 1, ,, sequence, ., length, -, 2]
[], ), {, optimalIter, =, FastMath, ., min, (, k, +, 1, ,, sequence, ., length, -, 2, ), ;]
[=, FastMath, ., min, (, k, +, 1, ,, sequence, ., length, -, 2, ), ;, }, }, else, {]
[;, }, }, else, {, optimalIter, =, k, -, 1, ;, if, (, (, k, >, 2, ), &&, (]
[., min, (, k, +, 1, ,, sequence, ., length, -, 2, ), ;, }, }, else, {, optimalIter, =]
[,, sequence, ., length, -, 2, ), ;, }, }, else, {, optimalIter, =, k, -, 1, ;, if, (]
[+, 1, ,, sequence, ., length, -, 2, ), ;, }, }, else, {, optimalIter, =, k, -, 1, ;]
[,, sequence, ., length, -, 2, ), ;, }, }, else, {, optimalIter, =, k, -, 1, ;, if, (]
[), ;, }, }, else, {, optimalIter, =, k, -, 1, ;, if, (, (, k, >, 2, ), &&]
[-, 2, ), ;, }, }, else, {, optimalIter, =, k, -, 1, ;, if, (, (, k, >, 2]
[., length, -, 2, ), ;, }, }, else, {, optimalIter, =, k, -, 1, ;, if, (, (, k]
[), ;, }, }, else, {, optimalIter, =, k, -, 1, ;, if, (, (, k, >, 2, ), &&]
[=, k, -, 1, ;, if, (, (, k, >, 2, ), &&, (, costPerTimeUnit, [, k, -, 2, ]]
[;, if, (, (, k, >, 2, ), &&, (, costPerTimeUnit, [, k, -, 2, ], <, orderControl1, *, costPerTimeUnit]
[-, 1, ;, if, (, (, k, >, 2, ), &&, (, costPerTimeUnit, [, k, -, 2, ], <, orderControl1]
[;, if, (, (, k, >, 2, ), &&, (, costPerTimeUnit, [, k, -, 2, ], <, orderControl1, *, costPerTimeUnit]
[), {, optimalIter, =, k, -, 2, ;, }, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, []
[&&, (, costPerTimeUnit, [, k, -, 2, ], <, orderControl1, *, costPerTimeUnit, [, k, -, 1, ], ), ), {]
[), &&, (, costPerTimeUnit, [, k, -, 2, ], <, orderControl1, *, costPerTimeUnit, [, k, -, 1, ], ), )]
[>, 2, ), &&, (, costPerTimeUnit, [, k, -, 2, ], <, orderControl1, *, costPerTimeUnit, [, k, -, 1, ]]
[), &&, (, costPerTimeUnit, [, k, -, 2, ], <, orderControl1, *, costPerTimeUnit, [, k, -, 1, ], ), )]
[), {, optimalIter, =, k, -, 2, ;, }, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, []
[), ), {, optimalIter, =, k, -, 2, ;, }, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit]
[<, orderControl1, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, optimalIter, =, k, -, 2, ;, }, if]
[[, k, -, 2, ], <, orderControl1, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, optimalIter, =, k]
[], <, orderControl1, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, optimalIter, =, k, -, 2, ;, }]
[-, 2, ], <, orderControl1, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, optimalIter, =, k, -, 2]
[], <, orderControl1, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, optimalIter, =, k, -, 2, ;, }]
[), ), {, optimalIter, =, k, -, 2, ;, }, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit]
[*, costPerTimeUnit, [, k, -, 1, ], ), ), {, optimalIter, =, k, -, 2, ;, }, if, (, costPerTimeUnit]
[), ), {, optimalIter, =, k, -, 2, ;, }, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit]
[[, k, -, 1, ], ), ), {, optimalIter, =, k, -, 2, ;, }, if, (, costPerTimeUnit, [, k]
[], ), ), {, optimalIter, =, k, -, 2, ;, }, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *]
[-, 1, ], ), ), {, optimalIter, =, k, -, 2, ;, }, if, (, costPerTimeUnit, [, k, ], <]
[], ), ), {, optimalIter, =, k, -, 2, ;, }, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *]
[=, k, -, 2, ;, }, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, optimalIter, ], )]
[;, }, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, optimalIter, ], ), {, optimalIter, =, FastMath]
[-, 2, ;, }, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, optimalIter, ], ), {, optimalIter]
[;, }, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, optimalIter, ], ), {, optimalIter, =, FastMath]
[), {, optimalIter, =, FastMath, ., min, (, k, ,, sequence, ., length, -, 2, ), ;, }, }, if]
[<, orderControl2, *, costPerTimeUnit, [, optimalIter, ], ), {, optimalIter, =, FastMath, ., min, (, k, ,, sequence, ., length]
[[, k, ], <, orderControl2, *, costPerTimeUnit, [, optimalIter, ], ), {, optimalIter, =, FastMath, ., min, (, k, ,]
[], <, orderControl2, *, costPerTimeUnit, [, optimalIter, ], ), {, optimalIter, =, FastMath, ., min, (, k, ,, sequence, .]
[), {, optimalIter, =, FastMath, ., min, (, k, ,, sequence, ., length, -, 2, ), ;, }, }, if]
[*, costPerTimeUnit, [, optimalIter, ], ), {, optimalIter, =, FastMath, ., min, (, k, ,, sequence, ., length, -, 2]
[), {, optimalIter, =, FastMath, ., min, (, k, ,, sequence, ., length, -, 2, ), ;, }, }, if]
[[, optimalIter, ], ), {, optimalIter, =, FastMath, ., min, (, k, ,, sequence, ., length, -, 2, ), ;]
[], ), {, optimalIter, =, FastMath, ., min, (, k, ,, sequence, ., length, -, 2, ), ;, }, }]
[=, FastMath, ., min, (, k, ,, sequence, ., length, -, 2, ), ;, }, }, if, (, previousRejected, )]
[;, }, }, if, (, previousRejected, ), {, targetIter, =, FastMath, ., min, (, optimalIter, ,, k, ), ;, hNew]
[., min, (, k, ,, sequence, ., length, -, 2, ), ;, }, }, if, (, previousRejected, ), {, targetIter]
[,, sequence, ., length, -, 2, ), ;, }, }, if, (, previousRejected, ), {, targetIter, =, FastMath, ., min]
[), ;, }, }, if, (, previousRejected, ), {, targetIter, =, FastMath, ., min, (, optimalIter, ,, k, ), ;]
[-, 2, ), ;, }, }, if, (, previousRejected, ), {, targetIter, =, FastMath, ., min, (, optimalIter, ,, k]
[., length, -, 2, ), ;, }, }, if, (, previousRejected, ), {, targetIter, =, FastMath, ., min, (, optimalIter]
[), ;, }, }, if, (, previousRejected, ), {, targetIter, =, FastMath, ., min, (, optimalIter, ,, k, ), ;]
[), {, targetIter, =, FastMath, ., min, (, optimalIter, ,, k, ), ;, hNew, =, FastMath, ., min, (, FastMath]
[=, FastMath, ., min, (, optimalIter, ,, k, ), ;, hNew, =, FastMath, ., min, (, FastMath, ., abs, (]
[;, hNew, =, FastMath, ., min, (, FastMath, ., abs, (, stepSize, ), ,, optimalStep, [, targetIter, ], ), ;]
[., min, (, optimalIter, ,, k, ), ;, hNew, =, FastMath, ., min, (, FastMath, ., abs, (, stepSize, )]
[,, k, ), ;, hNew, =, FastMath, ., min, (, FastMath, ., abs, (, stepSize, ), ,, optimalStep, [, targetIter]
[), ;, hNew, =, FastMath, ., min, (, FastMath, ., abs, (, stepSize, ), ,, optimalStep, [, targetIter, ], )]
[=, FastMath, ., min, (, FastMath, ., abs, (, stepSize, ), ,, optimalStep, [, targetIter, ], ), ;, }, else]
[;, }, else, {, if, (, optimalIter, <=, k, ), {, hNew, =, optimalStep, [, optimalIter, ], ;, }, else]
[., min, (, FastMath, ., abs, (, stepSize, ), ,, optimalStep, [, targetIter, ], ), ;, }, else, {, if]
[,, optimalStep, [, targetIter, ], ), ;, }, else, {, if, (, optimalIter, <=, k, ), {, hNew, =, optimalStep]
[., abs, (, stepSize, ), ,, optimalStep, [, targetIter, ], ), ;, }, else, {, if, (, optimalIter, <=, k]
[), ,, optimalStep, [, targetIter, ], ), ;, }, else, {, if, (, optimalIter, <=, k, ), {, hNew, =]
[), ;, }, else, {, if, (, optimalIter, <=, k, ), {, hNew, =, optimalStep, [, optimalIter, ], ;, }]
[[, targetIter, ], ), ;, }, else, {, if, (, optimalIter, <=, k, ), {, hNew, =, optimalStep, [, optimalIter]
[], ), ;, }, else, {, if, (, optimalIter, <=, k, ), {, hNew, =, optimalStep, [, optimalIter, ], ;]
[), {, hNew, =, optimalStep, [, optimalIter, ], ;, }, else, {, if, (, (, k, <, targetIter, ), &&]
[<=, k, ), {, hNew, =, optimalStep, [, optimalIter, ], ;, }, else, {, if, (, (, k, <, targetIter]
[), {, hNew, =, optimalStep, [, optimalIter, ], ;, }, else, {, if, (, (, k, <, targetIter, ), &&]
[=, optimalStep, [, optimalIter, ], ;, }, else, {, if, (, (, k, <, targetIter, ), &&, (, costPerTimeUnit, []
[;, }, else, {, if, (, (, k, <, targetIter, ), &&, (, costPerTimeUnit, [, k, ], <, orderControl2, *]
[[, optimalIter, ], ;, }, else, {, if, (, (, k, <, targetIter, ), &&, (, costPerTimeUnit, [, k, ]]
[], ;, }, else, {, if, (, (, k, <, targetIter, ), &&, (, costPerTimeUnit, [, k, ], <, orderControl2]
[), {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, +, 1, ], /, costPerStep, []
[&&, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, hNew, =]
[), &&, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, hNew]
[<, targetIter, ), &&, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), )]
[), &&, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, hNew]
[), {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, +, 1, ], /, costPerStep, []
[), ), {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, +, 1, ], /, costPerStep]
[<, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, hNew, =, filterStep, (, optimalStep, [, k, ]]
[[, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, hNew, =, filterStep, (, optimalStep]
[], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, hNew, =, filterStep, (, optimalStep, [, k]
[), ), {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, +, 1, ], /, costPerStep]
[*, costPerTimeUnit, [, k, -, 1, ], ), ), {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep]
[), ), {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, +, 1, ], /, costPerStep]
[[, k, -, 1, ], ), ), {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter]
[], ), ), {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, +, 1, ], /]
[-, 1, ], ), ), {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, +, 1]
[], ), ), {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, +, 1, ], /]
[=, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, +, 1, ], /, costPerStep, [, k, ], ,]
[;, }, else, {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, ], /, costPerStep, []
[,, forward, ,, false, ), ;, }, else, {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, []
[/, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, else, {, hNew, =, filterStep, (, optimalStep, []
[*, costPerStep, [, optimalIter, +, 1, ], /, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, else]
[[, k, ], *, costPerStep, [, optimalIter, +, 1, ], /, costPerStep, [, k, ], ,, forward, ,, false, )]
[], *, costPerStep, [, optimalIter, +, 1, ], /, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }]
[/, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, else, {, hNew, =, filterStep, (, optimalStep, []
[[, optimalIter, +, 1, ], /, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, else, {, hNew]
[], /, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, else, {, hNew, =, filterStep, (, optimalStep]
[+, 1, ], /, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, else, {, hNew, =, filterStep]
[], /, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, else, {, hNew, =, filterStep, (, optimalStep]
[,, forward, ,, false, ), ;, }, else, {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, []
[[, k, ], ,, forward, ,, false, ), ;, }, else, {, hNew, =, filterStep, (, optimalStep, [, k, ]]
[], ,, forward, ,, false, ), ;, }, else, {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep]
[,, false, ), ;, }, else, {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, ]]
[), ;, }, else, {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, ], /, costPerStep]
[=, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, ], /, costPerStep, [, k, ], ,, forward, ,]
[;, }, }, targetIter, =, optimalIter, ;, }, newStep, =, true, ;, }, hNew, =, FastMath, ., min, (, hNew]
[,, forward, ,, false, ), ;, }, }, targetIter, =, optimalIter, ;, }, newStep, =, true, ;, }, hNew, =]
[/, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, }, targetIter, =, optimalIter, ;, }, newStep, =]
[*, costPerStep, [, optimalIter, ], /, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, }, targetIter, =]
[[, k, ], *, costPerStep, [, optimalIter, ], /, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }]
[], *, costPerStep, [, optimalIter, ], /, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, }, targetIter]
[/, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, }, targetIter, =, optimalIter, ;, }, newStep, =]
[[, optimalIter, ], /, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, }, targetIter, =, optimalIter, ;]
[], /, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, }, targetIter, =, optimalIter, ;, }, newStep]
[,, forward, ,, false, ), ;, }, }, targetIter, =, optimalIter, ;, }, newStep, =, true, ;, }, hNew, =]
[[, k, ], ,, forward, ,, false, ), ;, }, }, targetIter, =, optimalIter, ;, }, newStep, =, true, ;]
[], ,, forward, ,, false, ), ;, }, }, targetIter, =, optimalIter, ;, }, newStep, =, true, ;, }, hNew]
[,, false, ), ;, }, }, targetIter, =, optimalIter, ;, }, newStep, =, true, ;, }, hNew, =, FastMath, .]
[), ;, }, }, targetIter, =, optimalIter, ;, }, newStep, =, true, ;, }, hNew, =, FastMath, ., min, (]
[=, optimalIter, ;, }, newStep, =, true, ;, }, hNew, =, FastMath, ., min, (, hNew, ,, hInt, ), ;]
[;, }, newStep, =, true, ;, }, hNew, =, FastMath, ., min, (, hNew, ,, hInt, ), ;, if, (]
[=, true, ;, }, hNew, =, FastMath, ., min, (, hNew, ,, hInt, ), ;, if, (, !, forward, )]
[;, }, hNew, =, FastMath, ., min, (, hNew, ,, hInt, ), ;, if, (, !, forward, ), {, hNew]
[=, FastMath, ., min, (, hNew, ,, hInt, ), ;, if, (, !, forward, ), {, hNew, =, -, hNew]
[;, if, (, !, forward, ), {, hNew, =, -, hNew, ;, }, firstTime, =, false, ;, if, (, reject]
[., min, (, hNew, ,, hInt, ), ;, if, (, !, forward, ), {, hNew, =, -, hNew, ;, }]
[,, hInt, ), ;, if, (, !, forward, ), {, hNew, =, -, hNew, ;, }, firstTime, =, false, ;]
[), ;, if, (, !, forward, ), {, hNew, =, -, hNew, ;, }, firstTime, =, false, ;, if, (]
[), {, hNew, =, -, hNew, ;, }, firstTime, =, false, ;, if, (, reject, ), {, isLastStep, =, false]
[), {, hNew, =, -, hNew, ;, }, firstTime, =, false, ;, if, (, reject, ), {, isLastStep, =, false]
[=, -, hNew, ;, }, firstTime, =, false, ;, if, (, reject, ), {, isLastStep, =, false, ;, previousRejected, =]
[;, }, firstTime, =, false, ;, if, (, reject, ), {, isLastStep, =, false, ;, previousRejected, =, true, ;, }]
[;, }, firstTime, =, false, ;, if, (, reject, ), {, isLastStep, =, false, ;, previousRejected, =, true, ;, }]
[=, false, ;, if, (, reject, ), {, isLastStep, =, false, ;, previousRejected, =, true, ;, }, else, {, previousRejected]
[;, if, (, reject, ), {, isLastStep, =, false, ;, previousRejected, =, true, ;, }, else, {, previousRejected, =, false]
[), {, isLastStep, =, false, ;, previousRejected, =, true, ;, }, else, {, previousRejected, =, false, ;, }, }, while]
[=, false, ;, previousRejected, =, true, ;, }, else, {, previousRejected, =, false, ;, }, }, while, (, !, isLastStep]
[;, previousRejected, =, true, ;, }, else, {, previousRejected, =, false, ;, }, }, while, (, !, isLastStep, ), ;]
[=, true, ;, }, else, {, previousRejected, =, false, ;, }, }, while, (, !, isLastStep, ), ;, equations, .]
[;, }, else, {, previousRejected, =, false, ;, }, }, while, (, !, isLastStep, ), ;, equations, ., setTime, (]
[=, false, ;, }, }, while, (, !, isLastStep, ), ;, equations, ., setTime, (, stepStart, ), ;, equations, .]
[;, }, }, while, (, !, isLastStep, ), ;, equations, ., setTime, (, stepStart, ), ;, equations, ., setCompleteState, (]
[), ;, equations, ., setTime, (, stepStart, ), ;, equations, ., setCompleteState, (, y, ), ;, resetInternalState, (, ), ;]
[), ;, equations, ., setTime, (, stepStart, ), ;, equations, ., setCompleteState, (, y, ), ;, resetInternalState, (, ), ;]
[;, equations, ., setCompleteState, (, y, ), ;, resetInternalState, (, ), ;, }, }]
[., setTime, (, stepStart, ), ;, equations, ., setCompleteState, (, y, ), ;, resetInternalState, (, ), ;, }, }]
[), ;, equations, ., setCompleteState, (, y, ), ;, resetInternalState, (, ), ;, }, }]
[;, resetInternalState, (, ), ;, }, }]
[., setCompleteState, (, y, ), ;, resetInternalState, (, ), ;, }, }]
[), ;, resetInternalState, (, ), ;, }, }]
[;, }, }]
