[{, private, final, AbstractCompiler, compiler, ;, private, final, JSTypeRegistry, typeRegistry, ;, private, final, JSType, allValueTypes, ;, private, boolean, shouldReport, =]
[;, private, boolean, shouldReport, =, true, ;, private, final, JSType, nullOrUndefined, ;, private, final, List, <, TypeMismatch, >, mismatches, =]
[;, private, boolean, shouldReport, =, true, ;, private, final, JSType, nullOrUndefined, ;, private, final, List, <, TypeMismatch, >, mismatches, =]
[private, final, List, <, TypeMismatch, >, mismatches, =, Lists, ., newArrayList, (, ), ;, private, static, final, String, FOUND_REQUIRED, =]
[private, final, List, <, TypeMismatch, >, mismatches, =, Lists, ., newArrayList, (, ), ;, private, static, final, String, FOUND_REQUIRED, =]
[private, final, List, <, TypeMismatch, >, mismatches, =, Lists, ., newArrayList, (, ), ;, private, static, final, String, FOUND_REQUIRED, =]
[List, <, TypeMismatch, >, mismatches, =, Lists, ., newArrayList, (, ), ;, private, static, final, String, FOUND_REQUIRED, =, "{0}\n", +]
[TypeMismatch, >, mismatches, =, Lists, ., newArrayList, (, ), ;, private, static, final, String, FOUND_REQUIRED, =, "{0}\n", +, "found   : {1}\n", +]
[(, ), ;, private, static, final, String, FOUND_REQUIRED, =, "{0}\n", +, "found   : {1}\n", +, "required: {2}", ;, static, final, DiagnosticType, INVALID_CAST, =]
[(, ), ;, private, static, final, String, FOUND_REQUIRED, =, "{0}\n", +, "found   : {1}\n", +, "required: {2}", ;, static, final, DiagnosticType, INVALID_CAST, =]
[static, final, String, FOUND_REQUIRED, =, "{0}\n", +, "found   : {1}\n", +, "required: {2}", ;, static, final, DiagnosticType, INVALID_CAST, =, DiagnosticType, ., disabled, (]
[String, FOUND_REQUIRED, =, "{0}\n", +, "found   : {1}\n", +, "required: {2}", ;, static, final, DiagnosticType, INVALID_CAST, =, DiagnosticType, ., disabled, (, "JSC_INVALID_CAST", ,]
[String, FOUND_REQUIRED, =, "{0}\n", +, "found   : {1}\n", +, "required: {2}", ;, static, final, DiagnosticType, INVALID_CAST, =, DiagnosticType, ., disabled, (, "JSC_INVALID_CAST", ,]
[String, FOUND_REQUIRED, =, "{0}\n", +, "found   : {1}\n", +, "required: {2}", ;, static, final, DiagnosticType, INVALID_CAST, =, DiagnosticType, ., disabled, (, "JSC_INVALID_CAST", ,]
[=, "{0}\n", +, "found   : {1}\n", +, "required: {2}", ;, static, final, DiagnosticType, INVALID_CAST, =, DiagnosticType, ., disabled, (, "JSC_INVALID_CAST", ,, "invalid cast - must be a subtype or supertype\n", +]
[+, "found   : {1}\n", +, "required: {2}", ;, static, final, DiagnosticType, INVALID_CAST, =, DiagnosticType, ., disabled, (, "JSC_INVALID_CAST", ,, "invalid cast - must be a subtype or supertype\n", +, "from: {0}\n", +]
[INVALID_CAST, =, DiagnosticType, ., disabled, (, "JSC_INVALID_CAST", ,, "invalid cast - must be a subtype or supertype\n", +, "from: {0}\n", +, "to  : {1}", ), ;, static, final, DiagnosticType, TYPE_MISMATCH_WARNING, =]
[INVALID_CAST, =, DiagnosticType, ., disabled, (, "JSC_INVALID_CAST", ,, "invalid cast - must be a subtype or supertype\n", +, "from: {0}\n", +, "to  : {1}", ), ;, static, final, DiagnosticType, TYPE_MISMATCH_WARNING, =]
[disabled, (, "JSC_INVALID_CAST", ,, "invalid cast - must be a subtype or supertype\n", +, "from: {0}\n", +, "to  : {1}", ), ;, static, final, DiagnosticType, TYPE_MISMATCH_WARNING, =, DiagnosticType, ., warning, (]
["JSC_INVALID_CAST", ,, "invalid cast - must be a subtype or supertype\n", +, "from: {0}\n", +, "to  : {1}", ), ;, static, final, DiagnosticType, TYPE_MISMATCH_WARNING, =, DiagnosticType, ., warning, (, "JSC_TYPE_MISMATCH", ,]
[;, static, final, DiagnosticType, TYPE_MISMATCH_WARNING, =, DiagnosticType, ., warning, (, "JSC_TYPE_MISMATCH", ,, "{0}", ), ;, static, final, DiagnosticType, MISSING_EXTENDS_TAG_WARNING, =]
[;, static, final, DiagnosticType, TYPE_MISMATCH_WARNING, =, DiagnosticType, ., warning, (, "JSC_TYPE_MISMATCH", ,, "{0}", ), ;, static, final, DiagnosticType, MISSING_EXTENDS_TAG_WARNING, =]
[TYPE_MISMATCH_WARNING, =, DiagnosticType, ., warning, (, "JSC_TYPE_MISMATCH", ,, "{0}", ), ;, static, final, DiagnosticType, MISSING_EXTENDS_TAG_WARNING, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_TYPE_MISMATCH", ,, "{0}", ), ;, static, final, DiagnosticType, MISSING_EXTENDS_TAG_WARNING, =, DiagnosticType, ., warning, (, "JSC_MISSING_EXTENDS_TAG", ,]
[;, static, final, DiagnosticType, MISSING_EXTENDS_TAG_WARNING, =, DiagnosticType, ., warning, (, "JSC_MISSING_EXTENDS_TAG", ,, "Missing @extends tag on type {0}", ), ;, static, final, DiagnosticType, DUP_VAR_DECLARATION, =]
[;, static, final, DiagnosticType, MISSING_EXTENDS_TAG_WARNING, =, DiagnosticType, ., warning, (, "JSC_MISSING_EXTENDS_TAG", ,, "Missing @extends tag on type {0}", ), ;, static, final, DiagnosticType, DUP_VAR_DECLARATION, =]
[MISSING_EXTENDS_TAG_WARNING, =, DiagnosticType, ., warning, (, "JSC_MISSING_EXTENDS_TAG", ,, "Missing @extends tag on type {0}", ), ;, static, final, DiagnosticType, DUP_VAR_DECLARATION, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_MISSING_EXTENDS_TAG", ,, "Missing @extends tag on type {0}", ), ;, static, final, DiagnosticType, DUP_VAR_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_DUP_VAR_DECLARATION", ,]
[DiagnosticType, ., warning, (, "JSC_MISSING_EXTENDS_TAG", ,, "Missing @extends tag on type {0}", ), ;, static, final, DiagnosticType, DUP_VAR_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_DUP_VAR_DECLARATION", ,]
[warning, (, "JSC_MISSING_EXTENDS_TAG", ,, "Missing @extends tag on type {0}", ), ;, static, final, DiagnosticType, DUP_VAR_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_DUP_VAR_DECLARATION", ,, "variable {0} redefined with type {1}, ", +]
[final, DiagnosticType, DUP_VAR_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_DUP_VAR_DECLARATION", ,, "variable {0} redefined with type {1}, ", +, "original definition at {2}:{3} with type {4}", ), ;, static, final, DiagnosticType, HIDDEN_PROPERTY_MISMATCH, =]
[final, DiagnosticType, DUP_VAR_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_DUP_VAR_DECLARATION", ,, "variable {0} redefined with type {1}, ", +, "original definition at {2}:{3} with type {4}", ), ;, static, final, DiagnosticType, HIDDEN_PROPERTY_MISMATCH, =]
[DiagnosticType, ., warning, (, "JSC_DUP_VAR_DECLARATION", ,, "variable {0} redefined with type {1}, ", +, "original definition at {2}:{3} with type {4}", ), ;, static, final, DiagnosticType, HIDDEN_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (]
[warning, (, "JSC_DUP_VAR_DECLARATION", ,, "variable {0} redefined with type {1}, ", +, "original definition at {2}:{3} with type {4}", ), ;, static, final, DiagnosticType, HIDDEN_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_PROPERTY_MISMATCH", ,]
[warning, (, "JSC_DUP_VAR_DECLARATION", ,, "variable {0} redefined with type {1}, ", +, "original definition at {2}:{3} with type {4}", ), ;, static, final, DiagnosticType, HIDDEN_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_PROPERTY_MISMATCH", ,]
[warning, (, "JSC_DUP_VAR_DECLARATION", ,, "variable {0} redefined with type {1}, ", +, "original definition at {2}:{3} with type {4}", ), ;, static, final, DiagnosticType, HIDDEN_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_PROPERTY_MISMATCH", ,]
[warning, (, "JSC_DUP_VAR_DECLARATION", ,, "variable {0} redefined with type {1}, ", +, "original definition at {2}:{3} with type {4}", ), ;, static, final, DiagnosticType, HIDDEN_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_PROPERTY_MISMATCH", ,]
["JSC_DUP_VAR_DECLARATION", ,, "variable {0} redefined with type {1}, ", +, "original definition at {2}:{3} with type {4}", ), ;, static, final, DiagnosticType, HIDDEN_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +]
["variable {0} redefined with type {1}, ", +, "original definition at {2}:{3} with type {4}", ), ;, static, final, DiagnosticType, HIDDEN_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +]
["original definition at {2}:{3} with type {4}", ), ;, static, final, DiagnosticType, HIDDEN_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +]
[DiagnosticType, ., warning, (, "JSC_HIDDEN_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, INTERFACE_METHOD_NOT_IMPLEMENTED, =]
[DiagnosticType, ., warning, (, "JSC_HIDDEN_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, INTERFACE_METHOD_NOT_IMPLEMENTED, =]
["JSC_HIDDEN_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, INTERFACE_METHOD_NOT_IMPLEMENTED, =, DiagnosticType, ., warning, (]
["mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, INTERFACE_METHOD_NOT_IMPLEMENTED, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", ,]
[;, static, final, DiagnosticType, INTERFACE_METHOD_NOT_IMPLEMENTED, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", ,, "property {0} on interface {1} is not implemented by type {2}", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY_MISMATCH, =]
[;, static, final, DiagnosticType, INTERFACE_METHOD_NOT_IMPLEMENTED, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", ,, "property {0} on interface {1} is not implemented by type {2}", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY_MISMATCH, =]
[INTERFACE_METHOD_NOT_IMPLEMENTED, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", ,, "property {0} on interface {1} is not implemented by type {2}", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", ,, "property {0} on interface {1} is not implemented by type {2}", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH", ,]
[DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", ,, "property {0} on interface {1} is not implemented by type {2}", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH", ,]
[DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", ,, "property {0} on interface {1} is not implemented by type {2}", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH", ,]
[DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", ,, "property {0} on interface {1} is not implemented by type {2}", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH", ,]
[warning, (, "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", ,, "property {0} on interface {1} is not implemented by type {2}", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +]
["JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", ,, "property {0} on interface {1} is not implemented by type {2}", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from interface {1}\n", +]
["property {0} on interface {1} is not implemented by type {2}", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from interface {1}\n", +, "original: {2}\n", +]
[DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from interface {1}\n", +, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_TYPEOF_VALUE, =]
[DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from interface {1}\n", +, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_TYPEOF_VALUE, =]
["JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from interface {1}\n", +, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_TYPEOF_VALUE, =, DiagnosticType, ., warning, (]
["mismatch of the {0} property type and the type ", +, "of the property it overrides from interface {1}\n", +, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_TYPEOF_VALUE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_TYPEOF_VALUE", ,]
[;, static, final, DiagnosticType, UNKNOWN_TYPEOF_VALUE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_TYPEOF_VALUE", ,, "unknown type: {0}", ), ;, static, final, DiagnosticType, ILLEGAL_PROPERTY_ACCESS, =]
[;, static, final, DiagnosticType, UNKNOWN_TYPEOF_VALUE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_TYPEOF_VALUE", ,, "unknown type: {0}", ), ;, static, final, DiagnosticType, ILLEGAL_PROPERTY_ACCESS, =]
[UNKNOWN_TYPEOF_VALUE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_TYPEOF_VALUE", ,, "unknown type: {0}", ), ;, static, final, DiagnosticType, ILLEGAL_PROPERTY_ACCESS, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_UNKNOWN_TYPEOF_VALUE", ,, "unknown type: {0}", ), ;, static, final, DiagnosticType, ILLEGAL_PROPERTY_ACCESS, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_PROPERTY_ACCESS", ,]
[;, static, final, DiagnosticType, ILLEGAL_PROPERTY_ACCESS, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_PROPERTY_ACCESS", ,, "Cannot do {0} access on a {1}", ), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =]
[DiagnosticType, ILLEGAL_PROPERTY_ACCESS, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_PROPERTY_ACCESS", ,, "Cannot do {0} access on a {1}", ), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (]
[=, DiagnosticType, ., warning, (, "JSC_ILLEGAL_PROPERTY_ACCESS", ,, "Cannot do {0} access on a {1}", ), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, INVALID_CAST, ,]
[., warning, (, "JSC_ILLEGAL_PROPERTY_ACCESS", ,, "Cannot do {0} access on a {1}", ), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, INVALID_CAST, ,, TYPE_MISMATCH_WARNING, ,]
[(, "JSC_ILLEGAL_PROPERTY_ACCESS", ,, "Cannot do {0} access on a {1}", ), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, INVALID_CAST, ,, TYPE_MISMATCH_WARNING, ,, MISSING_EXTENDS_TAG_WARNING, ,]
[,, "Cannot do {0} access on a {1}", ), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, INVALID_CAST, ,, TYPE_MISMATCH_WARNING, ,, MISSING_EXTENDS_TAG_WARNING, ,, DUP_VAR_DECLARATION, ,]
[), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, INVALID_CAST, ,, TYPE_MISMATCH_WARNING, ,, MISSING_EXTENDS_TAG_WARNING, ,, DUP_VAR_DECLARATION, ,, HIDDEN_PROPERTY_MISMATCH, ,]
[static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, INVALID_CAST, ,, TYPE_MISMATCH_WARNING, ,, MISSING_EXTENDS_TAG_WARNING, ,, DUP_VAR_DECLARATION, ,, HIDDEN_PROPERTY_MISMATCH, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,]
[DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, INVALID_CAST, ,, TYPE_MISMATCH_WARNING, ,, MISSING_EXTENDS_TAG_WARNING, ,, DUP_VAR_DECLARATION, ,, HIDDEN_PROPERTY_MISMATCH, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,]
[=, new, DiagnosticGroup, (, INVALID_CAST, ,, TYPE_MISMATCH_WARNING, ,, MISSING_EXTENDS_TAG_WARNING, ,, DUP_VAR_DECLARATION, ,, HIDDEN_PROPERTY_MISMATCH, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, UNKNOWN_TYPEOF_VALUE, ,]
[,, DUP_VAR_DECLARATION, ,, HIDDEN_PROPERTY_MISMATCH, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, UNKNOWN_TYPEOF_VALUE, ,, ILLEGAL_PROPERTY_ACCESS, ), ;, TypeValidator, (, AbstractCompiler, compiler, ), {]
[,, DUP_VAR_DECLARATION, ,, HIDDEN_PROPERTY_MISMATCH, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, UNKNOWN_TYPEOF_VALUE, ,, ILLEGAL_PROPERTY_ACCESS, ), ;, TypeValidator, (, AbstractCompiler, compiler, ), {]
[,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, UNKNOWN_TYPEOF_VALUE, ,, ILLEGAL_PROPERTY_ACCESS, ), ;, TypeValidator, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, UNKNOWN_TYPEOF_VALUE, ,, ILLEGAL_PROPERTY_ACCESS, ), ;, TypeValidator, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, UNKNOWN_TYPEOF_VALUE, ,, ILLEGAL_PROPERTY_ACCESS, ), ;, TypeValidator, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[,, ILLEGAL_PROPERTY_ACCESS, ), ;, TypeValidator, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., typeRegistry, =]
[,, ILLEGAL_PROPERTY_ACCESS, ), ;, TypeValidator, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., typeRegistry, =]
[AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;]
[AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;]
[this, ., compiler, =, compiler, ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., allValueTypes, =]
[this, ., compiler, =, compiler, ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., allValueTypes, =]
[compiler, ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., allValueTypes, =, typeRegistry, ., createUnionType, (]
[this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., allValueTypes, =, typeRegistry, ., createUnionType, (, STRING_TYPE, ,]
[typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., allValueTypes, =, typeRegistry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ,]
[compiler, ., getTypeRegistry, (, ), ;, this, ., allValueTypes, =, typeRegistry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ,, BOOLEAN_TYPE, ,]
[getTypeRegistry, (, ), ;, this, ., allValueTypes, =, typeRegistry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ,, BOOLEAN_TYPE, ,, NULL_TYPE, ,]
[;, this, ., allValueTypes, =, typeRegistry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ,, BOOLEAN_TYPE, ,, NULL_TYPE, ,, VOID_TYPE, ), ;]
[;, this, ., allValueTypes, =, typeRegistry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ,, BOOLEAN_TYPE, ,, NULL_TYPE, ,, VOID_TYPE, ), ;]
[=, typeRegistry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ,, BOOLEAN_TYPE, ,, NULL_TYPE, ,, VOID_TYPE, ), ;, this, ., nullOrUndefined, =]
[=, typeRegistry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ,, BOOLEAN_TYPE, ,, NULL_TYPE, ,, VOID_TYPE, ), ;, this, ., nullOrUndefined, =]
[(, STRING_TYPE, ,, NUMBER_TYPE, ,, BOOLEAN_TYPE, ,, NULL_TYPE, ,, VOID_TYPE, ), ;, this, ., nullOrUndefined, =, typeRegistry, ., createUnionType, (]
[,, NUMBER_TYPE, ,, BOOLEAN_TYPE, ,, NULL_TYPE, ,, VOID_TYPE, ), ;, this, ., nullOrUndefined, =, typeRegistry, ., createUnionType, (, NULL_TYPE, ,]
[=, typeRegistry, ., createUnionType, (, NULL_TYPE, ,, VOID_TYPE, ), ;, }, Iterable, <, TypeMismatch, >, getMismatches, (, ), {, return]
[}, Iterable, <, TypeMismatch, >, getMismatches, (, ), {, return, mismatches, ;, }, void, setShouldReport, (, boolean, report, ), {]
[}, Iterable, <, TypeMismatch, >, getMismatches, (, ), {, return, mismatches, ;, }, void, setShouldReport, (, boolean, report, ), {]
[>, getMismatches, (, ), {, return, mismatches, ;, }, void, setShouldReport, (, boolean, report, ), {, this, ., shouldReport, =]
[this, ., shouldReport, =, report, ;, }, void, expectValidTypeofName, (, NodeTraversal, t, ,, Node, n, ,, String, found, ), {]
[shouldReport, =, report, ;, }, void, expectValidTypeofName, (, NodeTraversal, t, ,, Node, n, ,, String, found, ), {, report, (]
[shouldReport, =, report, ;, }, void, expectValidTypeofName, (, NodeTraversal, t, ,, Node, n, ,, String, found, ), {, report, (]
[}, void, expectValidTypeofName, (, NodeTraversal, t, ,, Node, n, ,, String, found, ), {, report, (, JSError, ., make, (]
[}, void, expectValidTypeofName, (, NodeTraversal, t, ,, Node, n, ,, String, found, ), {, report, (, JSError, ., make, (]
[,, Node, n, ,, String, found, ), {, report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,]
[n, ,, String, found, ), {, report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,]
[String, found, ), {, report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,, UNKNOWN_TYPEOF_VALUE, ,]
[;, }, boolean, expectObject, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (]
[}, boolean, expectObject, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !]
[}, boolean, expectObject, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !]
[Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !, type, ., matchesObjectContext, (, ), ), {]
[,, JSType, type, ,, String, msg, ), {, if, (, !, type, ., matchesObjectContext, (, ), ), {, mismatch, (]
[type, ,, String, msg, ), {, if, (, !, type, ., matchesObjectContext, (, ), ), {, mismatch, (, t, ,]
[String, msg, ), {, if, (, !, type, ., matchesObjectContext, (, ), ), {, mismatch, (, t, ,, n, ,]
[), {, if, (, !, type, ., matchesObjectContext, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,]
[if, (, !, type, ., matchesObjectContext, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,]
[., matchesObjectContext, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, OBJECT_TYPE, ), ;, return]
[), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,, OBJECT_TYPE, ), ;, return, false, ;, }, return]
[;, }, void, expectActualObject, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (]
[}, void, expectActualObject, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !]
[}, void, expectActualObject, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !]
[Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !, type, ., isObject, (, ), ), {]
[,, JSType, type, ,, String, msg, ), {, if, (, !, type, ., isObject, (, ), ), {, mismatch, (]
[type, ,, String, msg, ), {, if, (, !, type, ., isObject, (, ), ), {, mismatch, (, t, ,]
[String, msg, ), {, if, (, !, type, ., isObject, (, ), ), {, mismatch, (, t, ,, n, ,]
[), {, if, (, !, type, ., isObject, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,]
[if, (, !, type, ., isObject, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,]
[}, void, expectAnyObject, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, JSType, anyObjectType, =]
[expectAnyObject, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, JSType, anyObjectType, =, getNativeType, (]
[Node, n, ,, JSType, type, ,, String, msg, ), {, JSType, anyObjectType, =, getNativeType, (, NO_OBJECT_TYPE, ), ;, if, (]
[Node, n, ,, JSType, type, ,, String, msg, ), {, JSType, anyObjectType, =, getNativeType, (, NO_OBJECT_TYPE, ), ;, if, (]
[n, ,, JSType, type, ,, String, msg, ), {, JSType, anyObjectType, =, getNativeType, (, NO_OBJECT_TYPE, ), ;, if, (, !]
[n, ,, JSType, type, ,, String, msg, ), {, JSType, anyObjectType, =, getNativeType, (, NO_OBJECT_TYPE, ), ;, if, (, !]
[,, String, msg, ), {, JSType, anyObjectType, =, getNativeType, (, NO_OBJECT_TYPE, ), ;, if, (, !, anyObjectType, ., isSubtype, (]
[), {, JSType, anyObjectType, =, getNativeType, (, NO_OBJECT_TYPE, ), ;, if, (, !, anyObjectType, ., isSubtype, (, type, ), &&]
[{, JSType, anyObjectType, =, getNativeType, (, NO_OBJECT_TYPE, ), ;, if, (, !, anyObjectType, ., isSubtype, (, type, ), &&, !]
[{, JSType, anyObjectType, =, getNativeType, (, NO_OBJECT_TYPE, ), ;, if, (, !, anyObjectType, ., isSubtype, (, type, ), &&, !]
[), ;, if, (, !, anyObjectType, ., isSubtype, (, type, ), &&, !, type, ., isEmptyType, (, ), ), {]
[if, (, !, anyObjectType, ., isSubtype, (, type, ), &&, !, type, ., isEmptyType, (, ), ), {, mismatch, (]
[!, anyObjectType, ., isSubtype, (, type, ), &&, !, type, ., isEmptyType, (, ), ), {, mismatch, (, t, ,]
[., isSubtype, (, type, ), &&, !, type, ., isEmptyType, (, ), ), {, mismatch, (, t, ,, n, ,]
[(, type, ), &&, !, type, ., isEmptyType, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,]
[), &&, !, type, ., isEmptyType, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,]
[}, }, void, expectString, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (]
[}, void, expectString, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !]
[}, void, expectString, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !]
[Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !, type, ., matchesStringContext, (, ), ), {]
[,, JSType, type, ,, String, msg, ), {, if, (, !, type, ., matchesStringContext, (, ), ), {, mismatch, (]
[type, ,, String, msg, ), {, if, (, !, type, ., matchesStringContext, (, ), ), {, mismatch, (, t, ,]
[String, msg, ), {, if, (, !, type, ., matchesStringContext, (, ), ), {, mismatch, (, t, ,, n, ,]
[), {, if, (, !, type, ., matchesStringContext, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,]
[if, (, !, type, ., matchesStringContext, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,]
[}, }, void, expectNumber, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (]
[}, void, expectNumber, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !]
[}, void, expectNumber, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !]
[Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !, type, ., matchesNumberContext, (, ), ), {]
[,, JSType, type, ,, String, msg, ), {, if, (, !, type, ., matchesNumberContext, (, ), ), {, mismatch, (]
[type, ,, String, msg, ), {, if, (, !, type, ., matchesNumberContext, (, ), ), {, mismatch, (, t, ,]
[String, msg, ), {, if, (, !, type, ., matchesNumberContext, (, ), ), {, mismatch, (, t, ,, n, ,]
[), {, if, (, !, type, ., matchesNumberContext, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,]
[if, (, !, type, ., matchesNumberContext, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,]
[}, }, void, expectBitwiseable, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (]
[}, }, void, expectBitwiseable, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (]
[}, void, expectBitwiseable, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !]
[}, void, expectBitwiseable, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !]
[,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !, type, ., matchesNumberContext, (, ), &&]
[Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !, type, ., matchesNumberContext, (, ), &&, !]
[Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !, type, ., matchesNumberContext, (, ), &&, !]
[type, ,, String, msg, ), {, if, (, !, type, ., matchesNumberContext, (, ), &&, !, type, ., isSubtype, (]
[), {, if, (, !, type, ., matchesNumberContext, (, ), &&, !, type, ., isSubtype, (, allValueTypes, ), ), {]
[if, (, !, type, ., matchesNumberContext, (, ), &&, !, type, ., isSubtype, (, allValueTypes, ), ), {, mismatch, (]
[!, type, ., matchesNumberContext, (, ), &&, !, type, ., isSubtype, (, allValueTypes, ), ), {, mismatch, (, t, ,]
[., matchesNumberContext, (, ), &&, !, type, ., isSubtype, (, allValueTypes, ), ), {, mismatch, (, t, ,, n, ,]
[(, ), &&, !, type, ., isSubtype, (, allValueTypes, ), ), {, mismatch, (, t, ,, n, ,, msg, ,]
[&&, !, type, ., isSubtype, (, allValueTypes, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,]
[}, }, void, expectStringOrNumber, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (]
[}, }, void, expectStringOrNumber, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (]
[}, void, expectStringOrNumber, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !]
[}, void, expectStringOrNumber, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !]
[,, Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !, type, ., matchesNumberContext, (, ), &&]
[Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !, type, ., matchesNumberContext, (, ), &&, !]
[Node, n, ,, JSType, type, ,, String, msg, ), {, if, (, !, type, ., matchesNumberContext, (, ), &&, !]
[msg, ), {, if, (, !, type, ., matchesNumberContext, (, ), &&, !, type, ., matchesStringContext, (, ), ), {]
[{, if, (, !, type, ., matchesNumberContext, (, ), &&, !, type, ., matchesStringContext, (, ), ), {, mismatch, (]
[(, !, type, ., matchesNumberContext, (, ), &&, !, type, ., matchesStringContext, (, ), ), {, mismatch, (, t, ,]
[type, ., matchesNumberContext, (, ), &&, !, type, ., matchesStringContext, (, ), ), {, mismatch, (, t, ,, n, ,]
[matchesNumberContext, (, ), &&, !, type, ., matchesStringContext, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,]
[), &&, !, type, ., matchesStringContext, (, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, type, ,]
[expectNotNullOrUndefined, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ,, JSType, expectedType, ), {, if, (]
[expectNotNullOrUndefined, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ,, JSType, expectedType, ), {, if, (]
[expectNotNullOrUndefined, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ,, JSType, expectedType, ), {, if, (]
[expectNotNullOrUndefined, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ,, JSType, expectedType, ), {, if, (]
[(, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ,, JSType, expectedType, ), {, if, (, !]
[(, NodeTraversal, t, ,, Node, n, ,, JSType, type, ,, String, msg, ,, JSType, expectedType, ), {, if, (, !]
[,, JSType, type, ,, String, msg, ,, JSType, expectedType, ), {, if, (, !, type, ., isNoType, (, ), &&]
[JSType, type, ,, String, msg, ,, JSType, expectedType, ), {, if, (, !, type, ., isNoType, (, ), &&, !]
[JSType, type, ,, String, msg, ,, JSType, expectedType, ), {, if, (, !, type, ., isNoType, (, ), &&, !]
[JSType, expectedType, ), {, if, (, !, type, ., isNoType, (, ), &&, !, type, ., isUnknownType, (, ), &&]
[JSType, expectedType, ), {, if, (, !, type, ., isNoType, (, ), &&, !, type, ., isUnknownType, (, ), &&]
[if, (, !, type, ., isNoType, (, ), &&, !, type, ., isUnknownType, (, ), &&, type, ., isSubtype, (]
[type, ., isNoType, (, ), &&, !, type, ., isUnknownType, (, ), &&, type, ., isSubtype, (, nullOrUndefined, ), &&]
[., isNoType, (, ), &&, !, type, ., isUnknownType, (, ), &&, type, ., isSubtype, (, nullOrUndefined, ), &&, !]
[(, ), &&, !, type, ., isUnknownType, (, ), &&, type, ., isSubtype, (, nullOrUndefined, ), &&, !, containsForwardDeclaredUnresolvedName, (]
[isUnknownType, (, ), &&, type, ., isSubtype, (, nullOrUndefined, ), &&, !, containsForwardDeclaredUnresolvedName, (, type, ), ), {, if, (]
[isUnknownType, (, ), &&, type, ., isSubtype, (, nullOrUndefined, ), &&, !, containsForwardDeclaredUnresolvedName, (, type, ), ), {, if, (]
[isUnknownType, (, ), &&, type, ., isSubtype, (, nullOrUndefined, ), &&, !, containsForwardDeclaredUnresolvedName, (, type, ), ), {, if, (]
[isUnknownType, (, ), &&, type, ., isSubtype, (, nullOrUndefined, ), &&, !, containsForwardDeclaredUnresolvedName, (, type, ), ), {, if, (]
[isSubtype, (, nullOrUndefined, ), &&, !, containsForwardDeclaredUnresolvedName, (, type, ), ), {, if, (, n, ., isGetProp, (, ), &&]
[(, nullOrUndefined, ), &&, !, containsForwardDeclaredUnresolvedName, (, type, ), ), {, if, (, n, ., isGetProp, (, ), &&, !]
[(, nullOrUndefined, ), &&, !, containsForwardDeclaredUnresolvedName, (, type, ), ), {, if, (, n, ., isGetProp, (, ), &&, !]
[(, type, ), ), {, if, (, n, ., isGetProp, (, ), &&, !, t, ., inGlobalScope, (, ), &&]
[(, type, ), ), {, if, (, n, ., isGetProp, (, ), &&, !, t, ., inGlobalScope, (, ), &&]
[., isGetProp, (, ), &&, !, t, ., inGlobalScope, (, ), &&, type, ., isNullType, (, ), ), {, return]
[), &&, !, t, ., inGlobalScope, (, ), &&, type, ., isNullType, (, ), ), {, return, true, ;, }]
[!, t, ., inGlobalScope, (, ), &&, type, ., isNullType, (, ), ), {, return, true, ;, }, mismatch, (]
[., inGlobalScope, (, ), &&, type, ., isNullType, (, ), ), {, return, true, ;, }, mismatch, (, t, ,]
[(, ), &&, type, ., isNullType, (, ), ), {, return, true, ;, }, mismatch, (, t, ,, n, ,]
[&&, type, ., isNullType, (, ), ), {, return, true, ;, }, mismatch, (, t, ,, n, ,, msg, ,]
[., isNullType, (, ), ), {, return, true, ;, }, mismatch, (, t, ,, n, ,, msg, ,, type, ,]
[), {, return, true, ;, }, mismatch, (, t, ,, n, ,, msg, ,, type, ,, expectedType, ), ;, return]
[;, }, mismatch, (, t, ,, n, ,, msg, ,, type, ,, expectedType, ), ;, return, false, ;, }, return]
[), ;, return, false, ;, }, return, true, ;, }, private, boolean, containsForwardDeclaredUnresolvedName, (, JSType, type, ), {, if, (]
[), ;, return, false, ;, }, return, true, ;, }, private, boolean, containsForwardDeclaredUnresolvedName, (, JSType, type, ), {, if, (]
[containsForwardDeclaredUnresolvedName, (, JSType, type, ), {, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[containsForwardDeclaredUnresolvedName, (, JSType, type, ), {, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[containsForwardDeclaredUnresolvedName, (, JSType, type, ), {, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, if, (]
[for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, if, (, containsForwardDeclaredUnresolvedName, (]
[type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, if, (, containsForwardDeclaredUnresolvedName, (, alt, ), ), {, return]
[getAlternates, (, ), ), {, if, (, containsForwardDeclaredUnresolvedName, (, alt, ), ), {, return, true, ;, }, }, }, return]
[getAlternates, (, ), ), {, if, (, containsForwardDeclaredUnresolvedName, (, alt, ), ), {, return, true, ;, }, }, }, return]
[;, }, void, expectSwitchMatchesCase, (, NodeTraversal, t, ,, Node, n, ,, JSType, switchType, ,, JSType, caseType, ), {, if, (]
[;, }, void, expectSwitchMatchesCase, (, NodeTraversal, t, ,, Node, n, ,, JSType, switchType, ,, JSType, caseType, ), {, if, (]
[}, void, expectSwitchMatchesCase, (, NodeTraversal, t, ,, Node, n, ,, JSType, switchType, ,, JSType, caseType, ), {, if, (, !]
[}, void, expectSwitchMatchesCase, (, NodeTraversal, t, ,, Node, n, ,, JSType, switchType, ,, JSType, caseType, ), {, if, (, !]
[NodeTraversal, t, ,, Node, n, ,, JSType, switchType, ,, JSType, caseType, ), {, if, (, !, switchType, ., canTestForShallowEqualityWith, (]
[Node, n, ,, JSType, switchType, ,, JSType, caseType, ), {, if, (, !, switchType, ., canTestForShallowEqualityWith, (, caseType, ), &&]
[n, ,, JSType, switchType, ,, JSType, caseType, ), {, if, (, !, switchType, ., canTestForShallowEqualityWith, (, caseType, ), &&, (]
[n, ,, JSType, switchType, ,, JSType, caseType, ), {, if, (, !, switchType, ., canTestForShallowEqualityWith, (, caseType, ), &&, (]
[n, ,, JSType, switchType, ,, JSType, caseType, ), {, if, (, !, switchType, ., canTestForShallowEqualityWith, (, caseType, ), &&, (]
[n, ,, JSType, switchType, ,, JSType, caseType, ), {, if, (, !, switchType, ., canTestForShallowEqualityWith, (, caseType, ), &&, (]
[caseType, ), {, if, (, !, switchType, ., canTestForShallowEqualityWith, (, caseType, ), &&, (, caseType, ., autoboxesTo, (, ), ==]
[{, if, (, !, switchType, ., canTestForShallowEqualityWith, (, caseType, ), &&, (, caseType, ., autoboxesTo, (, ), ==, null, ||]
[if, (, !, switchType, ., canTestForShallowEqualityWith, (, caseType, ), &&, (, caseType, ., autoboxesTo, (, ), ==, null, ||, !]
[if, (, !, switchType, ., canTestForShallowEqualityWith, (, caseType, ), &&, (, caseType, ., autoboxesTo, (, ), ==, null, ||, !]
[if, (, !, switchType, ., canTestForShallowEqualityWith, (, caseType, ), &&, (, caseType, ., autoboxesTo, (, ), ==, null, ||, !]
[), &&, (, caseType, ., autoboxesTo, (, ), ==, null, ||, !, caseType, ., autoboxesTo, (, ), ., isSubtype, (]
[autoboxesTo, (, ), ==, null, ||, !, caseType, ., autoboxesTo, (, ), ., isSubtype, (, switchType, ), ), ), {]
[), ==, null, ||, !, caseType, ., autoboxesTo, (, ), ., isSubtype, (, switchType, ), ), ), {, mismatch, (]
[null, ||, !, caseType, ., autoboxesTo, (, ), ., isSubtype, (, switchType, ), ), ), {, mismatch, (, t, ,]
[null, ||, !, caseType, ., autoboxesTo, (, ), ., isSubtype, (, switchType, ), ), ), {, mismatch, (, t, ,]
[(, ), ., isSubtype, (, switchType, ), ), ), {, mismatch, (, t, ,, n, ., getFirstChild, (, ), ,]
[., isSubtype, (, switchType, ), ), ), {, mismatch, (, t, ,, n, ., getFirstChild, (, ), ,, "case expression doesn't match switch", ,]
[(, switchType, ), ), ), {, mismatch, (, t, ,, n, ., getFirstChild, (, ), ,, "case expression doesn't match switch", ,, caseType, ,]
[), ;, }, }, void, expectIndexMatch, (, NodeTraversal, t, ,, Node, n, ,, JSType, objType, ,, JSType, indexType, ), {]
[), ;, }, }, void, expectIndexMatch, (, NodeTraversal, t, ,, Node, n, ,, JSType, objType, ,, JSType, indexType, ), {]
[void, expectIndexMatch, (, NodeTraversal, t, ,, Node, n, ,, JSType, objType, ,, JSType, indexType, ), {, Preconditions, ., checkState, (]
[void, expectIndexMatch, (, NodeTraversal, t, ,, Node, n, ,, JSType, objType, ,, JSType, indexType, ), {, Preconditions, ., checkState, (]
[objType, ,, JSType, indexType, ), {, Preconditions, ., checkState, (, n, ., isGetElem, (, ), ), ;, Node, indexNode, =]
[objType, ,, JSType, indexType, ), {, Preconditions, ., checkState, (, n, ., isGetElem, (, ), ), ;, Node, indexNode, =]
[checkState, (, n, ., isGetElem, (, ), ), ;, Node, indexNode, =, n, ., getLastChild, (, ), ;, if, (]
[checkState, (, n, ., isGetElem, (, ), ), ;, Node, indexNode, =, n, ., getLastChild, (, ), ;, if, (]
[), ;, Node, indexNode, =, n, ., getLastChild, (, ), ;, if, (, objType, ., isStruct, (, ), ), {]
[Node, indexNode, =, n, ., getLastChild, (, ), ;, if, (, objType, ., isStruct, (, ), ), {, report, (]
[Node, indexNode, =, n, ., getLastChild, (, ), ;, if, (, objType, ., isStruct, (, ), ), {, report, (]
[., getLastChild, (, ), ;, if, (, objType, ., isStruct, (, ), ), {, report, (, JSError, ., make, (]
[., getLastChild, (, ), ;, if, (, objType, ., isStruct, (, ), ), {, report, (, JSError, ., make, (]
[(, objType, ., isStruct, (, ), ), {, report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,]
[., isStruct, (, ), ), {, report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, indexNode, ,]
[(, ), ), {, report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, indexNode, ,, ILLEGAL_PROPERTY_ACCESS, ,]
[), {, report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, indexNode, ,, ILLEGAL_PROPERTY_ACCESS, ,, "'[]'", ,]
[(, t, ., getSourceName, (, ), ,, indexNode, ,, ILLEGAL_PROPERTY_ACCESS, ,, "'[]'", ,, "struct", ), ), ;, }, if, (]
[(, t, ., getSourceName, (, ), ,, indexNode, ,, ILLEGAL_PROPERTY_ACCESS, ,, "'[]'", ,, "struct", ), ), ;, }, if, (]
[indexNode, ,, ILLEGAL_PROPERTY_ACCESS, ,, "'[]'", ,, "struct", ), ), ;, }, if, (, objType, ., isUnknownType, (, ), ), {]
[ILLEGAL_PROPERTY_ACCESS, ,, "'[]'", ,, "struct", ), ), ;, }, if, (, objType, ., isUnknownType, (, ), ), {, expectStringOrNumber, (]
["'[]'", ,, "struct", ), ), ;, }, if, (, objType, ., isUnknownType, (, ), ), {, expectStringOrNumber, (, t, ,]
["struct", ), ), ;, }, if, (, objType, ., isUnknownType, (, ), ), {, expectStringOrNumber, (, t, ,, indexNode, ,]
[), ;, }, if, (, objType, ., isUnknownType, (, ), ), {, expectStringOrNumber, (, t, ,, indexNode, ,, indexType, ,]
[), ), {, expectStringOrNumber, (, t, ,, indexNode, ,, indexType, ,, "property access", ), ;, }, else, {, ObjectType, dereferenced, =]
[), ), {, expectStringOrNumber, (, t, ,, indexNode, ,, indexType, ,, "property access", ), ;, }, else, {, ObjectType, dereferenced, =]
[,, indexType, ,, "property access", ), ;, }, else, {, ObjectType, dereferenced, =, objType, ., dereference, (, ), ;, if, (]
[,, indexType, ,, "property access", ), ;, }, else, {, ObjectType, dereferenced, =, objType, ., dereference, (, ), ;, if, (]
[,, indexType, ,, "property access", ), ;, }, else, {, ObjectType, dereferenced, =, objType, ., dereference, (, ), ;, if, (]
[,, "property access", ), ;, }, else, {, ObjectType, dereferenced, =, objType, ., dereference, (, ), ;, if, (, dereferenced, !=]
[), ;, }, else, {, ObjectType, dereferenced, =, objType, ., dereference, (, ), ;, if, (, dereferenced, !=, null, &&]
[), ;, }, else, {, ObjectType, dereferenced, =, objType, ., dereference, (, ), ;, if, (, dereferenced, !=, null, &&]
[), ;, }, else, {, ObjectType, dereferenced, =, objType, ., dereference, (, ), ;, if, (, dereferenced, !=, null, &&]
[dereferenced, =, objType, ., dereference, (, ), ;, if, (, dereferenced, !=, null, &&, dereferenced, ., getIndexType, (, ), !=]
[., dereference, (, ), ;, if, (, dereferenced, !=, null, &&, dereferenced, ., getIndexType, (, ), !=, null, ), {]
[(, ), ;, if, (, dereferenced, !=, null, &&, dereferenced, ., getIndexType, (, ), !=, null, ), {, expectCanAssignTo, (]
[;, if, (, dereferenced, !=, null, &&, dereferenced, ., getIndexType, (, ), !=, null, ), {, expectCanAssignTo, (, t, ,]
[(, dereferenced, !=, null, &&, dereferenced, ., getIndexType, (, ), !=, null, ), {, expectCanAssignTo, (, t, ,, indexNode, ,]
[!=, null, &&, dereferenced, ., getIndexType, (, ), !=, null, ), {, expectCanAssignTo, (, t, ,, indexNode, ,, indexType, ,]
[!=, null, &&, dereferenced, ., getIndexType, (, ), !=, null, ), {, expectCanAssignTo, (, t, ,, indexNode, ,, indexType, ,]
[(, ), !=, null, ), {, expectCanAssignTo, (, t, ,, indexNode, ,, indexType, ,, dereferenced, ., getIndexType, (, ), ,]
[(, t, ,, indexNode, ,, indexType, ,, dereferenced, ., getIndexType, (, ), ,, "restricted index type", ), ;, }, else, if, (]
[(, t, ,, indexNode, ,, indexType, ,, dereferenced, ., getIndexType, (, ), ,, "restricted index type", ), ;, }, else, if, (]
[(, t, ,, indexNode, ,, indexType, ,, dereferenced, ., getIndexType, (, ), ,, "restricted index type", ), ;, }, else, if, (]
[,, indexNode, ,, indexType, ,, dereferenced, ., getIndexType, (, ), ,, "restricted index type", ), ;, }, else, if, (, dereferenced, !=]
[,, indexType, ,, dereferenced, ., getIndexType, (, ), ,, "restricted index type", ), ;, }, else, if, (, dereferenced, !=, null, &&]
[,, indexType, ,, dereferenced, ., getIndexType, (, ), ,, "restricted index type", ), ;, }, else, if, (, dereferenced, !=, null, &&]
[), ,, "restricted index type", ), ;, }, else, if, (, dereferenced, !=, null, &&, dereferenced, ., isArrayType, (, ), ), {]
["restricted index type", ), ;, }, else, if, (, dereferenced, !=, null, &&, dereferenced, ., isArrayType, (, ), ), {, expectNumber, (]
[;, }, else, if, (, dereferenced, !=, null, &&, dereferenced, ., isArrayType, (, ), ), {, expectNumber, (, t, ,]
[else, if, (, dereferenced, !=, null, &&, dereferenced, ., isArrayType, (, ), ), {, expectNumber, (, t, ,, indexNode, ,]
[(, dereferenced, !=, null, &&, dereferenced, ., isArrayType, (, ), ), {, expectNumber, (, t, ,, indexNode, ,, indexType, ,]
[isArrayType, (, ), ), {, expectNumber, (, t, ,, indexNode, ,, indexType, ,, "array access", ), ;, }, else, if, (]
[isArrayType, (, ), ), {, expectNumber, (, t, ,, indexNode, ,, indexType, ,, "array access", ), ;, }, else, if, (]
[t, ,, indexNode, ,, indexType, ,, "array access", ), ;, }, else, if, (, objType, ., matchesObjectContext, (, ), ), {]
[indexNode, ,, indexType, ,, "array access", ), ;, }, else, if, (, objType, ., matchesObjectContext, (, ), ), {, expectString, (]
[indexType, ,, "array access", ), ;, }, else, if, (, objType, ., matchesObjectContext, (, ), ), {, expectString, (, t, ,]
["array access", ), ;, }, else, if, (, objType, ., matchesObjectContext, (, ), ), {, expectString, (, t, ,, indexNode, ,]
[;, }, else, if, (, objType, ., matchesObjectContext, (, ), ), {, expectString, (, t, ,, indexNode, ,, indexType, ,]
[., matchesObjectContext, (, ), ), {, expectString, (, t, ,, indexNode, ,, indexType, ,, "property access", ), ;, }, else, {]
[(, ), ), {, expectString, (, t, ,, indexNode, ,, indexType, ,, "property access", ), ;, }, else, {, mismatch, (]
[), {, expectString, (, t, ,, indexNode, ,, indexType, ,, "property access", ), ;, }, else, {, mismatch, (, t, ,]
[expectString, (, t, ,, indexNode, ,, indexType, ,, "property access", ), ;, }, else, {, mismatch, (, t, ,, n, ,]
[t, ,, indexNode, ,, indexType, ,, "property access", ), ;, }, else, {, mismatch, (, t, ,, n, ,, "only arrays or objects can be accessed", ,]
[indexNode, ,, indexType, ,, "property access", ), ;, }, else, {, mismatch, (, t, ,, n, ,, "only arrays or objects can be accessed", ,, objType, ,]
[indexNode, ,, indexType, ,, "property access", ), ;, }, else, {, mismatch, (, t, ,, n, ,, "only arrays or objects can be accessed", ,, objType, ,]
["property access", ), ;, }, else, {, mismatch, (, t, ,, n, ,, "only arrays or objects can be accessed", ,, objType, ,, typeRegistry, ., createUnionType, (]
[;, }, else, {, mismatch, (, t, ,, n, ,, "only arrays or objects can be accessed", ,, objType, ,, typeRegistry, ., createUnionType, (, ARRAY_TYPE, ,]
[t, ,, Node, n, ,, JSType, rightType, ,, JSType, leftType, ,, Node, owner, ,, String, propName, ), {, if, (]
[t, ,, Node, n, ,, JSType, rightType, ,, JSType, leftType, ,, Node, owner, ,, String, propName, ), {, if, (]
[,, Node, n, ,, JSType, rightType, ,, JSType, leftType, ,, Node, owner, ,, String, propName, ), {, if, (, !]
[,, Node, n, ,, JSType, rightType, ,, JSType, leftType, ,, Node, owner, ,, String, propName, ), {, if, (, !]
[,, JSType, leftType, ,, Node, owner, ,, String, propName, ), {, if, (, !, leftType, ., isNoType, (, ), &&]
[JSType, leftType, ,, Node, owner, ,, String, propName, ), {, if, (, !, leftType, ., isNoType, (, ), &&, !]
[JSType, leftType, ,, Node, owner, ,, String, propName, ), {, if, (, !, leftType, ., isNoType, (, ), &&, !]
[owner, ,, String, propName, ), {, if, (, !, leftType, ., isNoType, (, ), &&, !, rightType, ., isSubtype, (]
[(, !, leftType, ., isNoType, (, ), &&, !, rightType, ., isSubtype, (, leftType, ), ), {, JSType, ownerType, =]
[leftType, ., isNoType, (, ), &&, !, rightType, ., isSubtype, (, leftType, ), ), {, JSType, ownerType, =, getJSType, (]
[&&, !, rightType, ., isSubtype, (, leftType, ), ), {, JSType, ownerType, =, getJSType, (, owner, ), ;, if, (]
[&&, !, rightType, ., isSubtype, (, leftType, ), ), {, JSType, ownerType, =, getJSType, (, owner, ), ;, if, (]
[JSType, ownerType, =, getJSType, (, owner, ), ;, if, (, ownerType, ., isFunctionPrototypeType, (, ), ), {, FunctionType, ownerFn, =]
[JSType, ownerType, =, getJSType, (, owner, ), ;, if, (, ownerType, ., isFunctionPrototypeType, (, ), ), {, FunctionType, ownerFn, =]
[JSType, ownerType, =, getJSType, (, owner, ), ;, if, (, ownerType, ., isFunctionPrototypeType, (, ), ), {, FunctionType, ownerFn, =]
[isFunctionPrototypeType, (, ), ), {, FunctionType, ownerFn, =, ownerType, ., toObjectType, (, ), ., getOwnerFunction, (, ), ;, if, (]
[isFunctionPrototypeType, (, ), ), {, FunctionType, ownerFn, =, ownerType, ., toObjectType, (, ), ., getOwnerFunction, (, ), ;, if, (]
[isFunctionPrototypeType, (, ), ), {, FunctionType, ownerFn, =, ownerType, ., toObjectType, (, ), ., getOwnerFunction, (, ), ;, if, (]
[isFunctionPrototypeType, (, ), ), {, FunctionType, ownerFn, =, ownerType, ., toObjectType, (, ), ., getOwnerFunction, (, ), ;, if, (]
[ownerFn, =, ownerType, ., toObjectType, (, ), ., getOwnerFunction, (, ), ;, if, (, ownerFn, ., isInterface, (, ), &&]
[ownerFn, =, ownerType, ., toObjectType, (, ), ., getOwnerFunction, (, ), ;, if, (, ownerFn, ., isInterface, (, ), &&]
[), ., getOwnerFunction, (, ), ;, if, (, ownerFn, ., isInterface, (, ), &&, rightType, ., isFunctionType, (, ), &&]
[), ., getOwnerFunction, (, ), ;, if, (, ownerFn, ., isInterface, (, ), &&, rightType, ., isFunctionType, (, ), &&]
[ownerFn, ., isInterface, (, ), &&, rightType, ., isFunctionType, (, ), &&, leftType, ., isFunctionType, (, ), ), {, return]
[), &&, rightType, ., isFunctionType, (, ), &&, leftType, ., isFunctionType, (, ), ), {, return, true, ;, }, }]
[rightType, ., isFunctionType, (, ), &&, leftType, ., isFunctionType, (, ), ), {, return, true, ;, }, }, mismatch, (]
[isFunctionType, (, ), &&, leftType, ., isFunctionType, (, ), ), {, return, true, ;, }, }, mismatch, (, t, ,]
[), &&, leftType, ., isFunctionType, (, ), ), {, return, true, ;, }, }, mismatch, (, t, ,, n, ,]
[), &&, leftType, ., isFunctionType, (, ), ), {, return, true, ;, }, }, mismatch, (, t, ,, n, ,]
[), &&, leftType, ., isFunctionType, (, ), ), {, return, true, ;, }, }, mismatch, (, t, ,, n, ,]
[), &&, leftType, ., isFunctionType, (, ), ), {, return, true, ;, }, }, mismatch, (, t, ,, n, ,]
[leftType, ., isFunctionType, (, ), ), {, return, true, ;, }, }, mismatch, (, t, ,, n, ,, "assignment to property ", +]
[isFunctionType, (, ), ), {, return, true, ;, }, }, mismatch, (, t, ,, n, ,, "assignment to property ", +, propName, +]
[), ), {, return, true, ;, }, }, mismatch, (, t, ,, n, ,, "assignment to property ", +, propName, +, " of ", +]
[{, return, true, ;, }, }, mismatch, (, t, ,, n, ,, "assignment to property ", +, propName, +, " of ", +, getReadableJSTypeName, (]
[true, ;, }, }, mismatch, (, t, ,, n, ,, "assignment to property ", +, propName, +, " of ", +, getReadableJSTypeName, (, owner, ,]
[}, mismatch, (, t, ,, n, ,, "assignment to property ", +, propName, +, " of ", +, getReadableJSTypeName, (, owner, ,, true, ), ,]
[(, t, ,, n, ,, "assignment to property ", +, propName, +, " of ", +, getReadableJSTypeName, (, owner, ,, true, ), ,, rightType, ,]
[,, "assignment to property ", +, propName, +, " of ", +, getReadableJSTypeName, (, owner, ,, true, ), ,, rightType, ,, leftType, ), ;, return]
[+, " of ", +, getReadableJSTypeName, (, owner, ,, true, ), ,, rightType, ,, leftType, ), ;, return, false, ;, }, return]
[expectCanAssignTo, (, NodeTraversal, t, ,, Node, n, ,, JSType, rightType, ,, JSType, leftType, ,, String, msg, ), {, if, (]
[(, NodeTraversal, t, ,, Node, n, ,, JSType, rightType, ,, JSType, leftType, ,, String, msg, ), {, if, (, !]
[(, NodeTraversal, t, ,, Node, n, ,, JSType, rightType, ,, JSType, leftType, ,, String, msg, ), {, if, (, !]
[Node, n, ,, JSType, rightType, ,, JSType, leftType, ,, String, msg, ), {, if, (, !, rightType, ., isSubtype, (]
[rightType, ,, JSType, leftType, ,, String, msg, ), {, if, (, !, rightType, ., isSubtype, (, leftType, ), ), {]
[JSType, leftType, ,, String, msg, ), {, if, (, !, rightType, ., isSubtype, (, leftType, ), ), {, mismatch, (]
[,, String, msg, ), {, if, (, !, rightType, ., isSubtype, (, leftType, ), ), {, mismatch, (, t, ,]
[msg, ), {, if, (, !, rightType, ., isSubtype, (, leftType, ), ), {, mismatch, (, t, ,, n, ,]
[{, if, (, !, rightType, ., isSubtype, (, leftType, ), ), {, mismatch, (, t, ,, n, ,, msg, ,]
[(, !, rightType, ., isSubtype, (, leftType, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, rightType, ,]
[isSubtype, (, leftType, ), ), {, mismatch, (, t, ,, n, ,, msg, ,, rightType, ,, leftType, ), ;, return]
[), {, mismatch, (, t, ,, n, ,, msg, ,, rightType, ,, leftType, ), ;, return, false, ;, }, return]
[t, ,, Node, n, ,, JSType, argType, ,, JSType, paramType, ,, Node, callNode, ,, int, ordinal, ), {, if, (]
[,, Node, n, ,, JSType, argType, ,, JSType, paramType, ,, Node, callNode, ,, int, ordinal, ), {, if, (, !]
[,, Node, n, ,, JSType, argType, ,, JSType, paramType, ,, Node, callNode, ,, int, ordinal, ), {, if, (, !]
[JSType, argType, ,, JSType, paramType, ,, Node, callNode, ,, int, ordinal, ), {, if, (, !, argType, ., isSubtype, (]
[paramType, ,, Node, callNode, ,, int, ordinal, ), {, if, (, !, argType, ., isSubtype, (, paramType, ), ), {]
[Node, callNode, ,, int, ordinal, ), {, if, (, !, argType, ., isSubtype, (, paramType, ), ), {, mismatch, (]
[,, int, ordinal, ), {, if, (, !, argType, ., isSubtype, (, paramType, ), ), {, mismatch, (, t, ,]
[ordinal, ), {, if, (, !, argType, ., isSubtype, (, paramType, ), ), {, mismatch, (, t, ,, n, ,]
[ordinal, ), {, if, (, !, argType, ., isSubtype, (, paramType, ), ), {, mismatch, (, t, ,, n, ,]
[(, !, argType, ., isSubtype, (, paramType, ), ), {, mismatch, (, t, ,, n, ,, String, ., format, (]
[(, !, argType, ., isSubtype, (, paramType, ), ), {, mismatch, (, t, ,, n, ,, String, ., format, (]
[argType, ., isSubtype, (, paramType, ), ), {, mismatch, (, t, ,, n, ,, String, ., format, (, "actual parameter %d of %s does not match ", +]
[isSubtype, (, paramType, ), ), {, mismatch, (, t, ,, n, ,, String, ., format, (, "actual parameter %d of %s does not match ", +, "formal parameter", ,]
[paramType, ), ), {, mismatch, (, t, ,, n, ,, String, ., format, (, "actual parameter %d of %s does not match ", +, "formal parameter", ,, ordinal, ,]
[), {, mismatch, (, t, ,, n, ,, String, ., format, (, "actual parameter %d of %s does not match ", +, "formal parameter", ,, ordinal, ,, getReadableJSTypeName, (]
[), {, mismatch, (, t, ,, n, ,, String, ., format, (, "actual parameter %d of %s does not match ", +, "formal parameter", ,, ordinal, ,, getReadableJSTypeName, (]
[n, ,, String, ., format, (, "actual parameter %d of %s does not match ", +, "formal parameter", ,, ordinal, ,, getReadableJSTypeName, (, callNode, ., getFirstChild, (, ), ,]
[format, (, "actual parameter %d of %s does not match ", +, "formal parameter", ,, ordinal, ,, getReadableJSTypeName, (, callNode, ., getFirstChild, (, ), ,, false, ), ), ,]
["actual parameter %d of %s does not match ", +, "formal parameter", ,, ordinal, ,, getReadableJSTypeName, (, callNode, ., getFirstChild, (, ), ,, false, ), ), ,, argType, ,]
[t, ,, Node, n, ,, JSType, overridingType, ,, JSType, hiddenType, ,, String, propertyName, ,, JSType, ownerType, ), {, if, (]
[,, Node, n, ,, JSType, overridingType, ,, JSType, hiddenType, ,, String, propertyName, ,, JSType, ownerType, ), {, if, (, !]
[,, Node, n, ,, JSType, overridingType, ,, JSType, hiddenType, ,, String, propertyName, ,, JSType, ownerType, ), {, if, (, !]
[JSType, overridingType, ,, JSType, hiddenType, ,, String, propertyName, ,, JSType, ownerType, ), {, if, (, !, overridingType, ., isSubtype, (]
[hiddenType, ,, String, propertyName, ,, JSType, ownerType, ), {, if, (, !, overridingType, ., isSubtype, (, hiddenType, ), ), {]
[String, propertyName, ,, JSType, ownerType, ), {, if, (, !, overridingType, ., isSubtype, (, hiddenType, ), ), {, registerMismatch, (]
[,, JSType, ownerType, ), {, if, (, !, overridingType, ., isSubtype, (, hiddenType, ), ), {, registerMismatch, (, overridingType, ,]
[ownerType, ), {, if, (, !, overridingType, ., isSubtype, (, hiddenType, ), ), {, registerMismatch, (, overridingType, ,, hiddenType, ,]
[{, if, (, !, overridingType, ., isSubtype, (, hiddenType, ), ), {, registerMismatch, (, overridingType, ,, hiddenType, ,, report, (]
[{, if, (, !, overridingType, ., isSubtype, (, hiddenType, ), ), {, registerMismatch, (, overridingType, ,, hiddenType, ,, report, (]
[overridingType, ., isSubtype, (, hiddenType, ), ), {, registerMismatch, (, overridingType, ,, hiddenType, ,, report, (, t, ., makeError, (]
[isSubtype, (, hiddenType, ), ), {, registerMismatch, (, overridingType, ,, hiddenType, ,, report, (, t, ., makeError, (, n, ,]
[hiddenType, ), ), {, registerMismatch, (, overridingType, ,, hiddenType, ,, report, (, t, ., makeError, (, n, ,, HIDDEN_PROPERTY_MISMATCH, ,]
[), {, registerMismatch, (, overridingType, ,, hiddenType, ,, report, (, t, ., makeError, (, n, ,, HIDDEN_PROPERTY_MISMATCH, ,, propertyName, ,]
[), {, registerMismatch, (, overridingType, ,, hiddenType, ,, report, (, t, ., makeError, (, n, ,, HIDDEN_PROPERTY_MISMATCH, ,, propertyName, ,]
[hiddenType, ,, report, (, t, ., makeError, (, n, ,, HIDDEN_PROPERTY_MISMATCH, ,, propertyName, ,, ownerType, ., toString, (, ), ,]
[hiddenType, ,, report, (, t, ., makeError, (, n, ,, HIDDEN_PROPERTY_MISMATCH, ,, propertyName, ,, ownerType, ., toString, (, ), ,]
[makeError, (, n, ,, HIDDEN_PROPERTY_MISMATCH, ,, propertyName, ,, ownerType, ., toString, (, ), ,, hiddenType, ., toString, (, ), ,]
[makeError, (, n, ,, HIDDEN_PROPERTY_MISMATCH, ,, propertyName, ,, ownerType, ., toString, (, ), ,, hiddenType, ., toString, (, ), ,]
[}, void, expectSuperType, (, NodeTraversal, t, ,, Node, n, ,, ObjectType, superObject, ,, ObjectType, subObject, ), {, FunctionType, subCtor, =]
[}, void, expectSuperType, (, NodeTraversal, t, ,, Node, n, ,, ObjectType, superObject, ,, ObjectType, subObject, ), {, FunctionType, subCtor, =]
[,, ObjectType, superObject, ,, ObjectType, subObject, ), {, FunctionType, subCtor, =, subObject, ., getConstructor, (, ), ;, ObjectType, implicitProto, =]
[,, ObjectType, superObject, ,, ObjectType, subObject, ), {, FunctionType, subCtor, =, subObject, ., getConstructor, (, ), ;, ObjectType, implicitProto, =]
[subCtor, =, subObject, ., getConstructor, (, ), ;, ObjectType, implicitProto, =, subObject, ., getImplicitPrototype, (, ), ;, ObjectType, declaredSuper, =]
[subCtor, =, subObject, ., getConstructor, (, ), ;, ObjectType, implicitProto, =, subObject, ., getImplicitPrototype, (, ), ;, ObjectType, declaredSuper, =]
[subCtor, =, subObject, ., getConstructor, (, ), ;, ObjectType, implicitProto, =, subObject, ., getImplicitPrototype, (, ), ;, ObjectType, declaredSuper, =]
[subObject, ., getConstructor, (, ), ;, ObjectType, implicitProto, =, subObject, ., getImplicitPrototype, (, ), ;, ObjectType, declaredSuper, =, implicitProto, ==]
[getConstructor, (, ), ;, ObjectType, implicitProto, =, subObject, ., getImplicitPrototype, (, ), ;, ObjectType, declaredSuper, =, implicitProto, ==, null, ?]
[), ;, ObjectType, implicitProto, =, subObject, ., getImplicitPrototype, (, ), ;, ObjectType, declaredSuper, =, implicitProto, ==, null, ?, null, :]
[), ;, ObjectType, implicitProto, =, subObject, ., getImplicitPrototype, (, ), ;, ObjectType, declaredSuper, =, implicitProto, ==, null, ?, null, :]
[(, ), ;, ObjectType, declaredSuper, =, implicitProto, ==, null, ?, null, :, implicitProto, ., getImplicitPrototype, (, ), ;, if, (]
[(, ), ;, ObjectType, declaredSuper, =, implicitProto, ==, null, ?, null, :, implicitProto, ., getImplicitPrototype, (, ), ;, if, (]
[(, ), ;, ObjectType, declaredSuper, =, implicitProto, ==, null, ?, null, :, implicitProto, ., getImplicitPrototype, (, ), ;, if, (]
[(, ), ;, ObjectType, declaredSuper, =, implicitProto, ==, null, ?, null, :, implicitProto, ., getImplicitPrototype, (, ), ;, if, (]
[;, ObjectType, declaredSuper, =, implicitProto, ==, null, ?, null, :, implicitProto, ., getImplicitPrototype, (, ), ;, if, (, declaredSuper, !=]
[declaredSuper, =, implicitProto, ==, null, ?, null, :, implicitProto, ., getImplicitPrototype, (, ), ;, if, (, declaredSuper, !=, null, &&]
[=, implicitProto, ==, null, ?, null, :, implicitProto, ., getImplicitPrototype, (, ), ;, if, (, declaredSuper, !=, null, &&, !]
[implicitProto, ==, null, ?, null, :, implicitProto, ., getImplicitPrototype, (, ), ;, if, (, declaredSuper, !=, null, &&, !, (]
[implicitProto, ==, null, ?, null, :, implicitProto, ., getImplicitPrototype, (, ), ;, if, (, declaredSuper, !=, null, &&, !, (]
[:, implicitProto, ., getImplicitPrototype, (, ), ;, if, (, declaredSuper, !=, null, &&, !, (, superObject, instanceof, UnknownType, ), &&]
[implicitProto, ., getImplicitPrototype, (, ), ;, if, (, declaredSuper, !=, null, &&, !, (, superObject, instanceof, UnknownType, ), &&, !]
[implicitProto, ., getImplicitPrototype, (, ), ;, if, (, declaredSuper, !=, null, &&, !, (, superObject, instanceof, UnknownType, ), &&, !]
[), ;, if, (, declaredSuper, !=, null, &&, !, (, superObject, instanceof, UnknownType, ), &&, !, declaredSuper, ., isEquivalentTo, (]
[null, &&, !, (, superObject, instanceof, UnknownType, ), &&, !, declaredSuper, ., isEquivalentTo, (, superObject, ), ), {, if, (]
[null, &&, !, (, superObject, instanceof, UnknownType, ), &&, !, declaredSuper, ., isEquivalentTo, (, superObject, ), ), {, if, (]
[superObject, instanceof, UnknownType, ), &&, !, declaredSuper, ., isEquivalentTo, (, superObject, ), ), {, if, (, declaredSuper, ., isEquivalentTo, (]
[UnknownType, ), &&, !, declaredSuper, ., isEquivalentTo, (, superObject, ), ), {, if, (, declaredSuper, ., isEquivalentTo, (, getNativeType, (]
[., isEquivalentTo, (, superObject, ), ), {, if, (, declaredSuper, ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), {]
[(, superObject, ), ), {, if, (, declaredSuper, ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), {, registerMismatch, (]
[), ), {, if, (, declaredSuper, ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), {, registerMismatch, (, superObject, ,]
[{, if, (, declaredSuper, ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), {, registerMismatch, (, superObject, ,, declaredSuper, ,]
[(, declaredSuper, ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), {, registerMismatch, (, superObject, ,, declaredSuper, ,, report, (]
[(, declaredSuper, ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), {, registerMismatch, (, superObject, ,, declaredSuper, ,, report, (]
[(, getNativeType, (, OBJECT_TYPE, ), ), ), {, registerMismatch, (, superObject, ,, declaredSuper, ,, report, (, t, ., makeError, (]
[(, OBJECT_TYPE, ), ), ), {, registerMismatch, (, superObject, ,, declaredSuper, ,, report, (, t, ., makeError, (, n, ,]
[), ), ), {, registerMismatch, (, superObject, ,, declaredSuper, ,, report, (, t, ., makeError, (, n, ,, MISSING_EXTENDS_TAG_WARNING, ,]
[), ), ), {, registerMismatch, (, superObject, ,, declaredSuper, ,, report, (, t, ., makeError, (, n, ,, MISSING_EXTENDS_TAG_WARNING, ,]
[t, ., makeError, (, n, ,, MISSING_EXTENDS_TAG_WARNING, ,, subObject, ., toString, (, ), ), ), ), ;, }, else, {]
[makeError, (, n, ,, MISSING_EXTENDS_TAG_WARNING, ,, subObject, ., toString, (, ), ), ), ), ;, }, else, {, mismatch, (]
[makeError, (, n, ,, MISSING_EXTENDS_TAG_WARNING, ,, subObject, ., toString, (, ), ), ), ), ;, }, else, {, mismatch, (]
[subObject, ., toString, (, ), ), ), ), ;, }, else, {, mismatch, (, t, ., getSourceName, (, ), ,]
[toString, (, ), ), ), ), ;, }, else, {, mismatch, (, t, ., getSourceName, (, ), ,, n, ,]
[), ), ), ), ;, }, else, {, mismatch, (, t, ., getSourceName, (, ), ,, n, ,, "mismatch in declaration of superclass type", ,]
[), ), ;, }, else, {, mismatch, (, t, ., getSourceName, (, ), ,, n, ,, "mismatch in declaration of superclass type", ,, superObject, ,]
[mismatch, (, t, ., getSourceName, (, ), ,, n, ,, "mismatch in declaration of superclass type", ,, superObject, ,, declaredSuper, ), ;, }, if, (]
[(, t, ., getSourceName, (, ), ,, n, ,, "mismatch in declaration of superclass type", ,, superObject, ,, declaredSuper, ), ;, }, if, (, !]
[(, t, ., getSourceName, (, ), ,, n, ,, "mismatch in declaration of superclass type", ,, superObject, ,, declaredSuper, ), ;, }, if, (, !]
[n, ,, "mismatch in declaration of superclass type", ,, superObject, ,, declaredSuper, ), ;, }, if, (, !, subCtor, ., hasCachedValues, (, ), ), {]
[n, ,, "mismatch in declaration of superclass type", ,, superObject, ,, declaredSuper, ), ;, }, if, (, !, subCtor, ., hasCachedValues, (, ), ), {]
[superObject, ,, declaredSuper, ), ;, }, if, (, !, subCtor, ., hasCachedValues, (, ), ), {, subCtor, ., setPrototypeBasedOn, (]
[}, }, void, expectCanCast, (, NodeTraversal, t, ,, Node, n, ,, JSType, castType, ,, JSType, type, ), {, if, (]
[}, void, expectCanCast, (, NodeTraversal, t, ,, Node, n, ,, JSType, castType, ,, JSType, type, ), {, if, (, !]
[}, void, expectCanCast, (, NodeTraversal, t, ,, Node, n, ,, JSType, castType, ,, JSType, type, ), {, if, (, !]
[NodeTraversal, t, ,, Node, n, ,, JSType, castType, ,, JSType, type, ), {, if, (, !, type, ., canCastTo, (]
[n, ,, JSType, castType, ,, JSType, type, ), {, if, (, !, type, ., canCastTo, (, castType, ), ), {]
[JSType, castType, ,, JSType, type, ), {, if, (, !, type, ., canCastTo, (, castType, ), ), {, registerMismatch, (]
[,, JSType, type, ), {, if, (, !, type, ., canCastTo, (, castType, ), ), {, registerMismatch, (, type, ,]
[type, ), {, if, (, !, type, ., canCastTo, (, castType, ), ), {, registerMismatch, (, type, ,, castType, ,]
[{, if, (, !, type, ., canCastTo, (, castType, ), ), {, registerMismatch, (, type, ,, castType, ,, report, (]
[{, if, (, !, type, ., canCastTo, (, castType, ), ), {, registerMismatch, (, type, ,, castType, ,, report, (]
[type, ., canCastTo, (, castType, ), ), {, registerMismatch, (, type, ,, castType, ,, report, (, t, ., makeError, (]
[canCastTo, (, castType, ), ), {, registerMismatch, (, type, ,, castType, ,, report, (, t, ., makeError, (, n, ,]
[castType, ), ), {, registerMismatch, (, type, ,, castType, ,, report, (, t, ., makeError, (, n, ,, INVALID_CAST, ,]
[castType, ), ), {, registerMismatch, (, type, ,, castType, ,, report, (, t, ., makeError, (, n, ,, INVALID_CAST, ,]
[type, ,, castType, ,, report, (, t, ., makeError, (, n, ,, INVALID_CAST, ,, type, ., toString, (, ), ,]
[type, ,, castType, ,, report, (, t, ., makeError, (, n, ,, INVALID_CAST, ,, type, ., toString, (, ), ,]
[,, Node, n, ,, Node, parent, ,, Var, var, ,, String, variableName, ,, JSType, newType, ), {, Var, newVar, =]
[parent, ,, Var, var, ,, String, variableName, ,, JSType, newType, ), {, Var, newVar, =, var, ;, boolean, allowDupe, =]
[,, String, variableName, ,, JSType, newType, ), {, Var, newVar, =, var, ;, boolean, allowDupe, =, false, ;, if, (]
[,, String, variableName, ,, JSType, newType, ), {, Var, newVar, =, var, ;, boolean, allowDupe, =, false, ;, if, (]
[,, String, variableName, ,, JSType, newType, ), {, Var, newVar, =, var, ;, boolean, allowDupe, =, false, ;, if, (]
[), {, Var, newVar, =, var, ;, boolean, allowDupe, =, false, ;, if, (, n, ., isGetProp, (, ), ||]
[), {, Var, newVar, =, var, ;, boolean, allowDupe, =, false, ;, if, (, n, ., isGetProp, (, ), ||]
[=, var, ;, boolean, allowDupe, =, false, ;, if, (, n, ., isGetProp, (, ), ||, NodeUtil, ., isObjectLitKey, (]
[;, boolean, allowDupe, =, false, ;, if, (, n, ., isGetProp, (, ), ||, NodeUtil, ., isObjectLitKey, (, n, ,]
[(, n, ., isGetProp, (, ), ||, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, JSDocInfo, info, =]
[(, n, ., isGetProp, (, ), ||, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, JSDocInfo, info, =]
[., isObjectLitKey, (, n, ,, parent, ), ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[., isObjectLitKey, (, n, ,, parent, ), ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[(, n, ,, parent, ), ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==]
[parent, ), ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {]
[), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =]
[), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =]
[getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }]
[), ;, if, (, info, ==, null, ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, allowDupe, =]
[), ;, if, (, info, ==, null, ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, allowDupe, =]
[), ;, if, (, info, ==, null, ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, allowDupe, =]
[if, (, info, ==, null, ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, allowDupe, =, info, !=]
[info, ==, null, ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, allowDupe, =, info, !=, null, &&]
[info, ==, null, ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, allowDupe, =, info, !=, null, &&]
[info, ==, null, ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, allowDupe, =, info, !=, null, &&]
[., getJSDocInfo, (, ), ;, }, allowDupe, =, info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (]
[=, info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", ), ;, }, JSType, varType, =]
[=, info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", ), ;, }, JSType, varType, =]
[(, ), ., contains, (, "duplicate", ), ;, }, JSType, varType, =, var, ., getType, (, ), ;, if, (]
[(, ), ., contains, (, "duplicate", ), ;, }, JSType, varType, =, var, ., getType, (, ), ;, if, (]
[(, ), ., contains, (, "duplicate", ), ;, }, JSType, varType, =, var, ., getType, (, ), ;, if, (]
[(, ), ., contains, (, "duplicate", ), ;, }, JSType, varType, =, var, ., getType, (, ), ;, if, (]
[(, ), ., contains, (, "duplicate", ), ;, }, JSType, varType, =, var, ., getType, (, ), ;, if, (]
[., contains, (, "duplicate", ), ;, }, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=]
[(, "duplicate", ), ;, }, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=, null, &&]
[(, "duplicate", ), ;, }, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=, null, &&]
[), ;, }, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=, null, &&, varType, !=]
[), ;, }, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=, null, &&, varType, !=]
[varType, =, var, ., getType, (, ), ;, if, (, varType, !=, null, &&, varType, !=, typeRegistry, ., getNativeType, (]
[., getType, (, ), ;, if, (, varType, !=, null, &&, varType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), &&]
[., getType, (, ), ;, if, (, varType, !=, null, &&, varType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), &&]
[(, ), ;, if, (, varType, !=, null, &&, varType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), &&, newType, !=]
[;, if, (, varType, !=, null, &&, varType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), &&, newType, !=, null, &&]
[;, if, (, varType, !=, null, &&, varType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), &&, newType, !=, null, &&]
[(, varType, !=, null, &&, varType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), &&, newType, !=, null, &&, newType, !=]
[(, varType, !=, null, &&, varType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), &&, newType, !=, null, &&, newType, !=]
[&&, varType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), &&, newType, !=, null, &&, newType, !=, typeRegistry, ., getNativeType, (]
[(, UNKNOWN_TYPE, ), &&, newType, !=, null, &&, newType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), {, if, (]
[(, UNKNOWN_TYPE, ), &&, newType, !=, null, &&, newType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), {, if, (]
[(, UNKNOWN_TYPE, ), &&, newType, !=, null, &&, newType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), {, if, (]
[newType, !=, null, &&, newType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), {, if, (, var, ., input, ==]
[typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), {, if, (, var, ., input, ==, null, ), {, Scope, s, =]
[typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), {, if, (, var, ., input, ==, null, ), {, Scope, s, =]
[), {, if, (, var, ., input, ==, null, ), {, Scope, s, =, var, ., getScope, (, ), ;]
[), {, if, (, var, ., input, ==, null, ), {, Scope, s, =, var, ., getScope, (, ), ;]
[var, ., input, ==, null, ), {, Scope, s, =, var, ., getScope, (, ), ;, s, ., undeclare, (]
[==, null, ), {, Scope, s, =, var, ., getScope, (, ), ;, s, ., undeclare, (, var, ), ;]
[), {, Scope, s, =, var, ., getScope, (, ), ;, s, ., undeclare, (, var, ), ;, newVar, =]
[), {, Scope, s, =, var, ., getScope, (, ), ;, s, ., undeclare, (, var, ), ;, newVar, =]
[=, var, ., getScope, (, ), ;, s, ., undeclare, (, var, ), ;, newVar, =, s, ., declare, (]
[., getScope, (, ), ;, s, ., undeclare, (, var, ), ;, newVar, =, s, ., declare, (, variableName, ,]
[(, ), ;, s, ., undeclare, (, var, ), ;, newVar, =, s, ., declare, (, variableName, ,, n, ,]
[;, s, ., undeclare, (, var, ), ;, newVar, =, s, ., declare, (, variableName, ,, n, ,, varType, ,]
[., undeclare, (, var, ), ;, newVar, =, s, ., declare, (, variableName, ,, n, ,, varType, ,, input, ,]
[var, ), ;, newVar, =, s, ., declare, (, variableName, ,, n, ,, varType, ,, input, ,, false, ), ;]
[var, ), ;, newVar, =, s, ., declare, (, variableName, ,, n, ,, varType, ,, input, ,, false, ), ;]
[=, s, ., declare, (, variableName, ,, n, ,, varType, ,, input, ,, false, ), ;, n, ., setJSType, (]
[variableName, ,, n, ,, varType, ,, input, ,, false, ), ;, n, ., setJSType, (, varType, ), ;, if, (]
[variableName, ,, n, ,, varType, ,, input, ,, false, ), ;, n, ., setJSType, (, varType, ), ;, if, (]
[), ;, n, ., setJSType, (, varType, ), ;, if, (, parent, ., isVar, (, ), ), {, if, (]
[), ;, n, ., setJSType, (, varType, ), ;, if, (, parent, ., isVar, (, ), ), {, if, (]
[), ;, n, ., setJSType, (, varType, ), ;, if, (, parent, ., isVar, (, ), ), {, if, (]
[varType, ), ;, if, (, parent, ., isVar, (, ), ), {, if, (, n, ., getFirstChild, (, ), !=]
[if, (, parent, ., isVar, (, ), ), {, if, (, n, ., getFirstChild, (, ), !=, null, ), {]
[if, (, parent, ., isVar, (, ), ), {, if, (, n, ., getFirstChild, (, ), !=, null, ), {]
[if, (, parent, ., isVar, (, ), ), {, if, (, n, ., getFirstChild, (, ), !=, null, ), {]
[{, if, (, n, ., getFirstChild, (, ), !=, null, ), {, n, ., getFirstChild, (, ), ., setJSType, (]
[), !=, null, ), {, n, ., getFirstChild, (, ), ., setJSType, (, varType, ), ;, }, }, else, {]
[), !=, null, ), {, n, ., getFirstChild, (, ), ., setJSType, (, varType, ), ;, }, }, else, {]
[{, n, ., getFirstChild, (, ), ., setJSType, (, varType, ), ;, }, }, else, {, Preconditions, ., checkState, (]
[{, n, ., getFirstChild, (, ), ., setJSType, (, varType, ), ;, }, }, else, {, Preconditions, ., checkState, (]
[setJSType, (, varType, ), ;, }, }, else, {, Preconditions, ., checkState, (, parent, ., isFunction, (, ), ), ;]
[setJSType, (, varType, ), ;, }, }, else, {, Preconditions, ., checkState, (, parent, ., isFunction, (, ), ), ;]
[;, }, }, else, {, Preconditions, ., checkState, (, parent, ., isFunction, (, ), ), ;, parent, ., setJSType, (]
[parent, ., isFunction, (, ), ), ;, parent, ., setJSType, (, varType, ), ;, }, }, else, {, if, (]
[parent, ., isFunction, (, ), ), ;, parent, ., setJSType, (, varType, ), ;, }, }, else, {, if, (]
[., isFunction, (, ), ), ;, parent, ., setJSType, (, varType, ), ;, }, }, else, {, if, (, !]
[isFunction, (, ), ), ;, parent, ., setJSType, (, varType, ), ;, }, }, else, {, if, (, !, (]
[isFunction, (, ), ), ;, parent, ., setJSType, (, varType, ), ;, }, }, else, {, if, (, !, (]
[), ), ;, parent, ., setJSType, (, varType, ), ;, }, }, else, {, if, (, !, (, allowDupe, ||]
[), ), ;, parent, ., setJSType, (, varType, ), ;, }, }, else, {, if, (, !, (, allowDupe, ||]
[), ), ;, parent, ., setJSType, (, varType, ), ;, }, }, else, {, if, (, !, (, allowDupe, ||]
[}, else, {, if, (, !, (, allowDupe, ||, var, ., getParentNode, (, ), ., isExprResult, (, ), ), ||]
[else, {, if, (, !, (, allowDupe, ||, var, ., getParentNode, (, ), ., isExprResult, (, ), ), ||, !]
[else, {, if, (, !, (, allowDupe, ||, var, ., getParentNode, (, ), ., isExprResult, (, ), ), ||, !]
[!, (, allowDupe, ||, var, ., getParentNode, (, ), ., isExprResult, (, ), ), ||, !, newType, ., isEquivalentTo, (]
[var, ., getParentNode, (, ), ., isExprResult, (, ), ), ||, !, newType, ., isEquivalentTo, (, varType, ), ), {]
[getParentNode, (, ), ., isExprResult, (, ), ), ||, !, newType, ., isEquivalentTo, (, varType, ), ), {, report, (]
[getParentNode, (, ), ., isExprResult, (, ), ), ||, !, newType, ., isEquivalentTo, (, varType, ), ), {, report, (]
[isExprResult, (, ), ), ||, !, newType, ., isEquivalentTo, (, varType, ), ), {, report, (, JSError, ., make, (]
[), ), ||, !, newType, ., isEquivalentTo, (, varType, ), ), {, report, (, JSError, ., make, (, sourceName, ,]
[||, !, newType, ., isEquivalentTo, (, varType, ), ), {, report, (, JSError, ., make, (, sourceName, ,, n, ,]
[newType, ., isEquivalentTo, (, varType, ), ), {, report, (, JSError, ., make, (, sourceName, ,, n, ,, DUP_VAR_DECLARATION, ,]
[isEquivalentTo, (, varType, ), ), {, report, (, JSError, ., make, (, sourceName, ,, n, ,, DUP_VAR_DECLARATION, ,, variableName, ,]
[isEquivalentTo, (, varType, ), ), {, report, (, JSError, ., make, (, sourceName, ,, n, ,, DUP_VAR_DECLARATION, ,, variableName, ,]
[report, (, JSError, ., make, (, sourceName, ,, n, ,, DUP_VAR_DECLARATION, ,, variableName, ,, newType, ., toString, (, ), ,]
[report, (, JSError, ., make, (, sourceName, ,, n, ,, DUP_VAR_DECLARATION, ,, variableName, ,, newType, ., toString, (, ), ,]
[sourceName, ,, n, ,, DUP_VAR_DECLARATION, ,, variableName, ,, newType, ., toString, (, ), ,, var, ., getInputName, (, ), ,]
[sourceName, ,, n, ,, DUP_VAR_DECLARATION, ,, variableName, ,, newType, ., toString, (, ), ,, var, ., getInputName, (, ), ,]
[DUP_VAR_DECLARATION, ,, variableName, ,, newType, ., toString, (, ), ,, var, ., getInputName, (, ), ,, String, ., valueOf, (]
[DUP_VAR_DECLARATION, ,, variableName, ,, newType, ., toString, (, ), ,, var, ., getInputName, (, ), ,, String, ., valueOf, (]
[DUP_VAR_DECLARATION, ,, variableName, ,, newType, ., toString, (, ), ,, var, ., getInputName, (, ), ,, String, ., valueOf, (]
[,, var, ., getInputName, (, ), ,, String, ., valueOf, (, var, ., nameNode, ., getLineno, (, ), ), ,]
[,, var, ., getInputName, (, ), ,, String, ., valueOf, (, var, ., nameNode, ., getLineno, (, ), ), ,]
[., nameNode, ., getLineno, (, ), ), ,, varType, ., toString, (, ), ), ), ;, }, }, }, return]
[return, newVar, ;, }, void, expectAllInterfaceProperties, (, NodeTraversal, t, ,, Node, n, ,, FunctionType, type, ), {, ObjectType, instance, =]
[return, newVar, ;, }, void, expectAllInterfaceProperties, (, NodeTraversal, t, ,, Node, n, ,, FunctionType, type, ), {, ObjectType, instance, =]
[n, ,, FunctionType, type, ), {, ObjectType, instance, =, type, ., getInstanceType, (, ), ;, for, (, ObjectType, implemented, :]
[n, ,, FunctionType, type, ), {, ObjectType, instance, =, type, ., getInstanceType, (, ), ;, for, (, ObjectType, implemented, :]
[type, ., getInstanceType, (, ), ;, for, (, ObjectType, implemented, :, type, ., getAllImplementedInterfaces, (, ), ), {, if, (]
[type, ., getInstanceType, (, ), ;, for, (, ObjectType, implemented, :, type, ., getAllImplementedInterfaces, (, ), ), {, if, (]
[type, ., getInstanceType, (, ), ;, for, (, ObjectType, implemented, :, type, ., getAllImplementedInterfaces, (, ), ), {, if, (]
[for, (, ObjectType, implemented, :, type, ., getAllImplementedInterfaces, (, ), ), {, if, (, implemented, ., getImplicitPrototype, (, ), !=]
[(, ), ), {, if, (, implemented, ., getImplicitPrototype, (, ), !=, null, ), {, for, (, String, prop, :]
[(, ), ), {, if, (, implemented, ., getImplicitPrototype, (, ), !=, null, ), {, for, (, String, prop, :]
[(, ), ), {, if, (, implemented, ., getImplicitPrototype, (, ), !=, null, ), {, for, (, String, prop, :]
[!=, null, ), {, for, (, String, prop, :, implemented, ., getImplicitPrototype, (, ), ., getOwnPropertyNames, (, ), ), {]
[), {, for, (, String, prop, :, implemented, ., getImplicitPrototype, (, ), ., getOwnPropertyNames, (, ), ), {, expectInterfaceProperty, (]
[for, (, String, prop, :, implemented, ., getImplicitPrototype, (, ), ., getOwnPropertyNames, (, ), ), {, expectInterfaceProperty, (, t, ,]
[String, prop, :, implemented, ., getImplicitPrototype, (, ), ., getOwnPropertyNames, (, ), ), {, expectInterfaceProperty, (, t, ,, n, ,]
[:, implemented, ., getImplicitPrototype, (, ), ., getOwnPropertyNames, (, ), ), {, expectInterfaceProperty, (, t, ,, n, ,, instance, ,]
[., getImplicitPrototype, (, ), ., getOwnPropertyNames, (, ), ), {, expectInterfaceProperty, (, t, ,, n, ,, instance, ,, implemented, ,]
[,, Node, n, ,, ObjectType, instance, ,, ObjectType, implementedInterface, ,, String, prop, ), {, StaticSlot, <, JSType, >, propSlot, =]
[,, Node, n, ,, ObjectType, instance, ,, ObjectType, implementedInterface, ,, String, prop, ), {, StaticSlot, <, JSType, >, propSlot, =]
[ObjectType, instance, ,, ObjectType, implementedInterface, ,, String, prop, ), {, StaticSlot, <, JSType, >, propSlot, =, instance, ., getSlot, (]
[,, String, prop, ), {, StaticSlot, <, JSType, >, propSlot, =, instance, ., getSlot, (, prop, ), ;, if, (]
[,, String, prop, ), {, StaticSlot, <, JSType, >, propSlot, =, instance, ., getSlot, (, prop, ), ;, if, (]
[prop, ), {, StaticSlot, <, JSType, >, propSlot, =, instance, ., getSlot, (, prop, ), ;, if, (, propSlot, ==]
[>, propSlot, =, instance, ., getSlot, (, prop, ), ;, if, (, propSlot, ==, null, ), {, String, sourceName, =]
[>, propSlot, =, instance, ., getSlot, (, prop, ), ;, if, (, propSlot, ==, null, ), {, String, sourceName, =]
[(, prop, ), ;, if, (, propSlot, ==, null, ), {, String, sourceName, =, n, ., getSourceFileName, (, ), ;]
[), ;, if, (, propSlot, ==, null, ), {, String, sourceName, =, n, ., getSourceFileName, (, ), ;, sourceName, =]
[), ;, if, (, propSlot, ==, null, ), {, String, sourceName, =, n, ., getSourceFileName, (, ), ;, sourceName, =]
[), ;, if, (, propSlot, ==, null, ), {, String, sourceName, =, n, ., getSourceFileName, (, ), ;, sourceName, =]
[if, (, propSlot, ==, null, ), {, String, sourceName, =, n, ., getSourceFileName, (, ), ;, sourceName, =, sourceName, ==]
[propSlot, ==, null, ), {, String, sourceName, =, n, ., getSourceFileName, (, ), ;, sourceName, =, sourceName, ==, null, ?]
[null, ), {, String, sourceName, =, n, ., getSourceFileName, (, ), ;, sourceName, =, sourceName, ==, null, ?, "", :]
[{, String, sourceName, =, n, ., getSourceFileName, (, ), ;, sourceName, =, sourceName, ==, null, ?, "", :, sourceName, ;]
[sourceName, =, n, ., getSourceFileName, (, ), ;, sourceName, =, sourceName, ==, null, ?, "", :, sourceName, ;, registerMismatch, (]
[n, ., getSourceFileName, (, ), ;, sourceName, =, sourceName, ==, null, ?, "", :, sourceName, ;, registerMismatch, (, instance, ,]
[getSourceFileName, (, ), ;, sourceName, =, sourceName, ==, null, ?, "", :, sourceName, ;, registerMismatch, (, instance, ,, implementedInterface, ,]
[), ;, sourceName, =, sourceName, ==, null, ?, "", :, sourceName, ;, registerMismatch, (, instance, ,, implementedInterface, ,, report, (]
[), ;, sourceName, =, sourceName, ==, null, ?, "", :, sourceName, ;, registerMismatch, (, instance, ,, implementedInterface, ,, report, (]
[sourceName, ==, null, ?, "", :, sourceName, ;, registerMismatch, (, instance, ,, implementedInterface, ,, report, (, JSError, ., make, (]
[null, ?, "", :, sourceName, ;, registerMismatch, (, instance, ,, implementedInterface, ,, report, (, JSError, ., make, (, sourceName, ,]
["", :, sourceName, ;, registerMismatch, (, instance, ,, implementedInterface, ,, report, (, JSError, ., make, (, sourceName, ,, n, ,]
[sourceName, ;, registerMismatch, (, instance, ,, implementedInterface, ,, report, (, JSError, ., make, (, sourceName, ,, n, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,]
[registerMismatch, (, instance, ,, implementedInterface, ,, report, (, JSError, ., make, (, sourceName, ,, n, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, prop, ,]
[registerMismatch, (, instance, ,, implementedInterface, ,, report, (, JSError, ., make, (, sourceName, ,, n, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, prop, ,]
[report, (, JSError, ., make, (, sourceName, ,, n, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, prop, ,, implementedInterface, ., toString, (, ), ,]
[report, (, JSError, ., make, (, sourceName, ,, n, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, prop, ,, implementedInterface, ., toString, (, ), ,]
[., toString, (, ), ,, instance, ., toString, (, ), ), ), ), ;, }, else, {, Node, propNode, =]
[., toString, (, ), ,, instance, ., toString, (, ), ), ), ), ;, }, else, {, Node, propNode, =]
[., toString, (, ), ,, instance, ., toString, (, ), ), ), ), ;, }, else, {, Node, propNode, =]
[., toString, (, ), ,, instance, ., toString, (, ), ), ), ), ;, }, else, {, Node, propNode, =]
[., toString, (, ), ), ), ), ;, }, else, {, Node, propNode, =, propSlot, ., getDeclaration, (, ), ==]
[(, ), ), ), ), ;, }, else, {, Node, propNode, =, propSlot, ., getDeclaration, (, ), ==, null, ?]
[), ), ), ;, }, else, {, Node, propNode, =, propSlot, ., getDeclaration, (, ), ==, null, ?, null, :]
[), ), ), ;, }, else, {, Node, propNode, =, propSlot, ., getDeclaration, (, ), ==, null, ?, null, :]
[), ), ), ;, }, else, {, Node, propNode, =, propSlot, ., getDeclaration, (, ), ==, null, ?, null, :]
[propSlot, ., getDeclaration, (, ), ==, null, ?, null, :, propSlot, ., getDeclaration, (, ), ., getNode, (, ), ;]
[getDeclaration, (, ), ==, null, ?, null, :, propSlot, ., getDeclaration, (, ), ., getNode, (, ), ;, propNode, =]
[getDeclaration, (, ), ==, null, ?, null, :, propSlot, ., getDeclaration, (, ), ., getNode, (, ), ;, propNode, =]
[getDeclaration, (, ), ==, null, ?, null, :, propSlot, ., getDeclaration, (, ), ., getNode, (, ), ;, propNode, =]
[), ==, null, ?, null, :, propSlot, ., getDeclaration, (, ), ., getNode, (, ), ;, propNode, =, propNode, ==]
[null, ?, null, :, propSlot, ., getDeclaration, (, ), ., getNode, (, ), ;, propNode, =, propNode, ==, null, ?]
[null, :, propSlot, ., getDeclaration, (, ), ., getNode, (, ), ;, propNode, =, propNode, ==, null, ?, n, :]
[(, ), ., getNode, (, ), ;, propNode, =, propNode, ==, null, ?, n, :, propNode, ;, JSType, found, =]
[(, ), ., getNode, (, ), ;, propNode, =, propNode, ==, null, ?, n, :, propNode, ;, JSType, found, =]
[propNode, ==, null, ?, n, :, propNode, ;, JSType, found, =, propSlot, ., getType, (, ), ;, JSType, required, =]
[propNode, ==, null, ?, n, :, propNode, ;, JSType, found, =, propSlot, ., getType, (, ), ;, JSType, required, =]
[propNode, ==, null, ?, n, :, propNode, ;, JSType, found, =, propSlot, ., getType, (, ), ;, JSType, required, =]
[JSType, found, =, propSlot, ., getType, (, ), ;, JSType, required, =, implementedInterface, ., getImplicitPrototype, (, ), ., getPropertyType, (]
[propSlot, ., getType, (, ), ;, JSType, required, =, implementedInterface, ., getImplicitPrototype, (, ), ., getPropertyType, (, prop, ), ;]
[getType, (, ), ;, JSType, required, =, implementedInterface, ., getImplicitPrototype, (, ), ., getPropertyType, (, prop, ), ;, found, =]
[getType, (, ), ;, JSType, required, =, implementedInterface, ., getImplicitPrototype, (, ), ., getPropertyType, (, prop, ), ;, found, =]
[=, implementedInterface, ., getImplicitPrototype, (, ), ., getPropertyType, (, prop, ), ;, found, =, found, ., restrictByNotNullOrUndefined, (, ), ;]
[., getImplicitPrototype, (, ), ., getPropertyType, (, prop, ), ;, found, =, found, ., restrictByNotNullOrUndefined, (, ), ;, required, =]
[., getImplicitPrototype, (, ), ., getPropertyType, (, prop, ), ;, found, =, found, ., restrictByNotNullOrUndefined, (, ), ;, required, =]
[), ;, found, =, found, ., restrictByNotNullOrUndefined, (, ), ;, required, =, required, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[;, found, =, found, ., restrictByNotNullOrUndefined, (, ), ;, required, =, required, ., restrictByNotNullOrUndefined, (, ), ;, if, (, !]
[;, found, =, found, ., restrictByNotNullOrUndefined, (, ), ;, required, =, required, ., restrictByNotNullOrUndefined, (, ), ;, if, (, !]
[., restrictByNotNullOrUndefined, (, ), ;, required, =, required, ., restrictByNotNullOrUndefined, (, ), ;, if, (, !, found, ., isSubtype, (]
[required, ., restrictByNotNullOrUndefined, (, ), ;, if, (, !, found, ., isSubtype, (, required, ), ), {, FunctionType, constructor, =]
[required, ., restrictByNotNullOrUndefined, (, ), ;, if, (, !, found, ., isSubtype, (, required, ), ), {, FunctionType, constructor, =]
[required, ., restrictByNotNullOrUndefined, (, ), ;, if, (, !, found, ., isSubtype, (, required, ), ), {, FunctionType, constructor, =]
[., isSubtype, (, required, ), ), {, FunctionType, constructor, =, implementedInterface, ., toObjectType, (, ), ., getConstructor, (, ), ;]
[(, required, ), ), {, FunctionType, constructor, =, implementedInterface, ., toObjectType, (, ), ., getConstructor, (, ), ;, registerMismatch, (]
[), ), {, FunctionType, constructor, =, implementedInterface, ., toObjectType, (, ), ., getConstructor, (, ), ;, registerMismatch, (, found, ,]
[{, FunctionType, constructor, =, implementedInterface, ., toObjectType, (, ), ., getConstructor, (, ), ;, registerMismatch, (, found, ,, required, ,]
[constructor, =, implementedInterface, ., toObjectType, (, ), ., getConstructor, (, ), ;, registerMismatch, (, found, ,, required, ,, report, (]
[constructor, =, implementedInterface, ., toObjectType, (, ), ., getConstructor, (, ), ;, registerMismatch, (, found, ,, required, ,, report, (]
[toObjectType, (, ), ., getConstructor, (, ), ;, registerMismatch, (, found, ,, required, ,, report, (, t, ., makeError, (]
[), ., getConstructor, (, ), ;, registerMismatch, (, found, ,, required, ,, report, (, t, ., makeError, (, propNode, ,]
[getConstructor, (, ), ;, registerMismatch, (, found, ,, required, ,, report, (, t, ., makeError, (, propNode, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,]
[), ;, registerMismatch, (, found, ,, required, ,, report, (, t, ., makeError, (, propNode, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, prop, ,]
[), ;, registerMismatch, (, found, ,, required, ,, report, (, t, ., makeError, (, propNode, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, prop, ,]
[), ;, registerMismatch, (, found, ,, required, ,, report, (, t, ., makeError, (, propNode, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, prop, ,]
[found, ,, required, ,, report, (, t, ., makeError, (, propNode, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, prop, ,, constructor, ., getTopMostDefiningType, (]
[., makeError, (, propNode, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, prop, ,, constructor, ., getTopMostDefiningType, (, prop, ), ., toString, (, ), ,]
[., makeError, (, propNode, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, prop, ,, constructor, ., getTopMostDefiningType, (, prop, ), ., toString, (, ), ,]
[,, prop, ,, constructor, ., getTopMostDefiningType, (, prop, ), ., toString, (, ), ,, required, ., toString, (, ), ,]
[,, prop, ,, constructor, ., getTopMostDefiningType, (, prop, ), ., toString, (, ), ,, required, ., toString, (, ), ,]
[private, void, mismatch, (, NodeTraversal, t, ,, Node, n, ,, String, msg, ,, JSType, found, ,, JSType, required, ), {]
[mismatch, (, NodeTraversal, t, ,, Node, n, ,, String, msg, ,, JSType, found, ,, JSType, required, ), {, mismatch, (]
[mismatch, (, NodeTraversal, t, ,, Node, n, ,, String, msg, ,, JSType, found, ,, JSType, required, ), {, mismatch, (]
[n, ,, String, msg, ,, JSType, found, ,, JSType, required, ), {, mismatch, (, t, ., getSourceName, (, ), ,]
[String, msg, ,, JSType, found, ,, JSType, required, ), {, mismatch, (, t, ., getSourceName, (, ), ,, n, ,]
[,, JSType, found, ,, JSType, required, ), {, mismatch, (, t, ., getSourceName, (, ), ,, n, ,, msg, ,]
[found, ,, JSType, required, ), {, mismatch, (, t, ., getSourceName, (, ), ,, n, ,, msg, ,, found, ,]
[private, void, mismatch, (, NodeTraversal, t, ,, Node, n, ,, String, msg, ,, JSType, found, ,, JSTypeNative, required, ), {]
[mismatch, (, NodeTraversal, t, ,, Node, n, ,, String, msg, ,, JSType, found, ,, JSTypeNative, required, ), {, mismatch, (]
[NodeTraversal, t, ,, Node, n, ,, String, msg, ,, JSType, found, ,, JSTypeNative, required, ), {, mismatch, (, t, ,]
[,, Node, n, ,, String, msg, ,, JSType, found, ,, JSTypeNative, required, ), {, mismatch, (, t, ,, n, ,]
[n, ,, String, msg, ,, JSType, found, ,, JSTypeNative, required, ), {, mismatch, (, t, ,, n, ,, msg, ,]
[String, msg, ,, JSType, found, ,, JSTypeNative, required, ), {, mismatch, (, t, ,, n, ,, msg, ,, found, ,]
[,, JSType, found, ,, JSTypeNative, required, ), {, mismatch, (, t, ,, n, ,, msg, ,, found, ,, getNativeType, (]
[private, void, mismatch, (, String, sourceName, ,, Node, n, ,, String, msg, ,, JSType, found, ,, JSType, required, ), {]
[mismatch, (, String, sourceName, ,, Node, n, ,, String, msg, ,, JSType, found, ,, JSType, required, ), {, registerMismatch, (]
[String, sourceName, ,, Node, n, ,, String, msg, ,, JSType, found, ,, JSType, required, ), {, registerMismatch, (, found, ,]
[,, Node, n, ,, String, msg, ,, JSType, found, ,, JSType, required, ), {, registerMismatch, (, found, ,, required, ,]
[n, ,, String, msg, ,, JSType, found, ,, JSType, required, ), {, registerMismatch, (, found, ,, required, ,, report, (]
[n, ,, String, msg, ,, JSType, found, ,, JSType, required, ), {, registerMismatch, (, found, ,, required, ,, report, (]
[,, JSType, found, ,, JSType, required, ), {, registerMismatch, (, found, ,, required, ,, report, (, JSError, ., make, (]
[found, ,, JSType, required, ), {, registerMismatch, (, found, ,, required, ,, report, (, JSError, ., make, (, sourceName, ,]
[JSType, required, ), {, registerMismatch, (, found, ,, required, ,, report, (, JSError, ., make, (, sourceName, ,, n, ,]
[), {, registerMismatch, (, found, ,, required, ,, report, (, JSError, ., make, (, sourceName, ,, n, ,, TYPE_MISMATCH_WARNING, ,]
[registerMismatch, (, found, ,, required, ,, report, (, JSError, ., make, (, sourceName, ,, n, ,, TYPE_MISMATCH_WARNING, ,, formatFoundRequired, (]
[found, ,, required, ,, report, (, JSError, ., make, (, sourceName, ,, n, ,, TYPE_MISMATCH_WARNING, ,, formatFoundRequired, (, msg, ,]
[required, ,, report, (, JSError, ., make, (, sourceName, ,, n, ,, TYPE_MISMATCH_WARNING, ,, formatFoundRequired, (, msg, ,, found, ,]
[), ), ), ), ;, }, private, void, registerMismatch, (, JSType, found, ,, JSType, required, ,, JSError, error, ), {]
[), ), ;, }, private, void, registerMismatch, (, JSType, found, ,, JSType, required, ,, JSError, error, ), {, found, =]
[), ), ;, }, private, void, registerMismatch, (, JSType, found, ,, JSType, required, ,, JSError, error, ), {, found, =]
[registerMismatch, (, JSType, found, ,, JSType, required, ,, JSError, error, ), {, found, =, found, ., restrictByNotNullOrUndefined, (, ), ;]
[JSType, found, ,, JSType, required, ,, JSError, error, ), {, found, =, found, ., restrictByNotNullOrUndefined, (, ), ;, required, =]
[JSType, found, ,, JSType, required, ,, JSError, error, ), {, found, =, found, ., restrictByNotNullOrUndefined, (, ), ;, required, =]
[), {, found, =, found, ., restrictByNotNullOrUndefined, (, ), ;, required, =, required, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[), {, found, =, found, ., restrictByNotNullOrUndefined, (, ), ;, required, =, required, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[), {, found, =, found, ., restrictByNotNullOrUndefined, (, ), ;, required, =, required, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[found, ., restrictByNotNullOrUndefined, (, ), ;, required, =, required, ., restrictByNotNullOrUndefined, (, ), ;, if, (, found, ., isSubtype, (]
[(, ), ;, required, =, required, ., restrictByNotNullOrUndefined, (, ), ;, if, (, found, ., isSubtype, (, required, ), ||]
[(, ), ;, required, =, required, ., restrictByNotNullOrUndefined, (, ), ;, if, (, found, ., isSubtype, (, required, ), ||]
[=, required, ., restrictByNotNullOrUndefined, (, ), ;, if, (, found, ., isSubtype, (, required, ), ||, required, ., isSubtype, (]
[if, (, found, ., isSubtype, (, required, ), ||, required, ., isSubtype, (, found, ), ), {, return, ;, }]
[if, (, found, ., isSubtype, (, required, ), ||, required, ., isSubtype, (, found, ), ), {, return, ;, }]
[isSubtype, (, required, ), ||, required, ., isSubtype, (, found, ), ), {, return, ;, }, mismatches, ., add, (]
[), ||, required, ., isSubtype, (, found, ), ), {, return, ;, }, mismatches, ., add, (, new, TypeMismatch, (]
[required, ., isSubtype, (, found, ), ), {, return, ;, }, mismatches, ., add, (, new, TypeMismatch, (, found, ,]
[isSubtype, (, found, ), ), {, return, ;, }, mismatches, ., add, (, new, TypeMismatch, (, found, ,, required, ,]
[return, ;, }, mismatches, ., add, (, new, TypeMismatch, (, found, ,, required, ,, error, ), ), ;, if, (]
[return, ;, }, mismatches, ., add, (, new, TypeMismatch, (, found, ,, required, ,, error, ), ), ;, if, (]
[return, ;, }, mismatches, ., add, (, new, TypeMismatch, (, found, ,, required, ,, error, ), ), ;, if, (]
[(, new, TypeMismatch, (, found, ,, required, ,, error, ), ), ;, if, (, found, ., isFunctionType, (, ), &&]
[(, new, TypeMismatch, (, found, ,, required, ,, error, ), ), ;, if, (, found, ., isFunctionType, (, ), &&]
[), ;, if, (, found, ., isFunctionType, (, ), &&, required, ., isFunctionType, (, ), ), {, FunctionType, fnTypeA, =]
[), ;, if, (, found, ., isFunctionType, (, ), &&, required, ., isFunctionType, (, ), ), {, FunctionType, fnTypeA, =]
[&&, required, ., isFunctionType, (, ), ), {, FunctionType, fnTypeA, =, found, ., toMaybeFunctionType, (, ), ;, FunctionType, fnTypeB, =]
[&&, required, ., isFunctionType, (, ), ), {, FunctionType, fnTypeA, =, found, ., toMaybeFunctionType, (, ), ;, FunctionType, fnTypeB, =]
[., toMaybeFunctionType, (, ), ;, FunctionType, fnTypeB, =, required, ., toMaybeFunctionType, (, ), ;, Iterator, <, Node, >, paramItA, =]
[., toMaybeFunctionType, (, ), ;, FunctionType, fnTypeB, =, required, ., toMaybeFunctionType, (, ), ;, Iterator, <, Node, >, paramItA, =]
[., toMaybeFunctionType, (, ), ;, FunctionType, fnTypeB, =, required, ., toMaybeFunctionType, (, ), ;, Iterator, <, Node, >, paramItA, =]
[Node, >, paramItA, =, fnTypeA, ., getParameters, (, ), ., iterator, (, ), ;, Iterator, <, Node, >, paramItB, =]
[Node, >, paramItA, =, fnTypeA, ., getParameters, (, ), ., iterator, (, ), ;, Iterator, <, Node, >, paramItB, =]
[Node, >, paramItA, =, fnTypeA, ., getParameters, (, ), ., iterator, (, ), ;, Iterator, <, Node, >, paramItB, =]
[), ;, Iterator, <, Node, >, paramItB, =, fnTypeB, ., getParameters, (, ), ., iterator, (, ), ;, while, (]
[), ;, Iterator, <, Node, >, paramItB, =, fnTypeB, ., getParameters, (, ), ., iterator, (, ), ;, while, (]
[), ;, Iterator, <, Node, >, paramItB, =, fnTypeB, ., getParameters, (, ), ., iterator, (, ), ;, while, (]
[paramItB, =, fnTypeB, ., getParameters, (, ), ., iterator, (, ), ;, while, (, paramItA, ., hasNext, (, ), &&]
[paramItB, =, fnTypeB, ., getParameters, (, ), ., iterator, (, ), ;, while, (, paramItA, ., hasNext, (, ), &&]
[., iterator, (, ), ;, while, (, paramItA, ., hasNext, (, ), &&, paramItB, ., hasNext, (, ), ), {]
[(, ), ;, while, (, paramItA, ., hasNext, (, ), &&, paramItB, ., hasNext, (, ), ), {, registerIfMismatch, (]
[(, ), ;, while, (, paramItA, ., hasNext, (, ), &&, paramItB, ., hasNext, (, ), ), {, registerIfMismatch, (]
[(, ), ;, while, (, paramItA, ., hasNext, (, ), &&, paramItB, ., hasNext, (, ), ), {, registerIfMismatch, (]
[&&, paramItB, ., hasNext, (, ), ), {, registerIfMismatch, (, paramItA, ., next, (, ), ., getJSType, (, ), ,]
[&&, paramItB, ., hasNext, (, ), ), {, registerIfMismatch, (, paramItA, ., next, (, ), ., getJSType, (, ), ,]
[&&, paramItB, ., hasNext, (, ), ), {, registerIfMismatch, (, paramItA, ., next, (, ), ., getJSType, (, ), ,]
[paramItA, ., next, (, ), ., getJSType, (, ), ,, paramItB, ., next, (, ), ., getJSType, (, ), ,]
[), ., getJSType, (, ), ,, paramItB, ., next, (, ), ., getJSType, (, ), ,, error, ), ;, }]
[getJSType, (, ), ,, paramItB, ., next, (, ), ., getJSType, (, ), ,, error, ), ;, }, registerIfMismatch, (]
[getJSType, (, ), ,, paramItB, ., next, (, ), ., getJSType, (, ), ,, error, ), ;, }, registerIfMismatch, (]
[next, (, ), ., getJSType, (, ), ,, error, ), ;, }, registerIfMismatch, (, fnTypeA, ., getReturnType, (, ), ,]
[next, (, ), ., getJSType, (, ), ,, error, ), ;, }, registerIfMismatch, (, fnTypeA, ., getReturnType, (, ), ,]
[), ,, error, ), ;, }, registerIfMismatch, (, fnTypeA, ., getReturnType, (, ), ,, fnTypeB, ., getReturnType, (, ), ,]
[), ;, }, }, private, void, registerIfMismatch, (, JSType, found, ,, JSType, required, ,, JSError, error, ), {, if, (]
[), ;, }, }, private, void, registerIfMismatch, (, JSType, found, ,, JSType, required, ,, JSError, error, ), {, if, (]
[), ;, }, }, private, void, registerIfMismatch, (, JSType, found, ,, JSType, required, ,, JSError, error, ), {, if, (]
[), ;, }, }, private, void, registerIfMismatch, (, JSType, found, ,, JSType, required, ,, JSError, error, ), {, if, (]
[}, }, private, void, registerIfMismatch, (, JSType, found, ,, JSType, required, ,, JSError, error, ), {, if, (, found, !=]
[private, void, registerIfMismatch, (, JSType, found, ,, JSType, required, ,, JSError, error, ), {, if, (, found, !=, null, &&]
[private, void, registerIfMismatch, (, JSType, found, ,, JSType, required, ,, JSError, error, ), {, if, (, found, !=, null, &&]
[registerIfMismatch, (, JSType, found, ,, JSType, required, ,, JSError, error, ), {, if, (, found, !=, null, &&, required, !=]
[JSType, found, ,, JSType, required, ,, JSError, error, ), {, if, (, found, !=, null, &&, required, !=, null, &&]
[found, ,, JSType, required, ,, JSError, error, ), {, if, (, found, !=, null, &&, required, !=, null, &&, !]
[found, ,, JSType, required, ,, JSError, error, ), {, if, (, found, !=, null, &&, required, !=, null, &&, !]
[,, JSError, error, ), {, if, (, found, !=, null, &&, required, !=, null, &&, !, found, ., isSubtype, (]
[{, if, (, found, !=, null, &&, required, !=, null, &&, !, found, ., isSubtype, (, required, ), ), {]
[(, found, !=, null, &&, required, !=, null, &&, !, found, ., isSubtype, (, required, ), ), {, registerMismatch, (]
[!=, null, &&, required, !=, null, &&, !, found, ., isSubtype, (, required, ), ), {, registerMismatch, (, found, ,]
[&&, required, !=, null, &&, !, found, ., isSubtype, (, required, ), ), {, registerMismatch, (, found, ,, required, ,]
[error, ), ;, }, }, private, String, formatFoundRequired, (, String, description, ,, JSType, found, ,, JSType, required, ), {, return]
[error, ), ;, }, }, private, String, formatFoundRequired, (, String, description, ,, JSType, found, ,, JSType, required, ), {, return]
[}, private, String, formatFoundRequired, (, String, description, ,, JSType, found, ,, JSType, required, ), {, return, MessageFormat, ., format, (]
[String, formatFoundRequired, (, String, description, ,, JSType, found, ,, JSType, required, ), {, return, MessageFormat, ., format, (, FOUND_REQUIRED, ,]
[(, String, description, ,, JSType, found, ,, JSType, required, ), {, return, MessageFormat, ., format, (, FOUND_REQUIRED, ,, description, ,]
[description, ,, JSType, found, ,, JSType, required, ), {, return, MessageFormat, ., format, (, FOUND_REQUIRED, ,, description, ,, found, ,]
[description, ,, found, ,, required, ), ;, }, String, getReadableJSTypeName, (, Node, n, ,, boolean, dereference, ), {, if, (]
[description, ,, found, ,, required, ), ;, }, String, getReadableJSTypeName, (, Node, n, ,, boolean, dereference, ), {, if, (]
[(, Node, n, ,, boolean, dereference, ), {, if, (, n, ., isGetProp, (, ), ), {, ObjectType, objectType, =]
[(, Node, n, ,, boolean, dereference, ), {, if, (, n, ., isGetProp, (, ), ), {, ObjectType, objectType, =]
[n, ,, boolean, dereference, ), {, if, (, n, ., isGetProp, (, ), ), {, ObjectType, objectType, =, getJSType, (]
[n, ,, boolean, dereference, ), {, if, (, n, ., isGetProp, (, ), ), {, ObjectType, objectType, =, getJSType, (]
[), {, ObjectType, objectType, =, getJSType, (, n, ., getFirstChild, (, ), ), ., dereference, (, ), ;, if, (]
[), {, ObjectType, objectType, =, getJSType, (, n, ., getFirstChild, (, ), ), ., dereference, (, ), ;, if, (]
[ObjectType, objectType, =, getJSType, (, n, ., getFirstChild, (, ), ), ., dereference, (, ), ;, if, (, objectType, !=]
[., getFirstChild, (, ), ), ., dereference, (, ), ;, if, (, objectType, !=, null, ), {, String, propName, =]
[., getFirstChild, (, ), ), ., dereference, (, ), ;, if, (, objectType, !=, null, ), {, String, propName, =]
[., getFirstChild, (, ), ), ., dereference, (, ), ;, if, (, objectType, !=, null, ), {, String, propName, =]
[objectType, !=, null, ), {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[objectType, !=, null, ), {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[objectType, !=, null, ), {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[objectType, !=, null, ), {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (, objectType, ., getConstructor, (, ), !=]
[n, ., getLastChild, (, ), ., getString, (, ), ;, if, (, objectType, ., getConstructor, (, ), !=, null, &&]
[n, ., getLastChild, (, ), ., getString, (, ), ;, if, (, objectType, ., getConstructor, (, ), !=, null, &&]
[n, ., getLastChild, (, ), ., getString, (, ), ;, if, (, objectType, ., getConstructor, (, ), !=, null, &&]
[(, objectType, ., getConstructor, (, ), !=, null, &&, objectType, ., getConstructor, (, ), ., isInterface, (, ), ), {]
[., getConstructor, (, ), !=, null, &&, objectType, ., getConstructor, (, ), ., isInterface, (, ), ), {, objectType, =]
[., getConstructor, (, ), !=, null, &&, objectType, ., getConstructor, (, ), ., isInterface, (, ), ), {, objectType, =]
[!=, null, &&, objectType, ., getConstructor, (, ), ., isInterface, (, ), ), {, objectType, =, FunctionType, ., getTopDefiningInterface, (]
[&&, objectType, ., getConstructor, (, ), ., isInterface, (, ), ), {, objectType, =, FunctionType, ., getTopDefiningInterface, (, objectType, ,]
[(, ), ), {, objectType, =, FunctionType, ., getTopDefiningInterface, (, objectType, ,, propName, ), ;, }, else, {, while, (]
[(, ), ), {, objectType, =, FunctionType, ., getTopDefiningInterface, (, objectType, ,, propName, ), ;, }, else, {, while, (]
[(, ), ), {, objectType, =, FunctionType, ., getTopDefiningInterface, (, objectType, ,, propName, ), ;, }, else, {, while, (]
[), {, objectType, =, FunctionType, ., getTopDefiningInterface, (, objectType, ,, propName, ), ;, }, else, {, while, (, objectType, !=]
[objectType, =, FunctionType, ., getTopDefiningInterface, (, objectType, ,, propName, ), ;, }, else, {, while, (, objectType, !=, null, &&]
[=, FunctionType, ., getTopDefiningInterface, (, objectType, ,, propName, ), ;, }, else, {, while, (, objectType, !=, null, &&, !]
[=, FunctionType, ., getTopDefiningInterface, (, objectType, ,, propName, ), ;, }, else, {, while, (, objectType, !=, null, &&, !]
[(, objectType, ,, propName, ), ;, }, else, {, while, (, objectType, !=, null, &&, !, objectType, ., hasOwnProperty, (]
[), ;, }, else, {, while, (, objectType, !=, null, &&, !, objectType, ., hasOwnProperty, (, propName, ), ), {]
[}, else, {, while, (, objectType, !=, null, &&, !, objectType, ., hasOwnProperty, (, propName, ), ), {, objectType, =]
[}, else, {, while, (, objectType, !=, null, &&, !, objectType, ., hasOwnProperty, (, propName, ), ), {, objectType, =]
[objectType, ., hasOwnProperty, (, propName, ), ), {, objectType, =, objectType, ., getImplicitPrototype, (, ), ;, }, }, if, (]
[objectType, ., hasOwnProperty, (, propName, ), ), {, objectType, =, objectType, ., getImplicitPrototype, (, ), ;, }, }, if, (]
[objectType, ., hasOwnProperty, (, propName, ), ), {, objectType, =, objectType, ., getImplicitPrototype, (, ), ;, }, }, if, (]
[hasOwnProperty, (, propName, ), ), {, objectType, =, objectType, ., getImplicitPrototype, (, ), ;, }, }, if, (, objectType, !=]
[propName, ), ), {, objectType, =, objectType, ., getImplicitPrototype, (, ), ;, }, }, if, (, objectType, !=, null, &&]
[), ), {, objectType, =, objectType, ., getImplicitPrototype, (, ), ;, }, }, if, (, objectType, !=, null, &&, (]
[), ), {, objectType, =, objectType, ., getImplicitPrototype, (, ), ;, }, }, if, (, objectType, !=, null, &&, (]
[), ), {, objectType, =, objectType, ., getImplicitPrototype, (, ), ;, }, }, if, (, objectType, !=, null, &&, (]
[), ), {, objectType, =, objectType, ., getImplicitPrototype, (, ), ;, }, }, if, (, objectType, !=, null, &&, (]
[., getImplicitPrototype, (, ), ;, }, }, if, (, objectType, !=, null, &&, (, objectType, ., getConstructor, (, ), !=]
[(, ), ;, }, }, if, (, objectType, !=, null, &&, (, objectType, ., getConstructor, (, ), !=, null, ||]
[(, ), ;, }, }, if, (, objectType, !=, null, &&, (, objectType, ., getConstructor, (, ), !=, null, ||]
[null, &&, (, objectType, ., getConstructor, (, ), !=, null, ||, objectType, ., isFunctionPrototypeType, (, ), ), ), {, return]
[null, &&, (, objectType, ., getConstructor, (, ), !=, null, ||, objectType, ., isFunctionPrototypeType, (, ), ), ), {, return]
[null, &&, (, objectType, ., getConstructor, (, ), !=, null, ||, objectType, ., isFunctionPrototypeType, (, ), ), ), {, return]
[null, &&, (, objectType, ., getConstructor, (, ), !=, null, ||, objectType, ., isFunctionPrototypeType, (, ), ), ), {, return]
[(, ), !=, null, ||, objectType, ., isFunctionPrototypeType, (, ), ), ), {, return, objectType, ., toString, (, ), +]
[!=, null, ||, objectType, ., isFunctionPrototypeType, (, ), ), ), {, return, objectType, ., toString, (, ), +, ".", +]
[), ), {, return, objectType, ., toString, (, ), +, ".", +, propName, ;, }, }, }, JSType, type, =]
[{, return, objectType, ., toString, (, ), +, ".", +, propName, ;, }, }, }, JSType, type, =, getJSType, (]
[(, ), +, ".", +, propName, ;, }, }, }, JSType, type, =, getJSType, (, n, ), ;, if, (]
[;, }, }, }, JSType, type, =, getJSType, (, n, ), ;, if, (, dereference, ), {, ObjectType, dereferenced, =]
[;, }, }, }, JSType, type, =, getJSType, (, n, ), ;, if, (, dereference, ), {, ObjectType, dereferenced, =]
[(, n, ), ;, if, (, dereference, ), {, ObjectType, dereferenced, =, type, ., dereference, (, ), ;, if, (]
[(, n, ), ;, if, (, dereference, ), {, ObjectType, dereferenced, =, type, ., dereference, (, ), ;, if, (]
[), ;, if, (, dereference, ), {, ObjectType, dereferenced, =, type, ., dereference, (, ), ;, if, (, dereferenced, !=]
[(, dereference, ), {, ObjectType, dereferenced, =, type, ., dereference, (, ), ;, if, (, dereferenced, !=, null, ), {]
[), {, ObjectType, dereferenced, =, type, ., dereference, (, ), ;, if, (, dereferenced, !=, null, ), {, type, =]
[dereference, (, ), ;, if, (, dereferenced, !=, null, ), {, type, =, dereferenced, ;, }, }, String, qualifiedName, =]
[dereference, (, ), ;, if, (, dereferenced, !=, null, ), {, type, =, dereferenced, ;, }, }, String, qualifiedName, =]
[null, ), {, type, =, dereferenced, ;, }, }, String, qualifiedName, =, n, ., getQualifiedName, (, ), ;, if, (]
[null, ), {, type, =, dereferenced, ;, }, }, String, qualifiedName, =, n, ., getQualifiedName, (, ), ;, if, (]
[null, ), {, type, =, dereferenced, ;, }, }, String, qualifiedName, =, n, ., getQualifiedName, (, ), ;, if, (]
[;, }, }, String, qualifiedName, =, n, ., getQualifiedName, (, ), ;, if, (, type, ., isFunctionPrototypeType, (, ), ||]
[}, }, String, qualifiedName, =, n, ., getQualifiedName, (, ), ;, if, (, type, ., isFunctionPrototypeType, (, ), ||, (]
[}, }, String, qualifiedName, =, n, ., getQualifiedName, (, ), ;, if, (, type, ., isFunctionPrototypeType, (, ), ||, (]
[}, }, String, qualifiedName, =, n, ., getQualifiedName, (, ), ;, if, (, type, ., isFunctionPrototypeType, (, ), ||, (]
[}, }, String, qualifiedName, =, n, ., getQualifiedName, (, ), ;, if, (, type, ., isFunctionPrototypeType, (, ), ||, (]
[., getQualifiedName, (, ), ;, if, (, type, ., isFunctionPrototypeType, (, ), ||, (, type, ., toObjectType, (, ), !=]
[(, ), ;, if, (, type, ., isFunctionPrototypeType, (, ), ||, (, type, ., toObjectType, (, ), !=, null, &&]
[(, ), ;, if, (, type, ., isFunctionPrototypeType, (, ), ||, (, type, ., toObjectType, (, ), !=, null, &&]
[(, ), ;, if, (, type, ., isFunctionPrototypeType, (, ), ||, (, type, ., toObjectType, (, ), !=, null, &&]
[(, ), ;, if, (, type, ., isFunctionPrototypeType, (, ), ||, (, type, ., toObjectType, (, ), !=, null, &&]
[||, (, type, ., toObjectType, (, ), !=, null, &&, type, ., toObjectType, (, ), ., getConstructor, (, ), !=]
[(, ), !=, null, &&, type, ., toObjectType, (, ), ., getConstructor, (, ), !=, null, ), ), {, return]
[(, ), !=, null, &&, type, ., toObjectType, (, ), ., getConstructor, (, ), !=, null, ), ), {, return]
[., getConstructor, (, ), !=, null, ), ), {, return, type, ., toString, (, ), ;, }, else, if, (]
[., getConstructor, (, ), !=, null, ), ), {, return, type, ., toString, (, ), ;, }, else, if, (]
[(, ), !=, null, ), ), {, return, type, ., toString, (, ), ;, }, else, if, (, qualifiedName, !=]
[), ), {, return, type, ., toString, (, ), ;, }, else, if, (, qualifiedName, !=, null, ), {, return]
[toString, (, ), ;, }, else, if, (, qualifiedName, !=, null, ), {, return, qualifiedName, ;, }, else, if, (]
[toString, (, ), ;, }, else, if, (, qualifiedName, !=, null, ), {, return, qualifiedName, ;, }, else, if, (]
[qualifiedName, !=, null, ), {, return, qualifiedName, ;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return]
[qualifiedName, ;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return, "function", ;, }, else, {, return]
[qualifiedName, ;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return, "function", ;, }, else, {, return]
[return, type, ., toString, (, ), ;, }, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =]
[return, type, ., toString, (, ), ;, }, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =]
[}, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if, (]
[}, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if, (]
[JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if, (, jsType, ==]
[n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if, (, jsType, ==, null, ), {, return]
[{, JSType, jsType, =, n, ., getJSType, (, ), ;, if, (, jsType, ==, null, ), {, return, getNativeType, (]
[(, ), ;, if, (, jsType, ==, null, ), {, return, getNativeType, (, UNKNOWN_TYPE, ), ;, }, else, {, return]
[UNKNOWN_TYPE, ), ;, }, else, {, return, jsType, ;, }, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return]
[UNKNOWN_TYPE, ), ;, }, else, {, return, jsType, ;, }, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return]
[else, {, return, jsType, ;, }, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, typeRegistry, ., getNativeType, (]
[{, return, typeRegistry, ., getNativeType, (, typeId, ), ;, }, private, JSError, report, (, JSError, error, ), {, if, (]
[., getNativeType, (, typeId, ), ;, }, private, JSError, report, (, JSError, error, ), {, if, (, shouldReport, ), {]
[., getNativeType, (, typeId, ), ;, }, private, JSError, report, (, JSError, error, ), {, if, (, shouldReport, ), {]
[), ;, }, private, JSError, report, (, JSError, error, ), {, if, (, shouldReport, ), {, compiler, ., report, (]
[report, (, JSError, error, ), {, if, (, shouldReport, ), {, compiler, ., report, (, error, ), ;, }, return]
[final, JSType, typeB, ;, final, JSError, src, ;, TypeMismatch, (, JSType, a, ,, JSType, b, ,, JSError, src, ), {]
[final, JSType, typeB, ;, final, JSError, src, ;, TypeMismatch, (, JSType, a, ,, JSType, b, ,, JSError, src, ), {]
[final, JSError, src, ;, TypeMismatch, (, JSType, a, ,, JSType, b, ,, JSError, src, ), {, this, ., typeA, =]
[src, ;, TypeMismatch, (, JSType, a, ,, JSType, b, ,, JSError, src, ), {, this, ., typeA, =, a, ;]
[src, ;, TypeMismatch, (, JSType, a, ,, JSType, b, ,, JSError, src, ), {, this, ., typeA, =, a, ;]
[JSType, a, ,, JSType, b, ,, JSError, src, ), {, this, ., typeA, =, a, ;, this, ., typeB, =]
[,, JSType, b, ,, JSError, src, ), {, this, ., typeA, =, a, ;, this, ., typeB, =, b, ;]
[,, JSType, b, ,, JSError, src, ), {, this, ., typeA, =, a, ;, this, ., typeB, =, b, ;]
[JSError, src, ), {, this, ., typeA, =, a, ;, this, ., typeB, =, b, ;, this, ., src, =]
[;, this, ., src, =, src, ;, }, @, Override, public, boolean, equals, (, Object, object, ), {, if, (]
[;, this, ., src, =, src, ;, }, @, Override, public, boolean, equals, (, Object, object, ), {, if, (]
[@, Override, public, boolean, equals, (, Object, object, ), {, if, (, object, instanceof, TypeMismatch, ), {, TypeMismatch, that, =]
[boolean, equals, (, Object, object, ), {, if, (, object, instanceof, TypeMismatch, ), {, TypeMismatch, that, =, (, TypeMismatch, )]
[Object, object, ), {, if, (, object, instanceof, TypeMismatch, ), {, TypeMismatch, that, =, (, TypeMismatch, ), object, ;, return]
[Object, object, ), {, if, (, object, instanceof, TypeMismatch, ), {, TypeMismatch, that, =, (, TypeMismatch, ), object, ;, return]
[object, ), {, if, (, object, instanceof, TypeMismatch, ), {, TypeMismatch, that, =, (, TypeMismatch, ), object, ;, return, (]
[object, ), {, if, (, object, instanceof, TypeMismatch, ), {, TypeMismatch, that, =, (, TypeMismatch, ), object, ;, return, (]
[object, ), {, if, (, object, instanceof, TypeMismatch, ), {, TypeMismatch, that, =, (, TypeMismatch, ), object, ;, return, (]
[object, ), {, if, (, object, instanceof, TypeMismatch, ), {, TypeMismatch, that, =, (, TypeMismatch, ), object, ;, return, (]
[instanceof, TypeMismatch, ), {, TypeMismatch, that, =, (, TypeMismatch, ), object, ;, return, (, that, ., typeA, ., isEquivalentTo, (]
[instanceof, TypeMismatch, ), {, TypeMismatch, that, =, (, TypeMismatch, ), object, ;, return, (, that, ., typeA, ., isEquivalentTo, (]
[that, =, (, TypeMismatch, ), object, ;, return, (, that, ., typeA, ., isEquivalentTo, (, this, ., typeA, ), &&]
[that, =, (, TypeMismatch, ), object, ;, return, (, that, ., typeA, ., isEquivalentTo, (, this, ., typeA, ), &&]
[that, =, (, TypeMismatch, ), object, ;, return, (, that, ., typeA, ., isEquivalentTo, (, this, ., typeA, ), &&]
[;, return, (, that, ., typeA, ., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeB, ., isEquivalentTo, (]
[;, return, (, that, ., typeA, ., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeB, ., isEquivalentTo, (]
[., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeB, ., isEquivalentTo, (, this, ., typeB, ), ), ||]
[isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeB, ., isEquivalentTo, (, this, ., typeB, ), ), ||, (]
[isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeB, ., isEquivalentTo, (, this, ., typeB, ), ), ||, (]
[isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeB, ., isEquivalentTo, (, this, ., typeB, ), ), ||, (]
[isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeB, ., isEquivalentTo, (, this, ., typeB, ), ), ||, (]
[&&, that, ., typeB, ., isEquivalentTo, (, this, ., typeB, ), ), ||, (, that, ., typeB, ., isEquivalentTo, (]
[&&, that, ., typeB, ., isEquivalentTo, (, this, ., typeB, ), ), ||, (, that, ., typeB, ., isEquivalentTo, (]
[isEquivalentTo, (, this, ., typeB, ), ), ||, (, that, ., typeB, ., isEquivalentTo, (, this, ., typeA, ), &&]
[isEquivalentTo, (, this, ., typeB, ), ), ||, (, that, ., typeB, ., isEquivalentTo, (, this, ., typeA, ), &&]
[isEquivalentTo, (, this, ., typeB, ), ), ||, (, that, ., typeB, ., isEquivalentTo, (, this, ., typeA, ), &&]
[), ||, (, that, ., typeB, ., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeA, ., isEquivalentTo, (]
[), ||, (, that, ., typeB, ., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeA, ., isEquivalentTo, (]
[(, this, ., typeA, ), &&, that, ., typeA, ., isEquivalentTo, (, this, ., typeB, ), ), ;, }, return]
[this, ., typeB, ), ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[this, ., typeB, ), ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode, (]
[}, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode, (, typeA, ,]
[return, Objects, ., hashCode, (, typeA, ,, typeB, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[return, Objects, ., hashCode, (, typeA, ,, typeB, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[return, Objects, ., hashCode, (, typeA, ,, typeB, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[return, Objects, ., hashCode, (, typeA, ,, typeB, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[return, Objects, ., hashCode, (, typeA, ,, typeB, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[., hashCode, (, typeA, ,, typeB, ), ;, }, @, Override, public, String, toString, (, ), {, return, "(", +]
[(, typeA, ,, typeB, ), ;, }, @, Override, public, String, toString, (, ), {, return, "(", +, typeA, +]
[,, typeB, ), ;, }, @, Override, public, String, toString, (, ), {, return, "(", +, typeA, +, ", ", +]
[), ;, }, @, Override, public, String, toString, (, ), {, return, "(", +, typeA, +, ", ", +, typeB, +]
