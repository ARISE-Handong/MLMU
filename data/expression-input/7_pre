[jstype, ., TernaryValue, ;, class, MinimizeExitPoints, extends, AbstractPostOrderCallback, implements, CompilerPass, {, AbstractCompiler, compiler, ;, MinimizeExitPoints, (, AbstractCompiler, compiler, ), {]
[jstype, ., TernaryValue, ;, class, MinimizeExitPoints, extends, AbstractPostOrderCallback, implements, CompilerPass, {, AbstractCompiler, compiler, ;, MinimizeExitPoints, (, AbstractCompiler, compiler, ), {]
[class, MinimizeExitPoints, extends, AbstractPostOrderCallback, implements, CompilerPass, {, AbstractCompiler, compiler, ;, MinimizeExitPoints, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., LABEL, :]
[Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., LABEL, :, tryMinimizeExits, (]
[Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., LABEL, :, tryMinimizeExits, (]
[n, ., getType, (, ), ), {, case, Token, ., LABEL, :, tryMinimizeExits, (, n, ., getLastChild, (, ), ,]
[n, ., getType, (, ), ), {, case, Token, ., LABEL, :, tryMinimizeExits, (, n, ., getLastChild, (, ), ,]
[), ), {, case, Token, ., LABEL, :, tryMinimizeExits, (, n, ., getLastChild, (, ), ,, Token, ., BREAK, ,]
[), ), {, case, Token, ., LABEL, :, tryMinimizeExits, (, n, ., getLastChild, (, ), ,, Token, ., BREAK, ,]
[), ), {, case, Token, ., LABEL, :, tryMinimizeExits, (, n, ., getLastChild, (, ), ,, Token, ., BREAK, ,]
[), ,, Token, ., BREAK, ,, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, break, ;, case]
[), ,, Token, ., BREAK, ,, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, break, ;, case]
[,, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, break, ;, case, Token, ., FOR, :, case]
[,, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, break, ;, case, Token, ., FOR, :, case]
[(, ), ., getString, (, ), ), ;, break, ;, case, Token, ., FOR, :, case, Token, ., WHILE, :]
[., getString, (, ), ), ;, break, ;, case, Token, ., FOR, :, case, Token, ., WHILE, :, tryMinimizeExits, (]
[., getString, (, ), ), ;, break, ;, case, Token, ., FOR, :, case, Token, ., WHILE, :, tryMinimizeExits, (]
[), ;, break, ;, case, Token, ., FOR, :, case, Token, ., WHILE, :, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (]
[;, case, Token, ., FOR, :, case, Token, ., WHILE, :, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (, n, ), ,]
[;, case, Token, ., FOR, :, case, Token, ., WHILE, :, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (, n, ), ,]
[FOR, :, case, Token, ., WHILE, :, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (, n, ), ,, Token, ., CONTINUE, ,]
[:, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (, n, ), ,, Token, ., CONTINUE, ,, null, ), ;, break, ;, case]
[:, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (, n, ), ,, Token, ., CONTINUE, ,, null, ), ;, break, ;, case]
[., getLoopCodeBlock, (, n, ), ,, Token, ., CONTINUE, ,, null, ), ;, break, ;, case, Token, ., DO, :]
[(, n, ), ,, Token, ., CONTINUE, ,, null, ), ;, break, ;, case, Token, ., DO, :, tryMinimizeExits, (]
[(, n, ), ,, Token, ., CONTINUE, ,, null, ), ;, break, ;, case, Token, ., DO, :, tryMinimizeExits, (]
[Token, ., CONTINUE, ,, null, ), ;, break, ;, case, Token, ., DO, :, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (]
[,, null, ), ;, break, ;, case, Token, ., DO, :, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (, n, ), ,]
[,, null, ), ;, break, ;, case, Token, ., DO, :, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (, n, ), ,]
[break, ;, case, Token, ., DO, :, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (, n, ), ,, Token, ., CONTINUE, ,]
[:, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (, n, ), ,, Token, ., CONTINUE, ,, null, ), ;, Node, cond, =]
[:, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (, n, ), ,, Token, ., CONTINUE, ,, null, ), ;, Node, cond, =]
[., getLoopCodeBlock, (, n, ), ,, Token, ., CONTINUE, ,, null, ), ;, Node, cond, =, NodeUtil, ., getConditionExpression, (]
[,, Token, ., CONTINUE, ,, null, ), ;, Node, cond, =, NodeUtil, ., getConditionExpression, (, n, ), ;, if, (]
[,, Token, ., CONTINUE, ,, null, ), ;, Node, cond, =, NodeUtil, ., getConditionExpression, (, n, ), ;, if, (]
[,, Token, ., CONTINUE, ,, null, ), ;, Node, cond, =, NodeUtil, ., getConditionExpression, (, n, ), ;, if, (]
[,, null, ), ;, Node, cond, =, NodeUtil, ., getConditionExpression, (, n, ), ;, if, (, NodeUtil, ., getImpureBooleanValue, (]
[;, Node, cond, =, NodeUtil, ., getConditionExpression, (, n, ), ;, if, (, NodeUtil, ., getImpureBooleanValue, (, cond, ), ==]
[;, Node, cond, =, NodeUtil, ., getConditionExpression, (, n, ), ;, if, (, NodeUtil, ., getImpureBooleanValue, (, cond, ), ==]
[., getConditionExpression, (, n, ), ;, if, (, NodeUtil, ., getImpureBooleanValue, (, cond, ), ==, TernaryValue, ., FALSE, ), {]
[(, n, ), ;, if, (, NodeUtil, ., getImpureBooleanValue, (, cond, ), ==, TernaryValue, ., FALSE, ), {, tryMinimizeExits, (]
[(, n, ), ;, if, (, NodeUtil, ., getImpureBooleanValue, (, cond, ), ==, TernaryValue, ., FALSE, ), {, tryMinimizeExits, (]
[NodeUtil, ., getImpureBooleanValue, (, cond, ), ==, TernaryValue, ., FALSE, ), {, tryMinimizeExits, (, n, ., getFirstChild, (, ), ,]
[NodeUtil, ., getImpureBooleanValue, (, cond, ), ==, TernaryValue, ., FALSE, ), {, tryMinimizeExits, (, n, ., getFirstChild, (, ), ,]
[cond, ), ==, TernaryValue, ., FALSE, ), {, tryMinimizeExits, (, n, ., getFirstChild, (, ), ,, Token, ., BREAK, ,]
[{, tryMinimizeExits, (, n, ., getFirstChild, (, ), ,, Token, ., BREAK, ,, null, ), ;, }, break, ;, case]
[{, tryMinimizeExits, (, n, ., getFirstChild, (, ), ,, Token, ., BREAK, ,, null, ), ;, }, break, ;, case]
[., getFirstChild, (, ), ,, Token, ., BREAK, ,, null, ), ;, }, break, ;, case, Token, ., FUNCTION, :]
[(, ), ,, Token, ., BREAK, ,, null, ), ;, }, break, ;, case, Token, ., FUNCTION, :, tryMinimizeExits, (]
[(, ), ,, Token, ., BREAK, ,, null, ), ;, }, break, ;, case, Token, ., FUNCTION, :, tryMinimizeExits, (]
[,, null, ), ;, }, break, ;, case, Token, ., FUNCTION, :, tryMinimizeExits, (, n, ., getLastChild, (, ), ,]
[,, null, ), ;, }, break, ;, case, Token, ., FUNCTION, :, tryMinimizeExits, (, n, ., getLastChild, (, ), ,]
[}, break, ;, case, Token, ., FUNCTION, :, tryMinimizeExits, (, n, ., getLastChild, (, ), ,, Token, ., RETURN, ,]
[;, break, ;, }, }, void, tryMinimizeExits, (, Node, n, ,, int, exitType, ,, String, labelName, ), {, if, (]
[;, }, }, void, tryMinimizeExits, (, Node, n, ,, int, exitType, ,, String, labelName, ), {, if, (, matchingExitNode, (]
[}, void, tryMinimizeExits, (, Node, n, ,, int, exitType, ,, String, labelName, ), {, if, (, matchingExitNode, (, n, ,]
[tryMinimizeExits, (, Node, n, ,, int, exitType, ,, String, labelName, ), {, if, (, matchingExitNode, (, n, ,, exitType, ,]
[,, int, exitType, ,, String, labelName, ), {, if, (, matchingExitNode, (, n, ,, exitType, ,, labelName, ), ), {]
[,, int, exitType, ,, String, labelName, ), {, if, (, matchingExitNode, (, n, ,, exitType, ,, labelName, ), ), {]
[String, labelName, ), {, if, (, matchingExitNode, (, n, ,, exitType, ,, labelName, ), ), {, NodeUtil, ., removeChild, (]
[String, labelName, ), {, if, (, matchingExitNode, (, n, ,, exitType, ,, labelName, ), ), {, NodeUtil, ., removeChild, (]
[matchingExitNode, (, n, ,, exitType, ,, labelName, ), ), {, NodeUtil, ., removeChild, (, n, ., getParent, (, ), ,]
[,, exitType, ,, labelName, ), ), {, NodeUtil, ., removeChild, (, n, ., getParent, (, ), ,, n, ), ;]
[,, exitType, ,, labelName, ), ), {, NodeUtil, ., removeChild, (, n, ., getParent, (, ), ,, n, ), ;]
[n, ., getParent, (, ), ,, n, ), ;, compiler, ., reportCodeChange, (, ), ;, return, ;, }, if, (]
[n, ., getParent, (, ), ,, n, ), ;, compiler, ., reportCodeChange, (, ), ;, return, ;, }, if, (]
[., reportCodeChange, (, ), ;, return, ;, }, if, (, n, ., isIf, (, ), ), {, Node, ifBlock, =]
[., reportCodeChange, (, ), ;, return, ;, }, if, (, n, ., isIf, (, ), ), {, Node, ifBlock, =]
[., reportCodeChange, (, ), ;, return, ;, }, if, (, n, ., isIf, (, ), ), {, Node, ifBlock, =]
[n, ., isIf, (, ), ), {, Node, ifBlock, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;]
[isIf, (, ), ), {, Node, ifBlock, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, tryMinimizeExits, (]
[), ), {, Node, ifBlock, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, tryMinimizeExits, (, ifBlock, ,]
[{, Node, ifBlock, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, tryMinimizeExits, (, ifBlock, ,, exitType, ,]
[getFirstChild, (, ), ., getNext, (, ), ;, tryMinimizeExits, (, ifBlock, ,, exitType, ,, labelName, ), ;, Node, elseBlock, =]
[getFirstChild, (, ), ., getNext, (, ), ;, tryMinimizeExits, (, ifBlock, ,, exitType, ,, labelName, ), ;, Node, elseBlock, =]
[tryMinimizeExits, (, ifBlock, ,, exitType, ,, labelName, ), ;, Node, elseBlock, =, ifBlock, ., getNext, (, ), ;, if, (]
[tryMinimizeExits, (, ifBlock, ,, exitType, ,, labelName, ), ;, Node, elseBlock, =, ifBlock, ., getNext, (, ), ;, if, (]
[ifBlock, ,, exitType, ,, labelName, ), ;, Node, elseBlock, =, ifBlock, ., getNext, (, ), ;, if, (, elseBlock, !=]
[,, labelName, ), ;, Node, elseBlock, =, ifBlock, ., getNext, (, ), ;, if, (, elseBlock, !=, null, ), {]
[), ;, Node, elseBlock, =, ifBlock, ., getNext, (, ), ;, if, (, elseBlock, !=, null, ), {, tryMinimizeExits, (]
[Node, elseBlock, =, ifBlock, ., getNext, (, ), ;, if, (, elseBlock, !=, null, ), {, tryMinimizeExits, (, elseBlock, ,]
[=, ifBlock, ., getNext, (, ), ;, if, (, elseBlock, !=, null, ), {, tryMinimizeExits, (, elseBlock, ,, exitType, ,]
[elseBlock, !=, null, ), {, tryMinimizeExits, (, elseBlock, ,, exitType, ,, labelName, ), ;, }, return, ;, }, if, (]
[elseBlock, !=, null, ), {, tryMinimizeExits, (, elseBlock, ,, exitType, ,, labelName, ), ;, }, return, ;, }, if, (]
[,, labelName, ), ;, }, return, ;, }, if, (, n, ., isTry, (, ), ), {, Node, tryBlock, =]
[,, labelName, ), ;, }, return, ;, }, if, (, n, ., isTry, (, ), ), {, Node, tryBlock, =]
[;, }, if, (, n, ., isTry, (, ), ), {, Node, tryBlock, =, n, ., getFirstChild, (, ), ;]
[if, (, n, ., isTry, (, ), ), {, Node, tryBlock, =, n, ., getFirstChild, (, ), ;, tryMinimizeExits, (]
[n, ., isTry, (, ), ), {, Node, tryBlock, =, n, ., getFirstChild, (, ), ;, tryMinimizeExits, (, tryBlock, ,]
[isTry, (, ), ), {, Node, tryBlock, =, n, ., getFirstChild, (, ), ;, tryMinimizeExits, (, tryBlock, ,, exitType, ,]
[tryBlock, =, n, ., getFirstChild, (, ), ;, tryMinimizeExits, (, tryBlock, ,, exitType, ,, labelName, ), ;, Node, allCatchNodes, =]
[tryBlock, =, n, ., getFirstChild, (, ), ;, tryMinimizeExits, (, tryBlock, ,, exitType, ,, labelName, ), ;, Node, allCatchNodes, =]
[getFirstChild, (, ), ;, tryMinimizeExits, (, tryBlock, ,, exitType, ,, labelName, ), ;, Node, allCatchNodes, =, NodeUtil, ., getCatchBlock, (]
[(, tryBlock, ,, exitType, ,, labelName, ), ;, Node, allCatchNodes, =, NodeUtil, ., getCatchBlock, (, n, ), ;, if, (]
[(, tryBlock, ,, exitType, ,, labelName, ), ;, Node, allCatchNodes, =, NodeUtil, ., getCatchBlock, (, n, ), ;, if, (]
[,, labelName, ), ;, Node, allCatchNodes, =, NodeUtil, ., getCatchBlock, (, n, ), ;, if, (, NodeUtil, ., hasCatchHandler, (]
[Node, allCatchNodes, =, NodeUtil, ., getCatchBlock, (, n, ), ;, if, (, NodeUtil, ., hasCatchHandler, (, allCatchNodes, ), ), {]
[Node, allCatchNodes, =, NodeUtil, ., getCatchBlock, (, n, ), ;, if, (, NodeUtil, ., hasCatchHandler, (, allCatchNodes, ), ), {]
[., getCatchBlock, (, n, ), ;, if, (, NodeUtil, ., hasCatchHandler, (, allCatchNodes, ), ), {, Preconditions, ., checkState, (]
[., getCatchBlock, (, n, ), ;, if, (, NodeUtil, ., hasCatchHandler, (, allCatchNodes, ), ), {, Preconditions, ., checkState, (]
[hasCatchHandler, (, allCatchNodes, ), ), {, Preconditions, ., checkState, (, allCatchNodes, ., hasOneChild, (, ), ), ;, Node, catchNode, =]
[hasCatchHandler, (, allCatchNodes, ), ), {, Preconditions, ., checkState, (, allCatchNodes, ., hasOneChild, (, ), ), ;, Node, catchNode, =]
[(, allCatchNodes, ., hasOneChild, (, ), ), ;, Node, catchNode, =, allCatchNodes, ., getFirstChild, (, ), ;, Node, catchCodeBlock, =]
[(, allCatchNodes, ., hasOneChild, (, ), ), ;, Node, catchNode, =, allCatchNodes, ., getFirstChild, (, ), ;, Node, catchCodeBlock, =]
[), ;, Node, catchNode, =, allCatchNodes, ., getFirstChild, (, ), ;, Node, catchCodeBlock, =, catchNode, ., getLastChild, (, ), ;]
[Node, catchNode, =, allCatchNodes, ., getFirstChild, (, ), ;, Node, catchCodeBlock, =, catchNode, ., getLastChild, (, ), ;, tryMinimizeExits, (]
[=, allCatchNodes, ., getFirstChild, (, ), ;, Node, catchCodeBlock, =, catchNode, ., getLastChild, (, ), ;, tryMinimizeExits, (, catchCodeBlock, ,]
[., getFirstChild, (, ), ;, Node, catchCodeBlock, =, catchNode, ., getLastChild, (, ), ;, tryMinimizeExits, (, catchCodeBlock, ,, exitType, ,]
[catchCodeBlock, =, catchNode, ., getLastChild, (, ), ;, tryMinimizeExits, (, catchCodeBlock, ,, exitType, ,, labelName, ), ;, }, if, (]
[catchCodeBlock, =, catchNode, ., getLastChild, (, ), ;, tryMinimizeExits, (, catchCodeBlock, ,, exitType, ,, labelName, ), ;, }, if, (]
[getLastChild, (, ), ;, tryMinimizeExits, (, catchCodeBlock, ,, exitType, ,, labelName, ), ;, }, if, (, NodeUtil, ., hasFinally, (]
[,, exitType, ,, labelName, ), ;, }, if, (, NodeUtil, ., hasFinally, (, n, ), ), {, Node, finallyBlock, =]
[,, exitType, ,, labelName, ), ;, }, if, (, NodeUtil, ., hasFinally, (, n, ), ), {, Node, finallyBlock, =]
[}, if, (, NodeUtil, ., hasFinally, (, n, ), ), {, Node, finallyBlock, =, n, ., getLastChild, (, ), ;]
[(, NodeUtil, ., hasFinally, (, n, ), ), {, Node, finallyBlock, =, n, ., getLastChild, (, ), ;, tryMinimizeExits, (]
[., hasFinally, (, n, ), ), {, Node, finallyBlock, =, n, ., getLastChild, (, ), ;, tryMinimizeExits, (, finallyBlock, ,]
[(, n, ), ), {, Node, finallyBlock, =, n, ., getLastChild, (, ), ;, tryMinimizeExits, (, finallyBlock, ,, exitType, ,]
[=, n, ., getLastChild, (, ), ;, tryMinimizeExits, (, finallyBlock, ,, exitType, ,, labelName, ), ;, }, }, if, (]
[=, n, ., getLastChild, (, ), ;, tryMinimizeExits, (, finallyBlock, ,, exitType, ,, labelName, ), ;, }, }, if, (]
[,, exitType, ,, labelName, ), ;, }, }, if, (, n, ., isLabel, (, ), ), {, Node, labelBlock, =]
[,, exitType, ,, labelName, ), ;, }, }, if, (, n, ., isLabel, (, ), ), {, Node, labelBlock, =]
[}, }, if, (, n, ., isLabel, (, ), ), {, Node, labelBlock, =, n, ., getLastChild, (, ), ;]
[if, (, n, ., isLabel, (, ), ), {, Node, labelBlock, =, n, ., getLastChild, (, ), ;, tryMinimizeExits, (]
[n, ., isLabel, (, ), ), {, Node, labelBlock, =, n, ., getLastChild, (, ), ;, tryMinimizeExits, (, labelBlock, ,]
[isLabel, (, ), ), {, Node, labelBlock, =, n, ., getLastChild, (, ), ;, tryMinimizeExits, (, labelBlock, ,, exitType, ,]
[labelBlock, =, n, ., getLastChild, (, ), ;, tryMinimizeExits, (, labelBlock, ,, exitType, ,, labelName, ), ;, }, if, (]
[labelBlock, =, n, ., getLastChild, (, ), ;, tryMinimizeExits, (, labelBlock, ,, exitType, ,, labelName, ), ;, }, if, (]
[=, n, ., getLastChild, (, ), ;, tryMinimizeExits, (, labelBlock, ,, exitType, ,, labelName, ), ;, }, if, (, !]
[=, n, ., getLastChild, (, ), ;, tryMinimizeExits, (, labelBlock, ,, exitType, ,, labelName, ), ;, }, if, (, !]
[;, tryMinimizeExits, (, labelBlock, ,, exitType, ,, labelName, ), ;, }, if, (, !, n, ., isBlock, (, ), ||]
[;, tryMinimizeExits, (, labelBlock, ,, exitType, ,, labelName, ), ;, }, if, (, !, n, ., isBlock, (, ), ||]
[;, tryMinimizeExits, (, labelBlock, ,, exitType, ,, labelName, ), ;, }, if, (, !, n, ., isBlock, (, ), ||]
[,, labelName, ), ;, }, if, (, !, n, ., isBlock, (, ), ||, n, ., getLastChild, (, ), ==]
[(, ), ||, n, ., getLastChild, (, ), ==, null, ), {, return, ;, }, for, (, Node, c, :]
[(, ), ||, n, ., getLastChild, (, ), ==, null, ), {, return, ;, }, for, (, Node, c, :]
[null, ), {, return, ;, }, for, (, Node, c, :, n, ., children, (, ), ), {, if, (]
[null, ), {, return, ;, }, for, (, Node, c, :, n, ., children, (, ), ), {, if, (]
[:, n, ., children, (, ), ), {, if, (, c, ., isIf, (, ), ), {, Node, ifTree, =]
[{, if, (, c, ., isIf, (, ), ), {, Node, ifTree, =, c, ;, Node, trueBlock, ,, falseBlock, ;]
[(, c, ., isIf, (, ), ), {, Node, ifTree, =, c, ;, Node, trueBlock, ,, falseBlock, ;, trueBlock, =]
[(, c, ., isIf, (, ), ), {, Node, ifTree, =, c, ;, Node, trueBlock, ,, falseBlock, ;, trueBlock, =]
[(, c, ., isIf, (, ), ), {, Node, ifTree, =, c, ;, Node, trueBlock, ,, falseBlock, ;, trueBlock, =]
[=, c, ;, Node, trueBlock, ,, falseBlock, ;, trueBlock, =, ifTree, ., getFirstChild, (, ), ., getNext, (, ), ;]
[;, Node, trueBlock, ,, falseBlock, ;, trueBlock, =, ifTree, ., getFirstChild, (, ), ., getNext, (, ), ;, falseBlock, =]
[;, Node, trueBlock, ,, falseBlock, ;, trueBlock, =, ifTree, ., getFirstChild, (, ), ., getNext, (, ), ;, falseBlock, =]
[trueBlock, =, ifTree, ., getFirstChild, (, ), ., getNext, (, ), ;, falseBlock, =, trueBlock, ., getNext, (, ), ;]
[ifTree, ., getFirstChild, (, ), ., getNext, (, ), ;, falseBlock, =, trueBlock, ., getNext, (, ), ;, tryMinimizeIfBlockExits, (]
[getFirstChild, (, ), ., getNext, (, ), ;, falseBlock, =, trueBlock, ., getNext, (, ), ;, tryMinimizeIfBlockExits, (, trueBlock, ,]
[), ., getNext, (, ), ;, falseBlock, =, trueBlock, ., getNext, (, ), ;, tryMinimizeIfBlockExits, (, trueBlock, ,, falseBlock, ,]
[getNext, (, ), ;, falseBlock, =, trueBlock, ., getNext, (, ), ;, tryMinimizeIfBlockExits, (, trueBlock, ,, falseBlock, ,, ifTree, ,]
[), ;, falseBlock, =, trueBlock, ., getNext, (, ), ;, tryMinimizeIfBlockExits, (, trueBlock, ,, falseBlock, ,, ifTree, ,, exitType, ,]
[=, trueBlock, ., getNext, (, ), ;, tryMinimizeIfBlockExits, (, trueBlock, ,, falseBlock, ,, ifTree, ,, exitType, ,, labelName, ), ;]
[., getNext, (, ), ;, tryMinimizeIfBlockExits, (, trueBlock, ,, falseBlock, ,, ifTree, ,, exitType, ,, labelName, ), ;, trueBlock, =]
[., getNext, (, ), ;, tryMinimizeIfBlockExits, (, trueBlock, ,, falseBlock, ,, ifTree, ,, exitType, ,, labelName, ), ;, trueBlock, =]
[., getNext, (, ), ;, tryMinimizeIfBlockExits, (, trueBlock, ,, falseBlock, ,, ifTree, ,, exitType, ,, labelName, ), ;, trueBlock, =]
[,, ifTree, ,, exitType, ,, labelName, ), ;, trueBlock, =, ifTree, ., getFirstChild, (, ), ., getNext, (, ), ;]
[,, exitType, ,, labelName, ), ;, trueBlock, =, ifTree, ., getFirstChild, (, ), ., getNext, (, ), ;, falseBlock, =]
[,, exitType, ,, labelName, ), ;, trueBlock, =, ifTree, ., getFirstChild, (, ), ., getNext, (, ), ;, falseBlock, =]
[ifTree, ., getFirstChild, (, ), ., getNext, (, ), ;, falseBlock, =, trueBlock, ., getNext, (, ), ;, if, (]
[ifTree, ., getFirstChild, (, ), ., getNext, (, ), ;, falseBlock, =, trueBlock, ., getNext, (, ), ;, if, (]
[getFirstChild, (, ), ., getNext, (, ), ;, falseBlock, =, trueBlock, ., getNext, (, ), ;, if, (, falseBlock, !=]
[., getNext, (, ), ;, falseBlock, =, trueBlock, ., getNext, (, ), ;, if, (, falseBlock, !=, null, ), {]
[(, ), ;, falseBlock, =, trueBlock, ., getNext, (, ), ;, if, (, falseBlock, !=, null, ), {, tryMinimizeIfBlockExits, (]
[;, falseBlock, =, trueBlock, ., getNext, (, ), ;, if, (, falseBlock, !=, null, ), {, tryMinimizeIfBlockExits, (, falseBlock, ,]
[=, trueBlock, ., getNext, (, ), ;, if, (, falseBlock, !=, null, ), {, tryMinimizeIfBlockExits, (, falseBlock, ,, trueBlock, ,]
[., getNext, (, ), ;, if, (, falseBlock, !=, null, ), {, tryMinimizeIfBlockExits, (, falseBlock, ,, trueBlock, ,, ifTree, ,]
[(, ), ;, if, (, falseBlock, !=, null, ), {, tryMinimizeIfBlockExits, (, falseBlock, ,, trueBlock, ,, ifTree, ,, exitType, ,]
[null, ), {, tryMinimizeIfBlockExits, (, falseBlock, ,, trueBlock, ,, ifTree, ,, exitType, ,, labelName, ), ;, }, }, if, (]
[null, ), {, tryMinimizeIfBlockExits, (, falseBlock, ,, trueBlock, ,, ifTree, ,, exitType, ,, labelName, ), ;, }, }, if, (]
[{, tryMinimizeIfBlockExits, (, falseBlock, ,, trueBlock, ,, ifTree, ,, exitType, ,, labelName, ), ;, }, }, if, (, c, ==]
[{, tryMinimizeIfBlockExits, (, falseBlock, ,, trueBlock, ,, ifTree, ,, exitType, ,, labelName, ), ;, }, }, if, (, c, ==]
[if, (, c, ==, n, ., getLastChild, (, ), ), {, break, ;, }, }, for, (, Node, c, =]
[if, (, c, ==, n, ., getLastChild, (, ), ), {, break, ;, }, }, for, (, Node, c, =]
[getLastChild, (, ), ), {, break, ;, }, }, for, (, Node, c, =, n, ., getLastChild, (, ), ;]
[getLastChild, (, ), ), {, break, ;, }, }, for, (, Node, c, =, n, ., getLastChild, (, ), ;]
[), ), {, break, ;, }, }, for, (, Node, c, =, n, ., getLastChild, (, ), ;, c, !=]
[{, break, ;, }, }, for, (, Node, c, =, n, ., getLastChild, (, ), ;, c, !=, null, ;]
[;, }, }, for, (, Node, c, =, n, ., getLastChild, (, ), ;, c, !=, null, ;, c, =]
[;, }, }, for, (, Node, c, =, n, ., getLastChild, (, ), ;, c, !=, null, ;, c, =]
[=, n, ., getLastChild, (, ), ;, c, !=, null, ;, c, =, n, ., getLastChild, (, ), ), {]
[., getLastChild, (, ), ;, c, !=, null, ;, c, =, n, ., getLastChild, (, ), ), {, tryMinimizeExits, (]
[(, ), ;, c, !=, null, ;, c, =, n, ., getLastChild, (, ), ), {, tryMinimizeExits, (, c, ,]
[;, c, !=, null, ;, c, =, n, ., getLastChild, (, ), ), {, tryMinimizeExits, (, c, ,, exitType, ,]
[c, =, n, ., getLastChild, (, ), ), {, tryMinimizeExits, (, c, ,, exitType, ,, labelName, ), ;, if, (]
[c, =, n, ., getLastChild, (, ), ), {, tryMinimizeExits, (, c, ,, exitType, ,, labelName, ), ;, if, (]
[n, ., getLastChild, (, ), ), {, tryMinimizeExits, (, c, ,, exitType, ,, labelName, ), ;, if, (, c, ==]
[n, ., getLastChild, (, ), ), {, tryMinimizeExits, (, c, ,, exitType, ,, labelName, ), ;, if, (, c, ==]
[(, Node, srcBlock, ,, Node, destBlock, ,, Node, ifNode, ,, int, exitType, ,, String, labelName, ), {, Node, exitNodeParent, =]
[destBlock, ,, Node, ifNode, ,, int, exitType, ,, String, labelName, ), {, Node, exitNodeParent, =, null, ;, Node, exitNode, =]
[,, int, exitType, ,, String, labelName, ), {, Node, exitNodeParent, =, null, ;, Node, exitNode, =, null, ;, if, (]
[,, int, exitType, ,, String, labelName, ), {, Node, exitNodeParent, =, null, ;, Node, exitNode, =, null, ;, if, (]
[exitNodeParent, =, null, ;, Node, exitNode, =, null, ;, if, (, srcBlock, ., isBlock, (, ), ), {, if, (]
[=, null, ;, Node, exitNode, =, null, ;, if, (, srcBlock, ., isBlock, (, ), ), {, if, (, !]
[=, null, ;, Node, exitNode, =, null, ;, if, (, srcBlock, ., isBlock, (, ), ), {, if, (, !]
[srcBlock, ., isBlock, (, ), ), {, if, (, !, srcBlock, ., hasChildren, (, ), ), {, return, ;, }]
[isBlock, (, ), ), {, if, (, !, srcBlock, ., hasChildren, (, ), ), {, return, ;, }, exitNodeParent, =]
[), ), {, if, (, !, srcBlock, ., hasChildren, (, ), ), {, return, ;, }, exitNodeParent, =, srcBlock, ;]
[{, if, (, !, srcBlock, ., hasChildren, (, ), ), {, return, ;, }, exitNodeParent, =, srcBlock, ;, exitNode, =]
[{, if, (, !, srcBlock, ., hasChildren, (, ), ), {, return, ;, }, exitNodeParent, =, srcBlock, ;, exitNode, =]
[), {, return, ;, }, exitNodeParent, =, srcBlock, ;, exitNode, =, exitNodeParent, ., getLastChild, (, ), ;, }, else, {]
[return, ;, }, exitNodeParent, =, srcBlock, ;, exitNode, =, exitNodeParent, ., getLastChild, (, ), ;, }, else, {, exitNodeParent, =]
[}, exitNodeParent, =, srcBlock, ;, exitNode, =, exitNodeParent, ., getLastChild, (, ), ;, }, else, {, exitNodeParent, =, ifNode, ;]
[=, srcBlock, ;, exitNode, =, exitNodeParent, ., getLastChild, (, ), ;, }, else, {, exitNodeParent, =, ifNode, ;, exitNode, =]
[exitNodeParent, ., getLastChild, (, ), ;, }, else, {, exitNodeParent, =, ifNode, ;, exitNode, =, srcBlock, ;, }, if, (]
[., getLastChild, (, ), ;, }, else, {, exitNodeParent, =, ifNode, ;, exitNode, =, srcBlock, ;, }, if, (, !]
[(, ), ;, }, else, {, exitNodeParent, =, ifNode, ;, exitNode, =, srcBlock, ;, }, if, (, !, matchingExitNode, (]
[;, }, else, {, exitNodeParent, =, ifNode, ;, exitNode, =, srcBlock, ;, }, if, (, !, matchingExitNode, (, exitNode, ,]
[else, {, exitNodeParent, =, ifNode, ;, exitNode, =, srcBlock, ;, }, if, (, !, matchingExitNode, (, exitNode, ,, exitType, ,]
[;, }, if, (, !, matchingExitNode, (, exitNode, ,, exitType, ,, labelName, ), ), {, return, ;, }, if, (]
[;, }, if, (, !, matchingExitNode, (, exitNode, ,, exitType, ,, labelName, ), ), {, return, ;, }, if, (]
[;, }, if, (, !, matchingExitNode, (, exitNode, ,, exitType, ,, labelName, ), ), {, return, ;, }, if, (]
[(, exitNode, ,, exitType, ,, labelName, ), ), {, return, ;, }, if, (, ifNode, ., getNext, (, ), !=]
[), ), {, return, ;, }, if, (, ifNode, ., getNext, (, ), !=, null, ), {, Node, newDestBlock, =]
[), ), {, return, ;, }, if, (, ifNode, ., getNext, (, ), !=, null, ), {, Node, newDestBlock, =]
[), ), {, return, ;, }, if, (, ifNode, ., getNext, (, ), !=, null, ), {, Node, newDestBlock, =]
[ifNode, ., getNext, (, ), !=, null, ), {, Node, newDestBlock, =, IR, ., block, (, ), ., srcref, (]
[!=, null, ), {, Node, newDestBlock, =, IR, ., block, (, ), ., srcref, (, ifNode, ), ;, if, (]
[!=, null, ), {, Node, newDestBlock, =, IR, ., block, (, ), ., srcref, (, ifNode, ), ;, if, (]
[), {, Node, newDestBlock, =, IR, ., block, (, ), ., srcref, (, ifNode, ), ;, if, (, destBlock, ==]
[newDestBlock, =, IR, ., block, (, ), ., srcref, (, ifNode, ), ;, if, (, destBlock, ==, null, ), {]
[newDestBlock, =, IR, ., block, (, ), ., srcref, (, ifNode, ), ;, if, (, destBlock, ==, null, ), {]
[block, (, ), ., srcref, (, ifNode, ), ;, if, (, destBlock, ==, null, ), {, ifNode, ., addChildToBack, (]
[), ;, if, (, destBlock, ==, null, ), {, ifNode, ., addChildToBack, (, newDestBlock, ), ;, }, else, if, (]
[), ;, if, (, destBlock, ==, null, ), {, ifNode, ., addChildToBack, (, newDestBlock, ), ;, }, else, if, (]
[), {, ifNode, ., addChildToBack, (, newDestBlock, ), ;, }, else, if, (, destBlock, ., isEmpty, (, ), ), {]
[), {, ifNode, ., addChildToBack, (, newDestBlock, ), ;, }, else, if, (, destBlock, ., isEmpty, (, ), ), {]
[addChildToBack, (, newDestBlock, ), ;, }, else, if, (, destBlock, ., isEmpty, (, ), ), {, ifNode, ., replaceChild, (]
[newDestBlock, ), ;, }, else, if, (, destBlock, ., isEmpty, (, ), ), {, ifNode, ., replaceChild, (, destBlock, ,]
[destBlock, ., isEmpty, (, ), ), {, ifNode, ., replaceChild, (, destBlock, ,, newDestBlock, ), ;, }, else, if, (]
[destBlock, ., isEmpty, (, ), ), {, ifNode, ., replaceChild, (, destBlock, ,, newDestBlock, ), ;, }, else, if, (]
[ifNode, ., replaceChild, (, destBlock, ,, newDestBlock, ), ;, }, else, if, (, destBlock, ., isBlock, (, ), ), {]
[replaceChild, (, destBlock, ,, newDestBlock, ), ;, }, else, if, (, destBlock, ., isBlock, (, ), ), {, newDestBlock, =]
[), ;, }, else, if, (, destBlock, ., isBlock, (, ), ), {, newDestBlock, =, destBlock, ;, }, else, {]
[), ;, }, else, if, (, destBlock, ., isBlock, (, ), ), {, newDestBlock, =, destBlock, ;, }, else, {]
[if, (, destBlock, ., isBlock, (, ), ), {, newDestBlock, =, destBlock, ;, }, else, {, ifNode, ., replaceChild, (]
[destBlock, ., isBlock, (, ), ), {, newDestBlock, =, destBlock, ;, }, else, {, ifNode, ., replaceChild, (, destBlock, ,]
[(, ), ), {, newDestBlock, =, destBlock, ;, }, else, {, ifNode, ., replaceChild, (, destBlock, ,, newDestBlock, ), ;]
[(, ), ), {, newDestBlock, =, destBlock, ;, }, else, {, ifNode, ., replaceChild, (, destBlock, ,, newDestBlock, ), ;]
[newDestBlock, =, destBlock, ;, }, else, {, ifNode, ., replaceChild, (, destBlock, ,, newDestBlock, ), ;, newDestBlock, ., addChildToBack, (]
[}, else, {, ifNode, ., replaceChild, (, destBlock, ,, newDestBlock, ), ;, newDestBlock, ., addChildToBack, (, destBlock, ), ;, }]
[{, ifNode, ., replaceChild, (, destBlock, ,, newDestBlock, ), ;, newDestBlock, ., addChildToBack, (, destBlock, ), ;, }, moveAllFollowing, (]
[., replaceChild, (, destBlock, ,, newDestBlock, ), ;, newDestBlock, ., addChildToBack, (, destBlock, ), ;, }, moveAllFollowing, (, ifNode, ,]
[., replaceChild, (, destBlock, ,, newDestBlock, ), ;, newDestBlock, ., addChildToBack, (, destBlock, ), ;, }, moveAllFollowing, (, ifNode, ,]
[), ;, newDestBlock, ., addChildToBack, (, destBlock, ), ;, }, moveAllFollowing, (, ifNode, ,, ifNode, ., getParent, (, ), ,]
[addChildToBack, (, destBlock, ), ;, }, moveAllFollowing, (, ifNode, ,, ifNode, ., getParent, (, ), ,, newDestBlock, ), ;, }]
[addChildToBack, (, destBlock, ), ;, }, moveAllFollowing, (, ifNode, ,, ifNode, ., getParent, (, ), ,, newDestBlock, ), ;, }]
[;, }, moveAllFollowing, (, ifNode, ,, ifNode, ., getParent, (, ), ,, newDestBlock, ), ;, }, NodeUtil, ., removeChild, (]
[moveAllFollowing, (, ifNode, ,, ifNode, ., getParent, (, ), ,, newDestBlock, ), ;, }, NodeUtil, ., removeChild, (, exitNodeParent, ,]
[,, ifNode, ., getParent, (, ), ,, newDestBlock, ), ;, }, NodeUtil, ., removeChild, (, exitNodeParent, ,, exitNode, ), ;]
[,, ifNode, ., getParent, (, ), ,, newDestBlock, ), ;, }, NodeUtil, ., removeChild, (, exitNodeParent, ,, exitNode, ), ;]
[), ;, }, static, private, boolean, matchingExitNode, (, Node, n, ,, int, type, ,, String, labelName, ), {, if, (]
[), ;, }, static, private, boolean, matchingExitNode, (, Node, n, ,, int, type, ,, String, labelName, ), {, if, (]
[), ;, }, static, private, boolean, matchingExitNode, (, Node, n, ,, int, type, ,, String, labelName, ), {, if, (]
[matchingExitNode, (, Node, n, ,, int, type, ,, String, labelName, ), {, if, (, n, ., getType, (, ), ==]
[int, type, ,, String, labelName, ), {, if, (, n, ., getType, (, ), ==, type, ), {, if, (]
[int, type, ,, String, labelName, ), {, if, (, n, ., getType, (, ), ==, type, ), {, if, (]
[,, String, labelName, ), {, if, (, n, ., getType, (, ), ==, type, ), {, if, (, type, ==]
[,, String, labelName, ), {, if, (, n, ., getType, (, ), ==, type, ), {, if, (, type, ==]
[(, n, ., getType, (, ), ==, type, ), {, if, (, type, ==, Token, ., RETURN, ), {, return]
[n, ., getType, (, ), ==, type, ), {, if, (, type, ==, Token, ., RETURN, ), {, return, !]
[n, ., getType, (, ), ==, type, ), {, if, (, type, ==, Token, ., RETURN, ), {, return, !]
[type, ==, Token, ., RETURN, ), {, return, !, n, ., hasChildren, (, ), ;, }, else, {, if, (]
[type, ==, Token, ., RETURN, ), {, return, !, n, ., hasChildren, (, ), ;, }, else, {, if, (]
[Token, ., RETURN, ), {, return, !, n, ., hasChildren, (, ), ;, }, else, {, if, (, labelName, ==]
[{, return, !, n, ., hasChildren, (, ), ;, }, else, {, if, (, labelName, ==, null, ), {, return]
[return, !, n, ., hasChildren, (, ), ;, }, else, {, if, (, labelName, ==, null, ), {, return, !]
[return, !, n, ., hasChildren, (, ), ;, }, else, {, if, (, labelName, ==, null, ), {, return, !]
[{, if, (, labelName, ==, null, ), {, return, !, n, ., hasChildren, (, ), ;, }, else, {, return]
[{, if, (, labelName, ==, null, ), {, return, !, n, ., hasChildren, (, ), ;, }, else, {, return]
[{, if, (, labelName, ==, null, ), {, return, !, n, ., hasChildren, (, ), ;, }, else, {, return]
[), {, return, !, n, ., hasChildren, (, ), ;, }, else, {, return, n, ., hasChildren, (, ), &&]
[), {, return, !, n, ., hasChildren, (, ), ;, }, else, {, return, n, ., hasChildren, (, ), &&]
[n, ., hasChildren, (, ), ;, }, else, {, return, n, ., hasChildren, (, ), &&, labelName, ., equals, (]
[n, ., hasChildren, (, ), ;, }, else, {, return, n, ., hasChildren, (, ), &&, labelName, ., equals, (]
[n, ., hasChildren, (, ), ;, }, else, {, return, n, ., hasChildren, (, ), &&, labelName, ., equals, (]
[&&, labelName, ., equals, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, }, }, }, return]
[static, private, void, moveAllFollowing, (, Node, start, ,, Node, srcParent, ,, Node, destParent, ), {, for, (, Node, n, =]
[static, private, void, moveAllFollowing, (, Node, start, ,, Node, srcParent, ,, Node, destParent, ), {, for, (, Node, n, =]
[start, ,, Node, srcParent, ,, Node, destParent, ), {, for, (, Node, n, =, start, ., getNext, (, ), ;]
[start, ,, Node, srcParent, ,, Node, destParent, ), {, for, (, Node, n, =, start, ., getNext, (, ), ;]
[Node, srcParent, ,, Node, destParent, ), {, for, (, Node, n, =, start, ., getNext, (, ), ;, n, !=]
[,, Node, destParent, ), {, for, (, Node, n, =, start, ., getNext, (, ), ;, n, !=, null, ;]
[destParent, ), {, for, (, Node, n, =, start, ., getNext, (, ), ;, n, !=, null, ;, n, =]
[destParent, ), {, for, (, Node, n, =, start, ., getNext, (, ), ;, n, !=, null, ;, n, =]
[getNext, (, ), ;, n, !=, null, ;, n, =, start, ., getNext, (, ), ), {, boolean, isFunctionDeclaration, =]
[getNext, (, ), ;, n, !=, null, ;, n, =, start, ., getNext, (, ), ), {, boolean, isFunctionDeclaration, =]
[n, !=, null, ;, n, =, start, ., getNext, (, ), ), {, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (]
[;, n, =, start, ., getNext, (, ), ), {, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (, n, ), ;]
[;, n, =, start, ., getNext, (, ), ), {, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (, n, ), ;]
[., getNext, (, ), ), {, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (, n, ), ;, srcParent, ., removeChild, (]
[{, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (, n, ), ;, srcParent, ., removeChild, (, n, ), ;, if, (]
[=, NodeUtil, ., isFunctionDeclaration, (, n, ), ;, srcParent, ., removeChild, (, n, ), ;, if, (, isFunctionDeclaration, ), {]
[=, NodeUtil, ., isFunctionDeclaration, (, n, ), ;, srcParent, ., removeChild, (, n, ), ;, if, (, isFunctionDeclaration, ), {]
[(, n, ), ;, srcParent, ., removeChild, (, n, ), ;, if, (, isFunctionDeclaration, ), {, destParent, ., addChildToFront, (]
[removeChild, (, n, ), ;, if, (, isFunctionDeclaration, ), {, destParent, ., addChildToFront, (, n, ), ;, }, else, {]
[removeChild, (, n, ), ;, if, (, isFunctionDeclaration, ), {, destParent, ., addChildToFront, (, n, ), ;, }, else, {]
[;, if, (, isFunctionDeclaration, ), {, destParent, ., addChildToFront, (, n, ), ;, }, else, {, destParent, ., addChildToBack, (]
