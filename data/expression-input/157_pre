[public, class, DepsGenerator, {, public, static, enum, InclusionStrategy, {, ALWAYS, ,, WHEN_IN_SRCS, ,, DO_NOT_DUPLICATE, }, private, static, Logger, logger, =]
[public, class, DepsGenerator, {, public, static, enum, InclusionStrategy, {, ALWAYS, ,, WHEN_IN_SRCS, ,, DO_NOT_DUPLICATE, }, private, static, Logger, logger, =]
[public, static, enum, InclusionStrategy, {, ALWAYS, ,, WHEN_IN_SRCS, ,, DO_NOT_DUPLICATE, }, private, static, Logger, logger, =, Logger, ., getLogger, (]
[public, static, enum, InclusionStrategy, {, ALWAYS, ,, WHEN_IN_SRCS, ,, DO_NOT_DUPLICATE, }, private, static, Logger, logger, =, Logger, ., getLogger, (]
[;, private, final, String, closurePathAbs, ;, private, final, InclusionStrategy, mergeStrategy, ;, final, ErrorManager, errorManager, ;, static, final, DiagnosticType, SAME_FILE_WARNING, =]
[;, private, final, String, closurePathAbs, ;, private, final, InclusionStrategy, mergeStrategy, ;, final, ErrorManager, errorManager, ;, static, final, DiagnosticType, SAME_FILE_WARNING, =]
[closurePathAbs, ;, private, final, InclusionStrategy, mergeStrategy, ;, final, ErrorManager, errorManager, ;, static, final, DiagnosticType, SAME_FILE_WARNING, =, DiagnosticType, ., warning, (]
[private, final, InclusionStrategy, mergeStrategy, ;, final, ErrorManager, errorManager, ;, static, final, DiagnosticType, SAME_FILE_WARNING, =, DiagnosticType, ., warning, (, "DEPS_SAME_FILE", ,]
[;, static, final, DiagnosticType, SAME_FILE_WARNING, =, DiagnosticType, ., warning, (, "DEPS_SAME_FILE", ,, "Namespace \"{0}\" is both required and provided in the same file.", ), ;, static, final, DiagnosticType, NEVER_PROVIDED_ERROR, =]
[;, static, final, DiagnosticType, SAME_FILE_WARNING, =, DiagnosticType, ., warning, (, "DEPS_SAME_FILE", ,, "Namespace \"{0}\" is both required and provided in the same file.", ), ;, static, final, DiagnosticType, NEVER_PROVIDED_ERROR, =]
[SAME_FILE_WARNING, =, DiagnosticType, ., warning, (, "DEPS_SAME_FILE", ,, "Namespace \"{0}\" is both required and provided in the same file.", ), ;, static, final, DiagnosticType, NEVER_PROVIDED_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., warning, (, "DEPS_SAME_FILE", ,, "Namespace \"{0}\" is both required and provided in the same file.", ), ;, static, final, DiagnosticType, NEVER_PROVIDED_ERROR, =, DiagnosticType, ., error, (, "DEPS_NEVER_PROVIDED", ,]
[;, static, final, DiagnosticType, NEVER_PROVIDED_ERROR, =, DiagnosticType, ., error, (, "DEPS_NEVER_PROVIDED", ,, "Namespace \"{0}\" is required but never provided.", ), ;, static, final, DiagnosticType, DUPE_PROVIDES_WARNING, =]
[;, static, final, DiagnosticType, NEVER_PROVIDED_ERROR, =, DiagnosticType, ., error, (, "DEPS_NEVER_PROVIDED", ,, "Namespace \"{0}\" is required but never provided.", ), ;, static, final, DiagnosticType, DUPE_PROVIDES_WARNING, =]
[NEVER_PROVIDED_ERROR, =, DiagnosticType, ., error, (, "DEPS_NEVER_PROVIDED", ,, "Namespace \"{0}\" is required but never provided.", ), ;, static, final, DiagnosticType, DUPE_PROVIDES_WARNING, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., error, (, "DEPS_NEVER_PROVIDED", ,, "Namespace \"{0}\" is required but never provided.", ), ;, static, final, DiagnosticType, DUPE_PROVIDES_WARNING, =, DiagnosticType, ., warning, (, "DEPS_DUPE_PROVIDES", ,]
[;, static, final, DiagnosticType, DUPE_PROVIDES_WARNING, =, DiagnosticType, ., warning, (, "DEPS_DUPE_PROVIDES", ,, "Multiple calls to goog.provide(\"{0}\")", ), ;, static, final, DiagnosticType, MULTIPLE_PROVIDES_ERROR, =]
[;, static, final, DiagnosticType, DUPE_PROVIDES_WARNING, =, DiagnosticType, ., warning, (, "DEPS_DUPE_PROVIDES", ,, "Multiple calls to goog.provide(\"{0}\")", ), ;, static, final, DiagnosticType, MULTIPLE_PROVIDES_ERROR, =]
[DUPE_PROVIDES_WARNING, =, DiagnosticType, ., warning, (, "DEPS_DUPE_PROVIDES", ,, "Multiple calls to goog.provide(\"{0}\")", ), ;, static, final, DiagnosticType, MULTIPLE_PROVIDES_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., warning, (, "DEPS_DUPE_PROVIDES", ,, "Multiple calls to goog.provide(\"{0}\")", ), ;, static, final, DiagnosticType, MULTIPLE_PROVIDES_ERROR, =, DiagnosticType, ., error, (, "DEPS_DUPE_PROVIDES", ,]
[;, static, final, DiagnosticType, MULTIPLE_PROVIDES_ERROR, =, DiagnosticType, ., error, (, "DEPS_DUPE_PROVIDES", ,, "Namespace \"{0}\" is already provided in other file {1}", ), ;, static, final, DiagnosticType, DUPE_REQUIRE_WARNING, =]
[;, static, final, DiagnosticType, MULTIPLE_PROVIDES_ERROR, =, DiagnosticType, ., error, (, "DEPS_DUPE_PROVIDES", ,, "Namespace \"{0}\" is already provided in other file {1}", ), ;, static, final, DiagnosticType, DUPE_REQUIRE_WARNING, =]
[MULTIPLE_PROVIDES_ERROR, =, DiagnosticType, ., error, (, "DEPS_DUPE_PROVIDES", ,, "Namespace \"{0}\" is already provided in other file {1}", ), ;, static, final, DiagnosticType, DUPE_REQUIRE_WARNING, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., error, (, "DEPS_DUPE_PROVIDES", ,, "Namespace \"{0}\" is already provided in other file {1}", ), ;, static, final, DiagnosticType, DUPE_REQUIRE_WARNING, =, DiagnosticType, ., warning, (, "DEPS_DUPE_REQUIRES", ,]
[;, static, final, DiagnosticType, DUPE_REQUIRE_WARNING, =, DiagnosticType, ., warning, (, "DEPS_DUPE_REQUIRES", ,, "Namespace \"{0}\" is required multiple times", ), ;, static, final, DiagnosticType, NO_DEPS_WARNING, =]
[;, static, final, DiagnosticType, DUPE_REQUIRE_WARNING, =, DiagnosticType, ., warning, (, "DEPS_DUPE_REQUIRES", ,, "Namespace \"{0}\" is required multiple times", ), ;, static, final, DiagnosticType, NO_DEPS_WARNING, =]
[DUPE_REQUIRE_WARNING, =, DiagnosticType, ., warning, (, "DEPS_DUPE_REQUIRES", ,, "Namespace \"{0}\" is required multiple times", ), ;, static, final, DiagnosticType, NO_DEPS_WARNING, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "DEPS_DUPE_REQUIRES", ,, "Namespace \"{0}\" is required multiple times", ), ;, static, final, DiagnosticType, NO_DEPS_WARNING, =, DiagnosticType, ., warning, (, "DEPS_NO_DEPS", ,]
[SourceFile, >, deps, ,, Collection, <, SourceFile, >, srcs, ,, InclusionStrategy, mergeStrategy, ,, String, closurePathAbs, ,, ErrorManager, errorManager, ), {]
[SourceFile, >, deps, ,, Collection, <, SourceFile, >, srcs, ,, InclusionStrategy, mergeStrategy, ,, String, closurePathAbs, ,, ErrorManager, errorManager, ), {]
[Collection, <, SourceFile, >, srcs, ,, InclusionStrategy, mergeStrategy, ,, String, closurePathAbs, ,, ErrorManager, errorManager, ), {, this, ., deps, =]
[SourceFile, >, srcs, ,, InclusionStrategy, mergeStrategy, ,, String, closurePathAbs, ,, ErrorManager, errorManager, ), {, this, ., deps, =, deps, ;]
[SourceFile, >, srcs, ,, InclusionStrategy, mergeStrategy, ,, String, closurePathAbs, ,, ErrorManager, errorManager, ), {, this, ., deps, =, deps, ;]
[InclusionStrategy, mergeStrategy, ,, String, closurePathAbs, ,, ErrorManager, errorManager, ), {, this, ., deps, =, deps, ;, this, ., srcs, =]
[,, String, closurePathAbs, ,, ErrorManager, errorManager, ), {, this, ., deps, =, deps, ;, this, ., srcs, =, srcs, ;]
[,, String, closurePathAbs, ,, ErrorManager, errorManager, ), {, this, ., deps, =, deps, ;, this, ., srcs, =, srcs, ;]
[ErrorManager, errorManager, ), {, this, ., deps, =, deps, ;, this, ., srcs, =, srcs, ;, this, ., mergeStrategy, =]
[), {, this, ., deps, =, deps, ;, this, ., srcs, =, srcs, ;, this, ., mergeStrategy, =, mergeStrategy, ;]
[), {, this, ., deps, =, deps, ;, this, ., srcs, =, srcs, ;, this, ., mergeStrategy, =, mergeStrategy, ;]
[deps, =, deps, ;, this, ., srcs, =, srcs, ;, this, ., mergeStrategy, =, mergeStrategy, ;, this, ., closurePathAbs, =]
[deps, ;, this, ., srcs, =, srcs, ;, this, ., mergeStrategy, =, mergeStrategy, ;, this, ., closurePathAbs, =, closurePathAbs, ;]
[deps, ;, this, ., srcs, =, srcs, ;, this, ., mergeStrategy, =, mergeStrategy, ;, this, ., closurePathAbs, =, closurePathAbs, ;]
[srcs, =, srcs, ;, this, ., mergeStrategy, =, mergeStrategy, ;, this, ., closurePathAbs, =, closurePathAbs, ;, this, ., errorManager, =]
[=, errorManager, ;, }, public, String, computeDependencyCalls, (, ), throws, IOException, {, Map, <, String, ,, DependencyInfo, >, depsFiles, =]
[public, String, computeDependencyCalls, (, ), throws, IOException, {, Map, <, String, ,, DependencyInfo, >, depsFiles, =, parseDepsFiles, (, ), ;]
[public, String, computeDependencyCalls, (, ), throws, IOException, {, Map, <, String, ,, DependencyInfo, >, depsFiles, =, parseDepsFiles, (, ), ;]
[), throws, IOException, {, Map, <, String, ,, DependencyInfo, >, depsFiles, =, parseDepsFiles, (, ), ;, logger, ., fine, (]
[), throws, IOException, {, Map, <, String, ,, DependencyInfo, >, depsFiles, =, parseDepsFiles, (, ), ;, logger, ., fine, (]
[IOException, {, Map, <, String, ,, DependencyInfo, >, depsFiles, =, parseDepsFiles, (, ), ;, logger, ., fine, (, "preparsedFiles: ", +]
[(, ), ;, logger, ., fine, (, "preparsedFiles: ", +, depsFiles, ), ;, Map, <, String, ,, DependencyInfo, >, jsFiles, =]
[;, logger, ., fine, (, "preparsedFiles: ", +, depsFiles, ), ;, Map, <, String, ,, DependencyInfo, >, jsFiles, =, parseSources, (]
[;, logger, ., fine, (, "preparsedFiles: ", +, depsFiles, ), ;, Map, <, String, ,, DependencyInfo, >, jsFiles, =, parseSources, (]
[;, Map, <, String, ,, DependencyInfo, >, jsFiles, =, parseSources, (, depsFiles, ., keySet, (, ), ), ;, if, (]
[;, Map, <, String, ,, DependencyInfo, >, jsFiles, =, parseSources, (, depsFiles, ., keySet, (, ), ), ;, if, (]
[;, Map, <, String, ,, DependencyInfo, >, jsFiles, =, parseSources, (, depsFiles, ., keySet, (, ), ), ;, if, (]
[>, jsFiles, =, parseSources, (, depsFiles, ., keySet, (, ), ), ;, if, (, errorManager, ., getErrorCount, (, ), >]
[(, depsFiles, ., keySet, (, ), ), ;, if, (, errorManager, ., getErrorCount, (, ), >, 0, ), {, return]
[keySet, (, ), ), ;, if, (, errorManager, ., getErrorCount, (, ), >, 0, ), {, return, null, ;, }]
[), ), ;, if, (, errorManager, ., getErrorCount, (, ), >, 0, ), {, return, null, ;, }, cleanUpDuplicatedFiles, (]
[;, if, (, errorManager, ., getErrorCount, (, ), >, 0, ), {, return, null, ;, }, cleanUpDuplicatedFiles, (, depsFiles, ,]
[errorManager, ., getErrorCount, (, ), >, 0, ), {, return, null, ;, }, cleanUpDuplicatedFiles, (, depsFiles, ,, jsFiles, ), ;]
[getErrorCount, (, ), >, 0, ), {, return, null, ;, }, cleanUpDuplicatedFiles, (, depsFiles, ,, jsFiles, ), ;, validateDependencies, (]
[getErrorCount, (, ), >, 0, ), {, return, null, ;, }, cleanUpDuplicatedFiles, (, depsFiles, ,, jsFiles, ), ;, validateDependencies, (]
[{, return, null, ;, }, cleanUpDuplicatedFiles, (, depsFiles, ,, jsFiles, ), ;, validateDependencies, (, depsFiles, ., values, (, ), ,]
[{, return, null, ;, }, cleanUpDuplicatedFiles, (, depsFiles, ,, jsFiles, ), ;, validateDependencies, (, depsFiles, ., values, (, ), ,]
[jsFiles, ), ;, validateDependencies, (, depsFiles, ., values, (, ), ,, jsFiles, ., values, (, ), ), ;, if, (]
[jsFiles, ), ;, validateDependencies, (, depsFiles, ., values, (, ), ,, jsFiles, ., values, (, ), ), ;, if, (]
[jsFiles, ), ;, validateDependencies, (, depsFiles, ., values, (, ), ,, jsFiles, ., values, (, ), ), ;, if, (]
[., values, (, ), ,, jsFiles, ., values, (, ), ), ;, if, (, errorManager, ., getErrorCount, (, ), >]
[,, jsFiles, ., values, (, ), ), ;, if, (, errorManager, ., getErrorCount, (, ), >, 0, ), {, return]
[), ;, if, (, errorManager, ., getErrorCount, (, ), >, 0, ), {, return, null, ;, }, ByteArrayOutputStream, output, =]
[., getErrorCount, (, ), >, 0, ), {, return, null, ;, }, ByteArrayOutputStream, output, =, new, ByteArrayOutputStream, (, ), ;]
[(, ), >, 0, ), {, return, null, ;, }, ByteArrayOutputStream, output, =, new, ByteArrayOutputStream, (, ), ;, writeDepsContent, (]
[>, 0, ), {, return, null, ;, }, ByteArrayOutputStream, output, =, new, ByteArrayOutputStream, (, ), ;, writeDepsContent, (, depsFiles, ,]
[), {, return, null, ;, }, ByteArrayOutputStream, output, =, new, ByteArrayOutputStream, (, ), ;, writeDepsContent, (, depsFiles, ,, jsFiles, ,]
[null, ;, }, ByteArrayOutputStream, output, =, new, ByteArrayOutputStream, (, ), ;, writeDepsContent, (, depsFiles, ,, jsFiles, ,, new, PrintStream, (]
[=, new, ByteArrayOutputStream, (, ), ;, writeDepsContent, (, depsFiles, ,, jsFiles, ,, new, PrintStream, (, output, ), ), ;, return]
[(, ), ;, writeDepsContent, (, depsFiles, ,, jsFiles, ,, new, PrintStream, (, output, ), ), ;, return, new, String, (]
[(, ), ;, writeDepsContent, (, depsFiles, ,, jsFiles, ,, new, PrintStream, (, output, ), ), ;, return, new, String, (]
[,, DependencyInfo, >, depsFiles, ,, Map, <, String, ,, DependencyInfo, >, jsFiles, ), {, Set, <, String, >, depsPathsCopy, =]
[,, DependencyInfo, >, depsFiles, ,, Map, <, String, ,, DependencyInfo, >, jsFiles, ), {, Set, <, String, >, depsPathsCopy, =]
[,, Map, <, String, ,, DependencyInfo, >, jsFiles, ), {, Set, <, String, >, depsPathsCopy, =, Sets, ., newHashSet, (]
[,, Map, <, String, ,, DependencyInfo, >, jsFiles, ), {, Set, <, String, >, depsPathsCopy, =, Sets, ., newHashSet, (]
[String, >, depsPathsCopy, =, Sets, ., newHashSet, (, depsFiles, ., keySet, (, ), ), ;, for, (, String, path, :]
[., newHashSet, (, depsFiles, ., keySet, (, ), ), ;, for, (, String, path, :, depsPathsCopy, ), {, if, (]
[., newHashSet, (, depsFiles, ., keySet, (, ), ), ;, for, (, String, path, :, depsPathsCopy, ), {, if, (]
[(, depsFiles, ., keySet, (, ), ), ;, for, (, String, path, :, depsPathsCopy, ), {, if, (, mergeStrategy, !=]
[(, depsFiles, ., keySet, (, ), ), ;, for, (, String, path, :, depsPathsCopy, ), {, if, (, mergeStrategy, !=]
[), ), ;, for, (, String, path, :, depsPathsCopy, ), {, if, (, mergeStrategy, !=, InclusionStrategy, ., WHEN_IN_SRCS, ), {]
[), ), ;, for, (, String, path, :, depsPathsCopy, ), {, if, (, mergeStrategy, !=, InclusionStrategy, ., WHEN_IN_SRCS, ), {]
[(, String, path, :, depsPathsCopy, ), {, if, (, mergeStrategy, !=, InclusionStrategy, ., WHEN_IN_SRCS, ), {, jsFiles, ., remove, (]
[!=, InclusionStrategy, ., WHEN_IN_SRCS, ), {, jsFiles, ., remove, (, path, ), ;, }, }, for, (, String, path, :]
[!=, InclusionStrategy, ., WHEN_IN_SRCS, ), {, jsFiles, ., remove, (, path, ), ;, }, }, for, (, String, path, :]
[., remove, (, path, ), ;, }, }, for, (, String, path, :, jsFiles, ., keySet, (, ), ), {]
[., remove, (, path, ), ;, }, }, for, (, String, path, :, jsFiles, ., keySet, (, ), ), {]
[), ;, }, }, for, (, String, path, :, jsFiles, ., keySet, (, ), ), {, depsFiles, ., remove, (]
[<, DependencyInfo, >, preparsedFileDepedencies, ,, Iterable, <, DependencyInfo, >, parsedFileDependencies, ), {, Map, <, String, ,, DependencyInfo, >, providesMap, =]
[<, DependencyInfo, >, preparsedFileDepedencies, ,, Iterable, <, DependencyInfo, >, parsedFileDependencies, ), {, Map, <, String, ,, DependencyInfo, >, providesMap, =]
[<, DependencyInfo, >, parsedFileDependencies, ), {, Map, <, String, ,, DependencyInfo, >, providesMap, =, Maps, ., newHashMap, (, ), ;]
[>, parsedFileDependencies, ), {, Map, <, String, ,, DependencyInfo, >, providesMap, =, Maps, ., newHashMap, (, ), ;, addToProvideMap, (]
[), {, Map, <, String, ,, DependencyInfo, >, providesMap, =, Maps, ., newHashMap, (, ), ;, addToProvideMap, (, preparsedFileDepedencies, ,]
[<, String, ,, DependencyInfo, >, providesMap, =, Maps, ., newHashMap, (, ), ;, addToProvideMap, (, preparsedFileDepedencies, ,, providesMap, ), ;]
[,, DependencyInfo, >, providesMap, =, Maps, ., newHashMap, (, ), ;, addToProvideMap, (, preparsedFileDepedencies, ,, providesMap, ), ;, addToProvideMap, (]
[>, providesMap, =, Maps, ., newHashMap, (, ), ;, addToProvideMap, (, preparsedFileDepedencies, ,, providesMap, ), ;, addToProvideMap, (, parsedFileDependencies, ,]
[;, addToProvideMap, (, preparsedFileDepedencies, ,, providesMap, ), ;, addToProvideMap, (, parsedFileDependencies, ,, providesMap, ), ;, for, (, DependencyInfo, depInfo, :]
[(, parsedFileDependencies, ,, providesMap, ), ;, for, (, DependencyInfo, depInfo, :, parsedFileDependencies, ), {, List, <, String, >, requires, =]
[(, parsedFileDependencies, ,, providesMap, ), ;, for, (, DependencyInfo, depInfo, :, parsedFileDependencies, ), {, List, <, String, >, requires, =]
[), ;, for, (, DependencyInfo, depInfo, :, parsedFileDependencies, ), {, List, <, String, >, requires, =, Lists, ., newArrayList, (]
[), ;, for, (, DependencyInfo, depInfo, :, parsedFileDependencies, ), {, List, <, String, >, requires, =, Lists, ., newArrayList, (]
[String, >, requires, =, Lists, ., newArrayList, (, depInfo, ., getRequires, (, ), ), ;, for, (, int, i, =]
[Lists, ., newArrayList, (, depInfo, ., getRequires, (, ), ), ;, for, (, int, i, =, 0, ,, l, =]
[Lists, ., newArrayList, (, depInfo, ., getRequires, (, ), ), ;, for, (, int, i, =, 0, ,, l, =]
[getRequires, (, ), ), ;, for, (, int, i, =, 0, ,, l, =, requires, ., size, (, ), ;]
[getRequires, (, ), ), ;, for, (, int, i, =, 0, ,, l, =, requires, ., size, (, ), ;]
[), ), ;, for, (, int, i, =, 0, ,, l, =, requires, ., size, (, ), ;, i, <]
[;, for, (, int, i, =, 0, ,, l, =, requires, ., size, (, ), ;, i, <, l, ;]
[for, (, int, i, =, 0, ,, l, =, requires, ., size, (, ), ;, i, <, l, ;, ++]
[,, l, =, requires, ., size, (, ), ;, i, <, l, ;, ++, i, ), {, String, namespace, =]
[,, l, =, requires, ., size, (, ), ;, i, <, l, ;, ++, i, ), {, String, namespace, =]
[., size, (, ), ;, i, <, l, ;, ++, i, ), {, String, namespace, =, requires, ., get, (]
[i, <, l, ;, ++, i, ), {, String, namespace, =, requires, ., get, (, i, ), ;, if, (]
[i, <, l, ;, ++, i, ), {, String, namespace, =, requires, ., get, (, i, ), ;, if, (]
[i, <, l, ;, ++, i, ), {, String, namespace, =, requires, ., get, (, i, ), ;, if, (]
[++, i, ), {, String, namespace, =, requires, ., get, (, i, ), ;, if, (, requires, ., subList, (]
[++, i, ), {, String, namespace, =, requires, ., get, (, i, ), ;, if, (, requires, ., subList, (]
[), {, String, namespace, =, requires, ., get, (, i, ), ;, if, (, requires, ., subList, (, i, +]
[String, namespace, =, requires, ., get, (, i, ), ;, if, (, requires, ., subList, (, i, +, 1, ,]
[get, (, i, ), ;, if, (, requires, ., subList, (, i, +, 1, ,, l, ), ., contains, (]
[;, if, (, requires, ., subList, (, i, +, 1, ,, l, ), ., contains, (, namespace, ), ), {]
[(, requires, ., subList, (, i, +, 1, ,, l, ), ., contains, (, namespace, ), ), {, reportDuplicateRequire, (]
[., subList, (, i, +, 1, ,, l, ), ., contains, (, namespace, ), ), {, reportDuplicateRequire, (, namespace, ,]
[l, ), ., contains, (, namespace, ), ), {, reportDuplicateRequire, (, namespace, ,, depInfo, ), ;, }, DependencyInfo, provider, =]
[l, ), ., contains, (, namespace, ), ), {, reportDuplicateRequire, (, namespace, ,, depInfo, ), ;, }, DependencyInfo, provider, =]
[(, namespace, ), ), {, reportDuplicateRequire, (, namespace, ,, depInfo, ), ;, }, DependencyInfo, provider, =, providesMap, ., get, (]
[reportDuplicateRequire, (, namespace, ,, depInfo, ), ;, }, DependencyInfo, provider, =, providesMap, ., get, (, namespace, ), ;, if, (]
[reportDuplicateRequire, (, namespace, ,, depInfo, ), ;, }, DependencyInfo, provider, =, providesMap, ., get, (, namespace, ), ;, if, (]
[namespace, ,, depInfo, ), ;, }, DependencyInfo, provider, =, providesMap, ., get, (, namespace, ), ;, if, (, provider, ==]
[), ;, }, DependencyInfo, provider, =, providesMap, ., get, (, namespace, ), ;, if, (, provider, ==, null, ), {]
[}, DependencyInfo, provider, =, providesMap, ., get, (, namespace, ), ;, if, (, provider, ==, null, ), {, reportUndefinedNamespace, (]
[provider, =, providesMap, ., get, (, namespace, ), ;, if, (, provider, ==, null, ), {, reportUndefinedNamespace, (, namespace, ,]
[), ;, if, (, provider, ==, null, ), {, reportUndefinedNamespace, (, namespace, ,, depInfo, ), ;, }, else, if, (]
[), ;, if, (, provider, ==, null, ), {, reportUndefinedNamespace, (, namespace, ,, depInfo, ), ;, }, else, if, (]
[if, (, provider, ==, null, ), {, reportUndefinedNamespace, (, namespace, ,, depInfo, ), ;, }, else, if, (, provider, ==]
[==, null, ), {, reportUndefinedNamespace, (, namespace, ,, depInfo, ), ;, }, else, if, (, provider, ==, depInfo, ), {]
[), {, reportUndefinedNamespace, (, namespace, ,, depInfo, ), ;, }, else, if, (, provider, ==, depInfo, ), {, reportSameFile, (]
[reportUndefinedNamespace, (, namespace, ,, depInfo, ), ;, }, else, if, (, provider, ==, depInfo, ), {, reportSameFile, (, namespace, ,]
[namespace, ,, depInfo, ), ;, }, }, }, }, private, void, reportSameFile, (, String, namespace, ,, DependencyInfo, depInfo, ), {]
[namespace, ,, depInfo, ), ;, }, }, }, }, private, void, reportSameFile, (, String, namespace, ,, DependencyInfo, depInfo, ), {]
[;, }, }, }, }, private, void, reportSameFile, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (]
[;, }, }, }, }, private, void, reportSameFile, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (]
[}, private, void, reportSameFile, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,]
[}, private, void, reportSameFile, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,]
[(, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (]
[(, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (]
[), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,]
[{, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -]
[., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -, 1, ,]
[report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -, 1, ,, -]
[CheckLevel, ., WARNING, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -, 1, ,, -, 1, ,]
[WARNING, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -, 1, ,, -, 1, ,, SAME_FILE_WARNING, ,]
[1, ,, SAME_FILE_WARNING, ,, namespace, ), ), ;, }, private, void, reportUndefinedNamespace, (, String, namespace, ,, DependencyInfo, depInfo, ), {]
[1, ,, SAME_FILE_WARNING, ,, namespace, ), ), ;, }, private, void, reportUndefinedNamespace, (, String, namespace, ,, DependencyInfo, depInfo, ), {]
[namespace, ), ), ;, }, private, void, reportUndefinedNamespace, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (]
[namespace, ), ), ;, }, private, void, reportUndefinedNamespace, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (]
[}, private, void, reportUndefinedNamespace, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (, CheckLevel, ., ERROR, ,]
[}, private, void, reportUndefinedNamespace, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (, CheckLevel, ., ERROR, ,]
[(, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (]
[(, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (]
[), {, errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,]
[{, errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -]
[., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -, 1, ,]
[report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -, 1, ,, -]
[CheckLevel, ., ERROR, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -, 1, ,, -, 1, ,]
[ERROR, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -, 1, ,, -, 1, ,, NEVER_PROVIDED_ERROR, ,]
[), ), ;, }, private, void, reportDuplicateProvide, (, String, namespace, ,, DependencyInfo, firstDep, ,, DependencyInfo, secondDep, ), {, if, (]
[), ), ;, }, private, void, reportDuplicateProvide, (, String, namespace, ,, DependencyInfo, firstDep, ,, DependencyInfo, secondDep, ), {, if, (]
[;, }, private, void, reportDuplicateProvide, (, String, namespace, ,, DependencyInfo, firstDep, ,, DependencyInfo, secondDep, ), {, if, (, firstDep, ==]
[void, reportDuplicateProvide, (, String, namespace, ,, DependencyInfo, firstDep, ,, DependencyInfo, secondDep, ), {, if, (, firstDep, ==, secondDep, ), {]
[void, reportDuplicateProvide, (, String, namespace, ,, DependencyInfo, firstDep, ,, DependencyInfo, secondDep, ), {, if, (, firstDep, ==, secondDep, ), {]
[namespace, ,, DependencyInfo, firstDep, ,, DependencyInfo, secondDep, ), {, if, (, firstDep, ==, secondDep, ), {, errorManager, ., report, (]
[namespace, ,, DependencyInfo, firstDep, ,, DependencyInfo, secondDep, ), {, if, (, firstDep, ==, secondDep, ), {, errorManager, ., report, (]
[,, DependencyInfo, secondDep, ), {, if, (, firstDep, ==, secondDep, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,]
[,, DependencyInfo, secondDep, ), {, if, (, firstDep, ==, secondDep, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,]
[{, if, (, firstDep, ==, secondDep, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (]
[{, if, (, firstDep, ==, secondDep, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (]
[), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, firstDep, ., getName, (, ), ,]
[{, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, firstDep, ., getName, (, ), ,, -]
[., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, firstDep, ., getName, (, ), ,, -, 1, ,]
[report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, firstDep, ., getName, (, ), ,, -, 1, ,, -]
[CheckLevel, ., WARNING, ,, JSError, ., make, (, firstDep, ., getName, (, ), ,, -, 1, ,, -, 1, ,]
[WARNING, ,, JSError, ., make, (, firstDep, ., getName, (, ), ,, -, 1, ,, -, 1, ,, DUPE_PROVIDES_WARNING, ,]
[., getName, (, ), ,, -, 1, ,, -, 1, ,, DUPE_PROVIDES_WARNING, ,, namespace, ), ), ;, }, else, {]
[., getName, (, ), ,, -, 1, ,, -, 1, ,, DUPE_PROVIDES_WARNING, ,, namespace, ), ), ;, }, else, {]
[,, -, 1, ,, -, 1, ,, DUPE_PROVIDES_WARNING, ,, namespace, ), ), ;, }, else, {, errorManager, ., report, (]
[,, -, 1, ,, -, 1, ,, DUPE_PROVIDES_WARNING, ,, namespace, ), ), ;, }, else, {, errorManager, ., report, (]
[-, 1, ,, DUPE_PROVIDES_WARNING, ,, namespace, ), ), ;, }, else, {, errorManager, ., report, (, CheckLevel, ., ERROR, ,]
[-, 1, ,, DUPE_PROVIDES_WARNING, ,, namespace, ), ), ;, }, else, {, errorManager, ., report, (, CheckLevel, ., ERROR, ,]
[,, namespace, ), ), ;, }, else, {, errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (]
[,, namespace, ), ), ;, }, else, {, errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (]
[else, {, errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, secondDep, ., getName, (, ), ,]
[{, errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, secondDep, ., getName, (, ), ,, -]
[., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, secondDep, ., getName, (, ), ,, -, 1, ,]
[report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, secondDep, ., getName, (, ), ,, -, 1, ,, -]
[CheckLevel, ., ERROR, ,, JSError, ., make, (, secondDep, ., getName, (, ), ,, -, 1, ,, -, 1, ,]
[ERROR, ,, JSError, ., make, (, secondDep, ., getName, (, ), ,, -, 1, ,, -, 1, ,, MULTIPLE_PROVIDES_ERROR, ,]
[JSError, ., make, (, secondDep, ., getName, (, ), ,, -, 1, ,, -, 1, ,, MULTIPLE_PROVIDES_ERROR, ,, namespace, ,]
[JSError, ., make, (, secondDep, ., getName, (, ), ,, -, 1, ,, -, 1, ,, MULTIPLE_PROVIDES_ERROR, ,, namespace, ,]
[., getName, (, ), ), ), ;, }, }, private, void, reportDuplicateRequire, (, String, namespace, ,, DependencyInfo, depInfo, ), {]
[., getName, (, ), ), ), ;, }, }, private, void, reportDuplicateRequire, (, String, namespace, ,, DependencyInfo, depInfo, ), {]
[), ), ;, }, }, private, void, reportDuplicateRequire, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (]
[), ), ;, }, }, private, void, reportDuplicateRequire, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (]
[}, private, void, reportDuplicateRequire, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,]
[}, private, void, reportDuplicateRequire, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,]
[(, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (]
[(, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (]
[), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,]
[{, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -]
[., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -, 1, ,]
[report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -, 1, ,, -]
[CheckLevel, ., WARNING, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -, 1, ,, -, 1, ,]
[WARNING, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -, 1, ,, -, 1, ,, DUPE_REQUIRE_WARNING, ,]
[1, ,, -, 1, ,, DUPE_REQUIRE_WARNING, ,, namespace, ), ), ;, }, private, void, reportNoDepsInDepsFile, (, String, filePath, ), {]
[1, ,, -, 1, ,, DUPE_REQUIRE_WARNING, ,, namespace, ), ), ;, }, private, void, reportNoDepsInDepsFile, (, String, filePath, ), {]
[,, DUPE_REQUIRE_WARNING, ,, namespace, ), ), ;, }, private, void, reportNoDepsInDepsFile, (, String, filePath, ), {, errorManager, ., report, (]
[,, DUPE_REQUIRE_WARNING, ,, namespace, ), ), ;, }, private, void, reportNoDepsInDepsFile, (, String, filePath, ), {, errorManager, ., report, (]
[), ), ;, }, private, void, reportNoDepsInDepsFile, (, String, filePath, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,]
[), ), ;, }, private, void, reportNoDepsInDepsFile, (, String, filePath, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,]
[private, void, reportNoDepsInDepsFile, (, String, filePath, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (]
[reportNoDepsInDepsFile, (, String, filePath, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, filePath, ,]
[(, String, filePath, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, filePath, ,, -]
[filePath, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, filePath, ,, -, 1, ,]
[), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, filePath, ,, -, 1, ,, -]
[errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, filePath, ,, -, 1, ,, -, 1, ,]
[Iterable, <, DependencyInfo, >, depInfos, ,, Map, <, String, ,, DependencyInfo, >, providesMap, ), {, for, (, DependencyInfo, depInfo, :]
[String, ,, DependencyInfo, >, providesMap, ), {, for, (, DependencyInfo, depInfo, :, depInfos, ), {, for, (, String, provide, :]
[String, ,, DependencyInfo, >, providesMap, ), {, for, (, DependencyInfo, depInfo, :, depInfos, ), {, for, (, String, provide, :]
[depInfo, :, depInfos, ), {, for, (, String, provide, :, depInfo, ., getProvides, (, ), ), {, DependencyInfo, prevValue, =]
[depInfo, :, depInfos, ), {, for, (, String, provide, :, depInfo, ., getProvides, (, ), ), {, DependencyInfo, prevValue, =]
[{, for, (, String, provide, :, depInfo, ., getProvides, (, ), ), {, DependencyInfo, prevValue, =, providesMap, ., put, (]
[(, String, provide, :, depInfo, ., getProvides, (, ), ), {, DependencyInfo, prevValue, =, providesMap, ., put, (, provide, ,]
[., getProvides, (, ), ), {, DependencyInfo, prevValue, =, providesMap, ., put, (, provide, ,, depInfo, ), ;, if, (]
[., getProvides, (, ), ), {, DependencyInfo, prevValue, =, providesMap, ., put, (, provide, ,, depInfo, ), ;, if, (]
[(, ), ), {, DependencyInfo, prevValue, =, providesMap, ., put, (, provide, ,, depInfo, ), ;, if, (, prevValue, !=]
[{, DependencyInfo, prevValue, =, providesMap, ., put, (, provide, ,, depInfo, ), ;, if, (, prevValue, !=, null, ), {]
[prevValue, =, providesMap, ., put, (, provide, ,, depInfo, ), ;, if, (, prevValue, !=, null, ), {, reportDuplicateProvide, (]
[providesMap, ., put, (, provide, ,, depInfo, ), ;, if, (, prevValue, !=, null, ), {, reportDuplicateProvide, (, provide, ,]
[put, (, provide, ,, depInfo, ), ;, if, (, prevValue, !=, null, ), {, reportDuplicateProvide, (, provide, ,, prevValue, ,]
[provide, ,, prevValue, ,, depInfo, ), ;, }, }, }, }, protected, DepsFileParser, createDepsFileParser, (, ), {, DepsFileParser, depsParser, =]
[,, depInfo, ), ;, }, }, }, }, protected, DepsFileParser, createDepsFileParser, (, ), {, DepsFileParser, depsParser, =, new, DepsFileParser, (]
[;, }, }, }, }, protected, DepsFileParser, createDepsFileParser, (, ), {, DepsFileParser, depsParser, =, new, DepsFileParser, (, errorManager, ), ;]
[;, }, }, }, }, protected, DepsFileParser, createDepsFileParser, (, ), {, DepsFileParser, depsParser, =, new, DepsFileParser, (, errorManager, ), ;]
[}, protected, DepsFileParser, createDepsFileParser, (, ), {, DepsFileParser, depsParser, =, new, DepsFileParser, (, errorManager, ), ;, depsParser, ., setShortcutMode, (]
[(, ), {, DepsFileParser, depsParser, =, new, DepsFileParser, (, errorManager, ), ;, depsParser, ., setShortcutMode, (, true, ), ;, return]
[depsParser, ., setShortcutMode, (, true, ), ;, return, depsParser, ;, }, protected, boolean, shouldSkipDepsFile, (, SourceFile, file, ), {, return]
[return, false, ;, }, private, Map, <, String, ,, DependencyInfo, >, parseDepsFiles, (, ), throws, IOException, {, DepsFileParser, depsParser, =]
[(, ), throws, IOException, {, DepsFileParser, depsParser, =, createDepsFileParser, (, ), ;, Map, <, String, ,, DependencyInfo, >, depsFiles, =]
[(, ), throws, IOException, {, DepsFileParser, depsParser, =, createDepsFileParser, (, ), ;, Map, <, String, ,, DependencyInfo, >, depsFiles, =]
[;, Map, <, String, ,, DependencyInfo, >, depsFiles, =, Maps, ., newHashMap, (, ), ;, for, (, SourceFile, file, :]
[DependencyInfo, >, depsFiles, =, Maps, ., newHashMap, (, ), ;, for, (, SourceFile, file, :, deps, ), {, if, (]
[>, depsFiles, =, Maps, ., newHashMap, (, ), ;, for, (, SourceFile, file, :, deps, ), {, if, (, !]
[=, Maps, ., newHashMap, (, ), ;, for, (, SourceFile, file, :, deps, ), {, if, (, !, shouldSkipDepsFile, (]
[file, :, deps, ), {, if, (, !, shouldSkipDepsFile, (, file, ), ), {, List, <, DependencyInfo, >, depInfos, =]
[file, :, deps, ), {, if, (, !, shouldSkipDepsFile, (, file, ), ), {, List, <, DependencyInfo, >, depInfos, =]
[{, if, (, !, shouldSkipDepsFile, (, file, ), ), {, List, <, DependencyInfo, >, depInfos, =, depsParser, ., parseFileReader, (]
[{, if, (, !, shouldSkipDepsFile, (, file, ), ), {, List, <, DependencyInfo, >, depInfos, =, depsParser, ., parseFileReader, (]
[file, ), ), {, List, <, DependencyInfo, >, depInfos, =, depsParser, ., parseFileReader, (, file, ., getName, (, ), ,]
[file, ), ), {, List, <, DependencyInfo, >, depInfos, =, depsParser, ., parseFileReader, (, file, ., getName, (, ), ,]
[=, depsParser, ., parseFileReader, (, file, ., getName, (, ), ,, file, ., getCodeReader, (, ), ), ;, if, (]
[=, depsParser, ., parseFileReader, (, file, ., getName, (, ), ,, file, ., getCodeReader, (, ), ), ;, if, (]
[getName, (, ), ,, file, ., getCodeReader, (, ), ), ;, if, (, depInfos, ., isEmpty, (, ), ), {]
[), ,, file, ., getCodeReader, (, ), ), ;, if, (, depInfos, ., isEmpty, (, ), ), {, reportNoDepsInDepsFile, (]
[), ,, file, ., getCodeReader, (, ), ), ;, if, (, depInfos, ., isEmpty, (, ), ), {, reportNoDepsInDepsFile, (]
[), ), {, reportNoDepsInDepsFile, (, file, ., getName, (, ), ), ;, }, else, {, for, (, DependencyInfo, info, :]
[reportNoDepsInDepsFile, (, file, ., getName, (, ), ), ;, }, else, {, for, (, DependencyInfo, info, :, depInfos, ), {]
[reportNoDepsInDepsFile, (, file, ., getName, (, ), ), ;, }, else, {, for, (, DependencyInfo, info, :, depInfos, ), {]
[getName, (, ), ), ;, }, else, {, for, (, DependencyInfo, info, :, depInfos, ), {, depsFiles, ., put, (]
[getName, (, ), ), ;, }, else, {, for, (, DependencyInfo, info, :, depInfos, ), {, depsFiles, ., put, (]
[else, {, for, (, DependencyInfo, info, :, depInfos, ), {, depsFiles, ., put, (, info, ., getPathRelativeToClosureBase, (, ), ,]
[put, (, info, ., getPathRelativeToClosureBase, (, ), ,, info, ), ;, }, }, }, }, for, (, SourceFile, src, :]
[(, ), ,, info, ), ;, }, }, }, }, for, (, SourceFile, src, :, srcs, ), {, if, (]
[(, ), ,, info, ), ;, }, }, }, }, for, (, SourceFile, src, :, srcs, ), {, if, (]
[(, ), ,, info, ), ;, }, }, }, }, for, (, SourceFile, src, :, srcs, ), {, if, (]
[), ,, info, ), ;, }, }, }, }, for, (, SourceFile, src, :, srcs, ), {, if, (, (]
[), ;, }, }, }, }, for, (, SourceFile, src, :, srcs, ), {, if, (, (, new, File, (]
[), ;, }, }, }, }, for, (, SourceFile, src, :, srcs, ), {, if, (, (, new, File, (]
[), {, if, (, (, new, File, (, src, ., getName, (, ), ), ), ., exists, (, ), &&]
[{, if, (, (, new, File, (, src, ., getName, (, ), ), ), ., exists, (, ), &&, !]
[(, (, new, File, (, src, ., getName, (, ), ), ), ., exists, (, ), &&, !, shouldSkipDepsFile, (]
[), ), ., exists, (, ), &&, !, shouldSkipDepsFile, (, src, ), ), {, List, <, DependencyInfo, >, srcInfos, =]
[), ), ., exists, (, ), &&, !, shouldSkipDepsFile, (, src, ), ), {, List, <, DependencyInfo, >, srcInfos, =]
[(, ), &&, !, shouldSkipDepsFile, (, src, ), ), {, List, <, DependencyInfo, >, srcInfos, =, depsParser, ., parseFileReader, (]
[(, ), &&, !, shouldSkipDepsFile, (, src, ), ), {, List, <, DependencyInfo, >, srcInfos, =, depsParser, ., parseFileReader, (]
[src, ), ), {, List, <, DependencyInfo, >, srcInfos, =, depsParser, ., parseFileReader, (, src, ., getName, (, ), ,]
[src, ), ), {, List, <, DependencyInfo, >, srcInfos, =, depsParser, ., parseFileReader, (, src, ., getName, (, ), ,]
[parseFileReader, (, src, ., getName, (, ), ,, src, ., getCodeReader, (, ), ), ;, for, (, DependencyInfo, info, :]
[., getName, (, ), ,, src, ., getCodeReader, (, ), ), ;, for, (, DependencyInfo, info, :, srcInfos, ), {]
[., getName, (, ), ,, src, ., getCodeReader, (, ), ), ;, for, (, DependencyInfo, info, :, srcInfos, ), {]
[,, src, ., getCodeReader, (, ), ), ;, for, (, DependencyInfo, info, :, srcInfos, ), {, depsFiles, ., put, (]
[,, src, ., getCodeReader, (, ), ), ;, for, (, DependencyInfo, info, :, srcInfos, ), {, depsFiles, ., put, (]
[), ;, for, (, DependencyInfo, info, :, srcInfos, ), {, depsFiles, ., put, (, info, ., getPathRelativeToClosureBase, (, ), ,]
[srcInfos, ), {, depsFiles, ., put, (, info, ., getPathRelativeToClosureBase, (, ), ,, info, ), ;, }, }, }, return]
[>, parseSources, (, Set, <, String, >, preparsedFiles, ), throws, IOException, {, Map, <, String, ,, DependencyInfo, >, parsedFiles, =]
[>, parseSources, (, Set, <, String, >, preparsedFiles, ), throws, IOException, {, Map, <, String, ,, DependencyInfo, >, parsedFiles, =]
[throws, IOException, {, Map, <, String, ,, DependencyInfo, >, parsedFiles, =, Maps, ., newHashMap, (, ), ;, JsFileParser, jsParser, =]
[Map, <, String, ,, DependencyInfo, >, parsedFiles, =, Maps, ., newHashMap, (, ), ;, JsFileParser, jsParser, =, new, JsFileParser, (]
[Maps, ., newHashMap, (, ), ;, JsFileParser, jsParser, =, new, JsFileParser, (, errorManager, ), ;, for, (, SourceFile, file, :]
[JsFileParser, jsParser, =, new, JsFileParser, (, errorManager, ), ;, for, (, SourceFile, file, :, srcs, ), {, String, closureRelativePath, =]
[JsFileParser, jsParser, =, new, JsFileParser, (, errorManager, ), ;, for, (, SourceFile, file, :, srcs, ), {, String, closureRelativePath, =]
[JsFileParser, (, errorManager, ), ;, for, (, SourceFile, file, :, srcs, ), {, String, closureRelativePath, =, PathUtil, ., makeRelative, (]
[errorManager, ), ;, for, (, SourceFile, file, :, srcs, ), {, String, closureRelativePath, =, PathUtil, ., makeRelative, (, closurePathAbs, ,]
[errorManager, ), ;, for, (, SourceFile, file, :, srcs, ), {, String, closureRelativePath, =, PathUtil, ., makeRelative, (, closurePathAbs, ,]
[(, SourceFile, file, :, srcs, ), {, String, closureRelativePath, =, PathUtil, ., makeRelative, (, closurePathAbs, ,, PathUtil, ., makeAbsolute, (]
[(, SourceFile, file, :, srcs, ), {, String, closureRelativePath, =, PathUtil, ., makeRelative, (, closurePathAbs, ,, PathUtil, ., makeAbsolute, (]
[closureRelativePath, =, PathUtil, ., makeRelative, (, closurePathAbs, ,, PathUtil, ., makeAbsolute, (, file, ., getName, (, ), ), ), ;]
[closureRelativePath, =, PathUtil, ., makeRelative, (, closurePathAbs, ,, PathUtil, ., makeAbsolute, (, file, ., getName, (, ), ), ), ;]
[makeRelative, (, closurePathAbs, ,, PathUtil, ., makeAbsolute, (, file, ., getName, (, ), ), ), ;, logger, ., fine, (]
[makeRelative, (, closurePathAbs, ,, PathUtil, ., makeAbsolute, (, file, ., getName, (, ), ), ), ;, logger, ., fine, (]
[closurePathAbs, ,, PathUtil, ., makeAbsolute, (, file, ., getName, (, ), ), ), ;, logger, ., fine, (, "Closure-relative path: ", +]
[(, file, ., getName, (, ), ), ), ;, logger, ., fine, (, "Closure-relative path: ", +, closureRelativePath, ), ;, if, (]
[(, file, ., getName, (, ), ), ), ;, logger, ., fine, (, "Closure-relative path: ", +, closureRelativePath, ), ;, if, (]
[(, file, ., getName, (, ), ), ), ;, logger, ., fine, (, "Closure-relative path: ", +, closureRelativePath, ), ;, if, (]
[(, file, ., getName, (, ), ), ), ;, logger, ., fine, (, "Closure-relative path: ", +, closureRelativePath, ), ;, if, (]
[(, ), ), ), ;, logger, ., fine, (, "Closure-relative path: ", +, closureRelativePath, ), ;, if, (, InclusionStrategy, ., WHEN_IN_SRCS, ==]
[), ), ;, logger, ., fine, (, "Closure-relative path: ", +, closureRelativePath, ), ;, if, (, InclusionStrategy, ., WHEN_IN_SRCS, ==, mergeStrategy, ||]
[), ;, logger, ., fine, (, "Closure-relative path: ", +, closureRelativePath, ), ;, if, (, InclusionStrategy, ., WHEN_IN_SRCS, ==, mergeStrategy, ||, !]
[), ;, logger, ., fine, (, "Closure-relative path: ", +, closureRelativePath, ), ;, if, (, InclusionStrategy, ., WHEN_IN_SRCS, ==, mergeStrategy, ||, !]
[fine, (, "Closure-relative path: ", +, closureRelativePath, ), ;, if, (, InclusionStrategy, ., WHEN_IN_SRCS, ==, mergeStrategy, ||, !, preparsedFiles, ., contains, (]
[if, (, InclusionStrategy, ., WHEN_IN_SRCS, ==, mergeStrategy, ||, !, preparsedFiles, ., contains, (, closureRelativePath, ), ), {, DependencyInfo, depInfo, =]
[if, (, InclusionStrategy, ., WHEN_IN_SRCS, ==, mergeStrategy, ||, !, preparsedFiles, ., contains, (, closureRelativePath, ), ), {, DependencyInfo, depInfo, =]
[WHEN_IN_SRCS, ==, mergeStrategy, ||, !, preparsedFiles, ., contains, (, closureRelativePath, ), ), {, DependencyInfo, depInfo, =, jsParser, ., parseFile, (]
[WHEN_IN_SRCS, ==, mergeStrategy, ||, !, preparsedFiles, ., contains, (, closureRelativePath, ), ), {, DependencyInfo, depInfo, =, jsParser, ., parseFile, (]
[., contains, (, closureRelativePath, ), ), {, DependencyInfo, depInfo, =, jsParser, ., parseFile, (, file, ., getName, (, ), ,]
[(, closureRelativePath, ), ), {, DependencyInfo, depInfo, =, jsParser, ., parseFile, (, file, ., getName, (, ), ,, closureRelativePath, ,]
[(, closureRelativePath, ), ), {, DependencyInfo, depInfo, =, jsParser, ., parseFile, (, file, ., getName, (, ), ,, closureRelativePath, ,]
[=, jsParser, ., parseFile, (, file, ., getName, (, ), ,, closureRelativePath, ,, file, ., getCode, (, ), ), ;]
[=, jsParser, ., parseFile, (, file, ., getName, (, ), ,, closureRelativePath, ,, file, ., getCode, (, ), ), ;]
[., getName, (, ), ,, closureRelativePath, ,, file, ., getCode, (, ), ), ;, file, ., clearCachedSource, (, ), ;]
[., getName, (, ), ,, closureRelativePath, ,, file, ., getCode, (, ), ), ;, file, ., clearCachedSource, (, ), ;]
[,, closureRelativePath, ,, file, ., getCode, (, ), ), ;, file, ., clearCachedSource, (, ), ;, parsedFiles, ., put, (]
[,, file, ., getCode, (, ), ), ;, file, ., clearCachedSource, (, ), ;, parsedFiles, ., put, (, closureRelativePath, ,]
[), ;, file, ., clearCachedSource, (, ), ;, parsedFiles, ., put, (, closureRelativePath, ,, depInfo, ), ;, }, }, return]
[String, ,, DependencyInfo, >, depsFiles, ,, Map, <, String, ,, DependencyInfo, >, jsFiles, ,, PrintStream, out, ), throws, IOException, {]
[DependencyInfo, >, depsFiles, ,, Map, <, String, ,, DependencyInfo, >, jsFiles, ,, PrintStream, out, ), throws, IOException, {, writeDepInfos, (]
[depsFiles, ,, Map, <, String, ,, DependencyInfo, >, jsFiles, ,, PrintStream, out, ), throws, IOException, {, writeDepInfos, (, out, ,]
[depsFiles, ,, Map, <, String, ,, DependencyInfo, >, jsFiles, ,, PrintStream, out, ), throws, IOException, {, writeDepInfos, (, out, ,]
[,, PrintStream, out, ), throws, IOException, {, writeDepInfos, (, out, ,, jsFiles, ., values, (, ), ), ;, if, (]
[,, PrintStream, out, ), throws, IOException, {, writeDepInfos, (, out, ,, jsFiles, ., values, (, ), ), ;, if, (]
[out, ), throws, IOException, {, writeDepInfos, (, out, ,, jsFiles, ., values, (, ), ), ;, if, (, mergeStrategy, ==]
[out, ), throws, IOException, {, writeDepInfos, (, out, ,, jsFiles, ., values, (, ), ), ;, if, (, mergeStrategy, ==]
[), ), ;, if, (, mergeStrategy, ==, InclusionStrategy, ., ALWAYS, ), {, Multimap, <, String, ,, DependencyInfo, >, infosIndex, =]
[), ), ;, if, (, mergeStrategy, ==, InclusionStrategy, ., ALWAYS, ), {, Multimap, <, String, ,, DependencyInfo, >, infosIndex, =]
[(, mergeStrategy, ==, InclusionStrategy, ., ALWAYS, ), {, Multimap, <, String, ,, DependencyInfo, >, infosIndex, =, Multimaps, ., index, (]
[(, mergeStrategy, ==, InclusionStrategy, ., ALWAYS, ), {, Multimap, <, String, ,, DependencyInfo, >, infosIndex, =, Multimaps, ., index, (]
[), {, Multimap, <, String, ,, DependencyInfo, >, infosIndex, =, Multimaps, ., index, (, depsFiles, ., values, (, ), ,]
[Function, <, DependencyInfo, ,, String, >, (, ), {, @, Override, public, String, apply, (, DependencyInfo, from, ), {, return]
[Function, <, DependencyInfo, ,, String, >, (, ), {, @, Override, public, String, apply, (, DependencyInfo, from, ), {, return]
[DependencyInfo, from, ), {, return, from, ., getName, (, ), ;, }, }, ), ;, for, (, String, depsPath, :]
[DependencyInfo, from, ), {, return, from, ., getName, (, ), ;, }, }, ), ;, for, (, String, depsPath, :]
[;, }, }, ), ;, for, (, String, depsPath, :, infosIndex, ., keySet, (, ), ), {, String, path, =]
[}, ), ;, for, (, String, depsPath, :, infosIndex, ., keySet, (, ), ), {, String, path, =, formatPathToDepsFile, (]
[for, (, String, depsPath, :, infosIndex, ., keySet, (, ), ), {, String, path, =, formatPathToDepsFile, (, depsPath, ), ;]
[for, (, String, depsPath, :, infosIndex, ., keySet, (, ), ), {, String, path, =, formatPathToDepsFile, (, depsPath, ), ;]
[:, infosIndex, ., keySet, (, ), ), {, String, path, =, formatPathToDepsFile, (, depsPath, ), ;, out, ., println, (]
[:, infosIndex, ., keySet, (, ), ), {, String, path, =, formatPathToDepsFile, (, depsPath, ), ;, out, ., println, (]
[., keySet, (, ), ), {, String, path, =, formatPathToDepsFile, (, depsPath, ), ;, out, ., println, (, "\n// Included from: ", +]
[), ), {, String, path, =, formatPathToDepsFile, (, depsPath, ), ;, out, ., println, (, "\n// Included from: ", +, path, ), ;]
[{, String, path, =, formatPathToDepsFile, (, depsPath, ), ;, out, ., println, (, "\n// Included from: ", +, path, ), ;, writeDepInfos, (]
[path, =, formatPathToDepsFile, (, depsPath, ), ;, out, ., println, (, "\n// Included from: ", +, path, ), ;, writeDepInfos, (, out, ,]
[path, =, formatPathToDepsFile, (, depsPath, ), ;, out, ., println, (, "\n// Included from: ", +, path, ), ;, writeDepInfos, (, out, ,]
[depsPath, ), ;, out, ., println, (, "\n// Included from: ", +, path, ), ;, writeDepInfos, (, out, ,, infosIndex, ., get, (]
[infosIndex, ., get, (, depsPath, ), ), ;, }, }, }, protected, String, formatPathToDepsFile, (, String, path, ), {, return]
[void, writeDepInfos, (, PrintStream, out, ,, Collection, <, DependencyInfo, >, depInfos, ), throws, IOException, {, for, (, DependencyInfo, depInfo, :]
[>, depInfos, ), throws, IOException, {, for, (, DependencyInfo, depInfo, :, depInfos, ), {, Collection, <, String, >, provides, =]
[>, depInfos, ), throws, IOException, {, for, (, DependencyInfo, depInfo, :, depInfos, ), {, Collection, <, String, >, provides, =]
[), {, Collection, <, String, >, provides, =, depInfo, ., getProvides, (, ), ;, Collection, <, String, >, requires, =]
[), {, Collection, <, String, >, provides, =, depInfo, ., getProvides, (, ), ;, Collection, <, String, >, requires, =]
[provides, =, depInfo, ., getProvides, (, ), ;, Collection, <, String, >, requires, =, depInfo, ., getRequires, (, ), ;]
[provides, =, depInfo, ., getProvides, (, ), ;, Collection, <, String, >, requires, =, depInfo, ., getRequires, (, ), ;]
[getProvides, (, ), ;, Collection, <, String, >, requires, =, depInfo, ., getRequires, (, ), ;, out, ., print, (]
[getProvides, (, ), ;, Collection, <, String, >, requires, =, depInfo, ., getRequires, (, ), ;, out, ., print, (]
[getProvides, (, ), ;, Collection, <, String, >, requires, =, depInfo, ., getRequires, (, ), ;, out, ., print, (]
[), ;, Collection, <, String, >, requires, =, depInfo, ., getRequires, (, ), ;, out, ., print, (, "goog.addDependency('", +]
[), ;, Collection, <, String, >, requires, =, depInfo, ., getRequires, (, ), ;, out, ., print, (, "goog.addDependency('", +]
[requires, =, depInfo, ., getRequires, (, ), ;, out, ., print, (, "goog.addDependency('", +, depInfo, ., getPathRelativeToClosureBase, (, ), +]
[., getRequires, (, ), ;, out, ., print, (, "goog.addDependency('", +, depInfo, ., getPathRelativeToClosureBase, (, ), +, "', ", ), ;]
[(, ), ;, out, ., print, (, "goog.addDependency('", +, depInfo, ., getPathRelativeToClosureBase, (, ), +, "', ", ), ;, writeJsArray, (]
[;, out, ., print, (, "goog.addDependency('", +, depInfo, ., getPathRelativeToClosureBase, (, ), +, "', ", ), ;, writeJsArray, (, out, ,]
[print, (, "goog.addDependency('", +, depInfo, ., getPathRelativeToClosureBase, (, ), +, "', ", ), ;, writeJsArray, (, out, ,, provides, ), ;]
[print, (, "goog.addDependency('", +, depInfo, ., getPathRelativeToClosureBase, (, ), +, "', ", ), ;, writeJsArray, (, out, ,, provides, ), ;]
[depInfo, ., getPathRelativeToClosureBase, (, ), +, "', ", ), ;, writeJsArray, (, out, ,, provides, ), ;, out, ., print, (]
[(, ), +, "', ", ), ;, writeJsArray, (, out, ,, provides, ), ;, out, ., print, (, ", ", ), ;]
[+, "', ", ), ;, writeJsArray, (, out, ,, provides, ), ;, out, ., print, (, ", ", ), ;, writeJsArray, (]
[), ;, writeJsArray, (, out, ,, provides, ), ;, out, ., print, (, ", ", ), ;, writeJsArray, (, out, ,]
[(, out, ,, provides, ), ;, out, ., print, (, ", ", ), ;, writeJsArray, (, out, ,, requires, ), ;]
[(, out, ,, provides, ), ;, out, ., print, (, ", ", ), ;, writeJsArray, (, out, ,, requires, ), ;]
[), ;, out, ., print, (, ", ", ), ;, writeJsArray, (, out, ,, requires, ), ;, out, ., println, (]
[;, }, }, private, static, void, writeJsArray, (, PrintStream, out, ,, Collection, <, String, >, values, ), {, if, (]
[;, }, }, private, static, void, writeJsArray, (, PrintStream, out, ,, Collection, <, String, >, values, ), {, if, (]
[(, PrintStream, out, ,, Collection, <, String, >, values, ), {, if, (, values, ., isEmpty, (, ), ), {]
[(, PrintStream, out, ,, Collection, <, String, >, values, ), {, if, (, values, ., isEmpty, (, ), ), {]
[Collection, <, String, >, values, ), {, if, (, values, ., isEmpty, (, ), ), {, out, ., print, (]
[{, if, (, values, ., isEmpty, (, ), ), {, out, ., print, (, "[]", ), ;, }, else, {]
[{, if, (, values, ., isEmpty, (, ), ), {, out, ., print, (, "[]", ), ;, }, else, {]
[., isEmpty, (, ), ), {, out, ., print, (, "[]", ), ;, }, else, {, out, ., print, (]
[), ), {, out, ., print, (, "[]", ), ;, }, else, {, out, ., print, (, "['", ), ;]
[), ), {, out, ., print, (, "[]", ), ;, }, else, {, out, ., print, (, "['", ), ;]
[., print, (, "[]", ), ;, }, else, {, out, ., print, (, "['", ), ;, out, ., print, (]
[., print, (, "[]", ), ;, }, else, {, out, ., print, (, "['", ), ;, out, ., print, (]
[., print, (, "[]", ), ;, }, else, {, out, ., print, (, "['", ), ;, out, ., print, (]
[), ;, }, else, {, out, ., print, (, "['", ), ;, out, ., print, (, Joiner, ., on, (]
[out, ., print, (, "['", ), ;, out, ., print, (, Joiner, ., on, (, "', '", ), ., join, (]
["['", ), ;, out, ., print, (, Joiner, ., on, (, "', '", ), ., join, (, values, ), ), ;]
["['", ), ;, out, ., print, (, Joiner, ., on, (, "', '", ), ., join, (, values, ), ), ;]
[., print, (, Joiner, ., on, (, "', '", ), ., join, (, values, ), ), ;, out, ., print, (]
[static, List, <, SourceFile, >, createSourceFilesFromPaths, (, Collection, <, String, >, paths, ), {, List, <, SourceFile, >, files, =]
[static, List, <, SourceFile, >, createSourceFilesFromPaths, (, Collection, <, String, >, paths, ), {, List, <, SourceFile, >, files, =]
[paths, ), {, List, <, SourceFile, >, files, =, Lists, ., newArrayList, (, ), ;, for, (, String, path, :]
[List, <, SourceFile, >, files, =, Lists, ., newArrayList, (, ), ;, for, (, String, path, :, paths, ), {]
[List, <, SourceFile, >, files, =, Lists, ., newArrayList, (, ), ;, for, (, String, path, :, paths, ), {]
[files, =, Lists, ., newArrayList, (, ), ;, for, (, String, path, :, paths, ), {, files, ., add, (]
[files, =, Lists, ., newArrayList, (, ), ;, for, (, String, path, :, paths, ), {, files, ., add, (]
[newArrayList, (, ), ;, for, (, String, path, :, paths, ), {, files, ., add, (, SourceFile, ., fromFile, (]
[String, path, :, paths, ), {, files, ., add, (, SourceFile, ., fromFile, (, path, ), ), ;, }, return]
[), ;, }, return, files, ;, }, static, List, <, SourceFile, >, createSourceFilesFromPaths, (, String, ..., paths, ), {, return]
[}, return, files, ;, }, static, List, <, SourceFile, >, createSourceFilesFromPaths, (, String, ..., paths, ), {, return, createSourceFilesFromPaths, (]
[}, return, files, ;, }, static, List, <, SourceFile, >, createSourceFilesFromPaths, (, String, ..., paths, ), {, return, createSourceFilesFromPaths, (]
[}, static, List, <, SourceFile, >, createSourceFilesFromPaths, (, String, ..., paths, ), {, return, createSourceFilesFromPaths, (, Arrays, ., asList, (]
