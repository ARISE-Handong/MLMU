[=, compiler, ;, functions, =, Maps, ., newHashMap, (, ), ;, }, @, Override, public, void, process, (, Node, externs]
[., compiler, =, compiler, ;, functions, =, Maps, ., newHashMap, (, ), ;, }, @, Override, public, void, process, (]
[;, functions, =, Maps, ., newHashMap, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[=, Maps, ., newHashMap, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[., newHashMap, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, for, (, Entry, <, JSModule, ,, List, <, Node, >, >, entry, :, functions, ., entrySet, (, ), )]
[., traverse, (, compiler, ,, root, ,, this, ), ;, for, (, Entry, <, JSModule, ,, List, <, Node, >]
[,, root, ,, this, ), ;, for, (, Entry, <, JSModule, ,, List, <, Node, >, >, entry, :, functions]
[,, this, ), ;, for, (, Entry, <, JSModule, ,, List, <, Node, >, >, entry, :, functions, ., entrySet]
[), ;, for, (, Entry, <, JSModule, ,, List, <, Node, >, >, entry, :, functions, ., entrySet, (, )]
[), {, JSModule, module, =, entry, ., getKey, (, ), ;, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, module, )]
[., entrySet, (, ), ), {, JSModule, module, =, entry, ., getKey, (, ), ;, Node, addingRoot, =, compiler, .]
[;, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;, for, (, Node, n, :, Lists, ., reverse, (]
[., getKey, (, ), ;, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;, for, (, Node, n, :]
[;, for, (, Node, n, :, Lists, ., reverse, (, entry, ., getValue, (, ), ), ), {, addingRoot, .]
[., getNodeForCodeInsertion, (, module, ), ;, for, (, Node, n, :, Lists, ., reverse, (, entry, ., getValue, (, )]
[), ;, for, (, Node, n, :, Lists, ., reverse, (, entry, ., getValue, (, ), ), ), {, addingRoot]
[), {, addingRoot, ., addChildToFront, (, n, ), ;, }, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t]
[., reverse, (, entry, ., getValue, (, ), ), ), {, addingRoot, ., addChildToFront, (, n, ), ;, }, }]
[), ), {, addingRoot, ., addChildToFront, (, n, ), ;, }, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal]
[., getValue, (, ), ), ), {, addingRoot, ., addChildToFront, (, n, ), ;, }, }, }, @, Override, public]
[;, }, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., addChildToFront, (, n, ), ;, }, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n]
[), ;, }, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[;, return, gramps, ==, null, ||, !, gramps, ., isScript, (, ), ;, }, @, Override, public, void, visit, (]
[., getAncestor, (, 2, ), ;, return, gramps, ==, null, ||, !, gramps, ., isScript, (, ), ;, }, @]
[), ;, return, gramps, ==, null, ||, !, gramps, ., isScript, (, ), ;, }, @, Override, public, void, visit]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[||, !, gramps, ., isScript, (, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[==, null, ||, !, gramps, ., isScript, (, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[||, !, gramps, ., isScript, (, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[., isScript, (, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[), {, return, ;, }, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, parent, ., removeChild, (, n]
[||, !, parent, ., isScript, (, ), ), {, return, ;, }, if, (, NodeUtil, ., isFunctionDeclaration, (, n, )]
[==, null, ||, !, parent, ., isScript, (, ), ), {, return, ;, }, if, (, NodeUtil, ., isFunctionDeclaration, (]
[||, !, parent, ., isScript, (, ), ), {, return, ;, }, if, (, NodeUtil, ., isFunctionDeclaration, (, n, )]
[), {, return, ;, }, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, parent, ., removeChild, (, n]
[), {, return, ;, }, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, parent, ., removeChild, (, n]
[., isScript, (, ), ), {, return, ;, }, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, parent]
[), {, parent, ., removeChild, (, n, ), ;, compiler, ., reportCodeChange, (, ), ;, JSModule, module, =, t, .]
[., isFunctionDeclaration, (, n, ), ), {, parent, ., removeChild, (, n, ), ;, compiler, ., reportCodeChange, (, ), ;]
[), ), {, parent, ., removeChild, (, n, ), ;, compiler, ., reportCodeChange, (, ), ;, JSModule, module, =, t]
[;, compiler, ., reportCodeChange, (, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, List, <, Node, >]
[., removeChild, (, n, ), ;, compiler, ., reportCodeChange, (, ), ;, JSModule, module, =, t, ., getModule, (, )]
[), ;, compiler, ., reportCodeChange, (, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, List, <, Node]
[;, JSModule, module, =, t, ., getModule, (, ), ;, List, <, Node, >, moduleFunctions, =, functions, ., get, (]
[., reportCodeChange, (, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, List, <, Node, >, moduleFunctions, =]
[;, List, <, Node, >, moduleFunctions, =, functions, ., get, (, module, ), ;, if, (, moduleFunctions, ==, null, )]
[., getModule, (, ), ;, List, <, Node, >, moduleFunctions, =, functions, ., get, (, module, ), ;, if, (]
[;, if, (, moduleFunctions, ==, null, ), {, moduleFunctions, =, Lists, ., newArrayList, (, ), ;, functions, ., put, (]
[., get, (, module, ), ;, if, (, moduleFunctions, ==, null, ), {, moduleFunctions, =, Lists, ., newArrayList, (, )]
[), ;, if, (, moduleFunctions, ==, null, ), {, moduleFunctions, =, Lists, ., newArrayList, (, ), ;, functions, ., put]
[), {, moduleFunctions, =, Lists, ., newArrayList, (, ), ;, functions, ., put, (, module, ,, moduleFunctions, ), ;, }]
[==, null, ), {, moduleFunctions, =, Lists, ., newArrayList, (, ), ;, functions, ., put, (, module, ,, moduleFunctions, )]
[), {, moduleFunctions, =, Lists, ., newArrayList, (, ), ;, functions, ., put, (, module, ,, moduleFunctions, ), ;, }]
[=, Lists, ., newArrayList, (, ), ;, functions, ., put, (, module, ,, moduleFunctions, ), ;, }, moduleFunctions, ., add]
[;, functions, ., put, (, module, ,, moduleFunctions, ), ;, }, moduleFunctions, ., add, (, n, ), ;, }, }]
[., newArrayList, (, ), ;, functions, ., put, (, module, ,, moduleFunctions, ), ;, }, moduleFunctions, ., add, (, n]
[;, }, moduleFunctions, ., add, (, n, ), ;, }, }, }]
[., put, (, module, ,, moduleFunctions, ), ;, }, moduleFunctions, ., add, (, n, ), ;, }, }, }]
[,, moduleFunctions, ), ;, }, moduleFunctions, ., add, (, n, ), ;, }, }, }]
[), ;, }, moduleFunctions, ., add, (, n, ), ;, }, }, }]
[;, }, }, }]
[., add, (, n, ), ;, }, }, }]
[), ;, }, }, }]
