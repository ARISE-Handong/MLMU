[., List, ;, import, java, ., util, ., Map, ;, public, class, EnumUtils, {, private, static, final, String, NULL_ELEMENTS_NOT_PERMITTED, =]
[Map, ;, public, class, EnumUtils, {, private, static, final, String, NULL_ELEMENTS_NOT_PERMITTED, =, "null elements not permitted", ;, private, static, final, String, CANNOT_STORE_S_S_VALUES_IN_S_BITS, =]
[final, String, NULL_ELEMENTS_NOT_PERMITTED, =, "null elements not permitted", ;, private, static, final, String, CANNOT_STORE_S_S_VALUES_IN_S_BITS, =, "Cannot store %s %s values in %s bits", ;, private, static, final, String, S_DOES_NOT_SEEM_TO_BE_AN_ENUM_TYPE, =]
[final, String, CANNOT_STORE_S_S_VALUES_IN_S_BITS, =, "Cannot store %s %s values in %s bits", ;, private, static, final, String, S_DOES_NOT_SEEM_TO_BE_AN_ENUM_TYPE, =, "%s does not seem to be an Enum type", ;, private, static, final, String, ENUM_CLASS_MUST_BE_DEFINED, =]
[>, getEnumMap, (, final, Class, <, E, >, enumClass, ), {, final, Map, <, String, ,, E, >, map, =]
[E, >, map, =, new, LinkedHashMap, <, String, ,, E, >, (, ), ;, for, (, final, E, e, :]
[E, >, map, =, new, LinkedHashMap, <, String, ,, E, >, (, ), ;, for, (, final, E, e, :]
[String, ,, E, >, (, ), ;, for, (, final, E, e, :, enumClass, ., getEnumConstants, (, ), ), {]
[String, ,, E, >, (, ), ;, for, (, final, E, e, :, enumClass, ., getEnumConstants, (, ), ), {]
[(, ), ;, for, (, final, E, e, :, enumClass, ., getEnumConstants, (, ), ), {, map, ., put, (]
[(, ), ;, for, (, final, E, e, :, enumClass, ., getEnumConstants, (, ), ), {, map, ., put, (]
[E, e, :, enumClass, ., getEnumConstants, (, ), ), {, map, ., put, (, e, ., name, (, ), ,]
[getEnumConstants, (, ), ), {, map, ., put, (, e, ., name, (, ), ,, e, ), ;, }, return]
[Enum, <, E, >, >, List, <, E, >, getEnumList, (, final, Class, <, E, >, enumClass, ), {, return]
[<, E, >, getEnumList, (, final, Class, <, E, >, enumClass, ), {, return, new, ArrayList, <, E, >, (]
[<, E, >, getEnumList, (, final, Class, <, E, >, enumClass, ), {, return, new, ArrayList, <, E, >, (]
[(, final, Class, <, E, >, enumClass, ), {, return, new, ArrayList, <, E, >, (, Arrays, ., asList, (]
[(, final, Class, <, E, >, enumClass, ), {, return, new, ArrayList, <, E, >, (, Arrays, ., asList, (]
[E, >, >, boolean, isValidEnum, (, final, Class, <, E, >, enumClass, ,, final, String, enumName, ), {, if, (]
[E, >, >, boolean, isValidEnum, (, final, Class, <, E, >, enumClass, ,, final, String, enumName, ), {, if, (]
[>, boolean, isValidEnum, (, final, Class, <, E, >, enumClass, ,, final, String, enumName, ), {, if, (, enumName, ==]
[final, Class, <, E, >, enumClass, ,, final, String, enumName, ), {, if, (, enumName, ==, null, ), {, return]
[enumClass, ,, final, String, enumName, ), {, if, (, enumName, ==, null, ), {, return, false, ;, }, try, {]
[enumClass, ,, final, String, enumName, ), {, if, (, enumName, ==, null, ), {, return, false, ;, }, try, {]
[enumName, ), {, if, (, enumName, ==, null, ), {, return, false, ;, }, try, {, Enum, ., valueOf, (]
[{, if, (, enumName, ==, null, ), {, return, false, ;, }, try, {, Enum, ., valueOf, (, enumClass, ,]
[==, null, ), {, return, false, ;, }, try, {, Enum, ., valueOf, (, enumClass, ,, enumName, ), ;, return]
[., valueOf, (, enumClass, ,, enumName, ), ;, return, true, ;, }, catch, (, final, IllegalArgumentException, ex, ), {, return]
[E, >, >, E, getEnum, (, final, Class, <, E, >, enumClass, ,, final, String, enumName, ), {, if, (]
[E, >, >, E, getEnum, (, final, Class, <, E, >, enumClass, ,, final, String, enumName, ), {, if, (]
[>, E, getEnum, (, final, Class, <, E, >, enumClass, ,, final, String, enumName, ), {, if, (, enumName, ==]
[final, Class, <, E, >, enumClass, ,, final, String, enumName, ), {, if, (, enumName, ==, null, ), {, return]
[,, final, String, enumName, ), {, if, (, enumName, ==, null, ), {, return, null, ;, }, try, {, return]
[,, final, String, enumName, ), {, if, (, enumName, ==, null, ), {, return, null, ;, }, try, {, return]
[), {, if, (, enumName, ==, null, ), {, return, null, ;, }, try, {, return, Enum, ., valueOf, (]
[if, (, enumName, ==, null, ), {, return, null, ;, }, try, {, return, Enum, ., valueOf, (, enumClass, ,]
[{, return, Enum, ., valueOf, (, enumClass, ,, enumName, ), ;, }, catch, (, final, IllegalArgumentException, ex, ), {, return]
[>, >, long, generateBitVector, (, final, Class, <, E, >, enumClass, ,, final, Iterable, <, E, >, values, ), {]
[long, generateBitVector, (, final, Class, <, E, >, enumClass, ,, final, Iterable, <, E, >, values, ), {, checkBitVectorable, (]
[final, Class, <, E, >, enumClass, ,, final, Iterable, <, E, >, values, ), {, checkBitVectorable, (, enumClass, ), ;]
[final, Class, <, E, >, enumClass, ,, final, Iterable, <, E, >, values, ), {, checkBitVectorable, (, enumClass, ), ;]
[>, enumClass, ,, final, Iterable, <, E, >, values, ), {, checkBitVectorable, (, enumClass, ), ;, Validate, ., notNull, (]
[E, >, values, ), {, checkBitVectorable, (, enumClass, ), ;, Validate, ., notNull, (, values, ), ;, long, total, =]
[), ;, Validate, ., notNull, (, values, ), ;, long, total, =, 0, ;, for, (, final, E, constant, :]
[., notNull, (, values, ), ;, long, total, =, 0, ;, for, (, final, E, constant, :, values, ), {]
[., notNull, (, values, ), ;, long, total, =, 0, ;, for, (, final, E, constant, :, values, ), {]
[), ;, long, total, =, 0, ;, for, (, final, E, constant, :, values, ), {, Validate, ., isTrue, (]
[), ;, long, total, =, 0, ;, for, (, final, E, constant, :, values, ), {, Validate, ., isTrue, (]
[long, total, =, 0, ;, for, (, final, E, constant, :, values, ), {, Validate, ., isTrue, (, constant, !=]
[=, 0, ;, for, (, final, E, constant, :, values, ), {, Validate, ., isTrue, (, constant, !=, null, ,]
[for, (, final, E, constant, :, values, ), {, Validate, ., isTrue, (, constant, !=, null, ,, NULL_ELEMENTS_NOT_PERMITTED, ), ;]
[final, E, constant, :, values, ), {, Validate, ., isTrue, (, constant, !=, null, ,, NULL_ELEMENTS_NOT_PERMITTED, ), ;, total, |=]
[final, E, constant, :, values, ), {, Validate, ., isTrue, (, constant, !=, null, ,, NULL_ELEMENTS_NOT_PERMITTED, ), ;, total, |=]
[constant, :, values, ), {, Validate, ., isTrue, (, constant, !=, null, ,, NULL_ELEMENTS_NOT_PERMITTED, ), ;, total, |=, 1, <<]
[constant, :, values, ), {, Validate, ., isTrue, (, constant, !=, null, ,, NULL_ELEMENTS_NOT_PERMITTED, ), ;, total, |=, 1, <<]
[(, constant, !=, null, ,, NULL_ELEMENTS_NOT_PERMITTED, ), ;, total, |=, 1, <<, constant, ., ordinal, (, ), ;, }, return]
[long, [, ], generateBitVectors, (, final, Class, <, E, >, enumClass, ,, final, Iterable, <, E, >, values, ), {]
[], generateBitVectors, (, final, Class, <, E, >, enumClass, ,, final, Iterable, <, E, >, values, ), {, asEnum, (]
[final, Class, <, E, >, enumClass, ,, final, Iterable, <, E, >, values, ), {, asEnum, (, enumClass, ), ;]
[final, Class, <, E, >, enumClass, ,, final, Iterable, <, E, >, values, ), {, asEnum, (, enumClass, ), ;]
[>, enumClass, ,, final, Iterable, <, E, >, values, ), {, asEnum, (, enumClass, ), ;, Validate, ., notNull, (]
[{, asEnum, (, enumClass, ), ;, Validate, ., notNull, (, values, ), ;, final, EnumSet, <, E, >, condensed, =]
[{, asEnum, (, enumClass, ), ;, Validate, ., notNull, (, values, ), ;, final, EnumSet, <, E, >, condensed, =]
[), ;, Validate, ., notNull, (, values, ), ;, final, EnumSet, <, E, >, condensed, =, EnumSet, ., noneOf, (]
[final, EnumSet, <, E, >, condensed, =, EnumSet, ., noneOf, (, enumClass, ), ;, for, (, final, E, constant, :]
[E, >, condensed, =, EnumSet, ., noneOf, (, enumClass, ), ;, for, (, final, E, constant, :, values, ), {]
[E, >, condensed, =, EnumSet, ., noneOf, (, enumClass, ), ;, for, (, final, E, constant, :, values, ), {]
[EnumSet, ., noneOf, (, enumClass, ), ;, for, (, final, E, constant, :, values, ), {, Validate, ., isTrue, (]
[EnumSet, ., noneOf, (, enumClass, ), ;, for, (, final, E, constant, :, values, ), {, Validate, ., isTrue, (]
[noneOf, (, enumClass, ), ;, for, (, final, E, constant, :, values, ), {, Validate, ., isTrue, (, constant, !=]
[enumClass, ), ;, for, (, final, E, constant, :, values, ), {, Validate, ., isTrue, (, constant, !=, null, ,]
[for, (, final, E, constant, :, values, ), {, Validate, ., isTrue, (, constant, !=, null, ,, NULL_ELEMENTS_NOT_PERMITTED, ), ;]
[for, (, final, E, constant, :, values, ), {, Validate, ., isTrue, (, constant, !=, null, ,, NULL_ELEMENTS_NOT_PERMITTED, ), ;]
[constant, :, values, ), {, Validate, ., isTrue, (, constant, !=, null, ,, NULL_ELEMENTS_NOT_PERMITTED, ), ;, condensed, ., add, (]
[!=, null, ,, NULL_ELEMENTS_NOT_PERMITTED, ), ;, condensed, ., add, (, constant, ), ;, }, final, long, [, ], result, =]
[NULL_ELEMENTS_NOT_PERMITTED, ), ;, condensed, ., add, (, constant, ), ;, }, final, long, [, ], result, =, new, long, []
[NULL_ELEMENTS_NOT_PERMITTED, ), ;, condensed, ., add, (, constant, ), ;, }, final, long, [, ], result, =, new, long, []
[NULL_ELEMENTS_NOT_PERMITTED, ), ;, condensed, ., add, (, constant, ), ;, }, final, long, [, ], result, =, new, long, []
[), ;, condensed, ., add, (, constant, ), ;, }, final, long, [, ], result, =, new, long, [, (]
[), ;, condensed, ., add, (, constant, ), ;, }, final, long, [, ], result, =, new, long, [, (]
[), ;, condensed, ., add, (, constant, ), ;, }, final, long, [, ], result, =, new, long, [, (]
[), ;, condensed, ., add, (, constant, ), ;, }, final, long, [, ], result, =, new, long, [, (]
[;, }, final, long, [, ], result, =, new, long, [, (, enumClass, ., getEnumConstants, (, ), ., length, -]
[long, [, ], result, =, new, long, [, (, enumClass, ., getEnumConstants, (, ), ., length, -, 1, ), /]
[long, [, ], result, =, new, long, [, (, enumClass, ., getEnumConstants, (, ), ., length, -, 1, ), /]
[=, new, long, [, (, enumClass, ., getEnumConstants, (, ), ., length, -, 1, ), /, Long, ., SIZE, +]
[), ., length, -, 1, ), /, Long, ., SIZE, +, 1, ], ;, for, (, final, E, value, :]
[-, 1, ), /, Long, ., SIZE, +, 1, ], ;, for, (, final, E, value, :, condensed, ), {]
[-, 1, ), /, Long, ., SIZE, +, 1, ], ;, for, (, final, E, value, :, condensed, ), {]
[), /, Long, ., SIZE, +, 1, ], ;, for, (, final, E, value, :, condensed, ), {, result, []
[), /, Long, ., SIZE, +, 1, ], ;, for, (, final, E, value, :, condensed, ), {, result, []
[), /, Long, ., SIZE, +, 1, ], ;, for, (, final, E, value, :, condensed, ), {, result, []
[1, ], ;, for, (, final, E, value, :, condensed, ), {, result, [, value, ., ordinal, (, ), /]
[1, ], ;, for, (, final, E, value, :, condensed, ), {, result, [, value, ., ordinal, (, ), /]
[final, E, value, :, condensed, ), {, result, [, value, ., ordinal, (, ), /, Long, ., SIZE, ], |=]
[final, E, value, :, condensed, ), {, result, [, value, ., ordinal, (, ), /, Long, ., SIZE, ], |=]
[value, :, condensed, ), {, result, [, value, ., ordinal, (, ), /, Long, ., SIZE, ], |=, 1, <<]
[:, condensed, ), {, result, [, value, ., ordinal, (, ), /, Long, ., SIZE, ], |=, 1, <<, (]
[:, condensed, ), {, result, [, value, ., ordinal, (, ), /, Long, ., SIZE, ], |=, 1, <<, (]
[:, condensed, ), {, result, [, value, ., ordinal, (, ), /, Long, ., SIZE, ], |=, 1, <<, (]
[value, ., ordinal, (, ), /, Long, ., SIZE, ], |=, 1, <<, (, value, ., ordinal, (, ), %]
[value, ., ordinal, (, ), /, Long, ., SIZE, ], |=, 1, <<, (, value, ., ordinal, (, ), %]
[Long, ., SIZE, ], |=, 1, <<, (, value, ., ordinal, (, ), %, Long, ., SIZE, ), ;, }]
[Long, ., SIZE, ], |=, 1, <<, (, value, ., ordinal, (, ), %, Long, ., SIZE, ), ;, }]
[|=, 1, <<, (, value, ., ordinal, (, ), %, Long, ., SIZE, ), ;, }, ArrayUtils, ., reverse, (]
[value, ., ordinal, (, ), %, Long, ., SIZE, ), ;, }, ArrayUtils, ., reverse, (, result, ), ;, return]
[<, E, >, >, long, generateBitVector, (, final, Class, <, E, >, enumClass, ,, final, E, ..., values, ), {]
[<, E, >, >, long, generateBitVector, (, final, Class, <, E, >, enumClass, ,, final, E, ..., values, ), {]
[long, generateBitVector, (, final, Class, <, E, >, enumClass, ,, final, E, ..., values, ), {, Validate, ., noNullElements, (]
[Class, <, E, >, enumClass, ,, final, E, ..., values, ), {, Validate, ., noNullElements, (, values, ), ;, return]
[E, >, enumClass, ,, final, E, ..., values, ), {, Validate, ., noNullElements, (, values, ), ;, return, generateBitVector, (]
[enumClass, ,, final, E, ..., values, ), {, Validate, ., noNullElements, (, values, ), ;, return, generateBitVector, (, enumClass, ,]
[enumClass, ,, final, E, ..., values, ), {, Validate, ., noNullElements, (, values, ), ;, return, generateBitVector, (, enumClass, ,]
[{, Validate, ., noNullElements, (, values, ), ;, return, generateBitVector, (, enumClass, ,, Arrays, ., <, E, >, asList, (]
[>, >, long, [, ], generateBitVectors, (, final, Class, <, E, >, enumClass, ,, final, E, ..., values, ), {]
[long, [, ], generateBitVectors, (, final, Class, <, E, >, enumClass, ,, final, E, ..., values, ), {, asEnum, (]
[generateBitVectors, (, final, Class, <, E, >, enumClass, ,, final, E, ..., values, ), {, asEnum, (, enumClass, ), ;]
[generateBitVectors, (, final, Class, <, E, >, enumClass, ,, final, E, ..., values, ), {, asEnum, (, enumClass, ), ;]
[<, E, >, enumClass, ,, final, E, ..., values, ), {, asEnum, (, enumClass, ), ;, Validate, ., noNullElements, (]
[{, asEnum, (, enumClass, ), ;, Validate, ., noNullElements, (, values, ), ;, final, EnumSet, <, E, >, condensed, =]
[{, asEnum, (, enumClass, ), ;, Validate, ., noNullElements, (, values, ), ;, final, EnumSet, <, E, >, condensed, =]
[), ;, Validate, ., noNullElements, (, values, ), ;, final, EnumSet, <, E, >, condensed, =, EnumSet, ., noneOf, (]
[., noNullElements, (, values, ), ;, final, EnumSet, <, E, >, condensed, =, EnumSet, ., noneOf, (, enumClass, ), ;]
[., noNullElements, (, values, ), ;, final, EnumSet, <, E, >, condensed, =, EnumSet, ., noneOf, (, enumClass, ), ;]
[), ;, final, EnumSet, <, E, >, condensed, =, EnumSet, ., noneOf, (, enumClass, ), ;, Collections, ., addAll, (]
[final, EnumSet, <, E, >, condensed, =, EnumSet, ., noneOf, (, enumClass, ), ;, Collections, ., addAll, (, condensed, ,]
[noneOf, (, enumClass, ), ;, Collections, ., addAll, (, condensed, ,, values, ), ;, final, long, [, ], result, =]
[), ;, Collections, ., addAll, (, condensed, ,, values, ), ;, final, long, [, ], result, =, new, long, []
[), ;, Collections, ., addAll, (, condensed, ,, values, ), ;, final, long, [, ], result, =, new, long, []
[), ;, Collections, ., addAll, (, condensed, ,, values, ), ;, final, long, [, ], result, =, new, long, []
[;, Collections, ., addAll, (, condensed, ,, values, ), ;, final, long, [, ], result, =, new, long, [, (]
[;, Collections, ., addAll, (, condensed, ,, values, ), ;, final, long, [, ], result, =, new, long, [, (]
[;, Collections, ., addAll, (, condensed, ,, values, ), ;, final, long, [, ], result, =, new, long, [, (]
[;, Collections, ., addAll, (, condensed, ,, values, ), ;, final, long, [, ], result, =, new, long, [, (]
[), ;, final, long, [, ], result, =, new, long, [, (, enumClass, ., getEnumConstants, (, ), ., length, -]
[long, [, ], result, =, new, long, [, (, enumClass, ., getEnumConstants, (, ), ., length, -, 1, ), /]
[long, [, ], result, =, new, long, [, (, enumClass, ., getEnumConstants, (, ), ., length, -, 1, ), /]
[=, new, long, [, (, enumClass, ., getEnumConstants, (, ), ., length, -, 1, ), /, Long, ., SIZE, +]
[), ., length, -, 1, ), /, Long, ., SIZE, +, 1, ], ;, for, (, final, E, value, :]
[-, 1, ), /, Long, ., SIZE, +, 1, ], ;, for, (, final, E, value, :, condensed, ), {]
[-, 1, ), /, Long, ., SIZE, +, 1, ], ;, for, (, final, E, value, :, condensed, ), {]
[), /, Long, ., SIZE, +, 1, ], ;, for, (, final, E, value, :, condensed, ), {, result, []
[), /, Long, ., SIZE, +, 1, ], ;, for, (, final, E, value, :, condensed, ), {, result, []
[), /, Long, ., SIZE, +, 1, ], ;, for, (, final, E, value, :, condensed, ), {, result, []
[1, ], ;, for, (, final, E, value, :, condensed, ), {, result, [, value, ., ordinal, (, ), /]
[1, ], ;, for, (, final, E, value, :, condensed, ), {, result, [, value, ., ordinal, (, ), /]
[final, E, value, :, condensed, ), {, result, [, value, ., ordinal, (, ), /, Long, ., SIZE, ], |=]
[final, E, value, :, condensed, ), {, result, [, value, ., ordinal, (, ), /, Long, ., SIZE, ], |=]
[value, :, condensed, ), {, result, [, value, ., ordinal, (, ), /, Long, ., SIZE, ], |=, 1, <<]
[:, condensed, ), {, result, [, value, ., ordinal, (, ), /, Long, ., SIZE, ], |=, 1, <<, (]
[:, condensed, ), {, result, [, value, ., ordinal, (, ), /, Long, ., SIZE, ], |=, 1, <<, (]
[:, condensed, ), {, result, [, value, ., ordinal, (, ), /, Long, ., SIZE, ], |=, 1, <<, (]
[value, ., ordinal, (, ), /, Long, ., SIZE, ], |=, 1, <<, (, value, ., ordinal, (, ), %]
[value, ., ordinal, (, ), /, Long, ., SIZE, ], |=, 1, <<, (, value, ., ordinal, (, ), %]
[Long, ., SIZE, ], |=, 1, <<, (, value, ., ordinal, (, ), %, Long, ., SIZE, ), ;, }]
[Long, ., SIZE, ], |=, 1, <<, (, value, ., ordinal, (, ), %, Long, ., SIZE, ), ;, }]
[|=, 1, <<, (, value, ., ordinal, (, ), %, Long, ., SIZE, ), ;, }, ArrayUtils, ., reverse, (]
[value, ., ordinal, (, ), %, Long, ., SIZE, ), ;, }, ArrayUtils, ., reverse, (, result, ), ;, return]
[>, >, EnumSet, <, E, >, processBitVector, (, final, Class, <, E, >, enumClass, ,, final, long, value, ), {]
[>, >, EnumSet, <, E, >, processBitVector, (, final, Class, <, E, >, enumClass, ,, final, long, value, ), {]
[EnumSet, <, E, >, processBitVector, (, final, Class, <, E, >, enumClass, ,, final, long, value, ), {, checkBitVectorable, (]
[<, E, >, enumClass, ,, final, long, value, ), {, checkBitVectorable, (, enumClass, ), ., getEnumConstants, (, ), ;, return]
[>, enumClass, ,, final, long, value, ), {, checkBitVectorable, (, enumClass, ), ., getEnumConstants, (, ), ;, return, processBitVectors, (]
[,, final, long, value, ), {, checkBitVectorable, (, enumClass, ), ., getEnumConstants, (, ), ;, return, processBitVectors, (, enumClass, ,]
[(, final, Class, <, E, >, enumClass, ,, long, ..., values, ), {, final, EnumSet, <, E, >, results, =]
[(, final, Class, <, E, >, enumClass, ,, long, ..., values, ), {, final, EnumSet, <, E, >, results, =]
[E, >, enumClass, ,, long, ..., values, ), {, final, EnumSet, <, E, >, results, =, EnumSet, ., noneOf, (]
[enumClass, ,, long, ..., values, ), {, final, EnumSet, <, E, >, results, =, EnumSet, ., noneOf, (, asEnum, (]
[values, ), {, final, EnumSet, <, E, >, results, =, EnumSet, ., noneOf, (, asEnum, (, enumClass, ), ), ;]
[{, final, EnumSet, <, E, >, results, =, EnumSet, ., noneOf, (, asEnum, (, enumClass, ), ), ;, values, =]
[{, final, EnumSet, <, E, >, results, =, EnumSet, ., noneOf, (, asEnum, (, enumClass, ), ), ;, values, =]
[E, >, results, =, EnumSet, ., noneOf, (, asEnum, (, enumClass, ), ), ;, values, =, ArrayUtils, ., clone, (]
[E, >, results, =, EnumSet, ., noneOf, (, asEnum, (, enumClass, ), ), ;, values, =, ArrayUtils, ., clone, (]
[EnumSet, ., noneOf, (, asEnum, (, enumClass, ), ), ;, values, =, ArrayUtils, ., clone, (, Validate, ., notNull, (]
[asEnum, (, enumClass, ), ), ;, values, =, ArrayUtils, ., clone, (, Validate, ., notNull, (, values, ), ), ;]
[asEnum, (, enumClass, ), ), ;, values, =, ArrayUtils, ., clone, (, Validate, ., notNull, (, values, ), ), ;]
[), ;, values, =, ArrayUtils, ., clone, (, Validate, ., notNull, (, values, ), ), ;, ArrayUtils, ., reverse, (]
[., notNull, (, values, ), ), ;, ArrayUtils, ., reverse, (, values, ), ;, for, (, final, E, constant, :]
[., notNull, (, values, ), ), ;, ArrayUtils, ., reverse, (, values, ), ;, for, (, final, E, constant, :]
[values, ), ;, for, (, final, E, constant, :, enumClass, ., getEnumConstants, (, ), ), {, final, int, block, =]
[values, ), ;, for, (, final, E, constant, :, enumClass, ., getEnumConstants, (, ), ), {, final, int, block, =]
[values, ), ;, for, (, final, E, constant, :, enumClass, ., getEnumConstants, (, ), ), {, final, int, block, =]
[E, constant, :, enumClass, ., getEnumConstants, (, ), ), {, final, int, block, =, constant, ., ordinal, (, ), /]
[E, constant, :, enumClass, ., getEnumConstants, (, ), ), {, final, int, block, =, constant, ., ordinal, (, ), /]
[(, ), ), {, final, int, block, =, constant, ., ordinal, (, ), /, Long, ., SIZE, ;, if, (]
[(, ), ), {, final, int, block, =, constant, ., ordinal, (, ), /, Long, ., SIZE, ;, if, (]
[(, ), ), {, final, int, block, =, constant, ., ordinal, (, ), /, Long, ., SIZE, ;, if, (]
[), {, final, int, block, =, constant, ., ordinal, (, ), /, Long, ., SIZE, ;, if, (, block, <]
[), {, final, int, block, =, constant, ., ordinal, (, ), /, Long, ., SIZE, ;, if, (, block, <]
[block, =, constant, ., ordinal, (, ), /, Long, ., SIZE, ;, if, (, block, <, values, ., length, &&]
[block, =, constant, ., ordinal, (, ), /, Long, ., SIZE, ;, if, (, block, <, values, ., length, &&]
[=, constant, ., ordinal, (, ), /, Long, ., SIZE, ;, if, (, block, <, values, ., length, &&, (]
[=, constant, ., ordinal, (, ), /, Long, ., SIZE, ;, if, (, block, <, values, ., length, &&, (]
[=, constant, ., ordinal, (, ), /, Long, ., SIZE, ;, if, (, block, <, values, ., length, &&, (]
[., ordinal, (, ), /, Long, ., SIZE, ;, if, (, block, <, values, ., length, &&, (, values, []
[), /, Long, ., SIZE, ;, if, (, block, <, values, ., length, &&, (, values, [, block, ], &]
[), /, Long, ., SIZE, ;, if, (, block, <, values, ., length, &&, (, values, [, block, ], &]
[Long, ., SIZE, ;, if, (, block, <, values, ., length, &&, (, values, [, block, ], &, 1, <<]
[., SIZE, ;, if, (, block, <, values, ., length, &&, (, values, [, block, ], &, 1, <<, (]
[., SIZE, ;, if, (, block, <, values, ., length, &&, (, values, [, block, ], &, 1, <<, (]
[., SIZE, ;, if, (, block, <, values, ., length, &&, (, values, [, block, ], &, 1, <<, (]
[<, values, ., length, &&, (, values, [, block, ], &, 1, <<, (, constant, ., ordinal, (, ), %]
[<, values, ., length, &&, (, values, [, block, ], &, 1, <<, (, constant, ., ordinal, (, ), %]
[values, [, block, ], &, 1, <<, (, constant, ., ordinal, (, ), %, Long, ., SIZE, ), ), !=]
[], &, 1, <<, (, constant, ., ordinal, (, ), %, Long, ., SIZE, ), ), !=, 0, ), {]
[], &, 1, <<, (, constant, ., ordinal, (, ), %, Long, ., SIZE, ), ), !=, 0, ), {]
[(, constant, ., ordinal, (, ), %, Long, ., SIZE, ), ), !=, 0, ), {, results, ., add, (]
[%, Long, ., SIZE, ), ), !=, 0, ), {, results, ., add, (, constant, ), ;, }, }, return]
[Class, <, E, >, checkBitVectorable, (, final, Class, <, E, >, enumClass, ), {, final, E, [, ], constants, =]
[Class, <, E, >, checkBitVectorable, (, final, Class, <, E, >, enumClass, ), {, final, E, [, ], constants, =]
[E, >, checkBitVectorable, (, final, Class, <, E, >, enumClass, ), {, final, E, [, ], constants, =, asEnum, (]
[E, >, enumClass, ), {, final, E, [, ], constants, =, asEnum, (, enumClass, ), ., getEnumConstants, (, ), ;]
[E, >, enumClass, ), {, final, E, [, ], constants, =, asEnum, (, enumClass, ), ., getEnumConstants, (, ), ;]
[{, final, E, [, ], constants, =, asEnum, (, enumClass, ), ., getEnumConstants, (, ), ;, Validate, ., isTrue, (]
[{, final, E, [, ], constants, =, asEnum, (, enumClass, ), ., getEnumConstants, (, ), ;, Validate, ., isTrue, (]
[{, final, E, [, ], constants, =, asEnum, (, enumClass, ), ., getEnumConstants, (, ), ;, Validate, ., isTrue, (]
[], constants, =, asEnum, (, enumClass, ), ., getEnumConstants, (, ), ;, Validate, ., isTrue, (, constants, ., length, <=]
[], constants, =, asEnum, (, enumClass, ), ., getEnumConstants, (, ), ;, Validate, ., isTrue, (, constants, ., length, <=]
[(, enumClass, ), ., getEnumConstants, (, ), ;, Validate, ., isTrue, (, constants, ., length, <=, Long, ., SIZE, ,]
[), ., getEnumConstants, (, ), ;, Validate, ., isTrue, (, constants, ., length, <=, Long, ., SIZE, ,, CANNOT_STORE_S_S_VALUES_IN_S_BITS, ,]
[), ., getEnumConstants, (, ), ;, Validate, ., isTrue, (, constants, ., length, <=, Long, ., SIZE, ,, CANNOT_STORE_S_S_VALUES_IN_S_BITS, ,]
[), ;, Validate, ., isTrue, (, constants, ., length, <=, Long, ., SIZE, ,, CANNOT_STORE_S_S_VALUES_IN_S_BITS, ,, constants, ., length, ,]
[), ;, Validate, ., isTrue, (, constants, ., length, <=, Long, ., SIZE, ,, CANNOT_STORE_S_S_VALUES_IN_S_BITS, ,, constants, ., length, ,]
[constants, ., length, <=, Long, ., SIZE, ,, CANNOT_STORE_S_S_VALUES_IN_S_BITS, ,, constants, ., length, ,, enumClass, ., getSimpleName, (, ), ,]
[constants, ., length, <=, Long, ., SIZE, ,, CANNOT_STORE_S_S_VALUES_IN_S_BITS, ,, constants, ., length, ,, enumClass, ., getSimpleName, (, ), ,]
[SIZE, ,, CANNOT_STORE_S_S_VALUES_IN_S_BITS, ,, constants, ., length, ,, enumClass, ., getSimpleName, (, ), ,, Long, ., SIZE, ), ;, return]
[extends, Enum, <, E, >, >, Class, <, E, >, asEnum, (, final, Class, <, E, >, enumClass, ), {]
[extends, Enum, <, E, >, >, Class, <, E, >, asEnum, (, final, Class, <, E, >, enumClass, ), {]
[>, >, Class, <, E, >, asEnum, (, final, Class, <, E, >, enumClass, ), {, Validate, ., notNull, (]
[Class, <, E, >, asEnum, (, final, Class, <, E, >, enumClass, ), {, Validate, ., notNull, (, enumClass, ,]
[>, asEnum, (, final, Class, <, E, >, enumClass, ), {, Validate, ., notNull, (, enumClass, ,, ENUM_CLASS_MUST_BE_DEFINED, ), ;]
[>, asEnum, (, final, Class, <, E, >, enumClass, ), {, Validate, ., notNull, (, enumClass, ,, ENUM_CLASS_MUST_BE_DEFINED, ), ;]
[Class, <, E, >, enumClass, ), {, Validate, ., notNull, (, enumClass, ,, ENUM_CLASS_MUST_BE_DEFINED, ), ;, Validate, ., isTrue, (]
[Class, <, E, >, enumClass, ), {, Validate, ., notNull, (, enumClass, ,, ENUM_CLASS_MUST_BE_DEFINED, ), ;, Validate, ., isTrue, (]
[{, Validate, ., notNull, (, enumClass, ,, ENUM_CLASS_MUST_BE_DEFINED, ), ;, Validate, ., isTrue, (, enumClass, ., isEnum, (, ), ,]
[., notNull, (, enumClass, ,, ENUM_CLASS_MUST_BE_DEFINED, ), ;, Validate, ., isTrue, (, enumClass, ., isEnum, (, ), ,, S_DOES_NOT_SEEM_TO_BE_AN_ENUM_TYPE, ,]
[,, ENUM_CLASS_MUST_BE_DEFINED, ), ;, Validate, ., isTrue, (, enumClass, ., isEnum, (, ), ,, S_DOES_NOT_SEEM_TO_BE_AN_ENUM_TYPE, ,, enumClass, ), ;, return]
