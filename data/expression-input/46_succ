[;, private, List, subCategories, ;, private, Font, subLabelFont, =, new, Font, (, "Tahoma", ,, Font, ., PLAIN, ,, 10, )]
[;, private, List, subCategories, ;, private, Font, subLabelFont, =, new, Font, (, "Tahoma", ,, Font, ., PLAIN, ,, 10, )]
[;, private, transient, Paint, subLabelPaint, =, Color, ., black, ;, public, SubCategoryAxis, (, String, label, ), {, super, (, label]
[,, Font, ., PLAIN, ,, 10, ), ;, private, transient, Paint, subLabelPaint, =, Color, ., black, ;, public, SubCategoryAxis, (]
[,, 10, ), ;, private, transient, Paint, subLabelPaint, =, Color, ., black, ;, public, SubCategoryAxis, (, String, label, ), {]
[., PLAIN, ,, 10, ), ;, private, transient, Paint, subLabelPaint, =, Color, ., black, ;, public, SubCategoryAxis, (, String, label]
[), ;, private, transient, Paint, subLabelPaint, =, Color, ., black, ;, public, SubCategoryAxis, (, String, label, ), {, super, (]
[;, public, SubCategoryAxis, (, String, label, ), {, super, (, label, ), ;, this, ., subCategories, =, new, java, .]
[., black, ;, public, SubCategoryAxis, (, String, label, ), {, super, (, label, ), ;, this, ., subCategories, =, new]
[), ;, this, ., subCategories, =, new, java, ., util, ., ArrayList, (, ), ;, }, public, void, addSubCategory, (]
[=, new, java, ., util, ., ArrayList, (, ), ;, }, public, void, addSubCategory, (, Comparable, subCategory, ), {, if]
[., subCategories, =, new, java, ., util, ., ArrayList, (, ), ;, }, public, void, addSubCategory, (, Comparable, subCategory, )]
[;, }, public, void, addSubCategory, (, Comparable, subCategory, ), {, if, (, subCategory, ==, null, ), {, throw, new, IllegalArgumentException]
[), {, throw, new, IllegalArgumentException, (, "Null 'subcategory' axis.", ), ;, }, this, ., subCategories, ., add, (, subCategory, ), ;, notifyListeners]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'subcategory' axis.", ), ;, }, this, ., subCategories, ., add, (, subCategory, )]
[), {, throw, new, IllegalArgumentException, (, "Null 'subcategory' axis.", ), ;, }, this, ., subCategories, ., add, (, subCategory, ), ;, notifyListeners]
[;, }, this, ., subCategories, ., add, (, subCategory, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;]
[), ;, }, this, ., subCategories, ., add, (, subCategory, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Font, getSubLabelFont, (, ), {, return, this, .]
[., add, (, subCategory, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Font, getSubLabelFont, (]
[., subCategories, ., add, (, subCategory, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Font]
[), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Font, getSubLabelFont, (, ), {, return, this]
[;, }, public, Font, getSubLabelFont, (, ), {, return, this, ., subLabelFont, ;, }, public, void, setSubLabelFont, (, Font, font]
[), ;, }, public, Font, getSubLabelFont, (, ), {, return, this, ., subLabelFont, ;, }, public, void, setSubLabelFont, (, Font]
[), ), ;, }, public, Font, getSubLabelFont, (, ), {, return, this, ., subLabelFont, ;, }, public, void, setSubLabelFont, (]
[;, }, public, void, setSubLabelFont, (, Font, font, ), {, if, (, font, ==, null, ), {, throw, new, IllegalArgumentException]
[., subLabelFont, ;, }, public, void, setSubLabelFont, (, Font, font, ), {, if, (, font, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, this, ., subLabelFont, =, font, ;, notifyListeners, (, new, AxisChangeEvent]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, this, ., subLabelFont, =, font, ;, notifyListeners, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, this, ., subLabelFont, =, font, ;, notifyListeners, (, new, AxisChangeEvent]
[;, }, this, ., subLabelFont, =, font, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Paint]
[), ;, }, this, ., subLabelFont, =, font, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public]
[=, font, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Paint, getSubLabelPaint, (, ), {, return]
[., subLabelFont, =, font, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Paint, getSubLabelPaint, (, )]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Paint, getSubLabelPaint, (, ), {, return, this, .]
[;, }, public, Paint, getSubLabelPaint, (, ), {, return, this, ., subLabelPaint, ;, }, public, void, setSubLabelPaint, (, Paint, paint]
[), ;, }, public, Paint, getSubLabelPaint, (, ), {, return, this, ., subLabelPaint, ;, }, public, void, setSubLabelPaint, (, Paint]
[), ), ;, }, public, Paint, getSubLabelPaint, (, ), {, return, this, ., subLabelPaint, ;, }, public, void, setSubLabelPaint, (]
[;, }, public, void, setSubLabelPaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException]
[., subLabelPaint, ;, }, public, void, setSubLabelPaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., subLabelPaint, =, paint, ;, notifyListeners, (, new, AxisChangeEvent]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., subLabelPaint, =, paint, ;, notifyListeners, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., subLabelPaint, =, paint, ;, notifyListeners, (, new, AxisChangeEvent]
[;, }, this, ., subLabelPaint, =, paint, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, AxisSpace]
[), ;, }, this, ., subLabelPaint, =, paint, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public]
[=, paint, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,]
[., subLabelPaint, =, paint, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, AxisSpace, reserveSpace, (, Graphics2D]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot, plot]
[;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space]
[), ;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace]
[), ), ;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,]
[), {, space, =, new, AxisSpace, (, ), ;, }, if, (, !, isVisible, (, ), ), {, return, space]
[==, null, ), {, space, =, new, AxisSpace, (, ), ;, }, if, (, !, isVisible, (, ), ), {]
[), {, space, =, new, AxisSpace, (, ), ;, }, if, (, !, isVisible, (, ), ), {, return, space]
[=, new, AxisSpace, (, ), ;, }, if, (, !, isVisible, (, ), ), {, return, space, ;, }, space]
[;, }, if, (, !, isVisible, (, ), ), {, return, space, ;, }, space, =, super, ., reserveSpace, (]
[), {, return, space, ;, }, space, =, super, ., reserveSpace, (, g2, ,, plot, ,, plotArea, ,, edge, ,]
[), {, return, space, ;, }, space, =, super, ., reserveSpace, (, g2, ,, plot, ,, plotArea, ,, edge, ,]
[;, }, space, =, super, ., reserveSpace, (, g2, ,, plot, ,, plotArea, ,, edge, ,, space, ), ;, double]
[=, super, ., reserveSpace, (, g2, ,, plot, ,, plotArea, ,, edge, ,, space, ), ;, double, maxdim, =, getMaxDim]
[;, double, maxdim, =, getMaxDim, (, g2, ,, edge, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), )]
[., reserveSpace, (, g2, ,, plot, ,, plotArea, ,, edge, ,, space, ), ;, double, maxdim, =, getMaxDim, (, g2]
[,, plot, ,, plotArea, ,, edge, ,, space, ), ;, double, maxdim, =, getMaxDim, (, g2, ,, edge, ), ;]
[,, plotArea, ,, edge, ,, space, ), ;, double, maxdim, =, getMaxDim, (, g2, ,, edge, ), ;, if, (]
[,, edge, ,, space, ), ;, double, maxdim, =, getMaxDim, (, g2, ,, edge, ), ;, if, (, RectangleEdge, .]
[,, space, ), ;, double, maxdim, =, getMaxDim, (, g2, ,, edge, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (]
[), ;, double, maxdim, =, getMaxDim, (, g2, ,, edge, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, )]
[;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, space, ., add, (, maxdim, ,, edge, ), ;]
[,, edge, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, space, ., add, (, maxdim, ,]
[), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, space, ., add, (, maxdim, ,, edge, )]
[), {, space, ., add, (, maxdim, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge]
[., isTopOrBottom, (, edge, ), ), {, space, ., add, (, maxdim, ,, edge, ), ;, }, else, if, (]
[), ), {, space, ., add, (, maxdim, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, space, ., add, (, maxdim, ,, edge]
[., add, (, maxdim, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, space, ., add, (]
[), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, space, ., add, (, maxdim, ,]
[), {, space, ., add, (, maxdim, ,, edge, ), ;, }, return, space, ;, }, private, double, getMaxDim, (]
[., isLeftOrRight, (, edge, ), ), {, space, ., add, (, maxdim, ,, edge, ), ;, }, return, space, ;]
[), ), {, space, ., add, (, maxdim, ,, edge, ), ;, }, return, space, ;, }, private, double, getMaxDim]
[;, }, return, space, ;, }, private, double, getMaxDim, (, Graphics2D, g2, ,, RectangleEdge, edge, ), {, double, result, =]
[., add, (, maxdim, ,, edge, ), ;, }, return, space, ;, }, private, double, getMaxDim, (, Graphics2D, g2, ,]
[,, edge, ), ;, }, return, space, ;, }, private, double, getMaxDim, (, Graphics2D, g2, ,, RectangleEdge, edge, ), {]
[), ;, }, return, space, ;, }, private, double, getMaxDim, (, Graphics2D, g2, ,, RectangleEdge, edge, ), {, double, result]
[;, }, private, double, getMaxDim, (, Graphics2D, g2, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, g2, .]
[;, g2, ., setFont, (, this, ., subLabelFont, ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, ), ;, Iterator]
[;, FontMetrics, fm, =, g2, ., getFontMetrics, (, ), ;, Iterator, iterator, =, this, ., subCategories, ., iterator, (, )]
[., setFont, (, this, ., subLabelFont, ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, ), ;, Iterator, iterator, =]
[), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, ), ;, Iterator, iterator, =, this, ., subCategories, ., iterator, (]
[., subLabelFont, ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, ), ;, Iterator, iterator, =, this, ., subCategories, .]
[;, Iterator, iterator, =, this, ., subCategories, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), )]
[., getFontMetrics, (, ), ;, Iterator, iterator, =, this, ., subCategories, ., iterator, (, ), ;, while, (, iterator, .]
[;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, subcategory, =, (, Comparable, ), iterator, ., next, (]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, subcategory, =, (, Comparable, )]
[., subCategories, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, subcategory, =, (]
[), {, Comparable, subcategory, =, (, Comparable, ), iterator, ., next, (, ), ;, String, label, =, subcategory, ., toString]
[., hasNext, (, ), ), {, Comparable, subcategory, =, (, Comparable, ), iterator, ., next, (, ), ;, String, label]
[;, String, label, =, subcategory, ., toString, (, ), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, label, ,, g2]
[;, String, label, =, subcategory, ., toString, (, ), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, label, ,, g2]
[., next, (, ), ;, String, label, =, subcategory, ., toString, (, ), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds]
[;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, label, ,, g2, ,, fm, ), ;, double, dim, =, 0.0, ;]
[., toString, (, ), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, label, ,, g2, ,, fm, ), ;, double]
[;, double, dim, =, 0.0, ;, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, dim, =, bounds, .]
[., getTextBounds, (, label, ,, g2, ,, fm, ), ;, double, dim, =, 0.0, ;, if, (, RectangleEdge, ., isLeftOrRight]
[,, g2, ,, fm, ), ;, double, dim, =, 0.0, ;, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), )]
[,, fm, ), ;, double, dim, =, 0.0, ;, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, dim]
[), ;, double, dim, =, 0.0, ;, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, dim, =, bounds]
[;, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, dim, =, bounds, ., getWidth, (, ), ;, }]
[), {, dim, =, bounds, ., getWidth, (, ), ;, }, else, {, dim, =, bounds, ., getHeight, (, )]
[., isLeftOrRight, (, edge, ), ), {, dim, =, bounds, ., getWidth, (, ), ;, }, else, {, dim, =]
[), ), {, dim, =, bounds, ., getWidth, (, ), ;, }, else, {, dim, =, bounds, ., getHeight, (]
[=, bounds, ., getWidth, (, ), ;, }, else, {, dim, =, bounds, ., getHeight, (, ), ;, }, result]
[;, }, else, {, dim, =, bounds, ., getHeight, (, ), ;, }, result, =, Math, ., max, (, result]
[., getWidth, (, ), ;, }, else, {, dim, =, bounds, ., getHeight, (, ), ;, }, result, =, Math]
[=, bounds, ., getHeight, (, ), ;, }, result, =, Math, ., max, (, result, ,, dim, ), ;, }]
[;, }, result, =, Math, ., max, (, result, ,, dim, ), ;, }, return, result, ;, }, public, AxisState]
[., getHeight, (, ), ;, }, result, =, Math, ., max, (, result, ,, dim, ), ;, }, return, result]
[=, Math, ., max, (, result, ,, dim, ), ;, }, return, result, ;, }, public, AxisState, draw, (, Graphics2D]
[;, }, return, result, ;, }, public, AxisState, draw, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D]
[., max, (, result, ,, dim, ), ;, }, return, result, ;, }, public, AxisState, draw, (, Graphics2D, g2, ,]
[,, dim, ), ;, }, return, result, ;, }, public, AxisState, draw, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D]
[), ;, }, return, result, ;, }, public, AxisState, draw, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, plotArea, ,]
[;, }, public, AxisState, draw, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge]
[), {, return, new, AxisState, (, cursor, ), ;, }, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2]
[), {, return, new, AxisState, (, cursor, ), ;, }, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2]
[;, }, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2, ,, cursor, ,, dataArea, ,, edge, ), ;]
[), ;, }, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2, ,, cursor, ,, dataArea, ,, edge, )]
[), {, drawAxisLine, (, g2, ,, cursor, ,, dataArea, ,, edge, ), ;, }, AxisState, state, =, new, AxisState, (]
[;, }, AxisState, state, =, new, AxisState, (, cursor, ), ;, state, =, drawSubCategoryLabels, (, g2, ,, plotArea, ,, dataArea]
[,, cursor, ,, dataArea, ,, edge, ), ;, }, AxisState, state, =, new, AxisState, (, cursor, ), ;, state, =]
[,, dataArea, ,, edge, ), ;, }, AxisState, state, =, new, AxisState, (, cursor, ), ;, state, =, drawSubCategoryLabels, (]
[,, edge, ), ;, }, AxisState, state, =, new, AxisState, (, cursor, ), ;, state, =, drawSubCategoryLabels, (, g2, ,]
[), ;, }, AxisState, state, =, new, AxisState, (, cursor, ), ;, state, =, drawSubCategoryLabels, (, g2, ,, plotArea, ,]
[;, state, =, drawSubCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =]
[), ;, state, =, drawSubCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state]
[=, drawSubCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =, drawCategoryLabels, (]
[;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =]
[,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,]
[,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,]
[,, edge, ,, state, ,, plotState, ), ;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,]
[,, state, ,, plotState, ), ;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,]
[,, plotState, ), ;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, )]
[), ;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state]
[=, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =, drawLabel, (]
[;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState]
[,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,]
[,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,]
[,, edge, ,, state, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,]
[,, state, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,]
[,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,]
[), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,]
[=, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;]
[;, return, state, ;, }, protected, AxisState, drawSubCategoryLabels, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge]
[,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, return, state, ;, }, protected, AxisState]
[,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, return, state, ;, }, protected, AxisState, drawSubCategoryLabels, (]
[,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, return, state, ;, }, protected, AxisState, drawSubCategoryLabels, (, Graphics2D, g2]
[,, edge, ,, state, ,, plotState, ), ;, return, state, ;, }, protected, AxisState, drawSubCategoryLabels, (, Graphics2D, g2, ,, Rectangle2D]
[,, state, ,, plotState, ), ;, return, state, ;, }, protected, AxisState, drawSubCategoryLabels, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ,]
[,, plotState, ), ;, return, state, ;, }, protected, AxisState, drawSubCategoryLabels, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea]
[), ;, return, state, ;, }, protected, AxisState, drawSubCategoryLabels, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge]
[;, }, protected, AxisState, drawSubCategoryLabels, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, AxisState, state]
[), {, throw, new, IllegalArgumentException, (, "Null 'state' argument.", ), ;, }, g2, ., setFont, (, this, ., subLabelFont, ), ;, g2]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'state' argument.", ), ;, }, g2, ., setFont, (, this, ., subLabelFont, )]
[), {, throw, new, IllegalArgumentException, (, "Null 'state' argument.", ), ;, }, g2, ., setFont, (, this, ., subLabelFont, ), ;, g2]
[;, }, g2, ., setFont, (, this, ., subLabelFont, ), ;, g2, ., setPaint, (, this, ., subLabelPaint, ), ;]
[), ;, }, g2, ., setFont, (, this, ., subLabelFont, ), ;, g2, ., setPaint, (, this, ., subLabelPaint, )]
[;, g2, ., setPaint, (, this, ., subLabelPaint, ), ;, CategoryPlot, plot, =, (, CategoryPlot, ), getPlot, (, ), ;]
[., setFont, (, this, ., subLabelFont, ), ;, g2, ., setPaint, (, this, ., subLabelPaint, ), ;, CategoryPlot, plot, =]
[), ;, g2, ., setPaint, (, this, ., subLabelPaint, ), ;, CategoryPlot, plot, =, (, CategoryPlot, ), getPlot, (, )]
[., subLabelFont, ), ;, g2, ., setPaint, (, this, ., subLabelPaint, ), ;, CategoryPlot, plot, =, (, CategoryPlot, ), getPlot]
[;, CategoryPlot, plot, =, (, CategoryPlot, ), getPlot, (, ), ;, int, categoryCount, =, 0, ;, CategoryDataset, dataset, =, plot]
[., setPaint, (, this, ., subLabelPaint, ), ;, CategoryPlot, plot, =, (, CategoryPlot, ), getPlot, (, ), ;, int, categoryCount]
[), ;, CategoryPlot, plot, =, (, CategoryPlot, ), getPlot, (, ), ;, int, categoryCount, =, 0, ;, CategoryDataset, dataset, =]
[., subLabelPaint, ), ;, CategoryPlot, plot, =, (, CategoryPlot, ), getPlot, (, ), ;, int, categoryCount, =, 0, ;, CategoryDataset]
[;, int, categoryCount, =, 0, ;, CategoryDataset, dataset, =, plot, ., getDataset, (, ), ;, if, (, dataset, !=, null]
[;, int, categoryCount, =, 0, ;, CategoryDataset, dataset, =, plot, ., getDataset, (, ), ;, if, (, dataset, !=, null]
[;, CategoryDataset, dataset, =, plot, ., getDataset, (, ), ;, if, (, dataset, !=, null, ), {, categoryCount, =, dataset]
[;, if, (, dataset, !=, null, ), {, categoryCount, =, dataset, ., getColumnCount, (, ), ;, }, double, maxdim, =]
[., getDataset, (, ), ;, if, (, dataset, !=, null, ), {, categoryCount, =, dataset, ., getColumnCount, (, ), ;]
[), {, categoryCount, =, dataset, ., getColumnCount, (, ), ;, }, double, maxdim, =, getMaxDim, (, g2, ,, edge, )]
[!=, null, ), {, categoryCount, =, dataset, ., getColumnCount, (, ), ;, }, double, maxdim, =, getMaxDim, (, g2, ,]
[), {, categoryCount, =, dataset, ., getColumnCount, (, ), ;, }, double, maxdim, =, getMaxDim, (, g2, ,, edge, )]
[=, dataset, ., getColumnCount, (, ), ;, }, double, maxdim, =, getMaxDim, (, g2, ,, edge, ), ;, for, (]
[;, }, double, maxdim, =, getMaxDim, (, g2, ,, edge, ), ;, for, (, int, categoryIndex, =, 0, ;, categoryIndex]
[., getColumnCount, (, ), ;, }, double, maxdim, =, getMaxDim, (, g2, ,, edge, ), ;, for, (, int, categoryIndex]
[;, for, (, int, categoryIndex, =, 0, ;, categoryIndex, <, categoryCount, ;, categoryIndex, ++, ), {, double, x0, =, 0.0]
[,, edge, ), ;, for, (, int, categoryIndex, =, 0, ;, categoryIndex, <, categoryCount, ;, categoryIndex, ++, ), {, double]
[), ;, for, (, int, categoryIndex, =, 0, ;, categoryIndex, <, categoryCount, ;, categoryIndex, ++, ), {, double, x0, =]
[;, categoryIndex, <, categoryCount, ;, categoryIndex, ++, ), {, double, x0, =, 0.0, ;, double, x1, =, 0.0, ;, double]
[;, categoryIndex, ++, ), {, double, x0, =, 0.0, ;, double, x1, =, 0.0, ;, double, y0, =, 0.0, ;]
[<, categoryCount, ;, categoryIndex, ++, ), {, double, x0, =, 0.0, ;, double, x1, =, 0.0, ;, double, y0, =]
[;, categoryIndex, ++, ), {, double, x0, =, 0.0, ;, double, x1, =, 0.0, ;, double, y0, =, 0.0, ;]
[), {, double, x0, =, 0.0, ;, double, x1, =, 0.0, ;, double, y0, =, 0.0, ;, double, y1, =]
[++, ), {, double, x0, =, 0.0, ;, double, x1, =, 0.0, ;, double, y0, =, 0.0, ;, double, y1]
[;, double, x1, =, 0.0, ;, double, y0, =, 0.0, ;, double, y1, =, 0.0, ;, if, (, edge, ==]
[;, double, y0, =, 0.0, ;, double, y1, =, 0.0, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[;, double, y1, =, 0.0, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, x0, =, getCategoryStart, (, categoryIndex]
[;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,]
[), {, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex]
[==, RectangleEdge, ., TOP, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1]
[), {, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex]
[., TOP, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd]
[=, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,]
[;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, state, ., getCursor, (]
[,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, )]
[,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1]
[,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, state]
[), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, state, ., getCursor]
[=, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, state, ., getCursor, (, ), ;]
[;, y1, =, state, ., getCursor, (, ), ;, y0, =, y1, -, maxdim, ;, }, else, if, (, edge]
[,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, state, ., getCursor, (, ), ;, y0, =, y1, -]
[,, dataArea, ,, edge, ), ;, y1, =, state, ., getCursor, (, ), ;, y0, =, y1, -, maxdim, ;]
[,, edge, ), ;, y1, =, state, ., getCursor, (, ), ;, y0, =, y1, -, maxdim, ;, }, else]
[), ;, y1, =, state, ., getCursor, (, ), ;, y0, =, y1, -, maxdim, ;, }, else, if, (]
[=, state, ., getCursor, (, ), ;, y0, =, y1, -, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge]
[;, y0, =, y1, -, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, x0, =]
[., getCursor, (, ), ;, y0, =, y1, -, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM]
[=, y1, -, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, x0, =, getCategoryStart, (]
[;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,]
[-, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, x0, =, getCategoryStart, (, categoryIndex, ,]
[;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,]
[), {, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex]
[==, RectangleEdge, ., BOTTOM, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1]
[), {, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex]
[., BOTTOM, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd]
[=, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,]
[;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y0, =, state, ., getCursor, (]
[,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, )]
[,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y0]
[,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y0, =, state]
[), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y0, =, state, ., getCursor]
[=, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y0, =, state, ., getCursor, (, ), ;]
[;, y0, =, state, ., getCursor, (, ), ;, y1, =, y0, +, maxdim, ;, }, else, if, (, edge]
[,, categoryCount, ,, dataArea, ,, edge, ), ;, y0, =, state, ., getCursor, (, ), ;, y1, =, y0, +]
[,, dataArea, ,, edge, ), ;, y0, =, state, ., getCursor, (, ), ;, y1, =, y0, +, maxdim, ;]
[,, edge, ), ;, y0, =, state, ., getCursor, (, ), ;, y1, =, y0, +, maxdim, ;, }, else]
[), ;, y0, =, state, ., getCursor, (, ), ;, y1, =, y0, +, maxdim, ;, }, else, if, (]
[=, state, ., getCursor, (, ), ;, y1, =, y0, +, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge]
[;, y1, =, y0, +, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, y0, =]
[., getCursor, (, ), ;, y1, =, y0, +, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT]
[=, y0, +, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, y0, =, getCategoryStart, (]
[;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,]
[+, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,]
[;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,]
[), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex]
[==, RectangleEdge, ., LEFT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1]
[), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex]
[., LEFT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd]
[=, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,]
[;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, state, ., getCursor, (]
[,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, )]
[,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1]
[,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, state]
[), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, state, ., getCursor]
[=, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, state, ., getCursor, (, ), ;]
[;, x1, =, state, ., getCursor, (, ), ;, x0, =, x1, -, maxdim, ;, }, else, if, (, edge]
[,, categoryCount, ,, dataArea, ,, edge, ), ;, x1, =, state, ., getCursor, (, ), ;, x0, =, x1, -]
[,, dataArea, ,, edge, ), ;, x1, =, state, ., getCursor, (, ), ;, x0, =, x1, -, maxdim, ;]
[,, edge, ), ;, x1, =, state, ., getCursor, (, ), ;, x0, =, x1, -, maxdim, ;, }, else]
[), ;, x1, =, state, ., getCursor, (, ), ;, x0, =, x1, -, maxdim, ;, }, else, if, (]
[=, state, ., getCursor, (, ), ;, x0, =, x1, -, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge]
[;, x0, =, x1, -, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, y0, =]
[., getCursor, (, ), ;, x0, =, x1, -, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT]
[=, x1, -, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, y0, =, getCategoryStart, (]
[;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,]
[-, maxdim, ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,]
[;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,]
[), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex]
[==, RectangleEdge, ., RIGHT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1]
[), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex]
[., RIGHT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd]
[=, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,]
[;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x0, =, state, ., getCursor, (]
[,, categoryCount, ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, )]
[,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x0]
[,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x0, =, state]
[), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x0, =, state, ., getCursor]
[=, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, dataArea, ,, edge, ), ;, x0, =, state, ., getCursor, (, ), ;]
[;, x0, =, state, ., getCursor, (, ), ;, x1, =, x0, +, maxdim, ;, }, Rectangle2D, area, =, new]
[,, categoryCount, ,, dataArea, ,, edge, ), ;, x0, =, state, ., getCursor, (, ), ;, x1, =, x0, +]
[,, dataArea, ,, edge, ), ;, x0, =, state, ., getCursor, (, ), ;, x1, =, x0, +, maxdim, ;]
[,, edge, ), ;, x0, =, state, ., getCursor, (, ), ;, x1, =, x0, +, maxdim, ;, }, Rectangle2D]
[), ;, x0, =, state, ., getCursor, (, ), ;, x1, =, x0, +, maxdim, ;, }, Rectangle2D, area, =]
[=, state, ., getCursor, (, ), ;, x1, =, x0, +, maxdim, ;, }, Rectangle2D, area, =, new, Rectangle2D, .]
[;, x1, =, x0, +, maxdim, ;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,]
[., getCursor, (, ), ;, x1, =, x0, +, maxdim, ;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (]
[=, x0, +, maxdim, ;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (, x1]
[;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (, x1, -, x0, ), ,]
[+, maxdim, ;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (, x1, -, x0]
[;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (, x1, -, x0, ), ,]
[;, int, subCategoryCount, =, this, ., subCategories, ., size, (, ), ;, float, width, =, (, float, ), (, (]
[,, y0, ,, (, x1, -, x0, ), ,, (, y1, -, y0, ), ), ;, int, subCategoryCount, =, this]
[,, (, x1, -, x0, ), ,, (, y1, -, y0, ), ), ;, int, subCategoryCount, =, this, ., subCategories]
[,, (, y1, -, y0, ), ), ;, int, subCategoryCount, =, this, ., subCategories, ., size, (, ), ;, float]
[), ,, (, y1, -, y0, ), ), ;, int, subCategoryCount, =, this, ., subCategories, ., size, (, ), ;]
[-, x0, ), ,, (, y1, -, y0, ), ), ;, int, subCategoryCount, =, this, ., subCategories, ., size, (]
[), ,, (, y1, -, y0, ), ), ;, int, subCategoryCount, =, this, ., subCategories, ., size, (, ), ;]
[), ;, int, subCategoryCount, =, this, ., subCategories, ., size, (, ), ;, float, width, =, (, float, ), (]
[), ), ;, int, subCategoryCount, =, this, ., subCategories, ., size, (, ), ;, float, width, =, (, float, )]
[-, y0, ), ), ;, int, subCategoryCount, =, this, ., subCategories, ., size, (, ), ;, float, width, =, (]
[), ), ;, int, subCategoryCount, =, this, ., subCategories, ., size, (, ), ;, float, width, =, (, float, )]
[;, float, width, =, (, float, ), (, (, x1, -, x0, ), /, subCategoryCount, ), ;, float, height, =]
[., size, (, ), ;, float, width, =, (, float, ), (, (, x1, -, x0, ), /, subCategoryCount, )]
[., subCategories, ., size, (, ), ;, float, width, =, (, float, ), (, (, x1, -, x0, ), /]
[;, float, height, =, (, float, ), (, (, y1, -, y0, ), /, subCategoryCount, ), ;, float, xx, =]
[;, float, height, =, (, float, ), (, (, y1, -, y0, ), /, subCategoryCount, ), ;, float, xx, =]
[), ;, float, height, =, (, float, ), (, (, y1, -, y0, ), /, subCategoryCount, ), ;, float, xx]
[/, subCategoryCount, ), ;, float, height, =, (, float, ), (, (, y1, -, y0, ), /, subCategoryCount, ), ;]
[), /, subCategoryCount, ), ;, float, height, =, (, float, ), (, (, y1, -, y0, ), /, subCategoryCount, )]
[-, x0, ), /, subCategoryCount, ), ;, float, height, =, (, float, ), (, (, y1, -, y0, ), /]
[), /, subCategoryCount, ), ;, float, height, =, (, float, ), (, (, y1, -, y0, ), /, subCategoryCount, )]
[), ;, float, height, =, (, float, ), (, (, y1, -, y0, ), /, subCategoryCount, ), ;, float, xx]
[;, float, xx, =, 0.0f, ;, float, yy, =, 0.0f, ;, for, (, int, i, =, 0, ;, i, <]
[;, float, xx, =, 0.0f, ;, float, yy, =, 0.0f, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, float, xx, =, 0.0f, ;, float, yy, =, 0.0f, ;, for, (, int, i, =, 0, ;, i]
[/, subCategoryCount, ), ;, float, xx, =, 0.0f, ;, float, yy, =, 0.0f, ;, for, (, int, i, =, 0]
[), /, subCategoryCount, ), ;, float, xx, =, 0.0f, ;, float, yy, =, 0.0f, ;, for, (, int, i, =]
[-, y0, ), /, subCategoryCount, ), ;, float, xx, =, 0.0f, ;, float, yy, =, 0.0f, ;, for, (, int]
[), /, subCategoryCount, ), ;, float, xx, =, 0.0f, ;, float, yy, =, 0.0f, ;, for, (, int, i, =]
[), ;, float, xx, =, 0.0f, ;, float, yy, =, 0.0f, ;, for, (, int, i, =, 0, ;, i]
[;, float, yy, =, 0.0f, ;, for, (, int, i, =, 0, ;, i, <, subCategoryCount, ;, i, ++, )]
[;, for, (, int, i, =, 0, ;, i, <, subCategoryCount, ;, i, ++, ), {, if, (, RectangleEdge, .]
[;, i, <, subCategoryCount, ;, i, ++, ), {, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, xx]
[;, i, ++, ), {, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, xx, =, (, float, )]
[<, subCategoryCount, ;, i, ++, ), {, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, xx, =, (]
[;, i, ++, ), {, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, xx, =, (, float, )]
[), {, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, xx, =, (, float, ), (, x0, +]
[++, ), {, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, xx, =, (, float, ), (, x0]
[), {, xx, =, (, float, ), (, x0, +, (, i, +, 0.5, ), *, width, ), ;, yy]
[., isTopOrBottom, (, edge, ), ), {, xx, =, (, float, ), (, x0, +, (, i, +, 0.5, )]
[), ), {, xx, =, (, float, ), (, x0, +, (, i, +, 0.5, ), *, width, ), ;]
[=, (, float, ), (, x0, +, (, i, +, 0.5, ), *, width, ), ;, yy, =, (, float]
[;, yy, =, (, float, ), area, ., getCenterY, (, ), ;, }, else, {, xx, =, (, float, )]
[;, yy, =, (, float, ), area, ., getCenterY, (, ), ;, }, else, {, xx, =, (, float, )]
[), ;, yy, =, (, float, ), area, ., getCenterY, (, ), ;, }, else, {, xx, =, (, float]
[+, (, i, +, 0.5, ), *, width, ), ;, yy, =, (, float, ), area, ., getCenterY, (, )]
[), ;, yy, =, (, float, ), area, ., getCenterY, (, ), ;, }, else, {, xx, =, (, float]
[*, width, ), ;, yy, =, (, float, ), area, ., getCenterY, (, ), ;, }, else, {, xx, =]
[), *, width, ), ;, yy, =, (, float, ), area, ., getCenterY, (, ), ;, }, else, {, xx]
[+, 0.5, ), *, width, ), ;, yy, =, (, float, ), area, ., getCenterY, (, ), ;, }, else]
[), *, width, ), ;, yy, =, (, float, ), area, ., getCenterY, (, ), ;, }, else, {, xx]
[), ;, yy, =, (, float, ), area, ., getCenterY, (, ), ;, }, else, {, xx, =, (, float]
[=, (, float, ), area, ., getCenterY, (, ), ;, }, else, {, xx, =, (, float, ), area, .]
[;, }, else, {, xx, =, (, float, ), area, ., getCenterX, (, ), ;, yy, =, (, float, )]
[;, }, else, {, xx, =, (, float, ), area, ., getCenterX, (, ), ;, yy, =, (, float, )]
[., getCenterY, (, ), ;, }, else, {, xx, =, (, float, ), area, ., getCenterX, (, ), ;, yy]
[=, (, float, ), area, ., getCenterX, (, ), ;, yy, =, (, float, ), (, y0, +, (, i]
[;, yy, =, (, float, ), (, y0, +, (, i, +, 0.5, ), *, height, ), ;, }, String]
[;, yy, =, (, float, ), (, y0, +, (, i, +, 0.5, ), *, height, ), ;, }, String]
[., getCenterX, (, ), ;, yy, =, (, float, ), (, y0, +, (, i, +, 0.5, ), *, height]
[=, (, float, ), (, y0, +, (, i, +, 0.5, ), *, height, ), ;, }, String, label, =]
[;, }, String, label, =, this, ., subCategories, ., get, (, i, ), ., toString, (, ), ;, TextUtilities, .]
[;, }, String, label, =, this, ., subCategories, ., get, (, i, ), ., toString, (, ), ;, TextUtilities, .]
[), ;, }, String, label, =, this, ., subCategories, ., get, (, i, ), ., toString, (, ), ;, TextUtilities]
[+, (, i, +, 0.5, ), *, height, ), ;, }, String, label, =, this, ., subCategories, ., get, (]
[), ;, }, String, label, =, this, ., subCategories, ., get, (, i, ), ., toString, (, ), ;, TextUtilities]
[*, height, ), ;, }, String, label, =, this, ., subCategories, ., get, (, i, ), ., toString, (, )]
[), *, height, ), ;, }, String, label, =, this, ., subCategories, ., get, (, i, ), ., toString, (]
[+, 0.5, ), *, height, ), ;, }, String, label, =, this, ., subCategories, ., get, (, i, ), .]
[), *, height, ), ;, }, String, label, =, this, ., subCategories, ., get, (, i, ), ., toString, (]
[), ;, }, String, label, =, this, ., subCategories, ., get, (, i, ), ., toString, (, ), ;, TextUtilities]
[;, TextUtilities, ., drawRotatedString, (, label, ,, g2, ,, xx, ,, yy, ,, TextAnchor, ., CENTER, ,, 0.0, ,, TextAnchor]
[., toString, (, ), ;, TextUtilities, ., drawRotatedString, (, label, ,, g2, ,, xx, ,, yy, ,, TextAnchor, ., CENTER]
[., get, (, i, ), ., toString, (, ), ;, TextUtilities, ., drawRotatedString, (, label, ,, g2, ,, xx, ,]
[., subCategories, ., get, (, i, ), ., toString, (, ), ;, TextUtilities, ., drawRotatedString, (, label, ,, g2, ,]
[), ., toString, (, ), ;, TextUtilities, ., drawRotatedString, (, label, ,, g2, ,, xx, ,, yy, ,, TextAnchor, .]
[;, }, }, if, (, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {, double, h, =, maxdim, ;]
[., drawRotatedString, (, label, ,, g2, ,, xx, ,, yy, ,, TextAnchor, ., CENTER, ,, 0.0, ,, TextAnchor, ., CENTER]
[,, g2, ,, xx, ,, yy, ,, TextAnchor, ., CENTER, ,, 0.0, ,, TextAnchor, ., CENTER, ), ;, }, }]
[,, xx, ,, yy, ,, TextAnchor, ., CENTER, ,, 0.0, ,, TextAnchor, ., CENTER, ), ;, }, }, if, (]
[,, yy, ,, TextAnchor, ., CENTER, ,, 0.0, ,, TextAnchor, ., CENTER, ), ;, }, }, if, (, edge, .]
[,, TextAnchor, ., CENTER, ,, 0.0, ,, TextAnchor, ., CENTER, ), ;, }, }, if, (, edge, ., equals, (]
[,, 0.0, ,, TextAnchor, ., CENTER, ), ;, }, }, if, (, edge, ., equals, (, RectangleEdge, ., TOP, )]
[., CENTER, ,, 0.0, ,, TextAnchor, ., CENTER, ), ;, }, }, if, (, edge, ., equals, (, RectangleEdge, .]
[,, TextAnchor, ., CENTER, ), ;, }, }, if, (, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {]
[), ;, }, }, if, (, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {, double, h, =, maxdim]
[., CENTER, ), ;, }, }, if, (, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {, double, h]
[), {, double, h, =, maxdim, ;, state, ., cursorUp, (, h, ), ;, }, else, if, (, edge, .]
[., equals, (, RectangleEdge, ., TOP, ), ), {, double, h, =, maxdim, ;, state, ., cursorUp, (, h, )]
[), ), {, double, h, =, maxdim, ;, state, ., cursorUp, (, h, ), ;, }, else, if, (, edge]
[., TOP, ), ), {, double, h, =, maxdim, ;, state, ., cursorUp, (, h, ), ;, }, else, if]
[;, state, ., cursorUp, (, h, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., BOTTOM, )]
[;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., BOTTOM, ), ), {, double, h, =, maxdim, ;]
[., cursorUp, (, h, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., BOTTOM, ), ), {]
[), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., BOTTOM, ), ), {, double, h, =, maxdim]
[), {, double, h, =, maxdim, ;, state, ., cursorDown, (, h, ), ;, }, else, if, (, edge, ==]
[., equals, (, RectangleEdge, ., BOTTOM, ), ), {, double, h, =, maxdim, ;, state, ., cursorDown, (, h, )]
[), ), {, double, h, =, maxdim, ;, state, ., cursorDown, (, h, ), ;, }, else, if, (, edge]
[., BOTTOM, ), ), {, double, h, =, maxdim, ;, state, ., cursorDown, (, h, ), ;, }, else, if]
[;, state, ., cursorDown, (, h, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, double]
[;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, double, w, =, maxdim, ;, state, ., cursorLeft]
[., cursorDown, (, h, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, double, w, =]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, double, w, =, maxdim, ;, state, .]
[), {, double, w, =, maxdim, ;, state, ., cursorLeft, (, w, ), ;, }, else, if, (, edge, ==]
[==, RectangleEdge, ., LEFT, ), {, double, w, =, maxdim, ;, state, ., cursorLeft, (, w, ), ;, }, else]
[), {, double, w, =, maxdim, ;, state, ., cursorLeft, (, w, ), ;, }, else, if, (, edge, ==]
[., LEFT, ), {, double, w, =, maxdim, ;, state, ., cursorLeft, (, w, ), ;, }, else, if, (]
[;, state, ., cursorLeft, (, w, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, double]
[;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, double, w, =, maxdim, ;, state, ., cursorRight]
[., cursorLeft, (, w, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, double, w, =]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, double, w, =, maxdim, ;, state, .]
[), {, double, w, =, maxdim, ;, state, ., cursorRight, (, w, ), ;, }, return, state, ;, }, public]
[==, RectangleEdge, ., RIGHT, ), {, double, w, =, maxdim, ;, state, ., cursorRight, (, w, ), ;, }, return]
[), {, double, w, =, maxdim, ;, state, ., cursorRight, (, w, ), ;, }, return, state, ;, }, public]
[., RIGHT, ), {, double, w, =, maxdim, ;, state, ., cursorRight, (, w, ), ;, }, return, state, ;]
[;, state, ., cursorRight, (, w, ), ;, }, return, state, ;, }, public, boolean, equals, (, Object, obj, )]
[;, }, return, state, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, )]
[., cursorRight, (, w, ), ;, }, return, state, ;, }, public, boolean, equals, (, Object, obj, ), {, if]
[), ;, }, return, state, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this]
[;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;]
[), {, return, true, ;, }, if, (, obj, instanceof, SubCategoryAxis, &&, super, ., equals, (, obj, ), ), {]
[==, this, ), {, return, true, ;, }, if, (, obj, instanceof, SubCategoryAxis, &&, super, ., equals, (, obj, )]
[), {, return, true, ;, }, if, (, obj, instanceof, SubCategoryAxis, &&, super, ., equals, (, obj, ), ), {]
[;, }, if, (, obj, instanceof, SubCategoryAxis, &&, super, ., equals, (, obj, ), ), {, SubCategoryAxis, axis, =, (]
[), {, SubCategoryAxis, axis, =, (, SubCategoryAxis, ), obj, ;, if, (, !, this, ., subCategories, ., equals, (, axis]
[&&, super, ., equals, (, obj, ), ), {, SubCategoryAxis, axis, =, (, SubCategoryAxis, ), obj, ;, if, (, !]
[instanceof, SubCategoryAxis, &&, super, ., equals, (, obj, ), ), {, SubCategoryAxis, axis, =, (, SubCategoryAxis, ), obj, ;, if]
[), {, SubCategoryAxis, axis, =, (, SubCategoryAxis, ), obj, ;, if, (, !, this, ., subCategories, ., equals, (, axis]
[., equals, (, obj, ), ), {, SubCategoryAxis, axis, =, (, SubCategoryAxis, ), obj, ;, if, (, !, this, .]
[), ), {, SubCategoryAxis, axis, =, (, SubCategoryAxis, ), obj, ;, if, (, !, this, ., subCategories, ., equals, (]
[;, if, (, !, this, ., subCategories, ., equals, (, axis, ., subCategories, ), ), {, return, false, ;, }]
[;, if, (, !, this, ., subCategories, ., equals, (, axis, ., subCategories, ), ), {, return, false, ;, }]
[), {, return, false, ;, }, if, (, !, this, ., subLabelFont, ., equals, (, axis, ., subLabelFont, ), )]
[), {, return, false, ;, }, if, (, !, this, ., subLabelFont, ., equals, (, axis, ., subLabelFont, ), )]
[., equals, (, axis, ., subCategories, ), ), {, return, false, ;, }, if, (, !, this, ., subLabelFont, .]
[., subCategories, ., equals, (, axis, ., subCategories, ), ), {, return, false, ;, }, if, (, !, this, .]
[), ), {, return, false, ;, }, if, (, !, this, ., subLabelFont, ., equals, (, axis, ., subLabelFont, )]
[., subCategories, ), ), {, return, false, ;, }, if, (, !, this, ., subLabelFont, ., equals, (, axis, .]
[;, }, if, (, !, this, ., subLabelFont, ., equals, (, axis, ., subLabelFont, ), ), {, return, false, ;]
[), {, return, false, ;, }, if, (, !, this, ., subLabelPaint, ., equals, (, axis, ., subLabelPaint, ), )]
[), {, return, false, ;, }, if, (, !, this, ., subLabelPaint, ., equals, (, axis, ., subLabelPaint, ), )]
[., equals, (, axis, ., subLabelFont, ), ), {, return, false, ;, }, if, (, !, this, ., subLabelPaint, .]
[., subLabelFont, ., equals, (, axis, ., subLabelFont, ), ), {, return, false, ;, }, if, (, !, this, .]
[), ), {, return, false, ;, }, if, (, !, this, ., subLabelPaint, ., equals, (, axis, ., subLabelPaint, )]
[., subLabelFont, ), ), {, return, false, ;, }, if, (, !, this, ., subLabelPaint, ., equals, (, axis, .]
[;, }, if, (, !, this, ., subLabelPaint, ., equals, (, axis, ., subLabelPaint, ), ), {, return, false, ;]
[), {, return, false, ;, }, return, true, ;, }, return, false, ;, }, private, void, writeObject, (, ObjectOutputStream, stream]
[), {, return, false, ;, }, return, true, ;, }, return, false, ;, }, private, void, writeObject, (, ObjectOutputStream, stream]
[., equals, (, axis, ., subLabelPaint, ), ), {, return, false, ;, }, return, true, ;, }, return, false, ;]
[., subLabelPaint, ., equals, (, axis, ., subLabelPaint, ), ), {, return, false, ;, }, return, true, ;, }, return]
[), ), {, return, false, ;, }, return, true, ;, }, return, false, ;, }, private, void, writeObject, (, ObjectOutputStream]
[., subLabelPaint, ), ), {, return, false, ;, }, return, true, ;, }, return, false, ;, }, private, void, writeObject]
[;, }, return, true, ;, }, return, false, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[;, }, return, false, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (]
[;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, .]
[;, SerialUtilities, ., writePaint, (, this, ., subLabelPaint, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, )]
[., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., subLabelPaint, ,, stream, ), ;, }, private, void, readObject]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[., writePaint, (, this, ., subLabelPaint, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException]
[,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject]
[., subLabelPaint, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream]
[), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, )]
[;, this, ., subLabelPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, }, }]
[., defaultReadObject, (, ), ;, this, ., subLabelPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, }, }]
[=, SerialUtilities, ., readPaint, (, stream, ), ;, }, }]
[., subLabelPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, }, }]
[;, }, }]
[., readPaint, (, stream, ), ;, }, }]
[), ;, }, }]
