[commons, ., math3, ., random, ., Well19937c, ;, public, class, BinomialDistribution, extends, AbstractIntegerDistribution, {, private, static, final, long, serialVersionUID, =]
[int, numberOfTrials, ;, private, final, double, probabilityOfSuccess, ;, public, BinomialDistribution, (, int, trials, ,, double, p, ), {, this, (]
[double, probabilityOfSuccess, ;, public, BinomialDistribution, (, int, trials, ,, double, p, ), {, this, (, new, Well19937c, (, ), ,]
[;, public, BinomialDistribution, (, int, trials, ,, double, p, ), {, this, (, new, Well19937c, (, ), ,, trials, ,]
[,, p, ), ;, }, public, BinomialDistribution, (, RandomGenerator, rng, ,, int, trials, ,, double, p, ), {, super, (]
[public, BinomialDistribution, (, RandomGenerator, rng, ,, int, trials, ,, double, p, ), {, super, (, rng, ), ;, if, (]
[public, BinomialDistribution, (, RandomGenerator, rng, ,, int, trials, ,, double, p, ), {, super, (, rng, ), ;, if, (]
[(, RandomGenerator, rng, ,, int, trials, ,, double, p, ), {, super, (, rng, ), ;, if, (, trials, <]
[int, trials, ,, double, p, ), {, super, (, rng, ), ;, if, (, trials, <, 0, ), {, throw]
[double, p, ), {, super, (, rng, ), ;, if, (, trials, <, 0, ), {, throw, new, NotPositiveException, (]
[double, p, ), {, super, (, rng, ), ;, if, (, trials, <, 0, ), {, throw, new, NotPositiveException, (]
[super, (, rng, ), ;, if, (, trials, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_TRIALS, ,]
[(, trials, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_TRIALS, ,, trials, ), ;, }, if, (]
[(, trials, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_TRIALS, ,, trials, ), ;, }, if, (]
[(, trials, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_TRIALS, ,, trials, ), ;, }, if, (]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_TRIALS, ,, trials, ), ;, }, if, (, p, <]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_TRIALS, ,, trials, ), ;, }, if, (, p, <, 0, ||]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_TRIALS, ,, trials, ), ;, }, if, (, p, <, 0, ||]
[throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_TRIALS, ,, trials, ), ;, }, if, (, p, <, 0, ||, p, >]
[LocalizedFormats, ., NUMBER_OF_TRIALS, ,, trials, ), ;, }, if, (, p, <, 0, ||, p, >, 1, ), {, throw]
[,, trials, ), ;, }, if, (, p, <, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (]
[), ;, }, if, (, p, <, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (, p, ,]
[}, if, (, p, <, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,]
[<, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }]
[||, p, >, 1, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, probabilityOfSuccess, =]
[>, 1, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, probabilityOfSuccess, =, p, ;]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, probabilityOfSuccess, =, p, ;, numberOfTrials, =]
[1, ), ;, }, probabilityOfSuccess, =, p, ;, numberOfTrials, =, trials, ;, }, public, int, getNumberOfTrials, (, ), {, return]
[trials, ;, }, public, int, getNumberOfTrials, (, ), {, return, numberOfTrials, ;, }, public, double, getProbabilityOfSuccess, (, ), {, return]
[(, ), {, return, probabilityOfSuccess, ;, }, public, double, probability, (, int, x, ), {, double, ret, ;, if, (]
[(, ), {, return, probabilityOfSuccess, ;, }, public, double, probability, (, int, x, ), {, double, ret, ;, if, (]
[(, ), {, return, probabilityOfSuccess, ;, }, public, double, probability, (, int, x, ), {, double, ret, ;, if, (]
[{, return, probabilityOfSuccess, ;, }, public, double, probability, (, int, x, ), {, double, ret, ;, if, (, x, <]
[probabilityOfSuccess, ;, }, public, double, probability, (, int, x, ), {, double, ret, ;, if, (, x, <, 0, ||]
[probabilityOfSuccess, ;, }, public, double, probability, (, int, x, ), {, double, ret, ;, if, (, x, <, 0, ||]
[}, public, double, probability, (, int, x, ), {, double, ret, ;, if, (, x, <, 0, ||, x, >]
[probability, (, int, x, ), {, double, ret, ;, if, (, x, <, 0, ||, x, >, numberOfTrials, ), {]
[int, x, ), {, double, ret, ;, if, (, x, <, 0, ||, x, >, numberOfTrials, ), {, ret, =]
[ret, ;, if, (, x, <, 0, ||, x, >, numberOfTrials, ), {, ret, =, 0.0, ;, }, else, {]
[if, (, x, <, 0, ||, x, >, numberOfTrials, ), {, ret, =, 0.0, ;, }, else, {, ret, =]
[if, (, x, <, 0, ||, x, >, numberOfTrials, ), {, ret, =, 0.0, ;, }, else, {, ret, =]
[0, ||, x, >, numberOfTrials, ), {, ret, =, 0.0, ;, }, else, {, ret, =, FastMath, ., exp, (]
[0, ||, x, >, numberOfTrials, ), {, ret, =, 0.0, ;, }, else, {, ret, =, FastMath, ., exp, (]
[numberOfTrials, ), {, ret, =, 0.0, ;, }, else, {, ret, =, FastMath, ., exp, (, SaddlePointExpansion, ., logBinomialProbability, (]
[{, ret, =, 0.0, ;, }, else, {, ret, =, FastMath, ., exp, (, SaddlePointExpansion, ., logBinomialProbability, (, x, ,]
[=, 0.0, ;, }, else, {, ret, =, FastMath, ., exp, (, SaddlePointExpansion, ., logBinomialProbability, (, x, ,, numberOfTrials, ,]
[;, }, else, {, ret, =, FastMath, ., exp, (, SaddlePointExpansion, ., logBinomialProbability, (, x, ,, numberOfTrials, ,, probabilityOfSuccess, ,]
[;, }, else, {, ret, =, FastMath, ., exp, (, SaddlePointExpansion, ., logBinomialProbability, (, x, ,, numberOfTrials, ,, probabilityOfSuccess, ,]
[else, {, ret, =, FastMath, ., exp, (, SaddlePointExpansion, ., logBinomialProbability, (, x, ,, numberOfTrials, ,, probabilityOfSuccess, ,, 1.0, -]
[exp, (, SaddlePointExpansion, ., logBinomialProbability, (, x, ,, numberOfTrials, ,, probabilityOfSuccess, ,, 1.0, -, probabilityOfSuccess, ), ), ;, }, return]
[), ;, }, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (]
[), ;, }, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (]
[}, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (, x, <]
[;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (, x, <, 0, ), {]
[public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (, x, <, 0, ), {, ret, =]
[), {, double, ret, ;, if, (, x, <, 0, ), {, ret, =, 0.0, ;, }, else, if, (]
[), {, double, ret, ;, if, (, x, <, 0, ), {, ret, =, 0.0, ;, }, else, if, (]
[double, ret, ;, if, (, x, <, 0, ), {, ret, =, 0.0, ;, }, else, if, (, x, >=]
[if, (, x, <, 0, ), {, ret, =, 0.0, ;, }, else, if, (, x, >=, numberOfTrials, ), {]
[x, <, 0, ), {, ret, =, 0.0, ;, }, else, if, (, x, >=, numberOfTrials, ), {, ret, =]
[ret, =, 0.0, ;, }, else, if, (, x, >=, numberOfTrials, ), {, ret, =, 1.0, ;, }, else, {]
[0.0, ;, }, else, if, (, x, >=, numberOfTrials, ), {, ret, =, 1.0, ;, }, else, {, ret, =]
[0.0, ;, }, else, if, (, x, >=, numberOfTrials, ), {, ret, =, 1.0, ;, }, else, {, ret, =]
[}, else, if, (, x, >=, numberOfTrials, ), {, ret, =, 1.0, ;, }, else, {, ret, =, 1.0, -]
[}, else, if, (, x, >=, numberOfTrials, ), {, ret, =, 1.0, ;, }, else, {, ret, =, 1.0, -]
[x, >=, numberOfTrials, ), {, ret, =, 1.0, ;, }, else, {, ret, =, 1.0, -, Beta, ., regularizedBeta, (]
[numberOfTrials, ), {, ret, =, 1.0, ;, }, else, {, ret, =, 1.0, -, Beta, ., regularizedBeta, (, probabilityOfSuccess, ,]
[numberOfTrials, ), {, ret, =, 1.0, ;, }, else, {, ret, =, 1.0, -, Beta, ., regularizedBeta, (, probabilityOfSuccess, ,]
[{, ret, =, 1.0, ;, }, else, {, ret, =, 1.0, -, Beta, ., regularizedBeta, (, probabilityOfSuccess, ,, x, +]
[=, 1.0, ;, }, else, {, ret, =, 1.0, -, Beta, ., regularizedBeta, (, probabilityOfSuccess, ,, x, +, 1.0, ,]
[=, 1.0, ;, }, else, {, ret, =, 1.0, -, Beta, ., regularizedBeta, (, probabilityOfSuccess, ,, x, +, 1.0, ,]
[;, }, else, {, ret, =, 1.0, -, Beta, ., regularizedBeta, (, probabilityOfSuccess, ,, x, +, 1.0, ,, numberOfTrials, -]
[=, 1.0, -, Beta, ., regularizedBeta, (, probabilityOfSuccess, ,, x, +, 1.0, ,, numberOfTrials, -, x, ), ;, }, return]
[+, 1.0, ,, numberOfTrials, -, x, ), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, return]
[+, 1.0, ,, numberOfTrials, -, x, ), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, return]
[,, numberOfTrials, -, x, ), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, return, numberOfTrials, *]
[getNumericalMean, (, ), {, return, numberOfTrials, *, probabilityOfSuccess, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =]
[{, return, numberOfTrials, *, probabilityOfSuccess, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return]
[{, return, numberOfTrials, *, probabilityOfSuccess, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return]
[{, return, numberOfTrials, *, probabilityOfSuccess, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return]
[numberOfTrials, *, probabilityOfSuccess, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, numberOfTrials, *]
[probabilityOfSuccess, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, numberOfTrials, *, p, *]
[;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, numberOfTrials, *, p, *, (]
[;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, numberOfTrials, *, p, *, (]
[public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, numberOfTrials, *, p, *, (, 1, -]
[;, return, numberOfTrials, *, p, *, (, 1, -, p, ), ;, }, public, int, getSupportLowerBound, (, ), {, return]
[;, return, numberOfTrials, *, p, *, (, 1, -, p, ), ;, }, public, int, getSupportLowerBound, (, ), {, return]
[;, return, numberOfTrials, *, p, *, (, 1, -, p, ), ;, }, public, int, getSupportLowerBound, (, ), {, return]
[numberOfTrials, *, p, *, (, 1, -, p, ), ;, }, public, int, getSupportLowerBound, (, ), {, return, probabilityOfSuccess, <]
[p, *, (, 1, -, p, ), ;, }, public, int, getSupportLowerBound, (, ), {, return, probabilityOfSuccess, <, 1.0, ?]
[(, 1, -, p, ), ;, }, public, int, getSupportLowerBound, (, ), {, return, probabilityOfSuccess, <, 1.0, ?, 0, :]
[(, ), {, return, probabilityOfSuccess, <, 1.0, ?, 0, :, numberOfTrials, ;, }, public, int, getSupportUpperBound, (, ), {, return]
[(, ), {, return, probabilityOfSuccess, <, 1.0, ?, 0, :, numberOfTrials, ;, }, public, int, getSupportUpperBound, (, ), {, return]
[(, ), {, return, probabilityOfSuccess, <, 1.0, ?, 0, :, numberOfTrials, ;, }, public, int, getSupportUpperBound, (, ), {, return]
[{, return, probabilityOfSuccess, <, 1.0, ?, 0, :, numberOfTrials, ;, }, public, int, getSupportUpperBound, (, ), {, return, probabilityOfSuccess, >]
[probabilityOfSuccess, <, 1.0, ?, 0, :, numberOfTrials, ;, }, public, int, getSupportUpperBound, (, ), {, return, probabilityOfSuccess, >, 0.0, ?]
[1.0, ?, 0, :, numberOfTrials, ;, }, public, int, getSupportUpperBound, (, ), {, return, probabilityOfSuccess, >, 0.0, ?, numberOfTrials, :]
[(, ), {, return, probabilityOfSuccess, >, 0.0, ?, numberOfTrials, :, 0, ;, }, public, boolean, isSupportConnected, (, ), {, return]
