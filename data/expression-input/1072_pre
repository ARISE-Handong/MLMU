[chart, ., util, ., Size2D, ;, public, class, GridArrangement, implements, Arrangement, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[., util, ., Size2D, ;, public, class, GridArrangement, implements, Arrangement, ,, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[2563758090144655938L, ;, private, int, rows, ;, private, int, columns, ;, public, GridArrangement, (, int, rows, ,, int, columns, ), {]
[2563758090144655938L, ;, private, int, rows, ;, private, int, columns, ;, public, GridArrangement, (, int, rows, ,, int, columns, ), {]
[rows, ;, private, int, columns, ;, public, GridArrangement, (, int, rows, ,, int, columns, ), {, this, ., rows, =]
[private, int, columns, ;, public, GridArrangement, (, int, rows, ,, int, columns, ), {, this, ., rows, =, rows, ;]
[private, int, columns, ;, public, GridArrangement, (, int, rows, ,, int, columns, ), {, this, ., rows, =, rows, ;]
[public, GridArrangement, (, int, rows, ,, int, columns, ), {, this, ., rows, =, rows, ;, this, ., columns, =]
[), {, }, public, Size2D, arrange, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, LengthConstraintType, w, =]
[), {, }, public, Size2D, arrange, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, LengthConstraintType, w, =]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, LengthConstraintType, w, =, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, LengthConstraintType, w, =, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =]
[LengthConstraintType, w, =, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (]
[LengthConstraintType, w, =, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (]
[=, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==]
[=, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==]
[LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (]
[LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (]
[=, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==]
[=, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==]
[;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return]
[(, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (]
[==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,]
[(, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (]
[(, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==]
[return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return]
[(, container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeNF, (]
[,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeNF, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeNF, (, container, ,, g2, ,]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[., FIXED, ), {, return, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[., FIXED, ), {, return, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[(, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeNR, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeNR, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeNR, (, container, ,, g2, ,]
[LengthConstraintType, ., RANGE, ), {, return, arrangeNR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (]
[LengthConstraintType, ., RANGE, ), {, return, arrangeNR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (]
[RANGE, ), {, return, arrangeNR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==]
[RANGE, ), {, return, arrangeNR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==]
[,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (]
[,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (]
[,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==]
[,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==]
[else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return]
[(, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (]
[==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,]
[., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[(, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[(, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeFR, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeFR, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeFR, (, container, ,, g2, ,]
[LengthConstraintType, ., RANGE, ), {, return, arrangeFR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (]
[LengthConstraintType, ., RANGE, ), {, return, arrangeFR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (]
[RANGE, ), {, return, arrangeFR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==]
[RANGE, ), {, return, arrangeFR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==]
[,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (]
[,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (]
[,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==]
[,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==]
[else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return]
[(, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (]
[==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,]
[., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[(, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[(, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,]
[h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, throw]
[., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, throw, new, RuntimeException, (]
[RuntimeException, (, "Should never get to here!", ), ;, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, double, maxW, =]
[}, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, double, maxW, =, 0.0, ;, double, maxH, =]
[BlockContainer, container, ,, Graphics2D, g2, ), {, double, maxW, =, 0.0, ;, double, maxH, =, 0.0, ;, List, blocks, =]
[BlockContainer, container, ,, Graphics2D, g2, ), {, double, maxW, =, 0.0, ;, double, maxH, =, 0.0, ;, List, blocks, =]
[=, 0.0, ;, double, maxH, =, 0.0, ;, List, blocks, =, container, ., getBlocks, (, ), ;, Iterator, iterator, =]
[=, 0.0, ;, double, maxH, =, 0.0, ;, List, blocks, =, container, ., getBlocks, (, ), ;, Iterator, iterator, =]
[List, blocks, =, container, ., getBlocks, (, ), ;, Iterator, iterator, =, blocks, ., iterator, (, ), ;, while, (]
[List, blocks, =, container, ., getBlocks, (, ), ;, Iterator, iterator, =, blocks, ., iterator, (, ), ;, while, (]
[iterator, =, blocks, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Block, b, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Block, b, =, (, Block, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Block, b, =, (, Block, )]
[., hasNext, (, ), ), {, Block, b, =, (, Block, ), iterator, ., next, (, ), ;, if, (]
[., hasNext, (, ), ), {, Block, b, =, (, Block, ), iterator, ., next, (, ), ;, if, (]
[(, ), ), {, Block, b, =, (, Block, ), iterator, ., next, (, ), ;, if, (, b, !=]
[=, (, Block, ), iterator, ., next, (, ), ;, if, (, b, !=, null, ), {, Size2D, s, =]
[=, (, Block, ), iterator, ., next, (, ), ;, if, (, b, !=, null, ), {, Size2D, s, =]
[iterator, ., next, (, ), ;, if, (, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (]
[next, (, ), ;, if, (, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,]
[next, (, ), ;, if, (, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,]
[(, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;]
[!=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, maxW, =]
[!=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, maxW, =]
[Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, maxW, =, Math, ., max, (]
[=, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, maxW, =, Math, ., max, (, maxW, ,]
[=, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, maxW, =, Math, ., max, (, maxW, ,]
[g2, ,, RectangleConstraint, ., NONE, ), ;, maxW, =, Math, ., max, (, maxW, ,, s, ., width, ), ;]
[RectangleConstraint, ., NONE, ), ;, maxW, =, Math, ., max, (, maxW, ,, s, ., width, ), ;, maxH, =]
[RectangleConstraint, ., NONE, ), ;, maxW, =, Math, ., max, (, maxW, ,, s, ., width, ), ;, maxH, =]
[;, maxW, =, Math, ., max, (, maxW, ,, s, ., width, ), ;, maxH, =, Math, ., max, (]
[=, Math, ., max, (, maxW, ,, s, ., width, ), ;, maxH, =, Math, ., max, (, maxH, ,]
[=, Math, ., max, (, maxW, ,, s, ., width, ), ;, maxH, =, Math, ., max, (, maxH, ,]
[), ;, maxH, =, Math, ., max, (, maxH, ,, s, ., height, ), ;, }, }, double, width, =]
[), ;, maxH, =, Math, ., max, (, maxH, ,, s, ., height, ), ;, }, }, double, width, =]
[), ;, maxH, =, Math, ., max, (, maxH, ,, s, ., height, ), ;, }, }, double, width, =]
[Math, ., max, (, maxH, ,, s, ., height, ), ;, }, }, double, width, =, this, ., columns, *]
[,, s, ., height, ), ;, }, }, double, width, =, this, ., columns, *, maxW, ;, double, height, =]
[,, s, ., height, ), ;, }, }, double, width, =, this, ., columns, *, maxW, ;, double, height, =]
[,, s, ., height, ), ;, }, }, double, width, =, this, ., columns, *, maxW, ;, double, height, =]
[), ;, }, }, double, width, =, this, ., columns, *, maxW, ;, double, height, =, this, ., rows, *]
[width, =, this, ., columns, *, maxW, ;, double, height, =, this, ., rows, *, maxH, ;, RectangleConstraint, c, =]
[., columns, *, maxW, ;, double, height, =, this, ., rows, *, maxH, ;, RectangleConstraint, c, =, new, RectangleConstraint, (]
[*, maxW, ;, double, height, =, this, ., rows, *, maxH, ;, RectangleConstraint, c, =, new, RectangleConstraint, (, width, ,]
[height, =, this, ., rows, *, maxH, ;, RectangleConstraint, c, =, new, RectangleConstraint, (, width, ,, height, ), ;, return]
[this, ., rows, *, maxH, ;, RectangleConstraint, c, =, new, RectangleConstraint, (, width, ,, height, ), ;, return, arrangeFF, (]
[rows, *, maxH, ;, RectangleConstraint, c, =, new, RectangleConstraint, (, width, ,, height, ), ;, return, arrangeFF, (, container, ,]
[maxH, ;, RectangleConstraint, c, =, new, RectangleConstraint, (, width, ,, height, ), ;, return, arrangeFF, (, container, ,, g2, ,]
[), ;, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, width, =]
[), ;, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, width, =]
[), ;, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, width, =]
[(, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, width, =, constraint, ., getWidth, (, ), /]
[(, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, width, =, constraint, ., getWidth, (, ), /]
[RectangleConstraint, constraint, ), {, double, width, =, constraint, ., getWidth, (, ), /, this, ., columns, ;, double, height, =]
[RectangleConstraint, constraint, ), {, double, width, =, constraint, ., getWidth, (, ), /, this, ., columns, ;, double, height, =]
[RectangleConstraint, constraint, ), {, double, width, =, constraint, ., getWidth, (, ), /, this, ., columns, ;, double, height, =]
[=, constraint, ., getWidth, (, ), /, this, ., columns, ;, double, height, =, constraint, ., getHeight, (, ), /]
[=, constraint, ., getWidth, (, ), /, this, ., columns, ;, double, height, =, constraint, ., getHeight, (, ), /]
[this, ., columns, ;, double, height, =, constraint, ., getHeight, (, ), /, this, ., rows, ;, List, blocks, =]
[this, ., columns, ;, double, height, =, constraint, ., getHeight, (, ), /, this, ., rows, ;, List, blocks, =]
[), /, this, ., rows, ;, List, blocks, =, container, ., getBlocks, (, ), ;, for, (, int, c, =]
[this, ., rows, ;, List, blocks, =, container, ., getBlocks, (, ), ;, for, (, int, c, =, 0, ;]
[this, ., rows, ;, List, blocks, =, container, ., getBlocks, (, ), ;, for, (, int, c, =, 0, ;]
[rows, ;, List, blocks, =, container, ., getBlocks, (, ), ;, for, (, int, c, =, 0, ;, c, <]
[rows, ;, List, blocks, =, container, ., getBlocks, (, ), ;, for, (, int, c, =, 0, ;, c, <]
[=, container, ., getBlocks, (, ), ;, for, (, int, c, =, 0, ;, c, <, this, ., columns, ;]
[=, container, ., getBlocks, (, ), ;, for, (, int, c, =, 0, ;, c, <, this, ., columns, ;]
[int, c, =, 0, ;, c, <, this, ., columns, ;, c, ++, ), {, for, (, int, r, =]
[=, 0, ;, c, <, this, ., columns, ;, c, ++, ), {, for, (, int, r, =, 0, ;]
[=, 0, ;, c, <, this, ., columns, ;, c, ++, ), {, for, (, int, r, =, 0, ;]
[;, c, <, this, ., columns, ;, c, ++, ), {, for, (, int, r, =, 0, ;, r, <]
[;, c, <, this, ., columns, ;, c, ++, ), {, for, (, int, r, =, 0, ;, r, <]
[., columns, ;, c, ++, ), {, for, (, int, r, =, 0, ;, r, <, this, ., rows, ;]
[., columns, ;, c, ++, ), {, for, (, int, r, =, 0, ;, r, <, this, ., rows, ;]
[for, (, int, r, =, 0, ;, r, <, this, ., rows, ;, r, ++, ), {, int, index, =]
[for, (, int, r, =, 0, ;, r, <, this, ., rows, ;, r, ++, ), {, int, index, =]
[for, (, int, r, =, 0, ;, r, <, this, ., rows, ;, r, ++, ), {, int, index, =]
[int, r, =, 0, ;, r, <, this, ., rows, ;, r, ++, ), {, int, index, =, r, *]
[int, r, =, 0, ;, r, <, this, ., rows, ;, r, ++, ), {, int, index, =, r, *]
[;, r, <, this, ., rows, ;, r, ++, ), {, int, index, =, r, *, this, ., columns, +]
[., rows, ;, r, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (]
[., rows, ;, r, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (]
[;, r, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (, index, >=]
[;, r, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (, index, >=]
[+, c, ;, if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =]
[if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =, (, Block, )]
[if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =, (, Block, )]
[blocks, ., size, (, ), ), {, break, ;, }, Block, b, =, (, Block, ), blocks, ., get, (]
[), {, break, ;, }, Block, b, =, (, Block, ), blocks, ., get, (, index, ), ;, if, (]
[), {, break, ;, }, Block, b, =, (, Block, ), blocks, ., get, (, index, ), ;, if, (]
[break, ;, }, Block, b, =, (, Block, ), blocks, ., get, (, index, ), ;, if, (, b, !=]
[Block, b, =, (, Block, ), blocks, ., get, (, index, ), ;, if, (, b, !=, null, ), {]
[Block, b, =, (, Block, ), blocks, ., get, (, index, ), ;, if, (, b, !=, null, ), {]
[Block, ), blocks, ., get, (, index, ), ;, if, (, b, !=, null, ), {, b, ., setBounds, (]
[(, index, ), ;, if, (, b, !=, null, ), {, b, ., setBounds, (, new, Rectangle2D, ., Double, (]
[(, index, ), ;, if, (, b, !=, null, ), {, b, ., setBounds, (, new, Rectangle2D, ., Double, (]
[), ;, if, (, b, !=, null, ), {, b, ., setBounds, (, new, Rectangle2D, ., Double, (, c, *]
[if, (, b, !=, null, ), {, b, ., setBounds, (, new, Rectangle2D, ., Double, (, c, *, width, ,]
[if, (, b, !=, null, ), {, b, ., setBounds, (, new, Rectangle2D, ., Double, (, c, *, width, ,]
[b, !=, null, ), {, b, ., setBounds, (, new, Rectangle2D, ., Double, (, c, *, width, ,, r, *]
[null, ), {, b, ., setBounds, (, new, Rectangle2D, ., Double, (, c, *, width, ,, r, *, height, ,]
[{, b, ., setBounds, (, new, Rectangle2D, ., Double, (, c, *, width, ,, r, *, height, ,, width, ,]
[Double, (, c, *, width, ,, r, *, height, ,, width, ,, height, ), ), ;, }, }, }, return]
[*, width, ,, r, *, height, ,, width, ,, height, ), ), ;, }, }, }, return, new, Size2D, (]
[*, width, ,, r, *, height, ,, width, ,, height, ), ), ;, }, }, }, return, new, Size2D, (]
[*, width, ,, r, *, height, ,, width, ,, height, ), ), ;, }, }, }, return, new, Size2D, (]
[*, height, ,, width, ,, height, ), ), ;, }, }, }, return, new, Size2D, (, this, ., columns, *]
[,, width, ,, height, ), ), ;, }, }, }, return, new, Size2D, (, this, ., columns, *, width, ,]
[,, width, ,, height, ), ), ;, }, }, }, return, new, Size2D, (, this, ., columns, *, width, ,]
[,, width, ,, height, ), ), ;, }, }, }, return, new, Size2D, (, this, ., columns, *, width, ,]
[), ), ;, }, }, }, return, new, Size2D, (, this, ., columns, *, width, ,, this, ., rows, *]
[), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =]
[), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =, constraint, ., toUnconstrainedHeight, (, ), ;, Size2D, size1, =]
[g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =, constraint, ., toUnconstrainedHeight, (, ), ;, Size2D, size1, =, arrange, (]
[RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =, constraint, ., toUnconstrainedHeight, (, ), ;, Size2D, size1, =, arrange, (, container, ,]
[), {, RectangleConstraint, c1, =, constraint, ., toUnconstrainedHeight, (, ), ;, Size2D, size1, =, arrange, (, container, ,, g2, ,]
[constraint, ., toUnconstrainedHeight, (, ), ;, Size2D, size1, =, arrange, (, container, ,, g2, ,, c1, ), ;, if, (]
[constraint, ., toUnconstrainedHeight, (, ), ;, Size2D, size1, =, arrange, (, container, ,, g2, ,, c1, ), ;, if, (]
[constraint, ., toUnconstrainedHeight, (, ), ;, Size2D, size1, =, arrange, (, container, ,, g2, ,, c1, ), ;, if, (]
[=, arrange, (, container, ,, g2, ,, c1, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (]
[=, arrange, (, container, ,, g2, ,, c1, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (]
[;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (, ), ), ), {, return]
[., contains, (, size1, ., getHeight, (, ), ), ), {, return, size1, ;, }, else, {, double, h, =]
[., contains, (, size1, ., getHeight, (, ), ), ), {, return, size1, ;, }, else, {, double, h, =]
[., contains, (, size1, ., getHeight, (, ), ), ), {, return, size1, ;, }, else, {, double, h, =]
[), ), {, return, size1, ;, }, else, {, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (]
[), ), {, return, size1, ;, }, else, {, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (]
[h, =, constraint, ., getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, c2, =]
[h, =, constraint, ., getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, c2, =]
[getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (]
[constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (, h, ), ;, return]
[size1, ., getHeight, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (, h, ), ;, return, arrange, (]
[getHeight, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (, h, ), ;, return, arrange, (, container, ,]
[), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (, h, ), ;, return, arrange, (, container, ,, g2, ,]
[;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =]
[;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =, constraint, ., toUnconstrainedWidth, (, ), ;, Size2D, size1, =]
[g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =, constraint, ., toUnconstrainedWidth, (, ), ;, Size2D, size1, =, arrange, (]
[RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =, constraint, ., toUnconstrainedWidth, (, ), ;, Size2D, size1, =, arrange, (, container, ,]
[), {, RectangleConstraint, c1, =, constraint, ., toUnconstrainedWidth, (, ), ;, Size2D, size1, =, arrange, (, container, ,, g2, ,]
[constraint, ., toUnconstrainedWidth, (, ), ;, Size2D, size1, =, arrange, (, container, ,, g2, ,, c1, ), ;, if, (]
[constraint, ., toUnconstrainedWidth, (, ), ;, Size2D, size1, =, arrange, (, container, ,, g2, ,, c1, ), ;, if, (]
[constraint, ., toUnconstrainedWidth, (, ), ;, Size2D, size1, =, arrange, (, container, ,, g2, ,, c1, ), ;, if, (]
[=, arrange, (, container, ,, g2, ,, c1, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (]
[=, arrange, (, container, ,, g2, ,, c1, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (]
[;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, size1, ., getWidth, (, ), ), ), {, return]
[., contains, (, size1, ., getWidth, (, ), ), ), {, return, size1, ;, }, else, {, double, w, =]
[., contains, (, size1, ., getWidth, (, ), ), ), {, return, size1, ;, }, else, {, double, w, =]
[., contains, (, size1, ., getWidth, (, ), ), ), {, return, size1, ;, }, else, {, double, w, =]
[), ), {, return, size1, ;, }, else, {, double, w, =, constraint, ., getWidthRange, (, ), ., constrain, (]
[), ), {, return, size1, ;, }, else, {, double, w, =, constraint, ., getWidthRange, (, ), ., constrain, (]
[w, =, constraint, ., getWidthRange, (, ), ., constrain, (, size1, ., getWidth, (, ), ), ;, RectangleConstraint, c2, =]
[w, =, constraint, ., getWidthRange, (, ), ., constrain, (, size1, ., getWidth, (, ), ), ;, RectangleConstraint, c2, =]
[getWidthRange, (, ), ., constrain, (, size1, ., getWidth, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedWidth, (]
[constrain, (, size1, ., getWidth, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedWidth, (, w, ), ;, return]
[size1, ., getWidth, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedWidth, (, w, ), ;, return, arrange, (]
[getWidth, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedWidth, (, w, ), ;, return, arrange, (, container, ,]
[), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedWidth, (, w, ), ;, return, arrange, (, container, ,, g2, ,]
[;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =]
[;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =, constraint, ., toUnconstrainedWidth, (, ), ;, Size2D, size1, =]
[g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =, constraint, ., toUnconstrainedWidth, (, ), ;, Size2D, size1, =, arrange, (]
[RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =, constraint, ., toUnconstrainedWidth, (, ), ;, Size2D, size1, =, arrange, (, container, ,]
[), {, RectangleConstraint, c1, =, constraint, ., toUnconstrainedWidth, (, ), ;, Size2D, size1, =, arrange, (, container, ,, g2, ,]
[constraint, ., toUnconstrainedWidth, (, ), ;, Size2D, size1, =, arrange, (, container, ,, g2, ,, c1, ), ;, if, (]
[constraint, ., toUnconstrainedWidth, (, ), ;, Size2D, size1, =, arrange, (, container, ,, g2, ,, c1, ), ;, if, (]
[constraint, ., toUnconstrainedWidth, (, ), ;, Size2D, size1, =, arrange, (, container, ,, g2, ,, c1, ), ;, if, (]
[=, arrange, (, container, ,, g2, ,, c1, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (]
[=, arrange, (, container, ,, g2, ,, c1, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (]
[;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, size1, ., getWidth, (, ), ), ), {, return]
[., contains, (, size1, ., getWidth, (, ), ), ), {, return, size1, ;, }, else, {, double, w, =]
[., contains, (, size1, ., getWidth, (, ), ), ), {, return, size1, ;, }, else, {, double, w, =]
[., contains, (, size1, ., getWidth, (, ), ), ), {, return, size1, ;, }, else, {, double, w, =]
[), ), {, return, size1, ;, }, else, {, double, w, =, constraint, ., getWidthRange, (, ), ., constrain, (]
[), ), {, return, size1, ;, }, else, {, double, w, =, constraint, ., getWidthRange, (, ), ., constrain, (]
[w, =, constraint, ., getWidthRange, (, ), ., constrain, (, size1, ., getWidth, (, ), ), ;, RectangleConstraint, c2, =]
[w, =, constraint, ., getWidthRange, (, ), ., constrain, (, size1, ., getWidth, (, ), ), ;, RectangleConstraint, c2, =]
[getWidthRange, (, ), ., constrain, (, size1, ., getWidth, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedWidth, (]
[constrain, (, size1, ., getWidth, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedWidth, (, w, ), ;, return]
[size1, ., getWidth, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedWidth, (, w, ), ;, return, arrange, (]
[getWidth, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedWidth, (, w, ), ;, return, arrange, (, container, ,]
[), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedWidth, (, w, ), ;, return, arrange, (, container, ,, g2, ,]
[;, }, }, protected, Size2D, arrangeNR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =]
[;, }, }, protected, Size2D, arrangeNR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =, constraint, ., toUnconstrainedHeight, (, ), ;, Size2D, size1, =]
[g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =, constraint, ., toUnconstrainedHeight, (, ), ;, Size2D, size1, =, arrange, (]
[RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =, constraint, ., toUnconstrainedHeight, (, ), ;, Size2D, size1, =, arrange, (, container, ,]
[), {, RectangleConstraint, c1, =, constraint, ., toUnconstrainedHeight, (, ), ;, Size2D, size1, =, arrange, (, container, ,, g2, ,]
[constraint, ., toUnconstrainedHeight, (, ), ;, Size2D, size1, =, arrange, (, container, ,, g2, ,, c1, ), ;, if, (]
[constraint, ., toUnconstrainedHeight, (, ), ;, Size2D, size1, =, arrange, (, container, ,, g2, ,, c1, ), ;, if, (]
[constraint, ., toUnconstrainedHeight, (, ), ;, Size2D, size1, =, arrange, (, container, ,, g2, ,, c1, ), ;, if, (]
[=, arrange, (, container, ,, g2, ,, c1, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (]
[=, arrange, (, container, ,, g2, ,, c1, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (]
[;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (, ), ), ), {, return]
[., contains, (, size1, ., getHeight, (, ), ), ), {, return, size1, ;, }, else, {, double, h, =]
[., contains, (, size1, ., getHeight, (, ), ), ), {, return, size1, ;, }, else, {, double, h, =]
[., contains, (, size1, ., getHeight, (, ), ), ), {, return, size1, ;, }, else, {, double, h, =]
[), ), {, return, size1, ;, }, else, {, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (]
[), ), {, return, size1, ;, }, else, {, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (]
[h, =, constraint, ., getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, c2, =]
[h, =, constraint, ., getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, c2, =]
[getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (]
[constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (, h, ), ;, return]
[size1, ., getHeight, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (, h, ), ;, return, arrange, (]
[getHeight, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (, h, ), ;, return, arrange, (, container, ,]
[), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (, h, ), ;, return, arrange, (, container, ,, g2, ,]
[;, }, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, size1, =]
[}, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, size1, =, arrange, (]
[Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, size1, =, arrange, (, container, ,]
[(, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, size1, =, arrange, (, container, ,, g2, ,]
[(, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, size1, =, arrange, (, container, ,, g2, ,]
[RectangleConstraint, constraint, ), {, Size2D, size1, =, arrange, (, container, ,, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (]
[RectangleConstraint, constraint, ), {, Size2D, size1, =, arrange, (, container, ,, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (]
[RectangleConstraint, constraint, ), {, Size2D, size1, =, arrange, (, container, ,, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (]
[(, container, ,, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (]
[(, container, ,, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (]
[if, (, constraint, ., getWidthRange, (, ), ., contains, (, size1, ., getWidth, (, ), ), ), {, if, (]
[if, (, constraint, ., getWidthRange, (, ), ., contains, (, size1, ., getWidth, (, ), ), ), {, if, (]
[if, (, constraint, ., getWidthRange, (, ), ., contains, (, size1, ., getWidth, (, ), ), ), {, if, (]
[contains, (, size1, ., getWidth, (, ), ), ), {, if, (, constraint, ., getHeightRange, (, ), ., contains, (]
[contains, (, size1, ., getWidth, (, ), ), ), {, if, (, constraint, ., getHeightRange, (, ), ., contains, (]
[{, if, (, constraint, ., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (, ), ), ), {, return]
[., contains, (, size1, ., getHeight, (, ), ), ), {, return, size1, ;, }, else, {, double, h, =]
[., contains, (, size1, ., getHeight, (, ), ), ), {, return, size1, ;, }, else, {, double, h, =]
[., contains, (, size1, ., getHeight, (, ), ), ), {, return, size1, ;, }, else, {, double, h, =]
[), ), {, return, size1, ;, }, else, {, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (]
[), ), {, return, size1, ;, }, else, {, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (]
[h, =, constraint, ., getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, cc, =]
[., getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (]
[., getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (]
[(, size1, ., getHeight, (, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (, size1, ., getWidth, (, ), ,]
[(, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (, size1, ., getWidth, (, ), ,, h, ), ;, return]
[), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (, size1, ., getWidth, (, ), ,, h, ), ;, return, arrangeFF, (]
[RectangleConstraint, cc, =, new, RectangleConstraint, (, size1, ., getWidth, (, ), ,, h, ), ;, return, arrangeFF, (, container, ,]
[=, new, RectangleConstraint, (, size1, ., getWidth, (, ), ,, h, ), ;, return, arrangeFF, (, container, ,, g2, ,]
[,, h, ), ;, return, arrangeFF, (, container, ,, g2, ,, cc, ), ;, }, }, else, {, if, (]
[,, h, ), ;, return, arrangeFF, (, container, ,, g2, ,, cc, ), ;, }, }, else, {, if, (]
[,, h, ), ;, return, arrangeFF, (, container, ,, g2, ,, cc, ), ;, }, }, else, {, if, (]
[,, g2, ,, cc, ), ;, }, }, else, {, if, (, constraint, ., getHeightRange, (, ), ., contains, (]
[,, g2, ,, cc, ), ;, }, }, else, {, if, (, constraint, ., getHeightRange, (, ), ., contains, (]
[(, constraint, ., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (, ), ), ), {, double, w, =]
[(, constraint, ., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (, ), ), ), {, double, w, =]
[(, constraint, ., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (, ), ), ), {, double, w, =]
[(, size1, ., getHeight, (, ), ), ), {, double, w, =, constraint, ., getWidthRange, (, ), ., constrain, (]
[(, size1, ., getHeight, (, ), ), ), {, double, w, =, constraint, ., getWidthRange, (, ), ., constrain, (]
[w, =, constraint, ., getWidthRange, (, ), ., constrain, (, size1, ., getWidth, (, ), ), ;, RectangleConstraint, cc, =]
[., getWidthRange, (, ), ., constrain, (, size1, ., getWidth, (, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (]
[(, ), ., constrain, (, size1, ., getWidth, (, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (, w, ,]
[(, ), ., constrain, (, size1, ., getWidth, (, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (, w, ,]
[(, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (, w, ,, size1, ., getHeight, (, ), ), ;, return]
[), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (, w, ,, size1, ., getHeight, (, ), ), ;, return, arrangeFF, (]
[RectangleConstraint, cc, =, new, RectangleConstraint, (, w, ,, size1, ., getHeight, (, ), ), ;, return, arrangeFF, (, container, ,]
[=, new, RectangleConstraint, (, w, ,, size1, ., getHeight, (, ), ), ;, return, arrangeFF, (, container, ,, g2, ,]
[(, ), ), ;, return, arrangeFF, (, container, ,, g2, ,, cc, ), ;, }, else, {, double, w, =]
[(, ), ), ;, return, arrangeFF, (, container, ,, g2, ,, cc, ), ;, }, else, {, double, w, =]
[(, ), ), ;, return, arrangeFF, (, container, ,, g2, ,, cc, ), ;, }, else, {, double, w, =]
[,, g2, ,, cc, ), ;, }, else, {, double, w, =, constraint, ., getWidthRange, (, ), ., constrain, (]
[,, g2, ,, cc, ), ;, }, else, {, double, w, =, constraint, ., getWidthRange, (, ), ., constrain, (]
[w, =, constraint, ., getWidthRange, (, ), ., constrain, (, size1, ., getWidth, (, ), ), ;, double, h, =]
[w, =, constraint, ., getWidthRange, (, ), ., constrain, (, size1, ., getWidth, (, ), ), ;, double, h, =]
[w, =, constraint, ., getWidthRange, (, ), ., constrain, (, size1, ., getWidth, (, ), ), ;, double, h, =]
[constrain, (, size1, ., getWidth, (, ), ), ;, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (]
[constrain, (, size1, ., getWidth, (, ), ), ;, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (]
[h, =, constraint, ., getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, cc, =]
[., getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (]
[(, ), ., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (, w, ,]
[(, size1, ., getHeight, (, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (, w, ,, h, ), ;, return]
[., getHeight, (, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (, w, ,, h, ), ;, return, arrangeFF, (]
[(, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (, w, ,, h, ), ;, return, arrangeFF, (, container, ,]
[), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (, w, ,, h, ), ;, return, arrangeFF, (, container, ,, g2, ,]
[}, }, }, protected, Size2D, arrangeFN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, width, =]
[}, }, }, protected, Size2D, arrangeFN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, width, =]
[}, }, }, protected, Size2D, arrangeFN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, width, =]
[(, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, width, =, constraint, ., getWidth, (, ), /]
[(, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, width, =, constraint, ., getWidth, (, ), /]
[RectangleConstraint, constraint, ), {, double, width, =, constraint, ., getWidth, (, ), /, this, ., columns, ;, RectangleConstraint, bc, =]
[RectangleConstraint, constraint, ), {, double, width, =, constraint, ., getWidth, (, ), /, this, ., columns, ;, RectangleConstraint, bc, =]
[double, width, =, constraint, ., getWidth, (, ), /, this, ., columns, ;, RectangleConstraint, bc, =, constraint, ., toFixedWidth, (]
[(, ), /, this, ., columns, ;, RectangleConstraint, bc, =, constraint, ., toFixedWidth, (, width, ), ;, List, blocks, =]
[(, ), /, this, ., columns, ;, RectangleConstraint, bc, =, constraint, ., toFixedWidth, (, width, ), ;, List, blocks, =]
[=, constraint, ., toFixedWidth, (, width, ), ;, List, blocks, =, container, ., getBlocks, (, ), ;, double, maxH, =]
[;, List, blocks, =, container, ., getBlocks, (, ), ;, double, maxH, =, 0.0, ;, for, (, int, r, =]
[blocks, =, container, ., getBlocks, (, ), ;, double, maxH, =, 0.0, ;, for, (, int, r, =, 0, ;]
[blocks, =, container, ., getBlocks, (, ), ;, double, maxH, =, 0.0, ;, for, (, int, r, =, 0, ;]
[container, ., getBlocks, (, ), ;, double, maxH, =, 0.0, ;, for, (, int, r, =, 0, ;, r, <]
[container, ., getBlocks, (, ), ;, double, maxH, =, 0.0, ;, for, (, int, r, =, 0, ;, r, <]
[), ;, double, maxH, =, 0.0, ;, for, (, int, r, =, 0, ;, r, <, this, ., rows, ;]
[), ;, double, maxH, =, 0.0, ;, for, (, int, r, =, 0, ;, r, <, this, ., rows, ;]
[int, r, =, 0, ;, r, <, this, ., rows, ;, r, ++, ), {, for, (, int, c, =]
[=, 0, ;, r, <, this, ., rows, ;, r, ++, ), {, for, (, int, c, =, 0, ;]
[=, 0, ;, r, <, this, ., rows, ;, r, ++, ), {, for, (, int, c, =, 0, ;]
[;, r, <, this, ., rows, ;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <]
[;, r, <, this, ., rows, ;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <]
[., rows, ;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <, this, ., columns, ;]
[., rows, ;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <, this, ., columns, ;]
[for, (, int, c, =, 0, ;, c, <, this, ., columns, ;, c, ++, ), {, int, index, =]
[for, (, int, c, =, 0, ;, c, <, this, ., columns, ;, c, ++, ), {, int, index, =]
[for, (, int, c, =, 0, ;, c, <, this, ., columns, ;, c, ++, ), {, int, index, =]
[int, c, =, 0, ;, c, <, this, ., columns, ;, c, ++, ), {, int, index, =, r, *]
[int, c, =, 0, ;, c, <, this, ., columns, ;, c, ++, ), {, int, index, =, r, *]
[;, c, <, this, ., columns, ;, c, ++, ), {, int, index, =, r, *, this, ., columns, +]
[., columns, ;, c, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (]
[., columns, ;, c, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (]
[;, c, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (, index, >=]
[;, c, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (, index, >=]
[+, c, ;, if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =]
[if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =, (, Block, )]
[if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =, (, Block, )]
[blocks, ., size, (, ), ), {, break, ;, }, Block, b, =, (, Block, ), blocks, ., get, (]
[), {, break, ;, }, Block, b, =, (, Block, ), blocks, ., get, (, index, ), ;, if, (]
[), {, break, ;, }, Block, b, =, (, Block, ), blocks, ., get, (, index, ), ;, if, (]
[break, ;, }, Block, b, =, (, Block, ), blocks, ., get, (, index, ), ;, if, (, b, !=]
[(, Block, ), blocks, ., get, (, index, ), ;, if, (, b, !=, null, ), {, Size2D, s, =]
[(, Block, ), blocks, ., get, (, index, ), ;, if, (, b, !=, null, ), {, Size2D, s, =]
[., get, (, index, ), ;, if, (, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (]
[(, index, ), ;, if, (, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,]
[;, if, (, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;]
[(, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;, maxH, =]
[(, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;, maxH, =]
[), {, Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;, maxH, =, Math, ., max, (]
[Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;, maxH, =, Math, ., max, (, maxH, ,]
[Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;, maxH, =, Math, ., max, (, maxH, ,]
[=, Math, ., max, (, maxH, ,, s, ., getHeight, (, ), ), ;, }, }, }, RectangleConstraint, cc, =]
[=, Math, ., max, (, maxH, ,, s, ., getHeight, (, ), ), ;, }, }, }, RectangleConstraint, cc, =]
[(, maxH, ,, s, ., getHeight, (, ), ), ;, }, }, }, RectangleConstraint, cc, =, constraint, ., toFixedHeight, (]
[(, maxH, ,, s, ., getHeight, (, ), ), ;, }, }, }, RectangleConstraint, cc, =, constraint, ., toFixedHeight, (]
[,, s, ., getHeight, (, ), ), ;, }, }, }, RectangleConstraint, cc, =, constraint, ., toFixedHeight, (, maxH, *]
[,, s, ., getHeight, (, ), ), ;, }, }, }, RectangleConstraint, cc, =, constraint, ., toFixedHeight, (, maxH, *]
[), ;, }, }, }, RectangleConstraint, cc, =, constraint, ., toFixedHeight, (, maxH, *, this, ., rows, ), ;, return]
[}, }, }, RectangleConstraint, cc, =, constraint, ., toFixedHeight, (, maxH, *, this, ., rows, ), ;, return, arrange, (]
[}, RectangleConstraint, cc, =, constraint, ., toFixedHeight, (, maxH, *, this, ., rows, ), ;, return, arrange, (, container, ,]
[cc, =, constraint, ., toFixedHeight, (, maxH, *, this, ., rows, ), ;, return, arrange, (, container, ,, g2, ,]
[), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, height, =]
[), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, height, =]
[), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, height, =]
[(, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, height, =, constraint, ., getHeight, (, ), /]
[(, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, height, =, constraint, ., getHeight, (, ), /]
[RectangleConstraint, constraint, ), {, double, height, =, constraint, ., getHeight, (, ), /, this, ., rows, ;, RectangleConstraint, bc, =]
[RectangleConstraint, constraint, ), {, double, height, =, constraint, ., getHeight, (, ), /, this, ., rows, ;, RectangleConstraint, bc, =]
[double, height, =, constraint, ., getHeight, (, ), /, this, ., rows, ;, RectangleConstraint, bc, =, constraint, ., toFixedHeight, (]
[(, ), /, this, ., rows, ;, RectangleConstraint, bc, =, constraint, ., toFixedHeight, (, height, ), ;, List, blocks, =]
[(, ), /, this, ., rows, ;, RectangleConstraint, bc, =, constraint, ., toFixedHeight, (, height, ), ;, List, blocks, =]
[=, constraint, ., toFixedHeight, (, height, ), ;, List, blocks, =, container, ., getBlocks, (, ), ;, double, maxW, =]
[;, List, blocks, =, container, ., getBlocks, (, ), ;, double, maxW, =, 0.0, ;, for, (, int, r, =]
[blocks, =, container, ., getBlocks, (, ), ;, double, maxW, =, 0.0, ;, for, (, int, r, =, 0, ;]
[blocks, =, container, ., getBlocks, (, ), ;, double, maxW, =, 0.0, ;, for, (, int, r, =, 0, ;]
[container, ., getBlocks, (, ), ;, double, maxW, =, 0.0, ;, for, (, int, r, =, 0, ;, r, <]
[container, ., getBlocks, (, ), ;, double, maxW, =, 0.0, ;, for, (, int, r, =, 0, ;, r, <]
[), ;, double, maxW, =, 0.0, ;, for, (, int, r, =, 0, ;, r, <, this, ., rows, ;]
[), ;, double, maxW, =, 0.0, ;, for, (, int, r, =, 0, ;, r, <, this, ., rows, ;]
[int, r, =, 0, ;, r, <, this, ., rows, ;, r, ++, ), {, for, (, int, c, =]
[=, 0, ;, r, <, this, ., rows, ;, r, ++, ), {, for, (, int, c, =, 0, ;]
[=, 0, ;, r, <, this, ., rows, ;, r, ++, ), {, for, (, int, c, =, 0, ;]
[;, r, <, this, ., rows, ;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <]
[;, r, <, this, ., rows, ;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <]
[., rows, ;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <, this, ., columns, ;]
[., rows, ;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <, this, ., columns, ;]
[for, (, int, c, =, 0, ;, c, <, this, ., columns, ;, c, ++, ), {, int, index, =]
[for, (, int, c, =, 0, ;, c, <, this, ., columns, ;, c, ++, ), {, int, index, =]
[for, (, int, c, =, 0, ;, c, <, this, ., columns, ;, c, ++, ), {, int, index, =]
[int, c, =, 0, ;, c, <, this, ., columns, ;, c, ++, ), {, int, index, =, r, *]
[int, c, =, 0, ;, c, <, this, ., columns, ;, c, ++, ), {, int, index, =, r, *]
[;, c, <, this, ., columns, ;, c, ++, ), {, int, index, =, r, *, this, ., columns, +]
[., columns, ;, c, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (]
[., columns, ;, c, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (]
[;, c, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (, index, >=]
[;, c, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (, index, >=]
[+, c, ;, if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =]
[if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =, (, Block, )]
[if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =, (, Block, )]
[blocks, ., size, (, ), ), {, break, ;, }, Block, b, =, (, Block, ), blocks, ., get, (]
[), {, break, ;, }, Block, b, =, (, Block, ), blocks, ., get, (, index, ), ;, if, (]
[), {, break, ;, }, Block, b, =, (, Block, ), blocks, ., get, (, index, ), ;, if, (]
[break, ;, }, Block, b, =, (, Block, ), blocks, ., get, (, index, ), ;, if, (, b, !=]
[(, Block, ), blocks, ., get, (, index, ), ;, if, (, b, !=, null, ), {, Size2D, s, =]
[(, Block, ), blocks, ., get, (, index, ), ;, if, (, b, !=, null, ), {, Size2D, s, =]
[., get, (, index, ), ;, if, (, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (]
[(, index, ), ;, if, (, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,]
[;, if, (, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;]
[(, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;, maxW, =]
[(, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;, maxW, =]
[), {, Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;, maxW, =, Math, ., max, (]
[Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;, maxW, =, Math, ., max, (, maxW, ,]
[Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;, maxW, =, Math, ., max, (, maxW, ,]
[=, Math, ., max, (, maxW, ,, s, ., getWidth, (, ), ), ;, }, }, }, RectangleConstraint, cc, =]
[=, Math, ., max, (, maxW, ,, s, ., getWidth, (, ), ), ;, }, }, }, RectangleConstraint, cc, =]
[(, maxW, ,, s, ., getWidth, (, ), ), ;, }, }, }, RectangleConstraint, cc, =, constraint, ., toFixedWidth, (]
[(, maxW, ,, s, ., getWidth, (, ), ), ;, }, }, }, RectangleConstraint, cc, =, constraint, ., toFixedWidth, (]
[,, s, ., getWidth, (, ), ), ;, }, }, }, RectangleConstraint, cc, =, constraint, ., toFixedWidth, (, maxW, *]
[,, s, ., getWidth, (, ), ), ;, }, }, }, RectangleConstraint, cc, =, constraint, ., toFixedWidth, (, maxW, *]
[), ;, }, }, }, RectangleConstraint, cc, =, constraint, ., toFixedWidth, (, maxW, *, this, ., columns, ), ;, return]
[}, }, }, RectangleConstraint, cc, =, constraint, ., toFixedWidth, (, maxW, *, this, ., columns, ), ;, return, arrange, (]
[}, RectangleConstraint, cc, =, constraint, ., toFixedWidth, (, maxW, *, this, ., columns, ), ;, return, arrange, (, container, ,]
[cc, =, constraint, ., toFixedWidth, (, maxW, *, this, ., columns, ), ;, return, arrange, (, container, ,, g2, ,]
[), ;, }, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[), ;, }, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[}, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[(, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, GridArrangement, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, GridArrangement, ), ), {, return, false, ;, }, GridArrangement, that, =]
[if, (, !, (, obj, instanceof, GridArrangement, ), ), {, return, false, ;, }, GridArrangement, that, =, (, GridArrangement, )]
[obj, instanceof, GridArrangement, ), ), {, return, false, ;, }, GridArrangement, that, =, (, GridArrangement, ), obj, ;, if, (]
[obj, instanceof, GridArrangement, ), ), {, return, false, ;, }, GridArrangement, that, =, (, GridArrangement, ), obj, ;, if, (]
[obj, instanceof, GridArrangement, ), ), {, return, false, ;, }, GridArrangement, that, =, (, GridArrangement, ), obj, ;, if, (]
[), {, return, false, ;, }, GridArrangement, that, =, (, GridArrangement, ), obj, ;, if, (, this, ., columns, !=]
[), {, return, false, ;, }, GridArrangement, that, =, (, GridArrangement, ), obj, ;, if, (, this, ., columns, !=]
[GridArrangement, that, =, (, GridArrangement, ), obj, ;, if, (, this, ., columns, !=, that, ., columns, ), {, return]
[), obj, ;, if, (, this, ., columns, !=, that, ., columns, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, this, ., columns, !=, that, ., columns, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, this, ., columns, !=, that, ., columns, ), {, return, false, ;, }, if, (]
[(, this, ., columns, !=, that, ., columns, ), {, return, false, ;, }, if, (, this, ., rows, !=]
[(, this, ., columns, !=, that, ., columns, ), {, return, false, ;, }, if, (, this, ., rows, !=]
[., columns, ), {, return, false, ;, }, if, (, this, ., rows, !=, that, ., rows, ), {, return]
[return, false, ;, }, if, (, this, ., rows, !=, that, ., rows, ), {, return, false, ;, }, return]
