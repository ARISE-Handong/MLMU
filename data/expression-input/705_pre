[<, List, <, JSModule, >, >, modulesByDepth, ;, private, Map, <, JSModule, ,, Set, <, JSModule, >, >, dependencyMap, =]
[<, List, <, JSModule, >, >, modulesByDepth, ;, private, Map, <, JSModule, ,, Set, <, JSModule, >, >, dependencyMap, =]
[>, dependencyMap, =, Maps, ., newHashMap, (, ), ;, public, JSModuleGraph, (, JSModule, [, ], modulesInDepOrder, ), {, this, (]
[>, dependencyMap, =, Maps, ., newHashMap, (, ), ;, public, JSModuleGraph, (, JSModule, [, ], modulesInDepOrder, ), {, this, (]
[., newHashMap, (, ), ;, public, JSModuleGraph, (, JSModule, [, ], modulesInDepOrder, ), {, this, (, ImmutableList, ., copyOf, (]
[(, ImmutableList, ., copyOf, (, modulesInDepOrder, ), ), ;, }, public, JSModuleGraph, (, List, <, JSModule, >, modulesInDepOrder, ), {]
[(, ImmutableList, ., copyOf, (, modulesInDepOrder, ), ), ;, }, public, JSModuleGraph, (, List, <, JSModule, >, modulesInDepOrder, ), {]
[(, modulesInDepOrder, ), ), ;, }, public, JSModuleGraph, (, List, <, JSModule, >, modulesInDepOrder, ), {, Preconditions, ., checkState, (]
[(, modulesInDepOrder, ), ), ;, }, public, JSModuleGraph, (, List, <, JSModule, >, modulesInDepOrder, ), {, Preconditions, ., checkState, (]
[(, modulesInDepOrder, ), ), ;, }, public, JSModuleGraph, (, List, <, JSModule, >, modulesInDepOrder, ), {, Preconditions, ., checkState, (]
[public, JSModuleGraph, (, List, <, JSModule, >, modulesInDepOrder, ), {, Preconditions, ., checkState, (, modulesInDepOrder, ., size, (, ), ==]
[public, JSModuleGraph, (, List, <, JSModule, >, modulesInDepOrder, ), {, Preconditions, ., checkState, (, modulesInDepOrder, ., size, (, ), ==]
[public, JSModuleGraph, (, List, <, JSModule, >, modulesInDepOrder, ), {, Preconditions, ., checkState, (, modulesInDepOrder, ., size, (, ), ==]
[<, JSModule, >, modulesInDepOrder, ), {, Preconditions, ., checkState, (, modulesInDepOrder, ., size, (, ), ==, Sets, ., newHashSet, (]
[., checkState, (, modulesInDepOrder, ., size, (, ), ==, Sets, ., newHashSet, (, modulesInDepOrder, ), ., size, (, ), ,]
[modulesInDepOrder, ., size, (, ), ==, Sets, ., newHashSet, (, modulesInDepOrder, ), ., size, (, ), ,, "Found duplicate modules", ), ;]
[size, (, ), ==, Sets, ., newHashSet, (, modulesInDepOrder, ), ., size, (, ), ,, "Found duplicate modules", ), ;, modules, =]
[size, (, ), ==, Sets, ., newHashSet, (, modulesInDepOrder, ), ., size, (, ), ,, "Found duplicate modules", ), ;, modules, =]
[Sets, ., newHashSet, (, modulesInDepOrder, ), ., size, (, ), ,, "Found duplicate modules", ), ;, modules, =, ImmutableList, ., copyOf, (]
[(, modulesInDepOrder, ), ., size, (, ), ,, "Found duplicate modules", ), ;, modules, =, ImmutableList, ., copyOf, (, modulesInDepOrder, ), ;]
[), ., size, (, ), ,, "Found duplicate modules", ), ;, modules, =, ImmutableList, ., copyOf, (, modulesInDepOrder, ), ;, modulesByDepth, =]
[), ., size, (, ), ,, "Found duplicate modules", ), ;, modules, =, ImmutableList, ., copyOf, (, modulesInDepOrder, ), ;, modulesByDepth, =]
[ImmutableList, ., copyOf, (, modulesInDepOrder, ), ;, modulesByDepth, =, Lists, ., newArrayList, (, ), ;, for, (, JSModule, module, :]
[;, modulesByDepth, =, Lists, ., newArrayList, (, ), ;, for, (, JSModule, module, :, modulesInDepOrder, ), {, int, depth, =]
[), ;, for, (, JSModule, module, :, modulesInDepOrder, ), {, int, depth, =, 0, ;, for, (, JSModule, dep, :]
[), ;, for, (, JSModule, module, :, modulesInDepOrder, ), {, int, depth, =, 0, ;, for, (, JSModule, dep, :]
[int, depth, =, 0, ;, for, (, JSModule, dep, :, module, ., getDependencies, (, ), ), {, int, depDepth, =]
[int, depth, =, 0, ;, for, (, JSModule, dep, :, module, ., getDependencies, (, ), ), {, int, depDepth, =]
[dep, :, module, ., getDependencies, (, ), ), {, int, depDepth, =, dep, ., getDepth, (, ), ;, if, (]
[dep, :, module, ., getDependencies, (, ), ), {, int, depDepth, =, dep, ., getDepth, (, ), ;, if, (]
[module, ., getDependencies, (, ), ), {, int, depDepth, =, dep, ., getDepth, (, ), ;, if, (, depDepth, <]
[), ), {, int, depDepth, =, dep, ., getDepth, (, ), ;, if, (, depDepth, <, 0, ), {, throw]
[int, depDepth, =, dep, ., getDepth, (, ), ;, if, (, depDepth, <, 0, ), {, throw, new, ModuleDependenceException, (]
[int, depDepth, =, dep, ., getDepth, (, ), ;, if, (, depDepth, <, 0, ), {, throw, new, ModuleDependenceException, (]
[., getDepth, (, ), ;, if, (, depDepth, <, 0, ), {, throw, new, ModuleDependenceException, (, String, ., format, (]
[(, ), ;, if, (, depDepth, <, 0, ), {, throw, new, ModuleDependenceException, (, String, ., format, (, "Modules not in dependency order: %s preceded %s", ,]
[(, ), ;, if, (, depDepth, <, 0, ), {, throw, new, ModuleDependenceException, (, String, ., format, (, "Modules not in dependency order: %s preceded %s", ,]
[<, 0, ), {, throw, new, ModuleDependenceException, (, String, ., format, (, "Modules not in dependency order: %s preceded %s", ,, module, ., getName, (, ), ,]
[<, 0, ), {, throw, new, ModuleDependenceException, (, String, ., format, (, "Modules not in dependency order: %s preceded %s", ,, module, ., getName, (, ), ,]
[(, String, ., format, (, "Modules not in dependency order: %s preceded %s", ,, module, ., getName, (, ), ,, dep, ., getName, (, ), ), ,]
[., format, (, "Modules not in dependency order: %s preceded %s", ,, module, ., getName, (, ), ,, dep, ., getName, (, ), ), ,, module, ,]
[,, module, ., getName, (, ), ,, dep, ., getName, (, ), ), ,, module, ,, dep, ), ;, }]
[., getName, (, ), ,, dep, ., getName, (, ), ), ,, module, ,, dep, ), ;, }, depth, =]
[., getName, (, ), ,, dep, ., getName, (, ), ), ,, module, ,, dep, ), ;, }, depth, =]
[,, dep, ., getName, (, ), ), ,, module, ,, dep, ), ;, }, depth, =, Math, ., max, (]
[., getName, (, ), ), ,, module, ,, dep, ), ;, }, depth, =, Math, ., max, (, depth, ,]
[., getName, (, ), ), ,, module, ,, dep, ), ;, }, depth, =, Math, ., max, (, depth, ,]
[(, ), ), ,, module, ,, dep, ), ;, }, depth, =, Math, ., max, (, depth, ,, depDepth, +]
[module, ,, dep, ), ;, }, depth, =, Math, ., max, (, depth, ,, depDepth, +, 1, ), ;, }]
[module, ,, dep, ), ;, }, depth, =, Math, ., max, (, depth, ,, depDepth, +, 1, ), ;, }]
[;, }, depth, =, Math, ., max, (, depth, ,, depDepth, +, 1, ), ;, }, module, ., setDepth, (]
[., max, (, depth, ,, depDepth, +, 1, ), ;, }, module, ., setDepth, (, depth, ), ;, if, (]
[., max, (, depth, ,, depDepth, +, 1, ), ;, }, module, ., setDepth, (, depth, ), ;, if, (]
[(, depth, ,, depDepth, +, 1, ), ;, }, module, ., setDepth, (, depth, ), ;, if, (, depth, ==]
[(, depth, ,, depDepth, +, 1, ), ;, }, module, ., setDepth, (, depth, ), ;, if, (, depth, ==]
[;, }, module, ., setDepth, (, depth, ), ;, if, (, depth, ==, modulesByDepth, ., size, (, ), ), {]
[;, }, module, ., setDepth, (, depth, ), ;, if, (, depth, ==, modulesByDepth, ., size, (, ), ), {]
[setDepth, (, depth, ), ;, if, (, depth, ==, modulesByDepth, ., size, (, ), ), {, modulesByDepth, ., add, (]
[., size, (, ), ), {, modulesByDepth, ., add, (, new, ArrayList, <, JSModule, >, (, ), ), ;, }]
[., size, (, ), ), {, modulesByDepth, ., add, (, new, ArrayList, <, JSModule, >, (, ), ), ;, }]
[., size, (, ), ), {, modulesByDepth, ., add, (, new, ArrayList, <, JSModule, >, (, ), ), ;, }]
[), {, modulesByDepth, ., add, (, new, ArrayList, <, JSModule, >, (, ), ), ;, }, modulesByDepth, ., get, (]
[(, new, ArrayList, <, JSModule, >, (, ), ), ;, }, modulesByDepth, ., get, (, depth, ), ., add, (]
[(, depth, ), ., add, (, module, ), ;, }, }, Iterable, <, JSModule, >, getAllModules, (, ), {, return]
[}, }, Iterable, <, JSModule, >, getAllModules, (, ), {, return, modules, ;, }, int, getModuleCount, (, ), {, return]
[}, }, Iterable, <, JSModule, >, getAllModules, (, ), {, return, modules, ;, }, int, getModuleCount, (, ), {, return]
[}, int, getModuleCount, (, ), {, return, modules, ., size, (, ), ;, }, JSModule, getRootModule, (, ), {, return]
[}, int, getModuleCount, (, ), {, return, modules, ., size, (, ), ;, }, JSModule, getRootModule, (, ), {, return]
[), {, return, modules, ., size, (, ), ;, }, JSModule, getRootModule, (, ), {, return, Iterables, ., getOnlyElement, (]
[), {, return, modules, ., size, (, ), ;, }, JSModule, getRootModule, (, ), {, return, Iterables, ., getOnlyElement, (]
[., size, (, ), ;, }, JSModule, getRootModule, (, ), {, return, Iterables, ., getOnlyElement, (, modulesByDepth, ., get, (]
[., getOnlyElement, (, modulesByDepth, ., get, (, 0, ), ), ;, }, JSONArray, toJson, (, ), {, JSONArray, modules, =]
[;, }, JSONArray, toJson, (, ), {, JSONArray, modules, =, new, JSONArray, (, ), ;, for, (, JSModule, module, :]
[modules, =, new, JSONArray, (, ), ;, for, (, JSModule, module, :, getAllModules, (, ), ), {, JSONObject, node, =]
[for, (, JSModule, module, :, getAllModules, (, ), ), {, JSONObject, node, =, new, JSONObject, (, ), ;, try, {]
[for, (, JSModule, module, :, getAllModules, (, ), ), {, JSONObject, node, =, new, JSONObject, (, ), ;, try, {]
[:, getAllModules, (, ), ), {, JSONObject, node, =, new, JSONObject, (, ), ;, try, {, node, ., put, (]
[(, ), ), {, JSONObject, node, =, new, JSONObject, (, ), ;, try, {, node, ., put, (, "name", ,]
[(, ), ), {, JSONObject, node, =, new, JSONObject, (, ), ;, try, {, node, ., put, (, "name", ,]
[), ;, try, {, node, ., put, (, "name", ,, module, ., getName, (, ), ), ;, JSONArray, deps, =]
[., put, (, "name", ,, module, ., getName, (, ), ), ;, JSONArray, deps, =, new, JSONArray, (, ), ;]
[., put, (, "name", ,, module, ., getName, (, ), ), ;, JSONArray, deps, =, new, JSONArray, (, ), ;]
[,, module, ., getName, (, ), ), ;, JSONArray, deps, =, new, JSONArray, (, ), ;, node, ., put, (]
[., getName, (, ), ), ;, JSONArray, deps, =, new, JSONArray, (, ), ;, node, ., put, (, "dependencies", ,]
[=, new, JSONArray, (, ), ;, node, ., put, (, "dependencies", ,, deps, ), ;, for, (, JSModule, m, :]
[=, new, JSONArray, (, ), ;, node, ., put, (, "dependencies", ,, deps, ), ;, for, (, JSModule, m, :]
[., put, (, "dependencies", ,, deps, ), ;, for, (, JSModule, m, :, module, ., getDependencies, (, ), ), {]
[., put, (, "dependencies", ,, deps, ), ;, for, (, JSModule, m, :, module, ., getDependencies, (, ), ), {]
[,, deps, ), ;, for, (, JSModule, m, :, module, ., getDependencies, (, ), ), {, deps, ., put, (]
[,, deps, ), ;, for, (, JSModule, m, :, module, ., getDependencies, (, ), ), {, deps, ., put, (]
[getDependencies, (, ), ), {, deps, ., put, (, m, ., getName, (, ), ), ;, }, JSONArray, transitiveDeps, =]
[deps, ., put, (, m, ., getName, (, ), ), ;, }, JSONArray, transitiveDeps, =, new, JSONArray, (, ), ;]
[deps, ., put, (, m, ., getName, (, ), ), ;, }, JSONArray, transitiveDeps, =, new, JSONArray, (, ), ;]
[m, ., getName, (, ), ), ;, }, JSONArray, transitiveDeps, =, new, JSONArray, (, ), ;, node, ., put, (]
[getName, (, ), ), ;, }, JSONArray, transitiveDeps, =, new, JSONArray, (, ), ;, node, ., put, (, "transitive-dependencies", ,]
[=, new, JSONArray, (, ), ;, node, ., put, (, "transitive-dependencies", ,, transitiveDeps, ), ;, for, (, JSModule, m, :]
[JSONArray, (, ), ;, node, ., put, (, "transitive-dependencies", ,, transitiveDeps, ), ;, for, (, JSModule, m, :, getTransitiveDepsDeepestFirst, (]
[node, ., put, (, "transitive-dependencies", ,, transitiveDeps, ), ;, for, (, JSModule, m, :, getTransitiveDepsDeepestFirst, (, module, ), ), {]
[node, ., put, (, "transitive-dependencies", ,, transitiveDeps, ), ;, for, (, JSModule, m, :, getTransitiveDepsDeepestFirst, (, module, ), ), {]
["transitive-dependencies", ,, transitiveDeps, ), ;, for, (, JSModule, m, :, getTransitiveDepsDeepestFirst, (, module, ), ), {, transitiveDeps, ., put, (]
["transitive-dependencies", ,, transitiveDeps, ), ;, for, (, JSModule, m, :, getTransitiveDepsDeepestFirst, (, module, ), ), {, transitiveDeps, ., put, (]
[(, module, ), ), {, transitiveDeps, ., put, (, m, ., getName, (, ), ), ;, }, JSONArray, inputs, =]
[transitiveDeps, ., put, (, m, ., getName, (, ), ), ;, }, JSONArray, inputs, =, new, JSONArray, (, ), ;]
[transitiveDeps, ., put, (, m, ., getName, (, ), ), ;, }, JSONArray, inputs, =, new, JSONArray, (, ), ;]
[m, ., getName, (, ), ), ;, }, JSONArray, inputs, =, new, JSONArray, (, ), ;, node, ., put, (]
[getName, (, ), ), ;, }, JSONArray, inputs, =, new, JSONArray, (, ), ;, node, ., put, (, "inputs", ,]
[=, new, JSONArray, (, ), ;, node, ., put, (, "inputs", ,, inputs, ), ;, for, (, CompilerInput, input, :]
[=, new, JSONArray, (, ), ;, node, ., put, (, "inputs", ,, inputs, ), ;, for, (, CompilerInput, input, :]
[., put, (, "inputs", ,, inputs, ), ;, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {]
[., put, (, "inputs", ,, inputs, ), ;, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {]
[,, inputs, ), ;, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {, inputs, ., put, (]
[,, inputs, ), ;, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {, inputs, ., put, (]
[,, inputs, ), ;, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {, inputs, ., put, (]
[(, ), ), {, inputs, ., put, (, input, ., getSourceFile, (, ), ., getOriginalPath, (, ), ), ;, }]
[(, ), ), {, inputs, ., put, (, input, ., getSourceFile, (, ), ., getOriginalPath, (, ), ), ;, }]
[inputs, ., put, (, input, ., getSourceFile, (, ), ., getOriginalPath, (, ), ), ;, }, modules, ., put, (]
[getOriginalPath, (, ), ), ;, }, modules, ., put, (, node, ), ;, }, catch, (, JSONException, e, ), {]
[getOriginalPath, (, ), ), ;, }, modules, ., put, (, node, ), ;, }, catch, (, JSONException, e, ), {]
[;, }, modules, ., put, (, node, ), ;, }, catch, (, JSONException, e, ), {, Throwables, ., propagate, (]
[node, ), ;, }, catch, (, JSONException, e, ), {, Throwables, ., propagate, (, e, ), ;, }, }, return]
[modules, ;, }, public, boolean, dependsOn, (, JSModule, src, ,, JSModule, m, ), {, Set, <, JSModule, >, deps, =]
[modules, ;, }, public, boolean, dependsOn, (, JSModule, src, ,, JSModule, m, ), {, Set, <, JSModule, >, deps, =]
[boolean, dependsOn, (, JSModule, src, ,, JSModule, m, ), {, Set, <, JSModule, >, deps, =, dependencyMap, ., get, (]
[,, JSModule, m, ), {, Set, <, JSModule, >, deps, =, dependencyMap, ., get, (, src, ), ;, if, (]
[,, JSModule, m, ), {, Set, <, JSModule, >, deps, =, dependencyMap, ., get, (, src, ), ;, if, (]
[m, ), {, Set, <, JSModule, >, deps, =, dependencyMap, ., get, (, src, ), ;, if, (, deps, ==]
[Set, <, JSModule, >, deps, =, dependencyMap, ., get, (, src, ), ;, if, (, deps, ==, null, ), {]
[JSModule, >, deps, =, dependencyMap, ., get, (, src, ), ;, if, (, deps, ==, null, ), {, deps, =]
[deps, =, dependencyMap, ., get, (, src, ), ;, if, (, deps, ==, null, ), {, deps, =, getTransitiveDepsDeepestFirst, (]
[., get, (, src, ), ;, if, (, deps, ==, null, ), {, deps, =, getTransitiveDepsDeepestFirst, (, src, ), ;]
[., get, (, src, ), ;, if, (, deps, ==, null, ), {, deps, =, getTransitiveDepsDeepestFirst, (, src, ), ;]
[), ;, if, (, deps, ==, null, ), {, deps, =, getTransitiveDepsDeepestFirst, (, src, ), ;, dependencyMap, ., put, (]
[if, (, deps, ==, null, ), {, deps, =, getTransitiveDepsDeepestFirst, (, src, ), ;, dependencyMap, ., put, (, src, ,]
[), {, deps, =, getTransitiveDepsDeepestFirst, (, src, ), ;, dependencyMap, ., put, (, src, ,, deps, ), ;, }, return]
[), {, deps, =, getTransitiveDepsDeepestFirst, (, src, ), ;, dependencyMap, ., put, (, src, ,, deps, ), ;, }, return]
[getTransitiveDepsDeepestFirst, (, src, ), ;, dependencyMap, ., put, (, src, ,, deps, ), ;, }, return, deps, ., contains, (]
[., contains, (, m, ), ;, }, JSModule, getDeepestCommonDependency, (, JSModule, m1, ,, JSModule, m2, ), {, int, m1Depth, =]
[., contains, (, m, ), ;, }, JSModule, getDeepestCommonDependency, (, JSModule, m1, ,, JSModule, m2, ), {, int, m1Depth, =]
[(, JSModule, m1, ,, JSModule, m2, ), {, int, m1Depth, =, m1, ., getDepth, (, ), ;, int, m2Depth, =]
[(, JSModule, m1, ,, JSModule, m2, ), {, int, m1Depth, =, m1, ., getDepth, (, ), ;, int, m2Depth, =]
[m1, ., getDepth, (, ), ;, int, m2Depth, =, m2, ., getDepth, (, ), ;, for, (, int, depth, =]
[m1, ., getDepth, (, ), ;, int, m2Depth, =, m2, ., getDepth, (, ), ;, for, (, int, depth, =]
[m1, ., getDepth, (, ), ;, int, m2Depth, =, m2, ., getDepth, (, ), ;, for, (, int, depth, =]
[), ;, int, m2Depth, =, m2, ., getDepth, (, ), ;, for, (, int, depth, =, Math, ., min, (]
[int, m2Depth, =, m2, ., getDepth, (, ), ;, for, (, int, depth, =, Math, ., min, (, m1Depth, ,]
[m2, ., getDepth, (, ), ;, for, (, int, depth, =, Math, ., min, (, m1Depth, ,, m2Depth, ), -]
[getDepth, (, ), ;, for, (, int, depth, =, Math, ., min, (, m1Depth, ,, m2Depth, ), -, 1, ;]
[getDepth, (, ), ;, for, (, int, depth, =, Math, ., min, (, m1Depth, ,, m2Depth, ), -, 1, ;]
[), ;, for, (, int, depth, =, Math, ., min, (, m1Depth, ,, m2Depth, ), -, 1, ;, depth, >=]
[for, (, int, depth, =, Math, ., min, (, m1Depth, ,, m2Depth, ), -, 1, ;, depth, >=, 0, ;]
[for, (, int, depth, =, Math, ., min, (, m1Depth, ,, m2Depth, ), -, 1, ;, depth, >=, 0, ;]
[,, m2Depth, ), -, 1, ;, depth, >=, 0, ;, depth, --, ), {, List, <, JSModule, >, modulesAtDepth, =]
[,, m2Depth, ), -, 1, ;, depth, >=, 0, ;, depth, --, ), {, List, <, JSModule, >, modulesAtDepth, =]
[1, ;, depth, >=, 0, ;, depth, --, ), {, List, <, JSModule, >, modulesAtDepth, =, modulesByDepth, ., get, (]
[), {, List, <, JSModule, >, modulesAtDepth, =, modulesByDepth, ., get, (, depth, ), ;, for, (, int, i, =]
[), {, List, <, JSModule, >, modulesAtDepth, =, modulesByDepth, ., get, (, depth, ), ;, for, (, int, i, =]
[), {, List, <, JSModule, >, modulesAtDepth, =, modulesByDepth, ., get, (, depth, ), ;, for, (, int, i, =]
[modulesAtDepth, =, modulesByDepth, ., get, (, depth, ), ;, for, (, int, i, =, modulesAtDepth, ., size, (, ), -]
[modulesByDepth, ., get, (, depth, ), ;, for, (, int, i, =, modulesAtDepth, ., size, (, ), -, 1, ;]
[modulesByDepth, ., get, (, depth, ), ;, for, (, int, i, =, modulesAtDepth, ., size, (, ), -, 1, ;]
[get, (, depth, ), ;, for, (, int, i, =, modulesAtDepth, ., size, (, ), -, 1, ;, i, >=]
[depth, ), ;, for, (, int, i, =, modulesAtDepth, ., size, (, ), -, 1, ;, i, >=, 0, ;]
[depth, ), ;, for, (, int, i, =, modulesAtDepth, ., size, (, ), -, 1, ;, i, >=, 0, ;]
[=, modulesAtDepth, ., size, (, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, JSModule, m, =]
[=, modulesAtDepth, ., size, (, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, JSModule, m, =]
[(, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, JSModule, m, =, modulesAtDepth, ., get, (]
[i, >=, 0, ;, i, --, ), {, JSModule, m, =, modulesAtDepth, ., get, (, i, ), ;, if, (]
[i, >=, 0, ;, i, --, ), {, JSModule, m, =, modulesAtDepth, ., get, (, i, ), ;, if, (]
[0, ;, i, --, ), {, JSModule, m, =, modulesAtDepth, ., get, (, i, ), ;, if, (, dependsOn, (]
[i, --, ), {, JSModule, m, =, modulesAtDepth, ., get, (, i, ), ;, if, (, dependsOn, (, m1, ,]
[{, JSModule, m, =, modulesAtDepth, ., get, (, i, ), ;, if, (, dependsOn, (, m1, ,, m, ), &&]
[m, =, modulesAtDepth, ., get, (, i, ), ;, if, (, dependsOn, (, m1, ,, m, ), &&, dependsOn, (]
[modulesAtDepth, ., get, (, i, ), ;, if, (, dependsOn, (, m1, ,, m, ), &&, dependsOn, (, m2, ,]
[), ;, if, (, dependsOn, (, m1, ,, m, ), &&, dependsOn, (, m2, ,, m, ), ), {, return]
[m1, ,, m, ), &&, dependsOn, (, m2, ,, m, ), ), {, return, m, ;, }, }, }, return]
[}, }, }, return, null, ;, }, public, JSModule, getDeepestCommonDependencyInclusive, (, JSModule, m1, ,, JSModule, m2, ), {, if, (]
[}, }, }, return, null, ;, }, public, JSModule, getDeepestCommonDependencyInclusive, (, JSModule, m1, ,, JSModule, m2, ), {, if, (]
[}, }, }, return, null, ;, }, public, JSModule, getDeepestCommonDependencyInclusive, (, JSModule, m1, ,, JSModule, m2, ), {, if, (]
[}, return, null, ;, }, public, JSModule, getDeepestCommonDependencyInclusive, (, JSModule, m1, ,, JSModule, m2, ), {, if, (, m2, ==]
[null, ;, }, public, JSModule, getDeepestCommonDependencyInclusive, (, JSModule, m1, ,, JSModule, m2, ), {, if, (, m2, ==, m1, ||]
[}, public, JSModule, getDeepestCommonDependencyInclusive, (, JSModule, m1, ,, JSModule, m2, ), {, if, (, m2, ==, m1, ||, dependsOn, (]
[JSModule, getDeepestCommonDependencyInclusive, (, JSModule, m1, ,, JSModule, m2, ), {, if, (, m2, ==, m1, ||, dependsOn, (, m2, ,]
[,, JSModule, m2, ), {, if, (, m2, ==, m1, ||, dependsOn, (, m2, ,, m1, ), ), {, return]
[(, m2, ==, m1, ||, dependsOn, (, m2, ,, m1, ), ), {, return, m1, ;, }, else, if, (]
[==, m1, ||, dependsOn, (, m2, ,, m1, ), ), {, return, m1, ;, }, else, if, (, dependsOn, (]
[||, dependsOn, (, m2, ,, m1, ), ), {, return, m1, ;, }, else, if, (, dependsOn, (, m1, ,]
[m1, ), ), {, return, m1, ;, }, else, if, (, dependsOn, (, m1, ,, m2, ), ), {, return]
[return, m1, ;, }, else, if, (, dependsOn, (, m1, ,, m2, ), ), {, return, m2, ;, }, return]
[;, }, else, if, (, dependsOn, (, m1, ,, m2, ), ), {, return, m2, ;, }, return, getDeepestCommonDependency, (]
[else, if, (, dependsOn, (, m1, ,, m2, ), ), {, return, m2, ;, }, return, getDeepestCommonDependency, (, m1, ,]
[), ;, }, public, JSModule, getDeepestCommonDependencyInclusive, (, Collection, <, JSModule, >, modules, ), {, Iterator, <, JSModule, >, iter, =]
[), ;, }, public, JSModule, getDeepestCommonDependencyInclusive, (, Collection, <, JSModule, >, modules, ), {, Iterator, <, JSModule, >, iter, =]
[JSModule, >, modules, ), {, Iterator, <, JSModule, >, iter, =, modules, ., iterator, (, ), ;, JSModule, dep, =]
[JSModule, >, modules, ), {, Iterator, <, JSModule, >, iter, =, modules, ., iterator, (, ), ;, JSModule, dep, =]
[>, iter, =, modules, ., iterator, (, ), ;, JSModule, dep, =, iter, ., next, (, ), ;, while, (]
[>, iter, =, modules, ., iterator, (, ), ;, JSModule, dep, =, iter, ., next, (, ), ;, while, (]
[), ;, JSModule, dep, =, iter, ., next, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[JSModule, dep, =, iter, ., next, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, dep, =]
[=, iter, ., next, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, dep, =, getDeepestCommonDependencyInclusive, (]
[., next, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, dep, =, getDeepestCommonDependencyInclusive, (, dep, ,]
[., next, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, dep, =, getDeepestCommonDependencyInclusive, (, dep, ,]
[hasNext, (, ), ), {, dep, =, getDeepestCommonDependencyInclusive, (, dep, ,, iter, ., next, (, ), ), ;, }, return]
[return, dep, ;, }, Set, <, JSModule, >, getTransitiveDepsDeepestFirst, (, JSModule, m, ), {, Set, <, JSModule, >, deps, =]
[return, dep, ;, }, Set, <, JSModule, >, getTransitiveDepsDeepestFirst, (, JSModule, m, ), {, Set, <, JSModule, >, deps, =]
[Set, <, JSModule, >, getTransitiveDepsDeepestFirst, (, JSModule, m, ), {, Set, <, JSModule, >, deps, =, dependencyMap, ., get, (]
[(, JSModule, m, ), {, Set, <, JSModule, >, deps, =, dependencyMap, ., get, (, m, ), ;, if, (]
[(, JSModule, m, ), {, Set, <, JSModule, >, deps, =, dependencyMap, ., get, (, m, ), ;, if, (]
[m, ), {, Set, <, JSModule, >, deps, =, dependencyMap, ., get, (, m, ), ;, if, (, deps, !=]
[<, JSModule, >, deps, =, dependencyMap, ., get, (, m, ), ;, if, (, deps, !=, null, ), {, return]
[deps, =, dependencyMap, ., get, (, m, ), ;, if, (, deps, !=, null, ), {, return, deps, ;, }]
[dependencyMap, ., get, (, m, ), ;, if, (, deps, !=, null, ), {, return, deps, ;, }, deps, =]
[;, if, (, deps, !=, null, ), {, return, deps, ;, }, deps, =, new, TreeSet, <, JSModule, >, (]
[), {, return, deps, ;, }, deps, =, new, TreeSet, <, JSModule, >, (, new, InverseDepthComparator, (, ), ), ;]
[return, deps, ;, }, deps, =, new, TreeSet, <, JSModule, >, (, new, InverseDepthComparator, (, ), ), ;, addDeps, (]
[;, }, deps, =, new, TreeSet, <, JSModule, >, (, new, InverseDepthComparator, (, ), ), ;, addDeps, (, deps, ,]
[=, new, TreeSet, <, JSModule, >, (, new, InverseDepthComparator, (, ), ), ;, addDeps, (, deps, ,, m, ), ;]
[=, new, TreeSet, <, JSModule, >, (, new, InverseDepthComparator, (, ), ), ;, addDeps, (, deps, ,, m, ), ;]
[JSModule, >, (, new, InverseDepthComparator, (, ), ), ;, addDeps, (, deps, ,, m, ), ;, dependencyMap, ., put, (]
[(, new, InverseDepthComparator, (, ), ), ;, addDeps, (, deps, ,, m, ), ;, dependencyMap, ., put, (, m, ,]
[), ), ;, addDeps, (, deps, ,, m, ), ;, dependencyMap, ., put, (, m, ,, deps, ), ;, return]
[}, private, void, addDeps, (, Set, <, JSModule, >, deps, ,, JSModule, m, ), {, for, (, JSModule, dep, :]
[}, private, void, addDeps, (, Set, <, JSModule, >, deps, ,, JSModule, m, ), {, for, (, JSModule, dep, :]
[JSModule, >, deps, ,, JSModule, m, ), {, for, (, JSModule, dep, :, m, ., getDependencies, (, ), ), {]
[JSModule, >, deps, ,, JSModule, m, ), {, for, (, JSModule, dep, :, m, ., getDependencies, (, ), ), {]
[JSModule, m, ), {, for, (, JSModule, dep, :, m, ., getDependencies, (, ), ), {, deps, ., add, (]
[{, for, (, JSModule, dep, :, m, ., getDependencies, (, ), ), {, deps, ., add, (, dep, ), ;]
[(, JSModule, dep, :, m, ., getDependencies, (, ), ), {, deps, ., add, (, dep, ), ;, addDeps, (]
[dep, :, m, ., getDependencies, (, ), ), {, deps, ., add, (, dep, ), ;, addDeps, (, deps, ,]
[,, dep, ), ;, }, }, public, void, coalesceDuplicateFiles, (, ), {, Multimap, <, String, ,, JSModule, >, fileRefs, =]
[,, dep, ), ;, }, }, public, void, coalesceDuplicateFiles, (, ), {, Multimap, <, String, ,, JSModule, >, fileRefs, =]
[{, Multimap, <, String, ,, JSModule, >, fileRefs, =, LinkedHashMultimap, ., create, (, ), ;, for, (, JSModule, module, :]
[=, LinkedHashMultimap, ., create, (, ), ;, for, (, JSModule, module, :, modules, ), {, for, (, CompilerInput, jsFile, :]
[=, LinkedHashMultimap, ., create, (, ), ;, for, (, JSModule, module, :, modules, ), {, for, (, CompilerInput, jsFile, :]
[for, (, JSModule, module, :, modules, ), {, for, (, CompilerInput, jsFile, :, module, ., getInputs, (, ), ), {]
[for, (, JSModule, module, :, modules, ), {, for, (, CompilerInput, jsFile, :, module, ., getInputs, (, ), ), {]
[:, modules, ), {, for, (, CompilerInput, jsFile, :, module, ., getInputs, (, ), ), {, fileRefs, ., put, (]
[:, modules, ), {, for, (, CompilerInput, jsFile, :, module, ., getInputs, (, ), ), {, fileRefs, ., put, (]
[CompilerInput, jsFile, :, module, ., getInputs, (, ), ), {, fileRefs, ., put, (, jsFile, ., getName, (, ), ,]
[fileRefs, ., put, (, jsFile, ., getName, (, ), ,, module, ), ;, }, }, for, (, String, path, :]
[fileRefs, ., put, (, jsFile, ., getName, (, ), ,, module, ), ;, }, }, for, (, String, path, :]
[}, }, for, (, String, path, :, fileRefs, ., keySet, (, ), ), {, Collection, <, JSModule, >, refModules, =]
[}, }, for, (, String, path, :, fileRefs, ., keySet, (, ), ), {, Collection, <, JSModule, >, refModules, =]
[String, path, :, fileRefs, ., keySet, (, ), ), {, Collection, <, JSModule, >, refModules, =, fileRefs, ., get, (]
[keySet, (, ), ), {, Collection, <, JSModule, >, refModules, =, fileRefs, ., get, (, path, ), ;, if, (]
[keySet, (, ), ), {, Collection, <, JSModule, >, refModules, =, fileRefs, ., get, (, path, ), ;, if, (]
[keySet, (, ), ), {, Collection, <, JSModule, >, refModules, =, fileRefs, ., get, (, path, ), ;, if, (]
[<, JSModule, >, refModules, =, fileRefs, ., get, (, path, ), ;, if, (, refModules, ., size, (, ), >]
[., get, (, path, ), ;, if, (, refModules, ., size, (, ), >, 1, ), {, JSModule, depModule, =]
[(, path, ), ;, if, (, refModules, ., size, (, ), >, 1, ), {, JSModule, depModule, =, getDeepestCommonDependencyInclusive, (]
[refModules, ., size, (, ), >, 1, ), {, JSModule, depModule, =, getDeepestCommonDependencyInclusive, (, refModules, ), ;, CompilerInput, file, =]
[refModules, ., size, (, ), >, 1, ), {, JSModule, depModule, =, getDeepestCommonDependencyInclusive, (, refModules, ), ;, CompilerInput, file, =]
[refModules, ., size, (, ), >, 1, ), {, JSModule, depModule, =, getDeepestCommonDependencyInclusive, (, refModules, ), ;, CompilerInput, file, =]
[refModules, ., size, (, ), >, 1, ), {, JSModule, depModule, =, getDeepestCommonDependencyInclusive, (, refModules, ), ;, CompilerInput, file, =]
[getDeepestCommonDependencyInclusive, (, refModules, ), ;, CompilerInput, file, =, refModules, ., iterator, (, ), ., next, (, ), ., getByName, (]
[refModules, ., iterator, (, ), ., next, (, ), ., getByName, (, path, ), ;, for, (, JSModule, module, :]
[., next, (, ), ., getByName, (, path, ), ;, for, (, JSModule, module, :, refModules, ), {, if, (]
[., next, (, ), ., getByName, (, path, ), ;, for, (, JSModule, module, :, refModules, ), {, if, (]
[(, ), ., getByName, (, path, ), ;, for, (, JSModule, module, :, refModules, ), {, if, (, module, !=]
[getByName, (, path, ), ;, for, (, JSModule, module, :, refModules, ), {, if, (, module, !=, depModule, ), {]
[getByName, (, path, ), ;, for, (, JSModule, module, :, refModules, ), {, if, (, module, !=, depModule, ), {]
[;, for, (, JSModule, module, :, refModules, ), {, if, (, module, !=, depModule, ), {, module, ., removeByName, (]
[), {, if, (, module, !=, depModule, ), {, module, ., removeByName, (, path, ), ;, }, }, if, (]
[{, if, (, module, !=, depModule, ), {, module, ., removeByName, (, path, ), ;, }, }, if, (, !]
[{, if, (, module, !=, depModule, ), {, module, ., removeByName, (, path, ), ;, }, }, if, (, !]
[!=, depModule, ), {, module, ., removeByName, (, path, ), ;, }, }, if, (, !, refModules, ., contains, (]
[module, ., removeByName, (, path, ), ;, }, }, if, (, !, refModules, ., contains, (, depModule, ), ), {]
[module, ., removeByName, (, path, ), ;, }, }, if, (, !, refModules, ., contains, (, depModule, ), ), {]
[path, ), ;, }, }, if, (, !, refModules, ., contains, (, depModule, ), ), {, depModule, ., add, (]
[List, <, String, >, entryPoints, ,, List, <, CompilerInput, >, inputs, ), throws, CircularDependencyException, ,, MissingProvideException, {, DependencyOptions, depOptions, =]
[,, List, <, CompilerInput, >, inputs, ), throws, CircularDependencyException, ,, MissingProvideException, {, DependencyOptions, depOptions, =, new, DependencyOptions, (, ), ;]
[,, List, <, CompilerInput, >, inputs, ), throws, CircularDependencyException, ,, MissingProvideException, {, DependencyOptions, depOptions, =, new, DependencyOptions, (, ), ;]
[>, inputs, ), throws, CircularDependencyException, ,, MissingProvideException, {, DependencyOptions, depOptions, =, new, DependencyOptions, (, ), ;, depOptions, ., setDependencySorting, (]
[throws, CircularDependencyException, ,, MissingProvideException, {, DependencyOptions, depOptions, =, new, DependencyOptions, (, ), ;, depOptions, ., setDependencySorting, (, true, ), ;]
[throws, CircularDependencyException, ,, MissingProvideException, {, DependencyOptions, depOptions, =, new, DependencyOptions, (, ), ;, depOptions, ., setDependencySorting, (, true, ), ;]
[{, DependencyOptions, depOptions, =, new, DependencyOptions, (, ), ;, depOptions, ., setDependencySorting, (, true, ), ;, depOptions, ., setDependencyPruning, (]
[=, new, DependencyOptions, (, ), ;, depOptions, ., setDependencySorting, (, true, ), ;, depOptions, ., setDependencyPruning, (, true, ), ;]
[=, new, DependencyOptions, (, ), ;, depOptions, ., setDependencySorting, (, true, ), ;, depOptions, ., setDependencyPruning, (, true, ), ;]
[), ;, depOptions, ., setDependencySorting, (, true, ), ;, depOptions, ., setDependencyPruning, (, true, ), ;, depOptions, ., setEntryPoints, (]
[setDependencySorting, (, true, ), ;, depOptions, ., setDependencyPruning, (, true, ), ;, depOptions, ., setEntryPoints, (, entryPoints, ), ;, return]
[true, ), ;, depOptions, ., setDependencyPruning, (, true, ), ;, depOptions, ., setEntryPoints, (, entryPoints, ), ;, return, manageDependencies, (]
[;, depOptions, ., setDependencyPruning, (, true, ), ;, depOptions, ., setEntryPoints, (, entryPoints, ), ;, return, manageDependencies, (, depOptions, ,]
[DependencyOptions, depOptions, ,, List, <, CompilerInput, >, inputs, ), throws, CircularDependencyException, ,, MissingProvideException, {, SortedDependencies, <, CompilerInput, >, sorter, =]
[>, inputs, ), throws, CircularDependencyException, ,, MissingProvideException, {, SortedDependencies, <, CompilerInput, >, sorter, =, new, SortedDependencies, <, CompilerInput, >, (]
[<, CompilerInput, >, sorter, =, new, SortedDependencies, <, CompilerInput, >, (, inputs, ), ;, Set, <, CompilerInput, >, entryPointInputs, =]
[<, CompilerInput, >, sorter, =, new, SortedDependencies, <, CompilerInput, >, (, inputs, ), ;, Set, <, CompilerInput, >, entryPointInputs, =]
[CompilerInput, >, (, inputs, ), ;, Set, <, CompilerInput, >, entryPointInputs, =, Sets, ., newLinkedHashSet, (, ), ;, if, (]
[CompilerInput, >, (, inputs, ), ;, Set, <, CompilerInput, >, entryPointInputs, =, Sets, ., newLinkedHashSet, (, ), ;, if, (]
[>, entryPointInputs, =, Sets, ., newLinkedHashSet, (, ), ;, if, (, depOptions, ., shouldPruneDependencies, (, ), ), {, if, (]
[entryPointInputs, =, Sets, ., newLinkedHashSet, (, ), ;, if, (, depOptions, ., shouldPruneDependencies, (, ), ), {, if, (, !]
[entryPointInputs, =, Sets, ., newLinkedHashSet, (, ), ;, if, (, depOptions, ., shouldPruneDependencies, (, ), ), {, if, (, !]
[;, if, (, depOptions, ., shouldPruneDependencies, (, ), ), {, if, (, !, depOptions, ., shouldDropMoochers, (, ), ), {]
[;, if, (, depOptions, ., shouldPruneDependencies, (, ), ), {, if, (, !, depOptions, ., shouldDropMoochers, (, ), ), {]
[., shouldPruneDependencies, (, ), ), {, if, (, !, depOptions, ., shouldDropMoochers, (, ), ), {, entryPointInputs, ., addAll, (]
[., shouldPruneDependencies, (, ), ), {, if, (, !, depOptions, ., shouldDropMoochers, (, ), ), {, entryPointInputs, ., addAll, (]
[), ), {, entryPointInputs, ., addAll, (, sorter, ., getInputsWithoutProvides, (, ), ), ;, }, for, (, String, entryPoint, :]
[), ), {, entryPointInputs, ., addAll, (, sorter, ., getInputsWithoutProvides, (, ), ), ;, }, for, (, String, entryPoint, :]
[sorter, ., getInputsWithoutProvides, (, ), ), ;, }, for, (, String, entryPoint, :, depOptions, ., getEntryPoints, (, ), ), {]
[sorter, ., getInputsWithoutProvides, (, ), ), ;, }, for, (, String, entryPoint, :, depOptions, ., getEntryPoints, (, ), ), {]
[), ), ;, }, for, (, String, entryPoint, :, depOptions, ., getEntryPoints, (, ), ), {, entryPointInputs, ., add, (]
[), ), ;, }, for, (, String, entryPoint, :, depOptions, ., getEntryPoints, (, ), ), {, entryPointInputs, ., add, (]
[for, (, String, entryPoint, :, depOptions, ., getEntryPoints, (, ), ), {, entryPointInputs, ., add, (, sorter, ., getInputProviding, (]
[(, ), ), {, entryPointInputs, ., add, (, sorter, ., getInputProviding, (, entryPoint, ), ), ;, }, CompilerInput, baseJs, =]
[(, ), ), {, entryPointInputs, ., add, (, sorter, ., getInputProviding, (, entryPoint, ), ), ;, }, CompilerInput, baseJs, =]
[entryPointInputs, ., add, (, sorter, ., getInputProviding, (, entryPoint, ), ), ;, }, CompilerInput, baseJs, =, sorter, ., maybeGetInputProviding, (]
[., getInputProviding, (, entryPoint, ), ), ;, }, CompilerInput, baseJs, =, sorter, ., maybeGetInputProviding, (, "goog", ), ;, if, (]
[., getInputProviding, (, entryPoint, ), ), ;, }, CompilerInput, baseJs, =, sorter, ., maybeGetInputProviding, (, "goog", ), ;, if, (]
[(, entryPoint, ), ), ;, }, CompilerInput, baseJs, =, sorter, ., maybeGetInputProviding, (, "goog", ), ;, if, (, baseJs, !=]
[), ;, }, CompilerInput, baseJs, =, sorter, ., maybeGetInputProviding, (, "goog", ), ;, if, (, baseJs, !=, null, ), {]
[), ;, }, CompilerInput, baseJs, =, sorter, ., maybeGetInputProviding, (, "goog", ), ;, if, (, baseJs, !=, null, ), {]
[baseJs, =, sorter, ., maybeGetInputProviding, (, "goog", ), ;, if, (, baseJs, !=, null, ), {, entryPointInputs, ., add, (]
[), ;, if, (, baseJs, !=, null, ), {, entryPointInputs, ., add, (, baseJs, ), ;, }, }, else, {]
[), ;, if, (, baseJs, !=, null, ), {, entryPointInputs, ., add, (, baseJs, ), ;, }, }, else, {]
[baseJs, !=, null, ), {, entryPointInputs, ., add, (, baseJs, ), ;, }, }, else, {, entryPointInputs, ., addAll, (]
[), ;, }, }, else, {, entryPointInputs, ., addAll, (, inputs, ), ;, }, List, <, CompilerInput, >, absoluteOrder, =]
[), ;, }, }, else, {, entryPointInputs, ., addAll, (, inputs, ), ;, }, List, <, CompilerInput, >, absoluteOrder, =]
[else, {, entryPointInputs, ., addAll, (, inputs, ), ;, }, List, <, CompilerInput, >, absoluteOrder, =, sorter, ., getDependenciesOf, (]
[entryPointInputs, ., addAll, (, inputs, ), ;, }, List, <, CompilerInput, >, absoluteOrder, =, sorter, ., getDependenciesOf, (, inputs, ,]
[entryPointInputs, ., addAll, (, inputs, ), ;, }, List, <, CompilerInput, >, absoluteOrder, =, sorter, ., getDependenciesOf, (, inputs, ,]
[., getDependenciesOf, (, inputs, ,, depOptions, ., shouldSortDependencies, (, ), ), ;, ListMultimap, <, JSModule, ,, CompilerInput, >, entryPointInputsPerModule, =]
[., getDependenciesOf, (, inputs, ,, depOptions, ., shouldSortDependencies, (, ), ), ;, ListMultimap, <, JSModule, ,, CompilerInput, >, entryPointInputsPerModule, =]
[;, ListMultimap, <, JSModule, ,, CompilerInput, >, entryPointInputsPerModule, =, LinkedListMultimap, ., create, (, ), ;, for, (, CompilerInput, input, :]
[>, entryPointInputsPerModule, =, LinkedListMultimap, ., create, (, ), ;, for, (, CompilerInput, input, :, entryPointInputs, ), {, JSModule, module, =]
[>, entryPointInputsPerModule, =, LinkedListMultimap, ., create, (, ), ;, for, (, CompilerInput, input, :, entryPointInputs, ), {, JSModule, module, =]
[(, ), ;, for, (, CompilerInput, input, :, entryPointInputs, ), {, JSModule, module, =, input, ., getModule, (, ), ;]
[(, ), ;, for, (, CompilerInput, input, :, entryPointInputs, ), {, JSModule, module, =, input, ., getModule, (, ), ;]
[(, CompilerInput, input, :, entryPointInputs, ), {, JSModule, module, =, input, ., getModule, (, ), ;, Preconditions, ., checkNotNull, (]
[:, entryPointInputs, ), {, JSModule, module, =, input, ., getModule, (, ), ;, Preconditions, ., checkNotNull, (, module, ), ;]
[:, entryPointInputs, ), {, JSModule, module, =, input, ., getModule, (, ), ;, Preconditions, ., checkNotNull, (, module, ), ;]
[JSModule, module, =, input, ., getModule, (, ), ;, Preconditions, ., checkNotNull, (, module, ), ;, entryPointInputsPerModule, ., put, (]
[=, input, ., getModule, (, ), ;, Preconditions, ., checkNotNull, (, module, ), ;, entryPointInputsPerModule, ., put, (, module, ,]
[checkNotNull, (, module, ), ;, entryPointInputsPerModule, ., put, (, module, ,, input, ), ;, }, for, (, JSModule, module, :]
[entryPointInputsPerModule, ., put, (, module, ,, input, ), ;, }, for, (, JSModule, module, :, getAllModules, (, ), ), {]
[entryPointInputsPerModule, ., put, (, module, ,, input, ), ;, }, for, (, JSModule, module, :, getAllModules, (, ), ), {]
[JSModule, module, :, getAllModules, (, ), ), {, module, ., removeAll, (, ), ;, }, for, (, JSModule, module, :]
[JSModule, module, :, getAllModules, (, ), ), {, module, ., removeAll, (, ), ;, }, for, (, JSModule, module, :]
[;, }, for, (, JSModule, module, :, entryPointInputsPerModule, ., keySet, (, ), ), {, List, <, CompilerInput, >, transitiveClosure, =]
[;, }, for, (, JSModule, module, :, entryPointInputsPerModule, ., keySet, (, ), ), {, List, <, CompilerInput, >, transitiveClosure, =]
[JSModule, module, :, entryPointInputsPerModule, ., keySet, (, ), ), {, List, <, CompilerInput, >, transitiveClosure, =, sorter, ., getDependenciesOf, (]
[JSModule, module, :, entryPointInputsPerModule, ., keySet, (, ), ), {, List, <, CompilerInput, >, transitiveClosure, =, sorter, ., getDependenciesOf, (]
[., keySet, (, ), ), {, List, <, CompilerInput, >, transitiveClosure, =, sorter, ., getDependenciesOf, (, entryPointInputsPerModule, ., get, (]
[), ), {, List, <, CompilerInput, >, transitiveClosure, =, sorter, ., getDependenciesOf, (, entryPointInputsPerModule, ., get, (, module, ), ,]
[), ), {, List, <, CompilerInput, >, transitiveClosure, =, sorter, ., getDependenciesOf, (, entryPointInputsPerModule, ., get, (, module, ), ,]
[(, entryPointInputsPerModule, ., get, (, module, ), ,, depOptions, ., shouldSortDependencies, (, ), ), ;, for, (, CompilerInput, input, :]
[), ,, depOptions, ., shouldSortDependencies, (, ), ), ;, for, (, CompilerInput, input, :, transitiveClosure, ), {, JSModule, oldModule, =]
[), ,, depOptions, ., shouldSortDependencies, (, ), ), ;, for, (, CompilerInput, input, :, transitiveClosure, ), {, JSModule, oldModule, =]
[;, for, (, CompilerInput, input, :, transitiveClosure, ), {, JSModule, oldModule, =, input, ., getModule, (, ), ;, if, (]
[;, for, (, CompilerInput, input, :, transitiveClosure, ), {, JSModule, oldModule, =, input, ., getModule, (, ), ;, if, (]
[(, CompilerInput, input, :, transitiveClosure, ), {, JSModule, oldModule, =, input, ., getModule, (, ), ;, if, (, oldModule, ==]
[:, transitiveClosure, ), {, JSModule, oldModule, =, input, ., getModule, (, ), ;, if, (, oldModule, ==, null, ), {]
[:, transitiveClosure, ), {, JSModule, oldModule, =, input, ., getModule, (, ), ;, if, (, oldModule, ==, null, ), {]
[JSModule, oldModule, =, input, ., getModule, (, ), ;, if, (, oldModule, ==, null, ), {, input, ., setModule, (]
[(, ), ;, if, (, oldModule, ==, null, ), {, input, ., setModule, (, module, ), ;, }, else, {]
[(, ), ;, if, (, oldModule, ==, null, ), {, input, ., setModule, (, module, ), ;, }, else, {]
[(, oldModule, ==, null, ), {, input, ., setModule, (, module, ), ;, }, else, {, input, ., setModule, (]
[null, ), {, input, ., setModule, (, module, ), ;, }, else, {, input, ., setModule, (, null, ), ;]
[null, ), {, input, ., setModule, (, module, ), ;, }, else, {, input, ., setModule, (, null, ), ;]
[., setModule, (, module, ), ;, }, else, {, input, ., setModule, (, null, ), ;, input, ., setModule, (]
[(, module, ), ;, }, else, {, input, ., setModule, (, null, ), ;, input, ., setModule, (, getDeepestCommonDependencyInclusive, (]
[), ;, }, else, {, input, ., setModule, (, null, ), ;, input, ., setModule, (, getDeepestCommonDependencyInclusive, (, oldModule, ,]
[input, ., setModule, (, getDeepestCommonDependencyInclusive, (, oldModule, ,, module, ), ), ;, }, }, }, for, (, CompilerInput, input, :]
[oldModule, ,, module, ), ), ;, }, }, }, for, (, CompilerInput, input, :, absoluteOrder, ), {, JSModule, module, =]
[oldModule, ,, module, ), ), ;, }, }, }, for, (, CompilerInput, input, :, absoluteOrder, ), {, JSModule, module, =]
[}, for, (, CompilerInput, input, :, absoluteOrder, ), {, JSModule, module, =, input, ., getModule, (, ), ;, if, (]
[}, for, (, CompilerInput, input, :, absoluteOrder, ), {, JSModule, module, =, input, ., getModule, (, ), ;, if, (]
[(, CompilerInput, input, :, absoluteOrder, ), {, JSModule, module, =, input, ., getModule, (, ), ;, if, (, module, !=]
[:, absoluteOrder, ), {, JSModule, module, =, input, ., getModule, (, ), ;, if, (, module, !=, null, ), {]
[:, absoluteOrder, ), {, JSModule, module, =, input, ., getModule, (, ), ;, if, (, module, !=, null, ), {]
[JSModule, module, =, input, ., getModule, (, ), ;, if, (, module, !=, null, ), {, module, ., add, (]
[module, !=, null, ), {, module, ., add, (, input, ), ;, }, }, List, <, CompilerInput, >, result, =]
[module, !=, null, ), {, module, ., add, (, input, ), ;, }, }, List, <, CompilerInput, >, result, =]
[;, }, }, List, <, CompilerInput, >, result, =, Lists, ., newArrayList, (, ), ;, for, (, JSModule, module, :]
[CompilerInput, >, result, =, Lists, ., newArrayList, (, ), ;, for, (, JSModule, module, :, getAllModules, (, ), ), {]
[CompilerInput, >, result, =, Lists, ., newArrayList, (, ), ;, for, (, JSModule, module, :, getAllModules, (, ), ), {]
[Lists, ., newArrayList, (, ), ;, for, (, JSModule, module, :, getAllModules, (, ), ), {, result, ., addAll, (]
[Lists, ., newArrayList, (, ), ;, for, (, JSModule, module, :, getAllModules, (, ), ), {, result, ., addAll, (]
[module, :, getAllModules, (, ), ), {, result, ., addAll, (, module, ., getInputs, (, ), ), ;, }, return]
[;, }, LinkedDirectedGraph, <, JSModule, ,, String, >, toGraphvizGraph, (, ), {, LinkedDirectedGraph, <, JSModule, ,, String, >, graphViz, =]
[;, }, LinkedDirectedGraph, <, JSModule, ,, String, >, toGraphvizGraph, (, ), {, LinkedDirectedGraph, <, JSModule, ,, String, >, graphViz, =]
[{, LinkedDirectedGraph, <, JSModule, ,, String, >, graphViz, =, LinkedDirectedGraph, ., create, (, ), ;, for, (, JSModule, module, :]
[String, >, graphViz, =, LinkedDirectedGraph, ., create, (, ), ;, for, (, JSModule, module, :, getAllModules, (, ), ), {]
[String, >, graphViz, =, LinkedDirectedGraph, ., create, (, ), ;, for, (, JSModule, module, :, getAllModules, (, ), ), {]
[LinkedDirectedGraph, ., create, (, ), ;, for, (, JSModule, module, :, getAllModules, (, ), ), {, graphViz, ., createNode, (]
[JSModule, module, :, getAllModules, (, ), ), {, graphViz, ., createNode, (, module, ), ;, for, (, JSModule, dep, :]
[JSModule, module, :, getAllModules, (, ), ), {, graphViz, ., createNode, (, module, ), ;, for, (, JSModule, dep, :]
[{, graphViz, ., createNode, (, module, ), ;, for, (, JSModule, dep, :, module, ., getDependencies, (, ), ), {]
[{, graphViz, ., createNode, (, module, ), ;, for, (, JSModule, dep, :, module, ., getDependencies, (, ), ), {]
[(, module, ), ;, for, (, JSModule, dep, :, module, ., getDependencies, (, ), ), {, graphViz, ., createNode, (]
[;, for, (, JSModule, dep, :, module, ., getDependencies, (, ), ), {, graphViz, ., createNode, (, dep, ), ;]
[;, for, (, JSModule, dep, :, module, ., getDependencies, (, ), ), {, graphViz, ., createNode, (, dep, ), ;]
[dep, :, module, ., getDependencies, (, ), ), {, graphViz, ., createNode, (, dep, ), ;, graphViz, ., connect, (]
[module, ., getDependencies, (, ), ), {, graphViz, ., createNode, (, dep, ), ;, graphViz, ., connect, (, module, ,]
[getDependencies, (, ), ), {, graphViz, ., createNode, (, dep, ), ;, graphViz, ., connect, (, module, ,, "->", ,]
[., createNode, (, dep, ), ;, graphViz, ., connect, (, module, ,, "->", ,, dep, ), ;, }, }, return]
[implements, Comparator, <, JSModule, >, {, @, Override, public, int, compare, (, JSModule, m1, ,, JSModule, m2, ), {, return]
[<, JSModule, >, {, @, Override, public, int, compare, (, JSModule, m1, ,, JSModule, m2, ), {, return, depthCompare, (]
[>, {, @, Override, public, int, compare, (, JSModule, m1, ,, JSModule, m2, ), {, return, depthCompare, (, m2, ,]
[m2, ,, m1, ), ;, }, }, private, int, depthCompare, (, JSModule, m1, ,, JSModule, m2, ), {, if, (]
[m2, ,, m1, ), ;, }, }, private, int, depthCompare, (, JSModule, m1, ,, JSModule, m2, ), {, if, (]
[m1, ), ;, }, }, private, int, depthCompare, (, JSModule, m1, ,, JSModule, m2, ), {, if, (, m1, ==]
[}, private, int, depthCompare, (, JSModule, m1, ,, JSModule, m2, ), {, if, (, m1, ==, m2, ), {, return]
[m1, ,, JSModule, m2, ), {, if, (, m1, ==, m2, ), {, return, 0, ;, }, int, d1, =]
[m1, ,, JSModule, m2, ), {, if, (, m1, ==, m2, ), {, return, 0, ;, }, int, d1, =]
[==, m2, ), {, return, 0, ;, }, int, d1, =, m1, ., getDepth, (, ), ;, int, d2, =]
[==, m2, ), {, return, 0, ;, }, int, d1, =, m1, ., getDepth, (, ), ;, int, d2, =]
[}, int, d1, =, m1, ., getDepth, (, ), ;, int, d2, =, m2, ., getDepth, (, ), ;, return]
[}, int, d1, =, m1, ., getDepth, (, ), ;, int, d2, =, m2, ., getDepth, (, ), ;, return]
[}, int, d1, =, m1, ., getDepth, (, ), ;, int, d2, =, m2, ., getDepth, (, ), ;, return]
[d1, =, m1, ., getDepth, (, ), ;, int, d2, =, m2, ., getDepth, (, ), ;, return, d1, <]
[m1, ., getDepth, (, ), ;, int, d2, =, m2, ., getDepth, (, ), ;, return, d1, <, d2, ?]
[., getDepth, (, ), ;, int, d2, =, m2, ., getDepth, (, ), ;, return, d1, <, d2, ?, -]
[(, ), ;, int, d2, =, m2, ., getDepth, (, ), ;, return, d1, <, d2, ?, -, 1, :]
[(, ), ;, int, d2, =, m2, ., getDepth, (, ), ;, return, d1, <, d2, ?, -, 1, :]
[(, ), ;, int, d2, =, m2, ., getDepth, (, ), ;, return, d1, <, d2, ?, -, 1, :]
[;, int, d2, =, m2, ., getDepth, (, ), ;, return, d1, <, d2, ?, -, 1, :, d2, ==]
[d2, =, m2, ., getDepth, (, ), ;, return, d1, <, d2, ?, -, 1, :, d2, ==, d1, ?]
[d2, =, m2, ., getDepth, (, ), ;, return, d1, <, d2, ?, -, 1, :, d2, ==, d1, ?]
[d2, =, m2, ., getDepth, (, ), ;, return, d1, <, d2, ?, -, 1, :, d2, ==, d1, ?]
[return, d1, <, d2, ?, -, 1, :, d2, ==, d1, ?, m1, ., getName, (, ), ., compareTo, (]
[return, d1, <, d2, ?, -, 1, :, d2, ==, d1, ?, m1, ., getName, (, ), ., compareTo, (]
[:, d2, ==, d1, ?, m1, ., getName, (, ), ., compareTo, (, m2, ., getName, (, ), ), :]
[(, ), ), :, 1, ;, }, protected, static, class, ModuleDependenceException, extends, IllegalArgumentException, {, private, static, final, long, serialVersionUID, =]
[private, final, JSModule, dependentModule, ;, protected, ModuleDependenceException, (, String, message, ,, JSModule, module, ,, JSModule, dependentModule, ), {, super, (]
[dependentModule, ;, protected, ModuleDependenceException, (, String, message, ,, JSModule, module, ,, JSModule, dependentModule, ), {, super, (, message, ), ;]
[dependentModule, ;, protected, ModuleDependenceException, (, String, message, ,, JSModule, module, ,, JSModule, dependentModule, ), {, super, (, message, ), ;]
[(, String, message, ,, JSModule, module, ,, JSModule, dependentModule, ), {, super, (, message, ), ;, this, ., module, =]
[message, ,, JSModule, module, ,, JSModule, dependentModule, ), {, super, (, message, ), ;, this, ., module, =, module, ;]
[message, ,, JSModule, module, ,, JSModule, dependentModule, ), {, super, (, message, ), ;, this, ., module, =, module, ;]
[,, JSModule, dependentModule, ), {, super, (, message, ), ;, this, ., module, =, module, ;, this, ., dependentModule, =]
[this, ., module, =, module, ;, this, ., dependentModule, =, dependentModule, ;, }, public, JSModule, getModule, (, ), {, return]
[dependentModule, ;, }, public, JSModule, getModule, (, ), {, return, module, ;, }, public, JSModule, getDependentModule, (, ), {, return]
