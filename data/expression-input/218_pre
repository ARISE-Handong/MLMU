[{, private, final, Map, <, Integer, ,, Pair, <, T, [, ], ,, T, [, ], >, >, pointsAndWeights, =]
[;, private, final, Map, <, Integer, ,, Pair, <, double, [, ], ,, double, [, ], >, >, pointsAndWeightsDouble, =]
[double, [, ], ,, double, [, ], >, getRule, (, int, numberOfPoints, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (]
[double, [, ], ,, double, [, ], >, getRule, (, int, numberOfPoints, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (]
[], ,, double, [, ], >, getRule, (, int, numberOfPoints, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (, numberOfPoints, <=]
[], >, getRule, (, int, numberOfPoints, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (, numberOfPoints, <=, 0, ), {, throw]
[(, int, numberOfPoints, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (, numberOfPoints, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[(, int, numberOfPoints, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (, numberOfPoints, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (, numberOfPoints, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_POINTS, ,]
[LocalizedFormats, ., NUMBER_OF_POINTS, ,, numberOfPoints, ), ;, }, Pair, <, double, [, ], ,, double, [, ], >, cached, =]
[LocalizedFormats, ., NUMBER_OF_POINTS, ,, numberOfPoints, ), ;, }, Pair, <, double, [, ], ,, double, [, ], >, cached, =]
[numberOfPoints, ), ;, }, Pair, <, double, [, ], ,, double, [, ], >, cached, =, pointsAndWeightsDouble, ., get, (]
[<, double, [, ], ,, double, [, ], >, cached, =, pointsAndWeightsDouble, ., get, (, numberOfPoints, ), ;, if, (]
[<, double, [, ], ,, double, [, ], >, cached, =, pointsAndWeightsDouble, ., get, (, numberOfPoints, ), ;, if, (]
[[, ], ,, double, [, ], >, cached, =, pointsAndWeightsDouble, ., get, (, numberOfPoints, ), ;, if, (, cached, ==]
[if, (, cached, ==, null, ), {, final, Pair, <, T, [, ], ,, T, [, ], >, rule, =]
[cached, ==, null, ), {, final, Pair, <, T, [, ], ,, T, [, ], >, rule, =, getRuleInternal, (]
[), {, final, Pair, <, T, [, ], ,, T, [, ], >, rule, =, getRuleInternal, (, numberOfPoints, ), ;]
[final, Pair, <, T, [, ], ,, T, [, ], >, rule, =, getRuleInternal, (, numberOfPoints, ), ;, cached, =]
[<, T, [, ], ,, T, [, ], >, rule, =, getRuleInternal, (, numberOfPoints, ), ;, cached, =, convertToDouble, (]
[], ,, T, [, ], >, rule, =, getRuleInternal, (, numberOfPoints, ), ;, cached, =, convertToDouble, (, rule, ), ;]
[], ,, T, [, ], >, rule, =, getRuleInternal, (, numberOfPoints, ), ;, cached, =, convertToDouble, (, rule, ), ;]
[], >, rule, =, getRuleInternal, (, numberOfPoints, ), ;, cached, =, convertToDouble, (, rule, ), ;, pointsAndWeightsDouble, ., put, (]
[rule, =, getRuleInternal, (, numberOfPoints, ), ;, cached, =, convertToDouble, (, rule, ), ;, pointsAndWeightsDouble, ., put, (, numberOfPoints, ,]
[), ;, cached, =, convertToDouble, (, rule, ), ;, pointsAndWeightsDouble, ., put, (, numberOfPoints, ,, cached, ), ;, }, return]
[(, numberOfPoints, ,, cached, ), ;, }, return, new, Pair, <, double, [, ], ,, double, [, ], >, (]
[(, numberOfPoints, ,, cached, ), ;, }, return, new, Pair, <, double, [, ], ,, double, [, ], >, (]
[(, numberOfPoints, ,, cached, ), ;, }, return, new, Pair, <, double, [, ], ,, double, [, ], >, (]
[<, double, [, ], ,, double, [, ], >, (, cached, ., getFirst, (, ), ., clone, (, ), ,]
[<, double, [, ], ,, double, [, ], >, (, cached, ., getFirst, (, ), ., clone, (, ), ,]
[<, double, [, ], ,, double, [, ], >, (, cached, ., getFirst, (, ), ., clone, (, ), ,]
[(, int, numberOfPoints, ), throws, DimensionMismatchException, {, final, Pair, <, T, [, ], ,, T, [, ], >, rule, =]
[(, int, numberOfPoints, ), throws, DimensionMismatchException, {, final, Pair, <, T, [, ], ,, T, [, ], >, rule, =]
[throws, DimensionMismatchException, {, final, Pair, <, T, [, ], ,, T, [, ], >, rule, =, pointsAndWeights, ., get, (]
[<, T, [, ], ,, T, [, ], >, rule, =, pointsAndWeights, ., get, (, numberOfPoints, ), ;, if, (]
[<, T, [, ], ,, T, [, ], >, rule, =, pointsAndWeights, ., get, (, numberOfPoints, ), ;, if, (]
[[, ], ,, T, [, ], >, rule, =, pointsAndWeights, ., get, (, numberOfPoints, ), ;, if, (, rule, ==]
[T, [, ], >, rule, =, pointsAndWeights, ., get, (, numberOfPoints, ), ;, if, (, rule, ==, null, ), {]
[], >, rule, =, pointsAndWeights, ., get, (, numberOfPoints, ), ;, if, (, rule, ==, null, ), {, addRule, (]
[rule, =, pointsAndWeights, ., get, (, numberOfPoints, ), ;, if, (, rule, ==, null, ), {, addRule, (, computeRule, (]
[(, numberOfPoints, ), ;, if, (, rule, ==, null, ), {, addRule, (, computeRule, (, numberOfPoints, ), ), ;, return]
[), ;, if, (, rule, ==, null, ), {, addRule, (, computeRule, (, numberOfPoints, ), ), ;, return, getRuleInternal, (]
[==, null, ), {, addRule, (, computeRule, (, numberOfPoints, ), ), ;, return, getRuleInternal, (, numberOfPoints, ), ;, }, return]
[void, addRule, (, Pair, <, T, [, ], ,, T, [, ], >, rule, ), throws, DimensionMismatchException, {, if, (]
[void, addRule, (, Pair, <, T, [, ], ,, T, [, ], >, rule, ), throws, DimensionMismatchException, {, if, (]
[void, addRule, (, Pair, <, T, [, ], ,, T, [, ], >, rule, ), throws, DimensionMismatchException, {, if, (]
[void, addRule, (, Pair, <, T, [, ], ,, T, [, ], >, rule, ), throws, DimensionMismatchException, {, if, (]
[,, T, [, ], >, rule, ), throws, DimensionMismatchException, {, if, (, rule, ., getFirst, (, ), ., length, !=]
[,, T, [, ], >, rule, ), throws, DimensionMismatchException, {, if, (, rule, ., getFirst, (, ), ., length, !=]
[,, T, [, ], >, rule, ), throws, DimensionMismatchException, {, if, (, rule, ., getFirst, (, ), ., length, !=]
[if, (, rule, ., getFirst, (, ), ., length, !=, rule, ., getSecond, (, ), ., length, ), {, throw]
[., getFirst, (, ), ., length, !=, rule, ., getSecond, (, ), ., length, ), {, throw, new, DimensionMismatchException, (]
[., getFirst, (, ), ., length, !=, rule, ., getSecond, (, ), ., length, ), {, throw, new, DimensionMismatchException, (]
[., getFirst, (, ), ., length, !=, rule, ., getSecond, (, ), ., length, ), {, throw, new, DimensionMismatchException, (]
[., getSecond, (, ), ., length, ), {, throw, new, DimensionMismatchException, (, rule, ., getFirst, (, ), ., length, ,]
[., getSecond, (, ), ., length, ), {, throw, new, DimensionMismatchException, (, rule, ., getFirst, (, ), ., length, ,]
[., getSecond, (, ), ., length, ), {, throw, new, DimensionMismatchException, (, rule, ., getFirst, (, ), ., length, ,]
[DimensionMismatchException, (, rule, ., getFirst, (, ), ., length, ,, rule, ., getSecond, (, ), ., length, ), ;, }]
[DimensionMismatchException, (, rule, ., getFirst, (, ), ., length, ,, rule, ., getSecond, (, ), ., length, ), ;, }]
[getFirst, (, ), ., length, ,, rule, ., getSecond, (, ), ., length, ), ;, }, pointsAndWeights, ., put, (]
[getFirst, (, ), ., length, ,, rule, ., getSecond, (, ), ., length, ), ;, }, pointsAndWeights, ., put, (]
[getFirst, (, ), ., length, ,, rule, ., getSecond, (, ), ., length, ), ;, }, pointsAndWeights, ., put, (]
[getSecond, (, ), ., length, ), ;, }, pointsAndWeights, ., put, (, rule, ., getFirst, (, ), ., length, ,]
[(, Pair, <, T, [, ], ,, T, [, ], >, rule, ), {, final, T, [, ], pT, =]
[(, Pair, <, T, [, ], ,, T, [, ], >, rule, ), {, final, T, [, ], pT, =]
[), {, final, T, [, ], pT, =, rule, ., getFirst, (, ), ;, final, T, [, ], wT, =]
[), {, final, T, [, ], pT, =, rule, ., getFirst, (, ), ;, final, T, [, ], wT, =]
[getFirst, (, ), ;, final, T, [, ], wT, =, rule, ., getSecond, (, ), ;, final, int, len, =]
[getFirst, (, ), ;, final, T, [, ], wT, =, rule, ., getSecond, (, ), ;, final, int, len, =]
[rule, ., getSecond, (, ), ;, final, int, len, =, pT, ., length, ;, final, double, [, ], pD, =]
[(, ), ;, final, int, len, =, pT, ., length, ;, final, double, [, ], pD, =, new, double, []
[length, ;, final, double, [, ], pD, =, new, double, [, len, ], ;, final, double, [, ], wD, =]
[double, [, ], pD, =, new, double, [, len, ], ;, final, double, [, ], wD, =, new, double, []
[len, ], ;, final, double, [, ], wD, =, new, double, [, len, ], ;, for, (, int, i, =]
[;, final, double, [, ], wD, =, new, double, [, len, ], ;, for, (, int, i, =, 0, ;]
[;, final, double, [, ], wD, =, new, double, [, len, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], wD, =, new, double, [, len, ], ;, for, (, int, i, =, 0, ;, i, <]
[], wD, =, new, double, [, len, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[], wD, =, new, double, [, len, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[double, [, len, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {]
[double, [, len, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {]
[len, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, pD, []
[for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, pD, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, pD, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, pD, [, i, ], =]
[int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, pD, [, i, ], =, pT, []
[len, ;, i, ++, ), {, pD, [, i, ], =, pT, [, i, ], ., doubleValue, (, ), ;]
[len, ;, i, ++, ), {, pD, [, i, ], =, pT, [, i, ], ., doubleValue, (, ), ;]
[i, ++, ), {, pD, [, i, ], =, pT, [, i, ], ., doubleValue, (, ), ;, wD, []
[{, pD, [, i, ], =, pT, [, i, ], ., doubleValue, (, ), ;, wD, [, i, ], =]
[{, pD, [, i, ], =, pT, [, i, ], ., doubleValue, (, ), ;, wD, [, i, ], =]
[{, pD, [, i, ], =, pT, [, i, ], ., doubleValue, (, ), ;, wD, [, i, ], =]
[[, i, ], =, pT, [, i, ], ., doubleValue, (, ), ;, wD, [, i, ], =, wT, []
[doubleValue, (, ), ;, wD, [, i, ], =, wT, [, i, ], ., doubleValue, (, ), ;, }, return]
[], ., doubleValue, (, ), ;, }, return, new, Pair, <, double, [, ], ,, double, [, ], >, (]
[doubleValue, (, ), ;, }, return, new, Pair, <, double, [, ], ,, double, [, ], >, (, pD, ,]
