[=, new, ArrayList, <, BigFraction, >, (, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, CHEBYSHEV_COEFFICIENTS, .]
[;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, CHEBYSHEV_COEFFICIENTS]
[;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, HERMITE_COEFFICIENTS]
[., add, (, BigFraction, ., ONE, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, CHEBYSHEV_COEFFICIENTS, ., add]
[), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;]
[., ONE, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ONE]
[;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, HERMITE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;]
[., add, (, BigFraction, ., ZERO, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, HERMITE_COEFFICIENTS, =, new]
[), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, HERMITE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, )]
[., ZERO, ), ;, CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, HERMITE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >]
[;, HERMITE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;]
[., add, (, BigFraction, ., ONE, ), ;, HERMITE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, HERMITE_COEFFICIENTS, .]
[), ;, HERMITE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, )]
[., ONE, ), ;, HERMITE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, .]
[=, new, ArrayList, <, BigFraction, >, (, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, HERMITE_COEFFICIENTS, .]
[;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, HERMITE_COEFFICIENTS]
[;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., TWO, ), ;, LAGUERRE_COEFFICIENTS]
[., add, (, BigFraction, ., ONE, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, HERMITE_COEFFICIENTS, ., add]
[), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., TWO, ), ;]
[., ONE, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., TWO]
[;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., TWO, ), ;, LAGUERRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;]
[., add, (, BigFraction, ., ZERO, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., TWO, ), ;, LAGUERRE_COEFFICIENTS, =, new]
[), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., TWO, ), ;, LAGUERRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, )]
[., ZERO, ), ;, HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., TWO, ), ;, LAGUERRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >]
[;, LAGUERRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;]
[., add, (, BigFraction, ., TWO, ), ;, LAGUERRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, LAGUERRE_COEFFICIENTS, .]
[), ;, LAGUERRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, )]
[., TWO, ), ;, LAGUERRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, .]
[=, new, ArrayList, <, BigFraction, >, (, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, LAGUERRE_COEFFICIENTS, .]
[;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, LAGUERRE_COEFFICIENTS]
[;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., MINUS_ONE, ), ;, LEGENDRE_COEFFICIENTS]
[., add, (, BigFraction, ., ONE, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, LAGUERRE_COEFFICIENTS, ., add]
[), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., MINUS_ONE, ), ;]
[., ONE, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., MINUS_ONE]
[;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., MINUS_ONE, ), ;, LEGENDRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;]
[., add, (, BigFraction, ., ONE, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., MINUS_ONE, ), ;, LEGENDRE_COEFFICIENTS, =, new]
[), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., MINUS_ONE, ), ;, LEGENDRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, )]
[., ONE, ), ;, LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., MINUS_ONE, ), ;, LEGENDRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >]
[;, LEGENDRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;]
[., add, (, BigFraction, ., MINUS_ONE, ), ;, LEGENDRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, LEGENDRE_COEFFICIENTS, .]
[), ;, LEGENDRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, )]
[., MINUS_ONE, ), ;, LEGENDRE_COEFFICIENTS, =, new, ArrayList, <, BigFraction, >, (, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, .]
[=, new, ArrayList, <, BigFraction, >, (, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, LEGENDRE_COEFFICIENTS, .]
[;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, LEGENDRE_COEFFICIENTS]
[;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, JACOBI_COEFFICIENTS]
[., add, (, BigFraction, ., ONE, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, LEGENDRE_COEFFICIENTS, ., add]
[), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;]
[., ONE, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE]
[;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, JACOBI_COEFFICIENTS, =, new, HashMap, <, JacobiKey, ,, List, <, BigFraction]
[., add, (, BigFraction, ., ZERO, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, JACOBI_COEFFICIENTS, =, new]
[), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, JACOBI_COEFFICIENTS, =, new, HashMap, <, JacobiKey, ,, List, <]
[., ZERO, ), ;, LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, ), ;, JACOBI_COEFFICIENTS, =, new, HashMap, <, JacobiKey, ,]
[;, JACOBI_COEFFICIENTS, =, new, HashMap, <, JacobiKey, ,, List, <, BigFraction, >, >, (, ), ;, }, private, PolynomialsUtils, (]
[., add, (, BigFraction, ., ONE, ), ;, JACOBI_COEFFICIENTS, =, new, HashMap, <, JacobiKey, ,, List, <, BigFraction, >, >]
[), ;, JACOBI_COEFFICIENTS, =, new, HashMap, <, JacobiKey, ,, List, <, BigFraction, >, >, (, ), ;, }, private, PolynomialsUtils]
[., ONE, ), ;, JACOBI_COEFFICIENTS, =, new, HashMap, <, JacobiKey, ,, List, <, BigFraction, >, >, (, ), ;, }]
[=, new, HashMap, <, JacobiKey, ,, List, <, BigFraction, >, >, (, ), ;, }, private, PolynomialsUtils, (, ), {]
[;, }, private, PolynomialsUtils, (, ), {, }, public, static, PolynomialFunction, createChebyshevPolynomial, (, final, int, degree, ), {, return, buildPolynomial]
[;, }, public, static, PolynomialFunction, createHermitePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (, degree, ,, HERMITE_COEFFICIENTS, ,, new]
[,, CHEBYSHEV_COEFFICIENTS, ,, new, RecurrenceCoefficientsGenerator, (, ), {, private, final, BigFraction, [, ], coeffs, =, {, BigFraction, ., ZERO, ,]
[,, new, RecurrenceCoefficientsGenerator, (, ), {, private, final, BigFraction, [, ], coeffs, =, {, BigFraction, ., ZERO, ,, BigFraction, .]
[), ;, }, public, static, PolynomialFunction, createHermitePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (, degree, ,, HERMITE_COEFFICIENTS, ,]
[;, public, BigFraction, [, ], generate, (, int, k, ), {, return, coeffs, ;, }, }, ), ;, }, public]
[,, BigFraction, ., TWO, ,, BigFraction, ., ONE, }, ;, public, BigFraction, [, ], generate, (, int, k, ), {]
[., ZERO, ,, BigFraction, ., TWO, ,, BigFraction, ., ONE, }, ;, public, BigFraction, [, ], generate, (, int, k]
[,, BigFraction, ., ONE, }, ;, public, BigFraction, [, ], generate, (, int, k, ), {, return, coeffs, ;, }]
[., TWO, ,, BigFraction, ., ONE, }, ;, public, BigFraction, [, ], generate, (, int, k, ), {, return, coeffs]
[}, ;, public, BigFraction, [, ], generate, (, int, k, ), {, return, coeffs, ;, }, }, ), ;, }]
[., ONE, }, ;, public, BigFraction, [, ], generate, (, int, k, ), {, return, coeffs, ;, }, }, )]
[;, }, }, ), ;, }, public, static, PolynomialFunction, createHermitePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (, degree]
[;, }, public, static, PolynomialFunction, createLaguerrePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (, degree, ,, LAGUERRE_COEFFICIENTS, ,, new]
[,, HERMITE_COEFFICIENTS, ,, new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, return, new]
[,, new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, return, new, BigFraction, []
[), ;, }, public, static, PolynomialFunction, createLaguerrePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (, degree, ,, LAGUERRE_COEFFICIENTS, ,]
[;, }, }, ), ;, }, public, static, PolynomialFunction, createLaguerrePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (, degree]
[;, }, }, ), ;, }, public, static, PolynomialFunction, createLaguerrePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (, degree]
[,, BigFraction, ., TWO, ,, new, BigFraction, (, 2, *, k, ), }, ;, }, }, ), ;, }, public]
[., ZERO, ,, BigFraction, ., TWO, ,, new, BigFraction, (, 2, *, k, ), }, ;, }, }, ), ;]
[,, new, BigFraction, (, 2, *, k, ), }, ;, }, }, ), ;, }, public, static, PolynomialFunction, createLaguerrePolynomial, (]
[., TWO, ,, new, BigFraction, (, 2, *, k, ), }, ;, }, }, ), ;, }, public, static, PolynomialFunction]
[}, ;, }, }, ), ;, }, public, static, PolynomialFunction, createLaguerrePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (]
[), }, ;, }, }, ), ;, }, public, static, PolynomialFunction, createLaguerrePolynomial, (, final, int, degree, ), {, return, buildPolynomial]
[*, k, ), }, ;, }, }, ), ;, }, public, static, PolynomialFunction, createLaguerrePolynomial, (, final, int, degree, ), {]
[), }, ;, }, }, ), ;, }, public, static, PolynomialFunction, createLaguerrePolynomial, (, final, int, degree, ), {, return, buildPolynomial]
[;, }, public, static, PolynomialFunction, createLegendrePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (, degree, ,, LEGENDRE_COEFFICIENTS, ,, new]
[,, LAGUERRE_COEFFICIENTS, ,, new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, final, int]
[,, new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, final, int, kP1, =]
[), ;, }, public, static, PolynomialFunction, createLegendrePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (, degree, ,, LEGENDRE_COEFFICIENTS, ,]
[;, return, new, BigFraction, [, ], {, new, BigFraction, (, 2, *, k, +, 1, ,, kP1, ), ,, new]
[+, 1, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, 2, *, k, +, 1, ,, kP1, )]
[;, return, new, BigFraction, [, ], {, new, BigFraction, (, 2, *, k, +, 1, ,, kP1, ), ,, new]
[;, }, }, ), ;, }, public, static, PolynomialFunction, createLegendrePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (, degree]
[;, }, }, ), ;, }, public, static, PolynomialFunction, createLegendrePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (, degree]
[,, new, BigFraction, (, -, 1, ,, kP1, ), ,, new, BigFraction, (, k, ,, kP1, ), }, ;, }]
[,, kP1, ), ,, new, BigFraction, (, -, 1, ,, kP1, ), ,, new, BigFraction, (, k, ,, kP1, )]
[+, 1, ,, kP1, ), ,, new, BigFraction, (, -, 1, ,, kP1, ), ,, new, BigFraction, (, k, ,]
[*, k, +, 1, ,, kP1, ), ,, new, BigFraction, (, -, 1, ,, kP1, ), ,, new, BigFraction, (]
[+, 1, ,, kP1, ), ,, new, BigFraction, (, -, 1, ,, kP1, ), ,, new, BigFraction, (, k, ,]
[,, kP1, ), ,, new, BigFraction, (, -, 1, ,, kP1, ), ,, new, BigFraction, (, k, ,, kP1, )]
[), ,, new, BigFraction, (, -, 1, ,, kP1, ), ,, new, BigFraction, (, k, ,, kP1, ), }, ;]
[,, new, BigFraction, (, k, ,, kP1, ), }, ;, }, }, ), ;, }, public, static, PolynomialFunction, createLegendrePolynomial, (]
[,, kP1, ), ,, new, BigFraction, (, k, ,, kP1, ), }, ;, }, }, ), ;, }, public, static]
[,, kP1, ), ,, new, BigFraction, (, k, ,, kP1, ), }, ;, }, }, ), ;, }, public, static]
[), ,, new, BigFraction, (, k, ,, kP1, ), }, ;, }, }, ), ;, }, public, static, PolynomialFunction, createLegendrePolynomial]
[}, ;, }, }, ), ;, }, public, static, PolynomialFunction, createLegendrePolynomial, (, final, int, degree, ), {, return, buildPolynomial, (]
[,, kP1, ), }, ;, }, }, ), ;, }, public, static, PolynomialFunction, createLegendrePolynomial, (, final, int, degree, ), {]
[), }, ;, }, }, ), ;, }, public, static, PolynomialFunction, createLegendrePolynomial, (, final, int, degree, ), {, return, buildPolynomial]
[;, }, public, static, PolynomialFunction, createJacobiPolynomial, (, final, int, degree, ,, final, int, v, ,, final, int, w, ), {]
[,, LEGENDRE_COEFFICIENTS, ,, new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, final, int]
[,, new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, final, int, kP1, =]
[), ;, }, public, static, PolynomialFunction, createJacobiPolynomial, (, final, int, degree, ,, final, int, v, ,, final, int, w, )]
[;, return, new, BigFraction, [, ], {, BigFraction, ., ZERO, ,, new, BigFraction, (, k, +, kP1, ,, kP1, )]
[+, 1, ;, return, new, BigFraction, [, ], {, BigFraction, ., ZERO, ,, new, BigFraction, (, k, +, kP1, ,]
[;, return, new, BigFraction, [, ], {, BigFraction, ., ZERO, ,, new, BigFraction, (, k, +, kP1, ,, kP1, )]
[;, }, }, ), ;, }, public, static, PolynomialFunction, createJacobiPolynomial, (, final, int, degree, ,, final, int, v, ,, final]
[;, }, }, ), ;, }, public, static, PolynomialFunction, createJacobiPolynomial, (, final, int, degree, ,, final, int, v, ,, final]
[,, new, BigFraction, (, k, +, kP1, ,, kP1, ), ,, new, BigFraction, (, k, ,, kP1, ), }, ;]
[., ZERO, ,, new, BigFraction, (, k, +, kP1, ,, kP1, ), ,, new, BigFraction, (, k, ,, kP1, )]
[,, new, BigFraction, (, k, ,, kP1, ), }, ;, }, }, ), ;, }, public, static, PolynomialFunction, createJacobiPolynomial, (]
[,, kP1, ), ,, new, BigFraction, (, k, ,, kP1, ), }, ;, }, }, ), ;, }, public, static]
[+, kP1, ,, kP1, ), ,, new, BigFraction, (, k, ,, kP1, ), }, ;, }, }, ), ;, }]
[,, kP1, ), ,, new, BigFraction, (, k, ,, kP1, ), }, ;, }, }, ), ;, }, public, static]
[), ,, new, BigFraction, (, k, ,, kP1, ), }, ;, }, }, ), ;, }, public, static, PolynomialFunction, createJacobiPolynomial]
[}, ;, }, }, ), ;, }, public, static, PolynomialFunction, createJacobiPolynomial, (, final, int, degree, ,, final, int, v, ,]
[,, kP1, ), }, ;, }, }, ), ;, }, public, static, PolynomialFunction, createJacobiPolynomial, (, final, int, degree, ,, final]
[), }, ;, }, }, ), ;, }, public, static, PolynomialFunction, createJacobiPolynomial, (, final, int, degree, ,, final, int, v]
[;, if, (, !, JACOBI_COEFFICIENTS, ., containsKey, (, key, ), ), {, final, List, <, BigFraction, >, list, =, new]
[,, w, ), ;, if, (, !, JACOBI_COEFFICIENTS, ., containsKey, (, key, ), ), {, final, List, <, BigFraction, >]
[), ;, if, (, !, JACOBI_COEFFICIENTS, ., containsKey, (, key, ), ), {, final, List, <, BigFraction, >, list, =]
[), {, final, List, <, BigFraction, >, list, =, new, ArrayList, <, BigFraction, >, (, ), ;, JACOBI_COEFFICIENTS, ., put]
[), {, final, List, <, BigFraction, >, list, =, new, ArrayList, <, BigFraction, >, (, ), ;, JACOBI_COEFFICIENTS, ., put]
[., containsKey, (, key, ), ), {, final, List, <, BigFraction, >, list, =, new, ArrayList, <, BigFraction, >, (]
[), ), {, final, List, <, BigFraction, >, list, =, new, ArrayList, <, BigFraction, >, (, ), ;, JACOBI_COEFFICIENTS, .]
[;, JACOBI_COEFFICIENTS, ., put, (, key, ,, list, ), ;, list, ., add, (, BigFraction, ., ONE, ), ;, list]
[;, list, ., add, (, BigFraction, ., ONE, ), ;, list, ., add, (, new, BigFraction, (, v, -, w]
[., put, (, key, ,, list, ), ;, list, ., add, (, BigFraction, ., ONE, ), ;, list, ., add]
[,, list, ), ;, list, ., add, (, BigFraction, ., ONE, ), ;, list, ., add, (, new, BigFraction, (]
[), ;, list, ., add, (, BigFraction, ., ONE, ), ;, list, ., add, (, new, BigFraction, (, v, -]
[;, list, ., add, (, new, BigFraction, (, v, -, w, ,, 2, ), ), ;, list, ., add, (]
[., add, (, BigFraction, ., ONE, ), ;, list, ., add, (, new, BigFraction, (, v, -, w, ,, 2]
[), ;, list, ., add, (, new, BigFraction, (, v, -, w, ,, 2, ), ), ;, list, ., add]
[., ONE, ), ;, list, ., add, (, new, BigFraction, (, v, -, w, ,, 2, ), ), ;, list]
[;, list, ., add, (, new, BigFraction, (, 2, +, v, +, w, ,, 2, ), ), ;, }, return]
[., add, (, new, BigFraction, (, v, -, w, ,, 2, ), ), ;, list, ., add, (, new, BigFraction]
[), ;, list, ., add, (, new, BigFraction, (, 2, +, v, +, w, ,, 2, ), ), ;, }]
[,, 2, ), ), ;, list, ., add, (, new, BigFraction, (, 2, +, v, +, w, ,, 2, )]
[-, w, ,, 2, ), ), ;, list, ., add, (, new, BigFraction, (, 2, +, v, +, w, ,]
[,, 2, ), ), ;, list, ., add, (, new, BigFraction, (, 2, +, v, +, w, ,, 2, )]
[), ), ;, list, ., add, (, new, BigFraction, (, 2, +, v, +, w, ,, 2, ), ), ;]
[;, }, return, buildPolynomial, (, degree, ,, JACOBI_COEFFICIENTS, ., get, (, key, ), ,, new, RecurrenceCoefficientsGenerator, (, ), {, public]
[., add, (, new, BigFraction, (, 2, +, v, +, w, ,, 2, ), ), ;, }, return, buildPolynomial, (]
[), ;, }, return, buildPolynomial, (, degree, ,, JACOBI_COEFFICIENTS, ., get, (, key, ), ,, new, RecurrenceCoefficientsGenerator, (, ), {]
[,, 2, ), ), ;, }, return, buildPolynomial, (, degree, ,, JACOBI_COEFFICIENTS, ., get, (, key, ), ,, new, RecurrenceCoefficientsGenerator]
[+, w, ,, 2, ), ), ;, }, return, buildPolynomial, (, degree, ,, JACOBI_COEFFICIENTS, ., get, (, key, ), ,]
[+, v, +, w, ,, 2, ), ), ;, }, return, buildPolynomial, (, degree, ,, JACOBI_COEFFICIENTS, ., get, (, key]
[+, w, ,, 2, ), ), ;, }, return, buildPolynomial, (, degree, ,, JACOBI_COEFFICIENTS, ., get, (, key, ), ,]
[,, 2, ), ), ;, }, return, buildPolynomial, (, degree, ,, JACOBI_COEFFICIENTS, ., get, (, key, ), ,, new, RecurrenceCoefficientsGenerator]
[), ), ;, }, return, buildPolynomial, (, degree, ,, JACOBI_COEFFICIENTS, ., get, (, key, ), ,, new, RecurrenceCoefficientsGenerator, (, )]
[;, }, private, static, class, JacobiKey, {, private, final, int, v, ;, private, final, int, w, ;, public, JacobiKey, (]
[,, JACOBI_COEFFICIENTS, ., get, (, key, ), ,, new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int]
[,, new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, k, ++, ;, final]
[., get, (, key, ), ,, new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, )]
[), ,, new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, k, ++, ;]
[), ;, }, private, static, class, JacobiKey, {, private, final, int, v, ;, private, final, int, w, ;, public, JacobiKey]
[;, final, int, kvw, =, k, +, v, +, w, ;, final, int, twoKvw, =, kvw, +, k, ;, final]
[++, ;, final, int, kvw, =, k, +, v, +, w, ;, final, int, twoKvw, =, kvw, +, k, ;]
[;, final, int, twoKvw, =, kvw, +, k, ;, final, int, twoKvwM1, =, twoKvw, -, 1, ;, final, int, twoKvwM2]
[+, w, ;, final, int, twoKvw, =, kvw, +, k, ;, final, int, twoKvwM1, =, twoKvw, -, 1, ;, final]
[+, v, +, w, ;, final, int, twoKvw, =, kvw, +, k, ;, final, int, twoKvwM1, =, twoKvw, -, 1]
[+, w, ;, final, int, twoKvw, =, kvw, +, k, ;, final, int, twoKvwM1, =, twoKvw, -, 1, ;, final]
[;, final, int, twoKvw, =, kvw, +, k, ;, final, int, twoKvwM1, =, twoKvw, -, 1, ;, final, int, twoKvwM2]
[;, final, int, twoKvwM1, =, twoKvw, -, 1, ;, final, int, twoKvwM2, =, twoKvw, -, 2, ;, final, int, den]
[+, k, ;, final, int, twoKvwM1, =, twoKvw, -, 1, ;, final, int, twoKvwM2, =, twoKvw, -, 2, ;, final]
[;, final, int, twoKvwM1, =, twoKvw, -, 1, ;, final, int, twoKvwM2, =, twoKvw, -, 2, ;, final, int, den]
[;, final, int, twoKvwM2, =, twoKvw, -, 2, ;, final, int, den, =, 2, *, k, *, kvw, *, twoKvwM2]
[-, 1, ;, final, int, twoKvwM2, =, twoKvw, -, 2, ;, final, int, den, =, 2, *, k, *, kvw]
[;, final, int, twoKvwM2, =, twoKvw, -, 2, ;, final, int, den, =, 2, *, k, *, kvw, *, twoKvwM2]
[;, final, int, den, =, 2, *, k, *, kvw, *, twoKvwM2, ;, return, new, BigFraction, [, ], {, new]
[-, 2, ;, final, int, den, =, 2, *, k, *, kvw, *, twoKvwM2, ;, return, new, BigFraction, [, ]]
[;, final, int, den, =, 2, *, k, *, kvw, *, twoKvwM2, ;, return, new, BigFraction, [, ], {, new]
[;, return, new, BigFraction, [, ], {, new, BigFraction, (, twoKvwM1, *, (, v, *, v, -, w, *, w]
[*, twoKvwM2, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, twoKvwM1, *, (, v, *, v, -, w]
[*, kvw, *, twoKvwM2, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, twoKvwM1, *, (, v, *, v]
[*, k, *, kvw, *, twoKvwM2, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, twoKvwM1, *, (, v]
[*, kvw, *, twoKvwM2, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, twoKvwM1, *, (, v, *, v]
[*, twoKvwM2, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, twoKvwM1, *, (, v, *, v, -, w]
[;, return, new, BigFraction, [, ], {, new, BigFraction, (, twoKvwM1, *, (, v, *, v, -, w, *, w]
[;, }, }, ), ;, }, private, static, class, JacobiKey, {, private, final, int, v, ;, private, final, int, w]
[;, }, }, ), ;, }, private, static, class, JacobiKey, {, private, final, int, v, ;, private, final, int, w]
[,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (, 2, *, (, k]
[,, den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (, 2]
[*, (, v, *, v, -, w, *, w, ), ,, den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw]
[,, den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (, 2]
[), ,, den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (]
[-, w, *, w, ), ,, den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, )]
[*, v, -, w, *, w, ), ,, den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,]
[-, w, *, w, ), ,, den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, )]
[), ,, den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (]
[*, w, ), ,, den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new]
[), ,, den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (]
[), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (, 2, *, (]
[,, new, BigFraction, (, 2, *, (, k, +, v, -, 1, ), *, (, k, +, w, -, 1]
[,, den, ), ,, new, BigFraction, (, 2, *, (, k, +, v, -, 1, ), *, (, k, +]
[*, twoKvwM2, ,, den, ), ,, new, BigFraction, (, 2, *, (, k, +, v, -, 1, ), *, (]
[*, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (, 2, *, (, k, +, v, -, 1, )]
[*, twoKvwM2, ,, den, ), ,, new, BigFraction, (, 2, *, (, k, +, v, -, 1, ), *, (]
[,, den, ), ,, new, BigFraction, (, 2, *, (, k, +, v, -, 1, ), *, (, k, +]
[), ,, new, BigFraction, (, 2, *, (, k, +, v, -, 1, ), *, (, k, +, w, -]
[}, ;, }, }, ), ;, }, private, static, class, JacobiKey, {, private, final, int, v, ;, private, final, int]
[,, den, ), }, ;, }, }, ), ;, }, private, static, class, JacobiKey, {, private, final, int, v, ;]
[*, twoKvw, ,, den, ), }, ;, }, }, ), ;, }, private, static, class, JacobiKey, {, private, final, int]
[*, (, k, +, w, -, 1, ), *, twoKvw, ,, den, ), }, ;, }, }, ), ;, }]
[*, (, k, +, v, -, 1, ), *, (, k, +, w, -, 1, ), *, twoKvw, ,, den]
[*, (, k, +, w, -, 1, ), *, twoKvw, ,, den, ), }, ;, }, }, ), ;, }]
[), *, (, k, +, w, -, 1, ), *, twoKvw, ,, den, ), }, ;, }, }, ), ;]
[-, 1, ), *, (, k, +, w, -, 1, ), *, twoKvw, ,, den, ), }, ;, }, }]
[+, v, -, 1, ), *, (, k, +, w, -, 1, ), *, twoKvw, ,, den, ), }, ;]
[-, 1, ), *, (, k, +, w, -, 1, ), *, twoKvw, ,, den, ), }, ;, }, }]
[), *, (, k, +, w, -, 1, ), *, twoKvw, ,, den, ), }, ;, }, }, ), ;]
[*, twoKvw, ,, den, ), }, ;, }, }, ), ;, }, private, static, class, JacobiKey, {, private, final, int]
[), *, twoKvw, ,, den, ), }, ;, }, }, ), ;, }, private, static, class, JacobiKey, {, private, final]
[-, 1, ), *, twoKvw, ,, den, ), }, ;, }, }, ), ;, }, private, static, class, JacobiKey, {]
[+, w, -, 1, ), *, twoKvw, ,, den, ), }, ;, }, }, ), ;, }, private, static, class]
[-, 1, ), *, twoKvw, ,, den, ), }, ;, }, }, ), ;, }, private, static, class, JacobiKey, {]
[), *, twoKvw, ,, den, ), }, ;, }, }, ), ;, }, private, static, class, JacobiKey, {, private, final]
[,, den, ), }, ;, }, }, ), ;, }, private, static, class, JacobiKey, {, private, final, int, v, ;]
[), }, ;, }, }, ), ;, }, private, static, class, JacobiKey, {, private, final, int, v, ;, private, final]
[=, v, ;, this, ., w, =, w, ;, }, @, Override, public, int, hashCode, (, ), {, return, (]
[., v, =, v, ;, this, ., w, =, w, ;, }, @, Override, public, int, hashCode, (, ), {]
[;, this, ., w, =, w, ;, }, @, Override, public, int, hashCode, (, ), {, return, (, v, <<]
[=, w, ;, }, @, Override, public, int, hashCode, (, ), {, return, (, v, <<, 16, ), ^, w]
[., w, =, w, ;, }, @, Override, public, int, hashCode, (, ), {, return, (, v, <<, 16, )]
[;, }, @, Override, public, int, hashCode, (, ), {, return, (, v, <<, 16, ), ^, w, ;, }]
[;, }, @, Override, public, boolean, equals, (, final, Object, key, ), {, if, (, (, key, ==, null, )]
[^, w, ;, }, @, Override, public, boolean, equals, (, final, Object, key, ), {, if, (, (, key, ==]
[), ^, w, ;, }, @, Override, public, boolean, equals, (, final, Object, key, ), {, if, (, (, key]
[<<, 16, ), ^, w, ;, }, @, Override, public, boolean, equals, (, final, Object, key, ), {, if, (]
[), ^, w, ;, }, @, Override, public, boolean, equals, (, final, Object, key, ), {, if, (, (, key]
[;, }, @, Override, public, boolean, equals, (, final, Object, key, ), {, if, (, (, key, ==, null, )]
[), {, return, false, ;, }, final, JacobiKey, otherK, =, (, JacobiKey, ), key, ;, return, (, v, ==, otherK]
[||, !, (, key, instanceof, JacobiKey, ), ), {, return, false, ;, }, final, JacobiKey, otherK, =, (, JacobiKey, )]
[), ||, !, (, key, instanceof, JacobiKey, ), ), {, return, false, ;, }, final, JacobiKey, otherK, =, (, JacobiKey]
[==, null, ), ||, !, (, key, instanceof, JacobiKey, ), ), {, return, false, ;, }, final, JacobiKey, otherK, =]
[), ||, !, (, key, instanceof, JacobiKey, ), ), {, return, false, ;, }, final, JacobiKey, otherK, =, (, JacobiKey]
[), {, return, false, ;, }, final, JacobiKey, otherK, =, (, JacobiKey, ), key, ;, return, (, v, ==, otherK]
[), {, return, false, ;, }, final, JacobiKey, otherK, =, (, JacobiKey, ), key, ;, return, (, v, ==, otherK]
[), ), {, return, false, ;, }, final, JacobiKey, otherK, =, (, JacobiKey, ), key, ;, return, (, v, ==]
[instanceof, JacobiKey, ), ), {, return, false, ;, }, final, JacobiKey, otherK, =, (, JacobiKey, ), key, ;, return, (]
[;, }, final, JacobiKey, otherK, =, (, JacobiKey, ), key, ;, return, (, v, ==, otherK, ., v, ), &&]
[;, return, (, v, ==, otherK, ., v, ), &&, (, w, ==, otherK, ., w, ), ;, }, }]
[;, return, (, v, ==, otherK, ., v, ), &&, (, w, ==, otherK, ., w, ), ;, }, }]
[;, }, }, public, static, double, [, ], shift, (, final, double, [, ], coefficients, ,, final, double, shift, )]
[&&, (, w, ==, otherK, ., w, ), ;, }, }, public, static, double, [, ], shift, (, final, double]
[), &&, (, w, ==, otherK, ., w, ), ;, }, }, public, static, double, [, ], shift, (, final]
[==, otherK, ., v, ), &&, (, w, ==, otherK, ., w, ), ;, }, }, public, static, double, []
[), &&, (, w, ==, otherK, ., w, ), ;, }, }, public, static, double, [, ], shift, (, final]
[., v, ), &&, (, w, ==, otherK, ., w, ), ;, }, }, public, static, double, [, ], shift]
[;, }, }, public, static, double, [, ], shift, (, final, double, [, ], coefficients, ,, final, double, shift, )]
[), ;, }, }, public, static, double, [, ], shift, (, final, double, [, ], coefficients, ,, final, double, shift]
[==, otherK, ., w, ), ;, }, }, public, static, double, [, ], shift, (, final, double, [, ], coefficients]
[), ;, }, }, public, static, double, [, ], shift, (, final, double, [, ], coefficients, ,, final, double, shift]
[., w, ), ;, }, }, public, static, double, [, ], shift, (, final, double, [, ], coefficients, ,, final]
[;, final, double, [, ], newCoefficients, =, new, double, [, dp1, ], ;, final, int, [, ], [, ], coeff]
[., length, ;, final, double, [, ], newCoefficients, =, new, double, [, dp1, ], ;, final, int, [, ], []
[;, final, int, [, ], [, ], coeff, =, new, int, [, dp1, ], [, dp1, ], ;, for, (]
[], ;, final, int, [, ], [, ], coeff, =, new, int, [, dp1, ], [, dp1, ], ;, for]
[;, for, (, int, i, =, 0, ;, i, <, dp1, ;, i, ++, ), {, for, (, int, j]
[], [, dp1, ], ;, for, (, int, i, =, 0, ;, i, <, dp1, ;, i, ++, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, dp1, ;, i, ++, ), {, for, (, int]
[;, i, <, dp1, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <=, i, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {]
[<, dp1, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {]
[), {, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {, coeff, [, i]
[++, ), {, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {, coeff, []
[;, j, <=, i, ;, j, ++, ), {, coeff, [, i, ], [, j, ], =, (, int, )]
[;, j, ++, ), {, coeff, [, i, ], [, j, ], =, (, int, ), CombinatoricsUtils, ., binomialCoefficient, (]
[<=, i, ;, j, ++, ), {, coeff, [, i, ], [, j, ], =, (, int, ), CombinatoricsUtils, .]
[;, j, ++, ), {, coeff, [, i, ], [, j, ], =, (, int, ), CombinatoricsUtils, ., binomialCoefficient, (]
[), {, coeff, [, i, ], [, j, ], =, (, int, ), CombinatoricsUtils, ., binomialCoefficient, (, i, ,, j]
[++, ), {, coeff, [, i, ], [, j, ], =, (, int, ), CombinatoricsUtils, ., binomialCoefficient, (, i, ,]
[=, (, int, ), CombinatoricsUtils, ., binomialCoefficient, (, i, ,, j, ), ;, }, }, for, (, int, i, =]
[[, j, ], =, (, int, ), CombinatoricsUtils, ., binomialCoefficient, (, i, ,, j, ), ;, }, }, for, (]
[[, i, ], [, j, ], =, (, int, ), CombinatoricsUtils, ., binomialCoefficient, (, i, ,, j, ), ;, }]
[], [, j, ], =, (, int, ), CombinatoricsUtils, ., binomialCoefficient, (, i, ,, j, ), ;, }, }, for]
[], =, (, int, ), CombinatoricsUtils, ., binomialCoefficient, (, i, ,, j, ), ;, }, }, for, (, int, i]
[;, }, }, for, (, int, i, =, 0, ;, i, <, dp1, ;, i, ++, ), {, newCoefficients, []
[;, }, }, for, (, int, i, =, 0, ;, i, <, dp1, ;, i, ++, ), {, newCoefficients, []
[., binomialCoefficient, (, i, ,, j, ), ;, }, }, for, (, int, i, =, 0, ;, i, <, dp1]
[,, j, ), ;, }, }, for, (, int, i, =, 0, ;, i, <, dp1, ;, i, ++, )]
[), ;, }, }, for, (, int, i, =, 0, ;, i, <, dp1, ;, i, ++, ), {, newCoefficients]
[;, i, <, dp1, ;, i, ++, ), {, newCoefficients, [, 0, ], +=, coefficients, [, i, ], *, FastMath]
[;, i, ++, ), {, newCoefficients, [, 0, ], +=, coefficients, [, i, ], *, FastMath, ., pow, (, shift]
[<, dp1, ;, i, ++, ), {, newCoefficients, [, 0, ], +=, coefficients, [, i, ], *, FastMath, ., pow]
[;, i, ++, ), {, newCoefficients, [, 0, ], +=, coefficients, [, i, ], *, FastMath, ., pow, (, shift]
[), {, newCoefficients, [, 0, ], +=, coefficients, [, i, ], *, FastMath, ., pow, (, shift, ,, i, )]
[++, ), {, newCoefficients, [, 0, ], +=, coefficients, [, i, ], *, FastMath, ., pow, (, shift, ,, i]
[+=, coefficients, [, i, ], *, FastMath, ., pow, (, shift, ,, i, ), ;, }, final, int, d, =]
[[, 0, ], +=, coefficients, [, i, ], *, FastMath, ., pow, (, shift, ,, i, ), ;, }, final]
[], +=, coefficients, [, i, ], *, FastMath, ., pow, (, shift, ,, i, ), ;, }, final, int, d]
[;, }, final, int, d, =, dp1, -, 1, ;, for, (, int, i, =, 0, ;, i, <, d]
[*, FastMath, ., pow, (, shift, ,, i, ), ;, }, final, int, d, =, dp1, -, 1, ;, for]
[[, i, ], *, FastMath, ., pow, (, shift, ,, i, ), ;, }, final, int, d, =, dp1, -]
[], *, FastMath, ., pow, (, shift, ,, i, ), ;, }, final, int, d, =, dp1, -, 1, ;]
[;, }, final, int, d, =, dp1, -, 1, ;, for, (, int, i, =, 0, ;, i, <, d]
[., pow, (, shift, ,, i, ), ;, }, final, int, d, =, dp1, -, 1, ;, for, (, int]
[,, i, ), ;, }, final, int, d, =, dp1, -, 1, ;, for, (, int, i, =, 0, ;]
[), ;, }, final, int, d, =, dp1, -, 1, ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, d, ;, i, ++, ), {, for, (, int, j]
[-, 1, ;, for, (, int, i, =, 0, ;, i, <, d, ;, i, ++, ), {, for, (]
[;, for, (, int, i, =, 0, ;, i, <, d, ;, i, ++, ), {, for, (, int, j]
[;, i, <, d, ;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, d, ;]
[;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, d, ;, j, ++, ), {]
[<, d, ;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, d, ;, j, ++]
[;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, d, ;, j, ++, ), {]
[), {, for, (, int, j, =, i, ;, j, <, d, ;, j, ++, ), {, newCoefficients, [, i]
[++, ), {, for, (, int, j, =, i, ;, j, <, d, ;, j, ++, ), {, newCoefficients, []
[;, j, <, d, ;, j, ++, ), {, newCoefficients, [, i, +, 1, ], +=, coeff, [, j, +]
[;, j, ++, ), {, newCoefficients, [, i, +, 1, ], +=, coeff, [, j, +, 1, ], [, j]
[<, d, ;, j, ++, ), {, newCoefficients, [, i, +, 1, ], +=, coeff, [, j, +, 1, ]]
[;, j, ++, ), {, newCoefficients, [, i, +, 1, ], +=, coeff, [, j, +, 1, ], [, j]
[), {, newCoefficients, [, i, +, 1, ], +=, coeff, [, j, +, 1, ], [, j, -, i, ]]
[++, ), {, newCoefficients, [, i, +, 1, ], +=, coeff, [, j, +, 1, ], [, j, -, i]
[+=, coeff, [, j, +, 1, ], [, j, -, i, ], *, coefficients, [, j, +, 1, ], *]
[[, i, +, 1, ], +=, coeff, [, j, +, 1, ], [, j, -, i, ], *, coefficients, []
[], +=, coeff, [, j, +, 1, ], [, j, -, i, ], *, coefficients, [, j, +, 1, ]]
[+, 1, ], +=, coeff, [, j, +, 1, ], [, j, -, i, ], *, coefficients, [, j, +]
[], +=, coeff, [, j, +, 1, ], [, j, -, i, ], *, coefficients, [, j, +, 1, ]]
[;, }, }, return, newCoefficients, ;, }, private, static, PolynomialFunction, buildPolynomial, (, final, int, degree, ,, final, List, <, BigFraction]
[*, FastMath, ., pow, (, shift, ,, j, -, i, ), ;, }, }, return, newCoefficients, ;, }, private, static]
[*, coefficients, [, j, +, 1, ], *, FastMath, ., pow, (, shift, ,, j, -, i, ), ;, }]
[[, j, -, i, ], *, coefficients, [, j, +, 1, ], *, FastMath, ., pow, (, shift, ,, j]
[[, j, +, 1, ], [, j, -, i, ], *, coefficients, [, j, +, 1, ], *, FastMath, .]
[], [, j, -, i, ], *, coefficients, [, j, +, 1, ], *, FastMath, ., pow, (, shift, ,]
[+, 1, ], [, j, -, i, ], *, coefficients, [, j, +, 1, ], *, FastMath, ., pow, (]
[], [, j, -, i, ], *, coefficients, [, j, +, 1, ], *, FastMath, ., pow, (, shift, ,]
[], *, coefficients, [, j, +, 1, ], *, FastMath, ., pow, (, shift, ,, j, -, i, ), ;]
[-, i, ], *, coefficients, [, j, +, 1, ], *, FastMath, ., pow, (, shift, ,, j, -, i]
[], *, coefficients, [, j, +, 1, ], *, FastMath, ., pow, (, shift, ,, j, -, i, ), ;]
[*, FastMath, ., pow, (, shift, ,, j, -, i, ), ;, }, }, return, newCoefficients, ;, }, private, static]
[[, j, +, 1, ], *, FastMath, ., pow, (, shift, ,, j, -, i, ), ;, }, }, return]
[], *, FastMath, ., pow, (, shift, ,, j, -, i, ), ;, }, }, return, newCoefficients, ;, }, private]
[+, 1, ], *, FastMath, ., pow, (, shift, ,, j, -, i, ), ;, }, }, return, newCoefficients, ;]
[], *, FastMath, ., pow, (, shift, ,, j, -, i, ), ;, }, }, return, newCoefficients, ;, }, private]
[;, }, }, return, newCoefficients, ;, }, private, static, PolynomialFunction, buildPolynomial, (, final, int, degree, ,, final, List, <, BigFraction]
[., pow, (, shift, ,, j, -, i, ), ;, }, }, return, newCoefficients, ;, }, private, static, PolynomialFunction, buildPolynomial]
[,, j, -, i, ), ;, }, }, return, newCoefficients, ;, }, private, static, PolynomialFunction, buildPolynomial, (, final, int, degree]
[), ;, }, }, return, newCoefficients, ;, }, private, static, PolynomialFunction, buildPolynomial, (, final, int, degree, ,, final, List, <]
[-, i, ), ;, }, }, return, newCoefficients, ;, }, private, static, PolynomialFunction, buildPolynomial, (, final, int, degree, ,, final]
[), ;, }, }, return, newCoefficients, ;, }, private, static, PolynomialFunction, buildPolynomial, (, final, int, degree, ,, final, List, <]
[;, }, private, static, PolynomialFunction, buildPolynomial, (, final, int, degree, ,, final, List, <, BigFraction, >, coefficients, ,, final, RecurrenceCoefficientsGenerator]
[;, synchronized, (, PolynomialsUtils, ., class, ), {, if, (, degree, >, maxDegree, ), {, computeUpToDegree, (, degree, ,, maxDegree]
[-, 1, ;, synchronized, (, PolynomialsUtils, ., class, ), {, if, (, degree, >, maxDegree, ), {, computeUpToDegree, (, degree]
[-, 1, ;, synchronized, (, PolynomialsUtils, ., class, ), {, if, (, degree, >, maxDegree, ), {, computeUpToDegree, (, degree]
[., floor, (, FastMath, ., sqrt, (, 2, *, coefficients, ., size, (, ), ), ), -, 1, ;, synchronized]
[), -, 1, ;, synchronized, (, PolynomialsUtils, ., class, ), {, if, (, degree, >, maxDegree, ), {, computeUpToDegree, (]
[., sqrt, (, 2, *, coefficients, ., size, (, ), ), ), -, 1, ;, synchronized, (, PolynomialsUtils, ., class]
[), ), -, 1, ;, synchronized, (, PolynomialsUtils, ., class, ), {, if, (, degree, >, maxDegree, ), {, computeUpToDegree]
[*, coefficients, ., size, (, ), ), ), -, 1, ;, synchronized, (, PolynomialsUtils, ., class, ), {, if, (]
[), ), -, 1, ;, synchronized, (, PolynomialsUtils, ., class, ), {, if, (, degree, >, maxDegree, ), {, computeUpToDegree]
[., size, (, ), ), ), -, 1, ;, synchronized, (, PolynomialsUtils, ., class, ), {, if, (, degree, >]
[;, synchronized, (, PolynomialsUtils, ., class, ), {, if, (, degree, >, maxDegree, ), {, computeUpToDegree, (, degree, ,, maxDegree]
[), {, if, (, degree, >, maxDegree, ), {, computeUpToDegree, (, degree, ,, maxDegree, ,, generator, ,, coefficients, ), ;]
[), {, computeUpToDegree, (, degree, ,, maxDegree, ,, generator, ,, coefficients, ), ;, }, }, final, int, start, =, degree]
[>, maxDegree, ), {, computeUpToDegree, (, degree, ,, maxDegree, ,, generator, ,, coefficients, ), ;, }, }, final, int, start]
[), {, computeUpToDegree, (, degree, ,, maxDegree, ,, generator, ,, coefficients, ), ;, }, }, final, int, start, =, degree]
[;, }, }, final, int, start, =, degree, *, (, degree, +, 1, ), /, 2, ;, final, double, []
[,, maxDegree, ,, generator, ,, coefficients, ), ;, }, }, final, int, start, =, degree, *, (, degree, +, 1]
[,, generator, ,, coefficients, ), ;, }, }, final, int, start, =, degree, *, (, degree, +, 1, ), /]
[,, coefficients, ), ;, }, }, final, int, start, =, degree, *, (, degree, +, 1, ), /, 2, ;]
[), ;, }, }, final, int, start, =, degree, *, (, degree, +, 1, ), /, 2, ;, final, double]
[;, final, double, [, ], a, =, new, double, [, degree, +, 1, ], ;, for, (, int, i, =]
[/, 2, ;, final, double, [, ], a, =, new, double, [, degree, +, 1, ], ;, for, (, int]
[*, (, degree, +, 1, ), /, 2, ;, final, double, [, ], a, =, new, double, [, degree, +]
[/, 2, ;, final, double, [, ], a, =, new, double, [, degree, +, 1, ], ;, for, (, int]
[), /, 2, ;, final, double, [, ], a, =, new, double, [, degree, +, 1, ], ;, for, (]
[+, 1, ), /, 2, ;, final, double, [, ], a, =, new, double, [, degree, +, 1, ], ;]
[), /, 2, ;, final, double, [, ], a, =, new, double, [, degree, +, 1, ], ;, for, (]
[;, final, double, [, ], a, =, new, double, [, degree, +, 1, ], ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <=, degree, ;, ++, i, ), {, a, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <=, degree, ;, ++, i, ), {, a, [, i]
[+, 1, ], ;, for, (, int, i, =, 0, ;, i, <=, degree, ;, ++, i, ), {, a]
[], ;, for, (, int, i, =, 0, ;, i, <=, degree, ;, ++, i, ), {, a, [, i]
[;, i, <=, degree, ;, ++, i, ), {, a, [, i, ], =, coefficients, ., get, (, start, +]
[;, ++, i, ), {, a, [, i, ], =, coefficients, ., get, (, start, +, i, ), ., doubleValue]
[<=, degree, ;, ++, i, ), {, a, [, i, ], =, coefficients, ., get, (, start, +, i, )]
[;, ++, i, ), {, a, [, i, ], =, coefficients, ., get, (, start, +, i, ), ., doubleValue]
[), {, a, [, i, ], =, coefficients, ., get, (, start, +, i, ), ., doubleValue, (, ), ;]
[), {, a, [, i, ], =, coefficients, ., get, (, start, +, i, ), ., doubleValue, (, ), ;]
[=, coefficients, ., get, (, start, +, i, ), ., doubleValue, (, ), ;, }, return, new, PolynomialFunction, (, a]
[[, i, ], =, coefficients, ., get, (, start, +, i, ), ., doubleValue, (, ), ;, }, return, new]
[], =, coefficients, ., get, (, start, +, i, ), ., doubleValue, (, ), ;, }, return, new, PolynomialFunction, (]
[;, }, return, new, PolynomialFunction, (, a, ), ;, }, private, static, void, computeUpToDegree, (, final, int, degree, ,, final]
[., doubleValue, (, ), ;, }, return, new, PolynomialFunction, (, a, ), ;, }, private, static, void, computeUpToDegree, (, final]
[., get, (, start, +, i, ), ., doubleValue, (, ), ;, }, return, new, PolynomialFunction, (, a, ), ;]
[), ., doubleValue, (, ), ;, }, return, new, PolynomialFunction, (, a, ), ;, }, private, static, void, computeUpToDegree, (]
[+, i, ), ., doubleValue, (, ), ;, }, return, new, PolynomialFunction, (, a, ), ;, }, private, static, void]
[), ., doubleValue, (, ), ;, }, return, new, PolynomialFunction, (, a, ), ;, }, private, static, void, computeUpToDegree, (]
[;, }, private, static, void, computeUpToDegree, (, final, int, degree, ,, final, int, maxDegree, ,, final, RecurrenceCoefficientsGenerator, generator, ,, final]
[), ;, }, private, static, void, computeUpToDegree, (, final, int, degree, ,, final, int, maxDegree, ,, final, RecurrenceCoefficientsGenerator, generator, ,]
[;, for, (, int, k, =, maxDegree, ;, k, <, degree, ;, ++, k, ), {, int, startKm1, =, startK]
[/, 2, ;, for, (, int, k, =, maxDegree, ;, k, <, degree, ;, ++, k, ), {, int, startKm1]
[*, maxDegree, /, 2, ;, for, (, int, k, =, maxDegree, ;, k, <, degree, ;, ++, k, ), {]
[), *, maxDegree, /, 2, ;, for, (, int, k, =, maxDegree, ;, k, <, degree, ;, ++, k, )]
[-, 1, ), *, maxDegree, /, 2, ;, for, (, int, k, =, maxDegree, ;, k, <, degree, ;, ++]
[), *, maxDegree, /, 2, ;, for, (, int, k, =, maxDegree, ;, k, <, degree, ;, ++, k, )]
[/, 2, ;, for, (, int, k, =, maxDegree, ;, k, <, degree, ;, ++, k, ), {, int, startKm1]
[;, for, (, int, k, =, maxDegree, ;, k, <, degree, ;, ++, k, ), {, int, startKm1, =, startK]
[;, k, <, degree, ;, ++, k, ), {, int, startKm1, =, startK, ;, startK, +=, k, ;, BigFraction, []
[;, ++, k, ), {, int, startKm1, =, startK, ;, startK, +=, k, ;, BigFraction, [, ], ai, =, generator]
[<, degree, ;, ++, k, ), {, int, startKm1, =, startK, ;, startK, +=, k, ;, BigFraction, [, ], ai]
[;, ++, k, ), {, int, startKm1, =, startK, ;, startK, +=, k, ;, BigFraction, [, ], ai, =, generator]
[), {, int, startKm1, =, startK, ;, startK, +=, k, ;, BigFraction, [, ], ai, =, generator, ., generate, (]
[), {, int, startKm1, =, startK, ;, startK, +=, k, ;, BigFraction, [, ], ai, =, generator, ., generate, (]
[;, startK, +=, k, ;, BigFraction, [, ], ai, =, generator, ., generate, (, k, ), ;, BigFraction, ck, =]
[+=, k, ;, BigFraction, [, ], ai, =, generator, ., generate, (, k, ), ;, BigFraction, ck, =, coefficients, .]
[;, BigFraction, [, ], ai, =, generator, ., generate, (, k, ), ;, BigFraction, ck, =, coefficients, ., get, (]
[;, BigFraction, ck, =, coefficients, ., get, (, startK, ), ;, BigFraction, ckm1, =, coefficients, ., get, (, startKm1, )]
[., generate, (, k, ), ;, BigFraction, ck, =, coefficients, ., get, (, startK, ), ;, BigFraction, ckm1, =, coefficients]
[), ;, BigFraction, ck, =, coefficients, ., get, (, startK, ), ;, BigFraction, ckm1, =, coefficients, ., get, (, startKm1]
[;, BigFraction, ckm1, =, coefficients, ., get, (, startKm1, ), ;, coefficients, ., add, (, ck, ., multiply, (, ai]
[., get, (, startK, ), ;, BigFraction, ckm1, =, coefficients, ., get, (, startKm1, ), ;, coefficients, ., add, (]
[), ;, BigFraction, ckm1, =, coefficients, ., get, (, startKm1, ), ;, coefficients, ., add, (, ck, ., multiply, (]
[;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., subtract, (, ckm1, ., multiply]
[., get, (, startKm1, ), ;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), .]
[), ;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., subtract, (, ckm1, .]
[;, for, (, int, i, =, 1, ;, i, <, k, ;, ++, i, ), {, final, BigFraction, ckPrev, =]
[., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., subtract, (, ckm1, ., multiply, (, ai]
[), ;, for, (, int, i, =, 1, ;, i, <, k, ;, ++, i, ), {, final, BigFraction, ckPrev]
[., subtract, (, ckm1, ., multiply, (, ai, [, 2, ], ), ), ), ;, for, (, int, i, =]
[., multiply, (, ai, [, 0, ], ), ., subtract, (, ckm1, ., multiply, (, ai, [, 2, ], )]
[), ., subtract, (, ckm1, ., multiply, (, ai, [, 2, ], ), ), ), ;, for, (, int, i]
[[, 0, ], ), ., subtract, (, ckm1, ., multiply, (, ai, [, 2, ], ), ), ), ;, for]
[], ), ., subtract, (, ckm1, ., multiply, (, ai, [, 2, ], ), ), ), ;, for, (, int]
[), ), ;, for, (, int, i, =, 1, ;, i, <, k, ;, ++, i, ), {, final, BigFraction]
[., multiply, (, ai, [, 2, ], ), ), ), ;, for, (, int, i, =, 1, ;, i, <]
[), ), ), ;, for, (, int, i, =, 1, ;, i, <, k, ;, ++, i, ), {, final]
[[, 2, ], ), ), ), ;, for, (, int, i, =, 1, ;, i, <, k, ;, ++, i]
[], ), ), ), ;, for, (, int, i, =, 1, ;, i, <, k, ;, ++, i, ), {]
[;, i, <, k, ;, ++, i, ), {, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get]
[;, ++, i, ), {, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (, startK, +, i]
[<, k, ;, ++, i, ), {, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (, startK]
[;, ++, i, ), {, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (, startK, +, i]
[), {, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (, startK, +, i, ), ;, ckm1]
[), {, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (, startK, +, i, ), ;, ckm1]
[;, ck, =, coefficients, ., get, (, startK, +, i, ), ;, ckm1, =, coefficients, ., get, (, startKm1, +]
[=, coefficients, ., get, (, startK, +, i, ), ;, ckm1, =, coefficients, ., get, (, startKm1, +, i, )]
[;, ckm1, =, coefficients, ., get, (, startKm1, +, i, ), ;, coefficients, ., add, (, ck, ., multiply, (]
[., get, (, startK, +, i, ), ;, ckm1, =, coefficients, ., get, (, startKm1, +, i, ), ;, coefficients]
[), ;, ckm1, =, coefficients, ., get, (, startKm1, +, i, ), ;, coefficients, ., add, (, ck, ., multiply]
[+, i, ), ;, ckm1, =, coefficients, ., get, (, startKm1, +, i, ), ;, coefficients, ., add, (, ck]
[), ;, ckm1, =, coefficients, ., get, (, startKm1, +, i, ), ;, coefficients, ., add, (, ck, ., multiply]
[=, coefficients, ., get, (, startKm1, +, i, ), ;, coefficients, ., add, (, ck, ., multiply, (, ai, []
[;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (, ckPrev, ., multiply]
[., get, (, startKm1, +, i, ), ;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ]]
[), ;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (, ckPrev, .]
[+, i, ), ;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (]
[), ;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (, ckPrev, .]
[;, }, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (, startK, +, k, ), ;, coefficients]
[., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (, ckPrev, ., multiply, (, ai]
[), ;, }, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (, startK, +, k, ), ;]
[., subtract, (, ckm1, ., multiply, (, ai, [, 2, ], ), ), ), ;, }, final, BigFraction, ckPrev, =]
[., add, (, ckPrev, ., multiply, (, ai, [, 1, ], ), ), ., subtract, (, ckm1, ., multiply, (]
[., multiply, (, ai, [, 0, ], ), ., add, (, ckPrev, ., multiply, (, ai, [, 1, ], )]
[), ., add, (, ckPrev, ., multiply, (, ai, [, 1, ], ), ), ., subtract, (, ckm1, ., multiply]
[[, 0, ], ), ., add, (, ckPrev, ., multiply, (, ai, [, 1, ], ), ), ., subtract, (]
[], ), ., add, (, ckPrev, ., multiply, (, ai, [, 1, ], ), ), ., subtract, (, ckm1, .]
[), ., subtract, (, ckm1, ., multiply, (, ai, [, 2, ], ), ), ), ;, }, final, BigFraction, ckPrev]
[., multiply, (, ai, [, 1, ], ), ), ., subtract, (, ckm1, ., multiply, (, ai, [, 2, ]]
[), ), ., subtract, (, ckm1, ., multiply, (, ai, [, 2, ], ), ), ), ;, }, final, BigFraction]
[[, 1, ], ), ), ., subtract, (, ckm1, ., multiply, (, ai, [, 2, ], ), ), ), ;]
[], ), ), ., subtract, (, ckm1, ., multiply, (, ai, [, 2, ], ), ), ), ;, }, final]
[), ), ;, }, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (, startK, +, k, )]
[., multiply, (, ai, [, 2, ], ), ), ), ;, }, final, BigFraction, ckPrev, =, ck, ;, ck, =]
[), ), ), ;, }, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (, startK, +, k]
[[, 2, ], ), ), ), ;, }, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (]
[], ), ), ), ;, }, final, BigFraction, ckPrev, =, ck, ;, ck, =, coefficients, ., get, (, startK, +]
[;, ck, =, coefficients, ., get, (, startK, +, k, ), ;, coefficients, ., add, (, ck, ., multiply, (]
[=, coefficients, ., get, (, startK, +, k, ), ;, coefficients, ., add, (, ck, ., multiply, (, ai, []
[;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (, ckPrev, ., multiply]
[., get, (, startK, +, k, ), ;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ]]
[), ;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (, ckPrev, .]
[+, k, ), ;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (]
[), ;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (, ckPrev, .]
[;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 1, ], ), ), ;, }, }, private, interface]
[., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (, ckPrev, ., multiply, (, ai]
[), ;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 1, ], ), ), ;, }, }, private]
[., add, (, ckPrev, ., multiply, (, ai, [, 1, ], ), ), ), ;, coefficients, ., add, (, ck]
[., multiply, (, ai, [, 0, ], ), ., add, (, ckPrev, ., multiply, (, ai, [, 1, ], )]
[), ., add, (, ckPrev, ., multiply, (, ai, [, 1, ], ), ), ), ;, coefficients, ., add, (]
[[, 0, ], ), ., add, (, ckPrev, ., multiply, (, ai, [, 1, ], ), ), ), ;, coefficients]
[], ), ., add, (, ckPrev, ., multiply, (, ai, [, 1, ], ), ), ), ;, coefficients, ., add]
[), ), ;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 1, ], ), ), ;, }, }]
[., multiply, (, ai, [, 1, ], ), ), ), ;, coefficients, ., add, (, ck, ., multiply, (, ai]
[), ), ), ;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 1, ], ), ), ;, }]
[[, 1, ], ), ), ), ;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 1, ], )]
[], ), ), ), ;, coefficients, ., add, (, ck, ., multiply, (, ai, [, 1, ], ), ), ;]
[;, }, }, private, interface, RecurrenceCoefficientsGenerator, {, BigFraction, [, ], generate, (, int, k, ), ;, }, }]
[., add, (, ck, ., multiply, (, ai, [, 1, ], ), ), ;, }, }, private, interface, RecurrenceCoefficientsGenerator, {]
[), ;, }, }, private, interface, RecurrenceCoefficientsGenerator, {, BigFraction, [, ], generate, (, int, k, ), ;, }, }]
[., multiply, (, ai, [, 1, ], ), ), ;, }, }, private, interface, RecurrenceCoefficientsGenerator, {, BigFraction, [, ], generate]
[), ), ;, }, }, private, interface, RecurrenceCoefficientsGenerator, {, BigFraction, [, ], generate, (, int, k, ), ;, }, }]
[[, 1, ], ), ), ;, }, }, private, interface, RecurrenceCoefficientsGenerator, {, BigFraction, [, ], generate, (, int, k, )]
[], ), ), ;, }, }, private, interface, RecurrenceCoefficientsGenerator, {, BigFraction, [, ], generate, (, int, k, ), ;, }]
