[commons, ., math3, ., util, ., FastMath, ;, public, class, RootsOfUnity, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[double, [, ], omegaImaginaryCounterClockwise, ;, private, double, [, ], omegaImaginaryClockwise, ;, private, boolean, isCounterClockWise, ;, public, RootsOfUnity, (, ), {]
[], omegaImaginaryCounterClockwise, ;, private, double, [, ], omegaImaginaryClockwise, ;, private, boolean, isCounterClockWise, ;, public, RootsOfUnity, (, ), {, omegaCount, =]
[;, private, double, [, ], omegaImaginaryClockwise, ;, private, boolean, isCounterClockWise, ;, public, RootsOfUnity, (, ), {, omegaCount, =, 0, ;]
[double, [, ], omegaImaginaryClockwise, ;, private, boolean, isCounterClockWise, ;, public, RootsOfUnity, (, ), {, omegaCount, =, 0, ;, omegaReal, =]
[], omegaImaginaryClockwise, ;, private, boolean, isCounterClockWise, ;, public, RootsOfUnity, (, ), {, omegaCount, =, 0, ;, omegaReal, =, null, ;]
[;, private, boolean, isCounterClockWise, ;, public, RootsOfUnity, (, ), {, omegaCount, =, 0, ;, omegaReal, =, null, ;, omegaImaginaryCounterClockwise, =]
[boolean, isCounterClockWise, ;, public, RootsOfUnity, (, ), {, omegaCount, =, 0, ;, omegaReal, =, null, ;, omegaImaginaryCounterClockwise, =, null, ;]
[;, public, RootsOfUnity, (, ), {, omegaCount, =, 0, ;, omegaReal, =, null, ;, omegaImaginaryCounterClockwise, =, null, ;, omegaImaginaryClockwise, =]
[RootsOfUnity, (, ), {, omegaCount, =, 0, ;, omegaReal, =, null, ;, omegaImaginaryCounterClockwise, =, null, ;, omegaImaginaryClockwise, =, null, ;]
[), {, omegaCount, =, 0, ;, omegaReal, =, null, ;, omegaImaginaryCounterClockwise, =, null, ;, omegaImaginaryClockwise, =, null, ;, isCounterClockWise, =]
[omegaImaginaryClockwise, =, null, ;, isCounterClockWise, =, true, ;, }, public, synchronized, boolean, isCounterClockWise, (, ), throws, MathIllegalStateException, {, if, (]
[omegaImaginaryClockwise, =, null, ;, isCounterClockWise, =, true, ;, }, public, synchronized, boolean, isCounterClockWise, (, ), throws, MathIllegalStateException, {, if, (]
[null, ;, isCounterClockWise, =, true, ;, }, public, synchronized, boolean, isCounterClockWise, (, ), throws, MathIllegalStateException, {, if, (, omegaCount, ==]
[true, ;, }, public, synchronized, boolean, isCounterClockWise, (, ), throws, MathIllegalStateException, {, if, (, omegaCount, ==, 0, ), {, throw]
[public, synchronized, boolean, isCounterClockWise, (, ), throws, MathIllegalStateException, {, if, (, omegaCount, ==, 0, ), {, throw, new, MathIllegalStateException, (]
[public, synchronized, boolean, isCounterClockWise, (, ), throws, MathIllegalStateException, {, if, (, omegaCount, ==, 0, ), {, throw, new, MathIllegalStateException, (]
[MathIllegalStateException, {, if, (, omegaCount, ==, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, return]
[), ;, }, return, isCounterClockWise, ;, }, public, synchronized, void, computeRoots, (, int, n, ), throws, ZeroException, {, if, (]
[), ;, }, return, isCounterClockWise, ;, }, public, synchronized, void, computeRoots, (, int, n, ), throws, ZeroException, {, if, (]
[}, return, isCounterClockWise, ;, }, public, synchronized, void, computeRoots, (, int, n, ), throws, ZeroException, {, if, (, n, ==]
[}, public, synchronized, void, computeRoots, (, int, n, ), throws, ZeroException, {, if, (, n, ==, 0, ), {, throw]
[void, computeRoots, (, int, n, ), throws, ZeroException, {, if, (, n, ==, 0, ), {, throw, new, ZeroException, (]
[void, computeRoots, (, int, n, ), throws, ZeroException, {, if, (, n, ==, 0, ), {, throw, new, ZeroException, (]
[throws, ZeroException, {, if, (, n, ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., CANNOT_COMPUTE_0TH_ROOT_OF_UNITY, ), ;, }]
[{, if, (, n, ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., CANNOT_COMPUTE_0TH_ROOT_OF_UNITY, ), ;, }, isCounterClockWise, =]
[{, if, (, n, ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., CANNOT_COMPUTE_0TH_ROOT_OF_UNITY, ), ;, }, isCounterClockWise, =]
[(, n, ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., CANNOT_COMPUTE_0TH_ROOT_OF_UNITY, ), ;, }, isCounterClockWise, =, n, >]
[throw, new, ZeroException, (, LocalizedFormats, ., CANNOT_COMPUTE_0TH_ROOT_OF_UNITY, ), ;, }, isCounterClockWise, =, n, >, 0, ;, final, int, absN, =]
[throw, new, ZeroException, (, LocalizedFormats, ., CANNOT_COMPUTE_0TH_ROOT_OF_UNITY, ), ;, }, isCounterClockWise, =, n, >, 0, ;, final, int, absN, =]
[LocalizedFormats, ., CANNOT_COMPUTE_0TH_ROOT_OF_UNITY, ), ;, }, isCounterClockWise, =, n, >, 0, ;, final, int, absN, =, FastMath, ., abs, (]
[}, isCounterClockWise, =, n, >, 0, ;, final, int, absN, =, FastMath, ., abs, (, n, ), ;, if, (]
[}, isCounterClockWise, =, n, >, 0, ;, final, int, absN, =, FastMath, ., abs, (, n, ), ;, if, (]
[=, n, >, 0, ;, final, int, absN, =, FastMath, ., abs, (, n, ), ;, if, (, absN, ==]
[., abs, (, n, ), ;, if, (, absN, ==, omegaCount, ), {, return, ;, }, final, double, t, =]
[., abs, (, n, ), ;, if, (, absN, ==, omegaCount, ), {, return, ;, }, final, double, t, =]
[., abs, (, n, ), ;, if, (, absN, ==, omegaCount, ), {, return, ;, }, final, double, t, =]
[(, n, ), ;, if, (, absN, ==, omegaCount, ), {, return, ;, }, final, double, t, =, 2.0, *]
[(, n, ), ;, if, (, absN, ==, omegaCount, ), {, return, ;, }, final, double, t, =, 2.0, *]
[if, (, absN, ==, omegaCount, ), {, return, ;, }, final, double, t, =, 2.0, *, FastMath, ., PI, /]
[{, return, ;, }, final, double, t, =, 2.0, *, FastMath, ., PI, /, absN, ;, final, double, cosT, =]
[{, return, ;, }, final, double, t, =, 2.0, *, FastMath, ., PI, /, absN, ;, final, double, cosT, =]
[final, double, t, =, 2.0, *, FastMath, ., PI, /, absN, ;, final, double, cosT, =, FastMath, ., cos, (]
[., PI, /, absN, ;, final, double, cosT, =, FastMath, ., cos, (, t, ), ;, final, double, sinT, =]
[., PI, /, absN, ;, final, double, cosT, =, FastMath, ., cos, (, t, ), ;, final, double, sinT, =]
[;, final, double, cosT, =, FastMath, ., cos, (, t, ), ;, final, double, sinT, =, FastMath, ., sin, (]
[cosT, =, FastMath, ., cos, (, t, ), ;, final, double, sinT, =, FastMath, ., sin, (, t, ), ;]
[FastMath, ., cos, (, t, ), ;, final, double, sinT, =, FastMath, ., sin, (, t, ), ;, omegaReal, =]
[(, t, ), ;, final, double, sinT, =, FastMath, ., sin, (, t, ), ;, omegaReal, =, new, double, []
[;, final, double, sinT, =, FastMath, ., sin, (, t, ), ;, omegaReal, =, new, double, [, absN, ], ;]
[double, sinT, =, FastMath, ., sin, (, t, ), ;, omegaReal, =, new, double, [, absN, ], ;, omegaImaginaryCounterClockwise, =]
[FastMath, ., sin, (, t, ), ;, omegaReal, =, new, double, [, absN, ], ;, omegaImaginaryCounterClockwise, =, new, double, []
[(, t, ), ;, omegaReal, =, new, double, [, absN, ], ;, omegaImaginaryCounterClockwise, =, new, double, [, absN, ], ;]
[), ;, omegaReal, =, new, double, [, absN, ], ;, omegaImaginaryCounterClockwise, =, new, double, [, absN, ], ;, omegaImaginaryClockwise, =]
[=, new, double, [, absN, ], ;, omegaImaginaryCounterClockwise, =, new, double, [, absN, ], ;, omegaImaginaryClockwise, =, new, double, []
[[, absN, ], ;, omegaImaginaryCounterClockwise, =, new, double, [, absN, ], ;, omegaImaginaryClockwise, =, new, double, [, absN, ], ;]
[[, absN, ], ;, omegaImaginaryCounterClockwise, =, new, double, [, absN, ], ;, omegaImaginaryClockwise, =, new, double, [, absN, ], ;]
[], ;, omegaImaginaryCounterClockwise, =, new, double, [, absN, ], ;, omegaImaginaryClockwise, =, new, double, [, absN, ], ;, omegaReal, []
[=, new, double, [, absN, ], ;, omegaImaginaryClockwise, =, new, double, [, absN, ], ;, omegaReal, [, 0, ], =]
[double, [, absN, ], ;, omegaImaginaryClockwise, =, new, double, [, absN, ], ;, omegaReal, [, 0, ], =, 1.0, ;]
[double, [, absN, ], ;, omegaImaginaryClockwise, =, new, double, [, absN, ], ;, omegaReal, [, 0, ], =, 1.0, ;]
[absN, ], ;, omegaImaginaryClockwise, =, new, double, [, absN, ], ;, omegaReal, [, 0, ], =, 1.0, ;, omegaImaginaryCounterClockwise, []
[omegaImaginaryClockwise, =, new, double, [, absN, ], ;, omegaReal, [, 0, ], =, 1.0, ;, omegaImaginaryCounterClockwise, [, 0, ], =]
[new, double, [, absN, ], ;, omegaReal, [, 0, ], =, 1.0, ;, omegaImaginaryCounterClockwise, [, 0, ], =, 0.0, ;]
[new, double, [, absN, ], ;, omegaReal, [, 0, ], =, 1.0, ;, omegaImaginaryCounterClockwise, [, 0, ], =, 0.0, ;]
[[, absN, ], ;, omegaReal, [, 0, ], =, 1.0, ;, omegaImaginaryCounterClockwise, [, 0, ], =, 0.0, ;, omegaImaginaryClockwise, []
[;, omegaReal, [, 0, ], =, 1.0, ;, omegaImaginaryCounterClockwise, [, 0, ], =, 0.0, ;, omegaImaginaryClockwise, [, 0, ], =]
[;, omegaImaginaryCounterClockwise, [, 0, ], =, 0.0, ;, omegaImaginaryClockwise, [, 0, ], =, 0.0, ;, for, (, int, i, =]
[[, 0, ], =, 0.0, ;, omegaImaginaryClockwise, [, 0, ], =, 0.0, ;, for, (, int, i, =, 1, ;]
[[, 0, ], =, 0.0, ;, omegaImaginaryClockwise, [, 0, ], =, 0.0, ;, for, (, int, i, =, 1, ;]
[], =, 0.0, ;, omegaImaginaryClockwise, [, 0, ], =, 0.0, ;, for, (, int, i, =, 1, ;, i, <]
[0.0, ;, omegaImaginaryClockwise, [, 0, ], =, 0.0, ;, for, (, int, i, =, 1, ;, i, <, absN, ;]
[0.0, ;, omegaImaginaryClockwise, [, 0, ], =, 0.0, ;, for, (, int, i, =, 1, ;, i, <, absN, ;]
[0, ], =, 0.0, ;, for, (, int, i, =, 1, ;, i, <, absN, ;, i, ++, ), {]
[0, ], =, 0.0, ;, for, (, int, i, =, 1, ;, i, <, absN, ;, i, ++, ), {]
[=, 0.0, ;, for, (, int, i, =, 1, ;, i, <, absN, ;, i, ++, ), {, omegaReal, []
[for, (, int, i, =, 1, ;, i, <, absN, ;, i, ++, ), {, omegaReal, [, i, ], =]
[for, (, int, i, =, 1, ;, i, <, absN, ;, i, ++, ), {, omegaReal, [, i, ], =]
[for, (, int, i, =, 1, ;, i, <, absN, ;, i, ++, ), {, omegaReal, [, i, ], =]
[for, (, int, i, =, 1, ;, i, <, absN, ;, i, ++, ), {, omegaReal, [, i, ], =]
[int, i, =, 1, ;, i, <, absN, ;, i, ++, ), {, omegaReal, [, i, ], =, omegaReal, []
[int, i, =, 1, ;, i, <, absN, ;, i, ++, ), {, omegaReal, [, i, ], =, omegaReal, []
[=, 1, ;, i, <, absN, ;, i, ++, ), {, omegaReal, [, i, ], =, omegaReal, [, i, -]
[i, <, absN, ;, i, ++, ), {, omegaReal, [, i, ], =, omegaReal, [, i, -, 1, ], *]
[absN, ;, i, ++, ), {, omegaReal, [, i, ], =, omegaReal, [, i, -, 1, ], *, cosT, -]
[absN, ;, i, ++, ), {, omegaReal, [, i, ], =, omegaReal, [, i, -, 1, ], *, cosT, -]
[absN, ;, i, ++, ), {, omegaReal, [, i, ], =, omegaReal, [, i, -, 1, ], *, cosT, -]
[i, ++, ), {, omegaReal, [, i, ], =, omegaReal, [, i, -, 1, ], *, cosT, -, omegaImaginaryCounterClockwise, []
[i, ++, ), {, omegaReal, [, i, ], =, omegaReal, [, i, -, 1, ], *, cosT, -, omegaImaginaryCounterClockwise, []
[), {, omegaReal, [, i, ], =, omegaReal, [, i, -, 1, ], *, cosT, -, omegaImaginaryCounterClockwise, [, i, -]
[[, i, ], =, omegaReal, [, i, -, 1, ], *, cosT, -, omegaImaginaryCounterClockwise, [, i, -, 1, ], *]
[], =, omegaReal, [, i, -, 1, ], *, cosT, -, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, sinT, ;]
[], =, omegaReal, [, i, -, 1, ], *, cosT, -, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, sinT, ;]
[omegaReal, [, i, -, 1, ], *, cosT, -, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise, []
[-, 1, ], *, cosT, -, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =]
[-, 1, ], *, cosT, -, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =]
[-, 1, ], *, cosT, -, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =]
[-, 1, ], *, cosT, -, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =]
[], *, cosT, -, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, []
[], *, cosT, -, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, []
[cosT, -, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, [, i, -]
[[, i, -, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, [, i, -, 1, ], *]
[-, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, [, i, -, 1, ], *, sinT, +]
[-, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, [, i, -, 1, ], *, sinT, +]
[-, 1, ], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, [, i, -, 1, ], *, sinT, +]
[], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, [, i, -, 1, ], *, sinT, +, omegaImaginaryCounterClockwise, []
[], *, sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, [, i, -, 1, ], *, sinT, +, omegaImaginaryCounterClockwise, []
[sinT, ;, omegaImaginaryCounterClockwise, [, i, ], =, omegaReal, [, i, -, 1, ], *, sinT, +, omegaImaginaryCounterClockwise, [, i, -]
[[, i, ], =, omegaReal, [, i, -, 1, ], *, sinT, +, omegaImaginaryCounterClockwise, [, i, -, 1, ], *]
[], =, omegaReal, [, i, -, 1, ], *, sinT, +, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, cosT, ;]
[], =, omegaReal, [, i, -, 1, ], *, sinT, +, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, cosT, ;]
[omegaReal, [, i, -, 1, ], *, sinT, +, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, cosT, ;, omegaImaginaryClockwise, []
[-, 1, ], *, sinT, +, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, cosT, ;, omegaImaginaryClockwise, [, i, ], =]
[1, ], *, sinT, +, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, cosT, ;, omegaImaginaryClockwise, [, i, ], =, -]
[1, ], *, sinT, +, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, cosT, ;, omegaImaginaryClockwise, [, i, ], =, -]
[*, sinT, +, omegaImaginaryCounterClockwise, [, i, -, 1, ], *, cosT, ;, omegaImaginaryClockwise, [, i, ], =, -, omegaImaginaryCounterClockwise, []
[[, i, -, 1, ], *, cosT, ;, omegaImaginaryClockwise, [, i, ], =, -, omegaImaginaryCounterClockwise, [, i, ], ;, }]
[-, 1, ], *, cosT, ;, omegaImaginaryClockwise, [, i, ], =, -, omegaImaginaryCounterClockwise, [, i, ], ;, }, omegaCount, =]
[omegaCount, =, absN, ;, }, public, synchronized, double, getReal, (, int, k, ), throws, MathIllegalStateException, ,, MathIllegalArgumentException, {, if, (]
[omegaCount, =, absN, ;, }, public, synchronized, double, getReal, (, int, k, ), throws, MathIllegalStateException, ,, MathIllegalArgumentException, {, if, (]
[absN, ;, }, public, synchronized, double, getReal, (, int, k, ), throws, MathIllegalStateException, ,, MathIllegalArgumentException, {, if, (, omegaCount, ==]
[synchronized, double, getReal, (, int, k, ), throws, MathIllegalStateException, ,, MathIllegalArgumentException, {, if, (, omegaCount, ==, 0, ), {, throw]
[(, int, k, ), throws, MathIllegalStateException, ,, MathIllegalArgumentException, {, if, (, omegaCount, ==, 0, ), {, throw, new, MathIllegalStateException, (]
[(, int, k, ), throws, MathIllegalStateException, ,, MathIllegalArgumentException, {, if, (, omegaCount, ==, 0, ), {, throw, new, MathIllegalStateException, (]
[{, if, (, omegaCount, ==, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (]
[{, if, (, omegaCount, ==, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (]
[if, (, omegaCount, ==, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (]
[if, (, omegaCount, ==, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (]
[omegaCount, ==, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (, k, <]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (, k, <, 0, ), ||]
[{, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (, k, <, 0, ), ||, (]
[{, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (, k, <, 0, ), ||, (]
[new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (, k, <, 0, ), ||, (, k, >=]
[ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (, k, <, 0, ), ||, (, k, >=, omegaCount, ), ), {, throw]
[}, if, (, (, k, <, 0, ), ||, (, k, >=, omegaCount, ), ), {, throw, new, OutOfRangeException, (]
[}, if, (, (, k, <, 0, ), ||, (, k, >=, omegaCount, ), ), {, throw, new, OutOfRangeException, (]
[k, <, 0, ), ||, (, k, >=, omegaCount, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,]
[k, <, 0, ), ||, (, k, >=, omegaCount, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,]
[||, (, k, >=, omegaCount, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (]
[>=, omegaCount, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,]
[>=, omegaCount, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,]
[{, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,, Integer, ., valueOf, (]
[OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,, Integer, ., valueOf, (, 0, ), ,]
[OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,, Integer, ., valueOf, (, 0, ), ,]
[OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,, Integer, ., valueOf, (, 0, ), ,, Integer, ., valueOf, (]
[OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,, Integer, ., valueOf, (, 0, ), ,, Integer, ., valueOf, (]
[Integer, ., valueOf, (, k, ), ,, Integer, ., valueOf, (, 0, ), ,, Integer, ., valueOf, (, omegaCount, -]
[,, Integer, ., valueOf, (, 0, ), ,, Integer, ., valueOf, (, omegaCount, -, 1, ), ), ;, }, return]
[,, Integer, ., valueOf, (, 0, ), ,, Integer, ., valueOf, (, omegaCount, -, 1, ), ), ;, }, return]
[., valueOf, (, 0, ), ,, Integer, ., valueOf, (, omegaCount, -, 1, ), ), ;, }, return, omegaReal, []
[[, k, ], ;, }, public, synchronized, double, getImaginary, (, int, k, ), throws, MathIllegalStateException, ,, OutOfRangeException, {, if, (]
[[, k, ], ;, }, public, synchronized, double, getImaginary, (, int, k, ), throws, MathIllegalStateException, ,, OutOfRangeException, {, if, (]
[], ;, }, public, synchronized, double, getImaginary, (, int, k, ), throws, MathIllegalStateException, ,, OutOfRangeException, {, if, (, omegaCount, ==]
[synchronized, double, getImaginary, (, int, k, ), throws, MathIllegalStateException, ,, OutOfRangeException, {, if, (, omegaCount, ==, 0, ), {, throw]
[(, int, k, ), throws, MathIllegalStateException, ,, OutOfRangeException, {, if, (, omegaCount, ==, 0, ), {, throw, new, MathIllegalStateException, (]
[(, int, k, ), throws, MathIllegalStateException, ,, OutOfRangeException, {, if, (, omegaCount, ==, 0, ), {, throw, new, MathIllegalStateException, (]
[{, if, (, omegaCount, ==, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (]
[{, if, (, omegaCount, ==, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (]
[if, (, omegaCount, ==, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (]
[if, (, omegaCount, ==, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (]
[omegaCount, ==, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (, k, <]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (, k, <, 0, ), ||]
[{, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (, k, <, 0, ), ||, (]
[{, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (, k, <, 0, ), ||, (]
[new, MathIllegalStateException, (, LocalizedFormats, ., ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (, k, <, 0, ), ||, (, k, >=]
[ROOTS_OF_UNITY_NOT_COMPUTED_YET, ), ;, }, if, (, (, k, <, 0, ), ||, (, k, >=, omegaCount, ), ), {, throw]
[}, if, (, (, k, <, 0, ), ||, (, k, >=, omegaCount, ), ), {, throw, new, OutOfRangeException, (]
[}, if, (, (, k, <, 0, ), ||, (, k, >=, omegaCount, ), ), {, throw, new, OutOfRangeException, (]
[k, <, 0, ), ||, (, k, >=, omegaCount, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,]
[k, <, 0, ), ||, (, k, >=, omegaCount, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,]
[||, (, k, >=, omegaCount, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (]
[>=, omegaCount, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,]
[>=, omegaCount, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,]
[{, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,, Integer, ., valueOf, (]
[OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,, Integer, ., valueOf, (, 0, ), ,]
[OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,, Integer, ., valueOf, (, 0, ), ,]
[OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,, Integer, ., valueOf, (, 0, ), ,, Integer, ., valueOf, (]
[OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, ,, Integer, ., valueOf, (, k, ), ,, Integer, ., valueOf, (, 0, ), ,, Integer, ., valueOf, (]
[Integer, ., valueOf, (, k, ), ,, Integer, ., valueOf, (, 0, ), ,, Integer, ., valueOf, (, omegaCount, -]
[,, Integer, ., valueOf, (, 0, ), ,, Integer, ., valueOf, (, omegaCount, -, 1, ), ), ;, }, return]
[,, Integer, ., valueOf, (, 0, ), ,, Integer, ., valueOf, (, omegaCount, -, 1, ), ), ;, }, return]
[., valueOf, (, 0, ), ,, Integer, ., valueOf, (, omegaCount, -, 1, ), ), ;, }, return, isCounterClockWise, ?]
[., valueOf, (, 0, ), ,, Integer, ., valueOf, (, omegaCount, -, 1, ), ), ;, }, return, isCounterClockWise, ?]
[(, 0, ), ,, Integer, ., valueOf, (, omegaCount, -, 1, ), ), ;, }, return, isCounterClockWise, ?, omegaImaginaryCounterClockwise, []
[,, Integer, ., valueOf, (, omegaCount, -, 1, ), ), ;, }, return, isCounterClockWise, ?, omegaImaginaryCounterClockwise, [, k, ], :]
[,, Integer, ., valueOf, (, omegaCount, -, 1, ), ), ;, }, return, isCounterClockWise, ?, omegaImaginaryCounterClockwise, [, k, ], :]
[., valueOf, (, omegaCount, -, 1, ), ), ;, }, return, isCounterClockWise, ?, omegaImaginaryCounterClockwise, [, k, ], :, omegaImaginaryClockwise, []
[?, omegaImaginaryCounterClockwise, [, k, ], :, omegaImaginaryClockwise, [, k, ], ;, }, public, synchronized, int, getNumberOfRoots, (, ), {, return]
