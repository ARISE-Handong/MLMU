[,, new, DefaultNameSupplier, (, ), ,, true, ), ;, }, RenameLabels, (, AbstractCompiler, compiler, ,, Supplier, <, String, >, supplier]
[,, true, ), ;, }, RenameLabels, (, AbstractCompiler, compiler, ,, Supplier, <, String, >, supplier, ,, boolean, removeUnused, ), {]
[), ;, }, RenameLabels, (, AbstractCompiler, compiler, ,, Supplier, <, String, >, supplier, ,, boolean, removeUnused, ), {, this, .]
[=, compiler, ;, this, ., nameSupplier, =, supplier, ;, this, ., removeUnused, =, removeUnused, ;, }, static, class, DefaultNameSupplier, implements]
[., compiler, =, compiler, ;, this, ., nameSupplier, =, supplier, ;, this, ., removeUnused, =, removeUnused, ;, }, static, class]
[;, this, ., nameSupplier, =, supplier, ;, this, ., removeUnused, =, removeUnused, ;, }, static, class, DefaultNameSupplier, implements, Supplier, <]
[=, supplier, ;, this, ., removeUnused, =, removeUnused, ;, }, static, class, DefaultNameSupplier, implements, Supplier, <, String, >, {, final]
[., nameSupplier, =, supplier, ;, this, ., removeUnused, =, removeUnused, ;, }, static, class, DefaultNameSupplier, implements, Supplier, <, String, >]
[;, this, ., removeUnused, =, removeUnused, ;, }, static, class, DefaultNameSupplier, implements, Supplier, <, String, >, {, final, NameGenerator, nameGenerator]
[=, removeUnused, ;, }, static, class, DefaultNameSupplier, implements, Supplier, <, String, >, {, final, NameGenerator, nameGenerator, =, new, NameGenerator, (]
[., removeUnused, =, removeUnused, ;, }, static, class, DefaultNameSupplier, implements, Supplier, <, String, >, {, final, NameGenerator, nameGenerator, =, new]
[;, }, static, class, DefaultNameSupplier, implements, Supplier, <, String, >, {, final, NameGenerator, nameGenerator, =, new, NameGenerator, (, new, HashSet]
[;, @, Override, public, String, get, (, ), {, return, nameGenerator, ., generateNextName, (, ), ;, }, }, class, ProcessLabels]
[,, "", ,, null, ), ;, @, Override, public, String, get, (, ), {, return, nameGenerator, ., generateNextName, (, )]
[,, null, ), ;, @, Override, public, String, get, (, ), {, return, nameGenerator, ., generateNextName, (, ), ;, }]
[), ;, @, Override, public, String, get, (, ), {, return, nameGenerator, ., generateNextName, (, ), ;, }, }, class]
[;, }, }, class, ProcessLabels, implements, ScopedCallback, {, ProcessLabels, (, ), {, namespaceStack, ., push, (, new, LabelNamespace, (, )]
[., generateNextName, (, ), ;, }, }, class, ProcessLabels, implements, ScopedCallback, {, ProcessLabels, (, ), {, namespaceStack, ., push, (]
[;, }, final, Deque, <, LabelNamespace, >, namespaceStack, =, Lists, ., newLinkedList, (, ), ;, final, ArrayList, <, String, >]
[., push, (, new, LabelNamespace, (, ), ), ;, }, final, Deque, <, LabelNamespace, >, namespaceStack, =, Lists, ., newLinkedList]
[), ;, }, final, Deque, <, LabelNamespace, >, namespaceStack, =, Lists, ., newLinkedList, (, ), ;, final, ArrayList, <, String]
[;, final, ArrayList, <, String, >, names, =, new, ArrayList, <, String, >, (, ), ;, @, Override, public, void]
[., newLinkedList, (, ), ;, final, ArrayList, <, String, >, names, =, new, ArrayList, <, String, >, (, ), ;]
[;, @, Override, public, void, enterScope, (, NodeTraversal, nodeTraversal, ), {, namespaceStack, ., push, (, new, LabelNamespace, (, ), )]
[;, }, @, Override, public, void, exitScope, (, NodeTraversal, nodeTraversal, ), {, namespaceStack, ., pop, (, ), ;, }, @]
[., push, (, new, LabelNamespace, (, ), ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, nodeTraversal, ), {]
[), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, nodeTraversal, ), {, namespaceStack, ., pop, (, ), ;, }]
[;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, node, ,, Node, parent, ), {, if, (]
[., pop, (, ), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, node, ,, Node, parent]
[), {, LabelNamespace, current, =, namespaceStack, ., peek, (, ), ;, int, currentDepth, =, current, ., renameMap, ., size, (]
[., isLabel, (, ), ), {, LabelNamespace, current, =, namespaceStack, ., peek, (, ), ;, int, currentDepth, =, current, .]
[;, int, currentDepth, =, current, ., renameMap, ., size, (, ), +, 1, ;, String, name, =, node, ., getFirstChild]
[., peek, (, ), ;, int, currentDepth, =, current, ., renameMap, ., size, (, ), +, 1, ;, String, name]
[;, String, name, =, node, ., getFirstChild, (, ), ., getString, (, ), ;, LabelInfo, li, =, new, LabelInfo, (]
[+, 1, ;, String, name, =, node, ., getFirstChild, (, ), ., getString, (, ), ;, LabelInfo, li, =, new]
[., size, (, ), +, 1, ;, String, name, =, node, ., getFirstChild, (, ), ., getString, (, ), ;]
[., renameMap, ., size, (, ), +, 1, ;, String, name, =, node, ., getFirstChild, (, ), ., getString, (]
[;, String, name, =, node, ., getFirstChild, (, ), ., getString, (, ), ;, LabelInfo, li, =, new, LabelInfo, (]
[;, LabelInfo, li, =, new, LabelInfo, (, currentDepth, ), ;, Preconditions, ., checkState, (, !, current, ., renameMap, ., containsKey]
[., getString, (, ), ;, LabelInfo, li, =, new, LabelInfo, (, currentDepth, ), ;, Preconditions, ., checkState, (, !, current]
[., getFirstChild, (, ), ., getString, (, ), ;, LabelInfo, li, =, new, LabelInfo, (, currentDepth, ), ;, Preconditions, .]
[;, Preconditions, ., checkState, (, !, current, ., renameMap, ., containsKey, (, name, ), ), ;, current, ., renameMap, .]
[), ;, Preconditions, ., checkState, (, !, current, ., renameMap, ., containsKey, (, name, ), ), ;, current, ., renameMap]
[;, current, ., renameMap, ., put, (, name, ,, li, ), ;, if, (, names, ., size, (, ), <]
[., checkState, (, !, current, ., renameMap, ., containsKey, (, name, ), ), ;, current, ., renameMap, ., put, (]
[), ;, current, ., renameMap, ., put, (, name, ,, li, ), ;, if, (, names, ., size, (, )]
[), ;, current, ., renameMap, ., put, (, name, ,, li, ), ;, if, (, names, ., size, (, )]
[., containsKey, (, name, ), ), ;, current, ., renameMap, ., put, (, name, ,, li, ), ;, if, (]
[., renameMap, ., containsKey, (, name, ), ), ;, current, ., renameMap, ., put, (, name, ,, li, ), ;]
[), ), ;, current, ., renameMap, ., put, (, name, ,, li, ), ;, if, (, names, ., size, (]
[;, if, (, names, ., size, (, ), <, currentDepth, ), {, names, ., add, (, nameSupplier, ., get, (]
[., put, (, name, ,, li, ), ;, if, (, names, ., size, (, ), <, currentDepth, ), {, names]
[., renameMap, ., put, (, name, ,, li, ), ;, if, (, names, ., size, (, ), <, currentDepth, )]
[,, li, ), ;, if, (, names, ., size, (, ), <, currentDepth, ), {, names, ., add, (, nameSupplier]
[), ;, if, (, names, ., size, (, ), <, currentDepth, ), {, names, ., add, (, nameSupplier, ., get]
[), {, names, ., add, (, nameSupplier, ., get, (, ), ), ;, }, String, newName, =, getNameForId, (, currentDepth]
[<, currentDepth, ), {, names, ., add, (, nameSupplier, ., get, (, ), ), ;, }, String, newName, =, getNameForId]
[., size, (, ), <, currentDepth, ), {, names, ., add, (, nameSupplier, ., get, (, ), ), ;, }]
[), {, names, ., add, (, nameSupplier, ., get, (, ), ), ;, }, String, newName, =, getNameForId, (, currentDepth]
[;, }, String, newName, =, getNameForId, (, currentDepth, ), ;, compiler, ., addToDebugLog, (, "label renamed: ", +, name, +, " => ", +]
[., add, (, nameSupplier, ., get, (, ), ), ;, }, String, newName, =, getNameForId, (, currentDepth, ), ;, compiler]
[), ;, }, String, newName, =, getNameForId, (, currentDepth, ), ;, compiler, ., addToDebugLog, (, "label renamed: ", +, name, +, " => "]
[., get, (, ), ), ;, }, String, newName, =, getNameForId, (, currentDepth, ), ;, compiler, ., addToDebugLog, (, "label renamed: "]
[;, compiler, ., addToDebugLog, (, "label renamed: ", +, name, +, " => ", +, newName, ), ;, }, return, true, ;, }, @]
[), ;, compiler, ., addToDebugLog, (, "label renamed: ", +, name, +, " => ", +, newName, ), ;, }, return, true, ;, }]
[;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, nodeTraversal, ,, Node, node, ,, Node, parent]
[., addToDebugLog, (, "label renamed: ", +, name, +, " => ", +, newName, ), ;, }, return, true, ;, }, @, Override, public]
[), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, nodeTraversal, ,, Node, node, ,, Node]
[+, newName, ), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, nodeTraversal, ,, Node, node]
[+, " => ", +, newName, ), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, nodeTraversal, ,]
[+, name, +, " => ", +, newName, ), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal]
[+, " => ", +, newName, ), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, nodeTraversal, ,]
[+, newName, ), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, nodeTraversal, ,, Node, node]
[), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, nodeTraversal, ,, Node, node, ,, Node]
[;, }, @, Override, public, void, visit, (, NodeTraversal, nodeTraversal, ,, Node, node, ,, Node, parent, ), {, switch, (]
[), {, case, Token, ., LABEL, :, visitLabel, (, node, ,, parent, ), ;, break, ;, case, Token, ., BREAK]
[., getType, (, ), ), {, case, Token, ., LABEL, :, visitLabel, (, node, ,, parent, ), ;, break, ;]
[:, visitLabel, (, node, ,, parent, ), ;, break, ;, case, Token, ., BREAK, :, case, Token, ., CONTINUE, :]
[., LABEL, :, visitLabel, (, node, ,, parent, ), ;, break, ;, case, Token, ., BREAK, :, case, Token, .]
[;, break, ;, case, Token, ., BREAK, :, case, Token, ., CONTINUE, :, visitBreakOrContinue, (, node, ), ;, break, ;]
[,, parent, ), ;, break, ;, case, Token, ., BREAK, :, case, Token, ., CONTINUE, :, visitBreakOrContinue, (, node, )]
[), ;, break, ;, case, Token, ., BREAK, :, case, Token, ., CONTINUE, :, visitBreakOrContinue, (, node, ), ;, break]
[:, case, Token, ., CONTINUE, :, visitBreakOrContinue, (, node, ), ;, break, ;, }, }, private, void, visitBreakOrContinue, (, Node]
[., BREAK, :, case, Token, ., CONTINUE, :, visitBreakOrContinue, (, node, ), ;, break, ;, }, }, private, void, visitBreakOrContinue]
[:, visitBreakOrContinue, (, node, ), ;, break, ;, }, }, private, void, visitBreakOrContinue, (, Node, node, ), {, Node, nameNode]
[., CONTINUE, :, visitBreakOrContinue, (, node, ), ;, break, ;, }, }, private, void, visitBreakOrContinue, (, Node, node, ), {]
[;, break, ;, }, }, private, void, visitBreakOrContinue, (, Node, node, ), {, Node, nameNode, =, node, ., getFirstChild, (]
[), ;, break, ;, }, }, private, void, visitBreakOrContinue, (, Node, node, ), {, Node, nameNode, =, node, ., getFirstChild]
[;, if, (, nameNode, !=, null, ), {, String, name, =, nameNode, ., getString, (, ), ;, Preconditions, ., checkState]
[., getFirstChild, (, ), ;, if, (, nameNode, !=, null, ), {, String, name, =, nameNode, ., getString, (, )]
[), {, String, name, =, nameNode, ., getString, (, ), ;, Preconditions, ., checkState, (, name, ., length, (, )]
[!=, null, ), {, String, name, =, nameNode, ., getString, (, ), ;, Preconditions, ., checkState, (, name, ., length]
[), {, String, name, =, nameNode, ., getString, (, ), ;, Preconditions, ., checkState, (, name, ., length, (, )]
[;, Preconditions, ., checkState, (, name, ., length, (, ), !=, 0, ), ;, LabelInfo, li, =, getLabelInfo, (, name]
[., getString, (, ), ;, Preconditions, ., checkState, (, name, ., length, (, ), !=, 0, ), ;, LabelInfo, li]
[;, LabelInfo, li, =, getLabelInfo, (, name, ), ;, if, (, li, !=, null, ), {, String, newName, =, getNameForId]
[., checkState, (, name, ., length, (, ), !=, 0, ), ;, LabelInfo, li, =, getLabelInfo, (, name, ), ;]
[), ;, LabelInfo, li, =, getLabelInfo, (, name, ), ;, if, (, li, !=, null, ), {, String, newName, =]
[!=, 0, ), ;, LabelInfo, li, =, getLabelInfo, (, name, ), ;, if, (, li, !=, null, ), {, String]
[., length, (, ), !=, 0, ), ;, LabelInfo, li, =, getLabelInfo, (, name, ), ;, if, (, li, !=]
[), ;, LabelInfo, li, =, getLabelInfo, (, name, ), ;, if, (, li, !=, null, ), {, String, newName, =]
[;, if, (, li, !=, null, ), {, String, newName, =, getNameForId, (, li, ., id, ), ;, li, .]
[), ;, if, (, li, !=, null, ), {, String, newName, =, getNameForId, (, li, ., id, ), ;, li]
[), {, String, newName, =, getNameForId, (, li, ., id, ), ;, li, ., referenced, =, true, ;, if, (]
[!=, null, ), {, String, newName, =, getNameForId, (, li, ., id, ), ;, li, ., referenced, =, true, ;]
[), {, String, newName, =, getNameForId, (, li, ., id, ), ;, li, ., referenced, =, true, ;, if, (]
[;, li, ., referenced, =, true, ;, if, (, !, name, ., equals, (, newName, ), ), {, nameNode, .]
[), ;, li, ., referenced, =, true, ;, if, (, !, name, ., equals, (, newName, ), ), {, nameNode]
[., id, ), ;, li, ., referenced, =, true, ;, if, (, !, name, ., equals, (, newName, ), )]
[=, true, ;, if, (, !, name, ., equals, (, newName, ), ), {, nameNode, ., setString, (, newName, )]
[., referenced, =, true, ;, if, (, !, name, ., equals, (, newName, ), ), {, nameNode, ., setString, (]
[;, if, (, !, name, ., equals, (, newName, ), ), {, nameNode, ., setString, (, newName, ), ;, compiler]
[), {, nameNode, ., setString, (, newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }, private]
[), {, nameNode, ., setString, (, newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }, private]
[., equals, (, newName, ), ), {, nameNode, ., setString, (, newName, ), ;, compiler, ., reportCodeChange, (, ), ;]
[), ), {, nameNode, ., setString, (, newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }, private, void, visitLabel, (, Node, node, ,, Node, parent]
[., setString, (, newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }, private, void, visitLabel, (]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }, private, void, visitLabel, (, Node, node, ,, Node]
[;, }, }, }, }, private, void, visitLabel, (, Node, node, ,, Node, parent, ), {, Node, nameNode, =, node]
[., reportCodeChange, (, ), ;, }, }, }, }, private, void, visitLabel, (, Node, node, ,, Node, parent, ), {]
[;, Preconditions, ., checkState, (, nameNode, !=, null, ), ;, String, name, =, nameNode, ., getString, (, ), ;, LabelInfo]
[., getFirstChild, (, ), ;, Preconditions, ., checkState, (, nameNode, !=, null, ), ;, String, name, =, nameNode, ., getString]
[;, String, name, =, nameNode, ., getString, (, ), ;, LabelInfo, li, =, getLabelInfo, (, name, ), ;, if, (]
[., checkState, (, nameNode, !=, null, ), ;, String, name, =, nameNode, ., getString, (, ), ;, LabelInfo, li, =]
[), ;, String, name, =, nameNode, ., getString, (, ), ;, LabelInfo, li, =, getLabelInfo, (, name, ), ;, if]
[!=, null, ), ;, String, name, =, nameNode, ., getString, (, ), ;, LabelInfo, li, =, getLabelInfo, (, name, )]
[), ;, String, name, =, nameNode, ., getString, (, ), ;, LabelInfo, li, =, getLabelInfo, (, name, ), ;, if]
[;, LabelInfo, li, =, getLabelInfo, (, name, ), ;, if, (, li, ., referenced, ||, !, removeUnused, ), {, String]
[., getString, (, ), ;, LabelInfo, li, =, getLabelInfo, (, name, ), ;, if, (, li, ., referenced, ||, !]
[;, if, (, li, ., referenced, ||, !, removeUnused, ), {, String, newName, =, getNameForId, (, li, ., id, )]
[), ;, if, (, li, ., referenced, ||, !, removeUnused, ), {, String, newName, =, getNameForId, (, li, ., id]
[), {, String, newName, =, getNameForId, (, li, ., id, ), ;, if, (, !, name, ., equals, (, newName]
[||, !, removeUnused, ), {, String, newName, =, getNameForId, (, li, ., id, ), ;, if, (, !, name, .]
[., referenced, ||, !, removeUnused, ), {, String, newName, =, getNameForId, (, li, ., id, ), ;, if, (, !]
[), {, String, newName, =, getNameForId, (, li, ., id, ), ;, if, (, !, name, ., equals, (, newName]
[), {, String, newName, =, getNameForId, (, li, ., id, ), ;, if, (, !, name, ., equals, (, newName]
[;, if, (, !, name, ., equals, (, newName, ), ), {, nameNode, ., setString, (, newName, ), ;, compiler]
[), ;, if, (, !, name, ., equals, (, newName, ), ), {, nameNode, ., setString, (, newName, ), ;]
[., id, ), ;, if, (, !, name, ., equals, (, newName, ), ), {, nameNode, ., setString, (, newName]
[), {, nameNode, ., setString, (, newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, {, Node]
[), {, nameNode, ., setString, (, newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, {, Node]
[., equals, (, newName, ), ), {, nameNode, ., setString, (, newName, ), ;, compiler, ., reportCodeChange, (, ), ;]
[), ), {, nameNode, ., setString, (, newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, {]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, else, {, Node, newChild, =, node, ., getLastChild, (, ), ;]
[., setString, (, newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, {, Node, newChild, =, node]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, {, Node, newChild, =, node, ., getLastChild, (, )]
[;, }, }, else, {, Node, newChild, =, node, ., getLastChild, (, ), ;, node, ., removeChild, (, newChild, )]
[., reportCodeChange, (, ), ;, }, }, else, {, Node, newChild, =, node, ., getLastChild, (, ), ;, node, .]
[;, node, ., removeChild, (, newChild, ), ;, parent, ., replaceChild, (, node, ,, newChild, ), ;, if, (, newChild]
[., getLastChild, (, ), ;, node, ., removeChild, (, newChild, ), ;, parent, ., replaceChild, (, node, ,, newChild, )]
[;, parent, ., replaceChild, (, node, ,, newChild, ), ;, if, (, newChild, ., isBlock, (, ), ), {, NodeUtil]
[., removeChild, (, newChild, ), ;, parent, ., replaceChild, (, node, ,, newChild, ), ;, if, (, newChild, ., isBlock]
[), ;, parent, ., replaceChild, (, node, ,, newChild, ), ;, if, (, newChild, ., isBlock, (, ), ), {]
[;, if, (, newChild, ., isBlock, (, ), ), {, NodeUtil, ., tryMergeBlock, (, newChild, ), ;, }, compiler, .]
[., replaceChild, (, node, ,, newChild, ), ;, if, (, newChild, ., isBlock, (, ), ), {, NodeUtil, ., tryMergeBlock]
[,, newChild, ), ;, if, (, newChild, ., isBlock, (, ), ), {, NodeUtil, ., tryMergeBlock, (, newChild, ), ;]
[), ;, if, (, newChild, ., isBlock, (, ), ), {, NodeUtil, ., tryMergeBlock, (, newChild, ), ;, }, compiler]
[), {, NodeUtil, ., tryMergeBlock, (, newChild, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, namespaceStack, ., peek]
[., isBlock, (, ), ), {, NodeUtil, ., tryMergeBlock, (, newChild, ), ;, }, compiler, ., reportCodeChange, (, ), ;]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, namespaceStack, ., peek, (, ), ., renameMap, ., remove, (, name]
[., tryMergeBlock, (, newChild, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, namespaceStack, ., peek, (, ), .]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, namespaceStack, ., peek, (, ), ., renameMap, ., remove, (]
[;, }, namespaceStack, ., peek, (, ), ., renameMap, ., remove, (, name, ), ;, }, String, getNameForId, (, int]
[., reportCodeChange, (, ), ;, }, namespaceStack, ., peek, (, ), ., renameMap, ., remove, (, name, ), ;, }]
[;, }, String, getNameForId, (, int, id, ), {, return, names, ., get, (, id, -, 1, ), ;, }]
[., remove, (, name, ), ;, }, String, getNameForId, (, int, id, ), {, return, names, ., get, (, id]
[., renameMap, ., remove, (, name, ), ;, }, String, getNameForId, (, int, id, ), {, return, names, ., get]
[., peek, (, ), ., renameMap, ., remove, (, name, ), ;, }, String, getNameForId, (, int, id, ), {]
[), ;, }, String, getNameForId, (, int, id, ), {, return, names, ., get, (, id, -, 1, ), ;]
[;, }, LabelInfo, getLabelInfo, (, String, name, ), {, return, namespaceStack, ., peek, (, ), ., renameMap, ., get, (]
[., get, (, id, -, 1, ), ;, }, LabelInfo, getLabelInfo, (, String, name, ), {, return, namespaceStack, ., peek]
[), ;, }, LabelInfo, getLabelInfo, (, String, name, ), {, return, namespaceStack, ., peek, (, ), ., renameMap, ., get]
[-, 1, ), ;, }, LabelInfo, getLabelInfo, (, String, name, ), {, return, namespaceStack, ., peek, (, ), ., renameMap]
[), ;, }, LabelInfo, getLabelInfo, (, String, name, ), {, return, namespaceStack, ., peek, (, ), ., renameMap, ., get]
[;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[., get, (, name, ), ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[., renameMap, ., get, (, name, ), ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., peek, (, ), ., renameMap, ., get, (, name, ), ;, }, }, @, Override, public, void, process, (]
[), ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse]
[;, }, private, static, class, LabelInfo, {, boolean, referenced, =, false, ;, final, int, id, ;, LabelInfo, (, int, id]
[., traverse, (, compiler, ,, root, ,, new, ProcessLabels, (, ), ), ;, }, private, static, class, LabelInfo, {, boolean]
[,, root, ,, new, ProcessLabels, (, ), ), ;, }, private, static, class, LabelInfo, {, boolean, referenced, =, false, ;]
[,, new, ProcessLabels, (, ), ), ;, }, private, static, class, LabelInfo, {, boolean, referenced, =, false, ;, final, int]
[), ;, }, private, static, class, LabelInfo, {, boolean, referenced, =, false, ;, final, int, id, ;, LabelInfo, (, int]
[;, final, int, id, ;, LabelInfo, (, int, id, ), {, this, ., id, =, id, ;, }, }, private]
[=, id, ;, }, }, private, static, class, LabelNamespace, {, final, Map, <, String, ,, LabelInfo, >, renameMap, =, new]
[., id, =, id, ;, }, }, private, static, class, LabelNamespace, {, final, Map, <, String, ,, LabelInfo, >, renameMap]
[;, }, }, private, static, class, LabelNamespace, {, final, Map, <, String, ,, LabelInfo, >, renameMap, =, new, HashMap, <]
[;, }, }]
