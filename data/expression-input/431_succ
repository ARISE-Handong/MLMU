[;, static, final, DiagnosticType, VIOLATED_MODULE_DEP_ERROR, =, DiagnosticType, ., error, (, "JSC_VIOLATED_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}, since {1} loads after {0}", ), ;, static, final, DiagnosticType]
[., error, (, "JSC_UNDEFINED_VARIABLE", ,, "variable {0} is undeclared", ), ;, static, final, DiagnosticType, VIOLATED_MODULE_DEP_ERROR, =, DiagnosticType, ., error, (, "JSC_VIOLATED_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in "]
[,, "variable {0} is undeclared", ), ;, static, final, DiagnosticType, VIOLATED_MODULE_DEP_ERROR, =, DiagnosticType, ., error, (, "JSC_VIOLATED_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}, since {1} loads after {0}", ), ;]
[), ;, static, final, DiagnosticType, VIOLATED_MODULE_DEP_ERROR, =, DiagnosticType, ., error, (, "JSC_VIOLATED_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}, since {1} loads after {0}", ), ;, static, final]
[;, static, final, DiagnosticType, MISSING_MODULE_DEP_ERROR, =, DiagnosticType, ., warning, (, "JSC_MISSING_MODULE_DEPENDENCY", ,, "missing module dependency; module {0} should depend ", +, "on module {1} because it references {2}", ), ;, static, final, DiagnosticType]
[., error, (, "JSC_VIOLATED_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}, since {1} loads after {0}", ), ;, static, final, DiagnosticType, MISSING_MODULE_DEP_ERROR, =, DiagnosticType, ., warning, (, "JSC_MISSING_MODULE_DEPENDENCY"]
[,, "module {0} cannot reference {2}, defined in ", +, "module {1}, since {1} loads after {0}", ), ;, static, final, DiagnosticType, MISSING_MODULE_DEP_ERROR, =, DiagnosticType, ., warning, (, "JSC_MISSING_MODULE_DEPENDENCY", ,, "missing module dependency; module {0} should depend ", +, "on module {1} because it references {2}"]
[), ;, static, final, DiagnosticType, MISSING_MODULE_DEP_ERROR, =, DiagnosticType, ., warning, (, "JSC_MISSING_MODULE_DEPENDENCY", ,, "missing module dependency; module {0} should depend ", +, "on module {1} because it references {2}", ), ;, static, final]
[+, "module {1}, since {1} loads after {0}", ), ;, static, final, DiagnosticType, MISSING_MODULE_DEP_ERROR, =, DiagnosticType, ., warning, (, "JSC_MISSING_MODULE_DEPENDENCY", ,, "missing module dependency; module {0} should depend ", +, "on module {1} because it references {2}", ), ;]
[), ;, static, final, DiagnosticType, MISSING_MODULE_DEP_ERROR, =, DiagnosticType, ., warning, (, "JSC_MISSING_MODULE_DEPENDENCY", ,, "missing module dependency; module {0} should depend ", +, "on module {1} because it references {2}", ), ;, static, final]
[;, static, final, DiagnosticType, STRICT_MODULE_DEP_ERROR, =, DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}", ), ;, static, final, DiagnosticType]
[., warning, (, "JSC_MISSING_MODULE_DEPENDENCY", ,, "missing module dependency; module {0} should depend ", +, "on module {1} because it references {2}", ), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_ERROR, =, DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEPENDENCY"]
[,, "missing module dependency; module {0} should depend ", +, "on module {1} because it references {2}", ), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_ERROR, =, DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}"]
[), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_ERROR, =, DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}", ), ;, static, final]
[+, "on module {1} because it references {2}", ), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_ERROR, =, DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}", ), ;]
[), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_ERROR, =, DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}", ), ;, static, final]
[;, static, final, DiagnosticType, NAME_REFERENCE_IN_EXTERNS_ERROR, =, DiagnosticType, ., warning, (, "JSC_NAME_REFERENCE_IN_EXTERNS", ,, "accessing name {0} in externs has no effect", ), ;, static, final, DiagnosticType, UNDEFINED_EXTERN_VAR_ERROR, =]
[., disabled, (, "JSC_STRICT_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}", ), ;, static, final, DiagnosticType, NAME_REFERENCE_IN_EXTERNS_ERROR, =, DiagnosticType, ., warning, (, "JSC_NAME_REFERENCE_IN_EXTERNS"]
[,, "module {0} cannot reference {2}, defined in ", +, "module {1}", ), ;, static, final, DiagnosticType, NAME_REFERENCE_IN_EXTERNS_ERROR, =, DiagnosticType, ., warning, (, "JSC_NAME_REFERENCE_IN_EXTERNS", ,, "accessing name {0} in externs has no effect", ), ;]
[), ;, static, final, DiagnosticType, NAME_REFERENCE_IN_EXTERNS_ERROR, =, DiagnosticType, ., warning, (, "JSC_NAME_REFERENCE_IN_EXTERNS", ,, "accessing name {0} in externs has no effect", ), ;, static, final, DiagnosticType, UNDEFINED_EXTERN_VAR_ERROR]
[+, "module {1}", ), ;, static, final, DiagnosticType, NAME_REFERENCE_IN_EXTERNS_ERROR, =, DiagnosticType, ., warning, (, "JSC_NAME_REFERENCE_IN_EXTERNS", ,, "accessing name {0} in externs has no effect", ), ;, static, final]
[), ;, static, final, DiagnosticType, NAME_REFERENCE_IN_EXTERNS_ERROR, =, DiagnosticType, ., warning, (, "JSC_NAME_REFERENCE_IN_EXTERNS", ,, "accessing name {0} in externs has no effect", ), ;, static, final, DiagnosticType, UNDEFINED_EXTERN_VAR_ERROR]
[;, static, final, DiagnosticType, UNDEFINED_EXTERN_VAR_ERROR, =, DiagnosticType, ., warning, (, "JSC_UNDEFINED_EXTERN_VAR_ERROR", ,, "name {0} is not undefined in the externs.", ), ;, private, Node, synthesizedExternsRoot, =, null]
[., warning, (, "JSC_NAME_REFERENCE_IN_EXTERNS", ,, "accessing name {0} in externs has no effect", ), ;, static, final, DiagnosticType, UNDEFINED_EXTERN_VAR_ERROR, =, DiagnosticType, ., warning, (, "JSC_UNDEFINED_EXTERN_VAR_ERROR", ,, "name {0} is not undefined in the externs."]
[,, "accessing name {0} in externs has no effect", ), ;, static, final, DiagnosticType, UNDEFINED_EXTERN_VAR_ERROR, =, DiagnosticType, ., warning, (, "JSC_UNDEFINED_EXTERN_VAR_ERROR", ,, "name {0} is not undefined in the externs.", ), ;, private, Node]
[), ;, static, final, DiagnosticType, UNDEFINED_EXTERN_VAR_ERROR, =, DiagnosticType, ., warning, (, "JSC_UNDEFINED_EXTERN_VAR_ERROR", ,, "name {0} is not undefined in the externs.", ), ;, private, Node, synthesizedExternsRoot, =]
[;, private, Node, synthesizedExternsRoot, =, null, ;, private, final, Set, <, String, >, varsToDeclareInExterns, =, Sets, ., newHashSet, (, )]
[., warning, (, "JSC_UNDEFINED_EXTERN_VAR_ERROR", ,, "name {0} is not undefined in the externs.", ), ;, private, Node, synthesizedExternsRoot, =, null, ;, private, final, Set, <, String, >]
[,, "name {0} is not undefined in the externs.", ), ;, private, Node, synthesizedExternsRoot, =, null, ;, private, final, Set, <, String, >, varsToDeclareInExterns, =, Sets, .]
[), ;, private, Node, synthesizedExternsRoot, =, null, ;, private, final, Set, <, String, >, varsToDeclareInExterns, =, Sets, ., newHashSet, (]
[;, private, final, Set, <, String, >, varsToDeclareInExterns, =, Sets, ., newHashSet, (, ), ;, private, final, AbstractCompiler, compiler, ;]
[;, private, final, AbstractCompiler, compiler, ;, private, final, boolean, sanityCheck, ;, private, final, boolean, strictExternCheck, ;, VarCheck, (, AbstractCompiler, compiler]
[., newHashSet, (, ), ;, private, final, AbstractCompiler, compiler, ;, private, final, boolean, sanityCheck, ;, private, final, boolean, strictExternCheck, ;]
[,, false, ), ;, }, VarCheck, (, AbstractCompiler, compiler, ,, boolean, sanityCheck, ), {, this, ., compiler, =, compiler, ;]
[), ;, }, VarCheck, (, AbstractCompiler, compiler, ,, boolean, sanityCheck, ), {, this, ., compiler, =, compiler, ;, this, .]
[=, compiler, ;, this, ., strictExternCheck, =, compiler, ., getErrorLevel, (, JSError, ., make, (, "", ,, 0, ,, 0]
[., compiler, =, compiler, ;, this, ., strictExternCheck, =, compiler, ., getErrorLevel, (, JSError, ., make, (, "", ,, 0]
[;, this, ., strictExternCheck, =, compiler, ., getErrorLevel, (, JSError, ., make, (, "", ,, 0, ,, 0, ,, UNDEFINED_EXTERN_VAR_ERROR]
[=, compiler, ., getErrorLevel, (, JSError, ., make, (, "", ,, 0, ,, 0, ,, UNDEFINED_EXTERN_VAR_ERROR, ), ), ==, CheckLevel]
[., strictExternCheck, =, compiler, ., getErrorLevel, (, JSError, ., make, (, "", ,, 0, ,, 0, ,, UNDEFINED_EXTERN_VAR_ERROR, ), )]
[;, this, ., sanityCheck, =, sanityCheck, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[==, CheckLevel, ., ERROR, ;, this, ., sanityCheck, =, sanityCheck, ;, }, @, Override, public, void, process, (, Node, externs]
[., getErrorLevel, (, JSError, ., make, (, "", ,, 0, ,, 0, ,, UNDEFINED_EXTERN_VAR_ERROR, ), ), ==, CheckLevel, ., ERROR]
[), ==, CheckLevel, ., ERROR, ;, this, ., sanityCheck, =, sanityCheck, ;, }, @, Override, public, void, process, (, Node]
[., make, (, "", ,, 0, ,, 0, ,, UNDEFINED_EXTERN_VAR_ERROR, ), ), ==, CheckLevel, ., ERROR, ;, this, ., sanityCheck]
[,, 0, ,, 0, ,, UNDEFINED_EXTERN_VAR_ERROR, ), ), ==, CheckLevel, ., ERROR, ;, this, ., sanityCheck, =, sanityCheck, ;, }]
[,, 0, ,, UNDEFINED_EXTERN_VAR_ERROR, ), ), ==, CheckLevel, ., ERROR, ;, this, ., sanityCheck, =, sanityCheck, ;, }, @, Override]
[,, UNDEFINED_EXTERN_VAR_ERROR, ), ), ==, CheckLevel, ., ERROR, ;, this, ., sanityCheck, =, sanityCheck, ;, }, @, Override, public, void]
[), ), ==, CheckLevel, ., ERROR, ;, this, ., sanityCheck, =, sanityCheck, ;, }, @, Override, public, void, process, (]
[;, this, ., sanityCheck, =, sanityCheck, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[., ERROR, ;, this, ., sanityCheck, =, sanityCheck, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[=, sanityCheck, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, !]
[., sanityCheck, =, sanityCheck, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, !, sanityCheck, )]
[), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, NameRefInExternsCheck, (, ), ), ;, }, NodeTraversal, ., traverseRoots]
[), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, NameRefInExternsCheck, (, ), ), ;, }, NodeTraversal, ., traverseRoots]
[;, }, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, ), ;]
[., traverse, (, compiler, ,, externs, ,, new, NameRefInExternsCheck, (, ), ), ;, }, NodeTraversal, ., traverseRoots, (, compiler, ,]
[,, externs, ,, new, NameRefInExternsCheck, (, ), ), ;, }, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (]
[,, new, NameRefInExternsCheck, (, ), ), ;, }, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,]
[), ;, }, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, )]
[;, for, (, String, varName, :, varsToDeclareInExterns, ), {, createSynthesizedExternVar, (, varName, ), ;, }, }, @, Override, public, void]
[., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, ), ;, for, (, String]
[,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, ), ;, for, (, String, varName, :, varsToDeclareInExterns, )]
[,, this, ), ;, for, (, String, varName, :, varsToDeclareInExterns, ), {, createSynthesizedExternVar, (, varName, ), ;, }, }, @]
[., newArrayList, (, externs, ,, root, ), ,, this, ), ;, for, (, String, varName, :, varsToDeclareInExterns, ), {, createSynthesizedExternVar]
[,, root, ), ,, this, ), ;, for, (, String, varName, :, varsToDeclareInExterns, ), {, createSynthesizedExternVar, (, varName, ), ;]
[), ,, this, ), ;, for, (, String, varName, :, varsToDeclareInExterns, ), {, createSynthesizedExternVar, (, varName, ), ;, }, }]
[), ;, for, (, String, varName, :, varsToDeclareInExterns, ), {, createSynthesizedExternVar, (, varName, ), ;, }, }, @, Override, public]
[), {, createSynthesizedExternVar, (, varName, ), ;, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot]
[;, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, Preconditions, ., checkState, (]
[), ;, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, Preconditions, ., checkState]
[;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, this, ), ;, t, ., traverseWithScope, (, scriptRoot, ,, SyntacticScopeCreator, .]
[., checkState, (, scriptRoot, ., isScript, (, ), ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, this, )]
[), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, this, ), ;, t, ., traverseWithScope, (, scriptRoot, ,, SyntacticScopeCreator]
[., isScript, (, ), ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, this, ), ;, t, ., traverseWithScope]
[;, t, ., traverseWithScope, (, scriptRoot, ,, SyntacticScopeCreator, ., generateUntypedTopScope, (, compiler, ), ), ;, }, @, Override, public, void]
[,, this, ), ;, t, ., traverseWithScope, (, scriptRoot, ,, SyntacticScopeCreator, ., generateUntypedTopScope, (, compiler, ), ), ;, }, @]
[), ;, t, ., traverseWithScope, (, scriptRoot, ,, SyntacticScopeCreator, ., generateUntypedTopScope, (, compiler, ), ), ;, }, @, Override, public]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[., traverseWithScope, (, scriptRoot, ,, SyntacticScopeCreator, ., generateUntypedTopScope, (, compiler, ), ), ;, }, @, Override, public, void, visit, (]
[,, SyntacticScopeCreator, ., generateUntypedTopScope, (, compiler, ), ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if]
[., generateUntypedTopScope, (, compiler, ), ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[), ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[), {, return, ;, }, String, varName, =, n, ., getString, (, ), ;, if, (, varName, ., isEmpty, (]
[), {, return, ;, }, String, varName, =, n, ., getString, (, ), ;, if, (, varName, ., isEmpty, (]
[., isName, (, ), ), {, return, ;, }, String, varName, =, n, ., getString, (, ), ;, if, (]
[;, if, (, varName, ., isEmpty, (, ), ), {, Preconditions, ., checkState, (, parent, ., isFunction, (, ), )]
[., getString, (, ), ;, if, (, varName, ., isEmpty, (, ), ), {, Preconditions, ., checkState, (, parent, .]
[), {, Preconditions, ., checkState, (, parent, ., isFunction, (, ), ), ;, Preconditions, ., checkState, (, NodeUtil, ., isFunctionExpression]
[., isEmpty, (, ), ), {, Preconditions, ., checkState, (, parent, ., isFunction, (, ), ), ;, Preconditions, ., checkState]
[;, Preconditions, ., checkState, (, NodeUtil, ., isFunctionExpression, (, parent, ), ), ;, return, ;, }, if, (, (, parent]
[., checkState, (, parent, ., isFunction, (, ), ), ;, Preconditions, ., checkState, (, NodeUtil, ., isFunctionExpression, (, parent, )]
[), ;, Preconditions, ., checkState, (, NodeUtil, ., isFunctionExpression, (, parent, ), ), ;, return, ;, }, if, (, (]
[., isFunction, (, ), ), ;, Preconditions, ., checkState, (, NodeUtil, ., isFunctionExpression, (, parent, ), ), ;, return, ;]
[;, return, ;, }, if, (, (, parent, ., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent, ), )]
[., checkState, (, NodeUtil, ., isFunctionExpression, (, parent, ), ), ;, return, ;, }, if, (, (, parent, ., isVar]
[), ;, return, ;, }, if, (, (, parent, ., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent, )]
[., isFunctionExpression, (, parent, ), ), ;, return, ;, }, if, (, (, parent, ., isVar, (, ), ||, NodeUtil]
[), ), ;, return, ;, }, if, (, (, parent, ., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent]
[), {, createSynthesizedExternVar, (, varName, ), ;, n, ., addSuppression, (, "duplicate", ), ;, }, Scope, scope, =, t, .]
[&&, varsToDeclareInExterns, ., contains, (, varName, ), ), {, createSynthesizedExternVar, (, varName, ), ;, n, ., addSuppression, (, "duplicate", )]
[), &&, varsToDeclareInExterns, ., contains, (, varName, ), ), {, createSynthesizedExternVar, (, varName, ), ;, n, ., addSuppression, (, "duplicate"]
[||, NodeUtil, ., isFunctionDeclaration, (, parent, ), ), &&, varsToDeclareInExterns, ., contains, (, varName, ), ), {, createSynthesizedExternVar, (, varName]
[., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent, ), ), &&, varsToDeclareInExterns, ., contains, (, varName, ), )]
[), &&, varsToDeclareInExterns, ., contains, (, varName, ), ), {, createSynthesizedExternVar, (, varName, ), ;, n, ., addSuppression, (, "duplicate"]
[., isFunctionDeclaration, (, parent, ), ), &&, varsToDeclareInExterns, ., contains, (, varName, ), ), {, createSynthesizedExternVar, (, varName, ), ;]
[), ), &&, varsToDeclareInExterns, ., contains, (, varName, ), ), {, createSynthesizedExternVar, (, varName, ), ;, n, ., addSuppression, (]
[), {, createSynthesizedExternVar, (, varName, ), ;, n, ., addSuppression, (, "duplicate", ), ;, }, Scope, scope, =, t, .]
[., contains, (, varName, ), ), {, createSynthesizedExternVar, (, varName, ), ;, n, ., addSuppression, (, "duplicate", ), ;, }]
[), ), {, createSynthesizedExternVar, (, varName, ), ;, n, ., addSuppression, (, "duplicate", ), ;, }, Scope, scope, =, t]
[;, n, ., addSuppression, (, "duplicate", ), ;, }, Scope, scope, =, t, ., getScope, (, ), ;, Scope, .]
[), ;, n, ., addSuppression, (, "duplicate", ), ;, }, Scope, scope, =, t, ., getScope, (, ), ;, Scope]
[;, }, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar, (]
[., addSuppression, (, "duplicate", ), ;, }, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var]
[), ;, }, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar]
[;, Scope, ., Var, var, =, scope, ., getVar, (, varName, ), ;, if, (, var, ==, null, ), {]
[., getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar, (, varName, ), ;, if, (, var]
[;, if, (, var, ==, null, ), {, if, (, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, }, else]
[., getVar, (, varName, ), ;, if, (, var, ==, null, ), {, if, (, NodeUtil, ., isFunctionExpression, (, parent]
[), ;, if, (, var, ==, null, ), {, if, (, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, }]
[), {, if, (, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, }, else, {, if, (, !, strictExternCheck, ||]
[==, null, ), {, if, (, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, }, else, {, if, (, !]
[), {, if, (, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, }, else, {, if, (, !, strictExternCheck, ||]
[), {, }, else, {, if, (, !, strictExternCheck, ||, !, t, ., getInput, (, ), ., isExtern, (, )]
[., isFunctionExpression, (, parent, ), ), {, }, else, {, if, (, !, strictExternCheck, ||, !, t, ., getInput, (]
[), ), {, }, else, {, if, (, !, strictExternCheck, ||, !, t, ., getInput, (, ), ., isExtern, (]
[), {, t, ., report, (, n, ,, UNDEFINED_VAR_ERROR, ,, varName, ), ;, }, if, (, sanityCheck, ), {, throw]
[||, !, t, ., getInput, (, ), ., isExtern, (, ), ), {, t, ., report, (, n, ,, UNDEFINED_VAR_ERROR]
[||, !, t, ., getInput, (, ), ., isExtern, (, ), ), {, t, ., report, (, n, ,, UNDEFINED_VAR_ERROR]
[), {, t, ., report, (, n, ,, UNDEFINED_VAR_ERROR, ,, varName, ), ;, }, if, (, sanityCheck, ), {, throw]
[), {, t, ., report, (, n, ,, UNDEFINED_VAR_ERROR, ,, varName, ), ;, }, if, (, sanityCheck, ), {, throw]
[., isExtern, (, ), ), {, t, ., report, (, n, ,, UNDEFINED_VAR_ERROR, ,, varName, ), ;, }, if, (]
[., getInput, (, ), ., isExtern, (, ), ), {, t, ., report, (, n, ,, UNDEFINED_VAR_ERROR, ,, varName, )]
[;, }, if, (, sanityCheck, ), {, throw, new, IllegalStateException, (, "Unexpected variable ", +, varName, ), ;, }, else, {, createSynthesizedExternVar]
[., report, (, n, ,, UNDEFINED_VAR_ERROR, ,, varName, ), ;, }, if, (, sanityCheck, ), {, throw, new, IllegalStateException, (]
[,, UNDEFINED_VAR_ERROR, ,, varName, ), ;, }, if, (, sanityCheck, ), {, throw, new, IllegalStateException, (, "Unexpected variable ", +, varName, )]
[,, varName, ), ;, }, if, (, sanityCheck, ), {, throw, new, IllegalStateException, (, "Unexpected variable ", +, varName, ), ;, }]
[), ;, }, if, (, sanityCheck, ), {, throw, new, IllegalStateException, (, "Unexpected variable ", +, varName, ), ;, }, else, {]
[), {, throw, new, IllegalStateException, (, "Unexpected variable ", +, varName, ), ;, }, else, {, createSynthesizedExternVar, (, varName, ), ;, scope]
[;, }, else, {, createSynthesizedExternVar, (, varName, ), ;, scope, ., getGlobalScope, (, ), ., declare, (, varName, ,, n]
[), ;, }, else, {, createSynthesizedExternVar, (, varName, ), ;, scope, ., getGlobalScope, (, ), ., declare, (, varName, ,]
[+, varName, ), ;, }, else, {, createSynthesizedExternVar, (, varName, ), ;, scope, ., getGlobalScope, (, ), ., declare, (]
[), ;, }, else, {, createSynthesizedExternVar, (, varName, ), ;, scope, ., getGlobalScope, (, ), ., declare, (, varName, ,]
[;, scope, ., getGlobalScope, (, ), ., declare, (, varName, ,, n, ,, null, ,, getSynthesizedExternsInput, (, ), ), ;]
[), ;, scope, ., getGlobalScope, (, ), ., declare, (, varName, ,, n, ,, null, ,, getSynthesizedExternsInput, (, ), )]
[;, }, }, return, ;, }, CompilerInput, currInput, =, t, ., getInput, (, ), ;, CompilerInput, varInput, =, var, .]
[., declare, (, varName, ,, n, ,, null, ,, getSynthesizedExternsInput, (, ), ), ;, }, }, return, ;, }, CompilerInput]
[., getGlobalScope, (, ), ., declare, (, varName, ,, n, ,, null, ,, getSynthesizedExternsInput, (, ), ), ;, }, }]
[,, n, ,, null, ,, getSynthesizedExternsInput, (, ), ), ;, }, }, return, ;, }, CompilerInput, currInput, =, t, .]
[,, null, ,, getSynthesizedExternsInput, (, ), ), ;, }, }, return, ;, }, CompilerInput, currInput, =, t, ., getInput, (]
[,, getSynthesizedExternsInput, (, ), ), ;, }, }, return, ;, }, CompilerInput, currInput, =, t, ., getInput, (, ), ;]
[), ;, }, }, return, ;, }, CompilerInput, currInput, =, t, ., getInput, (, ), ;, CompilerInput, varInput, =, var]
[;, CompilerInput, varInput, =, var, ., input, ;, if, (, currInput, ==, varInput, ||, currInput, ==, null, ||, varInput, ==]
[., getInput, (, ), ;, CompilerInput, varInput, =, var, ., input, ;, if, (, currInput, ==, varInput, ||, currInput, ==]
[;, if, (, currInput, ==, varInput, ||, currInput, ==, null, ||, varInput, ==, null, ), {, return, ;, }, JSModule]
[., input, ;, if, (, currInput, ==, varInput, ||, currInput, ==, null, ||, varInput, ==, null, ), {, return, ;]
[), {, return, ;, }, JSModule, currModule, =, currInput, ., getModule, (, ), ;, JSModule, varModule, =, varInput, ., getModule]
[||, varInput, ==, null, ), {, return, ;, }, JSModule, currModule, =, currInput, ., getModule, (, ), ;, JSModule, varModule]
[||, currInput, ==, null, ||, varInput, ==, null, ), {, return, ;, }, JSModule, currModule, =, currInput, ., getModule, (]
[==, varInput, ||, currInput, ==, null, ||, varInput, ==, null, ), {, return, ;, }, JSModule, currModule, =, currInput, .]
[||, currInput, ==, null, ||, varInput, ==, null, ), {, return, ;, }, JSModule, currModule, =, currInput, ., getModule, (]
[||, varInput, ==, null, ), {, return, ;, }, JSModule, currModule, =, currInput, ., getModule, (, ), ;, JSModule, varModule]
[==, null, ||, varInput, ==, null, ), {, return, ;, }, JSModule, currModule, =, currInput, ., getModule, (, ), ;]
[||, varInput, ==, null, ), {, return, ;, }, JSModule, currModule, =, currInput, ., getModule, (, ), ;, JSModule, varModule]
[), {, return, ;, }, JSModule, currModule, =, currInput, ., getModule, (, ), ;, JSModule, varModule, =, varInput, ., getModule]
[==, null, ), {, return, ;, }, JSModule, currModule, =, currInput, ., getModule, (, ), ;, JSModule, varModule, =, varInput]
[), {, return, ;, }, JSModule, currModule, =, currInput, ., getModule, (, ), ;, JSModule, varModule, =, varInput, ., getModule]
[;, JSModule, varModule, =, varInput, ., getModule, (, ), ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, if]
[., getModule, (, ), ;, JSModule, varModule, =, varInput, ., getModule, (, ), ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph]
[;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, if, (, !, sanityCheck, &&, varModule, !=, currModule, &&, varModule]
[., getModule, (, ), ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, if, (, !, sanityCheck, &&, varModule]
[;, if, (, !, sanityCheck, &&, varModule, !=, currModule, &&, varModule, !=, null, &&, currModule, !=, null, ), {, if]
[., getModuleGraph, (, ), ;, if, (, !, sanityCheck, &&, varModule, !=, currModule, &&, varModule, !=, null, &&, currModule, !=]
[), {, if, (, moduleGraph, ., dependsOn, (, currModule, ,, varModule, ), ), {, }, else, {, if, (, scope]
[&&, currModule, !=, null, ), {, if, (, moduleGraph, ., dependsOn, (, currModule, ,, varModule, ), ), {, }, else]
[&&, varModule, !=, null, &&, currModule, !=, null, ), {, if, (, moduleGraph, ., dependsOn, (, currModule, ,, varModule, )]
[&&, varModule, !=, currModule, &&, varModule, !=, null, &&, currModule, !=, null, ), {, if, (, moduleGraph, ., dependsOn, (]
[&&, varModule, !=, currModule, &&, varModule, !=, null, &&, currModule, !=, null, ), {, if, (, moduleGraph, ., dependsOn, (]
[&&, varModule, !=, null, &&, currModule, !=, null, ), {, if, (, moduleGraph, ., dependsOn, (, currModule, ,, varModule, )]
[!=, currModule, &&, varModule, !=, null, &&, currModule, !=, null, ), {, if, (, moduleGraph, ., dependsOn, (, currModule, ,]
[&&, varModule, !=, null, &&, currModule, !=, null, ), {, if, (, moduleGraph, ., dependsOn, (, currModule, ,, varModule, )]
[&&, currModule, !=, null, ), {, if, (, moduleGraph, ., dependsOn, (, currModule, ,, varModule, ), ), {, }, else]
[!=, null, &&, currModule, !=, null, ), {, if, (, moduleGraph, ., dependsOn, (, currModule, ,, varModule, ), ), {]
[&&, currModule, !=, null, ), {, if, (, moduleGraph, ., dependsOn, (, currModule, ,, varModule, ), ), {, }, else]
[), {, if, (, moduleGraph, ., dependsOn, (, currModule, ,, varModule, ), ), {, }, else, {, if, (, scope]
[!=, null, ), {, if, (, moduleGraph, ., dependsOn, (, currModule, ,, varModule, ), ), {, }, else, {, if]
[), {, if, (, moduleGraph, ., dependsOn, (, currModule, ,, varModule, ), ), {, }, else, {, if, (, scope]
[), {, }, else, {, if, (, scope, ., isGlobal, (, ), ), {, if, (, moduleGraph, ., dependsOn, (]
[., dependsOn, (, currModule, ,, varModule, ), ), {, }, else, {, if, (, scope, ., isGlobal, (, ), )]
[,, varModule, ), ), {, }, else, {, if, (, scope, ., isGlobal, (, ), ), {, if, (, moduleGraph]
[), ), {, }, else, {, if, (, scope, ., isGlobal, (, ), ), {, if, (, moduleGraph, ., dependsOn]
[), {, if, (, moduleGraph, ., dependsOn, (, varModule, ,, currModule, ), ), {, t, ., report, (, n, ,]
[., isGlobal, (, ), ), {, if, (, moduleGraph, ., dependsOn, (, varModule, ,, currModule, ), ), {, t, .]
[), {, t, ., report, (, n, ,, VIOLATED_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,, varModule, ., getName, (]
[., dependsOn, (, varModule, ,, currModule, ), ), {, t, ., report, (, n, ,, VIOLATED_MODULE_DEP_ERROR, ,, currModule, ., getName]
[,, currModule, ), ), {, t, ., report, (, n, ,, VIOLATED_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,, varModule]
[), ), {, t, ., report, (, n, ,, VIOLATED_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,, varModule, ., getName]
[;, }, else, {, t, ., report, (, n, ,, MISSING_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,, varModule, .]
[., report, (, n, ,, VIOLATED_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,, varModule, ., getName, (, ), ,, varName]
[,, VIOLATED_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,, varModule, ., getName, (, ), ,, varName, ), ;, }, else]
[,, currModule, ., getName, (, ), ,, varModule, ., getName, (, ), ,, varName, ), ;, }, else, {, t]
[,, varModule, ., getName, (, ), ,, varName, ), ;, }, else, {, t, ., report, (, n, ,, MISSING_MODULE_DEP_ERROR]
[., getName, (, ), ,, varModule, ., getName, (, ), ,, varName, ), ;, }, else, {, t, ., report]
[,, varName, ), ;, }, else, {, t, ., report, (, n, ,, MISSING_MODULE_DEP_ERROR, ,, currModule, ., getName, (, )]
[., getName, (, ), ,, varName, ), ;, }, else, {, t, ., report, (, n, ,, MISSING_MODULE_DEP_ERROR, ,, currModule]
[), ;, }, else, {, t, ., report, (, n, ,, MISSING_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,, varModule]
[;, }, }, else, {, t, ., report, (, n, ,, STRICT_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,, varModule]
[., report, (, n, ,, MISSING_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,, varModule, ., getName, (, ), ,, varName]
[,, MISSING_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,, varModule, ., getName, (, ), ,, varName, ), ;, }, }]
[,, currModule, ., getName, (, ), ,, varModule, ., getName, (, ), ,, varName, ), ;, }, }, else, {]
[,, varModule, ., getName, (, ), ,, varName, ), ;, }, }, else, {, t, ., report, (, n, ,]
[., getName, (, ), ,, varModule, ., getName, (, ), ,, varName, ), ;, }, }, else, {, t, .]
[,, varName, ), ;, }, }, else, {, t, ., report, (, n, ,, STRICT_MODULE_DEP_ERROR, ,, currModule, ., getName, (]
[., getName, (, ), ,, varName, ), ;, }, }, else, {, t, ., report, (, n, ,, STRICT_MODULE_DEP_ERROR, ,]
[), ;, }, }, else, {, t, ., report, (, n, ,, STRICT_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,]
[;, }, }, }, }, private, void, createSynthesizedExternVar, (, String, varName, ), {, Node, nameNode, =, IR, ., name, (]
[., report, (, n, ,, STRICT_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,, varModule, ., getName, (, ), ,, varName]
[,, STRICT_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,, varModule, ., getName, (, ), ,, varName, ), ;, }, }]
[,, currModule, ., getName, (, ), ,, varModule, ., getName, (, ), ,, varName, ), ;, }, }, }, }]
[,, varModule, ., getName, (, ), ,, varName, ), ;, }, }, }, }, private, void, createSynthesizedExternVar, (, String, varName]
[., getName, (, ), ,, varModule, ., getName, (, ), ,, varName, ), ;, }, }, }, }, private, void]
[,, varName, ), ;, }, }, }, }, private, void, createSynthesizedExternVar, (, String, varName, ), {, Node, nameNode, =, IR]
[., getName, (, ), ,, varName, ), ;, }, }, }, }, private, void, createSynthesizedExternVar, (, String, varName, ), {]
[), ;, }, }, }, }, private, void, createSynthesizedExternVar, (, String, varName, ), {, Node, nameNode, =, IR, ., name]
[;, if, (, compiler, ., getCodingConvention, (, ), ., isConstant, (, varName, ), ), {, nameNode, ., putBooleanProp, (, Node]
[., name, (, varName, ), ;, if, (, compiler, ., getCodingConvention, (, ), ., isConstant, (, varName, ), ), {]
[), ;, if, (, compiler, ., getCodingConvention, (, ), ., isConstant, (, varName, ), ), {, nameNode, ., putBooleanProp, (]
[), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, getSynthesizedExternsRoot, (, ), ., addChildToBack, (]
[., isConstant, (, varName, ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, getSynthesizedExternsRoot]
[., getCodingConvention, (, ), ., isConstant, (, varName, ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true]
[), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, getSynthesizedExternsRoot, (, ), ., addChildToBack]
[;, }, getSynthesizedExternsRoot, (, ), ., addChildToBack, (, IR, ., var, (, nameNode, ), ), ;, varsToDeclareInExterns, ., remove, (]
[., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, getSynthesizedExternsRoot, (, ), ., addChildToBack, (, IR, ., var]
[,, true, ), ;, }, getSynthesizedExternsRoot, (, ), ., addChildToBack, (, IR, ., var, (, nameNode, ), ), ;, varsToDeclareInExterns]
[., IS_CONSTANT_NAME, ,, true, ), ;, }, getSynthesizedExternsRoot, (, ), ., addChildToBack, (, IR, ., var, (, nameNode, ), )]
[), ;, }, getSynthesizedExternsRoot, (, ), ., addChildToBack, (, IR, ., var, (, nameNode, ), ), ;, varsToDeclareInExterns, ., remove]
[;, varsToDeclareInExterns, ., remove, (, varName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, class, NameRefInExternsCheck, extends, AbstractPostOrderCallback]
[., addChildToBack, (, IR, ., var, (, nameNode, ), ), ;, varsToDeclareInExterns, ., remove, (, varName, ), ;, compiler, .]
[), ;, varsToDeclareInExterns, ., remove, (, varName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, class, NameRefInExternsCheck, extends]
[., var, (, nameNode, ), ), ;, varsToDeclareInExterns, ., remove, (, varName, ), ;, compiler, ., reportCodeChange, (, ), ;]
[), ), ;, varsToDeclareInExterns, ., remove, (, varName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, class, NameRefInExternsCheck]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, class, NameRefInExternsCheck, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (]
[., remove, (, varName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, class, NameRefInExternsCheck, extends, AbstractPostOrderCallback, {, @]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, class, NameRefInExternsCheck, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit]
[;, }, private, class, NameRefInExternsCheck, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[., reportCodeChange, (, ), ;, }, private, class, NameRefInExternsCheck, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t]
[), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., VAR, :, case, Token, ., FUNCTION]
[., isName, (, ), ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., VAR, :]
[), {, case, Token, ., VAR, :, case, Token, ., FUNCTION, :, case, Token, ., PARAM_LIST, :, break, ;, case]
[., getType, (, ), ), {, case, Token, ., VAR, :, case, Token, ., FUNCTION, :, case, Token, ., PARAM_LIST]
[:, case, Token, ., FUNCTION, :, case, Token, ., PARAM_LIST, :, break, ;, case, Token, ., GETPROP, :, if, (]
[., VAR, :, case, Token, ., FUNCTION, :, case, Token, ., PARAM_LIST, :, break, ;, case, Token, ., GETPROP, :]
[:, case, Token, ., PARAM_LIST, :, break, ;, case, Token, ., GETPROP, :, if, (, n, ==, parent, ., getFirstChild]
[., FUNCTION, :, case, Token, ., PARAM_LIST, :, break, ;, case, Token, ., GETPROP, :, if, (, n, ==, parent]
[:, break, ;, case, Token, ., GETPROP, :, if, (, n, ==, parent, ., getFirstChild, (, ), ), {, Scope]
[., PARAM_LIST, :, break, ;, case, Token, ., GETPROP, :, if, (, n, ==, parent, ., getFirstChild, (, ), )]
[:, if, (, n, ==, parent, ., getFirstChild, (, ), ), {, Scope, scope, =, t, ., getScope, (, )]
[., GETPROP, :, if, (, n, ==, parent, ., getFirstChild, (, ), ), {, Scope, scope, =, t, ., getScope]
[), {, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar, (]
[==, parent, ., getFirstChild, (, ), ), {, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var]
[), {, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar, (]
[., getFirstChild, (, ), ), {, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =]
[;, Scope, ., Var, var, =, scope, ., getVar, (, n, ., getString, (, ), ), ;, if, (, var]
[., getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar, (, n, ., getString, (, ), )]
[;, if, (, var, ==, null, ), {, t, ., report, (, n, ,, UNDEFINED_EXTERN_VAR_ERROR, ,, n, ., getString, (]
[., getVar, (, n, ., getString, (, ), ), ;, if, (, var, ==, null, ), {, t, ., report]
[), ;, if, (, var, ==, null, ), {, t, ., report, (, n, ,, UNDEFINED_EXTERN_VAR_ERROR, ,, n, ., getString]
[., getString, (, ), ), ;, if, (, var, ==, null, ), {, t, ., report, (, n, ,, UNDEFINED_EXTERN_VAR_ERROR]
[), {, t, ., report, (, n, ,, UNDEFINED_EXTERN_VAR_ERROR, ,, n, ., getString, (, ), ), ;, varsToDeclareInExterns, ., add]
[==, null, ), {, t, ., report, (, n, ,, UNDEFINED_EXTERN_VAR_ERROR, ,, n, ., getString, (, ), ), ;, varsToDeclareInExterns]
[), {, t, ., report, (, n, ,, UNDEFINED_EXTERN_VAR_ERROR, ,, n, ., getString, (, ), ), ;, varsToDeclareInExterns, ., add]
[;, varsToDeclareInExterns, ., add, (, n, ., getString, (, ), ), ;, }, }, break, ;, default, :, t, .]
[., report, (, n, ,, UNDEFINED_EXTERN_VAR_ERROR, ,, n, ., getString, (, ), ), ;, varsToDeclareInExterns, ., add, (, n, .]
[,, UNDEFINED_EXTERN_VAR_ERROR, ,, n, ., getString, (, ), ), ;, varsToDeclareInExterns, ., add, (, n, ., getString, (, ), )]
[,, n, ., getString, (, ), ), ;, varsToDeclareInExterns, ., add, (, n, ., getString, (, ), ), ;, }]
[), ;, varsToDeclareInExterns, ., add, (, n, ., getString, (, ), ), ;, }, }, break, ;, default, :, t]
[., getString, (, ), ), ;, varsToDeclareInExterns, ., add, (, n, ., getString, (, ), ), ;, }, }, break]
[;, }, }, break, ;, default, :, t, ., report, (, n, ,, NAME_REFERENCE_IN_EXTERNS_ERROR, ,, n, ., getString, (, )]
[., add, (, n, ., getString, (, ), ), ;, }, }, break, ;, default, :, t, ., report, (]
[), ;, }, }, break, ;, default, :, t, ., report, (, n, ,, NAME_REFERENCE_IN_EXTERNS_ERROR, ,, n, ., getString, (]
[., getString, (, ), ), ;, }, }, break, ;, default, :, t, ., report, (, n, ,, NAME_REFERENCE_IN_EXTERNS_ERROR, ,]
[;, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar, (, n]
[., report, (, n, ,, NAME_REFERENCE_IN_EXTERNS_ERROR, ,, n, ., getString, (, ), ), ;, Scope, scope, =, t, ., getScope]
[,, NAME_REFERENCE_IN_EXTERNS_ERROR, ,, n, ., getString, (, ), ), ;, Scope, scope, =, t, ., getScope, (, ), ;, Scope]
[,, n, ., getString, (, ), ), ;, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var]
[), ;, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar, (]
[., getString, (, ), ), ;, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =]
[;, Scope, ., Var, var, =, scope, ., getVar, (, n, ., getString, (, ), ), ;, if, (, var]
[., getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar, (, n, ., getString, (, ), )]
[;, if, (, var, ==, null, ), {, varsToDeclareInExterns, ., add, (, n, ., getString, (, ), ), ;, }]
[., getVar, (, n, ., getString, (, ), ), ;, if, (, var, ==, null, ), {, varsToDeclareInExterns, ., add]
[), ;, if, (, var, ==, null, ), {, varsToDeclareInExterns, ., add, (, n, ., getString, (, ), ), ;]
[., getString, (, ), ), ;, if, (, var, ==, null, ), {, varsToDeclareInExterns, ., add, (, n, ., getString]
[), {, varsToDeclareInExterns, ., add, (, n, ., getString, (, ), ), ;, }, break, ;, }, }, }, }]
[==, null, ), {, varsToDeclareInExterns, ., add, (, n, ., getString, (, ), ), ;, }, break, ;, }, }]
[), {, varsToDeclareInExterns, ., add, (, n, ., getString, (, ), ), ;, }, break, ;, }, }, }, }]
[;, }, break, ;, }, }, }, }, private, CompilerInput, getSynthesizedExternsInput, (, ), {, return, compiler, ., getSynthesizedExternsInput, (, )]
[., add, (, n, ., getString, (, ), ), ;, }, break, ;, }, }, }, }, private, CompilerInput, getSynthesizedExternsInput]
[), ;, }, break, ;, }, }, }, }, private, CompilerInput, getSynthesizedExternsInput, (, ), {, return, compiler, ., getSynthesizedExternsInput, (]
[., getString, (, ), ), ;, }, break, ;, }, }, }, }, private, CompilerInput, getSynthesizedExternsInput, (, ), {, return]
[;, }, private, Node, getSynthesizedExternsRoot, (, ), {, if, (, synthesizedExternsRoot, ==, null, ), {, CompilerInput, synthesizedExterns, =, getSynthesizedExternsInput, (]
[., getSynthesizedExternsInput, (, ), ;, }, private, Node, getSynthesizedExternsRoot, (, ), {, if, (, synthesizedExternsRoot, ==, null, ), {, CompilerInput]
[), {, CompilerInput, synthesizedExterns, =, getSynthesizedExternsInput, (, ), ;, synthesizedExternsRoot, =, synthesizedExterns, ., getAstRoot, (, compiler, ), ;, }, return]
[==, null, ), {, CompilerInput, synthesizedExterns, =, getSynthesizedExternsInput, (, ), ;, synthesizedExternsRoot, =, synthesizedExterns, ., getAstRoot, (, compiler, ), ;]
[), {, CompilerInput, synthesizedExterns, =, getSynthesizedExternsInput, (, ), ;, synthesizedExternsRoot, =, synthesizedExterns, ., getAstRoot, (, compiler, ), ;, }, return]
[;, synthesizedExternsRoot, =, synthesizedExterns, ., getAstRoot, (, compiler, ), ;, }, return, synthesizedExternsRoot, ;, }, }]
[=, synthesizedExterns, ., getAstRoot, (, compiler, ), ;, }, return, synthesizedExternsRoot, ;, }, }]
[;, }, return, synthesizedExternsRoot, ;, }, }]
[., getAstRoot, (, compiler, ), ;, }, return, synthesizedExternsRoot, ;, }, }]
[), ;, }, return, synthesizedExternsRoot, ;, }, }]
[;, }, }]
