[specializationState, ;, private, final, PassFactory, [, ], specializationPassFactories, ;, public, SpecializeModule, (, AbstractCompiler, compiler, ,, PassFactory, ..., specializationPassFactories, ), {]
[specializationState, ;, private, final, PassFactory, [, ], specializationPassFactories, ;, public, SpecializeModule, (, AbstractCompiler, compiler, ,, PassFactory, ..., specializationPassFactories, ), {]
[PassFactory, [, ], specializationPassFactories, ;, public, SpecializeModule, (, AbstractCompiler, compiler, ,, PassFactory, ..., specializationPassFactories, ), {, this, ., compiler, =]
[], specializationPassFactories, ;, public, SpecializeModule, (, AbstractCompiler, compiler, ,, PassFactory, ..., specializationPassFactories, ), {, this, ., compiler, =, compiler, ;]
[], specializationPassFactories, ;, public, SpecializeModule, (, AbstractCompiler, compiler, ,, PassFactory, ..., specializationPassFactories, ), {, this, ., compiler, =, compiler, ;]
[SpecializeModule, (, AbstractCompiler, compiler, ,, PassFactory, ..., specializationPassFactories, ), {, this, ., compiler, =, compiler, ;, this, ., specializationPassFactories, =]
[=, specializationPassFactories, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, JSModuleGraph, moduleGraph, =]
[=, specializationPassFactories, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, JSModuleGraph, moduleGraph, =]
[process, (, Node, externs, ,, Node, root, ), {, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, if, (]
[process, (, Node, externs, ,, Node, root, ), {, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, if, (]
[Node, externs, ,, Node, root, ), {, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, if, (, moduleGraph, ==]
[=, compiler, ., getModuleGraph, (, ), ;, if, (, moduleGraph, ==, null, ), {, return, ;, }, JSModule, module, =]
[=, compiler, ., getModuleGraph, (, ), ;, if, (, moduleGraph, ==, null, ), {, return, ;, }, JSModule, module, =]
[moduleGraph, ==, null, ), {, return, ;, }, JSModule, module, =, moduleGraph, ., getRootModule, (, ), ;, Node, fakeModuleRoot, =]
[null, ), {, return, ;, }, JSModule, module, =, moduleGraph, ., getRootModule, (, ), ;, Node, fakeModuleRoot, =, copyModuleInputs, (]
[JSModule, module, =, moduleGraph, ., getRootModule, (, ), ;, Node, fakeModuleRoot, =, copyModuleInputs, (, module, ), ;, SimpleDefinitionFinder, defFinder, =]
[moduleGraph, ., getRootModule, (, ), ;, Node, fakeModuleRoot, =, copyModuleInputs, (, module, ), ;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (]
[(, ), ;, Node, fakeModuleRoot, =, copyModuleInputs, (, module, ), ;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;]
[(, ), ;, Node, fakeModuleRoot, =, copyModuleInputs, (, module, ), ;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;]
[fakeModuleRoot, =, copyModuleInputs, (, module, ), ;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (]
[copyModuleInputs, (, module, ), ;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,]
[defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, fakeModuleRoot, ), ;, SimpleFunctionAliasAnalysis, initialModuleFunctionAliasAnalysis, =]
[compiler, ), ;, defFinder, ., process, (, externs, ,, fakeModuleRoot, ), ;, SimpleFunctionAliasAnalysis, initialModuleFunctionAliasAnalysis, =, new, SimpleFunctionAliasAnalysis, (, ), ;]
[compiler, ), ;, defFinder, ., process, (, externs, ,, fakeModuleRoot, ), ;, SimpleFunctionAliasAnalysis, initialModuleFunctionAliasAnalysis, =, new, SimpleFunctionAliasAnalysis, (, ), ;]
[., process, (, externs, ,, fakeModuleRoot, ), ;, SimpleFunctionAliasAnalysis, initialModuleFunctionAliasAnalysis, =, new, SimpleFunctionAliasAnalysis, (, ), ;, initialModuleFunctionAliasAnalysis, ., analyze, (]
[externs, ,, fakeModuleRoot, ), ;, SimpleFunctionAliasAnalysis, initialModuleFunctionAliasAnalysis, =, new, SimpleFunctionAliasAnalysis, (, ), ;, initialModuleFunctionAliasAnalysis, ., analyze, (, defFinder, ), ;]
[fakeModuleRoot, ), ;, SimpleFunctionAliasAnalysis, initialModuleFunctionAliasAnalysis, =, new, SimpleFunctionAliasAnalysis, (, ), ;, initialModuleFunctionAliasAnalysis, ., analyze, (, defFinder, ), ;, specializationState, =]
[SimpleFunctionAliasAnalysis, initialModuleFunctionAliasAnalysis, =, new, SimpleFunctionAliasAnalysis, (, ), ;, initialModuleFunctionAliasAnalysis, ., analyze, (, defFinder, ), ;, specializationState, =, new, SpecializationState, (]
[(, ), ;, initialModuleFunctionAliasAnalysis, ., analyze, (, defFinder, ), ;, specializationState, =, new, SpecializationState, (, initialModuleFunctionAliasAnalysis, ), ;, do, {]
[(, ), ;, initialModuleFunctionAliasAnalysis, ., analyze, (, defFinder, ), ;, specializationState, =, new, SpecializationState, (, initialModuleFunctionAliasAnalysis, ), ;, do, {]
[=, new, SpecializationState, (, initialModuleFunctionAliasAnalysis, ), ;, do, {, specializationState, ., resetHasChanged, (, ), ;, for, (, SpecializationAwareCompilerPass, pass, :]
[), ;, do, {, specializationState, ., resetHasChanged, (, ), ;, for, (, SpecializationAwareCompilerPass, pass, :, createSpecializingPasses, (, ), ), {]
[), ;, do, {, specializationState, ., resetHasChanged, (, ), ;, for, (, SpecializationAwareCompilerPass, pass, :, createSpecializingPasses, (, ), ), {]
[specializationState, ., resetHasChanged, (, ), ;, for, (, SpecializationAwareCompilerPass, pass, :, createSpecializingPasses, (, ), ), {, pass, ., enableSpecialization, (]
[(, ), ;, for, (, SpecializationAwareCompilerPass, pass, :, createSpecializingPasses, (, ), ), {, pass, ., enableSpecialization, (, specializationState, ), ;]
[(, ), ;, for, (, SpecializationAwareCompilerPass, pass, :, createSpecializingPasses, (, ), ), {, pass, ., enableSpecialization, (, specializationState, ), ;]
[(, SpecializationAwareCompilerPass, pass, :, createSpecializingPasses, (, ), ), {, pass, ., enableSpecialization, (, specializationState, ), ;, pass, ., process, (]
[pass, :, createSpecializingPasses, (, ), ), {, pass, ., enableSpecialization, (, specializationState, ), ;, pass, ., process, (, externs, ,]
[pass, ., enableSpecialization, (, specializationState, ), ;, pass, ., process, (, externs, ,, fakeModuleRoot, ), ;, }, }, while, (]
[pass, ., enableSpecialization, (, specializationState, ), ;, pass, ., process, (, externs, ,, fakeModuleRoot, ), ;, }, }, while, (]
[pass, ., process, (, externs, ,, fakeModuleRoot, ), ;, }, }, while, (, specializationState, ., hasChanged, (, ), ), ;]
[process, (, externs, ,, fakeModuleRoot, ), ;, }, }, while, (, specializationState, ., hasChanged, (, ), ), ;, addDummyVarDeclarationsToInitialModule, (]
[,, fakeModuleRoot, ), ;, }, }, while, (, specializationState, ., hasChanged, (, ), ), ;, addDummyVarDeclarationsToInitialModule, (, module, ), ;]
[}, }, while, (, specializationState, ., hasChanged, (, ), ), ;, addDummyVarDeclarationsToInitialModule, (, module, ), ;, replaceOriginalModuleInputsWithSpecialized, (, ), ;]
[while, (, specializationState, ., hasChanged, (, ), ), ;, addDummyVarDeclarationsToInitialModule, (, module, ), ;, replaceOriginalModuleInputsWithSpecialized, (, ), ;, addOriginalFunctionVersionsToDependentModules, (]
[(, module, ), ;, }, private, Collection, <, SpecializationAwareCompilerPass, >, createSpecializingPasses, (, ), {, Collection, <, SpecializationAwareCompilerPass, >, passes, =]
[(, module, ), ;, }, private, Collection, <, SpecializationAwareCompilerPass, >, createSpecializingPasses, (, ), {, Collection, <, SpecializationAwareCompilerPass, >, passes, =]
[(, ), {, Collection, <, SpecializationAwareCompilerPass, >, passes, =, Lists, ., newLinkedList, (, ), ;, for, (, PassFactory, passFactory, :]
[>, passes, =, Lists, ., newLinkedList, (, ), ;, for, (, PassFactory, passFactory, :, specializationPassFactories, ), {, CompilerPass, pass, =]
[>, passes, =, Lists, ., newLinkedList, (, ), ;, for, (, PassFactory, passFactory, :, specializationPassFactories, ), {, CompilerPass, pass, =]
[., newLinkedList, (, ), ;, for, (, PassFactory, passFactory, :, specializationPassFactories, ), {, CompilerPass, pass, =, passFactory, ., create, (]
[), ;, for, (, PassFactory, passFactory, :, specializationPassFactories, ), {, CompilerPass, pass, =, passFactory, ., create, (, compiler, ), ;]
[), ;, for, (, PassFactory, passFactory, :, specializationPassFactories, ), {, CompilerPass, pass, =, passFactory, ., create, (, compiler, ), ;]
[PassFactory, passFactory, :, specializationPassFactories, ), {, CompilerPass, pass, =, passFactory, ., create, (, compiler, ), ;, Preconditions, ., checkState, (]
[PassFactory, passFactory, :, specializationPassFactories, ), {, CompilerPass, pass, =, passFactory, ., create, (, compiler, ), ;, Preconditions, ., checkState, (]
[{, CompilerPass, pass, =, passFactory, ., create, (, compiler, ), ;, Preconditions, ., checkState, (, pass, instanceof, SpecializationAwareCompilerPass, ), ;]
[{, CompilerPass, pass, =, passFactory, ., create, (, compiler, ), ;, Preconditions, ., checkState, (, pass, instanceof, SpecializationAwareCompilerPass, ), ;]
[passFactory, ., create, (, compiler, ), ;, Preconditions, ., checkState, (, pass, instanceof, SpecializationAwareCompilerPass, ), ;, passes, ., add, (]
[(, compiler, ), ;, Preconditions, ., checkState, (, pass, instanceof, SpecializationAwareCompilerPass, ), ;, passes, ., add, (, (, SpecializationAwareCompilerPass, )]
[., checkState, (, pass, instanceof, SpecializationAwareCompilerPass, ), ;, passes, ., add, (, (, SpecializationAwareCompilerPass, ), pass, ), ;, }, return]
[(, (, SpecializationAwareCompilerPass, ), pass, ), ;, }, return, passes, ;, }, private, Node, copyModuleInputs, (, JSModule, module, ), {]
[SpecializationAwareCompilerPass, ), pass, ), ;, }, return, passes, ;, }, private, Node, copyModuleInputs, (, JSModule, module, ), {, specializedInputRootsByOriginal, =]
[SpecializationAwareCompilerPass, ), pass, ), ;, }, return, passes, ;, }, private, Node, copyModuleInputs, (, JSModule, module, ), {, specializedInputRootsByOriginal, =]
[return, passes, ;, }, private, Node, copyModuleInputs, (, JSModule, module, ), {, specializedInputRootsByOriginal, =, Maps, ., newLinkedHashMap, (, ), ;]
[;, }, private, Node, copyModuleInputs, (, JSModule, module, ), {, specializedInputRootsByOriginal, =, Maps, ., newLinkedHashMap, (, ), ;, functionInfoBySpecializedFunctionNode, =]
[;, }, private, Node, copyModuleInputs, (, JSModule, module, ), {, specializedInputRootsByOriginal, =, Maps, ., newLinkedHashMap, (, ), ;, functionInfoBySpecializedFunctionNode, =]
[{, specializedInputRootsByOriginal, =, Maps, ., newLinkedHashMap, (, ), ;, functionInfoBySpecializedFunctionNode, =, Maps, ., newLinkedHashMap, (, ), ;, Node, syntheticModuleJsRoot, =]
[{, specializedInputRootsByOriginal, =, Maps, ., newLinkedHashMap, (, ), ;, functionInfoBySpecializedFunctionNode, =, Maps, ., newLinkedHashMap, (, ), ;, Node, syntheticModuleJsRoot, =]
[(, ), ;, functionInfoBySpecializedFunctionNode, =, Maps, ., newLinkedHashMap, (, ), ;, Node, syntheticModuleJsRoot, =, IR, ., block, (, ), ;]
[(, ), ;, functionInfoBySpecializedFunctionNode, =, Maps, ., newLinkedHashMap, (, ), ;, Node, syntheticModuleJsRoot, =, IR, ., block, (, ), ;]
[=, Maps, ., newLinkedHashMap, (, ), ;, Node, syntheticModuleJsRoot, =, IR, ., block, (, ), ;, syntheticModuleJsRoot, ., setIsSyntheticBlock, (]
[syntheticModuleJsRoot, =, IR, ., block, (, ), ;, syntheticModuleJsRoot, ., setIsSyntheticBlock, (, true, ), ;, for, (, CompilerInput, input, :]
[syntheticModuleJsRoot, =, IR, ., block, (, ), ;, syntheticModuleJsRoot, ., setIsSyntheticBlock, (, true, ), ;, for, (, CompilerInput, input, :]
[setIsSyntheticBlock, (, true, ), ;, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {, Node, originalInputRoot, =]
[setIsSyntheticBlock, (, true, ), ;, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {, Node, originalInputRoot, =]
[;, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {, Node, originalInputRoot, =, input, ., getAstRoot, (]
[module, ., getInputs, (, ), ), {, Node, originalInputRoot, =, input, ., getAstRoot, (, compiler, ), ;, Node, copiedInputRoot, =]
[module, ., getInputs, (, ), ), {, Node, originalInputRoot, =, input, ., getAstRoot, (, compiler, ), ;, Node, copiedInputRoot, =]
[{, Node, originalInputRoot, =, input, ., getAstRoot, (, compiler, ), ;, Node, copiedInputRoot, =, originalInputRoot, ., cloneTree, (, ), ;]
[{, Node, originalInputRoot, =, input, ., getAstRoot, (, compiler, ), ;, Node, copiedInputRoot, =, originalInputRoot, ., cloneTree, (, ), ;]
[input, ., getAstRoot, (, compiler, ), ;, Node, copiedInputRoot, =, originalInputRoot, ., cloneTree, (, ), ;, copiedInputRoot, ., copyInformationFromForTree, (]
[(, compiler, ), ;, Node, copiedInputRoot, =, originalInputRoot, ., cloneTree, (, ), ;, copiedInputRoot, ., copyInformationFromForTree, (, originalInputRoot, ), ;]
[(, compiler, ), ;, Node, copiedInputRoot, =, originalInputRoot, ., cloneTree, (, ), ;, copiedInputRoot, ., copyInformationFromForTree, (, originalInputRoot, ), ;]
[Node, copiedInputRoot, =, originalInputRoot, ., cloneTree, (, ), ;, copiedInputRoot, ., copyInformationFromForTree, (, originalInputRoot, ), ;, specializedInputRootsByOriginal, ., put, (]
[=, originalInputRoot, ., cloneTree, (, ), ;, copiedInputRoot, ., copyInformationFromForTree, (, originalInputRoot, ), ;, specializedInputRootsByOriginal, ., put, (, originalInputRoot, ,]
[cloneTree, (, ), ;, copiedInputRoot, ., copyInformationFromForTree, (, originalInputRoot, ), ;, specializedInputRootsByOriginal, ., put, (, originalInputRoot, ,, copiedInputRoot, ), ;]
[), ;, copiedInputRoot, ., copyInformationFromForTree, (, originalInputRoot, ), ;, specializedInputRootsByOriginal, ., put, (, originalInputRoot, ,, copiedInputRoot, ), ;, matchTopLevelFunctions, (]
[copiedInputRoot, ., copyInformationFromForTree, (, originalInputRoot, ), ;, specializedInputRootsByOriginal, ., put, (, originalInputRoot, ,, copiedInputRoot, ), ;, matchTopLevelFunctions, (, originalInputRoot, ,]
[(, originalInputRoot, ), ;, specializedInputRootsByOriginal, ., put, (, originalInputRoot, ,, copiedInputRoot, ), ;, matchTopLevelFunctions, (, originalInputRoot, ,, copiedInputRoot, ), ;]
[(, originalInputRoot, ), ;, specializedInputRootsByOriginal, ., put, (, originalInputRoot, ,, copiedInputRoot, ), ;, matchTopLevelFunctions, (, originalInputRoot, ,, copiedInputRoot, ), ;]
[specializedInputRootsByOriginal, ., put, (, originalInputRoot, ,, copiedInputRoot, ), ;, matchTopLevelFunctions, (, originalInputRoot, ,, copiedInputRoot, ), ;, syntheticModuleJsRoot, ., addChildToBack, (]
[), ;, matchTopLevelFunctions, (, originalInputRoot, ,, copiedInputRoot, ), ;, syntheticModuleJsRoot, ., addChildToBack, (, copiedInputRoot, ), ;, }, Node, syntheticExternsAndJsRoot, =]
[), ;, matchTopLevelFunctions, (, originalInputRoot, ,, copiedInputRoot, ), ;, syntheticModuleJsRoot, ., addChildToBack, (, copiedInputRoot, ), ;, }, Node, syntheticExternsAndJsRoot, =]
[copiedInputRoot, ), ;, syntheticModuleJsRoot, ., addChildToBack, (, copiedInputRoot, ), ;, }, Node, syntheticExternsAndJsRoot, =, IR, ., block, (, ), ;]
[copiedInputRoot, ), ;, syntheticModuleJsRoot, ., addChildToBack, (, copiedInputRoot, ), ;, }, Node, syntheticExternsAndJsRoot, =, IR, ., block, (, ), ;]
[., addChildToBack, (, copiedInputRoot, ), ;, }, Node, syntheticExternsAndJsRoot, =, IR, ., block, (, ), ;, syntheticExternsAndJsRoot, ., addChildToBack, (]
[), ;, }, Node, syntheticExternsAndJsRoot, =, IR, ., block, (, ), ;, syntheticExternsAndJsRoot, ., addChildToBack, (, syntheticModuleJsRoot, ), ;, return]
[addChildToBack, (, syntheticModuleJsRoot, ), ;, return, syntheticModuleJsRoot, ;, }, private, void, matchTopLevelFunctions, (, Node, original, ,, Node, toBeSpecialized, ), {]
[addChildToBack, (, syntheticModuleJsRoot, ), ;, return, syntheticModuleJsRoot, ;, }, private, void, matchTopLevelFunctions, (, Node, original, ,, Node, toBeSpecialized, ), {]
[new, NodeMatcher, (, ), {, @, Override, public, void, reportMatch, (, Node, original, ,, Node, specialized, ), {, if, (]
[new, NodeMatcher, (, ), {, @, Override, public, void, reportMatch, (, Node, original, ,, Node, specialized, ), {, if, (]
[(, Node, original, ,, Node, specialized, ), {, if, (, original, ., isFunction, (, ), ), {, OriginalFunctionInformation, functionInfo, =]
[,, Node, specialized, ), {, if, (, original, ., isFunction, (, ), ), {, OriginalFunctionInformation, functionInfo, =, new, OriginalFunctionInformation, (]
[), {, if, (, original, ., isFunction, (, ), ), {, OriginalFunctionInformation, functionInfo, =, new, OriginalFunctionInformation, (, original, ), ;]
[), {, if, (, original, ., isFunction, (, ), ), {, OriginalFunctionInformation, functionInfo, =, new, OriginalFunctionInformation, (, original, ), ;]
[original, ., isFunction, (, ), ), {, OriginalFunctionInformation, functionInfo, =, new, OriginalFunctionInformation, (, original, ), ;, functionInfoBySpecializedFunctionNode, ., put, (]
[isFunction, (, ), ), {, OriginalFunctionInformation, functionInfo, =, new, OriginalFunctionInformation, (, original, ), ;, functionInfoBySpecializedFunctionNode, ., put, (, specialized, ,]
[,, functionInfo, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, Node, n1, ,, Node, n2, ), {, return]
[functionInfo, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, Node, n1, ,, Node, n2, ), {, return, !]
[functionInfo, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, Node, n1, ,, Node, n2, ), {, return, !]
[Node, n1, ,, Node, n2, ), {, return, !, n1, ., isFunction, (, ), ;, }, }, ., match, (]
[,, Node, n2, ), {, return, !, n1, ., isFunction, (, ), ;, }, }, ., match, (, original, ,]
[., match, (, original, ,, toBeSpecialized, ), ;, }, private, void, replaceOriginalModuleInputsWithSpecialized, (, ), {, for, (, Node, original, :]
[., match, (, original, ,, toBeSpecialized, ), ;, }, private, void, replaceOriginalModuleInputsWithSpecialized, (, ), {, for, (, Node, original, :]
[void, replaceOriginalModuleInputsWithSpecialized, (, ), {, for, (, Node, original, :, specializedInputRootsByOriginal, ., keySet, (, ), ), {, Node, specialized, =]
[void, replaceOriginalModuleInputsWithSpecialized, (, ), {, for, (, Node, original, :, specializedInputRootsByOriginal, ., keySet, (, ), ), {, Node, specialized, =]
[{, for, (, Node, original, :, specializedInputRootsByOriginal, ., keySet, (, ), ), {, Node, specialized, =, specializedInputRootsByOriginal, ., get, (]
[Node, original, :, specializedInputRootsByOriginal, ., keySet, (, ), ), {, Node, specialized, =, specializedInputRootsByOriginal, ., get, (, original, ), ;]
[Node, original, :, specializedInputRootsByOriginal, ., keySet, (, ), ), {, Node, specialized, =, specializedInputRootsByOriginal, ., get, (, original, ), ;]
[=, specializedInputRootsByOriginal, ., get, (, original, ), ;, original, ., removeChildren, (, ), ;, List, <, Node, >, specializedChildren, =]
[=, specializedInputRootsByOriginal, ., get, (, original, ), ;, original, ., removeChildren, (, ), ;, List, <, Node, >, specializedChildren, =]
[original, ., removeChildren, (, ), ;, List, <, Node, >, specializedChildren, =, Lists, ., newLinkedList, (, ), ;, while, (]
[original, ., removeChildren, (, ), ;, List, <, Node, >, specializedChildren, =, Lists, ., newLinkedList, (, ), ;, while, (]
[original, ., removeChildren, (, ), ;, List, <, Node, >, specializedChildren, =, Lists, ., newLinkedList, (, ), ;, while, (]
[List, <, Node, >, specializedChildren, =, Lists, ., newLinkedList, (, ), ;, while, (, specialized, ., getFirstChild, (, ), !=]
[>, specializedChildren, =, Lists, ., newLinkedList, (, ), ;, while, (, specialized, ., getFirstChild, (, ), !=, null, ), {]
[>, specializedChildren, =, Lists, ., newLinkedList, (, ), ;, while, (, specialized, ., getFirstChild, (, ), !=, null, ), {]
[., newLinkedList, (, ), ;, while, (, specialized, ., getFirstChild, (, ), !=, null, ), {, original, ., addChildToBack, (]
[., newLinkedList, (, ), ;, while, (, specialized, ., getFirstChild, (, ), !=, null, ), {, original, ., addChildToBack, (]
[(, ), ), ;, }, }, }, private, void, addDummyVarDeclarationsToInitialModule, (, JSModule, module, ), {, for, (, Node, modifiedFunction, :]
[(, ), ), ;, }, }, }, private, void, addDummyVarDeclarationsToInitialModule, (, JSModule, module, ), {, for, (, Node, modifiedFunction, :]
[addDummyVarDeclarationsToInitialModule, (, JSModule, module, ), {, for, (, Node, modifiedFunction, :, functionInfoBySpecializedFunctionNode, ., keySet, (, ), ), {, if, (]
[addDummyVarDeclarationsToInitialModule, (, JSModule, module, ), {, for, (, Node, modifiedFunction, :, functionInfoBySpecializedFunctionNode, ., keySet, (, ), ), {, if, (]
[addDummyVarDeclarationsToInitialModule, (, JSModule, module, ), {, for, (, Node, modifiedFunction, :, functionInfoBySpecializedFunctionNode, ., keySet, (, ), ), {, if, (]
[Node, modifiedFunction, :, functionInfoBySpecializedFunctionNode, ., keySet, (, ), ), {, if, (, specializationState, ., getRemovedFunctions, (, ), ., contains, (]
[), ), {, if, (, specializationState, ., getRemovedFunctions, (, ), ., contains, (, modifiedFunction, ), ), {, OriginalFunctionInformation, originalInfo, =]
[), ), {, if, (, specializationState, ., getRemovedFunctions, (, ), ., contains, (, modifiedFunction, ), ), {, OriginalFunctionInformation, originalInfo, =]
[(, specializationState, ., getRemovedFunctions, (, ), ., contains, (, modifiedFunction, ), ), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (]
[), ., contains, (, modifiedFunction, ), ), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, ), ;, if, (]
[), ., contains, (, modifiedFunction, ), ), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, ), ;, if, (]
[), ., contains, (, modifiedFunction, ), ), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, ), ;, if, (]
[), ., contains, (, modifiedFunction, ), ), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, ), ;, if, (]
[modifiedFunction, ), ), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, ), ;, if, (, originalInfo, ., name, !=]
[), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, ), ;, if, (, originalInfo, ., name, !=, null, &&]
[), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, ), ;, if, (, originalInfo, ., name, !=, null, &&]
[), ;, if, (, originalInfo, ., name, !=, null, &&, originalInfo, ., originalWasDeclaration, (, ), ), {, Node, block, =]
[), ;, if, (, originalInfo, ., name, !=, null, &&, originalInfo, ., originalWasDeclaration, (, ), ), {, Node, block, =]
[), ;, if, (, originalInfo, ., name, !=, null, &&, originalInfo, ., originalWasDeclaration, (, ), ), {, Node, block, =]
[name, !=, null, &&, originalInfo, ., originalWasDeclaration, (, ), ), {, Node, block, =, specializationState, ., removedFunctionToBlock, ., get, (]
[., originalWasDeclaration, (, ), ), {, Node, block, =, specializationState, ., removedFunctionToBlock, ., get, (, modifiedFunction, ), ;, if, (]
[., originalWasDeclaration, (, ), ), {, Node, block, =, specializationState, ., removedFunctionToBlock, ., get, (, modifiedFunction, ), ;, if, (]
[(, ), ), {, Node, block, =, specializationState, ., removedFunctionToBlock, ., get, (, modifiedFunction, ), ;, if, (, block, !=]
[=, specializationState, ., removedFunctionToBlock, ., get, (, modifiedFunction, ), ;, if, (, block, !=, null, ), {, Node, originalRoot, =]
[=, specializationState, ., removedFunctionToBlock, ., get, (, modifiedFunction, ), ;, if, (, block, !=, null, ), {, Node, originalRoot, =]
[., get, (, modifiedFunction, ), ;, if, (, block, !=, null, ), {, Node, originalRoot, =, specializedInputRootsByOriginal, ., get, (]
[modifiedFunction, ), ;, if, (, block, !=, null, ), {, Node, originalRoot, =, specializedInputRootsByOriginal, ., get, (, block, ), ;]
[modifiedFunction, ), ;, if, (, block, !=, null, ), {, Node, originalRoot, =, specializedInputRootsByOriginal, ., get, (, block, ), ;]
[(, block, !=, null, ), {, Node, originalRoot, =, specializedInputRootsByOriginal, ., get, (, block, ), ;, block, ., addChildrenToBack, (]
[(, block, !=, null, ), {, Node, originalRoot, =, specializedInputRootsByOriginal, ., get, (, block, ), ;, block, ., addChildrenToBack, (]
[), ;, }, }, }, }, }, private, void, addOriginalFunctionVersionsToDependentModules, (, JSModule, module, ), {, for, (, JSModule, directDependent, :]
[}, }, }, }, }, private, void, addOriginalFunctionVersionsToDependentModules, (, JSModule, module, ), {, for, (, JSModule, directDependent, :, getDirectDependents, (]
[addOriginalFunctionVersionsToDependentModules, (, JSModule, module, ), {, for, (, JSModule, directDependent, :, getDirectDependents, (, module, ), ), {, CompilerInput, firstInput, =]
[addOriginalFunctionVersionsToDependentModules, (, JSModule, module, ), {, for, (, JSModule, directDependent, :, getDirectDependents, (, module, ), ), {, CompilerInput, firstInput, =]
[addOriginalFunctionVersionsToDependentModules, (, JSModule, module, ), {, for, (, JSModule, directDependent, :, getDirectDependents, (, module, ), ), {, CompilerInput, firstInput, =]
[JSModule, directDependent, :, getDirectDependents, (, module, ), ), {, CompilerInput, firstInput, =, directDependent, ., getInputs, (, ), ., get, (]
[), ), {, CompilerInput, firstInput, =, directDependent, ., getInputs, (, ), ., get, (, 0, ), ;, Node, firstInputRootNode, =]
[), ), {, CompilerInput, firstInput, =, directDependent, ., getInputs, (, ), ., get, (, 0, ), ;, Node, firstInputRootNode, =]
[firstInput, =, directDependent, ., getInputs, (, ), ., get, (, 0, ), ;, Node, firstInputRootNode, =, firstInput, ., getAstRoot, (]
[(, 0, ), ;, Node, firstInputRootNode, =, firstInput, ., getAstRoot, (, compiler, ), ;, List, <, Node, >, possiblyModifiedFunctions, =]
[(, 0, ), ;, Node, firstInputRootNode, =, firstInput, ., getAstRoot, (, compiler, ), ;, List, <, Node, >, possiblyModifiedFunctions, =]
[Node, firstInputRootNode, =, firstInput, ., getAstRoot, (, compiler, ), ;, List, <, Node, >, possiblyModifiedFunctions, =, Lists, ., newArrayList, (]
[Node, firstInputRootNode, =, firstInput, ., getAstRoot, (, compiler, ), ;, List, <, Node, >, possiblyModifiedFunctions, =, Lists, ., newArrayList, (]
[compiler, ), ;, List, <, Node, >, possiblyModifiedFunctions, =, Lists, ., newArrayList, (, functionInfoBySpecializedFunctionNode, ., keySet, (, ), ), ;]
[compiler, ), ;, List, <, Node, >, possiblyModifiedFunctions, =, Lists, ., newArrayList, (, functionInfoBySpecializedFunctionNode, ., keySet, (, ), ), ;]
[<, Node, >, possiblyModifiedFunctions, =, Lists, ., newArrayList, (, functionInfoBySpecializedFunctionNode, ., keySet, (, ), ), ;, Collections, ., reverse, (]
[(, functionInfoBySpecializedFunctionNode, ., keySet, (, ), ), ;, Collections, ., reverse, (, possiblyModifiedFunctions, ), ;, for, (, Node, modifiedFunction, :]
[), ;, Collections, ., reverse, (, possiblyModifiedFunctions, ), ;, for, (, Node, modifiedFunction, :, possiblyModifiedFunctions, ), {, boolean, declarationWasSpecialized, =]
[), ;, Collections, ., reverse, (, possiblyModifiedFunctions, ), ;, for, (, Node, modifiedFunction, :, possiblyModifiedFunctions, ), {, boolean, declarationWasSpecialized, =]
[), ;, Collections, ., reverse, (, possiblyModifiedFunctions, ), ;, for, (, Node, modifiedFunction, :, possiblyModifiedFunctions, ), {, boolean, declarationWasSpecialized, =]
[;, for, (, Node, modifiedFunction, :, possiblyModifiedFunctions, ), {, boolean, declarationWasSpecialized, =, specializationState, ., getSpecializedFunctions, (, ), ., contains, (]
[possiblyModifiedFunctions, ), {, boolean, declarationWasSpecialized, =, specializationState, ., getSpecializedFunctions, (, ), ., contains, (, modifiedFunction, ), ;, boolean, declarationWasRemoved, =]
[possiblyModifiedFunctions, ), {, boolean, declarationWasSpecialized, =, specializationState, ., getSpecializedFunctions, (, ), ., contains, (, modifiedFunction, ), ;, boolean, declarationWasRemoved, =]
[possiblyModifiedFunctions, ), {, boolean, declarationWasSpecialized, =, specializationState, ., getSpecializedFunctions, (, ), ., contains, (, modifiedFunction, ), ;, boolean, declarationWasRemoved, =]
[getSpecializedFunctions, (, ), ., contains, (, modifiedFunction, ), ;, boolean, declarationWasRemoved, =, specializationState, ., getRemovedFunctions, (, ), ., contains, (]
[(, modifiedFunction, ), ;, boolean, declarationWasRemoved, =, specializationState, ., getRemovedFunctions, (, ), ., contains, (, modifiedFunction, ), ;, if, (]
[(, modifiedFunction, ), ;, boolean, declarationWasRemoved, =, specializationState, ., getRemovedFunctions, (, ), ., contains, (, modifiedFunction, ), ;, if, (]
[), ;, boolean, declarationWasRemoved, =, specializationState, ., getRemovedFunctions, (, ), ., contains, (, modifiedFunction, ), ;, if, (, declarationWasSpecialized, ||]
[., getRemovedFunctions, (, ), ., contains, (, modifiedFunction, ), ;, if, (, declarationWasSpecialized, ||, declarationWasRemoved, ), {, OriginalFunctionInformation, originalInfo, =]
[., getRemovedFunctions, (, ), ., contains, (, modifiedFunction, ), ;, if, (, declarationWasSpecialized, ||, declarationWasRemoved, ), {, OriginalFunctionInformation, originalInfo, =]
[., contains, (, modifiedFunction, ), ;, if, (, declarationWasSpecialized, ||, declarationWasRemoved, ), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (]
[;, if, (, declarationWasSpecialized, ||, declarationWasRemoved, ), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, ), ;, if, (]
[;, if, (, declarationWasSpecialized, ||, declarationWasRemoved, ), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, ), ;, if, (]
[;, if, (, declarationWasSpecialized, ||, declarationWasRemoved, ), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, ), ;, if, (]
[||, declarationWasRemoved, ), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, ), ;, if, (, originalInfo, ., name, !=]
[=, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, ), ;, if, (, originalInfo, ., name, !=, null, ), {, Node, newDefinition, =]
[=, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, ), ;, if, (, originalInfo, ., name, !=, null, ), {, Node, newDefinition, =]
[), ;, if, (, originalInfo, ., name, !=, null, ), {, Node, newDefinition, =, originalInfo, ., generateFixupDefinition, (, ), ;]
[), ;, if, (, originalInfo, ., name, !=, null, ), {, Node, newDefinition, =, originalInfo, ., generateFixupDefinition, (, ), ;]
[originalInfo, ., name, !=, null, ), {, Node, newDefinition, =, originalInfo, ., generateFixupDefinition, (, ), ;, firstInputRootNode, ., addChildrenToFront, (]
[}, }, }, public, Collection, <, JSModule, >, getDirectDependents, (, JSModule, module, ), {, Set, <, JSModule, >, directDependents, =]
[}, }, }, public, Collection, <, JSModule, >, getDirectDependents, (, JSModule, module, ), {, Set, <, JSModule, >, directDependents, =]
[module, ), {, Set, <, JSModule, >, directDependents, =, Sets, ., newHashSet, (, ), ;, for, (, JSModule, possibleDependent, :]
[module, ), {, Set, <, JSModule, >, directDependents, =, Sets, ., newHashSet, (, ), ;, for, (, JSModule, possibleDependent, :]
[module, ), {, Set, <, JSModule, >, directDependents, =, Sets, ., newHashSet, (, ), ;, for, (, JSModule, possibleDependent, :]
[), ;, for, (, JSModule, possibleDependent, :, compiler, ., getModuleGraph, (, ), ., getAllModules, (, ), ), {, if, (]
[), ;, for, (, JSModule, possibleDependent, :, compiler, ., getModuleGraph, (, ), ., getAllModules, (, ), ), {, if, (]
[), ;, for, (, JSModule, possibleDependent, :, compiler, ., getModuleGraph, (, ), ., getAllModules, (, ), ), {, if, (]
[., getModuleGraph, (, ), ., getAllModules, (, ), ), {, if, (, possibleDependent, ., getDependencies, (, ), ., contains, (]
[., getAllModules, (, ), ), {, if, (, possibleDependent, ., getDependencies, (, ), ., contains, (, module, ), ), {]
[., getAllModules, (, ), ), {, if, (, possibleDependent, ., getDependencies, (, ), ., contains, (, module, ), ), {]
[), {, if, (, possibleDependent, ., getDependencies, (, ), ., contains, (, module, ), ), {, directDependents, ., add, (]
[getDependencies, (, ), ., contains, (, module, ), ), {, directDependents, ., add, (, possibleDependent, ), ;, }, }, return]
[directDependents, ;, }, private, abstract, static, class, NodeMatcher, {, public, void, match, (, Node, ast1, ,, Node, ast2, ), {]
[}, private, abstract, static, class, NodeMatcher, {, public, void, match, (, Node, ast1, ,, Node, ast2, ), {, reportMatch, (]
[abstract, static, class, NodeMatcher, {, public, void, match, (, Node, ast1, ,, Node, ast2, ), {, reportMatch, (, ast1, ,]
[public, void, match, (, Node, ast1, ,, Node, ast2, ), {, reportMatch, (, ast1, ,, ast2, ), ;, if, (]
[match, (, Node, ast1, ,, Node, ast2, ), {, reportMatch, (, ast1, ,, ast2, ), ;, if, (, shouldTraverse, (]
[Node, ast1, ,, Node, ast2, ), {, reportMatch, (, ast1, ,, ast2, ), ;, if, (, shouldTraverse, (, ast1, ,]
[reportMatch, (, ast1, ,, ast2, ), ;, if, (, shouldTraverse, (, ast1, ,, ast2, ), ), {, Node, childOf1, =]
[reportMatch, (, ast1, ,, ast2, ), ;, if, (, shouldTraverse, (, ast1, ,, ast2, ), ), {, Node, childOf1, =]
[shouldTraverse, (, ast1, ,, ast2, ), ), {, Node, childOf1, =, ast1, ., getFirstChild, (, ), ;, Node, childOf2, =]
[shouldTraverse, (, ast1, ,, ast2, ), ), {, Node, childOf1, =, ast1, ., getFirstChild, (, ), ;, Node, childOf2, =]
[Node, childOf1, =, ast1, ., getFirstChild, (, ), ;, Node, childOf2, =, ast2, ., getFirstChild, (, ), ;, while, (]
[Node, childOf1, =, ast1, ., getFirstChild, (, ), ;, Node, childOf2, =, ast2, ., getFirstChild, (, ), ;, while, (]
[=, ast1, ., getFirstChild, (, ), ;, Node, childOf2, =, ast2, ., getFirstChild, (, ), ;, while, (, childOf1, !=]
[getFirstChild, (, ), ;, Node, childOf2, =, ast2, ., getFirstChild, (, ), ;, while, (, childOf1, !=, null, ), {]
[), ;, Node, childOf2, =, ast2, ., getFirstChild, (, ), ;, while, (, childOf1, !=, null, ), {, match, (]
[Node, childOf2, =, ast2, ., getFirstChild, (, ), ;, while, (, childOf1, !=, null, ), {, match, (, childOf1, ,]
[ast2, ., getFirstChild, (, ), ;, while, (, childOf1, !=, null, ), {, match, (, childOf1, ,, childOf2, ), ;]
[getFirstChild, (, ), ;, while, (, childOf1, !=, null, ), {, match, (, childOf1, ,, childOf2, ), ;, childOf1, =]
[getFirstChild, (, ), ;, while, (, childOf1, !=, null, ), {, match, (, childOf1, ,, childOf2, ), ;, childOf1, =]
[childOf1, !=, null, ), {, match, (, childOf1, ,, childOf2, ), ;, childOf1, =, childOf1, ., getNext, (, ), ;]
[null, ), {, match, (, childOf1, ,, childOf2, ), ;, childOf1, =, childOf1, ., getNext, (, ), ;, childOf2, =]
[null, ), {, match, (, childOf1, ,, childOf2, ), ;, childOf1, =, childOf1, ., getNext, (, ), ;, childOf2, =]
[(, Node, n1, ,, Node, n2, ), ;, public, boolean, shouldTraverse, (, Node, node1, ,, Node, n2, ), {, return]
[;, private, boolean, isAssignFunction, ;, private, boolean, assignHasVar, ;, private, Node, originalFunctionCopy, ;, public, OriginalFunctionInformation, (, Node, originalFunction, ), {]
[boolean, isAssignFunction, ;, private, boolean, assignHasVar, ;, private, Node, originalFunctionCopy, ;, public, OriginalFunctionInformation, (, Node, originalFunction, ), {, name, =]
[boolean, isAssignFunction, ;, private, boolean, assignHasVar, ;, private, Node, originalFunctionCopy, ;, public, OriginalFunctionInformation, (, Node, originalFunction, ), {, name, =]
[boolean, assignHasVar, ;, private, Node, originalFunctionCopy, ;, public, OriginalFunctionInformation, (, Node, originalFunction, ), {, name, =, NodeUtil, ., getFunctionName, (]
[private, Node, originalFunctionCopy, ;, public, OriginalFunctionInformation, (, Node, originalFunction, ), {, name, =, NodeUtil, ., getFunctionName, (, originalFunction, ), ;]
[originalFunctionCopy, ;, public, OriginalFunctionInformation, (, Node, originalFunction, ), {, name, =, NodeUtil, ., getFunctionName, (, originalFunction, ), ;, originalFunctionCopy, =]
[originalFunctionCopy, ;, public, OriginalFunctionInformation, (, Node, originalFunction, ), {, name, =, NodeUtil, ., getFunctionName, (, originalFunction, ), ;, originalFunctionCopy, =]
[originalFunction, ), {, name, =, NodeUtil, ., getFunctionName, (, originalFunction, ), ;, originalFunctionCopy, =, originalFunction, ., cloneTree, (, ), ;]
[originalFunction, ), {, name, =, NodeUtil, ., getFunctionName, (, originalFunction, ), ;, originalFunctionCopy, =, originalFunction, ., cloneTree, (, ), ;]
[=, NodeUtil, ., getFunctionName, (, originalFunction, ), ;, originalFunctionCopy, =, originalFunction, ., cloneTree, (, ), ;, originalFunctionCopy, ., copyInformationFromForTree, (]
[), ;, originalFunctionCopy, =, originalFunction, ., cloneTree, (, ), ;, originalFunctionCopy, ., copyInformationFromForTree, (, originalFunction, ), ;, Node, originalParent, =]
[), ;, originalFunctionCopy, =, originalFunction, ., cloneTree, (, ), ;, originalFunctionCopy, ., copyInformationFromForTree, (, originalFunction, ), ;, Node, originalParent, =]
[cloneTree, (, ), ;, originalFunctionCopy, ., copyInformationFromForTree, (, originalFunction, ), ;, Node, originalParent, =, originalFunction, ., getParent, (, ), ;]
[), ;, originalFunctionCopy, ., copyInformationFromForTree, (, originalFunction, ), ;, Node, originalParent, =, originalFunction, ., getParent, (, ), ;, isAssignFunction, =]
[), ;, originalFunctionCopy, ., copyInformationFromForTree, (, originalFunction, ), ;, Node, originalParent, =, originalFunction, ., getParent, (, ), ;, isAssignFunction, =]
[), ;, originalFunctionCopy, ., copyInformationFromForTree, (, originalFunction, ), ;, Node, originalParent, =, originalFunction, ., getParent, (, ), ;, isAssignFunction, =]
[originalFunction, ), ;, Node, originalParent, =, originalFunction, ., getParent, (, ), ;, isAssignFunction, =, originalParent, ., isAssign, (, ), ||]
[originalFunction, ), ;, Node, originalParent, =, originalFunction, ., getParent, (, ), ;, isAssignFunction, =, originalParent, ., isAssign, (, ), ||]
[originalFunction, ., getParent, (, ), ;, isAssignFunction, =, originalParent, ., isAssign, (, ), ||, originalParent, ., isName, (, ), ;]
[getParent, (, ), ;, isAssignFunction, =, originalParent, ., isAssign, (, ), ||, originalParent, ., isName, (, ), ;, assignHasVar, =]
[getParent, (, ), ;, isAssignFunction, =, originalParent, ., isAssign, (, ), ||, originalParent, ., isName, (, ), ;, assignHasVar, =]
[), ;, isAssignFunction, =, originalParent, ., isAssign, (, ), ||, originalParent, ., isName, (, ), ;, assignHasVar, =, isAssignFunction, &&]
[), ;, isAssignFunction, =, originalParent, ., isAssign, (, ), ||, originalParent, ., isName, (, ), ;, assignHasVar, =, isAssignFunction, &&]
[), ;, isAssignFunction, =, originalParent, ., isAssign, (, ), ||, originalParent, ., isName, (, ), ;, assignHasVar, =, isAssignFunction, &&]
[originalParent, ., getParent, (, ), ., isVar, (, ), ;, }, private, Node, copiedOriginalFunction, (, ), {, Node, copy, =]
[originalParent, ., getParent, (, ), ., isVar, (, ), ;, }, private, Node, copiedOriginalFunction, (, ), {, Node, copy, =]
[isVar, (, ), ;, }, private, Node, copiedOriginalFunction, (, ), {, Node, copy, =, originalFunctionCopy, ., cloneTree, (, ), ;]
[isVar, (, ), ;, }, private, Node, copiedOriginalFunction, (, ), {, Node, copy, =, originalFunctionCopy, ., cloneTree, (, ), ;]
[}, private, Node, copiedOriginalFunction, (, ), {, Node, copy, =, originalFunctionCopy, ., cloneTree, (, ), ;, copy, ., copyInformationFromForTree, (]
[(, ), {, Node, copy, =, originalFunctionCopy, ., cloneTree, (, ), ;, copy, ., copyInformationFromForTree, (, originalFunctionCopy, ), ;, return]
[), ;, copy, ., copyInformationFromForTree, (, originalFunctionCopy, ), ;, return, copy, ;, }, private, boolean, originalWasDeclaration, (, ), {, return]
[), ;, copy, ., copyInformationFromForTree, (, originalFunctionCopy, ), ;, return, copy, ;, }, private, boolean, originalWasDeclaration, (, ), {, return]
[;, copy, ., copyInformationFromForTree, (, originalFunctionCopy, ), ;, return, copy, ;, }, private, boolean, originalWasDeclaration, (, ), {, return, (]
[copy, ., copyInformationFromForTree, (, originalFunctionCopy, ), ;, return, copy, ;, }, private, boolean, originalWasDeclaration, (, ), {, return, (, !]
[(, originalFunctionCopy, ), ;, return, copy, ;, }, private, boolean, originalWasDeclaration, (, ), {, return, (, !, isAssignFunction, ), ||]
[originalFunctionCopy, ), ;, return, copy, ;, }, private, boolean, originalWasDeclaration, (, ), {, return, (, !, isAssignFunction, ), ||, (]
[return, (, !, isAssignFunction, ), ||, (, assignHasVar, ), ;, }, private, Node, generateFixupDefinition, (, ), {, Node, functionCopy, =]
[;, }, private, Node, generateFixupDefinition, (, ), {, Node, functionCopy, =, copiedOriginalFunction, (, ), ;, Node, nameNode, ;, if, (]
[Node, generateFixupDefinition, (, ), {, Node, functionCopy, =, copiedOriginalFunction, (, ), ;, Node, nameNode, ;, if, (, isAssignFunction, ), {]
[(, ), {, Node, functionCopy, =, copiedOriginalFunction, (, ), ;, Node, nameNode, ;, if, (, isAssignFunction, ), {, nameNode, =]
[(, ), {, Node, functionCopy, =, copiedOriginalFunction, (, ), ;, Node, nameNode, ;, if, (, isAssignFunction, ), {, nameNode, =]
[functionCopy, =, copiedOriginalFunction, (, ), ;, Node, nameNode, ;, if, (, isAssignFunction, ), {, nameNode, =, NodeUtil, ., newQualifiedNameNode, (]
[functionCopy, =, copiedOriginalFunction, (, ), ;, Node, nameNode, ;, if, (, isAssignFunction, ), {, nameNode, =, NodeUtil, ., newQualifiedNameNode, (]
[Node, nameNode, ;, if, (, isAssignFunction, ), {, nameNode, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[;, if, (, isAssignFunction, ), {, nameNode, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, name, ,]
[(, isAssignFunction, ), {, nameNode, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, name, ,, functionCopy, ,]
[NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, name, ,, functionCopy, ,, name, ), ;, }, else, {]
[newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, name, ,, functionCopy, ,, name, ), ;, }, else, {, nameNode, =]
[newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, name, ,, functionCopy, ,, name, ), ;, }, else, {, nameNode, =]
[), ,, name, ,, functionCopy, ,, name, ), ;, }, else, {, nameNode, =, functionCopy, ., getFirstChild, (, ), ;]
[), ,, name, ,, functionCopy, ,, name, ), ;, }, else, {, nameNode, =, functionCopy, ., getFirstChild, (, ), ;]
[functionCopy, ,, name, ), ;, }, else, {, nameNode, =, functionCopy, ., getFirstChild, (, ), ;, functionCopy, ., replaceChild, (]
[name, ), ;, }, else, {, nameNode, =, functionCopy, ., getFirstChild, (, ), ;, functionCopy, ., replaceChild, (, nameNode, ,]
[name, ), ;, }, else, {, nameNode, =, functionCopy, ., getFirstChild, (, ), ;, functionCopy, ., replaceChild, (, nameNode, ,]
[else, {, nameNode, =, functionCopy, ., getFirstChild, (, ), ;, functionCopy, ., replaceChild, (, nameNode, ,, NodeUtil, ., newName, (]
[else, {, nameNode, =, functionCopy, ., getFirstChild, (, ), ;, functionCopy, ., replaceChild, (, nameNode, ,, NodeUtil, ., newName, (]
[getFirstChild, (, ), ;, functionCopy, ., replaceChild, (, nameNode, ,, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,]
[), ;, functionCopy, ., replaceChild, (, nameNode, ,, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, "", ,]
[NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, "", ,, nameNode, ), ), ;, }, Node, assignment, =]
[NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, "", ,, nameNode, ), ), ;, }, Node, assignment, =]
[compiler, ., getCodingConvention, (, ), ,, "", ,, nameNode, ), ), ;, }, Node, assignment, =, IR, ., assign, (]
[getCodingConvention, (, ), ,, "", ,, nameNode, ), ), ;, }, Node, assignment, =, IR, ., assign, (, nameNode, ,]
[,, "", ,, nameNode, ), ), ;, }, Node, assignment, =, IR, ., assign, (, nameNode, ,, functionCopy, ), ;]
[,, "", ,, nameNode, ), ), ;, }, Node, assignment, =, IR, ., assign, (, nameNode, ,, functionCopy, ), ;]
[), ), ;, }, Node, assignment, =, IR, ., assign, (, nameNode, ,, functionCopy, ), ;, assignment, ., copyInformationFrom, (]
[Node, assignment, =, IR, ., assign, (, nameNode, ,, functionCopy, ), ;, assignment, ., copyInformationFrom, (, functionCopy, ), ;, return]
[Node, assignment, =, IR, ., assign, (, nameNode, ,, functionCopy, ), ;, assignment, ., copyInformationFrom, (, functionCopy, ), ;, return]
[., assign, (, nameNode, ,, functionCopy, ), ;, assignment, ., copyInformationFrom, (, functionCopy, ), ;, return, NodeUtil, ., newExpr, (]
[), ;, return, NodeUtil, ., newExpr, (, assignment, ), ;, }, private, Node, generateDummyDeclaration, (, ), {, Node, declaration, =]
[), ;, return, NodeUtil, ., newExpr, (, assignment, ), ;, }, private, Node, generateDummyDeclaration, (, ), {, Node, declaration, =]
[., newExpr, (, assignment, ), ;, }, private, Node, generateDummyDeclaration, (, ), {, Node, declaration, =, NodeUtil, ., newVarNode, (]
[(, assignment, ), ;, }, private, Node, generateDummyDeclaration, (, ), {, Node, declaration, =, NodeUtil, ., newVarNode, (, name, ,]
[;, }, private, Node, generateDummyDeclaration, (, ), {, Node, declaration, =, NodeUtil, ., newVarNode, (, name, ,, null, ), ;]
[;, }, private, Node, generateDummyDeclaration, (, ), {, Node, declaration, =, NodeUtil, ., newVarNode, (, name, ,, null, ), ;]
[generateDummyDeclaration, (, ), {, Node, declaration, =, NodeUtil, ., newVarNode, (, name, ,, null, ), ;, declaration, ., copyInformationFromForTree, (]
[Node, declaration, =, NodeUtil, ., newVarNode, (, name, ,, null, ), ;, declaration, ., copyInformationFromForTree, (, originalFunctionCopy, ), ;, return]
[>, removedFunctions, ;, private, Map, <, Node, ,, Node, >, removedFunctionToBlock, ;, private, SimpleFunctionAliasAnalysis, initialModuleAliasAnalysis, ;, private, boolean, hasChanged, =]
[>, removedFunctionToBlock, ;, private, SimpleFunctionAliasAnalysis, initialModuleAliasAnalysis, ;, private, boolean, hasChanged, =, false, ;, public, SpecializationState, (, SimpleFunctionAliasAnalysis, initialModuleAliasAnalysis, ), {]
[>, removedFunctionToBlock, ;, private, SimpleFunctionAliasAnalysis, initialModuleAliasAnalysis, ;, private, boolean, hasChanged, =, false, ;, public, SpecializationState, (, SimpleFunctionAliasAnalysis, initialModuleAliasAnalysis, ), {]
[SimpleFunctionAliasAnalysis, initialModuleAliasAnalysis, ;, private, boolean, hasChanged, =, false, ;, public, SpecializationState, (, SimpleFunctionAliasAnalysis, initialModuleAliasAnalysis, ), {, this, ., initialModuleAliasAnalysis, =]
[;, private, boolean, hasChanged, =, false, ;, public, SpecializationState, (, SimpleFunctionAliasAnalysis, initialModuleAliasAnalysis, ), {, this, ., initialModuleAliasAnalysis, =, initialModuleAliasAnalysis, ;]
[boolean, hasChanged, =, false, ;, public, SpecializationState, (, SimpleFunctionAliasAnalysis, initialModuleAliasAnalysis, ), {, this, ., initialModuleAliasAnalysis, =, initialModuleAliasAnalysis, ;, specializedFunctions, =]
[boolean, hasChanged, =, false, ;, public, SpecializationState, (, SimpleFunctionAliasAnalysis, initialModuleAliasAnalysis, ), {, this, ., initialModuleAliasAnalysis, =, initialModuleAliasAnalysis, ;, specializedFunctions, =]
[SpecializationState, (, SimpleFunctionAliasAnalysis, initialModuleAliasAnalysis, ), {, this, ., initialModuleAliasAnalysis, =, initialModuleAliasAnalysis, ;, specializedFunctions, =, Sets, ., newLinkedHashSet, (, ), ;]
[SimpleFunctionAliasAnalysis, initialModuleAliasAnalysis, ), {, this, ., initialModuleAliasAnalysis, =, initialModuleAliasAnalysis, ;, specializedFunctions, =, Sets, ., newLinkedHashSet, (, ), ;, removedFunctions, =]
[SimpleFunctionAliasAnalysis, initialModuleAliasAnalysis, ), {, this, ., initialModuleAliasAnalysis, =, initialModuleAliasAnalysis, ;, specializedFunctions, =, Sets, ., newLinkedHashSet, (, ), ;, removedFunctions, =]
[initialModuleAliasAnalysis, =, initialModuleAliasAnalysis, ;, specializedFunctions, =, Sets, ., newLinkedHashSet, (, ), ;, removedFunctions, =, Sets, ., newLinkedHashSet, (, ), ;]
[initialModuleAliasAnalysis, ;, specializedFunctions, =, Sets, ., newLinkedHashSet, (, ), ;, removedFunctions, =, Sets, ., newLinkedHashSet, (, ), ;, removedFunctionToBlock, =]
[initialModuleAliasAnalysis, ;, specializedFunctions, =, Sets, ., newLinkedHashSet, (, ), ;, removedFunctions, =, Sets, ., newLinkedHashSet, (, ), ;, removedFunctionToBlock, =]
[newLinkedHashSet, (, ), ;, removedFunctionToBlock, =, Maps, ., newLinkedHashMap, (, ), ;, }, private, boolean, hasChanged, (, ), {, return]
[(, ), ;, }, private, boolean, hasChanged, (, ), {, return, hasChanged, ;, }, private, void, resetHasChanged, (, ), {]
[;, }, private, boolean, hasChanged, (, ), {, return, hasChanged, ;, }, private, void, resetHasChanged, (, ), {, hasChanged, =]
[void, resetHasChanged, (, ), {, hasChanged, =, false, ;, }, public, Set, <, Node, >, getSpecializedFunctions, (, ), {, return]
[Node, >, getSpecializedFunctions, (, ), {, return, specializedFunctions, ;, }, public, void, reportSpecializedFunction, (, Node, functionNode, ), {, if, (]
[Node, >, getSpecializedFunctions, (, ), {, return, specializedFunctions, ;, }, public, void, reportSpecializedFunction, (, Node, functionNode, ), {, if, (]
[), {, return, specializedFunctions, ;, }, public, void, reportSpecializedFunction, (, Node, functionNode, ), {, if, (, specializedFunctions, ., add, (]
[;, }, public, void, reportSpecializedFunction, (, Node, functionNode, ), {, if, (, specializedFunctions, ., add, (, functionNode, ), ), {]
[public, void, reportSpecializedFunction, (, Node, functionNode, ), {, if, (, specializedFunctions, ., add, (, functionNode, ), ), {, hasChanged, =]
[), ), {, hasChanged, =, true, ;, }, }, public, void, reportSpecializedFunctionContainingNode, (, Node, node, ), {, Node, containingFunction, =]
[{, hasChanged, =, true, ;, }, }, public, void, reportSpecializedFunctionContainingNode, (, Node, node, ), {, Node, containingFunction, =, containingFunction, (]
[}, }, public, void, reportSpecializedFunctionContainingNode, (, Node, node, ), {, Node, containingFunction, =, containingFunction, (, node, ), ;, if, (]
[}, }, public, void, reportSpecializedFunctionContainingNode, (, Node, node, ), {, Node, containingFunction, =, containingFunction, (, node, ), ;, if, (]
[public, void, reportSpecializedFunctionContainingNode, (, Node, node, ), {, Node, containingFunction, =, containingFunction, (, node, ), ;, if, (, containingFunction, !=]
[(, Node, node, ), {, Node, containingFunction, =, containingFunction, (, node, ), ;, if, (, containingFunction, !=, null, ), {]
[node, ), {, Node, containingFunction, =, containingFunction, (, node, ), ;, if, (, containingFunction, !=, null, ), {, reportSpecializedFunction, (]
[null, ), {, reportSpecializedFunction, (, containingFunction, ), ;, }, }, public, Set, <, Node, >, getRemovedFunctions, (, ), {, return]
[(, ), {, return, removedFunctions, ;, }, public, void, reportRemovedFunction, (, Node, functionNode, ,, Node, declaringBlock, ), {, if, (]
[(, ), {, return, removedFunctions, ;, }, public, void, reportRemovedFunction, (, Node, functionNode, ,, Node, declaringBlock, ), {, if, (]
[removedFunctions, ;, }, public, void, reportRemovedFunction, (, Node, functionNode, ,, Node, declaringBlock, ), {, if, (, removedFunctions, ., add, (]
[void, reportRemovedFunction, (, Node, functionNode, ,, Node, declaringBlock, ), {, if, (, removedFunctions, ., add, (, functionNode, ), ), {]
[(, Node, functionNode, ,, Node, declaringBlock, ), {, if, (, removedFunctions, ., add, (, functionNode, ), ), {, hasChanged, =]
[functionNode, ,, Node, declaringBlock, ), {, if, (, removedFunctions, ., add, (, functionNode, ), ), {, hasChanged, =, true, ;]
[functionNode, ,, Node, declaringBlock, ), {, if, (, removedFunctions, ., add, (, functionNode, ), ), {, hasChanged, =, true, ;]
[), {, if, (, removedFunctions, ., add, (, functionNode, ), ), {, hasChanged, =, true, ;, removedFunctionToBlock, ., put, (]
[if, (, removedFunctions, ., add, (, functionNode, ), ), {, hasChanged, =, true, ;, removedFunctionToBlock, ., put, (, functionNode, ,]
[;, removedFunctionToBlock, ., put, (, functionNode, ,, declaringBlock, ), ;, }, }, public, boolean, canFixupFunction, (, Node, functionNode, ), {]
[;, removedFunctionToBlock, ., put, (, functionNode, ,, declaringBlock, ), ;, }, }, public, boolean, canFixupFunction, (, Node, functionNode, ), {]
[(, functionNode, ,, declaringBlock, ), ;, }, }, public, boolean, canFixupFunction, (, Node, functionNode, ), {, Preconditions, ., checkArgument, (]
[(, functionNode, ,, declaringBlock, ), ;, }, }, public, boolean, canFixupFunction, (, Node, functionNode, ), {, Preconditions, ., checkArgument, (]
[boolean, canFixupFunction, (, Node, functionNode, ), {, Preconditions, ., checkArgument, (, functionNode, ., isFunction, (, ), ), ;, if, (]
[boolean, canFixupFunction, (, Node, functionNode, ), {, Preconditions, ., checkArgument, (, functionNode, ., isFunction, (, ), ), ;, if, (]
[canFixupFunction, (, Node, functionNode, ), {, Preconditions, ., checkArgument, (, functionNode, ., isFunction, (, ), ), ;, if, (, !]
[Node, functionNode, ), {, Preconditions, ., checkArgument, (, functionNode, ., isFunction, (, ), ), ;, if, (, !, nodeIsInGlobalScope, (]
[{, Preconditions, ., checkArgument, (, functionNode, ., isFunction, (, ), ), ;, if, (, !, nodeIsInGlobalScope, (, functionNode, ), ||]
[{, Preconditions, ., checkArgument, (, functionNode, ., isFunction, (, ), ), ;, if, (, !, nodeIsInGlobalScope, (, functionNode, ), ||]
[(, functionNode, ., isFunction, (, ), ), ;, if, (, !, nodeIsInGlobalScope, (, functionNode, ), ||, initialModuleAliasAnalysis, ., isAliased, (]
[), ), ;, if, (, !, nodeIsInGlobalScope, (, functionNode, ), ||, initialModuleAliasAnalysis, ., isAliased, (, functionNode, ), ), {, return]
[!, nodeIsInGlobalScope, (, functionNode, ), ||, initialModuleAliasAnalysis, ., isAliased, (, functionNode, ), ), {, return, false, ;, }, if, (]
[!, nodeIsInGlobalScope, (, functionNode, ), ||, initialModuleAliasAnalysis, ., isAliased, (, functionNode, ), ), {, return, false, ;, }, if, (]
[), ||, initialModuleAliasAnalysis, ., isAliased, (, functionNode, ), ), {, return, false, ;, }, if, (, NodeUtil, ., isStatement, (]
[(, functionNode, ), ), {, return, false, ;, }, if, (, NodeUtil, ., isStatement, (, functionNode, ), ), {, return]
[false, ;, }, if, (, NodeUtil, ., isStatement, (, functionNode, ), ), {, return, true, ;, }, Node, parent, =]
[false, ;, }, if, (, NodeUtil, ., isStatement, (, functionNode, ), ), {, return, true, ;, }, Node, parent, =]
[functionNode, ), ), {, return, true, ;, }, Node, parent, =, functionNode, ., getParent, (, ), ;, Node, gramps, =]
[functionNode, ), ), {, return, true, ;, }, Node, parent, =, functionNode, ., getParent, (, ), ;, Node, gramps, =]
[Node, parent, =, functionNode, ., getParent, (, ), ;, Node, gramps, =, parent, ., getParent, (, ), ;, if, (]
[Node, parent, =, functionNode, ., getParent, (, ), ;, Node, gramps, =, parent, ., getParent, (, ), ;, if, (]
[Node, parent, =, functionNode, ., getParent, (, ), ;, Node, gramps, =, parent, ., getParent, (, ), ;, if, (]
[(, ), ;, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, parent, ., isName, (, ), &&]
[(, ), ;, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, parent, ., isName, (, ), &&]
[getParent, (, ), ;, if, (, parent, ., isName, (, ), &&, gramps, ., isVar, (, ), ), {, return]
[(, parent, ., isName, (, ), &&, gramps, ., isVar, (, ), ), {, return, true, ;, }, if, (]
[(, parent, ., isName, (, ), &&, gramps, ., isVar, (, ), ), {, return, true, ;, }, if, (]
[(, parent, ., isName, (, ), &&, gramps, ., isVar, (, ), ), {, return, true, ;, }, if, (]
[(, ), &&, gramps, ., isVar, (, ), ), {, return, true, ;, }, if, (, NodeUtil, ., isExprAssign, (]
[gramps, ., isVar, (, ), ), {, return, true, ;, }, if, (, NodeUtil, ., isExprAssign, (, gramps, ), &&]
[gramps, ., isVar, (, ), ), {, return, true, ;, }, if, (, NodeUtil, ., isExprAssign, (, gramps, ), &&]
[gramps, ., isVar, (, ), ), {, return, true, ;, }, if, (, NodeUtil, ., isExprAssign, (, gramps, ), &&]
[), ), {, return, true, ;, }, if, (, NodeUtil, ., isExprAssign, (, gramps, ), &&, parent, ., getChildAtIndex, (]
[return, true, ;, }, if, (, NodeUtil, ., isExprAssign, (, gramps, ), &&, parent, ., getChildAtIndex, (, 1, ), ==]
[if, (, NodeUtil, ., isExprAssign, (, gramps, ), &&, parent, ., getChildAtIndex, (, 1, ), ==, functionNode, ), {, return]
[isExprAssign, (, gramps, ), &&, parent, ., getChildAtIndex, (, 1, ), ==, functionNode, ), {, return, true, ;, }, return]
[{, return, true, ;, }, return, false, ;, }, public, boolean, canFixupSpecializedFunctionContainingNode, (, Node, n, ), {, Node, containingFunction, =]
[true, ;, }, return, false, ;, }, public, boolean, canFixupSpecializedFunctionContainingNode, (, Node, n, ), {, Node, containingFunction, =, containingFunction, (]
[;, }, public, boolean, canFixupSpecializedFunctionContainingNode, (, Node, n, ), {, Node, containingFunction, =, containingFunction, (, n, ), ;, if, (]
[;, }, public, boolean, canFixupSpecializedFunctionContainingNode, (, Node, n, ), {, Node, containingFunction, =, containingFunction, (, n, ), ;, if, (]
[public, boolean, canFixupSpecializedFunctionContainingNode, (, Node, n, ), {, Node, containingFunction, =, containingFunction, (, n, ), ;, if, (, containingFunction, !=]
[Node, n, ), {, Node, containingFunction, =, containingFunction, (, n, ), ;, if, (, containingFunction, !=, null, ), {, return]
[), {, Node, containingFunction, =, containingFunction, (, n, ), ;, if, (, containingFunction, !=, null, ), {, return, canFixupFunction, (]
[n, ), ;, if, (, containingFunction, !=, null, ), {, return, canFixupFunction, (, containingFunction, ), ;, }, else, {, return]
[containingFunction, ), ;, }, else, {, return, true, ;, }, }, private, boolean, nodeIsInGlobalScope, (, Node, node, ), {, return]
[containingFunction, ), ;, }, else, {, return, true, ;, }, }, private, boolean, nodeIsInGlobalScope, (, Node, node, ), {, return]
[;, }, else, {, return, true, ;, }, }, private, boolean, nodeIsInGlobalScope, (, Node, node, ), {, return, containingFunction, (]
[{, return, true, ;, }, }, private, boolean, nodeIsInGlobalScope, (, Node, node, ), {, return, containingFunction, (, node, ), ==]
[(, node, ), ==, null, ;, }, private, Node, containingFunction, (, Node, node, ), {, for, (, Node, ancestor, :]
[(, node, ), ==, null, ;, }, private, Node, containingFunction, (, Node, node, ), {, for, (, Node, ancestor, :]
[containingFunction, (, Node, node, ), {, for, (, Node, ancestor, :, node, ., getAncestors, (, ), ), {, if, (]
[containingFunction, (, Node, node, ), {, for, (, Node, ancestor, :, node, ., getAncestors, (, ), ), {, if, (]
[Node, ancestor, :, node, ., getAncestors, (, ), ), {, if, (, ancestor, ., isFunction, (, ), ), {, return]
[getAncestors, (, ), ), {, if, (, ancestor, ., isFunction, (, ), ), {, return, ancestor, ;, }, }, return]
