[;, private, String, description, ;, private, TimePeriod, duration, ;, private, Double, percentComplete, ;, private, List, subtasks, ;, public, Task, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'description' argument.", ), ;, }, this, ., description, =, description, ;, this, ., duration, =]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'description' argument.", ), ;, }, this, ., description, =, description, ;, this, .]
[), {, throw, new, IllegalArgumentException, (, "Null 'description' argument.", ), ;, }, this, ., description, =, description, ;, this, ., duration, =]
[;, }, this, ., description, =, description, ;, this, ., duration, =, duration, ;, this, ., percentComplete, =, null, ;]
[), ;, }, this, ., description, =, description, ;, this, ., duration, =, duration, ;, this, ., percentComplete, =, null]
[=, description, ;, this, ., duration, =, duration, ;, this, ., percentComplete, =, null, ;, this, ., subtasks, =, new]
[., description, =, description, ;, this, ., duration, =, duration, ;, this, ., percentComplete, =, null, ;, this, ., subtasks]
[;, this, ., duration, =, duration, ;, this, ., percentComplete, =, null, ;, this, ., subtasks, =, new, java, .]
[=, duration, ;, this, ., percentComplete, =, null, ;, this, ., subtasks, =, new, java, ., util, ., ArrayList, (]
[., duration, =, duration, ;, this, ., percentComplete, =, null, ;, this, ., subtasks, =, new, java, ., util, .]
[;, this, ., percentComplete, =, null, ;, this, ., subtasks, =, new, java, ., util, ., ArrayList, (, ), ;]
[=, null, ;, this, ., subtasks, =, new, java, ., util, ., ArrayList, (, ), ;, }, public, Task, (]
[., percentComplete, =, null, ;, this, ., subtasks, =, new, java, ., util, ., ArrayList, (, ), ;, }, public]
[;, this, ., subtasks, =, new, java, ., util, ., ArrayList, (, ), ;, }, public, Task, (, String, description]
[=, new, java, ., util, ., ArrayList, (, ), ;, }, public, Task, (, String, description, ,, Date, start, ,]
[., subtasks, =, new, java, ., util, ., ArrayList, (, ), ;, }, public, Task, (, String, description, ,, Date]
[;, }, public, Task, (, String, description, ,, Date, start, ,, Date, end, ), {, this, (, description, ,, new]
[,, new, SimpleTimePeriod, (, start, ,, end, ), ), ;, }, public, String, getDescription, (, ), {, return, this, .]
[), ;, }, public, String, getDescription, (, ), {, return, this, ., description, ;, }, public, void, setDescription, (, String]
[,, end, ), ), ;, }, public, String, getDescription, (, ), {, return, this, ., description, ;, }, public, void]
[), ), ;, }, public, String, getDescription, (, ), {, return, this, ., description, ;, }, public, void, setDescription, (]
[;, }, public, void, setDescription, (, String, description, ), {, if, (, description, ==, null, ), {, throw, new, IllegalArgumentException]
[., description, ;, }, public, void, setDescription, (, String, description, ), {, if, (, description, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'description' argument.", ), ;, }, this, ., description, =, description, ;, }, public, TimePeriod, getDuration]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'description' argument.", ), ;, }, this, ., description, =, description, ;, }, public]
[), {, throw, new, IllegalArgumentException, (, "Null 'description' argument.", ), ;, }, this, ., description, =, description, ;, }, public, TimePeriod, getDuration]
[;, }, this, ., description, =, description, ;, }, public, TimePeriod, getDuration, (, ), {, return, this, ., duration, ;]
[), ;, }, this, ., description, =, description, ;, }, public, TimePeriod, getDuration, (, ), {, return, this, ., duration]
[=, description, ;, }, public, TimePeriod, getDuration, (, ), {, return, this, ., duration, ;, }, public, void, setDuration, (]
[., description, =, description, ;, }, public, TimePeriod, getDuration, (, ), {, return, this, ., duration, ;, }, public, void]
[;, }, public, TimePeriod, getDuration, (, ), {, return, this, ., duration, ;, }, public, void, setDuration, (, TimePeriod, duration]
[;, }, public, void, setDuration, (, TimePeriod, duration, ), {, this, ., duration, =, duration, ;, }, public, Double, getPercentComplete]
[., duration, ;, }, public, void, setDuration, (, TimePeriod, duration, ), {, this, ., duration, =, duration, ;, }, public]
[=, duration, ;, }, public, Double, getPercentComplete, (, ), {, return, this, ., percentComplete, ;, }, public, void, setPercentComplete, (]
[., duration, =, duration, ;, }, public, Double, getPercentComplete, (, ), {, return, this, ., percentComplete, ;, }, public, void]
[;, }, public, Double, getPercentComplete, (, ), {, return, this, ., percentComplete, ;, }, public, void, setPercentComplete, (, Double, percent]
[;, }, public, void, setPercentComplete, (, Double, percent, ), {, this, ., percentComplete, =, percent, ;, }, public, void, setPercentComplete]
[., percentComplete, ;, }, public, void, setPercentComplete, (, Double, percent, ), {, this, ., percentComplete, =, percent, ;, }, public]
[=, percent, ;, }, public, void, setPercentComplete, (, double, percent, ), {, setPercentComplete, (, new, Double, (, percent, ), )]
[., percentComplete, =, percent, ;, }, public, void, setPercentComplete, (, double, percent, ), {, setPercentComplete, (, new, Double, (, percent]
[;, }, public, void, setPercentComplete, (, double, percent, ), {, setPercentComplete, (, new, Double, (, percent, ), ), ;, }]
[;, }, public, void, addSubtask, (, Task, subtask, ), {, if, (, subtask, ==, null, ), {, throw, new, IllegalArgumentException]
[), ;, }, public, void, addSubtask, (, Task, subtask, ), {, if, (, subtask, ==, null, ), {, throw, new]
[), ), ;, }, public, void, addSubtask, (, Task, subtask, ), {, if, (, subtask, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'subtask' argument.", ), ;, }, this, ., subtasks, ., add, (, subtask, ), ;, }]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'subtask' argument.", ), ;, }, this, ., subtasks, ., add, (, subtask, )]
[), {, throw, new, IllegalArgumentException, (, "Null 'subtask' argument.", ), ;, }, this, ., subtasks, ., add, (, subtask, ), ;, }]
[;, }, this, ., subtasks, ., add, (, subtask, ), ;, }, public, void, removeSubtask, (, Task, subtask, ), {]
[), ;, }, this, ., subtasks, ., add, (, subtask, ), ;, }, public, void, removeSubtask, (, Task, subtask, )]
[;, }, public, void, removeSubtask, (, Task, subtask, ), {, this, ., subtasks, ., remove, (, subtask, ), ;, }]
[., add, (, subtask, ), ;, }, public, void, removeSubtask, (, Task, subtask, ), {, this, ., subtasks, ., remove]
[., subtasks, ., add, (, subtask, ), ;, }, public, void, removeSubtask, (, Task, subtask, ), {, this, ., subtasks]
[), ;, }, public, void, removeSubtask, (, Task, subtask, ), {, this, ., subtasks, ., remove, (, subtask, ), ;]
[;, }, public, int, getSubtaskCount, (, ), {, return, this, ., subtasks, ., size, (, ), ;, }, public, Task]
[., remove, (, subtask, ), ;, }, public, int, getSubtaskCount, (, ), {, return, this, ., subtasks, ., size, (]
[., subtasks, ., remove, (, subtask, ), ;, }, public, int, getSubtaskCount, (, ), {, return, this, ., subtasks, .]
[), ;, }, public, int, getSubtaskCount, (, ), {, return, this, ., subtasks, ., size, (, ), ;, }, public]
[;, }, public, Task, getSubtask, (, int, index, ), {, return, (, Task, ), this, ., subtasks, ., get, (]
[., size, (, ), ;, }, public, Task, getSubtask, (, int, index, ), {, return, (, Task, ), this, .]
[., subtasks, ., size, (, ), ;, }, public, Task, getSubtask, (, int, index, ), {, return, (, Task, )]
[;, }, public, boolean, equals, (, Object, object, ), {, if, (, object, ==, this, ), {, return, true, ;]
[;, }, public, boolean, equals, (, Object, object, ), {, if, (, object, ==, this, ), {, return, true, ;]
[., get, (, index, ), ;, }, public, boolean, equals, (, Object, object, ), {, if, (, object, ==, this]
[., subtasks, ., get, (, index, ), ;, }, public, boolean, equals, (, Object, object, ), {, if, (, object]
[), ;, }, public, boolean, equals, (, Object, object, ), {, if, (, object, ==, this, ), {, return, true]
[), {, return, true, ;, }, if, (, !, (, object, instanceof, Task, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, object, instanceof, Task, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, object, instanceof, Task, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, object, instanceof, Task, ), ), {, return, false, ;, }, Task, that, =, (]
[), {, return, false, ;, }, Task, that, =, (, Task, ), object, ;, if, (, !, ObjectUtilities, ., equal]
[), {, return, false, ;, }, Task, that, =, (, Task, ), object, ;, if, (, !, ObjectUtilities, ., equal]
[), ), {, return, false, ;, }, Task, that, =, (, Task, ), object, ;, if, (, !, ObjectUtilities, .]
[instanceof, Task, ), ), {, return, false, ;, }, Task, that, =, (, Task, ), object, ;, if, (, !]
[;, }, Task, that, =, (, Task, ), object, ;, if, (, !, ObjectUtilities, ., equal, (, this, ., description]
[;, if, (, !, ObjectUtilities, ., equal, (, this, ., description, ,, that, ., description, ), ), {, return, false]
[;, if, (, !, ObjectUtilities, ., equal, (, this, ., description, ,, that, ., description, ), ), {, return, false]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., duration, ,, that, ., duration]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., duration, ,, that, ., duration]
[., equal, (, this, ., description, ,, that, ., description, ), ), {, return, false, ;, }, if, (, !]
[,, that, ., description, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, .]
[., description, ,, that, ., description, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., duration, ,, that, .]
[., description, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., duration, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., duration, ,, that, ., duration, ), ), {, return]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., percentComplete, ,, that, ., percentComplete]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., percentComplete, ,, that, ., percentComplete]
[., equal, (, this, ., duration, ,, that, ., duration, ), ), {, return, false, ;, }, if, (, !]
[,, that, ., duration, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, .]
[., duration, ,, that, ., duration, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., percentComplete, ,, that, .]
[., duration, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., percentComplete, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., percentComplete, ,, that, ., percentComplete, ), ), {, return]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., subtasks, ,, that, ., subtasks]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., subtasks, ,, that, ., subtasks]
[., equal, (, this, ., percentComplete, ,, that, ., percentComplete, ), ), {, return, false, ;, }, if, (, !]
[,, that, ., percentComplete, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, .]
[., percentComplete, ,, that, ., percentComplete, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., subtasks, ,, that, .]
[., percentComplete, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., subtasks, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., subtasks, ,, that, ., subtasks, ), ), {, return]
[), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, Task, clone]
[), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, Task, clone]
[., equal, (, this, ., subtasks, ,, that, ., subtasks, ), ), {, return, false, ;, }, return, true, ;]
[,, that, ., subtasks, ), ), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, )]
[., subtasks, ,, that, ., subtasks, ), ), {, return, false, ;, }, return, true, ;, }, public, Object, clone]
[), ), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, Task]
[., subtasks, ), ), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException]
[;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, Task, clone, =, (, Task, )]
[;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, Task, clone, =, (, Task, ), super, ., clone, (]
[;, return, clone, ;, }, }]
[;, return, clone, ;, }, }]
[., clone, (, ), ;, return, clone, ;, }, }]
[;, }, }]
