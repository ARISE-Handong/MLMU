[), {, }, static, class, FunctionlessLocalScope, implements, Iterator, <, Node, >, {, private, final, Stack, <, Node, >, ancestors, =]
[<, Node, >, ancestors, =, new, Stack, <, Node, >, (, ), ;, FunctionlessLocalScope, (, Node, ..., ancestors, ), {]
[<, Node, >, ancestors, =, new, Stack, <, Node, >, (, ), ;, FunctionlessLocalScope, (, Node, ..., ancestors, ), {]
[=, new, Stack, <, Node, >, (, ), ;, FunctionlessLocalScope, (, Node, ..., ancestors, ), {, Preconditions, ., checkArgument, (]
[=, new, Stack, <, Node, >, (, ), ;, FunctionlessLocalScope, (, Node, ..., ancestors, ), {, Preconditions, ., checkArgument, (]
[=, new, Stack, <, Node, >, (, ), ;, FunctionlessLocalScope, (, Node, ..., ancestors, ), {, Preconditions, ., checkArgument, (]
[Node, >, (, ), ;, FunctionlessLocalScope, (, Node, ..., ancestors, ), {, Preconditions, ., checkArgument, (, ancestors, ., length, >]
[..., ancestors, ), {, Preconditions, ., checkArgument, (, ancestors, ., length, >, 0, ), ;, for, (, Node, n, :]
[., checkArgument, (, ancestors, ., length, >, 0, ), ;, for, (, Node, n, :, ancestors, ), {, if, (]
[., checkArgument, (, ancestors, ., length, >, 0, ), ;, for, (, Node, n, :, ancestors, ), {, if, (]
[for, (, Node, n, :, ancestors, ), {, if, (, n, ., isFunction, (, ), ), {, break, ;, }]
[for, (, Node, n, :, ancestors, ), {, if, (, n, ., isFunction, (, ), ), {, break, ;, }]
[for, (, Node, n, :, ancestors, ), {, if, (, n, ., isFunction, (, ), ), {, break, ;, }]
[), {, if, (, n, ., isFunction, (, ), ), {, break, ;, }, this, ., ancestors, ., add, (]
[if, (, n, ., isFunction, (, ), ), {, break, ;, }, this, ., ancestors, ., add, (, 0, ,]
[ancestors, ., add, (, 0, ,, n, ), ;, }, }, @, Override, public, boolean, hasNext, (, ), {, return]
[., add, (, 0, ,, n, ), ;, }, }, @, Override, public, boolean, hasNext, (, ), {, return, !]
[add, (, 0, ,, n, ), ;, }, }, @, Override, public, boolean, hasNext, (, ), {, return, !, (]
[add, (, 0, ,, n, ), ;, }, }, @, Override, public, boolean, hasNext, (, ), {, return, !, (]
[add, (, 0, ,, n, ), ;, }, }, @, Override, public, boolean, hasNext, (, ), {, return, !, (]
[add, (, 0, ,, n, ), ;, }, }, @, Override, public, boolean, hasNext, (, ), {, return, !, (]
[;, }, }, @, Override, public, boolean, hasNext, (, ), {, return, !, (, ancestors, ., size, (, ), ==]
[}, @, Override, public, boolean, hasNext, (, ), {, return, !, (, ancestors, ., size, (, ), ==, 1, &&]
[}, @, Override, public, boolean, hasNext, (, ), {, return, !, (, ancestors, ., size, (, ), ==, 1, &&]
[}, @, Override, public, boolean, hasNext, (, ), {, return, !, (, ancestors, ., size, (, ), ==, 1, &&]
[}, @, Override, public, boolean, hasNext, (, ), {, return, !, (, ancestors, ., size, (, ), ==, 1, &&]
[!, (, ancestors, ., size, (, ), ==, 1, &&, ancestors, ., peek, (, ), ., getNext, (, ), ==]
[., getNext, (, ), ==, null, ), ;, }, @, Override, public, Node, next, (, ), {, Node, current, =]
[., getNext, (, ), ==, null, ), ;, }, @, Override, public, Node, next, (, ), {, Node, current, =]
[}, @, Override, public, Node, next, (, ), {, Node, current, =, ancestors, ., pop, (, ), ;, if, (]
[}, @, Override, public, Node, next, (, ), {, Node, current, =, ancestors, ., pop, (, ), ;, if, (]
[}, @, Override, public, Node, next, (, ), {, Node, current, =, ancestors, ., pop, (, ), ;, if, (]
[(, ), {, Node, current, =, ancestors, ., pop, (, ), ;, if, (, current, ., getNext, (, ), ==]
[Node, current, =, ancestors, ., pop, (, ), ;, if, (, current, ., getNext, (, ), ==, null, ), {]
[=, ancestors, ., pop, (, ), ;, if, (, current, ., getNext, (, ), ==, null, ), {, current, =]
[=, ancestors, ., pop, (, ), ;, if, (, current, ., getNext, (, ), ==, null, ), {, current, =]
[(, current, ., getNext, (, ), ==, null, ), {, current, =, ancestors, ., peek, (, ), ;, if, (]
[(, current, ., getNext, (, ), ==, null, ), {, current, =, ancestors, ., peek, (, ), ;, if, (]
[), {, current, =, ancestors, ., peek, (, ), ;, if, (, current, ., isFunction, (, ), ), {, return]
[), ;, if, (, current, ., isFunction, (, ), ), {, return, next, (, ), ;, }, }, else, {]
[if, (, current, ., isFunction, (, ), ), {, return, next, (, ), ;, }, }, else, {, current, =]
[if, (, current, ., isFunction, (, ), ), {, return, next, (, ), ;, }, }, else, {, current, =]
[), ), {, return, next, (, ), ;, }, }, else, {, current, =, current, ., getNext, (, ), ;]
[), ), {, return, next, (, ), ;, }, }, else, {, current, =, current, ., getNext, (, ), ;]
[next, (, ), ;, }, }, else, {, current, =, current, ., getNext, (, ), ;, ancestors, ., push, (]
[}, else, {, current, =, current, ., getNext, (, ), ;, ancestors, ., push, (, current, ), ;, if, (]
[}, else, {, current, =, current, ., getNext, (, ), ;, ancestors, ., push, (, current, ), ;, if, (]
[(, ), ;, ancestors, ., push, (, current, ), ;, if, (, current, ., isFunction, (, ), ), {, return]
[current, ), ;, if, (, current, ., isFunction, (, ), ), {, return, next, (, ), ;, }, while, (]
[current, ), ;, if, (, current, ., isFunction, (, ), ), {, return, next, (, ), ;, }, while, (]
[isFunction, (, ), ), {, return, next, (, ), ;, }, while, (, current, ., hasChildren, (, ), ), {]
[), ), {, return, next, (, ), ;, }, while, (, current, ., hasChildren, (, ), ), {, current, =]
[), ), {, return, next, (, ), ;, }, while, (, current, ., hasChildren, (, ), ), {, current, =]
[), ;, }, while, (, current, ., hasChildren, (, ), ), {, current, =, current, ., getFirstChild, (, ), ;]
[), ;, }, while, (, current, ., hasChildren, (, ), ), {, current, =, current, ., getFirstChild, (, ), ;]
[(, current, ., hasChildren, (, ), ), {, current, =, current, ., getFirstChild, (, ), ;, ancestors, ., push, (]
[), ), {, current, =, current, ., getFirstChild, (, ), ;, ancestors, ., push, (, current, ), ;, if, (]
[), ), {, current, =, current, ., getFirstChild, (, ), ;, ancestors, ., push, (, current, ), ;, if, (]
[(, ), ;, ancestors, ., push, (, current, ), ;, if, (, current, ., isFunction, (, ), ), {, return]
[), ;, if, (, current, ., isFunction, (, ), ), {, return, next, (, ), ;, }, }, }, return]
[next, (, ), ;, }, }, }, return, current, ;, }, @, Override, public, void, remove, (, ), {, throw]
[;, }, }, }, return, current, ;, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (]
[void, remove, (, ), {, throw, new, UnsupportedOperationException, (, "Not implemented", ), ;, }, protected, Node, current, (, ), {, return]
[void, remove, (, ), {, throw, new, UnsupportedOperationException, (, "Not implemented", ), ;, }, protected, Node, current, (, ), {, return]
[Node, current, (, ), {, return, ancestors, ., peek, (, ), ;, }, protected, Node, currentParent, (, ), {, return]
[Node, current, (, ), {, return, ancestors, ., peek, (, ), ;, }, protected, Node, currentParent, (, ), {, return]
[Node, current, (, ), {, return, ancestors, ., peek, (, ), ;, }, protected, Node, currentParent, (, ), {, return]
[Node, current, (, ), {, return, ancestors, ., peek, (, ), ;, }, protected, Node, currentParent, (, ), {, return]
[ancestors, ., peek, (, ), ;, }, protected, Node, currentParent, (, ), {, return, ancestors, ., size, (, ), >=]
[peek, (, ), ;, }, protected, Node, currentParent, (, ), {, return, ancestors, ., size, (, ), >=, 2, ?]
[peek, (, ), ;, }, protected, Node, currentParent, (, ), {, return, ancestors, ., size, (, ), >=, 2, ?]
[}, protected, Node, currentParent, (, ), {, return, ancestors, ., size, (, ), >=, 2, ?, ancestors, ., get, (]
[}, protected, Node, currentParent, (, ), {, return, ancestors, ., size, (, ), >=, 2, ?, ancestors, ., get, (]
[}, protected, Node, currentParent, (, ), {, return, ancestors, ., size, (, ), >=, 2, ?, ancestors, ., get, (]
[{, return, ancestors, ., size, (, ), >=, 2, ?, ancestors, ., get, (, ancestors, ., size, (, ), -]
[., size, (, ), >=, 2, ?, ancestors, ., get, (, ancestors, ., size, (, ), -, 2, ), :]
[2, ), :, null, ;, }, List, <, Node, >, currentAncestors, (, ), {, List, <, Node, >, list, =]
[2, ), :, null, ;, }, List, <, Node, >, currentAncestors, (, ), {, List, <, Node, >, list, =]
[;, }, List, <, Node, >, currentAncestors, (, ), {, List, <, Node, >, list, =, Lists, ., newArrayList, (]
[<, Node, >, currentAncestors, (, ), {, List, <, Node, >, list, =, Lists, ., newArrayList, (, ancestors, ), ;]
[<, Node, >, currentAncestors, (, ), {, List, <, Node, >, list, =, Lists, ., newArrayList, (, ancestors, ), ;]
[(, ), {, List, <, Node, >, list, =, Lists, ., newArrayList, (, ancestors, ), ;, Collections, ., reverse, (]
[<, Node, >, list, =, Lists, ., newArrayList, (, ancestors, ), ;, Collections, ., reverse, (, list, ), ;, return]
[varName, ;, private, Node, lookAhead, ;, static, LocalVarMotion, forVar, (, Node, name, ,, Node, var, ,, Node, block, ), {]
[varName, ;, private, Node, lookAhead, ;, static, LocalVarMotion, forVar, (, Node, name, ,, Node, var, ,, Node, block, ), {]
[lookAhead, ;, static, LocalVarMotion, forVar, (, Node, name, ,, Node, var, ,, Node, block, ), {, Preconditions, ., checkArgument, (]
[lookAhead, ;, static, LocalVarMotion, forVar, (, Node, name, ,, Node, var, ,, Node, block, ), {, Preconditions, ., checkArgument, (]
[name, ,, Node, var, ,, Node, block, ), {, Preconditions, ., checkArgument, (, var, ., isVar, (, ), ), ;]
[name, ,, Node, var, ,, Node, block, ), {, Preconditions, ., checkArgument, (, var, ., isVar, (, ), ), ;]
[,, Node, block, ), {, Preconditions, ., checkArgument, (, var, ., isVar, (, ), ), ;, Preconditions, ., checkArgument, (]
[,, Node, block, ), {, Preconditions, ., checkArgument, (, var, ., isVar, (, ), ), ;, Preconditions, ., checkArgument, (]
[{, Preconditions, ., checkArgument, (, var, ., isVar, (, ), ), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isStatement, (]
[var, ., isVar, (, ), ), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isStatement, (, var, ), ), ;, return]
[(, ), ), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isStatement, (, var, ), ), ;, return, new, LocalVarMotion, (]
[), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isStatement, (, var, ), ), ;, return, new, LocalVarMotion, (, name, ,]
[., checkArgument, (, NodeUtil, ., isStatement, (, var, ), ), ;, return, new, LocalVarMotion, (, name, ,, new, FunctionlessLocalScope, (]
[(, NodeUtil, ., isStatement, (, var, ), ), ;, return, new, LocalVarMotion, (, name, ,, new, FunctionlessLocalScope, (, name, ,]
[., isStatement, (, var, ), ), ;, return, new, LocalVarMotion, (, name, ,, new, FunctionlessLocalScope, (, name, ,, var, ,]
[), ;, }, static, LocalVarMotion, forAssign, (, Node, name, ,, Node, assign, ,, Node, expr, ,, Node, block, ), {]
[), ;, }, static, LocalVarMotion, forAssign, (, Node, name, ,, Node, assign, ,, Node, expr, ,, Node, block, ), {]
[LocalVarMotion, forAssign, (, Node, name, ,, Node, assign, ,, Node, expr, ,, Node, block, ), {, Preconditions, ., checkArgument, (]
[LocalVarMotion, forAssign, (, Node, name, ,, Node, assign, ,, Node, expr, ,, Node, block, ), {, Preconditions, ., checkArgument, (]
[assign, ,, Node, expr, ,, Node, block, ), {, Preconditions, ., checkArgument, (, assign, ., isAssign, (, ), ), ;]
[assign, ,, Node, expr, ,, Node, block, ), {, Preconditions, ., checkArgument, (, assign, ., isAssign, (, ), ), ;]
[,, Node, block, ), {, Preconditions, ., checkArgument, (, assign, ., isAssign, (, ), ), ;, Preconditions, ., checkArgument, (]
[,, Node, block, ), {, Preconditions, ., checkArgument, (, assign, ., isAssign, (, ), ), ;, Preconditions, ., checkArgument, (]
[(, assign, ., isAssign, (, ), ), ;, Preconditions, ., checkArgument, (, expr, ., isExprResult, (, ), ), ;, return]
[isAssign, (, ), ), ;, Preconditions, ., checkArgument, (, expr, ., isExprResult, (, ), ), ;, return, new, LocalVarMotion, (]
[), ), ;, Preconditions, ., checkArgument, (, expr, ., isExprResult, (, ), ), ;, return, new, LocalVarMotion, (, name, ,]
[Preconditions, ., checkArgument, (, expr, ., isExprResult, (, ), ), ;, return, new, LocalVarMotion, (, name, ,, new, FunctionlessLocalScope, (]
[checkArgument, (, expr, ., isExprResult, (, ), ), ;, return, new, LocalVarMotion, (, name, ,, new, FunctionlessLocalScope, (, assign, ,]
[expr, ., isExprResult, (, ), ), ;, return, new, LocalVarMotion, (, name, ,, new, FunctionlessLocalScope, (, assign, ,, expr, ,]
[(, assign, ,, expr, ,, block, ), ), ;, }, private, LocalVarMotion, (, Node, nameNode, ,, FunctionlessLocalScope, iterator, ), {]
[(, assign, ,, expr, ,, block, ), ), ;, }, private, LocalVarMotion, (, Node, nameNode, ,, FunctionlessLocalScope, iterator, ), {]
[,, block, ), ), ;, }, private, LocalVarMotion, (, Node, nameNode, ,, FunctionlessLocalScope, iterator, ), {, Preconditions, ., checkArgument, (]
[,, block, ), ), ;, }, private, LocalVarMotion, (, Node, nameNode, ,, FunctionlessLocalScope, iterator, ), {, Preconditions, ., checkArgument, (]
[nameNode, ,, FunctionlessLocalScope, iterator, ), {, Preconditions, ., checkArgument, (, nameNode, ., isName, (, ), ), ;, Node, valueNode, =]
[nameNode, ,, FunctionlessLocalScope, iterator, ), {, Preconditions, ., checkArgument, (, nameNode, ., isName, (, ), ), ;, Node, valueNode, =]
[), {, Preconditions, ., checkArgument, (, nameNode, ., isName, (, ), ), ;, Node, valueNode, =, NodeUtil, ., getAssignedValue, (]
[., checkArgument, (, nameNode, ., isName, (, ), ), ;, Node, valueNode, =, NodeUtil, ., getAssignedValue, (, nameNode, ), ;]
[., checkArgument, (, nameNode, ., isName, (, ), ), ;, Node, valueNode, =, NodeUtil, ., getAssignedValue, (, nameNode, ), ;]
[., isName, (, ), ), ;, Node, valueNode, =, NodeUtil, ., getAssignedValue, (, nameNode, ), ;, this, ., varName, =]
[., isName, (, ), ), ;, Node, valueNode, =, NodeUtil, ., getAssignedValue, (, nameNode, ), ;, this, ., varName, =]
[Node, valueNode, =, NodeUtil, ., getAssignedValue, (, nameNode, ), ;, this, ., varName, =, nameNode, ., getString, (, ), ;]
[Node, valueNode, =, NodeUtil, ., getAssignedValue, (, nameNode, ), ;, this, ., varName, =, nameNode, ., getString, (, ), ;]
[., getAssignedValue, (, nameNode, ), ;, this, ., varName, =, nameNode, ., getString, (, ), ;, this, ., valueHasSideEffects, =]
[., getAssignedValue, (, nameNode, ), ;, this, ., varName, =, nameNode, ., getString, (, ), ;, this, ., valueHasSideEffects, =]
[., getAssignedValue, (, nameNode, ), ;, this, ., varName, =, nameNode, ., getString, (, ), ;, this, ., valueHasSideEffects, =]
[(, nameNode, ), ;, this, ., varName, =, nameNode, ., getString, (, ), ;, this, ., valueHasSideEffects, =, valueNode, !=]
[), ;, this, ., varName, =, nameNode, ., getString, (, ), ;, this, ., valueHasSideEffects, =, valueNode, !=, null, &&]
[), ;, this, ., varName, =, nameNode, ., getString, (, ), ;, this, ., valueHasSideEffects, =, valueNode, !=, null, &&]
[varName, =, nameNode, ., getString, (, ), ;, this, ., valueHasSideEffects, =, valueNode, !=, null, &&, NodeUtil, ., mayHaveSideEffects, (]
[., getString, (, ), ;, this, ., valueHasSideEffects, =, valueNode, !=, null, &&, NodeUtil, ., mayHaveSideEffects, (, valueNode, ), ;]
[., getString, (, ), ;, this, ., valueHasSideEffects, =, valueNode, !=, null, &&, NodeUtil, ., mayHaveSideEffects, (, valueNode, ), ;]
[;, this, ., valueHasSideEffects, =, valueNode, !=, null, &&, NodeUtil, ., mayHaveSideEffects, (, valueNode, ), ;, this, ., iterator, =]
[., valueHasSideEffects, =, valueNode, !=, null, &&, NodeUtil, ., mayHaveSideEffects, (, valueNode, ), ;, this, ., iterator, =, iterator, ;]
[=, valueNode, !=, null, &&, NodeUtil, ., mayHaveSideEffects, (, valueNode, ), ;, this, ., iterator, =, iterator, ;, advanceLookAhead, (]
[., iterator, =, iterator, ;, advanceLookAhead, (, true, ), ;, }, @, Override, public, boolean, hasNext, (, ), {, return]
[., iterator, =, iterator, ;, advanceLookAhead, (, true, ), ;, }, @, Override, public, boolean, hasNext, (, ), {, return]
[=, iterator, ;, advanceLookAhead, (, true, ), ;, }, @, Override, public, boolean, hasNext, (, ), {, return, lookAhead, !=]
[(, ), {, return, lookAhead, !=, null, ;, }, @, Override, public, Node, next, (, ), {, Node, next, =]
[{, return, lookAhead, !=, null, ;, }, @, Override, public, Node, next, (, ), {, Node, next, =, lookAhead, ;]
[lookAhead, !=, null, ;, }, @, Override, public, Node, next, (, ), {, Node, next, =, lookAhead, ;, advanceLookAhead, (]
[}, @, Override, public, Node, next, (, ), {, Node, next, =, lookAhead, ;, advanceLookAhead, (, false, ), ;, return]
[lookAhead, ;, advanceLookAhead, (, false, ), ;, return, next, ;, }, @, Override, public, void, remove, (, ), {, throw]
[(, false, ), ;, return, next, ;, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (]
[), {, throw, new, UnsupportedOperationException, (, "Not implemented", ), ;, }, private, void, advanceLookAhead, (, boolean, atStart, ), {, if, (]
[{, throw, new, UnsupportedOperationException, (, "Not implemented", ), ;, }, private, void, advanceLookAhead, (, boolean, atStart, ), {, if, (, !]
["Not implemented", ), ;, }, private, void, advanceLookAhead, (, boolean, atStart, ), {, if, (, !, atStart, ), {, if, (]
["Not implemented", ), ;, }, private, void, advanceLookAhead, (, boolean, atStart, ), {, if, (, !, atStart, ), {, if, (]
[;, }, private, void, advanceLookAhead, (, boolean, atStart, ), {, if, (, !, atStart, ), {, if, (, lookAhead, ==]
[{, if, (, !, atStart, ), {, if, (, lookAhead, ==, null, ), {, return, ;, }, Node, curNode, =]
[{, if, (, !, atStart, ), {, if, (, lookAhead, ==, null, ), {, return, ;, }, Node, curNode, =]
[(, lookAhead, ==, null, ), {, return, ;, }, Node, curNode, =, iterator, ., current, (, ), ;, if, (]
[(, lookAhead, ==, null, ), {, return, ;, }, Node, curNode, =, iterator, ., current, (, ), ;, if, (]
[(, lookAhead, ==, null, ), {, return, ;, }, Node, curNode, =, iterator, ., current, (, ), ;, if, (]
[return, ;, }, Node, curNode, =, iterator, ., current, (, ), ;, if, (, curNode, ., isName, (, ), &&]
[return, ;, }, Node, curNode, =, iterator, ., current, (, ), ;, if, (, curNode, ., isName, (, ), &&]
[curNode, =, iterator, ., current, (, ), ;, if, (, curNode, ., isName, (, ), &&, varName, ., equals, (]
[curNode, =, iterator, ., current, (, ), ;, if, (, curNode, ., isName, (, ), &&, varName, ., equals, (]
[if, (, curNode, ., isName, (, ), &&, varName, ., equals, (, curNode, ., getString, (, ), ), ), {]
[curNode, ., isName, (, ), &&, varName, ., equals, (, curNode, ., getString, (, ), ), ), {, lookAhead, =]
[equals, (, curNode, ., getString, (, ), ), ), {, lookAhead, =, null, ;, return, ;, }, }, if, (]
[(, curNode, ., getString, (, ), ), ), {, lookAhead, =, null, ;, return, ;, }, }, if, (, !]
[(, curNode, ., getString, (, ), ), ), {, lookAhead, =, null, ;, return, ;, }, }, if, (, !]
[), {, lookAhead, =, null, ;, return, ;, }, }, if, (, !, iterator, ., hasNext, (, ), ), {]
[lookAhead, =, null, ;, return, ;, }, }, if, (, !, iterator, ., hasNext, (, ), ), {, lookAhead, =]
[if, (, !, iterator, ., hasNext, (, ), ), {, lookAhead, =, null, ;, return, ;, }, Node, nextNode, =]
[if, (, !, iterator, ., hasNext, (, ), ), {, lookAhead, =, null, ;, return, ;, }, Node, nextNode, =]
[{, lookAhead, =, null, ;, return, ;, }, Node, nextNode, =, iterator, ., next, (, ), ;, Node, nextParent, =]
[{, lookAhead, =, null, ;, return, ;, }, Node, nextNode, =, iterator, ., next, (, ), ;, Node, nextParent, =]
[nextNode, =, iterator, ., next, (, ), ;, Node, nextParent, =, iterator, ., currentParent, (, ), ;, int, type, =]
[nextNode, =, iterator, ., next, (, ), ;, Node, nextParent, =, iterator, ., currentParent, (, ), ;, int, type, =]
[Node, nextParent, =, iterator, ., currentParent, (, ), ;, int, type, =, nextNode, ., getType, (, ), ;, if, (]
[(, ), ;, int, type, =, nextNode, ., getType, (, ), ;, if, (, valueHasSideEffects, ), {, boolean, readsState, =]
[type, =, nextNode, ., getType, (, ), ;, if, (, valueHasSideEffects, ), {, boolean, readsState, =, false, ;, if, (]
[type, =, nextNode, ., getType, (, ), ;, if, (, valueHasSideEffects, ), {, boolean, readsState, =, false, ;, if, (]
[=, nextNode, ., getType, (, ), ;, if, (, valueHasSideEffects, ), {, boolean, readsState, =, false, ;, if, (, (]
[=, nextNode, ., getType, (, ), ;, if, (, valueHasSideEffects, ), {, boolean, readsState, =, false, ;, if, (, (]
[=, nextNode, ., getType, (, ), ;, if, (, valueHasSideEffects, ), {, boolean, readsState, =, false, ;, if, (, (]
[;, if, (, valueHasSideEffects, ), {, boolean, readsState, =, false, ;, if, (, (, nextNode, ., isName, (, ), &&]
[if, (, valueHasSideEffects, ), {, boolean, readsState, =, false, ;, if, (, (, nextNode, ., isName, (, ), &&, !]
[if, (, valueHasSideEffects, ), {, boolean, readsState, =, false, ;, if, (, (, nextNode, ., isName, (, ), &&, !]
[{, boolean, readsState, =, false, ;, if, (, (, nextNode, ., isName, (, ), &&, !, varName, ., equals, (]
[{, boolean, readsState, =, false, ;, if, (, (, nextNode, ., isName, (, ), &&, !, varName, ., equals, (]
[(, nextNode, ., isName, (, ), &&, !, varName, ., equals, (, nextNode, ., getString, (, ), ), ), ||]
[nextNode, ., isName, (, ), &&, !, varName, ., equals, (, nextNode, ., getString, (, ), ), ), ||, (]
[nextNode, ., isName, (, ), &&, !, varName, ., equals, (, nextNode, ., getString, (, ), ), ), ||, (]
[nextNode, ., isName, (, ), &&, !, varName, ., equals, (, nextNode, ., getString, (, ), ), ), ||, (]
[!, varName, ., equals, (, nextNode, ., getString, (, ), ), ), ||, (, nextNode, ., isGetProp, (, ), ||]
[!, varName, ., equals, (, nextNode, ., getString, (, ), ), ), ||, (, nextNode, ., isGetProp, (, ), ||]
[), ), ||, (, nextNode, ., isGetProp, (, ), ||, nextNode, ., isGetElem, (, ), ), ), {, if, (]
[), ), ||, (, nextNode, ., isGetProp, (, ), ||, nextNode, ., isGetElem, (, ), ), ), {, if, (]
[), ), ||, (, nextNode, ., isGetProp, (, ), ||, nextNode, ., isGetElem, (, ), ), ), {, if, (]
[||, (, nextNode, ., isGetProp, (, ), ||, nextNode, ., isGetElem, (, ), ), ), {, if, (, nextParent, ==]
[nextNode, ., isGetProp, (, ), ||, nextNode, ., isGetElem, (, ), ), ), {, if, (, nextParent, ==, null, ||]
[., isGetProp, (, ), ||, nextNode, ., isGetElem, (, ), ), ), {, if, (, nextParent, ==, null, ||, !]
[., isGetProp, (, ), ||, nextNode, ., isGetElem, (, ), ), ), {, if, (, nextParent, ==, null, ||, !]
[||, nextNode, ., isGetElem, (, ), ), ), {, if, (, nextParent, ==, null, ||, !, NodeUtil, ., isVarOrSimpleAssignLhs, (]
[., isGetElem, (, ), ), ), {, if, (, nextParent, ==, null, ||, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, nextNode, ,]
[), ), {, if, (, nextParent, ==, null, ||, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, nextNode, ,, nextParent, ), ), {]
[{, if, (, nextParent, ==, null, ||, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, nextNode, ,, nextParent, ), ), {, readsState, =]
[!, NodeUtil, ., isVarOrSimpleAssignLhs, (, nextNode, ,, nextParent, ), ), {, readsState, =, true, ;, }, }, else, if, (]
[!, NodeUtil, ., isVarOrSimpleAssignLhs, (, nextNode, ,, nextParent, ), ), {, readsState, =, true, ;, }, }, else, if, (]
[!, NodeUtil, ., isVarOrSimpleAssignLhs, (, nextNode, ,, nextParent, ), ), {, readsState, =, true, ;, }, }, else, if, (]
[,, nextParent, ), ), {, readsState, =, true, ;, }, }, else, if, (, nextNode, ., isCall, (, ), ||]
[,, nextParent, ), ), {, readsState, =, true, ;, }, }, else, if, (, nextNode, ., isCall, (, ), ||]
[true, ;, }, }, else, if, (, nextNode, ., isCall, (, ), ||, nextNode, ., isNew, (, ), ), {]
[}, }, else, if, (, nextNode, ., isCall, (, ), ||, nextNode, ., isNew, (, ), ), {, readsState, =]
[nextNode, ., isCall, (, ), ||, nextNode, ., isNew, (, ), ), {, readsState, =, true, ;, }, if, (]
[(, ), ||, nextNode, ., isNew, (, ), ), {, readsState, =, true, ;, }, if, (, readsState, ), {]
[||, nextNode, ., isNew, (, ), ), {, readsState, =, true, ;, }, if, (, readsState, ), {, lookAhead, =]
[readsState, =, true, ;, }, if, (, readsState, ), {, lookAhead, =, null, ;, return, ;, }, }, if, (]
[readsState, =, true, ;, }, if, (, readsState, ), {, lookAhead, =, null, ;, return, ;, }, }, if, (]
[readsState, =, true, ;, }, if, (, readsState, ), {, lookAhead, =, null, ;, return, ;, }, }, if, (]
[readsState, =, true, ;, }, if, (, readsState, ), {, lookAhead, =, null, ;, return, ;, }, }, if, (]
[}, if, (, readsState, ), {, lookAhead, =, null, ;, return, ;, }, }, if, (, NodeUtil, ., nodeTypeMayHaveSideEffects, (]
[readsState, ), {, lookAhead, =, null, ;, return, ;, }, }, if, (, NodeUtil, ., nodeTypeMayHaveSideEffects, (, nextNode, ), &&]
[readsState, ), {, lookAhead, =, null, ;, return, ;, }, }, if, (, NodeUtil, ., nodeTypeMayHaveSideEffects, (, nextNode, ), &&]
[{, lookAhead, =, null, ;, return, ;, }, }, if, (, NodeUtil, ., nodeTypeMayHaveSideEffects, (, nextNode, ), &&, type, !=]
[{, lookAhead, =, null, ;, return, ;, }, }, if, (, NodeUtil, ., nodeTypeMayHaveSideEffects, (, nextNode, ), &&, type, !=]
[;, return, ;, }, }, if, (, NodeUtil, ., nodeTypeMayHaveSideEffects, (, nextNode, ), &&, type, !=, Token, ., NAME, ||]
[;, return, ;, }, }, if, (, NodeUtil, ., nodeTypeMayHaveSideEffects, (, nextNode, ), &&, type, !=, Token, ., NAME, ||]
[;, return, ;, }, }, if, (, NodeUtil, ., nodeTypeMayHaveSideEffects, (, nextNode, ), &&, type, !=, Token, ., NAME, ||]
[;, }, }, if, (, NodeUtil, ., nodeTypeMayHaveSideEffects, (, nextNode, ), &&, type, !=, Token, ., NAME, ||, type, ==]
[;, }, }, if, (, NodeUtil, ., nodeTypeMayHaveSideEffects, (, nextNode, ), &&, type, !=, Token, ., NAME, ||, type, ==]
[(, NodeUtil, ., nodeTypeMayHaveSideEffects, (, nextNode, ), &&, type, !=, Token, ., NAME, ||, type, ==, Token, ., NAME, &&]
[(, NodeUtil, ., nodeTypeMayHaveSideEffects, (, nextNode, ), &&, type, !=, Token, ., NAME, ||, type, ==, Token, ., NAME, &&]
[&&, type, !=, Token, ., NAME, ||, type, ==, Token, ., NAME, &&, nextParent, ., isCatch, (, ), ), {]
[!=, Token, ., NAME, ||, type, ==, Token, ., NAME, &&, nextParent, ., isCatch, (, ), ), {, lookAhead, =]
[type, ==, Token, ., NAME, &&, nextParent, ., isCatch, (, ), ), {, lookAhead, =, null, ;, return, ;, }]
[Token, ., NAME, &&, nextParent, ., isCatch, (, ), ), {, lookAhead, =, null, ;, return, ;, }, lookAhead, =]
