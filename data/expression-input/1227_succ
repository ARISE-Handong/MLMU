[;, static, final, Paint, DEFAULT_DIAL_BACKGROUND_PAINT, =, Color, ., black, ;, static, final, Paint, DEFAULT_NEEDLE_PAINT, =, Color, ., green, ;, static]
[;, static, final, Paint, DEFAULT_NEEDLE_PAINT, =, Color, ., green, ;, static, final, Font, DEFAULT_VALUE_FONT, =, new, Font, (, "Tahoma", ,]
[., black, ;, static, final, Paint, DEFAULT_NEEDLE_PAINT, =, Color, ., green, ;, static, final, Font, DEFAULT_VALUE_FONT, =, new, Font, (]
[;, static, final, Font, DEFAULT_VALUE_FONT, =, new, Font, (, "Tahoma", ,, Font, ., BOLD, ,, 12, ), ;, static, final]
[., green, ;, static, final, Font, DEFAULT_VALUE_FONT, =, new, Font, (, "Tahoma", ,, Font, ., BOLD, ,, 12, ), ;]
[;, static, final, Paint, DEFAULT_VALUE_PAINT, =, Color, ., yellow, ;, public, static, final, int, DEFAULT_METER_ANGLE, =, 270, ;, public, static]
[,, Font, ., BOLD, ,, 12, ), ;, static, final, Paint, DEFAULT_VALUE_PAINT, =, Color, ., yellow, ;, public, static, final]
[,, 12, ), ;, static, final, Paint, DEFAULT_VALUE_PAINT, =, Color, ., yellow, ;, public, static, final, int, DEFAULT_METER_ANGLE, =, 270]
[., BOLD, ,, 12, ), ;, static, final, Paint, DEFAULT_VALUE_PAINT, =, Color, ., yellow, ;, public, static, final, int, DEFAULT_METER_ANGLE]
[), ;, static, final, Paint, DEFAULT_VALUE_PAINT, =, Color, ., yellow, ;, public, static, final, int, DEFAULT_METER_ANGLE, =, 270, ;, public]
[;, public, static, final, int, DEFAULT_METER_ANGLE, =, 270, ;, public, static, final, float, DEFAULT_BORDER_SIZE, =, 3f, ;, public, static, final]
[., yellow, ;, public, static, final, int, DEFAULT_METER_ANGLE, =, 270, ;, public, static, final, float, DEFAULT_BORDER_SIZE, =, 3f, ;, public]
[;, public, static, final, float, DEFAULT_BORDER_SIZE, =, 3f, ;, public, static, final, float, DEFAULT_CIRCLE_SIZE, =, 10f, ;, public, static, final]
[;, public, static, final, float, DEFAULT_CIRCLE_SIZE, =, 10f, ;, public, static, final, Font, DEFAULT_LABEL_FONT, =, new, Font, (, "Tahoma", ,]
[;, public, static, final, Font, DEFAULT_LABEL_FONT, =, new, Font, (, "Tahoma", ,, Font, ., BOLD, ,, 10, ), ;, private]
[;, private, ValueDataset, dataset, ;, private, DialShape, shape, ;, private, int, meterAngle, ;, private, Range, range, ;, private, double, tickSize]
[,, Font, ., BOLD, ,, 10, ), ;, private, ValueDataset, dataset, ;, private, DialShape, shape, ;, private, int, meterAngle, ;]
[,, 10, ), ;, private, ValueDataset, dataset, ;, private, DialShape, shape, ;, private, int, meterAngle, ;, private, Range, range, ;]
[., BOLD, ,, 10, ), ;, private, ValueDataset, dataset, ;, private, DialShape, shape, ;, private, int, meterAngle, ;, private, Range]
[), ;, private, ValueDataset, dataset, ;, private, DialShape, shape, ;, private, int, meterAngle, ;, private, Range, range, ;, private, double]
[;, private, List, intervals, ;, public, MeterPlot, (, ), {, this, (, null, ), ;, }, public, MeterPlot, (, ValueDataset]
[., getBundle, (, "org.jfree.chart.plot.LocalizationBundle", ), ;, private, List, intervals, ;, public, MeterPlot, (, ), {, this, (, null, ), ;]
[), ;, private, List, intervals, ;, public, MeterPlot, (, ), {, this, (, null, ), ;, }, public, MeterPlot, (]
[), ;, }, public, MeterPlot, (, ValueDataset, dataset, ), {, super, (, ), ;, this, ., shape, =, DialShape, .]
[=, DialShape, ., CIRCLE, ;, this, ., meterAngle, =, DEFAULT_METER_ANGLE, ;, this, ., range, =, new, Range, (, 0.0, ,]
[., shape, =, DialShape, ., CIRCLE, ;, this, ., meterAngle, =, DEFAULT_METER_ANGLE, ;, this, ., range, =, new, Range, (]
[;, this, ., meterAngle, =, DEFAULT_METER_ANGLE, ;, this, ., range, =, new, Range, (, 0.0, ,, 100.0, ), ;, this]
[., CIRCLE, ;, this, ., meterAngle, =, DEFAULT_METER_ANGLE, ;, this, ., range, =, new, Range, (, 0.0, ,, 100.0, )]
[=, DEFAULT_METER_ANGLE, ;, this, ., range, =, new, Range, (, 0.0, ,, 100.0, ), ;, this, ., tickSize, =, 10.0]
[., meterAngle, =, DEFAULT_METER_ANGLE, ;, this, ., range, =, new, Range, (, 0.0, ,, 100.0, ), ;, this, ., tickSize]
[;, this, ., range, =, new, Range, (, 0.0, ,, 100.0, ), ;, this, ., tickSize, =, 10.0, ;, this]
[=, new, Range, (, 0.0, ,, 100.0, ), ;, this, ., tickSize, =, 10.0, ;, this, ., tickPaint, =, Color]
[., range, =, new, Range, (, 0.0, ,, 100.0, ), ;, this, ., tickSize, =, 10.0, ;, this, ., tickPaint]
[;, this, ., tickSize, =, 10.0, ;, this, ., tickPaint, =, Color, ., white, ;, this, ., units, =, "Units"]
[,, 100.0, ), ;, this, ., tickSize, =, 10.0, ;, this, ., tickPaint, =, Color, ., white, ;, this, .]
[), ;, this, ., tickSize, =, 10.0, ;, this, ., tickPaint, =, Color, ., white, ;, this, ., units, =]
[=, 10.0, ;, this, ., tickPaint, =, Color, ., white, ;, this, ., units, =, "Units", ;, this, ., needlePaint]
[., tickSize, =, 10.0, ;, this, ., tickPaint, =, Color, ., white, ;, this, ., units, =, "Units", ;, this]
[;, this, ., tickPaint, =, Color, ., white, ;, this, ., units, =, "Units", ;, this, ., needlePaint, =, MeterPlot]
[=, Color, ., white, ;, this, ., units, =, "Units", ;, this, ., needlePaint, =, MeterPlot, ., DEFAULT_NEEDLE_PAINT, ;, this]
[., tickPaint, =, Color, ., white, ;, this, ., units, =, "Units", ;, this, ., needlePaint, =, MeterPlot, ., DEFAULT_NEEDLE_PAINT]
[;, this, ., units, =, "Units", ;, this, ., needlePaint, =, MeterPlot, ., DEFAULT_NEEDLE_PAINT, ;, this, ., tickLabelsVisible, =, true]
[., white, ;, this, ., units, =, "Units", ;, this, ., needlePaint, =, MeterPlot, ., DEFAULT_NEEDLE_PAINT, ;, this, ., tickLabelsVisible]
[=, "Units", ;, this, ., needlePaint, =, MeterPlot, ., DEFAULT_NEEDLE_PAINT, ;, this, ., tickLabelsVisible, =, true, ;, this, ., tickLabelFont]
[., units, =, "Units", ;, this, ., needlePaint, =, MeterPlot, ., DEFAULT_NEEDLE_PAINT, ;, this, ., tickLabelsVisible, =, true, ;, this]
[;, this, ., needlePaint, =, MeterPlot, ., DEFAULT_NEEDLE_PAINT, ;, this, ., tickLabelsVisible, =, true, ;, this, ., tickLabelFont, =, MeterPlot]
[=, MeterPlot, ., DEFAULT_NEEDLE_PAINT, ;, this, ., tickLabelsVisible, =, true, ;, this, ., tickLabelFont, =, MeterPlot, ., DEFAULT_LABEL_FONT, ;, this]
[., needlePaint, =, MeterPlot, ., DEFAULT_NEEDLE_PAINT, ;, this, ., tickLabelsVisible, =, true, ;, this, ., tickLabelFont, =, MeterPlot, ., DEFAULT_LABEL_FONT]
[;, this, ., tickLabelsVisible, =, true, ;, this, ., tickLabelFont, =, MeterPlot, ., DEFAULT_LABEL_FONT, ;, this, ., tickLabelPaint, =, Color]
[., DEFAULT_NEEDLE_PAINT, ;, this, ., tickLabelsVisible, =, true, ;, this, ., tickLabelFont, =, MeterPlot, ., DEFAULT_LABEL_FONT, ;, this, ., tickLabelPaint]
[=, true, ;, this, ., tickLabelFont, =, MeterPlot, ., DEFAULT_LABEL_FONT, ;, this, ., tickLabelPaint, =, Color, ., black, ;, this]
[., tickLabelsVisible, =, true, ;, this, ., tickLabelFont, =, MeterPlot, ., DEFAULT_LABEL_FONT, ;, this, ., tickLabelPaint, =, Color, ., black]
[;, this, ., tickLabelFont, =, MeterPlot, ., DEFAULT_LABEL_FONT, ;, this, ., tickLabelPaint, =, Color, ., black, ;, this, ., tickLabelFormat]
[=, MeterPlot, ., DEFAULT_LABEL_FONT, ;, this, ., tickLabelPaint, =, Color, ., black, ;, this, ., tickLabelFormat, =, NumberFormat, ., getInstance]
[., tickLabelFont, =, MeterPlot, ., DEFAULT_LABEL_FONT, ;, this, ., tickLabelPaint, =, Color, ., black, ;, this, ., tickLabelFormat, =, NumberFormat]
[;, this, ., tickLabelPaint, =, Color, ., black, ;, this, ., tickLabelFormat, =, NumberFormat, ., getInstance, (, ), ;, this]
[., DEFAULT_LABEL_FONT, ;, this, ., tickLabelPaint, =, Color, ., black, ;, this, ., tickLabelFormat, =, NumberFormat, ., getInstance, (, )]
[=, Color, ., black, ;, this, ., tickLabelFormat, =, NumberFormat, ., getInstance, (, ), ;, this, ., valueFont, =, MeterPlot]
[., tickLabelPaint, =, Color, ., black, ;, this, ., tickLabelFormat, =, NumberFormat, ., getInstance, (, ), ;, this, ., valueFont]
[;, this, ., tickLabelFormat, =, NumberFormat, ., getInstance, (, ), ;, this, ., valueFont, =, MeterPlot, ., DEFAULT_VALUE_FONT, ;, this]
[., black, ;, this, ., tickLabelFormat, =, NumberFormat, ., getInstance, (, ), ;, this, ., valueFont, =, MeterPlot, ., DEFAULT_VALUE_FONT]
[=, NumberFormat, ., getInstance, (, ), ;, this, ., valueFont, =, MeterPlot, ., DEFAULT_VALUE_FONT, ;, this, ., valuePaint, =, MeterPlot]
[., tickLabelFormat, =, NumberFormat, ., getInstance, (, ), ;, this, ., valueFont, =, MeterPlot, ., DEFAULT_VALUE_FONT, ;, this, ., valuePaint]
[;, this, ., valueFont, =, MeterPlot, ., DEFAULT_VALUE_FONT, ;, this, ., valuePaint, =, MeterPlot, ., DEFAULT_VALUE_PAINT, ;, this, ., dialBackgroundPaint]
[., getInstance, (, ), ;, this, ., valueFont, =, MeterPlot, ., DEFAULT_VALUE_FONT, ;, this, ., valuePaint, =, MeterPlot, ., DEFAULT_VALUE_PAINT]
[=, MeterPlot, ., DEFAULT_VALUE_FONT, ;, this, ., valuePaint, =, MeterPlot, ., DEFAULT_VALUE_PAINT, ;, this, ., dialBackgroundPaint, =, MeterPlot, ., DEFAULT_DIAL_BACKGROUND_PAINT]
[., valueFont, =, MeterPlot, ., DEFAULT_VALUE_FONT, ;, this, ., valuePaint, =, MeterPlot, ., DEFAULT_VALUE_PAINT, ;, this, ., dialBackgroundPaint, =, MeterPlot]
[;, this, ., valuePaint, =, MeterPlot, ., DEFAULT_VALUE_PAINT, ;, this, ., dialBackgroundPaint, =, MeterPlot, ., DEFAULT_DIAL_BACKGROUND_PAINT, ;, this, ., intervals]
[., DEFAULT_VALUE_FONT, ;, this, ., valuePaint, =, MeterPlot, ., DEFAULT_VALUE_PAINT, ;, this, ., dialBackgroundPaint, =, MeterPlot, ., DEFAULT_DIAL_BACKGROUND_PAINT, ;, this]
[=, MeterPlot, ., DEFAULT_VALUE_PAINT, ;, this, ., dialBackgroundPaint, =, MeterPlot, ., DEFAULT_DIAL_BACKGROUND_PAINT, ;, this, ., intervals, =, new, java, .]
[., valuePaint, =, MeterPlot, ., DEFAULT_VALUE_PAINT, ;, this, ., dialBackgroundPaint, =, MeterPlot, ., DEFAULT_DIAL_BACKGROUND_PAINT, ;, this, ., intervals, =, new]
[;, this, ., dialBackgroundPaint, =, MeterPlot, ., DEFAULT_DIAL_BACKGROUND_PAINT, ;, this, ., intervals, =, new, java, ., util, ., ArrayList, (]
[., DEFAULT_VALUE_PAINT, ;, this, ., dialBackgroundPaint, =, MeterPlot, ., DEFAULT_DIAL_BACKGROUND_PAINT, ;, this, ., intervals, =, new, java, ., util, .]
[=, MeterPlot, ., DEFAULT_DIAL_BACKGROUND_PAINT, ;, this, ., intervals, =, new, java, ., util, ., ArrayList, (, ), ;, setDataset, (]
[., dialBackgroundPaint, =, MeterPlot, ., DEFAULT_DIAL_BACKGROUND_PAINT, ;, this, ., intervals, =, new, java, ., util, ., ArrayList, (, ), ;]
[;, this, ., intervals, =, new, java, ., util, ., ArrayList, (, ), ;, setDataset, (, dataset, ), ;, }]
[., DEFAULT_DIAL_BACKGROUND_PAINT, ;, this, ., intervals, =, new, java, ., util, ., ArrayList, (, ), ;, setDataset, (, dataset, )]
[=, new, java, ., util, ., ArrayList, (, ), ;, setDataset, (, dataset, ), ;, }, public, DialShape, getDialShape, (]
[., intervals, =, new, java, ., util, ., ArrayList, (, ), ;, setDataset, (, dataset, ), ;, }, public, DialShape]
[;, setDataset, (, dataset, ), ;, }, public, DialShape, getDialShape, (, ), {, return, this, ., shape, ;, }, public]
[;, }, public, DialShape, getDialShape, (, ), {, return, this, ., shape, ;, }, public, void, setDialShape, (, DialShape, shape]
[), ;, }, public, DialShape, getDialShape, (, ), {, return, this, ., shape, ;, }, public, void, setDialShape, (, DialShape]
[;, }, public, void, setDialShape, (, DialShape, shape, ), {, if, (, shape, ==, null, ), {, throw, new, IllegalArgumentException]
[., shape, ;, }, public, void, setDialShape, (, DialShape, shape, ), {, if, (, shape, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, this, ., shape, =, shape, ;, fireChangeEvent, (, ), ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, this, ., shape, =, shape, ;, fireChangeEvent, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, this, ., shape, =, shape, ;, fireChangeEvent, (, ), ;]
[;, }, this, ., shape, =, shape, ;, fireChangeEvent, (, ), ;, }, public, int, getMeterAngle, (, ), {, return]
[), ;, }, this, ., shape, =, shape, ;, fireChangeEvent, (, ), ;, }, public, int, getMeterAngle, (, ), {]
[=, shape, ;, fireChangeEvent, (, ), ;, }, public, int, getMeterAngle, (, ), {, return, this, ., meterAngle, ;, }]
[., shape, =, shape, ;, fireChangeEvent, (, ), ;, }, public, int, getMeterAngle, (, ), {, return, this, ., meterAngle]
[;, fireChangeEvent, (, ), ;, }, public, int, getMeterAngle, (, ), {, return, this, ., meterAngle, ;, }, public, void]
[;, }, public, int, getMeterAngle, (, ), {, return, this, ., meterAngle, ;, }, public, void, setMeterAngle, (, int, angle]
[;, }, public, void, setMeterAngle, (, int, angle, ), {, if, (, angle, <, 1, ||, angle, >, 360, )]
[., meterAngle, ;, }, public, void, setMeterAngle, (, int, angle, ), {, if, (, angle, <, 1, ||, angle, >]
[), {, throw, new, IllegalArgumentException, (, "Invalid 'angle' (", +, angle, +, ")", ), ;, }, this, ., meterAngle, =, angle, ;]
[||, angle, >, 360, ), {, throw, new, IllegalArgumentException, (, "Invalid 'angle' (", +, angle, +, ")", ), ;, }, this, .]
[<, 1, ||, angle, >, 360, ), {, throw, new, IllegalArgumentException, (, "Invalid 'angle' (", +, angle, +, ")", ), ;, }]
[||, angle, >, 360, ), {, throw, new, IllegalArgumentException, (, "Invalid 'angle' (", +, angle, +, ")", ), ;, }, this, .]
[), {, throw, new, IllegalArgumentException, (, "Invalid 'angle' (", +, angle, +, ")", ), ;, }, this, ., meterAngle, =, angle, ;]
[>, 360, ), {, throw, new, IllegalArgumentException, (, "Invalid 'angle' (", +, angle, +, ")", ), ;, }, this, ., meterAngle, =]
[), {, throw, new, IllegalArgumentException, (, "Invalid 'angle' (", +, angle, +, ")", ), ;, }, this, ., meterAngle, =, angle, ;]
[;, }, this, ., meterAngle, =, angle, ;, fireChangeEvent, (, ), ;, }, public, Range, getRange, (, ), {, return]
[), ;, }, this, ., meterAngle, =, angle, ;, fireChangeEvent, (, ), ;, }, public, Range, getRange, (, ), {]
[+, ")", ), ;, }, this, ., meterAngle, =, angle, ;, fireChangeEvent, (, ), ;, }, public, Range, getRange, (]
[+, angle, +, ")", ), ;, }, this, ., meterAngle, =, angle, ;, fireChangeEvent, (, ), ;, }, public, Range]
[+, ")", ), ;, }, this, ., meterAngle, =, angle, ;, fireChangeEvent, (, ), ;, }, public, Range, getRange, (]
[), ;, }, this, ., meterAngle, =, angle, ;, fireChangeEvent, (, ), ;, }, public, Range, getRange, (, ), {]
[=, angle, ;, fireChangeEvent, (, ), ;, }, public, Range, getRange, (, ), {, return, this, ., range, ;, }]
[., meterAngle, =, angle, ;, fireChangeEvent, (, ), ;, }, public, Range, getRange, (, ), {, return, this, ., range]
[;, fireChangeEvent, (, ), ;, }, public, Range, getRange, (, ), {, return, this, ., range, ;, }, public, void]
[;, }, public, Range, getRange, (, ), {, return, this, ., range, ;, }, public, void, setRange, (, Range, range]
[;, }, public, void, setRange, (, Range, range, ), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException]
[., range, ;, }, public, void, setRange, (, Range, range, ), {, if, (, range, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, if, (, !, (, range, ., getLength, (, ), >]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, if, (, !, (, range, ., getLength, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, if, (, !, (, range, ., getLength, (, ), >]
[;, }, if, (, !, (, range, ., getLength, (, ), >, 0.0, ), ), {, throw, new, IllegalArgumentException, (]
[), ;, }, if, (, !, (, range, ., getLength, (, ), >, 0.0, ), ), {, throw, new, IllegalArgumentException]
[), {, throw, new, IllegalArgumentException, (, "Range length must be positive.", ), ;, }, this, ., range, =, range, ;, fireChangeEvent, (, ), ;]
[), {, throw, new, IllegalArgumentException, (, "Range length must be positive.", ), ;, }, this, ., range, =, range, ;, fireChangeEvent, (, ), ;]
[), ), {, throw, new, IllegalArgumentException, (, "Range length must be positive.", ), ;, }, this, ., range, =, range, ;, fireChangeEvent, (, )]
[>, 0.0, ), ), {, throw, new, IllegalArgumentException, (, "Range length must be positive.", ), ;, }, this, ., range, =, range, ;, fireChangeEvent]
[., getLength, (, ), >, 0.0, ), ), {, throw, new, IllegalArgumentException, (, "Range length must be positive.", ), ;, }, this, ., range]
[), ), {, throw, new, IllegalArgumentException, (, "Range length must be positive.", ), ;, }, this, ., range, =, range, ;, fireChangeEvent, (, )]
[;, }, this, ., range, =, range, ;, fireChangeEvent, (, ), ;, }, public, double, getTickSize, (, ), {, return]
[), ;, }, this, ., range, =, range, ;, fireChangeEvent, (, ), ;, }, public, double, getTickSize, (, ), {]
[=, range, ;, fireChangeEvent, (, ), ;, }, public, double, getTickSize, (, ), {, return, this, ., tickSize, ;, }]
[., range, =, range, ;, fireChangeEvent, (, ), ;, }, public, double, getTickSize, (, ), {, return, this, ., tickSize]
[;, fireChangeEvent, (, ), ;, }, public, double, getTickSize, (, ), {, return, this, ., tickSize, ;, }, public, void]
[;, }, public, double, getTickSize, (, ), {, return, this, ., tickSize, ;, }, public, void, setTickSize, (, double, size]
[;, }, public, void, setTickSize, (, double, size, ), {, if, (, size, <=, 0, ), {, throw, new, IllegalArgumentException]
[., tickSize, ;, }, public, void, setTickSize, (, double, size, ), {, if, (, size, <=, 0, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Requires 'size' > 0.", ), ;, }, this, ., tickSize, =, size, ;, fireChangeEvent, (, ), ;]
[<=, 0, ), {, throw, new, IllegalArgumentException, (, "Requires 'size' > 0.", ), ;, }, this, ., tickSize, =, size, ;, fireChangeEvent, (]
[), {, throw, new, IllegalArgumentException, (, "Requires 'size' > 0.", ), ;, }, this, ., tickSize, =, size, ;, fireChangeEvent, (, ), ;]
[;, }, this, ., tickSize, =, size, ;, fireChangeEvent, (, ), ;, }, public, Paint, getTickPaint, (, ), {, return]
[), ;, }, this, ., tickSize, =, size, ;, fireChangeEvent, (, ), ;, }, public, Paint, getTickPaint, (, ), {]
[=, size, ;, fireChangeEvent, (, ), ;, }, public, Paint, getTickPaint, (, ), {, return, this, ., tickPaint, ;, }]
[., tickSize, =, size, ;, fireChangeEvent, (, ), ;, }, public, Paint, getTickPaint, (, ), {, return, this, ., tickPaint]
[;, fireChangeEvent, (, ), ;, }, public, Paint, getTickPaint, (, ), {, return, this, ., tickPaint, ;, }, public, void]
[;, }, public, Paint, getTickPaint, (, ), {, return, this, ., tickPaint, ;, }, public, void, setTickPaint, (, Paint, paint]
[;, }, public, void, setTickPaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException]
[., tickPaint, ;, }, public, void, setTickPaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., tickPaint, =, paint, ;, fireChangeEvent, (, ), ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., tickPaint, =, paint, ;, fireChangeEvent, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., tickPaint, =, paint, ;, fireChangeEvent, (, ), ;]
[;, }, this, ., tickPaint, =, paint, ;, fireChangeEvent, (, ), ;, }, public, String, getUnits, (, ), {, return]
[), ;, }, this, ., tickPaint, =, paint, ;, fireChangeEvent, (, ), ;, }, public, String, getUnits, (, ), {]
[=, paint, ;, fireChangeEvent, (, ), ;, }, public, String, getUnits, (, ), {, return, this, ., units, ;, }]
[., tickPaint, =, paint, ;, fireChangeEvent, (, ), ;, }, public, String, getUnits, (, ), {, return, this, ., units]
[;, fireChangeEvent, (, ), ;, }, public, String, getUnits, (, ), {, return, this, ., units, ;, }, public, void]
[;, }, public, String, getUnits, (, ), {, return, this, ., units, ;, }, public, void, setUnits, (, String, units]
[;, }, public, void, setUnits, (, String, units, ), {, this, ., units, =, units, ;, fireChangeEvent, (, ), ;]
[., units, ;, }, public, void, setUnits, (, String, units, ), {, this, ., units, =, units, ;, fireChangeEvent, (]
[=, units, ;, fireChangeEvent, (, ), ;, }, public, Paint, getNeedlePaint, (, ), {, return, this, ., needlePaint, ;, }]
[., units, =, units, ;, fireChangeEvent, (, ), ;, }, public, Paint, getNeedlePaint, (, ), {, return, this, ., needlePaint]
[;, fireChangeEvent, (, ), ;, }, public, Paint, getNeedlePaint, (, ), {, return, this, ., needlePaint, ;, }, public, void]
[;, }, public, Paint, getNeedlePaint, (, ), {, return, this, ., needlePaint, ;, }, public, void, setNeedlePaint, (, Paint, paint]
[;, }, public, void, setNeedlePaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException]
[., needlePaint, ;, }, public, void, setNeedlePaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., needlePaint, =, paint, ;, fireChangeEvent, (, ), ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., needlePaint, =, paint, ;, fireChangeEvent, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., needlePaint, =, paint, ;, fireChangeEvent, (, ), ;]
[;, }, this, ., needlePaint, =, paint, ;, fireChangeEvent, (, ), ;, }, public, boolean, getTickLabelsVisible, (, ), {, return]
[), ;, }, this, ., needlePaint, =, paint, ;, fireChangeEvent, (, ), ;, }, public, boolean, getTickLabelsVisible, (, ), {]
[=, paint, ;, fireChangeEvent, (, ), ;, }, public, boolean, getTickLabelsVisible, (, ), {, return, this, ., tickLabelsVisible, ;, }]
[., needlePaint, =, paint, ;, fireChangeEvent, (, ), ;, }, public, boolean, getTickLabelsVisible, (, ), {, return, this, ., tickLabelsVisible]
[;, fireChangeEvent, (, ), ;, }, public, boolean, getTickLabelsVisible, (, ), {, return, this, ., tickLabelsVisible, ;, }, public, void]
[;, }, public, boolean, getTickLabelsVisible, (, ), {, return, this, ., tickLabelsVisible, ;, }, public, void, setTickLabelsVisible, (, boolean, visible]
[;, }, public, void, setTickLabelsVisible, (, boolean, visible, ), {, if, (, this, ., tickLabelsVisible, !=, visible, ), {, this]
[., tickLabelsVisible, ;, }, public, void, setTickLabelsVisible, (, boolean, visible, ), {, if, (, this, ., tickLabelsVisible, !=, visible, )]
[), {, this, ., tickLabelsVisible, =, visible, ;, fireChangeEvent, (, ), ;, }, }, public, Font, getTickLabelFont, (, ), {]
[!=, visible, ), {, this, ., tickLabelsVisible, =, visible, ;, fireChangeEvent, (, ), ;, }, }, public, Font, getTickLabelFont, (]
[., tickLabelsVisible, !=, visible, ), {, this, ., tickLabelsVisible, =, visible, ;, fireChangeEvent, (, ), ;, }, }, public, Font]
[), {, this, ., tickLabelsVisible, =, visible, ;, fireChangeEvent, (, ), ;, }, }, public, Font, getTickLabelFont, (, ), {]
[=, visible, ;, fireChangeEvent, (, ), ;, }, }, public, Font, getTickLabelFont, (, ), {, return, this, ., tickLabelFont, ;]
[., tickLabelsVisible, =, visible, ;, fireChangeEvent, (, ), ;, }, }, public, Font, getTickLabelFont, (, ), {, return, this, .]
[;, fireChangeEvent, (, ), ;, }, }, public, Font, getTickLabelFont, (, ), {, return, this, ., tickLabelFont, ;, }, public]
[;, }, }, public, Font, getTickLabelFont, (, ), {, return, this, ., tickLabelFont, ;, }, public, void, setTickLabelFont, (, Font]
[;, }, public, void, setTickLabelFont, (, Font, font, ), {, if, (, font, ==, null, ), {, throw, new, IllegalArgumentException]
[., tickLabelFont, ;, }, public, void, setTickLabelFont, (, Font, font, ), {, if, (, font, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, if, (, !, this, ., tickLabelFont, ., equals, (, font]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, if, (, !, this, ., tickLabelFont, ., equals]
[), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, if, (, !, this, ., tickLabelFont, ., equals, (, font]
[;, }, if, (, !, this, ., tickLabelFont, ., equals, (, font, ), ), {, this, ., tickLabelFont, =, font]
[), ;, }, if, (, !, this, ., tickLabelFont, ., equals, (, font, ), ), {, this, ., tickLabelFont, =]
[), {, this, ., tickLabelFont, =, font, ;, fireChangeEvent, (, ), ;, }, }, public, Paint, getTickLabelPaint, (, ), {]
[), {, this, ., tickLabelFont, =, font, ;, fireChangeEvent, (, ), ;, }, }, public, Paint, getTickLabelPaint, (, ), {]
[., equals, (, font, ), ), {, this, ., tickLabelFont, =, font, ;, fireChangeEvent, (, ), ;, }, }, public]
[., tickLabelFont, ., equals, (, font, ), ), {, this, ., tickLabelFont, =, font, ;, fireChangeEvent, (, ), ;, }]
[), ), {, this, ., tickLabelFont, =, font, ;, fireChangeEvent, (, ), ;, }, }, public, Paint, getTickLabelPaint, (, )]
[=, font, ;, fireChangeEvent, (, ), ;, }, }, public, Paint, getTickLabelPaint, (, ), {, return, this, ., tickLabelPaint, ;]
[., tickLabelFont, =, font, ;, fireChangeEvent, (, ), ;, }, }, public, Paint, getTickLabelPaint, (, ), {, return, this, .]
[;, fireChangeEvent, (, ), ;, }, }, public, Paint, getTickLabelPaint, (, ), {, return, this, ., tickLabelPaint, ;, }, public]
[;, }, }, public, Paint, getTickLabelPaint, (, ), {, return, this, ., tickLabelPaint, ;, }, public, void, setTickLabelPaint, (, Paint]
[;, }, public, void, setTickLabelPaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException]
[., tickLabelPaint, ;, }, public, void, setTickLabelPaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, if, (, !, this, ., tickLabelPaint, ., equals, (, paint]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, if, (, !, this, ., tickLabelPaint, ., equals]
[), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, if, (, !, this, ., tickLabelPaint, ., equals, (, paint]
[;, }, if, (, !, this, ., tickLabelPaint, ., equals, (, paint, ), ), {, this, ., tickLabelPaint, =, paint]
[), ;, }, if, (, !, this, ., tickLabelPaint, ., equals, (, paint, ), ), {, this, ., tickLabelPaint, =]
[), {, this, ., tickLabelPaint, =, paint, ;, fireChangeEvent, (, ), ;, }, }, public, NumberFormat, getTickLabelFormat, (, ), {]
[), {, this, ., tickLabelPaint, =, paint, ;, fireChangeEvent, (, ), ;, }, }, public, NumberFormat, getTickLabelFormat, (, ), {]
[., equals, (, paint, ), ), {, this, ., tickLabelPaint, =, paint, ;, fireChangeEvent, (, ), ;, }, }, public]
[., tickLabelPaint, ., equals, (, paint, ), ), {, this, ., tickLabelPaint, =, paint, ;, fireChangeEvent, (, ), ;, }]
[), ), {, this, ., tickLabelPaint, =, paint, ;, fireChangeEvent, (, ), ;, }, }, public, NumberFormat, getTickLabelFormat, (, )]
[=, paint, ;, fireChangeEvent, (, ), ;, }, }, public, NumberFormat, getTickLabelFormat, (, ), {, return, this, ., tickLabelFormat, ;]
[., tickLabelPaint, =, paint, ;, fireChangeEvent, (, ), ;, }, }, public, NumberFormat, getTickLabelFormat, (, ), {, return, this, .]
[;, fireChangeEvent, (, ), ;, }, }, public, NumberFormat, getTickLabelFormat, (, ), {, return, this, ., tickLabelFormat, ;, }, public]
[;, }, }, public, NumberFormat, getTickLabelFormat, (, ), {, return, this, ., tickLabelFormat, ;, }, public, void, setTickLabelFormat, (, NumberFormat]
[;, }, public, void, setTickLabelFormat, (, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw, new, IllegalArgumentException]
[., tickLabelFormat, ;, }, public, void, setTickLabelFormat, (, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'format' argument.", ), ;, }, this, ., tickLabelFormat, =, format, ;, fireChangeEvent, (, ), ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'format' argument.", ), ;, }, this, ., tickLabelFormat, =, format, ;, fireChangeEvent, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'format' argument.", ), ;, }, this, ., tickLabelFormat, =, format, ;, fireChangeEvent, (, ), ;]
[;, }, this, ., tickLabelFormat, =, format, ;, fireChangeEvent, (, ), ;, }, public, Font, getValueFont, (, ), {, return]
[), ;, }, this, ., tickLabelFormat, =, format, ;, fireChangeEvent, (, ), ;, }, public, Font, getValueFont, (, ), {]
[=, format, ;, fireChangeEvent, (, ), ;, }, public, Font, getValueFont, (, ), {, return, this, ., valueFont, ;, }]
[., tickLabelFormat, =, format, ;, fireChangeEvent, (, ), ;, }, public, Font, getValueFont, (, ), {, return, this, ., valueFont]
[;, fireChangeEvent, (, ), ;, }, public, Font, getValueFont, (, ), {, return, this, ., valueFont, ;, }, public, void]
[;, }, public, Font, getValueFont, (, ), {, return, this, ., valueFont, ;, }, public, void, setValueFont, (, Font, font]
[;, }, public, void, setValueFont, (, Font, font, ), {, if, (, font, ==, null, ), {, throw, new, IllegalArgumentException]
[., valueFont, ;, }, public, void, setValueFont, (, Font, font, ), {, if, (, font, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, this, ., valueFont, =, font, ;, fireChangeEvent, (, ), ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, this, ., valueFont, =, font, ;, fireChangeEvent, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, this, ., valueFont, =, font, ;, fireChangeEvent, (, ), ;]
[;, }, this, ., valueFont, =, font, ;, fireChangeEvent, (, ), ;, }, public, Paint, getValuePaint, (, ), {, return]
[), ;, }, this, ., valueFont, =, font, ;, fireChangeEvent, (, ), ;, }, public, Paint, getValuePaint, (, ), {]
[=, font, ;, fireChangeEvent, (, ), ;, }, public, Paint, getValuePaint, (, ), {, return, this, ., valuePaint, ;, }]
[., valueFont, =, font, ;, fireChangeEvent, (, ), ;, }, public, Paint, getValuePaint, (, ), {, return, this, ., valuePaint]
[;, fireChangeEvent, (, ), ;, }, public, Paint, getValuePaint, (, ), {, return, this, ., valuePaint, ;, }, public, void]
[;, }, public, Paint, getValuePaint, (, ), {, return, this, ., valuePaint, ;, }, public, void, setValuePaint, (, Paint, paint]
[;, }, public, void, setValuePaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException]
[., valuePaint, ;, }, public, void, setValuePaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., valuePaint, =, paint, ;, fireChangeEvent, (, ), ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., valuePaint, =, paint, ;, fireChangeEvent, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., valuePaint, =, paint, ;, fireChangeEvent, (, ), ;]
[;, }, this, ., valuePaint, =, paint, ;, fireChangeEvent, (, ), ;, }, public, Paint, getDialBackgroundPaint, (, ), {, return]
[), ;, }, this, ., valuePaint, =, paint, ;, fireChangeEvent, (, ), ;, }, public, Paint, getDialBackgroundPaint, (, ), {]
[=, paint, ;, fireChangeEvent, (, ), ;, }, public, Paint, getDialBackgroundPaint, (, ), {, return, this, ., dialBackgroundPaint, ;, }]
[., valuePaint, =, paint, ;, fireChangeEvent, (, ), ;, }, public, Paint, getDialBackgroundPaint, (, ), {, return, this, ., dialBackgroundPaint]
[;, fireChangeEvent, (, ), ;, }, public, Paint, getDialBackgroundPaint, (, ), {, return, this, ., dialBackgroundPaint, ;, }, public, void]
[;, }, public, Paint, getDialBackgroundPaint, (, ), {, return, this, ., dialBackgroundPaint, ;, }, public, void, setDialBackgroundPaint, (, Paint, paint]
[;, }, public, void, setDialBackgroundPaint, (, Paint, paint, ), {, this, ., dialBackgroundPaint, =, paint, ;, fireChangeEvent, (, ), ;]
[., dialBackgroundPaint, ;, }, public, void, setDialBackgroundPaint, (, Paint, paint, ), {, this, ., dialBackgroundPaint, =, paint, ;, fireChangeEvent, (]
[=, paint, ;, fireChangeEvent, (, ), ;, }, public, boolean, getDrawBorder, (, ), {, return, this, ., drawBorder, ;, }]
[., dialBackgroundPaint, =, paint, ;, fireChangeEvent, (, ), ;, }, public, boolean, getDrawBorder, (, ), {, return, this, ., drawBorder]
[;, fireChangeEvent, (, ), ;, }, public, boolean, getDrawBorder, (, ), {, return, this, ., drawBorder, ;, }, public, void]
[;, }, public, boolean, getDrawBorder, (, ), {, return, this, ., drawBorder, ;, }, public, void, setDrawBorder, (, boolean, draw]
[;, }, public, void, setDrawBorder, (, boolean, draw, ), {, this, ., drawBorder, =, draw, ;, fireChangeEvent, (, ), ;]
[., drawBorder, ;, }, public, void, setDrawBorder, (, boolean, draw, ), {, this, ., drawBorder, =, draw, ;, fireChangeEvent, (]
[=, draw, ;, fireChangeEvent, (, ), ;, }, public, Paint, getDialOutlinePaint, (, ), {, return, this, ., dialOutlinePaint, ;, }]
[., drawBorder, =, draw, ;, fireChangeEvent, (, ), ;, }, public, Paint, getDialOutlinePaint, (, ), {, return, this, ., dialOutlinePaint]
[;, fireChangeEvent, (, ), ;, }, public, Paint, getDialOutlinePaint, (, ), {, return, this, ., dialOutlinePaint, ;, }, public, void]
[;, }, public, Paint, getDialOutlinePaint, (, ), {, return, this, ., dialOutlinePaint, ;, }, public, void, setDialOutlinePaint, (, Paint, paint]
[;, }, public, void, setDialOutlinePaint, (, Paint, paint, ), {, this, ., dialOutlinePaint, =, paint, ;, fireChangeEvent, (, ), ;]
[., dialOutlinePaint, ;, }, public, void, setDialOutlinePaint, (, Paint, paint, ), {, this, ., dialOutlinePaint, =, paint, ;, fireChangeEvent, (]
[=, paint, ;, fireChangeEvent, (, ), ;, }, public, ValueDataset, getDataset, (, ), {, return, this, ., dataset, ;, }]
[., dialOutlinePaint, =, paint, ;, fireChangeEvent, (, ), ;, }, public, ValueDataset, getDataset, (, ), {, return, this, ., dataset]
[;, fireChangeEvent, (, ), ;, }, public, ValueDataset, getDataset, (, ), {, return, this, ., dataset, ;, }, public, void]
[;, }, public, ValueDataset, getDataset, (, ), {, return, this, ., dataset, ;, }, public, void, setDataset, (, ValueDataset, dataset]
[;, }, public, void, setDataset, (, ValueDataset, dataset, ), {, ValueDataset, existing, =, this, ., dataset, ;, if, (, existing]
[., dataset, ;, }, public, void, setDataset, (, ValueDataset, dataset, ), {, ValueDataset, existing, =, this, ., dataset, ;, if]
[;, if, (, existing, !=, null, ), {, existing, ., removeChangeListener, (, this, ), ;, }, this, ., dataset, =]
[., dataset, ;, if, (, existing, !=, null, ), {, existing, ., removeChangeListener, (, this, ), ;, }, this, .]
[), {, existing, ., removeChangeListener, (, this, ), ;, }, this, ., dataset, =, dataset, ;, if, (, dataset, !=]
[!=, null, ), {, existing, ., removeChangeListener, (, this, ), ;, }, this, ., dataset, =, dataset, ;, if, (]
[), {, existing, ., removeChangeListener, (, this, ), ;, }, this, ., dataset, =, dataset, ;, if, (, dataset, !=]
[;, }, this, ., dataset, =, dataset, ;, if, (, dataset, !=, null, ), {, setDatasetGroup, (, dataset, ., getGroup]
[., removeChangeListener, (, this, ), ;, }, this, ., dataset, =, dataset, ;, if, (, dataset, !=, null, ), {]
[), ;, }, this, ., dataset, =, dataset, ;, if, (, dataset, !=, null, ), {, setDatasetGroup, (, dataset, .]
[=, dataset, ;, if, (, dataset, !=, null, ), {, setDatasetGroup, (, dataset, ., getGroup, (, ), ), ;, dataset]
[., dataset, =, dataset, ;, if, (, dataset, !=, null, ), {, setDatasetGroup, (, dataset, ., getGroup, (, ), )]
[;, if, (, dataset, !=, null, ), {, setDatasetGroup, (, dataset, ., getGroup, (, ), ), ;, dataset, ., addChangeListener]
[), {, setDatasetGroup, (, dataset, ., getGroup, (, ), ), ;, dataset, ., addChangeListener, (, this, ), ;, }, DatasetChangeEvent]
[!=, null, ), {, setDatasetGroup, (, dataset, ., getGroup, (, ), ), ;, dataset, ., addChangeListener, (, this, ), ;]
[), {, setDatasetGroup, (, dataset, ., getGroup, (, ), ), ;, dataset, ., addChangeListener, (, this, ), ;, }, DatasetChangeEvent]
[;, dataset, ., addChangeListener, (, this, ), ;, }, DatasetChangeEvent, event, =, new, DatasetChangeEvent, (, this, ,, dataset, ,, new]
[), ;, dataset, ., addChangeListener, (, this, ), ;, }, DatasetChangeEvent, event, =, new, DatasetChangeEvent, (, this, ,, dataset, ,]
[., getGroup, (, ), ), ;, dataset, ., addChangeListener, (, this, ), ;, }, DatasetChangeEvent, event, =, new, DatasetChangeEvent, (]
[;, }, DatasetChangeEvent, event, =, new, DatasetChangeEvent, (, this, ,, dataset, ,, new, DatasetChangeInfo, (, ), ), ;, datasetChanged, (]
[., addChangeListener, (, this, ), ;, }, DatasetChangeEvent, event, =, new, DatasetChangeEvent, (, this, ,, dataset, ,, new, DatasetChangeInfo, (]
[), ;, }, DatasetChangeEvent, event, =, new, DatasetChangeEvent, (, this, ,, dataset, ,, new, DatasetChangeInfo, (, ), ), ;, datasetChanged]
[;, datasetChanged, (, event, ), ;, }, public, List, getIntervals, (, ), {, return, Collections, ., unmodifiableList, (, this, .]
[,, dataset, ,, new, DatasetChangeInfo, (, ), ), ;, datasetChanged, (, event, ), ;, }, public, List, getIntervals, (, )]
[,, new, DatasetChangeInfo, (, ), ), ;, datasetChanged, (, event, ), ;, }, public, List, getIntervals, (, ), {, return]
[), ;, datasetChanged, (, event, ), ;, }, public, List, getIntervals, (, ), {, return, Collections, ., unmodifiableList, (, this]
[;, }, public, List, getIntervals, (, ), {, return, Collections, ., unmodifiableList, (, this, ., intervals, ), ;, }, public]
[), ;, }, public, List, getIntervals, (, ), {, return, Collections, ., unmodifiableList, (, this, ., intervals, ), ;, }]
[;, }, public, void, addInterval, (, MeterInterval, interval, ), {, if, (, interval, ==, null, ), {, throw, new, IllegalArgumentException]
[., unmodifiableList, (, this, ., intervals, ), ;, }, public, void, addInterval, (, MeterInterval, interval, ), {, if, (, interval]
[), ;, }, public, void, addInterval, (, MeterInterval, interval, ), {, if, (, interval, ==, null, ), {, throw, new]
[., intervals, ), ;, }, public, void, addInterval, (, MeterInterval, interval, ), {, if, (, interval, ==, null, ), {]
[), {, throw, new, IllegalArgumentException, (, "Null 'interval' argument.", ), ;, }, this, ., intervals, ., add, (, interval, ), ;, fireChangeEvent]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'interval' argument.", ), ;, }, this, ., intervals, ., add, (, interval, )]
[), {, throw, new, IllegalArgumentException, (, "Null 'interval' argument.", ), ;, }, this, ., intervals, ., add, (, interval, ), ;, fireChangeEvent]
[;, }, this, ., intervals, ., add, (, interval, ), ;, fireChangeEvent, (, ), ;, }, public, void, clearIntervals, (]
[), ;, }, this, ., intervals, ., add, (, interval, ), ;, fireChangeEvent, (, ), ;, }, public, void, clearIntervals]
[;, fireChangeEvent, (, ), ;, }, public, void, clearIntervals, (, ), {, this, ., intervals, ., clear, (, ), ;]
[., add, (, interval, ), ;, fireChangeEvent, (, ), ;, }, public, void, clearIntervals, (, ), {, this, ., intervals]
[., intervals, ., add, (, interval, ), ;, fireChangeEvent, (, ), ;, }, public, void, clearIntervals, (, ), {, this]
[), ;, fireChangeEvent, (, ), ;, }, public, void, clearIntervals, (, ), {, this, ., intervals, ., clear, (, )]
[;, }, public, void, clearIntervals, (, ), {, this, ., intervals, ., clear, (, ), ;, fireChangeEvent, (, ), ;]
[;, fireChangeEvent, (, ), ;, }, public, LegendItemCollection, getLegendItems, (, ), {, LegendItemCollection, result, =, new, LegendItemCollection, (, ), ;]
[., clear, (, ), ;, fireChangeEvent, (, ), ;, }, public, LegendItemCollection, getLegendItems, (, ), {, LegendItemCollection, result, =, new]
[., intervals, ., clear, (, ), ;, fireChangeEvent, (, ), ;, }, public, LegendItemCollection, getLegendItems, (, ), {, LegendItemCollection, result]
[;, }, public, LegendItemCollection, getLegendItems, (, ), {, LegendItemCollection, result, =, new, LegendItemCollection, (, ), ;, Iterator, iterator, =, this]
[;, Iterator, iterator, =, this, ., intervals, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), )]
[;, while, (, iterator, ., hasNext, (, ), ), {, MeterInterval, mi, =, (, MeterInterval, ), iterator, ., next, (]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, MeterInterval, mi, =, (, MeterInterval, )]
[., intervals, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, MeterInterval, mi, =, (]
[), {, MeterInterval, mi, =, (, MeterInterval, ), iterator, ., next, (, ), ;, Paint, color, =, mi, ., getBackgroundPaint]
[., hasNext, (, ), ), {, MeterInterval, mi, =, (, MeterInterval, ), iterator, ., next, (, ), ;, Paint, color]
[;, Paint, color, =, mi, ., getBackgroundPaint, (, ), ;, if, (, color, ==, null, ), {, color, =, mi]
[;, Paint, color, =, mi, ., getBackgroundPaint, (, ), ;, if, (, color, ==, null, ), {, color, =, mi]
[., next, (, ), ;, Paint, color, =, mi, ., getBackgroundPaint, (, ), ;, if, (, color, ==, null, )]
[;, if, (, color, ==, null, ), {, color, =, mi, ., getOutlinePaint, (, ), ;, }, LegendItem, item, =]
[., getBackgroundPaint, (, ), ;, if, (, color, ==, null, ), {, color, =, mi, ., getOutlinePaint, (, ), ;]
[), {, color, =, mi, ., getOutlinePaint, (, ), ;, }, LegendItem, item, =, new, LegendItem, (, mi, ., getLabel]
[==, null, ), {, color, =, mi, ., getOutlinePaint, (, ), ;, }, LegendItem, item, =, new, LegendItem, (, mi]
[), {, color, =, mi, ., getOutlinePaint, (, ), ;, }, LegendItem, item, =, new, LegendItem, (, mi, ., getLabel]
[=, mi, ., getOutlinePaint, (, ), ;, }, LegendItem, item, =, new, LegendItem, (, mi, ., getLabel, (, ), ,]
[;, }, LegendItem, item, =, new, LegendItem, (, mi, ., getLabel, (, ), ,, mi, ., getLabel, (, ), ,]
[., getOutlinePaint, (, ), ;, }, LegendItem, item, =, new, LegendItem, (, mi, ., getLabel, (, ), ,, mi, .]
[;, item, ., setDataset, (, getDataset, (, ), ), ;, result, ., add, (, item, ), ;, }, return, result]
[,, mi, ., getLabel, (, ), ,, null, ,, null, ,, new, Rectangle2D, ., Double, (, -, 4.0, ,, -]
[., getLabel, (, ), ,, mi, ., getLabel, (, ), ,, null, ,, null, ,, new, Rectangle2D, ., Double, (]
[,, null, ,, null, ,, new, Rectangle2D, ., Double, (, -, 4.0, ,, -, 4.0, ,, 8.0, ,, 8.0, )]
[., getLabel, (, ), ,, null, ,, null, ,, new, Rectangle2D, ., Double, (, -, 4.0, ,, -, 4.0, ,]
[,, null, ,, new, Rectangle2D, ., Double, (, -, 4.0, ,, -, 4.0, ,, 8.0, ,, 8.0, ), ,, color]
[,, new, Rectangle2D, ., Double, (, -, 4.0, ,, -, 4.0, ,, 8.0, ,, 8.0, ), ,, color, ), ;]
[,, color, ), ;, item, ., setDataset, (, getDataset, (, ), ), ;, result, ., add, (, item, ), ;]
[,, -, 4.0, ,, 8.0, ,, 8.0, ), ,, color, ), ;, item, ., setDataset, (, getDataset, (, ), )]
[,, -, 4.0, ,, 8.0, ,, 8.0, ), ,, color, ), ;, item, ., setDataset, (, getDataset, (, ), )]
[,, 8.0, ,, 8.0, ), ,, color, ), ;, item, ., setDataset, (, getDataset, (, ), ), ;, result, .]
[,, 8.0, ,, 8.0, ), ,, color, ), ;, item, ., setDataset, (, getDataset, (, ), ), ;, result, .]
[,, 8.0, ), ,, color, ), ;, item, ., setDataset, (, getDataset, (, ), ), ;, result, ., add, (]
[), ,, color, ), ;, item, ., setDataset, (, getDataset, (, ), ), ;, result, ., add, (, item, )]
[), ;, item, ., setDataset, (, getDataset, (, ), ), ;, result, ., add, (, item, ), ;, }, return]
[;, result, ., add, (, item, ), ;, }, return, result, ;, }, public, void, draw, (, Graphics2D, g2, ,]
[., setDataset, (, getDataset, (, ), ), ;, result, ., add, (, item, ), ;, }, return, result, ;, }]
[), ;, result, ., add, (, item, ), ;, }, return, result, ;, }, public, void, draw, (, Graphics2D, g2]
[;, }, return, result, ;, }, public, void, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ,, Point2D, anchor, ,, PlotState]
[., add, (, item, ), ;, }, return, result, ;, }, public, void, draw, (, Graphics2D, g2, ,, Rectangle2D, area]
[), ;, }, return, result, ;, }, public, void, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ,, Point2D, anchor, ,]
[;, }, public, void, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ,, Point2D, anchor, ,, PlotState, parentState, ,, PlotRenderingInfo, info]
[), {, info, ., setPlotArea, (, area, ), ;, }, RectangleInsets, insets, =, getInsets, (, ), ;, insets, ., trim]
[!=, null, ), {, info, ., setPlotArea, (, area, ), ;, }, RectangleInsets, insets, =, getInsets, (, ), ;, insets]
[), {, info, ., setPlotArea, (, area, ), ;, }, RectangleInsets, insets, =, getInsets, (, ), ;, insets, ., trim]
[;, }, RectangleInsets, insets, =, getInsets, (, ), ;, insets, ., trim, (, area, ), ;, area, ., setRect, (]
[., setPlotArea, (, area, ), ;, }, RectangleInsets, insets, =, getInsets, (, ), ;, insets, ., trim, (, area, )]
[), ;, }, RectangleInsets, insets, =, getInsets, (, ), ;, insets, ., trim, (, area, ), ;, area, ., setRect]
[;, insets, ., trim, (, area, ), ;, area, ., setRect, (, area, ., getX, (, ), +, 4, ,]
[;, area, ., setRect, (, area, ., getX, (, ), +, 4, ,, area, ., getY, (, ), +, 4]
[., trim, (, area, ), ;, area, ., setRect, (, area, ., getX, (, ), +, 4, ,, area, .]
[), ;, area, ., setRect, (, area, ., getX, (, ), +, 4, ,, area, ., getY, (, ), +]
[;, if, (, this, ., drawBorder, ), {, drawBackground, (, g2, ,, area, ), ;, }, double, gapHorizontal, =, (]
[., setRect, (, area, ., getX, (, ), +, 4, ,, area, ., getY, (, ), +, 4, ,, area]
[,, area, ., getY, (, ), +, 4, ,, area, ., getWidth, (, ), -, 8, ,, area, ., getHeight]
[+, 4, ,, area, ., getY, (, ), +, 4, ,, area, ., getWidth, (, ), -, 8, ,, area]
[., getX, (, ), +, 4, ,, area, ., getY, (, ), +, 4, ,, area, ., getWidth, (, )]
[,, area, ., getY, (, ), +, 4, ,, area, ., getWidth, (, ), -, 8, ,, area, ., getHeight]
[,, area, ., getWidth, (, ), -, 8, ,, area, ., getHeight, (, ), -, 8, ), ;, if, (]
[+, 4, ,, area, ., getWidth, (, ), -, 8, ,, area, ., getHeight, (, ), -, 8, ), ;]
[., getY, (, ), +, 4, ,, area, ., getWidth, (, ), -, 8, ,, area, ., getHeight, (, )]
[,, area, ., getWidth, (, ), -, 8, ,, area, ., getHeight, (, ), -, 8, ), ;, if, (]
[,, area, ., getHeight, (, ), -, 8, ), ;, if, (, this, ., drawBorder, ), {, drawBackground, (, g2]
[-, 8, ,, area, ., getHeight, (, ), -, 8, ), ;, if, (, this, ., drawBorder, ), {, drawBackground]
[., getWidth, (, ), -, 8, ,, area, ., getHeight, (, ), -, 8, ), ;, if, (, this, .]
[,, area, ., getHeight, (, ), -, 8, ), ;, if, (, this, ., drawBorder, ), {, drawBackground, (, g2]
[), ;, if, (, this, ., drawBorder, ), {, drawBackground, (, g2, ,, area, ), ;, }, double, gapHorizontal, =]
[-, 8, ), ;, if, (, this, ., drawBorder, ), {, drawBackground, (, g2, ,, area, ), ;, }, double]
[., getHeight, (, ), -, 8, ), ;, if, (, this, ., drawBorder, ), {, drawBackground, (, g2, ,, area]
[), ;, if, (, this, ., drawBorder, ), {, drawBackground, (, g2, ,, area, ), ;, }, double, gapHorizontal, =]
[), {, drawBackground, (, g2, ,, area, ), ;, }, double, gapHorizontal, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;, double]
[., drawBorder, ), {, drawBackground, (, g2, ,, area, ), ;, }, double, gapHorizontal, =, (, 2, *, DEFAULT_BORDER_SIZE, )]
[;, }, double, gapHorizontal, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;, double, gapVertical, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;]
[,, area, ), ;, }, double, gapHorizontal, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;, double, gapVertical, =, (, 2, *]
[), ;, }, double, gapHorizontal, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;, double, gapVertical, =, (, 2, *, DEFAULT_BORDER_SIZE, )]
[;, double, gapVertical, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;, double, meterX, =, area, ., getX, (, ), +, gapHorizontal]
[), ;, double, gapVertical, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;, double, meterX, =, area, ., getX, (, ), +]
[*, DEFAULT_BORDER_SIZE, ), ;, double, gapVertical, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;, double, meterX, =, area, ., getX, (]
[), ;, double, gapVertical, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;, double, meterX, =, area, ., getX, (, ), +]
[;, double, meterX, =, area, ., getX, (, ), +, gapHorizontal, /, 2, ;, double, meterY, =, area, ., getY]
[), ;, double, meterX, =, area, ., getX, (, ), +, gapHorizontal, /, 2, ;, double, meterY, =, area, .]
[*, DEFAULT_BORDER_SIZE, ), ;, double, meterX, =, area, ., getX, (, ), +, gapHorizontal, /, 2, ;, double, meterY, =]
[), ;, double, meterX, =, area, ., getX, (, ), +, gapHorizontal, /, 2, ;, double, meterY, =, area, .]
[;, double, meterY, =, area, ., getY, (, ), +, gapVertical, /, 2, ;, double, meterW, =, area, ., getWidth]
[+, gapHorizontal, /, 2, ;, double, meterY, =, area, ., getY, (, ), +, gapVertical, /, 2, ;, double, meterW]
[., getX, (, ), +, gapHorizontal, /, 2, ;, double, meterY, =, area, ., getY, (, ), +, gapVertical, /]
[;, double, meterY, =, area, ., getY, (, ), +, gapVertical, /, 2, ;, double, meterW, =, area, ., getWidth]
[/, 2, ;, double, meterY, =, area, ., getY, (, ), +, gapVertical, /, 2, ;, double, meterW, =, area]
[;, double, meterY, =, area, ., getY, (, ), +, gapVertical, /, 2, ;, double, meterW, =, area, ., getWidth]
[;, double, meterW, =, area, ., getWidth, (, ), -, gapHorizontal, ;, double, meterH, =, area, ., getHeight, (, )]
[+, gapVertical, /, 2, ;, double, meterW, =, area, ., getWidth, (, ), -, gapHorizontal, ;, double, meterH, =, area]
[., getY, (, ), +, gapVertical, /, 2, ;, double, meterW, =, area, ., getWidth, (, ), -, gapHorizontal, ;]
[;, double, meterW, =, area, ., getWidth, (, ), -, gapHorizontal, ;, double, meterH, =, area, ., getHeight, (, )]
[/, 2, ;, double, meterW, =, area, ., getWidth, (, ), -, gapHorizontal, ;, double, meterH, =, area, ., getHeight]
[;, double, meterW, =, area, ., getWidth, (, ), -, gapHorizontal, ;, double, meterH, =, area, ., getHeight, (, )]
[;, double, meterH, =, area, ., getHeight, (, ), -, gapVertical, +, (, (, this, ., meterAngle, <=, 180, )]
[-, gapHorizontal, ;, double, meterH, =, area, ., getHeight, (, ), -, gapVertical, +, (, (, this, ., meterAngle, <=]
[., getWidth, (, ), -, gapHorizontal, ;, double, meterH, =, area, ., getHeight, (, ), -, gapVertical, +, (, (]
[;, double, meterH, =, area, ., getHeight, (, ), -, gapVertical, +, (, (, this, ., meterAngle, <=, 180, )]
[;, double, min, =, Math, ., min, (, meterW, ,, meterH, ), /, 2, ;, meterX, =, (, meterX, +]
[+, (, (, this, ., meterAngle, <=, 180, ), &&, (, this, ., shape, !=, DialShape, ., CIRCLE, ), ?]
[-, gapVertical, +, (, (, this, ., meterAngle, <=, 180, ), &&, (, this, ., shape, !=, DialShape, ., CIRCLE]
[., getHeight, (, ), -, gapVertical, +, (, (, this, ., meterAngle, <=, 180, ), &&, (, this, ., shape]
[+, (, (, this, ., meterAngle, <=, 180, ), &&, (, this, ., shape, !=, DialShape, ., CIRCLE, ), ?]
[;, double, min, =, Math, ., min, (, meterW, ,, meterH, ), /, 2, ;, meterX, =, (, meterX, +]
[), ;, double, min, =, Math, ., min, (, meterW, ,, meterH, ), /, 2, ;, meterX, =, (, meterX]
[?, area, ., getHeight, (, ), /, 1.25, :, 0, ), ;, double, min, =, Math, ., min, (, meterW]
[&&, (, this, ., shape, !=, DialShape, ., CIRCLE, ), ?, area, ., getHeight, (, ), /, 1.25, :, 0]
[), &&, (, this, ., shape, !=, DialShape, ., CIRCLE, ), ?, area, ., getHeight, (, ), /, 1.25, :]
[<=, 180, ), &&, (, this, ., shape, !=, DialShape, ., CIRCLE, ), ?, area, ., getHeight, (, ), /]
[., meterAngle, <=, 180, ), &&, (, this, ., shape, !=, DialShape, ., CIRCLE, ), ?, area, ., getHeight, (]
[), &&, (, this, ., shape, !=, DialShape, ., CIRCLE, ), ?, area, ., getHeight, (, ), /, 1.25, :]
[?, area, ., getHeight, (, ), /, 1.25, :, 0, ), ;, double, min, =, Math, ., min, (, meterW]
[), ?, area, ., getHeight, (, ), /, 1.25, :, 0, ), ;, double, min, =, Math, ., min, (]
[!=, DialShape, ., CIRCLE, ), ?, area, ., getHeight, (, ), /, 1.25, :, 0, ), ;, double, min, =]
[., shape, !=, DialShape, ., CIRCLE, ), ?, area, ., getHeight, (, ), /, 1.25, :, 0, ), ;, double]
[), ?, area, ., getHeight, (, ), /, 1.25, :, 0, ), ;, double, min, =, Math, ., min, (]
[., CIRCLE, ), ?, area, ., getHeight, (, ), /, 1.25, :, 0, ), ;, double, min, =, Math, .]
[:, 0, ), ;, double, min, =, Math, ., min, (, meterW, ,, meterH, ), /, 2, ;, meterX, =]
[/, 1.25, :, 0, ), ;, double, min, =, Math, ., min, (, meterW, ,, meterH, ), /, 2, ;]
[., getHeight, (, ), /, 1.25, :, 0, ), ;, double, min, =, Math, ., min, (, meterW, ,, meterH]
[:, 0, ), ;, double, min, =, Math, ., min, (, meterW, ,, meterH, ), /, 2, ;, meterX, =]
[), ;, double, min, =, Math, ., min, (, meterW, ,, meterH, ), /, 2, ;, meterX, =, (, meterX]
[;, meterX, =, (, meterX, +, meterX, +, meterW, ), /, 2, -, min, ;, meterY, =, (, meterY, +]
[/, 2, ;, meterX, =, (, meterX, +, meterX, +, meterW, ), /, 2, -, min, ;, meterY, =, (]
[., min, (, meterW, ,, meterH, ), /, 2, ;, meterX, =, (, meterX, +, meterX, +, meterW, ), /]
[,, meterH, ), /, 2, ;, meterX, =, (, meterX, +, meterX, +, meterW, ), /, 2, -, min, ;]
[), /, 2, ;, meterX, =, (, meterX, +, meterX, +, meterW, ), /, 2, -, min, ;, meterY, =]
[;, meterX, =, (, meterX, +, meterX, +, meterW, ), /, 2, -, min, ;, meterY, =, (, meterY, +]
[=, (, meterX, +, meterX, +, meterW, ), /, 2, -, min, ;, meterY, =, (, meterY, +, meterY, +]
[;, meterY, =, (, meterY, +, meterY, +, meterH, ), /, 2, -, min, ;, meterW, =, 2, *, min]
[-, min, ;, meterY, =, (, meterY, +, meterY, +, meterH, ), /, 2, -, min, ;, meterW, =, 2]
[/, 2, -, min, ;, meterY, =, (, meterY, +, meterY, +, meterH, ), /, 2, -, min, ;, meterW]
[), /, 2, -, min, ;, meterY, =, (, meterY, +, meterY, +, meterH, ), /, 2, -, min, ;]
[+, meterW, ), /, 2, -, min, ;, meterY, =, (, meterY, +, meterY, +, meterH, ), /, 2, -]
[+, meterX, +, meterW, ), /, 2, -, min, ;, meterY, =, (, meterY, +, meterY, +, meterH, ), /]
[+, meterW, ), /, 2, -, min, ;, meterY, =, (, meterY, +, meterY, +, meterH, ), /, 2, -]
[), /, 2, -, min, ;, meterY, =, (, meterY, +, meterY, +, meterH, ), /, 2, -, min, ;]
[-, min, ;, meterY, =, (, meterY, +, meterY, +, meterH, ), /, 2, -, min, ;, meterW, =, 2]
[;, meterY, =, (, meterY, +, meterY, +, meterH, ), /, 2, -, min, ;, meterW, =, 2, *, min]
[=, (, meterY, +, meterY, +, meterH, ), /, 2, -, min, ;, meterW, =, 2, *, min, ;, meterH]
[;, meterW, =, 2, *, min, ;, meterH, =, 2, *, min, ;, Rectangle2D, meterArea, =, new, Rectangle2D, ., Double]
[-, min, ;, meterW, =, 2, *, min, ;, meterH, =, 2, *, min, ;, Rectangle2D, meterArea, =, new, Rectangle2D]
[/, 2, -, min, ;, meterW, =, 2, *, min, ;, meterH, =, 2, *, min, ;, Rectangle2D, meterArea, =]
[), /, 2, -, min, ;, meterW, =, 2, *, min, ;, meterH, =, 2, *, min, ;, Rectangle2D, meterArea]
[+, meterH, ), /, 2, -, min, ;, meterW, =, 2, *, min, ;, meterH, =, 2, *, min, ;]
[+, meterY, +, meterH, ), /, 2, -, min, ;, meterW, =, 2, *, min, ;, meterH, =, 2, *]
[+, meterH, ), /, 2, -, min, ;, meterW, =, 2, *, min, ;, meterH, =, 2, *, min, ;]
[), /, 2, -, min, ;, meterW, =, 2, *, min, ;, meterH, =, 2, *, min, ;, Rectangle2D, meterArea]
[-, min, ;, meterW, =, 2, *, min, ;, meterH, =, 2, *, min, ;, Rectangle2D, meterArea, =, new, Rectangle2D]
[;, meterW, =, 2, *, min, ;, meterH, =, 2, *, min, ;, Rectangle2D, meterArea, =, new, Rectangle2D, ., Double]
[=, 2, *, min, ;, meterH, =, 2, *, min, ;, Rectangle2D, meterArea, =, new, Rectangle2D, ., Double, (, meterX]
[;, meterH, =, 2, *, min, ;, Rectangle2D, meterArea, =, new, Rectangle2D, ., Double, (, meterX, ,, meterY, ,, meterW]
[*, min, ;, meterH, =, 2, *, min, ;, Rectangle2D, meterArea, =, new, Rectangle2D, ., Double, (, meterX, ,, meterY]
[;, meterH, =, 2, *, min, ;, Rectangle2D, meterArea, =, new, Rectangle2D, ., Double, (, meterX, ,, meterY, ,, meterW]
[=, 2, *, min, ;, Rectangle2D, meterArea, =, new, Rectangle2D, ., Double, (, meterX, ,, meterY, ,, meterW, ,, meterH]
[;, Rectangle2D, meterArea, =, new, Rectangle2D, ., Double, (, meterX, ,, meterY, ,, meterW, ,, meterH, ), ;, Rectangle2D, .]
[*, min, ;, Rectangle2D, meterArea, =, new, Rectangle2D, ., Double, (, meterX, ,, meterY, ,, meterW, ,, meterH, ), ;]
[;, Rectangle2D, meterArea, =, new, Rectangle2D, ., Double, (, meterX, ,, meterY, ,, meterW, ,, meterH, ), ;, Rectangle2D, .]
[;, Rectangle2D, ., Double, originalArea, =, new, Rectangle2D, ., Double, (, meterArea, ., getX, (, ), -, 4, ,, meterArea]
[,, meterY, ,, meterW, ,, meterH, ), ;, Rectangle2D, ., Double, originalArea, =, new, Rectangle2D, ., Double, (, meterArea, .]
[,, meterW, ,, meterH, ), ;, Rectangle2D, ., Double, originalArea, =, new, Rectangle2D, ., Double, (, meterArea, ., getX, (]
[,, meterH, ), ;, Rectangle2D, ., Double, originalArea, =, new, Rectangle2D, ., Double, (, meterArea, ., getX, (, ), -]
[), ;, Rectangle2D, ., Double, originalArea, =, new, Rectangle2D, ., Double, (, meterArea, ., getX, (, ), -, 4, ,]
[;, double, meterMiddleX, =, meterArea, ., getCenterX, (, ), ;, double, meterMiddleY, =, meterArea, ., getCenterY, (, ), ;, ValueDataset]
[,, meterArea, ., getY, (, ), -, 4, ,, meterArea, ., getWidth, (, ), +, 8, ,, meterArea, ., getHeight]
[-, 4, ,, meterArea, ., getY, (, ), -, 4, ,, meterArea, ., getWidth, (, ), +, 8, ,, meterArea]
[., getX, (, ), -, 4, ,, meterArea, ., getY, (, ), -, 4, ,, meterArea, ., getWidth, (, )]
[,, meterArea, ., getY, (, ), -, 4, ,, meterArea, ., getWidth, (, ), +, 8, ,, meterArea, ., getHeight]
[,, meterArea, ., getWidth, (, ), +, 8, ,, meterArea, ., getHeight, (, ), +, 8, ), ;, double, meterMiddleX]
[-, 4, ,, meterArea, ., getWidth, (, ), +, 8, ,, meterArea, ., getHeight, (, ), +, 8, ), ;]
[., getY, (, ), -, 4, ,, meterArea, ., getWidth, (, ), +, 8, ,, meterArea, ., getHeight, (, )]
[,, meterArea, ., getWidth, (, ), +, 8, ,, meterArea, ., getHeight, (, ), +, 8, ), ;, double, meterMiddleX]
[,, meterArea, ., getHeight, (, ), +, 8, ), ;, double, meterMiddleX, =, meterArea, ., getCenterX, (, ), ;, double]
[+, 8, ,, meterArea, ., getHeight, (, ), +, 8, ), ;, double, meterMiddleX, =, meterArea, ., getCenterX, (, )]
[., getWidth, (, ), +, 8, ,, meterArea, ., getHeight, (, ), +, 8, ), ;, double, meterMiddleX, =, meterArea]
[,, meterArea, ., getHeight, (, ), +, 8, ), ;, double, meterMiddleX, =, meterArea, ., getCenterX, (, ), ;, double]
[), ;, double, meterMiddleX, =, meterArea, ., getCenterX, (, ), ;, double, meterMiddleY, =, meterArea, ., getCenterY, (, ), ;]
[+, 8, ), ;, double, meterMiddleX, =, meterArea, ., getCenterX, (, ), ;, double, meterMiddleY, =, meterArea, ., getCenterY, (]
[., getHeight, (, ), +, 8, ), ;, double, meterMiddleX, =, meterArea, ., getCenterX, (, ), ;, double, meterMiddleY, =]
[), ;, double, meterMiddleX, =, meterArea, ., getCenterX, (, ), ;, double, meterMiddleY, =, meterArea, ., getCenterY, (, ), ;]
[;, double, meterMiddleY, =, meterArea, ., getCenterY, (, ), ;, ValueDataset, data, =, getDataset, (, ), ;, if, (, data]
[., getCenterX, (, ), ;, double, meterMiddleY, =, meterArea, ., getCenterY, (, ), ;, ValueDataset, data, =, getDataset, (, )]
[;, ValueDataset, data, =, getDataset, (, ), ;, if, (, data, !=, null, ), {, double, dataMin, =, this, .]
[., getCenterY, (, ), ;, ValueDataset, data, =, getDataset, (, ), ;, if, (, data, !=, null, ), {, double]
[;, if, (, data, !=, null, ), {, double, dataMin, =, this, ., range, ., getLowerBound, (, ), ;, double]
[), {, double, dataMin, =, this, ., range, ., getLowerBound, (, ), ;, double, dataMax, =, this, ., range, .]
[!=, null, ), {, double, dataMin, =, this, ., range, ., getLowerBound, (, ), ;, double, dataMax, =, this, .]
[), {, double, dataMin, =, this, ., range, ., getLowerBound, (, ), ;, double, dataMax, =, this, ., range, .]
[;, double, dataMax, =, this, ., range, ., getUpperBound, (, ), ;, Shape, savedClip, =, g2, ., getClip, (, )]
[., getLowerBound, (, ), ;, double, dataMax, =, this, ., range, ., getUpperBound, (, ), ;, Shape, savedClip, =, g2]
[., range, ., getLowerBound, (, ), ;, double, dataMax, =, this, ., range, ., getUpperBound, (, ), ;, Shape, savedClip]
[;, Shape, savedClip, =, g2, ., getClip, (, ), ;, g2, ., clip, (, originalArea, ), ;, Composite, originalComposite, =]
[., getUpperBound, (, ), ;, Shape, savedClip, =, g2, ., getClip, (, ), ;, g2, ., clip, (, originalArea, )]
[., range, ., getUpperBound, (, ), ;, Shape, savedClip, =, g2, ., getClip, (, ), ;, g2, ., clip, (]
[;, g2, ., clip, (, originalArea, ), ;, Composite, originalComposite, =, g2, ., getComposite, (, ), ;, g2, ., setComposite]
[., getClip, (, ), ;, g2, ., clip, (, originalArea, ), ;, Composite, originalComposite, =, g2, ., getComposite, (, )]
[;, Composite, originalComposite, =, g2, ., getComposite, (, ), ;, g2, ., setComposite, (, AlphaComposite, ., getInstance, (, AlphaComposite, .]
[., clip, (, originalArea, ), ;, Composite, originalComposite, =, g2, ., getComposite, (, ), ;, g2, ., setComposite, (, AlphaComposite]
[), ;, Composite, originalComposite, =, g2, ., getComposite, (, ), ;, g2, ., setComposite, (, AlphaComposite, ., getInstance, (, AlphaComposite]
[;, g2, ., setComposite, (, AlphaComposite, ., getInstance, (, AlphaComposite, ., SRC_OVER, ,, getForegroundAlpha, (, ), ), ), ;, if]
[., getComposite, (, ), ;, g2, ., setComposite, (, AlphaComposite, ., getInstance, (, AlphaComposite, ., SRC_OVER, ,, getForegroundAlpha, (, )]
[;, if, (, this, ., dialBackgroundPaint, !=, null, ), {, fillArc, (, g2, ,, originalArea, ,, dataMin, ,, dataMax, ,]
[., setComposite, (, AlphaComposite, ., getInstance, (, AlphaComposite, ., SRC_OVER, ,, getForegroundAlpha, (, ), ), ), ;, if, (, this]
[), ;, if, (, this, ., dialBackgroundPaint, !=, null, ), {, fillArc, (, g2, ,, originalArea, ,, dataMin, ,, dataMax]
[., getInstance, (, AlphaComposite, ., SRC_OVER, ,, getForegroundAlpha, (, ), ), ), ;, if, (, this, ., dialBackgroundPaint, !=, null]
[,, getForegroundAlpha, (, ), ), ), ;, if, (, this, ., dialBackgroundPaint, !=, null, ), {, fillArc, (, g2, ,]
[., SRC_OVER, ,, getForegroundAlpha, (, ), ), ), ;, if, (, this, ., dialBackgroundPaint, !=, null, ), {, fillArc, (]
[), ), ;, if, (, this, ., dialBackgroundPaint, !=, null, ), {, fillArc, (, g2, ,, originalArea, ,, dataMin, ,]
[), {, fillArc, (, g2, ,, originalArea, ,, dataMin, ,, dataMax, ,, this, ., dialBackgroundPaint, ,, true, ), ;, }]
[!=, null, ), {, fillArc, (, g2, ,, originalArea, ,, dataMin, ,, dataMax, ,, this, ., dialBackgroundPaint, ,, true, )]
[., dialBackgroundPaint, !=, null, ), {, fillArc, (, g2, ,, originalArea, ,, dataMin, ,, dataMax, ,, this, ., dialBackgroundPaint, ,]
[), {, fillArc, (, g2, ,, originalArea, ,, dataMin, ,, dataMax, ,, this, ., dialBackgroundPaint, ,, true, ), ;, }]
[;, }, drawTicks, (, g2, ,, meterArea, ,, dataMin, ,, dataMax, ), ;, drawArcForInterval, (, g2, ,, meterArea, ,, new]
[,, originalArea, ,, dataMin, ,, dataMax, ,, this, ., dialBackgroundPaint, ,, true, ), ;, }, drawTicks, (, g2, ,, meterArea]
[,, dataMin, ,, dataMax, ,, this, ., dialBackgroundPaint, ,, true, ), ;, }, drawTicks, (, g2, ,, meterArea, ,, dataMin]
[,, dataMax, ,, this, ., dialBackgroundPaint, ,, true, ), ;, }, drawTicks, (, g2, ,, meterArea, ,, dataMin, ,, dataMax]
[,, this, ., dialBackgroundPaint, ,, true, ), ;, }, drawTicks, (, g2, ,, meterArea, ,, dataMin, ,, dataMax, ), ;]
[,, true, ), ;, }, drawTicks, (, g2, ,, meterArea, ,, dataMin, ,, dataMax, ), ;, drawArcForInterval, (, g2, ,]
[., dialBackgroundPaint, ,, true, ), ;, }, drawTicks, (, g2, ,, meterArea, ,, dataMin, ,, dataMax, ), ;, drawArcForInterval, (]
[), ;, }, drawTicks, (, g2, ,, meterArea, ,, dataMin, ,, dataMax, ), ;, drawArcForInterval, (, g2, ,, meterArea, ,]
[;, drawArcForInterval, (, g2, ,, meterArea, ,, new, MeterInterval, (, "", ,, this, ., range, ,, this, ., dialOutlinePaint, ,]
[,, meterArea, ,, dataMin, ,, dataMax, ), ;, drawArcForInterval, (, g2, ,, meterArea, ,, new, MeterInterval, (, "", ,, this]
[,, dataMin, ,, dataMax, ), ;, drawArcForInterval, (, g2, ,, meterArea, ,, new, MeterInterval, (, "", ,, this, ., range]
[,, dataMax, ), ;, drawArcForInterval, (, g2, ,, meterArea, ,, new, MeterInterval, (, "", ,, this, ., range, ,, this]
[), ;, drawArcForInterval, (, g2, ,, meterArea, ,, new, MeterInterval, (, "", ,, this, ., range, ,, this, ., dialOutlinePaint]
[;, Iterator, iterator, =, this, ., intervals, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), )]
[,, meterArea, ,, new, MeterInterval, (, "", ,, this, ., range, ,, this, ., dialOutlinePaint, ,, new, BasicStroke, (, 1.0f]
[,, new, MeterInterval, (, "", ,, this, ., range, ,, this, ., dialOutlinePaint, ,, new, BasicStroke, (, 1.0f, ), ,]
[), ;, Iterator, iterator, =, this, ., intervals, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, )]
[,, this, ., range, ,, this, ., dialOutlinePaint, ,, new, BasicStroke, (, 1.0f, ), ,, null, ), ), ;, Iterator]
[,, this, ., dialOutlinePaint, ,, new, BasicStroke, (, 1.0f, ), ,, null, ), ), ;, Iterator, iterator, =, this, .]
[., range, ,, this, ., dialOutlinePaint, ,, new, BasicStroke, (, 1.0f, ), ,, null, ), ), ;, Iterator, iterator, =]
[,, new, BasicStroke, (, 1.0f, ), ,, null, ), ), ;, Iterator, iterator, =, this, ., intervals, ., iterator, (]
[., dialOutlinePaint, ,, new, BasicStroke, (, 1.0f, ), ,, null, ), ), ;, Iterator, iterator, =, this, ., intervals, .]
[,, null, ), ), ;, Iterator, iterator, =, this, ., intervals, ., iterator, (, ), ;, while, (, iterator, .]
[), ,, null, ), ), ;, Iterator, iterator, =, this, ., intervals, ., iterator, (, ), ;, while, (, iterator]
[), ), ;, Iterator, iterator, =, this, ., intervals, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (]
[;, while, (, iterator, ., hasNext, (, ), ), {, MeterInterval, interval, =, (, MeterInterval, ), iterator, ., next, (]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, MeterInterval, interval, =, (, MeterInterval, )]
[., intervals, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, MeterInterval, interval, =, (]
[), {, MeterInterval, interval, =, (, MeterInterval, ), iterator, ., next, (, ), ;, drawArcForInterval, (, g2, ,, meterArea, ,]
[., hasNext, (, ), ), {, MeterInterval, interval, =, (, MeterInterval, ), iterator, ., next, (, ), ;, drawArcForInterval, (]
[;, drawArcForInterval, (, g2, ,, meterArea, ,, interval, ), ;, }, Number, n, =, data, ., getValue, (, ), ;]
[;, drawArcForInterval, (, g2, ,, meterArea, ,, interval, ), ;, }, Number, n, =, data, ., getValue, (, ), ;]
[., next, (, ), ;, drawArcForInterval, (, g2, ,, meterArea, ,, interval, ), ;, }, Number, n, =, data, .]
[;, }, Number, n, =, data, ., getValue, (, ), ;, if, (, n, !=, null, ), {, double, value]
[,, meterArea, ,, interval, ), ;, }, Number, n, =, data, ., getValue, (, ), ;, if, (, n, !=]
[,, interval, ), ;, }, Number, n, =, data, ., getValue, (, ), ;, if, (, n, !=, null, )]
[), ;, }, Number, n, =, data, ., getValue, (, ), ;, if, (, n, !=, null, ), {, double]
[;, if, (, n, !=, null, ), {, double, value, =, n, ., doubleValue, (, ), ;, drawValueLabel, (, g2]
[., getValue, (, ), ;, if, (, n, !=, null, ), {, double, value, =, n, ., doubleValue, (, )]
[), {, double, value, =, n, ., doubleValue, (, ), ;, drawValueLabel, (, g2, ,, meterArea, ), ;, if, (]
[!=, null, ), {, double, value, =, n, ., doubleValue, (, ), ;, drawValueLabel, (, g2, ,, meterArea, ), ;]
[), {, double, value, =, n, ., doubleValue, (, ), ;, drawValueLabel, (, g2, ,, meterArea, ), ;, if, (]
[;, drawValueLabel, (, g2, ,, meterArea, ), ;, if, (, this, ., range, ., contains, (, value, ), ), {]
[., doubleValue, (, ), ;, drawValueLabel, (, g2, ,, meterArea, ), ;, if, (, this, ., range, ., contains, (]
[;, if, (, this, ., range, ., contains, (, value, ), ), {, g2, ., setPaint, (, this, ., needlePaint]
[,, meterArea, ), ;, if, (, this, ., range, ., contains, (, value, ), ), {, g2, ., setPaint, (]
[), ;, if, (, this, ., range, ., contains, (, value, ), ), {, g2, ., setPaint, (, this, .]
[), {, g2, ., setPaint, (, this, ., needlePaint, ), ;, g2, ., setStroke, (, new, BasicStroke, (, 2.0f, )]
[., contains, (, value, ), ), {, g2, ., setPaint, (, this, ., needlePaint, ), ;, g2, ., setStroke, (]
[., range, ., contains, (, value, ), ), {, g2, ., setPaint, (, this, ., needlePaint, ), ;, g2, .]
[), ), {, g2, ., setPaint, (, this, ., needlePaint, ), ;, g2, ., setStroke, (, new, BasicStroke, (, 2.0f]
[;, g2, ., setStroke, (, new, BasicStroke, (, 2.0f, ), ), ;, double, radius, =, (, meterArea, ., getWidth, (]
[., setPaint, (, this, ., needlePaint, ), ;, g2, ., setStroke, (, new, BasicStroke, (, 2.0f, ), ), ;, double]
[), ;, g2, ., setStroke, (, new, BasicStroke, (, 2.0f, ), ), ;, double, radius, =, (, meterArea, ., getWidth]
[., needlePaint, ), ;, g2, ., setStroke, (, new, BasicStroke, (, 2.0f, ), ), ;, double, radius, =, (, meterArea]
[;, double, radius, =, (, meterArea, ., getWidth, (, ), /, 2, ), +, DEFAULT_BORDER_SIZE, +, 15, ;, double, valueAngle]
[., setStroke, (, new, BasicStroke, (, 2.0f, ), ), ;, double, radius, =, (, meterArea, ., getWidth, (, ), /]
[), ;, double, radius, =, (, meterArea, ., getWidth, (, ), /, 2, ), +, DEFAULT_BORDER_SIZE, +, 15, ;, double]
[), ), ;, double, radius, =, (, meterArea, ., getWidth, (, ), /, 2, ), +, DEFAULT_BORDER_SIZE, +, 15, ;]
[;, double, valueAngle, =, valueToAngle, (, value, ), ;, double, valueP1, =, meterMiddleX, +, (, radius, *, Math, ., cos]
[+, 15, ;, double, valueAngle, =, valueToAngle, (, value, ), ;, double, valueP1, =, meterMiddleX, +, (, radius, *, Math]
[+, DEFAULT_BORDER_SIZE, +, 15, ;, double, valueAngle, =, valueToAngle, (, value, ), ;, double, valueP1, =, meterMiddleX, +, (, radius]
[), +, DEFAULT_BORDER_SIZE, +, 15, ;, double, valueAngle, =, valueToAngle, (, value, ), ;, double, valueP1, =, meterMiddleX, +, (]
[/, 2, ), +, DEFAULT_BORDER_SIZE, +, 15, ;, double, valueAngle, =, valueToAngle, (, value, ), ;, double, valueP1, =, meterMiddleX]
[., getWidth, (, ), /, 2, ), +, DEFAULT_BORDER_SIZE, +, 15, ;, double, valueAngle, =, valueToAngle, (, value, ), ;]
[), +, DEFAULT_BORDER_SIZE, +, 15, ;, double, valueAngle, =, valueToAngle, (, value, ), ;, double, valueP1, =, meterMiddleX, +, (]
[+, 15, ;, double, valueAngle, =, valueToAngle, (, value, ), ;, double, valueP1, =, meterMiddleX, +, (, radius, *, Math]
[;, double, valueAngle, =, valueToAngle, (, value, ), ;, double, valueP1, =, meterMiddleX, +, (, radius, *, Math, ., cos]
[;, double, valueP1, =, meterMiddleX, +, (, radius, *, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /]
[), ;, double, valueP1, =, meterMiddleX, +, (, radius, *, Math, ., cos, (, Math, ., PI, *, (, valueAngle]
[;, double, valueP2, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /]
[+, (, radius, *, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;]
[;, double, valueP2, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /]
[), ;, double, valueP2, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle]
[*, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, double, valueP2, =]
[), ;, double, valueP2, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle]
[., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, double, valueP2, =, meterMiddleY, -]
[), ), ;, double, valueP2, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *, (]
[*, (, valueAngle, /, 180, ), ), ), ;, double, valueP2, =, meterMiddleY, -, (, radius, *, Math, ., sin]
[., PI, *, (, valueAngle, /, 180, ), ), ), ;, double, valueP2, =, meterMiddleY, -, (, radius, *, Math]
[), ), ;, double, valueP2, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *, (]
[), ), ), ;, double, valueP2, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *]
[/, 180, ), ), ), ;, double, valueP2, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, .]
[), ), ), ;, double, valueP2, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *]
[;, Polygon, arrow, =, new, Polygon, (, ), ;, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, )]
[-, (, radius, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;]
[;, Polygon, arrow, =, new, Polygon, (, ), ;, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, )]
[), ;, Polygon, arrow, =, new, Polygon, (, ), ;, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225]
[*, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, Polygon, arrow, =]
[), ;, Polygon, arrow, =, new, Polygon, (, ), ;, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225]
[., sin, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, Polygon, arrow, =, new, Polygon]
[), ), ;, Polygon, arrow, =, new, Polygon, (, ), ;, if, (, (, valueAngle, >, 135, &&, valueAngle, <]
[*, (, valueAngle, /, 180, ), ), ), ;, Polygon, arrow, =, new, Polygon, (, ), ;, if, (, (]
[., PI, *, (, valueAngle, /, 180, ), ), ), ;, Polygon, arrow, =, new, Polygon, (, ), ;, if]
[), ), ;, Polygon, arrow, =, new, Polygon, (, ), ;, if, (, (, valueAngle, >, 135, &&, valueAngle, <]
[), ), ), ;, Polygon, arrow, =, new, Polygon, (, ), ;, if, (, (, valueAngle, >, 135, &&, valueAngle]
[/, 180, ), ), ), ;, Polygon, arrow, =, new, Polygon, (, ), ;, if, (, (, valueAngle, >, 135]
[), ), ), ;, Polygon, arrow, =, new, Polygon, (, ), ;, if, (, (, valueAngle, >, 135, &&, valueAngle]
[;, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, ), ||, (, valueAngle, <, 45, &&, valueAngle, >]
[), {, double, valueP3, =, (, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, double, valueP4, =, (, meterMiddleY, +, DEFAULT_CIRCLE_SIZE]
[||, (, valueAngle, <, 45, &&, valueAngle, >, -, 45, ), ), {, double, valueP3, =, (, meterMiddleY, -, DEFAULT_CIRCLE_SIZE]
[), ||, (, valueAngle, <, 45, &&, valueAngle, >, -, 45, ), ), {, double, valueP3, =, (, meterMiddleY, -]
[&&, valueAngle, <, 225, ), ||, (, valueAngle, <, 45, &&, valueAngle, >, -, 45, ), ), {, double, valueP3]
[>, 135, &&, valueAngle, <, 225, ), ||, (, valueAngle, <, 45, &&, valueAngle, >, -, 45, ), ), {]
[&&, valueAngle, <, 225, ), ||, (, valueAngle, <, 45, &&, valueAngle, >, -, 45, ), ), {, double, valueP3]
[), ||, (, valueAngle, <, 45, &&, valueAngle, >, -, 45, ), ), {, double, valueP3, =, (, meterMiddleY, -]
[<, 225, ), ||, (, valueAngle, <, 45, &&, valueAngle, >, -, 45, ), ), {, double, valueP3, =, (]
[), ||, (, valueAngle, <, 45, &&, valueAngle, >, -, 45, ), ), {, double, valueP3, =, (, meterMiddleY, -]
[), {, double, valueP3, =, (, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, double, valueP4, =, (, meterMiddleY, +, DEFAULT_CIRCLE_SIZE]
[), ), {, double, valueP3, =, (, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, double, valueP4, =, (, meterMiddleY, +]
[&&, valueAngle, >, -, 45, ), ), {, double, valueP3, =, (, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, double]
[<, 45, &&, valueAngle, >, -, 45, ), ), {, double, valueP3, =, (, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 4, )]
[&&, valueAngle, >, -, 45, ), ), {, double, valueP3, =, (, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, double]
[), ), {, double, valueP3, =, (, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, double, valueP4, =, (, meterMiddleY, +]
[>, -, 45, ), ), {, double, valueP3, =, (, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, double, valueP4, =]
[), ), {, double, valueP3, =, (, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, double, valueP4, =, (, meterMiddleY, +]
[), ), {, double, valueP3, =, (, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, double, valueP4, =, (, meterMiddleY, +]
[;, double, valueP4, =, (, meterMiddleY, +, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, arrow, ., addPoint, (, (, int, ), meterMiddleX]
[), ;, double, valueP4, =, (, meterMiddleY, +, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, arrow, ., addPoint, (, (, int, )]
[-, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, double, valueP4, =, (, meterMiddleY, +, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, arrow, ., addPoint]
[), ;, double, valueP4, =, (, meterMiddleY, +, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, arrow, ., addPoint, (, (, int, )]
[/, 4, ), ;, double, valueP4, =, (, meterMiddleY, +, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, arrow, ., addPoint, (, (]
[), ;, double, valueP4, =, (, meterMiddleY, +, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, arrow, ., addPoint, (, (, int, )]
[;, arrow, ., addPoint, (, (, int, ), meterMiddleX, ,, (, int, ), valueP3, ), ;, arrow, ., addPoint, (]
[), ;, arrow, ., addPoint, (, (, int, ), meterMiddleX, ,, (, int, ), valueP3, ), ;, arrow, ., addPoint]
[+, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, arrow, ., addPoint, (, (, int, ), meterMiddleX, ,, (, int, ), valueP3, )]
[), ;, arrow, ., addPoint, (, (, int, ), meterMiddleX, ,, (, int, ), valueP3, ), ;, arrow, ., addPoint]
[/, 4, ), ;, arrow, ., addPoint, (, (, int, ), meterMiddleX, ,, (, int, ), valueP3, ), ;, arrow]
[), ;, arrow, ., addPoint, (, (, int, ), meterMiddleX, ,, (, int, ), valueP3, ), ;, arrow, ., addPoint]
[;, arrow, ., addPoint, (, (, int, ), meterMiddleX, ,, (, int, ), valueP4, ), ;, }, else, {, arrow]
[., addPoint, (, (, int, ), meterMiddleX, ,, (, int, ), valueP3, ), ;, arrow, ., addPoint, (, (, int]
[,, (, int, ), valueP3, ), ;, arrow, ., addPoint, (, (, int, ), meterMiddleX, ,, (, int, ), valueP4]
[,, (, int, ), valueP3, ), ;, arrow, ., addPoint, (, (, int, ), meterMiddleX, ,, (, int, ), valueP4]
[), ;, arrow, ., addPoint, (, (, int, ), meterMiddleX, ,, (, int, ), valueP4, ), ;, }, else, {]
[), ;, arrow, ., addPoint, (, (, int, ), meterMiddleX, ,, (, int, ), valueP4, ), ;, }, else, {]
[;, }, else, {, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ,, (]
[., addPoint, (, (, int, ), meterMiddleX, ,, (, int, ), valueP4, ), ;, }, else, {, arrow, ., addPoint]
[,, (, int, ), valueP4, ), ;, }, else, {, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, -]
[,, (, int, ), valueP4, ), ;, }, else, {, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, -]
[), ;, }, else, {, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ,]
[), ;, }, else, {, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ,]
[;, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, +, DEFAULT_CIRCLE_SIZE, /, 4, ), ,, (, int, ), meterMiddleY]
[., addPoint, (, (, int, ), (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ,, (, int, ), meterMiddleY, ), ;]
[,, (, int, ), meterMiddleY, ), ;, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, +, DEFAULT_CIRCLE_SIZE, /, 4]
[,, (, int, ), meterMiddleY, ), ;, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, +, DEFAULT_CIRCLE_SIZE, /, 4]
[), ,, (, int, ), meterMiddleY, ), ;, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, +, DEFAULT_CIRCLE_SIZE, /]
[-, DEFAULT_CIRCLE_SIZE, /, 4, ), ,, (, int, ), meterMiddleY, ), ;, arrow, ., addPoint, (, (, int, ), (]
[), ,, (, int, ), meterMiddleY, ), ;, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, +, DEFAULT_CIRCLE_SIZE, /]
[/, 4, ), ,, (, int, ), meterMiddleY, ), ;, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, +]
[), ,, (, int, ), meterMiddleY, ), ;, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, +, DEFAULT_CIRCLE_SIZE, /]
[), ;, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, +, DEFAULT_CIRCLE_SIZE, /, 4, ), ,, (, int, )]
[), ;, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, +, DEFAULT_CIRCLE_SIZE, /, 4, ), ,, (, int, )]
[;, }, arrow, ., addPoint, (, (, int, ), valueP1, ,, (, int, ), valueP2, ), ;, g2, ., fill]
[., addPoint, (, (, int, ), (, meterMiddleX, +, DEFAULT_CIRCLE_SIZE, /, 4, ), ,, (, int, ), meterMiddleY, ), ;]
[,, (, int, ), meterMiddleY, ), ;, }, arrow, ., addPoint, (, (, int, ), valueP1, ,, (, int, )]
[,, (, int, ), meterMiddleY, ), ;, }, arrow, ., addPoint, (, (, int, ), valueP1, ,, (, int, )]
[), ,, (, int, ), meterMiddleY, ), ;, }, arrow, ., addPoint, (, (, int, ), valueP1, ,, (, int]
[+, DEFAULT_CIRCLE_SIZE, /, 4, ), ,, (, int, ), meterMiddleY, ), ;, }, arrow, ., addPoint, (, (, int, )]
[), ,, (, int, ), meterMiddleY, ), ;, }, arrow, ., addPoint, (, (, int, ), valueP1, ,, (, int]
[/, 4, ), ,, (, int, ), meterMiddleY, ), ;, }, arrow, ., addPoint, (, (, int, ), valueP1, ,]
[), ,, (, int, ), meterMiddleY, ), ;, }, arrow, ., addPoint, (, (, int, ), valueP1, ,, (, int]
[), ;, }, arrow, ., addPoint, (, (, int, ), valueP1, ,, (, int, ), valueP2, ), ;, g2, .]
[), ;, }, arrow, ., addPoint, (, (, int, ), valueP1, ,, (, int, ), valueP2, ), ;, g2, .]
[;, g2, ., fill, (, arrow, ), ;, Ellipse2D, circle, =, new, Ellipse2D, ., Double, (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /]
[., addPoint, (, (, int, ), valueP1, ,, (, int, ), valueP2, ), ;, g2, ., fill, (, arrow, )]
[,, (, int, ), valueP2, ), ;, g2, ., fill, (, arrow, ), ;, Ellipse2D, circle, =, new, Ellipse2D, .]
[,, (, int, ), valueP2, ), ;, g2, ., fill, (, arrow, ), ;, Ellipse2D, circle, =, new, Ellipse2D, .]
[), ;, g2, ., fill, (, arrow, ), ;, Ellipse2D, circle, =, new, Ellipse2D, ., Double, (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE]
[), ;, g2, ., fill, (, arrow, ), ;, Ellipse2D, circle, =, new, Ellipse2D, ., Double, (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE]
[;, Ellipse2D, circle, =, new, Ellipse2D, ., Double, (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 2, ,, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 2]
[., fill, (, arrow, ), ;, Ellipse2D, circle, =, new, Ellipse2D, ., Double, (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 2, ,]
[), ;, Ellipse2D, circle, =, new, Ellipse2D, ., Double, (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 2, ,, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /]
[;, g2, ., fill, (, circle, ), ;, }, }, g2, ., setClip, (, savedClip, ), ;, g2, ., setComposite]
[,, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 2, ,, DEFAULT_CIRCLE_SIZE, ,, DEFAULT_CIRCLE_SIZE, ), ;, g2, ., fill, (, circle, ), ;, }]
[-, DEFAULT_CIRCLE_SIZE, /, 2, ,, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 2, ,, DEFAULT_CIRCLE_SIZE, ,, DEFAULT_CIRCLE_SIZE, ), ;, g2, ., fill, (]
[,, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 2, ,, DEFAULT_CIRCLE_SIZE, ,, DEFAULT_CIRCLE_SIZE, ), ;, g2, ., fill, (, circle, ), ;, }]
[/, 2, ,, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 2, ,, DEFAULT_CIRCLE_SIZE, ,, DEFAULT_CIRCLE_SIZE, ), ;, g2, ., fill, (, circle, )]
[,, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 2, ,, DEFAULT_CIRCLE_SIZE, ,, DEFAULT_CIRCLE_SIZE, ), ;, g2, ., fill, (, circle, ), ;, }]
[,, DEFAULT_CIRCLE_SIZE, ,, DEFAULT_CIRCLE_SIZE, ), ;, g2, ., fill, (, circle, ), ;, }, }, g2, ., setClip, (, savedClip]
[-, DEFAULT_CIRCLE_SIZE, /, 2, ,, DEFAULT_CIRCLE_SIZE, ,, DEFAULT_CIRCLE_SIZE, ), ;, g2, ., fill, (, circle, ), ;, }, }, g2]
[,, DEFAULT_CIRCLE_SIZE, ,, DEFAULT_CIRCLE_SIZE, ), ;, g2, ., fill, (, circle, ), ;, }, }, g2, ., setClip, (, savedClip]
[/, 2, ,, DEFAULT_CIRCLE_SIZE, ,, DEFAULT_CIRCLE_SIZE, ), ;, g2, ., fill, (, circle, ), ;, }, }, g2, ., setClip]
[,, DEFAULT_CIRCLE_SIZE, ,, DEFAULT_CIRCLE_SIZE, ), ;, g2, ., fill, (, circle, ), ;, }, }, g2, ., setClip, (, savedClip]
[,, DEFAULT_CIRCLE_SIZE, ), ;, g2, ., fill, (, circle, ), ;, }, }, g2, ., setClip, (, savedClip, ), ;]
[), ;, g2, ., fill, (, circle, ), ;, }, }, g2, ., setClip, (, savedClip, ), ;, g2, .]
[;, }, }, g2, ., setClip, (, savedClip, ), ;, g2, ., setComposite, (, originalComposite, ), ;, }, if, (]
[., fill, (, circle, ), ;, }, }, g2, ., setClip, (, savedClip, ), ;, g2, ., setComposite, (, originalComposite]
[), ;, }, }, g2, ., setClip, (, savedClip, ), ;, g2, ., setComposite, (, originalComposite, ), ;, }, if]
[;, g2, ., setComposite, (, originalComposite, ), ;, }, if, (, this, ., drawBorder, ), {, drawOutline, (, g2, ,]
[., setClip, (, savedClip, ), ;, g2, ., setComposite, (, originalComposite, ), ;, }, if, (, this, ., drawBorder, )]
[), ;, g2, ., setComposite, (, originalComposite, ), ;, }, if, (, this, ., drawBorder, ), {, drawOutline, (, g2]
[;, }, if, (, this, ., drawBorder, ), {, drawOutline, (, g2, ,, area, ), ;, }, }, protected, void]
[., setComposite, (, originalComposite, ), ;, }, if, (, this, ., drawBorder, ), {, drawOutline, (, g2, ,, area, )]
[), ;, }, if, (, this, ., drawBorder, ), {, drawOutline, (, g2, ,, area, ), ;, }, }, protected]
[), {, drawOutline, (, g2, ,, area, ), ;, }, }, protected, void, drawArcForInterval, (, Graphics2D, g2, ,, Rectangle2D, meterArea]
[., drawBorder, ), {, drawOutline, (, g2, ,, area, ), ;, }, }, protected, void, drawArcForInterval, (, Graphics2D, g2, ,]
[;, }, }, protected, void, drawArcForInterval, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, MeterInterval, interval, ), {, double, minValue, =]
[,, area, ), ;, }, }, protected, void, drawArcForInterval, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, MeterInterval, interval, ), {]
[), ;, }, }, protected, void, drawArcForInterval, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, MeterInterval, interval, ), {, double, minValue]
[;, double, maxValue, =, interval, ., getRange, (, ), ., getUpperBound, (, ), ;, Paint, outlinePaint, =, interval, ., getOutlinePaint]
[., getLowerBound, (, ), ;, double, maxValue, =, interval, ., getRange, (, ), ., getUpperBound, (, ), ;, Paint, outlinePaint]
[., getRange, (, ), ., getLowerBound, (, ), ;, double, maxValue, =, interval, ., getRange, (, ), ., getUpperBound, (]
[;, Paint, outlinePaint, =, interval, ., getOutlinePaint, (, ), ;, Stroke, outlineStroke, =, interval, ., getOutlineStroke, (, ), ;, Paint]
[., getUpperBound, (, ), ;, Paint, outlinePaint, =, interval, ., getOutlinePaint, (, ), ;, Stroke, outlineStroke, =, interval, ., getOutlineStroke]
[., getRange, (, ), ., getUpperBound, (, ), ;, Paint, outlinePaint, =, interval, ., getOutlinePaint, (, ), ;, Stroke, outlineStroke]
[;, Stroke, outlineStroke, =, interval, ., getOutlineStroke, (, ), ;, Paint, backgroundPaint, =, interval, ., getBackgroundPaint, (, ), ;, if]
[., getOutlinePaint, (, ), ;, Stroke, outlineStroke, =, interval, ., getOutlineStroke, (, ), ;, Paint, backgroundPaint, =, interval, ., getBackgroundPaint]
[;, Paint, backgroundPaint, =, interval, ., getBackgroundPaint, (, ), ;, if, (, backgroundPaint, !=, null, ), {, fillArc, (, g2]
[., getOutlineStroke, (, ), ;, Paint, backgroundPaint, =, interval, ., getBackgroundPaint, (, ), ;, if, (, backgroundPaint, !=, null, )]
[;, if, (, backgroundPaint, !=, null, ), {, fillArc, (, g2, ,, meterArea, ,, minValue, ,, maxValue, ,, backgroundPaint, ,]
[., getBackgroundPaint, (, ), ;, if, (, backgroundPaint, !=, null, ), {, fillArc, (, g2, ,, meterArea, ,, minValue, ,]
[), {, fillArc, (, g2, ,, meterArea, ,, minValue, ,, maxValue, ,, backgroundPaint, ,, false, ), ;, }, if, (]
[!=, null, ), {, fillArc, (, g2, ,, meterArea, ,, minValue, ,, maxValue, ,, backgroundPaint, ,, false, ), ;, }]
[), {, fillArc, (, g2, ,, meterArea, ,, minValue, ,, maxValue, ,, backgroundPaint, ,, false, ), ;, }, if, (]
[;, }, if, (, outlinePaint, !=, null, ), {, if, (, outlineStroke, !=, null, ), {, drawArc, (, g2, ,]
[,, meterArea, ,, minValue, ,, maxValue, ,, backgroundPaint, ,, false, ), ;, }, if, (, outlinePaint, !=, null, ), {]
[,, minValue, ,, maxValue, ,, backgroundPaint, ,, false, ), ;, }, if, (, outlinePaint, !=, null, ), {, if, (]
[,, maxValue, ,, backgroundPaint, ,, false, ), ;, }, if, (, outlinePaint, !=, null, ), {, if, (, outlineStroke, !=]
[,, backgroundPaint, ,, false, ), ;, }, if, (, outlinePaint, !=, null, ), {, if, (, outlineStroke, !=, null, )]
[,, false, ), ;, }, if, (, outlinePaint, !=, null, ), {, if, (, outlineStroke, !=, null, ), {, drawArc]
[), ;, }, if, (, outlinePaint, !=, null, ), {, if, (, outlineStroke, !=, null, ), {, drawArc, (, g2]
[), {, if, (, outlineStroke, !=, null, ), {, drawArc, (, g2, ,, meterArea, ,, minValue, ,, maxValue, ,, outlinePaint]
[!=, null, ), {, if, (, outlineStroke, !=, null, ), {, drawArc, (, g2, ,, meterArea, ,, minValue, ,, maxValue]
[), {, if, (, outlineStroke, !=, null, ), {, drawArc, (, g2, ,, meterArea, ,, minValue, ,, maxValue, ,, outlinePaint]
[), {, drawArc, (, g2, ,, meterArea, ,, minValue, ,, maxValue, ,, outlinePaint, ,, outlineStroke, ), ;, }, drawTick, (]
[!=, null, ), {, drawArc, (, g2, ,, meterArea, ,, minValue, ,, maxValue, ,, outlinePaint, ,, outlineStroke, ), ;, }]
[), {, drawArc, (, g2, ,, meterArea, ,, minValue, ,, maxValue, ,, outlinePaint, ,, outlineStroke, ), ;, }, drawTick, (]
[;, }, drawTick, (, g2, ,, meterArea, ,, minValue, ,, true, ), ;, drawTick, (, g2, ,, meterArea, ,, maxValue]
[,, meterArea, ,, minValue, ,, maxValue, ,, outlinePaint, ,, outlineStroke, ), ;, }, drawTick, (, g2, ,, meterArea, ,, minValue]
[,, minValue, ,, maxValue, ,, outlinePaint, ,, outlineStroke, ), ;, }, drawTick, (, g2, ,, meterArea, ,, minValue, ,, true]
[,, maxValue, ,, outlinePaint, ,, outlineStroke, ), ;, }, drawTick, (, g2, ,, meterArea, ,, minValue, ,, true, ), ;]
[,, outlinePaint, ,, outlineStroke, ), ;, }, drawTick, (, g2, ,, meterArea, ,, minValue, ,, true, ), ;, drawTick, (]
[,, outlineStroke, ), ;, }, drawTick, (, g2, ,, meterArea, ,, minValue, ,, true, ), ;, drawTick, (, g2, ,]
[), ;, }, drawTick, (, g2, ,, meterArea, ,, minValue, ,, true, ), ;, drawTick, (, g2, ,, meterArea, ,]
[;, drawTick, (, g2, ,, meterArea, ,, maxValue, ,, true, ), ;, }, }, protected, void, drawArc, (, Graphics2D, g2]
[,, meterArea, ,, minValue, ,, true, ), ;, drawTick, (, g2, ,, meterArea, ,, maxValue, ,, true, ), ;, }]
[,, minValue, ,, true, ), ;, drawTick, (, g2, ,, meterArea, ,, maxValue, ,, true, ), ;, }, }, protected]
[,, true, ), ;, drawTick, (, g2, ,, meterArea, ,, maxValue, ,, true, ), ;, }, }, protected, void, drawArc]
[), ;, drawTick, (, g2, ,, meterArea, ,, maxValue, ,, true, ), ;, }, }, protected, void, drawArc, (, Graphics2D]
[;, }, }, protected, void, drawArc, (, Graphics2D, g2, ,, Rectangle2D, area, ,, double, minValue, ,, double, maxValue, ,, Paint]
[,, meterArea, ,, maxValue, ,, true, ), ;, }, }, protected, void, drawArc, (, Graphics2D, g2, ,, Rectangle2D, area, ,]
[,, maxValue, ,, true, ), ;, }, }, protected, void, drawArc, (, Graphics2D, g2, ,, Rectangle2D, area, ,, double, minValue]
[,, true, ), ;, }, }, protected, void, drawArc, (, Graphics2D, g2, ,, Rectangle2D, area, ,, double, minValue, ,, double]
[), ;, }, }, protected, void, drawArc, (, Graphics2D, g2, ,, Rectangle2D, area, ,, double, minValue, ,, double, maxValue, ,]
[;, double, endAngle, =, valueToAngle, (, minValue, ), ;, double, extent, =, endAngle, -, startAngle, ;, double, x, =, area]
[), ;, double, endAngle, =, valueToAngle, (, minValue, ), ;, double, extent, =, endAngle, -, startAngle, ;, double, x, =]
[;, double, extent, =, endAngle, -, startAngle, ;, double, x, =, area, ., getX, (, ), ;, double, y, =]
[), ;, double, extent, =, endAngle, -, startAngle, ;, double, x, =, area, ., getX, (, ), ;, double, y]
[;, double, x, =, area, ., getX, (, ), ;, double, y, =, area, ., getY, (, ), ;, double]
[-, startAngle, ;, double, x, =, area, ., getX, (, ), ;, double, y, =, area, ., getY, (, )]
[;, double, x, =, area, ., getX, (, ), ;, double, y, =, area, ., getY, (, ), ;, double]
[;, double, y, =, area, ., getY, (, ), ;, double, w, =, area, ., getWidth, (, ), ;, double]
[., getX, (, ), ;, double, y, =, area, ., getY, (, ), ;, double, w, =, area, ., getWidth]
[;, double, w, =, area, ., getWidth, (, ), ;, double, h, =, area, ., getHeight, (, ), ;, g2]
[., getY, (, ), ;, double, w, =, area, ., getWidth, (, ), ;, double, h, =, area, ., getHeight]
[;, double, h, =, area, ., getHeight, (, ), ;, g2, ., setPaint, (, paint, ), ;, g2, ., setStroke]
[., getWidth, (, ), ;, double, h, =, area, ., getHeight, (, ), ;, g2, ., setPaint, (, paint, )]
[;, g2, ., setPaint, (, paint, ), ;, g2, ., setStroke, (, stroke, ), ;, if, (, paint, !=, null]
[., getHeight, (, ), ;, g2, ., setPaint, (, paint, ), ;, g2, ., setStroke, (, stroke, ), ;, if]
[;, g2, ., setStroke, (, stroke, ), ;, if, (, paint, !=, null, &&, stroke, !=, null, ), {, Arc2D]
[., setPaint, (, paint, ), ;, g2, ., setStroke, (, stroke, ), ;, if, (, paint, !=, null, &&, stroke]
[), ;, g2, ., setStroke, (, stroke, ), ;, if, (, paint, !=, null, &&, stroke, !=, null, ), {]
[;, if, (, paint, !=, null, &&, stroke, !=, null, ), {, Arc2D, ., Double, arc, =, new, Arc2D, .]
[., setStroke, (, stroke, ), ;, if, (, paint, !=, null, &&, stroke, !=, null, ), {, Arc2D, ., Double]
[), ;, if, (, paint, !=, null, &&, stroke, !=, null, ), {, Arc2D, ., Double, arc, =, new, Arc2D]
[), {, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (, x, ,, y, ,, w, ,, h, ,]
[&&, stroke, !=, null, ), {, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (, x, ,, y, ,]
[!=, null, &&, stroke, !=, null, ), {, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (, x, ,]
[&&, stroke, !=, null, ), {, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (, x, ,, y, ,]
[), {, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (, x, ,, y, ,, w, ,, h, ,]
[!=, null, ), {, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (, x, ,, y, ,, w, ,]
[), {, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (, x, ,, y, ,, w, ,, h, ,]
[;, g2, ., setPaint, (, paint, ), ;, g2, ., setStroke, (, stroke, ), ;, g2, ., draw, (, arc]
[,, y, ,, w, ,, h, ,, startAngle, ,, extent, ,, Arc2D, ., OPEN, ), ;, g2, ., setPaint, (]
[,, w, ,, h, ,, startAngle, ,, extent, ,, Arc2D, ., OPEN, ), ;, g2, ., setPaint, (, paint, )]
[,, h, ,, startAngle, ,, extent, ,, Arc2D, ., OPEN, ), ;, g2, ., setPaint, (, paint, ), ;, g2]
[,, startAngle, ,, extent, ,, Arc2D, ., OPEN, ), ;, g2, ., setPaint, (, paint, ), ;, g2, ., setStroke]
[,, extent, ,, Arc2D, ., OPEN, ), ;, g2, ., setPaint, (, paint, ), ;, g2, ., setStroke, (, stroke]
[,, Arc2D, ., OPEN, ), ;, g2, ., setPaint, (, paint, ), ;, g2, ., setStroke, (, stroke, ), ;]
[), ;, g2, ., setPaint, (, paint, ), ;, g2, ., setStroke, (, stroke, ), ;, g2, ., draw, (]
[., OPEN, ), ;, g2, ., setPaint, (, paint, ), ;, g2, ., setStroke, (, stroke, ), ;, g2, .]
[;, g2, ., setStroke, (, stroke, ), ;, g2, ., draw, (, arc, ), ;, }, }, protected, void, fillArc]
[., setPaint, (, paint, ), ;, g2, ., setStroke, (, stroke, ), ;, g2, ., draw, (, arc, ), ;]
[), ;, g2, ., setStroke, (, stroke, ), ;, g2, ., draw, (, arc, ), ;, }, }, protected, void]
[;, g2, ., draw, (, arc, ), ;, }, }, protected, void, fillArc, (, Graphics2D, g2, ,, Rectangle2D, area, ,]
[., setStroke, (, stroke, ), ;, g2, ., draw, (, arc, ), ;, }, }, protected, void, fillArc, (, Graphics2D]
[), ;, g2, ., draw, (, arc, ), ;, }, }, protected, void, fillArc, (, Graphics2D, g2, ,, Rectangle2D, area]
[;, }, }, protected, void, fillArc, (, Graphics2D, g2, ,, Rectangle2D, area, ,, double, minValue, ,, double, maxValue, ,, Paint]
[., draw, (, arc, ), ;, }, }, protected, void, fillArc, (, Graphics2D, g2, ,, Rectangle2D, area, ,, double, minValue]
[), ;, }, }, protected, void, fillArc, (, Graphics2D, g2, ,, Rectangle2D, area, ,, double, minValue, ,, double, maxValue, ,]
[), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument", ), ;, }, double, startAngle, =, valueToAngle, (, maxValue, ), ;, double, endAngle]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument", ), ;, }, double, startAngle, =, valueToAngle, (, maxValue, ), ;]
[), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument", ), ;, }, double, startAngle, =, valueToAngle, (, maxValue, ), ;, double, endAngle]
[;, }, double, startAngle, =, valueToAngle, (, maxValue, ), ;, double, endAngle, =, valueToAngle, (, minValue, ), ;, double, extent]
[), ;, }, double, startAngle, =, valueToAngle, (, maxValue, ), ;, double, endAngle, =, valueToAngle, (, minValue, ), ;, double]
[;, double, endAngle, =, valueToAngle, (, minValue, ), ;, double, extent, =, endAngle, -, startAngle, ;, double, x, =, area]
[), ;, double, endAngle, =, valueToAngle, (, minValue, ), ;, double, extent, =, endAngle, -, startAngle, ;, double, x, =]
[;, double, extent, =, endAngle, -, startAngle, ;, double, x, =, area, ., getX, (, ), ;, double, y, =]
[), ;, double, extent, =, endAngle, -, startAngle, ;, double, x, =, area, ., getX, (, ), ;, double, y]
[;, double, x, =, area, ., getX, (, ), ;, double, y, =, area, ., getY, (, ), ;, double]
[-, startAngle, ;, double, x, =, area, ., getX, (, ), ;, double, y, =, area, ., getY, (, )]
[;, double, x, =, area, ., getX, (, ), ;, double, y, =, area, ., getY, (, ), ;, double]
[;, double, y, =, area, ., getY, (, ), ;, double, w, =, area, ., getWidth, (, ), ;, double]
[., getX, (, ), ;, double, y, =, area, ., getY, (, ), ;, double, w, =, area, ., getWidth]
[;, double, w, =, area, ., getWidth, (, ), ;, double, h, =, area, ., getHeight, (, ), ;, int]
[., getY, (, ), ;, double, w, =, area, ., getWidth, (, ), ;, double, h, =, area, ., getHeight]
[;, double, h, =, area, ., getHeight, (, ), ;, int, joinType, =, Arc2D, ., OPEN, ;, if, (, this]
[., getWidth, (, ), ;, double, h, =, area, ., getHeight, (, ), ;, int, joinType, =, Arc2D, ., OPEN]
[;, int, joinType, =, Arc2D, ., OPEN, ;, if, (, this, ., shape, ==, DialShape, ., PIE, ), {, joinType]
[., getHeight, (, ), ;, int, joinType, =, Arc2D, ., OPEN, ;, if, (, this, ., shape, ==, DialShape, .]
[;, if, (, this, ., shape, ==, DialShape, ., PIE, ), {, joinType, =, Arc2D, ., PIE, ;, }, else]
[., OPEN, ;, if, (, this, ., shape, ==, DialShape, ., PIE, ), {, joinType, =, Arc2D, ., PIE, ;]
[), {, joinType, =, Arc2D, ., PIE, ;, }, else, if, (, this, ., shape, ==, DialShape, ., CHORD, )]
[==, DialShape, ., PIE, ), {, joinType, =, Arc2D, ., PIE, ;, }, else, if, (, this, ., shape, ==]
[., shape, ==, DialShape, ., PIE, ), {, joinType, =, Arc2D, ., PIE, ;, }, else, if, (, this, .]
[), {, joinType, =, Arc2D, ., PIE, ;, }, else, if, (, this, ., shape, ==, DialShape, ., CHORD, )]
[., PIE, ), {, joinType, =, Arc2D, ., PIE, ;, }, else, if, (, this, ., shape, ==, DialShape, .]
[=, Arc2D, ., PIE, ;, }, else, if, (, this, ., shape, ==, DialShape, ., CHORD, ), {, if, (]
[;, }, else, if, (, this, ., shape, ==, DialShape, ., CHORD, ), {, if, (, dial, &&, this, .]
[., PIE, ;, }, else, if, (, this, ., shape, ==, DialShape, ., CHORD, ), {, if, (, dial, &&]
[), {, if, (, dial, &&, this, ., meterAngle, >, 180, ), {, joinType, =, Arc2D, ., CHORD, ;, }]
[==, DialShape, ., CHORD, ), {, if, (, dial, &&, this, ., meterAngle, >, 180, ), {, joinType, =, Arc2D]
[., shape, ==, DialShape, ., CHORD, ), {, if, (, dial, &&, this, ., meterAngle, >, 180, ), {, joinType]
[), {, if, (, dial, &&, this, ., meterAngle, >, 180, ), {, joinType, =, Arc2D, ., CHORD, ;, }]
[., CHORD, ), {, if, (, dial, &&, this, ., meterAngle, >, 180, ), {, joinType, =, Arc2D, ., CHORD]
[), {, joinType, =, Arc2D, ., CHORD, ;, }, else, {, joinType, =, Arc2D, ., PIE, ;, }, }, else]
[&&, this, ., meterAngle, >, 180, ), {, joinType, =, Arc2D, ., CHORD, ;, }, else, {, joinType, =, Arc2D]
[), {, joinType, =, Arc2D, ., CHORD, ;, }, else, {, joinType, =, Arc2D, ., PIE, ;, }, }, else]
[>, 180, ), {, joinType, =, Arc2D, ., CHORD, ;, }, else, {, joinType, =, Arc2D, ., PIE, ;, }]
[., meterAngle, >, 180, ), {, joinType, =, Arc2D, ., CHORD, ;, }, else, {, joinType, =, Arc2D, ., PIE]
[), {, joinType, =, Arc2D, ., CHORD, ;, }, else, {, joinType, =, Arc2D, ., PIE, ;, }, }, else]
[=, Arc2D, ., CHORD, ;, }, else, {, joinType, =, Arc2D, ., PIE, ;, }, }, else, if, (, this]
[;, }, else, {, joinType, =, Arc2D, ., PIE, ;, }, }, else, if, (, this, ., shape, ==, DialShape]
[., CHORD, ;, }, else, {, joinType, =, Arc2D, ., PIE, ;, }, }, else, if, (, this, ., shape]
[=, Arc2D, ., PIE, ;, }, }, else, if, (, this, ., shape, ==, DialShape, ., CIRCLE, ), {, joinType]
[;, }, }, else, if, (, this, ., shape, ==, DialShape, ., CIRCLE, ), {, joinType, =, Arc2D, ., PIE]
[., PIE, ;, }, }, else, if, (, this, ., shape, ==, DialShape, ., CIRCLE, ), {, joinType, =, Arc2D]
[), {, joinType, =, Arc2D, ., PIE, ;, if, (, dial, ), {, extent, =, 360, ;, }, }, else]
[==, DialShape, ., CIRCLE, ), {, joinType, =, Arc2D, ., PIE, ;, if, (, dial, ), {, extent, =, 360]
[., shape, ==, DialShape, ., CIRCLE, ), {, joinType, =, Arc2D, ., PIE, ;, if, (, dial, ), {, extent]
[), {, joinType, =, Arc2D, ., PIE, ;, if, (, dial, ), {, extent, =, 360, ;, }, }, else]
[., CIRCLE, ), {, joinType, =, Arc2D, ., PIE, ;, if, (, dial, ), {, extent, =, 360, ;, }]
[=, Arc2D, ., PIE, ;, if, (, dial, ), {, extent, =, 360, ;, }, }, else, {, throw, new]
[;, if, (, dial, ), {, extent, =, 360, ;, }, }, else, {, throw, new, IllegalStateException, (, "DialShape not recognised.", )]
[., PIE, ;, if, (, dial, ), {, extent, =, 360, ;, }, }, else, {, throw, new, IllegalStateException, (]
[), {, extent, =, 360, ;, }, }, else, {, throw, new, IllegalStateException, (, "DialShape not recognised.", ), ;, }, g2, .]
[=, 360, ;, }, }, else, {, throw, new, IllegalStateException, (, "DialShape not recognised.", ), ;, }, g2, ., setPaint, (, paint]
[;, }, }, else, {, throw, new, IllegalStateException, (, "DialShape not recognised.", ), ;, }, g2, ., setPaint, (, paint, ), ;]
[;, }, g2, ., setPaint, (, paint, ), ;, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (, x]
[), ;, }, g2, ., setPaint, (, paint, ), ;, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (]
[;, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (, x, ,, y, ,, w, ,, h, ,, startAngle]
[., setPaint, (, paint, ), ;, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (, x, ,, y, ,]
[), ;, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (, x, ,, y, ,, w, ,, h, ,]
[;, g2, ., fill, (, arc, ), ;, }, public, double, valueToAngle, (, double, value, ), {, value, =, value]
[,, y, ,, w, ,, h, ,, startAngle, ,, extent, ,, joinType, ), ;, g2, ., fill, (, arc, )]
[,, w, ,, h, ,, startAngle, ,, extent, ,, joinType, ), ;, g2, ., fill, (, arc, ), ;, }]
[,, h, ,, startAngle, ,, extent, ,, joinType, ), ;, g2, ., fill, (, arc, ), ;, }, public, double]
[,, startAngle, ,, extent, ,, joinType, ), ;, g2, ., fill, (, arc, ), ;, }, public, double, valueToAngle, (]
[,, extent, ,, joinType, ), ;, g2, ., fill, (, arc, ), ;, }, public, double, valueToAngle, (, double, value]
[,, joinType, ), ;, g2, ., fill, (, arc, ), ;, }, public, double, valueToAngle, (, double, value, ), {]
[), ;, g2, ., fill, (, arc, ), ;, }, public, double, valueToAngle, (, double, value, ), {, value, =]
[;, }, public, double, valueToAngle, (, double, value, ), {, value, =, value, -, this, ., range, ., getLowerBound, (]
[., fill, (, arc, ), ;, }, public, double, valueToAngle, (, double, value, ), {, value, =, value, -, this]
[), ;, }, public, double, valueToAngle, (, double, value, ), {, value, =, value, -, this, ., range, ., getLowerBound]
[=, value, -, this, ., range, ., getLowerBound, (, ), ;, double, baseAngle, =, 180, +, (, (, this, .]
[;, double, baseAngle, =, 180, +, (, (, this, ., meterAngle, -, 180, ), /, 2, ), ;, return, baseAngle]
[-, this, ., range, ., getLowerBound, (, ), ;, double, baseAngle, =, 180, +, (, (, this, ., meterAngle, -]
[;, double, baseAngle, =, 180, +, (, (, this, ., meterAngle, -, 180, ), /, 2, ), ;, return, baseAngle]
[., getLowerBound, (, ), ;, double, baseAngle, =, 180, +, (, (, this, ., meterAngle, -, 180, ), /, 2]
[., range, ., getLowerBound, (, ), ;, double, baseAngle, =, 180, +, (, (, this, ., meterAngle, -, 180, )]
[;, return, baseAngle, -, (, (, value, /, this, ., range, ., getLength, (, ), ), *, this, ., meterAngle]
[+, (, (, this, ., meterAngle, -, 180, ), /, 2, ), ;, return, baseAngle, -, (, (, value, /]
[;, return, baseAngle, -, (, (, value, /, this, ., range, ., getLength, (, ), ), *, this, ., meterAngle]
[), ;, return, baseAngle, -, (, (, value, /, this, ., range, ., getLength, (, ), ), *, this, .]
[/, 2, ), ;, return, baseAngle, -, (, (, value, /, this, ., range, ., getLength, (, ), ), *]
[), /, 2, ), ;, return, baseAngle, -, (, (, value, /, this, ., range, ., getLength, (, ), )]
[-, 180, ), /, 2, ), ;, return, baseAngle, -, (, (, value, /, this, ., range, ., getLength, (]
[., meterAngle, -, 180, ), /, 2, ), ;, return, baseAngle, -, (, (, value, /, this, ., range, .]
[), /, 2, ), ;, return, baseAngle, -, (, (, value, /, this, ., range, ., getLength, (, ), )]
[), ;, return, baseAngle, -, (, (, value, /, this, ., range, ., getLength, (, ), ), *, this, .]
[;, }, protected, void, drawTicks, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, minValue, ,, double, maxValue, ), {, for]
[-, (, (, value, /, this, ., range, ., getLength, (, ), ), *, this, ., meterAngle, ), ;, }]
[;, }, protected, void, drawTicks, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, minValue, ,, double, maxValue, ), {, for]
[), ;, }, protected, void, drawTicks, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, minValue, ,, double, maxValue, ), {]
[*, this, ., meterAngle, ), ;, }, protected, void, drawTicks, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, minValue, ,]
[), *, this, ., meterAngle, ), ;, }, protected, void, drawTicks, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, minValue]
[/, this, ., range, ., getLength, (, ), ), *, this, ., meterAngle, ), ;, }, protected, void, drawTicks, (]
[), *, this, ., meterAngle, ), ;, }, protected, void, drawTicks, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, minValue]
[., getLength, (, ), ), *, this, ., meterAngle, ), ;, }, protected, void, drawTicks, (, Graphics2D, g2, ,, Rectangle2D]
[., range, ., getLength, (, ), ), *, this, ., meterAngle, ), ;, }, protected, void, drawTicks, (, Graphics2D, g2]
[), ;, }, protected, void, drawTicks, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, minValue, ,, double, maxValue, ), {]
[., meterAngle, ), ;, }, protected, void, drawTicks, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, minValue, ,, double, maxValue]
[;, v, <=, maxValue, ;, v, +=, this, ., tickSize, ), {, drawTick, (, g2, ,, meterArea, ,, v, )]
[;, v, +=, this, ., tickSize, ), {, drawTick, (, g2, ,, meterArea, ,, v, ), ;, }, }, protected]
[<=, maxValue, ;, v, +=, this, ., tickSize, ), {, drawTick, (, g2, ,, meterArea, ,, v, ), ;, }]
[;, v, +=, this, ., tickSize, ), {, drawTick, (, g2, ,, meterArea, ,, v, ), ;, }, }, protected]
[+=, this, ., tickSize, ), {, drawTick, (, g2, ,, meterArea, ,, v, ), ;, }, }, protected, void, drawTick]
[), {, drawTick, (, g2, ,, meterArea, ,, v, ), ;, }, }, protected, void, drawTick, (, Graphics2D, g2, ,]
[., tickSize, ), {, drawTick, (, g2, ,, meterArea, ,, v, ), ;, }, }, protected, void, drawTick, (, Graphics2D]
[;, }, }, protected, void, drawTick, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, value, ), {, drawTick, (, g2]
[,, meterArea, ,, v, ), ;, }, }, protected, void, drawTick, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, value]
[,, v, ), ;, }, }, protected, void, drawTick, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, value, ), {]
[), ;, }, }, protected, void, drawTick, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, value, ), {, drawTick, (]
[;, }, protected, void, drawTick, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, value, ,, boolean, label, ), {, double]
[,, meterArea, ,, value, ,, false, ), ;, }, protected, void, drawTick, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double]
[,, value, ,, false, ), ;, }, protected, void, drawTick, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, value, ,]
[,, false, ), ;, }, protected, void, drawTick, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, value, ,, boolean, label]
[), ;, }, protected, void, drawTick, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, value, ,, boolean, label, ), {]
[;, double, meterMiddleX, =, meterArea, ., getCenterX, (, ), ;, double, meterMiddleY, =, meterArea, ., getCenterY, (, ), ;, g2]
[), ;, double, meterMiddleX, =, meterArea, ., getCenterX, (, ), ;, double, meterMiddleY, =, meterArea, ., getCenterY, (, ), ;]
[;, double, meterMiddleY, =, meterArea, ., getCenterY, (, ), ;, g2, ., setPaint, (, this, ., tickPaint, ), ;, g2]
[., getCenterX, (, ), ;, double, meterMiddleY, =, meterArea, ., getCenterY, (, ), ;, g2, ., setPaint, (, this, .]
[;, g2, ., setPaint, (, this, ., tickPaint, ), ;, g2, ., setStroke, (, new, BasicStroke, (, 2.0f, ), )]
[., getCenterY, (, ), ;, g2, ., setPaint, (, this, ., tickPaint, ), ;, g2, ., setStroke, (, new, BasicStroke]
[;, g2, ., setStroke, (, new, BasicStroke, (, 2.0f, ), ), ;, double, valueP2X, =, 0, ;, double, valueP2Y, =]
[., setPaint, (, this, ., tickPaint, ), ;, g2, ., setStroke, (, new, BasicStroke, (, 2.0f, ), ), ;, double]
[), ;, g2, ., setStroke, (, new, BasicStroke, (, 2.0f, ), ), ;, double, valueP2X, =, 0, ;, double, valueP2Y]
[., tickPaint, ), ;, g2, ., setStroke, (, new, BasicStroke, (, 2.0f, ), ), ;, double, valueP2X, =, 0, ;]
[;, double, valueP2X, =, 0, ;, double, valueP2Y, =, 0, ;, double, radius, =, (, meterArea, ., getWidth, (, )]
[., setStroke, (, new, BasicStroke, (, 2.0f, ), ), ;, double, valueP2X, =, 0, ;, double, valueP2Y, =, 0, ;]
[), ;, double, valueP2X, =, 0, ;, double, valueP2Y, =, 0, ;, double, radius, =, (, meterArea, ., getWidth, (]
[), ), ;, double, valueP2X, =, 0, ;, double, valueP2Y, =, 0, ;, double, radius, =, (, meterArea, ., getWidth]
[;, double, valueP2Y, =, 0, ;, double, radius, =, (, meterArea, ., getWidth, (, ), /, 2, ), +, DEFAULT_BORDER_SIZE]
[;, double, radius, =, (, meterArea, ., getWidth, (, ), /, 2, ), +, DEFAULT_BORDER_SIZE, ;, double, radius1, =, radius]
[;, double, radius1, =, radius, -, 15, ;, double, valueP1X, =, meterMiddleX, +, (, radius, *, Math, ., cos, (]
[+, DEFAULT_BORDER_SIZE, ;, double, radius1, =, radius, -, 15, ;, double, valueP1X, =, meterMiddleX, +, (, radius, *, Math, .]
[), +, DEFAULT_BORDER_SIZE, ;, double, radius1, =, radius, -, 15, ;, double, valueP1X, =, meterMiddleX, +, (, radius, *, Math]
[/, 2, ), +, DEFAULT_BORDER_SIZE, ;, double, radius1, =, radius, -, 15, ;, double, valueP1X, =, meterMiddleX, +, (, radius]
[., getWidth, (, ), /, 2, ), +, DEFAULT_BORDER_SIZE, ;, double, radius1, =, radius, -, 15, ;, double, valueP1X, =]
[), +, DEFAULT_BORDER_SIZE, ;, double, radius1, =, radius, -, 15, ;, double, valueP1X, =, meterMiddleX, +, (, radius, *, Math]
[;, double, radius1, =, radius, -, 15, ;, double, valueP1X, =, meterMiddleX, +, (, radius, *, Math, ., cos, (]
[;, double, valueP1X, =, meterMiddleX, +, (, radius, *, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /]
[-, 15, ;, double, valueP1X, =, meterMiddleX, +, (, radius, *, Math, ., cos, (, Math, ., PI, *, (]
[;, double, valueP1X, =, meterMiddleX, +, (, radius, *, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /]
[;, double, valueP1Y, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /]
[+, (, radius, *, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;]
[;, double, valueP1Y, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /]
[), ;, double, valueP1Y, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle]
[*, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, double, valueP1Y, =]
[), ;, double, valueP1Y, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle]
[., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, double, valueP1Y, =, meterMiddleY, -]
[), ), ;, double, valueP1Y, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *, (]
[*, (, valueAngle, /, 180, ), ), ), ;, double, valueP1Y, =, meterMiddleY, -, (, radius, *, Math, ., sin]
[., PI, *, (, valueAngle, /, 180, ), ), ), ;, double, valueP1Y, =, meterMiddleY, -, (, radius, *, Math]
[), ), ;, double, valueP1Y, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *, (]
[), ), ), ;, double, valueP1Y, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *]
[/, 180, ), ), ), ;, double, valueP1Y, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, .]
[), ), ), ;, double, valueP1Y, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *]
[;, valueP2X, =, meterMiddleX, +, (, radius1, *, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /, 180]
[-, (, radius, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;]
[;, valueP2X, =, meterMiddleX, +, (, radius1, *, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /, 180]
[), ;, valueP2X, =, meterMiddleX, +, (, radius1, *, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /]
[*, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, valueP2X, =, meterMiddleX]
[), ;, valueP2X, =, meterMiddleX, +, (, radius1, *, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /]
[., sin, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, valueP2X, =, meterMiddleX, +, (]
[), ), ;, valueP2X, =, meterMiddleX, +, (, radius1, *, Math, ., cos, (, Math, ., PI, *, (, valueAngle]
[*, (, valueAngle, /, 180, ), ), ), ;, valueP2X, =, meterMiddleX, +, (, radius1, *, Math, ., cos, (]
[., PI, *, (, valueAngle, /, 180, ), ), ), ;, valueP2X, =, meterMiddleX, +, (, radius1, *, Math, .]
[), ), ;, valueP2X, =, meterMiddleX, +, (, radius1, *, Math, ., cos, (, Math, ., PI, *, (, valueAngle]
[), ), ), ;, valueP2X, =, meterMiddleX, +, (, radius1, *, Math, ., cos, (, Math, ., PI, *, (]
[/, 180, ), ), ), ;, valueP2X, =, meterMiddleX, +, (, radius1, *, Math, ., cos, (, Math, ., PI]
[), ), ), ;, valueP2X, =, meterMiddleX, +, (, radius1, *, Math, ., cos, (, Math, ., PI, *, (]
[=, meterMiddleX, +, (, radius1, *, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), )]
[;, valueP2Y, =, meterMiddleY, -, (, radius1, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /, 180]
[+, (, radius1, *, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;]
[;, valueP2Y, =, meterMiddleY, -, (, radius1, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /, 180]
[), ;, valueP2Y, =, meterMiddleY, -, (, radius1, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /]
[*, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, valueP2Y, =, meterMiddleY]
[), ;, valueP2Y, =, meterMiddleY, -, (, radius1, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /]
[., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, valueP2Y, =, meterMiddleY, -, (]
[), ), ;, valueP2Y, =, meterMiddleY, -, (, radius1, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle]
[*, (, valueAngle, /, 180, ), ), ), ;, valueP2Y, =, meterMiddleY, -, (, radius1, *, Math, ., sin, (]
[., PI, *, (, valueAngle, /, 180, ), ), ), ;, valueP2Y, =, meterMiddleY, -, (, radius1, *, Math, .]
[), ), ;, valueP2Y, =, meterMiddleY, -, (, radius1, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle]
[), ), ), ;, valueP2Y, =, meterMiddleY, -, (, radius1, *, Math, ., sin, (, Math, ., PI, *, (]
[/, 180, ), ), ), ;, valueP2Y, =, meterMiddleY, -, (, radius1, *, Math, ., sin, (, Math, ., PI]
[), ), ), ;, valueP2Y, =, meterMiddleY, -, (, radius1, *, Math, ., sin, (, Math, ., PI, *, (]
[=, meterMiddleY, -, (, radius1, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /, 180, ), )]
[;, Line2D, ., Double, line, =, new, Line2D, ., Double, (, valueP1X, ,, valueP1Y, ,, valueP2X, ,, valueP2Y, ), ;]
[-, (, radius1, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;]
[;, Line2D, ., Double, line, =, new, Line2D, ., Double, (, valueP1X, ,, valueP1Y, ,, valueP2X, ,, valueP2Y, ), ;]
[), ;, Line2D, ., Double, line, =, new, Line2D, ., Double, (, valueP1X, ,, valueP1Y, ,, valueP2X, ,, valueP2Y, )]
[*, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, Line2D, ., Double]
[), ;, Line2D, ., Double, line, =, new, Line2D, ., Double, (, valueP1X, ,, valueP1Y, ,, valueP2X, ,, valueP2Y, )]
[., sin, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, Line2D, ., Double, line, =]
[), ), ;, Line2D, ., Double, line, =, new, Line2D, ., Double, (, valueP1X, ,, valueP1Y, ,, valueP2X, ,, valueP2Y]
[*, (, valueAngle, /, 180, ), ), ), ;, Line2D, ., Double, line, =, new, Line2D, ., Double, (, valueP1X]
[., PI, *, (, valueAngle, /, 180, ), ), ), ;, Line2D, ., Double, line, =, new, Line2D, ., Double]
[), ), ;, Line2D, ., Double, line, =, new, Line2D, ., Double, (, valueP1X, ,, valueP1Y, ,, valueP2X, ,, valueP2Y]
[), ), ), ;, Line2D, ., Double, line, =, new, Line2D, ., Double, (, valueP1X, ,, valueP1Y, ,, valueP2X, ,]
[/, 180, ), ), ), ;, Line2D, ., Double, line, =, new, Line2D, ., Double, (, valueP1X, ,, valueP1Y, ,]
[), ), ), ;, Line2D, ., Double, line, =, new, Line2D, ., Double, (, valueP1X, ,, valueP1Y, ,, valueP2X, ,]
[;, g2, ., draw, (, line, ), ;, if, (, this, ., tickLabelsVisible, &&, label, ), {, String, tickLabel, =]
[,, valueP1Y, ,, valueP2X, ,, valueP2Y, ), ;, g2, ., draw, (, line, ), ;, if, (, this, ., tickLabelsVisible]
[,, valueP2X, ,, valueP2Y, ), ;, g2, ., draw, (, line, ), ;, if, (, this, ., tickLabelsVisible, &&, label]
[,, valueP2Y, ), ;, g2, ., draw, (, line, ), ;, if, (, this, ., tickLabelsVisible, &&, label, ), {]
[), ;, g2, ., draw, (, line, ), ;, if, (, this, ., tickLabelsVisible, &&, label, ), {, String, tickLabel]
[;, if, (, this, ., tickLabelsVisible, &&, label, ), {, String, tickLabel, =, this, ., tickLabelFormat, ., format, (, value]
[., draw, (, line, ), ;, if, (, this, ., tickLabelsVisible, &&, label, ), {, String, tickLabel, =, this, .]
[), ;, if, (, this, ., tickLabelsVisible, &&, label, ), {, String, tickLabel, =, this, ., tickLabelFormat, ., format, (]
[), {, String, tickLabel, =, this, ., tickLabelFormat, ., format, (, value, ), ;, g2, ., setFont, (, this, .]
[&&, label, ), {, String, tickLabel, =, this, ., tickLabelFormat, ., format, (, value, ), ;, g2, ., setFont, (]
[., tickLabelsVisible, &&, label, ), {, String, tickLabel, =, this, ., tickLabelFormat, ., format, (, value, ), ;, g2, .]
[), {, String, tickLabel, =, this, ., tickLabelFormat, ., format, (, value, ), ;, g2, ., setFont, (, this, .]
[;, g2, ., setFont, (, this, ., tickLabelFont, ), ;, g2, ., setPaint, (, this, ., tickLabelPaint, ), ;, FontMetrics]
[., format, (, value, ), ;, g2, ., setFont, (, this, ., tickLabelFont, ), ;, g2, ., setPaint, (, this]
[., tickLabelFormat, ., format, (, value, ), ;, g2, ., setFont, (, this, ., tickLabelFont, ), ;, g2, ., setPaint]
[), ;, g2, ., setFont, (, this, ., tickLabelFont, ), ;, g2, ., setPaint, (, this, ., tickLabelPaint, ), ;]
[;, g2, ., setPaint, (, this, ., tickLabelPaint, ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, ), ;, Rectangle2D]
[., setFont, (, this, ., tickLabelFont, ), ;, g2, ., setPaint, (, this, ., tickLabelPaint, ), ;, FontMetrics, fm, =]
[), ;, g2, ., setPaint, (, this, ., tickLabelPaint, ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, ), ;]
[., tickLabelFont, ), ;, g2, ., setPaint, (, this, ., tickLabelPaint, ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (]
[;, FontMetrics, fm, =, g2, ., getFontMetrics, (, ), ;, Rectangle2D, tickLabelBounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,, g2]
[., setPaint, (, this, ., tickLabelPaint, ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, ), ;, Rectangle2D, tickLabelBounds, =]
[), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, ), ;, Rectangle2D, tickLabelBounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,]
[., tickLabelPaint, ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, ), ;, Rectangle2D, tickLabelBounds, =, TextUtilities, ., getTextBounds, (]
[;, Rectangle2D, tickLabelBounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,, g2, ,, fm, ), ;, double, x, =, valueP2X, ;]
[., getFontMetrics, (, ), ;, Rectangle2D, tickLabelBounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,, g2, ,, fm, ), ;, double]
[;, double, x, =, valueP2X, ;, double, y, =, valueP2Y, ;, if, (, valueAngle, ==, 90, ||, valueAngle, ==, 270]
[., getTextBounds, (, tickLabel, ,, g2, ,, fm, ), ;, double, x, =, valueP2X, ;, double, y, =, valueP2Y, ;]
[,, g2, ,, fm, ), ;, double, x, =, valueP2X, ;, double, y, =, valueP2Y, ;, if, (, valueAngle, ==]
[,, fm, ), ;, double, x, =, valueP2X, ;, double, y, =, valueP2Y, ;, if, (, valueAngle, ==, 90, ||]
[), ;, double, x, =, valueP2X, ;, double, y, =, valueP2Y, ;, if, (, valueAngle, ==, 90, ||, valueAngle, ==]
[;, double, y, =, valueP2Y, ;, if, (, valueAngle, ==, 90, ||, valueAngle, ==, 270, ), {, x, =, x]
[;, if, (, valueAngle, ==, 90, ||, valueAngle, ==, 270, ), {, x, =, x, -, tickLabelBounds, ., getWidth, (]
[), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), /, 2, ;, }, else, if, (, valueAngle, <]
[||, valueAngle, ==, 270, ), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), /, 2, ;, }, else]
[==, 90, ||, valueAngle, ==, 270, ), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), /, 2, ;]
[||, valueAngle, ==, 270, ), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), /, 2, ;, }, else]
[), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), /, 2, ;, }, else, if, (, valueAngle, <]
[==, 270, ), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), /, 2, ;, }, else, if, (]
[), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), /, 2, ;, }, else, if, (, valueAngle, <]
[=, x, -, tickLabelBounds, ., getWidth, (, ), /, 2, ;, }, else, if, (, valueAngle, <, 90, ||, valueAngle]
[;, }, else, if, (, valueAngle, <, 90, ||, valueAngle, >, 270, ), {, x, =, x, -, tickLabelBounds, .]
[-, tickLabelBounds, ., getWidth, (, ), /, 2, ;, }, else, if, (, valueAngle, <, 90, ||, valueAngle, >, 270]
[;, }, else, if, (, valueAngle, <, 90, ||, valueAngle, >, 270, ), {, x, =, x, -, tickLabelBounds, .]
[/, 2, ;, }, else, if, (, valueAngle, <, 90, ||, valueAngle, >, 270, ), {, x, =, x, -]
[., getWidth, (, ), /, 2, ;, }, else, if, (, valueAngle, <, 90, ||, valueAngle, >, 270, ), {]
[;, }, else, if, (, valueAngle, <, 90, ||, valueAngle, >, 270, ), {, x, =, x, -, tickLabelBounds, .]
[), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), ;, }, if, (, (, valueAngle, >, 135, &&]
[||, valueAngle, >, 270, ), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), ;, }, if, (, (]
[<, 90, ||, valueAngle, >, 270, ), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), ;, }, if]
[||, valueAngle, >, 270, ), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), ;, }, if, (, (]
[), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), ;, }, if, (, (, valueAngle, >, 135, &&]
[>, 270, ), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), ;, }, if, (, (, valueAngle, >]
[), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), ;, }, if, (, (, valueAngle, >, 135, &&]
[=, x, -, tickLabelBounds, ., getWidth, (, ), ;, }, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225]
[;, }, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, ), ||, valueAngle, >, 315, ||, valueAngle, <]
[-, tickLabelBounds, ., getWidth, (, ), ;, }, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, ), ||]
[;, }, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, ), ||, valueAngle, >, 315, ||, valueAngle, <]
[., getWidth, (, ), ;, }, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, ), ||, valueAngle, >]
[), {, y, =, y, -, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, else, {, y, =, y]
[||, valueAngle, <, 45, ), {, y, =, y, -, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, else]
[||, valueAngle, >, 315, ||, valueAngle, <, 45, ), {, y, =, y, -, tickLabelBounds, ., getHeight, (, ), /]
[), ||, valueAngle, >, 315, ||, valueAngle, <, 45, ), {, y, =, y, -, tickLabelBounds, ., getHeight, (, )]
[&&, valueAngle, <, 225, ), ||, valueAngle, >, 315, ||, valueAngle, <, 45, ), {, y, =, y, -, tickLabelBounds]
[>, 135, &&, valueAngle, <, 225, ), ||, valueAngle, >, 315, ||, valueAngle, <, 45, ), {, y, =, y]
[&&, valueAngle, <, 225, ), ||, valueAngle, >, 315, ||, valueAngle, <, 45, ), {, y, =, y, -, tickLabelBounds]
[), ||, valueAngle, >, 315, ||, valueAngle, <, 45, ), {, y, =, y, -, tickLabelBounds, ., getHeight, (, )]
[<, 225, ), ||, valueAngle, >, 315, ||, valueAngle, <, 45, ), {, y, =, y, -, tickLabelBounds, ., getHeight]
[), ||, valueAngle, >, 315, ||, valueAngle, <, 45, ), {, y, =, y, -, tickLabelBounds, ., getHeight, (, )]
[||, valueAngle, <, 45, ), {, y, =, y, -, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, else]
[>, 315, ||, valueAngle, <, 45, ), {, y, =, y, -, tickLabelBounds, ., getHeight, (, ), /, 2, ;]
[||, valueAngle, <, 45, ), {, y, =, y, -, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, else]
[), {, y, =, y, -, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, else, {, y, =, y]
[<, 45, ), {, y, =, y, -, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, else, {, y]
[), {, y, =, y, -, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, else, {, y, =, y]
[=, y, -, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, else, {, y, =, y, +, tickLabelBounds, .]
[;, }, else, {, y, =, y, +, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, g2, ., drawString]
[-, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, else, {, y, =, y, +, tickLabelBounds, ., getHeight, (]
[;, }, else, {, y, =, y, +, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, g2, ., drawString]
[/, 2, ;, }, else, {, y, =, y, +, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, g2]
[., getHeight, (, ), /, 2, ;, }, else, {, y, =, y, +, tickLabelBounds, ., getHeight, (, ), /]
[;, }, else, {, y, =, y, +, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, g2, ., drawString]
[=, y, +, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, g2, ., drawString, (, tickLabel, ,, (, float]
[;, }, g2, ., drawString, (, tickLabel, ,, (, float, ), x, ,, (, float, ), y, ), ;, }]
[+, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, g2, ., drawString, (, tickLabel, ,, (, float, ), x]
[;, }, g2, ., drawString, (, tickLabel, ,, (, float, ), x, ,, (, float, ), y, ), ;, }]
[/, 2, ;, }, g2, ., drawString, (, tickLabel, ,, (, float, ), x, ,, (, float, ), y, )]
[., getHeight, (, ), /, 2, ;, }, g2, ., drawString, (, tickLabel, ,, (, float, ), x, ,, (]
[;, }, g2, ., drawString, (, tickLabel, ,, (, float, ), x, ,, (, float, ), y, ), ;, }]
[;, }, }, protected, void, drawValueLabel, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, g2, ., setFont, (, this, .]
[., drawString, (, tickLabel, ,, (, float, ), x, ,, (, float, ), y, ), ;, }, }, protected, void]
[,, (, float, ), x, ,, (, float, ), y, ), ;, }, }, protected, void, drawValueLabel, (, Graphics2D, g2]
[,, (, float, ), y, ), ;, }, }, protected, void, drawValueLabel, (, Graphics2D, g2, ,, Rectangle2D, area, ), {]
[,, (, float, ), y, ), ;, }, }, protected, void, drawValueLabel, (, Graphics2D, g2, ,, Rectangle2D, area, ), {]
[), ;, }, }, protected, void, drawValueLabel, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, g2, ., setFont, (, this]
[), ;, }, }, protected, void, drawValueLabel, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, g2, ., setFont, (, this]
[;, g2, ., setPaint, (, this, ., valuePaint, ), ;, String, valueStr, =, "No value", ;, if, (, this, ., dataset]
[., setFont, (, this, ., valueFont, ), ;, g2, ., setPaint, (, this, ., valuePaint, ), ;, String, valueStr, =]
[), ;, g2, ., setPaint, (, this, ., valuePaint, ), ;, String, valueStr, =, "No value", ;, if, (, this, .]
[., valueFont, ), ;, g2, ., setPaint, (, this, ., valuePaint, ), ;, String, valueStr, =, "No value", ;, if, (]
[;, String, valueStr, =, "No value", ;, if, (, this, ., dataset, !=, null, ), {, Number, n, =, this, .]
[., setPaint, (, this, ., valuePaint, ), ;, String, valueStr, =, "No value", ;, if, (, this, ., dataset, !=, null]
[), ;, String, valueStr, =, "No value", ;, if, (, this, ., dataset, !=, null, ), {, Number, n, =, this]
[., valuePaint, ), ;, String, valueStr, =, "No value", ;, if, (, this, ., dataset, !=, null, ), {, Number, n]
[;, if, (, this, ., dataset, !=, null, ), {, Number, n, =, this, ., dataset, ., getValue, (, )]
[), {, Number, n, =, this, ., dataset, ., getValue, (, ), ;, if, (, n, !=, null, ), {]
[!=, null, ), {, Number, n, =, this, ., dataset, ., getValue, (, ), ;, if, (, n, !=, null]
[., dataset, !=, null, ), {, Number, n, =, this, ., dataset, ., getValue, (, ), ;, if, (, n]
[), {, Number, n, =, this, ., dataset, ., getValue, (, ), ;, if, (, n, !=, null, ), {]
[;, if, (, n, !=, null, ), {, valueStr, =, this, ., tickLabelFormat, ., format, (, n, ., doubleValue, (]
[., getValue, (, ), ;, if, (, n, !=, null, ), {, valueStr, =, this, ., tickLabelFormat, ., format, (]
[., dataset, ., getValue, (, ), ;, if, (, n, !=, null, ), {, valueStr, =, this, ., tickLabelFormat, .]
[), {, valueStr, =, this, ., tickLabelFormat, ., format, (, n, ., doubleValue, (, ), ), +, " ", +, this]
[!=, null, ), {, valueStr, =, this, ., tickLabelFormat, ., format, (, n, ., doubleValue, (, ), ), +, " "]
[), {, valueStr, =, this, ., tickLabelFormat, ., format, (, n, ., doubleValue, (, ), ), +, " ", +, this]
[=, this, ., tickLabelFormat, ., format, (, n, ., doubleValue, (, ), ), +, " ", +, this, ., units, ;]
[;, }, }, float, x, =, (, float, ), area, ., getCenterX, (, ), ;, float, y, =, (, float]
[+, this, ., units, ;, }, }, float, x, =, (, float, ), area, ., getCenterX, (, ), ;, float]
[+, " ", +, this, ., units, ;, }, }, float, x, =, (, float, ), area, ., getCenterX, (, )]
[., format, (, n, ., doubleValue, (, ), ), +, " ", +, this, ., units, ;, }, }, float, x]
[., tickLabelFormat, ., format, (, n, ., doubleValue, (, ), ), +, " ", +, this, ., units, ;, }, }]
[), +, " ", +, this, ., units, ;, }, }, float, x, =, (, float, ), area, ., getCenterX, (]
[., doubleValue, (, ), ), +, " ", +, this, ., units, ;, }, }, float, x, =, (, float, )]
[+, this, ., units, ;, }, }, float, x, =, (, float, ), area, ., getCenterX, (, ), ;, float]
[;, }, }, float, x, =, (, float, ), area, ., getCenterX, (, ), ;, float, y, =, (, float]
[., units, ;, }, }, float, x, =, (, float, ), area, ., getCenterX, (, ), ;, float, y, =]
[;, float, y, =, (, float, ), area, ., getCenterY, (, ), +, DEFAULT_CIRCLE_SIZE, ;, TextUtilities, ., drawAlignedString, (, valueStr]
[;, float, y, =, (, float, ), area, ., getCenterY, (, ), +, DEFAULT_CIRCLE_SIZE, ;, TextUtilities, ., drawAlignedString, (, valueStr]
[., getCenterX, (, ), ;, float, y, =, (, float, ), area, ., getCenterY, (, ), +, DEFAULT_CIRCLE_SIZE, ;, TextUtilities]
[;, TextUtilities, ., drawAlignedString, (, valueStr, ,, g2, ,, x, ,, y, ,, TextAnchor, ., TOP_CENTER, ), ;, }, public]
[+, DEFAULT_CIRCLE_SIZE, ;, TextUtilities, ., drawAlignedString, (, valueStr, ,, g2, ,, x, ,, y, ,, TextAnchor, ., TOP_CENTER, ), ;]
[+, DEFAULT_CIRCLE_SIZE, ;, TextUtilities, ., drawAlignedString, (, valueStr, ,, g2, ,, x, ,, y, ,, TextAnchor, ., TOP_CENTER, ), ;]
[., getCenterY, (, ), +, DEFAULT_CIRCLE_SIZE, ;, TextUtilities, ., drawAlignedString, (, valueStr, ,, g2, ,, x, ,, y, ,, TextAnchor]
[;, TextUtilities, ., drawAlignedString, (, valueStr, ,, g2, ,, x, ,, y, ,, TextAnchor, ., TOP_CENTER, ), ;, }, public]
[;, }, public, String, getPlotType, (, ), {, return, localizationResources, ., getString, (, "Meter_Plot", ), ;, }, public, void, zoom]
[., drawAlignedString, (, valueStr, ,, g2, ,, x, ,, y, ,, TextAnchor, ., TOP_CENTER, ), ;, }, public, String, getPlotType]
[,, g2, ,, x, ,, y, ,, TextAnchor, ., TOP_CENTER, ), ;, }, public, String, getPlotType, (, ), {, return]
[,, x, ,, y, ,, TextAnchor, ., TOP_CENTER, ), ;, }, public, String, getPlotType, (, ), {, return, localizationResources, .]
[,, y, ,, TextAnchor, ., TOP_CENTER, ), ;, }, public, String, getPlotType, (, ), {, return, localizationResources, ., getString, (]
[,, TextAnchor, ., TOP_CENTER, ), ;, }, public, String, getPlotType, (, ), {, return, localizationResources, ., getString, (, "Meter_Plot", )]
[), ;, }, public, String, getPlotType, (, ), {, return, localizationResources, ., getString, (, "Meter_Plot", ), ;, }, public, void]
[., TOP_CENTER, ), ;, }, public, String, getPlotType, (, ), {, return, localizationResources, ., getString, (, "Meter_Plot", ), ;, }]
[;, }, public, void, zoom, (, double, percent, ), {, }, public, boolean, equals, (, Object, obj, ), {, if]
[., getString, (, "Meter_Plot", ), ;, }, public, void, zoom, (, double, percent, ), {, }, public, boolean, equals, (]
[), ;, }, public, void, zoom, (, double, percent, ), {, }, public, boolean, equals, (, Object, obj, ), {]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, MeterPlot, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, MeterPlot, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, MeterPlot, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, MeterPlot, ), ), {, return, false, ;, }, if, (, !, super]
[), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;]
[), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;]
[), ), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false]
[instanceof, MeterPlot, ), ), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {]
[;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, MeterPlot, that, =]
[), {, return, false, ;, }, MeterPlot, that, =, (, MeterPlot, ), obj, ;, if, (, !, ObjectUtilities, ., equal]
[), {, return, false, ;, }, MeterPlot, that, =, (, MeterPlot, ), obj, ;, if, (, !, ObjectUtilities, ., equal]
[., equals, (, obj, ), ), {, return, false, ;, }, MeterPlot, that, =, (, MeterPlot, ), obj, ;, if]
[), ), {, return, false, ;, }, MeterPlot, that, =, (, MeterPlot, ), obj, ;, if, (, !, ObjectUtilities, .]
[;, }, MeterPlot, that, =, (, MeterPlot, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (, this, ., units]
[;, if, (, !, ObjectUtilities, ., equal, (, this, ., units, ,, that, ., units, ), ), {, return, false]
[;, if, (, !, ObjectUtilities, ., equal, (, this, ., units, ,, that, ., units, ), ), {, return, false]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., range, ,, that, ., range]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., range, ,, that, ., range]
[., equal, (, this, ., units, ,, that, ., units, ), ), {, return, false, ;, }, if, (, !]
[,, that, ., units, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, .]
[., units, ,, that, ., units, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., range, ,, that, .]
[., units, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., range, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., range, ,, that, ., range, ), ), {, return]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., intervals, ,, that, ., intervals]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., intervals, ,, that, ., intervals]
[., equal, (, this, ., range, ,, that, ., range, ), ), {, return, false, ;, }, if, (, !]
[,, that, ., range, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, .]
[., range, ,, that, ., range, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., intervals, ,, that, .]
[., range, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., intervals, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., intervals, ,, that, ., intervals, ), ), {, return]
[), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., dialOutlinePaint, ,, that, ., dialOutlinePaint]
[), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., dialOutlinePaint, ,, that, ., dialOutlinePaint]
[., equal, (, this, ., intervals, ,, that, ., intervals, ), ), {, return, false, ;, }, if, (, !]
[,, that, ., intervals, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, .]
[., intervals, ,, that, ., intervals, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., dialOutlinePaint, ,, that, .]
[., intervals, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., dialOutlinePaint, ,]
[;, }, if, (, !, PaintUtilities, ., equal, (, this, ., dialOutlinePaint, ,, that, ., dialOutlinePaint, ), ), {, return]
[), {, return, false, ;, }, if, (, this, ., shape, !=, that, ., shape, ), {, return, false, ;]
[), {, return, false, ;, }, if, (, this, ., shape, !=, that, ., shape, ), {, return, false, ;]
[., equal, (, this, ., dialOutlinePaint, ,, that, ., dialOutlinePaint, ), ), {, return, false, ;, }, if, (, this]
[,, that, ., dialOutlinePaint, ), ), {, return, false, ;, }, if, (, this, ., shape, !=, that, ., shape]
[., dialOutlinePaint, ,, that, ., dialOutlinePaint, ), ), {, return, false, ;, }, if, (, this, ., shape, !=, that]
[), ), {, return, false, ;, }, if, (, this, ., shape, !=, that, ., shape, ), {, return, false]
[., dialOutlinePaint, ), ), {, return, false, ;, }, if, (, this, ., shape, !=, that, ., shape, ), {]
[;, }, if, (, this, ., shape, !=, that, ., shape, ), {, return, false, ;, }, if, (, !]
[), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., dialBackgroundPaint, ,, that, ., dialBackgroundPaint]
[!=, that, ., shape, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., dialBackgroundPaint]
[., shape, !=, that, ., shape, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this]
[), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., dialBackgroundPaint, ,, that, ., dialBackgroundPaint]
[., shape, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., dialBackgroundPaint, ,, that]
[;, }, if, (, !, PaintUtilities, ., equal, (, this, ., dialBackgroundPaint, ,, that, ., dialBackgroundPaint, ), ), {, return]
[), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., needlePaint, ,, that, ., needlePaint]
[), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., needlePaint, ,, that, ., needlePaint]
[., equal, (, this, ., dialBackgroundPaint, ,, that, ., dialBackgroundPaint, ), ), {, return, false, ;, }, if, (, !]
[,, that, ., dialBackgroundPaint, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, .]
[., dialBackgroundPaint, ,, that, ., dialBackgroundPaint, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., needlePaint, ,, that, .]
[., dialBackgroundPaint, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., needlePaint, ,]
[;, }, if, (, !, PaintUtilities, ., equal, (, this, ., needlePaint, ,, that, ., needlePaint, ), ), {, return]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., valueFont, ,, that, ., valueFont]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., valueFont, ,, that, ., valueFont]
[., equal, (, this, ., needlePaint, ,, that, ., needlePaint, ), ), {, return, false, ;, }, if, (, !]
[,, that, ., needlePaint, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, .]
[., needlePaint, ,, that, ., needlePaint, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., valueFont, ,, that, .]
[., needlePaint, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., valueFont, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., valueFont, ,, that, ., valueFont, ), ), {, return]
[), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., valuePaint, ,, that, ., valuePaint]
[), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., valuePaint, ,, that, ., valuePaint]
[., equal, (, this, ., valueFont, ,, that, ., valueFont, ), ), {, return, false, ;, }, if, (, !]
[,, that, ., valueFont, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, .]
[., valueFont, ,, that, ., valueFont, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., valuePaint, ,, that, .]
[., valueFont, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., valuePaint, ,]
[;, }, if, (, !, PaintUtilities, ., equal, (, this, ., valuePaint, ,, that, ., valuePaint, ), ), {, return]
[), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., tickPaint, ,, that, ., tickPaint]
[), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., tickPaint, ,, that, ., tickPaint]
[., equal, (, this, ., valuePaint, ,, that, ., valuePaint, ), ), {, return, false, ;, }, if, (, !]
[,, that, ., valuePaint, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, .]
[., valuePaint, ,, that, ., valuePaint, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., tickPaint, ,, that, .]
[., valuePaint, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., tickPaint, ,]
[;, }, if, (, !, PaintUtilities, ., equal, (, this, ., tickPaint, ,, that, ., tickPaint, ), ), {, return]
[), {, return, false, ;, }, if, (, this, ., tickSize, !=, that, ., tickSize, ), {, return, false, ;]
[), {, return, false, ;, }, if, (, this, ., tickSize, !=, that, ., tickSize, ), {, return, false, ;]
[., equal, (, this, ., tickPaint, ,, that, ., tickPaint, ), ), {, return, false, ;, }, if, (, this]
[,, that, ., tickPaint, ), ), {, return, false, ;, }, if, (, this, ., tickSize, !=, that, ., tickSize]
[., tickPaint, ,, that, ., tickPaint, ), ), {, return, false, ;, }, if, (, this, ., tickSize, !=, that]
[), ), {, return, false, ;, }, if, (, this, ., tickSize, !=, that, ., tickSize, ), {, return, false]
[., tickPaint, ), ), {, return, false, ;, }, if, (, this, ., tickSize, !=, that, ., tickSize, ), {]
[;, }, if, (, this, ., tickSize, !=, that, ., tickSize, ), {, return, false, ;, }, if, (, this]
[), {, return, false, ;, }, if, (, this, ., tickLabelsVisible, !=, that, ., tickLabelsVisible, ), {, return, false, ;]
[!=, that, ., tickSize, ), {, return, false, ;, }, if, (, this, ., tickLabelsVisible, !=, that, ., tickLabelsVisible, )]
[., tickSize, !=, that, ., tickSize, ), {, return, false, ;, }, if, (, this, ., tickLabelsVisible, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., tickLabelsVisible, !=, that, ., tickLabelsVisible, ), {, return, false, ;]
[., tickSize, ), {, return, false, ;, }, if, (, this, ., tickLabelsVisible, !=, that, ., tickLabelsVisible, ), {, return]
[;, }, if, (, this, ., tickLabelsVisible, !=, that, ., tickLabelsVisible, ), {, return, false, ;, }, if, (, !]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFont, ,, that, ., tickLabelFont]
[!=, that, ., tickLabelsVisible, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFont]
[., tickLabelsVisible, !=, that, ., tickLabelsVisible, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFont, ,, that, ., tickLabelFont]
[., tickLabelsVisible, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFont, ,, that]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFont, ,, that, ., tickLabelFont, ), ), {, return]
[), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., tickLabelPaint, ,, that, ., tickLabelPaint]
[), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., tickLabelPaint, ,, that, ., tickLabelPaint]
[., equal, (, this, ., tickLabelFont, ,, that, ., tickLabelFont, ), ), {, return, false, ;, }, if, (, !]
[,, that, ., tickLabelFont, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, .]
[., tickLabelFont, ,, that, ., tickLabelFont, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., tickLabelPaint, ,, that, .]
[., tickLabelFont, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., tickLabelPaint, ,]
[;, }, if, (, !, PaintUtilities, ., equal, (, this, ., tickLabelPaint, ,, that, ., tickLabelPaint, ), ), {, return]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFormat, ,, that, ., tickLabelFormat]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFormat, ,, that, ., tickLabelFormat]
[., equal, (, this, ., tickLabelPaint, ,, that, ., tickLabelPaint, ), ), {, return, false, ;, }, if, (, !]
[,, that, ., tickLabelPaint, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, .]
[., tickLabelPaint, ,, that, ., tickLabelPaint, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFormat, ,, that, .]
[., tickLabelPaint, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFormat, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFormat, ,, that, ., tickLabelFormat, ), ), {, return]
[), {, return, false, ;, }, if, (, this, ., drawBorder, !=, that, ., drawBorder, ), {, return, false, ;]
[), {, return, false, ;, }, if, (, this, ., drawBorder, !=, that, ., drawBorder, ), {, return, false, ;]
[., equal, (, this, ., tickLabelFormat, ,, that, ., tickLabelFormat, ), ), {, return, false, ;, }, if, (, this]
[,, that, ., tickLabelFormat, ), ), {, return, false, ;, }, if, (, this, ., drawBorder, !=, that, ., drawBorder]
[., tickLabelFormat, ,, that, ., tickLabelFormat, ), ), {, return, false, ;, }, if, (, this, ., drawBorder, !=, that]
[), ), {, return, false, ;, }, if, (, this, ., drawBorder, !=, that, ., drawBorder, ), {, return, false]
[., tickLabelFormat, ), ), {, return, false, ;, }, if, (, this, ., drawBorder, !=, that, ., drawBorder, ), {]
[;, }, if, (, this, ., drawBorder, !=, that, ., drawBorder, ), {, return, false, ;, }, if, (, this]
[), {, return, false, ;, }, if, (, this, ., meterAngle, !=, that, ., meterAngle, ), {, return, false, ;]
[!=, that, ., drawBorder, ), {, return, false, ;, }, if, (, this, ., meterAngle, !=, that, ., meterAngle, )]
[., drawBorder, !=, that, ., drawBorder, ), {, return, false, ;, }, if, (, this, ., meterAngle, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., meterAngle, !=, that, ., meterAngle, ), {, return, false, ;]
[., drawBorder, ), {, return, false, ;, }, if, (, this, ., meterAngle, !=, that, ., meterAngle, ), {, return]
[;, }, if, (, this, ., meterAngle, !=, that, ., meterAngle, ), {, return, false, ;, }, return, true, ;]
[), {, return, false, ;, }, return, true, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[!=, that, ., meterAngle, ), {, return, false, ;, }, return, true, ;, }, private, void, writeObject, (, ObjectOutputStream, stream]
[., meterAngle, !=, that, ., meterAngle, ), {, return, false, ;, }, return, true, ;, }, private, void, writeObject, (]
[), {, return, false, ;, }, return, true, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[., meterAngle, ), {, return, false, ;, }, return, true, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws]
[;, }, return, true, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (]
[;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, .]
[;, SerialUtilities, ., writePaint, (, this, ., dialBackgroundPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., dialOutlinePaint, ,]
[., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., dialBackgroundPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (]
[;, SerialUtilities, ., writePaint, (, this, ., dialOutlinePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., needlePaint, ,]
[., writePaint, (, this, ., dialBackgroundPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., dialOutlinePaint, ,, stream, )]
[,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., dialOutlinePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this]
[., dialBackgroundPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., dialOutlinePaint, ,, stream, ), ;, SerialUtilities, ., writePaint]
[), ;, SerialUtilities, ., writePaint, (, this, ., dialOutlinePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., needlePaint]
[;, SerialUtilities, ., writePaint, (, this, ., needlePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., valuePaint, ,]
[., writePaint, (, this, ., dialOutlinePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., needlePaint, ,, stream, )]
[,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., needlePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this]
[., dialOutlinePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., needlePaint, ,, stream, ), ;, SerialUtilities, ., writePaint]
[), ;, SerialUtilities, ., writePaint, (, this, ., needlePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., valuePaint]
[;, SerialUtilities, ., writePaint, (, this, ., valuePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., tickPaint, ,]
[., writePaint, (, this, ., needlePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., valuePaint, ,, stream, )]
[,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., valuePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this]
[., needlePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., valuePaint, ,, stream, ), ;, SerialUtilities, ., writePaint]
[), ;, SerialUtilities, ., writePaint, (, this, ., valuePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., tickPaint]
[;, SerialUtilities, ., writePaint, (, this, ., tickPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., tickLabelPaint, ,]
[., writePaint, (, this, ., valuePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., tickPaint, ,, stream, )]
[,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., tickPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this]
[., valuePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., tickPaint, ,, stream, ), ;, SerialUtilities, ., writePaint]
[), ;, SerialUtilities, ., writePaint, (, this, ., tickPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., tickLabelPaint]
[;, SerialUtilities, ., writePaint, (, this, ., tickLabelPaint, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, )]
[., writePaint, (, this, ., tickPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., tickLabelPaint, ,, stream, )]
[,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., tickLabelPaint, ,, stream, ), ;, }, private, void, readObject, (]
[., tickPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., tickLabelPaint, ,, stream, ), ;, }, private, void]
[), ;, SerialUtilities, ., writePaint, (, this, ., tickLabelPaint, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[., writePaint, (, this, ., tickLabelPaint, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException]
[,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject]
[., tickLabelPaint, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream]
[), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, )]
[;, this, ., dialBackgroundPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., dialOutlinePaint, =, SerialUtilities, ., readPaint, (]
[., defaultReadObject, (, ), ;, this, ., dialBackgroundPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., dialOutlinePaint, =]
[=, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., dialOutlinePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this]
[., dialBackgroundPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., dialOutlinePaint, =, SerialUtilities, ., readPaint, (, stream, )]
[;, this, ., dialOutlinePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., needlePaint, =, SerialUtilities, ., readPaint, (]
[., readPaint, (, stream, ), ;, this, ., dialOutlinePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., needlePaint]
[), ;, this, ., dialOutlinePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., needlePaint, =, SerialUtilities, ., readPaint]
[=, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., needlePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this]
[., dialOutlinePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., needlePaint, =, SerialUtilities, ., readPaint, (, stream, )]
[;, this, ., needlePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., valuePaint, =, SerialUtilities, ., readPaint, (]
[., readPaint, (, stream, ), ;, this, ., needlePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., valuePaint]
[), ;, this, ., needlePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., valuePaint, =, SerialUtilities, ., readPaint]
[=, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., valuePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this]
[., needlePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., valuePaint, =, SerialUtilities, ., readPaint, (, stream, )]
[;, this, ., valuePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., tickPaint, =, SerialUtilities, ., readPaint, (]
[., readPaint, (, stream, ), ;, this, ., valuePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., tickPaint]
[), ;, this, ., valuePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., tickPaint, =, SerialUtilities, ., readPaint]
[=, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., tickPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this]
[., valuePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., tickPaint, =, SerialUtilities, ., readPaint, (, stream, )]
[;, this, ., tickPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., tickLabelPaint, =, SerialUtilities, ., readPaint, (]
[., readPaint, (, stream, ), ;, this, ., tickPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., tickLabelPaint]
[), ;, this, ., tickPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., tickLabelPaint, =, SerialUtilities, ., readPaint]
[=, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., tickLabelPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, if]
[., tickPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., tickLabelPaint, =, SerialUtilities, ., readPaint, (, stream, )]
[;, this, ., tickLabelPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, if, (, this, ., dataset, !=, null, )]
[., readPaint, (, stream, ), ;, this, ., tickLabelPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, if, (, this]
[), ;, this, ., tickLabelPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, if, (, this, ., dataset, !=, null]
[=, SerialUtilities, ., readPaint, (, stream, ), ;, if, (, this, ., dataset, !=, null, ), {, this, ., dataset]
[., tickLabelPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, if, (, this, ., dataset, !=, null, ), {, this]
[;, if, (, this, ., dataset, !=, null, ), {, this, ., dataset, ., addChangeListener, (, this, ), ;, }]
[., readPaint, (, stream, ), ;, if, (, this, ., dataset, !=, null, ), {, this, ., dataset, ., addChangeListener]
[), ;, if, (, this, ., dataset, !=, null, ), {, this, ., dataset, ., addChangeListener, (, this, ), ;]
[), {, this, ., dataset, ., addChangeListener, (, this, ), ;, }, }, public, Object, clone, (, ), throws, CloneNotSupportedException]
[!=, null, ), {, this, ., dataset, ., addChangeListener, (, this, ), ;, }, }, public, Object, clone, (, )]
[., dataset, !=, null, ), {, this, ., dataset, ., addChangeListener, (, this, ), ;, }, }, public, Object, clone]
[), {, this, ., dataset, ., addChangeListener, (, this, ), ;, }, }, public, Object, clone, (, ), throws, CloneNotSupportedException]
[;, }, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, MeterPlot, clone, =, (, MeterPlot, ), super, ., clone]
[., addChangeListener, (, this, ), ;, }, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, MeterPlot, clone, =, (]
[., dataset, ., addChangeListener, (, this, ), ;, }, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, MeterPlot, clone]
[), ;, }, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, MeterPlot, clone, =, (, MeterPlot, ), super, .]
[;, clone, ., tickLabelFormat, =, (, NumberFormat, ), this, ., tickLabelFormat, ., clone, (, ), ;, clone, ., intervals, =]
[;, clone, ., tickLabelFormat, =, (, NumberFormat, ), this, ., tickLabelFormat, ., clone, (, ), ;, clone, ., intervals, =]
[., clone, (, ), ;, clone, ., tickLabelFormat, =, (, NumberFormat, ), this, ., tickLabelFormat, ., clone, (, ), ;]
[=, (, NumberFormat, ), this, ., tickLabelFormat, ., clone, (, ), ;, clone, ., intervals, =, new, java, ., util]
[., tickLabelFormat, =, (, NumberFormat, ), this, ., tickLabelFormat, ., clone, (, ), ;, clone, ., intervals, =, new, java]
[;, clone, ., intervals, =, new, java, ., util, ., ArrayList, (, this, ., intervals, ), ;, if, (, clone]
[;, clone, ., intervals, =, new, java, ., util, ., ArrayList, (, this, ., intervals, ), ;, if, (, clone]
[., clone, (, ), ;, clone, ., intervals, =, new, java, ., util, ., ArrayList, (, this, ., intervals, )]
[., tickLabelFormat, ., clone, (, ), ;, clone, ., intervals, =, new, java, ., util, ., ArrayList, (, this, .]
[=, new, java, ., util, ., ArrayList, (, this, ., intervals, ), ;, if, (, clone, ., dataset, !=, null]
[., intervals, =, new, java, ., util, ., ArrayList, (, this, ., intervals, ), ;, if, (, clone, ., dataset]
[;, if, (, clone, ., dataset, !=, null, ), {, clone, ., dataset, ., addChangeListener, (, clone, ), ;, }]
[), ;, if, (, clone, ., dataset, !=, null, ), {, clone, ., dataset, ., addChangeListener, (, clone, ), ;]
[., intervals, ), ;, if, (, clone, ., dataset, !=, null, ), {, clone, ., dataset, ., addChangeListener, (, clone]
[), {, clone, ., dataset, ., addChangeListener, (, clone, ), ;, }, return, clone, ;, }, }]
[!=, null, ), {, clone, ., dataset, ., addChangeListener, (, clone, ), ;, }, return, clone, ;, }, }]
[., dataset, !=, null, ), {, clone, ., dataset, ., addChangeListener, (, clone, ), ;, }, return, clone, ;, }]
[), {, clone, ., dataset, ., addChangeListener, (, clone, ), ;, }, return, clone, ;, }, }]
[;, }, return, clone, ;, }, }]
[., addChangeListener, (, clone, ), ;, }, return, clone, ;, }, }]
[., dataset, ., addChangeListener, (, clone, ), ;, }, return, clone, ;, }, }]
[), ;, }, return, clone, ;, }, }]
[;, }, }]
