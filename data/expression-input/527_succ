[;, public, PassConfig, (, CompilerOptions, options, ), {, this, ., options, =, options, ;, }, void, regenerateGlobalTypedScope, (, AbstractCompiler, compiler]
[=, options, ;, }, void, regenerateGlobalTypedScope, (, AbstractCompiler, compiler, ,, Node, root, ), {, internalScopeCreator, =, new, TypedScopeCreator, (, compiler]
[., options, =, options, ;, }, void, regenerateGlobalTypedScope, (, AbstractCompiler, compiler, ,, Node, root, ), {, internalScopeCreator, =, new, TypedScopeCreator]
[;, }, void, regenerateGlobalTypedScope, (, AbstractCompiler, compiler, ,, Node, root, ), {, internalScopeCreator, =, new, TypedScopeCreator, (, compiler, ), ;]
[=, new, TypedScopeCreator, (, compiler, ), ;, typedScopeCreator, =, new, MemoizedScopeCreator, (, internalScopeCreator, ), ;, topScope, =, typedScopeCreator, ., createScope]
[;, typedScopeCreator, =, new, MemoizedScopeCreator, (, internalScopeCreator, ), ;, topScope, =, typedScopeCreator, ., createScope, (, root, ,, null, ), ;]
[), ;, typedScopeCreator, =, new, MemoizedScopeCreator, (, internalScopeCreator, ), ;, topScope, =, typedScopeCreator, ., createScope, (, root, ,, null, )]
[=, new, MemoizedScopeCreator, (, internalScopeCreator, ), ;, topScope, =, typedScopeCreator, ., createScope, (, root, ,, null, ), ;, }, void]
[;, topScope, =, typedScopeCreator, ., createScope, (, root, ,, null, ), ;, }, void, clearTypedScope, (, ), {, internalScopeCreator, =]
[), ;, topScope, =, typedScopeCreator, ., createScope, (, root, ,, null, ), ;, }, void, clearTypedScope, (, ), {, internalScopeCreator]
[=, typedScopeCreator, ., createScope, (, root, ,, null, ), ;, }, void, clearTypedScope, (, ), {, internalScopeCreator, =, null, ;]
[;, }, void, clearTypedScope, (, ), {, internalScopeCreator, =, null, ;, typedScopeCreator, =, null, ;, topScope, =, null, ;, }]
[., createScope, (, root, ,, null, ), ;, }, void, clearTypedScope, (, ), {, internalScopeCreator, =, null, ;, typedScopeCreator, =]
[,, null, ), ;, }, void, clearTypedScope, (, ), {, internalScopeCreator, =, null, ;, typedScopeCreator, =, null, ;, topScope, =]
[), ;, }, void, clearTypedScope, (, ), {, internalScopeCreator, =, null, ;, typedScopeCreator, =, null, ;, topScope, =, null, ;]
[=, null, ;, typedScopeCreator, =, null, ;, topScope, =, null, ;, }, void, patchGlobalTypedScope, (, AbstractCompiler, compiler, ,, Node, scriptRoot]
[;, typedScopeCreator, =, null, ;, topScope, =, null, ;, }, void, patchGlobalTypedScope, (, AbstractCompiler, compiler, ,, Node, scriptRoot, ), {]
[=, null, ;, topScope, =, null, ;, }, void, patchGlobalTypedScope, (, AbstractCompiler, compiler, ,, Node, scriptRoot, ), {, Preconditions, .]
[;, topScope, =, null, ;, }, void, patchGlobalTypedScope, (, AbstractCompiler, compiler, ,, Node, scriptRoot, ), {, Preconditions, ., checkNotNull, (]
[=, null, ;, }, void, patchGlobalTypedScope, (, AbstractCompiler, compiler, ,, Node, scriptRoot, ), {, Preconditions, ., checkNotNull, (, internalScopeCreator, )]
[;, }, void, patchGlobalTypedScope, (, AbstractCompiler, compiler, ,, Node, scriptRoot, ), {, Preconditions, ., checkNotNull, (, internalScopeCreator, ), ;, internalScopeCreator]
[;, internalScopeCreator, ., patchGlobalScope, (, topScope, ,, scriptRoot, ), ;, }, MemoizedScopeCreator, getTypedScopeCreator, (, ), {, return, typedScopeCreator, ;, }]
[., checkNotNull, (, internalScopeCreator, ), ;, internalScopeCreator, ., patchGlobalScope, (, topScope, ,, scriptRoot, ), ;, }, MemoizedScopeCreator, getTypedScopeCreator, (, )]
[), ;, internalScopeCreator, ., patchGlobalScope, (, topScope, ,, scriptRoot, ), ;, }, MemoizedScopeCreator, getTypedScopeCreator, (, ), {, return, typedScopeCreator, ;]
[;, }, MemoizedScopeCreator, getTypedScopeCreator, (, ), {, return, typedScopeCreator, ;, }, Scope, getTopScope, (, ), {, return, topScope, ;, }]
[., patchGlobalScope, (, topScope, ,, scriptRoot, ), ;, }, MemoizedScopeCreator, getTypedScopeCreator, (, ), {, return, typedScopeCreator, ;, }, Scope, getTopScope]
[,, scriptRoot, ), ;, }, MemoizedScopeCreator, getTypedScopeCreator, (, ), {, return, typedScopeCreator, ;, }, Scope, getTopScope, (, ), {, return]
[), ;, }, MemoizedScopeCreator, getTypedScopeCreator, (, ), {, return, typedScopeCreator, ;, }, Scope, getTopScope, (, ), {, return, topScope, ;]
[;, }, Scope, getTopScope, (, ), {, return, topScope, ;, }, abstract, protected, List, <, PassFactory, >, getChecks, (, )]
[;, }, abstract, protected, List, <, PassFactory, >, getChecks, (, ), ;, abstract, protected, List, <, PassFactory, >, getOptimizations, (]
[;, Iterable, <, PassFactory, >, allPasses, =, Iterables, ., concat, (, getChecks, (, ), ,, getOptimizations, (, ), ), ;]
[., createWithoutAnnotations, (, ), ;, Iterable, <, PassFactory, >, allPasses, =, Iterables, ., concat, (, getChecks, (, ), ,, getOptimizations]
[;, String, lastPass, =, null, ;, String, loopStart, =, null, ;, for, (, PassFactory, pass, :, allPasses, ), {, String]
[., concat, (, getChecks, (, ), ,, getOptimizations, (, ), ), ;, String, lastPass, =, null, ;, String, loopStart, =]
[,, getOptimizations, (, ), ), ;, String, lastPass, =, null, ;, String, loopStart, =, null, ;, for, (, PassFactory, pass]
[), ;, String, lastPass, =, null, ;, String, loopStart, =, null, ;, for, (, PassFactory, pass, :, allPasses, ), {]
[;, String, loopStart, =, null, ;, for, (, PassFactory, pass, :, allPasses, ), {, String, passName, =, pass, ., getName]
[;, for, (, PassFactory, pass, :, allPasses, ), {, String, passName, =, pass, ., getName, (, ), ;, int, i]
[), {, String, passName, =, pass, ., getName, (, ), ;, int, i, =, 1, ;, while, (, graph, .]
[;, int, i, =, 1, ;, while, (, graph, ., hasNode, (, passName, ), ), {, passName, =, pass, .]
[., getName, (, ), ;, int, i, =, 1, ;, while, (, graph, ., hasNode, (, passName, ), ), {]
[;, while, (, graph, ., hasNode, (, passName, ), ), {, passName, =, pass, ., getName, (, ), +, (]
[), {, passName, =, pass, ., getName, (, ), +, (, i, ++, ), ;, }, graph, ., createNode, (]
[., hasNode, (, passName, ), ), {, passName, =, pass, ., getName, (, ), +, (, i, ++, ), ;]
[), ), {, passName, =, pass, ., getName, (, ), +, (, i, ++, ), ;, }, graph, ., createNode]
[=, pass, ., getName, (, ), +, (, i, ++, ), ;, }, graph, ., createNode, (, passName, ), ;]
[;, }, graph, ., createNode, (, passName, ), ;, if, (, loopStart, ==, null, &&, !, pass, ., isOneTimePass, (]
[+, (, i, ++, ), ;, }, graph, ., createNode, (, passName, ), ;, if, (, loopStart, ==, null, &&]
[., getName, (, ), +, (, i, ++, ), ;, }, graph, ., createNode, (, passName, ), ;, if, (]
[;, }, graph, ., createNode, (, passName, ), ;, if, (, loopStart, ==, null, &&, !, pass, ., isOneTimePass, (]
[), ;, }, graph, ., createNode, (, passName, ), ;, if, (, loopStart, ==, null, &&, !, pass, ., isOneTimePass]
[++, ), ;, }, graph, ., createNode, (, passName, ), ;, if, (, loopStart, ==, null, &&, !, pass, .]
[;, if, (, loopStart, ==, null, &&, !, pass, ., isOneTimePass, (, ), ), {, loopStart, =, passName, ;, }]
[., createNode, (, passName, ), ;, if, (, loopStart, ==, null, &&, !, pass, ., isOneTimePass, (, ), ), {]
[), ;, if, (, loopStart, ==, null, &&, !, pass, ., isOneTimePass, (, ), ), {, loopStart, =, passName, ;]
[), {, loopStart, =, passName, ;, }, else, if, (, loopStart, !=, null, &&, pass, ., isOneTimePass, (, ), )]
[&&, !, pass, ., isOneTimePass, (, ), ), {, loopStart, =, passName, ;, }, else, if, (, loopStart, !=, null]
[==, null, &&, !, pass, ., isOneTimePass, (, ), ), {, loopStart, =, passName, ;, }, else, if, (, loopStart]
[&&, !, pass, ., isOneTimePass, (, ), ), {, loopStart, =, passName, ;, }, else, if, (, loopStart, !=, null]
[), {, loopStart, =, passName, ;, }, else, if, (, loopStart, !=, null, &&, pass, ., isOneTimePass, (, ), )]
[), {, loopStart, =, passName, ;, }, else, if, (, loopStart, !=, null, &&, pass, ., isOneTimePass, (, ), )]
[., isOneTimePass, (, ), ), {, loopStart, =, passName, ;, }, else, if, (, loopStart, !=, null, &&, pass, .]
[=, passName, ;, }, else, if, (, loopStart, !=, null, &&, pass, ., isOneTimePass, (, ), ), {, graph, .]
[;, }, else, if, (, loopStart, !=, null, &&, pass, ., isOneTimePass, (, ), ), {, graph, ., connect, (]
[), {, graph, ., connect, (, lastPass, ,, "loop", ,, loopStart, ), ;, loopStart, =, null, ;, }, if, (]
[&&, pass, ., isOneTimePass, (, ), ), {, graph, ., connect, (, lastPass, ,, "loop", ,, loopStart, ), ;, loopStart]
[!=, null, &&, pass, ., isOneTimePass, (, ), ), {, graph, ., connect, (, lastPass, ,, "loop", ,, loopStart, )]
[&&, pass, ., isOneTimePass, (, ), ), {, graph, ., connect, (, lastPass, ,, "loop", ,, loopStart, ), ;, loopStart]
[), {, graph, ., connect, (, lastPass, ,, "loop", ,, loopStart, ), ;, loopStart, =, null, ;, }, if, (]
[., isOneTimePass, (, ), ), {, graph, ., connect, (, lastPass, ,, "loop", ,, loopStart, ), ;, loopStart, =, null]
[;, loopStart, =, null, ;, }, if, (, lastPass, !=, null, ), {, graph, ., connect, (, lastPass, ,, ""]
[., connect, (, lastPass, ,, "loop", ,, loopStart, ), ;, loopStart, =, null, ;, }, if, (, lastPass, !=, null]
[,, "loop", ,, loopStart, ), ;, loopStart, =, null, ;, }, if, (, lastPass, !=, null, ), {, graph, .]
[,, loopStart, ), ;, loopStart, =, null, ;, }, if, (, lastPass, !=, null, ), {, graph, ., connect, (]
[), ;, loopStart, =, null, ;, }, if, (, lastPass, !=, null, ), {, graph, ., connect, (, lastPass, ,]
[=, null, ;, }, if, (, lastPass, !=, null, ), {, graph, ., connect, (, lastPass, ,, "", ,, passName]
[;, }, if, (, lastPass, !=, null, ), {, graph, ., connect, (, lastPass, ,, "", ,, passName, ), ;]
[), {, graph, ., connect, (, lastPass, ,, "", ,, passName, ), ;, }, lastPass, =, passName, ;, }, return]
[!=, null, ), {, graph, ., connect, (, lastPass, ,, "", ,, passName, ), ;, }, lastPass, =, passName, ;]
[), {, graph, ., connect, (, lastPass, ,, "", ,, passName, ), ;, }, lastPass, =, passName, ;, }, return]
[;, }, lastPass, =, passName, ;, }, return, graph, ;, }, final, TypeInferencePass, makeTypeInference, (, AbstractCompiler, compiler, ), {, return]
[., connect, (, lastPass, ,, "", ,, passName, ), ;, }, lastPass, =, passName, ;, }, return, graph, ;, }]
[,, "", ,, passName, ), ;, }, lastPass, =, passName, ;, }, return, graph, ;, }, final, TypeInferencePass, makeTypeInference, (]
[,, passName, ), ;, }, lastPass, =, passName, ;, }, return, graph, ;, }, final, TypeInferencePass, makeTypeInference, (, AbstractCompiler, compiler]
[), ;, }, lastPass, =, passName, ;, }, return, graph, ;, }, final, TypeInferencePass, makeTypeInference, (, AbstractCompiler, compiler, ), {]
[=, passName, ;, }, return, graph, ;, }, final, TypeInferencePass, makeTypeInference, (, AbstractCompiler, compiler, ), {, return, new, TypeInferencePass, (]
[;, }, return, graph, ;, }, final, TypeInferencePass, makeTypeInference, (, AbstractCompiler, compiler, ), {, return, new, TypeInferencePass, (, compiler, ,]
[;, }, final, TypeInferencePass, makeTypeInference, (, AbstractCompiler, compiler, ), {, return, new, TypeInferencePass, (, compiler, ,, compiler, ., getReverseAbstractInterpreter, (]
[;, }, final, InferJSDocInfo, makeInferJsDocInfo, (, AbstractCompiler, compiler, ), {, return, new, InferJSDocInfo, (, compiler, ), ;, }, final, TypeCheck]
[,, compiler, ., getReverseAbstractInterpreter, (, ), ,, topScope, ,, typedScopeCreator, ), ;, }, final, InferJSDocInfo, makeInferJsDocInfo, (, AbstractCompiler, compiler, )]
[,, topScope, ,, typedScopeCreator, ), ;, }, final, InferJSDocInfo, makeInferJsDocInfo, (, AbstractCompiler, compiler, ), {, return, new, InferJSDocInfo, (, compiler]
[., getReverseAbstractInterpreter, (, ), ,, topScope, ,, typedScopeCreator, ), ;, }, final, InferJSDocInfo, makeInferJsDocInfo, (, AbstractCompiler, compiler, ), {, return]
[,, typedScopeCreator, ), ;, }, final, InferJSDocInfo, makeInferJsDocInfo, (, AbstractCompiler, compiler, ), {, return, new, InferJSDocInfo, (, compiler, ), ;]
[), ;, }, final, InferJSDocInfo, makeInferJsDocInfo, (, AbstractCompiler, compiler, ), {, return, new, InferJSDocInfo, (, compiler, ), ;, }, final]
[;, }, final, TypeCheck, makeTypeCheck, (, AbstractCompiler, compiler, ), {, return, new, TypeCheck, (, compiler, ,, compiler, ., getReverseAbstractInterpreter, (]
[), ;, }, final, TypeCheck, makeTypeCheck, (, AbstractCompiler, compiler, ), {, return, new, TypeCheck, (, compiler, ,, compiler, ., getReverseAbstractInterpreter]
[;, }, final, static, void, addPassFactoryBefore, (, List, <, PassFactory, >, factoryList, ,, PassFactory, factory, ,, String, passName, ), {]
[., reportMissingProperties, (, options, ., enables, (, DiagnosticGroup, ., forType, (, TypeCheck, ., INEXISTENT_PROPERTY, ), ), ), ;, }, final]
[,, compiler, ., getReverseAbstractInterpreter, (, ), ,, compiler, ., getTypeRegistry, (, ), ,, topScope, ,, typedScopeCreator, ,, options, ., reportMissingOverride]
[,, compiler, ., getTypeRegistry, (, ), ,, topScope, ,, typedScopeCreator, ,, options, ., reportMissingOverride, ,, options, ., reportUnknownTypes, ), .]
[., getReverseAbstractInterpreter, (, ), ,, compiler, ., getTypeRegistry, (, ), ,, topScope, ,, typedScopeCreator, ,, options, ., reportMissingOverride, ,, options]
[,, topScope, ,, typedScopeCreator, ,, options, ., reportMissingOverride, ,, options, ., reportUnknownTypes, ), ., reportMissingProperties, (, options, ., enables, (]
[., getTypeRegistry, (, ), ,, topScope, ,, typedScopeCreator, ,, options, ., reportMissingOverride, ,, options, ., reportUnknownTypes, ), ., reportMissingProperties, (]
[,, typedScopeCreator, ,, options, ., reportMissingOverride, ,, options, ., reportUnknownTypes, ), ., reportMissingProperties, (, options, ., enables, (, DiagnosticGroup, .]
[,, options, ., reportMissingOverride, ,, options, ., reportUnknownTypes, ), ., reportMissingProperties, (, options, ., enables, (, DiagnosticGroup, ., forType, (]
[,, options, ., reportUnknownTypes, ), ., reportMissingProperties, (, options, ., enables, (, DiagnosticGroup, ., forType, (, TypeCheck, ., INEXISTENT_PROPERTY, )]
[., reportMissingOverride, ,, options, ., reportUnknownTypes, ), ., reportMissingProperties, (, options, ., enables, (, DiagnosticGroup, ., forType, (, TypeCheck, .]
[), ., reportMissingProperties, (, options, ., enables, (, DiagnosticGroup, ., forType, (, TypeCheck, ., INEXISTENT_PROPERTY, ), ), ), ;, }]
[., reportUnknownTypes, ), ., reportMissingProperties, (, options, ., enables, (, DiagnosticGroup, ., forType, (, TypeCheck, ., INEXISTENT_PROPERTY, ), ), )]
[), ;, }, final, static, void, addPassFactoryBefore, (, List, <, PassFactory, >, factoryList, ,, PassFactory, factory, ,, String, passName, )]
[., enables, (, DiagnosticGroup, ., forType, (, TypeCheck, ., INEXISTENT_PROPERTY, ), ), ), ;, }, final, static, void, addPassFactoryBefore, (]
[), ), ;, }, final, static, void, addPassFactoryBefore, (, List, <, PassFactory, >, factoryList, ,, PassFactory, factory, ,, String, passName]
[., forType, (, TypeCheck, ., INEXISTENT_PROPERTY, ), ), ), ;, }, final, static, void, addPassFactoryBefore, (, List, <, PassFactory, >]
[), ), ), ;, }, final, static, void, addPassFactoryBefore, (, List, <, PassFactory, >, factoryList, ,, PassFactory, factory, ,, String]
[., INEXISTENT_PROPERTY, ), ), ), ;, }, final, static, void, addPassFactoryBefore, (, List, <, PassFactory, >, factoryList, ,, PassFactory, factory]
[;, }, final, static, void, replacePassFactory, (, List, <, PassFactory, >, factoryList, ,, PassFactory, factory, ), {, factoryList, ., set]
[., add, (, findPassIndexByName, (, factoryList, ,, passName, ), ,, factory, ), ;, }, final, static, void, replacePassFactory, (, List]
[,, factory, ), ;, }, final, static, void, replacePassFactory, (, List, <, PassFactory, >, factoryList, ,, PassFactory, factory, ), {]
[,, passName, ), ,, factory, ), ;, }, final, static, void, replacePassFactory, (, List, <, PassFactory, >, factoryList, ,, PassFactory]
[), ,, factory, ), ;, }, final, static, void, replacePassFactory, (, List, <, PassFactory, >, factoryList, ,, PassFactory, factory, )]
[), ;, }, final, static, void, replacePassFactory, (, List, <, PassFactory, >, factoryList, ,, PassFactory, factory, ), {, factoryList, .]
[;, }, private, static, int, findPassIndexByName, (, List, <, PassFactory, >, factoryList, ,, String, name, ), {, for, (, int]
[., set, (, findPassIndexByName, (, factoryList, ,, factory, ., getName, (, ), ), ,, factory, ), ;, }, private, static]
[,, factory, ), ;, }, private, static, int, findPassIndexByName, (, List, <, PassFactory, >, factoryList, ,, String, name, ), {]
[,, factory, ., getName, (, ), ), ,, factory, ), ;, }, private, static, int, findPassIndexByName, (, List, <, PassFactory]
[), ,, factory, ), ;, }, private, static, int, findPassIndexByName, (, List, <, PassFactory, >, factoryList, ,, String, name, )]
[., getName, (, ), ), ,, factory, ), ;, }, private, static, int, findPassIndexByName, (, List, <, PassFactory, >, factoryList]
[), ;, }, private, static, int, findPassIndexByName, (, List, <, PassFactory, >, factoryList, ,, String, name, ), {, for, (]
[;, i, <, factoryList, ., size, (, ), ;, i, ++, ), {, if, (, factoryList, ., get, (, i]
[;, i, ++, ), {, if, (, factoryList, ., get, (, i, ), ., getName, (, ), ., equals, (]
[<, factoryList, ., size, (, ), ;, i, ++, ), {, if, (, factoryList, ., get, (, i, ), .]
[;, i, ++, ), {, if, (, factoryList, ., get, (, i, ), ., getName, (, ), ., equals, (]
[., size, (, ), ;, i, ++, ), {, if, (, factoryList, ., get, (, i, ), ., getName, (]
[), {, if, (, factoryList, ., get, (, i, ), ., getName, (, ), ., equals, (, name, ), )]
[++, ), {, if, (, factoryList, ., get, (, i, ), ., getName, (, ), ., equals, (, name, )]
[), {, return, i, ;, }, }, throw, new, IllegalArgumentException, (, "No factory named '", +, name, +, "' in the factory list", ), ;, }, final]
[., equals, (, name, ), ), {, return, i, ;, }, }, throw, new, IllegalArgumentException, (, "No factory named '", +, name, +]
[., getName, (, ), ., equals, (, name, ), ), {, return, i, ;, }, }, throw, new, IllegalArgumentException, (]
[., get, (, i, ), ., getName, (, ), ., equals, (, name, ), ), {, return, i, ;, }]
[), ., getName, (, ), ., equals, (, name, ), ), {, return, i, ;, }, }, throw, new, IllegalArgumentException]
[), ), {, return, i, ;, }, }, throw, new, IllegalArgumentException, (, "No factory named '", +, name, +, "' in the factory list", ), ;, }]
[;, }, }, throw, new, IllegalArgumentException, (, "No factory named '", +, name, +, "' in the factory list", ), ;, }, final, PassConfig, getBasePassConfig, (, )]
[;, }, final, PassConfig, getBasePassConfig, (, ), {, PassConfig, current, =, this, ;, while, (, current, instanceof, PassConfigDelegate, ), {]
[), ;, }, final, PassConfig, getBasePassConfig, (, ), {, PassConfig, current, =, this, ;, while, (, current, instanceof, PassConfigDelegate, )]
[+, "' in the factory list", ), ;, }, final, PassConfig, getBasePassConfig, (, ), {, PassConfig, current, =, this, ;, while, (, current, instanceof]
[+, name, +, "' in the factory list", ), ;, }, final, PassConfig, getBasePassConfig, (, ), {, PassConfig, current, =, this, ;, while, (]
[+, "' in the factory list", ), ;, }, final, PassConfig, getBasePassConfig, (, ), {, PassConfig, current, =, this, ;, while, (, current, instanceof]
[), ;, }, final, PassConfig, getBasePassConfig, (, ), {, PassConfig, current, =, this, ;, while, (, current, instanceof, PassConfigDelegate, )]
[;, while, (, current, instanceof, PassConfigDelegate, ), {, current, =, (, (, PassConfigDelegate, ), current, ), ., delegate, ;, }]
[), {, current, =, (, (, PassConfigDelegate, ), current, ), ., delegate, ;, }, return, current, ;, }, protected, abstract]
[instanceof, PassConfigDelegate, ), {, current, =, (, (, PassConfigDelegate, ), current, ), ., delegate, ;, }, return, current, ;, }]
[=, (, (, PassConfigDelegate, ), current, ), ., delegate, ;, }, return, current, ;, }, protected, abstract, State, getIntermediateState, (]
[;, }, return, current, ;, }, protected, abstract, State, getIntermediateState, (, ), ;, protected, abstract, void, setIntermediateState, (, State, state]
[., delegate, ;, }, return, current, ;, }, protected, abstract, State, getIntermediateState, (, ), ;, protected, abstract, void, setIntermediateState, (]
[), ., delegate, ;, }, return, current, ;, }, protected, abstract, State, getIntermediateState, (, ), ;, protected, abstract, void, setIntermediateState]
[), ., delegate, ;, }, return, current, ;, }, protected, abstract, State, getIntermediateState, (, ), ;, protected, abstract, void, setIntermediateState]
[;, }, protected, abstract, State, getIntermediateState, (, ), ;, protected, abstract, void, setIntermediateState, (, State, state, ), ;, static, class]
[), ;, this, ., delegate, =, delegate, ;, }, @, Override, protected, List, <, PassFactory, >, getChecks, (, ), {]
[., options, ), ;, this, ., delegate, =, delegate, ;, }, @, Override, protected, List, <, PassFactory, >, getChecks, (]
[=, delegate, ;, }, @, Override, protected, List, <, PassFactory, >, getChecks, (, ), {, return, delegate, ., getChecks, (]
[., delegate, =, delegate, ;, }, @, Override, protected, List, <, PassFactory, >, getChecks, (, ), {, return, delegate, .]
[;, }, @, Override, protected, List, <, PassFactory, >, getChecks, (, ), {, return, delegate, ., getChecks, (, ), ;]
[;, }, @, Override, protected, List, <, PassFactory, >, getOptimizations, (, ), {, return, delegate, ., getOptimizations, (, ), ;]
[., getChecks, (, ), ;, }, @, Override, protected, List, <, PassFactory, >, getOptimizations, (, ), {, return, delegate, .]
[;, }, @, Override, MemoizedScopeCreator, getTypedScopeCreator, (, ), {, return, delegate, ., getTypedScopeCreator, (, ), ;, }, @, Override, Scope]
[., getOptimizations, (, ), ;, }, @, Override, MemoizedScopeCreator, getTypedScopeCreator, (, ), {, return, delegate, ., getTypedScopeCreator, (, ), ;]
[;, }, @, Override, Scope, getTopScope, (, ), {, return, delegate, ., getTopScope, (, ), ;, }, @, Override, protected]
[., getTypedScopeCreator, (, ), ;, }, @, Override, Scope, getTopScope, (, ), {, return, delegate, ., getTopScope, (, ), ;]
[;, }, @, Override, protected, State, getIntermediateState, (, ), {, return, delegate, ., getIntermediateState, (, ), ;, }, @, Override]
[., getTopScope, (, ), ;, }, @, Override, protected, State, getIntermediateState, (, ), {, return, delegate, ., getIntermediateState, (, )]
[;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {, delegate, ., setIntermediateState, (, state, ), ;, }]
[., getIntermediateState, (, ), ;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {, delegate, ., setIntermediateState, (]
[;, }, }, public, static, class, State, implements, Serializable, {, private, static, final, long, serialVersionUID, =, 1L, ;, final, Map]
[., setIntermediateState, (, state, ), ;, }, }, public, static, class, State, implements, Serializable, {, private, static, final, long, serialVersionUID]
[), ;, }, }, public, static, class, State, implements, Serializable, {, private, static, final, long, serialVersionUID, =, 1L, ;, final]
[;, final, Map, <, String, ,, Integer, >, cssNames, ;, final, Set, <, String, >, exportedNames, ;, final, CrossModuleMethodMotion, .]
[=, cssNames, ;, this, ., exportedNames, =, exportedNames, ;, this, ., crossModuleIdGenerator, =, crossModuleIdGenerator, ;, this, ., variableMap, =, variableMap]
[., cssNames, =, cssNames, ;, this, ., exportedNames, =, exportedNames, ;, this, ., crossModuleIdGenerator, =, crossModuleIdGenerator, ;, this, ., variableMap]
[;, this, ., exportedNames, =, exportedNames, ;, this, ., crossModuleIdGenerator, =, crossModuleIdGenerator, ;, this, ., variableMap, =, variableMap, ;, this]
[=, exportedNames, ;, this, ., crossModuleIdGenerator, =, crossModuleIdGenerator, ;, this, ., variableMap, =, variableMap, ;, this, ., propertyMap, =, propertyMap]
[., exportedNames, =, exportedNames, ;, this, ., crossModuleIdGenerator, =, crossModuleIdGenerator, ;, this, ., variableMap, =, variableMap, ;, this, ., propertyMap]
[;, this, ., crossModuleIdGenerator, =, crossModuleIdGenerator, ;, this, ., variableMap, =, variableMap, ;, this, ., propertyMap, =, propertyMap, ;, this]
[=, crossModuleIdGenerator, ;, this, ., variableMap, =, variableMap, ;, this, ., propertyMap, =, propertyMap, ;, this, ., anonymousFunctionNameMap, =, anonymousFunctionNameMap]
[., crossModuleIdGenerator, =, crossModuleIdGenerator, ;, this, ., variableMap, =, variableMap, ;, this, ., propertyMap, =, propertyMap, ;, this, ., anonymousFunctionNameMap]
[;, this, ., variableMap, =, variableMap, ;, this, ., propertyMap, =, propertyMap, ;, this, ., anonymousFunctionNameMap, =, anonymousFunctionNameMap, ;, this]
[=, variableMap, ;, this, ., propertyMap, =, propertyMap, ;, this, ., anonymousFunctionNameMap, =, anonymousFunctionNameMap, ;, this, ., stringMap, =, stringMap]
[., variableMap, =, variableMap, ;, this, ., propertyMap, =, propertyMap, ;, this, ., anonymousFunctionNameMap, =, anonymousFunctionNameMap, ;, this, ., stringMap]
[;, this, ., propertyMap, =, propertyMap, ;, this, ., anonymousFunctionNameMap, =, anonymousFunctionNameMap, ;, this, ., stringMap, =, stringMap, ;, this]
[=, propertyMap, ;, this, ., anonymousFunctionNameMap, =, anonymousFunctionNameMap, ;, this, ., stringMap, =, stringMap, ;, this, ., idGeneratorMap, =, idGeneratorMap]
[., propertyMap, =, propertyMap, ;, this, ., anonymousFunctionNameMap, =, anonymousFunctionNameMap, ;, this, ., stringMap, =, stringMap, ;, this, ., idGeneratorMap]
[;, this, ., anonymousFunctionNameMap, =, anonymousFunctionNameMap, ;, this, ., stringMap, =, stringMap, ;, this, ., idGeneratorMap, =, idGeneratorMap, ;, this]
[=, anonymousFunctionNameMap, ;, this, ., stringMap, =, stringMap, ;, this, ., idGeneratorMap, =, idGeneratorMap, ;, this, ., functionNames, =, functionNames]
[., anonymousFunctionNameMap, =, anonymousFunctionNameMap, ;, this, ., stringMap, =, stringMap, ;, this, ., idGeneratorMap, =, idGeneratorMap, ;, this, ., functionNames]
[;, this, ., stringMap, =, stringMap, ;, this, ., idGeneratorMap, =, idGeneratorMap, ;, this, ., functionNames, =, functionNames, ;, }]
[=, stringMap, ;, this, ., idGeneratorMap, =, idGeneratorMap, ;, this, ., functionNames, =, functionNames, ;, }, }, }]
[., stringMap, =, stringMap, ;, this, ., idGeneratorMap, =, idGeneratorMap, ;, this, ., functionNames, =, functionNames, ;, }, }, }]
[;, this, ., idGeneratorMap, =, idGeneratorMap, ;, this, ., functionNames, =, functionNames, ;, }, }, }]
[=, idGeneratorMap, ;, this, ., functionNames, =, functionNames, ;, }, }, }]
[., idGeneratorMap, =, idGeneratorMap, ;, this, ., functionNames, =, functionNames, ;, }, }, }]
[;, this, ., functionNames, =, functionNames, ;, }, }, }]
[=, functionNames, ;, }, }, }]
[., functionNames, =, functionNames, ;, }, }, }]
[;, }, }, }]
