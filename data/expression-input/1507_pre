[java, ., util, ., regex, ., Pattern, ;, public, class, WhitelistWarningsGuard, extends, WarningsGuard, {, private, static, final, Splitter, LINE_SPLITTER, =]
[java, ., util, ., regex, ., Pattern, ;, public, class, WhitelistWarningsGuard, extends, WarningsGuard, {, private, static, final, Splitter, LINE_SPLITTER, =]
[regex, ., Pattern, ;, public, class, WhitelistWarningsGuard, extends, WarningsGuard, {, private, static, final, Splitter, LINE_SPLITTER, =, Splitter, ., on, (]
[., on, (, "\n", ), ;, private, final, Set, <, String, >, whitelist, ;, private, static, final, Pattern, LINE_NUMBER, =]
[., on, (, "\n", ), ;, private, final, Set, <, String, >, whitelist, ;, private, static, final, Pattern, LINE_NUMBER, =]
[), ;, private, final, Set, <, String, >, whitelist, ;, private, static, final, Pattern, LINE_NUMBER, =, Pattern, ., compile, (]
[Pattern, LINE_NUMBER, =, Pattern, ., compile, (, ":-?\\d+", ), ;, public, WhitelistWarningsGuard, (, Set, <, String, >, whitelist, ), {]
[Pattern, LINE_NUMBER, =, Pattern, ., compile, (, ":-?\\d+", ), ;, public, WhitelistWarningsGuard, (, Set, <, String, >, whitelist, ), {]
[., compile, (, ":-?\\d+", ), ;, public, WhitelistWarningsGuard, (, Set, <, String, >, whitelist, ), {, Preconditions, ., checkNotNull, (]
[":-?\\d+", ), ;, public, WhitelistWarningsGuard, (, Set, <, String, >, whitelist, ), {, Preconditions, ., checkNotNull, (, whitelist, ), ;]
[":-?\\d+", ), ;, public, WhitelistWarningsGuard, (, Set, <, String, >, whitelist, ), {, Preconditions, ., checkNotNull, (, whitelist, ), ;]
[WhitelistWarningsGuard, (, Set, <, String, >, whitelist, ), {, Preconditions, ., checkNotNull, (, whitelist, ), ;, this, ., whitelist, =]
[Set, <, String, >, whitelist, ), {, Preconditions, ., checkNotNull, (, whitelist, ), ;, this, ., whitelist, =, normalizeWhitelist, (]
[static, Set, <, String, >, normalizeWhitelist, (, Set, <, String, >, whitelist, ), {, Set, <, String, >, result, =]
[static, Set, <, String, >, normalizeWhitelist, (, Set, <, String, >, whitelist, ), {, Set, <, String, >, result, =]
[whitelist, ), {, Set, <, String, >, result, =, Sets, ., newHashSet, (, ), ;, for, (, String, line, :]
[>, result, =, Sets, ., newHashSet, (, ), ;, for, (, String, line, :, whitelist, ), {, String, trimmed, =]
[>, result, =, Sets, ., newHashSet, (, ), ;, for, (, String, line, :, whitelist, ), {, String, trimmed, =]
[;, for, (, String, line, :, whitelist, ), {, String, trimmed, =, line, ., trim, (, ), ;, if, (]
[;, for, (, String, line, :, whitelist, ), {, String, trimmed, =, line, ., trim, (, ), ;, if, (]
[;, for, (, String, line, :, whitelist, ), {, String, trimmed, =, line, ., trim, (, ), ;, if, (]
[whitelist, ), {, String, trimmed, =, line, ., trim, (, ), ;, if, (, trimmed, ., isEmpty, (, ), ||]
[whitelist, ), {, String, trimmed, =, line, ., trim, (, ), ;, if, (, trimmed, ., isEmpty, (, ), ||]
[whitelist, ), {, String, trimmed, =, line, ., trim, (, ), ;, if, (, trimmed, ., isEmpty, (, ), ||]
[trimmed, =, line, ., trim, (, ), ;, if, (, trimmed, ., isEmpty, (, ), ||, trimmed, ., charAt, (]
[., trim, (, ), ;, if, (, trimmed, ., isEmpty, (, ), ||, trimmed, ., charAt, (, 0, ), ==]
[(, trimmed, ., isEmpty, (, ), ||, trimmed, ., charAt, (, 0, ), ==, '#', ), {, continue, ;, }]
[(, trimmed, ., isEmpty, (, ), ||, trimmed, ., charAt, (, 0, ), ==, '#', ), {, continue, ;, }]
[(, ), ||, trimmed, ., charAt, (, 0, ), ==, '#', ), {, continue, ;, }, result, ., add, (]
[(, ), ||, trimmed, ., charAt, (, 0, ), ==, '#', ), {, continue, ;, }, result, ., add, (]
[(, ), ||, trimmed, ., charAt, (, 0, ), ==, '#', ), {, continue, ;, }, result, ., add, (]
[., charAt, (, 0, ), ==, '#', ), {, continue, ;, }, result, ., add, (, LINE_NUMBER, ., matcher, (]
[==, '#', ), {, continue, ;, }, result, ., add, (, LINE_NUMBER, ., matcher, (, trimmed, ), ., replaceFirst, (]
[}, result, ., add, (, LINE_NUMBER, ., matcher, (, trimmed, ), ., replaceFirst, (, ":", ), ), ;, }, return]
[}, result, ., add, (, LINE_NUMBER, ., matcher, (, trimmed, ), ., replaceFirst, (, ":", ), ), ;, }, return]
[(, LINE_NUMBER, ., matcher, (, trimmed, ), ., replaceFirst, (, ":", ), ), ;, }, return, ImmutableSet, ., copyOf, (]
[ImmutableSet, ., copyOf, (, result, ), ;, }, @, Override, public, CheckLevel, level, (, JSError, error, ), {, if, (]
[copyOf, (, result, ), ;, }, @, Override, public, CheckLevel, level, (, JSError, error, ), {, if, (, containWarning, (]
[result, ), ;, }, @, Override, public, CheckLevel, level, (, JSError, error, ), {, if, (, containWarning, (, formatWarning, (]
[public, CheckLevel, level, (, JSError, error, ), {, if, (, containWarning, (, formatWarning, (, error, ), ), ), {, return]
[public, CheckLevel, level, (, JSError, error, ), {, if, (, containWarning, (, formatWarning, (, error, ), ), ), {, return]
[), {, if, (, containWarning, (, formatWarning, (, error, ), ), ), {, return, CheckLevel, ., WARNING, ;, }, return]
[{, return, CheckLevel, ., WARNING, ;, }, return, null, ;, }, protected, boolean, containWarning, (, String, formattedWarning, ), {, return]
[{, return, CheckLevel, ., WARNING, ;, }, return, null, ;, }, protected, boolean, containWarning, (, String, formattedWarning, ), {, return]
[WARNING, ;, }, return, null, ;, }, protected, boolean, containWarning, (, String, formattedWarning, ), {, return, whitelist, ., contains, (]
[), {, return, whitelist, ., contains, (, formattedWarning, ), ;, }, @, Override, public, int, getPriority, (, ), {, return]
[), {, return, whitelist, ., contains, (, formattedWarning, ), ;, }, @, Override, public, int, getPriority, (, ), {, return]
[), {, return, whitelist, ., contains, (, formattedWarning, ), ;, }, @, Override, public, int, getPriority, (, ), {, return]
[), {, return, whitelist, ., contains, (, formattedWarning, ), ;, }, @, Override, public, int, getPriority, (, ), {, return]
[., Priority, ., SUPPRESS_BY_WHITELIST, ., getValue, (, ), ;, }, public, static, WhitelistWarningsGuard, fromFile, (, File, file, ), {, return]
[SUPPRESS_BY_WHITELIST, ., getValue, (, ), ;, }, public, static, WhitelistWarningsGuard, fromFile, (, File, file, ), {, return, new, WhitelistWarningsGuard, (]
[getValue, (, ), ;, }, public, static, WhitelistWarningsGuard, fromFile, (, File, file, ), {, return, new, WhitelistWarningsGuard, (, loadWhitelistedJsWarnings, (]
[loadWhitelistedJsWarnings, (, file, ), ), ;, }, public, static, Set, <, String, >, loadWhitelistedJsWarnings, (, File, file, ), {, return]
[file, ), ), ;, }, public, static, Set, <, String, >, loadWhitelistedJsWarnings, (, File, file, ), {, return, loadWhitelistedJsWarnings, (]
[file, ), ), ;, }, public, static, Set, <, String, >, loadWhitelistedJsWarnings, (, File, file, ), {, return, loadWhitelistedJsWarnings, (]
[}, public, static, Set, <, String, >, loadWhitelistedJsWarnings, (, File, file, ), {, return, loadWhitelistedJsWarnings, (, Files, ., newReaderSupplier, (]
[static, Set, <, String, >, loadWhitelistedJsWarnings, (, File, file, ), {, return, loadWhitelistedJsWarnings, (, Files, ., newReaderSupplier, (, file, ,]
[static, Set, <, String, >, loadWhitelistedJsWarnings, (, File, file, ), {, return, loadWhitelistedJsWarnings, (, Files, ., newReaderSupplier, (, file, ,]
[protected, static, Set, <, String, >, loadWhitelistedJsWarnings, (, InputSupplier, <, ?, extends, Reader, >, supplier, ), {, try, {, return]
[Set, <, String, >, loadWhitelistedJsWarnings, (, InputSupplier, <, ?, extends, Reader, >, supplier, ), {, try, {, return, loadWhitelistedJsWarnings, (]
[Set, <, String, >, loadWhitelistedJsWarnings, (, InputSupplier, <, ?, extends, Reader, >, supplier, ), {, try, {, return, loadWhitelistedJsWarnings, (]
[try, {, return, loadWhitelistedJsWarnings, (, supplier, ., getInput, (, ), ), ;, }, catch, (, IOException, e, ), {, throw]
[loadWhitelistedJsWarnings, (, supplier, ., getInput, (, ), ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (]
[RuntimeException, (, e, ), ;, }, }, static, Set, <, String, >, loadWhitelistedJsWarnings, (, Reader, reader, ), throws, IOException, {]
[RuntimeException, (, e, ), ;, }, }, static, Set, <, String, >, loadWhitelistedJsWarnings, (, Reader, reader, ), throws, IOException, {]
[;, }, }, static, Set, <, String, >, loadWhitelistedJsWarnings, (, Reader, reader, ), throws, IOException, {, Preconditions, ., checkNotNull, (]
[(, Reader, reader, ), throws, IOException, {, Preconditions, ., checkNotNull, (, reader, ), ;, Set, <, String, >, result, =]
[(, Reader, reader, ), throws, IOException, {, Preconditions, ., checkNotNull, (, reader, ), ;, Set, <, String, >, result, =]
[reader, ), ;, Set, <, String, >, result, =, Sets, ., newHashSet, (, ), ;, for, (, String, line, :]
[reader, ), ;, Set, <, String, >, result, =, Sets, ., newHashSet, (, ), ;, for, (, String, line, :]
[<, String, >, result, =, Sets, ., newHashSet, (, ), ;, for, (, String, line, :, CharStreams, ., readLines, (]
[=, Sets, ., newHashSet, (, ), ;, for, (, String, line, :, CharStreams, ., readLines, (, reader, ), ), {]
[=, Sets, ., newHashSet, (, ), ;, for, (, String, line, :, CharStreams, ., readLines, (, reader, ), ), {]
[(, ), ;, for, (, String, line, :, CharStreams, ., readLines, (, reader, ), ), {, result, ., add, (]
[String, line, :, CharStreams, ., readLines, (, reader, ), ), {, result, ., add, (, line, ), ;, }, return]
[add, (, line, ), ;, }, return, result, ;, }, public, static, String, formatWarning, (, JSError, error, ), {, return]
[line, ), ;, }, return, result, ;, }, public, static, String, formatWarning, (, JSError, error, ), {, return, formatWarning, (]
[;, }, return, result, ;, }, public, static, String, formatWarning, (, JSError, error, ), {, return, formatWarning, (, error, ,]
[,, false, ), ;, }, public, static, String, formatWarning, (, JSError, error, ,, boolean, withMetaData, ), {, StringBuilder, sb, =]
[public, static, String, formatWarning, (, JSError, error, ,, boolean, withMetaData, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;]
[public, static, String, formatWarning, (, JSError, error, ,, boolean, withMetaData, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;]
[public, static, String, formatWarning, (, JSError, error, ,, boolean, withMetaData, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;]
[(, JSError, error, ,, boolean, withMetaData, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (]
[(, JSError, error, ,, boolean, withMetaData, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (]
[{, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (, error, ., sourceName, ), ., append, (]
[StringBuilder, (, ), ;, sb, ., append, (, error, ., sourceName, ), ., append, (, ":", ), ;, if, (]
[;, sb, ., append, (, error, ., sourceName, ), ., append, (, ":", ), ;, if, (, withMetaData, ), {]
[;, sb, ., append, (, error, ., sourceName, ), ., append, (, ":", ), ;, if, (, withMetaData, ), {]
[(, error, ., sourceName, ), ., append, (, ":", ), ;, if, (, withMetaData, ), {, sb, ., append, (]
[(, error, ., sourceName, ), ., append, (, ":", ), ;, if, (, withMetaData, ), {, sb, ., append, (]
[(, withMetaData, ), {, sb, ., append, (, error, ., lineNumber, ), ;, }, List, <, String, >, lines, =]
[(, withMetaData, ), {, sb, ., append, (, error, ., lineNumber, ), ;, }, List, <, String, >, lines, =]
[sb, ., append, (, error, ., lineNumber, ), ;, }, List, <, String, >, lines, =, ImmutableList, ., copyOf, (]
[sb, ., append, (, error, ., lineNumber, ), ;, }, List, <, String, >, lines, =, ImmutableList, ., copyOf, (]
[error, ., lineNumber, ), ;, }, List, <, String, >, lines, =, ImmutableList, ., copyOf, (, LINE_SPLITTER, ., split, (]
[error, ., lineNumber, ), ;, }, List, <, String, >, lines, =, ImmutableList, ., copyOf, (, LINE_SPLITTER, ., split, (]
[List, <, String, >, lines, =, ImmutableList, ., copyOf, (, LINE_SPLITTER, ., split, (, error, ., description, ), ), ;]
[List, <, String, >, lines, =, ImmutableList, ., copyOf, (, LINE_SPLITTER, ., split, (, error, ., description, ), ), ;]
[List, <, String, >, lines, =, ImmutableList, ., copyOf, (, LINE_SPLITTER, ., split, (, error, ., description, ), ), ;]
[lines, =, ImmutableList, ., copyOf, (, LINE_SPLITTER, ., split, (, error, ., description, ), ), ;, sb, ., append, (]
[(, LINE_SPLITTER, ., split, (, error, ., description, ), ), ;, sb, ., append, (, "  ", ), ., append, (]
[(, LINE_SPLITTER, ., split, (, error, ., description, ), ), ;, sb, ., append, (, "  ", ), ., append, (]
[(, error, ., description, ), ), ;, sb, ., append, (, "  ", ), ., append, (, lines, ., get, (]
[;, sb, ., append, (, "  ", ), ., append, (, lines, ., get, (, 0, ), ), ;, if, (]
[append, (, lines, ., get, (, 0, ), ), ;, if, (, withMetaData, ), {, for, (, int, i, =]
[lines, ., get, (, 0, ), ), ;, if, (, withMetaData, ), {, for, (, int, i, =, 1, ;]
[lines, ., get, (, 0, ), ), ;, if, (, withMetaData, ), {, for, (, int, i, =, 1, ;]
[get, (, 0, ), ), ;, if, (, withMetaData, ), {, for, (, int, i, =, 1, ;, i, <]
[get, (, 0, ), ), ;, if, (, withMetaData, ), {, for, (, int, i, =, 1, ;, i, <]
[if, (, withMetaData, ), {, for, (, int, i, =, 1, ;, i, <, lines, ., size, (, ), ;]
[if, (, withMetaData, ), {, for, (, int, i, =, 1, ;, i, <, lines, ., size, (, ), ;]
[{, for, (, int, i, =, 1, ;, i, <, lines, ., size, (, ), ;, i, ++, ), {]
[{, for, (, int, i, =, 1, ;, i, <, lines, ., size, (, ), ;, i, ++, ), {]
[{, for, (, int, i, =, 1, ;, i, <, lines, ., size, (, ), ;, i, ++, ), {]
[i, =, 1, ;, i, <, lines, ., size, (, ), ;, i, ++, ), {, sb, ., append, (]
[<, lines, ., size, (, ), ;, i, ++, ), {, sb, ., append, (, "\n# ", ), ., append, (]
[<, lines, ., size, (, ), ;, i, ++, ), {, sb, ., append, (, "\n# ", ), ., append, (]
[(, ), ;, i, ++, ), {, sb, ., append, (, "\n# ", ), ., append, (, lines, ., get, (]
[), {, sb, ., append, (, "\n# ", ), ., append, (, lines, ., get, (, i, ), ), ;, }]
[), {, sb, ., append, (, "\n# ", ), ., append, (, lines, ., get, (, i, ), ), ;, }]
[append, (, "\n# ", ), ., append, (, lines, ., get, (, i, ), ), ;, }, sb, ., append, (]
[append, (, lines, ., get, (, i, ), ), ;, }, sb, ., append, (, "\n", ), ;, }, return]
[append, (, lines, ., get, (, i, ), ), ;, }, sb, ., append, (, "\n", ), ;, }, return]
[return, sb, ., toString, (, ), ;, }, public, static, String, getFirstLine, (, String, warning, ), {, int, lineLength, =]
[return, sb, ., toString, (, ), ;, }, public, static, String, getFirstLine, (, String, warning, ), {, int, lineLength, =]
[(, ), ;, }, public, static, String, getFirstLine, (, String, warning, ), {, int, lineLength, =, warning, ., indexOf, (]
[static, String, getFirstLine, (, String, warning, ), {, int, lineLength, =, warning, ., indexOf, (, '\n', ), ;, if, (]
[static, String, getFirstLine, (, String, warning, ), {, int, lineLength, =, warning, ., indexOf, (, '\n', ), ;, if, (]
[getFirstLine, (, String, warning, ), {, int, lineLength, =, warning, ., indexOf, (, '\n', ), ;, if, (, lineLength, >]
[warning, ), {, int, lineLength, =, warning, ., indexOf, (, '\n', ), ;, if, (, lineLength, >, 0, ), {]
[{, int, lineLength, =, warning, ., indexOf, (, '\n', ), ;, if, (, lineLength, >, 0, ), {, warning, =]
[{, int, lineLength, =, warning, ., indexOf, (, '\n', ), ;, if, (, lineLength, >, 0, ), {, warning, =]
[warning, ., indexOf, (, '\n', ), ;, if, (, lineLength, >, 0, ), {, warning, =, warning, ., substring, (]
[indexOf, (, '\n', ), ;, if, (, lineLength, >, 0, ), {, warning, =, warning, ., substring, (, 0, ,]
[if, (, lineLength, >, 0, ), {, warning, =, warning, ., substring, (, 0, ,, lineLength, ), ;, }, return]
[}, return, warning, ;, }, public, static, class, WhitelistBuilder, implements, ErrorHandler, {, private, final, Set, <, JSError, >, warnings, =]
[}, return, warning, ;, }, public, static, class, WhitelistBuilder, implements, ErrorHandler, {, private, final, Set, <, JSError, >, warnings, =]
[ErrorHandler, {, private, final, Set, <, JSError, >, warnings, =, Sets, ., newLinkedHashSet, (, ), ;, private, String, productName, =]
[JSError, >, warnings, =, Sets, ., newLinkedHashSet, (, ), ;, private, String, productName, =, null, ;, private, String, generatorTarget, =]
[newLinkedHashSet, (, ), ;, private, String, productName, =, null, ;, private, String, generatorTarget, =, null, ;, private, String, headerNote, =]
[private, String, generatorTarget, =, null, ;, private, String, headerNote, =, null, ;, public, WhitelistBuilder, setProductName, (, String, name, ), {]
[private, String, generatorTarget, =, null, ;, private, String, headerNote, =, null, ;, public, WhitelistBuilder, setProductName, (, String, name, ), {]
[null, ;, private, String, headerNote, =, null, ;, public, WhitelistBuilder, setProductName, (, String, name, ), {, this, ., productName, =]
[String, headerNote, =, null, ;, public, WhitelistBuilder, setProductName, (, String, name, ), {, this, ., productName, =, name, ;, return]
[), {, this, ., productName, =, name, ;, return, this, ;, }, public, WhitelistBuilder, setGeneratorTarget, (, String, name, ), {]
[), {, this, ., productName, =, name, ;, return, this, ;, }, public, WhitelistBuilder, setGeneratorTarget, (, String, name, ), {]
[productName, =, name, ;, return, this, ;, }, public, WhitelistBuilder, setGeneratorTarget, (, String, name, ), {, this, ., generatorTarget, =]
[;, return, this, ;, }, public, WhitelistBuilder, setGeneratorTarget, (, String, name, ), {, this, ., generatorTarget, =, name, ;, return]
[), {, this, ., generatorTarget, =, name, ;, return, this, ;, }, public, WhitelistBuilder, setNote, (, String, note, ), {]
[), {, this, ., generatorTarget, =, name, ;, return, this, ;, }, public, WhitelistBuilder, setNote, (, String, note, ), {]
[generatorTarget, =, name, ;, return, this, ;, }, public, WhitelistBuilder, setNote, (, String, note, ), {, this, ., headerNote, =]
[;, return, this, ;, }, public, WhitelistBuilder, setNote, (, String, note, ), {, this, ., headerNote, =, note, ;, return]
[., headerNote, =, note, ;, return, this, ;, }, @, Deprecated, public, WhitelistBuilder, setWithLineNumber, (, boolean, line, ), {, return]
[line, ), {, return, this, ;, }, @, Override, public, void, report, (, CheckLevel, level, ,, JSError, error, ), {]
[line, ), {, return, this, ;, }, @, Override, public, void, report, (, CheckLevel, level, ,, JSError, error, ), {]
[this, ;, }, @, Override, public, void, report, (, CheckLevel, level, ,, JSError, error, ), {, warnings, ., add, (]
[., add, (, error, ), ;, }, public, void, writeWhitelist, (, File, out, ), throws, IOException, {, PrintStream, stream, =]
[error, ), ;, }, public, void, writeWhitelist, (, File, out, ), throws, IOException, {, PrintStream, stream, =, new, PrintStream, (]
[}, public, void, writeWhitelist, (, File, out, ), throws, IOException, {, PrintStream, stream, =, new, PrintStream, (, out, ), ;]
[void, writeWhitelist, (, File, out, ), throws, IOException, {, PrintStream, stream, =, new, PrintStream, (, out, ), ;, appendWhitelist, (]
[File, out, ), throws, IOException, {, PrintStream, stream, =, new, PrintStream, (, out, ), ;, appendWhitelist, (, stream, ), ;]
[File, out, ), throws, IOException, {, PrintStream, stream, =, new, PrintStream, (, out, ), ;, appendWhitelist, (, stream, ), ;]
[appendWhitelist, (, stream, ), ;, stream, ., close, (, ), ;, }, public, void, appendWhitelist, (, PrintStream, out, ), {]
[appendWhitelist, (, stream, ), ;, stream, ., close, (, ), ;, }, public, void, appendWhitelist, (, PrintStream, out, ), {]
[;, stream, ., close, (, ), ;, }, public, void, appendWhitelist, (, PrintStream, out, ), {, out, ., append, (]
[), ;, }, public, void, appendWhitelist, (, PrintStream, out, ), {, out, ., append, (, "# This is a list of legacy warnings that have yet to be fixed.\n", ), ;, if, (]
[), ;, }, public, void, appendWhitelist, (, PrintStream, out, ), {, out, ., append, (, "# This is a list of legacy warnings that have yet to be fixed.\n", ), ;, if, (]
[}, public, void, appendWhitelist, (, PrintStream, out, ), {, out, ., append, (, "# This is a list of legacy warnings that have yet to be fixed.\n", ), ;, if, (, productName, !=]
[appendWhitelist, (, PrintStream, out, ), {, out, ., append, (, "# This is a list of legacy warnings that have yet to be fixed.\n", ), ;, if, (, productName, !=, null, ), {]
[appendWhitelist, (, PrintStream, out, ), {, out, ., append, (, "# This is a list of legacy warnings that have yet to be fixed.\n", ), ;, if, (, productName, !=, null, ), {]
[), {, out, ., append, (, "# This is a list of legacy warnings that have yet to be fixed.\n", ), ;, if, (, productName, !=, null, ), {, out, ., append, (]
[), {, out, ., append, (, "# This is a list of legacy warnings that have yet to be fixed.\n", ), ;, if, (, productName, !=, null, ), {, out, ., append, (]
[), {, out, ., append, (, "# This is a list of legacy warnings that have yet to be fixed.\n", ), ;, if, (, productName, !=, null, ), {, out, ., append, (]
[), {, out, ., append, (, "# This is a list of legacy warnings that have yet to be fixed.\n", ), ;, if, (, productName, !=, null, ), {, out, ., append, (]
[out, ., append, (, "# This is a list of legacy warnings that have yet to be fixed.\n", ), ;, if, (, productName, !=, null, ), {, out, ., append, (, "# Please find some time and fix at least one of them ", +]
[append, (, "# This is a list of legacy warnings that have yet to be fixed.\n", ), ;, if, (, productName, !=, null, ), {, out, ., append, (, "# Please find some time and fix at least one of them ", +, "and it will be the happiest day for ", +]
["# This is a list of legacy warnings that have yet to be fixed.\n", ), ;, if, (, productName, !=, null, ), {, out, ., append, (, "# Please find some time and fix at least one of them ", +, "and it will be the happiest day for ", +, productName, +]
[!=, null, ), {, out, ., append, (, "# Please find some time and fix at least one of them ", +, "and it will be the happiest day for ", +, productName, +, ".\n", ), ;, }, if, (]
[!=, null, ), {, out, ., append, (, "# Please find some time and fix at least one of them ", +, "and it will be the happiest day for ", +, productName, +, ".\n", ), ;, }, if, (]
[), {, out, ., append, (, "# Please find some time and fix at least one of them ", +, "and it will be the happiest day for ", +, productName, +, ".\n", ), ;, }, if, (, generatorTarget, !=]
[., append, (, "# Please find some time and fix at least one of them ", +, "and it will be the happiest day for ", +, productName, +, ".\n", ), ;, }, if, (, generatorTarget, !=, null, ), {]
[., append, (, "# Please find some time and fix at least one of them ", +, "and it will be the happiest day for ", +, productName, +, ".\n", ), ;, }, if, (, generatorTarget, !=, null, ), {]
[+, "and it will be the happiest day for ", +, productName, +, ".\n", ), ;, }, if, (, generatorTarget, !=, null, ), {, out, ., append, (]
[+, "and it will be the happiest day for ", +, productName, +, ".\n", ), ;, }, if, (, generatorTarget, !=, null, ), {, out, ., append, (]
[+, "and it will be the happiest day for ", +, productName, +, ".\n", ), ;, }, if, (, generatorTarget, !=, null, ), {, out, ., append, (]
[+, productName, +, ".\n", ), ;, }, if, (, generatorTarget, !=, null, ), {, out, ., append, (, "# When you fix any of these warnings, run ", +]
[+, ".\n", ), ;, }, if, (, generatorTarget, !=, null, ), {, out, ., append, (, "# When you fix any of these warnings, run ", +, generatorTarget, +]
[(, generatorTarget, !=, null, ), {, out, ., append, (, "# When you fix any of these warnings, run ", +, generatorTarget, +, " task.\n", ), ;, }, if, (]
[(, generatorTarget, !=, null, ), {, out, ., append, (, "# When you fix any of these warnings, run ", +, generatorTarget, +, " task.\n", ), ;, }, if, (]
[!=, null, ), {, out, ., append, (, "# When you fix any of these warnings, run ", +, generatorTarget, +, " task.\n", ), ;, }, if, (, headerNote, !=]
[{, out, ., append, (, "# When you fix any of these warnings, run ", +, generatorTarget, +, " task.\n", ), ;, }, if, (, headerNote, !=, null, ), {]
[{, out, ., append, (, "# When you fix any of these warnings, run ", +, generatorTarget, +, " task.\n", ), ;, }, if, (, headerNote, !=, null, ), {]
[(, "# When you fix any of these warnings, run ", +, generatorTarget, +, " task.\n", ), ;, }, if, (, headerNote, !=, null, ), {, out, ., append, (]
[(, "# When you fix any of these warnings, run ", +, generatorTarget, +, " task.\n", ), ;, }, if, (, headerNote, !=, null, ), {, out, ., append, (]
[(, "# When you fix any of these warnings, run ", +, generatorTarget, +, " task.\n", ), ;, }, if, (, headerNote, !=, null, ), {, out, ., append, (]
[+, generatorTarget, +, " task.\n", ), ;, }, if, (, headerNote, !=, null, ), {, out, ., append, (, "#", +]
[+, generatorTarget, +, " task.\n", ), ;, }, if, (, headerNote, !=, null, ), {, out, ., append, (, "#", +]
[+, generatorTarget, +, " task.\n", ), ;, }, if, (, headerNote, !=, null, ), {, out, ., append, (, "#", +]
[), ;, }, if, (, headerNote, !=, null, ), {, out, ., append, (, "#", +, Joiner, ., on, (]
[headerNote, !=, null, ), {, out, ., append, (, "#", +, Joiner, ., on, (, "\n# ", ), ., join, (]
[headerNote, !=, null, ), {, out, ., append, (, "#", +, Joiner, ., on, (, "\n# ", ), ., join, (]
[headerNote, !=, null, ), {, out, ., append, (, "#", +, Joiner, ., on, (, "\n# ", ), ., join, (]
[{, out, ., append, (, "#", +, Joiner, ., on, (, "\n# ", ), ., join, (, Splitter, ., on, (]
["#", +, Joiner, ., on, (, "\n# ", ), ., join, (, Splitter, ., on, (, "\n", ), ., split, (]
[on, (, "\n# ", ), ., join, (, Splitter, ., on, (, "\n", ), ., split, (, headerNote, ), ), +]
[), ., split, (, headerNote, ), ), +, "\n", ), ;, }, Multimap, <, DiagnosticType, ,, String, >, warningsByType, =]
[), ., split, (, headerNote, ), ), +, "\n", ), ;, }, Multimap, <, DiagnosticType, ,, String, >, warningsByType, =]
[}, Multimap, <, DiagnosticType, ,, String, >, warningsByType, =, TreeMultimap, ., create, (, ), ;, for, (, JSError, warning, :]
[DiagnosticType, ,, String, >, warningsByType, =, TreeMultimap, ., create, (, ), ;, for, (, JSError, warning, :, warnings, ), {]
[DiagnosticType, ,, String, >, warningsByType, =, TreeMultimap, ., create, (, ), ;, for, (, JSError, warning, :, warnings, ), {]
[warningsByType, =, TreeMultimap, ., create, (, ), ;, for, (, JSError, warning, :, warnings, ), {, warningsByType, ., put, (]
[warningsByType, =, TreeMultimap, ., create, (, ), ;, for, (, JSError, warning, :, warnings, ), {, warningsByType, ., put, (]
[), ;, for, (, JSError, warning, :, warnings, ), {, warningsByType, ., put, (, warning, ., getType, (, ), ,]
[for, (, JSError, warning, :, warnings, ), {, warningsByType, ., put, (, warning, ., getType, (, ), ,, formatWarning, (]
[JSError, warning, :, warnings, ), {, warningsByType, ., put, (, warning, ., getType, (, ), ,, formatWarning, (, warning, ,]
[warning, ., getType, (, ), ,, formatWarning, (, warning, ,, true, ), ), ;, }, for, (, DiagnosticType, type, :]
[warning, ., getType, (, ), ,, formatWarning, (, warning, ,, true, ), ), ;, }, for, (, DiagnosticType, type, :]
[(, warning, ,, true, ), ), ;, }, for, (, DiagnosticType, type, :, warningsByType, ., keySet, (, ), ), {]
[(, warning, ,, true, ), ), ;, }, for, (, DiagnosticType, type, :, warningsByType, ., keySet, (, ), ), {]
[(, warning, ,, true, ), ), ;, }, for, (, DiagnosticType, type, :, warningsByType, ., keySet, (, ), ), {]
[(, warning, ,, true, ), ), ;, }, for, (, DiagnosticType, type, :, warningsByType, ., keySet, (, ), ), {]
[(, warning, ,, true, ), ), ;, }, for, (, DiagnosticType, type, :, warningsByType, ., keySet, (, ), ), {]
[), ), ;, }, for, (, DiagnosticType, type, :, warningsByType, ., keySet, (, ), ), {, out, ., append, (]
[(, DiagnosticType, type, :, warningsByType, ., keySet, (, ), ), {, out, ., append, (, "\n# Warning ", ), ., append, (]
[(, DiagnosticType, type, :, warningsByType, ., keySet, (, ), ), {, out, ., append, (, "\n# Warning ", ), ., append, (]
[(, ), ), {, out, ., append, (, "\n# Warning ", ), ., append, (, type, ., key, ), ., append, (]
[., append, (, "\n# Warning ", ), ., append, (, type, ., key, ), ., append, (, ": ", ), ., println, (]
[., append, (, "\n# Warning ", ), ., append, (, type, ., key, ), ., append, (, ": ", ), ., println, (]
[), ., append, (, type, ., key, ), ., append, (, ": ", ), ., println, (, Iterables, ., get, (]
[), ., append, (, type, ., key, ), ., append, (, ": ", ), ., println, (, Iterables, ., get, (]
[type, ., key, ), ., append, (, ": ", ), ., println, (, Iterables, ., get, (, LINE_SPLITTER, ., split, (]
[type, ., key, ), ., append, (, ": ", ), ., println, (, Iterables, ., get, (, LINE_SPLITTER, ., split, (]
[type, ., key, ), ., append, (, ": ", ), ., println, (, Iterables, ., get, (, LINE_SPLITTER, ., split, (]
[., println, (, Iterables, ., get, (, LINE_SPLITTER, ., split, (, type, ., format, ., toPattern, (, ), ), ,]
[split, (, type, ., format, ., toPattern, (, ), ), ,, 0, ), ), ;, for, (, String, warning, :]
[split, (, type, ., format, ., toPattern, (, ), ), ,, 0, ), ), ;, for, (, String, warning, :]
[format, ., toPattern, (, ), ), ,, 0, ), ), ;, for, (, String, warning, :, warningsByType, ., get, (]
[), ), ,, 0, ), ), ;, for, (, String, warning, :, warningsByType, ., get, (, type, ), ), {]
[), ), ,, 0, ), ), ;, for, (, String, warning, :, warningsByType, ., get, (, type, ), ), {]
[), ), ;, for, (, String, warning, :, warningsByType, ., get, (, type, ), ), {, out, ., println, (]
[String, warning, :, warningsByType, ., get, (, type, ), ), {, out, ., println, (, warning, ), ;, }, }]
[String, warning, :, warningsByType, ., get, (, type, ), ), {, out, ., println, (, warning, ), ;, }, }]
