[., *, ;, public, class, HashCodeAndEqualsSafeSet, implements, Set, <, Object, >, {, private, final, HashSet, <, HashCodeAndEqualsMockWrapper, >, backingHashSet, =]
[backingHashSet, =, new, HashSet, <, HashCodeAndEqualsMockWrapper, >, (, ), ;, public, Iterator, <, Object, >, iterator, (, ), {, return]
[(, ), {, return, new, Iterator, <, Object, >, (, ), {, private, final, Iterator, <, HashCodeAndEqualsMockWrapper, >, iterator, =]
[(, ), {, return, new, Iterator, <, Object, >, (, ), {, private, final, Iterator, <, HashCodeAndEqualsMockWrapper, >, iterator, =]
[final, Iterator, <, HashCodeAndEqualsMockWrapper, >, iterator, =, backingHashSet, ., iterator, (, ), ;, public, boolean, hasNext, (, ), {, return]
[final, Iterator, <, HashCodeAndEqualsMockWrapper, >, iterator, =, backingHashSet, ., iterator, (, ), ;, public, boolean, hasNext, (, ), {, return]
[boolean, hasNext, (, ), {, return, iterator, ., hasNext, (, ), ;, }, public, Object, next, (, ), {, return]
[boolean, hasNext, (, ), {, return, iterator, ., hasNext, (, ), ;, }, public, Object, next, (, ), {, return]
[boolean, hasNext, (, ), {, return, iterator, ., hasNext, (, ), ;, }, public, Object, next, (, ), {, return]
[), {, return, iterator, ., next, (, ), ., get, (, ), ;, }, public, void, remove, (, ), {]
[), {, return, iterator, ., next, (, ), ., get, (, ), ;, }, public, void, remove, (, ), {]
[(, ), {, iterator, ., remove, (, ), ;, }, }, ;, }, public, int, size, (, ), {, return]
[(, ), {, iterator, ., remove, (, ), ;, }, }, ;, }, public, int, size, (, ), {, return]
[int, size, (, ), {, return, backingHashSet, ., size, (, ), ;, }, public, boolean, isEmpty, (, ), {, return]
[int, size, (, ), {, return, backingHashSet, ., size, (, ), ;, }, public, boolean, isEmpty, (, ), {, return]
[(, ), {, return, backingHashSet, ., isEmpty, (, ), ;, }, public, boolean, contains, (, Object, mock, ), {, return]
[(, ), {, return, backingHashSet, ., isEmpty, (, ), ;, }, public, boolean, contains, (, Object, mock, ), {, return]
[backingHashSet, ., isEmpty, (, ), ;, }, public, boolean, contains, (, Object, mock, ), {, return, backingHashSet, ., contains, (]
[backingHashSet, ., isEmpty, (, ), ;, }, public, boolean, contains, (, Object, mock, ), {, return, backingHashSet, ., contains, (]
[), ;, }, public, boolean, contains, (, Object, mock, ), {, return, backingHashSet, ., contains, (, HashCodeAndEqualsMockWrapper, ., of, (]
[contains, (, HashCodeAndEqualsMockWrapper, ., of, (, mock, ), ), ;, }, public, boolean, add, (, Object, mock, ), {, return]
[contains, (, HashCodeAndEqualsMockWrapper, ., of, (, mock, ), ), ;, }, public, boolean, add, (, Object, mock, ), {, return]
[of, (, mock, ), ), ;, }, public, boolean, add, (, Object, mock, ), {, return, backingHashSet, ., add, (]
[of, (, mock, ), ), ;, }, public, boolean, add, (, Object, mock, ), {, return, backingHashSet, ., add, (]
[), ;, }, public, boolean, add, (, Object, mock, ), {, return, backingHashSet, ., add, (, HashCodeAndEqualsMockWrapper, ., of, (]
[add, (, HashCodeAndEqualsMockWrapper, ., of, (, mock, ), ), ;, }, public, boolean, remove, (, Object, mock, ), {, return]
[add, (, HashCodeAndEqualsMockWrapper, ., of, (, mock, ), ), ;, }, public, boolean, remove, (, Object, mock, ), {, return]
[of, (, mock, ), ), ;, }, public, boolean, remove, (, Object, mock, ), {, return, backingHashSet, ., remove, (]
[of, (, mock, ), ), ;, }, public, boolean, remove, (, Object, mock, ), {, return, backingHashSet, ., remove, (]
[), ;, }, public, boolean, remove, (, Object, mock, ), {, return, backingHashSet, ., remove, (, HashCodeAndEqualsMockWrapper, ., of, (]
[return, backingHashSet, ., remove, (, HashCodeAndEqualsMockWrapper, ., of, (, mock, ), ), ;, }, public, void, clear, (, ), {]
[return, backingHashSet, ., remove, (, HashCodeAndEqualsMockWrapper, ., of, (, mock, ), ), ;, }, public, void, clear, (, ), {]
[), {, backingHashSet, ., clear, (, ), ;, }, @, Override, public, Object, clone, (, ), throws, CloneNotSupportedException, {, throw]
[{, throw, new, CloneNotSupportedException, (, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (]
[throw, new, CloneNotSupportedException, (, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !]
[new, CloneNotSupportedException, (, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (]
[new, CloneNotSupportedException, (, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (]
[Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (, o, instanceof, HashCodeAndEqualsSafeSet, ), ), {, return]
[o, ), {, if, (, !, (, o, instanceof, HashCodeAndEqualsSafeSet, ), ), {, return, false, ;, }, HashCodeAndEqualsSafeSet, that, =]
[if, (, !, (, o, instanceof, HashCodeAndEqualsSafeSet, ), ), {, return, false, ;, }, HashCodeAndEqualsSafeSet, that, =, (, HashCodeAndEqualsSafeSet, )]
[(, o, instanceof, HashCodeAndEqualsSafeSet, ), ), {, return, false, ;, }, HashCodeAndEqualsSafeSet, that, =, (, HashCodeAndEqualsSafeSet, ), o, ;, return]
[(, o, instanceof, HashCodeAndEqualsSafeSet, ), ), {, return, false, ;, }, HashCodeAndEqualsSafeSet, that, =, (, HashCodeAndEqualsSafeSet, ), o, ;, return]
[), ), {, return, false, ;, }, HashCodeAndEqualsSafeSet, that, =, (, HashCodeAndEqualsSafeSet, ), o, ;, return, backingHashSet, ., equals, (]
[), ), {, return, false, ;, }, HashCodeAndEqualsSafeSet, that, =, (, HashCodeAndEqualsSafeSet, ), o, ;, return, backingHashSet, ., equals, (]
[return, backingHashSet, ., equals, (, that, ., backingHashSet, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[return, backingHashSet, ., equals, (, that, ., backingHashSet, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, ), {, return, backingHashSet, ., hashCode, (, ), ;, }, public, Object, [, ], toArray, (, ), {, return]
[{, return, backingHashSet, ., hashCode, (, ), ;, }, public, Object, [, ], toArray, (, ), {, return, unwrapTo, (]
[., hashCode, (, ), ;, }, public, Object, [, ], toArray, (, ), {, return, unwrapTo, (, new, Object, []
[<, T, >, T, [, ], unwrapTo, (, T, [, ], array, ), {, Iterator, <, Object, >, iterator, =]
[[, ], array, ), {, Iterator, <, Object, >, iterator, =, iterator, (, ), ;, for, (, int, i, =]
[{, Iterator, <, Object, >, iterator, =, iterator, (, ), ;, for, (, int, i, =, 0, ,, objectsLength, =]
[{, Iterator, <, Object, >, iterator, =, iterator, (, ), ;, for, (, int, i, =, 0, ,, objectsLength, =]
[>, iterator, =, iterator, (, ), ;, for, (, int, i, =, 0, ,, objectsLength, =, array, ., length, ;]
[>, iterator, =, iterator, (, ), ;, for, (, int, i, =, 0, ,, objectsLength, =, array, ., length, ;]
[=, iterator, (, ), ;, for, (, int, i, =, 0, ,, objectsLength, =, array, ., length, ;, i, <]
[(, ), ;, for, (, int, i, =, 0, ,, objectsLength, =, array, ., length, ;, i, <, objectsLength, ;]
[(, ), ;, for, (, int, i, =, 0, ,, objectsLength, =, array, ., length, ;, i, <, objectsLength, ;]
[i, =, 0, ,, objectsLength, =, array, ., length, ;, i, <, objectsLength, ;, i, ++, ), {, if, (]
[i, =, 0, ,, objectsLength, =, array, ., length, ;, i, <, objectsLength, ;, i, ++, ), {, if, (]
[., length, ;, i, <, objectsLength, ;, i, ++, ), {, if, (, iterator, ., hasNext, (, ), ), {]
[., length, ;, i, <, objectsLength, ;, i, ++, ), {, if, (, iterator, ., hasNext, (, ), ), {]
[;, i, <, objectsLength, ;, i, ++, ), {, if, (, iterator, ., hasNext, (, ), ), {, array, []
[objectsLength, ;, i, ++, ), {, if, (, iterator, ., hasNext, (, ), ), {, array, [, i, ], =]
[++, ), {, if, (, iterator, ., hasNext, (, ), ), {, array, [, i, ], =, (, T, )]
[++, ), {, if, (, iterator, ., hasNext, (, ), ), {, array, [, i, ], =, (, T, )]
[), ), {, array, [, i, ], =, (, T, ), iterator, ., next, (, ), ;, }, }, return]
[public, <, T, >, T, [, ], toArray, (, T, [, ], typedArray, ), {, T, [, ], array, =]
[public, <, T, >, T, [, ], toArray, (, T, [, ], typedArray, ), {, T, [, ], array, =]
[public, <, T, >, T, [, ], toArray, (, T, [, ], typedArray, ), {, T, [, ], array, =]
[public, <, T, >, T, [, ], toArray, (, T, [, ], typedArray, ), {, T, [, ], array, =]
[T, [, ], toArray, (, T, [, ], typedArray, ), {, T, [, ], array, =, typedArray, ., length, >=]
[(, T, [, ], typedArray, ), {, T, [, ], array, =, typedArray, ., length, >=, size, (, ), ?]
[[, ], typedArray, ), {, T, [, ], array, =, typedArray, ., length, >=, size, (, ), ?, typedArray, :]
[T, [, ], array, =, typedArray, ., length, >=, size, (, ), ?, typedArray, :, (, T, [, ], )]
[], array, =, typedArray, ., length, >=, size, (, ), ?, typedArray, :, (, T, [, ], ), newInstance, (]
[], array, =, typedArray, ., length, >=, size, (, ), ?, typedArray, :, (, T, [, ], ), newInstance, (]
[], array, =, typedArray, ., length, >=, size, (, ), ?, typedArray, :, (, T, [, ], ), newInstance, (]
[?, typedArray, :, (, T, [, ], ), newInstance, (, typedArray, ., getClass, (, ), ., getComponentType, (, ), ,]
[], ), newInstance, (, typedArray, ., getClass, (, ), ., getComponentType, (, ), ,, size, (, ), ), ;, return]
[newInstance, (, typedArray, ., getClass, (, ), ., getComponentType, (, ), ,, size, (, ), ), ;, return, unwrapTo, (]
[;, return, unwrapTo, (, array, ), ;, }, public, boolean, removeAll, (, Collection, <, ?, >, mocks, ), {, return]
[;, return, unwrapTo, (, array, ), ;, }, public, boolean, removeAll, (, Collection, <, ?, >, mocks, ), {, return]
[array, ), ;, }, public, boolean, removeAll, (, Collection, <, ?, >, mocks, ), {, return, backingHashSet, ., removeAll, (]
[;, }, public, boolean, removeAll, (, Collection, <, ?, >, mocks, ), {, return, backingHashSet, ., removeAll, (, asWrappedMocks, (]
[(, asWrappedMocks, (, mocks, ), ), ;, }, public, boolean, containsAll, (, Collection, <, ?, >, mocks, ), {, return]
[(, asWrappedMocks, (, mocks, ), ), ;, }, public, boolean, containsAll, (, Collection, <, ?, >, mocks, ), {, return]
[), ), ;, }, public, boolean, containsAll, (, Collection, <, ?, >, mocks, ), {, return, backingHashSet, ., containsAll, (]
[;, }, public, boolean, containsAll, (, Collection, <, ?, >, mocks, ), {, return, backingHashSet, ., containsAll, (, asWrappedMocks, (]
[(, asWrappedMocks, (, mocks, ), ), ;, }, public, boolean, addAll, (, Collection, <, ?, >, mocks, ), {, return]
[(, asWrappedMocks, (, mocks, ), ), ;, }, public, boolean, addAll, (, Collection, <, ?, >, mocks, ), {, return]
[), ), ;, }, public, boolean, addAll, (, Collection, <, ?, >, mocks, ), {, return, backingHashSet, ., addAll, (]
[;, }, public, boolean, addAll, (, Collection, <, ?, >, mocks, ), {, return, backingHashSet, ., addAll, (, asWrappedMocks, (]
[(, asWrappedMocks, (, mocks, ), ), ;, }, public, boolean, retainAll, (, Collection, <, ?, >, mocks, ), {, return]
[(, asWrappedMocks, (, mocks, ), ), ;, }, public, boolean, retainAll, (, Collection, <, ?, >, mocks, ), {, return]
[), ), ;, }, public, boolean, retainAll, (, Collection, <, ?, >, mocks, ), {, return, backingHashSet, ., retainAll, (]
[;, }, public, boolean, retainAll, (, Collection, <, ?, >, mocks, ), {, return, backingHashSet, ., retainAll, (, asWrappedMocks, (]
[(, mocks, ), ), ;, }, private, HashSet, <, HashCodeAndEqualsMockWrapper, >, asWrappedMocks, (, Collection, <, ?, >, mocks, ), {]
[(, mocks, ), ), ;, }, private, HashSet, <, HashCodeAndEqualsMockWrapper, >, asWrappedMocks, (, Collection, <, ?, >, mocks, ), {]
[;, }, private, HashSet, <, HashCodeAndEqualsMockWrapper, >, asWrappedMocks, (, Collection, <, ?, >, mocks, ), {, Checks, ., checkNotNull, (]
[private, HashSet, <, HashCodeAndEqualsMockWrapper, >, asWrappedMocks, (, Collection, <, ?, >, mocks, ), {, Checks, ., checkNotNull, (, mocks, ,]
[?, >, mocks, ), {, Checks, ., checkNotNull, (, mocks, ,, "Passed collection should notify() be null", ), ;, HashSet, <, HashCodeAndEqualsMockWrapper, >, hashSet, =]
[;, HashSet, <, HashCodeAndEqualsMockWrapper, >, hashSet, =, new, HashSet, <, HashCodeAndEqualsMockWrapper, >, (, ), ;, for, (, Object, mock, :]
[>, hashSet, =, new, HashSet, <, HashCodeAndEqualsMockWrapper, >, (, ), ;, for, (, Object, mock, :, mocks, ), {, assert]
[hashSet, =, new, HashSet, <, HashCodeAndEqualsMockWrapper, >, (, ), ;, for, (, Object, mock, :, mocks, ), {, assert, !]
[=, new, HashSet, <, HashCodeAndEqualsMockWrapper, >, (, ), ;, for, (, Object, mock, :, mocks, ), {, assert, !, (]
[=, new, HashSet, <, HashCodeAndEqualsMockWrapper, >, (, ), ;, for, (, Object, mock, :, mocks, ), {, assert, !, (]
[>, (, ), ;, for, (, Object, mock, :, mocks, ), {, assert, !, (, mock, instanceof, HashCodeAndEqualsMockWrapper, ), :]
[), ;, for, (, Object, mock, :, mocks, ), {, assert, !, (, mock, instanceof, HashCodeAndEqualsMockWrapper, ), :, "WRONG", ;]
[), ;, for, (, Object, mock, :, mocks, ), {, assert, !, (, mock, instanceof, HashCodeAndEqualsMockWrapper, ), :, "WRONG", ;]
[Object, mock, :, mocks, ), {, assert, !, (, mock, instanceof, HashCodeAndEqualsMockWrapper, ), :, "WRONG", ;, hashSet, ., add, (]
[Object, mock, :, mocks, ), {, assert, !, (, mock, instanceof, HashCodeAndEqualsMockWrapper, ), :, "WRONG", ;, hashSet, ., add, (]
[), {, assert, !, (, mock, instanceof, HashCodeAndEqualsMockWrapper, ), :, "WRONG", ;, hashSet, ., add, (, HashCodeAndEqualsMockWrapper, ., of, (]
[instanceof, HashCodeAndEqualsMockWrapper, ), :, "WRONG", ;, hashSet, ., add, (, HashCodeAndEqualsMockWrapper, ., of, (, mock, ), ), ;, }, return]
[of, (, mock, ), ), ;, }, return, hashSet, ;, }, @, Override, public, String, toString, (, ), {, return]
[of, (, mock, ), ), ;, }, return, hashSet, ;, }, @, Override, public, String, toString, (, ), {, return]
[{, return, backingHashSet, ., toString, (, ), ;, }, public, static, HashCodeAndEqualsSafeSet, of, (, Object, ..., mocks, ), {, return]
[backingHashSet, ., toString, (, ), ;, }, public, static, HashCodeAndEqualsSafeSet, of, (, Object, ..., mocks, ), {, return, of, (]
[backingHashSet, ., toString, (, ), ;, }, public, static, HashCodeAndEqualsSafeSet, of, (, Object, ..., mocks, ), {, return, of, (]
[), ;, }, public, static, HashCodeAndEqualsSafeSet, of, (, Object, ..., mocks, ), {, return, of, (, Arrays, ., asList, (]
[mocks, ), ), ;, }, public, static, HashCodeAndEqualsSafeSet, of, (, Iterable, <, Object, >, objects, ), {, HashCodeAndEqualsSafeSet, hashCodeAndEqualsSafeSet, =]
[HashCodeAndEqualsSafeSet, of, (, Iterable, <, Object, >, objects, ), {, HashCodeAndEqualsSafeSet, hashCodeAndEqualsSafeSet, =, new, HashCodeAndEqualsSafeSet, (, ), ;, if, (]
[HashCodeAndEqualsSafeSet, of, (, Iterable, <, Object, >, objects, ), {, HashCodeAndEqualsSafeSet, hashCodeAndEqualsSafeSet, =, new, HashCodeAndEqualsSafeSet, (, ), ;, if, (]
[(, Iterable, <, Object, >, objects, ), {, HashCodeAndEqualsSafeSet, hashCodeAndEqualsSafeSet, =, new, HashCodeAndEqualsSafeSet, (, ), ;, if, (, objects, !=]
[HashCodeAndEqualsSafeSet, hashCodeAndEqualsSafeSet, =, new, HashCodeAndEqualsSafeSet, (, ), ;, if, (, objects, !=, null, ), {, for, (, Object, mock, :]
[new, HashCodeAndEqualsSafeSet, (, ), ;, if, (, objects, !=, null, ), {, for, (, Object, mock, :, objects, ), {]
[new, HashCodeAndEqualsSafeSet, (, ), ;, if, (, objects, !=, null, ), {, for, (, Object, mock, :, objects, ), {]
[;, if, (, objects, !=, null, ), {, for, (, Object, mock, :, objects, ), {, hashCodeAndEqualsSafeSet, ., add, (]
[), {, for, (, Object, mock, :, objects, ), {, hashCodeAndEqualsSafeSet, ., add, (, mock, ), ;, }, }, return]
