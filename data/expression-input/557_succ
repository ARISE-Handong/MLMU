[;, public, PolynomialFunctionNewtonForm, interpolate, (, double, x, [, ], ,, double, y, [, ], ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, ,]
[;, final, double, [, ], c, =, new, double, [, x, ., length, -, 1, ], ;, System, ., arraycopy]
[., verifyInterpolationArray, (, x, ,, y, ,, true, ), ;, final, double, [, ], c, =, new, double, [, x]
[,, y, ,, true, ), ;, final, double, [, ], c, =, new, double, [, x, ., length, -, 1]
[,, true, ), ;, final, double, [, ], c, =, new, double, [, x, ., length, -, 1, ], ;]
[), ;, final, double, [, ], c, =, new, double, [, x, ., length, -, 1, ], ;, System, .]
[;, System, ., arraycopy, (, x, ,, 0, ,, c, ,, 0, ,, c, ., length, ), ;, final, double]
[], ;, System, ., arraycopy, (, x, ,, 0, ,, c, ,, 0, ,, c, ., length, ), ;, final]
[-, 1, ], ;, System, ., arraycopy, (, x, ,, 0, ,, c, ,, 0, ,, c, ., length, )]
[., length, -, 1, ], ;, System, ., arraycopy, (, x, ,, 0, ,, c, ,, 0, ,, c, .]
[], ;, System, ., arraycopy, (, x, ,, 0, ,, c, ,, 0, ,, c, ., length, ), ;, final]
[;, final, double, [, ], a, =, computeDividedDifference, (, x, ,, y, ), ;, return, new, PolynomialFunctionNewtonForm, (, a, ,]
[., arraycopy, (, x, ,, 0, ,, c, ,, 0, ,, c, ., length, ), ;, final, double, [, ]]
[,, 0, ,, c, ,, 0, ,, c, ., length, ), ;, final, double, [, ], a, =, computeDividedDifference, (]
[,, c, ,, 0, ,, c, ., length, ), ;, final, double, [, ], a, =, computeDividedDifference, (, x, ,]
[,, 0, ,, c, ., length, ), ;, final, double, [, ], a, =, computeDividedDifference, (, x, ,, y, )]
[,, c, ., length, ), ;, final, double, [, ], a, =, computeDividedDifference, (, x, ,, y, ), ;, return]
[), ;, final, double, [, ], a, =, computeDividedDifference, (, x, ,, y, ), ;, return, new, PolynomialFunctionNewtonForm, (, a]
[., length, ), ;, final, double, [, ], a, =, computeDividedDifference, (, x, ,, y, ), ;, return, new, PolynomialFunctionNewtonForm]
[;, return, new, PolynomialFunctionNewtonForm, (, a, ,, c, ), ;, }, protected, static, double, [, ], computeDividedDifference, (, final, double]
[,, y, ), ;, return, new, PolynomialFunctionNewtonForm, (, a, ,, c, ), ;, }, protected, static, double, [, ], computeDividedDifference]
[), ;, return, new, PolynomialFunctionNewtonForm, (, a, ,, c, ), ;, }, protected, static, double, [, ], computeDividedDifference, (, final]
[;, }, protected, static, double, [, ], computeDividedDifference, (, final, double, x, [, ], ,, final, double, y, [, ]]
[,, c, ), ;, }, protected, static, double, [, ], computeDividedDifference, (, final, double, x, [, ], ,, final, double]
[), ;, }, protected, static, double, [, ], computeDividedDifference, (, final, double, x, [, ], ,, final, double, y, []
[;, final, double, [, ], divdiff, =, y, ., clone, (, ), ;, final, int, n, =, x, ., length]
[., verifyInterpolationArray, (, x, ,, y, ,, true, ), ;, final, double, [, ], divdiff, =, y, ., clone, (]
[,, y, ,, true, ), ;, final, double, [, ], divdiff, =, y, ., clone, (, ), ;, final, int]
[,, true, ), ;, final, double, [, ], divdiff, =, y, ., clone, (, ), ;, final, int, n, =]
[), ;, final, double, [, ], divdiff, =, y, ., clone, (, ), ;, final, int, n, =, x, .]
[;, final, int, n, =, x, ., length, ;, final, double, [, ], a, =, new, double, [, n, ]]
[., clone, (, ), ;, final, int, n, =, x, ., length, ;, final, double, [, ], a, =, new]
[;, final, double, [, ], a, =, new, double, [, n, ], ;, a, [, 0, ], =, divdiff, []
[., length, ;, final, double, [, ], a, =, new, double, [, n, ], ;, a, [, 0, ], =]
[;, a, [, 0, ], =, divdiff, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <]
[], ;, a, [, 0, ], =, divdiff, [, 0, ], ;, for, (, int, i, =, 1, ;, i]
[=, divdiff, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <, n, ;, i, ++, )]
[[, 0, ], =, divdiff, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <, n, ;]
[], =, divdiff, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <, n, ;, i, ++]
[;, for, (, int, i, =, 1, ;, i, <, n, ;, i, ++, ), {, for, (, int, j]
[[, 0, ], ;, for, (, int, i, =, 1, ;, i, <, n, ;, i, ++, ), {, for]
[], ;, for, (, int, i, =, 1, ;, i, <, n, ;, i, ++, ), {, for, (, int]
[;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, -]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, -, i, ;, j, ++]
[<, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, -, i, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, -, i, ;, j, ++]
[), {, for, (, int, j, =, 0, ;, j, <, n, -, i, ;, j, ++, ), {, final]
[++, ), {, for, (, int, j, =, 0, ;, j, <, n, -, i, ;, j, ++, ), {]
[;, j, <, n, -, i, ;, j, ++, ), {, final, double, denominator, =, x, [, j, +, i]
[;, j, ++, ), {, final, double, denominator, =, x, [, j, +, i, ], -, x, [, j, ]]
[<, n, -, i, ;, j, ++, ), {, final, double, denominator, =, x, [, j, +, i, ], -]
[;, j, ++, ), {, final, double, denominator, =, x, [, j, +, i, ], -, x, [, j, ]]
[-, i, ;, j, ++, ), {, final, double, denominator, =, x, [, j, +, i, ], -, x, []
[;, j, ++, ), {, final, double, denominator, =, x, [, j, +, i, ], -, x, [, j, ]]
[), {, final, double, denominator, =, x, [, j, +, i, ], -, x, [, j, ], ;, divdiff, []
[++, ), {, final, double, denominator, =, x, [, j, +, i, ], -, x, [, j, ], ;, divdiff]
[;, divdiff, [, j, ], =, (, divdiff, [, j, +, 1, ], -, divdiff, [, j, ], ), /]
[-, x, [, j, ], ;, divdiff, [, j, ], =, (, divdiff, [, j, +, 1, ], -, divdiff]
[[, j, +, i, ], -, x, [, j, ], ;, divdiff, [, j, ], =, (, divdiff, [, j]
[], -, x, [, j, ], ;, divdiff, [, j, ], =, (, divdiff, [, j, +, 1, ], -]
[+, i, ], -, x, [, j, ], ;, divdiff, [, j, ], =, (, divdiff, [, j, +, 1]
[], -, x, [, j, ], ;, divdiff, [, j, ], =, (, divdiff, [, j, +, 1, ], -]
[;, divdiff, [, j, ], =, (, divdiff, [, j, +, 1, ], -, divdiff, [, j, ], ), /]
[[, j, ], ;, divdiff, [, j, ], =, (, divdiff, [, j, +, 1, ], -, divdiff, [, j]
[], ;, divdiff, [, j, ], =, (, divdiff, [, j, +, 1, ], -, divdiff, [, j, ], )]
[=, (, divdiff, [, j, +, 1, ], -, divdiff, [, j, ], ), /, denominator, ;, }, a, []
[[, j, ], =, (, divdiff, [, j, +, 1, ], -, divdiff, [, j, ], ), /, denominator, ;]
[], =, (, divdiff, [, j, +, 1, ], -, divdiff, [, j, ], ), /, denominator, ;, }, a]
[;, }, a, [, i, ], =, divdiff, [, 0, ], ;, }, return, a, ;, }, }]
[/, denominator, ;, }, a, [, i, ], =, divdiff, [, 0, ], ;, }, return, a, ;, }, }]
[), /, denominator, ;, }, a, [, i, ], =, divdiff, [, 0, ], ;, }, return, a, ;, }]
[-, divdiff, [, j, ], ), /, denominator, ;, }, a, [, i, ], =, divdiff, [, 0, ], ;]
[[, j, +, 1, ], -, divdiff, [, j, ], ), /, denominator, ;, }, a, [, i, ], =]
[], -, divdiff, [, j, ], ), /, denominator, ;, }, a, [, i, ], =, divdiff, [, 0, ]]
[+, 1, ], -, divdiff, [, j, ], ), /, denominator, ;, }, a, [, i, ], =, divdiff, []
[], -, divdiff, [, j, ], ), /, denominator, ;, }, a, [, i, ], =, divdiff, [, 0, ]]
[), /, denominator, ;, }, a, [, i, ], =, divdiff, [, 0, ], ;, }, return, a, ;, }]
[[, j, ], ), /, denominator, ;, }, a, [, i, ], =, divdiff, [, 0, ], ;, }, return]
[], ), /, denominator, ;, }, a, [, i, ], =, divdiff, [, 0, ], ;, }, return, a, ;]
[;, }, a, [, i, ], =, divdiff, [, 0, ], ;, }, return, a, ;, }, }]
[=, divdiff, [, 0, ], ;, }, return, a, ;, }, }]
[[, i, ], =, divdiff, [, 0, ], ;, }, return, a, ;, }, }]
[], =, divdiff, [, 0, ], ;, }, return, a, ;, }, }]
[;, }, return, a, ;, }, }]
[[, 0, ], ;, }, return, a, ;, }, }]
[], ;, }, return, a, ;, }, }]
[;, }, }]
