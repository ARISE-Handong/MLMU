[;, private, int, n, ;, public, KolmogorovSmirnovDistribution, (, int, n, ), throws, NotStrictlyPositiveException, {, if, (, n, <=, 0, )]
[;, private, int, n, ;, public, KolmogorovSmirnovDistribution, (, int, n, ), throws, NotStrictlyPositiveException, {, if, (, n, <=, 0, )]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_NUMBER_OF_SAMPLES, ,, n, ), ;, }, this, ., n, =, n, ;]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_NUMBER_OF_SAMPLES, ,, n, ), ;, }, this, ., n, =]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_NUMBER_OF_SAMPLES, ,, n, ), ;, }, this, ., n, =, n, ;]
[;, }, this, ., n, =, n, ;, }, public, double, cdf, (, double, d, ), throws, MathArithmeticException, {, return]
[,, n, ), ;, }, this, ., n, =, n, ;, }, public, double, cdf, (, double, d, ), throws]
[., NOT_POSITIVE_NUMBER_OF_SAMPLES, ,, n, ), ;, }, this, ., n, =, n, ;, }, public, double, cdf, (, double, d]
[), ;, }, this, ., n, =, n, ;, }, public, double, cdf, (, double, d, ), throws, MathArithmeticException, {]
[=, n, ;, }, public, double, cdf, (, double, d, ), throws, MathArithmeticException, {, return, this, ., cdf, (, d]
[., n, =, n, ;, }, public, double, cdf, (, double, d, ), throws, MathArithmeticException, {, return, this, ., cdf]
[;, }, public, double, cdf, (, double, d, ), throws, MathArithmeticException, {, return, this, ., cdf, (, d, ,, false]
[;, }, public, double, cdfExact, (, double, d, ), throws, MathArithmeticException, {, return, this, ., cdf, (, d, ,, true]
[., cdf, (, d, ,, false, ), ;, }, public, double, cdfExact, (, double, d, ), throws, MathArithmeticException, {, return]
[,, false, ), ;, }, public, double, cdfExact, (, double, d, ), throws, MathArithmeticException, {, return, this, ., cdf, (]
[), ;, }, public, double, cdfExact, (, double, d, ), throws, MathArithmeticException, {, return, this, ., cdf, (, d, ,]
[;, }, public, double, cdf, (, double, d, ,, boolean, exact, ), throws, MathArithmeticException, {, final, double, ninv, =, 1]
[., cdf, (, d, ,, true, ), ;, }, public, double, cdf, (, double, d, ,, boolean, exact, ), throws]
[,, true, ), ;, }, public, double, cdf, (, double, d, ,, boolean, exact, ), throws, MathArithmeticException, {, final, double]
[), ;, }, public, double, cdf, (, double, d, ,, boolean, exact, ), throws, MathArithmeticException, {, final, double, ninv, =]
[;, final, double, ninvhalf, =, 0.5, *, ninv, ;, if, (, d, <=, ninvhalf, ), {, return, 0, ;, }]
[/, (, (, double, ), n, ), ;, final, double, ninvhalf, =, 0.5, *, ninv, ;, if, (, d, <=]
[;, final, double, ninvhalf, =, 0.5, *, ninv, ;, if, (, d, <=, ninvhalf, ), {, return, 0, ;, }]
[), ;, final, double, ninvhalf, =, 0.5, *, ninv, ;, if, (, d, <=, ninvhalf, ), {, return, 0, ;]
[), ;, final, double, ninvhalf, =, 0.5, *, ninv, ;, if, (, d, <=, ninvhalf, ), {, return, 0, ;]
[;, if, (, d, <=, ninvhalf, ), {, return, 0, ;, }, else, if, (, ninvhalf, <, d, &&, d]
[*, ninv, ;, if, (, d, <=, ninvhalf, ), {, return, 0, ;, }, else, if, (, ninvhalf, <, d]
[;, if, (, d, <=, ninvhalf, ), {, return, 0, ;, }, else, if, (, ninvhalf, <, d, &&, d]
[), {, return, 0, ;, }, else, if, (, ninvhalf, <, d, &&, d, <=, ninv, ), {, double, res]
[<=, ninvhalf, ), {, return, 0, ;, }, else, if, (, ninvhalf, <, d, &&, d, <=, ninv, ), {]
[), {, return, 0, ;, }, else, if, (, ninvhalf, <, d, &&, d, <=, ninv, ), {, double, res]
[;, }, else, if, (, ninvhalf, <, d, &&, d, <=, ninv, ), {, double, res, =, 1, ;, double]
[), {, double, res, =, 1, ;, double, f, =, 2, *, d, -, ninv, ;, for, (, int, i]
[&&, d, <=, ninv, ), {, double, res, =, 1, ;, double, f, =, 2, *, d, -, ninv, ;]
[<, d, &&, d, <=, ninv, ), {, double, res, =, 1, ;, double, f, =, 2, *, d, -]
[&&, d, <=, ninv, ), {, double, res, =, 1, ;, double, f, =, 2, *, d, -, ninv, ;]
[), {, double, res, =, 1, ;, double, f, =, 2, *, d, -, ninv, ;, for, (, int, i]
[<=, ninv, ), {, double, res, =, 1, ;, double, f, =, 2, *, d, -, ninv, ;, for, (]
[), {, double, res, =, 1, ;, double, f, =, 2, *, d, -, ninv, ;, for, (, int, i]
[;, double, f, =, 2, *, d, -, ninv, ;, for, (, int, i, =, 1, ;, i, <=, n]
[;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, res, *=, i, *]
[-, ninv, ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, res, *=]
[*, d, -, ninv, ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {]
[-, ninv, ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, res, *=]
[;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, res, *=, i, *]
[;, i, <=, n, ;, ++, i, ), {, res, *=, i, *, f, ;, }, return, res, ;, }]
[;, ++, i, ), {, res, *=, i, *, f, ;, }, return, res, ;, }, else, if, (, 1]
[<=, n, ;, ++, i, ), {, res, *=, i, *, f, ;, }, return, res, ;, }, else, if]
[;, ++, i, ), {, res, *=, i, *, f, ;, }, return, res, ;, }, else, if, (, 1]
[), {, res, *=, i, *, f, ;, }, return, res, ;, }, else, if, (, 1, -, ninv, <=]
[), {, res, *=, i, *, f, ;, }, return, res, ;, }, else, if, (, 1, -, ninv, <=]
[*=, i, *, f, ;, }, return, res, ;, }, else, if, (, 1, -, ninv, <=, d, &&, d]
[;, }, return, res, ;, }, else, if, (, 1, -, ninv, <=, d, &&, d, <, 1, ), {]
[*, f, ;, }, return, res, ;, }, else, if, (, 1, -, ninv, <=, d, &&, d, <, 1]
[;, }, return, res, ;, }, else, if, (, 1, -, ninv, <=, d, &&, d, <, 1, ), {]
[;, }, else, if, (, 1, -, ninv, <=, d, &&, d, <, 1, ), {, return, 1, -, 2]
[), {, return, 1, -, 2, *, Math, ., pow, (, 1, -, d, ,, n, ), ;, }, else]
[&&, d, <, 1, ), {, return, 1, -, 2, *, Math, ., pow, (, 1, -, d, ,, n]
[<=, d, &&, d, <, 1, ), {, return, 1, -, 2, *, Math, ., pow, (, 1, -, d]
[-, ninv, <=, d, &&, d, <, 1, ), {, return, 1, -, 2, *, Math, ., pow, (, 1]
[<=, d, &&, d, <, 1, ), {, return, 1, -, 2, *, Math, ., pow, (, 1, -, d]
[&&, d, <, 1, ), {, return, 1, -, 2, *, Math, ., pow, (, 1, -, d, ,, n]
[), {, return, 1, -, 2, *, Math, ., pow, (, 1, -, d, ,, n, ), ;, }, else]
[<, 1, ), {, return, 1, -, 2, *, Math, ., pow, (, 1, -, d, ,, n, ), ;]
[), {, return, 1, -, 2, *, Math, ., pow, (, 1, -, d, ,, n, ), ;, }, else]
[;, }, else, if, (, 1, <=, d, ), {, return, 1, ;, }, return, exact, ?, exactK, (, d]
[-, 2, *, Math, ., pow, (, 1, -, d, ,, n, ), ;, }, else, if, (, 1, <=]
[;, }, else, if, (, 1, <=, d, ), {, return, 1, ;, }, return, exact, ?, exactK, (, d]
[*, Math, ., pow, (, 1, -, d, ,, n, ), ;, }, else, if, (, 1, <=, d, )]
[;, }, else, if, (, 1, <=, d, ), {, return, 1, ;, }, return, exact, ?, exactK, (, d]
[., pow, (, 1, -, d, ,, n, ), ;, }, else, if, (, 1, <=, d, ), {, return]
[,, n, ), ;, }, else, if, (, 1, <=, d, ), {, return, 1, ;, }, return, exact, ?]
[-, d, ,, n, ), ;, }, else, if, (, 1, <=, d, ), {, return, 1, ;, }, return]
[,, n, ), ;, }, else, if, (, 1, <=, d, ), {, return, 1, ;, }, return, exact, ?]
[), ;, }, else, if, (, 1, <=, d, ), {, return, 1, ;, }, return, exact, ?, exactK, (]
[), {, return, 1, ;, }, return, exact, ?, exactK, (, d, ), :, roundedK, (, d, ), ;, }]
[<=, d, ), {, return, 1, ;, }, return, exact, ?, exactK, (, d, ), :, roundedK, (, d, )]
[), {, return, 1, ;, }, return, exact, ?, exactK, (, d, ), :, roundedK, (, d, ), ;, }]
[;, }, return, exact, ?, exactK, (, d, ), :, roundedK, (, d, ), ;, }, private, double, exactK, (]
[;, }, private, double, exactK, (, double, d, ), throws, MathArithmeticException, {, final, int, k, =, (, int, ), Math]
[?, exactK, (, d, ), :, roundedK, (, d, ), ;, }, private, double, exactK, (, double, d, ), throws]
[:, roundedK, (, d, ), ;, }, private, double, exactK, (, double, d, ), throws, MathArithmeticException, {, final, int, k]
[), :, roundedK, (, d, ), ;, }, private, double, exactK, (, double, d, ), throws, MathArithmeticException, {, final, int]
[;, }, private, double, exactK, (, double, d, ), throws, MathArithmeticException, {, final, int, k, =, (, int, ), Math]
[), ;, }, private, double, exactK, (, double, d, ), throws, MathArithmeticException, {, final, int, k, =, (, int, )]
[;, final, FieldMatrix, <, BigFraction, >, H, =, this, ., createH, (, d, ), ;, final, FieldMatrix, <, BigFraction, >]
[;, final, FieldMatrix, <, BigFraction, >, H, =, this, ., createH, (, d, ), ;, final, FieldMatrix, <, BigFraction, >]
[., ceil, (, n, *, d, ), ;, final, FieldMatrix, <, BigFraction, >, H, =, this, ., createH, (, d]
[), ;, final, FieldMatrix, <, BigFraction, >, H, =, this, ., createH, (, d, ), ;, final, FieldMatrix, <, BigFraction]
[*, d, ), ;, final, FieldMatrix, <, BigFraction, >, H, =, this, ., createH, (, d, ), ;, final, FieldMatrix]
[), ;, final, FieldMatrix, <, BigFraction, >, H, =, this, ., createH, (, d, ), ;, final, FieldMatrix, <, BigFraction]
[;, final, FieldMatrix, <, BigFraction, >, Hpower, =, H, ., power, (, n, ), ;, BigFraction, pFrac, =, Hpower, .]
[., createH, (, d, ), ;, final, FieldMatrix, <, BigFraction, >, Hpower, =, H, ., power, (, n, ), ;]
[), ;, final, FieldMatrix, <, BigFraction, >, Hpower, =, H, ., power, (, n, ), ;, BigFraction, pFrac, =, Hpower]
[;, BigFraction, pFrac, =, Hpower, ., getEntry, (, k, -, 1, ,, k, -, 1, ), ;, for, (, int]
[., power, (, n, ), ;, BigFraction, pFrac, =, Hpower, ., getEntry, (, k, -, 1, ,, k, -, 1]
[), ;, BigFraction, pFrac, =, Hpower, ., getEntry, (, k, -, 1, ,, k, -, 1, ), ;, for, (]
[;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, pFrac, =, pFrac, .]
[., getEntry, (, k, -, 1, ,, k, -, 1, ), ;, for, (, int, i, =, 1, ;, i]
[,, k, -, 1, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, )]
[-, 1, ,, k, -, 1, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++]
[,, k, -, 1, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, )]
[), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, pFrac, =, pFrac]
[-, 1, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, pFrac]
[), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, pFrac, =, pFrac]
[;, i, <=, n, ;, ++, i, ), {, pFrac, =, pFrac, ., multiply, (, i, ), ., divide, (]
[;, ++, i, ), {, pFrac, =, pFrac, ., multiply, (, i, ), ., divide, (, n, ), ;, }]
[<=, n, ;, ++, i, ), {, pFrac, =, pFrac, ., multiply, (, i, ), ., divide, (, n, )]
[;, ++, i, ), {, pFrac, =, pFrac, ., multiply, (, i, ), ., divide, (, n, ), ;, }]
[), {, pFrac, =, pFrac, ., multiply, (, i, ), ., divide, (, n, ), ;, }, return, pFrac, .]
[), {, pFrac, =, pFrac, ., multiply, (, i, ), ., divide, (, n, ), ;, }, return, pFrac, .]
[=, pFrac, ., multiply, (, i, ), ., divide, (, n, ), ;, }, return, pFrac, ., bigDecimalValue, (, 20]
[;, }, return, pFrac, ., bigDecimalValue, (, 20, ,, BigDecimal, ., ROUND_HALF_UP, ), ., doubleValue, (, ), ;, }, private]
[., divide, (, n, ), ;, }, return, pFrac, ., bigDecimalValue, (, 20, ,, BigDecimal, ., ROUND_HALF_UP, ), ., doubleValue]
[., multiply, (, i, ), ., divide, (, n, ), ;, }, return, pFrac, ., bigDecimalValue, (, 20, ,, BigDecimal]
[), ., divide, (, n, ), ;, }, return, pFrac, ., bigDecimalValue, (, 20, ,, BigDecimal, ., ROUND_HALF_UP, ), .]
[), ;, }, return, pFrac, ., bigDecimalValue, (, 20, ,, BigDecimal, ., ROUND_HALF_UP, ), ., doubleValue, (, ), ;, }]
[;, }, private, double, roundedK, (, double, d, ), throws, MathArithmeticException, {, final, int, k, =, (, int, ), Math]
[., doubleValue, (, ), ;, }, private, double, roundedK, (, double, d, ), throws, MathArithmeticException, {, final, int, k, =]
[., bigDecimalValue, (, 20, ,, BigDecimal, ., ROUND_HALF_UP, ), ., doubleValue, (, ), ;, }, private, double, roundedK, (, double]
[,, BigDecimal, ., ROUND_HALF_UP, ), ., doubleValue, (, ), ;, }, private, double, roundedK, (, double, d, ), throws, MathArithmeticException]
[), ., doubleValue, (, ), ;, }, private, double, roundedK, (, double, d, ), throws, MathArithmeticException, {, final, int, k]
[., ROUND_HALF_UP, ), ., doubleValue, (, ), ;, }, private, double, roundedK, (, double, d, ), throws, MathArithmeticException, {, final]
[;, final, FieldMatrix, <, BigFraction, >, HBigFraction, =, this, ., createH, (, d, ), ;, final, int, m, =, HBigFraction]
[;, final, FieldMatrix, <, BigFraction, >, HBigFraction, =, this, ., createH, (, d, ), ;, final, int, m, =, HBigFraction]
[., ceil, (, n, *, d, ), ;, final, FieldMatrix, <, BigFraction, >, HBigFraction, =, this, ., createH, (, d]
[), ;, final, FieldMatrix, <, BigFraction, >, HBigFraction, =, this, ., createH, (, d, ), ;, final, int, m, =]
[*, d, ), ;, final, FieldMatrix, <, BigFraction, >, HBigFraction, =, this, ., createH, (, d, ), ;, final, int]
[), ;, final, FieldMatrix, <, BigFraction, >, HBigFraction, =, this, ., createH, (, d, ), ;, final, int, m, =]
[;, final, int, m, =, HBigFraction, ., getRowDimension, (, ), ;, final, RealMatrix, H, =, new, Array2DRowRealMatrix, (, m, ,]
[., createH, (, d, ), ;, final, int, m, =, HBigFraction, ., getRowDimension, (, ), ;, final, RealMatrix, H, =]
[), ;, final, int, m, =, HBigFraction, ., getRowDimension, (, ), ;, final, RealMatrix, H, =, new, Array2DRowRealMatrix, (, m]
[;, final, RealMatrix, H, =, new, Array2DRowRealMatrix, (, m, ,, m, ), ;, for, (, int, i, =, 0, ;]
[., getRowDimension, (, ), ;, final, RealMatrix, H, =, new, Array2DRowRealMatrix, (, m, ,, m, ), ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int, j]
[,, m, ), ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for]
[), ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int]
[;, i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {]
[<, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, H, ., setEntry]
[), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, H, ., setEntry]
[;, j, <, m, ;, ++, j, ), {, H, ., setEntry, (, i, ,, j, ,, HBigFraction, ., getEntry]
[;, ++, j, ), {, H, ., setEntry, (, i, ,, j, ,, HBigFraction, ., getEntry, (, i, ,, j]
[<, m, ;, ++, j, ), {, H, ., setEntry, (, i, ,, j, ,, HBigFraction, ., getEntry, (, i]
[;, ++, j, ), {, H, ., setEntry, (, i, ,, j, ,, HBigFraction, ., getEntry, (, i, ,, j]
[), {, H, ., setEntry, (, i, ,, j, ,, HBigFraction, ., getEntry, (, i, ,, j, ), ., doubleValue]
[), {, H, ., setEntry, (, i, ,, j, ,, HBigFraction, ., getEntry, (, i, ,, j, ), ., doubleValue]
[;, }, }, final, RealMatrix, Hpower, =, H, ., power, (, n, ), ;, double, pFrac, =, Hpower, ., getEntry]
[., setEntry, (, i, ,, j, ,, HBigFraction, ., getEntry, (, i, ,, j, ), ., doubleValue, (, ), )]
[,, j, ,, HBigFraction, ., getEntry, (, i, ,, j, ), ., doubleValue, (, ), ), ;, }, }, final]
[,, HBigFraction, ., getEntry, (, i, ,, j, ), ., doubleValue, (, ), ), ;, }, }, final, RealMatrix, Hpower]
[), ;, }, }, final, RealMatrix, Hpower, =, H, ., power, (, n, ), ;, double, pFrac, =, Hpower, .]
[., doubleValue, (, ), ), ;, }, }, final, RealMatrix, Hpower, =, H, ., power, (, n, ), ;, double]
[., getEntry, (, i, ,, j, ), ., doubleValue, (, ), ), ;, }, }, final, RealMatrix, Hpower, =, H]
[,, j, ), ., doubleValue, (, ), ), ;, }, }, final, RealMatrix, Hpower, =, H, ., power, (, n]
[), ., doubleValue, (, ), ), ;, }, }, final, RealMatrix, Hpower, =, H, ., power, (, n, ), ;]
[;, double, pFrac, =, Hpower, ., getEntry, (, k, -, 1, ,, k, -, 1, ), ;, for, (, int]
[., power, (, n, ), ;, double, pFrac, =, Hpower, ., getEntry, (, k, -, 1, ,, k, -, 1]
[), ;, double, pFrac, =, Hpower, ., getEntry, (, k, -, 1, ,, k, -, 1, ), ;, for, (]
[;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, pFrac, *=, (, double]
[., getEntry, (, k, -, 1, ,, k, -, 1, ), ;, for, (, int, i, =, 1, ;, i]
[,, k, -, 1, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, )]
[-, 1, ,, k, -, 1, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++]
[,, k, -, 1, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, )]
[), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, pFrac, *=, (]
[-, 1, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, pFrac]
[), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, pFrac, *=, (]
[;, i, <=, n, ;, ++, i, ), {, pFrac, *=, (, double, ), i, /, (, double, ), n]
[;, ++, i, ), {, pFrac, *=, (, double, ), i, /, (, double, ), n, ;, }, return, pFrac]
[<=, n, ;, ++, i, ), {, pFrac, *=, (, double, ), i, /, (, double, ), n, ;, }]
[;, ++, i, ), {, pFrac, *=, (, double, ), i, /, (, double, ), n, ;, }, return, pFrac]
[), {, pFrac, *=, (, double, ), i, /, (, double, ), n, ;, }, return, pFrac, ;, }, private]
[), {, pFrac, *=, (, double, ), i, /, (, double, ), n, ;, }, return, pFrac, ;, }, private]
[*=, (, double, ), i, /, (, double, ), n, ;, }, return, pFrac, ;, }, private, FieldMatrix, <, BigFraction]
[;, }, return, pFrac, ;, }, private, FieldMatrix, <, BigFraction, >, createH, (, double, d, ), throws, NumberIsTooLargeException, ,, FractionConversionException]
[/, (, double, ), n, ;, }, return, pFrac, ;, }, private, FieldMatrix, <, BigFraction, >, createH, (, double, d]
[/, (, double, ), n, ;, }, return, pFrac, ;, }, private, FieldMatrix, <, BigFraction, >, createH, (, double, d]
[;, }, return, pFrac, ;, }, private, FieldMatrix, <, BigFraction, >, createH, (, double, d, ), throws, NumberIsTooLargeException, ,, FractionConversionException]
[;, }, return, pFrac, ;, }, private, FieldMatrix, <, BigFraction, >, createH, (, double, d, ), throws, NumberIsTooLargeException, ,, FractionConversionException]
[;, }, private, FieldMatrix, <, BigFraction, >, createH, (, double, d, ), throws, NumberIsTooLargeException, ,, FractionConversionException, {, int, k, =]
[;, int, m, =, 2, *, k, -, 1, ;, double, hDouble, =, k, -, n, *, d, ;, if]
[;, int, m, =, 2, *, k, -, 1, ;, double, hDouble, =, k, -, n, *, d, ;, if]
[., ceil, (, n, *, d, ), ;, int, m, =, 2, *, k, -, 1, ;, double, hDouble, =]
[), ;, int, m, =, 2, *, k, -, 1, ;, double, hDouble, =, k, -, n, *, d, ;]
[*, d, ), ;, int, m, =, 2, *, k, -, 1, ;, double, hDouble, =, k, -, n, *]
[), ;, int, m, =, 2, *, k, -, 1, ;, double, hDouble, =, k, -, n, *, d, ;]
[;, double, hDouble, =, k, -, n, *, d, ;, if, (, hDouble, >=, 1, ), {, throw, new, NumberIsTooLargeException]
[-, 1, ;, double, hDouble, =, k, -, n, *, d, ;, if, (, hDouble, >=, 1, ), {, throw]
[*, k, -, 1, ;, double, hDouble, =, k, -, n, *, d, ;, if, (, hDouble, >=, 1, )]
[-, 1, ;, double, hDouble, =, k, -, n, *, d, ;, if, (, hDouble, >=, 1, ), {, throw]
[;, double, hDouble, =, k, -, n, *, d, ;, if, (, hDouble, >=, 1, ), {, throw, new, NumberIsTooLargeException]
[;, if, (, hDouble, >=, 1, ), {, throw, new, NumberIsTooLargeException, (, hDouble, ,, 1.0, ,, false, ), ;, }]
[-, n, *, d, ;, if, (, hDouble, >=, 1, ), {, throw, new, NumberIsTooLargeException, (, hDouble, ,, 1.0, ,]
[;, if, (, hDouble, >=, 1, ), {, throw, new, NumberIsTooLargeException, (, hDouble, ,, 1.0, ,, false, ), ;, }]
[*, d, ;, if, (, hDouble, >=, 1, ), {, throw, new, NumberIsTooLargeException, (, hDouble, ,, 1.0, ,, false, )]
[;, if, (, hDouble, >=, 1, ), {, throw, new, NumberIsTooLargeException, (, hDouble, ,, 1.0, ,, false, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, hDouble, ,, 1.0, ,, false, ), ;, }, BigFraction, h, =, null, ;, try]
[>=, 1, ), {, throw, new, NumberIsTooLargeException, (, hDouble, ,, 1.0, ,, false, ), ;, }, BigFraction, h, =, null]
[), {, throw, new, NumberIsTooLargeException, (, hDouble, ,, 1.0, ,, false, ), ;, }, BigFraction, h, =, null, ;, try]
[;, }, BigFraction, h, =, null, ;, try, {, h, =, new, BigFraction, (, hDouble, ,, 1.0e-20, ,, 10000, )]
[,, 1.0, ,, false, ), ;, }, BigFraction, h, =, null, ;, try, {, h, =, new, BigFraction, (, hDouble]
[,, false, ), ;, }, BigFraction, h, =, null, ;, try, {, h, =, new, BigFraction, (, hDouble, ,, 1.0e-20]
[), ;, }, BigFraction, h, =, null, ;, try, {, h, =, new, BigFraction, (, hDouble, ,, 1.0e-20, ,, 10000]
[;, try, {, h, =, new, BigFraction, (, hDouble, ,, 1.0e-20, ,, 10000, ), ;, }, catch, (, FractionConversionException, e1]
[=, new, BigFraction, (, hDouble, ,, 1.0e-20, ,, 10000, ), ;, }, catch, (, FractionConversionException, e1, ), {, try, {]
[;, }, catch, (, FractionConversionException, e1, ), {, try, {, h, =, new, BigFraction, (, hDouble, ,, 1.0e-10, ,, 10000]
[,, 1.0e-20, ,, 10000, ), ;, }, catch, (, FractionConversionException, e1, ), {, try, {, h, =, new, BigFraction, (]
[,, 10000, ), ;, }, catch, (, FractionConversionException, e1, ), {, try, {, h, =, new, BigFraction, (, hDouble, ,]
[), ;, }, catch, (, FractionConversionException, e1, ), {, try, {, h, =, new, BigFraction, (, hDouble, ,, 1.0e-10, ,]
[=, new, BigFraction, (, hDouble, ,, 1.0e-10, ,, 10000, ), ;, }, catch, (, FractionConversionException, e2, ), {, h, =]
[;, }, catch, (, FractionConversionException, e2, ), {, h, =, new, BigFraction, (, hDouble, ,, 1.0e-5, ,, 10000, ), ;]
[,, 1.0e-10, ,, 10000, ), ;, }, catch, (, FractionConversionException, e2, ), {, h, =, new, BigFraction, (, hDouble, ,]
[,, 10000, ), ;, }, catch, (, FractionConversionException, e2, ), {, h, =, new, BigFraction, (, hDouble, ,, 1.0e-5, ,]
[), ;, }, catch, (, FractionConversionException, e2, ), {, h, =, new, BigFraction, (, hDouble, ,, 1.0e-5, ,, 10000, )]
[=, new, BigFraction, (, hDouble, ,, 1.0e-5, ,, 10000, ), ;, }, }, final, BigFraction, [, ], [, ], Hdata]
[;, }, }, final, BigFraction, [, ], [, ], Hdata, =, new, BigFraction, [, m, ], [, m, ], ;]
[,, 1.0e-5, ,, 10000, ), ;, }, }, final, BigFraction, [, ], [, ], Hdata, =, new, BigFraction, [, m]
[,, 10000, ), ;, }, }, final, BigFraction, [, ], [, ], Hdata, =, new, BigFraction, [, m, ], []
[), ;, }, }, final, BigFraction, [, ], [, ], Hdata, =, new, BigFraction, [, m, ], [, m, ]]
[;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int, j]
[], [, m, ], ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int]
[;, i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {]
[<, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, if, (, i]
[), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, if, (, i]
[;, j, <, m, ;, ++, j, ), {, if, (, i, -, j, +, 1, <, 0, ), {]
[;, ++, j, ), {, if, (, i, -, j, +, 1, <, 0, ), {, Hdata, [, i, ]]
[<, m, ;, ++, j, ), {, if, (, i, -, j, +, 1, <, 0, ), {, Hdata, []
[;, ++, j, ), {, if, (, i, -, j, +, 1, <, 0, ), {, Hdata, [, i, ]]
[), {, if, (, i, -, j, +, 1, <, 0, ), {, Hdata, [, i, ], [, j, ]]
[), {, if, (, i, -, j, +, 1, <, 0, ), {, Hdata, [, i, ], [, j, ]]
[), {, Hdata, [, i, ], [, j, ], =, BigFraction, ., ZERO, ;, }, else, {, Hdata, [, i]
[<, 0, ), {, Hdata, [, i, ], [, j, ], =, BigFraction, ., ZERO, ;, }, else, {, Hdata]
[+, 1, <, 0, ), {, Hdata, [, i, ], [, j, ], =, BigFraction, ., ZERO, ;, }, else]
[-, j, +, 1, <, 0, ), {, Hdata, [, i, ], [, j, ], =, BigFraction, ., ZERO, ;]
[+, 1, <, 0, ), {, Hdata, [, i, ], [, j, ], =, BigFraction, ., ZERO, ;, }, else]
[<, 0, ), {, Hdata, [, i, ], [, j, ], =, BigFraction, ., ZERO, ;, }, else, {, Hdata]
[), {, Hdata, [, i, ], [, j, ], =, BigFraction, ., ZERO, ;, }, else, {, Hdata, [, i]
[=, BigFraction, ., ZERO, ;, }, else, {, Hdata, [, i, ], [, j, ], =, BigFraction, ., ONE, ;]
[[, j, ], =, BigFraction, ., ZERO, ;, }, else, {, Hdata, [, i, ], [, j, ], =, BigFraction]
[[, i, ], [, j, ], =, BigFraction, ., ZERO, ;, }, else, {, Hdata, [, i, ], [, j]
[], [, j, ], =, BigFraction, ., ZERO, ;, }, else, {, Hdata, [, i, ], [, j, ], =]
[], =, BigFraction, ., ZERO, ;, }, else, {, Hdata, [, i, ], [, j, ], =, BigFraction, ., ONE]
[;, }, else, {, Hdata, [, i, ], [, j, ], =, BigFraction, ., ONE, ;, }, }, }, final]
[., ZERO, ;, }, else, {, Hdata, [, i, ], [, j, ], =, BigFraction, ., ONE, ;, }, }]
[=, BigFraction, ., ONE, ;, }, }, }, final, BigFraction, [, ], hPowers, =, new, BigFraction, [, m, ], ;]
[[, j, ], =, BigFraction, ., ONE, ;, }, }, }, final, BigFraction, [, ], hPowers, =, new, BigFraction, []
[[, i, ], [, j, ], =, BigFraction, ., ONE, ;, }, }, }, final, BigFraction, [, ], hPowers, =]
[], [, j, ], =, BigFraction, ., ONE, ;, }, }, }, final, BigFraction, [, ], hPowers, =, new, BigFraction]
[], =, BigFraction, ., ONE, ;, }, }, }, final, BigFraction, [, ], hPowers, =, new, BigFraction, [, m, ]]
[;, }, }, }, final, BigFraction, [, ], hPowers, =, new, BigFraction, [, m, ], ;, hPowers, [, 0, ]]
[., ONE, ;, }, }, }, final, BigFraction, [, ], hPowers, =, new, BigFraction, [, m, ], ;, hPowers, []
[;, hPowers, [, 0, ], =, h, ;, for, (, int, i, =, 1, ;, i, <, m, ;, ++]
[], ;, hPowers, [, 0, ], =, h, ;, for, (, int, i, =, 1, ;, i, <, m, ;]
[=, h, ;, for, (, int, i, =, 1, ;, i, <, m, ;, ++, i, ), {, hPowers, []
[[, 0, ], =, h, ;, for, (, int, i, =, 1, ;, i, <, m, ;, ++, i, )]
[], =, h, ;, for, (, int, i, =, 1, ;, i, <, m, ;, ++, i, ), {, hPowers]
[;, for, (, int, i, =, 1, ;, i, <, m, ;, ++, i, ), {, hPowers, [, i, ]]
[;, i, <, m, ;, ++, i, ), {, hPowers, [, i, ], =, h, ., multiply, (, hPowers, []
[;, ++, i, ), {, hPowers, [, i, ], =, h, ., multiply, (, hPowers, [, i, -, 1, ]]
[<, m, ;, ++, i, ), {, hPowers, [, i, ], =, h, ., multiply, (, hPowers, [, i, -]
[;, ++, i, ), {, hPowers, [, i, ], =, h, ., multiply, (, hPowers, [, i, -, 1, ]]
[), {, hPowers, [, i, ], =, h, ., multiply, (, hPowers, [, i, -, 1, ], ), ;, }]
[), {, hPowers, [, i, ], =, h, ., multiply, (, hPowers, [, i, -, 1, ], ), ;, }]
[=, h, ., multiply, (, hPowers, [, i, -, 1, ], ), ;, }, for, (, int, i, =, 0]
[[, i, ], =, h, ., multiply, (, hPowers, [, i, -, 1, ], ), ;, }, for, (, int]
[], =, h, ., multiply, (, hPowers, [, i, -, 1, ], ), ;, }, for, (, int, i, =]
[;, }, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, Hdata, [, i]
[., multiply, (, hPowers, [, i, -, 1, ], ), ;, }, for, (, int, i, =, 0, ;, i]
[), ;, }, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, Hdata, []
[[, i, -, 1, ], ), ;, }, for, (, int, i, =, 0, ;, i, <, m, ;, ++]
[], ), ;, }, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, Hdata]
[-, 1, ], ), ;, }, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, )]
[], ), ;, }, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, Hdata]
[;, i, <, m, ;, ++, i, ), {, Hdata, [, i, ], [, 0, ], =, Hdata, [, i]
[;, ++, i, ), {, Hdata, [, i, ], [, 0, ], =, Hdata, [, i, ], [, 0, ]]
[<, m, ;, ++, i, ), {, Hdata, [, i, ], [, 0, ], =, Hdata, [, i, ], []
[;, ++, i, ), {, Hdata, [, i, ], [, 0, ], =, Hdata, [, i, ], [, 0, ]]
[), {, Hdata, [, i, ], [, 0, ], =, Hdata, [, i, ], [, 0, ], ., subtract, (]
[), {, Hdata, [, i, ], [, 0, ], =, Hdata, [, i, ], [, 0, ], ., subtract, (]
[=, Hdata, [, i, ], [, 0, ], ., subtract, (, hPowers, [, i, ], ), ;, Hdata, [, m]
[[, 0, ], =, Hdata, [, i, ], [, 0, ], ., subtract, (, hPowers, [, i, ], ), ;]
[[, i, ], [, 0, ], =, Hdata, [, i, ], [, 0, ], ., subtract, (, hPowers, [, i]
[], [, 0, ], =, Hdata, [, i, ], [, 0, ], ., subtract, (, hPowers, [, i, ], )]
[], =, Hdata, [, i, ], [, 0, ], ., subtract, (, hPowers, [, i, ], ), ;, Hdata, []
[;, Hdata, [, m, -, 1, ], [, i, ], =, Hdata, [, m, -, 1, ], [, i, ]]
[., subtract, (, hPowers, [, i, ], ), ;, Hdata, [, m, -, 1, ], [, i, ], =, Hdata]
[[, 0, ], ., subtract, (, hPowers, [, i, ], ), ;, Hdata, [, m, -, 1, ], [, i]
[[, i, ], [, 0, ], ., subtract, (, hPowers, [, i, ], ), ;, Hdata, [, m, -, 1]
[], [, 0, ], ., subtract, (, hPowers, [, i, ], ), ;, Hdata, [, m, -, 1, ], []
[], ., subtract, (, hPowers, [, i, ], ), ;, Hdata, [, m, -, 1, ], [, i, ], =]
[), ;, Hdata, [, m, -, 1, ], [, i, ], =, Hdata, [, m, -, 1, ], [, i]
[[, i, ], ), ;, Hdata, [, m, -, 1, ], [, i, ], =, Hdata, [, m, -, 1]
[], ), ;, Hdata, [, m, -, 1, ], [, i, ], =, Hdata, [, m, -, 1, ], []
[=, Hdata, [, m, -, 1, ], [, i, ], ., subtract, (, hPowers, [, m, -, i, -, 1]
[[, i, ], =, Hdata, [, m, -, 1, ], [, i, ], ., subtract, (, hPowers, [, m, -]
[[, m, -, 1, ], [, i, ], =, Hdata, [, m, -, 1, ], [, i, ], ., subtract]
[], [, i, ], =, Hdata, [, m, -, 1, ], [, i, ], ., subtract, (, hPowers, [, m]
[-, 1, ], [, i, ], =, Hdata, [, m, -, 1, ], [, i, ], ., subtract, (, hPowers]
[], [, i, ], =, Hdata, [, m, -, 1, ], [, i, ], ., subtract, (, hPowers, [, m]
[], =, Hdata, [, m, -, 1, ], [, i, ], ., subtract, (, hPowers, [, m, -, i, -]
[;, }, if, (, h, ., compareTo, (, BigFraction, ., ONE_HALF, ), ==, 1, ), {, Hdata, [, m, -]
[., subtract, (, hPowers, [, m, -, i, -, 1, ], ), ;, }, if, (, h, ., compareTo, (]
[[, i, ], ., subtract, (, hPowers, [, m, -, i, -, 1, ], ), ;, }, if, (, h]
[[, m, -, 1, ], [, i, ], ., subtract, (, hPowers, [, m, -, i, -, 1, ], )]
[], [, i, ], ., subtract, (, hPowers, [, m, -, i, -, 1, ], ), ;, }, if, (]
[-, 1, ], [, i, ], ., subtract, (, hPowers, [, m, -, i, -, 1, ], ), ;, }]
[], [, i, ], ., subtract, (, hPowers, [, m, -, i, -, 1, ], ), ;, }, if, (]
[], ., subtract, (, hPowers, [, m, -, i, -, 1, ], ), ;, }, if, (, h, ., compareTo]
[), ;, }, if, (, h, ., compareTo, (, BigFraction, ., ONE_HALF, ), ==, 1, ), {, Hdata, [, m]
[[, m, -, i, -, 1, ], ), ;, }, if, (, h, ., compareTo, (, BigFraction, ., ONE_HALF, )]
[], ), ;, }, if, (, h, ., compareTo, (, BigFraction, ., ONE_HALF, ), ==, 1, ), {, Hdata, []
[-, 1, ], ), ;, }, if, (, h, ., compareTo, (, BigFraction, ., ONE_HALF, ), ==, 1, ), {]
[-, i, -, 1, ], ), ;, }, if, (, h, ., compareTo, (, BigFraction, ., ONE_HALF, ), ==, 1]
[-, 1, ], ), ;, }, if, (, h, ., compareTo, (, BigFraction, ., ONE_HALF, ), ==, 1, ), {]
[], ), ;, }, if, (, h, ., compareTo, (, BigFraction, ., ONE_HALF, ), ==, 1, ), {, Hdata, []
[), {, Hdata, [, m, -, 1, ], [, 0, ], =, Hdata, [, m, -, 1, ], [, 0]
[==, 1, ), {, Hdata, [, m, -, 1, ], [, 0, ], =, Hdata, [, m, -, 1, ]]
[., compareTo, (, BigFraction, ., ONE_HALF, ), ==, 1, ), {, Hdata, [, m, -, 1, ], [, 0, ]]
[), ==, 1, ), {, Hdata, [, m, -, 1, ], [, 0, ], =, Hdata, [, m, -, 1]
[., ONE_HALF, ), ==, 1, ), {, Hdata, [, m, -, 1, ], [, 0, ], =, Hdata, [, m]
[), {, Hdata, [, m, -, 1, ], [, 0, ], =, Hdata, [, m, -, 1, ], [, 0]
[=, Hdata, [, m, -, 1, ], [, 0, ], ., add, (, h, ., multiply, (, 2, ), .]
[[, 0, ], =, Hdata, [, m, -, 1, ], [, 0, ], ., add, (, h, ., multiply, (]
[[, m, -, 1, ], [, 0, ], =, Hdata, [, m, -, 1, ], [, 0, ], ., add]
[], [, 0, ], =, Hdata, [, m, -, 1, ], [, 0, ], ., add, (, h, ., multiply]
[-, 1, ], [, 0, ], =, Hdata, [, m, -, 1, ], [, 0, ], ., add, (, h]
[], [, 0, ], =, Hdata, [, m, -, 1, ], [, 0, ], ., add, (, h, ., multiply]
[], =, Hdata, [, m, -, 1, ], [, 0, ], ., add, (, h, ., multiply, (, 2, )]
[;, }, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int]
[., add, (, h, ., multiply, (, 2, ), ., subtract, (, 1, ), ., pow, (, m, ), )]
[[, 0, ], ., add, (, h, ., multiply, (, 2, ), ., subtract, (, 1, ), ., pow, (]
[[, m, -, 1, ], [, 0, ], ., add, (, h, ., multiply, (, 2, ), ., subtract, (]
[], [, 0, ], ., add, (, h, ., multiply, (, 2, ), ., subtract, (, 1, ), ., pow]
[-, 1, ], [, 0, ], ., add, (, h, ., multiply, (, 2, ), ., subtract, (, 1, )]
[], [, 0, ], ., add, (, h, ., multiply, (, 2, ), ., subtract, (, 1, ), ., pow]
[], ., add, (, h, ., multiply, (, 2, ), ., subtract, (, 1, ), ., pow, (, m, )]
[), ;, }, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for, (]
[., pow, (, m, ), ), ;, }, for, (, int, i, =, 0, ;, i, <, m, ;, ++]
[., subtract, (, 1, ), ., pow, (, m, ), ), ;, }, for, (, int, i, =, 0, ;]
[., multiply, (, 2, ), ., subtract, (, 1, ), ., pow, (, m, ), ), ;, }, for, (]
[), ., subtract, (, 1, ), ., pow, (, m, ), ), ;, }, for, (, int, i, =, 0]
[), ., pow, (, m, ), ), ;, }, for, (, int, i, =, 0, ;, i, <, m, ;]
[), ), ;, }, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for]
[;, i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, i, +]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, i, +, 1, ;, ++, j]
[<, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, i, +, 1, ;]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, i, +, 1, ;, ++, j]
[), {, for, (, int, j, =, 0, ;, j, <, i, +, 1, ;, ++, j, ), {, if]
[), {, for, (, int, j, =, 0, ;, j, <, i, +, 1, ;, ++, j, ), {, if]
[;, j, <, i, +, 1, ;, ++, j, ), {, if, (, i, -, j, +, 1, >, 0]
[;, ++, j, ), {, if, (, i, -, j, +, 1, >, 0, ), {, for, (, int, g]
[<, i, +, 1, ;, ++, j, ), {, if, (, i, -, j, +, 1, >, 0, ), {]
[;, ++, j, ), {, if, (, i, -, j, +, 1, >, 0, ), {, for, (, int, g]
[+, 1, ;, ++, j, ), {, if, (, i, -, j, +, 1, >, 0, ), {, for, (]
[;, ++, j, ), {, if, (, i, -, j, +, 1, >, 0, ), {, for, (, int, g]
[), {, if, (, i, -, j, +, 1, >, 0, ), {, for, (, int, g, =, 2, ;]
[), {, if, (, i, -, j, +, 1, >, 0, ), {, for, (, int, g, =, 2, ;]
[), {, for, (, int, g, =, 2, ;, g, <=, i, -, j, +, 1, ;, ++, g, )]
[>, 0, ), {, for, (, int, g, =, 2, ;, g, <=, i, -, j, +, 1, ;, ++]
[+, 1, >, 0, ), {, for, (, int, g, =, 2, ;, g, <=, i, -, j, +, 1]
[-, j, +, 1, >, 0, ), {, for, (, int, g, =, 2, ;, g, <=, i, -, j]
[+, 1, >, 0, ), {, for, (, int, g, =, 2, ;, g, <=, i, -, j, +, 1]
[>, 0, ), {, for, (, int, g, =, 2, ;, g, <=, i, -, j, +, 1, ;, ++]
[), {, for, (, int, g, =, 2, ;, g, <=, i, -, j, +, 1, ;, ++, g, )]
[;, g, <=, i, -, j, +, 1, ;, ++, g, ), {, Hdata, [, i, ], [, j, ]]
[;, ++, g, ), {, Hdata, [, i, ], [, j, ], =, Hdata, [, i, ], [, j, ]]
[<=, i, -, j, +, 1, ;, ++, g, ), {, Hdata, [, i, ], [, j, ], =, Hdata]
[;, ++, g, ), {, Hdata, [, i, ], [, j, ], =, Hdata, [, i, ], [, j, ]]
[+, 1, ;, ++, g, ), {, Hdata, [, i, ], [, j, ], =, Hdata, [, i, ], []
[-, j, +, 1, ;, ++, g, ), {, Hdata, [, i, ], [, j, ], =, Hdata, [, i]
[+, 1, ;, ++, g, ), {, Hdata, [, i, ], [, j, ], =, Hdata, [, i, ], []
[;, ++, g, ), {, Hdata, [, i, ], [, j, ], =, Hdata, [, i, ], [, j, ]]
[), {, Hdata, [, i, ], [, j, ], =, Hdata, [, i, ], [, j, ], ., divide, (]
[), {, Hdata, [, i, ], [, j, ], =, Hdata, [, i, ], [, j, ], ., divide, (]
[=, Hdata, [, i, ], [, j, ], ., divide, (, g, ), ;, }, }, }, }, return, new]
[[, j, ], =, Hdata, [, i, ], [, j, ], ., divide, (, g, ), ;, }, }, }]
[[, i, ], [, j, ], =, Hdata, [, i, ], [, j, ], ., divide, (, g, ), ;]
[], [, j, ], =, Hdata, [, i, ], [, j, ], ., divide, (, g, ), ;, }, }]
[], =, Hdata, [, i, ], [, j, ], ., divide, (, g, ), ;, }, }, }, }, return]
[;, }, }, }, }, return, new, Array2DRowFieldMatrix, <, BigFraction, >, (, BigFractionField, ., getInstance, (, ), ,, Hdata, )]
[., divide, (, g, ), ;, }, }, }, }, return, new, Array2DRowFieldMatrix, <, BigFraction, >, (, BigFractionField, ., getInstance]
[[, j, ], ., divide, (, g, ), ;, }, }, }, }, return, new, Array2DRowFieldMatrix, <, BigFraction, >, (]
[[, i, ], [, j, ], ., divide, (, g, ), ;, }, }, }, }, return, new, Array2DRowFieldMatrix, <]
[], [, j, ], ., divide, (, g, ), ;, }, }, }, }, return, new, Array2DRowFieldMatrix, <, BigFraction, >]
[], ., divide, (, g, ), ;, }, }, }, }, return, new, Array2DRowFieldMatrix, <, BigFraction, >, (, BigFractionField, .]
[), ;, }, }, }, }, return, new, Array2DRowFieldMatrix, <, BigFraction, >, (, BigFractionField, ., getInstance, (, ), ,, Hdata]
[;, }, }]
[,, Hdata, ), ;, }, }]
[., getInstance, (, ), ,, Hdata, ), ;, }, }]
[), ;, }, }]
