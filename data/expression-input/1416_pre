[., logging, ., Logger, ;, class, PhaseOptimizer, implements, CompilerPass, {, @, VisibleForTesting, static, final, List, <, String, >, OPTIMAL_ORDER, =]
[., logging, ., Logger, ;, class, PhaseOptimizer, implements, CompilerPass, {, @, VisibleForTesting, static, final, List, <, String, >, OPTIMAL_ORDER, =]
[;, class, PhaseOptimizer, implements, CompilerPass, {, @, VisibleForTesting, static, final, List, <, String, >, OPTIMAL_ORDER, =, ImmutableList, ., of, (]
[PhaseOptimizer, implements, CompilerPass, {, @, VisibleForTesting, static, final, List, <, String, >, OPTIMAL_ORDER, =, ImmutableList, ., of, (, "deadAssignmentsElimination", ,]
[CompilerPass, {, @, VisibleForTesting, static, final, List, <, String, >, OPTIMAL_ORDER, =, ImmutableList, ., of, (, "deadAssignmentsElimination", ,, "inlineFunctions", ,]
[@, VisibleForTesting, static, final, List, <, String, >, OPTIMAL_ORDER, =, ImmutableList, ., of, (, "deadAssignmentsElimination", ,, "inlineFunctions", ,, "removeUnusedPrototypeProperties", ,]
[static, final, List, <, String, >, OPTIMAL_ORDER, =, ImmutableList, ., of, (, "deadAssignmentsElimination", ,, "inlineFunctions", ,, "removeUnusedPrototypeProperties", ,, "removeUnreachableCode", ,]
[List, <, String, >, OPTIMAL_ORDER, =, ImmutableList, ., of, (, "deadAssignmentsElimination", ,, "inlineFunctions", ,, "removeUnusedPrototypeProperties", ,, "removeUnreachableCode", ,, "removeUnusedVars", ,]
[String, >, OPTIMAL_ORDER, =, ImmutableList, ., of, (, "deadAssignmentsElimination", ,, "inlineFunctions", ,, "removeUnusedPrototypeProperties", ,, "removeUnreachableCode", ,, "removeUnusedVars", ,, "minimizeExitPoints", ,]
[OPTIMAL_ORDER, =, ImmutableList, ., of, (, "deadAssignmentsElimination", ,, "inlineFunctions", ,, "removeUnusedPrototypeProperties", ,, "removeUnreachableCode", ,, "removeUnusedVars", ,, "minimizeExitPoints", ,, "inlineVariables", ,]
[ImmutableList, ., of, (, "deadAssignmentsElimination", ,, "inlineFunctions", ,, "removeUnusedPrototypeProperties", ,, "removeUnreachableCode", ,, "removeUnusedVars", ,, "minimizeExitPoints", ,, "inlineVariables", ,, "collapseObjectLiterals", ,]
["removeUnusedPrototypeProperties", ,, "removeUnreachableCode", ,, "removeUnusedVars", ,, "minimizeExitPoints", ,, "inlineVariables", ,, "collapseObjectLiterals", ,, "peepholeOptimizations", ), ;, static, final, int, MAX_LOOPS, =]
[,, "inlineVariables", ,, "collapseObjectLiterals", ,, "peepholeOptimizations", ), ;, static, final, int, MAX_LOOPS, =, 100, ;, static, final, String, OPTIMIZE_LOOP_ERROR, =]
[static, final, String, OPTIMIZE_LOOP_ERROR, =, "Fixed point loop exceeded the maximum number of iterations.", ;, enum, State, {, RUN_PASSES_NOT_RUN_IN_PREV_ITER, ,, RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, }, private, static, final, Logger, logger, =]
[static, final, String, OPTIMIZE_LOOP_ERROR, =, "Fixed point loop exceeded the maximum number of iterations.", ;, enum, State, {, RUN_PASSES_NOT_RUN_IN_PREV_ITER, ,, RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, }, private, static, final, Logger, logger, =]
[=, "Fixed point loop exceeded the maximum number of iterations.", ;, enum, State, {, RUN_PASSES_NOT_RUN_IN_PREV_ITER, ,, RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, }, private, static, final, Logger, logger, =, Logger, ., getLogger, (]
[=, "Fixed point loop exceeded the maximum number of iterations.", ;, enum, State, {, RUN_PASSES_NOT_RUN_IN_PREV_ITER, ,, RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, }, private, static, final, Logger, logger, =, Logger, ., getLogger, (]
[., getLogger, (, PhaseOptimizer, ., class, ., getName, (, ), ), ;, private, final, List, <, CompilerPass, >, passes, =]
[., getLogger, (, PhaseOptimizer, ., class, ., getName, (, ), ), ;, private, final, List, <, CompilerPass, >, passes, =]
[(, ), ;, private, final, AbstractCompiler, compiler, ;, private, final, PerformanceTracker, tracker, ;, private, final, CodeChangeHandler, ., RecentChange, recentChange, =]
[tracker, ;, private, final, CodeChangeHandler, ., RecentChange, recentChange, =, new, CodeChangeHandler, ., RecentChange, (, ), ;, private, boolean, loopMutex, =]
[RecentChange, recentChange, =, new, CodeChangeHandler, ., RecentChange, (, ), ;, private, boolean, loopMutex, =, false, ;, private, Tracer, currentTracer, =]
[RecentChange, (, ), ;, private, boolean, loopMutex, =, false, ;, private, Tracer, currentTracer, =, null, ;, private, String, currentPassName, =]
[loopMutex, =, false, ;, private, Tracer, currentTracer, =, null, ;, private, String, currentPassName, =, null, ;, private, PassFactory, sanityCheck, =]
[currentTracer, =, null, ;, private, String, currentPassName, =, null, ;, private, PassFactory, sanityCheck, =, null, ;, private, double, progress, =]
[currentPassName, =, null, ;, private, PassFactory, sanityCheck, =, null, ;, private, double, progress, =, 0.0, ;, private, double, progressStep, =]
[=, null, ;, private, double, progress, =, 0.0, ;, private, double, progressStep, =, 0.0, ;, private, static, boolean, randomizeLoops, =]
[0.0, ;, private, static, boolean, randomizeLoops, =, false, ;, private, static, List, <, List, <, String, >, >, loopsRun, =]
[0.0, ;, private, static, boolean, randomizeLoops, =, false, ;, private, static, List, <, List, <, String, >, >, loopsRun, =]
[(, ), ;, private, final, ProgressRange, progressRange, ;, PhaseOptimizer, (, AbstractCompiler, compiler, ,, PerformanceTracker, tracker, ,, ProgressRange, progressRange, ), {]
[(, ), ;, private, final, ProgressRange, progressRange, ;, PhaseOptimizer, (, AbstractCompiler, compiler, ,, PerformanceTracker, tracker, ,, ProgressRange, progressRange, ), {]
[final, ProgressRange, progressRange, ;, PhaseOptimizer, (, AbstractCompiler, compiler, ,, PerformanceTracker, tracker, ,, ProgressRange, progressRange, ), {, this, ., compiler, =]
[progressRange, ;, PhaseOptimizer, (, AbstractCompiler, compiler, ,, PerformanceTracker, tracker, ,, ProgressRange, progressRange, ), {, this, ., compiler, =, compiler, ;]
[progressRange, ;, PhaseOptimizer, (, AbstractCompiler, compiler, ,, PerformanceTracker, tracker, ,, ProgressRange, progressRange, ), {, this, ., compiler, =, compiler, ;]
[AbstractCompiler, compiler, ,, PerformanceTracker, tracker, ,, ProgressRange, progressRange, ), {, this, ., compiler, =, compiler, ;, this, ., tracker, =]
[,, PerformanceTracker, tracker, ,, ProgressRange, progressRange, ), {, this, ., compiler, =, compiler, ;, this, ., tracker, =, tracker, ;]
[,, PerformanceTracker, tracker, ,, ProgressRange, progressRange, ), {, this, ., compiler, =, compiler, ;, this, ., tracker, =, tracker, ;]
[ProgressRange, progressRange, ), {, this, ., compiler, =, compiler, ;, this, ., tracker, =, tracker, ;, this, ., progressRange, =]
[), {, this, ., compiler, =, compiler, ;, this, ., tracker, =, tracker, ;, this, ., progressRange, =, progressRange, ;]
[), {, this, ., compiler, =, compiler, ;, this, ., tracker, =, tracker, ;, this, ., progressRange, =, progressRange, ;]
[compiler, =, compiler, ;, this, ., tracker, =, tracker, ;, this, ., progressRange, =, progressRange, ;, compiler, ., addChangeHandler, (]
[this, ., progressRange, =, progressRange, ;, compiler, ., addChangeHandler, (, recentChange, ), ;, }, static, void, randomizeLoops, (, ), {]
[progressRange, =, progressRange, ;, compiler, ., addChangeHandler, (, recentChange, ), ;, }, static, void, randomizeLoops, (, ), {, randomizeLoops, =]
[), {, randomizeLoops, =, true, ;, }, static, List, <, List, <, String, >, >, getLoopsRun, (, ), {, return]
[<, List, <, String, >, >, getLoopsRun, (, ), {, return, loopsRun, ;, }, static, void, clearLoopsRun, (, ), {]
[<, List, <, String, >, >, getLoopsRun, (, ), {, return, loopsRun, ;, }, static, void, clearLoopsRun, (, ), {]
[loopsRun, ., clear, (, ), ;, }, void, consume, (, List, <, PassFactory, >, factories, ), {, Loop, currentLoop, =]
[consume, (, List, <, PassFactory, >, factories, ), {, Loop, currentLoop, =, new, Loop, (, ), ;, boolean, isCurrentLoopPopulated, =]
[), {, Loop, currentLoop, =, new, Loop, (, ), ;, boolean, isCurrentLoopPopulated, =, false, ;, for, (, PassFactory, factory, :]
[new, Loop, (, ), ;, boolean, isCurrentLoopPopulated, =, false, ;, for, (, PassFactory, factory, :, factories, ), {, if, (]
[new, Loop, (, ), ;, boolean, isCurrentLoopPopulated, =, false, ;, for, (, PassFactory, factory, :, factories, ), {, if, (]
[;, for, (, PassFactory, factory, :, factories, ), {, if, (, factory, ., isOneTimePass, (, ), ), {, if, (]
[PassFactory, factory, :, factories, ), {, if, (, factory, ., isOneTimePass, (, ), ), {, if, (, isCurrentLoopPopulated, ), {]
[PassFactory, factory, :, factories, ), {, if, (, factory, ., isOneTimePass, (, ), ), {, if, (, isCurrentLoopPopulated, ), {]
[), {, if, (, factory, ., isOneTimePass, (, ), ), {, if, (, isCurrentLoopPopulated, ), {, passes, ., add, (]
[(, factory, ., isOneTimePass, (, ), ), {, if, (, isCurrentLoopPopulated, ), {, passes, ., add, (, currentLoop, ), ;]
[., isOneTimePass, (, ), ), {, if, (, isCurrentLoopPopulated, ), {, passes, ., add, (, currentLoop, ), ;, currentLoop, =]
[{, if, (, isCurrentLoopPopulated, ), {, passes, ., add, (, currentLoop, ), ;, currentLoop, =, new, Loop, (, ), ;]
[(, isCurrentLoopPopulated, ), {, passes, ., add, (, currentLoop, ), ;, currentLoop, =, new, Loop, (, ), ;, isCurrentLoopPopulated, =]
[{, passes, ., add, (, currentLoop, ), ;, currentLoop, =, new, Loop, (, ), ;, isCurrentLoopPopulated, =, false, ;, }]
[., add, (, currentLoop, ), ;, currentLoop, =, new, Loop, (, ), ;, isCurrentLoopPopulated, =, false, ;, }, addOneTimePass, (]
[currentLoop, =, new, Loop, (, ), ;, isCurrentLoopPopulated, =, false, ;, }, addOneTimePass, (, factory, ), ;, }, else, {]
[currentLoop, =, new, Loop, (, ), ;, isCurrentLoopPopulated, =, false, ;, }, addOneTimePass, (, factory, ), ;, }, else, {]
[(, ), ;, isCurrentLoopPopulated, =, false, ;, }, addOneTimePass, (, factory, ), ;, }, else, {, currentLoop, ., addLoopedPass, (]
[isCurrentLoopPopulated, =, false, ;, }, addOneTimePass, (, factory, ), ;, }, else, {, currentLoop, ., addLoopedPass, (, factory, ), ;]
[false, ;, }, addOneTimePass, (, factory, ), ;, }, else, {, currentLoop, ., addLoopedPass, (, factory, ), ;, isCurrentLoopPopulated, =]
[), ;, }, else, {, currentLoop, ., addLoopedPass, (, factory, ), ;, isCurrentLoopPopulated, =, true, ;, }, }, if, (]
[else, {, currentLoop, ., addLoopedPass, (, factory, ), ;, isCurrentLoopPopulated, =, true, ;, }, }, if, (, isCurrentLoopPopulated, ), {]
[else, {, currentLoop, ., addLoopedPass, (, factory, ), ;, isCurrentLoopPopulated, =, true, ;, }, }, if, (, isCurrentLoopPopulated, ), {]
[addLoopedPass, (, factory, ), ;, isCurrentLoopPopulated, =, true, ;, }, }, if, (, isCurrentLoopPopulated, ), {, passes, ., add, (]
[(, isCurrentLoopPopulated, ), {, passes, ., add, (, currentLoop, ), ;, }, }, void, addOneTimePass, (, PassFactory, factory, ), {]
[(, isCurrentLoopPopulated, ), {, passes, ., add, (, currentLoop, ), ;, }, }, void, addOneTimePass, (, PassFactory, factory, ), {]
[passes, ., add, (, currentLoop, ), ;, }, }, void, addOneTimePass, (, PassFactory, factory, ), {, passes, ., add, (]
[(, currentLoop, ), ;, }, }, void, addOneTimePass, (, PassFactory, factory, ), {, passes, ., add, (, new, NamedPass, (]
[passes, ., add, (, new, NamedPass, (, factory, ), ), ;, }, Loop, addFixedPointLoop, (, ), {, Loop, loop, =]
[NamedPass, (, factory, ), ), ;, }, Loop, addFixedPointLoop, (, ), {, Loop, loop, =, new, Loop, (, ), ;]
[NamedPass, (, factory, ), ), ;, }, Loop, addFixedPointLoop, (, ), {, Loop, loop, =, new, Loop, (, ), ;]
[), ;, }, Loop, addFixedPointLoop, (, ), {, Loop, loop, =, new, Loop, (, ), ;, passes, ., add, (]
[addFixedPointLoop, (, ), {, Loop, loop, =, new, Loop, (, ), ;, passes, ., add, (, loop, ), ;, return]
[), ;, passes, ., add, (, loop, ), ;, return, loop, ;, }, void, setSanityCheck, (, PassFactory, sanityCheck, ), {]
[), ;, passes, ., add, (, loop, ), ;, return, loop, ;, }, void, setSanityCheck, (, PassFactory, sanityCheck, ), {]
[add, (, loop, ), ;, return, loop, ;, }, void, setSanityCheck, (, PassFactory, sanityCheck, ), {, this, ., sanityCheck, =]
[this, ., sanityCheck, =, sanityCheck, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[sanityCheck, =, sanityCheck, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, progress, =]
[sanityCheck, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, progress, =, 0.0, ;]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, progress, =, 0.0, ;, progressStep, =]
[void, process, (, Node, externs, ,, Node, root, ), {, progress, =, 0.0, ;, progressStep, =, 0.0, ;, if, (]
[void, process, (, Node, externs, ,, Node, root, ), {, progress, =, 0.0, ;, progressStep, =, 0.0, ;, if, (]
[(, Node, externs, ,, Node, root, ), {, progress, =, 0.0, ;, progressStep, =, 0.0, ;, if, (, progressRange, !=]
[,, Node, root, ), {, progress, =, 0.0, ;, progressStep, =, 0.0, ;, if, (, progressRange, !=, null, ), {]
[root, ), {, progress, =, 0.0, ;, progressStep, =, 0.0, ;, if, (, progressRange, !=, null, ), {, progressStep, =]
[root, ), {, progress, =, 0.0, ;, progressStep, =, 0.0, ;, if, (, progressRange, !=, null, ), {, progressStep, =]
[), {, progress, =, 0.0, ;, progressStep, =, 0.0, ;, if, (, progressRange, !=, null, ), {, progressStep, =, (]
[), {, progress, =, 0.0, ;, progressStep, =, 0.0, ;, if, (, progressRange, !=, null, ), {, progressStep, =, (]
[), {, progress, =, 0.0, ;, progressStep, =, 0.0, ;, if, (, progressRange, !=, null, ), {, progressStep, =, (]
[0.0, ;, progressStep, =, 0.0, ;, if, (, progressRange, !=, null, ), {, progressStep, =, (, progressRange, ., maxValue, -]
[0.0, ;, progressStep, =, 0.0, ;, if, (, progressRange, !=, null, ), {, progressStep, =, (, progressRange, ., maxValue, -]
[;, if, (, progressRange, !=, null, ), {, progressStep, =, (, progressRange, ., maxValue, -, progressRange, ., initialValue, ), /]
[;, if, (, progressRange, !=, null, ), {, progressStep, =, (, progressRange, ., maxValue, -, progressRange, ., initialValue, ), /]
[), {, progressStep, =, (, progressRange, ., maxValue, -, progressRange, ., initialValue, ), /, passes, ., size, (, ), ;]
[progressStep, =, (, progressRange, ., maxValue, -, progressRange, ., initialValue, ), /, passes, ., size, (, ), ;, progress, =]
[progressStep, =, (, progressRange, ., maxValue, -, progressRange, ., initialValue, ), /, passes, ., size, (, ), ;, progress, =]
[), /, passes, ., size, (, ), ;, progress, =, progressRange, ., initialValue, ;, }, for, (, CompilerPass, pass, :]
[., size, (, ), ;, progress, =, progressRange, ., initialValue, ;, }, for, (, CompilerPass, pass, :, passes, ), {]
[., size, (, ), ;, progress, =, progressRange, ., initialValue, ;, }, for, (, CompilerPass, pass, :, passes, ), {]
[;, progress, =, progressRange, ., initialValue, ;, }, for, (, CompilerPass, pass, :, passes, ), {, pass, ., process, (]
[=, progressRange, ., initialValue, ;, }, for, (, CompilerPass, pass, :, passes, ), {, pass, ., process, (, externs, ,]
[}, for, (, CompilerPass, pass, :, passes, ), {, pass, ., process, (, externs, ,, root, ), ;, if, (]
[if, (, hasHaltingErrors, (, ), ), {, return, ;, }, }, }, private, void, startPass, (, String, passName, ), {]
[if, (, hasHaltingErrors, (, ), ), {, return, ;, }, }, }, private, void, startPass, (, String, passName, ), {]
[), ), {, return, ;, }, }, }, private, void, startPass, (, String, passName, ), {, Preconditions, ., checkState, (]
[), ), {, return, ;, }, }, }, private, void, startPass, (, String, passName, ), {, Preconditions, ., checkState, (]
[), ), {, return, ;, }, }, }, private, void, startPass, (, String, passName, ), {, Preconditions, ., checkState, (]
[{, return, ;, }, }, }, private, void, startPass, (, String, passName, ), {, Preconditions, ., checkState, (, currentTracer, ==]
[;, }, }, }, private, void, startPass, (, String, passName, ), {, Preconditions, ., checkState, (, currentTracer, ==, null, &&]
[;, }, }, }, private, void, startPass, (, String, passName, ), {, Preconditions, ., checkState, (, currentTracer, ==, null, &&]
[}, }, private, void, startPass, (, String, passName, ), {, Preconditions, ., checkState, (, currentTracer, ==, null, &&, currentPassName, ==]
[void, startPass, (, String, passName, ), {, Preconditions, ., checkState, (, currentTracer, ==, null, &&, currentPassName, ==, null, ), ;]
[(, String, passName, ), {, Preconditions, ., checkState, (, currentTracer, ==, null, &&, currentPassName, ==, null, ), ;, currentPassName, =]
[passName, ), {, Preconditions, ., checkState, (, currentTracer, ==, null, &&, currentPassName, ==, null, ), ;, currentPassName, =, passName, ;]
[{, Preconditions, ., checkState, (, currentTracer, ==, null, &&, currentPassName, ==, null, ), ;, currentPassName, =, passName, ;, currentTracer, =]
[., checkState, (, currentTracer, ==, null, &&, currentPassName, ==, null, ), ;, currentPassName, =, passName, ;, currentTracer, =, newTracer, (]
[;, currentTracer, =, newTracer, (, passName, ), ;, }, private, void, endPass, (, Node, externs, ,, Node, root, ), {]
[;, currentTracer, =, newTracer, (, passName, ), ;, }, private, void, endPass, (, Node, externs, ,, Node, root, ), {]
[(, passName, ), ;, }, private, void, endPass, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[(, passName, ), ;, }, private, void, endPass, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[(, passName, ), ;, }, private, void, endPass, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[), ;, }, private, void, endPass, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (, currentTracer, !=]
[}, private, void, endPass, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (, currentTracer, !=, null, &&]
[}, private, void, endPass, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (, currentTracer, !=, null, &&]
[void, endPass, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (, currentTracer, !=, null, &&, currentPassName, !=]
[Node, root, ), {, Preconditions, ., checkState, (, currentTracer, !=, null, &&, currentPassName, !=, null, ), ;, String, passToCheck, =]
[checkState, (, currentTracer, !=, null, &&, currentPassName, !=, null, ), ;, String, passToCheck, =, currentPassName, ;, try, {, if, (]
[checkState, (, currentTracer, !=, null, &&, currentPassName, !=, null, ), ;, String, passToCheck, =, currentPassName, ;, try, {, if, (]
[currentTracer, !=, null, &&, currentPassName, !=, null, ), ;, String, passToCheck, =, currentPassName, ;, try, {, if, (, progressRange, ==]
[&&, currentPassName, !=, null, ), ;, String, passToCheck, =, currentPassName, ;, try, {, if, (, progressRange, ==, null, ), {]
[&&, currentPassName, !=, null, ), ;, String, passToCheck, =, currentPassName, ;, try, {, if, (, progressRange, ==, null, ), {]
[), ;, String, passToCheck, =, currentPassName, ;, try, {, if, (, progressRange, ==, null, ), {, compiler, ., setProgress, (]
[;, String, passToCheck, =, currentPassName, ;, try, {, if, (, progressRange, ==, null, ), {, compiler, ., setProgress, (, -]
[passToCheck, =, currentPassName, ;, try, {, if, (, progressRange, ==, null, ), {, compiler, ., setProgress, (, -, 1, ,]
[if, (, progressRange, ==, null, ), {, compiler, ., setProgress, (, -, 1, ,, currentPassName, ), ;, }, else, {]
[progressRange, ==, null, ), {, compiler, ., setProgress, (, -, 1, ,, currentPassName, ), ;, }, else, {, progress, +=]
[null, ), {, compiler, ., setProgress, (, -, 1, ,, currentPassName, ), ;, }, else, {, progress, +=, progressStep, ;]
[null, ), {, compiler, ., setProgress, (, -, 1, ,, currentPassName, ), ;, }, else, {, progress, +=, progressStep, ;]
[., setProgress, (, -, 1, ,, currentPassName, ), ;, }, else, {, progress, +=, progressStep, ;, compiler, ., setProgress, (]
[(, -, 1, ,, currentPassName, ), ;, }, else, {, progress, +=, progressStep, ;, compiler, ., setProgress, (, progress, ,]
[currentPassName, ), ;, }, else, {, progress, +=, progressStep, ;, compiler, ., setProgress, (, progress, ,, currentPassName, ), ;, }]
[;, }, else, {, progress, +=, progressStep, ;, compiler, ., setProgress, (, progress, ,, currentPassName, ), ;, }, stopTracer, (]
[else, {, progress, +=, progressStep, ;, compiler, ., setProgress, (, progress, ,, currentPassName, ), ;, }, stopTracer, (, currentTracer, ,]
[+=, progressStep, ;, compiler, ., setProgress, (, progress, ,, currentPassName, ), ;, }, stopTracer, (, currentTracer, ,, currentPassName, ), ;]
[;, compiler, ., setProgress, (, progress, ,, currentPassName, ), ;, }, stopTracer, (, currentTracer, ,, currentPassName, ), ;, currentPassName, =]
[., setProgress, (, progress, ,, currentPassName, ), ;, }, stopTracer, (, currentTracer, ,, currentPassName, ), ;, currentPassName, =, null, ;]
[(, progress, ,, currentPassName, ), ;, }, stopTracer, (, currentTracer, ,, currentPassName, ), ;, currentPassName, =, null, ;, currentTracer, =]
[,, currentPassName, ), ;, }, stopTracer, (, currentTracer, ,, currentPassName, ), ;, currentPassName, =, null, ;, currentTracer, =, null, ;]
[), ;, }, stopTracer, (, currentTracer, ,, currentPassName, ), ;, currentPassName, =, null, ;, currentTracer, =, null, ;, maybeSanityCheck, (]
[}, stopTracer, (, currentTracer, ,, currentPassName, ), ;, currentPassName, =, null, ;, currentTracer, =, null, ;, maybeSanityCheck, (, externs, ,]
[;, currentTracer, =, null, ;, maybeSanityCheck, (, externs, ,, root, ), ;, }, catch, (, Exception, e, ), {, throw]
[null, ;, maybeSanityCheck, (, externs, ,, root, ), ;, }, catch, (, Exception, e, ), {, throw, new, RuntimeException, (]
[null, ;, maybeSanityCheck, (, externs, ,, root, ), ;, }, catch, (, Exception, e, ), {, throw, new, RuntimeException, (]
[maybeSanityCheck, (, externs, ,, root, ), ;, }, catch, (, Exception, e, ), {, throw, new, RuntimeException, (, "Sanity check failed for ", +]
[externs, ,, root, ), ;, }, catch, (, Exception, e, ), {, throw, new, RuntimeException, (, "Sanity check failed for ", +, passToCheck, ,]
[+, passToCheck, ,, e, ), ;, }, }, void, maybeSanityCheck, (, Node, externs, ,, Node, root, ), {, if, (]
[+, passToCheck, ,, e, ), ;, }, }, void, maybeSanityCheck, (, Node, externs, ,, Node, root, ), {, if, (]
[,, e, ), ;, }, }, void, maybeSanityCheck, (, Node, externs, ,, Node, root, ), {, if, (, sanityCheck, !=]
[;, }, }, void, maybeSanityCheck, (, Node, externs, ,, Node, root, ), {, if, (, sanityCheck, !=, null, ), {]
[;, }, }, void, maybeSanityCheck, (, Node, externs, ,, Node, root, ), {, if, (, sanityCheck, !=, null, ), {]
[;, }, }, void, maybeSanityCheck, (, Node, externs, ,, Node, root, ), {, if, (, sanityCheck, !=, null, ), {]
[maybeSanityCheck, (, Node, externs, ,, Node, root, ), {, if, (, sanityCheck, !=, null, ), {, sanityCheck, ., create, (]
[Node, root, ), {, if, (, sanityCheck, !=, null, ), {, sanityCheck, ., create, (, compiler, ), ., process, (]
[), {, if, (, sanityCheck, !=, null, ), {, sanityCheck, ., create, (, compiler, ), ., process, (, externs, ,]
[(, compiler, ), ., process, (, externs, ,, root, ), ;, }, }, private, boolean, hasHaltingErrors, (, ), {, return]
[(, compiler, ), ., process, (, externs, ,, root, ), ;, }, }, private, boolean, hasHaltingErrors, (, ), {, return]
[{, return, compiler, ., hasHaltingErrors, (, ), ;, }, private, Tracer, newTracer, (, String, passName, ), {, String, comment, =]
[{, return, compiler, ., hasHaltingErrors, (, ), ;, }, private, Tracer, newTracer, (, String, passName, ), {, String, comment, =]
[compiler, ., hasHaltingErrors, (, ), ;, }, private, Tracer, newTracer, (, String, passName, ), {, String, comment, =, passName, +]
[., hasHaltingErrors, (, ), ;, }, private, Tracer, newTracer, (, String, passName, ), {, String, comment, =, passName, +, (]
[., hasHaltingErrors, (, ), ;, }, private, Tracer, newTracer, (, String, passName, ), {, String, comment, =, passName, +, (]
[., hasHaltingErrors, (, ), ;, }, private, Tracer, newTracer, (, String, passName, ), {, String, comment, =, passName, +, (]
[private, Tracer, newTracer, (, String, passName, ), {, String, comment, =, passName, +, (, recentChange, ., hasCodeChanged, (, ), ?]
[newTracer, (, String, passName, ), {, String, comment, =, passName, +, (, recentChange, ., hasCodeChanged, (, ), ?, " on recently changed AST", :]
[{, String, comment, =, passName, +, (, recentChange, ., hasCodeChanged, (, ), ?, " on recently changed AST", :, "", ), ;, if, (]
[{, String, comment, =, passName, +, (, recentChange, ., hasCodeChanged, (, ), ?, " on recently changed AST", :, "", ), ;, if, (]
[comment, =, passName, +, (, recentChange, ., hasCodeChanged, (, ), ?, " on recently changed AST", :, "", ), ;, if, (, tracker, !=]
[+, (, recentChange, ., hasCodeChanged, (, ), ?, " on recently changed AST", :, "", ), ;, if, (, tracker, !=, null, ), {]
[+, (, recentChange, ., hasCodeChanged, (, ), ?, " on recently changed AST", :, "", ), ;, if, (, tracker, !=, null, ), {]
[hasCodeChanged, (, ), ?, " on recently changed AST", :, "", ), ;, if, (, tracker, !=, null, ), {, tracker, ., recordPassStart, (]
[:, "", ), ;, if, (, tracker, !=, null, ), {, tracker, ., recordPassStart, (, passName, ), ;, }, return]
[;, if, (, tracker, !=, null, ), {, tracker, ., recordPassStart, (, passName, ), ;, }, return, new, Tracer, (]
[(, tracker, !=, null, ), {, tracker, ., recordPassStart, (, passName, ), ;, }, return, new, Tracer, (, "JSCompiler", ,]
["JSCompiler", ,, comment, ), ;, }, private, void, stopTracer, (, Tracer, t, ,, String, passName, ), {, long, result, =]
["JSCompiler", ,, comment, ), ;, }, private, void, stopTracer, (, Tracer, t, ,, String, passName, ), {, long, result, =]
[stopTracer, (, Tracer, t, ,, String, passName, ), {, long, result, =, t, ., stop, (, ), ;, if, (]
[stopTracer, (, Tracer, t, ,, String, passName, ), {, long, result, =, t, ., stop, (, ), ;, if, (]
[Tracer, t, ,, String, passName, ), {, long, result, =, t, ., stop, (, ), ;, if, (, tracker, !=]
[String, passName, ), {, long, result, =, t, ., stop, (, ), ;, if, (, tracker, !=, null, ), {]
[String, passName, ), {, long, result, =, t, ., stop, (, ), ;, if, (, tracker, !=, null, ), {]
[long, result, =, t, ., stop, (, ), ;, if, (, tracker, !=, null, ), {, tracker, ., recordPassStop, (]
[=, t, ., stop, (, ), ;, if, (, tracker, !=, null, ), {, tracker, ., recordPassStop, (, passName, ,]
[class, NamedPass, implements, CompilerPass, {, final, String, name, ;, private, final, PassFactory, factory, ;, NamedPass, (, PassFactory, factory, ), {]
[class, NamedPass, implements, CompilerPass, {, final, String, name, ;, private, final, PassFactory, factory, ;, NamedPass, (, PassFactory, factory, ), {]
[{, final, String, name, ;, private, final, PassFactory, factory, ;, NamedPass, (, PassFactory, factory, ), {, this, ., name, =]
[{, final, String, name, ;, private, final, PassFactory, factory, ;, NamedPass, (, PassFactory, factory, ), {, this, ., name, =]
[final, PassFactory, factory, ;, NamedPass, (, PassFactory, factory, ), {, this, ., name, =, factory, ., getName, (, ), ;]
[final, PassFactory, factory, ;, NamedPass, (, PassFactory, factory, ), {, this, ., name, =, factory, ., getName, (, ), ;]
[NamedPass, (, PassFactory, factory, ), {, this, ., name, =, factory, ., getName, (, ), ;, this, ., factory, =]
[this, ., factory, =, factory, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., factory, =, factory, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[factory, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, logger, ., fine, (]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, logger, ., fine, (, name, ), ;]
[public, void, process, (, Node, externs, ,, Node, root, ), {, logger, ., fine, (, name, ), ;, startPass, (]
[(, Node, externs, ,, Node, root, ), {, logger, ., fine, (, name, ), ;, startPass, (, name, ), ;]
[(, Node, externs, ,, Node, root, ), {, logger, ., fine, (, name, ), ;, startPass, (, name, ), ;]
[(, Node, externs, ,, Node, root, ), {, logger, ., fine, (, name, ), ;, startPass, (, name, ), ;]
[Node, root, ), {, logger, ., fine, (, name, ), ;, startPass, (, name, ), ;, factory, ., create, (]
[., fine, (, name, ), ;, startPass, (, name, ), ;, factory, ., create, (, compiler, ), ., process, (]
[(, name, ), ;, startPass, (, name, ), ;, factory, ., create, (, compiler, ), ., process, (, externs, ,]
[;, startPass, (, name, ), ;, factory, ., create, (, compiler, ), ., process, (, externs, ,, root, ), ;]
[(, name, ), ;, factory, ., create, (, compiler, ), ., process, (, externs, ,, root, ), ;, endPass, (]
[), ;, factory, ., create, (, compiler, ), ., process, (, externs, ,, root, ), ;, endPass, (, externs, ,]
[externs, ,, root, ), ;, }, }, class, Loop, implements, CompilerPass, {, private, final, List, <, NamedPass, >, myPasses, =]
[externs, ,, root, ), ;, }, }, class, Loop, implements, CompilerPass, {, private, final, List, <, NamedPass, >, myPasses, =]
[List, <, NamedPass, >, myPasses, =, Lists, ., newArrayList, (, ), ;, private, final, Set, <, String, >, myNames, =]
[List, <, NamedPass, >, myPasses, =, Lists, ., newArrayList, (, ), ;, private, final, Set, <, String, >, myNames, =]
[String, >, myNames, =, Sets, ., newHashSet, (, ), ;, void, addLoopedPass, (, PassFactory, factory, ), {, String, name, =]
[String, >, myNames, =, Sets, ., newHashSet, (, ), ;, void, addLoopedPass, (, PassFactory, factory, ), {, String, name, =]
[newHashSet, (, ), ;, void, addLoopedPass, (, PassFactory, factory, ), {, String, name, =, factory, ., getName, (, ), ;]
[newHashSet, (, ), ;, void, addLoopedPass, (, PassFactory, factory, ), {, String, name, =, factory, ., getName, (, ), ;]
[void, addLoopedPass, (, PassFactory, factory, ), {, String, name, =, factory, ., getName, (, ), ;, Preconditions, ., checkArgument, (]
[addLoopedPass, (, PassFactory, factory, ), {, String, name, =, factory, ., getName, (, ), ;, Preconditions, ., checkArgument, (, !]
[addLoopedPass, (, PassFactory, factory, ), {, String, name, =, factory, ., getName, (, ), ;, Preconditions, ., checkArgument, (, !]
[), {, String, name, =, factory, ., getName, (, ), ;, Preconditions, ., checkArgument, (, !, myNames, ., contains, (]
[name, =, factory, ., getName, (, ), ;, Preconditions, ., checkArgument, (, !, myNames, ., contains, (, name, ), ,]
[factory, ., getName, (, ), ;, Preconditions, ., checkArgument, (, !, myNames, ., contains, (, name, ), ,, "Already a pass with name '%s' in this loop", ,]
[(, ), ;, Preconditions, ., checkArgument, (, !, myNames, ., contains, (, name, ), ,, "Already a pass with name '%s' in this loop", ,, name, ), ;]
[(, ), ;, Preconditions, ., checkArgument, (, !, myNames, ., contains, (, name, ), ,, "Already a pass with name '%s' in this loop", ,, name, ), ;]
[., checkArgument, (, !, myNames, ., contains, (, name, ), ,, "Already a pass with name '%s' in this loop", ,, name, ), ;, myNames, ., add, (]
[!, myNames, ., contains, (, name, ), ,, "Already a pass with name '%s' in this loop", ,, name, ), ;, myNames, ., add, (, name, ), ;]
[!, myNames, ., contains, (, name, ), ,, "Already a pass with name '%s' in this loop", ,, name, ), ;, myNames, ., add, (, name, ), ;]
[(, name, ), ,, "Already a pass with name '%s' in this loop", ,, name, ), ;, myNames, ., add, (, name, ), ;, myPasses, ., add, (]
[,, "Already a pass with name '%s' in this loop", ,, name, ), ;, myNames, ., add, (, name, ), ;, myPasses, ., add, (, new, NamedPass, (]
[factory, ), ), ;, }, private, List, <, String, >, getPassOrder, (, ), {, List, <, String, >, order, =]
[factory, ), ), ;, }, private, List, <, String, >, getPassOrder, (, ), {, List, <, String, >, order, =]
[(, ), {, List, <, String, >, order, =, Lists, ., newArrayList, (, ), ;, for, (, NamedPass, pass, :]
[List, <, String, >, order, =, Lists, ., newArrayList, (, ), ;, for, (, NamedPass, pass, :, myPasses, ), {]
[List, <, String, >, order, =, Lists, ., newArrayList, (, ), ;, for, (, NamedPass, pass, :, myPasses, ), {]
[order, =, Lists, ., newArrayList, (, ), ;, for, (, NamedPass, pass, :, myPasses, ), {, order, ., add, (]
[order, =, Lists, ., newArrayList, (, ), ;, for, (, NamedPass, pass, :, myPasses, ), {, order, ., add, (]
[;, for, (, NamedPass, pass, :, myPasses, ), {, order, ., add, (, pass, ., name, ), ;, }, return]
[), ;, }, return, order, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[), ;, }, return, order, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[order, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (, !]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (, !, loopMutex, ,]
[void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (, !, loopMutex, ,, "Nested loops are forbidden", ), ;]
[(, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (, !, loopMutex, ,, "Nested loops are forbidden", ), ;, loopMutex, =]
[Node, root, ), {, Preconditions, ., checkState, (, !, loopMutex, ,, "Nested loops are forbidden", ), ;, loopMutex, =, true, ;, if, (]
[{, Preconditions, ., checkState, (, !, loopMutex, ,, "Nested loops are forbidden", ), ;, loopMutex, =, true, ;, if, (, randomizeLoops, ), {]
[,, "Nested loops are forbidden", ), ;, loopMutex, =, true, ;, if, (, randomizeLoops, ), {, randomizePasses, (, ), ;, }, else, {]
[), {, randomizePasses, (, ), ;, }, else, {, optimizePasses, (, ), ;, }, Set, <, NamedPass, >, madeChanges, =]
[Set, <, NamedPass, >, madeChanges, =, new, HashSet, <, NamedPass, >, (, ), ;, Set, <, NamedPass, >, runInPrevIter, =]
[(, ), ;, Set, <, NamedPass, >, runInPrevIter, =, new, HashSet, <, NamedPass, >, (, ), ;, State, s, =]
[(, ), ;, Set, <, NamedPass, >, runInPrevIter, =, new, HashSet, <, NamedPass, >, (, ), ;, State, s, =]
[HashSet, <, NamedPass, >, (, ), ;, State, s, =, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ;, boolean, lastIterMadeChanges, ;, int, count, =]
[;, State, s, =, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ;, boolean, lastIterMadeChanges, ;, int, count, =, 0, ;, try, {, while, (]
[., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ;, boolean, lastIterMadeChanges, ;, int, count, =, 0, ;, try, {, while, (, true, ), {, if, (]
[., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ;, boolean, lastIterMadeChanges, ;, int, count, =, 0, ;, try, {, while, (, true, ), {, if, (]
[., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ;, boolean, lastIterMadeChanges, ;, int, count, =, 0, ;, try, {, while, (, true, ), {, if, (]
[boolean, lastIterMadeChanges, ;, int, count, =, 0, ;, try, {, while, (, true, ), {, if, (, count, ++, >]
[int, count, =, 0, ;, try, {, while, (, true, ), {, if, (, count, ++, >, MAX_LOOPS, ), {]
[int, count, =, 0, ;, try, {, while, (, true, ), {, if, (, count, ++, >, MAX_LOOPS, ), {]
[;, try, {, while, (, true, ), {, if, (, count, ++, >, MAX_LOOPS, ), {, compiler, ., throwInternalError, (]
[{, while, (, true, ), {, if, (, count, ++, >, MAX_LOOPS, ), {, compiler, ., throwInternalError, (, OPTIMIZE_LOOP_ERROR, ,]
[), {, if, (, count, ++, >, MAX_LOOPS, ), {, compiler, ., throwInternalError, (, OPTIMIZE_LOOP_ERROR, ,, null, ), ;, }]
[if, (, count, ++, >, MAX_LOOPS, ), {, compiler, ., throwInternalError, (, OPTIMIZE_LOOP_ERROR, ,, null, ), ;, }, lastIterMadeChanges, =]
[{, compiler, ., throwInternalError, (, OPTIMIZE_LOOP_ERROR, ,, null, ), ;, }, lastIterMadeChanges, =, false, ;, for, (, NamedPass, pass, :]
[throwInternalError, (, OPTIMIZE_LOOP_ERROR, ,, null, ), ;, }, lastIterMadeChanges, =, false, ;, for, (, NamedPass, pass, :, myPasses, ), {]
[throwInternalError, (, OPTIMIZE_LOOP_ERROR, ,, null, ), ;, }, lastIterMadeChanges, =, false, ;, for, (, NamedPass, pass, :, myPasses, ), {]
[lastIterMadeChanges, =, false, ;, for, (, NamedPass, pass, :, myPasses, ), {, recentChange, ., reset, (, ), ;, if, (]
[lastIterMadeChanges, =, false, ;, for, (, NamedPass, pass, :, myPasses, ), {, recentChange, ., reset, (, ), ;, if, (]
[=, false, ;, for, (, NamedPass, pass, :, myPasses, ), {, recentChange, ., reset, (, ), ;, if, (, (]
[=, false, ;, for, (, NamedPass, pass, :, myPasses, ), {, recentChange, ., reset, (, ), ;, if, (, (]
[=, false, ;, for, (, NamedPass, pass, :, myPasses, ), {, recentChange, ., reset, (, ), ;, if, (, (]
[;, for, (, NamedPass, pass, :, myPasses, ), {, recentChange, ., reset, (, ), ;, if, (, (, s, ==]
[;, for, (, NamedPass, pass, :, myPasses, ), {, recentChange, ., reset, (, ), ;, if, (, (, s, ==]
[pass, :, myPasses, ), {, recentChange, ., reset, (, ), ;, if, (, (, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, &&]
[:, myPasses, ), {, recentChange, ., reset, (, ), ;, if, (, (, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, &&, !]
[:, myPasses, ), {, recentChange, ., reset, (, ), ;, if, (, (, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, &&, !]
[recentChange, ., reset, (, ), ;, if, (, (, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, &&, !, runInPrevIter, ., contains, (]
[), ;, if, (, (, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, &&, !, runInPrevIter, ., contains, (, pass, ), ), ||]
[;, if, (, (, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, &&, !, runInPrevIter, ., contains, (, pass, ), ), ||, (]
[;, if, (, (, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, &&, !, runInPrevIter, ., contains, (, pass, ), ), ||, (]
[;, if, (, (, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, &&, !, runInPrevIter, ., contains, (, pass, ), ), ||, (]
[(, (, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, &&, !, runInPrevIter, ., contains, (, pass, ), ), ||, (, s, ==]
[(, (, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, &&, !, runInPrevIter, ., contains, (, pass, ), ), ||, (, s, ==]
[State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, &&, !, runInPrevIter, ., contains, (, pass, ), ), ||, (, s, ==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&]
[State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, &&, !, runInPrevIter, ., contains, (, pass, ), ), ||, (, s, ==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&]
[!, runInPrevIter, ., contains, (, pass, ), ), ||, (, s, ==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&, madeChanges, ., contains, (]
[pass, ), ), ||, (, s, ==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&, madeChanges, ., contains, (, pass, ), ), ), {]
[pass, ), ), ||, (, s, ==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&, madeChanges, ., contains, (, pass, ), ), ), {]
[(, s, ==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&, madeChanges, ., contains, (, pass, ), ), ), {, pass, ., process, (]
[==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&, madeChanges, ., contains, (, pass, ), ), ), {, pass, ., process, (, externs, ,]
[RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&, madeChanges, ., contains, (, pass, ), ), ), {, pass, ., process, (, externs, ,, root, ), ;]
[RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&, madeChanges, ., contains, (, pass, ), ), ), {, pass, ., process, (, externs, ,, root, ), ;]
[contains, (, pass, ), ), ), {, pass, ., process, (, externs, ,, root, ), ;, runInPrevIter, ., add, (]
[), {, pass, ., process, (, externs, ,, root, ), ;, runInPrevIter, ., add, (, pass, ), ;, if, (]
[runInPrevIter, ., add, (, pass, ), ;, if, (, hasHaltingErrors, (, ), ), {, return, ;, }, else, if, (]
[runInPrevIter, ., add, (, pass, ), ;, if, (, hasHaltingErrors, (, ), ), {, return, ;, }, else, if, (]
[if, (, hasHaltingErrors, (, ), ), {, return, ;, }, else, if, (, recentChange, ., hasCodeChanged, (, ), ), {]
[if, (, hasHaltingErrors, (, ), ), {, return, ;, }, else, if, (, recentChange, ., hasCodeChanged, (, ), ), {]
[), ), {, return, ;, }, else, if, (, recentChange, ., hasCodeChanged, (, ), ), {, madeChanges, ., add, (]
[return, ;, }, else, if, (, recentChange, ., hasCodeChanged, (, ), ), {, madeChanges, ., add, (, pass, ), ;]
[}, else, if, (, recentChange, ., hasCodeChanged, (, ), ), {, madeChanges, ., add, (, pass, ), ;, lastIterMadeChanges, =]
[., hasCodeChanged, (, ), ), {, madeChanges, ., add, (, pass, ), ;, lastIterMadeChanges, =, true, ;, }, else, {]
[., hasCodeChanged, (, ), ), {, madeChanges, ., add, (, pass, ), ;, lastIterMadeChanges, =, true, ;, }, else, {]
[), {, madeChanges, ., add, (, pass, ), ;, lastIterMadeChanges, =, true, ;, }, else, {, madeChanges, ., remove, (]
[), ;, lastIterMadeChanges, =, true, ;, }, else, {, madeChanges, ., remove, (, pass, ), ;, }, }, else, {]
[), ;, lastIterMadeChanges, =, true, ;, }, else, {, madeChanges, ., remove, (, pass, ), ;, }, }, else, {]
[true, ;, }, else, {, madeChanges, ., remove, (, pass, ), ;, }, }, else, {, runInPrevIter, ., remove, (]
[remove, (, pass, ), ;, }, }, else, {, runInPrevIter, ., remove, (, pass, ), ;, }, }, if, (]
[remove, (, pass, ), ;, }, }, else, {, runInPrevIter, ., remove, (, pass, ), ;, }, }, if, (]
[pass, ), ;, }, }, else, {, runInPrevIter, ., remove, (, pass, ), ;, }, }, if, (, s, ==]
[pass, ), ;, }, }, else, {, runInPrevIter, ., remove, (, pass, ), ;, }, }, if, (, s, ==]
[runInPrevIter, ., remove, (, pass, ), ;, }, }, if, (, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ), {, if, (]
[(, pass, ), ;, }, }, if, (, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ), {, if, (, lastIterMadeChanges, ), {]
[), ;, }, }, if, (, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ), {, if, (, lastIterMadeChanges, ), {, s, =]
[), ;, }, }, if, (, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ), {, if, (, lastIterMadeChanges, ), {, s, =]
[(, lastIterMadeChanges, ), {, s, =, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, ;, }, else, {, return, ;, }, }, else, if, (]
[lastIterMadeChanges, ), {, s, =, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, ;, }, else, {, return, ;, }, }, else, if, (, !]
[s, =, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, ;, }, else, {, return, ;, }, }, else, if, (, !, lastIterMadeChanges, ), {]
[State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, ;, }, else, {, return, ;, }, }, else, if, (, !, lastIterMadeChanges, ), {, s, =]
[State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, ;, }, else, {, return, ;, }, }, else, if, (, !, lastIterMadeChanges, ), {, s, =]
[}, }, else, if, (, !, lastIterMadeChanges, ), {, s, =, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ;, }, }, }, finally, {]
[else, if, (, !, lastIterMadeChanges, ), {, s, =, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ;, }, }, }, finally, {, loopMutex, =]
[., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ;, }, }, }, finally, {, loopMutex, =, false, ;, }, }, private, void, randomizePasses, (, ), {]
[., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ;, }, }, }, finally, {, loopMutex, =, false, ;, }, }, private, void, randomizePasses, (, ), {]
[}, }, finally, {, loopMutex, =, false, ;, }, }, private, void, randomizePasses, (, ), {, Collections, ., shuffle, (]
[Collections, ., shuffle, (, myPasses, ), ;, }, private, void, optimizePasses, (, ), {, List, <, NamedPass, >, optimalPasses, =]
[Collections, ., shuffle, (, myPasses, ), ;, }, private, void, optimizePasses, (, ), {, List, <, NamedPass, >, optimalPasses, =]
[(, ), {, List, <, NamedPass, >, optimalPasses, =, Lists, ., newArrayList, (, ), ;, for, (, String, passName, :]
[=, Lists, ., newArrayList, (, ), ;, for, (, String, passName, :, OPTIMAL_ORDER, ), {, for, (, NamedPass, pass, :]
[), ;, for, (, String, passName, :, OPTIMAL_ORDER, ), {, for, (, NamedPass, pass, :, myPasses, ), {, if, (]
[), ;, for, (, String, passName, :, OPTIMAL_ORDER, ), {, for, (, NamedPass, pass, :, myPasses, ), {, if, (]
[), ;, for, (, String, passName, :, OPTIMAL_ORDER, ), {, for, (, NamedPass, pass, :, myPasses, ), {, if, (]
[:, OPTIMAL_ORDER, ), {, for, (, NamedPass, pass, :, myPasses, ), {, if, (, pass, ., name, ., equals, (]
[for, (, NamedPass, pass, :, myPasses, ), {, if, (, pass, ., name, ., equals, (, passName, ), ), {]
[for, (, NamedPass, pass, :, myPasses, ), {, if, (, pass, ., name, ., equals, (, passName, ), ), {]
[:, myPasses, ), {, if, (, pass, ., name, ., equals, (, passName, ), ), {, optimalPasses, ., add, (]
[name, ., equals, (, passName, ), ), {, optimalPasses, ., add, (, pass, ), ;, break, ;, }, }, }]
[name, ., equals, (, passName, ), ), {, optimalPasses, ., add, (, pass, ), ;, break, ;, }, }, }]
[passName, ), ), {, optimalPasses, ., add, (, pass, ), ;, break, ;, }, }, }, myPasses, ., removeAll, (]
[{, optimalPasses, ., add, (, pass, ), ;, break, ;, }, }, }, myPasses, ., removeAll, (, optimalPasses, ), ;]
[{, optimalPasses, ., add, (, pass, ), ;, break, ;, }, }, }, myPasses, ., removeAll, (, optimalPasses, ), ;]
[(, pass, ), ;, break, ;, }, }, }, myPasses, ., removeAll, (, optimalPasses, ), ;, myPasses, ., addAll, (]
[public, final, double, initialValue, ;, public, final, double, maxValue, ;, public, ProgressRange, (, double, initialValue, ,, double, maxValue, ), {]
[public, final, double, initialValue, ;, public, final, double, maxValue, ;, public, ProgressRange, (, double, initialValue, ,, double, maxValue, ), {]
[;, public, final, double, maxValue, ;, public, ProgressRange, (, double, initialValue, ,, double, maxValue, ), {, this, ., initialValue, =]
[final, double, maxValue, ;, public, ProgressRange, (, double, initialValue, ,, double, maxValue, ), {, this, ., initialValue, =, initialValue, ;]
[final, double, maxValue, ;, public, ProgressRange, (, double, initialValue, ,, double, maxValue, ), {, this, ., initialValue, =, initialValue, ;]
[public, ProgressRange, (, double, initialValue, ,, double, maxValue, ), {, this, ., initialValue, =, initialValue, ;, this, ., maxValue, =]
