[FastMath, ;, public, class, FiniteDifferencesDifferentiator, implements, UnivariateFunctionDifferentiator, ,, UnivariateVectorFunctionDifferentiator, ,, UnivariateMatrixFunctionDifferentiator, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[tMax, ;, public, FiniteDifferencesDifferentiator, (, final, int, nbPoints, ,, final, double, stepSize, ), throws, NotPositiveException, ,, NumberIsTooSmallException, {, this, (]
[public, FiniteDifferencesDifferentiator, (, final, int, nbPoints, ,, final, double, stepSize, ), throws, NotPositiveException, ,, NumberIsTooSmallException, {, this, (, nbPoints, ,]
[(, final, int, nbPoints, ,, final, double, stepSize, ), throws, NotPositiveException, ,, NumberIsTooSmallException, {, this, (, nbPoints, ,, stepSize, ,]
[(, final, int, nbPoints, ,, final, double, stepSize, ), throws, NotPositiveException, ,, NumberIsTooSmallException, {, this, (, nbPoints, ,, stepSize, ,]
[,, final, double, stepSize, ), throws, NotPositiveException, ,, NumberIsTooSmallException, {, this, (, nbPoints, ,, stepSize, ,, Double, ., NEGATIVE_INFINITY, ,]
[,, final, double, stepSize, ), throws, NotPositiveException, ,, NumberIsTooSmallException, {, this, (, nbPoints, ,, stepSize, ,, Double, ., NEGATIVE_INFINITY, ,]
[double, stepSize, ,, final, double, tLower, ,, final, double, tUpper, ), throws, NotPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, if, (]
[double, stepSize, ,, final, double, tLower, ,, final, double, tUpper, ), throws, NotPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, if, (]
[,, final, double, tLower, ,, final, double, tUpper, ), throws, NotPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, if, (, nbPoints, <=]
[,, final, double, tUpper, ), throws, NotPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, if, (, nbPoints, <=, 1, ), {, throw]
[tUpper, ), throws, NotPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, if, (, nbPoints, <=, 1, ), {, throw, new, NumberIsTooSmallException, (]
[throws, NotPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, if, (, nbPoints, <=, 1, ), {, throw, new, NumberIsTooSmallException, (, stepSize, ,]
[,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, if, (, nbPoints, <=, 1, ), {, throw, new, NumberIsTooSmallException, (, stepSize, ,, 1, ,]
[{, if, (, nbPoints, <=, 1, ), {, throw, new, NumberIsTooSmallException, (, stepSize, ,, 1, ,, false, ), ;, }]
[{, if, (, nbPoints, <=, 1, ), {, throw, new, NumberIsTooSmallException, (, stepSize, ,, 1, ,, false, ), ;, }]
[<=, 1, ), {, throw, new, NumberIsTooSmallException, (, stepSize, ,, 1, ,, false, ), ;, }, this, ., nbPoints, =]
[throw, new, NumberIsTooSmallException, (, stepSize, ,, 1, ,, false, ), ;, }, this, ., nbPoints, =, nbPoints, ;, if, (]
[throw, new, NumberIsTooSmallException, (, stepSize, ,, 1, ,, false, ), ;, }, this, ., nbPoints, =, nbPoints, ;, if, (]
[NumberIsTooSmallException, (, stepSize, ,, 1, ,, false, ), ;, }, this, ., nbPoints, =, nbPoints, ;, if, (, stepSize, <=]
[1, ,, false, ), ;, }, this, ., nbPoints, =, nbPoints, ;, if, (, stepSize, <=, 0, ), {, throw]
[), ;, }, this, ., nbPoints, =, nbPoints, ;, if, (, stepSize, <=, 0, ), {, throw, new, NotPositiveException, (]
[., nbPoints, =, nbPoints, ;, if, (, stepSize, <=, 0, ), {, throw, new, NotPositiveException, (, stepSize, ), ;, }]
[., nbPoints, =, nbPoints, ;, if, (, stepSize, <=, 0, ), {, throw, new, NotPositiveException, (, stepSize, ), ;, }]
[;, if, (, stepSize, <=, 0, ), {, throw, new, NotPositiveException, (, stepSize, ), ;, }, this, ., stepSize, =]
[(, stepSize, <=, 0, ), {, throw, new, NotPositiveException, (, stepSize, ), ;, }, this, ., stepSize, =, stepSize, ;]
[<=, 0, ), {, throw, new, NotPositiveException, (, stepSize, ), ;, }, this, ., stepSize, =, stepSize, ;, halfSampleSpan, =]
[<=, 0, ), {, throw, new, NotPositiveException, (, stepSize, ), ;, }, this, ., stepSize, =, stepSize, ;, halfSampleSpan, =]
[<=, 0, ), {, throw, new, NotPositiveException, (, stepSize, ), ;, }, this, ., stepSize, =, stepSize, ;, halfSampleSpan, =]
[), {, throw, new, NotPositiveException, (, stepSize, ), ;, }, this, ., stepSize, =, stepSize, ;, halfSampleSpan, =, 0.5, *]
[throw, new, NotPositiveException, (, stepSize, ), ;, }, this, ., stepSize, =, stepSize, ;, halfSampleSpan, =, 0.5, *, stepSize, *]
[new, NotPositiveException, (, stepSize, ), ;, }, this, ., stepSize, =, stepSize, ;, halfSampleSpan, =, 0.5, *, stepSize, *, (]
[new, NotPositiveException, (, stepSize, ), ;, }, this, ., stepSize, =, stepSize, ;, halfSampleSpan, =, 0.5, *, stepSize, *, (]
[(, stepSize, ), ;, }, this, ., stepSize, =, stepSize, ;, halfSampleSpan, =, 0.5, *, stepSize, *, (, nbPoints, -]
[this, ., stepSize, =, stepSize, ;, halfSampleSpan, =, 0.5, *, stepSize, *, (, nbPoints, -, 1, ), ;, if, (]
[this, ., stepSize, =, stepSize, ;, halfSampleSpan, =, 0.5, *, stepSize, *, (, nbPoints, -, 1, ), ;, if, (]
[this, ., stepSize, =, stepSize, ;, halfSampleSpan, =, 0.5, *, stepSize, *, (, nbPoints, -, 1, ), ;, if, (]
[stepSize, =, stepSize, ;, halfSampleSpan, =, 0.5, *, stepSize, *, (, nbPoints, -, 1, ), ;, if, (, 2, *]
[stepSize, ;, halfSampleSpan, =, 0.5, *, stepSize, *, (, nbPoints, -, 1, ), ;, if, (, 2, *, halfSampleSpan, >=]
[stepSize, ;, halfSampleSpan, =, 0.5, *, stepSize, *, (, nbPoints, -, 1, ), ;, if, (, 2, *, halfSampleSpan, >=]
[halfSampleSpan, =, 0.5, *, stepSize, *, (, nbPoints, -, 1, ), ;, if, (, 2, *, halfSampleSpan, >=, tUpper, -]
[stepSize, *, (, nbPoints, -, 1, ), ;, if, (, 2, *, halfSampleSpan, >=, tUpper, -, tLower, ), {, throw]
[nbPoints, -, 1, ), ;, if, (, 2, *, halfSampleSpan, >=, tUpper, -, tLower, ), {, throw, new, NumberIsTooLargeException, (]
[nbPoints, -, 1, ), ;, if, (, 2, *, halfSampleSpan, >=, tUpper, -, tLower, ), {, throw, new, NumberIsTooLargeException, (]
[1, ), ;, if, (, 2, *, halfSampleSpan, >=, tUpper, -, tLower, ), {, throw, new, NumberIsTooLargeException, (, 2, *]
[;, if, (, 2, *, halfSampleSpan, >=, tUpper, -, tLower, ), {, throw, new, NumberIsTooLargeException, (, 2, *, halfSampleSpan, ,]
[;, if, (, 2, *, halfSampleSpan, >=, tUpper, -, tLower, ), {, throw, new, NumberIsTooLargeException, (, 2, *, halfSampleSpan, ,]
[(, 2, *, halfSampleSpan, >=, tUpper, -, tLower, ), {, throw, new, NumberIsTooLargeException, (, 2, *, halfSampleSpan, ,, tUpper, -]
[*, halfSampleSpan, >=, tUpper, -, tLower, ), {, throw, new, NumberIsTooLargeException, (, 2, *, halfSampleSpan, ,, tUpper, -, tLower, ,]
[throw, new, NumberIsTooLargeException, (, 2, *, halfSampleSpan, ,, tUpper, -, tLower, ,, false, ), ;, }, final, double, safety, =]
[throw, new, NumberIsTooLargeException, (, 2, *, halfSampleSpan, ,, tUpper, -, tLower, ,, false, ), ;, }, final, double, safety, =]
[2, *, halfSampleSpan, ,, tUpper, -, tLower, ,, false, ), ;, }, final, double, safety, =, FastMath, ., ulp, (]
[,, tUpper, -, tLower, ,, false, ), ;, }, final, double, safety, =, FastMath, ., ulp, (, halfSampleSpan, ), ;]
[,, tUpper, -, tLower, ,, false, ), ;, }, final, double, safety, =, FastMath, ., ulp, (, halfSampleSpan, ), ;]
[,, false, ), ;, }, final, double, safety, =, FastMath, ., ulp, (, halfSampleSpan, ), ;, this, ., tMin, =]
[,, false, ), ;, }, final, double, safety, =, FastMath, ., ulp, (, halfSampleSpan, ), ;, this, ., tMin, =]
[,, false, ), ;, }, final, double, safety, =, FastMath, ., ulp, (, halfSampleSpan, ), ;, this, ., tMin, =]
[), ;, }, final, double, safety, =, FastMath, ., ulp, (, halfSampleSpan, ), ;, this, ., tMin, =, tLower, +]
[}, final, double, safety, =, FastMath, ., ulp, (, halfSampleSpan, ), ;, this, ., tMin, =, tLower, +, halfSampleSpan, +]
[double, safety, =, FastMath, ., ulp, (, halfSampleSpan, ), ;, this, ., tMin, =, tLower, +, halfSampleSpan, +, safety, ;]
[double, safety, =, FastMath, ., ulp, (, halfSampleSpan, ), ;, this, ., tMin, =, tLower, +, halfSampleSpan, +, safety, ;]
[., ulp, (, halfSampleSpan, ), ;, this, ., tMin, =, tLower, +, halfSampleSpan, +, safety, ;, this, ., tMax, =]
[., ulp, (, halfSampleSpan, ), ;, this, ., tMin, =, tLower, +, halfSampleSpan, +, safety, ;, this, ., tMax, =]
[., ulp, (, halfSampleSpan, ), ;, this, ., tMin, =, tLower, +, halfSampleSpan, +, safety, ;, this, ., tMax, =]
[(, halfSampleSpan, ), ;, this, ., tMin, =, tLower, +, halfSampleSpan, +, safety, ;, this, ., tMax, =, tUpper, -]
[), ;, this, ., tMin, =, tLower, +, halfSampleSpan, +, safety, ;, this, ., tMax, =, tUpper, -, halfSampleSpan, -]
[safety, ;, this, ., tMax, =, tUpper, -, halfSampleSpan, -, safety, ;, }, public, int, getNbPoints, (, ), {, return]
[safety, ;, }, public, int, getNbPoints, (, ), {, return, nbPoints, ;, }, public, double, getStepSize, (, ), {, return]
[,, final, double, t0, ,, final, double, [, ], y, ), throws, NumberIsTooLargeException, {, final, double, [, ], top, =]
[t0, ,, final, double, [, ], y, ), throws, NumberIsTooLargeException, {, final, double, [, ], top, =, new, double, []
[NumberIsTooLargeException, {, final, double, [, ], top, =, new, double, [, nbPoints, ], ;, final, double, [, ], bottom, =]
[double, [, ], top, =, new, double, [, nbPoints, ], ;, final, double, [, ], bottom, =, new, double, []
[nbPoints, ], ;, final, double, [, ], bottom, =, new, double, [, nbPoints, ], ;, for, (, int, i, =]
[;, final, double, [, ], bottom, =, new, double, [, nbPoints, ], ;, for, (, int, i, =, 0, ;]
[;, final, double, [, ], bottom, =, new, double, [, nbPoints, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], bottom, =, new, double, [, nbPoints, ], ;, for, (, int, i, =, 0, ;, i, <]
[], bottom, =, new, double, [, nbPoints, ], ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;]
[bottom, =, new, double, [, nbPoints, ], ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++]
[double, [, nbPoints, ], ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {]
[double, [, nbPoints, ], ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {]
[nbPoints, ], ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, bottom, []
[for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, bottom, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, bottom, [, i, ], =]
[int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, bottom, [, i, ], =, y, []
[;, ++, i, ), {, bottom, [, i, ], =, y, [, i, ], ;, for, (, int, j, =]
[i, ), {, bottom, [, i, ], =, y, [, i, ], ;, for, (, int, j, =, 1, ;]
[i, ), {, bottom, [, i, ], =, y, [, i, ], ;, for, (, int, j, =, 1, ;]
[{, bottom, [, i, ], =, y, [, i, ], ;, for, (, int, j, =, 1, ;, j, <=]
[[, i, ], =, y, [, i, ], ;, for, (, int, j, =, 1, ;, j, <=, i, ;]
[i, ], =, y, [, i, ], ;, for, (, int, j, =, 1, ;, j, <=, i, ;, ++]
[y, [, i, ], ;, for, (, int, j, =, 1, ;, j, <=, i, ;, ++, j, ), {]
[y, [, i, ], ;, for, (, int, j, =, 1, ;, j, <=, i, ;, ++, j, ), {]
[i, ], ;, for, (, int, j, =, 1, ;, j, <=, i, ;, ++, j, ), {, bottom, []
[i, ], ;, for, (, int, j, =, 1, ;, j, <=, i, ;, ++, j, ), {, bottom, []
[;, for, (, int, j, =, 1, ;, j, <=, i, ;, ++, j, ), {, bottom, [, i, -]
[int, j, =, 1, ;, j, <=, i, ;, ++, j, ), {, bottom, [, i, -, j, ], =]
[int, j, =, 1, ;, j, <=, i, ;, ++, j, ), {, bottom, [, i, -, j, ], =]
[j, =, 1, ;, j, <=, i, ;, ++, j, ), {, bottom, [, i, -, j, ], =, (]
[j, =, 1, ;, j, <=, i, ;, ++, j, ), {, bottom, [, i, -, j, ], =, (]
[j, =, 1, ;, j, <=, i, ;, ++, j, ), {, bottom, [, i, -, j, ], =, (]
[1, ;, j, <=, i, ;, ++, j, ), {, bottom, [, i, -, j, ], =, (, bottom, []
[1, ;, j, <=, i, ;, ++, j, ), {, bottom, [, i, -, j, ], =, (, bottom, []
[1, ;, j, <=, i, ;, ++, j, ), {, bottom, [, i, -, j, ], =, (, bottom, []
[j, <=, i, ;, ++, j, ), {, bottom, [, i, -, j, ], =, (, bottom, [, i, -]
[i, ;, ++, j, ), {, bottom, [, i, -, j, ], =, (, bottom, [, i, -, j, +]
[j, ), {, bottom, [, i, -, j, ], =, (, bottom, [, i, -, j, +, 1, ], -]
[j, ), {, bottom, [, i, -, j, ], =, (, bottom, [, i, -, j, +, 1, ], -]
[{, bottom, [, i, -, j, ], =, (, bottom, [, i, -, j, +, 1, ], -, bottom, []
[{, bottom, [, i, -, j, ], =, (, bottom, [, i, -, j, +, 1, ], -, bottom, []
[[, i, -, j, ], =, (, bottom, [, i, -, j, +, 1, ], -, bottom, [, i, -]
[], =, (, bottom, [, i, -, j, +, 1, ], -, bottom, [, i, -, j, ], ), /]
[=, (, bottom, [, i, -, j, +, 1, ], -, bottom, [, i, -, j, ], ), /, (]
[=, (, bottom, [, i, -, j, +, 1, ], -, bottom, [, i, -, j, ], ), /, (]
[bottom, [, i, -, j, +, 1, ], -, bottom, [, i, -, j, ], ), /, (, j, *]
[j, +, 1, ], -, bottom, [, i, -, j, ], ), /, (, j, *, stepSize, ), ;, }]
[j, +, 1, ], -, bottom, [, i, -, j, ], ), /, (, j, *, stepSize, ), ;, }]
[1, ], -, bottom, [, i, -, j, ], ), /, (, j, *, stepSize, ), ;, }, top, []
[bottom, [, i, -, j, ], ), /, (, j, *, stepSize, ), ;, }, top, [, i, ], =]
[bottom, [, i, -, j, ], ), /, (, j, *, stepSize, ), ;, }, top, [, i, ], =]
[i, -, j, ], ), /, (, j, *, stepSize, ), ;, }, top, [, i, ], =, bottom, []
[*, stepSize, ), ;, }, top, [, i, ], =, bottom, [, 0, ], ;, }, final, int, order, =]
[*, stepSize, ), ;, }, top, [, i, ], =, bottom, [, 0, ], ;, }, final, int, order, =]
[bottom, [, 0, ], ;, }, final, int, order, =, t, ., getOrder, (, ), ;, final, int, parameters, =]
[bottom, [, 0, ], ;, }, final, int, order, =, t, ., getOrder, (, ), ;, final, int, parameters, =]
[getOrder, (, ), ;, final, int, parameters, =, t, ., getFreeParameters, (, ), ;, final, double, [, ], derivatives, =]
[getOrder, (, ), ;, final, int, parameters, =, t, ., getFreeParameters, (, ), ;, final, double, [, ], derivatives, =]
[getFreeParameters, (, ), ;, final, double, [, ], derivatives, =, t, ., getAllDerivatives, (, ), ;, final, double, dt0, =]
[getFreeParameters, (, ), ;, final, double, [, ], derivatives, =, t, ., getAllDerivatives, (, ), ;, final, double, dt0, =]
[getFreeParameters, (, ), ;, final, double, [, ], derivatives, =, t, ., getAllDerivatives, (, ), ;, final, double, dt0, =]
[[, ], derivatives, =, t, ., getAllDerivatives, (, ), ;, final, double, dt0, =, t, ., getValue, (, ), -]
[., getAllDerivatives, (, ), ;, final, double, dt0, =, t, ., getValue, (, ), -, t0, ;, DerivativeStructure, interpolation, =]
[), ;, final, double, dt0, =, t, ., getValue, (, ), -, t0, ;, DerivativeStructure, interpolation, =, new, DerivativeStructure, (]
[final, double, dt0, =, t, ., getValue, (, ), -, t0, ;, DerivativeStructure, interpolation, =, new, DerivativeStructure, (, parameters, ,]
[dt0, =, t, ., getValue, (, ), -, t0, ;, DerivativeStructure, interpolation, =, new, DerivativeStructure, (, parameters, ,, order, ,]
[), -, t0, ;, DerivativeStructure, interpolation, =, new, DerivativeStructure, (, parameters, ,, order, ,, 0.0, ), ;, DerivativeStructure, monomial, =]
[new, DerivativeStructure, (, parameters, ,, order, ,, 0.0, ), ;, DerivativeStructure, monomial, =, null, ;, for, (, int, i, =]
[(, parameters, ,, order, ,, 0.0, ), ;, DerivativeStructure, monomial, =, null, ;, for, (, int, i, =, 0, ;]
[(, parameters, ,, order, ,, 0.0, ), ;, DerivativeStructure, monomial, =, null, ;, for, (, int, i, =, 0, ;]
[,, order, ,, 0.0, ), ;, DerivativeStructure, monomial, =, null, ;, for, (, int, i, =, 0, ;, i, <]
[,, 0.0, ), ;, DerivativeStructure, monomial, =, null, ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;]
[0.0, ), ;, DerivativeStructure, monomial, =, null, ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++]
[=, null, ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, if, (]
[=, null, ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, if, (, i, ==]
[int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, if, (, i, ==, 0, ), {]
[=, 0, ;, i, <, nbPoints, ;, ++, i, ), {, if, (, i, ==, 0, ), {, monomial, =]
[i, <, nbPoints, ;, ++, i, ), {, if, (, i, ==, 0, ), {, monomial, =, new, DerivativeStructure, (]
[nbPoints, ;, ++, i, ), {, if, (, i, ==, 0, ), {, monomial, =, new, DerivativeStructure, (, parameters, ,]
[++, i, ), {, if, (, i, ==, 0, ), {, monomial, =, new, DerivativeStructure, (, parameters, ,, order, ,]
[i, ==, 0, ), {, monomial, =, new, DerivativeStructure, (, parameters, ,, order, ,, 1.0, ), ;, }, else, {]
[i, ==, 0, ), {, monomial, =, new, DerivativeStructure, (, parameters, ,, order, ,, 1.0, ), ;, }, else, {]
[0, ), {, monomial, =, new, DerivativeStructure, (, parameters, ,, order, ,, 1.0, ), ;, }, else, {, derivatives, []
[monomial, =, new, DerivativeStructure, (, parameters, ,, order, ,, 1.0, ), ;, }, else, {, derivatives, [, 0, ], =]
[monomial, =, new, DerivativeStructure, (, parameters, ,, order, ,, 1.0, ), ;, }, else, {, derivatives, [, 0, ], =]
[new, DerivativeStructure, (, parameters, ,, order, ,, 1.0, ), ;, }, else, {, derivatives, [, 0, ], =, dt0, -]
[new, DerivativeStructure, (, parameters, ,, order, ,, 1.0, ), ;, }, else, {, derivatives, [, 0, ], =, dt0, -]
[DerivativeStructure, (, parameters, ,, order, ,, 1.0, ), ;, }, else, {, derivatives, [, 0, ], =, dt0, -, (]
[DerivativeStructure, (, parameters, ,, order, ,, 1.0, ), ;, }, else, {, derivatives, [, 0, ], =, dt0, -, (]
[parameters, ,, order, ,, 1.0, ), ;, }, else, {, derivatives, [, 0, ], =, dt0, -, (, i, -]
[,, 1.0, ), ;, }, else, {, derivatives, [, 0, ], =, dt0, -, (, i, -, 1, ), *]
[{, derivatives, [, 0, ], =, dt0, -, (, i, -, 1, ), *, stepSize, ;, final, DerivativeStructure, deltaX, =]
[0, ], =, dt0, -, (, i, -, 1, ), *, stepSize, ;, final, DerivativeStructure, deltaX, =, new, DerivativeStructure, (]
[=, dt0, -, (, i, -, 1, ), *, stepSize, ;, final, DerivativeStructure, deltaX, =, new, DerivativeStructure, (, parameters, ,]
[-, (, i, -, 1, ), *, stepSize, ;, final, DerivativeStructure, deltaX, =, new, DerivativeStructure, (, parameters, ,, order, ,]
[-, 1, ), *, stepSize, ;, final, DerivativeStructure, deltaX, =, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;]
[), *, stepSize, ;, final, DerivativeStructure, deltaX, =, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, monomial, =]
[), *, stepSize, ;, final, DerivativeStructure, deltaX, =, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, monomial, =]
[final, DerivativeStructure, deltaX, =, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, monomial, =, monomial, ., multiply, (]
[new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, monomial, =, monomial, ., multiply, (, deltaX, ), ;, }]
[(, parameters, ,, order, ,, derivatives, ), ;, monomial, =, monomial, ., multiply, (, deltaX, ), ;, }, interpolation, =]
[(, parameters, ,, order, ,, derivatives, ), ;, monomial, =, monomial, ., multiply, (, deltaX, ), ;, }, interpolation, =]
[,, derivatives, ), ;, monomial, =, monomial, ., multiply, (, deltaX, ), ;, }, interpolation, =, interpolation, ., add, (]
[,, derivatives, ), ;, monomial, =, monomial, ., multiply, (, deltaX, ), ;, }, interpolation, =, interpolation, ., add, (]
[monomial, =, monomial, ., multiply, (, deltaX, ), ;, }, interpolation, =, interpolation, ., add, (, monomial, ., multiply, (]
[monomial, =, monomial, ., multiply, (, deltaX, ), ;, }, interpolation, =, interpolation, ., add, (, monomial, ., multiply, (]
[monomial, ., multiply, (, deltaX, ), ;, }, interpolation, =, interpolation, ., add, (, monomial, ., multiply, (, top, []
[}, interpolation, =, interpolation, ., add, (, monomial, ., multiply, (, top, [, i, ], ), ), ;, }, return]
[i, ], ), ), ;, }, return, interpolation, ;, }, public, UnivariateDifferentiableFunction, differentiate, (, final, UnivariateFunction, function, ), {, return]
[), {, return, new, UnivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, x, ), throws, MathIllegalArgumentException, {, return]
[), {, return, new, UnivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, x, ), throws, MathIllegalArgumentException, {, return]
[UnivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, x, ), throws, MathIllegalArgumentException, {, return, function, ., value, (]
[., value, (, x, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (]
[., value, (, x, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (]
[., value, (, x, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (]
[}, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (, t, ., getOrder, (, ), >=]
[(, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (, t, ., getOrder, (, ), >=, nbPoints, ), {, throw]
[t, ), throws, MathIllegalArgumentException, {, if, (, t, ., getOrder, (, ), >=, nbPoints, ), {, throw, new, NumberIsTooLargeException, (]
[t, ), throws, MathIllegalArgumentException, {, if, (, t, ., getOrder, (, ), >=, nbPoints, ), {, throw, new, NumberIsTooLargeException, (]
[(, t, ., getOrder, (, ), >=, nbPoints, ), {, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,]
[., getOrder, (, ), >=, nbPoints, ), {, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,]
[throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =]
[throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =]
[throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =]
[t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (]
[t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (]
[), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (]
[), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (]
[;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,]
[double, t0, =, FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,, tMax, ), ,]
[FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,, tMax, ), ,, tMin, ), -]
[t, ., getValue, (, ), ,, tMax, ), ,, tMin, ), -, halfSampleSpan, ;, final, double, [, ], y, =]
[(, ), ,, tMax, ), ,, tMin, ), -, halfSampleSpan, ;, final, double, [, ], y, =, new, double, []
[-, halfSampleSpan, ;, final, double, [, ], y, =, new, double, [, nbPoints, ], ;, for, (, int, i, =]
[;, final, double, [, ], y, =, new, double, [, nbPoints, ], ;, for, (, int, i, =, 0, ;]
[;, final, double, [, ], y, =, new, double, [, nbPoints, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], y, =, new, double, [, nbPoints, ], ;, for, (, int, i, =, 0, ;, i, <]
[], y, =, new, double, [, nbPoints, ], ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;]
[y, =, new, double, [, nbPoints, ], ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++]
[double, [, nbPoints, ], ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {]
[double, [, nbPoints, ], ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {]
[nbPoints, ], ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, y, []
[for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, y, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, y, [, i, ], =]
[=, 0, ;, i, <, nbPoints, ;, ++, i, ), {, y, [, i, ], =, function, ., value, (]
[=, 0, ;, i, <, nbPoints, ;, ++, i, ), {, y, [, i, ], =, function, ., value, (]
[;, i, <, nbPoints, ;, ++, i, ), {, y, [, i, ], =, function, ., value, (, t0, +]
[;, i, <, nbPoints, ;, ++, i, ), {, y, [, i, ], =, function, ., value, (, t0, +]
[<, nbPoints, ;, ++, i, ), {, y, [, i, ], =, function, ., value, (, t0, +, i, *]
[), {, y, [, i, ], =, function, ., value, (, t0, +, i, *, stepSize, ), ;, }, return]
[y, [, i, ], =, function, ., value, (, t0, +, i, *, stepSize, ), ;, }, return, evaluate, (]
[i, ], =, function, ., value, (, t0, +, i, *, stepSize, ), ;, }, return, evaluate, (, t, ,]
[=, function, ., value, (, t0, +, i, *, stepSize, ), ;, }, return, evaluate, (, t, ,, t0, ,]
[,, t0, ,, y, ), ;, }, }, ;, }, public, UnivariateDifferentiableVectorFunction, differentiate, (, final, UnivariateVectorFunction, function, ), {, return]
[return, new, UnivariateDifferentiableVectorFunction, (, ), {, public, double, [, ], value, (, final, double, x, ), throws, MathIllegalArgumentException, {, return]
[return, new, UnivariateDifferentiableVectorFunction, (, ), {, public, double, [, ], value, (, final, double, x, ), throws, MathIllegalArgumentException, {, return]
[), {, public, double, [, ], value, (, final, double, x, ), throws, MathIllegalArgumentException, {, return, function, ., value, (]
[(, x, ), ;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (]
[(, x, ), ;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (]
[(, x, ), ;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (]
[DerivativeStructure, [, ], value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (, t, ., getOrder, (, ), >=]
[(, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (, t, ., getOrder, (, ), >=, nbPoints, ), {, throw]
[t, ), throws, MathIllegalArgumentException, {, if, (, t, ., getOrder, (, ), >=, nbPoints, ), {, throw, new, NumberIsTooLargeException, (]
[t, ), throws, MathIllegalArgumentException, {, if, (, t, ., getOrder, (, ), >=, nbPoints, ), {, throw, new, NumberIsTooLargeException, (]
[(, t, ., getOrder, (, ), >=, nbPoints, ), {, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,]
[., getOrder, (, ), >=, nbPoints, ), {, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,]
[throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =]
[throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =]
[throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =]
[t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (]
[t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (]
[), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (]
[), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (]
[;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,]
[double, t0, =, FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,, tMax, ), ,]
[FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,, tMax, ), ,, tMin, ), -]
[., getValue, (, ), ,, tMax, ), ,, tMin, ), -, halfSampleSpan, ;, double, [, ], [, ], y, =]
[,, tMin, ), -, halfSampleSpan, ;, double, [, ], [, ], y, =, null, ;, for, (, int, i, =]
[), -, halfSampleSpan, ;, double, [, ], [, ], y, =, null, ;, for, (, int, i, =, 0, ;]
[), -, halfSampleSpan, ;, double, [, ], [, ], y, =, null, ;, for, (, int, i, =, 0, ;]
[halfSampleSpan, ;, double, [, ], [, ], y, =, null, ;, for, (, int, i, =, 0, ;, i, <]
[double, [, ], [, ], y, =, null, ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;]
[[, ], [, ], y, =, null, ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++]
[(, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, final, double, [, ], v, =]
[(, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, final, double, [, ], v, =]
[0, ;, i, <, nbPoints, ;, ++, i, ), {, final, double, [, ], v, =, function, ., value, (]
[0, ;, i, <, nbPoints, ;, ++, i, ), {, final, double, [, ], v, =, function, ., value, (]
[i, <, nbPoints, ;, ++, i, ), {, final, double, [, ], v, =, function, ., value, (, t0, +]
[i, <, nbPoints, ;, ++, i, ), {, final, double, [, ], v, =, function, ., value, (, t0, +]
[nbPoints, ;, ++, i, ), {, final, double, [, ], v, =, function, ., value, (, t0, +, i, *]
[{, final, double, [, ], v, =, function, ., value, (, t0, +, i, *, stepSize, ), ;, if, (]
[{, final, double, [, ], v, =, function, ., value, (, t0, +, i, *, stepSize, ), ;, if, (]
[double, [, ], v, =, function, ., value, (, t0, +, i, *, stepSize, ), ;, if, (, i, ==]
[v, =, function, ., value, (, t0, +, i, *, stepSize, ), ;, if, (, i, ==, 0, ), {]
[function, ., value, (, t0, +, i, *, stepSize, ), ;, if, (, i, ==, 0, ), {, y, =]
[(, t0, +, i, *, stepSize, ), ;, if, (, i, ==, 0, ), {, y, =, new, double, []
[(, t0, +, i, *, stepSize, ), ;, if, (, i, ==, 0, ), {, y, =, new, double, []
[stepSize, ), ;, if, (, i, ==, 0, ), {, y, =, new, double, [, v, ., length, ], []
[{, y, =, new, double, [, v, ., length, ], [, nbPoints, ], ;, }, for, (, int, j, =]
[=, new, double, [, v, ., length, ], [, nbPoints, ], ;, }, for, (, int, j, =, 0, ;]
[=, new, double, [, v, ., length, ], [, nbPoints, ], ;, }, for, (, int, j, =, 0, ;]
[double, [, v, ., length, ], [, nbPoints, ], ;, }, for, (, int, j, =, 0, ;, j, <]
[double, [, v, ., length, ], [, nbPoints, ], ;, }, for, (, int, j, =, 0, ;, j, <]
[length, ], [, nbPoints, ], ;, }, for, (, int, j, =, 0, ;, j, <, v, ., length, ;]
[], [, nbPoints, ], ;, }, for, (, int, j, =, 0, ;, j, <, v, ., length, ;, ++]
[], ;, }, for, (, int, j, =, 0, ;, j, <, v, ., length, ;, ++, j, ), {]
[], ;, }, for, (, int, j, =, 0, ;, j, <, v, ., length, ;, ++, j, ), {]
[], ;, }, for, (, int, j, =, 0, ;, j, <, v, ., length, ;, ++, j, ), {]
[}, for, (, int, j, =, 0, ;, j, <, v, ., length, ;, ++, j, ), {, y, []
[int, j, =, 0, ;, j, <, v, ., length, ;, ++, j, ), {, y, [, j, ], []
[0, ;, j, <, v, ., length, ;, ++, j, ), {, y, [, j, ], [, i, ], =]
[0, ;, j, <, v, ., length, ;, ++, j, ), {, y, [, j, ], [, i, ], =]
[j, <, v, ., length, ;, ++, j, ), {, y, [, j, ], [, i, ], =, v, []
[[, j, ], [, i, ], =, v, [, j, ], ;, }, }, final, DerivativeStructure, [, ], value, =]
[[, i, ], =, v, [, j, ], ;, }, }, final, DerivativeStructure, [, ], value, =, new, DerivativeStructure, []
[[, i, ], =, v, [, j, ], ;, }, }, final, DerivativeStructure, [, ], value, =, new, DerivativeStructure, []
[}, final, DerivativeStructure, [, ], value, =, new, DerivativeStructure, [, y, ., length, ], ;, for, (, int, j, =]
[DerivativeStructure, [, ], value, =, new, DerivativeStructure, [, y, ., length, ], ;, for, (, int, j, =, 0, ;]
[DerivativeStructure, [, ], value, =, new, DerivativeStructure, [, y, ., length, ], ;, for, (, int, j, =, 0, ;]
[], value, =, new, DerivativeStructure, [, y, ., length, ], ;, for, (, int, j, =, 0, ;, j, <]
[], value, =, new, DerivativeStructure, [, y, ., length, ], ;, for, (, int, j, =, 0, ;, j, <]
[DerivativeStructure, [, y, ., length, ], ;, for, (, int, j, =, 0, ;, j, <, value, ., length, ;]
[[, y, ., length, ], ;, for, (, int, j, =, 0, ;, j, <, value, ., length, ;, ++]
[length, ], ;, for, (, int, j, =, 0, ;, j, <, value, ., length, ;, ++, j, ), {]
[length, ], ;, for, (, int, j, =, 0, ;, j, <, value, ., length, ;, ++, j, ), {]
[;, for, (, int, j, =, 0, ;, j, <, value, ., length, ;, ++, j, ), {, value, []
[int, j, =, 0, ;, j, <, value, ., length, ;, ++, j, ), {, value, [, j, ], =]
[=, 0, ;, j, <, value, ., length, ;, ++, j, ), {, value, [, j, ], =, evaluate, (]
[;, j, <, value, ., length, ;, ++, j, ), {, value, [, j, ], =, evaluate, (, t, ,]
[<, value, ., length, ;, ++, j, ), {, value, [, j, ], =, evaluate, (, t, ,, t0, ,]
[<, value, ., length, ;, ++, j, ), {, value, [, j, ], =, evaluate, (, t, ,, t0, ,]
[., length, ;, ++, j, ), {, value, [, j, ], =, evaluate, (, t, ,, t0, ,, y, []
[{, value, [, j, ], =, evaluate, (, t, ,, t0, ,, y, [, j, ], ), ;, }, return]
[), ;, }, return, value, ;, }, }, ;, }, public, UnivariateDifferentiableMatrixFunction, differentiate, (, final, UnivariateMatrixFunction, function, ), {, return]
[UnivariateDifferentiableMatrixFunction, (, ), {, public, double, [, ], [, ], value, (, final, double, x, ), throws, MathIllegalArgumentException, {, return]
[UnivariateDifferentiableMatrixFunction, (, ), {, public, double, [, ], [, ], value, (, final, double, x, ), throws, MathIllegalArgumentException, {, return]
[public, double, [, ], [, ], value, (, final, double, x, ), throws, MathIllegalArgumentException, {, return, function, ., value, (]
[), ;, }, public, DerivativeStructure, [, ], [, ], value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (]
[), ;, }, public, DerivativeStructure, [, ], [, ], value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (]
[), ;, }, public, DerivativeStructure, [, ], [, ], value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (]
[], [, ], value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (, t, ., getOrder, (, ), >=]
[(, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (, t, ., getOrder, (, ), >=, nbPoints, ), {, throw]
[t, ), throws, MathIllegalArgumentException, {, if, (, t, ., getOrder, (, ), >=, nbPoints, ), {, throw, new, NumberIsTooLargeException, (]
[t, ), throws, MathIllegalArgumentException, {, if, (, t, ., getOrder, (, ), >=, nbPoints, ), {, throw, new, NumberIsTooLargeException, (]
[(, t, ., getOrder, (, ), >=, nbPoints, ), {, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,]
[., getOrder, (, ), >=, nbPoints, ), {, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,]
[throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =]
[throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =]
[throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =]
[t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (]
[t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (]
[), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (]
[), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (]
[;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,]
[double, t0, =, FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,, tMax, ), ,]
[FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,, tMax, ), ,, tMin, ), -]
[(, ), ,, tMax, ), ,, tMin, ), -, halfSampleSpan, ;, double, [, ], [, ], [, ], y, =]
[), -, halfSampleSpan, ;, double, [, ], [, ], [, ], y, =, null, ;, for, (, int, i, =]
[halfSampleSpan, ;, double, [, ], [, ], [, ], y, =, null, ;, for, (, int, i, =, 0, ;]
[halfSampleSpan, ;, double, [, ], [, ], [, ], y, =, null, ;, for, (, int, i, =, 0, ;]
[double, [, ], [, ], [, ], y, =, null, ;, for, (, int, i, =, 0, ;, i, <]
[], [, ], [, ], y, =, null, ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;]
[[, ], [, ], y, =, null, ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++]
[i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, final, double, [, ], [, ], v, =]
[i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, final, double, [, ], [, ], v, =]
[i, <, nbPoints, ;, ++, i, ), {, final, double, [, ], [, ], v, =, function, ., value, (]
[i, <, nbPoints, ;, ++, i, ), {, final, double, [, ], [, ], v, =, function, ., value, (]
[nbPoints, ;, ++, i, ), {, final, double, [, ], [, ], v, =, function, ., value, (, t0, +]
[nbPoints, ;, ++, i, ), {, final, double, [, ], [, ], v, =, function, ., value, (, t0, +]
[++, i, ), {, final, double, [, ], [, ], v, =, function, ., value, (, t0, +, i, *]
[double, [, ], [, ], v, =, function, ., value, (, t0, +, i, *, stepSize, ), ;, if, (]
[double, [, ], [, ], v, =, function, ., value, (, t0, +, i, *, stepSize, ), ;, if, (]
[], [, ], v, =, function, ., value, (, t0, +, i, *, stepSize, ), ;, if, (, i, ==]
[v, =, function, ., value, (, t0, +, i, *, stepSize, ), ;, if, (, i, ==, 0, ), {]
[function, ., value, (, t0, +, i, *, stepSize, ), ;, if, (, i, ==, 0, ), {, y, =]
[(, t0, +, i, *, stepSize, ), ;, if, (, i, ==, 0, ), {, y, =, new, double, []
[(, t0, +, i, *, stepSize, ), ;, if, (, i, ==, 0, ), {, y, =, new, double, []
[stepSize, ), ;, if, (, i, ==, 0, ), {, y, =, new, double, [, v, ., length, ], []
[stepSize, ), ;, if, (, i, ==, 0, ), {, y, =, new, double, [, v, ., length, ], []
[stepSize, ), ;, if, (, i, ==, 0, ), {, y, =, new, double, [, v, ., length, ], []
[;, if, (, i, ==, 0, ), {, y, =, new, double, [, v, ., length, ], [, v, []
[), {, y, =, new, double, [, v, ., length, ], [, v, [, 0, ], ., length, ], []
[length, ], [, v, [, 0, ], ., length, ], [, nbPoints, ], ;, }, for, (, int, j, =]
[[, v, [, 0, ], ., length, ], [, nbPoints, ], ;, }, for, (, int, j, =, 0, ;]
[[, v, [, 0, ], ., length, ], [, nbPoints, ], ;, }, for, (, int, j, =, 0, ;]
[[, 0, ], ., length, ], [, nbPoints, ], ;, }, for, (, int, j, =, 0, ;, j, <]
[[, 0, ], ., length, ], [, nbPoints, ], ;, }, for, (, int, j, =, 0, ;, j, <]
[length, ], [, nbPoints, ], ;, }, for, (, int, j, =, 0, ;, j, <, v, ., length, ;]
[], [, nbPoints, ], ;, }, for, (, int, j, =, 0, ;, j, <, v, ., length, ;, ++]
[int, j, =, 0, ;, j, <, v, ., length, ;, ++, j, ), {, for, (, int, k, =]
[=, 0, ;, j, <, v, ., length, ;, ++, j, ), {, for, (, int, k, =, 0, ;]
[=, 0, ;, j, <, v, ., length, ;, ++, j, ), {, for, (, int, k, =, 0, ;]
[;, j, <, v, ., length, ;, ++, j, ), {, for, (, int, k, =, 0, ;, k, <]
[;, j, <, v, ., length, ;, ++, j, ), {, for, (, int, k, =, 0, ;, k, <]
[;, j, <, v, ., length, ;, ++, j, ), {, for, (, int, k, =, 0, ;, k, <]
[<, v, ., length, ;, ++, j, ), {, for, (, int, k, =, 0, ;, k, <, v, []
[++, j, ), {, for, (, int, k, =, 0, ;, k, <, v, [, j, ], ., length, ;]
[j, ), {, for, (, int, k, =, 0, ;, k, <, v, [, j, ], ., length, ;, ++]
[for, (, int, k, =, 0, ;, k, <, v, [, j, ], ., length, ;, ++, k, ), {]
[for, (, int, k, =, 0, ;, k, <, v, [, j, ], ., length, ;, ++, k, ), {]
[for, (, int, k, =, 0, ;, k, <, v, [, j, ], ., length, ;, ++, k, ), {]
[for, (, int, k, =, 0, ;, k, <, v, [, j, ], ., length, ;, ++, k, ), {]
[int, k, =, 0, ;, k, <, v, [, j, ], ., length, ;, ++, k, ), {, y, []
[0, ;, k, <, v, [, j, ], ., length, ;, ++, k, ), {, y, [, j, ], []
[<, v, [, j, ], ., length, ;, ++, k, ), {, y, [, j, ], [, k, ], []
[j, ], ., length, ;, ++, k, ), {, y, [, j, ], [, k, ], [, i, ], =]
[j, ], ., length, ;, ++, k, ), {, y, [, j, ], [, k, ], [, i, ], =]
[j, ], ., length, ;, ++, k, ), {, y, [, j, ], [, k, ], [, i, ], =]
[., length, ;, ++, k, ), {, y, [, j, ], [, k, ], [, i, ], =, v, []
[++, k, ), {, y, [, j, ], [, k, ], [, i, ], =, v, [, j, ], []
[=, v, [, j, ], [, k, ], ;, }, }, }, final, DerivativeStructure, [, ], [, ], value, =]
[j, ], [, k, ], ;, }, }, }, final, DerivativeStructure, [, ], [, ], value, =, new, DerivativeStructure, []
[j, ], [, k, ], ;, }, }, }, final, DerivativeStructure, [, ], [, ], value, =, new, DerivativeStructure, []
[;, }, }, }, final, DerivativeStructure, [, ], [, ], value, =, new, DerivativeStructure, [, y, ., length, ], []
[;, }, }, }, final, DerivativeStructure, [, ], [, ], value, =, new, DerivativeStructure, [, y, ., length, ], []
[;, }, }, }, final, DerivativeStructure, [, ], [, ], value, =, new, DerivativeStructure, [, y, ., length, ], []
[}, }, final, DerivativeStructure, [, ], [, ], value, =, new, DerivativeStructure, [, y, ., length, ], [, y, []
[DerivativeStructure, [, y, ., length, ], [, y, [, 0, ], ., length, ], ;, for, (, int, j, =]
[y, ., length, ], [, y, [, 0, ], ., length, ], ;, for, (, int, j, =, 0, ;]
[y, ., length, ], [, y, [, 0, ], ., length, ], ;, for, (, int, j, =, 0, ;]
[length, ], [, y, [, 0, ], ., length, ], ;, for, (, int, j, =, 0, ;, j, <]
[length, ], [, y, [, 0, ], ., length, ], ;, for, (, int, j, =, 0, ;, j, <]
[[, 0, ], ., length, ], ;, for, (, int, j, =, 0, ;, j, <, value, ., length, ;]
[0, ], ., length, ], ;, for, (, int, j, =, 0, ;, j, <, value, ., length, ;, ++]
[int, j, =, 0, ;, j, <, value, ., length, ;, ++, j, ), {, for, (, int, k, =]
[=, 0, ;, j, <, value, ., length, ;, ++, j, ), {, for, (, int, k, =, 0, ;]
[=, 0, ;, j, <, value, ., length, ;, ++, j, ), {, for, (, int, k, =, 0, ;]
[;, j, <, value, ., length, ;, ++, j, ), {, for, (, int, k, =, 0, ;, k, <]
[;, j, <, value, ., length, ;, ++, j, ), {, for, (, int, k, =, 0, ;, k, <]
[;, j, <, value, ., length, ;, ++, j, ), {, for, (, int, k, =, 0, ;, k, <]
[<, value, ., length, ;, ++, j, ), {, for, (, int, k, =, 0, ;, k, <, y, []
[++, j, ), {, for, (, int, k, =, 0, ;, k, <, y, [, j, ], ., length, ;]
[j, ), {, for, (, int, k, =, 0, ;, k, <, y, [, j, ], ., length, ;, ++]
[for, (, int, k, =, 0, ;, k, <, y, [, j, ], ., length, ;, ++, k, ), {]
[for, (, int, k, =, 0, ;, k, <, y, [, j, ], ., length, ;, ++, k, ), {]
[for, (, int, k, =, 0, ;, k, <, y, [, j, ], ., length, ;, ++, k, ), {]
[int, k, =, 0, ;, k, <, y, [, j, ], ., length, ;, ++, k, ), {, value, []
[0, ;, k, <, y, [, j, ], ., length, ;, ++, k, ), {, value, [, j, ], []
[<, y, [, j, ], ., length, ;, ++, k, ), {, value, [, j, ], [, k, ], =]
[[, j, ], ., length, ;, ++, k, ), {, value, [, j, ], [, k, ], =, evaluate, (]
[], ., length, ;, ++, k, ), {, value, [, j, ], [, k, ], =, evaluate, (, t, ,]
[length, ;, ++, k, ), {, value, [, j, ], [, k, ], =, evaluate, (, t, ,, t0, ,]
[length, ;, ++, k, ), {, value, [, j, ], [, k, ], =, evaluate, (, t, ,, t0, ,]
[length, ;, ++, k, ), {, value, [, j, ], [, k, ], =, evaluate, (, t, ,, t0, ,]
[++, k, ), {, value, [, j, ], [, k, ], =, evaluate, (, t, ,, t0, ,, y, []
[{, value, [, j, ], [, k, ], =, evaluate, (, t, ,, t0, ,, y, [, j, ], []
[], =, evaluate, (, t, ,, t0, ,, y, [, j, ], [, k, ], ), ;, }, }, return]
