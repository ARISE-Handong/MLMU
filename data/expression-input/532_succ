[;, @, Override, public, int, translate, (, final, CharSequence, input, ,, final, int, index, ,, final, Writer, out, ), throws]
[), {, final, int, start, =, index, +, 1, ;, int, end, =, index, +, 2, ;, while, (, end]
[&&, Character, ., isDigit, (, input, ., charAt, (, index, +, 1, ), ), ), {, final, int, start, =]
[&&, index, <, (, input, ., length, (, ), -, 1, ), &&, Character, ., isDigit, (, input, ., charAt]
[==, '\\', &&, index, <, (, input, ., length, (, ), -, 1, ), &&, Character, ., isDigit, (, input]
[., charAt, (, index, ), ==, '\\', &&, index, <, (, input, ., length, (, ), -, 1, ), &&]
[), ==, '\\', &&, index, <, (, input, ., length, (, ), -, 1, ), &&, Character, ., isDigit, (]
[&&, index, <, (, input, ., length, (, ), -, 1, ), &&, Character, ., isDigit, (, input, ., charAt]
[&&, Character, ., isDigit, (, input, ., charAt, (, index, +, 1, ), ), ), {, final, int, start, =]
[<, (, input, ., length, (, ), -, 1, ), &&, Character, ., isDigit, (, input, ., charAt, (, index]
[&&, Character, ., isDigit, (, input, ., charAt, (, index, +, 1, ), ), ), {, final, int, start, =]
[), &&, Character, ., isDigit, (, input, ., charAt, (, index, +, 1, ), ), ), {, final, int, start]
[-, 1, ), &&, Character, ., isDigit, (, input, ., charAt, (, index, +, 1, ), ), ), {, final]
[., length, (, ), -, 1, ), &&, Character, ., isDigit, (, input, ., charAt, (, index, +, 1, )]
[), &&, Character, ., isDigit, (, input, ., charAt, (, index, +, 1, ), ), ), {, final, int, start]
[), {, final, int, start, =, index, +, 1, ;, int, end, =, index, +, 2, ;, while, (, end]
[., isDigit, (, input, ., charAt, (, index, +, 1, ), ), ), {, final, int, start, =, index, +]
[), ), {, final, int, start, =, index, +, 1, ;, int, end, =, index, +, 2, ;, while, (]
[., charAt, (, index, +, 1, ), ), ), {, final, int, start, =, index, +, 1, ;, int, end]
[), ), ), {, final, int, start, =, index, +, 1, ;, int, end, =, index, +, 2, ;, while]
[+, 1, ), ), ), {, final, int, start, =, index, +, 1, ;, int, end, =, index, +, 2]
[), ), ), {, final, int, start, =, index, +, 1, ;, int, end, =, index, +, 2, ;, while]
[;, int, end, =, index, +, 2, ;, while, (, end, <, input, ., length, (, ), &&, Character, .]
[+, 1, ;, int, end, =, index, +, 2, ;, while, (, end, <, input, ., length, (, ), &&]
[;, int, end, =, index, +, 2, ;, while, (, end, <, input, ., length, (, ), &&, Character, .]
[;, while, (, end, <, input, ., length, (, ), &&, Character, ., isDigit, (, input, ., charAt, (, end]
[+, 2, ;, while, (, end, <, input, ., length, (, ), &&, Character, ., isDigit, (, input, ., charAt]
[;, while, (, end, <, input, ., length, (, ), &&, Character, ., isDigit, (, input, ., charAt, (, end]
[), {, end, ++, ;, if, (, Integer, ., parseInt, (, input, ., subSequence, (, start, ,, end, ), .]
[&&, Character, ., isDigit, (, input, ., charAt, (, end, ), ), ), {, end, ++, ;, if, (, Integer]
[<, input, ., length, (, ), &&, Character, ., isDigit, (, input, ., charAt, (, end, ), ), ), {]
[&&, Character, ., isDigit, (, input, ., charAt, (, end, ), ), ), {, end, ++, ;, if, (, Integer]
[., length, (, ), &&, Character, ., isDigit, (, input, ., charAt, (, end, ), ), ), {, end, ++]
[), {, end, ++, ;, if, (, Integer, ., parseInt, (, input, ., subSequence, (, start, ,, end, ), .]
[., isDigit, (, input, ., charAt, (, end, ), ), ), {, end, ++, ;, if, (, Integer, ., parseInt]
[), ), {, end, ++, ;, if, (, Integer, ., parseInt, (, input, ., subSequence, (, start, ,, end, )]
[., charAt, (, end, ), ), ), {, end, ++, ;, if, (, Integer, ., parseInt, (, input, ., subSequence]
[), ), ), {, end, ++, ;, if, (, Integer, ., parseInt, (, input, ., subSequence, (, start, ,, end]
[;, if, (, Integer, ., parseInt, (, input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,]
[++, ;, if, (, Integer, ., parseInt, (, input, ., subSequence, (, start, ,, end, ), ., toString, (, )]
[), {, end, --, ;, break, ;, }, }, out, ., write, (, Integer, ., parseInt, (, input, ., subSequence]
[>, OCTAL_MAX, ), {, end, --, ;, break, ;, }, }, out, ., write, (, Integer, ., parseInt, (, input]
[., parseInt, (, input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 10, ), >, OCTAL_MAX]
[,, 10, ), >, OCTAL_MAX, ), {, end, --, ;, break, ;, }, }, out, ., write, (, Integer, .]
[., toString, (, ), ,, 10, ), >, OCTAL_MAX, ), {, end, --, ;, break, ;, }, }, out, .]
[., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 10, ), >, OCTAL_MAX, ), {, end, --]
[,, end, ), ., toString, (, ), ,, 10, ), >, OCTAL_MAX, ), {, end, --, ;, break, ;, }]
[), ., toString, (, ), ,, 10, ), >, OCTAL_MAX, ), {, end, --, ;, break, ;, }, }, out]
[), >, OCTAL_MAX, ), {, end, --, ;, break, ;, }, }, out, ., write, (, Integer, ., parseInt, (]
[), {, end, --, ;, break, ;, }, }, out, ., write, (, Integer, ., parseInt, (, input, ., subSequence]
[;, break, ;, }, }, out, ., write, (, Integer, ., parseInt, (, input, ., subSequence, (, start, ,, end]
[--, ;, break, ;, }, }, out, ., write, (, Integer, ., parseInt, (, input, ., subSequence, (, start, ,]
[;, return, 1, +, end, -, start, ;, }, return, 0, ;, }, }]
[., write, (, Integer, ., parseInt, (, input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,]
[), ;, return, 1, +, end, -, start, ;, }, return, 0, ;, }, }]
[., parseInt, (, input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 8, ), ), ;]
[,, 8, ), ), ;, return, 1, +, end, -, start, ;, }, return, 0, ;, }, }]
[., toString, (, ), ,, 8, ), ), ;, return, 1, +, end, -, start, ;, }, return, 0, ;]
[., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 8, ), ), ;, return, 1, +, end]
[,, end, ), ., toString, (, ), ,, 8, ), ), ;, return, 1, +, end, -, start, ;, }]
[), ., toString, (, ), ,, 8, ), ), ;, return, 1, +, end, -, start, ;, }, return, 0]
[), ), ;, return, 1, +, end, -, start, ;, }, return, 0, ;, }, }]
[;, }, return, 0, ;, }, }]
[-, start, ;, }, return, 0, ;, }, }]
[+, end, -, start, ;, }, return, 0, ;, }, }]
[-, start, ;, }, return, 0, ;, }, }]
[;, }, return, 0, ;, }, }]
[;, }, }]
