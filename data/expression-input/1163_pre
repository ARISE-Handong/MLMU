[., Map, ;, import, java, ., util, ., Set, ;, class, PureFunctionIdentifier, implements, CompilerPass, {, static, final, DiagnosticType, INVALID_NO_SIDE_EFFECT_ANNOTATION, =]
[., Map, ;, import, java, ., util, ., Set, ;, class, PureFunctionIdentifier, implements, CompilerPass, {, static, final, DiagnosticType, INVALID_NO_SIDE_EFFECT_ANNOTATION, =]
[java, ., util, ., Set, ;, class, PureFunctionIdentifier, implements, CompilerPass, {, static, final, DiagnosticType, INVALID_NO_SIDE_EFFECT_ANNOTATION, =, DiagnosticType, ., error, (]
[util, ., Set, ;, class, PureFunctionIdentifier, implements, CompilerPass, {, static, final, DiagnosticType, INVALID_NO_SIDE_EFFECT_ANNOTATION, =, DiagnosticType, ., error, (, "JSC_INVALID_NO_SIDE_EFFECT_ANNOTATION", ,]
[{, static, final, DiagnosticType, INVALID_NO_SIDE_EFFECT_ANNOTATION, =, DiagnosticType, ., error, (, "JSC_INVALID_NO_SIDE_EFFECT_ANNOTATION", ,, "@nosideeffects may only appear in externs files.", ), ;, static, final, DiagnosticType, INVALID_MODIFIES_ANNOTATION, =]
[{, static, final, DiagnosticType, INVALID_NO_SIDE_EFFECT_ANNOTATION, =, DiagnosticType, ., error, (, "JSC_INVALID_NO_SIDE_EFFECT_ANNOTATION", ,, "@nosideeffects may only appear in externs files.", ), ;, static, final, DiagnosticType, INVALID_MODIFIES_ANNOTATION, =]
[INVALID_NO_SIDE_EFFECT_ANNOTATION, =, DiagnosticType, ., error, (, "JSC_INVALID_NO_SIDE_EFFECT_ANNOTATION", ,, "@nosideeffects may only appear in externs files.", ), ;, static, final, DiagnosticType, INVALID_MODIFIES_ANNOTATION, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_INVALID_NO_SIDE_EFFECT_ANNOTATION", ,, "@nosideeffects may only appear in externs files.", ), ;, static, final, DiagnosticType, INVALID_MODIFIES_ANNOTATION, =, DiagnosticType, ., error, (, "JSC_INVALID_MODIFIES_ANNOTATION", ,]
[allFunctionCalls, ;, private, Node, externs, ;, private, Node, root, ;, public, PureFunctionIdentifier, (, AbstractCompiler, compiler, ,, DefinitionProvider, definitionProvider, ), {]
[allFunctionCalls, ;, private, Node, externs, ;, private, Node, root, ;, public, PureFunctionIdentifier, (, AbstractCompiler, compiler, ,, DefinitionProvider, definitionProvider, ), {]
[externs, ;, private, Node, root, ;, public, PureFunctionIdentifier, (, AbstractCompiler, compiler, ,, DefinitionProvider, definitionProvider, ), {, this, ., compiler, =]
[private, Node, root, ;, public, PureFunctionIdentifier, (, AbstractCompiler, compiler, ,, DefinitionProvider, definitionProvider, ), {, this, ., compiler, =, compiler, ;]
[private, Node, root, ;, public, PureFunctionIdentifier, (, AbstractCompiler, compiler, ,, DefinitionProvider, definitionProvider, ), {, this, ., compiler, =, compiler, ;]
[public, PureFunctionIdentifier, (, AbstractCompiler, compiler, ,, DefinitionProvider, definitionProvider, ), {, this, ., compiler, =, compiler, ;, this, ., definitionProvider, =]
[(, AbstractCompiler, compiler, ,, DefinitionProvider, definitionProvider, ), {, this, ., compiler, =, compiler, ;, this, ., definitionProvider, =, definitionProvider, ;]
[(, AbstractCompiler, compiler, ,, DefinitionProvider, definitionProvider, ), {, this, ., compiler, =, compiler, ;, this, ., definitionProvider, =, definitionProvider, ;]
[DefinitionProvider, definitionProvider, ), {, this, ., compiler, =, compiler, ;, this, ., definitionProvider, =, definitionProvider, ;, this, ., functionSideEffectMap, =]
[DefinitionProvider, definitionProvider, ), {, this, ., compiler, =, compiler, ;, this, ., definitionProvider, =, definitionProvider, ;, this, ., functionSideEffectMap, =]
[compiler, =, compiler, ;, this, ., definitionProvider, =, definitionProvider, ;, this, ., functionSideEffectMap, =, Maps, ., newHashMap, (, ), ;]
[compiler, =, compiler, ;, this, ., definitionProvider, =, definitionProvider, ;, this, ., functionSideEffectMap, =, Maps, ., newHashMap, (, ), ;]
[this, ., definitionProvider, =, definitionProvider, ;, this, ., functionSideEffectMap, =, Maps, ., newHashMap, (, ), ;, this, ., allFunctionCalls, =]
[this, ., definitionProvider, =, definitionProvider, ;, this, ., functionSideEffectMap, =, Maps, ., newHashMap, (, ), ;, this, ., allFunctionCalls, =]
[this, ., functionSideEffectMap, =, Maps, ., newHashMap, (, ), ;, this, ., allFunctionCalls, =, Lists, ., newArrayList, (, ), ;]
[this, ., functionSideEffectMap, =, Maps, ., newHashMap, (, ), ;, this, ., allFunctionCalls, =, Lists, ., newArrayList, (, ), ;]
[Maps, ., newHashMap, (, ), ;, this, ., allFunctionCalls, =, Lists, ., newArrayList, (, ), ;, this, ., externs, =]
[newHashMap, (, ), ;, this, ., allFunctionCalls, =, Lists, ., newArrayList, (, ), ;, this, ., externs, =, null, ;]
[newHashMap, (, ), ;, this, ., allFunctionCalls, =, Lists, ., newArrayList, (, ), ;, this, ., externs, =, null, ;]
[this, ., allFunctionCalls, =, Lists, ., newArrayList, (, ), ;, this, ., externs, =, null, ;, this, ., root, =]
[root, =, null, ;, }, @, Override, public, void, process, (, Node, externsAst, ,, Node, srcAst, ), {, if, (]
[root, =, null, ;, }, @, Override, public, void, process, (, Node, externsAst, ,, Node, srcAst, ), {, if, (]
[root, =, null, ;, }, @, Override, public, void, process, (, Node, externsAst, ,, Node, srcAst, ), {, if, (]
[null, ;, }, @, Override, public, void, process, (, Node, externsAst, ,, Node, srcAst, ), {, if, (, externs, !=]
[}, @, Override, public, void, process, (, Node, externsAst, ,, Node, srcAst, ), {, if, (, externs, !=, null, ||]
[}, @, Override, public, void, process, (, Node, externsAst, ,, Node, srcAst, ), {, if, (, externs, !=, null, ||]
[Override, public, void, process, (, Node, externsAst, ,, Node, srcAst, ), {, if, (, externs, !=, null, ||, root, !=]
[(, Node, externsAst, ,, Node, srcAst, ), {, if, (, externs, !=, null, ||, root, !=, null, ), {, throw]
[,, Node, srcAst, ), {, if, (, externs, !=, null, ||, root, !=, null, ), {, throw, new, IllegalStateException, (]
[,, Node, srcAst, ), {, if, (, externs, !=, null, ||, root, !=, null, ), {, throw, new, IllegalStateException, (]
[,, Node, srcAst, ), {, if, (, externs, !=, null, ||, root, !=, null, ), {, throw, new, IllegalStateException, (]
[srcAst, ), {, if, (, externs, !=, null, ||, root, !=, null, ), {, throw, new, IllegalStateException, (, "It is illegal to call PureFunctionIdentifier.process ", +]
[{, if, (, externs, !=, null, ||, root, !=, null, ), {, throw, new, IllegalStateException, (, "It is illegal to call PureFunctionIdentifier.process ", +, "twice the same instance.  Please use a new ", +]
[!=, null, ||, root, !=, null, ), {, throw, new, IllegalStateException, (, "It is illegal to call PureFunctionIdentifier.process ", +, "twice the same instance.  Please use a new ", +, "PureFunctionIdentifier instance each time.", ), ;, }]
[||, root, !=, null, ), {, throw, new, IllegalStateException, (, "It is illegal to call PureFunctionIdentifier.process ", +, "twice the same instance.  Please use a new ", +, "PureFunctionIdentifier instance each time.", ), ;, }, externs, =]
[!=, null, ), {, throw, new, IllegalStateException, (, "It is illegal to call PureFunctionIdentifier.process ", +, "twice the same instance.  Please use a new ", +, "PureFunctionIdentifier instance each time.", ), ;, }, externs, =, externsAst, ;]
[), {, throw, new, IllegalStateException, (, "It is illegal to call PureFunctionIdentifier.process ", +, "twice the same instance.  Please use a new ", +, "PureFunctionIdentifier instance each time.", ), ;, }, externs, =, externsAst, ;, root, =]
[throw, new, IllegalStateException, (, "It is illegal to call PureFunctionIdentifier.process ", +, "twice the same instance.  Please use a new ", +, "PureFunctionIdentifier instance each time.", ), ;, }, externs, =, externsAst, ;, root, =, srcAst, ;]
[throw, new, IllegalStateException, (, "It is illegal to call PureFunctionIdentifier.process ", +, "twice the same instance.  Please use a new ", +, "PureFunctionIdentifier instance each time.", ), ;, }, externs, =, externsAst, ;, root, =, srcAst, ;]
["It is illegal to call PureFunctionIdentifier.process ", +, "twice the same instance.  Please use a new ", +, "PureFunctionIdentifier instance each time.", ), ;, }, externs, =, externsAst, ;, root, =, srcAst, ;, NodeTraversal, ., traverse, (]
["twice the same instance.  Please use a new ", +, "PureFunctionIdentifier instance each time.", ), ;, }, externs, =, externsAst, ;, root, =, srcAst, ;, NodeTraversal, ., traverse, (, compiler, ,]
["PureFunctionIdentifier instance each time.", ), ;, }, externs, =, externsAst, ;, root, =, srcAst, ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,]
[}, externs, =, externsAst, ;, root, =, srcAst, ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, FunctionAnalyzer, (]
[;, root, =, srcAst, ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, FunctionAnalyzer, (, true, ), ), ;]
[;, root, =, srcAst, ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, FunctionAnalyzer, (, true, ), ), ;]
[;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, FunctionAnalyzer, (, true, ), ), ;, NodeTraversal, ., traverse, (]
[., traverse, (, compiler, ,, externs, ,, new, FunctionAnalyzer, (, true, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[(, compiler, ,, externs, ,, new, FunctionAnalyzer, (, true, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[externs, ,, new, FunctionAnalyzer, (, true, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FunctionAnalyzer, (]
[(, true, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FunctionAnalyzer, (, false, ), ), ;]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FunctionAnalyzer, (, false, ), ), ;, propagateSideEffects, (, ), ;]
[FunctionAnalyzer, (, false, ), ), ;, propagateSideEffects, (, ), ;, markPureFunctionCalls, (, ), ;, }, String, getDebugReport, (, ), {]
[FunctionAnalyzer, (, false, ), ), ;, propagateSideEffects, (, ), ;, markPureFunctionCalls, (, ), ;, }, String, getDebugReport, (, ), {]
[), ;, propagateSideEffects, (, ), ;, markPureFunctionCalls, (, ), ;, }, String, getDebugReport, (, ), {, Preconditions, ., checkNotNull, (]
[(, ), ;, markPureFunctionCalls, (, ), ;, }, String, getDebugReport, (, ), {, Preconditions, ., checkNotNull, (, externs, ), ;]
[(, ), ;, markPureFunctionCalls, (, ), ;, }, String, getDebugReport, (, ), {, Preconditions, ., checkNotNull, (, externs, ), ;]
[(, ), ;, }, String, getDebugReport, (, ), {, Preconditions, ., checkNotNull, (, externs, ), ;, Preconditions, ., checkNotNull, (]
[(, ), {, Preconditions, ., checkNotNull, (, externs, ), ;, Preconditions, ., checkNotNull, (, root, ), ;, StringBuilder, sb, =]
[), ;, Preconditions, ., checkNotNull, (, root, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, FunctionNames, functionNames, =]
[., checkNotNull, (, root, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, FunctionNames, functionNames, =, new, FunctionNames, (]
[root, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, FunctionNames, functionNames, =, new, FunctionNames, (, compiler, ), ;]
[root, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, FunctionNames, functionNames, =, new, FunctionNames, (, compiler, ), ;]
[sb, =, new, StringBuilder, (, ), ;, FunctionNames, functionNames, =, new, FunctionNames, (, compiler, ), ;, functionNames, ., process, (]
[new, StringBuilder, (, ), ;, FunctionNames, functionNames, =, new, FunctionNames, (, compiler, ), ;, functionNames, ., process, (, null, ,]
[), ;, FunctionNames, functionNames, =, new, FunctionNames, (, compiler, ), ;, functionNames, ., process, (, null, ,, externs, ), ;]
[), ;, FunctionNames, functionNames, =, new, FunctionNames, (, compiler, ), ;, functionNames, ., process, (, null, ,, externs, ), ;]
[=, new, FunctionNames, (, compiler, ), ;, functionNames, ., process, (, null, ,, externs, ), ;, functionNames, ., process, (]
[FunctionNames, (, compiler, ), ;, functionNames, ., process, (, null, ,, externs, ), ;, functionNames, ., process, (, null, ,]
[), ;, functionNames, ., process, (, null, ,, externs, ), ;, functionNames, ., process, (, null, ,, root, ), ;]
[), ;, functionNames, ., process, (, null, ,, externs, ), ;, functionNames, ., process, (, null, ,, root, ), ;]
[process, (, null, ,, externs, ), ;, functionNames, ., process, (, null, ,, root, ), ;, sb, ., append, (]
[;, sb, ., append, (, "Pure functions:\n", ), ;, for, (, Map, ., Entry, <, Node, ,, FunctionInformation, >, entry, :]
[;, sb, ., append, (, "Pure functions:\n", ), ;, for, (, Map, ., Entry, <, Node, ,, FunctionInformation, >, entry, :]
[Map, ., Entry, <, Node, ,, FunctionInformation, >, entry, :, functionSideEffectMap, ., entrySet, (, ), ), {, Node, function, =]
[Map, ., Entry, <, Node, ,, FunctionInformation, >, entry, :, functionSideEffectMap, ., entrySet, (, ), ), {, Node, function, =]
[:, functionSideEffectMap, ., entrySet, (, ), ), {, Node, function, =, entry, ., getKey, (, ), ;, FunctionInformation, functionInfo, =]
[:, functionSideEffectMap, ., entrySet, (, ), ), {, Node, function, =, entry, ., getKey, (, ), ;, FunctionInformation, functionInfo, =]
[function, =, entry, ., getKey, (, ), ;, FunctionInformation, functionInfo, =, entry, ., getValue, (, ), ;, boolean, isPure, =]
[function, =, entry, ., getKey, (, ), ;, FunctionInformation, functionInfo, =, entry, ., getValue, (, ), ;, boolean, isPure, =]
[function, =, entry, ., getKey, (, ), ;, FunctionInformation, functionInfo, =, entry, ., getValue, (, ), ;, boolean, isPure, =]
[), ;, FunctionInformation, functionInfo, =, entry, ., getValue, (, ), ;, boolean, isPure, =, functionInfo, ., mayBePure, (, ), &&]
[;, FunctionInformation, functionInfo, =, entry, ., getValue, (, ), ;, boolean, isPure, =, functionInfo, ., mayBePure, (, ), &&, !]
[;, FunctionInformation, functionInfo, =, entry, ., getValue, (, ), ;, boolean, isPure, =, functionInfo, ., mayBePure, (, ), &&, !]
[), ;, boolean, isPure, =, functionInfo, ., mayBePure, (, ), &&, !, functionInfo, ., mayHaveSideEffects, (, ), ;, if, (]
[isPure, =, functionInfo, ., mayBePure, (, ), &&, !, functionInfo, ., mayHaveSideEffects, (, ), ;, if, (, isPure, ), {]
[isPure, =, functionInfo, ., mayBePure, (, ), &&, !, functionInfo, ., mayHaveSideEffects, (, ), ;, if, (, isPure, ), {]
[mayBePure, (, ), &&, !, functionInfo, ., mayHaveSideEffects, (, ), ;, if, (, isPure, ), {, sb, ., append, (]
[mayBePure, (, ), &&, !, functionInfo, ., mayHaveSideEffects, (, ), ;, if, (, isPure, ), {, sb, ., append, (]
[mayBePure, (, ), &&, !, functionInfo, ., mayHaveSideEffects, (, ), ;, if, (, isPure, ), {, sb, ., append, (]
[), &&, !, functionInfo, ., mayHaveSideEffects, (, ), ;, if, (, isPure, ), {, sb, ., append, (, "  ", +]
[), &&, !, functionInfo, ., mayHaveSideEffects, (, ), ;, if, (, isPure, ), {, sb, ., append, (, "  ", +]
[., mayHaveSideEffects, (, ), ;, if, (, isPure, ), {, sb, ., append, (, "  ", +, functionNames, ., getFunctionName, (]
[), ;, if, (, isPure, ), {, sb, ., append, (, "  ", +, functionNames, ., getFunctionName, (, function, ), +]
[), {, sb, ., append, (, "  ", +, functionNames, ., getFunctionName, (, function, ), +, "\n", ), ;, }, }]
[), {, sb, ., append, (, "  ", +, functionNames, ., getFunctionName, (, function, ), +, "\n", ), ;, }, }]
[append, (, "  ", +, functionNames, ., getFunctionName, (, function, ), +, "\n", ), ;, }, }, sb, ., append, (]
[}, sb, ., append, (, "\n", ), ;, for, (, Map, ., Entry, <, Node, ,, FunctionInformation, >, entry, :]
[}, sb, ., append, (, "\n", ), ;, for, (, Map, ., Entry, <, Node, ,, FunctionInformation, >, entry, :]
[Map, ., Entry, <, Node, ,, FunctionInformation, >, entry, :, functionSideEffectMap, ., entrySet, (, ), ), {, Node, function, =]
[Map, ., Entry, <, Node, ,, FunctionInformation, >, entry, :, functionSideEffectMap, ., entrySet, (, ), ), {, Node, function, =]
[:, functionSideEffectMap, ., entrySet, (, ), ), {, Node, function, =, entry, ., getKey, (, ), ;, FunctionInformation, functionInfo, =]
[:, functionSideEffectMap, ., entrySet, (, ), ), {, Node, function, =, entry, ., getKey, (, ), ;, FunctionInformation, functionInfo, =]
[., getKey, (, ), ;, FunctionInformation, functionInfo, =, entry, ., getValue, (, ), ;, Set, <, String, >, depFunctionNames, =]
[., getKey, (, ), ;, FunctionInformation, functionInfo, =, entry, ., getValue, (, ), ;, Set, <, String, >, depFunctionNames, =]
[(, ), ;, Set, <, String, >, depFunctionNames, =, Sets, ., newHashSet, (, ), ;, for, (, Node, callSite, :]
[(, ), ;, Set, <, String, >, depFunctionNames, =, Sets, ., newHashSet, (, ), ;, for, (, Node, callSite, :]
[), ;, for, (, Node, callSite, :, functionInfo, ., getCallsInFunctionBody, (, ), ), {, Collection, <, Definition, >, defs, =]
[for, (, Node, callSite, :, functionInfo, ., getCallsInFunctionBody, (, ), ), {, Collection, <, Definition, >, defs, =, getCallableDefinitions, (]
[Node, callSite, :, functionInfo, ., getCallsInFunctionBody, (, ), ), {, Collection, <, Definition, >, defs, =, getCallableDefinitions, (, definitionProvider, ,]
[Node, callSite, :, functionInfo, ., getCallsInFunctionBody, (, ), ), {, Collection, <, Definition, >, defs, =, getCallableDefinitions, (, definitionProvider, ,]
[{, Collection, <, Definition, >, defs, =, getCallableDefinitions, (, definitionProvider, ,, callSite, ., getFirstChild, (, ), ), ;, if, (]
[{, Collection, <, Definition, >, defs, =, getCallableDefinitions, (, definitionProvider, ,, callSite, ., getFirstChild, (, ), ), ;, if, (]
[<, Definition, >, defs, =, getCallableDefinitions, (, definitionProvider, ,, callSite, ., getFirstChild, (, ), ), ;, if, (, defs, ==]
[defs, =, getCallableDefinitions, (, definitionProvider, ,, callSite, ., getFirstChild, (, ), ), ;, if, (, defs, ==, null, ), {]
[defs, =, getCallableDefinitions, (, definitionProvider, ,, callSite, ., getFirstChild, (, ), ), ;, if, (, defs, ==, null, ), {]
[definitionProvider, ,, callSite, ., getFirstChild, (, ), ), ;, if, (, defs, ==, null, ), {, depFunctionNames, ., add, (]
[defs, ==, null, ), {, depFunctionNames, ., add, (, "<null def list>", ), ;, continue, ;, }, for, (, Definition, def, :]
[), {, depFunctionNames, ., add, (, "<null def list>", ), ;, continue, ;, }, for, (, Definition, def, :, defs, ), {]
[), {, depFunctionNames, ., add, (, "<null def list>", ), ;, continue, ;, }, for, (, Definition, def, :, defs, ), {]
[add, (, "<null def list>", ), ;, continue, ;, }, for, (, Definition, def, :, defs, ), {, depFunctionNames, ., add, (]
[add, (, "<null def list>", ), ;, continue, ;, }, for, (, Definition, def, :, defs, ), {, depFunctionNames, ., add, (]
[;, continue, ;, }, for, (, Definition, def, :, defs, ), {, depFunctionNames, ., add, (, functionNames, ., getFunctionName, (]
[;, continue, ;, }, for, (, Definition, def, :, defs, ), {, depFunctionNames, ., add, (, functionNames, ., getFunctionName, (]
[), {, depFunctionNames, ., add, (, functionNames, ., getFunctionName, (, def, ., getRValue, (, ), ), ), ;, }, }]
[), {, depFunctionNames, ., add, (, functionNames, ., getFunctionName, (, def, ., getRValue, (, ), ), ), ;, }, }]
[add, (, functionNames, ., getFunctionName, (, def, ., getRValue, (, ), ), ), ;, }, }, sb, ., append, (]
[add, (, functionNames, ., getFunctionName, (, def, ., getRValue, (, ), ), ), ;, }, }, sb, ., append, (]
[add, (, functionNames, ., getFunctionName, (, def, ., getRValue, (, ), ), ), ;, }, }, sb, ., append, (]
[add, (, functionNames, ., getFunctionName, (, def, ., getRValue, (, ), ), ), ;, }, }, sb, ., append, (]
[add, (, functionNames, ., getFunctionName, (, def, ., getRValue, (, ), ), ), ;, }, }, sb, ., append, (]
[add, (, functionNames, ., getFunctionName, (, def, ., getRValue, (, ), ), ), ;, }, }, sb, ., append, (]
[add, (, functionNames, ., getFunctionName, (, def, ., getRValue, (, ), ), ), ;, }, }, sb, ., append, (]
[getFunctionName, (, def, ., getRValue, (, ), ), ), ;, }, }, sb, ., append, (, functionNames, ., getFunctionName, (]
[., getRValue, (, ), ), ), ;, }, }, sb, ., append, (, functionNames, ., getFunctionName, (, function, ), +]
[(, ), ), ), ;, }, }, sb, ., append, (, functionNames, ., getFunctionName, (, function, ), +, " ", +]
[(, ), ), ), ;, }, }, sb, ., append, (, functionNames, ., getFunctionName, (, function, ), +, " ", +]
[}, sb, ., append, (, functionNames, ., getFunctionName, (, function, ), +, " ", +, functionInfo, ., toString, (, ), +]
[., append, (, functionNames, ., getFunctionName, (, function, ), +, " ", +, functionInfo, ., toString, (, ), +, " Calls: ", +]
[(, functionNames, ., getFunctionName, (, function, ), +, " ", +, functionInfo, ., toString, (, ), +, " Calls: ", +, depFunctionNames, +]
[function, ), +, " ", +, functionInfo, ., toString, (, ), +, " Calls: ", +, depFunctionNames, +, "\n", ), ;, }, return]
[function, ), +, " ", +, functionInfo, ., toString, (, ), +, " Calls: ", +, depFunctionNames, +, "\n", ), ;, }, return]
[), ;, }, private, static, Collection, <, Definition, >, getCallableDefinitions, (, DefinitionProvider, definitionProvider, ,, Node, name, ), {, if, (]
[), ;, }, private, static, Collection, <, Definition, >, getCallableDefinitions, (, DefinitionProvider, definitionProvider, ,, Node, name, ), {, if, (]
[), ;, }, private, static, Collection, <, Definition, >, getCallableDefinitions, (, DefinitionProvider, definitionProvider, ,, Node, name, ), {, if, (]
[<, Definition, >, getCallableDefinitions, (, DefinitionProvider, definitionProvider, ,, Node, name, ), {, if, (, name, ., isGetProp, (, ), ||]
[<, Definition, >, getCallableDefinitions, (, DefinitionProvider, definitionProvider, ,, Node, name, ), {, if, (, name, ., isGetProp, (, ), ||]
[(, name, ., isGetProp, (, ), ||, name, ., isName, (, ), ), {, List, <, Definition, >, result, =]
[(, name, ., isGetProp, (, ), ||, name, ., isName, (, ), ), {, List, <, Definition, >, result, =]
[), {, List, <, Definition, >, result, =, Lists, ., newArrayList, (, ), ;, Collection, <, Definition, >, decls, =]
[), {, List, <, Definition, >, result, =, Lists, ., newArrayList, (, ), ;, Collection, <, Definition, >, decls, =]
[Definition, >, result, =, Lists, ., newArrayList, (, ), ;, Collection, <, Definition, >, decls, =, definitionProvider, ., getDefinitionsReferencedAt, (]
[., newArrayList, (, ), ;, Collection, <, Definition, >, decls, =, definitionProvider, ., getDefinitionsReferencedAt, (, name, ), ;, if, (]
[., newArrayList, (, ), ;, Collection, <, Definition, >, decls, =, definitionProvider, ., getDefinitionsReferencedAt, (, name, ), ;, if, (]
[(, ), ;, Collection, <, Definition, >, decls, =, definitionProvider, ., getDefinitionsReferencedAt, (, name, ), ;, if, (, decls, ==]
[<, Definition, >, decls, =, definitionProvider, ., getDefinitionsReferencedAt, (, name, ), ;, if, (, decls, ==, null, ), {, return]
[(, name, ), ;, if, (, decls, ==, null, ), {, return, null, ;, }, for, (, Definition, current, :]
[decls, ==, null, ), {, return, null, ;, }, for, (, Definition, current, :, decls, ), {, Node, rValue, =]
[decls, ==, null, ), {, return, null, ;, }, for, (, Definition, current, :, decls, ), {, Node, rValue, =]
[}, for, (, Definition, current, :, decls, ), {, Node, rValue, =, current, ., getRValue, (, ), ;, if, (]
[}, for, (, Definition, current, :, decls, ), {, Node, rValue, =, current, ., getRValue, (, ), ;, if, (]
[for, (, Definition, current, :, decls, ), {, Node, rValue, =, current, ., getRValue, (, ), ;, if, (, (]
[for, (, Definition, current, :, decls, ), {, Node, rValue, =, current, ., getRValue, (, ), ;, if, (, (]
[Definition, current, :, decls, ), {, Node, rValue, =, current, ., getRValue, (, ), ;, if, (, (, rValue, !=]
[decls, ), {, Node, rValue, =, current, ., getRValue, (, ), ;, if, (, (, rValue, !=, null, ), &&]
[decls, ), {, Node, rValue, =, current, ., getRValue, (, ), ;, if, (, (, rValue, !=, null, ), &&]
[., getRValue, (, ), ;, if, (, (, rValue, !=, null, ), &&, rValue, ., isFunction, (, ), ), {]
[., getRValue, (, ), ;, if, (, (, rValue, !=, null, ), &&, rValue, ., isFunction, (, ), ), {]
[;, if, (, (, rValue, !=, null, ), &&, rValue, ., isFunction, (, ), ), {, result, ., add, (]
[), &&, rValue, ., isFunction, (, ), ), {, result, ., add, (, current, ), ;, }, else, {, return]
[(, ), ), {, result, ., add, (, current, ), ;, }, else, {, return, null, ;, }, }, return]
[add, (, current, ), ;, }, else, {, return, null, ;, }, }, return, result, ;, }, else, if, (]
[add, (, current, ), ;, }, else, {, return, null, ;, }, }, return, result, ;, }, else, if, (]
[add, (, current, ), ;, }, else, {, return, null, ;, }, }, return, result, ;, }, else, if, (]
[else, {, return, null, ;, }, }, return, result, ;, }, else, if, (, name, ., isOr, (, ), ||]
[else, {, return, null, ;, }, }, return, result, ;, }, else, if, (, name, ., isOr, (, ), ||]
[if, (, name, ., isOr, (, ), ||, name, ., isHook, (, ), ), {, Node, firstVal, ;, if, (]
[if, (, name, ., isOr, (, ), ||, name, ., isHook, (, ), ), {, Node, firstVal, ;, if, (]
[||, name, ., isHook, (, ), ), {, Node, firstVal, ;, if, (, name, ., isHook, (, ), ), {]
[., isHook, (, ), ), {, Node, firstVal, ;, if, (, name, ., isHook, (, ), ), {, firstVal, =]
[., isHook, (, ), ), {, Node, firstVal, ;, if, (, name, ., isHook, (, ), ), {, firstVal, =]
[., isHook, (, ), ), {, Node, firstVal, ;, if, (, name, ., isHook, (, ), ), {, firstVal, =]
[isHook, (, ), ), {, firstVal, =, name, ., getFirstChild, (, ), ., getNext, (, ), ;, }, else, {]
[), ), {, firstVal, =, name, ., getFirstChild, (, ), ., getNext, (, ), ;, }, else, {, firstVal, =]
[), ), {, firstVal, =, name, ., getFirstChild, (, ), ., getNext, (, ), ;, }, else, {, firstVal, =]
[), ;, }, else, {, firstVal, =, name, ., getFirstChild, (, ), ;, }, Collection, <, Definition, >, defs1, =]
[}, else, {, firstVal, =, name, ., getFirstChild, (, ), ;, }, Collection, <, Definition, >, defs1, =, getCallableDefinitions, (]
[{, firstVal, =, name, ., getFirstChild, (, ), ;, }, Collection, <, Definition, >, defs1, =, getCallableDefinitions, (, definitionProvider, ,]
[}, Collection, <, Definition, >, defs1, =, getCallableDefinitions, (, definitionProvider, ,, firstVal, ), ;, Collection, <, Definition, >, defs2, =]
[<, Definition, >, defs1, =, getCallableDefinitions, (, definitionProvider, ,, firstVal, ), ;, Collection, <, Definition, >, defs2, =, getCallableDefinitions, (]
[>, defs1, =, getCallableDefinitions, (, definitionProvider, ,, firstVal, ), ;, Collection, <, Definition, >, defs2, =, getCallableDefinitions, (, definitionProvider, ,]
[>, defs1, =, getCallableDefinitions, (, definitionProvider, ,, firstVal, ), ;, Collection, <, Definition, >, defs2, =, getCallableDefinitions, (, definitionProvider, ,]
[;, Collection, <, Definition, >, defs2, =, getCallableDefinitions, (, definitionProvider, ,, firstVal, ., getNext, (, ), ), ;, if, (]
[;, Collection, <, Definition, >, defs2, =, getCallableDefinitions, (, definitionProvider, ,, firstVal, ., getNext, (, ), ), ;, if, (]
[;, Collection, <, Definition, >, defs2, =, getCallableDefinitions, (, definitionProvider, ,, firstVal, ., getNext, (, ), ), ;, if, (]
[<, Definition, >, defs2, =, getCallableDefinitions, (, definitionProvider, ,, firstVal, ., getNext, (, ), ), ;, if, (, defs1, !=]
[>, defs2, =, getCallableDefinitions, (, definitionProvider, ,, firstVal, ., getNext, (, ), ), ;, if, (, defs1, !=, null, &&]
[>, defs2, =, getCallableDefinitions, (, definitionProvider, ,, firstVal, ., getNext, (, ), ), ;, if, (, defs1, !=, null, &&]
[=, getCallableDefinitions, (, definitionProvider, ,, firstVal, ., getNext, (, ), ), ;, if, (, defs1, !=, null, &&, defs2, !=]
[definitionProvider, ,, firstVal, ., getNext, (, ), ), ;, if, (, defs1, !=, null, &&, defs2, !=, null, ), {]
[definitionProvider, ,, firstVal, ., getNext, (, ), ), ;, if, (, defs1, !=, null, &&, defs2, !=, null, ), {]
[getNext, (, ), ), ;, if, (, defs1, !=, null, &&, defs2, !=, null, ), {, defs1, ., addAll, (]
[;, if, (, defs1, !=, null, &&, defs2, !=, null, ), {, defs1, ., addAll, (, defs2, ), ;, return]
[&&, defs2, !=, null, ), {, defs1, ., addAll, (, defs2, ), ;, return, defs1, ;, }, else, {, return]
[., addAll, (, defs2, ), ;, return, defs1, ;, }, else, {, return, null, ;, }, }, else, if, (]
[., addAll, (, defs2, ), ;, return, defs1, ;, }, else, {, return, null, ;, }, }, else, if, (]
[), ;, return, defs1, ;, }, else, {, return, null, ;, }, }, else, if, (, NodeUtil, ., isFunctionExpression, (]
[}, else, {, return, null, ;, }, }, else, if, (, NodeUtil, ., isFunctionExpression, (, name, ), ), {, return]
[}, else, {, return, null, ;, }, }, else, if, (, NodeUtil, ., isFunctionExpression, (, name, ), ), {, return]
[null, ;, }, }, else, if, (, NodeUtil, ., isFunctionExpression, (, name, ), ), {, return, Lists, ., newArrayList, (]
[}, else, if, (, NodeUtil, ., isFunctionExpression, (, name, ), ), {, return, Lists, ., newArrayList, (, (, Definition, )]
[., isFunctionExpression, (, name, ), ), {, return, Lists, ., newArrayList, (, (, Definition, ), new, DefinitionsRemover, ., FunctionExpressionDefinition, (]
[(, name, ), ), {, return, Lists, ., newArrayList, (, (, Definition, ), new, DefinitionsRemover, ., FunctionExpressionDefinition, (, name, ,]
[newArrayList, (, (, Definition, ), new, DefinitionsRemover, ., FunctionExpressionDefinition, (, name, ,, false, ), ), ;, }, else, {, return]
[{, return, null, ;, }, }, private, void, propagateSideEffects, (, ), {, DiGraph, <, FunctionInformation, ,, Node, >, sideEffectGraph, =]
[{, return, null, ;, }, }, private, void, propagateSideEffects, (, ), {, DiGraph, <, FunctionInformation, ,, Node, >, sideEffectGraph, =]
[{, DiGraph, <, FunctionInformation, ,, Node, >, sideEffectGraph, =, LinkedDirectedGraph, ., createWithoutAnnotations, (, ), ;, for, (, FunctionInformation, functionInfo, :]
[{, DiGraph, <, FunctionInformation, ,, Node, >, sideEffectGraph, =, LinkedDirectedGraph, ., createWithoutAnnotations, (, ), ;, for, (, FunctionInformation, functionInfo, :]
[sideEffectGraph, =, LinkedDirectedGraph, ., createWithoutAnnotations, (, ), ;, for, (, FunctionInformation, functionInfo, :, functionSideEffectMap, ., values, (, ), ), {]
[sideEffectGraph, =, LinkedDirectedGraph, ., createWithoutAnnotations, (, ), ;, for, (, FunctionInformation, functionInfo, :, functionSideEffectMap, ., values, (, ), ), {]
[createWithoutAnnotations, (, ), ;, for, (, FunctionInformation, functionInfo, :, functionSideEffectMap, ., values, (, ), ), {, sideEffectGraph, ., createNode, (]
[functionSideEffectMap, ., values, (, ), ), {, sideEffectGraph, ., createNode, (, functionInfo, ), ;, }, for, (, FunctionInformation, functionInfo, :]
[functionSideEffectMap, ., values, (, ), ), {, sideEffectGraph, ., createNode, (, functionInfo, ), ;, }, for, (, FunctionInformation, functionInfo, :]
[createNode, (, functionInfo, ), ;, }, for, (, FunctionInformation, functionInfo, :, functionSideEffectMap, ., values, (, ), ), {, if, (]
[(, functionInfo, ), ;, }, for, (, FunctionInformation, functionInfo, :, functionSideEffectMap, ., values, (, ), ), {, if, (, !]
[(, functionInfo, ), ;, }, for, (, FunctionInformation, functionInfo, :, functionSideEffectMap, ., values, (, ), ), {, if, (, !]
[), {, if, (, !, functionInfo, ., mayHaveSideEffects, (, ), ), {, continue, ;, }, for, (, Node, callSite, :]
[), {, if, (, !, functionInfo, ., mayHaveSideEffects, (, ), ), {, continue, ;, }, for, (, Node, callSite, :]
[), {, continue, ;, }, for, (, Node, callSite, :, functionInfo, ., getCallsInFunctionBody, (, ), ), {, Node, callee, =]
[), {, continue, ;, }, for, (, Node, callSite, :, functionInfo, ., getCallsInFunctionBody, (, ), ), {, Node, callee, =]
[getCallsInFunctionBody, (, ), ), {, Node, callee, =, callSite, ., getFirstChild, (, ), ;, Collection, <, Definition, >, defs, =]
[), ), {, Node, callee, =, callSite, ., getFirstChild, (, ), ;, Collection, <, Definition, >, defs, =, getCallableDefinitions, (]
[{, Node, callee, =, callSite, ., getFirstChild, (, ), ;, Collection, <, Definition, >, defs, =, getCallableDefinitions, (, definitionProvider, ,]
[., getFirstChild, (, ), ;, Collection, <, Definition, >, defs, =, getCallableDefinitions, (, definitionProvider, ,, callee, ), ;, if, (]
[., getFirstChild, (, ), ;, Collection, <, Definition, >, defs, =, getCallableDefinitions, (, definitionProvider, ,, callee, ), ;, if, (]
[(, ), ;, Collection, <, Definition, >, defs, =, getCallableDefinitions, (, definitionProvider, ,, callee, ), ;, if, (, defs, ==]
[Collection, <, Definition, >, defs, =, getCallableDefinitions, (, definitionProvider, ,, callee, ), ;, if, (, defs, ==, null, ), {]
[Collection, <, Definition, >, defs, =, getCallableDefinitions, (, definitionProvider, ,, callee, ), ;, if, (, defs, ==, null, ), {]
[(, defs, ==, null, ), {, functionInfo, ., setTaintsUnknown, (, ), ;, break, ;, }, for, (, Definition, def, :]
[functionInfo, ., setTaintsUnknown, (, ), ;, break, ;, }, for, (, Definition, def, :, defs, ), {, Node, defValue, =]
[functionInfo, ., setTaintsUnknown, (, ), ;, break, ;, }, for, (, Definition, def, :, defs, ), {, Node, defValue, =]
[for, (, Definition, def, :, defs, ), {, Node, defValue, =, def, ., getRValue, (, ), ;, FunctionInformation, dep, =]
[for, (, Definition, def, :, defs, ), {, Node, defValue, =, def, ., getRValue, (, ), ;, FunctionInformation, dep, =]
[:, defs, ), {, Node, defValue, =, def, ., getRValue, (, ), ;, FunctionInformation, dep, =, functionSideEffectMap, ., get, (]
[{, Node, defValue, =, def, ., getRValue, (, ), ;, FunctionInformation, dep, =, functionSideEffectMap, ., get, (, defValue, ), ;]
[{, Node, defValue, =, def, ., getRValue, (, ), ;, FunctionInformation, dep, =, functionSideEffectMap, ., get, (, defValue, ), ;]
[def, ., getRValue, (, ), ;, FunctionInformation, dep, =, functionSideEffectMap, ., get, (, defValue, ), ;, Preconditions, ., checkNotNull, (]
[(, ), ;, FunctionInformation, dep, =, functionSideEffectMap, ., get, (, defValue, ), ;, Preconditions, ., checkNotNull, (, dep, ), ;]
[(, ), ;, FunctionInformation, dep, =, functionSideEffectMap, ., get, (, defValue, ), ;, Preconditions, ., checkNotNull, (, dep, ), ;]
[dep, =, functionSideEffectMap, ., get, (, defValue, ), ;, Preconditions, ., checkNotNull, (, dep, ), ;, sideEffectGraph, ., connect, (]
[functionSideEffectMap, ., get, (, defValue, ), ;, Preconditions, ., checkNotNull, (, dep, ), ;, sideEffectGraph, ., connect, (, dep, ,]
[get, (, defValue, ), ;, Preconditions, ., checkNotNull, (, dep, ), ;, sideEffectGraph, ., connect, (, dep, ,, callSite, ,]
[., checkNotNull, (, dep, ), ;, sideEffectGraph, ., connect, (, dep, ,, callSite, ,, functionInfo, ), ;, }, }, }]
[., checkNotNull, (, dep, ), ;, sideEffectGraph, ., connect, (, dep, ,, callSite, ,, functionInfo, ), ;, }, }, }]
[., checkNotNull, (, dep, ), ;, sideEffectGraph, ., connect, (, dep, ,, callSite, ,, functionInfo, ), ;, }, }, }]
[), ;, sideEffectGraph, ., connect, (, dep, ,, callSite, ,, functionInfo, ), ;, }, }, }, FixedPointGraphTraversal, ., newTraversal, (]
[callSite, ,, functionInfo, ), ;, }, }, }, FixedPointGraphTraversal, ., newTraversal, (, new, SideEffectPropagationCallback, (, ), ), ., computeFixedPoint, (]
[FixedPointGraphTraversal, ., newTraversal, (, new, SideEffectPropagationCallback, (, ), ), ., computeFixedPoint, (, sideEffectGraph, ), ;, for, (, FunctionInformation, functionInfo, :]
[FixedPointGraphTraversal, ., newTraversal, (, new, SideEffectPropagationCallback, (, ), ), ., computeFixedPoint, (, sideEffectGraph, ), ;, for, (, FunctionInformation, functionInfo, :]
[., computeFixedPoint, (, sideEffectGraph, ), ;, for, (, FunctionInformation, functionInfo, :, functionSideEffectMap, ., values, (, ), ), {, if, (]
[., computeFixedPoint, (, sideEffectGraph, ), ;, for, (, FunctionInformation, functionInfo, :, functionSideEffectMap, ., values, (, ), ), {, if, (]
[(, FunctionInformation, functionInfo, :, functionSideEffectMap, ., values, (, ), ), {, if, (, functionInfo, ., mayBePure, (, ), ), {]
[(, FunctionInformation, functionInfo, :, functionSideEffectMap, ., values, (, ), ), {, if, (, functionInfo, ., mayBePure, (, ), ), {]
[functionInfo, ., setIsPure, (, ), ;, }, }, }, private, void, markPureFunctionCalls, (, ), {, for, (, Node, callNode, :]
[}, }, }, private, void, markPureFunctionCalls, (, ), {, for, (, Node, callNode, :, allFunctionCalls, ), {, Node, name, =]
[}, }, }, private, void, markPureFunctionCalls, (, ), {, for, (, Node, callNode, :, allFunctionCalls, ), {, Node, name, =]
[callNode, :, allFunctionCalls, ), {, Node, name, =, callNode, ., getFirstChild, (, ), ;, Collection, <, Definition, >, defs, =]
[allFunctionCalls, ), {, Node, name, =, callNode, ., getFirstChild, (, ), ;, Collection, <, Definition, >, defs, =, getCallableDefinitions, (]
[{, Node, name, =, callNode, ., getFirstChild, (, ), ;, Collection, <, Definition, >, defs, =, getCallableDefinitions, (, definitionProvider, ,]
[), ;, Collection, <, Definition, >, defs, =, getCallableDefinitions, (, definitionProvider, ,, name, ), ;, Node, ., SideEffectFlags, flags, =]
[(, definitionProvider, ,, name, ), ;, Node, ., SideEffectFlags, flags, =, new, Node, ., SideEffectFlags, (, ), ;, if, (]
[(, definitionProvider, ,, name, ), ;, Node, ., SideEffectFlags, flags, =, new, Node, ., SideEffectFlags, (, ), ;, if, (]
[,, name, ), ;, Node, ., SideEffectFlags, flags, =, new, Node, ., SideEffectFlags, (, ), ;, if, (, defs, ==]
[;, Node, ., SideEffectFlags, flags, =, new, Node, ., SideEffectFlags, (, ), ;, if, (, defs, ==, null, ), {]
[;, Node, ., SideEffectFlags, flags, =, new, Node, ., SideEffectFlags, (, ), ;, if, (, defs, ==, null, ), {]
[new, Node, ., SideEffectFlags, (, ), ;, if, (, defs, ==, null, ), {, flags, ., setMutatesGlobalState, (, ), ;]
[new, Node, ., SideEffectFlags, (, ), ;, if, (, defs, ==, null, ), {, flags, ., setMutatesGlobalState, (, ), ;]
[;, if, (, defs, ==, null, ), {, flags, ., setMutatesGlobalState, (, ), ;, flags, ., setThrows, (, ), ;]
[;, if, (, defs, ==, null, ), {, flags, ., setMutatesGlobalState, (, ), ;, flags, ., setThrows, (, ), ;]
[., setMutatesGlobalState, (, ), ;, flags, ., setThrows, (, ), ;, flags, ., setReturnsTainted, (, ), ;, }, else, {]
[., setMutatesGlobalState, (, ), ;, flags, ., setThrows, (, ), ;, flags, ., setReturnsTainted, (, ), ;, }, else, {]
[flags, ., setReturnsTainted, (, ), ;, }, else, {, flags, ., clearAllFlags, (, ), ;, for, (, Definition, def, :]
[}, else, {, flags, ., clearAllFlags, (, ), ;, for, (, Definition, def, :, defs, ), {, FunctionInformation, functionInfo, =]
[}, else, {, flags, ., clearAllFlags, (, ), ;, for, (, Definition, def, :, defs, ), {, FunctionInformation, functionInfo, =]
[., clearAllFlags, (, ), ;, for, (, Definition, def, :, defs, ), {, FunctionInformation, functionInfo, =, functionSideEffectMap, ., get, (]
[., clearAllFlags, (, ), ;, for, (, Definition, def, :, defs, ), {, FunctionInformation, functionInfo, =, functionSideEffectMap, ., get, (]
[Definition, def, :, defs, ), {, FunctionInformation, functionInfo, =, functionSideEffectMap, ., get, (, def, ., getRValue, (, ), ), ;]
[Definition, def, :, defs, ), {, FunctionInformation, functionInfo, =, functionSideEffectMap, ., get, (, def, ., getRValue, (, ), ), ;]
[), {, FunctionInformation, functionInfo, =, functionSideEffectMap, ., get, (, def, ., getRValue, (, ), ), ;, Preconditions, ., checkNotNull, (]
[functionSideEffectMap, ., get, (, def, ., getRValue, (, ), ), ;, Preconditions, ., checkNotNull, (, functionInfo, ), ;, if, (]
[functionSideEffectMap, ., get, (, def, ., getRValue, (, ), ), ;, Preconditions, ., checkNotNull, (, functionInfo, ), ;, if, (]
[(, ), ), ;, Preconditions, ., checkNotNull, (, functionInfo, ), ;, if, (, functionInfo, ., mutatesGlobalState, (, ), ), {]
[(, ), ), ;, Preconditions, ., checkNotNull, (, functionInfo, ), ;, if, (, functionInfo, ., mutatesGlobalState, (, ), ), {]
[), ;, if, (, functionInfo, ., mutatesGlobalState, (, ), ), {, flags, ., setMutatesGlobalState, (, ), ;, }, if, (]
[), ;, if, (, functionInfo, ., mutatesGlobalState, (, ), ), {, flags, ., setMutatesGlobalState, (, ), ;, }, if, (]
[., mutatesGlobalState, (, ), ), {, flags, ., setMutatesGlobalState, (, ), ;, }, if, (, functionInfo, ., functionThrows, ), {]
[., mutatesGlobalState, (, ), ), {, flags, ., setMutatesGlobalState, (, ), ;, }, if, (, functionInfo, ., functionThrows, ), {]
[(, ), ;, }, if, (, functionInfo, ., functionThrows, ), {, flags, ., setThrows, (, ), ;, }, if, (]
[), ;, }, if, (, functionInfo, ., functionThrows, ), {, flags, ., setThrows, (, ), ;, }, if, (, !]
[), ;, }, if, (, functionInfo, ., functionThrows, ), {, flags, ., setThrows, (, ), ;, }, if, (, !]
[{, flags, ., setThrows, (, ), ;, }, if, (, !, callNode, ., isNew, (, ), ), {, if, (]
[{, flags, ., setThrows, (, ), ;, }, if, (, !, callNode, ., isNew, (, ), ), {, if, (]
[), ;, }, if, (, !, callNode, ., isNew, (, ), ), {, if, (, functionInfo, ., taintsThis, ), {]
[), ;, }, if, (, !, callNode, ., isNew, (, ), ), {, if, (, functionInfo, ., taintsThis, ), {]
[), ), {, if, (, functionInfo, ., taintsThis, ), {, flags, ., setMutatesThis, (, ), ;, }, }, if, (]
[), ), {, if, (, functionInfo, ., taintsThis, ), {, flags, ., setMutatesThis, (, ), ;, }, }, if, (]
[functionInfo, ., taintsThis, ), {, flags, ., setMutatesThis, (, ), ;, }, }, if, (, functionInfo, ., taintsReturn, ), {]
[functionInfo, ., taintsThis, ), {, flags, ., setMutatesThis, (, ), ;, }, }, if, (, functionInfo, ., taintsReturn, ), {]
[), ;, }, }, if, (, functionInfo, ., taintsReturn, ), {, flags, ., setReturnsTainted, (, ), ;, }, if, (]
[), ;, }, }, if, (, functionInfo, ., taintsReturn, ), {, flags, ., setReturnsTainted, (, ), ;, }, if, (]
[(, ), ;, }, if, (, flags, ., areAllFlagsSet, (, ), ), {, break, ;, }, }, }, if, (]
[(, ), ;, }, if, (, flags, ., areAllFlagsSet, (, ), ), {, break, ;, }, }, }, if, (]
[., areAllFlagsSet, (, ), ), {, break, ;, }, }, }, if, (, callNode, ., isCall, (, ), ), {]
[., areAllFlagsSet, (, ), ), {, break, ;, }, }, }, if, (, callNode, ., isCall, (, ), ), {]
[), {, break, ;, }, }, }, if, (, callNode, ., isCall, (, ), ), {, Preconditions, ., checkState, (]
[), {, break, ;, }, }, }, if, (, callNode, ., isCall, (, ), ), {, Preconditions, ., checkState, (]
[break, ;, }, }, }, if, (, callNode, ., isCall, (, ), ), {, Preconditions, ., checkState, (, compiler, !=]
[if, (, callNode, ., isCall, (, ), ), {, Preconditions, ., checkState, (, compiler, !=, null, ), ;, if, (]
[(, callNode, ., isCall, (, ), ), {, Preconditions, ., checkState, (, compiler, !=, null, ), ;, if, (, !]
[(, callNode, ., isCall, (, ), ), {, Preconditions, ., checkState, (, compiler, !=, null, ), ;, if, (, !]
[(, ), ), {, Preconditions, ., checkState, (, compiler, !=, null, ), ;, if, (, !, NodeUtil, ., functionCallHasSideEffects, (]
[), {, Preconditions, ., checkState, (, compiler, !=, null, ), ;, if, (, !, NodeUtil, ., functionCallHasSideEffects, (, callNode, ,]
[checkState, (, compiler, !=, null, ), ;, if, (, !, NodeUtil, ., functionCallHasSideEffects, (, callNode, ,, compiler, ), ), {]
[checkState, (, compiler, !=, null, ), ;, if, (, !, NodeUtil, ., functionCallHasSideEffects, (, callNode, ,, compiler, ), ), {]
[., functionCallHasSideEffects, (, callNode, ,, compiler, ), ), {, flags, ., clearSideEffectFlags, (, ), ;, }, }, else, if, (]
[., functionCallHasSideEffects, (, callNode, ,, compiler, ), ), {, flags, ., clearSideEffectFlags, (, ), ;, }, }, else, if, (]
[flags, ., clearSideEffectFlags, (, ), ;, }, }, else, if, (, callNode, ., isNew, (, ), ), {, if, (]
[., clearSideEffectFlags, (, ), ;, }, }, else, if, (, callNode, ., isNew, (, ), ), {, if, (, !]
[., clearSideEffectFlags, (, ), ;, }, }, else, if, (, callNode, ., isNew, (, ), ), {, if, (, !]
[;, }, }, else, if, (, callNode, ., isNew, (, ), ), {, if, (, !, NodeUtil, ., constructorCallHasSideEffects, (]
[if, (, callNode, ., isNew, (, ), ), {, if, (, !, NodeUtil, ., constructorCallHasSideEffects, (, callNode, ), ), {]
[if, (, callNode, ., isNew, (, ), ), {, if, (, !, NodeUtil, ., constructorCallHasSideEffects, (, callNode, ), ), {]
[{, if, (, !, NodeUtil, ., constructorCallHasSideEffects, (, callNode, ), ), {, flags, ., clearSideEffectFlags, (, ), ;, }, }]
[{, if, (, !, NodeUtil, ., constructorCallHasSideEffects, (, callNode, ), ), {, flags, ., clearSideEffectFlags, (, ), ;, }, }]
[NodeUtil, ., constructorCallHasSideEffects, (, callNode, ), ), {, flags, ., clearSideEffectFlags, (, ), ;, }, }, callNode, ., setSideEffectFlags, (]
[NodeUtil, ., constructorCallHasSideEffects, (, callNode, ), ), {, flags, ., clearSideEffectFlags, (, ), ;, }, }, callNode, ., setSideEffectFlags, (]
[;, }, }, private, class, FunctionAnalyzer, implements, ScopedCallback, {, private, final, boolean, inExterns, ;, FunctionAnalyzer, (, boolean, inExterns, ), {]
[;, }, }, private, class, FunctionAnalyzer, implements, ScopedCallback, {, private, final, boolean, inExterns, ;, FunctionAnalyzer, (, boolean, inExterns, ), {]
[class, FunctionAnalyzer, implements, ScopedCallback, {, private, final, boolean, inExterns, ;, FunctionAnalyzer, (, boolean, inExterns, ), {, this, ., inExterns, =]
[;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, if, (]
[,, Node, node, ,, Node, parent, ), {, if, (, node, ., isFunction, (, ), ), {, Node, gramp, =]
[,, Node, node, ,, Node, parent, ), {, if, (, node, ., isFunction, (, ), ), {, Node, gramp, =]
[), {, if, (, node, ., isFunction, (, ), ), {, Node, gramp, =, parent, ., getParent, (, ), ;]
[if, (, node, ., isFunction, (, ), ), {, Node, gramp, =, parent, ., getParent, (, ), ;, visitFunction, (]
[node, ., isFunction, (, ), ), {, Node, gramp, =, parent, ., getParent, (, ), ;, visitFunction, (, traversal, ,]
[isFunction, (, ), ), {, Node, gramp, =, parent, ., getParent, (, ), ;, visitFunction, (, traversal, ,, node, ,]
[), ), {, Node, gramp, =, parent, ., getParent, (, ), ;, visitFunction, (, traversal, ,, node, ,, parent, ,]
[=, parent, ., getParent, (, ), ;, visitFunction, (, traversal, ,, node, ,, parent, ,, gramp, ), ;, }, return]
[;, }, @, Override, public, void, visit, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, if, (]
[NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, if, (, inExterns, ), {, return, ;, }, if, (]
[NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, if, (, inExterns, ), {, return, ;, }, if, (]
[traversal, ,, Node, node, ,, Node, parent, ), {, if, (, inExterns, ), {, return, ;, }, if, (, !]
[traversal, ,, Node, node, ,, Node, parent, ), {, if, (, inExterns, ), {, return, ;, }, if, (, !]
[,, Node, parent, ), {, if, (, inExterns, ), {, return, ;, }, if, (, !, NodeUtil, ., nodeTypeMayHaveSideEffects, (]
[), {, if, (, inExterns, ), {, return, ;, }, if, (, !, NodeUtil, ., nodeTypeMayHaveSideEffects, (, node, ), &&]
[{, if, (, inExterns, ), {, return, ;, }, if, (, !, NodeUtil, ., nodeTypeMayHaveSideEffects, (, node, ), &&, !]
[{, if, (, inExterns, ), {, return, ;, }, if, (, !, NodeUtil, ., nodeTypeMayHaveSideEffects, (, node, ), &&, !]
[NodeUtil, ., nodeTypeMayHaveSideEffects, (, node, ), &&, !, node, ., isReturn, (, ), ), {, return, ;, }, if, (]
[NodeUtil, ., nodeTypeMayHaveSideEffects, (, node, ), &&, !, node, ., isReturn, (, ), ), {, return, ;, }, if, (]
[NodeUtil, ., nodeTypeMayHaveSideEffects, (, node, ), &&, !, node, ., isReturn, (, ), ), {, return, ;, }, if, (]
[&&, !, node, ., isReturn, (, ), ), {, return, ;, }, if, (, node, ., isCall, (, ), ||]
[&&, !, node, ., isReturn, (, ), ), {, return, ;, }, if, (, node, ., isCall, (, ), ||]
[), {, return, ;, }, if, (, node, ., isCall, (, ), ||, node, ., isNew, (, ), ), {]
[), {, return, ;, }, if, (, node, ., isCall, (, ), ||, node, ., isNew, (, ), ), {]
[}, if, (, node, ., isCall, (, ), ||, node, ., isNew, (, ), ), {, allFunctionCalls, ., add, (]
[), ||, node, ., isNew, (, ), ), {, allFunctionCalls, ., add, (, node, ), ;, }, Node, enclosingFunction, =]
[), ||, node, ., isNew, (, ), ), {, allFunctionCalls, ., add, (, node, ), ;, }, Node, enclosingFunction, =]
[{, allFunctionCalls, ., add, (, node, ), ;, }, Node, enclosingFunction, =, traversal, ., getEnclosingFunction, (, ), ;, if, (]
[{, allFunctionCalls, ., add, (, node, ), ;, }, Node, enclosingFunction, =, traversal, ., getEnclosingFunction, (, ), ;, if, (]
[., add, (, node, ), ;, }, Node, enclosingFunction, =, traversal, ., getEnclosingFunction, (, ), ;, if, (, enclosingFunction, !=]
[}, Node, enclosingFunction, =, traversal, ., getEnclosingFunction, (, ), ;, if, (, enclosingFunction, !=, null, ), {, FunctionInformation, sideEffectInfo, =]
[}, Node, enclosingFunction, =, traversal, ., getEnclosingFunction, (, ), ;, if, (, enclosingFunction, !=, null, ), {, FunctionInformation, sideEffectInfo, =]
[traversal, ., getEnclosingFunction, (, ), ;, if, (, enclosingFunction, !=, null, ), {, FunctionInformation, sideEffectInfo, =, functionSideEffectMap, ., get, (]
[(, ), ;, if, (, enclosingFunction, !=, null, ), {, FunctionInformation, sideEffectInfo, =, functionSideEffectMap, ., get, (, enclosingFunction, ), ;]
[(, ), ;, if, (, enclosingFunction, !=, null, ), {, FunctionInformation, sideEffectInfo, =, functionSideEffectMap, ., get, (, enclosingFunction, ), ;]
[(, enclosingFunction, !=, null, ), {, FunctionInformation, sideEffectInfo, =, functionSideEffectMap, ., get, (, enclosingFunction, ), ;, Preconditions, ., checkNotNull, (]
[{, FunctionInformation, sideEffectInfo, =, functionSideEffectMap, ., get, (, enclosingFunction, ), ;, Preconditions, ., checkNotNull, (, sideEffectInfo, ), ;, if, (]
[{, FunctionInformation, sideEffectInfo, =, functionSideEffectMap, ., get, (, enclosingFunction, ), ;, Preconditions, ., checkNotNull, (, sideEffectInfo, ), ;, if, (]
[functionSideEffectMap, ., get, (, enclosingFunction, ), ;, Preconditions, ., checkNotNull, (, sideEffectInfo, ), ;, if, (, NodeUtil, ., isAssignmentOp, (]
[enclosingFunction, ), ;, Preconditions, ., checkNotNull, (, sideEffectInfo, ), ;, if, (, NodeUtil, ., isAssignmentOp, (, node, ), ), {]
[;, Preconditions, ., checkNotNull, (, sideEffectInfo, ), ;, if, (, NodeUtil, ., isAssignmentOp, (, node, ), ), {, visitAssignmentOrUnaryOperator, (]
[., checkNotNull, (, sideEffectInfo, ), ;, if, (, NodeUtil, ., isAssignmentOp, (, node, ), ), {, visitAssignmentOrUnaryOperator, (, sideEffectInfo, ,]
[., checkNotNull, (, sideEffectInfo, ), ;, if, (, NodeUtil, ., isAssignmentOp, (, node, ), ), {, visitAssignmentOrUnaryOperator, (, sideEffectInfo, ,]
[if, (, NodeUtil, ., isAssignmentOp, (, node, ), ), {, visitAssignmentOrUnaryOperator, (, sideEffectInfo, ,, traversal, ., getScope, (, ), ,]
[NodeUtil, ., isAssignmentOp, (, node, ), ), {, visitAssignmentOrUnaryOperator, (, sideEffectInfo, ,, traversal, ., getScope, (, ), ,, node, ,]
[NodeUtil, ., isAssignmentOp, (, node, ), ), {, visitAssignmentOrUnaryOperator, (, sideEffectInfo, ,, traversal, ., getScope, (, ), ,, node, ,]
[), {, visitAssignmentOrUnaryOperator, (, sideEffectInfo, ,, traversal, ., getScope, (, ), ,, node, ,, node, ., getFirstChild, (, ), ,]
[), {, visitAssignmentOrUnaryOperator, (, sideEffectInfo, ,, traversal, ., getScope, (, ), ,, node, ,, node, ., getFirstChild, (, ), ,]
[node, ,, node, ., getFirstChild, (, ), ,, node, ., getLastChild, (, ), ), ;, }, else, {, switch, (]
[node, ,, node, ., getFirstChild, (, ), ,, node, ., getLastChild, (, ), ), ;, }, else, {, switch, (]
[node, ., getLastChild, (, ), ), ;, }, else, {, switch, (, node, ., getType, (, ), ), {, case]
[node, ., getLastChild, (, ), ), ;, }, else, {, switch, (, node, ., getType, (, ), ), {, case]
[), ;, }, else, {, switch, (, node, ., getType, (, ), ), {, case, Token, ., CALL, :, case]
[), ;, }, else, {, switch, (, node, ., getType, (, ), ), {, case, Token, ., CALL, :, case]
[{, switch, (, node, ., getType, (, ), ), {, case, Token, ., CALL, :, case, Token, ., NEW, :]
[(, node, ., getType, (, ), ), {, case, Token, ., CALL, :, case, Token, ., NEW, :, visitCall, (]
[., getType, (, ), ), {, case, Token, ., CALL, :, case, Token, ., NEW, :, visitCall, (, sideEffectInfo, ,]
[case, Token, ., CALL, :, case, Token, ., NEW, :, visitCall, (, sideEffectInfo, ,, node, ), ;, break, ;, case]
[case, Token, ., CALL, :, case, Token, ., NEW, :, visitCall, (, sideEffectInfo, ,, node, ), ;, break, ;, case]
[case, Token, ., NEW, :, visitCall, (, sideEffectInfo, ,, node, ), ;, break, ;, case, Token, ., DELPROP, :, case]
[case, Token, ., NEW, :, visitCall, (, sideEffectInfo, ,, node, ), ;, break, ;, case, Token, ., DELPROP, :, case]
[visitCall, (, sideEffectInfo, ,, node, ), ;, break, ;, case, Token, ., DELPROP, :, case, Token, ., DEC, :, case]
[visitCall, (, sideEffectInfo, ,, node, ), ;, break, ;, case, Token, ., DELPROP, :, case, Token, ., DEC, :, case]
[node, ), ;, break, ;, case, Token, ., DELPROP, :, case, Token, ., DEC, :, case, Token, ., INC, :]
[;, break, ;, case, Token, ., DELPROP, :, case, Token, ., DEC, :, case, Token, ., INC, :, visitAssignmentOrUnaryOperator, (]
[;, case, Token, ., DELPROP, :, case, Token, ., DEC, :, case, Token, ., INC, :, visitAssignmentOrUnaryOperator, (, sideEffectInfo, ,]
[;, case, Token, ., DELPROP, :, case, Token, ., DEC, :, case, Token, ., INC, :, visitAssignmentOrUnaryOperator, (, sideEffectInfo, ,]
[case, Token, ., DEC, :, case, Token, ., INC, :, visitAssignmentOrUnaryOperator, (, sideEffectInfo, ,, traversal, ., getScope, (, ), ,]
[., DEC, :, case, Token, ., INC, :, visitAssignmentOrUnaryOperator, (, sideEffectInfo, ,, traversal, ., getScope, (, ), ,, node, ,]
[., DEC, :, case, Token, ., INC, :, visitAssignmentOrUnaryOperator, (, sideEffectInfo, ,, traversal, ., getScope, (, ), ,, node, ,]
[INC, :, visitAssignmentOrUnaryOperator, (, sideEffectInfo, ,, traversal, ., getScope, (, ), ,, node, ,, node, ., getFirstChild, (, ), ,]
[traversal, ., getScope, (, ), ,, node, ,, node, ., getFirstChild, (, ), ,, null, ), ;, break, ;, case]
[traversal, ., getScope, (, ), ,, node, ,, node, ., getFirstChild, (, ), ,, null, ), ;, break, ;, case]
[), ,, node, ,, node, ., getFirstChild, (, ), ,, null, ), ;, break, ;, case, Token, ., NAME, :]
[), ,, node, ,, node, ., getFirstChild, (, ), ,, null, ), ;, break, ;, case, Token, ., NAME, :]
[node, ., getFirstChild, (, ), ,, null, ), ;, break, ;, case, Token, ., NAME, :, Preconditions, ., checkArgument, (]
[node, ., getFirstChild, (, ), ,, null, ), ;, break, ;, case, Token, ., NAME, :, Preconditions, ., checkArgument, (]
[), ,, null, ), ;, break, ;, case, Token, ., NAME, :, Preconditions, ., checkArgument, (, NodeUtil, ., isVarDeclaration, (]
[case, Token, ., NAME, :, Preconditions, ., checkArgument, (, NodeUtil, ., isVarDeclaration, (, node, ), ), ;, Node, value, =]
[case, Token, ., NAME, :, Preconditions, ., checkArgument, (, NodeUtil, ., isVarDeclaration, (, node, ), ), ;, Node, value, =]
[(, NodeUtil, ., isVarDeclaration, (, node, ), ), ;, Node, value, =, node, ., getFirstChild, (, ), ;, if, (]
[(, NodeUtil, ., isVarDeclaration, (, node, ), ), ;, Node, value, =, node, ., getFirstChild, (, ), ;, if, (]
[(, NodeUtil, ., isVarDeclaration, (, node, ), ), ;, Node, value, =, node, ., getFirstChild, (, ), ;, if, (]
[., isVarDeclaration, (, node, ), ), ;, Node, value, =, node, ., getFirstChild, (, ), ;, if, (, value, !=]
[(, node, ), ), ;, Node, value, =, node, ., getFirstChild, (, ), ;, if, (, value, !=, null, &&]
[node, ), ), ;, Node, value, =, node, ., getFirstChild, (, ), ;, if, (, value, !=, null, &&, !]
[node, ), ), ;, Node, value, =, node, ., getFirstChild, (, ), ;, if, (, value, !=, null, &&, !]
[Node, value, =, node, ., getFirstChild, (, ), ;, if, (, value, !=, null, &&, !, NodeUtil, ., evaluatesToLocalValue, (]
[), ;, if, (, value, !=, null, &&, !, NodeUtil, ., evaluatesToLocalValue, (, value, ), ), {, Scope, scope, =]
[), ;, if, (, value, !=, null, &&, !, NodeUtil, ., evaluatesToLocalValue, (, value, ), ), {, Scope, scope, =]
[NodeUtil, ., evaluatesToLocalValue, (, value, ), ), {, Scope, scope, =, traversal, ., getScope, (, ), ;, Var, var, =]
[NodeUtil, ., evaluatesToLocalValue, (, value, ), ), {, Scope, scope, =, traversal, ., getScope, (, ), ;, Var, var, =]
[value, ), ), {, Scope, scope, =, traversal, ., getScope, (, ), ;, Var, var, =, scope, ., getVar, (]
[value, ), ), {, Scope, scope, =, traversal, ., getScope, (, ), ;, Var, var, =, scope, ., getVar, (]
[traversal, ., getScope, (, ), ;, Var, var, =, scope, ., getVar, (, node, ., getString, (, ), ), ;]
[traversal, ., getScope, (, ), ;, Var, var, =, scope, ., getVar, (, node, ., getString, (, ), ), ;]
[), ;, Var, var, =, scope, ., getVar, (, node, ., getString, (, ), ), ;, sideEffectInfo, ., blacklistLocal, (]
[getVar, (, node, ., getString, (, ), ), ;, sideEffectInfo, ., blacklistLocal, (, var, ), ;, }, break, ;, case]
[getVar, (, node, ., getString, (, ), ), ;, sideEffectInfo, ., blacklistLocal, (, var, ), ;, }, break, ;, case]
[getString, (, ), ), ;, sideEffectInfo, ., blacklistLocal, (, var, ), ;, }, break, ;, case, Token, ., THROW, :]
[), ), ;, sideEffectInfo, ., blacklistLocal, (, var, ), ;, }, break, ;, case, Token, ., THROW, :, visitThrow, (]
[(, var, ), ;, }, break, ;, case, Token, ., THROW, :, visitThrow, (, sideEffectInfo, ), ;, break, ;, case]
[(, var, ), ;, }, break, ;, case, Token, ., THROW, :, visitThrow, (, sideEffectInfo, ), ;, break, ;, case]
[;, case, Token, ., THROW, :, visitThrow, (, sideEffectInfo, ), ;, break, ;, case, Token, ., RETURN, :, if, (]
[;, case, Token, ., THROW, :, visitThrow, (, sideEffectInfo, ), ;, break, ;, case, Token, ., RETURN, :, if, (]
[;, case, Token, ., THROW, :, visitThrow, (, sideEffectInfo, ), ;, break, ;, case, Token, ., RETURN, :, if, (]
[visitThrow, (, sideEffectInfo, ), ;, break, ;, case, Token, ., RETURN, :, if, (, node, ., hasChildren, (, ), &&]
[(, sideEffectInfo, ), ;, break, ;, case, Token, ., RETURN, :, if, (, node, ., hasChildren, (, ), &&, !]
[(, sideEffectInfo, ), ;, break, ;, case, Token, ., RETURN, :, if, (, node, ., hasChildren, (, ), &&, !]
[break, ;, case, Token, ., RETURN, :, if, (, node, ., hasChildren, (, ), &&, !, NodeUtil, ., evaluatesToLocalValue, (]
[break, ;, case, Token, ., RETURN, :, if, (, node, ., hasChildren, (, ), &&, !, NodeUtil, ., evaluatesToLocalValue, (]
[(, node, ., hasChildren, (, ), &&, !, NodeUtil, ., evaluatesToLocalValue, (, node, ., getFirstChild, (, ), ), ), {]
[(, node, ., hasChildren, (, ), &&, !, NodeUtil, ., evaluatesToLocalValue, (, node, ., getFirstChild, (, ), ), ), {]
[node, ., getFirstChild, (, ), ), ), {, sideEffectInfo, ., setTaintsReturn, (, ), ;, }, break, ;, default, :, throw]
[(, ), ), ), {, sideEffectInfo, ., setTaintsReturn, (, ), ;, }, break, ;, default, :, throw, new, IllegalArgumentException, (]
[(, ), ), ), {, sideEffectInfo, ., setTaintsReturn, (, ), ;, }, break, ;, default, :, throw, new, IllegalArgumentException, (]
[), ), {, sideEffectInfo, ., setTaintsReturn, (, ), ;, }, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unhandled side effect node type ", +]
[), ), {, sideEffectInfo, ., setTaintsReturn, (, ), ;, }, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unhandled side effect node type ", +]
[., setTaintsReturn, (, ), ;, }, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unhandled side effect node type ", +, Token, ., name, (]
[., setTaintsReturn, (, ), ;, }, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unhandled side effect node type ", +, Token, ., name, (]
[void, enterScope, (, NodeTraversal, t, ), {, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (]
[void, enterScope, (, NodeTraversal, t, ), {, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (]
[(, NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, FunctionInformation, sideEffectInfo, =]
[(, NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, FunctionInformation, sideEffectInfo, =]
[{, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, FunctionInformation, sideEffectInfo, =, functionSideEffectMap, ., get, (]
[{, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, FunctionInformation, sideEffectInfo, =, functionSideEffectMap, ., get, (]
[{, return, ;, }, FunctionInformation, sideEffectInfo, =, functionSideEffectMap, ., get, (, t, ., getScopeRoot, (, ), ), ;, if, (]
[{, return, ;, }, FunctionInformation, sideEffectInfo, =, functionSideEffectMap, ., get, (, t, ., getScopeRoot, (, ), ), ;, if, (]
[functionSideEffectMap, ., get, (, t, ., getScopeRoot, (, ), ), ;, if, (, sideEffectInfo, ., mutatesGlobalState, (, ), ), {]
[functionSideEffectMap, ., get, (, t, ., getScopeRoot, (, ), ), ;, if, (, sideEffectInfo, ., mutatesGlobalState, (, ), ), {]
[), ), {, sideEffectInfo, ., resetLocalVars, (, ), ;, return, ;, }, for, (, Iterator, <, Var, >, i, =]
[), ), {, sideEffectInfo, ., resetLocalVars, (, ), ;, return, ;, }, for, (, Iterator, <, Var, >, i, =]
[), ), {, sideEffectInfo, ., resetLocalVars, (, ), ;, return, ;, }, for, (, Iterator, <, Var, >, i, =]
[;, }, for, (, Iterator, <, Var, >, i, =, t, ., getScope, (, ), ., getVars, (, ), ;]
[;, }, for, (, Iterator, <, Var, >, i, =, t, ., getScope, (, ), ., getVars, (, ), ;]
[., getScope, (, ), ., getVars, (, ), ;, i, ., hasNext, (, ), ;, ), {, Var, v, =]
[., getScope, (, ), ., getVars, (, ), ;, i, ., hasNext, (, ), ;, ), {, Var, v, =]
[i, ., hasNext, (, ), ;, ), {, Var, v, =, i, ., next, (, ), ;, boolean, localVar, =]
[), ;, ), {, Var, v, =, i, ., next, (, ), ;, boolean, localVar, =, false, ;, if, (]
[), ;, ), {, Var, v, =, i, ., next, (, ), ;, boolean, localVar, =, false, ;, if, (]
[), ;, ), {, Var, v, =, i, ., next, (, ), ;, boolean, localVar, =, false, ;, if, (]
[), ;, boolean, localVar, =, false, ;, if, (, v, ., getParentNode, (, ), ., isVar, (, ), ), {]
[), ;, boolean, localVar, =, false, ;, if, (, v, ., getParentNode, (, ), ., isVar, (, ), ), {]
[), ;, boolean, localVar, =, false, ;, if, (, v, ., getParentNode, (, ), ., isVar, (, ), ), {]
[;, if, (, v, ., getParentNode, (, ), ., isVar, (, ), ), {, sideEffectInfo, ., knownLocals, ., add, (]
[;, if, (, v, ., getParentNode, (, ), ., isVar, (, ), ), {, sideEffectInfo, ., knownLocals, ., add, (]
[), ., isVar, (, ), ), {, sideEffectInfo, ., knownLocals, ., add, (, v, ., getName, (, ), ), ;]
[isVar, (, ), ), {, sideEffectInfo, ., knownLocals, ., add, (, v, ., getName, (, ), ), ;, localVar, =]
[sideEffectInfo, ., knownLocals, ., add, (, v, ., getName, (, ), ), ;, localVar, =, true, ;, }, if, (]
[sideEffectInfo, ., knownLocals, ., add, (, v, ., getName, (, ), ), ;, localVar, =, true, ;, }, if, (]
[., knownLocals, ., add, (, v, ., getName, (, ), ), ;, localVar, =, true, ;, }, if, (, !]
[., add, (, v, ., getName, (, ), ), ;, localVar, =, true, ;, }, if, (, !, localVar, ||]
[., add, (, v, ., getName, (, ), ), ;, localVar, =, true, ;, }, if, (, !, localVar, ||]
[., add, (, v, ., getName, (, ), ), ;, localVar, =, true, ;, }, if, (, !, localVar, ||]
[(, ), ), ;, localVar, =, true, ;, }, if, (, !, localVar, ||, sideEffectInfo, ., blacklisted, ., contains, (]
[true, ;, }, if, (, !, localVar, ||, sideEffectInfo, ., blacklisted, ., contains, (, v, ), ), {, if, (]
[true, ;, }, if, (, !, localVar, ||, sideEffectInfo, ., blacklisted, ., contains, (, v, ), ), {, if, (]
[true, ;, }, if, (, !, localVar, ||, sideEffectInfo, ., blacklisted, ., contains, (, v, ), ), {, if, (]
[localVar, ||, sideEffectInfo, ., blacklisted, ., contains, (, v, ), ), {, if, (, sideEffectInfo, ., taintedLocals, ., contains, (]
[blacklisted, ., contains, (, v, ), ), {, if, (, sideEffectInfo, ., taintedLocals, ., contains, (, v, ), ), {]
[blacklisted, ., contains, (, v, ), ), {, if, (, sideEffectInfo, ., taintedLocals, ., contains, (, v, ), ), {]
[), {, if, (, sideEffectInfo, ., taintedLocals, ., contains, (, v, ), ), {, sideEffectInfo, ., setTaintsUnknown, (, ), ;]
[), {, if, (, sideEffectInfo, ., taintedLocals, ., contains, (, v, ), ), {, sideEffectInfo, ., setTaintsUnknown, (, ), ;]
[), ), {, sideEffectInfo, ., setTaintsUnknown, (, ), ;, sideEffectInfo, ., resetLocalVars, (, ), ;, break, ;, }, }, }]
[), ), {, sideEffectInfo, ., setTaintsUnknown, (, ), ;, sideEffectInfo, ., resetLocalVars, (, ), ;, break, ;, }, }, }]
[., setTaintsUnknown, (, ), ;, sideEffectInfo, ., resetLocalVars, (, ), ;, break, ;, }, }, }, sideEffectInfo, ., taintedLocals, =]
[(, ), ;, sideEffectInfo, ., resetLocalVars, (, ), ;, break, ;, }, }, }, sideEffectInfo, ., taintedLocals, =, null, ;]
[(, ), ;, sideEffectInfo, ., resetLocalVars, (, ), ;, break, ;, }, }, }, sideEffectInfo, ., taintedLocals, =, null, ;]
[., resetLocalVars, (, ), ;, break, ;, }, }, }, sideEffectInfo, ., taintedLocals, =, null, ;, sideEffectInfo, ., blacklisted, =]
[visitAssignmentOrUnaryOperator, (, FunctionInformation, sideEffectInfo, ,, Scope, scope, ,, Node, op, ,, Node, lhs, ,, Node, rhs, ), {, if, (]
[visitAssignmentOrUnaryOperator, (, FunctionInformation, sideEffectInfo, ,, Scope, scope, ,, Node, op, ,, Node, lhs, ,, Node, rhs, ), {, if, (]
[,, Node, lhs, ,, Node, rhs, ), {, if, (, lhs, ., isName, (, ), ), {, Var, var, =]
[,, Node, lhs, ,, Node, rhs, ), {, if, (, lhs, ., isName, (, ), ), {, Var, var, =]
[Node, rhs, ), {, if, (, lhs, ., isName, (, ), ), {, Var, var, =, scope, ., getVar, (]
[Node, rhs, ), {, if, (, lhs, ., isName, (, ), ), {, Var, var, =, scope, ., getVar, (]
[(, ), ), {, Var, var, =, scope, ., getVar, (, lhs, ., getString, (, ), ), ;, if, (]
[(, ), ), {, Var, var, =, scope, ., getVar, (, lhs, ., getString, (, ), ), ;, if, (]
[(, ), ), {, Var, var, =, scope, ., getVar, (, lhs, ., getString, (, ), ), ;, if, (]
[), {, Var, var, =, scope, ., getVar, (, lhs, ., getString, (, ), ), ;, if, (, var, ==]
[Var, var, =, scope, ., getVar, (, lhs, ., getString, (, ), ), ;, if, (, var, ==, null, ||]
[Var, var, =, scope, ., getVar, (, lhs, ., getString, (, ), ), ;, if, (, var, ==, null, ||]
[Var, var, =, scope, ., getVar, (, lhs, ., getString, (, ), ), ;, if, (, var, ==, null, ||]
[., getVar, (, lhs, ., getString, (, ), ), ;, if, (, var, ==, null, ||, var, ., scope, !=]
[lhs, ., getString, (, ), ), ;, if, (, var, ==, null, ||, var, ., scope, !=, scope, ), {]
[lhs, ., getString, (, ), ), ;, if, (, var, ==, null, ||, var, ., scope, !=, scope, ), {]
[var, ==, null, ||, var, ., scope, !=, scope, ), {, sideEffectInfo, ., setTaintsGlobalState, (, ), ;, }, else, {]
[var, ==, null, ||, var, ., scope, !=, scope, ), {, sideEffectInfo, ., setTaintsGlobalState, (, ), ;, }, else, {]
[var, ., scope, !=, scope, ), {, sideEffectInfo, ., setTaintsGlobalState, (, ), ;, }, else, {, Preconditions, ., checkState, (]
[var, ., scope, !=, scope, ), {, sideEffectInfo, ., setTaintsGlobalState, (, ), ;, }, else, {, Preconditions, ., checkState, (]
[var, ., scope, !=, scope, ), {, sideEffectInfo, ., setTaintsGlobalState, (, ), ;, }, else, {, Preconditions, ., checkState, (]
[var, ., scope, !=, scope, ), {, sideEffectInfo, ., setTaintsGlobalState, (, ), ;, }, else, {, Preconditions, ., checkState, (]
[scope, ), {, sideEffectInfo, ., setTaintsGlobalState, (, ), ;, }, else, {, Preconditions, ., checkState, (, NodeUtil, ., isAssignmentOp, (]
[sideEffectInfo, ., setTaintsGlobalState, (, ), ;, }, else, {, Preconditions, ., checkState, (, NodeUtil, ., isAssignmentOp, (, op, ), ||]
[setTaintsGlobalState, (, ), ;, }, else, {, Preconditions, ., checkState, (, NodeUtil, ., isAssignmentOp, (, op, ), ||, isIncDec, (]
[;, }, else, {, Preconditions, ., checkState, (, NodeUtil, ., isAssignmentOp, (, op, ), ||, isIncDec, (, op, ), ||]
[;, }, else, {, Preconditions, ., checkState, (, NodeUtil, ., isAssignmentOp, (, op, ), ||, isIncDec, (, op, ), ||]
[., isAssignmentOp, (, op, ), ||, isIncDec, (, op, ), ||, op, ., isDelProp, (, ), ), ;, if, (]
[., isAssignmentOp, (, op, ), ||, isIncDec, (, op, ), ||, op, ., isDelProp, (, ), ), ;, if, (]
[., isAssignmentOp, (, op, ), ||, isIncDec, (, op, ), ||, op, ., isDelProp, (, ), ), ;, if, (]
[., isAssignmentOp, (, op, ), ||, isIncDec, (, op, ), ||, op, ., isDelProp, (, ), ), ;, if, (]
[(, op, ), ||, isIncDec, (, op, ), ||, op, ., isDelProp, (, ), ), ;, if, (, rhs, !=]
[), ||, isIncDec, (, op, ), ||, op, ., isDelProp, (, ), ), ;, if, (, rhs, !=, null, &&]
[), ||, isIncDec, (, op, ), ||, op, ., isDelProp, (, ), ), ;, if, (, rhs, !=, null, &&]
[||, op, ., isDelProp, (, ), ), ;, if, (, rhs, !=, null, &&, op, ., isAssign, (, ), &&]
[op, ., isDelProp, (, ), ), ;, if, (, rhs, !=, null, &&, op, ., isAssign, (, ), &&, !]
[op, ., isDelProp, (, ), ), ;, if, (, rhs, !=, null, &&, op, ., isAssign, (, ), &&, !]
[), ), ;, if, (, rhs, !=, null, &&, op, ., isAssign, (, ), &&, !, NodeUtil, ., evaluatesToLocalValue, (]
[(, rhs, !=, null, &&, op, ., isAssign, (, ), &&, !, NodeUtil, ., evaluatesToLocalValue, (, rhs, ), ), {]
[(, rhs, !=, null, &&, op, ., isAssign, (, ), &&, !, NodeUtil, ., evaluatesToLocalValue, (, rhs, ), ), {]
[&&, op, ., isAssign, (, ), &&, !, NodeUtil, ., evaluatesToLocalValue, (, rhs, ), ), {, sideEffectInfo, ., blacklistLocal, (]
[., evaluatesToLocalValue, (, rhs, ), ), {, sideEffectInfo, ., blacklistLocal, (, var, ), ;, }, }, }, else, if, (]
[., evaluatesToLocalValue, (, rhs, ), ), {, sideEffectInfo, ., blacklistLocal, (, var, ), ;, }, }, }, else, if, (]
[), ), {, sideEffectInfo, ., blacklistLocal, (, var, ), ;, }, }, }, else, if, (, NodeUtil, ., isGet, (]
[(, var, ), ;, }, }, }, else, if, (, NodeUtil, ., isGet, (, lhs, ), ), {, if, (]
[(, var, ), ;, }, }, }, else, if, (, NodeUtil, ., isGet, (, lhs, ), ), {, if, (]
[(, var, ), ;, }, }, }, else, if, (, NodeUtil, ., isGet, (, lhs, ), ), {, if, (]
[., isGet, (, lhs, ), ), {, if, (, lhs, ., getFirstChild, (, ), ., isThis, (, ), ), {]
[., isGet, (, lhs, ), ), {, if, (, lhs, ., getFirstChild, (, ), ., isThis, (, ), ), {]
[(, ), ., isThis, (, ), ), {, sideEffectInfo, ., setTaintsThis, (, ), ;, }, else, {, Var, var, =]
[), ), {, sideEffectInfo, ., setTaintsThis, (, ), ;, }, else, {, Var, var, =, null, ;, Node, objectNode, =]
[), ), {, sideEffectInfo, ., setTaintsThis, (, ), ;, }, else, {, Var, var, =, null, ;, Node, objectNode, =]
[;, }, else, {, Var, var, =, null, ;, Node, objectNode, =, lhs, ., getFirstChild, (, ), ;, if, (]
[;, }, else, {, Var, var, =, null, ;, Node, objectNode, =, lhs, ., getFirstChild, (, ), ;, if, (]
[null, ;, Node, objectNode, =, lhs, ., getFirstChild, (, ), ;, if, (, objectNode, ., isName, (, ), ), {]
[Node, objectNode, =, lhs, ., getFirstChild, (, ), ;, if, (, objectNode, ., isName, (, ), ), {, var, =]
[Node, objectNode, =, lhs, ., getFirstChild, (, ), ;, if, (, objectNode, ., isName, (, ), ), {, var, =]
[., getFirstChild, (, ), ;, if, (, objectNode, ., isName, (, ), ), {, var, =, scope, ., getVar, (]
[., getFirstChild, (, ), ;, if, (, objectNode, ., isName, (, ), ), {, var, =, scope, ., getVar, (]
[(, ), ), {, var, =, scope, ., getVar, (, objectNode, ., getString, (, ), ), ;, }, if, (]
[(, ), ), {, var, =, scope, ., getVar, (, objectNode, ., getString, (, ), ), ;, }, if, (]
[(, ), ), {, var, =, scope, ., getVar, (, objectNode, ., getString, (, ), ), ;, }, if, (]
[), {, var, =, scope, ., getVar, (, objectNode, ., getString, (, ), ), ;, }, if, (, var, ==]
[var, =, scope, ., getVar, (, objectNode, ., getString, (, ), ), ;, }, if, (, var, ==, null, ||]
[var, =, scope, ., getVar, (, objectNode, ., getString, (, ), ), ;, }, if, (, var, ==, null, ||]
[var, =, scope, ., getVar, (, objectNode, ., getString, (, ), ), ;, }, if, (, var, ==, null, ||]
[getVar, (, objectNode, ., getString, (, ), ), ;, }, if, (, var, ==, null, ||, var, ., scope, !=]
[., getString, (, ), ), ;, }, if, (, var, ==, null, ||, var, ., scope, !=, scope, ), {]
[., getString, (, ), ), ;, }, if, (, var, ==, null, ||, var, ., scope, !=, scope, ), {]
[var, ==, null, ||, var, ., scope, !=, scope, ), {, sideEffectInfo, ., setTaintsUnknown, (, ), ;, }, else, {]
[var, ==, null, ||, var, ., scope, !=, scope, ), {, sideEffectInfo, ., setTaintsUnknown, (, ), ;, }, else, {]
[var, ., scope, !=, scope, ), {, sideEffectInfo, ., setTaintsUnknown, (, ), ;, }, else, {, sideEffectInfo, ., addTaintedLocalObject, (]
[., setTaintsUnknown, (, ), ;, }, else, {, sideEffectInfo, ., addTaintedLocalObject, (, var, ), ;, }, }, }, else, {]
[., setTaintsUnknown, (, ), ;, }, else, {, sideEffectInfo, ., addTaintedLocalObject, (, var, ), ;, }, }, }, else, {]
[., setTaintsUnknown, (, ), ;, }, }, private, void, visitCall, (, FunctionInformation, sideEffectInfo, ,, Node, node, ), {, if, (]
[., setTaintsUnknown, (, ), ;, }, }, private, void, visitCall, (, FunctionInformation, sideEffectInfo, ,, Node, node, ), {, if, (]
[., setTaintsUnknown, (, ), ;, }, }, private, void, visitCall, (, FunctionInformation, sideEffectInfo, ,, Node, node, ), {, if, (]
[}, private, void, visitCall, (, FunctionInformation, sideEffectInfo, ,, Node, node, ), {, if, (, node, ., isCall, (, ), &&]
[private, void, visitCall, (, FunctionInformation, sideEffectInfo, ,, Node, node, ), {, if, (, node, ., isCall, (, ), &&, !]
[private, void, visitCall, (, FunctionInformation, sideEffectInfo, ,, Node, node, ), {, if, (, node, ., isCall, (, ), &&, !]
[FunctionInformation, sideEffectInfo, ,, Node, node, ), {, if, (, node, ., isCall, (, ), &&, !, NodeUtil, ., functionCallHasSideEffects, (]
[,, Node, node, ), {, if, (, node, ., isCall, (, ), &&, !, NodeUtil, ., functionCallHasSideEffects, (, node, ,]
[isCall, (, ), &&, !, NodeUtil, ., functionCallHasSideEffects, (, node, ,, compiler, ), ), {, return, ;, }, if, (]
[isCall, (, ), &&, !, NodeUtil, ., functionCallHasSideEffects, (, node, ,, compiler, ), ), {, return, ;, }, if, (]
[isCall, (, ), &&, !, NodeUtil, ., functionCallHasSideEffects, (, node, ,, compiler, ), ), {, return, ;, }, if, (]
[., functionCallHasSideEffects, (, node, ,, compiler, ), ), {, return, ;, }, if, (, node, ., isNew, (, ), &&]
[functionCallHasSideEffects, (, node, ,, compiler, ), ), {, return, ;, }, if, (, node, ., isNew, (, ), &&, !]
[functionCallHasSideEffects, (, node, ,, compiler, ), ), {, return, ;, }, if, (, node, ., isNew, (, ), &&, !]
[compiler, ), ), {, return, ;, }, if, (, node, ., isNew, (, ), &&, !, NodeUtil, ., constructorCallHasSideEffects, (]
[if, (, node, ., isNew, (, ), &&, !, NodeUtil, ., constructorCallHasSideEffects, (, node, ), ), {, return, ;, }]
[if, (, node, ., isNew, (, ), &&, !, NodeUtil, ., constructorCallHasSideEffects, (, node, ), ), {, return, ;, }]
[isNew, (, ), &&, !, NodeUtil, ., constructorCallHasSideEffects, (, node, ), ), {, return, ;, }, sideEffectInfo, ., appendCall, (]
[), ;, }, private, void, visitFunction, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ,, Node, gramp, ), {]
[), ;, }, private, void, visitFunction, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ,, Node, gramp, ), {]
[void, visitFunction, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ,, Node, gramp, ), {, Preconditions, ., checkArgument, (]
[visitFunction, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ,, Node, gramp, ), {, Preconditions, ., checkArgument, (, !]
[visitFunction, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ,, Node, gramp, ), {, Preconditions, ., checkArgument, (, !]
[,, Node, node, ,, Node, parent, ,, Node, gramp, ), {, Preconditions, ., checkArgument, (, !, functionSideEffectMap, ., containsKey, (]
[Node, gramp, ), {, Preconditions, ., checkArgument, (, !, functionSideEffectMap, ., containsKey, (, node, ), ), ;, FunctionInformation, sideEffectInfo, =]
[{, Preconditions, ., checkArgument, (, !, functionSideEffectMap, ., containsKey, (, node, ), ), ;, FunctionInformation, sideEffectInfo, =, new, FunctionInformation, (]
[checkArgument, (, !, functionSideEffectMap, ., containsKey, (, node, ), ), ;, FunctionInformation, sideEffectInfo, =, new, FunctionInformation, (, inExterns, ), ;]
[checkArgument, (, !, functionSideEffectMap, ., containsKey, (, node, ), ), ;, FunctionInformation, sideEffectInfo, =, new, FunctionInformation, (, inExterns, ), ;]
[., containsKey, (, node, ), ), ;, FunctionInformation, sideEffectInfo, =, new, FunctionInformation, (, inExterns, ), ;, functionSideEffectMap, ., put, (]
[(, node, ), ), ;, FunctionInformation, sideEffectInfo, =, new, FunctionInformation, (, inExterns, ), ;, functionSideEffectMap, ., put, (, node, ,]
[FunctionInformation, sideEffectInfo, =, new, FunctionInformation, (, inExterns, ), ;, functionSideEffectMap, ., put, (, node, ,, sideEffectInfo, ), ;, if, (]
[inExterns, ), ;, functionSideEffectMap, ., put, (, node, ,, sideEffectInfo, ), ;, if, (, inExterns, ), {, JSType, jstype, =]
[inExterns, ), ;, functionSideEffectMap, ., put, (, node, ,, sideEffectInfo, ), ;, if, (, inExterns, ), {, JSType, jstype, =]
[sideEffectInfo, ), ;, if, (, inExterns, ), {, JSType, jstype, =, node, ., getJSType, (, ), ;, boolean, knownLocalResult, =]
[inExterns, ), {, JSType, jstype, =, node, ., getJSType, (, ), ;, boolean, knownLocalResult, =, false, ;, FunctionType, functionType, =]
[inExterns, ), {, JSType, jstype, =, node, ., getJSType, (, ), ;, boolean, knownLocalResult, =, false, ;, FunctionType, functionType, =]
[jstype, =, node, ., getJSType, (, ), ;, boolean, knownLocalResult, =, false, ;, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (]
[(, ), ;, boolean, knownLocalResult, =, false, ;, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, jstype, ), ;, if, (]
[(, ), ;, boolean, knownLocalResult, =, false, ;, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, jstype, ), ;, if, (]
[;, boolean, knownLocalResult, =, false, ;, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, jstype, ), ;, if, (, functionType, !=]
[FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, jstype, ), ;, if, (, functionType, !=, null, ), {, JSType, jstypeReturn, =]
[FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, jstype, ), ;, if, (, functionType, !=, null, ), {, JSType, jstypeReturn, =]
[), ;, if, (, functionType, !=, null, ), {, JSType, jstypeReturn, =, functionType, ., getReturnType, (, ), ;, if, (]
[if, (, functionType, !=, null, ), {, JSType, jstypeReturn, =, functionType, ., getReturnType, (, ), ;, if, (, isLocalValueType, (]
[functionType, !=, null, ), {, JSType, jstypeReturn, =, functionType, ., getReturnType, (, ), ;, if, (, isLocalValueType, (, jstypeReturn, ,]
[{, JSType, jstypeReturn, =, functionType, ., getReturnType, (, ), ;, if, (, isLocalValueType, (, jstypeReturn, ,, true, ), ), {]
[jstypeReturn, =, functionType, ., getReturnType, (, ), ;, if, (, isLocalValueType, (, jstypeReturn, ,, true, ), ), {, knownLocalResult, =]
[), ;, if, (, isLocalValueType, (, jstypeReturn, ,, true, ), ), {, knownLocalResult, =, true, ;, }, }, if, (]
[;, if, (, isLocalValueType, (, jstypeReturn, ,, true, ), ), {, knownLocalResult, =, true, ;, }, }, if, (, !]
[isLocalValueType, (, jstypeReturn, ,, true, ), ), {, knownLocalResult, =, true, ;, }, }, if, (, !, knownLocalResult, ), {]
[isLocalValueType, (, jstypeReturn, ,, true, ), ), {, knownLocalResult, =, true, ;, }, }, if, (, !, knownLocalResult, ), {]
[;, }, }, if, (, !, knownLocalResult, ), {, sideEffectInfo, ., setTaintsReturn, (, ), ;, }, }, JSDocInfo, info, =]
[}, if, (, !, knownLocalResult, ), {, sideEffectInfo, ., setTaintsReturn, (, ), ;, }, }, JSDocInfo, info, =, getJSDocInfoForFunction, (]
[(, !, knownLocalResult, ), {, sideEffectInfo, ., setTaintsReturn, (, ), ;, }, }, JSDocInfo, info, =, getJSDocInfoForFunction, (, node, ,]
[knownLocalResult, ), {, sideEffectInfo, ., setTaintsReturn, (, ), ;, }, }, JSDocInfo, info, =, getJSDocInfoForFunction, (, node, ,, parent, ,]
[setTaintsReturn, (, ), ;, }, }, JSDocInfo, info, =, getJSDocInfoForFunction, (, node, ,, parent, ,, gramp, ), ;, if, (]
[setTaintsReturn, (, ), ;, }, }, JSDocInfo, info, =, getJSDocInfoForFunction, (, node, ,, parent, ,, gramp, ), ;, if, (]
[), ;, }, }, JSDocInfo, info, =, getJSDocInfoForFunction, (, node, ,, parent, ,, gramp, ), ;, if, (, info, !=]
[=, getJSDocInfoForFunction, (, node, ,, parent, ,, gramp, ), ;, if, (, info, !=, null, ), {, boolean, hasSpecificSideEffects, =]
[,, parent, ,, gramp, ), ;, if, (, info, !=, null, ), {, boolean, hasSpecificSideEffects, =, false, ;, if, (]
[,, gramp, ), ;, if, (, info, !=, null, ), {, boolean, hasSpecificSideEffects, =, false, ;, if, (, hasSideEffectsThisAnnotation, (]
[info, !=, null, ), {, boolean, hasSpecificSideEffects, =, false, ;, if, (, hasSideEffectsThisAnnotation, (, info, ), ), {, if, (]
[), {, boolean, hasSpecificSideEffects, =, false, ;, if, (, hasSideEffectsThisAnnotation, (, info, ), ), {, if, (, inExterns, ), {]
[boolean, hasSpecificSideEffects, =, false, ;, if, (, hasSideEffectsThisAnnotation, (, info, ), ), {, if, (, inExterns, ), {, hasSpecificSideEffects, =]
[=, false, ;, if, (, hasSideEffectsThisAnnotation, (, info, ), ), {, if, (, inExterns, ), {, hasSpecificSideEffects, =, true, ;]
[=, false, ;, if, (, hasSideEffectsThisAnnotation, (, info, ), ), {, if, (, inExterns, ), {, hasSpecificSideEffects, =, true, ;]
[), {, if, (, inExterns, ), {, hasSpecificSideEffects, =, true, ;, sideEffectInfo, ., setTaintsThis, (, ), ;, }, else, {]
[), {, if, (, inExterns, ), {, hasSpecificSideEffects, =, true, ;, sideEffectInfo, ., setTaintsThis, (, ), ;, }, else, {]
[inExterns, ), {, hasSpecificSideEffects, =, true, ;, sideEffectInfo, ., setTaintsThis, (, ), ;, }, else, {, traversal, ., report, (]
[{, hasSpecificSideEffects, =, true, ;, sideEffectInfo, ., setTaintsThis, (, ), ;, }, else, {, traversal, ., report, (, node, ,]
[setTaintsThis, (, ), ;, }, else, {, traversal, ., report, (, node, ,, INVALID_MODIFIES_ANNOTATION, ), ;, }, }, if, (]
[), ;, }, else, {, traversal, ., report, (, node, ,, INVALID_MODIFIES_ANNOTATION, ), ;, }, }, if, (, hasSideEffectsArgumentsAnnotation, (]
[., report, (, node, ,, INVALID_MODIFIES_ANNOTATION, ), ;, }, }, if, (, hasSideEffectsArgumentsAnnotation, (, info, ), ), {, if, (]
[node, ,, INVALID_MODIFIES_ANNOTATION, ), ;, }, }, if, (, hasSideEffectsArgumentsAnnotation, (, info, ), ), {, if, (, inExterns, ), {]
[INVALID_MODIFIES_ANNOTATION, ), ;, }, }, if, (, hasSideEffectsArgumentsAnnotation, (, info, ), ), {, if, (, inExterns, ), {, hasSpecificSideEffects, =]
[;, }, }, if, (, hasSideEffectsArgumentsAnnotation, (, info, ), ), {, if, (, inExterns, ), {, hasSpecificSideEffects, =, true, ;]
[;, }, }, if, (, hasSideEffectsArgumentsAnnotation, (, info, ), ), {, if, (, inExterns, ), {, hasSpecificSideEffects, =, true, ;]
[), {, if, (, inExterns, ), {, hasSpecificSideEffects, =, true, ;, sideEffectInfo, ., setTaintsArguments, (, ), ;, }, else, {]
[), {, if, (, inExterns, ), {, hasSpecificSideEffects, =, true, ;, sideEffectInfo, ., setTaintsArguments, (, ), ;, }, else, {]
[inExterns, ), {, hasSpecificSideEffects, =, true, ;, sideEffectInfo, ., setTaintsArguments, (, ), ;, }, else, {, traversal, ., report, (]
[{, hasSpecificSideEffects, =, true, ;, sideEffectInfo, ., setTaintsArguments, (, ), ;, }, else, {, traversal, ., report, (, node, ,]
[setTaintsArguments, (, ), ;, }, else, {, traversal, ., report, (, node, ,, INVALID_MODIFIES_ANNOTATION, ), ;, }, }, if, (]
[setTaintsArguments, (, ), ;, }, else, {, traversal, ., report, (, node, ,, INVALID_MODIFIES_ANNOTATION, ), ;, }, }, if, (]
[), ;, }, else, {, traversal, ., report, (, node, ,, INVALID_MODIFIES_ANNOTATION, ), ;, }, }, if, (, inExterns, &&]
[;, }, else, {, traversal, ., report, (, node, ,, INVALID_MODIFIES_ANNOTATION, ), ;, }, }, if, (, inExterns, &&, !]
[;, }, else, {, traversal, ., report, (, node, ,, INVALID_MODIFIES_ANNOTATION, ), ;, }, }, if, (, inExterns, &&, !]
[;, }, else, {, traversal, ., report, (, node, ,, INVALID_MODIFIES_ANNOTATION, ), ;, }, }, if, (, inExterns, &&, !]
[), ;, }, }, if, (, inExterns, &&, !, info, ., getThrownTypes, (, ), ., isEmpty, (, ), ), {]
[}, }, if, (, inExterns, &&, !, info, ., getThrownTypes, (, ), ., isEmpty, (, ), ), {, hasSpecificSideEffects, =]
[if, (, inExterns, &&, !, info, ., getThrownTypes, (, ), ., isEmpty, (, ), ), {, hasSpecificSideEffects, =, true, ;]
[if, (, inExterns, &&, !, info, ., getThrownTypes, (, ), ., isEmpty, (, ), ), {, hasSpecificSideEffects, =, true, ;]
[), ., isEmpty, (, ), ), {, hasSpecificSideEffects, =, true, ;, sideEffectInfo, ., setFunctionThrows, (, ), ;, }, if, (]
[., isEmpty, (, ), ), {, hasSpecificSideEffects, =, true, ;, sideEffectInfo, ., setFunctionThrows, (, ), ;, }, if, (, !]
[{, hasSpecificSideEffects, =, true, ;, sideEffectInfo, ., setFunctionThrows, (, ), ;, }, if, (, !, hasSpecificSideEffects, ), {, if, (]
[=, true, ;, sideEffectInfo, ., setFunctionThrows, (, ), ;, }, if, (, !, hasSpecificSideEffects, ), {, if, (, hasNoSideEffectsAnnotation, (]
[(, ), ;, }, if, (, !, hasSpecificSideEffects, ), {, if, (, hasNoSideEffectsAnnotation, (, info, ), ), {, if, (]
[}, if, (, !, hasSpecificSideEffects, ), {, if, (, hasNoSideEffectsAnnotation, (, info, ), ), {, if, (, inExterns, ), {]
[}, if, (, !, hasSpecificSideEffects, ), {, if, (, hasNoSideEffectsAnnotation, (, info, ), ), {, if, (, inExterns, ), {]
[hasNoSideEffectsAnnotation, (, info, ), ), {, if, (, inExterns, ), {, sideEffectInfo, ., setIsPure, (, ), ;, }, else, {]
[hasNoSideEffectsAnnotation, (, info, ), ), {, if, (, inExterns, ), {, sideEffectInfo, ., setIsPure, (, ), ;, }, else, {]
[), {, if, (, inExterns, ), {, sideEffectInfo, ., setIsPure, (, ), ;, }, else, {, traversal, ., report, (]
[if, (, inExterns, ), {, sideEffectInfo, ., setIsPure, (, ), ;, }, else, {, traversal, ., report, (, node, ,]
[(, ), ;, }, else, {, traversal, ., report, (, node, ,, INVALID_NO_SIDE_EFFECT_ANNOTATION, ), ;, }, }, else, if, (]
[}, else, {, traversal, ., report, (, node, ,, INVALID_NO_SIDE_EFFECT_ANNOTATION, ), ;, }, }, else, if, (, inExterns, ), {]
[}, else, {, traversal, ., report, (, node, ,, INVALID_NO_SIDE_EFFECT_ANNOTATION, ), ;, }, }, else, if, (, inExterns, ), {]
[}, else, if, (, inExterns, ), {, sideEffectInfo, ., setTaintsGlobalState, (, ), ;, }, }, }, else, {, if, (]
[(, inExterns, ), {, sideEffectInfo, ., setTaintsGlobalState, (, ), ;, }, }, }, else, {, if, (, inExterns, ), {]
[(, inExterns, ), {, sideEffectInfo, ., setTaintsGlobalState, (, ), ;, }, }, }, else, {, if, (, inExterns, ), {]
[sideEffectInfo, ., setTaintsGlobalState, (, ), ;, }, }, }, private, boolean, isLocalValueType, (, JSType, jstype, ,, boolean, recurse, ), {]
[sideEffectInfo, ., setTaintsGlobalState, (, ), ;, }, }, }, private, boolean, isLocalValueType, (, JSType, jstype, ,, boolean, recurse, ), {]
[), ;, }, }, }, private, boolean, isLocalValueType, (, JSType, jstype, ,, boolean, recurse, ), {, Preconditions, ., checkNotNull, (]
[boolean, isLocalValueType, (, JSType, jstype, ,, boolean, recurse, ), {, Preconditions, ., checkNotNull, (, jstype, ), ;, JSType, subtype, =]
[boolean, isLocalValueType, (, JSType, jstype, ,, boolean, recurse, ), {, Preconditions, ., checkNotNull, (, jstype, ), ;, JSType, subtype, =]
[jstype, ,, boolean, recurse, ), {, Preconditions, ., checkNotNull, (, jstype, ), ;, JSType, subtype, =, jstype, ., getGreatestSubtype, (]
[jstype, ,, boolean, recurse, ), {, Preconditions, ., checkNotNull, (, jstype, ), ;, JSType, subtype, =, jstype, ., getGreatestSubtype, (]
[jstype, ,, boolean, recurse, ), {, Preconditions, ., checkNotNull, (, jstype, ), ;, JSType, subtype, =, jstype, ., getGreatestSubtype, (]
[checkNotNull, (, jstype, ), ;, JSType, subtype, =, jstype, ., getGreatestSubtype, (, compiler, ., getTypeRegistry, (, ), ., getNativeType, (]
[checkNotNull, (, jstype, ), ;, JSType, subtype, =, jstype, ., getGreatestSubtype, (, compiler, ., getTypeRegistry, (, ), ., getNativeType, (]
[=, jstype, ., getGreatestSubtype, (, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ;, return]
[=, jstype, ., getGreatestSubtype, (, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ;, return]
[OBJECT_TYPE, ), ), ;, return, subtype, ., isNoType, (, ), ;, }, private, void, visitThrow, (, FunctionInformation, sideEffectInfo, ), {]
[OBJECT_TYPE, ), ), ;, return, subtype, ., isNoType, (, ), ;, }, private, void, visitThrow, (, FunctionInformation, sideEffectInfo, ), {]
[), ;, }, private, JSDocInfo, getJSDocInfoForFunction, (, Node, node, ,, Node, parent, ,, Node, gramp, ), {, JSDocInfo, info, =]
[), ;, }, private, JSDocInfo, getJSDocInfoForFunction, (, Node, node, ,, Node, parent, ,, Node, gramp, ), {, JSDocInfo, info, =]
[node, ,, Node, parent, ,, Node, gramp, ), {, JSDocInfo, info, =, node, ., getJSDocInfo, (, ), ;, if, (]
[node, ,, Node, parent, ,, Node, gramp, ), {, JSDocInfo, info, =, node, ., getJSDocInfo, (, ), ;, if, (]
[Node, parent, ,, Node, gramp, ), {, JSDocInfo, info, =, node, ., getJSDocInfo, (, ), ;, if, (, info, !=]
[gramp, ), {, JSDocInfo, info, =, node, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, ), {, return]
[node, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, ), {, return, info, ;, }, else, if, (]
[node, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, ), {, return, info, ;, }, else, if, (]
[info, !=, null, ), {, return, info, ;, }, else, if, (, parent, ., isName, (, ), ), {, return]
[info, !=, null, ), {, return, info, ;, }, else, if, (, parent, ., isName, (, ), ), {, return]
[info, !=, null, ), {, return, info, ;, }, else, if, (, parent, ., isName, (, ), ), {, return]
[info, ;, }, else, if, (, parent, ., isName, (, ), ), {, return, gramp, ., hasOneChild, (, ), ?]
[info, ;, }, else, if, (, parent, ., isName, (, ), ), {, return, gramp, ., hasOneChild, (, ), ?]
[parent, ., isName, (, ), ), {, return, gramp, ., hasOneChild, (, ), ?, gramp, ., getJSDocInfo, (, ), :]
[{, return, gramp, ., hasOneChild, (, ), ?, gramp, ., getJSDocInfo, (, ), :, null, ;, }, else, if, (]
[{, return, gramp, ., hasOneChild, (, ), ?, gramp, ., getJSDocInfo, (, ), :, null, ;, }, else, if, (]
[gramp, ., getJSDocInfo, (, ), :, null, ;, }, else, if, (, parent, ., isAssign, (, ), ), {, return]
[gramp, ., getJSDocInfo, (, ), :, null, ;, }, else, if, (, parent, ., isAssign, (, ), ), {, return]
[if, (, parent, ., isAssign, (, ), ), {, return, parent, ., getJSDocInfo, (, ), ;, }, else, {, return]
[getJSDocInfo, (, ), ;, }, else, {, return, null, ;, }, }, private, boolean, hasNoSideEffectsAnnotation, (, JSDocInfo, docInfo, ), {]
[getJSDocInfo, (, ), ;, }, else, {, return, null, ;, }, }, private, boolean, hasNoSideEffectsAnnotation, (, JSDocInfo, docInfo, ), {]
[}, else, {, return, null, ;, }, }, private, boolean, hasNoSideEffectsAnnotation, (, JSDocInfo, docInfo, ), {, Preconditions, ., checkNotNull, (]
[null, ;, }, }, private, boolean, hasNoSideEffectsAnnotation, (, JSDocInfo, docInfo, ), {, Preconditions, ., checkNotNull, (, docInfo, ), ;, return]
[null, ;, }, }, private, boolean, hasNoSideEffectsAnnotation, (, JSDocInfo, docInfo, ), {, Preconditions, ., checkNotNull, (, docInfo, ), ;, return]
[(, docInfo, ), ;, return, docInfo, ., isNoSideEffects, (, ), ;, }, private, boolean, hasSideEffectsThisAnnotation, (, JSDocInfo, docInfo, ), {]
[(, docInfo, ), ;, return, docInfo, ., isNoSideEffects, (, ), ;, }, private, boolean, hasSideEffectsThisAnnotation, (, JSDocInfo, docInfo, ), {]
[return, docInfo, ., isNoSideEffects, (, ), ;, }, private, boolean, hasSideEffectsThisAnnotation, (, JSDocInfo, docInfo, ), {, Preconditions, ., checkNotNull, (]
[(, ), ;, }, private, boolean, hasSideEffectsThisAnnotation, (, JSDocInfo, docInfo, ), {, Preconditions, ., checkNotNull, (, docInfo, ), ;, return]
[), ;, }, private, boolean, hasSideEffectsThisAnnotation, (, JSDocInfo, docInfo, ), {, Preconditions, ., checkNotNull, (, docInfo, ), ;, return, (]
[), ;, }, private, boolean, hasSideEffectsThisAnnotation, (, JSDocInfo, docInfo, ), {, Preconditions, ., checkNotNull, (, docInfo, ), ;, return, (]
[), ;, }, private, boolean, hasSideEffectsThisAnnotation, (, JSDocInfo, docInfo, ), {, Preconditions, ., checkNotNull, (, docInfo, ), ;, return, (]
[docInfo, ), {, Preconditions, ., checkNotNull, (, docInfo, ), ;, return, (, docInfo, ., getModifies, (, ), ., contains, (]
[., getModifies, (, ), ., contains, (, "this", ), ), ;, }, private, boolean, hasSideEffectsArgumentsAnnotation, (, JSDocInfo, docInfo, ), {]
[., getModifies, (, ), ., contains, (, "this", ), ), ;, }, private, boolean, hasSideEffectsArgumentsAnnotation, (, JSDocInfo, docInfo, ), {]
[., contains, (, "this", ), ), ;, }, private, boolean, hasSideEffectsArgumentsAnnotation, (, JSDocInfo, docInfo, ), {, Preconditions, ., checkNotNull, (]
[boolean, hasSideEffectsArgumentsAnnotation, (, JSDocInfo, docInfo, ), {, Preconditions, ., checkNotNull, (, docInfo, ), ;, Set, <, String, >, modifies, =]
[boolean, hasSideEffectsArgumentsAnnotation, (, JSDocInfo, docInfo, ), {, Preconditions, ., checkNotNull, (, docInfo, ), ;, Set, <, String, >, modifies, =]
[Preconditions, ., checkNotNull, (, docInfo, ), ;, Set, <, String, >, modifies, =, docInfo, ., getModifies, (, ), ;, return]
[., checkNotNull, (, docInfo, ), ;, Set, <, String, >, modifies, =, docInfo, ., getModifies, (, ), ;, return, (]
[., checkNotNull, (, docInfo, ), ;, Set, <, String, >, modifies, =, docInfo, ., getModifies, (, ), ;, return, (]
[., checkNotNull, (, docInfo, ), ;, Set, <, String, >, modifies, =, docInfo, ., getModifies, (, ), ;, return, (]
[., checkNotNull, (, docInfo, ), ;, Set, <, String, >, modifies, =, docInfo, ., getModifies, (, ), ;, return, (]
[Set, <, String, >, modifies, =, docInfo, ., getModifies, (, ), ;, return, (, modifies, ., size, (, ), >]
[String, >, modifies, =, docInfo, ., getModifies, (, ), ;, return, (, modifies, ., size, (, ), >, 1, ||]
[>, modifies, =, docInfo, ., getModifies, (, ), ;, return, (, modifies, ., size, (, ), >, 1, ||, (]
[>, modifies, =, docInfo, ., getModifies, (, ), ;, return, (, modifies, ., size, (, ), >, 1, ||, (]
[>, modifies, =, docInfo, ., getModifies, (, ), ;, return, (, modifies, ., size, (, ), >, 1, ||, (]
[>, modifies, =, docInfo, ., getModifies, (, ), ;, return, (, modifies, ., size, (, ), >, 1, ||, (]
[(, ), ;, return, (, modifies, ., size, (, ), >, 1, ||, (, modifies, ., size, (, ), ==]
[;, return, (, modifies, ., size, (, ), >, 1, ||, (, modifies, ., size, (, ), ==, 1, &&]
[return, (, modifies, ., size, (, ), >, 1, ||, (, modifies, ., size, (, ), ==, 1, &&, !]
[return, (, modifies, ., size, (, ), >, 1, ||, (, modifies, ., size, (, ), ==, 1, &&, !]
[size, (, ), >, 1, ||, (, modifies, ., size, (, ), ==, 1, &&, !, modifies, ., contains, (]
[(, "this", ), ), ), ;, }, }, private, static, boolean, isIncDec, (, Node, n, ), {, int, type, =]
[(, "this", ), ), ), ;, }, }, private, static, boolean, isIncDec, (, Node, n, ), {, int, type, =]
[}, private, static, boolean, isIncDec, (, Node, n, ), {, int, type, =, n, ., getType, (, ), ;, return]
[private, static, boolean, isIncDec, (, Node, n, ), {, int, type, =, n, ., getType, (, ), ;, return, (]
[private, static, boolean, isIncDec, (, Node, n, ), {, int, type, =, n, ., getType, (, ), ;, return, (]
[private, static, boolean, isIncDec, (, Node, n, ), {, int, type, =, n, ., getType, (, ), ;, return, (]
[boolean, isIncDec, (, Node, n, ), {, int, type, =, n, ., getType, (, ), ;, return, (, type, ==]
[boolean, isIncDec, (, Node, n, ), {, int, type, =, n, ., getType, (, ), ;, return, (, type, ==]
[n, ), {, int, type, =, n, ., getType, (, ), ;, return, (, type, ==, Token, ., INC, ||]
[n, ), {, int, type, =, n, ., getType, (, ), ;, return, (, type, ==, Token, ., INC, ||]
[{, int, type, =, n, ., getType, (, ), ;, return, (, type, ==, Token, ., INC, ||, type, ==]
[{, int, type, =, n, ., getType, (, ), ;, return, (, type, ==, Token, ., INC, ||, type, ==]
[getType, (, ), ;, return, (, type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, ), ;, }]
[;, return, (, type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, ), ;, }, @, SuppressWarnings, (]
[SuppressWarnings, (, "unused", ), private, static, boolean, isKnownLocalValue, (, final, Node, value, ), {, Predicate, <, Node, >, taintingPredicate, =]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, value, ), {, switch, (]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, value, ), {, switch, (]
[@, Override, public, boolean, apply, (, Node, value, ), {, switch, (, value, ., getType, (, ), ), {, case]
[@, Override, public, boolean, apply, (, Node, value, ), {, switch, (, value, ., getType, (, ), ), {, case]
[(, Node, value, ), {, switch, (, value, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, return]
[), {, switch, (, value, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, return, false, ;, case]
[), {, switch, (, value, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, return, false, ;, case]
[., getType, (, ), ), {, case, Token, ., ASSIGN, :, return, false, ;, case, Token, ., THIS, :, return]
[), ), {, case, Token, ., ASSIGN, :, return, false, ;, case, Token, ., THIS, :, return, false, ;, case]
[), ), {, case, Token, ., ASSIGN, :, return, false, ;, case, Token, ., THIS, :, return, false, ;, case]
[., ASSIGN, :, return, false, ;, case, Token, ., THIS, :, return, false, ;, case, Token, ., NAME, :, return]
[return, false, ;, case, Token, ., THIS, :, return, false, ;, case, Token, ., NAME, :, return, false, ;, case]
[return, false, ;, case, Token, ., THIS, :, return, false, ;, case, Token, ., NAME, :, return, false, ;, case]
[., THIS, :, return, false, ;, case, Token, ., NAME, :, return, false, ;, case, Token, ., GETELEM, :, case]
[., THIS, :, return, false, ;, case, Token, ., NAME, :, return, false, ;, case, Token, ., GETELEM, :, case]
[;, case, Token, ., NAME, :, return, false, ;, case, Token, ., GETELEM, :, case, Token, ., GETPROP, :, return]
[., NAME, :, return, false, ;, case, Token, ., GETELEM, :, case, Token, ., GETPROP, :, return, false, ;, case]
[., NAME, :, return, false, ;, case, Token, ., GETELEM, :, case, Token, ., GETPROP, :, return, false, ;, case]
[;, case, Token, ., GETELEM, :, case, Token, ., GETPROP, :, return, false, ;, case, Token, ., CALL, :, return]
[GETELEM, :, case, Token, ., GETPROP, :, return, false, ;, case, Token, ., CALL, :, return, false, ;, }, return]
[:, return, false, ;, case, Token, ., CALL, :, return, false, ;, }, return, false, ;, }, }, ;, return]
[:, return, false, ;, case, Token, ., CALL, :, return, false, ;, }, return, false, ;, }, }, ;, return]
[case, Token, ., CALL, :, return, false, ;, }, return, false, ;, }, }, ;, return, NodeUtil, ., evaluatesToLocalValue, (]
[., CALL, :, return, false, ;, }, return, false, ;, }, }, ;, return, NodeUtil, ., evaluatesToLocalValue, (, value, ,]
[,, Node, >, {, @, Override, public, boolean, traverseEdge, (, FunctionInformation, callee, ,, Node, callSite, ,, FunctionInformation, caller, ), {]
[,, Node, >, {, @, Override, public, boolean, traverseEdge, (, FunctionInformation, callee, ,, Node, callSite, ,, FunctionInformation, caller, ), {]
[@, Override, public, boolean, traverseEdge, (, FunctionInformation, callee, ,, Node, callSite, ,, FunctionInformation, caller, ), {, Preconditions, ., checkArgument, (]
[@, Override, public, boolean, traverseEdge, (, FunctionInformation, callee, ,, Node, callSite, ,, FunctionInformation, caller, ), {, Preconditions, ., checkArgument, (]
[@, Override, public, boolean, traverseEdge, (, FunctionInformation, callee, ,, Node, callSite, ,, FunctionInformation, caller, ), {, Preconditions, ., checkArgument, (]
[FunctionInformation, callee, ,, Node, callSite, ,, FunctionInformation, caller, ), {, Preconditions, ., checkArgument, (, callSite, ., isCall, (, ), ||]
[FunctionInformation, callee, ,, Node, callSite, ,, FunctionInformation, caller, ), {, Preconditions, ., checkArgument, (, callSite, ., isCall, (, ), ||]
[Preconditions, ., checkArgument, (, callSite, ., isCall, (, ), ||, callSite, ., isNew, (, ), ), ;, boolean, changed, =]
[callSite, ., isCall, (, ), ||, callSite, ., isNew, (, ), ), ;, boolean, changed, =, false, ;, if, (]
[callSite, ., isCall, (, ), ||, callSite, ., isNew, (, ), ), ;, boolean, changed, =, false, ;, if, (]
[., isCall, (, ), ||, callSite, ., isNew, (, ), ), ;, boolean, changed, =, false, ;, if, (, !]
[., isCall, (, ), ||, callSite, ., isNew, (, ), ), ;, boolean, changed, =, false, ;, if, (, !]
[., isNew, (, ), ), ;, boolean, changed, =, false, ;, if, (, !, caller, ., mutatesGlobalState, (, ), &&]
[., isNew, (, ), ), ;, boolean, changed, =, false, ;, if, (, !, caller, ., mutatesGlobalState, (, ), &&]
[changed, =, false, ;, if, (, !, caller, ., mutatesGlobalState, (, ), &&, callee, ., mutatesGlobalState, (, ), ), {]
[changed, =, false, ;, if, (, !, caller, ., mutatesGlobalState, (, ), &&, callee, ., mutatesGlobalState, (, ), ), {]
[!, caller, ., mutatesGlobalState, (, ), &&, callee, ., mutatesGlobalState, (, ), ), {, caller, ., setTaintsGlobalState, (, ), ;]
[., mutatesGlobalState, (, ), &&, callee, ., mutatesGlobalState, (, ), ), {, caller, ., setTaintsGlobalState, (, ), ;, changed, =]
[callee, ., mutatesGlobalState, (, ), ), {, caller, ., setTaintsGlobalState, (, ), ;, changed, =, true, ;, }, if, (]
[callee, ., mutatesGlobalState, (, ), ), {, caller, ., setTaintsGlobalState, (, ), ;, changed, =, true, ;, }, if, (]
[., mutatesGlobalState, (, ), ), {, caller, ., setTaintsGlobalState, (, ), ;, changed, =, true, ;, }, if, (, !]
[., mutatesGlobalState, (, ), ), {, caller, ., setTaintsGlobalState, (, ), ;, changed, =, true, ;, }, if, (, !]
[caller, ., setTaintsGlobalState, (, ), ;, changed, =, true, ;, }, if, (, !, caller, ., functionThrows, (, ), &&]
[caller, ., setTaintsGlobalState, (, ), ;, changed, =, true, ;, }, if, (, !, caller, ., functionThrows, (, ), &&]
[=, true, ;, }, if, (, !, caller, ., functionThrows, (, ), &&, callee, ., functionThrows, (, ), ), {]
[=, true, ;, }, if, (, !, caller, ., functionThrows, (, ), &&, callee, ., functionThrows, (, ), ), {]
[!, caller, ., functionThrows, (, ), &&, callee, ., functionThrows, (, ), ), {, caller, ., setFunctionThrows, (, ), ;]
[., functionThrows, (, ), &&, callee, ., functionThrows, (, ), ), {, caller, ., setFunctionThrows, (, ), ;, changed, =]
[callee, ., functionThrows, (, ), ), {, caller, ., setFunctionThrows, (, ), ;, changed, =, true, ;, }, if, (]
[callee, ., functionThrows, (, ), ), {, caller, ., setFunctionThrows, (, ), ;, changed, =, true, ;, }, if, (]
[setFunctionThrows, (, ), ;, changed, =, true, ;, }, if, (, callee, ., mutatesThis, (, ), ), {, if, (]
[(, ), ;, changed, =, true, ;, }, if, (, callee, ., mutatesThis, (, ), ), {, if, (, !]
[(, ), ;, changed, =, true, ;, }, if, (, callee, ., mutatesThis, (, ), ), {, if, (, !]
[callee, ., mutatesThis, (, ), ), {, if, (, !, callSite, ., isNew, (, ), ), {, Node, objectNode, =]
[mutatesThis, (, ), ), {, if, (, !, callSite, ., isNew, (, ), ), {, Node, objectNode, =, getCallThisObject, (]
[if, (, !, callSite, ., isNew, (, ), ), {, Node, objectNode, =, getCallThisObject, (, callSite, ), ;, if, (]
[if, (, !, callSite, ., isNew, (, ), ), {, Node, objectNode, =, getCallThisObject, (, callSite, ), ;, if, (]
[if, (, !, callSite, ., isNew, (, ), ), {, Node, objectNode, =, getCallThisObject, (, callSite, ), ;, if, (]
[if, (, !, callSite, ., isNew, (, ), ), {, Node, objectNode, =, getCallThisObject, (, callSite, ), ;, if, (]
[!, callSite, ., isNew, (, ), ), {, Node, objectNode, =, getCallThisObject, (, callSite, ), ;, if, (, objectNode, !=]
[., isNew, (, ), ), {, Node, objectNode, =, getCallThisObject, (, callSite, ), ;, if, (, objectNode, !=, null, &&]
[., isNew, (, ), ), {, Node, objectNode, =, getCallThisObject, (, callSite, ), ;, if, (, objectNode, !=, null, &&]
[Node, objectNode, =, getCallThisObject, (, callSite, ), ;, if, (, objectNode, !=, null, &&, objectNode, ., isName, (, ), &&]
[objectNode, =, getCallThisObject, (, callSite, ), ;, if, (, objectNode, !=, null, &&, objectNode, ., isName, (, ), &&, !]
[getCallThisObject, (, callSite, ), ;, if, (, objectNode, !=, null, &&, objectNode, ., isName, (, ), &&, !, isCallOrApply, (]
[objectNode, !=, null, &&, objectNode, ., isName, (, ), &&, !, isCallOrApply, (, callSite, ), ), {, String, name, =]
[objectNode, !=, null, &&, objectNode, ., isName, (, ), &&, !, isCallOrApply, (, callSite, ), ), {, String, name, =]
[), &&, !, isCallOrApply, (, callSite, ), ), {, String, name, =, objectNode, ., getString, (, ), ;, if, (]
[&&, !, isCallOrApply, (, callSite, ), ), {, String, name, =, objectNode, ., getString, (, ), ;, if, (, !]
[&&, !, isCallOrApply, (, callSite, ), ), {, String, name, =, objectNode, ., getString, (, ), ;, if, (, !]
[{, String, name, =, objectNode, ., getString, (, ), ;, if, (, !, caller, ., mutatesGlobalState, (, ), ), {]
[{, String, name, =, objectNode, ., getString, (, ), ;, if, (, !, caller, ., mutatesGlobalState, (, ), ), {]
[getString, (, ), ;, if, (, !, caller, ., mutatesGlobalState, (, ), ), {, caller, ., setTaintsGlobalState, (, ), ;]
[), ;, if, (, !, caller, ., mutatesGlobalState, (, ), ), {, caller, ., setTaintsGlobalState, (, ), ;, changed, =]
[mutatesGlobalState, (, ), ), {, caller, ., setTaintsGlobalState, (, ), ;, changed, =, true, ;, }, }, else, if, (]
[mutatesGlobalState, (, ), ), {, caller, ., setTaintsGlobalState, (, ), ;, changed, =, true, ;, }, }, else, if, (]
[mutatesGlobalState, (, ), ), {, caller, ., setTaintsGlobalState, (, ), ;, changed, =, true, ;, }, }, else, if, (]
[), ), {, caller, ., setTaintsGlobalState, (, ), ;, changed, =, true, ;, }, }, else, if, (, objectNode, !=]
[{, caller, ., setTaintsGlobalState, (, ), ;, changed, =, true, ;, }, }, else, if, (, objectNode, !=, null, &&]
[{, caller, ., setTaintsGlobalState, (, ), ;, changed, =, true, ;, }, }, else, if, (, objectNode, !=, null, &&]
[true, ;, }, }, else, if, (, objectNode, !=, null, &&, objectNode, ., isThis, (, ), ), {, if, (]
[;, }, }, else, if, (, objectNode, !=, null, &&, objectNode, ., isThis, (, ), ), {, if, (, !]
[;, }, }, else, if, (, objectNode, !=, null, &&, objectNode, ., isThis, (, ), ), {, if, (, !]
[!=, null, &&, objectNode, ., isThis, (, ), ), {, if, (, !, caller, ., mutatesThis, (, ), ), {]
[!=, null, &&, objectNode, ., isThis, (, ), ), {, if, (, !, caller, ., mutatesThis, (, ), ), {]
[(, ), ), {, if, (, !, caller, ., mutatesThis, (, ), ), {, caller, ., setTaintsThis, (, ), ;]
[), {, if, (, !, caller, ., mutatesThis, (, ), ), {, caller, ., setTaintsThis, (, ), ;, changed, =]
[mutatesThis, (, ), ), {, caller, ., setTaintsThis, (, ), ;, changed, =, true, ;, }, }, else, if, (]
[mutatesThis, (, ), ), {, caller, ., setTaintsThis, (, ), ;, changed, =, true, ;, }, }, else, if, (]
[mutatesThis, (, ), ), {, caller, ., setTaintsThis, (, ), ;, changed, =, true, ;, }, }, else, if, (]
[mutatesThis, (, ), ), {, caller, ., setTaintsThis, (, ), ;, changed, =, true, ;, }, }, else, if, (]
[), ), {, caller, ., setTaintsThis, (, ), ;, changed, =, true, ;, }, }, else, if, (, objectNode, !=]
[{, caller, ., setTaintsThis, (, ), ;, changed, =, true, ;, }, }, else, if, (, objectNode, !=, null, &&]
[{, caller, ., setTaintsThis, (, ), ;, changed, =, true, ;, }, }, else, if, (, objectNode, !=, null, &&]
[(, ), ;, changed, =, true, ;, }, }, else, if, (, objectNode, !=, null, &&, NodeUtil, ., evaluatesToLocalValue, (]
[changed, =, true, ;, }, }, else, if, (, objectNode, !=, null, &&, NodeUtil, ., evaluatesToLocalValue, (, objectNode, ), &&]
[=, true, ;, }, }, else, if, (, objectNode, !=, null, &&, NodeUtil, ., evaluatesToLocalValue, (, objectNode, ), &&, !]
[;, }, }, else, if, (, objectNode, !=, null, &&, NodeUtil, ., evaluatesToLocalValue, (, objectNode, ), &&, !, isCallOrApply, (]
[null, &&, NodeUtil, ., evaluatesToLocalValue, (, objectNode, ), &&, !, isCallOrApply, (, callSite, ), ), {, }, else, if, (]
[&&, NodeUtil, ., evaluatesToLocalValue, (, objectNode, ), &&, !, isCallOrApply, (, callSite, ), ), {, }, else, if, (, !]
[&&, NodeUtil, ., evaluatesToLocalValue, (, objectNode, ), &&, !, isCallOrApply, (, callSite, ), ), {, }, else, if, (, !]
[&&, !, isCallOrApply, (, callSite, ), ), {, }, else, if, (, !, caller, ., mutatesGlobalState, (, ), ), {]
[&&, !, isCallOrApply, (, callSite, ), ), {, }, else, if, (, !, caller, ., mutatesGlobalState, (, ), ), {]
[), {, }, else, if, (, !, caller, ., mutatesGlobalState, (, ), ), {, caller, ., setTaintsGlobalState, (, ), ;]
[}, else, if, (, !, caller, ., mutatesGlobalState, (, ), ), {, caller, ., setTaintsGlobalState, (, ), ;, changed, =]
[., mutatesGlobalState, (, ), ), {, caller, ., setTaintsGlobalState, (, ), ;, changed, =, true, ;, }, }, }, return]
[}, }, }, return, changed, ;, }, }, private, static, Node, getCallThisObject, (, Node, callSite, ), {, Node, callTarget, =]
[}, }, }, return, changed, ;, }, }, private, static, Node, getCallThisObject, (, Node, callSite, ), {, Node, callTarget, =]
[private, static, Node, getCallThisObject, (, Node, callSite, ), {, Node, callTarget, =, callSite, ., getFirstChild, (, ), ;, if, (]
[static, Node, getCallThisObject, (, Node, callSite, ), {, Node, callTarget, =, callSite, ., getFirstChild, (, ), ;, if, (, !]
[static, Node, getCallThisObject, (, Node, callSite, ), {, Node, callTarget, =, callSite, ., getFirstChild, (, ), ;, if, (, !]
[Node, callSite, ), {, Node, callTarget, =, callSite, ., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isGet, (]
[callTarget, =, callSite, ., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isGet, (, callTarget, ), ), {, return]
[), ;, if, (, !, NodeUtil, ., isGet, (, callTarget, ), ), {, return, null, ;, }, String, propString, =]
[), ;, if, (, !, NodeUtil, ., isGet, (, callTarget, ), ), {, return, null, ;, }, String, propString, =]
[), ;, if, (, !, NodeUtil, ., isGet, (, callTarget, ), ), {, return, null, ;, }, String, propString, =]
[{, return, null, ;, }, String, propString, =, callTarget, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[{, return, null, ;, }, String, propString, =, callTarget, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[{, return, null, ;, }, String, propString, =, callTarget, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[}, String, propString, =, callTarget, ., getLastChild, (, ), ., getString, (, ), ;, if, (, propString, ., equals, (]
[=, callTarget, ., getLastChild, (, ), ., getString, (, ), ;, if, (, propString, ., equals, (, "call", ), ||]
[=, callTarget, ., getLastChild, (, ), ., getString, (, ), ;, if, (, propString, ., equals, (, "call", ), ||]
[(, ), ., getString, (, ), ;, if, (, propString, ., equals, (, "call", ), ||, propString, ., equals, (]
[), ;, if, (, propString, ., equals, (, "call", ), ||, propString, ., equals, (, "apply", ), ), {, return]
[), ;, if, (, propString, ., equals, (, "call", ), ||, propString, ., equals, (, "apply", ), ), {, return]
[||, propString, ., equals, (, "apply", ), ), {, return, callTarget, ., getNext, (, ), ;, }, else, {, return]
[||, propString, ., equals, (, "apply", ), ), {, return, callTarget, ., getNext, (, ), ;, }, else, {, return]
[callTarget, ., getFirstChild, (, ), ;, }, }, private, static, boolean, isCallOrApply, (, Node, callSite, ), {, Node, callTarget, =]
[callTarget, ., getFirstChild, (, ), ;, }, }, private, static, boolean, isCallOrApply, (, Node, callSite, ), {, Node, callTarget, =]
[private, static, boolean, isCallOrApply, (, Node, callSite, ), {, Node, callTarget, =, callSite, ., getFirstChild, (, ), ;, if, (]
[private, static, boolean, isCallOrApply, (, Node, callSite, ), {, Node, callTarget, =, callSite, ., getFirstChild, (, ), ;, if, (]
[(, Node, callSite, ), {, Node, callTarget, =, callSite, ., getFirstChild, (, ), ;, if, (, NodeUtil, ., isGet, (]
[=, callSite, ., getFirstChild, (, ), ;, if, (, NodeUtil, ., isGet, (, callTarget, ), ), {, String, propString, =]
[=, callSite, ., getFirstChild, (, ), ;, if, (, NodeUtil, ., isGet, (, callTarget, ), ), {, String, propString, =]
[=, callSite, ., getFirstChild, (, ), ;, if, (, NodeUtil, ., isGet, (, callTarget, ), ), {, String, propString, =]
[(, callTarget, ), ), {, String, propString, =, callTarget, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[(, callTarget, ), ), {, String, propString, =, callTarget, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[(, callTarget, ), ), {, String, propString, =, callTarget, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[{, String, propString, =, callTarget, ., getLastChild, (, ), ., getString, (, ), ;, if, (, propString, ., equals, (]
[=, callTarget, ., getLastChild, (, ), ., getString, (, ), ;, if, (, propString, ., equals, (, "call", ), ||]
[=, callTarget, ., getLastChild, (, ), ., getString, (, ), ;, if, (, propString, ., equals, (, "call", ), ||]
[(, ), ., getString, (, ), ;, if, (, propString, ., equals, (, "call", ), ||, propString, ., equals, (]
[), ;, if, (, propString, ., equals, (, "call", ), ||, propString, ., equals, (, "apply", ), ), {, return]
[., equals, (, "call", ), ||, propString, ., equals, (, "apply", ), ), {, return, true, ;, }, }, return]
[;, }, private, static, class, FunctionInformation, {, private, final, boolean, extern, ;, private, final, List, <, Node, >, callsInFunctionBody, =]
[;, }, private, static, class, FunctionInformation, {, private, final, boolean, extern, ;, private, final, List, <, Node, >, callsInFunctionBody, =]
[final, List, <, Node, >, callsInFunctionBody, =, Lists, ., newArrayList, (, ), ;, private, Set, <, Var, >, blacklisted, =]
[final, List, <, Node, >, callsInFunctionBody, =, Lists, ., newArrayList, (, ), ;, private, Set, <, Var, >, blacklisted, =]
[private, Set, <, Var, >, blacklisted, =, Sets, ., newHashSet, (, ), ;, private, Set, <, Var, >, taintedLocals, =]
[private, Set, <, Var, >, blacklisted, =, Sets, ., newHashSet, (, ), ;, private, Set, <, Var, >, taintedLocals, =]
[private, Set, <, Var, >, taintedLocals, =, Sets, ., newHashSet, (, ), ;, private, Set, <, String, >, knownLocals, =]
[private, Set, <, Var, >, taintedLocals, =, Sets, ., newHashSet, (, ), ;, private, Set, <, String, >, knownLocals, =]
[(, ), ;, private, Set, <, String, >, knownLocals, =, Sets, ., newHashSet, (, ), ;, private, boolean, pureFunction, =]
[String, >, knownLocals, =, Sets, ., newHashSet, (, ), ;, private, boolean, pureFunction, =, false, ;, private, boolean, functionThrows, =]
[newHashSet, (, ), ;, private, boolean, pureFunction, =, false, ;, private, boolean, functionThrows, =, false, ;, private, boolean, taintsGlobalState, =]
[pureFunction, =, false, ;, private, boolean, functionThrows, =, false, ;, private, boolean, taintsGlobalState, =, false, ;, private, boolean, taintsThis, =]
[functionThrows, =, false, ;, private, boolean, taintsGlobalState, =, false, ;, private, boolean, taintsThis, =, false, ;, private, boolean, taintsArguments, =]
[taintsGlobalState, =, false, ;, private, boolean, taintsThis, =, false, ;, private, boolean, taintsArguments, =, false, ;, private, boolean, taintsUnknown, =]
[taintsThis, =, false, ;, private, boolean, taintsArguments, =, false, ;, private, boolean, taintsUnknown, =, false, ;, private, boolean, taintsReturn, =]
[false, ;, private, boolean, taintsUnknown, =, false, ;, private, boolean, taintsReturn, =, false, ;, FunctionInformation, (, boolean, extern, ), {]
[false, ;, private, boolean, taintsUnknown, =, false, ;, private, boolean, taintsReturn, =, false, ;, FunctionInformation, (, boolean, extern, ), {]
[taintsUnknown, =, false, ;, private, boolean, taintsReturn, =, false, ;, FunctionInformation, (, boolean, extern, ), {, this, ., extern, =]
[false, ;, private, boolean, taintsReturn, =, false, ;, FunctionInformation, (, boolean, extern, ), {, this, ., extern, =, extern, ;]
[), {, this, ., extern, =, extern, ;, checkInvariant, (, ), ;, }, void, addTaintedLocalObject, (, Var, var, ), {]
[), {, this, ., extern, =, extern, ;, checkInvariant, (, ), ;, }, void, addTaintedLocalObject, (, Var, var, ), {]
[extern, =, extern, ;, checkInvariant, (, ), ;, }, void, addTaintedLocalObject, (, Var, var, ), {, taintedLocals, ., add, (]
[void, addTaintedLocalObject, (, Var, var, ), {, taintedLocals, ., add, (, var, ), ;, }, void, resetLocalVars, (, ), {]
[(, Var, var, ), {, taintedLocals, ., add, (, var, ), ;, }, void, resetLocalVars, (, ), {, blacklisted, =]
[var, ), {, taintedLocals, ., add, (, var, ), ;, }, void, resetLocalVars, (, ), {, blacklisted, =, null, ;]
[{, taintedLocals, ., add, (, var, ), ;, }, void, resetLocalVars, (, ), {, blacklisted, =, null, ;, taintedLocals, =]
[., add, (, var, ), ;, }, void, resetLocalVars, (, ), {, blacklisted, =, null, ;, taintedLocals, =, null, ;]
[(, var, ), ;, }, void, resetLocalVars, (, ), {, blacklisted, =, null, ;, taintedLocals, =, null, ;, knownLocals, =]
[(, var, ), ;, }, void, resetLocalVars, (, ), {, blacklisted, =, null, ;, taintedLocals, =, null, ;, knownLocals, =]
[=, null, ;, knownLocals, =, Collections, ., emptySet, (, ), ;, }, public, void, blacklistLocal, (, Var, var, ), {]
[=, null, ;, knownLocals, =, Collections, ., emptySet, (, ), ;, }, public, void, blacklistLocal, (, Var, var, ), {]
[=, Collections, ., emptySet, (, ), ;, }, public, void, blacklistLocal, (, Var, var, ), {, blacklisted, ., add, (]
[blacklistLocal, (, Var, var, ), {, blacklisted, ., add, (, var, ), ;, }, boolean, mayBePure, (, ), {, return]
[(, Var, var, ), {, blacklisted, ., add, (, var, ), ;, }, boolean, mayBePure, (, ), {, return, !]
[Var, var, ), {, blacklisted, ., add, (, var, ), ;, }, boolean, mayBePure, (, ), {, return, !, (]
[Var, var, ), {, blacklisted, ., add, (, var, ), ;, }, boolean, mayBePure, (, ), {, return, !, (]
[Var, var, ), {, blacklisted, ., add, (, var, ), ;, }, boolean, mayBePure, (, ), {, return, !, (]
[Var, var, ), {, blacklisted, ., add, (, var, ), ;, }, boolean, mayBePure, (, ), {, return, !, (]
[Var, var, ), {, blacklisted, ., add, (, var, ), ;, }, boolean, mayBePure, (, ), {, return, !, (]
[), {, blacklisted, ., add, (, var, ), ;, }, boolean, mayBePure, (, ), {, return, !, (, functionThrows, ||]
[blacklisted, ., add, (, var, ), ;, }, boolean, mayBePure, (, ), {, return, !, (, functionThrows, ||, taintsGlobalState, ||]
[add, (, var, ), ;, }, boolean, mayBePure, (, ), {, return, !, (, functionThrows, ||, taintsGlobalState, ||, taintsThis, ||]
[var, ), ;, }, boolean, mayBePure, (, ), {, return, !, (, functionThrows, ||, taintsGlobalState, ||, taintsThis, ||, taintsArguments, ||]
[!, (, functionThrows, ||, taintsGlobalState, ||, taintsThis, ||, taintsArguments, ||, taintsUnknown, ), ;, }, boolean, mayHaveSideEffects, (, ), {, return]
[(, functionThrows, ||, taintsGlobalState, ||, taintsThis, ||, taintsArguments, ||, taintsUnknown, ), ;, }, boolean, mayHaveSideEffects, (, ), {, return, !]
[||, taintsUnknown, ), ;, }, boolean, mayHaveSideEffects, (, ), {, return, !, pureFunction, ;, }, void, setIsPure, (, ), {]
[), ;, }, boolean, mayHaveSideEffects, (, ), {, return, !, pureFunction, ;, }, void, setIsPure, (, ), {, pureFunction, =]
[}, boolean, mayHaveSideEffects, (, ), {, return, !, pureFunction, ;, }, void, setIsPure, (, ), {, pureFunction, =, true, ;]
[}, void, setIsPure, (, ), {, pureFunction, =, true, ;, checkInvariant, (, ), ;, }, void, setTaintsGlobalState, (, ), {]
[setIsPure, (, ), {, pureFunction, =, true, ;, checkInvariant, (, ), ;, }, void, setTaintsGlobalState, (, ), {, taintsGlobalState, =]
[), {, pureFunction, =, true, ;, checkInvariant, (, ), ;, }, void, setTaintsGlobalState, (, ), {, taintsGlobalState, =, true, ;]
[}, void, setTaintsGlobalState, (, ), {, taintsGlobalState, =, true, ;, checkInvariant, (, ), ;, }, void, setTaintsThis, (, ), {]
[setTaintsGlobalState, (, ), {, taintsGlobalState, =, true, ;, checkInvariant, (, ), ;, }, void, setTaintsThis, (, ), {, taintsThis, =]
[), {, taintsGlobalState, =, true, ;, checkInvariant, (, ), ;, }, void, setTaintsThis, (, ), {, taintsThis, =, true, ;]
[}, void, setTaintsThis, (, ), {, taintsThis, =, true, ;, checkInvariant, (, ), ;, }, void, setTaintsArguments, (, ), {]
[setTaintsThis, (, ), {, taintsThis, =, true, ;, checkInvariant, (, ), ;, }, void, setTaintsArguments, (, ), {, taintsArguments, =]
[), {, taintsThis, =, true, ;, checkInvariant, (, ), ;, }, void, setTaintsArguments, (, ), {, taintsArguments, =, true, ;]
[}, void, setTaintsArguments, (, ), {, taintsArguments, =, true, ;, checkInvariant, (, ), ;, }, void, setFunctionThrows, (, ), {]
[setTaintsArguments, (, ), {, taintsArguments, =, true, ;, checkInvariant, (, ), ;, }, void, setFunctionThrows, (, ), {, functionThrows, =]
[), {, taintsArguments, =, true, ;, checkInvariant, (, ), ;, }, void, setFunctionThrows, (, ), {, functionThrows, =, true, ;]
[}, void, setFunctionThrows, (, ), {, functionThrows, =, true, ;, checkInvariant, (, ), ;, }, void, setTaintsUnknown, (, ), {]
[setFunctionThrows, (, ), {, functionThrows, =, true, ;, checkInvariant, (, ), ;, }, void, setTaintsUnknown, (, ), {, taintsUnknown, =]
[), {, functionThrows, =, true, ;, checkInvariant, (, ), ;, }, void, setTaintsUnknown, (, ), {, taintsUnknown, =, true, ;]
[}, void, setTaintsUnknown, (, ), {, taintsUnknown, =, true, ;, checkInvariant, (, ), ;, }, void, setTaintsReturn, (, ), {]
[setTaintsUnknown, (, ), {, taintsUnknown, =, true, ;, checkInvariant, (, ), ;, }, void, setTaintsReturn, (, ), {, taintsReturn, =]
[), {, taintsUnknown, =, true, ;, checkInvariant, (, ), ;, }, void, setTaintsReturn, (, ), {, taintsReturn, =, true, ;]
[void, setTaintsReturn, (, ), {, taintsReturn, =, true, ;, checkInvariant, (, ), ;, }, boolean, mutatesGlobalState, (, ), {, return]
[void, setTaintsReturn, (, ), {, taintsReturn, =, true, ;, checkInvariant, (, ), ;, }, boolean, mutatesGlobalState, (, ), {, return]
[void, setTaintsReturn, (, ), {, taintsReturn, =, true, ;, checkInvariant, (, ), ;, }, boolean, mutatesGlobalState, (, ), {, return]
[(, ), {, taintsReturn, =, true, ;, checkInvariant, (, ), ;, }, boolean, mutatesGlobalState, (, ), {, return, taintsGlobalState, ||]
[{, taintsReturn, =, true, ;, checkInvariant, (, ), ;, }, boolean, mutatesGlobalState, (, ), {, return, taintsGlobalState, ||, taintsArguments, ||]
[}, boolean, mutatesGlobalState, (, ), {, return, taintsGlobalState, ||, taintsArguments, ||, taintsUnknown, ;, }, boolean, mutatesThis, (, ), {, return]
[taintsArguments, ||, taintsUnknown, ;, }, boolean, mutatesThis, (, ), {, return, taintsThis, ;, }, boolean, functionThrows, (, ), {, return]
[;, }, boolean, functionThrows, (, ), {, return, functionThrows, ;, }, private, void, checkInvariant, (, ), {, boolean, invariant, =]
[;, }, boolean, functionThrows, (, ), {, return, functionThrows, ;, }, private, void, checkInvariant, (, ), {, boolean, invariant, =]
[(, ), {, return, functionThrows, ;, }, private, void, checkInvariant, (, ), {, boolean, invariant, =, mayBePure, (, ), ||]
[}, private, void, checkInvariant, (, ), {, boolean, invariant, =, mayBePure, (, ), ||, mayHaveSideEffects, (, ), ;, if, (]
[private, void, checkInvariant, (, ), {, boolean, invariant, =, mayBePure, (, ), ||, mayHaveSideEffects, (, ), ;, if, (, !]
[), {, boolean, invariant, =, mayBePure, (, ), ||, mayHaveSideEffects, (, ), ;, if, (, !, invariant, ), {, throw]
[invariant, =, mayBePure, (, ), ||, mayHaveSideEffects, (, ), ;, if, (, !, invariant, ), {, throw, new, IllegalStateException, (]
[invariant, =, mayBePure, (, ), ||, mayHaveSideEffects, (, ), ;, if, (, !, invariant, ), {, throw, new, IllegalStateException, (]
[mayBePure, (, ), ||, mayHaveSideEffects, (, ), ;, if, (, !, invariant, ), {, throw, new, IllegalStateException, (, "Invariant failed.  ", +]
[throw, new, IllegalStateException, (, "Invariant failed.  ", +, toString, (, ), ), ;, }, }, void, appendCall, (, Node, callNode, ), {]
[throw, new, IllegalStateException, (, "Invariant failed.  ", +, toString, (, ), ), ;, }, }, void, appendCall, (, Node, callNode, ), {]
["Invariant failed.  ", +, toString, (, ), ), ;, }, }, void, appendCall, (, Node, callNode, ), {, callsInFunctionBody, ., add, (]
[callNode, ), {, callsInFunctionBody, ., add, (, callNode, ), ;, }, List, <, Node, >, getCallsInFunctionBody, (, ), {, return]
[), {, return, callsInFunctionBody, ;, }, @, Override, public, String, toString, (, ), {, List, <, String, >, status, =]
[), {, return, callsInFunctionBody, ;, }, @, Override, public, String, toString, (, ), {, List, <, String, >, status, =]
[public, String, toString, (, ), {, List, <, String, >, status, =, Lists, ., newArrayList, (, ), ;, if, (]
[(, ), {, List, <, String, >, status, =, Lists, ., newArrayList, (, ), ;, if, (, extern, ), {]
[(, ), {, List, <, String, >, status, =, Lists, ., newArrayList, (, ), ;, if, (, extern, ), {]
[<, String, >, status, =, Lists, ., newArrayList, (, ), ;, if, (, extern, ), {, status, ., add, (]
[., newArrayList, (, ), ;, if, (, extern, ), {, status, ., add, (, "extern", ), ;, }, if, (]
[), ;, if, (, extern, ), {, status, ., add, (, "extern", ), ;, }, if, (, pureFunction, ), {]
[), ;, if, (, extern, ), {, status, ., add, (, "extern", ), ;, }, if, (, pureFunction, ), {]
[extern, ), {, status, ., add, (, "extern", ), ;, }, if, (, pureFunction, ), {, status, ., add, (]
[(, "extern", ), ;, }, if, (, pureFunction, ), {, status, ., add, (, "pure", ), ;, }, if, (]
[;, }, if, (, pureFunction, ), {, status, ., add, (, "pure", ), ;, }, if, (, taintsThis, ), {]
[;, }, if, (, pureFunction, ), {, status, ., add, (, "pure", ), ;, }, if, (, taintsThis, ), {]
[pureFunction, ), {, status, ., add, (, "pure", ), ;, }, if, (, taintsThis, ), {, status, ., add, (]
[(, "pure", ), ;, }, if, (, taintsThis, ), {, status, ., add, (, "this", ), ;, }, if, (]
[;, }, if, (, taintsThis, ), {, status, ., add, (, "this", ), ;, }, if, (, taintsGlobalState, ), {]
[;, }, if, (, taintsThis, ), {, status, ., add, (, "this", ), ;, }, if, (, taintsGlobalState, ), {]
[taintsThis, ), {, status, ., add, (, "this", ), ;, }, if, (, taintsGlobalState, ), {, status, ., add, (]
[(, "this", ), ;, }, if, (, taintsGlobalState, ), {, status, ., add, (, "global", ), ;, }, if, (]
[;, }, if, (, taintsGlobalState, ), {, status, ., add, (, "global", ), ;, }, if, (, functionThrows, ), {]
[;, }, if, (, taintsGlobalState, ), {, status, ., add, (, "global", ), ;, }, if, (, functionThrows, ), {]
[taintsGlobalState, ), {, status, ., add, (, "global", ), ;, }, if, (, functionThrows, ), {, status, ., add, (]
[(, "global", ), ;, }, if, (, functionThrows, ), {, status, ., add, (, "throw", ), ;, }, if, (]
[;, }, if, (, functionThrows, ), {, status, ., add, (, "throw", ), ;, }, if, (, taintsUnknown, ), {]
[;, }, if, (, functionThrows, ), {, status, ., add, (, "throw", ), ;, }, if, (, taintsUnknown, ), {]
[functionThrows, ), {, status, ., add, (, "throw", ), ;, }, if, (, taintsUnknown, ), {, status, ., add, (]
[add, (, "throw", ), ;, }, if, (, taintsUnknown, ), {, status, ., add, (, "complex", ), ;, }, return]
[add, (, "throw", ), ;, }, if, (, taintsUnknown, ), {, status, ., add, (, "complex", ), ;, }, return]
["throw", ), ;, }, if, (, taintsUnknown, ), {, status, ., add, (, "complex", ), ;, }, return, "Side effects: ", +]
["throw", ), ;, }, if, (, taintsUnknown, ), {, status, ., add, (, "complex", ), ;, }, return, "Side effects: ", +]
[String, reportPath, ;, private, final, boolean, useNameReferenceGraph, ;, Driver, (, AbstractCompiler, compiler, ,, String, reportPath, ,, boolean, useNameReferenceGraph, ), {]
[String, reportPath, ;, private, final, boolean, useNameReferenceGraph, ;, Driver, (, AbstractCompiler, compiler, ,, String, reportPath, ,, boolean, useNameReferenceGraph, ), {]
[final, boolean, useNameReferenceGraph, ;, Driver, (, AbstractCompiler, compiler, ,, String, reportPath, ,, boolean, useNameReferenceGraph, ), {, this, ., compiler, =]
[useNameReferenceGraph, ;, Driver, (, AbstractCompiler, compiler, ,, String, reportPath, ,, boolean, useNameReferenceGraph, ), {, this, ., compiler, =, compiler, ;]
[useNameReferenceGraph, ;, Driver, (, AbstractCompiler, compiler, ,, String, reportPath, ,, boolean, useNameReferenceGraph, ), {, this, ., compiler, =, compiler, ;]
[AbstractCompiler, compiler, ,, String, reportPath, ,, boolean, useNameReferenceGraph, ), {, this, ., compiler, =, compiler, ;, this, ., reportPath, =]
[,, String, reportPath, ,, boolean, useNameReferenceGraph, ), {, this, ., compiler, =, compiler, ;, this, ., reportPath, =, reportPath, ;]
[,, String, reportPath, ,, boolean, useNameReferenceGraph, ), {, this, ., compiler, =, compiler, ;, this, ., reportPath, =, reportPath, ;]
[boolean, useNameReferenceGraph, ), {, this, ., compiler, =, compiler, ;, this, ., reportPath, =, reportPath, ;, this, ., useNameReferenceGraph, =]
[=, useNameReferenceGraph, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, DefinitionProvider, definitionProvider, =]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, DefinitionProvider, definitionProvider, =, null, ;, if, (]
[Node, externs, ,, Node, root, ), {, DefinitionProvider, definitionProvider, =, null, ;, if, (, useNameReferenceGraph, ), {, NameReferenceGraphConstruction, graphBuilder, =]
[Node, root, ), {, DefinitionProvider, definitionProvider, =, null, ;, if, (, useNameReferenceGraph, ), {, NameReferenceGraphConstruction, graphBuilder, =, new, NameReferenceGraphConstruction, (]
[{, DefinitionProvider, definitionProvider, =, null, ;, if, (, useNameReferenceGraph, ), {, NameReferenceGraphConstruction, graphBuilder, =, new, NameReferenceGraphConstruction, (, compiler, ), ;]
[{, DefinitionProvider, definitionProvider, =, null, ;, if, (, useNameReferenceGraph, ), {, NameReferenceGraphConstruction, graphBuilder, =, new, NameReferenceGraphConstruction, (, compiler, ), ;]
[null, ;, if, (, useNameReferenceGraph, ), {, NameReferenceGraphConstruction, graphBuilder, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, graphBuilder, ., process, (]
[if, (, useNameReferenceGraph, ), {, NameReferenceGraphConstruction, graphBuilder, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, graphBuilder, ., process, (, externs, ,]
[), {, NameReferenceGraphConstruction, graphBuilder, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, graphBuilder, ., process, (, externs, ,, root, ), ;]
[NameReferenceGraphConstruction, graphBuilder, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, graphBuilder, ., process, (, externs, ,, root, ), ;, definitionProvider, =]
[NameReferenceGraphConstruction, graphBuilder, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, graphBuilder, ., process, (, externs, ,, root, ), ;, definitionProvider, =]
[(, externs, ,, root, ), ;, definitionProvider, =, graphBuilder, ., getNameReferenceGraph, (, ), ;, }, else, {, SimpleDefinitionFinder, defFinder, =]
[root, ), ;, definitionProvider, =, graphBuilder, ., getNameReferenceGraph, (, ), ;, }, else, {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (]
[definitionProvider, =, graphBuilder, ., getNameReferenceGraph, (, ), ;, }, else, {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;]
[definitionProvider, =, graphBuilder, ., getNameReferenceGraph, (, ), ;, }, else, {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;]
[getNameReferenceGraph, (, ), ;, }, else, {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (]
[), ;, }, else, {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,]
[else, {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;]
[SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;, definitionProvider, =]
[compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;, definitionProvider, =, defFinder, ;, }, PureFunctionIdentifier, pureFunctionIdentifier, =]
[defFinder, ., process, (, externs, ,, root, ), ;, definitionProvider, =, defFinder, ;, }, PureFunctionIdentifier, pureFunctionIdentifier, =, new, PureFunctionIdentifier, (]
[process, (, externs, ,, root, ), ;, definitionProvider, =, defFinder, ;, }, PureFunctionIdentifier, pureFunctionIdentifier, =, new, PureFunctionIdentifier, (, compiler, ,]
[,, root, ), ;, definitionProvider, =, defFinder, ;, }, PureFunctionIdentifier, pureFunctionIdentifier, =, new, PureFunctionIdentifier, (, compiler, ,, definitionProvider, ), ;]
[,, root, ), ;, definitionProvider, =, defFinder, ;, }, PureFunctionIdentifier, pureFunctionIdentifier, =, new, PureFunctionIdentifier, (, compiler, ,, definitionProvider, ), ;]
[definitionProvider, =, defFinder, ;, }, PureFunctionIdentifier, pureFunctionIdentifier, =, new, PureFunctionIdentifier, (, compiler, ,, definitionProvider, ), ;, pureFunctionIdentifier, ., process, (]
[defFinder, ;, }, PureFunctionIdentifier, pureFunctionIdentifier, =, new, PureFunctionIdentifier, (, compiler, ,, definitionProvider, ), ;, pureFunctionIdentifier, ., process, (, externs, ,]
[=, new, PureFunctionIdentifier, (, compiler, ,, definitionProvider, ), ;, pureFunctionIdentifier, ., process, (, externs, ,, root, ), ;, if, (]
[=, new, PureFunctionIdentifier, (, compiler, ,, definitionProvider, ), ;, pureFunctionIdentifier, ., process, (, externs, ,, root, ), ;, if, (]
[PureFunctionIdentifier, (, compiler, ,, definitionProvider, ), ;, pureFunctionIdentifier, ., process, (, externs, ,, root, ), ;, if, (, reportPath, !=]
[), ;, pureFunctionIdentifier, ., process, (, externs, ,, root, ), ;, if, (, reportPath, !=, null, ), {, try, {]
[), ;, pureFunctionIdentifier, ., process, (, externs, ,, root, ), ;, if, (, reportPath, !=, null, ), {, try, {]
[process, (, externs, ,, root, ), ;, if, (, reportPath, !=, null, ), {, try, {, Files, ., write, (]
[process, (, externs, ,, root, ), ;, if, (, reportPath, !=, null, ), {, try, {, Files, ., write, (]
[;, if, (, reportPath, !=, null, ), {, try, {, Files, ., write, (, pureFunctionIdentifier, ., getDebugReport, (, ), ,]
[reportPath, !=, null, ), {, try, {, Files, ., write, (, pureFunctionIdentifier, ., getDebugReport, (, ), ,, new, File, (]
[), {, try, {, Files, ., write, (, pureFunctionIdentifier, ., getDebugReport, (, ), ,, new, File, (, reportPath, ), ,]
[), {, try, {, Files, ., write, (, pureFunctionIdentifier, ., getDebugReport, (, ), ,, new, File, (, reportPath, ), ,]
[,, new, File, (, reportPath, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, throw]
[(, reportPath, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (]
