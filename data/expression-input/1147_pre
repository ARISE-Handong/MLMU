[private, final, Integer, priority, ;, private, final, Boolean, daemonFlag, ;, private, BasicThreadFactory, (, final, Builder, builder, ), {, if, (]
[private, final, Integer, priority, ;, private, final, Boolean, daemonFlag, ;, private, BasicThreadFactory, (, final, Builder, builder, ), {, if, (]
[private, final, Integer, priority, ;, private, final, Boolean, daemonFlag, ;, private, BasicThreadFactory, (, final, Builder, builder, ), {, if, (]
[;, private, final, Boolean, daemonFlag, ;, private, BasicThreadFactory, (, final, Builder, builder, ), {, if, (, builder, ., wrappedFactory, ==]
[Boolean, daemonFlag, ;, private, BasicThreadFactory, (, final, Builder, builder, ), {, if, (, builder, ., wrappedFactory, ==, null, ), {]
[;, private, BasicThreadFactory, (, final, Builder, builder, ), {, if, (, builder, ., wrappedFactory, ==, null, ), {, wrappedFactory, =]
[;, private, BasicThreadFactory, (, final, Builder, builder, ), {, if, (, builder, ., wrappedFactory, ==, null, ), {, wrappedFactory, =]
[if, (, builder, ., wrappedFactory, ==, null, ), {, wrappedFactory, =, Executors, ., defaultThreadFactory, (, ), ;, }, else, {]
[builder, ., wrappedFactory, ==, null, ), {, wrappedFactory, =, Executors, ., defaultThreadFactory, (, ), ;, }, else, {, wrappedFactory, =]
[builder, ., wrappedFactory, ==, null, ), {, wrappedFactory, =, Executors, ., defaultThreadFactory, (, ), ;, }, else, {, wrappedFactory, =]
[), {, wrappedFactory, =, Executors, ., defaultThreadFactory, (, ), ;, }, else, {, wrappedFactory, =, builder, ., wrappedFactory, ;, }]
[wrappedFactory, =, Executors, ., defaultThreadFactory, (, ), ;, }, else, {, wrappedFactory, =, builder, ., wrappedFactory, ;, }, namingPattern, =]
[wrappedFactory, =, Executors, ., defaultThreadFactory, (, ), ;, }, else, {, wrappedFactory, =, builder, ., wrappedFactory, ;, }, namingPattern, =]
[defaultThreadFactory, (, ), ;, }, else, {, wrappedFactory, =, builder, ., wrappedFactory, ;, }, namingPattern, =, builder, ., namingPattern, ;]
[), ;, }, else, {, wrappedFactory, =, builder, ., wrappedFactory, ;, }, namingPattern, =, builder, ., namingPattern, ;, priority, =]
[), ;, }, else, {, wrappedFactory, =, builder, ., wrappedFactory, ;, }, namingPattern, =, builder, ., namingPattern, ;, priority, =]
[{, wrappedFactory, =, builder, ., wrappedFactory, ;, }, namingPattern, =, builder, ., namingPattern, ;, priority, =, builder, ., priority, ;]
[=, builder, ., wrappedFactory, ;, }, namingPattern, =, builder, ., namingPattern, ;, priority, =, builder, ., priority, ;, daemonFlag, =]
[=, builder, ., wrappedFactory, ;, }, namingPattern, =, builder, ., namingPattern, ;, priority, =, builder, ., priority, ;, daemonFlag, =]
[;, }, namingPattern, =, builder, ., namingPattern, ;, priority, =, builder, ., priority, ;, daemonFlag, =, builder, ., daemonFlag, ;]
[namingPattern, =, builder, ., namingPattern, ;, priority, =, builder, ., priority, ;, daemonFlag, =, builder, ., daemonFlag, ;, uncaughtExceptionHandler, =]
[namingPattern, =, builder, ., namingPattern, ;, priority, =, builder, ., priority, ;, daemonFlag, =, builder, ., daemonFlag, ;, uncaughtExceptionHandler, =]
[namingPattern, ;, priority, =, builder, ., priority, ;, daemonFlag, =, builder, ., daemonFlag, ;, uncaughtExceptionHandler, =, builder, ., exceptionHandler, ;]
[priority, =, builder, ., priority, ;, daemonFlag, =, builder, ., daemonFlag, ;, uncaughtExceptionHandler, =, builder, ., exceptionHandler, ;, threadCounter, =]
[builder, ., exceptionHandler, ;, threadCounter, =, new, AtomicLong, (, ), ;, }, public, final, ThreadFactory, getWrappedFactory, (, ), {, return]
[}, public, final, ThreadFactory, getWrappedFactory, (, ), {, return, wrappedFactory, ;, }, public, final, String, getNamingPattern, (, ), {, return]
[}, public, final, String, getNamingPattern, (, ), {, return, namingPattern, ;, }, public, final, Boolean, getDaemonFlag, (, ), {, return]
[}, public, final, Boolean, getDaemonFlag, (, ), {, return, daemonFlag, ;, }, public, final, Integer, getPriority, (, ), {, return]
[final, Integer, getPriority, (, ), {, return, priority, ;, }, public, final, Thread, ., UncaughtExceptionHandler, getUncaughtExceptionHandler, (, ), {, return]
[public, final, Thread, ., UncaughtExceptionHandler, getUncaughtExceptionHandler, (, ), {, return, uncaughtExceptionHandler, ;, }, public, long, getThreadCount, (, ), {, return]
[public, final, Thread, ., UncaughtExceptionHandler, getUncaughtExceptionHandler, (, ), {, return, uncaughtExceptionHandler, ;, }, public, long, getThreadCount, (, ), {, return]
[get, (, ), ;, }, @, Override, public, Thread, newThread, (, final, Runnable, r, ), {, final, Thread, t, =]
[get, (, ), ;, }, @, Override, public, Thread, newThread, (, final, Runnable, r, ), {, final, Thread, t, =]
[Override, public, Thread, newThread, (, final, Runnable, r, ), {, final, Thread, t, =, getWrappedFactory, (, ), ., newThread, (]
[newThread, (, final, Runnable, r, ), {, final, Thread, t, =, getWrappedFactory, (, ), ., newThread, (, r, ), ;]
[final, Runnable, r, ), {, final, Thread, t, =, getWrappedFactory, (, ), ., newThread, (, r, ), ;, initializeThread, (]
[{, final, Thread, t, =, getWrappedFactory, (, ), ., newThread, (, r, ), ;, initializeThread, (, t, ), ;, return]
[initializeThread, (, t, ), ;, return, t, ;, }, private, void, initializeThread, (, final, Thread, t, ), {, if, (]
[initializeThread, (, t, ), ;, return, t, ;, }, private, void, initializeThread, (, final, Thread, t, ), {, if, (]
[;, return, t, ;, }, private, void, initializeThread, (, final, Thread, t, ), {, if, (, getNamingPattern, (, ), !=]
[initializeThread, (, final, Thread, t, ), {, if, (, getNamingPattern, (, ), !=, null, ), {, final, Long, count, =]
[initializeThread, (, final, Thread, t, ), {, if, (, getNamingPattern, (, ), !=, null, ), {, final, Long, count, =]
[t, ), {, if, (, getNamingPattern, (, ), !=, null, ), {, final, Long, count, =, Long, ., valueOf, (]
[t, ), {, if, (, getNamingPattern, (, ), !=, null, ), {, final, Long, count, =, Long, ., valueOf, (]
[), !=, null, ), {, final, Long, count, =, Long, ., valueOf, (, threadCounter, ., incrementAndGet, (, ), ), ;]
[), !=, null, ), {, final, Long, count, =, Long, ., valueOf, (, threadCounter, ., incrementAndGet, (, ), ), ;]
[{, final, Long, count, =, Long, ., valueOf, (, threadCounter, ., incrementAndGet, (, ), ), ;, t, ., setName, (]
[{, final, Long, count, =, Long, ., valueOf, (, threadCounter, ., incrementAndGet, (, ), ), ;, t, ., setName, (]
[=, Long, ., valueOf, (, threadCounter, ., incrementAndGet, (, ), ), ;, t, ., setName, (, String, ., format, (]
[(, threadCounter, ., incrementAndGet, (, ), ), ;, t, ., setName, (, String, ., format, (, getNamingPattern, (, ), ,]
[;, t, ., setName, (, String, ., format, (, getNamingPattern, (, ), ,, count, ), ), ;, }, if, (]
[;, t, ., setName, (, String, ., format, (, getNamingPattern, (, ), ,, count, ), ), ;, }, if, (]
[(, String, ., format, (, getNamingPattern, (, ), ,, count, ), ), ;, }, if, (, getUncaughtExceptionHandler, (, ), !=]
[format, (, getNamingPattern, (, ), ,, count, ), ), ;, }, if, (, getUncaughtExceptionHandler, (, ), !=, null, ), {]
[format, (, getNamingPattern, (, ), ,, count, ), ), ;, }, if, (, getUncaughtExceptionHandler, (, ), !=, null, ), {]
[), ,, count, ), ), ;, }, if, (, getUncaughtExceptionHandler, (, ), !=, null, ), {, t, ., setUncaughtExceptionHandler, (]
[(, getUncaughtExceptionHandler, (, ), !=, null, ), {, t, ., setUncaughtExceptionHandler, (, getUncaughtExceptionHandler, (, ), ), ;, }, if, (]
[(, getUncaughtExceptionHandler, (, ), !=, null, ), {, t, ., setUncaughtExceptionHandler, (, getUncaughtExceptionHandler, (, ), ), ;, }, if, (]
[!=, null, ), {, t, ., setUncaughtExceptionHandler, (, getUncaughtExceptionHandler, (, ), ), ;, }, if, (, getPriority, (, ), !=]
[{, t, ., setUncaughtExceptionHandler, (, getUncaughtExceptionHandler, (, ), ), ;, }, if, (, getPriority, (, ), !=, null, ), {]
[{, t, ., setUncaughtExceptionHandler, (, getUncaughtExceptionHandler, (, ), ), ;, }, if, (, getPriority, (, ), !=, null, ), {]
[(, getUncaughtExceptionHandler, (, ), ), ;, }, if, (, getPriority, (, ), !=, null, ), {, t, ., setPriority, (]
[(, getUncaughtExceptionHandler, (, ), ), ;, }, if, (, getPriority, (, ), !=, null, ), {, t, ., setPriority, (]
[!=, null, ), {, t, ., setPriority, (, getPriority, (, ), ., intValue, (, ), ), ;, }, if, (]
[!=, null, ), {, t, ., setPriority, (, getPriority, (, ), ., intValue, (, ), ), ;, }, if, (]
[t, ., setPriority, (, getPriority, (, ), ., intValue, (, ), ), ;, }, if, (, getDaemonFlag, (, ), !=]
[(, getPriority, (, ), ., intValue, (, ), ), ;, }, if, (, getDaemonFlag, (, ), !=, null, ), {]
[(, getPriority, (, ), ., intValue, (, ), ), ;, }, if, (, getDaemonFlag, (, ), !=, null, ), {]
[., intValue, (, ), ), ;, }, if, (, getDaemonFlag, (, ), !=, null, ), {, t, ., setDaemon, (]
[., intValue, (, ), ), ;, }, if, (, getDaemonFlag, (, ), !=, null, ), {, t, ., setDaemon, (]
[;, private, Integer, priority, ;, private, Boolean, daemonFlag, ;, public, Builder, wrappedFactory, (, final, ThreadFactory, factory, ), {, if, (]
[;, private, Integer, priority, ;, private, Boolean, daemonFlag, ;, public, Builder, wrappedFactory, (, final, ThreadFactory, factory, ), {, if, (]
[Integer, priority, ;, private, Boolean, daemonFlag, ;, public, Builder, wrappedFactory, (, final, ThreadFactory, factory, ), {, if, (, factory, ==]
[Boolean, daemonFlag, ;, public, Builder, wrappedFactory, (, final, ThreadFactory, factory, ), {, if, (, factory, ==, null, ), {, throw]
[public, Builder, wrappedFactory, (, final, ThreadFactory, factory, ), {, if, (, factory, ==, null, ), {, throw, new, NullPointerException, (]
[final, ThreadFactory, factory, ), {, if, (, factory, ==, null, ), {, throw, new, NullPointerException, (, "Wrapped ThreadFactory must not be null!", ), ;, }]
[factory, ), {, if, (, factory, ==, null, ), {, throw, new, NullPointerException, (, "Wrapped ThreadFactory must not be null!", ), ;, }, wrappedFactory, =]
[if, (, factory, ==, null, ), {, throw, new, NullPointerException, (, "Wrapped ThreadFactory must not be null!", ), ;, }, wrappedFactory, =, factory, ;, return]
[}, wrappedFactory, =, factory, ;, return, this, ;, }, public, Builder, namingPattern, (, final, String, pattern, ), {, if, (]
[}, wrappedFactory, =, factory, ;, return, this, ;, }, public, Builder, namingPattern, (, final, String, pattern, ), {, if, (]
[=, factory, ;, return, this, ;, }, public, Builder, namingPattern, (, final, String, pattern, ), {, if, (, pattern, ==]
[this, ;, }, public, Builder, namingPattern, (, final, String, pattern, ), {, if, (, pattern, ==, null, ), {, throw]
[public, Builder, namingPattern, (, final, String, pattern, ), {, if, (, pattern, ==, null, ), {, throw, new, NullPointerException, (]
[final, String, pattern, ), {, if, (, pattern, ==, null, ), {, throw, new, NullPointerException, (, "Naming pattern must not be null!", ), ;, }]
[pattern, ), {, if, (, pattern, ==, null, ), {, throw, new, NullPointerException, (, "Naming pattern must not be null!", ), ;, }, namingPattern, =]
[if, (, pattern, ==, null, ), {, throw, new, NullPointerException, (, "Naming pattern must not be null!", ), ;, }, namingPattern, =, pattern, ;, return]
[), ;, }, namingPattern, =, pattern, ;, return, this, ;, }, public, Builder, daemon, (, final, boolean, f, ), {]
[}, namingPattern, =, pattern, ;, return, this, ;, }, public, Builder, daemon, (, final, boolean, f, ), {, daemonFlag, =]
[}, namingPattern, =, pattern, ;, return, this, ;, }, public, Builder, daemon, (, final, boolean, f, ), {, daemonFlag, =]
[;, return, this, ;, }, public, Builder, daemon, (, final, boolean, f, ), {, daemonFlag, =, Boolean, ., valueOf, (]
[}, public, Builder, daemon, (, final, boolean, f, ), {, daemonFlag, =, Boolean, ., valueOf, (, f, ), ;, return]
[Boolean, ., valueOf, (, f, ), ;, return, this, ;, }, public, Builder, priority, (, final, int, prio, ), {]
[valueOf, (, f, ), ;, return, this, ;, }, public, Builder, priority, (, final, int, prio, ), {, priority, =]
[valueOf, (, f, ), ;, return, this, ;, }, public, Builder, priority, (, final, int, prio, ), {, priority, =]
[;, return, this, ;, }, public, Builder, priority, (, final, int, prio, ), {, priority, =, Integer, ., valueOf, (]
[}, public, Builder, priority, (, final, int, prio, ), {, priority, =, Integer, ., valueOf, (, prio, ), ;, return]
[prio, ), ;, return, this, ;, }, public, Builder, uncaughtExceptionHandler, (, final, Thread, ., UncaughtExceptionHandler, handler, ), {, if, (]
[prio, ), ;, return, this, ;, }, public, Builder, uncaughtExceptionHandler, (, final, Thread, ., UncaughtExceptionHandler, handler, ), {, if, (]
[;, return, this, ;, }, public, Builder, uncaughtExceptionHandler, (, final, Thread, ., UncaughtExceptionHandler, handler, ), {, if, (, handler, ==]
[}, public, Builder, uncaughtExceptionHandler, (, final, Thread, ., UncaughtExceptionHandler, handler, ), {, if, (, handler, ==, null, ), {, throw]
[uncaughtExceptionHandler, (, final, Thread, ., UncaughtExceptionHandler, handler, ), {, if, (, handler, ==, null, ), {, throw, new, NullPointerException, (]
[., UncaughtExceptionHandler, handler, ), {, if, (, handler, ==, null, ), {, throw, new, NullPointerException, (, "Uncaught exception handler must not be null!", ), ;, }]
[handler, ), {, if, (, handler, ==, null, ), {, throw, new, NullPointerException, (, "Uncaught exception handler must not be null!", ), ;, }, exceptionHandler, =]
[if, (, handler, ==, null, ), {, throw, new, NullPointerException, (, "Uncaught exception handler must not be null!", ), ;, }, exceptionHandler, =, handler, ;, return]
[NullPointerException, (, "Uncaught exception handler must not be null!", ), ;, }, exceptionHandler, =, handler, ;, return, this, ;, }, public, void, reset, (, ), {]
["Uncaught exception handler must not be null!", ), ;, }, exceptionHandler, =, handler, ;, return, this, ;, }, public, void, reset, (, ), {, wrappedFactory, =]
[;, }, exceptionHandler, =, handler, ;, return, this, ;, }, public, void, reset, (, ), {, wrappedFactory, =, null, ;]
[exceptionHandler, =, handler, ;, return, this, ;, }, public, void, reset, (, ), {, wrappedFactory, =, null, ;, exceptionHandler, =]
[handler, ;, return, this, ;, }, public, void, reset, (, ), {, wrappedFactory, =, null, ;, exceptionHandler, =, null, ;]
[return, this, ;, }, public, void, reset, (, ), {, wrappedFactory, =, null, ;, exceptionHandler, =, null, ;, namingPattern, =]
[;, }, public, void, reset, (, ), {, wrappedFactory, =, null, ;, exceptionHandler, =, null, ;, namingPattern, =, null, ;]
[public, void, reset, (, ), {, wrappedFactory, =, null, ;, exceptionHandler, =, null, ;, namingPattern, =, null, ;, priority, =]
[reset, (, ), {, wrappedFactory, =, null, ;, exceptionHandler, =, null, ;, namingPattern, =, null, ;, priority, =, null, ;]
[), {, wrappedFactory, =, null, ;, exceptionHandler, =, null, ;, namingPattern, =, null, ;, priority, =, null, ;, daemonFlag, =]
[=, null, ;, daemonFlag, =, null, ;, }, @, Override, public, BasicThreadFactory, build, (, ), {, final, BasicThreadFactory, factory, =]
[daemonFlag, =, null, ;, }, @, Override, public, BasicThreadFactory, build, (, ), {, final, BasicThreadFactory, factory, =, new, BasicThreadFactory, (]
[;, }, @, Override, public, BasicThreadFactory, build, (, ), {, final, BasicThreadFactory, factory, =, new, BasicThreadFactory, (, this, ), ;]
[BasicThreadFactory, build, (, ), {, final, BasicThreadFactory, factory, =, new, BasicThreadFactory, (, this, ), ;, reset, (, ), ;, return]
