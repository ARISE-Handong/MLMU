[., util, ., StringJoiner, ., join, ;, public, class, Reporter, {, public, void, checkedExceptionInvalid, (, Throwable, t, ), {, throw]
[StringJoiner, ., join, ;, public, class, Reporter, {, public, void, checkedExceptionInvalid, (, Throwable, t, ), {, throw, new, MockitoException, (]
[join, ;, public, class, Reporter, {, public, void, checkedExceptionInvalid, (, Throwable, t, ), {, throw, new, MockitoException, (, join, (]
[public, class, Reporter, {, public, void, checkedExceptionInvalid, (, Throwable, t, ), {, throw, new, MockitoException, (, join, (, "Checked exception is invalid for this method!", ,]
[public, class, Reporter, {, public, void, checkedExceptionInvalid, (, Throwable, t, ), {, throw, new, MockitoException, (, join, (, "Checked exception is invalid for this method!", ,]
[Reporter, {, public, void, checkedExceptionInvalid, (, Throwable, t, ), {, throw, new, MockitoException, (, join, (, "Checked exception is invalid for this method!", ,, "Invalid: ", +]
[MockitoException, (, join, (, "Checked exception is invalid for this method!", ,, "Invalid: ", +, t, ), ), ;, }, public, void, cannotStubWithNullThrowable, (, ), {, throw]
[(, "Checked exception is invalid for this method!", ,, "Invalid: ", +, t, ), ), ;, }, public, void, cannotStubWithNullThrowable, (, ), {, throw, new, MockitoException, (]
[,, "Invalid: ", +, t, ), ), ;, }, public, void, cannotStubWithNullThrowable, (, ), {, throw, new, MockitoException, (, join, (]
[throw, new, MockitoException, (, join, (, "Cannot stub with null throwable!", ), ), ;, }, public, void, unfinishedStubbing, (, Location, location, ), {, throw]
[(, join, (, "Cannot stub with null throwable!", ), ), ;, }, public, void, unfinishedStubbing, (, Location, location, ), {, throw, new, UnfinishedStubbingException, (]
[(, "Cannot stub with null throwable!", ), ), ;, }, public, void, unfinishedStubbing, (, Location, location, ), {, throw, new, UnfinishedStubbingException, (, join, (]
[), ), ;, }, public, void, unfinishedStubbing, (, Location, location, ), {, throw, new, UnfinishedStubbingException, (, join, (, "Unfinished stubbing detected here:", ,]
[;, }, public, void, unfinishedStubbing, (, Location, location, ), {, throw, new, UnfinishedStubbingException, (, join, (, "Unfinished stubbing detected here:", ,, location, ,]
[public, void, unfinishedStubbing, (, Location, location, ), {, throw, new, UnfinishedStubbingException, (, join, (, "Unfinished stubbing detected here:", ,, location, ,, "", ,]
[unfinishedStubbing, (, Location, location, ), {, throw, new, UnfinishedStubbingException, (, join, (, "Unfinished stubbing detected here:", ,, location, ,, "", ,, "E.g. thenReturn() may be missing.", ,]
[Location, location, ), {, throw, new, UnfinishedStubbingException, (, join, (, "Unfinished stubbing detected here:", ,, location, ,, "", ,, "E.g. thenReturn() may be missing.", ,, "Examples of correct stubbing:", ,]
[), {, throw, new, UnfinishedStubbingException, (, join, (, "Unfinished stubbing detected here:", ,, location, ,, "", ,, "E.g. thenReturn() may be missing.", ,, "Examples of correct stubbing:", ,, "    when(mock.isOk()).thenReturn(true);", ,]
[throw, new, UnfinishedStubbingException, (, join, (, "Unfinished stubbing detected here:", ,, location, ,, "", ,, "E.g. thenReturn() may be missing.", ,, "Examples of correct stubbing:", ,, "    when(mock.isOk()).thenReturn(true);", ,, "    when(mock.isOk()).thenThrow(exception);", ,]
[UnfinishedStubbingException, (, join, (, "Unfinished stubbing detected here:", ,, location, ,, "", ,, "E.g. thenReturn() may be missing.", ,, "Examples of correct stubbing:", ,, "    when(mock.isOk()).thenReturn(true);", ,, "    when(mock.isOk()).thenThrow(exception);", ,, "    doThrow(exception).when(mock).someVoidMethod();", ,]
[join, (, "Unfinished stubbing detected here:", ,, location, ,, "", ,, "E.g. thenReturn() may be missing.", ,, "Examples of correct stubbing:", ,, "    when(mock.isOk()).thenReturn(true);", ,, "    when(mock.isOk()).thenThrow(exception);", ,, "    doThrow(exception).when(mock).someVoidMethod();", ,, "Hints:", ,]
["Unfinished stubbing detected here:", ,, location, ,, "", ,, "E.g. thenReturn() may be missing.", ,, "Examples of correct stubbing:", ,, "    when(mock.isOk()).thenReturn(true);", ,, "    when(mock.isOk()).thenThrow(exception);", ,, "    doThrow(exception).when(mock).someVoidMethod();", ,, "Hints:", ,, " 1. missing thenReturn()", ,]
[location, ,, "", ,, "E.g. thenReturn() may be missing.", ,, "Examples of correct stubbing:", ,, "    when(mock.isOk()).thenReturn(true);", ,, "    when(mock.isOk()).thenThrow(exception);", ,, "    doThrow(exception).when(mock).someVoidMethod();", ,, "Hints:", ,, " 1. missing thenReturn()", ,, " 2. you are trying to stub a final method, you naughty developer!", ,]
["", ,, "E.g. thenReturn() may be missing.", ,, "Examples of correct stubbing:", ,, "    when(mock.isOk()).thenReturn(true);", ,, "    when(mock.isOk()).thenThrow(exception);", ,, "    doThrow(exception).when(mock).someVoidMethod();", ,, "Hints:", ,, " 1. missing thenReturn()", ,, " 2. you are trying to stub a final method, you naughty developer!", ,, " 3: you are stubbing the behaviour of another mock inside before 'thenReturn' instruction if completed", ,]
["Hints:", ,, " 1. missing thenReturn()", ,, " 2. you are trying to stub a final method, you naughty developer!", ,, " 3: you are stubbing the behaviour of another mock inside before 'thenReturn' instruction if completed", ,, "", ), ), ;, }, public, void, incorrectUseOfApi, (, ), {, throw]
[,, " 2. you are trying to stub a final method, you naughty developer!", ,, " 3: you are stubbing the behaviour of another mock inside before 'thenReturn' instruction if completed", ,, "", ), ), ;, }, public, void, incorrectUseOfApi, (, ), {, throw, new, MockitoException, (]
[,, " 3: you are stubbing the behaviour of another mock inside before 'thenReturn' instruction if completed", ,, "", ), ), ;, }, public, void, incorrectUseOfApi, (, ), {, throw, new, MockitoException, (, join, (]
[,, "", ), ), ;, }, public, void, incorrectUseOfApi, (, ), {, throw, new, MockitoException, (, join, (, "Incorrect use of API detected here:", ,]
[}, public, void, incorrectUseOfApi, (, ), {, throw, new, MockitoException, (, join, (, "Incorrect use of API detected here:", ,, new, LocationImpl, (, ), ,]
[void, incorrectUseOfApi, (, ), {, throw, new, MockitoException, (, join, (, "Incorrect use of API detected here:", ,, new, LocationImpl, (, ), ,, "", ,]
[(, ), {, throw, new, MockitoException, (, join, (, "Incorrect use of API detected here:", ,, new, LocationImpl, (, ), ,, "", ,, "You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once.", ,]
[{, throw, new, MockitoException, (, join, (, "Incorrect use of API detected here:", ,, new, LocationImpl, (, ), ,, "", ,, "You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once.", ,, "Examples of correct usage:", ,]
[new, MockitoException, (, join, (, "Incorrect use of API detected here:", ,, new, LocationImpl, (, ), ,, "", ,, "You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once.", ,, "Examples of correct usage:", ,, "    when(mock.isOk()).thenReturn(true).thenReturn(false).thenThrow(exception);", ,]
[(, join, (, "Incorrect use of API detected here:", ,, new, LocationImpl, (, ), ,, "", ,, "You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once.", ,, "Examples of correct usage:", ,, "    when(mock.isOk()).thenReturn(true).thenReturn(false).thenThrow(exception);", ,, "    when(mock.isOk()).thenReturn(true, false).thenThrow(exception);", ,]
["You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once.", ,, "Examples of correct usage:", ,, "    when(mock.isOk()).thenReturn(true).thenReturn(false).thenThrow(exception);", ,, "    when(mock.isOk()).thenReturn(true, false).thenThrow(exception);", ,, "", ), ), ;, }, public, void, missingMethodInvocation, (, ), {, throw]
[,, "    when(mock.isOk()).thenReturn(true).thenReturn(false).thenThrow(exception);", ,, "    when(mock.isOk()).thenReturn(true, false).thenThrow(exception);", ,, "", ), ), ;, }, public, void, missingMethodInvocation, (, ), {, throw, new, MissingMethodInvocationException, (]
[,, "    when(mock.isOk()).thenReturn(true, false).thenThrow(exception);", ,, "", ), ), ;, }, public, void, missingMethodInvocation, (, ), {, throw, new, MissingMethodInvocationException, (, join, (]
[,, "", ), ), ;, }, public, void, missingMethodInvocation, (, ), {, throw, new, MissingMethodInvocationException, (, join, (, "when() requires an argument which has to be 'a method call on a mock'.", ,]
[), ), ;, }, public, void, missingMethodInvocation, (, ), {, throw, new, MissingMethodInvocationException, (, join, (, "when() requires an argument which has to be 'a method call on a mock'.", ,, "For example:", ,]
[;, }, public, void, missingMethodInvocation, (, ), {, throw, new, MissingMethodInvocationException, (, join, (, "when() requires an argument which has to be 'a method call on a mock'.", ,, "For example:", ,, "    when(mock.getArticles()).thenReturn(articles);", ,]
[public, void, missingMethodInvocation, (, ), {, throw, new, MissingMethodInvocationException, (, join, (, "when() requires an argument which has to be 'a method call on a mock'.", ,, "For example:", ,, "    when(mock.getArticles()).thenReturn(articles);", ,, "", ,]
[missingMethodInvocation, (, ), {, throw, new, MissingMethodInvocationException, (, join, (, "when() requires an argument which has to be 'a method call on a mock'.", ,, "For example:", ,, "    when(mock.getArticles()).thenReturn(articles);", ,, "", ,, "Also, this error might show up because:", ,]
[), {, throw, new, MissingMethodInvocationException, (, join, (, "when() requires an argument which has to be 'a method call on a mock'.", ,, "For example:", ,, "    when(mock.getArticles()).thenReturn(articles);", ,, "", ,, "Also, this error might show up because:", ,, "1. you stub either of: final/private/equals()/hashCode() methods.", ,]
[throw, new, MissingMethodInvocationException, (, join, (, "when() requires an argument which has to be 'a method call on a mock'.", ,, "For example:", ,, "    when(mock.getArticles()).thenReturn(articles);", ,, "", ,, "Also, this error might show up because:", ,, "1. you stub either of: final/private/equals()/hashCode() methods.", ,, "   Those methods *cannot* be stubbed/verified.", ,]
[throw, new, MissingMethodInvocationException, (, join, (, "when() requires an argument which has to be 'a method call on a mock'.", ,, "For example:", ,, "    when(mock.getArticles()).thenReturn(articles);", ,, "", ,, "Also, this error might show up because:", ,, "1. you stub either of: final/private/equals()/hashCode() methods.", ,, "   Those methods *cannot* be stubbed/verified.", ,]
[MissingMethodInvocationException, (, join, (, "when() requires an argument which has to be 'a method call on a mock'.", ,, "For example:", ,, "    when(mock.getArticles()).thenReturn(articles);", ,, "", ,, "Also, this error might show up because:", ,, "1. you stub either of: final/private/equals()/hashCode() methods.", ,, "   Those methods *cannot* be stubbed/verified.", ,, "   ", +]
[MissingMethodInvocationException, (, join, (, "when() requires an argument which has to be 'a method call on a mock'.", ,, "For example:", ,, "    when(mock.getArticles()).thenReturn(articles);", ,, "", ,, "Also, this error might show up because:", ,, "1. you stub either of: final/private/equals()/hashCode() methods.", ,, "   Those methods *cannot* be stubbed/verified.", ,, "   ", +]
["when() requires an argument which has to be 'a method call on a mock'.", ,, "For example:", ,, "    when(mock.getArticles()).thenReturn(articles);", ,, "", ,, "Also, this error might show up because:", ,, "1. you stub either of: final/private/equals()/hashCode() methods.", ,, "   Those methods *cannot* be stubbed/verified.", ,, "   ", +, MockitoLimitations, ., NON_PUBLIC_PARENT, ,]
["For example:", ,, "    when(mock.getArticles()).thenReturn(articles);", ,, "", ,, "Also, this error might show up because:", ,, "1. you stub either of: final/private/equals()/hashCode() methods.", ,, "   Those methods *cannot* be stubbed/verified.", ,, "   ", +, MockitoLimitations, ., NON_PUBLIC_PARENT, ,, "2. inside when() you don't call method on mock but on some other object.", ,]
[NON_PUBLIC_PARENT, ,, "2. inside when() you don't call method on mock but on some other object.", ,, "", ), ), ;, }, public, void, unfinishedVerificationException, (, Location, location, ), {, UnfinishedVerificationException, exception, =]
[,, "", ), ), ;, }, public, void, unfinishedVerificationException, (, Location, location, ), {, UnfinishedVerificationException, exception, =, new, UnfinishedVerificationException, (]
[), ), ;, }, public, void, unfinishedVerificationException, (, Location, location, ), {, UnfinishedVerificationException, exception, =, new, UnfinishedVerificationException, (, join, (]
[;, }, public, void, unfinishedVerificationException, (, Location, location, ), {, UnfinishedVerificationException, exception, =, new, UnfinishedVerificationException, (, join, (, "Missing method call for verify(mock) here:", ,]
[public, void, unfinishedVerificationException, (, Location, location, ), {, UnfinishedVerificationException, exception, =, new, UnfinishedVerificationException, (, join, (, "Missing method call for verify(mock) here:", ,, location, ,]
[unfinishedVerificationException, (, Location, location, ), {, UnfinishedVerificationException, exception, =, new, UnfinishedVerificationException, (, join, (, "Missing method call for verify(mock) here:", ,, location, ,, "", ,]
[Location, location, ), {, UnfinishedVerificationException, exception, =, new, UnfinishedVerificationException, (, join, (, "Missing method call for verify(mock) here:", ,, location, ,, "", ,, "Example of correct verification:", ,]
[), {, UnfinishedVerificationException, exception, =, new, UnfinishedVerificationException, (, join, (, "Missing method call for verify(mock) here:", ,, location, ,, "", ,, "Example of correct verification:", ,, "    verify(mock).doSomething()", ,]
[UnfinishedVerificationException, exception, =, new, UnfinishedVerificationException, (, join, (, "Missing method call for verify(mock) here:", ,, location, ,, "", ,, "Example of correct verification:", ,, "    verify(mock).doSomething()", ,, "", ,]
[=, new, UnfinishedVerificationException, (, join, (, "Missing method call for verify(mock) here:", ,, location, ,, "", ,, "Example of correct verification:", ,, "    verify(mock).doSomething()", ,, "", ,, "Also, this error might show up because you verify either of: final/private/equals()/hashCode() methods.", ,]
[UnfinishedVerificationException, (, join, (, "Missing method call for verify(mock) here:", ,, location, ,, "", ,, "Example of correct verification:", ,, "    verify(mock).doSomething()", ,, "", ,, "Also, this error might show up because you verify either of: final/private/equals()/hashCode() methods.", ,, "Those methods *cannot* be stubbed/verified.", ,]
[UnfinishedVerificationException, (, join, (, "Missing method call for verify(mock) here:", ,, location, ,, "", ,, "Example of correct verification:", ,, "    verify(mock).doSomething()", ,, "", ,, "Also, this error might show up because you verify either of: final/private/equals()/hashCode() methods.", ,, "Those methods *cannot* be stubbed/verified.", ,]
["Missing method call for verify(mock) here:", ,, location, ,, "", ,, "Example of correct verification:", ,, "    verify(mock).doSomething()", ,, "", ,, "Also, this error might show up because you verify either of: final/private/equals()/hashCode() methods.", ,, "Those methods *cannot* be stubbed/verified.", ,, MockitoLimitations, ., NON_PUBLIC_PARENT, ,]
[,, "Example of correct verification:", ,, "    verify(mock).doSomething()", ,, "", ,, "Also, this error might show up because you verify either of: final/private/equals()/hashCode() methods.", ,, "Those methods *cannot* be stubbed/verified.", ,, MockitoLimitations, ., NON_PUBLIC_PARENT, ,, "", ), ), ;, throw]
[., NON_PUBLIC_PARENT, ,, "", ), ), ;, throw, exception, ;, }, public, void, notAMockPassedToVerify, (, Class, type, ), {, throw]
["", ), ), ;, throw, exception, ;, }, public, void, notAMockPassedToVerify, (, Class, type, ), {, throw, new, NotAMockException, (]
[), ;, throw, exception, ;, }, public, void, notAMockPassedToVerify, (, Class, type, ), {, throw, new, NotAMockException, (, join, (]
[), ;, throw, exception, ;, }, public, void, notAMockPassedToVerify, (, Class, type, ), {, throw, new, NotAMockException, (, join, (]
[), ;, throw, exception, ;, }, public, void, notAMockPassedToVerify, (, Class, type, ), {, throw, new, NotAMockException, (, join, (]
[throw, exception, ;, }, public, void, notAMockPassedToVerify, (, Class, type, ), {, throw, new, NotAMockException, (, join, (, "Argument passed to verify() is of type ", +]
[throw, exception, ;, }, public, void, notAMockPassedToVerify, (, Class, type, ), {, throw, new, NotAMockException, (, join, (, "Argument passed to verify() is of type ", +]
[notAMockPassedToVerify, (, Class, type, ), {, throw, new, NotAMockException, (, join, (, "Argument passed to verify() is of type ", +, type, ., getSimpleName, (, ), +]
[Class, type, ), {, throw, new, NotAMockException, (, join, (, "Argument passed to verify() is of type ", +, type, ., getSimpleName, (, ), +, " and is not a mock!", ,]
[), {, throw, new, NotAMockException, (, join, (, "Argument passed to verify() is of type ", +, type, ., getSimpleName, (, ), +, " and is not a mock!", ,, "Make sure you place the parenthesis correctly!", ,]
[throw, new, NotAMockException, (, join, (, "Argument passed to verify() is of type ", +, type, ., getSimpleName, (, ), +, " and is not a mock!", ,, "Make sure you place the parenthesis correctly!", ,, "See the examples of correct verifications:", ,]
[NotAMockException, (, join, (, "Argument passed to verify() is of type ", +, type, ., getSimpleName, (, ), +, " and is not a mock!", ,, "Make sure you place the parenthesis correctly!", ,, "See the examples of correct verifications:", ,, "    verify(mock).someMethod();", ,]
[join, (, "Argument passed to verify() is of type ", +, type, ., getSimpleName, (, ), +, " and is not a mock!", ,, "Make sure you place the parenthesis correctly!", ,, "See the examples of correct verifications:", ,, "    verify(mock).someMethod();", ,, "    verify(mock, times(10)).someMethod();", ,]
["Make sure you place the parenthesis correctly!", ,, "See the examples of correct verifications:", ,, "    verify(mock).someMethod();", ,, "    verify(mock, times(10)).someMethod();", ,, "    verify(mock, atLeastOnce()).someMethod();", ), ), ;, }, public, void, nullPassedToVerify, (, ), {, throw]
[,, "    verify(mock).someMethod();", ,, "    verify(mock, times(10)).someMethod();", ,, "    verify(mock, atLeastOnce()).someMethod();", ), ), ;, }, public, void, nullPassedToVerify, (, ), {, throw, new, NullInsteadOfMockException, (]
[,, "    verify(mock, times(10)).someMethod();", ,, "    verify(mock, atLeastOnce()).someMethod();", ), ), ;, }, public, void, nullPassedToVerify, (, ), {, throw, new, NullInsteadOfMockException, (, join, (]
[,, "    verify(mock, atLeastOnce()).someMethod();", ), ), ;, }, public, void, nullPassedToVerify, (, ), {, throw, new, NullInsteadOfMockException, (, join, (, "Argument passed to verify() should be a mock but is null!", ,]
[), ), ;, }, public, void, nullPassedToVerify, (, ), {, throw, new, NullInsteadOfMockException, (, join, (, "Argument passed to verify() should be a mock but is null!", ,, "Examples of correct verifications:", ,]
[;, }, public, void, nullPassedToVerify, (, ), {, throw, new, NullInsteadOfMockException, (, join, (, "Argument passed to verify() should be a mock but is null!", ,, "Examples of correct verifications:", ,, "    verify(mock).someMethod();", ,]
[public, void, nullPassedToVerify, (, ), {, throw, new, NullInsteadOfMockException, (, join, (, "Argument passed to verify() should be a mock but is null!", ,, "Examples of correct verifications:", ,, "    verify(mock).someMethod();", ,, "    verify(mock, times(10)).someMethod();", ,]
[nullPassedToVerify, (, ), {, throw, new, NullInsteadOfMockException, (, join, (, "Argument passed to verify() should be a mock but is null!", ,, "Examples of correct verifications:", ,, "    verify(mock).someMethod();", ,, "    verify(mock, times(10)).someMethod();", ,, "    verify(mock, atLeastOnce()).someMethod();", ,]
[), {, throw, new, NullInsteadOfMockException, (, join, (, "Argument passed to verify() should be a mock but is null!", ,, "Examples of correct verifications:", ,, "    verify(mock).someMethod();", ,, "    verify(mock, times(10)).someMethod();", ,, "    verify(mock, atLeastOnce()).someMethod();", ,, "    not: verify(mock.someMethod());", ,]
["    verify(mock).someMethod();", ,, "    verify(mock, times(10)).someMethod();", ,, "    verify(mock, atLeastOnce()).someMethod();", ,, "    not: verify(mock.someMethod());", ,, "Also, if you use @Mock annotation don't miss initMocks()", ), ), ;, }, public, void, notAMockPassedToWhenMethod, (, ), {, throw]
[,, "    verify(mock, atLeastOnce()).someMethod();", ,, "    not: verify(mock.someMethod());", ,, "Also, if you use @Mock annotation don't miss initMocks()", ), ), ;, }, public, void, notAMockPassedToWhenMethod, (, ), {, throw, new, NotAMockException, (]
[,, "    not: verify(mock.someMethod());", ,, "Also, if you use @Mock annotation don't miss initMocks()", ), ), ;, }, public, void, notAMockPassedToWhenMethod, (, ), {, throw, new, NotAMockException, (, join, (]
[,, "Also, if you use @Mock annotation don't miss initMocks()", ), ), ;, }, public, void, notAMockPassedToWhenMethod, (, ), {, throw, new, NotAMockException, (, join, (, "Argument passed to when() is not a mock!", ,]
[), ), ;, }, public, void, notAMockPassedToWhenMethod, (, ), {, throw, new, NotAMockException, (, join, (, "Argument passed to when() is not a mock!", ,, "Example of correct stubbing:", ,]
[NotAMockException, (, join, (, "Argument passed to when() is not a mock!", ,, "Example of correct stubbing:", ,, "    doThrow(new RuntimeException()).when(mock).someMethod();", ), ), ;, }, public, void, nullPassedToWhenMethod, (, ), {, throw]
[(, "Argument passed to when() is not a mock!", ,, "Example of correct stubbing:", ,, "    doThrow(new RuntimeException()).when(mock).someMethod();", ), ), ;, }, public, void, nullPassedToWhenMethod, (, ), {, throw, new, NullInsteadOfMockException, (]
[,, "Example of correct stubbing:", ,, "    doThrow(new RuntimeException()).when(mock).someMethod();", ), ), ;, }, public, void, nullPassedToWhenMethod, (, ), {, throw, new, NullInsteadOfMockException, (, join, (]
[,, "    doThrow(new RuntimeException()).when(mock).someMethod();", ), ), ;, }, public, void, nullPassedToWhenMethod, (, ), {, throw, new, NullInsteadOfMockException, (, join, (, "Argument passed to when() is null!", ,]
[), ), ;, }, public, void, nullPassedToWhenMethod, (, ), {, throw, new, NullInsteadOfMockException, (, join, (, "Argument passed to when() is null!", ,, "Example of correct stubbing:", ,]
[;, }, public, void, nullPassedToWhenMethod, (, ), {, throw, new, NullInsteadOfMockException, (, join, (, "Argument passed to when() is null!", ,, "Example of correct stubbing:", ,, "    doThrow(new RuntimeException()).when(mock).someMethod();", ,]
[join, (, "Argument passed to when() is null!", ,, "Example of correct stubbing:", ,, "    doThrow(new RuntimeException()).when(mock).someMethod();", ,, "Also, if you use @Mock annotation don't miss initMocks()", ), ), ;, }, public, void, mocksHaveToBePassedToVerifyNoMoreInteractions, (, ), {, throw]
[,, "Example of correct stubbing:", ,, "    doThrow(new RuntimeException()).when(mock).someMethod();", ,, "Also, if you use @Mock annotation don't miss initMocks()", ), ), ;, }, public, void, mocksHaveToBePassedToVerifyNoMoreInteractions, (, ), {, throw, new, MockitoException, (]
[,, "    doThrow(new RuntimeException()).when(mock).someMethod();", ,, "Also, if you use @Mock annotation don't miss initMocks()", ), ), ;, }, public, void, mocksHaveToBePassedToVerifyNoMoreInteractions, (, ), {, throw, new, MockitoException, (, join, (]
[,, "Also, if you use @Mock annotation don't miss initMocks()", ), ), ;, }, public, void, mocksHaveToBePassedToVerifyNoMoreInteractions, (, ), {, throw, new, MockitoException, (, join, (, "Method requires argument(s)!", ,]
[), ), ;, }, public, void, mocksHaveToBePassedToVerifyNoMoreInteractions, (, ), {, throw, new, MockitoException, (, join, (, "Method requires argument(s)!", ,, "Pass mocks that should be verified, e.g:", ,]
[;, }, public, void, mocksHaveToBePassedToVerifyNoMoreInteractions, (, ), {, throw, new, MockitoException, (, join, (, "Method requires argument(s)!", ,, "Pass mocks that should be verified, e.g:", ,, "    verifyNoMoreInteractions(mockOne, mockTwo);", ,]
[public, void, mocksHaveToBePassedToVerifyNoMoreInteractions, (, ), {, throw, new, MockitoException, (, join, (, "Method requires argument(s)!", ,, "Pass mocks that should be verified, e.g:", ,, "    verifyNoMoreInteractions(mockOne, mockTwo);", ,, "    verifyZeroInteractions(mockOne, mockTwo);", ,]
["Method requires argument(s)!", ,, "Pass mocks that should be verified, e.g:", ,, "    verifyNoMoreInteractions(mockOne, mockTwo);", ,, "    verifyZeroInteractions(mockOne, mockTwo);", ,, "", ), ), ;, }, public, void, notAMockPassedToVerifyNoMoreInteractions, (, ), {, throw]
[,, "    verifyNoMoreInteractions(mockOne, mockTwo);", ,, "    verifyZeroInteractions(mockOne, mockTwo);", ,, "", ), ), ;, }, public, void, notAMockPassedToVerifyNoMoreInteractions, (, ), {, throw, new, NotAMockException, (]
[,, "    verifyZeroInteractions(mockOne, mockTwo);", ,, "", ), ), ;, }, public, void, notAMockPassedToVerifyNoMoreInteractions, (, ), {, throw, new, NotAMockException, (, join, (]
[,, "", ), ), ;, }, public, void, notAMockPassedToVerifyNoMoreInteractions, (, ), {, throw, new, NotAMockException, (, join, (, "Argument(s) passed is not a mock!", ,]
[), ), ;, }, public, void, notAMockPassedToVerifyNoMoreInteractions, (, ), {, throw, new, NotAMockException, (, join, (, "Argument(s) passed is not a mock!", ,, "Examples of correct verifications:", ,]
[;, }, public, void, notAMockPassedToVerifyNoMoreInteractions, (, ), {, throw, new, NotAMockException, (, join, (, "Argument(s) passed is not a mock!", ,, "Examples of correct verifications:", ,, "    verifyNoMoreInteractions(mockOne, mockTwo);", ,]
[public, void, notAMockPassedToVerifyNoMoreInteractions, (, ), {, throw, new, NotAMockException, (, join, (, "Argument(s) passed is not a mock!", ,, "Examples of correct verifications:", ,, "    verifyNoMoreInteractions(mockOne, mockTwo);", ,, "    verifyZeroInteractions(mockOne, mockTwo);", ,]
["Argument(s) passed is not a mock!", ,, "Examples of correct verifications:", ,, "    verifyNoMoreInteractions(mockOne, mockTwo);", ,, "    verifyZeroInteractions(mockOne, mockTwo);", ,, "", ), ), ;, }, public, void, nullPassedToVerifyNoMoreInteractions, (, ), {, throw]
[,, "    verifyNoMoreInteractions(mockOne, mockTwo);", ,, "    verifyZeroInteractions(mockOne, mockTwo);", ,, "", ), ), ;, }, public, void, nullPassedToVerifyNoMoreInteractions, (, ), {, throw, new, NullInsteadOfMockException, (]
[,, "    verifyZeroInteractions(mockOne, mockTwo);", ,, "", ), ), ;, }, public, void, nullPassedToVerifyNoMoreInteractions, (, ), {, throw, new, NullInsteadOfMockException, (, join, (]
[,, "", ), ), ;, }, public, void, nullPassedToVerifyNoMoreInteractions, (, ), {, throw, new, NullInsteadOfMockException, (, join, (, "Argument(s) passed is null!", ,]
[), ), ;, }, public, void, nullPassedToVerifyNoMoreInteractions, (, ), {, throw, new, NullInsteadOfMockException, (, join, (, "Argument(s) passed is null!", ,, "Examples of correct verifications:", ,]
[;, }, public, void, nullPassedToVerifyNoMoreInteractions, (, ), {, throw, new, NullInsteadOfMockException, (, join, (, "Argument(s) passed is null!", ,, "Examples of correct verifications:", ,, "    verifyNoMoreInteractions(mockOne, mockTwo);", ,]
[join, (, "Argument(s) passed is null!", ,, "Examples of correct verifications:", ,, "    verifyNoMoreInteractions(mockOne, mockTwo);", ,, "    verifyZeroInteractions(mockOne, mockTwo);", ), ), ;, }, public, void, notAMockPassedWhenCreatingInOrder, (, ), {, throw]
[,, "Examples of correct verifications:", ,, "    verifyNoMoreInteractions(mockOne, mockTwo);", ,, "    verifyZeroInteractions(mockOne, mockTwo);", ), ), ;, }, public, void, notAMockPassedWhenCreatingInOrder, (, ), {, throw, new, NotAMockException, (]
[,, "    verifyNoMoreInteractions(mockOne, mockTwo);", ,, "    verifyZeroInteractions(mockOne, mockTwo);", ), ), ;, }, public, void, notAMockPassedWhenCreatingInOrder, (, ), {, throw, new, NotAMockException, (, join, (]
[,, "    verifyZeroInteractions(mockOne, mockTwo);", ), ), ;, }, public, void, notAMockPassedWhenCreatingInOrder, (, ), {, throw, new, NotAMockException, (, join, (, "Argument(s) passed is not a mock!", ,]
[), ), ;, }, public, void, notAMockPassedWhenCreatingInOrder, (, ), {, throw, new, NotAMockException, (, join, (, "Argument(s) passed is not a mock!", ,, "Pass mocks that require verification in order.", ,]
[;, }, public, void, notAMockPassedWhenCreatingInOrder, (, ), {, throw, new, NotAMockException, (, join, (, "Argument(s) passed is not a mock!", ,, "Pass mocks that require verification in order.", ,, "For example:", ,]
[join, (, "Argument(s) passed is not a mock!", ,, "Pass mocks that require verification in order.", ,, "For example:", ,, "    InOrder inOrder = inOrder(mockOne, mockTwo);", ), ), ;, }, public, void, nullPassedWhenCreatingInOrder, (, ), {, throw]
[,, "Pass mocks that require verification in order.", ,, "For example:", ,, "    InOrder inOrder = inOrder(mockOne, mockTwo);", ), ), ;, }, public, void, nullPassedWhenCreatingInOrder, (, ), {, throw, new, NullInsteadOfMockException, (]
[,, "For example:", ,, "    InOrder inOrder = inOrder(mockOne, mockTwo);", ), ), ;, }, public, void, nullPassedWhenCreatingInOrder, (, ), {, throw, new, NullInsteadOfMockException, (, join, (]
[,, "    InOrder inOrder = inOrder(mockOne, mockTwo);", ), ), ;, }, public, void, nullPassedWhenCreatingInOrder, (, ), {, throw, new, NullInsteadOfMockException, (, join, (, "Argument(s) passed is null!", ,]
[), ), ;, }, public, void, nullPassedWhenCreatingInOrder, (, ), {, throw, new, NullInsteadOfMockException, (, join, (, "Argument(s) passed is null!", ,, "Pass mocks that require verification in order.", ,]
[;, }, public, void, nullPassedWhenCreatingInOrder, (, ), {, throw, new, NullInsteadOfMockException, (, join, (, "Argument(s) passed is null!", ,, "Pass mocks that require verification in order.", ,, "For example:", ,]
[join, (, "Argument(s) passed is null!", ,, "Pass mocks that require verification in order.", ,, "For example:", ,, "    InOrder inOrder = inOrder(mockOne, mockTwo);", ), ), ;, }, public, void, mocksHaveToBePassedWhenCreatingInOrder, (, ), {, throw]
[,, "Pass mocks that require verification in order.", ,, "For example:", ,, "    InOrder inOrder = inOrder(mockOne, mockTwo);", ), ), ;, }, public, void, mocksHaveToBePassedWhenCreatingInOrder, (, ), {, throw, new, MockitoException, (]
[,, "For example:", ,, "    InOrder inOrder = inOrder(mockOne, mockTwo);", ), ), ;, }, public, void, mocksHaveToBePassedWhenCreatingInOrder, (, ), {, throw, new, MockitoException, (, join, (]
[,, "    InOrder inOrder = inOrder(mockOne, mockTwo);", ), ), ;, }, public, void, mocksHaveToBePassedWhenCreatingInOrder, (, ), {, throw, new, MockitoException, (, join, (, "Method requires argument(s)!", ,]
[), ), ;, }, public, void, mocksHaveToBePassedWhenCreatingInOrder, (, ), {, throw, new, MockitoException, (, join, (, "Method requires argument(s)!", ,, "Pass mocks that require verification in order.", ,]
[;, }, public, void, mocksHaveToBePassedWhenCreatingInOrder, (, ), {, throw, new, MockitoException, (, join, (, "Method requires argument(s)!", ,, "Pass mocks that require verification in order.", ,, "For example:", ,]
[join, (, "Method requires argument(s)!", ,, "Pass mocks that require verification in order.", ,, "For example:", ,, "    InOrder inOrder = inOrder(mockOne, mockTwo);", ), ), ;, }, public, void, inOrderRequiresFamiliarMock, (, ), {, throw]
[,, "Pass mocks that require verification in order.", ,, "For example:", ,, "    InOrder inOrder = inOrder(mockOne, mockTwo);", ), ), ;, }, public, void, inOrderRequiresFamiliarMock, (, ), {, throw, new, MockitoException, (]
[,, "For example:", ,, "    InOrder inOrder = inOrder(mockOne, mockTwo);", ), ), ;, }, public, void, inOrderRequiresFamiliarMock, (, ), {, throw, new, MockitoException, (, join, (]
[,, "    InOrder inOrder = inOrder(mockOne, mockTwo);", ), ), ;, }, public, void, inOrderRequiresFamiliarMock, (, ), {, throw, new, MockitoException, (, join, (, "InOrder can only verify mocks that were passed in during creation of InOrder.", ,]
[), ), ;, }, public, void, inOrderRequiresFamiliarMock, (, ), {, throw, new, MockitoException, (, join, (, "InOrder can only verify mocks that were passed in during creation of InOrder.", ,, "For example:", ,]
[;, }, public, void, inOrderRequiresFamiliarMock, (, ), {, throw, new, MockitoException, (, join, (, "InOrder can only verify mocks that were passed in during creation of InOrder.", ,, "For example:", ,, "    InOrder inOrder = inOrder(mockOne);", ,]
["    inOrder.verify(mockOne).doStuff();", ), ), ;, }, public, void, invalidUseOfMatchers, (, int, expectedMatchersCount, ,, List, <, LocalizedMatcher, >, recordedMatchers, ), {, throw]
[;, }, public, void, invalidUseOfMatchers, (, int, expectedMatchersCount, ,, List, <, LocalizedMatcher, >, recordedMatchers, ), {, throw, new, InvalidUseOfMatchersException, (]
[public, void, invalidUseOfMatchers, (, int, expectedMatchersCount, ,, List, <, LocalizedMatcher, >, recordedMatchers, ), {, throw, new, InvalidUseOfMatchersException, (, join, (]
[invalidUseOfMatchers, (, int, expectedMatchersCount, ,, List, <, LocalizedMatcher, >, recordedMatchers, ), {, throw, new, InvalidUseOfMatchersException, (, join, (, "Invalid use of argument matchers!", ,]
[invalidUseOfMatchers, (, int, expectedMatchersCount, ,, List, <, LocalizedMatcher, >, recordedMatchers, ), {, throw, new, InvalidUseOfMatchersException, (, join, (, "Invalid use of argument matchers!", ,]
[invalidUseOfMatchers, (, int, expectedMatchersCount, ,, List, <, LocalizedMatcher, >, recordedMatchers, ), {, throw, new, InvalidUseOfMatchersException, (, join, (, "Invalid use of argument matchers!", ,]
[invalidUseOfMatchers, (, int, expectedMatchersCount, ,, List, <, LocalizedMatcher, >, recordedMatchers, ), {, throw, new, InvalidUseOfMatchersException, (, join, (, "Invalid use of argument matchers!", ,]
[invalidUseOfMatchers, (, int, expectedMatchersCount, ,, List, <, LocalizedMatcher, >, recordedMatchers, ), {, throw, new, InvalidUseOfMatchersException, (, join, (, "Invalid use of argument matchers!", ,]
[int, expectedMatchersCount, ,, List, <, LocalizedMatcher, >, recordedMatchers, ), {, throw, new, InvalidUseOfMatchersException, (, join, (, "Invalid use of argument matchers!", ,, expectedMatchersCount, +]
[,, List, <, LocalizedMatcher, >, recordedMatchers, ), {, throw, new, InvalidUseOfMatchersException, (, join, (, "Invalid use of argument matchers!", ,, expectedMatchersCount, +, " matchers expected, ", +]
[,, List, <, LocalizedMatcher, >, recordedMatchers, ), {, throw, new, InvalidUseOfMatchersException, (, join, (, "Invalid use of argument matchers!", ,, expectedMatchersCount, +, " matchers expected, ", +]
[), {, throw, new, InvalidUseOfMatchersException, (, join, (, "Invalid use of argument matchers!", ,, expectedMatchersCount, +, " matchers expected, ", +, recordedMatchers, ., size, (, ), +]
[throw, new, InvalidUseOfMatchersException, (, join, (, "Invalid use of argument matchers!", ,, expectedMatchersCount, +, " matchers expected, ", +, recordedMatchers, ., size, (, ), +, " recorded:", +]
[InvalidUseOfMatchersException, (, join, (, "Invalid use of argument matchers!", ,, expectedMatchersCount, +, " matchers expected, ", +, recordedMatchers, ., size, (, ), +, " recorded:", +, locationsOf, (]
[(, "Invalid use of argument matchers!", ,, expectedMatchersCount, +, " matchers expected, ", +, recordedMatchers, ., size, (, ), +, " recorded:", +, locationsOf, (, recordedMatchers, ), ,]
[,, expectedMatchersCount, +, " matchers expected, ", +, recordedMatchers, ., size, (, ), +, " recorded:", +, locationsOf, (, recordedMatchers, ), ,, "", ,]
[+, " matchers expected, ", +, recordedMatchers, ., size, (, ), +, " recorded:", +, locationsOf, (, recordedMatchers, ), ,, "", ,, "This exception may occur if matchers are combined with raw values:", ,]
[+, recordedMatchers, ., size, (, ), +, " recorded:", +, locationsOf, (, recordedMatchers, ), ,, "", ,, "This exception may occur if matchers are combined with raw values:", ,, "    //incorrect:", ,]
[., size, (, ), +, " recorded:", +, locationsOf, (, recordedMatchers, ), ,, "", ,, "This exception may occur if matchers are combined with raw values:", ,, "    //incorrect:", ,, "    someMethod(anyObject(), \"raw String\");", ,]
[(, ), +, " recorded:", +, locationsOf, (, recordedMatchers, ), ,, "", ,, "This exception may occur if matchers are combined with raw values:", ,, "    //incorrect:", ,, "    someMethod(anyObject(), \"raw String\");", ,, "When using matchers, all arguments have to be provided by matchers.", ,]
[+, " recorded:", +, locationsOf, (, recordedMatchers, ), ,, "", ,, "This exception may occur if matchers are combined with raw values:", ,, "    //incorrect:", ,, "    someMethod(anyObject(), \"raw String\");", ,, "When using matchers, all arguments have to be provided by matchers.", ,, "For example:", ,]
[+, locationsOf, (, recordedMatchers, ), ,, "", ,, "This exception may occur if matchers are combined with raw values:", ,, "    //incorrect:", ,, "    someMethod(anyObject(), \"raw String\");", ,, "When using matchers, all arguments have to be provided by matchers.", ,, "For example:", ,, "    //correct:", ,]
[(, recordedMatchers, ), ,, "", ,, "This exception may occur if matchers are combined with raw values:", ,, "    //incorrect:", ,, "    someMethod(anyObject(), \"raw String\");", ,, "When using matchers, all arguments have to be provided by matchers.", ,, "For example:", ,, "    //correct:", ,, "    someMethod(anyObject(), eq(\"String by matcher\"));", ,]
[), ,, "", ,, "This exception may occur if matchers are combined with raw values:", ,, "    //incorrect:", ,, "    someMethod(anyObject(), \"raw String\");", ,, "When using matchers, all arguments have to be provided by matchers.", ,, "For example:", ,, "    //correct:", ,, "    someMethod(anyObject(), eq(\"String by matcher\"));", ,, "", ,]
["", ,, "This exception may occur if matchers are combined with raw values:", ,, "    //incorrect:", ,, "    someMethod(anyObject(), \"raw String\");", ,, "When using matchers, all arguments have to be provided by matchers.", ,, "For example:", ,, "    //correct:", ,, "    someMethod(anyObject(), eq(\"String by matcher\"));", ,, "", ,, "For more info see javadoc for Matchers class.", ,]
[;, }, public, void, incorrectUseOfAdditionalMatchers, (, String, additionalMatcherName, ,, int, expectedSubMatchersCount, ,, Collection, <, LocalizedMatcher, >, matcherStack, ), {, throw]
[void, incorrectUseOfAdditionalMatchers, (, String, additionalMatcherName, ,, int, expectedSubMatchersCount, ,, Collection, <, LocalizedMatcher, >, matcherStack, ), {, throw, new, InvalidUseOfMatchersException, (]
[(, String, additionalMatcherName, ,, int, expectedSubMatchersCount, ,, Collection, <, LocalizedMatcher, >, matcherStack, ), {, throw, new, InvalidUseOfMatchersException, (, join, (]
[(, String, additionalMatcherName, ,, int, expectedSubMatchersCount, ,, Collection, <, LocalizedMatcher, >, matcherStack, ), {, throw, new, InvalidUseOfMatchersException, (, join, (]
[(, String, additionalMatcherName, ,, int, expectedSubMatchersCount, ,, Collection, <, LocalizedMatcher, >, matcherStack, ), {, throw, new, InvalidUseOfMatchersException, (, join, (]
[additionalMatcherName, ,, int, expectedSubMatchersCount, ,, Collection, <, LocalizedMatcher, >, matcherStack, ), {, throw, new, InvalidUseOfMatchersException, (, join, (, "Invalid use of argument matchers inside additional matcher ", +]
[int, expectedSubMatchersCount, ,, Collection, <, LocalizedMatcher, >, matcherStack, ), {, throw, new, InvalidUseOfMatchersException, (, join, (, "Invalid use of argument matchers inside additional matcher ", +, additionalMatcherName, +]
[,, Collection, <, LocalizedMatcher, >, matcherStack, ), {, throw, new, InvalidUseOfMatchersException, (, join, (, "Invalid use of argument matchers inside additional matcher ", +, additionalMatcherName, +, " !", ,]
[matcherStack, ), {, throw, new, InvalidUseOfMatchersException, (, join, (, "Invalid use of argument matchers inside additional matcher ", +, additionalMatcherName, +, " !", ,, new, LocationImpl, (, ), ,]
[{, throw, new, InvalidUseOfMatchersException, (, join, (, "Invalid use of argument matchers inside additional matcher ", +, additionalMatcherName, +, " !", ,, new, LocationImpl, (, ), ,, "", ,]
[{, throw, new, InvalidUseOfMatchersException, (, join, (, "Invalid use of argument matchers inside additional matcher ", +, additionalMatcherName, +, " !", ,, new, LocationImpl, (, ), ,, "", ,]
[{, throw, new, InvalidUseOfMatchersException, (, join, (, "Invalid use of argument matchers inside additional matcher ", +, additionalMatcherName, +, " !", ,, new, LocationImpl, (, ), ,, "", ,]
[{, throw, new, InvalidUseOfMatchersException, (, join, (, "Invalid use of argument matchers inside additional matcher ", +, additionalMatcherName, +, " !", ,, new, LocationImpl, (, ), ,, "", ,]
[new, InvalidUseOfMatchersException, (, join, (, "Invalid use of argument matchers inside additional matcher ", +, additionalMatcherName, +, " !", ,, new, LocationImpl, (, ), ,, "", ,, expectedSubMatchersCount, +]
[(, join, (, "Invalid use of argument matchers inside additional matcher ", +, additionalMatcherName, +, " !", ,, new, LocationImpl, (, ), ,, "", ,, expectedSubMatchersCount, +, " sub matchers expected, ", +]
[(, join, (, "Invalid use of argument matchers inside additional matcher ", +, additionalMatcherName, +, " !", ,, new, LocationImpl, (, ), ,, "", ,, expectedSubMatchersCount, +, " sub matchers expected, ", +]
[+, " !", ,, new, LocationImpl, (, ), ,, "", ,, expectedSubMatchersCount, +, " sub matchers expected, ", +, matcherStack, ., size, (, ), +]
[,, new, LocationImpl, (, ), ,, "", ,, expectedSubMatchersCount, +, " sub matchers expected, ", +, matcherStack, ., size, (, ), +, " recorded:", ,]
[LocationImpl, (, ), ,, "", ,, expectedSubMatchersCount, +, " sub matchers expected, ", +, matcherStack, ., size, (, ), +, " recorded:", ,, locationsOf, (]
[,, "", ,, expectedSubMatchersCount, +, " sub matchers expected, ", +, matcherStack, ., size, (, ), +, " recorded:", ,, locationsOf, (, matcherStack, ), ,]
[,, expectedSubMatchersCount, +, " sub matchers expected, ", +, matcherStack, ., size, (, ), +, " recorded:", ,, locationsOf, (, matcherStack, ), ,, "", ,]
[+, " sub matchers expected, ", +, matcherStack, ., size, (, ), +, " recorded:", ,, locationsOf, (, matcherStack, ), ,, "", ,, "This exception may occur if matchers are combined with raw values:", ,]
[+, matcherStack, ., size, (, ), +, " recorded:", ,, locationsOf, (, matcherStack, ), ,, "", ,, "This exception may occur if matchers are combined with raw values:", ,, "    //incorrect:", ,]
[., size, (, ), +, " recorded:", ,, locationsOf, (, matcherStack, ), ,, "", ,, "This exception may occur if matchers are combined with raw values:", ,, "    //incorrect:", ,, "    someMethod(AdditionalMatchers.and(isNotNull(), \"raw String\");", ,]
[(, ), +, " recorded:", ,, locationsOf, (, matcherStack, ), ,, "", ,, "This exception may occur if matchers are combined with raw values:", ,, "    //incorrect:", ,, "    someMethod(AdditionalMatchers.and(isNotNull(), \"raw String\");", ,, "When using matchers, all arguments have to be provided by matchers.", ,]
[+, " recorded:", ,, locationsOf, (, matcherStack, ), ,, "", ,, "This exception may occur if matchers are combined with raw values:", ,, "    //incorrect:", ,, "    someMethod(AdditionalMatchers.and(isNotNull(), \"raw String\");", ,, "When using matchers, all arguments have to be provided by matchers.", ,, "For example:", ,]
[,, locationsOf, (, matcherStack, ), ,, "", ,, "This exception may occur if matchers are combined with raw values:", ,, "    //incorrect:", ,, "    someMethod(AdditionalMatchers.and(isNotNull(), \"raw String\");", ,, "When using matchers, all arguments have to be provided by matchers.", ,, "For example:", ,, "    //correct:", ,]
[(, matcherStack, ), ,, "", ,, "This exception may occur if matchers are combined with raw values:", ,, "    //incorrect:", ,, "    someMethod(AdditionalMatchers.and(isNotNull(), \"raw String\");", ,, "When using matchers, all arguments have to be provided by matchers.", ,, "For example:", ,, "    //correct:", ,, "    someMethod(AdditionalMatchers.and(isNotNull(), eq(\"raw String\"));", ,]
[), ,, "", ,, "This exception may occur if matchers are combined with raw values:", ,, "    //incorrect:", ,, "    someMethod(AdditionalMatchers.and(isNotNull(), \"raw String\");", ,, "When using matchers, all arguments have to be provided by matchers.", ,, "For example:", ,, "    //correct:", ,, "    someMethod(AdditionalMatchers.and(isNotNull(), eq(\"raw String\"));", ,, "", ,]
["", ,, "This exception may occur if matchers are combined with raw values:", ,, "    //incorrect:", ,, "    someMethod(AdditionalMatchers.and(isNotNull(), \"raw String\");", ,, "When using matchers, all arguments have to be provided by matchers.", ,, "For example:", ,, "    //correct:", ,, "    someMethod(AdditionalMatchers.and(isNotNull(), eq(\"raw String\"));", ,, "", ,, "For more info see javadoc for Matchers and AdditionalMatchers classes.", ,]
["    //correct:", ,, "    someMethod(AdditionalMatchers.and(isNotNull(), eq(\"raw String\"));", ,, "", ,, "For more info see javadoc for Matchers and AdditionalMatchers classes.", ,, "", ), ), ;, }, public, void, stubPassedToVerify, (, ), {, throw]
[,, "", ,, "For more info see javadoc for Matchers and AdditionalMatchers classes.", ,, "", ), ), ;, }, public, void, stubPassedToVerify, (, ), {, throw, new, CannotVerifyStubOnlyMock, (]
[,, "For more info see javadoc for Matchers and AdditionalMatchers classes.", ,, "", ), ), ;, }, public, void, stubPassedToVerify, (, ), {, throw, new, CannotVerifyStubOnlyMock, (, join, (]
[,, "", ), ), ;, }, public, void, stubPassedToVerify, (, ), {, throw, new, CannotVerifyStubOnlyMock, (, join, (, "Argument passed to verify() is a stubOnly() mock, not a full blown mock!", ,]
[CannotVerifyStubOnlyMock, (, join, (, "Argument passed to verify() is a stubOnly() mock, not a full blown mock!", ,, "If you intend to verify invocations on a mock, don't use stubOnly() in its MockSettings.", ), ), ;, }, public, void, reportNoSubMatchersFound, (, String, additionalMatcherName, ), {, throw]
[(, "Argument passed to verify() is a stubOnly() mock, not a full blown mock!", ,, "If you intend to verify invocations on a mock, don't use stubOnly() in its MockSettings.", ), ), ;, }, public, void, reportNoSubMatchersFound, (, String, additionalMatcherName, ), {, throw, new, InvalidUseOfMatchersException, (]
[,, "If you intend to verify invocations on a mock, don't use stubOnly() in its MockSettings.", ), ), ;, }, public, void, reportNoSubMatchersFound, (, String, additionalMatcherName, ), {, throw, new, InvalidUseOfMatchersException, (, join, (]
[,, "If you intend to verify invocations on a mock, don't use stubOnly() in its MockSettings.", ), ), ;, }, public, void, reportNoSubMatchersFound, (, String, additionalMatcherName, ), {, throw, new, InvalidUseOfMatchersException, (, join, (]
[), ), ;, }, public, void, reportNoSubMatchersFound, (, String, additionalMatcherName, ), {, throw, new, InvalidUseOfMatchersException, (, join, (, "No matchers found for additional matcher ", +]
[;, }, public, void, reportNoSubMatchersFound, (, String, additionalMatcherName, ), {, throw, new, InvalidUseOfMatchersException, (, join, (, "No matchers found for additional matcher ", +, additionalMatcherName, ,]
[(, String, additionalMatcherName, ), {, throw, new, InvalidUseOfMatchersException, (, join, (, "No matchers found for additional matcher ", +, additionalMatcherName, ,, new, LocationImpl, (, ), ,]
[), ;, }, private, Object, locationsOf, (, Collection, <, LocalizedMatcher, >, matchers, ), {, List, <, String, >, description, =]
[{, List, <, String, >, description, =, new, ArrayList, <, String, >, (, ), ;, for, (, LocalizedMatcher, matcher, :]
[<, String, >, description, =, new, ArrayList, <, String, >, (, ), ;, for, (, LocalizedMatcher, matcher, :, matchers, )]
[<, String, >, description, =, new, ArrayList, <, String, >, (, ), ;, for, (, LocalizedMatcher, matcher, :, matchers, )]
[=, new, ArrayList, <, String, >, (, ), ;, for, (, LocalizedMatcher, matcher, :, matchers, ), description, ., add, (]
[=, new, ArrayList, <, String, >, (, ), ;, for, (, LocalizedMatcher, matcher, :, matchers, ), description, ., add, (]
[=, new, ArrayList, <, String, >, (, ), ;, for, (, LocalizedMatcher, matcher, :, matchers, ), description, ., add, (]
[matcher, :, matchers, ), description, ., add, (, matcher, ., getLocation, (, ), ., toString, (, ), ), ;, return]
[matchers, ), description, ., add, (, matcher, ., getLocation, (, ), ., toString, (, ), ), ;, return, join, (]
[matchers, ), description, ., add, (, matcher, ., getLocation, (, ), ., toString, (, ), ), ;, return, join, (]
[), ;, }, public, void, argumentsAreDifferent, (, String, wanted, ,, String, actual, ,, Location, actualLocation, ), {, String, message, =]
[}, public, void, argumentsAreDifferent, (, String, wanted, ,, String, actual, ,, Location, actualLocation, ), {, String, message, =, join, (]
[void, argumentsAreDifferent, (, String, wanted, ,, String, actual, ,, Location, actualLocation, ), {, String, message, =, join, (, "Argument(s) are different! Wanted:", ,]
[(, String, wanted, ,, String, actual, ,, Location, actualLocation, ), {, String, message, =, join, (, "Argument(s) are different! Wanted:", ,, wanted, ,]
[actual, ,, Location, actualLocation, ), {, String, message, =, join, (, "Argument(s) are different! Wanted:", ,, wanted, ,, new, LocationImpl, (, ), ,]
[Location, actualLocation, ), {, String, message, =, join, (, "Argument(s) are different! Wanted:", ,, wanted, ,, new, LocationImpl, (, ), ,, "Actual invocation has different arguments:", ,]
[), {, String, message, =, join, (, "Argument(s) are different! Wanted:", ,, wanted, ,, new, LocationImpl, (, ), ,, "Actual invocation has different arguments:", ,, actual, ,]
[String, message, =, join, (, "Argument(s) are different! Wanted:", ,, wanted, ,, new, LocationImpl, (, ), ,, "Actual invocation has different arguments:", ,, actual, ,, actualLocation, ,]
[(, "Argument(s) are different! Wanted:", ,, wanted, ,, new, LocationImpl, (, ), ,, "Actual invocation has different arguments:", ,, actual, ,, actualLocation, ,, "", ), ;, throw]
[(, "Argument(s) are different! Wanted:", ,, wanted, ,, new, LocationImpl, (, ), ,, "Actual invocation has different arguments:", ,, actual, ,, actualLocation, ,, "", ), ;, throw]
[,, new, LocationImpl, (, ), ,, "Actual invocation has different arguments:", ,, actual, ,, actualLocation, ,, "", ), ;, throw, JUnitTool, ., createArgumentsAreDifferentException, (]
[LocationImpl, (, ), ,, "Actual invocation has different arguments:", ,, actual, ,, actualLocation, ,, "", ), ;, throw, JUnitTool, ., createArgumentsAreDifferentException, (, message, ,]
[), ,, "Actual invocation has different arguments:", ,, actual, ,, actualLocation, ,, "", ), ;, throw, JUnitTool, ., createArgumentsAreDifferentException, (, message, ,, wanted, ,]
[., createArgumentsAreDifferentException, (, message, ,, wanted, ,, actual, ), ;, }, public, void, wantedButNotInvoked, (, DescribedInvocation, wanted, ), {, throw]
[message, ,, wanted, ,, actual, ), ;, }, public, void, wantedButNotInvoked, (, DescribedInvocation, wanted, ), {, throw, new, WantedButNotInvoked, (]
[wanted, ,, actual, ), ;, }, public, void, wantedButNotInvoked, (, DescribedInvocation, wanted, ), {, throw, new, WantedButNotInvoked, (, createWantedButNotInvokedMessage, (]
[void, wantedButNotInvoked, (, DescribedInvocation, wanted, ,, List, <, ?, extends, DescribedInvocation, >, invocations, ), {, String, allInvocations, ;, if, (]
[void, wantedButNotInvoked, (, DescribedInvocation, wanted, ,, List, <, ?, extends, DescribedInvocation, >, invocations, ), {, String, allInvocations, ;, if, (]
[<, ?, extends, DescribedInvocation, >, invocations, ), {, String, allInvocations, ;, if, (, invocations, ., isEmpty, (, ), ), {]
[extends, DescribedInvocation, >, invocations, ), {, String, allInvocations, ;, if, (, invocations, ., isEmpty, (, ), ), {, allInvocations, =]
[;, if, (, invocations, ., isEmpty, (, ), ), {, allInvocations, =, "Actually, there were zero interactions with this mock.\n", ;, }, else, {, StringBuilder, sb, =]
[invocations, ., isEmpty, (, ), ), {, allInvocations, =, "Actually, there were zero interactions with this mock.\n", ;, }, else, {, StringBuilder, sb, =, new, StringBuilder, (]
[=, "Actually, there were zero interactions with this mock.\n", ;, }, else, {, StringBuilder, sb, =, new, StringBuilder, (, "\nHowever, there were other interactions with this mock:\n", ), ;, for, (, DescribedInvocation, i, :]
[}, else, {, StringBuilder, sb, =, new, StringBuilder, (, "\nHowever, there were other interactions with this mock:\n", ), ;, for, (, DescribedInvocation, i, :, invocations, ), {]
[}, else, {, StringBuilder, sb, =, new, StringBuilder, (, "\nHowever, there were other interactions with this mock:\n", ), ;, for, (, DescribedInvocation, i, :, invocations, ), {]
[}, else, {, StringBuilder, sb, =, new, StringBuilder, (, "\nHowever, there were other interactions with this mock:\n", ), ;, for, (, DescribedInvocation, i, :, invocations, ), {]
[}, else, {, StringBuilder, sb, =, new, StringBuilder, (, "\nHowever, there were other interactions with this mock:\n", ), ;, for, (, DescribedInvocation, i, :, invocations, ), {]
[}, else, {, StringBuilder, sb, =, new, StringBuilder, (, "\nHowever, there were other interactions with this mock:\n", ), ;, for, (, DescribedInvocation, i, :, invocations, ), {]
[sb, =, new, StringBuilder, (, "\nHowever, there were other interactions with this mock:\n", ), ;, for, (, DescribedInvocation, i, :, invocations, ), {, sb, ., append, (]
[sb, =, new, StringBuilder, (, "\nHowever, there were other interactions with this mock:\n", ), ;, for, (, DescribedInvocation, i, :, invocations, ), {, sb, ., append, (]
[(, DescribedInvocation, i, :, invocations, ), {, sb, ., append, (, i, ., toString, (, ), ), ., append, (]
[), {, sb, ., append, (, i, ., toString, (, ), ), ., append, (, "\n", ), ., append, (]
[), {, sb, ., append, (, i, ., toString, (, ), ), ., append, (, "\n", ), ., append, (]
[(, ), ), ., append, (, "\n", ), ., append, (, i, ., getLocation, (, ), ), ., append, (]
[append, (, "\n", ), ., append, (, i, ., getLocation, (, ), ), ., append, (, "\n\n", ), ;, }]
["\n", ), ., append, (, i, ., getLocation, (, ), ), ., append, (, "\n\n", ), ;, }, allInvocations, =]
["\n", ), ., append, (, i, ., getLocation, (, ), ), ., append, (, "\n\n", ), ;, }, allInvocations, =]
[), ., append, (, "\n\n", ), ;, }, allInvocations, =, sb, ., toString, (, ), ;, }, String, message, =]
[append, (, "\n\n", ), ;, }, allInvocations, =, sb, ., toString, (, ), ;, }, String, message, =, createWantedButNotInvokedMessage, (]
[;, }, allInvocations, =, sb, ., toString, (, ), ;, }, String, message, =, createWantedButNotInvokedMessage, (, wanted, ), ;, throw]
[=, sb, ., toString, (, ), ;, }, String, message, =, createWantedButNotInvokedMessage, (, wanted, ), ;, throw, new, WantedButNotInvoked, (]
[=, sb, ., toString, (, ), ;, }, String, message, =, createWantedButNotInvokedMessage, (, wanted, ), ;, throw, new, WantedButNotInvoked, (]
[., toString, (, ), ;, }, String, message, =, createWantedButNotInvokedMessage, (, wanted, ), ;, throw, new, WantedButNotInvoked, (, message, +]
[;, throw, new, WantedButNotInvoked, (, message, +, allInvocations, ), ;, }, private, String, createWantedButNotInvokedMessage, (, DescribedInvocation, wanted, ), {, return]
[new, WantedButNotInvoked, (, message, +, allInvocations, ), ;, }, private, String, createWantedButNotInvokedMessage, (, DescribedInvocation, wanted, ), {, return, join, (]
[(, message, +, allInvocations, ), ;, }, private, String, createWantedButNotInvokedMessage, (, DescribedInvocation, wanted, ), {, return, join, (, "Wanted but not invoked:", ,]
[(, message, +, allInvocations, ), ;, }, private, String, createWantedButNotInvokedMessage, (, DescribedInvocation, wanted, ), {, return, join, (, "Wanted but not invoked:", ,]
[}, private, String, createWantedButNotInvokedMessage, (, DescribedInvocation, wanted, ), {, return, join, (, "Wanted but not invoked:", ,, wanted, ., toString, (, ), ,]
[DescribedInvocation, wanted, ), {, return, join, (, "Wanted but not invoked:", ,, wanted, ., toString, (, ), ,, new, LocationImpl, (, ), ,]
[LocationImpl, (, ), ,, "", ), ;, }, public, void, wantedButNotInvokedInOrder, (, DescribedInvocation, wanted, ,, DescribedInvocation, previous, ), {, throw]
[,, "", ), ;, }, public, void, wantedButNotInvokedInOrder, (, DescribedInvocation, wanted, ,, DescribedInvocation, previous, ), {, throw, new, VerificationInOrderFailure, (]
[), ;, }, public, void, wantedButNotInvokedInOrder, (, DescribedInvocation, wanted, ,, DescribedInvocation, previous, ), {, throw, new, VerificationInOrderFailure, (, join, (]
[}, public, void, wantedButNotInvokedInOrder, (, DescribedInvocation, wanted, ,, DescribedInvocation, previous, ), {, throw, new, VerificationInOrderFailure, (, join, (, "Verification in order failure", ,]
[void, wantedButNotInvokedInOrder, (, DescribedInvocation, wanted, ,, DescribedInvocation, previous, ), {, throw, new, VerificationInOrderFailure, (, join, (, "Verification in order failure", ,, "Wanted but not invoked:", ,]
[void, wantedButNotInvokedInOrder, (, DescribedInvocation, wanted, ,, DescribedInvocation, previous, ), {, throw, new, VerificationInOrderFailure, (, join, (, "Verification in order failure", ,, "Wanted but not invoked:", ,]
[DescribedInvocation, previous, ), {, throw, new, VerificationInOrderFailure, (, join, (, "Verification in order failure", ,, "Wanted but not invoked:", ,, wanted, ., toString, (, ), ,]
[new, VerificationInOrderFailure, (, join, (, "Verification in order failure", ,, "Wanted but not invoked:", ,, wanted, ., toString, (, ), ,, new, LocationImpl, (, ), ,]
[(, join, (, "Verification in order failure", ,, "Wanted but not invoked:", ,, wanted, ., toString, (, ), ,, new, LocationImpl, (, ), ,, "Wanted anywhere AFTER following interaction:", ,]
[(, join, (, "Verification in order failure", ,, "Wanted but not invoked:", ,, wanted, ., toString, (, ), ,, new, LocationImpl, (, ), ,, "Wanted anywhere AFTER following interaction:", ,]
[,, wanted, ., toString, (, ), ,, new, LocationImpl, (, ), ,, "Wanted anywhere AFTER following interaction:", ,, previous, ., toString, (, ), ,]
[,, wanted, ., toString, (, ), ,, new, LocationImpl, (, ), ,, "Wanted anywhere AFTER following interaction:", ,, previous, ., toString, (, ), ,]
[,, new, LocationImpl, (, ), ,, "Wanted anywhere AFTER following interaction:", ,, previous, ., toString, (, ), ,, previous, ., getLocation, (, ), ,]
[public, void, tooManyActualInvocations, (, int, wantedCount, ,, int, actualCount, ,, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, String, message, =]
[tooManyActualInvocations, (, int, wantedCount, ,, int, actualCount, ,, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, String, message, =, createTooManyInvocationsMessage, (]
[int, wantedCount, ,, int, actualCount, ,, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, String, message, =, createTooManyInvocationsMessage, (, wantedCount, ,]
[,, int, actualCount, ,, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, String, message, =, createTooManyInvocationsMessage, (, wantedCount, ,, actualCount, ,]
[actualCount, ,, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, String, message, =, createTooManyInvocationsMessage, (, wantedCount, ,, actualCount, ,, wanted, ,]
[,, Location, firstUndesired, ), {, String, message, =, createTooManyInvocationsMessage, (, wantedCount, ,, actualCount, ,, wanted, ,, firstUndesired, ), ;, throw]
[), {, String, message, =, createTooManyInvocationsMessage, (, wantedCount, ,, actualCount, ,, wanted, ,, firstUndesired, ), ;, throw, new, TooManyActualInvocations, (]
[;, }, private, String, createTooManyInvocationsMessage, (, int, wantedCount, ,, int, actualCount, ,, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, return]
[private, String, createTooManyInvocationsMessage, (, int, wantedCount, ,, int, actualCount, ,, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, return, join, (]
[private, String, createTooManyInvocationsMessage, (, int, wantedCount, ,, int, actualCount, ,, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, return, join, (]
[,, int, actualCount, ,, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, return, join, (, wanted, ., toString, (, ), ,]
[,, int, actualCount, ,, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, return, join, (, wanted, ., toString, (, ), ,]
[,, int, actualCount, ,, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, return, join, (, wanted, ., toString, (, ), ,]
[actualCount, ,, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, return, join, (, wanted, ., toString, (, ), ,, "Wanted ", +]
[DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, return, join, (, wanted, ., toString, (, ), ,, "Wanted ", +, pluralize, (]
[Location, firstUndesired, ), {, return, join, (, wanted, ., toString, (, ), ,, "Wanted ", +, pluralize, (, wantedCount, ), +]
[), {, return, join, (, wanted, ., toString, (, ), ,, "Wanted ", +, pluralize, (, wantedCount, ), +, ":", ,]
[wanted, ., toString, (, ), ,, "Wanted ", +, pluralize, (, wantedCount, ), +, ":", ,, new, LocationImpl, (, ), ,]
[wanted, ., toString, (, ), ,, "Wanted ", +, pluralize, (, wantedCount, ), +, ":", ,, new, LocationImpl, (, ), ,]
[wanted, ., toString, (, ), ,, "Wanted ", +, pluralize, (, wantedCount, ), +, ":", ,, new, LocationImpl, (, ), ,]
[toString, (, ), ,, "Wanted ", +, pluralize, (, wantedCount, ), +, ":", ,, new, LocationImpl, (, ), ,, "But was ", +]
[), ,, "Wanted ", +, pluralize, (, wantedCount, ), +, ":", ,, new, LocationImpl, (, ), ,, "But was ", +, pluralize, (]
[+, pluralize, (, wantedCount, ), +, ":", ,, new, LocationImpl, (, ), ,, "But was ", +, pluralize, (, actualCount, ), +]
[(, wantedCount, ), +, ":", ,, new, LocationImpl, (, ), ,, "But was ", +, pluralize, (, actualCount, ), +, ". Undesired invocation:", ,]
[), +, ":", ,, new, LocationImpl, (, ), ,, "But was ", +, pluralize, (, actualCount, ), +, ". Undesired invocation:", ,, firstUndesired, ,]
[". Undesired invocation:", ,, firstUndesired, ,, "", ), ;, }, public, void, neverWantedButInvoked, (, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, throw]
[,, "", ), ;, }, public, void, neverWantedButInvoked, (, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, throw, new, NeverWantedButInvoked, (]
[), ;, }, public, void, neverWantedButInvoked, (, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, throw, new, NeverWantedButInvoked, (, join, (]
[), ;, }, public, void, neverWantedButInvoked, (, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, throw, new, NeverWantedButInvoked, (, join, (]
[(, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, throw, new, NeverWantedButInvoked, (, join, (, wanted, ., toString, (, ), ,]
[wanted, ,, Location, firstUndesired, ), {, throw, new, NeverWantedButInvoked, (, join, (, wanted, ., toString, (, ), ,, "Never wanted here:", ,]
[{, throw, new, NeverWantedButInvoked, (, join, (, wanted, ., toString, (, ), ,, "Never wanted here:", ,, new, LocationImpl, (, ), ,]
[new, NeverWantedButInvoked, (, join, (, wanted, ., toString, (, ), ,, "Never wanted here:", ,, new, LocationImpl, (, ), ,, "But invoked here:", ,]
[(, join, (, wanted, ., toString, (, ), ,, "Never wanted here:", ,, new, LocationImpl, (, ), ,, "But invoked here:", ,, firstUndesired, ,]
[public, void, tooManyActualInvocationsInOrder, (, int, wantedCount, ,, int, actualCount, ,, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, String, message, =]
[tooManyActualInvocationsInOrder, (, int, wantedCount, ,, int, actualCount, ,, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, String, message, =, createTooManyInvocationsMessage, (]
[int, wantedCount, ,, int, actualCount, ,, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, String, message, =, createTooManyInvocationsMessage, (, wantedCount, ,]
[,, int, actualCount, ,, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, String, message, =, createTooManyInvocationsMessage, (, wantedCount, ,, actualCount, ,]
[actualCount, ,, DescribedInvocation, wanted, ,, Location, firstUndesired, ), {, String, message, =, createTooManyInvocationsMessage, (, wantedCount, ,, actualCount, ,, wanted, ,]
[,, Location, firstUndesired, ), {, String, message, =, createTooManyInvocationsMessage, (, wantedCount, ,, actualCount, ,, wanted, ,, firstUndesired, ), ;, throw]
[), {, String, message, =, createTooManyInvocationsMessage, (, wantedCount, ,, actualCount, ,, wanted, ,, firstUndesired, ), ;, throw, new, VerificationInOrderFailure, (]
[String, message, =, createTooManyInvocationsMessage, (, wantedCount, ,, actualCount, ,, wanted, ,, firstUndesired, ), ;, throw, new, VerificationInOrderFailure, (, join, (]
[String, message, =, createTooManyInvocationsMessage, (, wantedCount, ,, actualCount, ,, wanted, ,, firstUndesired, ), ;, throw, new, VerificationInOrderFailure, (, join, (]
[=, createTooManyInvocationsMessage, (, wantedCount, ,, actualCount, ,, wanted, ,, firstUndesired, ), ;, throw, new, VerificationInOrderFailure, (, join, (, "Verification in order failure:", +]
[., mockito, ., internal, ., reporting, ., Discrepancy, discrepancy, ,, DescribedInvocation, wanted, ,, Location, lastActualInvocation, ), {, String, ending, =]
[., mockito, ., internal, ., reporting, ., Discrepancy, discrepancy, ,, DescribedInvocation, wanted, ,, Location, lastActualInvocation, ), {, String, ending, =]
[mockito, ., internal, ., reporting, ., Discrepancy, discrepancy, ,, DescribedInvocation, wanted, ,, Location, lastActualInvocation, ), {, String, ending, =, (]
[mockito, ., internal, ., reporting, ., Discrepancy, discrepancy, ,, DescribedInvocation, wanted, ,, Location, lastActualInvocation, ), {, String, ending, =, (]
[internal, ., reporting, ., Discrepancy, discrepancy, ,, DescribedInvocation, wanted, ,, Location, lastActualInvocation, ), {, String, ending, =, (, lastActualInvocation, !=]
[., Discrepancy, discrepancy, ,, DescribedInvocation, wanted, ,, Location, lastActualInvocation, ), {, String, ending, =, (, lastActualInvocation, !=, null, ), ?]
[., Discrepancy, discrepancy, ,, DescribedInvocation, wanted, ,, Location, lastActualInvocation, ), {, String, ending, =, (, lastActualInvocation, !=, null, ), ?]
[discrepancy, ,, DescribedInvocation, wanted, ,, Location, lastActualInvocation, ), {, String, ending, =, (, lastActualInvocation, !=, null, ), ?, lastActualInvocation, +]
[DescribedInvocation, wanted, ,, Location, lastActualInvocation, ), {, String, ending, =, (, lastActualInvocation, !=, null, ), ?, lastActualInvocation, +, "\n", :]
[), {, String, ending, =, (, lastActualInvocation, !=, null, ), ?, lastActualInvocation, +, "\n", :, "\n", ;, String, message, =]
[String, ending, =, (, lastActualInvocation, !=, null, ), ?, lastActualInvocation, +, "\n", :, "\n", ;, String, message, =, join, (]
[String, ending, =, (, lastActualInvocation, !=, null, ), ?, lastActualInvocation, +, "\n", :, "\n", ;, String, message, =, join, (]
[null, ), ?, lastActualInvocation, +, "\n", :, "\n", ;, String, message, =, join, (, wanted, ., toString, (, ), ,]
[null, ), ?, lastActualInvocation, +, "\n", :, "\n", ;, String, message, =, join, (, wanted, ., toString, (, ), ,]
[null, ), ?, lastActualInvocation, +, "\n", :, "\n", ;, String, message, =, join, (, wanted, ., toString, (, ), ,]
[?, lastActualInvocation, +, "\n", :, "\n", ;, String, message, =, join, (, wanted, ., toString, (, ), ,, "Wanted ", +]
[?, lastActualInvocation, +, "\n", :, "\n", ;, String, message, =, join, (, wanted, ., toString, (, ), ,, "Wanted ", +]
[;, String, message, =, join, (, wanted, ., toString, (, ), ,, "Wanted ", +, discrepancy, ., getPluralizedWantedCount, (, ), +]
[message, =, join, (, wanted, ., toString, (, ), ,, "Wanted ", +, discrepancy, ., getPluralizedWantedCount, (, ), +, ":", ,]
[., toString, (, ), ,, "Wanted ", +, discrepancy, ., getPluralizedWantedCount, (, ), +, ":", ,, new, LocationImpl, (, ), ,]
[., toString, (, ), ,, "Wanted ", +, discrepancy, ., getPluralizedWantedCount, (, ), +, ":", ,, new, LocationImpl, (, ), ,]
[., toString, (, ), ,, "Wanted ", +, discrepancy, ., getPluralizedWantedCount, (, ), +, ":", ,, new, LocationImpl, (, ), ,]
[(, ), ,, "Wanted ", +, discrepancy, ., getPluralizedWantedCount, (, ), +, ":", ,, new, LocationImpl, (, ), ,, "But was ", +]
[(, ), ,, "Wanted ", +, discrepancy, ., getPluralizedWantedCount, (, ), +, ":", ,, new, LocationImpl, (, ), ,, "But was ", +]
[., getPluralizedWantedCount, (, ), +, ":", ,, new, LocationImpl, (, ), ,, "But was ", +, discrepancy, ., getPluralizedActualCount, (, ), +]
[(, ), +, ":", ,, new, LocationImpl, (, ), ,, "But was ", +, discrepancy, ., getPluralizedActualCount, (, ), +, ":", ,]
[,, new, LocationImpl, (, ), ,, "But was ", +, discrepancy, ., getPluralizedActualCount, (, ), +, ":", ,, ending, ), ;, return]
[., mockito, ., internal, ., reporting, ., Discrepancy, discrepancy, ,, DescribedInvocation, wanted, ,, Location, lastActualLocation, ), {, String, message, =]
[., internal, ., reporting, ., Discrepancy, discrepancy, ,, DescribedInvocation, wanted, ,, Location, lastActualLocation, ), {, String, message, =, createTooLittleInvocationsMessage, (]
[., reporting, ., Discrepancy, discrepancy, ,, DescribedInvocation, wanted, ,, Location, lastActualLocation, ), {, String, message, =, createTooLittleInvocationsMessage, (, discrepancy, ,]
[., Discrepancy, discrepancy, ,, DescribedInvocation, wanted, ,, Location, lastActualLocation, ), {, String, message, =, createTooLittleInvocationsMessage, (, discrepancy, ,, wanted, ,]
[DescribedInvocation, wanted, ,, Location, lastActualLocation, ), {, String, message, =, createTooLittleInvocationsMessage, (, discrepancy, ,, wanted, ,, lastActualLocation, ), ;, throw]
[Location, lastActualLocation, ), {, String, message, =, createTooLittleInvocationsMessage, (, discrepancy, ,, wanted, ,, lastActualLocation, ), ;, throw, new, TooLittleActualInvocations, (]
[., mockito, ., internal, ., reporting, ., Discrepancy, discrepancy, ,, DescribedInvocation, wanted, ,, Location, lastActualLocation, ), {, String, message, =]
[., internal, ., reporting, ., Discrepancy, discrepancy, ,, DescribedInvocation, wanted, ,, Location, lastActualLocation, ), {, String, message, =, createTooLittleInvocationsMessage, (]
[., reporting, ., Discrepancy, discrepancy, ,, DescribedInvocation, wanted, ,, Location, lastActualLocation, ), {, String, message, =, createTooLittleInvocationsMessage, (, discrepancy, ,]
[., Discrepancy, discrepancy, ,, DescribedInvocation, wanted, ,, Location, lastActualLocation, ), {, String, message, =, createTooLittleInvocationsMessage, (, discrepancy, ,, wanted, ,]
[DescribedInvocation, wanted, ,, Location, lastActualLocation, ), {, String, message, =, createTooLittleInvocationsMessage, (, discrepancy, ,, wanted, ,, lastActualLocation, ), ;, throw]
[Location, lastActualLocation, ), {, String, message, =, createTooLittleInvocationsMessage, (, discrepancy, ,, wanted, ,, lastActualLocation, ), ;, throw, new, VerificationInOrderFailure, (]
[), {, String, message, =, createTooLittleInvocationsMessage, (, discrepancy, ,, wanted, ,, lastActualLocation, ), ;, throw, new, VerificationInOrderFailure, (, join, (]
[), {, String, message, =, createTooLittleInvocationsMessage, (, discrepancy, ,, wanted, ,, lastActualLocation, ), ;, throw, new, VerificationInOrderFailure, (, join, (]
[String, message, =, createTooLittleInvocationsMessage, (, discrepancy, ,, wanted, ,, lastActualLocation, ), ;, throw, new, VerificationInOrderFailure, (, join, (, "Verification in order failure:", +]
[), ;, }, public, void, noMoreInteractionsWanted, (, Invocation, undesired, ,, List, <, VerificationAwareInvocation, >, invocations, ), {, ScenarioPrinter, scenarioPrinter, =]
[undesired, ,, List, <, VerificationAwareInvocation, >, invocations, ), {, ScenarioPrinter, scenarioPrinter, =, new, ScenarioPrinter, (, ), ;, String, scenario, =]
[undesired, ,, List, <, VerificationAwareInvocation, >, invocations, ), {, ScenarioPrinter, scenarioPrinter, =, new, ScenarioPrinter, (, ), ;, String, scenario, =]
[VerificationAwareInvocation, >, invocations, ), {, ScenarioPrinter, scenarioPrinter, =, new, ScenarioPrinter, (, ), ;, String, scenario, =, scenarioPrinter, ., print, (]
[{, ScenarioPrinter, scenarioPrinter, =, new, ScenarioPrinter, (, ), ;, String, scenario, =, scenarioPrinter, ., print, (, invocations, ), ;, throw]
[=, new, ScenarioPrinter, (, ), ;, String, scenario, =, scenarioPrinter, ., print, (, invocations, ), ;, throw, new, NoInteractionsWanted, (]
[ScenarioPrinter, (, ), ;, String, scenario, =, scenarioPrinter, ., print, (, invocations, ), ;, throw, new, NoInteractionsWanted, (, join, (]
[), ;, String, scenario, =, scenarioPrinter, ., print, (, invocations, ), ;, throw, new, NoInteractionsWanted, (, join, (, "No interactions wanted here:", ,]
[scenarioPrinter, ., print, (, invocations, ), ;, throw, new, NoInteractionsWanted, (, join, (, "No interactions wanted here:", ,, new, LocationImpl, (, ), ,]
[scenarioPrinter, ., print, (, invocations, ), ;, throw, new, NoInteractionsWanted, (, join, (, "No interactions wanted here:", ,, new, LocationImpl, (, ), ,]
[scenarioPrinter, ., print, (, invocations, ), ;, throw, new, NoInteractionsWanted, (, join, (, "No interactions wanted here:", ,, new, LocationImpl, (, ), ,]
[print, (, invocations, ), ;, throw, new, NoInteractionsWanted, (, join, (, "No interactions wanted here:", ,, new, LocationImpl, (, ), ,, "But found this interaction on mock '", +]
[invocations, ), ;, throw, new, NoInteractionsWanted, (, join, (, "No interactions wanted here:", ,, new, LocationImpl, (, ), ,, "But found this interaction on mock '", +, safelyGetMockName, (]
[invocations, ), ;, throw, new, NoInteractionsWanted, (, join, (, "No interactions wanted here:", ,, new, LocationImpl, (, ), ,, "But found this interaction on mock '", +, safelyGetMockName, (]
[join, (, "No interactions wanted here:", ,, new, LocationImpl, (, ), ,, "But found this interaction on mock '", +, safelyGetMockName, (, undesired, ., getMock, (, ), ), +]
["No interactions wanted here:", ,, new, LocationImpl, (, ), ,, "But found this interaction on mock '", +, safelyGetMockName, (, undesired, ., getMock, (, ), ), +, "':", ,]
["No interactions wanted here:", ,, new, LocationImpl, (, ), ,, "But found this interaction on mock '", +, safelyGetMockName, (, undesired, ., getMock, (, ), ), +, "':", ,]
[,, "But found this interaction on mock '", +, safelyGetMockName, (, undesired, ., getMock, (, ), ), +, "':", ,, undesired, ., getLocation, (, ), ,]
[undesired, ., getLocation, (, ), ,, scenario, ), ), ;, }, public, void, noMoreInteractionsWantedInOrder, (, Invocation, undesired, ), {, throw]
[(, ), ,, scenario, ), ), ;, }, public, void, noMoreInteractionsWantedInOrder, (, Invocation, undesired, ), {, throw, new, VerificationInOrderFailure, (]
[,, scenario, ), ), ;, }, public, void, noMoreInteractionsWantedInOrder, (, Invocation, undesired, ), {, throw, new, VerificationInOrderFailure, (, join, (]
[), ), ;, }, public, void, noMoreInteractionsWantedInOrder, (, Invocation, undesired, ), {, throw, new, VerificationInOrderFailure, (, join, (, "No interactions wanted here:", ,]
[void, noMoreInteractionsWantedInOrder, (, Invocation, undesired, ), {, throw, new, VerificationInOrderFailure, (, join, (, "No interactions wanted here:", ,, new, LocationImpl, (, ), ,]
[void, noMoreInteractionsWantedInOrder, (, Invocation, undesired, ), {, throw, new, VerificationInOrderFailure, (, join, (, "No interactions wanted here:", ,, new, LocationImpl, (, ), ,]
[void, noMoreInteractionsWantedInOrder, (, Invocation, undesired, ), {, throw, new, VerificationInOrderFailure, (, join, (, "No interactions wanted here:", ,, new, LocationImpl, (, ), ,]
[(, Invocation, undesired, ), {, throw, new, VerificationInOrderFailure, (, join, (, "No interactions wanted here:", ,, new, LocationImpl, (, ), ,, "But found this interaction on mock '", +]
[undesired, ), {, throw, new, VerificationInOrderFailure, (, join, (, "No interactions wanted here:", ,, new, LocationImpl, (, ), ,, "But found this interaction on mock '", +, safelyGetMockName, (]
[undesired, ), {, throw, new, VerificationInOrderFailure, (, join, (, "No interactions wanted here:", ,, new, LocationImpl, (, ), ,, "But found this interaction on mock '", +, safelyGetMockName, (]
[join, (, "No interactions wanted here:", ,, new, LocationImpl, (, ), ,, "But found this interaction on mock '", +, safelyGetMockName, (, undesired, ., getMock, (, ), ), +]
["No interactions wanted here:", ,, new, LocationImpl, (, ), ,, "But found this interaction on mock '", +, safelyGetMockName, (, undesired, ., getMock, (, ), ), +, "':", ,]
["No interactions wanted here:", ,, new, LocationImpl, (, ), ,, "But found this interaction on mock '", +, safelyGetMockName, (, undesired, ., getMock, (, ), ), +, "':", ,]
[., getLocation, (, ), ), ), ;, }, public, void, cannotMockFinalClass, (, Class, <, ?, >, clazz, ), {, throw]
[), ), ), ;, }, public, void, cannotMockFinalClass, (, Class, <, ?, >, clazz, ), {, throw, new, MockitoException, (]
[), ;, }, public, void, cannotMockFinalClass, (, Class, <, ?, >, clazz, ), {, throw, new, MockitoException, (, join, (]
[), ;, }, public, void, cannotMockFinalClass, (, Class, <, ?, >, clazz, ), {, throw, new, MockitoException, (, join, (]
[}, public, void, cannotMockFinalClass, (, Class, <, ?, >, clazz, ), {, throw, new, MockitoException, (, join, (, "Cannot mock/spy ", +]
[}, public, void, cannotMockFinalClass, (, Class, <, ?, >, clazz, ), {, throw, new, MockitoException, (, join, (, "Cannot mock/spy ", +]
[<, ?, >, clazz, ), {, throw, new, MockitoException, (, join, (, "Cannot mock/spy ", +, clazz, ., toString, (, ), ,]
[>, clazz, ), {, throw, new, MockitoException, (, join, (, "Cannot mock/spy ", +, clazz, ., toString, (, ), ,, "Mockito cannot mock/spy following:", ,]
[), {, throw, new, MockitoException, (, join, (, "Cannot mock/spy ", +, clazz, ., toString, (, ), ,, "Mockito cannot mock/spy following:", ,, "  - final classes", ,]
[throw, new, MockitoException, (, join, (, "Cannot mock/spy ", +, clazz, ., toString, (, ), ,, "Mockito cannot mock/spy following:", ,, "  - final classes", ,, "  - anonymous classes", ,]
["Mockito cannot mock/spy following:", ,, "  - final classes", ,, "  - anonymous classes", ,, "  - primitive types", ), ), ;, }, public, void, cannotStubVoidMethodWithAReturnValue, (, String, methodName, ), {, throw]
[,, "  - anonymous classes", ,, "  - primitive types", ), ), ;, }, public, void, cannotStubVoidMethodWithAReturnValue, (, String, methodName, ), {, throw, new, CannotStubVoidMethodWithReturnValue, (]
[,, "  - primitive types", ), ), ;, }, public, void, cannotStubVoidMethodWithAReturnValue, (, String, methodName, ), {, throw, new, CannotStubVoidMethodWithReturnValue, (, join, (]
[,, "  - primitive types", ), ), ;, }, public, void, cannotStubVoidMethodWithAReturnValue, (, String, methodName, ), {, throw, new, CannotStubVoidMethodWithReturnValue, (, join, (]
[,, "  - primitive types", ), ), ;, }, public, void, cannotStubVoidMethodWithAReturnValue, (, String, methodName, ), {, throw, new, CannotStubVoidMethodWithReturnValue, (, join, (]
[), ), ;, }, public, void, cannotStubVoidMethodWithAReturnValue, (, String, methodName, ), {, throw, new, CannotStubVoidMethodWithReturnValue, (, join, (, "'", +]
[;, }, public, void, cannotStubVoidMethodWithAReturnValue, (, String, methodName, ), {, throw, new, CannotStubVoidMethodWithReturnValue, (, join, (, "'", +, methodName, +]
[public, void, cannotStubVoidMethodWithAReturnValue, (, String, methodName, ), {, throw, new, CannotStubVoidMethodWithReturnValue, (, join, (, "'", +, methodName, +, "' is a *void method* and it *cannot* be stubbed with a *return value*!", ,]
[cannotStubVoidMethodWithAReturnValue, (, String, methodName, ), {, throw, new, CannotStubVoidMethodWithReturnValue, (, join, (, "'", +, methodName, +, "' is a *void method* and it *cannot* be stubbed with a *return value*!", ,, "Voids are usually stubbed with Throwables:", ,]
[String, methodName, ), {, throw, new, CannotStubVoidMethodWithReturnValue, (, join, (, "'", +, methodName, +, "' is a *void method* and it *cannot* be stubbed with a *return value*!", ,, "Voids are usually stubbed with Throwables:", ,, "    doThrow(exception).when(mock).someVoidMethod();", ,]
[), {, throw, new, CannotStubVoidMethodWithReturnValue, (, join, (, "'", +, methodName, +, "' is a *void method* and it *cannot* be stubbed with a *return value*!", ,, "Voids are usually stubbed with Throwables:", ,, "    doThrow(exception).when(mock).someVoidMethod();", ,, "***", ,]
[throw, new, CannotStubVoidMethodWithReturnValue, (, join, (, "'", +, methodName, +, "' is a *void method* and it *cannot* be stubbed with a *return value*!", ,, "Voids are usually stubbed with Throwables:", ,, "    doThrow(exception).when(mock).someVoidMethod();", ,, "***", ,, "If you're unsure why you're getting above error read on.", ,]
[CannotStubVoidMethodWithReturnValue, (, join, (, "'", +, methodName, +, "' is a *void method* and it *cannot* be stubbed with a *return value*!", ,, "Voids are usually stubbed with Throwables:", ,, "    doThrow(exception).when(mock).someVoidMethod();", ,, "***", ,, "If you're unsure why you're getting above error read on.", ,, "Due to the nature of the syntax above problem might occur because:", ,]
[join, (, "'", +, methodName, +, "' is a *void method* and it *cannot* be stubbed with a *return value*!", ,, "Voids are usually stubbed with Throwables:", ,, "    doThrow(exception).when(mock).someVoidMethod();", ,, "***", ,, "If you're unsure why you're getting above error read on.", ,, "Due to the nature of the syntax above problem might occur because:", ,, "1. The method you are trying to stub is *overloaded*. Make sure you are calling the right overloaded version.", ,]
["'", +, methodName, +, "' is a *void method* and it *cannot* be stubbed with a *return value*!", ,, "Voids are usually stubbed with Throwables:", ,, "    doThrow(exception).when(mock).someVoidMethod();", ,, "***", ,, "If you're unsure why you're getting above error read on.", ,, "Due to the nature of the syntax above problem might occur because:", ,, "1. The method you are trying to stub is *overloaded*. Make sure you are calling the right overloaded version.", ,, "2. Somewhere in your test you are stubbing *final methods*. Sorry, Mockito does not verify/stub final methods.", ,]
[methodName, +, "' is a *void method* and it *cannot* be stubbed with a *return value*!", ,, "Voids are usually stubbed with Throwables:", ,, "    doThrow(exception).when(mock).someVoidMethod();", ,, "***", ,, "If you're unsure why you're getting above error read on.", ,, "Due to the nature of the syntax above problem might occur because:", ,, "1. The method you are trying to stub is *overloaded*. Make sure you are calling the right overloaded version.", ,, "2. Somewhere in your test you are stubbing *final methods*. Sorry, Mockito does not verify/stub final methods.", ,, "3. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ", ,]
["' is a *void method* and it *cannot* be stubbed with a *return value*!", ,, "Voids are usually stubbed with Throwables:", ,, "    doThrow(exception).when(mock).someVoidMethod();", ,, "***", ,, "If you're unsure why you're getting above error read on.", ,, "Due to the nature of the syntax above problem might occur because:", ,, "1. The method you are trying to stub is *overloaded*. Make sure you are calling the right overloaded version.", ,, "2. Somewhere in your test you are stubbing *final methods*. Sorry, Mockito does not verify/stub final methods.", ,, "3. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ", ,, "   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.", ,]
["' is a *void method* and it *cannot* be stubbed with a *return value*!", ,, "Voids are usually stubbed with Throwables:", ,, "    doThrow(exception).when(mock).someVoidMethod();", ,, "***", ,, "If you're unsure why you're getting above error read on.", ,, "Due to the nature of the syntax above problem might occur because:", ,, "1. The method you are trying to stub is *overloaded*. Make sure you are calling the right overloaded version.", ,, "2. Somewhere in your test you are stubbing *final methods*. Sorry, Mockito does not verify/stub final methods.", ,, "3. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ", ,, "   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.", ,]
["Voids are usually stubbed with Throwables:", ,, "    doThrow(exception).when(mock).someVoidMethod();", ,, "***", ,, "If you're unsure why you're getting above error read on.", ,, "Due to the nature of the syntax above problem might occur because:", ,, "1. The method you are trying to stub is *overloaded*. Make sure you are calling the right overloaded version.", ,, "2. Somewhere in your test you are stubbing *final methods*. Sorry, Mockito does not verify/stub final methods.", ,, "3. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ", ,, "   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.", ,, "4. ", +]
["Voids are usually stubbed with Throwables:", ,, "    doThrow(exception).when(mock).someVoidMethod();", ,, "***", ,, "If you're unsure why you're getting above error read on.", ,, "Due to the nature of the syntax above problem might occur because:", ,, "1. The method you are trying to stub is *overloaded*. Make sure you are calling the right overloaded version.", ,, "2. Somewhere in your test you are stubbing *final methods*. Sorry, Mockito does not verify/stub final methods.", ,, "3. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ", ,, "   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.", ,, "4. ", +]
["***", ,, "If you're unsure why you're getting above error read on.", ,, "Due to the nature of the syntax above problem might occur because:", ,, "1. The method you are trying to stub is *overloaded*. Make sure you are calling the right overloaded version.", ,, "2. Somewhere in your test you are stubbing *final methods*. Sorry, Mockito does not verify/stub final methods.", ,, "3. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ", ,, "   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.", ,, "4. ", +, MockitoLimitations, ., NON_PUBLIC_PARENT, ,]
["   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.", ,, "4. ", +, MockitoLimitations, ., NON_PUBLIC_PARENT, ,, "", ), ), ;, }, public, void, onlyVoidMethodsCanBeSetToDoNothing, (, ), {, throw]
[+, MockitoLimitations, ., NON_PUBLIC_PARENT, ,, "", ), ), ;, }, public, void, onlyVoidMethodsCanBeSetToDoNothing, (, ), {, throw, new, MockitoException, (]
[., NON_PUBLIC_PARENT, ,, "", ), ), ;, }, public, void, onlyVoidMethodsCanBeSetToDoNothing, (, ), {, throw, new, MockitoException, (, join, (]
[,, "", ), ), ;, }, public, void, onlyVoidMethodsCanBeSetToDoNothing, (, ), {, throw, new, MockitoException, (, join, (, "Only void methods can doNothing()!", ,]
[), ), ;, }, public, void, onlyVoidMethodsCanBeSetToDoNothing, (, ), {, throw, new, MockitoException, (, join, (, "Only void methods can doNothing()!", ,, "Example of correct use of doNothing():", ,]
[;, }, public, void, onlyVoidMethodsCanBeSetToDoNothing, (, ), {, throw, new, MockitoException, (, join, (, "Only void methods can doNothing()!", ,, "Example of correct use of doNothing():", ,, "    doNothing().", ,]
[public, void, onlyVoidMethodsCanBeSetToDoNothing, (, ), {, throw, new, MockitoException, (, join, (, "Only void methods can doNothing()!", ,, "Example of correct use of doNothing():", ,, "    doNothing().", ,, "    doThrow(new RuntimeException())", ,]
[onlyVoidMethodsCanBeSetToDoNothing, (, ), {, throw, new, MockitoException, (, join, (, "Only void methods can doNothing()!", ,, "Example of correct use of doNothing():", ,, "    doNothing().", ,, "    doThrow(new RuntimeException())", ,, "    .when(mock).someVoidMethod();", ,]
[), {, throw, new, MockitoException, (, join, (, "Only void methods can doNothing()!", ,, "Example of correct use of doNothing():", ,, "    doNothing().", ,, "    doThrow(new RuntimeException())", ,, "    .when(mock).someVoidMethod();", ,, "Above means:", ,]
["someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called", ), ), ;, }, public, void, wrongTypeOfReturnValue, (, String, expectedType, ,, String, actualType, ,, String, methodName, ), {, throw]
[;, }, public, void, wrongTypeOfReturnValue, (, String, expectedType, ,, String, actualType, ,, String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (]
[public, void, wrongTypeOfReturnValue, (, String, expectedType, ,, String, actualType, ,, String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (]
[public, void, wrongTypeOfReturnValue, (, String, expectedType, ,, String, actualType, ,, String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (]
[public, void, wrongTypeOfReturnValue, (, String, expectedType, ,, String, actualType, ,, String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (]
[public, void, wrongTypeOfReturnValue, (, String, expectedType, ,, String, actualType, ,, String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (]
[wrongTypeOfReturnValue, (, String, expectedType, ,, String, actualType, ,, String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, actualType, +]
[String, expectedType, ,, String, actualType, ,, String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, actualType, +, " cannot be returned by ", +]
[,, String, actualType, ,, String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, actualType, +, " cannot be returned by ", +, methodName, +]
[actualType, ,, String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, actualType, +, " cannot be returned by ", +, methodName, +, "()", ,]
[actualType, ,, String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, actualType, +, " cannot be returned by ", +, methodName, +, "()", ,]
[actualType, ,, String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, actualType, +, " cannot be returned by ", +, methodName, +, "()", ,]
[String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, actualType, +, " cannot be returned by ", +, methodName, +, "()", ,, methodName, +]
[), {, throw, new, WrongTypeOfReturnValue, (, join, (, actualType, +, " cannot be returned by ", +, methodName, +, "()", ,, methodName, +, "() should return ", +]
[throw, new, WrongTypeOfReturnValue, (, join, (, actualType, +, " cannot be returned by ", +, methodName, +, "()", ,, methodName, +, "() should return ", +, expectedType, ,]
[WrongTypeOfReturnValue, (, join, (, actualType, +, " cannot be returned by ", +, methodName, +, "()", ,, methodName, +, "() should return ", +, expectedType, ,, "***", ,]
[join, (, actualType, +, " cannot be returned by ", +, methodName, +, "()", ,, methodName, +, "() should return ", +, expectedType, ,, "***", ,, "If you're unsure why you're getting above error read on.", ,]
[actualType, +, " cannot be returned by ", +, methodName, +, "()", ,, methodName, +, "() should return ", +, expectedType, ,, "***", ,, "If you're unsure why you're getting above error read on.", ,, "Due to the nature of the syntax above problem might occur because:", ,]
[" cannot be returned by ", +, methodName, +, "()", ,, methodName, +, "() should return ", +, expectedType, ,, "***", ,, "If you're unsure why you're getting above error read on.", ,, "Due to the nature of the syntax above problem might occur because:", ,, "1. This exception *might* occur in wrongly written multi-threaded tests.", ,]
[methodName, +, "()", ,, methodName, +, "() should return ", +, expectedType, ,, "***", ,, "If you're unsure why you're getting above error read on.", ,, "Due to the nature of the syntax above problem might occur because:", ,, "1. This exception *might* occur in wrongly written multi-threaded tests.", ,, "   Please refer to Mockito FAQ on limitations of concurrency testing.", ,]
["()", ,, methodName, +, "() should return ", +, expectedType, ,, "***", ,, "If you're unsure why you're getting above error read on.", ,, "Due to the nature of the syntax above problem might occur because:", ,, "1. This exception *might* occur in wrongly written multi-threaded tests.", ,, "   Please refer to Mockito FAQ on limitations of concurrency testing.", ,, "2. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ", ,]
[methodName, +, "() should return ", +, expectedType, ,, "***", ,, "If you're unsure why you're getting above error read on.", ,, "Due to the nature of the syntax above problem might occur because:", ,, "1. This exception *might* occur in wrongly written multi-threaded tests.", ,, "   Please refer to Mockito FAQ on limitations of concurrency testing.", ,, "2. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ", ,, "   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.", ,]
[;, }, public, void, wrongTypeReturnedByDefaultAnswer, (, Object, mock, ,, String, expectedType, ,, String, actualType, ,, String, methodName, ), {, throw]
[void, wrongTypeReturnedByDefaultAnswer, (, Object, mock, ,, String, expectedType, ,, String, actualType, ,, String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (]
[(, Object, mock, ,, String, expectedType, ,, String, actualType, ,, String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (]
[mock, ,, String, expectedType, ,, String, actualType, ,, String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, "Default answer returned a result with the wrong type:", ,]
[mock, ,, String, expectedType, ,, String, actualType, ,, String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, "Default answer returned a result with the wrong type:", ,]
[mock, ,, String, expectedType, ,, String, actualType, ,, String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, "Default answer returned a result with the wrong type:", ,]
[mock, ,, String, expectedType, ,, String, actualType, ,, String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, "Default answer returned a result with the wrong type:", ,]
[String, expectedType, ,, String, actualType, ,, String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, "Default answer returned a result with the wrong type:", ,, actualType, +]
[,, String, actualType, ,, String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, "Default answer returned a result with the wrong type:", ,, actualType, +, " cannot be returned by ", +]
[actualType, ,, String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, "Default answer returned a result with the wrong type:", ,, actualType, +, " cannot be returned by ", +, methodName, +]
[String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, "Default answer returned a result with the wrong type:", ,, actualType, +, " cannot be returned by ", +, methodName, +, "()", ,]
[String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, "Default answer returned a result with the wrong type:", ,, actualType, +, " cannot be returned by ", +, methodName, +, "()", ,]
[String, methodName, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, "Default answer returned a result with the wrong type:", ,, actualType, +, " cannot be returned by ", +, methodName, +, "()", ,]
[), {, throw, new, WrongTypeOfReturnValue, (, join, (, "Default answer returned a result with the wrong type:", ,, actualType, +, " cannot be returned by ", +, methodName, +, "()", ,, methodName, +]
[throw, new, WrongTypeOfReturnValue, (, join, (, "Default answer returned a result with the wrong type:", ,, actualType, +, " cannot be returned by ", +, methodName, +, "()", ,, methodName, +, "() should return ", +]
[WrongTypeOfReturnValue, (, join, (, "Default answer returned a result with the wrong type:", ,, actualType, +, " cannot be returned by ", +, methodName, +, "()", ,, methodName, +, "() should return ", +, expectedType, ,]
[join, (, "Default answer returned a result with the wrong type:", ,, actualType, +, " cannot be returned by ", +, methodName, +, "()", ,, methodName, +, "() should return ", +, expectedType, ,, "", ,]
[join, (, "Default answer returned a result with the wrong type:", ,, actualType, +, " cannot be returned by ", +, methodName, +, "()", ,, methodName, +, "() should return ", +, expectedType, ,, "", ,]
[join, (, "Default answer returned a result with the wrong type:", ,, actualType, +, " cannot be returned by ", +, methodName, +, "()", ,, methodName, +, "() should return ", +, expectedType, ,, "", ,]
["Default answer returned a result with the wrong type:", ,, actualType, +, " cannot be returned by ", +, methodName, +, "()", ,, methodName, +, "() should return ", +, expectedType, ,, "", ,, "The default answer of ", +]
[actualType, +, " cannot be returned by ", +, methodName, +, "()", ,, methodName, +, "() should return ", +, expectedType, ,, "", ,, "The default answer of ", +, safelyGetMockName, (]
[+, methodName, +, "()", ,, methodName, +, "() should return ", +, expectedType, ,, "", ,, "The default answer of ", +, safelyGetMockName, (, mock, ), +]
[+, "()", ,, methodName, +, "() should return ", +, expectedType, ,, "", ,, "The default answer of ", +, safelyGetMockName, (, mock, ), +, " that was configured on the mock is probably incorrectly implemented.", ,]
[+, " that was configured on the mock is probably incorrectly implemented.", ,, "", ), ), ;, }, public, void, wantedAtMostX, (, int, maxNumberOfInvocations, ,, int, foundSize, ), {, throw]
["", ), ), ;, }, public, void, wantedAtMostX, (, int, maxNumberOfInvocations, ,, int, foundSize, ), {, throw, new, MockitoAssertionError, (]
[), ;, }, public, void, wantedAtMostX, (, int, maxNumberOfInvocations, ,, int, foundSize, ), {, throw, new, MockitoAssertionError, (, join, (]
[), ;, }, public, void, wantedAtMostX, (, int, maxNumberOfInvocations, ,, int, foundSize, ), {, throw, new, MockitoAssertionError, (, join, (]
[), ;, }, public, void, wantedAtMostX, (, int, maxNumberOfInvocations, ,, int, foundSize, ), {, throw, new, MockitoAssertionError, (, join, (]
[), ;, }, public, void, wantedAtMostX, (, int, maxNumberOfInvocations, ,, int, foundSize, ), {, throw, new, MockitoAssertionError, (, join, (]
[}, public, void, wantedAtMostX, (, int, maxNumberOfInvocations, ,, int, foundSize, ), {, throw, new, MockitoAssertionError, (, join, (, "Wanted at most ", +]
[void, wantedAtMostX, (, int, maxNumberOfInvocations, ,, int, foundSize, ), {, throw, new, MockitoAssertionError, (, join, (, "Wanted at most ", +, pluralize, (]
[int, maxNumberOfInvocations, ,, int, foundSize, ), {, throw, new, MockitoAssertionError, (, join, (, "Wanted at most ", +, pluralize, (, maxNumberOfInvocations, ), +]
[,, int, foundSize, ), {, throw, new, MockitoAssertionError, (, join, (, "Wanted at most ", +, pluralize, (, maxNumberOfInvocations, ), +, " but was ", +]
[+, " but was ", +, foundSize, ), ), ;, }, public, void, misplacedArgumentMatcher, (, List, <, LocalizedMatcher, >, lastMatchers, ), {, throw]
[foundSize, ), ), ;, }, public, void, misplacedArgumentMatcher, (, List, <, LocalizedMatcher, >, lastMatchers, ), {, throw, new, InvalidUseOfMatchersException, (]
[), ;, }, public, void, misplacedArgumentMatcher, (, List, <, LocalizedMatcher, >, lastMatchers, ), {, throw, new, InvalidUseOfMatchersException, (, join, (]
[}, public, void, misplacedArgumentMatcher, (, List, <, LocalizedMatcher, >, lastMatchers, ), {, throw, new, InvalidUseOfMatchersException, (, join, (, "Misplaced argument matcher detected here:", ,]
[void, misplacedArgumentMatcher, (, List, <, LocalizedMatcher, >, lastMatchers, ), {, throw, new, InvalidUseOfMatchersException, (, join, (, "Misplaced argument matcher detected here:", ,, locationsOf, (]
[List, <, LocalizedMatcher, >, lastMatchers, ), {, throw, new, InvalidUseOfMatchersException, (, join, (, "Misplaced argument matcher detected here:", ,, locationsOf, (, lastMatchers, ), ,]
[LocalizedMatcher, >, lastMatchers, ), {, throw, new, InvalidUseOfMatchersException, (, join, (, "Misplaced argument matcher detected here:", ,, locationsOf, (, lastMatchers, ), ,, "", ,]
[lastMatchers, ), {, throw, new, InvalidUseOfMatchersException, (, join, (, "Misplaced argument matcher detected here:", ,, locationsOf, (, lastMatchers, ), ,, "", ,, "You cannot use argument matchers outside of verification or stubbing.", ,]
[{, throw, new, InvalidUseOfMatchersException, (, join, (, "Misplaced argument matcher detected here:", ,, locationsOf, (, lastMatchers, ), ,, "", ,, "You cannot use argument matchers outside of verification or stubbing.", ,, "Examples of correct usage of argument matchers:", ,]
[new, InvalidUseOfMatchersException, (, join, (, "Misplaced argument matcher detected here:", ,, locationsOf, (, lastMatchers, ), ,, "", ,, "You cannot use argument matchers outside of verification or stubbing.", ,, "Examples of correct usage of argument matchers:", ,, "    when(mock.get(anyInt())).thenReturn(null);", ,]
[(, join, (, "Misplaced argument matcher detected here:", ,, locationsOf, (, lastMatchers, ), ,, "", ,, "You cannot use argument matchers outside of verification or stubbing.", ,, "Examples of correct usage of argument matchers:", ,, "    when(mock.get(anyInt())).thenReturn(null);", ,, "    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());", ,]
[(, "Misplaced argument matcher detected here:", ,, locationsOf, (, lastMatchers, ), ,, "", ,, "You cannot use argument matchers outside of verification or stubbing.", ,, "Examples of correct usage of argument matchers:", ,, "    when(mock.get(anyInt())).thenReturn(null);", ,, "    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());", ,, "    verify(mock).someMethod(contains(\"foo\"))", ,]
[,, locationsOf, (, lastMatchers, ), ,, "", ,, "You cannot use argument matchers outside of verification or stubbing.", ,, "Examples of correct usage of argument matchers:", ,, "    when(mock.get(anyInt())).thenReturn(null);", ,, "    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());", ,, "    verify(mock).someMethod(contains(\"foo\"))", ,, "", ,]
[(, lastMatchers, ), ,, "", ,, "You cannot use argument matchers outside of verification or stubbing.", ,, "Examples of correct usage of argument matchers:", ,, "    when(mock.get(anyInt())).thenReturn(null);", ,, "    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());", ,, "    verify(mock).someMethod(contains(\"foo\"))", ,, "", ,, "Also, this error might show up because you use argument matchers with methods that cannot be mocked.", ,]
[), ,, "", ,, "You cannot use argument matchers outside of verification or stubbing.", ,, "Examples of correct usage of argument matchers:", ,, "    when(mock.get(anyInt())).thenReturn(null);", ,, "    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());", ,, "    verify(mock).someMethod(contains(\"foo\"))", ,, "", ,, "Also, this error might show up because you use argument matchers with methods that cannot be mocked.", ,, "Following methods *cannot* be stubbed/verified: final/private/equals()/hashCode().", ,]
[), ,, "", ,, "You cannot use argument matchers outside of verification or stubbing.", ,, "Examples of correct usage of argument matchers:", ,, "    when(mock.get(anyInt())).thenReturn(null);", ,, "    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());", ,, "    verify(mock).someMethod(contains(\"foo\"))", ,, "", ,, "Also, this error might show up because you use argument matchers with methods that cannot be mocked.", ,, "Following methods *cannot* be stubbed/verified: final/private/equals()/hashCode().", ,]
["You cannot use argument matchers outside of verification or stubbing.", ,, "Examples of correct usage of argument matchers:", ,, "    when(mock.get(anyInt())).thenReturn(null);", ,, "    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());", ,, "    verify(mock).someMethod(contains(\"foo\"))", ,, "", ,, "Also, this error might show up because you use argument matchers with methods that cannot be mocked.", ,, "Following methods *cannot* be stubbed/verified: final/private/equals()/hashCode().", ,, MockitoLimitations, ., NON_PUBLIC_PARENT, ,]
[., NON_PUBLIC_PARENT, ,, "", ), ), ;, }, public, void, smartNullPointerException, (, String, invocation, ,, Location, location, ), {, throw]
["", ), ), ;, }, public, void, smartNullPointerException, (, String, invocation, ,, Location, location, ), {, throw, new, SmartNullPointerException, (]
[), ;, }, public, void, smartNullPointerException, (, String, invocation, ,, Location, location, ), {, throw, new, SmartNullPointerException, (, join, (]
[}, public, void, smartNullPointerException, (, String, invocation, ,, Location, location, ), {, throw, new, SmartNullPointerException, (, join, (, "You have a NullPointerException here:", ,]
[String, invocation, ,, Location, location, ), {, throw, new, SmartNullPointerException, (, join, (, "You have a NullPointerException here:", ,, new, LocationImpl, (, ), ,]
[,, Location, location, ), {, throw, new, SmartNullPointerException, (, join, (, "You have a NullPointerException here:", ,, new, LocationImpl, (, ), ,, "because this method call was *not* stubbed correctly:", ,]
[location, ), {, throw, new, SmartNullPointerException, (, join, (, "You have a NullPointerException here:", ,, new, LocationImpl, (, ), ,, "because this method call was *not* stubbed correctly:", ,, location, ,]
[{, throw, new, SmartNullPointerException, (, join, (, "You have a NullPointerException here:", ,, new, LocationImpl, (, ), ,, "because this method call was *not* stubbed correctly:", ,, location, ,, invocation, ,]
[), ,, "because this method call was *not* stubbed correctly:", ,, location, ,, invocation, ,, "", ), ), ;, }, public, void, noArgumentValueWasCaptured, (, ), {, throw]
[,, location, ,, invocation, ,, "", ), ), ;, }, public, void, noArgumentValueWasCaptured, (, ), {, throw, new, MockitoException, (]
[,, invocation, ,, "", ), ), ;, }, public, void, noArgumentValueWasCaptured, (, ), {, throw, new, MockitoException, (, join, (]
[,, "", ), ), ;, }, public, void, noArgumentValueWasCaptured, (, ), {, throw, new, MockitoException, (, join, (, "No argument value was captured!", ,]
[), ), ;, }, public, void, noArgumentValueWasCaptured, (, ), {, throw, new, MockitoException, (, join, (, "No argument value was captured!", ,, "You might have forgotten to use argument.capture() in verify()...", ,]
[;, }, public, void, noArgumentValueWasCaptured, (, ), {, throw, new, MockitoException, (, join, (, "No argument value was captured!", ,, "You might have forgotten to use argument.capture() in verify()...", ,, "...or you used capture() in stubbing but stubbed method was not called.", ,]
[public, void, noArgumentValueWasCaptured, (, ), {, throw, new, MockitoException, (, join, (, "No argument value was captured!", ,, "You might have forgotten to use argument.capture() in verify()...", ,, "...or you used capture() in stubbing but stubbed method was not called.", ,, "Be aware that it is recommended to use capture() only with verify()", ,]
[noArgumentValueWasCaptured, (, ), {, throw, new, MockitoException, (, join, (, "No argument value was captured!", ,, "You might have forgotten to use argument.capture() in verify()...", ,, "...or you used capture() in stubbing but stubbed method was not called.", ,, "Be aware that it is recommended to use capture() only with verify()", ,, "", ,]
[), {, throw, new, MockitoException, (, join, (, "No argument value was captured!", ,, "You might have forgotten to use argument.capture() in verify()...", ,, "...or you used capture() in stubbing but stubbed method was not called.", ,, "Be aware that it is recommended to use capture() only with verify()", ,, "", ,, "Examples of correct argument capturing:", ,]
[throw, new, MockitoException, (, join, (, "No argument value was captured!", ,, "You might have forgotten to use argument.capture() in verify()...", ,, "...or you used capture() in stubbing but stubbed method was not called.", ,, "Be aware that it is recommended to use capture() only with verify()", ,, "", ,, "Examples of correct argument capturing:", ,, "    ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);", ,]
[MockitoException, (, join, (, "No argument value was captured!", ,, "You might have forgotten to use argument.capture() in verify()...", ,, "...or you used capture() in stubbing but stubbed method was not called.", ,, "Be aware that it is recommended to use capture() only with verify()", ,, "", ,, "Examples of correct argument capturing:", ,, "    ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);", ,, "    verify(mock).doSomething(argument.capture());", ,]
[join, (, "No argument value was captured!", ,, "You might have forgotten to use argument.capture() in verify()...", ,, "...or you used capture() in stubbing but stubbed method was not called.", ,, "Be aware that it is recommended to use capture() only with verify()", ,, "", ,, "Examples of correct argument capturing:", ,, "    ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);", ,, "    verify(mock).doSomething(argument.capture());", ,, "    assertEquals(\"John\", argument.getValue().getName());", ,]
["Examples of correct argument capturing:", ,, "    ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);", ,, "    verify(mock).doSomething(argument.capture());", ,, "    assertEquals(\"John\", argument.getValue().getName());", ,, "", ), ), ;, }, public, void, extraInterfacesDoesNotAcceptNullParameters, (, ), {, throw]
[,, "    verify(mock).doSomething(argument.capture());", ,, "    assertEquals(\"John\", argument.getValue().getName());", ,, "", ), ), ;, }, public, void, extraInterfacesDoesNotAcceptNullParameters, (, ), {, throw, new, MockitoException, (]
[,, "    assertEquals(\"John\", argument.getValue().getName());", ,, "", ), ), ;, }, public, void, extraInterfacesDoesNotAcceptNullParameters, (, ), {, throw, new, MockitoException, (, join, (]
[(, join, (, "extraInterfaces() does not accept null parameters.", ), ), ;, }, public, void, extraInterfacesAcceptsOnlyInterfaces, (, Class, <, ?, >, wrongType, ), {, throw]
["extraInterfaces() does not accept null parameters.", ), ), ;, }, public, void, extraInterfacesAcceptsOnlyInterfaces, (, Class, <, ?, >, wrongType, ), {, throw, new, MockitoException, (]
[), ;, }, public, void, extraInterfacesAcceptsOnlyInterfaces, (, Class, <, ?, >, wrongType, ), {, throw, new, MockitoException, (, join, (]
[}, public, void, extraInterfacesAcceptsOnlyInterfaces, (, Class, <, ?, >, wrongType, ), {, throw, new, MockitoException, (, join, (, "extraInterfaces() accepts only interfaces.", ,]
[}, public, void, extraInterfacesAcceptsOnlyInterfaces, (, Class, <, ?, >, wrongType, ), {, throw, new, MockitoException, (, join, (, "extraInterfaces() accepts only interfaces.", ,]
[}, public, void, extraInterfacesAcceptsOnlyInterfaces, (, Class, <, ?, >, wrongType, ), {, throw, new, MockitoException, (, join, (, "extraInterfaces() accepts only interfaces.", ,]
[void, extraInterfacesAcceptsOnlyInterfaces, (, Class, <, ?, >, wrongType, ), {, throw, new, MockitoException, (, join, (, "extraInterfaces() accepts only interfaces.", ,, "You passed following type: ", +]
[void, extraInterfacesAcceptsOnlyInterfaces, (, Class, <, ?, >, wrongType, ), {, throw, new, MockitoException, (, join, (, "extraInterfaces() accepts only interfaces.", ,, "You passed following type: ", +]
[>, wrongType, ), {, throw, new, MockitoException, (, join, (, "extraInterfaces() accepts only interfaces.", ,, "You passed following type: ", +, wrongType, ., getSimpleName, (, ), +]
[(, ), +, " which is not an interface.", ), ), ;, }, public, void, extraInterfacesCannotContainMockedType, (, Class, <, ?, >, wrongType, ), {, throw]
[" which is not an interface.", ), ), ;, }, public, void, extraInterfacesCannotContainMockedType, (, Class, <, ?, >, wrongType, ), {, throw, new, MockitoException, (]
[), ;, }, public, void, extraInterfacesCannotContainMockedType, (, Class, <, ?, >, wrongType, ), {, throw, new, MockitoException, (, join, (]
[}, public, void, extraInterfacesCannotContainMockedType, (, Class, <, ?, >, wrongType, ), {, throw, new, MockitoException, (, join, (, "extraInterfaces() does not accept the same type as the mocked type.", ,]
[}, public, void, extraInterfacesCannotContainMockedType, (, Class, <, ?, >, wrongType, ), {, throw, new, MockitoException, (, join, (, "extraInterfaces() does not accept the same type as the mocked type.", ,]
[void, extraInterfacesCannotContainMockedType, (, Class, <, ?, >, wrongType, ), {, throw, new, MockitoException, (, join, (, "extraInterfaces() does not accept the same type as the mocked type.", ,, "You mocked following type: ", +]
[void, extraInterfacesCannotContainMockedType, (, Class, <, ?, >, wrongType, ), {, throw, new, MockitoException, (, join, (, "extraInterfaces() does not accept the same type as the mocked type.", ,, "You mocked following type: ", +]
[>, wrongType, ), {, throw, new, MockitoException, (, join, (, "extraInterfaces() does not accept the same type as the mocked type.", ,, "You mocked following type: ", +, wrongType, ., getSimpleName, (, ), ,]
["You mocked following type: ", +, wrongType, ., getSimpleName, (, ), ,, "and you passed the same very interface to the extraInterfaces()", ), ), ;, }, public, void, extraInterfacesRequiresAtLeastOneInterface, (, ), {, throw]
[., getSimpleName, (, ), ,, "and you passed the same very interface to the extraInterfaces()", ), ), ;, }, public, void, extraInterfacesRequiresAtLeastOneInterface, (, ), {, throw, new, MockitoException, (]
[(, ), ,, "and you passed the same very interface to the extraInterfaces()", ), ), ;, }, public, void, extraInterfacesRequiresAtLeastOneInterface, (, ), {, throw, new, MockitoException, (, join, (]
["extraInterfaces() requires at least one interface.", ), ), ;, }, public, void, mockedTypeIsInconsistentWithSpiedInstanceType, (, Class, <, ?, >, mockedType, ,, Object, spiedInstance, ), {, throw]
[;, }, public, void, mockedTypeIsInconsistentWithSpiedInstanceType, (, Class, <, ?, >, mockedType, ,, Object, spiedInstance, ), {, throw, new, MockitoException, (]
[public, void, mockedTypeIsInconsistentWithSpiedInstanceType, (, Class, <, ?, >, mockedType, ,, Object, spiedInstance, ), {, throw, new, MockitoException, (, join, (]
[mockedTypeIsInconsistentWithSpiedInstanceType, (, Class, <, ?, >, mockedType, ,, Object, spiedInstance, ), {, throw, new, MockitoException, (, join, (, "Mocked type must be the same as the type of your spied instance.", ,]
[mockedTypeIsInconsistentWithSpiedInstanceType, (, Class, <, ?, >, mockedType, ,, Object, spiedInstance, ), {, throw, new, MockitoException, (, join, (, "Mocked type must be the same as the type of your spied instance.", ,]
[mockedTypeIsInconsistentWithSpiedInstanceType, (, Class, <, ?, >, mockedType, ,, Object, spiedInstance, ), {, throw, new, MockitoException, (, join, (, "Mocked type must be the same as the type of your spied instance.", ,]
[mockedTypeIsInconsistentWithSpiedInstanceType, (, Class, <, ?, >, mockedType, ,, Object, spiedInstance, ), {, throw, new, MockitoException, (, join, (, "Mocked type must be the same as the type of your spied instance.", ,]
[Class, <, ?, >, mockedType, ,, Object, spiedInstance, ), {, throw, new, MockitoException, (, join, (, "Mocked type must be the same as the type of your spied instance.", ,, "Mocked type must be: ", +]
[Class, <, ?, >, mockedType, ,, Object, spiedInstance, ), {, throw, new, MockitoException, (, join, (, "Mocked type must be the same as the type of your spied instance.", ,, "Mocked type must be: ", +]
[Class, <, ?, >, mockedType, ,, Object, spiedInstance, ), {, throw, new, MockitoException, (, join, (, "Mocked type must be the same as the type of your spied instance.", ,, "Mocked type must be: ", +]
[throw, new, MockitoException, (, join, (, "Mocked type must be the same as the type of your spied instance.", ,, "Mocked type must be: ", +, spiedInstance, ., getClass, (, ), ., getSimpleName, (, ), +]
[MockitoException, (, join, (, "Mocked type must be the same as the type of your spied instance.", ,, "Mocked type must be: ", +, spiedInstance, ., getClass, (, ), ., getSimpleName, (, ), +, ", but is: ", +]
[MockitoException, (, join, (, "Mocked type must be the same as the type of your spied instance.", ,, "Mocked type must be: ", +, spiedInstance, ., getClass, (, ), ., getSimpleName, (, ), +, ", but is: ", +]
["Mocked type must be: ", +, spiedInstance, ., getClass, (, ), ., getSimpleName, (, ), +, ", but is: ", +, mockedType, ., getSimpleName, (, ), ,]
[spiedInstance, ., getClass, (, ), ., getSimpleName, (, ), +, ", but is: ", +, mockedType, ., getSimpleName, (, ), ,, "  //correct spying:", ,]
[getClass, (, ), ., getSimpleName, (, ), +, ", but is: ", +, mockedType, ., getSimpleName, (, ), ,, "  //correct spying:", ,, "  spy = mock( ->ArrayList.class<- , withSettings().spiedInstance( ->new ArrayList()<- );", ,]
[), ., getSimpleName, (, ), +, ", but is: ", +, mockedType, ., getSimpleName, (, ), ,, "  //correct spying:", ,, "  spy = mock( ->ArrayList.class<- , withSettings().spiedInstance( ->new ArrayList()<- );", ,, "  //incorrect - types don't match:", ,]
[), ,, "  //correct spying:", ,, "  spy = mock( ->ArrayList.class<- , withSettings().spiedInstance( ->new ArrayList()<- );", ,, "  //incorrect - types don't match:", ,, "  spy = mock( ->List.class<- , withSettings().spiedInstance( ->new ArrayList()<- );", ), ), ;, }, public, void, cannotCallAbstractRealMethod, (, ), {, throw]
[,, "  spy = mock( ->ArrayList.class<- , withSettings().spiedInstance( ->new ArrayList()<- );", ,, "  //incorrect - types don't match:", ,, "  spy = mock( ->List.class<- , withSettings().spiedInstance( ->new ArrayList()<- );", ), ), ;, }, public, void, cannotCallAbstractRealMethod, (, ), {, throw, new, MockitoException, (]
[,, "  //incorrect - types don't match:", ,, "  spy = mock( ->List.class<- , withSettings().spiedInstance( ->new ArrayList()<- );", ), ), ;, }, public, void, cannotCallAbstractRealMethod, (, ), {, throw, new, MockitoException, (, join, (]
[,, "  spy = mock( ->List.class<- , withSettings().spiedInstance( ->new ArrayList()<- );", ), ), ;, }, public, void, cannotCallAbstractRealMethod, (, ), {, throw, new, MockitoException, (, join, (, "Cannot call abstract real method on java object!", ,]
[), ), ;, }, public, void, cannotCallAbstractRealMethod, (, ), {, throw, new, MockitoException, (, join, (, "Cannot call abstract real method on java object!", ,, "Calling real methods is only possible when mocking non abstract method.", ,]
[;, }, public, void, cannotCallAbstractRealMethod, (, ), {, throw, new, MockitoException, (, join, (, "Cannot call abstract real method on java object!", ,, "Calling real methods is only possible when mocking non abstract method.", ,, "  //correct example:", ,]
[join, (, "Cannot call abstract real method on java object!", ,, "Calling real methods is only possible when mocking non abstract method.", ,, "  //correct example:", ,, "  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();", ), ), ;, }, public, void, cannotVerifyToString, (, ), {, throw]
[,, "Calling real methods is only possible when mocking non abstract method.", ,, "  //correct example:", ,, "  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();", ), ), ;, }, public, void, cannotVerifyToString, (, ), {, throw, new, MockitoException, (]
[,, "  //correct example:", ,, "  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();", ), ), ;, }, public, void, cannotVerifyToString, (, ), {, throw, new, MockitoException, (, join, (]
[,, "  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();", ), ), ;, }, public, void, cannotVerifyToString, (, ), {, throw, new, MockitoException, (, join, (, "Mockito cannot verify toString()", ,]
[,, "  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();", ), ), ;, }, public, void, cannotVerifyToString, (, ), {, throw, new, MockitoException, (, join, (, "Mockito cannot verify toString()", ,]
[,, "  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();", ), ), ;, }, public, void, cannotVerifyToString, (, ), {, throw, new, MockitoException, (, join, (, "Mockito cannot verify toString()", ,]
[), ), ;, }, public, void, cannotVerifyToString, (, ), {, throw, new, MockitoException, (, join, (, "Mockito cannot verify toString()", ,, "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). ", +]
[;, }, public, void, cannotVerifyToString, (, ), {, throw, new, MockitoException, (, join, (, "Mockito cannot verify toString()", ,, "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). ", +, "Verifying it may give inconsistent or hard to understand results. ", +]
[public, void, cannotVerifyToString, (, ), {, throw, new, MockitoException, (, join, (, "Mockito cannot verify toString()", ,, "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). ", +, "Verifying it may give inconsistent or hard to understand results. ", +, "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)", ,]
["toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). ", +, "Verifying it may give inconsistent or hard to understand results. ", +, "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)", ,, "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases.", ), ), ;, }, public, void, moreThanOneAnnotationNotAllowed, (, String, fieldName, ), {, throw]
[+, "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)", ,, "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases.", ), ), ;, }, public, void, moreThanOneAnnotationNotAllowed, (, String, fieldName, ), {, throw, new, MockitoException, (]
[+, "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)", ,, "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases.", ), ), ;, }, public, void, moreThanOneAnnotationNotAllowed, (, String, fieldName, ), {, throw, new, MockitoException, (]
[+, "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)", ,, "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases.", ), ), ;, }, public, void, moreThanOneAnnotationNotAllowed, (, String, fieldName, ), {, throw, new, MockitoException, (]
[+, "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)", ,, "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases.", ), ), ;, }, public, void, moreThanOneAnnotationNotAllowed, (, String, fieldName, ), {, throw, new, MockitoException, (]
[+, "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)", ,, "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases.", ), ), ;, }, public, void, moreThanOneAnnotationNotAllowed, (, String, fieldName, ), {, throw, new, MockitoException, (]
[,, "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases.", ), ), ;, }, public, void, moreThanOneAnnotationNotAllowed, (, String, fieldName, ), {, throw, new, MockitoException, (, "You cannot have more than one Mockito annotation on a field!\n", +]
[), ), ;, }, public, void, moreThanOneAnnotationNotAllowed, (, String, fieldName, ), {, throw, new, MockitoException, (, "You cannot have more than one Mockito annotation on a field!\n", +, "The field '", +]
[;, }, public, void, moreThanOneAnnotationNotAllowed, (, String, fieldName, ), {, throw, new, MockitoException, (, "You cannot have more than one Mockito annotation on a field!\n", +, "The field '", +, fieldName, +]
[public, void, moreThanOneAnnotationNotAllowed, (, String, fieldName, ), {, throw, new, MockitoException, (, "You cannot have more than one Mockito annotation on a field!\n", +, "The field '", +, fieldName, +, "' has multiple Mockito annotations.\n", +]
[fieldName, +, "' has multiple Mockito annotations.\n", +, "For info how to use annotations see examples in javadoc for MockitoAnnotations class.", ), ;, }, public, void, unsupportedCombinationOfAnnotations, (, String, undesiredAnnotationOne, ,, String, undesiredAnnotationTwo, ), {, throw]
[+, "For info how to use annotations see examples in javadoc for MockitoAnnotations class.", ), ;, }, public, void, unsupportedCombinationOfAnnotations, (, String, undesiredAnnotationOne, ,, String, undesiredAnnotationTwo, ), {, throw, new, MockitoException, (]
[+, "For info how to use annotations see examples in javadoc for MockitoAnnotations class.", ), ;, }, public, void, unsupportedCombinationOfAnnotations, (, String, undesiredAnnotationOne, ,, String, undesiredAnnotationTwo, ), {, throw, new, MockitoException, (]
[+, "For info how to use annotations see examples in javadoc for MockitoAnnotations class.", ), ;, }, public, void, unsupportedCombinationOfAnnotations, (, String, undesiredAnnotationOne, ,, String, undesiredAnnotationTwo, ), {, throw, new, MockitoException, (]
[+, "For info how to use annotations see examples in javadoc for MockitoAnnotations class.", ), ;, }, public, void, unsupportedCombinationOfAnnotations, (, String, undesiredAnnotationOne, ,, String, undesiredAnnotationTwo, ), {, throw, new, MockitoException, (]
[+, "For info how to use annotations see examples in javadoc for MockitoAnnotations class.", ), ;, }, public, void, unsupportedCombinationOfAnnotations, (, String, undesiredAnnotationOne, ,, String, undesiredAnnotationTwo, ), {, throw, new, MockitoException, (]
[), ;, }, public, void, unsupportedCombinationOfAnnotations, (, String, undesiredAnnotationOne, ,, String, undesiredAnnotationTwo, ), {, throw, new, MockitoException, (, "This combination of annotations is not permitted on a single field:\n", +]
[}, public, void, unsupportedCombinationOfAnnotations, (, String, undesiredAnnotationOne, ,, String, undesiredAnnotationTwo, ), {, throw, new, MockitoException, (, "This combination of annotations is not permitted on a single field:\n", +, "@", +]
[void, unsupportedCombinationOfAnnotations, (, String, undesiredAnnotationOne, ,, String, undesiredAnnotationTwo, ), {, throw, new, MockitoException, (, "This combination of annotations is not permitted on a single field:\n", +, "@", +, undesiredAnnotationOne, +]
[(, String, undesiredAnnotationOne, ,, String, undesiredAnnotationTwo, ), {, throw, new, MockitoException, (, "This combination of annotations is not permitted on a single field:\n", +, "@", +, undesiredAnnotationOne, +, " and @", +]
[undesiredAnnotationOne, +, " and @", +, undesiredAnnotationTwo, ), ;, }, public, void, cannotInitializeForSpyAnnotation, (, String, fieldName, ,, Exception, details, ), {, throw]
[+, undesiredAnnotationTwo, ), ;, }, public, void, cannotInitializeForSpyAnnotation, (, String, fieldName, ,, Exception, details, ), {, throw, new, MockitoException, (]
[), ;, }, public, void, cannotInitializeForSpyAnnotation, (, String, fieldName, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (]
[), ;, }, public, void, cannotInitializeForSpyAnnotation, (, String, fieldName, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (]
[), ;, }, public, void, cannotInitializeForSpyAnnotation, (, String, fieldName, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (]
[}, public, void, cannotInitializeForSpyAnnotation, (, String, fieldName, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (, "Cannot instantiate a @Spy for '", +]
[void, cannotInitializeForSpyAnnotation, (, String, fieldName, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (, "Cannot instantiate a @Spy for '", +, fieldName, +]
[(, String, fieldName, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (, "Cannot instantiate a @Spy for '", +, fieldName, +, "' field.", ,]
[fieldName, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (, "Cannot instantiate a @Spy for '", +, fieldName, +, "' field.", ,, "You haven't provided the instance for spying at field declaration so I tried to construct the instance.", ,]
[fieldName, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (, "Cannot instantiate a @Spy for '", +, fieldName, +, "' field.", ,, "You haven't provided the instance for spying at field declaration so I tried to construct the instance.", ,]
[Exception, details, ), {, throw, new, MockitoException, (, join, (, "Cannot instantiate a @Spy for '", +, fieldName, +, "' field.", ,, "You haven't provided the instance for spying at field declaration so I tried to construct the instance.", ,, "However, I failed because: ", +]
[Exception, details, ), {, throw, new, MockitoException, (, join, (, "Cannot instantiate a @Spy for '", +, fieldName, +, "' field.", ,, "You haven't provided the instance for spying at field declaration so I tried to construct the instance.", ,, "However, I failed because: ", +]
[MockitoException, (, join, (, "Cannot instantiate a @Spy for '", +, fieldName, +, "' field.", ,, "You haven't provided the instance for spying at field declaration so I tried to construct the instance.", ,, "However, I failed because: ", +, details, ., getMessage, (, ), ,]
[join, (, "Cannot instantiate a @Spy for '", +, fieldName, +, "' field.", ,, "You haven't provided the instance for spying at field declaration so I tried to construct the instance.", ,, "However, I failed because: ", +, details, ., getMessage, (, ), ,, "Examples of correct usage of @Spy:", ,]
["Cannot instantiate a @Spy for '", +, fieldName, +, "' field.", ,, "You haven't provided the instance for spying at field declaration so I tried to construct the instance.", ,, "However, I failed because: ", +, details, ., getMessage, (, ), ,, "Examples of correct usage of @Spy:", ,, "   @Spy List mock = new LinkedList();", ,]
[fieldName, +, "' field.", ,, "You haven't provided the instance for spying at field declaration so I tried to construct the instance.", ,, "However, I failed because: ", +, details, ., getMessage, (, ), ,, "Examples of correct usage of @Spy:", ,, "   @Spy List mock = new LinkedList();", ,, "   @Spy Foo foo; //only if Foo has parameterless constructor", ,]
["' field.", ,, "You haven't provided the instance for spying at field declaration so I tried to construct the instance.", ,, "However, I failed because: ", +, details, ., getMessage, (, ), ,, "Examples of correct usage of @Spy:", ,, "   @Spy List mock = new LinkedList();", ,, "   @Spy Foo foo; //only if Foo has parameterless constructor", ,, "   //also, don't forget about MockitoAnnotations.initMocks();", ,]
[,, "However, I failed because: ", +, details, ., getMessage, (, ), ,, "Examples of correct usage of @Spy:", ,, "   @Spy List mock = new LinkedList();", ,, "   @Spy Foo foo; //only if Foo has parameterless constructor", ,, "   //also, don't forget about MockitoAnnotations.initMocks();", ,, "", ), ,]
[,, "", ), ,, details, ), ;, }, public, void, cannotInitializeForInjectMocksAnnotation, (, String, fieldName, ,, Exception, details, ), {, throw]
[,, details, ), ;, }, public, void, cannotInitializeForInjectMocksAnnotation, (, String, fieldName, ,, Exception, details, ), {, throw, new, MockitoException, (]
[), ;, }, public, void, cannotInitializeForInjectMocksAnnotation, (, String, fieldName, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (]
[), ;, }, public, void, cannotInitializeForInjectMocksAnnotation, (, String, fieldName, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (]
[), ;, }, public, void, cannotInitializeForInjectMocksAnnotation, (, String, fieldName, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (]
[}, public, void, cannotInitializeForInjectMocksAnnotation, (, String, fieldName, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (, "Cannot instantiate @InjectMocks field named '", +]
[void, cannotInitializeForInjectMocksAnnotation, (, String, fieldName, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (, "Cannot instantiate @InjectMocks field named '", +, fieldName, +]
[(, String, fieldName, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (, "Cannot instantiate @InjectMocks field named '", +, fieldName, +, "'.", ,]
[fieldName, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (, "Cannot instantiate @InjectMocks field named '", +, fieldName, +, "'.", ,, "You haven't provided the instance at field declaration so I tried to construct the instance.", ,]
[fieldName, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (, "Cannot instantiate @InjectMocks field named '", +, fieldName, +, "'.", ,, "You haven't provided the instance at field declaration so I tried to construct the instance.", ,]
[Exception, details, ), {, throw, new, MockitoException, (, join, (, "Cannot instantiate @InjectMocks field named '", +, fieldName, +, "'.", ,, "You haven't provided the instance at field declaration so I tried to construct the instance.", ,, "However, I failed because: ", +]
[Exception, details, ), {, throw, new, MockitoException, (, join, (, "Cannot instantiate @InjectMocks field named '", +, fieldName, +, "'.", ,, "You haven't provided the instance at field declaration so I tried to construct the instance.", ,, "However, I failed because: ", +]
[MockitoException, (, join, (, "Cannot instantiate @InjectMocks field named '", +, fieldName, +, "'.", ,, "You haven't provided the instance at field declaration so I tried to construct the instance.", ,, "However, I failed because: ", +, details, ., getMessage, (, ), ,]
[join, (, "Cannot instantiate @InjectMocks field named '", +, fieldName, +, "'.", ,, "You haven't provided the instance at field declaration so I tried to construct the instance.", ,, "However, I failed because: ", +, details, ., getMessage, (, ), ,, "Examples of correct usage of @InjectMocks:", ,]
["Cannot instantiate @InjectMocks field named '", +, fieldName, +, "'.", ,, "You haven't provided the instance at field declaration so I tried to construct the instance.", ,, "However, I failed because: ", +, details, ., getMessage, (, ), ,, "Examples of correct usage of @InjectMocks:", ,, "   @InjectMocks Service service = new Service();", ,]
[fieldName, +, "'.", ,, "You haven't provided the instance at field declaration so I tried to construct the instance.", ,, "However, I failed because: ", +, details, ., getMessage, (, ), ,, "Examples of correct usage of @InjectMocks:", ,, "   @InjectMocks Service service = new Service();", ,, "   @InjectMocks Service service;", ,]
["'.", ,, "You haven't provided the instance at field declaration so I tried to construct the instance.", ,, "However, I failed because: ", +, details, ., getMessage, (, ), ,, "Examples of correct usage of @InjectMocks:", ,, "   @InjectMocks Service service = new Service();", ,, "   @InjectMocks Service service;", ,, "   //also, don't forget about MockitoAnnotations.initMocks();", ,]
["You haven't provided the instance at field declaration so I tried to construct the instance.", ,, "However, I failed because: ", +, details, ., getMessage, (, ), ,, "Examples of correct usage of @InjectMocks:", ,, "   @InjectMocks Service service = new Service();", ,, "   @InjectMocks Service service;", ,, "   //also, don't forget about MockitoAnnotations.initMocks();", ,, "   //and... don't forget about some @Mocks for injection :)", ,]
[+, details, ., getMessage, (, ), ,, "Examples of correct usage of @InjectMocks:", ,, "   @InjectMocks Service service = new Service();", ,, "   @InjectMocks Service service;", ,, "   //also, don't forget about MockitoAnnotations.initMocks();", ,, "   //and... don't forget about some @Mocks for injection :)", ,, "", ), ,]
["   @InjectMocks Service service;", ,, "   //also, don't forget about MockitoAnnotations.initMocks();", ,, "   //and... don't forget about some @Mocks for injection :)", ,, "", ), ,, details, ), ;, }, public, void, atMostAndNeverShouldNotBeUsedWithTimeout, (, ), {, throw]
[,, "   //and... don't forget about some @Mocks for injection :)", ,, "", ), ,, details, ), ;, }, public, void, atMostAndNeverShouldNotBeUsedWithTimeout, (, ), {, throw, new, FriendlyReminderException, (]
[,, "", ), ,, details, ), ;, }, public, void, atMostAndNeverShouldNotBeUsedWithTimeout, (, ), {, throw, new, FriendlyReminderException, (, join, (]
[), ,, details, ), ;, }, public, void, atMostAndNeverShouldNotBeUsedWithTimeout, (, ), {, throw, new, FriendlyReminderException, (, join, (, "", ,]
[details, ), ;, }, public, void, atMostAndNeverShouldNotBeUsedWithTimeout, (, ), {, throw, new, FriendlyReminderException, (, join, (, "", ,, "Don't panic! I'm just a friendly reminder!", ,]
[;, }, public, void, atMostAndNeverShouldNotBeUsedWithTimeout, (, ), {, throw, new, FriendlyReminderException, (, join, (, "", ,, "Don't panic! I'm just a friendly reminder!", ,, "timeout() should not be used with atMost() or never() because...", ,]
[public, void, atMostAndNeverShouldNotBeUsedWithTimeout, (, ), {, throw, new, FriendlyReminderException, (, join, (, "", ,, "Don't panic! I'm just a friendly reminder!", ,, "timeout() should not be used with atMost() or never() because...", ,, "...it does not make much sense - the test would have passed immediately in concurency", ,]
[atMostAndNeverShouldNotBeUsedWithTimeout, (, ), {, throw, new, FriendlyReminderException, (, join, (, "", ,, "Don't panic! I'm just a friendly reminder!", ,, "timeout() should not be used with atMost() or never() because...", ,, "...it does not make much sense - the test would have passed immediately in concurency", ,, "We kept this method only to avoid compilation errors when upgrading Mockito.", ,]
[), {, throw, new, FriendlyReminderException, (, join, (, "", ,, "Don't panic! I'm just a friendly reminder!", ,, "timeout() should not be used with atMost() or never() because...", ,, "...it does not make much sense - the test would have passed immediately in concurency", ,, "We kept this method only to avoid compilation errors when upgrading Mockito.", ,, "In future release we will remove timeout(x).atMost(y) from the API.", ,]
[throw, new, FriendlyReminderException, (, join, (, "", ,, "Don't panic! I'm just a friendly reminder!", ,, "timeout() should not be used with atMost() or never() because...", ,, "...it does not make much sense - the test would have passed immediately in concurency", ,, "We kept this method only to avoid compilation errors when upgrading Mockito.", ,, "In future release we will remove timeout(x).atMost(y) from the API.", ,, "If you want to find out more please refer to issue 235", ,]
[,, "If you want to find out more please refer to issue 235", ,, "", ), ), ;, }, public, void, fieldInitialisationThrewException, (, Field, field, ,, Throwable, details, ), {, throw]
["", ), ), ;, }, public, void, fieldInitialisationThrewException, (, Field, field, ,, Throwable, details, ), {, throw, new, MockitoException, (]
[), ;, }, public, void, fieldInitialisationThrewException, (, Field, field, ,, Throwable, details, ), {, throw, new, MockitoException, (, join, (]
[), ;, }, public, void, fieldInitialisationThrewException, (, Field, field, ,, Throwable, details, ), {, throw, new, MockitoException, (, join, (]
[), ;, }, public, void, fieldInitialisationThrewException, (, Field, field, ,, Throwable, details, ), {, throw, new, MockitoException, (, join, (]
[), ;, }, public, void, fieldInitialisationThrewException, (, Field, field, ,, Throwable, details, ), {, throw, new, MockitoException, (, join, (]
[), ;, }, public, void, fieldInitialisationThrewException, (, Field, field, ,, Throwable, details, ), {, throw, new, MockitoException, (, join, (]
[}, public, void, fieldInitialisationThrewException, (, Field, field, ,, Throwable, details, ), {, throw, new, MockitoException, (, join, (, "Cannot instantiate @InjectMocks field named '", +]
[}, public, void, fieldInitialisationThrewException, (, Field, field, ,, Throwable, details, ), {, throw, new, MockitoException, (, join, (, "Cannot instantiate @InjectMocks field named '", +]
[field, ,, Throwable, details, ), {, throw, new, MockitoException, (, join, (, "Cannot instantiate @InjectMocks field named '", +, field, ., getName, (, ), +]
[Throwable, details, ), {, throw, new, MockitoException, (, join, (, "Cannot instantiate @InjectMocks field named '", +, field, ., getName, (, ), +, "' of type '", +]
[Throwable, details, ), {, throw, new, MockitoException, (, join, (, "Cannot instantiate @InjectMocks field named '", +, field, ., getName, (, ), +, "' of type '", +]
[MockitoException, (, join, (, "Cannot instantiate @InjectMocks field named '", +, field, ., getName, (, ), +, "' of type '", +, field, ., getType, (, ), +]
[join, (, "Cannot instantiate @InjectMocks field named '", +, field, ., getName, (, ), +, "' of type '", +, field, ., getType, (, ), +, "'.", ,]
["Cannot instantiate @InjectMocks field named '", +, field, ., getName, (, ), +, "' of type '", +, field, ., getType, (, ), +, "'.", ,, "You haven't provided the instance at field declaration so I tried to construct the instance.", ,]
["Cannot instantiate @InjectMocks field named '", +, field, ., getName, (, ), +, "' of type '", +, field, ., getType, (, ), +, "'.", ,, "You haven't provided the instance at field declaration so I tried to construct the instance.", ,]
[field, ., getName, (, ), +, "' of type '", +, field, ., getType, (, ), +, "'.", ,, "You haven't provided the instance at field declaration so I tried to construct the instance.", ,, "However the constructor or the initialization block threw an exception : ", +]
[field, ., getName, (, ), +, "' of type '", +, field, ., getType, (, ), +, "'.", ,, "You haven't provided the instance at field declaration so I tried to construct the instance.", ,, "However the constructor or the initialization block threw an exception : ", +]
["' of type '", +, field, ., getType, (, ), +, "'.", ,, "You haven't provided the instance at field declaration so I tried to construct the instance.", ,, "However the constructor or the initialization block threw an exception : ", +, details, ., getMessage, (, ), ,]
[., getType, (, ), +, "'.", ,, "You haven't provided the instance at field declaration so I tried to construct the instance.", ,, "However the constructor or the initialization block threw an exception : ", +, details, ., getMessage, (, ), ,, "", ), ,]
[details, ., getMessage, (, ), ,, "", ), ,, details, ), ;, }, public, void, invocationListenerDoesNotAcceptNullParameters, (, ), {, throw]
[(, ), ,, "", ), ,, details, ), ;, }, public, void, invocationListenerDoesNotAcceptNullParameters, (, ), {, throw, new, MockitoException, (]
[void, invocationListenerDoesNotAcceptNullParameters, (, ), {, throw, new, MockitoException, (, "invocationListeners() does not accept null parameters", ), ;, }, public, void, invocationListenersRequiresAtLeastOneListener, (, ), {, throw]
[), {, throw, new, MockitoException, (, "invocationListeners() does not accept null parameters", ), ;, }, public, void, invocationListenersRequiresAtLeastOneListener, (, ), {, throw, new, MockitoException, (]
[throw, new, MockitoException, (, "invocationListeners() requires at least one listener", ), ;, }, public, void, invocationListenerThrewException, (, InvocationListener, listener, ,, Throwable, listenerThrowable, ), {, throw]
[(, "invocationListeners() requires at least one listener", ), ;, }, public, void, invocationListenerThrewException, (, InvocationListener, listener, ,, Throwable, listenerThrowable, ), {, throw, new, MockitoException, (]
[(, "invocationListeners() requires at least one listener", ), ;, }, public, void, invocationListenerThrewException, (, InvocationListener, listener, ,, Throwable, listenerThrowable, ), {, throw, new, MockitoException, (]
[}, public, void, invocationListenerThrewException, (, InvocationListener, listener, ,, Throwable, listenerThrowable, ), {, throw, new, MockitoException, (, StringJoiner, ., join, (]
[}, public, void, invocationListenerThrewException, (, InvocationListener, listener, ,, Throwable, listenerThrowable, ), {, throw, new, MockitoException, (, StringJoiner, ., join, (]
[void, invocationListenerThrewException, (, InvocationListener, listener, ,, Throwable, listenerThrowable, ), {, throw, new, MockitoException, (, StringJoiner, ., join, (, "The invocation listener with type ", +]
[void, invocationListenerThrewException, (, InvocationListener, listener, ,, Throwable, listenerThrowable, ), {, throw, new, MockitoException, (, StringJoiner, ., join, (, "The invocation listener with type ", +]
[void, invocationListenerThrewException, (, InvocationListener, listener, ,, Throwable, listenerThrowable, ), {, throw, new, MockitoException, (, StringJoiner, ., join, (, "The invocation listener with type ", +]
[throw, new, MockitoException, (, StringJoiner, ., join, (, "The invocation listener with type ", +, listener, ., getClass, (, ), ., getName, (, ), ,]
[throw, new, MockitoException, (, StringJoiner, ., join, (, "The invocation listener with type ", +, listener, ., getClass, (, ), ., getName, (, ), ,]
[throw, new, MockitoException, (, StringJoiner, ., join, (, "The invocation listener with type ", +, listener, ., getClass, (, ), ., getName, (, ), ,]
[MockitoException, (, StringJoiner, ., join, (, "The invocation listener with type ", +, listener, ., getClass, (, ), ., getName, (, ), ,, "threw an exception : ", +]
[MockitoException, (, StringJoiner, ., join, (, "The invocation listener with type ", +, listener, ., getClass, (, ), ., getName, (, ), ,, "threw an exception : ", +]
[MockitoException, (, StringJoiner, ., join, (, "The invocation listener with type ", +, listener, ., getClass, (, ), ., getName, (, ), ,, "threw an exception : ", +]
[getClass, (, ), ., getName, (, ), ,, "threw an exception : ", +, listenerThrowable, ., getClass, (, ), ., getName, (, ), +]
[getClass, (, ), ., getName, (, ), ,, "threw an exception : ", +, listenerThrowable, ., getClass, (, ), ., getName, (, ), +]
[,, "threw an exception : ", +, listenerThrowable, ., getClass, (, ), ., getName, (, ), +, listenerThrowable, ., getMessage, (, ), ), ,]
[,, listenerThrowable, ), ;, }, public, void, cannotInjectDependency, (, Field, field, ,, Object, matchingMock, ,, Exception, details, ), {, throw]
[;, }, public, void, cannotInjectDependency, (, Field, field, ,, Object, matchingMock, ,, Exception, details, ), {, throw, new, MockitoException, (]
[public, void, cannotInjectDependency, (, Field, field, ,, Object, matchingMock, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (]
[public, void, cannotInjectDependency, (, Field, field, ,, Object, matchingMock, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (]
[public, void, cannotInjectDependency, (, Field, field, ,, Object, matchingMock, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (]
[cannotInjectDependency, (, Field, field, ,, Object, matchingMock, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (, "Mockito couldn't inject mock dependency '", +]
[Field, field, ,, Object, matchingMock, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (, "Mockito couldn't inject mock dependency '", +, safelyGetMockName, (]
[Object, matchingMock, ,, Exception, details, ), {, throw, new, MockitoException, (, join, (, "Mockito couldn't inject mock dependency '", +, safelyGetMockName, (, matchingMock, ), +]
[,, Exception, details, ), {, throw, new, MockitoException, (, join, (, "Mockito couldn't inject mock dependency '", +, safelyGetMockName, (, matchingMock, ), +, "' on field ", ,]
[,, Exception, details, ), {, throw, new, MockitoException, (, join, (, "Mockito couldn't inject mock dependency '", +, safelyGetMockName, (, matchingMock, ), +, "' on field ", ,]
[,, Exception, details, ), {, throw, new, MockitoException, (, join, (, "Mockito couldn't inject mock dependency '", +, safelyGetMockName, (, matchingMock, ), +, "' on field ", ,]
[details, ), {, throw, new, MockitoException, (, join, (, "Mockito couldn't inject mock dependency '", +, safelyGetMockName, (, matchingMock, ), +, "' on field ", ,, "'", +]
[{, throw, new, MockitoException, (, join, (, "Mockito couldn't inject mock dependency '", +, safelyGetMockName, (, matchingMock, ), +, "' on field ", ,, "'", +, field, +]
[new, MockitoException, (, join, (, "Mockito couldn't inject mock dependency '", +, safelyGetMockName, (, matchingMock, ), +, "' on field ", ,, "'", +, field, +, "'", ,]
[new, MockitoException, (, join, (, "Mockito couldn't inject mock dependency '", +, safelyGetMockName, (, matchingMock, ), +, "' on field ", ,, "'", +, field, +, "'", ,]
[new, MockitoException, (, join, (, "Mockito couldn't inject mock dependency '", +, safelyGetMockName, (, matchingMock, ), +, "' on field ", ,, "'", +, field, +, "'", ,]
[(, join, (, "Mockito couldn't inject mock dependency '", +, safelyGetMockName, (, matchingMock, ), +, "' on field ", ,, "'", +, field, +, "'", ,, "whose type '", +]
[(, join, (, "Mockito couldn't inject mock dependency '", +, safelyGetMockName, (, matchingMock, ), +, "' on field ", ,, "'", +, field, +, "'", ,, "whose type '", +]
[(, join, (, "Mockito couldn't inject mock dependency '", +, safelyGetMockName, (, matchingMock, ), +, "' on field ", ,, "'", +, field, +, "'", ,, "whose type '", +]
["' on field ", ,, "'", +, field, +, "'", ,, "whose type '", +, field, ., getDeclaringClass, (, ), ., getCanonicalName, (, ), +]
["'", +, field, +, "'", ,, "whose type '", +, field, ., getDeclaringClass, (, ), ., getCanonicalName, (, ), +, "' was annotated by @InjectMocks in your test.", ,]
["'", +, field, +, "'", ,, "whose type '", +, field, ., getDeclaringClass, (, ), ., getCanonicalName, (, ), +, "' was annotated by @InjectMocks in your test.", ,]
[field, +, "'", ,, "whose type '", +, field, ., getDeclaringClass, (, ), ., getCanonicalName, (, ), +, "' was annotated by @InjectMocks in your test.", ,, "Also I failed because: ", +]
["'", ,, "whose type '", +, field, ., getDeclaringClass, (, ), ., getCanonicalName, (, ), +, "' was annotated by @InjectMocks in your test.", ,, "Also I failed because: ", +, exceptionCauseMessageIfAvailable, (]
[+, field, ., getDeclaringClass, (, ), ., getCanonicalName, (, ), +, "' was annotated by @InjectMocks in your test.", ,, "Also I failed because: ", +, exceptionCauseMessageIfAvailable, (, details, ), ,]
[getDeclaringClass, (, ), ., getCanonicalName, (, ), +, "' was annotated by @InjectMocks in your test.", ,, "Also I failed because: ", +, exceptionCauseMessageIfAvailable, (, details, ), ,, "", ), ,]
[details, ), ,, "", ), ,, details, ), ;, }, private, String, exceptionCauseMessageIfAvailable, (, Exception, details, ), {, if, (]
[details, ), ,, "", ), ,, details, ), ;, }, private, String, exceptionCauseMessageIfAvailable, (, Exception, details, ), {, if, (]
[details, ), ,, "", ), ,, details, ), ;, }, private, String, exceptionCauseMessageIfAvailable, (, Exception, details, ), {, if, (]
[details, ), ;, }, private, String, exceptionCauseMessageIfAvailable, (, Exception, details, ), {, if, (, details, ., getCause, (, ), ==]
[private, String, exceptionCauseMessageIfAvailable, (, Exception, details, ), {, if, (, details, ., getCause, (, ), ==, null, ), {, return]
[private, String, exceptionCauseMessageIfAvailable, (, Exception, details, ), {, if, (, details, ., getCause, (, ), ==, null, ), {, return]
[if, (, details, ., getCause, (, ), ==, null, ), {, return, details, ., getMessage, (, ), ;, }, return]
[if, (, details, ., getCause, (, ), ==, null, ), {, return, details, ., getMessage, (, ), ;, }, return]
[if, (, details, ., getCause, (, ), ==, null, ), {, return, details, ., getMessage, (, ), ;, }, return]
[(, ), ., getMessage, (, ), ;, }, public, void, mockedTypeIsInconsistentWithDelegatedInstanceType, (, Class, mockedType, ,, Object, delegatedInstance, ), {, throw]
[getMessage, (, ), ;, }, public, void, mockedTypeIsInconsistentWithDelegatedInstanceType, (, Class, mockedType, ,, Object, delegatedInstance, ), {, throw, new, MockitoException, (]
[), ;, }, public, void, mockedTypeIsInconsistentWithDelegatedInstanceType, (, Class, mockedType, ,, Object, delegatedInstance, ), {, throw, new, MockitoException, (, join, (]
[}, public, void, mockedTypeIsInconsistentWithDelegatedInstanceType, (, Class, mockedType, ,, Object, delegatedInstance, ), {, throw, new, MockitoException, (, join, (, "Mocked type must be the same as the type of your delegated instance.", ,]
[}, public, void, mockedTypeIsInconsistentWithDelegatedInstanceType, (, Class, mockedType, ,, Object, delegatedInstance, ), {, throw, new, MockitoException, (, join, (, "Mocked type must be the same as the type of your delegated instance.", ,]
[}, public, void, mockedTypeIsInconsistentWithDelegatedInstanceType, (, Class, mockedType, ,, Object, delegatedInstance, ), {, throw, new, MockitoException, (, join, (, "Mocked type must be the same as the type of your delegated instance.", ,]
[}, public, void, mockedTypeIsInconsistentWithDelegatedInstanceType, (, Class, mockedType, ,, Object, delegatedInstance, ), {, throw, new, MockitoException, (, join, (, "Mocked type must be the same as the type of your delegated instance.", ,]
[void, mockedTypeIsInconsistentWithDelegatedInstanceType, (, Class, mockedType, ,, Object, delegatedInstance, ), {, throw, new, MockitoException, (, join, (, "Mocked type must be the same as the type of your delegated instance.", ,, "Mocked type must be: ", +]
[void, mockedTypeIsInconsistentWithDelegatedInstanceType, (, Class, mockedType, ,, Object, delegatedInstance, ), {, throw, new, MockitoException, (, join, (, "Mocked type must be the same as the type of your delegated instance.", ,, "Mocked type must be: ", +]
[void, mockedTypeIsInconsistentWithDelegatedInstanceType, (, Class, mockedType, ,, Object, delegatedInstance, ), {, throw, new, MockitoException, (, join, (, "Mocked type must be the same as the type of your delegated instance.", ,, "Mocked type must be: ", +]
[throw, new, MockitoException, (, join, (, "Mocked type must be the same as the type of your delegated instance.", ,, "Mocked type must be: ", +, delegatedInstance, ., getClass, (, ), ., getSimpleName, (, ), +]
[MockitoException, (, join, (, "Mocked type must be the same as the type of your delegated instance.", ,, "Mocked type must be: ", +, delegatedInstance, ., getClass, (, ), ., getSimpleName, (, ), +, ", but is: ", +]
[MockitoException, (, join, (, "Mocked type must be the same as the type of your delegated instance.", ,, "Mocked type must be: ", +, delegatedInstance, ., getClass, (, ), ., getSimpleName, (, ), +, ", but is: ", +]
["Mocked type must be: ", +, delegatedInstance, ., getClass, (, ), ., getSimpleName, (, ), +, ", but is: ", +, mockedType, ., getSimpleName, (, ), ,]
[delegatedInstance, ., getClass, (, ), ., getSimpleName, (, ), +, ", but is: ", +, mockedType, ., getSimpleName, (, ), ,, "  //correct delegate:", ,]
[getClass, (, ), ., getSimpleName, (, ), +, ", but is: ", +, mockedType, ., getSimpleName, (, ), ,, "  //correct delegate:", ,, "  spy = mock( ->List.class<- , withSettings().delegatedInstance( ->new ArrayList()<- );", ,]
[), ., getSimpleName, (, ), +, ", but is: ", +, mockedType, ., getSimpleName, (, ), ,, "  //correct delegate:", ,, "  spy = mock( ->List.class<- , withSettings().delegatedInstance( ->new ArrayList()<- );", ,, "  //incorrect - types don't match:", ,]
[), ,, "  //correct delegate:", ,, "  spy = mock( ->List.class<- , withSettings().delegatedInstance( ->new ArrayList()<- );", ,, "  //incorrect - types don't match:", ,, "  spy = mock( ->List.class<- , withSettings().delegatedInstance( ->new HashSet()<- );", ), ), ;, }, public, void, spyAndDelegateAreMutuallyExclusive, (, ), {, throw]
[,, "  spy = mock( ->List.class<- , withSettings().delegatedInstance( ->new ArrayList()<- );", ,, "  //incorrect - types don't match:", ,, "  spy = mock( ->List.class<- , withSettings().delegatedInstance( ->new HashSet()<- );", ), ), ;, }, public, void, spyAndDelegateAreMutuallyExclusive, (, ), {, throw, new, MockitoException, (]
[,, "  //incorrect - types don't match:", ,, "  spy = mock( ->List.class<- , withSettings().delegatedInstance( ->new HashSet()<- );", ), ), ;, }, public, void, spyAndDelegateAreMutuallyExclusive, (, ), {, throw, new, MockitoException, (, join, (]
[), {, throw, new, MockitoException, (, join, (, "Settings should not define a spy instance and a delegated instance at the same time.", ), ), ;, }, public, void, invalidArgumentRangeAtIdentityAnswerCreationTime, (, ), {, throw]
[new, MockitoException, (, join, (, "Settings should not define a spy instance and a delegated instance at the same time.", ), ), ;, }, public, void, invalidArgumentRangeAtIdentityAnswerCreationTime, (, ), {, throw, new, MockitoException, (]
[(, join, (, "Settings should not define a spy instance and a delegated instance at the same time.", ), ), ;, }, public, void, invalidArgumentRangeAtIdentityAnswerCreationTime, (, ), {, throw, new, MockitoException, (, join, (]
[(, "Settings should not define a spy instance and a delegated instance at the same time.", ), ), ;, }, public, void, invalidArgumentRangeAtIdentityAnswerCreationTime, (, ), {, throw, new, MockitoException, (, join, (, "Invalid argument index.", ,]
[), ), ;, }, public, void, invalidArgumentRangeAtIdentityAnswerCreationTime, (, ), {, throw, new, MockitoException, (, join, (, "Invalid argument index.", ,, "The index need to be a positive number that indicates the position of the argument to return.", ,]
[;, }, public, void, invalidArgumentRangeAtIdentityAnswerCreationTime, (, ), {, throw, new, MockitoException, (, join, (, "Invalid argument index.", ,, "The index need to be a positive number that indicates the position of the argument to return.", ,, "However it is possible to use the -1 value to indicates that the last argument should be", ,]
["returned.", ), ), ;, }, public, int, invalidArgumentPositionRangeAtInvocationTime, (, InvocationOnMock, invocation, ,, boolean, willReturnLastParameter, ,, int, argumentIndex, ), {, throw]
[;, }, public, int, invalidArgumentPositionRangeAtInvocationTime, (, InvocationOnMock, invocation, ,, boolean, willReturnLastParameter, ,, int, argumentIndex, ), {, throw, new, MockitoException, (]
[public, int, invalidArgumentPositionRangeAtInvocationTime, (, InvocationOnMock, invocation, ,, boolean, willReturnLastParameter, ,, int, argumentIndex, ), {, throw, new, MockitoException, (, join, (]
[invalidArgumentPositionRangeAtInvocationTime, (, InvocationOnMock, invocation, ,, boolean, willReturnLastParameter, ,, int, argumentIndex, ), {, throw, new, MockitoException, (, join, (, "Invalid argument index for the current invocation of method : ", ,]
[invalidArgumentPositionRangeAtInvocationTime, (, InvocationOnMock, invocation, ,, boolean, willReturnLastParameter, ,, int, argumentIndex, ), {, throw, new, MockitoException, (, join, (, "Invalid argument index for the current invocation of method : ", ,]
[invalidArgumentPositionRangeAtInvocationTime, (, InvocationOnMock, invocation, ,, boolean, willReturnLastParameter, ,, int, argumentIndex, ), {, throw, new, MockitoException, (, join, (, "Invalid argument index for the current invocation of method : ", ,]
[invalidArgumentPositionRangeAtInvocationTime, (, InvocationOnMock, invocation, ,, boolean, willReturnLastParameter, ,, int, argumentIndex, ), {, throw, new, MockitoException, (, join, (, "Invalid argument index for the current invocation of method : ", ,]
[invalidArgumentPositionRangeAtInvocationTime, (, InvocationOnMock, invocation, ,, boolean, willReturnLastParameter, ,, int, argumentIndex, ), {, throw, new, MockitoException, (, join, (, "Invalid argument index for the current invocation of method : ", ,]
[InvocationOnMock, invocation, ,, boolean, willReturnLastParameter, ,, int, argumentIndex, ), {, throw, new, MockitoException, (, join, (, "Invalid argument index for the current invocation of method : ", ,, " -> ", +]
[,, boolean, willReturnLastParameter, ,, int, argumentIndex, ), {, throw, new, MockitoException, (, join, (, "Invalid argument index for the current invocation of method : ", ,, " -> ", +, safelyGetMockName, (]
[,, boolean, willReturnLastParameter, ,, int, argumentIndex, ), {, throw, new, MockitoException, (, join, (, "Invalid argument index for the current invocation of method : ", ,, " -> ", +, safelyGetMockName, (]
[{, throw, new, MockitoException, (, join, (, "Invalid argument index for the current invocation of method : ", ,, " -> ", +, safelyGetMockName, (, invocation, ., getMock, (, ), ), +]
[new, MockitoException, (, join, (, "Invalid argument index for the current invocation of method : ", ,, " -> ", +, safelyGetMockName, (, invocation, ., getMock, (, ), ), +, ".", +]
[new, MockitoException, (, join, (, "Invalid argument index for the current invocation of method : ", ,, " -> ", +, safelyGetMockName, (, invocation, ., getMock, (, ), ), +, ".", +]
[new, MockitoException, (, join, (, "Invalid argument index for the current invocation of method : ", ,, " -> ", +, safelyGetMockName, (, invocation, ., getMock, (, ), ), +, ".", +]
[(, invocation, ., getMock, (, ), ), +, ".", +, invocation, ., getMethod, (, ), ., getName, (, ), +]
[., getMock, (, ), ), +, ".", +, invocation, ., getMethod, (, ), ., getName, (, ), +, "()", ,]
[(, ), ), +, ".", +, invocation, ., getMethod, (, ), ., getName, (, ), +, "()", ,, "", ,]
[(, ), ), +, ".", +, invocation, ., getMethod, (, ), ., getName, (, ), +, "()", ,, "", ,]
[(, ), ), +, ".", +, invocation, ., getMethod, (, ), ., getName, (, ), +, "()", ,, "", ,]
[), ), +, ".", +, invocation, ., getMethod, (, ), ., getName, (, ), +, "()", ,, "", ,, (]
[), ), +, ".", +, invocation, ., getMethod, (, ), ., getName, (, ), +, "()", ,, "", ,, (]
[+, ".", +, invocation, ., getMethod, (, ), ., getName, (, ), +, "()", ,, "", ,, (, willReturnLastParameter, ?]
[+, invocation, ., getMethod, (, ), ., getName, (, ), +, "()", ,, "", ,, (, willReturnLastParameter, ?, "Last parameter wanted", :]
[+, invocation, ., getMethod, (, ), ., getName, (, ), +, "()", ,, "", ,, (, willReturnLastParameter, ?, "Last parameter wanted", :]
[., getMethod, (, ), ., getName, (, ), +, "()", ,, "", ,, (, willReturnLastParameter, ?, "Last parameter wanted", :, "Wanted parameter at position ", +]
[), ., getName, (, ), +, "()", ,, "", ,, (, willReturnLastParameter, ?, "Last parameter wanted", :, "Wanted parameter at position ", +, argumentIndex, ), +]
[getName, (, ), +, "()", ,, "", ,, (, willReturnLastParameter, ?, "Last parameter wanted", :, "Wanted parameter at position ", +, argumentIndex, ), +, " but ", +]
[), +, "()", ,, "", ,, (, willReturnLastParameter, ?, "Last parameter wanted", :, "Wanted parameter at position ", +, argumentIndex, ), +, " but ", +, possibleArgumentTypesOf, (]
[,, "", ,, (, willReturnLastParameter, ?, "Last parameter wanted", :, "Wanted parameter at position ", +, argumentIndex, ), +, " but ", +, possibleArgumentTypesOf, (, invocation, ), ,]
[,, (, willReturnLastParameter, ?, "Last parameter wanted", :, "Wanted parameter at position ", +, argumentIndex, ), +, " but ", +, possibleArgumentTypesOf, (, invocation, ), ,, "The index need to be a positive number that indicates a valid position of the argument in the invocation.", ,]
[willReturnLastParameter, ?, "Last parameter wanted", :, "Wanted parameter at position ", +, argumentIndex, ), +, " but ", +, possibleArgumentTypesOf, (, invocation, ), ,, "The index need to be a positive number that indicates a valid position of the argument in the invocation.", ,, "However it is possible to use the -1 value to indicates that the last argument should be returned.", ,]
[), ), ;, }, private, StringBuilder, possibleArgumentTypesOf, (, InvocationOnMock, invocation, ), {, Class, <, ?, >, [, ], parameterTypes, =]
[), ), ;, }, private, StringBuilder, possibleArgumentTypesOf, (, InvocationOnMock, invocation, ), {, Class, <, ?, >, [, ], parameterTypes, =]
[), ), ;, }, private, StringBuilder, possibleArgumentTypesOf, (, InvocationOnMock, invocation, ), {, Class, <, ?, >, [, ], parameterTypes, =]
[Class, <, ?, >, [, ], parameterTypes, =, invocation, ., getMethod, (, ), ., getParameterTypes, (, ), ;, if, (]
[Class, <, ?, >, [, ], parameterTypes, =, invocation, ., getMethod, (, ), ., getParameterTypes, (, ), ;, if, (]
[Class, <, ?, >, [, ], parameterTypes, =, invocation, ., getMethod, (, ), ., getParameterTypes, (, ), ;, if, (]
[[, ], parameterTypes, =, invocation, ., getMethod, (, ), ., getParameterTypes, (, ), ;, if, (, parameterTypes, ., length, ==]
[invocation, ., getMethod, (, ), ., getParameterTypes, (, ), ;, if, (, parameterTypes, ., length, ==, 0, ), {, return]
[(, ), ., getParameterTypes, (, ), ;, if, (, parameterTypes, ., length, ==, 0, ), {, return, new, StringBuilder, (]
[if, (, parameterTypes, ., length, ==, 0, ), {, return, new, StringBuilder, (, "the method has no arguments.\n", ), ;, }, StringBuilder, stringBuilder, =]
[., length, ==, 0, ), {, return, new, StringBuilder, (, "the method has no arguments.\n", ), ;, }, StringBuilder, stringBuilder, =, new, StringBuilder, (]
[StringBuilder, (, "the method has no arguments.\n", ), ;, }, StringBuilder, stringBuilder, =, new, StringBuilder, (, "the possible argument indexes for this method are :\n", ), ;, for, (, int, i, =]
[;, }, StringBuilder, stringBuilder, =, new, StringBuilder, (, "the possible argument indexes for this method are :\n", ), ;, for, (, int, i, =, 0, ,, parameterTypesLength, =]
[;, }, StringBuilder, stringBuilder, =, new, StringBuilder, (, "the possible argument indexes for this method are :\n", ), ;, for, (, int, i, =, 0, ,, parameterTypesLength, =]
[=, new, StringBuilder, (, "the possible argument indexes for this method are :\n", ), ;, for, (, int, i, =, 0, ,, parameterTypesLength, =, parameterTypes, ., length, ;]
[=, new, StringBuilder, (, "the possible argument indexes for this method are :\n", ), ;, for, (, int, i, =, 0, ,, parameterTypesLength, =, parameterTypes, ., length, ;]
[StringBuilder, (, "the possible argument indexes for this method are :\n", ), ;, for, (, int, i, =, 0, ,, parameterTypesLength, =, parameterTypes, ., length, ;, i, <]
["the possible argument indexes for this method are :\n", ), ;, for, (, int, i, =, 0, ,, parameterTypesLength, =, parameterTypes, ., length, ;, i, <, parameterTypesLength, ;]
["the possible argument indexes for this method are :\n", ), ;, for, (, int, i, =, 0, ,, parameterTypesLength, =, parameterTypes, ., length, ;, i, <, parameterTypesLength, ;]
[(, int, i, =, 0, ,, parameterTypesLength, =, parameterTypes, ., length, ;, i, <, parameterTypesLength, ;, i, ++, ), {]
[(, int, i, =, 0, ,, parameterTypesLength, =, parameterTypes, ., length, ;, i, <, parameterTypesLength, ;, i, ++, ), {]
[(, int, i, =, 0, ,, parameterTypesLength, =, parameterTypes, ., length, ;, i, <, parameterTypesLength, ;, i, ++, ), {]
[0, ,, parameterTypesLength, =, parameterTypes, ., length, ;, i, <, parameterTypesLength, ;, i, ++, ), {, stringBuilder, ., append, (]
[., length, ;, i, <, parameterTypesLength, ;, i, ++, ), {, stringBuilder, ., append, (, "    [", ), ., append, (]
[parameterTypesLength, ;, i, ++, ), {, stringBuilder, ., append, (, "    [", ), ., append, (, i, ), ;, if, (]
[parameterTypesLength, ;, i, ++, ), {, stringBuilder, ., append, (, "    [", ), ., append, (, i, ), ;, if, (]
[parameterTypesLength, ;, i, ++, ), {, stringBuilder, ., append, (, "    [", ), ., append, (, i, ), ;, if, (]
[parameterTypesLength, ;, i, ++, ), {, stringBuilder, ., append, (, "    [", ), ., append, (, i, ), ;, if, (]
["    [", ), ., append, (, i, ), ;, if, (, invocation, ., getMethod, (, ), ., isVarArgs, (, ), &&]
["    [", ), ., append, (, i, ), ;, if, (, invocation, ., getMethod, (, ), ., isVarArgs, (, ), &&]
[., append, (, i, ), ;, if, (, invocation, ., getMethod, (, ), ., isVarArgs, (, ), &&, i, ==]
[., append, (, i, ), ;, if, (, invocation, ., getMethod, (, ), ., isVarArgs, (, ), &&, i, ==]
[(, i, ), ;, if, (, invocation, ., getMethod, (, ), ., isVarArgs, (, ), &&, i, ==, parameterTypesLength, -]
[;, if, (, invocation, ., getMethod, (, ), ., isVarArgs, (, ), &&, i, ==, parameterTypesLength, -, 1, ), {]
[;, if, (, invocation, ., getMethod, (, ), ., isVarArgs, (, ), &&, i, ==, parameterTypesLength, -, 1, ), {]
[;, if, (, invocation, ., getMethod, (, ), ., isVarArgs, (, ), &&, i, ==, parameterTypesLength, -, 1, ), {]
[;, if, (, invocation, ., getMethod, (, ), ., isVarArgs, (, ), &&, i, ==, parameterTypesLength, -, 1, ), {]
[;, if, (, invocation, ., getMethod, (, ), ., isVarArgs, (, ), &&, i, ==, parameterTypesLength, -, 1, ), {]
[., getMethod, (, ), ., isVarArgs, (, ), &&, i, ==, parameterTypesLength, -, 1, ), {, stringBuilder, ., append, (]
[isVarArgs, (, ), &&, i, ==, parameterTypesLength, -, 1, ), {, stringBuilder, ., append, (, "+] ", ), ., append, (]
[isVarArgs, (, ), &&, i, ==, parameterTypesLength, -, 1, ), {, stringBuilder, ., append, (, "+] ", ), ., append, (]
[isVarArgs, (, ), &&, i, ==, parameterTypesLength, -, 1, ), {, stringBuilder, ., append, (, "+] ", ), ., append, (]
[isVarArgs, (, ), &&, i, ==, parameterTypesLength, -, 1, ), {, stringBuilder, ., append, (, "+] ", ), ., append, (]
[), &&, i, ==, parameterTypesLength, -, 1, ), {, stringBuilder, ., append, (, "+] ", ), ., append, (, parameterTypes, []
[), ., append, (, parameterTypes, [, i, ], ., getComponentType, (, ), ., getSimpleName, (, ), ), ., append, (]
[[, i, ], ., getComponentType, (, ), ., getSimpleName, (, ), ), ., append, (, "  <- Vararg", ), ., append, (]
[), ., getSimpleName, (, ), ), ., append, (, "  <- Vararg", ), ., append, (, "\n", ), ;, }, else, {]
[), ., getSimpleName, (, ), ), ., append, (, "  <- Vararg", ), ., append, (, "\n", ), ;, }, else, {]
[), ., getSimpleName, (, ), ), ., append, (, "  <- Vararg", ), ., append, (, "\n", ), ;, }, else, {]
[), ., getSimpleName, (, ), ), ., append, (, "  <- Vararg", ), ., append, (, "\n", ), ;, }, else, {]
[), ), ., append, (, "  <- Vararg", ), ., append, (, "\n", ), ;, }, else, {, stringBuilder, ., append, (]
["  <- Vararg", ), ., append, (, "\n", ), ;, }, else, {, stringBuilder, ., append, (, "] ", ), ., append, (]
["  <- Vararg", ), ., append, (, "\n", ), ;, }, else, {, stringBuilder, ., append, (, "] ", ), ., append, (]
["  <- Vararg", ), ., append, (, "\n", ), ;, }, else, {, stringBuilder, ., append, (, "] ", ), ., append, (]
[., append, (, "\n", ), ;, }, else, {, stringBuilder, ., append, (, "] ", ), ., append, (, parameterTypes, []
[., append, (, "] ", ), ., append, (, parameterTypes, [, i, ], ., getSimpleName, (, ), ), ., append, (]
[append, (, parameterTypes, [, i, ], ., getSimpleName, (, ), ), ., append, (, "\n", ), ;, }, }, return]
[;, }, public, void, wrongTypeOfArgumentToReturn, (, InvocationOnMock, invocation, ,, String, expectedType, ,, Class, actualType, ,, int, argumentIndex, ), {, throw]
[void, wrongTypeOfArgumentToReturn, (, InvocationOnMock, invocation, ,, String, expectedType, ,, Class, actualType, ,, int, argumentIndex, ), {, throw, new, WrongTypeOfReturnValue, (]
[(, InvocationOnMock, invocation, ,, String, expectedType, ,, Class, actualType, ,, int, argumentIndex, ), {, throw, new, WrongTypeOfReturnValue, (, join, (]
[(, InvocationOnMock, invocation, ,, String, expectedType, ,, Class, actualType, ,, int, argumentIndex, ), {, throw, new, WrongTypeOfReturnValue, (, join, (]
[(, InvocationOnMock, invocation, ,, String, expectedType, ,, Class, actualType, ,, int, argumentIndex, ), {, throw, new, WrongTypeOfReturnValue, (, join, (]
[invocation, ,, String, expectedType, ,, Class, actualType, ,, int, argumentIndex, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, "The argument of type '", +]
[invocation, ,, String, expectedType, ,, Class, actualType, ,, int, argumentIndex, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, "The argument of type '", +]
[actualType, ,, int, argumentIndex, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, "The argument of type '", +, actualType, ., getSimpleName, (, ), +]
[int, argumentIndex, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, "The argument of type '", +, actualType, ., getSimpleName, (, ), +, "' cannot be returned because the following ", ,]
[int, argumentIndex, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, "The argument of type '", +, actualType, ., getSimpleName, (, ), +, "' cannot be returned because the following ", ,]
[int, argumentIndex, ), {, throw, new, WrongTypeOfReturnValue, (, join, (, "The argument of type '", +, actualType, ., getSimpleName, (, ), +, "' cannot be returned because the following ", ,]
[), {, throw, new, WrongTypeOfReturnValue, (, join, (, "The argument of type '", +, actualType, ., getSimpleName, (, ), +, "' cannot be returned because the following ", ,, "method should return the type '", +]
[throw, new, WrongTypeOfReturnValue, (, join, (, "The argument of type '", +, actualType, ., getSimpleName, (, ), +, "' cannot be returned because the following ", ,, "method should return the type '", +, expectedType, +]
[WrongTypeOfReturnValue, (, join, (, "The argument of type '", +, actualType, ., getSimpleName, (, ), +, "' cannot be returned because the following ", ,, "method should return the type '", +, expectedType, +, "'", ,]
[WrongTypeOfReturnValue, (, join, (, "The argument of type '", +, actualType, ., getSimpleName, (, ), +, "' cannot be returned because the following ", ,, "method should return the type '", +, expectedType, +, "'", ,]
[WrongTypeOfReturnValue, (, join, (, "The argument of type '", +, actualType, ., getSimpleName, (, ), +, "' cannot be returned because the following ", ,, "method should return the type '", +, expectedType, +, "'", ,]
[WrongTypeOfReturnValue, (, join, (, "The argument of type '", +, actualType, ., getSimpleName, (, ), +, "' cannot be returned because the following ", ,, "method should return the type '", +, expectedType, +, "'", ,]
[WrongTypeOfReturnValue, (, join, (, "The argument of type '", +, actualType, ., getSimpleName, (, ), +, "' cannot be returned because the following ", ,, "method should return the type '", +, expectedType, +, "'", ,]
[join, (, "The argument of type '", +, actualType, ., getSimpleName, (, ), +, "' cannot be returned because the following ", ,, "method should return the type '", +, expectedType, +, "'", ,, " -> ", +]
["The argument of type '", +, actualType, ., getSimpleName, (, ), +, "' cannot be returned because the following ", ,, "method should return the type '", +, expectedType, +, "'", ,, " -> ", +, safelyGetMockName, (]
["The argument of type '", +, actualType, ., getSimpleName, (, ), +, "' cannot be returned because the following ", ,, "method should return the type '", +, expectedType, +, "'", ,, " -> ", +, safelyGetMockName, (]
[+, "' cannot be returned because the following ", ,, "method should return the type '", +, expectedType, +, "'", ,, " -> ", +, safelyGetMockName, (, invocation, ., getMock, (, ), ), +]
[,, "method should return the type '", +, expectedType, +, "'", ,, " -> ", +, safelyGetMockName, (, invocation, ., getMock, (, ), ), +, ".", +]
[,, "method should return the type '", +, expectedType, +, "'", ,, " -> ", +, safelyGetMockName, (, invocation, ., getMock, (, ), ), +, ".", +]
[,, "method should return the type '", +, expectedType, +, "'", ,, " -> ", +, safelyGetMockName, (, invocation, ., getMock, (, ), ), +, ".", +]
[(, invocation, ., getMock, (, ), ), +, ".", +, invocation, ., getMethod, (, ), ., getName, (, ), +]
[., getMock, (, ), ), +, ".", +, invocation, ., getMethod, (, ), ., getName, (, ), +, "()", ,]
[(, ), ), +, ".", +, invocation, ., getMethod, (, ), ., getName, (, ), +, "()", ,, "", ,]
[), +, ".", +, invocation, ., getMethod, (, ), ., getName, (, ), +, "()", ,, "", ,, "The reason for this error can be :", ,]
[".", +, invocation, ., getMethod, (, ), ., getName, (, ), +, "()", ,, "", ,, "The reason for this error can be :", ,, "1. The wanted argument position is incorrect.", ,]
[invocation, ., getMethod, (, ), ., getName, (, ), +, "()", ,, "", ,, "The reason for this error can be :", ,, "1. The wanted argument position is incorrect.", ,, "2. The answer is used on the wrong interaction.", ,]
[getMethod, (, ), ., getName, (, ), +, "()", ,, "", ,, "The reason for this error can be :", ,, "1. The wanted argument position is incorrect.", ,, "2. The answer is used on the wrong interaction.", ,, "", ,]
[getMethod, (, ), ., getName, (, ), +, "()", ,, "", ,, "The reason for this error can be :", ,, "1. The wanted argument position is incorrect.", ,, "2. The answer is used on the wrong interaction.", ,, "", ,]
[getMethod, (, ), ., getName, (, ), +, "()", ,, "", ,, "The reason for this error can be :", ,, "1. The wanted argument position is incorrect.", ,, "2. The answer is used on the wrong interaction.", ,, "", ,]
[getMethod, (, ), ., getName, (, ), +, "()", ,, "", ,, "The reason for this error can be :", ,, "1. The wanted argument position is incorrect.", ,, "2. The answer is used on the wrong interaction.", ,, "", ,]
[), ., getName, (, ), +, "()", ,, "", ,, "The reason for this error can be :", ,, "1. The wanted argument position is incorrect.", ,, "2. The answer is used on the wrong interaction.", ,, "", ,, "Position of the wanted argument is ", +]
[getName, (, ), +, "()", ,, "", ,, "The reason for this error can be :", ,, "1. The wanted argument position is incorrect.", ,, "2. The answer is used on the wrong interaction.", ,, "", ,, "Position of the wanted argument is ", +, argumentIndex, +]
[), +, "()", ,, "", ,, "The reason for this error can be :", ,, "1. The wanted argument position is incorrect.", ,, "2. The answer is used on the wrong interaction.", ,, "", ,, "Position of the wanted argument is ", +, argumentIndex, +, " and ", +]
["()", ,, "", ,, "The reason for this error can be :", ,, "1. The wanted argument position is incorrect.", ,, "2. The answer is used on the wrong interaction.", ,, "", ,, "Position of the wanted argument is ", +, argumentIndex, +, " and ", +, possibleArgumentTypesOf, (]
[,, "The reason for this error can be :", ,, "1. The wanted argument position is incorrect.", ,, "2. The answer is used on the wrong interaction.", ,, "", ,, "Position of the wanted argument is ", +, argumentIndex, +, " and ", +, possibleArgumentTypesOf, (, invocation, ), ,]
[,, "1. The wanted argument position is incorrect.", ,, "2. The answer is used on the wrong interaction.", ,, "", ,, "Position of the wanted argument is ", +, argumentIndex, +, " and ", +, possibleArgumentTypesOf, (, invocation, ), ,, "***", ,]
[,, "2. The answer is used on the wrong interaction.", ,, "", ,, "Position of the wanted argument is ", +, argumentIndex, +, " and ", +, possibleArgumentTypesOf, (, invocation, ), ,, "***", ,, "However if you're still unsure why you're getting above error read on.", ,]
[,, "", ,, "Position of the wanted argument is ", +, argumentIndex, +, " and ", +, possibleArgumentTypesOf, (, invocation, ), ,, "***", ,, "However if you're still unsure why you're getting above error read on.", ,, "Due to the nature of the syntax above problem might occur because:", ,]
[,, "Position of the wanted argument is ", +, argumentIndex, +, " and ", +, possibleArgumentTypesOf, (, invocation, ), ,, "***", ,, "However if you're still unsure why you're getting above error read on.", ,, "Due to the nature of the syntax above problem might occur because:", ,, "1. This exception *might* occur in wrongly written multi-threaded tests.", ,]
[+, argumentIndex, +, " and ", +, possibleArgumentTypesOf, (, invocation, ), ,, "***", ,, "However if you're still unsure why you're getting above error read on.", ,, "Due to the nature of the syntax above problem might occur because:", ,, "1. This exception *might* occur in wrongly written multi-threaded tests.", ,, "   Please refer to Mockito FAQ on limitations of concurrency testing.", ,]
[+, " and ", +, possibleArgumentTypesOf, (, invocation, ), ,, "***", ,, "However if you're still unsure why you're getting above error read on.", ,, "Due to the nature of the syntax above problem might occur because:", ,, "1. This exception *might* occur in wrongly written multi-threaded tests.", ,, "   Please refer to Mockito FAQ on limitations of concurrency testing.", ,, "2. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ", ,]
[+, possibleArgumentTypesOf, (, invocation, ), ,, "***", ,, "However if you're still unsure why you're getting above error read on.", ,, "Due to the nature of the syntax above problem might occur because:", ,, "1. This exception *might* occur in wrongly written multi-threaded tests.", ,, "   Please refer to Mockito FAQ on limitations of concurrency testing.", ,, "2. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ", ,, "   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.", ,]
["1. This exception *might* occur in wrongly written multi-threaded tests.", ,, "   Please refer to Mockito FAQ on limitations of concurrency testing.", ,, "2. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ", ,, "   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.", ,, "", ), ), ;, }, public, void, defaultAnswerDoesNotAcceptNullParameter, (, ), {, throw]
[,, "2. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ", ,, "   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.", ,, "", ), ), ;, }, public, void, defaultAnswerDoesNotAcceptNullParameter, (, ), {, throw, new, MockitoException, (]
[(, ), {, throw, new, MockitoException, (, "defaultAnswer() does not accept null parameter", ), ;, }, public, void, serializableWontWorkForObjectsThatDontImplementSerializable, (, Class, classToMock, ), {, throw]
[throw, new, MockitoException, (, "defaultAnswer() does not accept null parameter", ), ;, }, public, void, serializableWontWorkForObjectsThatDontImplementSerializable, (, Class, classToMock, ), {, throw, new, MockitoException, (]
[MockitoException, (, "defaultAnswer() does not accept null parameter", ), ;, }, public, void, serializableWontWorkForObjectsThatDontImplementSerializable, (, Class, classToMock, ), {, throw, new, MockitoException, (, join, (]
[MockitoException, (, "defaultAnswer() does not accept null parameter", ), ;, }, public, void, serializableWontWorkForObjectsThatDontImplementSerializable, (, Class, classToMock, ), {, throw, new, MockitoException, (, join, (]
[MockitoException, (, "defaultAnswer() does not accept null parameter", ), ;, }, public, void, serializableWontWorkForObjectsThatDontImplementSerializable, (, Class, classToMock, ), {, throw, new, MockitoException, (, join, (]
["defaultAnswer() does not accept null parameter", ), ;, }, public, void, serializableWontWorkForObjectsThatDontImplementSerializable, (, Class, classToMock, ), {, throw, new, MockitoException, (, join, (, "You are using the setting 'withSettings().serializable()' however the type you are trying to mock '", +]
["defaultAnswer() does not accept null parameter", ), ;, }, public, void, serializableWontWorkForObjectsThatDontImplementSerializable, (, Class, classToMock, ), {, throw, new, MockitoException, (, join, (, "You are using the setting 'withSettings().serializable()' however the type you are trying to mock '", +]
[serializableWontWorkForObjectsThatDontImplementSerializable, (, Class, classToMock, ), {, throw, new, MockitoException, (, join, (, "You are using the setting 'withSettings().serializable()' however the type you are trying to mock '", +, classToMock, ., getSimpleName, (, ), +]
[Class, classToMock, ), {, throw, new, MockitoException, (, join, (, "You are using the setting 'withSettings().serializable()' however the type you are trying to mock '", +, classToMock, ., getSimpleName, (, ), +, "'", ,]
[), {, throw, new, MockitoException, (, join, (, "You are using the setting 'withSettings().serializable()' however the type you are trying to mock '", +, classToMock, ., getSimpleName, (, ), +, "'", ,, "do not implement Serializable AND do not have a no-arg constructor.", ,]
[throw, new, MockitoException, (, join, (, "You are using the setting 'withSettings().serializable()' however the type you are trying to mock '", +, classToMock, ., getSimpleName, (, ), +, "'", ,, "do not implement Serializable AND do not have a no-arg constructor.", ,, "This combination is requested, otherwise you will get an 'java.io.InvalidClassException' when the mock will be serialized", ,]
[MockitoException, (, join, (, "You are using the setting 'withSettings().serializable()' however the type you are trying to mock '", +, classToMock, ., getSimpleName, (, ), +, "'", ,, "do not implement Serializable AND do not have a no-arg constructor.", ,, "This combination is requested, otherwise you will get an 'java.io.InvalidClassException' when the mock will be serialized", ,, "", ,]
[join, (, "You are using the setting 'withSettings().serializable()' however the type you are trying to mock '", +, classToMock, ., getSimpleName, (, ), +, "'", ,, "do not implement Serializable AND do not have a no-arg constructor.", ,, "This combination is requested, otherwise you will get an 'java.io.InvalidClassException' when the mock will be serialized", ,, "", ,, "Also note that as requested by the Java serialization specification, the whole hierarchy need to implements Serializable,", ,]
["You are using the setting 'withSettings().serializable()' however the type you are trying to mock '", +, classToMock, ., getSimpleName, (, ), +, "'", ,, "do not implement Serializable AND do not have a no-arg constructor.", ,, "This combination is requested, otherwise you will get an 'java.io.InvalidClassException' when the mock will be serialized", ,, "", ,, "Also note that as requested by the Java serialization specification, the whole hierarchy need to implements Serializable,", ,, "i.e. the top-most superclass has to implements Serializable.", ,]
[;, }, public, void, delegatedMethodHasWrongReturnType, (, Method, mockMethod, ,, Method, delegateMethod, ,, Object, mock, ,, Object, delegate, ), {, throw]
[void, delegatedMethodHasWrongReturnType, (, Method, mockMethod, ,, Method, delegateMethod, ,, Object, mock, ,, Object, delegate, ), {, throw, new, MockitoException, (]
[(, Method, mockMethod, ,, Method, delegateMethod, ,, Object, mock, ,, Object, delegate, ), {, throw, new, MockitoException, (, join, (]
[mockMethod, ,, Method, delegateMethod, ,, Object, mock, ,, Object, delegate, ), {, throw, new, MockitoException, (, join, (, "Methods called on delegated instance must have compatible return types with the mock.", ,]
[mockMethod, ,, Method, delegateMethod, ,, Object, mock, ,, Object, delegate, ), {, throw, new, MockitoException, (, join, (, "Methods called on delegated instance must have compatible return types with the mock.", ,]
[mockMethod, ,, Method, delegateMethod, ,, Object, mock, ,, Object, delegate, ), {, throw, new, MockitoException, (, join, (, "Methods called on delegated instance must have compatible return types with the mock.", ,]
[mockMethod, ,, Method, delegateMethod, ,, Object, mock, ,, Object, delegate, ), {, throw, new, MockitoException, (, join, (, "Methods called on delegated instance must have compatible return types with the mock.", ,]
[Method, delegateMethod, ,, Object, mock, ,, Object, delegate, ), {, throw, new, MockitoException, (, join, (, "Methods called on delegated instance must have compatible return types with the mock.", ,, "When calling: ", +]
[,, Object, mock, ,, Object, delegate, ), {, throw, new, MockitoException, (, join, (, "Methods called on delegated instance must have compatible return types with the mock.", ,, "When calling: ", +, mockMethod, +]
[mock, ,, Object, delegate, ), {, throw, new, MockitoException, (, join, (, "Methods called on delegated instance must have compatible return types with the mock.", ,, "When calling: ", +, mockMethod, +, " on mock: ", +]
[Object, delegate, ), {, throw, new, MockitoException, (, join, (, "Methods called on delegated instance must have compatible return types with the mock.", ,, "When calling: ", +, mockMethod, +, " on mock: ", +, safelyGetMockName, (]
[{, throw, new, MockitoException, (, join, (, "Methods called on delegated instance must have compatible return types with the mock.", ,, "When calling: ", +, mockMethod, +, " on mock: ", +, safelyGetMockName, (, mock, ), ,]
[{, throw, new, MockitoException, (, join, (, "Methods called on delegated instance must have compatible return types with the mock.", ,, "When calling: ", +, mockMethod, +, " on mock: ", +, safelyGetMockName, (, mock, ), ,]
[{, throw, new, MockitoException, (, join, (, "Methods called on delegated instance must have compatible return types with the mock.", ,, "When calling: ", +, mockMethod, +, " on mock: ", +, safelyGetMockName, (, mock, ), ,]
[{, throw, new, MockitoException, (, join, (, "Methods called on delegated instance must have compatible return types with the mock.", ,, "When calling: ", +, mockMethod, +, " on mock: ", +, safelyGetMockName, (, mock, ), ,]
[new, MockitoException, (, join, (, "Methods called on delegated instance must have compatible return types with the mock.", ,, "When calling: ", +, mockMethod, +, " on mock: ", +, safelyGetMockName, (, mock, ), ,, "return type should be: ", +]
[new, MockitoException, (, join, (, "Methods called on delegated instance must have compatible return types with the mock.", ,, "When calling: ", +, mockMethod, +, " on mock: ", +, safelyGetMockName, (, mock, ), ,, "return type should be: ", +]
[new, MockitoException, (, join, (, "Methods called on delegated instance must have compatible return types with the mock.", ,, "When calling: ", +, mockMethod, +, " on mock: ", +, safelyGetMockName, (, mock, ), ,, "return type should be: ", +]
[+, " on mock: ", +, safelyGetMockName, (, mock, ), ,, "return type should be: ", +, mockMethod, ., getReturnType, (, ), ., getSimpleName, (, ), +]
[+, safelyGetMockName, (, mock, ), ,, "return type should be: ", +, mockMethod, ., getReturnType, (, ), ., getSimpleName, (, ), +, ", but was: ", +]
[+, safelyGetMockName, (, mock, ), ,, "return type should be: ", +, mockMethod, ., getReturnType, (, ), ., getSimpleName, (, ), +, ", but was: ", +]
[+, safelyGetMockName, (, mock, ), ,, "return type should be: ", +, mockMethod, ., getReturnType, (, ), ., getSimpleName, (, ), +, ", but was: ", +]
[getReturnType, (, ), ., getSimpleName, (, ), +, ", but was: ", +, delegateMethod, ., getReturnType, (, ), ., getSimpleName, (, ), ,]
[), ., getSimpleName, (, ), +, ", but was: ", +, delegateMethod, ., getReturnType, (, ), ., getSimpleName, (, ), ,, "Check that the instance passed to delegatesTo() is of the correct type or contains compatible methods", ,]
[), ., getSimpleName, (, ), +, ", but was: ", +, delegateMethod, ., getReturnType, (, ), ., getSimpleName, (, ), ,, "Check that the instance passed to delegatesTo() is of the correct type or contains compatible methods", ,]
[), ., getSimpleName, (, ), +, ", but was: ", +, delegateMethod, ., getReturnType, (, ), ., getSimpleName, (, ), ,, "Check that the instance passed to delegatesTo() is of the correct type or contains compatible methods", ,]
[getSimpleName, (, ), +, ", but was: ", +, delegateMethod, ., getReturnType, (, ), ., getSimpleName, (, ), ,, "Check that the instance passed to delegatesTo() is of the correct type or contains compatible methods", ,, "(delegate instance had type: ", +]
[getSimpleName, (, ), +, ", but was: ", +, delegateMethod, ., getReturnType, (, ), ., getSimpleName, (, ), ,, "Check that the instance passed to delegatesTo() is of the correct type or contains compatible methods", ,, "(delegate instance had type: ", +]
[getSimpleName, (, ), +, ", but was: ", +, delegateMethod, ., getReturnType, (, ), ., getSimpleName, (, ), ,, "Check that the instance passed to delegatesTo() is of the correct type or contains compatible methods", ,, "(delegate instance had type: ", +]
[), ., getSimpleName, (, ), ,, "Check that the instance passed to delegatesTo() is of the correct type or contains compatible methods", ,, "(delegate instance had type: ", +, delegate, ., getClass, (, ), ., getSimpleName, (, ), +]
[")", ), ), ;, }, public, void, delegatedMethodDoesNotExistOnDelegate, (, Method, mockMethod, ,, Object, mock, ,, Object, delegate, ), {, throw]
[;, }, public, void, delegatedMethodDoesNotExistOnDelegate, (, Method, mockMethod, ,, Object, mock, ,, Object, delegate, ), {, throw, new, MockitoException, (]
[public, void, delegatedMethodDoesNotExistOnDelegate, (, Method, mockMethod, ,, Object, mock, ,, Object, delegate, ), {, throw, new, MockitoException, (, join, (]
[delegatedMethodDoesNotExistOnDelegate, (, Method, mockMethod, ,, Object, mock, ,, Object, delegate, ), {, throw, new, MockitoException, (, join, (, "Methods called on mock must exist in delegated instance.", ,]
[delegatedMethodDoesNotExistOnDelegate, (, Method, mockMethod, ,, Object, mock, ,, Object, delegate, ), {, throw, new, MockitoException, (, join, (, "Methods called on mock must exist in delegated instance.", ,]
[delegatedMethodDoesNotExistOnDelegate, (, Method, mockMethod, ,, Object, mock, ,, Object, delegate, ), {, throw, new, MockitoException, (, join, (, "Methods called on mock must exist in delegated instance.", ,]
[delegatedMethodDoesNotExistOnDelegate, (, Method, mockMethod, ,, Object, mock, ,, Object, delegate, ), {, throw, new, MockitoException, (, join, (, "Methods called on mock must exist in delegated instance.", ,]
[Method, mockMethod, ,, Object, mock, ,, Object, delegate, ), {, throw, new, MockitoException, (, join, (, "Methods called on mock must exist in delegated instance.", ,, "When calling: ", +]
[,, Object, mock, ,, Object, delegate, ), {, throw, new, MockitoException, (, join, (, "Methods called on mock must exist in delegated instance.", ,, "When calling: ", +, mockMethod, +]
[mock, ,, Object, delegate, ), {, throw, new, MockitoException, (, join, (, "Methods called on mock must exist in delegated instance.", ,, "When calling: ", +, mockMethod, +, " on mock: ", +]
[Object, delegate, ), {, throw, new, MockitoException, (, join, (, "Methods called on mock must exist in delegated instance.", ,, "When calling: ", +, mockMethod, +, " on mock: ", +, safelyGetMockName, (]
[{, throw, new, MockitoException, (, join, (, "Methods called on mock must exist in delegated instance.", ,, "When calling: ", +, mockMethod, +, " on mock: ", +, safelyGetMockName, (, mock, ), ,]
[new, MockitoException, (, join, (, "Methods called on mock must exist in delegated instance.", ,, "When calling: ", +, mockMethod, +, " on mock: ", +, safelyGetMockName, (, mock, ), ,, "no such method was found.", ,]
[(, join, (, "Methods called on mock must exist in delegated instance.", ,, "When calling: ", +, mockMethod, +, " on mock: ", +, safelyGetMockName, (, mock, ), ,, "no such method was found.", ,, "Check that the instance passed to delegatesTo() is of the correct type or contains compatible methods", ,]
[(, join, (, "Methods called on mock must exist in delegated instance.", ,, "When calling: ", +, mockMethod, +, " on mock: ", +, safelyGetMockName, (, mock, ), ,, "no such method was found.", ,, "Check that the instance passed to delegatesTo() is of the correct type or contains compatible methods", ,]
[(, join, (, "Methods called on mock must exist in delegated instance.", ,, "When calling: ", +, mockMethod, +, " on mock: ", +, safelyGetMockName, (, mock, ), ,, "no such method was found.", ,, "Check that the instance passed to delegatesTo() is of the correct type or contains compatible methods", ,]
[(, "Methods called on mock must exist in delegated instance.", ,, "When calling: ", +, mockMethod, +, " on mock: ", +, safelyGetMockName, (, mock, ), ,, "no such method was found.", ,, "Check that the instance passed to delegatesTo() is of the correct type or contains compatible methods", ,, "(delegate instance had type: ", +]
[(, "Methods called on mock must exist in delegated instance.", ,, "When calling: ", +, mockMethod, +, " on mock: ", +, safelyGetMockName, (, mock, ), ,, "no such method was found.", ,, "Check that the instance passed to delegatesTo() is of the correct type or contains compatible methods", ,, "(delegate instance had type: ", +]
[(, "Methods called on mock must exist in delegated instance.", ,, "When calling: ", +, mockMethod, +, " on mock: ", +, safelyGetMockName, (, mock, ), ,, "no such method was found.", ,, "Check that the instance passed to delegatesTo() is of the correct type or contains compatible methods", ,, "(delegate instance had type: ", +]
[(, mock, ), ,, "no such method was found.", ,, "Check that the instance passed to delegatesTo() is of the correct type or contains compatible methods", ,, "(delegate instance had type: ", +, delegate, ., getClass, (, ), ., getSimpleName, (, ), +]
[), ., getSimpleName, (, ), +, ")", ), ), ;, }, public, void, usingConstructorWithFancySerializable, (, SerializableMode, mode, ), {, throw]
[(, ), +, ")", ), ), ;, }, public, void, usingConstructorWithFancySerializable, (, SerializableMode, mode, ), {, throw, new, MockitoException, (]
[(, ), +, ")", ), ), ;, }, public, void, usingConstructorWithFancySerializable, (, SerializableMode, mode, ), {, throw, new, MockitoException, (]
[(, ), +, ")", ), ), ;, }, public, void, usingConstructorWithFancySerializable, (, SerializableMode, mode, ), {, throw, new, MockitoException, (]
[+, ")", ), ), ;, }, public, void, usingConstructorWithFancySerializable, (, SerializableMode, mode, ), {, throw, new, MockitoException, (, "Mocks instantiated with constructor cannot be combined with ", +]
[), ), ;, }, public, void, usingConstructorWithFancySerializable, (, SerializableMode, mode, ), {, throw, new, MockitoException, (, "Mocks instantiated with constructor cannot be combined with ", +, mode, +]
[new, MockitoException, (, "Mocks instantiated with constructor cannot be combined with ", +, mode, +, " serialization mode.", ), ;, }, public, void, cannotCreateTimerWithNegativeDurationTime, (, long, durationMillis, ), {, throw]
["Mocks instantiated with constructor cannot be combined with ", +, mode, +, " serialization mode.", ), ;, }, public, void, cannotCreateTimerWithNegativeDurationTime, (, long, durationMillis, ), {, throw, new, FriendlyReminderException, (]
[mode, +, " serialization mode.", ), ;, }, public, void, cannotCreateTimerWithNegativeDurationTime, (, long, durationMillis, ), {, throw, new, FriendlyReminderException, (, join, (]
[" serialization mode.", ), ;, }, public, void, cannotCreateTimerWithNegativeDurationTime, (, long, durationMillis, ), {, throw, new, FriendlyReminderException, (, join, (, "", ,]
[;, }, public, void, cannotCreateTimerWithNegativeDurationTime, (, long, durationMillis, ), {, throw, new, FriendlyReminderException, (, join, (, "", ,, "Don't panic! I'm just a friendly reminder!", ,]
[public, void, cannotCreateTimerWithNegativeDurationTime, (, long, durationMillis, ), {, throw, new, FriendlyReminderException, (, join, (, "", ,, "Don't panic! I'm just a friendly reminder!", ,, "It is impossible for time to go backward, therefore...", ,]
[public, void, cannotCreateTimerWithNegativeDurationTime, (, long, durationMillis, ), {, throw, new, FriendlyReminderException, (, join, (, "", ,, "Don't panic! I'm just a friendly reminder!", ,, "It is impossible for time to go backward, therefore...", ,]
[public, void, cannotCreateTimerWithNegativeDurationTime, (, long, durationMillis, ), {, throw, new, FriendlyReminderException, (, join, (, "", ,, "Don't panic! I'm just a friendly reminder!", ,, "It is impossible for time to go backward, therefore...", ,]
[cannotCreateTimerWithNegativeDurationTime, (, long, durationMillis, ), {, throw, new, FriendlyReminderException, (, join, (, "", ,, "Don't panic! I'm just a friendly reminder!", ,, "It is impossible for time to go backward, therefore...", ,, "You cannot put negative value of duration: (", +]
[long, durationMillis, ), {, throw, new, FriendlyReminderException, (, join, (, "", ,, "Don't panic! I'm just a friendly reminder!", ,, "It is impossible for time to go backward, therefore...", ,, "You cannot put negative value of duration: (", +, durationMillis, +]
[), {, throw, new, FriendlyReminderException, (, join, (, "", ,, "Don't panic! I'm just a friendly reminder!", ,, "It is impossible for time to go backward, therefore...", ,, "You cannot put negative value of duration: (", +, durationMillis, +, ")", ,]
[throw, new, FriendlyReminderException, (, join, (, "", ,, "Don't panic! I'm just a friendly reminder!", ,, "It is impossible for time to go backward, therefore...", ,, "You cannot put negative value of duration: (", +, durationMillis, +, ")", ,, "as argument of timer methods (after(), timeout())", ,]
[durationMillis, +, ")", ,, "as argument of timer methods (after(), timeout())", ,, "", ), ), ;, }, private, MockName, safelyGetMockName, (, Object, mock, ), {, return]
[durationMillis, +, ")", ,, "as argument of timer methods (after(), timeout())", ,, "", ), ), ;, }, private, MockName, safelyGetMockName, (, Object, mock, ), {, return]
[), ), ;, }, private, MockName, safelyGetMockName, (, Object, mock, ), {, return, new, MockUtil, (, ), ., getMockName, (]
