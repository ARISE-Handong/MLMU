[;, static, final, DiagnosticType, MODULE_DEPENDENCY_ERROR, =, DiagnosticType, ., error, (, "JSC_MODULE_DEPENDENCY_ERROR", ,, "Bad dependency: {0} -> {1}. ", +, "Modules must be listed in dependency order.", ), ;, static, final, DiagnosticType]
[;, static, final, DiagnosticType, MISSING_ENTRY_ERROR, =, DiagnosticType, ., error, (, "JSC_MISSING_ENTRY_ERROR", ,, "required entry point \"{0}\" never provided", ), ;, private, static, final, String, CONFIG_RESOURCE]
[., error, (, "JSC_MODULE_DEPENDENCY_ERROR", ,, "Bad dependency: {0} -> {1}. ", +, "Modules must be listed in dependency order.", ), ;, static, final, DiagnosticType, MISSING_ENTRY_ERROR, =, DiagnosticType, ., error, (, "JSC_MISSING_ENTRY_ERROR"]
[,, "Bad dependency: {0} -> {1}. ", +, "Modules must be listed in dependency order.", ), ;, static, final, DiagnosticType, MISSING_ENTRY_ERROR, =, DiagnosticType, ., error, (, "JSC_MISSING_ENTRY_ERROR", ,, "required entry point \"{0}\" never provided", ), ;]
[), ;, static, final, DiagnosticType, MISSING_ENTRY_ERROR, =, DiagnosticType, ., error, (, "JSC_MISSING_ENTRY_ERROR", ,, "required entry point \"{0}\" never provided", ), ;, private, static, final, String]
[+, "Modules must be listed in dependency order.", ), ;, static, final, DiagnosticType, MISSING_ENTRY_ERROR, =, DiagnosticType, ., error, (, "JSC_MISSING_ENTRY_ERROR", ,, "required entry point \"{0}\" never provided", ), ;, private, static]
[), ;, static, final, DiagnosticType, MISSING_ENTRY_ERROR, =, DiagnosticType, ., error, (, "JSC_MISSING_ENTRY_ERROR", ,, "required entry point \"{0}\" never provided", ), ;, private, static, final, String]
[;, private, static, final, String, CONFIG_RESOURCE, =, "com.google.javascript.jscomp.parsing.ParserConfig", ;, CompilerOptions, options, =, null, ;, private, PassConfig, passes, =, null, ;]
[., error, (, "JSC_MISSING_ENTRY_ERROR", ,, "required entry point \"{0}\" never provided", ), ;, private, static, final, String, CONFIG_RESOURCE, =, "com.google.javascript.jscomp.parsing.ParserConfig", ;, CompilerOptions, options, =, null]
[,, "required entry point \"{0}\" never provided", ), ;, private, static, final, String, CONFIG_RESOURCE, =, "com.google.javascript.jscomp.parsing.ParserConfig", ;, CompilerOptions, options, =, null, ;, private, PassConfig, passes]
[), ;, private, static, final, String, CONFIG_RESOURCE, =, "com.google.javascript.jscomp.parsing.ParserConfig", ;, CompilerOptions, options, =, null, ;, private, PassConfig, passes, =, null]
[;, CompilerOptions, options, =, null, ;, private, PassConfig, passes, =, null, ;, private, List, <, CompilerInput, >, externs, ;, private]
[;, private, PassConfig, passes, =, null, ;, private, List, <, CompilerInput, >, externs, ;, private, List, <, JSModule, >, modules]
[;, private, List, <, CompilerInput, >, externs, ;, private, List, <, JSModule, >, modules, ;, private, JSModuleGraph, moduleGraph, ;, private]
[;, Node, externsRoot, ;, Node, jsRoot, ;, Node, externAndJsRoot, ;, private, Map, <, InputId, ,, CompilerInput, >, inputsById, ;, private]
[., newLinkedHashMap, (, ), ;, Node, externsRoot, ;, Node, jsRoot, ;, Node, externAndJsRoot, ;, private, Map, <, InputId, ,, CompilerInput]
[;, private, int, uniqueNameId, =, 0, ;, private, boolean, hasRegExpGlobalReferences, =, true, ;, private, FunctionInformationMap, functionInformationMap, ;, private, final, StringBuilder]
[;, private, boolean, hasRegExpGlobalReferences, =, true, ;, private, FunctionInformationMap, functionInformationMap, ;, private, final, StringBuilder, debugLog, =, new, StringBuilder, (, )]
[;, private, FunctionInformationMap, functionInformationMap, ;, private, final, StringBuilder, debugLog, =, new, StringBuilder, (, ), ;, CodingConvention, defaultCodingConvention, =, new, ClosureCodingConvention]
[;, CodingConvention, defaultCodingConvention, =, new, ClosureCodingConvention, (, ), ;, private, JSTypeRegistry, typeRegistry, ;, private, Config, parserConfig, =, null, ;, private]
[;, private, JSTypeRegistry, typeRegistry, ;, private, Config, parserConfig, =, null, ;, private, ReverseAbstractInterpreter, abstractInterpreter, ;, private, TypeValidator, typeValidator, ;, public]
[;, private, ReverseAbstractInterpreter, abstractInterpreter, ;, private, TypeValidator, typeValidator, ;, public, PerformanceTracker, tracker, ;, private, final, com, ., google, ., javascript]
[;, private, final, ErrorReporter, defaultErrorReporter, =, RhinoErrorReporter, ., forNewRhino, (, this, ), ;, public, static, final, DiagnosticType, OPTIMIZE_LOOP_ERROR, =, DiagnosticType]
[., forOldRhino, (, this, ), ;, private, final, ErrorReporter, defaultErrorReporter, =, RhinoErrorReporter, ., forNewRhino, (, this, ), ;, public, static]
[), ;, private, final, ErrorReporter, defaultErrorReporter, =, RhinoErrorReporter, ., forNewRhino, (, this, ), ;, public, static, final, DiagnosticType, OPTIMIZE_LOOP_ERROR, =]
[;, public, static, final, DiagnosticType, OPTIMIZE_LOOP_ERROR, =, DiagnosticType, ., error, (, "JSC_OPTIMIZE_LOOP_ERROR", ,, "Exceeded max number of optimization iterations: {0}", ), ;, public, static, final, DiagnosticType]
[., forNewRhino, (, this, ), ;, public, static, final, DiagnosticType, OPTIMIZE_LOOP_ERROR, =, DiagnosticType, ., error, (, "JSC_OPTIMIZE_LOOP_ERROR", ,, "Exceeded max number of optimization iterations: {0}", )]
[), ;, public, static, final, DiagnosticType, OPTIMIZE_LOOP_ERROR, =, DiagnosticType, ., error, (, "JSC_OPTIMIZE_LOOP_ERROR", ,, "Exceeded max number of optimization iterations: {0}", ), ;, public, static, final]
[;, public, static, final, DiagnosticType, MOTION_ITERATIONS_ERROR, =, DiagnosticType, ., error, (, "JSC_OPTIMIZE_LOOP_ERROR", ,, "Exceeded max number of code motion iterations: {0}", ), ;, private, static, final, long]
[., error, (, "JSC_OPTIMIZE_LOOP_ERROR", ,, "Exceeded max number of optimization iterations: {0}", ), ;, public, static, final, DiagnosticType, MOTION_ITERATIONS_ERROR, =, DiagnosticType, ., error, (, "JSC_OPTIMIZE_LOOP_ERROR", ,]
[,, "Exceeded max number of optimization iterations: {0}", ), ;, public, static, final, DiagnosticType, MOTION_ITERATIONS_ERROR, =, DiagnosticType, ., error, (, "JSC_OPTIMIZE_LOOP_ERROR", ,, "Exceeded max number of code motion iterations: {0}", ), ;, private]
[), ;, public, static, final, DiagnosticType, MOTION_ITERATIONS_ERROR, =, DiagnosticType, ., error, (, "JSC_OPTIMIZE_LOOP_ERROR", ,, "Exceeded max number of code motion iterations: {0}", ), ;, private, static, final]
[;, private, static, final, long, COMPILER_STACK_SIZE, =, (, 1, <<, 21, ), ;, private, static, final, ExecutorService, compilerExecutor, =, Executors]
[., error, (, "JSC_OPTIMIZE_LOOP_ERROR", ,, "Exceeded max number of code motion iterations: {0}", ), ;, private, static, final, long, COMPILER_STACK_SIZE, =, (, 1, <<, 21, ), ;]
[,, "Exceeded max number of code motion iterations: {0}", ), ;, private, static, final, long, COMPILER_STACK_SIZE, =, (, 1, <<, 21, ), ;, private, static, final, ExecutorService]
[), ;, private, static, final, long, COMPILER_STACK_SIZE, =, (, 1, <<, 21, ), ;, private, static, final, ExecutorService, compilerExecutor, =]
[;, private, static, final, ExecutorService, compilerExecutor, =, Executors, ., newCachedThreadPool, (, new, ThreadFactory, (, ), {, @, Override, public, Thread]
[), ;, private, static, final, ExecutorService, compilerExecutor, =, Executors, ., newCachedThreadPool, (, new, ThreadFactory, (, ), {, @, Override, public]
[<<, 21, ), ;, private, static, final, ExecutorService, compilerExecutor, =, Executors, ., newCachedThreadPool, (, new, ThreadFactory, (, ), {, @]
[), ;, private, static, final, ExecutorService, compilerExecutor, =, Executors, ., newCachedThreadPool, (, new, ThreadFactory, (, ), {, @, Override, public]
[;, private, Thread, compilerThread, =, null, ;, private, boolean, useThreads, =, true, ;, private, static, final, Logger, logger, =, Logger]
[., newCachedThreadPool, (, new, ThreadFactory, (, ), {, @, Override, public, Thread, newThread, (, Runnable, r, ), {, return, new]
[), ;, private, Thread, compilerThread, =, null, ;, private, boolean, useThreads, =, true, ;, private, static, final, Logger, logger, =]
[;, }, }, ), ;, private, Thread, compilerThread, =, null, ;, private, boolean, useThreads, =, true, ;, private, static, final]
[,, r, ,, "jscompiler", ,, COMPILER_STACK_SIZE, ), ;, }, }, ), ;, private, Thread, compilerThread, =, null, ;, private, boolean]
[,, "jscompiler", ,, COMPILER_STACK_SIZE, ), ;, }, }, ), ;, private, Thread, compilerThread, =, null, ;, private, boolean, useThreads, =]
[,, COMPILER_STACK_SIZE, ), ;, }, }, ), ;, private, Thread, compilerThread, =, null, ;, private, boolean, useThreads, =, true, ;]
[), ;, }, }, ), ;, private, Thread, compilerThread, =, null, ;, private, boolean, useThreads, =, true, ;, private, static]
[;, private, boolean, useThreads, =, true, ;, private, static, final, Logger, logger, =, Logger, ., getLogger, (, "com.google.javascript.jscomp", ), ;]
[;, private, static, final, Logger, logger, =, Logger, ., getLogger, (, "com.google.javascript.jscomp", ), ;, private, final, PrintStream, outStream, ;, private]
[;, private, final, PrintStream, outStream, ;, private, GlobalVarReferenceMap, globalRefMap, =, null, ;, private, volatile, double, progress, =, 0.0, ;, private]
[., getLogger, (, "com.google.javascript.jscomp", ), ;, private, final, PrintStream, outStream, ;, private, GlobalVarReferenceMap, globalRefMap, =, null, ;, private, volatile, double]
[), ;, private, final, PrintStream, outStream, ;, private, GlobalVarReferenceMap, globalRefMap, =, null, ;, private, volatile, double, progress, =, 0.0, ;]
[;, private, volatile, double, progress, =, 0.0, ;, private, String, lastPassName, ;, public, Compiler, (, ), {, this, (, (]
[;, private, String, lastPassName, ;, public, Compiler, (, ), {, this, (, (, PrintStream, ), null, ), ;, }, public]
[), ;, }, public, Compiler, (, PrintStream, stream, ), {, addChangeHandler, (, recentChange, ), ;, outStream, =, stream, ;, }]
[), ;, }, public, Compiler, (, PrintStream, stream, ), {, addChangeHandler, (, recentChange, ), ;, outStream, =, stream, ;, }]
[;, outStream, =, stream, ;, }, public, Compiler, (, ErrorManager, errorManager, ), {, this, (, ), ;, setErrorManager, (, errorManager]
[), ;, outStream, =, stream, ;, }, public, Compiler, (, ErrorManager, errorManager, ), {, this, (, ), ;, setErrorManager, (]
[=, stream, ;, }, public, Compiler, (, ErrorManager, errorManager, ), {, this, (, ), ;, setErrorManager, (, errorManager, ), ;]
[;, }, public, Compiler, (, ErrorManager, errorManager, ), {, this, (, ), ;, setErrorManager, (, errorManager, ), ;, }, public]
[;, }, public, void, setErrorManager, (, ErrorManager, errorManager, ), {, Preconditions, ., checkNotNull, (, errorManager, ,, "the error manager cannot be null", ), ;, this]
[), ;, }, public, void, setErrorManager, (, ErrorManager, errorManager, ), {, Preconditions, ., checkNotNull, (, errorManager, ,, "the error manager cannot be null", ), ;]
[;, this, ., errorManager, =, errorManager, ;, }, private, MessageFormatter, createMessageFormatter, (, ), {, boolean, colorize, =, options, ., shouldColorizeErrorOutput]
[., checkNotNull, (, errorManager, ,, "the error manager cannot be null", ), ;, this, ., errorManager, =, errorManager, ;, }, private, MessageFormatter, createMessageFormatter, (, )]
[,, "the error manager cannot be null", ), ;, this, ., errorManager, =, errorManager, ;, }, private, MessageFormatter, createMessageFormatter, (, ), {, boolean, colorize, =]
[), ;, this, ., errorManager, =, errorManager, ;, }, private, MessageFormatter, createMessageFormatter, (, ), {, boolean, colorize, =, options, .]
[=, errorManager, ;, }, private, MessageFormatter, createMessageFormatter, (, ), {, boolean, colorize, =, options, ., shouldColorizeErrorOutput, (, ), ;, return]
[., errorManager, =, errorManager, ;, }, private, MessageFormatter, createMessageFormatter, (, ), {, boolean, colorize, =, options, ., shouldColorizeErrorOutput, (, )]
[;, }, private, MessageFormatter, createMessageFormatter, (, ), {, boolean, colorize, =, options, ., shouldColorizeErrorOutput, (, ), ;, return, options, .]
[;, return, options, ., errorFormat, ., toFormatter, (, this, ,, colorize, ), ;, }, public, void, initOptions, (, CompilerOptions, options]
[., shouldColorizeErrorOutput, (, ), ;, return, options, ., errorFormat, ., toFormatter, (, this, ,, colorize, ), ;, }, public, void]
[;, }, public, void, initOptions, (, CompilerOptions, options, ), {, this, ., options, =, options, ;, if, (, errorManager, ==]
[., toFormatter, (, this, ,, colorize, ), ;, }, public, void, initOptions, (, CompilerOptions, options, ), {, this, ., options]
[., errorFormat, ., toFormatter, (, this, ,, colorize, ), ;, }, public, void, initOptions, (, CompilerOptions, options, ), {, this]
[,, colorize, ), ;, }, public, void, initOptions, (, CompilerOptions, options, ), {, this, ., options, =, options, ;, if]
[), ;, }, public, void, initOptions, (, CompilerOptions, options, ), {, this, ., options, =, options, ;, if, (, errorManager]
[=, options, ;, if, (, errorManager, ==, null, ), {, if, (, outStream, ==, null, ), {, setErrorManager, (, new]
[., options, =, options, ;, if, (, errorManager, ==, null, ), {, if, (, outStream, ==, null, ), {, setErrorManager]
[;, if, (, errorManager, ==, null, ), {, if, (, outStream, ==, null, ), {, setErrorManager, (, new, LoggerErrorManager, (]
[), {, if, (, outStream, ==, null, ), {, setErrorManager, (, new, LoggerErrorManager, (, createMessageFormatter, (, ), ,, logger, )]
[==, null, ), {, if, (, outStream, ==, null, ), {, setErrorManager, (, new, LoggerErrorManager, (, createMessageFormatter, (, ), ,]
[), {, if, (, outStream, ==, null, ), {, setErrorManager, (, new, LoggerErrorManager, (, createMessageFormatter, (, ), ,, logger, )]
[), {, setErrorManager, (, new, LoggerErrorManager, (, createMessageFormatter, (, ), ,, logger, ), ), ;, }, else, {, PrintStreamErrorManager, printer]
[==, null, ), {, setErrorManager, (, new, LoggerErrorManager, (, createMessageFormatter, (, ), ,, logger, ), ), ;, }, else, {]
[), {, setErrorManager, (, new, LoggerErrorManager, (, createMessageFormatter, (, ), ,, logger, ), ), ;, }, else, {, PrintStreamErrorManager, printer]
[;, }, else, {, PrintStreamErrorManager, printer, =, new, PrintStreamErrorManager, (, createMessageFormatter, (, ), ,, outStream, ), ;, printer, ., setSummaryDetailLevel]
[), ;, }, else, {, PrintStreamErrorManager, printer, =, new, PrintStreamErrorManager, (, createMessageFormatter, (, ), ,, outStream, ), ;, printer, .]
[,, logger, ), ), ;, }, else, {, PrintStreamErrorManager, printer, =, new, PrintStreamErrorManager, (, createMessageFormatter, (, ), ,, outStream, )]
[), ), ;, }, else, {, PrintStreamErrorManager, printer, =, new, PrintStreamErrorManager, (, createMessageFormatter, (, ), ,, outStream, ), ;, printer]
[;, printer, ., setSummaryDetailLevel, (, options, ., summaryDetailLevel, ), ;, setErrorManager, (, printer, ), ;, }, }, if, (, options]
[,, outStream, ), ;, printer, ., setSummaryDetailLevel, (, options, ., summaryDetailLevel, ), ;, setErrorManager, (, printer, ), ;, }, }]
[), ;, printer, ., setSummaryDetailLevel, (, options, ., summaryDetailLevel, ), ;, setErrorManager, (, printer, ), ;, }, }, if, (]
[;, setErrorManager, (, printer, ), ;, }, }, if, (, options, ., enables, (, DiagnosticGroups, ., CHECK_TYPES, ), ), {]
[., setSummaryDetailLevel, (, options, ., summaryDetailLevel, ), ;, setErrorManager, (, printer, ), ;, }, }, if, (, options, ., enables]
[), ;, setErrorManager, (, printer, ), ;, }, }, if, (, options, ., enables, (, DiagnosticGroups, ., CHECK_TYPES, ), )]
[., summaryDetailLevel, ), ;, setErrorManager, (, printer, ), ;, }, }, if, (, options, ., enables, (, DiagnosticGroups, ., CHECK_TYPES]
[;, }, }, if, (, options, ., enables, (, DiagnosticGroups, ., CHECK_TYPES, ), ), {, options, ., checkTypes, =, true]
[), ;, }, }, if, (, options, ., enables, (, DiagnosticGroups, ., CHECK_TYPES, ), ), {, options, ., checkTypes, =]
[), {, options, ., checkTypes, =, true, ;, }, else, if, (, options, ., disables, (, DiagnosticGroups, ., CHECK_TYPES, )]
[., enables, (, DiagnosticGroups, ., CHECK_TYPES, ), ), {, options, ., checkTypes, =, true, ;, }, else, if, (, options]
[), ), {, options, ., checkTypes, =, true, ;, }, else, if, (, options, ., disables, (, DiagnosticGroups, ., CHECK_TYPES]
[., CHECK_TYPES, ), ), {, options, ., checkTypes, =, true, ;, }, else, if, (, options, ., disables, (, DiagnosticGroups]
[=, true, ;, }, else, if, (, options, ., disables, (, DiagnosticGroups, ., CHECK_TYPES, ), ), {, options, ., checkTypes]
[., checkTypes, =, true, ;, }, else, if, (, options, ., disables, (, DiagnosticGroups, ., CHECK_TYPES, ), ), {, options]
[;, }, else, if, (, options, ., disables, (, DiagnosticGroups, ., CHECK_TYPES, ), ), {, options, ., checkTypes, =, false]
[), {, options, ., checkTypes, =, false, ;, }, else, if, (, !, options, ., checkTypes, ), {, options, .]
[., disables, (, DiagnosticGroups, ., CHECK_TYPES, ), ), {, options, ., checkTypes, =, false, ;, }, else, if, (, !]
[), ), {, options, ., checkTypes, =, false, ;, }, else, if, (, !, options, ., checkTypes, ), {, options]
[., CHECK_TYPES, ), ), {, options, ., checkTypes, =, false, ;, }, else, if, (, !, options, ., checkTypes, )]
[=, false, ;, }, else, if, (, !, options, ., checkTypes, ), {, options, ., setWarningLevel, (, DiagnosticGroup, ., forType]
[., checkTypes, =, false, ;, }, else, if, (, !, options, ., checkTypes, ), {, options, ., setWarningLevel, (, DiagnosticGroup]
[;, }, else, if, (, !, options, ., checkTypes, ), {, options, ., setWarningLevel, (, DiagnosticGroup, ., forType, (, RhinoErrorReporter]
[), {, options, ., setWarningLevel, (, DiagnosticGroup, ., forType, (, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ), ,, CheckLevel, ., OFF, ), ;]
[), {, options, ., setWarningLevel, (, DiagnosticGroup, ., forType, (, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ), ,, CheckLevel, ., OFF, ), ;]
[., checkTypes, ), {, options, ., setWarningLevel, (, DiagnosticGroup, ., forType, (, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ), ,, CheckLevel, ., OFF]
[;, }, if, (, options, ., checkGlobalThisLevel, ., isOn, (, ), &&, !, options, ., disables, (, DiagnosticGroups, ., GLOBAL_THIS]
[., setWarningLevel, (, DiagnosticGroup, ., forType, (, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ), ,, CheckLevel, ., OFF, ), ;, }, if, (]
[,, CheckLevel, ., OFF, ), ;, }, if, (, options, ., checkGlobalThisLevel, ., isOn, (, ), &&, !, options, .]
[., forType, (, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ), ,, CheckLevel, ., OFF, ), ;, }, if, (, options, ., checkGlobalThisLevel, .]
[), ,, CheckLevel, ., OFF, ), ;, }, if, (, options, ., checkGlobalThisLevel, ., isOn, (, ), &&, !, options]
[., TYPE_PARSE_ERROR, ), ,, CheckLevel, ., OFF, ), ;, }, if, (, options, ., checkGlobalThisLevel, ., isOn, (, ), &&]
[), ;, }, if, (, options, ., checkGlobalThisLevel, ., isOn, (, ), &&, !, options, ., disables, (, DiagnosticGroups, .]
[., OFF, ), ;, }, if, (, options, ., checkGlobalThisLevel, ., isOn, (, ), &&, !, options, ., disables, (]
[), {, options, ., setWarningLevel, (, DiagnosticGroups, ., GLOBAL_THIS, ,, options, ., checkGlobalThisLevel, ), ;, }, if, (, options, .]
[&&, !, options, ., disables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ), {, options, ., setWarningLevel, (, DiagnosticGroups, ., GLOBAL_THIS, ,]
[., isOn, (, ), &&, !, options, ., disables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ), {, options, ., setWarningLevel, (]
[., checkGlobalThisLevel, ., isOn, (, ), &&, !, options, ., disables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ), {, options, .]
[), {, options, ., setWarningLevel, (, DiagnosticGroups, ., GLOBAL_THIS, ,, options, ., checkGlobalThisLevel, ), ;, }, if, (, options, .]
[), {, options, ., setWarningLevel, (, DiagnosticGroups, ., GLOBAL_THIS, ,, options, ., checkGlobalThisLevel, ), ;, }, if, (, options, .]
[., disables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ), {, options, ., setWarningLevel, (, DiagnosticGroups, ., GLOBAL_THIS, ,, options, ., checkGlobalThisLevel]
[), ), {, options, ., setWarningLevel, (, DiagnosticGroups, ., GLOBAL_THIS, ,, options, ., checkGlobalThisLevel, ), ;, }, if, (, options]
[., GLOBAL_THIS, ), ), {, options, ., setWarningLevel, (, DiagnosticGroups, ., GLOBAL_THIS, ,, options, ., checkGlobalThisLevel, ), ;, }, if]
[;, }, if, (, options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ), {, options, ., setWarningLevel, (, DiagnosticGroups]
[., setWarningLevel, (, DiagnosticGroups, ., GLOBAL_THIS, ,, options, ., checkGlobalThisLevel, ), ;, }, if, (, options, ., getLanguageIn, (, )]
[,, options, ., checkGlobalThisLevel, ), ;, }, if, (, options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ), {]
[., GLOBAL_THIS, ,, options, ., checkGlobalThisLevel, ), ;, }, if, (, options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT]
[), ;, }, if, (, options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ), {, options, ., setWarningLevel, (]
[., checkGlobalThisLevel, ), ;, }, if, (, options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ), {, options, .]
[), {, options, ., setWarningLevel, (, DiagnosticGroups, ., ES5_STRICT, ,, CheckLevel, ., ERROR, ), ;, }, List, <, WarningsGuard, >]
[==, LanguageMode, ., ECMASCRIPT5_STRICT, ), {, options, ., setWarningLevel, (, DiagnosticGroups, ., ES5_STRICT, ,, CheckLevel, ., ERROR, ), ;, }]
[., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ), {, options, ., setWarningLevel, (, DiagnosticGroups, ., ES5_STRICT, ,, CheckLevel, .]
[), {, options, ., setWarningLevel, (, DiagnosticGroups, ., ES5_STRICT, ,, CheckLevel, ., ERROR, ), ;, }, List, <, WarningsGuard, >]
[., ECMASCRIPT5_STRICT, ), {, options, ., setWarningLevel, (, DiagnosticGroups, ., ES5_STRICT, ,, CheckLevel, ., ERROR, ), ;, }, List, <]
[;, }, List, <, WarningsGuard, >, guards, =, Lists, ., newArrayList, (, ), ;, guards, ., add, (, new, SuppressDocWarningsGuard]
[., setWarningLevel, (, DiagnosticGroups, ., ES5_STRICT, ,, CheckLevel, ., ERROR, ), ;, }, List, <, WarningsGuard, >, guards, =, Lists]
[,, CheckLevel, ., ERROR, ), ;, }, List, <, WarningsGuard, >, guards, =, Lists, ., newArrayList, (, ), ;, guards]
[., ES5_STRICT, ,, CheckLevel, ., ERROR, ), ;, }, List, <, WarningsGuard, >, guards, =, Lists, ., newArrayList, (, )]
[), ;, }, List, <, WarningsGuard, >, guards, =, Lists, ., newArrayList, (, ), ;, guards, ., add, (, new]
[., ERROR, ), ;, }, List, <, WarningsGuard, >, guards, =, Lists, ., newArrayList, (, ), ;, guards, ., add]
[;, guards, ., add, (, new, SuppressDocWarningsGuard, (, getDiagnosticGroups, (, ), ., getRegisteredGroups, (, ), ), ), ;, guards, .]
[., newArrayList, (, ), ;, guards, ., add, (, new, SuppressDocWarningsGuard, (, getDiagnosticGroups, (, ), ., getRegisteredGroups, (, ), )]
[;, guards, ., add, (, options, ., getWarningsGuard, (, ), ), ;, ComposeWarningsGuard, composedGuards, =, new, ComposeWarningsGuard, (, guards, )]
[., add, (, new, SuppressDocWarningsGuard, (, getDiagnosticGroups, (, ), ., getRegisteredGroups, (, ), ), ), ;, guards, ., add, (]
[), ;, guards, ., add, (, options, ., getWarningsGuard, (, ), ), ;, ComposeWarningsGuard, composedGuards, =, new, ComposeWarningsGuard, (, guards]
[), ), ;, guards, ., add, (, options, ., getWarningsGuard, (, ), ), ;, ComposeWarningsGuard, composedGuards, =, new, ComposeWarningsGuard, (]
[., getRegisteredGroups, (, ), ), ), ;, guards, ., add, (, options, ., getWarningsGuard, (, ), ), ;, ComposeWarningsGuard, composedGuards]
[;, ComposeWarningsGuard, composedGuards, =, new, ComposeWarningsGuard, (, guards, ), ;, if, (, !, options, ., checkSymbols, &&, !, composedGuards, .]
[., add, (, options, ., getWarningsGuard, (, ), ), ;, ComposeWarningsGuard, composedGuards, =, new, ComposeWarningsGuard, (, guards, ), ;, if]
[), ;, ComposeWarningsGuard, composedGuards, =, new, ComposeWarningsGuard, (, guards, ), ;, if, (, !, options, ., checkSymbols, &&, !, composedGuards]
[., getWarningsGuard, (, ), ), ;, ComposeWarningsGuard, composedGuards, =, new, ComposeWarningsGuard, (, guards, ), ;, if, (, !, options, .]
[;, if, (, !, options, ., checkSymbols, &&, !, composedGuards, ., enables, (, DiagnosticGroups, ., CHECK_VARIABLES, ), ), {, composedGuards]
[), ;, if, (, !, options, ., checkSymbols, &&, !, composedGuards, ., enables, (, DiagnosticGroups, ., CHECK_VARIABLES, ), ), {]
[), {, composedGuards, ., addGuard, (, new, DiagnosticGroupWarningsGuard, (, DiagnosticGroups, ., CHECK_VARIABLES, ,, CheckLevel, ., OFF, ), ), ;, }]
[&&, !, composedGuards, ., enables, (, DiagnosticGroups, ., CHECK_VARIABLES, ), ), {, composedGuards, ., addGuard, (, new, DiagnosticGroupWarningsGuard, (, DiagnosticGroups]
[&&, !, composedGuards, ., enables, (, DiagnosticGroups, ., CHECK_VARIABLES, ), ), {, composedGuards, ., addGuard, (, new, DiagnosticGroupWarningsGuard, (, DiagnosticGroups]
[., checkSymbols, &&, !, composedGuards, ., enables, (, DiagnosticGroups, ., CHECK_VARIABLES, ), ), {, composedGuards, ., addGuard, (, new, DiagnosticGroupWarningsGuard]
[), {, composedGuards, ., addGuard, (, new, DiagnosticGroupWarningsGuard, (, DiagnosticGroups, ., CHECK_VARIABLES, ,, CheckLevel, ., OFF, ), ), ;, }]
[), {, composedGuards, ., addGuard, (, new, DiagnosticGroupWarningsGuard, (, DiagnosticGroups, ., CHECK_VARIABLES, ,, CheckLevel, ., OFF, ), ), ;, }]
[., enables, (, DiagnosticGroups, ., CHECK_VARIABLES, ), ), {, composedGuards, ., addGuard, (, new, DiagnosticGroupWarningsGuard, (, DiagnosticGroups, ., CHECK_VARIABLES, ,]
[), ), {, composedGuards, ., addGuard, (, new, DiagnosticGroupWarningsGuard, (, DiagnosticGroups, ., CHECK_VARIABLES, ,, CheckLevel, ., OFF, ), ), ;]
[., CHECK_VARIABLES, ), ), {, composedGuards, ., addGuard, (, new, DiagnosticGroupWarningsGuard, (, DiagnosticGroups, ., CHECK_VARIABLES, ,, CheckLevel, ., OFF, )]
[;, }, this, ., warningsGuard, =, composedGuards, ;, }, @, Deprecated, public, void, init, (, JSSourceFile, [, ], externs, ,]
[., addGuard, (, new, DiagnosticGroupWarningsGuard, (, DiagnosticGroups, ., CHECK_VARIABLES, ,, CheckLevel, ., OFF, ), ), ;, }, this, ., warningsGuard]
[), ;, }, this, ., warningsGuard, =, composedGuards, ;, }, @, Deprecated, public, void, init, (, JSSourceFile, [, ], externs]
[,, CheckLevel, ., OFF, ), ), ;, }, this, ., warningsGuard, =, composedGuards, ;, }, @, Deprecated, public, void, init]
[., CHECK_VARIABLES, ,, CheckLevel, ., OFF, ), ), ;, }, this, ., warningsGuard, =, composedGuards, ;, }, @, Deprecated, public]
[), ), ;, }, this, ., warningsGuard, =, composedGuards, ;, }, @, Deprecated, public, void, init, (, JSSourceFile, [, ]]
[., OFF, ), ), ;, }, this, ., warningsGuard, =, composedGuards, ;, }, @, Deprecated, public, void, init, (, JSSourceFile]
[=, composedGuards, ;, }, @, Deprecated, public, void, init, (, JSSourceFile, [, ], externs, ,, JSSourceFile, [, ], inputs, ,]
[., warningsGuard, =, composedGuards, ;, }, @, Deprecated, public, void, init, (, JSSourceFile, [, ], externs, ,, JSSourceFile, [, ]]
[;, }, @, Deprecated, public, void, init, (, JSSourceFile, [, ], externs, ,, JSSourceFile, [, ], inputs, ,, CompilerOptions, options]
[;, }, public, <, T1, extends, SourceFile, ,, T2, extends, SourceFile, >, void, init, (, List, <, T1, >, externs]
[,, Lists, ., <, JSSourceFile, >, newArrayList, (, inputs, ), ,, options, ), ;, }, public, <, T1, extends, SourceFile]
[., <, JSSourceFile, >, newArrayList, (, externs, ), ,, Lists, ., <, JSSourceFile, >, newArrayList, (, inputs, ), ,, options]
[), ,, Lists, ., <, JSSourceFile, >, newArrayList, (, inputs, ), ,, options, ), ;, }, public, <, T1, extends]
[,, options, ), ;, }, public, <, T1, extends, SourceFile, ,, T2, extends, SourceFile, >, void, init, (, List, <]
[., <, JSSourceFile, >, newArrayList, (, inputs, ), ,, options, ), ;, }, public, <, T1, extends, SourceFile, ,, T2]
[), ,, options, ), ;, }, public, <, T1, extends, SourceFile, ,, T2, extends, SourceFile, >, void, init, (, List]
[), ;, }, public, <, T1, extends, SourceFile, ,, T2, extends, SourceFile, >, void, init, (, List, <, T1, >]
[;, for, (, SourceFile, input, :, inputs, ), {, module, ., add, (, input, ), ;, }, initModules, (, externs]
[), ;, for, (, SourceFile, input, :, inputs, ), {, module, ., add, (, input, ), ;, }, initModules, (]
[), {, module, ., add, (, input, ), ;, }, initModules, (, externs, ,, Lists, ., newArrayList, (, module, )]
[;, }, initModules, (, externs, ,, Lists, ., newArrayList, (, module, ), ,, options, ), ;, }, @, Deprecated, public]
[., add, (, input, ), ;, }, initModules, (, externs, ,, Lists, ., newArrayList, (, module, ), ,, options, )]
[), ;, }, initModules, (, externs, ,, Lists, ., newArrayList, (, module, ), ,, options, ), ;, }, @, Deprecated]
[;, }, @, Deprecated, public, void, init, (, JSSourceFile, [, ], externs, ,, JSModule, [, ], modules, ,, CompilerOptions, options]
[,, Lists, ., newArrayList, (, module, ), ,, options, ), ;, }, @, Deprecated, public, void, init, (, JSSourceFile, []
[,, options, ), ;, }, @, Deprecated, public, void, init, (, JSSourceFile, [, ], externs, ,, JSModule, [, ], modules]
[., newArrayList, (, module, ), ,, options, ), ;, }, @, Deprecated, public, void, init, (, JSSourceFile, [, ], externs]
[), ,, options, ), ;, }, @, Deprecated, public, void, init, (, JSSourceFile, [, ], externs, ,, JSModule, [, ]]
[), ;, }, @, Deprecated, public, void, init, (, JSSourceFile, [, ], externs, ,, JSModule, [, ], modules, ,, CompilerOptions]
[;, }, public, <, T, extends, SourceFile, >, void, initModules, (, List, <, T, >, externs, ,, List, <, JSModule]
[,, Lists, ., <, JSModule, >, newArrayList, (, modules, ), ,, options, ), ;, }, public, <, T, extends, SourceFile]
[., <, SourceFile, >, newArrayList, (, externs, ), ,, Lists, ., <, JSModule, >, newArrayList, (, modules, ), ,, options]
[), ,, Lists, ., <, JSModule, >, newArrayList, (, modules, ), ,, options, ), ;, }, public, <, T, extends]
[,, options, ), ;, }, public, <, T, extends, SourceFile, >, void, initModules, (, List, <, T, >, externs, ,]
[., <, JSModule, >, newArrayList, (, modules, ), ,, options, ), ;, }, public, <, T, extends, SourceFile, >, void]
[), ,, options, ), ;, }, public, <, T, extends, SourceFile, >, void, initModules, (, List, <, T, >, externs]
[), ;, }, public, <, T, extends, SourceFile, >, void, initModules, (, List, <, T, >, externs, ,, List, <]
[;, checkFirstModule, (, modules, ), ;, fillEmptyModules, (, modules, ), ;, this, ., externs, =, makeCompilerInput, (, externs, ,, true]
[), ;, checkFirstModule, (, modules, ), ;, fillEmptyModules, (, modules, ), ;, this, ., externs, =, makeCompilerInput, (, externs, ,]
[;, fillEmptyModules, (, modules, ), ;, this, ., externs, =, makeCompilerInput, (, externs, ,, true, ), ;, this, ., modules]
[), ;, fillEmptyModules, (, modules, ), ;, this, ., externs, =, makeCompilerInput, (, externs, ,, true, ), ;, this, .]
[;, this, ., externs, =, makeCompilerInput, (, externs, ,, true, ), ;, this, ., modules, =, modules, ;, if, (]
[), ;, this, ., externs, =, makeCompilerInput, (, externs, ,, true, ), ;, this, ., modules, =, modules, ;, if]
[=, makeCompilerInput, (, externs, ,, true, ), ;, this, ., modules, =, modules, ;, if, (, modules, ., size, (]
[., externs, =, makeCompilerInput, (, externs, ,, true, ), ;, this, ., modules, =, modules, ;, if, (, modules, .]
[;, this, ., modules, =, modules, ;, if, (, modules, ., size, (, ), >, 1, ), {, try, {]
[,, true, ), ;, this, ., modules, =, modules, ;, if, (, modules, ., size, (, ), >, 1, )]
[), ;, this, ., modules, =, modules, ;, if, (, modules, ., size, (, ), >, 1, ), {, try]
[=, modules, ;, if, (, modules, ., size, (, ), >, 1, ), {, try, {, this, ., moduleGraph, =]
[., modules, =, modules, ;, if, (, modules, ., size, (, ), >, 1, ), {, try, {, this, .]
[;, if, (, modules, ., size, (, ), >, 1, ), {, try, {, this, ., moduleGraph, =, new, JSModuleGraph]
[), {, try, {, this, ., moduleGraph, =, new, JSModuleGraph, (, modules, ), ;, }, catch, (, JSModuleGraph, ., ModuleDependenceException]
[>, 1, ), {, try, {, this, ., moduleGraph, =, new, JSModuleGraph, (, modules, ), ;, }, catch, (, JSModuleGraph]
[., size, (, ), >, 1, ), {, try, {, this, ., moduleGraph, =, new, JSModuleGraph, (, modules, ), ;]
[), {, try, {, this, ., moduleGraph, =, new, JSModuleGraph, (, modules, ), ;, }, catch, (, JSModuleGraph, ., ModuleDependenceException]
[=, new, JSModuleGraph, (, modules, ), ;, }, catch, (, JSModuleGraph, ., ModuleDependenceException, e, ), {, report, (, JSError, .]
[., moduleGraph, =, new, JSModuleGraph, (, modules, ), ;, }, catch, (, JSModuleGraph, ., ModuleDependenceException, e, ), {, report, (]
[;, }, catch, (, JSModuleGraph, ., ModuleDependenceException, e, ), {, report, (, JSError, ., make, (, MODULE_DEPENDENCY_ERROR, ,, e, .]
[), ;, }, catch, (, JSModuleGraph, ., ModuleDependenceException, e, ), {, report, (, JSError, ., make, (, MODULE_DEPENDENCY_ERROR, ,, e]
[;, return, ;, }, }, else, {, this, ., moduleGraph, =, null, ;, }, this, ., inputs, =, getAllInputsFromModules, (]
[), ;, return, ;, }, }, else, {, this, ., moduleGraph, =, null, ;, }, this, ., inputs, =, getAllInputsFromModules]
[., make, (, MODULE_DEPENDENCY_ERROR, ,, e, ., getModule, (, ), ., getName, (, ), ,, e, ., getDependentModule, (, )]
[,, e, ., getModule, (, ), ., getName, (, ), ,, e, ., getDependentModule, (, ), ., getName, (, )]
[,, e, ., getDependentModule, (, ), ., getName, (, ), ), ), ;, return, ;, }, }, else, {, this]
[., getName, (, ), ,, e, ., getDependentModule, (, ), ., getName, (, ), ), ), ;, return, ;, }]
[., getModule, (, ), ., getName, (, ), ,, e, ., getDependentModule, (, ), ., getName, (, ), ), )]
[), ), ;, return, ;, }, }, else, {, this, ., moduleGraph, =, null, ;, }, this, ., inputs, =]
[., getName, (, ), ), ), ;, return, ;, }, }, else, {, this, ., moduleGraph, =, null, ;, }]
[., getDependentModule, (, ), ., getName, (, ), ), ), ;, return, ;, }, }, else, {, this, ., moduleGraph]
[=, null, ;, }, this, ., inputs, =, getAllInputsFromModules, (, modules, ), ;, initBasedOnOptions, (, ), ;, initInputsByIdMap, (, )]
[., moduleGraph, =, null, ;, }, this, ., inputs, =, getAllInputsFromModules, (, modules, ), ;, initBasedOnOptions, (, ), ;, initInputsByIdMap]
[;, }, this, ., inputs, =, getAllInputsFromModules, (, modules, ), ;, initBasedOnOptions, (, ), ;, initInputsByIdMap, (, ), ;, }]
[=, getAllInputsFromModules, (, modules, ), ;, initBasedOnOptions, (, ), ;, initInputsByIdMap, (, ), ;, }, private, void, initBasedOnOptions, (, )]
[., inputs, =, getAllInputsFromModules, (, modules, ), ;, initBasedOnOptions, (, ), ;, initInputsByIdMap, (, ), ;, }, private, void, initBasedOnOptions]
[;, initBasedOnOptions, (, ), ;, initInputsByIdMap, (, ), ;, }, private, void, initBasedOnOptions, (, ), {, if, (, options, .]
[), ;, initBasedOnOptions, (, ), ;, initInputsByIdMap, (, ), ;, }, private, void, initBasedOnOptions, (, ), {, if, (, options]
[;, initInputsByIdMap, (, ), ;, }, private, void, initBasedOnOptions, (, ), {, if, (, options, ., sourceMapOutputPath, !=, null, )]
[;, }, private, void, initBasedOnOptions, (, ), {, if, (, options, ., sourceMapOutputPath, !=, null, ), {, sourceMap, =, options]
[), {, sourceMap, =, options, ., sourceMapFormat, ., getInstance, (, ), ;, sourceMap, ., setPrefixMappings, (, options, ., sourceMapLocationMappings, )]
[!=, null, ), {, sourceMap, =, options, ., sourceMapFormat, ., getInstance, (, ), ;, sourceMap, ., setPrefixMappings, (, options, .]
[., sourceMapOutputPath, !=, null, ), {, sourceMap, =, options, ., sourceMapFormat, ., getInstance, (, ), ;, sourceMap, ., setPrefixMappings, (]
[), {, sourceMap, =, options, ., sourceMapFormat, ., getInstance, (, ), ;, sourceMap, ., setPrefixMappings, (, options, ., sourceMapLocationMappings, )]
[=, options, ., sourceMapFormat, ., getInstance, (, ), ;, sourceMap, ., setPrefixMappings, (, options, ., sourceMapLocationMappings, ), ;, }, }]
[;, sourceMap, ., setPrefixMappings, (, options, ., sourceMapLocationMappings, ), ;, }, }, private, <, T, extends, SourceFile, >, List, <]
[., getInstance, (, ), ;, sourceMap, ., setPrefixMappings, (, options, ., sourceMapLocationMappings, ), ;, }, }, private, <, T, extends]
[., sourceMapFormat, ., getInstance, (, ), ;, sourceMap, ., setPrefixMappings, (, options, ., sourceMapLocationMappings, ), ;, }, }, private, <]
[;, }, }, private, <, T, extends, SourceFile, >, List, <, CompilerInput, >, makeCompilerInput, (, List, <, T, >, files]
[., setPrefixMappings, (, options, ., sourceMapLocationMappings, ), ;, }, }, private, <, T, extends, SourceFile, >, List, <, CompilerInput, >]
[), ;, }, }, private, <, T, extends, SourceFile, >, List, <, CompilerInput, >, makeCompilerInput, (, List, <, T, >]
[., sourceMapLocationMappings, ), ;, }, }, private, <, T, extends, SourceFile, >, List, <, CompilerInput, >, makeCompilerInput, (, List, <]
[;, for, (, T, file, :, files, ), {, inputs, ., add, (, new, CompilerInput, (, file, ,, isExtern, )]
[., newArrayList, (, ), ;, for, (, T, file, :, files, ), {, inputs, ., add, (, new, CompilerInput, (]
[), {, inputs, ., add, (, new, CompilerInput, (, file, ,, isExtern, ), ), ;, }, return, inputs, ;, }]
[;, }, return, inputs, ;, }, private, static, final, DiagnosticType, EMPTY_MODULE_LIST_ERROR, =, DiagnosticType, ., error, (, "JSC_EMPTY_MODULE_LIST_ERROR", ,, "At least one module must be provided", )]
[., add, (, new, CompilerInput, (, file, ,, isExtern, ), ), ;, }, return, inputs, ;, }, private, static, final]
[), ;, }, return, inputs, ;, }, private, static, final, DiagnosticType, EMPTY_MODULE_LIST_ERROR, =, DiagnosticType, ., error, (, "JSC_EMPTY_MODULE_LIST_ERROR", ,, "At least one module must be provided"]
[,, isExtern, ), ), ;, }, return, inputs, ;, }, private, static, final, DiagnosticType, EMPTY_MODULE_LIST_ERROR, =, DiagnosticType, ., error, (]
[), ), ;, }, return, inputs, ;, }, private, static, final, DiagnosticType, EMPTY_MODULE_LIST_ERROR, =, DiagnosticType, ., error, (, "JSC_EMPTY_MODULE_LIST_ERROR", ,]
[;, }, private, static, final, DiagnosticType, EMPTY_MODULE_LIST_ERROR, =, DiagnosticType, ., error, (, "JSC_EMPTY_MODULE_LIST_ERROR", ,, "At least one module must be provided", ), ;, private, static, final]
[;, private, static, final, DiagnosticType, EMPTY_ROOT_MODULE_ERROR, =, DiagnosticType, ., error, (, "JSC_EMPTY_ROOT_MODULE_ERROR", ,, "Root module '{0}' must contain at least one source code input", ), ;, private, void, checkFirstModule, (]
[., error, (, "JSC_EMPTY_MODULE_LIST_ERROR", ,, "At least one module must be provided", ), ;, private, static, final, DiagnosticType, EMPTY_ROOT_MODULE_ERROR, =, DiagnosticType, ., error, (, "JSC_EMPTY_ROOT_MODULE_ERROR", ,]
[,, "At least one module must be provided", ), ;, private, static, final, DiagnosticType, EMPTY_ROOT_MODULE_ERROR, =, DiagnosticType, ., error, (, "JSC_EMPTY_ROOT_MODULE_ERROR", ,, "Root module '{0}' must contain at least one source code input", ), ;, private]
[), ;, private, static, final, DiagnosticType, EMPTY_ROOT_MODULE_ERROR, =, DiagnosticType, ., error, (, "JSC_EMPTY_ROOT_MODULE_ERROR", ,, "Root module '{0}' must contain at least one source code input", ), ;, private, void, checkFirstModule]
[;, private, void, checkFirstModule, (, List, <, JSModule, >, modules, ), {, if, (, modules, ., isEmpty, (, ), )]
[., error, (, "JSC_EMPTY_ROOT_MODULE_ERROR", ,, "Root module '{0}' must contain at least one source code input", ), ;, private, void, checkFirstModule, (, List, <, JSModule, >, modules, ), {, if]
[,, "Root module '{0}' must contain at least one source code input", ), ;, private, void, checkFirstModule, (, List, <, JSModule, >, modules, ), {, if, (, modules, ., isEmpty]
[), ;, private, void, checkFirstModule, (, List, <, JSModule, >, modules, ), {, if, (, modules, ., isEmpty, (, )]
[), {, report, (, JSError, ., make, (, EMPTY_MODULE_LIST_ERROR, ), ), ;, }, else, if, (, modules, ., get, (]
[., isEmpty, (, ), ), {, report, (, JSError, ., make, (, EMPTY_MODULE_LIST_ERROR, ), ), ;, }, else, if, (]
[;, }, else, if, (, modules, ., get, (, 0, ), ., getInputs, (, ), ., isEmpty, (, ), &&]
[), ;, }, else, if, (, modules, ., get, (, 0, ), ., getInputs, (, ), ., isEmpty, (, )]
[., make, (, EMPTY_MODULE_LIST_ERROR, ), ), ;, }, else, if, (, modules, ., get, (, 0, ), ., getInputs, (]
[), ), ;, }, else, if, (, modules, ., get, (, 0, ), ., getInputs, (, ), ., isEmpty, (]
[), {, report, (, JSError, ., make, (, EMPTY_ROOT_MODULE_ERROR, ,, modules, ., get, (, 0, ), ., getName, (, )]
[&&, modules, ., size, (, ), >, 1, ), {, report, (, JSError, ., make, (, EMPTY_ROOT_MODULE_ERROR, ,, modules, .]
[., isEmpty, (, ), &&, modules, ., size, (, ), >, 1, ), {, report, (, JSError, ., make, (]
[., getInputs, (, ), ., isEmpty, (, ), &&, modules, ., size, (, ), >, 1, ), {, report, (]
[., get, (, 0, ), ., getInputs, (, ), ., isEmpty, (, ), &&, modules, ., size, (, ), >]
[), ., getInputs, (, ), ., isEmpty, (, ), &&, modules, ., size, (, ), >, 1, ), {, report]
[), {, report, (, JSError, ., make, (, EMPTY_ROOT_MODULE_ERROR, ,, modules, ., get, (, 0, ), ., getName, (, )]
[>, 1, ), {, report, (, JSError, ., make, (, EMPTY_ROOT_MODULE_ERROR, ,, modules, ., get, (, 0, ), ., getName]
[., size, (, ), >, 1, ), {, report, (, JSError, ., make, (, EMPTY_ROOT_MODULE_ERROR, ,, modules, ., get, (]
[), {, report, (, JSError, ., make, (, EMPTY_ROOT_MODULE_ERROR, ,, modules, ., get, (, 0, ), ., getName, (, )]
[;, }, }, static, String, createFillFileName, (, String, moduleName, ), {, return, "[", +, moduleName, +, "]", ;, }, private]
[), ;, }, }, static, String, createFillFileName, (, String, moduleName, ), {, return, "[", +, moduleName, +, "]", ;, }]
[., make, (, EMPTY_ROOT_MODULE_ERROR, ,, modules, ., get, (, 0, ), ., getName, (, ), ), ), ;, }, }]
[,, modules, ., get, (, 0, ), ., getName, (, ), ), ), ;, }, }, static, String, createFillFileName, (]
[), ), ;, }, }, static, String, createFillFileName, (, String, moduleName, ), {, return, "[", +, moduleName, +, "]", ;]
[., getName, (, ), ), ), ;, }, }, static, String, createFillFileName, (, String, moduleName, ), {, return, "[", +]
[., get, (, 0, ), ., getName, (, ), ), ), ;, }, }, static, String, createFillFileName, (, String, moduleName]
[), ., getName, (, ), ), ), ;, }, }, static, String, createFillFileName, (, String, moduleName, ), {, return, "["]
[;, }, private, static, void, fillEmptyModules, (, List, <, JSModule, >, modules, ), {, for, (, JSModule, module, :, modules]
[+, "]", ;, }, private, static, void, fillEmptyModules, (, List, <, JSModule, >, modules, ), {, for, (, JSModule, module]
[+, moduleName, +, "]", ;, }, private, static, void, fillEmptyModules, (, List, <, JSModule, >, modules, ), {, for, (]
[+, "]", ;, }, private, static, void, fillEmptyModules, (, List, <, JSModule, >, modules, ), {, for, (, JSModule, module]
[;, }, private, static, void, fillEmptyModules, (, List, <, JSModule, >, modules, ), {, for, (, JSModule, module, :, modules]
[), {, if, (, module, ., getInputs, (, ), ., isEmpty, (, ), ), {, module, ., add, (, SourceFile]
[), {, module, ., add, (, SourceFile, ., fromCode, (, createFillFileName, (, module, ., getName, (, ), ), ,, ""]
[., isEmpty, (, ), ), {, module, ., add, (, SourceFile, ., fromCode, (, createFillFileName, (, module, ., getName, (]
[., getInputs, (, ), ., isEmpty, (, ), ), {, module, ., add, (, SourceFile, ., fromCode, (, createFillFileName, (]
[;, }, }, }, public, void, rebuildInputsFromModules, (, ), {, inputs, =, getAllInputsFromModules, (, modules, ), ;, initInputsByIdMap, (, )]
[., add, (, SourceFile, ., fromCode, (, createFillFileName, (, module, ., getName, (, ), ), ,, "", ), ), ;]
[), ;, }, }, }, public, void, rebuildInputsFromModules, (, ), {, inputs, =, getAllInputsFromModules, (, modules, ), ;, initInputsByIdMap, (]
[., fromCode, (, createFillFileName, (, module, ., getName, (, ), ), ,, "", ), ), ;, }, }, }, public]
[,, "", ), ), ;, }, }, }, public, void, rebuildInputsFromModules, (, ), {, inputs, =, getAllInputsFromModules, (, modules, )]
[), ,, "", ), ), ;, }, }, }, public, void, rebuildInputsFromModules, (, ), {, inputs, =, getAllInputsFromModules, (, modules]
[., getName, (, ), ), ,, "", ), ), ;, }, }, }, public, void, rebuildInputsFromModules, (, ), {, inputs]
[), ), ;, }, }, }, public, void, rebuildInputsFromModules, (, ), {, inputs, =, getAllInputsFromModules, (, modules, ), ;, initInputsByIdMap]
[=, getAllInputsFromModules, (, modules, ), ;, initInputsByIdMap, (, ), ;, }, private, static, List, <, CompilerInput, >, getAllInputsFromModules, (, List]
[;, initInputsByIdMap, (, ), ;, }, private, static, List, <, CompilerInput, >, getAllInputsFromModules, (, List, <, JSModule, >, modules, )]
[), ;, initInputsByIdMap, (, ), ;, }, private, static, List, <, CompilerInput, >, getAllInputsFromModules, (, List, <, JSModule, >, modules]
[;, }, private, static, List, <, CompilerInput, >, getAllInputsFromModules, (, List, <, JSModule, >, modules, ), {, List, <, CompilerInput]
[;, Map, <, String, ,, JSModule, >, inputMap, =, Maps, ., newHashMap, (, ), ;, for, (, JSModule, module, :]
[., newArrayList, (, ), ;, Map, <, String, ,, JSModule, >, inputMap, =, Maps, ., newHashMap, (, ), ;, for]
[;, for, (, JSModule, module, :, modules, ), {, for, (, CompilerInput, input, :, module, ., getInputs, (, ), )]
[., newHashMap, (, ), ;, for, (, JSModule, module, :, modules, ), {, for, (, CompilerInput, input, :, module, .]
[), {, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {, String, inputName, =, input, ., getName]
[), {, String, inputName, =, input, ., getName, (, ), ;, inputs, ., add, (, input, ), ;, inputMap, .]
[., getInputs, (, ), ), {, String, inputName, =, input, ., getName, (, ), ;, inputs, ., add, (, input]
[;, inputs, ., add, (, input, ), ;, inputMap, ., put, (, inputName, ,, module, ), ;, }, }, return]
[., getName, (, ), ;, inputs, ., add, (, input, ), ;, inputMap, ., put, (, inputName, ,, module, )]
[;, inputMap, ., put, (, inputName, ,, module, ), ;, }, }, return, inputs, ;, }, static, final, DiagnosticType, DUPLICATE_INPUT]
[., add, (, input, ), ;, inputMap, ., put, (, inputName, ,, module, ), ;, }, }, return, inputs, ;]
[), ;, inputMap, ., put, (, inputName, ,, module, ), ;, }, }, return, inputs, ;, }, static, final, DiagnosticType]
[;, }, }, return, inputs, ;, }, static, final, DiagnosticType, DUPLICATE_INPUT, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_INPUT", ,, "Duplicate input: {0}", )]
[., put, (, inputName, ,, module, ), ;, }, }, return, inputs, ;, }, static, final, DiagnosticType, DUPLICATE_INPUT, =, DiagnosticType]
[,, module, ), ;, }, }, return, inputs, ;, }, static, final, DiagnosticType, DUPLICATE_INPUT, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_INPUT"]
[), ;, }, }, return, inputs, ;, }, static, final, DiagnosticType, DUPLICATE_INPUT, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_INPUT", ,, "Duplicate input: {0}"]
[;, }, static, final, DiagnosticType, DUPLICATE_INPUT, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_INPUT", ,, "Duplicate input: {0}", ), ;, static, final, DiagnosticType, DUPLICATE_EXTERN_INPUT]
[;, static, final, DiagnosticType, DUPLICATE_EXTERN_INPUT, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_EXTERN_INPUT", ,, "Duplicate extern input: {0}", ), ;, void, initInputsByIdMap, (, ), {]
[., error, (, "JSC_DUPLICATE_INPUT", ,, "Duplicate input: {0}", ), ;, static, final, DiagnosticType, DUPLICATE_EXTERN_INPUT, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_EXTERN_INPUT", ,, "Duplicate extern input: {0}"]
[,, "Duplicate input: {0}", ), ;, static, final, DiagnosticType, DUPLICATE_EXTERN_INPUT, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_EXTERN_INPUT", ,, "Duplicate extern input: {0}", ), ;, void, initInputsByIdMap]
[), ;, static, final, DiagnosticType, DUPLICATE_EXTERN_INPUT, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_EXTERN_INPUT", ,, "Duplicate extern input: {0}", ), ;, void, initInputsByIdMap, (, )]
[;, void, initInputsByIdMap, (, ), {, inputsById, =, new, HashMap, <, InputId, ,, CompilerInput, >, (, ), ;, for, (]
[., error, (, "JSC_DUPLICATE_EXTERN_INPUT", ,, "Duplicate extern input: {0}", ), ;, void, initInputsByIdMap, (, ), {, inputsById, =, new, HashMap, <, InputId, ,]
[,, "Duplicate extern input: {0}", ), ;, void, initInputsByIdMap, (, ), {, inputsById, =, new, HashMap, <, InputId, ,, CompilerInput, >, (, )]
[), ;, void, initInputsByIdMap, (, ), {, inputsById, =, new, HashMap, <, InputId, ,, CompilerInput, >, (, ), ;, for]
[=, new, HashMap, <, InputId, ,, CompilerInput, >, (, ), ;, for, (, CompilerInput, input, :, externs, ), {, InputId]
[;, for, (, CompilerInput, input, :, externs, ), {, InputId, id, =, input, ., getInputId, (, ), ;, CompilerInput, previous]
[), {, InputId, id, =, input, ., getInputId, (, ), ;, CompilerInput, previous, =, putCompilerInput, (, id, ,, input, )]
[;, CompilerInput, previous, =, putCompilerInput, (, id, ,, input, ), ;, if, (, previous, !=, null, ), {, report, (]
[., getInputId, (, ), ;, CompilerInput, previous, =, putCompilerInput, (, id, ,, input, ), ;, if, (, previous, !=, null]
[;, if, (, previous, !=, null, ), {, report, (, JSError, ., make, (, DUPLICATE_EXTERN_INPUT, ,, input, ., getName, (]
[,, input, ), ;, if, (, previous, !=, null, ), {, report, (, JSError, ., make, (, DUPLICATE_EXTERN_INPUT, ,, input]
[), ;, if, (, previous, !=, null, ), {, report, (, JSError, ., make, (, DUPLICATE_EXTERN_INPUT, ,, input, ., getName]
[), {, report, (, JSError, ., make, (, DUPLICATE_EXTERN_INPUT, ,, input, ., getName, (, ), ), ), ;, }, }]
[!=, null, ), {, report, (, JSError, ., make, (, DUPLICATE_EXTERN_INPUT, ,, input, ., getName, (, ), ), ), ;]
[), {, report, (, JSError, ., make, (, DUPLICATE_EXTERN_INPUT, ,, input, ., getName, (, ), ), ), ;, }, }]
[;, }, }, for, (, CompilerInput, input, :, inputs, ), {, InputId, id, =, input, ., getInputId, (, ), ;]
[), ;, }, }, for, (, CompilerInput, input, :, inputs, ), {, InputId, id, =, input, ., getInputId, (, )]
[., make, (, DUPLICATE_EXTERN_INPUT, ,, input, ., getName, (, ), ), ), ;, }, }, for, (, CompilerInput, input, :]
[,, input, ., getName, (, ), ), ), ;, }, }, for, (, CompilerInput, input, :, inputs, ), {, InputId]
[), ), ;, }, }, for, (, CompilerInput, input, :, inputs, ), {, InputId, id, =, input, ., getInputId, (]
[., getName, (, ), ), ), ;, }, }, for, (, CompilerInput, input, :, inputs, ), {, InputId, id, =]
[), {, InputId, id, =, input, ., getInputId, (, ), ;, CompilerInput, previous, =, putCompilerInput, (, id, ,, input, )]
[;, CompilerInput, previous, =, putCompilerInput, (, id, ,, input, ), ;, if, (, previous, !=, null, ), {, report, (]
[., getInputId, (, ), ;, CompilerInput, previous, =, putCompilerInput, (, id, ,, input, ), ;, if, (, previous, !=, null]
[;, if, (, previous, !=, null, ), {, report, (, JSError, ., make, (, DUPLICATE_INPUT, ,, input, ., getName, (]
[,, input, ), ;, if, (, previous, !=, null, ), {, report, (, JSError, ., make, (, DUPLICATE_INPUT, ,, input]
[), ;, if, (, previous, !=, null, ), {, report, (, JSError, ., make, (, DUPLICATE_INPUT, ,, input, ., getName]
[), {, report, (, JSError, ., make, (, DUPLICATE_INPUT, ,, input, ., getName, (, ), ), ), ;, }, }]
[!=, null, ), {, report, (, JSError, ., make, (, DUPLICATE_INPUT, ,, input, ., getName, (, ), ), ), ;]
[), {, report, (, JSError, ., make, (, DUPLICATE_INPUT, ,, input, ., getName, (, ), ), ), ;, }, }]
[;, }, }, }, public, Result, compile, (, SourceFile, extern, ,, SourceFile, input, ,, CompilerOptions, options, ), {, return, compile]
[), ;, }, }, }, public, Result, compile, (, SourceFile, extern, ,, SourceFile, input, ,, CompilerOptions, options, ), {, return]
[., make, (, DUPLICATE_INPUT, ,, input, ., getName, (, ), ), ), ;, }, }, }, public, Result, compile, (]
[,, input, ., getName, (, ), ), ), ;, }, }, }, public, Result, compile, (, SourceFile, extern, ,, SourceFile]
[), ), ;, }, }, }, public, Result, compile, (, SourceFile, extern, ,, SourceFile, input, ,, CompilerOptions, options, ), {]
[., getName, (, ), ), ), ;, }, }, }, public, Result, compile, (, SourceFile, extern, ,, SourceFile, input, ,]
[;, }, @, Deprecated, public, Result, compile, (, SourceFile, extern, ,, JSSourceFile, [, ], input, ,, CompilerOptions, options, ), {]
[,, Lists, ., newArrayList, (, input, ), ,, options, ), ;, }, @, Deprecated, public, Result, compile, (, SourceFile, extern]
[., newArrayList, (, extern, ), ,, Lists, ., newArrayList, (, input, ), ,, options, ), ;, }, @, Deprecated, public]
[), ,, Lists, ., newArrayList, (, input, ), ,, options, ), ;, }, @, Deprecated, public, Result, compile, (, SourceFile]
[,, options, ), ;, }, @, Deprecated, public, Result, compile, (, SourceFile, extern, ,, JSSourceFile, [, ], input, ,, CompilerOptions]
[., newArrayList, (, input, ), ,, options, ), ;, }, @, Deprecated, public, Result, compile, (, SourceFile, extern, ,, JSSourceFile]
[), ,, options, ), ;, }, @, Deprecated, public, Result, compile, (, SourceFile, extern, ,, JSSourceFile, [, ], input, ,]
[), ;, }, @, Deprecated, public, Result, compile, (, SourceFile, extern, ,, JSSourceFile, [, ], input, ,, CompilerOptions, options, )]
[;, }, @, Deprecated, public, Result, compile, (, JSSourceFile, extern, ,, JSModule, [, ], modules, ,, CompilerOptions, options, ), {]
[,, Lists, ., newArrayList, (, input, ), ,, options, ), ;, }, @, Deprecated, public, Result, compile, (, JSSourceFile, extern]
[., newArrayList, (, extern, ), ,, Lists, ., newArrayList, (, input, ), ,, options, ), ;, }, @, Deprecated, public]
[), ,, Lists, ., newArrayList, (, input, ), ,, options, ), ;, }, @, Deprecated, public, Result, compile, (, JSSourceFile]
[,, options, ), ;, }, @, Deprecated, public, Result, compile, (, JSSourceFile, extern, ,, JSModule, [, ], modules, ,, CompilerOptions]
[., newArrayList, (, input, ), ,, options, ), ;, }, @, Deprecated, public, Result, compile, (, JSSourceFile, extern, ,, JSModule]
[), ,, options, ), ;, }, @, Deprecated, public, Result, compile, (, JSSourceFile, extern, ,, JSModule, [, ], modules, ,]
[), ;, }, @, Deprecated, public, Result, compile, (, JSSourceFile, extern, ,, JSModule, [, ], modules, ,, CompilerOptions, options, )]
[;, }, @, Deprecated, public, Result, compile, (, JSSourceFile, [, ], externs, ,, JSSourceFile, [, ], inputs, ,, CompilerOptions, options]
[,, Lists, ., newArrayList, (, modules, ), ,, options, ), ;, }, @, Deprecated, public, Result, compile, (, JSSourceFile, []
[., newArrayList, (, extern, ), ,, Lists, ., newArrayList, (, modules, ), ,, options, ), ;, }, @, Deprecated, public]
[), ,, Lists, ., newArrayList, (, modules, ), ,, options, ), ;, }, @, Deprecated, public, Result, compile, (, JSSourceFile]
[,, options, ), ;, }, @, Deprecated, public, Result, compile, (, JSSourceFile, [, ], externs, ,, JSSourceFile, [, ], inputs]
[., newArrayList, (, modules, ), ,, options, ), ;, }, @, Deprecated, public, Result, compile, (, JSSourceFile, [, ], externs]
[), ,, options, ), ;, }, @, Deprecated, public, Result, compile, (, JSSourceFile, [, ], externs, ,, JSSourceFile, [, ]]
[), ;, }, @, Deprecated, public, Result, compile, (, JSSourceFile, [, ], externs, ,, JSSourceFile, [, ], inputs, ,, CompilerOptions]
[;, }, public, <, T1, extends, SourceFile, ,, T2, extends, SourceFile, >, Result, compile, (, List, <, T1, >, externs]
[,, Lists, ., <, SourceFile, >, newArrayList, (, inputs, ), ,, options, ), ;, }, public, <, T1, extends, SourceFile]
[., <, SourceFile, >, newArrayList, (, externs, ), ,, Lists, ., <, SourceFile, >, newArrayList, (, inputs, ), ,, options]
[), ,, Lists, ., <, SourceFile, >, newArrayList, (, inputs, ), ,, options, ), ;, }, public, <, T1, extends]
[,, options, ), ;, }, public, <, T1, extends, SourceFile, ,, T2, extends, SourceFile, >, Result, compile, (, List, <]
[., <, SourceFile, >, newArrayList, (, inputs, ), ,, options, ), ;, }, public, <, T1, extends, SourceFile, ,, T2]
[), ,, options, ), ;, }, public, <, T1, extends, SourceFile, ,, T2, extends, SourceFile, >, Result, compile, (, List]
[), ;, }, public, <, T1, extends, SourceFile, ,, T2, extends, SourceFile, >, Result, compile, (, List, <, T1, >]
[;, try, {, init, (, externs, ,, inputs, ,, options, ), ;, if, (, hasErrors, (, ), ), {, return]
[., checkState, (, jsRoot, ==, null, ), ;, try, {, init, (, externs, ,, inputs, ,, options, ), ;, if]
[), ;, try, {, init, (, externs, ,, inputs, ,, options, ), ;, if, (, hasErrors, (, ), ), {]
[==, null, ), ;, try, {, init, (, externs, ,, inputs, ,, options, ), ;, if, (, hasErrors, (, )]
[), ;, try, {, init, (, externs, ,, inputs, ,, options, ), ;, if, (, hasErrors, (, ), ), {]
[;, if, (, hasErrors, (, ), ), {, return, getResult, (, ), ;, }, return, compile, (, ), ;, }]
[,, inputs, ,, options, ), ;, if, (, hasErrors, (, ), ), {, return, getResult, (, ), ;, }, return]
[,, options, ), ;, if, (, hasErrors, (, ), ), {, return, getResult, (, ), ;, }, return, compile, (]
[), ;, if, (, hasErrors, (, ), ), {, return, getResult, (, ), ;, }, return, compile, (, ), ;]
[), {, return, getResult, (, ), ;, }, return, compile, (, ), ;, }, finally, {, Tracer, t, =, newTracer]
[;, }, return, compile, (, ), ;, }, finally, {, Tracer, t, =, newTracer, (, "generateReport", ), ;, errorManager, .]
[;, }, finally, {, Tracer, t, =, newTracer, (, "generateReport", ), ;, errorManager, ., generateReport, (, ), ;, stopTracer, (]
[;, errorManager, ., generateReport, (, ), ;, stopTracer, (, t, ,, "generateReport", ), ;, }, }, @, Deprecated, public, Result]
[), ;, errorManager, ., generateReport, (, ), ;, stopTracer, (, t, ,, "generateReport", ), ;, }, }, @, Deprecated, public]
[;, stopTracer, (, t, ,, "generateReport", ), ;, }, }, @, Deprecated, public, Result, compile, (, JSSourceFile, [, ], externs]
[., generateReport, (, ), ;, stopTracer, (, t, ,, "generateReport", ), ;, }, }, @, Deprecated, public, Result, compile, (]
[;, }, }, @, Deprecated, public, Result, compile, (, JSSourceFile, [, ], externs, ,, JSModule, [, ], modules, ,, CompilerOptions]
[,, "generateReport", ), ;, }, }, @, Deprecated, public, Result, compile, (, JSSourceFile, [, ], externs, ,, JSModule, [, ]]
[), ;, }, }, @, Deprecated, public, Result, compile, (, JSSourceFile, [, ], externs, ,, JSModule, [, ], modules, ,]
[;, }, public, <, T, extends, SourceFile, >, Result, compileModules, (, List, <, T, >, externs, ,, List, <, JSModule]
[,, Lists, ., <, JSModule, >, newArrayList, (, modules, ), ,, options, ), ;, }, public, <, T, extends, SourceFile]
[., <, SourceFile, >, newArrayList, (, externs, ), ,, Lists, ., <, JSModule, >, newArrayList, (, modules, ), ,, options]
[), ,, Lists, ., <, JSModule, >, newArrayList, (, modules, ), ,, options, ), ;, }, public, <, T, extends]
[,, options, ), ;, }, public, <, T, extends, SourceFile, >, Result, compileModules, (, List, <, T, >, externs, ,]
[., <, JSModule, >, newArrayList, (, modules, ), ,, options, ), ;, }, public, <, T, extends, SourceFile, >, Result]
[), ,, options, ), ;, }, public, <, T, extends, SourceFile, >, Result, compileModules, (, List, <, T, >, externs]
[), ;, }, public, <, T, extends, SourceFile, >, Result, compileModules, (, List, <, T, >, externs, ,, List, <]
[;, try, {, initModules, (, externs, ,, modules, ,, options, ), ;, if, (, hasErrors, (, ), ), {, return]
[., checkState, (, jsRoot, ==, null, ), ;, try, {, initModules, (, externs, ,, modules, ,, options, ), ;, if]
[), ;, try, {, initModules, (, externs, ,, modules, ,, options, ), ;, if, (, hasErrors, (, ), ), {]
[==, null, ), ;, try, {, initModules, (, externs, ,, modules, ,, options, ), ;, if, (, hasErrors, (, )]
[), ;, try, {, initModules, (, externs, ,, modules, ,, options, ), ;, if, (, hasErrors, (, ), ), {]
[;, if, (, hasErrors, (, ), ), {, return, getResult, (, ), ;, }, return, compile, (, ), ;, }]
[,, modules, ,, options, ), ;, if, (, hasErrors, (, ), ), {, return, getResult, (, ), ;, }, return]
[,, options, ), ;, if, (, hasErrors, (, ), ), {, return, getResult, (, ), ;, }, return, compile, (]
[), ;, if, (, hasErrors, (, ), ), {, return, getResult, (, ), ;, }, return, compile, (, ), ;]
[), {, return, getResult, (, ), ;, }, return, compile, (, ), ;, }, finally, {, Tracer, t, =, newTracer]
[;, }, return, compile, (, ), ;, }, finally, {, Tracer, t, =, newTracer, (, "generateReport", ), ;, errorManager, .]
[;, }, finally, {, Tracer, t, =, newTracer, (, "generateReport", ), ;, errorManager, ., generateReport, (, ), ;, stopTracer, (]
[;, errorManager, ., generateReport, (, ), ;, stopTracer, (, t, ,, "generateReport", ), ;, }, }, private, Result, compile, (]
[), ;, errorManager, ., generateReport, (, ), ;, stopTracer, (, t, ,, "generateReport", ), ;, }, }, private, Result, compile]
[;, stopTracer, (, t, ,, "generateReport", ), ;, }, }, private, Result, compile, (, ), {, return, runInCompilerThread, (, new]
[., generateReport, (, ), ;, stopTracer, (, t, ,, "generateReport", ), ;, }, }, private, Result, compile, (, ), {]
[;, }, }, private, Result, compile, (, ), {, return, runInCompilerThread, (, new, Callable, <, Result, >, (, ), {]
[,, "generateReport", ), ;, }, }, private, Result, compile, (, ), {, return, runInCompilerThread, (, new, Callable, <, Result, >]
[), ;, }, }, private, Result, compile, (, ), {, return, runInCompilerThread, (, new, Callable, <, Result, >, (, )]
[;, }, public, void, disableThreads, (, ), {, useThreads, =, false, ;, }, @, SuppressWarnings, (, "unchecked", ), <, T]
[), ;, }, public, void, disableThreads, (, ), {, useThreads, =, false, ;, }, @, SuppressWarnings, (, "unchecked", ), <]
[;, return, getResult, (, ), ;, }, }, ), ;, }, public, void, disableThreads, (, ), {, useThreads, =, false]
[;, }, }, ), ;, }, public, void, disableThreads, (, ), {, useThreads, =, false, ;, }, @, SuppressWarnings, (]
[=, false, ;, }, @, SuppressWarnings, (, "unchecked", ), <, T, >, T, runInCompilerThread, (, final, Callable, <, T, >]
[;, }, @, SuppressWarnings, (, "unchecked", ), <, T, >, T, runInCompilerThread, (, final, Callable, <, T, >, callable, )]
[<, T, >, T, runInCompilerThread, (, final, Callable, <, T, >, callable, ), {, final, boolean, dumpTraceReport, =, options, !=]
[), <, T, >, T, runInCompilerThread, (, final, Callable, <, T, >, callable, ), {, final, boolean, dumpTraceReport, =, options]
[;, T, result, =, null, ;, final, Throwable, [, ], exception, =, new, Throwable, [, 1, ], ;, Callable, <]
[&&, options, ., tracer, ., isOn, (, ), ;, T, result, =, null, ;, final, Throwable, [, ], exception, =]
[!=, null, &&, options, ., tracer, ., isOn, (, ), ;, T, result, =, null, ;, final, Throwable, [, ]]
[&&, options, ., tracer, ., isOn, (, ), ;, T, result, =, null, ;, final, Throwable, [, ], exception, =]
[;, T, result, =, null, ;, final, Throwable, [, ], exception, =, new, Throwable, [, 1, ], ;, Callable, <]
[., isOn, (, ), ;, T, result, =, null, ;, final, Throwable, [, ], exception, =, new, Throwable, [, 1]
[., tracer, ., isOn, (, ), ;, T, result, =, null, ;, final, Throwable, [, ], exception, =, new, Throwable]
[;, final, Throwable, [, ], exception, =, new, Throwable, [, 1, ], ;, Callable, <, T, >, bootCompilerThread, =, new]
[;, Callable, <, T, >, bootCompilerThread, =, new, Callable, <, T, >, (, ), {, @, Override, public, T, call]
[], ;, Callable, <, T, >, bootCompilerThread, =, new, Callable, <, T, >, (, ), {, @, Override, public, T]
[;, Preconditions, ., checkState, (, compilerThread, ==, null, ||, compilerThread, ==, Thread, ., currentThread, (, ), ,, "Please do not share the Compiler across threads", ), ;]
[=, Thread, ., currentThread, (, ), ;, if, (, dumpTraceReport, ), {, Tracer, ., initCurrentThreadTrace, (, ), ;, }, return]
[;, if, (, dumpTraceReport, ), {, Tracer, ., initCurrentThreadTrace, (, ), ;, }, return, callable, ., call, (, ), ;]
[., currentThread, (, ), ;, if, (, dumpTraceReport, ), {, Tracer, ., initCurrentThreadTrace, (, ), ;, }, return, callable, .]
[), {, Tracer, ., initCurrentThreadTrace, (, ), ;, }, return, callable, ., call, (, ), ;, }, catch, (, Throwable]
[;, }, return, callable, ., call, (, ), ;, }, catch, (, Throwable, e, ), {, exception, [, 0, ]]
[., initCurrentThreadTrace, (, ), ;, }, return, callable, ., call, (, ), ;, }, catch, (, Throwable, e, ), {]
[;, }, catch, (, Throwable, e, ), {, exception, [, 0, ], =, e, ;, }, finally, {, compilerThread, =]
[., call, (, ), ;, }, catch, (, Throwable, e, ), {, exception, [, 0, ], =, e, ;, }]
[=, e, ;, }, finally, {, compilerThread, =, null, ;, if, (, dumpTraceReport, ), {, Tracer, ., logAndClearCurrentThreadTrace, (, )]
[[, 0, ], =, e, ;, }, finally, {, compilerThread, =, null, ;, if, (, dumpTraceReport, ), {, Tracer, .]
[], =, e, ;, }, finally, {, compilerThread, =, null, ;, if, (, dumpTraceReport, ), {, Tracer, ., logAndClearCurrentThreadTrace, (]
[;, }, finally, {, compilerThread, =, null, ;, if, (, dumpTraceReport, ), {, Tracer, ., logAndClearCurrentThreadTrace, (, ), ;, tracker]
[=, null, ;, if, (, dumpTraceReport, ), {, Tracer, ., logAndClearCurrentThreadTrace, (, ), ;, tracker, ., outputTracerReport, (, outStream, ==]
[;, if, (, dumpTraceReport, ), {, Tracer, ., logAndClearCurrentThreadTrace, (, ), ;, tracker, ., outputTracerReport, (, outStream, ==, null, ?]
[), {, Tracer, ., logAndClearCurrentThreadTrace, (, ), ;, tracker, ., outputTracerReport, (, outStream, ==, null, ?, System, ., out, :]
[;, tracker, ., outputTracerReport, (, outStream, ==, null, ?, System, ., out, :, outStream, ), ;, }, }, return, null]
[., logAndClearCurrentThreadTrace, (, ), ;, tracker, ., outputTracerReport, (, outStream, ==, null, ?, System, ., out, :, outStream, ), ;]
[;, }, }, return, null, ;, }, }, ;, Preconditions, ., checkState, (, compilerThread, ==, null, ||, compilerThread, ==, Thread]
[., outputTracerReport, (, outStream, ==, null, ?, System, ., out, :, outStream, ), ;, }, }, return, null, ;, }]
[), ;, }, }, return, null, ;, }, }, ;, Preconditions, ., checkState, (, compilerThread, ==, null, ||, compilerThread, ==]
[?, System, ., out, :, outStream, ), ;, }, }, return, null, ;, }, }, ;, Preconditions, ., checkState, (]
[==, null, ?, System, ., out, :, outStream, ), ;, }, }, return, null, ;, }, }, ;, Preconditions, .]
[?, System, ., out, :, outStream, ), ;, }, }, return, null, ;, }, }, ;, Preconditions, ., checkState, (]
[:, outStream, ), ;, }, }, return, null, ;, }, }, ;, Preconditions, ., checkState, (, compilerThread, ==, null, ||]
[., out, :, outStream, ), ;, }, }, return, null, ;, }, }, ;, Preconditions, ., checkState, (, compilerThread, ==]
[), ;, }, }, return, null, ;, }, }, ;, Preconditions, ., checkState, (, compilerThread, ==, null, ||, compilerThread, ==]
[;, }, }, ;, Preconditions, ., checkState, (, compilerThread, ==, null, ||, compilerThread, ==, Thread, ., currentThread, (, ), ,]
[;, if, (, useThreads, &&, compilerThread, ==, null, ), {, try, {, result, =, compilerExecutor, ., submit, (, bootCompilerThread, )]
[., checkState, (, compilerThread, ==, null, ||, compilerThread, ==, Thread, ., currentThread, (, ), ,, "Please do not share the Compiler across threads", ), ;, if, (]
[,, "Please do not share the Compiler across threads", ), ;, if, (, useThreads, &&, compilerThread, ==, null, ), {, try, {, result, =, compilerExecutor, ., submit]
[||, compilerThread, ==, Thread, ., currentThread, (, ), ,, "Please do not share the Compiler across threads", ), ;, if, (, useThreads, &&, compilerThread, ==, null, )]
[==, null, ||, compilerThread, ==, Thread, ., currentThread, (, ), ,, "Please do not share the Compiler across threads", ), ;, if, (, useThreads, &&, compilerThread, ==]
[||, compilerThread, ==, Thread, ., currentThread, (, ), ,, "Please do not share the Compiler across threads", ), ;, if, (, useThreads, &&, compilerThread, ==, null, )]
[,, "Please do not share the Compiler across threads", ), ;, if, (, useThreads, &&, compilerThread, ==, null, ), {, try, {, result, =, compilerExecutor, ., submit]
[==, Thread, ., currentThread, (, ), ,, "Please do not share the Compiler across threads", ), ;, if, (, useThreads, &&, compilerThread, ==, null, ), {, try]
[,, "Please do not share the Compiler across threads", ), ;, if, (, useThreads, &&, compilerThread, ==, null, ), {, try, {, result, =, compilerExecutor, ., submit]
[., currentThread, (, ), ,, "Please do not share the Compiler across threads", ), ;, if, (, useThreads, &&, compilerThread, ==, null, ), {, try, {, result]
[), ;, if, (, useThreads, &&, compilerThread, ==, null, ), {, try, {, result, =, compilerExecutor, ., submit, (, bootCompilerThread]
[), {, try, {, result, =, compilerExecutor, ., submit, (, bootCompilerThread, ), ., get, (, ), ;, }, catch, (]
[&&, compilerThread, ==, null, ), {, try, {, result, =, compilerExecutor, ., submit, (, bootCompilerThread, ), ., get, (, )]
[), {, try, {, result, =, compilerExecutor, ., submit, (, bootCompilerThread, ), ., get, (, ), ;, }, catch, (]
[==, null, ), {, try, {, result, =, compilerExecutor, ., submit, (, bootCompilerThread, ), ., get, (, ), ;, }]
[), {, try, {, result, =, compilerExecutor, ., submit, (, bootCompilerThread, ), ., get, (, ), ;, }, catch, (]
[=, compilerExecutor, ., submit, (, bootCompilerThread, ), ., get, (, ), ;, }, catch, (, InterruptedException, e, ), {, throw]
[;, }, catch, (, InterruptedException, e, ), {, throw, Throwables, ., propagate, (, e, ), ;, }, catch, (, ExecutionException]
[., get, (, ), ;, }, catch, (, InterruptedException, e, ), {, throw, Throwables, ., propagate, (, e, ), ;]
[., submit, (, bootCompilerThread, ), ., get, (, ), ;, }, catch, (, InterruptedException, e, ), {, throw, Throwables, .]
[), ., get, (, ), ;, }, catch, (, InterruptedException, e, ), {, throw, Throwables, ., propagate, (, e, )]
[;, }, catch, (, ExecutionException, e, ), {, throw, Throwables, ., propagate, (, e, ), ;, }, }, else, {]
[., propagate, (, e, ), ;, }, catch, (, ExecutionException, e, ), {, throw, Throwables, ., propagate, (, e, )]
[), ;, }, catch, (, ExecutionException, e, ), {, throw, Throwables, ., propagate, (, e, ), ;, }, }, else]
[;, }, }, else, {, try, {, result, =, callable, ., call, (, ), ;, }, catch, (, Exception, e]
[., propagate, (, e, ), ;, }, }, else, {, try, {, result, =, callable, ., call, (, ), ;]
[), ;, }, }, else, {, try, {, result, =, callable, ., call, (, ), ;, }, catch, (, Exception]
[=, callable, ., call, (, ), ;, }, catch, (, Exception, e, ), {, exception, [, 0, ], =, e]
[;, }, catch, (, Exception, e, ), {, exception, [, 0, ], =, e, ;, }, }, if, (, exception]
[., call, (, ), ;, }, catch, (, Exception, e, ), {, exception, [, 0, ], =, e, ;, }]
[=, e, ;, }, }, if, (, exception, [, 0, ], !=, null, ), {, throw, new, RuntimeException, (, exception]
[[, 0, ], =, e, ;, }, }, if, (, exception, [, 0, ], !=, null, ), {, throw, new]
[], =, e, ;, }, }, if, (, exception, [, 0, ], !=, null, ), {, throw, new, RuntimeException, (]
[;, }, }, if, (, exception, [, 0, ], !=, null, ), {, throw, new, RuntimeException, (, exception, [, 0]
[), {, throw, new, RuntimeException, (, exception, [, 0, ], ), ;, }, return, result, ;, }, private, void, compileInternal]
[!=, null, ), {, throw, new, RuntimeException, (, exception, [, 0, ], ), ;, }, return, result, ;, }, private]
[[, 0, ], !=, null, ), {, throw, new, RuntimeException, (, exception, [, 0, ], ), ;, }, return, result]
[], !=, null, ), {, throw, new, RuntimeException, (, exception, [, 0, ], ), ;, }, return, result, ;, }]
[), {, throw, new, RuntimeException, (, exception, [, 0, ], ), ;, }, return, result, ;, }, private, void, compileInternal]
[;, }, return, result, ;, }, private, void, compileInternal, (, ), {, setProgress, (, 0.0, ,, null, ), ;, parse]
[), ;, }, return, result, ;, }, private, void, compileInternal, (, ), {, setProgress, (, 0.0, ,, null, ), ;]
[[, 0, ], ), ;, }, return, result, ;, }, private, void, compileInternal, (, ), {, setProgress, (, 0.0, ,]
[], ), ;, }, return, result, ;, }, private, void, compileInternal, (, ), {, setProgress, (, 0.0, ,, null, )]
[;, }, private, void, compileInternal, (, ), {, setProgress, (, 0.0, ,, null, ), ;, parse, (, ), ;, setProgress]
[;, parse, (, ), ;, setProgress, (, 0.15, ,, "parse", ), ;, if, (, hasErrors, (, ), ), {, return]
[,, null, ), ;, parse, (, ), ;, setProgress, (, 0.15, ,, "parse", ), ;, if, (, hasErrors, (, )]
[), ;, parse, (, ), ;, setProgress, (, 0.15, ,, "parse", ), ;, if, (, hasErrors, (, ), ), {]
[;, setProgress, (, 0.15, ,, "parse", ), ;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (]
[;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (, !, precheck, (, ), ), {, return]
[,, "parse", ), ;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (, !, precheck, (, )]
[), ;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (, !, precheck, (, ), ), {]
[), {, return, ;, }, if, (, !, precheck, (, ), ), {, return, ;, }, if, (, options, .]
[), {, return, ;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, check, (, ), ;, return, ;, }, if]
[), {, return, ;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, check, (, ), ;, return, ;, }, if]
[), {, check, (, ), ;, return, ;, }, if, (, !, options, ., skipAllPasses, ), {, check, (, )]
[., nameAnonymousFunctionsOnly, ), {, check, (, ), ;, return, ;, }, if, (, !, options, ., skipAllPasses, ), {, check]
[;, return, ;, }, if, (, !, options, ., skipAllPasses, ), {, check, (, ), ;, if, (, hasErrors, (]
[), {, check, (, ), ;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (, options, .]
[), {, check, (, ), ;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (, options, .]
[., skipAllPasses, ), {, check, (, ), ;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (]
[;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (, options, ., isExternExportsEnabled, (, ), ||, options]
[), {, return, ;, }, if, (, options, ., isExternExportsEnabled, (, ), ||, options, ., externExportsPath, !=, null, ), {]
[), {, externExports, (, ), ;, }, if, (, !, options, ., ideMode, ), {, optimize, (, ), ;, }]
[||, options, ., externExportsPath, !=, null, ), {, externExports, (, ), ;, }, if, (, !, options, ., ideMode, )]
[., isExternExportsEnabled, (, ), ||, options, ., externExportsPath, !=, null, ), {, externExports, (, ), ;, }, if, (, !]
[), {, externExports, (, ), ;, }, if, (, !, options, ., ideMode, ), {, optimize, (, ), ;, }]
[!=, null, ), {, externExports, (, ), ;, }, if, (, !, options, ., ideMode, ), {, optimize, (, )]
[., externExportsPath, !=, null, ), {, externExports, (, ), ;, }, if, (, !, options, ., ideMode, ), {, optimize]
[), {, externExports, (, ), ;, }, if, (, !, options, ., ideMode, ), {, optimize, (, ), ;, }]
[;, }, if, (, !, options, ., ideMode, ), {, optimize, (, ), ;, }, }, if, (, options, .]
[), {, optimize, (, ), ;, }, }, if, (, options, ., recordFunctionInformation, ), {, recordFunctionInformation, (, ), ;, }]
[), {, optimize, (, ), ;, }, }, if, (, options, ., recordFunctionInformation, ), {, recordFunctionInformation, (, ), ;, }]
[., ideMode, ), {, optimize, (, ), ;, }, }, if, (, options, ., recordFunctionInformation, ), {, recordFunctionInformation, (, )]
[;, }, }, if, (, options, ., recordFunctionInformation, ), {, recordFunctionInformation, (, ), ;, }, if, (, options, ., devMode]
[), {, recordFunctionInformation, (, ), ;, }, if, (, options, ., devMode, ==, DevMode, ., START_AND_END, ), {, runSanityCheck, (]
[., recordFunctionInformation, ), {, recordFunctionInformation, (, ), ;, }, if, (, options, ., devMode, ==, DevMode, ., START_AND_END, ), {]
[;, }, if, (, options, ., devMode, ==, DevMode, ., START_AND_END, ), {, runSanityCheck, (, ), ;, }, setProgress, (]
[), {, runSanityCheck, (, ), ;, }, setProgress, (, 1.0, ,, "recordFunctionInformation", ), ;, }, public, void, parse, (, )]
[==, DevMode, ., START_AND_END, ), {, runSanityCheck, (, ), ;, }, setProgress, (, 1.0, ,, "recordFunctionInformation", ), ;, }, public]
[., devMode, ==, DevMode, ., START_AND_END, ), {, runSanityCheck, (, ), ;, }, setProgress, (, 1.0, ,, "recordFunctionInformation", ), ;]
[), {, runSanityCheck, (, ), ;, }, setProgress, (, 1.0, ,, "recordFunctionInformation", ), ;, }, public, void, parse, (, )]
[., START_AND_END, ), {, runSanityCheck, (, ), ;, }, setProgress, (, 1.0, ,, "recordFunctionInformation", ), ;, }, public, void, parse]
[;, }, setProgress, (, 1.0, ,, "recordFunctionInformation", ), ;, }, public, void, parse, (, ), {, parseInputs, (, ), ;]
[;, }, public, void, parse, (, ), {, parseInputs, (, ), ;, }, PassConfig, getPassConfig, (, ), {, if, (]
[,, "recordFunctionInformation", ), ;, }, public, void, parse, (, ), {, parseInputs, (, ), ;, }, PassConfig, getPassConfig, (, )]
[), ;, }, public, void, parse, (, ), {, parseInputs, (, ), ;, }, PassConfig, getPassConfig, (, ), {, if]
[;, }, PassConfig, getPassConfig, (, ), {, if, (, passes, ==, null, ), {, passes, =, createPassConfigInternal, (, ), ;]
[), {, passes, =, createPassConfigInternal, (, ), ;, }, return, passes, ;, }, PassConfig, createPassConfigInternal, (, ), {, return, new]
[==, null, ), {, passes, =, createPassConfigInternal, (, ), ;, }, return, passes, ;, }, PassConfig, createPassConfigInternal, (, ), {]
[), {, passes, =, createPassConfigInternal, (, ), ;, }, return, passes, ;, }, PassConfig, createPassConfigInternal, (, ), {, return, new]
[=, createPassConfigInternal, (, ), ;, }, return, passes, ;, }, PassConfig, createPassConfigInternal, (, ), {, return, new, DefaultPassConfig, (, options]
[;, }, return, passes, ;, }, PassConfig, createPassConfigInternal, (, ), {, return, new, DefaultPassConfig, (, options, ), ;, }, public]
[;, }, PassConfig, createPassConfigInternal, (, ), {, return, new, DefaultPassConfig, (, options, ), ;, }, public, void, setPassConfig, (, PassConfig]
[;, }, public, void, setPassConfig, (, PassConfig, passes, ), {, Preconditions, ., checkNotNull, (, passes, ), ;, if, (, this]
[), ;, }, public, void, setPassConfig, (, PassConfig, passes, ), {, Preconditions, ., checkNotNull, (, passes, ), ;, if, (]
[;, if, (, this, ., passes, !=, null, ), {, throw, new, IllegalStateException, (, "this.passes has already been assigned", ), ;, }, this, .]
[., checkNotNull, (, passes, ), ;, if, (, this, ., passes, !=, null, ), {, throw, new, IllegalStateException, (, "this.passes has already been assigned"]
[), ;, if, (, this, ., passes, !=, null, ), {, throw, new, IllegalStateException, (, "this.passes has already been assigned", ), ;, }, this]
[), {, throw, new, IllegalStateException, (, "this.passes has already been assigned", ), ;, }, this, ., passes, =, passes, ;, }, boolean, precheck, (]
[!=, null, ), {, throw, new, IllegalStateException, (, "this.passes has already been assigned", ), ;, }, this, ., passes, =, passes, ;, }, boolean]
[., passes, !=, null, ), {, throw, new, IllegalStateException, (, "this.passes has already been assigned", ), ;, }, this, ., passes, =, passes, ;]
[), {, throw, new, IllegalStateException, (, "this.passes has already been assigned", ), ;, }, this, ., passes, =, passes, ;, }, boolean, precheck, (]
[;, }, this, ., passes, =, passes, ;, }, boolean, precheck, (, ), {, return, true, ;, }, public, void]
[), ;, }, this, ., passes, =, passes, ;, }, boolean, precheck, (, ), {, return, true, ;, }, public]
[=, passes, ;, }, boolean, precheck, (, ), {, return, true, ;, }, public, void, check, (, ), {, runCustomPasses]
[., passes, =, passes, ;, }, boolean, precheck, (, ), {, return, true, ;, }, public, void, check, (, )]
[;, }, boolean, precheck, (, ), {, return, true, ;, }, public, void, check, (, ), {, runCustomPasses, (, CustomPassExecutionTime]
[;, }, public, void, check, (, ), {, runCustomPasses, (, CustomPassExecutionTime, ., BEFORE_CHECKS, ), ;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer]
[;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer, (, this, ,, tracker, ,, new, PhaseOptimizer, ., ProgressRange, (, getProgress, (, ), ,]
[), ;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer, (, this, ,, tracker, ,, new, PhaseOptimizer, ., ProgressRange, (, getProgress, (, )]
[., BEFORE_CHECKS, ), ;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer, (, this, ,, tracker, ,, new, PhaseOptimizer, ., ProgressRange, (, getProgress]
[;, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;, }]
[,, tracker, ,, new, PhaseOptimizer, ., ProgressRange, (, getProgress, (, ), ,, 1.0, ), ), ;, if, (, options, .]
[,, new, PhaseOptimizer, ., ProgressRange, (, getProgress, (, ), ,, 1.0, ), ), ;, if, (, options, ., devMode, ==]
[), ;, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;]
[,, 1.0, ), ), ;, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (]
[), ), ;, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, )]
[), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;, }, phaseOptimizer, ., consume, (, getPassConfig, (, ), ., getChecks, (]
[==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;, }, phaseOptimizer, ., consume, (, getPassConfig, (]
[., devMode, ==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;, }, phaseOptimizer, ., consume, (]
[), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;, }, phaseOptimizer, ., consume, (, getPassConfig, (, ), ., getChecks, (]
[., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;, }, phaseOptimizer, ., consume, (, getPassConfig, (, ), .]
[;, }, phaseOptimizer, ., consume, (, getPassConfig, (, ), ., getChecks, (, ), ), ;, phaseOptimizer, ., process, (, externsRoot]
[., setSanityCheck, (, sanityCheck, ), ;, }, phaseOptimizer, ., consume, (, getPassConfig, (, ), ., getChecks, (, ), ), ;]
[), ;, }, phaseOptimizer, ., consume, (, getPassConfig, (, ), ., getChecks, (, ), ), ;, phaseOptimizer, ., process, (]
[;, phaseOptimizer, ., process, (, externsRoot, ,, jsRoot, ), ;, if, (, hasErrors, (, ), ), {, return, ;, }]
[., consume, (, getPassConfig, (, ), ., getChecks, (, ), ), ;, phaseOptimizer, ., process, (, externsRoot, ,, jsRoot, )]
[), ;, phaseOptimizer, ., process, (, externsRoot, ,, jsRoot, ), ;, if, (, hasErrors, (, ), ), {, return, ;]
[., getChecks, (, ), ), ;, phaseOptimizer, ., process, (, externsRoot, ,, jsRoot, ), ;, if, (, hasErrors, (, )]
[;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, return, ;]
[., process, (, externsRoot, ,, jsRoot, ), ;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (]
[,, jsRoot, ), ;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (, options, ., nameAnonymousFunctionsOnly, )]
[), ;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, return]
[), {, return, ;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, return, ;, }, if, (, options, ., removeTryCatchFinally]
[), {, return, ;, }, if, (, options, ., removeTryCatchFinally, ), {, removeTryCatchFinally, (, ), ;, }, if, (, options]
[., nameAnonymousFunctionsOnly, ), {, return, ;, }, if, (, options, ., removeTryCatchFinally, ), {, removeTryCatchFinally, (, ), ;, }, if]
[), {, removeTryCatchFinally, (, ), ;, }, if, (, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ||, !]
[., removeTryCatchFinally, ), {, removeTryCatchFinally, (, ), ;, }, if, (, options, ., getTweakProcessing, (, ), ., shouldStrip, (, )]
[;, }, if, (, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ||, !, options, ., stripTypes, ., isEmpty]
[), {, stripCode, (, options, ., stripTypes, ,, options, ., stripNameSuffixes, ,, options, ., stripTypePrefixes, ,, options, ., stripNamePrefixes, )]
[||, !, options, ., stripNamePrefixes, ., isEmpty, (, ), ), {, stripCode, (, options, ., stripTypes, ,, options, ., stripNameSuffixes]
[||, !, options, ., stripTypePrefixes, ., isEmpty, (, ), ||, !, options, ., stripNamePrefixes, ., isEmpty, (, ), ), {]
[||, !, options, ., stripNameSuffixes, ., isEmpty, (, ), ||, !, options, ., stripTypePrefixes, ., isEmpty, (, ), ||, !]
[||, !, options, ., stripTypes, ., isEmpty, (, ), ||, !, options, ., stripNameSuffixes, ., isEmpty, (, ), ||, !]
[., shouldStrip, (, ), ||, !, options, ., stripTypes, ., isEmpty, (, ), ||, !, options, ., stripNameSuffixes, ., isEmpty]
[., getTweakProcessing, (, ), ., shouldStrip, (, ), ||, !, options, ., stripTypes, ., isEmpty, (, ), ||, !, options]
[||, !, options, ., stripNameSuffixes, ., isEmpty, (, ), ||, !, options, ., stripTypePrefixes, ., isEmpty, (, ), ||, !]
[||, !, options, ., stripNameSuffixes, ., isEmpty, (, ), ||, !, options, ., stripTypePrefixes, ., isEmpty, (, ), ||, !]
[., isEmpty, (, ), ||, !, options, ., stripNameSuffixes, ., isEmpty, (, ), ||, !, options, ., stripTypePrefixes, ., isEmpty]
[., stripTypes, ., isEmpty, (, ), ||, !, options, ., stripNameSuffixes, ., isEmpty, (, ), ||, !, options, ., stripTypePrefixes]
[||, !, options, ., stripTypePrefixes, ., isEmpty, (, ), ||, !, options, ., stripNamePrefixes, ., isEmpty, (, ), ), {]
[||, !, options, ., stripTypePrefixes, ., isEmpty, (, ), ||, !, options, ., stripNamePrefixes, ., isEmpty, (, ), ), {]
[., isEmpty, (, ), ||, !, options, ., stripTypePrefixes, ., isEmpty, (, ), ||, !, options, ., stripNamePrefixes, ., isEmpty]
[., stripNameSuffixes, ., isEmpty, (, ), ||, !, options, ., stripTypePrefixes, ., isEmpty, (, ), ||, !, options, ., stripNamePrefixes]
[||, !, options, ., stripNamePrefixes, ., isEmpty, (, ), ), {, stripCode, (, options, ., stripTypes, ,, options, ., stripNameSuffixes]
[||, !, options, ., stripNamePrefixes, ., isEmpty, (, ), ), {, stripCode, (, options, ., stripTypes, ,, options, ., stripNameSuffixes]
[., isEmpty, (, ), ||, !, options, ., stripNamePrefixes, ., isEmpty, (, ), ), {, stripCode, (, options, ., stripTypes]
[., stripTypePrefixes, ., isEmpty, (, ), ||, !, options, ., stripNamePrefixes, ., isEmpty, (, ), ), {, stripCode, (, options]
[), {, stripCode, (, options, ., stripTypes, ,, options, ., stripNameSuffixes, ,, options, ., stripTypePrefixes, ,, options, ., stripNamePrefixes, )]
[), {, stripCode, (, options, ., stripTypes, ,, options, ., stripNameSuffixes, ,, options, ., stripTypePrefixes, ,, options, ., stripNamePrefixes, )]
[., isEmpty, (, ), ), {, stripCode, (, options, ., stripTypes, ,, options, ., stripNameSuffixes, ,, options, ., stripTypePrefixes, ,]
[., stripNamePrefixes, ., isEmpty, (, ), ), {, stripCode, (, options, ., stripTypes, ,, options, ., stripNameSuffixes, ,, options, .]
[;, }, runCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATIONS, ), ;, }, private, void, externExports, (, ), {, logger, ., fine, (]
[,, options, ., stripNameSuffixes, ,, options, ., stripTypePrefixes, ,, options, ., stripNamePrefixes, ), ;, }, runCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATIONS]
[., stripTypes, ,, options, ., stripNameSuffixes, ,, options, ., stripTypePrefixes, ,, options, ., stripNamePrefixes, ), ;, }, runCustomPasses, (, CustomPassExecutionTime]
[,, options, ., stripTypePrefixes, ,, options, ., stripNamePrefixes, ), ;, }, runCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATIONS, ), ;, }, private]
[., stripNameSuffixes, ,, options, ., stripTypePrefixes, ,, options, ., stripNamePrefixes, ), ;, }, runCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATIONS, ), ;]
[,, options, ., stripNamePrefixes, ), ;, }, runCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATIONS, ), ;, }, private, void, externExports, (, )]
[., stripTypePrefixes, ,, options, ., stripNamePrefixes, ), ;, }, runCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATIONS, ), ;, }, private, void, externExports]
[), ;, }, runCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATIONS, ), ;, }, private, void, externExports, (, ), {, logger, ., fine]
[., stripNamePrefixes, ), ;, }, runCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATIONS, ), ;, }, private, void, externExports, (, ), {, logger]
[;, }, private, void, externExports, (, ), {, logger, ., fine, (, "Creating extern file for exports", ), ;, startPass, (, "externExports", ), ;]
[), ;, }, private, void, externExports, (, ), {, logger, ., fine, (, "Creating extern file for exports", ), ;, startPass, (, "externExports", )]
[., BEFORE_OPTIMIZATIONS, ), ;, }, private, void, externExports, (, ), {, logger, ., fine, (, "Creating extern file for exports", ), ;, startPass, (]
[;, startPass, (, "externExports", ), ;, ExternExportsPass, pass, =, new, ExternExportsPass, (, this, ), ;, process, (, pass, ), ;]
[., fine, (, "Creating extern file for exports", ), ;, startPass, (, "externExports", ), ;, ExternExportsPass, pass, =, new, ExternExportsPass, (, this, ), ;]
[), ;, startPass, (, "externExports", ), ;, ExternExportsPass, pass, =, new, ExternExportsPass, (, this, ), ;, process, (, pass, )]
[;, ExternExportsPass, pass, =, new, ExternExportsPass, (, this, ), ;, process, (, pass, ), ;, externExports, =, pass, ., getGeneratedExterns]
[), ;, ExternExportsPass, pass, =, new, ExternExportsPass, (, this, ), ;, process, (, pass, ), ;, externExports, =, pass, .]
[;, process, (, pass, ), ;, externExports, =, pass, ., getGeneratedExterns, (, ), ;, endPass, (, ), ;, }, @]
[), ;, process, (, pass, ), ;, externExports, =, pass, ., getGeneratedExterns, (, ), ;, endPass, (, ), ;, }]
[;, externExports, =, pass, ., getGeneratedExterns, (, ), ;, endPass, (, ), ;, }, @, Override, void, process, (, CompilerPass]
[), ;, externExports, =, pass, ., getGeneratedExterns, (, ), ;, endPass, (, ), ;, }, @, Override, void, process, (]
[=, pass, ., getGeneratedExterns, (, ), ;, endPass, (, ), ;, }, @, Override, void, process, (, CompilerPass, p, )]
[;, endPass, (, ), ;, }, @, Override, void, process, (, CompilerPass, p, ), {, p, ., process, (, externsRoot]
[., getGeneratedExterns, (, ), ;, endPass, (, ), ;, }, @, Override, void, process, (, CompilerPass, p, ), {, p]
[;, }, @, Override, void, process, (, CompilerPass, p, ), {, p, ., process, (, externsRoot, ,, jsRoot, ), ;]
[;, }, private, final, PassFactory, sanityCheck, =, new, PassFactory, (, "sanityCheck", ,, false, ), {, @, Override, protected, CompilerPass, create]
[., process, (, externsRoot, ,, jsRoot, ), ;, }, private, final, PassFactory, sanityCheck, =, new, PassFactory, (, "sanityCheck", ,, false]
[,, jsRoot, ), ;, }, private, final, PassFactory, sanityCheck, =, new, PassFactory, (, "sanityCheck", ,, false, ), {, @, Override]
[), ;, }, private, final, PassFactory, sanityCheck, =, new, PassFactory, (, "sanityCheck", ,, false, ), {, @, Override, protected, CompilerPass]
[;, private, void, maybeSanityCheck, (, ), {, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS, ), {, runSanityCheck, (]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, SanityCheck, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, SanityCheck, (, compiler, ), ;, }]
[;, }, }, ;, private, void, maybeSanityCheck, (, ), {, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS, )]
[), ;, }, }, ;, private, void, maybeSanityCheck, (, ), {, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS]
[), {, runSanityCheck, (, ), ;, }, }, private, void, runSanityCheck, (, ), {, sanityCheck, ., create, (, this, )]
[==, DevMode, ., EVERY_PASS, ), {, runSanityCheck, (, ), ;, }, }, private, void, runSanityCheck, (, ), {, sanityCheck, .]
[., devMode, ==, DevMode, ., EVERY_PASS, ), {, runSanityCheck, (, ), ;, }, }, private, void, runSanityCheck, (, ), {]
[), {, runSanityCheck, (, ), ;, }, }, private, void, runSanityCheck, (, ), {, sanityCheck, ., create, (, this, )]
[., EVERY_PASS, ), {, runSanityCheck, (, ), ;, }, }, private, void, runSanityCheck, (, ), {, sanityCheck, ., create, (]
[;, }, }, private, void, runSanityCheck, (, ), {, sanityCheck, ., create, (, this, ), ., process, (, externsRoot, ,]
[;, }, void, removeTryCatchFinally, (, ), {, logger, ., fine, (, "Remove try/catch/finally", ), ;, startPass, (, "removeTryCatchFinally", ), ;, RemoveTryCatch]
[., process, (, externsRoot, ,, jsRoot, ), ;, }, void, removeTryCatchFinally, (, ), {, logger, ., fine, (, "Remove try/catch/finally", )]
[., create, (, this, ), ., process, (, externsRoot, ,, jsRoot, ), ;, }, void, removeTryCatchFinally, (, ), {, logger]
[), ., process, (, externsRoot, ,, jsRoot, ), ;, }, void, removeTryCatchFinally, (, ), {, logger, ., fine, (, "Remove try/catch/finally"]
[,, jsRoot, ), ;, }, void, removeTryCatchFinally, (, ), {, logger, ., fine, (, "Remove try/catch/finally", ), ;, startPass, (, "removeTryCatchFinally"]
[), ;, }, void, removeTryCatchFinally, (, ), {, logger, ., fine, (, "Remove try/catch/finally", ), ;, startPass, (, "removeTryCatchFinally", ), ;]
[;, startPass, (, "removeTryCatchFinally", ), ;, RemoveTryCatch, r, =, new, RemoveTryCatch, (, this, ), ;, process, (, r, ), ;]
[., fine, (, "Remove try/catch/finally", ), ;, startPass, (, "removeTryCatchFinally", ), ;, RemoveTryCatch, r, =, new, RemoveTryCatch, (, this, ), ;]
[), ;, startPass, (, "removeTryCatchFinally", ), ;, RemoveTryCatch, r, =, new, RemoveTryCatch, (, this, ), ;, process, (, r, )]
[;, RemoveTryCatch, r, =, new, RemoveTryCatch, (, this, ), ;, process, (, r, ), ;, endPass, (, ), ;, }]
[), ;, RemoveTryCatch, r, =, new, RemoveTryCatch, (, this, ), ;, process, (, r, ), ;, endPass, (, ), ;]
[;, process, (, r, ), ;, endPass, (, ), ;, }, void, stripCode, (, Set, <, String, >, stripTypes, ,]
[), ;, process, (, r, ), ;, endPass, (, ), ;, }, void, stripCode, (, Set, <, String, >, stripTypes]
[;, endPass, (, ), ;, }, void, stripCode, (, Set, <, String, >, stripTypes, ,, Set, <, String, >, stripNameSuffixes]
[), ;, endPass, (, ), ;, }, void, stripCode, (, Set, <, String, >, stripTypes, ,, Set, <, String, >]
[;, }, void, stripCode, (, Set, <, String, >, stripTypes, ,, Set, <, String, >, stripNameSuffixes, ,, Set, <, String]
[;, startPass, (, "stripCode", ), ;, StripCode, r, =, new, StripCode, (, this, ,, stripTypes, ,, stripNameSuffixes, ,, stripTypePrefixes, ,]
[., fine, (, "Strip code", ), ;, startPass, (, "stripCode", ), ;, StripCode, r, =, new, StripCode, (, this, ,, stripTypes]
[), ;, startPass, (, "stripCode", ), ;, StripCode, r, =, new, StripCode, (, this, ,, stripTypes, ,, stripNameSuffixes, ,, stripTypePrefixes]
[;, StripCode, r, =, new, StripCode, (, this, ,, stripTypes, ,, stripNameSuffixes, ,, stripTypePrefixes, ,, stripNamePrefixes, ), ;, if, (]
[), ;, StripCode, r, =, new, StripCode, (, this, ,, stripTypes, ,, stripNameSuffixes, ,, stripTypePrefixes, ,, stripNamePrefixes, ), ;, if]
[;, if, (, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ), {, r, ., enableTweakStripping, (, ), ;]
[,, stripTypes, ,, stripNameSuffixes, ,, stripTypePrefixes, ,, stripNamePrefixes, ), ;, if, (, options, ., getTweakProcessing, (, ), ., shouldStrip, (]
[,, stripNameSuffixes, ,, stripTypePrefixes, ,, stripNamePrefixes, ), ;, if, (, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), )]
[,, stripTypePrefixes, ,, stripNamePrefixes, ), ;, if, (, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ), {, r]
[,, stripNamePrefixes, ), ;, if, (, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ), {, r, ., enableTweakStripping]
[), ;, if, (, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ), {, r, ., enableTweakStripping, (, )]
[), {, r, ., enableTweakStripping, (, ), ;, }, process, (, r, ), ;, endPass, (, ), ;, }, private]
[., shouldStrip, (, ), ), {, r, ., enableTweakStripping, (, ), ;, }, process, (, r, ), ;, endPass, (]
[., getTweakProcessing, (, ), ., shouldStrip, (, ), ), {, r, ., enableTweakStripping, (, ), ;, }, process, (, r]
[;, }, process, (, r, ), ;, endPass, (, ), ;, }, private, void, runCustomPasses, (, CustomPassExecutionTime, executionTime, ), {]
[., enableTweakStripping, (, ), ;, }, process, (, r, ), ;, endPass, (, ), ;, }, private, void, runCustomPasses, (]
[;, endPass, (, ), ;, }, private, void, runCustomPasses, (, CustomPassExecutionTime, executionTime, ), {, if, (, options, ., customPasses, !=]
[), ;, endPass, (, ), ;, }, private, void, runCustomPasses, (, CustomPassExecutionTime, executionTime, ), {, if, (, options, ., customPasses]
[;, }, private, void, runCustomPasses, (, CustomPassExecutionTime, executionTime, ), {, if, (, options, ., customPasses, !=, null, ), {, Tracer]
[), {, Tracer, t, =, newTracer, (, "runCustomPasses", ), ;, try, {, for, (, CompilerPass, p, :, options, ., customPasses]
[!=, null, ), {, Tracer, t, =, newTracer, (, "runCustomPasses", ), ;, try, {, for, (, CompilerPass, p, :, options]
[., customPasses, !=, null, ), {, Tracer, t, =, newTracer, (, "runCustomPasses", ), ;, try, {, for, (, CompilerPass, p]
[), {, Tracer, t, =, newTracer, (, "runCustomPasses", ), ;, try, {, for, (, CompilerPass, p, :, options, ., customPasses]
[;, try, {, for, (, CompilerPass, p, :, options, ., customPasses, ., get, (, executionTime, ), ), {, process, (]
[), ;, try, {, for, (, CompilerPass, p, :, options, ., customPasses, ., get, (, executionTime, ), ), {, process]
[), {, process, (, p, ), ;, }, }, finally, {, stopTracer, (, t, ,, "runCustomPasses", ), ;, }, }]
[., get, (, executionTime, ), ), {, process, (, p, ), ;, }, }, finally, {, stopTracer, (, t, ,]
[., customPasses, ., get, (, executionTime, ), ), {, process, (, p, ), ;, }, }, finally, {, stopTracer, (]
[), ), {, process, (, p, ), ;, }, }, finally, {, stopTracer, (, t, ,, "runCustomPasses", ), ;, }]
[;, }, }, finally, {, stopTracer, (, t, ,, "runCustomPasses", ), ;, }, }, }, private, Tracer, currentTracer, =, null]
[), ;, }, }, finally, {, stopTracer, (, t, ,, "runCustomPasses", ), ;, }, }, }, private, Tracer, currentTracer, =]
[;, }, }, }, private, Tracer, currentTracer, =, null, ;, private, String, currentPassName, =, null, ;, void, startPass, (, String]
[,, "runCustomPasses", ), ;, }, }, }, private, Tracer, currentTracer, =, null, ;, private, String, currentPassName, =, null, ;, void]
[), ;, }, }, }, private, Tracer, currentTracer, =, null, ;, private, String, currentPassName, =, null, ;, void, startPass, (]
[;, private, String, currentPassName, =, null, ;, void, startPass, (, String, passName, ), {, Preconditions, ., checkState, (, currentTracer, ==]
[;, void, startPass, (, String, passName, ), {, Preconditions, ., checkState, (, currentTracer, ==, null, ), ;, currentPassName, =, passName]
[;, currentPassName, =, passName, ;, currentTracer, =, newTracer, (, passName, ), ;, }, void, endPass, (, ), {, Preconditions, .]
[., checkState, (, currentTracer, ==, null, ), ;, currentPassName, =, passName, ;, currentTracer, =, newTracer, (, passName, ), ;, }]
[), ;, currentPassName, =, passName, ;, currentTracer, =, newTracer, (, passName, ), ;, }, void, endPass, (, ), {, Preconditions]
[==, null, ), ;, currentPassName, =, passName, ;, currentTracer, =, newTracer, (, passName, ), ;, }, void, endPass, (, )]
[), ;, currentPassName, =, passName, ;, currentTracer, =, newTracer, (, passName, ), ;, }, void, endPass, (, ), {, Preconditions]
[=, passName, ;, currentTracer, =, newTracer, (, passName, ), ;, }, void, endPass, (, ), {, Preconditions, ., checkState, (]
[;, currentTracer, =, newTracer, (, passName, ), ;, }, void, endPass, (, ), {, Preconditions, ., checkState, (, currentTracer, !=]
[=, newTracer, (, passName, ), ;, }, void, endPass, (, ), {, Preconditions, ., checkState, (, currentTracer, !=, null, ,]
[;, }, void, endPass, (, ), {, Preconditions, ., checkState, (, currentTracer, !=, null, ,, "Tracer should not be null at the end of a pass.", ), ;, stopTracer, (]
[), ;, }, void, endPass, (, ), {, Preconditions, ., checkState, (, currentTracer, !=, null, ,, "Tracer should not be null at the end of a pass.", ), ;, stopTracer]
[;, stopTracer, (, currentTracer, ,, currentPassName, ), ;, String, passToCheck, =, currentPassName, ;, currentPassName, =, null, ;, currentTracer, =, null]
[., checkState, (, currentTracer, !=, null, ,, "Tracer should not be null at the end of a pass.", ), ;, stopTracer, (, currentTracer, ,, currentPassName, ), ;, String, passToCheck, =]
[,, "Tracer should not be null at the end of a pass.", ), ;, stopTracer, (, currentTracer, ,, currentPassName, ), ;, String, passToCheck, =, currentPassName, ;, currentPassName, =, null, ;]
[!=, null, ,, "Tracer should not be null at the end of a pass.", ), ;, stopTracer, (, currentTracer, ,, currentPassName, ), ;, String, passToCheck, =, currentPassName, ;, currentPassName, =]
[,, "Tracer should not be null at the end of a pass.", ), ;, stopTracer, (, currentTracer, ,, currentPassName, ), ;, String, passToCheck, =, currentPassName, ;, currentPassName, =, null, ;]
[), ;, stopTracer, (, currentTracer, ,, currentPassName, ), ;, String, passToCheck, =, currentPassName, ;, currentPassName, =, null, ;, currentTracer, =]
[;, String, passToCheck, =, currentPassName, ;, currentPassName, =, null, ;, currentTracer, =, null, ;, maybeSanityCheck, (, ), ;, }, Tracer]
[,, currentPassName, ), ;, String, passToCheck, =, currentPassName, ;, currentPassName, =, null, ;, currentTracer, =, null, ;, maybeSanityCheck, (, )]
[), ;, String, passToCheck, =, currentPassName, ;, currentPassName, =, null, ;, currentTracer, =, null, ;, maybeSanityCheck, (, ), ;, }]
[;, currentPassName, =, null, ;, currentTracer, =, null, ;, maybeSanityCheck, (, ), ;, }, Tracer, newTracer, (, String, passName, )]
[=, null, ;, currentTracer, =, null, ;, maybeSanityCheck, (, ), ;, }, Tracer, newTracer, (, String, passName, ), {, String]
[;, currentTracer, =, null, ;, maybeSanityCheck, (, ), ;, }, Tracer, newTracer, (, String, passName, ), {, String, comment, =]
[=, null, ;, maybeSanityCheck, (, ), ;, }, Tracer, newTracer, (, String, passName, ), {, String, comment, =, passName, +]
[;, maybeSanityCheck, (, ), ;, }, Tracer, newTracer, (, String, passName, ), {, String, comment, =, passName, +, (, recentChange]
[;, }, Tracer, newTracer, (, String, passName, ), {, String, comment, =, passName, +, (, recentChange, ., hasCodeChanged, (, )]
[;, if, (, options, ., tracer, ., isOn, (, ), ), {, tracker, ., recordPassStart, (, passName, ), ;, }]
[+, (, recentChange, ., hasCodeChanged, (, ), ?, " on recently changed AST", :, "", ), ;, if, (, options, ., tracer, ., isOn]
[;, if, (, options, ., tracer, ., isOn, (, ), ), {, tracker, ., recordPassStart, (, passName, ), ;, }]
[), ;, if, (, options, ., tracer, ., isOn, (, ), ), {, tracker, ., recordPassStart, (, passName, ), ;]
[?, " on recently changed AST", :, "", ), ;, if, (, options, ., tracer, ., isOn, (, ), ), {, tracker, ., recordPassStart]
[., hasCodeChanged, (, ), ?, " on recently changed AST", :, "", ), ;, if, (, options, ., tracer, ., isOn, (, ), )]
[:, "", ), ;, if, (, options, ., tracer, ., isOn, (, ), ), {, tracker, ., recordPassStart, (, passName]
[), ;, if, (, options, ., tracer, ., isOn, (, ), ), {, tracker, ., recordPassStart, (, passName, ), ;]
[), {, tracker, ., recordPassStart, (, passName, ), ;, }, return, new, Tracer, (, "Compiler", ,, comment, ), ;, }]
[., isOn, (, ), ), {, tracker, ., recordPassStart, (, passName, ), ;, }, return, new, Tracer, (, "Compiler", ,]
[., tracer, ., isOn, (, ), ), {, tracker, ., recordPassStart, (, passName, ), ;, }, return, new, Tracer, (]
[;, }, return, new, Tracer, (, "Compiler", ,, comment, ), ;, }, void, stopTracer, (, Tracer, t, ,, String, passName]
[., recordPassStart, (, passName, ), ;, }, return, new, Tracer, (, "Compiler", ,, comment, ), ;, }, void, stopTracer, (]
[), ;, }, return, new, Tracer, (, "Compiler", ,, comment, ), ;, }, void, stopTracer, (, Tracer, t, ,, String]
[;, }, void, stopTracer, (, Tracer, t, ,, String, passName, ), {, long, result, =, t, ., stop, (, )]
[,, comment, ), ;, }, void, stopTracer, (, Tracer, t, ,, String, passName, ), {, long, result, =, t, .]
[), ;, }, void, stopTracer, (, Tracer, t, ,, String, passName, ), {, long, result, =, t, ., stop, (]
[;, if, (, options, ., tracer, ., isOn, (, ), ), {, tracker, ., recordPassStop, (, passName, ,, result, )]
[., stop, (, ), ;, if, (, options, ., tracer, ., isOn, (, ), ), {, tracker, ., recordPassStop, (]
[), {, tracker, ., recordPassStop, (, passName, ,, result, ), ;, }, }, public, Result, getResult, (, ), {, PassConfig]
[., isOn, (, ), ), {, tracker, ., recordPassStop, (, passName, ,, result, ), ;, }, }, public, Result, getResult]
[., tracer, ., isOn, (, ), ), {, tracker, ., recordPassStop, (, passName, ,, result, ), ;, }, }, public]
[;, }, }, public, Result, getResult, (, ), {, PassConfig, ., State, state, =, getPassConfig, (, ), ., getIntermediateState, (]
[., recordPassStop, (, passName, ,, result, ), ;, }, }, public, Result, getResult, (, ), {, PassConfig, ., State, state]
[,, result, ), ;, }, }, public, Result, getResult, (, ), {, PassConfig, ., State, state, =, getPassConfig, (, )]
[), ;, }, }, public, Result, getResult, (, ), {, PassConfig, ., State, state, =, getPassConfig, (, ), ., getIntermediateState]
[;, return, new, Result, (, getErrors, (, ), ,, getWarnings, (, ), ,, debugLog, ., toString, (, ), ,, state]
[., getIntermediateState, (, ), ;, return, new, Result, (, getErrors, (, ), ,, getWarnings, (, ), ,, debugLog, ., toString]
[;, }, public, JSError, [, ], getMessages, (, ), {, return, getErrors, (, ), ;, }, public, JSError, [, ]]
[,, getWarnings, (, ), ,, debugLog, ., toString, (, ), ,, state, ., variableMap, ,, state, ., propertyMap, ,, state]
[,, debugLog, ., toString, (, ), ,, state, ., variableMap, ,, state, ., propertyMap, ,, state, ., anonymousFunctionNameMap, ,, state]
[,, state, ., variableMap, ,, state, ., propertyMap, ,, state, ., anonymousFunctionNameMap, ,, state, ., stringMap, ,, functionInformationMap, ,, sourceMap]
[., toString, (, ), ,, state, ., variableMap, ,, state, ., propertyMap, ,, state, ., anonymousFunctionNameMap, ,, state, ., stringMap]
[,, state, ., propertyMap, ,, state, ., anonymousFunctionNameMap, ,, state, ., stringMap, ,, functionInformationMap, ,, sourceMap, ,, externExports, ,, state]
[., variableMap, ,, state, ., propertyMap, ,, state, ., anonymousFunctionNameMap, ,, state, ., stringMap, ,, functionInformationMap, ,, sourceMap, ,, externExports]
[,, state, ., anonymousFunctionNameMap, ,, state, ., stringMap, ,, functionInformationMap, ,, sourceMap, ,, externExports, ,, state, ., cssNames, ,, state]
[., propertyMap, ,, state, ., anonymousFunctionNameMap, ,, state, ., stringMap, ,, functionInformationMap, ,, sourceMap, ,, externExports, ,, state, ., cssNames]
[,, state, ., stringMap, ,, functionInformationMap, ,, sourceMap, ,, externExports, ,, state, ., cssNames, ,, state, ., idGeneratorMap, ), ;]
[., anonymousFunctionNameMap, ,, state, ., stringMap, ,, functionInformationMap, ,, sourceMap, ,, externExports, ,, state, ., cssNames, ,, state, ., idGeneratorMap]
[,, functionInformationMap, ,, sourceMap, ,, externExports, ,, state, ., cssNames, ,, state, ., idGeneratorMap, ), ;, }, public, JSError, []
[., stringMap, ,, functionInformationMap, ,, sourceMap, ,, externExports, ,, state, ., cssNames, ,, state, ., idGeneratorMap, ), ;, }, public]
[,, sourceMap, ,, externExports, ,, state, ., cssNames, ,, state, ., idGeneratorMap, ), ;, }, public, JSError, [, ], getMessages]
[,, externExports, ,, state, ., cssNames, ,, state, ., idGeneratorMap, ), ;, }, public, JSError, [, ], getMessages, (, )]
[,, state, ., cssNames, ,, state, ., idGeneratorMap, ), ;, }, public, JSError, [, ], getMessages, (, ), {, return]
[,, state, ., idGeneratorMap, ), ;, }, public, JSError, [, ], getMessages, (, ), {, return, getErrors, (, ), ;]
[., cssNames, ,, state, ., idGeneratorMap, ), ;, }, public, JSError, [, ], getMessages, (, ), {, return, getErrors, (]
[), ;, }, public, JSError, [, ], getMessages, (, ), {, return, getErrors, (, ), ;, }, public, JSError, []
[., idGeneratorMap, ), ;, }, public, JSError, [, ], getMessages, (, ), {, return, getErrors, (, ), ;, }, public]
[;, }, public, JSError, [, ], getErrors, (, ), {, return, errorManager, ., getErrors, (, ), ;, }, public, JSError]
[;, }, public, JSError, [, ], getWarnings, (, ), {, return, errorManager, ., getWarnings, (, ), ;, }, @, Override]
[., getErrors, (, ), ;, }, public, JSError, [, ], getWarnings, (, ), {, return, errorManager, ., getWarnings, (, )]
[;, }, @, Override, public, Node, getRoot, (, ), {, return, externAndJsRoot, ;, }, private, int, nextUniqueNameId, (, ), {]
[., getWarnings, (, ), ;, }, @, Override, public, Node, getRoot, (, ), {, return, externAndJsRoot, ;, }, private, int]
[;, }, private, int, nextUniqueNameId, (, ), {, return, uniqueNameId, ++, ;, }, @, VisibleForTesting, void, resetUniqueNameId, (, ), {]
[;, }, @, VisibleForTesting, void, resetUniqueNameId, (, ), {, uniqueNameId, =, 0, ;, }, @, Override, Supplier, <, String, >]
[++, ;, }, @, VisibleForTesting, void, resetUniqueNameId, (, ), {, uniqueNameId, =, 0, ;, }, @, Override, Supplier, <, String]
[=, 0, ;, }, @, Override, Supplier, <, String, >, getUniqueNameIdSupplier, (, ), {, final, Compiler, self, =, this, ;]
[;, }, @, Override, Supplier, <, String, >, getUniqueNameIdSupplier, (, ), {, final, Compiler, self, =, this, ;, return, new]
[;, return, new, Supplier, <, String, >, (, ), {, @, Override, public, String, get, (, ), {, return, String]
[;, }, @, Override, boolean, areNodesEqualForInlining, (, Node, n1, ,, Node, n2, ), {, if, (, options, ., ambiguateProperties, ||]
[;, }, }, ;, }, @, Override, boolean, areNodesEqualForInlining, (, Node, n1, ,, Node, n2, ), {, if, (, options]
[., valueOf, (, self, ., nextUniqueNameId, (, ), ), ;, }, }, ;, }, @, Override, boolean, areNodesEqualForInlining, (, Node]
[), ;, }, }, ;, }, @, Override, boolean, areNodesEqualForInlining, (, Node, n1, ,, Node, n2, ), {, if, (]
[., nextUniqueNameId, (, ), ), ;, }, }, ;, }, @, Override, boolean, areNodesEqualForInlining, (, Node, n1, ,, Node, n2]
[), {, return, n1, ., isEquivalentToTyped, (, n2, ), ;, }, else, {, return, n1, ., isEquivalentTo, (, n2, )]
[||, options, ., disambiguateProperties, ), {, return, n1, ., isEquivalentToTyped, (, n2, ), ;, }, else, {, return, n1, .]
[., ambiguateProperties, ||, options, ., disambiguateProperties, ), {, return, n1, ., isEquivalentToTyped, (, n2, ), ;, }, else, {, return]
[), {, return, n1, ., isEquivalentToTyped, (, n2, ), ;, }, else, {, return, n1, ., isEquivalentTo, (, n2, )]
[., disambiguateProperties, ), {, return, n1, ., isEquivalentToTyped, (, n2, ), ;, }, else, {, return, n1, ., isEquivalentTo, (]
[;, }, else, {, return, n1, ., isEquivalentTo, (, n2, ), ;, }, }, @, Override, public, CompilerInput, getInput, (]
[., isEquivalentToTyped, (, n2, ), ;, }, else, {, return, n1, ., isEquivalentTo, (, n2, ), ;, }, }, @]
[), ;, }, else, {, return, n1, ., isEquivalentTo, (, n2, ), ;, }, }, @, Override, public, CompilerInput, getInput]
[;, }, }, @, Override, public, CompilerInput, getInput, (, InputId, id, ), {, return, inputsById, ., get, (, id, )]
[., isEquivalentTo, (, n2, ), ;, }, }, @, Override, public, CompilerInput, getInput, (, InputId, id, ), {, return, inputsById]
[), ;, }, }, @, Override, public, CompilerInput, getInput, (, InputId, id, ), {, return, inputsById, ., get, (, id]
[;, }, protected, void, removeExternInput, (, InputId, id, ), {, CompilerInput, input, =, getInput, (, id, ), ;, if, (]
[., get, (, id, ), ;, }, protected, void, removeExternInput, (, InputId, id, ), {, CompilerInput, input, =, getInput, (]
[), ;, }, protected, void, removeExternInput, (, InputId, id, ), {, CompilerInput, input, =, getInput, (, id, ), ;, if]
[;, if, (, input, ==, null, ), {, return, ;, }, Preconditions, ., checkState, (, input, ., isExtern, (, )]
[), ;, if, (, input, ==, null, ), {, return, ;, }, Preconditions, ., checkState, (, input, ., isExtern, (]
[), {, return, ;, }, Preconditions, ., checkState, (, input, ., isExtern, (, ), ,, "Not an extern input: %s", ,, input, ., getName]
[==, null, ), {, return, ;, }, Preconditions, ., checkState, (, input, ., isExtern, (, ), ,, "Not an extern input: %s", ,, input]
[), {, return, ;, }, Preconditions, ., checkState, (, input, ., isExtern, (, ), ,, "Not an extern input: %s", ,, input, ., getName]
[;, inputsById, ., remove, (, id, ), ;, externs, ., remove, (, input, ), ;, Node, root, =, input, .]
[., checkState, (, input, ., isExtern, (, ), ,, "Not an extern input: %s", ,, input, ., getName, (, ), ), ;, inputsById, .]
[,, "Not an extern input: %s", ,, input, ., getName, (, ), ), ;, inputsById, ., remove, (, id, ), ;, externs, ., remove]
[., isExtern, (, ), ,, "Not an extern input: %s", ,, input, ., getName, (, ), ), ;, inputsById, ., remove, (, id, )]
[,, input, ., getName, (, ), ), ;, inputsById, ., remove, (, id, ), ;, externs, ., remove, (, input]
[), ;, inputsById, ., remove, (, id, ), ;, externs, ., remove, (, input, ), ;, Node, root, =, input]
[., getName, (, ), ), ;, inputsById, ., remove, (, id, ), ;, externs, ., remove, (, input, ), ;]
[;, externs, ., remove, (, input, ), ;, Node, root, =, input, ., getAstRoot, (, this, ), ;, if, (]
[., remove, (, id, ), ;, externs, ., remove, (, input, ), ;, Node, root, =, input, ., getAstRoot, (]
[), ;, externs, ., remove, (, input, ), ;, Node, root, =, input, ., getAstRoot, (, this, ), ;, if]
[;, Node, root, =, input, ., getAstRoot, (, this, ), ;, if, (, root, !=, null, ), {, root, .]
[., remove, (, input, ), ;, Node, root, =, input, ., getAstRoot, (, this, ), ;, if, (, root, !=]
[), ;, Node, root, =, input, ., getAstRoot, (, this, ), ;, if, (, root, !=, null, ), {, root]
[;, if, (, root, !=, null, ), {, root, ., detachFromParent, (, ), ;, }, }, @, Override, public, CompilerInput]
[., getAstRoot, (, this, ), ;, if, (, root, !=, null, ), {, root, ., detachFromParent, (, ), ;, }]
[), ;, if, (, root, !=, null, ), {, root, ., detachFromParent, (, ), ;, }, }, @, Override, public]
[), {, root, ., detachFromParent, (, ), ;, }, }, @, Override, public, CompilerInput, newExternInput, (, String, name, ), {]
[!=, null, ), {, root, ., detachFromParent, (, ), ;, }, }, @, Override, public, CompilerInput, newExternInput, (, String, name]
[), {, root, ., detachFromParent, (, ), ;, }, }, @, Override, public, CompilerInput, newExternInput, (, String, name, ), {]
[;, }, }, @, Override, public, CompilerInput, newExternInput, (, String, name, ), {, SourceAst, ast, =, new, SyntheticAst, (, name]
[., detachFromParent, (, ), ;, }, }, @, Override, public, CompilerInput, newExternInput, (, String, name, ), {, SourceAst, ast, =]
[;, if, (, inputsById, ., containsKey, (, ast, ., getInputId, (, ), ), ), {, throw, new, IllegalArgumentException, (, "Conflicting externs name: "]
[), ;, if, (, inputsById, ., containsKey, (, ast, ., getInputId, (, ), ), ), {, throw, new, IllegalArgumentException, (]
[), {, throw, new, IllegalArgumentException, (, "Conflicting externs name: ", +, name, ), ;, }, CompilerInput, input, =, new, CompilerInput, (, ast, ,]
[., containsKey, (, ast, ., getInputId, (, ), ), ), {, throw, new, IllegalArgumentException, (, "Conflicting externs name: ", +, name, ), ;]
[), ), {, throw, new, IllegalArgumentException, (, "Conflicting externs name: ", +, name, ), ;, }, CompilerInput, input, =, new, CompilerInput, (, ast]
[., getInputId, (, ), ), ), {, throw, new, IllegalArgumentException, (, "Conflicting externs name: ", +, name, ), ;, }, CompilerInput, input, =]
[;, }, CompilerInput, input, =, new, CompilerInput, (, ast, ,, true, ), ;, putCompilerInput, (, input, ., getInputId, (, )]
[), ;, }, CompilerInput, input, =, new, CompilerInput, (, ast, ,, true, ), ;, putCompilerInput, (, input, ., getInputId, (]
[+, name, ), ;, }, CompilerInput, input, =, new, CompilerInput, (, ast, ,, true, ), ;, putCompilerInput, (, input, .]
[), ;, }, CompilerInput, input, =, new, CompilerInput, (, ast, ,, true, ), ;, putCompilerInput, (, input, ., getInputId, (]
[;, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, externsRoot, ., addChildToFront, (, ast, ., getAstRoot, (]
[,, true, ), ;, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, externsRoot, ., addChildToFront, (, ast]
[), ;, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, externsRoot, ., addChildToFront, (, ast, ., getAstRoot]
[;, externsRoot, ., addChildToFront, (, ast, ., getAstRoot, (, this, ), ), ;, externs, ., add, (, 0, ,, input]
[,, input, ), ;, externsRoot, ., addChildToFront, (, ast, ., getAstRoot, (, this, ), ), ;, externs, ., add, (]
[., getInputId, (, ), ,, input, ), ;, externsRoot, ., addChildToFront, (, ast, ., getAstRoot, (, this, ), ), ;]
[), ;, externsRoot, ., addChildToFront, (, ast, ., getAstRoot, (, this, ), ), ;, externs, ., add, (, 0, ,]
[;, externs, ., add, (, 0, ,, input, ), ;, return, input, ;, }, private, CompilerInput, putCompilerInput, (, InputId, id]
[., addChildToFront, (, ast, ., getAstRoot, (, this, ), ), ;, externs, ., add, (, 0, ,, input, ), ;]
[), ;, externs, ., add, (, 0, ,, input, ), ;, return, input, ;, }, private, CompilerInput, putCompilerInput, (, InputId]
[., getAstRoot, (, this, ), ), ;, externs, ., add, (, 0, ,, input, ), ;, return, input, ;, }]
[), ), ;, externs, ., add, (, 0, ,, input, ), ;, return, input, ;, }, private, CompilerInput, putCompilerInput, (]
[;, return, input, ;, }, private, CompilerInput, putCompilerInput, (, InputId, id, ,, CompilerInput, input, ), {, input, ., setCompiler, (]
[., add, (, 0, ,, input, ), ;, return, input, ;, }, private, CompilerInput, putCompilerInput, (, InputId, id, ,, CompilerInput]
[,, input, ), ;, return, input, ;, }, private, CompilerInput, putCompilerInput, (, InputId, id, ,, CompilerInput, input, ), {, input]
[), ;, return, input, ;, }, private, CompilerInput, putCompilerInput, (, InputId, id, ,, CompilerInput, input, ), {, input, ., setCompiler]
[;, }, private, CompilerInput, putCompilerInput, (, InputId, id, ,, CompilerInput, input, ), {, input, ., setCompiler, (, this, ), ;]
[;, return, inputsById, ., put, (, id, ,, input, ), ;, }, void, addIncrementalSourceAst, (, JsAst, ast, ), {, InputId]
[., setCompiler, (, this, ), ;, return, inputsById, ., put, (, id, ,, input, ), ;, }, void, addIncrementalSourceAst, (]
[), ;, return, inputsById, ., put, (, id, ,, input, ), ;, }, void, addIncrementalSourceAst, (, JsAst, ast, ), {]
[;, }, void, addIncrementalSourceAst, (, JsAst, ast, ), {, InputId, id, =, ast, ., getInputId, (, ), ;, Preconditions, .]
[., put, (, id, ,, input, ), ;, }, void, addIncrementalSourceAst, (, JsAst, ast, ), {, InputId, id, =, ast]
[,, input, ), ;, }, void, addIncrementalSourceAst, (, JsAst, ast, ), {, InputId, id, =, ast, ., getInputId, (, )]
[), ;, }, void, addIncrementalSourceAst, (, JsAst, ast, ), {, InputId, id, =, ast, ., getInputId, (, ), ;, Preconditions]
[;, Preconditions, ., checkState, (, getInput, (, id, ), ==, null, ,, "Duplicate input %s", ,, id, ., getIdName, (, ), )]
[., getInputId, (, ), ;, Preconditions, ., checkState, (, getInput, (, id, ), ==, null, ,, "Duplicate input %s", ,, id, .]
[;, putCompilerInput, (, id, ,, new, CompilerInput, (, ast, ), ), ;, }, boolean, replaceIncrementalSourceAst, (, JsAst, ast, ), {]
[., checkState, (, getInput, (, id, ), ==, null, ,, "Duplicate input %s", ,, id, ., getIdName, (, ), ), ;, putCompilerInput]
[,, "Duplicate input %s", ,, id, ., getIdName, (, ), ), ;, putCompilerInput, (, id, ,, new, CompilerInput, (, ast, ), )]
[==, null, ,, "Duplicate input %s", ,, id, ., getIdName, (, ), ), ;, putCompilerInput, (, id, ,, new, CompilerInput, (, ast]
[), ==, null, ,, "Duplicate input %s", ,, id, ., getIdName, (, ), ), ;, putCompilerInput, (, id, ,, new, CompilerInput, (]
[,, "Duplicate input %s", ,, id, ., getIdName, (, ), ), ;, putCompilerInput, (, id, ,, new, CompilerInput, (, ast, ), )]
[,, id, ., getIdName, (, ), ), ;, putCompilerInput, (, id, ,, new, CompilerInput, (, ast, ), ), ;, }]
[), ;, putCompilerInput, (, id, ,, new, CompilerInput, (, ast, ), ), ;, }, boolean, replaceIncrementalSourceAst, (, JsAst, ast, )]
[., getIdName, (, ), ), ;, putCompilerInput, (, id, ,, new, CompilerInput, (, ast, ), ), ;, }, boolean, replaceIncrementalSourceAst]
[;, }, boolean, replaceIncrementalSourceAst, (, JsAst, ast, ), {, CompilerInput, oldInput, =, getInput, (, ast, ., getInputId, (, ), )]
[,, new, CompilerInput, (, ast, ), ), ;, }, boolean, replaceIncrementalSourceAst, (, JsAst, ast, ), {, CompilerInput, oldInput, =, getInput]
[), ;, }, boolean, replaceIncrementalSourceAst, (, JsAst, ast, ), {, CompilerInput, oldInput, =, getInput, (, ast, ., getInputId, (, )]
[), ), ;, }, boolean, replaceIncrementalSourceAst, (, JsAst, ast, ), {, CompilerInput, oldInput, =, getInput, (, ast, ., getInputId, (]
[;, Preconditions, ., checkNotNull, (, oldInput, ,, "No input to replace: %s", ,, ast, ., getInputId, (, ), ., getIdName, (, ), ), ;]
[), ;, Preconditions, ., checkNotNull, (, oldInput, ,, "No input to replace: %s", ,, ast, ., getInputId, (, ), ., getIdName, (, ), )]
[., getInputId, (, ), ), ;, Preconditions, ., checkNotNull, (, oldInput, ,, "No input to replace: %s", ,, ast, ., getInputId, (, ), .]
[;, Node, newRoot, =, ast, ., getAstRoot, (, this, ), ;, if, (, newRoot, ==, null, ), {, return, false]
[., checkNotNull, (, oldInput, ,, "No input to replace: %s", ,, ast, ., getInputId, (, ), ., getIdName, (, ), ), ;, Node, newRoot]
[,, "No input to replace: %s", ,, ast, ., getInputId, (, ), ., getIdName, (, ), ), ;, Node, newRoot, =, ast, ., getAstRoot]
[,, ast, ., getInputId, (, ), ., getIdName, (, ), ), ;, Node, newRoot, =, ast, ., getAstRoot, (, this]
[), ;, Node, newRoot, =, ast, ., getAstRoot, (, this, ), ;, if, (, newRoot, ==, null, ), {, return]
[., getIdName, (, ), ), ;, Node, newRoot, =, ast, ., getAstRoot, (, this, ), ;, if, (, newRoot, ==]
[., getInputId, (, ), ., getIdName, (, ), ), ;, Node, newRoot, =, ast, ., getAstRoot, (, this, ), ;]
[;, if, (, newRoot, ==, null, ), {, return, false, ;, }, Node, oldRoot, =, oldInput, ., getAstRoot, (, this]
[., getAstRoot, (, this, ), ;, if, (, newRoot, ==, null, ), {, return, false, ;, }, Node, oldRoot, =]
[), ;, if, (, newRoot, ==, null, ), {, return, false, ;, }, Node, oldRoot, =, oldInput, ., getAstRoot, (]
[), {, return, false, ;, }, Node, oldRoot, =, oldInput, ., getAstRoot, (, this, ), ;, if, (, oldRoot, !=]
[==, null, ), {, return, false, ;, }, Node, oldRoot, =, oldInput, ., getAstRoot, (, this, ), ;, if, (]
[), {, return, false, ;, }, Node, oldRoot, =, oldInput, ., getAstRoot, (, this, ), ;, if, (, oldRoot, !=]
[;, }, Node, oldRoot, =, oldInput, ., getAstRoot, (, this, ), ;, if, (, oldRoot, !=, null, ), {, oldRoot]
[;, if, (, oldRoot, !=, null, ), {, oldRoot, ., getParent, (, ), ., replaceChild, (, oldRoot, ,, newRoot, )]
[., getAstRoot, (, this, ), ;, if, (, oldRoot, !=, null, ), {, oldRoot, ., getParent, (, ), ., replaceChild]
[), ;, if, (, oldRoot, !=, null, ), {, oldRoot, ., getParent, (, ), ., replaceChild, (, oldRoot, ,, newRoot]
[), {, oldRoot, ., getParent, (, ), ., replaceChild, (, oldRoot, ,, newRoot, ), ;, }, else, {, getRoot, (]
[!=, null, ), {, oldRoot, ., getParent, (, ), ., replaceChild, (, oldRoot, ,, newRoot, ), ;, }, else, {]
[), {, oldRoot, ., getParent, (, ), ., replaceChild, (, oldRoot, ,, newRoot, ), ;, }, else, {, getRoot, (]
[;, }, else, {, getRoot, (, ), ., getLastChild, (, ), ., addChildToBack, (, newRoot, ), ;, }, CompilerInput, newInput]
[., replaceChild, (, oldRoot, ,, newRoot, ), ;, }, else, {, getRoot, (, ), ., getLastChild, (, ), ., addChildToBack]
[., getParent, (, ), ., replaceChild, (, oldRoot, ,, newRoot, ), ;, }, else, {, getRoot, (, ), ., getLastChild]
[,, newRoot, ), ;, }, else, {, getRoot, (, ), ., getLastChild, (, ), ., addChildToBack, (, newRoot, ), ;]
[), ;, }, else, {, getRoot, (, ), ., getLastChild, (, ), ., addChildToBack, (, newRoot, ), ;, }, CompilerInput]
[;, }, CompilerInput, newInput, =, new, CompilerInput, (, ast, ), ;, putCompilerInput, (, ast, ., getInputId, (, ), ,, newInput]
[., addChildToBack, (, newRoot, ), ;, }, CompilerInput, newInput, =, new, CompilerInput, (, ast, ), ;, putCompilerInput, (, ast, .]
[., getLastChild, (, ), ., addChildToBack, (, newRoot, ), ;, }, CompilerInput, newInput, =, new, CompilerInput, (, ast, ), ;]
[), ;, }, CompilerInput, newInput, =, new, CompilerInput, (, ast, ), ;, putCompilerInput, (, ast, ., getInputId, (, ), ,]
[;, putCompilerInput, (, ast, ., getInputId, (, ), ,, newInput, ), ;, JSModule, module, =, oldInput, ., getModule, (, )]
[), ;, putCompilerInput, (, ast, ., getInputId, (, ), ,, newInput, ), ;, JSModule, module, =, oldInput, ., getModule, (]
[;, JSModule, module, =, oldInput, ., getModule, (, ), ;, if, (, module, !=, null, ), {, module, ., addAfter]
[,, newInput, ), ;, JSModule, module, =, oldInput, ., getModule, (, ), ;, if, (, module, !=, null, ), {]
[., getInputId, (, ), ,, newInput, ), ;, JSModule, module, =, oldInput, ., getModule, (, ), ;, if, (, module]
[), ;, JSModule, module, =, oldInput, ., getModule, (, ), ;, if, (, module, !=, null, ), {, module, .]
[;, if, (, module, !=, null, ), {, module, ., addAfter, (, newInput, ,, oldInput, ), ;, module, ., remove]
[., getModule, (, ), ;, if, (, module, !=, null, ), {, module, ., addAfter, (, newInput, ,, oldInput, )]
[), {, module, ., addAfter, (, newInput, ,, oldInput, ), ;, module, ., remove, (, oldInput, ), ;, }, Preconditions]
[!=, null, ), {, module, ., addAfter, (, newInput, ,, oldInput, ), ;, module, ., remove, (, oldInput, ), ;]
[), {, module, ., addAfter, (, newInput, ,, oldInput, ), ;, module, ., remove, (, oldInput, ), ;, }, Preconditions]
[;, module, ., remove, (, oldInput, ), ;, }, Preconditions, ., checkState, (, newInput, ., getInputId, (, ), ., equals]
[., addAfter, (, newInput, ,, oldInput, ), ;, module, ., remove, (, oldInput, ), ;, }, Preconditions, ., checkState, (]
[,, oldInput, ), ;, module, ., remove, (, oldInput, ), ;, }, Preconditions, ., checkState, (, newInput, ., getInputId, (]
[), ;, module, ., remove, (, oldInput, ), ;, }, Preconditions, ., checkState, (, newInput, ., getInputId, (, ), .]
[;, }, Preconditions, ., checkState, (, newInput, ., getInputId, (, ), ., equals, (, oldInput, ., getInputId, (, ), )]
[., remove, (, oldInput, ), ;, }, Preconditions, ., checkState, (, newInput, ., getInputId, (, ), ., equals, (, oldInput]
[), ;, }, Preconditions, ., checkState, (, newInput, ., getInputId, (, ), ., equals, (, oldInput, ., getInputId, (, )]
[;, InputId, inputIdOnAst, =, newInput, ., getAstRoot, (, this, ), ., getInputId, (, ), ;, Preconditions, ., checkState, (, newInput]
[., checkState, (, newInput, ., getInputId, (, ), ., equals, (, oldInput, ., getInputId, (, ), ), ), ;, InputId]
[), ;, InputId, inputIdOnAst, =, newInput, ., getAstRoot, (, this, ), ., getInputId, (, ), ;, Preconditions, ., checkState, (]
[., equals, (, oldInput, ., getInputId, (, ), ), ), ;, InputId, inputIdOnAst, =, newInput, ., getAstRoot, (, this, )]
[., getInputId, (, ), ., equals, (, oldInput, ., getInputId, (, ), ), ), ;, InputId, inputIdOnAst, =, newInput, .]
[), ), ;, InputId, inputIdOnAst, =, newInput, ., getAstRoot, (, this, ), ., getInputId, (, ), ;, Preconditions, ., checkState]
[., getInputId, (, ), ), ), ;, InputId, inputIdOnAst, =, newInput, ., getAstRoot, (, this, ), ., getInputId, (, )]
[;, Preconditions, ., checkState, (, newInput, ., getInputId, (, ), ., equals, (, inputIdOnAst, ), ), ;, inputs, ., remove]
[., getInputId, (, ), ;, Preconditions, ., checkState, (, newInput, ., getInputId, (, ), ., equals, (, inputIdOnAst, ), )]
[., getAstRoot, (, this, ), ., getInputId, (, ), ;, Preconditions, ., checkState, (, newInput, ., getInputId, (, ), .]
[), ., getInputId, (, ), ;, Preconditions, ., checkState, (, newInput, ., getInputId, (, ), ., equals, (, inputIdOnAst, )]
[;, inputs, ., remove, (, oldInput, ), ;, return, true, ;, }, boolean, addNewSourceAst, (, JsAst, ast, ), {, CompilerInput]
[., checkState, (, newInput, ., getInputId, (, ), ., equals, (, inputIdOnAst, ), ), ;, inputs, ., remove, (, oldInput]
[), ;, inputs, ., remove, (, oldInput, ), ;, return, true, ;, }, boolean, addNewSourceAst, (, JsAst, ast, ), {]
[., equals, (, inputIdOnAst, ), ), ;, inputs, ., remove, (, oldInput, ), ;, return, true, ;, }, boolean, addNewSourceAst]
[., getInputId, (, ), ., equals, (, inputIdOnAst, ), ), ;, inputs, ., remove, (, oldInput, ), ;, return, true]
[), ), ;, inputs, ., remove, (, oldInput, ), ;, return, true, ;, }, boolean, addNewSourceAst, (, JsAst, ast, )]
[;, return, true, ;, }, boolean, addNewSourceAst, (, JsAst, ast, ), {, CompilerInput, oldInput, =, getInput, (, ast, ., getInputId]
[., remove, (, oldInput, ), ;, return, true, ;, }, boolean, addNewSourceAst, (, JsAst, ast, ), {, CompilerInput, oldInput, =]
[), ;, return, true, ;, }, boolean, addNewSourceAst, (, JsAst, ast, ), {, CompilerInput, oldInput, =, getInput, (, ast, .]
[;, }, boolean, addNewSourceAst, (, JsAst, ast, ), {, CompilerInput, oldInput, =, getInput, (, ast, ., getInputId, (, ), )]
[;, if, (, oldInput, !=, null, ), {, throw, new, IllegalStateException, (, "Input already exists: ", +, ast, ., getInputId, (, ), .]
[), ;, if, (, oldInput, !=, null, ), {, throw, new, IllegalStateException, (, "Input already exists: ", +, ast, ., getInputId, (, )]
[., getInputId, (, ), ), ;, if, (, oldInput, !=, null, ), {, throw, new, IllegalStateException, (, "Input already exists: ", +, ast]
[), {, throw, new, IllegalStateException, (, "Input already exists: ", +, ast, ., getInputId, (, ), ., getIdName, (, ), ), ;, }]
[!=, null, ), {, throw, new, IllegalStateException, (, "Input already exists: ", +, ast, ., getInputId, (, ), ., getIdName, (, ), )]
[), {, throw, new, IllegalStateException, (, "Input already exists: ", +, ast, ., getInputId, (, ), ., getIdName, (, ), ), ;, }]
[;, }, Node, newRoot, =, ast, ., getAstRoot, (, this, ), ;, if, (, newRoot, ==, null, ), {, return]
[), ;, }, Node, newRoot, =, ast, ., getAstRoot, (, this, ), ;, if, (, newRoot, ==, null, ), {]
[+, ast, ., getInputId, (, ), ., getIdName, (, ), ), ;, }, Node, newRoot, =, ast, ., getAstRoot, (]
[), ;, }, Node, newRoot, =, ast, ., getAstRoot, (, this, ), ;, if, (, newRoot, ==, null, ), {]
[., getIdName, (, ), ), ;, }, Node, newRoot, =, ast, ., getAstRoot, (, this, ), ;, if, (, newRoot]
[., getInputId, (, ), ., getIdName, (, ), ), ;, }, Node, newRoot, =, ast, ., getAstRoot, (, this, )]
[;, if, (, newRoot, ==, null, ), {, return, false, ;, }, getRoot, (, ), ., getLastChild, (, ), .]
[., getAstRoot, (, this, ), ;, if, (, newRoot, ==, null, ), {, return, false, ;, }, getRoot, (, )]
[), ;, if, (, newRoot, ==, null, ), {, return, false, ;, }, getRoot, (, ), ., getLastChild, (, )]
[), {, return, false, ;, }, getRoot, (, ), ., getLastChild, (, ), ., addChildToBack, (, newRoot, ), ;, CompilerInput]
[==, null, ), {, return, false, ;, }, getRoot, (, ), ., getLastChild, (, ), ., addChildToBack, (, newRoot, )]
[), {, return, false, ;, }, getRoot, (, ), ., getLastChild, (, ), ., addChildToBack, (, newRoot, ), ;, CompilerInput]
[;, }, getRoot, (, ), ., getLastChild, (, ), ., addChildToBack, (, newRoot, ), ;, CompilerInput, newInput, =, new, CompilerInput]
[;, CompilerInput, newInput, =, new, CompilerInput, (, ast, ), ;, if, (, moduleGraph, ==, null, &&, !, modules, ., isEmpty]
[., addChildToBack, (, newRoot, ), ;, CompilerInput, newInput, =, new, CompilerInput, (, ast, ), ;, if, (, moduleGraph, ==, null]
[., getLastChild, (, ), ., addChildToBack, (, newRoot, ), ;, CompilerInput, newInput, =, new, CompilerInput, (, ast, ), ;, if]
[), ;, CompilerInput, newInput, =, new, CompilerInput, (, ast, ), ;, if, (, moduleGraph, ==, null, &&, !, modules, .]
[;, if, (, moduleGraph, ==, null, &&, !, modules, ., isEmpty, (, ), ), {, modules, ., get, (, 0]
[), ;, if, (, moduleGraph, ==, null, &&, !, modules, ., isEmpty, (, ), ), {, modules, ., get, (]
[), {, modules, ., get, (, 0, ), ., add, (, newInput, ), ;, }, putCompilerInput, (, ast, ., getInputId]
[&&, !, modules, ., isEmpty, (, ), ), {, modules, ., get, (, 0, ), ., add, (, newInput, )]
[==, null, &&, !, modules, ., isEmpty, (, ), ), {, modules, ., get, (, 0, ), ., add, (]
[&&, !, modules, ., isEmpty, (, ), ), {, modules, ., get, (, 0, ), ., add, (, newInput, )]
[), {, modules, ., get, (, 0, ), ., add, (, newInput, ), ;, }, putCompilerInput, (, ast, ., getInputId]
[), {, modules, ., get, (, 0, ), ., add, (, newInput, ), ;, }, putCompilerInput, (, ast, ., getInputId]
[., isEmpty, (, ), ), {, modules, ., get, (, 0, ), ., add, (, newInput, ), ;, }, putCompilerInput]
[;, }, putCompilerInput, (, ast, ., getInputId, (, ), ,, newInput, ), ;, return, true, ;, }, @, Override, JSModuleGraph]
[., add, (, newInput, ), ;, }, putCompilerInput, (, ast, ., getInputId, (, ), ,, newInput, ), ;, return, true]
[., get, (, 0, ), ., add, (, newInput, ), ;, }, putCompilerInput, (, ast, ., getInputId, (, ), ,]
[), ., add, (, newInput, ), ;, }, putCompilerInput, (, ast, ., getInputId, (, ), ,, newInput, ), ;, return]
[), ;, }, putCompilerInput, (, ast, ., getInputId, (, ), ,, newInput, ), ;, return, true, ;, }, @, Override]
[;, return, true, ;, }, @, Override, JSModuleGraph, getModuleGraph, (, ), {, return, moduleGraph, ;, }, JSModuleGraph, getDegenerateModuleGraph, (, )]
[,, newInput, ), ;, return, true, ;, }, @, Override, JSModuleGraph, getModuleGraph, (, ), {, return, moduleGraph, ;, }, JSModuleGraph]
[., getInputId, (, ), ,, newInput, ), ;, return, true, ;, }, @, Override, JSModuleGraph, getModuleGraph, (, ), {, return]
[), ;, return, true, ;, }, @, Override, JSModuleGraph, getModuleGraph, (, ), {, return, moduleGraph, ;, }, JSModuleGraph, getDegenerateModuleGraph, (]
[;, }, @, Override, JSModuleGraph, getModuleGraph, (, ), {, return, moduleGraph, ;, }, JSModuleGraph, getDegenerateModuleGraph, (, ), {, return, moduleGraph]
[;, }, JSModuleGraph, getDegenerateModuleGraph, (, ), {, return, moduleGraph, ==, null, ?, new, JSModuleGraph, (, modules, ), :, moduleGraph, ;]
[;, }, @, Override, public, JSTypeRegistry, getTypeRegistry, (, ), {, if, (, typeRegistry, ==, null, ), {, typeRegistry, =, new]
[?, new, JSModuleGraph, (, modules, ), :, moduleGraph, ;, }, @, Override, public, JSTypeRegistry, getTypeRegistry, (, ), {, if, (]
[==, null, ?, new, JSModuleGraph, (, modules, ), :, moduleGraph, ;, }, @, Override, public, JSTypeRegistry, getTypeRegistry, (, ), {]
[?, new, JSModuleGraph, (, modules, ), :, moduleGraph, ;, }, @, Override, public, JSTypeRegistry, getTypeRegistry, (, ), {, if, (]
[:, moduleGraph, ;, }, @, Override, public, JSTypeRegistry, getTypeRegistry, (, ), {, if, (, typeRegistry, ==, null, ), {, typeRegistry]
[), :, moduleGraph, ;, }, @, Override, public, JSTypeRegistry, getTypeRegistry, (, ), {, if, (, typeRegistry, ==, null, ), {]
[;, }, @, Override, public, JSTypeRegistry, getTypeRegistry, (, ), {, if, (, typeRegistry, ==, null, ), {, typeRegistry, =, new]
[), {, typeRegistry, =, new, JSTypeRegistry, (, oldErrorReporter, ,, options, ., looseTypes, ), ;, }, return, typeRegistry, ;, }, @]
[==, null, ), {, typeRegistry, =, new, JSTypeRegistry, (, oldErrorReporter, ,, options, ., looseTypes, ), ;, }, return, typeRegistry, ;]
[), {, typeRegistry, =, new, JSTypeRegistry, (, oldErrorReporter, ,, options, ., looseTypes, ), ;, }, return, typeRegistry, ;, }, @]
[=, new, JSTypeRegistry, (, oldErrorReporter, ,, options, ., looseTypes, ), ;, }, return, typeRegistry, ;, }, @, Override, public, MemoizedScopeCreator]
[;, }, return, typeRegistry, ;, }, @, Override, public, MemoizedScopeCreator, getTypedScopeCreator, (, ), {, return, getPassConfig, (, ), ., getTypedScopeCreator]
[,, options, ., looseTypes, ), ;, }, return, typeRegistry, ;, }, @, Override, public, MemoizedScopeCreator, getTypedScopeCreator, (, ), {, return]
[), ;, }, return, typeRegistry, ;, }, @, Override, public, MemoizedScopeCreator, getTypedScopeCreator, (, ), {, return, getPassConfig, (, ), .]
[., looseTypes, ), ;, }, return, typeRegistry, ;, }, @, Override, public, MemoizedScopeCreator, getTypedScopeCreator, (, ), {, return, getPassConfig, (]
[;, }, @, Override, public, MemoizedScopeCreator, getTypedScopeCreator, (, ), {, return, getPassConfig, (, ), ., getTypedScopeCreator, (, ), ;, }]
[;, }, @, SuppressWarnings, (, "unchecked", ), DefaultPassConfig, ensureDefaultPassConfig, (, ), {, PassConfig, passes, =, getPassConfig, (, ), ., getBasePassConfig]
[., getTypedScopeCreator, (, ), ;, }, @, SuppressWarnings, (, "unchecked", ), DefaultPassConfig, ensureDefaultPassConfig, (, ), {, PassConfig, passes, =, getPassConfig]
[DefaultPassConfig, ensureDefaultPassConfig, (, ), {, PassConfig, passes, =, getPassConfig, (, ), ., getBasePassConfig, (, ), ;, Preconditions, ., checkState, (]
[), DefaultPassConfig, ensureDefaultPassConfig, (, ), {, PassConfig, passes, =, getPassConfig, (, ), ., getBasePassConfig, (, ), ;, Preconditions, ., checkState]
[;, Preconditions, ., checkState, (, passes, instanceof, DefaultPassConfig, ,, "PassConfigs must eventually delegate to the DefaultPassConfig", ), ;, return, (, DefaultPassConfig, ), passes, ;, }, public]
[., getBasePassConfig, (, ), ;, Preconditions, ., checkState, (, passes, instanceof, DefaultPassConfig, ,, "PassConfigs must eventually delegate to the DefaultPassConfig", ), ;, return, (, DefaultPassConfig, )]
[;, return, (, DefaultPassConfig, ), passes, ;, }, public, SymbolTable, buildKnownSymbolTable, (, ), {, SymbolTable, symbolTable, =, new, SymbolTable, (]
[., checkState, (, passes, instanceof, DefaultPassConfig, ,, "PassConfigs must eventually delegate to the DefaultPassConfig", ), ;, return, (, DefaultPassConfig, ), passes, ;, }, public, SymbolTable, buildKnownSymbolTable]
[,, "PassConfigs must eventually delegate to the DefaultPassConfig", ), ;, return, (, DefaultPassConfig, ), passes, ;, }, public, SymbolTable, buildKnownSymbolTable, (, ), {, SymbolTable, symbolTable, =]
[instanceof, DefaultPassConfig, ,, "PassConfigs must eventually delegate to the DefaultPassConfig", ), ;, return, (, DefaultPassConfig, ), passes, ;, }, public, SymbolTable, buildKnownSymbolTable, (, ), {, SymbolTable]
[), ;, return, (, DefaultPassConfig, ), passes, ;, }, public, SymbolTable, buildKnownSymbolTable, (, ), {, SymbolTable, symbolTable, =, new, SymbolTable]
[;, }, public, SymbolTable, buildKnownSymbolTable, (, ), {, SymbolTable, symbolTable, =, new, SymbolTable, (, getTypeRegistry, (, ), ), ;, MemoizedScopeCreator]
[;, }, public, SymbolTable, buildKnownSymbolTable, (, ), {, SymbolTable, symbolTable, =, new, SymbolTable, (, getTypeRegistry, (, ), ), ;, MemoizedScopeCreator]
[;, MemoizedScopeCreator, typedScopeCreator, =, getTypedScopeCreator, (, ), ;, if, (, typedScopeCreator, !=, null, ), {, symbolTable, ., addScopes, (, typedScopeCreator]
[), ;, MemoizedScopeCreator, typedScopeCreator, =, getTypedScopeCreator, (, ), ;, if, (, typedScopeCreator, !=, null, ), {, symbolTable, ., addScopes, (]
[;, if, (, typedScopeCreator, !=, null, ), {, symbolTable, ., addScopes, (, typedScopeCreator, ., getAllMemoizedScopes, (, ), ), ;, symbolTable]
[), {, symbolTable, ., addScopes, (, typedScopeCreator, ., getAllMemoizedScopes, (, ), ), ;, symbolTable, ., addSymbolsFrom, (, typedScopeCreator, ), ;]
[!=, null, ), {, symbolTable, ., addScopes, (, typedScopeCreator, ., getAllMemoizedScopes, (, ), ), ;, symbolTable, ., addSymbolsFrom, (, typedScopeCreator]
[), {, symbolTable, ., addScopes, (, typedScopeCreator, ., getAllMemoizedScopes, (, ), ), ;, symbolTable, ., addSymbolsFrom, (, typedScopeCreator, ), ;]
[;, symbolTable, ., addSymbolsFrom, (, typedScopeCreator, ), ;, }, else, {, symbolTable, ., findScopes, (, this, ,, externsRoot, ,, jsRoot]
[., addScopes, (, typedScopeCreator, ., getAllMemoizedScopes, (, ), ), ;, symbolTable, ., addSymbolsFrom, (, typedScopeCreator, ), ;, }, else, {]
[), ;, symbolTable, ., addSymbolsFrom, (, typedScopeCreator, ), ;, }, else, {, symbolTable, ., findScopes, (, this, ,, externsRoot, ,]
[., getAllMemoizedScopes, (, ), ), ;, symbolTable, ., addSymbolsFrom, (, typedScopeCreator, ), ;, }, else, {, symbolTable, ., findScopes, (]
[;, }, else, {, symbolTable, ., findScopes, (, this, ,, externsRoot, ,, jsRoot, ), ;, }, GlobalNamespace, globalNamespace, =, ensureDefaultPassConfig]
[., addSymbolsFrom, (, typedScopeCreator, ), ;, }, else, {, symbolTable, ., findScopes, (, this, ,, externsRoot, ,, jsRoot, ), ;]
[), ;, }, else, {, symbolTable, ., findScopes, (, this, ,, externsRoot, ,, jsRoot, ), ;, }, GlobalNamespace, globalNamespace, =]
[;, }, GlobalNamespace, globalNamespace, =, ensureDefaultPassConfig, (, ), ., getGlobalNamespace, (, ), ;, if, (, globalNamespace, !=, null, ), {]
[., findScopes, (, this, ,, externsRoot, ,, jsRoot, ), ;, }, GlobalNamespace, globalNamespace, =, ensureDefaultPassConfig, (, ), ., getGlobalNamespace, (]
[,, externsRoot, ,, jsRoot, ), ;, }, GlobalNamespace, globalNamespace, =, ensureDefaultPassConfig, (, ), ., getGlobalNamespace, (, ), ;, if, (]
[,, jsRoot, ), ;, }, GlobalNamespace, globalNamespace, =, ensureDefaultPassConfig, (, ), ., getGlobalNamespace, (, ), ;, if, (, globalNamespace, !=]
[), ;, }, GlobalNamespace, globalNamespace, =, ensureDefaultPassConfig, (, ), ., getGlobalNamespace, (, ), ;, if, (, globalNamespace, !=, null, )]
[;, if, (, globalNamespace, !=, null, ), {, symbolTable, ., addSymbolsFrom, (, globalNamespace, ), ;, }, ReferenceCollectingCallback, refCollector, =, new]
[., getGlobalNamespace, (, ), ;, if, (, globalNamespace, !=, null, ), {, symbolTable, ., addSymbolsFrom, (, globalNamespace, ), ;, }]
[), {, symbolTable, ., addSymbolsFrom, (, globalNamespace, ), ;, }, ReferenceCollectingCallback, refCollector, =, new, ReferenceCollectingCallback, (, this, ,, ReferenceCollectingCallback, .]
[!=, null, ), {, symbolTable, ., addSymbolsFrom, (, globalNamespace, ), ;, }, ReferenceCollectingCallback, refCollector, =, new, ReferenceCollectingCallback, (, this, ,]
[), {, symbolTable, ., addSymbolsFrom, (, globalNamespace, ), ;, }, ReferenceCollectingCallback, refCollector, =, new, ReferenceCollectingCallback, (, this, ,, ReferenceCollectingCallback, .]
[;, }, ReferenceCollectingCallback, refCollector, =, new, ReferenceCollectingCallback, (, this, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (, this]
[., addSymbolsFrom, (, globalNamespace, ), ;, }, ReferenceCollectingCallback, refCollector, =, new, ReferenceCollectingCallback, (, this, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;]
[), ;, }, ReferenceCollectingCallback, refCollector, =, new, ReferenceCollectingCallback, (, this, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (]
[;, NodeTraversal, ., traverse, (, this, ,, getRoot, (, ), ,, refCollector, ), ;, symbolTable, ., addSymbolsFrom, (, refCollector, )]
[,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (, this, ,, getRoot, (, ), ,, refCollector, ), ;, symbolTable]
[), ;, NodeTraversal, ., traverse, (, this, ,, getRoot, (, ), ,, refCollector, ), ;, symbolTable, ., addSymbolsFrom, (, refCollector]
[., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (, this, ,, getRoot, (, ), ,, refCollector, ), ;, symbolTable, ., addSymbolsFrom]
[;, symbolTable, ., addSymbolsFrom, (, refCollector, ), ;, PreprocessorSymbolTable, preprocessorSymbolTable, =, ensureDefaultPassConfig, (, ), ., getPreprocessorSymbolTable, (, ), ;, if]
[., traverse, (, this, ,, getRoot, (, ), ,, refCollector, ), ;, symbolTable, ., addSymbolsFrom, (, refCollector, ), ;, PreprocessorSymbolTable]
[,, getRoot, (, ), ,, refCollector, ), ;, symbolTable, ., addSymbolsFrom, (, refCollector, ), ;, PreprocessorSymbolTable, preprocessorSymbolTable, =, ensureDefaultPassConfig, (]
[,, refCollector, ), ;, symbolTable, ., addSymbolsFrom, (, refCollector, ), ;, PreprocessorSymbolTable, preprocessorSymbolTable, =, ensureDefaultPassConfig, (, ), ., getPreprocessorSymbolTable, (]
[), ;, symbolTable, ., addSymbolsFrom, (, refCollector, ), ;, PreprocessorSymbolTable, preprocessorSymbolTable, =, ensureDefaultPassConfig, (, ), ., getPreprocessorSymbolTable, (, ), ;]
[;, PreprocessorSymbolTable, preprocessorSymbolTable, =, ensureDefaultPassConfig, (, ), ., getPreprocessorSymbolTable, (, ), ;, if, (, preprocessorSymbolTable, !=, null, ), {, symbolTable]
[., addSymbolsFrom, (, refCollector, ), ;, PreprocessorSymbolTable, preprocessorSymbolTable, =, ensureDefaultPassConfig, (, ), ., getPreprocessorSymbolTable, (, ), ;, if, (, preprocessorSymbolTable]
[), ;, PreprocessorSymbolTable, preprocessorSymbolTable, =, ensureDefaultPassConfig, (, ), ., getPreprocessorSymbolTable, (, ), ;, if, (, preprocessorSymbolTable, !=, null, ), {]
[;, if, (, preprocessorSymbolTable, !=, null, ), {, symbolTable, ., addSymbolsFrom, (, preprocessorSymbolTable, ), ;, }, symbolTable, ., fillNamespaceReferences, (]
[., getPreprocessorSymbolTable, (, ), ;, if, (, preprocessorSymbolTable, !=, null, ), {, symbolTable, ., addSymbolsFrom, (, preprocessorSymbolTable, ), ;, }]
[), {, symbolTable, ., addSymbolsFrom, (, preprocessorSymbolTable, ), ;, }, symbolTable, ., fillNamespaceReferences, (, ), ;, symbolTable, ., fillPropertyScopes, (]
[!=, null, ), {, symbolTable, ., addSymbolsFrom, (, preprocessorSymbolTable, ), ;, }, symbolTable, ., fillNamespaceReferences, (, ), ;, symbolTable, .]
[), {, symbolTable, ., addSymbolsFrom, (, preprocessorSymbolTable, ), ;, }, symbolTable, ., fillNamespaceReferences, (, ), ;, symbolTable, ., fillPropertyScopes, (]
[;, }, symbolTable, ., fillNamespaceReferences, (, ), ;, symbolTable, ., fillPropertyScopes, (, ), ;, symbolTable, ., fillThisReferences, (, this, ,]
[., addSymbolsFrom, (, preprocessorSymbolTable, ), ;, }, symbolTable, ., fillNamespaceReferences, (, ), ;, symbolTable, ., fillPropertyScopes, (, ), ;, symbolTable]
[), ;, }, symbolTable, ., fillNamespaceReferences, (, ), ;, symbolTable, ., fillPropertyScopes, (, ), ;, symbolTable, ., fillThisReferences, (, this]
[;, symbolTable, ., fillPropertyScopes, (, ), ;, symbolTable, ., fillThisReferences, (, this, ,, externsRoot, ,, jsRoot, ), ;, symbolTable, .]
[., fillNamespaceReferences, (, ), ;, symbolTable, ., fillPropertyScopes, (, ), ;, symbolTable, ., fillThisReferences, (, this, ,, externsRoot, ,, jsRoot]
[;, symbolTable, ., fillThisReferences, (, this, ,, externsRoot, ,, jsRoot, ), ;, symbolTable, ., fillPropertySymbols, (, this, ,, externsRoot, ,]
[., fillPropertyScopes, (, ), ;, symbolTable, ., fillThisReferences, (, this, ,, externsRoot, ,, jsRoot, ), ;, symbolTable, ., fillPropertySymbols, (]
[;, symbolTable, ., fillPropertySymbols, (, this, ,, externsRoot, ,, jsRoot, ), ;, symbolTable, ., fillJSDocInfo, (, this, ,, externsRoot, ,]
[., fillThisReferences, (, this, ,, externsRoot, ,, jsRoot, ), ;, symbolTable, ., fillPropertySymbols, (, this, ,, externsRoot, ,, jsRoot, )]
[,, externsRoot, ,, jsRoot, ), ;, symbolTable, ., fillPropertySymbols, (, this, ,, externsRoot, ,, jsRoot, ), ;, symbolTable, ., fillJSDocInfo]
[,, jsRoot, ), ;, symbolTable, ., fillPropertySymbols, (, this, ,, externsRoot, ,, jsRoot, ), ;, symbolTable, ., fillJSDocInfo, (, this]
[), ;, symbolTable, ., fillPropertySymbols, (, this, ,, externsRoot, ,, jsRoot, ), ;, symbolTable, ., fillJSDocInfo, (, this, ,, externsRoot]
[;, symbolTable, ., fillJSDocInfo, (, this, ,, externsRoot, ,, jsRoot, ), ;, return, symbolTable, ;, }, @, Override, public, Scope]
[., fillPropertySymbols, (, this, ,, externsRoot, ,, jsRoot, ), ;, symbolTable, ., fillJSDocInfo, (, this, ,, externsRoot, ,, jsRoot, )]
[,, externsRoot, ,, jsRoot, ), ;, symbolTable, ., fillJSDocInfo, (, this, ,, externsRoot, ,, jsRoot, ), ;, return, symbolTable, ;]
[,, jsRoot, ), ;, symbolTable, ., fillJSDocInfo, (, this, ,, externsRoot, ,, jsRoot, ), ;, return, symbolTable, ;, }, @]
[), ;, symbolTable, ., fillJSDocInfo, (, this, ,, externsRoot, ,, jsRoot, ), ;, return, symbolTable, ;, }, @, Override, public]
[;, return, symbolTable, ;, }, @, Override, public, Scope, getTopScope, (, ), {, return, getPassConfig, (, ), ., getTopScope, (]
[., fillJSDocInfo, (, this, ,, externsRoot, ,, jsRoot, ), ;, return, symbolTable, ;, }, @, Override, public, Scope, getTopScope, (]
[,, externsRoot, ,, jsRoot, ), ;, return, symbolTable, ;, }, @, Override, public, Scope, getTopScope, (, ), {, return, getPassConfig]
[,, jsRoot, ), ;, return, symbolTable, ;, }, @, Override, public, Scope, getTopScope, (, ), {, return, getPassConfig, (, )]
[), ;, return, symbolTable, ;, }, @, Override, public, Scope, getTopScope, (, ), {, return, getPassConfig, (, ), ., getTopScope]
[;, }, @, Override, public, Scope, getTopScope, (, ), {, return, getPassConfig, (, ), ., getTopScope, (, ), ;, }]
[;, }, @, Override, public, ReverseAbstractInterpreter, getReverseAbstractInterpreter, (, ), {, if, (, abstractInterpreter, ==, null, ), {, ChainableReverseAbstractInterpreter, interpreter, =]
[., getTopScope, (, ), ;, }, @, Override, public, ReverseAbstractInterpreter, getReverseAbstractInterpreter, (, ), {, if, (, abstractInterpreter, ==, null, )]
[), {, ChainableReverseAbstractInterpreter, interpreter, =, new, SemanticReverseAbstractInterpreter, (, getCodingConvention, (, ), ,, getTypeRegistry, (, ), ), ;, if, (, options]
[==, null, ), {, ChainableReverseAbstractInterpreter, interpreter, =, new, SemanticReverseAbstractInterpreter, (, getCodingConvention, (, ), ,, getTypeRegistry, (, ), ), ;, if]
[), {, ChainableReverseAbstractInterpreter, interpreter, =, new, SemanticReverseAbstractInterpreter, (, getCodingConvention, (, ), ,, getTypeRegistry, (, ), ), ;, if, (, options]
[;, if, (, options, ., closurePass, ), {, interpreter, =, new, ClosureReverseAbstractInterpreter, (, getCodingConvention, (, ), ,, getTypeRegistry, (, )]
[,, getTypeRegistry, (, ), ), ;, if, (, options, ., closurePass, ), {, interpreter, =, new, ClosureReverseAbstractInterpreter, (, getCodingConvention, (]
[), ;, if, (, options, ., closurePass, ), {, interpreter, =, new, ClosureReverseAbstractInterpreter, (, getCodingConvention, (, ), ,, getTypeRegistry, (]
[), {, interpreter, =, new, ClosureReverseAbstractInterpreter, (, getCodingConvention, (, ), ,, getTypeRegistry, (, ), ), ., append, (, interpreter, )]
[., closurePass, ), {, interpreter, =, new, ClosureReverseAbstractInterpreter, (, getCodingConvention, (, ), ,, getTypeRegistry, (, ), ), ., append, (]
[=, new, ClosureReverseAbstractInterpreter, (, getCodingConvention, (, ), ,, getTypeRegistry, (, ), ), ., append, (, interpreter, ), ., getFirst, (]
[;, }, abstractInterpreter, =, interpreter, ;, }, return, abstractInterpreter, ;, }, @, Override, TypeValidator, getTypeValidator, (, ), {, if, (]
[., getFirst, (, ), ;, }, abstractInterpreter, =, interpreter, ;, }, return, abstractInterpreter, ;, }, @, Override, TypeValidator, getTypeValidator, (]
[., append, (, interpreter, ), ., getFirst, (, ), ;, }, abstractInterpreter, =, interpreter, ;, }, return, abstractInterpreter, ;, }]
[,, getTypeRegistry, (, ), ), ., append, (, interpreter, ), ., getFirst, (, ), ;, }, abstractInterpreter, =, interpreter, ;]
[), ., append, (, interpreter, ), ., getFirst, (, ), ;, }, abstractInterpreter, =, interpreter, ;, }, return, abstractInterpreter, ;]
[), ., getFirst, (, ), ;, }, abstractInterpreter, =, interpreter, ;, }, return, abstractInterpreter, ;, }, @, Override, TypeValidator, getTypeValidator]
[=, interpreter, ;, }, return, abstractInterpreter, ;, }, @, Override, TypeValidator, getTypeValidator, (, ), {, if, (, typeValidator, ==, null]
[;, }, return, abstractInterpreter, ;, }, @, Override, TypeValidator, getTypeValidator, (, ), {, if, (, typeValidator, ==, null, ), {]
[;, }, @, Override, TypeValidator, getTypeValidator, (, ), {, if, (, typeValidator, ==, null, ), {, typeValidator, =, new, TypeValidator]
[), {, typeValidator, =, new, TypeValidator, (, this, ), ;, }, return, typeValidator, ;, }, Node, parseInputs, (, ), {]
[==, null, ), {, typeValidator, =, new, TypeValidator, (, this, ), ;, }, return, typeValidator, ;, }, Node, parseInputs, (]
[), {, typeValidator, =, new, TypeValidator, (, this, ), ;, }, return, typeValidator, ;, }, Node, parseInputs, (, ), {]
[=, new, TypeValidator, (, this, ), ;, }, return, typeValidator, ;, }, Node, parseInputs, (, ), {, boolean, devMode, =]
[;, }, return, typeValidator, ;, }, Node, parseInputs, (, ), {, boolean, devMode, =, options, ., devMode, !=, DevMode, .]
[), ;, }, return, typeValidator, ;, }, Node, parseInputs, (, ), {, boolean, devMode, =, options, ., devMode, !=, DevMode]
[;, }, Node, parseInputs, (, ), {, boolean, devMode, =, options, ., devMode, !=, DevMode, ., OFF, ;, if, (]
[;, if, (, externsRoot, !=, null, ), {, externsRoot, ., detachChildren, (, ), ;, }, if, (, jsRoot, !=, null]
[!=, DevMode, ., OFF, ;, if, (, externsRoot, !=, null, ), {, externsRoot, ., detachChildren, (, ), ;, }, if]
[., devMode, !=, DevMode, ., OFF, ;, if, (, externsRoot, !=, null, ), {, externsRoot, ., detachChildren, (, ), ;]
[;, if, (, externsRoot, !=, null, ), {, externsRoot, ., detachChildren, (, ), ;, }, if, (, jsRoot, !=, null]
[., OFF, ;, if, (, externsRoot, !=, null, ), {, externsRoot, ., detachChildren, (, ), ;, }, if, (, jsRoot]
[), {, externsRoot, ., detachChildren, (, ), ;, }, if, (, jsRoot, !=, null, ), {, jsRoot, ., detachChildren, (]
[!=, null, ), {, externsRoot, ., detachChildren, (, ), ;, }, if, (, jsRoot, !=, null, ), {, jsRoot, .]
[), {, externsRoot, ., detachChildren, (, ), ;, }, if, (, jsRoot, !=, null, ), {, jsRoot, ., detachChildren, (]
[;, }, if, (, jsRoot, !=, null, ), {, jsRoot, ., detachChildren, (, ), ;, }, jsRoot, =, IR, .]
[., detachChildren, (, ), ;, }, if, (, jsRoot, !=, null, ), {, jsRoot, ., detachChildren, (, ), ;, }]
[), {, jsRoot, ., detachChildren, (, ), ;, }, jsRoot, =, IR, ., block, (, ), ;, jsRoot, ., setIsSyntheticBlock]
[!=, null, ), {, jsRoot, ., detachChildren, (, ), ;, }, jsRoot, =, IR, ., block, (, ), ;, jsRoot]
[), {, jsRoot, ., detachChildren, (, ), ;, }, jsRoot, =, IR, ., block, (, ), ;, jsRoot, ., setIsSyntheticBlock]
[;, }, jsRoot, =, IR, ., block, (, ), ;, jsRoot, ., setIsSyntheticBlock, (, true, ), ;, externsRoot, =, IR]
[., detachChildren, (, ), ;, }, jsRoot, =, IR, ., block, (, ), ;, jsRoot, ., setIsSyntheticBlock, (, true, )]
[=, IR, ., block, (, ), ;, jsRoot, ., setIsSyntheticBlock, (, true, ), ;, externsRoot, =, IR, ., block, (]
[;, jsRoot, ., setIsSyntheticBlock, (, true, ), ;, externsRoot, =, IR, ., block, (, ), ;, externsRoot, ., setIsSyntheticBlock, (]
[., block, (, ), ;, jsRoot, ., setIsSyntheticBlock, (, true, ), ;, externsRoot, =, IR, ., block, (, ), ;]
[;, externsRoot, =, IR, ., block, (, ), ;, externsRoot, ., setIsSyntheticBlock, (, true, ), ;, externAndJsRoot, =, IR, .]
[., setIsSyntheticBlock, (, true, ), ;, externsRoot, =, IR, ., block, (, ), ;, externsRoot, ., setIsSyntheticBlock, (, true, )]
[), ;, externsRoot, =, IR, ., block, (, ), ;, externsRoot, ., setIsSyntheticBlock, (, true, ), ;, externAndJsRoot, =, IR]
[=, IR, ., block, (, ), ;, externsRoot, ., setIsSyntheticBlock, (, true, ), ;, externAndJsRoot, =, IR, ., block, (]
[;, externsRoot, ., setIsSyntheticBlock, (, true, ), ;, externAndJsRoot, =, IR, ., block, (, externsRoot, ,, jsRoot, ), ;, externAndJsRoot]
[., block, (, ), ;, externsRoot, ., setIsSyntheticBlock, (, true, ), ;, externAndJsRoot, =, IR, ., block, (, externsRoot, ,]
[;, externAndJsRoot, =, IR, ., block, (, externsRoot, ,, jsRoot, ), ;, externAndJsRoot, ., setIsSyntheticBlock, (, true, ), ;, if]
[., setIsSyntheticBlock, (, true, ), ;, externAndJsRoot, =, IR, ., block, (, externsRoot, ,, jsRoot, ), ;, externAndJsRoot, ., setIsSyntheticBlock]
[), ;, externAndJsRoot, =, IR, ., block, (, externsRoot, ,, jsRoot, ), ;, externAndJsRoot, ., setIsSyntheticBlock, (, true, ), ;]
[=, IR, ., block, (, externsRoot, ,, jsRoot, ), ;, externAndJsRoot, ., setIsSyntheticBlock, (, true, ), ;, if, (, options]
[;, externAndJsRoot, ., setIsSyntheticBlock, (, true, ), ;, if, (, options, ., tracer, ., isOn, (, ), ), {, tracker]
[., block, (, externsRoot, ,, jsRoot, ), ;, externAndJsRoot, ., setIsSyntheticBlock, (, true, ), ;, if, (, options, ., tracer]
[,, jsRoot, ), ;, externAndJsRoot, ., setIsSyntheticBlock, (, true, ), ;, if, (, options, ., tracer, ., isOn, (, )]
[), ;, externAndJsRoot, ., setIsSyntheticBlock, (, true, ), ;, if, (, options, ., tracer, ., isOn, (, ), ), {]
[;, if, (, options, ., tracer, ., isOn, (, ), ), {, tracker, =, new, PerformanceTracker, (, jsRoot, ,, options]
[., setIsSyntheticBlock, (, true, ), ;, if, (, options, ., tracer, ., isOn, (, ), ), {, tracker, =, new]
[), ;, if, (, options, ., tracer, ., isOn, (, ), ), {, tracker, =, new, PerformanceTracker, (, jsRoot, ,]
[), {, tracker, =, new, PerformanceTracker, (, jsRoot, ,, options, ., tracer, ), ;, addChangeHandler, (, tracker, ., getCodeChangeHandler, (]
[., isOn, (, ), ), {, tracker, =, new, PerformanceTracker, (, jsRoot, ,, options, ., tracer, ), ;, addChangeHandler, (]
[., tracer, ., isOn, (, ), ), {, tracker, =, new, PerformanceTracker, (, jsRoot, ,, options, ., tracer, ), ;]
[=, new, PerformanceTracker, (, jsRoot, ,, options, ., tracer, ), ;, addChangeHandler, (, tracker, ., getCodeChangeHandler, (, ), ), ;]
[;, addChangeHandler, (, tracker, ., getCodeChangeHandler, (, ), ), ;, }, Tracer, tracer, =, newTracer, (, "parseInputs", ), ;, try]
[,, options, ., tracer, ), ;, addChangeHandler, (, tracker, ., getCodeChangeHandler, (, ), ), ;, }, Tracer, tracer, =, newTracer]
[), ;, addChangeHandler, (, tracker, ., getCodeChangeHandler, (, ), ), ;, }, Tracer, tracer, =, newTracer, (, "parseInputs", ), ;]
[., tracer, ), ;, addChangeHandler, (, tracker, ., getCodeChangeHandler, (, ), ), ;, }, Tracer, tracer, =, newTracer, (, "parseInputs"]
[;, }, Tracer, tracer, =, newTracer, (, "parseInputs", ), ;, try, {, for, (, CompilerInput, input, :, externs, ), {]
[), ;, }, Tracer, tracer, =, newTracer, (, "parseInputs", ), ;, try, {, for, (, CompilerInput, input, :, externs, )]
[., getCodeChangeHandler, (, ), ), ;, }, Tracer, tracer, =, newTracer, (, "parseInputs", ), ;, try, {, for, (, CompilerInput]
[;, try, {, for, (, CompilerInput, input, :, externs, ), {, Node, n, =, input, ., getAstRoot, (, this, )]
[), ;, try, {, for, (, CompilerInput, input, :, externs, ), {, Node, n, =, input, ., getAstRoot, (, this]
[), {, Node, n, =, input, ., getAstRoot, (, this, ), ;, if, (, hasErrors, (, ), ), {, return]
[;, if, (, hasErrors, (, ), ), {, return, null, ;, }, externsRoot, ., addChildToBack, (, n, ), ;, }]
[., getAstRoot, (, this, ), ;, if, (, hasErrors, (, ), ), {, return, null, ;, }, externsRoot, ., addChildToBack]
[), ;, if, (, hasErrors, (, ), ), {, return, null, ;, }, externsRoot, ., addChildToBack, (, n, ), ;]
[), {, return, null, ;, }, externsRoot, ., addChildToBack, (, n, ), ;, }, if, (, options, ., transformAMDToCJSModules, ||]
[;, }, externsRoot, ., addChildToBack, (, n, ), ;, }, if, (, options, ., transformAMDToCJSModules, ||, options, ., processCommonJSModules, )]
[;, }, if, (, options, ., transformAMDToCJSModules, ||, options, ., processCommonJSModules, ), {, processAMDAndCommonJSModules, (, ), ;, }, hoistExterns, (]
[., addChildToBack, (, n, ), ;, }, if, (, options, ., transformAMDToCJSModules, ||, options, ., processCommonJSModules, ), {, processAMDAndCommonJSModules, (]
[), ;, }, if, (, options, ., transformAMDToCJSModules, ||, options, ., processCommonJSModules, ), {, processAMDAndCommonJSModules, (, ), ;, }, hoistExterns]
[), {, processAMDAndCommonJSModules, (, ), ;, }, hoistExterns, (, externsRoot, ), ;, boolean, staleInputs, =, false, ;, if, (, options]
[||, options, ., processCommonJSModules, ), {, processAMDAndCommonJSModules, (, ), ;, }, hoistExterns, (, externsRoot, ), ;, boolean, staleInputs, =, false]
[., transformAMDToCJSModules, ||, options, ., processCommonJSModules, ), {, processAMDAndCommonJSModules, (, ), ;, }, hoistExterns, (, externsRoot, ), ;, boolean, staleInputs]
[), {, processAMDAndCommonJSModules, (, ), ;, }, hoistExterns, (, externsRoot, ), ;, boolean, staleInputs, =, false, ;, if, (, options]
[., processCommonJSModules, ), {, processAMDAndCommonJSModules, (, ), ;, }, hoistExterns, (, externsRoot, ), ;, boolean, staleInputs, =, false, ;, if]
[;, }, hoistExterns, (, externsRoot, ), ;, boolean, staleInputs, =, false, ;, if, (, options, ., dependencyOptions, ., needsManagement, (]
[;, boolean, staleInputs, =, false, ;, if, (, options, ., dependencyOptions, ., needsManagement, (, ), ), {, for, (, CompilerInput]
[), ;, boolean, staleInputs, =, false, ;, if, (, options, ., dependencyOptions, ., needsManagement, (, ), ), {, for, (]
[;, if, (, options, ., dependencyOptions, ., needsManagement, (, ), ), {, for, (, CompilerInput, input, :, inputs, ), {]
[), {, for, (, CompilerInput, input, :, inputs, ), {, for, (, String, provide, :, input, ., getProvides, (, )]
[., needsManagement, (, ), ), {, for, (, CompilerInput, input, :, inputs, ), {, for, (, String, provide, :, input]
[., dependencyOptions, ., needsManagement, (, ), ), {, for, (, CompilerInput, input, :, inputs, ), {, for, (, String, provide]
[), {, for, (, String, provide, :, input, ., getProvides, (, ), ), {, getTypeRegistry, (, ), ., forwardDeclareType, (]
[), {, getTypeRegistry, (, ), ., forwardDeclareType, (, provide, ), ;, }, }, try, {, inputs, =, (, moduleGraph, ==]
[., getProvides, (, ), ), {, getTypeRegistry, (, ), ., forwardDeclareType, (, provide, ), ;, }, }, try, {, inputs]
[;, }, }, try, {, inputs, =, (, moduleGraph, ==, null, ?, new, JSModuleGraph, (, modules, ), :, moduleGraph, )]
[., forwardDeclareType, (, provide, ), ;, }, }, try, {, inputs, =, (, moduleGraph, ==, null, ?, new, JSModuleGraph, (]
[), ;, }, }, try, {, inputs, =, (, moduleGraph, ==, null, ?, new, JSModuleGraph, (, modules, ), :, moduleGraph]
[=, (, moduleGraph, ==, null, ?, new, JSModuleGraph, (, modules, ), :, moduleGraph, ), ., manageDependencies, (, options, ., dependencyOptions]
[;, staleInputs, =, true, ;, }, catch, (, CircularDependencyException, e, ), {, report, (, JSError, ., make, (, JSModule, .]
[., manageDependencies, (, options, ., dependencyOptions, ,, inputs, ), ;, staleInputs, =, true, ;, }, catch, (, CircularDependencyException, e, )]
[), ., manageDependencies, (, options, ., dependencyOptions, ,, inputs, ), ;, staleInputs, =, true, ;, }, catch, (, CircularDependencyException, e]
[?, new, JSModuleGraph, (, modules, ), :, moduleGraph, ), ., manageDependencies, (, options, ., dependencyOptions, ,, inputs, ), ;, staleInputs]
[==, null, ?, new, JSModuleGraph, (, modules, ), :, moduleGraph, ), ., manageDependencies, (, options, ., dependencyOptions, ,, inputs, )]
[?, new, JSModuleGraph, (, modules, ), :, moduleGraph, ), ., manageDependencies, (, options, ., dependencyOptions, ,, inputs, ), ;, staleInputs]
[:, moduleGraph, ), ., manageDependencies, (, options, ., dependencyOptions, ,, inputs, ), ;, staleInputs, =, true, ;, }, catch, (]
[), :, moduleGraph, ), ., manageDependencies, (, options, ., dependencyOptions, ,, inputs, ), ;, staleInputs, =, true, ;, }, catch]
[), ., manageDependencies, (, options, ., dependencyOptions, ,, inputs, ), ;, staleInputs, =, true, ;, }, catch, (, CircularDependencyException, e]
[,, inputs, ), ;, staleInputs, =, true, ;, }, catch, (, CircularDependencyException, e, ), {, report, (, JSError, ., make]
[., dependencyOptions, ,, inputs, ), ;, staleInputs, =, true, ;, }, catch, (, CircularDependencyException, e, ), {, report, (, JSError]
[), ;, staleInputs, =, true, ;, }, catch, (, CircularDependencyException, e, ), {, report, (, JSError, ., make, (, JSModule]
[=, true, ;, }, catch, (, CircularDependencyException, e, ), {, report, (, JSError, ., make, (, JSModule, ., CIRCULAR_DEPENDENCY_ERROR, ,]
[;, }, catch, (, CircularDependencyException, e, ), {, report, (, JSError, ., make, (, JSModule, ., CIRCULAR_DEPENDENCY_ERROR, ,, e, .]
[;, if, (, hasErrors, (, ), ), {, return, null, ;, }, }, catch, (, MissingProvideException, e, ), {, report]
[), ;, if, (, hasErrors, (, ), ), {, return, null, ;, }, }, catch, (, MissingProvideException, e, ), {]
[., make, (, JSModule, ., CIRCULAR_DEPENDENCY_ERROR, ,, e, ., getMessage, (, ), ), ), ;, if, (, hasErrors, (, )]
[,, e, ., getMessage, (, ), ), ), ;, if, (, hasErrors, (, ), ), {, return, null, ;, }]
[., CIRCULAR_DEPENDENCY_ERROR, ,, e, ., getMessage, (, ), ), ), ;, if, (, hasErrors, (, ), ), {, return, null]
[), ), ;, if, (, hasErrors, (, ), ), {, return, null, ;, }, }, catch, (, MissingProvideException, e, )]
[., getMessage, (, ), ), ), ;, if, (, hasErrors, (, ), ), {, return, null, ;, }, }, catch]
[), {, return, null, ;, }, }, catch, (, MissingProvideException, e, ), {, report, (, JSError, ., make, (, MISSING_ENTRY_ERROR]
[;, }, }, catch, (, MissingProvideException, e, ), {, report, (, JSError, ., make, (, MISSING_ENTRY_ERROR, ,, e, ., getMessage]
[;, if, (, hasErrors, (, ), ), {, return, null, ;, }, }, }, hoistNoCompileFiles, (, ), ;, if, (]
[), ;, if, (, hasErrors, (, ), ), {, return, null, ;, }, }, }, hoistNoCompileFiles, (, ), ;, if]
[., make, (, MISSING_ENTRY_ERROR, ,, e, ., getMessage, (, ), ), ), ;, if, (, hasErrors, (, ), ), {]
[,, e, ., getMessage, (, ), ), ), ;, if, (, hasErrors, (, ), ), {, return, null, ;, }]
[), ), ;, if, (, hasErrors, (, ), ), {, return, null, ;, }, }, }, hoistNoCompileFiles, (, ), ;]
[., getMessage, (, ), ), ), ;, if, (, hasErrors, (, ), ), {, return, null, ;, }, }, }]
[), {, return, null, ;, }, }, }, hoistNoCompileFiles, (, ), ;, if, (, staleInputs, ), {, repartitionInputs, (, )]
[;, }, }, }, hoistNoCompileFiles, (, ), ;, if, (, staleInputs, ), {, repartitionInputs, (, ), ;, }, for, (]
[;, if, (, staleInputs, ), {, repartitionInputs, (, ), ;, }, for, (, CompilerInput, input, :, inputs, ), {, Node]
[), {, repartitionInputs, (, ), ;, }, for, (, CompilerInput, input, :, inputs, ), {, Node, n, =, input, .]
[;, }, for, (, CompilerInput, input, :, inputs, ), {, Node, n, =, input, ., getAstRoot, (, this, ), ;]
[), {, Node, n, =, input, ., getAstRoot, (, this, ), ;, if, (, n, ==, null, ), {, continue]
[;, if, (, n, ==, null, ), {, continue, ;, }, if, (, devMode, ), {, runSanityCheck, (, ), ;]
[., getAstRoot, (, this, ), ;, if, (, n, ==, null, ), {, continue, ;, }, if, (, devMode, )]
[), ;, if, (, n, ==, null, ), {, continue, ;, }, if, (, devMode, ), {, runSanityCheck, (, )]
[), {, continue, ;, }, if, (, devMode, ), {, runSanityCheck, (, ), ;, if, (, hasErrors, (, ), )]
[==, null, ), {, continue, ;, }, if, (, devMode, ), {, runSanityCheck, (, ), ;, if, (, hasErrors, (]
[), {, continue, ;, }, if, (, devMode, ), {, runSanityCheck, (, ), ;, if, (, hasErrors, (, ), )]
[), {, runSanityCheck, (, ), ;, if, (, hasErrors, (, ), ), {, return, null, ;, }, }, if, (]
[;, if, (, hasErrors, (, ), ), {, return, null, ;, }, }, if, (, options, ., sourceMapOutputPath, !=, null]
[), {, return, null, ;, }, }, if, (, options, ., sourceMapOutputPath, !=, null, ||, options, ., nameReferenceReportPath, !=, null]
[;, }, }, if, (, options, ., sourceMapOutputPath, !=, null, ||, options, ., nameReferenceReportPath, !=, null, ), {, SourceInformationAnnotator, sia]
[), {, SourceInformationAnnotator, sia, =, new, SourceInformationAnnotator, (, input, ., getName, (, ), ,, options, ., devMode, !=, DevMode, .]
[||, options, ., nameReferenceReportPath, !=, null, ), {, SourceInformationAnnotator, sia, =, new, SourceInformationAnnotator, (, input, ., getName, (, ), ,]
[!=, null, ||, options, ., nameReferenceReportPath, !=, null, ), {, SourceInformationAnnotator, sia, =, new, SourceInformationAnnotator, (, input, ., getName, (]
[., sourceMapOutputPath, !=, null, ||, options, ., nameReferenceReportPath, !=, null, ), {, SourceInformationAnnotator, sia, =, new, SourceInformationAnnotator, (, input, .]
[||, options, ., nameReferenceReportPath, !=, null, ), {, SourceInformationAnnotator, sia, =, new, SourceInformationAnnotator, (, input, ., getName, (, ), ,]
[), {, SourceInformationAnnotator, sia, =, new, SourceInformationAnnotator, (, input, ., getName, (, ), ,, options, ., devMode, !=, DevMode, .]
[!=, null, ), {, SourceInformationAnnotator, sia, =, new, SourceInformationAnnotator, (, input, ., getName, (, ), ,, options, ., devMode, !=]
[., nameReferenceReportPath, !=, null, ), {, SourceInformationAnnotator, sia, =, new, SourceInformationAnnotator, (, input, ., getName, (, ), ,, options, .]
[), {, SourceInformationAnnotator, sia, =, new, SourceInformationAnnotator, (, input, ., getName, (, ), ,, options, ., devMode, !=, DevMode, .]
[;, NodeTraversal, ., traverse, (, this, ,, n, ,, sia, ), ;, }, jsRoot, ., addChildToBack, (, n, ), ;]
[,, options, ., devMode, !=, DevMode, ., OFF, ), ;, NodeTraversal, ., traverse, (, this, ,, n, ,, sia, )]
[., getName, (, ), ,, options, ., devMode, !=, DevMode, ., OFF, ), ;, NodeTraversal, ., traverse, (, this, ,]
[), ;, NodeTraversal, ., traverse, (, this, ,, n, ,, sia, ), ;, }, jsRoot, ., addChildToBack, (, n, )]
[!=, DevMode, ., OFF, ), ;, NodeTraversal, ., traverse, (, this, ,, n, ,, sia, ), ;, }, jsRoot, .]
[., devMode, !=, DevMode, ., OFF, ), ;, NodeTraversal, ., traverse, (, this, ,, n, ,, sia, ), ;, }]
[), ;, NodeTraversal, ., traverse, (, this, ,, n, ,, sia, ), ;, }, jsRoot, ., addChildToBack, (, n, )]
[., OFF, ), ;, NodeTraversal, ., traverse, (, this, ,, n, ,, sia, ), ;, }, jsRoot, ., addChildToBack, (]
[;, }, jsRoot, ., addChildToBack, (, n, ), ;, }, if, (, hasErrors, (, ), ), {, return, null, ;]
[., traverse, (, this, ,, n, ,, sia, ), ;, }, jsRoot, ., addChildToBack, (, n, ), ;, }, if]
[,, n, ,, sia, ), ;, }, jsRoot, ., addChildToBack, (, n, ), ;, }, if, (, hasErrors, (, )]
[,, sia, ), ;, }, jsRoot, ., addChildToBack, (, n, ), ;, }, if, (, hasErrors, (, ), ), {]
[), ;, }, jsRoot, ., addChildToBack, (, n, ), ;, }, if, (, hasErrors, (, ), ), {, return, null]
[;, }, if, (, hasErrors, (, ), ), {, return, null, ;, }, return, externAndJsRoot, ;, }, finally, {, stopTracer]
[., addChildToBack, (, n, ), ;, }, if, (, hasErrors, (, ), ), {, return, null, ;, }, return, externAndJsRoot]
[), ;, }, if, (, hasErrors, (, ), ), {, return, null, ;, }, return, externAndJsRoot, ;, }, finally, {]
[), {, return, null, ;, }, return, externAndJsRoot, ;, }, finally, {, stopTracer, (, tracer, ,, "parseInputs", ), ;, }]
[;, }, return, externAndJsRoot, ;, }, finally, {, stopTracer, (, tracer, ,, "parseInputs", ), ;, }, }, private, void, hoistExterns]
[;, }, finally, {, stopTracer, (, tracer, ,, "parseInputs", ), ;, }, }, private, void, hoistExterns, (, Node, externsRoot, )]
[;, }, }, private, void, hoistExterns, (, Node, externsRoot, ), {, boolean, staleInputs, =, false, ;, for, (, CompilerInput, input]
[,, "parseInputs", ), ;, }, }, private, void, hoistExterns, (, Node, externsRoot, ), {, boolean, staleInputs, =, false, ;, for]
[), ;, }, }, private, void, hoistExterns, (, Node, externsRoot, ), {, boolean, staleInputs, =, false, ;, for, (, CompilerInput]
[;, for, (, CompilerInput, input, :, inputs, ), {, if, (, options, ., dependencyOptions, ., needsManagement, (, ), ), {]
[), {, if, (, options, ., dependencyOptions, ., needsManagement, (, ), ), {, if, (, !, input, ., getProvides, (]
[), {, if, (, !, input, ., getProvides, (, ), ., isEmpty, (, ), ||, !, input, ., getRequires, (]
[., needsManagement, (, ), ), {, if, (, !, input, ., getProvides, (, ), ., isEmpty, (, ), ||, !]
[., dependencyOptions, ., needsManagement, (, ), ), {, if, (, !, input, ., getProvides, (, ), ., isEmpty, (, )]
[), {, continue, ;, }, }, Node, n, =, input, ., getAstRoot, (, this, ), ;, if, (, n, ==]
[||, !, input, ., getRequires, (, ), ., isEmpty, (, ), ), {, continue, ;, }, }, Node, n, =]
[||, !, input, ., getRequires, (, ), ., isEmpty, (, ), ), {, continue, ;, }, }, Node, n, =]
[., isEmpty, (, ), ||, !, input, ., getRequires, (, ), ., isEmpty, (, ), ), {, continue, ;, }]
[., getProvides, (, ), ., isEmpty, (, ), ||, !, input, ., getRequires, (, ), ., isEmpty, (, ), )]
[), {, continue, ;, }, }, Node, n, =, input, ., getAstRoot, (, this, ), ;, if, (, n, ==]
[), {, continue, ;, }, }, Node, n, =, input, ., getAstRoot, (, this, ), ;, if, (, n, ==]
[., isEmpty, (, ), ), {, continue, ;, }, }, Node, n, =, input, ., getAstRoot, (, this, ), ;]
[., getRequires, (, ), ., isEmpty, (, ), ), {, continue, ;, }, }, Node, n, =, input, ., getAstRoot]
[;, if, (, n, ==, null, ), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;]
[., getAstRoot, (, this, ), ;, if, (, n, ==, null, ), {, continue, ;, }, JSDocInfo, info, =, n]
[), ;, if, (, n, ==, null, ), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, )]
[), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[==, null, ), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=]
[), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[;, if, (, info, !=, null, &&, info, ., isExterns, (, ), ), {, externsRoot, ., addChildToBack, (, n, )]
[., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., isExterns, (, ), ), {, externsRoot, .]
[), {, externsRoot, ., addChildToBack, (, n, ), ;, input, ., setIsExtern, (, true, ), ;, input, ., getModule, (]
[&&, info, ., isExterns, (, ), ), {, externsRoot, ., addChildToBack, (, n, ), ;, input, ., setIsExtern, (, true]
[!=, null, &&, info, ., isExterns, (, ), ), {, externsRoot, ., addChildToBack, (, n, ), ;, input, ., setIsExtern]
[&&, info, ., isExterns, (, ), ), {, externsRoot, ., addChildToBack, (, n, ), ;, input, ., setIsExtern, (, true]
[), {, externsRoot, ., addChildToBack, (, n, ), ;, input, ., setIsExtern, (, true, ), ;, input, ., getModule, (]
[., isExterns, (, ), ), {, externsRoot, ., addChildToBack, (, n, ), ;, input, ., setIsExtern, (, true, ), ;]
[;, input, ., setIsExtern, (, true, ), ;, input, ., getModule, (, ), ., remove, (, input, ), ;, externs]
[., addChildToBack, (, n, ), ;, input, ., setIsExtern, (, true, ), ;, input, ., getModule, (, ), ., remove]
[), ;, input, ., setIsExtern, (, true, ), ;, input, ., getModule, (, ), ., remove, (, input, ), ;]
[;, input, ., getModule, (, ), ., remove, (, input, ), ;, externs, ., add, (, input, ), ;, staleInputs]
[., setIsExtern, (, true, ), ;, input, ., getModule, (, ), ., remove, (, input, ), ;, externs, ., add]
[), ;, input, ., getModule, (, ), ., remove, (, input, ), ;, externs, ., add, (, input, ), ;]
[;, externs, ., add, (, input, ), ;, staleInputs, =, true, ;, }, }, if, (, staleInputs, ), {, repartitionInputs]
[., remove, (, input, ), ;, externs, ., add, (, input, ), ;, staleInputs, =, true, ;, }, }, if]
[., getModule, (, ), ., remove, (, input, ), ;, externs, ., add, (, input, ), ;, staleInputs, =, true]
[), ;, externs, ., add, (, input, ), ;, staleInputs, =, true, ;, }, }, if, (, staleInputs, ), {]
[;, staleInputs, =, true, ;, }, }, if, (, staleInputs, ), {, repartitionInputs, (, ), ;, }, }, private, void]
[., add, (, input, ), ;, staleInputs, =, true, ;, }, }, if, (, staleInputs, ), {, repartitionInputs, (, )]
[), ;, staleInputs, =, true, ;, }, }, if, (, staleInputs, ), {, repartitionInputs, (, ), ;, }, }, private]
[=, true, ;, }, }, if, (, staleInputs, ), {, repartitionInputs, (, ), ;, }, }, private, void, hoistNoCompileFiles, (]
[;, }, }, if, (, staleInputs, ), {, repartitionInputs, (, ), ;, }, }, private, void, hoistNoCompileFiles, (, ), {]
[), {, repartitionInputs, (, ), ;, }, }, private, void, hoistNoCompileFiles, (, ), {, boolean, staleInputs, =, false, ;, for]
[;, }, }, private, void, hoistNoCompileFiles, (, ), {, boolean, staleInputs, =, false, ;, for, (, CompilerInput, input, :, inputs]
[;, for, (, CompilerInput, input, :, inputs, ), {, Node, n, =, input, ., getAstRoot, (, this, ), ;, if]
[), {, Node, n, =, input, ., getAstRoot, (, this, ), ;, if, (, n, ==, null, ), {, continue]
[;, if, (, n, ==, null, ), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;]
[., getAstRoot, (, this, ), ;, if, (, n, ==, null, ), {, continue, ;, }, JSDocInfo, info, =, n]
[), ;, if, (, n, ==, null, ), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, )]
[), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[==, null, ), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=]
[), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[;, if, (, info, !=, null, &&, info, ., isNoCompile, (, ), ), {, input, ., getModule, (, ), .]
[., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., isNoCompile, (, ), ), {, input, .]
[), {, input, ., getModule, (, ), ., remove, (, input, ), ;, staleInputs, =, true, ;, }, }, if]
[&&, info, ., isNoCompile, (, ), ), {, input, ., getModule, (, ), ., remove, (, input, ), ;, staleInputs]
[!=, null, &&, info, ., isNoCompile, (, ), ), {, input, ., getModule, (, ), ., remove, (, input, )]
[&&, info, ., isNoCompile, (, ), ), {, input, ., getModule, (, ), ., remove, (, input, ), ;, staleInputs]
[), {, input, ., getModule, (, ), ., remove, (, input, ), ;, staleInputs, =, true, ;, }, }, if]
[., isNoCompile, (, ), ), {, input, ., getModule, (, ), ., remove, (, input, ), ;, staleInputs, =, true]
[;, staleInputs, =, true, ;, }, }, if, (, staleInputs, ), {, repartitionInputs, (, ), ;, }, }, private, void]
[., remove, (, input, ), ;, staleInputs, =, true, ;, }, }, if, (, staleInputs, ), {, repartitionInputs, (, )]
[., getModule, (, ), ., remove, (, input, ), ;, staleInputs, =, true, ;, }, }, if, (, staleInputs, )]
[), ;, staleInputs, =, true, ;, }, }, if, (, staleInputs, ), {, repartitionInputs, (, ), ;, }, }, private]
[=, true, ;, }, }, if, (, staleInputs, ), {, repartitionInputs, (, ), ;, }, }, private, void, repartitionInputs, (]
[;, }, }, if, (, staleInputs, ), {, repartitionInputs, (, ), ;, }, }, private, void, repartitionInputs, (, ), {]
[), {, repartitionInputs, (, ), ;, }, }, private, void, repartitionInputs, (, ), {, fillEmptyModules, (, modules, ), ;, rebuildInputsFromModules]
[;, }, }, private, void, repartitionInputs, (, ), {, fillEmptyModules, (, modules, ), ;, rebuildInputsFromModules, (, ), ;, }, void]
[;, rebuildInputsFromModules, (, ), ;, }, void, processAMDAndCommonJSModules, (, ), {, Map, <, String, ,, JSModule, >, modulesByName, =, Maps]
[), ;, rebuildInputsFromModules, (, ), ;, }, void, processAMDAndCommonJSModules, (, ), {, Map, <, String, ,, JSModule, >, modulesByName, =]
[;, }, void, processAMDAndCommonJSModules, (, ), {, Map, <, String, ,, JSModule, >, modulesByName, =, Maps, ., newLinkedHashMap, (, )]
[;, Map, <, CompilerInput, ,, JSModule, >, modulesByInput, =, Maps, ., newLinkedHashMap, (, ), ;, for, (, CompilerInput, input, :]
[., newLinkedHashMap, (, ), ;, Map, <, CompilerInput, ,, JSModule, >, modulesByInput, =, Maps, ., newLinkedHashMap, (, ), ;, for]
[;, for, (, CompilerInput, input, :, inputs, ), {, input, ., setCompiler, (, this, ), ;, Node, root, =, input]
[., newLinkedHashMap, (, ), ;, for, (, CompilerInput, input, :, inputs, ), {, input, ., setCompiler, (, this, ), ;]
[), {, input, ., setCompiler, (, this, ), ;, Node, root, =, input, ., getAstRoot, (, this, ), ;, if]
[;, Node, root, =, input, ., getAstRoot, (, this, ), ;, if, (, root, ==, null, ), {, continue, ;]
[., setCompiler, (, this, ), ;, Node, root, =, input, ., getAstRoot, (, this, ), ;, if, (, root, ==]
[), ;, Node, root, =, input, ., getAstRoot, (, this, ), ;, if, (, root, ==, null, ), {, continue]
[;, if, (, root, ==, null, ), {, continue, ;, }, if, (, options, ., transformAMDToCJSModules, ), {, new, TransformAMDToCJSModule]
[., getAstRoot, (, this, ), ;, if, (, root, ==, null, ), {, continue, ;, }, if, (, options, .]
[), ;, if, (, root, ==, null, ), {, continue, ;, }, if, (, options, ., transformAMDToCJSModules, ), {, new]
[), {, continue, ;, }, if, (, options, ., transformAMDToCJSModules, ), {, new, TransformAMDToCJSModule, (, this, ), ., process, (]
[==, null, ), {, continue, ;, }, if, (, options, ., transformAMDToCJSModules, ), {, new, TransformAMDToCJSModule, (, this, ), .]
[), {, continue, ;, }, if, (, options, ., transformAMDToCJSModules, ), {, new, TransformAMDToCJSModule, (, this, ), ., process, (]
[), {, new, TransformAMDToCJSModule, (, this, ), ., process, (, null, ,, root, ), ;, }, if, (, options, .]
[., transformAMDToCJSModules, ), {, new, TransformAMDToCJSModule, (, this, ), ., process, (, null, ,, root, ), ;, }, if, (]
[;, }, if, (, options, ., processCommonJSModules, ), {, ProcessCommonJSModules, cjs, =, new, ProcessCommonJSModules, (, this, ,, options, ., commonJSModulePathPrefix]
[., process, (, null, ,, root, ), ;, }, if, (, options, ., processCommonJSModules, ), {, ProcessCommonJSModules, cjs, =, new]
[), ., process, (, null, ,, root, ), ;, }, if, (, options, ., processCommonJSModules, ), {, ProcessCommonJSModules, cjs, =]
[,, root, ), ;, }, if, (, options, ., processCommonJSModules, ), {, ProcessCommonJSModules, cjs, =, new, ProcessCommonJSModules, (, this, ,]
[), ;, }, if, (, options, ., processCommonJSModules, ), {, ProcessCommonJSModules, cjs, =, new, ProcessCommonJSModules, (, this, ,, options, .]
[), {, ProcessCommonJSModules, cjs, =, new, ProcessCommonJSModules, (, this, ,, options, ., commonJSModulePathPrefix, ), ;, cjs, ., process, (, null]
[., processCommonJSModules, ), {, ProcessCommonJSModules, cjs, =, new, ProcessCommonJSModules, (, this, ,, options, ., commonJSModulePathPrefix, ), ;, cjs, ., process]
[;, cjs, ., process, (, null, ,, root, ), ;, JSModule, m, =, cjs, ., getModule, (, ), ;, if]
[,, options, ., commonJSModulePathPrefix, ), ;, cjs, ., process, (, null, ,, root, ), ;, JSModule, m, =, cjs, .]
[), ;, cjs, ., process, (, null, ,, root, ), ;, JSModule, m, =, cjs, ., getModule, (, ), ;]
[., commonJSModulePathPrefix, ), ;, cjs, ., process, (, null, ,, root, ), ;, JSModule, m, =, cjs, ., getModule, (]
[;, JSModule, m, =, cjs, ., getModule, (, ), ;, if, (, m, !=, null, ), {, modulesByName, ., put]
[., process, (, null, ,, root, ), ;, JSModule, m, =, cjs, ., getModule, (, ), ;, if, (, m]
[,, root, ), ;, JSModule, m, =, cjs, ., getModule, (, ), ;, if, (, m, !=, null, ), {]
[), ;, JSModule, m, =, cjs, ., getModule, (, ), ;, if, (, m, !=, null, ), {, modulesByName, .]
[;, if, (, m, !=, null, ), {, modulesByName, ., put, (, m, ., getName, (, ), ,, m, )]
[., getModule, (, ), ;, if, (, m, !=, null, ), {, modulesByName, ., put, (, m, ., getName, (]
[), {, modulesByName, ., put, (, m, ., getName, (, ), ,, m, ), ;, modulesByInput, ., put, (, input]
[!=, null, ), {, modulesByName, ., put, (, m, ., getName, (, ), ,, m, ), ;, modulesByInput, ., put]
[), {, modulesByName, ., put, (, m, ., getName, (, ), ,, m, ), ;, modulesByInput, ., put, (, input]
[;, modulesByInput, ., put, (, input, ,, m, ), ;, }, }, }, if, (, options, ., processCommonJSModules, ), {]
[., put, (, m, ., getName, (, ), ,, m, ), ;, modulesByInput, ., put, (, input, ,, m, )]
[,, m, ), ;, modulesByInput, ., put, (, input, ,, m, ), ;, }, }, }, if, (, options, .]
[., getName, (, ), ,, m, ), ;, modulesByInput, ., put, (, input, ,, m, ), ;, }, }, }]
[), ;, modulesByInput, ., put, (, input, ,, m, ), ;, }, }, }, if, (, options, ., processCommonJSModules, )]
[;, }, }, }, if, (, options, ., processCommonJSModules, ), {, List, <, JSModule, >, modules, =, Lists, ., newArrayList]
[., put, (, input, ,, m, ), ;, }, }, }, if, (, options, ., processCommonJSModules, ), {, List, <]
[,, m, ), ;, }, }, }, if, (, options, ., processCommonJSModules, ), {, List, <, JSModule, >, modules, =]
[), ;, }, }, }, if, (, options, ., processCommonJSModules, ), {, List, <, JSModule, >, modules, =, Lists, .]
[), {, List, <, JSModule, >, modules, =, Lists, ., newArrayList, (, modulesByName, ., values, (, ), ), ;, if]
[., processCommonJSModules, ), {, List, <, JSModule, >, modules, =, Lists, ., newArrayList, (, modulesByName, ., values, (, ), )]
[;, if, (, !, modules, ., isEmpty, (, ), ), {, this, ., modules, =, modules, ;, this, ., moduleGraph]
[., newArrayList, (, modulesByName, ., values, (, ), ), ;, if, (, !, modules, ., isEmpty, (, ), ), {]
[), ;, if, (, !, modules, ., isEmpty, (, ), ), {, this, ., modules, =, modules, ;, this, .]
[., values, (, ), ), ;, if, (, !, modules, ., isEmpty, (, ), ), {, this, ., modules, =]
[), {, this, ., modules, =, modules, ;, this, ., moduleGraph, =, new, JSModuleGraph, (, this, ., modules, ), ;]
[), {, this, ., modules, =, modules, ;, this, ., moduleGraph, =, new, JSModuleGraph, (, this, ., modules, ), ;]
[., isEmpty, (, ), ), {, this, ., modules, =, modules, ;, this, ., moduleGraph, =, new, JSModuleGraph, (, this]
[=, modules, ;, this, ., moduleGraph, =, new, JSModuleGraph, (, this, ., modules, ), ;, }, for, (, JSModule, module]
[., modules, =, modules, ;, this, ., moduleGraph, =, new, JSModuleGraph, (, this, ., modules, ), ;, }, for, (]
[;, this, ., moduleGraph, =, new, JSModuleGraph, (, this, ., modules, ), ;, }, for, (, JSModule, module, :, modules]
[=, new, JSModuleGraph, (, this, ., modules, ), ;, }, for, (, JSModule, module, :, modules, ), {, for, (]
[., moduleGraph, =, new, JSModuleGraph, (, this, ., modules, ), ;, }, for, (, JSModule, module, :, modules, ), {]
[;, }, for, (, JSModule, module, :, modules, ), {, for, (, CompilerInput, input, :, module, ., getInputs, (, )]
[), ;, }, for, (, JSModule, module, :, modules, ), {, for, (, CompilerInput, input, :, module, ., getInputs, (]
[., modules, ), ;, }, for, (, JSModule, module, :, modules, ), {, for, (, CompilerInput, input, :, module, .]
[), {, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {, for, (, String, require, :, input]
[), {, for, (, String, require, :, input, ., getRequires, (, ), ), {, JSModule, dependency, =, modulesByName, ., get]
[., getInputs, (, ), ), {, for, (, String, require, :, input, ., getRequires, (, ), ), {, JSModule, dependency]
[), {, JSModule, dependency, =, modulesByName, ., get, (, require, ), ;, if, (, dependency, ==, null, ), {, report]
[., getRequires, (, ), ), {, JSModule, dependency, =, modulesByName, ., get, (, require, ), ;, if, (, dependency, ==]
[;, if, (, dependency, ==, null, ), {, report, (, JSError, ., make, (, MISSING_ENTRY_ERROR, ,, require, ), ), ;]
[., get, (, require, ), ;, if, (, dependency, ==, null, ), {, report, (, JSError, ., make, (, MISSING_ENTRY_ERROR]
[), ;, if, (, dependency, ==, null, ), {, report, (, JSError, ., make, (, MISSING_ENTRY_ERROR, ,, require, ), )]
[), {, report, (, JSError, ., make, (, MISSING_ENTRY_ERROR, ,, require, ), ), ;, }, else, {, module, ., addDependency]
[==, null, ), {, report, (, JSError, ., make, (, MISSING_ENTRY_ERROR, ,, require, ), ), ;, }, else, {, module]
[), {, report, (, JSError, ., make, (, MISSING_ENTRY_ERROR, ,, require, ), ), ;, }, else, {, module, ., addDependency]
[;, }, else, {, module, ., addDependency, (, dependency, ), ;, }, }, }, }, try, {, modules, =, Lists]
[), ;, }, else, {, module, ., addDependency, (, dependency, ), ;, }, }, }, }, try, {, modules, =]
[., make, (, MISSING_ENTRY_ERROR, ,, require, ), ), ;, }, else, {, module, ., addDependency, (, dependency, ), ;, }]
[,, require, ), ), ;, }, else, {, module, ., addDependency, (, dependency, ), ;, }, }, }, }, try]
[), ), ;, }, else, {, module, ., addDependency, (, dependency, ), ;, }, }, }, }, try, {, modules]
[;, }, }, }, }, try, {, modules, =, Lists, ., newArrayList, (, ), ;, for, (, CompilerInput, input, :]
[., addDependency, (, dependency, ), ;, }, }, }, }, try, {, modules, =, Lists, ., newArrayList, (, ), ;]
[), ;, }, }, }, }, try, {, modules, =, Lists, ., newArrayList, (, ), ;, for, (, CompilerInput, input]
[=, Lists, ., newArrayList, (, ), ;, for, (, CompilerInput, input, :, this, ., moduleGraph, ., manageDependencies, (, options, .]
[;, for, (, CompilerInput, input, :, this, ., moduleGraph, ., manageDependencies, (, options, ., dependencyOptions, ,, inputs, ), ), {]
[., newArrayList, (, ), ;, for, (, CompilerInput, input, :, this, ., moduleGraph, ., manageDependencies, (, options, ., dependencyOptions, ,]
[), {, modules, ., add, (, modulesByInput, ., get, (, input, ), ), ;, }, JSModule, root, =, new, JSModule]
[., manageDependencies, (, options, ., dependencyOptions, ,, inputs, ), ), {, modules, ., add, (, modulesByInput, ., get, (, input]
[., moduleGraph, ., manageDependencies, (, options, ., dependencyOptions, ,, inputs, ), ), {, modules, ., add, (, modulesByInput, ., get]
[,, inputs, ), ), {, modules, ., add, (, modulesByInput, ., get, (, input, ), ), ;, }, JSModule, root]
[., dependencyOptions, ,, inputs, ), ), {, modules, ., add, (, modulesByInput, ., get, (, input, ), ), ;, }]
[), ), {, modules, ., add, (, modulesByInput, ., get, (, input, ), ), ;, }, JSModule, root, =, new]
[;, }, JSModule, root, =, new, JSModule, (, "root", ), ;, for, (, JSModule, m, :, modules, ), {, m]
[., add, (, modulesByInput, ., get, (, input, ), ), ;, }, JSModule, root, =, new, JSModule, (, "root", )]
[), ;, }, JSModule, root, =, new, JSModule, (, "root", ), ;, for, (, JSModule, m, :, modules, ), {]
[., get, (, input, ), ), ;, }, JSModule, root, =, new, JSModule, (, "root", ), ;, for, (, JSModule]
[), ), ;, }, JSModule, root, =, new, JSModule, (, "root", ), ;, for, (, JSModule, m, :, modules, )]
[;, for, (, JSModule, m, :, modules, ), {, m, ., addDependency, (, root, ), ;, }, modules, ., add]
[), ;, for, (, JSModule, m, :, modules, ), {, m, ., addDependency, (, root, ), ;, }, modules, .]
[), {, m, ., addDependency, (, root, ), ;, }, modules, ., add, (, 0, ,, root, ), ;, SortedDependencies]
[;, }, modules, ., add, (, 0, ,, root, ), ;, SortedDependencies, <, JSModule, >, sorter, =, new, SortedDependencies, <]
[., addDependency, (, root, ), ;, }, modules, ., add, (, 0, ,, root, ), ;, SortedDependencies, <, JSModule, >]
[), ;, }, modules, ., add, (, 0, ,, root, ), ;, SortedDependencies, <, JSModule, >, sorter, =, new, SortedDependencies]
[;, SortedDependencies, <, JSModule, >, sorter, =, new, SortedDependencies, <, JSModule, >, (, modules, ), ;, modules, =, sorter, .]
[., add, (, 0, ,, root, ), ;, SortedDependencies, <, JSModule, >, sorter, =, new, SortedDependencies, <, JSModule, >, (]
[,, root, ), ;, SortedDependencies, <, JSModule, >, sorter, =, new, SortedDependencies, <, JSModule, >, (, modules, ), ;, modules]
[), ;, SortedDependencies, <, JSModule, >, sorter, =, new, SortedDependencies, <, JSModule, >, (, modules, ), ;, modules, =, sorter]
[;, modules, =, sorter, ., getDependenciesOf, (, modules, ,, true, ), ;, this, ., modules, =, modules, ;, this, .]
[), ;, modules, =, sorter, ., getDependenciesOf, (, modules, ,, true, ), ;, this, ., modules, =, modules, ;, this]
[=, sorter, ., getDependenciesOf, (, modules, ,, true, ), ;, this, ., modules, =, modules, ;, this, ., moduleGraph, =]
[;, this, ., modules, =, modules, ;, this, ., moduleGraph, =, new, JSModuleGraph, (, modules, ), ;, }, catch, (]
[., getDependenciesOf, (, modules, ,, true, ), ;, this, ., modules, =, modules, ;, this, ., moduleGraph, =, new, JSModuleGraph]
[,, true, ), ;, this, ., modules, =, modules, ;, this, ., moduleGraph, =, new, JSModuleGraph, (, modules, ), ;]
[), ;, this, ., modules, =, modules, ;, this, ., moduleGraph, =, new, JSModuleGraph, (, modules, ), ;, }, catch]
[=, modules, ;, this, ., moduleGraph, =, new, JSModuleGraph, (, modules, ), ;, }, catch, (, Exception, e, ), {]
[., modules, =, modules, ;, this, ., moduleGraph, =, new, JSModuleGraph, (, modules, ), ;, }, catch, (, Exception, e]
[;, this, ., moduleGraph, =, new, JSModuleGraph, (, modules, ), ;, }, catch, (, Exception, e, ), {, Throwables, .]
[=, new, JSModuleGraph, (, modules, ), ;, }, catch, (, Exception, e, ), {, Throwables, ., propagate, (, e, )]
[., moduleGraph, =, new, JSModuleGraph, (, modules, ), ;, }, catch, (, Exception, e, ), {, Throwables, ., propagate, (]
[;, }, catch, (, Exception, e, ), {, Throwables, ., propagate, (, e, ), ;, }, }, }, public, Node]
[), ;, }, catch, (, Exception, e, ), {, Throwables, ., propagate, (, e, ), ;, }, }, }, public]
[;, }, }, }, public, Node, parse, (, SourceFile, file, ), {, initCompilerOptionsIfTesting, (, ), ;, addToDebugLog, (, "Parsing: ", +]
[., propagate, (, e, ), ;, }, }, }, public, Node, parse, (, SourceFile, file, ), {, initCompilerOptionsIfTesting, (, )]
[), ;, }, }, }, public, Node, parse, (, SourceFile, file, ), {, initCompilerOptionsIfTesting, (, ), ;, addToDebugLog, (, "Parsing: "]
[;, addToDebugLog, (, "Parsing: ", +, file, ., getName, (, ), ), ;, return, new, JsAst, (, file, ), ., getAstRoot]
[;, return, new, JsAst, (, file, ), ., getAstRoot, (, this, ), ;, }, private, int, syntheticCodeId, =, 0, ;]
[), ;, return, new, JsAst, (, file, ), ., getAstRoot, (, this, ), ;, }, private, int, syntheticCodeId, =, 0]
[+, file, ., getName, (, ), ), ;, return, new, JsAst, (, file, ), ., getAstRoot, (, this, ), ;]
[), ;, return, new, JsAst, (, file, ), ., getAstRoot, (, this, ), ;, }, private, int, syntheticCodeId, =, 0]
[., getName, (, ), ), ;, return, new, JsAst, (, file, ), ., getAstRoot, (, this, ), ;, }, private]
[;, }, private, int, syntheticCodeId, =, 0, ;, @, Override, Node, parseSyntheticCode, (, String, js, ), {, CompilerInput, input, =]
[., getAstRoot, (, this, ), ;, }, private, int, syntheticCodeId, =, 0, ;, @, Override, Node, parseSyntheticCode, (, String, js]
[), ., getAstRoot, (, this, ), ;, }, private, int, syntheticCodeId, =, 0, ;, @, Override, Node, parseSyntheticCode, (, String]
[), ;, }, private, int, syntheticCodeId, =, 0, ;, @, Override, Node, parseSyntheticCode, (, String, js, ), {, CompilerInput, input]
[;, @, Override, Node, parseSyntheticCode, (, String, js, ), {, CompilerInput, input, =, new, CompilerInput, (, SourceFile, ., fromCode, (]
[;, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, return, input, ., getAstRoot, (, this, ), ;]
[), ;, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, return, input, ., getAstRoot, (, this, )]
[., fromCode, (, " [synthetic:", +, (, ++, syntheticCodeId, ), +, "] ", ,, js, ), ), ;, putCompilerInput, (, input, .]
[,, js, ), ), ;, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, return, input, ., getAstRoot]
[+, "] ", ,, js, ), ), ;, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, return, input]
[+, (, ++, syntheticCodeId, ), +, "] ", ,, js, ), ), ;, putCompilerInput, (, input, ., getInputId, (, ), ,]
[+, "] ", ,, js, ), ), ;, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, return, input]
[), +, "] ", ,, js, ), ), ;, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, return]
[), +, "] ", ,, js, ), ), ;, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, return]
[,, js, ), ), ;, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, return, input, ., getAstRoot]
[), ), ;, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, return, input, ., getAstRoot, (, this]
[;, return, input, ., getAstRoot, (, this, ), ;, }, protected, CompilerOptions, newCompilerOptions, (, ), {, return, new, CompilerOptions, (]
[,, input, ), ;, return, input, ., getAstRoot, (, this, ), ;, }, protected, CompilerOptions, newCompilerOptions, (, ), {, return]
[., getInputId, (, ), ,, input, ), ;, return, input, ., getAstRoot, (, this, ), ;, }, protected, CompilerOptions, newCompilerOptions]
[), ;, return, input, ., getAstRoot, (, this, ), ;, }, protected, CompilerOptions, newCompilerOptions, (, ), {, return, new, CompilerOptions]
[;, }, protected, CompilerOptions, newCompilerOptions, (, ), {, return, new, CompilerOptions, (, ), ;, }, void, initCompilerOptionsIfTesting, (, ), {]
[., getAstRoot, (, this, ), ;, }, protected, CompilerOptions, newCompilerOptions, (, ), {, return, new, CompilerOptions, (, ), ;, }]
[), ;, }, protected, CompilerOptions, newCompilerOptions, (, ), {, return, new, CompilerOptions, (, ), ;, }, void, initCompilerOptionsIfTesting, (, )]
[;, }, void, initCompilerOptionsIfTesting, (, ), {, if, (, options, ==, null, ), {, initOptions, (, newCompilerOptions, (, ), )]
[), {, initOptions, (, newCompilerOptions, (, ), ), ;, }, }, @, Override, Node, parseSyntheticCode, (, String, fileName, ,, String]
[==, null, ), {, initOptions, (, newCompilerOptions, (, ), ), ;, }, }, @, Override, Node, parseSyntheticCode, (, String, fileName]
[), {, initOptions, (, newCompilerOptions, (, ), ), ;, }, }, @, Override, Node, parseSyntheticCode, (, String, fileName, ,, String]
[;, }, }, @, Override, Node, parseSyntheticCode, (, String, fileName, ,, String, js, ), {, initCompilerOptionsIfTesting, (, ), ;, return]
[), ;, }, }, @, Override, Node, parseSyntheticCode, (, String, fileName, ,, String, js, ), {, initCompilerOptionsIfTesting, (, ), ;]
[;, return, parse, (, SourceFile, ., fromCode, (, fileName, ,, js, ), ), ;, }, @, Override, Node, parseTestCode, (]
[;, }, @, Override, Node, parseTestCode, (, String, js, ), {, initCompilerOptionsIfTesting, (, ), ;, CompilerInput, input, =, new, CompilerInput]
[), ;, }, @, Override, Node, parseTestCode, (, String, js, ), {, initCompilerOptionsIfTesting, (, ), ;, CompilerInput, input, =, new]
[., fromCode, (, fileName, ,, js, ), ), ;, }, @, Override, Node, parseTestCode, (, String, js, ), {, initCompilerOptionsIfTesting]
[,, js, ), ), ;, }, @, Override, Node, parseTestCode, (, String, js, ), {, initCompilerOptionsIfTesting, (, ), ;, CompilerInput]
[), ), ;, }, @, Override, Node, parseTestCode, (, String, js, ), {, initCompilerOptionsIfTesting, (, ), ;, CompilerInput, input, =]
[;, CompilerInput, input, =, new, CompilerInput, (, SourceFile, ., fromCode, (, "[testcode]", ,, js, ), ), ;, if, (, inputsById]
[;, if, (, inputsById, ==, null, ), {, inputsById, =, Maps, ., newHashMap, (, ), ;, }, putCompilerInput, (, input]
[), ;, if, (, inputsById, ==, null, ), {, inputsById, =, Maps, ., newHashMap, (, ), ;, }, putCompilerInput, (]
[., fromCode, (, "[testcode]", ,, js, ), ), ;, if, (, inputsById, ==, null, ), {, inputsById, =, Maps, .]
[,, js, ), ), ;, if, (, inputsById, ==, null, ), {, inputsById, =, Maps, ., newHashMap, (, ), ;]
[), ), ;, if, (, inputsById, ==, null, ), {, inputsById, =, Maps, ., newHashMap, (, ), ;, }, putCompilerInput]
[), {, inputsById, =, Maps, ., newHashMap, (, ), ;, }, putCompilerInput, (, input, ., getInputId, (, ), ,, input]
[==, null, ), {, inputsById, =, Maps, ., newHashMap, (, ), ;, }, putCompilerInput, (, input, ., getInputId, (, )]
[), {, inputsById, =, Maps, ., newHashMap, (, ), ;, }, putCompilerInput, (, input, ., getInputId, (, ), ,, input]
[=, Maps, ., newHashMap, (, ), ;, }, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, return]
[;, }, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, return, input, ., getAstRoot, (, this, )]
[., newHashMap, (, ), ;, }, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, return, input, .]
[;, return, input, ., getAstRoot, (, this, ), ;, }, @, Override, ErrorReporter, getDefaultErrorReporter, (, ), {, return, defaultErrorReporter, ;]
[,, input, ), ;, return, input, ., getAstRoot, (, this, ), ;, }, @, Override, ErrorReporter, getDefaultErrorReporter, (, ), {]
[., getInputId, (, ), ,, input, ), ;, return, input, ., getAstRoot, (, this, ), ;, }, @, Override, ErrorReporter]
[), ;, return, input, ., getAstRoot, (, this, ), ;, }, @, Override, ErrorReporter, getDefaultErrorReporter, (, ), {, return, defaultErrorReporter]
[;, }, @, Override, ErrorReporter, getDefaultErrorReporter, (, ), {, return, defaultErrorReporter, ;, }, public, String, toSource, (, ), {, return]
[., getAstRoot, (, this, ), ;, }, @, Override, ErrorReporter, getDefaultErrorReporter, (, ), {, return, defaultErrorReporter, ;, }, public, String]
[), ;, }, @, Override, ErrorReporter, getDefaultErrorReporter, (, ), {, return, defaultErrorReporter, ;, }, public, String, toSource, (, ), {]
[;, }, public, String, toSource, (, ), {, return, runInCompilerThread, (, new, Callable, <, String, >, (, ), {, @]
[;, }, public, String, [, ], toSourceArray, (, ), {, return, runInCompilerThread, (, new, Callable, <, String, [, ], >]
[), ;, }, public, String, [, ], toSourceArray, (, ), {, return, runInCompilerThread, (, new, Callable, <, String, [, ]]
[;, try, {, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, if, (, jsRoot, !=, null, ), {, int, i]
[), ;, try, {, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, if, (, jsRoot, !=, null, ), {, int]
[;, if, (, jsRoot, !=, null, ), {, int, i, =, 0, ;, for, (, Node, scriptNode, =, jsRoot, .]
[), {, int, i, =, 0, ;, for, (, Node, scriptNode, =, jsRoot, ., getFirstChild, (, ), ;, scriptNode, !=]
[!=, null, ), {, int, i, =, 0, ;, for, (, Node, scriptNode, =, jsRoot, ., getFirstChild, (, ), ;]
[), {, int, i, =, 0, ;, for, (, Node, scriptNode, =, jsRoot, ., getFirstChild, (, ), ;, scriptNode, !=]
[;, for, (, Node, scriptNode, =, jsRoot, ., getFirstChild, (, ), ;, scriptNode, !=, null, ;, scriptNode, =, scriptNode, .]
[;, scriptNode, !=, null, ;, scriptNode, =, scriptNode, ., getNext, (, ), ), {, toSource, (, cb, ,, i, ++]
[., getFirstChild, (, ), ;, scriptNode, !=, null, ;, scriptNode, =, scriptNode, ., getNext, (, ), ), {, toSource, (]
[;, scriptNode, =, scriptNode, ., getNext, (, ), ), {, toSource, (, cb, ,, i, ++, ,, scriptNode, ), ;]
[!=, null, ;, scriptNode, =, scriptNode, ., getNext, (, ), ), {, toSource, (, cb, ,, i, ++, ,, scriptNode]
[;, scriptNode, =, scriptNode, ., getNext, (, ), ), {, toSource, (, cb, ,, i, ++, ,, scriptNode, ), ;]
[=, scriptNode, ., getNext, (, ), ), {, toSource, (, cb, ,, i, ++, ,, scriptNode, ), ;, }, }]
[), {, toSource, (, cb, ,, i, ++, ,, scriptNode, ), ;, }, }, return, cb, ., toString, (, )]
[., getNext, (, ), ), {, toSource, (, cb, ,, i, ++, ,, scriptNode, ), ;, }, }, return, cb]
[;, }, }, return, cb, ., toString, (, ), ;, }, finally, {, stopTracer, (, tracer, ,, "toSource", ), ;]
[,, i, ++, ,, scriptNode, ), ;, }, }, return, cb, ., toString, (, ), ;, }, finally, {, stopTracer]
[,, scriptNode, ), ;, }, }, return, cb, ., toString, (, ), ;, }, finally, {, stopTracer, (, tracer, ,]
[++, ,, scriptNode, ), ;, }, }, return, cb, ., toString, (, ), ;, }, finally, {, stopTracer, (, tracer]
[), ;, }, }, return, cb, ., toString, (, ), ;, }, finally, {, stopTracer, (, tracer, ,, "toSource", )]
[;, }, finally, {, stopTracer, (, tracer, ,, "toSource", ), ;, }, }, }, ), ;, }, public, String, []
[., toString, (, ), ;, }, finally, {, stopTracer, (, tracer, ,, "toSource", ), ;, }, }, }, ), ;]
[;, }, }, }, ), ;, }, public, String, [, ], toSourceArray, (, ), {, return, runInCompilerThread, (, new, Callable]
[,, "toSource", ), ;, }, }, }, ), ;, }, public, String, [, ], toSourceArray, (, ), {, return, runInCompilerThread]
[), ;, }, }, }, ), ;, }, public, String, [, ], toSourceArray, (, ), {, return, runInCompilerThread, (, new]
[;, }, public, String, toSource, (, final, JSModule, module, ), {, return, runInCompilerThread, (, new, Callable, <, String, >, (]
[), ;, }, public, String, toSource, (, final, JSModule, module, ), {, return, runInCompilerThread, (, new, Callable, <, String, >]
[;, try, {, int, numInputs, =, inputs, ., size, (, ), ;, String, [, ], sources, =, new, String, []
[), ;, try, {, int, numInputs, =, inputs, ., size, (, ), ;, String, [, ], sources, =, new, String]
[;, String, [, ], sources, =, new, String, [, numInputs, ], ;, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;]
[., size, (, ), ;, String, [, ], sources, =, new, String, [, numInputs, ], ;, CodeBuilder, cb, =, new]
[;, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;]
[], ;, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, numInputs]
[;, for, (, int, i, =, 0, ;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =, inputs]
[;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot]
[;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this]
[<, numInputs, ;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler]
[;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this]
[), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, cb]
[++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;]
[;, cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode, ), ;, sources, [, i, ]]
[., getAstRoot, (, Compiler, ., this, ), ;, cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,]
[., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, cb, ., reset, (, ), ;, toSource]
[), ., getAstRoot, (, Compiler, ., this, ), ;, cb, ., reset, (, ), ;, toSource, (, cb, ,, i]
[), ;, cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode, ), ;, sources, [, i]
[;, toSource, (, cb, ,, i, ,, scriptNode, ), ;, sources, [, i, ], =, cb, ., toString, (, )]
[., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode, ), ;, sources, [, i, ], =, cb]
[;, sources, [, i, ], =, cb, ., toString, (, ), ;, }, return, sources, ;, }, finally, {, stopTracer]
[,, i, ,, scriptNode, ), ;, sources, [, i, ], =, cb, ., toString, (, ), ;, }, return, sources]
[,, scriptNode, ), ;, sources, [, i, ], =, cb, ., toString, (, ), ;, }, return, sources, ;, }]
[), ;, sources, [, i, ], =, cb, ., toString, (, ), ;, }, return, sources, ;, }, finally, {]
[=, cb, ., toString, (, ), ;, }, return, sources, ;, }, finally, {, stopTracer, (, tracer, ,, "toSourceArray", )]
[[, i, ], =, cb, ., toString, (, ), ;, }, return, sources, ;, }, finally, {, stopTracer, (, tracer]
[], =, cb, ., toString, (, ), ;, }, return, sources, ;, }, finally, {, stopTracer, (, tracer, ,, "toSourceArray"]
[;, }, return, sources, ;, }, finally, {, stopTracer, (, tracer, ,, "toSourceArray", ), ;, }, }, }, ), ;]
[., toString, (, ), ;, }, return, sources, ;, }, finally, {, stopTracer, (, tracer, ,, "toSourceArray", ), ;, }]
[;, }, finally, {, stopTracer, (, tracer, ,, "toSourceArray", ), ;, }, }, }, ), ;, }, public, String, toSource]
[;, }, }, }, ), ;, }, public, String, toSource, (, final, JSModule, module, ), {, return, runInCompilerThread, (, new]
[,, "toSourceArray", ), ;, }, }, }, ), ;, }, public, String, toSource, (, final, JSModule, module, ), {, return]
[), ;, }, }, }, ), ;, }, public, String, toSource, (, final, JSModule, module, ), {, return, runInCompilerThread, (]
[;, }, public, String, [, ], toSourceArray, (, final, JSModule, module, ), {, return, runInCompilerThread, (, new, Callable, <, String]
[), ;, }, public, String, [, ], toSourceArray, (, final, JSModule, module, ), {, return, runInCompilerThread, (, new, Callable, <]
[;, int, numInputs, =, inputs, ., size, (, ), ;, if, (, numInputs, ==, 0, ), {, return, "", ;]
[., getInputs, (, ), ;, int, numInputs, =, inputs, ., size, (, ), ;, if, (, numInputs, ==, 0, )]
[;, if, (, numInputs, ==, 0, ), {, return, "", ;, }, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;]
[., size, (, ), ;, if, (, numInputs, ==, 0, ), {, return, "", ;, }, CodeBuilder, cb, =, new]
[), {, return, "", ;, }, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0]
[==, 0, ), {, return, "", ;, }, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i]
[), {, return, "", ;, }, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0]
[;, }, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, numInputs]
[;, for, (, int, i, =, 0, ;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =, inputs]
[;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot]
[;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this]
[<, numInputs, ;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler]
[;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this]
[), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, if]
[++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;]
[;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (, "Bad module: ", +, module, ., getName, (, ), )]
[., getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (, "Bad module: "]
[., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==, null, ), {]
[), ., getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), ;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (, "Bad module: ", +, module, ., getName, (, )]
[), {, throw, new, IllegalArgumentException, (, "Bad module: ", +, module, ., getName, (, ), ), ;, }, toSource, (, cb, ,]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Bad module: ", +, module, ., getName, (, ), ), ;, }, toSource, (]
[), {, throw, new, IllegalArgumentException, (, "Bad module: ", +, module, ., getName, (, ), ), ;, }, toSource, (, cb, ,]
[;, }, toSource, (, cb, ,, i, ,, scriptNode, ), ;, }, return, cb, ., toString, (, ), ;, }]
[), ;, }, toSource, (, cb, ,, i, ,, scriptNode, ), ;, }, return, cb, ., toString, (, ), ;]
[+, module, ., getName, (, ), ), ;, }, toSource, (, cb, ,, i, ,, scriptNode, ), ;, }, return]
[), ;, }, toSource, (, cb, ,, i, ,, scriptNode, ), ;, }, return, cb, ., toString, (, ), ;]
[., getName, (, ), ), ;, }, toSource, (, cb, ,, i, ,, scriptNode, ), ;, }, return, cb, .]
[;, }, return, cb, ., toString, (, ), ;, }, }, ), ;, }, public, String, [, ], toSourceArray, (]
[,, i, ,, scriptNode, ), ;, }, return, cb, ., toString, (, ), ;, }, }, ), ;, }, public]
[,, scriptNode, ), ;, }, return, cb, ., toString, (, ), ;, }, }, ), ;, }, public, String, []
[), ;, }, return, cb, ., toString, (, ), ;, }, }, ), ;, }, public, String, [, ], toSourceArray]
[;, }, }, ), ;, }, public, String, [, ], toSourceArray, (, final, JSModule, module, ), {, return, runInCompilerThread, (]
[., toString, (, ), ;, }, }, ), ;, }, public, String, [, ], toSourceArray, (, final, JSModule, module, )]
[;, }, public, void, toSource, (, final, CodeBuilder, cb, ,, final, int, inputSeqNum, ,, final, Node, root, ), {, runInCompilerThread]
[), ;, }, public, void, toSource, (, final, CodeBuilder, cb, ,, final, int, inputSeqNum, ,, final, Node, root, ), {]
[;, int, numInputs, =, inputs, ., size, (, ), ;, if, (, numInputs, ==, 0, ), {, return, new, String]
[., getInputs, (, ), ;, int, numInputs, =, inputs, ., size, (, ), ;, if, (, numInputs, ==, 0, )]
[;, if, (, numInputs, ==, 0, ), {, return, new, String, [, 0, ], ;, }, String, [, ], sources]
[., size, (, ), ;, if, (, numInputs, ==, 0, ), {, return, new, String, [, 0, ], ;, }]
[), {, return, new, String, [, 0, ], ;, }, String, [, ], sources, =, new, String, [, numInputs, ]]
[==, 0, ), {, return, new, String, [, 0, ], ;, }, String, [, ], sources, =, new, String, []
[), {, return, new, String, [, 0, ], ;, }, String, [, ], sources, =, new, String, [, numInputs, ]]
[;, }, String, [, ], sources, =, new, String, [, numInputs, ], ;, CodeBuilder, cb, =, new, CodeBuilder, (, )]
[], ;, }, String, [, ], sources, =, new, String, [, numInputs, ], ;, CodeBuilder, cb, =, new, CodeBuilder, (]
[;, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;]
[], ;, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, numInputs]
[;, for, (, int, i, =, 0, ;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =, inputs]
[;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot]
[;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this]
[<, numInputs, ;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler]
[;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this]
[), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, if]
[++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;]
[;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (, "Bad module input: ", +, inputs, ., get, (, i, )]
[., getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (, "Bad module input: "]
[., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==, null, ), {]
[), ., getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), ;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (, "Bad module input: ", +, inputs, ., get, (, i]
[), {, throw, new, IllegalArgumentException, (, "Bad module input: ", +, inputs, ., get, (, i, ), ., getName, (, ), ), ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Bad module input: ", +, inputs, ., get, (, i, ), ., getName, (, )]
[), {, throw, new, IllegalArgumentException, (, "Bad module input: ", +, inputs, ., get, (, i, ), ., getName, (, ), ), ;]
[;, }, cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode, ), ;, sources, [, i]
[), ;, }, cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode, ), ;, sources, []
[+, inputs, ., get, (, i, ), ., getName, (, ), ), ;, }, cb, ., reset, (, ), ;]
[), ;, }, cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode, ), ;, sources, []
[., getName, (, ), ), ;, }, cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode]
[., get, (, i, ), ., getName, (, ), ), ;, }, cb, ., reset, (, ), ;, toSource, (]
[), ., getName, (, ), ), ;, }, cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,]
[;, toSource, (, cb, ,, i, ,, scriptNode, ), ;, sources, [, i, ], =, cb, ., toString, (, )]
[., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode, ), ;, sources, [, i, ], =, cb]
[;, sources, [, i, ], =, cb, ., toString, (, ), ;, }, return, sources, ;, }, }, ), ;]
[,, i, ,, scriptNode, ), ;, sources, [, i, ], =, cb, ., toString, (, ), ;, }, return, sources]
[,, scriptNode, ), ;, sources, [, i, ], =, cb, ., toString, (, ), ;, }, return, sources, ;, }]
[), ;, sources, [, i, ], =, cb, ., toString, (, ), ;, }, return, sources, ;, }, }, )]
[=, cb, ., toString, (, ), ;, }, return, sources, ;, }, }, ), ;, }, public, void, toSource, (]
[[, i, ], =, cb, ., toString, (, ), ;, }, return, sources, ;, }, }, ), ;, }, public]
[], =, cb, ., toString, (, ), ;, }, return, sources, ;, }, }, ), ;, }, public, void, toSource]
[;, }, return, sources, ;, }, }, ), ;, }, public, void, toSource, (, final, CodeBuilder, cb, ,, final, int]
[., toString, (, ), ;, }, return, sources, ;, }, }, ), ;, }, public, void, toSource, (, final, CodeBuilder]
[;, }, }, ), ;, }, public, void, toSource, (, final, CodeBuilder, cb, ,, final, int, inputSeqNum, ,, final, Node]
[;, }, @, Override, String, toSource, (, Node, n, ), {, initCompilerOptionsIfTesting, (, ), ;, return, toSource, (, n, ,]
[), ;, }, @, Override, String, toSource, (, Node, n, ), {, initCompilerOptionsIfTesting, (, ), ;, return, toSource, (, n]
[), {, if, (, (, cb, ., getLength, (, ), >, 0, ), &&, !, cb, ., endsWith, (, "\n"]
[., printInputDelimiter, ), {, if, (, (, cb, ., getLength, (, ), >, 0, ), &&, !, cb, ., endsWith]
[), {, cb, ., append, (, "\n", ), ;, }, Preconditions, ., checkState, (, root, ., isScript, (, ), )]
[&&, !, cb, ., endsWith, (, "\n", ), ), {, cb, ., append, (, "\n", ), ;, }, Preconditions, .]
[), &&, !, cb, ., endsWith, (, "\n", ), ), {, cb, ., append, (, "\n", ), ;, }, Preconditions]
[>, 0, ), &&, !, cb, ., endsWith, (, "\n", ), ), {, cb, ., append, (, "\n", ), ;]
[., getLength, (, ), >, 0, ), &&, !, cb, ., endsWith, (, "\n", ), ), {, cb, ., append]
[), &&, !, cb, ., endsWith, (, "\n", ), ), {, cb, ., append, (, "\n", ), ;, }, Preconditions]
[), {, cb, ., append, (, "\n", ), ;, }, Preconditions, ., checkState, (, root, ., isScript, (, ), )]
[), {, cb, ., append, (, "\n", ), ;, }, Preconditions, ., checkState, (, root, ., isScript, (, ), )]
[., endsWith, (, "\n", ), ), {, cb, ., append, (, "\n", ), ;, }, Preconditions, ., checkState, (, root]
[), ), {, cb, ., append, (, "\n", ), ;, }, Preconditions, ., checkState, (, root, ., isScript, (, )]
[;, }, Preconditions, ., checkState, (, root, ., isScript, (, ), ), ;, String, delimiter, =, options, ., inputDelimiter, ;]
[., append, (, "\n", ), ;, }, Preconditions, ., checkState, (, root, ., isScript, (, ), ), ;, String, delimiter]
[), ;, }, Preconditions, ., checkState, (, root, ., isScript, (, ), ), ;, String, delimiter, =, options, ., inputDelimiter]
[;, String, delimiter, =, options, ., inputDelimiter, ;, String, inputName, =, root, ., getInputId, (, ), ., getIdName, (, )]
[., checkState, (, root, ., isScript, (, ), ), ;, String, delimiter, =, options, ., inputDelimiter, ;, String, inputName, =]
[), ;, String, delimiter, =, options, ., inputDelimiter, ;, String, inputName, =, root, ., getInputId, (, ), ., getIdName, (]
[., isScript, (, ), ), ;, String, delimiter, =, options, ., inputDelimiter, ;, String, inputName, =, root, ., getInputId, (]
[;, String, inputName, =, root, ., getInputId, (, ), ., getIdName, (, ), ;, String, sourceName, =, root, ., getSourceFileName]
[., inputDelimiter, ;, String, inputName, =, root, ., getInputId, (, ), ., getIdName, (, ), ;, String, sourceName, =, root]
[;, String, sourceName, =, root, ., getSourceFileName, (, ), ;, Preconditions, ., checkState, (, sourceName, !=, null, ), ;, Preconditions]
[., getIdName, (, ), ;, String, sourceName, =, root, ., getSourceFileName, (, ), ;, Preconditions, ., checkState, (, sourceName, !=]
[., getInputId, (, ), ., getIdName, (, ), ;, String, sourceName, =, root, ., getSourceFileName, (, ), ;, Preconditions, .]
[;, Preconditions, ., checkState, (, sourceName, !=, null, ), ;, Preconditions, ., checkState, (, !, sourceName, ., isEmpty, (, )]
[., getSourceFileName, (, ), ;, Preconditions, ., checkState, (, sourceName, !=, null, ), ;, Preconditions, ., checkState, (, !, sourceName]
[;, Preconditions, ., checkState, (, !, sourceName, ., isEmpty, (, ), ), ;, delimiter, =, delimiter, ., replaceAll, (, "%name%"]
[., checkState, (, sourceName, !=, null, ), ;, Preconditions, ., checkState, (, !, sourceName, ., isEmpty, (, ), ), ;]
[), ;, Preconditions, ., checkState, (, !, sourceName, ., isEmpty, (, ), ), ;, delimiter, =, delimiter, ., replaceAll, (]
[!=, null, ), ;, Preconditions, ., checkState, (, !, sourceName, ., isEmpty, (, ), ), ;, delimiter, =, delimiter, .]
[), ;, Preconditions, ., checkState, (, !, sourceName, ., isEmpty, (, ), ), ;, delimiter, =, delimiter, ., replaceAll, (]
[;, delimiter, =, delimiter, ., replaceAll, (, "%name%", ,, Matcher, ., quoteReplacement, (, inputName, ), ), ., replaceAll, (, "%num%"]
[., checkState, (, !, sourceName, ., isEmpty, (, ), ), ;, delimiter, =, delimiter, ., replaceAll, (, "%name%", ,, Matcher]
[), ;, delimiter, =, delimiter, ., replaceAll, (, "%name%", ,, Matcher, ., quoteReplacement, (, inputName, ), ), ., replaceAll, (]
[), ;, delimiter, =, delimiter, ., replaceAll, (, "%name%", ,, Matcher, ., quoteReplacement, (, inputName, ), ), ., replaceAll, (]
[., isEmpty, (, ), ), ;, delimiter, =, delimiter, ., replaceAll, (, "%name%", ,, Matcher, ., quoteReplacement, (, inputName, )]
[=, delimiter, ., replaceAll, (, "%name%", ,, Matcher, ., quoteReplacement, (, inputName, ), ), ., replaceAll, (, "%num%", ,, String]
[;, cb, ., append, (, delimiter, ), ., append, (, "\n", ), ;, }, if, (, root, ., getJSDocInfo, (]
[., replaceAll, (, "%num%", ,, String, ., valueOf, (, inputSeqNum, ), ), ;, cb, ., append, (, delimiter, ), .]
[., replaceAll, (, "%name%", ,, Matcher, ., quoteReplacement, (, inputName, ), ), ., replaceAll, (, "%num%", ,, String, ., valueOf]
[,, Matcher, ., quoteReplacement, (, inputName, ), ), ., replaceAll, (, "%num%", ,, String, ., valueOf, (, inputSeqNum, ), )]
[), ., replaceAll, (, "%num%", ,, String, ., valueOf, (, inputSeqNum, ), ), ;, cb, ., append, (, delimiter, )]
[., quoteReplacement, (, inputName, ), ), ., replaceAll, (, "%num%", ,, String, ., valueOf, (, inputSeqNum, ), ), ;, cb]
[), ), ., replaceAll, (, "%num%", ,, String, ., valueOf, (, inputSeqNum, ), ), ;, cb, ., append, (, delimiter]
[,, String, ., valueOf, (, inputSeqNum, ), ), ;, cb, ., append, (, delimiter, ), ., append, (, "\n", )]
[), ;, cb, ., append, (, delimiter, ), ., append, (, "\n", ), ;, }, if, (, root, ., getJSDocInfo]
[., valueOf, (, inputSeqNum, ), ), ;, cb, ., append, (, delimiter, ), ., append, (, "\n", ), ;, }]
[), ), ;, cb, ., append, (, delimiter, ), ., append, (, "\n", ), ;, }, if, (, root, .]
[;, }, if, (, root, ., getJSDocInfo, (, ), !=, null, &&, root, ., getJSDocInfo, (, ), ., getLicense, (]
[., append, (, "\n", ), ;, }, if, (, root, ., getJSDocInfo, (, ), !=, null, &&, root, ., getJSDocInfo]
[., append, (, delimiter, ), ., append, (, "\n", ), ;, }, if, (, root, ., getJSDocInfo, (, ), !=]
[), ., append, (, "\n", ), ;, }, if, (, root, ., getJSDocInfo, (, ), !=, null, &&, root, .]
[), ;, }, if, (, root, ., getJSDocInfo, (, ), !=, null, &&, root, ., getJSDocInfo, (, ), ., getLicense]
[), {, cb, ., append, (, "/*\n", ), ., append, (, root, ., getJSDocInfo, (, ), ., getLicense, (, )]
[&&, root, ., getJSDocInfo, (, ), ., getLicense, (, ), !=, null, ), {, cb, ., append, (, "/*\n", )]
[!=, null, &&, root, ., getJSDocInfo, (, ), ., getLicense, (, ), !=, null, ), {, cb, ., append, (]
[., getJSDocInfo, (, ), !=, null, &&, root, ., getJSDocInfo, (, ), ., getLicense, (, ), !=, null, ), {]
[&&, root, ., getJSDocInfo, (, ), ., getLicense, (, ), !=, null, ), {, cb, ., append, (, "/*\n", )]
[), {, cb, ., append, (, "/*\n", ), ., append, (, root, ., getJSDocInfo, (, ), ., getLicense, (, )]
[!=, null, ), {, cb, ., append, (, "/*\n", ), ., append, (, root, ., getJSDocInfo, (, ), ., getLicense]
[., getLicense, (, ), !=, null, ), {, cb, ., append, (, "/*\n", ), ., append, (, root, ., getJSDocInfo]
[., getJSDocInfo, (, ), ., getLicense, (, ), !=, null, ), {, cb, ., append, (, "/*\n", ), ., append]
[), {, cb, ., append, (, "/*\n", ), ., append, (, root, ., getJSDocInfo, (, ), ., getLicense, (, )]
[;, }, if, (, options, ., sourceMapOutputPath, !=, null, ), {, sourceMap, ., setStartingPosition, (, cb, ., getLineIndex, (, )]
[., append, (, "*/\n", ), ;, }, if, (, options, ., sourceMapOutputPath, !=, null, ), {, sourceMap, ., setStartingPosition, (]
[., append, (, root, ., getJSDocInfo, (, ), ., getLicense, (, ), ), ., append, (, "*/\n", ), ;, }]
[., append, (, "/*\n", ), ., append, (, root, ., getJSDocInfo, (, ), ., getLicense, (, ), ), ., append]
[), ., append, (, root, ., getJSDocInfo, (, ), ., getLicense, (, ), ), ., append, (, "*/\n", ), ;]
[), ., append, (, "*/\n", ), ;, }, if, (, options, ., sourceMapOutputPath, !=, null, ), {, sourceMap, ., setStartingPosition]
[., getLicense, (, ), ), ., append, (, "*/\n", ), ;, }, if, (, options, ., sourceMapOutputPath, !=, null, )]
[., getJSDocInfo, (, ), ., getLicense, (, ), ), ., append, (, "*/\n", ), ;, }, if, (, options, .]
[), ;, }, if, (, options, ., sourceMapOutputPath, !=, null, ), {, sourceMap, ., setStartingPosition, (, cb, ., getLineIndex, (]
[), {, sourceMap, ., setStartingPosition, (, cb, ., getLineIndex, (, ), ,, cb, ., getColumnIndex, (, ), ), ;, }]
[!=, null, ), {, sourceMap, ., setStartingPosition, (, cb, ., getLineIndex, (, ), ,, cb, ., getColumnIndex, (, ), )]
[., sourceMapOutputPath, !=, null, ), {, sourceMap, ., setStartingPosition, (, cb, ., getLineIndex, (, ), ,, cb, ., getColumnIndex, (]
[), {, sourceMap, ., setStartingPosition, (, cb, ., getLineIndex, (, ), ,, cb, ., getColumnIndex, (, ), ), ;, }]
[;, }, String, code, =, toSource, (, root, ,, sourceMap, ,, inputSeqNum, ==, 0, ), ;, if, (, !, code]
[., setStartingPosition, (, cb, ., getLineIndex, (, ), ,, cb, ., getColumnIndex, (, ), ), ;, }, String, code, =]
[,, cb, ., getColumnIndex, (, ), ), ;, }, String, code, =, toSource, (, root, ,, sourceMap, ,, inputSeqNum, ==]
[., getLineIndex, (, ), ,, cb, ., getColumnIndex, (, ), ), ;, }, String, code, =, toSource, (, root, ,]
[), ;, }, String, code, =, toSource, (, root, ,, sourceMap, ,, inputSeqNum, ==, 0, ), ;, if, (, !]
[., getColumnIndex, (, ), ), ;, }, String, code, =, toSource, (, root, ,, sourceMap, ,, inputSeqNum, ==, 0, )]
[;, if, (, !, code, ., isEmpty, (, ), ), {, cb, ., append, (, code, ), ;, int, length]
[,, sourceMap, ,, inputSeqNum, ==, 0, ), ;, if, (, !, code, ., isEmpty, (, ), ), {, cb, .]
[,, inputSeqNum, ==, 0, ), ;, if, (, !, code, ., isEmpty, (, ), ), {, cb, ., append, (]
[), ;, if, (, !, code, ., isEmpty, (, ), ), {, cb, ., append, (, code, ), ;, int]
[==, 0, ), ;, if, (, !, code, ., isEmpty, (, ), ), {, cb, ., append, (, code, )]
[), ;, if, (, !, code, ., isEmpty, (, ), ), {, cb, ., append, (, code, ), ;, int]
[), {, cb, ., append, (, code, ), ;, int, length, =, code, ., length, (, ), ;, char, lastChar]
[), {, cb, ., append, (, code, ), ;, int, length, =, code, ., length, (, ), ;, char, lastChar]
[., isEmpty, (, ), ), {, cb, ., append, (, code, ), ;, int, length, =, code, ., length, (]
[;, int, length, =, code, ., length, (, ), ;, char, lastChar, =, code, ., charAt, (, length, -, 1]
[., append, (, code, ), ;, int, length, =, code, ., length, (, ), ;, char, lastChar, =, code, .]
[), ;, int, length, =, code, ., length, (, ), ;, char, lastChar, =, code, ., charAt, (, length, -]
[;, char, lastChar, =, code, ., charAt, (, length, -, 1, ), ;, char, secondLastChar, =, length, >=, 2, ?]
[., length, (, ), ;, char, lastChar, =, code, ., charAt, (, length, -, 1, ), ;, char, secondLastChar, =]
[;, char, secondLastChar, =, length, >=, 2, ?, code, ., charAt, (, length, -, 2, ), :, '\0', ;, boolean]
[., charAt, (, length, -, 1, ), ;, char, secondLastChar, =, length, >=, 2, ?, code, ., charAt, (, length]
[), ;, char, secondLastChar, =, length, >=, 2, ?, code, ., charAt, (, length, -, 2, ), :, '\0', ;]
[-, 1, ), ;, char, secondLastChar, =, length, >=, 2, ?, code, ., charAt, (, length, -, 2, ), :]
[), ;, char, secondLastChar, =, length, >=, 2, ?, code, ., charAt, (, length, -, 2, ), :, '\0', ;]
[;, boolean, hasSemiColon, =, lastChar, ==, ';', ||, (, lastChar, ==, '\n', &&, secondLastChar, ==, ';', ), ;, if, (]
[?, code, ., charAt, (, length, -, 2, ), :, '\0', ;, boolean, hasSemiColon, =, lastChar, ==, ';', ||, (]
[>=, 2, ?, code, ., charAt, (, length, -, 2, ), :, '\0', ;, boolean, hasSemiColon, =, lastChar, ==, ';']
[?, code, ., charAt, (, length, -, 2, ), :, '\0', ;, boolean, hasSemiColon, =, lastChar, ==, ';', ||, (]
[:, '\0', ;, boolean, hasSemiColon, =, lastChar, ==, ';', ||, (, lastChar, ==, '\n', &&, secondLastChar, ==, ';', ), ;]
[., charAt, (, length, -, 2, ), :, '\0', ;, boolean, hasSemiColon, =, lastChar, ==, ';', ||, (, lastChar, ==]
[), :, '\0', ;, boolean, hasSemiColon, =, lastChar, ==, ';', ||, (, lastChar, ==, '\n', &&, secondLastChar, ==, ';', )]
[-, 2, ), :, '\0', ;, boolean, hasSemiColon, =, lastChar, ==, ';', ||, (, lastChar, ==, '\n', &&, secondLastChar, ==]
[), :, '\0', ;, boolean, hasSemiColon, =, lastChar, ==, ';', ||, (, lastChar, ==, '\n', &&, secondLastChar, ==, ';', )]
[;, boolean, hasSemiColon, =, lastChar, ==, ';', ||, (, lastChar, ==, '\n', &&, secondLastChar, ==, ';', ), ;, if, (]
[;, if, (, !, hasSemiColon, ), {, cb, ., append, (, ";", ), ;, }, }, return, null, ;, }]
[||, (, lastChar, ==, '\n', &&, secondLastChar, ==, ';', ), ;, if, (, !, hasSemiColon, ), {, cb, ., append]
[==, ';', ||, (, lastChar, ==, '\n', &&, secondLastChar, ==, ';', ), ;, if, (, !, hasSemiColon, ), {, cb]
[||, (, lastChar, ==, '\n', &&, secondLastChar, ==, ';', ), ;, if, (, !, hasSemiColon, ), {, cb, ., append]
[;, if, (, !, hasSemiColon, ), {, cb, ., append, (, ";", ), ;, }, }, return, null, ;, }]
[), ;, if, (, !, hasSemiColon, ), {, cb, ., append, (, ";", ), ;, }, }, return, null, ;]
[&&, secondLastChar, ==, ';', ), ;, if, (, !, hasSemiColon, ), {, cb, ., append, (, ";", ), ;, }]
[==, '\n', &&, secondLastChar, ==, ';', ), ;, if, (, !, hasSemiColon, ), {, cb, ., append, (, ";", )]
[&&, secondLastChar, ==, ';', ), ;, if, (, !, hasSemiColon, ), {, cb, ., append, (, ";", ), ;, }]
[), ;, if, (, !, hasSemiColon, ), {, cb, ., append, (, ";", ), ;, }, }, return, null, ;]
[==, ';', ), ;, if, (, !, hasSemiColon, ), {, cb, ., append, (, ";", ), ;, }, }, return]
[), ;, if, (, !, hasSemiColon, ), {, cb, ., append, (, ";", ), ;, }, }, return, null, ;]
[), {, cb, ., append, (, ";", ), ;, }, }, return, null, ;, }, }, ), ;, }, @]
[), {, cb, ., append, (, ";", ), ;, }, }, return, null, ;, }, }, ), ;, }, @]
[;, }, }, return, null, ;, }, }, ), ;, }, @, Override, String, toSource, (, Node, n, ), {]
[., append, (, ";", ), ;, }, }, return, null, ;, }, }, ), ;, }, @, Override, String, toSource]
[), ;, }, }, return, null, ;, }, }, ), ;, }, @, Override, String, toSource, (, Node, n, )]
[;, }, }, ), ;, }, @, Override, String, toSource, (, Node, n, ), {, initCompilerOptionsIfTesting, (, ), ;, return]
[;, return, toSource, (, n, ,, null, ,, true, ), ;, }, private, String, toSource, (, Node, n, ,, SourceMap]
[;, }, private, String, toSource, (, Node, n, ,, SourceMap, sourceMap, ,, boolean, firstOutput, ), {, CodePrinter, ., Builder, builder]
[,, null, ,, true, ), ;, }, private, String, toSource, (, Node, n, ,, SourceMap, sourceMap, ,, boolean, firstOutput, )]
[,, true, ), ;, }, private, String, toSource, (, Node, n, ,, SourceMap, sourceMap, ,, boolean, firstOutput, ), {, CodePrinter]
[), ;, }, private, String, toSource, (, Node, n, ,, SourceMap, sourceMap, ,, boolean, firstOutput, ), {, CodePrinter, ., Builder]
[;, builder, ., setCompilerOptions, (, options, ), ;, builder, ., setSourceMap, (, sourceMap, ), ;, builder, ., setTagAsStrict, (, firstOutput]
[), ;, builder, ., setCompilerOptions, (, options, ), ;, builder, ., setSourceMap, (, sourceMap, ), ;, builder, ., setTagAsStrict, (]
[;, builder, ., setSourceMap, (, sourceMap, ), ;, builder, ., setTagAsStrict, (, firstOutput, &&, options, ., getLanguageOut, (, ), ==]
[., setCompilerOptions, (, options, ), ;, builder, ., setSourceMap, (, sourceMap, ), ;, builder, ., setTagAsStrict, (, firstOutput, &&, options]
[), ;, builder, ., setSourceMap, (, sourceMap, ), ;, builder, ., setTagAsStrict, (, firstOutput, &&, options, ., getLanguageOut, (, )]
[;, builder, ., setTagAsStrict, (, firstOutput, &&, options, ., getLanguageOut, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ), ;, return, builder]
[., setSourceMap, (, sourceMap, ), ;, builder, ., setTagAsStrict, (, firstOutput, &&, options, ., getLanguageOut, (, ), ==, LanguageMode, .]
[), ;, builder, ., setTagAsStrict, (, firstOutput, &&, options, ., getLanguageOut, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ), ;, return]
[;, return, builder, ., build, (, ), ;, }, public, static, class, CodeBuilder, {, private, final, StringBuilder, sb, =, new]
[., setTagAsStrict, (, firstOutput, &&, options, ., getLanguageOut, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ), ;, return, builder, ., build]
[), ;, return, builder, ., build, (, ), ;, }, public, static, class, CodeBuilder, {, private, final, StringBuilder, sb, =]
[&&, options, ., getLanguageOut, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ), ;, return, builder, ., build, (, ), ;, }]
[), ;, return, builder, ., build, (, ), ;, }, public, static, class, CodeBuilder, {, private, final, StringBuilder, sb, =]
[==, LanguageMode, ., ECMASCRIPT5_STRICT, ), ;, return, builder, ., build, (, ), ;, }, public, static, class, CodeBuilder, {, private]
[., getLanguageOut, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ), ;, return, builder, ., build, (, ), ;, }, public, static]
[), ;, return, builder, ., build, (, ), ;, }, public, static, class, CodeBuilder, {, private, final, StringBuilder, sb, =]
[., ECMASCRIPT5_STRICT, ), ;, return, builder, ., build, (, ), ;, }, public, static, class, CodeBuilder, {, private, final, StringBuilder]
[;, }, public, static, class, CodeBuilder, {, private, final, StringBuilder, sb, =, new, StringBuilder, (, ), ;, private, int, lineCount]
[., build, (, ), ;, }, public, static, class, CodeBuilder, {, private, final, StringBuilder, sb, =, new, StringBuilder, (, )]
[;, private, int, lineCount, =, 0, ;, private, int, colCount, =, 0, ;, void, reset, (, ), {, sb, .]
[;, private, int, colCount, =, 0, ;, void, reset, (, ), {, sb, ., setLength, (, 0, ), ;, }]
[;, void, reset, (, ), {, sb, ., setLength, (, 0, ), ;, }, CodeBuilder, append, (, String, str, )]
[;, }, CodeBuilder, append, (, String, str, ), {, sb, ., append, (, str, ), ;, int, index, =, -]
[., setLength, (, 0, ), ;, }, CodeBuilder, append, (, String, str, ), {, sb, ., append, (, str, )]
[), ;, }, CodeBuilder, append, (, String, str, ), {, sb, ., append, (, str, ), ;, int, index, =]
[;, int, index, =, -, 1, ;, int, lastIndex, =, index, ;, while, (, (, index, =, str, ., indexOf]
[., append, (, str, ), ;, int, index, =, -, 1, ;, int, lastIndex, =, index, ;, while, (, (]
[), ;, int, index, =, -, 1, ;, int, lastIndex, =, index, ;, while, (, (, index, =, str, .]
[;, int, lastIndex, =, index, ;, while, (, (, index, =, str, ., indexOf, (, '\n', ,, index, +, 1]
[;, int, lastIndex, =, index, ;, while, (, (, index, =, str, ., indexOf, (, '\n', ,, index, +, 1]
[;, while, (, (, index, =, str, ., indexOf, (, '\n', ,, index, +, 1, ), ), >=, 0, )]
[), {, ++, lineCount, ;, lastIndex, =, index, ;, }, if, (, lastIndex, ==, -, 1, ), {, colCount, +=]
[>=, 0, ), {, ++, lineCount, ;, lastIndex, =, index, ;, }, if, (, lastIndex, ==, -, 1, ), {]
[=, str, ., indexOf, (, '\n', ,, index, +, 1, ), ), >=, 0, ), {, ++, lineCount, ;, lastIndex]
[), >=, 0, ), {, ++, lineCount, ;, lastIndex, =, index, ;, }, if, (, lastIndex, ==, -, 1, )]
[., indexOf, (, '\n', ,, index, +, 1, ), ), >=, 0, ), {, ++, lineCount, ;, lastIndex, =, index]
[,, index, +, 1, ), ), >=, 0, ), {, ++, lineCount, ;, lastIndex, =, index, ;, }, if, (]
[), ), >=, 0, ), {, ++, lineCount, ;, lastIndex, =, index, ;, }, if, (, lastIndex, ==, -, 1]
[+, 1, ), ), >=, 0, ), {, ++, lineCount, ;, lastIndex, =, index, ;, }, if, (, lastIndex, ==]
[), ), >=, 0, ), {, ++, lineCount, ;, lastIndex, =, index, ;, }, if, (, lastIndex, ==, -, 1]
[), {, ++, lineCount, ;, lastIndex, =, index, ;, }, if, (, lastIndex, ==, -, 1, ), {, colCount, +=]
[;, lastIndex, =, index, ;, }, if, (, lastIndex, ==, -, 1, ), {, colCount, +=, str, ., length, (]
[;, lastIndex, =, index, ;, }, if, (, lastIndex, ==, -, 1, ), {, colCount, +=, str, ., length, (]
[=, index, ;, }, if, (, lastIndex, ==, -, 1, ), {, colCount, +=, str, ., length, (, ), ;]
[;, }, if, (, lastIndex, ==, -, 1, ), {, colCount, +=, str, ., length, (, ), ;, }, else]
[), {, colCount, +=, str, ., length, (, ), ;, }, else, {, colCount, =, str, ., length, (, )]
[==, -, 1, ), {, colCount, +=, str, ., length, (, ), ;, }, else, {, colCount, =, str, .]
[), {, colCount, +=, str, ., length, (, ), ;, }, else, {, colCount, =, str, ., length, (, )]
[), {, colCount, +=, str, ., length, (, ), ;, }, else, {, colCount, =, str, ., length, (, )]
[+=, str, ., length, (, ), ;, }, else, {, colCount, =, str, ., length, (, ), -, (, lastIndex]
[;, }, else, {, colCount, =, str, ., length, (, ), -, (, lastIndex, +, 1, ), ;, }, return]
[., length, (, ), ;, }, else, {, colCount, =, str, ., length, (, ), -, (, lastIndex, +, 1]
[=, str, ., length, (, ), -, (, lastIndex, +, 1, ), ;, }, return, this, ;, }, @, Override]
[;, }, return, this, ;, }, @, Override, public, String, toString, (, ), {, return, sb, ., toString, (, )]
[-, (, lastIndex, +, 1, ), ;, }, return, this, ;, }, @, Override, public, String, toString, (, ), {]
[., length, (, ), -, (, lastIndex, +, 1, ), ;, }, return, this, ;, }, @, Override, public, String]
[;, }, return, this, ;, }, @, Override, public, String, toString, (, ), {, return, sb, ., toString, (, )]
[), ;, }, return, this, ;, }, @, Override, public, String, toString, (, ), {, return, sb, ., toString, (]
[+, 1, ), ;, }, return, this, ;, }, @, Override, public, String, toString, (, ), {, return, sb, .]
[), ;, }, return, this, ;, }, @, Override, public, String, toString, (, ), {, return, sb, ., toString, (]
[;, }, @, Override, public, String, toString, (, ), {, return, sb, ., toString, (, ), ;, }, public, int]
[;, }, public, int, getLength, (, ), {, return, sb, ., length, (, ), ;, }, int, getLineIndex, (, )]
[., toString, (, ), ;, }, public, int, getLength, (, ), {, return, sb, ., length, (, ), ;, }]
[;, }, int, getLineIndex, (, ), {, return, lineCount, ;, }, int, getColumnIndex, (, ), {, return, colCount, ;, }]
[., length, (, ), ;, }, int, getLineIndex, (, ), {, return, lineCount, ;, }, int, getColumnIndex, (, ), {]
[;, }, int, getColumnIndex, (, ), {, return, colCount, ;, }, boolean, endsWith, (, String, suffix, ), {, return, (]
[;, }, boolean, endsWith, (, String, suffix, ), {, return, (, sb, ., length, (, ), >, suffix, ., length]
[;, }, }, public, void, optimize, (, ), {, normalize, (, ), ;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer, (, this]
[&&, suffix, ., equals, (, sb, ., substring, (, sb, ., length, (, ), -, suffix, ., length, (, )]
[), &&, suffix, ., equals, (, sb, ., substring, (, sb, ., length, (, ), -, suffix, ., length, (]
[>, suffix, ., length, (, ), ), &&, suffix, ., equals, (, sb, ., substring, (, sb, ., length, (]
[., length, (, ), >, suffix, ., length, (, ), ), &&, suffix, ., equals, (, sb, ., substring, (]
[), &&, suffix, ., equals, (, sb, ., substring, (, sb, ., length, (, ), -, suffix, ., length, (]
[., length, (, ), ), &&, suffix, ., equals, (, sb, ., substring, (, sb, ., length, (, ), -]
[;, }, }, public, void, optimize, (, ), {, normalize, (, ), ;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer, (, this]
[., equals, (, sb, ., substring, (, sb, ., length, (, ), -, suffix, ., length, (, ), ), )]
[), ;, }, }, public, void, optimize, (, ), {, normalize, (, ), ;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer, (]
[., substring, (, sb, ., length, (, ), -, suffix, ., length, (, ), ), ), ;, }, }, public]
[), ), ;, }, }, public, void, optimize, (, ), {, normalize, (, ), ;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer]
[-, suffix, ., length, (, ), ), ), ;, }, }, public, void, optimize, (, ), {, normalize, (, )]
[., length, (, ), -, suffix, ., length, (, ), ), ), ;, }, }, public, void, optimize, (, )]
[), ), ;, }, }, public, void, optimize, (, ), {, normalize, (, ), ;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer]
[., length, (, ), ), ), ;, }, }, public, void, optimize, (, ), {, normalize, (, ), ;, PhaseOptimizer]
[;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer, (, this, ,, tracker, ,, null, ), ;, if, (, options, ., devMode, ==]
[;, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;, }]
[,, tracker, ,, null, ), ;, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck]
[,, null, ), ;, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck]
[), ;, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;]
[), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;, }, phaseOptimizer, ., consume, (, getPassConfig, (, ), ., getOptimizations, (]
[==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;, }, phaseOptimizer, ., consume, (, getPassConfig, (]
[., devMode, ==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;, }, phaseOptimizer, ., consume, (]
[), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;, }, phaseOptimizer, ., consume, (, getPassConfig, (, ), ., getOptimizations, (]
[., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;, }, phaseOptimizer, ., consume, (, getPassConfig, (, ), .]
[;, }, phaseOptimizer, ., consume, (, getPassConfig, (, ), ., getOptimizations, (, ), ), ;, phaseOptimizer, ., process, (, externsRoot]
[., setSanityCheck, (, sanityCheck, ), ;, }, phaseOptimizer, ., consume, (, getPassConfig, (, ), ., getOptimizations, (, ), ), ;]
[), ;, }, phaseOptimizer, ., consume, (, getPassConfig, (, ), ., getOptimizations, (, ), ), ;, phaseOptimizer, ., process, (]
[;, phaseOptimizer, ., process, (, externsRoot, ,, jsRoot, ), ;, }, @, Override, void, setCssRenamingMap, (, CssRenamingMap, map, ), {]
[., consume, (, getPassConfig, (, ), ., getOptimizations, (, ), ), ;, phaseOptimizer, ., process, (, externsRoot, ,, jsRoot, )]
[), ;, phaseOptimizer, ., process, (, externsRoot, ,, jsRoot, ), ;, }, @, Override, void, setCssRenamingMap, (, CssRenamingMap, map, )]
[., getOptimizations, (, ), ), ;, phaseOptimizer, ., process, (, externsRoot, ,, jsRoot, ), ;, }, @, Override, void, setCssRenamingMap]
[;, }, @, Override, void, setCssRenamingMap, (, CssRenamingMap, map, ), {, options, ., cssRenamingMap, =, map, ;, }, @, Override]
[., process, (, externsRoot, ,, jsRoot, ), ;, }, @, Override, void, setCssRenamingMap, (, CssRenamingMap, map, ), {, options, .]
[,, jsRoot, ), ;, }, @, Override, void, setCssRenamingMap, (, CssRenamingMap, map, ), {, options, ., cssRenamingMap, =, map, ;]
[), ;, }, @, Override, void, setCssRenamingMap, (, CssRenamingMap, map, ), {, options, ., cssRenamingMap, =, map, ;, }, @]
[=, map, ;, }, @, Override, CssRenamingMap, getCssRenamingMap, (, ), {, return, options, ., cssRenamingMap, ;, }, public, void, processDefines]
[., cssRenamingMap, =, map, ;, }, @, Override, CssRenamingMap, getCssRenamingMap, (, ), {, return, options, ., cssRenamingMap, ;, }, public]
[;, }, @, Override, CssRenamingMap, getCssRenamingMap, (, ), {, return, options, ., cssRenamingMap, ;, }, public, void, processDefines, (, )]
[;, }, public, void, processDefines, (, ), {, (, new, DefaultPassConfig, (, options, ), ), ., processDefines, ., create, (]
[., cssRenamingMap, ;, }, public, void, processDefines, (, ), {, (, new, DefaultPassConfig, (, options, ), ), ., processDefines, .]
[;, }, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC, ||, options, ., propertyRenaming, ==]
[., process, (, externsRoot, ,, jsRoot, ), ;, }, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==, PropertyRenamingPolicy]
[., create, (, this, ), ., process, (, externsRoot, ,, jsRoot, ), ;, }, boolean, isInliningForbidden, (, ), {, return]
[., processDefines, ., create, (, this, ), ., process, (, externsRoot, ,, jsRoot, ), ;, }, boolean, isInliningForbidden, (, )]
[), ., processDefines, ., create, (, this, ), ., process, (, externsRoot, ,, jsRoot, ), ;, }, boolean, isInliningForbidden, (]
[), ), ., processDefines, ., create, (, this, ), ., process, (, externsRoot, ,, jsRoot, ), ;, }, boolean, isInliningForbidden]
[), ., process, (, externsRoot, ,, jsRoot, ), ;, }, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==]
[,, jsRoot, ), ;, }, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC, ||, options]
[), ;, }, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC, ||, options, ., propertyRenaming]
[;, }, ControlFlowGraph, <, Node, >, computeCFG, (, ), {, logger, ., fine, (, "Computing Control Flow Graph", ), ;, Tracer, tracer, =]
[||, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ;, }, ControlFlowGraph, <, Node, >, computeCFG, (, ), {, logger, .]
[==, PropertyRenamingPolicy, ., HEURISTIC, ||, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ;, }, ControlFlowGraph, <, Node, >, computeCFG, (]
[., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC, ||, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ;, }, ControlFlowGraph, <, Node, >]
[||, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ;, }, ControlFlowGraph, <, Node, >, computeCFG, (, ), {, logger, .]
[., HEURISTIC, ||, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ;, }, ControlFlowGraph, <, Node, >, computeCFG, (, ), {]
[;, }, ControlFlowGraph, <, Node, >, computeCFG, (, ), {, logger, ., fine, (, "Computing Control Flow Graph", ), ;, Tracer, tracer, =]
[==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ;, }, ControlFlowGraph, <, Node, >, computeCFG, (, ), {, logger, ., fine, (, "Computing Control Flow Graph", )]
[., propertyRenaming, ==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ;, }, ControlFlowGraph, <, Node, >, computeCFG, (, ), {, logger, ., fine, (]
[;, }, ControlFlowGraph, <, Node, >, computeCFG, (, ), {, logger, ., fine, (, "Computing Control Flow Graph", ), ;, Tracer, tracer, =]
[., AGGRESSIVE_HEURISTIC, ;, }, ControlFlowGraph, <, Node, >, computeCFG, (, ), {, logger, ., fine, (, "Computing Control Flow Graph", ), ;, Tracer]
[;, Tracer, tracer, =, newTracer, (, "computeCFG", ), ;, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, this, ,, true, ,, false]
[., fine, (, "Computing Control Flow Graph", ), ;, Tracer, tracer, =, newTracer, (, "computeCFG", ), ;, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (]
[), ;, Tracer, tracer, =, newTracer, (, "computeCFG", ), ;, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, this, ,, true, ,]
[;, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, this, ,, true, ,, false, ), ;, process, (, cfa, ), ;, stopTracer]
[), ;, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, this, ,, true, ,, false, ), ;, process, (, cfa, ), ;]
[;, process, (, cfa, ), ;, stopTracer, (, tracer, ,, "computeCFG", ), ;, return, cfa, ., getCfg, (, ), ;]
[,, true, ,, false, ), ;, process, (, cfa, ), ;, stopTracer, (, tracer, ,, "computeCFG", ), ;, return, cfa]
[,, false, ), ;, process, (, cfa, ), ;, stopTracer, (, tracer, ,, "computeCFG", ), ;, return, cfa, ., getCfg]
[), ;, process, (, cfa, ), ;, stopTracer, (, tracer, ,, "computeCFG", ), ;, return, cfa, ., getCfg, (, )]
[;, stopTracer, (, tracer, ,, "computeCFG", ), ;, return, cfa, ., getCfg, (, ), ;, }, public, void, normalize, (]
[), ;, stopTracer, (, tracer, ,, "computeCFG", ), ;, return, cfa, ., getCfg, (, ), ;, }, public, void, normalize]
[;, return, cfa, ., getCfg, (, ), ;, }, public, void, normalize, (, ), {, logger, ., fine, (, "Normalizing"]
[,, "computeCFG", ), ;, return, cfa, ., getCfg, (, ), ;, }, public, void, normalize, (, ), {, logger, .]
[), ;, return, cfa, ., getCfg, (, ), ;, }, public, void, normalize, (, ), {, logger, ., fine, (]
[;, }, public, void, normalize, (, ), {, logger, ., fine, (, "Normalizing", ), ;, startPass, (, "normalize", ), ;]
[., getCfg, (, ), ;, }, public, void, normalize, (, ), {, logger, ., fine, (, "Normalizing", ), ;, startPass]
[;, startPass, (, "normalize", ), ;, process, (, new, Normalize, (, this, ,, false, ), ), ;, endPass, (, )]
[., fine, (, "Normalizing", ), ;, startPass, (, "normalize", ), ;, process, (, new, Normalize, (, this, ,, false, )]
[), ;, startPass, (, "normalize", ), ;, process, (, new, Normalize, (, this, ,, false, ), ), ;, endPass, (]
[;, process, (, new, Normalize, (, this, ,, false, ), ), ;, endPass, (, ), ;, }, @, Override, void]
[), ;, process, (, new, Normalize, (, this, ,, false, ), ), ;, endPass, (, ), ;, }, @, Override]
[;, endPass, (, ), ;, }, @, Override, void, prepareAst, (, Node, root, ), {, CompilerPass, pass, =, new, PrepareAst]
[), ;, endPass, (, ), ;, }, @, Override, void, prepareAst, (, Node, root, ), {, CompilerPass, pass, =, new]
[,, false, ), ), ;, endPass, (, ), ;, }, @, Override, void, prepareAst, (, Node, root, ), {, CompilerPass]
[), ), ;, endPass, (, ), ;, }, @, Override, void, prepareAst, (, Node, root, ), {, CompilerPass, pass, =]
[;, }, @, Override, void, prepareAst, (, Node, root, ), {, CompilerPass, pass, =, new, PrepareAst, (, this, ), ;]
[;, pass, ., process, (, null, ,, root, ), ;, }, void, recordFunctionInformation, (, ), {, logger, ., fine, (]
[), ;, pass, ., process, (, null, ,, root, ), ;, }, void, recordFunctionInformation, (, ), {, logger, ., fine]
[;, }, void, recordFunctionInformation, (, ), {, logger, ., fine, (, "Recording function information", ), ;, startPass, (, "recordFunctionInformation", ), ;, RecordFunctionInformation]
[., process, (, null, ,, root, ), ;, }, void, recordFunctionInformation, (, ), {, logger, ., fine, (, "Recording function information", )]
[,, root, ), ;, }, void, recordFunctionInformation, (, ), {, logger, ., fine, (, "Recording function information", ), ;, startPass, (, "recordFunctionInformation"]
[), ;, }, void, recordFunctionInformation, (, ), {, logger, ., fine, (, "Recording function information", ), ;, startPass, (, "recordFunctionInformation", ), ;]
[;, startPass, (, "recordFunctionInformation", ), ;, RecordFunctionInformation, recordFunctionInfoPass, =, new, RecordFunctionInformation, (, this, ,, getPassConfig, (, ), ., getIntermediateState, (]
[., fine, (, "Recording function information", ), ;, startPass, (, "recordFunctionInformation", ), ;, RecordFunctionInformation, recordFunctionInfoPass, =, new, RecordFunctionInformation, (, this, ,, getPassConfig]
[), ;, startPass, (, "recordFunctionInformation", ), ;, RecordFunctionInformation, recordFunctionInfoPass, =, new, RecordFunctionInformation, (, this, ,, getPassConfig, (, ), ., getIntermediateState]
[;, RecordFunctionInformation, recordFunctionInfoPass, =, new, RecordFunctionInformation, (, this, ,, getPassConfig, (, ), ., getIntermediateState, (, ), ., functionNames, ), ;]
[), ;, RecordFunctionInformation, recordFunctionInfoPass, =, new, RecordFunctionInformation, (, this, ,, getPassConfig, (, ), ., getIntermediateState, (, ), ., functionNames, )]
[;, process, (, recordFunctionInfoPass, ), ;, functionInformationMap, =, recordFunctionInfoPass, ., getMap, (, ), ;, endPass, (, ), ;, }, protected]
[,, getPassConfig, (, ), ., getIntermediateState, (, ), ., functionNames, ), ;, process, (, recordFunctionInfoPass, ), ;, functionInformationMap, =, recordFunctionInfoPass]
[), ;, process, (, recordFunctionInfoPass, ), ;, functionInformationMap, =, recordFunctionInfoPass, ., getMap, (, ), ;, endPass, (, ), ;, }]
[., functionNames, ), ;, process, (, recordFunctionInfoPass, ), ;, functionInformationMap, =, recordFunctionInfoPass, ., getMap, (, ), ;, endPass, (, )]
[., getIntermediateState, (, ), ., functionNames, ), ;, process, (, recordFunctionInfoPass, ), ;, functionInformationMap, =, recordFunctionInfoPass, ., getMap, (, )]
[;, functionInformationMap, =, recordFunctionInfoPass, ., getMap, (, ), ;, endPass, (, ), ;, }, protected, final, CodeChangeHandler, ., RecentChange, recentChange]
[), ;, functionInformationMap, =, recordFunctionInfoPass, ., getMap, (, ), ;, endPass, (, ), ;, }, protected, final, CodeChangeHandler, ., RecentChange]
[=, recordFunctionInfoPass, ., getMap, (, ), ;, endPass, (, ), ;, }, protected, final, CodeChangeHandler, ., RecentChange, recentChange, =, new]
[;, endPass, (, ), ;, }, protected, final, CodeChangeHandler, ., RecentChange, recentChange, =, new, CodeChangeHandler, ., RecentChange, (, ), ;]
[., getMap, (, ), ;, endPass, (, ), ;, }, protected, final, CodeChangeHandler, ., RecentChange, recentChange, =, new, CodeChangeHandler, .]
[;, }, protected, final, CodeChangeHandler, ., RecentChange, recentChange, =, new, CodeChangeHandler, ., RecentChange, (, ), ;, private, final, List, <]
[;, private, final, List, <, CodeChangeHandler, >, codeChangeHandlers, =, Lists, ., <, CodeChangeHandler, >, newArrayList, (, ), ;, static, final]
[;, static, final, String, SYNTHETIC_EXTERNS, =, "{SyntheticVarsDeclar}", ;, private, CompilerInput, synthesizedExternsInput, =, null, ;, @, Override, void, addChangeHandler, (, CodeChangeHandler]
[., <, CodeChangeHandler, >, newArrayList, (, ), ;, static, final, String, SYNTHETIC_EXTERNS, =, "{SyntheticVarsDeclar}", ;, private, CompilerInput, synthesizedExternsInput, =, null]
[;, private, CompilerInput, synthesizedExternsInput, =, null, ;, @, Override, void, addChangeHandler, (, CodeChangeHandler, handler, ), {, codeChangeHandlers, ., add, (]
[;, @, Override, void, addChangeHandler, (, CodeChangeHandler, handler, ), {, codeChangeHandlers, ., add, (, handler, ), ;, }, @, Override]
[;, }, @, Override, void, removeChangeHandler, (, CodeChangeHandler, handler, ), {, codeChangeHandlers, ., remove, (, handler, ), ;, }, @]
[., add, (, handler, ), ;, }, @, Override, void, removeChangeHandler, (, CodeChangeHandler, handler, ), {, codeChangeHandlers, ., remove, (]
[), ;, }, @, Override, void, removeChangeHandler, (, CodeChangeHandler, handler, ), {, codeChangeHandlers, ., remove, (, handler, ), ;, }]
[;, }, @, Override, public, void, reportCodeChange, (, ), {, for, (, CodeChangeHandler, handler, :, codeChangeHandlers, ), {, handler, .]
[., remove, (, handler, ), ;, }, @, Override, public, void, reportCodeChange, (, ), {, for, (, CodeChangeHandler, handler, :]
[), ;, }, @, Override, public, void, reportCodeChange, (, ), {, for, (, CodeChangeHandler, handler, :, codeChangeHandlers, ), {, handler]
[), {, handler, ., reportChange, (, ), ;, }, }, @, Override, public, CodingConvention, getCodingConvention, (, ), {, CodingConvention, convention]
[;, }, }, @, Override, public, CodingConvention, getCodingConvention, (, ), {, CodingConvention, convention, =, options, ., getCodingConvention, (, ), ;]
[., reportChange, (, ), ;, }, }, @, Override, public, CodingConvention, getCodingConvention, (, ), {, CodingConvention, convention, =, options, .]
[;, convention, =, convention, !=, null, ?, convention, :, defaultCodingConvention, ;, return, convention, ;, }, @, Override, public, boolean, isIdeMode]
[., getCodingConvention, (, ), ;, convention, =, convention, !=, null, ?, convention, :, defaultCodingConvention, ;, return, convention, ;, }, @]
[=, convention, !=, null, ?, convention, :, defaultCodingConvention, ;, return, convention, ;, }, @, Override, public, boolean, isIdeMode, (, )]
[;, return, convention, ;, }, @, Override, public, boolean, isIdeMode, (, ), {, return, options, ., ideMode, ;, }, @]
[?, convention, :, defaultCodingConvention, ;, return, convention, ;, }, @, Override, public, boolean, isIdeMode, (, ), {, return, options, .]
[!=, null, ?, convention, :, defaultCodingConvention, ;, return, convention, ;, }, @, Override, public, boolean, isIdeMode, (, ), {, return]
[?, convention, :, defaultCodingConvention, ;, return, convention, ;, }, @, Override, public, boolean, isIdeMode, (, ), {, return, options, .]
[:, defaultCodingConvention, ;, return, convention, ;, }, @, Override, public, boolean, isIdeMode, (, ), {, return, options, ., ideMode, ;]
[;, return, convention, ;, }, @, Override, public, boolean, isIdeMode, (, ), {, return, options, ., ideMode, ;, }, @]
[;, }, @, Override, public, boolean, isIdeMode, (, ), {, return, options, ., ideMode, ;, }, @, Override, public, boolean]
[;, }, @, Override, public, boolean, acceptEcmaScript5, (, ), {, switch, (, options, ., getLanguageIn, (, ), ), {, case]
[., ideMode, ;, }, @, Override, public, boolean, acceptEcmaScript5, (, ), {, switch, (, options, ., getLanguageIn, (, ), )]
[), {, case, ECMASCRIPT5, :, case, ECMASCRIPT5_STRICT, :, return, true, ;, case, ECMASCRIPT3, :, return, false, ;, }, throw, new]
[., getLanguageIn, (, ), ), {, case, ECMASCRIPT5, :, case, ECMASCRIPT5_STRICT, :, return, true, ;, case, ECMASCRIPT3, :, return, false]
[:, case, ECMASCRIPT5_STRICT, :, return, true, ;, case, ECMASCRIPT3, :, return, false, ;, }, throw, new, IllegalStateException, (, "unexpected language mode", )]
[:, return, true, ;, case, ECMASCRIPT3, :, return, false, ;, }, throw, new, IllegalStateException, (, "unexpected language mode", ), ;, }, public]
[;, case, ECMASCRIPT3, :, return, false, ;, }, throw, new, IllegalStateException, (, "unexpected language mode", ), ;, }, public, LanguageMode, languageMode, (]
[:, return, false, ;, }, throw, new, IllegalStateException, (, "unexpected language mode", ), ;, }, public, LanguageMode, languageMode, (, ), {, return]
[;, }, throw, new, IllegalStateException, (, "unexpected language mode", ), ;, }, public, LanguageMode, languageMode, (, ), {, return, options, ., getLanguageIn]
[;, }, public, LanguageMode, languageMode, (, ), {, return, options, ., getLanguageIn, (, ), ;, }, @, Override, public, boolean]
[), ;, }, public, LanguageMode, languageMode, (, ), {, return, options, ., getLanguageIn, (, ), ;, }, @, Override, public]
[;, }, @, Override, public, boolean, acceptConstKeyword, (, ), {, return, options, ., acceptConstKeyword, ;, }, @, Override, Config, getParserConfig]
[., getLanguageIn, (, ), ;, }, @, Override, public, boolean, acceptConstKeyword, (, ), {, return, options, ., acceptConstKeyword, ;, }]
[;, }, @, Override, Config, getParserConfig, (, ), {, if, (, parserConfig, ==, null, ), {, Config, ., LanguageMode, mode]
[., acceptConstKeyword, ;, }, @, Override, Config, getParserConfig, (, ), {, if, (, parserConfig, ==, null, ), {, Config, .]
[), {, Config, ., LanguageMode, mode, ;, switch, (, options, ., getLanguageIn, (, ), ), {, case, ECMASCRIPT3, :, mode]
[==, null, ), {, Config, ., LanguageMode, mode, ;, switch, (, options, ., getLanguageIn, (, ), ), {, case, ECMASCRIPT3]
[), {, Config, ., LanguageMode, mode, ;, switch, (, options, ., getLanguageIn, (, ), ), {, case, ECMASCRIPT3, :, mode]
[), {, case, ECMASCRIPT3, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT3, ;, break, ;, case, ECMASCRIPT5, :, mode, =]
[., getLanguageIn, (, ), ), {, case, ECMASCRIPT3, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT3, ;, break, ;, case]
[:, mode, =, Config, ., LanguageMode, ., ECMASCRIPT3, ;, break, ;, case, ECMASCRIPT5, :, mode, =, Config, ., LanguageMode, .]
[=, Config, ., LanguageMode, ., ECMASCRIPT3, ;, break, ;, case, ECMASCRIPT5, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT5, ;]
[;, break, ;, case, ECMASCRIPT5, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT5, ;, break, ;, case, ECMASCRIPT5_STRICT, :, mode]
[., ECMASCRIPT3, ;, break, ;, case, ECMASCRIPT5, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT5, ;, break, ;, case, ECMASCRIPT5_STRICT]
[., LanguageMode, ., ECMASCRIPT3, ;, break, ;, case, ECMASCRIPT5, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT5, ;, break, ;]
[:, mode, =, Config, ., LanguageMode, ., ECMASCRIPT5, ;, break, ;, case, ECMASCRIPT5_STRICT, :, mode, =, Config, ., LanguageMode, .]
[=, Config, ., LanguageMode, ., ECMASCRIPT5, ;, break, ;, case, ECMASCRIPT5_STRICT, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT5_STRICT, ;]
[;, break, ;, case, ECMASCRIPT5_STRICT, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT5_STRICT, ;, break, ;, default, :, throw, new]
[., ECMASCRIPT5, ;, break, ;, case, ECMASCRIPT5_STRICT, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT5_STRICT, ;, break, ;, default, :]
[., LanguageMode, ., ECMASCRIPT5, ;, break, ;, case, ECMASCRIPT5_STRICT, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT5_STRICT, ;, break, ;]
[:, mode, =, Config, ., LanguageMode, ., ECMASCRIPT5_STRICT, ;, break, ;, default, :, throw, new, IllegalStateException, (, "unexpected language mode", ), ;]
[=, Config, ., LanguageMode, ., ECMASCRIPT5_STRICT, ;, break, ;, default, :, throw, new, IllegalStateException, (, "unexpected language mode", ), ;, }, parserConfig]
[;, break, ;, default, :, throw, new, IllegalStateException, (, "unexpected language mode", ), ;, }, parserConfig, =, ParserRunner, ., createConfig, (, isIdeMode]
[., ECMASCRIPT5_STRICT, ;, break, ;, default, :, throw, new, IllegalStateException, (, "unexpected language mode", ), ;, }, parserConfig, =, ParserRunner, ., createConfig]
[., LanguageMode, ., ECMASCRIPT5_STRICT, ;, break, ;, default, :, throw, new, IllegalStateException, (, "unexpected language mode", ), ;, }, parserConfig, =, ParserRunner]
[;, }, parserConfig, =, ParserRunner, ., createConfig, (, isIdeMode, (, ), ,, mode, ,, acceptConstKeyword, (, ), ,, options, .]
[), ;, }, parserConfig, =, ParserRunner, ., createConfig, (, isIdeMode, (, ), ,, mode, ,, acceptConstKeyword, (, ), ,, options]
[=, ParserRunner, ., createConfig, (, isIdeMode, (, ), ,, mode, ,, acceptConstKeyword, (, ), ,, options, ., extraAnnotationNames, ), ;]
[;, }, return, parserConfig, ;, }, @, Override, public, boolean, isTypeCheckingEnabled, (, ), {, return, options, ., checkTypes, ;, }]
[., createConfig, (, isIdeMode, (, ), ,, mode, ,, acceptConstKeyword, (, ), ,, options, ., extraAnnotationNames, ), ;, }, return]
[,, mode, ,, acceptConstKeyword, (, ), ,, options, ., extraAnnotationNames, ), ;, }, return, parserConfig, ;, }, @, Override, public]
[,, acceptConstKeyword, (, ), ,, options, ., extraAnnotationNames, ), ;, }, return, parserConfig, ;, }, @, Override, public, boolean, isTypeCheckingEnabled]
[,, options, ., extraAnnotationNames, ), ;, }, return, parserConfig, ;, }, @, Override, public, boolean, isTypeCheckingEnabled, (, ), {, return]
[), ;, }, return, parserConfig, ;, }, @, Override, public, boolean, isTypeCheckingEnabled, (, ), {, return, options, ., checkTypes, ;]
[., extraAnnotationNames, ), ;, }, return, parserConfig, ;, }, @, Override, public, boolean, isTypeCheckingEnabled, (, ), {, return, options, .]
[;, }, @, Override, public, boolean, isTypeCheckingEnabled, (, ), {, return, options, ., checkTypes, ;, }, protected, DiagnosticGroups, getDiagnosticGroups, (]
[;, }, protected, DiagnosticGroups, getDiagnosticGroups, (, ), {, return, new, DiagnosticGroups, (, ), ;, }, @, Override, public, void, report]
[., checkTypes, ;, }, protected, DiagnosticGroups, getDiagnosticGroups, (, ), {, return, new, DiagnosticGroups, (, ), ;, }, @, Override, public]
[;, }, @, Override, public, void, report, (, JSError, error, ), {, CheckLevel, level, =, error, ., getDefaultLevel, (, )]
[;, if, (, warningsGuard, !=, null, ), {, CheckLevel, newLevel, =, warningsGuard, ., level, (, error, ), ;, if, (]
[., getDefaultLevel, (, ), ;, if, (, warningsGuard, !=, null, ), {, CheckLevel, newLevel, =, warningsGuard, ., level, (, error]
[), {, CheckLevel, newLevel, =, warningsGuard, ., level, (, error, ), ;, if, (, newLevel, !=, null, ), {, level]
[!=, null, ), {, CheckLevel, newLevel, =, warningsGuard, ., level, (, error, ), ;, if, (, newLevel, !=, null, )]
[), {, CheckLevel, newLevel, =, warningsGuard, ., level, (, error, ), ;, if, (, newLevel, !=, null, ), {, level]
[;, if, (, newLevel, !=, null, ), {, level, =, newLevel, ;, }, }, if, (, level, ., isOn, (]
[., level, (, error, ), ;, if, (, newLevel, !=, null, ), {, level, =, newLevel, ;, }, }, if]
[), ;, if, (, newLevel, !=, null, ), {, level, =, newLevel, ;, }, }, if, (, level, ., isOn]
[), {, level, =, newLevel, ;, }, }, if, (, level, ., isOn, (, ), ), {, if, (, getOptions]
[!=, null, ), {, level, =, newLevel, ;, }, }, if, (, level, ., isOn, (, ), ), {, if]
[), {, level, =, newLevel, ;, }, }, if, (, level, ., isOn, (, ), ), {, if, (, getOptions]
[=, newLevel, ;, }, }, if, (, level, ., isOn, (, ), ), {, if, (, getOptions, (, ), .]
[;, }, }, if, (, level, ., isOn, (, ), ), {, if, (, getOptions, (, ), ., errorHandler, !=]
[), {, if, (, getOptions, (, ), ., errorHandler, !=, null, ), {, getOptions, (, ), ., errorHandler, ., report]
[., isOn, (, ), ), {, if, (, getOptions, (, ), ., errorHandler, !=, null, ), {, getOptions, (, )]
[), {, getOptions, (, ), ., errorHandler, ., report, (, level, ,, error, ), ;, }, errorManager, ., report, (]
[!=, null, ), {, getOptions, (, ), ., errorHandler, ., report, (, level, ,, error, ), ;, }, errorManager, .]
[., errorHandler, !=, null, ), {, getOptions, (, ), ., errorHandler, ., report, (, level, ,, error, ), ;, }]
[), {, getOptions, (, ), ., errorHandler, ., report, (, level, ,, error, ), ;, }, errorManager, ., report, (]
[;, }, errorManager, ., report, (, level, ,, error, ), ;, }, }, @, Override, public, CheckLevel, getErrorLevel, (, JSError]
[., report, (, level, ,, error, ), ;, }, errorManager, ., report, (, level, ,, error, ), ;, }, }]
[., errorHandler, ., report, (, level, ,, error, ), ;, }, errorManager, ., report, (, level, ,, error, ), ;]
[,, error, ), ;, }, errorManager, ., report, (, level, ,, error, ), ;, }, }, @, Override, public, CheckLevel]
[), ;, }, errorManager, ., report, (, level, ,, error, ), ;, }, }, @, Override, public, CheckLevel, getErrorLevel, (]
[;, }, }, @, Override, public, CheckLevel, getErrorLevel, (, JSError, error, ), {, Preconditions, ., checkNotNull, (, options, ), ;]
[., report, (, level, ,, error, ), ;, }, }, @, Override, public, CheckLevel, getErrorLevel, (, JSError, error, ), {]
[,, error, ), ;, }, }, @, Override, public, CheckLevel, getErrorLevel, (, JSError, error, ), {, Preconditions, ., checkNotNull, (]
[), ;, }, }, @, Override, public, CheckLevel, getErrorLevel, (, JSError, error, ), {, Preconditions, ., checkNotNull, (, options, )]
[;, return, warningsGuard, ., level, (, error, ), ;, }, @, Override, void, throwInternalError, (, String, message, ,, Exception, cause]
[., checkNotNull, (, options, ), ;, return, warningsGuard, ., level, (, error, ), ;, }, @, Override, void, throwInternalError, (]
[), ;, return, warningsGuard, ., level, (, error, ), ;, }, @, Override, void, throwInternalError, (, String, message, ,, Exception]
[;, }, @, Override, void, throwInternalError, (, String, message, ,, Exception, cause, ), {, String, finalMessage, =, "INTERNAL COMPILER ERROR.\n", +, "Please report this problem.\n"]
[., level, (, error, ), ;, }, @, Override, void, throwInternalError, (, String, message, ,, Exception, cause, ), {, String]
[), ;, }, @, Override, void, throwInternalError, (, String, message, ,, Exception, cause, ), {, String, finalMessage, =, "INTERNAL COMPILER ERROR.\n", +]
[;, RuntimeException, e, =, new, RuntimeException, (, finalMessage, ,, cause, ), ;, if, (, cause, !=, null, ), {, e]
[+, message, ;, RuntimeException, e, =, new, RuntimeException, (, finalMessage, ,, cause, ), ;, if, (, cause, !=, null, )]
[+, "Please report this problem.\n", +, message, ;, RuntimeException, e, =, new, RuntimeException, (, finalMessage, ,, cause, ), ;, if, (, cause, !=]
[+, message, ;, RuntimeException, e, =, new, RuntimeException, (, finalMessage, ,, cause, ), ;, if, (, cause, !=, null, )]
[;, RuntimeException, e, =, new, RuntimeException, (, finalMessage, ,, cause, ), ;, if, (, cause, !=, null, ), {, e]
[;, if, (, cause, !=, null, ), {, e, ., setStackTrace, (, cause, ., getStackTrace, (, ), ), ;, }]
[,, cause, ), ;, if, (, cause, !=, null, ), {, e, ., setStackTrace, (, cause, ., getStackTrace, (, )]
[), ;, if, (, cause, !=, null, ), {, e, ., setStackTrace, (, cause, ., getStackTrace, (, ), ), ;]
[), {, e, ., setStackTrace, (, cause, ., getStackTrace, (, ), ), ;, }, throw, e, ;, }, public, int]
[!=, null, ), {, e, ., setStackTrace, (, cause, ., getStackTrace, (, ), ), ;, }, throw, e, ;, }]
[), {, e, ., setStackTrace, (, cause, ., getStackTrace, (, ), ), ;, }, throw, e, ;, }, public, int]
[;, }, throw, e, ;, }, public, int, getErrorCount, (, ), {, return, errorManager, ., getErrorCount, (, ), ;, }]
[., setStackTrace, (, cause, ., getStackTrace, (, ), ), ;, }, throw, e, ;, }, public, int, getErrorCount, (, )]
[), ;, }, throw, e, ;, }, public, int, getErrorCount, (, ), {, return, errorManager, ., getErrorCount, (, ), ;]
[., getStackTrace, (, ), ), ;, }, throw, e, ;, }, public, int, getErrorCount, (, ), {, return, errorManager, .]
[;, }, public, int, getErrorCount, (, ), {, return, errorManager, ., getErrorCount, (, ), ;, }, public, int, getWarningCount, (]
[;, }, public, int, getWarningCount, (, ), {, return, errorManager, ., getWarningCount, (, ), ;, }, @, Override, boolean, hasHaltingErrors]
[., getErrorCount, (, ), ;, }, public, int, getWarningCount, (, ), {, return, errorManager, ., getWarningCount, (, ), ;, }]
[;, }, @, Override, boolean, hasHaltingErrors, (, ), {, return, !, isIdeMode, (, ), &&, getErrorCount, (, ), >, 0]
[., getWarningCount, (, ), ;, }, @, Override, boolean, hasHaltingErrors, (, ), {, return, !, isIdeMode, (, ), &&, getErrorCount]
[;, }, public, boolean, hasErrors, (, ), {, return, hasHaltingErrors, (, ), ;, }, @, Override, void, addToDebugLog, (, String]
[&&, getErrorCount, (, ), >, 0, ;, }, public, boolean, hasErrors, (, ), {, return, hasHaltingErrors, (, ), ;, }]
[&&, getErrorCount, (, ), >, 0, ;, }, public, boolean, hasErrors, (, ), {, return, hasHaltingErrors, (, ), ;, }]
[;, }, public, boolean, hasErrors, (, ), {, return, hasHaltingErrors, (, ), ;, }, @, Override, void, addToDebugLog, (, String]
[>, 0, ;, }, public, boolean, hasErrors, (, ), {, return, hasHaltingErrors, (, ), ;, }, @, Override, void, addToDebugLog]
[;, }, public, boolean, hasErrors, (, ), {, return, hasHaltingErrors, (, ), ;, }, @, Override, void, addToDebugLog, (, String]
[;, }, @, Override, void, addToDebugLog, (, String, str, ), {, debugLog, ., append, (, str, ), ;, debugLog, .]
[;, debugLog, ., append, (, '\n', ), ;, logger, ., fine, (, str, ), ;, }, @, Override, SourceFile, getSourceFileByName]
[., append, (, str, ), ;, debugLog, ., append, (, '\n', ), ;, logger, ., fine, (, str, ), ;]
[), ;, debugLog, ., append, (, '\n', ), ;, logger, ., fine, (, str, ), ;, }, @, Override, SourceFile]
[;, logger, ., fine, (, str, ), ;, }, @, Override, SourceFile, getSourceFileByName, (, String, sourceName, ), {, if, (]
[., append, (, '\n', ), ;, logger, ., fine, (, str, ), ;, }, @, Override, SourceFile, getSourceFileByName, (, String]
[), ;, logger, ., fine, (, str, ), ;, }, @, Override, SourceFile, getSourceFileByName, (, String, sourceName, ), {, if]
[;, }, @, Override, SourceFile, getSourceFileByName, (, String, sourceName, ), {, if, (, sourceName, !=, null, ), {, CompilerInput, input]
[., fine, (, str, ), ;, }, @, Override, SourceFile, getSourceFileByName, (, String, sourceName, ), {, if, (, sourceName, !=]
[), ;, }, @, Override, SourceFile, getSourceFileByName, (, String, sourceName, ), {, if, (, sourceName, !=, null, ), {, CompilerInput]
[), {, CompilerInput, input, =, inputsById, ., get, (, new, InputId, (, sourceName, ), ), ;, if, (, input, !=]
[!=, null, ), {, CompilerInput, input, =, inputsById, ., get, (, new, InputId, (, sourceName, ), ), ;, if, (]
[), {, CompilerInput, input, =, inputsById, ., get, (, new, InputId, (, sourceName, ), ), ;, if, (, input, !=]
[;, if, (, input, !=, null, ), {, return, input, ., getSourceFile, (, ), ;, }, }, return, null, ;]
[., get, (, new, InputId, (, sourceName, ), ), ;, if, (, input, !=, null, ), {, return, input, .]
[), ;, if, (, input, !=, null, ), {, return, input, ., getSourceFile, (, ), ;, }, }, return, null]
[), ), ;, if, (, input, !=, null, ), {, return, input, ., getSourceFile, (, ), ;, }, }, return]
[), {, return, input, ., getSourceFile, (, ), ;, }, }, return, null, ;, }, @, Override, public, String, getSourceLine]
[!=, null, ), {, return, input, ., getSourceFile, (, ), ;, }, }, return, null, ;, }, @, Override, public]
[), {, return, input, ., getSourceFile, (, ), ;, }, }, return, null, ;, }, @, Override, public, String, getSourceLine]
[;, }, }, return, null, ;, }, @, Override, public, String, getSourceLine, (, String, sourceName, ,, int, lineNumber, ), {]
[., getSourceFile, (, ), ;, }, }, return, null, ;, }, @, Override, public, String, getSourceLine, (, String, sourceName, ,]
[;, }, @, Override, public, String, getSourceLine, (, String, sourceName, ,, int, lineNumber, ), {, if, (, lineNumber, <, 1]
[), {, return, null, ;, }, SourceFile, input, =, getSourceFileByName, (, sourceName, ), ;, if, (, input, !=, null, )]
[<, 1, ), {, return, null, ;, }, SourceFile, input, =, getSourceFileByName, (, sourceName, ), ;, if, (, input, !=]
[), {, return, null, ;, }, SourceFile, input, =, getSourceFileByName, (, sourceName, ), ;, if, (, input, !=, null, )]
[;, }, SourceFile, input, =, getSourceFileByName, (, sourceName, ), ;, if, (, input, !=, null, ), {, return, input, .]
[;, if, (, input, !=, null, ), {, return, input, ., getLine, (, lineNumber, ), ;, }, return, null, ;]
[), ;, if, (, input, !=, null, ), {, return, input, ., getLine, (, lineNumber, ), ;, }, return, null]
[), {, return, input, ., getLine, (, lineNumber, ), ;, }, return, null, ;, }, @, Override, public, Region, getSourceRegion]
[!=, null, ), {, return, input, ., getLine, (, lineNumber, ), ;, }, return, null, ;, }, @, Override, public]
[), {, return, input, ., getLine, (, lineNumber, ), ;, }, return, null, ;, }, @, Override, public, Region, getSourceRegion]
[;, }, return, null, ;, }, @, Override, public, Region, getSourceRegion, (, String, sourceName, ,, int, lineNumber, ), {, if]
[., getLine, (, lineNumber, ), ;, }, return, null, ;, }, @, Override, public, Region, getSourceRegion, (, String, sourceName, ,]
[), ;, }, return, null, ;, }, @, Override, public, Region, getSourceRegion, (, String, sourceName, ,, int, lineNumber, ), {]
[;, }, @, Override, public, Region, getSourceRegion, (, String, sourceName, ,, int, lineNumber, ), {, if, (, lineNumber, <, 1]
[), {, return, null, ;, }, SourceFile, input, =, getSourceFileByName, (, sourceName, ), ;, if, (, input, !=, null, )]
[<, 1, ), {, return, null, ;, }, SourceFile, input, =, getSourceFileByName, (, sourceName, ), ;, if, (, input, !=]
[), {, return, null, ;, }, SourceFile, input, =, getSourceFileByName, (, sourceName, ), ;, if, (, input, !=, null, )]
[;, }, SourceFile, input, =, getSourceFileByName, (, sourceName, ), ;, if, (, input, !=, null, ), {, return, input, .]
[;, if, (, input, !=, null, ), {, return, input, ., getRegion, (, lineNumber, ), ;, }, return, null, ;]
[), ;, if, (, input, !=, null, ), {, return, input, ., getRegion, (, lineNumber, ), ;, }, return, null]
[), {, return, input, ., getRegion, (, lineNumber, ), ;, }, return, null, ;, }, @, Override, Node, getNodeForCodeInsertion, (]
[!=, null, ), {, return, input, ., getRegion, (, lineNumber, ), ;, }, return, null, ;, }, @, Override, Node]
[), {, return, input, ., getRegion, (, lineNumber, ), ;, }, return, null, ;, }, @, Override, Node, getNodeForCodeInsertion, (]
[;, }, return, null, ;, }, @, Override, Node, getNodeForCodeInsertion, (, JSModule, module, ), {, if, (, module, ==, null]
[., getRegion, (, lineNumber, ), ;, }, return, null, ;, }, @, Override, Node, getNodeForCodeInsertion, (, JSModule, module, ), {]
[), ;, }, return, null, ;, }, @, Override, Node, getNodeForCodeInsertion, (, JSModule, module, ), {, if, (, module, ==]
[;, }, @, Override, Node, getNodeForCodeInsertion, (, JSModule, module, ), {, if, (, module, ==, null, ), {, if, (]
[), {, if, (, inputs, ., isEmpty, (, ), ), {, throw, new, IllegalStateException, (, "No inputs", ), ;, }, return]
[==, null, ), {, if, (, inputs, ., isEmpty, (, ), ), {, throw, new, IllegalStateException, (, "No inputs", ), ;]
[), {, if, (, inputs, ., isEmpty, (, ), ), {, throw, new, IllegalStateException, (, "No inputs", ), ;, }, return]
[), {, throw, new, IllegalStateException, (, "No inputs", ), ;, }, return, inputs, ., get, (, 0, ), ., getAstRoot, (]
[., isEmpty, (, ), ), {, throw, new, IllegalStateException, (, "No inputs", ), ;, }, return, inputs, ., get, (, 0]
[;, }, return, inputs, ., get, (, 0, ), ., getAstRoot, (, this, ), ;, }, List, <, CompilerInput, >]
[), ;, }, return, inputs, ., get, (, 0, ), ., getAstRoot, (, this, ), ;, }, List, <, CompilerInput]
[;, }, List, <, CompilerInput, >, moduleInputs, =, module, ., getInputs, (, ), ;, if, (, moduleInputs, ., size, (]
[., getAstRoot, (, this, ), ;, }, List, <, CompilerInput, >, moduleInputs, =, module, ., getInputs, (, ), ;, if]
[., get, (, 0, ), ., getAstRoot, (, this, ), ;, }, List, <, CompilerInput, >, moduleInputs, =, module, .]
[), ., getAstRoot, (, this, ), ;, }, List, <, CompilerInput, >, moduleInputs, =, module, ., getInputs, (, ), ;]
[), ;, }, List, <, CompilerInput, >, moduleInputs, =, module, ., getInputs, (, ), ;, if, (, moduleInputs, ., size]
[;, if, (, moduleInputs, ., size, (, ), >, 0, ), {, return, moduleInputs, ., get, (, 0, ), .]
[., getInputs, (, ), ;, if, (, moduleInputs, ., size, (, ), >, 0, ), {, return, moduleInputs, ., get]
[), {, return, moduleInputs, ., get, (, 0, ), ., getAstRoot, (, this, ), ;, }, throw, new, IllegalStateException, (]
[>, 0, ), {, return, moduleInputs, ., get, (, 0, ), ., getAstRoot, (, this, ), ;, }, throw, new]
[., size, (, ), >, 0, ), {, return, moduleInputs, ., get, (, 0, ), ., getAstRoot, (, this, )]
[), {, return, moduleInputs, ., get, (, 0, ), ., getAstRoot, (, this, ), ;, }, throw, new, IllegalStateException, (]
[;, }, throw, new, IllegalStateException, (, "Root module has no inputs", ), ;, }, public, SourceMap, getSourceMap, (, ), {, return, sourceMap, ;, }]
[., getAstRoot, (, this, ), ;, }, throw, new, IllegalStateException, (, "Root module has no inputs", ), ;, }, public, SourceMap, getSourceMap, (, )]
[., get, (, 0, ), ., getAstRoot, (, this, ), ;, }, throw, new, IllegalStateException, (, "Root module has no inputs", ), ;, }]
[), ., getAstRoot, (, this, ), ;, }, throw, new, IllegalStateException, (, "Root module has no inputs", ), ;, }, public, SourceMap, getSourceMap, (]
[), ;, }, throw, new, IllegalStateException, (, "Root module has no inputs", ), ;, }, public, SourceMap, getSourceMap, (, ), {, return, sourceMap, ;]
[;, }, public, SourceMap, getSourceMap, (, ), {, return, sourceMap, ;, }, VariableMap, getVariableMap, (, ), {, return, getPassConfig, (]
[), ;, }, public, SourceMap, getSourceMap, (, ), {, return, sourceMap, ;, }, VariableMap, getVariableMap, (, ), {, return, getPassConfig]
[;, }, VariableMap, getVariableMap, (, ), {, return, getPassConfig, (, ), ., getIntermediateState, (, ), ., variableMap, ;, }, VariableMap]
[;, }, VariableMap, getPropertyMap, (, ), {, return, getPassConfig, (, ), ., getIntermediateState, (, ), ., propertyMap, ;, }, CompilerOptions]
[., variableMap, ;, }, VariableMap, getPropertyMap, (, ), {, return, getPassConfig, (, ), ., getIntermediateState, (, ), ., propertyMap, ;]
[., getIntermediateState, (, ), ., variableMap, ;, }, VariableMap, getPropertyMap, (, ), {, return, getPassConfig, (, ), ., getIntermediateState, (]
[;, }, CompilerOptions, getOptions, (, ), {, return, options, ;, }, FunctionInformationMap, getFunctionalInformationMap, (, ), {, return, functionInformationMap, ;, }]
[., propertyMap, ;, }, CompilerOptions, getOptions, (, ), {, return, options, ;, }, FunctionInformationMap, getFunctionalInformationMap, (, ), {, return, functionInformationMap]
[., getIntermediateState, (, ), ., propertyMap, ;, }, CompilerOptions, getOptions, (, ), {, return, options, ;, }, FunctionInformationMap, getFunctionalInformationMap, (]
[;, }, FunctionInformationMap, getFunctionalInformationMap, (, ), {, return, functionInformationMap, ;, }, public, static, void, setLoggingLevel, (, Level, level, ), {]
[;, }, public, static, void, setLoggingLevel, (, Level, level, ), {, logger, ., setLevel, (, level, ), ;, }, public]
[;, }, public, String, getAstDotGraph, (, ), throws, IOException, {, if, (, jsRoot, !=, null, ), {, ControlFlowAnalysis, cfa, =]
[., setLevel, (, level, ), ;, }, public, String, getAstDotGraph, (, ), throws, IOException, {, if, (, jsRoot, !=, null]
[), ;, }, public, String, getAstDotGraph, (, ), throws, IOException, {, if, (, jsRoot, !=, null, ), {, ControlFlowAnalysis, cfa]
[), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, this, ,, true, ,, false, ), ;, cfa, ., process, (, null]
[!=, null, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, this, ,, true, ,, false, ), ;, cfa, ., process]
[), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, this, ,, true, ,, false, ), ;, cfa, ., process, (, null]
[;, cfa, ., process, (, null, ,, jsRoot, ), ;, return, DotFormatter, ., toDot, (, jsRoot, ,, cfa, ., getCfg]
[,, true, ,, false, ), ;, cfa, ., process, (, null, ,, jsRoot, ), ;, return, DotFormatter, ., toDot, (]
[,, false, ), ;, cfa, ., process, (, null, ,, jsRoot, ), ;, return, DotFormatter, ., toDot, (, jsRoot, ,]
[), ;, cfa, ., process, (, null, ,, jsRoot, ), ;, return, DotFormatter, ., toDot, (, jsRoot, ,, cfa, .]
[;, return, DotFormatter, ., toDot, (, jsRoot, ,, cfa, ., getCfg, (, ), ), ;, }, else, {, return, ""]
[., process, (, null, ,, jsRoot, ), ;, return, DotFormatter, ., toDot, (, jsRoot, ,, cfa, ., getCfg, (, )]
[,, jsRoot, ), ;, return, DotFormatter, ., toDot, (, jsRoot, ,, cfa, ., getCfg, (, ), ), ;, }, else]
[), ;, return, DotFormatter, ., toDot, (, jsRoot, ,, cfa, ., getCfg, (, ), ), ;, }, else, {, return]
[;, }, else, {, return, "", ;, }, }, @, Override, public, ErrorManager, getErrorManager, (, ), {, if, (, options]
[., toDot, (, jsRoot, ,, cfa, ., getCfg, (, ), ), ;, }, else, {, return, "", ;, }, }]
[,, cfa, ., getCfg, (, ), ), ;, }, else, {, return, "", ;, }, }, @, Override, public, ErrorManager]
[), ;, }, else, {, return, "", ;, }, }, @, Override, public, ErrorManager, getErrorManager, (, ), {, if, (]
[., getCfg, (, ), ), ;, }, else, {, return, "", ;, }, }, @, Override, public, ErrorManager, getErrorManager, (]
[;, }, }, @, Override, public, ErrorManager, getErrorManager, (, ), {, if, (, options, ==, null, ), {, initOptions, (]
[), {, initOptions, (, newCompilerOptions, (, ), ), ;, }, return, errorManager, ;, }, @, Override, List, <, CompilerInput, >]
[==, null, ), {, initOptions, (, newCompilerOptions, (, ), ), ;, }, return, errorManager, ;, }, @, Override, List, <]
[), {, initOptions, (, newCompilerOptions, (, ), ), ;, }, return, errorManager, ;, }, @, Override, List, <, CompilerInput, >]
[;, }, return, errorManager, ;, }, @, Override, List, <, CompilerInput, >, getInputsInOrder, (, ), {, return, Collections, ., <]
[), ;, }, return, errorManager, ;, }, @, Override, List, <, CompilerInput, >, getInputsInOrder, (, ), {, return, Collections, .]
[;, }, @, Override, List, <, CompilerInput, >, getInputsInOrder, (, ), {, return, Collections, ., <, CompilerInput, >, unmodifiableList, (]
[;, }, public, Map, <, InputId, ,, CompilerInput, >, getInputsById, (, ), {, return, Collections, ., unmodifiableMap, (, inputsById, )]
[., <, CompilerInput, >, unmodifiableList, (, inputs, ), ;, }, public, Map, <, InputId, ,, CompilerInput, >, getInputsById, (, )]
[), ;, }, public, Map, <, InputId, ,, CompilerInput, >, getInputsById, (, ), {, return, Collections, ., unmodifiableMap, (, inputsById]
[;, }, List, <, CompilerInput, >, getExternsInOrder, (, ), {, return, Collections, ., <, CompilerInput, >, unmodifiableList, (, externs, )]
[., unmodifiableMap, (, inputsById, ), ;, }, List, <, CompilerInput, >, getExternsInOrder, (, ), {, return, Collections, ., <, CompilerInput]
[), ;, }, List, <, CompilerInput, >, getExternsInOrder, (, ), {, return, Collections, ., <, CompilerInput, >, unmodifiableList, (, externs]
[;, }, public, static, class, IntermediateState, implements, Serializable, {, private, static, final, long, serialVersionUID, =, 1L, ;, Node, externsRoot, ;]
[., <, CompilerInput, >, unmodifiableList, (, externs, ), ;, }, public, static, class, IntermediateState, implements, Serializable, {, private, static, final]
[), ;, }, public, static, class, IntermediateState, implements, Serializable, {, private, static, final, long, serialVersionUID, =, 1L, ;, Node, externsRoot]
[;, Node, externsRoot, ;, private, Node, jsRoot, ;, private, List, <, CompilerInput, >, externs, ;, private, List, <, CompilerInput, >]
[;, state, ., externsRoot, =, externsRoot, ;, state, ., jsRoot, =, jsRoot, ;, state, ., externs, =, externs, ;, state]
[=, externsRoot, ;, state, ., jsRoot, =, jsRoot, ;, state, ., externs, =, externs, ;, state, ., inputs, =, inputs]
[., externsRoot, =, externsRoot, ;, state, ., jsRoot, =, jsRoot, ;, state, ., externs, =, externs, ;, state, ., inputs]
[;, state, ., jsRoot, =, jsRoot, ;, state, ., externs, =, externs, ;, state, ., inputs, =, inputs, ;, state]
[=, jsRoot, ;, state, ., externs, =, externs, ;, state, ., inputs, =, inputs, ;, state, ., modules, =, modules]
[., jsRoot, =, jsRoot, ;, state, ., externs, =, externs, ;, state, ., inputs, =, inputs, ;, state, ., modules]
[;, state, ., externs, =, externs, ;, state, ., inputs, =, inputs, ;, state, ., modules, =, modules, ;, state]
[=, externs, ;, state, ., inputs, =, inputs, ;, state, ., modules, =, modules, ;, state, ., passConfigState, =, getPassConfig]
[., externs, =, externs, ;, state, ., inputs, =, inputs, ;, state, ., modules, =, modules, ;, state, ., passConfigState]
[;, state, ., inputs, =, inputs, ;, state, ., modules, =, modules, ;, state, ., passConfigState, =, getPassConfig, (, )]
[=, inputs, ;, state, ., modules, =, modules, ;, state, ., passConfigState, =, getPassConfig, (, ), ., getIntermediateState, (, )]
[., inputs, =, inputs, ;, state, ., modules, =, modules, ;, state, ., passConfigState, =, getPassConfig, (, ), ., getIntermediateState]
[;, state, ., modules, =, modules, ;, state, ., passConfigState, =, getPassConfig, (, ), ., getIntermediateState, (, ), ;, state]
[=, modules, ;, state, ., passConfigState, =, getPassConfig, (, ), ., getIntermediateState, (, ), ;, state, ., typeRegistry, =, typeRegistry]
[., modules, =, modules, ;, state, ., passConfigState, =, getPassConfig, (, ), ., getIntermediateState, (, ), ;, state, ., typeRegistry]
[;, state, ., passConfigState, =, getPassConfig, (, ), ., getIntermediateState, (, ), ;, state, ., typeRegistry, =, typeRegistry, ;, state]
[=, getPassConfig, (, ), ., getIntermediateState, (, ), ;, state, ., typeRegistry, =, typeRegistry, ;, state, ., lifeCycleStage, =, getLifeCycleStage]
[., passConfigState, =, getPassConfig, (, ), ., getIntermediateState, (, ), ;, state, ., typeRegistry, =, typeRegistry, ;, state, ., lifeCycleStage]
[;, state, ., typeRegistry, =, typeRegistry, ;, state, ., lifeCycleStage, =, getLifeCycleStage, (, ), ;, state, ., injectedLibraries, =, Maps]
[., getIntermediateState, (, ), ;, state, ., typeRegistry, =, typeRegistry, ;, state, ., lifeCycleStage, =, getLifeCycleStage, (, ), ;, state]
[=, typeRegistry, ;, state, ., lifeCycleStage, =, getLifeCycleStage, (, ), ;, state, ., injectedLibraries, =, Maps, ., newLinkedHashMap, (, injectedLibraries]
[., typeRegistry, =, typeRegistry, ;, state, ., lifeCycleStage, =, getLifeCycleStage, (, ), ;, state, ., injectedLibraries, =, Maps, ., newLinkedHashMap]
[;, state, ., lifeCycleStage, =, getLifeCycleStage, (, ), ;, state, ., injectedLibraries, =, Maps, ., newLinkedHashMap, (, injectedLibraries, ), ;]
[=, getLifeCycleStage, (, ), ;, state, ., injectedLibraries, =, Maps, ., newLinkedHashMap, (, injectedLibraries, ), ;, return, state, ;, }]
[., lifeCycleStage, =, getLifeCycleStage, (, ), ;, state, ., injectedLibraries, =, Maps, ., newLinkedHashMap, (, injectedLibraries, ), ;, return, state]
[;, state, ., injectedLibraries, =, Maps, ., newLinkedHashMap, (, injectedLibraries, ), ;, return, state, ;, }, public, void, setState, (]
[=, Maps, ., newLinkedHashMap, (, injectedLibraries, ), ;, return, state, ;, }, public, void, setState, (, IntermediateState, state, ), {]
[., injectedLibraries, =, Maps, ., newLinkedHashMap, (, injectedLibraries, ), ;, return, state, ;, }, public, void, setState, (, IntermediateState, state]
[;, return, state, ;, }, public, void, setState, (, IntermediateState, state, ), {, externsRoot, =, state, ., externsRoot, ;, jsRoot]
[., newLinkedHashMap, (, injectedLibraries, ), ;, return, state, ;, }, public, void, setState, (, IntermediateState, state, ), {, externsRoot, =]
[), ;, return, state, ;, }, public, void, setState, (, IntermediateState, state, ), {, externsRoot, =, state, ., externsRoot, ;]
[;, }, public, void, setState, (, IntermediateState, state, ), {, externsRoot, =, state, ., externsRoot, ;, jsRoot, =, state, .]
[=, state, ., externsRoot, ;, jsRoot, =, state, ., jsRoot, ;, externs, =, state, ., externs, ;, inputs, =, state]
[;, jsRoot, =, state, ., jsRoot, ;, externs, =, state, ., externs, ;, inputs, =, state, ., inputs, ;, modules]
[., externsRoot, ;, jsRoot, =, state, ., jsRoot, ;, externs, =, state, ., externs, ;, inputs, =, state, ., inputs]
[=, state, ., jsRoot, ;, externs, =, state, ., externs, ;, inputs, =, state, ., inputs, ;, modules, =, state]
[;, externs, =, state, ., externs, ;, inputs, =, state, ., inputs, ;, modules, =, state, ., modules, ;, passes]
[., jsRoot, ;, externs, =, state, ., externs, ;, inputs, =, state, ., inputs, ;, modules, =, state, ., modules]
[=, state, ., externs, ;, inputs, =, state, ., inputs, ;, modules, =, state, ., modules, ;, passes, =, createPassConfigInternal]
[;, inputs, =, state, ., inputs, ;, modules, =, state, ., modules, ;, passes, =, createPassConfigInternal, (, ), ;, getPassConfig]
[., externs, ;, inputs, =, state, ., inputs, ;, modules, =, state, ., modules, ;, passes, =, createPassConfigInternal, (, )]
[=, state, ., inputs, ;, modules, =, state, ., modules, ;, passes, =, createPassConfigInternal, (, ), ;, getPassConfig, (, )]
[;, modules, =, state, ., modules, ;, passes, =, createPassConfigInternal, (, ), ;, getPassConfig, (, ), ., setIntermediateState, (, state]
[., inputs, ;, modules, =, state, ., modules, ;, passes, =, createPassConfigInternal, (, ), ;, getPassConfig, (, ), ., setIntermediateState]
[=, state, ., modules, ;, passes, =, createPassConfigInternal, (, ), ;, getPassConfig, (, ), ., setIntermediateState, (, state, ., passConfigState]
[;, passes, =, createPassConfigInternal, (, ), ;, getPassConfig, (, ), ., setIntermediateState, (, state, ., passConfigState, ), ;, typeRegistry, =]
[., modules, ;, passes, =, createPassConfigInternal, (, ), ;, getPassConfig, (, ), ., setIntermediateState, (, state, ., passConfigState, ), ;]
[=, createPassConfigInternal, (, ), ;, getPassConfig, (, ), ., setIntermediateState, (, state, ., passConfigState, ), ;, typeRegistry, =, state, .]
[;, getPassConfig, (, ), ., setIntermediateState, (, state, ., passConfigState, ), ;, typeRegistry, =, state, ., typeRegistry, ;, setLifeCycleStage, (]
[;, typeRegistry, =, state, ., typeRegistry, ;, setLifeCycleStage, (, state, ., lifeCycleStage, ), ;, injectedLibraries, ., clear, (, ), ;]
[., setIntermediateState, (, state, ., passConfigState, ), ;, typeRegistry, =, state, ., typeRegistry, ;, setLifeCycleStage, (, state, ., lifeCycleStage, )]
[), ;, typeRegistry, =, state, ., typeRegistry, ;, setLifeCycleStage, (, state, ., lifeCycleStage, ), ;, injectedLibraries, ., clear, (, )]
[., passConfigState, ), ;, typeRegistry, =, state, ., typeRegistry, ;, setLifeCycleStage, (, state, ., lifeCycleStage, ), ;, injectedLibraries, ., clear]
[=, state, ., typeRegistry, ;, setLifeCycleStage, (, state, ., lifeCycleStage, ), ;, injectedLibraries, ., clear, (, ), ;, injectedLibraries, .]
[;, setLifeCycleStage, (, state, ., lifeCycleStage, ), ;, injectedLibraries, ., clear, (, ), ;, injectedLibraries, ., putAll, (, state, .]
[., typeRegistry, ;, setLifeCycleStage, (, state, ., lifeCycleStage, ), ;, injectedLibraries, ., clear, (, ), ;, injectedLibraries, ., putAll, (]
[;, injectedLibraries, ., clear, (, ), ;, injectedLibraries, ., putAll, (, state, ., injectedLibraries, ), ;, }, @, VisibleForTesting, List]
[), ;, injectedLibraries, ., clear, (, ), ;, injectedLibraries, ., putAll, (, state, ., injectedLibraries, ), ;, }, @, VisibleForTesting]
[., lifeCycleStage, ), ;, injectedLibraries, ., clear, (, ), ;, injectedLibraries, ., putAll, (, state, ., injectedLibraries, ), ;, }]
[;, injectedLibraries, ., putAll, (, state, ., injectedLibraries, ), ;, }, @, VisibleForTesting, List, <, CompilerInput, >, getInputsForTesting, (, )]
[., clear, (, ), ;, injectedLibraries, ., putAll, (, state, ., injectedLibraries, ), ;, }, @, VisibleForTesting, List, <, CompilerInput]
[;, }, @, VisibleForTesting, List, <, CompilerInput, >, getInputsForTesting, (, ), {, return, inputs, ;, }, @, VisibleForTesting, List, <]
[., putAll, (, state, ., injectedLibraries, ), ;, }, @, VisibleForTesting, List, <, CompilerInput, >, getInputsForTesting, (, ), {, return]
[), ;, }, @, VisibleForTesting, List, <, CompilerInput, >, getInputsForTesting, (, ), {, return, inputs, ;, }, @, VisibleForTesting, List]
[., injectedLibraries, ), ;, }, @, VisibleForTesting, List, <, CompilerInput, >, getInputsForTesting, (, ), {, return, inputs, ;, }, @]
[;, }, @, VisibleForTesting, List, <, CompilerInput, >, getExternsForTesting, (, ), {, return, externs, ;, }, @, Override, boolean, hasRegExpGlobalReferences]
[;, }, @, Override, boolean, hasRegExpGlobalReferences, (, ), {, return, hasRegExpGlobalReferences, ;, }, @, Override, void, setHasRegExpGlobalReferences, (, boolean, references]
[;, }, @, Override, void, setHasRegExpGlobalReferences, (, boolean, references, ), {, hasRegExpGlobalReferences, =, references, ;, }, @, Override, void, updateGlobalVarReferences]
[=, references, ;, }, @, Override, void, updateGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >, refMapPatch, ,, Node, collectionRoot, )]
[;, }, @, Override, void, updateGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >, refMapPatch, ,, Node, collectionRoot, ), {, Preconditions]
[;, if, (, globalRefMap, ==, null, ), {, globalRefMap, =, new, GlobalVarReferenceMap, (, getInputsInOrder, (, ), ,, getExternsInOrder, (, )]
[., checkState, (, collectionRoot, ., isScript, (, ), ||, collectionRoot, ., isBlock, (, ), ), ;, if, (, globalRefMap, ==]
[), ;, if, (, globalRefMap, ==, null, ), {, globalRefMap, =, new, GlobalVarReferenceMap, (, getInputsInOrder, (, ), ,, getExternsInOrder, (]
[||, collectionRoot, ., isBlock, (, ), ), ;, if, (, globalRefMap, ==, null, ), {, globalRefMap, =, new, GlobalVarReferenceMap, (]
[., isScript, (, ), ||, collectionRoot, ., isBlock, (, ), ), ;, if, (, globalRefMap, ==, null, ), {, globalRefMap]
[), ;, if, (, globalRefMap, ==, null, ), {, globalRefMap, =, new, GlobalVarReferenceMap, (, getInputsInOrder, (, ), ,, getExternsInOrder, (]
[., isBlock, (, ), ), ;, if, (, globalRefMap, ==, null, ), {, globalRefMap, =, new, GlobalVarReferenceMap, (, getInputsInOrder, (]
[), {, globalRefMap, =, new, GlobalVarReferenceMap, (, getInputsInOrder, (, ), ,, getExternsInOrder, (, ), ), ;, }, globalRefMap, ., updateGlobalVarReferences]
[==, null, ), {, globalRefMap, =, new, GlobalVarReferenceMap, (, getInputsInOrder, (, ), ,, getExternsInOrder, (, ), ), ;, }, globalRefMap]
[), {, globalRefMap, =, new, GlobalVarReferenceMap, (, getInputsInOrder, (, ), ,, getExternsInOrder, (, ), ), ;, }, globalRefMap, ., updateGlobalVarReferences]
[=, new, GlobalVarReferenceMap, (, getInputsInOrder, (, ), ,, getExternsInOrder, (, ), ), ;, }, globalRefMap, ., updateGlobalVarReferences, (, refMapPatch, ,]
[;, }, globalRefMap, ., updateGlobalVarReferences, (, refMapPatch, ,, collectionRoot, ), ;, }, @, Override, GlobalVarReferenceMap, getGlobalVarReferences, (, ), {, return]
[,, getExternsInOrder, (, ), ), ;, }, globalRefMap, ., updateGlobalVarReferences, (, refMapPatch, ,, collectionRoot, ), ;, }, @, Override, GlobalVarReferenceMap]
[), ;, }, globalRefMap, ., updateGlobalVarReferences, (, refMapPatch, ,, collectionRoot, ), ;, }, @, Override, GlobalVarReferenceMap, getGlobalVarReferences, (, ), {]
[;, }, @, Override, GlobalVarReferenceMap, getGlobalVarReferences, (, ), {, return, globalRefMap, ;, }, @, Override, CompilerInput, getSynthesizedExternsInput, (, ), {]
[., updateGlobalVarReferences, (, refMapPatch, ,, collectionRoot, ), ;, }, @, Override, GlobalVarReferenceMap, getGlobalVarReferences, (, ), {, return, globalRefMap, ;, }]
[,, collectionRoot, ), ;, }, @, Override, GlobalVarReferenceMap, getGlobalVarReferences, (, ), {, return, globalRefMap, ;, }, @, Override, CompilerInput, getSynthesizedExternsInput]
[), ;, }, @, Override, GlobalVarReferenceMap, getGlobalVarReferences, (, ), {, return, globalRefMap, ;, }, @, Override, CompilerInput, getSynthesizedExternsInput, (, )]
[;, }, @, Override, CompilerInput, getSynthesizedExternsInput, (, ), {, if, (, synthesizedExternsInput, ==, null, ), {, synthesizedExternsInput, =, newExternInput, (]
[), {, synthesizedExternsInput, =, newExternInput, (, SYNTHETIC_EXTERNS, ), ;, }, return, synthesizedExternsInput, ;, }, @, Override, public, double, getProgress, (]
[==, null, ), {, synthesizedExternsInput, =, newExternInput, (, SYNTHETIC_EXTERNS, ), ;, }, return, synthesizedExternsInput, ;, }, @, Override, public, double]
[), {, synthesizedExternsInput, =, newExternInput, (, SYNTHETIC_EXTERNS, ), ;, }, return, synthesizedExternsInput, ;, }, @, Override, public, double, getProgress, (]
[=, newExternInput, (, SYNTHETIC_EXTERNS, ), ;, }, return, synthesizedExternsInput, ;, }, @, Override, public, double, getProgress, (, ), {, return]
[;, }, return, synthesizedExternsInput, ;, }, @, Override, public, double, getProgress, (, ), {, return, progress, ;, }, @, Override]
[), ;, }, return, synthesizedExternsInput, ;, }, @, Override, public, double, getProgress, (, ), {, return, progress, ;, }, @]
[;, }, @, Override, public, double, getProgress, (, ), {, return, progress, ;, }, @, Override, String, getLastPassName, (, )]
[;, }, @, Override, String, getLastPassName, (, ), {, return, lastPassName, ;, }, @, Override, void, setProgress, (, double, newProgress]
[;, }, @, Override, void, setProgress, (, double, newProgress, ,, String, passName, ), {, this, ., lastPassName, =, passName, ;]
[=, passName, ;, if, (, newProgress, >, 1.0, ), {, progress, =, 1.0, ;, }, else, {, progress, =, newProgress]
[., lastPassName, =, passName, ;, if, (, newProgress, >, 1.0, ), {, progress, =, 1.0, ;, }, else, {, progress]
[;, if, (, newProgress, >, 1.0, ), {, progress, =, 1.0, ;, }, else, {, progress, =, newProgress, ;, }]
[), {, progress, =, 1.0, ;, }, else, {, progress, =, newProgress, ;, }, }, public, void, replaceScript, (, JsAst]
[>, 1.0, ), {, progress, =, 1.0, ;, }, else, {, progress, =, newProgress, ;, }, }, public, void, replaceScript]
[), {, progress, =, 1.0, ;, }, else, {, progress, =, newProgress, ;, }, }, public, void, replaceScript, (, JsAst]
[=, 1.0, ;, }, else, {, progress, =, newProgress, ;, }, }, public, void, replaceScript, (, JsAst, ast, ), {]
[;, }, else, {, progress, =, newProgress, ;, }, }, public, void, replaceScript, (, JsAst, ast, ), {, CompilerInput, input]
[=, newProgress, ;, }, }, public, void, replaceScript, (, JsAst, ast, ), {, CompilerInput, input, =, this, ., getInput, (]
[;, }, }, public, void, replaceScript, (, JsAst, ast, ), {, CompilerInput, input, =, this, ., getInput, (, ast, .]
[;, if, (, !, replaceIncrementalSourceAst, (, ast, ), ), {, return, ;, }, Node, originalRoot, =, input, ., getAstRoot, (]
[., getInput, (, ast, ., getInputId, (, ), ), ;, if, (, !, replaceIncrementalSourceAst, (, ast, ), ), {, return]
[), ;, if, (, !, replaceIncrementalSourceAst, (, ast, ), ), {, return, ;, }, Node, originalRoot, =, input, ., getAstRoot]
[., getInputId, (, ), ), ;, if, (, !, replaceIncrementalSourceAst, (, ast, ), ), {, return, ;, }, Node, originalRoot]
[), {, return, ;, }, Node, originalRoot, =, input, ., getAstRoot, (, this, ), ;, processNewScript, (, ast, ,, originalRoot]
[), {, return, ;, }, Node, originalRoot, =, input, ., getAstRoot, (, this, ), ;, processNewScript, (, ast, ,, originalRoot]
[), ), {, return, ;, }, Node, originalRoot, =, input, ., getAstRoot, (, this, ), ;, processNewScript, (, ast, ,]
[;, processNewScript, (, ast, ,, originalRoot, ), ;, }, public, void, addNewScript, (, JsAst, ast, ), {, if, (, !]
[., getAstRoot, (, this, ), ;, processNewScript, (, ast, ,, originalRoot, ), ;, }, public, void, addNewScript, (, JsAst, ast]
[), ;, processNewScript, (, ast, ,, originalRoot, ), ;, }, public, void, addNewScript, (, JsAst, ast, ), {, if, (]
[;, }, public, void, addNewScript, (, JsAst, ast, ), {, if, (, !, addNewSourceAst, (, ast, ), ), {, return]
[,, originalRoot, ), ;, }, public, void, addNewScript, (, JsAst, ast, ), {, if, (, !, addNewSourceAst, (, ast, )]
[), ;, }, public, void, addNewScript, (, JsAst, ast, ), {, if, (, !, addNewSourceAst, (, ast, ), ), {]
[), {, return, ;, }, Node, emptyScript, =, new, Node, (, Token, ., SCRIPT, ), ;, InputId, inputId, =, ast]
[), {, return, ;, }, Node, emptyScript, =, new, Node, (, Token, ., SCRIPT, ), ;, InputId, inputId, =, ast]
[), ), {, return, ;, }, Node, emptyScript, =, new, Node, (, Token, ., SCRIPT, ), ;, InputId, inputId, =]
[;, InputId, inputId, =, ast, ., getInputId, (, ), ;, emptyScript, ., setInputId, (, inputId, ), ;, emptyScript, ., setStaticSourceFile]
[), ;, InputId, inputId, =, ast, ., getInputId, (, ), ;, emptyScript, ., setInputId, (, inputId, ), ;, emptyScript, .]
[., SCRIPT, ), ;, InputId, inputId, =, ast, ., getInputId, (, ), ;, emptyScript, ., setInputId, (, inputId, ), ;]
[;, emptyScript, ., setInputId, (, inputId, ), ;, emptyScript, ., setStaticSourceFile, (, SourceFile, ., fromCode, (, inputId, ., getIdName, (]
[., getInputId, (, ), ;, emptyScript, ., setInputId, (, inputId, ), ;, emptyScript, ., setStaticSourceFile, (, SourceFile, ., fromCode, (]
[;, emptyScript, ., setStaticSourceFile, (, SourceFile, ., fromCode, (, inputId, ., getIdName, (, ), ,, "", ), ), ;, processNewScript]
[., setInputId, (, inputId, ), ;, emptyScript, ., setStaticSourceFile, (, SourceFile, ., fromCode, (, inputId, ., getIdName, (, ), ,]
[), ;, emptyScript, ., setStaticSourceFile, (, SourceFile, ., fromCode, (, inputId, ., getIdName, (, ), ,, "", ), ), ;]
[;, processNewScript, (, ast, ,, emptyScript, ), ;, }, private, void, processNewScript, (, JsAst, ast, ,, Node, originalRoot, ), {]
[., setStaticSourceFile, (, SourceFile, ., fromCode, (, inputId, ., getIdName, (, ), ,, "", ), ), ;, processNewScript, (, ast]
[), ;, processNewScript, (, ast, ,, emptyScript, ), ;, }, private, void, processNewScript, (, JsAst, ast, ,, Node, originalRoot, )]
[., fromCode, (, inputId, ., getIdName, (, ), ,, "", ), ), ;, processNewScript, (, ast, ,, emptyScript, ), ;]
[,, "", ), ), ;, processNewScript, (, ast, ,, emptyScript, ), ;, }, private, void, processNewScript, (, JsAst, ast, ,]
[., getIdName, (, ), ,, "", ), ), ;, processNewScript, (, ast, ,, emptyScript, ), ;, }, private, void, processNewScript]
[), ), ;, processNewScript, (, ast, ,, emptyScript, ), ;, }, private, void, processNewScript, (, JsAst, ast, ,, Node, originalRoot]
[;, }, private, void, processNewScript, (, JsAst, ast, ,, Node, originalRoot, ), {, Node, js, =, ast, ., getAstRoot, (]
[,, emptyScript, ), ;, }, private, void, processNewScript, (, JsAst, ast, ,, Node, originalRoot, ), {, Node, js, =, ast]
[), ;, }, private, void, processNewScript, (, JsAst, ast, ,, Node, originalRoot, ), {, Node, js, =, ast, ., getAstRoot]
[;, Preconditions, ., checkNotNull, (, js, ), ;, runHotSwap, (, originalRoot, ,, js, ,, this, ., getCleanupPassConfig, (, ), )]
[., getAstRoot, (, this, ), ;, Preconditions, ., checkNotNull, (, js, ), ;, runHotSwap, (, originalRoot, ,, js, ,, this]
[), ;, Preconditions, ., checkNotNull, (, js, ), ;, runHotSwap, (, originalRoot, ,, js, ,, this, ., getCleanupPassConfig, (, )]
[;, runHotSwap, (, originalRoot, ,, js, ,, this, ., getCleanupPassConfig, (, ), ), ;, runHotSwapPass, (, null, ,, null, ,]
[., checkNotNull, (, js, ), ;, runHotSwap, (, originalRoot, ,, js, ,, this, ., getCleanupPassConfig, (, ), ), ;, runHotSwapPass]
[), ;, runHotSwap, (, originalRoot, ,, js, ,, this, ., getCleanupPassConfig, (, ), ), ;, runHotSwapPass, (, null, ,, null]
[;, runHotSwapPass, (, null, ,, null, ,, ensureDefaultPassConfig, (, ), ., garbageCollectChecks, ), ;, this, ., getTypeRegistry, (, ), .]
[,, js, ,, this, ., getCleanupPassConfig, (, ), ), ;, runHotSwapPass, (, null, ,, null, ,, ensureDefaultPassConfig, (, ), .]
[,, this, ., getCleanupPassConfig, (, ), ), ;, runHotSwapPass, (, null, ,, null, ,, ensureDefaultPassConfig, (, ), ., garbageCollectChecks, )]
[), ;, runHotSwapPass, (, null, ,, null, ,, ensureDefaultPassConfig, (, ), ., garbageCollectChecks, ), ;, this, ., getTypeRegistry, (, )]
[., getCleanupPassConfig, (, ), ), ;, runHotSwapPass, (, null, ,, null, ,, ensureDefaultPassConfig, (, ), ., garbageCollectChecks, ), ;, this]
[;, this, ., getTypeRegistry, (, ), ., clearNamedTypes, (, ), ;, this, ., removeSyntheticVarsInput, (, ), ;, runHotSwap, (, originalRoot]
[,, null, ,, ensureDefaultPassConfig, (, ), ., garbageCollectChecks, ), ;, this, ., getTypeRegistry, (, ), ., clearNamedTypes, (, ), ;]
[,, ensureDefaultPassConfig, (, ), ., garbageCollectChecks, ), ;, this, ., getTypeRegistry, (, ), ., clearNamedTypes, (, ), ;, this, .]
[), ;, this, ., getTypeRegistry, (, ), ., clearNamedTypes, (, ), ;, this, ., removeSyntheticVarsInput, (, ), ;, runHotSwap, (]
[., garbageCollectChecks, ), ;, this, ., getTypeRegistry, (, ), ., clearNamedTypes, (, ), ;, this, ., removeSyntheticVarsInput, (, ), ;]
[;, this, ., removeSyntheticVarsInput, (, ), ;, runHotSwap, (, originalRoot, ,, js, ,, this, ., ensureDefaultPassConfig, (, ), ), ;]
[., clearNamedTypes, (, ), ;, this, ., removeSyntheticVarsInput, (, ), ;, runHotSwap, (, originalRoot, ,, js, ,, this, ., ensureDefaultPassConfig]
[., getTypeRegistry, (, ), ., clearNamedTypes, (, ), ;, this, ., removeSyntheticVarsInput, (, ), ;, runHotSwap, (, originalRoot, ,, js]
[;, runHotSwap, (, originalRoot, ,, js, ,, this, ., ensureDefaultPassConfig, (, ), ), ;, }, private, void, runHotSwap, (, Node]
[., removeSyntheticVarsInput, (, ), ;, runHotSwap, (, originalRoot, ,, js, ,, this, ., ensureDefaultPassConfig, (, ), ), ;, }, private]
[;, }, private, void, runHotSwap, (, Node, originalRoot, ,, Node, js, ,, PassConfig, passConfig, ), {, for, (, PassFactory, passFactory]
[,, js, ,, this, ., ensureDefaultPassConfig, (, ), ), ;, }, private, void, runHotSwap, (, Node, originalRoot, ,, Node, js]
[,, this, ., ensureDefaultPassConfig, (, ), ), ;, }, private, void, runHotSwap, (, Node, originalRoot, ,, Node, js, ,, PassConfig]
[), ;, }, private, void, runHotSwap, (, Node, originalRoot, ,, Node, js, ,, PassConfig, passConfig, ), {, for, (, PassFactory]
[., ensureDefaultPassConfig, (, ), ), ;, }, private, void, runHotSwap, (, Node, originalRoot, ,, Node, js, ,, PassConfig, passConfig, )]
[), {, runHotSwapPass, (, originalRoot, ,, js, ,, passFactory, ), ;, }, }, private, void, runHotSwapPass, (, Node, originalRoot, ,]
[., getChecks, (, ), ), {, runHotSwapPass, (, originalRoot, ,, js, ,, passFactory, ), ;, }, }, private, void, runHotSwapPass]
[;, }, }, private, void, runHotSwapPass, (, Node, originalRoot, ,, Node, js, ,, PassFactory, passFactory, ), {, HotSwapCompilerPass, pass, =]
[,, js, ,, passFactory, ), ;, }, }, private, void, runHotSwapPass, (, Node, originalRoot, ,, Node, js, ,, PassFactory, passFactory]
[,, passFactory, ), ;, }, }, private, void, runHotSwapPass, (, Node, originalRoot, ,, Node, js, ,, PassFactory, passFactory, ), {]
[), ;, }, }, private, void, runHotSwapPass, (, Node, originalRoot, ,, Node, js, ,, PassFactory, passFactory, ), {, HotSwapCompilerPass, pass]
[;, if, (, pass, !=, null, ), {, logger, ., info, (, "Performing HotSwap for pass ", +, passFactory, ., getName, (, ), )]
[., getHotSwapPass, (, this, ), ;, if, (, pass, !=, null, ), {, logger, ., info, (, "Performing HotSwap for pass ", +, passFactory]
[), ;, if, (, pass, !=, null, ), {, logger, ., info, (, "Performing HotSwap for pass ", +, passFactory, ., getName, (, )]
[), {, logger, ., info, (, "Performing HotSwap for pass ", +, passFactory, ., getName, (, ), ), ;, pass, ., hotSwapScript, (, js]
[!=, null, ), {, logger, ., info, (, "Performing HotSwap for pass ", +, passFactory, ., getName, (, ), ), ;, pass, ., hotSwapScript]
[), {, logger, ., info, (, "Performing HotSwap for pass ", +, passFactory, ., getName, (, ), ), ;, pass, ., hotSwapScript, (, js]
[;, pass, ., hotSwapScript, (, js, ,, originalRoot, ), ;, }, }, private, PassConfig, getCleanupPassConfig, (, ), {, return, new]
[., info, (, "Performing HotSwap for pass ", +, passFactory, ., getName, (, ), ), ;, pass, ., hotSwapScript, (, js, ,, originalRoot, )]
[), ;, pass, ., hotSwapScript, (, js, ,, originalRoot, ), ;, }, }, private, PassConfig, getCleanupPassConfig, (, ), {, return]
[+, passFactory, ., getName, (, ), ), ;, pass, ., hotSwapScript, (, js, ,, originalRoot, ), ;, }, }, private]
[), ;, pass, ., hotSwapScript, (, js, ,, originalRoot, ), ;, }, }, private, PassConfig, getCleanupPassConfig, (, ), {, return]
[., getName, (, ), ), ;, pass, ., hotSwapScript, (, js, ,, originalRoot, ), ;, }, }, private, PassConfig, getCleanupPassConfig]
[;, }, }, private, PassConfig, getCleanupPassConfig, (, ), {, return, new, CleanupPasses, (, getOptions, (, ), ), ;, }, private]
[., hotSwapScript, (, js, ,, originalRoot, ), ;, }, }, private, PassConfig, getCleanupPassConfig, (, ), {, return, new, CleanupPasses, (]
[,, originalRoot, ), ;, }, }, private, PassConfig, getCleanupPassConfig, (, ), {, return, new, CleanupPasses, (, getOptions, (, ), )]
[), ;, }, }, private, PassConfig, getCleanupPassConfig, (, ), {, return, new, CleanupPasses, (, getOptions, (, ), ), ;, }]
[;, }, private, void, removeSyntheticVarsInput, (, ), {, String, sourceName, =, Compiler, ., SYNTHETIC_EXTERNS, ;, removeExternInput, (, new, InputId, (]
[), ;, }, private, void, removeSyntheticVarsInput, (, ), {, String, sourceName, =, Compiler, ., SYNTHETIC_EXTERNS, ;, removeExternInput, (, new, InputId]
[;, removeExternInput, (, new, InputId, (, sourceName, ), ), ;, }, @, Override, Node, ensureLibraryInjected, (, String, resourceName, ), {]
[., SYNTHETIC_EXTERNS, ;, removeExternInput, (, new, InputId, (, sourceName, ), ), ;, }, @, Override, Node, ensureLibraryInjected, (, String, resourceName]
[;, }, @, Override, Node, ensureLibraryInjected, (, String, resourceName, ), {, if, (, injectedLibraries, ., containsKey, (, resourceName, ), )]
[), ;, }, @, Override, Node, ensureLibraryInjected, (, String, resourceName, ), {, if, (, injectedLibraries, ., containsKey, (, resourceName, )]
[), ), ;, }, @, Override, Node, ensureLibraryInjected, (, String, resourceName, ), {, if, (, injectedLibraries, ., containsKey, (, resourceName]
[), {, return, null, ;, }, boolean, isBase, =, "base", ., equals, (, resourceName, ), ;, if, (, !, isBase]
[., containsKey, (, resourceName, ), ), {, return, null, ;, }, boolean, isBase, =, "base", ., equals, (, resourceName, )]
[), ), {, return, null, ;, }, boolean, isBase, =, "base", ., equals, (, resourceName, ), ;, if, (, !]
[;, }, boolean, isBase, =, "base", ., equals, (, resourceName, ), ;, if, (, !, isBase, ), {, ensureLibraryInjected, (]
[;, if, (, !, isBase, ), {, ensureLibraryInjected, (, "base", ), ;, }, Node, firstChild, =, loadLibraryCode, (, resourceName, )]
[., equals, (, resourceName, ), ;, if, (, !, isBase, ), {, ensureLibraryInjected, (, "base", ), ;, }, Node, firstChild]
[), ;, if, (, !, isBase, ), {, ensureLibraryInjected, (, "base", ), ;, }, Node, firstChild, =, loadLibraryCode, (, resourceName]
[), {, ensureLibraryInjected, (, "base", ), ;, }, Node, firstChild, =, loadLibraryCode, (, resourceName, ), ., removeChildren, (, ), ;]
[), {, ensureLibraryInjected, (, "base", ), ;, }, Node, firstChild, =, loadLibraryCode, (, resourceName, ), ., removeChildren, (, ), ;]
[;, }, Node, firstChild, =, loadLibraryCode, (, resourceName, ), ., removeChildren, (, ), ;, Node, lastChild, =, firstChild, ., getLastSibling]
[), ;, }, Node, firstChild, =, loadLibraryCode, (, resourceName, ), ., removeChildren, (, ), ;, Node, lastChild, =, firstChild, .]
[;, Node, lastChild, =, firstChild, ., getLastSibling, (, ), ;, Node, parent, =, getNodeForCodeInsertion, (, null, ), ;, if, (]
[., removeChildren, (, ), ;, Node, lastChild, =, firstChild, ., getLastSibling, (, ), ;, Node, parent, =, getNodeForCodeInsertion, (, null]
[), ., removeChildren, (, ), ;, Node, lastChild, =, firstChild, ., getLastSibling, (, ), ;, Node, parent, =, getNodeForCodeInsertion, (]
[;, Node, parent, =, getNodeForCodeInsertion, (, null, ), ;, if, (, isBase, ), {, parent, ., addChildrenToFront, (, firstChild, )]
[., getLastSibling, (, ), ;, Node, parent, =, getNodeForCodeInsertion, (, null, ), ;, if, (, isBase, ), {, parent, .]
[;, if, (, isBase, ), {, parent, ., addChildrenToFront, (, firstChild, ), ;, }, else, {, parent, ., addChildrenAfter, (]
[), ;, if, (, isBase, ), {, parent, ., addChildrenToFront, (, firstChild, ), ;, }, else, {, parent, ., addChildrenAfter]
[), {, parent, ., addChildrenToFront, (, firstChild, ), ;, }, else, {, parent, ., addChildrenAfter, (, firstChild, ,, injectedLibraries, .]
[;, }, else, {, parent, ., addChildrenAfter, (, firstChild, ,, injectedLibraries, ., get, (, "base", ), ), ;, }, reportCodeChange]
[., addChildrenToFront, (, firstChild, ), ;, }, else, {, parent, ., addChildrenAfter, (, firstChild, ,, injectedLibraries, ., get, (, "base"]
[), ;, }, else, {, parent, ., addChildrenAfter, (, firstChild, ,, injectedLibraries, ., get, (, "base", ), ), ;, }]
[;, }, reportCodeChange, (, ), ;, injectedLibraries, ., put, (, resourceName, ,, lastChild, ), ;, return, lastChild, ;, }, @]
[., addChildrenAfter, (, firstChild, ,, injectedLibraries, ., get, (, "base", ), ), ;, }, reportCodeChange, (, ), ;, injectedLibraries, .]
[,, injectedLibraries, ., get, (, "base", ), ), ;, }, reportCodeChange, (, ), ;, injectedLibraries, ., put, (, resourceName, ,]
[), ;, }, reportCodeChange, (, ), ;, injectedLibraries, ., put, (, resourceName, ,, lastChild, ), ;, return, lastChild, ;, }]
[., get, (, "base", ), ), ;, }, reportCodeChange, (, ), ;, injectedLibraries, ., put, (, resourceName, ,, lastChild, )]
[), ), ;, }, reportCodeChange, (, ), ;, injectedLibraries, ., put, (, resourceName, ,, lastChild, ), ;, return, lastChild, ;]
[;, injectedLibraries, ., put, (, resourceName, ,, lastChild, ), ;, return, lastChild, ;, }, @, VisibleForTesting, Node, loadLibraryCode, (, String]
[;, return, lastChild, ;, }, @, VisibleForTesting, Node, loadLibraryCode, (, String, resourceName, ), {, String, originalCode, ;, try, {, originalCode]
[., put, (, resourceName, ,, lastChild, ), ;, return, lastChild, ;, }, @, VisibleForTesting, Node, loadLibraryCode, (, String, resourceName, )]
[,, lastChild, ), ;, return, lastChild, ;, }, @, VisibleForTesting, Node, loadLibraryCode, (, String, resourceName, ), {, String, originalCode, ;]
[), ;, return, lastChild, ;, }, @, VisibleForTesting, Node, loadLibraryCode, (, String, resourceName, ), {, String, originalCode, ;, try, {]
[;, }, @, VisibleForTesting, Node, loadLibraryCode, (, String, resourceName, ), {, String, originalCode, ;, try, {, originalCode, =, CharStreams, .]
[=, CharStreams, ., toString, (, new, InputStreamReader, (, Compiler, ., class, ., getResourceAsStream, (, String, ., format, (, "js/%s.js", ,]
[;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }, return, Normalize, ., parseAndNormalizeSyntheticCode]
[., toString, (, new, InputStreamReader, (, Compiler, ., class, ., getResourceAsStream, (, String, ., format, (, "js/%s.js", ,, resourceName, )]
[), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }, return, Normalize, .]
[,, Charsets, ., UTF_8, ), ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e, )]
[., getResourceAsStream, (, String, ., format, (, "js/%s.js", ,, resourceName, ), ), ,, Charsets, ., UTF_8, ), ), ;, }]
[), ,, Charsets, ., UTF_8, ), ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e]
[., format, (, "js/%s.js", ,, resourceName, ), ), ,, Charsets, ., UTF_8, ), ), ;, }, catch, (, IOException, e]
[,, resourceName, ), ), ,, Charsets, ., UTF_8, ), ), ;, }, catch, (, IOException, e, ), {, throw, new]
[), ), ,, Charsets, ., UTF_8, ), ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (]
[), ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }, return, Normalize]
[., UTF_8, ), ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }]
[;, }, return, Normalize, ., parseAndNormalizeSyntheticCode, (, this, ,, originalCode, ,, String, ., format, (, "jscomp_%s_", ,, resourceName, ), )]
[), ;, }, return, Normalize, ., parseAndNormalizeSyntheticCode, (, this, ,, originalCode, ,, String, ., format, (, "jscomp_%s_", ,, resourceName, )]
[;, }, public, static, String, getReleaseVersion, (, ), {, ResourceBundle, config, =, ResourceBundle, ., getBundle, (, CONFIG_RESOURCE, ), ;, return]
[., parseAndNormalizeSyntheticCode, (, this, ,, originalCode, ,, String, ., format, (, "jscomp_%s_", ,, resourceName, ), ), ;, }, public, static]
[,, originalCode, ,, String, ., format, (, "jscomp_%s_", ,, resourceName, ), ), ;, }, public, static, String, getReleaseVersion, (, )]
[,, String, ., format, (, "jscomp_%s_", ,, resourceName, ), ), ;, }, public, static, String, getReleaseVersion, (, ), {, ResourceBundle]
[), ;, }, public, static, String, getReleaseVersion, (, ), {, ResourceBundle, config, =, ResourceBundle, ., getBundle, (, CONFIG_RESOURCE, ), ;]
[., format, (, "jscomp_%s_", ,, resourceName, ), ), ;, }, public, static, String, getReleaseVersion, (, ), {, ResourceBundle, config, =]
[,, resourceName, ), ), ;, }, public, static, String, getReleaseVersion, (, ), {, ResourceBundle, config, =, ResourceBundle, ., getBundle, (]
[), ), ;, }, public, static, String, getReleaseVersion, (, ), {, ResourceBundle, config, =, ResourceBundle, ., getBundle, (, CONFIG_RESOURCE, )]
[;, return, config, ., getString, (, "compiler.version", ), ;, }, public, static, String, getReleaseDate, (, ), {, ResourceBundle, config, =]
[., getBundle, (, CONFIG_RESOURCE, ), ;, return, config, ., getString, (, "compiler.version", ), ;, }, public, static, String, getReleaseDate, (]
[), ;, return, config, ., getString, (, "compiler.version", ), ;, }, public, static, String, getReleaseDate, (, ), {, ResourceBundle, config]
[;, }, public, static, String, getReleaseDate, (, ), {, ResourceBundle, config, =, ResourceBundle, ., getBundle, (, CONFIG_RESOURCE, ), ;, return]
[., getString, (, "compiler.version", ), ;, }, public, static, String, getReleaseDate, (, ), {, ResourceBundle, config, =, ResourceBundle, ., getBundle]
[), ;, }, public, static, String, getReleaseDate, (, ), {, ResourceBundle, config, =, ResourceBundle, ., getBundle, (, CONFIG_RESOURCE, ), ;]
[;, return, config, ., getString, (, "compiler.date", ), ;, }, @, Override, public, void, setOldParseTree, (, String, sourceName, ,, AstRoot]
[., getBundle, (, CONFIG_RESOURCE, ), ;, return, config, ., getString, (, "compiler.date", ), ;, }, @, Override, public, void, setOldParseTree]
[), ;, return, config, ., getString, (, "compiler.date", ), ;, }, @, Override, public, void, setOldParseTree, (, String, sourceName, ,]
[;, }, @, Override, public, void, setOldParseTree, (, String, sourceName, ,, AstRoot, oldAst, ), {, }, @, Override, public, AstRoot]
[., getString, (, "compiler.date", ), ;, }, @, Override, public, void, setOldParseTree, (, String, sourceName, ,, AstRoot, oldAst, ), {]
[), ;, }, @, Override, public, void, setOldParseTree, (, String, sourceName, ,, AstRoot, oldAst, ), {, }, @, Override, public]
[;, }, }]
