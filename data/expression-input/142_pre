[public, SubPlane, (, final, Hyperplane, <, Euclidean3D, >, hyperplane, ,, final, Region, <, Euclidean2D, >, remainingRegion, ), {, super, (]
[(, final, Hyperplane, <, Euclidean3D, >, hyperplane, ,, final, Region, <, Euclidean2D, >, remainingRegion, ), {, super, (, hyperplane, ,]
[Euclidean2D, >, buildNew, (, final, Hyperplane, <, Euclidean3D, >, hyperplane, ,, final, Region, <, Euclidean2D, >, remainingRegion, ), {, return]
[(, final, Hyperplane, <, Euclidean3D, >, hyperplane, ,, final, Region, <, Euclidean2D, >, remainingRegion, ), {, return, new, SubPlane, (]
[Hyperplane, <, Euclidean3D, >, hyperplane, ,, final, Region, <, Euclidean2D, >, remainingRegion, ), {, return, new, SubPlane, (, hyperplane, ,]
[), ;, }, @, Override, public, Side, side, (, Hyperplane, <, Euclidean3D, >, hyperplane, ), {, final, Plane, otherPlane, =]
[@, Override, public, Side, side, (, Hyperplane, <, Euclidean3D, >, hyperplane, ), {, final, Plane, otherPlane, =, (, Plane, )]
[Hyperplane, <, Euclidean3D, >, hyperplane, ), {, final, Plane, otherPlane, =, (, Plane, ), hyperplane, ;, final, Plane, thisPlane, =]
[>, hyperplane, ), {, final, Plane, otherPlane, =, (, Plane, ), hyperplane, ;, final, Plane, thisPlane, =, (, Plane, )]
[(, Plane, ), hyperplane, ;, final, Plane, thisPlane, =, (, Plane, ), getHyperplane, (, ), ;, final, Line, inter, =]
[(, Plane, ), hyperplane, ;, final, Plane, thisPlane, =, (, Plane, ), getHyperplane, (, ), ;, final, Line, inter, =]
[;, final, Plane, thisPlane, =, (, Plane, ), getHyperplane, (, ), ;, final, Line, inter, =, otherPlane, ., intersection, (]
[(, Plane, ), getHyperplane, (, ), ;, final, Line, inter, =, otherPlane, ., intersection, (, thisPlane, ), ;, if, (]
[(, Plane, ), getHyperplane, (, ), ;, final, Line, inter, =, otherPlane, ., intersection, (, thisPlane, ), ;, if, (]
[), getHyperplane, (, ), ;, final, Line, inter, =, otherPlane, ., intersection, (, thisPlane, ), ;, if, (, inter, ==]
[inter, =, otherPlane, ., intersection, (, thisPlane, ), ;, if, (, inter, ==, null, ), {, final, double, global, =]
[inter, =, otherPlane, ., intersection, (, thisPlane, ), ;, if, (, inter, ==, null, ), {, final, double, global, =]
[intersection, (, thisPlane, ), ;, if, (, inter, ==, null, ), {, final, double, global, =, otherPlane, ., getOffset, (]
[;, if, (, inter, ==, null, ), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return]
[;, if, (, inter, ==, null, ), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return]
[if, (, inter, ==, null, ), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return, (]
[if, (, inter, ==, null, ), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return, (]
[inter, ==, null, ), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return, (, global, <]
[==, null, ), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return, (, global, <, -]
[{, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return, (, global, <, -, 1.0e-10, ), ?]
[{, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return, (, global, <, -, 1.0e-10, ), ?]
[=, otherPlane, ., getOffset, (, thisPlane, ), ;, return, (, global, <, -, 1.0e-10, ), ?, Side, ., MINUS, :]
[otherPlane, ., getOffset, (, thisPlane, ), ;, return, (, global, <, -, 1.0e-10, ), ?, Side, ., MINUS, :, (]
[otherPlane, ., getOffset, (, thisPlane, ), ;, return, (, global, <, -, 1.0e-10, ), ?, Side, ., MINUS, :, (]
[., getOffset, (, thisPlane, ), ;, return, (, global, <, -, 1.0e-10, ), ?, Side, ., MINUS, :, (, (]
[., getOffset, (, thisPlane, ), ;, return, (, global, <, -, 1.0e-10, ), ?, Side, ., MINUS, :, (, (]
[(, thisPlane, ), ;, return, (, global, <, -, 1.0e-10, ), ?, Side, ., MINUS, :, (, (, global, >]
[;, return, (, global, <, -, 1.0e-10, ), ?, Side, ., MINUS, :, (, (, global, >, 1.0e-10, ), ?]
[;, return, (, global, <, -, 1.0e-10, ), ?, Side, ., MINUS, :, (, (, global, >, 1.0e-10, ), ?]
[<, -, 1.0e-10, ), ?, Side, ., MINUS, :, (, (, global, >, 1.0e-10, ), ?, Side, ., PLUS, :]
[<, -, 1.0e-10, ), ?, Side, ., MINUS, :, (, (, global, >, 1.0e-10, ), ?, Side, ., PLUS, :]
[(, (, global, >, 1.0e-10, ), ?, Side, ., PLUS, :, Side, ., HYPER, ), ;, }, Vector2D, p, =]
[(, (, global, >, 1.0e-10, ), ?, Side, ., PLUS, :, Side, ., HYPER, ), ;, }, Vector2D, p, =]
[1.0e-10, ), ?, Side, ., PLUS, :, Side, ., HYPER, ), ;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (]
[1.0e-10, ), ?, Side, ., PLUS, :, Side, ., HYPER, ), ;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (]
[., PLUS, :, Side, ., HYPER, ), ;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (]
[., PLUS, :, Side, ., HYPER, ), ;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (]
[Vector2D, p, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ZERO, ), ), ;, Vector2D, q, =]
[Vector2D, p, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ZERO, ), ), ;, Vector2D, q, =]
[., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ZERO, ), ), ;, Vector2D, q, =, thisPlane, ., toSubSpace, (]
[., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ZERO, ), ), ;, Vector2D, q, =, thisPlane, ., toSubSpace, (]
[., toSpace, (, Vector1D, ., ZERO, ), ), ;, Vector2D, q, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (]
[., toSpace, (, Vector1D, ., ZERO, ), ), ;, Vector2D, q, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (]
[Vector2D, q, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ONE, ), ), ;, Vector3D, crossP, =]
[Vector2D, q, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ONE, ), ), ;, Vector3D, crossP, =]
[., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ONE, ), ), ;, Vector3D, crossP, =, Vector3D, ., crossProduct, (]
[., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ONE, ), ), ;, Vector3D, crossP, =, Vector3D, ., crossProduct, (]
[(, Vector1D, ., ONE, ), ), ;, Vector3D, crossP, =, Vector3D, ., crossProduct, (, inter, ., getDirection, (, ), ,]
[(, Vector1D, ., ONE, ), ), ;, Vector3D, crossP, =, Vector3D, ., crossProduct, (, inter, ., getDirection, (, ), ,]
[=, Vector3D, ., crossProduct, (, inter, ., getDirection, (, ), ,, thisPlane, ., getNormal, (, ), ), ;, if, (]
[=, Vector3D, ., crossProduct, (, inter, ., getDirection, (, ), ,, thisPlane, ., getNormal, (, ), ), ;, if, (]
[=, Vector3D, ., crossProduct, (, inter, ., getDirection, (, ), ,, thisPlane, ., getNormal, (, ), ), ;, if, (]
[(, inter, ., getDirection, (, ), ,, thisPlane, ., getNormal, (, ), ), ;, if, (, crossP, ., dotProduct, (]
[(, inter, ., getDirection, (, ), ,, thisPlane, ., getNormal, (, ), ), ;, if, (, crossP, ., dotProduct, (]
[thisPlane, ., getNormal, (, ), ), ;, if, (, crossP, ., dotProduct, (, otherPlane, ., getNormal, (, ), ), <]
[if, (, crossP, ., dotProduct, (, otherPlane, ., getNormal, (, ), ), <, 0, ), {, final, Vector2D, tmp, =]
[crossP, ., dotProduct, (, otherPlane, ., getNormal, (, ), ), <, 0, ), {, final, Vector2D, tmp, =, p, ;]
[dotProduct, (, otherPlane, ., getNormal, (, ), ), <, 0, ), {, final, Vector2D, tmp, =, p, ;, p, =]
[otherPlane, ., getNormal, (, ), ), <, 0, ), {, final, Vector2D, tmp, =, p, ;, p, =, q, ;]
[getNormal, (, ), ), <, 0, ), {, final, Vector2D, tmp, =, p, ;, p, =, q, ;, q, =]
[;, }, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, line2D, =]
[Line, line2D, =, new, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (]
[=, new, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (, p, ,]
[apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (, p, ,, q, ), ;, return]
[apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (, p, ,, q, ), ;, return]
[geometry, ., euclidean, ., twod, ., Line, (, p, ,, q, ), ;, return, getRemainingRegion, (, ), ., side, (]
[@, Override, public, SplitSubHyperplane, <, Euclidean3D, >, split, (, Hyperplane, <, Euclidean3D, >, hyperplane, ), {, final, Plane, otherPlane, =]
[SplitSubHyperplane, <, Euclidean3D, >, split, (, Hyperplane, <, Euclidean3D, >, hyperplane, ), {, final, Plane, otherPlane, =, (, Plane, )]
[Hyperplane, <, Euclidean3D, >, hyperplane, ), {, final, Plane, otherPlane, =, (, Plane, ), hyperplane, ;, final, Plane, thisPlane, =]
[>, hyperplane, ), {, final, Plane, otherPlane, =, (, Plane, ), hyperplane, ;, final, Plane, thisPlane, =, (, Plane, )]
[(, Plane, ), hyperplane, ;, final, Plane, thisPlane, =, (, Plane, ), getHyperplane, (, ), ;, final, Line, inter, =]
[(, Plane, ), hyperplane, ;, final, Plane, thisPlane, =, (, Plane, ), getHyperplane, (, ), ;, final, Line, inter, =]
[;, final, Plane, thisPlane, =, (, Plane, ), getHyperplane, (, ), ;, final, Line, inter, =, otherPlane, ., intersection, (]
[(, Plane, ), getHyperplane, (, ), ;, final, Line, inter, =, otherPlane, ., intersection, (, thisPlane, ), ;, if, (]
[(, Plane, ), getHyperplane, (, ), ;, final, Line, inter, =, otherPlane, ., intersection, (, thisPlane, ), ;, if, (]
[), getHyperplane, (, ), ;, final, Line, inter, =, otherPlane, ., intersection, (, thisPlane, ), ;, if, (, inter, ==]
[inter, =, otherPlane, ., intersection, (, thisPlane, ), ;, if, (, inter, ==, null, ), {, final, double, global, =]
[inter, =, otherPlane, ., intersection, (, thisPlane, ), ;, if, (, inter, ==, null, ), {, final, double, global, =]
[intersection, (, thisPlane, ), ;, if, (, inter, ==, null, ), {, final, double, global, =, otherPlane, ., getOffset, (]
[;, if, (, inter, ==, null, ), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return]
[;, if, (, inter, ==, null, ), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return]
[if, (, inter, ==, null, ), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return, (]
[if, (, inter, ==, null, ), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return, (]
[inter, ==, null, ), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return, (, global, <]
[==, null, ), {, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return, (, global, <, -]
[{, final, double, global, =, otherPlane, ., getOffset, (, thisPlane, ), ;, return, (, global, <, -, 1.0e-10, ), ?]
[., getOffset, (, thisPlane, ), ;, return, (, global, <, -, 1.0e-10, ), ?, new, SplitSubHyperplane, <, Euclidean3D, >, (]
[(, thisPlane, ), ;, return, (, global, <, -, 1.0e-10, ), ?, new, SplitSubHyperplane, <, Euclidean3D, >, (, null, ,]
[;, return, (, global, <, -, 1.0e-10, ), ?, new, SplitSubHyperplane, <, Euclidean3D, >, (, null, ,, this, ), :]
[1.0e-10, ), ?, new, SplitSubHyperplane, <, Euclidean3D, >, (, null, ,, this, ), :, new, SplitSubHyperplane, <, Euclidean3D, >, (]
[?, new, SplitSubHyperplane, <, Euclidean3D, >, (, null, ,, this, ), :, new, SplitSubHyperplane, <, Euclidean3D, >, (, this, ,]
[null, ,, this, ), :, new, SplitSubHyperplane, <, Euclidean3D, >, (, this, ,, null, ), ;, }, Vector2D, p, =]
[null, ,, this, ), :, new, SplitSubHyperplane, <, Euclidean3D, >, (, this, ,, null, ), ;, }, Vector2D, p, =]
[:, new, SplitSubHyperplane, <, Euclidean3D, >, (, this, ,, null, ), ;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (]
[:, new, SplitSubHyperplane, <, Euclidean3D, >, (, this, ,, null, ), ;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (]
[Euclidean3D, >, (, this, ,, null, ), ;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (]
[Euclidean3D, >, (, this, ,, null, ), ;, }, Vector2D, p, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (]
[Vector2D, p, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ZERO, ), ), ;, Vector2D, q, =]
[Vector2D, p, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ZERO, ), ), ;, Vector2D, q, =]
[., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ZERO, ), ), ;, Vector2D, q, =, thisPlane, ., toSubSpace, (]
[., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ZERO, ), ), ;, Vector2D, q, =, thisPlane, ., toSubSpace, (]
[., toSpace, (, Vector1D, ., ZERO, ), ), ;, Vector2D, q, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (]
[., toSpace, (, Vector1D, ., ZERO, ), ), ;, Vector2D, q, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (]
[Vector2D, q, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ONE, ), ), ;, Vector3D, crossP, =]
[Vector2D, q, =, thisPlane, ., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ONE, ), ), ;, Vector3D, crossP, =]
[., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ONE, ), ), ;, Vector3D, crossP, =, Vector3D, ., crossProduct, (]
[., toSubSpace, (, inter, ., toSpace, (, Vector1D, ., ONE, ), ), ;, Vector3D, crossP, =, Vector3D, ., crossProduct, (]
[(, Vector1D, ., ONE, ), ), ;, Vector3D, crossP, =, Vector3D, ., crossProduct, (, inter, ., getDirection, (, ), ,]
[(, Vector1D, ., ONE, ), ), ;, Vector3D, crossP, =, Vector3D, ., crossProduct, (, inter, ., getDirection, (, ), ,]
[=, Vector3D, ., crossProduct, (, inter, ., getDirection, (, ), ,, thisPlane, ., getNormal, (, ), ), ;, if, (]
[=, Vector3D, ., crossProduct, (, inter, ., getDirection, (, ), ,, thisPlane, ., getNormal, (, ), ), ;, if, (]
[=, Vector3D, ., crossProduct, (, inter, ., getDirection, (, ), ,, thisPlane, ., getNormal, (, ), ), ;, if, (]
[(, inter, ., getDirection, (, ), ,, thisPlane, ., getNormal, (, ), ), ;, if, (, crossP, ., dotProduct, (]
[(, inter, ., getDirection, (, ), ,, thisPlane, ., getNormal, (, ), ), ;, if, (, crossP, ., dotProduct, (]
[thisPlane, ., getNormal, (, ), ), ;, if, (, crossP, ., dotProduct, (, otherPlane, ., getNormal, (, ), ), <]
[if, (, crossP, ., dotProduct, (, otherPlane, ., getNormal, (, ), ), <, 0, ), {, final, Vector2D, tmp, =]
[crossP, ., dotProduct, (, otherPlane, ., getNormal, (, ), ), <, 0, ), {, final, Vector2D, tmp, =, p, ;]
[dotProduct, (, otherPlane, ., getNormal, (, ), ), <, 0, ), {, final, Vector2D, tmp, =, p, ;, p, =]
[otherPlane, ., getNormal, (, ), ), <, 0, ), {, final, Vector2D, tmp, =, p, ;, p, =, q, ;]
[getNormal, (, ), ), <, 0, ), {, final, Vector2D, tmp, =, p, ;, p, =, q, ;, q, =]
[tmp, =, p, ;, p, =, q, ;, q, =, tmp, ;, }, final, SubHyperplane, <, Euclidean2D, >, l2DMinus, =]
[tmp, =, p, ;, p, =, q, ;, q, =, tmp, ;, }, final, SubHyperplane, <, Euclidean2D, >, l2DMinus, =]
[>, l2DMinus, =, new, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (]
[=, new, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (, p, ,]
[twod, ., Line, (, p, ,, q, ), ., wholeHyperplane, (, ), ;, final, SubHyperplane, <, Euclidean2D, >, l2DPlus, =]
[twod, ., Line, (, p, ,, q, ), ., wholeHyperplane, (, ), ;, final, SubHyperplane, <, Euclidean2D, >, l2DPlus, =]
[>, l2DPlus, =, new, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (]
[=, new, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (, q, ,]
[twod, ., Line, (, q, ,, p, ), ., wholeHyperplane, (, ), ;, final, BSPTree, <, Euclidean2D, >, splitTree, =]
[twod, ., Line, (, q, ,, p, ), ., wholeHyperplane, (, ), ;, final, BSPTree, <, Euclidean2D, >, splitTree, =]
[twod, ., Line, (, q, ,, p, ), ., wholeHyperplane, (, ), ;, final, BSPTree, <, Euclidean2D, >, splitTree, =]
[p, ), ., wholeHyperplane, (, ), ;, final, BSPTree, <, Euclidean2D, >, splitTree, =, getRemainingRegion, (, ), ., getTree, (]
[), ;, final, BSPTree, <, Euclidean2D, >, splitTree, =, getRemainingRegion, (, ), ., getTree, (, false, ), ., split, (]
[(, ), ., getTree, (, false, ), ., split, (, l2DMinus, ), ;, final, BSPTree, <, Euclidean2D, >, plusTree, =]
[(, ), ., getTree, (, false, ), ., split, (, l2DMinus, ), ;, final, BSPTree, <, Euclidean2D, >, plusTree, =]
[(, ), ., getTree, (, false, ), ., split, (, l2DMinus, ), ;, final, BSPTree, <, Euclidean2D, >, plusTree, =]
[), ., split, (, l2DMinus, ), ;, final, BSPTree, <, Euclidean2D, >, plusTree, =, getRemainingRegion, (, ), ., isEmpty, (]
[), ., split, (, l2DMinus, ), ;, final, BSPTree, <, Euclidean2D, >, plusTree, =, getRemainingRegion, (, ), ., isEmpty, (]
[final, BSPTree, <, Euclidean2D, >, plusTree, =, getRemainingRegion, (, ), ., isEmpty, (, splitTree, ., getPlus, (, ), ), ?]
[=, getRemainingRegion, (, ), ., isEmpty, (, splitTree, ., getPlus, (, ), ), ?, new, BSPTree, <, Euclidean2D, >, (]
[=, getRemainingRegion, (, ), ., isEmpty, (, splitTree, ., getPlus, (, ), ), ?, new, BSPTree, <, Euclidean2D, >, (]
[isEmpty, (, splitTree, ., getPlus, (, ), ), ?, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), :]
[), ), ?, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), :, new, BSPTree, <, Euclidean2D, >, (]
[?, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), :, new, BSPTree, <, Euclidean2D, >, (, l2DPlus, ,]
[(, Boolean, ., FALSE, ), :, new, BSPTree, <, Euclidean2D, >, (, l2DPlus, ,, new, BSPTree, <, Euclidean2D, >, (]
[(, Boolean, ., FALSE, ), :, new, BSPTree, <, Euclidean2D, >, (, l2DPlus, ,, new, BSPTree, <, Euclidean2D, >, (]
[:, new, BSPTree, <, Euclidean2D, >, (, l2DPlus, ,, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), ,]
[:, new, BSPTree, <, Euclidean2D, >, (, l2DPlus, ,, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), ,]
[(, l2DPlus, ,, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), ,, splitTree, ., getPlus, (, ), ,]
[., FALSE, ), ,, splitTree, ., getPlus, (, ), ,, null, ), ;, final, BSPTree, <, Euclidean2D, >, minusTree, =]
[., FALSE, ), ,, splitTree, ., getPlus, (, ), ,, null, ), ;, final, BSPTree, <, Euclidean2D, >, minusTree, =]
[., FALSE, ), ,, splitTree, ., getPlus, (, ), ,, null, ), ;, final, BSPTree, <, Euclidean2D, >, minusTree, =]
[getPlus, (, ), ,, null, ), ;, final, BSPTree, <, Euclidean2D, >, minusTree, =, getRemainingRegion, (, ), ., isEmpty, (]
[getPlus, (, ), ,, null, ), ;, final, BSPTree, <, Euclidean2D, >, minusTree, =, getRemainingRegion, (, ), ., isEmpty, (]
[final, BSPTree, <, Euclidean2D, >, minusTree, =, getRemainingRegion, (, ), ., isEmpty, (, splitTree, ., getMinus, (, ), ), ?]
[=, getRemainingRegion, (, ), ., isEmpty, (, splitTree, ., getMinus, (, ), ), ?, new, BSPTree, <, Euclidean2D, >, (]
[=, getRemainingRegion, (, ), ., isEmpty, (, splitTree, ., getMinus, (, ), ), ?, new, BSPTree, <, Euclidean2D, >, (]
[isEmpty, (, splitTree, ., getMinus, (, ), ), ?, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), :]
[), ), ?, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), :, new, BSPTree, <, Euclidean2D, >, (]
[?, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), :, new, BSPTree, <, Euclidean2D, >, (, l2DMinus, ,]
[(, Boolean, ., FALSE, ), :, new, BSPTree, <, Euclidean2D, >, (, l2DMinus, ,, new, BSPTree, <, Euclidean2D, >, (]
[(, Boolean, ., FALSE, ), :, new, BSPTree, <, Euclidean2D, >, (, l2DMinus, ,, new, BSPTree, <, Euclidean2D, >, (]
[:, new, BSPTree, <, Euclidean2D, >, (, l2DMinus, ,, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), ,]
[:, new, BSPTree, <, Euclidean2D, >, (, l2DMinus, ,, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), ,]
[(, l2DMinus, ,, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), ,, splitTree, ., getMinus, (, ), ,]
[BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), ,, splitTree, ., getMinus, (, ), ,, null, ), ;, return]
[., FALSE, ), ,, splitTree, ., getMinus, (, ), ,, null, ), ;, return, new, SplitSubHyperplane, <, Euclidean3D, >, (]
[,, splitTree, ., getMinus, (, ), ,, null, ), ;, return, new, SplitSubHyperplane, <, Euclidean3D, >, (, new, SubPlane, (]
[,, splitTree, ., getMinus, (, ), ,, null, ), ;, return, new, SplitSubHyperplane, <, Euclidean3D, >, (, new, SubPlane, (]
[,, null, ), ;, return, new, SplitSubHyperplane, <, Euclidean3D, >, (, new, SubPlane, (, thisPlane, ., copySelf, (, ), ,]
[;, return, new, SplitSubHyperplane, <, Euclidean3D, >, (, new, SubPlane, (, thisPlane, ., copySelf, (, ), ,, new, PolygonsSet, (]
[<, Euclidean3D, >, (, new, SubPlane, (, thisPlane, ., copySelf, (, ), ,, new, PolygonsSet, (, plusTree, ), ), ,]
[(, new, SubPlane, (, thisPlane, ., copySelf, (, ), ,, new, PolygonsSet, (, plusTree, ), ), ,, new, SubPlane, (]
[(, new, SubPlane, (, thisPlane, ., copySelf, (, ), ,, new, PolygonsSet, (, plusTree, ), ), ,, new, SubPlane, (]
[copySelf, (, ), ,, new, PolygonsSet, (, plusTree, ), ), ,, new, SubPlane, (, thisPlane, ., copySelf, (, ), ,]
[,, new, PolygonsSet, (, plusTree, ), ), ,, new, SubPlane, (, thisPlane, ., copySelf, (, ), ,, new, PolygonsSet, (]
