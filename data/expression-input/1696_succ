[,, 0d, ), ;, }, public, QRDecomposition, (, RealMatrix, matrix, ,, double, threshold, ), {, this, ., threshold, =, threshold]
[), ;, }, public, QRDecomposition, (, RealMatrix, matrix, ,, double, threshold, ), {, this, ., threshold, =, threshold, ;, final]
[=, threshold, ;, final, int, m, =, matrix, ., getRowDimension, (, ), ;, final, int, n, =, matrix, ., getColumnDimension]
[., threshold, =, threshold, ;, final, int, m, =, matrix, ., getRowDimension, (, ), ;, final, int, n, =, matrix]
[;, final, int, m, =, matrix, ., getRowDimension, (, ), ;, final, int, n, =, matrix, ., getColumnDimension, (, )]
[;, final, int, n, =, matrix, ., getColumnDimension, (, ), ;, qrt, =, matrix, ., transpose, (, ), ., getData]
[., getRowDimension, (, ), ;, final, int, n, =, matrix, ., getColumnDimension, (, ), ;, qrt, =, matrix, ., transpose]
[;, qrt, =, matrix, ., transpose, (, ), ., getData, (, ), ;, rDiag, =, new, double, [, FastMath, .]
[., getColumnDimension, (, ), ;, qrt, =, matrix, ., transpose, (, ), ., getData, (, ), ;, rDiag, =, new]
[=, matrix, ., transpose, (, ), ., getData, (, ), ;, rDiag, =, new, double, [, FastMath, ., min, (]
[;, rDiag, =, new, double, [, FastMath, ., min, (, m, ,, n, ), ], ;, cachedQ, =, null, ;]
[., getData, (, ), ;, rDiag, =, new, double, [, FastMath, ., min, (, m, ,, n, ), ], ;]
[., transpose, (, ), ., getData, (, ), ;, rDiag, =, new, double, [, FastMath, ., min, (, m, ,]
[=, new, double, [, FastMath, ., min, (, m, ,, n, ), ], ;, cachedQ, =, null, ;, cachedQT, =]
[;, cachedQ, =, null, ;, cachedQT, =, null, ;, cachedR, =, null, ;, cachedH, =, null, ;, decompose, (, qrt]
[], ;, cachedQ, =, null, ;, cachedQT, =, null, ;, cachedR, =, null, ;, cachedH, =, null, ;, decompose, (]
[., min, (, m, ,, n, ), ], ;, cachedQ, =, null, ;, cachedQT, =, null, ;, cachedR, =, null]
[,, n, ), ], ;, cachedQ, =, null, ;, cachedQT, =, null, ;, cachedR, =, null, ;, cachedH, =, null]
[), ], ;, cachedQ, =, null, ;, cachedQT, =, null, ;, cachedR, =, null, ;, cachedH, =, null, ;, decompose]
[=, null, ;, cachedQT, =, null, ;, cachedR, =, null, ;, cachedH, =, null, ;, decompose, (, qrt, ), ;]
[;, cachedQT, =, null, ;, cachedR, =, null, ;, cachedH, =, null, ;, decompose, (, qrt, ), ;, }, protected]
[=, null, ;, cachedR, =, null, ;, cachedH, =, null, ;, decompose, (, qrt, ), ;, }, protected, void, decompose]
[;, cachedR, =, null, ;, cachedH, =, null, ;, decompose, (, qrt, ), ;, }, protected, void, decompose, (, double]
[=, null, ;, cachedH, =, null, ;, decompose, (, qrt, ), ;, }, protected, void, decompose, (, double, [, ]]
[;, cachedH, =, null, ;, decompose, (, qrt, ), ;, }, protected, void, decompose, (, double, [, ], [, ]]
[=, null, ;, decompose, (, qrt, ), ;, }, protected, void, decompose, (, double, [, ], [, ], matrix, )]
[;, decompose, (, qrt, ), ;, }, protected, void, decompose, (, double, [, ], [, ], matrix, ), {, for]
[;, }, protected, void, decompose, (, double, [, ], [, ], matrix, ), {, for, (, int, minor, =, 0]
[), ;, }, protected, void, decompose, (, double, [, ], [, ], matrix, ), {, for, (, int, minor, =]
[;, minor, <, FastMath, ., min, (, qrt, ., length, ,, qrt, [, 0, ], ., length, ), ;, minor]
[;, minor, ++, ), {, performHouseholderReflection, (, minor, ,, qrt, ), ;, }, }, protected, void, performHouseholderReflection, (, int, minor]
[<, FastMath, ., min, (, qrt, ., length, ,, qrt, [, 0, ], ., length, ), ;, minor, ++, )]
[;, minor, ++, ), {, performHouseholderReflection, (, minor, ,, qrt, ), ;, }, }, protected, void, performHouseholderReflection, (, int, minor]
[., min, (, qrt, ., length, ,, qrt, [, 0, ], ., length, ), ;, minor, ++, ), {, performHouseholderReflection]
[,, qrt, [, 0, ], ., length, ), ;, minor, ++, ), {, performHouseholderReflection, (, minor, ,, qrt, ), ;]
[., length, ,, qrt, [, 0, ], ., length, ), ;, minor, ++, ), {, performHouseholderReflection, (, minor, ,, qrt]
[), ;, minor, ++, ), {, performHouseholderReflection, (, minor, ,, qrt, ), ;, }, }, protected, void, performHouseholderReflection, (, int]
[., length, ), ;, minor, ++, ), {, performHouseholderReflection, (, minor, ,, qrt, ), ;, }, }, protected, void, performHouseholderReflection]
[[, 0, ], ., length, ), ;, minor, ++, ), {, performHouseholderReflection, (, minor, ,, qrt, ), ;, }, }]
[], ., length, ), ;, minor, ++, ), {, performHouseholderReflection, (, minor, ,, qrt, ), ;, }, }, protected, void]
[), {, performHouseholderReflection, (, minor, ,, qrt, ), ;, }, }, protected, void, performHouseholderReflection, (, int, minor, ,, double, []
[++, ), {, performHouseholderReflection, (, minor, ,, qrt, ), ;, }, }, protected, void, performHouseholderReflection, (, int, minor, ,, double]
[;, }, }, protected, void, performHouseholderReflection, (, int, minor, ,, double, [, ], [, ], matrix, ), {, final, double]
[,, qrt, ), ;, }, }, protected, void, performHouseholderReflection, (, int, minor, ,, double, [, ], [, ], matrix, )]
[), ;, }, }, protected, void, performHouseholderReflection, (, int, minor, ,, double, [, ], [, ], matrix, ), {, final]
[;, double, xNormSqr, =, 0, ;, for, (, int, row, =, minor, ;, row, <, qrtMinor, ., length, ;, row]
[[, minor, ], ;, double, xNormSqr, =, 0, ;, for, (, int, row, =, minor, ;, row, <, qrtMinor, .]
[], ;, double, xNormSqr, =, 0, ;, for, (, int, row, =, minor, ;, row, <, qrtMinor, ., length, ;]
[;, for, (, int, row, =, minor, ;, row, <, qrtMinor, ., length, ;, row, ++, ), {, final, double]
[;, row, <, qrtMinor, ., length, ;, row, ++, ), {, final, double, c, =, qrtMinor, [, row, ], ;]
[;, row, ++, ), {, final, double, c, =, qrtMinor, [, row, ], ;, xNormSqr, +=, c, *, c, ;]
[<, qrtMinor, ., length, ;, row, ++, ), {, final, double, c, =, qrtMinor, [, row, ], ;, xNormSqr, +=]
[;, row, ++, ), {, final, double, c, =, qrtMinor, [, row, ], ;, xNormSqr, +=, c, *, c, ;]
[., length, ;, row, ++, ), {, final, double, c, =, qrtMinor, [, row, ], ;, xNormSqr, +=, c, *]
[), {, final, double, c, =, qrtMinor, [, row, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double]
[++, ), {, final, double, c, =, qrtMinor, [, row, ], ;, xNormSqr, +=, c, *, c, ;, }, final]
[;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (, qrtMinor, [, minor, ], >, 0, )]
[[, row, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (, qrtMinor, [, minor, ]]
[], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (, qrtMinor, [, minor, ], >, 0]
[+=, c, *, c, ;, }, final, double, a, =, (, qrtMinor, [, minor, ], >, 0, ), ?, -]
[;, }, final, double, a, =, (, qrtMinor, [, minor, ], >, 0, ), ?, -, FastMath, ., sqrt, (]
[*, c, ;, }, final, double, a, =, (, qrtMinor, [, minor, ], >, 0, ), ?, -, FastMath, .]
[;, }, final, double, a, =, (, qrtMinor, [, minor, ], >, 0, ), ?, -, FastMath, ., sqrt, (]
[;, rDiag, [, minor, ], =, a, ;, if, (, a, !=, 0.0, ), {, qrtMinor, [, minor, ], -=]
[?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, rDiag, [, minor, ]]
[), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, rDiag, [, minor]
[>, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, rDiag]
[[, minor, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr]
[], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;]
[), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, rDiag, [, minor]
[:, FastMath, ., sqrt, (, xNormSqr, ), ;, rDiag, [, minor, ], =, a, ;, if, (, a, !=, 0.0]
[:, FastMath, ., sqrt, (, xNormSqr, ), ;, rDiag, [, minor, ], =, a, ;, if, (, a, !=, 0.0]
[., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, rDiag, [, minor, ], =, a, ;]
[), :, FastMath, ., sqrt, (, xNormSqr, ), ;, rDiag, [, minor, ], =, a, ;, if, (, a, !=]
[;, rDiag, [, minor, ], =, a, ;, if, (, a, !=, 0.0, ), {, qrtMinor, [, minor, ], -=]
[., sqrt, (, xNormSqr, ), ;, rDiag, [, minor, ], =, a, ;, if, (, a, !=, 0.0, ), {]
[), ;, rDiag, [, minor, ], =, a, ;, if, (, a, !=, 0.0, ), {, qrtMinor, [, minor, ]]
[=, a, ;, if, (, a, !=, 0.0, ), {, qrtMinor, [, minor, ], -=, a, ;, for, (, int]
[[, minor, ], =, a, ;, if, (, a, !=, 0.0, ), {, qrtMinor, [, minor, ], -=, a, ;]
[], =, a, ;, if, (, a, !=, 0.0, ), {, qrtMinor, [, minor, ], -=, a, ;, for, (]
[;, if, (, a, !=, 0.0, ), {, qrtMinor, [, minor, ], -=, a, ;, for, (, int, col, =]
[), {, qrtMinor, [, minor, ], -=, a, ;, for, (, int, col, =, minor, +, 1, ;, col, <]
[!=, 0.0, ), {, qrtMinor, [, minor, ], -=, a, ;, for, (, int, col, =, minor, +, 1, ;]
[), {, qrtMinor, [, minor, ], -=, a, ;, for, (, int, col, =, minor, +, 1, ;, col, <]
[-=, a, ;, for, (, int, col, =, minor, +, 1, ;, col, <, qrt, ., length, ;, col, ++]
[[, minor, ], -=, a, ;, for, (, int, col, =, minor, +, 1, ;, col, <, qrt, ., length]
[], -=, a, ;, for, (, int, col, =, minor, +, 1, ;, col, <, qrt, ., length, ;, col]
[;, for, (, int, col, =, minor, +, 1, ;, col, <, qrt, ., length, ;, col, ++, ), {]
[;, col, <, qrt, ., length, ;, col, ++, ), {, final, double, [, ], qrtCol, =, qrt, [, col]
[+, 1, ;, col, <, qrt, ., length, ;, col, ++, ), {, final, double, [, ], qrtCol, =, qrt]
[;, col, <, qrt, ., length, ;, col, ++, ), {, final, double, [, ], qrtCol, =, qrt, [, col]
[;, col, ++, ), {, final, double, [, ], qrtCol, =, qrt, [, col, ], ;, double, alpha, =, 0]
[<, qrt, ., length, ;, col, ++, ), {, final, double, [, ], qrtCol, =, qrt, [, col, ], ;]
[;, col, ++, ), {, final, double, [, ], qrtCol, =, qrt, [, col, ], ;, double, alpha, =, 0]
[., length, ;, col, ++, ), {, final, double, [, ], qrtCol, =, qrt, [, col, ], ;, double, alpha]
[), {, final, double, [, ], qrtCol, =, qrt, [, col, ], ;, double, alpha, =, 0, ;, for, (]
[++, ), {, final, double, [, ], qrtCol, =, qrt, [, col, ], ;, double, alpha, =, 0, ;, for]
[;, double, alpha, =, 0, ;, for, (, int, row, =, minor, ;, row, <, qrtCol, ., length, ;, row]
[[, col, ], ;, double, alpha, =, 0, ;, for, (, int, row, =, minor, ;, row, <, qrtCol, .]
[], ;, double, alpha, =, 0, ;, for, (, int, row, =, minor, ;, row, <, qrtCol, ., length, ;]
[;, for, (, int, row, =, minor, ;, row, <, qrtCol, ., length, ;, row, ++, ), {, alpha, -=]
[;, row, <, qrtCol, ., length, ;, row, ++, ), {, alpha, -=, qrtCol, [, row, ], *, qrtMinor, []
[;, row, ++, ), {, alpha, -=, qrtCol, [, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=]
[<, qrtCol, ., length, ;, row, ++, ), {, alpha, -=, qrtCol, [, row, ], *, qrtMinor, [, row, ]]
[;, row, ++, ), {, alpha, -=, qrtCol, [, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=]
[., length, ;, row, ++, ), {, alpha, -=, qrtCol, [, row, ], *, qrtMinor, [, row, ], ;, }]
[), {, alpha, -=, qrtCol, [, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=, a, *, qrtMinor]
[++, ), {, alpha, -=, qrtCol, [, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=, a, *]
[-=, qrtCol, [, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=, a, *, qrtMinor, [, minor, ]]
[;, }, alpha, /=, a, *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <]
[*, qrtMinor, [, row, ], ;, }, alpha, /=, a, *, qrtMinor, [, minor, ], ;, for, (, int, row]
[[, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=, a, *, qrtMinor, [, minor, ], ;, for]
[], *, qrtMinor, [, row, ], ;, }, alpha, /=, a, *, qrtMinor, [, minor, ], ;, for, (, int]
[;, }, alpha, /=, a, *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <]
[[, row, ], ;, }, alpha, /=, a, *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor]
[], ;, }, alpha, /=, a, *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row]
[/=, a, *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <, qrtCol, ., length]
[;, for, (, int, row, =, minor, ;, row, <, qrtCol, ., length, ;, row, ++, ), {, qrtCol, []
[*, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <, qrtCol, ., length, ;, row]
[;, for, (, int, row, =, minor, ;, row, <, qrtCol, ., length, ;, row, ++, ), {, qrtCol, []
[[, minor, ], ;, for, (, int, row, =, minor, ;, row, <, qrtCol, ., length, ;, row, ++, )]
[], ;, for, (, int, row, =, minor, ;, row, <, qrtCol, ., length, ;, row, ++, ), {, qrtCol]
[;, row, <, qrtCol, ., length, ;, row, ++, ), {, qrtCol, [, row, ], -=, alpha, *, qrtMinor, []
[;, row, ++, ), {, qrtCol, [, row, ], -=, alpha, *, qrtMinor, [, row, ], ;, }, }, }]
[<, qrtCol, ., length, ;, row, ++, ), {, qrtCol, [, row, ], -=, alpha, *, qrtMinor, [, row, ]]
[;, row, ++, ), {, qrtCol, [, row, ], -=, alpha, *, qrtMinor, [, row, ], ;, }, }, }]
[., length, ;, row, ++, ), {, qrtCol, [, row, ], -=, alpha, *, qrtMinor, [, row, ], ;, }]
[), {, qrtCol, [, row, ], -=, alpha, *, qrtMinor, [, row, ], ;, }, }, }, }, public, RealMatrix]
[++, ), {, qrtCol, [, row, ], -=, alpha, *, qrtMinor, [, row, ], ;, }, }, }, }, public]
[-=, alpha, *, qrtMinor, [, row, ], ;, }, }, }, }, public, RealMatrix, getR, (, ), {, if, (]
[[, row, ], -=, alpha, *, qrtMinor, [, row, ], ;, }, }, }, }, public, RealMatrix, getR, (, )]
[], -=, alpha, *, qrtMinor, [, row, ], ;, }, }, }, }, public, RealMatrix, getR, (, ), {, if]
[;, }, }, }, }, public, RealMatrix, getR, (, ), {, if, (, cachedR, ==, null, ), {, final, int]
[*, qrtMinor, [, row, ], ;, }, }, }, }, public, RealMatrix, getR, (, ), {, if, (, cachedR, ==]
[;, }, }, }, }, public, RealMatrix, getR, (, ), {, if, (, cachedR, ==, null, ), {, final, int]
[[, row, ], ;, }, }, }, }, public, RealMatrix, getR, (, ), {, if, (, cachedR, ==, null, )]
[], ;, }, }, }, }, public, RealMatrix, getR, (, ), {, if, (, cachedR, ==, null, ), {, final]
[), {, final, int, n, =, qrt, ., length, ;, final, int, m, =, qrt, [, 0, ], ., length]
[==, null, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =, qrt, [, 0, ]]
[), {, final, int, n, =, qrt, ., length, ;, final, int, m, =, qrt, [, 0, ], ., length]
[;, final, int, m, =, qrt, [, 0, ], ., length, ;, double, [, ], [, ], ra, =, new]
[., length, ;, final, int, m, =, qrt, [, 0, ], ., length, ;, double, [, ], [, ], ra]
[;, double, [, ], [, ], ra, =, new, double, [, m, ], [, n, ], ;, for, (, int]
[., length, ;, double, [, ], [, ], ra, =, new, double, [, m, ], [, n, ], ;, for]
[[, 0, ], ., length, ;, double, [, ], [, ], ra, =, new, double, [, m, ], [, n]
[], ., length, ;, double, [, ], [, ], ra, =, new, double, [, m, ], [, n, ], ;]
[;, for, (, int, row, =, FastMath, ., min, (, m, ,, n, ), -, 1, ;, row, >=, 0]
[], [, n, ], ;, for, (, int, row, =, FastMath, ., min, (, m, ,, n, ), -, 1]
[], ;, for, (, int, row, =, FastMath, ., min, (, m, ,, n, ), -, 1, ;, row, >=]
[;, row, >=, 0, ;, row, --, ), {, ra, [, row, ], [, row, ], =, rDiag, [, row]
[-, 1, ;, row, >=, 0, ;, row, --, ), {, ra, [, row, ], [, row, ], =, rDiag]
[., min, (, m, ,, n, ), -, 1, ;, row, >=, 0, ;, row, --, ), {, ra, []
[,, n, ), -, 1, ;, row, >=, 0, ;, row, --, ), {, ra, [, row, ], [, row]
[), -, 1, ;, row, >=, 0, ;, row, --, ), {, ra, [, row, ], [, row, ], =]
[;, row, >=, 0, ;, row, --, ), {, ra, [, row, ], [, row, ], =, rDiag, [, row]
[;, row, --, ), {, ra, [, row, ], [, row, ], =, rDiag, [, row, ], ;, for, (]
[>=, 0, ;, row, --, ), {, ra, [, row, ], [, row, ], =, rDiag, [, row, ], ;]
[;, row, --, ), {, ra, [, row, ], [, row, ], =, rDiag, [, row, ], ;, for, (]
[), {, ra, [, row, ], [, row, ], =, rDiag, [, row, ], ;, for, (, int, col, =]
[--, ), {, ra, [, row, ], [, row, ], =, rDiag, [, row, ], ;, for, (, int, col]
[=, rDiag, [, row, ], ;, for, (, int, col, =, row, +, 1, ;, col, <, n, ;, col]
[[, row, ], =, rDiag, [, row, ], ;, for, (, int, col, =, row, +, 1, ;, col, <]
[[, row, ], [, row, ], =, rDiag, [, row, ], ;, for, (, int, col, =, row, +, 1]
[], [, row, ], =, rDiag, [, row, ], ;, for, (, int, col, =, row, +, 1, ;, col]
[], =, rDiag, [, row, ], ;, for, (, int, col, =, row, +, 1, ;, col, <, n, ;]
[;, for, (, int, col, =, row, +, 1, ;, col, <, n, ;, col, ++, ), {, ra, []
[[, row, ], ;, for, (, int, col, =, row, +, 1, ;, col, <, n, ;, col, ++, )]
[], ;, for, (, int, col, =, row, +, 1, ;, col, <, n, ;, col, ++, ), {, ra]
[;, col, <, n, ;, col, ++, ), {, ra, [, row, ], [, col, ], =, qrt, [, col]
[+, 1, ;, col, <, n, ;, col, ++, ), {, ra, [, row, ], [, col, ], =, qrt]
[;, col, <, n, ;, col, ++, ), {, ra, [, row, ], [, col, ], =, qrt, [, col]
[;, col, ++, ), {, ra, [, row, ], [, col, ], =, qrt, [, col, ], [, row, ]]
[<, n, ;, col, ++, ), {, ra, [, row, ], [, col, ], =, qrt, [, col, ], []
[;, col, ++, ), {, ra, [, row, ], [, col, ], =, qrt, [, col, ], [, row, ]]
[), {, ra, [, row, ], [, col, ], =, qrt, [, col, ], [, row, ], ;, }, }]
[++, ), {, ra, [, row, ], [, col, ], =, qrt, [, col, ], [, row, ], ;, }]
[=, qrt, [, col, ], [, row, ], ;, }, }, cachedR, =, MatrixUtils, ., createRealMatrix, (, ra, ), ;]
[[, col, ], =, qrt, [, col, ], [, row, ], ;, }, }, cachedR, =, MatrixUtils, ., createRealMatrix, (]
[[, row, ], [, col, ], =, qrt, [, col, ], [, row, ], ;, }, }, cachedR, =, MatrixUtils]
[], [, col, ], =, qrt, [, col, ], [, row, ], ;, }, }, cachedR, =, MatrixUtils, ., createRealMatrix]
[], =, qrt, [, col, ], [, row, ], ;, }, }, cachedR, =, MatrixUtils, ., createRealMatrix, (, ra, )]
[;, }, }, cachedR, =, MatrixUtils, ., createRealMatrix, (, ra, ), ;, }, return, cachedR, ;, }, public, RealMatrix, getQ]
[[, row, ], ;, }, }, cachedR, =, MatrixUtils, ., createRealMatrix, (, ra, ), ;, }, return, cachedR, ;, }]
[[, col, ], [, row, ], ;, }, }, cachedR, =, MatrixUtils, ., createRealMatrix, (, ra, ), ;, }, return]
[], [, row, ], ;, }, }, cachedR, =, MatrixUtils, ., createRealMatrix, (, ra, ), ;, }, return, cachedR, ;]
[], ;, }, }, cachedR, =, MatrixUtils, ., createRealMatrix, (, ra, ), ;, }, return, cachedR, ;, }, public, RealMatrix]
[=, MatrixUtils, ., createRealMatrix, (, ra, ), ;, }, return, cachedR, ;, }, public, RealMatrix, getQ, (, ), {, if]
[;, }, return, cachedR, ;, }, public, RealMatrix, getQ, (, ), {, if, (, cachedQ, ==, null, ), {, cachedQ]
[., createRealMatrix, (, ra, ), ;, }, return, cachedR, ;, }, public, RealMatrix, getQ, (, ), {, if, (, cachedQ]
[), ;, }, return, cachedR, ;, }, public, RealMatrix, getQ, (, ), {, if, (, cachedQ, ==, null, ), {]
[;, }, public, RealMatrix, getQ, (, ), {, if, (, cachedQ, ==, null, ), {, cachedQ, =, getQT, (, )]
[), {, cachedQ, =, getQT, (, ), ., transpose, (, ), ;, }, return, cachedQ, ;, }, public, RealMatrix, getQT]
[==, null, ), {, cachedQ, =, getQT, (, ), ., transpose, (, ), ;, }, return, cachedQ, ;, }, public]
[), {, cachedQ, =, getQT, (, ), ., transpose, (, ), ;, }, return, cachedQ, ;, }, public, RealMatrix, getQT]
[=, getQT, (, ), ., transpose, (, ), ;, }, return, cachedQ, ;, }, public, RealMatrix, getQT, (, ), {]
[;, }, return, cachedQ, ;, }, public, RealMatrix, getQT, (, ), {, if, (, cachedQT, ==, null, ), {, final]
[., transpose, (, ), ;, }, return, cachedQ, ;, }, public, RealMatrix, getQT, (, ), {, if, (, cachedQT, ==]
[;, }, public, RealMatrix, getQT, (, ), {, if, (, cachedQT, ==, null, ), {, final, int, n, =, qrt]
[), {, final, int, n, =, qrt, ., length, ;, final, int, m, =, qrt, [, 0, ], ., length]
[==, null, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =, qrt, [, 0, ]]
[), {, final, int, n, =, qrt, ., length, ;, final, int, m, =, qrt, [, 0, ], ., length]
[;, final, int, m, =, qrt, [, 0, ], ., length, ;, double, [, ], [, ], qta, =, new]
[., length, ;, final, int, m, =, qrt, [, 0, ], ., length, ;, double, [, ], [, ], qta]
[;, double, [, ], [, ], qta, =, new, double, [, m, ], [, m, ], ;, for, (, int]
[., length, ;, double, [, ], [, ], qta, =, new, double, [, m, ], [, m, ], ;, for]
[[, 0, ], ., length, ;, double, [, ], [, ], qta, =, new, double, [, m, ], [, m]
[], ., length, ;, double, [, ], [, ], qta, =, new, double, [, m, ], [, m, ], ;]
[;, for, (, int, minor, =, m, -, 1, ;, minor, >=, FastMath, ., min, (, m, ,, n, )]
[], [, m, ], ;, for, (, int, minor, =, m, -, 1, ;, minor, >=, FastMath, ., min, (]
[], ;, for, (, int, minor, =, m, -, 1, ;, minor, >=, FastMath, ., min, (, m, ,, n]
[;, minor, >=, FastMath, ., min, (, m, ,, n, ), ;, minor, --, ), {, qta, [, minor, ]]
[-, 1, ;, minor, >=, FastMath, ., min, (, m, ,, n, ), ;, minor, --, ), {, qta, []
[;, minor, >=, FastMath, ., min, (, m, ,, n, ), ;, minor, --, ), {, qta, [, minor, ]]
[;, minor, --, ), {, qta, [, minor, ], [, minor, ], =, 1.0d, ;, }, for, (, int, minor]
[>=, FastMath, ., min, (, m, ,, n, ), ;, minor, --, ), {, qta, [, minor, ], [, minor]
[;, minor, --, ), {, qta, [, minor, ], [, minor, ], =, 1.0d, ;, }, for, (, int, minor]
[., min, (, m, ,, n, ), ;, minor, --, ), {, qta, [, minor, ], [, minor, ], =]
[,, n, ), ;, minor, --, ), {, qta, [, minor, ], [, minor, ], =, 1.0d, ;, }, for]
[), ;, minor, --, ), {, qta, [, minor, ], [, minor, ], =, 1.0d, ;, }, for, (, int]
[), {, qta, [, minor, ], [, minor, ], =, 1.0d, ;, }, for, (, int, minor, =, FastMath, .]
[--, ), {, qta, [, minor, ], [, minor, ], =, 1.0d, ;, }, for, (, int, minor, =, FastMath]
[=, 1.0d, ;, }, for, (, int, minor, =, FastMath, ., min, (, m, ,, n, ), -, 1, ;]
[[, minor, ], =, 1.0d, ;, }, for, (, int, minor, =, FastMath, ., min, (, m, ,, n, )]
[[, minor, ], [, minor, ], =, 1.0d, ;, }, for, (, int, minor, =, FastMath, ., min, (, m]
[], [, minor, ], =, 1.0d, ;, }, for, (, int, minor, =, FastMath, ., min, (, m, ,, n]
[], =, 1.0d, ;, }, for, (, int, minor, =, FastMath, ., min, (, m, ,, n, ), -, 1]
[;, }, for, (, int, minor, =, FastMath, ., min, (, m, ,, n, ), -, 1, ;, minor, >=]
[;, minor, >=, 0, ;, minor, --, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;]
[-, 1, ;, minor, >=, 0, ;, minor, --, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor]
[., min, (, m, ,, n, ), -, 1, ;, minor, >=, 0, ;, minor, --, ), {, final, double]
[,, n, ), -, 1, ;, minor, >=, 0, ;, minor, --, ), {, final, double, [, ], qrtMinor, =]
[), -, 1, ;, minor, >=, 0, ;, minor, --, ), {, final, double, [, ], qrtMinor, =, qrt, []
[;, minor, >=, 0, ;, minor, --, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;]
[;, minor, --, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, qta, [, minor, ]]
[>=, 0, ;, minor, --, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, qta, []
[;, minor, --, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, qta, [, minor, ]]
[), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, qta, [, minor, ], [, minor, ]]
[--, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, qta, [, minor, ], [, minor]
[;, qta, [, minor, ], [, minor, ], =, 1.0d, ;, if, (, qrtMinor, [, minor, ], !=, 0.0, )]
[[, minor, ], ;, qta, [, minor, ], [, minor, ], =, 1.0d, ;, if, (, qrtMinor, [, minor, ]]
[], ;, qta, [, minor, ], [, minor, ], =, 1.0d, ;, if, (, qrtMinor, [, minor, ], !=, 0.0]
[=, 1.0d, ;, if, (, qrtMinor, [, minor, ], !=, 0.0, ), {, for, (, int, col, =, minor, ;]
[[, minor, ], =, 1.0d, ;, if, (, qrtMinor, [, minor, ], !=, 0.0, ), {, for, (, int, col]
[[, minor, ], [, minor, ], =, 1.0d, ;, if, (, qrtMinor, [, minor, ], !=, 0.0, ), {, for]
[], [, minor, ], =, 1.0d, ;, if, (, qrtMinor, [, minor, ], !=, 0.0, ), {, for, (, int]
[], =, 1.0d, ;, if, (, qrtMinor, [, minor, ], !=, 0.0, ), {, for, (, int, col, =, minor]
[;, if, (, qrtMinor, [, minor, ], !=, 0.0, ), {, for, (, int, col, =, minor, ;, col, <]
[), {, for, (, int, col, =, minor, ;, col, <, m, ;, col, ++, ), {, double, alpha, =]
[!=, 0.0, ), {, for, (, int, col, =, minor, ;, col, <, m, ;, col, ++, ), {, double]
[[, minor, ], !=, 0.0, ), {, for, (, int, col, =, minor, ;, col, <, m, ;, col, ++]
[], !=, 0.0, ), {, for, (, int, col, =, minor, ;, col, <, m, ;, col, ++, ), {]
[), {, for, (, int, col, =, minor, ;, col, <, m, ;, col, ++, ), {, double, alpha, =]
[;, col, <, m, ;, col, ++, ), {, double, alpha, =, 0, ;, for, (, int, row, =, minor]
[;, col, ++, ), {, double, alpha, =, 0, ;, for, (, int, row, =, minor, ;, row, <, m]
[<, m, ;, col, ++, ), {, double, alpha, =, 0, ;, for, (, int, row, =, minor, ;, row]
[;, col, ++, ), {, double, alpha, =, 0, ;, for, (, int, row, =, minor, ;, row, <, m]
[), {, double, alpha, =, 0, ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++]
[++, ), {, double, alpha, =, 0, ;, for, (, int, row, =, minor, ;, row, <, m, ;, row]
[;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, alpha, -=, qta, []
[;, row, <, m, ;, row, ++, ), {, alpha, -=, qta, [, col, ], [, row, ], *, qrtMinor]
[;, row, ++, ), {, alpha, -=, qta, [, col, ], [, row, ], *, qrtMinor, [, row, ], ;]
[<, m, ;, row, ++, ), {, alpha, -=, qta, [, col, ], [, row, ], *, qrtMinor, [, row]
[;, row, ++, ), {, alpha, -=, qta, [, col, ], [, row, ], *, qrtMinor, [, row, ], ;]
[), {, alpha, -=, qta, [, col, ], [, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=]
[++, ), {, alpha, -=, qta, [, col, ], [, row, ], *, qrtMinor, [, row, ], ;, }, alpha]
[-=, qta, [, col, ], [, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=, rDiag, [, minor]
[;, }, alpha, /=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor]
[*, qrtMinor, [, row, ], ;, }, alpha, /=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;, for]
[[, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=, rDiag, [, minor, ], *, qrtMinor, [, minor]
[[, col, ], [, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=, rDiag, [, minor, ], *]
[], [, row, ], *, qrtMinor, [, row, ], ;, }, alpha, /=, rDiag, [, minor, ], *, qrtMinor, []
[], *, qrtMinor, [, row, ], ;, }, alpha, /=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;]
[;, }, alpha, /=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor]
[[, row, ], ;, }, alpha, /=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int]
[], ;, }, alpha, /=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =]
[/=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <]
[;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, qta, [, col, ]]
[*, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, )]
[[, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <, m, ;]
[], *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++]
[;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, qta, [, col, ]]
[[, minor, ], ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, qta]
[], ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, qta, [, col]
[;, row, <, m, ;, row, ++, ), {, qta, [, col, ], [, row, ], +=, -, alpha, *]
[;, row, ++, ), {, qta, [, col, ], [, row, ], +=, -, alpha, *, qrtMinor, [, row, ]]
[<, m, ;, row, ++, ), {, qta, [, col, ], [, row, ], +=, -, alpha, *, qrtMinor, []
[;, row, ++, ), {, qta, [, col, ], [, row, ], +=, -, alpha, *, qrtMinor, [, row, ]]
[), {, qta, [, col, ], [, row, ], +=, -, alpha, *, qrtMinor, [, row, ], ;, }, }]
[++, ), {, qta, [, col, ], [, row, ], +=, -, alpha, *, qrtMinor, [, row, ], ;, }]
[+=, -, alpha, *, qrtMinor, [, row, ], ;, }, }, }, }, cachedQT, =, MatrixUtils, ., createRealMatrix, (, qta]
[[, row, ], +=, -, alpha, *, qrtMinor, [, row, ], ;, }, }, }, }, cachedQT, =, MatrixUtils, .]
[[, col, ], [, row, ], +=, -, alpha, *, qrtMinor, [, row, ], ;, }, }, }, }, cachedQT]
[], [, row, ], +=, -, alpha, *, qrtMinor, [, row, ], ;, }, }, }, }, cachedQT, =, MatrixUtils]
[], +=, -, alpha, *, qrtMinor, [, row, ], ;, }, }, }, }, cachedQT, =, MatrixUtils, ., createRealMatrix, (]
[;, }, }, }, }, cachedQT, =, MatrixUtils, ., createRealMatrix, (, qta, ), ;, }, return, cachedQT, ;, }, public]
[*, qrtMinor, [, row, ], ;, }, }, }, }, cachedQT, =, MatrixUtils, ., createRealMatrix, (, qta, ), ;, }]
[*, qrtMinor, [, row, ], ;, }, }, }, }, cachedQT, =, MatrixUtils, ., createRealMatrix, (, qta, ), ;, }]
[;, }, }, }, }, cachedQT, =, MatrixUtils, ., createRealMatrix, (, qta, ), ;, }, return, cachedQT, ;, }, public]
[[, row, ], ;, }, }, }, }, cachedQT, =, MatrixUtils, ., createRealMatrix, (, qta, ), ;, }, return, cachedQT]
[], ;, }, }, }, }, cachedQT, =, MatrixUtils, ., createRealMatrix, (, qta, ), ;, }, return, cachedQT, ;, }]
[=, MatrixUtils, ., createRealMatrix, (, qta, ), ;, }, return, cachedQT, ;, }, public, RealMatrix, getH, (, ), {, if]
[;, }, return, cachedQT, ;, }, public, RealMatrix, getH, (, ), {, if, (, cachedH, ==, null, ), {, final]
[., createRealMatrix, (, qta, ), ;, }, return, cachedQT, ;, }, public, RealMatrix, getH, (, ), {, if, (, cachedH]
[), ;, }, return, cachedQT, ;, }, public, RealMatrix, getH, (, ), {, if, (, cachedH, ==, null, ), {]
[;, }, public, RealMatrix, getH, (, ), {, if, (, cachedH, ==, null, ), {, final, int, n, =, qrt]
[), {, final, int, n, =, qrt, ., length, ;, final, int, m, =, qrt, [, 0, ], ., length]
[==, null, ), {, final, int, n, =, qrt, ., length, ;, final, int, m, =, qrt, [, 0, ]]
[), {, final, int, n, =, qrt, ., length, ;, final, int, m, =, qrt, [, 0, ], ., length]
[;, final, int, m, =, qrt, [, 0, ], ., length, ;, double, [, ], [, ], ha, =, new]
[., length, ;, final, int, m, =, qrt, [, 0, ], ., length, ;, double, [, ], [, ], ha]
[;, double, [, ], [, ], ha, =, new, double, [, m, ], [, n, ], ;, for, (, int]
[., length, ;, double, [, ], [, ], ha, =, new, double, [, m, ], [, n, ], ;, for]
[[, 0, ], ., length, ;, double, [, ], [, ], ha, =, new, double, [, m, ], [, n]
[], ., length, ;, double, [, ], [, ], ha, =, new, double, [, m, ], [, n, ], ;]
[;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int, j]
[], [, n, ], ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int]
[;, i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, FastMath, .]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, FastMath, ., min, (, i, +]
[<, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, FastMath, ., min, (]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, FastMath, ., min, (, i, +]
[), {, for, (, int, j, =, 0, ;, j, <, FastMath, ., min, (, i, +, 1, ,, n]
[), {, for, (, int, j, =, 0, ;, j, <, FastMath, ., min, (, i, +, 1, ,, n]
[;, j, <, FastMath, ., min, (, i, +, 1, ,, n, ), ;, ++, j, ), {, ha, []
[;, ++, j, ), {, ha, [, i, ], [, j, ], =, qrt, [, j, ], [, i, ]]
[<, FastMath, ., min, (, i, +, 1, ,, n, ), ;, ++, j, ), {, ha, [, i, ]]
[;, ++, j, ), {, ha, [, i, ], [, j, ], =, qrt, [, j, ], [, i, ]]
[., min, (, i, +, 1, ,, n, ), ;, ++, j, ), {, ha, [, i, ], [, j]
[,, n, ), ;, ++, j, ), {, ha, [, i, ], [, j, ], =, qrt, [, j, ]]
[+, 1, ,, n, ), ;, ++, j, ), {, ha, [, i, ], [, j, ], =, qrt, []
[,, n, ), ;, ++, j, ), {, ha, [, i, ], [, j, ], =, qrt, [, j, ]]
[), ;, ++, j, ), {, ha, [, i, ], [, j, ], =, qrt, [, j, ], [, i]
[), {, ha, [, i, ], [, j, ], =, qrt, [, j, ], [, i, ], /, -, rDiag]
[), {, ha, [, i, ], [, j, ], =, qrt, [, j, ], [, i, ], /, -, rDiag]
[=, qrt, [, j, ], [, i, ], /, -, rDiag, [, j, ], ;, }, }, cachedH, =, MatrixUtils]
[[, j, ], =, qrt, [, j, ], [, i, ], /, -, rDiag, [, j, ], ;, }, }]
[[, i, ], [, j, ], =, qrt, [, j, ], [, i, ], /, -, rDiag, [, j, ]]
[], [, j, ], =, qrt, [, j, ], [, i, ], /, -, rDiag, [, j, ], ;, }]
[], =, qrt, [, j, ], [, i, ], /, -, rDiag, [, j, ], ;, }, }, cachedH, =]
[;, }, }, cachedH, =, MatrixUtils, ., createRealMatrix, (, ha, ), ;, }, return, cachedH, ;, }, public, DecompositionSolver, getSolver]
[/, -, rDiag, [, j, ], ;, }, }, cachedH, =, MatrixUtils, ., createRealMatrix, (, ha, ), ;, }, return]
[[, i, ], /, -, rDiag, [, j, ], ;, }, }, cachedH, =, MatrixUtils, ., createRealMatrix, (, ha, )]
[[, j, ], [, i, ], /, -, rDiag, [, j, ], ;, }, }, cachedH, =, MatrixUtils, ., createRealMatrix]
[], [, i, ], /, -, rDiag, [, j, ], ;, }, }, cachedH, =, MatrixUtils, ., createRealMatrix, (, ha]
[], /, -, rDiag, [, j, ], ;, }, }, cachedH, =, MatrixUtils, ., createRealMatrix, (, ha, ), ;, }]
[;, }, }, cachedH, =, MatrixUtils, ., createRealMatrix, (, ha, ), ;, }, return, cachedH, ;, }, public, DecompositionSolver, getSolver]
[;, }, }, cachedH, =, MatrixUtils, ., createRealMatrix, (, ha, ), ;, }, return, cachedH, ;, }, public, DecompositionSolver, getSolver]
[[, j, ], ;, }, }, cachedH, =, MatrixUtils, ., createRealMatrix, (, ha, ), ;, }, return, cachedH, ;, }]
[], ;, }, }, cachedH, =, MatrixUtils, ., createRealMatrix, (, ha, ), ;, }, return, cachedH, ;, }, public, DecompositionSolver]
[=, MatrixUtils, ., createRealMatrix, (, ha, ), ;, }, return, cachedH, ;, }, public, DecompositionSolver, getSolver, (, ), {, return]
[;, }, return, cachedH, ;, }, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (, qrt, ,, rDiag, ,]
[., createRealMatrix, (, ha, ), ;, }, return, cachedH, ;, }, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver]
[), ;, }, return, cachedH, ;, }, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (, qrt, ,, rDiag]
[;, }, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (, qrt, ,, rDiag, ,, threshold, ), ;, }]
[;, }, private, static, class, Solver, implements, DecompositionSolver, {, private, final, double, [, ], [, ], qrt, ;, private, final]
[,, rDiag, ,, threshold, ), ;, }, private, static, class, Solver, implements, DecompositionSolver, {, private, final, double, [, ], []
[,, threshold, ), ;, }, private, static, class, Solver, implements, DecompositionSolver, {, private, final, double, [, ], [, ], qrt]
[), ;, }, private, static, class, Solver, implements, DecompositionSolver, {, private, final, double, [, ], [, ], qrt, ;, private]
[=, qrt, ;, this, ., rDiag, =, rDiag, ;, this, ., threshold, =, threshold, ;, }, public, boolean, isNonSingular, (]
[., qrt, =, qrt, ;, this, ., rDiag, =, rDiag, ;, this, ., threshold, =, threshold, ;, }, public, boolean]
[;, this, ., rDiag, =, rDiag, ;, this, ., threshold, =, threshold, ;, }, public, boolean, isNonSingular, (, ), {]
[=, rDiag, ;, this, ., threshold, =, threshold, ;, }, public, boolean, isNonSingular, (, ), {, for, (, double, diag]
[., rDiag, =, rDiag, ;, this, ., threshold, =, threshold, ;, }, public, boolean, isNonSingular, (, ), {, for, (]
[;, this, ., threshold, =, threshold, ;, }, public, boolean, isNonSingular, (, ), {, for, (, double, diag, :, rDiag]
[=, threshold, ;, }, public, boolean, isNonSingular, (, ), {, for, (, double, diag, :, rDiag, ), {, if, (]
[., threshold, =, threshold, ;, }, public, boolean, isNonSingular, (, ), {, for, (, double, diag, :, rDiag, ), {]
[;, }, public, boolean, isNonSingular, (, ), {, for, (, double, diag, :, rDiag, ), {, if, (, FastMath, .]
[), {, if, (, FastMath, ., abs, (, diag, ), <=, threshold, ), {, return, false, ;, }, }, return]
[), {, return, false, ;, }, }, return, true, ;, }, public, RealVector, solve, (, RealVector, b, ), {, final]
[<=, threshold, ), {, return, false, ;, }, }, return, true, ;, }, public, RealVector, solve, (, RealVector, b, )]
[., abs, (, diag, ), <=, threshold, ), {, return, false, ;, }, }, return, true, ;, }, public, RealVector]
[), <=, threshold, ), {, return, false, ;, }, }, return, true, ;, }, public, RealVector, solve, (, RealVector, b]
[), {, return, false, ;, }, }, return, true, ;, }, public, RealVector, solve, (, RealVector, b, ), {, final]
[;, }, }, return, true, ;, }, public, RealVector, solve, (, RealVector, b, ), {, final, int, n, =, qrt]
[;, }, public, RealVector, solve, (, RealVector, b, ), {, final, int, n, =, qrt, ., length, ;, final, int]
[;, final, int, m, =, qrt, [, 0, ], ., length, ;, if, (, b, ., getDimension, (, ), !=]
[., length, ;, final, int, m, =, qrt, [, 0, ], ., length, ;, if, (, b, ., getDimension, (]
[;, if, (, b, ., getDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getDimension, (]
[., length, ;, if, (, b, ., getDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, .]
[[, 0, ], ., length, ;, if, (, b, ., getDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException]
[], ., length, ;, if, (, b, ., getDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b]
[), {, throw, new, DimensionMismatchException, (, b, ., getDimension, (, ), ,, m, ), ;, }, if, (, !, isNonSingular]
[!=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getDimension, (, ), ,, m, ), ;, }, if, (]
[., getDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getDimension, (, ), ,, m, )]
[), {, throw, new, DimensionMismatchException, (, b, ., getDimension, (, ), ,, m, ), ;, }, if, (, !, isNonSingular]
[;, }, if, (, !, isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, double, []
[,, m, ), ;, }, if, (, !, isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }]
[., getDimension, (, ), ,, m, ), ;, }, if, (, !, isNonSingular, (, ), ), {, throw, new, SingularMatrixException]
[), ;, }, if, (, !, isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, double]
[), {, throw, new, SingularMatrixException, (, ), ;, }, final, double, [, ], x, =, new, double, [, n, ]]
[), {, throw, new, SingularMatrixException, (, ), ;, }, final, double, [, ], x, =, new, double, [, n, ]]
[;, }, final, double, [, ], x, =, new, double, [, n, ], ;, final, double, [, ], y, =]
[;, final, double, [, ], y, =, b, ., toArray, (, ), ;, for, (, int, minor, =, 0, ;]
[], ;, final, double, [, ], y, =, b, ., toArray, (, ), ;, for, (, int, minor, =, 0]
[;, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min, (, m, ,, n, ), ;, minor]
[., toArray, (, ), ;, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min, (, m, ,]
[;, minor, <, FastMath, ., min, (, m, ,, n, ), ;, minor, ++, ), {, final, double, [, ]]
[;, minor, ++, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, double, dotProduct, =, 0]
[<, FastMath, ., min, (, m, ,, n, ), ;, minor, ++, ), {, final, double, [, ], qrtMinor, =]
[;, minor, ++, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, double, dotProduct, =, 0]
[., min, (, m, ,, n, ), ;, minor, ++, ), {, final, double, [, ], qrtMinor, =, qrt, []
[,, n, ), ;, minor, ++, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, double]
[), ;, minor, ++, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, double, dotProduct, =]
[), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, double, dotProduct, =, 0, ;, for, (]
[++, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, double, dotProduct, =, 0, ;, for]
[;, double, dotProduct, =, 0, ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, )]
[[, minor, ], ;, double, dotProduct, =, 0, ;, for, (, int, row, =, minor, ;, row, <, m, ;]
[], ;, double, dotProduct, =, 0, ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++]
[;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, dotProduct, +=, y, []
[;, row, <, m, ;, row, ++, ), {, dotProduct, +=, y, [, row, ], *, qrtMinor, [, row, ]]
[;, row, ++, ), {, dotProduct, +=, y, [, row, ], *, qrtMinor, [, row, ], ;, }, dotProduct, /=]
[<, m, ;, row, ++, ), {, dotProduct, +=, y, [, row, ], *, qrtMinor, [, row, ], ;, }]
[;, row, ++, ), {, dotProduct, +=, y, [, row, ], *, qrtMinor, [, row, ], ;, }, dotProduct, /=]
[), {, dotProduct, +=, y, [, row, ], *, qrtMinor, [, row, ], ;, }, dotProduct, /=, rDiag, [, minor]
[++, ), {, dotProduct, +=, y, [, row, ], *, qrtMinor, [, row, ], ;, }, dotProduct, /=, rDiag, []
[+=, y, [, row, ], *, qrtMinor, [, row, ], ;, }, dotProduct, /=, rDiag, [, minor, ], *, qrtMinor]
[;, }, dotProduct, /=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor]
[*, qrtMinor, [, row, ], ;, }, dotProduct, /=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;, for]
[[, row, ], *, qrtMinor, [, row, ], ;, }, dotProduct, /=, rDiag, [, minor, ], *, qrtMinor, [, minor]
[], *, qrtMinor, [, row, ], ;, }, dotProduct, /=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;]
[;, }, dotProduct, /=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor]
[[, row, ], ;, }, dotProduct, /=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int]
[], ;, }, dotProduct, /=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =]
[/=, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <]
[;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, y, [, row, ]]
[*, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, )]
[[, minor, ], *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <, m, ;]
[], *, qrtMinor, [, minor, ], ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++]
[;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, y, [, row, ]]
[[, minor, ], ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, y]
[], ;, for, (, int, row, =, minor, ;, row, <, m, ;, row, ++, ), {, y, [, row]
[;, row, <, m, ;, row, ++, ), {, y, [, row, ], +=, dotProduct, *, qrtMinor, [, row, ]]
[;, row, ++, ), {, y, [, row, ], +=, dotProduct, *, qrtMinor, [, row, ], ;, }, }, for]
[<, m, ;, row, ++, ), {, y, [, row, ], +=, dotProduct, *, qrtMinor, [, row, ], ;, }]
[;, row, ++, ), {, y, [, row, ], +=, dotProduct, *, qrtMinor, [, row, ], ;, }, }, for]
[), {, y, [, row, ], +=, dotProduct, *, qrtMinor, [, row, ], ;, }, }, for, (, int, row]
[++, ), {, y, [, row, ], +=, dotProduct, *, qrtMinor, [, row, ], ;, }, }, for, (, int]
[+=, dotProduct, *, qrtMinor, [, row, ], ;, }, }, for, (, int, row, =, rDiag, ., length, -, 1]
[[, row, ], +=, dotProduct, *, qrtMinor, [, row, ], ;, }, }, for, (, int, row, =, rDiag, .]
[], +=, dotProduct, *, qrtMinor, [, row, ], ;, }, }, for, (, int, row, =, rDiag, ., length, -]
[;, }, }, for, (, int, row, =, rDiag, ., length, -, 1, ;, row, >=, 0, ;, --, row]
[*, qrtMinor, [, row, ], ;, }, }, for, (, int, row, =, rDiag, ., length, -, 1, ;, row]
[;, }, }, for, (, int, row, =, rDiag, ., length, -, 1, ;, row, >=, 0, ;, --, row]
[[, row, ], ;, }, }, for, (, int, row, =, rDiag, ., length, -, 1, ;, row, >=, 0]
[], ;, }, }, for, (, int, row, =, rDiag, ., length, -, 1, ;, row, >=, 0, ;, --]
[;, row, >=, 0, ;, --, row, ), {, y, [, row, ], /=, rDiag, [, row, ], ;, final]
[-, 1, ;, row, >=, 0, ;, --, row, ), {, y, [, row, ], /=, rDiag, [, row, ]]
[., length, -, 1, ;, row, >=, 0, ;, --, row, ), {, y, [, row, ], /=, rDiag, []
[;, row, >=, 0, ;, --, row, ), {, y, [, row, ], /=, rDiag, [, row, ], ;, final]
[;, --, row, ), {, y, [, row, ], /=, rDiag, [, row, ], ;, final, double, yRow, =, y]
[>=, 0, ;, --, row, ), {, y, [, row, ], /=, rDiag, [, row, ], ;, final, double, yRow]
[;, --, row, ), {, y, [, row, ], /=, rDiag, [, row, ], ;, final, double, yRow, =, y]
[), {, y, [, row, ], /=, rDiag, [, row, ], ;, final, double, yRow, =, y, [, row, ]]
[), {, y, [, row, ], /=, rDiag, [, row, ], ;, final, double, yRow, =, y, [, row, ]]
[/=, rDiag, [, row, ], ;, final, double, yRow, =, y, [, row, ], ;, final, double, [, ], qrtRow]
[[, row, ], /=, rDiag, [, row, ], ;, final, double, yRow, =, y, [, row, ], ;, final, double]
[], /=, rDiag, [, row, ], ;, final, double, yRow, =, y, [, row, ], ;, final, double, [, ]]
[;, final, double, yRow, =, y, [, row, ], ;, final, double, [, ], qrtRow, =, qrt, [, row, ]]
[[, row, ], ;, final, double, yRow, =, y, [, row, ], ;, final, double, [, ], qrtRow, =, qrt]
[], ;, final, double, yRow, =, y, [, row, ], ;, final, double, [, ], qrtRow, =, qrt, [, row]
[;, final, double, [, ], qrtRow, =, qrt, [, row, ], ;, x, [, row, ], =, yRow, ;, for]
[[, row, ], ;, final, double, [, ], qrtRow, =, qrt, [, row, ], ;, x, [, row, ], =]
[], ;, final, double, [, ], qrtRow, =, qrt, [, row, ], ;, x, [, row, ], =, yRow, ;]
[;, x, [, row, ], =, yRow, ;, for, (, int, i, =, 0, ;, i, <, row, ;, i]
[[, row, ], ;, x, [, row, ], =, yRow, ;, for, (, int, i, =, 0, ;, i, <]
[], ;, x, [, row, ], =, yRow, ;, for, (, int, i, =, 0, ;, i, <, row, ;]
[=, yRow, ;, for, (, int, i, =, 0, ;, i, <, row, ;, i, ++, ), {, y, []
[[, row, ], =, yRow, ;, for, (, int, i, =, 0, ;, i, <, row, ;, i, ++, )]
[], =, yRow, ;, for, (, int, i, =, 0, ;, i, <, row, ;, i, ++, ), {, y]
[;, for, (, int, i, =, 0, ;, i, <, row, ;, i, ++, ), {, y, [, i, ]]
[;, i, <, row, ;, i, ++, ), {, y, [, i, ], -=, yRow, *, qrtRow, [, i, ]]
[;, i, ++, ), {, y, [, i, ], -=, yRow, *, qrtRow, [, i, ], ;, }, }, return]
[<, row, ;, i, ++, ), {, y, [, i, ], -=, yRow, *, qrtRow, [, i, ], ;, }]
[;, i, ++, ), {, y, [, i, ], -=, yRow, *, qrtRow, [, i, ], ;, }, }, return]
[), {, y, [, i, ], -=, yRow, *, qrtRow, [, i, ], ;, }, }, return, new, ArrayRealVector, (]
[++, ), {, y, [, i, ], -=, yRow, *, qrtRow, [, i, ], ;, }, }, return, new, ArrayRealVector]
[-=, yRow, *, qrtRow, [, i, ], ;, }, }, return, new, ArrayRealVector, (, x, ,, false, ), ;, }]
[[, i, ], -=, yRow, *, qrtRow, [, i, ], ;, }, }, return, new, ArrayRealVector, (, x, ,, false]
[], -=, yRow, *, qrtRow, [, i, ], ;, }, }, return, new, ArrayRealVector, (, x, ,, false, ), ;]
[;, }, }, return, new, ArrayRealVector, (, x, ,, false, ), ;, }, public, RealMatrix, solve, (, RealMatrix, b, )]
[*, qrtRow, [, i, ], ;, }, }, return, new, ArrayRealVector, (, x, ,, false, ), ;, }, public, RealMatrix]
[;, }, }, return, new, ArrayRealVector, (, x, ,, false, ), ;, }, public, RealMatrix, solve, (, RealMatrix, b, )]
[[, i, ], ;, }, }, return, new, ArrayRealVector, (, x, ,, false, ), ;, }, public, RealMatrix, solve, (]
[], ;, }, }, return, new, ArrayRealVector, (, x, ,, false, ), ;, }, public, RealMatrix, solve, (, RealMatrix, b]
[;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, final, int, n, =, qrt, ., length, ;, final, int]
[,, false, ), ;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, final, int, n, =, qrt, ., length]
[), ;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, final, int, n, =, qrt, ., length, ;, final]
[;, final, int, m, =, qrt, [, 0, ], ., length, ;, if, (, b, ., getRowDimension, (, ), !=]
[., length, ;, final, int, m, =, qrt, [, 0, ], ., length, ;, if, (, b, ., getRowDimension, (]
[;, if, (, b, ., getRowDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getRowDimension, (]
[., length, ;, if, (, b, ., getRowDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, .]
[[, 0, ], ., length, ;, if, (, b, ., getRowDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException]
[], ., length, ;, if, (, b, ., getRowDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b]
[), {, throw, new, DimensionMismatchException, (, b, ., getRowDimension, (, ), ,, m, ), ;, }, if, (, !, isNonSingular]
[!=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getRowDimension, (, ), ,, m, ), ;, }, if, (]
[., getRowDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getRowDimension, (, ), ,, m, )]
[), {, throw, new, DimensionMismatchException, (, b, ., getRowDimension, (, ), ,, m, ), ;, }, if, (, !, isNonSingular]
[;, }, if, (, !, isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, int, columns]
[,, m, ), ;, }, if, (, !, isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }]
[., getRowDimension, (, ), ,, m, ), ;, }, if, (, !, isNonSingular, (, ), ), {, throw, new, SingularMatrixException]
[), ;, }, if, (, !, isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, int]
[), {, throw, new, SingularMatrixException, (, ), ;, }, final, int, columns, =, b, ., getColumnDimension, (, ), ;, final]
[), {, throw, new, SingularMatrixException, (, ), ;, }, final, int, columns, =, b, ., getColumnDimension, (, ), ;, final]
[;, }, final, int, columns, =, b, ., getColumnDimension, (, ), ;, final, int, blockSize, =, BlockRealMatrix, ., BLOCK_SIZE, ;]
[;, final, int, blockSize, =, BlockRealMatrix, ., BLOCK_SIZE, ;, final, int, cBlocks, =, (, columns, +, blockSize, -, 1, )]
[., getColumnDimension, (, ), ;, final, int, blockSize, =, BlockRealMatrix, ., BLOCK_SIZE, ;, final, int, cBlocks, =, (, columns, +]
[;, final, int, cBlocks, =, (, columns, +, blockSize, -, 1, ), /, blockSize, ;, final, double, [, ], []
[., BLOCK_SIZE, ;, final, int, cBlocks, =, (, columns, +, blockSize, -, 1, ), /, blockSize, ;, final, double, []
[;, final, double, [, ], [, ], xBlocks, =, BlockRealMatrix, ., createBlocksLayout, (, n, ,, columns, ), ;, final, double]
[/, blockSize, ;, final, double, [, ], [, ], xBlocks, =, BlockRealMatrix, ., createBlocksLayout, (, n, ,, columns, ), ;]
[), /, blockSize, ;, final, double, [, ], [, ], xBlocks, =, BlockRealMatrix, ., createBlocksLayout, (, n, ,, columns, )]
[-, 1, ), /, blockSize, ;, final, double, [, ], [, ], xBlocks, =, BlockRealMatrix, ., createBlocksLayout, (, n, ,]
[+, blockSize, -, 1, ), /, blockSize, ;, final, double, [, ], [, ], xBlocks, =, BlockRealMatrix, ., createBlocksLayout, (]
[-, 1, ), /, blockSize, ;, final, double, [, ], [, ], xBlocks, =, BlockRealMatrix, ., createBlocksLayout, (, n, ,]
[), /, blockSize, ;, final, double, [, ], [, ], xBlocks, =, BlockRealMatrix, ., createBlocksLayout, (, n, ,, columns, )]
[;, final, double, [, ], [, ], xBlocks, =, BlockRealMatrix, ., createBlocksLayout, (, n, ,, columns, ), ;, final, double]
[;, final, double, [, ], [, ], y, =, new, double, [, b, ., getRowDimension, (, ), ], [, blockSize]
[., createBlocksLayout, (, n, ,, columns, ), ;, final, double, [, ], [, ], y, =, new, double, [, b]
[,, columns, ), ;, final, double, [, ], [, ], y, =, new, double, [, b, ., getRowDimension, (, )]
[), ;, final, double, [, ], [, ], y, =, new, double, [, b, ., getRowDimension, (, ), ], []
[;, final, double, [, ], alpha, =, new, double, [, blockSize, ], ;, for, (, int, kBlock, =, 0, ;]
[], [, blockSize, ], ;, final, double, [, ], alpha, =, new, double, [, blockSize, ], ;, for, (, int]
[., getRowDimension, (, ), ], [, blockSize, ], ;, final, double, [, ], alpha, =, new, double, [, blockSize, ]]
[], ;, final, double, [, ], alpha, =, new, double, [, blockSize, ], ;, for, (, int, kBlock, =, 0]
[;, for, (, int, kBlock, =, 0, ;, kBlock, <, cBlocks, ;, ++, kBlock, ), {, final, int, kStart, =]
[], ;, for, (, int, kBlock, =, 0, ;, kBlock, <, cBlocks, ;, ++, kBlock, ), {, final, int, kStart]
[;, kBlock, <, cBlocks, ;, ++, kBlock, ), {, final, int, kStart, =, kBlock, *, blockSize, ;, final, int, kEnd]
[;, ++, kBlock, ), {, final, int, kStart, =, kBlock, *, blockSize, ;, final, int, kEnd, =, FastMath, ., min]
[<, cBlocks, ;, ++, kBlock, ), {, final, int, kStart, =, kBlock, *, blockSize, ;, final, int, kEnd, =, FastMath]
[;, ++, kBlock, ), {, final, int, kStart, =, kBlock, *, blockSize, ;, final, int, kEnd, =, FastMath, ., min]
[), {, final, int, kStart, =, kBlock, *, blockSize, ;, final, int, kEnd, =, FastMath, ., min, (, kStart, +]
[), {, final, int, kStart, =, kBlock, *, blockSize, ;, final, int, kEnd, =, FastMath, ., min, (, kStart, +]
[;, final, int, kEnd, =, FastMath, ., min, (, kStart, +, blockSize, ,, columns, ), ;, final, int, kWidth, =]
[*, blockSize, ;, final, int, kEnd, =, FastMath, ., min, (, kStart, +, blockSize, ,, columns, ), ;, final, int]
[;, final, int, kEnd, =, FastMath, ., min, (, kStart, +, blockSize, ,, columns, ), ;, final, int, kWidth, =]
[;, final, int, kWidth, =, kEnd, -, kStart, ;, b, ., copySubMatrix, (, 0, ,, m, -, 1, ,, kStart]
[., min, (, kStart, +, blockSize, ,, columns, ), ;, final, int, kWidth, =, kEnd, -, kStart, ;, b, .]
[,, columns, ), ;, final, int, kWidth, =, kEnd, -, kStart, ;, b, ., copySubMatrix, (, 0, ,, m, -]
[+, blockSize, ,, columns, ), ;, final, int, kWidth, =, kEnd, -, kStart, ;, b, ., copySubMatrix, (, 0, ,]
[,, columns, ), ;, final, int, kWidth, =, kEnd, -, kStart, ;, b, ., copySubMatrix, (, 0, ,, m, -]
[), ;, final, int, kWidth, =, kEnd, -, kStart, ;, b, ., copySubMatrix, (, 0, ,, m, -, 1, ,]
[;, b, ., copySubMatrix, (, 0, ,, m, -, 1, ,, kStart, ,, kEnd, -, 1, ,, y, ), ;]
[-, kStart, ;, b, ., copySubMatrix, (, 0, ,, m, -, 1, ,, kStart, ,, kEnd, -, 1, ,, y]
[;, b, ., copySubMatrix, (, 0, ,, m, -, 1, ,, kStart, ,, kEnd, -, 1, ,, y, ), ;]
[;, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min, (, m, ,, n, ), ;, minor]
[., copySubMatrix, (, 0, ,, m, -, 1, ,, kStart, ,, kEnd, -, 1, ,, y, ), ;, for, (]
[,, m, -, 1, ,, kStart, ,, kEnd, -, 1, ,, y, ), ;, for, (, int, minor, =, 0]
[,, kStart, ,, kEnd, -, 1, ,, y, ), ;, for, (, int, minor, =, 0, ;, minor, <, FastMath]
[-, 1, ,, kStart, ,, kEnd, -, 1, ,, y, ), ;, for, (, int, minor, =, 0, ;, minor]
[,, kStart, ,, kEnd, -, 1, ,, y, ), ;, for, (, int, minor, =, 0, ;, minor, <, FastMath]
[,, kEnd, -, 1, ,, y, ), ;, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min]
[,, y, ), ;, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min, (, m, ,, n]
[-, 1, ,, y, ), ;, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min, (, m]
[,, y, ), ;, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min, (, m, ,, n]
[), ;, for, (, int, minor, =, 0, ;, minor, <, FastMath, ., min, (, m, ,, n, ), ;]
[;, minor, <, FastMath, ., min, (, m, ,, n, ), ;, minor, ++, ), {, final, double, [, ]]
[;, minor, ++, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, final, double, factor, =]
[<, FastMath, ., min, (, m, ,, n, ), ;, minor, ++, ), {, final, double, [, ], qrtMinor, =]
[;, minor, ++, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, final, double, factor, =]
[., min, (, m, ,, n, ), ;, minor, ++, ), {, final, double, [, ], qrtMinor, =, qrt, []
[,, n, ), ;, minor, ++, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, final]
[), ;, minor, ++, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, final, double, factor]
[), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, final, double, factor, =, 1.0, /, (]
[++, ), {, final, double, [, ], qrtMinor, =, qrt, [, minor, ], ;, final, double, factor, =, 1.0, /]
[;, final, double, factor, =, 1.0, /, (, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ), ;, Arrays]
[[, minor, ], ;, final, double, factor, =, 1.0, /, (, rDiag, [, minor, ], *, qrtMinor, [, minor, ]]
[], ;, final, double, factor, =, 1.0, /, (, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ), ;]
[;, Arrays, ., fill, (, alpha, ,, 0, ,, kWidth, ,, 0.0, ), ;, for, (, int, row, =, minor]
[/, (, rDiag, [, minor, ], *, qrtMinor, [, minor, ], ), ;, Arrays, ., fill, (, alpha, ,, 0]
[;, Arrays, ., fill, (, alpha, ,, 0, ,, kWidth, ,, 0.0, ), ;, for, (, int, row, =, minor]
[), ;, Arrays, ., fill, (, alpha, ,, 0, ,, kWidth, ,, 0.0, ), ;, for, (, int, row, =]
[*, qrtMinor, [, minor, ], ), ;, Arrays, ., fill, (, alpha, ,, 0, ,, kWidth, ,, 0.0, ), ;]
[[, minor, ], *, qrtMinor, [, minor, ], ), ;, Arrays, ., fill, (, alpha, ,, 0, ,, kWidth, ,]
[], *, qrtMinor, [, minor, ], ), ;, Arrays, ., fill, (, alpha, ,, 0, ,, kWidth, ,, 0.0, )]
[), ;, Arrays, ., fill, (, alpha, ,, 0, ,, kWidth, ,, 0.0, ), ;, for, (, int, row, =]
[[, minor, ], ), ;, Arrays, ., fill, (, alpha, ,, 0, ,, kWidth, ,, 0.0, ), ;, for, (]
[], ), ;, Arrays, ., fill, (, alpha, ,, 0, ,, kWidth, ,, 0.0, ), ;, for, (, int, row]
[;, for, (, int, row, =, minor, ;, row, <, m, ;, ++, row, ), {, final, double, d, =]
[., fill, (, alpha, ,, 0, ,, kWidth, ,, 0.0, ), ;, for, (, int, row, =, minor, ;, row]
[,, 0, ,, kWidth, ,, 0.0, ), ;, for, (, int, row, =, minor, ;, row, <, m, ;, ++]
[,, kWidth, ,, 0.0, ), ;, for, (, int, row, =, minor, ;, row, <, m, ;, ++, row, )]
[,, 0.0, ), ;, for, (, int, row, =, minor, ;, row, <, m, ;, ++, row, ), {, final]
[), ;, for, (, int, row, =, minor, ;, row, <, m, ;, ++, row, ), {, final, double, d]
[;, row, <, m, ;, ++, row, ), {, final, double, d, =, qrtMinor, [, row, ], ;, final, double]
[;, ++, row, ), {, final, double, d, =, qrtMinor, [, row, ], ;, final, double, [, ], yRow, =]
[<, m, ;, ++, row, ), {, final, double, d, =, qrtMinor, [, row, ], ;, final, double, [, ]]
[;, ++, row, ), {, final, double, d, =, qrtMinor, [, row, ], ;, final, double, [, ], yRow, =]
[), {, final, double, d, =, qrtMinor, [, row, ], ;, final, double, [, ], yRow, =, y, [, row]
[), {, final, double, d, =, qrtMinor, [, row, ], ;, final, double, [, ], yRow, =, y, [, row]
[;, final, double, [, ], yRow, =, y, [, row, ], ;, for, (, int, k, =, 0, ;, k]
[[, row, ], ;, final, double, [, ], yRow, =, y, [, row, ], ;, for, (, int, k, =]
[], ;, final, double, [, ], yRow, =, y, [, row, ], ;, for, (, int, k, =, 0, ;]
[;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, alpha, [, k, ]]
[[, row, ], ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, alpha]
[], ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, alpha, [, k]
[;, k, <, kWidth, ;, ++, k, ), {, alpha, [, k, ], +=, d, *, yRow, [, k, ]]
[;, ++, k, ), {, alpha, [, k, ], +=, d, *, yRow, [, k, ], ;, }, }, for]
[<, kWidth, ;, ++, k, ), {, alpha, [, k, ], +=, d, *, yRow, [, k, ], ;, }]
[;, ++, k, ), {, alpha, [, k, ], +=, d, *, yRow, [, k, ], ;, }, }, for]
[), {, alpha, [, k, ], +=, d, *, yRow, [, k, ], ;, }, }, for, (, int, k]
[), {, alpha, [, k, ], +=, d, *, yRow, [, k, ], ;, }, }, for, (, int, k]
[+=, d, *, yRow, [, k, ], ;, }, }, for, (, int, k, =, 0, ;, k, <, kWidth]
[[, k, ], +=, d, *, yRow, [, k, ], ;, }, }, for, (, int, k, =, 0, ;]
[], +=, d, *, yRow, [, k, ], ;, }, }, for, (, int, k, =, 0, ;, k, <]
[;, }, }, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, alpha, []
[*, yRow, [, k, ], ;, }, }, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++]
[;, }, }, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, alpha, []
[[, k, ], ;, }, }, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, )]
[], ;, }, }, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, alpha]
[;, k, <, kWidth, ;, ++, k, ), {, alpha, [, k, ], *=, factor, ;, }, for, (, int]
[;, ++, k, ), {, alpha, [, k, ], *=, factor, ;, }, for, (, int, row, =, minor, ;]
[<, kWidth, ;, ++, k, ), {, alpha, [, k, ], *=, factor, ;, }, for, (, int, row, =]
[;, ++, k, ), {, alpha, [, k, ], *=, factor, ;, }, for, (, int, row, =, minor, ;]
[), {, alpha, [, k, ], *=, factor, ;, }, for, (, int, row, =, minor, ;, row, <, m]
[), {, alpha, [, k, ], *=, factor, ;, }, for, (, int, row, =, minor, ;, row, <, m]
[*=, factor, ;, }, for, (, int, row, =, minor, ;, row, <, m, ;, ++, row, ), {, final]
[[, k, ], *=, factor, ;, }, for, (, int, row, =, minor, ;, row, <, m, ;, ++, row]
[], *=, factor, ;, }, for, (, int, row, =, minor, ;, row, <, m, ;, ++, row, ), {]
[;, }, for, (, int, row, =, minor, ;, row, <, m, ;, ++, row, ), {, final, double, d]
[;, row, <, m, ;, ++, row, ), {, final, double, d, =, qrtMinor, [, row, ], ;, final, double]
[;, ++, row, ), {, final, double, d, =, qrtMinor, [, row, ], ;, final, double, [, ], yRow, =]
[<, m, ;, ++, row, ), {, final, double, d, =, qrtMinor, [, row, ], ;, final, double, [, ]]
[;, ++, row, ), {, final, double, d, =, qrtMinor, [, row, ], ;, final, double, [, ], yRow, =]
[), {, final, double, d, =, qrtMinor, [, row, ], ;, final, double, [, ], yRow, =, y, [, row]
[), {, final, double, d, =, qrtMinor, [, row, ], ;, final, double, [, ], yRow, =, y, [, row]
[;, final, double, [, ], yRow, =, y, [, row, ], ;, for, (, int, k, =, 0, ;, k]
[[, row, ], ;, final, double, [, ], yRow, =, y, [, row, ], ;, for, (, int, k, =]
[], ;, final, double, [, ], yRow, =, y, [, row, ], ;, for, (, int, k, =, 0, ;]
[;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yRow, [, k, ]]
[[, row, ], ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yRow]
[], ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yRow, [, k]
[;, k, <, kWidth, ;, ++, k, ), {, yRow, [, k, ], +=, alpha, [, k, ], *, d]
[;, ++, k, ), {, yRow, [, k, ], +=, alpha, [, k, ], *, d, ;, }, }, }]
[<, kWidth, ;, ++, k, ), {, yRow, [, k, ], +=, alpha, [, k, ], *, d, ;, }]
[;, ++, k, ), {, yRow, [, k, ], +=, alpha, [, k, ], *, d, ;, }, }, }]
[), {, yRow, [, k, ], +=, alpha, [, k, ], *, d, ;, }, }, }, for, (, int]
[), {, yRow, [, k, ], +=, alpha, [, k, ], *, d, ;, }, }, }, for, (, int]
[+=, alpha, [, k, ], *, d, ;, }, }, }, for, (, int, j, =, rDiag, ., length, -]
[[, k, ], +=, alpha, [, k, ], *, d, ;, }, }, }, for, (, int, j, =, rDiag]
[], +=, alpha, [, k, ], *, d, ;, }, }, }, for, (, int, j, =, rDiag, ., length]
[;, }, }, }, for, (, int, j, =, rDiag, ., length, -, 1, ;, j, >=, 0, ;, --]
[*, d, ;, }, }, }, for, (, int, j, =, rDiag, ., length, -, 1, ;, j, >=, 0]
[[, k, ], *, d, ;, }, }, }, for, (, int, j, =, rDiag, ., length, -, 1, ;]
[], *, d, ;, }, }, }, for, (, int, j, =, rDiag, ., length, -, 1, ;, j, >=]
[;, }, }, }, for, (, int, j, =, rDiag, ., length, -, 1, ;, j, >=, 0, ;, --]
[;, j, >=, 0, ;, --, j, ), {, final, int, jBlock, =, j, /, blockSize, ;, final, int, jStart]
[-, 1, ;, j, >=, 0, ;, --, j, ), {, final, int, jBlock, =, j, /, blockSize, ;, final]
[., length, -, 1, ;, j, >=, 0, ;, --, j, ), {, final, int, jBlock, =, j, /, blockSize]
[;, j, >=, 0, ;, --, j, ), {, final, int, jBlock, =, j, /, blockSize, ;, final, int, jStart]
[;, --, j, ), {, final, int, jBlock, =, j, /, blockSize, ;, final, int, jStart, =, jBlock, *, blockSize]
[>=, 0, ;, --, j, ), {, final, int, jBlock, =, j, /, blockSize, ;, final, int, jStart, =, jBlock]
[;, --, j, ), {, final, int, jBlock, =, j, /, blockSize, ;, final, int, jStart, =, jBlock, *, blockSize]
[), {, final, int, jBlock, =, j, /, blockSize, ;, final, int, jStart, =, jBlock, *, blockSize, ;, final, double]
[), {, final, int, jBlock, =, j, /, blockSize, ;, final, int, jStart, =, jBlock, *, blockSize, ;, final, double]
[;, final, int, jStart, =, jBlock, *, blockSize, ;, final, double, factor, =, 1.0, /, rDiag, [, j, ], ;]
[/, blockSize, ;, final, int, jStart, =, jBlock, *, blockSize, ;, final, double, factor, =, 1.0, /, rDiag, [, j]
[;, final, int, jStart, =, jBlock, *, blockSize, ;, final, double, factor, =, 1.0, /, rDiag, [, j, ], ;]
[;, final, double, factor, =, 1.0, /, rDiag, [, j, ], ;, final, double, [, ], yJ, =, y, []
[*, blockSize, ;, final, double, factor, =, 1.0, /, rDiag, [, j, ], ;, final, double, [, ], yJ, =]
[;, final, double, factor, =, 1.0, /, rDiag, [, j, ], ;, final, double, [, ], yJ, =, y, []
[;, final, double, [, ], yJ, =, y, [, j, ], ;, final, double, [, ], xBlock, =, xBlocks, []
[/, rDiag, [, j, ], ;, final, double, [, ], yJ, =, y, [, j, ], ;, final, double, []
[;, final, double, [, ], yJ, =, y, [, j, ], ;, final, double, [, ], xBlock, =, xBlocks, []
[[, j, ], ;, final, double, [, ], yJ, =, y, [, j, ], ;, final, double, [, ], xBlock]
[], ;, final, double, [, ], yJ, =, y, [, j, ], ;, final, double, [, ], xBlock, =, xBlocks]
[;, final, double, [, ], xBlock, =, xBlocks, [, jBlock, *, cBlocks, +, kBlock, ], ;, int, index, =, (]
[[, j, ], ;, final, double, [, ], xBlock, =, xBlocks, [, jBlock, *, cBlocks, +, kBlock, ], ;, int]
[], ;, final, double, [, ], xBlock, =, xBlocks, [, jBlock, *, cBlocks, +, kBlock, ], ;, int, index, =]
[;, int, index, =, (, j, -, jStart, ), *, kWidth, ;, for, (, int, k, =, 0, ;, k]
[[, jBlock, *, cBlocks, +, kBlock, ], ;, int, index, =, (, j, -, jStart, ), *, kWidth, ;, for]
[], ;, int, index, =, (, j, -, jStart, ), *, kWidth, ;, for, (, int, k, =, 0, ;]
[+, kBlock, ], ;, int, index, =, (, j, -, jStart, ), *, kWidth, ;, for, (, int, k, =]
[*, cBlocks, +, kBlock, ], ;, int, index, =, (, j, -, jStart, ), *, kWidth, ;, for, (, int]
[+, kBlock, ], ;, int, index, =, (, j, -, jStart, ), *, kWidth, ;, for, (, int, k, =]
[], ;, int, index, =, (, j, -, jStart, ), *, kWidth, ;, for, (, int, k, =, 0, ;]
[;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yJ, [, k, ]]
[*, kWidth, ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yJ, []
[), *, kWidth, ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yJ]
[-, jStart, ), *, kWidth, ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, )]
[), *, kWidth, ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yJ]
[;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yJ, [, k, ]]
[;, k, <, kWidth, ;, ++, k, ), {, yJ, [, k, ], *=, factor, ;, xBlock, [, index, ++]
[;, ++, k, ), {, yJ, [, k, ], *=, factor, ;, xBlock, [, index, ++, ], =, yJ, []
[<, kWidth, ;, ++, k, ), {, yJ, [, k, ], *=, factor, ;, xBlock, [, index, ++, ], =]
[;, ++, k, ), {, yJ, [, k, ], *=, factor, ;, xBlock, [, index, ++, ], =, yJ, []
[), {, yJ, [, k, ], *=, factor, ;, xBlock, [, index, ++, ], =, yJ, [, k, ], ;]
[), {, yJ, [, k, ], *=, factor, ;, xBlock, [, index, ++, ], =, yJ, [, k, ], ;]
[*=, factor, ;, xBlock, [, index, ++, ], =, yJ, [, k, ], ;, }, final, double, [, ], qrtJ]
[[, k, ], *=, factor, ;, xBlock, [, index, ++, ], =, yJ, [, k, ], ;, }, final, double]
[], *=, factor, ;, xBlock, [, index, ++, ], =, yJ, [, k, ], ;, }, final, double, [, ]]
[;, xBlock, [, index, ++, ], =, yJ, [, k, ], ;, }, final, double, [, ], qrtJ, =, qrt]
[=, yJ, [, k, ], ;, }, final, double, [, ], qrtJ, =, qrt, [, j, ], ;, for, (]
[[, index, ++, ], =, yJ, [, k, ], ;, }, final, double, [, ], qrtJ, =, qrt, [, j]
[], =, yJ, [, k, ], ;, }, final, double, [, ], qrtJ, =, qrt, [, j, ], ;, for]
[++, ], =, yJ, [, k, ], ;, }, final, double, [, ], qrtJ, =, qrt, [, j, ], ;]
[;, }, final, double, [, ], qrtJ, =, qrt, [, j, ], ;, for, (, int, i, =, 0, ;]
[[, k, ], ;, }, final, double, [, ], qrtJ, =, qrt, [, j, ], ;, for, (, int, i]
[], ;, }, final, double, [, ], qrtJ, =, qrt, [, j, ], ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, j, ;, ++, i, ), {, final, double, rIJ, =]
[[, j, ], ;, for, (, int, i, =, 0, ;, i, <, j, ;, ++, i, ), {, final]
[], ;, for, (, int, i, =, 0, ;, i, <, j, ;, ++, i, ), {, final, double, rIJ]
[;, i, <, j, ;, ++, i, ), {, final, double, rIJ, =, qrtJ, [, i, ], ;, final, double]
[;, ++, i, ), {, final, double, rIJ, =, qrtJ, [, i, ], ;, final, double, [, ], yI, =]
[<, j, ;, ++, i, ), {, final, double, rIJ, =, qrtJ, [, i, ], ;, final, double, [, ]]
[;, ++, i, ), {, final, double, rIJ, =, qrtJ, [, i, ], ;, final, double, [, ], yI, =]
[), {, final, double, rIJ, =, qrtJ, [, i, ], ;, final, double, [, ], yI, =, y, [, i]
[), {, final, double, rIJ, =, qrtJ, [, i, ], ;, final, double, [, ], yI, =, y, [, i]
[;, final, double, [, ], yI, =, y, [, i, ], ;, for, (, int, k, =, 0, ;, k]
[[, i, ], ;, final, double, [, ], yI, =, y, [, i, ], ;, for, (, int, k, =]
[], ;, final, double, [, ], yI, =, y, [, i, ], ;, for, (, int, k, =, 0, ;]
[;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yI, [, k, ]]
[[, i, ], ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yI]
[], ;, for, (, int, k, =, 0, ;, k, <, kWidth, ;, ++, k, ), {, yI, [, k]
[;, k, <, kWidth, ;, ++, k, ), {, yI, [, k, ], -=, yJ, [, k, ], *, rIJ]
[;, ++, k, ), {, yI, [, k, ], -=, yJ, [, k, ], *, rIJ, ;, }, }, }]
[<, kWidth, ;, ++, k, ), {, yI, [, k, ], -=, yJ, [, k, ], *, rIJ, ;, }]
[;, ++, k, ), {, yI, [, k, ], -=, yJ, [, k, ], *, rIJ, ;, }, }, }]
[), {, yI, [, k, ], -=, yJ, [, k, ], *, rIJ, ;, }, }, }, }, return, new]
[), {, yI, [, k, ], -=, yJ, [, k, ], *, rIJ, ;, }, }, }, }, return, new]
[-=, yJ, [, k, ], *, rIJ, ;, }, }, }, }, return, new, BlockRealMatrix, (, n, ,, columns, ,]
[[, k, ], -=, yJ, [, k, ], *, rIJ, ;, }, }, }, }, return, new, BlockRealMatrix, (, n]
[], -=, yJ, [, k, ], *, rIJ, ;, }, }, }, }, return, new, BlockRealMatrix, (, n, ,, columns]
[;, }, }, }, }, return, new, BlockRealMatrix, (, n, ,, columns, ,, xBlocks, ,, false, ), ;, }, public]
[*, rIJ, ;, }, }, }, }, return, new, BlockRealMatrix, (, n, ,, columns, ,, xBlocks, ,, false, ), ;]
[[, k, ], *, rIJ, ;, }, }, }, }, return, new, BlockRealMatrix, (, n, ,, columns, ,, xBlocks, ,]
[], *, rIJ, ;, }, }, }, }, return, new, BlockRealMatrix, (, n, ,, columns, ,, xBlocks, ,, false, )]
[;, }, }, }, }, return, new, BlockRealMatrix, (, n, ,, columns, ,, xBlocks, ,, false, ), ;, }, public]
[;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (, MatrixUtils, ., createRealIdentityMatrix, (, rDiag, ., length, ), )]
[,, columns, ,, xBlocks, ,, false, ), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (, MatrixUtils, .]
[,, xBlocks, ,, false, ), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (, MatrixUtils, ., createRealIdentityMatrix, (]
[,, false, ), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (, MatrixUtils, ., createRealIdentityMatrix, (, rDiag, .]
[), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (, MatrixUtils, ., createRealIdentityMatrix, (, rDiag, ., length, )]
[;, }, }, }]
[), ;, }, }, }]
[., createRealIdentityMatrix, (, rDiag, ., length, ), ), ;, }, }, }]
[), ), ;, }, }, }]
[., length, ), ), ;, }, }, }]
