[double, [, ], weightedResidual, ;, private, double, [, ], [, ], weightedJacobian, ;, public, LevenbergMarquardtOptimizer, (, ), {, this, (]
[], weightedResidual, ;, private, double, [, ], [, ], weightedJacobian, ;, public, LevenbergMarquardtOptimizer, (, ), {, this, (, 100, ,]
[;, private, double, [, ], [, ], weightedJacobian, ;, public, LevenbergMarquardtOptimizer, (, ), {, this, (, 100, ,, 1e-10, ,]
[double, [, ], [, ], weightedJacobian, ;, public, LevenbergMarquardtOptimizer, (, ), {, this, (, 100, ,, 1e-10, ,, 1e-10, ,]
[], [, ], weightedJacobian, ;, public, LevenbergMarquardtOptimizer, (, ), {, this, (, 100, ,, 1e-10, ,, 1e-10, ,, 1e-10, ,]
[], [, ], weightedJacobian, ;, public, LevenbergMarquardtOptimizer, (, ), {, this, (, 100, ,, 1e-10, ,, 1e-10, ,, 1e-10, ,]
[1e-10, ,, Precision, ., SAFE_MIN, ), ;, }, public, LevenbergMarquardtOptimizer, (, ConvergenceChecker, <, PointVectorValuePair, >, checker, ), {, this, (]
[Precision, ., SAFE_MIN, ), ;, }, public, LevenbergMarquardtOptimizer, (, ConvergenceChecker, <, PointVectorValuePair, >, checker, ), {, this, (, 100, ,]
[SAFE_MIN, ), ;, }, public, LevenbergMarquardtOptimizer, (, ConvergenceChecker, <, PointVectorValuePair, >, checker, ), {, this, (, 100, ,, checker, ,]
[;, }, public, LevenbergMarquardtOptimizer, (, ConvergenceChecker, <, PointVectorValuePair, >, checker, ), {, this, (, 100, ,, checker, ,, 1e-10, ,]
[public, LevenbergMarquardtOptimizer, (, ConvergenceChecker, <, PointVectorValuePair, >, checker, ), {, this, (, 100, ,, checker, ,, 1e-10, ,, 1e-10, ,]
[(, ConvergenceChecker, <, PointVectorValuePair, >, checker, ), {, this, (, 100, ,, checker, ,, 1e-10, ,, 1e-10, ,, 1e-10, ,]
[(, ConvergenceChecker, <, PointVectorValuePair, >, checker, ), {, this, (, 100, ,, checker, ,, 1e-10, ,, 1e-10, ,, 1e-10, ,]
[<, PointVectorValuePair, >, checker, ,, double, costRelativeTolerance, ,, double, parRelativeTolerance, ,, double, orthoTolerance, ,, double, threshold, ), {, super, (]
[checker, ,, double, costRelativeTolerance, ,, double, parRelativeTolerance, ,, double, orthoTolerance, ,, double, threshold, ), {, super, (, checker, ), ;]
[checker, ,, double, costRelativeTolerance, ,, double, parRelativeTolerance, ,, double, orthoTolerance, ,, double, threshold, ), {, super, (, checker, ), ;]
[,, double, parRelativeTolerance, ,, double, orthoTolerance, ,, double, threshold, ), {, super, (, checker, ), ;, this, ., initialStepBoundFactor, =]
[parRelativeTolerance, ,, double, orthoTolerance, ,, double, threshold, ), {, super, (, checker, ), ;, this, ., initialStepBoundFactor, =, initialStepBoundFactor, ;]
[parRelativeTolerance, ,, double, orthoTolerance, ,, double, threshold, ), {, super, (, checker, ), ;, this, ., initialStepBoundFactor, =, initialStepBoundFactor, ;]
[,, double, threshold, ), {, super, (, checker, ), ;, this, ., initialStepBoundFactor, =, initialStepBoundFactor, ;, this, ., costRelativeTolerance, =]
[threshold, ), {, super, (, checker, ), ;, this, ., initialStepBoundFactor, =, initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;]
[threshold, ), {, super, (, checker, ), ;, this, ., initialStepBoundFactor, =, initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;]
[(, checker, ), ;, this, ., initialStepBoundFactor, =, initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =]
[), ;, this, ., initialStepBoundFactor, =, initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;]
[), ;, this, ., initialStepBoundFactor, =, initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;]
[initialStepBoundFactor, =, initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance, =]
[initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance, =, orthoTolerance, ;]
[initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance, =, orthoTolerance, ;]
[costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance, =, orthoTolerance, ;, this, ., qrRankingThreshold, =]
[qrRankingThreshold, =, threshold, ;, }, public, LevenbergMarquardtOptimizer, (, double, costRelativeTolerance, ,, double, parRelativeTolerance, ,, double, orthoTolerance, ), {, this, (]
[threshold, ;, }, public, LevenbergMarquardtOptimizer, (, double, costRelativeTolerance, ,, double, parRelativeTolerance, ,, double, orthoTolerance, ), {, this, (, 100, ,]
[}, public, LevenbergMarquardtOptimizer, (, double, costRelativeTolerance, ,, double, parRelativeTolerance, ,, double, orthoTolerance, ), {, this, (, 100, ,, costRelativeTolerance, ,]
[LevenbergMarquardtOptimizer, (, double, costRelativeTolerance, ,, double, parRelativeTolerance, ,, double, orthoTolerance, ), {, this, (, 100, ,, costRelativeTolerance, ,, parRelativeTolerance, ,]
[double, costRelativeTolerance, ,, double, parRelativeTolerance, ,, double, orthoTolerance, ), {, this, (, 100, ,, costRelativeTolerance, ,, parRelativeTolerance, ,, orthoTolerance, ,]
[double, costRelativeTolerance, ,, double, parRelativeTolerance, ,, double, orthoTolerance, ), {, this, (, 100, ,, costRelativeTolerance, ,, parRelativeTolerance, ,, orthoTolerance, ,]
[LevenbergMarquardtOptimizer, (, double, initialStepBoundFactor, ,, double, costRelativeTolerance, ,, double, parRelativeTolerance, ,, double, orthoTolerance, ,, double, threshold, ), {, super, (]
[initialStepBoundFactor, ,, double, costRelativeTolerance, ,, double, parRelativeTolerance, ,, double, orthoTolerance, ,, double, threshold, ), {, super, (, null, ), ;]
[initialStepBoundFactor, ,, double, costRelativeTolerance, ,, double, parRelativeTolerance, ,, double, orthoTolerance, ,, double, threshold, ), {, super, (, null, ), ;]
[,, double, parRelativeTolerance, ,, double, orthoTolerance, ,, double, threshold, ), {, super, (, null, ), ;, this, ., initialStepBoundFactor, =]
[parRelativeTolerance, ,, double, orthoTolerance, ,, double, threshold, ), {, super, (, null, ), ;, this, ., initialStepBoundFactor, =, initialStepBoundFactor, ;]
[parRelativeTolerance, ,, double, orthoTolerance, ,, double, threshold, ), {, super, (, null, ), ;, this, ., initialStepBoundFactor, =, initialStepBoundFactor, ;]
[,, double, threshold, ), {, super, (, null, ), ;, this, ., initialStepBoundFactor, =, initialStepBoundFactor, ;, this, ., costRelativeTolerance, =]
[threshold, ), {, super, (, null, ), ;, this, ., initialStepBoundFactor, =, initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;]
[threshold, ), {, super, (, null, ), ;, this, ., initialStepBoundFactor, =, initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;]
[(, null, ), ;, this, ., initialStepBoundFactor, =, initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =]
[), ;, this, ., initialStepBoundFactor, =, initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;]
[), ;, this, ., initialStepBoundFactor, =, initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;]
[initialStepBoundFactor, =, initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance, =]
[initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance, =, orthoTolerance, ;]
[initialStepBoundFactor, ;, this, ., costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance, =, orthoTolerance, ;]
[costRelativeTolerance, =, costRelativeTolerance, ;, this, ., parRelativeTolerance, =, parRelativeTolerance, ;, this, ., orthoTolerance, =, orthoTolerance, ;, this, ., qrRankingThreshold, =]
[;, this, ., qrRankingThreshold, =, threshold, ;, }, @, Override, protected, PointVectorValuePair, doOptimize, (, ), {, final, int, nR, =]
[;, this, ., qrRankingThreshold, =, threshold, ;, }, @, Override, protected, PointVectorValuePair, doOptimize, (, ), {, final, int, nR, =]
[doOptimize, (, ), {, final, int, nR, =, getTarget, (, ), ., length, ;, final, double, [, ], currentPoint, =]
[getTarget, (, ), ., length, ;, final, double, [, ], currentPoint, =, getStartPoint, (, ), ;, final, int, nC, =]
[getTarget, (, ), ., length, ;, final, double, [, ], currentPoint, =, getStartPoint, (, ), ;, final, int, nC, =]
[length, ;, final, double, [, ], currentPoint, =, getStartPoint, (, ), ;, final, int, nC, =, currentPoint, ., length, ;]
[final, double, [, ], currentPoint, =, getStartPoint, (, ), ;, final, int, nC, =, currentPoint, ., length, ;, solvedCols, =]
[final, double, [, ], currentPoint, =, getStartPoint, (, ), ;, final, int, nC, =, currentPoint, ., length, ;, solvedCols, =]
[currentPoint, =, getStartPoint, (, ), ;, final, int, nC, =, currentPoint, ., length, ;, solvedCols, =, FastMath, ., min, (]
[getStartPoint, (, ), ;, final, int, nC, =, currentPoint, ., length, ;, solvedCols, =, FastMath, ., min, (, nR, ,]
[;, final, int, nC, =, currentPoint, ., length, ;, solvedCols, =, FastMath, ., min, (, nR, ,, nC, ), ;]
[int, nC, =, currentPoint, ., length, ;, solvedCols, =, FastMath, ., min, (, nR, ,, nC, ), ;, diagR, =]
[currentPoint, ., length, ;, solvedCols, =, FastMath, ., min, (, nR, ,, nC, ), ;, diagR, =, new, double, []
[;, solvedCols, =, FastMath, ., min, (, nR, ,, nC, ), ;, diagR, =, new, double, [, nC, ], ;]
[=, FastMath, ., min, (, nR, ,, nC, ), ;, diagR, =, new, double, [, nC, ], ;, jacNorm, =]
[min, (, nR, ,, nC, ), ;, diagR, =, new, double, [, nC, ], ;, jacNorm, =, new, double, []
[,, nC, ), ;, diagR, =, new, double, [, nC, ], ;, jacNorm, =, new, double, [, nC, ], ;]
[), ;, diagR, =, new, double, [, nC, ], ;, jacNorm, =, new, double, [, nC, ], ;, beta, =]
[=, new, double, [, nC, ], ;, jacNorm, =, new, double, [, nC, ], ;, beta, =, new, double, []
[[, nC, ], ;, jacNorm, =, new, double, [, nC, ], ;, beta, =, new, double, [, nC, ], ;]
[], ;, jacNorm, =, new, double, [, nC, ], ;, beta, =, new, double, [, nC, ], ;, permutation, =]
[=, new, double, [, nC, ], ;, beta, =, new, double, [, nC, ], ;, permutation, =, new, int, []
[[, nC, ], ;, beta, =, new, double, [, nC, ], ;, permutation, =, new, int, [, nC, ], ;]
[], ;, beta, =, new, double, [, nC, ], ;, permutation, =, new, int, [, nC, ], ;, lmDir, =]
[=, new, double, [, nC, ], ;, permutation, =, new, int, [, nC, ], ;, lmDir, =, new, double, []
[;, permutation, =, new, int, [, nC, ], ;, lmDir, =, new, double, [, nC, ], ;, double, delta, =]
[[, nC, ], ;, lmDir, =, new, double, [, nC, ], ;, double, delta, =, 0, ;, double, xNorm, =]
[double, [, nC, ], ;, double, delta, =, 0, ;, double, xNorm, =, 0, ;, double, [, ], diag, =]
[], ;, double, delta, =, 0, ;, double, xNorm, =, 0, ;, double, [, ], diag, =, new, double, []
[xNorm, =, 0, ;, double, [, ], diag, =, new, double, [, nC, ], ;, double, [, ], oldX, =]
[;, double, [, ], diag, =, new, double, [, nC, ], ;, double, [, ], oldX, =, new, double, []
[[, nC, ], ;, double, [, ], oldX, =, new, double, [, nC, ], ;, double, [, ], oldRes, =]
[;, double, [, ], oldX, =, new, double, [, nC, ], ;, double, [, ], oldRes, =, new, double, []
[[, nC, ], ;, double, [, ], oldRes, =, new, double, [, nR, ], ;, double, [, ], oldObj, =]
[;, double, [, ], oldRes, =, new, double, [, nR, ], ;, double, [, ], oldObj, =, new, double, []
[[, nR, ], ;, double, [, ], oldObj, =, new, double, [, nR, ], ;, double, [, ], qtf, =]
[;, double, [, ], oldObj, =, new, double, [, nR, ], ;, double, [, ], qtf, =, new, double, []
[[, nR, ], ;, double, [, ], qtf, =, new, double, [, nR, ], ;, double, [, ], work1, =]
[;, double, [, ], qtf, =, new, double, [, nR, ], ;, double, [, ], work1, =, new, double, []
[[, nR, ], ;, double, [, ], work1, =, new, double, [, nC, ], ;, double, [, ], work2, =]
[;, double, [, ], work1, =, new, double, [, nC, ], ;, double, [, ], work2, =, new, double, []
[[, nC, ], ;, double, [, ], work2, =, new, double, [, nC, ], ;, double, [, ], work3, =]
[;, double, [, ], work2, =, new, double, [, nC, ], ;, double, [, ], work3, =, new, double, []
[double, [, nC, ], ;, double, [, ], work3, =, new, double, [, nC, ], ;, final, RealMatrix, weightMatrixSqrt, =]
[=, new, double, [, nC, ], ;, final, RealMatrix, weightMatrixSqrt, =, getWeightSquareRoot, (, ), ;, double, [, ], currentObjective, =]
[double, [, nC, ], ;, final, RealMatrix, weightMatrixSqrt, =, getWeightSquareRoot, (, ), ;, double, [, ], currentObjective, =, computeObjectiveValue, (]
[=, getWeightSquareRoot, (, ), ;, double, [, ], currentObjective, =, computeObjectiveValue, (, currentPoint, ), ;, double, [, ], currentResiduals, =]
[(, ), ;, double, [, ], currentObjective, =, computeObjectiveValue, (, currentPoint, ), ;, double, [, ], currentResiduals, =, computeResiduals, (]
[currentObjective, =, computeObjectiveValue, (, currentPoint, ), ;, double, [, ], currentResiduals, =, computeResiduals, (, currentObjective, ), ;, PointVectorValuePair, current, =]
[(, currentPoint, ), ;, double, [, ], currentResiduals, =, computeResiduals, (, currentObjective, ), ;, PointVectorValuePair, current, =, new, PointVectorValuePair, (]
[), ;, double, [, ], currentResiduals, =, computeResiduals, (, currentObjective, ), ;, PointVectorValuePair, current, =, new, PointVectorValuePair, (, currentPoint, ,]
[=, computeResiduals, (, currentObjective, ), ;, PointVectorValuePair, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, double, currentCost, =]
[(, currentObjective, ), ;, PointVectorValuePair, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, double, currentCost, =, computeCost, (]
[;, PointVectorValuePair, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, double, currentCost, =, computeCost, (, currentResiduals, ), ;]
[current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, double, currentCost, =, computeCost, (, currentResiduals, ), ;, lmPar, =]
[currentPoint, ,, currentObjective, ), ;, double, currentCost, =, computeCost, (, currentResiduals, ), ;, lmPar, =, 0, ;, boolean, firstIteration, =]
[double, currentCost, =, computeCost, (, currentResiduals, ), ;, lmPar, =, 0, ;, boolean, firstIteration, =, true, ;, int, iter, =]
[=, 0, ;, boolean, firstIteration, =, true, ;, int, iter, =, 0, ;, final, ConvergenceChecker, <, PointVectorValuePair, >, checker, =]
[true, ;, int, iter, =, 0, ;, final, ConvergenceChecker, <, PointVectorValuePair, >, checker, =, getConvergenceChecker, (, ), ;, while, (]
[iter, =, 0, ;, final, ConvergenceChecker, <, PointVectorValuePair, >, checker, =, getConvergenceChecker, (, ), ;, while, (, true, ), {]
[=, 0, ;, final, ConvergenceChecker, <, PointVectorValuePair, >, checker, =, getConvergenceChecker, (, ), ;, while, (, true, ), {, ++]
[PointVectorValuePair, >, checker, =, getConvergenceChecker, (, ), ;, while, (, true, ), {, ++, iter, ;, final, PointVectorValuePair, previous, =]
[checker, =, getConvergenceChecker, (, ), ;, while, (, true, ), {, ++, iter, ;, final, PointVectorValuePair, previous, =, current, ;]
[getConvergenceChecker, (, ), ;, while, (, true, ), {, ++, iter, ;, final, PointVectorValuePair, previous, =, current, ;, qrDecomposition, (]
[), ;, while, (, true, ), {, ++, iter, ;, final, PointVectorValuePair, previous, =, current, ;, qrDecomposition, (, computeWeightedJacobian, (]
[true, ), {, ++, iter, ;, final, PointVectorValuePair, previous, =, current, ;, qrDecomposition, (, computeWeightedJacobian, (, currentPoint, ), ), ;]
[{, ++, iter, ;, final, PointVectorValuePair, previous, =, current, ;, qrDecomposition, (, computeWeightedJacobian, (, currentPoint, ), ), ;, weightedResidual, =]
[{, ++, iter, ;, final, PointVectorValuePair, previous, =, current, ;, qrDecomposition, (, computeWeightedJacobian, (, currentPoint, ), ), ;, weightedResidual, =]
[final, PointVectorValuePair, previous, =, current, ;, qrDecomposition, (, computeWeightedJacobian, (, currentPoint, ), ), ;, weightedResidual, =, weightMatrixSqrt, ., operate, (]
[computeWeightedJacobian, (, currentPoint, ), ), ;, weightedResidual, =, weightMatrixSqrt, ., operate, (, currentResiduals, ), ;, for, (, int, i, =]
[currentPoint, ), ), ;, weightedResidual, =, weightMatrixSqrt, ., operate, (, currentResiduals, ), ;, for, (, int, i, =, 0, ;]
[currentPoint, ), ), ;, weightedResidual, =, weightMatrixSqrt, ., operate, (, currentResiduals, ), ;, for, (, int, i, =, 0, ;]
[), ;, weightedResidual, =, weightMatrixSqrt, ., operate, (, currentResiduals, ), ;, for, (, int, i, =, 0, ;, i, <]
[weightedResidual, =, weightMatrixSqrt, ., operate, (, currentResiduals, ), ;, for, (, int, i, =, 0, ;, i, <, nR, ;]
[weightedResidual, =, weightMatrixSqrt, ., operate, (, currentResiduals, ), ;, for, (, int, i, =, 0, ;, i, <, nR, ;]
[operate, (, currentResiduals, ), ;, for, (, int, i, =, 0, ;, i, <, nR, ;, i, ++, ), {]
[operate, (, currentResiduals, ), ;, for, (, int, i, =, 0, ;, i, <, nR, ;, i, ++, ), {]
[currentResiduals, ), ;, for, (, int, i, =, 0, ;, i, <, nR, ;, i, ++, ), {, qtf, []
[for, (, int, i, =, 0, ;, i, <, nR, ;, i, ++, ), {, qtf, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, nR, ;, i, ++, ), {, qtf, [, i, ], =]
[int, i, =, 0, ;, i, <, nR, ;, i, ++, ), {, qtf, [, i, ], =, weightedResidual, []
[;, i, <, nR, ;, i, ++, ), {, qtf, [, i, ], =, weightedResidual, [, i, ], ;, }]
[<, nR, ;, i, ++, ), {, qtf, [, i, ], =, weightedResidual, [, i, ], ;, }, qTy, (]
[[, i, ], =, weightedResidual, [, i, ], ;, }, qTy, (, qtf, ), ;, for, (, int, k, =]
[], =, weightedResidual, [, i, ], ;, }, qTy, (, qtf, ), ;, for, (, int, k, =, 0, ;]
[], =, weightedResidual, [, i, ], ;, }, qTy, (, qtf, ), ;, for, (, int, k, =, 0, ;]
[weightedResidual, [, i, ], ;, }, qTy, (, qtf, ), ;, for, (, int, k, =, 0, ;, k, <]
[i, ], ;, }, qTy, (, qtf, ), ;, for, (, int, k, =, 0, ;, k, <, solvedCols, ;]
[], ;, }, qTy, (, qtf, ), ;, for, (, int, k, =, 0, ;, k, <, solvedCols, ;, ++]
[), ;, for, (, int, k, =, 0, ;, k, <, solvedCols, ;, ++, k, ), {, int, pk, =]
[), ;, for, (, int, k, =, 0, ;, k, <, solvedCols, ;, ++, k, ), {, int, pk, =]
[for, (, int, k, =, 0, ;, k, <, solvedCols, ;, ++, k, ), {, int, pk, =, permutation, []
[k, =, 0, ;, k, <, solvedCols, ;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;]
[k, =, 0, ;, k, <, solvedCols, ;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;]
[k, =, 0, ;, k, <, solvedCols, ;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;]
[0, ;, k, <, solvedCols, ;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;, weightedJacobian, []
[<, solvedCols, ;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;, weightedJacobian, [, k, ], []
[++, k, ), {, int, pk, =, permutation, [, k, ], ;, weightedJacobian, [, k, ], [, pk, ], =]
[++, k, ), {, int, pk, =, permutation, [, k, ], ;, weightedJacobian, [, k, ], [, pk, ], =]
[), {, int, pk, =, permutation, [, k, ], ;, weightedJacobian, [, k, ], [, pk, ], =, diagR, []
[[, k, ], ;, weightedJacobian, [, k, ], [, pk, ], =, diagR, [, pk, ], ;, }, if, (]
[;, weightedJacobian, [, k, ], [, pk, ], =, diagR, [, pk, ], ;, }, if, (, firstIteration, ), {]
[[, k, ], [, pk, ], =, diagR, [, pk, ], ;, }, if, (, firstIteration, ), {, xNorm, =]
[diagR, [, pk, ], ;, }, if, (, firstIteration, ), {, xNorm, =, 0, ;, for, (, int, k, =]
[pk, ], ;, }, if, (, firstIteration, ), {, xNorm, =, 0, ;, for, (, int, k, =, 0, ;]
[pk, ], ;, }, if, (, firstIteration, ), {, xNorm, =, 0, ;, for, (, int, k, =, 0, ;]
[;, }, if, (, firstIteration, ), {, xNorm, =, 0, ;, for, (, int, k, =, 0, ;, k, <]
[if, (, firstIteration, ), {, xNorm, =, 0, ;, for, (, int, k, =, 0, ;, k, <, nC, ;]
[(, firstIteration, ), {, xNorm, =, 0, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++]
[0, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, double, dk, =]
[0, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, double, dk, =]
[for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, double, dk, =, jacNorm, []
[0, ;, k, <, nC, ;, ++, k, ), {, double, dk, =, jacNorm, [, k, ], ;, if, (]
[0, ;, k, <, nC, ;, ++, k, ), {, double, dk, =, jacNorm, [, k, ], ;, if, (]
[k, <, nC, ;, ++, k, ), {, double, dk, =, jacNorm, [, k, ], ;, if, (, dk, ==]
[;, ++, k, ), {, double, dk, =, jacNorm, [, k, ], ;, if, (, dk, ==, 0, ), {]
[k, ), {, double, dk, =, jacNorm, [, k, ], ;, if, (, dk, ==, 0, ), {, dk, =]
[jacNorm, [, k, ], ;, if, (, dk, ==, 0, ), {, dk, =, 1.0, ;, }, double, xk, =]
[jacNorm, [, k, ], ;, if, (, dk, ==, 0, ), {, dk, =, 1.0, ;, }, double, xk, =]
[k, ], ;, if, (, dk, ==, 0, ), {, dk, =, 1.0, ;, }, double, xk, =, dk, *]
[k, ], ;, if, (, dk, ==, 0, ), {, dk, =, 1.0, ;, }, double, xk, =, dk, *]
[;, if, (, dk, ==, 0, ), {, dk, =, 1.0, ;, }, double, xk, =, dk, *, currentPoint, []
[dk, ==, 0, ), {, dk, =, 1.0, ;, }, double, xk, =, dk, *, currentPoint, [, k, ], ;]
[0, ), {, dk, =, 1.0, ;, }, double, xk, =, dk, *, currentPoint, [, k, ], ;, xNorm, +=]
[0, ), {, dk, =, 1.0, ;, }, double, xk, =, dk, *, currentPoint, [, k, ], ;, xNorm, +=]
[{, dk, =, 1.0, ;, }, double, xk, =, dk, *, currentPoint, [, k, ], ;, xNorm, +=, xk, *]
[=, 1.0, ;, }, double, xk, =, dk, *, currentPoint, [, k, ], ;, xNorm, +=, xk, *, xk, ;]
[=, 1.0, ;, }, double, xk, =, dk, *, currentPoint, [, k, ], ;, xNorm, +=, xk, *, xk, ;]
[;, }, double, xk, =, dk, *, currentPoint, [, k, ], ;, xNorm, +=, xk, *, xk, ;, diag, []
[xk, =, dk, *, currentPoint, [, k, ], ;, xNorm, +=, xk, *, xk, ;, diag, [, k, ], =]
[*, currentPoint, [, k, ], ;, xNorm, +=, xk, *, xk, ;, diag, [, k, ], =, dk, ;, }]
[[, k, ], ;, xNorm, +=, xk, *, xk, ;, diag, [, k, ], =, dk, ;, }, xNorm, =]
[[, k, ], ;, xNorm, +=, xk, *, xk, ;, diag, [, k, ], =, dk, ;, }, xNorm, =]
[xNorm, +=, xk, *, xk, ;, diag, [, k, ], =, dk, ;, }, xNorm, =, FastMath, ., sqrt, (]
[*, xk, ;, diag, [, k, ], =, dk, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;]
[;, diag, [, k, ], =, dk, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, delta, =]
[;, diag, [, k, ], =, dk, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, delta, =]
[diag, [, k, ], =, dk, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, delta, =, (]
[diag, [, k, ], =, dk, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, delta, =, (]
[k, ], =, dk, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, delta, =, (, xNorm, ==]
[dk, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, delta, =, (, xNorm, ==, 0, ), ?]
[}, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, delta, =, (, xNorm, ==, 0, ), ?, initialStepBoundFactor, :]
[xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, delta, =, (, xNorm, ==, 0, ), ?, initialStepBoundFactor, :, (]
[xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, delta, =, (, xNorm, ==, 0, ), ?, initialStepBoundFactor, :, (]
[FastMath, ., sqrt, (, xNorm, ), ;, delta, =, (, xNorm, ==, 0, ), ?, initialStepBoundFactor, :, (, initialStepBoundFactor, *]
[delta, =, (, xNorm, ==, 0, ), ?, initialStepBoundFactor, :, (, initialStepBoundFactor, *, xNorm, ), ;, }, double, maxCosine, =]
[==, 0, ), ?, initialStepBoundFactor, :, (, initialStepBoundFactor, *, xNorm, ), ;, }, double, maxCosine, =, 0, ;, if, (]
[==, 0, ), ?, initialStepBoundFactor, :, (, initialStepBoundFactor, *, xNorm, ), ;, }, double, maxCosine, =, 0, ;, if, (]
[), ?, initialStepBoundFactor, :, (, initialStepBoundFactor, *, xNorm, ), ;, }, double, maxCosine, =, 0, ;, if, (, currentCost, !=]
[), ;, }, double, maxCosine, =, 0, ;, if, (, currentCost, !=, 0, ), {, for, (, int, j, =]
[}, double, maxCosine, =, 0, ;, if, (, currentCost, !=, 0, ), {, for, (, int, j, =, 0, ;]
[}, double, maxCosine, =, 0, ;, if, (, currentCost, !=, 0, ), {, for, (, int, j, =, 0, ;]
[maxCosine, =, 0, ;, if, (, currentCost, !=, 0, ), {, for, (, int, j, =, 0, ;, j, <]
[0, ;, if, (, currentCost, !=, 0, ), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[;, if, (, currentCost, !=, 0, ), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, []
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =]
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =, jacNorm, []
[), {, int, pj, =, permutation, [, j, ], ;, double, s, =, jacNorm, [, pj, ], ;, if, (]
[), {, int, pj, =, permutation, [, j, ], ;, double, s, =, jacNorm, [, pj, ], ;, if, (]
[int, pj, =, permutation, [, j, ], ;, double, s, =, jacNorm, [, pj, ], ;, if, (, s, !=]
[], ;, double, s, =, jacNorm, [, pj, ], ;, if, (, s, !=, 0, ), {, double, sum, =]
[pj, ], ;, if, (, s, !=, 0, ), {, double, sum, =, 0, ;, for, (, int, i, =]
[;, if, (, s, !=, 0, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[;, if, (, s, !=, 0, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[(, s, !=, 0, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <=]
[!=, 0, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;]
[0, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++]
[double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, sum, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, sum, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, sum, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, sum, +=]
[;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, sum, +=, weightedJacobian, []
[int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], []
[0, ;, i, <=, j, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *]
[0, ;, i, <=, j, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *]
[i, <=, j, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, qtf, []
[++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, qtf, [, i, ], ;, }]
[), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, qtf, [, i, ], ;, }, maxCosine, =]
[), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, qtf, [, i, ], ;, }, maxCosine, =]
[weightedJacobian, [, i, ], [, pj, ], *, qtf, [, i, ], ;, }, maxCosine, =, FastMath, ., max, (]
[i, ], [, pj, ], *, qtf, [, i, ], ;, }, maxCosine, =, FastMath, ., max, (, maxCosine, ,]
[i, ], [, pj, ], *, qtf, [, i, ], ;, }, maxCosine, =, FastMath, ., max, (, maxCosine, ,]
[i, ], [, pj, ], *, qtf, [, i, ], ;, }, maxCosine, =, FastMath, ., max, (, maxCosine, ,]
[], *, qtf, [, i, ], ;, }, maxCosine, =, FastMath, ., max, (, maxCosine, ,, FastMath, ., abs, (]
[[, i, ], ;, }, maxCosine, =, FastMath, ., max, (, maxCosine, ,, FastMath, ., abs, (, sum, ), /]
[i, ], ;, }, maxCosine, =, FastMath, ., max, (, maxCosine, ,, FastMath, ., abs, (, sum, ), /, (]
[i, ], ;, }, maxCosine, =, FastMath, ., max, (, maxCosine, ,, FastMath, ., abs, (, sum, ), /, (]
[;, }, maxCosine, =, FastMath, ., max, (, maxCosine, ,, FastMath, ., abs, (, sum, ), /, (, s, *]
[,, FastMath, ., abs, (, sum, ), /, (, s, *, currentCost, ), ), ;, }, }, }, if, (]
[,, FastMath, ., abs, (, sum, ), /, (, s, *, currentCost, ), ), ;, }, }, }, if, (]
[., abs, (, sum, ), /, (, s, *, currentCost, ), ), ;, }, }, }, if, (, maxCosine, <=]
[sum, ), /, (, s, *, currentCost, ), ), ;, }, }, }, if, (, maxCosine, <=, orthoTolerance, ), {]
[/, (, s, *, currentCost, ), ), ;, }, }, }, if, (, maxCosine, <=, orthoTolerance, ), {, setCost, (]
[*, currentCost, ), ), ;, }, }, }, if, (, maxCosine, <=, orthoTolerance, ), {, setCost, (, currentCost, ), ;]
[), ), ;, }, }, }, if, (, maxCosine, <=, orthoTolerance, ), {, setCost, (, currentCost, ), ;, point, =]
[), ), ;, }, }, }, if, (, maxCosine, <=, orthoTolerance, ), {, setCost, (, currentCost, ), ;, point, =]
[(, maxCosine, <=, orthoTolerance, ), {, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return]
[currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, for, (, int, j, =]
[;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, for, (, int, j, =, 0, ;]
[;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, for, (, int, j, =, 0, ;]
[=, current, ., getPoint, (, ), ;, return, current, ;, }, for, (, int, j, =, 0, ;, j, <]
[., getPoint, (, ), ;, return, current, ;, }, for, (, int, j, =, 0, ;, j, <, nC, ;]
[getPoint, (, ), ;, return, current, ;, }, for, (, int, j, =, 0, ;, j, <, nC, ;, ++]
[;, return, current, ;, }, for, (, int, j, =, 0, ;, j, <, nC, ;, ++, j, ), {]
[;, return, current, ;, }, for, (, int, j, =, 0, ;, j, <, nC, ;, ++, j, ), {]
[current, ;, }, for, (, int, j, =, 0, ;, j, <, nC, ;, ++, j, ), {, diag, []
[for, (, int, j, =, 0, ;, j, <, nC, ;, ++, j, ), {, diag, [, j, ], =]
[for, (, int, j, =, 0, ;, j, <, nC, ;, ++, j, ), {, diag, [, j, ], =]
[=, 0, ;, j, <, nC, ;, ++, j, ), {, diag, [, j, ], =, FastMath, ., max, (]
[=, 0, ;, j, <, nC, ;, ++, j, ), {, diag, [, j, ], =, FastMath, ., max, (]
[;, j, <, nC, ;, ++, j, ), {, diag, [, j, ], =, FastMath, ., max, (, diag, []
[nC, ;, ++, j, ), {, diag, [, j, ], =, FastMath, ., max, (, diag, [, j, ], ,]
[nC, ;, ++, j, ), {, diag, [, j, ], =, FastMath, ., max, (, diag, [, j, ], ,]
[++, j, ), {, diag, [, j, ], =, FastMath, ., max, (, diag, [, j, ], ,, jacNorm, []
[., max, (, diag, [, j, ], ,, jacNorm, [, j, ], ), ;, }, for, (, double, ratio, =]
[(, diag, [, j, ], ,, jacNorm, [, j, ], ), ;, }, for, (, double, ratio, =, 0, ;]
[(, diag, [, j, ], ,, jacNorm, [, j, ], ), ;, }, for, (, double, ratio, =, 0, ;]
[[, j, ], ,, jacNorm, [, j, ], ), ;, }, for, (, double, ratio, =, 0, ;, ratio, <]
[;, }, for, (, double, ratio, =, 0, ;, ratio, <, 1.0e-4, ;, ), {, for, (, int, j, =]
[for, (, double, ratio, =, 0, ;, ratio, <, 1.0e-4, ;, ), {, for, (, int, j, =, 0, ;]
[for, (, double, ratio, =, 0, ;, ratio, <, 1.0e-4, ;, ), {, for, (, int, j, =, 0, ;]
[double, ratio, =, 0, ;, ratio, <, 1.0e-4, ;, ), {, for, (, int, j, =, 0, ;, j, <]
[=, 0, ;, ratio, <, 1.0e-4, ;, ), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[0, ;, ratio, <, 1.0e-4, ;, ), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, []
[j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;]
[j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;]
[0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, oldX, []
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, oldX, [, pj, ], =]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, oldX, [, pj, ], =]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, oldX, [, pj, ], =, currentPoint, []
[permutation, [, j, ], ;, oldX, [, pj, ], =, currentPoint, [, pj, ], ;, }, final, double, previousCost, =]
[pj, ], =, currentPoint, [, pj, ], ;, }, final, double, previousCost, =, currentCost, ;, double, [, ], tmpVec, =]
[=, currentPoint, [, pj, ], ;, }, final, double, previousCost, =, currentCost, ;, double, [, ], tmpVec, =, weightedResidual, ;]
[[, pj, ], ;, }, final, double, previousCost, =, currentCost, ;, double, [, ], tmpVec, =, weightedResidual, ;, weightedResidual, =]
[], ;, }, final, double, previousCost, =, currentCost, ;, double, [, ], tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;]
[}, final, double, previousCost, =, currentCost, ;, double, [, ], tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =]
[double, previousCost, =, currentCost, ;, double, [, ], tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;]
[=, currentCost, ;, double, [, ], tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =]
[;, double, [, ], tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;]
[[, ], tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =]
[tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;]
[weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =]
[weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;]
[oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;, determineLMParameter, (]
[oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;, determineLMParameter, (, qtf, ,]
[tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;, determineLMParameter, (, qtf, ,, delta, ,]
[tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;, determineLMParameter, (, qtf, ,, delta, ,, diag, ,]
[currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;, determineLMParameter, (, qtf, ,, delta, ,, diag, ,, work1, ,]
[currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;, determineLMParameter, (, qtf, ,, delta, ,, diag, ,, work1, ,, work2, ,]
[tmpVec, ;, determineLMParameter, (, qtf, ,, delta, ,, diag, ,, work1, ,, work2, ,, work3, ), ;, double, lmNorm, =]
[,, diag, ,, work1, ,, work2, ,, work3, ), ;, double, lmNorm, =, 0, ;, for, (, int, j, =]
[,, work1, ,, work2, ,, work3, ), ;, double, lmNorm, =, 0, ;, for, (, int, j, =, 0, ;]
[,, work1, ,, work2, ,, work3, ), ;, double, lmNorm, =, 0, ;, for, (, int, j, =, 0, ;]
[,, work2, ,, work3, ), ;, double, lmNorm, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[,, work3, ), ;, double, lmNorm, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[work3, ), ;, double, lmNorm, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, []
[j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;]
[j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;]
[0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, lmDir, []
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, lmDir, [, pj, ], =]
[solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, lmDir, [, pj, ], =, -]
[solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, lmDir, [, pj, ], =, -]
[++, j, ), {, int, pj, =, permutation, [, j, ], ;, lmDir, [, pj, ], =, -, lmDir, []
[{, int, pj, =, permutation, [, j, ], ;, lmDir, [, pj, ], =, -, lmDir, [, pj, ], ;]
[{, int, pj, =, permutation, [, j, ], ;, lmDir, [, pj, ], =, -, lmDir, [, pj, ], ;]
[pj, =, permutation, [, j, ], ;, lmDir, [, pj, ], =, -, lmDir, [, pj, ], ;, currentPoint, []
[[, j, ], ;, lmDir, [, pj, ], =, -, lmDir, [, pj, ], ;, currentPoint, [, pj, ], =]
[[, j, ], ;, lmDir, [, pj, ], =, -, lmDir, [, pj, ], ;, currentPoint, [, pj, ], =]
[[, j, ], ;, lmDir, [, pj, ], =, -, lmDir, [, pj, ], ;, currentPoint, [, pj, ], =]
[], ;, lmDir, [, pj, ], =, -, lmDir, [, pj, ], ;, currentPoint, [, pj, ], =, oldX, []
[[, pj, ], =, -, lmDir, [, pj, ], ;, currentPoint, [, pj, ], =, oldX, [, pj, ], +]
[[, pj, ], =, -, lmDir, [, pj, ], ;, currentPoint, [, pj, ], =, oldX, [, pj, ], +]
[], =, -, lmDir, [, pj, ], ;, currentPoint, [, pj, ], =, oldX, [, pj, ], +, lmDir, []
[], ;, currentPoint, [, pj, ], =, oldX, [, pj, ], +, lmDir, [, pj, ], ;, double, s, =]
[], ;, currentPoint, [, pj, ], =, oldX, [, pj, ], +, lmDir, [, pj, ], ;, double, s, =]
[], ;, currentPoint, [, pj, ], =, oldX, [, pj, ], +, lmDir, [, pj, ], ;, double, s, =]
[currentPoint, [, pj, ], =, oldX, [, pj, ], +, lmDir, [, pj, ], ;, double, s, =, diag, []
[], =, oldX, [, pj, ], +, lmDir, [, pj, ], ;, double, s, =, diag, [, pj, ], *]
[], =, oldX, [, pj, ], +, lmDir, [, pj, ], ;, double, s, =, diag, [, pj, ], *]
[oldX, [, pj, ], +, lmDir, [, pj, ], ;, double, s, =, diag, [, pj, ], *, lmDir, []
[], +, lmDir, [, pj, ], ;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;]
[lmDir, [, pj, ], ;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;, lmNorm, +=]
[lmDir, [, pj, ], ;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;, lmNorm, +=]
[pj, ], ;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;, lmNorm, +=, s, *]
[double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;, lmNorm, +=, s, *, s, ;, }]
[=, diag, [, pj, ], *, lmDir, [, pj, ], ;, lmNorm, +=, s, *, s, ;, }, lmNorm, =]
[=, diag, [, pj, ], *, lmDir, [, pj, ], ;, lmNorm, +=, s, *, s, ;, }, lmNorm, =]
[], *, lmDir, [, pj, ], ;, lmNorm, +=, s, *, s, ;, }, lmNorm, =, FastMath, ., sqrt, (]
[], ;, lmNorm, +=, s, *, s, ;, }, lmNorm, =, FastMath, ., sqrt, (, lmNorm, ), ;, if, (]
[+=, s, *, s, ;, }, lmNorm, =, FastMath, ., sqrt, (, lmNorm, ), ;, if, (, firstIteration, ), {]
[*, s, ;, }, lmNorm, =, FastMath, ., sqrt, (, lmNorm, ), ;, if, (, firstIteration, ), {, delta, =]
[*, s, ;, }, lmNorm, =, FastMath, ., sqrt, (, lmNorm, ), ;, if, (, firstIteration, ), {, delta, =]
[lmNorm, =, FastMath, ., sqrt, (, lmNorm, ), ;, if, (, firstIteration, ), {, delta, =, FastMath, ., min, (]
[FastMath, ., sqrt, (, lmNorm, ), ;, if, (, firstIteration, ), {, delta, =, FastMath, ., min, (, delta, ,]
[lmNorm, ), ;, if, (, firstIteration, ), {, delta, =, FastMath, ., min, (, delta, ,, lmNorm, ), ;, }]
[;, if, (, firstIteration, ), {, delta, =, FastMath, ., min, (, delta, ,, lmNorm, ), ;, }, currentObjective, =]
[(, firstIteration, ), {, delta, =, FastMath, ., min, (, delta, ,, lmNorm, ), ;, }, currentObjective, =, computeObjectiveValue, (]
[{, delta, =, FastMath, ., min, (, delta, ,, lmNorm, ), ;, }, currentObjective, =, computeObjectiveValue, (, currentPoint, ), ;]
[=, FastMath, ., min, (, delta, ,, lmNorm, ), ;, }, currentObjective, =, computeObjectiveValue, (, currentPoint, ), ;, currentResiduals, =]
[., min, (, delta, ,, lmNorm, ), ;, }, currentObjective, =, computeObjectiveValue, (, currentPoint, ), ;, currentResiduals, =, computeResiduals, (]
[delta, ,, lmNorm, ), ;, }, currentObjective, =, computeObjectiveValue, (, currentPoint, ), ;, currentResiduals, =, computeResiduals, (, currentObjective, ), ;]
[lmNorm, ), ;, }, currentObjective, =, computeObjectiveValue, (, currentPoint, ), ;, currentResiduals, =, computeResiduals, (, currentObjective, ), ;, current, =]
[}, currentObjective, =, computeObjectiveValue, (, currentPoint, ), ;, currentResiduals, =, computeResiduals, (, currentObjective, ), ;, current, =, new, PointVectorValuePair, (]
[=, computeObjectiveValue, (, currentPoint, ), ;, currentResiduals, =, computeResiduals, (, currentObjective, ), ;, current, =, new, PointVectorValuePair, (, currentPoint, ,]
[currentPoint, ), ;, currentResiduals, =, computeResiduals, (, currentObjective, ), ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;]
[;, currentResiduals, =, computeResiduals, (, currentObjective, ), ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, currentCost, =]
[=, computeResiduals, (, currentObjective, ), ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, currentCost, =, computeCost, (]
[current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, currentCost, =, computeCost, (, currentResiduals, ), ;, double, actRed, =]
[=, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, currentCost, =, computeCost, (, currentResiduals, ), ;, double, actRed, =, -]
[currentPoint, ,, currentObjective, ), ;, currentCost, =, computeCost, (, currentResiduals, ), ;, double, actRed, =, -, 1.0, ;, if, (]
[currentPoint, ,, currentObjective, ), ;, currentCost, =, computeCost, (, currentResiduals, ), ;, double, actRed, =, -, 1.0, ;, if, (]
[currentPoint, ,, currentObjective, ), ;, currentCost, =, computeCost, (, currentResiduals, ), ;, double, actRed, =, -, 1.0, ;, if, (]
[currentObjective, ), ;, currentCost, =, computeCost, (, currentResiduals, ), ;, double, actRed, =, -, 1.0, ;, if, (, 0.1, *]
[;, currentCost, =, computeCost, (, currentResiduals, ), ;, double, actRed, =, -, 1.0, ;, if, (, 0.1, *, currentCost, <]
[), ;, double, actRed, =, -, 1.0, ;, if, (, 0.1, *, currentCost, <, previousCost, ), {, double, r, =]
[), ;, double, actRed, =, -, 1.0, ;, if, (, 0.1, *, currentCost, <, previousCost, ), {, double, r, =]
[double, actRed, =, -, 1.0, ;, if, (, 0.1, *, currentCost, <, previousCost, ), {, double, r, =, currentCost, /]
[=, -, 1.0, ;, if, (, 0.1, *, currentCost, <, previousCost, ), {, double, r, =, currentCost, /, previousCost, ;]
[1.0, ;, if, (, 0.1, *, currentCost, <, previousCost, ), {, double, r, =, currentCost, /, previousCost, ;, actRed, =]
[1.0, ;, if, (, 0.1, *, currentCost, <, previousCost, ), {, double, r, =, currentCost, /, previousCost, ;, actRed, =]
[if, (, 0.1, *, currentCost, <, previousCost, ), {, double, r, =, currentCost, /, previousCost, ;, actRed, =, 1.0, -]
[if, (, 0.1, *, currentCost, <, previousCost, ), {, double, r, =, currentCost, /, previousCost, ;, actRed, =, 1.0, -]
[0.1, *, currentCost, <, previousCost, ), {, double, r, =, currentCost, /, previousCost, ;, actRed, =, 1.0, -, r, *]
[r, =, currentCost, /, previousCost, ;, actRed, =, 1.0, -, r, *, r, ;, }, for, (, int, j, =]
[currentCost, /, previousCost, ;, actRed, =, 1.0, -, r, *, r, ;, }, for, (, int, j, =, 0, ;]
[currentCost, /, previousCost, ;, actRed, =, 1.0, -, r, *, r, ;, }, for, (, int, j, =, 0, ;]
[previousCost, ;, actRed, =, 1.0, -, r, *, r, ;, }, for, (, int, j, =, 0, ;, j, <]
[actRed, =, 1.0, -, r, *, r, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[=, 1.0, -, r, *, r, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, []
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, dirJ, =]
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, dirJ, =]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, dirJ, =, lmDir, []
[++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, dirJ, =, lmDir, [, pj, ], ;]
[++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, dirJ, =, lmDir, [, pj, ], ;]
[), {, int, pj, =, permutation, [, j, ], ;, double, dirJ, =, lmDir, [, pj, ], ;, work1, []
[pj, =, permutation, [, j, ], ;, double, dirJ, =, lmDir, [, pj, ], ;, work1, [, j, ], =]
[double, dirJ, =, lmDir, [, pj, ], ;, work1, [, j, ], =, 0, ;, for, (, int, i, =]
[=, lmDir, [, pj, ], ;, work1, [, j, ], =, 0, ;, for, (, int, i, =, 0, ;]
[=, lmDir, [, pj, ], ;, work1, [, j, ], =, 0, ;, for, (, int, i, =, 0, ;]
[[, pj, ], ;, work1, [, j, ], =, 0, ;, for, (, int, i, =, 0, ;, i, <=]
[], ;, work1, [, j, ], =, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;]
[;, work1, [, j, ], =, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++]
[j, ], =, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {]
[j, ], =, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, work1, []
[for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, work1, [, i, ], +=]
[for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, work1, [, i, ], +=]
[for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, work1, [, i, ], +=]
[for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, work1, [, i, ], +=]
[int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, work1, [, i, ], +=, weightedJacobian, []
[0, ;, i, <=, j, ;, ++, i, ), {, work1, [, i, ], +=, weightedJacobian, [, i, ], []
[<=, j, ;, ++, i, ), {, work1, [, i, ], +=, weightedJacobian, [, i, ], [, pj, ], *]
[work1, [, i, ], +=, weightedJacobian, [, i, ], [, pj, ], *, dirJ, ;, }, }, double, coeff1, =]
[i, ], [, pj, ], *, dirJ, ;, }, }, double, coeff1, =, 0, ;, for, (, int, j, =]
[[, pj, ], *, dirJ, ;, }, }, double, coeff1, =, 0, ;, for, (, int, j, =, 0, ;]
[[, pj, ], *, dirJ, ;, }, }, double, coeff1, =, 0, ;, for, (, int, j, =, 0, ;]
[], *, dirJ, ;, }, }, double, coeff1, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[dirJ, ;, }, }, double, coeff1, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[;, }, }, double, coeff1, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[double, coeff1, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {]
[=, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, coeff1, +=]
[=, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, coeff1, +=]
[=, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, coeff1, +=]
[;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, coeff1, +=, work1, []
[int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, coeff1, +=, work1, [, j, ], *]
[int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, coeff1, +=, work1, [, j, ], *]
[=, 0, ;, j, <, solvedCols, ;, ++, j, ), {, coeff1, +=, work1, [, j, ], *, work1, []
[++, j, ), {, coeff1, +=, work1, [, j, ], *, work1, [, j, ], ;, }, double, pc2, =]
[++, j, ), {, coeff1, +=, work1, [, j, ], *, work1, [, j, ], ;, }, double, pc2, =]
[), {, coeff1, +=, work1, [, j, ], *, work1, [, j, ], ;, }, double, pc2, =, previousCost, *]
[coeff1, +=, work1, [, j, ], *, work1, [, j, ], ;, }, double, pc2, =, previousCost, *, previousCost, ;]
[work1, [, j, ], *, work1, [, j, ], ;, }, double, pc2, =, previousCost, *, previousCost, ;, coeff1, =]
[work1, [, j, ], *, work1, [, j, ], ;, }, double, pc2, =, previousCost, *, previousCost, ;, coeff1, =]
[j, ], *, work1, [, j, ], ;, }, double, pc2, =, previousCost, *, previousCost, ;, coeff1, =, coeff1, /]
[j, ], ;, }, double, pc2, =, previousCost, *, previousCost, ;, coeff1, =, coeff1, /, pc2, ;, double, coeff2, =]
[j, ], ;, }, double, pc2, =, previousCost, *, previousCost, ;, coeff1, =, coeff1, /, pc2, ;, double, coeff2, =]
[j, ], ;, }, double, pc2, =, previousCost, *, previousCost, ;, coeff1, =, coeff1, /, pc2, ;, double, coeff2, =]
[j, ], ;, }, double, pc2, =, previousCost, *, previousCost, ;, coeff1, =, coeff1, /, pc2, ;, double, coeff2, =]
[;, }, double, pc2, =, previousCost, *, previousCost, ;, coeff1, =, coeff1, /, pc2, ;, double, coeff2, =, lmPar, *]
[double, pc2, =, previousCost, *, previousCost, ;, coeff1, =, coeff1, /, pc2, ;, double, coeff2, =, lmPar, *, lmNorm, *]
[=, previousCost, *, previousCost, ;, coeff1, =, coeff1, /, pc2, ;, double, coeff2, =, lmPar, *, lmNorm, *, lmNorm, /]
[coeff1, =, coeff1, /, pc2, ;, double, coeff2, =, lmPar, *, lmNorm, *, lmNorm, /, pc2, ;, double, preRed, =]
[coeff1, =, coeff1, /, pc2, ;, double, coeff2, =, lmPar, *, lmNorm, *, lmNorm, /, pc2, ;, double, preRed, =]
[coeff1, /, pc2, ;, double, coeff2, =, lmPar, *, lmNorm, *, lmNorm, /, pc2, ;, double, preRed, =, coeff1, +]
[coeff1, /, pc2, ;, double, coeff2, =, lmPar, *, lmNorm, *, lmNorm, /, pc2, ;, double, preRed, =, coeff1, +]
[pc2, ;, double, coeff2, =, lmPar, *, lmNorm, *, lmNorm, /, pc2, ;, double, preRed, =, coeff1, +, 2, *]
[lmPar, *, lmNorm, *, lmNorm, /, pc2, ;, double, preRed, =, coeff1, +, 2, *, coeff2, ;, double, dirDer, =]
[*, lmNorm, *, lmNorm, /, pc2, ;, double, preRed, =, coeff1, +, 2, *, coeff2, ;, double, dirDer, =, -]
[lmNorm, *, lmNorm, /, pc2, ;, double, preRed, =, coeff1, +, 2, *, coeff2, ;, double, dirDer, =, -, (]
[lmNorm, *, lmNorm, /, pc2, ;, double, preRed, =, coeff1, +, 2, *, coeff2, ;, double, dirDer, =, -, (]
[lmNorm, /, pc2, ;, double, preRed, =, coeff1, +, 2, *, coeff2, ;, double, dirDer, =, -, (, coeff1, +]
[;, double, preRed, =, coeff1, +, 2, *, coeff2, ;, double, dirDer, =, -, (, coeff1, +, coeff2, ), ;]
[preRed, =, coeff1, +, 2, *, coeff2, ;, double, dirDer, =, -, (, coeff1, +, coeff2, ), ;, ratio, =]
[preRed, =, coeff1, +, 2, *, coeff2, ;, double, dirDer, =, -, (, coeff1, +, coeff2, ), ;, ratio, =]
[=, coeff1, +, 2, *, coeff2, ;, double, dirDer, =, -, (, coeff1, +, coeff2, ), ;, ratio, =, (]
[=, coeff1, +, 2, *, coeff2, ;, double, dirDer, =, -, (, coeff1, +, coeff2, ), ;, ratio, =, (]
[+, 2, *, coeff2, ;, double, dirDer, =, -, (, coeff1, +, coeff2, ), ;, ratio, =, (, preRed, ==]
[coeff2, ;, double, dirDer, =, -, (, coeff1, +, coeff2, ), ;, ratio, =, (, preRed, ==, 0, ), ?]
[double, dirDer, =, -, (, coeff1, +, coeff2, ), ;, ratio, =, (, preRed, ==, 0, ), ?, 0, :]
[dirDer, =, -, (, coeff1, +, coeff2, ), ;, ratio, =, (, preRed, ==, 0, ), ?, 0, :, (]
[dirDer, =, -, (, coeff1, +, coeff2, ), ;, ratio, =, (, preRed, ==, 0, ), ?, 0, :, (]
[-, (, coeff1, +, coeff2, ), ;, ratio, =, (, preRed, ==, 0, ), ?, 0, :, (, actRed, /]
[), ;, ratio, =, (, preRed, ==, 0, ), ?, 0, :, (, actRed, /, preRed, ), ;, if, (]
[), ;, ratio, =, (, preRed, ==, 0, ), ?, 0, :, (, actRed, /, preRed, ), ;, if, (]
[ratio, =, (, preRed, ==, 0, ), ?, 0, :, (, actRed, /, preRed, ), ;, if, (, ratio, <=]
[), ?, 0, :, (, actRed, /, preRed, ), ;, if, (, ratio, <=, 0.25, ), {, double, tmp, =]
[), ?, 0, :, (, actRed, /, preRed, ), ;, if, (, ratio, <=, 0.25, ), {, double, tmp, =]
[?, 0, :, (, actRed, /, preRed, ), ;, if, (, ratio, <=, 0.25, ), {, double, tmp, =, (]
[?, 0, :, (, actRed, /, preRed, ), ;, if, (, ratio, <=, 0.25, ), {, double, tmp, =, (]
[:, (, actRed, /, preRed, ), ;, if, (, ratio, <=, 0.25, ), {, double, tmp, =, (, actRed, <]
[/, preRed, ), ;, if, (, ratio, <=, 0.25, ), {, double, tmp, =, (, actRed, <, 0, ), ?]
[preRed, ), ;, if, (, ratio, <=, 0.25, ), {, double, tmp, =, (, actRed, <, 0, ), ?, (]
[preRed, ), ;, if, (, ratio, <=, 0.25, ), {, double, tmp, =, (, actRed, <, 0, ), ?, (]
[preRed, ), ;, if, (, ratio, <=, 0.25, ), {, double, tmp, =, (, actRed, <, 0, ), ?, (]
[;, if, (, ratio, <=, 0.25, ), {, double, tmp, =, (, actRed, <, 0, ), ?, (, 0.5, *]
[(, ratio, <=, 0.25, ), {, double, tmp, =, (, actRed, <, 0, ), ?, (, 0.5, *, dirDer, /]
[ratio, <=, 0.25, ), {, double, tmp, =, (, actRed, <, 0, ), ?, (, 0.5, *, dirDer, /, (]
[ratio, <=, 0.25, ), {, double, tmp, =, (, actRed, <, 0, ), ?, (, 0.5, *, dirDer, /, (]
[0.25, ), {, double, tmp, =, (, actRed, <, 0, ), ?, (, 0.5, *, dirDer, /, (, dirDer, +]
[0.25, ), {, double, tmp, =, (, actRed, <, 0, ), ?, (, 0.5, *, dirDer, /, (, dirDer, +]
[{, double, tmp, =, (, actRed, <, 0, ), ?, (, 0.5, *, dirDer, /, (, dirDer, +, 0.5, *]
[(, actRed, <, 0, ), ?, (, 0.5, *, dirDer, /, (, dirDer, +, 0.5, *, actRed, ), ), :]
[), ?, (, 0.5, *, dirDer, /, (, dirDer, +, 0.5, *, actRed, ), ), :, 0.5, ;, if, (]
[), ?, (, 0.5, *, dirDer, /, (, dirDer, +, 0.5, *, actRed, ), ), :, 0.5, ;, if, (]
[?, (, 0.5, *, dirDer, /, (, dirDer, +, 0.5, *, actRed, ), ), :, 0.5, ;, if, (, (]
[?, (, 0.5, *, dirDer, /, (, dirDer, +, 0.5, *, actRed, ), ), :, 0.5, ;, if, (, (]
[?, (, 0.5, *, dirDer, /, (, dirDer, +, 0.5, *, actRed, ), ), :, 0.5, ;, if, (, (]
[0.5, *, dirDer, /, (, dirDer, +, 0.5, *, actRed, ), ), :, 0.5, ;, if, (, (, 0.1, *]
[dirDer, /, (, dirDer, +, 0.5, *, actRed, ), ), :, 0.5, ;, if, (, (, 0.1, *, currentCost, >=]
[dirDer, +, 0.5, *, actRed, ), ), :, 0.5, ;, if, (, (, 0.1, *, currentCost, >=, previousCost, ), ||]
[+, 0.5, *, actRed, ), ), :, 0.5, ;, if, (, (, 0.1, *, currentCost, >=, previousCost, ), ||, (]
[+, 0.5, *, actRed, ), ), :, 0.5, ;, if, (, (, 0.1, *, currentCost, >=, previousCost, ), ||, (]
[*, actRed, ), ), :, 0.5, ;, if, (, (, 0.1, *, currentCost, >=, previousCost, ), ||, (, tmp, <]
[:, 0.5, ;, if, (, (, 0.1, *, currentCost, >=, previousCost, ), ||, (, tmp, <, 0.1, ), ), {]
[;, if, (, (, 0.1, *, currentCost, >=, previousCost, ), ||, (, tmp, <, 0.1, ), ), {, tmp, =]
[(, 0.1, *, currentCost, >=, previousCost, ), ||, (, tmp, <, 0.1, ), ), {, tmp, =, 0.1, ;, }]
[*, currentCost, >=, previousCost, ), ||, (, tmp, <, 0.1, ), ), {, tmp, =, 0.1, ;, }, delta, =]
[*, currentCost, >=, previousCost, ), ||, (, tmp, <, 0.1, ), ), {, tmp, =, 0.1, ;, }, delta, =]
[>=, previousCost, ), ||, (, tmp, <, 0.1, ), ), {, tmp, =, 0.1, ;, }, delta, =, tmp, *]
[>=, previousCost, ), ||, (, tmp, <, 0.1, ), ), {, tmp, =, 0.1, ;, }, delta, =, tmp, *]
[(, tmp, <, 0.1, ), ), {, tmp, =, 0.1, ;, }, delta, =, tmp, *, FastMath, ., min, (]
[<, 0.1, ), ), {, tmp, =, 0.1, ;, }, delta, =, tmp, *, FastMath, ., min, (, delta, ,]
[<, 0.1, ), ), {, tmp, =, 0.1, ;, }, delta, =, tmp, *, FastMath, ., min, (, delta, ,]
[), ), {, tmp, =, 0.1, ;, }, delta, =, tmp, *, FastMath, ., min, (, delta, ,, 10.0, *]
[tmp, =, 0.1, ;, }, delta, =, tmp, *, FastMath, ., min, (, delta, ,, 10.0, *, lmNorm, ), ;]
[0.1, ;, }, delta, =, tmp, *, FastMath, ., min, (, delta, ,, 10.0, *, lmNorm, ), ;, lmPar, /=]
[*, FastMath, ., min, (, delta, ,, 10.0, *, lmNorm, ), ;, lmPar, /=, tmp, ;, }, else, if, (]
[*, FastMath, ., min, (, delta, ,, 10.0, *, lmNorm, ), ;, lmPar, /=, tmp, ;, }, else, if, (]
[FastMath, ., min, (, delta, ,, 10.0, *, lmNorm, ), ;, lmPar, /=, tmp, ;, }, else, if, (, (]
[FastMath, ., min, (, delta, ,, 10.0, *, lmNorm, ), ;, lmPar, /=, tmp, ;, }, else, if, (, (]
[min, (, delta, ,, 10.0, *, lmNorm, ), ;, lmPar, /=, tmp, ;, }, else, if, (, (, lmPar, ==]
[,, 10.0, *, lmNorm, ), ;, lmPar, /=, tmp, ;, }, else, if, (, (, lmPar, ==, 0, ), ||]
[10.0, *, lmNorm, ), ;, lmPar, /=, tmp, ;, }, else, if, (, (, lmPar, ==, 0, ), ||, (]
[10.0, *, lmNorm, ), ;, lmPar, /=, tmp, ;, }, else, if, (, (, lmPar, ==, 0, ), ||, (]
[lmNorm, ), ;, lmPar, /=, tmp, ;, }, else, if, (, (, lmPar, ==, 0, ), ||, (, ratio, >=]
[/=, tmp, ;, }, else, if, (, (, lmPar, ==, 0, ), ||, (, ratio, >=, 0.75, ), ), {]
[;, }, else, if, (, (, lmPar, ==, 0, ), ||, (, ratio, >=, 0.75, ), ), {, delta, =]
[;, }, else, if, (, (, lmPar, ==, 0, ), ||, (, ratio, >=, 0.75, ), ), {, delta, =]
[else, if, (, (, lmPar, ==, 0, ), ||, (, ratio, >=, 0.75, ), ), {, delta, =, 2, *]
[(, (, lmPar, ==, 0, ), ||, (, ratio, >=, 0.75, ), ), {, delta, =, 2, *, lmNorm, ;]
[lmPar, ==, 0, ), ||, (, ratio, >=, 0.75, ), ), {, delta, =, 2, *, lmNorm, ;, lmPar, *=]
[(, ratio, >=, 0.75, ), ), {, delta, =, 2, *, lmNorm, ;, lmPar, *=, 0.5, ;, }, if, (]
[(, ratio, >=, 0.75, ), ), {, delta, =, 2, *, lmNorm, ;, lmPar, *=, 0.5, ;, }, if, (]
[>=, 0.75, ), ), {, delta, =, 2, *, lmNorm, ;, lmPar, *=, 0.5, ;, }, if, (, ratio, >=]
[), {, delta, =, 2, *, lmNorm, ;, lmPar, *=, 0.5, ;, }, if, (, ratio, >=, 1.0e-4, ), {]
[delta, =, 2, *, lmNorm, ;, lmPar, *=, 0.5, ;, }, if, (, ratio, >=, 1.0e-4, ), {, firstIteration, =]
[2, *, lmNorm, ;, lmPar, *=, 0.5, ;, }, if, (, ratio, >=, 1.0e-4, ), {, firstIteration, =, false, ;]
[lmNorm, ;, lmPar, *=, 0.5, ;, }, if, (, ratio, >=, 1.0e-4, ), {, firstIteration, =, false, ;, xNorm, =]
[if, (, ratio, >=, 1.0e-4, ), {, firstIteration, =, false, ;, xNorm, =, 0, ;, for, (, int, k, =]
[ratio, >=, 1.0e-4, ), {, firstIteration, =, false, ;, xNorm, =, 0, ;, for, (, int, k, =, 0, ;]
[ratio, >=, 1.0e-4, ), {, firstIteration, =, false, ;, xNorm, =, 0, ;, for, (, int, k, =, 0, ;]
[1.0e-4, ), {, firstIteration, =, false, ;, xNorm, =, 0, ;, for, (, int, k, =, 0, ;, k, <]
[{, firstIteration, =, false, ;, xNorm, =, 0, ;, for, (, int, k, =, 0, ;, k, <, nC, ;]
[firstIteration, =, false, ;, xNorm, =, 0, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++]
[0, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, double, xK, =]
[0, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, double, xK, =]
[0, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, double, xK, =]
[for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, double, xK, =, diag, []
[k, =, 0, ;, k, <, nC, ;, ++, k, ), {, double, xK, =, diag, [, k, ], *]
[k, =, 0, ;, k, <, nC, ;, ++, k, ), {, double, xK, =, diag, [, k, ], *]
[0, ;, k, <, nC, ;, ++, k, ), {, double, xK, =, diag, [, k, ], *, currentPoint, []
[<, nC, ;, ++, k, ), {, double, xK, =, diag, [, k, ], *, currentPoint, [, k, ], ;]
[;, ++, k, ), {, double, xK, =, diag, [, k, ], *, currentPoint, [, k, ], ;, xNorm, +=]
[;, ++, k, ), {, double, xK, =, diag, [, k, ], *, currentPoint, [, k, ], ;, xNorm, +=]
[k, ), {, double, xK, =, diag, [, k, ], *, currentPoint, [, k, ], ;, xNorm, +=, xK, *]
[double, xK, =, diag, [, k, ], *, currentPoint, [, k, ], ;, xNorm, +=, xK, *, xK, ;, }]
[=, diag, [, k, ], *, currentPoint, [, k, ], ;, xNorm, +=, xK, *, xK, ;, }, xNorm, =]
[=, diag, [, k, ], *, currentPoint, [, k, ], ;, xNorm, +=, xK, *, xK, ;, }, xNorm, =]
[], *, currentPoint, [, k, ], ;, xNorm, +=, xK, *, xK, ;, }, xNorm, =, FastMath, ., sqrt, (]
[], ;, xNorm, +=, xK, *, xK, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, if, (]
[], ;, xNorm, +=, xK, *, xK, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, if, (]
[], ;, xNorm, +=, xK, *, xK, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, if, (]
[xNorm, +=, xK, *, xK, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, if, (, checker, !=]
[xK, *, xK, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, if, (, checker, !=, null, &&]
[xK, *, xK, ;, }, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, if, (, checker, !=, null, &&]
[}, xNorm, =, FastMath, ., sqrt, (, xNorm, ), ;, if, (, checker, !=, null, &&, checker, ., converged, (]
[=, FastMath, ., sqrt, (, xNorm, ), ;, if, (, checker, !=, null, &&, checker, ., converged, (, iter, ,]
[., sqrt, (, xNorm, ), ;, if, (, checker, !=, null, &&, checker, ., converged, (, iter, ,, previous, ,]
[), ;, if, (, checker, !=, null, &&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {]
[if, (, checker, !=, null, &&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, setCost, (]
[!=, null, &&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, setCost, (, currentCost, ), ;]
[&&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, setCost, (, currentCost, ), ;, point, =]
[&&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, setCost, (, currentCost, ), ;, point, =]
[previous, ,, current, ), ), {, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return]
[setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, }, else, {]
[currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, }, else, {, currentCost, =]
[getPoint, (, ), ;, return, current, ;, }, }, else, {, currentCost, =, previousCost, ;, for, (, int, j, =]
[), ;, return, current, ;, }, }, else, {, currentCost, =, previousCost, ;, for, (, int, j, =, 0, ;]
[), ;, return, current, ;, }, }, else, {, currentCost, =, previousCost, ;, for, (, int, j, =, 0, ;]
[return, current, ;, }, }, else, {, currentCost, =, previousCost, ;, for, (, int, j, =, 0, ;, j, <]
[;, }, }, else, {, currentCost, =, previousCost, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[}, }, else, {, currentCost, =, previousCost, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[previousCost, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[previousCost, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, []
[j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;]
[j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;]
[0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, currentPoint, []
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, currentPoint, [, pj, ], =]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, currentPoint, [, pj, ], =]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, currentPoint, [, pj, ], =, oldX, []
[{, int, pj, =, permutation, [, j, ], ;, currentPoint, [, pj, ], =, oldX, [, pj, ], ;, }]
[pj, =, permutation, [, j, ], ;, currentPoint, [, pj, ], =, oldX, [, pj, ], ;, }, tmpVec, =]
[permutation, [, j, ], ;, currentPoint, [, pj, ], =, oldX, [, pj, ], ;, }, tmpVec, =, weightedResidual, ;]
[j, ], ;, currentPoint, [, pj, ], =, oldX, [, pj, ], ;, }, tmpVec, =, weightedResidual, ;, weightedResidual, =]
[;, currentPoint, [, pj, ], =, oldX, [, pj, ], ;, }, tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;]
[[, pj, ], =, oldX, [, pj, ], ;, }, tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =]
[], =, oldX, [, pj, ], ;, }, tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;]
[oldX, [, pj, ], ;, }, tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =]
[pj, ], ;, }, tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;]
[;, }, tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =]
[tmpVec, =, weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;]
[weightedResidual, ;, weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =]
[weightedResidual, =, oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;]
[oldRes, ;, oldRes, =, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;, current, =]
[=, tmpVec, ;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;, current, =, new, PointVectorValuePair, (]
[;, tmpVec, =, currentObjective, ;, currentObjective, =, oldObj, ;, oldObj, =, tmpVec, ;, current, =, new, PointVectorValuePair, (, currentPoint, ,]
[=, oldObj, ;, oldObj, =, tmpVec, ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, }, if, (]
[=, oldObj, ;, oldObj, =, tmpVec, ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, }, if, (]
[oldObj, ;, oldObj, =, tmpVec, ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, }, if, (, (]
[oldObj, ;, oldObj, =, tmpVec, ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, }, if, (, (]
[oldObj, ;, oldObj, =, tmpVec, ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, }, if, (, (]
[oldObj, ;, oldObj, =, tmpVec, ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, }, if, (, (]
[oldObj, ;, oldObj, =, tmpVec, ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, }, if, (, (]
[tmpVec, ;, current, =, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, }, if, (, (, FastMath, ., abs, (]
[=, new, PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, }, if, (, (, FastMath, ., abs, (, actRed, ), <=]
[PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, }, if, (, (, FastMath, ., abs, (, actRed, ), <=, costRelativeTolerance, &&]
[PointVectorValuePair, (, currentPoint, ,, currentObjective, ), ;, }, if, (, (, FastMath, ., abs, (, actRed, ), <=, costRelativeTolerance, &&]
[currentPoint, ,, currentObjective, ), ;, }, if, (, (, FastMath, ., abs, (, actRed, ), <=, costRelativeTolerance, &&, preRed, <=]
[currentObjective, ), ;, }, if, (, (, FastMath, ., abs, (, actRed, ), <=, costRelativeTolerance, &&, preRed, <=, costRelativeTolerance, &&]
[currentObjective, ), ;, }, if, (, (, FastMath, ., abs, (, actRed, ), <=, costRelativeTolerance, &&, preRed, <=, costRelativeTolerance, &&]
[;, }, if, (, (, FastMath, ., abs, (, actRed, ), <=, costRelativeTolerance, &&, preRed, <=, costRelativeTolerance, &&, ratio, <=]
[(, (, FastMath, ., abs, (, actRed, ), <=, costRelativeTolerance, &&, preRed, <=, costRelativeTolerance, &&, ratio, <=, 2.0, ), ||]
[(, (, FastMath, ., abs, (, actRed, ), <=, costRelativeTolerance, &&, preRed, <=, costRelativeTolerance, &&, ratio, <=, 2.0, ), ||]
[FastMath, ., abs, (, actRed, ), <=, costRelativeTolerance, &&, preRed, <=, costRelativeTolerance, &&, ratio, <=, 2.0, ), ||, delta, <=]
[FastMath, ., abs, (, actRed, ), <=, costRelativeTolerance, &&, preRed, <=, costRelativeTolerance, &&, ratio, <=, 2.0, ), ||, delta, <=]
[abs, (, actRed, ), <=, costRelativeTolerance, &&, preRed, <=, costRelativeTolerance, &&, ratio, <=, 2.0, ), ||, delta, <=, parRelativeTolerance, *]
[), <=, costRelativeTolerance, &&, preRed, <=, costRelativeTolerance, &&, ratio, <=, 2.0, ), ||, delta, <=, parRelativeTolerance, *, xNorm, ), {]
[costRelativeTolerance, &&, preRed, <=, costRelativeTolerance, &&, ratio, <=, 2.0, ), ||, delta, <=, parRelativeTolerance, *, xNorm, ), {, setCost, (]
[<=, costRelativeTolerance, &&, ratio, <=, 2.0, ), ||, delta, <=, parRelativeTolerance, *, xNorm, ), {, setCost, (, currentCost, ), ;]
[&&, ratio, <=, 2.0, ), ||, delta, <=, parRelativeTolerance, *, xNorm, ), {, setCost, (, currentCost, ), ;, point, =]
[&&, ratio, <=, 2.0, ), ||, delta, <=, parRelativeTolerance, *, xNorm, ), {, setCost, (, currentCost, ), ;, point, =]
[<=, parRelativeTolerance, *, xNorm, ), {, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return]
[{, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, if, (]
[{, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, if, (]
[{, setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, if, (]
[setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, if, (, (]
[setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, if, (, (]
[setCost, (, currentCost, ), ;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, if, (, (]
[;, point, =, current, ., getPoint, (, ), ;, return, current, ;, }, if, (, (, FastMath, ., abs, (]
[current, ., getPoint, (, ), ;, return, current, ;, }, if, (, (, FastMath, ., abs, (, actRed, ), <=]
[(, ), ;, return, current, ;, }, if, (, (, FastMath, ., abs, (, actRed, ), <=, 2.2204e-16, ), &&]
[), ;, return, current, ;, }, if, (, (, FastMath, ., abs, (, actRed, ), <=, 2.2204e-16, ), &&, (]
[), ;, return, current, ;, }, if, (, (, FastMath, ., abs, (, actRed, ), <=, 2.2204e-16, ), &&, (]
[return, current, ;, }, if, (, (, FastMath, ., abs, (, actRed, ), <=, 2.2204e-16, ), &&, (, preRed, <=]
[}, if, (, (, FastMath, ., abs, (, actRed, ), <=, 2.2204e-16, ), &&, (, preRed, <=, 2.2204e-16, ), &&]
[if, (, (, FastMath, ., abs, (, actRed, ), <=, 2.2204e-16, ), &&, (, preRed, <=, 2.2204e-16, ), &&, (]
[if, (, (, FastMath, ., abs, (, actRed, ), <=, 2.2204e-16, ), &&, (, preRed, <=, 2.2204e-16, ), &&, (]
[(, FastMath, ., abs, (, actRed, ), <=, 2.2204e-16, ), &&, (, preRed, <=, 2.2204e-16, ), &&, (, ratio, <=]
[actRed, ), <=, 2.2204e-16, ), &&, (, preRed, <=, 2.2204e-16, ), &&, (, ratio, <=, 2.0, ), ), {, throw]
[2.2204e-16, ), &&, (, preRed, <=, 2.2204e-16, ), &&, (, ratio, <=, 2.0, ), ), {, throw, new, ConvergenceException, (]
[2.2204e-16, ), &&, (, preRed, <=, 2.2204e-16, ), &&, (, ratio, <=, 2.0, ), ), {, throw, new, ConvergenceException, (]
[preRed, <=, 2.2204e-16, ), &&, (, ratio, <=, 2.0, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_COST_RELATIVE_TOLERANCE, ,]
[<=, 2.0, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_COST_RELATIVE_TOLERANCE, ,, costRelativeTolerance, ), ;, }, else, if, (]
[<=, 2.0, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_COST_RELATIVE_TOLERANCE, ,, costRelativeTolerance, ), ;, }, else, if, (]
[), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_COST_RELATIVE_TOLERANCE, ,, costRelativeTolerance, ), ;, }, else, if, (, delta, <=]
[), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_COST_RELATIVE_TOLERANCE, ,, costRelativeTolerance, ), ;, }, else, if, (, delta, <=]
[{, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_COST_RELATIVE_TOLERANCE, ,, costRelativeTolerance, ), ;, }, else, if, (, delta, <=, 2.2204e-16, *]
[(, LocalizedFormats, ., TOO_SMALL_COST_RELATIVE_TOLERANCE, ,, costRelativeTolerance, ), ;, }, else, if, (, delta, <=, 2.2204e-16, *, xNorm, ), {, throw]
[TOO_SMALL_COST_RELATIVE_TOLERANCE, ,, costRelativeTolerance, ), ;, }, else, if, (, delta, <=, 2.2204e-16, *, xNorm, ), {, throw, new, ConvergenceException, (]
[TOO_SMALL_COST_RELATIVE_TOLERANCE, ,, costRelativeTolerance, ), ;, }, else, if, (, delta, <=, 2.2204e-16, *, xNorm, ), {, throw, new, ConvergenceException, (]
[;, }, else, if, (, delta, <=, 2.2204e-16, *, xNorm, ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, ,]
[2.2204e-16, *, xNorm, ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, ,, parRelativeTolerance, ), ;, }, else, if, (]
[2.2204e-16, *, xNorm, ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, ,, parRelativeTolerance, ), ;, }, else, if, (]
[xNorm, ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, ,, parRelativeTolerance, ), ;, }, else, if, (, maxCosine, <=]
[new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, ,, parRelativeTolerance, ), ;, }, else, if, (, maxCosine, <=, 2.2204e-16, ), {, throw]
[LocalizedFormats, ., TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, ,, parRelativeTolerance, ), ;, }, else, if, (, maxCosine, <=, 2.2204e-16, ), {, throw, new, ConvergenceException, (]
[LocalizedFormats, ., TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, ,, parRelativeTolerance, ), ;, }, else, if, (, maxCosine, <=, 2.2204e-16, ), {, throw, new, ConvergenceException, (]
[parRelativeTolerance, ), ;, }, else, if, (, maxCosine, <=, 2.2204e-16, ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_ORTHOGONALITY_TOLERANCE, ,]
[double, [, ], work1, ,, double, [, ], work2, ,, double, [, ], work3, ), {, final, int, nC, =]
[double, [, ], work1, ,, double, [, ], work2, ,, double, [, ], work3, ), {, final, int, nC, =]
[double, [, ], work1, ,, double, [, ], work2, ,, double, [, ], work3, ), {, final, int, nC, =]
[], work1, ,, double, [, ], work2, ,, double, [, ], work3, ), {, final, int, nC, =, weightedJacobian, []
[], work3, ), {, final, int, nC, =, weightedJacobian, [, 0, ], ., length, ;, for, (, int, j, =]
[), {, final, int, nC, =, weightedJacobian, [, 0, ], ., length, ;, for, (, int, j, =, 0, ;]
[), {, final, int, nC, =, weightedJacobian, [, 0, ], ., length, ;, for, (, int, j, =, 0, ;]
[final, int, nC, =, weightedJacobian, [, 0, ], ., length, ;, for, (, int, j, =, 0, ;, j, <]
[nC, =, weightedJacobian, [, 0, ], ., length, ;, for, (, int, j, =, 0, ;, j, <, rank, ;]
[=, weightedJacobian, [, 0, ], ., length, ;, for, (, int, j, =, 0, ;, j, <, rank, ;, ++]
[0, ], ., length, ;, for, (, int, j, =, 0, ;, j, <, rank, ;, ++, j, ), {]
[0, ], ., length, ;, for, (, int, j, =, 0, ;, j, <, rank, ;, ++, j, ), {]
[., length, ;, for, (, int, j, =, 0, ;, j, <, rank, ;, ++, j, ), {, lmDir, []
[., length, ;, for, (, int, j, =, 0, ;, j, <, rank, ;, ++, j, ), {, lmDir, []
[;, for, (, int, j, =, 0, ;, j, <, rank, ;, ++, j, ), {, lmDir, [, permutation, []
[j, =, 0, ;, j, <, rank, ;, ++, j, ), {, lmDir, [, permutation, [, j, ], ], =]
[j, =, 0, ;, j, <, rank, ;, ++, j, ), {, lmDir, [, permutation, [, j, ], ], =]
[0, ;, j, <, rank, ;, ++, j, ), {, lmDir, [, permutation, [, j, ], ], =, qy, []
[{, lmDir, [, permutation, [, j, ], ], =, qy, [, j, ], ;, }, for, (, int, j, =]
[[, permutation, [, j, ], ], =, qy, [, j, ], ;, }, for, (, int, j, =, rank, ;]
[[, permutation, [, j, ], ], =, qy, [, j, ], ;, }, for, (, int, j, =, rank, ;]
[[, j, ], ], =, qy, [, j, ], ;, }, for, (, int, j, =, rank, ;, j, <]
[], ], =, qy, [, j, ], ;, }, for, (, int, j, =, rank, ;, j, <, nC, ;]
[], =, qy, [, j, ], ;, }, for, (, int, j, =, rank, ;, j, <, nC, ;, ++]
[[, j, ], ;, }, for, (, int, j, =, rank, ;, j, <, nC, ;, ++, j, ), {]
[[, j, ], ;, }, for, (, int, j, =, rank, ;, j, <, nC, ;, ++, j, ), {]
[], ;, }, for, (, int, j, =, rank, ;, j, <, nC, ;, ++, j, ), {, lmDir, []
[], ;, }, for, (, int, j, =, rank, ;, j, <, nC, ;, ++, j, ), {, lmDir, []
[}, for, (, int, j, =, rank, ;, j, <, nC, ;, ++, j, ), {, lmDir, [, permutation, []
[j, =, rank, ;, j, <, nC, ;, ++, j, ), {, lmDir, [, permutation, [, j, ], ], =]
[++, j, ), {, lmDir, [, permutation, [, j, ], ], =, 0, ;, }, for, (, int, k, =]
[++, j, ), {, lmDir, [, permutation, [, j, ], ], =, 0, ;, }, for, (, int, k, =]
[), {, lmDir, [, permutation, [, j, ], ], =, 0, ;, }, for, (, int, k, =, rank, -]
[lmDir, [, permutation, [, j, ], ], =, 0, ;, }, for, (, int, k, =, rank, -, 1, ;]
[lmDir, [, permutation, [, j, ], ], =, 0, ;, }, for, (, int, k, =, rank, -, 1, ;]
[permutation, [, j, ], ], =, 0, ;, }, for, (, int, k, =, rank, -, 1, ;, k, >=]
[j, ], ], =, 0, ;, }, for, (, int, k, =, rank, -, 1, ;, k, >=, 0, ;]
[], ], =, 0, ;, }, for, (, int, k, =, rank, -, 1, ;, k, >=, 0, ;, --]
[for, (, int, k, =, rank, -, 1, ;, k, >=, 0, ;, --, k, ), {, int, pk, =]
[for, (, int, k, =, rank, -, 1, ;, k, >=, 0, ;, --, k, ), {, int, pk, =]
[int, k, =, rank, -, 1, ;, k, >=, 0, ;, --, k, ), {, int, pk, =, permutation, []
[;, k, >=, 0, ;, --, k, ), {, int, pk, =, permutation, [, k, ], ;, double, ypk, =]
[;, k, >=, 0, ;, --, k, ), {, int, pk, =, permutation, [, k, ], ;, double, ypk, =]
[;, k, >=, 0, ;, --, k, ), {, int, pk, =, permutation, [, k, ], ;, double, ypk, =]
[>=, 0, ;, --, k, ), {, int, pk, =, permutation, [, k, ], ;, double, ypk, =, lmDir, []
[--, k, ), {, int, pk, =, permutation, [, k, ], ;, double, ypk, =, lmDir, [, pk, ], /]
[--, k, ), {, int, pk, =, permutation, [, k, ], ;, double, ypk, =, lmDir, [, pk, ], /]
[), {, int, pk, =, permutation, [, k, ], ;, double, ypk, =, lmDir, [, pk, ], /, diagR, []
[], ;, double, ypk, =, lmDir, [, pk, ], /, diagR, [, pk, ], ;, for, (, int, i, =]
[double, ypk, =, lmDir, [, pk, ], /, diagR, [, pk, ], ;, for, (, int, i, =, 0, ;]
[double, ypk, =, lmDir, [, pk, ], /, diagR, [, pk, ], ;, for, (, int, i, =, 0, ;]
[=, lmDir, [, pk, ], /, diagR, [, pk, ], ;, for, (, int, i, =, 0, ;, i, <]
[[, pk, ], /, diagR, [, pk, ], ;, for, (, int, i, =, 0, ;, i, <, k, ;]
[pk, ], /, diagR, [, pk, ], ;, for, (, int, i, =, 0, ;, i, <, k, ;, ++]
[diagR, [, pk, ], ;, for, (, int, i, =, 0, ;, i, <, k, ;, ++, i, ), {]
[diagR, [, pk, ], ;, for, (, int, i, =, 0, ;, i, <, k, ;, ++, i, ), {]
[pk, ], ;, for, (, int, i, =, 0, ;, i, <, k, ;, ++, i, ), {, lmDir, []
[pk, ], ;, for, (, int, i, =, 0, ;, i, <, k, ;, ++, i, ), {, lmDir, []
[;, for, (, int, i, =, 0, ;, i, <, k, ;, ++, i, ), {, lmDir, [, permutation, []
[i, =, 0, ;, i, <, k, ;, ++, i, ), {, lmDir, [, permutation, [, i, ], ], -=]
[i, =, 0, ;, i, <, k, ;, ++, i, ), {, lmDir, [, permutation, [, i, ], ], -=]
[0, ;, i, <, k, ;, ++, i, ), {, lmDir, [, permutation, [, i, ], ], -=, ypk, *]
[0, ;, i, <, k, ;, ++, i, ), {, lmDir, [, permutation, [, i, ], ], -=, ypk, *]
[0, ;, i, <, k, ;, ++, i, ), {, lmDir, [, permutation, [, i, ], ], -=, ypk, *]
[i, <, k, ;, ++, i, ), {, lmDir, [, permutation, [, i, ], ], -=, ypk, *, weightedJacobian, []
[;, ++, i, ), {, lmDir, [, permutation, [, i, ], ], -=, ypk, *, weightedJacobian, [, i, ], []
[{, lmDir, [, permutation, [, i, ], ], -=, ypk, *, weightedJacobian, [, i, ], [, pk, ], ;, }]
[{, lmDir, [, permutation, [, i, ], ], -=, ypk, *, weightedJacobian, [, i, ], [, pk, ], ;, }]
[[, permutation, [, i, ], ], -=, ypk, *, weightedJacobian, [, i, ], [, pk, ], ;, }, lmDir, []
[i, ], ], -=, ypk, *, weightedJacobian, [, i, ], [, pk, ], ;, }, lmDir, [, pk, ], =]
[weightedJacobian, [, i, ], [, pk, ], ;, }, lmDir, [, pk, ], =, ypk, ;, }, double, dxNorm, =]
[;, }, lmDir, [, pk, ], =, ypk, ;, }, double, dxNorm, =, 0, ;, for, (, int, j, =]
[lmDir, [, pk, ], =, ypk, ;, }, double, dxNorm, =, 0, ;, for, (, int, j, =, 0, ;]
[lmDir, [, pk, ], =, ypk, ;, }, double, dxNorm, =, 0, ;, for, (, int, j, =, 0, ;]
[pk, ], =, ypk, ;, }, double, dxNorm, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[=, ypk, ;, }, double, dxNorm, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[ypk, ;, }, double, dxNorm, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, []
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =]
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =]
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =, diag, []
[++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =, diag, [, pj, ], *]
[++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =, diag, [, pj, ], *]
[), {, int, pj, =, permutation, [, j, ], ;, double, s, =, diag, [, pj, ], *, lmDir, []
[pj, =, permutation, [, j, ], ;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;]
[pj, =, permutation, [, j, ], ;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;]
[permutation, [, j, ], ;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;, work1, []
[], ;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;, work1, [, pj, ], =]
[double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;, work1, [, pj, ], =, s, ;]
[=, diag, [, pj, ], *, lmDir, [, pj, ], ;, work1, [, pj, ], =, s, ;, dxNorm, +=]
[=, diag, [, pj, ], *, lmDir, [, pj, ], ;, work1, [, pj, ], =, s, ;, dxNorm, +=]
[[, pj, ], *, lmDir, [, pj, ], ;, work1, [, pj, ], =, s, ;, dxNorm, +=, s, *]
[*, lmDir, [, pj, ], ;, work1, [, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;, }]
[[, pj, ], ;, work1, [, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;, }, dxNorm, =]
[[, pj, ], ;, work1, [, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;, }, dxNorm, =]
[work1, [, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;, }, dxNorm, =, FastMath, ., sqrt, (]
[;, dxNorm, +=, s, *, s, ;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, fp, =]
[;, dxNorm, +=, s, *, s, ;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, fp, =]
[+=, s, *, s, ;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, fp, =, dxNorm, -]
[;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, fp, =, dxNorm, -, delta, ;, if, (]
[;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, fp, =, dxNorm, -, delta, ;, if, (]
[dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, fp, =, dxNorm, -, delta, ;, if, (, fp, <=]
[dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, fp, =, dxNorm, -, delta, ;, if, (, fp, <=]
[FastMath, ., sqrt, (, dxNorm, ), ;, double, fp, =, dxNorm, -, delta, ;, if, (, fp, <=, 0.1, *]
[(, dxNorm, ), ;, double, fp, =, dxNorm, -, delta, ;, if, (, fp, <=, 0.1, *, delta, ), {]
[), ;, double, fp, =, dxNorm, -, delta, ;, if, (, fp, <=, 0.1, *, delta, ), {, lmPar, =]
[fp, <=, 0.1, *, delta, ), {, lmPar, =, 0, ;, return, ;, }, double, sum2, ;, double, parl, =]
[delta, ), {, lmPar, =, 0, ;, return, ;, }, double, sum2, ;, double, parl, =, 0, ;, if, (]
[delta, ), {, lmPar, =, 0, ;, return, ;, }, double, sum2, ;, double, parl, =, 0, ;, if, (]
[{, lmPar, =, 0, ;, return, ;, }, double, sum2, ;, double, parl, =, 0, ;, if, (, rank, ==]
[double, sum2, ;, double, parl, =, 0, ;, if, (, rank, ==, solvedCols, ), {, for, (, int, j, =]
[;, double, parl, =, 0, ;, if, (, rank, ==, solvedCols, ), {, for, (, int, j, =, 0, ;]
[;, double, parl, =, 0, ;, if, (, rank, ==, solvedCols, ), {, for, (, int, j, =, 0, ;]
[parl, =, 0, ;, if, (, rank, ==, solvedCols, ), {, for, (, int, j, =, 0, ;, j, <]
[0, ;, if, (, rank, ==, solvedCols, ), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[;, if, (, rank, ==, solvedCols, ), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, []
[j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;]
[j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;]
[0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, []
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], *=]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], *=]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], *=]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], *=, diag, []
[), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], *=, diag, [, pj, ], /]
[pj, =, permutation, [, j, ], ;, work1, [, pj, ], *=, diag, [, pj, ], /, dxNorm, ;, }]
[permutation, [, j, ], ;, work1, [, pj, ], *=, diag, [, pj, ], /, dxNorm, ;, }, sum2, =]
[pj, ], *=, diag, [, pj, ], /, dxNorm, ;, }, sum2, =, 0, ;, for, (, int, j, =]
[*=, diag, [, pj, ], /, dxNorm, ;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;]
[*=, diag, [, pj, ], /, dxNorm, ;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;]
[[, pj, ], /, dxNorm, ;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[], /, dxNorm, ;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[/, dxNorm, ;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, []
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, sum, =]
[), {, int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =]
[int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[=, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[[, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, j, ;]
[j, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, j, ;, ++]
[double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, j, ;, ++, i, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, j, ;, ++, i, ), {, sum, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, j, ;, ++, i, ), {, sum, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, j, ;, ++, i, ), {, sum, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, j, ;, ++, i, ), {, sum, +=]
[;, for, (, int, i, =, 0, ;, i, <, j, ;, ++, i, ), {, sum, +=, weightedJacobian, []
[int, i, =, 0, ;, i, <, j, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], []
[0, ;, i, <, j, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *]
[0, ;, i, <, j, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *]
[i, <, j, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, work1, []
[i, <, j, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, work1, []
[j, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, work1, [, permutation, []
[weightedJacobian, [, i, ], [, pj, ], *, work1, [, permutation, [, i, ], ], ;, }, double, s, =]
[weightedJacobian, [, i, ], [, pj, ], *, work1, [, permutation, [, i, ], ], ;, }, double, s, =]
[[, i, ], [, pj, ], *, work1, [, permutation, [, i, ], ], ;, }, double, s, =, (]
[[, i, ], [, pj, ], *, work1, [, permutation, [, i, ], ], ;, }, double, s, =, (]
[[, i, ], [, pj, ], *, work1, [, permutation, [, i, ], ], ;, }, double, s, =, (]
[], [, pj, ], *, work1, [, permutation, [, i, ], ], ;, }, double, s, =, (, work1, []
[], *, work1, [, permutation, [, i, ], ], ;, }, double, s, =, (, work1, [, pj, ], -]
[[, permutation, [, i, ], ], ;, }, double, s, =, (, work1, [, pj, ], -, sum, ), /]
[[, permutation, [, i, ], ], ;, }, double, s, =, (, work1, [, pj, ], -, sum, ), /]
[[, i, ], ], ;, }, double, s, =, (, work1, [, pj, ], -, sum, ), /, diagR, []
[], ;, }, double, s, =, (, work1, [, pj, ], -, sum, ), /, diagR, [, pj, ], ;]
[], ;, }, double, s, =, (, work1, [, pj, ], -, sum, ), /, diagR, [, pj, ], ;]
[}, double, s, =, (, work1, [, pj, ], -, sum, ), /, diagR, [, pj, ], ;, work1, []
[=, (, work1, [, pj, ], -, sum, ), /, diagR, [, pj, ], ;, work1, [, pj, ], =]
[work1, [, pj, ], -, sum, ), /, diagR, [, pj, ], ;, work1, [, pj, ], =, s, ;]
[pj, ], -, sum, ), /, diagR, [, pj, ], ;, work1, [, pj, ], =, s, ;, sum2, +=]
[pj, ], -, sum, ), /, diagR, [, pj, ], ;, work1, [, pj, ], =, s, ;, sum2, +=]
[-, sum, ), /, diagR, [, pj, ], ;, work1, [, pj, ], =, s, ;, sum2, +=, s, *]
[/, diagR, [, pj, ], ;, work1, [, pj, ], =, s, ;, sum2, +=, s, *, s, ;, }]
[[, pj, ], ;, work1, [, pj, ], =, s, ;, sum2, +=, s, *, s, ;, }, parl, =]
[[, pj, ], ;, work1, [, pj, ], =, s, ;, sum2, +=, s, *, s, ;, }, parl, =]
[], ;, work1, [, pj, ], =, s, ;, sum2, +=, s, *, s, ;, }, parl, =, fp, /]
[;, work1, [, pj, ], =, s, ;, sum2, +=, s, *, s, ;, }, parl, =, fp, /, (]
[;, work1, [, pj, ], =, s, ;, sum2, +=, s, *, s, ;, }, parl, =, fp, /, (]
[[, pj, ], =, s, ;, sum2, +=, s, *, s, ;, }, parl, =, fp, /, (, delta, *]
[s, ;, sum2, +=, s, *, s, ;, }, parl, =, fp, /, (, delta, *, sum2, ), ;, }]
[sum2, +=, s, *, s, ;, }, parl, =, fp, /, (, delta, *, sum2, ), ;, }, sum2, =]
[parl, =, fp, /, (, delta, *, sum2, ), ;, }, sum2, =, 0, ;, for, (, int, j, =]
[fp, /, (, delta, *, sum2, ), ;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;]
[fp, /, (, delta, *, sum2, ), ;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;]
[(, delta, *, sum2, ), ;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[*, sum2, ), ;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[sum2, ), ;, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, []
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, sum, =]
[), {, int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =]
[int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[=, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <=]
[[, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;]
[j, ], ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++]
[double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, sum, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, sum, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, sum, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, sum, +=]
[;, for, (, int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, sum, +=, weightedJacobian, []
[int, i, =, 0, ;, i, <=, j, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], []
[0, ;, i, <=, j, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *]
[0, ;, i, <=, j, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *]
[i, <=, j, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, qy, []
[++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, qy, [, i, ], ;, }]
[), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, qy, [, i, ], ;, }, sum, /=]
[), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, qy, [, i, ], ;, }, sum, /=]
[sum, +=, weightedJacobian, [, i, ], [, pj, ], *, qy, [, i, ], ;, }, sum, /=, diag, []
[[, i, ], [, pj, ], *, qy, [, i, ], ;, }, sum, /=, diag, [, pj, ], ;]
[], [, pj, ], *, qy, [, i, ], ;, }, sum, /=, diag, [, pj, ], ;, sum2, +=]
[], [, pj, ], *, qy, [, i, ], ;, }, sum, /=, diag, [, pj, ], ;, sum2, +=]
[pj, ], *, qy, [, i, ], ;, }, sum, /=, diag, [, pj, ], ;, sum2, +=, sum, *]
[], ;, }, sum, /=, diag, [, pj, ], ;, sum2, +=, sum, *, sum, ;, }, double, gNorm, =]
[], ;, }, sum, /=, diag, [, pj, ], ;, sum2, +=, sum, *, sum, ;, }, double, gNorm, =]
[/=, diag, [, pj, ], ;, sum2, +=, sum, *, sum, ;, }, double, gNorm, =, FastMath, ., sqrt, (]
[sum2, +=, sum, *, sum, ;, }, double, gNorm, =, FastMath, ., sqrt, (, sum2, ), ;, double, paru, =]
[sum2, +=, sum, *, sum, ;, }, double, gNorm, =, FastMath, ., sqrt, (, sum2, ), ;, double, paru, =]
[sum, *, sum, ;, }, double, gNorm, =, FastMath, ., sqrt, (, sum2, ), ;, double, paru, =, gNorm, /]
[}, double, gNorm, =, FastMath, ., sqrt, (, sum2, ), ;, double, paru, =, gNorm, /, delta, ;, if, (]
[}, double, gNorm, =, FastMath, ., sqrt, (, sum2, ), ;, double, paru, =, gNorm, /, delta, ;, if, (]
[gNorm, =, FastMath, ., sqrt, (, sum2, ), ;, double, paru, =, gNorm, /, delta, ;, if, (, paru, ==]
[., sqrt, (, sum2, ), ;, double, paru, =, gNorm, /, delta, ;, if, (, paru, ==, 0, ), {]
[(, sum2, ), ;, double, paru, =, gNorm, /, delta, ;, if, (, paru, ==, 0, ), {, paru, =]
[(, sum2, ), ;, double, paru, =, gNorm, /, delta, ;, if, (, paru, ==, 0, ), {, paru, =]
[), ;, double, paru, =, gNorm, /, delta, ;, if, (, paru, ==, 0, ), {, paru, =, 2.2251e-308, /]
[), ;, double, paru, =, gNorm, /, delta, ;, if, (, paru, ==, 0, ), {, paru, =, 2.2251e-308, /]
[=, gNorm, /, delta, ;, if, (, paru, ==, 0, ), {, paru, =, 2.2251e-308, /, FastMath, ., min, (]
[/, delta, ;, if, (, paru, ==, 0, ), {, paru, =, 2.2251e-308, /, FastMath, ., min, (, delta, ,]
[(, paru, ==, 0, ), {, paru, =, 2.2251e-308, /, FastMath, ., min, (, delta, ,, 0.1, ), ;, }]
[==, 0, ), {, paru, =, 2.2251e-308, /, FastMath, ., min, (, delta, ,, 0.1, ), ;, }, lmPar, =]
[==, 0, ), {, paru, =, 2.2251e-308, /, FastMath, ., min, (, delta, ,, 0.1, ), ;, }, lmPar, =]
[paru, =, 2.2251e-308, /, FastMath, ., min, (, delta, ,, 0.1, ), ;, }, lmPar, =, FastMath, ., min, (]
[2.2251e-308, /, FastMath, ., min, (, delta, ,, 0.1, ), ;, }, lmPar, =, FastMath, ., min, (, paru, ,]
[2.2251e-308, /, FastMath, ., min, (, delta, ,, 0.1, ), ;, }, lmPar, =, FastMath, ., min, (, paru, ,]
[min, (, delta, ,, 0.1, ), ;, }, lmPar, =, FastMath, ., min, (, paru, ,, FastMath, ., max, (]
[delta, ,, 0.1, ), ;, }, lmPar, =, FastMath, ., min, (, paru, ,, FastMath, ., max, (, lmPar, ,]
[lmPar, =, FastMath, ., min, (, paru, ,, FastMath, ., max, (, lmPar, ,, parl, ), ), ;, if, (]
[lmPar, =, FastMath, ., min, (, paru, ,, FastMath, ., max, (, lmPar, ,, parl, ), ), ;, if, (]
[FastMath, ., min, (, paru, ,, FastMath, ., max, (, lmPar, ,, parl, ), ), ;, if, (, lmPar, ==]
[(, paru, ,, FastMath, ., max, (, lmPar, ,, parl, ), ), ;, if, (, lmPar, ==, 0, ), {]
[,, FastMath, ., max, (, lmPar, ,, parl, ), ), ;, if, (, lmPar, ==, 0, ), {, lmPar, =]
[,, FastMath, ., max, (, lmPar, ,, parl, ), ), ;, if, (, lmPar, ==, 0, ), {, lmPar, =]
[., max, (, lmPar, ,, parl, ), ), ;, if, (, lmPar, ==, 0, ), {, lmPar, =, gNorm, /]
[;, if, (, lmPar, ==, 0, ), {, lmPar, =, gNorm, /, dxNorm, ;, }, for, (, int, countdown, =]
[(, lmPar, ==, 0, ), {, lmPar, =, gNorm, /, dxNorm, ;, }, for, (, int, countdown, =, 10, ;]
[(, lmPar, ==, 0, ), {, lmPar, =, gNorm, /, dxNorm, ;, }, for, (, int, countdown, =, 10, ;]
[==, 0, ), {, lmPar, =, gNorm, /, dxNorm, ;, }, for, (, int, countdown, =, 10, ;, countdown, >=]
[), {, lmPar, =, gNorm, /, dxNorm, ;, }, for, (, int, countdown, =, 10, ;, countdown, >=, 0, ;]
[{, lmPar, =, gNorm, /, dxNorm, ;, }, for, (, int, countdown, =, 10, ;, countdown, >=, 0, ;, --]
[dxNorm, ;, }, for, (, int, countdown, =, 10, ;, countdown, >=, 0, ;, --, countdown, ), {, if, (]
[dxNorm, ;, }, for, (, int, countdown, =, 10, ;, countdown, >=, 0, ;, --, countdown, ), {, if, (]
[}, for, (, int, countdown, =, 10, ;, countdown, >=, 0, ;, --, countdown, ), {, if, (, lmPar, ==]
[int, countdown, =, 10, ;, countdown, >=, 0, ;, --, countdown, ), {, if, (, lmPar, ==, 0, ), {]
[=, 10, ;, countdown, >=, 0, ;, --, countdown, ), {, if, (, lmPar, ==, 0, ), {, lmPar, =]
[=, 10, ;, countdown, >=, 0, ;, --, countdown, ), {, if, (, lmPar, ==, 0, ), {, lmPar, =]
[>=, 0, ;, --, countdown, ), {, if, (, lmPar, ==, 0, ), {, lmPar, =, FastMath, ., max, (]
[;, --, countdown, ), {, if, (, lmPar, ==, 0, ), {, lmPar, =, FastMath, ., max, (, 2.2251e-308, ,]
[;, --, countdown, ), {, if, (, lmPar, ==, 0, ), {, lmPar, =, FastMath, ., max, (, 2.2251e-308, ,]
[countdown, ), {, if, (, lmPar, ==, 0, ), {, lmPar, =, FastMath, ., max, (, 2.2251e-308, ,, 0.001, *]
[0, ), {, lmPar, =, FastMath, ., max, (, 2.2251e-308, ,, 0.001, *, paru, ), ;, }, double, sPar, =]
[0, ), {, lmPar, =, FastMath, ., max, (, 2.2251e-308, ,, 0.001, *, paru, ), ;, }, double, sPar, =]
[=, FastMath, ., max, (, 2.2251e-308, ,, 0.001, *, paru, ), ;, }, double, sPar, =, FastMath, ., sqrt, (]
[*, paru, ), ;, }, double, sPar, =, FastMath, ., sqrt, (, lmPar, ), ;, for, (, int, j, =]
[), ;, }, double, sPar, =, FastMath, ., sqrt, (, lmPar, ), ;, for, (, int, j, =, 0, ;]
[), ;, }, double, sPar, =, FastMath, ., sqrt, (, lmPar, ), ;, for, (, int, j, =, 0, ;]
[}, double, sPar, =, FastMath, ., sqrt, (, lmPar, ), ;, for, (, int, j, =, 0, ;, j, <]
[sPar, =, FastMath, ., sqrt, (, lmPar, ), ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[=, FastMath, ., sqrt, (, lmPar, ), ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[), ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[), ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, []
[j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;]
[j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;]
[0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, []
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =, sPar, *]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =, sPar, *]
[j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =, sPar, *, diag, []
[pj, =, permutation, [, j, ], ;, work1, [, pj, ], =, sPar, *, diag, [, pj, ], ;, }]
[permutation, [, j, ], ;, work1, [, pj, ], =, sPar, *, diag, [, pj, ], ;, }, determineLMDirection, (]
[j, ], ;, work1, [, pj, ], =, sPar, *, diag, [, pj, ], ;, }, determineLMDirection, (, qy, ,]
[;, work1, [, pj, ], =, sPar, *, diag, [, pj, ], ;, }, determineLMDirection, (, qy, ,, work1, ,]
[[, pj, ], =, sPar, *, diag, [, pj, ], ;, }, determineLMDirection, (, qy, ,, work1, ,, work2, ,]
[=, sPar, *, diag, [, pj, ], ;, }, determineLMDirection, (, qy, ,, work1, ,, work2, ,, work3, ), ;]
[*, diag, [, pj, ], ;, }, determineLMDirection, (, qy, ,, work1, ,, work2, ,, work3, ), ;, dxNorm, =]
[determineLMDirection, (, qy, ,, work1, ,, work2, ,, work3, ), ;, dxNorm, =, 0, ;, for, (, int, j, =]
[qy, ,, work1, ,, work2, ,, work3, ), ;, dxNorm, =, 0, ;, for, (, int, j, =, 0, ;]
[qy, ,, work1, ,, work2, ,, work3, ), ;, dxNorm, =, 0, ;, for, (, int, j, =, 0, ;]
[work1, ,, work2, ,, work3, ), ;, dxNorm, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[work2, ,, work3, ), ;, dxNorm, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[,, work3, ), ;, dxNorm, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, []
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =]
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =]
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =, diag, []
[++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =, diag, [, pj, ], *]
[++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, s, =, diag, [, pj, ], *]
[), {, int, pj, =, permutation, [, j, ], ;, double, s, =, diag, [, pj, ], *, lmDir, []
[pj, =, permutation, [, j, ], ;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;]
[pj, =, permutation, [, j, ], ;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;]
[permutation, [, j, ], ;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;, work3, []
[], ;, double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;, work3, [, pj, ], =]
[double, s, =, diag, [, pj, ], *, lmDir, [, pj, ], ;, work3, [, pj, ], =, s, ;]
[=, diag, [, pj, ], *, lmDir, [, pj, ], ;, work3, [, pj, ], =, s, ;, dxNorm, +=]
[=, diag, [, pj, ], *, lmDir, [, pj, ], ;, work3, [, pj, ], =, s, ;, dxNorm, +=]
[[, pj, ], *, lmDir, [, pj, ], ;, work3, [, pj, ], =, s, ;, dxNorm, +=, s, *]
[*, lmDir, [, pj, ], ;, work3, [, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;, }]
[[, pj, ], ;, work3, [, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;, }, dxNorm, =]
[[, pj, ], ;, work3, [, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;, }, dxNorm, =]
[work3, [, pj, ], =, s, ;, dxNorm, +=, s, *, s, ;, }, dxNorm, =, FastMath, ., sqrt, (]
[;, dxNorm, +=, s, *, s, ;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, previousFP, =]
[+=, s, *, s, ;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, previousFP, =, fp, ;]
[*, s, ;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, previousFP, =, fp, ;, fp, =]
[*, s, ;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, previousFP, =, fp, ;, fp, =]
[;, }, dxNorm, =, FastMath, ., sqrt, (, dxNorm, ), ;, double, previousFP, =, fp, ;, fp, =, dxNorm, -]
[FastMath, ., sqrt, (, dxNorm, ), ;, double, previousFP, =, fp, ;, fp, =, dxNorm, -, delta, ;, if, (]
[FastMath, ., sqrt, (, dxNorm, ), ;, double, previousFP, =, fp, ;, fp, =, dxNorm, -, delta, ;, if, (]
[., sqrt, (, dxNorm, ), ;, double, previousFP, =, fp, ;, fp, =, dxNorm, -, delta, ;, if, (, (]
[., sqrt, (, dxNorm, ), ;, double, previousFP, =, fp, ;, fp, =, dxNorm, -, delta, ;, if, (, (]
[., sqrt, (, dxNorm, ), ;, double, previousFP, =, fp, ;, fp, =, dxNorm, -, delta, ;, if, (, (]
[), ;, double, previousFP, =, fp, ;, fp, =, dxNorm, -, delta, ;, if, (, (, FastMath, ., abs, (]
[previousFP, =, fp, ;, fp, =, dxNorm, -, delta, ;, if, (, (, FastMath, ., abs, (, fp, ), <=]
[previousFP, =, fp, ;, fp, =, dxNorm, -, delta, ;, if, (, (, FastMath, ., abs, (, fp, ), <=]
[fp, ;, fp, =, dxNorm, -, delta, ;, if, (, (, FastMath, ., abs, (, fp, ), <=, 0.1, *]
[=, dxNorm, -, delta, ;, if, (, (, FastMath, ., abs, (, fp, ), <=, 0.1, *, delta, ), ||]
[dxNorm, -, delta, ;, if, (, (, FastMath, ., abs, (, fp, ), <=, 0.1, *, delta, ), ||, (]
[dxNorm, -, delta, ;, if, (, (, FastMath, ., abs, (, fp, ), <=, 0.1, *, delta, ), ||, (]
[dxNorm, -, delta, ;, if, (, (, FastMath, ., abs, (, fp, ), <=, 0.1, *, delta, ), ||, (]
[-, delta, ;, if, (, (, FastMath, ., abs, (, fp, ), <=, 0.1, *, delta, ), ||, (, (]
[-, delta, ;, if, (, (, FastMath, ., abs, (, fp, ), <=, 0.1, *, delta, ), ||, (, (]
[;, if, (, (, FastMath, ., abs, (, fp, ), <=, 0.1, *, delta, ), ||, (, (, parl, ==]
[(, FastMath, ., abs, (, fp, ), <=, 0.1, *, delta, ), ||, (, (, parl, ==, 0, ), &&]
[FastMath, ., abs, (, fp, ), <=, 0.1, *, delta, ), ||, (, (, parl, ==, 0, ), &&, (]
[FastMath, ., abs, (, fp, ), <=, 0.1, *, delta, ), ||, (, (, parl, ==, 0, ), &&, (]
[abs, (, fp, ), <=, 0.1, *, delta, ), ||, (, (, parl, ==, 0, ), &&, (, fp, <=]
[), <=, 0.1, *, delta, ), ||, (, (, parl, ==, 0, ), &&, (, fp, <=, previousFP, ), &&]
[<=, 0.1, *, delta, ), ||, (, (, parl, ==, 0, ), &&, (, fp, <=, previousFP, ), &&, (]
[<=, 0.1, *, delta, ), ||, (, (, parl, ==, 0, ), &&, (, fp, <=, previousFP, ), &&, (]
[*, delta, ), ||, (, (, parl, ==, 0, ), &&, (, fp, <=, previousFP, ), &&, (, previousFP, <]
[<=, previousFP, ), &&, (, previousFP, <, 0, ), ), ), {, return, ;, }, for, (, int, j, =]
[), &&, (, previousFP, <, 0, ), ), ), {, return, ;, }, for, (, int, j, =, 0, ;]
[), &&, (, previousFP, <, 0, ), ), ), {, return, ;, }, for, (, int, j, =, 0, ;]
[(, previousFP, <, 0, ), ), ), {, return, ;, }, for, (, int, j, =, 0, ;, j, <]
[<, 0, ), ), ), {, return, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[0, ), ), ), {, return, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, []
[j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;]
[j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;]
[0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, []
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =, work3, []
[), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =, work3, [, pj, ], *]
[), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =, work3, [, pj, ], *]
[int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], =, work3, [, pj, ], *, diag, []
[permutation, [, j, ], ;, work1, [, pj, ], =, work3, [, pj, ], *, diag, [, pj, ], /]
[], =, work3, [, pj, ], *, diag, [, pj, ], /, dxNorm, ;, }, for, (, int, j, =]
[work3, [, pj, ], *, diag, [, pj, ], /, dxNorm, ;, }, for, (, int, j, =, 0, ;]
[work3, [, pj, ], *, diag, [, pj, ], /, dxNorm, ;, }, for, (, int, j, =, 0, ;]
[pj, ], *, diag, [, pj, ], /, dxNorm, ;, }, for, (, int, j, =, 0, ;, j, <]
[*, diag, [, pj, ], /, dxNorm, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[diag, [, pj, ], /, dxNorm, ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, []
[j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;]
[j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;]
[0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, []
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], /=]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], /=]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, work1, [, pj, ], /=, work2, []
[pj, =, permutation, [, j, ], ;, work1, [, pj, ], /=, work2, [, j, ], ;, double, tmp, =]
[pj, =, permutation, [, j, ], ;, work1, [, pj, ], /=, work2, [, j, ], ;, double, tmp, =]
[permutation, [, j, ], ;, work1, [, pj, ], /=, work2, [, j, ], ;, double, tmp, =, work1, []
[], /=, work2, [, j, ], ;, double, tmp, =, work1, [, pj, ], ;, for, (, int, i, =]
[], /=, work2, [, j, ], ;, double, tmp, =, work1, [, pj, ], ;, for, (, int, i, =]
[work2, [, j, ], ;, double, tmp, =, work1, [, pj, ], ;, for, (, int, i, =, j, +]
[j, ], ;, double, tmp, =, work1, [, pj, ], ;, for, (, int, i, =, j, +, 1, ;]
[j, ], ;, double, tmp, =, work1, [, pj, ], ;, for, (, int, i, =, j, +, 1, ;]
[;, double, tmp, =, work1, [, pj, ], ;, for, (, int, i, =, j, +, 1, ;, i, <]
[tmp, =, work1, [, pj, ], ;, for, (, int, i, =, j, +, 1, ;, i, <, solvedCols, ;]
[=, work1, [, pj, ], ;, for, (, int, i, =, j, +, 1, ;, i, <, solvedCols, ;, ++]
[pj, ], ;, for, (, int, i, =, j, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {]
[pj, ], ;, for, (, int, i, =, j, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {]
[;, for, (, int, i, =, j, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, work1, []
[;, for, (, int, i, =, j, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, work1, []
[(, int, i, =, j, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, work1, [, permutation, []
[j, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, work1, [, permutation, [, i, ], ], -=]
[j, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, work1, [, permutation, [, i, ], ], -=]
[j, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, work1, [, permutation, [, i, ], ], -=]
[j, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, work1, [, permutation, [, i, ], ], -=]
[1, ;, i, <, solvedCols, ;, ++, i, ), {, work1, [, permutation, [, i, ], ], -=, weightedJacobian, []
[<, solvedCols, ;, ++, i, ), {, work1, [, permutation, [, i, ], ], -=, weightedJacobian, [, i, ], []
[++, i, ), {, work1, [, permutation, [, i, ], ], -=, weightedJacobian, [, i, ], [, pj, ], *]
[work1, [, permutation, [, i, ], ], -=, weightedJacobian, [, i, ], [, pj, ], *, tmp, ;, }, }]
[permutation, [, i, ], ], -=, weightedJacobian, [, i, ], [, pj, ], *, tmp, ;, }, }, sum2, =]
[[, i, ], [, pj, ], *, tmp, ;, }, }, sum2, =, 0, ;, for, (, int, j, =]
[], [, pj, ], *, tmp, ;, }, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;]
[], [, pj, ], *, tmp, ;, }, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;]
[pj, ], *, tmp, ;, }, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[*, tmp, ;, }, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[tmp, ;, }, }, sum2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, double, s, =]
[0, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, double, s, =]
[for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, double, s, =, work1, []
[for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, double, s, =, work1, []
[int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, double, s, =, work1, [, permutation, []
[;, j, <, solvedCols, ;, ++, j, ), {, double, s, =, work1, [, permutation, [, j, ], ], ;]
[<, solvedCols, ;, ++, j, ), {, double, s, =, work1, [, permutation, [, j, ], ], ;, sum2, +=]
[<, solvedCols, ;, ++, j, ), {, double, s, =, work1, [, permutation, [, j, ], ], ;, sum2, +=]
[;, ++, j, ), {, double, s, =, work1, [, permutation, [, j, ], ], ;, sum2, +=, s, *]
[s, =, work1, [, permutation, [, j, ], ], ;, sum2, +=, s, *, s, ;, }, double, correction, =]
[s, =, work1, [, permutation, [, j, ], ], ;, sum2, +=, s, *, s, ;, }, double, correction, =]
[work1, [, permutation, [, j, ], ], ;, sum2, +=, s, *, s, ;, }, double, correction, =, fp, /]
[[, permutation, [, j, ], ], ;, sum2, +=, s, *, s, ;, }, double, correction, =, fp, /, (]
[[, permutation, [, j, ], ], ;, sum2, +=, s, *, s, ;, }, double, correction, =, fp, /, (]
[[, j, ], ], ;, sum2, +=, s, *, s, ;, }, double, correction, =, fp, /, (, delta, *]
[sum2, +=, s, *, s, ;, }, double, correction, =, fp, /, (, delta, *, sum2, ), ;, if, (]
[sum2, +=, s, *, s, ;, }, double, correction, =, fp, /, (, delta, *, sum2, ), ;, if, (]
[s, *, s, ;, }, double, correction, =, fp, /, (, delta, *, sum2, ), ;, if, (, fp, >]
[;, }, double, correction, =, fp, /, (, delta, *, sum2, ), ;, if, (, fp, >, 0, ), {]
[double, correction, =, fp, /, (, delta, *, sum2, ), ;, if, (, fp, >, 0, ), {, parl, =]
[double, correction, =, fp, /, (, delta, *, sum2, ), ;, if, (, fp, >, 0, ), {, parl, =]
[/, (, delta, *, sum2, ), ;, if, (, fp, >, 0, ), {, parl, =, FastMath, ., max, (]
[delta, *, sum2, ), ;, if, (, fp, >, 0, ), {, parl, =, FastMath, ., max, (, parl, ,]
[fp, >, 0, ), {, parl, =, FastMath, ., max, (, parl, ,, lmPar, ), ;, }, else, if, (]
[fp, >, 0, ), {, parl, =, FastMath, ., max, (, parl, ,, lmPar, ), ;, }, else, if, (]
[0, ), {, parl, =, FastMath, ., max, (, parl, ,, lmPar, ), ;, }, else, if, (, fp, <]
[parl, =, FastMath, ., max, (, parl, ,, lmPar, ), ;, }, else, if, (, fp, <, 0, ), {]
[FastMath, ., max, (, parl, ,, lmPar, ), ;, }, else, if, (, fp, <, 0, ), {, paru, =]
[FastMath, ., max, (, parl, ,, lmPar, ), ;, }, else, if, (, fp, <, 0, ), {, paru, =]
[parl, ,, lmPar, ), ;, }, else, if, (, fp, <, 0, ), {, paru, =, FastMath, ., min, (]
[lmPar, ), ;, }, else, if, (, fp, <, 0, ), {, paru, =, FastMath, ., min, (, paru, ,]
[else, if, (, fp, <, 0, ), {, paru, =, FastMath, ., min, (, paru, ,, lmPar, ), ;, }]
[(, fp, <, 0, ), {, paru, =, FastMath, ., min, (, paru, ,, lmPar, ), ;, }, lmPar, =]
[(, fp, <, 0, ), {, paru, =, FastMath, ., min, (, paru, ,, lmPar, ), ;, }, lmPar, =]
[), {, paru, =, FastMath, ., min, (, paru, ,, lmPar, ), ;, }, lmPar, =, FastMath, ., max, (]
[paru, =, FastMath, ., min, (, paru, ,, lmPar, ), ;, }, lmPar, =, FastMath, ., max, (, parl, ,]
[paru, =, FastMath, ., min, (, paru, ,, lmPar, ), ;, }, lmPar, =, FastMath, ., max, (, parl, ,]
[FastMath, ., min, (, paru, ,, lmPar, ), ;, }, lmPar, =, FastMath, ., max, (, parl, ,, lmPar, +]
[[, ], diag, ,, double, [, ], lmDiag, ,, double, [, ], work, ), {, for, (, int, j, =]
[diag, ,, double, [, ], lmDiag, ,, double, [, ], work, ), {, for, (, int, j, =, 0, ;]
[diag, ,, double, [, ], lmDiag, ,, double, [, ], work, ), {, for, (, int, j, =, 0, ;]
[double, [, ], lmDiag, ,, double, [, ], work, ), {, for, (, int, j, =, 0, ;, j, <]
[], lmDiag, ,, double, [, ], work, ), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[lmDiag, ,, double, [, ], work, ), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[), {, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, []
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, for, (, int, i, =]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, for, (, int, i, =]
[;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, for, (, int, i, =, j, +]
[j, ), {, int, pj, =, permutation, [, j, ], ;, for, (, int, i, =, j, +, 1, ;]
[j, ), {, int, pj, =, permutation, [, j, ], ;, for, (, int, i, =, j, +, 1, ;]
[{, int, pj, =, permutation, [, j, ], ;, for, (, int, i, =, j, +, 1, ;, i, <]
[pj, =, permutation, [, j, ], ;, for, (, int, i, =, j, +, 1, ;, i, <, solvedCols, ;]
[=, permutation, [, j, ], ;, for, (, int, i, =, j, +, 1, ;, i, <, solvedCols, ;, ++]
[j, ], ;, for, (, int, i, =, j, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {]
[j, ], ;, for, (, int, i, =, j, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {]
[j, ], ;, for, (, int, i, =, j, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {]
[;, for, (, int, i, =, j, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, weightedJacobian, []
[int, i, =, j, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, weightedJacobian, [, i, ], []
[j, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, weightedJacobian, [, i, ], [, pj, ], =]
[j, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, weightedJacobian, [, i, ], [, pj, ], =]
[j, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, weightedJacobian, [, i, ], [, pj, ], =]
[1, ;, i, <, solvedCols, ;, ++, i, ), {, weightedJacobian, [, i, ], [, pj, ], =, weightedJacobian, []
[<, solvedCols, ;, ++, i, ), {, weightedJacobian, [, i, ], [, pj, ], =, weightedJacobian, [, j, ], []
[<, solvedCols, ;, ++, i, ), {, weightedJacobian, [, i, ], [, pj, ], =, weightedJacobian, [, j, ], []
[;, ++, i, ), {, weightedJacobian, [, i, ], [, pj, ], =, weightedJacobian, [, j, ], [, permutation, []
[weightedJacobian, [, i, ], [, pj, ], =, weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;, }]
[weightedJacobian, [, i, ], [, pj, ], =, weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;, }]
[i, ], [, pj, ], =, weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;, }, lmDir, []
[pj, ], =, weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;, }, lmDir, [, j, ], =]
[pj, ], =, weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;, }, lmDir, [, j, ], =]
[=, weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;, }, lmDir, [, j, ], =, diagR, []
[j, ], [, permutation, [, i, ], ], ;, }, lmDir, [, j, ], =, diagR, [, pj, ], ;]
[j, ], [, permutation, [, i, ], ], ;, }, lmDir, [, j, ], =, diagR, [, pj, ], ;]
[[, permutation, [, i, ], ], ;, }, lmDir, [, j, ], =, diagR, [, pj, ], ;, work, []
[i, ], ], ;, }, lmDir, [, j, ], =, diagR, [, pj, ], ;, work, [, j, ], =]
[i, ], ], ;, }, lmDir, [, j, ], =, diagR, [, pj, ], ;, work, [, j, ], =]
[], ;, }, lmDir, [, j, ], =, diagR, [, pj, ], ;, work, [, j, ], =, qy, []
[[, pj, ], ;, work, [, j, ], =, qy, [, j, ], ;, }, for, (, int, j, =]
[], ;, work, [, j, ], =, qy, [, j, ], ;, }, for, (, int, j, =, 0, ;]
[], ;, work, [, j, ], =, qy, [, j, ], ;, }, for, (, int, j, =, 0, ;]
[work, [, j, ], =, qy, [, j, ], ;, }, for, (, int, j, =, 0, ;, j, <]
[j, ], =, qy, [, j, ], ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[], =, qy, [, j, ], ;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[;, }, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =]
[for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, []
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, dpj, =]
[;, j, <, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, dpj, =]
[<, solvedCols, ;, ++, j, ), {, int, pj, =, permutation, [, j, ], ;, double, dpj, =, diag, []
[), {, int, pj, =, permutation, [, j, ], ;, double, dpj, =, diag, [, pj, ], ;, if, (]
[), {, int, pj, =, permutation, [, j, ], ;, double, dpj, =, diag, [, pj, ], ;, if, (]
[int, pj, =, permutation, [, j, ], ;, double, dpj, =, diag, [, pj, ], ;, if, (, dpj, !=]
[permutation, [, j, ], ;, double, dpj, =, diag, [, pj, ], ;, if, (, dpj, !=, 0, ), {]
[permutation, [, j, ], ;, double, dpj, =, diag, [, pj, ], ;, if, (, dpj, !=, 0, ), {]
[;, double, dpj, =, diag, [, pj, ], ;, if, (, dpj, !=, 0, ), {, Arrays, ., fill, (]
[dpj, =, diag, [, pj, ], ;, if, (, dpj, !=, 0, ), {, Arrays, ., fill, (, lmDiag, ,]
[dpj, =, diag, [, pj, ], ;, if, (, dpj, !=, 0, ), {, Arrays, ., fill, (, lmDiag, ,]
[diag, [, pj, ], ;, if, (, dpj, !=, 0, ), {, Arrays, ., fill, (, lmDiag, ,, j, +]
[pj, ], ;, if, (, dpj, !=, 0, ), {, Arrays, ., fill, (, lmDiag, ,, j, +, 1, ,]
[pj, ], ;, if, (, dpj, !=, 0, ), {, Arrays, ., fill, (, lmDiag, ,, j, +, 1, ,]
[(, dpj, !=, 0, ), {, Arrays, ., fill, (, lmDiag, ,, j, +, 1, ,, lmDiag, ., length, ,]
[), {, Arrays, ., fill, (, lmDiag, ,, j, +, 1, ,, lmDiag, ., length, ,, 0, ), ;, }]
[), {, Arrays, ., fill, (, lmDiag, ,, j, +, 1, ,, lmDiag, ., length, ,, 0, ), ;, }]
[Arrays, ., fill, (, lmDiag, ,, j, +, 1, ,, lmDiag, ., length, ,, 0, ), ;, }, lmDiag, []
[(, lmDiag, ,, j, +, 1, ,, lmDiag, ., length, ,, 0, ), ;, }, lmDiag, [, j, ], =]
[1, ,, lmDiag, ., length, ,, 0, ), ;, }, lmDiag, [, j, ], =, dpj, ;, double, qtbpj, =]
[), ;, }, lmDiag, [, j, ], =, dpj, ;, double, qtbpj, =, 0, ;, for, (, int, k, =]
[}, lmDiag, [, j, ], =, dpj, ;, double, qtbpj, =, 0, ;, for, (, int, k, =, j, ;]
[}, lmDiag, [, j, ], =, dpj, ;, double, qtbpj, =, 0, ;, for, (, int, k, =, j, ;]
[[, j, ], =, dpj, ;, double, qtbpj, =, 0, ;, for, (, int, k, =, j, ;, k, <]
[], =, dpj, ;, double, qtbpj, =, 0, ;, for, (, int, k, =, j, ;, k, <, solvedCols, ;]
[=, dpj, ;, double, qtbpj, =, 0, ;, for, (, int, k, =, j, ;, k, <, solvedCols, ;, ++]
[0, ;, for, (, int, k, =, j, ;, k, <, solvedCols, ;, ++, k, ), {, int, pk, =]
[0, ;, for, (, int, k, =, j, ;, k, <, solvedCols, ;, ++, k, ), {, int, pk, =]
[for, (, int, k, =, j, ;, k, <, solvedCols, ;, ++, k, ), {, int, pk, =, permutation, []
[j, ;, k, <, solvedCols, ;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;, if, (]
[j, ;, k, <, solvedCols, ;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;, if, (]
[j, ;, k, <, solvedCols, ;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;, if, (]
[k, <, solvedCols, ;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;, if, (, lmDiag, []
[;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;, if, (, lmDiag, [, k, ], !=]
[(, lmDiag, [, k, ], !=, 0, ), {, final, double, sin, ;, final, double, cos, ;, double, rkk, =]
[(, lmDiag, [, k, ], !=, 0, ), {, final, double, sin, ;, final, double, cos, ;, double, rkk, =]
[(, lmDiag, [, k, ], !=, 0, ), {, final, double, sin, ;, final, double, cos, ;, double, rkk, =]
[[, k, ], !=, 0, ), {, final, double, sin, ;, final, double, cos, ;, double, rkk, =, weightedJacobian, []
[!=, 0, ), {, final, double, sin, ;, final, double, cos, ;, double, rkk, =, weightedJacobian, [, k, ], []
[double, sin, ;, final, double, cos, ;, double, rkk, =, weightedJacobian, [, k, ], [, pk, ], ;, if, (]
[double, sin, ;, final, double, cos, ;, double, rkk, =, weightedJacobian, [, k, ], [, pk, ], ;, if, (]
[double, sin, ;, final, double, cos, ;, double, rkk, =, weightedJacobian, [, k, ], [, pk, ], ;, if, (]
[double, cos, ;, double, rkk, =, weightedJacobian, [, k, ], [, pk, ], ;, if, (, FastMath, ., abs, (]
[double, rkk, =, weightedJacobian, [, k, ], [, pk, ], ;, if, (, FastMath, ., abs, (, rkk, ), <]
[double, rkk, =, weightedJacobian, [, k, ], [, pk, ], ;, if, (, FastMath, ., abs, (, rkk, ), <]
[[, k, ], [, pk, ], ;, if, (, FastMath, ., abs, (, rkk, ), <, FastMath, ., abs, (]
[[, k, ], [, pk, ], ;, if, (, FastMath, ., abs, (, rkk, ), <, FastMath, ., abs, (]
[], [, pk, ], ;, if, (, FastMath, ., abs, (, rkk, ), <, FastMath, ., abs, (, lmDiag, []
[abs, (, rkk, ), <, FastMath, ., abs, (, lmDiag, [, k, ], ), ), {, final, double, cotan, =]
[abs, (, rkk, ), <, FastMath, ., abs, (, lmDiag, [, k, ], ), ), {, final, double, cotan, =]
[rkk, ), <, FastMath, ., abs, (, lmDiag, [, k, ], ), ), {, final, double, cotan, =, rkk, /]
[rkk, ), <, FastMath, ., abs, (, lmDiag, [, k, ], ), ), {, final, double, cotan, =, rkk, /]
[<, FastMath, ., abs, (, lmDiag, [, k, ], ), ), {, final, double, cotan, =, rkk, /, lmDiag, []
[abs, (, lmDiag, [, k, ], ), ), {, final, double, cotan, =, rkk, /, lmDiag, [, k, ], ;]
[lmDiag, [, k, ], ), ), {, final, double, cotan, =, rkk, /, lmDiag, [, k, ], ;, sin, =]
[lmDiag, [, k, ], ), ), {, final, double, cotan, =, rkk, /, lmDiag, [, k, ], ;, sin, =]
[k, ], ), ), {, final, double, cotan, =, rkk, /, lmDiag, [, k, ], ;, sin, =, 1.0, /]
[k, ], ), ), {, final, double, cotan, =, rkk, /, lmDiag, [, k, ], ;, sin, =, 1.0, /]
[{, final, double, cotan, =, rkk, /, lmDiag, [, k, ], ;, sin, =, 1.0, /, FastMath, ., sqrt, (]
[{, final, double, cotan, =, rkk, /, lmDiag, [, k, ], ;, sin, =, 1.0, /, FastMath, ., sqrt, (]
[double, cotan, =, rkk, /, lmDiag, [, k, ], ;, sin, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +]
[double, cotan, =, rkk, /, lmDiag, [, k, ], ;, sin, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +]
[=, rkk, /, lmDiag, [, k, ], ;, sin, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +, cotan, *]
[lmDiag, [, k, ], ;, sin, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +, cotan, *, cotan, ), ;]
[k, ], ;, sin, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +, cotan, *, cotan, ), ;, cos, =]
[k, ], ;, sin, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +, cotan, *, cotan, ), ;, cos, =]
[;, sin, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +, cotan, *, cotan, ), ;, cos, =, sin, *]
[1.0, +, cotan, *, cotan, ), ;, cos, =, sin, *, cotan, ;, }, else, {, final, double, tan, =]
[1.0, +, cotan, *, cotan, ), ;, cos, =, sin, *, cotan, ;, }, else, {, final, double, tan, =]
[1.0, +, cotan, *, cotan, ), ;, cos, =, sin, *, cotan, ;, }, else, {, final, double, tan, =]
[cotan, *, cotan, ), ;, cos, =, sin, *, cotan, ;, }, else, {, final, double, tan, =, lmDiag, []
[), ;, cos, =, sin, *, cotan, ;, }, else, {, final, double, tan, =, lmDiag, [, k, ], /]
[cos, =, sin, *, cotan, ;, }, else, {, final, double, tan, =, lmDiag, [, k, ], /, rkk, ;]
[sin, *, cotan, ;, }, else, {, final, double, tan, =, lmDiag, [, k, ], /, rkk, ;, cos, =]
[sin, *, cotan, ;, }, else, {, final, double, tan, =, lmDiag, [, k, ], /, rkk, ;, cos, =]
[cotan, ;, }, else, {, final, double, tan, =, lmDiag, [, k, ], /, rkk, ;, cos, =, 1.0, /]
[cotan, ;, }, else, {, final, double, tan, =, lmDiag, [, k, ], /, rkk, ;, cos, =, 1.0, /]
[{, final, double, tan, =, lmDiag, [, k, ], /, rkk, ;, cos, =, 1.0, /, FastMath, ., sqrt, (]
[{, final, double, tan, =, lmDiag, [, k, ], /, rkk, ;, cos, =, 1.0, /, FastMath, ., sqrt, (]
[double, tan, =, lmDiag, [, k, ], /, rkk, ;, cos, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +]
[double, tan, =, lmDiag, [, k, ], /, rkk, ;, cos, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +]
[=, lmDiag, [, k, ], /, rkk, ;, cos, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +, tan, *]
[k, ], /, rkk, ;, cos, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +, tan, *, tan, ), ;]
[/, rkk, ;, cos, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +, tan, *, tan, ), ;, sin, =]
[/, rkk, ;, cos, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +, tan, *, tan, ), ;, sin, =]
[;, cos, =, 1.0, /, FastMath, ., sqrt, (, 1.0, +, tan, *, tan, ), ;, sin, =, cos, *]
[1.0, /, FastMath, ., sqrt, (, 1.0, +, tan, *, tan, ), ;, sin, =, cos, *, tan, ;, }]
[1.0, /, FastMath, ., sqrt, (, 1.0, +, tan, *, tan, ), ;, sin, =, cos, *, tan, ;, }]
[1.0, /, FastMath, ., sqrt, (, 1.0, +, tan, *, tan, ), ;, sin, =, cos, *, tan, ;, }]
[FastMath, ., sqrt, (, 1.0, +, tan, *, tan, ), ;, sin, =, cos, *, tan, ;, }, weightedJacobian, []
[(, 1.0, +, tan, *, tan, ), ;, sin, =, cos, *, tan, ;, }, weightedJacobian, [, k, ], []
[tan, *, tan, ), ;, sin, =, cos, *, tan, ;, }, weightedJacobian, [, k, ], [, pk, ], =]
[tan, *, tan, ), ;, sin, =, cos, *, tan, ;, }, weightedJacobian, [, k, ], [, pk, ], =]
[tan, *, tan, ), ;, sin, =, cos, *, tan, ;, }, weightedJacobian, [, k, ], [, pk, ], =]
[tan, ), ;, sin, =, cos, *, tan, ;, }, weightedJacobian, [, k, ], [, pk, ], =, cos, *]
[;, sin, =, cos, *, tan, ;, }, weightedJacobian, [, k, ], [, pk, ], =, cos, *, rkk, +]
[;, sin, =, cos, *, tan, ;, }, weightedJacobian, [, k, ], [, pk, ], =, cos, *, rkk, +]
[=, cos, *, tan, ;, }, weightedJacobian, [, k, ], [, pk, ], =, cos, *, rkk, +, sin, *]
[=, cos, *, tan, ;, }, weightedJacobian, [, k, ], [, pk, ], =, cos, *, rkk, +, sin, *]
[*, tan, ;, }, weightedJacobian, [, k, ], [, pk, ], =, cos, *, rkk, +, sin, *, lmDiag, []
[], [, pk, ], =, cos, *, rkk, +, sin, *, lmDiag, [, k, ], ;, final, double, temp, =]
[], [, pk, ], =, cos, *, rkk, +, sin, *, lmDiag, [, k, ], ;, final, double, temp, =]
[], [, pk, ], =, cos, *, rkk, +, sin, *, lmDiag, [, k, ], ;, final, double, temp, =]
[pk, ], =, cos, *, rkk, +, sin, *, lmDiag, [, k, ], ;, final, double, temp, =, cos, *]
[pk, ], =, cos, *, rkk, +, sin, *, lmDiag, [, k, ], ;, final, double, temp, =, cos, *]
[=, cos, *, rkk, +, sin, *, lmDiag, [, k, ], ;, final, double, temp, =, cos, *, work, []
[rkk, +, sin, *, lmDiag, [, k, ], ;, final, double, temp, =, cos, *, work, [, k, ], +]
[rkk, +, sin, *, lmDiag, [, k, ], ;, final, double, temp, =, cos, *, work, [, k, ], +]
[sin, *, lmDiag, [, k, ], ;, final, double, temp, =, cos, *, work, [, k, ], +, sin, *]
[lmDiag, [, k, ], ;, final, double, temp, =, cos, *, work, [, k, ], +, sin, *, qtbpj, ;]
[k, ], ;, final, double, temp, =, cos, *, work, [, k, ], +, sin, *, qtbpj, ;, qtbpj, =]
[k, ], ;, final, double, temp, =, cos, *, work, [, k, ], +, sin, *, qtbpj, ;, qtbpj, =]
[k, ], ;, final, double, temp, =, cos, *, work, [, k, ], +, sin, *, qtbpj, ;, qtbpj, =]
[], ;, final, double, temp, =, cos, *, work, [, k, ], +, sin, *, qtbpj, ;, qtbpj, =, -]
[final, double, temp, =, cos, *, work, [, k, ], +, sin, *, qtbpj, ;, qtbpj, =, -, sin, *]
[final, double, temp, =, cos, *, work, [, k, ], +, sin, *, qtbpj, ;, qtbpj, =, -, sin, *]
[temp, =, cos, *, work, [, k, ], +, sin, *, qtbpj, ;, qtbpj, =, -, sin, *, work, []
[*, work, [, k, ], +, sin, *, qtbpj, ;, qtbpj, =, -, sin, *, work, [, k, ], +]
[*, work, [, k, ], +, sin, *, qtbpj, ;, qtbpj, =, -, sin, *, work, [, k, ], +]
[[, k, ], +, sin, *, qtbpj, ;, qtbpj, =, -, sin, *, work, [, k, ], +, cos, *]
[], +, sin, *, qtbpj, ;, qtbpj, =, -, sin, *, work, [, k, ], +, cos, *, qtbpj, ;]
[], +, sin, *, qtbpj, ;, qtbpj, =, -, sin, *, work, [, k, ], +, cos, *, qtbpj, ;]
[sin, *, qtbpj, ;, qtbpj, =, -, sin, *, work, [, k, ], +, cos, *, qtbpj, ;, work, []
[;, qtbpj, =, -, sin, *, work, [, k, ], +, cos, *, qtbpj, ;, work, [, k, ], =]
[[, k, ], +, cos, *, qtbpj, ;, work, [, k, ], =, temp, ;, for, (, int, i, =]
[[, k, ], +, cos, *, qtbpj, ;, work, [, k, ], =, temp, ;, for, (, int, i, =]
[], +, cos, *, qtbpj, ;, work, [, k, ], =, temp, ;, for, (, int, i, =, k, +]
[cos, *, qtbpj, ;, work, [, k, ], =, temp, ;, for, (, int, i, =, k, +, 1, ;]
[cos, *, qtbpj, ;, work, [, k, ], =, temp, ;, for, (, int, i, =, k, +, 1, ;]
[qtbpj, ;, work, [, k, ], =, temp, ;, for, (, int, i, =, k, +, 1, ;, i, <]
[work, [, k, ], =, temp, ;, for, (, int, i, =, k, +, 1, ;, i, <, solvedCols, ;]
[[, k, ], =, temp, ;, for, (, int, i, =, k, +, 1, ;, i, <, solvedCols, ;, ++]
[for, (, int, i, =, k, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, double, rik, =]
[for, (, int, i, =, k, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, double, rik, =]
[for, (, int, i, =, k, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, double, rik, =]
[int, i, =, k, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, double, rik, =, weightedJacobian, []
[k, +, 1, ;, i, <, solvedCols, ;, ++, i, ), {, double, rik, =, weightedJacobian, [, i, ], []
[;, ++, i, ), {, double, rik, =, weightedJacobian, [, i, ], [, pk, ], ;, final, double, temp2, =]
[;, ++, i, ), {, double, rik, =, weightedJacobian, [, i, ], [, pk, ], ;, final, double, temp2, =]
[;, ++, i, ), {, double, rik, =, weightedJacobian, [, i, ], [, pk, ], ;, final, double, temp2, =]
[i, ), {, double, rik, =, weightedJacobian, [, i, ], [, pk, ], ;, final, double, temp2, =, cos, *]
[{, double, rik, =, weightedJacobian, [, i, ], [, pk, ], ;, final, double, temp2, =, cos, *, rik, +]
[{, double, rik, =, weightedJacobian, [, i, ], [, pk, ], ;, final, double, temp2, =, cos, *, rik, +]
[rik, =, weightedJacobian, [, i, ], [, pk, ], ;, final, double, temp2, =, cos, *, rik, +, sin, *]
[rik, =, weightedJacobian, [, i, ], [, pk, ], ;, final, double, temp2, =, cos, *, rik, +, sin, *]
[weightedJacobian, [, i, ], [, pk, ], ;, final, double, temp2, =, cos, *, rik, +, sin, *, lmDiag, []
[], [, pk, ], ;, final, double, temp2, =, cos, *, rik, +, sin, *, lmDiag, [, i, ], ;]
[], [, pk, ], ;, final, double, temp2, =, cos, *, rik, +, sin, *, lmDiag, [, i, ], ;]
[pk, ], ;, final, double, temp2, =, cos, *, rik, +, sin, *, lmDiag, [, i, ], ;, lmDiag, []
[final, double, temp2, =, cos, *, rik, +, sin, *, lmDiag, [, i, ], ;, lmDiag, [, i, ], =]
[final, double, temp2, =, cos, *, rik, +, sin, *, lmDiag, [, i, ], ;, lmDiag, [, i, ], =]
[final, double, temp2, =, cos, *, rik, +, sin, *, lmDiag, [, i, ], ;, lmDiag, [, i, ], =]
[double, temp2, =, cos, *, rik, +, sin, *, lmDiag, [, i, ], ;, lmDiag, [, i, ], =, -]
[=, cos, *, rik, +, sin, *, lmDiag, [, i, ], ;, lmDiag, [, i, ], =, -, sin, *]
[*, rik, +, sin, *, lmDiag, [, i, ], ;, lmDiag, [, i, ], =, -, sin, *, rik, +]
[*, rik, +, sin, *, lmDiag, [, i, ], ;, lmDiag, [, i, ], =, -, sin, *, rik, +]
[+, sin, *, lmDiag, [, i, ], ;, lmDiag, [, i, ], =, -, sin, *, rik, +, cos, *]
[+, sin, *, lmDiag, [, i, ], ;, lmDiag, [, i, ], =, -, sin, *, rik, +, cos, *]
[*, lmDiag, [, i, ], ;, lmDiag, [, i, ], =, -, sin, *, rik, +, cos, *, lmDiag, []
[i, ], ;, lmDiag, [, i, ], =, -, sin, *, rik, +, cos, *, lmDiag, [, i, ], ;]
[i, ], ;, lmDiag, [, i, ], =, -, sin, *, rik, +, cos, *, lmDiag, [, i, ], ;]
[i, ], ;, lmDiag, [, i, ], =, -, sin, *, rik, +, cos, *, lmDiag, [, i, ], ;]
[;, lmDiag, [, i, ], =, -, sin, *, rik, +, cos, *, lmDiag, [, i, ], ;, weightedJacobian, []
[i, ], =, -, sin, *, rik, +, cos, *, lmDiag, [, i, ], ;, weightedJacobian, [, i, ], []
[-, sin, *, rik, +, cos, *, lmDiag, [, i, ], ;, weightedJacobian, [, i, ], [, pk, ], =]
[cos, *, lmDiag, [, i, ], ;, weightedJacobian, [, i, ], [, pk, ], =, temp2, ;, }, }, }]
[cos, *, lmDiag, [, i, ], ;, weightedJacobian, [, i, ], [, pk, ], =, temp2, ;, }, }, }]
[lmDiag, [, i, ], ;, weightedJacobian, [, i, ], [, pk, ], =, temp2, ;, }, }, }, lmDiag, []
[], ;, weightedJacobian, [, i, ], [, pk, ], =, temp2, ;, }, }, }, lmDiag, [, j, ], =]
[], ;, weightedJacobian, [, i, ], [, pk, ], =, temp2, ;, }, }, }, lmDiag, [, j, ], =]
[], ;, weightedJacobian, [, i, ], [, pk, ], =, temp2, ;, }, }, }, lmDiag, [, j, ], =]
[weightedJacobian, [, i, ], [, pk, ], =, temp2, ;, }, }, }, lmDiag, [, j, ], =, weightedJacobian, []
[], [, pk, ], =, temp2, ;, }, }, }, lmDiag, [, j, ], =, weightedJacobian, [, j, ], []
[], [, pk, ], =, temp2, ;, }, }, }, lmDiag, [, j, ], =, weightedJacobian, [, j, ], []
[pk, ], =, temp2, ;, }, }, }, lmDiag, [, j, ], =, weightedJacobian, [, j, ], [, permutation, []
[;, }, }, }, lmDiag, [, j, ], =, weightedJacobian, [, j, ], [, permutation, [, j, ], ], ;]
[;, }, }, }, lmDiag, [, j, ], =, weightedJacobian, [, j, ], [, permutation, [, j, ], ], ;]
[;, }, }, }, lmDiag, [, j, ], =, weightedJacobian, [, j, ], [, permutation, [, j, ], ], ;]
[}, }, lmDiag, [, j, ], =, weightedJacobian, [, j, ], [, permutation, [, j, ], ], ;, weightedJacobian, []
[[, j, ], =, weightedJacobian, [, j, ], [, permutation, [, j, ], ], ;, weightedJacobian, [, j, ], []
[[, j, ], =, weightedJacobian, [, j, ], [, permutation, [, j, ], ], ;, weightedJacobian, [, j, ], []
[], =, weightedJacobian, [, j, ], [, permutation, [, j, ], ], ;, weightedJacobian, [, j, ], [, permutation, []
[j, ], [, permutation, [, j, ], ], ;, weightedJacobian, [, j, ], [, permutation, [, j, ], ], =]
[j, ], [, permutation, [, j, ], ], ;, weightedJacobian, [, j, ], [, permutation, [, j, ], ], =]
[[, permutation, [, j, ], ], ;, weightedJacobian, [, j, ], [, permutation, [, j, ], ], =, lmDir, []
[weightedJacobian, [, j, ], [, permutation, [, j, ], ], =, lmDir, [, j, ], ;, }, int, nSing, =]
[j, ], ], =, lmDir, [, j, ], ;, }, int, nSing, =, solvedCols, ;, for, (, int, j, =]
[], =, lmDir, [, j, ], ;, }, int, nSing, =, solvedCols, ;, for, (, int, j, =, 0, ;]
[], =, lmDir, [, j, ], ;, }, int, nSing, =, solvedCols, ;, for, (, int, j, =, 0, ;]
[lmDir, [, j, ], ;, }, int, nSing, =, solvedCols, ;, for, (, int, j, =, 0, ;, j, <]
[j, ], ;, }, int, nSing, =, solvedCols, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;]
[], ;, }, int, nSing, =, solvedCols, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++]
[=, solvedCols, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, if, (]
[=, solvedCols, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, if, (]
[solvedCols, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, if, (, (]
[solvedCols, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, if, (, (]
[solvedCols, ;, for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, if, (, (]
[for, (, int, j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, if, (, (, lmDiag, []
[j, =, 0, ;, j, <, solvedCols, ;, ++, j, ), {, if, (, (, lmDiag, [, j, ], ==]
[;, j, <, solvedCols, ;, ++, j, ), {, if, (, (, lmDiag, [, j, ], ==, 0, ), &&]
[j, <, solvedCols, ;, ++, j, ), {, if, (, (, lmDiag, [, j, ], ==, 0, ), &&, (]
[j, <, solvedCols, ;, ++, j, ), {, if, (, (, lmDiag, [, j, ], ==, 0, ), &&, (]
[solvedCols, ;, ++, j, ), {, if, (, (, lmDiag, [, j, ], ==, 0, ), &&, (, nSing, ==]
[), {, if, (, (, lmDiag, [, j, ], ==, 0, ), &&, (, nSing, ==, solvedCols, ), ), {]
[if, (, (, lmDiag, [, j, ], ==, 0, ), &&, (, nSing, ==, solvedCols, ), ), {, nSing, =]
[j, ], ==, 0, ), &&, (, nSing, ==, solvedCols, ), ), {, nSing, =, j, ;, }, if, (]
[j, ], ==, 0, ), &&, (, nSing, ==, solvedCols, ), ), {, nSing, =, j, ;, }, if, (]
[==, 0, ), &&, (, nSing, ==, solvedCols, ), ), {, nSing, =, j, ;, }, if, (, nSing, <]
[&&, (, nSing, ==, solvedCols, ), ), {, nSing, =, j, ;, }, if, (, nSing, <, solvedCols, ), {]
[&&, (, nSing, ==, solvedCols, ), ), {, nSing, =, j, ;, }, if, (, nSing, <, solvedCols, ), {]
[nSing, ==, solvedCols, ), ), {, nSing, =, j, ;, }, if, (, nSing, <, solvedCols, ), {, work, []
[), ), {, nSing, =, j, ;, }, if, (, nSing, <, solvedCols, ), {, work, [, j, ], =]
[;, }, if, (, nSing, <, solvedCols, ), {, work, [, j, ], =, 0, ;, }, }, if, (]
[;, }, if, (, nSing, <, solvedCols, ), {, work, [, j, ], =, 0, ;, }, }, if, (]
[if, (, nSing, <, solvedCols, ), {, work, [, j, ], =, 0, ;, }, }, if, (, nSing, >]
[[, j, ], =, 0, ;, }, }, if, (, nSing, >, 0, ), {, for, (, int, j, =]
[[, j, ], =, 0, ;, }, }, if, (, nSing, >, 0, ), {, for, (, int, j, =]
[], =, 0, ;, }, }, if, (, nSing, >, 0, ), {, for, (, int, j, =, nSing, -]
[0, ;, }, }, if, (, nSing, >, 0, ), {, for, (, int, j, =, nSing, -, 1, ;]
[0, ;, }, }, if, (, nSing, >, 0, ), {, for, (, int, j, =, nSing, -, 1, ;]
[}, }, if, (, nSing, >, 0, ), {, for, (, int, j, =, nSing, -, 1, ;, j, >=]
[if, (, nSing, >, 0, ), {, for, (, int, j, =, nSing, -, 1, ;, j, >=, 0, ;]
[(, nSing, >, 0, ), {, for, (, int, j, =, nSing, -, 1, ;, j, >=, 0, ;, --]
[for, (, int, j, =, nSing, -, 1, ;, j, >=, 0, ;, --, j, ), {, int, pj, =]
[for, (, int, j, =, nSing, -, 1, ;, j, >=, 0, ;, --, j, ), {, int, pj, =]
[int, j, =, nSing, -, 1, ;, j, >=, 0, ;, --, j, ), {, int, pj, =, permutation, []
[;, j, >=, 0, ;, --, j, ), {, int, pj, =, permutation, [, j, ], ;, double, sum, =]
[), {, int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =]
[), {, int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =]
[int, pj, =, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =, j, +]
[=, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =, j, +, 1, ;]
[=, permutation, [, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =, j, +, 1, ;]
[[, j, ], ;, double, sum, =, 0, ;, for, (, int, i, =, j, +, 1, ;, i, <]
[], ;, double, sum, =, 0, ;, for, (, int, i, =, j, +, 1, ;, i, <, nSing, ;]
[;, double, sum, =, 0, ;, for, (, int, i, =, j, +, 1, ;, i, <, nSing, ;, ++]
[=, 0, ;, for, (, int, i, =, j, +, 1, ;, i, <, nSing, ;, ++, i, ), {]
[;, for, (, int, i, =, j, +, 1, ;, i, <, nSing, ;, ++, i, ), {, sum, +=]
[;, for, (, int, i, =, j, +, 1, ;, i, <, nSing, ;, ++, i, ), {, sum, +=]
[;, for, (, int, i, =, j, +, 1, ;, i, <, nSing, ;, ++, i, ), {, sum, +=]
[;, for, (, int, i, =, j, +, 1, ;, i, <, nSing, ;, ++, i, ), {, sum, +=]
[(, int, i, =, j, +, 1, ;, i, <, nSing, ;, ++, i, ), {, sum, +=, weightedJacobian, []
[=, j, +, 1, ;, i, <, nSing, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], []
[1, ;, i, <, nSing, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *]
[1, ;, i, <, nSing, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *]
[i, <, nSing, ;, ++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, work, []
[++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, work, [, i, ], ;, }]
[++, i, ), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, work, [, i, ], ;, }]
[), {, sum, +=, weightedJacobian, [, i, ], [, pj, ], *, work, [, i, ], ;, }, work, []
[+=, weightedJacobian, [, i, ], [, pj, ], *, work, [, i, ], ;, }, work, [, j, ], =]
[+=, weightedJacobian, [, i, ], [, pj, ], *, work, [, i, ], ;, }, work, [, j, ], =]
[weightedJacobian, [, i, ], [, pj, ], *, work, [, i, ], ;, }, work, [, j, ], =, (]
[weightedJacobian, [, i, ], [, pj, ], *, work, [, i, ], ;, }, work, [, j, ], =, (]
[weightedJacobian, [, i, ], [, pj, ], *, work, [, i, ], ;, }, work, [, j, ], =, (]
[i, ], [, pj, ], *, work, [, i, ], ;, }, work, [, j, ], =, (, work, []
[pj, ], *, work, [, i, ], ;, }, work, [, j, ], =, (, work, [, j, ], -]
[work, [, i, ], ;, }, work, [, j, ], =, (, work, [, j, ], -, sum, ), /]
[work, [, i, ], ;, }, work, [, j, ], =, (, work, [, j, ], -, sum, ), /]
[i, ], ;, }, work, [, j, ], =, (, work, [, j, ], -, sum, ), /, lmDiag, []
[work, [, j, ], -, sum, ), /, lmDiag, [, j, ], ;, }, }, for, (, int, j, =]
[j, ], -, sum, ), /, lmDiag, [, j, ], ;, }, }, for, (, int, j, =, 0, ;]
[j, ], -, sum, ), /, lmDiag, [, j, ], ;, }, }, for, (, int, j, =, 0, ;]
[-, sum, ), /, lmDiag, [, j, ], ;, }, }, for, (, int, j, =, 0, ;, j, <]
[-, sum, ), /, lmDiag, [, j, ], ;, }, }, for, (, int, j, =, 0, ;, j, <]
[lmDiag, [, j, ], ;, }, }, for, (, int, j, =, 0, ;, j, <, lmDir, ., length, ;]
[[, j, ], ;, }, }, for, (, int, j, =, 0, ;, j, <, lmDir, ., length, ;, ++]
[;, }, }, for, (, int, j, =, 0, ;, j, <, lmDir, ., length, ;, ++, j, ), {]
[;, }, }, for, (, int, j, =, 0, ;, j, <, lmDir, ., length, ;, ++, j, ), {]
[}, for, (, int, j, =, 0, ;, j, <, lmDir, ., length, ;, ++, j, ), {, lmDir, []
[}, for, (, int, j, =, 0, ;, j, <, lmDir, ., length, ;, ++, j, ), {, lmDir, []
[(, int, j, =, 0, ;, j, <, lmDir, ., length, ;, ++, j, ), {, lmDir, [, permutation, []
[0, ;, j, <, lmDir, ., length, ;, ++, j, ), {, lmDir, [, permutation, [, j, ], ], =]
[0, ;, j, <, lmDir, ., length, ;, ++, j, ), {, lmDir, [, permutation, [, j, ], ], =]
[j, <, lmDir, ., length, ;, ++, j, ), {, lmDir, [, permutation, [, j, ], ], =, work, []
[], ], =, work, [, j, ], ;, }, }, private, void, qrDecomposition, (, RealMatrix, jacobian, ), throws, ConvergenceException, {]
[=, work, [, j, ], ;, }, }, private, void, qrDecomposition, (, RealMatrix, jacobian, ), throws, ConvergenceException, {, weightedJacobian, =]
[=, work, [, j, ], ;, }, }, private, void, qrDecomposition, (, RealMatrix, jacobian, ), throws, ConvergenceException, {, weightedJacobian, =]
[=, work, [, j, ], ;, }, }, private, void, qrDecomposition, (, RealMatrix, jacobian, ), throws, ConvergenceException, {, weightedJacobian, =]
[], ;, }, }, private, void, qrDecomposition, (, RealMatrix, jacobian, ), throws, ConvergenceException, {, weightedJacobian, =, jacobian, ., scalarMultiply, (]
[;, }, }, private, void, qrDecomposition, (, RealMatrix, jacobian, ), throws, ConvergenceException, {, weightedJacobian, =, jacobian, ., scalarMultiply, (, -]
[ConvergenceException, {, weightedJacobian, =, jacobian, ., scalarMultiply, (, -, 1, ), ., getData, (, ), ;, final, int, nR, =]
[ConvergenceException, {, weightedJacobian, =, jacobian, ., scalarMultiply, (, -, 1, ), ., getData, (, ), ;, final, int, nR, =]
[-, 1, ), ., getData, (, ), ;, final, int, nR, =, weightedJacobian, ., length, ;, final, int, nC, =]
[-, 1, ), ., getData, (, ), ;, final, int, nR, =, weightedJacobian, ., length, ;, final, int, nC, =]
[-, 1, ), ., getData, (, ), ;, final, int, nR, =, weightedJacobian, ., length, ;, final, int, nC, =]
[), ., getData, (, ), ;, final, int, nR, =, weightedJacobian, ., length, ;, final, int, nC, =, weightedJacobian, []
[weightedJacobian, ., length, ;, final, int, nC, =, weightedJacobian, [, 0, ], ., length, ;, for, (, int, k, =]
[length, ;, final, int, nC, =, weightedJacobian, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;]
[length, ;, final, int, nC, =, weightedJacobian, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;]
[final, int, nC, =, weightedJacobian, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;, k, <]
[nC, =, weightedJacobian, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;, k, <, nC, ;]
[=, weightedJacobian, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++]
[0, ], ., length, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {]
[0, ], ., length, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {]
[., length, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, permutation, []
[for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, permutation, [, k, ], =]
[0, ;, k, <, nC, ;, ++, k, ), {, permutation, [, k, ], =, k, ;, double, norm2, =]
[k, ), {, permutation, [, k, ], =, k, ;, double, norm2, =, 0, ;, for, (, int, i, =]
[{, permutation, [, k, ], =, k, ;, double, norm2, =, 0, ;, for, (, int, i, =, 0, ;]
[{, permutation, [, k, ], =, k, ;, double, norm2, =, 0, ;, for, (, int, i, =, 0, ;]
[[, k, ], =, k, ;, double, norm2, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[], =, k, ;, double, norm2, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nR, ;]
[=, k, ;, double, norm2, =, 0, ;, for, (, int, i, =, 0, ;, i, <, nR, ;, ++]
[0, ;, for, (, int, i, =, 0, ;, i, <, nR, ;, ++, i, ), {, double, akk, =]
[0, ;, for, (, int, i, =, 0, ;, i, <, nR, ;, ++, i, ), {, double, akk, =]
[0, ;, for, (, int, i, =, 0, ;, i, <, nR, ;, ++, i, ), {, double, akk, =]
[for, (, int, i, =, 0, ;, i, <, nR, ;, ++, i, ), {, double, akk, =, weightedJacobian, []
[i, =, 0, ;, i, <, nR, ;, ++, i, ), {, double, akk, =, weightedJacobian, [, i, ], []
[;, i, <, nR, ;, ++, i, ), {, double, akk, =, weightedJacobian, [, i, ], [, k, ], ;]
[<, nR, ;, ++, i, ), {, double, akk, =, weightedJacobian, [, i, ], [, k, ], ;, norm2, +=]
[<, nR, ;, ++, i, ), {, double, akk, =, weightedJacobian, [, i, ], [, k, ], ;, norm2, +=]
[;, ++, i, ), {, double, akk, =, weightedJacobian, [, i, ], [, k, ], ;, norm2, +=, akk, *]
[), {, double, akk, =, weightedJacobian, [, i, ], [, k, ], ;, norm2, +=, akk, *, akk, ;, }]
[), {, double, akk, =, weightedJacobian, [, i, ], [, k, ], ;, norm2, +=, akk, *, akk, ;, }]
[double, akk, =, weightedJacobian, [, i, ], [, k, ], ;, norm2, +=, akk, *, akk, ;, }, jacNorm, []
[weightedJacobian, [, i, ], [, k, ], ;, norm2, +=, akk, *, akk, ;, }, jacNorm, [, k, ], =]
[weightedJacobian, [, i, ], [, k, ], ;, norm2, +=, akk, *, akk, ;, }, jacNorm, [, k, ], =]
[[, k, ], ;, norm2, +=, akk, *, akk, ;, }, jacNorm, [, k, ], =, FastMath, ., sqrt, (]
[;, }, jacNorm, [, k, ], =, FastMath, ., sqrt, (, norm2, ), ;, }, for, (, int, k, =]
[jacNorm, [, k, ], =, FastMath, ., sqrt, (, norm2, ), ;, }, for, (, int, k, =, 0, ;]
[jacNorm, [, k, ], =, FastMath, ., sqrt, (, norm2, ), ;, }, for, (, int, k, =, 0, ;]
[k, ], =, FastMath, ., sqrt, (, norm2, ), ;, }, for, (, int, k, =, 0, ;, k, <]
[=, FastMath, ., sqrt, (, norm2, ), ;, }, for, (, int, k, =, 0, ;, k, <, nC, ;]
[FastMath, ., sqrt, (, norm2, ), ;, }, for, (, int, k, =, 0, ;, k, <, nC, ;, ++]
[;, }, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, int, nextColumn, =]
[}, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, int, nextColumn, =, -]
[=, 0, ;, k, <, nC, ;, ++, k, ), {, int, nextColumn, =, -, 1, ;, double, ak2, =]
[=, 0, ;, k, <, nC, ;, ++, k, ), {, int, nextColumn, =, -, 1, ;, double, ak2, =]
[), {, int, nextColumn, =, -, 1, ;, double, ak2, =, Double, ., NEGATIVE_INFINITY, ;, for, (, int, i, =]
[int, nextColumn, =, -, 1, ;, double, ak2, =, Double, ., NEGATIVE_INFINITY, ;, for, (, int, i, =, k, ;]
[int, nextColumn, =, -, 1, ;, double, ak2, =, Double, ., NEGATIVE_INFINITY, ;, for, (, int, i, =, k, ;]
[=, -, 1, ;, double, ak2, =, Double, ., NEGATIVE_INFINITY, ;, for, (, int, i, =, k, ;, i, <]
[1, ;, double, ak2, =, Double, ., NEGATIVE_INFINITY, ;, for, (, int, i, =, k, ;, i, <, nC, ;]
[;, double, ak2, =, Double, ., NEGATIVE_INFINITY, ;, for, (, int, i, =, k, ;, i, <, nC, ;, ++]
[NEGATIVE_INFINITY, ;, for, (, int, i, =, k, ;, i, <, nC, ;, ++, i, ), {, double, norm2, =]
[k, ;, i, <, nC, ;, ++, i, ), {, double, norm2, =, 0, ;, for, (, int, j, =]
[i, <, nC, ;, ++, i, ), {, double, norm2, =, 0, ;, for, (, int, j, =, k, ;]
[i, <, nC, ;, ++, i, ), {, double, norm2, =, 0, ;, for, (, int, j, =, k, ;]
[nC, ;, ++, i, ), {, double, norm2, =, 0, ;, for, (, int, j, =, k, ;, j, <]
[++, i, ), {, double, norm2, =, 0, ;, for, (, int, j, =, k, ;, j, <, nR, ;]
[i, ), {, double, norm2, =, 0, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++]
[0, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, ), {, double, aki, =]
[0, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, ), {, double, aki, =]
[0, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, ), {, double, aki, =]
[for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, ), {, double, aki, =, weightedJacobian, []
[j, =, k, ;, j, <, nR, ;, ++, j, ), {, double, aki, =, weightedJacobian, [, j, ], []
[j, =, k, ;, j, <, nR, ;, ++, j, ), {, double, aki, =, weightedJacobian, [, j, ], []
[k, ;, j, <, nR, ;, ++, j, ), {, double, aki, =, weightedJacobian, [, j, ], [, permutation, []
[nR, ;, ++, j, ), {, double, aki, =, weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;]
[++, j, ), {, double, aki, =, weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;, norm2, +=]
[++, j, ), {, double, aki, =, weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;, norm2, +=]
[), {, double, aki, =, weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;, norm2, +=, aki, *]
[weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;, norm2, +=, aki, *, aki, ;, }, if, (]
[weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;, norm2, +=, aki, *, aki, ;, }, if, (]
[weightedJacobian, [, j, ], [, permutation, [, i, ], ], ;, norm2, +=, aki, *, aki, ;, }, if, (]
[[, permutation, [, i, ], ], ;, norm2, +=, aki, *, aki, ;, }, if, (, Double, ., isInfinite, (]
[i, ], ], ;, norm2, +=, aki, *, aki, ;, }, if, (, Double, ., isInfinite, (, norm2, ), ||]
[i, ], ], ;, norm2, +=, aki, *, aki, ;, }, if, (, Double, ., isInfinite, (, norm2, ), ||]
[norm2, +=, aki, *, aki, ;, }, if, (, Double, ., isInfinite, (, norm2, ), ||, Double, ., isNaN, (]
[;, }, if, (, Double, ., isInfinite, (, norm2, ), ||, Double, ., isNaN, (, norm2, ), ), {, throw]
[(, Double, ., isInfinite, (, norm2, ), ||, Double, ., isNaN, (, norm2, ), ), {, throw, new, ConvergenceException, (]
[(, Double, ., isInfinite, (, norm2, ), ||, Double, ., isNaN, (, norm2, ), ), {, throw, new, ConvergenceException, (]
[(, norm2, ), ||, Double, ., isNaN, (, norm2, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN, ,]
[), ||, Double, ., isNaN, (, norm2, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN, ,, nR, ,]
[norm2, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN, ,, nR, ,, nC, ), ;, }, if, (]
[norm2, ), ), {, throw, new, ConvergenceException, (, LocalizedFormats, ., UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN, ,, nR, ,, nC, ), ;, }, if, (]
[), {, throw, new, ConvergenceException, (, LocalizedFormats, ., UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN, ,, nR, ,, nC, ), ;, }, if, (, norm2, >]
[new, ConvergenceException, (, LocalizedFormats, ., UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN, ,, nR, ,, nC, ), ;, }, if, (, norm2, >, ak2, ), {]
[(, LocalizedFormats, ., UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN, ,, nR, ,, nC, ), ;, }, if, (, norm2, >, ak2, ), {, nextColumn, =]
[., UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN, ,, nR, ,, nC, ), ;, }, if, (, norm2, >, ak2, ), {, nextColumn, =, i, ;]
[,, nR, ,, nC, ), ;, }, if, (, norm2, >, ak2, ), {, nextColumn, =, i, ;, ak2, =]
[}, if, (, norm2, >, ak2, ), {, nextColumn, =, i, ;, ak2, =, norm2, ;, }, }, if, (]
[}, if, (, norm2, >, ak2, ), {, nextColumn, =, i, ;, ak2, =, norm2, ;, }, }, if, (]
[(, norm2, >, ak2, ), {, nextColumn, =, i, ;, ak2, =, norm2, ;, }, }, if, (, ak2, <=]
[ak2, ), {, nextColumn, =, i, ;, ak2, =, norm2, ;, }, }, if, (, ak2, <=, qrRankingThreshold, ), {]
[{, nextColumn, =, i, ;, ak2, =, norm2, ;, }, }, if, (, ak2, <=, qrRankingThreshold, ), {, rank, =]
[;, }, }, if, (, ak2, <=, qrRankingThreshold, ), {, rank, =, k, ;, return, ;, }, int, pk, =]
[;, }, }, if, (, ak2, <=, qrRankingThreshold, ), {, rank, =, k, ;, return, ;, }, int, pk, =]
[}, if, (, ak2, <=, qrRankingThreshold, ), {, rank, =, k, ;, return, ;, }, int, pk, =, permutation, []
[ak2, <=, qrRankingThreshold, ), {, rank, =, k, ;, return, ;, }, int, pk, =, permutation, [, nextColumn, ], ;]
[ak2, <=, qrRankingThreshold, ), {, rank, =, k, ;, return, ;, }, int, pk, =, permutation, [, nextColumn, ], ;]
[qrRankingThreshold, ), {, rank, =, k, ;, return, ;, }, int, pk, =, permutation, [, nextColumn, ], ;, permutation, []
[rank, =, k, ;, return, ;, }, int, pk, =, permutation, [, nextColumn, ], ;, permutation, [, nextColumn, ], =]
[rank, =, k, ;, return, ;, }, int, pk, =, permutation, [, nextColumn, ], ;, permutation, [, nextColumn, ], =]
[k, ;, return, ;, }, int, pk, =, permutation, [, nextColumn, ], ;, permutation, [, nextColumn, ], =, permutation, []
[;, }, int, pk, =, permutation, [, nextColumn, ], ;, permutation, [, nextColumn, ], =, permutation, [, k, ], ;]
[;, }, int, pk, =, permutation, [, nextColumn, ], ;, permutation, [, nextColumn, ], =, permutation, [, k, ], ;]
[int, pk, =, permutation, [, nextColumn, ], ;, permutation, [, nextColumn, ], =, permutation, [, k, ], ;, permutation, []
[permutation, [, nextColumn, ], ;, permutation, [, nextColumn, ], =, permutation, [, k, ], ;, permutation, [, k, ], =]
[permutation, [, nextColumn, ], =, permutation, [, k, ], ;, permutation, [, k, ], =, pk, ;, double, akk, =]
[permutation, [, nextColumn, ], =, permutation, [, k, ], ;, permutation, [, k, ], =, pk, ;, double, akk, =]
[permutation, [, nextColumn, ], =, permutation, [, k, ], ;, permutation, [, k, ], =, pk, ;, double, akk, =]
[nextColumn, ], =, permutation, [, k, ], ;, permutation, [, k, ], =, pk, ;, double, akk, =, weightedJacobian, []
[permutation, [, k, ], ;, permutation, [, k, ], =, pk, ;, double, akk, =, weightedJacobian, [, k, ], []
[[, k, ], =, pk, ;, double, akk, =, weightedJacobian, [, k, ], [, pk, ], ;, double, alpha, =]
[[, k, ], =, pk, ;, double, akk, =, weightedJacobian, [, k, ], [, pk, ], ;, double, alpha, =]
[k, ], =, pk, ;, double, akk, =, weightedJacobian, [, k, ], [, pk, ], ;, double, alpha, =, (]
[k, ], =, pk, ;, double, akk, =, weightedJacobian, [, k, ], [, pk, ], ;, double, alpha, =, (]
[=, pk, ;, double, akk, =, weightedJacobian, [, k, ], [, pk, ], ;, double, alpha, =, (, akk, >]
[double, akk, =, weightedJacobian, [, k, ], [, pk, ], ;, double, alpha, =, (, akk, >, 0, ), ?]
[akk, =, weightedJacobian, [, k, ], [, pk, ], ;, double, alpha, =, (, akk, >, 0, ), ?, -]
[akk, =, weightedJacobian, [, k, ], [, pk, ], ;, double, alpha, =, (, akk, >, 0, ), ?, -]
[k, ], [, pk, ], ;, double, alpha, =, (, akk, >, 0, ), ?, -, FastMath, ., sqrt, (]
[pk, ], ;, double, alpha, =, (, akk, >, 0, ), ?, -, FastMath, ., sqrt, (, ak2, ), :]
[pk, ], ;, double, alpha, =, (, akk, >, 0, ), ?, -, FastMath, ., sqrt, (, ak2, ), :]
[alpha, =, (, akk, >, 0, ), ?, -, FastMath, ., sqrt, (, ak2, ), :, FastMath, ., sqrt, (]
[), ?, -, FastMath, ., sqrt, (, ak2, ), :, FastMath, ., sqrt, (, ak2, ), ;, double, betak, =]
[), ?, -, FastMath, ., sqrt, (, ak2, ), :, FastMath, ., sqrt, (, ak2, ), ;, double, betak, =]
[-, FastMath, ., sqrt, (, ak2, ), :, FastMath, ., sqrt, (, ak2, ), ;, double, betak, =, 1.0, /]
[FastMath, ., sqrt, (, ak2, ), :, FastMath, ., sqrt, (, ak2, ), ;, double, betak, =, 1.0, /, (]
[FastMath, ., sqrt, (, ak2, ), :, FastMath, ., sqrt, (, ak2, ), ;, double, betak, =, 1.0, /, (]
[sqrt, (, ak2, ), :, FastMath, ., sqrt, (, ak2, ), ;, double, betak, =, 1.0, /, (, ak2, -]
[sqrt, (, ak2, ), :, FastMath, ., sqrt, (, ak2, ), ;, double, betak, =, 1.0, /, (, ak2, -]
[ak2, ), :, FastMath, ., sqrt, (, ak2, ), ;, double, betak, =, 1.0, /, (, ak2, -, akk, *]
[FastMath, ., sqrt, (, ak2, ), ;, double, betak, =, 1.0, /, (, ak2, -, akk, *, alpha, ), ;]
[FastMath, ., sqrt, (, ak2, ), ;, double, betak, =, 1.0, /, (, ak2, -, akk, *, alpha, ), ;]
[sqrt, (, ak2, ), ;, double, betak, =, 1.0, /, (, ak2, -, akk, *, alpha, ), ;, beta, []
[), ;, double, betak, =, 1.0, /, (, ak2, -, akk, *, alpha, ), ;, beta, [, pk, ], =]
[double, betak, =, 1.0, /, (, ak2, -, akk, *, alpha, ), ;, beta, [, pk, ], =, betak, ;]
[double, betak, =, 1.0, /, (, ak2, -, akk, *, alpha, ), ;, beta, [, pk, ], =, betak, ;]
[=, 1.0, /, (, ak2, -, akk, *, alpha, ), ;, beta, [, pk, ], =, betak, ;, diagR, []
[(, ak2, -, akk, *, alpha, ), ;, beta, [, pk, ], =, betak, ;, diagR, [, pk, ], =]
[-, akk, *, alpha, ), ;, beta, [, pk, ], =, betak, ;, diagR, [, pk, ], =, alpha, ;]
[-, akk, *, alpha, ), ;, beta, [, pk, ], =, betak, ;, diagR, [, pk, ], =, alpha, ;]
[-, akk, *, alpha, ), ;, beta, [, pk, ], =, betak, ;, diagR, [, pk, ], =, alpha, ;]
[*, alpha, ), ;, beta, [, pk, ], =, betak, ;, diagR, [, pk, ], =, alpha, ;, weightedJacobian, []
[;, beta, [, pk, ], =, betak, ;, diagR, [, pk, ], =, alpha, ;, weightedJacobian, [, k, ], []
[pk, ], =, betak, ;, diagR, [, pk, ], =, alpha, ;, weightedJacobian, [, k, ], [, pk, ], -=]
[pk, ], =, alpha, ;, weightedJacobian, [, k, ], [, pk, ], -=, alpha, ;, for, (, int, dk, =]
[pk, ], =, alpha, ;, weightedJacobian, [, k, ], [, pk, ], -=, alpha, ;, for, (, int, dk, =]
[pk, ], =, alpha, ;, weightedJacobian, [, k, ], [, pk, ], -=, alpha, ;, for, (, int, dk, =]
[=, alpha, ;, weightedJacobian, [, k, ], [, pk, ], -=, alpha, ;, for, (, int, dk, =, nC, -]
[;, weightedJacobian, [, k, ], [, pk, ], -=, alpha, ;, for, (, int, dk, =, nC, -, 1, -]
[[, k, ], [, pk, ], -=, alpha, ;, for, (, int, dk, =, nC, -, 1, -, k, ;]
[[, k, ], [, pk, ], -=, alpha, ;, for, (, int, dk, =, nC, -, 1, -, k, ;]
[], [, pk, ], -=, alpha, ;, for, (, int, dk, =, nC, -, 1, -, k, ;, dk, >]
[pk, ], -=, alpha, ;, for, (, int, dk, =, nC, -, 1, -, k, ;, dk, >, 0, ;]
[], -=, alpha, ;, for, (, int, dk, =, nC, -, 1, -, k, ;, dk, >, 0, ;, --]
[int, dk, =, nC, -, 1, -, k, ;, dk, >, 0, ;, --, dk, ), {, double, gamma, =]
[k, ;, dk, >, 0, ;, --, dk, ), {, double, gamma, =, 0, ;, for, (, int, j, =]
[dk, >, 0, ;, --, dk, ), {, double, gamma, =, 0, ;, for, (, int, j, =, k, ;]
[dk, >, 0, ;, --, dk, ), {, double, gamma, =, 0, ;, for, (, int, j, =, k, ;]
[0, ;, --, dk, ), {, double, gamma, =, 0, ;, for, (, int, j, =, k, ;, j, <]
[--, dk, ), {, double, gamma, =, 0, ;, for, (, int, j, =, k, ;, j, <, nR, ;]
[dk, ), {, double, gamma, =, 0, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++]
[double, gamma, =, 0, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, ), {]
[=, 0, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, ), {, gamma, +=]
[=, 0, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, ), {, gamma, +=]
[=, 0, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, ), {, gamma, +=]
[=, 0, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, ), {, gamma, +=]
[;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, ), {, gamma, +=, weightedJacobian, []
[int, j, =, k, ;, j, <, nR, ;, ++, j, ), {, gamma, +=, weightedJacobian, [, j, ], []
[k, ;, j, <, nR, ;, ++, j, ), {, gamma, +=, weightedJacobian, [, j, ], [, pk, ], *]
[k, ;, j, <, nR, ;, ++, j, ), {, gamma, +=, weightedJacobian, [, j, ], [, pk, ], *]
[k, ;, j, <, nR, ;, ++, j, ), {, gamma, +=, weightedJacobian, [, j, ], [, pk, ], *]
[j, <, nR, ;, ++, j, ), {, gamma, +=, weightedJacobian, [, j, ], [, pk, ], *, weightedJacobian, []
[;, ++, j, ), {, gamma, +=, weightedJacobian, [, j, ], [, pk, ], *, weightedJacobian, [, j, ], []
[;, ++, j, ), {, gamma, +=, weightedJacobian, [, j, ], [, pk, ], *, weightedJacobian, [, j, ], []
[j, ), {, gamma, +=, weightedJacobian, [, j, ], [, pk, ], *, weightedJacobian, [, j, ], [, permutation, []
[j, ), {, gamma, +=, weightedJacobian, [, j, ], [, pk, ], *, weightedJacobian, [, j, ], [, permutation, []
[{, gamma, +=, weightedJacobian, [, j, ], [, pk, ], *, weightedJacobian, [, j, ], [, permutation, [, k, +]
[j, ], [, pk, ], *, weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ], ;, }]
[[, pk, ], *, weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ], ;, }, gamma, *=]
[], [, permutation, [, k, +, dk, ], ], ;, }, gamma, *=, betak, ;, for, (, int, j, =]
[permutation, [, k, +, dk, ], ], ;, }, gamma, *=, betak, ;, for, (, int, j, =, k, ;]
[permutation, [, k, +, dk, ], ], ;, }, gamma, *=, betak, ;, for, (, int, j, =, k, ;]
[k, +, dk, ], ], ;, }, gamma, *=, betak, ;, for, (, int, j, =, k, ;, j, <]
[dk, ], ], ;, }, gamma, *=, betak, ;, for, (, int, j, =, k, ;, j, <, nR, ;]
[], ], ;, }, gamma, *=, betak, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++]
[}, gamma, *=, betak, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, ), {]
[}, gamma, *=, betak, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, ), {]
[}, gamma, *=, betak, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, ), {]
[*=, betak, ;, for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, ), {, weightedJacobian, []
[for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, ), {, weightedJacobian, [, j, ], []
[for, (, int, j, =, k, ;, j, <, nR, ;, ++, j, ), {, weightedJacobian, [, j, ], []
[int, j, =, k, ;, j, <, nR, ;, ++, j, ), {, weightedJacobian, [, j, ], [, permutation, []
[int, j, =, k, ;, j, <, nR, ;, ++, j, ), {, weightedJacobian, [, j, ], [, permutation, []
[=, k, ;, j, <, nR, ;, ++, j, ), {, weightedJacobian, [, j, ], [, permutation, [, k, +]
[<, nR, ;, ++, j, ), {, weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ], -=]
[<, nR, ;, ++, j, ), {, weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ], -=]
[;, ++, j, ), {, weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ], -=, gamma, *]
[;, ++, j, ), {, weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ], -=, gamma, *]
[;, ++, j, ), {, weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ], -=, gamma, *]
[j, ), {, weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ], -=, gamma, *, weightedJacobian, []
[weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ], -=, gamma, *, weightedJacobian, [, j, ], []
[[, k, +, dk, ], ], -=, gamma, *, weightedJacobian, [, j, ], [, pk, ], ;, }, }, }]
[+, dk, ], ], -=, gamma, *, weightedJacobian, [, j, ], [, pk, ], ;, }, }, }, rank, =]
[}, rank, =, solvedCols, ;, }, private, void, qTy, (, double, [, ], y, ), {, final, int, nR, =]
[}, rank, =, solvedCols, ;, }, private, void, qTy, (, double, [, ], y, ), {, final, int, nR, =]
[qTy, (, double, [, ], y, ), {, final, int, nR, =, weightedJacobian, ., length, ;, final, int, nC, =]
[qTy, (, double, [, ], y, ), {, final, int, nR, =, weightedJacobian, ., length, ;, final, int, nC, =]
[qTy, (, double, [, ], y, ), {, final, int, nR, =, weightedJacobian, ., length, ;, final, int, nC, =]
[double, [, ], y, ), {, final, int, nR, =, weightedJacobian, ., length, ;, final, int, nC, =, weightedJacobian, []
[weightedJacobian, ., length, ;, final, int, nC, =, weightedJacobian, [, 0, ], ., length, ;, for, (, int, k, =]
[length, ;, final, int, nC, =, weightedJacobian, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;]
[length, ;, final, int, nC, =, weightedJacobian, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;]
[final, int, nC, =, weightedJacobian, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;, k, <]
[nC, =, weightedJacobian, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;, k, <, nC, ;]
[=, weightedJacobian, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++]
[length, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, int, pk, =]
[length, ;, for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, int, pk, =]
[for, (, int, k, =, 0, ;, k, <, nC, ;, ++, k, ), {, int, pk, =, permutation, []
[;, k, <, nC, ;, ++, k, ), {, int, pk, =, permutation, [, k, ], ;, double, gamma, =]
[), {, int, pk, =, permutation, [, k, ], ;, double, gamma, =, 0, ;, for, (, int, i, =]
[int, pk, =, permutation, [, k, ], ;, double, gamma, =, 0, ;, for, (, int, i, =, k, ;]
[int, pk, =, permutation, [, k, ], ;, double, gamma, =, 0, ;, for, (, int, i, =, k, ;]
[=, permutation, [, k, ], ;, double, gamma, =, 0, ;, for, (, int, i, =, k, ;, i, <]
[[, k, ], ;, double, gamma, =, 0, ;, for, (, int, i, =, k, ;, i, <, nR, ;]
[k, ], ;, double, gamma, =, 0, ;, for, (, int, i, =, k, ;, i, <, nR, ;, ++]
[double, gamma, =, 0, ;, for, (, int, i, =, k, ;, i, <, nR, ;, ++, i, ), {]
[=, 0, ;, for, (, int, i, =, k, ;, i, <, nR, ;, ++, i, ), {, gamma, +=]
[=, 0, ;, for, (, int, i, =, k, ;, i, <, nR, ;, ++, i, ), {, gamma, +=]
[=, 0, ;, for, (, int, i, =, k, ;, i, <, nR, ;, ++, i, ), {, gamma, +=]
[=, 0, ;, for, (, int, i, =, k, ;, i, <, nR, ;, ++, i, ), {, gamma, +=]
[;, for, (, int, i, =, k, ;, i, <, nR, ;, ++, i, ), {, gamma, +=, weightedJacobian, []
[int, i, =, k, ;, i, <, nR, ;, ++, i, ), {, gamma, +=, weightedJacobian, [, i, ], []
[k, ;, i, <, nR, ;, ++, i, ), {, gamma, +=, weightedJacobian, [, i, ], [, pk, ], *]
[k, ;, i, <, nR, ;, ++, i, ), {, gamma, +=, weightedJacobian, [, i, ], [, pk, ], *]
[i, <, nR, ;, ++, i, ), {, gamma, +=, weightedJacobian, [, i, ], [, pk, ], *, y, []
[++, i, ), {, gamma, +=, weightedJacobian, [, i, ], [, pk, ], *, y, [, i, ], ;, }]
[), {, gamma, +=, weightedJacobian, [, i, ], [, pk, ], *, y, [, i, ], ;, }, gamma, *=]
[), {, gamma, +=, weightedJacobian, [, i, ], [, pk, ], *, y, [, i, ], ;, }, gamma, *=]
[gamma, +=, weightedJacobian, [, i, ], [, pk, ], *, y, [, i, ], ;, }, gamma, *=, beta, []
[], *, y, [, i, ], ;, }, gamma, *=, beta, [, pk, ], ;, for, (, int, i, =]
[y, [, i, ], ;, }, gamma, *=, beta, [, pk, ], ;, for, (, int, i, =, k, ;]
[y, [, i, ], ;, }, gamma, *=, beta, [, pk, ], ;, for, (, int, i, =, k, ;]
[i, ], ;, }, gamma, *=, beta, [, pk, ], ;, for, (, int, i, =, k, ;, i, <]
[;, }, gamma, *=, beta, [, pk, ], ;, for, (, int, i, =, k, ;, i, <, nR, ;]
[}, gamma, *=, beta, [, pk, ], ;, for, (, int, i, =, k, ;, i, <, nR, ;, ++]
[beta, [, pk, ], ;, for, (, int, i, =, k, ;, i, <, nR, ;, ++, i, ), {]
[beta, [, pk, ], ;, for, (, int, i, =, k, ;, i, <, nR, ;, ++, i, ), {]
[pk, ], ;, for, (, int, i, =, k, ;, i, <, nR, ;, ++, i, ), {, y, []
[for, (, int, i, =, k, ;, i, <, nR, ;, ++, i, ), {, y, [, i, ], -=]
[for, (, int, i, =, k, ;, i, <, nR, ;, ++, i, ), {, y, [, i, ], -=]
[int, i, =, k, ;, i, <, nR, ;, ++, i, ), {, y, [, i, ], -=, gamma, *]
[int, i, =, k, ;, i, <, nR, ;, ++, i, ), {, y, [, i, ], -=, gamma, *]
[int, i, =, k, ;, i, <, nR, ;, ++, i, ), {, y, [, i, ], -=, gamma, *]
[=, k, ;, i, <, nR, ;, ++, i, ), {, y, [, i, ], -=, gamma, *, weightedJacobian, []
[i, <, nR, ;, ++, i, ), {, y, [, i, ], -=, gamma, *, weightedJacobian, [, i, ], []
