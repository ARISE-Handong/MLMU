[;, static, final, DiagnosticType, NAMESPACE_REDEFINED_WARNING, =, DiagnosticType, ., warning, (, "JSC_NAMESPACE_REDEFINED", ,, "namespace {0} should not be redefined", ), ;, static, final, DiagnosticType, UNSAFE_THIS, =]
[., warning, (, "JSC_UNSAFE_NAMESPACE", ,, "incomplete alias created for namespace {0}", ), ;, static, final, DiagnosticType, NAMESPACE_REDEFINED_WARNING, =, DiagnosticType, ., warning, (, "JSC_NAMESPACE_REDEFINED", ,, "namespace {0} should not be redefined"]
[,, "incomplete alias created for namespace {0}", ), ;, static, final, DiagnosticType, NAMESPACE_REDEFINED_WARNING, =, DiagnosticType, ., warning, (, "JSC_NAMESPACE_REDEFINED", ,, "namespace {0} should not be redefined", ), ;, static, final]
[), ;, static, final, DiagnosticType, NAMESPACE_REDEFINED_WARNING, =, DiagnosticType, ., warning, (, "JSC_NAMESPACE_REDEFINED", ,, "namespace {0} should not be redefined", ), ;, static, final, DiagnosticType, UNSAFE_THIS]
[;, static, final, DiagnosticType, UNSAFE_THIS, =, DiagnosticType, ., warning, (, "JSC_UNSAFE_THIS", ,, "dangerous use of 'this' in static method {0}", ), ;, private, AbstractCompiler, compiler, ;, private]
[., warning, (, "JSC_NAMESPACE_REDEFINED", ,, "namespace {0} should not be redefined", ), ;, static, final, DiagnosticType, UNSAFE_THIS, =, DiagnosticType, ., warning, (, "JSC_UNSAFE_THIS", ,, "dangerous use of 'this' in static method {0}"]
[,, "namespace {0} should not be redefined", ), ;, static, final, DiagnosticType, UNSAFE_THIS, =, DiagnosticType, ., warning, (, "JSC_UNSAFE_THIS", ,, "dangerous use of 'this' in static method {0}", ), ;, private, AbstractCompiler]
[), ;, static, final, DiagnosticType, UNSAFE_THIS, =, DiagnosticType, ., warning, (, "JSC_UNSAFE_THIS", ,, "dangerous use of 'this' in static method {0}", ), ;, private, AbstractCompiler, compiler, ;]
[;, private, AbstractCompiler, compiler, ;, private, List, <, Name, >, globalNames, ;, private, Map, <, String, ,, Name, >, nameMap]
[., warning, (, "JSC_UNSAFE_THIS", ,, "dangerous use of 'this' in static method {0}", ), ;, private, AbstractCompiler, compiler, ;, private, List, <, Name, >, globalNames, ;, private]
[,, "dangerous use of 'this' in static method {0}", ), ;, private, AbstractCompiler, compiler, ;, private, List, <, Name, >, globalNames, ;, private, Map, <, String, ,]
[), ;, private, AbstractCompiler, compiler, ;, private, List, <, Name, >, globalNames, ;, private, Map, <, String, ,, Name, >]
[=, compiler, ;, this, ., collapsePropertiesOnExternTypes, =, collapsePropertiesOnExternTypes, ;, this, ., inlineAliases, =, inlineAliases, ;, }, @, Override, public, void]
[., compiler, =, compiler, ;, this, ., collapsePropertiesOnExternTypes, =, collapsePropertiesOnExternTypes, ;, this, ., inlineAliases, =, inlineAliases, ;, }, @, Override]
[;, this, ., collapsePropertiesOnExternTypes, =, collapsePropertiesOnExternTypes, ;, this, ., inlineAliases, =, inlineAliases, ;, }, @, Override, public, void, process, (]
[=, collapsePropertiesOnExternTypes, ;, this, ., inlineAliases, =, inlineAliases, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., collapsePropertiesOnExternTypes, =, collapsePropertiesOnExternTypes, ;, this, ., inlineAliases, =, inlineAliases, ;, }, @, Override, public, void, process, (, Node, externs]
[;, this, ., inlineAliases, =, inlineAliases, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[=, inlineAliases, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, GlobalNamespace, namespace, ;]
[., inlineAliases, =, inlineAliases, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, GlobalNamespace]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, GlobalNamespace, namespace, ;, if, (]
[), {, namespace, =, new, GlobalNamespace, (, compiler, ,, externs, ,, root, ), ;, }, else, {, namespace, =, new]
[=, new, GlobalNamespace, (, compiler, ,, externs, ,, root, ), ;, }, else, {, namespace, =, new, GlobalNamespace, (, compiler]
[;, }, else, {, namespace, =, new, GlobalNamespace, (, compiler, ,, root, ), ;, }, if, (, inlineAliases, ), {]
[,, externs, ,, root, ), ;, }, else, {, namespace, =, new, GlobalNamespace, (, compiler, ,, root, ), ;, }]
[,, root, ), ;, }, else, {, namespace, =, new, GlobalNamespace, (, compiler, ,, root, ), ;, }, if, (]
[), ;, }, else, {, namespace, =, new, GlobalNamespace, (, compiler, ,, root, ), ;, }, if, (, inlineAliases, )]
[=, new, GlobalNamespace, (, compiler, ,, root, ), ;, }, if, (, inlineAliases, ), {, inlineAliases, (, namespace, ), ;]
[;, }, if, (, inlineAliases, ), {, inlineAliases, (, namespace, ), ;, }, nameMap, =, namespace, ., getNameIndex, (, )]
[,, root, ), ;, }, if, (, inlineAliases, ), {, inlineAliases, (, namespace, ), ;, }, nameMap, =, namespace, .]
[), ;, }, if, (, inlineAliases, ), {, inlineAliases, (, namespace, ), ;, }, nameMap, =, namespace, ., getNameIndex, (]
[), {, inlineAliases, (, namespace, ), ;, }, nameMap, =, namespace, ., getNameIndex, (, ), ;, globalNames, =, namespace, .]
[;, }, nameMap, =, namespace, ., getNameIndex, (, ), ;, globalNames, =, namespace, ., getNameForest, (, ), ;, checkNamespaces, (]
[), ;, }, nameMap, =, namespace, ., getNameIndex, (, ), ;, globalNames, =, namespace, ., getNameForest, (, ), ;, checkNamespaces]
[=, namespace, ., getNameIndex, (, ), ;, globalNames, =, namespace, ., getNameForest, (, ), ;, checkNamespaces, (, ), ;, for]
[;, globalNames, =, namespace, ., getNameForest, (, ), ;, checkNamespaces, (, ), ;, for, (, Name, n, :, globalNames, )]
[., getNameIndex, (, ), ;, globalNames, =, namespace, ., getNameForest, (, ), ;, checkNamespaces, (, ), ;, for, (, Name]
[=, namespace, ., getNameForest, (, ), ;, checkNamespaces, (, ), ;, for, (, Name, n, :, globalNames, ), {, flattenReferencesToCollapsibleDescendantNames]
[;, checkNamespaces, (, ), ;, for, (, Name, n, :, globalNames, ), {, flattenReferencesToCollapsibleDescendantNames, (, n, ,, n, ., getBaseName]
[., getNameForest, (, ), ;, checkNamespaces, (, ), ;, for, (, Name, n, :, globalNames, ), {, flattenReferencesToCollapsibleDescendantNames, (, n]
[;, for, (, Name, n, :, globalNames, ), {, flattenReferencesToCollapsibleDescendantNames, (, n, ,, n, ., getBaseName, (, ), ), ;]
[), {, flattenReferencesToCollapsibleDescendantNames, (, n, ,, n, ., getBaseName, (, ), ), ;, }, for, (, Name, n, :, globalNames]
[;, }, for, (, Name, n, :, globalNames, ), {, collapseDeclarationOfNameAndDescendants, (, n, ,, n, ., getBaseName, (, ), )]
[,, n, ., getBaseName, (, ), ), ;, }, for, (, Name, n, :, globalNames, ), {, collapseDeclarationOfNameAndDescendants, (, n]
[), ;, }, for, (, Name, n, :, globalNames, ), {, collapseDeclarationOfNameAndDescendants, (, n, ,, n, ., getBaseName, (, )]
[., getBaseName, (, ), ), ;, }, for, (, Name, n, :, globalNames, ), {, collapseDeclarationOfNameAndDescendants, (, n, ,, n]
[), {, collapseDeclarationOfNameAndDescendants, (, n, ,, n, ., getBaseName, (, ), ), ;, }, }, private, void, inlineAliases, (, GlobalNamespace]
[;, }, }, private, void, inlineAliases, (, GlobalNamespace, namespace, ), {, Deque, <, Name, >, workList, =, new, ArrayDeque, <]
[,, n, ., getBaseName, (, ), ), ;, }, }, private, void, inlineAliases, (, GlobalNamespace, namespace, ), {, Deque, <]
[), ;, }, }, private, void, inlineAliases, (, GlobalNamespace, namespace, ), {, Deque, <, Name, >, workList, =, new, ArrayDeque]
[., getBaseName, (, ), ), ;, }, }, private, void, inlineAliases, (, GlobalNamespace, namespace, ), {, Deque, <, Name, >]
[;, while, (, !, workList, ., isEmpty, (, ), ), {, Name, name, =, workList, ., pop, (, ), ;]
[), ;, while, (, !, workList, ., isEmpty, (, ), ), {, Name, name, =, workList, ., pop, (, )]
[., getNameForest, (, ), ), ;, while, (, !, workList, ., isEmpty, (, ), ), {, Name, name, =, workList]
[), {, Name, name, =, workList, ., pop, (, ), ;, if, (, name, ., type, ==, Name, ., Type]
[), {, Name, name, =, workList, ., pop, (, ), ;, if, (, name, ., type, ==, Name, ., Type]
[., isEmpty, (, ), ), {, Name, name, =, workList, ., pop, (, ), ;, if, (, name, ., type]
[;, if, (, name, ., type, ==, Name, ., Type, ., GET, ||, name, ., type, ==, Name, ., Type]
[., pop, (, ), ;, if, (, name, ., type, ==, Name, ., Type, ., GET, ||, name, ., type]
[), {, continue, ;, }, if, (, name, ., globalSets, ==, 1, &&, name, ., localSets, ==, 0, &&, name]
[||, name, ., type, ==, Name, ., Type, ., SET, ), {, continue, ;, }, if, (, name, ., globalSets]
[==, Name, ., Type, ., GET, ||, name, ., type, ==, Name, ., Type, ., SET, ), {, continue, ;]
[., type, ==, Name, ., Type, ., GET, ||, name, ., type, ==, Name, ., Type, ., SET, ), {]
[||, name, ., type, ==, Name, ., Type, ., SET, ), {, continue, ;, }, if, (, name, ., globalSets]
[., GET, ||, name, ., type, ==, Name, ., Type, ., SET, ), {, continue, ;, }, if, (, name]
[., Type, ., GET, ||, name, ., type, ==, Name, ., Type, ., SET, ), {, continue, ;, }, if]
[), {, continue, ;, }, if, (, name, ., globalSets, ==, 1, &&, name, ., localSets, ==, 0, &&, name]
[==, Name, ., Type, ., SET, ), {, continue, ;, }, if, (, name, ., globalSets, ==, 1, &&, name]
[., type, ==, Name, ., Type, ., SET, ), {, continue, ;, }, if, (, name, ., globalSets, ==, 1]
[), {, continue, ;, }, if, (, name, ., globalSets, ==, 1, &&, name, ., localSets, ==, 0, &&, name]
[., SET, ), {, continue, ;, }, if, (, name, ., globalSets, ==, 1, &&, name, ., localSets, ==, 0]
[., Type, ., SET, ), {, continue, ;, }, if, (, name, ., globalSets, ==, 1, &&, name, ., localSets]
[), {, List, <, Ref, >, refs, =, Lists, ., newArrayList, (, name, ., getRefs, (, ), ), ;, for]
[&&, name, ., aliasingGets, >, 0, ), {, List, <, Ref, >, refs, =, Lists, ., newArrayList, (, name, .]
[&&, name, ., localSets, ==, 0, &&, name, ., aliasingGets, >, 0, ), {, List, <, Ref, >, refs, =]
[==, 1, &&, name, ., localSets, ==, 0, &&, name, ., aliasingGets, >, 0, ), {, List, <, Ref, >]
[., globalSets, ==, 1, &&, name, ., localSets, ==, 0, &&, name, ., aliasingGets, >, 0, ), {, List, <]
[&&, name, ., localSets, ==, 0, &&, name, ., aliasingGets, >, 0, ), {, List, <, Ref, >, refs, =]
[&&, name, ., aliasingGets, >, 0, ), {, List, <, Ref, >, refs, =, Lists, ., newArrayList, (, name, .]
[==, 0, &&, name, ., aliasingGets, >, 0, ), {, List, <, Ref, >, refs, =, Lists, ., newArrayList, (]
[., localSets, ==, 0, &&, name, ., aliasingGets, >, 0, ), {, List, <, Ref, >, refs, =, Lists, .]
[&&, name, ., aliasingGets, >, 0, ), {, List, <, Ref, >, refs, =, Lists, ., newArrayList, (, name, .]
[), {, List, <, Ref, >, refs, =, Lists, ., newArrayList, (, name, ., getRefs, (, ), ), ;, for]
[>, 0, ), {, List, <, Ref, >, refs, =, Lists, ., newArrayList, (, name, ., getRefs, (, ), )]
[., aliasingGets, >, 0, ), {, List, <, Ref, >, refs, =, Lists, ., newArrayList, (, name, ., getRefs, (]
[), {, List, <, Ref, >, refs, =, Lists, ., newArrayList, (, name, ., getRefs, (, ), ), ;, for]
[;, for, (, Ref, ref, :, refs, ), {, if, (, ref, ., type, ==, Type, ., ALIASING_GET, &&, ref]
[., newArrayList, (, name, ., getRefs, (, ), ), ;, for, (, Ref, ref, :, refs, ), {, if, (]
[), ;, for, (, Ref, ref, :, refs, ), {, if, (, ref, ., type, ==, Type, ., ALIASING_GET, &&]
[., getRefs, (, ), ), ;, for, (, Ref, ref, :, refs, ), {, if, (, ref, ., type, ==]
[), {, if, (, ref, ., type, ==, Type, ., ALIASING_GET, &&, ref, ., scope, ., isLocal, (, ), )]
[), {, if, (, inlineAliasIfPossible, (, ref, ,, namespace, ), ), {, name, ., removeRef, (, ref, ), ;, }]
[&&, ref, ., scope, ., isLocal, (, ), ), {, if, (, inlineAliasIfPossible, (, ref, ,, namespace, ), ), {]
[==, Type, ., ALIASING_GET, &&, ref, ., scope, ., isLocal, (, ), ), {, if, (, inlineAliasIfPossible, (, ref, ,]
[., type, ==, Type, ., ALIASING_GET, &&, ref, ., scope, ., isLocal, (, ), ), {, if, (, inlineAliasIfPossible, (]
[&&, ref, ., scope, ., isLocal, (, ), ), {, if, (, inlineAliasIfPossible, (, ref, ,, namespace, ), ), {]
[., ALIASING_GET, &&, ref, ., scope, ., isLocal, (, ), ), {, if, (, inlineAliasIfPossible, (, ref, ,, namespace, )]
[), {, if, (, inlineAliasIfPossible, (, ref, ,, namespace, ), ), {, name, ., removeRef, (, ref, ), ;, }]
[., isLocal, (, ), ), {, if, (, inlineAliasIfPossible, (, ref, ,, namespace, ), ), {, name, ., removeRef, (]
[., scope, ., isLocal, (, ), ), {, if, (, inlineAliasIfPossible, (, ref, ,, namespace, ), ), {, name, .]
[), {, name, ., removeRef, (, ref, ), ;, }, }, }, }, if, (, (, name, ., type, ==]
[,, namespace, ), ), {, name, ., removeRef, (, ref, ), ;, }, }, }, }, if, (, (, name]
[), ), {, name, ., removeRef, (, ref, ), ;, }, }, }, }, if, (, (, name, ., type]
[;, }, }, }, }, if, (, (, name, ., type, ==, Name, ., Type, ., OBJECTLIT, ||, name, .]
[., removeRef, (, ref, ), ;, }, }, }, }, if, (, (, name, ., type, ==, Name, ., Type]
[), ;, }, }, }, }, if, (, (, name, ., type, ==, Name, ., Type, ., OBJECTLIT, ||, name]
[), {, workList, ., addAll, (, name, ., props, ), ;, }, }, }, private, boolean, inlineAliasIfPossible, (, Ref, alias]
[&&, name, ., props, !=, null, ), {, workList, ., addAll, (, name, ., props, ), ;, }, }, }]
[&&, name, ., aliasingGets, ==, 0, &&, name, ., props, !=, null, ), {, workList, ., addAll, (, name, .]
[), &&, name, ., aliasingGets, ==, 0, &&, name, ., props, !=, null, ), {, workList, ., addAll, (, name]
[||, name, ., type, ==, Name, ., Type, ., FUNCTION, ), &&, name, ., aliasingGets, ==, 0, &&, name, .]
[==, Name, ., Type, ., OBJECTLIT, ||, name, ., type, ==, Name, ., Type, ., FUNCTION, ), &&, name, .]
[., type, ==, Name, ., Type, ., OBJECTLIT, ||, name, ., type, ==, Name, ., Type, ., FUNCTION, ), &&]
[||, name, ., type, ==, Name, ., Type, ., FUNCTION, ), &&, name, ., aliasingGets, ==, 0, &&, name, .]
[., OBJECTLIT, ||, name, ., type, ==, Name, ., Type, ., FUNCTION, ), &&, name, ., aliasingGets, ==, 0, &&]
[., Type, ., OBJECTLIT, ||, name, ., type, ==, Name, ., Type, ., FUNCTION, ), &&, name, ., aliasingGets, ==]
[), &&, name, ., aliasingGets, ==, 0, &&, name, ., props, !=, null, ), {, workList, ., addAll, (, name]
[==, Name, ., Type, ., FUNCTION, ), &&, name, ., aliasingGets, ==, 0, &&, name, ., props, !=, null, )]
[., type, ==, Name, ., Type, ., FUNCTION, ), &&, name, ., aliasingGets, ==, 0, &&, name, ., props, !=]
[), &&, name, ., aliasingGets, ==, 0, &&, name, ., props, !=, null, ), {, workList, ., addAll, (, name]
[., FUNCTION, ), &&, name, ., aliasingGets, ==, 0, &&, name, ., props, !=, null, ), {, workList, ., addAll]
[., Type, ., FUNCTION, ), &&, name, ., aliasingGets, ==, 0, &&, name, ., props, !=, null, ), {, workList]
[&&, name, ., props, !=, null, ), {, workList, ., addAll, (, name, ., props, ), ;, }, }, }]
[==, 0, &&, name, ., props, !=, null, ), {, workList, ., addAll, (, name, ., props, ), ;, }]
[., aliasingGets, ==, 0, &&, name, ., props, !=, null, ), {, workList, ., addAll, (, name, ., props, )]
[&&, name, ., props, !=, null, ), {, workList, ., addAll, (, name, ., props, ), ;, }, }, }]
[), {, workList, ., addAll, (, name, ., props, ), ;, }, }, }, private, boolean, inlineAliasIfPossible, (, Ref, alias]
[!=, null, ), {, workList, ., addAll, (, name, ., props, ), ;, }, }, }, private, boolean, inlineAliasIfPossible, (]
[., props, !=, null, ), {, workList, ., addAll, (, name, ., props, ), ;, }, }, }, private, boolean]
[), {, workList, ., addAll, (, name, ., props, ), ;, }, }, }, private, boolean, inlineAliasIfPossible, (, Ref, alias]
[;, }, }, }, private, boolean, inlineAliasIfPossible, (, Ref, alias, ,, GlobalNamespace, namespace, ), {, Node, aliasParent, =, alias, .]
[., addAll, (, name, ., props, ), ;, }, }, }, private, boolean, inlineAliasIfPossible, (, Ref, alias, ,, GlobalNamespace, namespace]
[), ;, }, }, }, private, boolean, inlineAliasIfPossible, (, Ref, alias, ,, GlobalNamespace, namespace, ), {, Node, aliasParent, =, alias]
[., props, ), ;, }, }, }, private, boolean, inlineAliasIfPossible, (, Ref, alias, ,, GlobalNamespace, namespace, ), {, Node, aliasParent]
[;, if, (, aliasParent, ., isName, (, ), ), {, Scope, scope, =, alias, ., scope, ;, Var, aliasVar, =]
[., getParent, (, ), ;, if, (, aliasParent, ., isName, (, ), ), {, Scope, scope, =, alias, ., scope]
[., node, ., getParent, (, ), ;, if, (, aliasParent, ., isName, (, ), ), {, Scope, scope, =, alias]
[), {, Scope, scope, =, alias, ., scope, ;, Var, aliasVar, =, scope, ., getVar, (, aliasParent, ., getString, (]
[., isName, (, ), ), {, Scope, scope, =, alias, ., scope, ;, Var, aliasVar, =, scope, ., getVar, (]
[;, Var, aliasVar, =, scope, ., getVar, (, aliasParent, ., getString, (, ), ), ;, ReferenceCollectingCallback, collector, =, new, ReferenceCollectingCallback]
[., scope, ;, Var, aliasVar, =, scope, ., getVar, (, aliasParent, ., getString, (, ), ), ;, ReferenceCollectingCallback, collector, =]
[;, ReferenceCollectingCallback, collector, =, new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ,, Predicates, ., <, Var, >, equalTo, (]
[., getVar, (, aliasParent, ., getString, (, ), ), ;, ReferenceCollectingCallback, collector, =, new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, .]
[), ;, ReferenceCollectingCallback, collector, =, new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ,, Predicates, ., <, Var, >, equalTo]
[., getString, (, ), ), ;, ReferenceCollectingCallback, collector, =, new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ,, Predicates, .]
[;, (, new, NodeTraversal, (, compiler, ,, collector, ), ), ., traverseAtScope, (, scope, ), ;, ReferenceCollection, aliasRefs, =, collector]
[,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ,, Predicates, ., <, Var, >, equalTo, (, aliasVar, ), ), ;, (, new, NodeTraversal, (]
[,, Predicates, ., <, Var, >, equalTo, (, aliasVar, ), ), ;, (, new, NodeTraversal, (, compiler, ,, collector, )]
[., DO_NOTHING_BEHAVIOR, ,, Predicates, ., <, Var, >, equalTo, (, aliasVar, ), ), ;, (, new, NodeTraversal, (, compiler, ,]
[), ;, (, new, NodeTraversal, (, compiler, ,, collector, ), ), ., traverseAtScope, (, scope, ), ;, ReferenceCollection, aliasRefs, =]
[., <, Var, >, equalTo, (, aliasVar, ), ), ;, (, new, NodeTraversal, (, compiler, ,, collector, ), ), .]
[), ), ;, (, new, NodeTraversal, (, compiler, ,, collector, ), ), ., traverseAtScope, (, scope, ), ;, ReferenceCollection, aliasRefs]
[;, ReferenceCollection, aliasRefs, =, collector, ., getReferences, (, aliasVar, ), ;, if, (, aliasRefs, ., isWellDefined, (, ), &&, aliasRefs]
[., traverseAtScope, (, scope, ), ;, ReferenceCollection, aliasRefs, =, collector, ., getReferences, (, aliasVar, ), ;, if, (, aliasRefs, .]
[), ., traverseAtScope, (, scope, ), ;, ReferenceCollection, aliasRefs, =, collector, ., getReferences, (, aliasVar, ), ;, if, (, aliasRefs]
[,, collector, ), ), ., traverseAtScope, (, scope, ), ;, ReferenceCollection, aliasRefs, =, collector, ., getReferences, (, aliasVar, ), ;]
[), ), ., traverseAtScope, (, scope, ), ;, ReferenceCollection, aliasRefs, =, collector, ., getReferences, (, aliasVar, ), ;, if, (]
[), ;, ReferenceCollection, aliasRefs, =, collector, ., getReferences, (, aliasVar, ), ;, if, (, aliasRefs, ., isWellDefined, (, ), &&]
[;, if, (, aliasRefs, ., isWellDefined, (, ), &&, aliasRefs, ., firstReferenceIsAssigningDeclaration, (, ), &&, aliasRefs, ., isAssignedOnceInLifetime, (, )]
[., getReferences, (, aliasVar, ), ;, if, (, aliasRefs, ., isWellDefined, (, ), &&, aliasRefs, ., firstReferenceIsAssigningDeclaration, (, ), &&]
[), ;, if, (, aliasRefs, ., isWellDefined, (, ), &&, aliasRefs, ., firstReferenceIsAssigningDeclaration, (, ), &&, aliasRefs, ., isAssignedOnceInLifetime, (]
[), {, int, size, =, aliasRefs, ., references, ., size, (, ), ;, Set, <, Node, >, newNodes, =, Sets]
[&&, aliasRefs, ., isAssignedOnceInLifetime, (, ), ), {, int, size, =, aliasRefs, ., references, ., size, (, ), ;, Set]
[&&, aliasRefs, ., firstReferenceIsAssigningDeclaration, (, ), &&, aliasRefs, ., isAssignedOnceInLifetime, (, ), ), {, int, size, =, aliasRefs, ., references]
[., isWellDefined, (, ), &&, aliasRefs, ., firstReferenceIsAssigningDeclaration, (, ), &&, aliasRefs, ., isAssignedOnceInLifetime, (, ), ), {, int, size]
[&&, aliasRefs, ., isAssignedOnceInLifetime, (, ), ), {, int, size, =, aliasRefs, ., references, ., size, (, ), ;, Set]
[., firstReferenceIsAssigningDeclaration, (, ), &&, aliasRefs, ., isAssignedOnceInLifetime, (, ), ), {, int, size, =, aliasRefs, ., references, ., size]
[), {, int, size, =, aliasRefs, ., references, ., size, (, ), ;, Set, <, Node, >, newNodes, =, Sets]
[., isAssignedOnceInLifetime, (, ), ), {, int, size, =, aliasRefs, ., references, ., size, (, ), ;, Set, <, Node]
[;, Set, <, Node, >, newNodes, =, Sets, ., newHashSetWithExpectedSize, (, size, -, 1, ), ;, for, (, int, i]
[., size, (, ), ;, Set, <, Node, >, newNodes, =, Sets, ., newHashSetWithExpectedSize, (, size, -, 1, ), ;]
[., references, ., size, (, ), ;, Set, <, Node, >, newNodes, =, Sets, ., newHashSetWithExpectedSize, (, size, -, 1]
[;, for, (, int, i, =, 1, ;, i, <, size, ;, i, ++, ), {, ReferenceCollectingCallback, ., Reference, aliasRef]
[., newHashSetWithExpectedSize, (, size, -, 1, ), ;, for, (, int, i, =, 1, ;, i, <, size, ;, i]
[), ;, for, (, int, i, =, 1, ;, i, <, size, ;, i, ++, ), {, ReferenceCollectingCallback, ., Reference]
[-, 1, ), ;, for, (, int, i, =, 1, ;, i, <, size, ;, i, ++, ), {, ReferenceCollectingCallback]
[), ;, for, (, int, i, =, 1, ;, i, <, size, ;, i, ++, ), {, ReferenceCollectingCallback, ., Reference]
[;, i, <, size, ;, i, ++, ), {, ReferenceCollectingCallback, ., Reference, aliasRef, =, aliasRefs, ., references, ., get, (]
[;, i, ++, ), {, ReferenceCollectingCallback, ., Reference, aliasRef, =, aliasRefs, ., references, ., get, (, i, ), ;, Node]
[<, size, ;, i, ++, ), {, ReferenceCollectingCallback, ., Reference, aliasRef, =, aliasRefs, ., references, ., get, (, i, )]
[;, i, ++, ), {, ReferenceCollectingCallback, ., Reference, aliasRef, =, aliasRefs, ., references, ., get, (, i, ), ;, Node]
[), {, ReferenceCollectingCallback, ., Reference, aliasRef, =, aliasRefs, ., references, ., get, (, i, ), ;, Node, newNode, =, alias]
[++, ), {, ReferenceCollectingCallback, ., Reference, aliasRef, =, aliasRefs, ., references, ., get, (, i, ), ;, Node, newNode, =]
[;, Node, newNode, =, alias, ., node, ., cloneTree, (, ), ;, aliasRef, ., getParent, (, ), ., replaceChild, (]
[., get, (, i, ), ;, Node, newNode, =, alias, ., node, ., cloneTree, (, ), ;, aliasRef, ., getParent]
[., references, ., get, (, i, ), ;, Node, newNode, =, alias, ., node, ., cloneTree, (, ), ;, aliasRef]
[), ;, Node, newNode, =, alias, ., node, ., cloneTree, (, ), ;, aliasRef, ., getParent, (, ), ., replaceChild]
[;, aliasRef, ., getParent, (, ), ., replaceChild, (, aliasRef, ., getNode, (, ), ,, newNode, ), ;, newNodes, .]
[., cloneTree, (, ), ;, aliasRef, ., getParent, (, ), ., replaceChild, (, aliasRef, ., getNode, (, ), ,, newNode]
[., node, ., cloneTree, (, ), ;, aliasRef, ., getParent, (, ), ., replaceChild, (, aliasRef, ., getNode, (, )]
[;, newNodes, ., add, (, newNode, ), ;, }, aliasParent, ., replaceChild, (, alias, ., node, ,, IR, ., nullNode]
[., replaceChild, (, aliasRef, ., getNode, (, ), ,, newNode, ), ;, newNodes, ., add, (, newNode, ), ;, }]
[., getParent, (, ), ., replaceChild, (, aliasRef, ., getNode, (, ), ,, newNode, ), ;, newNodes, ., add, (]
[,, newNode, ), ;, newNodes, ., add, (, newNode, ), ;, }, aliasParent, ., replaceChild, (, alias, ., node, ,]
[., getNode, (, ), ,, newNode, ), ;, newNodes, ., add, (, newNode, ), ;, }, aliasParent, ., replaceChild, (]
[), ;, newNodes, ., add, (, newNode, ), ;, }, aliasParent, ., replaceChild, (, alias, ., node, ,, IR, .]
[;, }, aliasParent, ., replaceChild, (, alias, ., node, ,, IR, ., nullNode, (, ), ), ;, compiler, ., reportCodeChange]
[., add, (, newNode, ), ;, }, aliasParent, ., replaceChild, (, alias, ., node, ,, IR, ., nullNode, (, )]
[), ;, }, aliasParent, ., replaceChild, (, alias, ., node, ,, IR, ., nullNode, (, ), ), ;, compiler, .]
[;, compiler, ., reportCodeChange, (, ), ;, namespace, ., scanNewNodes, (, alias, ., scope, ,, newNodes, ), ;, return, true]
[., replaceChild, (, alias, ., node, ,, IR, ., nullNode, (, ), ), ;, compiler, ., reportCodeChange, (, ), ;]
[,, IR, ., nullNode, (, ), ), ;, compiler, ., reportCodeChange, (, ), ;, namespace, ., scanNewNodes, (, alias, .]
[., node, ,, IR, ., nullNode, (, ), ), ;, compiler, ., reportCodeChange, (, ), ;, namespace, ., scanNewNodes, (]
[), ;, compiler, ., reportCodeChange, (, ), ;, namespace, ., scanNewNodes, (, alias, ., scope, ,, newNodes, ), ;, return]
[., nullNode, (, ), ), ;, compiler, ., reportCodeChange, (, ), ;, namespace, ., scanNewNodes, (, alias, ., scope, ,]
[;, namespace, ., scanNewNodes, (, alias, ., scope, ,, newNodes, ), ;, return, true, ;, }, }, return, false, ;]
[., reportCodeChange, (, ), ;, namespace, ., scanNewNodes, (, alias, ., scope, ,, newNodes, ), ;, return, true, ;, }]
[;, return, true, ;, }, }, return, false, ;, }, private, void, checkNamespaces, (, ), {, for, (, Name, name]
[., scanNewNodes, (, alias, ., scope, ,, newNodes, ), ;, return, true, ;, }, }, return, false, ;, }, private]
[,, newNodes, ), ;, return, true, ;, }, }, return, false, ;, }, private, void, checkNamespaces, (, ), {, for]
[., scope, ,, newNodes, ), ;, return, true, ;, }, }, return, false, ;, }, private, void, checkNamespaces, (, )]
[), ;, return, true, ;, }, }, return, false, ;, }, private, void, checkNamespaces, (, ), {, for, (, Name]
[;, }, }, return, false, ;, }, private, void, checkNamespaces, (, ), {, for, (, Name, name, :, nameMap, .]
[;, }, private, void, checkNamespaces, (, ), {, for, (, Name, name, :, nameMap, ., values, (, ), ), {]
[), {, if, (, name, ., isNamespace, (, ), &&, (, name, ., aliasingGets, >, 0, ||, name, ., localSets]
[., values, (, ), ), {, if, (, name, ., isNamespace, (, ), &&, (, name, ., aliasingGets, >, 0]
[), {, boolean, initialized, =, name, ., getDeclaration, (, ), !=, null, ;, for, (, Ref, ref, :, name, .]
[&&, (, name, ., aliasingGets, >, 0, ||, name, ., localSets, +, name, ., globalSets, >, 1, ||, name, .]
[., isNamespace, (, ), &&, (, name, ., aliasingGets, >, 0, ||, name, ., localSets, +, name, ., globalSets, >]
[), {, boolean, initialized, =, name, ., getDeclaration, (, ), !=, null, ;, for, (, Ref, ref, :, name, .]
[), ), {, boolean, initialized, =, name, ., getDeclaration, (, ), !=, null, ;, for, (, Ref, ref, :, name]
[||, name, ., deleteProps, >, 0, ), ), {, boolean, initialized, =, name, ., getDeclaration, (, ), !=, null, ;]
[||, name, ., localSets, +, name, ., globalSets, >, 1, ||, name, ., deleteProps, >, 0, ), ), {, boolean]
[>, 0, ||, name, ., localSets, +, name, ., globalSets, >, 1, ||, name, ., deleteProps, >, 0, ), )]
[., aliasingGets, >, 0, ||, name, ., localSets, +, name, ., globalSets, >, 1, ||, name, ., deleteProps, >, 0]
[||, name, ., localSets, +, name, ., globalSets, >, 1, ||, name, ., deleteProps, >, 0, ), ), {, boolean]
[||, name, ., deleteProps, >, 0, ), ), {, boolean, initialized, =, name, ., getDeclaration, (, ), !=, null, ;]
[>, 1, ||, name, ., deleteProps, >, 0, ), ), {, boolean, initialized, =, name, ., getDeclaration, (, ), !=]
[+, name, ., globalSets, >, 1, ||, name, ., deleteProps, >, 0, ), ), {, boolean, initialized, =, name, .]
[., localSets, +, name, ., globalSets, >, 1, ||, name, ., deleteProps, >, 0, ), ), {, boolean, initialized, =]
[>, 1, ||, name, ., deleteProps, >, 0, ), ), {, boolean, initialized, =, name, ., getDeclaration, (, ), !=]
[., globalSets, >, 1, ||, name, ., deleteProps, >, 0, ), ), {, boolean, initialized, =, name, ., getDeclaration, (]
[||, name, ., deleteProps, >, 0, ), ), {, boolean, initialized, =, name, ., getDeclaration, (, ), !=, null, ;]
[), ), {, boolean, initialized, =, name, ., getDeclaration, (, ), !=, null, ;, for, (, Ref, ref, :, name]
[>, 0, ), ), {, boolean, initialized, =, name, ., getDeclaration, (, ), !=, null, ;, for, (, Ref, ref]
[., deleteProps, >, 0, ), ), {, boolean, initialized, =, name, ., getDeclaration, (, ), !=, null, ;, for, (]
[), ), {, boolean, initialized, =, name, ., getDeclaration, (, ), !=, null, ;, for, (, Ref, ref, :, name]
[;, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, if, (, ref, ==, name, ., getDeclaration]
[!=, null, ;, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, if, (, ref, ==, name]
[., getDeclaration, (, ), !=, null, ;, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, if]
[;, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, if, (, ref, ==, name, ., getDeclaration]
[), {, if, (, ref, ==, name, ., getDeclaration, (, ), ), {, continue, ;, }, if, (, ref, .]
[., getRefs, (, ), ), {, if, (, ref, ==, name, ., getDeclaration, (, ), ), {, continue, ;, }]
[), {, continue, ;, }, if, (, ref, ., type, ==, Ref, ., Type, ., DELETE_PROP, ), {, if, (]
[==, name, ., getDeclaration, (, ), ), {, continue, ;, }, if, (, ref, ., type, ==, Ref, ., Type]
[), {, continue, ;, }, if, (, ref, ., type, ==, Ref, ., Type, ., DELETE_PROP, ), {, if, (]
[., getDeclaration, (, ), ), {, continue, ;, }, if, (, ref, ., type, ==, Ref, ., Type, ., DELETE_PROP]
[), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, }, else, if, (, ref]
[==, Ref, ., Type, ., DELETE_PROP, ), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;]
[., type, ==, Ref, ., Type, ., DELETE_PROP, ), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref]
[), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, }, else, if, (, ref]
[., DELETE_PROP, ), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, }, else, if]
[., Type, ., DELETE_PROP, ), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, }]
[), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, }, else, if, (, ref, ., type, ==, Ref, .]
[;, }, }, else, if, (, ref, ., type, ==, Ref, ., Type, ., SET_FROM_GLOBAL, ||, ref, ., type, ==]
[,, ref, ), ;, }, }, else, if, (, ref, ., type, ==, Ref, ., Type, ., SET_FROM_GLOBAL, ||, ref]
[), ;, }, }, else, if, (, ref, ., type, ==, Ref, ., Type, ., SET_FROM_GLOBAL, ||, ref, ., type]
[), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, initialized, =, true, ;, }]
[||, ref, ., type, ==, Ref, ., Type, ., SET_FROM_LOCAL, ), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name]
[==, Ref, ., Type, ., SET_FROM_GLOBAL, ||, ref, ., type, ==, Ref, ., Type, ., SET_FROM_LOCAL, ), {, if, (]
[., type, ==, Ref, ., Type, ., SET_FROM_GLOBAL, ||, ref, ., type, ==, Ref, ., Type, ., SET_FROM_LOCAL, ), {]
[||, ref, ., type, ==, Ref, ., Type, ., SET_FROM_LOCAL, ), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name]
[., SET_FROM_GLOBAL, ||, ref, ., type, ==, Ref, ., Type, ., SET_FROM_LOCAL, ), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition]
[., Type, ., SET_FROM_GLOBAL, ||, ref, ., type, ==, Ref, ., Type, ., SET_FROM_LOCAL, ), {, if, (, initialized, )]
[), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, initialized, =, true, ;, }]
[==, Ref, ., Type, ., SET_FROM_LOCAL, ), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;]
[., type, ==, Ref, ., Type, ., SET_FROM_LOCAL, ), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref]
[), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, initialized, =, true, ;, }]
[., SET_FROM_LOCAL, ), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, initialized, =, true]
[., Type, ., SET_FROM_LOCAL, ), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, initialized]
[), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, initialized, =, true, ;, }, else, if, (, ref, .]
[;, }, initialized, =, true, ;, }, else, if, (, ref, ., type, ==, Ref, ., Type, ., ALIASING_GET, )]
[,, ref, ), ;, }, initialized, =, true, ;, }, else, if, (, ref, ., type, ==, Ref, ., Type]
[), ;, }, initialized, =, true, ;, }, else, if, (, ref, ., type, ==, Ref, ., Type, ., ALIASING_GET]
[=, true, ;, }, else, if, (, ref, ., type, ==, Ref, ., Type, ., ALIASING_GET, ), {, warnAboutNamespaceAliasing, (]
[;, }, else, if, (, ref, ., type, ==, Ref, ., Type, ., ALIASING_GET, ), {, warnAboutNamespaceAliasing, (, name, ,]
[), {, warnAboutNamespaceAliasing, (, name, ,, ref, ), ;, }, }, }, }, }, private, void, warnAboutNamespaceAliasing, (, Name, nameObj]
[==, Ref, ., Type, ., ALIASING_GET, ), {, warnAboutNamespaceAliasing, (, name, ,, ref, ), ;, }, }, }, }, }]
[., type, ==, Ref, ., Type, ., ALIASING_GET, ), {, warnAboutNamespaceAliasing, (, name, ,, ref, ), ;, }, }, }]
[), {, warnAboutNamespaceAliasing, (, name, ,, ref, ), ;, }, }, }, }, }, private, void, warnAboutNamespaceAliasing, (, Name, nameObj]
[., ALIASING_GET, ), {, warnAboutNamespaceAliasing, (, name, ,, ref, ), ;, }, }, }, }, }, private, void, warnAboutNamespaceAliasing, (]
[., Type, ., ALIASING_GET, ), {, warnAboutNamespaceAliasing, (, name, ,, ref, ), ;, }, }, }, }, }, private, void]
[;, }, }, }, }, }, private, void, warnAboutNamespaceAliasing, (, Name, nameObj, ,, Ref, ref, ), {, compiler, ., report]
[,, ref, ), ;, }, }, }, }, }, private, void, warnAboutNamespaceAliasing, (, Name, nameObj, ,, Ref, ref, ), {]
[), ;, }, }, }, }, }, private, void, warnAboutNamespaceAliasing, (, Name, nameObj, ,, Ref, ref, ), {, compiler, .]
[;, }, private, void, warnAboutNamespaceRedefinition, (, Name, nameObj, ,, Ref, ref, ), {, compiler, ., report, (, JSError, ., make]
[., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,, ref, ., node, ,, UNSAFE_NAMESPACE_WARNING, ,, nameObj]
[), ;, }, private, void, warnAboutNamespaceRedefinition, (, Name, nameObj, ,, Ref, ref, ), {, compiler, ., report, (, JSError, .]
[., make, (, ref, ., getSourceName, (, ), ,, ref, ., node, ,, UNSAFE_NAMESPACE_WARNING, ,, nameObj, ., getFullName, (, )]
[,, ref, ., node, ,, UNSAFE_NAMESPACE_WARNING, ,, nameObj, ., getFullName, (, ), ), ), ;, }, private, void, warnAboutNamespaceRedefinition, (]
[., getSourceName, (, ), ,, ref, ., node, ,, UNSAFE_NAMESPACE_WARNING, ,, nameObj, ., getFullName, (, ), ), ), ;, }]
[,, UNSAFE_NAMESPACE_WARNING, ,, nameObj, ., getFullName, (, ), ), ), ;, }, private, void, warnAboutNamespaceRedefinition, (, Name, nameObj, ,, Ref]
[., node, ,, UNSAFE_NAMESPACE_WARNING, ,, nameObj, ., getFullName, (, ), ), ), ;, }, private, void, warnAboutNamespaceRedefinition, (, Name, nameObj]
[,, nameObj, ., getFullName, (, ), ), ), ;, }, private, void, warnAboutNamespaceRedefinition, (, Name, nameObj, ,, Ref, ref, )]
[), ), ;, }, private, void, warnAboutNamespaceRedefinition, (, Name, nameObj, ,, Ref, ref, ), {, compiler, ., report, (, JSError]
[., getFullName, (, ), ), ), ;, }, private, void, warnAboutNamespaceRedefinition, (, Name, nameObj, ,, Ref, ref, ), {, compiler]
[;, }, private, void, flattenReferencesToCollapsibleDescendantNames, (, Name, n, ,, String, alias, ), {, if, (, n, ., props, ==, null]
[., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,, ref, ., node, ,, NAMESPACE_REDEFINED_WARNING, ,, nameObj]
[), ;, }, private, void, flattenReferencesToCollapsibleDescendantNames, (, Name, n, ,, String, alias, ), {, if, (, n, ., props, ==]
[., make, (, ref, ., getSourceName, (, ), ,, ref, ., node, ,, NAMESPACE_REDEFINED_WARNING, ,, nameObj, ., getFullName, (, )]
[,, ref, ., node, ,, NAMESPACE_REDEFINED_WARNING, ,, nameObj, ., getFullName, (, ), ), ), ;, }, private, void, flattenReferencesToCollapsibleDescendantNames, (]
[., getSourceName, (, ), ,, ref, ., node, ,, NAMESPACE_REDEFINED_WARNING, ,, nameObj, ., getFullName, (, ), ), ), ;, }]
[,, NAMESPACE_REDEFINED_WARNING, ,, nameObj, ., getFullName, (, ), ), ), ;, }, private, void, flattenReferencesToCollapsibleDescendantNames, (, Name, n, ,, String]
[., node, ,, NAMESPACE_REDEFINED_WARNING, ,, nameObj, ., getFullName, (, ), ), ), ;, }, private, void, flattenReferencesToCollapsibleDescendantNames, (, Name, n]
[,, nameObj, ., getFullName, (, ), ), ), ;, }, private, void, flattenReferencesToCollapsibleDescendantNames, (, Name, n, ,, String, alias, )]
[), ), ;, }, private, void, flattenReferencesToCollapsibleDescendantNames, (, Name, n, ,, String, alias, ), {, if, (, n, ., props]
[., getFullName, (, ), ), ), ;, }, private, void, flattenReferencesToCollapsibleDescendantNames, (, Name, n, ,, String, alias, ), {, if]
[), return, ;, for, (, Name, p, :, n, ., props, ), {, String, propAlias, =, appendPropForAlias, (, alias, ,]
[==, null, ), return, ;, for, (, Name, p, :, n, ., props, ), {, String, propAlias, =, appendPropForAlias, (]
[., props, ==, null, ), return, ;, for, (, Name, p, :, n, ., props, ), {, String, propAlias, =]
[), return, ;, for, (, Name, p, :, n, ., props, ), {, String, propAlias, =, appendPropForAlias, (, alias, ,]
[), {, String, propAlias, =, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ;, if, (, p, .]
[., props, ), {, String, propAlias, =, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ;, if, (]
[;, if, (, p, ., canCollapse, (, ), ), {, flattenReferencesTo, (, p, ,, propAlias, ), ;, }, else, if]
[,, p, ., getBaseName, (, ), ), ;, if, (, p, ., canCollapse, (, ), ), {, flattenReferencesTo, (, p]
[), ;, if, (, p, ., canCollapse, (, ), ), {, flattenReferencesTo, (, p, ,, propAlias, ), ;, }, else]
[., getBaseName, (, ), ), ;, if, (, p, ., canCollapse, (, ), ), {, flattenReferencesTo, (, p, ,, propAlias]
[), {, flattenReferencesTo, (, p, ,, propAlias, ), ;, }, else, if, (, p, ., isSimpleStubDeclaration, (, ), ), {]
[., canCollapse, (, ), ), {, flattenReferencesTo, (, p, ,, propAlias, ), ;, }, else, if, (, p, ., isSimpleStubDeclaration]
[;, }, else, if, (, p, ., isSimpleStubDeclaration, (, ), ), {, flattenSimpleStubDeclaration, (, p, ,, propAlias, ), ;, }]
[,, propAlias, ), ;, }, else, if, (, p, ., isSimpleStubDeclaration, (, ), ), {, flattenSimpleStubDeclaration, (, p, ,, propAlias]
[), ;, }, else, if, (, p, ., isSimpleStubDeclaration, (, ), ), {, flattenSimpleStubDeclaration, (, p, ,, propAlias, ), ;]
[), {, flattenSimpleStubDeclaration, (, p, ,, propAlias, ), ;, }, flattenReferencesToCollapsibleDescendantNames, (, p, ,, propAlias, ), ;, }, }, private]
[., isSimpleStubDeclaration, (, ), ), {, flattenSimpleStubDeclaration, (, p, ,, propAlias, ), ;, }, flattenReferencesToCollapsibleDescendantNames, (, p, ,, propAlias, )]
[;, }, flattenReferencesToCollapsibleDescendantNames, (, p, ,, propAlias, ), ;, }, }, private, void, flattenSimpleStubDeclaration, (, Name, name, ,, String, alias]
[,, propAlias, ), ;, }, flattenReferencesToCollapsibleDescendantNames, (, p, ,, propAlias, ), ;, }, }, private, void, flattenSimpleStubDeclaration, (, Name, name]
[), ;, }, flattenReferencesToCollapsibleDescendantNames, (, p, ,, propAlias, ), ;, }, }, private, void, flattenSimpleStubDeclaration, (, Name, name, ,, String]
[;, }, }, private, void, flattenSimpleStubDeclaration, (, Name, name, ,, String, alias, ), {, Ref, ref, =, Iterables, ., getOnlyElement]
[,, propAlias, ), ;, }, }, private, void, flattenSimpleStubDeclaration, (, Name, name, ,, String, alias, ), {, Ref, ref, =]
[), ;, }, }, private, void, flattenSimpleStubDeclaration, (, Name, name, ,, String, alias, ), {, Ref, ref, =, Iterables, .]
[;, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, ref, ., node, ,]
[., getOnlyElement, (, name, ., getRefs, (, ), ), ;, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention]
[), ;, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, ref, ., node]
[., getRefs, (, ), ), ;, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias]
[;, Node, varNode, =, IR, ., var, (, nameNode, ), ., copyInformationFrom, (, nameNode, ), ;, Preconditions, ., checkState, (]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, ref, ., node, ,, name, ., getFullName, (, )]
[,, alias, ,, ref, ., node, ,, name, ., getFullName, (, ), ), ;, Node, varNode, =, IR, ., var]
[., getCodingConvention, (, ), ,, alias, ,, ref, ., node, ,, name, ., getFullName, (, ), ), ;, Node, varNode]
[,, ref, ., node, ,, name, ., getFullName, (, ), ), ;, Node, varNode, =, IR, ., var, (, nameNode]
[,, name, ., getFullName, (, ), ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ., copyInformationFrom, (]
[., node, ,, name, ., getFullName, (, ), ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), .]
[), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ., copyInformationFrom, (, nameNode, ), ;, Preconditions, ., checkState]
[., getFullName, (, ), ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ., copyInformationFrom, (, nameNode, )]
[;, Preconditions, ., checkState, (, ref, ., node, ., getParent, (, ), ., isExprResult, (, ), ), ;, Node, parent]
[., copyInformationFrom, (, nameNode, ), ;, Preconditions, ., checkState, (, ref, ., node, ., getParent, (, ), ., isExprResult, (]
[., var, (, nameNode, ), ., copyInformationFrom, (, nameNode, ), ;, Preconditions, ., checkState, (, ref, ., node, ., getParent]
[), ., copyInformationFrom, (, nameNode, ), ;, Preconditions, ., checkState, (, ref, ., node, ., getParent, (, ), ., isExprResult]
[), ;, Preconditions, ., checkState, (, ref, ., node, ., getParent, (, ), ., isExprResult, (, ), ), ;, Node]
[;, Node, parent, =, ref, ., node, ., getParent, (, ), ;, Node, gramps, =, parent, ., getParent, (, )]
[., checkState, (, ref, ., node, ., getParent, (, ), ., isExprResult, (, ), ), ;, Node, parent, =, ref]
[), ;, Node, parent, =, ref, ., node, ., getParent, (, ), ;, Node, gramps, =, parent, ., getParent, (]
[., isExprResult, (, ), ), ;, Node, parent, =, ref, ., node, ., getParent, (, ), ;, Node, gramps, =]
[., getParent, (, ), ., isExprResult, (, ), ), ;, Node, parent, =, ref, ., node, ., getParent, (, )]
[., node, ., getParent, (, ), ., isExprResult, (, ), ), ;, Node, parent, =, ref, ., node, ., getParent]
[;, Node, gramps, =, parent, ., getParent, (, ), ;, gramps, ., replaceChild, (, parent, ,, varNode, ), ;, compiler]
[., getParent, (, ), ;, Node, gramps, =, parent, ., getParent, (, ), ;, gramps, ., replaceChild, (, parent, ,]
[., node, ., getParent, (, ), ;, Node, gramps, =, parent, ., getParent, (, ), ;, gramps, ., replaceChild, (]
[;, gramps, ., replaceChild, (, parent, ,, varNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, flattenReferencesTo]
[., getParent, (, ), ;, gramps, ., replaceChild, (, parent, ,, varNode, ), ;, compiler, ., reportCodeChange, (, ), ;]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, void, flattenReferencesTo, (, Name, n, ,, String, alias, ), {, String]
[., replaceChild, (, parent, ,, varNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, flattenReferencesTo, (, Name]
[,, varNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, flattenReferencesTo, (, Name, n, ,, String, alias]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, flattenReferencesTo, (, Name, n, ,, String, alias, ), {]
[;, }, private, void, flattenReferencesTo, (, Name, n, ,, String, alias, ), {, String, originalName, =, n, ., getFullName, (]
[., reportCodeChange, (, ), ;, }, private, void, flattenReferencesTo, (, Name, n, ,, String, alias, ), {, String, originalName, =]
[;, for, (, Ref, r, :, n, ., getRefs, (, ), ), {, if, (, r, ==, n, ., getDeclaration]
[., getFullName, (, ), ;, for, (, Ref, r, :, n, ., getRefs, (, ), ), {, if, (, r]
[), {, if, (, r, ==, n, ., getDeclaration, (, ), ), {, continue, ;, }, Node, rParent, =, r]
[., getRefs, (, ), ), {, if, (, r, ==, n, ., getDeclaration, (, ), ), {, continue, ;, }]
[), {, continue, ;, }, Node, rParent, =, r, ., node, ., getParent, (, ), ;, if, (, !, NodeUtil]
[==, n, ., getDeclaration, (, ), ), {, continue, ;, }, Node, rParent, =, r, ., node, ., getParent, (]
[), {, continue, ;, }, Node, rParent, =, r, ., node, ., getParent, (, ), ;, if, (, !, NodeUtil]
[., getDeclaration, (, ), ), {, continue, ;, }, Node, rParent, =, r, ., node, ., getParent, (, ), ;]
[;, if, (, !, NodeUtil, ., isObjectLitKey, (, r, ., node, ,, rParent, ), &&, (, r, ., getTwin, (]
[., getParent, (, ), ;, if, (, !, NodeUtil, ., isObjectLitKey, (, r, ., node, ,, rParent, ), &&, (]
[., node, ., getParent, (, ), ;, if, (, !, NodeUtil, ., isObjectLitKey, (, r, ., node, ,, rParent, )]
[), {, flattenNameRef, (, alias, ,, r, ., node, ,, rParent, ,, originalName, ), ;, }, }, if, (, n]
[&&, (, r, ., getTwin, (, ), ==, null, ||, r, ., isSet, (, ), ), ), {, flattenNameRef, (]
[&&, (, r, ., getTwin, (, ), ==, null, ||, r, ., isSet, (, ), ), ), {, flattenNameRef, (]
[., isObjectLitKey, (, r, ., node, ,, rParent, ), &&, (, r, ., getTwin, (, ), ==, null, ||, r]
[,, rParent, ), &&, (, r, ., getTwin, (, ), ==, null, ||, r, ., isSet, (, ), ), )]
[., node, ,, rParent, ), &&, (, r, ., getTwin, (, ), ==, null, ||, r, ., isSet, (, )]
[), &&, (, r, ., getTwin, (, ), ==, null, ||, r, ., isSet, (, ), ), ), {, flattenNameRef]
[), {, flattenNameRef, (, alias, ,, r, ., node, ,, rParent, ,, originalName, ), ;, }, }, if, (, n]
[), ), {, flattenNameRef, (, alias, ,, r, ., node, ,, rParent, ,, originalName, ), ;, }, }, if, (]
[||, r, ., isSet, (, ), ), ), {, flattenNameRef, (, alias, ,, r, ., node, ,, rParent, ,, originalName]
[==, null, ||, r, ., isSet, (, ), ), ), {, flattenNameRef, (, alias, ,, r, ., node, ,, rParent]
[., getTwin, (, ), ==, null, ||, r, ., isSet, (, ), ), ), {, flattenNameRef, (, alias, ,, r]
[||, r, ., isSet, (, ), ), ), {, flattenNameRef, (, alias, ,, r, ., node, ,, rParent, ,, originalName]
[), ), {, flattenNameRef, (, alias, ,, r, ., node, ,, rParent, ,, originalName, ), ;, }, }, if, (]
[., isSet, (, ), ), ), {, flattenNameRef, (, alias, ,, r, ., node, ,, rParent, ,, originalName, ), ;]
[;, }, }, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :, n, ., props]
[,, r, ., node, ,, rParent, ,, originalName, ), ;, }, }, if, (, n, ., props, !=, null, )]
[,, rParent, ,, originalName, ), ;, }, }, if, (, n, ., props, !=, null, ), {, for, (, Name]
[., node, ,, rParent, ,, originalName, ), ;, }, }, if, (, n, ., props, !=, null, ), {, for]
[,, originalName, ), ;, }, }, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :]
[), ;, }, }, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :, n, .]
[), {, for, (, Name, p, :, n, ., props, ), {, flattenPrefixes, (, alias, ,, p, ,, 1, )]
[!=, null, ), {, for, (, Name, p, :, n, ., props, ), {, flattenPrefixes, (, alias, ,, p, ,]
[., props, !=, null, ), {, for, (, Name, p, :, n, ., props, ), {, flattenPrefixes, (, alias, ,]
[), {, for, (, Name, p, :, n, ., props, ), {, flattenPrefixes, (, alias, ,, p, ,, 1, )]
[), {, flattenPrefixes, (, alias, ,, p, ,, 1, ), ;, }, }, }, private, void, flattenPrefixes, (, String, alias]
[., props, ), {, flattenPrefixes, (, alias, ,, p, ,, 1, ), ;, }, }, }, private, void, flattenPrefixes, (]
[;, }, }, }, private, void, flattenPrefixes, (, String, alias, ,, Name, n, ,, int, depth, ), {, String, originalName]
[,, p, ,, 1, ), ;, }, }, }, private, void, flattenPrefixes, (, String, alias, ,, Name, n, ,, int]
[,, 1, ), ;, }, }, }, private, void, flattenPrefixes, (, String, alias, ,, Name, n, ,, int, depth, )]
[), ;, }, }, }, private, void, flattenPrefixes, (, String, alias, ,, Name, n, ,, int, depth, ), {, String]
[;, Ref, decl, =, n, ., getDeclaration, (, ), ;, if, (, decl, !=, null, &&, decl, ., node, !=]
[., getFullName, (, ), ;, Ref, decl, =, n, ., getDeclaration, (, ), ;, if, (, decl, !=, null, &&]
[;, if, (, decl, !=, null, &&, decl, ., node, !=, null, &&, decl, ., node, ., isGetProp, (, )]
[., getDeclaration, (, ), ;, if, (, decl, !=, null, &&, decl, ., node, !=, null, &&, decl, ., node]
[), {, flattenNameRefAtDepth, (, alias, ,, decl, ., node, ,, depth, ,, originalName, ), ;, }, for, (, Ref, r]
[&&, decl, ., node, ., isGetProp, (, ), ), {, flattenNameRefAtDepth, (, alias, ,, decl, ., node, ,, depth, ,]
[&&, decl, ., node, !=, null, &&, decl, ., node, ., isGetProp, (, ), ), {, flattenNameRefAtDepth, (, alias, ,]
[!=, null, &&, decl, ., node, !=, null, &&, decl, ., node, ., isGetProp, (, ), ), {, flattenNameRefAtDepth, (]
[&&, decl, ., node, !=, null, &&, decl, ., node, ., isGetProp, (, ), ), {, flattenNameRefAtDepth, (, alias, ,]
[&&, decl, ., node, ., isGetProp, (, ), ), {, flattenNameRefAtDepth, (, alias, ,, decl, ., node, ,, depth, ,]
[!=, null, &&, decl, ., node, ., isGetProp, (, ), ), {, flattenNameRefAtDepth, (, alias, ,, decl, ., node, ,]
[., node, !=, null, &&, decl, ., node, ., isGetProp, (, ), ), {, flattenNameRefAtDepth, (, alias, ,, decl, .]
[&&, decl, ., node, ., isGetProp, (, ), ), {, flattenNameRefAtDepth, (, alias, ,, decl, ., node, ,, depth, ,]
[), {, flattenNameRefAtDepth, (, alias, ,, decl, ., node, ,, depth, ,, originalName, ), ;, }, for, (, Ref, r]
[., isGetProp, (, ), ), {, flattenNameRefAtDepth, (, alias, ,, decl, ., node, ,, depth, ,, originalName, ), ;, }]
[., node, ., isGetProp, (, ), ), {, flattenNameRefAtDepth, (, alias, ,, decl, ., node, ,, depth, ,, originalName, )]
[;, }, for, (, Ref, r, :, n, ., getRefs, (, ), ), {, if, (, r, ==, decl, )]
[,, decl, ., node, ,, depth, ,, originalName, ), ;, }, for, (, Ref, r, :, n, ., getRefs, (]
[,, depth, ,, originalName, ), ;, }, for, (, Ref, r, :, n, ., getRefs, (, ), ), {, if]
[., node, ,, depth, ,, originalName, ), ;, }, for, (, Ref, r, :, n, ., getRefs, (, ), )]
[,, originalName, ), ;, }, for, (, Ref, r, :, n, ., getRefs, (, ), ), {, if, (, r]
[), ;, }, for, (, Ref, r, :, n, ., getRefs, (, ), ), {, if, (, r, ==, decl]
[), {, if, (, r, ==, decl, ), {, continue, ;, }, if, (, r, ., getTwin, (, ), ==]
[., getRefs, (, ), ), {, if, (, r, ==, decl, ), {, continue, ;, }, if, (, r, .]
[), {, continue, ;, }, if, (, r, ., getTwin, (, ), ==, null, ||, r, ., isSet, (, )]
[==, decl, ), {, continue, ;, }, if, (, r, ., getTwin, (, ), ==, null, ||, r, ., isSet]
[), {, continue, ;, }, if, (, r, ., getTwin, (, ), ==, null, ||, r, ., isSet, (, )]
[), {, flattenNameRefAtDepth, (, alias, ,, r, ., node, ,, depth, ,, originalName, ), ;, }, }, if, (, n]
[||, r, ., isSet, (, ), ), {, flattenNameRefAtDepth, (, alias, ,, r, ., node, ,, depth, ,, originalName, )]
[==, null, ||, r, ., isSet, (, ), ), {, flattenNameRefAtDepth, (, alias, ,, r, ., node, ,, depth, ,]
[., getTwin, (, ), ==, null, ||, r, ., isSet, (, ), ), {, flattenNameRefAtDepth, (, alias, ,, r, .]
[||, r, ., isSet, (, ), ), {, flattenNameRefAtDepth, (, alias, ,, r, ., node, ,, depth, ,, originalName, )]
[), {, flattenNameRefAtDepth, (, alias, ,, r, ., node, ,, depth, ,, originalName, ), ;, }, }, if, (, n]
[., isSet, (, ), ), {, flattenNameRefAtDepth, (, alias, ,, r, ., node, ,, depth, ,, originalName, ), ;, }]
[;, }, }, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :, n, ., props]
[,, r, ., node, ,, depth, ,, originalName, ), ;, }, }, if, (, n, ., props, !=, null, )]
[,, depth, ,, originalName, ), ;, }, }, if, (, n, ., props, !=, null, ), {, for, (, Name]
[., node, ,, depth, ,, originalName, ), ;, }, }, if, (, n, ., props, !=, null, ), {, for]
[,, originalName, ), ;, }, }, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :]
[), ;, }, }, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :, n, .]
[), {, for, (, Name, p, :, n, ., props, ), {, flattenPrefixes, (, alias, ,, p, ,, depth, +]
[!=, null, ), {, for, (, Name, p, :, n, ., props, ), {, flattenPrefixes, (, alias, ,, p, ,]
[., props, !=, null, ), {, for, (, Name, p, :, n, ., props, ), {, flattenPrefixes, (, alias, ,]
[), {, for, (, Name, p, :, n, ., props, ), {, flattenPrefixes, (, alias, ,, p, ,, depth, +]
[), {, flattenPrefixes, (, alias, ,, p, ,, depth, +, 1, ), ;, }, }, }, private, void, flattenNameRefAtDepth, (]
[., props, ), {, flattenPrefixes, (, alias, ,, p, ,, depth, +, 1, ), ;, }, }, }, private, void]
[;, }, }, }, private, void, flattenNameRefAtDepth, (, String, alias, ,, Node, n, ,, int, depth, ,, String, originalName, )]
[,, p, ,, depth, +, 1, ), ;, }, }, }, private, void, flattenNameRefAtDepth, (, String, alias, ,, Node, n]
[,, depth, +, 1, ), ;, }, }, }, private, void, flattenNameRefAtDepth, (, String, alias, ,, Node, n, ,, int]
[), ;, }, }, }, private, void, flattenNameRefAtDepth, (, String, alias, ,, Node, n, ,, int, depth, ,, String, originalName]
[+, 1, ), ;, }, }, }, private, void, flattenNameRefAtDepth, (, String, alias, ,, Node, n, ,, int, depth, ,]
[), ;, }, }, }, private, void, flattenNameRefAtDepth, (, String, alias, ,, Node, n, ,, int, depth, ,, String, originalName]
[;, boolean, isQName, =, nType, ==, Token, ., NAME, ||, nType, ==, Token, ., GETPROP, ;, boolean, isObjKey, =, NodeUtil]
[., getType, (, ), ;, boolean, isQName, =, nType, ==, Token, ., NAME, ||, nType, ==, Token, ., GETPROP, ;]
[;, boolean, isObjKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, n, ., getParent, (, ), ), ;, Preconditions, ., checkState]
[||, nType, ==, Token, ., GETPROP, ;, boolean, isObjKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, n, ., getParent, (]
[==, Token, ., NAME, ||, nType, ==, Token, ., GETPROP, ;, boolean, isObjKey, =, NodeUtil, ., isObjectLitKey, (, n, ,]
[||, nType, ==, Token, ., GETPROP, ;, boolean, isObjKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, n, ., getParent, (]
[., NAME, ||, nType, ==, Token, ., GETPROP, ;, boolean, isObjKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, n, .]
[;, boolean, isObjKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, n, ., getParent, (, ), ), ;, Preconditions, ., checkState]
[==, Token, ., GETPROP, ;, boolean, isObjKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, n, ., getParent, (, ), )]
[;, boolean, isObjKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, n, ., getParent, (, ), ), ;, Preconditions, ., checkState]
[., GETPROP, ;, boolean, isObjKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, n, ., getParent, (, ), ), ;, Preconditions]
[;, Preconditions, ., checkState, (, isObjKey, ||, isQName, ), ;, if, (, isQName, ), {, for, (, int, i, =]
[., isObjectLitKey, (, n, ,, n, ., getParent, (, ), ), ;, Preconditions, ., checkState, (, isObjKey, ||, isQName, )]
[,, n, ., getParent, (, ), ), ;, Preconditions, ., checkState, (, isObjKey, ||, isQName, ), ;, if, (, isQName]
[), ;, Preconditions, ., checkState, (, isObjKey, ||, isQName, ), ;, if, (, isQName, ), {, for, (, int, i]
[., getParent, (, ), ), ;, Preconditions, ., checkState, (, isObjKey, ||, isQName, ), ;, if, (, isQName, ), {]
[;, if, (, isQName, ), {, for, (, int, i, =, 1, ;, i, <, depth, &&, n, ., hasChildren]
[., checkState, (, isObjKey, ||, isQName, ), ;, if, (, isQName, ), {, for, (, int, i, =, 1, ;]
[), ;, if, (, isQName, ), {, for, (, int, i, =, 1, ;, i, <, depth, &&, n, .]
[||, isQName, ), ;, if, (, isQName, ), {, for, (, int, i, =, 1, ;, i, <, depth, &&]
[), ;, if, (, isQName, ), {, for, (, int, i, =, 1, ;, i, <, depth, &&, n, .]
[), {, for, (, int, i, =, 1, ;, i, <, depth, &&, n, ., hasChildren, (, ), ;, i]
[;, i, <, depth, &&, n, ., hasChildren, (, ), ;, i, ++, ), {, n, =, n, ., getFirstChild]
[;, i, ++, ), {, n, =, n, ., getFirstChild, (, ), ;, }, if, (, n, ., hasChildren, (]
[&&, n, ., hasChildren, (, ), ;, i, ++, ), {, n, =, n, ., getFirstChild, (, ), ;, }]
[<, depth, &&, n, ., hasChildren, (, ), ;, i, ++, ), {, n, =, n, ., getFirstChild, (, )]
[&&, n, ., hasChildren, (, ), ;, i, ++, ), {, n, =, n, ., getFirstChild, (, ), ;, }]
[;, i, ++, ), {, n, =, n, ., getFirstChild, (, ), ;, }, if, (, n, ., hasChildren, (]
[., hasChildren, (, ), ;, i, ++, ), {, n, =, n, ., getFirstChild, (, ), ;, }, if, (]
[), {, n, =, n, ., getFirstChild, (, ), ;, }, if, (, n, ., hasChildren, (, ), ), {]
[++, ), {, n, =, n, ., getFirstChild, (, ), ;, }, if, (, n, ., hasChildren, (, ), )]
[=, n, ., getFirstChild, (, ), ;, }, if, (, n, ., hasChildren, (, ), ), {, flattenNameRef, (, alias]
[;, }, if, (, n, ., hasChildren, (, ), ), {, flattenNameRef, (, alias, ,, n, ., getFirstChild, (, )]
[., getFirstChild, (, ), ;, }, if, (, n, ., hasChildren, (, ), ), {, flattenNameRef, (, alias, ,, n]
[), {, flattenNameRef, (, alias, ,, n, ., getFirstChild, (, ), ,, n, ,, originalName, ), ;, }, }, }]
[., hasChildren, (, ), ), {, flattenNameRef, (, alias, ,, n, ., getFirstChild, (, ), ,, n, ,, originalName, )]
[;, }, }, }, private, void, flattenNameRef, (, String, alias, ,, Node, n, ,, Node, parent, ,, String, originalName, )]
[,, n, ., getFirstChild, (, ), ,, n, ,, originalName, ), ;, }, }, }, private, void, flattenNameRef, (, String]
[,, n, ,, originalName, ), ;, }, }, }, private, void, flattenNameRef, (, String, alias, ,, Node, n, ,, Node]
[., getFirstChild, (, ), ,, n, ,, originalName, ), ;, }, }, }, private, void, flattenNameRef, (, String, alias, ,]
[,, originalName, ), ;, }, }, }, private, void, flattenNameRef, (, String, alias, ,, Node, n, ,, Node, parent, ,]
[), ;, }, }, }, private, void, flattenNameRef, (, String, alias, ,, Node, n, ,, Node, parent, ,, String, originalName]
[;, NodeUtil, ., copyNameAnnotations, (, n, ., getLastChild, (, ), ,, ref, ), ;, if, (, parent, ., isCall, (]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, n, ,, originalName, ), ;, NodeUtil, ., copyNameAnnotations, (]
[,, alias, ,, n, ,, originalName, ), ;, NodeUtil, ., copyNameAnnotations, (, n, ., getLastChild, (, ), ,, ref, )]
[., getCodingConvention, (, ), ,, alias, ,, n, ,, originalName, ), ;, NodeUtil, ., copyNameAnnotations, (, n, ., getLastChild, (]
[,, n, ,, originalName, ), ;, NodeUtil, ., copyNameAnnotations, (, n, ., getLastChild, (, ), ,, ref, ), ;, if]
[,, originalName, ), ;, NodeUtil, ., copyNameAnnotations, (, n, ., getLastChild, (, ), ,, ref, ), ;, if, (, parent]
[), ;, NodeUtil, ., copyNameAnnotations, (, n, ., getLastChild, (, ), ,, ref, ), ;, if, (, parent, ., isCall]
[;, if, (, parent, ., isCall, (, ), &&, n, ==, parent, ., getFirstChild, (, ), ), {, parent, .]
[., copyNameAnnotations, (, n, ., getLastChild, (, ), ,, ref, ), ;, if, (, parent, ., isCall, (, ), &&]
[,, ref, ), ;, if, (, parent, ., isCall, (, ), &&, n, ==, parent, ., getFirstChild, (, ), )]
[., getLastChild, (, ), ,, ref, ), ;, if, (, parent, ., isCall, (, ), &&, n, ==, parent, .]
[), ;, if, (, parent, ., isCall, (, ), &&, n, ==, parent, ., getFirstChild, (, ), ), {, parent]
[), {, parent, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, JSType, type, =, n, ., getJSType]
[&&, n, ==, parent, ., getFirstChild, (, ), ), {, parent, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[., isCall, (, ), &&, n, ==, parent, ., getFirstChild, (, ), ), {, parent, ., putBooleanProp, (, Node, .]
[), {, parent, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, JSType, type, =, n, ., getJSType]
[==, parent, ., getFirstChild, (, ), ), {, parent, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }]
[), {, parent, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, JSType, type, =, n, ., getJSType]
[., getFirstChild, (, ), ), {, parent, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, JSType, type]
[;, }, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, !=, null, ), {, ref, .]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, JSType, type, =, n, ., getJSType, (, ), ;]
[,, true, ), ;, }, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, !=, null, )]
[., FREE_CALL, ,, true, ), ;, }, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, !=]
[), ;, }, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, !=, null, ), {, ref]
[;, if, (, type, !=, null, ), {, ref, ., setJSType, (, type, ), ;, }, parent, ., replaceChild, (]
[., getJSType, (, ), ;, if, (, type, !=, null, ), {, ref, ., setJSType, (, type, ), ;, }]
[), {, ref, ., setJSType, (, type, ), ;, }, parent, ., replaceChild, (, n, ,, ref, ), ;, compiler]
[!=, null, ), {, ref, ., setJSType, (, type, ), ;, }, parent, ., replaceChild, (, n, ,, ref, )]
[), {, ref, ., setJSType, (, type, ), ;, }, parent, ., replaceChild, (, n, ,, ref, ), ;, compiler]
[;, }, parent, ., replaceChild, (, n, ,, ref, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void]
[., setJSType, (, type, ), ;, }, parent, ., replaceChild, (, n, ,, ref, ), ;, compiler, ., reportCodeChange, (]
[), ;, }, parent, ., replaceChild, (, n, ,, ref, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, void, collapseDeclarationOfNameAndDescendants, (, Name, n, ,, String, alias, ), {, boolean]
[., replaceChild, (, n, ,, ref, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, collapseDeclarationOfNameAndDescendants, (, Name]
[,, ref, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, collapseDeclarationOfNameAndDescendants, (, Name, n, ,, String, alias]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, collapseDeclarationOfNameAndDescendants, (, Name, n, ,, String, alias, ), {]
[;, }, private, void, collapseDeclarationOfNameAndDescendants, (, Name, n, ,, String, alias, ), {, boolean, canCollapseChildNames, =, n, ., canCollapseUnannotatedChildNames, (]
[., reportCodeChange, (, ), ;, }, private, void, collapseDeclarationOfNameAndDescendants, (, Name, n, ,, String, alias, ), {, boolean, canCollapseChildNames, =]
[;, if, (, n, ., canCollapse, (, ), ), {, updateObjLitOrFunctionDeclaration, (, n, ,, alias, ,, canCollapseChildNames, ), ;, }]
[., canCollapseUnannotatedChildNames, (, ), ;, if, (, n, ., canCollapse, (, ), ), {, updateObjLitOrFunctionDeclaration, (, n, ,, alias, ,]
[), {, updateObjLitOrFunctionDeclaration, (, n, ,, alias, ,, canCollapseChildNames, ), ;, }, if, (, n, ., props, !=, null, )]
[., canCollapse, (, ), ), {, updateObjLitOrFunctionDeclaration, (, n, ,, alias, ,, canCollapseChildNames, ), ;, }, if, (, n, .]
[;, }, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :, n, ., props, )]
[,, alias, ,, canCollapseChildNames, ), ;, }, if, (, n, ., props, !=, null, ), {, for, (, Name, p]
[,, canCollapseChildNames, ), ;, }, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :, n]
[), ;, }, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :, n, ., props]
[), {, for, (, Name, p, :, n, ., props, ), {, collapseDeclarationOfNameAndDescendants, (, p, ,, appendPropForAlias, (, alias, ,]
[!=, null, ), {, for, (, Name, p, :, n, ., props, ), {, collapseDeclarationOfNameAndDescendants, (, p, ,, appendPropForAlias, (]
[., props, !=, null, ), {, for, (, Name, p, :, n, ., props, ), {, collapseDeclarationOfNameAndDescendants, (, p, ,]
[), {, for, (, Name, p, :, n, ., props, ), {, collapseDeclarationOfNameAndDescendants, (, p, ,, appendPropForAlias, (, alias, ,]
[), {, collapseDeclarationOfNameAndDescendants, (, p, ,, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ), ;, if, (]
[., props, ), {, collapseDeclarationOfNameAndDescendants, (, p, ,, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ), ;]
[;, if, (, !, p, ., inExterns, &&, canCollapseChildNames, &&, p, ., getDeclaration, (, ), !=, null, &&, p, .]
[,, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ), ;, if, (, !, p, ., inExterns, &&]
[), ;, if, (, !, p, ., inExterns, &&, canCollapseChildNames, &&, p, ., getDeclaration, (, ), !=, null, &&, p]
[,, p, ., getBaseName, (, ), ), ), ;, if, (, !, p, ., inExterns, &&, canCollapseChildNames, &&, p, .]
[), ), ;, if, (, !, p, ., inExterns, &&, canCollapseChildNames, &&, p, ., getDeclaration, (, ), !=, null, &&]
[., getBaseName, (, ), ), ), ;, if, (, !, p, ., inExterns, &&, canCollapseChildNames, &&, p, ., getDeclaration, (]
[), {, updateSimpleDeclaration, (, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ,, p, ,, p, ., getDeclaration]
[&&, p, ., getDeclaration, (, ), ., node, ., getParent, (, ), ., isAssign, (, ), ), {, updateSimpleDeclaration, (]
[&&, p, ., getDeclaration, (, ), ., node, ., getParent, (, ), !=, null, &&, p, ., getDeclaration, (, )]
[&&, p, ., getDeclaration, (, ), ., node, !=, null, &&, p, ., getDeclaration, (, ), ., node, ., getParent]
[&&, p, ., canCollapse, (, ), &&, p, ., getDeclaration, (, ), ., node, !=, null, &&, p, ., getDeclaration]
[&&, p, ., getDeclaration, (, ), !=, null, &&, p, ., canCollapse, (, ), &&, p, ., getDeclaration, (, )]
[&&, canCollapseChildNames, &&, p, ., getDeclaration, (, ), !=, null, &&, p, ., canCollapse, (, ), &&, p, ., getDeclaration]
[&&, canCollapseChildNames, &&, p, ., getDeclaration, (, ), !=, null, &&, p, ., canCollapse, (, ), &&, p, ., getDeclaration]
[., inExterns, &&, canCollapseChildNames, &&, p, ., getDeclaration, (, ), !=, null, &&, p, ., canCollapse, (, ), &&, p]
[&&, p, ., getDeclaration, (, ), !=, null, &&, p, ., canCollapse, (, ), &&, p, ., getDeclaration, (, )]
[&&, p, ., canCollapse, (, ), &&, p, ., getDeclaration, (, ), ., node, !=, null, &&, p, ., getDeclaration]
[!=, null, &&, p, ., canCollapse, (, ), &&, p, ., getDeclaration, (, ), ., node, !=, null, &&, p]
[., getDeclaration, (, ), !=, null, &&, p, ., canCollapse, (, ), &&, p, ., getDeclaration, (, ), ., node]
[&&, p, ., canCollapse, (, ), &&, p, ., getDeclaration, (, ), ., node, !=, null, &&, p, ., getDeclaration]
[&&, p, ., getDeclaration, (, ), ., node, !=, null, &&, p, ., getDeclaration, (, ), ., node, ., getParent]
[., canCollapse, (, ), &&, p, ., getDeclaration, (, ), ., node, !=, null, &&, p, ., getDeclaration, (, )]
[&&, p, ., getDeclaration, (, ), ., node, ., getParent, (, ), !=, null, &&, p, ., getDeclaration, (, )]
[!=, null, &&, p, ., getDeclaration, (, ), ., node, ., getParent, (, ), !=, null, &&, p, ., getDeclaration]
[., node, !=, null, &&, p, ., getDeclaration, (, ), ., node, ., getParent, (, ), !=, null, &&, p]
[., getDeclaration, (, ), ., node, !=, null, &&, p, ., getDeclaration, (, ), ., node, ., getParent, (, )]
[&&, p, ., getDeclaration, (, ), ., node, ., getParent, (, ), !=, null, &&, p, ., getDeclaration, (, )]
[&&, p, ., getDeclaration, (, ), ., node, ., getParent, (, ), ., isAssign, (, ), ), {, updateSimpleDeclaration, (]
[!=, null, &&, p, ., getDeclaration, (, ), ., node, ., getParent, (, ), ., isAssign, (, ), ), {]
[., getParent, (, ), !=, null, &&, p, ., getDeclaration, (, ), ., node, ., getParent, (, ), ., isAssign]
[., node, ., getParent, (, ), !=, null, &&, p, ., getDeclaration, (, ), ., node, ., getParent, (, )]
[., getDeclaration, (, ), ., node, ., getParent, (, ), !=, null, &&, p, ., getDeclaration, (, ), ., node]
[&&, p, ., getDeclaration, (, ), ., node, ., getParent, (, ), ., isAssign, (, ), ), {, updateSimpleDeclaration, (]
[), {, updateSimpleDeclaration, (, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ,, p, ,, p, ., getDeclaration]
[., isAssign, (, ), ), {, updateSimpleDeclaration, (, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ,, p]
[., getParent, (, ), ., isAssign, (, ), ), {, updateSimpleDeclaration, (, appendPropForAlias, (, alias, ,, p, ., getBaseName, (]
[., node, ., getParent, (, ), ., isAssign, (, ), ), {, updateSimpleDeclaration, (, appendPropForAlias, (, alias, ,, p, .]
[., getDeclaration, (, ), ., node, ., getParent, (, ), ., isAssign, (, ), ), {, updateSimpleDeclaration, (, appendPropForAlias, (]
[;, }, }, }, }, private, void, updateSimpleDeclaration, (, String, alias, ,, Name, refName, ,, Ref, ref, ), {, Node]
[,, p, ,, p, ., getDeclaration, (, ), ), ;, }, }, }, }, private, void, updateSimpleDeclaration, (, String, alias]
[,, p, ., getBaseName, (, ), ), ,, p, ,, p, ., getDeclaration, (, ), ), ;, }, }, }]
[), ,, p, ,, p, ., getDeclaration, (, ), ), ;, }, }, }, }, private, void, updateSimpleDeclaration, (, String]
[., getBaseName, (, ), ), ,, p, ,, p, ., getDeclaration, (, ), ), ;, }, }, }, }, private]
[,, p, ., getDeclaration, (, ), ), ;, }, }, }, }, private, void, updateSimpleDeclaration, (, String, alias, ,, Name]
[), ;, }, }, }, }, private, void, updateSimpleDeclaration, (, String, alias, ,, Name, refName, ,, Ref, ref, ), {]
[., getDeclaration, (, ), ), ;, }, }, }, }, private, void, updateSimpleDeclaration, (, String, alias, ,, Name, refName, ,]
[;, Node, parent, =, ref, ., node, ., getParent, (, ), ;, Node, gramps, =, parent, ., getParent, (, )]
[., getNext, (, ), ;, Node, parent, =, ref, ., node, ., getParent, (, ), ;, Node, gramps, =, parent]
[., node, ., getNext, (, ), ;, Node, parent, =, ref, ., node, ., getParent, (, ), ;, Node, gramps]
[;, Node, gramps, =, parent, ., getParent, (, ), ;, Node, greatGramps, =, gramps, ., getParent, (, ), ;, Node]
[., getParent, (, ), ;, Node, gramps, =, parent, ., getParent, (, ), ;, Node, greatGramps, =, gramps, ., getParent]
[., node, ., getParent, (, ), ;, Node, gramps, =, parent, ., getParent, (, ), ;, Node, greatGramps, =, gramps]
[;, Node, greatGramps, =, gramps, ., getParent, (, ), ;, Node, greatGreatGramps, =, greatGramps, ., getParent, (, ), ;, if]
[., getParent, (, ), ;, Node, greatGramps, =, gramps, ., getParent, (, ), ;, Node, greatGreatGramps, =, greatGramps, ., getParent]
[;, Node, greatGreatGramps, =, greatGramps, ., getParent, (, ), ;, if, (, rvalue, !=, null, &&, rvalue, ., isFunction, (]
[., getParent, (, ), ;, Node, greatGreatGramps, =, greatGramps, ., getParent, (, ), ;, if, (, rvalue, !=, null, &&]
[;, if, (, rvalue, !=, null, &&, rvalue, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, rvalue, ,, refName, .]
[., getParent, (, ), ;, if, (, rvalue, !=, null, &&, rvalue, ., isFunction, (, ), ), {, checkForHosedThisReferences, (]
[), {, checkForHosedThisReferences, (, rvalue, ,, refName, ., docInfo, ,, refName, ), ;, }, Node, nameNode, =, NodeUtil, ., newName]
[&&, rvalue, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, rvalue, ,, refName, ., docInfo, ,, refName, ), ;, }]
[!=, null, &&, rvalue, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, rvalue, ,, refName, ., docInfo, ,, refName, )]
[&&, rvalue, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, rvalue, ,, refName, ., docInfo, ,, refName, ), ;, }]
[), {, checkForHosedThisReferences, (, rvalue, ,, refName, ., docInfo, ,, refName, ), ;, }, Node, nameNode, =, NodeUtil, ., newName]
[., isFunction, (, ), ), {, checkForHosedThisReferences, (, rvalue, ,, refName, ., docInfo, ,, refName, ), ;, }, Node, nameNode]
[;, }, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, gramps, ., getFirstChild]
[,, refName, ., docInfo, ,, refName, ), ;, }, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (]
[,, refName, ), ;, }, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,]
[., docInfo, ,, refName, ), ;, }, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,]
[), ;, }, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, gramps, .]
[;, NodeUtil, ., copyNameAnnotations, (, ref, ., node, ., getLastChild, (, ), ,, nameNode, ), ;, if, (, gramps, .]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, gramps, ., getFirstChild, (, ), ,, refName, ., getFullName]
[,, alias, ,, gramps, ., getFirstChild, (, ), ,, refName, ., getFullName, (, ), ), ;, NodeUtil, ., copyNameAnnotations, (]
[., getCodingConvention, (, ), ,, alias, ,, gramps, ., getFirstChild, (, ), ,, refName, ., getFullName, (, ), ), ;]
[,, gramps, ., getFirstChild, (, ), ,, refName, ., getFullName, (, ), ), ;, NodeUtil, ., copyNameAnnotations, (, ref, .]
[,, refName, ., getFullName, (, ), ), ;, NodeUtil, ., copyNameAnnotations, (, ref, ., node, ., getLastChild, (, ), ,]
[., getFirstChild, (, ), ,, refName, ., getFullName, (, ), ), ;, NodeUtil, ., copyNameAnnotations, (, ref, ., node, .]
[), ;, NodeUtil, ., copyNameAnnotations, (, ref, ., node, ., getLastChild, (, ), ,, nameNode, ), ;, if, (, gramps]
[., getFullName, (, ), ), ;, NodeUtil, ., copyNameAnnotations, (, ref, ., node, ., getLastChild, (, ), ,, nameNode, )]
[;, if, (, gramps, ., isExprResult, (, ), ), {, parent, ., removeChild, (, rvalue, ), ;, nameNode, ., addChildToFront]
[., copyNameAnnotations, (, ref, ., node, ., getLastChild, (, ), ,, nameNode, ), ;, if, (, gramps, ., isExprResult, (]
[,, nameNode, ), ;, if, (, gramps, ., isExprResult, (, ), ), {, parent, ., removeChild, (, rvalue, ), ;]
[., getLastChild, (, ), ,, nameNode, ), ;, if, (, gramps, ., isExprResult, (, ), ), {, parent, ., removeChild]
[., node, ., getLastChild, (, ), ,, nameNode, ), ;, if, (, gramps, ., isExprResult, (, ), ), {, parent]
[), ;, if, (, gramps, ., isExprResult, (, ), ), {, parent, ., removeChild, (, rvalue, ), ;, nameNode, .]
[), {, parent, ., removeChild, (, rvalue, ), ;, nameNode, ., addChildToFront, (, rvalue, ), ;, Node, varNode, =, IR]
[., isExprResult, (, ), ), {, parent, ., removeChild, (, rvalue, ), ;, nameNode, ., addChildToFront, (, rvalue, ), ;]
[;, nameNode, ., addChildToFront, (, rvalue, ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ;, greatGramps, .]
[., removeChild, (, rvalue, ), ;, nameNode, ., addChildToFront, (, rvalue, ), ;, Node, varNode, =, IR, ., var, (]
[), ;, nameNode, ., addChildToFront, (, rvalue, ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ;, greatGramps]
[;, Node, varNode, =, IR, ., var, (, nameNode, ), ;, greatGramps, ., replaceChild, (, gramps, ,, varNode, ), ;]
[., addChildToFront, (, rvalue, ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ;, greatGramps, ., replaceChild, (]
[), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ;, greatGramps, ., replaceChild, (, gramps, ,, varNode, )]
[;, greatGramps, ., replaceChild, (, gramps, ,, varNode, ), ;, }, else, {, Preconditions, ., checkNotNull, (, ref, ., getTwin]
[., var, (, nameNode, ), ;, greatGramps, ., replaceChild, (, gramps, ,, varNode, ), ;, }, else, {, Preconditions, .]
[), ;, greatGramps, ., replaceChild, (, gramps, ,, varNode, ), ;, }, else, {, Preconditions, ., checkNotNull, (, ref, .]
[;, }, else, {, Preconditions, ., checkNotNull, (, ref, ., getTwin, (, ), ), ;, Node, current, =, gramps, ;]
[., replaceChild, (, gramps, ,, varNode, ), ;, }, else, {, Preconditions, ., checkNotNull, (, ref, ., getTwin, (, )]
[,, varNode, ), ;, }, else, {, Preconditions, ., checkNotNull, (, ref, ., getTwin, (, ), ), ;, Node, current]
[), ;, }, else, {, Preconditions, ., checkNotNull, (, ref, ., getTwin, (, ), ), ;, Node, current, =, gramps]
[;, Node, current, =, gramps, ;, Node, currentParent, =, gramps, ., getParent, (, ), ;, for, (, ;, !, currentParent]
[., checkNotNull, (, ref, ., getTwin, (, ), ), ;, Node, current, =, gramps, ;, Node, currentParent, =, gramps, .]
[), ;, Node, current, =, gramps, ;, Node, currentParent, =, gramps, ., getParent, (, ), ;, for, (, ;, !]
[., getTwin, (, ), ), ;, Node, current, =, gramps, ;, Node, currentParent, =, gramps, ., getParent, (, ), ;]
[;, Node, currentParent, =, gramps, ., getParent, (, ), ;, for, (, ;, !, currentParent, ., isScript, (, ), &&]
[;, for, (, ;, !, currentParent, ., isScript, (, ), &&, !, currentParent, ., isBlock, (, ), ;, current, =]
[., getParent, (, ), ;, for, (, ;, !, currentParent, ., isScript, (, ), &&, !, currentParent, ., isBlock, (]
[;, current, =, currentParent, ,, currentParent, =, currentParent, ., getParent, (, ), ), {, }, Node, stubVar, =, IR, .]
[&&, !, currentParent, ., isBlock, (, ), ;, current, =, currentParent, ,, currentParent, =, currentParent, ., getParent, (, ), )]
[&&, !, currentParent, ., isBlock, (, ), ;, current, =, currentParent, ,, currentParent, =, currentParent, ., getParent, (, ), )]
[., isScript, (, ), &&, !, currentParent, ., isBlock, (, ), ;, current, =, currentParent, ,, currentParent, =, currentParent, .]
[;, current, =, currentParent, ,, currentParent, =, currentParent, ., getParent, (, ), ), {, }, Node, stubVar, =, IR, .]
[;, current, =, currentParent, ,, currentParent, =, currentParent, ., getParent, (, ), ), {, }, Node, stubVar, =, IR, .]
[., isBlock, (, ), ;, current, =, currentParent, ,, currentParent, =, currentParent, ., getParent, (, ), ), {, }, Node]
[=, currentParent, ,, currentParent, =, currentParent, ., getParent, (, ), ), {, }, Node, stubVar, =, IR, ., var, (]
[,, currentParent, =, currentParent, ., getParent, (, ), ), {, }, Node, stubVar, =, IR, ., var, (, nameNode, .]
[=, currentParent, ., getParent, (, ), ), {, }, Node, stubVar, =, IR, ., var, (, nameNode, ., cloneTree, (]
[), {, }, Node, stubVar, =, IR, ., var, (, nameNode, ., cloneTree, (, ), ), ., copyInformationFrom, (, nameNode]
[., getParent, (, ), ), {, }, Node, stubVar, =, IR, ., var, (, nameNode, ., cloneTree, (, ), )]
[;, currentParent, ., addChildBefore, (, stubVar, ,, current, ), ;, parent, ., replaceChild, (, ref, ., node, ,, nameNode, )]
[., copyInformationFrom, (, nameNode, ), ;, currentParent, ., addChildBefore, (, stubVar, ,, current, ), ;, parent, ., replaceChild, (, ref]
[., var, (, nameNode, ., cloneTree, (, ), ), ., copyInformationFrom, (, nameNode, ), ;, currentParent, ., addChildBefore, (, stubVar]
[), ., copyInformationFrom, (, nameNode, ), ;, currentParent, ., addChildBefore, (, stubVar, ,, current, ), ;, parent, ., replaceChild, (]
[., cloneTree, (, ), ), ., copyInformationFrom, (, nameNode, ), ;, currentParent, ., addChildBefore, (, stubVar, ,, current, ), ;]
[), ;, currentParent, ., addChildBefore, (, stubVar, ,, current, ), ;, parent, ., replaceChild, (, ref, ., node, ,, nameNode]
[;, parent, ., replaceChild, (, ref, ., node, ,, nameNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }]
[., addChildBefore, (, stubVar, ,, current, ), ;, parent, ., replaceChild, (, ref, ., node, ,, nameNode, ), ;, }]
[,, current, ), ;, parent, ., replaceChild, (, ref, ., node, ,, nameNode, ), ;, }, compiler, ., reportCodeChange, (]
[), ;, parent, ., replaceChild, (, ref, ., node, ,, nameNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, private, void, updateObjLitOrFunctionDeclaration, (, Name, n, ,, String, alias, ,, boolean]
[., replaceChild, (, ref, ., node, ,, nameNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, private, void]
[,, nameNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, private, void, updateObjLitOrFunctionDeclaration, (, Name, n, ,, String]
[., node, ,, nameNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, private, void, updateObjLitOrFunctionDeclaration, (, Name, n]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, private, void, updateObjLitOrFunctionDeclaration, (, Name, n, ,, String, alias, ,]
[;, }, private, void, updateObjLitOrFunctionDeclaration, (, Name, n, ,, String, alias, ,, boolean, canCollapseChildNames, ), {, Ref, decl, =, n]
[., reportCodeChange, (, ), ;, }, private, void, updateObjLitOrFunctionDeclaration, (, Name, n, ,, String, alias, ,, boolean, canCollapseChildNames, ), {]
[;, if, (, decl, ==, null, ), {, return, ;, }, if, (, decl, ., getTwin, (, ), !=, null]
[., getDeclaration, (, ), ;, if, (, decl, ==, null, ), {, return, ;, }, if, (, decl, ., getTwin]
[), {, return, ;, }, if, (, decl, ., getTwin, (, ), !=, null, ), {, return, ;, }, switch]
[==, null, ), {, return, ;, }, if, (, decl, ., getTwin, (, ), !=, null, ), {, return, ;]
[), {, return, ;, }, if, (, decl, ., getTwin, (, ), !=, null, ), {, return, ;, }, switch]
[), {, return, ;, }, switch, (, decl, ., node, ., getParent, (, ), ., getType, (, ), ), {]
[!=, null, ), {, return, ;, }, switch, (, decl, ., node, ., getParent, (, ), ., getType, (, )]
[., getTwin, (, ), !=, null, ), {, return, ;, }, switch, (, decl, ., node, ., getParent, (, )]
[), {, return, ;, }, switch, (, decl, ., node, ., getParent, (, ), ., getType, (, ), ), {]
[), {, case, Token, ., ASSIGN, :, updateObjLitOrFunctionDeclarationAtAssignNode, (, n, ,, alias, ,, canCollapseChildNames, ), ;, break, ;, case, Token]
[., getType, (, ), ), {, case, Token, ., ASSIGN, :, updateObjLitOrFunctionDeclarationAtAssignNode, (, n, ,, alias, ,, canCollapseChildNames, ), ;]
[., getParent, (, ), ., getType, (, ), ), {, case, Token, ., ASSIGN, :, updateObjLitOrFunctionDeclarationAtAssignNode, (, n, ,, alias]
[., node, ., getParent, (, ), ., getType, (, ), ), {, case, Token, ., ASSIGN, :, updateObjLitOrFunctionDeclarationAtAssignNode, (, n]
[:, updateObjLitOrFunctionDeclarationAtAssignNode, (, n, ,, alias, ,, canCollapseChildNames, ), ;, break, ;, case, Token, ., VAR, :, updateObjLitOrFunctionDeclarationAtVarNode, (, n]
[., ASSIGN, :, updateObjLitOrFunctionDeclarationAtAssignNode, (, n, ,, alias, ,, canCollapseChildNames, ), ;, break, ;, case, Token, ., VAR, :, updateObjLitOrFunctionDeclarationAtVarNode]
[;, break, ;, case, Token, ., VAR, :, updateObjLitOrFunctionDeclarationAtVarNode, (, n, ,, canCollapseChildNames, ), ;, break, ;, case, Token, .]
[,, alias, ,, canCollapseChildNames, ), ;, break, ;, case, Token, ., VAR, :, updateObjLitOrFunctionDeclarationAtVarNode, (, n, ,, canCollapseChildNames, ), ;]
[,, canCollapseChildNames, ), ;, break, ;, case, Token, ., VAR, :, updateObjLitOrFunctionDeclarationAtVarNode, (, n, ,, canCollapseChildNames, ), ;, break, ;]
[), ;, break, ;, case, Token, ., VAR, :, updateObjLitOrFunctionDeclarationAtVarNode, (, n, ,, canCollapseChildNames, ), ;, break, ;, case, Token]
[:, updateObjLitOrFunctionDeclarationAtVarNode, (, n, ,, canCollapseChildNames, ), ;, break, ;, case, Token, ., FUNCTION, :, updateFunctionDeclarationAtFunctionNode, (, n, ,, canCollapseChildNames]
[., VAR, :, updateObjLitOrFunctionDeclarationAtVarNode, (, n, ,, canCollapseChildNames, ), ;, break, ;, case, Token, ., FUNCTION, :, updateFunctionDeclarationAtFunctionNode, (, n]
[;, break, ;, case, Token, ., FUNCTION, :, updateFunctionDeclarationAtFunctionNode, (, n, ,, canCollapseChildNames, ), ;, break, ;, }, }, private]
[,, canCollapseChildNames, ), ;, break, ;, case, Token, ., FUNCTION, :, updateFunctionDeclarationAtFunctionNode, (, n, ,, canCollapseChildNames, ), ;, break, ;]
[), ;, break, ;, case, Token, ., FUNCTION, :, updateFunctionDeclarationAtFunctionNode, (, n, ,, canCollapseChildNames, ), ;, break, ;, }, }]
[:, updateFunctionDeclarationAtFunctionNode, (, n, ,, canCollapseChildNames, ), ;, break, ;, }, }, private, void, updateObjLitOrFunctionDeclarationAtAssignNode, (, Name, n, ,, String]
[., FUNCTION, :, updateFunctionDeclarationAtFunctionNode, (, n, ,, canCollapseChildNames, ), ;, break, ;, }, }, private, void, updateObjLitOrFunctionDeclarationAtAssignNode, (, Name, n]
[;, break, ;, }, }, private, void, updateObjLitOrFunctionDeclarationAtAssignNode, (, Name, n, ,, String, alias, ,, boolean, canCollapseChildNames, ), {, Ref]
[,, canCollapseChildNames, ), ;, break, ;, }, }, private, void, updateObjLitOrFunctionDeclarationAtAssignNode, (, Name, n, ,, String, alias, ,, boolean, canCollapseChildNames]
[), ;, break, ;, }, }, private, void, updateObjLitOrFunctionDeclarationAtAssignNode, (, Name, n, ,, String, alias, ,, boolean, canCollapseChildNames, ), {]
[;, Node, rvalue, =, ref, ., node, ., getNext, (, ), ;, Node, varNode, =, new, Node, (, Token, .]
[., getDeclaration, (, ), ;, Node, rvalue, =, ref, ., node, ., getNext, (, ), ;, Node, varNode, =, new]
[;, Node, varNode, =, new, Node, (, Token, ., VAR, ), ;, Node, varParent, =, ref, ., node, ., getAncestor]
[., getNext, (, ), ;, Node, varNode, =, new, Node, (, Token, ., VAR, ), ;, Node, varParent, =, ref]
[., node, ., getNext, (, ), ;, Node, varNode, =, new, Node, (, Token, ., VAR, ), ;, Node, varParent]
[;, Node, varParent, =, ref, ., node, ., getAncestor, (, 3, ), ;, Node, gramps, =, ref, ., node, .]
[), ;, Node, varParent, =, ref, ., node, ., getAncestor, (, 3, ), ;, Node, gramps, =, ref, ., node]
[., VAR, ), ;, Node, varParent, =, ref, ., node, ., getAncestor, (, 3, ), ;, Node, gramps, =, ref]
[;, Node, gramps, =, ref, ., node, ., getAncestor, (, 2, ), ;, boolean, isObjLit, =, rvalue, ., isObjectLit, (]
[., getAncestor, (, 3, ), ;, Node, gramps, =, ref, ., node, ., getAncestor, (, 2, ), ;, boolean, isObjLit]
[., node, ., getAncestor, (, 3, ), ;, Node, gramps, =, ref, ., node, ., getAncestor, (, 2, ), ;]
[), ;, Node, gramps, =, ref, ., node, ., getAncestor, (, 2, ), ;, boolean, isObjLit, =, rvalue, ., isObjectLit]
[;, boolean, isObjLit, =, rvalue, ., isObjectLit, (, ), ;, boolean, insertedVarNode, =, false, ;, if, (, isObjLit, &&, n]
[., getAncestor, (, 2, ), ;, boolean, isObjLit, =, rvalue, ., isObjectLit, (, ), ;, boolean, insertedVarNode, =, false, ;]
[., node, ., getAncestor, (, 2, ), ;, boolean, isObjLit, =, rvalue, ., isObjectLit, (, ), ;, boolean, insertedVarNode, =]
[), ;, boolean, isObjLit, =, rvalue, ., isObjectLit, (, ), ;, boolean, insertedVarNode, =, false, ;, if, (, isObjLit, &&]
[;, boolean, insertedVarNode, =, false, ;, if, (, isObjLit, &&, n, ., canEliminate, (, ), ), {, varParent, ., replaceChild]
[., isObjectLit, (, ), ;, boolean, insertedVarNode, =, false, ;, if, (, isObjLit, &&, n, ., canEliminate, (, ), )]
[;, if, (, isObjLit, &&, n, ., canEliminate, (, ), ), {, varParent, ., replaceChild, (, gramps, ,, varNode, )]
[), {, varParent, ., replaceChild, (, gramps, ,, varNode, ), ;, ref, ., node, =, null, ;, insertedVarNode, =, true]
[&&, n, ., canEliminate, (, ), ), {, varParent, ., replaceChild, (, gramps, ,, varNode, ), ;, ref, ., node]
[), {, varParent, ., replaceChild, (, gramps, ,, varNode, ), ;, ref, ., node, =, null, ;, insertedVarNode, =, true]
[., canEliminate, (, ), ), {, varParent, ., replaceChild, (, gramps, ,, varNode, ), ;, ref, ., node, =, null]
[;, ref, ., node, =, null, ;, insertedVarNode, =, true, ;, }, else, if, (, !, n, ., isSimpleName, (]
[., replaceChild, (, gramps, ,, varNode, ), ;, ref, ., node, =, null, ;, insertedVarNode, =, true, ;, }, else]
[,, varNode, ), ;, ref, ., node, =, null, ;, insertedVarNode, =, true, ;, }, else, if, (, !, n]
[), ;, ref, ., node, =, null, ;, insertedVarNode, =, true, ;, }, else, if, (, !, n, ., isSimpleName]
[=, null, ;, insertedVarNode, =, true, ;, }, else, if, (, !, n, ., isSimpleName, (, ), ), {, if]
[., node, =, null, ;, insertedVarNode, =, true, ;, }, else, if, (, !, n, ., isSimpleName, (, ), )]
[;, insertedVarNode, =, true, ;, }, else, if, (, !, n, ., isSimpleName, (, ), ), {, if, (, rvalue]
[=, true, ;, }, else, if, (, !, n, ., isSimpleName, (, ), ), {, if, (, rvalue, ., isFunction]
[;, }, else, if, (, !, n, ., isSimpleName, (, ), ), {, if, (, rvalue, ., isFunction, (, )]
[), {, if, (, rvalue, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, rvalue, ,, n, ., docInfo, ,, n]
[), {, if, (, rvalue, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, rvalue, ,, n, ., docInfo, ,, n]
[., isSimpleName, (, ), ), {, if, (, rvalue, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, rvalue, ,, n]
[), {, checkForHosedThisReferences, (, rvalue, ,, n, ., docInfo, ,, n, ), ;, }, ref, ., node, ., getParent, (]
[., isFunction, (, ), ), {, checkForHosedThisReferences, (, rvalue, ,, n, ., docInfo, ,, n, ), ;, }, ref, .]
[;, }, ref, ., node, ., getParent, (, ), ., removeChild, (, rvalue, ), ;, Node, nameNode, =, NodeUtil, .]
[,, n, ., docInfo, ,, n, ), ;, }, ref, ., node, ., getParent, (, ), ., removeChild, (, rvalue]
[,, n, ), ;, }, ref, ., node, ., getParent, (, ), ., removeChild, (, rvalue, ), ;, Node, nameNode]
[., docInfo, ,, n, ), ;, }, ref, ., node, ., getParent, (, ), ., removeChild, (, rvalue, ), ;]
[), ;, }, ref, ., node, ., getParent, (, ), ., removeChild, (, rvalue, ), ;, Node, nameNode, =, NodeUtil]
[;, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, ref, ., node, .]
[., removeChild, (, rvalue, ), ;, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias]
[., getParent, (, ), ., removeChild, (, rvalue, ), ;, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention]
[., node, ., getParent, (, ), ., removeChild, (, rvalue, ), ;, Node, nameNode, =, NodeUtil, ., newName, (, compiler]
[), ;, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, ref, ., node]
[;, JSDocInfo, info, =, ref, ., node, ., getParent, (, ), ., getJSDocInfo, (, ), ;, if, (, ref, .]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, ref, ., node, ., getAncestor, (, 2, ), ,]
[,, alias, ,, ref, ., node, ., getAncestor, (, 2, ), ,, n, ., getFullName, (, ), ), ;, JSDocInfo]
[., getCodingConvention, (, ), ,, alias, ,, ref, ., node, ., getAncestor, (, 2, ), ,, n, ., getFullName, (]
[,, ref, ., node, ., getAncestor, (, 2, ), ,, n, ., getFullName, (, ), ), ;, JSDocInfo, info, =]
[,, n, ., getFullName, (, ), ), ;, JSDocInfo, info, =, ref, ., node, ., getParent, (, ), ., getJSDocInfo]
[., getAncestor, (, 2, ), ,, n, ., getFullName, (, ), ), ;, JSDocInfo, info, =, ref, ., node, .]
[., node, ., getAncestor, (, 2, ), ,, n, ., getFullName, (, ), ), ;, JSDocInfo, info, =, ref, .]
[), ,, n, ., getFullName, (, ), ), ;, JSDocInfo, info, =, ref, ., node, ., getParent, (, ), .]
[), ;, JSDocInfo, info, =, ref, ., node, ., getParent, (, ), ., getJSDocInfo, (, ), ;, if, (, ref]
[., getFullName, (, ), ), ;, JSDocInfo, info, =, ref, ., node, ., getParent, (, ), ., getJSDocInfo, (, )]
[;, if, (, ref, ., node, ., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ||, (, info]
[., getJSDocInfo, (, ), ;, if, (, ref, ., node, ., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME]
[., getParent, (, ), ., getJSDocInfo, (, ), ;, if, (, ref, ., node, ., getLastChild, (, ), ., getBooleanProp]
[., node, ., getParent, (, ), ., getJSDocInfo, (, ), ;, if, (, ref, ., node, ., getLastChild, (, )]
[), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (, info, !=, null, )]
[||, (, info, !=, null, &&, info, ., isConstant, (, ), ), ), {, nameNode, ., putBooleanProp, (, Node, .]
[., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ||, (, info, !=, null, &&, info, ., isConstant, (, ), ), )]
[., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ||, (, info, !=, null, &&, info, ., isConstant]
[., node, ., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ||, (, info, !=, null, &&, info]
[), ||, (, info, !=, null, &&, info, ., isConstant, (, ), ), ), {, nameNode, ., putBooleanProp, (, Node]
[., IS_CONSTANT_NAME, ), ||, (, info, !=, null, &&, info, ., isConstant, (, ), ), ), {, nameNode, ., putBooleanProp]
[), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (, info, !=, null, )]
[), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (, info, !=, null]
[&&, info, ., isConstant, (, ), ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;]
[!=, null, &&, info, ., isConstant, (, ), ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true]
[&&, info, ., isConstant, (, ), ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;]
[), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (, info, !=, null]
[., isConstant, (, ), ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if]
[;, }, if, (, info, !=, null, ), {, varNode, ., setJSDocInfo, (, info, ), ;, }, varNode, ., addChildToBack]
[., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (, info, !=, null, ), {, varNode, .]
[,, true, ), ;, }, if, (, info, !=, null, ), {, varNode, ., setJSDocInfo, (, info, ), ;, }]
[., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (, info, !=, null, ), {, varNode, ., setJSDocInfo, (, info, )]
[), ;, }, if, (, info, !=, null, ), {, varNode, ., setJSDocInfo, (, info, ), ;, }, varNode, .]
[), {, varNode, ., setJSDocInfo, (, info, ), ;, }, varNode, ., addChildToBack, (, nameNode, ), ;, nameNode, ., addChildToFront]
[!=, null, ), {, varNode, ., setJSDocInfo, (, info, ), ;, }, varNode, ., addChildToBack, (, nameNode, ), ;, nameNode]
[), {, varNode, ., setJSDocInfo, (, info, ), ;, }, varNode, ., addChildToBack, (, nameNode, ), ;, nameNode, ., addChildToFront]
[;, }, varNode, ., addChildToBack, (, nameNode, ), ;, nameNode, ., addChildToFront, (, rvalue, ), ;, varParent, ., replaceChild, (]
[., setJSDocInfo, (, info, ), ;, }, varNode, ., addChildToBack, (, nameNode, ), ;, nameNode, ., addChildToFront, (, rvalue, )]
[), ;, }, varNode, ., addChildToBack, (, nameNode, ), ;, nameNode, ., addChildToFront, (, rvalue, ), ;, varParent, ., replaceChild]
[;, nameNode, ., addChildToFront, (, rvalue, ), ;, varParent, ., replaceChild, (, gramps, ,, varNode, ), ;, ref, ., node]
[., addChildToBack, (, nameNode, ), ;, nameNode, ., addChildToFront, (, rvalue, ), ;, varParent, ., replaceChild, (, gramps, ,, varNode]
[), ;, nameNode, ., addChildToFront, (, rvalue, ), ;, varParent, ., replaceChild, (, gramps, ,, varNode, ), ;, ref, .]
[;, varParent, ., replaceChild, (, gramps, ,, varNode, ), ;, ref, ., node, =, nameNode, ;, insertedVarNode, =, true, ;]
[., addChildToFront, (, rvalue, ), ;, varParent, ., replaceChild, (, gramps, ,, varNode, ), ;, ref, ., node, =, nameNode]
[), ;, varParent, ., replaceChild, (, gramps, ,, varNode, ), ;, ref, ., node, =, nameNode, ;, insertedVarNode, =, true]
[;, ref, ., node, =, nameNode, ;, insertedVarNode, =, true, ;, }, if, (, canCollapseChildNames, ), {, if, (, isObjLit]
[., replaceChild, (, gramps, ,, varNode, ), ;, ref, ., node, =, nameNode, ;, insertedVarNode, =, true, ;, }, if]
[,, varNode, ), ;, ref, ., node, =, nameNode, ;, insertedVarNode, =, true, ;, }, if, (, canCollapseChildNames, ), {]
[), ;, ref, ., node, =, nameNode, ;, insertedVarNode, =, true, ;, }, if, (, canCollapseChildNames, ), {, if, (]
[=, nameNode, ;, insertedVarNode, =, true, ;, }, if, (, canCollapseChildNames, ), {, if, (, isObjLit, ), {, declareVarsForObjLitValues, (]
[., node, =, nameNode, ;, insertedVarNode, =, true, ;, }, if, (, canCollapseChildNames, ), {, if, (, isObjLit, ), {]
[;, insertedVarNode, =, true, ;, }, if, (, canCollapseChildNames, ), {, if, (, isObjLit, ), {, declareVarsForObjLitValues, (, n, ,]
[=, true, ;, }, if, (, canCollapseChildNames, ), {, if, (, isObjLit, ), {, declareVarsForObjLitValues, (, n, ,, alias, ,]
[;, }, if, (, canCollapseChildNames, ), {, if, (, isObjLit, ), {, declareVarsForObjLitValues, (, n, ,, alias, ,, rvalue, ,]
[), {, if, (, isObjLit, ), {, declareVarsForObjLitValues, (, n, ,, alias, ,, rvalue, ,, varNode, ,, varParent, ., getChildBefore]
[), {, declareVarsForObjLitValues, (, n, ,, alias, ,, rvalue, ,, varNode, ,, varParent, ., getChildBefore, (, varNode, ), ,, varParent]
[;, }, addStubsForUndeclaredProperties, (, n, ,, alias, ,, varParent, ,, varNode, ), ;, }, if, (, insertedVarNode, ), {, if]
[,, alias, ,, rvalue, ,, varNode, ,, varParent, ., getChildBefore, (, varNode, ), ,, varParent, ), ;, }, addStubsForUndeclaredProperties, (]
[,, rvalue, ,, varNode, ,, varParent, ., getChildBefore, (, varNode, ), ,, varParent, ), ;, }, addStubsForUndeclaredProperties, (, n, ,]
[,, varNode, ,, varParent, ., getChildBefore, (, varNode, ), ,, varParent, ), ;, }, addStubsForUndeclaredProperties, (, n, ,, alias, ,]
[,, varParent, ., getChildBefore, (, varNode, ), ,, varParent, ), ;, }, addStubsForUndeclaredProperties, (, n, ,, alias, ,, varParent, ,]
[,, varParent, ), ;, }, addStubsForUndeclaredProperties, (, n, ,, alias, ,, varParent, ,, varNode, ), ;, }, if, (, insertedVarNode]
[., getChildBefore, (, varNode, ), ,, varParent, ), ;, }, addStubsForUndeclaredProperties, (, n, ,, alias, ,, varParent, ,, varNode, )]
[), ,, varParent, ), ;, }, addStubsForUndeclaredProperties, (, n, ,, alias, ,, varParent, ,, varNode, ), ;, }, if, (]
[), ;, }, addStubsForUndeclaredProperties, (, n, ,, alias, ,, varParent, ,, varNode, ), ;, }, if, (, insertedVarNode, ), {]
[;, }, if, (, insertedVarNode, ), {, if, (, !, varNode, ., hasChildren, (, ), ), {, varParent, ., removeChild]
[,, alias, ,, varParent, ,, varNode, ), ;, }, if, (, insertedVarNode, ), {, if, (, !, varNode, ., hasChildren]
[,, varParent, ,, varNode, ), ;, }, if, (, insertedVarNode, ), {, if, (, !, varNode, ., hasChildren, (, )]
[,, varNode, ), ;, }, if, (, insertedVarNode, ), {, if, (, !, varNode, ., hasChildren, (, ), ), {]
[), ;, }, if, (, insertedVarNode, ), {, if, (, !, varNode, ., hasChildren, (, ), ), {, varParent, .]
[), {, if, (, !, varNode, ., hasChildren, (, ), ), {, varParent, ., removeChild, (, varNode, ), ;, }]
[), {, varParent, ., removeChild, (, varNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, void]
[), {, varParent, ., removeChild, (, varNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, void]
[., hasChildren, (, ), ), {, varParent, ., removeChild, (, varNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, checkForHosedThisReferences, (, Node, function, ,, JSDocInfo, docInfo, ,]
[., removeChild, (, varNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, checkForHosedThisReferences, (, Node]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, checkForHosedThisReferences, (, Node, function, ,, JSDocInfo, docInfo]
[;, }, }, private, void, checkForHosedThisReferences, (, Node, function, ,, JSDocInfo, docInfo, ,, final, Name, name, ), {, if, (]
[., reportCodeChange, (, ), ;, }, }, private, void, checkForHosedThisReferences, (, Node, function, ,, JSDocInfo, docInfo, ,, final, Name, name]
[), {, NodeTraversal, ., traverse, (, compiler, ,, function, ., getLastChild, (, ), ,, new, NodeTraversal, ., AbstractShallowCallback, (, )]
[||, (, !, docInfo, ., isConstructor, (, ), &&, !, docInfo, ., hasThisType, (, ), ), ), {, NodeTraversal, .]
[==, null, ||, (, !, docInfo, ., isConstructor, (, ), &&, !, docInfo, ., hasThisType, (, ), ), ), {]
[||, (, !, docInfo, ., isConstructor, (, ), &&, !, docInfo, ., hasThisType, (, ), ), ), {, NodeTraversal, .]
[), {, NodeTraversal, ., traverse, (, compiler, ,, function, ., getLastChild, (, ), ,, new, NodeTraversal, ., AbstractShallowCallback, (, )]
[), ), {, NodeTraversal, ., traverse, (, compiler, ,, function, ., getLastChild, (, ), ,, new, NodeTraversal, ., AbstractShallowCallback, (]
[&&, !, docInfo, ., hasThisType, (, ), ), ), {, NodeTraversal, ., traverse, (, compiler, ,, function, ., getLastChild, (]
[&&, !, docInfo, ., hasThisType, (, ), ), ), {, NodeTraversal, ., traverse, (, compiler, ,, function, ., getLastChild, (]
[., isConstructor, (, ), &&, !, docInfo, ., hasThisType, (, ), ), ), {, NodeTraversal, ., traverse, (, compiler, ,]
[), ), {, NodeTraversal, ., traverse, (, compiler, ,, function, ., getLastChild, (, ), ,, new, NodeTraversal, ., AbstractShallowCallback, (]
[), ), {, NodeTraversal, ., traverse, (, compiler, ,, function, ., getLastChild, (, ), ,, new, NodeTraversal, ., AbstractShallowCallback, (]
[., hasThisType, (, ), ), ), {, NodeTraversal, ., traverse, (, compiler, ,, function, ., getLastChild, (, ), ,, new]
[;, }, }, private, void, updateObjLitOrFunctionDeclarationAtVarNode, (, Name, n, ,, boolean, canCollapseChildNames, ), {, if, (, !, canCollapseChildNames, ), {]
[., traverse, (, compiler, ,, function, ., getLastChild, (, ), ,, new, NodeTraversal, ., AbstractShallowCallback, (, ), {, @, Override]
[,, function, ., getLastChild, (, ), ,, new, NodeTraversal, ., AbstractShallowCallback, (, ), {, @, Override, public, void, visit, (]
[,, new, NodeTraversal, ., AbstractShallowCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[., getLastChild, (, ), ,, new, NodeTraversal, ., AbstractShallowCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t]
[), ;, }, }, private, void, updateObjLitOrFunctionDeclarationAtVarNode, (, Name, n, ,, boolean, canCollapseChildNames, ), {, if, (, !, canCollapseChildNames, )]
[), {, compiler, ., report, (, JSError, ., make, (, name, ., getDeclaration, (, ), ., getSourceName, (, ), ,]
[., isThis, (, ), ), {, compiler, ., report, (, JSError, ., make, (, name, ., getDeclaration, (, ), .]
[;, }, }, }, ), ;, }, }, private, void, updateObjLitOrFunctionDeclarationAtVarNode, (, Name, n, ,, boolean, canCollapseChildNames, ), {, if]
[., report, (, JSError, ., make, (, name, ., getDeclaration, (, ), ., getSourceName, (, ), ,, n, ,, UNSAFE_THIS]
[), ;, }, }, }, ), ;, }, }, private, void, updateObjLitOrFunctionDeclarationAtVarNode, (, Name, n, ,, boolean, canCollapseChildNames, ), {]
[., make, (, name, ., getDeclaration, (, ), ., getSourceName, (, ), ,, n, ,, UNSAFE_THIS, ,, name, ., getFullName]
[,, n, ,, UNSAFE_THIS, ,, name, ., getFullName, (, ), ), ), ;, }, }, }, ), ;, }, }]
[., getSourceName, (, ), ,, n, ,, UNSAFE_THIS, ,, name, ., getFullName, (, ), ), ), ;, }, }, }]
[., getDeclaration, (, ), ., getSourceName, (, ), ,, n, ,, UNSAFE_THIS, ,, name, ., getFullName, (, ), ), )]
[,, UNSAFE_THIS, ,, name, ., getFullName, (, ), ), ), ;, }, }, }, ), ;, }, }, private, void]
[,, name, ., getFullName, (, ), ), ), ;, }, }, }, ), ;, }, }, private, void, updateObjLitOrFunctionDeclarationAtVarNode, (]
[), ), ;, }, }, }, ), ;, }, }, private, void, updateObjLitOrFunctionDeclarationAtVarNode, (, Name, n, ,, boolean, canCollapseChildNames, )]
[., getFullName, (, ), ), ), ;, }, }, }, ), ;, }, }, private, void, updateObjLitOrFunctionDeclarationAtVarNode, (, Name, n]
[), {, return, ;, }, Ref, ref, =, n, ., getDeclaration, (, ), ;, String, name, =, ref, ., node]
[), {, return, ;, }, Ref, ref, =, n, ., getDeclaration, (, ), ;, String, name, =, ref, ., node]
[;, String, name, =, ref, ., node, ., getString, (, ), ;, Node, rvalue, =, ref, ., node, ., getFirstChild]
[., getDeclaration, (, ), ;, String, name, =, ref, ., node, ., getString, (, ), ;, Node, rvalue, =, ref]
[;, Node, rvalue, =, ref, ., node, ., getFirstChild, (, ), ;, Node, varNode, =, ref, ., node, ., getParent]
[., getString, (, ), ;, Node, rvalue, =, ref, ., node, ., getFirstChild, (, ), ;, Node, varNode, =, ref]
[., node, ., getString, (, ), ;, Node, rvalue, =, ref, ., node, ., getFirstChild, (, ), ;, Node, varNode]
[;, Node, varNode, =, ref, ., node, ., getParent, (, ), ;, Node, gramps, =, varNode, ., getParent, (, )]
[., getFirstChild, (, ), ;, Node, varNode, =, ref, ., node, ., getParent, (, ), ;, Node, gramps, =, varNode]
[., node, ., getFirstChild, (, ), ;, Node, varNode, =, ref, ., node, ., getParent, (, ), ;, Node, gramps]
[;, Node, gramps, =, varNode, ., getParent, (, ), ;, boolean, isObjLit, =, rvalue, ., isObjectLit, (, ), ;, int]
[., getParent, (, ), ;, Node, gramps, =, varNode, ., getParent, (, ), ;, boolean, isObjLit, =, rvalue, ., isObjectLit]
[., node, ., getParent, (, ), ;, Node, gramps, =, varNode, ., getParent, (, ), ;, boolean, isObjLit, =, rvalue]
[;, boolean, isObjLit, =, rvalue, ., isObjectLit, (, ), ;, int, numChanges, =, 0, ;, if, (, isObjLit, ), {]
[., getParent, (, ), ;, boolean, isObjLit, =, rvalue, ., isObjectLit, (, ), ;, int, numChanges, =, 0, ;, if]
[;, int, numChanges, =, 0, ;, if, (, isObjLit, ), {, numChanges, +=, declareVarsForObjLitValues, (, n, ,, name, ,, rvalue]
[., isObjectLit, (, ), ;, int, numChanges, =, 0, ;, if, (, isObjLit, ), {, numChanges, +=, declareVarsForObjLitValues, (, n]
[;, if, (, isObjLit, ), {, numChanges, +=, declareVarsForObjLitValues, (, n, ,, name, ,, rvalue, ,, varNode, ,, gramps, .]
[), {, numChanges, +=, declareVarsForObjLitValues, (, n, ,, name, ,, rvalue, ,, varNode, ,, gramps, ., getChildBefore, (, varNode, )]
[+=, declareVarsForObjLitValues, (, n, ,, name, ,, rvalue, ,, varNode, ,, gramps, ., getChildBefore, (, varNode, ), ,, gramps, )]
[;, }, numChanges, +=, addStubsForUndeclaredProperties, (, n, ,, name, ,, gramps, ,, varNode, ), ;, if, (, isObjLit, &&, n]
[,, name, ,, rvalue, ,, varNode, ,, gramps, ., getChildBefore, (, varNode, ), ,, gramps, ), ;, }, numChanges, +=]
[,, rvalue, ,, varNode, ,, gramps, ., getChildBefore, (, varNode, ), ,, gramps, ), ;, }, numChanges, +=, addStubsForUndeclaredProperties, (]
[,, varNode, ,, gramps, ., getChildBefore, (, varNode, ), ,, gramps, ), ;, }, numChanges, +=, addStubsForUndeclaredProperties, (, n, ,]
[,, gramps, ., getChildBefore, (, varNode, ), ,, gramps, ), ;, }, numChanges, +=, addStubsForUndeclaredProperties, (, n, ,, name, ,]
[,, gramps, ), ;, }, numChanges, +=, addStubsForUndeclaredProperties, (, n, ,, name, ,, gramps, ,, varNode, ), ;, if, (]
[., getChildBefore, (, varNode, ), ,, gramps, ), ;, }, numChanges, +=, addStubsForUndeclaredProperties, (, n, ,, name, ,, gramps, ,]
[), ,, gramps, ), ;, }, numChanges, +=, addStubsForUndeclaredProperties, (, n, ,, name, ,, gramps, ,, varNode, ), ;, if]
[), ;, }, numChanges, +=, addStubsForUndeclaredProperties, (, n, ,, name, ,, gramps, ,, varNode, ), ;, if, (, isObjLit, &&]
[+=, addStubsForUndeclaredProperties, (, n, ,, name, ,, gramps, ,, varNode, ), ;, if, (, isObjLit, &&, n, ., canEliminate, (]
[;, if, (, isObjLit, &&, n, ., canEliminate, (, ), ), {, varNode, ., removeChild, (, ref, ., node, )]
[,, name, ,, gramps, ,, varNode, ), ;, if, (, isObjLit, &&, n, ., canEliminate, (, ), ), {, varNode]
[,, gramps, ,, varNode, ), ;, if, (, isObjLit, &&, n, ., canEliminate, (, ), ), {, varNode, ., removeChild]
[,, varNode, ), ;, if, (, isObjLit, &&, n, ., canEliminate, (, ), ), {, varNode, ., removeChild, (, ref]
[), ;, if, (, isObjLit, &&, n, ., canEliminate, (, ), ), {, varNode, ., removeChild, (, ref, ., node]
[), {, varNode, ., removeChild, (, ref, ., node, ), ;, if, (, !, varNode, ., hasChildren, (, ), )]
[&&, n, ., canEliminate, (, ), ), {, varNode, ., removeChild, (, ref, ., node, ), ;, if, (, !]
[), {, varNode, ., removeChild, (, ref, ., node, ), ;, if, (, !, varNode, ., hasChildren, (, ), )]
[., canEliminate, (, ), ), {, varNode, ., removeChild, (, ref, ., node, ), ;, if, (, !, varNode, .]
[;, if, (, !, varNode, ., hasChildren, (, ), ), {, gramps, ., removeChild, (, varNode, ), ;, }, numChanges]
[., removeChild, (, ref, ., node, ), ;, if, (, !, varNode, ., hasChildren, (, ), ), {, gramps, .]
[), ;, if, (, !, varNode, ., hasChildren, (, ), ), {, gramps, ., removeChild, (, varNode, ), ;, }]
[., node, ), ;, if, (, !, varNode, ., hasChildren, (, ), ), {, gramps, ., removeChild, (, varNode, )]
[), {, gramps, ., removeChild, (, varNode, ), ;, }, numChanges, ++, ;, ref, ., node, =, null, ;, }]
[), {, gramps, ., removeChild, (, varNode, ), ;, }, numChanges, ++, ;, ref, ., node, =, null, ;, }]
[., hasChildren, (, ), ), {, gramps, ., removeChild, (, varNode, ), ;, }, numChanges, ++, ;, ref, ., node]
[;, }, numChanges, ++, ;, ref, ., node, =, null, ;, }, if, (, numChanges, >, 0, ), {, compiler]
[., removeChild, (, varNode, ), ;, }, numChanges, ++, ;, ref, ., node, =, null, ;, }, if, (, numChanges]
[), ;, }, numChanges, ++, ;, ref, ., node, =, null, ;, }, if, (, numChanges, >, 0, ), {]
[;, ref, ., node, =, null, ;, }, if, (, numChanges, >, 0, ), {, compiler, ., reportCodeChange, (, )]
[++, ;, ref, ., node, =, null, ;, }, if, (, numChanges, >, 0, ), {, compiler, ., reportCodeChange, (]
[=, null, ;, }, if, (, numChanges, >, 0, ), {, compiler, ., reportCodeChange, (, ), ;, }, }, private]
[., node, =, null, ;, }, if, (, numChanges, >, 0, ), {, compiler, ., reportCodeChange, (, ), ;, }]
[;, }, if, (, numChanges, >, 0, ), {, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, updateFunctionDeclarationAtFunctionNode]
[), {, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, updateFunctionDeclarationAtFunctionNode, (, Name, n, ,, boolean, canCollapseChildNames, )]
[>, 0, ), {, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, updateFunctionDeclarationAtFunctionNode, (, Name, n, ,, boolean]
[), {, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, updateFunctionDeclarationAtFunctionNode, (, Name, n, ,, boolean, canCollapseChildNames, )]
[;, }, }, private, void, updateFunctionDeclarationAtFunctionNode, (, Name, n, ,, boolean, canCollapseChildNames, ), {, if, (, !, canCollapseChildNames, ), {]
[., reportCodeChange, (, ), ;, }, }, private, void, updateFunctionDeclarationAtFunctionNode, (, Name, n, ,, boolean, canCollapseChildNames, ), {, if, (]
[), {, return, ;, }, Ref, ref, =, n, ., getDeclaration, (, ), ;, String, fnName, =, ref, ., node]
[), {, return, ;, }, Ref, ref, =, n, ., getDeclaration, (, ), ;, String, fnName, =, ref, ., node]
[;, String, fnName, =, ref, ., node, ., getString, (, ), ;, addStubsForUndeclaredProperties, (, n, ,, fnName, ,, ref, .]
[., getDeclaration, (, ), ;, String, fnName, =, ref, ., node, ., getString, (, ), ;, addStubsForUndeclaredProperties, (, n, ,]
[;, addStubsForUndeclaredProperties, (, n, ,, fnName, ,, ref, ., node, ., getAncestor, (, 2, ), ,, ref, ., node, .]
[., getString, (, ), ;, addStubsForUndeclaredProperties, (, n, ,, fnName, ,, ref, ., node, ., getAncestor, (, 2, ), ,]
[., node, ., getString, (, ), ;, addStubsForUndeclaredProperties, (, n, ,, fnName, ,, ref, ., node, ., getAncestor, (, 2]
[;, }, private, int, declareVarsForObjLitValues, (, Name, objlitName, ,, String, alias, ,, Node, objlit, ,, Node, varNode, ,, Node, nameToAddAfter]
[,, fnName, ,, ref, ., node, ., getAncestor, (, 2, ), ,, ref, ., node, ., getParent, (, ), )]
[,, ref, ., node, ., getAncestor, (, 2, ), ,, ref, ., node, ., getParent, (, ), ), ;, }]
[,, ref, ., node, ., getParent, (, ), ), ;, }, private, int, declareVarsForObjLitValues, (, Name, objlitName, ,, String, alias]
[., getAncestor, (, 2, ), ,, ref, ., node, ., getParent, (, ), ), ;, }, private, int, declareVarsForObjLitValues, (]
[., node, ., getAncestor, (, 2, ), ,, ref, ., node, ., getParent, (, ), ), ;, }, private, int]
[), ,, ref, ., node, ., getParent, (, ), ), ;, }, private, int, declareVarsForObjLitValues, (, Name, objlitName, ,, String]
[), ;, }, private, int, declareVarsForObjLitValues, (, Name, objlitName, ,, String, alias, ,, Node, objlit, ,, Node, varNode, ,, Node]
[., getParent, (, ), ), ;, }, private, int, declareVarsForObjLitValues, (, Name, objlitName, ,, String, alias, ,, Node, objlit, ,]
[., node, ., getParent, (, ), ), ;, }, private, int, declareVarsForObjLitValues, (, Name, objlitName, ,, String, alias, ,, Node]
[;, int, arbitraryNameCounter, =, 0, ;, boolean, discardKeys, =, !, objlitName, ., shouldKeepKeys, (, ), ;, for, (, Node, key]
[;, boolean, discardKeys, =, !, objlitName, ., shouldKeepKeys, (, ), ;, for, (, Node, key, =, objlit, ., getFirstChild, (]
[;, for, (, Node, key, =, objlit, ., getFirstChild, (, ), ,, nextKey, ;, key, !=, null, ;, key, =]
[;, for, (, Node, key, =, objlit, ., getFirstChild, (, ), ,, nextKey, ;, key, !=, null, ;, key, =]
[., shouldKeepKeys, (, ), ;, for, (, Node, key, =, objlit, ., getFirstChild, (, ), ,, nextKey, ;, key, !=]
[,, nextKey, ;, key, !=, null, ;, key, =, nextKey, ), {, Node, value, =, key, ., getFirstChild, (, )]
[., getFirstChild, (, ), ,, nextKey, ;, key, !=, null, ;, key, =, nextKey, ), {, Node, value, =, key]
[;, key, =, nextKey, ), {, Node, value, =, key, ., getFirstChild, (, ), ;, nextKey, =, key, ., getNext]
[!=, null, ;, key, =, nextKey, ), {, Node, value, =, key, ., getFirstChild, (, ), ;, nextKey, =, key]
[;, key, =, nextKey, ), {, Node, value, =, key, ., getFirstChild, (, ), ;, nextKey, =, key, ., getNext]
[=, nextKey, ), {, Node, value, =, key, ., getFirstChild, (, ), ;, nextKey, =, key, ., getNext, (, )]
[), {, Node, value, =, key, ., getFirstChild, (, ), ;, nextKey, =, key, ., getNext, (, ), ;, if]
[;, nextKey, =, key, ., getNext, (, ), ;, if, (, key, ., isGetterDef, (, ), ||, key, ., isSetterDef]
[., getFirstChild, (, ), ;, nextKey, =, key, ., getNext, (, ), ;, if, (, key, ., isGetterDef, (, )]
[=, key, ., getNext, (, ), ;, if, (, key, ., isGetterDef, (, ), ||, key, ., isSetterDef, (, )]
[;, if, (, key, ., isGetterDef, (, ), ||, key, ., isSetterDef, (, ), ), {, continue, ;, }, boolean]
[., getNext, (, ), ;, if, (, key, ., isGetterDef, (, ), ||, key, ., isSetterDef, (, ), ), {]
[), {, continue, ;, }, boolean, isJsIdentifier, =, !, key, ., isNumber, (, ), &&, TokenStream, ., isJSIdentifier, (, key]
[||, key, ., isSetterDef, (, ), ), {, continue, ;, }, boolean, isJsIdentifier, =, !, key, ., isNumber, (, )]
[., isGetterDef, (, ), ||, key, ., isSetterDef, (, ), ), {, continue, ;, }, boolean, isJsIdentifier, =, !, key]
[), {, continue, ;, }, boolean, isJsIdentifier, =, !, key, ., isNumber, (, ), &&, TokenStream, ., isJSIdentifier, (, key]
[., isSetterDef, (, ), ), {, continue, ;, }, boolean, isJsIdentifier, =, !, key, ., isNumber, (, ), &&, TokenStream]
[;, String, propName, =, isJsIdentifier, ?, key, ., getString, (, ), :, String, ., valueOf, (, ++, arbitraryNameCounter, ), ;]
[&&, TokenStream, ., isJSIdentifier, (, key, ., getString, (, ), ), ;, String, propName, =, isJsIdentifier, ?, key, ., getString]
[&&, TokenStream, ., isJSIdentifier, (, key, ., getString, (, ), ), ;, String, propName, =, isJsIdentifier, ?, key, ., getString]
[., isNumber, (, ), &&, TokenStream, ., isJSIdentifier, (, key, ., getString, (, ), ), ;, String, propName, =, isJsIdentifier]
[;, String, propName, =, isJsIdentifier, ?, key, ., getString, (, ), :, String, ., valueOf, (, ++, arbitraryNameCounter, ), ;]
[., isJSIdentifier, (, key, ., getString, (, ), ), ;, String, propName, =, isJsIdentifier, ?, key, ., getString, (, )]
[), ;, String, propName, =, isJsIdentifier, ?, key, ., getString, (, ), :, String, ., valueOf, (, ++, arbitraryNameCounter, )]
[., getString, (, ), ), ;, String, propName, =, isJsIdentifier, ?, key, ., getString, (, ), :, String, ., valueOf]
[;, String, qName, =, objlitName, ., getFullName, (, ), +, '.', +, propName, ;, Name, p, =, nameMap, ., get]
[?, key, ., getString, (, ), :, String, ., valueOf, (, ++, arbitraryNameCounter, ), ;, String, qName, =, objlitName, .]
[:, String, ., valueOf, (, ++, arbitraryNameCounter, ), ;, String, qName, =, objlitName, ., getFullName, (, ), +, '.', +]
[., getString, (, ), :, String, ., valueOf, (, ++, arbitraryNameCounter, ), ;, String, qName, =, objlitName, ., getFullName, (]
[;, String, qName, =, objlitName, ., getFullName, (, ), +, '.', +, propName, ;, Name, p, =, nameMap, ., get]
[., valueOf, (, ++, arbitraryNameCounter, ), ;, String, qName, =, objlitName, ., getFullName, (, ), +, '.', +, propName, ;]
[), ;, String, qName, =, objlitName, ., getFullName, (, ), +, '.', +, propName, ;, Name, p, =, nameMap, .]
[), ;, String, qName, =, objlitName, ., getFullName, (, ), +, '.', +, propName, ;, Name, p, =, nameMap, .]
[;, Name, p, =, nameMap, ., get, (, qName, ), ;, if, (, p, !=, null, &&, !, p, .]
[+, propName, ;, Name, p, =, nameMap, ., get, (, qName, ), ;, if, (, p, !=, null, &&, !]
[+, '.', +, propName, ;, Name, p, =, nameMap, ., get, (, qName, ), ;, if, (, p, !=, null]
[., getFullName, (, ), +, '.', +, propName, ;, Name, p, =, nameMap, ., get, (, qName, ), ;, if]
[+, propName, ;, Name, p, =, nameMap, ., get, (, qName, ), ;, if, (, p, !=, null, &&, !]
[;, Name, p, =, nameMap, ., get, (, qName, ), ;, if, (, p, !=, null, &&, !, p, .]
[;, if, (, p, !=, null, &&, !, p, ., canCollapse, (, ), ), {, continue, ;, }, String, propAlias]
[., get, (, qName, ), ;, if, (, p, !=, null, &&, !, p, ., canCollapse, (, ), ), {]
[), ;, if, (, p, !=, null, &&, !, p, ., canCollapse, (, ), ), {, continue, ;, }, String]
[), {, continue, ;, }, String, propAlias, =, appendPropForAlias, (, alias, ,, propName, ), ;, Node, refNode, =, null, ;]
[&&, !, p, ., canCollapse, (, ), ), {, continue, ;, }, String, propAlias, =, appendPropForAlias, (, alias, ,, propName]
[!=, null, &&, !, p, ., canCollapse, (, ), ), {, continue, ;, }, String, propAlias, =, appendPropForAlias, (, alias]
[&&, !, p, ., canCollapse, (, ), ), {, continue, ;, }, String, propAlias, =, appendPropForAlias, (, alias, ,, propName]
[), {, continue, ;, }, String, propAlias, =, appendPropForAlias, (, alias, ,, propName, ), ;, Node, refNode, =, null, ;]
[), {, continue, ;, }, String, propAlias, =, appendPropForAlias, (, alias, ,, propName, ), ;, Node, refNode, =, null, ;]
[., canCollapse, (, ), ), {, continue, ;, }, String, propAlias, =, appendPropForAlias, (, alias, ,, propName, ), ;, Node]
[;, Node, refNode, =, null, ;, if, (, discardKeys, ), {, objlit, ., removeChild, (, key, ), ;, value, .]
[,, propName, ), ;, Node, refNode, =, null, ;, if, (, discardKeys, ), {, objlit, ., removeChild, (, key, )]
[), ;, Node, refNode, =, null, ;, if, (, discardKeys, ), {, objlit, ., removeChild, (, key, ), ;, value]
[;, if, (, discardKeys, ), {, objlit, ., removeChild, (, key, ), ;, value, ., detachFromParent, (, ), ;, }]
[), {, objlit, ., removeChild, (, key, ), ;, value, ., detachFromParent, (, ), ;, }, else, {, refNode, =]
[;, value, ., detachFromParent, (, ), ;, }, else, {, refNode, =, IR, ., name, (, propAlias, ), ;, if]
[., removeChild, (, key, ), ;, value, ., detachFromParent, (, ), ;, }, else, {, refNode, =, IR, ., name]
[), ;, value, ., detachFromParent, (, ), ;, }, else, {, refNode, =, IR, ., name, (, propAlias, ), ;]
[;, }, else, {, refNode, =, IR, ., name, (, propAlias, ), ;, if, (, key, ., getBooleanProp, (, Node]
[., detachFromParent, (, ), ;, }, else, {, refNode, =, IR, ., name, (, propAlias, ), ;, if, (, key]
[=, IR, ., name, (, propAlias, ), ;, if, (, key, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {]
[;, if, (, key, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, refNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME]
[., name, (, propAlias, ), ;, if, (, key, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, refNode, .]
[), ;, if, (, key, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, refNode, ., putBooleanProp, (, Node, .]
[), {, refNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, key, ., replaceChild, (, value, ,]
[., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, refNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;]
[), ), {, refNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, key, ., replaceChild, (, value]
[., IS_CONSTANT_NAME, ), ), {, refNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, key, ., replaceChild]
[;, }, key, ., replaceChild, (, value, ,, refNode, ), ;, }, Node, nameNode, =, IR, ., name, (, propAlias]
[., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, key, ., replaceChild, (, value, ,, refNode, ), ;]
[,, true, ), ;, }, key, ., replaceChild, (, value, ,, refNode, ), ;, }, Node, nameNode, =, IR, .]
[., IS_CONSTANT_NAME, ,, true, ), ;, }, key, ., replaceChild, (, value, ,, refNode, ), ;, }, Node, nameNode, =]
[), ;, }, key, ., replaceChild, (, value, ,, refNode, ), ;, }, Node, nameNode, =, IR, ., name, (]
[;, }, Node, nameNode, =, IR, ., name, (, propAlias, ), ;, nameNode, ., addChildToFront, (, value, ), ;, if]
[., replaceChild, (, value, ,, refNode, ), ;, }, Node, nameNode, =, IR, ., name, (, propAlias, ), ;, nameNode]
[,, refNode, ), ;, }, Node, nameNode, =, IR, ., name, (, propAlias, ), ;, nameNode, ., addChildToFront, (, value]
[), ;, }, Node, nameNode, =, IR, ., name, (, propAlias, ), ;, nameNode, ., addChildToFront, (, value, ), ;]
[;, nameNode, ., addChildToFront, (, value, ), ;, if, (, key, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {]
[., name, (, propAlias, ), ;, nameNode, ., addChildToFront, (, value, ), ;, if, (, key, ., getBooleanProp, (, Node]
[), ;, nameNode, ., addChildToFront, (, value, ), ;, if, (, key, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), )]
[;, if, (, key, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME]
[., addChildToFront, (, value, ), ;, if, (, key, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, nameNode, .]
[), ;, if, (, key, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, nameNode, ., putBooleanProp, (, Node, .]
[), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, Node, newVar, =, IR, ., var]
[., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;]
[), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, Node, newVar, =, IR, .]
[., IS_CONSTANT_NAME, ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, Node, newVar, =]
[;, }, Node, newVar, =, IR, ., var, (, nameNode, ), ., copyInformationFromForTree, (, key, ), ;, if, (, nameToAddAfter]
[., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, Node, newVar, =, IR, ., var, (, nameNode, )]
[,, true, ), ;, }, Node, newVar, =, IR, ., var, (, nameNode, ), ., copyInformationFromForTree, (, key, ), ;]
[., IS_CONSTANT_NAME, ,, true, ), ;, }, Node, newVar, =, IR, ., var, (, nameNode, ), ., copyInformationFromForTree, (, key]
[), ;, }, Node, newVar, =, IR, ., var, (, nameNode, ), ., copyInformationFromForTree, (, key, ), ;, if, (]
[;, if, (, nameToAddAfter, !=, null, ), {, varParent, ., addChildAfter, (, newVar, ,, nameToAddAfter, ), ;, }, else, {]
[., copyInformationFromForTree, (, key, ), ;, if, (, nameToAddAfter, !=, null, ), {, varParent, ., addChildAfter, (, newVar, ,, nameToAddAfter]
[., var, (, nameNode, ), ., copyInformationFromForTree, (, key, ), ;, if, (, nameToAddAfter, !=, null, ), {, varParent, .]
[), ., copyInformationFromForTree, (, key, ), ;, if, (, nameToAddAfter, !=, null, ), {, varParent, ., addChildAfter, (, newVar, ,]
[), ;, if, (, nameToAddAfter, !=, null, ), {, varParent, ., addChildAfter, (, newVar, ,, nameToAddAfter, ), ;, }, else]
[), {, varParent, ., addChildAfter, (, newVar, ,, nameToAddAfter, ), ;, }, else, {, varParent, ., addChildBefore, (, newVar, ,]
[!=, null, ), {, varParent, ., addChildAfter, (, newVar, ,, nameToAddAfter, ), ;, }, else, {, varParent, ., addChildBefore, (]
[), {, varParent, ., addChildAfter, (, newVar, ,, nameToAddAfter, ), ;, }, else, {, varParent, ., addChildBefore, (, newVar, ,]
[;, }, else, {, varParent, ., addChildBefore, (, newVar, ,, varNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;]
[., addChildAfter, (, newVar, ,, nameToAddAfter, ), ;, }, else, {, varParent, ., addChildBefore, (, newVar, ,, varNode, ), ;]
[,, nameToAddAfter, ), ;, }, else, {, varParent, ., addChildBefore, (, newVar, ,, varNode, ), ;, }, compiler, ., reportCodeChange]
[), ;, }, else, {, varParent, ., addChildBefore, (, newVar, ,, varNode, ), ;, }, compiler, ., reportCodeChange, (, )]
[;, }, compiler, ., reportCodeChange, (, ), ;, nameToAddAfter, =, newVar, ;, if, (, isJsIdentifier, &&, p, !=, null, )]
[., addChildBefore, (, newVar, ,, varNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;, nameToAddAfter, =, newVar, ;, if]
[,, varNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;, nameToAddAfter, =, newVar, ;, if, (, isJsIdentifier, &&, p]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, nameToAddAfter, =, newVar, ;, if, (, isJsIdentifier, &&, p, !=, null]
[;, nameToAddAfter, =, newVar, ;, if, (, isJsIdentifier, &&, p, !=, null, ), {, if, (, !, discardKeys, ), {]
[., reportCodeChange, (, ), ;, nameToAddAfter, =, newVar, ;, if, (, isJsIdentifier, &&, p, !=, null, ), {, if, (]
[=, newVar, ;, if, (, isJsIdentifier, &&, p, !=, null, ), {, if, (, !, discardKeys, ), {, Ref, newAlias]
[;, if, (, isJsIdentifier, &&, p, !=, null, ), {, if, (, !, discardKeys, ), {, Ref, newAlias, =, p]
[), {, if, (, !, discardKeys, ), {, Ref, newAlias, =, p, ., getDeclaration, (, ), ., cloneAndReclassify, (, Ref]
[&&, p, !=, null, ), {, if, (, !, discardKeys, ), {, Ref, newAlias, =, p, ., getDeclaration, (, )]
[), {, if, (, !, discardKeys, ), {, Ref, newAlias, =, p, ., getDeclaration, (, ), ., cloneAndReclassify, (, Ref]
[!=, null, ), {, if, (, !, discardKeys, ), {, Ref, newAlias, =, p, ., getDeclaration, (, ), ., cloneAndReclassify]
[), {, if, (, !, discardKeys, ), {, Ref, newAlias, =, p, ., getDeclaration, (, ), ., cloneAndReclassify, (, Ref]
[), {, Ref, newAlias, =, p, ., getDeclaration, (, ), ., cloneAndReclassify, (, Ref, ., Type, ., ALIASING_GET, ), ;]
[), {, Ref, newAlias, =, p, ., getDeclaration, (, ), ., cloneAndReclassify, (, Ref, ., Type, ., ALIASING_GET, ), ;]
[;, newAlias, ., node, =, refNode, ;, p, ., addRef, (, newAlias, ), ;, }, p, ., getDeclaration, (, )]
[., cloneAndReclassify, (, Ref, ., Type, ., ALIASING_GET, ), ;, newAlias, ., node, =, refNode, ;, p, ., addRef, (]
[., getDeclaration, (, ), ., cloneAndReclassify, (, Ref, ., Type, ., ALIASING_GET, ), ;, newAlias, ., node, =, refNode, ;]
[), ;, newAlias, ., node, =, refNode, ;, p, ., addRef, (, newAlias, ), ;, }, p, ., getDeclaration, (]
[., ALIASING_GET, ), ;, newAlias, ., node, =, refNode, ;, p, ., addRef, (, newAlias, ), ;, }, p, .]
[., Type, ., ALIASING_GET, ), ;, newAlias, ., node, =, refNode, ;, p, ., addRef, (, newAlias, ), ;, }]
[=, refNode, ;, p, ., addRef, (, newAlias, ), ;, }, p, ., getDeclaration, (, ), ., node, =, nameNode]
[., node, =, refNode, ;, p, ., addRef, (, newAlias, ), ;, }, p, ., getDeclaration, (, ), ., node]
[;, p, ., addRef, (, newAlias, ), ;, }, p, ., getDeclaration, (, ), ., node, =, nameNode, ;, if]
[;, }, p, ., getDeclaration, (, ), ., node, =, nameNode, ;, if, (, value, ., isFunction, (, ), )]
[., addRef, (, newAlias, ), ;, }, p, ., getDeclaration, (, ), ., node, =, nameNode, ;, if, (, value]
[), ;, }, p, ., getDeclaration, (, ), ., node, =, nameNode, ;, if, (, value, ., isFunction, (, )]
[=, nameNode, ;, if, (, value, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, value, ,, value, ., getJSDocInfo, (]
[., node, =, nameNode, ;, if, (, value, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, value, ,, value, .]
[., getDeclaration, (, ), ., node, =, nameNode, ;, if, (, value, ., isFunction, (, ), ), {, checkForHosedThisReferences, (]
[;, if, (, value, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, value, ,, value, ., getJSDocInfo, (, ), ,]
[), {, checkForHosedThisReferences, (, value, ,, value, ., getJSDocInfo, (, ), ,, p, ), ;, }, }, numVars, ++, ;]
[., isFunction, (, ), ), {, checkForHosedThisReferences, (, value, ,, value, ., getJSDocInfo, (, ), ,, p, ), ;, }]
[;, }, }, numVars, ++, ;, }, return, numVars, ;, }, private, int, addStubsForUndeclaredProperties, (, Name, n, ,, String, alias]
[,, value, ., getJSDocInfo, (, ), ,, p, ), ;, }, }, numVars, ++, ;, }, return, numVars, ;, }]
[,, p, ), ;, }, }, numVars, ++, ;, }, return, numVars, ;, }, private, int, addStubsForUndeclaredProperties, (, Name, n]
[., getJSDocInfo, (, ), ,, p, ), ;, }, }, numVars, ++, ;, }, return, numVars, ;, }, private, int]
[), ;, }, }, numVars, ++, ;, }, return, numVars, ;, }, private, int, addStubsForUndeclaredProperties, (, Name, n, ,, String]
[;, }, return, numVars, ;, }, private, int, addStubsForUndeclaredProperties, (, Name, n, ,, String, alias, ,, Node, parent, ,, Node]
[++, ;, }, return, numVars, ;, }, private, int, addStubsForUndeclaredProperties, (, Name, n, ,, String, alias, ,, Node, parent, ,]
[;, }, private, int, addStubsForUndeclaredProperties, (, Name, n, ,, String, alias, ,, Node, parent, ,, Node, addAfter, ), {, Preconditions]
[;, Preconditions, ., checkArgument, (, NodeUtil, ., isStatementBlock, (, parent, ), ), ;, Preconditions, ., checkNotNull, (, addAfter, ), ;]
[., checkState, (, n, ., canCollapseUnannotatedChildNames, (, ), ), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isStatementBlock, (, parent, )]
[), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isStatementBlock, (, parent, ), ), ;, Preconditions, ., checkNotNull, (, addAfter, )]
[., canCollapseUnannotatedChildNames, (, ), ), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isStatementBlock, (, parent, ), ), ;, Preconditions, .]
[;, Preconditions, ., checkNotNull, (, addAfter, ), ;, int, numStubs, =, 0, ;, if, (, n, ., props, !=, null]
[., checkArgument, (, NodeUtil, ., isStatementBlock, (, parent, ), ), ;, Preconditions, ., checkNotNull, (, addAfter, ), ;, int, numStubs]
[), ;, Preconditions, ., checkNotNull, (, addAfter, ), ;, int, numStubs, =, 0, ;, if, (, n, ., props, !=]
[., isStatementBlock, (, parent, ), ), ;, Preconditions, ., checkNotNull, (, addAfter, ), ;, int, numStubs, =, 0, ;, if]
[), ), ;, Preconditions, ., checkNotNull, (, addAfter, ), ;, int, numStubs, =, 0, ;, if, (, n, ., props]
[;, int, numStubs, =, 0, ;, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :]
[., checkNotNull, (, addAfter, ), ;, int, numStubs, =, 0, ;, if, (, n, ., props, !=, null, ), {]
[), ;, int, numStubs, =, 0, ;, if, (, n, ., props, !=, null, ), {, for, (, Name, p]
[;, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :, n, ., props, ), {]
[), {, for, (, Name, p, :, n, ., props, ), {, if, (, p, ., needsToBeStubbed, (, ), )]
[!=, null, ), {, for, (, Name, p, :, n, ., props, ), {, if, (, p, ., needsToBeStubbed, (]
[., props, !=, null, ), {, for, (, Name, p, :, n, ., props, ), {, if, (, p, .]
[), {, for, (, Name, p, :, n, ., props, ), {, if, (, p, ., needsToBeStubbed, (, ), )]
[), {, if, (, p, ., needsToBeStubbed, (, ), ), {, String, propAlias, =, appendPropForAlias, (, alias, ,, p, .]
[., props, ), {, if, (, p, ., needsToBeStubbed, (, ), ), {, String, propAlias, =, appendPropForAlias, (, alias, ,]
[), {, String, propAlias, =, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ;, Node, nameNode, =, IR]
[., needsToBeStubbed, (, ), ), {, String, propAlias, =, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ;]
[;, Node, nameNode, =, IR, ., name, (, propAlias, ), ;, Node, newVar, =, IR, ., var, (, nameNode, )]
[,, p, ., getBaseName, (, ), ), ;, Node, nameNode, =, IR, ., name, (, propAlias, ), ;, Node, newVar]
[), ;, Node, nameNode, =, IR, ., name, (, propAlias, ), ;, Node, newVar, =, IR, ., var, (, nameNode]
[., getBaseName, (, ), ), ;, Node, nameNode, =, IR, ., name, (, propAlias, ), ;, Node, newVar, =, IR]
[;, Node, newVar, =, IR, ., var, (, nameNode, ), ., copyInformationFromForTree, (, addAfter, ), ;, parent, ., addChildAfter, (]
[., name, (, propAlias, ), ;, Node, newVar, =, IR, ., var, (, nameNode, ), ., copyInformationFromForTree, (, addAfter, )]
[), ;, Node, newVar, =, IR, ., var, (, nameNode, ), ., copyInformationFromForTree, (, addAfter, ), ;, parent, ., addChildAfter]
[;, parent, ., addChildAfter, (, newVar, ,, addAfter, ), ;, addAfter, =, newVar, ;, numStubs, ++, ;, compiler, ., reportCodeChange]
[., copyInformationFromForTree, (, addAfter, ), ;, parent, ., addChildAfter, (, newVar, ,, addAfter, ), ;, addAfter, =, newVar, ;, numStubs]
[., var, (, nameNode, ), ., copyInformationFromForTree, (, addAfter, ), ;, parent, ., addChildAfter, (, newVar, ,, addAfter, ), ;]
[), ., copyInformationFromForTree, (, addAfter, ), ;, parent, ., addChildAfter, (, newVar, ,, addAfter, ), ;, addAfter, =, newVar, ;]
[), ;, parent, ., addChildAfter, (, newVar, ,, addAfter, ), ;, addAfter, =, newVar, ;, numStubs, ++, ;, compiler, .]
[;, addAfter, =, newVar, ;, numStubs, ++, ;, compiler, ., reportCodeChange, (, ), ;, if, (, p, ., getRefs, (]
[., addChildAfter, (, newVar, ,, addAfter, ), ;, addAfter, =, newVar, ;, numStubs, ++, ;, compiler, ., reportCodeChange, (, )]
[,, addAfter, ), ;, addAfter, =, newVar, ;, numStubs, ++, ;, compiler, ., reportCodeChange, (, ), ;, if, (, p]
[), ;, addAfter, =, newVar, ;, numStubs, ++, ;, compiler, ., reportCodeChange, (, ), ;, if, (, p, ., getRefs]
[=, newVar, ;, numStubs, ++, ;, compiler, ., reportCodeChange, (, ), ;, if, (, p, ., getRefs, (, ), .]
[;, numStubs, ++, ;, compiler, ., reportCodeChange, (, ), ;, if, (, p, ., getRefs, (, ), ., get, (]
[;, compiler, ., reportCodeChange, (, ), ;, if, (, p, ., getRefs, (, ), ., get, (, 0, ), .]
[++, ;, compiler, ., reportCodeChange, (, ), ;, if, (, p, ., getRefs, (, ), ., get, (, 0, )]
[;, if, (, p, ., getRefs, (, ), ., get, (, 0, ), ., node, ., getLastChild, (, ), .]
[., reportCodeChange, (, ), ;, if, (, p, ., getRefs, (, ), ., get, (, 0, ), ., node, .]
[), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, }, }, }, return, numStubs, ;]
[., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;]
[., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME]
[., node, ., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, nameNode, ., putBooleanProp, (, Node]
[., get, (, 0, ), ., node, ., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {]
[., getRefs, (, ), ., get, (, 0, ), ., node, ., getLastChild, (, ), ., getBooleanProp, (, Node, .]
[), ., node, ., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, nameNode, ., putBooleanProp, (]
[), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, }, }, }, return, numStubs]
[., IS_CONSTANT_NAME, ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, }, }, }]
[;, }, }, }, }, return, numStubs, ;, }, private, static, String, appendPropForAlias, (, String, root, ,, String, prop, )]
[., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, }, }, }, return, numStubs, ;, }, private, static]
[,, true, ), ;, }, }, }, }, return, numStubs, ;, }, private, static, String, appendPropForAlias, (, String, root, ,]
[., IS_CONSTANT_NAME, ,, true, ), ;, }, }, }, }, return, numStubs, ;, }, private, static, String, appendPropForAlias, (, String]
[), ;, }, }, }, }, return, numStubs, ;, }, private, static, String, appendPropForAlias, (, String, root, ,, String, prop]
[;, }, private, static, String, appendPropForAlias, (, String, root, ,, String, prop, ), {, if, (, prop, ., indexOf, (]
[), {, prop, =, prop, ., replace, (, "$", ,, "$0", ), ;, }, return, root, +, '$', +, prop]
[!=, -, 1, ), {, prop, =, prop, ., replace, (, "$", ,, "$0", ), ;, }, return, root, +]
[., indexOf, (, '$', ), !=, -, 1, ), {, prop, =, prop, ., replace, (, "$", ,, "$0", )]
[), !=, -, 1, ), {, prop, =, prop, ., replace, (, "$", ,, "$0", ), ;, }, return, root]
[), {, prop, =, prop, ., replace, (, "$", ,, "$0", ), ;, }, return, root, +, '$', +, prop]
[), {, prop, =, prop, ., replace, (, "$", ,, "$0", ), ;, }, return, root, +, '$', +, prop]
[=, prop, ., replace, (, "$", ,, "$0", ), ;, }, return, root, +, '$', +, prop, ;, }, }]
[;, }, return, root, +, '$', +, prop, ;, }, }]
[., replace, (, "$", ,, "$0", ), ;, }, return, root, +, '$', +, prop, ;, }, }]
[,, "$0", ), ;, }, return, root, +, '$', +, prop, ;, }, }]
[), ;, }, return, root, +, '$', +, prop, ;, }, }]
[;, }, }]
[+, prop, ;, }, }]
[+, '$', +, prop, ;, }, }]
[+, prop, ;, }, }]
[;, }, }]
