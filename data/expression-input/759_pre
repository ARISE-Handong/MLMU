[;, private, final, Node, errorRoot, ;, private, final, String, sourceName, ;, private, final, Scope, scope, ;, private, FunctionContents, contents, =]
[;, private, final, Node, errorRoot, ;, private, final, String, sourceName, ;, private, final, Scope, scope, ;, private, FunctionContents, contents, =]
[;, private, final, Scope, scope, ;, private, FunctionContents, contents, =, UnknownFunctionContents, ., get, (, ), ;, private, JSType, returnType, =]
[private, FunctionContents, contents, =, UnknownFunctionContents, ., get, (, ), ;, private, JSType, returnType, =, null, ;, private, boolean, returnTypeInferred, =]
[;, private, JSType, returnType, =, null, ;, private, boolean, returnTypeInferred, =, false, ;, private, List, <, ObjectType, >, implementedInterfaces, =]
[returnTypeInferred, =, false, ;, private, List, <, ObjectType, >, implementedInterfaces, =, null, ;, private, List, <, ObjectType, >, extendedInterfaces, =]
[<, ObjectType, >, implementedInterfaces, =, null, ;, private, List, <, ObjectType, >, extendedInterfaces, =, null, ;, private, ObjectType, baseType, =]
[;, private, List, <, ObjectType, >, extendedInterfaces, =, null, ;, private, ObjectType, baseType, =, null, ;, private, JSType, thisType, =]
[extendedInterfaces, =, null, ;, private, ObjectType, baseType, =, null, ;, private, JSType, thisType, =, null, ;, private, boolean, isConstructor, =]
[baseType, =, null, ;, private, JSType, thisType, =, null, ;, private, boolean, isConstructor, =, false, ;, private, boolean, makesStructs, =]
[thisType, =, null, ;, private, boolean, isConstructor, =, false, ;, private, boolean, makesStructs, =, false, ;, private, boolean, makesDicts, =]
[isConstructor, =, false, ;, private, boolean, makesStructs, =, false, ;, private, boolean, makesDicts, =, false, ;, private, boolean, isInterface, =]
[makesStructs, =, false, ;, private, boolean, makesDicts, =, false, ;, private, boolean, isInterface, =, false, ;, private, Node, parametersNode, =]
[;, private, boolean, isInterface, =, false, ;, private, Node, parametersNode, =, null, ;, private, ImmutableList, <, String, >, templateTypeNames, =]
[;, private, boolean, isInterface, =, false, ;, private, Node, parametersNode, =, null, ;, private, ImmutableList, <, String, >, templateTypeNames, =]
[null, ;, private, ImmutableList, <, String, >, templateTypeNames, =, ImmutableList, ., of, (, ), ;, static, final, DiagnosticType, EXTENDS_WITHOUT_TYPEDEF, =]
[null, ;, private, ImmutableList, <, String, >, templateTypeNames, =, ImmutableList, ., of, (, ), ;, static, final, DiagnosticType, EXTENDS_WITHOUT_TYPEDEF, =]
[<, String, >, templateTypeNames, =, ImmutableList, ., of, (, ), ;, static, final, DiagnosticType, EXTENDS_WITHOUT_TYPEDEF, =, DiagnosticType, ., warning, (]
[>, templateTypeNames, =, ImmutableList, ., of, (, ), ;, static, final, DiagnosticType, EXTENDS_WITHOUT_TYPEDEF, =, DiagnosticType, ., warning, (, "JSC_EXTENDS_WITHOUT_TYPEDEF", ,]
[;, static, final, DiagnosticType, EXTENDS_WITHOUT_TYPEDEF, =, DiagnosticType, ., warning, (, "JSC_EXTENDS_WITHOUT_TYPEDEF", ,, "@extends used without @constructor or @interface for {0}", ), ;, static, final, DiagnosticType, EXTENDS_NON_OBJECT, =]
[;, static, final, DiagnosticType, EXTENDS_WITHOUT_TYPEDEF, =, DiagnosticType, ., warning, (, "JSC_EXTENDS_WITHOUT_TYPEDEF", ,, "@extends used without @constructor or @interface for {0}", ), ;, static, final, DiagnosticType, EXTENDS_NON_OBJECT, =]
[EXTENDS_WITHOUT_TYPEDEF, =, DiagnosticType, ., warning, (, "JSC_EXTENDS_WITHOUT_TYPEDEF", ,, "@extends used without @constructor or @interface for {0}", ), ;, static, final, DiagnosticType, EXTENDS_NON_OBJECT, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_EXTENDS_WITHOUT_TYPEDEF", ,, "@extends used without @constructor or @interface for {0}", ), ;, static, final, DiagnosticType, EXTENDS_NON_OBJECT, =, DiagnosticType, ., warning, (, "JSC_EXTENDS_NON_OBJECT", ,]
[;, static, final, DiagnosticType, EXTENDS_NON_OBJECT, =, DiagnosticType, ., warning, (, "JSC_EXTENDS_NON_OBJECT", ,, "{0} @extends non-object type {1}", ), ;, static, final, DiagnosticType, RESOLVED_TAG_EMPTY, =]
[;, static, final, DiagnosticType, EXTENDS_NON_OBJECT, =, DiagnosticType, ., warning, (, "JSC_EXTENDS_NON_OBJECT", ,, "{0} @extends non-object type {1}", ), ;, static, final, DiagnosticType, RESOLVED_TAG_EMPTY, =]
[EXTENDS_NON_OBJECT, =, DiagnosticType, ., warning, (, "JSC_EXTENDS_NON_OBJECT", ,, "{0} @extends non-object type {1}", ), ;, static, final, DiagnosticType, RESOLVED_TAG_EMPTY, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_EXTENDS_NON_OBJECT", ,, "{0} @extends non-object type {1}", ), ;, static, final, DiagnosticType, RESOLVED_TAG_EMPTY, =, DiagnosticType, ., warning, (, "JSC_RESOLVED_TAG_EMPTY", ,]
[;, static, final, DiagnosticType, RESOLVED_TAG_EMPTY, =, DiagnosticType, ., warning, (, "JSC_RESOLVED_TAG_EMPTY", ,, "Could not resolve type in {0} tag of {1}", ), ;, static, final, DiagnosticType, IMPLEMENTS_WITHOUT_CONSTRUCTOR, =]
[;, static, final, DiagnosticType, RESOLVED_TAG_EMPTY, =, DiagnosticType, ., warning, (, "JSC_RESOLVED_TAG_EMPTY", ,, "Could not resolve type in {0} tag of {1}", ), ;, static, final, DiagnosticType, IMPLEMENTS_WITHOUT_CONSTRUCTOR, =]
[RESOLVED_TAG_EMPTY, =, DiagnosticType, ., warning, (, "JSC_RESOLVED_TAG_EMPTY", ,, "Could not resolve type in {0} tag of {1}", ), ;, static, final, DiagnosticType, IMPLEMENTS_WITHOUT_CONSTRUCTOR, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_RESOLVED_TAG_EMPTY", ,, "Could not resolve type in {0} tag of {1}", ), ;, static, final, DiagnosticType, IMPLEMENTS_WITHOUT_CONSTRUCTOR, =, DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", ,]
[;, static, final, DiagnosticType, IMPLEMENTS_WITHOUT_CONSTRUCTOR, =, DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", ,, "@implements used without @constructor or @interface for {0}", ), ;, static, final, DiagnosticType, CONSTRUCTOR_REQUIRED, =]
[;, static, final, DiagnosticType, IMPLEMENTS_WITHOUT_CONSTRUCTOR, =, DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", ,, "@implements used without @constructor or @interface for {0}", ), ;, static, final, DiagnosticType, CONSTRUCTOR_REQUIRED, =]
[IMPLEMENTS_WITHOUT_CONSTRUCTOR, =, DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", ,, "@implements used without @constructor or @interface for {0}", ), ;, static, final, DiagnosticType, CONSTRUCTOR_REQUIRED, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", ,, "@implements used without @constructor or @interface for {0}", ), ;, static, final, DiagnosticType, CONSTRUCTOR_REQUIRED, =, DiagnosticType, ., warning, (, "JSC_CONSTRUCTOR_REQUIRED", ,]
[;, static, final, DiagnosticType, CONSTRUCTOR_REQUIRED, =, DiagnosticType, ., warning, (, "JSC_CONSTRUCTOR_REQUIRED", ,, "{0} used without @constructor for {1}", ), ;, static, final, DiagnosticType, VAR_ARGS_MUST_BE_LAST, =]
[;, static, final, DiagnosticType, CONSTRUCTOR_REQUIRED, =, DiagnosticType, ., warning, (, "JSC_CONSTRUCTOR_REQUIRED", ,, "{0} used without @constructor for {1}", ), ;, static, final, DiagnosticType, VAR_ARGS_MUST_BE_LAST, =]
[CONSTRUCTOR_REQUIRED, =, DiagnosticType, ., warning, (, "JSC_CONSTRUCTOR_REQUIRED", ,, "{0} used without @constructor for {1}", ), ;, static, final, DiagnosticType, VAR_ARGS_MUST_BE_LAST, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_CONSTRUCTOR_REQUIRED", ,, "{0} used without @constructor for {1}", ), ;, static, final, DiagnosticType, VAR_ARGS_MUST_BE_LAST, =, DiagnosticType, ., warning, (, "JSC_VAR_ARGS_MUST_BE_LAST", ,]
[;, static, final, DiagnosticType, VAR_ARGS_MUST_BE_LAST, =, DiagnosticType, ., warning, (, "JSC_VAR_ARGS_MUST_BE_LAST", ,, "variable length argument must be last", ), ;, static, final, DiagnosticType, OPTIONAL_ARG_AT_END, =]
[;, static, final, DiagnosticType, VAR_ARGS_MUST_BE_LAST, =, DiagnosticType, ., warning, (, "JSC_VAR_ARGS_MUST_BE_LAST", ,, "variable length argument must be last", ), ;, static, final, DiagnosticType, OPTIONAL_ARG_AT_END, =]
[VAR_ARGS_MUST_BE_LAST, =, DiagnosticType, ., warning, (, "JSC_VAR_ARGS_MUST_BE_LAST", ,, "variable length argument must be last", ), ;, static, final, DiagnosticType, OPTIONAL_ARG_AT_END, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_VAR_ARGS_MUST_BE_LAST", ,, "variable length argument must be last", ), ;, static, final, DiagnosticType, OPTIONAL_ARG_AT_END, =, DiagnosticType, ., warning, (, "JSC_OPTIONAL_ARG_AT_END", ,]
[;, static, final, DiagnosticType, OPTIONAL_ARG_AT_END, =, DiagnosticType, ., warning, (, "JSC_OPTIONAL_ARG_AT_END", ,, "optional arguments must be at the end", ), ;, static, final, DiagnosticType, INEXISTANT_PARAM, =]
[;, static, final, DiagnosticType, OPTIONAL_ARG_AT_END, =, DiagnosticType, ., warning, (, "JSC_OPTIONAL_ARG_AT_END", ,, "optional arguments must be at the end", ), ;, static, final, DiagnosticType, INEXISTANT_PARAM, =]
[OPTIONAL_ARG_AT_END, =, DiagnosticType, ., warning, (, "JSC_OPTIONAL_ARG_AT_END", ,, "optional arguments must be at the end", ), ;, static, final, DiagnosticType, INEXISTANT_PARAM, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_OPTIONAL_ARG_AT_END", ,, "optional arguments must be at the end", ), ;, static, final, DiagnosticType, INEXISTANT_PARAM, =, DiagnosticType, ., warning, (, "JSC_INEXISTANT_PARAM", ,]
[;, static, final, DiagnosticType, INEXISTANT_PARAM, =, DiagnosticType, ., warning, (, "JSC_INEXISTANT_PARAM", ,, "parameter {0} does not appear in {1}''s parameter list", ), ;, static, final, DiagnosticType, TYPE_REDEFINITION, =]
[;, static, final, DiagnosticType, INEXISTANT_PARAM, =, DiagnosticType, ., warning, (, "JSC_INEXISTANT_PARAM", ,, "parameter {0} does not appear in {1}''s parameter list", ), ;, static, final, DiagnosticType, TYPE_REDEFINITION, =]
[INEXISTANT_PARAM, =, DiagnosticType, ., warning, (, "JSC_INEXISTANT_PARAM", ,, "parameter {0} does not appear in {1}''s parameter list", ), ;, static, final, DiagnosticType, TYPE_REDEFINITION, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_INEXISTANT_PARAM", ,, "parameter {0} does not appear in {1}''s parameter list", ), ;, static, final, DiagnosticType, TYPE_REDEFINITION, =, DiagnosticType, ., warning, (, "JSC_TYPE_REDEFINITION", ,]
[DiagnosticType, ., warning, (, "JSC_INEXISTANT_PARAM", ,, "parameter {0} does not appear in {1}''s parameter list", ), ;, static, final, DiagnosticType, TYPE_REDEFINITION, =, DiagnosticType, ., warning, (, "JSC_TYPE_REDEFINITION", ,]
[DiagnosticType, ., warning, (, "JSC_INEXISTANT_PARAM", ,, "parameter {0} does not appear in {1}''s parameter list", ), ;, static, final, DiagnosticType, TYPE_REDEFINITION, =, DiagnosticType, ., warning, (, "JSC_TYPE_REDEFINITION", ,]
[warning, (, "JSC_INEXISTANT_PARAM", ,, "parameter {0} does not appear in {1}''s parameter list", ), ;, static, final, DiagnosticType, TYPE_REDEFINITION, =, DiagnosticType, ., warning, (, "JSC_TYPE_REDEFINITION", ,, "attempted re-definition of type {0}\n", +]
["JSC_INEXISTANT_PARAM", ,, "parameter {0} does not appear in {1}''s parameter list", ), ;, static, final, DiagnosticType, TYPE_REDEFINITION, =, DiagnosticType, ., warning, (, "JSC_TYPE_REDEFINITION", ,, "attempted re-definition of type {0}\n", +, "found   : {1}\n", +]
[TYPE_REDEFINITION, =, DiagnosticType, ., warning, (, "JSC_TYPE_REDEFINITION", ,, "attempted re-definition of type {0}\n", +, "found   : {1}\n", +, "expected: {2}", ), ;, static, final, DiagnosticType, TEMPLATE_TYPE_DUPLICATED, =]
[TYPE_REDEFINITION, =, DiagnosticType, ., warning, (, "JSC_TYPE_REDEFINITION", ,, "attempted re-definition of type {0}\n", +, "found   : {1}\n", +, "expected: {2}", ), ;, static, final, DiagnosticType, TEMPLATE_TYPE_DUPLICATED, =]
[warning, (, "JSC_TYPE_REDEFINITION", ,, "attempted re-definition of type {0}\n", +, "found   : {1}\n", +, "expected: {2}", ), ;, static, final, DiagnosticType, TEMPLATE_TYPE_DUPLICATED, =, DiagnosticType, ., warning, (]
["JSC_TYPE_REDEFINITION", ,, "attempted re-definition of type {0}\n", +, "found   : {1}\n", +, "expected: {2}", ), ;, static, final, DiagnosticType, TEMPLATE_TYPE_DUPLICATED, =, DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_DUPLICATED", ,]
[;, static, final, DiagnosticType, TEMPLATE_TYPE_DUPLICATED, =, DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_DUPLICATED", ,, "Only one parameter type must be the template type", ), ;, static, final, DiagnosticType, TEMPLATE_TYPE_EXPECTED, =]
[;, static, final, DiagnosticType, TEMPLATE_TYPE_DUPLICATED, =, DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_DUPLICATED", ,, "Only one parameter type must be the template type", ), ;, static, final, DiagnosticType, TEMPLATE_TYPE_EXPECTED, =]
[TEMPLATE_TYPE_DUPLICATED, =, DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_DUPLICATED", ,, "Only one parameter type must be the template type", ), ;, static, final, DiagnosticType, TEMPLATE_TYPE_EXPECTED, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_DUPLICATED", ,, "Only one parameter type must be the template type", ), ;, static, final, DiagnosticType, TEMPLATE_TYPE_EXPECTED, =, DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_EXPECTED", ,]
[;, static, final, DiagnosticType, TEMPLATE_TYPE_EXPECTED, =, DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_EXPECTED", ,, "The template type must be a parameter type", ), ;, static, final, DiagnosticType, THIS_TYPE_NON_OBJECT, =]
[;, static, final, DiagnosticType, TEMPLATE_TYPE_EXPECTED, =, DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_EXPECTED", ,, "The template type must be a parameter type", ), ;, static, final, DiagnosticType, THIS_TYPE_NON_OBJECT, =]
[TEMPLATE_TYPE_EXPECTED, =, DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_EXPECTED", ,, "The template type must be a parameter type", ), ;, static, final, DiagnosticType, THIS_TYPE_NON_OBJECT, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_EXPECTED", ,, "The template type must be a parameter type", ), ;, static, final, DiagnosticType, THIS_TYPE_NON_OBJECT, =, DiagnosticType, ., warning, (, "JSC_THIS_TYPE_NON_OBJECT", ,]
[DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_EXPECTED", ,, "The template type must be a parameter type", ), ;, static, final, DiagnosticType, THIS_TYPE_NON_OBJECT, =, DiagnosticType, ., warning, (, "JSC_THIS_TYPE_NON_OBJECT", ,]
[warning, (, "JSC_TEMPLATE_TYPE_EXPECTED", ,, "The template type must be a parameter type", ), ;, static, final, DiagnosticType, THIS_TYPE_NON_OBJECT, =, DiagnosticType, ., warning, (, "JSC_THIS_TYPE_NON_OBJECT", ,, "@this type of a function must be an object\n", +]
[ExtendedTypeValidator, implements, Predicate, <, JSType, >, {, @, Override, public, boolean, apply, (, JSType, type, ), {, ObjectType, objectType, =]
[ExtendedTypeValidator, implements, Predicate, <, JSType, >, {, @, Override, public, boolean, apply, (, JSType, type, ), {, ObjectType, objectType, =]
[JSType, >, {, @, Override, public, boolean, apply, (, JSType, type, ), {, ObjectType, objectType, =, ObjectType, ., cast, (]
[public, boolean, apply, (, JSType, type, ), {, ObjectType, objectType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[public, boolean, apply, (, JSType, type, ), {, ObjectType, objectType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[apply, (, JSType, type, ), {, ObjectType, objectType, =, ObjectType, ., cast, (, type, ), ;, if, (, objectType, ==]
[type, ), {, ObjectType, objectType, =, ObjectType, ., cast, (, type, ), ;, if, (, objectType, ==, null, ), {]
[{, ObjectType, objectType, =, ObjectType, ., cast, (, type, ), ;, if, (, objectType, ==, null, ), {, reportWarning, (]
[objectType, =, ObjectType, ., cast, (, type, ), ;, if, (, objectType, ==, null, ), {, reportWarning, (, EXTENDS_NON_OBJECT, ,]
[ObjectType, ., cast, (, type, ), ;, if, (, objectType, ==, null, ), {, reportWarning, (, EXTENDS_NON_OBJECT, ,, fnName, ,]
[ObjectType, ., cast, (, type, ), ;, if, (, objectType, ==, null, ), {, reportWarning, (, EXTENDS_NON_OBJECT, ,, fnName, ,]
[(, objectType, ==, null, ), {, reportWarning, (, EXTENDS_NON_OBJECT, ,, fnName, ,, type, ., toString, (, ), ), ;, return]
[reportWarning, (, EXTENDS_NON_OBJECT, ,, fnName, ,, type, ., toString, (, ), ), ;, return, false, ;, }, else, if, (]
[reportWarning, (, EXTENDS_NON_OBJECT, ,, fnName, ,, type, ., toString, (, ), ), ;, return, false, ;, }, else, if, (]
[., toString, (, ), ), ;, return, false, ;, }, else, if, (, objectType, ., isEmptyType, (, ), ), {]
[(, ), ), ;, return, false, ;, }, else, if, (, objectType, ., isEmptyType, (, ), ), {, reportWarning, (]
[), ;, return, false, ;, }, else, if, (, objectType, ., isEmptyType, (, ), ), {, reportWarning, (, RESOLVED_TAG_EMPTY, ,]
[return, false, ;, }, else, if, (, objectType, ., isEmptyType, (, ), ), {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@extends", ,]
[else, if, (, objectType, ., isEmptyType, (, ), ), {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@extends", ,, fnName, ), ;, return]
[(, ), ), {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@extends", ,, fnName, ), ;, return, false, ;, }, else, if, (]
[(, ), ), {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@extends", ,, fnName, ), ;, return, false, ;, }, else, if, (]
[,, fnName, ), ;, return, false, ;, }, else, if, (, objectType, ., isUnknownType, (, ), ), {, if, (]
[), ;, return, false, ;, }, else, if, (, objectType, ., isUnknownType, (, ), ), {, if, (, hasMoreTagsToResolve, (]
[}, else, if, (, objectType, ., isUnknownType, (, ), ), {, if, (, hasMoreTagsToResolve, (, objectType, ), ), {, return]
[., isUnknownType, (, ), ), {, if, (, hasMoreTagsToResolve, (, objectType, ), ), {, return, true, ;, }, else, {]
[(, ), ), {, if, (, hasMoreTagsToResolve, (, objectType, ), ), {, return, true, ;, }, else, {, reportWarning, (]
[), {, if, (, hasMoreTagsToResolve, (, objectType, ), ), {, return, true, ;, }, else, {, reportWarning, (, RESOLVED_TAG_EMPTY, ,]
[if, (, hasMoreTagsToResolve, (, objectType, ), ), {, return, true, ;, }, else, {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@extends", ,]
[objectType, ), ), {, return, true, ;, }, else, {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@extends", ,, fnName, ), ;, return]
[}, else, {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@extends", ,, fnName, ), ;, return, false, ;, }, }, else, {, return]
[ImplementedTypeValidator, implements, Predicate, <, JSType, >, {, @, Override, public, boolean, apply, (, JSType, type, ), {, ObjectType, objectType, =]
[ImplementedTypeValidator, implements, Predicate, <, JSType, >, {, @, Override, public, boolean, apply, (, JSType, type, ), {, ObjectType, objectType, =]
[JSType, >, {, @, Override, public, boolean, apply, (, JSType, type, ), {, ObjectType, objectType, =, ObjectType, ., cast, (]
[public, boolean, apply, (, JSType, type, ), {, ObjectType, objectType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[public, boolean, apply, (, JSType, type, ), {, ObjectType, objectType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[apply, (, JSType, type, ), {, ObjectType, objectType, =, ObjectType, ., cast, (, type, ), ;, if, (, objectType, ==]
[type, ), {, ObjectType, objectType, =, ObjectType, ., cast, (, type, ), ;, if, (, objectType, ==, null, ), {]
[{, ObjectType, objectType, =, ObjectType, ., cast, (, type, ), ;, if, (, objectType, ==, null, ), {, reportError, (]
[objectType, =, ObjectType, ., cast, (, type, ), ;, if, (, objectType, ==, null, ), {, reportError, (, BAD_IMPLEMENTED_TYPE, ,]
[cast, (, type, ), ;, if, (, objectType, ==, null, ), {, reportError, (, BAD_IMPLEMENTED_TYPE, ,, fnName, ), ;, return]
[(, objectType, ==, null, ), {, reportError, (, BAD_IMPLEMENTED_TYPE, ,, fnName, ), ;, return, false, ;, }, else, if, (]
[(, objectType, ==, null, ), {, reportError, (, BAD_IMPLEMENTED_TYPE, ,, fnName, ), ;, return, false, ;, }, else, if, (]
[(, BAD_IMPLEMENTED_TYPE, ,, fnName, ), ;, return, false, ;, }, else, if, (, objectType, ., isEmptyType, (, ), ), {]
[,, fnName, ), ;, return, false, ;, }, else, if, (, objectType, ., isEmptyType, (, ), ), {, reportWarning, (]
[), ;, return, false, ;, }, else, if, (, objectType, ., isEmptyType, (, ), ), {, reportWarning, (, RESOLVED_TAG_EMPTY, ,]
[return, false, ;, }, else, if, (, objectType, ., isEmptyType, (, ), ), {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@implements", ,]
[else, if, (, objectType, ., isEmptyType, (, ), ), {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@implements", ,, fnName, ), ;, return]
[(, ), ), {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@implements", ,, fnName, ), ;, return, false, ;, }, else, if, (]
[(, ), ), {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@implements", ,, fnName, ), ;, return, false, ;, }, else, if, (]
[,, fnName, ), ;, return, false, ;, }, else, if, (, objectType, ., isUnknownType, (, ), ), {, if, (]
[), ;, return, false, ;, }, else, if, (, objectType, ., isUnknownType, (, ), ), {, if, (, hasMoreTagsToResolve, (]
[}, else, if, (, objectType, ., isUnknownType, (, ), ), {, if, (, hasMoreTagsToResolve, (, objectType, ), ), {, return]
[., isUnknownType, (, ), ), {, if, (, hasMoreTagsToResolve, (, objectType, ), ), {, return, true, ;, }, else, {]
[(, ), ), {, if, (, hasMoreTagsToResolve, (, objectType, ), ), {, return, true, ;, }, else, {, reportWarning, (]
[), {, if, (, hasMoreTagsToResolve, (, objectType, ), ), {, return, true, ;, }, else, {, reportWarning, (, RESOLVED_TAG_EMPTY, ,]
[if, (, hasMoreTagsToResolve, (, objectType, ), ), {, return, true, ;, }, else, {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@implements", ,]
[objectType, ), ), {, return, true, ;, }, else, {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@implements", ,, fnName, ), ;, return]
[}, else, {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@implements", ,, fnName, ), ;, return, false, ;, }, }, else, {, return]
[}, }, FunctionTypeBuilder, (, String, fnName, ,, AbstractCompiler, compiler, ,, Node, errorRoot, ,, String, sourceName, ,, Scope, scope, ), {]
[}, }, FunctionTypeBuilder, (, String, fnName, ,, AbstractCompiler, compiler, ,, Node, errorRoot, ,, String, sourceName, ,, Scope, scope, ), {]
[String, fnName, ,, AbstractCompiler, compiler, ,, Node, errorRoot, ,, String, sourceName, ,, Scope, scope, ), {, Preconditions, ., checkNotNull, (]
[AbstractCompiler, compiler, ,, Node, errorRoot, ,, String, sourceName, ,, Scope, scope, ), {, Preconditions, ., checkNotNull, (, errorRoot, ), ;]
[AbstractCompiler, compiler, ,, Node, errorRoot, ,, String, sourceName, ,, Scope, scope, ), {, Preconditions, ., checkNotNull, (, errorRoot, ), ;]
[errorRoot, ,, String, sourceName, ,, Scope, scope, ), {, Preconditions, ., checkNotNull, (, errorRoot, ), ;, this, ., fnName, =]
[errorRoot, ,, String, sourceName, ,, Scope, scope, ), {, Preconditions, ., checkNotNull, (, errorRoot, ), ;, this, ., fnName, =]
[errorRoot, ,, String, sourceName, ,, Scope, scope, ), {, Preconditions, ., checkNotNull, (, errorRoot, ), ;, this, ., fnName, =]
[String, sourceName, ,, Scope, scope, ), {, Preconditions, ., checkNotNull, (, errorRoot, ), ;, this, ., fnName, =, fnName, ==]
[,, Scope, scope, ), {, Preconditions, ., checkNotNull, (, errorRoot, ), ;, this, ., fnName, =, fnName, ==, null, ?]
[scope, ), {, Preconditions, ., checkNotNull, (, errorRoot, ), ;, this, ., fnName, =, fnName, ==, null, ?, "", :]
[{, Preconditions, ., checkNotNull, (, errorRoot, ), ;, this, ., fnName, =, fnName, ==, null, ?, "", :, fnName, ;]
[{, Preconditions, ., checkNotNull, (, errorRoot, ), ;, this, ., fnName, =, fnName, ==, null, ?, "", :, fnName, ;]
[(, errorRoot, ), ;, this, ., fnName, =, fnName, ==, null, ?, "", :, fnName, ;, this, ., codingConvention, =]
[(, errorRoot, ), ;, this, ., fnName, =, fnName, ==, null, ?, "", :, fnName, ;, this, ., codingConvention, =]
[fnName, =, fnName, ==, null, ?, "", :, fnName, ;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;]
[fnName, =, fnName, ==, null, ?, "", :, fnName, ;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;]
[null, ?, "", :, fnName, ;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., typeRegistry, =]
[null, ?, "", :, fnName, ;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., typeRegistry, =]
[this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;]
[this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;]
[compiler, ., getCodingConvention, (, ), ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., errorRoot, =]
[getCodingConvention, (, ), ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., errorRoot, =, errorRoot, ;]
[getCodingConvention, (, ), ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., errorRoot, =, errorRoot, ;]
[this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., errorRoot, =, errorRoot, ;, this, ., sourceName, =]
[typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., errorRoot, =, errorRoot, ;, this, ., sourceName, =, sourceName, ;]
[typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., errorRoot, =, errorRoot, ;, this, ., sourceName, =, sourceName, ;]
[getTypeRegistry, (, ), ;, this, ., errorRoot, =, errorRoot, ;, this, ., sourceName, =, sourceName, ;, this, ., compiler, =]
[), ;, this, ., errorRoot, =, errorRoot, ;, this, ., sourceName, =, sourceName, ;, this, ., compiler, =, compiler, ;]
[), ;, this, ., errorRoot, =, errorRoot, ;, this, ., sourceName, =, sourceName, ;, this, ., compiler, =, compiler, ;]
[errorRoot, =, errorRoot, ;, this, ., sourceName, =, sourceName, ;, this, ., compiler, =, compiler, ;, this, ., scope, =]
[compiler, ;, this, ., scope, =, scope, ;, }, FunctionTypeBuilder, setContents, (, @, Nullable, FunctionContents, contents, ), {, if, (]
[compiler, ;, this, ., scope, =, scope, ;, }, FunctionTypeBuilder, setContents, (, @, Nullable, FunctionContents, contents, ), {, if, (]
[this, ., scope, =, scope, ;, }, FunctionTypeBuilder, setContents, (, @, Nullable, FunctionContents, contents, ), {, if, (, contents, !=]
[=, scope, ;, }, FunctionTypeBuilder, setContents, (, @, Nullable, FunctionContents, contents, ), {, if, (, contents, !=, null, ), {]
[=, scope, ;, }, FunctionTypeBuilder, setContents, (, @, Nullable, FunctionContents, contents, ), {, if, (, contents, !=, null, ), {]
[FunctionTypeBuilder, setContents, (, @, Nullable, FunctionContents, contents, ), {, if, (, contents, !=, null, ), {, this, ., contents, =]
[Nullable, FunctionContents, contents, ), {, if, (, contents, !=, null, ), {, this, ., contents, =, contents, ;, }, return]
[return, this, ;, }, FunctionTypeBuilder, inferFromOverriddenFunction, (, @, Nullable, FunctionType, oldType, ,, @, Nullable, Node, paramsParent, ), {, if, (]
[return, this, ;, }, FunctionTypeBuilder, inferFromOverriddenFunction, (, @, Nullable, FunctionType, oldType, ,, @, Nullable, Node, paramsParent, ), {, if, (]
[;, }, FunctionTypeBuilder, inferFromOverriddenFunction, (, @, Nullable, FunctionType, oldType, ,, @, Nullable, Node, paramsParent, ), {, if, (, oldType, ==]
[(, @, Nullable, FunctionType, oldType, ,, @, Nullable, Node, paramsParent, ), {, if, (, oldType, ==, null, ), {, return]
[FunctionType, oldType, ,, @, Nullable, Node, paramsParent, ), {, if, (, oldType, ==, null, ), {, return, this, ;, }]
[,, @, Nullable, Node, paramsParent, ), {, if, (, oldType, ==, null, ), {, return, this, ;, }, returnType, =]
[,, @, Nullable, Node, paramsParent, ), {, if, (, oldType, ==, null, ), {, return, this, ;, }, returnType, =]
[{, if, (, oldType, ==, null, ), {, return, this, ;, }, returnType, =, oldType, ., getReturnType, (, ), ;]
[(, oldType, ==, null, ), {, return, this, ;, }, returnType, =, oldType, ., getReturnType, (, ), ;, returnTypeInferred, =]
[(, oldType, ==, null, ), {, return, this, ;, }, returnType, =, oldType, ., getReturnType, (, ), ;, returnTypeInferred, =]
[;, }, returnType, =, oldType, ., getReturnType, (, ), ;, returnTypeInferred, =, oldType, ., isReturnTypeInferred, (, ), ;, if, (]
[;, }, returnType, =, oldType, ., getReturnType, (, ), ;, returnTypeInferred, =, oldType, ., isReturnTypeInferred, (, ), ;, if, (]
[returnType, =, oldType, ., getReturnType, (, ), ;, returnTypeInferred, =, oldType, ., isReturnTypeInferred, (, ), ;, if, (, paramsParent, ==]
[., getReturnType, (, ), ;, returnTypeInferred, =, oldType, ., isReturnTypeInferred, (, ), ;, if, (, paramsParent, ==, null, ), {]
[(, ), ;, returnTypeInferred, =, oldType, ., isReturnTypeInferred, (, ), ;, if, (, paramsParent, ==, null, ), {, parametersNode, =]
[(, ), ;, returnTypeInferred, =, oldType, ., isReturnTypeInferred, (, ), ;, if, (, paramsParent, ==, null, ), {, parametersNode, =]
[(, ), ;, if, (, paramsParent, ==, null, ), {, parametersNode, =, oldType, ., getParametersNode, (, ), ;, if, (]
[(, ), ;, if, (, paramsParent, ==, null, ), {, parametersNode, =, oldType, ., getParametersNode, (, ), ;, if, (]
[;, if, (, paramsParent, ==, null, ), {, parametersNode, =, oldType, ., getParametersNode, (, ), ;, if, (, parametersNode, ==]
[paramsParent, ==, null, ), {, parametersNode, =, oldType, ., getParametersNode, (, ), ;, if, (, parametersNode, ==, null, ), {]
[null, ), {, parametersNode, =, oldType, ., getParametersNode, (, ), ;, if, (, parametersNode, ==, null, ), {, parametersNode, =]
[null, ), {, parametersNode, =, oldType, ., getParametersNode, (, ), ;, if, (, parametersNode, ==, null, ), {, parametersNode, =]
[parametersNode, =, oldType, ., getParametersNode, (, ), ;, if, (, parametersNode, ==, null, ), {, parametersNode, =, new, FunctionParamBuilder, (]
[{, parametersNode, =, new, FunctionParamBuilder, (, typeRegistry, ), ., build, (, ), ;, }, }, else, {, FunctionParamBuilder, paramBuilder, =]
[new, FunctionParamBuilder, (, typeRegistry, ), ., build, (, ), ;, }, }, else, {, FunctionParamBuilder, paramBuilder, =, new, FunctionParamBuilder, (]
[;, }, }, else, {, FunctionParamBuilder, paramBuilder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, Iterator, <, Node, >, oldParams, =]
[;, }, }, else, {, FunctionParamBuilder, paramBuilder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, Iterator, <, Node, >, oldParams, =]
[;, }, }, else, {, FunctionParamBuilder, paramBuilder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, Iterator, <, Node, >, oldParams, =]
[;, Iterator, <, Node, >, oldParams, =, oldType, ., getParameters, (, ), ., iterator, (, ), ;, boolean, warnedAboutArgList, =]
[oldParams, =, oldType, ., getParameters, (, ), ., iterator, (, ), ;, boolean, warnedAboutArgList, =, false, ;, boolean, oldParamsListHitOptArgs, =]
[., iterator, (, ), ;, boolean, warnedAboutArgList, =, false, ;, boolean, oldParamsListHitOptArgs, =, false, ;, for, (, Node, currentParam, =]
[., iterator, (, ), ;, boolean, warnedAboutArgList, =, false, ;, boolean, oldParamsListHitOptArgs, =, false, ;, for, (, Node, currentParam, =]
[warnedAboutArgList, =, false, ;, boolean, oldParamsListHitOptArgs, =, false, ;, for, (, Node, currentParam, =, paramsParent, ., getFirstChild, (, ), ;]
[warnedAboutArgList, =, false, ;, boolean, oldParamsListHitOptArgs, =, false, ;, for, (, Node, currentParam, =, paramsParent, ., getFirstChild, (, ), ;]
[false, ;, boolean, oldParamsListHitOptArgs, =, false, ;, for, (, Node, currentParam, =, paramsParent, ., getFirstChild, (, ), ;, currentParam, !=]
[boolean, oldParamsListHitOptArgs, =, false, ;, for, (, Node, currentParam, =, paramsParent, ., getFirstChild, (, ), ;, currentParam, !=, null, ;]
[=, false, ;, for, (, Node, currentParam, =, paramsParent, ., getFirstChild, (, ), ;, currentParam, !=, null, ;, currentParam, =]
[=, false, ;, for, (, Node, currentParam, =, paramsParent, ., getFirstChild, (, ), ;, currentParam, !=, null, ;, currentParam, =]
[., getFirstChild, (, ), ;, currentParam, !=, null, ;, currentParam, =, currentParam, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, currentParam, !=, null, ;, currentParam, =, currentParam, ., getNext, (, ), ), {, if, (]
[=, currentParam, ., getNext, (, ), ), {, if, (, oldParams, ., hasNext, (, ), ), {, Node, oldParam, =]
[=, currentParam, ., getNext, (, ), ), {, if, (, oldParams, ., hasNext, (, ), ), {, Node, oldParam, =]
[(, oldParams, ., hasNext, (, ), ), {, Node, oldParam, =, oldParams, ., next, (, ), ;, Node, newParam, =]
[(, oldParams, ., hasNext, (, ), ), {, Node, oldParam, =, oldParams, ., next, (, ), ;, Node, newParam, =]
[(, ), ), {, Node, oldParam, =, oldParams, ., next, (, ), ;, Node, newParam, =, paramBuilder, ., newParameterFromNode, (]
[{, Node, oldParam, =, oldParams, ., next, (, ), ;, Node, newParam, =, paramBuilder, ., newParameterFromNode, (, oldParam, ), ;]
[oldParam, =, oldParams, ., next, (, ), ;, Node, newParam, =, paramBuilder, ., newParameterFromNode, (, oldParam, ), ;, oldParamsListHitOptArgs, =]
[oldParam, =, oldParams, ., next, (, ), ;, Node, newParam, =, paramBuilder, ., newParameterFromNode, (, oldParam, ), ;, oldParamsListHitOptArgs, =]
[oldParam, =, oldParams, ., next, (, ), ;, Node, newParam, =, paramBuilder, ., newParameterFromNode, (, oldParam, ), ;, oldParamsListHitOptArgs, =]
[oldParams, ., next, (, ), ;, Node, newParam, =, paramBuilder, ., newParameterFromNode, (, oldParam, ), ;, oldParamsListHitOptArgs, =, oldParamsListHitOptArgs, ||]
[oldParams, ., next, (, ), ;, Node, newParam, =, paramBuilder, ., newParameterFromNode, (, oldParam, ), ;, oldParamsListHitOptArgs, =, oldParamsListHitOptArgs, ||]
[Node, newParam, =, paramBuilder, ., newParameterFromNode, (, oldParam, ), ;, oldParamsListHitOptArgs, =, oldParamsListHitOptArgs, ||, oldParam, ., isVarArgs, (, ), ||]
[Node, newParam, =, paramBuilder, ., newParameterFromNode, (, oldParam, ), ;, oldParamsListHitOptArgs, =, oldParamsListHitOptArgs, ||, oldParam, ., isVarArgs, (, ), ||]
[), ;, oldParamsListHitOptArgs, =, oldParamsListHitOptArgs, ||, oldParam, ., isVarArgs, (, ), ||, oldParam, ., isOptionalArg, (, ), ;, if, (]
[), ;, oldParamsListHitOptArgs, =, oldParamsListHitOptArgs, ||, oldParam, ., isVarArgs, (, ), ||, oldParam, ., isOptionalArg, (, ), ;, if, (]
[), ;, oldParamsListHitOptArgs, =, oldParamsListHitOptArgs, ||, oldParam, ., isVarArgs, (, ), ||, oldParam, ., isOptionalArg, (, ), ;, if, (]
[), ;, oldParamsListHitOptArgs, =, oldParamsListHitOptArgs, ||, oldParam, ., isVarArgs, (, ), ||, oldParam, ., isOptionalArg, (, ), ;, if, (]
[oldParam, ., isVarArgs, (, ), ||, oldParam, ., isOptionalArg, (, ), ;, if, (, currentParam, ., getNext, (, ), !=]
[isVarArgs, (, ), ||, oldParam, ., isOptionalArg, (, ), ;, if, (, currentParam, ., getNext, (, ), !=, null, &&]
[isVarArgs, (, ), ||, oldParam, ., isOptionalArg, (, ), ;, if, (, currentParam, ., getNext, (, ), !=, null, &&]
[(, ), ;, if, (, currentParam, ., getNext, (, ), !=, null, &&, newParam, ., isVarArgs, (, ), ), {]
[(, ), ;, if, (, currentParam, ., getNext, (, ), !=, null, &&, newParam, ., isVarArgs, (, ), ), {]
[(, currentParam, ., getNext, (, ), !=, null, &&, newParam, ., isVarArgs, (, ), ), {, newParam, ., setVarArgs, (]
[getNext, (, ), !=, null, &&, newParam, ., isVarArgs, (, ), ), {, newParam, ., setVarArgs, (, false, ), ;]
[getNext, (, ), !=, null, &&, newParam, ., isVarArgs, (, ), ), {, newParam, ., setVarArgs, (, false, ), ;]
[null, &&, newParam, ., isVarArgs, (, ), ), {, newParam, ., setVarArgs, (, false, ), ;, newParam, ., setOptionalArg, (]
[), {, newParam, ., setVarArgs, (, false, ), ;, newParam, ., setOptionalArg, (, true, ), ;, }, }, else, {]
[newParam, ., setVarArgs, (, false, ), ;, newParam, ., setOptionalArg, (, true, ), ;, }, }, else, {, warnedAboutArgList, |=]
[setVarArgs, (, false, ), ;, newParam, ., setOptionalArg, (, true, ), ;, }, }, else, {, warnedAboutArgList, |=, addParameter, (]
[false, ), ;, newParam, ., setOptionalArg, (, true, ), ;, }, }, else, {, warnedAboutArgList, |=, addParameter, (, paramBuilder, ,]
[false, ), ;, newParam, ., setOptionalArg, (, true, ), ;, }, }, else, {, warnedAboutArgList, |=, addParameter, (, paramBuilder, ,]
[., setOptionalArg, (, true, ), ;, }, }, else, {, warnedAboutArgList, |=, addParameter, (, paramBuilder, ,, typeRegistry, ., getNativeType, (]
[true, ), ;, }, }, else, {, warnedAboutArgList, |=, addParameter, (, paramBuilder, ,, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ,]
[;, }, }, else, {, warnedAboutArgList, |=, addParameter, (, paramBuilder, ,, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ,, warnedAboutArgList, ,]
[;, }, }, else, {, warnedAboutArgList, |=, addParameter, (, paramBuilder, ,, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ,, warnedAboutArgList, ,]
[;, }, }, else, {, warnedAboutArgList, |=, addParameter, (, paramBuilder, ,, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ,, warnedAboutArgList, ,]
[{, warnedAboutArgList, |=, addParameter, (, paramBuilder, ,, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ,, warnedAboutArgList, ,, codingConvention, ., isOptionalParameter, (]
[addParameter, (, paramBuilder, ,, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ,, warnedAboutArgList, ,, codingConvention, ., isOptionalParameter, (, currentParam, ), ||]
[paramBuilder, ,, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ,, warnedAboutArgList, ,, codingConvention, ., isOptionalParameter, (, currentParam, ), ||, oldParamsListHitOptArgs, ,]
[paramBuilder, ,, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ,, warnedAboutArgList, ,, codingConvention, ., isOptionalParameter, (, currentParam, ), ||, oldParamsListHitOptArgs, ,]
[getNativeType, (, UNKNOWN_TYPE, ), ,, warnedAboutArgList, ,, codingConvention, ., isOptionalParameter, (, currentParam, ), ||, oldParamsListHitOptArgs, ,, codingConvention, ., isVarArgsParameter, (]
[., isOptionalParameter, (, currentParam, ), ||, oldParamsListHitOptArgs, ,, codingConvention, ., isVarArgsParameter, (, currentParam, ), ), ;, }, }, while, (]
[., isOptionalParameter, (, currentParam, ), ||, oldParamsListHitOptArgs, ,, codingConvention, ., isVarArgsParameter, (, currentParam, ), ), ;, }, }, while, (]
[,, codingConvention, ., isVarArgsParameter, (, currentParam, ), ), ;, }, }, while, (, oldParams, ., hasNext, (, ), ), {]
[,, codingConvention, ., isVarArgsParameter, (, currentParam, ), ), ;, }, }, while, (, oldParams, ., hasNext, (, ), ), {]
[(, currentParam, ), ), ;, }, }, while, (, oldParams, ., hasNext, (, ), ), {, paramBuilder, ., newOptionalParameterFromNode, (]
[(, currentParam, ), ), ;, }, }, while, (, oldParams, ., hasNext, (, ), ), {, paramBuilder, ., newOptionalParameterFromNode, (]
[(, oldParams, ., hasNext, (, ), ), {, paramBuilder, ., newOptionalParameterFromNode, (, oldParams, ., next, (, ), ), ;, }]
[., hasNext, (, ), ), {, paramBuilder, ., newOptionalParameterFromNode, (, oldParams, ., next, (, ), ), ;, }, parametersNode, =]
[., hasNext, (, ), ), {, paramBuilder, ., newOptionalParameterFromNode, (, oldParams, ., next, (, ), ), ;, }, parametersNode, =]
[newOptionalParameterFromNode, (, oldParams, ., next, (, ), ), ;, }, parametersNode, =, paramBuilder, ., build, (, ), ;, }, return]
[build, (, ), ;, }, return, this, ;, }, FunctionTypeBuilder, inferReturnType, (, @, Nullable, JSDocInfo, info, ), {, if, (]
[build, (, ), ;, }, return, this, ;, }, FunctionTypeBuilder, inferReturnType, (, @, Nullable, JSDocInfo, info, ), {, if, (]
[build, (, ), ;, }, return, this, ;, }, FunctionTypeBuilder, inferReturnType, (, @, Nullable, JSDocInfo, info, ), {, if, (]
[), ;, }, return, this, ;, }, FunctionTypeBuilder, inferReturnType, (, @, Nullable, JSDocInfo, info, ), {, if, (, info, !=]
[}, return, this, ;, }, FunctionTypeBuilder, inferReturnType, (, @, Nullable, JSDocInfo, info, ), {, if, (, info, !=, null, &&]
[}, return, this, ;, }, FunctionTypeBuilder, inferReturnType, (, @, Nullable, JSDocInfo, info, ), {, if, (, info, !=, null, &&]
[(, @, Nullable, JSDocInfo, info, ), {, if, (, info, !=, null, &&, info, ., hasReturnType, (, ), ), {]
[Nullable, JSDocInfo, info, ), {, if, (, info, !=, null, &&, info, ., hasReturnType, (, ), ), {, returnType, =]
[Nullable, JSDocInfo, info, ), {, if, (, info, !=, null, &&, info, ., hasReturnType, (, ), ), {, returnType, =]
[Nullable, JSDocInfo, info, ), {, if, (, info, !=, null, &&, info, ., hasReturnType, (, ), ), {, returnType, =]
[!=, null, &&, info, ., hasReturnType, (, ), ), {, returnType, =, info, ., getReturnType, (, ), ., evaluate, (]
[&&, info, ., hasReturnType, (, ), ), {, returnType, =, info, ., getReturnType, (, ), ., evaluate, (, scope, ,]
[hasReturnType, (, ), ), {, returnType, =, info, ., getReturnType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;]
[), ), {, returnType, =, info, ., getReturnType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, returnTypeInferred, =]
[=, info, ., getReturnType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, returnTypeInferred, =, false, ;, }, return]
[returnTypeInferred, =, false, ;, }, return, this, ;, }, FunctionTypeBuilder, inferInheritance, (, @, Nullable, JSDocInfo, info, ), {, if, (]
[returnTypeInferred, =, false, ;, }, return, this, ;, }, FunctionTypeBuilder, inferInheritance, (, @, Nullable, JSDocInfo, info, ), {, if, (]
[false, ;, }, return, this, ;, }, FunctionTypeBuilder, inferInheritance, (, @, Nullable, JSDocInfo, info, ), {, if, (, info, !=]
[return, this, ;, }, FunctionTypeBuilder, inferInheritance, (, @, Nullable, JSDocInfo, info, ), {, if, (, info, !=, null, ), {]
[;, }, FunctionTypeBuilder, inferInheritance, (, @, Nullable, JSDocInfo, info, ), {, if, (, info, !=, null, ), {, isConstructor, =]
[;, }, FunctionTypeBuilder, inferInheritance, (, @, Nullable, JSDocInfo, info, ), {, if, (, info, !=, null, ), {, isConstructor, =]
[Nullable, JSDocInfo, info, ), {, if, (, info, !=, null, ), {, isConstructor, =, info, ., isConstructor, (, ), ;]
[info, ), {, if, (, info, !=, null, ), {, isConstructor, =, info, ., isConstructor, (, ), ;, makesStructs, =]
[info, ), {, if, (, info, !=, null, ), {, isConstructor, =, info, ., isConstructor, (, ), ;, makesStructs, =]
[!=, null, ), {, isConstructor, =, info, ., isConstructor, (, ), ;, makesStructs, =, info, ., makesStructs, (, ), ;]
[), {, isConstructor, =, info, ., isConstructor, (, ), ;, makesStructs, =, info, ., makesStructs, (, ), ;, makesDicts, =]
[), {, isConstructor, =, info, ., isConstructor, (, ), ;, makesStructs, =, info, ., makesStructs, (, ), ;, makesDicts, =]
[isConstructor, (, ), ;, makesStructs, =, info, ., makesStructs, (, ), ;, makesDicts, =, info, ., makesDicts, (, ), ;]
[), ;, makesStructs, =, info, ., makesStructs, (, ), ;, makesDicts, =, info, ., makesDicts, (, ), ;, isInterface, =]
[), ;, makesStructs, =, info, ., makesStructs, (, ), ;, makesDicts, =, info, ., makesDicts, (, ), ;, isInterface, =]
[), ;, makesDicts, =, info, ., makesDicts, (, ), ;, isInterface, =, info, ., isInterface, (, ), ;, if, (]
[), ;, makesDicts, =, info, ., makesDicts, (, ), ;, isInterface, =, info, ., isInterface, (, ), ;, if, (]
[makesDicts, =, info, ., makesDicts, (, ), ;, isInterface, =, info, ., isInterface, (, ), ;, if, (, makesStructs, &&]
[=, info, ., makesDicts, (, ), ;, isInterface, =, info, ., isInterface, (, ), ;, if, (, makesStructs, &&, !]
[makesDicts, (, ), ;, isInterface, =, info, ., isInterface, (, ), ;, if, (, makesStructs, &&, !, isConstructor, ), {]
[), ;, isInterface, =, info, ., isInterface, (, ), ;, if, (, makesStructs, &&, !, isConstructor, ), {, reportWarning, (]
[isInterface, =, info, ., isInterface, (, ), ;, if, (, makesStructs, &&, !, isConstructor, ), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,]
[info, ., isInterface, (, ), ;, if, (, makesStructs, &&, !, isConstructor, ), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@struct", ,]
[(, makesStructs, &&, !, isConstructor, ), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@struct", ,, fnName, ), ;, }, else, if, (]
[(, makesStructs, &&, !, isConstructor, ), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@struct", ,, fnName, ), ;, }, else, if, (]
[&&, !, isConstructor, ), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@struct", ,, fnName, ), ;, }, else, if, (, makesDicts, &&]
[!, isConstructor, ), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@struct", ,, fnName, ), ;, }, else, if, (, makesDicts, &&, !]
[{, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@struct", ,, fnName, ), ;, }, else, if, (, makesDicts, &&, !, isConstructor, ), {]
[(, CONSTRUCTOR_REQUIRED, ,, "@struct", ,, fnName, ), ;, }, else, if, (, makesDicts, &&, !, isConstructor, ), {, reportWarning, (]
[,, "@struct", ,, fnName, ), ;, }, else, if, (, makesDicts, &&, !, isConstructor, ), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,]
[,, fnName, ), ;, }, else, if, (, makesDicts, &&, !, isConstructor, ), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@dict", ,]
[if, (, makesDicts, &&, !, isConstructor, ), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@dict", ,, fnName, ), ;, }, if, (]
[if, (, makesDicts, &&, !, isConstructor, ), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@dict", ,, fnName, ), ;, }, if, (]
[(, CONSTRUCTOR_REQUIRED, ,, "@dict", ,, fnName, ), ;, }, if, (, info, ., hasBaseType, (, ), ), {, if, (]
[), ;, }, if, (, info, ., hasBaseType, (, ), ), {, if, (, isConstructor, ), {, JSType, maybeBaseType, =]
[), ;, }, if, (, info, ., hasBaseType, (, ), ), {, if, (, isConstructor, ), {, JSType, maybeBaseType, =]
[), ;, }, if, (, info, ., hasBaseType, (, ), ), {, if, (, isConstructor, ), {, JSType, maybeBaseType, =]
[(, ), ), {, if, (, isConstructor, ), {, JSType, maybeBaseType, =, info, ., getBaseType, (, ), ., evaluate, (]
[), {, if, (, isConstructor, ), {, JSType, maybeBaseType, =, info, ., getBaseType, (, ), ., evaluate, (, scope, ,]
[), {, JSType, maybeBaseType, =, info, ., getBaseType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (]
[), {, JSType, maybeBaseType, =, info, ., getBaseType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (]
[), {, JSType, maybeBaseType, =, info, ., getBaseType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (]
[JSType, maybeBaseType, =, info, ., getBaseType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, maybeBaseType, !=]
[=, info, ., getBaseType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, maybeBaseType, !=, null, &&]
[=, info, ., getBaseType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, maybeBaseType, !=, null, &&]
[(, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, maybeBaseType, !=, null, &&, maybeBaseType, ., setValidator, (]
[typeRegistry, ), ;, if, (, maybeBaseType, !=, null, &&, maybeBaseType, ., setValidator, (, new, ExtendedTypeValidator, (, ), ), ), {]
[;, if, (, maybeBaseType, !=, null, &&, maybeBaseType, ., setValidator, (, new, ExtendedTypeValidator, (, ), ), ), {, baseType, =]
[maybeBaseType, !=, null, &&, maybeBaseType, ., setValidator, (, new, ExtendedTypeValidator, (, ), ), ), {, baseType, =, (, ObjectType, )]
[setValidator, (, new, ExtendedTypeValidator, (, ), ), ), {, baseType, =, (, ObjectType, ), maybeBaseType, ;, }, }, else, {]
[new, ExtendedTypeValidator, (, ), ), ), {, baseType, =, (, ObjectType, ), maybeBaseType, ;, }, }, else, {, reportWarning, (]
[(, ), ), ), {, baseType, =, (, ObjectType, ), maybeBaseType, ;, }, }, else, {, reportWarning, (, EXTENDS_WITHOUT_TYPEDEF, ,]
[(, ObjectType, ), maybeBaseType, ;, }, }, else, {, reportWarning, (, EXTENDS_WITHOUT_TYPEDEF, ,, fnName, ), ;, }, }, if, (]
[(, ObjectType, ), maybeBaseType, ;, }, }, else, {, reportWarning, (, EXTENDS_WITHOUT_TYPEDEF, ,, fnName, ), ;, }, }, if, (]
[(, ObjectType, ), maybeBaseType, ;, }, }, else, {, reportWarning, (, EXTENDS_WITHOUT_TYPEDEF, ,, fnName, ), ;, }, }, if, (]
[}, else, {, reportWarning, (, EXTENDS_WITHOUT_TYPEDEF, ,, fnName, ), ;, }, }, if, (, info, ., getImplementedInterfaceCount, (, ), >]
[EXTENDS_WITHOUT_TYPEDEF, ,, fnName, ), ;, }, }, if, (, info, ., getImplementedInterfaceCount, (, ), >, 0, ), {, if, (]
[), ;, }, }, if, (, info, ., getImplementedInterfaceCount, (, ), >, 0, ), {, if, (, isConstructor, ), {]
[}, }, if, (, info, ., getImplementedInterfaceCount, (, ), >, 0, ), {, if, (, isConstructor, ), {, implementedInterfaces, =]
[}, }, if, (, info, ., getImplementedInterfaceCount, (, ), >, 0, ), {, if, (, isConstructor, ), {, implementedInterfaces, =]
[), {, if, (, isConstructor, ), {, implementedInterfaces, =, Lists, ., newArrayList, (, ), ;, for, (, JSTypeExpression, t, :]
[), {, if, (, isConstructor, ), {, implementedInterfaces, =, Lists, ., newArrayList, (, ), ;, for, (, JSTypeExpression, t, :]
[., newArrayList, (, ), ;, for, (, JSTypeExpression, t, :, info, ., getImplementedInterfaces, (, ), ), {, JSType, maybeInterType, =]
[., newArrayList, (, ), ;, for, (, JSTypeExpression, t, :, info, ., getImplementedInterfaces, (, ), ), {, JSType, maybeInterType, =]
[;, for, (, JSTypeExpression, t, :, info, ., getImplementedInterfaces, (, ), ), {, JSType, maybeInterType, =, t, ., evaluate, (]
[(, JSTypeExpression, t, :, info, ., getImplementedInterfaces, (, ), ), {, JSType, maybeInterType, =, t, ., evaluate, (, scope, ,]
[., getImplementedInterfaces, (, ), ), {, JSType, maybeInterType, =, t, ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (]
[., getImplementedInterfaces, (, ), ), {, JSType, maybeInterType, =, t, ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (]
[., getImplementedInterfaces, (, ), ), {, JSType, maybeInterType, =, t, ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (]
[(, ), ), {, JSType, maybeInterType, =, t, ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, maybeInterType, !=]
[), {, JSType, maybeInterType, =, t, ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, maybeInterType, !=, null, &&]
[), {, JSType, maybeInterType, =, t, ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, maybeInterType, !=, null, &&]
[=, t, ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, maybeInterType, !=, null, &&, maybeInterType, ., setValidator, (]
[typeRegistry, ), ;, if, (, maybeInterType, !=, null, &&, maybeInterType, ., setValidator, (, new, ImplementedTypeValidator, (, ), ), ), {]
[typeRegistry, ), ;, if, (, maybeInterType, !=, null, &&, maybeInterType, ., setValidator, (, new, ImplementedTypeValidator, (, ), ), ), {]
[(, maybeInterType, !=, null, &&, maybeInterType, ., setValidator, (, new, ImplementedTypeValidator, (, ), ), ), {, implementedInterfaces, ., add, (]
[null, &&, maybeInterType, ., setValidator, (, new, ImplementedTypeValidator, (, ), ), ), {, implementedInterfaces, ., add, (, (, ObjectType, )]
[), ), ), {, implementedInterfaces, ., add, (, (, ObjectType, ), maybeInterType, ), ;, }, }, }, else, if, (]
[{, implementedInterfaces, ., add, (, (, ObjectType, ), maybeInterType, ), ;, }, }, }, else, if, (, isInterface, ), {]
[., add, (, (, ObjectType, ), maybeInterType, ), ;, }, }, }, else, if, (, isInterface, ), {, reportWarning, (]
[., add, (, (, ObjectType, ), maybeInterType, ), ;, }, }, }, else, if, (, isInterface, ), {, reportWarning, (]
[ObjectType, ), maybeInterType, ), ;, }, }, }, else, if, (, isInterface, ), {, reportWarning, (, TypeCheck, ., CONFLICTING_IMPLEMENTED_TYPE, ,]
[}, }, else, if, (, isInterface, ), {, reportWarning, (, TypeCheck, ., CONFLICTING_IMPLEMENTED_TYPE, ,, fnName, ), ;, }, else, {]
[else, if, (, isInterface, ), {, reportWarning, (, TypeCheck, ., CONFLICTING_IMPLEMENTED_TYPE, ,, fnName, ), ;, }, else, {, reportWarning, (]
[(, isInterface, ), {, reportWarning, (, TypeCheck, ., CONFLICTING_IMPLEMENTED_TYPE, ,, fnName, ), ;, }, else, {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,]
[), {, reportWarning, (, TypeCheck, ., CONFLICTING_IMPLEMENTED_TYPE, ,, fnName, ), ;, }, else, {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@implements", ,]
[,, fnName, ), ;, }, else, {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@implements", ,, fnName, ), ;, }, }, if, (]
[;, }, else, {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@implements", ,, fnName, ), ;, }, }, if, (, isInterface, ), {]
[else, {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@implements", ,, fnName, ), ;, }, }, if, (, isInterface, ), {, extendedInterfaces, =]
[else, {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@implements", ,, fnName, ), ;, }, }, if, (, isInterface, ), {, extendedInterfaces, =]
[}, }, if, (, isInterface, ), {, extendedInterfaces, =, Lists, ., newArrayList, (, ), ;, for, (, JSTypeExpression, t, :]
[}, }, if, (, isInterface, ), {, extendedInterfaces, =, Lists, ., newArrayList, (, ), ;, for, (, JSTypeExpression, t, :]
[., newArrayList, (, ), ;, for, (, JSTypeExpression, t, :, info, ., getExtendedInterfaces, (, ), ), {, JSType, maybeInterfaceType, =]
[., newArrayList, (, ), ;, for, (, JSTypeExpression, t, :, info, ., getExtendedInterfaces, (, ), ), {, JSType, maybeInterfaceType, =]
[;, for, (, JSTypeExpression, t, :, info, ., getExtendedInterfaces, (, ), ), {, JSType, maybeInterfaceType, =, t, ., evaluate, (]
[(, JSTypeExpression, t, :, info, ., getExtendedInterfaces, (, ), ), {, JSType, maybeInterfaceType, =, t, ., evaluate, (, scope, ,]
[., getExtendedInterfaces, (, ), ), {, JSType, maybeInterfaceType, =, t, ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (]
[., getExtendedInterfaces, (, ), ), {, JSType, maybeInterfaceType, =, t, ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (]
[., getExtendedInterfaces, (, ), ), {, JSType, maybeInterfaceType, =, t, ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (]
[(, ), ), {, JSType, maybeInterfaceType, =, t, ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, maybeInterfaceType, !=]
[), {, JSType, maybeInterfaceType, =, t, ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, maybeInterfaceType, !=, null, &&]
[), {, JSType, maybeInterfaceType, =, t, ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, maybeInterfaceType, !=, null, &&]
[=, t, ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, maybeInterfaceType, !=, null, &&, maybeInterfaceType, ., setValidator, (]
[typeRegistry, ), ;, if, (, maybeInterfaceType, !=, null, &&, maybeInterfaceType, ., setValidator, (, new, ExtendedTypeValidator, (, ), ), ), {]
[typeRegistry, ), ;, if, (, maybeInterfaceType, !=, null, &&, maybeInterfaceType, ., setValidator, (, new, ExtendedTypeValidator, (, ), ), ), {]
[(, maybeInterfaceType, !=, null, &&, maybeInterfaceType, ., setValidator, (, new, ExtendedTypeValidator, (, ), ), ), {, extendedInterfaces, ., add, (]
[null, &&, maybeInterfaceType, ., setValidator, (, new, ExtendedTypeValidator, (, ), ), ), {, extendedInterfaces, ., add, (, (, ObjectType, )]
[(, ), ), ), {, extendedInterfaces, ., add, (, (, ObjectType, ), maybeInterfaceType, ), ;, }, }, }, }, return]
[), ;, }, }, }, }, return, this, ;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ,, JSType, type, ), {]
[}, }, }, }, return, this, ;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ,, JSType, type, ), {, inferThisType, (]
[this, ;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ,, JSType, type, ), {, inferThisType, (, info, ), ;, if, (]
[this, ;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ,, JSType, type, ), {, inferThisType, (, info, ), ;, if, (]
[}, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ,, JSType, type, ), {, inferThisType, (, info, ), ;, if, (, thisType, ==]
[,, JSType, type, ), {, inferThisType, (, info, ), ;, if, (, thisType, ==, null, ), {, ObjectType, objType, =]
[,, JSType, type, ), {, inferThisType, (, info, ), ;, if, (, thisType, ==, null, ), {, ObjectType, objType, =]
[{, inferThisType, (, info, ), ;, if, (, thisType, ==, null, ), {, ObjectType, objType, =, ObjectType, ., cast, (]
[;, if, (, thisType, ==, null, ), {, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[;, if, (, thisType, ==, null, ), {, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[;, if, (, thisType, ==, null, ), {, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[(, thisType, ==, null, ), {, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=]
[==, null, ), {, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&]
[null, ), {, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&, (]
[null, ), {, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&, (]
[null, ), {, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&, (]
[{, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&, (, info, ==]
[objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&, (, info, ==, null, ||]
[=, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&, (, info, ==, null, ||, !]
[=, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&, (, info, ==, null, ||, !]
[if, (, objType, !=, null, &&, (, info, ==, null, ||, !, info, ., hasType, (, ), ), ), {]
[objType, !=, null, &&, (, info, ==, null, ||, !, info, ., hasType, (, ), ), ), {, thisType, =]
[info, ==, null, ||, !, info, ., hasType, (, ), ), ), {, thisType, =, objType, ;, }, }, return]
[thisType, =, objType, ;, }, }, return, this, ;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ), {, JSType, maybeThisType, =]
[}, }, return, this, ;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ), {, JSType, maybeThisType, =, null, ;, if, (]
[}, }, return, this, ;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ), {, JSType, maybeThisType, =, null, ;, if, (]
[}, }, return, this, ;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ), {, JSType, maybeThisType, =, null, ;, if, (]
[return, this, ;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ), {, JSType, maybeThisType, =, null, ;, if, (, info, !=]
[;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ), {, JSType, maybeThisType, =, null, ;, if, (, info, !=, null, &&]
[;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ), {, JSType, maybeThisType, =, null, ;, if, (, info, !=, null, &&]
[), {, JSType, maybeThisType, =, null, ;, if, (, info, !=, null, &&, info, ., hasThisType, (, ), ), {]
[JSType, maybeThisType, =, null, ;, if, (, info, !=, null, &&, info, ., hasThisType, (, ), ), {, maybeThisType, =]
[JSType, maybeThisType, =, null, ;, if, (, info, !=, null, &&, info, ., hasThisType, (, ), ), {, maybeThisType, =]
[JSType, maybeThisType, =, null, ;, if, (, info, !=, null, &&, info, ., hasThisType, (, ), ), {, maybeThisType, =]
[JSType, maybeThisType, =, null, ;, if, (, info, !=, null, &&, info, ., hasThisType, (, ), ), {, maybeThisType, =]
[!=, null, &&, info, ., hasThisType, (, ), ), {, maybeThisType, =, info, ., getThisType, (, ), ., evaluate, (]
[&&, info, ., hasThisType, (, ), ), {, maybeThisType, =, info, ., getThisType, (, ), ., evaluate, (, scope, ,]
[info, ., getThisType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ., restrictByNotNullOrUndefined, (, ), ;, }, if, (]
[info, ., getThisType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ., restrictByNotNullOrUndefined, (, ), ;, }, if, (]
[getThisType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ., restrictByNotNullOrUndefined, (, ), ;, }, if, (, maybeThisType, !=]
[., evaluate, (, scope, ,, typeRegistry, ), ., restrictByNotNullOrUndefined, (, ), ;, }, if, (, maybeThisType, !=, null, ), {]
[(, scope, ,, typeRegistry, ), ., restrictByNotNullOrUndefined, (, ), ;, }, if, (, maybeThisType, !=, null, ), {, thisType, =]
[), ., restrictByNotNullOrUndefined, (, ), ;, }, if, (, maybeThisType, !=, null, ), {, thisType, =, maybeThisType, ;, }, return]
[{, thisType, =, maybeThisType, ;, }, return, this, ;, }, FunctionTypeBuilder, inferParameterTypes, (, JSDocInfo, info, ), {, Node, lp, =]
[{, thisType, =, maybeThisType, ;, }, return, this, ;, }, FunctionTypeBuilder, inferParameterTypes, (, JSDocInfo, info, ), {, Node, lp, =]
[inferParameterTypes, (, JSDocInfo, info, ), {, Node, lp, =, IR, ., paramList, (, ), ;, for, (, String, name, :]
[inferParameterTypes, (, JSDocInfo, info, ), {, Node, lp, =, IR, ., paramList, (, ), ;, for, (, String, name, :]
[lp, =, IR, ., paramList, (, ), ;, for, (, String, name, :, info, ., getParameterNames, (, ), ), {]
[lp, =, IR, ., paramList, (, ), ;, for, (, String, name, :, info, ., getParameterNames, (, ), ), {]
[paramList, (, ), ;, for, (, String, name, :, info, ., getParameterNames, (, ), ), {, lp, ., addChildToBack, (]
[paramList, (, ), ;, for, (, String, name, :, info, ., getParameterNames, (, ), ), {, lp, ., addChildToBack, (]
[for, (, String, name, :, info, ., getParameterNames, (, ), ), {, lp, ., addChildToBack, (, IR, ., name, (]
[., getParameterNames, (, ), ), {, lp, ., addChildToBack, (, IR, ., name, (, name, ), ), ;, }, return]
[(, ), ), {, lp, ., addChildToBack, (, IR, ., name, (, name, ), ), ;, }, return, inferParameterTypes, (]
[), {, lp, ., addChildToBack, (, IR, ., name, (, name, ), ), ;, }, return, inferParameterTypes, (, lp, ,]
[info, ), ;, }, FunctionTypeBuilder, inferParameterTypes, (, @, Nullable, Node, argsParent, ,, @, Nullable, JSDocInfo, info, ), {, if, (]
[info, ), ;, }, FunctionTypeBuilder, inferParameterTypes, (, @, Nullable, Node, argsParent, ,, @, Nullable, JSDocInfo, info, ), {, if, (]
[;, }, FunctionTypeBuilder, inferParameterTypes, (, @, Nullable, Node, argsParent, ,, @, Nullable, JSDocInfo, info, ), {, if, (, argsParent, ==]
[@, Nullable, Node, argsParent, ,, @, Nullable, JSDocInfo, info, ), {, if, (, argsParent, ==, null, ), {, if, (]
[@, Nullable, Node, argsParent, ,, @, Nullable, JSDocInfo, info, ), {, if, (, argsParent, ==, null, ), {, if, (]
[Node, argsParent, ,, @, Nullable, JSDocInfo, info, ), {, if, (, argsParent, ==, null, ), {, if, (, info, ==]
[Nullable, JSDocInfo, info, ), {, if, (, argsParent, ==, null, ), {, if, (, info, ==, null, ), {, return]
[(, argsParent, ==, null, ), {, if, (, info, ==, null, ), {, return, this, ;, }, else, {, return]
[==, null, ), {, if, (, info, ==, null, ), {, return, this, ;, }, else, {, return, inferParameterTypes, (]
[null, ), {, return, this, ;, }, else, {, return, inferParameterTypes, (, info, ), ;, }, }, Node, oldParameterType, =]
[this, ;, }, else, {, return, inferParameterTypes, (, info, ), ;, }, }, Node, oldParameterType, =, null, ;, if, (]
[this, ;, }, else, {, return, inferParameterTypes, (, info, ), ;, }, }, Node, oldParameterType, =, null, ;, if, (]
[}, else, {, return, inferParameterTypes, (, info, ), ;, }, }, Node, oldParameterType, =, null, ;, if, (, parametersNode, !=]
[return, inferParameterTypes, (, info, ), ;, }, }, Node, oldParameterType, =, null, ;, if, (, parametersNode, !=, null, ), {]
[(, info, ), ;, }, }, Node, oldParameterType, =, null, ;, if, (, parametersNode, !=, null, ), {, oldParameterType, =]
[(, info, ), ;, }, }, Node, oldParameterType, =, null, ;, if, (, parametersNode, !=, null, ), {, oldParameterType, =]
[;, if, (, parametersNode, !=, null, ), {, oldParameterType, =, parametersNode, ., getFirstChild, (, ), ;, }, FunctionParamBuilder, builder, =]
[parametersNode, !=, null, ), {, oldParameterType, =, parametersNode, ., getFirstChild, (, ), ;, }, FunctionParamBuilder, builder, =, new, FunctionParamBuilder, (]
[=, parametersNode, ., getFirstChild, (, ), ;, }, FunctionParamBuilder, builder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, boolean, warnedAboutArgList, =]
[FunctionParamBuilder, builder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, boolean, warnedAboutArgList, =, false, ;, Set, <, String, >, allJsDocParams, =]
[FunctionParamBuilder, builder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, boolean, warnedAboutArgList, =, false, ;, Set, <, String, >, allJsDocParams, =]
[builder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, boolean, warnedAboutArgList, =, false, ;, Set, <, String, >, allJsDocParams, =, (]
[builder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, boolean, warnedAboutArgList, =, false, ;, Set, <, String, >, allJsDocParams, =, (]
[new, FunctionParamBuilder, (, typeRegistry, ), ;, boolean, warnedAboutArgList, =, false, ;, Set, <, String, >, allJsDocParams, =, (, info, ==]
[typeRegistry, ), ;, boolean, warnedAboutArgList, =, false, ;, Set, <, String, >, allJsDocParams, =, (, info, ==, null, ), ?]
[typeRegistry, ), ;, boolean, warnedAboutArgList, =, false, ;, Set, <, String, >, allJsDocParams, =, (, info, ==, null, ), ?]
[<, String, >, allJsDocParams, =, (, info, ==, null, ), ?, Sets, ., <, String, >, newHashSet, (, ), :]
[<, String, >, allJsDocParams, =, (, info, ==, null, ), ?, Sets, ., <, String, >, newHashSet, (, ), :]
[=, (, info, ==, null, ), ?, Sets, ., <, String, >, newHashSet, (, ), :, Sets, ., newHashSet, (]
[=, (, info, ==, null, ), ?, Sets, ., <, String, >, newHashSet, (, ), :, Sets, ., newHashSet, (]
[String, >, newHashSet, (, ), :, Sets, ., newHashSet, (, info, ., getParameterNames, (, ), ), ;, boolean, foundTemplateType, =]
[:, Sets, ., newHashSet, (, info, ., getParameterNames, (, ), ), ;, boolean, foundTemplateType, =, false, ;, boolean, isVarArgs, =]
[getParameterNames, (, ), ), ;, boolean, foundTemplateType, =, false, ;, boolean, isVarArgs, =, false, ;, for, (, Node, arg, :]
[getParameterNames, (, ), ), ;, boolean, foundTemplateType, =, false, ;, boolean, isVarArgs, =, false, ;, for, (, Node, arg, :]
[boolean, isVarArgs, =, false, ;, for, (, Node, arg, :, argsParent, ., children, (, ), ), {, String, argumentName, =]
[boolean, isVarArgs, =, false, ;, for, (, Node, arg, :, argsParent, ., children, (, ), ), {, String, argumentName, =]
[(, Node, arg, :, argsParent, ., children, (, ), ), {, String, argumentName, =, arg, ., getString, (, ), ;]
[(, Node, arg, :, argsParent, ., children, (, ), ), {, String, argumentName, =, arg, ., getString, (, ), ;]
[argsParent, ., children, (, ), ), {, String, argumentName, =, arg, ., getString, (, ), ;, allJsDocParams, ., remove, (]
[{, String, argumentName, =, arg, ., getString, (, ), ;, allJsDocParams, ., remove, (, argumentName, ), ;, JSType, parameterType, =]
[., getString, (, ), ;, allJsDocParams, ., remove, (, argumentName, ), ;, JSType, parameterType, =, null, ;, boolean, isOptionalParam, =]
[(, ), ;, allJsDocParams, ., remove, (, argumentName, ), ;, JSType, parameterType, =, null, ;, boolean, isOptionalParam, =, isOptionalParameter, (]
[;, allJsDocParams, ., remove, (, argumentName, ), ;, JSType, parameterType, =, null, ;, boolean, isOptionalParam, =, isOptionalParameter, (, arg, ,]
[remove, (, argumentName, ), ;, JSType, parameterType, =, null, ;, boolean, isOptionalParam, =, isOptionalParameter, (, arg, ,, info, ), ;]
[argumentName, ), ;, JSType, parameterType, =, null, ;, boolean, isOptionalParam, =, isOptionalParameter, (, arg, ,, info, ), ;, isVarArgs, =]
[;, JSType, parameterType, =, null, ;, boolean, isOptionalParam, =, isOptionalParameter, (, arg, ,, info, ), ;, isVarArgs, =, isVarArgsParameter, (]
[parameterType, =, null, ;, boolean, isOptionalParam, =, isOptionalParameter, (, arg, ,, info, ), ;, isVarArgs, =, isVarArgsParameter, (, arg, ,]
[isOptionalParam, =, isOptionalParameter, (, arg, ,, info, ), ;, isVarArgs, =, isVarArgsParameter, (, arg, ,, info, ), ;, if, (]
[isOptionalParam, =, isOptionalParameter, (, arg, ,, info, ), ;, isVarArgs, =, isVarArgsParameter, (, arg, ,, info, ), ;, if, (]
[isOptionalParam, =, isOptionalParameter, (, arg, ,, info, ), ;, isVarArgs, =, isVarArgsParameter, (, arg, ,, info, ), ;, if, (]
[isOptionalParameter, (, arg, ,, info, ), ;, isVarArgs, =, isVarArgsParameter, (, arg, ,, info, ), ;, if, (, info, !=]
[arg, ,, info, ), ;, isVarArgs, =, isVarArgsParameter, (, arg, ,, info, ), ;, if, (, info, !=, null, &&]
[arg, ,, info, ), ;, isVarArgs, =, isVarArgsParameter, (, arg, ,, info, ), ;, if, (, info, !=, null, &&]
[;, isVarArgs, =, isVarArgsParameter, (, arg, ,, info, ), ;, if, (, info, !=, null, &&, info, ., hasParameterType, (]
[(, arg, ,, info, ), ;, if, (, info, !=, null, &&, info, ., hasParameterType, (, argumentName, ), ), {]
[,, info, ), ;, if, (, info, !=, null, &&, info, ., hasParameterType, (, argumentName, ), ), {, parameterType, =]
[,, info, ), ;, if, (, info, !=, null, &&, info, ., hasParameterType, (, argumentName, ), ), {, parameterType, =]
[,, info, ), ;, if, (, info, !=, null, &&, info, ., hasParameterType, (, argumentName, ), ), {, parameterType, =]
[if, (, info, !=, null, &&, info, ., hasParameterType, (, argumentName, ), ), {, parameterType, =, info, ., getParameterType, (]
[&&, info, ., hasParameterType, (, argumentName, ), ), {, parameterType, =, info, ., getParameterType, (, argumentName, ), ., evaluate, (]
[., hasParameterType, (, argumentName, ), ), {, parameterType, =, info, ., getParameterType, (, argumentName, ), ., evaluate, (, scope, ,]
[parameterType, =, info, ., getParameterType, (, argumentName, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (]
[parameterType, =, info, ., getParameterType, (, argumentName, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (]
[parameterType, =, info, ., getParameterType, (, argumentName, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (]
[info, ., getParameterType, (, argumentName, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (, oldParameterType, !=]
[getParameterType, (, argumentName, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (, oldParameterType, !=, null, &&]
[getParameterType, (, argumentName, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (, oldParameterType, !=, null, &&]
[getParameterType, (, argumentName, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (, oldParameterType, !=, null, &&]
[(, scope, ,, typeRegistry, ), ;, }, else, if, (, oldParameterType, !=, null, &&, oldParameterType, ., getJSType, (, ), !=]
[typeRegistry, ), ;, }, else, if, (, oldParameterType, !=, null, &&, oldParameterType, ., getJSType, (, ), !=, null, ), {]
[;, }, else, if, (, oldParameterType, !=, null, &&, oldParameterType, ., getJSType, (, ), !=, null, ), {, parameterType, =]
[;, }, else, if, (, oldParameterType, !=, null, &&, oldParameterType, ., getJSType, (, ), !=, null, ), {, parameterType, =]
[!=, null, &&, oldParameterType, ., getJSType, (, ), !=, null, ), {, parameterType, =, oldParameterType, ., getJSType, (, ), ;]
[&&, oldParameterType, ., getJSType, (, ), !=, null, ), {, parameterType, =, oldParameterType, ., getJSType, (, ), ;, isOptionalParam, =]
[&&, oldParameterType, ., getJSType, (, ), !=, null, ), {, parameterType, =, oldParameterType, ., getJSType, (, ), ;, isOptionalParam, =]
[!=, null, ), {, parameterType, =, oldParameterType, ., getJSType, (, ), ;, isOptionalParam, =, oldParameterType, ., isOptionalArg, (, ), ;]
[), {, parameterType, =, oldParameterType, ., getJSType, (, ), ;, isOptionalParam, =, oldParameterType, ., isOptionalArg, (, ), ;, isVarArgs, =]
[), {, parameterType, =, oldParameterType, ., getJSType, (, ), ;, isOptionalParam, =, oldParameterType, ., isOptionalArg, (, ), ;, isVarArgs, =]
[;, isOptionalParam, =, oldParameterType, ., isOptionalArg, (, ), ;, isVarArgs, =, oldParameterType, ., isVarArgs, (, ), ;, }, else, {]
[=, oldParameterType, ., isOptionalArg, (, ), ;, isVarArgs, =, oldParameterType, ., isVarArgs, (, ), ;, }, else, {, parameterType, =]
[=, oldParameterType, ., isOptionalArg, (, ), ;, isVarArgs, =, oldParameterType, ., isVarArgs, (, ), ;, }, else, {, parameterType, =]
[(, ), ;, isVarArgs, =, oldParameterType, ., isVarArgs, (, ), ;, }, else, {, parameterType, =, typeRegistry, ., getNativeType, (]
[=, oldParameterType, ., isVarArgs, (, ), ;, }, else, {, parameterType, =, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }]
[., isVarArgs, (, ), ;, }, else, {, parameterType, =, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, warnedAboutArgList, |=]
[(, ), ;, }, else, {, parameterType, =, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, warnedAboutArgList, |=, addParameter, (]
[;, }, else, {, parameterType, =, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, warnedAboutArgList, |=, addParameter, (, builder, ,]
[else, {, parameterType, =, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, warnedAboutArgList, |=, addParameter, (, builder, ,, parameterType, ,]
[parameterType, =, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, warnedAboutArgList, |=, addParameter, (, builder, ,, parameterType, ,, warnedAboutArgList, ,]
[typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, warnedAboutArgList, |=, addParameter, (, builder, ,, parameterType, ,, warnedAboutArgList, ,, isOptionalParam, ,]
[), ;, }, warnedAboutArgList, |=, addParameter, (, builder, ,, parameterType, ,, warnedAboutArgList, ,, isOptionalParam, ,, isVarArgs, ), ;, if, (]
[), ;, }, warnedAboutArgList, |=, addParameter, (, builder, ,, parameterType, ,, warnedAboutArgList, ,, isOptionalParam, ,, isVarArgs, ), ;, if, (]
[}, warnedAboutArgList, |=, addParameter, (, builder, ,, parameterType, ,, warnedAboutArgList, ,, isOptionalParam, ,, isVarArgs, ), ;, if, (, oldParameterType, !=]
[addParameter, (, builder, ,, parameterType, ,, warnedAboutArgList, ,, isOptionalParam, ,, isVarArgs, ), ;, if, (, oldParameterType, !=, null, ), {]
[builder, ,, parameterType, ,, warnedAboutArgList, ,, isOptionalParam, ,, isVarArgs, ), ;, if, (, oldParameterType, !=, null, ), {, oldParameterType, =]
[builder, ,, parameterType, ,, warnedAboutArgList, ,, isOptionalParam, ,, isVarArgs, ), ;, if, (, oldParameterType, !=, null, ), {, oldParameterType, =]
[;, if, (, oldParameterType, !=, null, ), {, oldParameterType, =, oldParameterType, ., getNext, (, ), ;, }, }, if, (]
[if, (, oldParameterType, !=, null, ), {, oldParameterType, =, oldParameterType, ., getNext, (, ), ;, }, }, if, (, !]
[), {, oldParameterType, =, oldParameterType, ., getNext, (, ), ;, }, }, if, (, !, isVarArgs, ), {, while, (]
[), {, oldParameterType, =, oldParameterType, ., getNext, (, ), ;, }, }, if, (, !, isVarArgs, ), {, while, (]
[), {, oldParameterType, =, oldParameterType, ., getNext, (, ), ;, }, }, if, (, !, isVarArgs, ), {, while, (]
[oldParameterType, =, oldParameterType, ., getNext, (, ), ;, }, }, if, (, !, isVarArgs, ), {, while, (, oldParameterType, !=]
[oldParameterType, ., getNext, (, ), ;, }, }, if, (, !, isVarArgs, ), {, while, (, oldParameterType, !=, null, &&]
[., getNext, (, ), ;, }, }, if, (, !, isVarArgs, ), {, while, (, oldParameterType, !=, null, &&, !]
[), ;, }, }, if, (, !, isVarArgs, ), {, while, (, oldParameterType, !=, null, &&, !, isVarArgs, ), {]
[), ;, }, }, if, (, !, isVarArgs, ), {, while, (, oldParameterType, !=, null, &&, !, isVarArgs, ), {]
[if, (, !, isVarArgs, ), {, while, (, oldParameterType, !=, null, &&, !, isVarArgs, ), {, builder, ., newParameterFromNode, (]
[isVarArgs, ), {, while, (, oldParameterType, !=, null, &&, !, isVarArgs, ), {, builder, ., newParameterFromNode, (, oldParameterType, ), ;]
[{, while, (, oldParameterType, !=, null, &&, !, isVarArgs, ), {, builder, ., newParameterFromNode, (, oldParameterType, ), ;, oldParameterType, =]
[{, while, (, oldParameterType, !=, null, &&, !, isVarArgs, ), {, builder, ., newParameterFromNode, (, oldParameterType, ), ;, oldParameterType, =]
[newParameterFromNode, (, oldParameterType, ), ;, oldParameterType, =, oldParameterType, ., getNext, (, ), ;, }, }, for, (, String, inexistentName, :]
[), ;, oldParameterType, =, oldParameterType, ., getNext, (, ), ;, }, }, for, (, String, inexistentName, :, allJsDocParams, ), {]
[oldParameterType, =, oldParameterType, ., getNext, (, ), ;, }, }, for, (, String, inexistentName, :, allJsDocParams, ), {, reportWarning, (]
[oldParameterType, ., getNext, (, ), ;, }, }, for, (, String, inexistentName, :, allJsDocParams, ), {, reportWarning, (, INEXISTANT_PARAM, ,]
[getNext, (, ), ;, }, }, for, (, String, inexistentName, :, allJsDocParams, ), {, reportWarning, (, INEXISTANT_PARAM, ,, inexistentName, ,]
[}, }, for, (, String, inexistentName, :, allJsDocParams, ), {, reportWarning, (, INEXISTANT_PARAM, ,, inexistentName, ,, fnName, ), ;, }]
[for, (, String, inexistentName, :, allJsDocParams, ), {, reportWarning, (, INEXISTANT_PARAM, ,, inexistentName, ,, fnName, ), ;, }, parametersNode, =]
[for, (, String, inexistentName, :, allJsDocParams, ), {, reportWarning, (, INEXISTANT_PARAM, ,, inexistentName, ,, fnName, ), ;, }, parametersNode, =]
[{, reportWarning, (, INEXISTANT_PARAM, ,, inexistentName, ,, fnName, ), ;, }, parametersNode, =, builder, ., build, (, ), ;, return]
[;, return, this, ;, }, private, boolean, isOptionalParameter, (, Node, param, ,, @, Nullable, JSDocInfo, info, ), {, if, (]
[;, return, this, ;, }, private, boolean, isOptionalParameter, (, Node, param, ,, @, Nullable, JSDocInfo, info, ), {, if, (]
[}, private, boolean, isOptionalParameter, (, Node, param, ,, @, Nullable, JSDocInfo, info, ), {, if, (, codingConvention, ., isOptionalParameter, (]
[Node, param, ,, @, Nullable, JSDocInfo, info, ), {, if, (, codingConvention, ., isOptionalParameter, (, param, ), ), {, return]
[info, ), {, if, (, codingConvention, ., isOptionalParameter, (, param, ), ), {, return, true, ;, }, String, paramName, =]
[info, ), {, if, (, codingConvention, ., isOptionalParameter, (, param, ), ), {, return, true, ;, }, String, paramName, =]
[isOptionalParameter, (, param, ), ), {, return, true, ;, }, String, paramName, =, param, ., getString, (, ), ;, return]
[isOptionalParameter, (, param, ), ), {, return, true, ;, }, String, paramName, =, param, ., getString, (, ), ;, return]
[isOptionalParameter, (, param, ), ), {, return, true, ;, }, String, paramName, =, param, ., getString, (, ), ;, return]
[isOptionalParameter, (, param, ), ), {, return, true, ;, }, String, paramName, =, param, ., getString, (, ), ;, return]
[param, ), ), {, return, true, ;, }, String, paramName, =, param, ., getString, (, ), ;, return, info, !=]
[), {, return, true, ;, }, String, paramName, =, param, ., getString, (, ), ;, return, info, !=, null, &&]
[), {, return, true, ;, }, String, paramName, =, param, ., getString, (, ), ;, return, info, !=, null, &&]
[;, }, String, paramName, =, param, ., getString, (, ), ;, return, info, !=, null, &&, info, ., hasParameterType, (]
[paramName, =, param, ., getString, (, ), ;, return, info, !=, null, &&, info, ., hasParameterType, (, paramName, ), &&]
[paramName, =, param, ., getString, (, ), ;, return, info, !=, null, &&, info, ., hasParameterType, (, paramName, ), &&]
[paramName, =, param, ., getString, (, ), ;, return, info, !=, null, &&, info, ., hasParameterType, (, paramName, ), &&]
[getString, (, ), ;, return, info, !=, null, &&, info, ., hasParameterType, (, paramName, ), &&, info, ., getParameterType, (]
[isOptionalArg, (, ), ;, }, private, boolean, isVarArgsParameter, (, Node, param, ,, @, Nullable, JSDocInfo, info, ), {, if, (]
[isOptionalArg, (, ), ;, }, private, boolean, isVarArgsParameter, (, Node, param, ,, @, Nullable, JSDocInfo, info, ), {, if, (]
[}, private, boolean, isVarArgsParameter, (, Node, param, ,, @, Nullable, JSDocInfo, info, ), {, if, (, codingConvention, ., isVarArgsParameter, (]
[Node, param, ,, @, Nullable, JSDocInfo, info, ), {, if, (, codingConvention, ., isVarArgsParameter, (, param, ), ), {, return]
[info, ), {, if, (, codingConvention, ., isVarArgsParameter, (, param, ), ), {, return, true, ;, }, String, paramName, =]
[info, ), {, if, (, codingConvention, ., isVarArgsParameter, (, param, ), ), {, return, true, ;, }, String, paramName, =]
[isVarArgsParameter, (, param, ), ), {, return, true, ;, }, String, paramName, =, param, ., getString, (, ), ;, return]
[isVarArgsParameter, (, param, ), ), {, return, true, ;, }, String, paramName, =, param, ., getString, (, ), ;, return]
[isVarArgsParameter, (, param, ), ), {, return, true, ;, }, String, paramName, =, param, ., getString, (, ), ;, return]
[isVarArgsParameter, (, param, ), ), {, return, true, ;, }, String, paramName, =, param, ., getString, (, ), ;, return]
[param, ), ), {, return, true, ;, }, String, paramName, =, param, ., getString, (, ), ;, return, info, !=]
[), {, return, true, ;, }, String, paramName, =, param, ., getString, (, ), ;, return, info, !=, null, &&]
[), {, return, true, ;, }, String, paramName, =, param, ., getString, (, ), ;, return, info, !=, null, &&]
[;, }, String, paramName, =, param, ., getString, (, ), ;, return, info, !=, null, &&, info, ., hasParameterType, (]
[paramName, =, param, ., getString, (, ), ;, return, info, !=, null, &&, info, ., hasParameterType, (, paramName, ), &&]
[paramName, =, param, ., getString, (, ), ;, return, info, !=, null, &&, info, ., hasParameterType, (, paramName, ), &&]
[paramName, =, param, ., getString, (, ), ;, return, info, !=, null, &&, info, ., hasParameterType, (, paramName, ), &&]
[getString, (, ), ;, return, info, !=, null, &&, info, ., hasParameterType, (, paramName, ), &&, info, ., getParameterType, (]
[(, paramName, ), ., isVarArgs, (, ), ;, }, FunctionTypeBuilder, inferTemplateTypeName, (, @, Nullable, JSDocInfo, info, ), {, if, (]
[(, paramName, ), ., isVarArgs, (, ), ;, }, FunctionTypeBuilder, inferTemplateTypeName, (, @, Nullable, JSDocInfo, info, ), {, if, (]
[), ., isVarArgs, (, ), ;, }, FunctionTypeBuilder, inferTemplateTypeName, (, @, Nullable, JSDocInfo, info, ), {, if, (, info, !=]
[(, ), ;, }, FunctionTypeBuilder, inferTemplateTypeName, (, @, Nullable, JSDocInfo, info, ), {, if, (, info, !=, null, ), {]
[;, }, FunctionTypeBuilder, inferTemplateTypeName, (, @, Nullable, JSDocInfo, info, ), {, if, (, info, !=, null, ), {, templateTypeNames, =]
[;, }, FunctionTypeBuilder, inferTemplateTypeName, (, @, Nullable, JSDocInfo, info, ), {, if, (, info, !=, null, ), {, templateTypeNames, =]
[Nullable, JSDocInfo, info, ), {, if, (, info, !=, null, ), {, templateTypeNames, =, info, ., getTemplateTypeNames, (, ), ;]
[Nullable, JSDocInfo, info, ), {, if, (, info, !=, null, ), {, templateTypeNames, =, info, ., getTemplateTypeNames, (, ), ;]
[{, if, (, info, !=, null, ), {, templateTypeNames, =, info, ., getTemplateTypeNames, (, ), ;, typeRegistry, ., setTemplateTypeNames, (]
[null, ), {, templateTypeNames, =, info, ., getTemplateTypeNames, (, ), ;, typeRegistry, ., setTemplateTypeNames, (, templateTypeNames, ), ;, }, return]
[(, FunctionParamBuilder, builder, ,, JSType, paramType, ,, boolean, warnedAboutArgList, ,, boolean, isOptional, ,, boolean, isVarArgs, ), {, boolean, emittedWarning, =]
[JSType, paramType, ,, boolean, warnedAboutArgList, ,, boolean, isOptional, ,, boolean, isVarArgs, ), {, boolean, emittedWarning, =, false, ;, if, (]
[,, boolean, isOptional, ,, boolean, isVarArgs, ), {, boolean, emittedWarning, =, false, ;, if, (, isOptional, ), {, if, (]
[,, boolean, isOptional, ,, boolean, isVarArgs, ), {, boolean, emittedWarning, =, false, ;, if, (, isOptional, ), {, if, (]
[boolean, isOptional, ,, boolean, isVarArgs, ), {, boolean, emittedWarning, =, false, ;, if, (, isOptional, ), {, if, (, !]
[boolean, isOptional, ,, boolean, isVarArgs, ), {, boolean, emittedWarning, =, false, ;, if, (, isOptional, ), {, if, (, !]
[isVarArgs, ), {, boolean, emittedWarning, =, false, ;, if, (, isOptional, ), {, if, (, !, builder, ., addOptionalParams, (]
[boolean, emittedWarning, =, false, ;, if, (, isOptional, ), {, if, (, !, builder, ., addOptionalParams, (, paramType, ), &&]
[emittedWarning, =, false, ;, if, (, isOptional, ), {, if, (, !, builder, ., addOptionalParams, (, paramType, ), &&, !]
[;, if, (, isOptional, ), {, if, (, !, builder, ., addOptionalParams, (, paramType, ), &&, !, warnedAboutArgList, ), {]
[(, isOptional, ), {, if, (, !, builder, ., addOptionalParams, (, paramType, ), &&, !, warnedAboutArgList, ), {, reportWarning, (]
[{, if, (, !, builder, ., addOptionalParams, (, paramType, ), &&, !, warnedAboutArgList, ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;]
[(, !, builder, ., addOptionalParams, (, paramType, ), &&, !, warnedAboutArgList, ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =]
[), &&, !, warnedAboutArgList, ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, if, (]
[{, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, if, (, isVarArgs, ), {, if, (]
[{, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, if, (, isVarArgs, ), {, if, (]
[reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, if, (, isVarArgs, ), {, if, (, !]
[reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, if, (, isVarArgs, ), {, if, (, !]
[;, emittedWarning, =, true, ;, }, }, else, if, (, isVarArgs, ), {, if, (, !, builder, ., addVarArgs, (]
[true, ;, }, }, else, if, (, isVarArgs, ), {, if, (, !, builder, ., addVarArgs, (, paramType, ), &&]
[;, }, }, else, if, (, isVarArgs, ), {, if, (, !, builder, ., addVarArgs, (, paramType, ), &&, !]
[else, if, (, isVarArgs, ), {, if, (, !, builder, ., addVarArgs, (, paramType, ), &&, !, warnedAboutArgList, ), {]
[(, isVarArgs, ), {, if, (, !, builder, ., addVarArgs, (, paramType, ), &&, !, warnedAboutArgList, ), {, reportWarning, (]
[{, if, (, !, builder, ., addVarArgs, (, paramType, ), &&, !, warnedAboutArgList, ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;]
[(, !, builder, ., addVarArgs, (, paramType, ), &&, !, warnedAboutArgList, ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =]
[&&, !, warnedAboutArgList, ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, {, if, (]
[&&, !, warnedAboutArgList, ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, {, if, (]
[!, warnedAboutArgList, ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, {, if, (, !]
[!, warnedAboutArgList, ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, {, if, (, !]
[reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, {, if, (, !, builder, ., addRequiredParams, (]
[), ;, emittedWarning, =, true, ;, }, }, else, {, if, (, !, builder, ., addRequiredParams, (, paramType, ), &&]
[;, emittedWarning, =, true, ;, }, }, else, {, if, (, !, builder, ., addRequiredParams, (, paramType, ), &&, !]
[}, }, else, {, if, (, !, builder, ., addRequiredParams, (, paramType, ), &&, !, warnedAboutArgList, ), {, if, (]
[}, }, else, {, if, (, !, builder, ., addRequiredParams, (, paramType, ), &&, !, warnedAboutArgList, ), {, if, (]
[builder, ., addRequiredParams, (, paramType, ), &&, !, warnedAboutArgList, ), {, if, (, builder, ., hasVarArgs, (, ), ), {]
[addRequiredParams, (, paramType, ), &&, !, warnedAboutArgList, ), {, if, (, builder, ., hasVarArgs, (, ), ), {, reportWarning, (]
[warnedAboutArgList, ), {, if, (, builder, ., hasVarArgs, (, ), ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, }, else, {]
[{, if, (, builder, ., hasVarArgs, (, ), ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, }, else, {, reportWarning, (]
[., hasVarArgs, (, ), ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, }, else, {, reportWarning, (, OPTIONAL_ARG_AT_END, ), ;, }]
[(, ), ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, }, else, {, reportWarning, (, OPTIONAL_ARG_AT_END, ), ;, }, emittedWarning, =]
[(, VAR_ARGS_MUST_BE_LAST, ), ;, }, else, {, reportWarning, (, OPTIONAL_ARG_AT_END, ), ;, }, emittedWarning, =, true, ;, }, }, return]
[), ;, }, emittedWarning, =, true, ;, }, }, return, emittedWarning, ;, }, FunctionType, buildAndRegister, (, ), {, if, (]
[), ;, }, emittedWarning, =, true, ;, }, }, return, emittedWarning, ;, }, FunctionType, buildAndRegister, (, ), {, if, (]
[}, emittedWarning, =, true, ;, }, }, return, emittedWarning, ;, }, FunctionType, buildAndRegister, (, ), {, if, (, returnType, ==]
[}, }, return, emittedWarning, ;, }, FunctionType, buildAndRegister, (, ), {, if, (, returnType, ==, null, ), {, if, (]
[}, }, return, emittedWarning, ;, }, FunctionType, buildAndRegister, (, ), {, if, (, returnType, ==, null, ), {, if, (]
[}, }, return, emittedWarning, ;, }, FunctionType, buildAndRegister, (, ), {, if, (, returnType, ==, null, ), {, if, (]
[}, return, emittedWarning, ;, }, FunctionType, buildAndRegister, (, ), {, if, (, returnType, ==, null, ), {, if, (, !]
[}, return, emittedWarning, ;, }, FunctionType, buildAndRegister, (, ), {, if, (, returnType, ==, null, ), {, if, (, !]
[buildAndRegister, (, ), {, if, (, returnType, ==, null, ), {, if, (, !, contents, ., mayHaveNonEmptyReturns, (, ), &&]
[(, ), {, if, (, returnType, ==, null, ), {, if, (, !, contents, ., mayHaveNonEmptyReturns, (, ), &&, !]
[(, ), {, if, (, returnType, ==, null, ), {, if, (, !, contents, ., mayHaveNonEmptyReturns, (, ), &&, !]
[==, null, ), {, if, (, !, contents, ., mayHaveNonEmptyReturns, (, ), &&, !, contents, ., mayHaveSingleThrow, (, ), &&]
[null, ), {, if, (, !, contents, ., mayHaveNonEmptyReturns, (, ), &&, !, contents, ., mayHaveSingleThrow, (, ), &&, !]
[null, ), {, if, (, !, contents, ., mayHaveNonEmptyReturns, (, ), &&, !, contents, ., mayHaveSingleThrow, (, ), &&, !]
[., mayHaveNonEmptyReturns, (, ), &&, !, contents, ., mayHaveSingleThrow, (, ), &&, !, contents, ., mayBeFromExterns, (, ), ), {]
[(, ), &&, !, contents, ., mayHaveSingleThrow, (, ), &&, !, contents, ., mayBeFromExterns, (, ), ), {, returnType, =]
[(, ), &&, !, contents, ., mayHaveSingleThrow, (, ), &&, !, contents, ., mayBeFromExterns, (, ), ), {, returnType, =]
[contents, ., mayHaveSingleThrow, (, ), &&, !, contents, ., mayBeFromExterns, (, ), ), {, returnType, =, typeRegistry, ., getNativeType, (]
[(, ), &&, !, contents, ., mayBeFromExterns, (, ), ), {, returnType, =, typeRegistry, ., getNativeType, (, VOID_TYPE, ), ;]
[&&, !, contents, ., mayBeFromExterns, (, ), ), {, returnType, =, typeRegistry, ., getNativeType, (, VOID_TYPE, ), ;, returnTypeInferred, =]
[), ), {, returnType, =, typeRegistry, ., getNativeType, (, VOID_TYPE, ), ;, returnTypeInferred, =, true, ;, }, }, if, (]
[), ), {, returnType, =, typeRegistry, ., getNativeType, (, VOID_TYPE, ), ;, returnTypeInferred, =, true, ;, }, }, if, (]
[{, returnType, =, typeRegistry, ., getNativeType, (, VOID_TYPE, ), ;, returnTypeInferred, =, true, ;, }, }, if, (, returnType, ==]
[typeRegistry, ., getNativeType, (, VOID_TYPE, ), ;, returnTypeInferred, =, true, ;, }, }, if, (, returnType, ==, null, ), {]
[getNativeType, (, VOID_TYPE, ), ;, returnTypeInferred, =, true, ;, }, }, if, (, returnType, ==, null, ), {, returnType, =]
[getNativeType, (, VOID_TYPE, ), ;, returnTypeInferred, =, true, ;, }, }, if, (, returnType, ==, null, ), {, returnType, =]
[;, returnTypeInferred, =, true, ;, }, }, if, (, returnType, ==, null, ), {, returnType, =, typeRegistry, ., getNativeType, (]
[}, if, (, returnType, ==, null, ), {, returnType, =, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, if, (]
[}, if, (, returnType, ==, null, ), {, returnType, =, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, if, (]
[(, returnType, ==, null, ), {, returnType, =, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, if, (, parametersNode, ==]
[), {, returnType, =, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, if, (, parametersNode, ==, null, ), {, throw]
[=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, if, (, parametersNode, ==, null, ), {, throw, new, IllegalStateException, (]
[if, (, parametersNode, ==, null, ), {, throw, new, IllegalStateException, (, "All Function types must have params and a return type", ), ;, }, FunctionType, fnType, ;, if, (]
[==, null, ), {, throw, new, IllegalStateException, (, "All Function types must have params and a return type", ), ;, }, FunctionType, fnType, ;, if, (, isConstructor, ), {]
[), {, throw, new, IllegalStateException, (, "All Function types must have params and a return type", ), ;, }, FunctionType, fnType, ;, if, (, isConstructor, ), {, fnType, =]
[;, }, FunctionType, fnType, ;, if, (, isConstructor, ), {, fnType, =, getOrCreateConstructor, (, ), ;, }, else, if, (]
[fnType, ;, if, (, isConstructor, ), {, fnType, =, getOrCreateConstructor, (, ), ;, }, else, if, (, isInterface, ), {]
[if, (, isConstructor, ), {, fnType, =, getOrCreateConstructor, (, ), ;, }, else, if, (, isInterface, ), {, fnType, =]
[if, (, isConstructor, ), {, fnType, =, getOrCreateConstructor, (, ), ;, }, else, if, (, isInterface, ), {, fnType, =]
[{, fnType, =, getOrCreateConstructor, (, ), ;, }, else, if, (, isInterface, ), {, fnType, =, typeRegistry, ., createInterfaceType, (]
[=, getOrCreateConstructor, (, ), ;, }, else, if, (, isInterface, ), {, fnType, =, typeRegistry, ., createInterfaceType, (, fnName, ,]
[=, getOrCreateConstructor, (, ), ;, }, else, if, (, isInterface, ), {, fnType, =, typeRegistry, ., createInterfaceType, (, fnName, ,]
[isInterface, ), {, fnType, =, typeRegistry, ., createInterfaceType, (, fnName, ,, contents, ., getSourceNode, (, ), ), ;, if, (]
[isInterface, ), {, fnType, =, typeRegistry, ., createInterfaceType, (, fnName, ,, contents, ., getSourceNode, (, ), ), ;, if, (]
[isInterface, ), {, fnType, =, typeRegistry, ., createInterfaceType, (, fnName, ,, contents, ., getSourceNode, (, ), ), ;, if, (]
[(, fnName, ,, contents, ., getSourceNode, (, ), ), ;, if, (, getScopeDeclaredIn, (, ), ., isGlobal, (, ), &&]
[fnName, ,, contents, ., getSourceNode, (, ), ), ;, if, (, getScopeDeclaredIn, (, ), ., isGlobal, (, ), &&, !]
[fnName, ,, contents, ., getSourceNode, (, ), ), ;, if, (, getScopeDeclaredIn, (, ), ., isGlobal, (, ), &&, !]
[), ;, if, (, getScopeDeclaredIn, (, ), ., isGlobal, (, ), &&, !, fnName, ., isEmpty, (, ), ), {]
[), ;, if, (, getScopeDeclaredIn, (, ), ., isGlobal, (, ), &&, !, fnName, ., isEmpty, (, ), ), {]
[getScopeDeclaredIn, (, ), ., isGlobal, (, ), &&, !, fnName, ., isEmpty, (, ), ), {, typeRegistry, ., declareType, (]
[), ., isGlobal, (, ), &&, !, fnName, ., isEmpty, (, ), ), {, typeRegistry, ., declareType, (, fnName, ,]
[), ., isGlobal, (, ), &&, !, fnName, ., isEmpty, (, ), ), {, typeRegistry, ., declareType, (, fnName, ,]
[., isEmpty, (, ), ), {, typeRegistry, ., declareType, (, fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }]
[(, ), ), {, typeRegistry, ., declareType, (, fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }, maybeSetBaseType, (]
[declareType, (, fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }, maybeSetBaseType, (, fnType, ), ;, }, else, {]
[fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }, maybeSetBaseType, (, fnType, ), ;, }, else, {, fnType, =]
[fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }, maybeSetBaseType, (, fnType, ), ;, }, else, {, fnType, =]
[fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }, maybeSetBaseType, (, fnType, ), ;, }, else, {, fnType, =]
[fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }, maybeSetBaseType, (, fnType, ), ;, }, else, {, fnType, =]
[fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }, maybeSetBaseType, (, fnType, ), ;, }, else, {, fnType, =]
[fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }, maybeSetBaseType, (, fnType, ), ;, }, else, {, fnType, =]
[fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }, maybeSetBaseType, (, fnType, ), ;, }, else, {, fnType, =]
[fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }, maybeSetBaseType, (, fnType, ), ;, }, else, {, fnType, =]
[., getInstanceType, (, ), ), ;, }, maybeSetBaseType, (, fnType, ), ;, }, else, {, fnType, =, new, FunctionBuilder, (]
[;, }, maybeSetBaseType, (, fnType, ), ;, }, else, {, fnType, =, new, FunctionBuilder, (, typeRegistry, ), ., withName, (]
[), ;, }, else, {, fnType, =, new, FunctionBuilder, (, typeRegistry, ), ., withName, (, fnName, ), ., withSourceNode, (]
[), ;, }, else, {, fnType, =, new, FunctionBuilder, (, typeRegistry, ), ., withName, (, fnName, ), ., withSourceNode, (]
[(, typeRegistry, ), ., withName, (, fnName, ), ., withSourceNode, (, contents, ., getSourceNode, (, ), ), ., withParamsNode, (]
[(, fnName, ), ., withSourceNode, (, contents, ., getSourceNode, (, ), ), ., withParamsNode, (, parametersNode, ), ., withReturnType, (]
[), ., withSourceNode, (, contents, ., getSourceNode, (, ), ), ., withParamsNode, (, parametersNode, ), ., withReturnType, (, returnType, ,]
[., getSourceNode, (, ), ), ., withParamsNode, (, parametersNode, ), ., withReturnType, (, returnType, ,, returnTypeInferred, ), ., withTypeOfThis, (]
[., withParamsNode, (, parametersNode, ), ., withReturnType, (, returnType, ,, returnTypeInferred, ), ., withTypeOfThis, (, thisType, ), ., withTemplateKeys, (]
[(, returnType, ,, returnTypeInferred, ), ., withTypeOfThis, (, thisType, ), ., withTemplateKeys, (, templateTypeNames, ), ., build, (, ), ;]
[,, returnTypeInferred, ), ., withTypeOfThis, (, thisType, ), ., withTemplateKeys, (, templateTypeNames, ), ., build, (, ), ;, maybeSetBaseType, (]
[thisType, ), ., withTemplateKeys, (, templateTypeNames, ), ., build, (, ), ;, maybeSetBaseType, (, fnType, ), ;, }, if, (]
[thisType, ), ., withTemplateKeys, (, templateTypeNames, ), ., build, (, ), ;, maybeSetBaseType, (, fnType, ), ;, }, if, (]
[., withTemplateKeys, (, templateTypeNames, ), ., build, (, ), ;, maybeSetBaseType, (, fnType, ), ;, }, if, (, implementedInterfaces, !=]
[templateTypeNames, ), ., build, (, ), ;, maybeSetBaseType, (, fnType, ), ;, }, if, (, implementedInterfaces, !=, null, ), {]
[templateTypeNames, ), ., build, (, ), ;, maybeSetBaseType, (, fnType, ), ;, }, if, (, implementedInterfaces, !=, null, ), {]
[(, ), ;, maybeSetBaseType, (, fnType, ), ;, }, if, (, implementedInterfaces, !=, null, ), {, fnType, ., setImplementedInterfaces, (]
[), ;, }, if, (, implementedInterfaces, !=, null, ), {, fnType, ., setImplementedInterfaces, (, implementedInterfaces, ), ;, }, if, (]
[), ;, }, if, (, implementedInterfaces, !=, null, ), {, fnType, ., setImplementedInterfaces, (, implementedInterfaces, ), ;, }, if, (]
[}, if, (, implementedInterfaces, !=, null, ), {, fnType, ., setImplementedInterfaces, (, implementedInterfaces, ), ;, }, if, (, extendedInterfaces, !=]
[implementedInterfaces, !=, null, ), {, fnType, ., setImplementedInterfaces, (, implementedInterfaces, ), ;, }, if, (, extendedInterfaces, !=, null, ), {]
[implementedInterfaces, !=, null, ), {, fnType, ., setImplementedInterfaces, (, implementedInterfaces, ), ;, }, if, (, extendedInterfaces, !=, null, ), {]
[{, fnType, ., setImplementedInterfaces, (, implementedInterfaces, ), ;, }, if, (, extendedInterfaces, !=, null, ), {, fnType, ., setExtendedInterfaces, (]
[(, implementedInterfaces, ), ;, }, if, (, extendedInterfaces, !=, null, ), {, fnType, ., setExtendedInterfaces, (, extendedInterfaces, ), ;, }]
[(, implementedInterfaces, ), ;, }, if, (, extendedInterfaces, !=, null, ), {, fnType, ., setExtendedInterfaces, (, extendedInterfaces, ), ;, }]
[extendedInterfaces, !=, null, ), {, fnType, ., setExtendedInterfaces, (, extendedInterfaces, ), ;, }, typeRegistry, ., clearTemplateTypeNames, (, ), ;, return]
[typeRegistry, ., clearTemplateTypeNames, (, ), ;, return, fnType, ;, }, private, void, maybeSetBaseType, (, FunctionType, fnType, ), {, if, (]
[typeRegistry, ., clearTemplateTypeNames, (, ), ;, return, fnType, ;, }, private, void, maybeSetBaseType, (, FunctionType, fnType, ), {, if, (]
[., clearTemplateTypeNames, (, ), ;, return, fnType, ;, }, private, void, maybeSetBaseType, (, FunctionType, fnType, ), {, if, (, !]
[., clearTemplateTypeNames, (, ), ;, return, fnType, ;, }, private, void, maybeSetBaseType, (, FunctionType, fnType, ), {, if, (, !]
[fnType, ;, }, private, void, maybeSetBaseType, (, FunctionType, fnType, ), {, if, (, !, fnType, ., isInterface, (, ), &&]
[fnType, ;, }, private, void, maybeSetBaseType, (, FunctionType, fnType, ), {, if, (, !, fnType, ., isInterface, (, ), &&]
[}, private, void, maybeSetBaseType, (, FunctionType, fnType, ), {, if, (, !, fnType, ., isInterface, (, ), &&, baseType, !=]
[maybeSetBaseType, (, FunctionType, fnType, ), {, if, (, !, fnType, ., isInterface, (, ), &&, baseType, !=, null, ), {]
[maybeSetBaseType, (, FunctionType, fnType, ), {, if, (, !, fnType, ., isInterface, (, ), &&, baseType, !=, null, ), {]
[), {, if, (, !, fnType, ., isInterface, (, ), &&, baseType, !=, null, ), {, fnType, ., setPrototypeBasedOn, (]
[), {, fnType, ., setPrototypeBasedOn, (, baseType, ), ;, }, }, private, FunctionType, getOrCreateConstructor, (, ), {, FunctionType, fnType, =]
[), {, fnType, ., setPrototypeBasedOn, (, baseType, ), ;, }, }, private, FunctionType, getOrCreateConstructor, (, ), {, FunctionType, fnType, =]
[setPrototypeBasedOn, (, baseType, ), ;, }, }, private, FunctionType, getOrCreateConstructor, (, ), {, FunctionType, fnType, =, typeRegistry, ., createConstructorType, (]
[baseType, ), ;, }, }, private, FunctionType, getOrCreateConstructor, (, ), {, FunctionType, fnType, =, typeRegistry, ., createConstructorType, (, fnName, ,]
[baseType, ), ;, }, }, private, FunctionType, getOrCreateConstructor, (, ), {, FunctionType, fnType, =, typeRegistry, ., createConstructorType, (, fnName, ,]
[FunctionType, getOrCreateConstructor, (, ), {, FunctionType, fnType, =, typeRegistry, ., createConstructorType, (, fnName, ,, contents, ., getSourceNode, (, ), ,]
[(, ), {, FunctionType, fnType, =, typeRegistry, ., createConstructorType, (, fnName, ,, contents, ., getSourceNode, (, ), ,, parametersNode, ,]
[{, FunctionType, fnType, =, typeRegistry, ., createConstructorType, (, fnName, ,, contents, ., getSourceNode, (, ), ,, parametersNode, ,, returnType, ,]
[createConstructorType, (, fnName, ,, contents, ., getSourceNode, (, ), ,, parametersNode, ,, returnType, ,, null, ), ;, JSType, existingType, =]
[createConstructorType, (, fnName, ,, contents, ., getSourceNode, (, ), ,, parametersNode, ,, returnType, ,, null, ), ;, JSType, existingType, =]
[contents, ., getSourceNode, (, ), ,, parametersNode, ,, returnType, ,, null, ), ;, JSType, existingType, =, typeRegistry, ., getType, (]
[,, parametersNode, ,, returnType, ,, null, ), ;, JSType, existingType, =, typeRegistry, ., getType, (, fnName, ), ;, if, (]
[returnType, ,, null, ), ;, JSType, existingType, =, typeRegistry, ., getType, (, fnName, ), ;, if, (, makesStructs, ), {]
[returnType, ,, null, ), ;, JSType, existingType, =, typeRegistry, ., getType, (, fnName, ), ;, if, (, makesStructs, ), {]
[getType, (, fnName, ), ;, if, (, makesStructs, ), {, fnType, ., setStruct, (, ), ;, }, else, if, (]
[), ;, if, (, makesStructs, ), {, fnType, ., setStruct, (, ), ;, }, else, if, (, makesDicts, ), {]
[), ;, if, (, makesStructs, ), {, fnType, ., setStruct, (, ), ;, }, else, if, (, makesDicts, ), {]
[setStruct, (, ), ;, }, else, if, (, makesDicts, ), {, fnType, ., setDict, (, ), ;, }, if, (]
[setStruct, (, ), ;, }, else, if, (, makesDicts, ), {, fnType, ., setDict, (, ), ;, }, if, (]
[), ;, }, else, if, (, makesDicts, ), {, fnType, ., setDict, (, ), ;, }, if, (, existingType, !=]
[makesDicts, ), {, fnType, ., setDict, (, ), ;, }, if, (, existingType, !=, null, ), {, boolean, isInstanceObject, =]
[makesDicts, ), {, fnType, ., setDict, (, ), ;, }, if, (, existingType, !=, null, ), {, boolean, isInstanceObject, =]
[;, }, if, (, existingType, !=, null, ), {, boolean, isInstanceObject, =, existingType, ., isInstanceType, (, ), ;, if, (]
[;, }, if, (, existingType, !=, null, ), {, boolean, isInstanceObject, =, existingType, ., isInstanceType, (, ), ;, if, (]
[if, (, existingType, !=, null, ), {, boolean, isInstanceObject, =, existingType, ., isInstanceType, (, ), ;, if, (, isInstanceObject, ||]
[if, (, existingType, !=, null, ), {, boolean, isInstanceObject, =, existingType, ., isInstanceType, (, ), ;, if, (, isInstanceObject, ||]
[null, ), {, boolean, isInstanceObject, =, existingType, ., isInstanceType, (, ), ;, if, (, isInstanceObject, ||, fnName, ., equals, (]
[., isInstanceType, (, ), ;, if, (, isInstanceObject, ||, fnName, ., equals, (, "Function", ), ), {, FunctionType, existingFn, =]
[., isInstanceType, (, ), ;, if, (, isInstanceObject, ||, fnName, ., equals, (, "Function", ), ), {, FunctionType, existingFn, =]
[(, ), ;, if, (, isInstanceObject, ||, fnName, ., equals, (, "Function", ), ), {, FunctionType, existingFn, =, isInstanceObject, ?]
[(, ), ;, if, (, isInstanceObject, ||, fnName, ., equals, (, "Function", ), ), {, FunctionType, existingFn, =, isInstanceObject, ?]
[(, ), ;, if, (, isInstanceObject, ||, fnName, ., equals, (, "Function", ), ), {, FunctionType, existingFn, =, isInstanceObject, ?]
[(, "Function", ), ), {, FunctionType, existingFn, =, isInstanceObject, ?, existingType, ., toObjectType, (, ), ., getConstructor, (, ), :]
[(, "Function", ), ), {, FunctionType, existingFn, =, isInstanceObject, ?, existingType, ., toObjectType, (, ), ., getConstructor, (, ), :]
[{, FunctionType, existingFn, =, isInstanceObject, ?, existingType, ., toObjectType, (, ), ., getConstructor, (, ), :, typeRegistry, ., getNativeFunctionType, (]
[?, existingType, ., toObjectType, (, ), ., getConstructor, (, ), :, typeRegistry, ., getNativeFunctionType, (, FUNCTION_FUNCTION_TYPE, ), ;, if, (]
[?, existingType, ., toObjectType, (, ), ., getConstructor, (, ), :, typeRegistry, ., getNativeFunctionType, (, FUNCTION_FUNCTION_TYPE, ), ;, if, (]
[?, existingType, ., toObjectType, (, ), ., getConstructor, (, ), :, typeRegistry, ., getNativeFunctionType, (, FUNCTION_FUNCTION_TYPE, ), ;, if, (]
[., getConstructor, (, ), :, typeRegistry, ., getNativeFunctionType, (, FUNCTION_FUNCTION_TYPE, ), ;, if, (, existingFn, ., getSource, (, ), ==]
[), :, typeRegistry, ., getNativeFunctionType, (, FUNCTION_FUNCTION_TYPE, ), ;, if, (, existingFn, ., getSource, (, ), ==, null, ), {]
[), :, typeRegistry, ., getNativeFunctionType, (, FUNCTION_FUNCTION_TYPE, ), ;, if, (, existingFn, ., getSource, (, ), ==, null, ), {]
[getNativeFunctionType, (, FUNCTION_FUNCTION_TYPE, ), ;, if, (, existingFn, ., getSource, (, ), ==, null, ), {, existingFn, ., setSource, (]
[getNativeFunctionType, (, FUNCTION_FUNCTION_TYPE, ), ;, if, (, existingFn, ., getSource, (, ), ==, null, ), {, existingFn, ., setSource, (]
[(, ), ==, null, ), {, existingFn, ., setSource, (, contents, ., getSourceNode, (, ), ), ;, }, if, (]
[), ==, null, ), {, existingFn, ., setSource, (, contents, ., getSourceNode, (, ), ), ;, }, if, (, !]
[), ==, null, ), {, existingFn, ., setSource, (, contents, ., getSourceNode, (, ), ), ;, }, if, (, !]
[{, existingFn, ., setSource, (, contents, ., getSourceNode, (, ), ), ;, }, if, (, !, existingFn, ., hasEqualCallType, (]
[(, contents, ., getSourceNode, (, ), ), ;, }, if, (, !, existingFn, ., hasEqualCallType, (, fnType, ), ), {]
[., getSourceNode, (, ), ), ;, }, if, (, !, existingFn, ., hasEqualCallType, (, fnType, ), ), {, reportWarning, (]
[(, ), ), ;, }, if, (, !, existingFn, ., hasEqualCallType, (, fnType, ), ), {, reportWarning, (, TYPE_REDEFINITION, ,]
[), ;, }, if, (, !, existingFn, ., hasEqualCallType, (, fnType, ), ), {, reportWarning, (, TYPE_REDEFINITION, ,, fnName, ,]
[), ;, }, if, (, !, existingFn, ., hasEqualCallType, (, fnType, ), ), {, reportWarning, (, TYPE_REDEFINITION, ,, fnName, ,]
[existingFn, ., hasEqualCallType, (, fnType, ), ), {, reportWarning, (, TYPE_REDEFINITION, ,, fnName, ,, fnType, ., toString, (, ), ,]
[existingFn, ., hasEqualCallType, (, fnType, ), ), {, reportWarning, (, TYPE_REDEFINITION, ,, fnName, ,, fnType, ., toString, (, ), ,]
[(, TYPE_REDEFINITION, ,, fnName, ,, fnType, ., toString, (, ), ,, existingFn, ., toString, (, ), ), ;, }, return]
[toString, (, ), ,, existingFn, ., toString, (, ), ), ;, }, return, existingFn, ;, }, else, {, }, }]
[), ,, existingFn, ., toString, (, ), ), ;, }, return, existingFn, ;, }, else, {, }, }, maybeSetBaseType, (]
[(, ), ), ;, }, return, existingFn, ;, }, else, {, }, }, maybeSetBaseType, (, fnType, ), ;, if, (]
[(, ), ), ;, }, return, existingFn, ;, }, else, {, }, }, maybeSetBaseType, (, fnType, ), ;, if, (]
[(, ), ), ;, }, return, existingFn, ;, }, else, {, }, }, maybeSetBaseType, (, fnType, ), ;, if, (]
[}, else, {, }, }, maybeSetBaseType, (, fnType, ), ;, if, (, getScopeDeclaredIn, (, ), ., isGlobal, (, ), &&]
[else, {, }, }, maybeSetBaseType, (, fnType, ), ;, if, (, getScopeDeclaredIn, (, ), ., isGlobal, (, ), &&, !]
[else, {, }, }, maybeSetBaseType, (, fnType, ), ;, if, (, getScopeDeclaredIn, (, ), ., isGlobal, (, ), &&, !]
[), ;, if, (, getScopeDeclaredIn, (, ), ., isGlobal, (, ), &&, !, fnName, ., isEmpty, (, ), ), {]
[), ;, if, (, getScopeDeclaredIn, (, ), ., isGlobal, (, ), &&, !, fnName, ., isEmpty, (, ), ), {]
[getScopeDeclaredIn, (, ), ., isGlobal, (, ), &&, !, fnName, ., isEmpty, (, ), ), {, typeRegistry, ., declareType, (]
[), ., isGlobal, (, ), &&, !, fnName, ., isEmpty, (, ), ), {, typeRegistry, ., declareType, (, fnName, ,]
[), ., isGlobal, (, ), &&, !, fnName, ., isEmpty, (, ), ), {, typeRegistry, ., declareType, (, fnName, ,]
[isEmpty, (, ), ), {, typeRegistry, ., declareType, (, fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }, return]
[), ), ;, }, return, fnType, ;, }, private, void, reportWarning, (, DiagnosticType, warning, ,, String, ..., args, ), {]
[), ), ;, }, return, fnType, ;, }, private, void, reportWarning, (, DiagnosticType, warning, ,, String, ..., args, ), {]
[return, fnType, ;, }, private, void, reportWarning, (, DiagnosticType, warning, ,, String, ..., args, ), {, compiler, ., report, (]
[return, fnType, ;, }, private, void, reportWarning, (, DiagnosticType, warning, ,, String, ..., args, ), {, compiler, ., report, (]
[private, void, reportWarning, (, DiagnosticType, warning, ,, String, ..., args, ), {, compiler, ., report, (, JSError, ., make, (]
[reportWarning, (, DiagnosticType, warning, ,, String, ..., args, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,]
[DiagnosticType, warning, ,, String, ..., args, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, errorRoot, ,]
[,, String, ..., args, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, errorRoot, ,, warning, ,]
[,, warning, ,, args, ), ), ;, }, private, void, reportError, (, DiagnosticType, error, ,, String, ..., args, ), {]
[,, warning, ,, args, ), ), ;, }, private, void, reportError, (, DiagnosticType, error, ,, String, ..., args, ), {]
[), ), ;, }, private, void, reportError, (, DiagnosticType, error, ,, String, ..., args, ), {, compiler, ., report, (]
[), ), ;, }, private, void, reportError, (, DiagnosticType, error, ,, String, ..., args, ), {, compiler, ., report, (]
[private, void, reportError, (, DiagnosticType, error, ,, String, ..., args, ), {, compiler, ., report, (, JSError, ., make, (]
[reportError, (, DiagnosticType, error, ,, String, ..., args, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,]
[DiagnosticType, error, ,, String, ..., args, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, errorRoot, ,]
[,, String, ..., args, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, errorRoot, ,, error, ,]
[sourceName, ,, errorRoot, ,, error, ,, args, ), ), ;, }, static, boolean, isFunctionTypeDeclaration, (, JSDocInfo, info, ), {, return]
[sourceName, ,, errorRoot, ,, error, ,, args, ), ), ;, }, static, boolean, isFunctionTypeDeclaration, (, JSDocInfo, info, ), {, return]
[sourceName, ,, errorRoot, ,, error, ,, args, ), ), ;, }, static, boolean, isFunctionTypeDeclaration, (, JSDocInfo, info, ), {, return]
[sourceName, ,, errorRoot, ,, error, ,, args, ), ), ;, }, static, boolean, isFunctionTypeDeclaration, (, JSDocInfo, info, ), {, return]
[sourceName, ,, errorRoot, ,, error, ,, args, ), ), ;, }, static, boolean, isFunctionTypeDeclaration, (, JSDocInfo, info, ), {, return]
[sourceName, ,, errorRoot, ,, error, ,, args, ), ), ;, }, static, boolean, isFunctionTypeDeclaration, (, JSDocInfo, info, ), {, return]
[sourceName, ,, errorRoot, ,, error, ,, args, ), ), ;, }, static, boolean, isFunctionTypeDeclaration, (, JSDocInfo, info, ), {, return]
[args, ), ), ;, }, static, boolean, isFunctionTypeDeclaration, (, JSDocInfo, info, ), {, return, info, ., getParameterCount, (, ), >]
[), ;, }, static, boolean, isFunctionTypeDeclaration, (, JSDocInfo, info, ), {, return, info, ., getParameterCount, (, ), >, 0, ||]
[), ;, }, static, boolean, isFunctionTypeDeclaration, (, JSDocInfo, info, ), {, return, info, ., getParameterCount, (, ), >, 0, ||]
[(, JSDocInfo, info, ), {, return, info, ., getParameterCount, (, ), >, 0, ||, info, ., hasReturnType, (, ), ||]
[(, JSDocInfo, info, ), {, return, info, ., getParameterCount, (, ), >, 0, ||, info, ., hasReturnType, (, ), ||]
[info, ., getParameterCount, (, ), >, 0, ||, info, ., hasReturnType, (, ), ||, info, ., hasThisType, (, ), ||]
[info, ., getParameterCount, (, ), >, 0, ||, info, ., hasReturnType, (, ), ||, info, ., hasThisType, (, ), ||]
[0, ||, info, ., hasReturnType, (, ), ||, info, ., hasThisType, (, ), ||, info, ., isConstructor, (, ), ||]
[0, ||, info, ., hasReturnType, (, ), ||, info, ., hasThisType, (, ), ||, info, ., isConstructor, (, ), ||]
[isConstructor, (, ), ||, info, ., isInterface, (, ), ;, }, private, Scope, getScopeDeclaredIn, (, ), {, int, dotIndex, =]
[isConstructor, (, ), ||, info, ., isInterface, (, ), ;, }, private, Scope, getScopeDeclaredIn, (, ), {, int, dotIndex, =]
[info, ., isInterface, (, ), ;, }, private, Scope, getScopeDeclaredIn, (, ), {, int, dotIndex, =, fnName, ., indexOf, (]
[;, }, private, Scope, getScopeDeclaredIn, (, ), {, int, dotIndex, =, fnName, ., indexOf, (, ".", ), ;, if, (]
[;, }, private, Scope, getScopeDeclaredIn, (, ), {, int, dotIndex, =, fnName, ., indexOf, (, ".", ), ;, if, (]
[private, Scope, getScopeDeclaredIn, (, ), {, int, dotIndex, =, fnName, ., indexOf, (, ".", ), ;, if, (, dotIndex, !=]
[Scope, getScopeDeclaredIn, (, ), {, int, dotIndex, =, fnName, ., indexOf, (, ".", ), ;, if, (, dotIndex, !=, -]
[dotIndex, =, fnName, ., indexOf, (, ".", ), ;, if, (, dotIndex, !=, -, 1, ), {, String, rootVarName, =]
[dotIndex, =, fnName, ., indexOf, (, ".", ), ;, if, (, dotIndex, !=, -, 1, ), {, String, rootVarName, =]
[indexOf, (, ".", ), ;, if, (, dotIndex, !=, -, 1, ), {, String, rootVarName, =, fnName, ., substring, (]
[".", ), ;, if, (, dotIndex, !=, -, 1, ), {, String, rootVarName, =, fnName, ., substring, (, 0, ,]
[!=, -, 1, ), {, String, rootVarName, =, fnName, ., substring, (, 0, ,, dotIndex, ), ;, Var, rootVar, =]
[!=, -, 1, ), {, String, rootVarName, =, fnName, ., substring, (, 0, ,, dotIndex, ), ;, Var, rootVar, =]
[{, String, rootVarName, =, fnName, ., substring, (, 0, ,, dotIndex, ), ;, Var, rootVar, =, scope, ., getVar, (]
[., substring, (, 0, ,, dotIndex, ), ;, Var, rootVar, =, scope, ., getVar, (, rootVarName, ), ;, if, (]
[., substring, (, 0, ,, dotIndex, ), ;, Var, rootVar, =, scope, ., getVar, (, rootVarName, ), ;, if, (]
[(, 0, ,, dotIndex, ), ;, Var, rootVar, =, scope, ., getVar, (, rootVarName, ), ;, if, (, rootVar, !=]
[), ;, Var, rootVar, =, scope, ., getVar, (, rootVarName, ), ;, if, (, rootVar, !=, null, ), {, return]
[), ;, Var, rootVar, =, scope, ., getVar, (, rootVarName, ), ;, if, (, rootVar, !=, null, ), {, return]
[rootVarName, ), ;, if, (, rootVar, !=, null, ), {, return, rootVar, ., getScope, (, ), ;, }, }, return]
[., getScope, (, ), ;, }, }, return, scope, ;, }, private, static, boolean, hasMoreTagsToResolve, (, ObjectType, objectType, ), {]
[., getScope, (, ), ;, }, }, return, scope, ;, }, private, static, boolean, hasMoreTagsToResolve, (, ObjectType, objectType, ), {]
[;, }, }, return, scope, ;, }, private, static, boolean, hasMoreTagsToResolve, (, ObjectType, objectType, ), {, Preconditions, ., checkArgument, (]
[;, }, }, return, scope, ;, }, private, static, boolean, hasMoreTagsToResolve, (, ObjectType, objectType, ), {, Preconditions, ., checkArgument, (]
[boolean, hasMoreTagsToResolve, (, ObjectType, objectType, ), {, Preconditions, ., checkArgument, (, objectType, ., isUnknownType, (, ), ), ;, if, (]
[boolean, hasMoreTagsToResolve, (, ObjectType, objectType, ), {, Preconditions, ., checkArgument, (, objectType, ., isUnknownType, (, ), ), ;, if, (]
[boolean, hasMoreTagsToResolve, (, ObjectType, objectType, ), {, Preconditions, ., checkArgument, (, objectType, ., isUnknownType, (, ), ), ;, if, (]
[{, Preconditions, ., checkArgument, (, objectType, ., isUnknownType, (, ), ), ;, if, (, objectType, ., getImplicitPrototype, (, ), !=]
[objectType, ., isUnknownType, (, ), ), ;, if, (, objectType, ., getImplicitPrototype, (, ), !=, null, ), {, if, (]
[objectType, ., isUnknownType, (, ), ), ;, if, (, objectType, ., getImplicitPrototype, (, ), !=, null, ), {, if, (]
[objectType, ., isUnknownType, (, ), ), ;, if, (, objectType, ., getImplicitPrototype, (, ), !=, null, ), {, if, (]
[(, ), !=, null, ), {, if, (, objectType, ., getImplicitPrototype, (, ), ., isResolved, (, ), ), {, return]
[if, (, objectType, ., getImplicitPrototype, (, ), ., isResolved, (, ), ), {, return, false, ;, }, else, {, return]
[(, ), ), {, return, false, ;, }, else, {, return, true, ;, }, }, else, {, FunctionType, ctor, =]
[(, ), ), {, return, false, ;, }, else, {, return, true, ;, }, }, else, {, FunctionType, ctor, =]
[else, {, return, true, ;, }, }, else, {, FunctionType, ctor, =, objectType, ., getConstructor, (, ), ;, if, (]
[else, {, return, true, ;, }, }, else, {, FunctionType, ctor, =, objectType, ., getConstructor, (, ), ;, if, (]
[return, true, ;, }, }, else, {, FunctionType, ctor, =, objectType, ., getConstructor, (, ), ;, if, (, ctor, !=]
[ctor, =, objectType, ., getConstructor, (, ), ;, if, (, ctor, !=, null, ), {, for, (, ObjectType, interfaceType, :]
[ctor, =, objectType, ., getConstructor, (, ), ;, if, (, ctor, !=, null, ), {, for, (, ObjectType, interfaceType, :]
[(, ctor, !=, null, ), {, for, (, ObjectType, interfaceType, :, ctor, ., getExtendedInterfaces, (, ), ), {, if, (]
[ctor, !=, null, ), {, for, (, ObjectType, interfaceType, :, ctor, ., getExtendedInterfaces, (, ), ), {, if, (, !]
[ctor, !=, null, ), {, for, (, ObjectType, interfaceType, :, ctor, ., getExtendedInterfaces, (, ), ), {, if, (, !]
[interfaceType, :, ctor, ., getExtendedInterfaces, (, ), ), {, if, (, !, interfaceType, ., isResolved, (, ), ), {, return]
[), ), {, if, (, !, interfaceType, ., isResolved, (, ), ), {, return, true, ;, }, }, }, return]
[Multiset, <, String, >, getAssignedNameCounts, (, ), ;, }, static, class, UnknownFunctionContents, implements, FunctionContents, {, private, static, UnknownFunctionContents, singleton, =]
[implements, FunctionContents, {, private, static, UnknownFunctionContents, singleton, =, new, UnknownFunctionContents, (, ), ;, static, FunctionContents, get, (, ), {, return]
[;, static, FunctionContents, get, (, ), {, return, singleton, ;, }, @, Override, public, Node, getSourceNode, (, ), {, return]
[Override, public, Node, getSourceNode, (, ), {, return, null, ;, }, @, Override, public, boolean, mayBeFromExterns, (, ), {, return]
[Override, public, boolean, mayBeFromExterns, (, ), {, return, true, ;, }, @, Override, public, boolean, mayHaveNonEmptyReturns, (, ), {, return]
[Override, public, boolean, mayHaveNonEmptyReturns, (, ), {, return, true, ;, }, @, Override, public, boolean, mayHaveSingleThrow, (, ), {, return]
[mayHaveSingleThrow, (, ), {, return, true, ;, }, @, Override, public, Iterable, <, String, >, getEscapedVarNames, (, ), {, return]
[mayHaveSingleThrow, (, ), {, return, true, ;, }, @, Override, public, Iterable, <, String, >, getEscapedVarNames, (, ), {, return]
[return, ImmutableList, ., of, (, ), ;, }, @, Override, public, Set, <, String, >, getEscapedQualifiedNames, (, ), {, return]
[return, ImmutableList, ., of, (, ), ;, }, @, Override, public, Set, <, String, >, getEscapedQualifiedNames, (, ), {, return]
[return, ImmutableSet, ., of, (, ), ;, }, @, Override, public, Multiset, <, String, >, getAssignedNameCounts, (, ), {, return]
[return, ImmutableSet, ., of, (, ), ;, }, @, Override, public, Multiset, <, String, >, getAssignedNameCounts, (, ), {, return]
[(, ), ;, }, }, static, class, AstFunctionContents, implements, FunctionContents, {, private, final, Node, n, ;, private, boolean, hasNonEmptyReturns, =]
[<, String, >, escapedVarNames, ;, private, Set, <, String, >, escapedQualifiedNames, ;, private, final, Multiset, <, String, >, assignedVarNames, =]
[<, String, >, escapedVarNames, ;, private, Set, <, String, >, escapedQualifiedNames, ;, private, final, Multiset, <, String, >, assignedVarNames, =]
[private, final, Multiset, <, String, >, assignedVarNames, =, HashMultiset, ., create, (, ), ;, AstFunctionContents, (, Node, n, ), {]
[private, final, Multiset, <, String, >, assignedVarNames, =, HashMultiset, ., create, (, ), ;, AstFunctionContents, (, Node, n, ), {]
[String, >, assignedVarNames, =, HashMultiset, ., create, (, ), ;, AstFunctionContents, (, Node, n, ), {, this, ., n, =]
[Node, n, ), {, this, ., n, =, n, ;, }, @, Override, public, Node, getSourceNode, (, ), {, return]
[Override, public, Node, getSourceNode, (, ), {, return, n, ;, }, @, Override, public, boolean, mayBeFromExterns, (, ), {, return]
[Override, public, Node, getSourceNode, (, ), {, return, n, ;, }, @, Override, public, boolean, mayBeFromExterns, (, ), {, return]
[(, ), {, return, n, ., isFromExterns, (, ), ;, }, @, Override, public, boolean, mayHaveNonEmptyReturns, (, ), {, return]
[), ;, }, @, Override, public, boolean, mayHaveNonEmptyReturns, (, ), {, return, hasNonEmptyReturns, ;, }, void, recordNonEmptyReturn, (, ), {]
[}, @, Override, public, boolean, mayHaveNonEmptyReturns, (, ), {, return, hasNonEmptyReturns, ;, }, void, recordNonEmptyReturn, (, ), {, hasNonEmptyReturns, =]
[recordNonEmptyReturn, (, ), {, hasNonEmptyReturns, =, true, ;, }, @, Override, public, boolean, mayHaveSingleThrow, (, ), {, Node, block, =]
[recordNonEmptyReturn, (, ), {, hasNonEmptyReturns, =, true, ;, }, @, Override, public, boolean, mayHaveSingleThrow, (, ), {, Node, block, =]
[;, }, @, Override, public, boolean, mayHaveSingleThrow, (, ), {, Node, block, =, n, ., getLastChild, (, ), ;, return]
[;, }, @, Override, public, boolean, mayHaveSingleThrow, (, ), {, Node, block, =, n, ., getLastChild, (, ), ;, return]
[;, }, @, Override, public, boolean, mayHaveSingleThrow, (, ), {, Node, block, =, n, ., getLastChild, (, ), ;, return]
[mayHaveSingleThrow, (, ), {, Node, block, =, n, ., getLastChild, (, ), ;, return, block, ., hasOneChild, (, ), &&]
[mayHaveSingleThrow, (, ), {, Node, block, =, n, ., getLastChild, (, ), ;, return, block, ., hasOneChild, (, ), &&]
[mayHaveSingleThrow, (, ), {, Node, block, =, n, ., getLastChild, (, ), ;, return, block, ., hasOneChild, (, ), &&]
[(, ), ., isThrow, (, ), ;, }, @, Override, public, Iterable, <, String, >, getEscapedVarNames, (, ), {, return]
[(, ), ., isThrow, (, ), ;, }, @, Override, public, Iterable, <, String, >, getEscapedVarNames, (, ), {, return]
[(, ), ., isThrow, (, ), ;, }, @, Override, public, Iterable, <, String, >, getEscapedVarNames, (, ), {, return]
[., isThrow, (, ), ;, }, @, Override, public, Iterable, <, String, >, getEscapedVarNames, (, ), {, return, escapedVarNames, ==]
[(, ), ;, }, @, Override, public, Iterable, <, String, >, getEscapedVarNames, (, ), {, return, escapedVarNames, ==, null, ?]
[(, ), ;, }, @, Override, public, Iterable, <, String, >, getEscapedVarNames, (, ), {, return, escapedVarNames, ==, null, ?]
[String, >, getEscapedVarNames, (, ), {, return, escapedVarNames, ==, null, ?, ImmutableList, ., <, String, >, of, (, ), :]
[., <, String, >, of, (, ), :, escapedVarNames, ;, }, void, recordEscapedVarName, (, String, name, ), {, if, (]
[., <, String, >, of, (, ), :, escapedVarNames, ;, }, void, recordEscapedVarName, (, String, name, ), {, if, (]
[String, >, of, (, ), :, escapedVarNames, ;, }, void, recordEscapedVarName, (, String, name, ), {, if, (, escapedVarNames, ==]
[(, ), :, escapedVarNames, ;, }, void, recordEscapedVarName, (, String, name, ), {, if, (, escapedVarNames, ==, null, ), {]
[:, escapedVarNames, ;, }, void, recordEscapedVarName, (, String, name, ), {, if, (, escapedVarNames, ==, null, ), {, escapedVarNames, =]
[:, escapedVarNames, ;, }, void, recordEscapedVarName, (, String, name, ), {, if, (, escapedVarNames, ==, null, ), {, escapedVarNames, =]
[String, name, ), {, if, (, escapedVarNames, ==, null, ), {, escapedVarNames, =, Sets, ., newHashSet, (, ), ;, }]
[String, name, ), {, if, (, escapedVarNames, ==, null, ), {, escapedVarNames, =, Sets, ., newHashSet, (, ), ;, }]
[if, (, escapedVarNames, ==, null, ), {, escapedVarNames, =, Sets, ., newHashSet, (, ), ;, }, escapedVarNames, ., add, (]
[escapedVarNames, ., add, (, name, ), ;, }, @, Override, public, Set, <, String, >, getEscapedQualifiedNames, (, ), {, return]
[escapedVarNames, ., add, (, name, ), ;, }, @, Override, public, Set, <, String, >, getEscapedQualifiedNames, (, ), {, return]
[escapedVarNames, ., add, (, name, ), ;, }, @, Override, public, Set, <, String, >, getEscapedQualifiedNames, (, ), {, return]
[add, (, name, ), ;, }, @, Override, public, Set, <, String, >, getEscapedQualifiedNames, (, ), {, return, escapedQualifiedNames, ==]
[name, ), ;, }, @, Override, public, Set, <, String, >, getEscapedQualifiedNames, (, ), {, return, escapedQualifiedNames, ==, null, ?]
[name, ), ;, }, @, Override, public, Set, <, String, >, getEscapedQualifiedNames, (, ), {, return, escapedQualifiedNames, ==, null, ?]
[String, >, getEscapedQualifiedNames, (, ), {, return, escapedQualifiedNames, ==, null, ?, ImmutableSet, ., <, String, >, of, (, ), :]
[., <, String, >, of, (, ), :, escapedQualifiedNames, ;, }, void, recordEscapedQualifiedName, (, String, name, ), {, if, (]
[., <, String, >, of, (, ), :, escapedQualifiedNames, ;, }, void, recordEscapedQualifiedName, (, String, name, ), {, if, (]
[String, >, of, (, ), :, escapedQualifiedNames, ;, }, void, recordEscapedQualifiedName, (, String, name, ), {, if, (, escapedQualifiedNames, ==]
[(, ), :, escapedQualifiedNames, ;, }, void, recordEscapedQualifiedName, (, String, name, ), {, if, (, escapedQualifiedNames, ==, null, ), {]
[:, escapedQualifiedNames, ;, }, void, recordEscapedQualifiedName, (, String, name, ), {, if, (, escapedQualifiedNames, ==, null, ), {, escapedQualifiedNames, =]
[:, escapedQualifiedNames, ;, }, void, recordEscapedQualifiedName, (, String, name, ), {, if, (, escapedQualifiedNames, ==, null, ), {, escapedQualifiedNames, =]
[String, name, ), {, if, (, escapedQualifiedNames, ==, null, ), {, escapedQualifiedNames, =, Sets, ., newHashSet, (, ), ;, }]
[String, name, ), {, if, (, escapedQualifiedNames, ==, null, ), {, escapedQualifiedNames, =, Sets, ., newHashSet, (, ), ;, }]
[if, (, escapedQualifiedNames, ==, null, ), {, escapedQualifiedNames, =, Sets, ., newHashSet, (, ), ;, }, escapedQualifiedNames, ., add, (]
[escapedQualifiedNames, ., add, (, name, ), ;, }, @, Override, public, Multiset, <, String, >, getAssignedNameCounts, (, ), {, return]
[public, Multiset, <, String, >, getAssignedNameCounts, (, ), {, return, assignedVarNames, ;, }, void, recordAssignedName, (, String, name, ), {]
[public, Multiset, <, String, >, getAssignedNameCounts, (, ), {, return, assignedVarNames, ;, }, void, recordAssignedName, (, String, name, ), {]
[>, getAssignedNameCounts, (, ), {, return, assignedVarNames, ;, }, void, recordAssignedName, (, String, name, ), {, assignedVarNames, ., add, (]
