[;, static, final, DiagnosticType, PARSE_ERROR, =, DiagnosticType, ., error, (, "DEPS_PARSE_ERROR", ,, "{0}\n{1}", ), ;, boolean, shortcutMode, =, false, ;]
[., warning, (, "DEPS_PARSE_WARNING", ,, "{0}\n{1}", ), ;, static, final, DiagnosticType, PARSE_ERROR, =, DiagnosticType, ., error, (, "DEPS_PARSE_ERROR", ,, "{0}\n{1}"]
[,, "{0}\n{1}", ), ;, static, final, DiagnosticType, PARSE_ERROR, =, DiagnosticType, ., error, (, "DEPS_PARSE_ERROR", ,, "{0}\n{1}", ), ;, boolean, shortcutMode]
[), ;, static, final, DiagnosticType, PARSE_ERROR, =, DiagnosticType, ., error, (, "DEPS_PARSE_ERROR", ,, "{0}\n{1}", ), ;, boolean, shortcutMode, =, false]
[;, boolean, shortcutMode, =, false, ;, static, class, ParseException, extends, Exception, {, public, static, final, long, serialVersionUID, =, 1L, ;]
[., error, (, "DEPS_PARSE_ERROR", ,, "{0}\n{1}", ), ;, boolean, shortcutMode, =, false, ;, static, class, ParseException, extends, Exception, {, public]
[,, "{0}\n{1}", ), ;, boolean, shortcutMode, =, false, ;, static, class, ParseException, extends, Exception, {, public, static, final, long, serialVersionUID]
[), ;, boolean, shortcutMode, =, false, ;, static, class, ParseException, extends, Exception, {, public, static, final, long, serialVersionUID, =, 1L]
[;, static, class, ParseException, extends, Exception, {, public, static, final, long, serialVersionUID, =, 1L, ;, private, boolean, fatal, ;, public]
[;, private, boolean, fatal, ;, public, ParseException, (, String, message, ,, boolean, fatal, ), {, super, (, message, ), ;]
[), ;, this, ., fatal, =, fatal, ;, }, public, boolean, isFatal, (, ), {, return, fatal, ;, }, }]
[=, fatal, ;, }, public, boolean, isFatal, (, ), {, return, fatal, ;, }, }, private, static, final, Pattern, STRING_LITERAL_PATTERN]
[., fatal, =, fatal, ;, }, public, boolean, isFatal, (, ), {, return, fatal, ;, }, }, private, static, final]
[;, }, public, boolean, isFatal, (, ), {, return, fatal, ;, }, }, private, static, final, Pattern, STRING_LITERAL_PATTERN, =, Pattern]
[;, }, }, private, static, final, Pattern, STRING_LITERAL_PATTERN, =, Pattern, ., compile, (, "\\s*(?:'((?:\\\\'|[^'])*?)'|\"((?:\\\\\"|[^\"])*?)\")\\s*", ), ;, private, Matcher, valueMatcher, =]
[;, private, Matcher, valueMatcher, =, STRING_LITERAL_PATTERN, ., matcher, (, "", ), ;, String, filePath, ;, int, lineNum, ;, ErrorManager, errorManager]
[., compile, (, "\\s*(?:'((?:\\\\'|[^'])*?)'|\"((?:\\\\\"|[^\"])*?)\")\\s*", ), ;, private, Matcher, valueMatcher, =, STRING_LITERAL_PATTERN, ., matcher, (, "", ), ;, String, filePath, ;]
[), ;, private, Matcher, valueMatcher, =, STRING_LITERAL_PATTERN, ., matcher, (, "", ), ;, String, filePath, ;, int, lineNum, ;, ErrorManager]
[;, String, filePath, ;, int, lineNum, ;, ErrorManager, errorManager, ;, boolean, parseSucceeded, ;, public, JsFileLineParser, (, ErrorManager, errorManager, ), {]
[., matcher, (, "", ), ;, String, filePath, ;, int, lineNum, ;, ErrorManager, errorManager, ;, boolean, parseSucceeded, ;, public, JsFileLineParser]
[), ;, String, filePath, ;, int, lineNum, ;, ErrorManager, errorManager, ;, boolean, parseSucceeded, ;, public, JsFileLineParser, (, ErrorManager, errorManager, )]
[=, errorManager, ;, }, public, void, setShortcutMode, (, boolean, mode, ), {, this, ., shortcutMode, =, mode, ;, }, public]
[., errorManager, =, errorManager, ;, }, public, void, setShortcutMode, (, boolean, mode, ), {, this, ., shortcutMode, =, mode, ;]
[;, }, public, void, setShortcutMode, (, boolean, mode, ), {, this, ., shortcutMode, =, mode, ;, }, public, boolean, didParseSucceed]
[=, mode, ;, }, public, boolean, didParseSucceed, (, ), {, return, parseSucceeded, ;, }, void, doParse, (, String, filePath, ,]
[., shortcutMode, =, mode, ;, }, public, boolean, didParseSucceed, (, ), {, return, parseSucceeded, ;, }, void, doParse, (, String]
[;, }, public, boolean, didParseSucceed, (, ), {, return, parseSucceeded, ;, }, void, doParse, (, String, filePath, ,, Reader, fileContents]
[;, }, void, doParse, (, String, filePath, ,, Reader, fileContents, ), {, this, ., filePath, =, filePath, ;, parseSucceeded, =]
[=, filePath, ;, parseSucceeded, =, true, ;, BufferedReader, lineBuffer, =, new, BufferedReader, (, fileContents, ), ;, String, line, =, null]
[., filePath, =, filePath, ;, parseSucceeded, =, true, ;, BufferedReader, lineBuffer, =, new, BufferedReader, (, fileContents, ), ;, String, line]
[;, parseSucceeded, =, true, ;, BufferedReader, lineBuffer, =, new, BufferedReader, (, fileContents, ), ;, String, line, =, null, ;, lineNum]
[=, true, ;, BufferedReader, lineBuffer, =, new, BufferedReader, (, fileContents, ), ;, String, line, =, null, ;, lineNum, =, 0]
[;, BufferedReader, lineBuffer, =, new, BufferedReader, (, fileContents, ), ;, String, line, =, null, ;, lineNum, =, 0, ;, boolean]
[;, String, line, =, null, ;, lineNum, =, 0, ;, boolean, inMultilineComment, =, false, ;, try, {, while, (, null]
[), ;, String, line, =, null, ;, lineNum, =, 0, ;, boolean, inMultilineComment, =, false, ;, try, {, while, (]
[;, lineNum, =, 0, ;, boolean, inMultilineComment, =, false, ;, try, {, while, (, null, !=, (, line, =, lineBuffer]
[=, 0, ;, boolean, inMultilineComment, =, false, ;, try, {, while, (, null, !=, (, line, =, lineBuffer, ., readLine]
[;, boolean, inMultilineComment, =, false, ;, try, {, while, (, null, !=, (, line, =, lineBuffer, ., readLine, (, )]
[;, try, {, while, (, null, !=, (, line, =, lineBuffer, ., readLine, (, ), ), ), {, ++, lineNum]
[), {, ++, lineNum, ;, try, {, String, revisedLine, =, line, ;, if, (, inMultilineComment, ), {, int, endOfComment, =]
[!=, (, line, =, lineBuffer, ., readLine, (, ), ), ), {, ++, lineNum, ;, try, {, String, revisedLine, =]
[), {, ++, lineNum, ;, try, {, String, revisedLine, =, line, ;, if, (, inMultilineComment, ), {, int, endOfComment, =]
[=, lineBuffer, ., readLine, (, ), ), ), {, ++, lineNum, ;, try, {, String, revisedLine, =, line, ;, if]
[), ), {, ++, lineNum, ;, try, {, String, revisedLine, =, line, ;, if, (, inMultilineComment, ), {, int, endOfComment]
[., readLine, (, ), ), ), {, ++, lineNum, ;, try, {, String, revisedLine, =, line, ;, if, (, inMultilineComment]
[;, try, {, String, revisedLine, =, line, ;, if, (, inMultilineComment, ), {, int, endOfComment, =, revisedLine, ., indexOf, (]
[;, try, {, String, revisedLine, =, line, ;, if, (, inMultilineComment, ), {, int, endOfComment, =, revisedLine, ., indexOf, (]
[;, if, (, inMultilineComment, ), {, int, endOfComment, =, revisedLine, ., indexOf, (, "*/", ), ;, if, (, endOfComment, !=]
[), {, int, endOfComment, =, revisedLine, ., indexOf, (, "*/", ), ;, if, (, endOfComment, !=, -, 1, ), {]
[;, if, (, endOfComment, !=, -, 1, ), {, revisedLine, =, revisedLine, ., substring, (, endOfComment, +, 2, ), ;]
[., indexOf, (, "*/", ), ;, if, (, endOfComment, !=, -, 1, ), {, revisedLine, =, revisedLine, ., substring, (]
[), ;, if, (, endOfComment, !=, -, 1, ), {, revisedLine, =, revisedLine, ., substring, (, endOfComment, +, 2, )]
[), {, revisedLine, =, revisedLine, ., substring, (, endOfComment, +, 2, ), ;, inMultilineComment, =, false, ;, }, else, {]
[!=, -, 1, ), {, revisedLine, =, revisedLine, ., substring, (, endOfComment, +, 2, ), ;, inMultilineComment, =, false, ;]
[), {, revisedLine, =, revisedLine, ., substring, (, endOfComment, +, 2, ), ;, inMultilineComment, =, false, ;, }, else, {]
[), {, revisedLine, =, revisedLine, ., substring, (, endOfComment, +, 2, ), ;, inMultilineComment, =, false, ;, }, else, {]
[=, revisedLine, ., substring, (, endOfComment, +, 2, ), ;, inMultilineComment, =, false, ;, }, else, {, revisedLine, =, ""]
[;, inMultilineComment, =, false, ;, }, else, {, revisedLine, =, "", ;, }, }, if, (, !, inMultilineComment, ), {]
[., substring, (, endOfComment, +, 2, ), ;, inMultilineComment, =, false, ;, }, else, {, revisedLine, =, "", ;, }]
[), ;, inMultilineComment, =, false, ;, }, else, {, revisedLine, =, "", ;, }, }, if, (, !, inMultilineComment, )]
[+, 2, ), ;, inMultilineComment, =, false, ;, }, else, {, revisedLine, =, "", ;, }, }, if, (, !]
[), ;, inMultilineComment, =, false, ;, }, else, {, revisedLine, =, "", ;, }, }, if, (, !, inMultilineComment, )]
[=, false, ;, }, else, {, revisedLine, =, "", ;, }, }, if, (, !, inMultilineComment, ), {, while, (]
[;, }, else, {, revisedLine, =, "", ;, }, }, if, (, !, inMultilineComment, ), {, while, (, true, )]
[=, "", ;, }, }, if, (, !, inMultilineComment, ), {, while, (, true, ), {, int, startOfLineComment, =, revisedLine]
[;, }, }, if, (, !, inMultilineComment, ), {, while, (, true, ), {, int, startOfLineComment, =, revisedLine, ., indexOf]
[), {, while, (, true, ), {, int, startOfLineComment, =, revisedLine, ., indexOf, (, "//", ), ;, int, startOfMultilineComment, =]
[), {, while, (, true, ), {, int, startOfLineComment, =, revisedLine, ., indexOf, (, "//", ), ;, int, startOfMultilineComment, =]
[), {, int, startOfLineComment, =, revisedLine, ., indexOf, (, "//", ), ;, int, startOfMultilineComment, =, revisedLine, ., indexOf, (, "/*"]
[;, int, startOfMultilineComment, =, revisedLine, ., indexOf, (, "/*", ), ;, if, (, startOfLineComment, !=, -, 1, &&, (, startOfMultilineComment]
[., indexOf, (, "//", ), ;, int, startOfMultilineComment, =, revisedLine, ., indexOf, (, "/*", ), ;, if, (, startOfLineComment, !=]
[), ;, int, startOfMultilineComment, =, revisedLine, ., indexOf, (, "/*", ), ;, if, (, startOfLineComment, !=, -, 1, &&, (]
[;, if, (, startOfLineComment, !=, -, 1, &&, (, startOfMultilineComment, ==, -, 1, ||, startOfLineComment, <, startOfMultilineComment, ), ), {]
[., indexOf, (, "/*", ), ;, if, (, startOfLineComment, !=, -, 1, &&, (, startOfMultilineComment, ==, -, 1, ||, startOfLineComment]
[), ;, if, (, startOfLineComment, !=, -, 1, &&, (, startOfMultilineComment, ==, -, 1, ||, startOfLineComment, <, startOfMultilineComment, ), )]
[), {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfLineComment, ), ;, break, ;, }, else, if, (, startOfMultilineComment]
[&&, (, startOfMultilineComment, ==, -, 1, ||, startOfLineComment, <, startOfMultilineComment, ), ), {, revisedLine, =, revisedLine, ., substring, (, 0]
[!=, -, 1, &&, (, startOfMultilineComment, ==, -, 1, ||, startOfLineComment, <, startOfMultilineComment, ), ), {, revisedLine, =, revisedLine, .]
[&&, (, startOfMultilineComment, ==, -, 1, ||, startOfLineComment, <, startOfMultilineComment, ), ), {, revisedLine, =, revisedLine, ., substring, (, 0]
[&&, (, startOfMultilineComment, ==, -, 1, ||, startOfLineComment, <, startOfMultilineComment, ), ), {, revisedLine, =, revisedLine, ., substring, (, 0]
[), {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfLineComment, ), ;, break, ;, }, else, if, (, startOfMultilineComment]
[), ), {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfLineComment, ), ;, break, ;, }, else, if, (]
[||, startOfLineComment, <, startOfMultilineComment, ), ), {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfLineComment, ), ;, break, ;]
[==, -, 1, ||, startOfLineComment, <, startOfMultilineComment, ), ), {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfLineComment, )]
[||, startOfLineComment, <, startOfMultilineComment, ), ), {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfLineComment, ), ;, break, ;]
[||, startOfLineComment, <, startOfMultilineComment, ), ), {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfLineComment, ), ;, break, ;]
[), ), {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfLineComment, ), ;, break, ;, }, else, if, (]
[<, startOfMultilineComment, ), ), {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfLineComment, ), ;, break, ;, }, else]
[), ), {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfLineComment, ), ;, break, ;, }, else, if, (]
[=, revisedLine, ., substring, (, 0, ,, startOfLineComment, ), ;, break, ;, }, else, if, (, startOfMultilineComment, !=, -, 1]
[;, break, ;, }, else, if, (, startOfMultilineComment, !=, -, 1, ), {, int, endOfMultilineComment, =, revisedLine, ., indexOf, (]
[., substring, (, 0, ,, startOfLineComment, ), ;, break, ;, }, else, if, (, startOfMultilineComment, !=, -, 1, ), {]
[,, startOfLineComment, ), ;, break, ;, }, else, if, (, startOfMultilineComment, !=, -, 1, ), {, int, endOfMultilineComment, =, revisedLine]
[), ;, break, ;, }, else, if, (, startOfMultilineComment, !=, -, 1, ), {, int, endOfMultilineComment, =, revisedLine, ., indexOf]
[), {, int, endOfMultilineComment, =, revisedLine, ., indexOf, (, "*/", ,, startOfMultilineComment, +, 2, ), ;, if, (, endOfMultilineComment, ==]
[!=, -, 1, ), {, int, endOfMultilineComment, =, revisedLine, ., indexOf, (, "*/", ,, startOfMultilineComment, +, 2, ), ;, if]
[), {, int, endOfMultilineComment, =, revisedLine, ., indexOf, (, "*/", ,, startOfMultilineComment, +, 2, ), ;, if, (, endOfMultilineComment, ==]
[), {, int, endOfMultilineComment, =, revisedLine, ., indexOf, (, "*/", ,, startOfMultilineComment, +, 2, ), ;, if, (, endOfMultilineComment, ==]
[;, if, (, endOfMultilineComment, ==, -, 1, ), {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfMultilineComment, ), ;]
[., indexOf, (, "*/", ,, startOfMultilineComment, +, 2, ), ;, if, (, endOfMultilineComment, ==, -, 1, ), {, revisedLine, =]
[,, startOfMultilineComment, +, 2, ), ;, if, (, endOfMultilineComment, ==, -, 1, ), {, revisedLine, =, revisedLine, ., substring, (]
[), ;, if, (, endOfMultilineComment, ==, -, 1, ), {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfMultilineComment, )]
[+, 2, ), ;, if, (, endOfMultilineComment, ==, -, 1, ), {, revisedLine, =, revisedLine, ., substring, (, 0, ,]
[), ;, if, (, endOfMultilineComment, ==, -, 1, ), {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfMultilineComment, )]
[), {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfMultilineComment, ), ;, inMultilineComment, =, true, ;, break, ;, }]
[==, -, 1, ), {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfMultilineComment, ), ;, inMultilineComment, =, true, ;]
[), {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfMultilineComment, ), ;, inMultilineComment, =, true, ;, break, ;, }]
[), {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfMultilineComment, ), ;, inMultilineComment, =, true, ;, break, ;, }]
[=, revisedLine, ., substring, (, 0, ,, startOfMultilineComment, ), ;, inMultilineComment, =, true, ;, break, ;, }, else, {, revisedLine]
[;, inMultilineComment, =, true, ;, break, ;, }, else, {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfMultilineComment, )]
[., substring, (, 0, ,, startOfMultilineComment, ), ;, inMultilineComment, =, true, ;, break, ;, }, else, {, revisedLine, =, revisedLine]
[,, startOfMultilineComment, ), ;, inMultilineComment, =, true, ;, break, ;, }, else, {, revisedLine, =, revisedLine, ., substring, (, 0]
[), ;, inMultilineComment, =, true, ;, break, ;, }, else, {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfMultilineComment]
[=, true, ;, break, ;, }, else, {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfMultilineComment, ), +, revisedLine]
[;, break, ;, }, else, {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfMultilineComment, ), +, revisedLine, ., substring]
[=, revisedLine, ., substring, (, 0, ,, startOfMultilineComment, ), +, revisedLine, ., substring, (, endOfMultilineComment, +, 2, ), ;, }]
[;, }, }, else, {, break, ;, }, }, }, if, (, !, revisedLine, ., isEmpty, (, ), ), {]
[+, revisedLine, ., substring, (, endOfMultilineComment, +, 2, ), ;, }, }, else, {, break, ;, }, }, }, if]
[., substring, (, 0, ,, startOfMultilineComment, ), +, revisedLine, ., substring, (, endOfMultilineComment, +, 2, ), ;, }, }, else]
[,, startOfMultilineComment, ), +, revisedLine, ., substring, (, endOfMultilineComment, +, 2, ), ;, }, }, else, {, break, ;, }]
[), +, revisedLine, ., substring, (, endOfMultilineComment, +, 2, ), ;, }, }, else, {, break, ;, }, }, }]
[;, }, }, else, {, break, ;, }, }, }, if, (, !, revisedLine, ., isEmpty, (, ), ), {]
[., substring, (, endOfMultilineComment, +, 2, ), ;, }, }, else, {, break, ;, }, }, }, if, (, !]
[), ;, }, }, else, {, break, ;, }, }, }, if, (, !, revisedLine, ., isEmpty, (, ), )]
[+, 2, ), ;, }, }, else, {, break, ;, }, }, }, if, (, !, revisedLine, ., isEmpty, (]
[), ;, }, }, else, {, break, ;, }, }, }, if, (, !, revisedLine, ., isEmpty, (, ), )]
[), {, if, (, !, parseLine, (, revisedLine, ), &&, shortcutMode, ), {, break, ;, }, }, }, catch, (]
[), {, if, (, !, parseLine, (, revisedLine, ), &&, shortcutMode, ), {, break, ;, }, }, }, catch, (]
[., isEmpty, (, ), ), {, if, (, !, parseLine, (, revisedLine, ), &&, shortcutMode, ), {, break, ;, }]
[), {, break, ;, }, }, }, catch, (, ParseException, e, ), {, errorManager, ., report, (, e, ., isFatal]
[&&, shortcutMode, ), {, break, ;, }, }, }, catch, (, ParseException, e, ), {, errorManager, ., report, (, e]
[&&, shortcutMode, ), {, break, ;, }, }, }, catch, (, ParseException, e, ), {, errorManager, ., report, (, e]
[), &&, shortcutMode, ), {, break, ;, }, }, }, catch, (, ParseException, e, ), {, errorManager, ., report, (]
[), {, break, ;, }, }, }, catch, (, ParseException, e, ), {, errorManager, ., report, (, e, ., isFatal]
[;, parseSucceeded, =, parseSucceeded, &&, !, e, ., isFatal, (, ), ;, }, }, }, catch, (, IOException, e, )]
[., report, (, e, ., isFatal, (, ), ?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING, ,, JSError, ., make]
[,, JSError, ., make, (, filePath, ,, lineNum, ,, 0, ,, e, ., isFatal, (, ), ?, PARSE_ERROR, :, PARSE_WARNING]
[?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING, ,, JSError, ., make, (, filePath, ,, lineNum, ,, 0, ,, e]
[., isFatal, (, ), ?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING, ,, JSError, ., make, (, filePath, ,, lineNum]
[:, CheckLevel, ., WARNING, ,, JSError, ., make, (, filePath, ,, lineNum, ,, 0, ,, e, ., isFatal, (, )]
[., ERROR, :, CheckLevel, ., WARNING, ,, JSError, ., make, (, filePath, ,, lineNum, ,, 0, ,, e, ., isFatal]
[,, JSError, ., make, (, filePath, ,, lineNum, ,, 0, ,, e, ., isFatal, (, ), ?, PARSE_ERROR, :, PARSE_WARNING]
[., WARNING, ,, JSError, ., make, (, filePath, ,, lineNum, ,, 0, ,, e, ., isFatal, (, ), ?, PARSE_ERROR]
[), ;, parseSucceeded, =, parseSucceeded, &&, !, e, ., isFatal, (, ), ;, }, }, }, catch, (, IOException, e]
[., make, (, filePath, ,, lineNum, ,, 0, ,, e, ., isFatal, (, ), ?, PARSE_ERROR, :, PARSE_WARNING, ,, e]
[,, lineNum, ,, 0, ,, e, ., isFatal, (, ), ?, PARSE_ERROR, :, PARSE_WARNING, ,, e, ., getMessage, (, )]
[,, 0, ,, e, ., isFatal, (, ), ?, PARSE_ERROR, :, PARSE_WARNING, ,, e, ., getMessage, (, ), ,, line]
[,, e, ., isFatal, (, ), ?, PARSE_ERROR, :, PARSE_WARNING, ,, e, ., getMessage, (, ), ,, line, ), )]
[,, e, ., getMessage, (, ), ,, line, ), ), ;, parseSucceeded, =, parseSucceeded, &&, !, e, ., isFatal, (]
[?, PARSE_ERROR, :, PARSE_WARNING, ,, e, ., getMessage, (, ), ,, line, ), ), ;, parseSucceeded, =, parseSucceeded, &&, !]
[., isFatal, (, ), ?, PARSE_ERROR, :, PARSE_WARNING, ,, e, ., getMessage, (, ), ,, line, ), ), ;, parseSucceeded]
[:, PARSE_WARNING, ,, e, ., getMessage, (, ), ,, line, ), ), ;, parseSucceeded, =, parseSucceeded, &&, !, e, .]
[,, e, ., getMessage, (, ), ,, line, ), ), ;, parseSucceeded, =, parseSucceeded, &&, !, e, ., isFatal, (]
[,, line, ), ), ;, parseSucceeded, =, parseSucceeded, &&, !, e, ., isFatal, (, ), ;, }, }, }, catch]
[., getMessage, (, ), ,, line, ), ), ;, parseSucceeded, =, parseSucceeded, &&, !, e, ., isFatal, (, ), ;]
[), ), ;, parseSucceeded, =, parseSucceeded, &&, !, e, ., isFatal, (, ), ;, }, }, }, catch, (, IOException]
[=, parseSucceeded, &&, !, e, ., isFatal, (, ), ;, }, }, }, catch, (, IOException, e, ), {, errorManager]
[;, }, }, }, catch, (, IOException, e, ), {, errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, .]
[&&, !, e, ., isFatal, (, ), ;, }, }, }, catch, (, IOException, e, ), {, errorManager, ., report]
[;, }, }, }, catch, (, IOException, e, ), {, errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, .]
[;, }, }, }, catch, (, IOException, e, ), {, errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, .]
[., isFatal, (, ), ;, }, }, }, catch, (, IOException, e, ), {, errorManager, ., report, (, CheckLevel, .]
[;, parseSucceeded, =, false, ;, }, }, abstract, boolean, parseLine, (, String, line, ), throws, ParseException, ;, String, parseJsString, (]
[., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, filePath, ,, 0, ,, 0, ,, PARSE_ERROR, ,, "Error reading file: "]
[,, JSError, ., make, (, filePath, ,, 0, ,, 0, ,, PARSE_ERROR, ,, "Error reading file: ", +, filePath, ), ), ;, parseSucceeded]
[., ERROR, ,, JSError, ., make, (, filePath, ,, 0, ,, 0, ,, PARSE_ERROR, ,, "Error reading file: ", +, filePath, ), )]
[), ;, parseSucceeded, =, false, ;, }, }, abstract, boolean, parseLine, (, String, line, ), throws, ParseException, ;, String, parseJsString]
[., make, (, filePath, ,, 0, ,, 0, ,, PARSE_ERROR, ,, "Error reading file: ", +, filePath, ), ), ;, parseSucceeded, =, false]
[,, 0, ,, 0, ,, PARSE_ERROR, ,, "Error reading file: ", +, filePath, ), ), ;, parseSucceeded, =, false, ;, }, }, abstract]
[,, 0, ,, PARSE_ERROR, ,, "Error reading file: ", +, filePath, ), ), ;, parseSucceeded, =, false, ;, }, }, abstract, boolean, parseLine]
[,, PARSE_ERROR, ,, "Error reading file: ", +, filePath, ), ), ;, parseSucceeded, =, false, ;, }, }, abstract, boolean, parseLine, (, String]
[,, "Error reading file: ", +, filePath, ), ), ;, parseSucceeded, =, false, ;, }, }, abstract, boolean, parseLine, (, String, line, )]
[), ), ;, parseSucceeded, =, false, ;, }, }, abstract, boolean, parseLine, (, String, line, ), throws, ParseException, ;, String]
[+, filePath, ), ), ;, parseSucceeded, =, false, ;, }, }, abstract, boolean, parseLine, (, String, line, ), throws, ParseException]
[), ), ;, parseSucceeded, =, false, ;, }, }, abstract, boolean, parseLine, (, String, line, ), throws, ParseException, ;, String]
[=, false, ;, }, }, abstract, boolean, parseLine, (, String, line, ), throws, ParseException, ;, String, parseJsString, (, String, jsStringLiteral]
[;, }, }, abstract, boolean, parseLine, (, String, line, ), throws, ParseException, ;, String, parseJsString, (, String, jsStringLiteral, ), throws]
[;, if, (, !, valueMatcher, ., matches, (, ), ), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;]
[., reset, (, jsStringLiteral, ), ;, if, (, !, valueMatcher, ., matches, (, ), ), {, throw, new, ParseException, (]
[), ;, if, (, !, valueMatcher, ., matches, (, ), ), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, )]
[), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }, return, valueMatcher, ., group, (, 1, ), !=]
[), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }, return, valueMatcher, ., group, (, 1, ), !=]
[., matches, (, ), ), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }, return, valueMatcher, ., group]
[;, }, return, valueMatcher, ., group, (, 1, ), !=, null, ?, valueMatcher, ., group, (, 1, ), :, valueMatcher]
[,, true, ), ;, }, return, valueMatcher, ., group, (, 1, ), !=, null, ?, valueMatcher, ., group, (, 1]
[), ;, }, return, valueMatcher, ., group, (, 1, ), !=, null, ?, valueMatcher, ., group, (, 1, ), :]
[;, }, List, <, String, >, parseJsStringArray, (, String, input, ), throws, ParseException, {, List, <, String, >, results, =]
[?, valueMatcher, ., group, (, 1, ), :, valueMatcher, ., group, (, 2, ), ;, }, List, <, String, >]
[!=, null, ?, valueMatcher, ., group, (, 1, ), :, valueMatcher, ., group, (, 2, ), ;, }, List, <]
[., group, (, 1, ), !=, null, ?, valueMatcher, ., group, (, 1, ), :, valueMatcher, ., group, (, 2]
[), !=, null, ?, valueMatcher, ., group, (, 1, ), :, valueMatcher, ., group, (, 2, ), ;, }, List]
[?, valueMatcher, ., group, (, 1, ), :, valueMatcher, ., group, (, 2, ), ;, }, List, <, String, >]
[:, valueMatcher, ., group, (, 2, ), ;, }, List, <, String, >, parseJsStringArray, (, String, input, ), throws, ParseException]
[., group, (, 1, ), :, valueMatcher, ., group, (, 2, ), ;, }, List, <, String, >, parseJsStringArray, (]
[), :, valueMatcher, ., group, (, 2, ), ;, }, List, <, String, >, parseJsStringArray, (, String, input, ), throws]
[;, }, List, <, String, >, parseJsStringArray, (, String, input, ), throws, ParseException, {, List, <, String, >, results, =]
[., group, (, 2, ), ;, }, List, <, String, >, parseJsStringArray, (, String, input, ), throws, ParseException, {, List]
[), ;, }, List, <, String, >, parseJsStringArray, (, String, input, ), throws, ParseException, {, List, <, String, >, results]
[;, int, indexStart, =, input, ., indexOf, (, '[', ), ;, int, indexEnd, =, input, ., lastIndexOf, (, ']', )]
[., newArrayList, (, ), ;, int, indexStart, =, input, ., indexOf, (, '[', ), ;, int, indexEnd, =, input, .]
[;, int, indexEnd, =, input, ., lastIndexOf, (, ']', ), ;, if, (, (, indexStart, ==, -, 1, ), ||]
[., indexOf, (, '[', ), ;, int, indexEnd, =, input, ., lastIndexOf, (, ']', ), ;, if, (, (, indexStart]
[), ;, int, indexEnd, =, input, ., lastIndexOf, (, ']', ), ;, if, (, (, indexStart, ==, -, 1, )]
[;, if, (, (, indexStart, ==, -, 1, ), ||, (, indexEnd, ==, -, 1, ), ), {, throw, new]
[., lastIndexOf, (, ']', ), ;, if, (, (, indexStart, ==, -, 1, ), ||, (, indexEnd, ==, -, 1]
[), ;, if, (, (, indexStart, ==, -, 1, ), ||, (, indexEnd, ==, -, 1, ), ), {, throw]
[), {, throw, new, ParseException, (, "Syntax error when parsing JS array", ,, true, ), ;, }, String, innerValues, =, input, ., substring, (, indexStart]
[||, (, indexEnd, ==, -, 1, ), ), {, throw, new, ParseException, (, "Syntax error when parsing JS array", ,, true, ), ;, }, String]
[), ||, (, indexEnd, ==, -, 1, ), ), {, throw, new, ParseException, (, "Syntax error when parsing JS array", ,, true, ), ;, }]
[==, -, 1, ), ||, (, indexEnd, ==, -, 1, ), ), {, throw, new, ParseException, (, "Syntax error when parsing JS array", ,, true]
[), ||, (, indexEnd, ==, -, 1, ), ), {, throw, new, ParseException, (, "Syntax error when parsing JS array", ,, true, ), ;, }]
[), ||, (, indexEnd, ==, -, 1, ), ), {, throw, new, ParseException, (, "Syntax error when parsing JS array", ,, true, ), ;, }]
[), {, throw, new, ParseException, (, "Syntax error when parsing JS array", ,, true, ), ;, }, String, innerValues, =, input, ., substring, (, indexStart]
[), ), {, throw, new, ParseException, (, "Syntax error when parsing JS array", ,, true, ), ;, }, String, innerValues, =, input, ., substring, (]
[==, -, 1, ), ), {, throw, new, ParseException, (, "Syntax error when parsing JS array", ,, true, ), ;, }, String, innerValues, =, input]
[), ), {, throw, new, ParseException, (, "Syntax error when parsing JS array", ,, true, ), ;, }, String, innerValues, =, input, ., substring, (]
[), ), {, throw, new, ParseException, (, "Syntax error when parsing JS array", ,, true, ), ;, }, String, innerValues, =, input, ., substring, (]
[;, }, String, innerValues, =, input, ., substring, (, indexStart, +, 1, ,, indexEnd, ), ;, if, (, !, innerValues]
[,, true, ), ;, }, String, innerValues, =, input, ., substring, (, indexStart, +, 1, ,, indexEnd, ), ;, if]
[), ;, }, String, innerValues, =, input, ., substring, (, indexStart, +, 1, ,, indexEnd, ), ;, if, (, !]
[;, if, (, !, innerValues, ., trim, (, ), ., isEmpty, (, ), ), {, valueMatcher, ., reset, (, innerValues]
[., substring, (, indexStart, +, 1, ,, indexEnd, ), ;, if, (, !, innerValues, ., trim, (, ), ., isEmpty]
[,, indexEnd, ), ;, if, (, !, innerValues, ., trim, (, ), ., isEmpty, (, ), ), {, valueMatcher, .]
[+, 1, ,, indexEnd, ), ;, if, (, !, innerValues, ., trim, (, ), ., isEmpty, (, ), ), {]
[,, indexEnd, ), ;, if, (, !, innerValues, ., trim, (, ), ., isEmpty, (, ), ), {, valueMatcher, .]
[), ;, if, (, !, innerValues, ., trim, (, ), ., isEmpty, (, ), ), {, valueMatcher, ., reset, (]
[), {, valueMatcher, ., reset, (, innerValues, ), ;, for, (, ;, ;, ), {, if, (, !, valueMatcher, .]
[), {, valueMatcher, ., reset, (, innerValues, ), ;, for, (, ;, ;, ), {, if, (, !, valueMatcher, .]
[., isEmpty, (, ), ), {, valueMatcher, ., reset, (, innerValues, ), ;, for, (, ;, ;, ), {, if]
[., trim, (, ), ., isEmpty, (, ), ), {, valueMatcher, ., reset, (, innerValues, ), ;, for, (, ;]
[;, for, (, ;, ;, ), {, if, (, !, valueMatcher, ., lookingAt, (, ), ), {, throw, new, ParseException]
[., reset, (, innerValues, ), ;, for, (, ;, ;, ), {, if, (, !, valueMatcher, ., lookingAt, (, )]
[), ;, for, (, ;, ;, ), {, if, (, !, valueMatcher, ., lookingAt, (, ), ), {, throw, new]
[), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }, results, ., add, (, valueMatcher, ., group, (]
[), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }, results, ., add, (, valueMatcher, ., group, (]
[., lookingAt, (, ), ), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }, results, ., add, (]
[;, }, results, ., add, (, valueMatcher, ., group, (, 1, ), !=, null, ?, valueMatcher, ., group, (, 1]
[,, true, ), ;, }, results, ., add, (, valueMatcher, ., group, (, 1, ), !=, null, ?, valueMatcher, .]
[), ;, }, results, ., add, (, valueMatcher, ., group, (, 1, ), !=, null, ?, valueMatcher, ., group, (]
[;, if, (, valueMatcher, ., hitEnd, (, ), ), {, break, ;, }, if, (, innerValues, ., charAt, (, valueMatcher]
[., add, (, valueMatcher, ., group, (, 1, ), !=, null, ?, valueMatcher, ., group, (, 1, ), :, valueMatcher]
[), ;, if, (, valueMatcher, ., hitEnd, (, ), ), {, break, ;, }, if, (, innerValues, ., charAt, (]
[?, valueMatcher, ., group, (, 1, ), :, valueMatcher, ., group, (, 2, ), ), ;, if, (, valueMatcher, .]
[!=, null, ?, valueMatcher, ., group, (, 1, ), :, valueMatcher, ., group, (, 2, ), ), ;, if, (]
[., group, (, 1, ), !=, null, ?, valueMatcher, ., group, (, 1, ), :, valueMatcher, ., group, (, 2]
[), !=, null, ?, valueMatcher, ., group, (, 1, ), :, valueMatcher, ., group, (, 2, ), ), ;, if]
[?, valueMatcher, ., group, (, 1, ), :, valueMatcher, ., group, (, 2, ), ), ;, if, (, valueMatcher, .]
[:, valueMatcher, ., group, (, 2, ), ), ;, if, (, valueMatcher, ., hitEnd, (, ), ), {, break, ;]
[., group, (, 1, ), :, valueMatcher, ., group, (, 2, ), ), ;, if, (, valueMatcher, ., hitEnd, (]
[), :, valueMatcher, ., group, (, 2, ), ), ;, if, (, valueMatcher, ., hitEnd, (, ), ), {, break]
[), ;, if, (, valueMatcher, ., hitEnd, (, ), ), {, break, ;, }, if, (, innerValues, ., charAt, (]
[., group, (, 2, ), ), ;, if, (, valueMatcher, ., hitEnd, (, ), ), {, break, ;, }, if]
[), ), ;, if, (, valueMatcher, ., hitEnd, (, ), ), {, break, ;, }, if, (, innerValues, ., charAt]
[), {, break, ;, }, if, (, innerValues, ., charAt, (, valueMatcher, ., end, (, ), ), !=, ',', )]
[., hitEnd, (, ), ), {, break, ;, }, if, (, innerValues, ., charAt, (, valueMatcher, ., end, (, )]
[), {, throw, new, ParseException, (, "Missing comma in string array", ,, true, ), ;, }, valueMatcher, ., region, (, valueMatcher, ., end, (]
[!=, ',', ), {, throw, new, ParseException, (, "Missing comma in string array", ,, true, ), ;, }, valueMatcher, ., region, (, valueMatcher, .]
[., charAt, (, valueMatcher, ., end, (, ), ), !=, ',', ), {, throw, new, ParseException, (, "Missing comma in string array", ,, true]
[), !=, ',', ), {, throw, new, ParseException, (, "Missing comma in string array", ,, true, ), ;, }, valueMatcher, ., region, (, valueMatcher]
[., end, (, ), ), !=, ',', ), {, throw, new, ParseException, (, "Missing comma in string array", ,, true, ), ;, }, valueMatcher]
[), {, throw, new, ParseException, (, "Missing comma in string array", ,, true, ), ;, }, valueMatcher, ., region, (, valueMatcher, ., end, (]
[;, }, valueMatcher, ., region, (, valueMatcher, ., end, (, ), +, 1, ,, valueMatcher, ., regionEnd, (, ), )]
[,, true, ), ;, }, valueMatcher, ., region, (, valueMatcher, ., end, (, ), +, 1, ,, valueMatcher, ., regionEnd]
[), ;, }, valueMatcher, ., region, (, valueMatcher, ., end, (, ), +, 1, ,, valueMatcher, ., regionEnd, (, )]
[;, }, }, return, results, ;, }, }]
[., region, (, valueMatcher, ., end, (, ), +, 1, ,, valueMatcher, ., regionEnd, (, ), ), ;, }, }]
[,, valueMatcher, ., regionEnd, (, ), ), ;, }, }, return, results, ;, }, }]
[+, 1, ,, valueMatcher, ., regionEnd, (, ), ), ;, }, }, return, results, ;, }, }]
[., end, (, ), +, 1, ,, valueMatcher, ., regionEnd, (, ), ), ;, }, }, return, results, ;, }]
[,, valueMatcher, ., regionEnd, (, ), ), ;, }, }, return, results, ;, }, }]
[), ;, }, }, return, results, ;, }, }]
[., regionEnd, (, ), ), ;, }, }, return, results, ;, }, }]
[;, }, }]
