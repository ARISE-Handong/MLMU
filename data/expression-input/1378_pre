[rows, ;, private, final, int, columns, ;, public, SparseFieldMatrix, (, final, Field, <, T, >, field, ), {, super, (]
[final, int, columns, ;, public, SparseFieldMatrix, (, final, Field, <, T, >, field, ), {, super, (, field, ), ;]
[columns, ;, public, SparseFieldMatrix, (, final, Field, <, T, >, field, ), {, super, (, field, ), ;, rows, =]
[public, SparseFieldMatrix, (, final, Field, <, T, >, field, ), {, super, (, field, ), ;, rows, =, 0, ;]
[(, final, Field, <, T, >, field, ), {, super, (, field, ), ;, rows, =, 0, ;, columns, =]
[Field, <, T, >, field, ), {, super, (, field, ), ;, rows, =, 0, ;, columns, =, 0, ;]
[T, >, field, ), {, super, (, field, ), ;, rows, =, 0, ;, columns, =, 0, ;, entries, =]
[(, field, ), ;, rows, =, 0, ;, columns, =, 0, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (]
[SparseFieldMatrix, (, final, Field, <, T, >, field, ,, final, int, rowDimension, ,, final, int, columnDimension, ), {, super, (]
[final, Field, <, T, >, field, ,, final, int, rowDimension, ,, final, int, columnDimension, ), {, super, (, field, ,]
[<, T, >, field, ,, final, int, rowDimension, ,, final, int, columnDimension, ), {, super, (, field, ,, rowDimension, ,]
[field, ,, final, int, rowDimension, ,, final, int, columnDimension, ), {, super, (, field, ,, rowDimension, ,, columnDimension, ), ;]
[field, ,, final, int, rowDimension, ,, final, int, columnDimension, ), {, super, (, field, ,, rowDimension, ,, columnDimension, ), ;]
[rowDimension, ,, final, int, columnDimension, ), {, super, (, field, ,, rowDimension, ,, columnDimension, ), ;, this, ., rows, =]
[final, int, columnDimension, ), {, super, (, field, ,, rowDimension, ,, columnDimension, ), ;, this, ., rows, =, rowDimension, ;]
[final, int, columnDimension, ), {, super, (, field, ,, rowDimension, ,, columnDimension, ), ;, this, ., rows, =, rowDimension, ;]
[{, super, (, field, ,, rowDimension, ,, columnDimension, ), ;, this, ., rows, =, rowDimension, ;, this, ., columns, =]
[(, field, ,, rowDimension, ,, columnDimension, ), ;, this, ., rows, =, rowDimension, ;, this, ., columns, =, columnDimension, ;]
[,, rowDimension, ,, columnDimension, ), ;, this, ., rows, =, rowDimension, ;, this, ., columns, =, columnDimension, ;, entries, =]
[this, ., rows, =, rowDimension, ;, this, ., columns, =, columnDimension, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (]
[<, T, >, (, field, ), ;, }, public, SparseFieldMatrix, (, SparseFieldMatrix, <, T, >, other, ), {, super, (]
[<, T, >, (, field, ), ;, }, public, SparseFieldMatrix, (, SparseFieldMatrix, <, T, >, other, ), {, super, (]
[;, }, public, SparseFieldMatrix, (, SparseFieldMatrix, <, T, >, other, ), {, super, (, other, ., getField, (, ), ,]
[;, }, public, SparseFieldMatrix, (, SparseFieldMatrix, <, T, >, other, ), {, super, (, other, ., getField, (, ), ,]
[<, T, >, other, ), {, super, (, other, ., getField, (, ), ,, other, ., getRowDimension, (, ), ,]
[<, T, >, other, ), {, super, (, other, ., getField, (, ), ,, other, ., getRowDimension, (, ), ,]
[(, other, ., getField, (, ), ,, other, ., getRowDimension, (, ), ,, other, ., getColumnDimension, (, ), ), ;]
[., getField, (, ), ,, other, ., getRowDimension, (, ), ,, other, ., getColumnDimension, (, ), ), ;, rows, =]
[., getField, (, ), ,, other, ., getRowDimension, (, ), ,, other, ., getColumnDimension, (, ), ), ;, rows, =]
[., getRowDimension, (, ), ,, other, ., getColumnDimension, (, ), ), ;, rows, =, other, ., getRowDimension, (, ), ;]
[(, ), ,, other, ., getColumnDimension, (, ), ), ;, rows, =, other, ., getRowDimension, (, ), ;, columns, =]
[(, ), ,, other, ., getColumnDimension, (, ), ), ;, rows, =, other, ., getRowDimension, (, ), ;, columns, =]
[(, ), ), ;, rows, =, other, ., getRowDimension, (, ), ;, columns, =, other, ., getColumnDimension, (, ), ;]
[), ;, rows, =, other, ., getRowDimension, (, ), ;, columns, =, other, ., getColumnDimension, (, ), ;, entries, =]
[getRowDimension, (, ), ;, columns, =, other, ., getColumnDimension, (, ), ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (]
[getRowDimension, (, ), ;, columns, =, other, ., getColumnDimension, (, ), ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (]
[>, (, other, ., entries, ), ;, }, public, SparseFieldMatrix, (, FieldMatrix, <, T, >, other, ), {, super, (]
[>, (, other, ., entries, ), ;, }, public, SparseFieldMatrix, (, FieldMatrix, <, T, >, other, ), {, super, (]
[;, }, public, SparseFieldMatrix, (, FieldMatrix, <, T, >, other, ), {, super, (, other, ., getField, (, ), ,]
[;, }, public, SparseFieldMatrix, (, FieldMatrix, <, T, >, other, ), {, super, (, other, ., getField, (, ), ,]
[<, T, >, other, ), {, super, (, other, ., getField, (, ), ,, other, ., getRowDimension, (, ), ,]
[<, T, >, other, ), {, super, (, other, ., getField, (, ), ,, other, ., getRowDimension, (, ), ,]
[(, other, ., getField, (, ), ,, other, ., getRowDimension, (, ), ,, other, ., getColumnDimension, (, ), ), ;]
[., getField, (, ), ,, other, ., getRowDimension, (, ), ,, other, ., getColumnDimension, (, ), ), ;, rows, =]
[., getField, (, ), ,, other, ., getRowDimension, (, ), ,, other, ., getColumnDimension, (, ), ), ;, rows, =]
[., getRowDimension, (, ), ,, other, ., getColumnDimension, (, ), ), ;, rows, =, other, ., getRowDimension, (, ), ;]
[(, ), ,, other, ., getColumnDimension, (, ), ), ;, rows, =, other, ., getRowDimension, (, ), ;, columns, =]
[(, ), ,, other, ., getColumnDimension, (, ), ), ;, rows, =, other, ., getRowDimension, (, ), ;, columns, =]
[(, ), ), ;, rows, =, other, ., getRowDimension, (, ), ;, columns, =, other, ., getColumnDimension, (, ), ;]
[), ;, rows, =, other, ., getRowDimension, (, ), ;, columns, =, other, ., getColumnDimension, (, ), ;, entries, =]
[getRowDimension, (, ), ;, columns, =, other, ., getColumnDimension, (, ), ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (]
[), ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, getField, (, ), ), ;, for, (, int, i, =]
[entries, =, new, OpenIntToFieldHashMap, <, T, >, (, getField, (, ), ), ;, for, (, int, i, =, 0, ;]
[entries, =, new, OpenIntToFieldHashMap, <, T, >, (, getField, (, ), ), ;, for, (, int, i, =, 0, ;]
[new, OpenIntToFieldHashMap, <, T, >, (, getField, (, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[<, T, >, (, getField, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;]
[<, T, >, (, getField, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;]
[for, (, int, i, =, 0, ;, i, <, rows, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, rows, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, rows, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, rows, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, rows, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, columns, ;]
[;, i, <, rows, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, columns, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, columns, ;, j, ++, ), {]
[++, ), {, for, (, int, j, =, 0, ;, j, <, columns, ;, j, ++, ), {, setEntry, (]
[{, for, (, int, j, =, 0, ;, j, <, columns, ;, j, ++, ), {, setEntry, (, i, ,]
[(, int, j, =, 0, ;, j, <, columns, ;, j, ++, ), {, setEntry, (, i, ,, j, ,]
[(, int, j, =, 0, ;, j, <, columns, ;, j, ++, ), {, setEntry, (, i, ,, j, ,]
[0, ;, j, <, columns, ;, j, ++, ), {, setEntry, (, i, ,, j, ,, other, ., getEntry, (]
[j, <, columns, ;, j, ++, ), {, setEntry, (, i, ,, j, ,, other, ., getEntry, (, i, ,]
[;, }, }, }, @, Override, public, void, addToEntry, (, int, row, ,, int, column, ,, T, increment, ), {]
[}, }, @, Override, public, void, addToEntry, (, int, row, ,, int, column, ,, T, increment, ), {, checkRowIndex, (]
[Override, public, void, addToEntry, (, int, row, ,, int, column, ,, T, increment, ), {, checkRowIndex, (, row, ), ;]
[void, addToEntry, (, int, row, ,, int, column, ,, T, increment, ), {, checkRowIndex, (, row, ), ;, checkColumnIndex, (]
[column, ,, T, increment, ), {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, final, int, key, =]
[T, increment, ), {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, final, int, key, =, computeKey, (]
[), {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, final, int, key, =, computeKey, (, row, ,]
[checkColumnIndex, (, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, T, value, =]
[checkColumnIndex, (, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, T, value, =]
[checkColumnIndex, (, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, T, value, =]
[;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, T, value, =, entries, ., get, (]
[computeKey, (, row, ,, column, ), ;, final, T, value, =, entries, ., get, (, key, ), ., add, (]
[), ;, final, T, value, =, entries, ., get, (, key, ), ., add, (, increment, ), ;, if, (]
[), ;, final, T, value, =, entries, ., get, (, key, ), ., add, (, increment, ), ;, if, (]
[), ;, final, T, value, =, entries, ., get, (, key, ), ., add, (, increment, ), ;, if, (]
[key, ), ., add, (, increment, ), ;, if, (, getField, (, ), ., getZero, (, ), ., equals, (]
[(, increment, ), ;, if, (, getField, (, ), ., getZero, (, ), ., equals, (, value, ), ), {]
[(, increment, ), ;, if, (, getField, (, ), ., getZero, (, ), ., equals, (, value, ), ), {]
[if, (, getField, (, ), ., getZero, (, ), ., equals, (, value, ), ), {, entries, ., remove, (]
[getZero, (, ), ., equals, (, value, ), ), {, entries, ., remove, (, key, ), ;, }, else, {]
[getZero, (, ), ., equals, (, value, ), ), {, entries, ., remove, (, key, ), ;, }, else, {]
[equals, (, value, ), ), {, entries, ., remove, (, key, ), ;, }, else, {, entries, ., put, (]
[value, ), ), {, entries, ., remove, (, key, ), ;, }, else, {, entries, ., put, (, key, ,]
[(, key, ,, value, ), ;, }, }, @, Override, public, FieldMatrix, <, T, >, copy, (, ), {, return]
[}, }, @, Override, public, FieldMatrix, <, T, >, copy, (, ), {, return, new, SparseFieldMatrix, <, T, >, (]
[), ;, }, @, Override, public, FieldMatrix, <, T, >, createMatrix, (, int, rowDimension, ,, int, columnDimension, ), {, return]
[FieldMatrix, <, T, >, createMatrix, (, int, rowDimension, ,, int, columnDimension, ), {, return, new, SparseFieldMatrix, <, T, >, (]
[createMatrix, (, int, rowDimension, ,, int, columnDimension, ), {, return, new, SparseFieldMatrix, <, T, >, (, getField, (, ), ,]
[int, rowDimension, ,, int, columnDimension, ), {, return, new, SparseFieldMatrix, <, T, >, (, getField, (, ), ,, rowDimension, ,]
[(, getField, (, ), ,, rowDimension, ,, columnDimension, ), ;, }, @, Override, public, int, getColumnDimension, (, ), {, return]
[(, ), {, return, columns, ;, }, @, Override, public, T, getEntry, (, int, row, ,, int, column, ), {]
[{, return, columns, ;, }, @, Override, public, T, getEntry, (, int, row, ,, int, column, ), {, checkRowIndex, (]
[;, }, @, Override, public, T, getEntry, (, int, row, ,, int, column, ), {, checkRowIndex, (, row, ), ;]
[@, Override, public, T, getEntry, (, int, row, ,, int, column, ), {, checkRowIndex, (, row, ), ;, checkColumnIndex, (]
[getEntry, (, int, row, ,, int, column, ), {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, return]
[getEntry, (, int, row, ,, int, column, ), {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, return]
[,, int, column, ), {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, return, entries, ., get, (]
[column, ), {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, return, entries, ., get, (, computeKey, (]
[{, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, return, entries, ., get, (, computeKey, (, row, ,]
[get, (, computeKey, (, row, ,, column, ), ), ;, }, @, Override, public, int, getRowDimension, (, ), {, return]
[return, rows, ;, }, @, Override, public, void, multiplyEntry, (, int, row, ,, int, column, ,, T, factor, ), {]
[;, }, @, Override, public, void, multiplyEntry, (, int, row, ,, int, column, ,, T, factor, ), {, checkRowIndex, (]
[Override, public, void, multiplyEntry, (, int, row, ,, int, column, ,, T, factor, ), {, checkRowIndex, (, row, ), ;]
[void, multiplyEntry, (, int, row, ,, int, column, ,, T, factor, ), {, checkRowIndex, (, row, ), ;, checkColumnIndex, (]
[column, ,, T, factor, ), {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, final, int, key, =]
[T, factor, ), {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, final, int, key, =, computeKey, (]
[), {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, final, int, key, =, computeKey, (, row, ,]
[checkColumnIndex, (, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, T, value, =]
[checkColumnIndex, (, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, T, value, =]
[checkColumnIndex, (, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, T, value, =]
[;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, T, value, =, entries, ., get, (]
[computeKey, (, row, ,, column, ), ;, final, T, value, =, entries, ., get, (, key, ), ., multiply, (]
[), ;, final, T, value, =, entries, ., get, (, key, ), ., multiply, (, factor, ), ;, if, (]
[), ;, final, T, value, =, entries, ., get, (, key, ), ., multiply, (, factor, ), ;, if, (]
[), ;, final, T, value, =, entries, ., get, (, key, ), ., multiply, (, factor, ), ;, if, (]
[key, ), ., multiply, (, factor, ), ;, if, (, getField, (, ), ., getZero, (, ), ., equals, (]
[(, factor, ), ;, if, (, getField, (, ), ., getZero, (, ), ., equals, (, value, ), ), {]
[(, factor, ), ;, if, (, getField, (, ), ., getZero, (, ), ., equals, (, value, ), ), {]
[if, (, getField, (, ), ., getZero, (, ), ., equals, (, value, ), ), {, entries, ., remove, (]
[getZero, (, ), ., equals, (, value, ), ), {, entries, ., remove, (, key, ), ;, }, else, {]
[getZero, (, ), ., equals, (, value, ), ), {, entries, ., remove, (, key, ), ;, }, else, {]
[equals, (, value, ), ), {, entries, ., remove, (, key, ), ;, }, else, {, entries, ., put, (]
[value, ), ), {, entries, ., remove, (, key, ), ;, }, else, {, entries, ., put, (, key, ,]
[), ;, }, }, @, Override, public, void, setEntry, (, int, row, ,, int, column, ,, T, value, ), {]
[}, }, @, Override, public, void, setEntry, (, int, row, ,, int, column, ,, T, value, ), {, checkRowIndex, (]
[Override, public, void, setEntry, (, int, row, ,, int, column, ,, T, value, ), {, checkRowIndex, (, row, ), ;]
[void, setEntry, (, int, row, ,, int, column, ,, T, value, ), {, checkRowIndex, (, row, ), ;, checkColumnIndex, (]
[,, int, column, ,, T, value, ), {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, if, (]
[,, int, column, ,, T, value, ), {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, if, (]
[,, int, column, ,, T, value, ), {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, if, (]
[row, ), ;, checkColumnIndex, (, column, ), ;, if, (, getField, (, ), ., getZero, (, ), ., equals, (]
[(, column, ), ;, if, (, getField, (, ), ., getZero, (, ), ., equals, (, value, ), ), {]
[(, column, ), ;, if, (, getField, (, ), ., getZero, (, ), ., equals, (, value, ), ), {]
[if, (, getField, (, ), ., getZero, (, ), ., equals, (, value, ), ), {, entries, ., remove, (]
[getField, (, ), ., getZero, (, ), ., equals, (, value, ), ), {, entries, ., remove, (, computeKey, (]
[), ., getZero, (, ), ., equals, (, value, ), ), {, entries, ., remove, (, computeKey, (, row, ,]
[(, value, ), ), {, entries, ., remove, (, computeKey, (, row, ,, column, ), ), ;, }, else, {]
[(, value, ), ), {, entries, ., remove, (, computeKey, (, row, ,, column, ), ), ;, }, else, {]
[{, entries, ., remove, (, computeKey, (, row, ,, column, ), ), ;, }, else, {, entries, ., put, (]
[., remove, (, computeKey, (, row, ,, column, ), ), ;, }, else, {, entries, ., put, (, computeKey, (]
[(, computeKey, (, row, ,, column, ), ), ;, }, else, {, entries, ., put, (, computeKey, (, row, ,]
[row, ,, column, ), ), ;, }, else, {, entries, ., put, (, computeKey, (, row, ,, column, ), ,]
[column, ), ,, value, ), ;, }, }, private, int, computeKey, (, int, row, ,, int, column, ), {, return]
[column, ), ,, value, ), ;, }, }, private, int, computeKey, (, int, row, ,, int, column, ), {, return]
[column, ), ,, value, ), ;, }, }, private, int, computeKey, (, int, row, ,, int, column, ), {, return]
[,, value, ), ;, }, }, private, int, computeKey, (, int, row, ,, int, column, ), {, return, row, *]
[), ;, }, }, private, int, computeKey, (, int, row, ,, int, column, ), {, return, row, *, columns, +]
