[;, import, java, ., util, ., Set, ;, public, class, DefaultPassConfig, extends, PassConfig, {, private, static, final, String, COMPILED_CONSTANT_NAME, =]
[public, class, DefaultPassConfig, extends, PassConfig, {, private, static, final, String, COMPILED_CONSTANT_NAME, =, "COMPILED", ;, private, static, final, String, CLOSURE_LOCALE_CONSTANT_NAME, =]
[static, final, String, COMPILED_CONSTANT_NAME, =, "COMPILED", ;, private, static, final, String, CLOSURE_LOCALE_CONSTANT_NAME, =, "goog.LOCALE", ;, static, final, DiagnosticType, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK, =]
[static, final, String, COMPILED_CONSTANT_NAME, =, "COMPILED", ;, private, static, final, String, CLOSURE_LOCALE_CONSTANT_NAME, =, "goog.LOCALE", ;, static, final, DiagnosticType, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK, =]
[=, "COMPILED", ;, private, static, final, String, CLOSURE_LOCALE_CONSTANT_NAME, =, "goog.LOCALE", ;, static, final, DiagnosticType, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK, =, DiagnosticType, ., error, (]
[;, private, static, final, String, CLOSURE_LOCALE_CONSTANT_NAME, =, "goog.LOCALE", ;, static, final, DiagnosticType, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK, =, DiagnosticType, ., error, (, "JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK", ,]
[;, static, final, DiagnosticType, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK, =, DiagnosticType, ., error, (, "JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK", ,, "TightenTypes requires type checking. Please use --check_types.", ), ;, static, final, DiagnosticType, CANNOT_USE_PROTOTYPE_AND_VAR, =]
[;, static, final, DiagnosticType, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK, =, DiagnosticType, ., error, (, "JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK", ,, "TightenTypes requires type checking. Please use --check_types.", ), ;, static, final, DiagnosticType, CANNOT_USE_PROTOTYPE_AND_VAR, =]
[TIGHTEN_TYPES_WITHOUT_TYPE_CHECK, =, DiagnosticType, ., error, (, "JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK", ,, "TightenTypes requires type checking. Please use --check_types.", ), ;, static, final, DiagnosticType, CANNOT_USE_PROTOTYPE_AND_VAR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK", ,, "TightenTypes requires type checking. Please use --check_types.", ), ;, static, final, DiagnosticType, CANNOT_USE_PROTOTYPE_AND_VAR, =, DiagnosticType, ., error, (, "JSC_CANNOT_USE_PROTOTYPE_AND_VAR", ,]
[;, static, final, DiagnosticType, CANNOT_USE_PROTOTYPE_AND_VAR, =, DiagnosticType, ., error, (, "JSC_CANNOT_USE_PROTOTYPE_AND_VAR", ,, "Rename prototypes and inline variables cannot be used together", ), ;, static, final, DiagnosticType, REPORT_PATH_IO_ERROR, =]
[;, static, final, DiagnosticType, CANNOT_USE_PROTOTYPE_AND_VAR, =, DiagnosticType, ., error, (, "JSC_CANNOT_USE_PROTOTYPE_AND_VAR", ,, "Rename prototypes and inline variables cannot be used together", ), ;, static, final, DiagnosticType, REPORT_PATH_IO_ERROR, =]
[CANNOT_USE_PROTOTYPE_AND_VAR, =, DiagnosticType, ., error, (, "JSC_CANNOT_USE_PROTOTYPE_AND_VAR", ,, "Rename prototypes and inline variables cannot be used together", ), ;, static, final, DiagnosticType, REPORT_PATH_IO_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_CANNOT_USE_PROTOTYPE_AND_VAR", ,, "Rename prototypes and inline variables cannot be used together", ), ;, static, final, DiagnosticType, REPORT_PATH_IO_ERROR, =, DiagnosticType, ., error, (, "JSC_REPORT_PATH_IO_ERROR", ,]
[static, final, DiagnosticType, REPORT_PATH_IO_ERROR, =, DiagnosticType, ., error, (, "JSC_REPORT_PATH_IO_ERROR", ,, "Error writing compiler report to {0}", ), ;, private, static, final, DiagnosticType, NAME_REF_GRAPH_FILE_ERROR, =]
[static, final, DiagnosticType, REPORT_PATH_IO_ERROR, =, DiagnosticType, ., error, (, "JSC_REPORT_PATH_IO_ERROR", ,, "Error writing compiler report to {0}", ), ;, private, static, final, DiagnosticType, NAME_REF_GRAPH_FILE_ERROR, =]
[=, DiagnosticType, ., error, (, "JSC_REPORT_PATH_IO_ERROR", ,, "Error writing compiler report to {0}", ), ;, private, static, final, DiagnosticType, NAME_REF_GRAPH_FILE_ERROR, =, DiagnosticType, ., error, (]
[., error, (, "JSC_REPORT_PATH_IO_ERROR", ,, "Error writing compiler report to {0}", ), ;, private, static, final, DiagnosticType, NAME_REF_GRAPH_FILE_ERROR, =, DiagnosticType, ., error, (, "JSC_NAME_REF_GRAPH_FILE_ERROR", ,]
[static, final, DiagnosticType, NAME_REF_GRAPH_FILE_ERROR, =, DiagnosticType, ., error, (, "JSC_NAME_REF_GRAPH_FILE_ERROR", ,, "Error \"{1}\" writing name reference graph to \"{0}\".", ), ;, private, static, final, DiagnosticType, NAME_REF_REPORT_FILE_ERROR, =]
[static, final, DiagnosticType, NAME_REF_GRAPH_FILE_ERROR, =, DiagnosticType, ., error, (, "JSC_NAME_REF_GRAPH_FILE_ERROR", ,, "Error \"{1}\" writing name reference graph to \"{0}\".", ), ;, private, static, final, DiagnosticType, NAME_REF_REPORT_FILE_ERROR, =]
[=, DiagnosticType, ., error, (, "JSC_NAME_REF_GRAPH_FILE_ERROR", ,, "Error \"{1}\" writing name reference graph to \"{0}\".", ), ;, private, static, final, DiagnosticType, NAME_REF_REPORT_FILE_ERROR, =, DiagnosticType, ., error, (]
[., error, (, "JSC_NAME_REF_GRAPH_FILE_ERROR", ,, "Error \"{1}\" writing name reference graph to \"{0}\".", ), ;, private, static, final, DiagnosticType, NAME_REF_REPORT_FILE_ERROR, =, DiagnosticType, ., error, (, "JSC_NAME_REF_REPORT_FILE_ERROR", ,]
[., error, (, "JSC_NAME_REF_REPORT_FILE_ERROR", ,, "Error \"{1}\" writing name reference report to \"{0}\".", ), ;, private, static, final, java, ., util, ., regex, ., Pattern, GLOBAL_SYMBOL_NAMESPACE_PATTERN, =]
[., error, (, "JSC_NAME_REF_REPORT_FILE_ERROR", ,, "Error \"{1}\" writing name reference report to \"{0}\".", ), ;, private, static, final, java, ., util, ., regex, ., Pattern, GLOBAL_SYMBOL_NAMESPACE_PATTERN, =]
[., error, (, "JSC_NAME_REF_REPORT_FILE_ERROR", ,, "Error \"{1}\" writing name reference report to \"{0}\".", ), ;, private, static, final, java, ., util, ., regex, ., Pattern, GLOBAL_SYMBOL_NAMESPACE_PATTERN, =]
[., error, (, "JSC_NAME_REF_REPORT_FILE_ERROR", ,, "Error \"{1}\" writing name reference report to \"{0}\".", ), ;, private, static, final, java, ., util, ., regex, ., Pattern, GLOBAL_SYMBOL_NAMESPACE_PATTERN, =]
[., error, (, "JSC_NAME_REF_REPORT_FILE_ERROR", ,, "Error \"{1}\" writing name reference report to \"{0}\".", ), ;, private, static, final, java, ., util, ., regex, ., Pattern, GLOBAL_SYMBOL_NAMESPACE_PATTERN, =]
[final, java, ., util, ., regex, ., Pattern, GLOBAL_SYMBOL_NAMESPACE_PATTERN, =, java, ., util, ., regex, ., Pattern, ., compile, (]
[Pattern, GLOBAL_SYMBOL_NAMESPACE_PATTERN, =, java, ., util, ., regex, ., Pattern, ., compile, (, "^[a-zA-Z0-9$_]+$", ), ;, private, GlobalNamespace, namespaceForChecks, =]
[., regex, ., Pattern, ., compile, (, "^[a-zA-Z0-9$_]+$", ), ;, private, GlobalNamespace, namespaceForChecks, =, null, ;, private, PreprocessorSymbolTable, preprocessorSymbolTable, =]
[(, "^[a-zA-Z0-9$_]+$", ), ;, private, GlobalNamespace, namespaceForChecks, =, null, ;, private, PreprocessorSymbolTable, preprocessorSymbolTable, =, null, ;, private, TightenTypes, tightenTypes, =]
[;, private, PreprocessorSymbolTable, preprocessorSymbolTable, =, null, ;, private, TightenTypes, tightenTypes, =, null, ;, private, Set, <, String, >, exportedNames, =]
[TightenTypes, tightenTypes, =, null, ;, private, Set, <, String, >, exportedNames, =, null, ;, private, CrossModuleMethodMotion, ., IdGenerator, crossModuleIdGenerator, =]
[., IdGenerator, crossModuleIdGenerator, =, new, CrossModuleMethodMotion, ., IdGenerator, (, ), ;, private, Map, <, String, ,, Integer, >, cssNames, =]
[., IdGenerator, (, ), ;, private, Map, <, String, ,, Integer, >, cssNames, =, null, ;, private, VariableMap, variableMap, =]
[Map, <, String, ,, Integer, >, cssNames, =, null, ;, private, VariableMap, variableMap, =, null, ;, private, VariableMap, propertyMap, =]
[cssNames, =, null, ;, private, VariableMap, variableMap, =, null, ;, private, VariableMap, propertyMap, =, null, ;, private, VariableMap, anonymousFunctionNameMap, =]
[variableMap, =, null, ;, private, VariableMap, propertyMap, =, null, ;, private, VariableMap, anonymousFunctionNameMap, =, null, ;, private, FunctionNames, functionNames, =]
[propertyMap, =, null, ;, private, VariableMap, anonymousFunctionNameMap, =, null, ;, private, FunctionNames, functionNames, =, null, ;, private, VariableMap, stringMap, =]
[anonymousFunctionNameMap, =, null, ;, private, FunctionNames, functionNames, =, null, ;, private, VariableMap, stringMap, =, null, ;, private, String, idGeneratorMap, =]
[VariableMap, stringMap, =, null, ;, private, String, idGeneratorMap, =, null, ;, public, DefaultPassConfig, (, CompilerOptions, options, ), {, super, (]
[(, CompilerOptions, options, ), {, super, (, options, ), ;, }, @, Override, protected, State, getIntermediateState, (, ), {, return]
[), {, super, (, options, ), ;, }, @, Override, protected, State, getIntermediateState, (, ), {, return, new, State, (]
[), {, super, (, options, ), ;, }, @, Override, protected, State, getIntermediateState, (, ), {, return, new, State, (]
[), {, super, (, options, ), ;, }, @, Override, protected, State, getIntermediateState, (, ), {, return, new, State, (]
[super, (, options, ), ;, }, @, Override, protected, State, getIntermediateState, (, ), {, return, new, State, (, cssNames, ==]
[options, ), ;, }, @, Override, protected, State, getIntermediateState, (, ), {, return, new, State, (, cssNames, ==, null, ?]
[;, }, @, Override, protected, State, getIntermediateState, (, ), {, return, new, State, (, cssNames, ==, null, ?, null, :]
[;, }, @, Override, protected, State, getIntermediateState, (, ), {, return, new, State, (, cssNames, ==, null, ?, null, :]
[protected, State, getIntermediateState, (, ), {, return, new, State, (, cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (]
[(, ), {, return, new, State, (, cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (, cssNames, ), ,]
[(, ), {, return, new, State, (, cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (, cssNames, ), ,]
[(, ), {, return, new, State, (, cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (, cssNames, ), ,]
[{, return, new, State, (, cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (, cssNames, ), ,, exportedNames, ==]
[new, State, (, cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (, cssNames, ), ,, exportedNames, ==, null, ?]
[(, cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (, cssNames, ), ,, exportedNames, ==, null, ?, null, :]
[(, cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (, cssNames, ), ,, exportedNames, ==, null, ?, null, :]
[?, null, :, Maps, ., newHashMap, (, cssNames, ), ,, exportedNames, ==, null, ?, null, :, Collections, ., unmodifiableSet, (]
[Maps, ., newHashMap, (, cssNames, ), ,, exportedNames, ==, null, ?, null, :, Collections, ., unmodifiableSet, (, exportedNames, ), ,]
[newHashMap, (, cssNames, ), ,, exportedNames, ==, null, ?, null, :, Collections, ., unmodifiableSet, (, exportedNames, ), ,, crossModuleIdGenerator, ,]
[cssNames, ), ,, exportedNames, ==, null, ?, null, :, Collections, ., unmodifiableSet, (, exportedNames, ), ,, crossModuleIdGenerator, ,, variableMap, ,]
[,, exportedNames, ==, null, ?, null, :, Collections, ., unmodifiableSet, (, exportedNames, ), ,, crossModuleIdGenerator, ,, variableMap, ,, propertyMap, ,]
[==, null, ?, null, :, Collections, ., unmodifiableSet, (, exportedNames, ), ,, crossModuleIdGenerator, ,, variableMap, ,, propertyMap, ,, anonymousFunctionNameMap, ,]
[?, null, :, Collections, ., unmodifiableSet, (, exportedNames, ), ,, crossModuleIdGenerator, ,, variableMap, ,, propertyMap, ,, anonymousFunctionNameMap, ,, stringMap, ,]
[:, Collections, ., unmodifiableSet, (, exportedNames, ), ,, crossModuleIdGenerator, ,, variableMap, ,, propertyMap, ,, anonymousFunctionNameMap, ,, stringMap, ,, functionNames, ,]
[anonymousFunctionNameMap, ,, stringMap, ,, functionNames, ,, idGeneratorMap, ), ;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {]
[anonymousFunctionNameMap, ,, stringMap, ,, functionNames, ,, idGeneratorMap, ), ;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {]
[functionNames, ,, idGeneratorMap, ), ;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {, this, ., cssNames, =]
[functionNames, ,, idGeneratorMap, ), ;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {, this, ., cssNames, =]
[functionNames, ,, idGeneratorMap, ), ;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {, this, ., cssNames, =]
[functionNames, ,, idGeneratorMap, ), ;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {, this, ., cssNames, =]
[;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {, this, ., cssNames, =, state, ., cssNames, ==]
[@, Override, protected, void, setIntermediateState, (, State, state, ), {, this, ., cssNames, =, state, ., cssNames, ==, null, ?]
[protected, void, setIntermediateState, (, State, state, ), {, this, ., cssNames, =, state, ., cssNames, ==, null, ?, null, :]
[protected, void, setIntermediateState, (, State, state, ), {, this, ., cssNames, =, state, ., cssNames, ==, null, ?, null, :]
[State, state, ), {, this, ., cssNames, =, state, ., cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (]
[State, state, ), {, this, ., cssNames, =, state, ., cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (]
[., cssNames, =, state, ., cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (, state, ., cssNames, ), ;]
[., cssNames, =, state, ., cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (, state, ., cssNames, ), ;]
[., cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (, state, ., cssNames, ), ;, this, ., exportedNames, =]
[., cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (, state, ., cssNames, ), ;, this, ., exportedNames, =]
[., cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (, state, ., cssNames, ), ;, this, ., exportedNames, =]
[., cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (, state, ., cssNames, ), ;, this, ., exportedNames, =]
[?, null, :, Maps, ., newHashMap, (, state, ., cssNames, ), ;, this, ., exportedNames, =, state, ., exportedNames, ==]
[:, Maps, ., newHashMap, (, state, ., cssNames, ), ;, this, ., exportedNames, =, state, ., exportedNames, ==, null, ?]
[., newHashMap, (, state, ., cssNames, ), ;, this, ., exportedNames, =, state, ., exportedNames, ==, null, ?, null, :]
[., newHashMap, (, state, ., cssNames, ), ;, this, ., exportedNames, =, state, ., exportedNames, ==, null, ?, null, :]
[., cssNames, ), ;, this, ., exportedNames, =, state, ., exportedNames, ==, null, ?, null, :, Sets, ., newHashSet, (]
[., cssNames, ), ;, this, ., exportedNames, =, state, ., exportedNames, ==, null, ?, null, :, Sets, ., newHashSet, (]
[., exportedNames, =, state, ., exportedNames, ==, null, ?, null, :, Sets, ., newHashSet, (, state, ., exportedNames, ), ;]
[., exportedNames, =, state, ., exportedNames, ==, null, ?, null, :, Sets, ., newHashSet, (, state, ., exportedNames, ), ;]
[., exportedNames, ==, null, ?, null, :, Sets, ., newHashSet, (, state, ., exportedNames, ), ;, this, ., crossModuleIdGenerator, =]
[., exportedNames, ==, null, ?, null, :, Sets, ., newHashSet, (, state, ., exportedNames, ), ;, this, ., crossModuleIdGenerator, =]
[?, null, :, Sets, ., newHashSet, (, state, ., exportedNames, ), ;, this, ., crossModuleIdGenerator, =, state, ., crossModuleIdGenerator, ;]
[?, null, :, Sets, ., newHashSet, (, state, ., exportedNames, ), ;, this, ., crossModuleIdGenerator, =, state, ., crossModuleIdGenerator, ;]
[., newHashSet, (, state, ., exportedNames, ), ;, this, ., crossModuleIdGenerator, =, state, ., crossModuleIdGenerator, ;, this, ., variableMap, =]
[., newHashSet, (, state, ., exportedNames, ), ;, this, ., crossModuleIdGenerator, =, state, ., crossModuleIdGenerator, ;, this, ., variableMap, =]
[., exportedNames, ), ;, this, ., crossModuleIdGenerator, =, state, ., crossModuleIdGenerator, ;, this, ., variableMap, =, state, ., variableMap, ;]
[., exportedNames, ), ;, this, ., crossModuleIdGenerator, =, state, ., crossModuleIdGenerator, ;, this, ., variableMap, =, state, ., variableMap, ;]
[this, ., crossModuleIdGenerator, =, state, ., crossModuleIdGenerator, ;, this, ., variableMap, =, state, ., variableMap, ;, this, ., propertyMap, =]
[this, ., crossModuleIdGenerator, =, state, ., crossModuleIdGenerator, ;, this, ., variableMap, =, state, ., variableMap, ;, this, ., propertyMap, =]
[state, ., crossModuleIdGenerator, ;, this, ., variableMap, =, state, ., variableMap, ;, this, ., propertyMap, =, state, ., propertyMap, ;]
[state, ., crossModuleIdGenerator, ;, this, ., variableMap, =, state, ., variableMap, ;, this, ., propertyMap, =, state, ., propertyMap, ;]
[this, ., variableMap, =, state, ., variableMap, ;, this, ., propertyMap, =, state, ., propertyMap, ;, this, ., anonymousFunctionNameMap, =]
[this, ., variableMap, =, state, ., variableMap, ;, this, ., propertyMap, =, state, ., propertyMap, ;, this, ., anonymousFunctionNameMap, =]
[state, ., variableMap, ;, this, ., propertyMap, =, state, ., propertyMap, ;, this, ., anonymousFunctionNameMap, =, state, ., anonymousFunctionNameMap, ;]
[state, ., variableMap, ;, this, ., propertyMap, =, state, ., propertyMap, ;, this, ., anonymousFunctionNameMap, =, state, ., anonymousFunctionNameMap, ;]
[this, ., propertyMap, =, state, ., propertyMap, ;, this, ., anonymousFunctionNameMap, =, state, ., anonymousFunctionNameMap, ;, this, ., stringMap, =]
[this, ., propertyMap, =, state, ., propertyMap, ;, this, ., anonymousFunctionNameMap, =, state, ., anonymousFunctionNameMap, ;, this, ., stringMap, =]
[state, ., propertyMap, ;, this, ., anonymousFunctionNameMap, =, state, ., anonymousFunctionNameMap, ;, this, ., stringMap, =, state, ., stringMap, ;]
[state, ., propertyMap, ;, this, ., anonymousFunctionNameMap, =, state, ., anonymousFunctionNameMap, ;, this, ., stringMap, =, state, ., stringMap, ;]
[this, ., anonymousFunctionNameMap, =, state, ., anonymousFunctionNameMap, ;, this, ., stringMap, =, state, ., stringMap, ;, this, ., functionNames, =]
[this, ., anonymousFunctionNameMap, =, state, ., anonymousFunctionNameMap, ;, this, ., stringMap, =, state, ., stringMap, ;, this, ., functionNames, =]
[state, ., anonymousFunctionNameMap, ;, this, ., stringMap, =, state, ., stringMap, ;, this, ., functionNames, =, state, ., functionNames, ;]
[state, ., anonymousFunctionNameMap, ;, this, ., stringMap, =, state, ., stringMap, ;, this, ., functionNames, =, state, ., functionNames, ;]
[this, ., stringMap, =, state, ., stringMap, ;, this, ., functionNames, =, state, ., functionNames, ;, this, ., idGeneratorMap, =]
[this, ., stringMap, =, state, ., stringMap, ;, this, ., functionNames, =, state, ., functionNames, ;, this, ., idGeneratorMap, =]
[=, state, ., functionNames, ;, this, ., idGeneratorMap, =, state, ., idGeneratorMap, ;, }, GlobalNamespace, getGlobalNamespace, (, ), {, return]
[state, ., idGeneratorMap, ;, }, GlobalNamespace, getGlobalNamespace, (, ), {, return, namespaceForChecks, ;, }, PreprocessorSymbolTable, getPreprocessorSymbolTable, (, ), {, return]
[;, }, PreprocessorSymbolTable, getPreprocessorSymbolTable, (, ), {, return, preprocessorSymbolTable, ;, }, void, maybeInitializePreprocessorSymbolTable, (, AbstractCompiler, compiler, ), {, if, (]
[;, }, PreprocessorSymbolTable, getPreprocessorSymbolTable, (, ), {, return, preprocessorSymbolTable, ;, }, void, maybeInitializePreprocessorSymbolTable, (, AbstractCompiler, compiler, ), {, if, (]
[preprocessorSymbolTable, ;, }, void, maybeInitializePreprocessorSymbolTable, (, AbstractCompiler, compiler, ), {, if, (, options, ., ideMode, ), {, Node, root, =]
[preprocessorSymbolTable, ;, }, void, maybeInitializePreprocessorSymbolTable, (, AbstractCompiler, compiler, ), {, if, (, options, ., ideMode, ), {, Node, root, =]
[), {, if, (, options, ., ideMode, ), {, Node, root, =, compiler, ., getRoot, (, ), ;, if, (]
[), {, if, (, options, ., ideMode, ), {, Node, root, =, compiler, ., getRoot, (, ), ;, if, (]
[), {, if, (, options, ., ideMode, ), {, Node, root, =, compiler, ., getRoot, (, ), ;, if, (]
[if, (, options, ., ideMode, ), {, Node, root, =, compiler, ., getRoot, (, ), ;, if, (, preprocessorSymbolTable, ==]
[options, ., ideMode, ), {, Node, root, =, compiler, ., getRoot, (, ), ;, if, (, preprocessorSymbolTable, ==, null, ||]
[options, ., ideMode, ), {, Node, root, =, compiler, ., getRoot, (, ), ;, if, (, preprocessorSymbolTable, ==, null, ||]
[options, ., ideMode, ), {, Node, root, =, compiler, ., getRoot, (, ), ;, if, (, preprocessorSymbolTable, ==, null, ||]
[root, =, compiler, ., getRoot, (, ), ;, if, (, preprocessorSymbolTable, ==, null, ||, preprocessorSymbolTable, ., getRootNode, (, ), !=]
[., getRoot, (, ), ;, if, (, preprocessorSymbolTable, ==, null, ||, preprocessorSymbolTable, ., getRootNode, (, ), !=, root, ), {]
[(, ), ;, if, (, preprocessorSymbolTable, ==, null, ||, preprocessorSymbolTable, ., getRootNode, (, ), !=, root, ), {, preprocessorSymbolTable, =]
[if, (, preprocessorSymbolTable, ==, null, ||, preprocessorSymbolTable, ., getRootNode, (, ), !=, root, ), {, preprocessorSymbolTable, =, new, PreprocessorSymbolTable, (]
[}, }, }, @, Override, protected, List, <, PassFactory, >, getChecks, (, ), {, List, <, PassFactory, >, checks, =]
[}, }, }, @, Override, protected, List, <, PassFactory, >, getChecks, (, ), {, List, <, PassFactory, >, checks, =]
[List, <, PassFactory, >, getChecks, (, ), {, List, <, PassFactory, >, checks, =, Lists, ., newArrayList, (, ), ;]
[List, <, PassFactory, >, getChecks, (, ), {, List, <, PassFactory, >, checks, =, Lists, ., newArrayList, (, ), ;]
[getChecks, (, ), {, List, <, PassFactory, >, checks, =, Lists, ., newArrayList, (, ), ;, checks, ., add, (]
[), {, List, <, PassFactory, >, checks, =, Lists, ., newArrayList, (, ), ;, checks, ., add, (, createEmptyPass, (]
[checks, =, Lists, ., newArrayList, (, ), ;, checks, ., add, (, createEmptyPass, (, "beforeStandardChecks", ), ), ;, if, (]
[checks, =, Lists, ., newArrayList, (, ), ;, checks, ., add, (, createEmptyPass, (, "beforeStandardChecks", ), ), ;, if, (]
[(, ), ;, checks, ., add, (, createEmptyPass, (, "beforeStandardChecks", ), ), ;, if, (, options, ., closurePass, ), {]
[(, ), ;, checks, ., add, (, createEmptyPass, (, "beforeStandardChecks", ), ), ;, if, (, options, ., closurePass, ), {]
[., add, (, createEmptyPass, (, "beforeStandardChecks", ), ), ;, if, (, options, ., closurePass, ), {, checks, ., add, (]
[createEmptyPass, (, "beforeStandardChecks", ), ), ;, if, (, options, ., closurePass, ), {, checks, ., add, (, closureGoogScopeAliases, ), ;]
[createEmptyPass, (, "beforeStandardChecks", ), ), ;, if, (, options, ., closurePass, ), {, checks, ., add, (, closureGoogScopeAliases, ), ;]
[), ;, if, (, options, ., closurePass, ), {, checks, ., add, (, closureGoogScopeAliases, ), ;, checks, ., add, (]
[closurePass, ), {, checks, ., add, (, closureGoogScopeAliases, ), ;, checks, ., add, (, closureRewriteGoogClass, ), ;, }, if, (]
[closurePass, ), {, checks, ., add, (, closureGoogScopeAliases, ), ;, checks, ., add, (, closureRewriteGoogClass, ), ;, }, if, (]
[closureGoogScopeAliases, ), ;, checks, ., add, (, closureRewriteGoogClass, ), ;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, if, (]
[closureGoogScopeAliases, ), ;, checks, ., add, (, closureRewriteGoogClass, ), ;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, if, (]
[closureGoogScopeAliases, ), ;, checks, ., add, (, closureRewriteGoogClass, ), ;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, if, (]
[., add, (, closureRewriteGoogClass, ), ;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, if, (, options, ., anonymousFunctionNaming, ==]
[., add, (, closureRewriteGoogClass, ), ;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, if, (, options, ., anonymousFunctionNaming, ==]
[;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {]
[;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {]
[options, ., nameAnonymousFunctionsOnly, ), {, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {, checks, ., add, (]
[options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {, checks, ., add, (, nameMappedAnonymousFunctions, ), ;, }, else, if, (]
[options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {, checks, ., add, (, nameMappedAnonymousFunctions, ), ;, }, else, if, (]
[options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {, checks, ., add, (, nameMappedAnonymousFunctions, ), ;, }, else, if, (]
[AnonymousFunctionNamingPolicy, ., MAPPED, ), {, checks, ., add, (, nameMappedAnonymousFunctions, ), ;, }, else, if, (, options, ., anonymousFunctionNaming, ==]
[AnonymousFunctionNamingPolicy, ., MAPPED, ), {, checks, ., add, (, nameMappedAnonymousFunctions, ), ;, }, else, if, (, options, ., anonymousFunctionNaming, ==]
[checks, ., add, (, nameMappedAnonymousFunctions, ), ;, }, else, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {]
[checks, ., add, (, nameMappedAnonymousFunctions, ), ;, }, else, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {]
[nameMappedAnonymousFunctions, ), ;, }, else, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {, checks, ., add, (]
[if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {, checks, ., add, (, nameUnmappedAnonymousFunctions, ), ;, }, return]
[==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {, checks, ., add, (, nameUnmappedAnonymousFunctions, ), ;, }, return, checks, ;, }, if, (]
[==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {, checks, ., add, (, nameUnmappedAnonymousFunctions, ), ;, }, return, checks, ;, }, if, (]
[{, checks, ., add, (, nameUnmappedAnonymousFunctions, ), ;, }, return, checks, ;, }, if, (, options, ., jqueryPass, ), {]
[{, checks, ., add, (, nameUnmappedAnonymousFunctions, ), ;, }, return, checks, ;, }, if, (, options, ., jqueryPass, ), {]
[(, nameUnmappedAnonymousFunctions, ), ;, }, return, checks, ;, }, if, (, options, ., jqueryPass, ), {, checks, ., add, (]
[}, return, checks, ;, }, if, (, options, ., jqueryPass, ), {, checks, ., add, (, jqueryAliases, ), ;, }]
[}, return, checks, ;, }, if, (, options, ., jqueryPass, ), {, checks, ., add, (, jqueryAliases, ), ;, }]
[}, if, (, options, ., jqueryPass, ), {, checks, ., add, (, jqueryAliases, ), ;, }, checks, ., add, (]
[jqueryPass, ), {, checks, ., add, (, jqueryAliases, ), ;, }, checks, ., add, (, checkSideEffects, ), ;, if, (]
[jqueryPass, ), {, checks, ., add, (, jqueryAliases, ), ;, }, checks, ., add, (, checkSideEffects, ), ;, if, (]
[jqueryPass, ), {, checks, ., add, (, jqueryAliases, ), ;, }, checks, ., add, (, checkSideEffects, ), ;, if, (]
[jqueryPass, ), {, checks, ., add, (, jqueryAliases, ), ;, }, checks, ., add, (, checkSideEffects, ), ;, if, (]
[., add, (, jqueryAliases, ), ;, }, checks, ., add, (, checkSideEffects, ), ;, if, (, options, ., checkSuspiciousCode, ||]
[., add, (, jqueryAliases, ), ;, }, checks, ., add, (, checkSideEffects, ), ;, if, (, options, ., checkSuspiciousCode, ||]
[), ;, }, checks, ., add, (, checkSideEffects, ), ;, if, (, options, ., checkSuspiciousCode, ||, options, ., enables, (]
[), ;, }, checks, ., add, (, checkSideEffects, ), ;, if, (, options, ., checkSuspiciousCode, ||, options, ., enables, (]
[add, (, checkSideEffects, ), ;, if, (, options, ., checkSuspiciousCode, ||, options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ||]
[add, (, checkSideEffects, ), ;, if, (, options, ., checkSuspiciousCode, ||, options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ||]
[;, if, (, options, ., checkSuspiciousCode, ||, options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ||, options, ., enables, (]
[;, if, (, options, ., checkSuspiciousCode, ||, options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ||, options, ., enables, (]
[||, options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ||, options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {]
[||, options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ||, options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {]
[(, DiagnosticGroups, ., GLOBAL_THIS, ), ||, options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {, checks, ., add, (]
[options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {, checks, ., add, (, suspiciousCode, ), ;, }, if, (]
[options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {, checks, ., add, (, suspiciousCode, ), ;, }, if, (]
[options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {, checks, ., add, (, suspiciousCode, ), ;, }, if, (]
[DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {, checks, ., add, (, suspiciousCode, ), ;, }, if, (, options, ., checkControlStructures, ||]
[DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {, checks, ., add, (, suspiciousCode, ), ;, }, if, (, options, ., checkControlStructures, ||]
[), {, checks, ., add, (, suspiciousCode, ), ;, }, if, (, options, ., checkControlStructures, ||, options, ., enables, (]
[), {, checks, ., add, (, suspiciousCode, ), ;, }, if, (, options, ., checkControlStructures, ||, options, ., enables, (]
[suspiciousCode, ), ;, }, if, (, options, ., checkControlStructures, ||, options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, ), ), {]
[suspiciousCode, ), ;, }, if, (, options, ., checkControlStructures, ||, options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, ), ), {]
[if, (, options, ., checkControlStructures, ||, options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, ), ), {, checks, ., add, (]
[options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, ), ), {, checks, ., add, (, checkControlStructures, ), ;, }, if, (]
[options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, ), ), {, checks, ., add, (, checkControlStructures, ), ;, }, if, (]
[options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, ), ), {, checks, ., add, (, checkControlStructures, ), ;, }, if, (]
[{, checks, ., add, (, checkControlStructures, ), ;, }, if, (, options, ., checkRequires, ., isOn, (, ), ), {]
[{, checks, ., add, (, checkControlStructures, ), ;, }, if, (, options, ., checkRequires, ., isOn, (, ), ), {]
[(, checkControlStructures, ), ;, }, if, (, options, ., checkRequires, ., isOn, (, ), ), {, checks, ., add, (]
[(, options, ., checkRequires, ., isOn, (, ), ), {, checks, ., add, (, checkRequires, ), ;, }, if, (]
[(, options, ., checkRequires, ., isOn, (, ), ), {, checks, ., add, (, checkRequires, ), ;, }, if, (]
[(, options, ., checkRequires, ., isOn, (, ), ), {, checks, ., add, (, checkRequires, ), ;, }, if, (]
[{, checks, ., add, (, checkRequires, ), ;, }, if, (, options, ., checkProvides, ., isOn, (, ), ), {]
[{, checks, ., add, (, checkRequires, ), ;, }, if, (, options, ., checkProvides, ., isOn, (, ), ), {]
[(, checkRequires, ), ;, }, if, (, options, ., checkProvides, ., isOn, (, ), ), {, checks, ., add, (]
[(, options, ., checkProvides, ., isOn, (, ), ), {, checks, ., add, (, checkProvides, ), ;, }, if, (]
[(, options, ., checkProvides, ., isOn, (, ), ), {, checks, ., add, (, checkProvides, ), ;, }, if, (]
[isOn, (, ), ), {, checks, ., add, (, checkProvides, ), ;, }, if, (, options, ., generateExports, ), {]
[isOn, (, ), ), {, checks, ., add, (, checkProvides, ), ;, }, if, (, options, ., generateExports, ), {]
[{, checks, ., add, (, checkProvides, ), ;, }, if, (, options, ., generateExports, ), {, checks, ., add, (]
[), ;, }, if, (, options, ., generateExports, ), {, checks, ., add, (, generateExports, ), ;, }, if, (]
[), ;, }, if, (, options, ., generateExports, ), {, checks, ., add, (, generateExports, ), ;, }, if, (]
[options, ., generateExports, ), {, checks, ., add, (, generateExports, ), ;, }, if, (, options, ., exportTestFunctions, ), {]
[options, ., generateExports, ), {, checks, ., add, (, generateExports, ), ;, }, if, (, options, ., exportTestFunctions, ), {]
[{, checks, ., add, (, generateExports, ), ;, }, if, (, options, ., exportTestFunctions, ), {, checks, ., add, (]
[), ;, }, if, (, options, ., exportTestFunctions, ), {, checks, ., add, (, exportTestFunctions, ), ;, }, if, (]
[), ;, }, if, (, options, ., exportTestFunctions, ), {, checks, ., add, (, exportTestFunctions, ), ;, }, if, (]
[options, ., exportTestFunctions, ), {, checks, ., add, (, exportTestFunctions, ), ;, }, if, (, options, ., closurePass, ), {]
[options, ., exportTestFunctions, ), {, checks, ., add, (, exportTestFunctions, ), ;, }, if, (, options, ., closurePass, ), {]
[{, checks, ., add, (, exportTestFunctions, ), ;, }, if, (, options, ., closurePass, ), {, checks, ., add, (]
[), ;, }, if, (, options, ., closurePass, ), {, checks, ., add, (, closurePrimitives, ), ;, }, if, (]
[), ;, }, if, (, options, ., closurePass, ), {, checks, ., add, (, closurePrimitives, ), ;, }, if, (]
[), ;, }, if, (, options, ., closurePass, ), {, checks, ., add, (, closurePrimitives, ), ;, }, if, (]
[(, options, ., closurePass, ), {, checks, ., add, (, closurePrimitives, ), ;, }, if, (, options, ., closurePass, &&]
[(, options, ., closurePass, ), {, checks, ., add, (, closurePrimitives, ), ;, }, if, (, options, ., closurePass, &&]
[(, options, ., closurePass, ), {, checks, ., add, (, closurePrimitives, ), ;, }, if, (, options, ., closurePass, &&]
[(, closurePrimitives, ), ;, }, if, (, options, ., closurePass, &&, options, ., checkMissingGetCssNameLevel, ., isOn, (, ), ), {]
[(, closurePrimitives, ), ;, }, if, (, options, ., closurePass, &&, options, ., checkMissingGetCssNameLevel, ., isOn, (, ), ), {]
[}, if, (, options, ., closurePass, &&, options, ., checkMissingGetCssNameLevel, ., isOn, (, ), ), {, checks, ., add, (]
[&&, options, ., checkMissingGetCssNameLevel, ., isOn, (, ), ), {, checks, ., add, (, closureCheckGetCssName, ), ;, }, if, (]
[&&, options, ., checkMissingGetCssNameLevel, ., isOn, (, ), ), {, checks, ., add, (, closureCheckGetCssName, ), ;, }, if, (]
[&&, options, ., checkMissingGetCssNameLevel, ., isOn, (, ), ), {, checks, ., add, (, closureCheckGetCssName, ), ;, }, if, (]
[., isOn, (, ), ), {, checks, ., add, (, closureCheckGetCssName, ), ;, }, if, (, options, ., syntheticBlockStartMarker, !=]
[), ), {, checks, ., add, (, closureCheckGetCssName, ), ;, }, if, (, options, ., syntheticBlockStartMarker, !=, null, ), {]
[), ), {, checks, ., add, (, closureCheckGetCssName, ), ;, }, if, (, options, ., syntheticBlockStartMarker, !=, null, ), {]
[., add, (, closureCheckGetCssName, ), ;, }, if, (, options, ., syntheticBlockStartMarker, !=, null, ), {, checks, ., add, (]
[), ;, }, if, (, options, ., syntheticBlockStartMarker, !=, null, ), {, checks, ., add, (, createSyntheticBlocks, ), ;, }]
[), ;, }, if, (, options, ., syntheticBlockStartMarker, !=, null, ), {, checks, ., add, (, createSyntheticBlocks, ), ;, }]
[(, options, ., syntheticBlockStartMarker, !=, null, ), {, checks, ., add, (, createSyntheticBlocks, ), ;, }, checks, ., add, (]
[null, ), {, checks, ., add, (, createSyntheticBlocks, ), ;, }, checks, ., add, (, checkVars, ), ;, if, (]
[null, ), {, checks, ., add, (, createSyntheticBlocks, ), ;, }, checks, ., add, (, checkVars, ), ;, if, (]
[add, (, createSyntheticBlocks, ), ;, }, checks, ., add, (, checkVars, ), ;, if, (, options, ., computeFunctionSideEffects, ), {]
[add, (, createSyntheticBlocks, ), ;, }, checks, ., add, (, checkVars, ), ;, if, (, options, ., computeFunctionSideEffects, ), {]
[;, }, checks, ., add, (, checkVars, ), ;, if, (, options, ., computeFunctionSideEffects, ), {, checks, ., add, (]
[checkVars, ), ;, if, (, options, ., computeFunctionSideEffects, ), {, checks, ., add, (, checkRegExp, ), ;, }, if, (]
[checkVars, ), ;, if, (, options, ., computeFunctionSideEffects, ), {, checks, ., add, (, checkRegExp, ), ;, }, if, (]
[checkVars, ), ;, if, (, options, ., computeFunctionSideEffects, ), {, checks, ., add, (, checkRegExp, ), ;, }, if, (]
[{, checks, ., add, (, checkRegExp, ), ;, }, if, (, options, ., aggressiveVarCheck, ., isOn, (, ), ), {]
[{, checks, ., add, (, checkRegExp, ), ;, }, if, (, options, ., aggressiveVarCheck, ., isOn, (, ), ), {]
[(, checkRegExp, ), ;, }, if, (, options, ., aggressiveVarCheck, ., isOn, (, ), ), {, checks, ., add, (]
[(, options, ., aggressiveVarCheck, ., isOn, (, ), ), {, checks, ., add, (, checkVariableReferences, ), ;, }, if, (]
[(, options, ., aggressiveVarCheck, ., isOn, (, ), ), {, checks, ., add, (, checkVariableReferences, ), ;, }, if, (]
[isOn, (, ), ), {, checks, ., add, (, checkVariableReferences, ), ;, }, if, (, options, ., processObjectPropertyString, ), {]
[isOn, (, ), ), {, checks, ., add, (, checkVariableReferences, ), ;, }, if, (, options, ., processObjectPropertyString, ), {]
[{, checks, ., add, (, checkVariableReferences, ), ;, }, if, (, options, ., processObjectPropertyString, ), {, checks, ., add, (]
[), ;, }, if, (, options, ., processObjectPropertyString, ), {, checks, ., add, (, objectPropertyStringPreprocess, ), ;, }, if, (]
[), ;, }, if, (, options, ., processObjectPropertyString, ), {, checks, ., add, (, objectPropertyStringPreprocess, ), ;, }, if, (]
[), ;, }, if, (, options, ., processObjectPropertyString, ), {, checks, ., add, (, objectPropertyStringPreprocess, ), ;, }, if, (]
[(, options, ., processObjectPropertyString, ), {, checks, ., add, (, objectPropertyStringPreprocess, ), ;, }, if, (, options, ., checkTypes, ||]
[(, options, ., processObjectPropertyString, ), {, checks, ., add, (, objectPropertyStringPreprocess, ), ;, }, if, (, options, ., checkTypes, ||]
[{, checks, ., add, (, objectPropertyStringPreprocess, ), ;, }, if, (, options, ., checkTypes, ||, options, ., inferTypes, ), {]
[{, checks, ., add, (, objectPropertyStringPreprocess, ), ;, }, if, (, options, ., checkTypes, ||, options, ., inferTypes, ), {]
[(, objectPropertyStringPreprocess, ), ;, }, if, (, options, ., checkTypes, ||, options, ., inferTypes, ), {, checks, ., add, (]
[;, }, if, (, options, ., checkTypes, ||, options, ., inferTypes, ), {, checks, ., add, (, resolveTypes, ), ;]
[;, }, if, (, options, ., checkTypes, ||, options, ., inferTypes, ), {, checks, ., add, (, resolveTypes, ), ;]
[options, ., checkTypes, ||, options, ., inferTypes, ), {, checks, ., add, (, resolveTypes, ), ;, checks, ., add, (]
[., inferTypes, ), {, checks, ., add, (, resolveTypes, ), ;, checks, ., add, (, inferTypes, ), ;, if, (]
[., inferTypes, ), {, checks, ., add, (, resolveTypes, ), ;, checks, ., add, (, inferTypes, ), ;, if, (]
[., add, (, resolveTypes, ), ;, checks, ., add, (, inferTypes, ), ;, if, (, options, ., checkTypes, ), {]
[., add, (, resolveTypes, ), ;, checks, ., add, (, inferTypes, ), ;, if, (, options, ., checkTypes, ), {]
[), ;, checks, ., add, (, inferTypes, ), ;, if, (, options, ., checkTypes, ), {, checks, ., add, (]
[inferTypes, ), ;, if, (, options, ., checkTypes, ), {, checks, ., add, (, checkTypes, ), ;, }, else, {]
[inferTypes, ), ;, if, (, options, ., checkTypes, ), {, checks, ., add, (, checkTypes, ), ;, }, else, {]
[(, options, ., checkTypes, ), {, checks, ., add, (, checkTypes, ), ;, }, else, {, checks, ., add, (]
[checks, ., add, (, checkTypes, ), ;, }, else, {, checks, ., add, (, inferJsDocInfo, ), ;, }, if, (]
[checks, ., add, (, checkTypes, ), ;, }, else, {, checks, ., add, (, inferJsDocInfo, ), ;, }, if, (]
[., add, (, checkTypes, ), ;, }, else, {, checks, ., add, (, inferJsDocInfo, ), ;, }, if, (, !]
[., add, (, checkTypes, ), ;, }, else, {, checks, ., add, (, inferJsDocInfo, ), ;, }, if, (, !]
[), ;, }, else, {, checks, ., add, (, inferJsDocInfo, ), ;, }, if, (, !, options, ., ideMode, &&]
[;, }, else, {, checks, ., add, (, inferJsDocInfo, ), ;, }, if, (, !, options, ., ideMode, &&, !]
[;, }, else, {, checks, ., add, (, inferJsDocInfo, ), ;, }, if, (, !, options, ., ideMode, &&, !]
[., add, (, inferJsDocInfo, ), ;, }, if, (, !, options, ., ideMode, &&, !, options, ., saveDataStructures, ), {]
[., add, (, inferJsDocInfo, ), ;, }, if, (, !, options, ., ideMode, &&, !, options, ., saveDataStructures, ), {]
[), ;, }, if, (, !, options, ., ideMode, &&, !, options, ., saveDataStructures, ), {, checks, ., add, (]
[., ideMode, &&, !, options, ., saveDataStructures, ), {, checks, ., add, (, clearTypedScopePass, ), ;, }, }, if, (]
[., ideMode, &&, !, options, ., saveDataStructures, ), {, checks, ., add, (, clearTypedScopePass, ), ;, }, }, if, (]
[., ideMode, &&, !, options, ., saveDataStructures, ), {, checks, ., add, (, clearTypedScopePass, ), ;, }, }, if, (]
[., ideMode, &&, !, options, ., saveDataStructures, ), {, checks, ., add, (, clearTypedScopePass, ), ;, }, }, if, (]
[{, checks, ., add, (, clearTypedScopePass, ), ;, }, }, if, (, options, ., checkUnreachableCode, ., isOn, (, ), ||]
[checks, ., add, (, clearTypedScopePass, ), ;, }, }, if, (, options, ., checkUnreachableCode, ., isOn, (, ), ||, (]
[checks, ., add, (, clearTypedScopePass, ), ;, }, }, if, (, options, ., checkUnreachableCode, ., isOn, (, ), ||, (]
[checks, ., add, (, clearTypedScopePass, ), ;, }, }, if, (, options, ., checkUnreachableCode, ., isOn, (, ), ||, (]
[clearTypedScopePass, ), ;, }, }, if, (, options, ., checkUnreachableCode, ., isOn, (, ), ||, (, options, ., checkTypes, &&]
[clearTypedScopePass, ), ;, }, }, if, (, options, ., checkUnreachableCode, ., isOn, (, ), ||, (, options, ., checkTypes, &&]
[clearTypedScopePass, ), ;, }, }, if, (, options, ., checkUnreachableCode, ., isOn, (, ), ||, (, options, ., checkTypes, &&]
[., isOn, (, ), ||, (, options, ., checkTypes, &&, options, ., checkMissingReturn, ., isOn, (, ), ), ), {]
[., isOn, (, ), ||, (, options, ., checkTypes, &&, options, ., checkMissingReturn, ., isOn, (, ), ), ), {]
[||, (, options, ., checkTypes, &&, options, ., checkMissingReturn, ., isOn, (, ), ), ), {, checks, ., add, (]
[options, ., checkMissingReturn, ., isOn, (, ), ), ), {, checks, ., add, (, checkControlFlow, ), ;, }, if, (]
[options, ., checkMissingReturn, ., isOn, (, ), ), ), {, checks, ., add, (, checkControlFlow, ), ;, }, if, (]
[options, ., checkMissingReturn, ., isOn, (, ), ), ), {, checks, ., add, (, checkControlFlow, ), ;, }, if, (]
[isOn, (, ), ), ), {, checks, ., add, (, checkControlFlow, ), ;, }, if, (, options, ., checkTypes, &&]
[(, ), ), ), {, checks, ., add, (, checkControlFlow, ), ;, }, if, (, options, ., checkTypes, &&, (]
[(, ), ), ), {, checks, ., add, (, checkControlFlow, ), ;, }, if, (, options, ., checkTypes, &&, (]
[(, ), ), ), {, checks, ., add, (, checkControlFlow, ), ;, }, if, (, options, ., checkTypes, &&, (]
[{, checks, ., add, (, checkControlFlow, ), ;, }, if, (, options, ., checkTypes, &&, (, options, ., enables, (]
[{, checks, ., add, (, checkControlFlow, ), ;, }, if, (, options, ., checkTypes, &&, (, options, ., enables, (]
[checkControlFlow, ), ;, }, if, (, options, ., checkTypes, &&, (, options, ., enables, (, DiagnosticGroups, ., ACCESS_CONTROLS, ), ||]
[checkControlFlow, ), ;, }, if, (, options, ., checkTypes, &&, (, options, ., enables, (, DiagnosticGroups, ., ACCESS_CONTROLS, ), ||]
[if, (, options, ., checkTypes, &&, (, options, ., enables, (, DiagnosticGroups, ., ACCESS_CONTROLS, ), ||, options, ., enables, (]
[if, (, options, ., checkTypes, &&, (, options, ., enables, (, DiagnosticGroups, ., ACCESS_CONTROLS, ), ||, options, ., enables, (]
[options, ., enables, (, DiagnosticGroups, ., ACCESS_CONTROLS, ), ||, options, ., enables, (, DiagnosticGroups, ., CONSTANT_PROPERTY, ), ), ), {]
[options, ., enables, (, DiagnosticGroups, ., ACCESS_CONTROLS, ), ||, options, ., enables, (, DiagnosticGroups, ., CONSTANT_PROPERTY, ), ), ), {]
[DiagnosticGroups, ., ACCESS_CONTROLS, ), ||, options, ., enables, (, DiagnosticGroups, ., CONSTANT_PROPERTY, ), ), ), {, checks, ., add, (]
[., enables, (, DiagnosticGroups, ., CONSTANT_PROPERTY, ), ), ), {, checks, ., add, (, checkAccessControls, ), ;, }, if, (]
[., enables, (, DiagnosticGroups, ., CONSTANT_PROPERTY, ), ), ), {, checks, ., add, (, checkAccessControls, ), ;, }, if, (]
[., enables, (, DiagnosticGroups, ., CONSTANT_PROPERTY, ), ), ), {, checks, ., add, (, checkAccessControls, ), ;, }, if, (]
[{, checks, ., add, (, checkAccessControls, ), ;, }, if, (, options, ., checkGlobalNamesLevel, ., isOn, (, ), ), {]
[{, checks, ., add, (, checkAccessControls, ), ;, }, if, (, options, ., checkGlobalNamesLevel, ., isOn, (, ), ), {]
[(, checkAccessControls, ), ;, }, if, (, options, ., checkGlobalNamesLevel, ., isOn, (, ), ), {, checks, ., add, (]
[(, options, ., checkGlobalNamesLevel, ., isOn, (, ), ), {, checks, ., add, (, checkGlobalNames, ), ;, }, if, (]
[(, options, ., checkGlobalNamesLevel, ., isOn, (, ), ), {, checks, ., add, (, checkGlobalNames, ), ;, }, if, (]
[(, options, ., checkGlobalNamesLevel, ., isOn, (, ), ), {, checks, ., add, (, checkGlobalNames, ), ;, }, if, (]
[., isOn, (, ), ), {, checks, ., add, (, checkGlobalNames, ), ;, }, if, (, options, ., enables, (]
[., isOn, (, ), ), {, checks, ., add, (, checkGlobalNames, ), ;, }, if, (, options, ., enables, (]
[{, checks, ., add, (, checkGlobalNames, ), ;, }, if, (, options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, ), ||]
[{, checks, ., add, (, checkGlobalNames, ), ;, }, if, (, options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, ), ||]
[checkGlobalNames, ), ;, }, if, (, options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, ), ||, options, ., checkCaja, ), {]
[checkGlobalNames, ), ;, }, if, (, options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, ), ||, options, ., checkCaja, ), {]
[if, (, options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, ), ||, options, ., checkCaja, ), {, checks, ., add, (]
[DiagnosticGroups, ., ES5_STRICT, ), ||, options, ., checkCaja, ), {, checks, ., add, (, checkStrictMode, ), ;, }, if, (]
[DiagnosticGroups, ., ES5_STRICT, ), ||, options, ., checkCaja, ), {, checks, ., add, (, checkStrictMode, ), ;, }, if, (]
[options, ., checkCaja, ), {, checks, ., add, (, checkStrictMode, ), ;, }, if, (, options, ., closurePass, ), {]
[options, ., checkCaja, ), {, checks, ., add, (, checkStrictMode, ), ;, }, if, (, options, ., closurePass, ), {]
[{, checks, ., add, (, checkStrictMode, ), ;, }, if, (, options, ., closurePass, ), {, checks, ., add, (]
[), ;, }, if, (, options, ., closurePass, ), {, checks, ., add, (, closureReplaceGetCssName, ), ;, }, if, (]
[), ;, }, if, (, options, ., closurePass, ), {, checks, ., add, (, closureReplaceGetCssName, ), ;, }, if, (]
[options, ., closurePass, ), {, checks, ., add, (, closureReplaceGetCssName, ), ;, }, if, (, options, ., replaceMessagesWithChromeI18n, ), {]
[options, ., closurePass, ), {, checks, ., add, (, closureReplaceGetCssName, ), ;, }, if, (, options, ., replaceMessagesWithChromeI18n, ), {]
[{, checks, ., add, (, closureReplaceGetCssName, ), ;, }, if, (, options, ., replaceMessagesWithChromeI18n, ), {, checks, ., add, (]
[;, }, if, (, options, ., replaceMessagesWithChromeI18n, ), {, checks, ., add, (, replaceMessagesForChrome, ), ;, }, else, if, (]
[;, }, if, (, options, ., replaceMessagesWithChromeI18n, ), {, checks, ., add, (, replaceMessagesForChrome, ), ;, }, else, if, (]
[;, }, if, (, options, ., replaceMessagesWithChromeI18n, ), {, checks, ., add, (, replaceMessagesForChrome, ), ;, }, else, if, (]
[options, ., replaceMessagesWithChromeI18n, ), {, checks, ., add, (, replaceMessagesForChrome, ), ;, }, else, if, (, options, ., messageBundle, !=]
[), {, checks, ., add, (, replaceMessagesForChrome, ), ;, }, else, if, (, options, ., messageBundle, !=, null, ), {]
[), {, checks, ., add, (, replaceMessagesForChrome, ), ;, }, else, if, (, options, ., messageBundle, !=, null, ), {]
[add, (, replaceMessagesForChrome, ), ;, }, else, if, (, options, ., messageBundle, !=, null, ), {, checks, ., add, (]
[else, if, (, options, ., messageBundle, !=, null, ), {, checks, ., add, (, replaceMessages, ), ;, }, if, (]
[else, if, (, options, ., messageBundle, !=, null, ), {, checks, ., add, (, replaceMessages, ), ;, }, if, (]
[else, if, (, options, ., messageBundle, !=, null, ), {, checks, ., add, (, replaceMessages, ), ;, }, if, (]
[., add, (, replaceMessages, ), ;, }, if, (, options, ., getTweakProcessing, (, ), ., isOn, (, ), ), {]
[., add, (, replaceMessages, ), ;, }, if, (, options, ., getTweakProcessing, (, ), ., isOn, (, ), ), {]
[), ;, }, if, (, options, ., getTweakProcessing, (, ), ., isOn, (, ), ), {, checks, ., add, (]
[(, options, ., getTweakProcessing, (, ), ., isOn, (, ), ), {, checks, ., add, (, processTweaks, ), ;, }]
[(, options, ., getTweakProcessing, (, ), ., isOn, (, ), ), {, checks, ., add, (, processTweaks, ), ;, }]
[(, ), ., isOn, (, ), ), {, checks, ., add, (, processTweaks, ), ;, }, checks, ., add, (]
[), ), {, checks, ., add, (, processTweaks, ), ;, }, checks, ., add, (, processDefines, ), ;, if, (]
[), ), {, checks, ., add, (, processTweaks, ), ;, }, checks, ., add, (, processDefines, ), ;, if, (]
[), ), {, checks, ., add, (, processTweaks, ), ;, }, checks, ., add, (, processDefines, ), ;, if, (]
[), ), {, checks, ., add, (, processTweaks, ), ;, }, checks, ., add, (, processDefines, ), ;, if, (]
[., add, (, processTweaks, ), ;, }, checks, ., add, (, processDefines, ), ;, if, (, options, ., instrumentationTemplate, !=]
[(, processTweaks, ), ;, }, checks, ., add, (, processDefines, ), ;, if, (, options, ., instrumentationTemplate, !=, null, ||]
[(, processTweaks, ), ;, }, checks, ., add, (, processDefines, ), ;, if, (, options, ., instrumentationTemplate, !=, null, ||]
[checks, ., add, (, processDefines, ), ;, if, (, options, ., instrumentationTemplate, !=, null, ||, options, ., recordFunctionInformation, ), {]
[checks, ., add, (, processDefines, ), ;, if, (, options, ., instrumentationTemplate, !=, null, ||, options, ., recordFunctionInformation, ), {]
[processDefines, ), ;, if, (, options, ., instrumentationTemplate, !=, null, ||, options, ., recordFunctionInformation, ), {, checks, ., add, (]
[., instrumentationTemplate, !=, null, ||, options, ., recordFunctionInformation, ), {, checks, ., add, (, computeFunctionNames, ), ;, }, if, (]
[., instrumentationTemplate, !=, null, ||, options, ., recordFunctionInformation, ), {, checks, ., add, (, computeFunctionNames, ), ;, }, if, (]
[., instrumentationTemplate, !=, null, ||, options, ., recordFunctionInformation, ), {, checks, ., add, (, computeFunctionNames, ), ;, }, if, (]
[., instrumentationTemplate, !=, null, ||, options, ., recordFunctionInformation, ), {, checks, ., add, (, computeFunctionNames, ), ;, }, if, (]
[||, options, ., recordFunctionInformation, ), {, checks, ., add, (, computeFunctionNames, ), ;, }, if, (, options, ., nameReferenceGraphPath, !=]
[., recordFunctionInformation, ), {, checks, ., add, (, computeFunctionNames, ), ;, }, if, (, options, ., nameReferenceGraphPath, !=, null, &&]
[recordFunctionInformation, ), {, checks, ., add, (, computeFunctionNames, ), ;, }, if, (, options, ., nameReferenceGraphPath, !=, null, &&, !]
[recordFunctionInformation, ), {, checks, ., add, (, computeFunctionNames, ), ;, }, if, (, options, ., nameReferenceGraphPath, !=, null, &&, !]
[recordFunctionInformation, ), {, checks, ., add, (, computeFunctionNames, ), ;, }, if, (, options, ., nameReferenceGraphPath, !=, null, &&, !]
[;, }, if, (, options, ., nameReferenceGraphPath, !=, null, &&, !, options, ., nameReferenceGraphPath, ., isEmpty, (, ), ), {]
[;, }, if, (, options, ., nameReferenceGraphPath, !=, null, &&, !, options, ., nameReferenceGraphPath, ., isEmpty, (, ), ), {]
[options, ., nameReferenceGraphPath, !=, null, &&, !, options, ., nameReferenceGraphPath, ., isEmpty, (, ), ), {, checks, ., add, (]
[!, options, ., nameReferenceGraphPath, ., isEmpty, (, ), ), {, checks, ., add, (, printNameReferenceGraph, ), ;, }, if, (]
[!, options, ., nameReferenceGraphPath, ., isEmpty, (, ), ), {, checks, ., add, (, printNameReferenceGraph, ), ;, }, if, (]
[!, options, ., nameReferenceGraphPath, ., isEmpty, (, ), ), {, checks, ., add, (, printNameReferenceGraph, ), ;, }, if, (]
[!, options, ., nameReferenceGraphPath, ., isEmpty, (, ), ), {, checks, ., add, (, printNameReferenceGraph, ), ;, }, if, (]
[., isEmpty, (, ), ), {, checks, ., add, (, printNameReferenceGraph, ), ;, }, if, (, options, ., nameReferenceReportPath, !=]
[(, ), ), {, checks, ., add, (, printNameReferenceGraph, ), ;, }, if, (, options, ., nameReferenceReportPath, !=, null, &&]
[), ), {, checks, ., add, (, printNameReferenceGraph, ), ;, }, if, (, options, ., nameReferenceReportPath, !=, null, &&, !]
[), ), {, checks, ., add, (, printNameReferenceGraph, ), ;, }, if, (, options, ., nameReferenceReportPath, !=, null, &&, !]
[), ), {, checks, ., add, (, printNameReferenceGraph, ), ;, }, if, (, options, ., nameReferenceReportPath, !=, null, &&, !]
[;, }, if, (, options, ., nameReferenceReportPath, !=, null, &&, !, options, ., nameReferenceReportPath, ., isEmpty, (, ), ), {]
[;, }, if, (, options, ., nameReferenceReportPath, !=, null, &&, !, options, ., nameReferenceReportPath, ., isEmpty, (, ), ), {]
[options, ., nameReferenceReportPath, !=, null, &&, !, options, ., nameReferenceReportPath, ., isEmpty, (, ), ), {, checks, ., add, (]
[null, &&, !, options, ., nameReferenceReportPath, ., isEmpty, (, ), ), {, checks, ., add, (, printNameReferenceReport, ), ;, }]
[null, &&, !, options, ., nameReferenceReportPath, ., isEmpty, (, ), ), {, checks, ., add, (, printNameReferenceReport, ), ;, }]
[., nameReferenceReportPath, ., isEmpty, (, ), ), {, checks, ., add, (, printNameReferenceReport, ), ;, }, checks, ., add, (]
[., isEmpty, (, ), ), {, checks, ., add, (, printNameReferenceReport, ), ;, }, checks, ., add, (, createEmptyPass, (]
[), {, checks, ., add, (, printNameReferenceReport, ), ;, }, checks, ., add, (, createEmptyPass, (, "afterStandardChecks", ), ), ;]
[checks, ., add, (, printNameReferenceReport, ), ;, }, checks, ., add, (, createEmptyPass, (, "afterStandardChecks", ), ), ;, assertAllOneTimePasses, (]
[printNameReferenceReport, ), ;, }, checks, ., add, (, createEmptyPass, (, "afterStandardChecks", ), ), ;, assertAllOneTimePasses, (, checks, ), ;, return]
[checks, ;, }, @, Override, protected, List, <, PassFactory, >, getOptimizations, (, ), {, List, <, PassFactory, >, passes, =]
[checks, ;, }, @, Override, protected, List, <, PassFactory, >, getOptimizations, (, ), {, List, <, PassFactory, >, passes, =]
[List, <, PassFactory, >, getOptimizations, (, ), {, List, <, PassFactory, >, passes, =, Lists, ., newArrayList, (, ), ;]
[List, <, PassFactory, >, getOptimizations, (, ), {, List, <, PassFactory, >, passes, =, Lists, ., newArrayList, (, ), ;]
[getOptimizations, (, ), {, List, <, PassFactory, >, passes, =, Lists, ., newArrayList, (, ), ;, passes, ., add, (]
[<, PassFactory, >, passes, =, Lists, ., newArrayList, (, ), ;, passes, ., add, (, garbageCollectChecks, ), ;, if, (]
[<, PassFactory, >, passes, =, Lists, ., newArrayList, (, ), ;, passes, ., add, (, garbageCollectChecks, ), ;, if, (]
[Lists, ., newArrayList, (, ), ;, passes, ., add, (, garbageCollectChecks, ), ;, if, (, options, ., runtimeTypeCheck, ), {]
[Lists, ., newArrayList, (, ), ;, passes, ., add, (, garbageCollectChecks, ), ;, if, (, options, ., runtimeTypeCheck, ), {]
[), ;, passes, ., add, (, garbageCollectChecks, ), ;, if, (, options, ., runtimeTypeCheck, ), {, passes, ., add, (]
[add, (, garbageCollectChecks, ), ;, if, (, options, ., runtimeTypeCheck, ), {, passes, ., add, (, runtimeTypeCheck, ), ;, }]
[add, (, garbageCollectChecks, ), ;, if, (, options, ., runtimeTypeCheck, ), {, passes, ., add, (, runtimeTypeCheck, ), ;, }]
[;, if, (, options, ., runtimeTypeCheck, ), {, passes, ., add, (, runtimeTypeCheck, ), ;, }, passes, ., add, (]
[(, options, ., runtimeTypeCheck, ), {, passes, ., add, (, runtimeTypeCheck, ), ;, }, passes, ., add, (, createEmptyPass, (]
[passes, ., add, (, runtimeTypeCheck, ), ;, }, passes, ., add, (, createEmptyPass, (, "beforeStandardOptimizations", ), ), ;, if, (]
[passes, ., add, (, runtimeTypeCheck, ), ;, }, passes, ., add, (, createEmptyPass, (, "beforeStandardOptimizations", ), ), ;, if, (]
[), ;, }, passes, ., add, (, createEmptyPass, (, "beforeStandardOptimizations", ), ), ;, if, (, options, ., replaceIdGenerators, ), {]
[), ;, }, passes, ., add, (, createEmptyPass, (, "beforeStandardOptimizations", ), ), ;, if, (, options, ., replaceIdGenerators, ), {]
[., add, (, createEmptyPass, (, "beforeStandardOptimizations", ), ), ;, if, (, options, ., replaceIdGenerators, ), {, passes, ., add, (]
[), ), ;, if, (, options, ., replaceIdGenerators, ), {, passes, ., add, (, replaceIdGenerators, ), ;, }, if, (]
[), ), ;, if, (, options, ., replaceIdGenerators, ), {, passes, ., add, (, replaceIdGenerators, ), ;, }, if, (]
[options, ., replaceIdGenerators, ), {, passes, ., add, (, replaceIdGenerators, ), ;, }, if, (, options, ., optimizeArgumentsArray, ), {]
[options, ., replaceIdGenerators, ), {, passes, ., add, (, replaceIdGenerators, ), ;, }, if, (, options, ., optimizeArgumentsArray, ), {]
[{, passes, ., add, (, replaceIdGenerators, ), ;, }, if, (, options, ., optimizeArgumentsArray, ), {, passes, ., add, (]
[), ;, }, if, (, options, ., optimizeArgumentsArray, ), {, passes, ., add, (, optimizeArgumentsArray, ), ;, }, if, (]
[), ;, }, if, (, options, ., optimizeArgumentsArray, ), {, passes, ., add, (, optimizeArgumentsArray, ), ;, }, if, (]
[), ;, }, if, (, options, ., optimizeArgumentsArray, ), {, passes, ., add, (, optimizeArgumentsArray, ), ;, }, if, (]
[(, options, ., optimizeArgumentsArray, ), {, passes, ., add, (, optimizeArgumentsArray, ), ;, }, if, (, options, ., closurePass, &&]
[options, ., optimizeArgumentsArray, ), {, passes, ., add, (, optimizeArgumentsArray, ), ;, }, if, (, options, ., closurePass, &&, (]
[options, ., optimizeArgumentsArray, ), {, passes, ., add, (, optimizeArgumentsArray, ), ;, }, if, (, options, ., closurePass, &&, (]
[options, ., optimizeArgumentsArray, ), {, passes, ., add, (, optimizeArgumentsArray, ), ;, }, if, (, options, ., closurePass, &&, (]
[{, passes, ., add, (, optimizeArgumentsArray, ), ;, }, if, (, options, ., closurePass, &&, (, options, ., removeAbstractMethods, ||]
[{, passes, ., add, (, optimizeArgumentsArray, ), ;, }, if, (, options, ., closurePass, &&, (, options, ., removeAbstractMethods, ||]
[), ;, }, if, (, options, ., closurePass, &&, (, options, ., removeAbstractMethods, ||, options, ., removeClosureAsserts, ), ), {]
[), ;, }, if, (, options, ., closurePass, &&, (, options, ., removeAbstractMethods, ||, options, ., removeClosureAsserts, ), ), {]
[(, options, ., closurePass, &&, (, options, ., removeAbstractMethods, ||, options, ., removeClosureAsserts, ), ), {, passes, ., add, (]
[options, ., removeAbstractMethods, ||, options, ., removeClosureAsserts, ), ), {, passes, ., add, (, closureCodeRemoval, ), ;, }, if, (]
[options, ., removeAbstractMethods, ||, options, ., removeClosureAsserts, ), ), {, passes, ., add, (, closureCodeRemoval, ), ;, }, if, (]
[., removeClosureAsserts, ), ), {, passes, ., add, (, closureCodeRemoval, ), ;, }, if, (, options, ., collapseProperties, ), {]
[., removeClosureAsserts, ), ), {, passes, ., add, (, closureCodeRemoval, ), ;, }, if, (, options, ., collapseProperties, ), {]
[{, passes, ., add, (, closureCodeRemoval, ), ;, }, if, (, options, ., collapseProperties, ), {, passes, ., add, (]
[), ;, }, if, (, options, ., collapseProperties, ), {, passes, ., add, (, collapseProperties, ), ;, }, if, (]
[;, }, if, (, options, ., collapseProperties, ), {, passes, ., add, (, collapseProperties, ), ;, }, if, (, !]
[;, }, if, (, options, ., collapseProperties, ), {, passes, ., add, (, collapseProperties, ), ;, }, if, (, !]
[;, }, if, (, options, ., collapseProperties, ), {, passes, ., add, (, collapseProperties, ), ;, }, if, (, !]
[passes, ., add, (, collapseProperties, ), ;, }, if, (, !, options, ., replaceStringsFunctionDescriptions, ., isEmpty, (, ), ), {]
[passes, ., add, (, collapseProperties, ), ;, }, if, (, !, options, ., replaceStringsFunctionDescriptions, ., isEmpty, (, ), ), {]
[collapseProperties, ), ;, }, if, (, !, options, ., replaceStringsFunctionDescriptions, ., isEmpty, (, ), ), {, passes, ., add, (]
[!, options, ., replaceStringsFunctionDescriptions, ., isEmpty, (, ), ), {, passes, ., add, (, replaceStrings, ), ;, }, if, (]
[!, options, ., replaceStringsFunctionDescriptions, ., isEmpty, (, ), ), {, passes, ., add, (, replaceStrings, ), ;, }, if, (]
[isEmpty, (, ), ), {, passes, ., add, (, replaceStrings, ), ;, }, if, (, options, ., tightenTypes, ), {]
[isEmpty, (, ), ), {, passes, ., add, (, replaceStrings, ), ;, }, if, (, options, ., tightenTypes, ), {]
[{, passes, ., add, (, replaceStrings, ), ;, }, if, (, options, ., tightenTypes, ), {, passes, ., add, (]
[), ;, }, if, (, options, ., tightenTypes, ), {, passes, ., add, (, tightenTypesBuilder, ), ;, }, if, (]
[), ;, }, if, (, options, ., tightenTypes, ), {, passes, ., add, (, tightenTypesBuilder, ), ;, }, if, (]
[options, ., tightenTypes, ), {, passes, ., add, (, tightenTypesBuilder, ), ;, }, if, (, options, ., disambiguateProperties, ), {]
[options, ., tightenTypes, ), {, passes, ., add, (, tightenTypesBuilder, ), ;, }, if, (, options, ., disambiguateProperties, ), {]
[{, passes, ., add, (, tightenTypesBuilder, ), ;, }, if, (, options, ., disambiguateProperties, ), {, passes, ., add, (]
[), ;, }, if, (, options, ., disambiguateProperties, ), {, passes, ., add, (, disambiguateProperties, ), ;, }, if, (]
[), ;, }, if, (, options, ., disambiguateProperties, ), {, passes, ., add, (, disambiguateProperties, ), ;, }, if, (]
[options, ., disambiguateProperties, ), {, passes, ., add, (, disambiguateProperties, ), ;, }, if, (, options, ., computeFunctionSideEffects, ), {]
[options, ., disambiguateProperties, ), {, passes, ., add, (, disambiguateProperties, ), ;, }, if, (, options, ., computeFunctionSideEffects, ), {]
[{, passes, ., add, (, disambiguateProperties, ), ;, }, if, (, options, ., computeFunctionSideEffects, ), {, passes, ., add, (]
[;, }, if, (, options, ., computeFunctionSideEffects, ), {, passes, ., add, (, markPureFunctions, ), ;, }, else, if, (]
[;, }, if, (, options, ., computeFunctionSideEffects, ), {, passes, ., add, (, markPureFunctions, ), ;, }, else, if, (]
[., computeFunctionSideEffects, ), {, passes, ., add, (, markPureFunctions, ), ;, }, else, if, (, options, ., markNoSideEffectCalls, ), {]
[., computeFunctionSideEffects, ), {, passes, ., add, (, markPureFunctions, ), ;, }, else, if, (, options, ., markNoSideEffectCalls, ), {]
[passes, ., add, (, markPureFunctions, ), ;, }, else, if, (, options, ., markNoSideEffectCalls, ), {, passes, ., add, (]
[;, }, else, if, (, options, ., markNoSideEffectCalls, ), {, passes, ., add, (, markNoSideEffectCalls, ), ;, }, if, (]
[;, }, else, if, (, options, ., markNoSideEffectCalls, ), {, passes, ., add, (, markNoSideEffectCalls, ), ;, }, if, (]
[options, ., markNoSideEffectCalls, ), {, passes, ., add, (, markNoSideEffectCalls, ), ;, }, if, (, options, ., chainCalls, ), {]
[options, ., markNoSideEffectCalls, ), {, passes, ., add, (, markNoSideEffectCalls, ), ;, }, if, (, options, ., chainCalls, ), {]
[{, passes, ., add, (, markNoSideEffectCalls, ), ;, }, if, (, options, ., chainCalls, ), {, passes, ., add, (]
[(, markNoSideEffectCalls, ), ;, }, if, (, options, ., chainCalls, ), {, passes, ., add, (, chainCalls, ), ;, }]
[(, markNoSideEffectCalls, ), ;, }, if, (, options, ., chainCalls, ), {, passes, ., add, (, chainCalls, ), ;, }]
[}, if, (, options, ., chainCalls, ), {, passes, ., add, (, chainCalls, ), ;, }, passes, ., add, (]
[chainCalls, ), {, passes, ., add, (, chainCalls, ), ;, }, passes, ., add, (, checkConsts, ), ;, if, (]
[chainCalls, ), {, passes, ., add, (, chainCalls, ), ;, }, passes, ., add, (, checkConsts, ), ;, if, (]
[add, (, chainCalls, ), ;, }, passes, ., add, (, checkConsts, ), ;, if, (, options, ., ignoreCajaProperties, ), {]
[add, (, chainCalls, ), ;, }, passes, ., add, (, checkConsts, ), ;, if, (, options, ., ignoreCajaProperties, ), {]
[;, }, passes, ., add, (, checkConsts, ), ;, if, (, options, ., ignoreCajaProperties, ), {, passes, ., add, (]
[add, (, checkConsts, ), ;, if, (, options, ., ignoreCajaProperties, ), {, passes, ., add, (, ignoreCajaProperties, ), ;, }]
[checkConsts, ), ;, if, (, options, ., ignoreCajaProperties, ), {, passes, ., add, (, ignoreCajaProperties, ), ;, }, assertAllOneTimePasses, (]
[options, ., ignoreCajaProperties, ), {, passes, ., add, (, ignoreCajaProperties, ), ;, }, assertAllOneTimePasses, (, passes, ), ;, if, (]
[options, ., ignoreCajaProperties, ), {, passes, ., add, (, ignoreCajaProperties, ), ;, }, assertAllOneTimePasses, (, passes, ), ;, if, (]
[options, ., ignoreCajaProperties, ), {, passes, ., add, (, ignoreCajaProperties, ), ;, }, assertAllOneTimePasses, (, passes, ), ;, if, (]
[{, passes, ., add, (, ignoreCajaProperties, ), ;, }, assertAllOneTimePasses, (, passes, ), ;, if, (, options, ., smartNameRemoval, ||]
[{, passes, ., add, (, ignoreCajaProperties, ), ;, }, assertAllOneTimePasses, (, passes, ), ;, if, (, options, ., smartNameRemoval, ||]
[{, passes, ., add, (, ignoreCajaProperties, ), ;, }, assertAllOneTimePasses, (, passes, ), ;, if, (, options, ., smartNameRemoval, ||]
[(, ignoreCajaProperties, ), ;, }, assertAllOneTimePasses, (, passes, ), ;, if, (, options, ., smartNameRemoval, ||, options, ., reportPath, !=]
[;, }, assertAllOneTimePasses, (, passes, ), ;, if, (, options, ., smartNameRemoval, ||, options, ., reportPath, !=, null, ), {]
[;, }, assertAllOneTimePasses, (, passes, ), ;, if, (, options, ., smartNameRemoval, ||, options, ., reportPath, !=, null, ), {]
[passes, ), ;, if, (, options, ., smartNameRemoval, ||, options, ., reportPath, !=, null, ), {, passes, ., addAll, (]
[options, ., smartNameRemoval, ||, options, ., reportPath, !=, null, ), {, passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;]
[options, ., smartNameRemoval, ||, options, ., reportPath, !=, null, ), {, passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;]
[options, ., reportPath, !=, null, ), {, passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;, passes, ., add, (]
[{, passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;, passes, ., add, (, smartNamePass, ), ;, }, if, (]
[{, passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;, passes, ., add, (, smartNamePass, ), ;, }, if, (]
[getCodeRemovingPasses, (, ), ), ;, passes, ., add, (, smartNamePass, ), ;, }, if, (, options, ., closurePass, ), {]
[getCodeRemovingPasses, (, ), ), ;, passes, ., add, (, smartNamePass, ), ;, }, if, (, options, ., closurePass, ), {]
[;, passes, ., add, (, smartNamePass, ), ;, }, if, (, options, ., closurePass, ), {, passes, ., add, (]
[), ;, }, if, (, options, ., closurePass, ), {, passes, ., add, (, closureOptimizePrimitives, ), ;, }, if, (]
[), ;, }, if, (, options, ., closurePass, ), {, passes, ., add, (, closureOptimizePrimitives, ), ;, }, if, (]
[options, ., closurePass, ), {, passes, ., add, (, closureOptimizePrimitives, ), ;, }, if, (, options, ., crossModuleCodeMotion, ), {]
[options, ., closurePass, ), {, passes, ., add, (, closureOptimizePrimitives, ), ;, }, if, (, options, ., crossModuleCodeMotion, ), {]
[{, passes, ., add, (, closureOptimizePrimitives, ), ;, }, if, (, options, ., crossModuleCodeMotion, ), {, passes, ., add, (]
[), ;, }, if, (, options, ., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (]
[), ;, }, if, (, options, ., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (]
[options, ., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (, options, ., devirtualizePrototypeMethods, ), {]
[options, ., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (, options, ., devirtualizePrototypeMethods, ), {]
[{, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (, options, ., devirtualizePrototypeMethods, ), {, passes, ., add, (]
[), ;, }, if, (, options, ., devirtualizePrototypeMethods, ), {, passes, ., add, (, devirtualizePrototypeMethods, ), ;, }, if, (]
[), ;, }, if, (, options, ., devirtualizePrototypeMethods, ), {, passes, ., add, (, devirtualizePrototypeMethods, ), ;, }, if, (]
[), ;, }, if, (, options, ., devirtualizePrototypeMethods, ), {, passes, ., add, (, devirtualizePrototypeMethods, ), ;, }, if, (]
[(, options, ., devirtualizePrototypeMethods, ), {, passes, ., add, (, devirtualizePrototypeMethods, ), ;, }, if, (, options, ., customPasses, !=]
[devirtualizePrototypeMethods, ), {, passes, ., add, (, devirtualizePrototypeMethods, ), ;, }, if, (, options, ., customPasses, !=, null, ), {]
[devirtualizePrototypeMethods, ), {, passes, ., add, (, devirtualizePrototypeMethods, ), ;, }, if, (, options, ., customPasses, !=, null, ), {]
[., add, (, devirtualizePrototypeMethods, ), ;, }, if, (, options, ., customPasses, !=, null, ), {, passes, ., add, (]
[(, devirtualizePrototypeMethods, ), ;, }, if, (, options, ., customPasses, !=, null, ), {, passes, ., add, (, getCustomPasses, (]
[(, devirtualizePrototypeMethods, ), ;, }, if, (, options, ., customPasses, !=, null, ), {, passes, ., add, (, getCustomPasses, (]
[options, ., customPasses, !=, null, ), {, passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATION_LOOP, ), ), ;, }]
[options, ., customPasses, !=, null, ), {, passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATION_LOOP, ), ), ;, }]
[null, ), {, passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATION_LOOP, ), ), ;, }, passes, ., add, (]
[{, passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATION_LOOP, ), ), ;, }, passes, ., add, (, createEmptyPass, (]
[(, getCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATION_LOOP, ), ), ;, }, passes, ., add, (, createEmptyPass, (, "beforeMainOptimizations", ), ), ;]
[(, getCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATION_LOOP, ), ), ;, }, passes, ., add, (, createEmptyPass, (, "beforeMainOptimizations", ), ), ;]
[., BEFORE_OPTIMIZATION_LOOP, ), ), ;, }, passes, ., add, (, createEmptyPass, (, "beforeMainOptimizations", ), ), ;, passes, ., addAll, (]
[., add, (, createEmptyPass, (, "beforeMainOptimizations", ), ), ;, passes, ., addAll, (, getMainOptimizationLoop, (, ), ), ;, if, (]
[., add, (, createEmptyPass, (, "beforeMainOptimizations", ), ), ;, passes, ., addAll, (, getMainOptimizationLoop, (, ), ), ;, if, (]
[), ;, passes, ., addAll, (, getMainOptimizationLoop, (, ), ), ;, if, (, options, ., specializeInitialModule, ), {, if, (]
[), ;, passes, ., addAll, (, getMainOptimizationLoop, (, ), ), ;, if, (, options, ., specializeInitialModule, ), {, if, (]
[(, getMainOptimizationLoop, (, ), ), ;, if, (, options, ., specializeInitialModule, ), {, if, (, options, ., crossModuleCodeMotion, ), {]
[(, getMainOptimizationLoop, (, ), ), ;, if, (, options, ., specializeInitialModule, ), {, if, (, options, ., crossModuleCodeMotion, ), {]
[), ;, if, (, options, ., specializeInitialModule, ), {, if, (, options, ., crossModuleCodeMotion, ), {, passes, ., add, (]
[specializeInitialModule, ), {, if, (, options, ., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (]
[specializeInitialModule, ), {, if, (, options, ., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (]
[options, ., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (, options, ., crossModuleMethodMotion, ), {]
[options, ., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (, options, ., crossModuleMethodMotion, ), {]
[{, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (, options, ., crossModuleMethodMotion, ), {, passes, ., add, (]
[(, crossModuleCodeMotion, ), ;, }, if, (, options, ., crossModuleMethodMotion, ), {, passes, ., add, (, crossModuleMethodMotion, ), ;, }]
[(, crossModuleCodeMotion, ), ;, }, if, (, options, ., crossModuleMethodMotion, ), {, passes, ., add, (, crossModuleMethodMotion, ), ;, }]
[}, if, (, options, ., crossModuleMethodMotion, ), {, passes, ., add, (, crossModuleMethodMotion, ), ;, }, passes, ., add, (]
[options, ., crossModuleMethodMotion, ), {, passes, ., add, (, crossModuleMethodMotion, ), ;, }, passes, ., add, (, specializeInitialModule, ), ;]
[options, ., crossModuleMethodMotion, ), {, passes, ., add, (, crossModuleMethodMotion, ), ;, }, passes, ., add, (, specializeInitialModule, ), ;]
[{, passes, ., add, (, crossModuleMethodMotion, ), ;, }, passes, ., add, (, specializeInitialModule, ), ;, passes, ., addAll, (]
[), ;, }, passes, ., add, (, specializeInitialModule, ), ;, passes, ., addAll, (, getMainOptimizationLoop, (, ), ), ;, }]
[), ;, }, passes, ., add, (, specializeInitialModule, ), ;, passes, ., addAll, (, getMainOptimizationLoop, (, ), ), ;, }]
[., add, (, specializeInitialModule, ), ;, passes, ., addAll, (, getMainOptimizationLoop, (, ), ), ;, }, passes, ., add, (]
[(, specializeInitialModule, ), ;, passes, ., addAll, (, getMainOptimizationLoop, (, ), ), ;, }, passes, ., add, (, createEmptyPass, (]
[addAll, (, getMainOptimizationLoop, (, ), ), ;, }, passes, ., add, (, createEmptyPass, (, "beforeModuleMotion", ), ), ;, if, (]
[addAll, (, getMainOptimizationLoop, (, ), ), ;, }, passes, ., add, (, createEmptyPass, (, "beforeModuleMotion", ), ), ;, if, (]
[), ;, }, passes, ., add, (, createEmptyPass, (, "beforeModuleMotion", ), ), ;, if, (, options, ., crossModuleCodeMotion, ), {]
[), ;, }, passes, ., add, (, createEmptyPass, (, "beforeModuleMotion", ), ), ;, if, (, options, ., crossModuleCodeMotion, ), {]
[., add, (, createEmptyPass, (, "beforeModuleMotion", ), ), ;, if, (, options, ., crossModuleCodeMotion, ), {, passes, ., add, (]
[), ), ;, if, (, options, ., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (]
[), ), ;, if, (, options, ., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (]
[options, ., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (, options, ., crossModuleMethodMotion, ), {]
[options, ., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (, options, ., crossModuleMethodMotion, ), {]
[{, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (, options, ., crossModuleMethodMotion, ), {, passes, ., add, (]
[(, crossModuleCodeMotion, ), ;, }, if, (, options, ., crossModuleMethodMotion, ), {, passes, ., add, (, crossModuleMethodMotion, ), ;, }]
[(, crossModuleCodeMotion, ), ;, }, if, (, options, ., crossModuleMethodMotion, ), {, passes, ., add, (, crossModuleMethodMotion, ), ;, }]
[}, if, (, options, ., crossModuleMethodMotion, ), {, passes, ., add, (, crossModuleMethodMotion, ), ;, }, passes, ., add, (]
[(, options, ., crossModuleMethodMotion, ), {, passes, ., add, (, crossModuleMethodMotion, ), ;, }, passes, ., add, (, createEmptyPass, (]
[passes, ., add, (, crossModuleMethodMotion, ), ;, }, passes, ., add, (, createEmptyPass, (, "afterModuleMotion", ), ), ;, if, (]
[passes, ., add, (, crossModuleMethodMotion, ), ;, }, passes, ., add, (, createEmptyPass, (, "afterModuleMotion", ), ), ;, if, (]
[passes, ., add, (, crossModuleMethodMotion, ), ;, }, passes, ., add, (, createEmptyPass, (, "afterModuleMotion", ), ), ;, if, (]
[crossModuleMethodMotion, ), ;, }, passes, ., add, (, createEmptyPass, (, "afterModuleMotion", ), ), ;, if, (, options, ., customPasses, !=]
[}, passes, ., add, (, createEmptyPass, (, "afterModuleMotion", ), ), ;, if, (, options, ., customPasses, !=, null, ), {]
[}, passes, ., add, (, createEmptyPass, (, "afterModuleMotion", ), ), ;, if, (, options, ., customPasses, !=, null, ), {]
[(, createEmptyPass, (, "afterModuleMotion", ), ), ;, if, (, options, ., customPasses, !=, null, ), {, passes, ., add, (]
[(, "afterModuleMotion", ), ), ;, if, (, options, ., customPasses, !=, null, ), {, passes, ., add, (, getCustomPasses, (]
[(, "afterModuleMotion", ), ), ;, if, (, options, ., customPasses, !=, null, ), {, passes, ., add, (, getCustomPasses, (]
[customPasses, !=, null, ), {, passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, ., AFTER_OPTIMIZATION_LOOP, ), ), ;, }, if, (]
[customPasses, !=, null, ), {, passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, ., AFTER_OPTIMIZATION_LOOP, ), ), ;, }, if, (]
[passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, ., AFTER_OPTIMIZATION_LOOP, ), ), ;, }, if, (, options, ., flowSensitiveInlineVariables, ), {]
[passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, ., AFTER_OPTIMIZATION_LOOP, ), ), ;, }, if, (, options, ., flowSensitiveInlineVariables, ), {]
[getCustomPasses, (, CustomPassExecutionTime, ., AFTER_OPTIMIZATION_LOOP, ), ), ;, }, if, (, options, ., flowSensitiveInlineVariables, ), {, passes, ., add, (]
[), ), ;, }, if, (, options, ., flowSensitiveInlineVariables, ), {, passes, ., add, (, flowSensitiveInlineVariables, ), ;, if, (]
[), ), ;, }, if, (, options, ., flowSensitiveInlineVariables, ), {, passes, ., add, (, flowSensitiveInlineVariables, ), ;, if, (]
[), ), ;, }, if, (, options, ., flowSensitiveInlineVariables, ), {, passes, ., add, (, flowSensitiveInlineVariables, ), ;, if, (]
[if, (, options, ., flowSensitiveInlineVariables, ), {, passes, ., add, (, flowSensitiveInlineVariables, ), ;, if, (, options, ., removeUnusedVars, ||]
[if, (, options, ., flowSensitiveInlineVariables, ), {, passes, ., add, (, flowSensitiveInlineVariables, ), ;, if, (, options, ., removeUnusedVars, ||]
[), {, passes, ., add, (, flowSensitiveInlineVariables, ), ;, if, (, options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {]
[), {, passes, ., add, (, flowSensitiveInlineVariables, ), ;, if, (, options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {]
[add, (, flowSensitiveInlineVariables, ), ;, if, (, options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {, passes, ., add, (]
[options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {, passes, ., add, (, removeUnusedVars, ), ;, }, }, if, (]
[options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {, passes, ., add, (, removeUnusedVars, ), ;, }, }, if, (]
[., removeUnusedLocalVars, ), {, passes, ., add, (, removeUnusedVars, ), ;, }, }, if, (, options, ., smartNameRemoval, ), {]
[., removeUnusedLocalVars, ), {, passes, ., add, (, removeUnusedVars, ), ;, }, }, if, (, options, ., smartNameRemoval, ), {]
[passes, ., add, (, removeUnusedVars, ), ;, }, }, if, (, options, ., smartNameRemoval, ), {, passes, ., add, (]
[;, }, }, if, (, options, ., smartNameRemoval, ), {, passes, ., add, (, smartNamePass2, ), ;, }, if, (]
[;, }, }, if, (, options, ., smartNameRemoval, ), {, passes, ., add, (, smartNamePass2, ), ;, }, if, (]
[options, ., smartNameRemoval, ), {, passes, ., add, (, smartNamePass2, ), ;, }, if, (, options, ., collapseAnonymousFunctions, ), {]
[options, ., smartNameRemoval, ), {, passes, ., add, (, smartNamePass2, ), ;, }, if, (, options, ., collapseAnonymousFunctions, ), {]
[{, passes, ., add, (, smartNamePass2, ), ;, }, if, (, options, ., collapseAnonymousFunctions, ), {, passes, ., add, (]
[), ;, }, if, (, options, ., collapseAnonymousFunctions, ), {, passes, ., add, (, collapseAnonymousFunctions, ), ;, }, if, (]
[), ;, }, if, (, options, ., collapseAnonymousFunctions, ), {, passes, ., add, (, collapseAnonymousFunctions, ), ;, }, if, (]
[), ;, }, if, (, options, ., collapseAnonymousFunctions, ), {, passes, ., add, (, collapseAnonymousFunctions, ), ;, }, if, (]
[(, options, ., collapseAnonymousFunctions, ), {, passes, ., add, (, collapseAnonymousFunctions, ), ;, }, if, (, options, ., moveFunctionDeclarations, ||]
[(, options, ., collapseAnonymousFunctions, ), {, passes, ., add, (, collapseAnonymousFunctions, ), ;, }, if, (, options, ., moveFunctionDeclarations, ||]
[(, options, ., collapseAnonymousFunctions, ), {, passes, ., add, (, collapseAnonymousFunctions, ), ;, }, if, (, options, ., moveFunctionDeclarations, ||]
[), {, passes, ., add, (, collapseAnonymousFunctions, ), ;, }, if, (, options, ., moveFunctionDeclarations, ||, options, ., renamePrefixNamespace, !=]
[., add, (, collapseAnonymousFunctions, ), ;, }, if, (, options, ., moveFunctionDeclarations, ||, options, ., renamePrefixNamespace, !=, null, ), {]
[., add, (, collapseAnonymousFunctions, ), ;, }, if, (, options, ., moveFunctionDeclarations, ||, options, ., renamePrefixNamespace, !=, null, ), {]
[), ;, }, if, (, options, ., moveFunctionDeclarations, ||, options, ., renamePrefixNamespace, !=, null, ), {, passes, ., add, (]
[., moveFunctionDeclarations, ||, options, ., renamePrefixNamespace, !=, null, ), {, passes, ., add, (, moveFunctionDeclarations, ), ;, }, if, (]
[., moveFunctionDeclarations, ||, options, ., renamePrefixNamespace, !=, null, ), {, passes, ., add, (, moveFunctionDeclarations, ), ;, }, if, (]
[., moveFunctionDeclarations, ||, options, ., renamePrefixNamespace, !=, null, ), {, passes, ., add, (, moveFunctionDeclarations, ), ;, }, if, (]
[., renamePrefixNamespace, !=, null, ), {, passes, ., add, (, moveFunctionDeclarations, ), ;, }, if, (, options, ., anonymousFunctionNaming, ==]
[., renamePrefixNamespace, !=, null, ), {, passes, ., add, (, moveFunctionDeclarations, ), ;, }, if, (, options, ., anonymousFunctionNaming, ==]
[{, passes, ., add, (, moveFunctionDeclarations, ), ;, }, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {]
[{, passes, ., add, (, moveFunctionDeclarations, ), ;, }, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {]
[(, moveFunctionDeclarations, ), ;, }, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {, passes, ., add, (]
[(, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {, passes, ., add, (, nameMappedAnonymousFunctions, ), ;, }, if, (]
[(, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {, passes, ., add, (, nameMappedAnonymousFunctions, ), ;, }, if, (]
[(, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {, passes, ., add, (, nameMappedAnonymousFunctions, ), ;, }, if, (]
[==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {, passes, ., add, (, nameMappedAnonymousFunctions, ), ;, }, if, (, options, ., extractPrototypeMemberDeclarations, &&]
[AnonymousFunctionNamingPolicy, ., MAPPED, ), {, passes, ., add, (, nameMappedAnonymousFunctions, ), ;, }, if, (, options, ., extractPrototypeMemberDeclarations, &&, (]
[AnonymousFunctionNamingPolicy, ., MAPPED, ), {, passes, ., add, (, nameMappedAnonymousFunctions, ), ;, }, if, (, options, ., extractPrototypeMemberDeclarations, &&, (]
[AnonymousFunctionNamingPolicy, ., MAPPED, ), {, passes, ., add, (, nameMappedAnonymousFunctions, ), ;, }, if, (, options, ., extractPrototypeMemberDeclarations, &&, (]
[AnonymousFunctionNamingPolicy, ., MAPPED, ), {, passes, ., add, (, nameMappedAnonymousFunctions, ), ;, }, if, (, options, ., extractPrototypeMemberDeclarations, &&, (]
[{, passes, ., add, (, nameMappedAnonymousFunctions, ), ;, }, if, (, options, ., extractPrototypeMemberDeclarations, &&, (, options, ., propertyRenaming, !=]
[{, passes, ., add, (, nameMappedAnonymousFunctions, ), ;, }, if, (, options, ., extractPrototypeMemberDeclarations, &&, (, options, ., propertyRenaming, !=]
[(, nameMappedAnonymousFunctions, ), ;, }, if, (, options, ., extractPrototypeMemberDeclarations, &&, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., HEURISTIC, &&]
[(, nameMappedAnonymousFunctions, ), ;, }, if, (, options, ., extractPrototypeMemberDeclarations, &&, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., HEURISTIC, &&]
[(, nameMappedAnonymousFunctions, ), ;, }, if, (, options, ., extractPrototypeMemberDeclarations, &&, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., HEURISTIC, &&]
[}, if, (, options, ., extractPrototypeMemberDeclarations, &&, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., HEURISTIC, &&, options, ., propertyRenaming, !=]
[}, if, (, options, ., extractPrototypeMemberDeclarations, &&, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., HEURISTIC, &&, options, ., propertyRenaming, !=]
[&&, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., HEURISTIC, &&, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ), ), {]
[&&, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., HEURISTIC, &&, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ), ), {]
[propertyRenaming, !=, PropertyRenamingPolicy, ., HEURISTIC, &&, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ), ), {, passes, ., add, (]
[options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ), ), {, passes, ., add, (, extractPrototypeMemberDeclarations, ), ;, }, if, (]
[options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ), ), {, passes, ., add, (, extractPrototypeMemberDeclarations, ), ;, }, if, (]
[options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ), ), {, passes, ., add, (, extractPrototypeMemberDeclarations, ), ;, }, if, (]
[PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ), ), {, passes, ., add, (, extractPrototypeMemberDeclarations, ), ;, }, if, (, options, ., ambiguateProperties, &&]
[., AGGRESSIVE_HEURISTIC, ), ), {, passes, ., add, (, extractPrototypeMemberDeclarations, ), ;, }, if, (, options, ., ambiguateProperties, &&, (]
[., AGGRESSIVE_HEURISTIC, ), ), {, passes, ., add, (, extractPrototypeMemberDeclarations, ), ;, }, if, (, options, ., ambiguateProperties, &&, (]
[., AGGRESSIVE_HEURISTIC, ), ), {, passes, ., add, (, extractPrototypeMemberDeclarations, ), ;, }, if, (, options, ., ambiguateProperties, &&, (]
[{, passes, ., add, (, extractPrototypeMemberDeclarations, ), ;, }, if, (, options, ., ambiguateProperties, &&, (, options, ., propertyRenaming, ==]
[{, passes, ., add, (, extractPrototypeMemberDeclarations, ), ;, }, if, (, options, ., ambiguateProperties, &&, (, options, ., propertyRenaming, ==]
[), ;, }, if, (, options, ., ambiguateProperties, &&, (, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., ALL_UNQUOTED, ), ), {]
[), ;, }, if, (, options, ., ambiguateProperties, &&, (, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., ALL_UNQUOTED, ), ), {]
[(, options, ., ambiguateProperties, &&, (, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., ALL_UNQUOTED, ), ), {, passes, ., add, (]
[options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., ALL_UNQUOTED, ), ), {, passes, ., add, (, ambiguateProperties, ), ;, }, if, (]
[options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., ALL_UNQUOTED, ), ), {, passes, ., add, (, ambiguateProperties, ), ;, }, if, (]
[options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., ALL_UNQUOTED, ), ), {, passes, ., add, (, ambiguateProperties, ), ;, }, if, (]
[PropertyRenamingPolicy, ., ALL_UNQUOTED, ), ), {, passes, ., add, (, ambiguateProperties, ), ;, }, if, (, options, ., propertyRenaming, !=]
[PropertyRenamingPolicy, ., ALL_UNQUOTED, ), ), {, passes, ., add, (, ambiguateProperties, ), ;, }, if, (, options, ., propertyRenaming, !=]
[{, passes, ., add, (, ambiguateProperties, ), ;, }, if, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., OFF, ), {]
[{, passes, ., add, (, ambiguateProperties, ), ;, }, if, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., OFF, ), {]
[(, ambiguateProperties, ), ;, }, if, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., OFF, ), {, passes, ., add, (]
[(, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., OFF, ), {, passes, ., add, (, renameProperties, ), ;, }, if, (]
[(, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., OFF, ), {, passes, ., add, (, renameProperties, ), ;, }, if, (]
[PropertyRenamingPolicy, ., OFF, ), {, passes, ., add, (, renameProperties, ), ;, }, if, (, options, ., reserveRawExports, ), {]
[PropertyRenamingPolicy, ., OFF, ), {, passes, ., add, (, renameProperties, ), ;, }, if, (, options, ., reserveRawExports, ), {]
[{, passes, ., add, (, renameProperties, ), ;, }, if, (, options, ., reserveRawExports, ), {, passes, ., add, (]
[), ;, }, if, (, options, ., reserveRawExports, ), {, passes, ., add, (, gatherRawExports, ), ;, }, if, (]
[), ;, }, if, (, options, ., reserveRawExports, ), {, passes, ., add, (, gatherRawExports, ), ;, }, if, (]
[options, ., reserveRawExports, ), {, passes, ., add, (, gatherRawExports, ), ;, }, if, (, options, ., convertToDottedProperties, ), {]
[options, ., reserveRawExports, ), {, passes, ., add, (, gatherRawExports, ), ;, }, if, (, options, ., convertToDottedProperties, ), {]
[{, passes, ., add, (, gatherRawExports, ), ;, }, if, (, options, ., convertToDottedProperties, ), {, passes, ., add, (]
[), ;, }, if, (, options, ., convertToDottedProperties, ), {, passes, ., add, (, convertToDottedProperties, ), ;, }, if, (]
[), ;, }, if, (, options, ., convertToDottedProperties, ), {, passes, ., add, (, convertToDottedProperties, ), ;, }, if, (]
[options, ., convertToDottedProperties, ), {, passes, ., add, (, convertToDottedProperties, ), ;, }, if, (, options, ., rewriteFunctionExpressions, ), {]
[options, ., convertToDottedProperties, ), {, passes, ., add, (, convertToDottedProperties, ), ;, }, if, (, options, ., rewriteFunctionExpressions, ), {]
[{, passes, ., add, (, convertToDottedProperties, ), ;, }, if, (, options, ., rewriteFunctionExpressions, ), {, passes, ., add, (]
[), ;, }, if, (, options, ., rewriteFunctionExpressions, ), {, passes, ., add, (, rewriteFunctionExpressions, ), ;, }, if, (]
[), ;, }, if, (, options, ., rewriteFunctionExpressions, ), {, passes, ., add, (, rewriteFunctionExpressions, ), ;, }, if, (]
[;, }, if, (, options, ., rewriteFunctionExpressions, ), {, passes, ., add, (, rewriteFunctionExpressions, ), ;, }, if, (, !]
[;, }, if, (, options, ., rewriteFunctionExpressions, ), {, passes, ., add, (, rewriteFunctionExpressions, ), ;, }, if, (, !]
[;, }, if, (, options, ., rewriteFunctionExpressions, ), {, passes, ., add, (, rewriteFunctionExpressions, ), ;, }, if, (, !]
[{, passes, ., add, (, rewriteFunctionExpressions, ), ;, }, if, (, !, options, ., aliasableStrings, ., isEmpty, (, ), ||]
[{, passes, ., add, (, rewriteFunctionExpressions, ), ;, }, if, (, !, options, ., aliasableStrings, ., isEmpty, (, ), ||]
[rewriteFunctionExpressions, ), ;, }, if, (, !, options, ., aliasableStrings, ., isEmpty, (, ), ||, options, ., aliasAllStrings, ), {]
[rewriteFunctionExpressions, ), ;, }, if, (, !, options, ., aliasableStrings, ., isEmpty, (, ), ||, options, ., aliasAllStrings, ), {]
[if, (, !, options, ., aliasableStrings, ., isEmpty, (, ), ||, options, ., aliasAllStrings, ), {, passes, ., add, (]
[., isEmpty, (, ), ||, options, ., aliasAllStrings, ), {, passes, ., add, (, aliasStrings, ), ;, }, if, (]
[., isEmpty, (, ), ||, options, ., aliasAllStrings, ), {, passes, ., add, (, aliasStrings, ), ;, }, if, (]
[options, ., aliasAllStrings, ), {, passes, ., add, (, aliasStrings, ), ;, }, if, (, options, ., aliasExternals, ), {]
[options, ., aliasAllStrings, ), {, passes, ., add, (, aliasStrings, ), ;, }, if, (, options, ., aliasExternals, ), {]
[{, passes, ., add, (, aliasStrings, ), ;, }, if, (, options, ., aliasExternals, ), {, passes, ., add, (]
[), ;, }, if, (, options, ., aliasExternals, ), {, passes, ., add, (, aliasExternals, ), ;, }, if, (]
[), ;, }, if, (, options, ., aliasExternals, ), {, passes, ., add, (, aliasExternals, ), ;, }, if, (]
[options, ., aliasExternals, ), {, passes, ., add, (, aliasExternals, ), ;, }, if, (, options, ., aliasKeywords, ), {]
[options, ., aliasExternals, ), {, passes, ., add, (, aliasExternals, ), ;, }, if, (, options, ., aliasKeywords, ), {]
[{, passes, ., add, (, aliasExternals, ), ;, }, if, (, options, ., aliasKeywords, ), {, passes, ., add, (]
[(, aliasExternals, ), ;, }, if, (, options, ., aliasKeywords, ), {, passes, ., add, (, aliasKeywords, ), ;, }]
[(, aliasExternals, ), ;, }, if, (, options, ., aliasKeywords, ), {, passes, ., add, (, aliasKeywords, ), ;, }]
[}, if, (, options, ., aliasKeywords, ), {, passes, ., add, (, aliasKeywords, ), ;, }, passes, ., add, (]
[aliasKeywords, ), {, passes, ., add, (, aliasKeywords, ), ;, }, passes, ., add, (, markUnnormalized, ), ;, if, (]
[aliasKeywords, ), {, passes, ., add, (, aliasKeywords, ), ;, }, passes, ., add, (, markUnnormalized, ), ;, if, (]
[add, (, aliasKeywords, ), ;, }, passes, ., add, (, markUnnormalized, ), ;, if, (, options, ., coalesceVariableNames, ), {]
[add, (, aliasKeywords, ), ;, }, passes, ., add, (, markUnnormalized, ), ;, if, (, options, ., coalesceVariableNames, ), {]
[;, }, passes, ., add, (, markUnnormalized, ), ;, if, (, options, ., coalesceVariableNames, ), {, passes, ., add, (]
[(, markUnnormalized, ), ;, if, (, options, ., coalesceVariableNames, ), {, passes, ., add, (, coalesceVariableNames, ), ;, if, (]
[(, markUnnormalized, ), ;, if, (, options, ., coalesceVariableNames, ), {, passes, ., add, (, coalesceVariableNames, ), ;, if, (]
[(, options, ., coalesceVariableNames, ), {, passes, ., add, (, coalesceVariableNames, ), ;, if, (, options, ., foldConstants, ), {]
[(, options, ., coalesceVariableNames, ), {, passes, ., add, (, coalesceVariableNames, ), ;, if, (, options, ., foldConstants, ), {]
[), {, passes, ., add, (, coalesceVariableNames, ), ;, if, (, options, ., foldConstants, ), {, passes, ., add, (]
[), ;, if, (, options, ., foldConstants, ), {, passes, ., add, (, peepholeOptimizations, ), ;, }, }, if, (]
[), ;, if, (, options, ., foldConstants, ), {, passes, ., add, (, peepholeOptimizations, ), ;, }, }, if, (]
[., foldConstants, ), {, passes, ., add, (, peepholeOptimizations, ), ;, }, }, if, (, options, ., collapseVariableDeclarations, ), {]
[., foldConstants, ), {, passes, ., add, (, peepholeOptimizations, ), ;, }, }, if, (, options, ., collapseVariableDeclarations, ), {]
[passes, ., add, (, peepholeOptimizations, ), ;, }, }, if, (, options, ., collapseVariableDeclarations, ), {, passes, ., add, (]
[(, peepholeOptimizations, ), ;, }, }, if, (, options, ., collapseVariableDeclarations, ), {, passes, ., add, (, exploitAssign, ), ;]
[(, peepholeOptimizations, ), ;, }, }, if, (, options, ., collapseVariableDeclarations, ), {, passes, ., add, (, exploitAssign, ), ;]
[}, }, if, (, options, ., collapseVariableDeclarations, ), {, passes, ., add, (, exploitAssign, ), ;, passes, ., add, (]
[options, ., collapseVariableDeclarations, ), {, passes, ., add, (, exploitAssign, ), ;, passes, ., add, (, collapseVariableDeclarations, ), ;, }]
[options, ., collapseVariableDeclarations, ), {, passes, ., add, (, exploitAssign, ), ;, passes, ., add, (, collapseVariableDeclarations, ), ;, }]
[{, passes, ., add, (, exploitAssign, ), ;, passes, ., add, (, collapseVariableDeclarations, ), ;, }, passes, ., add, (]
[exploitAssign, ), ;, passes, ., add, (, collapseVariableDeclarations, ), ;, }, passes, ., add, (, denormalize, ), ;, if, (]
[exploitAssign, ), ;, passes, ., add, (, collapseVariableDeclarations, ), ;, }, passes, ., add, (, denormalize, ), ;, if, (]
[exploitAssign, ), ;, passes, ., add, (, collapseVariableDeclarations, ), ;, }, passes, ., add, (, denormalize, ), ;, if, (]
[., add, (, collapseVariableDeclarations, ), ;, }, passes, ., add, (, denormalize, ), ;, if, (, options, ., instrumentationTemplate, !=]
[collapseVariableDeclarations, ), ;, }, passes, ., add, (, denormalize, ), ;, if, (, options, ., instrumentationTemplate, !=, null, ), {]
[collapseVariableDeclarations, ), ;, }, passes, ., add, (, denormalize, ), ;, if, (, options, ., instrumentationTemplate, !=, null, ), {]
[passes, ., add, (, denormalize, ), ;, if, (, options, ., instrumentationTemplate, !=, null, ), {, passes, ., add, (]
[;, if, (, options, ., instrumentationTemplate, !=, null, ), {, passes, ., add, (, instrumentFunctions, ), ;, }, if, (]
[;, if, (, options, ., instrumentationTemplate, !=, null, ), {, passes, ., add, (, instrumentFunctions, ), ;, }, if, (]
[;, if, (, options, ., instrumentationTemplate, !=, null, ), {, passes, ., add, (, instrumentFunctions, ), ;, }, if, (]
[., instrumentationTemplate, !=, null, ), {, passes, ., add, (, instrumentFunctions, ), ;, }, if, (, options, ., variableRenaming, !=]
[., instrumentationTemplate, !=, null, ), {, passes, ., add, (, instrumentFunctions, ), ;, }, if, (, options, ., variableRenaming, !=]
[{, passes, ., add, (, instrumentFunctions, ), ;, }, if, (, options, ., variableRenaming, !=, VariableRenamingPolicy, ., ALL, ), {]
[{, passes, ., add, (, instrumentFunctions, ), ;, }, if, (, options, ., variableRenaming, !=, VariableRenamingPolicy, ., ALL, ), {]
[(, instrumentFunctions, ), ;, }, if, (, options, ., variableRenaming, !=, VariableRenamingPolicy, ., ALL, ), {, passes, ., add, (]
[(, options, ., variableRenaming, !=, VariableRenamingPolicy, ., ALL, ), {, passes, ., add, (, invertContextualRenaming, ), ;, }, if, (]
[(, options, ., variableRenaming, !=, VariableRenamingPolicy, ., ALL, ), {, passes, ., add, (, invertContextualRenaming, ), ;, }, if, (]
[(, options, ., variableRenaming, !=, VariableRenamingPolicy, ., ALL, ), {, passes, ., add, (, invertContextualRenaming, ), ;, }, if, (]
[!=, VariableRenamingPolicy, ., ALL, ), {, passes, ., add, (, invertContextualRenaming, ), ;, }, if, (, options, ., variableRenaming, !=]
[!=, VariableRenamingPolicy, ., ALL, ), {, passes, ., add, (, invertContextualRenaming, ), ;, }, if, (, options, ., variableRenaming, !=]
[{, passes, ., add, (, invertContextualRenaming, ), ;, }, if, (, options, ., variableRenaming, !=, VariableRenamingPolicy, ., OFF, ), {]
[{, passes, ., add, (, invertContextualRenaming, ), ;, }, if, (, options, ., variableRenaming, !=, VariableRenamingPolicy, ., OFF, ), {]
[(, invertContextualRenaming, ), ;, }, if, (, options, ., variableRenaming, !=, VariableRenamingPolicy, ., OFF, ), {, passes, ., add, (]
[(, options, ., variableRenaming, !=, VariableRenamingPolicy, ., OFF, ), {, passes, ., add, (, renameVars, ), ;, }, if, (]
[(, options, ., variableRenaming, !=, VariableRenamingPolicy, ., OFF, ), {, passes, ., add, (, renameVars, ), ;, }, if, (]
[VariableRenamingPolicy, ., OFF, ), {, passes, ., add, (, renameVars, ), ;, }, if, (, options, ., groupVariableDeclarations, ), {]
[VariableRenamingPolicy, ., OFF, ), {, passes, ., add, (, renameVars, ), ;, }, if, (, options, ., groupVariableDeclarations, ), {]
[{, passes, ., add, (, renameVars, ), ;, }, if, (, options, ., groupVariableDeclarations, ), {, passes, ., add, (]
[), ;, }, if, (, options, ., groupVariableDeclarations, ), {, passes, ., add, (, groupVariableDeclarations, ), ;, }, if, (]
[), ;, }, if, (, options, ., groupVariableDeclarations, ), {, passes, ., add, (, groupVariableDeclarations, ), ;, }, if, (]
[options, ., groupVariableDeclarations, ), {, passes, ., add, (, groupVariableDeclarations, ), ;, }, if, (, options, ., processObjectPropertyString, ), {]
[options, ., groupVariableDeclarations, ), {, passes, ., add, (, groupVariableDeclarations, ), ;, }, if, (, options, ., processObjectPropertyString, ), {]
[{, passes, ., add, (, groupVariableDeclarations, ), ;, }, if, (, options, ., processObjectPropertyString, ), {, passes, ., add, (]
[), ;, }, if, (, options, ., processObjectPropertyString, ), {, passes, ., add, (, objectPropertyStringPostprocess, ), ;, }, if, (]
[), ;, }, if, (, options, ., processObjectPropertyString, ), {, passes, ., add, (, objectPropertyStringPostprocess, ), ;, }, if, (]
[options, ., processObjectPropertyString, ), {, passes, ., add, (, objectPropertyStringPostprocess, ), ;, }, if, (, options, ., labelRenaming, ), {]
[options, ., processObjectPropertyString, ), {, passes, ., add, (, objectPropertyStringPostprocess, ), ;, }, if, (, options, ., labelRenaming, ), {]
[{, passes, ., add, (, objectPropertyStringPostprocess, ), ;, }, if, (, options, ., labelRenaming, ), {, passes, ., add, (]
[), ;, }, if, (, options, ., labelRenaming, ), {, passes, ., add, (, renameLabels, ), ;, }, if, (]
[), ;, }, if, (, options, ., labelRenaming, ), {, passes, ., add, (, renameLabels, ), ;, }, if, (]
[options, ., labelRenaming, ), {, passes, ., add, (, renameLabels, ), ;, }, if, (, options, ., foldConstants, ), {]
[options, ., labelRenaming, ), {, passes, ., add, (, renameLabels, ), ;, }, if, (, options, ., foldConstants, ), {]
[{, passes, ., add, (, renameLabels, ), ;, }, if, (, options, ., foldConstants, ), {, passes, ., add, (]
[), ;, }, if, (, options, ., foldConstants, ), {, passes, ., add, (, latePeepholeOptimizations, ), ;, }, if, (]
[), ;, }, if, (, options, ., foldConstants, ), {, passes, ., add, (, latePeepholeOptimizations, ), ;, }, if, (]
[), ;, }, if, (, options, ., foldConstants, ), {, passes, ., add, (, latePeepholeOptimizations, ), ;, }, if, (]
[(, options, ., foldConstants, ), {, passes, ., add, (, latePeepholeOptimizations, ), ;, }, if, (, options, ., anonymousFunctionNaming, ==]
[(, options, ., foldConstants, ), {, passes, ., add, (, latePeepholeOptimizations, ), ;, }, if, (, options, ., anonymousFunctionNaming, ==]
[{, passes, ., add, (, latePeepholeOptimizations, ), ;, }, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {]
[{, passes, ., add, (, latePeepholeOptimizations, ), ;, }, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {]
[(, latePeepholeOptimizations, ), ;, }, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {, passes, ., add, (]
[}, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {, passes, ., add, (, nameUnmappedAnonymousFunctions, ), ;, }]
[}, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {, passes, ., add, (, nameUnmappedAnonymousFunctions, ), ;, }]
[., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {, passes, ., add, (, nameUnmappedAnonymousFunctions, ), ;, }, passes, ., add, (]
[UNMAPPED, ), {, passes, ., add, (, nameUnmappedAnonymousFunctions, ), ;, }, passes, ., add, (, stripSideEffectProtection, ), ;, if, (]
[UNMAPPED, ), {, passes, ., add, (, nameUnmappedAnonymousFunctions, ), ;, }, passes, ., add, (, stripSideEffectProtection, ), ;, if, (]
[UNMAPPED, ), {, passes, ., add, (, nameUnmappedAnonymousFunctions, ), ;, }, passes, ., add, (, stripSideEffectProtection, ), ;, if, (]
[., add, (, nameUnmappedAnonymousFunctions, ), ;, }, passes, ., add, (, stripSideEffectProtection, ), ;, if, (, options, ., renamePrefixNamespace, !=]
[;, }, passes, ., add, (, stripSideEffectProtection, ), ;, if, (, options, ., renamePrefixNamespace, !=, null, ), {, if, (]
[}, passes, ., add, (, stripSideEffectProtection, ), ;, if, (, options, ., renamePrefixNamespace, !=, null, ), {, if, (, !]
[}, passes, ., add, (, stripSideEffectProtection, ), ;, if, (, options, ., renamePrefixNamespace, !=, null, ), {, if, (, !]
[}, passes, ., add, (, stripSideEffectProtection, ), ;, if, (, options, ., renamePrefixNamespace, !=, null, ), {, if, (, !]
[(, stripSideEffectProtection, ), ;, if, (, options, ., renamePrefixNamespace, !=, null, ), {, if, (, !, GLOBAL_SYMBOL_NAMESPACE_PATTERN, ., matcher, (]
[(, stripSideEffectProtection, ), ;, if, (, options, ., renamePrefixNamespace, !=, null, ), {, if, (, !, GLOBAL_SYMBOL_NAMESPACE_PATTERN, ., matcher, (]
[), {, if, (, !, GLOBAL_SYMBOL_NAMESPACE_PATTERN, ., matcher, (, options, ., renamePrefixNamespace, ), ., matches, (, ), ), {, throw]
[(, !, GLOBAL_SYMBOL_NAMESPACE_PATTERN, ., matcher, (, options, ., renamePrefixNamespace, ), ., matches, (, ), ), {, throw, new, IllegalArgumentException, (]
[(, !, GLOBAL_SYMBOL_NAMESPACE_PATTERN, ., matcher, (, options, ., renamePrefixNamespace, ), ., matches, (, ), ), {, throw, new, IllegalArgumentException, (]
[GLOBAL_SYMBOL_NAMESPACE_PATTERN, ., matcher, (, options, ., renamePrefixNamespace, ), ., matches, (, ), ), {, throw, new, IllegalArgumentException, (, "Illegal character in renamePrefixNamespace name: ", +]
[GLOBAL_SYMBOL_NAMESPACE_PATTERN, ., matcher, (, options, ., renamePrefixNamespace, ), ., matches, (, ), ), {, throw, new, IllegalArgumentException, (, "Illegal character in renamePrefixNamespace name: ", +]
[renamePrefixNamespace, ), ., matches, (, ), ), {, throw, new, IllegalArgumentException, (, "Illegal character in renamePrefixNamespace name: ", +, options, ., renamePrefixNamespace, ), ;, }]
[renamePrefixNamespace, ), ., matches, (, ), ), {, throw, new, IllegalArgumentException, (, "Illegal character in renamePrefixNamespace name: ", +, options, ., renamePrefixNamespace, ), ;, }]
[(, ), ), {, throw, new, IllegalArgumentException, (, "Illegal character in renamePrefixNamespace name: ", +, options, ., renamePrefixNamespace, ), ;, }, passes, ., add, (]
[throw, new, IllegalArgumentException, (, "Illegal character in renamePrefixNamespace name: ", +, options, ., renamePrefixNamespace, ), ;, }, passes, ., add, (, rescopeGlobalSymbols, ), ;, }]
[throw, new, IllegalArgumentException, (, "Illegal character in renamePrefixNamespace name: ", +, options, ., renamePrefixNamespace, ), ;, }, passes, ., add, (, rescopeGlobalSymbols, ), ;, }]
["Illegal character in renamePrefixNamespace name: ", +, options, ., renamePrefixNamespace, ), ;, }, passes, ., add, (, rescopeGlobalSymbols, ), ;, }, passes, ., add, (]
[., renamePrefixNamespace, ), ;, }, passes, ., add, (, rescopeGlobalSymbols, ), ;, }, passes, ., add, (, sanityCheckAst, ), ;]
[., renamePrefixNamespace, ), ;, }, passes, ., add, (, rescopeGlobalSymbols, ), ;, }, passes, ., add, (, sanityCheckAst, ), ;]
[}, passes, ., add, (, rescopeGlobalSymbols, ), ;, }, passes, ., add, (, sanityCheckAst, ), ;, passes, ., add, (]
[(, rescopeGlobalSymbols, ), ;, }, passes, ., add, (, sanityCheckAst, ), ;, passes, ., add, (, sanityCheckVars, ), ;, return]
[;, return, passes, ;, }, private, List, <, PassFactory, >, getMainOptimizationLoop, (, ), {, List, <, PassFactory, >, passes, =]
[;, return, passes, ;, }, private, List, <, PassFactory, >, getMainOptimizationLoop, (, ), {, List, <, PassFactory, >, passes, =]
[PassFactory, >, getMainOptimizationLoop, (, ), {, List, <, PassFactory, >, passes, =, Lists, ., newArrayList, (, ), ;, if, (]
[PassFactory, >, getMainOptimizationLoop, (, ), {, List, <, PassFactory, >, passes, =, Lists, ., newArrayList, (, ), ;, if, (]
[{, List, <, PassFactory, >, passes, =, Lists, ., newArrayList, (, ), ;, if, (, options, ., inlineGetters, ), {]
[{, List, <, PassFactory, >, passes, =, Lists, ., newArrayList, (, ), ;, if, (, options, ., inlineGetters, ), {]
[>, passes, =, Lists, ., newArrayList, (, ), ;, if, (, options, ., inlineGetters, ), {, passes, ., add, (]
[., newArrayList, (, ), ;, if, (, options, ., inlineGetters, ), {, passes, ., add, (, inlineSimpleMethods, ), ;, }]
[., newArrayList, (, ), ;, if, (, options, ., inlineGetters, ), {, passes, ., add, (, inlineSimpleMethods, ), ;, }]
[;, if, (, options, ., inlineGetters, ), {, passes, ., add, (, inlineSimpleMethods, ), ;, }, passes, ., addAll, (]
[{, passes, ., add, (, inlineSimpleMethods, ), ;, }, passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;, if, (]
[{, passes, ., add, (, inlineSimpleMethods, ), ;, }, passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;, if, (]
[{, passes, ., add, (, inlineSimpleMethods, ), ;, }, passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;, if, (]
[(, inlineSimpleMethods, ), ;, }, passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;, if, (, options, ., inlineFunctions, ||]
[(, inlineSimpleMethods, ), ;, }, passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;, if, (, options, ., inlineFunctions, ||]
[passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;, if, (, options, ., inlineFunctions, ||, options, ., inlineLocalFunctions, ), {]
[passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;, if, (, options, ., inlineFunctions, ||, options, ., inlineLocalFunctions, ), {]
[getCodeRemovingPasses, (, ), ), ;, if, (, options, ., inlineFunctions, ||, options, ., inlineLocalFunctions, ), {, passes, ., add, (]
[(, options, ., inlineFunctions, ||, options, ., inlineLocalFunctions, ), {, passes, ., add, (, inlineFunctions, ), ;, }, if, (]
[(, options, ., inlineFunctions, ||, options, ., inlineLocalFunctions, ), {, passes, ., add, (, inlineFunctions, ), ;, }, if, (]
[options, ., inlineLocalFunctions, ), {, passes, ., add, (, inlineFunctions, ), ;, }, if, (, options, ., inlineProperties, ), {]
[options, ., inlineLocalFunctions, ), {, passes, ., add, (, inlineFunctions, ), ;, }, if, (, options, ., inlineProperties, ), {]
[{, passes, ., add, (, inlineFunctions, ), ;, }, if, (, options, ., inlineProperties, ), {, passes, ., add, (]
[;, }, if, (, options, ., inlineProperties, ), {, passes, ., add, (, inlineProperties, ), ;, }, boolean, runOptimizeCalls, =]
[;, }, if, (, options, ., inlineProperties, ), {, passes, ., add, (, inlineProperties, ), ;, }, boolean, runOptimizeCalls, =]
[;, }, if, (, options, ., inlineProperties, ), {, passes, ., add, (, inlineProperties, ), ;, }, boolean, runOptimizeCalls, =]
[;, }, if, (, options, ., inlineProperties, ), {, passes, ., add, (, inlineProperties, ), ;, }, boolean, runOptimizeCalls, =]
[options, ., inlineProperties, ), {, passes, ., add, (, inlineProperties, ), ;, }, boolean, runOptimizeCalls, =, options, ., optimizeCalls, ||]
[options, ., inlineProperties, ), {, passes, ., add, (, inlineProperties, ), ;, }, boolean, runOptimizeCalls, =, options, ., optimizeCalls, ||]
[{, passes, ., add, (, inlineProperties, ), ;, }, boolean, runOptimizeCalls, =, options, ., optimizeCalls, ||, options, ., optimizeParameters, ||]
[{, passes, ., add, (, inlineProperties, ), ;, }, boolean, runOptimizeCalls, =, options, ., optimizeCalls, ||, options, ., optimizeParameters, ||]
[), ;, }, boolean, runOptimizeCalls, =, options, ., optimizeCalls, ||, options, ., optimizeParameters, ||, options, ., optimizeReturns, ;, if, (]
[), ;, }, boolean, runOptimizeCalls, =, options, ., optimizeCalls, ||, options, ., optimizeParameters, ||, options, ., optimizeReturns, ;, if, (]
[), ;, }, boolean, runOptimizeCalls, =, options, ., optimizeCalls, ||, options, ., optimizeParameters, ||, options, ., optimizeReturns, ;, if, (]
[runOptimizeCalls, =, options, ., optimizeCalls, ||, options, ., optimizeParameters, ||, options, ., optimizeReturns, ;, if, (, options, ., removeUnusedVars, ||]
[runOptimizeCalls, =, options, ., optimizeCalls, ||, options, ., optimizeParameters, ||, options, ., optimizeReturns, ;, if, (, options, ., removeUnusedVars, ||]
[., optimizeParameters, ||, options, ., optimizeReturns, ;, if, (, options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {, if, (]
[., optimizeParameters, ||, options, ., optimizeReturns, ;, if, (, options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {, if, (]
[optimizeReturns, ;, if, (, options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {, if, (, options, ., deadAssignmentElimination, ), {]
[optimizeReturns, ;, if, (, options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {, if, (, options, ., deadAssignmentElimination, ), {]
[options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {, if, (, options, ., deadAssignmentElimination, ), {, passes, ., add, (]
[removeUnusedLocalVars, ), {, if, (, options, ., deadAssignmentElimination, ), {, passes, ., add, (, deadAssignmentsElimination, ), ;, }, if, (]
[), {, if, (, options, ., deadAssignmentElimination, ), {, passes, ., add, (, deadAssignmentsElimination, ), ;, }, if, (, !]
[(, options, ., deadAssignmentElimination, ), {, passes, ., add, (, deadAssignmentsElimination, ), ;, }, if, (, !, runOptimizeCalls, ), {]
[(, options, ., deadAssignmentElimination, ), {, passes, ., add, (, deadAssignmentsElimination, ), ;, }, if, (, !, runOptimizeCalls, ), {]
[), {, passes, ., add, (, deadAssignmentsElimination, ), ;, }, if, (, !, runOptimizeCalls, ), {, passes, ., add, (]
[), ;, }, if, (, !, runOptimizeCalls, ), {, passes, ., add, (, removeUnusedVars, ), ;, }, }, if, (]
[if, (, !, runOptimizeCalls, ), {, passes, ., add, (, removeUnusedVars, ), ;, }, }, if, (, runOptimizeCalls, ), {]
[if, (, !, runOptimizeCalls, ), {, passes, ., add, (, removeUnusedVars, ), ;, }, }, if, (, runOptimizeCalls, ), {]
[), {, passes, ., add, (, removeUnusedVars, ), ;, }, }, if, (, runOptimizeCalls, ), {, passes, ., add, (]
[add, (, removeUnusedVars, ), ;, }, }, if, (, runOptimizeCalls, ), {, passes, ., add, (, optimizeCallsAndRemoveUnusedVars, ), ;, }]
[removeUnusedVars, ), ;, }, }, if, (, runOptimizeCalls, ), {, passes, ., add, (, optimizeCallsAndRemoveUnusedVars, ), ;, }, assertAllLoopablePasses, (]
[}, if, (, runOptimizeCalls, ), {, passes, ., add, (, optimizeCallsAndRemoveUnusedVars, ), ;, }, assertAllLoopablePasses, (, passes, ), ;, return]
[;, return, passes, ;, }, private, List, <, PassFactory, >, getCodeRemovingPasses, (, ), {, List, <, PassFactory, >, passes, =]
[;, return, passes, ;, }, private, List, <, PassFactory, >, getCodeRemovingPasses, (, ), {, List, <, PassFactory, >, passes, =]
[PassFactory, >, getCodeRemovingPasses, (, ), {, List, <, PassFactory, >, passes, =, Lists, ., newArrayList, (, ), ;, if, (]
[PassFactory, >, getCodeRemovingPasses, (, ), {, List, <, PassFactory, >, passes, =, Lists, ., newArrayList, (, ), ;, if, (]
[PassFactory, >, getCodeRemovingPasses, (, ), {, List, <, PassFactory, >, passes, =, Lists, ., newArrayList, (, ), ;, if, (]
[), {, List, <, PassFactory, >, passes, =, Lists, ., newArrayList, (, ), ;, if, (, options, ., collapseObjectLiterals, &&]
[{, List, <, PassFactory, >, passes, =, Lists, ., newArrayList, (, ), ;, if, (, options, ., collapseObjectLiterals, &&, !]
[passes, =, Lists, ., newArrayList, (, ), ;, if, (, options, ., collapseObjectLiterals, &&, !, isInliningForbidden, (, ), ), {]
[passes, =, Lists, ., newArrayList, (, ), ;, if, (, options, ., collapseObjectLiterals, &&, !, isInliningForbidden, (, ), ), {]
[newArrayList, (, ), ;, if, (, options, ., collapseObjectLiterals, &&, !, isInliningForbidden, (, ), ), {, passes, ., add, (]
[options, ., collapseObjectLiterals, &&, !, isInliningForbidden, (, ), ), {, passes, ., add, (, collapseObjectLiterals, ), ;, }, if, (]
[options, ., collapseObjectLiterals, &&, !, isInliningForbidden, (, ), ), {, passes, ., add, (, collapseObjectLiterals, ), ;, }, if, (]
[options, ., collapseObjectLiterals, &&, !, isInliningForbidden, (, ), ), {, passes, ., add, (, collapseObjectLiterals, ), ;, }, if, (]
[!, isInliningForbidden, (, ), ), {, passes, ., add, (, collapseObjectLiterals, ), ;, }, if, (, options, ., inlineVariables, ||]
[!, isInliningForbidden, (, ), ), {, passes, ., add, (, collapseObjectLiterals, ), ;, }, if, (, options, ., inlineVariables, ||]
[{, passes, ., add, (, collapseObjectLiterals, ), ;, }, if, (, options, ., inlineVariables, ||, options, ., inlineLocalVariables, ), {]
[{, passes, ., add, (, collapseObjectLiterals, ), ;, }, if, (, options, ., inlineVariables, ||, options, ., inlineLocalVariables, ), {]
[(, collapseObjectLiterals, ), ;, }, if, (, options, ., inlineVariables, ||, options, ., inlineLocalVariables, ), {, passes, ., add, (]
[options, ., inlineVariables, ||, options, ., inlineLocalVariables, ), {, passes, ., add, (, inlineVariables, ), ;, }, else, if, (]
[options, ., inlineVariables, ||, options, ., inlineLocalVariables, ), {, passes, ., add, (, inlineVariables, ), ;, }, else, if, (]
[., inlineLocalVariables, ), {, passes, ., add, (, inlineVariables, ), ;, }, else, if, (, options, ., inlineConstantVars, ), {]
[., inlineLocalVariables, ), {, passes, ., add, (, inlineVariables, ), ;, }, else, if, (, options, ., inlineConstantVars, ), {]
[passes, ., add, (, inlineVariables, ), ;, }, else, if, (, options, ., inlineConstantVars, ), {, passes, ., add, (]
[;, }, else, if, (, options, ., inlineConstantVars, ), {, passes, ., add, (, inlineConstants, ), ;, }, if, (]
[;, }, else, if, (, options, ., inlineConstantVars, ), {, passes, ., add, (, inlineConstants, ), ;, }, if, (]
[options, ., inlineConstantVars, ), {, passes, ., add, (, inlineConstants, ), ;, }, if, (, options, ., foldConstants, ), {]
[options, ., inlineConstantVars, ), {, passes, ., add, (, inlineConstants, ), ;, }, if, (, options, ., foldConstants, ), {]
[{, passes, ., add, (, inlineConstants, ), ;, }, if, (, options, ., foldConstants, ), {, passes, ., add, (]
[add, (, inlineConstants, ), ;, }, if, (, options, ., foldConstants, ), {, passes, ., add, (, minimizeExitPoints, ), ;]
[add, (, inlineConstants, ), ;, }, if, (, options, ., foldConstants, ), {, passes, ., add, (, minimizeExitPoints, ), ;]
[;, }, if, (, options, ., foldConstants, ), {, passes, ., add, (, minimizeExitPoints, ), ;, passes, ., add, (]
[foldConstants, ), {, passes, ., add, (, minimizeExitPoints, ), ;, passes, ., add, (, peepholeOptimizations, ), ;, }, if, (]
[foldConstants, ), {, passes, ., add, (, minimizeExitPoints, ), ;, passes, ., add, (, peepholeOptimizations, ), ;, }, if, (]
[add, (, minimizeExitPoints, ), ;, passes, ., add, (, peepholeOptimizations, ), ;, }, if, (, options, ., removeDeadCode, ), {]
[add, (, minimizeExitPoints, ), ;, passes, ., add, (, peepholeOptimizations, ), ;, }, if, (, options, ., removeDeadCode, ), {]
[;, passes, ., add, (, peepholeOptimizations, ), ;, }, if, (, options, ., removeDeadCode, ), {, passes, ., add, (]
[), ;, }, if, (, options, ., removeDeadCode, ), {, passes, ., add, (, removeUnreachableCode, ), ;, }, if, (]
[), ;, }, if, (, options, ., removeDeadCode, ), {, passes, ., add, (, removeUnreachableCode, ), ;, }, if, (]
[options, ., removeDeadCode, ), {, passes, ., add, (, removeUnreachableCode, ), ;, }, if, (, options, ., removeUnusedPrototypeProperties, ), {]
[options, ., removeDeadCode, ), {, passes, ., add, (, removeUnreachableCode, ), ;, }, if, (, options, ., removeUnusedPrototypeProperties, ), {]
[{, passes, ., add, (, removeUnreachableCode, ), ;, }, if, (, options, ., removeUnusedPrototypeProperties, ), {, passes, ., add, (]
[), ;, }, if, (, options, ., removeUnusedPrototypeProperties, ), {, passes, ., add, (, removeUnusedPrototypeProperties, ), ;, }, if, (]
[), ;, }, if, (, options, ., removeUnusedPrototypeProperties, ), {, passes, ., add, (, removeUnusedPrototypeProperties, ), ;, }, if, (]
[), ;, }, if, (, options, ., removeUnusedPrototypeProperties, ), {, passes, ., add, (, removeUnusedPrototypeProperties, ), ;, }, if, (]
[(, options, ., removeUnusedPrototypeProperties, ), {, passes, ., add, (, removeUnusedPrototypeProperties, ), ;, }, if, (, options, ., removeUnusedClassProperties, &&]
[options, ., removeUnusedPrototypeProperties, ), {, passes, ., add, (, removeUnusedPrototypeProperties, ), ;, }, if, (, options, ., removeUnusedClassProperties, &&, !]
[passes, ., add, (, removeUnusedPrototypeProperties, ), ;, }, if, (, options, ., removeUnusedClassProperties, &&, !, isInliningForbidden, (, ), ), {]
[passes, ., add, (, removeUnusedPrototypeProperties, ), ;, }, if, (, options, ., removeUnusedClassProperties, &&, !, isInliningForbidden, (, ), ), {]
[removeUnusedPrototypeProperties, ), ;, }, if, (, options, ., removeUnusedClassProperties, &&, !, isInliningForbidden, (, ), ), {, passes, ., add, (]
[if, (, options, ., removeUnusedClassProperties, &&, !, isInliningForbidden, (, ), ), {, passes, ., add, (, removeUnusedClassProperties, ), ;, }]
[options, ., removeUnusedClassProperties, &&, !, isInliningForbidden, (, ), ), {, passes, ., add, (, removeUnusedClassProperties, ), ;, }, assertAllLoopablePasses, (]
[!, isInliningForbidden, (, ), ), {, passes, ., add, (, removeUnusedClassProperties, ), ;, }, assertAllLoopablePasses, (, passes, ), ;, return]
[., add, (, removeUnusedClassProperties, ), ;, }, assertAllLoopablePasses, (, passes, ), ;, return, passes, ;, }, final, HotSwapPassFactory, checkSideEffects, =]
[removeUnusedClassProperties, ), ;, }, assertAllLoopablePasses, (, passes, ), ;, return, passes, ;, }, final, HotSwapPassFactory, checkSideEffects, =, new, HotSwapPassFactory, (]
[;, }, assertAllLoopablePasses, (, passes, ), ;, return, passes, ;, }, final, HotSwapPassFactory, checkSideEffects, =, new, HotSwapPassFactory, (, "checkSideEffects", ,]
[(, "checkSideEffects", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, boolean, protectHiddenSideEffects, =]
[(, "checkSideEffects", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, boolean, protectHiddenSideEffects, =]
[(, "checkSideEffects", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, boolean, protectHiddenSideEffects, =]
[), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, boolean, protectHiddenSideEffects, =, options, ., protectHiddenSideEffects, &&]
[{, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, boolean, protectHiddenSideEffects, =, options, ., protectHiddenSideEffects, &&, !]
[{, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, boolean, protectHiddenSideEffects, =, options, ., protectHiddenSideEffects, &&, !]
[create, (, final, AbstractCompiler, compiler, ), {, boolean, protectHiddenSideEffects, =, options, ., protectHiddenSideEffects, &&, !, options, ., ideMode, ;, return]
[AbstractCompiler, compiler, ), {, boolean, protectHiddenSideEffects, =, options, ., protectHiddenSideEffects, &&, !, options, ., ideMode, ;, return, new, CheckSideEffects, (]
[), {, boolean, protectHiddenSideEffects, =, options, ., protectHiddenSideEffects, &&, !, options, ., ideMode, ;, return, new, CheckSideEffects, (, compiler, ,]
[), {, boolean, protectHiddenSideEffects, =, options, ., protectHiddenSideEffects, &&, !, options, ., ideMode, ;, return, new, CheckSideEffects, (, compiler, ,]
[), {, boolean, protectHiddenSideEffects, =, options, ., protectHiddenSideEffects, &&, !, options, ., ideMode, ;, return, new, CheckSideEffects, (, compiler, ,]
[=, options, ., protectHiddenSideEffects, &&, !, options, ., ideMode, ;, return, new, CheckSideEffects, (, compiler, ,, options, ., checkSuspiciousCode, ?]
[=, options, ., protectHiddenSideEffects, &&, !, options, ., ideMode, ;, return, new, CheckSideEffects, (, compiler, ,, options, ., checkSuspiciousCode, ?]
[&&, !, options, ., ideMode, ;, return, new, CheckSideEffects, (, compiler, ,, options, ., checkSuspiciousCode, ?, CheckLevel, ., WARNING, :]
[&&, !, options, ., ideMode, ;, return, new, CheckSideEffects, (, compiler, ,, options, ., checkSuspiciousCode, ?, CheckLevel, ., WARNING, :]
[ideMode, ;, return, new, CheckSideEffects, (, compiler, ,, options, ., checkSuspiciousCode, ?, CheckLevel, ., WARNING, :, CheckLevel, ., OFF, ,]
[checkSuspiciousCode, ?, CheckLevel, ., WARNING, :, CheckLevel, ., OFF, ,, protectHiddenSideEffects, ), ;, }, }, ;, final, PassFactory, stripSideEffectProtection, =]
[., WARNING, :, CheckLevel, ., OFF, ,, protectHiddenSideEffects, ), ;, }, }, ;, final, PassFactory, stripSideEffectProtection, =, new, PassFactory, (]
[:, CheckLevel, ., OFF, ,, protectHiddenSideEffects, ), ;, }, }, ;, final, PassFactory, stripSideEffectProtection, =, new, PassFactory, (, "stripSideEffectProtection", ,]
[new, PassFactory, (, "stripSideEffectProtection", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
[true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CheckSideEffects, ., StripProtection, (]
[AbstractCompiler, compiler, ), {, return, new, CheckSideEffects, ., StripProtection, (, compiler, ), ;, }, }, ;, final, HotSwapPassFactory, suspiciousCode, =]
[{, return, new, CheckSideEffects, ., StripProtection, (, compiler, ), ;, }, }, ;, final, HotSwapPassFactory, suspiciousCode, =, new, HotSwapPassFactory, (]
[new, CheckSideEffects, ., StripProtection, (, compiler, ), ;, }, }, ;, final, HotSwapPassFactory, suspiciousCode, =, new, HotSwapPassFactory, (, "suspiciousCode", ,]
[true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, List, <, Callback, >, sharedCallbacks, =]
[true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, List, <, Callback, >, sharedCallbacks, =]
[(, final, AbstractCompiler, compiler, ), {, List, <, Callback, >, sharedCallbacks, =, Lists, ., newArrayList, (, ), ;, if, (]
[(, final, AbstractCompiler, compiler, ), {, List, <, Callback, >, sharedCallbacks, =, Lists, ., newArrayList, (, ), ;, if, (]
[{, List, <, Callback, >, sharedCallbacks, =, Lists, ., newArrayList, (, ), ;, if, (, options, ., checkSuspiciousCode, ), {]
[{, List, <, Callback, >, sharedCallbacks, =, Lists, ., newArrayList, (, ), ;, if, (, options, ., checkSuspiciousCode, ), {]
[>, sharedCallbacks, =, Lists, ., newArrayList, (, ), ;, if, (, options, ., checkSuspiciousCode, ), {, sharedCallbacks, ., add, (]
[if, (, options, ., checkSuspiciousCode, ), {, sharedCallbacks, ., add, (, new, CheckSuspiciousCode, (, ), ), ;, }, if, (]
[if, (, options, ., checkSuspiciousCode, ), {, sharedCallbacks, ., add, (, new, CheckSuspiciousCode, (, ), ), ;, }, if, (]
[checkSuspiciousCode, ), {, sharedCallbacks, ., add, (, new, CheckSuspiciousCode, (, ), ), ;, }, if, (, options, ., enables, (]
[checkSuspiciousCode, ), {, sharedCallbacks, ., add, (, new, CheckSuspiciousCode, (, ), ), ;, }, if, (, options, ., enables, (]
[(, new, CheckSuspiciousCode, (, ), ), ;, }, if, (, options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ), {]
[(, new, CheckSuspiciousCode, (, ), ), ;, }, if, (, options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ), {]
[), ), ;, }, if, (, options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ), {, sharedCallbacks, ., add, (]
[}, if, (, options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ), {, sharedCallbacks, ., add, (, new, CheckGlobalThis, (]
[DiagnosticGroups, ., GLOBAL_THIS, ), ), {, sharedCallbacks, ., add, (, new, CheckGlobalThis, (, compiler, ), ), ;, }, if, (]
[DiagnosticGroups, ., GLOBAL_THIS, ), ), {, sharedCallbacks, ., add, (, new, CheckGlobalThis, (, compiler, ), ), ;, }, if, (]
[), {, sharedCallbacks, ., add, (, new, CheckGlobalThis, (, compiler, ), ), ;, }, if, (, options, ., enables, (]
[), {, sharedCallbacks, ., add, (, new, CheckGlobalThis, (, compiler, ), ), ;, }, if, (, options, ., enables, (]
[new, CheckGlobalThis, (, compiler, ), ), ;, }, if, (, options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {]
[new, CheckGlobalThis, (, compiler, ), ), ;, }, if, (, options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {]
[), ), ;, }, if, (, options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {, sharedCallbacks, ., add, (]
[}, if, (, options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {, sharedCallbacks, ., add, (, new, CheckDebuggerStatement, (]
[(, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {, sharedCallbacks, ., add, (, new, CheckDebuggerStatement, (, compiler, ), ), ;, }, return]
[., DEBUGGER_STATEMENT_PRESENT, ), ), {, sharedCallbacks, ., add, (, new, CheckDebuggerStatement, (, compiler, ), ), ;, }, return, combineChecks, (]
[), ), {, sharedCallbacks, ., add, (, new, CheckDebuggerStatement, (, compiler, ), ), ;, }, return, combineChecks, (, compiler, ,]
[;, }, }, ;, private, void, assertAllOneTimePasses, (, List, <, PassFactory, >, passes, ), {, for, (, PassFactory, pass, :]
[;, private, void, assertAllOneTimePasses, (, List, <, PassFactory, >, passes, ), {, for, (, PassFactory, pass, :, passes, ), {]
[;, private, void, assertAllOneTimePasses, (, List, <, PassFactory, >, passes, ), {, for, (, PassFactory, pass, :, passes, ), {]
[(, List, <, PassFactory, >, passes, ), {, for, (, PassFactory, pass, :, passes, ), {, Preconditions, ., checkState, (]
[(, List, <, PassFactory, >, passes, ), {, for, (, PassFactory, pass, :, passes, ), {, Preconditions, ., checkState, (]
[), ;, }, }, private, void, assertAllLoopablePasses, (, List, <, PassFactory, >, passes, ), {, for, (, PassFactory, pass, :]
[}, private, void, assertAllLoopablePasses, (, List, <, PassFactory, >, passes, ), {, for, (, PassFactory, pass, :, passes, ), {]
[}, private, void, assertAllLoopablePasses, (, List, <, PassFactory, >, passes, ), {, for, (, PassFactory, pass, :, passes, ), {]
[(, List, <, PassFactory, >, passes, ), {, for, (, PassFactory, pass, :, passes, ), {, Preconditions, ., checkState, (]
[List, <, PassFactory, >, passes, ), {, for, (, PassFactory, pass, :, passes, ), {, Preconditions, ., checkState, (, !]
[List, <, PassFactory, >, passes, ), {, for, (, PassFactory, pass, :, passes, ), {, Preconditions, ., checkState, (, !]
[), {, Preconditions, ., checkState, (, !, pass, ., isOneTimePass, (, ), ), ;, }, }, final, HotSwapPassFactory, checkControlStructures, =]
[., checkState, (, !, pass, ., isOneTimePass, (, ), ), ;, }, }, final, HotSwapPassFactory, checkControlStructures, =, new, HotSwapPassFactory, (]
[(, !, pass, ., isOneTimePass, (, ), ), ;, }, }, final, HotSwapPassFactory, checkControlStructures, =, new, HotSwapPassFactory, (, "checkControlStructures", ,]
[=, new, HotSwapPassFactory, (, "checkControlStructures", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "checkControlStructures", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ControlStructureCheck, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, ControlStructureCheck, (, compiler, ), ;, }, }, ;, final, HotSwapPassFactory, checkRequires, =]
[compiler, ), {, return, new, ControlStructureCheck, (, compiler, ), ;, }, }, ;, final, HotSwapPassFactory, checkRequires, =, new, HotSwapPassFactory, (]
[{, return, new, ControlStructureCheck, (, compiler, ), ;, }, }, ;, final, HotSwapPassFactory, checkRequires, =, new, HotSwapPassFactory, (, "checkRequires", ,]
[=, new, HotSwapPassFactory, (, "checkRequires", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "checkRequires", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CheckRequiresForConstructors, (]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CheckRequiresForConstructors, (, compiler, ,]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CheckRequiresForConstructors, (, compiler, ,]
[), {, return, new, CheckRequiresForConstructors, (, compiler, ,, options, ., checkRequires, ), ;, }, }, ;, final, HotSwapPassFactory, checkProvides, =]
[new, CheckRequiresForConstructors, (, compiler, ,, options, ., checkRequires, ), ;, }, }, ;, final, HotSwapPassFactory, checkProvides, =, new, HotSwapPassFactory, (]
[(, compiler, ,, options, ., checkRequires, ), ;, }, }, ;, final, HotSwapPassFactory, checkProvides, =, new, HotSwapPassFactory, (, "checkProvides", ,]
[=, new, HotSwapPassFactory, (, "checkProvides", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "checkProvides", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CheckProvides, (]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CheckProvides, (, compiler, ,]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CheckProvides, (, compiler, ,]
[return, new, CheckProvides, (, compiler, ,, options, ., checkProvides, ), ;, }, }, ;, private, static, final, DiagnosticType, GENERATE_EXPORTS_ERROR, =]
[return, new, CheckProvides, (, compiler, ,, options, ., checkProvides, ), ;, }, }, ;, private, static, final, DiagnosticType, GENERATE_EXPORTS_ERROR, =]
[compiler, ,, options, ., checkProvides, ), ;, }, }, ;, private, static, final, DiagnosticType, GENERATE_EXPORTS_ERROR, =, DiagnosticType, ., error, (]
[options, ., checkProvides, ), ;, }, }, ;, private, static, final, DiagnosticType, GENERATE_EXPORTS_ERROR, =, DiagnosticType, ., error, (, "JSC_GENERATE_EXPORTS_ERROR", ,]
[options, ., checkProvides, ), ;, }, }, ;, private, static, final, DiagnosticType, GENERATE_EXPORTS_ERROR, =, DiagnosticType, ., error, (, "JSC_GENERATE_EXPORTS_ERROR", ,]
[checkProvides, ), ;, }, }, ;, private, static, final, DiagnosticType, GENERATE_EXPORTS_ERROR, =, DiagnosticType, ., error, (, "JSC_GENERATE_EXPORTS_ERROR", ,, "Exports can only be generated if export symbol/property ", +]
[static, final, DiagnosticType, GENERATE_EXPORTS_ERROR, =, DiagnosticType, ., error, (, "JSC_GENERATE_EXPORTS_ERROR", ,, "Exports can only be generated if export symbol/property ", +, "functions are set.", ), ;, final, PassFactory, generateExports, =]
[GENERATE_EXPORTS_ERROR, =, DiagnosticType, ., error, (, "JSC_GENERATE_EXPORTS_ERROR", ,, "Exports can only be generated if export symbol/property ", +, "functions are set.", ), ;, final, PassFactory, generateExports, =, new, PassFactory, (]
[DiagnosticType, ., error, (, "JSC_GENERATE_EXPORTS_ERROR", ,, "Exports can only be generated if export symbol/property ", +, "functions are set.", ), ;, final, PassFactory, generateExports, =, new, PassFactory, (, "generateExports", ,]
[PassFactory, (, "generateExports", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, CodingConvention, convention, =]
[PassFactory, (, "generateExports", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, CodingConvention, convention, =]
[Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (]
[Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (]
[Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (]
[Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (]
[compiler, ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (, convention, ., getExportSymbolFunction, (, ), !=]
[{, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (, convention, ., getExportSymbolFunction, (, ), !=, null, &&]
[{, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (, convention, ., getExportSymbolFunction, (, ), !=, null, &&]
[{, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (, convention, ., getExportSymbolFunction, (, ), !=, null, &&]
[getCodingConvention, (, ), ;, if, (, convention, ., getExportSymbolFunction, (, ), !=, null, &&, convention, ., getExportPropertyFunction, (, ), !=]
[if, (, convention, ., getExportSymbolFunction, (, ), !=, null, &&, convention, ., getExportPropertyFunction, (, ), !=, null, ), {, return]
[., getExportSymbolFunction, (, ), !=, null, &&, convention, ., getExportPropertyFunction, (, ), !=, null, ), {, return, new, GenerateExports, (]
[(, ), !=, null, &&, convention, ., getExportPropertyFunction, (, ), !=, null, ), {, return, new, GenerateExports, (, compiler, ,]
[(, ), !=, null, &&, convention, ., getExportPropertyFunction, (, ), !=, null, ), {, return, new, GenerateExports, (, compiler, ,]
[., getExportPropertyFunction, (, ), !=, null, ), {, return, new, GenerateExports, (, compiler, ,, convention, ., getExportSymbolFunction, (, ), ,]
[., getExportPropertyFunction, (, ), !=, null, ), {, return, new, GenerateExports, (, compiler, ,, convention, ., getExportSymbolFunction, (, ), ,]
[(, compiler, ,, convention, ., getExportSymbolFunction, (, ), ,, convention, ., getExportPropertyFunction, (, ), ), ;, }, else, {, return]
[convention, ., getExportSymbolFunction, (, ), ,, convention, ., getExportPropertyFunction, (, ), ), ;, }, else, {, return, new, ErrorPass, (]
[getExportSymbolFunction, (, ), ,, convention, ., getExportPropertyFunction, (, ), ), ;, }, else, {, return, new, ErrorPass, (, compiler, ,]
[}, else, {, return, new, ErrorPass, (, compiler, ,, GENERATE_EXPORTS_ERROR, ), ;, }, }, }, ;, final, PassFactory, exportTestFunctions, =]
[return, new, ErrorPass, (, compiler, ,, GENERATE_EXPORTS_ERROR, ), ;, }, }, }, ;, final, PassFactory, exportTestFunctions, =, new, PassFactory, (]
[ErrorPass, (, compiler, ,, GENERATE_EXPORTS_ERROR, ), ;, }, }, }, ;, final, PassFactory, exportTestFunctions, =, new, PassFactory, (, "exportTestFunctions", ,]
[PassFactory, (, "exportTestFunctions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, CodingConvention, convention, =]
[PassFactory, (, "exportTestFunctions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, CodingConvention, convention, =]
[Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (]
[Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (]
[Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (]
[compiler, ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (, convention, ., getExportSymbolFunction, (, ), !=]
[convention, =, compiler, ., getCodingConvention, (, ), ;, if, (, convention, ., getExportSymbolFunction, (, ), !=, null, ), {, return]
[., getCodingConvention, (, ), ;, if, (, convention, ., getExportSymbolFunction, (, ), !=, null, ), {, return, new, ExportTestFunctions, (]
[(, ), ;, if, (, convention, ., getExportSymbolFunction, (, ), !=, null, ), {, return, new, ExportTestFunctions, (, compiler, ,]
[(, ), ;, if, (, convention, ., getExportSymbolFunction, (, ), !=, null, ), {, return, new, ExportTestFunctions, (, compiler, ,]
[., getExportSymbolFunction, (, ), !=, null, ), {, return, new, ExportTestFunctions, (, compiler, ,, convention, ., getExportSymbolFunction, (, ), ,]
[., getExportSymbolFunction, (, ), !=, null, ), {, return, new, ExportTestFunctions, (, compiler, ,, convention, ., getExportSymbolFunction, (, ), ,]
[(, compiler, ,, convention, ., getExportSymbolFunction, (, ), ,, convention, ., getExportPropertyFunction, (, ), ), ;, }, else, {, return]
[convention, ., getExportSymbolFunction, (, ), ,, convention, ., getExportPropertyFunction, (, ), ), ;, }, else, {, return, new, ErrorPass, (]
[getExportSymbolFunction, (, ), ,, convention, ., getExportPropertyFunction, (, ), ), ;, }, else, {, return, new, ErrorPass, (, compiler, ,]
[}, else, {, return, new, ErrorPass, (, compiler, ,, GENERATE_EXPORTS_ERROR, ), ;, }, }, }, ;, final, PassFactory, gatherRawExports, =]
[return, new, ErrorPass, (, compiler, ,, GENERATE_EXPORTS_ERROR, ), ;, }, }, }, ;, final, PassFactory, gatherRawExports, =, new, PassFactory, (]
[ErrorPass, (, compiler, ,, GENERATE_EXPORTS_ERROR, ), ;, }, }, }, ;, final, PassFactory, gatherRawExports, =, new, PassFactory, (, "gatherRawExports", ,]
[(, "gatherRawExports", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, final, GatherRawExports, pass, =]
[true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, final, GatherRawExports, pass, =, new, GatherRawExports, (]
[Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, final, GatherRawExports, pass, =, new, GatherRawExports, (, compiler, ), ;, return]
[;, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[;, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[(, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, pass, ., process, (]
[{, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, pass, ., process, (, externs, ,]
[process, (, Node, externs, ,, Node, root, ), {, pass, ., process, (, externs, ,, root, ), ;, if, (]
[process, (, Node, externs, ,, Node, root, ), {, pass, ., process, (, externs, ,, root, ), ;, if, (]
[Node, externs, ,, Node, root, ), {, pass, ., process, (, externs, ,, root, ), ;, if, (, exportedNames, ==]
[Node, root, ), {, pass, ., process, (, externs, ,, root, ), ;, if, (, exportedNames, ==, null, ), {]
[), {, pass, ., process, (, externs, ,, root, ), ;, if, (, exportedNames, ==, null, ), {, exportedNames, =]
[), {, pass, ., process, (, externs, ,, root, ), ;, if, (, exportedNames, ==, null, ), {, exportedNames, =]
[,, root, ), ;, if, (, exportedNames, ==, null, ), {, exportedNames, =, Sets, ., newHashSet, (, ), ;, }]
[,, root, ), ;, if, (, exportedNames, ==, null, ), {, exportedNames, =, Sets, ., newHashSet, (, ), ;, }]
[if, (, exportedNames, ==, null, ), {, exportedNames, =, Sets, ., newHashSet, (, ), ;, }, exportedNames, ., addAll, (]
[if, (, exportedNames, ==, null, ), {, exportedNames, =, Sets, ., newHashSet, (, ), ;, }, exportedNames, ., addAll, (]
[), ;, }, exportedNames, ., addAll, (, pass, ., getExportedVariableNames, (, ), ), ;, }, }, ;, }, }, ;]
[exportedNames, ., addAll, (, pass, ., getExportedVariableNames, (, ), ), ;, }, }, ;, }, }, ;, @, SuppressWarnings, (]
[getExportedVariableNames, (, ), ), ;, }, }, ;, }, }, ;, @, SuppressWarnings, (, "deprecation", ), final, HotSwapPassFactory, closurePrimitives, =]
[), ;, }, }, ;, }, }, ;, @, SuppressWarnings, (, "deprecation", ), final, HotSwapPassFactory, closurePrimitives, =, new, HotSwapPassFactory, (]
[}, }, ;, }, }, ;, @, SuppressWarnings, (, "deprecation", ), final, HotSwapPassFactory, closurePrimitives, =, new, HotSwapPassFactory, (, "closurePrimitives", ,]
[closurePrimitives, =, new, HotSwapPassFactory, (, "closurePrimitives", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {]
[new, HotSwapPassFactory, (, "closurePrimitives", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, maybeInitializePreprocessorSymbolTable, (]
[{, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, maybeInitializePreprocessorSymbolTable, (, compiler, ), ;, final, ProcessClosurePrimitives, pass, =]
[protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, maybeInitializePreprocessorSymbolTable, (, compiler, ), ;, final, ProcessClosurePrimitives, pass, =, new, ProcessClosurePrimitives, (]
[create, (, AbstractCompiler, compiler, ), {, maybeInitializePreprocessorSymbolTable, (, compiler, ), ;, final, ProcessClosurePrimitives, pass, =, new, ProcessClosurePrimitives, (, compiler, ,]
[AbstractCompiler, compiler, ), {, maybeInitializePreprocessorSymbolTable, (, compiler, ), ;, final, ProcessClosurePrimitives, pass, =, new, ProcessClosurePrimitives, (, compiler, ,, preprocessorSymbolTable, ,]
[AbstractCompiler, compiler, ), {, maybeInitializePreprocessorSymbolTable, (, compiler, ), ;, final, ProcessClosurePrimitives, pass, =, new, ProcessClosurePrimitives, (, compiler, ,, preprocessorSymbolTable, ,]
[compiler, ), ;, final, ProcessClosurePrimitives, pass, =, new, ProcessClosurePrimitives, (, compiler, ,, preprocessorSymbolTable, ,, options, ., brokenClosureRequiresLevel, ), ;, return]
[;, return, new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[;, return, new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[(, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, pass, ., process, (]
[{, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, pass, ., process, (, externs, ,]
[public, void, process, (, Node, externs, ,, Node, root, ), {, pass, ., process, (, externs, ,, root, ), ;]
[process, (, Node, externs, ,, Node, root, ), {, pass, ., process, (, externs, ,, root, ), ;, exportedNames, =]
[process, (, Node, externs, ,, Node, root, ), {, pass, ., process, (, externs, ,, root, ), ;, exportedNames, =]
[pass, ., getExportedVariableNames, (, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[pass, ., getExportedVariableNames, (, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, pass, ., hotSwapScript, (]
[}, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, pass, ., hotSwapScript, (, scriptRoot, ,]
[{, pass, ., hotSwapScript, (, scriptRoot, ,, originalRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, jqueryAliases, =]
[hotSwapScript, (, scriptRoot, ,, originalRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, jqueryAliases, =, new, PassFactory, (]
[scriptRoot, ,, originalRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, jqueryAliases, =, new, PassFactory, (, "jqueryAliases", ,]
[=, new, PassFactory, (, "jqueryAliases", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "jqueryAliases", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ExpandJqueryAliases, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, ExpandJqueryAliases, (, compiler, ), ;, }, }, ;, final, PassFactory, replaceMessages, =]
[compiler, ), {, return, new, ExpandJqueryAliases, (, compiler, ), ;, }, }, ;, final, PassFactory, replaceMessages, =, new, PassFactory, (]
[{, return, new, ExpandJqueryAliases, (, compiler, ), ;, }, }, ;, final, PassFactory, replaceMessages, =, new, PassFactory, (, "replaceMessages", ,]
[new, PassFactory, (, "replaceMessages", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
["replaceMessages", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ReplaceMessages, (]
[true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ReplaceMessages, (, compiler, ,]
[true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ReplaceMessages, (, compiler, ,]
[Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ReplaceMessages, (, compiler, ,, options, ., messageBundle, ,]
[CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ReplaceMessages, (, compiler, ,, options, ., messageBundle, ,, true, ,]
[CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ReplaceMessages, (, compiler, ,, options, ., messageBundle, ,, true, ,]
[CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ReplaceMessages, (, compiler, ,, options, ., messageBundle, ,, true, ,]
[), {, return, new, ReplaceMessages, (, compiler, ,, options, ., messageBundle, ,, true, ,, JsMessage, ., Style, ., getFromParams, (]
[return, new, ReplaceMessages, (, compiler, ,, options, ., messageBundle, ,, true, ,, JsMessage, ., Style, ., getFromParams, (, true, ,]
[(, compiler, ,, options, ., messageBundle, ,, true, ,, JsMessage, ., Style, ., getFromParams, (, true, ,, false, ), ,]
[., Style, ., getFromParams, (, true, ,, false, ), ,, false, ), ;, }, }, ;, final, PassFactory, replaceMessagesForChrome, =]
[getFromParams, (, true, ,, false, ), ,, false, ), ;, }, }, ;, final, PassFactory, replaceMessagesForChrome, =, new, PassFactory, (]
[true, ,, false, ), ,, false, ), ;, }, }, ;, final, PassFactory, replaceMessagesForChrome, =, new, PassFactory, (, "replaceMessages", ,]
[new, PassFactory, (, "replaceMessages", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
["replaceMessages", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ReplaceMessagesForChrome, (]
[true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ReplaceMessagesForChrome, (, compiler, ,]
[@, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ReplaceMessagesForChrome, (, compiler, ,, new, GoogleJsMessageIdGenerator, (]
[@, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ReplaceMessagesForChrome, (, compiler, ,, new, GoogleJsMessageIdGenerator, (]
[(, final, AbstractCompiler, compiler, ), {, return, new, ReplaceMessagesForChrome, (, compiler, ,, new, GoogleJsMessageIdGenerator, (, options, ., tcProjectId, ), ,]
[AbstractCompiler, compiler, ), {, return, new, ReplaceMessagesForChrome, (, compiler, ,, new, GoogleJsMessageIdGenerator, (, options, ., tcProjectId, ), ,, true, ,]
[AbstractCompiler, compiler, ), {, return, new, ReplaceMessagesForChrome, (, compiler, ,, new, GoogleJsMessageIdGenerator, (, options, ., tcProjectId, ), ,, true, ,]
[AbstractCompiler, compiler, ), {, return, new, ReplaceMessagesForChrome, (, compiler, ,, new, GoogleJsMessageIdGenerator, (, options, ., tcProjectId, ), ,, true, ,]
[ReplaceMessagesForChrome, (, compiler, ,, new, GoogleJsMessageIdGenerator, (, options, ., tcProjectId, ), ,, true, ,, JsMessage, ., Style, ., getFromParams, (]
[compiler, ,, new, GoogleJsMessageIdGenerator, (, options, ., tcProjectId, ), ,, true, ,, JsMessage, ., Style, ., getFromParams, (, true, ,]
[,, JsMessage, ., Style, ., getFromParams, (, true, ,, false, ), ), ;, }, }, ;, final, HotSwapPassFactory, closureGoogScopeAliases, =]
[Style, ., getFromParams, (, true, ,, false, ), ), ;, }, }, ;, final, HotSwapPassFactory, closureGoogScopeAliases, =, new, HotSwapPassFactory, (]
[getFromParams, (, true, ,, false, ), ), ;, }, }, ;, final, HotSwapPassFactory, closureGoogScopeAliases, =, new, HotSwapPassFactory, (, "closureGoogScopeAliases", ,]
[closureGoogScopeAliases, =, new, HotSwapPassFactory, (, "closureGoogScopeAliases", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {]
[new, HotSwapPassFactory, (, "closureGoogScopeAliases", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, maybeInitializePreprocessorSymbolTable, (]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, maybeInitializePreprocessorSymbolTable, (, compiler, ), ;, return]
[{, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, maybeInitializePreprocessorSymbolTable, (, compiler, ), ;, return, new, ScopedAliases, (]
[Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, maybeInitializePreprocessorSymbolTable, (, compiler, ), ;, return, new, ScopedAliases, (, compiler, ,]
[HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, maybeInitializePreprocessorSymbolTable, (, compiler, ), ;, return, new, ScopedAliases, (, compiler, ,, preprocessorSymbolTable, ,]
[HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, maybeInitializePreprocessorSymbolTable, (, compiler, ), ;, return, new, ScopedAliases, (, compiler, ,, preprocessorSymbolTable, ,]
[ScopedAliases, (, compiler, ,, preprocessorSymbolTable, ,, options, ., getAliasTransformationHandler, (, ), ), ;, }, }, ;, final, HotSwapPassFactory, closureRewriteGoogClass, =]
[,, preprocessorSymbolTable, ,, options, ., getAliasTransformationHandler, (, ), ), ;, }, }, ;, final, HotSwapPassFactory, closureRewriteGoogClass, =, new, HotSwapPassFactory, (]
[,, options, ., getAliasTransformationHandler, (, ), ), ;, }, }, ;, final, HotSwapPassFactory, closureRewriteGoogClass, =, new, HotSwapPassFactory, (, "closureRewriteGoogClass", ,]
[=, new, HotSwapPassFactory, (, "closureRewriteGoogClass", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "closureRewriteGoogClass", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ClosureRewriteClass, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, ClosureRewriteClass, (, compiler, ), ;, }, }, ;, final, PassFactory, closureCheckGetCssName, =]
[compiler, ), {, return, new, ClosureRewriteClass, (, compiler, ), ;, }, }, ;, final, PassFactory, closureCheckGetCssName, =, new, PassFactory, (]
[{, return, new, ClosureRewriteClass, (, compiler, ), ;, }, }, ;, final, PassFactory, closureCheckGetCssName, =, new, PassFactory, (, "closureCheckGetCssName", ,]
[PassFactory, (, "closureCheckGetCssName", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, String, blacklist, =]
[PassFactory, (, "closureCheckGetCssName", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, String, blacklist, =]
[true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, String, blacklist, =, options, ., checkMissingGetCssNameBlacklist, ;]
[true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, String, blacklist, =, options, ., checkMissingGetCssNameBlacklist, ;]
[Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, String, blacklist, =, options, ., checkMissingGetCssNameBlacklist, ;, Preconditions, ., checkState, (]
[Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, String, blacklist, =, options, ., checkMissingGetCssNameBlacklist, ;, Preconditions, ., checkState, (]
[Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, String, blacklist, =, options, ., checkMissingGetCssNameBlacklist, ;, Preconditions, ., checkState, (]
[CompilerPass, create, (, AbstractCompiler, compiler, ), {, String, blacklist, =, options, ., checkMissingGetCssNameBlacklist, ;, Preconditions, ., checkState, (, blacklist, !=]
[(, AbstractCompiler, compiler, ), {, String, blacklist, =, options, ., checkMissingGetCssNameBlacklist, ;, Preconditions, ., checkState, (, blacklist, !=, null, &&]
[AbstractCompiler, compiler, ), {, String, blacklist, =, options, ., checkMissingGetCssNameBlacklist, ;, Preconditions, ., checkState, (, blacklist, !=, null, &&, !]
[AbstractCompiler, compiler, ), {, String, blacklist, =, options, ., checkMissingGetCssNameBlacklist, ;, Preconditions, ., checkState, (, blacklist, !=, null, &&, !]
[=, options, ., checkMissingGetCssNameBlacklist, ;, Preconditions, ., checkState, (, blacklist, !=, null, &&, !, blacklist, ., isEmpty, (, ), ,]
[;, Preconditions, ., checkState, (, blacklist, !=, null, &&, !, blacklist, ., isEmpty, (, ), ,, "Not checking use of goog.getCssName because of empty blacklist.", ), ;, return]
[checkState, (, blacklist, !=, null, &&, !, blacklist, ., isEmpty, (, ), ,, "Not checking use of goog.getCssName because of empty blacklist.", ), ;, return, new, CheckMissingGetCssName, (]
[blacklist, !=, null, &&, !, blacklist, ., isEmpty, (, ), ,, "Not checking use of goog.getCssName because of empty blacklist.", ), ;, return, new, CheckMissingGetCssName, (, compiler, ,]
[blacklist, !=, null, &&, !, blacklist, ., isEmpty, (, ), ,, "Not checking use of goog.getCssName because of empty blacklist.", ), ;, return, new, CheckMissingGetCssName, (, compiler, ,]
[!, blacklist, ., isEmpty, (, ), ,, "Not checking use of goog.getCssName because of empty blacklist.", ), ;, return, new, CheckMissingGetCssName, (, compiler, ,, options, ., checkMissingGetCssNameLevel, ,]
[return, new, CheckMissingGetCssName, (, compiler, ,, options, ., checkMissingGetCssNameLevel, ,, blacklist, ), ;, }, }, ;, final, PassFactory, closureReplaceGetCssName, =]
[(, compiler, ,, options, ., checkMissingGetCssNameLevel, ,, blacklist, ), ;, }, }, ;, final, PassFactory, closureReplaceGetCssName, =, new, PassFactory, (]
[,, options, ., checkMissingGetCssNameLevel, ,, blacklist, ), ;, }, }, ;, final, PassFactory, closureReplaceGetCssName, =, new, PassFactory, (, "closureReplaceGetCssName", ,]
[new, PassFactory, (, "closureReplaceGetCssName", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
[Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, Map, <, String, ,, Integer, >, newCssNames, =]
[(, Node, externs, ,, Node, jsRoot, ), {, Map, <, String, ,, Integer, >, newCssNames, =, null, ;, if, (]
[(, Node, externs, ,, Node, jsRoot, ), {, Map, <, String, ,, Integer, >, newCssNames, =, null, ;, if, (]
[jsRoot, ), {, Map, <, String, ,, Integer, >, newCssNames, =, null, ;, if, (, options, ., gatherCssNames, ), {]
[{, Map, <, String, ,, Integer, >, newCssNames, =, null, ;, if, (, options, ., gatherCssNames, ), {, newCssNames, =]
[{, Map, <, String, ,, Integer, >, newCssNames, =, null, ;, if, (, options, ., gatherCssNames, ), {, newCssNames, =]
[;, if, (, options, ., gatherCssNames, ), {, newCssNames, =, Maps, ., newHashMap, (, ), ;, }, ReplaceCssNames, pass, =]
[options, ., gatherCssNames, ), {, newCssNames, =, Maps, ., newHashMap, (, ), ;, }, ReplaceCssNames, pass, =, new, ReplaceCssNames, (]
[gatherCssNames, ), {, newCssNames, =, Maps, ., newHashMap, (, ), ;, }, ReplaceCssNames, pass, =, new, ReplaceCssNames, (, compiler, ,]
[{, newCssNames, =, Maps, ., newHashMap, (, ), ;, }, ReplaceCssNames, pass, =, new, ReplaceCssNames, (, compiler, ,, newCssNames, ,]
[{, newCssNames, =, Maps, ., newHashMap, (, ), ;, }, ReplaceCssNames, pass, =, new, ReplaceCssNames, (, compiler, ,, newCssNames, ,]
[newHashMap, (, ), ;, }, ReplaceCssNames, pass, =, new, ReplaceCssNames, (, compiler, ,, newCssNames, ,, options, ., cssRenamingWhitelist, ), ;]
[newHashMap, (, ), ;, }, ReplaceCssNames, pass, =, new, ReplaceCssNames, (, compiler, ,, newCssNames, ,, options, ., cssRenamingWhitelist, ), ;]
[}, ReplaceCssNames, pass, =, new, ReplaceCssNames, (, compiler, ,, newCssNames, ,, options, ., cssRenamingWhitelist, ), ;, pass, ., process, (]
[pass, =, new, ReplaceCssNames, (, compiler, ,, newCssNames, ,, options, ., cssRenamingWhitelist, ), ;, pass, ., process, (, externs, ,]
[ReplaceCssNames, (, compiler, ,, newCssNames, ,, options, ., cssRenamingWhitelist, ), ;, pass, ., process, (, externs, ,, jsRoot, ), ;]
[compiler, ,, newCssNames, ,, options, ., cssRenamingWhitelist, ), ;, pass, ., process, (, externs, ,, jsRoot, ), ;, cssNames, =]
[(, externs, ,, jsRoot, ), ;, cssNames, =, newCssNames, ;, }, }, ;, }, }, ;, final, PassFactory, createSyntheticBlocks, =]
[jsRoot, ), ;, cssNames, =, newCssNames, ;, }, }, ;, }, }, ;, final, PassFactory, createSyntheticBlocks, =, new, PassFactory, (]
[;, cssNames, =, newCssNames, ;, }, }, ;, }, }, ;, final, PassFactory, createSyntheticBlocks, =, new, PassFactory, (, "createSyntheticBlocks", ,]
[=, new, PassFactory, (, "createSyntheticBlocks", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "createSyntheticBlocks", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CreateSyntheticBlocks, (]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CreateSyntheticBlocks, (, compiler, ,]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CreateSyntheticBlocks, (, compiler, ,]
[@, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CreateSyntheticBlocks, (, compiler, ,, options, ., syntheticBlockStartMarker, ,]
[@, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CreateSyntheticBlocks, (, compiler, ,, options, ., syntheticBlockStartMarker, ,]
[CreateSyntheticBlocks, (, compiler, ,, options, ., syntheticBlockStartMarker, ,, options, ., syntheticBlockEndMarker, ), ;, }, }, ;, final, PassFactory, peepholeOptimizations, =]
[,, options, ., syntheticBlockStartMarker, ,, options, ., syntheticBlockEndMarker, ), ;, }, }, ;, final, PassFactory, peepholeOptimizations, =, new, PassFactory, (]
[., syntheticBlockStartMarker, ,, options, ., syntheticBlockEndMarker, ), ;, }, }, ;, final, PassFactory, peepholeOptimizations, =, new, PassFactory, (, "peepholeOptimizations", ,]
[(, "peepholeOptimizations", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, final, boolean, late, =]
[false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, final, boolean, late, =, false, ;, return]
[@, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, final, boolean, late, =, false, ;, return, new, PeepholeOptimizationsPass, (]
[protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, final, boolean, late, =, false, ;, return, new, PeepholeOptimizationsPass, (, compiler, ,]
[(, AbstractCompiler, compiler, ), {, final, boolean, late, =, false, ;, return, new, PeepholeOptimizationsPass, (, compiler, ,, new, PeepholeSubstituteAlternateSyntax, (]
[), {, final, boolean, late, =, false, ;, return, new, PeepholeOptimizationsPass, (, compiler, ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,]
[boolean, late, =, false, ;, return, new, PeepholeOptimizationsPass, (, compiler, ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (]
[false, ;, return, new, PeepholeOptimizationsPass, (, compiler, ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,]
[(, compiler, ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeRemoveDeadCode, (, ), ,]
[new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeFoldConstants, (]
[late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeFoldConstants, (, late, ), ,]
[,, new, PeepholeFoldConstants, (, late, ), ,, new, PeepholeCollectPropertyAssignments, (, ), ), ;, }, }, ;, final, PassFactory, latePeepholeOptimizations, =]
[(, late, ), ,, new, PeepholeCollectPropertyAssignments, (, ), ), ;, }, }, ;, final, PassFactory, latePeepholeOptimizations, =, new, PassFactory, (]
[), ,, new, PeepholeCollectPropertyAssignments, (, ), ), ;, }, }, ;, final, PassFactory, latePeepholeOptimizations, =, new, PassFactory, (, "latePeepholeOptimizations", ,]
[(, "latePeepholeOptimizations", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, final, boolean, late, =]
[true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, final, boolean, late, =, true, ;, return]
[@, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, final, boolean, late, =, true, ;, return, new, PeepholeOptimizationsPass, (]
[protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, final, boolean, late, =, true, ;, return, new, PeepholeOptimizationsPass, (, compiler, ,]
[compiler, ), {, final, boolean, late, =, true, ;, return, new, PeepholeOptimizationsPass, (, compiler, ,, new, StatementFusion, (, ), ,]
[late, =, true, ;, return, new, PeepholeOptimizationsPass, (, compiler, ,, new, StatementFusion, (, ), ,, new, PeepholeRemoveDeadCode, (, ), ,]
[;, return, new, PeepholeOptimizationsPass, (, compiler, ,, new, StatementFusion, (, ), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeSubstituteAlternateSyntax, (]
[PeepholeOptimizationsPass, (, compiler, ,, new, StatementFusion, (, ), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,]
[,, new, StatementFusion, (, ), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (]
[(, ), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,]
[new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeFoldConstants, (]
[), ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeFoldConstants, (, late, ), ,]
[,, new, PeepholeFoldConstants, (, late, ), ,, new, ReorderConstantExpression, (, ), ), ;, }, }, ;, final, HotSwapPassFactory, checkVars, =]
[(, late, ), ,, new, ReorderConstantExpression, (, ), ), ;, }, }, ;, final, HotSwapPassFactory, checkVars, =, new, HotSwapPassFactory, (]
[), ,, new, ReorderConstantExpression, (, ), ), ;, }, }, ;, final, HotSwapPassFactory, checkVars, =, new, HotSwapPassFactory, (, "checkVars", ,]
[=, new, HotSwapPassFactory, (, "checkVars", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "checkVars", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, VarCheck, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, VarCheck, (, compiler, ), ;, }, }, ;, final, PassFactory, checkRegExp, =]
[compiler, ), {, return, new, VarCheck, (, compiler, ), ;, }, }, ;, final, PassFactory, checkRegExp, =, new, PassFactory, (]
[{, return, new, VarCheck, (, compiler, ), ;, }, }, ;, final, PassFactory, checkRegExp, =, new, PassFactory, (, "checkRegExp", ,]
["checkRegExp", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, final, CheckRegExp, pass, =]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, final, CheckRegExp, pass, =, new, CheckRegExp, (]
[protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, final, CheckRegExp, pass, =, new, CheckRegExp, (, compiler, ), ;, return]
[;, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[;, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[(, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, pass, ., process, (]
[{, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, pass, ., process, (, externs, ,]
[public, void, process, (, Node, externs, ,, Node, root, ), {, pass, ., process, (, externs, ,, root, ), ;]
[public, void, process, (, Node, externs, ,, Node, root, ), {, pass, ., process, (, externs, ,, root, ), ;]
[Node, externs, ,, Node, root, ), {, pass, ., process, (, externs, ,, root, ), ;, compiler, ., setHasRegExpGlobalReferences, (]
[Node, externs, ,, Node, root, ), {, pass, ., process, (, externs, ,, root, ), ;, compiler, ., setHasRegExpGlobalReferences, (]
[., setHasRegExpGlobalReferences, (, pass, ., isGlobalRegExpPropertiesUsed, (, ), ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkVariableReferences, =]
[pass, ., isGlobalRegExpPropertiesUsed, (, ), ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkVariableReferences, =, new, HotSwapPassFactory, (]
[isGlobalRegExpPropertiesUsed, (, ), ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkVariableReferences, =, new, HotSwapPassFactory, (, "checkVariableReferences", ,]
[=, new, HotSwapPassFactory, (, "checkVariableReferences", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "checkVariableReferences", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, VariableReferenceCheck, (]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, VariableReferenceCheck, (, compiler, ,]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, VariableReferenceCheck, (, compiler, ,]
[), {, return, new, VariableReferenceCheck, (, compiler, ,, options, ., aggressiveVarCheck, ), ;, }, }, ;, final, PassFactory, objectPropertyStringPreprocess, =]
[new, VariableReferenceCheck, (, compiler, ,, options, ., aggressiveVarCheck, ), ;, }, }, ;, final, PassFactory, objectPropertyStringPreprocess, =, new, PassFactory, (]
[(, compiler, ,, options, ., aggressiveVarCheck, ), ;, }, }, ;, final, PassFactory, objectPropertyStringPreprocess, =, new, PassFactory, (, "ObjectPropertyStringPreprocess", ,]
[=, new, PassFactory, (, "ObjectPropertyStringPreprocess", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "ObjectPropertyStringPreprocess", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ObjectPropertyStringPreprocess, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, ObjectPropertyStringPreprocess, (, compiler, ), ;, }, }, ;, final, HotSwapPassFactory, resolveTypes, =]
[compiler, ), {, return, new, ObjectPropertyStringPreprocess, (, compiler, ), ;, }, }, ;, final, HotSwapPassFactory, resolveTypes, =, new, HotSwapPassFactory, (]
[{, return, new, ObjectPropertyStringPreprocess, (, compiler, ), ;, }, }, ;, final, HotSwapPassFactory, resolveTypes, =, new, HotSwapPassFactory, (, "resolveTypes", ,]
[=, new, HotSwapPassFactory, (, "resolveTypes", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "resolveTypes", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, GlobalTypeResolver, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, GlobalTypeResolver, (, compiler, ), ;, }, }, ;, final, PassFactory, clearTypedScopePass, =]
[compiler, ), {, return, new, GlobalTypeResolver, (, compiler, ), ;, }, }, ;, final, PassFactory, clearTypedScopePass, =, new, PassFactory, (]
[{, return, new, GlobalTypeResolver, (, compiler, ), ;, }, }, ;, final, PassFactory, clearTypedScopePass, =, new, PassFactory, (, "clearTypedScopePass", ,]
[=, new, PassFactory, (, "clearTypedScopePass", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ClearTypedScope, (, ), ;, }, }, ;, final, HotSwapPassFactory, inferTypes, =]
[AbstractCompiler, compiler, ), {, return, new, ClearTypedScope, (, ), ;, }, }, ;, final, HotSwapPassFactory, inferTypes, =, new, HotSwapPassFactory, (]
[), {, return, new, ClearTypedScope, (, ), ;, }, }, ;, final, HotSwapPassFactory, inferTypes, =, new, HotSwapPassFactory, (, "inferTypes", ,]
[new, HotSwapPassFactory, (, "inferTypes", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
[{, return, new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[{, return, new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[(, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkNotNull, (]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkNotNull, (, topScope, ), ;]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkNotNull, (, topScope, ), ;]
[process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkNotNull, (, topScope, ), ;, Preconditions, ., checkNotNull, (]
[Node, root, ), {, Preconditions, ., checkNotNull, (, topScope, ), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;]
[Node, root, ), {, Preconditions, ., checkNotNull, (, topScope, ), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;]
[), {, Preconditions, ., checkNotNull, (, topScope, ), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, makeTypeInference, (]
[(, topScope, ), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, makeTypeInference, (, compiler, ), ., process, (]
[), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, makeTypeInference, (, compiler, ), ., process, (, externs, ,]
[(, externs, ,, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[(, externs, ,, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[,, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeTypeInference, (]
[@, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeTypeInference, (, compiler, ), ., inferAllScopes, (]
[makeTypeInference, (, compiler, ), ., inferAllScopes, (, scriptRoot, ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, inferJsDocInfo, =]
[), ., inferAllScopes, (, scriptRoot, ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, inferJsDocInfo, =, new, HotSwapPassFactory, (]
[inferAllScopes, (, scriptRoot, ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, inferJsDocInfo, =, new, HotSwapPassFactory, (, "inferJsDocInfo", ,]
[new, HotSwapPassFactory, (, "inferJsDocInfo", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
[{, return, new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[{, return, new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[(, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkNotNull, (]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkNotNull, (, topScope, ), ;]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkNotNull, (, topScope, ), ;]
[process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkNotNull, (, topScope, ), ;, Preconditions, ., checkNotNull, (]
[Node, root, ), {, Preconditions, ., checkNotNull, (, topScope, ), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;]
[Node, root, ), {, Preconditions, ., checkNotNull, (, topScope, ), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;]
[), {, Preconditions, ., checkNotNull, (, topScope, ), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, makeInferJsDocInfo, (]
[(, topScope, ), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, makeInferJsDocInfo, (, compiler, ), ., process, (]
[), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, makeInferJsDocInfo, (, compiler, ), ., process, (, externs, ,]
[(, externs, ,, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[(, externs, ,, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[,, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeInferJsDocInfo, (]
[@, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeInferJsDocInfo, (, compiler, ), ., hotSwapScript, (]
[public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeInferJsDocInfo, (, compiler, ), ., hotSwapScript, (, scriptRoot, ,]
[compiler, ), ., hotSwapScript, (, scriptRoot, ,, originalRoot, ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkTypes, =]
[hotSwapScript, (, scriptRoot, ,, originalRoot, ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkTypes, =, new, HotSwapPassFactory, (]
[scriptRoot, ,, originalRoot, ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkTypes, =, new, HotSwapPassFactory, (, "checkTypes", ,]
[new, HotSwapPassFactory, (, "checkTypes", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
[{, return, new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[{, return, new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[(, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkNotNull, (]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkNotNull, (, topScope, ), ;]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkNotNull, (, topScope, ), ;]
[process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkNotNull, (, topScope, ), ;, Preconditions, ., checkNotNull, (]
[{, Preconditions, ., checkNotNull, (, topScope, ), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, TypeCheck, check, =]
[., checkNotNull, (, topScope, ), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, TypeCheck, check, =, makeTypeCheck, (]
[topScope, ), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, TypeCheck, check, =, makeTypeCheck, (, compiler, ), ;]
[topScope, ), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, TypeCheck, check, =, makeTypeCheck, (, compiler, ), ;]
[., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, TypeCheck, check, =, makeTypeCheck, (, compiler, ), ;, check, ., process, (]
[(, getTypedScopeCreator, (, ), ), ;, TypeCheck, check, =, makeTypeCheck, (, compiler, ), ;, check, ., process, (, externs, ,]
[), ), ;, TypeCheck, check, =, makeTypeCheck, (, compiler, ), ;, check, ., process, (, externs, ,, root, ), ;]
[), ), ;, TypeCheck, check, =, makeTypeCheck, (, compiler, ), ;, check, ., process, (, externs, ,, root, ), ;]
[), ), ;, TypeCheck, check, =, makeTypeCheck, (, compiler, ), ;, check, ., process, (, externs, ,, root, ), ;]
[compiler, ), ;, check, ., process, (, externs, ,, root, ), ;, compiler, ., getErrorManager, (, ), ., setTypedPercent, (]
[compiler, ), ;, check, ., process, (, externs, ,, root, ), ;, compiler, ., getErrorManager, (, ), ., setTypedPercent, (]
[., getTypedPercent, (, ), ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[., getTypedPercent, (, ), ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[(, ), ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeTypeCheck, (]
[@, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeTypeCheck, (, compiler, ), ., check, (]
[public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeTypeCheck, (, compiler, ), ., check, (, scriptRoot, ,]
[compiler, ), ., check, (, scriptRoot, ,, false, ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkControlFlow, =]
[check, (, scriptRoot, ,, false, ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkControlFlow, =, new, HotSwapPassFactory, (]
[scriptRoot, ,, false, ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkControlFlow, =, new, HotSwapPassFactory, (, "checkControlFlow", ,]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, List, <, Callback, >, callbacks, =]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, List, <, Callback, >, callbacks, =]
[create, (, AbstractCompiler, compiler, ), {, List, <, Callback, >, callbacks, =, Lists, ., newArrayList, (, ), ;, if, (]
[create, (, AbstractCompiler, compiler, ), {, List, <, Callback, >, callbacks, =, Lists, ., newArrayList, (, ), ;, if, (]
[create, (, AbstractCompiler, compiler, ), {, List, <, Callback, >, callbacks, =, Lists, ., newArrayList, (, ), ;, if, (]
[>, callbacks, =, Lists, ., newArrayList, (, ), ;, if, (, options, ., checkUnreachableCode, ., isOn, (, ), ), {]
[>, callbacks, =, Lists, ., newArrayList, (, ), ;, if, (, options, ., checkUnreachableCode, ., isOn, (, ), ), {]
[., newArrayList, (, ), ;, if, (, options, ., checkUnreachableCode, ., isOn, (, ), ), {, callbacks, ., add, (]
[), ;, if, (, options, ., checkUnreachableCode, ., isOn, (, ), ), {, callbacks, ., add, (, new, CheckUnreachableCode, (]
[if, (, options, ., checkUnreachableCode, ., isOn, (, ), ), {, callbacks, ., add, (, new, CheckUnreachableCode, (, compiler, ,]
[if, (, options, ., checkUnreachableCode, ., isOn, (, ), ), {, callbacks, ., add, (, new, CheckUnreachableCode, (, compiler, ,]
[), {, callbacks, ., add, (, new, CheckUnreachableCode, (, compiler, ,, options, ., checkUnreachableCode, ), ), ;, }, if, (]
[), {, callbacks, ., add, (, new, CheckUnreachableCode, (, compiler, ,, options, ., checkUnreachableCode, ), ), ;, }, if, (]
[), {, callbacks, ., add, (, new, CheckUnreachableCode, (, compiler, ,, options, ., checkUnreachableCode, ), ), ;, }, if, (]
[), {, callbacks, ., add, (, new, CheckUnreachableCode, (, compiler, ,, options, ., checkUnreachableCode, ), ), ;, }, if, (]
[(, compiler, ,, options, ., checkUnreachableCode, ), ), ;, }, if, (, options, ., checkMissingReturn, ., isOn, (, ), &&]
[(, compiler, ,, options, ., checkUnreachableCode, ), ), ;, }, if, (, options, ., checkMissingReturn, ., isOn, (, ), &&]
[checkUnreachableCode, ), ), ;, }, if, (, options, ., checkMissingReturn, ., isOn, (, ), &&, options, ., checkTypes, ), {]
[checkUnreachableCode, ), ), ;, }, if, (, options, ., checkMissingReturn, ., isOn, (, ), &&, options, ., checkTypes, ), {]
[}, if, (, options, ., checkMissingReturn, ., isOn, (, ), &&, options, ., checkTypes, ), {, callbacks, ., add, (]
[options, ., checkMissingReturn, ., isOn, (, ), &&, options, ., checkTypes, ), {, callbacks, ., add, (, new, CheckMissingReturn, (]
[checkMissingReturn, ., isOn, (, ), &&, options, ., checkTypes, ), {, callbacks, ., add, (, new, CheckMissingReturn, (, compiler, ,]
[checkMissingReturn, ., isOn, (, ), &&, options, ., checkTypes, ), {, callbacks, ., add, (, new, CheckMissingReturn, (, compiler, ,]
[checkTypes, ), {, callbacks, ., add, (, new, CheckMissingReturn, (, compiler, ,, options, ., checkMissingReturn, ), ), ;, }, return]
[{, callbacks, ., add, (, new, CheckMissingReturn, (, compiler, ,, options, ., checkMissingReturn, ), ), ;, }, return, combineChecks, (]
[., add, (, new, CheckMissingReturn, (, compiler, ,, options, ., checkMissingReturn, ), ), ;, }, return, combineChecks, (, compiler, ,]
[checkMissingReturn, ), ), ;, }, return, combineChecks, (, compiler, ,, callbacks, ), ;, }, }, ;, final, HotSwapPassFactory, checkAccessControls, =]
[;, }, return, combineChecks, (, compiler, ,, callbacks, ), ;, }, }, ;, final, HotSwapPassFactory, checkAccessControls, =, new, HotSwapPassFactory, (]
[return, combineChecks, (, compiler, ,, callbacks, ), ;, }, }, ;, final, HotSwapPassFactory, checkAccessControls, =, new, HotSwapPassFactory, (, "checkAccessControls", ,]
[=, new, HotSwapPassFactory, (, "checkAccessControls", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "checkAccessControls", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CheckAccessControls, (]
[), ;, }, }, ;, private, static, HotSwapCompilerPass, combineChecks, (, AbstractCompiler, compiler, ,, List, <, Callback, >, callbacks, ), {]
[), ;, }, }, ;, private, static, HotSwapCompilerPass, combineChecks, (, AbstractCompiler, compiler, ,, List, <, Callback, >, callbacks, ), {]
[;, private, static, HotSwapCompilerPass, combineChecks, (, AbstractCompiler, compiler, ,, List, <, Callback, >, callbacks, ), {, Preconditions, ., checkArgument, (]
[;, private, static, HotSwapCompilerPass, combineChecks, (, AbstractCompiler, compiler, ,, List, <, Callback, >, callbacks, ), {, Preconditions, ., checkArgument, (]
[;, private, static, HotSwapCompilerPass, combineChecks, (, AbstractCompiler, compiler, ,, List, <, Callback, >, callbacks, ), {, Preconditions, ., checkArgument, (]
[AbstractCompiler, compiler, ,, List, <, Callback, >, callbacks, ), {, Preconditions, ., checkArgument, (, callbacks, ., size, (, ), >]
[), {, Preconditions, ., checkArgument, (, callbacks, ., size, (, ), >, 0, ), ;, Callback, [, ], array, =]
[), {, Preconditions, ., checkArgument, (, callbacks, ., size, (, ), >, 0, ), ;, Callback, [, ], array, =]
[checkArgument, (, callbacks, ., size, (, ), >, 0, ), ;, Callback, [, ], array, =, callbacks, ., toArray, (]
[., size, (, ), >, 0, ), ;, Callback, [, ], array, =, callbacks, ., toArray, (, new, Callback, []
[., size, (, ), >, 0, ), ;, Callback, [, ], array, =, callbacks, ., toArray, (, new, Callback, []
[[, ], array, =, callbacks, ., toArray, (, new, Callback, [, callbacks, ., size, (, ), ], ), ;, return]
[=, callbacks, ., toArray, (, new, Callback, [, callbacks, ., size, (, ), ], ), ;, return, new, CombinedCompilerPass, (]
[., toArray, (, new, Callback, [, callbacks, ., size, (, ), ], ), ;, return, new, CombinedCompilerPass, (, compiler, ,]
[array, ), ;, }, class, GlobalTypeResolver, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, GlobalTypeResolver, (, AbstractCompiler, compiler, ), {]
[array, ), ;, }, class, GlobalTypeResolver, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, GlobalTypeResolver, (, AbstractCompiler, compiler, ), {]
[class, GlobalTypeResolver, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, GlobalTypeResolver, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (]
[compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (]
[compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, topScope, ==]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, topScope, ==, null, ), {]
[public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, topScope, ==, null, ), {, regenerateGlobalTypedScope, (]
[process, (, Node, externs, ,, Node, root, ), {, if, (, topScope, ==, null, ), {, regenerateGlobalTypedScope, (, compiler, ,]
[process, (, Node, externs, ,, Node, root, ), {, if, (, topScope, ==, null, ), {, regenerateGlobalTypedScope, (, compiler, ,]
[(, topScope, ==, null, ), {, regenerateGlobalTypedScope, (, compiler, ,, root, ., getParent, (, ), ), ;, }, else, {]
[(, topScope, ==, null, ), {, regenerateGlobalTypedScope, (, compiler, ,, root, ., getParent, (, ), ), ;, }, else, {]
[(, topScope, ==, null, ), {, regenerateGlobalTypedScope, (, compiler, ,, root, ., getParent, (, ), ), ;, }, else, {]
[compiler, ,, root, ., getParent, (, ), ), ;, }, else, {, compiler, ., getTypeRegistry, (, ), ., resolveTypesInScope, (]
[resolveTypesInScope, (, topScope, ), ;, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[topScope, ), ;, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, patchGlobalTypedScope, (]
[;, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, patchGlobalTypedScope, (, compiler, ,]
[}, }, class, ClearTypedScope, implements, CompilerPass, {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[void, process, (, Node, externs, ,, Node, root, ), {, clearTypedScope, (, ), ;, }, }, final, PassFactory, checkGlobalNames, =]
[Node, externs, ,, Node, root, ), {, clearTypedScope, (, ), ;, }, }, final, PassFactory, checkGlobalNames, =, new, PassFactory, (]
[,, Node, root, ), {, clearTypedScope, (, ), ;, }, }, final, PassFactory, checkGlobalNames, =, new, PassFactory, (, "checkGlobalNames", ,]
[new, PassFactory, (, "checkGlobalNames", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
[{, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {]
[new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, namespaceForChecks, =]
[), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, namespaceForChecks, =, new, GlobalNamespace, (]
[@, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, namespaceForChecks, =, new, GlobalNamespace, (, compiler, ,]
[public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, namespaceForChecks, =, new, GlobalNamespace, (, compiler, ,, externs, ,]
[(, Node, externs, ,, Node, jsRoot, ), {, namespaceForChecks, =, new, GlobalNamespace, (, compiler, ,, externs, ,, jsRoot, ), ;]
[(, Node, externs, ,, Node, jsRoot, ), {, namespaceForChecks, =, new, GlobalNamespace, (, compiler, ,, externs, ,, jsRoot, ), ;]
[(, Node, externs, ,, Node, jsRoot, ), {, namespaceForChecks, =, new, GlobalNamespace, (, compiler, ,, externs, ,, jsRoot, ), ;]
[,, Node, jsRoot, ), {, namespaceForChecks, =, new, GlobalNamespace, (, compiler, ,, externs, ,, jsRoot, ), ;, new, CheckGlobalNames, (]
[jsRoot, ), {, namespaceForChecks, =, new, GlobalNamespace, (, compiler, ,, externs, ,, jsRoot, ), ;, new, CheckGlobalNames, (, compiler, ,]
[jsRoot, ), {, namespaceForChecks, =, new, GlobalNamespace, (, compiler, ,, externs, ,, jsRoot, ), ;, new, CheckGlobalNames, (, compiler, ,]
[(, compiler, ,, externs, ,, jsRoot, ), ;, new, CheckGlobalNames, (, compiler, ,, options, ., checkGlobalNamesLevel, ), ., injectNamespace, (]
[jsRoot, ), ;, new, CheckGlobalNames, (, compiler, ,, options, ., checkGlobalNamesLevel, ), ., injectNamespace, (, namespaceForChecks, ), ., process, (]
[;, new, CheckGlobalNames, (, compiler, ,, options, ., checkGlobalNamesLevel, ), ., injectNamespace, (, namespaceForChecks, ), ., process, (, externs, ,]
[namespaceForChecks, ), ., process, (, externs, ,, jsRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, checkStrictMode, =]
[process, (, externs, ,, jsRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, checkStrictMode, =, new, PassFactory, (]
[externs, ,, jsRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, checkStrictMode, =, new, PassFactory, (, "checkStrictMode", ,]
[=, new, PassFactory, (, "checkStrictMode", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "checkStrictMode", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, StrictModeCheck, (]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, StrictModeCheck, (, compiler, ,]
[true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, StrictModeCheck, (, compiler, ,, !]
[true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, StrictModeCheck, (, compiler, ,, !]
[Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, StrictModeCheck, (, compiler, ,, !, options, ., checkSymbols, ,]
[protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, StrictModeCheck, (, compiler, ,, !, options, ., checkSymbols, ,, !]
[protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, StrictModeCheck, (, compiler, ,, !, options, ., checkSymbols, ,, !]
[compiler, ,, !, options, ., checkSymbols, ,, !, options, ., checkCaja, ), ;, }, }, ;, final, PassFactory, processTweaks, =]
[options, ., checkSymbols, ,, !, options, ., checkCaja, ), ;, }, }, ;, final, PassFactory, processTweaks, =, new, PassFactory, (]
[checkSymbols, ,, !, options, ., checkCaja, ), ;, }, }, ;, final, PassFactory, processTweaks, =, new, PassFactory, (, "processTweaks", ,]
[new, PassFactory, (, "processTweaks", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
[{, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {]
[{, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {]
[CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, new, ProcessTweaks, (]
[), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, new, ProcessTweaks, (, compiler, ,]
[), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, new, ProcessTweaks, (, compiler, ,]
[), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, new, ProcessTweaks, (, compiler, ,]
[,, Node, jsRoot, ), {, new, ProcessTweaks, (, compiler, ,, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ,]
[,, Node, jsRoot, ), {, new, ProcessTweaks, (, compiler, ,, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ,]
[,, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ,, options, ., getTweakReplacements, (, ), ), ., process, (]
[., getTweakProcessing, (, ), ., shouldStrip, (, ), ,, options, ., getTweakReplacements, (, ), ), ., process, (, externs, ,]
[), ), ., process, (, externs, ,, jsRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, processDefines, =]
[process, (, externs, ,, jsRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, processDefines, =, new, PassFactory, (]
[externs, ,, jsRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, processDefines, =, new, PassFactory, (, "processDefines", ,]
[new, PassFactory, (, "processDefines", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
[Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, Map, <, String, ,, Node, >, replacements, =]
[void, process, (, Node, externs, ,, Node, jsRoot, ), {, Map, <, String, ,, Node, >, replacements, =, getAdditionalReplacements, (]
[Node, externs, ,, Node, jsRoot, ), {, Map, <, String, ,, Node, >, replacements, =, getAdditionalReplacements, (, options, ), ;]
[Node, externs, ,, Node, jsRoot, ), {, Map, <, String, ,, Node, >, replacements, =, getAdditionalReplacements, (, options, ), ;]
[jsRoot, ), {, Map, <, String, ,, Node, >, replacements, =, getAdditionalReplacements, (, options, ), ;, replacements, ., putAll, (]
[jsRoot, ), {, Map, <, String, ,, Node, >, replacements, =, getAdditionalReplacements, (, options, ), ;, replacements, ., putAll, (]
[Node, >, replacements, =, getAdditionalReplacements, (, options, ), ;, replacements, ., putAll, (, options, ., getDefineReplacements, (, ), ), ;]
[Node, >, replacements, =, getAdditionalReplacements, (, options, ), ;, replacements, ., putAll, (, options, ., getDefineReplacements, (, ), ), ;]
[Node, >, replacements, =, getAdditionalReplacements, (, options, ), ;, replacements, ., putAll, (, options, ., getDefineReplacements, (, ), ), ;]
[=, getAdditionalReplacements, (, options, ), ;, replacements, ., putAll, (, options, ., getDefineReplacements, (, ), ), ;, new, ProcessDefines, (]
[(, options, ), ;, replacements, ., putAll, (, options, ., getDefineReplacements, (, ), ), ;, new, ProcessDefines, (, compiler, ,]
[., putAll, (, options, ., getDefineReplacements, (, ), ), ;, new, ProcessDefines, (, compiler, ,, replacements, ), ., injectNamespace, (]
[getDefineReplacements, (, ), ), ;, new, ProcessDefines, (, compiler, ,, replacements, ), ., injectNamespace, (, namespaceForChecks, ), ., process, (]
[), ), ;, new, ProcessDefines, (, compiler, ,, replacements, ), ., injectNamespace, (, namespaceForChecks, ), ., process, (, externs, ,]
[namespaceForChecks, ), ., process, (, externs, ,, jsRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, garbageCollectChecks, =]
[process, (, externs, ,, jsRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, garbageCollectChecks, =, new, HotSwapPassFactory, (]
[externs, ,, jsRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, garbageCollectChecks, =, new, HotSwapPassFactory, (, "garbageCollectChecks", ,]
[new, HotSwapPassFactory, (, "garbageCollectChecks", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
[{, return, new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {]
[new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, namespaceForChecks, =]
[), {, namespaceForChecks, =, null, ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[namespaceForChecks, =, null, ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, process, (]
[null, ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, process, (, null, ,]
[originalRoot, ), {, process, (, null, ,, null, ), ;, }, }, ;, }, }, ;, final, PassFactory, checkConsts, =]
[process, (, null, ,, null, ), ;, }, }, ;, }, }, ;, final, PassFactory, checkConsts, =, new, PassFactory, (]
[null, ,, null, ), ;, }, }, ;, }, }, ;, final, PassFactory, checkConsts, =, new, PassFactory, (, "checkConsts", ,]
[=, new, PassFactory, (, "checkConsts", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "checkConsts", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ConstCheck, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, ConstCheck, (, compiler, ), ;, }, }, ;, final, PassFactory, computeFunctionNames, =]
[compiler, ), {, return, new, ConstCheck, (, compiler, ), ;, }, }, ;, final, PassFactory, computeFunctionNames, =, new, PassFactory, (]
[{, return, new, ConstCheck, (, compiler, ), ;, }, }, ;, final, PassFactory, computeFunctionNames, =, new, PassFactory, (, "computeFunctionNames", ,]
[=, new, PassFactory, (, "computeFunctionNames", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[new, PassFactory, (, "computeFunctionNames", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, (]
[PassFactory, (, "computeFunctionNames", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, (, (]
["computeFunctionNames", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, (, (, functionNames, =]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, (, (, functionNames, =, new, FunctionNames, (]
[return, (, (, functionNames, =, new, FunctionNames, (, compiler, ), ), ), ;, }, }, ;, final, PassFactory, ignoreCajaProperties, =]
[functionNames, =, new, FunctionNames, (, compiler, ), ), ), ;, }, }, ;, final, PassFactory, ignoreCajaProperties, =, new, PassFactory, (]
[new, FunctionNames, (, compiler, ), ), ), ;, }, }, ;, final, PassFactory, ignoreCajaProperties, =, new, PassFactory, (, "ignoreCajaProperties", ,]
[=, new, PassFactory, (, "ignoreCajaProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "ignoreCajaProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, IgnoreCajaProperties, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, IgnoreCajaProperties, (, compiler, ), ;, }, }, ;, final, PassFactory, runtimeTypeCheck, =]
[compiler, ), {, return, new, IgnoreCajaProperties, (, compiler, ), ;, }, }, ;, final, PassFactory, runtimeTypeCheck, =, new, PassFactory, (]
[{, return, new, IgnoreCajaProperties, (, compiler, ), ;, }, }, ;, final, PassFactory, runtimeTypeCheck, =, new, PassFactory, (, "runtimeTypeCheck", ,]
[=, new, PassFactory, (, "runtimeTypeCheck", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "runtimeTypeCheck", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RuntimeTypeCheck, (]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RuntimeTypeCheck, (, compiler, ,]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RuntimeTypeCheck, (, compiler, ,]
[), {, return, new, RuntimeTypeCheck, (, compiler, ,, options, ., runtimeTypeCheckLogFunction, ), ;, }, }, ;, final, PassFactory, replaceIdGenerators, =]
[new, RuntimeTypeCheck, (, compiler, ,, options, ., runtimeTypeCheckLogFunction, ), ;, }, }, ;, final, PassFactory, replaceIdGenerators, =, new, PassFactory, (]
[(, compiler, ,, options, ., runtimeTypeCheckLogFunction, ), ;, }, }, ;, final, PassFactory, replaceIdGenerators, =, new, PassFactory, (, "replaceIdGenerators", ,]
[new, PassFactory, (, "replaceIdGenerators", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
[CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReplaceIdGenerators, pass, =]
[{, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReplaceIdGenerators, pass, =, new, ReplaceIdGenerators, (]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReplaceIdGenerators, pass, =, new, ReplaceIdGenerators, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReplaceIdGenerators, pass, =, new, ReplaceIdGenerators, (, compiler, ,]
[(, Node, externs, ,, Node, root, ), {, ReplaceIdGenerators, pass, =, new, ReplaceIdGenerators, (, compiler, ,, options, ., idGenerators, ,]
[(, Node, externs, ,, Node, root, ), {, ReplaceIdGenerators, pass, =, new, ReplaceIdGenerators, (, compiler, ,, options, ., idGenerators, ,]
[Node, root, ), {, ReplaceIdGenerators, pass, =, new, ReplaceIdGenerators, (, compiler, ,, options, ., idGenerators, ,, options, ., generatePseudoNames, ,]
[Node, root, ), {, ReplaceIdGenerators, pass, =, new, ReplaceIdGenerators, (, compiler, ,, options, ., idGenerators, ,, options, ., generatePseudoNames, ,]
[pass, =, new, ReplaceIdGenerators, (, compiler, ,, options, ., idGenerators, ,, options, ., generatePseudoNames, ,, options, ., idGeneratorsMapSerialized, ), ;]
[pass, =, new, ReplaceIdGenerators, (, compiler, ,, options, ., idGenerators, ,, options, ., generatePseudoNames, ,, options, ., idGeneratorsMapSerialized, ), ;]
[(, compiler, ,, options, ., idGenerators, ,, options, ., generatePseudoNames, ,, options, ., idGeneratorsMapSerialized, ), ;, pass, ., process, (]
[,, options, ., idGenerators, ,, options, ., generatePseudoNames, ,, options, ., idGeneratorsMapSerialized, ), ;, pass, ., process, (, externs, ,]
[idGenerators, ,, options, ., generatePseudoNames, ,, options, ., idGeneratorsMapSerialized, ), ;, pass, ., process, (, externs, ,, root, ), ;]
[options, ., generatePseudoNames, ,, options, ., idGeneratorsMapSerialized, ), ;, pass, ., process, (, externs, ,, root, ), ;, idGeneratorMap, =]
[options, ., generatePseudoNames, ,, options, ., idGeneratorsMapSerialized, ), ;, pass, ., process, (, externs, ,, root, ), ;, idGeneratorMap, =]
[), ;, idGeneratorMap, =, pass, ., getSerializedIdMappings, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, replaceStrings, =]
[=, pass, ., getSerializedIdMappings, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, replaceStrings, =, new, PassFactory, (]
[., getSerializedIdMappings, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, replaceStrings, =, new, PassFactory, (, "replaceStrings", ,]
[new, PassFactory, (, "replaceStrings", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
[CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReplaceStrings, pass, =]
[{, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReplaceStrings, pass, =, new, ReplaceStrings, (]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReplaceStrings, pass, =, new, ReplaceStrings, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReplaceStrings, pass, =, new, ReplaceStrings, (, compiler, ,]
[(, Node, externs, ,, Node, root, ), {, ReplaceStrings, pass, =, new, ReplaceStrings, (, compiler, ,, options, ., replaceStringsPlaceholderToken, ,]
[(, Node, externs, ,, Node, root, ), {, ReplaceStrings, pass, =, new, ReplaceStrings, (, compiler, ,, options, ., replaceStringsPlaceholderToken, ,]
[Node, root, ), {, ReplaceStrings, pass, =, new, ReplaceStrings, (, compiler, ,, options, ., replaceStringsPlaceholderToken, ,, options, ., replaceStringsFunctionDescriptions, ,]
[Node, root, ), {, ReplaceStrings, pass, =, new, ReplaceStrings, (, compiler, ,, options, ., replaceStringsPlaceholderToken, ,, options, ., replaceStringsFunctionDescriptions, ,]
[ReplaceStrings, pass, =, new, ReplaceStrings, (, compiler, ,, options, ., replaceStringsPlaceholderToken, ,, options, ., replaceStringsFunctionDescriptions, ,, options, ., replaceStringsReservedStrings, ,]
[ReplaceStrings, pass, =, new, ReplaceStrings, (, compiler, ,, options, ., replaceStringsPlaceholderToken, ,, options, ., replaceStringsFunctionDescriptions, ,, options, ., replaceStringsReservedStrings, ,]
[(, compiler, ,, options, ., replaceStringsPlaceholderToken, ,, options, ., replaceStringsFunctionDescriptions, ,, options, ., replaceStringsReservedStrings, ,, options, ., replaceStringsInputMap, ), ;]
[(, compiler, ,, options, ., replaceStringsPlaceholderToken, ,, options, ., replaceStringsFunctionDescriptions, ,, options, ., replaceStringsReservedStrings, ,, options, ., replaceStringsInputMap, ), ;]
[., replaceStringsPlaceholderToken, ,, options, ., replaceStringsFunctionDescriptions, ,, options, ., replaceStringsReservedStrings, ,, options, ., replaceStringsInputMap, ), ;, pass, ., process, (]
[,, options, ., replaceStringsFunctionDescriptions, ,, options, ., replaceStringsReservedStrings, ,, options, ., replaceStringsInputMap, ), ;, pass, ., process, (, externs, ,]
[replaceStringsFunctionDescriptions, ,, options, ., replaceStringsReservedStrings, ,, options, ., replaceStringsInputMap, ), ;, pass, ., process, (, externs, ,, root, ), ;]
[options, ., replaceStringsReservedStrings, ,, options, ., replaceStringsInputMap, ), ;, pass, ., process, (, externs, ,, root, ), ;, stringMap, =]
[options, ., replaceStringsReservedStrings, ,, options, ., replaceStringsInputMap, ), ;, pass, ., process, (, externs, ,, root, ), ;, stringMap, =]
[), ;, stringMap, =, pass, ., getStringMap, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, optimizeArgumentsArray, =]
[=, pass, ., getStringMap, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, optimizeArgumentsArray, =, new, PassFactory, (]
[., getStringMap, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, optimizeArgumentsArray, =, new, PassFactory, (, "optimizeArgumentsArray", ,]
[=, new, PassFactory, (, "optimizeArgumentsArray", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "optimizeArgumentsArray", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, OptimizeArgumentsArray, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, OptimizeArgumentsArray, (, compiler, ), ;, }, }, ;, final, PassFactory, closureCodeRemoval, =]
[compiler, ), {, return, new, OptimizeArgumentsArray, (, compiler, ), ;, }, }, ;, final, PassFactory, closureCodeRemoval, =, new, PassFactory, (]
[{, return, new, OptimizeArgumentsArray, (, compiler, ), ;, }, }, ;, final, PassFactory, closureCodeRemoval, =, new, PassFactory, (, "closureCodeRemoval", ,]
[new, PassFactory, (, "closureCodeRemoval", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
["closureCodeRemoval", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ClosureCodeRemoval, (]
[true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ClosureCodeRemoval, (, compiler, ,]
[true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ClosureCodeRemoval, (, compiler, ,]
[Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ClosureCodeRemoval, (, compiler, ,, options, ., removeAbstractMethods, ,]
[Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ClosureCodeRemoval, (, compiler, ,, options, ., removeAbstractMethods, ,]
[ClosureCodeRemoval, (, compiler, ,, options, ., removeAbstractMethods, ,, options, ., removeClosureAsserts, ), ;, }, }, ;, final, PassFactory, closureOptimizePrimitives, =]
[,, options, ., removeAbstractMethods, ,, options, ., removeClosureAsserts, ), ;, }, }, ;, final, PassFactory, closureOptimizePrimitives, =, new, PassFactory, (]
[., removeAbstractMethods, ,, options, ., removeClosureAsserts, ), ;, }, }, ;, final, PassFactory, closureOptimizePrimitives, =, new, PassFactory, (, "closureOptimizePrimitives", ,]
[new, PassFactory, (, "closureOptimizePrimitives", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
["closureOptimizePrimitives", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ClosureOptimizePrimitives, (]
[(, final, AbstractCompiler, compiler, ), {, return, new, ClosureOptimizePrimitives, (, compiler, ), ;, }, }, ;, final, PassFactory, rescopeGlobalSymbols, =]
[compiler, ), {, return, new, ClosureOptimizePrimitives, (, compiler, ), ;, }, }, ;, final, PassFactory, rescopeGlobalSymbols, =, new, PassFactory, (]
[{, return, new, ClosureOptimizePrimitives, (, compiler, ), ;, }, }, ;, final, PassFactory, rescopeGlobalSymbols, =, new, PassFactory, (, "rescopeGlobalSymbols", ,]
[=, new, PassFactory, (, "rescopeGlobalSymbols", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "rescopeGlobalSymbols", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RescopeGlobalSymbols, (]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RescopeGlobalSymbols, (, compiler, ,]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RescopeGlobalSymbols, (, compiler, ,]
[), {, return, new, RescopeGlobalSymbols, (, compiler, ,, options, ., renamePrefixNamespace, ), ;, }, }, ;, final, PassFactory, collapseProperties, =]
[new, RescopeGlobalSymbols, (, compiler, ,, options, ., renamePrefixNamespace, ), ;, }, }, ;, final, PassFactory, collapseProperties, =, new, PassFactory, (]
[(, compiler, ,, options, ., renamePrefixNamespace, ), ;, }, }, ;, final, PassFactory, collapseProperties, =, new, PassFactory, (, "collapseProperties", ,]
[=, new, PassFactory, (, "collapseProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "collapseProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CollapseProperties, (]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CollapseProperties, (, compiler, ,]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CollapseProperties, (, compiler, ,]
[@, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CollapseProperties, (, compiler, ,, options, ., collapsePropertiesOnExternTypes, ,]
[Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CollapseProperties, (, compiler, ,, options, ., collapsePropertiesOnExternTypes, ,, !]
[(, compiler, ,, options, ., collapsePropertiesOnExternTypes, ,, !, isInliningForbidden, (, ), ), ;, }, }, ;, final, PassFactory, collapseObjectLiterals, =]
[options, ., collapsePropertiesOnExternTypes, ,, !, isInliningForbidden, (, ), ), ;, }, }, ;, final, PassFactory, collapseObjectLiterals, =, new, PassFactory, (]
[collapsePropertiesOnExternTypes, ,, !, isInliningForbidden, (, ), ), ;, }, }, ;, final, PassFactory, collapseObjectLiterals, =, new, PassFactory, (, "collapseObjectLiterals", ,]
[=, new, PassFactory, (, "collapseObjectLiterals", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "collapseObjectLiterals", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineObjectLiterals, (]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineObjectLiterals, (, compiler, ,]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineObjectLiterals, (, compiler, ,]
[return, new, InlineObjectLiterals, (, compiler, ,, compiler, ., getUniqueNameIdSupplier, (, ), ), ;, }, }, ;, final, PassFactory, tightenTypesBuilder, =]
[(, compiler, ,, compiler, ., getUniqueNameIdSupplier, (, ), ), ;, }, }, ;, final, PassFactory, tightenTypesBuilder, =, new, PassFactory, (]
[,, compiler, ., getUniqueNameIdSupplier, (, ), ), ;, }, }, ;, final, PassFactory, tightenTypesBuilder, =, new, PassFactory, (, "tightenTypes", ,]
[new, PassFactory, (, "tightenTypes", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (]
[PassFactory, (, "tightenTypes", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (, !]
[PassFactory, (, "tightenTypes", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (, !]
[{, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (, !, options, ., checkTypes, ), {, return]
[protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (, !, options, ., checkTypes, ), {, return, new, ErrorPass, (]
[create, (, AbstractCompiler, compiler, ), {, if, (, !, options, ., checkTypes, ), {, return, new, ErrorPass, (, compiler, ,]
[), {, if, (, !, options, ., checkTypes, ), {, return, new, ErrorPass, (, compiler, ,, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK, ), ;, }]
[if, (, !, options, ., checkTypes, ), {, return, new, ErrorPass, (, compiler, ,, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK, ), ;, }, tightenTypes, =]
[options, ., checkTypes, ), {, return, new, ErrorPass, (, compiler, ,, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK, ), ;, }, tightenTypes, =, new, TightenTypes, (]
[{, return, new, ErrorPass, (, compiler, ,, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK, ), ;, }, tightenTypes, =, new, TightenTypes, (, compiler, ), ;, return]
[;, }, tightenTypes, =, new, TightenTypes, (, compiler, ), ;, return, tightenTypes, ;, }, }, ;, final, PassFactory, disambiguateProperties, =]
[=, new, TightenTypes, (, compiler, ), ;, return, tightenTypes, ;, }, }, ;, final, PassFactory, disambiguateProperties, =, new, PassFactory, (]
[TightenTypes, (, compiler, ), ;, return, tightenTypes, ;, }, }, ;, final, PassFactory, disambiguateProperties, =, new, PassFactory, (, "disambiguateProperties", ,]
[new, PassFactory, (, "disambiguateProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (]
[new, PassFactory, (, "disambiguateProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (]
[(, "disambiguateProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (, tightenTypes, ==]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (, tightenTypes, ==, null, ), {, return]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (, tightenTypes, ==, null, ), {, return]
[protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (, tightenTypes, ==, null, ), {, return, DisambiguateProperties, ., forJSTypeSystem, (]
[create, (, AbstractCompiler, compiler, ), {, if, (, tightenTypes, ==, null, ), {, return, DisambiguateProperties, ., forJSTypeSystem, (, compiler, ,]
[create, (, AbstractCompiler, compiler, ), {, if, (, tightenTypes, ==, null, ), {, return, DisambiguateProperties, ., forJSTypeSystem, (, compiler, ,]
[==, null, ), {, return, DisambiguateProperties, ., forJSTypeSystem, (, compiler, ,, options, ., propertyInvalidationErrors, ), ;, }, else, {, return]
[==, null, ), {, return, DisambiguateProperties, ., forJSTypeSystem, (, compiler, ,, options, ., propertyInvalidationErrors, ), ;, }, else, {, return]
[return, DisambiguateProperties, ., forJSTypeSystem, (, compiler, ,, options, ., propertyInvalidationErrors, ), ;, }, else, {, return, DisambiguateProperties, ., forConcreteTypeSystem, (]
[., forJSTypeSystem, (, compiler, ,, options, ., propertyInvalidationErrors, ), ;, }, else, {, return, DisambiguateProperties, ., forConcreteTypeSystem, (, compiler, ,]
[(, compiler, ,, options, ., propertyInvalidationErrors, ), ;, }, else, {, return, DisambiguateProperties, ., forConcreteTypeSystem, (, compiler, ,, tightenTypes, ,]
[(, compiler, ,, options, ., propertyInvalidationErrors, ), ;, }, else, {, return, DisambiguateProperties, ., forConcreteTypeSystem, (, compiler, ,, tightenTypes, ,]
[., forConcreteTypeSystem, (, compiler, ,, tightenTypes, ,, options, ., propertyInvalidationErrors, ), ;, }, }, }, ;, final, PassFactory, chainCalls, =]
[compiler, ,, tightenTypes, ,, options, ., propertyInvalidationErrors, ), ;, }, }, }, ;, final, PassFactory, chainCalls, =, new, PassFactory, (]
[tightenTypes, ,, options, ., propertyInvalidationErrors, ), ;, }, }, }, ;, final, PassFactory, chainCalls, =, new, PassFactory, (, "chainCalls", ,]
[=, new, PassFactory, (, "chainCalls", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "chainCalls", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ChainCalls, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, ChainCalls, (, compiler, ), ;, }, }, ;, final, PassFactory, devirtualizePrototypeMethods, =]
[compiler, ), {, return, new, ChainCalls, (, compiler, ), ;, }, }, ;, final, PassFactory, devirtualizePrototypeMethods, =, new, PassFactory, (]
[{, return, new, ChainCalls, (, compiler, ), ;, }, }, ;, final, PassFactory, devirtualizePrototypeMethods, =, new, PassFactory, (, "devirtualizePrototypeMethods", ,]
[=, new, PassFactory, (, "devirtualizePrototypeMethods", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "devirtualizePrototypeMethods", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, DevirtualizePrototypeMethods, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, DevirtualizePrototypeMethods, (, compiler, ), ;, }, }, ;, final, PassFactory, optimizeCallsAndRemoveUnusedVars, =]
[compiler, ), {, return, new, DevirtualizePrototypeMethods, (, compiler, ), ;, }, }, ;, final, PassFactory, optimizeCallsAndRemoveUnusedVars, =, new, PassFactory, (]
[{, return, new, DevirtualizePrototypeMethods, (, compiler, ), ;, }, }, ;, final, PassFactory, optimizeCallsAndRemoveUnusedVars, =, new, PassFactory, (, "optimizeCalls_and_removeUnusedVars", ,]
[PassFactory, (, "optimizeCalls_and_removeUnusedVars", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, OptimizeCalls, passes, =]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, OptimizeCalls, passes, =, new, OptimizeCalls, (]
[Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, OptimizeCalls, passes, =, new, OptimizeCalls, (, compiler, ), ;, if, (]
[Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, OptimizeCalls, passes, =, new, OptimizeCalls, (, compiler, ), ;, if, (]
[AbstractCompiler, compiler, ), {, OptimizeCalls, passes, =, new, OptimizeCalls, (, compiler, ), ;, if, (, options, ., optimizeReturns, ), {]
[AbstractCompiler, compiler, ), {, OptimizeCalls, passes, =, new, OptimizeCalls, (, compiler, ), ;, if, (, options, ., optimizeReturns, ), {]
[OptimizeCalls, passes, =, new, OptimizeCalls, (, compiler, ), ;, if, (, options, ., optimizeReturns, ), {, passes, ., addPass, (]
[new, OptimizeCalls, (, compiler, ), ;, if, (, options, ., optimizeReturns, ), {, passes, ., addPass, (, new, OptimizeReturns, (]
[(, options, ., optimizeReturns, ), {, passes, ., addPass, (, new, OptimizeReturns, (, compiler, ), ), ;, }, if, (]
[(, options, ., optimizeReturns, ), {, passes, ., addPass, (, new, OptimizeReturns, (, compiler, ), ), ;, }, if, (]
[{, passes, ., addPass, (, new, OptimizeReturns, (, compiler, ), ), ;, }, if, (, options, ., optimizeParameters, ), {]
[{, passes, ., addPass, (, new, OptimizeReturns, (, compiler, ), ), ;, }, if, (, options, ., optimizeParameters, ), {]
[(, new, OptimizeReturns, (, compiler, ), ), ;, }, if, (, options, ., optimizeParameters, ), {, passes, ., addPass, (]
[(, compiler, ), ), ;, }, if, (, options, ., optimizeParameters, ), {, passes, ., addPass, (, new, OptimizeParameters, (]
[(, options, ., optimizeParameters, ), {, passes, ., addPass, (, new, OptimizeParameters, (, compiler, ), ), ;, }, if, (]
[(, options, ., optimizeParameters, ), {, passes, ., addPass, (, new, OptimizeParameters, (, compiler, ), ), ;, }, if, (]
[addPass, (, new, OptimizeParameters, (, compiler, ), ), ;, }, if, (, options, ., optimizeCalls, ), {, boolean, removeOnlyLocals, =]
[addPass, (, new, OptimizeParameters, (, compiler, ), ), ;, }, if, (, options, ., optimizeCalls, ), {, boolean, removeOnlyLocals, =]
[addPass, (, new, OptimizeParameters, (, compiler, ), ), ;, }, if, (, options, ., optimizeCalls, ), {, boolean, removeOnlyLocals, =]
[(, compiler, ), ), ;, }, if, (, options, ., optimizeCalls, ), {, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&]
[compiler, ), ), ;, }, if, (, options, ., optimizeCalls, ), {, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !]
[compiler, ), ), ;, }, if, (, options, ., optimizeCalls, ), {, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !]
[options, ., optimizeCalls, ), {, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =]
[options, ., optimizeCalls, ), {, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =]
[options, ., optimizeCalls, ), {, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =]
[{, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=]
[{, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=]
[options, ., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;]
[options, ., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;]
[!, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, passes, ., addPass, (]
[removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, passes, ., addPass, (, new, RemoveUnusedVars, (]
[boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, passes, ., addPass, (, new, RemoveUnusedVars, (, compiler, ,]
[preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, passes, ., addPass, (, new, RemoveUnusedVars, (, compiler, ,, !]
[options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, passes, ., addPass, (, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,]
[anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, passes, ., addPass, (, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,]
[passes, ., addPass, (, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, true, ), ), ;, }, return]
[!, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, true, ), ), ;, }, return, passes, ;, }, }, ;, final, PassFactory, markPureFunctions, =]
[preserveAnonymousFunctionNames, ,, true, ), ), ;, }, return, passes, ;, }, }, ;, final, PassFactory, markPureFunctions, =, new, PassFactory, (]
[true, ), ), ;, }, return, passes, ;, }, }, ;, final, PassFactory, markPureFunctions, =, new, PassFactory, (, "markPureFunctions", ,]
[=, new, PassFactory, (, "markPureFunctions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, PureFunctionIdentifier, ., Driver, (]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, PureFunctionIdentifier, ., Driver, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, PureFunctionIdentifier, ., Driver, (, compiler, ,]
[protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, PureFunctionIdentifier, ., Driver, (, compiler, ,, options, ., debugFunctionSideEffectsPath, ,]
[PureFunctionIdentifier, ., Driver, (, compiler, ,, options, ., debugFunctionSideEffectsPath, ,, false, ), ;, }, }, ;, final, PassFactory, markNoSideEffectCalls, =]
[(, compiler, ,, options, ., debugFunctionSideEffectsPath, ,, false, ), ;, }, }, ;, final, PassFactory, markNoSideEffectCalls, =, new, PassFactory, (]
[,, options, ., debugFunctionSideEffectsPath, ,, false, ), ;, }, }, ;, final, PassFactory, markNoSideEffectCalls, =, new, PassFactory, (, "markNoSideEffectCalls", ,]
[=, new, PassFactory, (, "markNoSideEffectCalls", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "markNoSideEffectCalls", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, MarkNoSideEffectCalls, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, MarkNoSideEffectCalls, (, compiler, ), ;, }, }, ;, final, PassFactory, inlineVariables, =]
[compiler, ), {, return, new, MarkNoSideEffectCalls, (, compiler, ), ;, }, }, ;, final, PassFactory, inlineVariables, =, new, PassFactory, (]
[{, return, new, MarkNoSideEffectCalls, (, compiler, ), ;, }, }, ;, final, PassFactory, inlineVariables, =, new, PassFactory, (, "inlineVariables", ,]
[new, PassFactory, (, "inlineVariables", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (, isInliningForbidden, (, ), ), {, return]
[Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (, isInliningForbidden, (, ), ), {, return, new, ErrorPass, (]
[CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (, isInliningForbidden, (, ), ), {, return, new, ErrorPass, (, compiler, ,]
[{, return, new, ErrorPass, (, compiler, ,, CANNOT_USE_PROTOTYPE_AND_VAR, ), ;, }, else, {, InlineVariables, ., Mode, mode, ;, if, (]
[{, return, new, ErrorPass, (, compiler, ,, CANNOT_USE_PROTOTYPE_AND_VAR, ), ;, }, else, {, InlineVariables, ., Mode, mode, ;, if, (]
[compiler, ,, CANNOT_USE_PROTOTYPE_AND_VAR, ), ;, }, else, {, InlineVariables, ., Mode, mode, ;, if, (, options, ., inlineVariables, ), {]
[CANNOT_USE_PROTOTYPE_AND_VAR, ), ;, }, else, {, InlineVariables, ., Mode, mode, ;, if, (, options, ., inlineVariables, ), {, mode, =]
[CANNOT_USE_PROTOTYPE_AND_VAR, ), ;, }, else, {, InlineVariables, ., Mode, mode, ;, if, (, options, ., inlineVariables, ), {, mode, =]
[CANNOT_USE_PROTOTYPE_AND_VAR, ), ;, }, else, {, InlineVariables, ., Mode, mode, ;, if, (, options, ., inlineVariables, ), {, mode, =]
[;, if, (, options, ., inlineVariables, ), {, mode, =, InlineVariables, ., Mode, ., ALL, ;, }, else, if, (]
[;, if, (, options, ., inlineVariables, ), {, mode, =, InlineVariables, ., Mode, ., ALL, ;, }, else, if, (]
[inlineVariables, ), {, mode, =, InlineVariables, ., Mode, ., ALL, ;, }, else, if, (, options, ., inlineLocalVariables, ), {]
[{, mode, =, InlineVariables, ., Mode, ., ALL, ;, }, else, if, (, options, ., inlineLocalVariables, ), {, mode, =]
[{, mode, =, InlineVariables, ., Mode, ., ALL, ;, }, else, if, (, options, ., inlineLocalVariables, ), {, mode, =]
[{, mode, =, InlineVariables, ., Mode, ., ALL, ;, }, else, if, (, options, ., inlineLocalVariables, ), {, mode, =]
[else, if, (, options, ., inlineLocalVariables, ), {, mode, =, InlineVariables, ., Mode, ., LOCALS_ONLY, ;, }, else, {, throw]
[options, ., inlineLocalVariables, ), {, mode, =, InlineVariables, ., Mode, ., LOCALS_ONLY, ;, }, else, {, throw, new, IllegalStateException, (]
[mode, =, InlineVariables, ., Mode, ., LOCALS_ONLY, ;, }, else, {, throw, new, IllegalStateException, (, "No variable inlining option set.", ), ;, }, return]
[., Mode, ., LOCALS_ONLY, ;, }, else, {, throw, new, IllegalStateException, (, "No variable inlining option set.", ), ;, }, return, new, InlineVariables, (]
[., LOCALS_ONLY, ;, }, else, {, throw, new, IllegalStateException, (, "No variable inlining option set.", ), ;, }, return, new, InlineVariables, (, compiler, ,]
[;, }, else, {, throw, new, IllegalStateException, (, "No variable inlining option set.", ), ;, }, return, new, InlineVariables, (, compiler, ,, mode, ,]
[}, return, new, InlineVariables, (, compiler, ,, mode, ,, true, ), ;, }, }, }, ;, final, PassFactory, inlineConstants, =]
[InlineVariables, (, compiler, ,, mode, ,, true, ), ;, }, }, }, ;, final, PassFactory, inlineConstants, =, new, PassFactory, (]
[compiler, ,, mode, ,, true, ), ;, }, }, }, ;, final, PassFactory, inlineConstants, =, new, PassFactory, (, "inlineConstants", ,]
[=, new, PassFactory, (, "inlineConstants", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "inlineConstants", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineVariables, (]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineVariables, (, compiler, ,]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineVariables, (, compiler, ,]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineVariables, (, compiler, ,]
[protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineVariables, (, compiler, ,, InlineVariables, ., Mode, ., CONSTANTS_ONLY, ,]
[InlineVariables, (, compiler, ,, InlineVariables, ., Mode, ., CONSTANTS_ONLY, ,, true, ), ;, }, }, ;, final, PassFactory, minimizeExitPoints, =]
[,, InlineVariables, ., Mode, ., CONSTANTS_ONLY, ,, true, ), ;, }, }, ;, final, PassFactory, minimizeExitPoints, =, new, PassFactory, (]
[., Mode, ., CONSTANTS_ONLY, ,, true, ), ;, }, }, ;, final, PassFactory, minimizeExitPoints, =, new, PassFactory, (, "minimizeExitPoints", ,]
[=, new, PassFactory, (, "minimizeExitPoints", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "minimizeExitPoints", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, MinimizeExitPoints, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, MinimizeExitPoints, (, compiler, ), ;, }, }, ;, final, PassFactory, removeUnreachableCode, =]
[compiler, ), {, return, new, MinimizeExitPoints, (, compiler, ), ;, }, }, ;, final, PassFactory, removeUnreachableCode, =, new, PassFactory, (]
[{, return, new, MinimizeExitPoints, (, compiler, ), ;, }, }, ;, final, PassFactory, removeUnreachableCode, =, new, PassFactory, (, "removeUnreachableCode", ,]
[=, new, PassFactory, (, "removeUnreachableCode", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "removeUnreachableCode", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, UnreachableCodeElimination, (]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, UnreachableCodeElimination, (, compiler, ,]
[AbstractCompiler, compiler, ), {, return, new, UnreachableCodeElimination, (, compiler, ,, true, ), ;, }, }, ;, final, PassFactory, removeUnusedPrototypeProperties, =]
[{, return, new, UnreachableCodeElimination, (, compiler, ,, true, ), ;, }, }, ;, final, PassFactory, removeUnusedPrototypeProperties, =, new, PassFactory, (]
[new, UnreachableCodeElimination, (, compiler, ,, true, ), ;, }, }, ;, final, PassFactory, removeUnusedPrototypeProperties, =, new, PassFactory, (, "removeUnusedPrototypeProperties", ,]
[=, new, PassFactory, (, "removeUnusedPrototypeProperties", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "removeUnusedPrototypeProperties", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RemoveUnusedPrototypeProperties, (]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RemoveUnusedPrototypeProperties, (, compiler, ,]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RemoveUnusedPrototypeProperties, (, compiler, ,]
[@, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RemoveUnusedPrototypeProperties, (, compiler, ,, options, ., removeUnusedPrototypePropertiesInExterns, ,]
[Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RemoveUnusedPrototypeProperties, (, compiler, ,, options, ., removeUnusedPrototypePropertiesInExterns, ,, !]
[Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RemoveUnusedPrototypeProperties, (, compiler, ,, options, ., removeUnusedPrototypePropertiesInExterns, ,, !]
[(, compiler, ,, options, ., removeUnusedPrototypePropertiesInExterns, ,, !, options, ., removeUnusedVars, ), ;, }, }, ;, final, PassFactory, removeUnusedClassProperties, =]
[options, ., removeUnusedPrototypePropertiesInExterns, ,, !, options, ., removeUnusedVars, ), ;, }, }, ;, final, PassFactory, removeUnusedClassProperties, =, new, PassFactory, (]
[removeUnusedPrototypePropertiesInExterns, ,, !, options, ., removeUnusedVars, ), ;, }, }, ;, final, PassFactory, removeUnusedClassProperties, =, new, PassFactory, (, "removeUnusedClassProperties", ,]
[=, new, PassFactory, (, "removeUnusedClassProperties", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "removeUnusedClassProperties", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RemoveUnusedClassProperties, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, RemoveUnusedClassProperties, (, compiler, ), ;, }, }, ;, final, PassFactory, smartNamePass, =]
[compiler, ), {, return, new, RemoveUnusedClassProperties, (, compiler, ), ;, }, }, ;, final, PassFactory, smartNamePass, =, new, PassFactory, (]
[{, return, new, RemoveUnusedClassProperties, (, compiler, ), ;, }, }, ;, final, PassFactory, smartNamePass, =, new, PassFactory, (, "smartNamePass", ,]
[new, PassFactory, (, "smartNamePass", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
[CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NameAnalyzer, na, =]
[{, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NameAnalyzer, na, =, new, NameAnalyzer, (]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NameAnalyzer, na, =, new, NameAnalyzer, (, compiler, ,]
[process, (, Node, externs, ,, Node, root, ), {, NameAnalyzer, na, =, new, NameAnalyzer, (, compiler, ,, false, ), ;]
[process, (, Node, externs, ,, Node, root, ), {, NameAnalyzer, na, =, new, NameAnalyzer, (, compiler, ,, false, ), ;]
[,, Node, root, ), {, NameAnalyzer, na, =, new, NameAnalyzer, (, compiler, ,, false, ), ;, na, ., process, (]
[root, ), {, NameAnalyzer, na, =, new, NameAnalyzer, (, compiler, ,, false, ), ;, na, ., process, (, externs, ,]
[new, NameAnalyzer, (, compiler, ,, false, ), ;, na, ., process, (, externs, ,, root, ), ;, String, reportPath, =]
[new, NameAnalyzer, (, compiler, ,, false, ), ;, na, ., process, (, externs, ,, root, ), ;, String, reportPath, =]
[), ;, na, ., process, (, externs, ,, root, ), ;, String, reportPath, =, options, ., reportPath, ;, if, (]
[), ;, na, ., process, (, externs, ,, root, ), ;, String, reportPath, =, options, ., reportPath, ;, if, (]
[na, ., process, (, externs, ,, root, ), ;, String, reportPath, =, options, ., reportPath, ;, if, (, reportPath, !=]
[,, root, ), ;, String, reportPath, =, options, ., reportPath, ;, if, (, reportPath, !=, null, ), {, try, {]
[,, root, ), ;, String, reportPath, =, options, ., reportPath, ;, if, (, reportPath, !=, null, ), {, try, {]
[String, reportPath, =, options, ., reportPath, ;, if, (, reportPath, !=, null, ), {, try, {, Files, ., write, (]
[String, reportPath, =, options, ., reportPath, ;, if, (, reportPath, !=, null, ), {, try, {, Files, ., write, (]
[;, if, (, reportPath, !=, null, ), {, try, {, Files, ., write, (, na, ., getHtmlReport, (, ), ,]
[reportPath, !=, null, ), {, try, {, Files, ., write, (, na, ., getHtmlReport, (, ), ,, new, File, (]
[), {, try, {, Files, ., write, (, na, ., getHtmlReport, (, ), ,, new, File, (, reportPath, ), ,]
[), {, try, {, Files, ., write, (, na, ., getHtmlReport, (, ), ,, new, File, (, reportPath, ), ,]
[), ,, new, File, (, reportPath, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {]
[), ,, new, File, (, reportPath, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {]
[(, reportPath, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (]
[(, reportPath, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (]
[Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (]
[UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, REPORT_PATH_IO_ERROR, ,]
[), {, compiler, ., report, (, JSError, ., make, (, REPORT_PATH_IO_ERROR, ,, reportPath, ), ), ;, }, }, if, (]
[), {, compiler, ., report, (, JSError, ., make, (, REPORT_PATH_IO_ERROR, ,, reportPath, ), ), ;, }, }, if, (]
[(, JSError, ., make, (, REPORT_PATH_IO_ERROR, ,, reportPath, ), ), ;, }, }, if, (, options, ., smartNameRemoval, ), {]
[(, JSError, ., make, (, REPORT_PATH_IO_ERROR, ,, reportPath, ), ), ;, }, }, if, (, options, ., smartNameRemoval, ), {]
[smartNameRemoval, ), {, na, ., removeUnreferenced, (, ), ;, }, }, }, ;, }, }, ;, final, PassFactory, smartNamePass2, =]
[na, ., removeUnreferenced, (, ), ;, }, }, }, ;, }, }, ;, final, PassFactory, smartNamePass2, =, new, PassFactory, (]
[removeUnreferenced, (, ), ;, }, }, }, ;, }, }, ;, final, PassFactory, smartNamePass2, =, new, PassFactory, (, "smartNamePass", ,]
[new, PassFactory, (, "smartNamePass", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
[CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NameAnalyzer, na, =]
[{, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NameAnalyzer, na, =, new, NameAnalyzer, (]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NameAnalyzer, na, =, new, NameAnalyzer, (, compiler, ,]
[process, (, Node, externs, ,, Node, root, ), {, NameAnalyzer, na, =, new, NameAnalyzer, (, compiler, ,, false, ), ;]
[process, (, Node, externs, ,, Node, root, ), {, NameAnalyzer, na, =, new, NameAnalyzer, (, compiler, ,, false, ), ;]
[,, Node, root, ), {, NameAnalyzer, na, =, new, NameAnalyzer, (, compiler, ,, false, ), ;, na, ., process, (]
[root, ), {, NameAnalyzer, na, =, new, NameAnalyzer, (, compiler, ,, false, ), ;, na, ., process, (, externs, ,]
[NameAnalyzer, na, =, new, NameAnalyzer, (, compiler, ,, false, ), ;, na, ., process, (, externs, ,, root, ), ;]
[NameAnalyzer, na, =, new, NameAnalyzer, (, compiler, ,, false, ), ;, na, ., process, (, externs, ,, root, ), ;]
[,, root, ), ;, na, ., removeUnreferenced, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, inlineSimpleMethods, =]
[;, na, ., removeUnreferenced, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, inlineSimpleMethods, =, new, PassFactory, (]
[., removeUnreferenced, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, inlineSimpleMethods, =, new, PassFactory, (, "inlineSimpleMethods", ,]
[=, new, PassFactory, (, "inlineSimpleMethods", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "inlineSimpleMethods", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineSimpleMethods, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, InlineSimpleMethods, (, compiler, ), ;, }, }, ;, final, PassFactory, deadAssignmentsElimination, =]
[compiler, ), {, return, new, InlineSimpleMethods, (, compiler, ), ;, }, }, ;, final, PassFactory, deadAssignmentsElimination, =, new, PassFactory, (]
[{, return, new, InlineSimpleMethods, (, compiler, ), ;, }, }, ;, final, PassFactory, deadAssignmentsElimination, =, new, PassFactory, (, "deadAssignmentsElimination", ,]
[=, new, PassFactory, (, "deadAssignmentsElimination", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "deadAssignmentsElimination", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, DeadAssignmentsElimination, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, DeadAssignmentsElimination, (, compiler, ), ;, }, }, ;, final, PassFactory, inlineFunctions, =]
[compiler, ), {, return, new, DeadAssignmentsElimination, (, compiler, ), ;, }, }, ;, final, PassFactory, inlineFunctions, =, new, PassFactory, (]
[{, return, new, DeadAssignmentsElimination, (, compiler, ), ;, }, }, ;, final, PassFactory, inlineFunctions, =, new, PassFactory, (, "inlineFunctions", ,]
[PassFactory, (, "inlineFunctions", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, boolean, enableBlockInlining, =]
[(, "inlineFunctions", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, boolean, enableBlockInlining, =, !]
[{, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, boolean, enableBlockInlining, =, !, isInliningForbidden, (, ), ;, return]
[protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, boolean, enableBlockInlining, =, !, isInliningForbidden, (, ), ;, return, new, InlineFunctions, (]
[create, (, AbstractCompiler, compiler, ), {, boolean, enableBlockInlining, =, !, isInliningForbidden, (, ), ;, return, new, InlineFunctions, (, compiler, ,]
[create, (, AbstractCompiler, compiler, ), {, boolean, enableBlockInlining, =, !, isInliningForbidden, (, ), ;, return, new, InlineFunctions, (, compiler, ,]
[boolean, enableBlockInlining, =, !, isInliningForbidden, (, ), ;, return, new, InlineFunctions, (, compiler, ,, compiler, ., getUniqueNameIdSupplier, (, ), ,]
[boolean, enableBlockInlining, =, !, isInliningForbidden, (, ), ;, return, new, InlineFunctions, (, compiler, ,, compiler, ., getUniqueNameIdSupplier, (, ), ,]
[isInliningForbidden, (, ), ;, return, new, InlineFunctions, (, compiler, ,, compiler, ., getUniqueNameIdSupplier, (, ), ,, options, ., inlineFunctions, ,]
[isInliningForbidden, (, ), ;, return, new, InlineFunctions, (, compiler, ,, compiler, ., getUniqueNameIdSupplier, (, ), ,, options, ., inlineFunctions, ,]
[return, new, InlineFunctions, (, compiler, ,, compiler, ., getUniqueNameIdSupplier, (, ), ,, options, ., inlineFunctions, ,, options, ., inlineLocalFunctions, ,]
[InlineFunctions, (, compiler, ,, compiler, ., getUniqueNameIdSupplier, (, ), ,, options, ., inlineFunctions, ,, options, ., inlineLocalFunctions, ,, enableBlockInlining, ,]
[InlineFunctions, (, compiler, ,, compiler, ., getUniqueNameIdSupplier, (, ), ,, options, ., inlineFunctions, ,, options, ., inlineLocalFunctions, ,, enableBlockInlining, ,]
[InlineFunctions, (, compiler, ,, compiler, ., getUniqueNameIdSupplier, (, ), ,, options, ., inlineFunctions, ,, options, ., inlineLocalFunctions, ,, enableBlockInlining, ,]
[getUniqueNameIdSupplier, (, ), ,, options, ., inlineFunctions, ,, options, ., inlineLocalFunctions, ,, enableBlockInlining, ,, options, ., assumeStrictThis, (, ), ||]
[getUniqueNameIdSupplier, (, ), ,, options, ., inlineFunctions, ,, options, ., inlineLocalFunctions, ,, enableBlockInlining, ,, options, ., assumeStrictThis, (, ), ||]
[getUniqueNameIdSupplier, (, ), ,, options, ., inlineFunctions, ,, options, ., inlineLocalFunctions, ,, enableBlockInlining, ,, options, ., assumeStrictThis, (, ), ||]
[inlineFunctions, ,, options, ., inlineLocalFunctions, ,, enableBlockInlining, ,, options, ., assumeStrictThis, (, ), ||, options, ., getLanguageIn, (, ), ==]
[inlineFunctions, ,, options, ., inlineLocalFunctions, ,, enableBlockInlining, ,, options, ., assumeStrictThis, (, ), ||, options, ., getLanguageIn, (, ), ==]
[inlineLocalFunctions, ,, enableBlockInlining, ,, options, ., assumeStrictThis, (, ), ||, options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ,]
[options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ,, true, ), ;, }, }, ;, final, PassFactory, inlineProperties, =]
[(, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ,, true, ), ;, }, }, ;, final, PassFactory, inlineProperties, =, new, PassFactory, (]
[==, LanguageMode, ., ECMASCRIPT5_STRICT, ,, true, ), ;, }, }, ;, final, PassFactory, inlineProperties, =, new, PassFactory, (, "inlineProperties", ,]
[=, new, PassFactory, (, "inlineProperties", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "inlineProperties", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineProperties, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, InlineProperties, (, compiler, ), ;, }, }, ;, final, PassFactory, removeUnusedVars, =]
[compiler, ), {, return, new, InlineProperties, (, compiler, ), ;, }, }, ;, final, PassFactory, removeUnusedVars, =, new, PassFactory, (]
[{, return, new, InlineProperties, (, compiler, ), ;, }, }, ;, final, PassFactory, removeUnusedVars, =, new, PassFactory, (, "removeUnusedVars", ,]
[PassFactory, (, "removeUnusedVars", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, boolean, removeOnlyLocals, =]
[PassFactory, (, "removeUnusedVars", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, boolean, removeOnlyLocals, =]
[PassFactory, (, "removeUnusedVars", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, boolean, removeOnlyLocals, =]
[false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !]
[(, AbstractCompiler, compiler, ), {, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =]
[(, AbstractCompiler, compiler, ), {, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =]
[(, AbstractCompiler, compiler, ), {, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =]
[{, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=]
[{, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=]
[., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, return]
[!, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, return, new, RemoveUnusedVars, (]
[., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, return, new, RemoveUnusedVars, (, compiler, ,]
[removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, return, new, RemoveUnusedVars, (, compiler, ,, !]
[boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, return, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,]
[=, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, return, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,]
[new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, false, ), ;, }, }, ;, final, PassFactory, crossModuleCodeMotion, =]
[compiler, ,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, false, ), ;, }, }, ;, final, PassFactory, crossModuleCodeMotion, =, new, PassFactory, (]
[!, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, false, ), ;, }, }, ;, final, PassFactory, crossModuleCodeMotion, =, new, PassFactory, (, "crossModuleCodeMotion", ,]
[=, new, PassFactory, (, "crossModuleCodeMotion", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "crossModuleCodeMotion", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CrossModuleCodeMotion, (]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CrossModuleCodeMotion, (, compiler, ,]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CrossModuleCodeMotion, (, compiler, ,]
[return, new, CrossModuleCodeMotion, (, compiler, ,, compiler, ., getModuleGraph, (, ), ), ;, }, }, ;, final, PassFactory, crossModuleMethodMotion, =]
[(, compiler, ,, compiler, ., getModuleGraph, (, ), ), ;, }, }, ;, final, PassFactory, crossModuleMethodMotion, =, new, PassFactory, (]
[,, compiler, ., getModuleGraph, (, ), ), ;, }, }, ;, final, PassFactory, crossModuleMethodMotion, =, new, PassFactory, (, "crossModuleMethodMotion", ,]
[=, new, PassFactory, (, "crossModuleMethodMotion", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "crossModuleMethodMotion", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CrossModuleMethodMotion, (]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CrossModuleMethodMotion, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CrossModuleMethodMotion, (, compiler, ,, crossModuleIdGenerator, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CrossModuleMethodMotion, (, compiler, ,, crossModuleIdGenerator, ,]
[return, new, CrossModuleMethodMotion, (, compiler, ,, crossModuleIdGenerator, ,, options, ., removeUnusedPrototypePropertiesInExterns, ), ;, }, }, ;, final, PassFactory, specializeInitialModule, =]
[(, compiler, ,, crossModuleIdGenerator, ,, options, ., removeUnusedPrototypePropertiesInExterns, ), ;, }, }, ;, final, PassFactory, specializeInitialModule, =, new, PassFactory, (]
[,, crossModuleIdGenerator, ,, options, ., removeUnusedPrototypePropertiesInExterns, ), ;, }, }, ;, final, PassFactory, specializeInitialModule, =, new, PassFactory, (, "specializeInitialModule", ,]
[=, new, PassFactory, (, "specializeInitialModule", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "specializeInitialModule", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, SpecializeModule, (]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, SpecializeModule, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, SpecializeModule, (, compiler, ,, devirtualizePrototypeMethods, ,]
[@, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, SpecializeModule, (, compiler, ,, devirtualizePrototypeMethods, ,, inlineFunctions, ,]
[return, new, SpecializeModule, (, compiler, ,, devirtualizePrototypeMethods, ,, inlineFunctions, ,, removeUnusedPrototypeProperties, ), ;, }, }, ;, final, PassFactory, flowSensitiveInlineVariables, =]
[(, compiler, ,, devirtualizePrototypeMethods, ,, inlineFunctions, ,, removeUnusedPrototypeProperties, ), ;, }, }, ;, final, PassFactory, flowSensitiveInlineVariables, =, new, PassFactory, (]
[,, devirtualizePrototypeMethods, ,, inlineFunctions, ,, removeUnusedPrototypeProperties, ), ;, }, }, ;, final, PassFactory, flowSensitiveInlineVariables, =, new, PassFactory, (, "flowSensitiveInlineVariables", ,]
[=, new, PassFactory, (, "flowSensitiveInlineVariables", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "flowSensitiveInlineVariables", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, FlowSensitiveInlineVariables, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, FlowSensitiveInlineVariables, (, compiler, ), ;, }, }, ;, final, PassFactory, coalesceVariableNames, =]
[compiler, ), {, return, new, FlowSensitiveInlineVariables, (, compiler, ), ;, }, }, ;, final, PassFactory, coalesceVariableNames, =, new, PassFactory, (]
[{, return, new, FlowSensitiveInlineVariables, (, compiler, ), ;, }, }, ;, final, PassFactory, coalesceVariableNames, =, new, PassFactory, (, "coalesceVariableNames", ,]
[=, new, PassFactory, (, "coalesceVariableNames", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "coalesceVariableNames", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CoalesceVariableNames, (]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CoalesceVariableNames, (, compiler, ,]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CoalesceVariableNames, (, compiler, ,]
[), {, return, new, CoalesceVariableNames, (, compiler, ,, options, ., generatePseudoNames, ), ;, }, }, ;, final, PassFactory, exploitAssign, =]
[new, CoalesceVariableNames, (, compiler, ,, options, ., generatePseudoNames, ), ;, }, }, ;, final, PassFactory, exploitAssign, =, new, PassFactory, (]
[(, compiler, ,, options, ., generatePseudoNames, ), ;, }, }, ;, final, PassFactory, exploitAssign, =, new, PassFactory, (, "exploitAssign", ,]
[=, new, PassFactory, (, "exploitAssign", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "exploitAssign", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, PeepholeOptimizationsPass, (]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, PeepholeOptimizationsPass, (, compiler, ,]
[{, return, new, PeepholeOptimizationsPass, (, compiler, ,, new, ExploitAssigns, (, ), ), ;, }, }, ;, final, PassFactory, collapseVariableDeclarations, =]
[PeepholeOptimizationsPass, (, compiler, ,, new, ExploitAssigns, (, ), ), ;, }, }, ;, final, PassFactory, collapseVariableDeclarations, =, new, PassFactory, (]
[compiler, ,, new, ExploitAssigns, (, ), ), ;, }, }, ;, final, PassFactory, collapseVariableDeclarations, =, new, PassFactory, (, "collapseVariableDeclarations", ,]
[=, new, PassFactory, (, "collapseVariableDeclarations", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "collapseVariableDeclarations", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CollapseVariableDeclarations, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, CollapseVariableDeclarations, (, compiler, ), ;, }, }, ;, final, PassFactory, groupVariableDeclarations, =]
[compiler, ), {, return, new, CollapseVariableDeclarations, (, compiler, ), ;, }, }, ;, final, PassFactory, groupVariableDeclarations, =, new, PassFactory, (]
[{, return, new, CollapseVariableDeclarations, (, compiler, ), ;, }, }, ;, final, PassFactory, groupVariableDeclarations, =, new, PassFactory, (, "groupVariableDeclarations", ,]
[=, new, PassFactory, (, "groupVariableDeclarations", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "groupVariableDeclarations", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, GroupVariableDeclarations, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, GroupVariableDeclarations, (, compiler, ), ;, }, }, ;, final, PassFactory, extractPrototypeMemberDeclarations, =]
[compiler, ), {, return, new, GroupVariableDeclarations, (, compiler, ), ;, }, }, ;, final, PassFactory, extractPrototypeMemberDeclarations, =, new, PassFactory, (]
[{, return, new, GroupVariableDeclarations, (, compiler, ), ;, }, }, ;, final, PassFactory, extractPrototypeMemberDeclarations, =, new, PassFactory, (, "extractPrototypeMemberDeclarations", ,]
[=, new, PassFactory, (, "extractPrototypeMemberDeclarations", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "extractPrototypeMemberDeclarations", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ExtractPrototypeMemberDeclarations, (]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ExtractPrototypeMemberDeclarations, (, compiler, ,]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ExtractPrototypeMemberDeclarations, (, compiler, ,]
[), {, return, new, ExtractPrototypeMemberDeclarations, (, compiler, ,, Pattern, ., USE_GLOBAL_TEMP, ), ;, }, }, ;, final, PassFactory, rewriteFunctionExpressions, =]
[new, ExtractPrototypeMemberDeclarations, (, compiler, ,, Pattern, ., USE_GLOBAL_TEMP, ), ;, }, }, ;, final, PassFactory, rewriteFunctionExpressions, =, new, PassFactory, (]
[(, compiler, ,, Pattern, ., USE_GLOBAL_TEMP, ), ;, }, }, ;, final, PassFactory, rewriteFunctionExpressions, =, new, PassFactory, (, "rewriteFunctionExpressions", ,]
[=, new, PassFactory, (, "rewriteFunctionExpressions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "rewriteFunctionExpressions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, FunctionRewriter, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, FunctionRewriter, (, compiler, ), ;, }, }, ;, final, PassFactory, collapseAnonymousFunctions, =]
[compiler, ), {, return, new, FunctionRewriter, (, compiler, ), ;, }, }, ;, final, PassFactory, collapseAnonymousFunctions, =, new, PassFactory, (]
[{, return, new, FunctionRewriter, (, compiler, ), ;, }, }, ;, final, PassFactory, collapseAnonymousFunctions, =, new, PassFactory, (, "collapseAnonymousFunctions", ,]
[=, new, PassFactory, (, "collapseAnonymousFunctions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "collapseAnonymousFunctions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CollapseAnonymousFunctions, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, CollapseAnonymousFunctions, (, compiler, ), ;, }, }, ;, final, PassFactory, moveFunctionDeclarations, =]
[compiler, ), {, return, new, CollapseAnonymousFunctions, (, compiler, ), ;, }, }, ;, final, PassFactory, moveFunctionDeclarations, =, new, PassFactory, (]
[{, return, new, CollapseAnonymousFunctions, (, compiler, ), ;, }, }, ;, final, PassFactory, moveFunctionDeclarations, =, new, PassFactory, (, "moveFunctionDeclarations", ,]
[=, new, PassFactory, (, "moveFunctionDeclarations", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "moveFunctionDeclarations", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, MoveFunctionDeclarations, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, MoveFunctionDeclarations, (, compiler, ), ;, }, }, ;, final, PassFactory, nameUnmappedAnonymousFunctions, =]
[compiler, ), {, return, new, MoveFunctionDeclarations, (, compiler, ), ;, }, }, ;, final, PassFactory, nameUnmappedAnonymousFunctions, =, new, PassFactory, (]
[{, return, new, MoveFunctionDeclarations, (, compiler, ), ;, }, }, ;, final, PassFactory, nameUnmappedAnonymousFunctions, =, new, PassFactory, (, "nameAnonymousFunctions", ,]
[=, new, PassFactory, (, "nameAnonymousFunctions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "nameAnonymousFunctions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, NameAnonymousFunctions, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, NameAnonymousFunctions, (, compiler, ), ;, }, }, ;, final, PassFactory, nameMappedAnonymousFunctions, =]
[compiler, ), {, return, new, NameAnonymousFunctions, (, compiler, ), ;, }, }, ;, final, PassFactory, nameMappedAnonymousFunctions, =, new, PassFactory, (]
[{, return, new, NameAnonymousFunctions, (, compiler, ), ;, }, }, ;, final, PassFactory, nameMappedAnonymousFunctions, =, new, PassFactory, (, "nameAnonymousFunctions", ,]
[new, PassFactory, (, "nameAnonymousFunctions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
[CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NameAnonymousFunctionsMapped, naf, =]
[{, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NameAnonymousFunctionsMapped, naf, =, new, NameAnonymousFunctionsMapped, (]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NameAnonymousFunctionsMapped, naf, =, new, NameAnonymousFunctionsMapped, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NameAnonymousFunctionsMapped, naf, =, new, NameAnonymousFunctionsMapped, (, compiler, ,]
[Node, externs, ,, Node, root, ), {, NameAnonymousFunctionsMapped, naf, =, new, NameAnonymousFunctionsMapped, (, compiler, ,, options, ., inputAnonymousFunctionNamingMap, ), ;]
[Node, externs, ,, Node, root, ), {, NameAnonymousFunctionsMapped, naf, =, new, NameAnonymousFunctionsMapped, (, compiler, ,, options, ., inputAnonymousFunctionNamingMap, ), ;]
[root, ), {, NameAnonymousFunctionsMapped, naf, =, new, NameAnonymousFunctionsMapped, (, compiler, ,, options, ., inputAnonymousFunctionNamingMap, ), ;, naf, ., process, (]
[{, NameAnonymousFunctionsMapped, naf, =, new, NameAnonymousFunctionsMapped, (, compiler, ,, options, ., inputAnonymousFunctionNamingMap, ), ;, naf, ., process, (, externs, ,]
[=, new, NameAnonymousFunctionsMapped, (, compiler, ,, options, ., inputAnonymousFunctionNamingMap, ), ;, naf, ., process, (, externs, ,, root, ), ;]
[NameAnonymousFunctionsMapped, (, compiler, ,, options, ., inputAnonymousFunctionNamingMap, ), ;, naf, ., process, (, externs, ,, root, ), ;, anonymousFunctionNameMap, =]
[NameAnonymousFunctionsMapped, (, compiler, ,, options, ., inputAnonymousFunctionNamingMap, ), ;, naf, ., process, (, externs, ,, root, ), ;, anonymousFunctionNameMap, =]
[), ;, anonymousFunctionNameMap, =, naf, ., getFunctionMap, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, aliasExternals, =]
[=, naf, ., getFunctionMap, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, aliasExternals, =, new, PassFactory, (]
[., getFunctionMap, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, aliasExternals, =, new, PassFactory, (, "aliasExternals", ,]
[=, new, PassFactory, (, "aliasExternals", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "aliasExternals", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AliasExternals, (]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AliasExternals, (, compiler, ,]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AliasExternals, (, compiler, ,]
[protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AliasExternals, (, compiler, ,, compiler, ., getModuleGraph, (, ), ,]
[protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AliasExternals, (, compiler, ,, compiler, ., getModuleGraph, (, ), ,]
[AbstractCompiler, compiler, ), {, return, new, AliasExternals, (, compiler, ,, compiler, ., getModuleGraph, (, ), ,, options, ., unaliasableGlobals, ,]
[AbstractCompiler, compiler, ), {, return, new, AliasExternals, (, compiler, ,, compiler, ., getModuleGraph, (, ), ,, options, ., unaliasableGlobals, ,]
[getModuleGraph, (, ), ,, options, ., unaliasableGlobals, ,, options, ., aliasableGlobals, ), ;, }, }, ;, final, PassFactory, aliasStrings, =]
[,, options, ., unaliasableGlobals, ,, options, ., aliasableGlobals, ), ;, }, }, ;, final, PassFactory, aliasStrings, =, new, PassFactory, (]
[., unaliasableGlobals, ,, options, ., aliasableGlobals, ), ;, }, }, ;, final, PassFactory, aliasStrings, =, new, PassFactory, (, "aliasStrings", ,]
[=, new, PassFactory, (, "aliasStrings", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "aliasStrings", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AliasStrings, (]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AliasStrings, (, compiler, ,]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AliasStrings, (, compiler, ,]
[protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AliasStrings, (, compiler, ,, compiler, ., getModuleGraph, (, ), ,]
[protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AliasStrings, (, compiler, ,, compiler, ., getModuleGraph, (, ), ,]
[protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AliasStrings, (, compiler, ,, compiler, ., getModuleGraph, (, ), ,]
[AbstractCompiler, compiler, ), {, return, new, AliasStrings, (, compiler, ,, compiler, ., getModuleGraph, (, ), ,, options, ., aliasAllStrings, ?]
[), {, return, new, AliasStrings, (, compiler, ,, compiler, ., getModuleGraph, (, ), ,, options, ., aliasAllStrings, ?, null, :]
[), {, return, new, AliasStrings, (, compiler, ,, compiler, ., getModuleGraph, (, ), ,, options, ., aliasAllStrings, ?, null, :]
[AliasStrings, (, compiler, ,, compiler, ., getModuleGraph, (, ), ,, options, ., aliasAllStrings, ?, null, :, options, ., aliasableStrings, ,]
[AliasStrings, (, compiler, ,, compiler, ., getModuleGraph, (, ), ,, options, ., aliasAllStrings, ?, null, :, options, ., aliasableStrings, ,]
[compiler, ., getModuleGraph, (, ), ,, options, ., aliasAllStrings, ?, null, :, options, ., aliasableStrings, ,, options, ., aliasStringsBlacklist, ,]
[compiler, ., getModuleGraph, (, ), ,, options, ., aliasAllStrings, ?, null, :, options, ., aliasableStrings, ,, options, ., aliasStringsBlacklist, ,]
[options, ., aliasableStrings, ,, options, ., aliasStringsBlacklist, ,, options, ., outputJsStringUsage, ), ;, }, }, ;, final, PassFactory, aliasKeywords, =]
[,, options, ., aliasStringsBlacklist, ,, options, ., outputJsStringUsage, ), ;, }, }, ;, final, PassFactory, aliasKeywords, =, new, PassFactory, (]
[., aliasStringsBlacklist, ,, options, ., outputJsStringUsage, ), ;, }, }, ;, final, PassFactory, aliasKeywords, =, new, PassFactory, (, "aliasKeywords", ,]
[=, new, PassFactory, (, "aliasKeywords", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "aliasKeywords", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AliasKeywords, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, AliasKeywords, (, compiler, ), ;, }, }, ;, final, PassFactory, objectPropertyStringPostprocess, =]
[compiler, ), {, return, new, AliasKeywords, (, compiler, ), ;, }, }, ;, final, PassFactory, objectPropertyStringPostprocess, =, new, PassFactory, (]
[{, return, new, AliasKeywords, (, compiler, ), ;, }, }, ;, final, PassFactory, objectPropertyStringPostprocess, =, new, PassFactory, (, "ObjectPropertyStringPostprocess", ,]
[=, new, PassFactory, (, "ObjectPropertyStringPostprocess", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "ObjectPropertyStringPostprocess", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ObjectPropertyStringPostprocess, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, ObjectPropertyStringPostprocess, (, compiler, ), ;, }, }, ;, final, PassFactory, ambiguateProperties, =]
[compiler, ), {, return, new, ObjectPropertyStringPostprocess, (, compiler, ), ;, }, }, ;, final, PassFactory, ambiguateProperties, =, new, PassFactory, (]
[{, return, new, ObjectPropertyStringPostprocess, (, compiler, ), ;, }, }, ;, final, PassFactory, ambiguateProperties, =, new, PassFactory, (, "ambiguateProperties", ,]
[=, new, PassFactory, (, "ambiguateProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "ambiguateProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AmbiguateProperties, (]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AmbiguateProperties, (, compiler, ,]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AmbiguateProperties, (, compiler, ,]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AmbiguateProperties, (, compiler, ,]
[AmbiguateProperties, (, compiler, ,, options, ., anonymousFunctionNaming, ., getReservedCharacters, (, ), ), ;, }, }, ;, final, PassFactory, markUnnormalized, =]
[,, options, ., anonymousFunctionNaming, ., getReservedCharacters, (, ), ), ;, }, }, ;, final, PassFactory, markUnnormalized, =, new, PassFactory, (]
[., anonymousFunctionNaming, ., getReservedCharacters, (, ), ), ;, }, }, ;, final, PassFactory, markUnnormalized, =, new, PassFactory, (, "markUnnormalized", ,]
[new, PassFactory, (, "markUnnormalized", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
[{, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[{, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[(, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, compiler, ., setLifeCycleStage, (]
[(, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, compiler, ., setLifeCycleStage, (]
[{, compiler, ., setLifeCycleStage, (, LifeCycleStage, ., RAW, ), ;, }, }, ;, }, }, ;, final, PassFactory, denormalize, =]
[setLifeCycleStage, (, LifeCycleStage, ., RAW, ), ;, }, }, ;, }, }, ;, final, PassFactory, denormalize, =, new, PassFactory, (]
[LifeCycleStage, ., RAW, ), ;, }, }, ;, }, }, ;, final, PassFactory, denormalize, =, new, PassFactory, (, "denormalize", ,]
[=, new, PassFactory, (, "denormalize", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "denormalize", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, Denormalize, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, Denormalize, (, compiler, ), ;, }, }, ;, final, PassFactory, invertContextualRenaming, =]
[compiler, ), {, return, new, Denormalize, (, compiler, ), ;, }, }, ;, final, PassFactory, invertContextualRenaming, =, new, PassFactory, (]
[{, return, new, Denormalize, (, compiler, ), ;, }, }, ;, final, PassFactory, invertContextualRenaming, =, new, PassFactory, (, "invertContextualRenaming", ,]
[=, new, PassFactory, (, "invertContextualRenaming", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[=, new, PassFactory, (, "invertContextualRenaming", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
["invertContextualRenaming", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, MakeDeclaredNamesUnique, ., getContextualRenameInverter, (]
[(, AbstractCompiler, compiler, ), {, return, MakeDeclaredNamesUnique, ., getContextualRenameInverter, (, compiler, ), ;, }, }, ;, final, PassFactory, renameProperties, =]
[), {, return, MakeDeclaredNamesUnique, ., getContextualRenameInverter, (, compiler, ), ;, }, }, ;, final, PassFactory, renameProperties, =, new, PassFactory, (]
[return, MakeDeclaredNamesUnique, ., getContextualRenameInverter, (, compiler, ), ;, }, }, ;, final, PassFactory, renameProperties, =, new, PassFactory, (, "renameProperties", ,]
["renameProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, final, VariableMap, prevPropertyMap, =]
["renameProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, final, VariableMap, prevPropertyMap, =]
[@, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, final, VariableMap, prevPropertyMap, =, options, ., inputPropertyMap, ;, return]
[;, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, propertyMap, =]
[(, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, propertyMap, =, runPropertyRenaming, (]
[{, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, propertyMap, =, runPropertyRenaming, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, propertyMap, =, runPropertyRenaming, (, compiler, ,, prevPropertyMap, ,]
[void, process, (, Node, externs, ,, Node, root, ), {, propertyMap, =, runPropertyRenaming, (, compiler, ,, prevPropertyMap, ,, externs, ,]
[runPropertyRenaming, (, AbstractCompiler, compiler, ,, VariableMap, prevPropertyMap, ,, Node, externs, ,, Node, root, ), {, char, [, ], reservedChars, =]
[runPropertyRenaming, (, AbstractCompiler, compiler, ,, VariableMap, prevPropertyMap, ,, Node, externs, ,, Node, root, ), {, char, [, ], reservedChars, =]
[runPropertyRenaming, (, AbstractCompiler, compiler, ,, VariableMap, prevPropertyMap, ,, Node, externs, ,, Node, root, ), {, char, [, ], reservedChars, =]
[,, Node, root, ), {, char, [, ], reservedChars, =, options, ., anonymousFunctionNaming, ., getReservedCharacters, (, ), ;, switch, (]
[,, Node, root, ), {, char, [, ], reservedChars, =, options, ., anonymousFunctionNaming, ., getReservedCharacters, (, ), ;, switch, (]
[[, ], reservedChars, =, options, ., anonymousFunctionNaming, ., getReservedCharacters, (, ), ;, switch, (, options, ., propertyRenaming, ), {, case]
[., anonymousFunctionNaming, ., getReservedCharacters, (, ), ;, switch, (, options, ., propertyRenaming, ), {, case, HEURISTIC, :, RenamePrototypes, rproto, =]
[getReservedCharacters, (, ), ;, switch, (, options, ., propertyRenaming, ), {, case, HEURISTIC, :, RenamePrototypes, rproto, =, new, RenamePrototypes, (]
[), ;, switch, (, options, ., propertyRenaming, ), {, case, HEURISTIC, :, RenamePrototypes, rproto, =, new, RenamePrototypes, (, compiler, ,]
[switch, (, options, ., propertyRenaming, ), {, case, HEURISTIC, :, RenamePrototypes, rproto, =, new, RenamePrototypes, (, compiler, ,, false, ,]
[options, ., propertyRenaming, ), {, case, HEURISTIC, :, RenamePrototypes, rproto, =, new, RenamePrototypes, (, compiler, ,, false, ,, reservedChars, ,]
[), {, case, HEURISTIC, :, RenamePrototypes, rproto, =, new, RenamePrototypes, (, compiler, ,, false, ,, reservedChars, ,, prevPropertyMap, ), ;]
[), {, case, HEURISTIC, :, RenamePrototypes, rproto, =, new, RenamePrototypes, (, compiler, ,, false, ,, reservedChars, ,, prevPropertyMap, ), ;]
[:, RenamePrototypes, rproto, =, new, RenamePrototypes, (, compiler, ,, false, ,, reservedChars, ,, prevPropertyMap, ), ;, rproto, ., process, (]
[rproto, =, new, RenamePrototypes, (, compiler, ,, false, ,, reservedChars, ,, prevPropertyMap, ), ;, rproto, ., process, (, externs, ,]
[(, compiler, ,, false, ,, reservedChars, ,, prevPropertyMap, ), ;, rproto, ., process, (, externs, ,, root, ), ;, return]
[(, compiler, ,, false, ,, reservedChars, ,, prevPropertyMap, ), ;, rproto, ., process, (, externs, ,, root, ), ;, return]
[prevPropertyMap, ), ;, rproto, ., process, (, externs, ,, root, ), ;, return, rproto, ., getPropertyMap, (, ), ;, case]
[process, (, externs, ,, root, ), ;, return, rproto, ., getPropertyMap, (, ), ;, case, AGGRESSIVE_HEURISTIC, :, RenamePrototypes, rproto2, =]
[,, root, ), ;, return, rproto, ., getPropertyMap, (, ), ;, case, AGGRESSIVE_HEURISTIC, :, RenamePrototypes, rproto2, =, new, RenamePrototypes, (]
[), ;, return, rproto, ., getPropertyMap, (, ), ;, case, AGGRESSIVE_HEURISTIC, :, RenamePrototypes, rproto2, =, new, RenamePrototypes, (, compiler, ,]
[return, rproto, ., getPropertyMap, (, ), ;, case, AGGRESSIVE_HEURISTIC, :, RenamePrototypes, rproto2, =, new, RenamePrototypes, (, compiler, ,, true, ,]
[., getPropertyMap, (, ), ;, case, AGGRESSIVE_HEURISTIC, :, RenamePrototypes, rproto2, =, new, RenamePrototypes, (, compiler, ,, true, ,, reservedChars, ,]
[), ;, case, AGGRESSIVE_HEURISTIC, :, RenamePrototypes, rproto2, =, new, RenamePrototypes, (, compiler, ,, true, ,, reservedChars, ,, prevPropertyMap, ), ;]
[), ;, case, AGGRESSIVE_HEURISTIC, :, RenamePrototypes, rproto2, =, new, RenamePrototypes, (, compiler, ,, true, ,, reservedChars, ,, prevPropertyMap, ), ;]
[:, RenamePrototypes, rproto2, =, new, RenamePrototypes, (, compiler, ,, true, ,, reservedChars, ,, prevPropertyMap, ), ;, rproto2, ., process, (]
[rproto2, =, new, RenamePrototypes, (, compiler, ,, true, ,, reservedChars, ,, prevPropertyMap, ), ;, rproto2, ., process, (, externs, ,]
[(, compiler, ,, true, ,, reservedChars, ,, prevPropertyMap, ), ;, rproto2, ., process, (, externs, ,, root, ), ;, return]
[(, compiler, ,, true, ,, reservedChars, ,, prevPropertyMap, ), ;, rproto2, ., process, (, externs, ,, root, ), ;, return]
[prevPropertyMap, ), ;, rproto2, ., process, (, externs, ,, root, ), ;, return, rproto2, ., getPropertyMap, (, ), ;, case]
[process, (, externs, ,, root, ), ;, return, rproto2, ., getPropertyMap, (, ), ;, case, ALL_UNQUOTED, :, RenameProperties, rprop, =]
[,, root, ), ;, return, rproto2, ., getPropertyMap, (, ), ;, case, ALL_UNQUOTED, :, RenameProperties, rprop, =, new, RenameProperties, (]
[), ;, return, rproto2, ., getPropertyMap, (, ), ;, case, ALL_UNQUOTED, :, RenameProperties, rprop, =, new, RenameProperties, (, compiler, ,]
[), ;, return, rproto2, ., getPropertyMap, (, ), ;, case, ALL_UNQUOTED, :, RenameProperties, rprop, =, new, RenameProperties, (, compiler, ,]
[., getPropertyMap, (, ), ;, case, ALL_UNQUOTED, :, RenameProperties, rprop, =, new, RenameProperties, (, compiler, ,, options, ., propertyAffinity, ,]
[., getPropertyMap, (, ), ;, case, ALL_UNQUOTED, :, RenameProperties, rprop, =, new, RenameProperties, (, compiler, ,, options, ., propertyAffinity, ,]
[;, case, ALL_UNQUOTED, :, RenameProperties, rprop, =, new, RenameProperties, (, compiler, ,, options, ., propertyAffinity, ,, options, ., generatePseudoNames, ,]
[ALL_UNQUOTED, :, RenameProperties, rprop, =, new, RenameProperties, (, compiler, ,, options, ., propertyAffinity, ,, options, ., generatePseudoNames, ,, prevPropertyMap, ,]
[rprop, =, new, RenameProperties, (, compiler, ,, options, ., propertyAffinity, ,, options, ., generatePseudoNames, ,, prevPropertyMap, ,, reservedChars, ), ;]
[rprop, =, new, RenameProperties, (, compiler, ,, options, ., propertyAffinity, ,, options, ., generatePseudoNames, ,, prevPropertyMap, ,, reservedChars, ), ;]
[(, compiler, ,, options, ., propertyAffinity, ,, options, ., generatePseudoNames, ,, prevPropertyMap, ,, reservedChars, ), ;, rprop, ., process, (]
[,, options, ., propertyAffinity, ,, options, ., generatePseudoNames, ,, prevPropertyMap, ,, reservedChars, ), ;, rprop, ., process, (, externs, ,]
[,, options, ., generatePseudoNames, ,, prevPropertyMap, ,, reservedChars, ), ;, rprop, ., process, (, externs, ,, root, ), ;, return]
[,, options, ., generatePseudoNames, ,, prevPropertyMap, ,, reservedChars, ), ;, rprop, ., process, (, externs, ,, root, ), ;, return]
[;, rprop, ., process, (, externs, ,, root, ), ;, return, rprop, ., getPropertyMap, (, ), ;, default, :, throw]
[process, (, externs, ,, root, ), ;, return, rprop, ., getPropertyMap, (, ), ;, default, :, throw, new, IllegalStateException, (]
[., getPropertyMap, (, ), ;, default, :, throw, new, IllegalStateException, (, "Unrecognized property renaming policy", ), ;, }, }, final, PassFactory, renameVars, =]
[), ;, default, :, throw, new, IllegalStateException, (, "Unrecognized property renaming policy", ), ;, }, }, final, PassFactory, renameVars, =, new, PassFactory, (]
[default, :, throw, new, IllegalStateException, (, "Unrecognized property renaming policy", ), ;, }, }, final, PassFactory, renameVars, =, new, PassFactory, (, "renameVars", ,]
["renameVars", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, final, VariableMap, prevVariableMap, =]
["renameVars", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, final, VariableMap, prevVariableMap, =]
[@, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, final, VariableMap, prevVariableMap, =, options, ., inputVariableMap, ;, return]
[;, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, variableMap, =]
[(, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, variableMap, =, runVariableRenaming, (]
[{, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, variableMap, =, runVariableRenaming, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, variableMap, =, runVariableRenaming, (, compiler, ,, prevVariableMap, ,]
[void, process, (, Node, externs, ,, Node, root, ), {, variableMap, =, runVariableRenaming, (, compiler, ,, prevVariableMap, ,, externs, ,]
[runVariableRenaming, (, AbstractCompiler, compiler, ,, VariableMap, prevVariableMap, ,, Node, externs, ,, Node, root, ), {, char, [, ], reservedChars, =]
[runVariableRenaming, (, AbstractCompiler, compiler, ,, VariableMap, prevVariableMap, ,, Node, externs, ,, Node, root, ), {, char, [, ], reservedChars, =]
[runVariableRenaming, (, AbstractCompiler, compiler, ,, VariableMap, prevVariableMap, ,, Node, externs, ,, Node, root, ), {, char, [, ], reservedChars, =]
[Node, root, ), {, char, [, ], reservedChars, =, options, ., anonymousFunctionNaming, ., getReservedCharacters, (, ), ;, boolean, preserveAnonymousFunctionNames, =]
[Node, root, ), {, char, [, ], reservedChars, =, options, ., anonymousFunctionNaming, ., getReservedCharacters, (, ), ;, boolean, preserveAnonymousFunctionNames, =]
[Node, root, ), {, char, [, ], reservedChars, =, options, ., anonymousFunctionNaming, ., getReservedCharacters, (, ), ;, boolean, preserveAnonymousFunctionNames, =]
[char, [, ], reservedChars, =, options, ., anonymousFunctionNaming, ., getReservedCharacters, (, ), ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=]
[char, [, ], reservedChars, =, options, ., anonymousFunctionNaming, ., getReservedCharacters, (, ), ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=]
[(, ), ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, Set, <, String, >, reservedNames, =]
[(, ), ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, Set, <, String, >, reservedNames, =]
[anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, Set, <, String, >, reservedNames, =, Sets, ., newHashSet, (, ), ;, if, (]
[anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, Set, <, String, >, reservedNames, =, Sets, ., newHashSet, (, ), ;, if, (]
[AnonymousFunctionNamingPolicy, ., OFF, ;, Set, <, String, >, reservedNames, =, Sets, ., newHashSet, (, ), ;, if, (, exportedNames, !=]
[;, Set, <, String, >, reservedNames, =, Sets, ., newHashSet, (, ), ;, if, (, exportedNames, !=, null, ), {]
[;, Set, <, String, >, reservedNames, =, Sets, ., newHashSet, (, ), ;, if, (, exportedNames, !=, null, ), {]
[>, reservedNames, =, Sets, ., newHashSet, (, ), ;, if, (, exportedNames, !=, null, ), {, reservedNames, ., addAll, (]
[., newHashSet, (, ), ;, if, (, exportedNames, !=, null, ), {, reservedNames, ., addAll, (, exportedNames, ), ;, }]
[., newHashSet, (, ), ;, if, (, exportedNames, !=, null, ), {, reservedNames, ., addAll, (, exportedNames, ), ;, }]
[;, if, (, exportedNames, !=, null, ), {, reservedNames, ., addAll, (, exportedNames, ), ;, }, reservedNames, ., addAll, (]
[;, if, (, exportedNames, !=, null, ), {, reservedNames, ., addAll, (, exportedNames, ), ;, }, reservedNames, ., addAll, (]
[addAll, (, exportedNames, ), ;, }, reservedNames, ., addAll, (, ParserRunner, ., getReservedVars, (, ), ), ;, RenameVars, rn, =]
[), ;, }, reservedNames, ., addAll, (, ParserRunner, ., getReservedVars, (, ), ), ;, RenameVars, rn, =, new, RenameVars, (]
[}, reservedNames, ., addAll, (, ParserRunner, ., getReservedVars, (, ), ), ;, RenameVars, rn, =, new, RenameVars, (, compiler, ,]
[}, reservedNames, ., addAll, (, ParserRunner, ., getReservedVars, (, ), ), ;, RenameVars, rn, =, new, RenameVars, (, compiler, ,]
[(, ParserRunner, ., getReservedVars, (, ), ), ;, RenameVars, rn, =, new, RenameVars, (, compiler, ,, options, ., renamePrefix, ,]
[(, ParserRunner, ., getReservedVars, (, ), ), ;, RenameVars, rn, =, new, RenameVars, (, compiler, ,, options, ., renamePrefix, ,]
[(, ParserRunner, ., getReservedVars, (, ), ), ;, RenameVars, rn, =, new, RenameVars, (, compiler, ,, options, ., renamePrefix, ,]
[(, ), ), ;, RenameVars, rn, =, new, RenameVars, (, compiler, ,, options, ., renamePrefix, ,, options, ., variableRenaming, ==]
[(, ), ), ;, RenameVars, rn, =, new, RenameVars, (, compiler, ,, options, ., renamePrefix, ,, options, ., variableRenaming, ==]
[RenameVars, rn, =, new, RenameVars, (, compiler, ,, options, ., renamePrefix, ,, options, ., variableRenaming, ==, VariableRenamingPolicy, ., LOCAL, ,]
[=, new, RenameVars, (, compiler, ,, options, ., renamePrefix, ,, options, ., variableRenaming, ==, VariableRenamingPolicy, ., LOCAL, ,, preserveAnonymousFunctionNames, ,]
[=, new, RenameVars, (, compiler, ,, options, ., renamePrefix, ,, options, ., variableRenaming, ==, VariableRenamingPolicy, ., LOCAL, ,, preserveAnonymousFunctionNames, ,]
[compiler, ,, options, ., renamePrefix, ,, options, ., variableRenaming, ==, VariableRenamingPolicy, ., LOCAL, ,, preserveAnonymousFunctionNames, ,, options, ., generatePseudoNames, ,]
[compiler, ,, options, ., renamePrefix, ,, options, ., variableRenaming, ==, VariableRenamingPolicy, ., LOCAL, ,, preserveAnonymousFunctionNames, ,, options, ., generatePseudoNames, ,]
[renamePrefix, ,, options, ., variableRenaming, ==, VariableRenamingPolicy, ., LOCAL, ,, preserveAnonymousFunctionNames, ,, options, ., generatePseudoNames, ,, options, ., shadowVariables, ,]
[options, ., variableRenaming, ==, VariableRenamingPolicy, ., LOCAL, ,, preserveAnonymousFunctionNames, ,, options, ., generatePseudoNames, ,, options, ., shadowVariables, ,, prevVariableMap, ,]
[variableRenaming, ==, VariableRenamingPolicy, ., LOCAL, ,, preserveAnonymousFunctionNames, ,, options, ., generatePseudoNames, ,, options, ., shadowVariables, ,, prevVariableMap, ,, reservedChars, ,]
[., LOCAL, ,, preserveAnonymousFunctionNames, ,, options, ., generatePseudoNames, ,, options, ., shadowVariables, ,, prevVariableMap, ,, reservedChars, ,, reservedNames, ), ;]
[., LOCAL, ,, preserveAnonymousFunctionNames, ,, options, ., generatePseudoNames, ,, options, ., shadowVariables, ,, prevVariableMap, ,, reservedChars, ,, reservedNames, ), ;]
[,, options, ., generatePseudoNames, ,, options, ., shadowVariables, ,, prevVariableMap, ,, reservedChars, ,, reservedNames, ), ;, rn, ., process, (]
[., generatePseudoNames, ,, options, ., shadowVariables, ,, prevVariableMap, ,, reservedChars, ,, reservedNames, ), ;, rn, ., process, (, externs, ,]
[., shadowVariables, ,, prevVariableMap, ,, reservedChars, ,, reservedNames, ), ;, rn, ., process, (, externs, ,, root, ), ;, return]
[., shadowVariables, ,, prevVariableMap, ,, reservedChars, ,, reservedNames, ), ;, rn, ., process, (, externs, ,, root, ), ;, return]
[., process, (, externs, ,, root, ), ;, return, rn, ., getVariableMap, (, ), ;, }, final, PassFactory, renameLabels, =]
[externs, ,, root, ), ;, return, rn, ., getVariableMap, (, ), ;, }, final, PassFactory, renameLabels, =, new, PassFactory, (]
[root, ), ;, return, rn, ., getVariableMap, (, ), ;, }, final, PassFactory, renameLabels, =, new, PassFactory, (, "renameLabels", ,]
[=, new, PassFactory, (, "renameLabels", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "renameLabels", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RenameLabels, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, RenameLabels, (, compiler, ), ;, }, }, ;, final, PassFactory, convertToDottedProperties, =]
[compiler, ), {, return, new, RenameLabels, (, compiler, ), ;, }, }, ;, final, PassFactory, convertToDottedProperties, =, new, PassFactory, (]
[{, return, new, RenameLabels, (, compiler, ), ;, }, }, ;, final, PassFactory, convertToDottedProperties, =, new, PassFactory, (, "convertToDottedProperties", ,]
[=, new, PassFactory, (, "convertToDottedProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "convertToDottedProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ConvertToDottedProperties, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, ConvertToDottedProperties, (, compiler, ), ;, }, }, ;, final, PassFactory, sanityCheckAst, =]
[compiler, ), {, return, new, ConvertToDottedProperties, (, compiler, ), ;, }, }, ;, final, PassFactory, sanityCheckAst, =, new, PassFactory, (]
[{, return, new, ConvertToDottedProperties, (, compiler, ), ;, }, }, ;, final, PassFactory, sanityCheckAst, =, new, PassFactory, (, "sanityCheckAst", ,]
[=, new, PassFactory, (, "sanityCheckAst", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AstValidator, (, ), ;, }, }, ;, final, PassFactory, sanityCheckVars, =]
[AbstractCompiler, compiler, ), {, return, new, AstValidator, (, ), ;, }, }, ;, final, PassFactory, sanityCheckVars, =, new, PassFactory, (]
[), {, return, new, AstValidator, (, ), ;, }, }, ;, final, PassFactory, sanityCheckVars, =, new, PassFactory, (, "sanityCheckVars", ,]
[=, new, PassFactory, (, "sanityCheckVars", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "sanityCheckVars", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, VarCheck, (]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, VarCheck, (, compiler, ,]
[AbstractCompiler, compiler, ), {, return, new, VarCheck, (, compiler, ,, true, ), ;, }, }, ;, final, PassFactory, instrumentFunctions, =]
[{, return, new, VarCheck, (, compiler, ,, true, ), ;, }, }, ;, final, PassFactory, instrumentFunctions, =, new, PassFactory, (]
[new, VarCheck, (, compiler, ,, true, ), ;, }, }, ;, final, PassFactory, instrumentFunctions, =, new, PassFactory, (, "instrumentFunctions", ,]
[new, PassFactory, (, "instrumentFunctions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
[), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, try, {, FileReader, templateFile, =]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, try, {, FileReader, templateFile, =, new, FileReader, (]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, try, {, FileReader, templateFile, =, new, FileReader, (]
[Node, externs, ,, Node, root, ), {, try, {, FileReader, templateFile, =, new, FileReader, (, options, ., instrumentationTemplate, ), ;]
[Node, externs, ,, Node, root, ), {, try, {, FileReader, templateFile, =, new, FileReader, (, options, ., instrumentationTemplate, ), ;]
[externs, ,, Node, root, ), {, try, {, FileReader, templateFile, =, new, FileReader, (, options, ., instrumentationTemplate, ), ;, (]
[root, ), {, try, {, FileReader, templateFile, =, new, FileReader, (, options, ., instrumentationTemplate, ), ;, (, new, InstrumentFunctions, (]
[{, try, {, FileReader, templateFile, =, new, FileReader, (, options, ., instrumentationTemplate, ), ;, (, new, InstrumentFunctions, (, compiler, ,]
[{, FileReader, templateFile, =, new, FileReader, (, options, ., instrumentationTemplate, ), ;, (, new, InstrumentFunctions, (, compiler, ,, functionNames, ,]
[{, FileReader, templateFile, =, new, FileReader, (, options, ., instrumentationTemplate, ), ;, (, new, InstrumentFunctions, (, compiler, ,, functionNames, ,]
[new, FileReader, (, options, ., instrumentationTemplate, ), ;, (, new, InstrumentFunctions, (, compiler, ,, functionNames, ,, options, ., instrumentationTemplate, ,]
[new, FileReader, (, options, ., instrumentationTemplate, ), ;, (, new, InstrumentFunctions, (, compiler, ,, functionNames, ,, options, ., instrumentationTemplate, ,]
[., instrumentationTemplate, ), ;, (, new, InstrumentFunctions, (, compiler, ,, functionNames, ,, options, ., instrumentationTemplate, ,, options, ., appNameStr, ,]
[InstrumentFunctions, (, compiler, ,, functionNames, ,, options, ., instrumentationTemplate, ,, options, ., appNameStr, ,, templateFile, ), ), ., process, (]
[compiler, ,, functionNames, ,, options, ., instrumentationTemplate, ,, options, ., appNameStr, ,, templateFile, ), ), ., process, (, externs, ,]
[appNameStr, ,, templateFile, ), ), ., process, (, externs, ,, root, ), ;, }, catch, (, IOException, e, ), {]
[appNameStr, ,, templateFile, ), ), ., process, (, externs, ,, root, ), ;, }, catch, (, IOException, e, ), {]
[), ., process, (, externs, ,, root, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (]
[), ., process, (, externs, ,, root, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (]
[externs, ,, root, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (]
[externs, ,, root, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (]
[;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,]
[;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,]
[instrumentationTemplate, ), ), ;, }, }, }, ;, }, }, ;, static, PassFactory, createEmptyPass, (, String, name, ), {, return]
[;, }, }, }, ;, }, }, ;, static, PassFactory, createEmptyPass, (, String, name, ), {, return, new, PassFactory, (]
[}, }, ;, }, }, ;, static, PassFactory, createEmptyPass, (, String, name, ), {, return, new, PassFactory, (, name, ,]
[new, PassFactory, (, name, ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
[{, return, runInSerial, (, ), ;, }, }, ;, }, private, PassFactory, getCustomPasses, (, final, CustomPassExecutionTime, executionTime, ), {, return]
[(, ), ;, }, }, ;, }, private, PassFactory, getCustomPasses, (, final, CustomPassExecutionTime, executionTime, ), {, return, new, PassFactory, (]
[;, }, }, ;, }, private, PassFactory, getCustomPasses, (, final, CustomPassExecutionTime, executionTime, ), {, return, new, PassFactory, (, "runCustomPasses", ,]
[new, PassFactory, (, "runCustomPasses", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
[(, "runCustomPasses", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, runInSerial, (]
[(, "runCustomPasses", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, runInSerial, (]
[(, "runCustomPasses", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, runInSerial, (]
[@, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, runInSerial, (, options, ., customPasses, ., get, (]
[., customPasses, ., get, (, executionTime, ), ), ;, }, }, ;, }, private, boolean, isInliningForbidden, (, ), {, return]
[., customPasses, ., get, (, executionTime, ), ), ;, }, }, ;, }, private, boolean, isInliningForbidden, (, ), {, return]
[., customPasses, ., get, (, executionTime, ), ), ;, }, }, ;, }, private, boolean, isInliningForbidden, (, ), {, return]
[., customPasses, ., get, (, executionTime, ), ), ;, }, }, ;, }, private, boolean, isInliningForbidden, (, ), {, return]
[(, executionTime, ), ), ;, }, }, ;, }, private, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==]
[(, executionTime, ), ), ;, }, }, ;, }, private, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==]
[;, }, }, ;, }, private, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC, ||]
[;, }, }, ;, }, private, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC, ||]
[;, }, }, ;, }, private, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC, ||]
[}, private, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC, ||, options, ., propertyRenaming, ==]
[}, private, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC, ||, options, ., propertyRenaming, ==]
[., propertyRenaming, ==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ;, }, private, static, CompilerPass, runInSerial, (, final, CompilerPass, ..., passes, ), {, return]
[==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ;, }, private, static, CompilerPass, runInSerial, (, final, CompilerPass, ..., passes, ), {, return, runInSerial, (]
[==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ;, }, private, static, CompilerPass, runInSerial, (, final, CompilerPass, ..., passes, ), {, return, runInSerial, (]
[;, }, private, static, CompilerPass, runInSerial, (, final, CompilerPass, ..., passes, ), {, return, runInSerial, (, Lists, ., newArrayList, (]
[(, passes, ), ), ;, }, private, static, CompilerPass, runInSerial, (, final, Collection, <, CompilerPass, >, passes, ), {, return]
[), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, for, (, CompilerPass, pass, :]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, for, (, CompilerPass, pass, :, passes, ), {]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, for, (, CompilerPass, pass, :, passes, ), {]
[(, Node, externs, ,, Node, root, ), {, for, (, CompilerPass, pass, :, passes, ), {, pass, ., process, (]
[externs, ,, Node, root, ), {, for, (, CompilerPass, pass, :, passes, ), {, pass, ., process, (, externs, ,]
[Map, <, String, ,, Node, >, getAdditionalReplacements, (, CompilerOptions, options, ), {, Map, <, String, ,, Node, >, additionalReplacements, =]
[Map, <, String, ,, Node, >, getAdditionalReplacements, (, CompilerOptions, options, ), {, Map, <, String, ,, Node, >, additionalReplacements, =]
[CompilerOptions, options, ), {, Map, <, String, ,, Node, >, additionalReplacements, =, Maps, ., newHashMap, (, ), ;, if, (]
[CompilerOptions, options, ), {, Map, <, String, ,, Node, >, additionalReplacements, =, Maps, ., newHashMap, (, ), ;, if, (]
[CompilerOptions, options, ), {, Map, <, String, ,, Node, >, additionalReplacements, =, Maps, ., newHashMap, (, ), ;, if, (]
[Map, <, String, ,, Node, >, additionalReplacements, =, Maps, ., newHashMap, (, ), ;, if, (, options, ., markAsCompiled, ||]
[Map, <, String, ,, Node, >, additionalReplacements, =, Maps, ., newHashMap, (, ), ;, if, (, options, ., markAsCompiled, ||]
[>, additionalReplacements, =, Maps, ., newHashMap, (, ), ;, if, (, options, ., markAsCompiled, ||, options, ., closurePass, ), {]
[>, additionalReplacements, =, Maps, ., newHashMap, (, ), ;, if, (, options, ., markAsCompiled, ||, options, ., closurePass, ), {]
[., newHashMap, (, ), ;, if, (, options, ., markAsCompiled, ||, options, ., closurePass, ), {, additionalReplacements, ., put, (]
[(, ), ;, if, (, options, ., markAsCompiled, ||, options, ., closurePass, ), {, additionalReplacements, ., put, (, COMPILED_CONSTANT_NAME, ,]
[(, ), ;, if, (, options, ., markAsCompiled, ||, options, ., closurePass, ), {, additionalReplacements, ., put, (, COMPILED_CONSTANT_NAME, ,]
[., closurePass, ), {, additionalReplacements, ., put, (, COMPILED_CONSTANT_NAME, ,, IR, ., trueNode, (, ), ), ;, }, if, (]
[., closurePass, ), {, additionalReplacements, ., put, (, COMPILED_CONSTANT_NAME, ,, IR, ., trueNode, (, ), ), ;, }, if, (]
[., closurePass, ), {, additionalReplacements, ., put, (, COMPILED_CONSTANT_NAME, ,, IR, ., trueNode, (, ), ), ;, }, if, (]
[additionalReplacements, ., put, (, COMPILED_CONSTANT_NAME, ,, IR, ., trueNode, (, ), ), ;, }, if, (, options, ., closurePass, &&]
[additionalReplacements, ., put, (, COMPILED_CONSTANT_NAME, ,, IR, ., trueNode, (, ), ), ;, }, if, (, options, ., closurePass, &&]
[additionalReplacements, ., put, (, COMPILED_CONSTANT_NAME, ,, IR, ., trueNode, (, ), ), ;, }, if, (, options, ., closurePass, &&]
[COMPILED_CONSTANT_NAME, ,, IR, ., trueNode, (, ), ), ;, }, if, (, options, ., closurePass, &&, options, ., locale, !=]
[., trueNode, (, ), ), ;, }, if, (, options, ., closurePass, &&, options, ., locale, !=, null, ), {]
[., trueNode, (, ), ), ;, }, if, (, options, ., closurePass, &&, options, ., locale, !=, null, ), {]
[), ;, }, if, (, options, ., closurePass, &&, options, ., locale, !=, null, ), {, additionalReplacements, ., put, (]
[}, if, (, options, ., closurePass, &&, options, ., locale, !=, null, ), {, additionalReplacements, ., put, (, CLOSURE_LOCALE_CONSTANT_NAME, ,]
[}, if, (, options, ., closurePass, &&, options, ., locale, !=, null, ), {, additionalReplacements, ., put, (, CLOSURE_LOCALE_CONSTANT_NAME, ,]
[., closurePass, &&, options, ., locale, !=, null, ), {, additionalReplacements, ., put, (, CLOSURE_LOCALE_CONSTANT_NAME, ,, IR, ., string, (]
[., closurePass, &&, options, ., locale, !=, null, ), {, additionalReplacements, ., put, (, CLOSURE_LOCALE_CONSTANT_NAME, ,, IR, ., string, (]
[), {, additionalReplacements, ., put, (, CLOSURE_LOCALE_CONSTANT_NAME, ,, IR, ., string, (, options, ., locale, ), ), ;, }, return]
[,, IR, ., string, (, options, ., locale, ), ), ;, }, return, additionalReplacements, ;, }, final, PassFactory, printNameReferenceGraph, =]
[string, (, options, ., locale, ), ), ;, }, return, additionalReplacements, ;, }, final, PassFactory, printNameReferenceGraph, =, new, PassFactory, (]
[options, ., locale, ), ), ;, }, return, additionalReplacements, ;, }, final, PassFactory, printNameReferenceGraph, =, new, PassFactory, (, "printNameReferenceGraph", ,]
[new, PassFactory, (, "printNameReferenceGraph", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
[CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, NameReferenceGraphConstruction, gc, =]
[{, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, NameReferenceGraphConstruction, gc, =, new, NameReferenceGraphConstruction, (]
[public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, NameReferenceGraphConstruction, gc, =, new, NameReferenceGraphConstruction, (, compiler, ), ;]
[public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, NameReferenceGraphConstruction, gc, =, new, NameReferenceGraphConstruction, (, compiler, ), ;]
[Node, externs, ,, Node, jsRoot, ), {, NameReferenceGraphConstruction, gc, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, gc, ., process, (]
[,, Node, jsRoot, ), {, NameReferenceGraphConstruction, gc, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, gc, ., process, (, externs, ,]
[gc, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, gc, ., process, (, externs, ,, jsRoot, ), ;, String, graphFileName, =]
[gc, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, gc, ., process, (, externs, ,, jsRoot, ), ;, String, graphFileName, =]
[), ;, gc, ., process, (, externs, ,, jsRoot, ), ;, String, graphFileName, =, options, ., nameReferenceGraphPath, ;, try, {]
[), ;, gc, ., process, (, externs, ,, jsRoot, ), ;, String, graphFileName, =, options, ., nameReferenceGraphPath, ;, try, {]
[process, (, externs, ,, jsRoot, ), ;, String, graphFileName, =, options, ., nameReferenceGraphPath, ;, try, {, Files, ., write, (]
[process, (, externs, ,, jsRoot, ), ;, String, graphFileName, =, options, ., nameReferenceGraphPath, ;, try, {, Files, ., write, (]
[jsRoot, ), ;, String, graphFileName, =, options, ., nameReferenceGraphPath, ;, try, {, Files, ., write, (, DotFormatter, ., toDot, (]
[jsRoot, ), ;, String, graphFileName, =, options, ., nameReferenceGraphPath, ;, try, {, Files, ., write, (, DotFormatter, ., toDot, (]
[., nameReferenceGraphPath, ;, try, {, Files, ., write, (, DotFormatter, ., toDot, (, gc, ., getNameReferenceGraph, (, ), ), ,]
[try, {, Files, ., write, (, DotFormatter, ., toDot, (, gc, ., getNameReferenceGraph, (, ), ), ,, new, File, (]
[., write, (, DotFormatter, ., toDot, (, gc, ., getNameReferenceGraph, (, ), ), ,, new, File, (, graphFileName, ), ,]
[., write, (, DotFormatter, ., toDot, (, gc, ., getNameReferenceGraph, (, ), ), ,, new, File, (, graphFileName, ), ,]
[), ,, new, File, (, graphFileName, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {]
[), ,, new, File, (, graphFileName, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {]
[(, graphFileName, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (]
[(, graphFileName, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (]
[Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (]
[UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, NAME_REF_GRAPH_FILE_ERROR, ,]
[UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, NAME_REF_GRAPH_FILE_ERROR, ,]
[IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, NAME_REF_GRAPH_FILE_ERROR, ,, e, ., getMessage, (, ), ,]
[., getMessage, (, ), ,, graphFileName, ), ), ;, }, }, }, ;, }, }, ;, final, PassFactory, printNameReferenceReport, =]
[), ,, graphFileName, ), ), ;, }, }, }, ;, }, }, ;, final, PassFactory, printNameReferenceReport, =, new, PassFactory, (]
[graphFileName, ), ), ;, }, }, }, ;, }, }, ;, final, PassFactory, printNameReferenceReport, =, new, PassFactory, (, "printNameReferenceReport", ,]
[new, PassFactory, (, "printNameReferenceReport", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return]
[CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, NameReferenceGraphConstruction, gc, =]
[{, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, NameReferenceGraphConstruction, gc, =, new, NameReferenceGraphConstruction, (]
[(, Node, externs, ,, Node, jsRoot, ), {, NameReferenceGraphConstruction, gc, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, String, reportFileName, =]
[(, Node, externs, ,, Node, jsRoot, ), {, NameReferenceGraphConstruction, gc, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, String, reportFileName, =]
[gc, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, String, reportFileName, =, options, ., nameReferenceReportPath, ;, try, {, NameReferenceGraphReport, report, =]
[NameReferenceGraphConstruction, (, compiler, ), ;, String, reportFileName, =, options, ., nameReferenceReportPath, ;, try, {, NameReferenceGraphReport, report, =, new, NameReferenceGraphReport, (]
[NameReferenceGraphConstruction, (, compiler, ), ;, String, reportFileName, =, options, ., nameReferenceReportPath, ;, try, {, NameReferenceGraphReport, report, =, new, NameReferenceGraphReport, (]
[=, options, ., nameReferenceReportPath, ;, try, {, NameReferenceGraphReport, report, =, new, NameReferenceGraphReport, (, gc, ., getNameReferenceGraph, (, ), ), ;]
[=, options, ., nameReferenceReportPath, ;, try, {, NameReferenceGraphReport, report, =, new, NameReferenceGraphReport, (, gc, ., getNameReferenceGraph, (, ), ), ;]
[;, try, {, NameReferenceGraphReport, report, =, new, NameReferenceGraphReport, (, gc, ., getNameReferenceGraph, (, ), ), ;, Files, ., write, (]
[;, try, {, NameReferenceGraphReport, report, =, new, NameReferenceGraphReport, (, gc, ., getNameReferenceGraph, (, ), ), ;, Files, ., write, (]
[new, NameReferenceGraphReport, (, gc, ., getNameReferenceGraph, (, ), ), ;, Files, ., write, (, report, ., getHtmlReport, (, ), ,]
[gc, ., getNameReferenceGraph, (, ), ), ;, Files, ., write, (, report, ., getHtmlReport, (, ), ,, new, File, (]
[(, ), ), ;, Files, ., write, (, report, ., getHtmlReport, (, ), ,, new, File, (, reportFileName, ), ,]
[(, ), ), ;, Files, ., write, (, report, ., getHtmlReport, (, ), ,, new, File, (, reportFileName, ), ,]
[), ,, new, File, (, reportFileName, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {]
[), ,, new, File, (, reportFileName, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {]
[(, reportFileName, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (]
[(, reportFileName, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (]
[Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (]
[UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, NAME_REF_REPORT_FILE_ERROR, ,]
[UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, NAME_REF_REPORT_FILE_ERROR, ,]
[IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, NAME_REF_REPORT_FILE_ERROR, ,, e, ., getMessage, (, ), ,]
[}, ;, abstract, static, class, HotSwapPassFactory, extends, PassFactory, {, HotSwapPassFactory, (, String, name, ,, boolean, isOneTimePass, ), {, super, (]
[abstract, static, class, HotSwapPassFactory, extends, PassFactory, {, HotSwapPassFactory, (, String, name, ,, boolean, isOneTimePass, ), {, super, (, name, ,]
[Override, protected, abstract, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), ;, @, Override, HotSwapCompilerPass, getHotSwapPass, (, AbstractCompiler, compiler, ), {, return]
[Override, protected, abstract, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), ;, @, Override, HotSwapCompilerPass, getHotSwapPass, (, AbstractCompiler, compiler, ), {, return]
[create, (, AbstractCompiler, compiler, ), ;, @, Override, HotSwapCompilerPass, getHotSwapPass, (, AbstractCompiler, compiler, ), {, return, this, ., create, (]
