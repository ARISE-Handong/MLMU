[apache, ., commons, ., math3, ., util, ., Precision, ;, public, class, MatrixUtils, {, public, static, final, RealMatrixFormat, DEFAULT_FORMAT, =]
[apache, ., commons, ., math3, ., util, ., Precision, ;, public, class, MatrixUtils, {, public, static, final, RealMatrixFormat, DEFAULT_FORMAT, =]
[MatrixUtils, {, public, static, final, RealMatrixFormat, DEFAULT_FORMAT, =, RealMatrixFormat, ., getInstance, (, ), ;, public, static, final, RealMatrixFormat, OCTAVE_FORMAT, =]
[static, final, RealMatrixFormat, DEFAULT_FORMAT, =, RealMatrixFormat, ., getInstance, (, ), ;, public, static, final, RealMatrixFormat, OCTAVE_FORMAT, =, new, RealMatrixFormat, (]
[RealMatrixFormat, DEFAULT_FORMAT, =, RealMatrixFormat, ., getInstance, (, ), ;, public, static, final, RealMatrixFormat, OCTAVE_FORMAT, =, new, RealMatrixFormat, (, "[", ,]
[=, RealMatrixFormat, ., getInstance, (, ), ;, public, static, final, RealMatrixFormat, OCTAVE_FORMAT, =, new, RealMatrixFormat, (, "[", ,, "]", ,]
[., getInstance, (, ), ;, public, static, final, RealMatrixFormat, OCTAVE_FORMAT, =, new, RealMatrixFormat, (, "[", ,, "]", ,, "", ,]
[(, ), ;, public, static, final, RealMatrixFormat, OCTAVE_FORMAT, =, new, RealMatrixFormat, (, "[", ,, "]", ,, "", ,, "", ,]
[;, public, static, final, RealMatrixFormat, OCTAVE_FORMAT, =, new, RealMatrixFormat, (, "[", ,, "]", ,, "", ,, "", ,, "; ", ,]
[super, (, ), ;, }, public, static, RealMatrix, createRealMatrix, (, final, int, rows, ,, final, int, columns, ), {, return]
[super, (, ), ;, }, public, static, RealMatrix, createRealMatrix, (, final, int, rows, ,, final, int, columns, ), {, return]
[(, ), ;, }, public, static, RealMatrix, createRealMatrix, (, final, int, rows, ,, final, int, columns, ), {, return, (]
[(, ), ;, }, public, static, RealMatrix, createRealMatrix, (, final, int, rows, ,, final, int, columns, ), {, return, (]
[(, ), ;, }, public, static, RealMatrix, createRealMatrix, (, final, int, rows, ,, final, int, columns, ), {, return, (]
[;, }, public, static, RealMatrix, createRealMatrix, (, final, int, rows, ,, final, int, columns, ), {, return, (, rows, *]
[public, static, RealMatrix, createRealMatrix, (, final, int, rows, ,, final, int, columns, ), {, return, (, rows, *, columns, <=]
[createRealMatrix, (, final, int, rows, ,, final, int, columns, ), {, return, (, rows, *, columns, <=, 4096, ), ?]
[int, rows, ,, final, int, columns, ), {, return, (, rows, *, columns, <=, 4096, ), ?, new, Array2DRowRealMatrix, (]
[,, final, int, columns, ), {, return, (, rows, *, columns, <=, 4096, ), ?, new, Array2DRowRealMatrix, (, rows, ,]
[columns, ), {, return, (, rows, *, columns, <=, 4096, ), ?, new, Array2DRowRealMatrix, (, rows, ,, columns, ), :]
[return, (, rows, *, columns, <=, 4096, ), ?, new, Array2DRowRealMatrix, (, rows, ,, columns, ), :, new, BlockRealMatrix, (]
[rows, *, columns, <=, 4096, ), ?, new, Array2DRowRealMatrix, (, rows, ,, columns, ), :, new, BlockRealMatrix, (, rows, ,]
[>, createFieldMatrix, (, final, Field, <, T, >, field, ,, final, int, rows, ,, final, int, columns, ), {, return]
[>, createFieldMatrix, (, final, Field, <, T, >, field, ,, final, int, rows, ,, final, int, columns, ), {, return]
[createFieldMatrix, (, final, Field, <, T, >, field, ,, final, int, rows, ,, final, int, columns, ), {, return, (]
[createFieldMatrix, (, final, Field, <, T, >, field, ,, final, int, rows, ,, final, int, columns, ), {, return, (]
[createFieldMatrix, (, final, Field, <, T, >, field, ,, final, int, rows, ,, final, int, columns, ), {, return, (]
[final, Field, <, T, >, field, ,, final, int, rows, ,, final, int, columns, ), {, return, (, rows, *]
[<, T, >, field, ,, final, int, rows, ,, final, int, columns, ), {, return, (, rows, *, columns, <=]
[field, ,, final, int, rows, ,, final, int, columns, ), {, return, (, rows, *, columns, <=, 4096, ), ?]
[final, int, columns, ), {, return, (, rows, *, columns, <=, 4096, ), ?, new, Array2DRowFieldMatrix, <, T, >, (]
[columns, ), {, return, (, rows, *, columns, <=, 4096, ), ?, new, Array2DRowFieldMatrix, <, T, >, (, field, ,]
[{, return, (, rows, *, columns, <=, 4096, ), ?, new, Array2DRowFieldMatrix, <, T, >, (, field, ,, rows, ,]
[rows, *, columns, <=, 4096, ), ?, new, Array2DRowFieldMatrix, <, T, >, (, field, ,, rows, ,, columns, ), :]
[?, new, Array2DRowFieldMatrix, <, T, >, (, field, ,, rows, ,, columns, ), :, new, BlockFieldMatrix, <, T, >, (]
[Array2DRowFieldMatrix, <, T, >, (, field, ,, rows, ,, columns, ), :, new, BlockFieldMatrix, <, T, >, (, field, ,]
[T, >, (, field, ,, rows, ,, columns, ), :, new, BlockFieldMatrix, <, T, >, (, field, ,, rows, ,]
[static, RealMatrix, createRealMatrix, (, double, [, ], [, ], data, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NoDataException, {, if, (]
[static, RealMatrix, createRealMatrix, (, double, [, ], [, ], data, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NoDataException, {, if, (]
[static, RealMatrix, createRealMatrix, (, double, [, ], [, ], data, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NoDataException, {, if, (]
[createRealMatrix, (, double, [, ], [, ], data, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NoDataException, {, if, (, data, ==]
[double, [, ], [, ], data, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NoDataException, {, if, (, data, ==, null, ||]
[double, [, ], [, ], data, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NoDataException, {, if, (, data, ==, null, ||]
[double, [, ], [, ], data, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NoDataException, {, if, (, data, ==, null, ||]
[], [, ], data, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NoDataException, {, if, (, data, ==, null, ||, data, []
[data, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NoDataException, {, if, (, data, ==, null, ||, data, [, 0, ], ==]
[,, DimensionMismatchException, ,, NoDataException, {, if, (, data, ==, null, ||, data, [, 0, ], ==, null, ), {, throw]
[data, ==, null, ||, data, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return]
[data, ==, null, ||, data, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return]
[==, null, ||, data, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (]
[==, null, ||, data, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (]
[==, null, ||, data, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (]
[==, null, ||, data, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (]
[[, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *]
[[, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *]
[[, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *]
[], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *, data, []
[throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *, data, [, 0, ], ., length, <=]
[(, ), ;, }, return, (, data, ., length, *, data, [, 0, ], ., length, <=, 4096, ), ?]
[}, return, (, data, ., length, *, data, [, 0, ], ., length, <=, 4096, ), ?, new, Array2DRowRealMatrix, (]
[data, ., length, *, data, [, 0, ], ., length, <=, 4096, ), ?, new, Array2DRowRealMatrix, (, data, ), :]
[*, data, [, 0, ], ., length, <=, 4096, ), ?, new, Array2DRowRealMatrix, (, data, ), :, new, BlockRealMatrix, (]
[T, >, createFieldMatrix, (, T, [, ], [, ], data, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, if, (]
[T, >, createFieldMatrix, (, T, [, ], [, ], data, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, if, (]
[T, >, createFieldMatrix, (, T, [, ], [, ], data, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, if, (]
[createFieldMatrix, (, T, [, ], [, ], data, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, if, (, data, ==]
[T, [, ], [, ], data, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, if, (, data, ==, null, ||]
[T, [, ], [, ], data, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, if, (, data, ==, null, ||]
[T, [, ], [, ], data, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, if, (, data, ==, null, ||]
[], [, ], data, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, if, (, data, ==, null, ||, data, []
[data, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, if, (, data, ==, null, ||, data, [, 0, ], ==]
[,, NoDataException, ,, NullArgumentException, {, if, (, data, ==, null, ||, data, [, 0, ], ==, null, ), {, throw]
[data, ==, null, ||, data, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return]
[data, ==, null, ||, data, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return]
[==, null, ||, data, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (]
[==, null, ||, data, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (]
[==, null, ||, data, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (]
[==, null, ||, data, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (]
[[, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *]
[[, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *]
[[, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *]
[], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *, data, []
[throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *, data, [, 0, ], ., length, <=]
[(, ), ;, }, return, (, data, ., length, *, data, [, 0, ], ., length, <=, 4096, ), ?]
[data, ., length, *, data, [, 0, ], ., length, <=, 4096, ), ?, new, Array2DRowFieldMatrix, <, T, >, (]
[*, data, [, 0, ], ., length, <=, 4096, ), ?, new, Array2DRowFieldMatrix, <, T, >, (, data, ), :]
[length, <=, 4096, ), ?, new, Array2DRowFieldMatrix, <, T, >, (, data, ), :, new, BlockFieldMatrix, <, T, >, (]
[T, >, (, data, ), ;, }, public, static, RealMatrix, createRealIdentityMatrix, (, int, dimension, ), {, final, RealMatrix, m, =]
[(, data, ), ;, }, public, static, RealMatrix, createRealIdentityMatrix, (, int, dimension, ), {, final, RealMatrix, m, =, createRealMatrix, (]
[), ;, }, public, static, RealMatrix, createRealIdentityMatrix, (, int, dimension, ), {, final, RealMatrix, m, =, createRealMatrix, (, dimension, ,]
[int, dimension, ), {, final, RealMatrix, m, =, createRealMatrix, (, dimension, ,, dimension, ), ;, for, (, int, i, =]
[), {, final, RealMatrix, m, =, createRealMatrix, (, dimension, ,, dimension, ), ;, for, (, int, i, =, 0, ;]
[), {, final, RealMatrix, m, =, createRealMatrix, (, dimension, ,, dimension, ), ;, for, (, int, i, =, 0, ;]
[final, RealMatrix, m, =, createRealMatrix, (, dimension, ,, dimension, ), ;, for, (, int, i, =, 0, ;, i, <]
[m, =, createRealMatrix, (, dimension, ,, dimension, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[=, createRealMatrix, (, dimension, ,, dimension, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++]
[dimension, ,, dimension, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++, i, ), {]
[dimension, ,, dimension, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++, i, ), {, m, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, dimension, ;, ++, i, ), {, m, ., setEntry, (, i, ,]
[i, =, 0, ;, i, <, dimension, ;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,]
[<, dimension, ;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,, 1.0, ), ;, }, return]
[T, >, createFieldIdentityMatrix, (, final, Field, <, T, >, field, ,, final, int, dimension, ), {, final, T, zero, =]
[T, >, createFieldIdentityMatrix, (, final, Field, <, T, >, field, ,, final, int, dimension, ), {, final, T, zero, =]
[,, final, int, dimension, ), {, final, T, zero, =, field, ., getZero, (, ), ;, final, T, one, =]
[,, final, int, dimension, ), {, final, T, zero, =, field, ., getZero, (, ), ;, final, T, one, =]
[), ;, final, T, one, =, field, ., getOne, (, ), ;, final, T, [, ], [, ], d, =]
[), ;, final, T, one, =, field, ., getOne, (, ), ;, final, T, [, ], [, ], d, =]
[one, =, field, ., getOne, (, ), ;, final, T, [, ], [, ], d, =, MathArrays, ., buildArray, (]
[field, ., getOne, (, ), ;, final, T, [, ], [, ], d, =, MathArrays, ., buildArray, (, field, ,]
[getOne, (, ), ;, final, T, [, ], [, ], d, =, MathArrays, ., buildArray, (, field, ,, dimension, ,]
[[, ], d, =, MathArrays, ., buildArray, (, field, ,, dimension, ,, dimension, ), ;, for, (, int, row, =]
[d, =, MathArrays, ., buildArray, (, field, ,, dimension, ,, dimension, ), ;, for, (, int, row, =, 0, ;]
[d, =, MathArrays, ., buildArray, (, field, ,, dimension, ,, dimension, ), ;, for, (, int, row, =, 0, ;]
[MathArrays, ., buildArray, (, field, ,, dimension, ,, dimension, ), ;, for, (, int, row, =, 0, ;, row, <]
[buildArray, (, field, ,, dimension, ,, dimension, ), ;, for, (, int, row, =, 0, ;, row, <, dimension, ;]
[buildArray, (, field, ,, dimension, ,, dimension, ), ;, for, (, int, row, =, 0, ;, row, <, dimension, ;]
[(, int, row, =, 0, ;, row, <, dimension, ;, row, ++, ), {, final, T, [, ], dRow, =]
[(, int, row, =, 0, ;, row, <, dimension, ;, row, ++, ), {, final, T, [, ], dRow, =]
[row, =, 0, ;, row, <, dimension, ;, row, ++, ), {, final, T, [, ], dRow, =, d, []
[;, row, <, dimension, ;, row, ++, ), {, final, T, [, ], dRow, =, d, [, row, ], ;]
[;, row, <, dimension, ;, row, ++, ), {, final, T, [, ], dRow, =, d, [, row, ], ;]
[;, row, ++, ), {, final, T, [, ], dRow, =, d, [, row, ], ;, Arrays, ., fill, (]
[++, ), {, final, T, [, ], dRow, =, d, [, row, ], ;, Arrays, ., fill, (, dRow, ,]
[final, T, [, ], dRow, =, d, [, row, ], ;, Arrays, ., fill, (, dRow, ,, zero, ), ;]
[final, T, [, ], dRow, =, d, [, row, ], ;, Arrays, ., fill, (, dRow, ,, zero, ), ;]
[[, ], dRow, =, d, [, row, ], ;, Arrays, ., fill, (, dRow, ,, zero, ), ;, dRow, []
[=, d, [, row, ], ;, Arrays, ., fill, (, dRow, ,, zero, ), ;, dRow, [, row, ], =]
[], ;, Arrays, ., fill, (, dRow, ,, zero, ), ;, dRow, [, row, ], =, one, ;, }, return]
[dRow, ,, zero, ), ;, dRow, [, row, ], =, one, ;, }, return, new, Array2DRowFieldMatrix, <, T, >, (]
[zero, ), ;, dRow, [, row, ], =, one, ;, }, return, new, Array2DRowFieldMatrix, <, T, >, (, field, ,]
[;, dRow, [, row, ], =, one, ;, }, return, new, Array2DRowFieldMatrix, <, T, >, (, field, ,, d, ,]
[false, ), ;, }, public, static, RealMatrix, createRealDiagonalMatrix, (, final, double, [, ], diagonal, ), {, final, RealMatrix, m, =]
[;, }, public, static, RealMatrix, createRealDiagonalMatrix, (, final, double, [, ], diagonal, ), {, final, RealMatrix, m, =, createRealMatrix, (]
[;, }, public, static, RealMatrix, createRealDiagonalMatrix, (, final, double, [, ], diagonal, ), {, final, RealMatrix, m, =, createRealMatrix, (]
[RealMatrix, createRealDiagonalMatrix, (, final, double, [, ], diagonal, ), {, final, RealMatrix, m, =, createRealMatrix, (, diagonal, ., length, ,]
[RealMatrix, createRealDiagonalMatrix, (, final, double, [, ], diagonal, ), {, final, RealMatrix, m, =, createRealMatrix, (, diagonal, ., length, ,]
[final, RealMatrix, m, =, createRealMatrix, (, diagonal, ., length, ,, diagonal, ., length, ), ;, for, (, int, i, =]
[m, =, createRealMatrix, (, diagonal, ., length, ,, diagonal, ., length, ), ;, for, (, int, i, =, 0, ;]
[m, =, createRealMatrix, (, diagonal, ., length, ,, diagonal, ., length, ), ;, for, (, int, i, =, 0, ;]
[createRealMatrix, (, diagonal, ., length, ,, diagonal, ., length, ), ;, for, (, int, i, =, 0, ;, i, <]
[createRealMatrix, (, diagonal, ., length, ,, diagonal, ., length, ), ;, for, (, int, i, =, 0, ;, i, <]
[length, ,, diagonal, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, diagonal, ., length, ;]
[,, diagonal, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, diagonal, ., length, ;, ++]
[length, ), ;, for, (, int, i, =, 0, ;, i, <, diagonal, ., length, ;, ++, i, ), {]
[length, ), ;, for, (, int, i, =, 0, ;, i, <, diagonal, ., length, ;, ++, i, ), {]
[(, int, i, =, 0, ;, i, <, diagonal, ., length, ;, ++, i, ), {, m, ., setEntry, (]
[i, =, 0, ;, i, <, diagonal, ., length, ;, ++, i, ), {, m, ., setEntry, (, i, ,]
[0, ;, i, <, diagonal, ., length, ;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,]
[0, ;, i, <, diagonal, ., length, ;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,]
[i, <, diagonal, ., length, ;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,, diagonal, []
[++, i, ), {, m, ., setEntry, (, i, ,, i, ,, diagonal, [, i, ], ), ;, }, return]
[FieldMatrix, <, T, >, createFieldDiagonalMatrix, (, final, T, [, ], diagonal, ), {, final, FieldMatrix, <, T, >, m, =]
[T, >, createFieldDiagonalMatrix, (, final, T, [, ], diagonal, ), {, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (]
[T, >, createFieldDiagonalMatrix, (, final, T, [, ], diagonal, ), {, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (]
[T, >, createFieldDiagonalMatrix, (, final, T, [, ], diagonal, ), {, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (]
[createFieldDiagonalMatrix, (, final, T, [, ], diagonal, ), {, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (, diagonal, []
[), {, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (, diagonal, [, 0, ], ., getField, (, ), ,]
[), {, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (, diagonal, [, 0, ], ., getField, (, ), ,]
[<, T, >, m, =, createFieldMatrix, (, diagonal, [, 0, ], ., getField, (, ), ,, diagonal, ., length, ,]
[<, T, >, m, =, createFieldMatrix, (, diagonal, [, 0, ], ., getField, (, ), ,, diagonal, ., length, ,]
[], ., getField, (, ), ,, diagonal, ., length, ,, diagonal, ., length, ), ;, for, (, int, i, =]
[getField, (, ), ,, diagonal, ., length, ,, diagonal, ., length, ), ;, for, (, int, i, =, 0, ;]
[getField, (, ), ,, diagonal, ., length, ,, diagonal, ., length, ), ;, for, (, int, i, =, 0, ;]
[), ,, diagonal, ., length, ,, diagonal, ., length, ), ;, for, (, int, i, =, 0, ;, i, <]
[), ,, diagonal, ., length, ,, diagonal, ., length, ), ;, for, (, int, i, =, 0, ;, i, <]
[length, ,, diagonal, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, diagonal, ., length, ;]
[,, diagonal, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, diagonal, ., length, ;, ++]
[length, ), ;, for, (, int, i, =, 0, ;, i, <, diagonal, ., length, ;, ++, i, ), {]
[length, ), ;, for, (, int, i, =, 0, ;, i, <, diagonal, ., length, ;, ++, i, ), {]
[(, int, i, =, 0, ;, i, <, diagonal, ., length, ;, ++, i, ), {, m, ., setEntry, (]
[i, =, 0, ;, i, <, diagonal, ., length, ;, ++, i, ), {, m, ., setEntry, (, i, ,]
[0, ;, i, <, diagonal, ., length, ;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,]
[0, ;, i, <, diagonal, ., length, ;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,]
[i, <, diagonal, ., length, ;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,, diagonal, []
[++, i, ), {, m, ., setEntry, (, i, ,, i, ,, diagonal, [, i, ], ), ;, }, return]
[m, ;, }, public, static, RealVector, createRealVector, (, double, [, ], data, ), throws, NoDataException, ,, NullArgumentException, {, if, (]
[m, ;, }, public, static, RealVector, createRealVector, (, double, [, ], data, ), throws, NoDataException, ,, NullArgumentException, {, if, (]
[}, public, static, RealVector, createRealVector, (, double, [, ], data, ), throws, NoDataException, ,, NullArgumentException, {, if, (, data, ==]
[createRealVector, (, double, [, ], data, ), throws, NoDataException, ,, NullArgumentException, {, if, (, data, ==, null, ), {, throw]
[throws, NoDataException, ,, NullArgumentException, {, if, (, data, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return]
[NullArgumentException, {, if, (, data, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, new, ArrayRealVector, (]
[if, (, data, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, new, ArrayRealVector, (, data, ,]
[<, T, >, createFieldVector, (, final, T, [, ], data, ), throws, NoDataException, ,, NullArgumentException, ,, ZeroException, {, if, (]
[<, T, >, createFieldVector, (, final, T, [, ], data, ), throws, NoDataException, ,, NullArgumentException, ,, ZeroException, {, if, (]
[>, createFieldVector, (, final, T, [, ], data, ), throws, NoDataException, ,, NullArgumentException, ,, ZeroException, {, if, (, data, ==]
[T, [, ], data, ), throws, NoDataException, ,, NullArgumentException, ,, ZeroException, {, if, (, data, ==, null, ), {, throw]
[NullArgumentException, ,, ZeroException, {, if, (, data, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[NullArgumentException, ,, ZeroException, {, if, (, data, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[NullArgumentException, ,, ZeroException, {, if, (, data, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[if, (, data, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, data, ., length, ==]
[null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, data, ., length, ==, 0, ), {, throw]
[throw, new, NullArgumentException, (, ), ;, }, if, (, data, ., length, ==, 0, ), {, throw, new, ZeroException, (]
[throw, new, NullArgumentException, (, ), ;, }, if, (, data, ., length, ==, 0, ), {, throw, new, ZeroException, (]
[if, (, data, ., length, ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, return]
[0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, return, new, ArrayFieldVector, <, T, >, (]
[0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, return, new, ArrayFieldVector, <, T, >, (]
[0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, return, new, ArrayFieldVector, <, T, >, (]
[{, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, return, new, ArrayFieldVector, <, T, >, (, data, []
[VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, return, new, ArrayFieldVector, <, T, >, (, data, [, 0, ], ., getField, (, ), ,]
[;, }, return, new, ArrayFieldVector, <, T, >, (, data, [, 0, ], ., getField, (, ), ,, data, ,]
[), ;, }, public, static, RealMatrix, createRowRealMatrix, (, double, [, ], rowData, ), throws, NoDataException, ,, NullArgumentException, {, if, (]
[), ;, }, public, static, RealMatrix, createRowRealMatrix, (, double, [, ], rowData, ), throws, NoDataException, ,, NullArgumentException, {, if, (]
[}, public, static, RealMatrix, createRowRealMatrix, (, double, [, ], rowData, ), throws, NoDataException, ,, NullArgumentException, {, if, (, rowData, ==]
[createRowRealMatrix, (, double, [, ], rowData, ), throws, NoDataException, ,, NullArgumentException, {, if, (, rowData, ==, null, ), {, throw]
[NullArgumentException, {, if, (, rowData, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nCols, =]
[NullArgumentException, {, if, (, rowData, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nCols, =]
[{, throw, new, NullArgumentException, (, ), ;, }, final, int, nCols, =, rowData, ., length, ;, final, RealMatrix, m, =]
[new, NullArgumentException, (, ), ;, }, final, int, nCols, =, rowData, ., length, ;, final, RealMatrix, m, =, createRealMatrix, (]
[(, ), ;, }, final, int, nCols, =, rowData, ., length, ;, final, RealMatrix, m, =, createRealMatrix, (, 1, ,]
[rowData, ., length, ;, final, RealMatrix, m, =, createRealMatrix, (, 1, ,, nCols, ), ;, for, (, int, i, =]
[length, ;, final, RealMatrix, m, =, createRealMatrix, (, 1, ,, nCols, ), ;, for, (, int, i, =, 0, ;]
[length, ;, final, RealMatrix, m, =, createRealMatrix, (, 1, ,, nCols, ), ;, for, (, int, i, =, 0, ;]
[final, RealMatrix, m, =, createRealMatrix, (, 1, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <]
[m, =, createRealMatrix, (, 1, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;]
[=, createRealMatrix, (, 1, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++]
[1, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {]
[1, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, m, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, m, ., setEntry, (, 0, ,]
[i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, m, ., setEntry, (, 0, ,, i, ,]
[i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, m, ., setEntry, (, 0, ,, i, ,]
[0, ;, i, <, nCols, ;, ++, i, ), {, m, ., setEntry, (, 0, ,, i, ,, rowData, []
[++, i, ), {, m, ., setEntry, (, 0, ,, i, ,, rowData, [, i, ], ), ;, }, return]
[>, FieldMatrix, <, T, >, createRowFieldMatrix, (, final, T, [, ], rowData, ), throws, NoDataException, ,, NullArgumentException, {, if, (]
[>, FieldMatrix, <, T, >, createRowFieldMatrix, (, final, T, [, ], rowData, ), throws, NoDataException, ,, NullArgumentException, {, if, (]
[<, T, >, createRowFieldMatrix, (, final, T, [, ], rowData, ), throws, NoDataException, ,, NullArgumentException, {, if, (, rowData, ==]
[(, final, T, [, ], rowData, ), throws, NoDataException, ,, NullArgumentException, {, if, (, rowData, ==, null, ), {, throw]
[NullArgumentException, {, if, (, rowData, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nCols, =]
[NullArgumentException, {, if, (, rowData, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nCols, =]
[null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nCols, =, rowData, ., length, ;, if, (]
[null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nCols, =, rowData, ., length, ;, if, (]
[{, throw, new, NullArgumentException, (, ), ;, }, final, int, nCols, =, rowData, ., length, ;, if, (, nCols, ==]
[(, ), ;, }, final, int, nCols, =, rowData, ., length, ;, if, (, nCols, ==, 0, ), {, throw]
[}, final, int, nCols, =, rowData, ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (]
[}, final, int, nCols, =, rowData, ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (]
[0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, final, FieldMatrix, <, T, >, m, =]
[{, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (]
[{, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (]
[{, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (]
[new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (, rowData, []
[;, }, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (, rowData, [, 0, ], ., getField, (, ), ,]
[final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (, rowData, [, 0, ], ., getField, (, ), ,, 1, ,]
[(, rowData, [, 0, ], ., getField, (, ), ,, 1, ,, nCols, ), ;, for, (, int, i, =]
[[, 0, ], ., getField, (, ), ,, 1, ,, nCols, ), ;, for, (, int, i, =, 0, ;]
[[, 0, ], ., getField, (, ), ,, 1, ,, nCols, ), ;, for, (, int, i, =, 0, ;]
[], ., getField, (, ), ,, 1, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <]
[getField, (, ), ,, 1, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;]
[(, ), ,, 1, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++]
[1, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {]
[1, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, m, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, m, ., setEntry, (, 0, ,]
[i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, m, ., setEntry, (, 0, ,, i, ,]
[i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, m, ., setEntry, (, 0, ,, i, ,]
[0, ;, i, <, nCols, ;, ++, i, ), {, m, ., setEntry, (, 0, ,, i, ,, rowData, []
[++, i, ), {, m, ., setEntry, (, 0, ,, i, ,, rowData, [, i, ], ), ;, }, return]
[m, ;, }, public, static, RealMatrix, createColumnRealMatrix, (, double, [, ], columnData, ), throws, NoDataException, ,, NullArgumentException, {, if, (]
[m, ;, }, public, static, RealMatrix, createColumnRealMatrix, (, double, [, ], columnData, ), throws, NoDataException, ,, NullArgumentException, {, if, (]
[}, public, static, RealMatrix, createColumnRealMatrix, (, double, [, ], columnData, ), throws, NoDataException, ,, NullArgumentException, {, if, (, columnData, ==]
[createColumnRealMatrix, (, double, [, ], columnData, ), throws, NoDataException, ,, NullArgumentException, {, if, (, columnData, ==, null, ), {, throw]
[NullArgumentException, {, if, (, columnData, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =]
[NullArgumentException, {, if, (, columnData, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =]
[{, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =, columnData, ., length, ;, final, RealMatrix, m, =]
[new, NullArgumentException, (, ), ;, }, final, int, nRows, =, columnData, ., length, ;, final, RealMatrix, m, =, createRealMatrix, (]
[(, ), ;, }, final, int, nRows, =, columnData, ., length, ;, final, RealMatrix, m, =, createRealMatrix, (, nRows, ,]
[columnData, ., length, ;, final, RealMatrix, m, =, createRealMatrix, (, nRows, ,, 1, ), ;, for, (, int, i, =]
[length, ;, final, RealMatrix, m, =, createRealMatrix, (, nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;]
[length, ;, final, RealMatrix, m, =, createRealMatrix, (, nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;]
[final, RealMatrix, m, =, createRealMatrix, (, nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[m, =, createRealMatrix, (, nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[=, createRealMatrix, (, nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++]
[nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, m, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, m, ., setEntry, (, i, ,]
[i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, m, ., setEntry, (, i, ,, 0, ,]
[i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, m, ., setEntry, (, i, ,, 0, ,]
[0, ;, i, <, nRows, ;, ++, i, ), {, m, ., setEntry, (, i, ,, 0, ,, columnData, []
[++, i, ), {, m, ., setEntry, (, i, ,, 0, ,, columnData, [, i, ], ), ;, }, return]
[>, FieldMatrix, <, T, >, createColumnFieldMatrix, (, final, T, [, ], columnData, ), throws, NoDataException, ,, NullArgumentException, {, if, (]
[>, FieldMatrix, <, T, >, createColumnFieldMatrix, (, final, T, [, ], columnData, ), throws, NoDataException, ,, NullArgumentException, {, if, (]
[<, T, >, createColumnFieldMatrix, (, final, T, [, ], columnData, ), throws, NoDataException, ,, NullArgumentException, {, if, (, columnData, ==]
[(, final, T, [, ], columnData, ), throws, NoDataException, ,, NullArgumentException, {, if, (, columnData, ==, null, ), {, throw]
[NullArgumentException, {, if, (, columnData, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =]
[NullArgumentException, {, if, (, columnData, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =]
[null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =, columnData, ., length, ;, if, (]
[null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =, columnData, ., length, ;, if, (]
[{, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =, columnData, ., length, ;, if, (, nRows, ==]
[(, ), ;, }, final, int, nRows, =, columnData, ., length, ;, if, (, nRows, ==, 0, ), {, throw]
[}, final, int, nRows, =, columnData, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (]
[}, final, int, nRows, =, columnData, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (]
[0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, FieldMatrix, <, T, >, m, =]
[{, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (]
[{, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (]
[{, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (]
[new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (, columnData, []
[;, }, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (, columnData, [, 0, ], ., getField, (, ), ,]
[final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (, columnData, [, 0, ], ., getField, (, ), ,, nRows, ,]
[(, columnData, [, 0, ], ., getField, (, ), ,, nRows, ,, 1, ), ;, for, (, int, i, =]
[[, 0, ], ., getField, (, ), ,, nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;]
[[, 0, ], ., getField, (, ), ,, nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;]
[], ., getField, (, ), ,, nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[getField, (, ), ,, nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[(, ), ,, nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++]
[nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, m, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, m, ., setEntry, (, i, ,]
[i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, m, ., setEntry, (, i, ,, 0, ,]
[i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, m, ., setEntry, (, i, ,, 0, ,]
[0, ;, i, <, nRows, ;, ++, i, ), {, m, ., setEntry, (, i, ,, 0, ,, columnData, []
[++, i, ), {, m, ., setEntry, (, i, ,, 0, ,, columnData, [, i, ], ), ;, }, return]
[}, private, static, boolean, isSymmetricInternal, (, RealMatrix, matrix, ,, double, relativeTolerance, ,, boolean, raiseException, ), {, final, int, rows, =]
[}, private, static, boolean, isSymmetricInternal, (, RealMatrix, matrix, ,, double, relativeTolerance, ,, boolean, raiseException, ), {, final, int, rows, =]
[,, double, relativeTolerance, ,, boolean, raiseException, ), {, final, int, rows, =, matrix, ., getRowDimension, (, ), ;, if, (]
[,, double, relativeTolerance, ,, boolean, raiseException, ), {, final, int, rows, =, matrix, ., getRowDimension, (, ), ;, if, (]
[relativeTolerance, ,, boolean, raiseException, ), {, final, int, rows, =, matrix, ., getRowDimension, (, ), ;, if, (, rows, !=]
[relativeTolerance, ,, boolean, raiseException, ), {, final, int, rows, =, matrix, ., getRowDimension, (, ), ;, if, (, rows, !=]
[=, matrix, ., getRowDimension, (, ), ;, if, (, rows, !=, matrix, ., getColumnDimension, (, ), ), {, if, (]
[(, ), ;, if, (, rows, !=, matrix, ., getColumnDimension, (, ), ), {, if, (, raiseException, ), {, throw]
[if, (, rows, !=, matrix, ., getColumnDimension, (, ), ), {, if, (, raiseException, ), {, throw, new, NonSquareMatrixException, (]
[rows, !=, matrix, ., getColumnDimension, (, ), ), {, if, (, raiseException, ), {, throw, new, NonSquareMatrixException, (, rows, ,]
[rows, !=, matrix, ., getColumnDimension, (, ), ), {, if, (, raiseException, ), {, throw, new, NonSquareMatrixException, (, rows, ,]
[raiseException, ), {, throw, new, NonSquareMatrixException, (, rows, ,, matrix, ., getColumnDimension, (, ), ), ;, }, else, {, return]
[matrix, ., getColumnDimension, (, ), ), ;, }, else, {, return, false, ;, }, }, for, (, int, i, =]
[getColumnDimension, (, ), ), ;, }, else, {, return, false, ;, }, }, for, (, int, i, =, 0, ;]
[getColumnDimension, (, ), ), ;, }, else, {, return, false, ;, }, }, for, (, int, i, =, 0, ;]
[), ), ;, }, else, {, return, false, ;, }, }, for, (, int, i, =, 0, ;, i, <]
[;, }, else, {, return, false, ;, }, }, for, (, int, i, =, 0, ;, i, <, rows, ;]
[;, }, else, {, return, false, ;, }, }, for, (, int, i, =, 0, ;, i, <, rows, ;]
[for, (, int, i, =, 0, ;, i, <, rows, ;, i, ++, ), {, for, (, int, j, =]
[for, (, int, i, =, 0, ;, i, <, rows, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, rows, ;, i, ++, ), {, for, (, int, j, =, i, +]
[=, 0, ;, i, <, rows, ;, i, ++, ), {, for, (, int, j, =, i, +, 1, ;]
[=, 0, ;, i, <, rows, ;, i, ++, ), {, for, (, int, j, =, i, +, 1, ;]
[;, i, <, rows, ;, i, ++, ), {, for, (, int, j, =, i, +, 1, ;, j, <]
[<, rows, ;, i, ++, ), {, for, (, int, j, =, i, +, 1, ;, j, <, rows, ;]
[<, rows, ;, i, ++, ), {, for, (, int, j, =, i, +, 1, ;, j, <, rows, ;]
[(, int, j, =, i, +, 1, ;, j, <, rows, ;, j, ++, ), {, final, double, mij, =]
[(, int, j, =, i, +, 1, ;, j, <, rows, ;, j, ++, ), {, final, double, mij, =]
[i, +, 1, ;, j, <, rows, ;, j, ++, ), {, final, double, mij, =, matrix, ., getEntry, (]
[1, ;, j, <, rows, ;, j, ++, ), {, final, double, mij, =, matrix, ., getEntry, (, i, ,]
[++, ), {, final, double, mij, =, matrix, ., getEntry, (, i, ,, j, ), ;, final, double, mji, =]
[++, ), {, final, double, mij, =, matrix, ., getEntry, (, i, ,, j, ), ;, final, double, mji, =]
[double, mij, =, matrix, ., getEntry, (, i, ,, j, ), ;, final, double, mji, =, matrix, ., getEntry, (]
[=, matrix, ., getEntry, (, i, ,, j, ), ;, final, double, mji, =, matrix, ., getEntry, (, j, ,]
[i, ,, j, ), ;, final, double, mji, =, matrix, ., getEntry, (, j, ,, i, ), ;, if, (]
[i, ,, j, ), ;, final, double, mji, =, matrix, ., getEntry, (, j, ,, i, ), ;, if, (]
[i, ,, j, ), ;, final, double, mji, =, matrix, ., getEntry, (, j, ,, i, ), ;, if, (]
[;, final, double, mji, =, matrix, ., getEntry, (, j, ,, i, ), ;, if, (, FastMath, ., abs, (]
[;, final, double, mji, =, matrix, ., getEntry, (, j, ,, i, ), ;, if, (, FastMath, ., abs, (]
[double, mji, =, matrix, ., getEntry, (, j, ,, i, ), ;, if, (, FastMath, ., abs, (, mij, -]
[matrix, ., getEntry, (, j, ,, i, ), ;, if, (, FastMath, ., abs, (, mij, -, mji, ), >]
[matrix, ., getEntry, (, j, ,, i, ), ;, if, (, FastMath, ., abs, (, mij, -, mji, ), >]
[matrix, ., getEntry, (, j, ,, i, ), ;, if, (, FastMath, ., abs, (, mij, -, mji, ), >]
[j, ,, i, ), ;, if, (, FastMath, ., abs, (, mij, -, mji, ), >, FastMath, ., max, (]
[j, ,, i, ), ;, if, (, FastMath, ., abs, (, mij, -, mji, ), >, FastMath, ., max, (]
[;, if, (, FastMath, ., abs, (, mij, -, mji, ), >, FastMath, ., max, (, FastMath, ., abs, (]
[FastMath, ., abs, (, mij, -, mji, ), >, FastMath, ., max, (, FastMath, ., abs, (, mij, ), ,]
[FastMath, ., abs, (, mij, -, mji, ), >, FastMath, ., max, (, FastMath, ., abs, (, mij, ), ,]
[mij, -, mji, ), >, FastMath, ., max, (, FastMath, ., abs, (, mij, ), ,, FastMath, ., abs, (]
[>, FastMath, ., max, (, FastMath, ., abs, (, mij, ), ,, FastMath, ., abs, (, mji, ), ), *]
[FastMath, ., abs, (, mij, ), ,, FastMath, ., abs, (, mji, ), ), *, relativeTolerance, ), {, if, (]
[mij, ), ,, FastMath, ., abs, (, mji, ), ), *, relativeTolerance, ), {, if, (, raiseException, ), {, throw]
[FastMath, ., abs, (, mji, ), ), *, relativeTolerance, ), {, if, (, raiseException, ), {, throw, new, NonSymmetricMatrixException, (]
[abs, (, mji, ), ), *, relativeTolerance, ), {, if, (, raiseException, ), {, throw, new, NonSymmetricMatrixException, (, i, ,]
[mji, ), ), *, relativeTolerance, ), {, if, (, raiseException, ), {, throw, new, NonSymmetricMatrixException, (, i, ,, j, ,]
[if, (, raiseException, ), {, throw, new, NonSymmetricMatrixException, (, i, ,, j, ,, relativeTolerance, ), ;, }, else, {, return]
[NonSymmetricMatrixException, (, i, ,, j, ,, relativeTolerance, ), ;, }, else, {, return, false, ;, }, }, }, }, return]
[}, }, }, }, return, true, ;, }, public, static, void, checkSymmetric, (, RealMatrix, matrix, ,, double, eps, ), {]
[}, }, return, true, ;, }, public, static, void, checkSymmetric, (, RealMatrix, matrix, ,, double, eps, ), {, isSymmetricInternal, (]
[return, true, ;, }, public, static, void, checkSymmetric, (, RealMatrix, matrix, ,, double, eps, ), {, isSymmetricInternal, (, matrix, ,]
[;, }, public, static, void, checkSymmetric, (, RealMatrix, matrix, ,, double, eps, ), {, isSymmetricInternal, (, matrix, ,, eps, ,]
[,, eps, ,, true, ), ;, }, public, static, boolean, isSymmetric, (, RealMatrix, matrix, ,, double, eps, ), {, return]
[,, true, ), ;, }, public, static, boolean, isSymmetric, (, RealMatrix, matrix, ,, double, eps, ), {, return, isSymmetricInternal, (]
[), ;, }, public, static, boolean, isSymmetric, (, RealMatrix, matrix, ,, double, eps, ), {, return, isSymmetricInternal, (, matrix, ,]
[}, public, static, boolean, isSymmetric, (, RealMatrix, matrix, ,, double, eps, ), {, return, isSymmetricInternal, (, matrix, ,, eps, ,]
[public, static, void, checkMatrixIndex, (, final, AnyMatrix, m, ,, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {]
[void, checkMatrixIndex, (, final, AnyMatrix, m, ,, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {, checkRowIndex, (]
[(, final, AnyMatrix, m, ,, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {, checkRowIndex, (, m, ,]
[m, ,, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {, checkRowIndex, (, m, ,, row, ), ;]
[final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {, checkRowIndex, (, m, ,, row, ), ;, checkColumnIndex, (]
[row, ,, final, int, column, ), throws, OutOfRangeException, {, checkRowIndex, (, m, ,, row, ), ;, checkColumnIndex, (, m, ,]
[;, }, public, static, void, checkRowIndex, (, final, AnyMatrix, m, ,, final, int, row, ), throws, OutOfRangeException, {, if, (]
[;, }, public, static, void, checkRowIndex, (, final, AnyMatrix, m, ,, final, int, row, ), throws, OutOfRangeException, {, if, (]
[;, }, public, static, void, checkRowIndex, (, final, AnyMatrix, m, ,, final, int, row, ), throws, OutOfRangeException, {, if, (]
[public, static, void, checkRowIndex, (, final, AnyMatrix, m, ,, final, int, row, ), throws, OutOfRangeException, {, if, (, row, <]
[void, checkRowIndex, (, final, AnyMatrix, m, ,, final, int, row, ), throws, OutOfRangeException, {, if, (, row, <, 0, ||]
[void, checkRowIndex, (, final, AnyMatrix, m, ,, final, int, row, ), throws, OutOfRangeException, {, if, (, row, <, 0, ||]
[(, final, AnyMatrix, m, ,, final, int, row, ), throws, OutOfRangeException, {, if, (, row, <, 0, ||, row, >=]
[(, final, AnyMatrix, m, ,, final, int, row, ), throws, OutOfRangeException, {, if, (, row, <, 0, ||, row, >=]
[), throws, OutOfRangeException, {, if, (, row, <, 0, ||, row, >=, m, ., getRowDimension, (, ), ), {, throw]
[{, if, (, row, <, 0, ||, row, >=, m, ., getRowDimension, (, ), ), {, throw, new, OutOfRangeException, (]
[{, if, (, row, <, 0, ||, row, >=, m, ., getRowDimension, (, ), ), {, throw, new, OutOfRangeException, (]
[<, 0, ||, row, >=, m, ., getRowDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,]
[||, row, >=, m, ., getRowDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,, row, ,]
[>=, m, ., getRowDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,, row, ,, 0, ,]
[>=, m, ., getRowDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,, row, ,, 0, ,]
[>=, m, ., getRowDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,, row, ,, 0, ,]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,, row, ,, 0, ,, m, ., getRowDimension, (, ), -]
[}, }, public, static, void, checkColumnIndex, (, final, AnyMatrix, m, ,, final, int, column, ), throws, OutOfRangeException, {, if, (]
[}, }, public, static, void, checkColumnIndex, (, final, AnyMatrix, m, ,, final, int, column, ), throws, OutOfRangeException, {, if, (]
[}, }, public, static, void, checkColumnIndex, (, final, AnyMatrix, m, ,, final, int, column, ), throws, OutOfRangeException, {, if, (]
[public, static, void, checkColumnIndex, (, final, AnyMatrix, m, ,, final, int, column, ), throws, OutOfRangeException, {, if, (, column, <]
[void, checkColumnIndex, (, final, AnyMatrix, m, ,, final, int, column, ), throws, OutOfRangeException, {, if, (, column, <, 0, ||]
[void, checkColumnIndex, (, final, AnyMatrix, m, ,, final, int, column, ), throws, OutOfRangeException, {, if, (, column, <, 0, ||]
[(, final, AnyMatrix, m, ,, final, int, column, ), throws, OutOfRangeException, {, if, (, column, <, 0, ||, column, >=]
[(, final, AnyMatrix, m, ,, final, int, column, ), throws, OutOfRangeException, {, if, (, column, <, 0, ||, column, >=]
[), throws, OutOfRangeException, {, if, (, column, <, 0, ||, column, >=, m, ., getColumnDimension, (, ), ), {, throw]
[{, if, (, column, <, 0, ||, column, >=, m, ., getColumnDimension, (, ), ), {, throw, new, OutOfRangeException, (]
[{, if, (, column, <, 0, ||, column, >=, m, ., getColumnDimension, (, ), ), {, throw, new, OutOfRangeException, (]
[<, 0, ||, column, >=, m, ., getColumnDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,]
[||, column, >=, m, ., getColumnDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,, column, ,]
[>=, m, ., getColumnDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,, column, ,, 0, ,]
[>=, m, ., getColumnDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,, column, ,, 0, ,]
[>=, m, ., getColumnDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,, column, ,, 0, ,]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,, column, ,, 0, ,, m, ., getColumnDimension, (, ), -]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {]
[,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkRowIndex, (]
[int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkRowIndex, (, m, ,]
[final, int, startColumn, ,, final, int, endColumn, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkRowIndex, (, m, ,, startRow, ), ;]
[startColumn, ,, final, int, endColumn, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkRowIndex, (, m, ,, startRow, ), ;, checkRowIndex, (]
[final, int, endColumn, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkRowIndex, (, m, ,, startRow, ), ;, checkRowIndex, (, m, ,]
[NumberIsTooSmallException, ,, OutOfRangeException, {, checkRowIndex, (, m, ,, startRow, ), ;, checkRowIndex, (, m, ,, endRow, ), ;, if, (]
[NumberIsTooSmallException, ,, OutOfRangeException, {, checkRowIndex, (, m, ,, startRow, ), ;, checkRowIndex, (, m, ,, endRow, ), ;, if, (]
[OutOfRangeException, {, checkRowIndex, (, m, ,, startRow, ), ;, checkRowIndex, (, m, ,, endRow, ), ;, if, (, endRow, <]
[m, ,, startRow, ), ;, checkRowIndex, (, m, ,, endRow, ), ;, if, (, endRow, <, startRow, ), {, throw]
[), ;, checkRowIndex, (, m, ,, endRow, ), ;, if, (, endRow, <, startRow, ), {, throw, new, NumberIsTooSmallException, (]
[), ;, checkRowIndex, (, m, ,, endRow, ), ;, if, (, endRow, <, startRow, ), {, throw, new, NumberIsTooSmallException, (]
[m, ,, endRow, ), ;, if, (, endRow, <, startRow, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,]
[endRow, ), ;, if, (, endRow, <, startRow, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, endRow, ,]
[;, if, (, endRow, <, startRow, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, endRow, ,, startRow, ,]
[<, startRow, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, endRow, ,, startRow, ,, false, ), ;, }]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, endRow, ,, startRow, ,, false, ), ;, }, checkColumnIndex, (]
[throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, endRow, ,, startRow, ,, false, ), ;, }, checkColumnIndex, (, m, ,]
[(, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, endRow, ,, startRow, ,, false, ), ;, }, checkColumnIndex, (, m, ,, startColumn, ), ;]
[., INITIAL_ROW_AFTER_FINAL_ROW, ,, endRow, ,, startRow, ,, false, ), ;, }, checkColumnIndex, (, m, ,, startColumn, ), ;, checkColumnIndex, (]
[,, endRow, ,, startRow, ,, false, ), ;, }, checkColumnIndex, (, m, ,, startColumn, ), ;, checkColumnIndex, (, m, ,]
[false, ), ;, }, checkColumnIndex, (, m, ,, startColumn, ), ;, checkColumnIndex, (, m, ,, endColumn, ), ;, if, (]
[false, ), ;, }, checkColumnIndex, (, m, ,, startColumn, ), ;, checkColumnIndex, (, m, ,, endColumn, ), ;, if, (]
[;, }, checkColumnIndex, (, m, ,, startColumn, ), ;, checkColumnIndex, (, m, ,, endColumn, ), ;, if, (, endColumn, <]
[m, ,, startColumn, ), ;, checkColumnIndex, (, m, ,, endColumn, ), ;, if, (, endColumn, <, startColumn, ), {, throw]
[), ;, checkColumnIndex, (, m, ,, endColumn, ), ;, if, (, endColumn, <, startColumn, ), {, throw, new, NumberIsTooSmallException, (]
[), ;, checkColumnIndex, (, m, ,, endColumn, ), ;, if, (, endColumn, <, startColumn, ), {, throw, new, NumberIsTooSmallException, (]
[m, ,, endColumn, ), ;, if, (, endColumn, <, startColumn, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_COLUMN_AFTER_FINAL_COLUMN, ,]
[endColumn, ), ;, if, (, endColumn, <, startColumn, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_COLUMN_AFTER_FINAL_COLUMN, ,, endColumn, ,]
[;, if, (, endColumn, <, startColumn, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_COLUMN_AFTER_FINAL_COLUMN, ,, endColumn, ,, startColumn, ,]
[int, [, ], selectedRows, ,, final, int, [, ], selectedColumns, ), throws, NoDataException, ,, NullArgumentException, ,, OutOfRangeException, {, if, (]
[int, [, ], selectedRows, ,, final, int, [, ], selectedColumns, ), throws, NoDataException, ,, NullArgumentException, ,, OutOfRangeException, {, if, (]
[], selectedRows, ,, final, int, [, ], selectedColumns, ), throws, NoDataException, ,, NullArgumentException, ,, OutOfRangeException, {, if, (, selectedRows, ==]
[int, [, ], selectedColumns, ), throws, NoDataException, ,, NullArgumentException, ,, OutOfRangeException, {, if, (, selectedRows, ==, null, ), {, throw]
[NullArgumentException, ,, OutOfRangeException, {, if, (, selectedRows, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[NullArgumentException, ,, OutOfRangeException, {, if, (, selectedRows, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[OutOfRangeException, {, if, (, selectedRows, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, selectedColumns, ==]
[selectedRows, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, selectedColumns, ==, null, ), {, throw]
[(, ), ;, }, if, (, selectedColumns, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[(, ), ;, }, if, (, selectedColumns, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[(, ), ;, }, if, (, selectedColumns, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[if, (, selectedColumns, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, selectedRows, ., length, ==]
[null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, selectedRows, ., length, ==, 0, ), {, throw]
[throw, new, NullArgumentException, (, ), ;, }, if, (, selectedRows, ., length, ==, 0, ), {, throw, new, NoDataException, (]
[throw, new, NullArgumentException, (, ), ;, }, if, (, selectedRows, ., length, ==, 0, ), {, throw, new, NoDataException, (]
[(, selectedRows, ., length, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_SELECTED_ROW_INDEX_ARRAY, ), ;, }, if, (]
[(, selectedRows, ., length, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_SELECTED_ROW_INDEX_ARRAY, ), ;, }, if, (]
[(, selectedRows, ., length, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_SELECTED_ROW_INDEX_ARRAY, ), ;, }, if, (]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_SELECTED_ROW_INDEX_ARRAY, ), ;, }, if, (, selectedColumns, ., length, ==]
[throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_SELECTED_ROW_INDEX_ARRAY, ), ;, }, if, (, selectedColumns, ., length, ==, 0, ), {, throw]
[(, LocalizedFormats, ., EMPTY_SELECTED_ROW_INDEX_ARRAY, ), ;, }, if, (, selectedColumns, ., length, ==, 0, ), {, throw, new, NoDataException, (]
[(, LocalizedFormats, ., EMPTY_SELECTED_ROW_INDEX_ARRAY, ), ;, }, if, (, selectedColumns, ., length, ==, 0, ), {, throw, new, NoDataException, (]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_SELECTED_COLUMN_INDEX_ARRAY, ), ;, }, for, (, final, int, row, :]
[{, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_SELECTED_COLUMN_INDEX_ARRAY, ), ;, }, for, (, final, int, row, :, selectedRows, ), {]
[new, NoDataException, (, LocalizedFormats, ., EMPTY_SELECTED_COLUMN_INDEX_ARRAY, ), ;, }, for, (, final, int, row, :, selectedRows, ), {, checkRowIndex, (]
[(, LocalizedFormats, ., EMPTY_SELECTED_COLUMN_INDEX_ARRAY, ), ;, }, for, (, final, int, row, :, selectedRows, ), {, checkRowIndex, (, m, ,]
[int, row, :, selectedRows, ), {, checkRowIndex, (, m, ,, row, ), ;, }, for, (, final, int, column, :]
[selectedRows, ), {, checkRowIndex, (, m, ,, row, ), ;, }, for, (, final, int, column, :, selectedColumns, ), {]
[{, checkRowIndex, (, m, ,, row, ), ;, }, for, (, final, int, column, :, selectedColumns, ), {, checkColumnIndex, (]
[(, m, ,, row, ), ;, }, for, (, final, int, column, :, selectedColumns, ), {, checkColumnIndex, (, m, ,]
[}, }, public, static, void, checkAdditionCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, MatrixDimensionMismatchException, {, if, (]
[}, }, public, static, void, checkAdditionCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, MatrixDimensionMismatchException, {, if, (]
[}, public, static, void, checkAdditionCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, MatrixDimensionMismatchException, {, if, (, (]
[}, public, static, void, checkAdditionCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, MatrixDimensionMismatchException, {, if, (, (]
[}, public, static, void, checkAdditionCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, MatrixDimensionMismatchException, {, if, (, (]
[final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, MatrixDimensionMismatchException, {, if, (, (, left, ., getRowDimension, (, ), !=]
[final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, MatrixDimensionMismatchException, {, if, (, (, left, ., getRowDimension, (, ), !=]
[), throws, MatrixDimensionMismatchException, {, if, (, (, left, ., getRowDimension, (, ), !=, right, ., getRowDimension, (, ), ), ||]
[throws, MatrixDimensionMismatchException, {, if, (, (, left, ., getRowDimension, (, ), !=, right, ., getRowDimension, (, ), ), ||, (]
[throws, MatrixDimensionMismatchException, {, if, (, (, left, ., getRowDimension, (, ), !=, right, ., getRowDimension, (, ), ), ||, (]
[throws, MatrixDimensionMismatchException, {, if, (, (, left, ., getRowDimension, (, ), !=, right, ., getRowDimension, (, ), ), ||, (]
[left, ., getRowDimension, (, ), !=, right, ., getRowDimension, (, ), ), ||, (, left, ., getColumnDimension, (, ), !=]
[left, ., getRowDimension, (, ), !=, right, ., getRowDimension, (, ), ), ||, (, left, ., getColumnDimension, (, ), !=]
[(, ), ), ||, (, left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, ), ), ), {, throw]
[||, (, left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (]
[||, (, left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (]
[), !=, right, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,]
[), !=, right, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,]
[), ), ), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left, ., getColumnDimension, (, ), ,]
[), ), ), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left, ., getColumnDimension, (, ), ,]
[MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left, ., getColumnDimension, (, ), ,, right, ., getRowDimension, (, ), ,]
[MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left, ., getColumnDimension, (, ), ,, right, ., getRowDimension, (, ), ,]
[}, }, public, static, void, checkSubtractionCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, MatrixDimensionMismatchException, {, if, (]
[}, }, public, static, void, checkSubtractionCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, MatrixDimensionMismatchException, {, if, (]
[}, public, static, void, checkSubtractionCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, MatrixDimensionMismatchException, {, if, (, (]
[}, public, static, void, checkSubtractionCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, MatrixDimensionMismatchException, {, if, (, (]
[}, public, static, void, checkSubtractionCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, MatrixDimensionMismatchException, {, if, (, (]
[final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, MatrixDimensionMismatchException, {, if, (, (, left, ., getRowDimension, (, ), !=]
[final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, MatrixDimensionMismatchException, {, if, (, (, left, ., getRowDimension, (, ), !=]
[), throws, MatrixDimensionMismatchException, {, if, (, (, left, ., getRowDimension, (, ), !=, right, ., getRowDimension, (, ), ), ||]
[throws, MatrixDimensionMismatchException, {, if, (, (, left, ., getRowDimension, (, ), !=, right, ., getRowDimension, (, ), ), ||, (]
[throws, MatrixDimensionMismatchException, {, if, (, (, left, ., getRowDimension, (, ), !=, right, ., getRowDimension, (, ), ), ||, (]
[throws, MatrixDimensionMismatchException, {, if, (, (, left, ., getRowDimension, (, ), !=, right, ., getRowDimension, (, ), ), ||, (]
[left, ., getRowDimension, (, ), !=, right, ., getRowDimension, (, ), ), ||, (, left, ., getColumnDimension, (, ), !=]
[left, ., getRowDimension, (, ), !=, right, ., getRowDimension, (, ), ), ||, (, left, ., getColumnDimension, (, ), !=]
[(, ), ), ||, (, left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, ), ), ), {, throw]
[||, (, left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (]
[||, (, left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (]
[), !=, right, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,]
[), !=, right, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,]
[), ), ), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left, ., getColumnDimension, (, ), ,]
[), ), ), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left, ., getColumnDimension, (, ), ,]
[MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left, ., getColumnDimension, (, ), ,, right, ., getRowDimension, (, ), ,]
[MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left, ., getColumnDimension, (, ), ,, right, ., getRowDimension, (, ), ,]
[}, }, public, static, void, checkMultiplicationCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, DimensionMismatchException, {, if, (]
[}, }, public, static, void, checkMultiplicationCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, DimensionMismatchException, {, if, (]
[}, }, public, static, void, checkMultiplicationCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, DimensionMismatchException, {, if, (]
[(, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, DimensionMismatchException, {, if, (, left, ., getColumnDimension, (, ), !=]
[(, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, DimensionMismatchException, {, if, (, left, ., getColumnDimension, (, ), !=]
[), throws, DimensionMismatchException, {, if, (, left, ., getColumnDimension, (, ), !=, right, ., getRowDimension, (, ), ), {, throw]
[{, if, (, left, ., getColumnDimension, (, ), !=, right, ., getRowDimension, (, ), ), {, throw, new, DimensionMismatchException, (]
[{, if, (, left, ., getColumnDimension, (, ), !=, right, ., getRowDimension, (, ), ), {, throw, new, DimensionMismatchException, (]
[(, ), !=, right, ., getRowDimension, (, ), ), {, throw, new, DimensionMismatchException, (, left, ., getColumnDimension, (, ), ,]
[(, ), !=, right, ., getRowDimension, (, ), ), {, throw, new, DimensionMismatchException, (, left, ., getColumnDimension, (, ), ,]
[;, }, }, public, static, Array2DRowRealMatrix, fractionMatrixToRealMatrix, (, final, FieldMatrix, <, Fraction, >, m, ), {, final, FractionMatrixConverter, converter, =]
[Array2DRowRealMatrix, fractionMatrixToRealMatrix, (, final, FieldMatrix, <, Fraction, >, m, ), {, final, FractionMatrixConverter, converter, =, new, FractionMatrixConverter, (, ), ;]
[Array2DRowRealMatrix, fractionMatrixToRealMatrix, (, final, FieldMatrix, <, Fraction, >, m, ), {, final, FractionMatrixConverter, converter, =, new, FractionMatrixConverter, (, ), ;]
[FieldMatrix, <, Fraction, >, m, ), {, final, FractionMatrixConverter, converter, =, new, FractionMatrixConverter, (, ), ;, m, ., walkInOptimizedOrder, (]
[m, ), {, final, FractionMatrixConverter, converter, =, new, FractionMatrixConverter, (, ), ;, m, ., walkInOptimizedOrder, (, converter, ), ;, return]
[m, ), {, final, FractionMatrixConverter, converter, =, new, FractionMatrixConverter, (, ), ;, m, ., walkInOptimizedOrder, (, converter, ), ;, return]
[DefaultFieldMatrixPreservingVisitor, <, Fraction, >, {, private, double, [, ], [, ], data, ;, public, FractionMatrixConverter, (, ), {, super, (]
[DefaultFieldMatrixPreservingVisitor, <, Fraction, >, {, private, double, [, ], [, ], data, ;, public, FractionMatrixConverter, (, ), {, super, (]
[(, int, rows, ,, int, columns, ,, int, startRow, ,, int, endRow, ,, int, startColumn, ,, int, endColumn, ), {]
[rows, ,, int, columns, ,, int, startRow, ,, int, endRow, ,, int, startColumn, ,, int, endColumn, ), {, data, =]
[columns, ,, int, startRow, ,, int, endRow, ,, int, startColumn, ,, int, endColumn, ), {, data, =, new, double, []
[startRow, ,, int, endRow, ,, int, startColumn, ,, int, endColumn, ), {, data, =, new, double, [, rows, ], []
[columns, ], ;, }, @, Override, public, void, visit, (, int, row, ,, int, column, ,, Fraction, value, ), {]
[columns, ], ;, }, @, Override, public, void, visit, (, int, row, ,, int, column, ,, Fraction, value, ), {]
[columns, ], ;, }, @, Override, public, void, visit, (, int, row, ,, int, column, ,, Fraction, value, ), {]
[;, }, @, Override, public, void, visit, (, int, row, ,, int, column, ,, Fraction, value, ), {, data, []
[Override, public, void, visit, (, int, row, ,, int, column, ,, Fraction, value, ), {, data, [, row, ], []
[visit, (, int, row, ,, int, column, ,, Fraction, value, ), {, data, [, row, ], [, column, ], =]
[visit, (, int, row, ,, int, column, ,, Fraction, value, ), {, data, [, row, ], [, column, ], =]
[[, row, ], [, column, ], =, value, ., doubleValue, (, ), ;, }, Array2DRowRealMatrix, getConvertedMatrix, (, ), {, return]
[[, column, ], =, value, ., doubleValue, (, ), ;, }, Array2DRowRealMatrix, getConvertedMatrix, (, ), {, return, new, Array2DRowRealMatrix, (]
[], =, value, ., doubleValue, (, ), ;, }, Array2DRowRealMatrix, getConvertedMatrix, (, ), {, return, new, Array2DRowRealMatrix, (, data, ,]
[;, }, }, public, static, Array2DRowRealMatrix, bigFractionMatrixToRealMatrix, (, final, FieldMatrix, <, BigFraction, >, m, ), {, final, BigFractionMatrixConverter, converter, =]
[Array2DRowRealMatrix, bigFractionMatrixToRealMatrix, (, final, FieldMatrix, <, BigFraction, >, m, ), {, final, BigFractionMatrixConverter, converter, =, new, BigFractionMatrixConverter, (, ), ;]
[Array2DRowRealMatrix, bigFractionMatrixToRealMatrix, (, final, FieldMatrix, <, BigFraction, >, m, ), {, final, BigFractionMatrixConverter, converter, =, new, BigFractionMatrixConverter, (, ), ;]
[FieldMatrix, <, BigFraction, >, m, ), {, final, BigFractionMatrixConverter, converter, =, new, BigFractionMatrixConverter, (, ), ;, m, ., walkInOptimizedOrder, (]
[m, ), {, final, BigFractionMatrixConverter, converter, =, new, BigFractionMatrixConverter, (, ), ;, m, ., walkInOptimizedOrder, (, converter, ), ;, return]
[m, ), {, final, BigFractionMatrixConverter, converter, =, new, BigFractionMatrixConverter, (, ), ;, m, ., walkInOptimizedOrder, (, converter, ), ;, return]
[DefaultFieldMatrixPreservingVisitor, <, BigFraction, >, {, private, double, [, ], [, ], data, ;, public, BigFractionMatrixConverter, (, ), {, super, (]
[DefaultFieldMatrixPreservingVisitor, <, BigFraction, >, {, private, double, [, ], [, ], data, ;, public, BigFractionMatrixConverter, (, ), {, super, (]
[(, int, rows, ,, int, columns, ,, int, startRow, ,, int, endRow, ,, int, startColumn, ,, int, endColumn, ), {]
[rows, ,, int, columns, ,, int, startRow, ,, int, endRow, ,, int, startColumn, ,, int, endColumn, ), {, data, =]
[columns, ,, int, startRow, ,, int, endRow, ,, int, startColumn, ,, int, endColumn, ), {, data, =, new, double, []
[startRow, ,, int, endRow, ,, int, startColumn, ,, int, endColumn, ), {, data, =, new, double, [, rows, ], []
[columns, ], ;, }, @, Override, public, void, visit, (, int, row, ,, int, column, ,, BigFraction, value, ), {]
[columns, ], ;, }, @, Override, public, void, visit, (, int, row, ,, int, column, ,, BigFraction, value, ), {]
[columns, ], ;, }, @, Override, public, void, visit, (, int, row, ,, int, column, ,, BigFraction, value, ), {]
[;, }, @, Override, public, void, visit, (, int, row, ,, int, column, ,, BigFraction, value, ), {, data, []
[Override, public, void, visit, (, int, row, ,, int, column, ,, BigFraction, value, ), {, data, [, row, ], []
[visit, (, int, row, ,, int, column, ,, BigFraction, value, ), {, data, [, row, ], [, column, ], =]
[visit, (, int, row, ,, int, column, ,, BigFraction, value, ), {, data, [, row, ], [, column, ], =]
[[, row, ], [, column, ], =, value, ., doubleValue, (, ), ;, }, Array2DRowRealMatrix, getConvertedMatrix, (, ), {, return]
[[, column, ], =, value, ., doubleValue, (, ), ;, }, Array2DRowRealMatrix, getConvertedMatrix, (, ), {, return, new, Array2DRowRealMatrix, (]
[], =, value, ., doubleValue, (, ), ;, }, Array2DRowRealMatrix, getConvertedMatrix, (, ), {, return, new, Array2DRowRealMatrix, (, data, ,]
[public, static, void, serializeRealVector, (, final, RealVector, vector, ,, final, ObjectOutputStream, oos, ), throws, IOException, {, final, int, n, =]
[public, static, void, serializeRealVector, (, final, RealVector, vector, ,, final, ObjectOutputStream, oos, ), throws, IOException, {, final, int, n, =]
[RealVector, vector, ,, final, ObjectOutputStream, oos, ), throws, IOException, {, final, int, n, =, vector, ., getDimension, (, ), ;]
[RealVector, vector, ,, final, ObjectOutputStream, oos, ), throws, IOException, {, final, int, n, =, vector, ., getDimension, (, ), ;]
[ObjectOutputStream, oos, ), throws, IOException, {, final, int, n, =, vector, ., getDimension, (, ), ;, oos, ., writeInt, (]
[n, =, vector, ., getDimension, (, ), ;, oos, ., writeInt, (, n, ), ;, for, (, int, i, =]
[vector, ., getDimension, (, ), ;, oos, ., writeInt, (, n, ), ;, for, (, int, i, =, 0, ;]
[vector, ., getDimension, (, ), ;, oos, ., writeInt, (, n, ), ;, for, (, int, i, =, 0, ;]
[getDimension, (, ), ;, oos, ., writeInt, (, n, ), ;, for, (, int, i, =, 0, ;, i, <]
[), ;, oos, ., writeInt, (, n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, oos, ., writeInt, (, n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[writeInt, (, n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[writeInt, (, n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, oos, ., writeDouble, (]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, oos, ., writeDouble, (]
[i, =, 0, ;, i, <, n, ;, ++, i, ), {, oos, ., writeDouble, (, vector, ., getEntry, (]
[,, final, String, fieldName, ,, final, ObjectInputStream, ois, ), throws, ClassNotFoundException, ,, IOException, {, try, {, final, int, n, =]
[,, final, String, fieldName, ,, final, ObjectInputStream, ois, ), throws, ClassNotFoundException, ,, IOException, {, try, {, final, int, n, =]
[IOException, {, try, {, final, int, n, =, ois, ., readInt, (, ), ;, final, double, [, ], data, =]
[{, final, int, n, =, ois, ., readInt, (, ), ;, final, double, [, ], data, =, new, double, []
[(, ), ;, final, double, [, ], data, =, new, double, [, n, ], ;, for, (, int, i, =]
[;, final, double, [, ], data, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[;, final, double, [, ], data, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], data, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[], data, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[data, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, data, []
[for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, data, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, data, [, i, ], =]
[++, i, ), {, data, [, i, ], =, ois, ., readDouble, (, ), ;, }, final, RealVector, vector, =]
[{, data, [, i, ], =, ois, ., readDouble, (, ), ;, }, final, RealVector, vector, =, new, ArrayRealVector, (]
[[, i, ], =, ois, ., readDouble, (, ), ;, }, final, RealVector, vector, =, new, ArrayRealVector, (, data, ,]
[vector, =, new, ArrayRealVector, (, data, ,, false, ), ;, final, java, ., lang, ., reflect, ., Field, f, =]
[vector, =, new, ArrayRealVector, (, data, ,, false, ), ;, final, java, ., lang, ., reflect, ., Field, f, =]
[vector, =, new, ArrayRealVector, (, data, ,, false, ), ;, final, java, ., lang, ., reflect, ., Field, f, =]
[), ;, final, java, ., lang, ., reflect, ., Field, f, =, instance, ., getClass, (, ), ., getDeclaredField, (]
[java, ., lang, ., reflect, ., Field, f, =, instance, ., getClass, (, ), ., getDeclaredField, (, fieldName, ), ;]
[java, ., lang, ., reflect, ., Field, f, =, instance, ., getClass, (, ), ., getDeclaredField, (, fieldName, ), ;]
[reflect, ., Field, f, =, instance, ., getClass, (, ), ., getDeclaredField, (, fieldName, ), ;, f, ., setAccessible, (]
[f, =, instance, ., getClass, (, ), ., getDeclaredField, (, fieldName, ), ;, f, ., setAccessible, (, true, ), ;]
[f, =, instance, ., getClass, (, ), ., getDeclaredField, (, fieldName, ), ;, f, ., setAccessible, (, true, ), ;]
[getClass, (, ), ., getDeclaredField, (, fieldName, ), ;, f, ., setAccessible, (, true, ), ;, f, ., set, (]
[), ., getDeclaredField, (, fieldName, ), ;, f, ., setAccessible, (, true, ), ;, f, ., set, (, instance, ,]
[;, f, ., set, (, instance, ,, vector, ), ;, }, catch, (, NoSuchFieldException, nsfe, ), {, IOException, ioe, =]
[instance, ,, vector, ), ;, }, catch, (, NoSuchFieldException, nsfe, ), {, IOException, ioe, =, new, IOException, (, ), ;]
[instance, ,, vector, ), ;, }, catch, (, NoSuchFieldException, nsfe, ), {, IOException, ioe, =, new, IOException, (, ), ;]
[;, }, catch, (, NoSuchFieldException, nsfe, ), {, IOException, ioe, =, new, IOException, (, ), ;, ioe, ., initCause, (]
[NoSuchFieldException, nsfe, ), {, IOException, ioe, =, new, IOException, (, ), ;, ioe, ., initCause, (, nsfe, ), ;, throw]
[ioe, ., initCause, (, nsfe, ), ;, throw, ioe, ;, }, catch, (, IllegalAccessException, iae, ), {, IOException, ioe, =]
[), ;, throw, ioe, ;, }, catch, (, IllegalAccessException, iae, ), {, IOException, ioe, =, new, IOException, (, ), ;]
[), ;, throw, ioe, ;, }, catch, (, IllegalAccessException, iae, ), {, IOException, ioe, =, new, IOException, (, ), ;]
[;, }, catch, (, IllegalAccessException, iae, ), {, IOException, ioe, =, new, IOException, (, ), ;, ioe, ., initCause, (]
[IllegalAccessException, iae, ), {, IOException, ioe, =, new, IOException, (, ), ;, ioe, ., initCause, (, iae, ), ;, throw]
[public, static, void, serializeRealMatrix, (, final, RealMatrix, matrix, ,, final, ObjectOutputStream, oos, ), throws, IOException, {, final, int, n, =]
[public, static, void, serializeRealMatrix, (, final, RealMatrix, matrix, ,, final, ObjectOutputStream, oos, ), throws, IOException, {, final, int, n, =]
[ObjectOutputStream, oos, ), throws, IOException, {, final, int, n, =, matrix, ., getRowDimension, (, ), ;, final, int, m, =]
[ObjectOutputStream, oos, ), throws, IOException, {, final, int, n, =, matrix, ., getRowDimension, (, ), ;, final, int, m, =]
[final, int, n, =, matrix, ., getRowDimension, (, ), ;, final, int, m, =, matrix, ., getColumnDimension, (, ), ;]
[final, int, n, =, matrix, ., getRowDimension, (, ), ;, final, int, m, =, matrix, ., getColumnDimension, (, ), ;]
[matrix, ., getRowDimension, (, ), ;, final, int, m, =, matrix, ., getColumnDimension, (, ), ;, oos, ., writeInt, (]
[(, ), ;, final, int, m, =, matrix, ., getColumnDimension, (, ), ;, oos, ., writeInt, (, n, ), ;]
[(, ), ;, final, int, m, =, matrix, ., getColumnDimension, (, ), ;, oos, ., writeInt, (, n, ), ;]
[int, m, =, matrix, ., getColumnDimension, (, ), ;, oos, ., writeInt, (, n, ), ;, oos, ., writeInt, (]
[;, oos, ., writeInt, (, n, ), ;, oos, ., writeInt, (, m, ), ;, for, (, int, i, =]
[., writeInt, (, n, ), ;, oos, ., writeInt, (, m, ), ;, for, (, int, i, =, 0, ;]
[., writeInt, (, n, ), ;, oos, ., writeInt, (, m, ), ;, for, (, int, i, =, 0, ;]
[(, n, ), ;, oos, ., writeInt, (, m, ), ;, for, (, int, i, =, 0, ;, i, <]
[), ;, oos, ., writeInt, (, m, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, oos, ., writeInt, (, m, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, n, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, n, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;]
[i, <, n, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {]
[{, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, oos, ., writeDouble, (]
[{, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, oos, ., writeDouble, (]
[j, =, 0, ;, j, <, m, ;, ++, j, ), {, oos, ., writeDouble, (, matrix, ., getEntry, (]
[0, ;, j, <, m, ;, ++, j, ), {, oos, ., writeDouble, (, matrix, ., getEntry, (, i, ,]
[,, final, String, fieldName, ,, final, ObjectInputStream, ois, ), throws, ClassNotFoundException, ,, IOException, {, try, {, final, int, n, =]
[,, final, String, fieldName, ,, final, ObjectInputStream, ois, ), throws, ClassNotFoundException, ,, IOException, {, try, {, final, int, n, =]
[ClassNotFoundException, ,, IOException, {, try, {, final, int, n, =, ois, ., readInt, (, ), ;, final, int, m, =]
[ClassNotFoundException, ,, IOException, {, try, {, final, int, n, =, ois, ., readInt, (, ), ;, final, int, m, =]
[), ;, final, int, m, =, ois, ., readInt, (, ), ;, final, double, [, ], [, ], data, =]
[int, m, =, ois, ., readInt, (, ), ;, final, double, [, ], [, ], data, =, new, double, []
[ois, ., readInt, (, ), ;, final, double, [, ], [, ], data, =, new, double, [, n, ], []
[[, ], [, ], data, =, new, double, [, n, ], [, m, ], ;, for, (, int, i, =]
[[, ], data, =, new, double, [, n, ], [, m, ], ;, for, (, int, i, =, 0, ;]
[[, ], data, =, new, double, [, n, ], [, m, ], ;, for, (, int, i, =, 0, ;]
[data, =, new, double, [, n, ], [, m, ], ;, for, (, int, i, =, 0, ;, i, <]
[new, double, [, n, ], [, m, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[double, [, n, ], [, m, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[(, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, final, double, [, ], dataI, =]
[(, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, final, double, [, ], dataI, =]
[i, =, 0, ;, i, <, n, ;, ++, i, ), {, final, double, [, ], dataI, =, data, []
[++, i, ), {, final, double, [, ], dataI, =, data, [, i, ], ;, for, (, int, j, =]
[), {, final, double, [, ], dataI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[), {, final, double, [, ], dataI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[final, double, [, ], dataI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <]
[[, ], dataI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, m, ;]
[], dataI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, m, ;, ++]
[data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {]
[data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {]
[i, ], ;, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, dataI, []
[for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, dataI, [, j, ], =]
[for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, dataI, [, j, ], =]
[j, ), {, dataI, [, j, ], =, ois, ., readDouble, (, ), ;, }, }, final, RealMatrix, matrix, =]
[dataI, [, j, ], =, ois, ., readDouble, (, ), ;, }, }, final, RealMatrix, matrix, =, new, Array2DRowRealMatrix, (]
[j, ], =, ois, ., readDouble, (, ), ;, }, }, final, RealMatrix, matrix, =, new, Array2DRowRealMatrix, (, data, ,]
[matrix, =, new, Array2DRowRealMatrix, (, data, ,, false, ), ;, final, java, ., lang, ., reflect, ., Field, f, =]
[matrix, =, new, Array2DRowRealMatrix, (, data, ,, false, ), ;, final, java, ., lang, ., reflect, ., Field, f, =]
[matrix, =, new, Array2DRowRealMatrix, (, data, ,, false, ), ;, final, java, ., lang, ., reflect, ., Field, f, =]
[), ;, final, java, ., lang, ., reflect, ., Field, f, =, instance, ., getClass, (, ), ., getDeclaredField, (]
[java, ., lang, ., reflect, ., Field, f, =, instance, ., getClass, (, ), ., getDeclaredField, (, fieldName, ), ;]
[java, ., lang, ., reflect, ., Field, f, =, instance, ., getClass, (, ), ., getDeclaredField, (, fieldName, ), ;]
[reflect, ., Field, f, =, instance, ., getClass, (, ), ., getDeclaredField, (, fieldName, ), ;, f, ., setAccessible, (]
[f, =, instance, ., getClass, (, ), ., getDeclaredField, (, fieldName, ), ;, f, ., setAccessible, (, true, ), ;]
[f, =, instance, ., getClass, (, ), ., getDeclaredField, (, fieldName, ), ;, f, ., setAccessible, (, true, ), ;]
[getClass, (, ), ., getDeclaredField, (, fieldName, ), ;, f, ., setAccessible, (, true, ), ;, f, ., set, (]
[), ., getDeclaredField, (, fieldName, ), ;, f, ., setAccessible, (, true, ), ;, f, ., set, (, instance, ,]
[;, f, ., set, (, instance, ,, matrix, ), ;, }, catch, (, NoSuchFieldException, nsfe, ), {, IOException, ioe, =]
[instance, ,, matrix, ), ;, }, catch, (, NoSuchFieldException, nsfe, ), {, IOException, ioe, =, new, IOException, (, ), ;]
[instance, ,, matrix, ), ;, }, catch, (, NoSuchFieldException, nsfe, ), {, IOException, ioe, =, new, IOException, (, ), ;]
[;, }, catch, (, NoSuchFieldException, nsfe, ), {, IOException, ioe, =, new, IOException, (, ), ;, ioe, ., initCause, (]
[NoSuchFieldException, nsfe, ), {, IOException, ioe, =, new, IOException, (, ), ;, ioe, ., initCause, (, nsfe, ), ;, throw]
[ioe, ., initCause, (, nsfe, ), ;, throw, ioe, ;, }, catch, (, IllegalAccessException, iae, ), {, IOException, ioe, =]
[), ;, throw, ioe, ;, }, catch, (, IllegalAccessException, iae, ), {, IOException, ioe, =, new, IOException, (, ), ;]
[), ;, throw, ioe, ;, }, catch, (, IllegalAccessException, iae, ), {, IOException, ioe, =, new, IOException, (, ), ;]
[;, }, catch, (, IllegalAccessException, iae, ), {, IOException, ioe, =, new, IOException, (, ), ;, ioe, ., initCause, (]
[IllegalAccessException, iae, ), {, IOException, ioe, =, new, IOException, (, ), ;, ioe, ., initCause, (, iae, ), ;, throw]
[public, static, void, solveLowerTriangularSystem, (, RealMatrix, rm, ,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (]
[public, static, void, solveLowerTriangularSystem, (, RealMatrix, rm, ,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (]
[public, static, void, solveLowerTriangularSystem, (, RealMatrix, rm, ,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (]
[static, void, solveLowerTriangularSystem, (, RealMatrix, rm, ,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (]
[static, void, solveLowerTriangularSystem, (, RealMatrix, rm, ,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (]
[solveLowerTriangularSystem, (, RealMatrix, rm, ,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (, rm, ==]
[rm, ,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (, rm, ==, null, ), ||]
[,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (, rm, ==, null, ), ||, (]
[,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (, rm, ==, null, ), ||, (]
[b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (, rm, ==, null, ), ||, (, b, ==]
[DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (, rm, ==, null, ), ||, (, b, ==, null, ), ||]
[,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (, rm, ==, null, ), ||, (, b, ==, null, ), ||, (]
[,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (, rm, ==, null, ), ||, (, b, ==, null, ), ||, (]
[,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (, rm, ==, null, ), ||, (, b, ==, null, ), ||, (]
[(, (, rm, ==, null, ), ||, (, b, ==, null, ), ||, (, rm, ., getRowDimension, (, ), !=]
[(, (, rm, ==, null, ), ||, (, b, ==, null, ), ||, (, rm, ., getRowDimension, (, ), !=]
[==, null, ), ||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw]
[||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (]
[||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (]
[(, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (, (]
[(, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (, (]
[., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (, (, rm, ==]
[), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?]
[b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :]
[b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :]
[), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,]
[), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,]
[{, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,, (]
[{, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,, (]
[new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,, (, b, ==]
[(, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,, (, b, ==, null, ), ?]
[==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,, (, b, ==, null, ), ?, 0, :]
[==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,, (, b, ==, null, ), ?, 0, :]
[), ,, (, b, ==, null, ), ?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (]
[), ,, (, b, ==, null, ), ?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (]
[), ,, (, b, ==, null, ), ?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (]
[), ?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (, rm, ., getColumnDimension, (, ), !=]
[), ?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (, rm, ., getColumnDimension, (, ), !=]
[), ), ;, }, if, (, rm, ., getColumnDimension, (, ), !=, rm, ., getRowDimension, (, ), ), {, throw]
[}, if, (, rm, ., getColumnDimension, (, ), !=, rm, ., getRowDimension, (, ), ), {, throw, new, NonSquareMatrixException, (]
[}, if, (, rm, ., getColumnDimension, (, ), !=, rm, ., getRowDimension, (, ), ), {, throw, new, NonSquareMatrixException, (]
[(, ), !=, rm, ., getRowDimension, (, ), ), {, throw, new, NonSquareMatrixException, (, rm, ., getRowDimension, (, ), ,]
[(, ), !=, rm, ., getRowDimension, (, ), ), {, throw, new, NonSquareMatrixException, (, rm, ., getRowDimension, (, ), ,]
[new, NonSquareMatrixException, (, rm, ., getRowDimension, (, ), ,, rm, ., getColumnDimension, (, ), ), ;, }, int, rows, =]
[new, NonSquareMatrixException, (, rm, ., getRowDimension, (, ), ,, rm, ., getColumnDimension, (, ), ), ;, }, int, rows, =]
[getColumnDimension, (, ), ), ;, }, int, rows, =, rm, ., getRowDimension, (, ), ;, for, (, int, i, =]
[), ), ;, }, int, rows, =, rm, ., getRowDimension, (, ), ;, for, (, int, i, =, 0, ;]
[), ), ;, }, int, rows, =, rm, ., getRowDimension, (, ), ;, for, (, int, i, =, 0, ;]
[;, }, int, rows, =, rm, ., getRowDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[int, rows, =, rm, ., getRowDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;]
[int, rows, =, rm, ., getRowDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;]
[), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, i, ++, ), {, double, diag, =]
[), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, i, ++, ), {, double, diag, =]
[int, i, =, 0, ;, i, <, rows, ;, i, ++, ), {, double, diag, =, rm, ., getEntry, (]
[=, 0, ;, i, <, rows, ;, i, ++, ), {, double, diag, =, rm, ., getEntry, (, i, ,]
[rows, ;, i, ++, ), {, double, diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if, (]
[rows, ;, i, ++, ), {, double, diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if, (]
[rows, ;, i, ++, ), {, double, diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if, (]
[), {, double, diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if, (, FastMath, ., abs, (]
[diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if, (, FastMath, ., abs, (, diag, ), <]
[diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if, (, FastMath, ., abs, (, diag, ), <]
[i, ,, i, ), ;, if, (, FastMath, ., abs, (, diag, ), <, Precision, ., SAFE_MIN, ), {, throw]
[), ;, if, (, FastMath, ., abs, (, diag, ), <, Precision, ., SAFE_MIN, ), {, throw, new, MathArithmeticException, (]
[), ;, if, (, FastMath, ., abs, (, diag, ), <, Precision, ., SAFE_MIN, ), {, throw, new, MathArithmeticException, (]
[), <, Precision, ., SAFE_MIN, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =]
[), <, Precision, ., SAFE_MIN, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =]
[), <, Precision, ., SAFE_MIN, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =]
[SAFE_MIN, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =, b, ., getEntry, (]
[throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =, b, ., getEntry, (, i, ), /]
[MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =, b, ., getEntry, (, i, ), /, diag, ;]
[MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =, b, ., getEntry, (, i, ), /, diag, ;]
[ZERO_DENOMINATOR, ), ;, }, double, bi, =, b, ., getEntry, (, i, ), /, diag, ;, b, ., setEntry, (]
[;, }, double, bi, =, b, ., getEntry, (, i, ), /, diag, ;, b, ., setEntry, (, i, ,]
[(, i, ), /, diag, ;, b, ., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =]
[(, i, ), /, diag, ;, b, ., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =]
[), /, diag, ;, b, ., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =, i, +]
[diag, ;, b, ., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =, i, +, 1, ;]
[diag, ;, b, ., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =, i, +, 1, ;]
[b, ., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =, i, +, 1, ;, j, <]
[setEntry, (, i, ,, bi, ), ;, for, (, int, j, =, i, +, 1, ;, j, <, rows, ;]
[setEntry, (, i, ,, bi, ), ;, for, (, int, j, =, i, +, 1, ;, j, <, rows, ;]
[bi, ), ;, for, (, int, j, =, i, +, 1, ;, j, <, rows, ;, j, ++, ), {]
[bi, ), ;, for, (, int, j, =, i, +, 1, ;, j, <, rows, ;, j, ++, ), {]
[(, int, j, =, i, +, 1, ;, j, <, rows, ;, j, ++, ), {, b, ., setEntry, (]
[j, =, i, +, 1, ;, j, <, rows, ;, j, ++, ), {, b, ., setEntry, (, j, ,]
[j, =, i, +, 1, ;, j, <, rows, ;, j, ++, ), {, b, ., setEntry, (, j, ,]
[j, =, i, +, 1, ;, j, <, rows, ;, j, ++, ), {, b, ., setEntry, (, j, ,]
[1, ;, j, <, rows, ;, j, ++, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (]
[<, rows, ;, j, ++, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -]
[<, rows, ;, j, ++, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -]
[;, j, ++, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -, bi, *]
[;, j, ++, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -, bi, *]
[{, b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -, bi, *, rm, ., getEntry, (]
[., setEntry, (, j, ,, b, ., getEntry, (, j, ), -, bi, *, rm, ., getEntry, (, j, ,]
[public, static, void, solveUpperTriangularSystem, (, RealMatrix, rm, ,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (]
[public, static, void, solveUpperTriangularSystem, (, RealMatrix, rm, ,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (]
[public, static, void, solveUpperTriangularSystem, (, RealMatrix, rm, ,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (]
[static, void, solveUpperTriangularSystem, (, RealMatrix, rm, ,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (]
[static, void, solveUpperTriangularSystem, (, RealMatrix, rm, ,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (]
[solveUpperTriangularSystem, (, RealMatrix, rm, ,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (, rm, ==]
[rm, ,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (, rm, ==, null, ), ||]
[,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (, rm, ==, null, ), ||, (]
[,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (, rm, ==, null, ), ||, (]
[b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (, rm, ==, null, ), ||, (, b, ==]
[DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (, rm, ==, null, ), ||, (, b, ==, null, ), ||]
[,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (, rm, ==, null, ), ||, (, b, ==, null, ), ||, (]
[,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (, rm, ==, null, ), ||, (, b, ==, null, ), ||, (]
[,, MathArithmeticException, ,, NonSquareMatrixException, {, if, (, (, rm, ==, null, ), ||, (, b, ==, null, ), ||, (]
[(, (, rm, ==, null, ), ||, (, b, ==, null, ), ||, (, rm, ., getRowDimension, (, ), !=]
[(, (, rm, ==, null, ), ||, (, b, ==, null, ), ||, (, rm, ., getRowDimension, (, ), !=]
[==, null, ), ||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw]
[||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (]
[||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (]
[(, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (, (]
[(, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (, (]
[., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (, (, rm, ==]
[), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?]
[b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :]
[b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :]
[), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,]
[), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,]
[{, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,, (]
[{, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,, (]
[new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,, (, b, ==]
[(, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,, (, b, ==, null, ), ?]
[==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,, (, b, ==, null, ), ?, 0, :]
[==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,, (, b, ==, null, ), ?, 0, :]
[), ,, (, b, ==, null, ), ?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (]
[), ,, (, b, ==, null, ), ?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (]
[), ,, (, b, ==, null, ), ?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (]
[), ?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (, rm, ., getColumnDimension, (, ), !=]
[), ?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (, rm, ., getColumnDimension, (, ), !=]
[), ), ;, }, if, (, rm, ., getColumnDimension, (, ), !=, rm, ., getRowDimension, (, ), ), {, throw]
[}, if, (, rm, ., getColumnDimension, (, ), !=, rm, ., getRowDimension, (, ), ), {, throw, new, NonSquareMatrixException, (]
[}, if, (, rm, ., getColumnDimension, (, ), !=, rm, ., getRowDimension, (, ), ), {, throw, new, NonSquareMatrixException, (]
[(, ), !=, rm, ., getRowDimension, (, ), ), {, throw, new, NonSquareMatrixException, (, rm, ., getRowDimension, (, ), ,]
[(, ), !=, rm, ., getRowDimension, (, ), ), {, throw, new, NonSquareMatrixException, (, rm, ., getRowDimension, (, ), ,]
[new, NonSquareMatrixException, (, rm, ., getRowDimension, (, ), ,, rm, ., getColumnDimension, (, ), ), ;, }, int, rows, =]
[new, NonSquareMatrixException, (, rm, ., getRowDimension, (, ), ,, rm, ., getColumnDimension, (, ), ), ;, }, int, rows, =]
[getColumnDimension, (, ), ), ;, }, int, rows, =, rm, ., getRowDimension, (, ), ;, for, (, int, i, =]
[getColumnDimension, (, ), ), ;, }, int, rows, =, rm, ., getRowDimension, (, ), ;, for, (, int, i, =]
[), ), ;, }, int, rows, =, rm, ., getRowDimension, (, ), ;, for, (, int, i, =, rows, -]
[;, }, int, rows, =, rm, ., getRowDimension, (, ), ;, for, (, int, i, =, rows, -, 1, ;]
[;, }, int, rows, =, rm, ., getRowDimension, (, ), ;, for, (, int, i, =, rows, -, 1, ;]
[int, rows, =, rm, ., getRowDimension, (, ), ;, for, (, int, i, =, rows, -, 1, ;, i, >]
[rows, =, rm, ., getRowDimension, (, ), ;, for, (, int, i, =, rows, -, 1, ;, i, >, -]
[rm, ., getRowDimension, (, ), ;, for, (, int, i, =, rows, -, 1, ;, i, >, -, 1, ;]
[rm, ., getRowDimension, (, ), ;, for, (, int, i, =, rows, -, 1, ;, i, >, -, 1, ;]
[(, int, i, =, rows, -, 1, ;, i, >, -, 1, ;, i, --, ), {, double, diag, =]
[(, int, i, =, rows, -, 1, ;, i, >, -, 1, ;, i, --, ), {, double, diag, =]
[rows, -, 1, ;, i, >, -, 1, ;, i, --, ), {, double, diag, =, rm, ., getEntry, (]
[1, ;, i, >, -, 1, ;, i, --, ), {, double, diag, =, rm, ., getEntry, (, i, ,]
[1, ;, i, --, ), {, double, diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if, (]
[1, ;, i, --, ), {, double, diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if, (]
[1, ;, i, --, ), {, double, diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if, (]
[), {, double, diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if, (, FastMath, ., abs, (]
[diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if, (, FastMath, ., abs, (, diag, ), <]
[diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if, (, FastMath, ., abs, (, diag, ), <]
[i, ,, i, ), ;, if, (, FastMath, ., abs, (, diag, ), <, Precision, ., SAFE_MIN, ), {, throw]
[), ;, if, (, FastMath, ., abs, (, diag, ), <, Precision, ., SAFE_MIN, ), {, throw, new, MathArithmeticException, (]
[), ;, if, (, FastMath, ., abs, (, diag, ), <, Precision, ., SAFE_MIN, ), {, throw, new, MathArithmeticException, (]
[), <, Precision, ., SAFE_MIN, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =]
[), <, Precision, ., SAFE_MIN, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =]
[), <, Precision, ., SAFE_MIN, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =]
[SAFE_MIN, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =, b, ., getEntry, (]
[throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =, b, ., getEntry, (, i, ), /]
[MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =, b, ., getEntry, (, i, ), /, diag, ;]
[MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =, b, ., getEntry, (, i, ), /, diag, ;]
[ZERO_DENOMINATOR, ), ;, }, double, bi, =, b, ., getEntry, (, i, ), /, diag, ;, b, ., setEntry, (]
[;, }, double, bi, =, b, ., getEntry, (, i, ), /, diag, ;, b, ., setEntry, (, i, ,]
[(, i, ), /, diag, ;, b, ., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =]
[(, i, ), /, diag, ;, b, ., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =]
[), /, diag, ;, b, ., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =, i, -]
[diag, ;, b, ., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =, i, -, 1, ;]
[diag, ;, b, ., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =, i, -, 1, ;]
[b, ., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =, i, -, 1, ;, j, >]
[., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =, i, -, 1, ;, j, >, -]
[(, i, ,, bi, ), ;, for, (, int, j, =, i, -, 1, ;, j, >, -, 1, ;]
[(, i, ,, bi, ), ;, for, (, int, j, =, i, -, 1, ;, j, >, -, 1, ;]
[), ;, for, (, int, j, =, i, -, 1, ;, j, >, -, 1, ;, j, --, ), {]
[), ;, for, (, int, j, =, i, -, 1, ;, j, >, -, 1, ;, j, --, ), {]
[int, j, =, i, -, 1, ;, j, >, -, 1, ;, j, --, ), {, b, ., setEntry, (]
[=, i, -, 1, ;, j, >, -, 1, ;, j, --, ), {, b, ., setEntry, (, j, ,]
[=, i, -, 1, ;, j, >, -, 1, ;, j, --, ), {, b, ., setEntry, (, j, ,]
[=, i, -, 1, ;, j, >, -, 1, ;, j, --, ), {, b, ., setEntry, (, j, ,]
[;, j, >, -, 1, ;, j, --, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (]
[-, 1, ;, j, --, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -]
[-, 1, ;, j, --, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -]
[;, j, --, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -, bi, *]
[;, j, --, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -, bi, *]
[{, b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -, bi, *, rm, ., getEntry, (]
[., setEntry, (, j, ,, b, ., getEntry, (, j, ), -, bi, *, rm, ., getEntry, (, j, ,]
[;, }, }, }, public, static, RealMatrix, blockInverse, (, RealMatrix, m, ,, int, splitIndex, ), {, final, int, n, =]
[;, }, }, }, public, static, RealMatrix, blockInverse, (, RealMatrix, m, ,, int, splitIndex, ), {, final, int, n, =]
[(, RealMatrix, m, ,, int, splitIndex, ), {, final, int, n, =, m, ., getRowDimension, (, ), ;, if, (]
[(, RealMatrix, m, ,, int, splitIndex, ), {, final, int, n, =, m, ., getRowDimension, (, ), ;, if, (]
[(, RealMatrix, m, ,, int, splitIndex, ), {, final, int, n, =, m, ., getRowDimension, (, ), ;, if, (]
[), {, final, int, n, =, m, ., getRowDimension, (, ), ;, if, (, m, ., getColumnDimension, (, ), !=]
[n, =, m, ., getRowDimension, (, ), ;, if, (, m, ., getColumnDimension, (, ), !=, n, ), {, throw]
[., getRowDimension, (, ), ;, if, (, m, ., getColumnDimension, (, ), !=, n, ), {, throw, new, NonSquareMatrixException, (]
[., getRowDimension, (, ), ;, if, (, m, ., getColumnDimension, (, ), !=, n, ), {, throw, new, NonSquareMatrixException, (]
[(, m, ., getColumnDimension, (, ), !=, n, ), {, throw, new, NonSquareMatrixException, (, m, ., getRowDimension, (, ), ,]
[(, m, ., getColumnDimension, (, ), !=, n, ), {, throw, new, NonSquareMatrixException, (, m, ., getRowDimension, (, ), ,]
[NonSquareMatrixException, (, m, ., getRowDimension, (, ), ,, m, ., getColumnDimension, (, ), ), ;, }, final, int, splitIndex1, =]
[NonSquareMatrixException, (, m, ., getRowDimension, (, ), ,, m, ., getColumnDimension, (, ), ), ;, }, final, int, splitIndex1, =]
[m, ., getRowDimension, (, ), ,, m, ., getColumnDimension, (, ), ), ;, }, final, int, splitIndex1, =, splitIndex, +]
[m, ., getColumnDimension, (, ), ), ;, }, final, int, splitIndex1, =, splitIndex, +, 1, ;, final, RealMatrix, a, =]
[m, ., getColumnDimension, (, ), ), ;, }, final, int, splitIndex1, =, splitIndex, +, 1, ;, final, RealMatrix, a, =]
[), ), ;, }, final, int, splitIndex1, =, splitIndex, +, 1, ;, final, RealMatrix, a, =, m, ., getSubMatrix, (]
[;, }, final, int, splitIndex1, =, splitIndex, +, 1, ;, final, RealMatrix, a, =, m, ., getSubMatrix, (, 0, ,]
[final, int, splitIndex1, =, splitIndex, +, 1, ;, final, RealMatrix, a, =, m, ., getSubMatrix, (, 0, ,, splitIndex, ,]
[splitIndex1, =, splitIndex, +, 1, ;, final, RealMatrix, a, =, m, ., getSubMatrix, (, 0, ,, splitIndex, ,, 0, ,]
[RealMatrix, a, =, m, ., getSubMatrix, (, 0, ,, splitIndex, ,, 0, ,, splitIndex, ), ;, final, RealMatrix, b, =]
[RealMatrix, a, =, m, ., getSubMatrix, (, 0, ,, splitIndex, ,, 0, ,, splitIndex, ), ;, final, RealMatrix, b, =]
[., getSubMatrix, (, 0, ,, splitIndex, ,, 0, ,, splitIndex, ), ;, final, RealMatrix, b, =, m, ., getSubMatrix, (]
[(, 0, ,, splitIndex, ,, 0, ,, splitIndex, ), ;, final, RealMatrix, b, =, m, ., getSubMatrix, (, 0, ,]
[,, splitIndex, ,, 0, ,, splitIndex, ), ;, final, RealMatrix, b, =, m, ., getSubMatrix, (, 0, ,, splitIndex, ,]
[,, 0, ,, splitIndex, ), ;, final, RealMatrix, b, =, m, ., getSubMatrix, (, 0, ,, splitIndex, ,, splitIndex1, ,]
[,, 0, ,, splitIndex, ), ;, final, RealMatrix, b, =, m, ., getSubMatrix, (, 0, ,, splitIndex, ,, splitIndex1, ,]
[,, splitIndex, ), ;, final, RealMatrix, b, =, m, ., getSubMatrix, (, 0, ,, splitIndex, ,, splitIndex1, ,, n, -]
[=, m, ., getSubMatrix, (, 0, ,, splitIndex, ,, splitIndex1, ,, n, -, 1, ), ;, final, RealMatrix, c, =]
[=, m, ., getSubMatrix, (, 0, ,, splitIndex, ,, splitIndex1, ,, n, -, 1, ), ;, final, RealMatrix, c, =]
[(, 0, ,, splitIndex, ,, splitIndex1, ,, n, -, 1, ), ;, final, RealMatrix, c, =, m, ., getSubMatrix, (]
[,, splitIndex, ,, splitIndex1, ,, n, -, 1, ), ;, final, RealMatrix, c, =, m, ., getSubMatrix, (, splitIndex1, ,]
[,, splitIndex, ,, splitIndex1, ,, n, -, 1, ), ;, final, RealMatrix, c, =, m, ., getSubMatrix, (, splitIndex1, ,]
[,, splitIndex1, ,, n, -, 1, ), ;, final, RealMatrix, c, =, m, ., getSubMatrix, (, splitIndex1, ,, n, -]
[,, n, -, 1, ), ;, final, RealMatrix, c, =, m, ., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,]
[-, 1, ), ;, final, RealMatrix, c, =, m, ., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,, 0, ,]
[=, m, ., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,, 0, ,, splitIndex, ), ;, final, RealMatrix, d, =]
[=, m, ., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,, 0, ,, splitIndex, ), ;, final, RealMatrix, d, =]
[(, splitIndex1, ,, n, -, 1, ,, 0, ,, splitIndex, ), ;, final, RealMatrix, d, =, m, ., getSubMatrix, (]
[,, n, -, 1, ,, 0, ,, splitIndex, ), ;, final, RealMatrix, d, =, m, ., getSubMatrix, (, splitIndex1, ,]
[,, n, -, 1, ,, 0, ,, splitIndex, ), ;, final, RealMatrix, d, =, m, ., getSubMatrix, (, splitIndex1, ,]
[-, 1, ,, 0, ,, splitIndex, ), ;, final, RealMatrix, d, =, m, ., getSubMatrix, (, splitIndex1, ,, n, -]
[,, 0, ,, splitIndex, ), ;, final, RealMatrix, d, =, m, ., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,]
[,, splitIndex, ), ;, final, RealMatrix, d, =, m, ., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,, splitIndex1, ,]
[,, splitIndex, ), ;, final, RealMatrix, d, =, m, ., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,, splitIndex1, ,]
[), ;, final, RealMatrix, d, =, m, ., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,, splitIndex1, ,, n, -]
[., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,, splitIndex1, ,, n, -, 1, ), ;, final, SingularValueDecomposition, aDec, =]
[splitIndex1, ,, n, -, 1, ,, splitIndex1, ,, n, -, 1, ), ;, final, SingularValueDecomposition, aDec, =, new, SingularValueDecomposition, (]
[,, n, -, 1, ), ;, final, SingularValueDecomposition, aDec, =, new, SingularValueDecomposition, (, a, ), ;, final, DecompositionSolver, aSolver, =]
[,, n, -, 1, ), ;, final, SingularValueDecomposition, aDec, =, new, SingularValueDecomposition, (, a, ), ;, final, DecompositionSolver, aSolver, =]
[aDec, =, new, SingularValueDecomposition, (, a, ), ;, final, DecompositionSolver, aSolver, =, aDec, ., getSolver, (, ), ;, if, (]
[=, new, SingularValueDecomposition, (, a, ), ;, final, DecompositionSolver, aSolver, =, aDec, ., getSolver, (, ), ;, if, (, !]
[=, new, SingularValueDecomposition, (, a, ), ;, final, DecompositionSolver, aSolver, =, aDec, ., getSolver, (, ), ;, if, (, !]
[DecompositionSolver, aSolver, =, aDec, ., getSolver, (, ), ;, if, (, !, aSolver, ., isNonSingular, (, ), ), {, throw]
[(, !, aSolver, ., isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix, aInv, =]
[(, !, aSolver, ., isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix, aInv, =]
[new, SingularMatrixException, (, ), ;, }, final, RealMatrix, aInv, =, aSolver, ., getInverse, (, ), ;, final, SingularValueDecomposition, dDec, =]
[), ;, }, final, RealMatrix, aInv, =, aSolver, ., getInverse, (, ), ;, final, SingularValueDecomposition, dDec, =, new, SingularValueDecomposition, (]
[aSolver, ., getInverse, (, ), ;, final, SingularValueDecomposition, dDec, =, new, SingularValueDecomposition, (, d, ), ;, final, DecompositionSolver, dSolver, =]
[aSolver, ., getInverse, (, ), ;, final, SingularValueDecomposition, dDec, =, new, SingularValueDecomposition, (, d, ), ;, final, DecompositionSolver, dSolver, =]
[dDec, =, new, SingularValueDecomposition, (, d, ), ;, final, DecompositionSolver, dSolver, =, dDec, ., getSolver, (, ), ;, if, (]
[=, new, SingularValueDecomposition, (, d, ), ;, final, DecompositionSolver, dSolver, =, dDec, ., getSolver, (, ), ;, if, (, !]
[=, new, SingularValueDecomposition, (, d, ), ;, final, DecompositionSolver, dSolver, =, dDec, ., getSolver, (, ), ;, if, (, !]
[DecompositionSolver, dSolver, =, dDec, ., getSolver, (, ), ;, if, (, !, dSolver, ., isNonSingular, (, ), ), {, throw]
[(, !, dSolver, ., isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix, dInv, =]
[(, !, dSolver, ., isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix, dInv, =]
[new, SingularMatrixException, (, ), ;, }, final, RealMatrix, dInv, =, dSolver, ., getInverse, (, ), ;, final, RealMatrix, tmp1, =]
[new, SingularMatrixException, (, ), ;, }, final, RealMatrix, dInv, =, dSolver, ., getInverse, (, ), ;, final, RealMatrix, tmp1, =]
[;, }, final, RealMatrix, dInv, =, dSolver, ., getInverse, (, ), ;, final, RealMatrix, tmp1, =, a, ., subtract, (]
[;, }, final, RealMatrix, dInv, =, dSolver, ., getInverse, (, ), ;, final, RealMatrix, tmp1, =, a, ., subtract, (]
[;, }, final, RealMatrix, dInv, =, dSolver, ., getInverse, (, ), ;, final, RealMatrix, tmp1, =, a, ., subtract, (]
[dInv, =, dSolver, ., getInverse, (, ), ;, final, RealMatrix, tmp1, =, a, ., subtract, (, b, ., multiply, (]
[(, ), ;, final, RealMatrix, tmp1, =, a, ., subtract, (, b, ., multiply, (, dInv, ), ., multiply, (]
[., subtract, (, b, ., multiply, (, dInv, ), ., multiply, (, c, ), ), ;, final, SingularValueDecomposition, tmp1Dec, =]
[b, ., multiply, (, dInv, ), ., multiply, (, c, ), ), ;, final, SingularValueDecomposition, tmp1Dec, =, new, SingularValueDecomposition, (]
[multiply, (, c, ), ), ;, final, SingularValueDecomposition, tmp1Dec, =, new, SingularValueDecomposition, (, tmp1, ), ;, final, DecompositionSolver, tmp1Solver, =]
[multiply, (, c, ), ), ;, final, SingularValueDecomposition, tmp1Dec, =, new, SingularValueDecomposition, (, tmp1, ), ;, final, DecompositionSolver, tmp1Solver, =]
[tmp1Dec, =, new, SingularValueDecomposition, (, tmp1, ), ;, final, DecompositionSolver, tmp1Solver, =, tmp1Dec, ., getSolver, (, ), ;, if, (]
[=, new, SingularValueDecomposition, (, tmp1, ), ;, final, DecompositionSolver, tmp1Solver, =, tmp1Dec, ., getSolver, (, ), ;, if, (, !]
[=, new, SingularValueDecomposition, (, tmp1, ), ;, final, DecompositionSolver, tmp1Solver, =, tmp1Dec, ., getSolver, (, ), ;, if, (, !]
[DecompositionSolver, tmp1Solver, =, tmp1Dec, ., getSolver, (, ), ;, if, (, !, tmp1Solver, ., isNonSingular, (, ), ), {, throw]
[(, !, tmp1Solver, ., isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix, result00, =]
[(, !, tmp1Solver, ., isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix, result00, =]
[new, SingularMatrixException, (, ), ;, }, final, RealMatrix, result00, =, tmp1Solver, ., getInverse, (, ), ;, final, RealMatrix, tmp2, =]
[new, SingularMatrixException, (, ), ;, }, final, RealMatrix, result00, =, tmp1Solver, ., getInverse, (, ), ;, final, RealMatrix, tmp2, =]
[;, }, final, RealMatrix, result00, =, tmp1Solver, ., getInverse, (, ), ;, final, RealMatrix, tmp2, =, d, ., subtract, (]
[;, }, final, RealMatrix, result00, =, tmp1Solver, ., getInverse, (, ), ;, final, RealMatrix, tmp2, =, d, ., subtract, (]
[;, }, final, RealMatrix, result00, =, tmp1Solver, ., getInverse, (, ), ;, final, RealMatrix, tmp2, =, d, ., subtract, (]
[result00, =, tmp1Solver, ., getInverse, (, ), ;, final, RealMatrix, tmp2, =, d, ., subtract, (, c, ., multiply, (]
[(, ), ;, final, RealMatrix, tmp2, =, d, ., subtract, (, c, ., multiply, (, aInv, ), ., multiply, (]
[., subtract, (, c, ., multiply, (, aInv, ), ., multiply, (, b, ), ), ;, final, SingularValueDecomposition, tmp2Dec, =]
[c, ., multiply, (, aInv, ), ., multiply, (, b, ), ), ;, final, SingularValueDecomposition, tmp2Dec, =, new, SingularValueDecomposition, (]
[multiply, (, b, ), ), ;, final, SingularValueDecomposition, tmp2Dec, =, new, SingularValueDecomposition, (, tmp2, ), ;, final, DecompositionSolver, tmp2Solver, =]
[multiply, (, b, ), ), ;, final, SingularValueDecomposition, tmp2Dec, =, new, SingularValueDecomposition, (, tmp2, ), ;, final, DecompositionSolver, tmp2Solver, =]
[tmp2Dec, =, new, SingularValueDecomposition, (, tmp2, ), ;, final, DecompositionSolver, tmp2Solver, =, tmp2Dec, ., getSolver, (, ), ;, if, (]
[=, new, SingularValueDecomposition, (, tmp2, ), ;, final, DecompositionSolver, tmp2Solver, =, tmp2Dec, ., getSolver, (, ), ;, if, (, !]
[=, new, SingularValueDecomposition, (, tmp2, ), ;, final, DecompositionSolver, tmp2Solver, =, tmp2Dec, ., getSolver, (, ), ;, if, (, !]
[DecompositionSolver, tmp2Solver, =, tmp2Dec, ., getSolver, (, ), ;, if, (, !, tmp2Solver, ., isNonSingular, (, ), ), {, throw]
[(, !, tmp2Solver, ., isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix, result11, =]
[(, !, tmp2Solver, ., isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix, result11, =]
[new, SingularMatrixException, (, ), ;, }, final, RealMatrix, result11, =, tmp2Solver, ., getInverse, (, ), ;, final, RealMatrix, result01, =]
[new, SingularMatrixException, (, ), ;, }, final, RealMatrix, result11, =, tmp2Solver, ., getInverse, (, ), ;, final, RealMatrix, result01, =]
[new, SingularMatrixException, (, ), ;, }, final, RealMatrix, result11, =, tmp2Solver, ., getInverse, (, ), ;, final, RealMatrix, result01, =]
[new, SingularMatrixException, (, ), ;, }, final, RealMatrix, result11, =, tmp2Solver, ., getInverse, (, ), ;, final, RealMatrix, result01, =]
[;, }, final, RealMatrix, result11, =, tmp2Solver, ., getInverse, (, ), ;, final, RealMatrix, result01, =, aInv, ., multiply, (]
[=, tmp2Solver, ., getInverse, (, ), ;, final, RealMatrix, result01, =, aInv, ., multiply, (, b, ), ., multiply, (]
[), ;, final, RealMatrix, result01, =, aInv, ., multiply, (, b, ), ., multiply, (, result11, ), ., scalarMultiply, (]
[;, final, RealMatrix, result01, =, aInv, ., multiply, (, b, ), ., multiply, (, result11, ), ., scalarMultiply, (, -]
[multiply, (, b, ), ., multiply, (, result11, ), ., scalarMultiply, (, -, 1, ), ;, final, RealMatrix, result10, =]
[multiply, (, b, ), ., multiply, (, result11, ), ., scalarMultiply, (, -, 1, ), ;, final, RealMatrix, result10, =]
[multiply, (, b, ), ., multiply, (, result11, ), ., scalarMultiply, (, -, 1, ), ;, final, RealMatrix, result10, =]
[multiply, (, b, ), ., multiply, (, result11, ), ., scalarMultiply, (, -, 1, ), ;, final, RealMatrix, result10, =]
[., multiply, (, result11, ), ., scalarMultiply, (, -, 1, ), ;, final, RealMatrix, result10, =, dInv, ., multiply, (]
[., scalarMultiply, (, -, 1, ), ;, final, RealMatrix, result10, =, dInv, ., multiply, (, c, ), ., multiply, (]
[), ;, final, RealMatrix, result10, =, dInv, ., multiply, (, c, ), ., multiply, (, result00, ), ., scalarMultiply, (]
[;, final, RealMatrix, result10, =, dInv, ., multiply, (, c, ), ., multiply, (, result00, ), ., scalarMultiply, (, -]
[multiply, (, c, ), ., multiply, (, result00, ), ., scalarMultiply, (, -, 1, ), ;, final, RealMatrix, result, =]
[), ., multiply, (, result00, ), ., scalarMultiply, (, -, 1, ), ;, final, RealMatrix, result, =, new, Array2DRowRealMatrix, (]
[multiply, (, result00, ), ., scalarMultiply, (, -, 1, ), ;, final, RealMatrix, result, =, new, Array2DRowRealMatrix, (, n, ,]
[), ., scalarMultiply, (, -, 1, ), ;, final, RealMatrix, result, =, new, Array2DRowRealMatrix, (, n, ,, n, ), ;]
[), ., scalarMultiply, (, -, 1, ), ;, final, RealMatrix, result, =, new, Array2DRowRealMatrix, (, n, ,, n, ), ;]
[-, 1, ), ;, final, RealMatrix, result, =, new, Array2DRowRealMatrix, (, n, ,, n, ), ;, result, ., setSubMatrix, (]
[-, 1, ), ;, final, RealMatrix, result, =, new, Array2DRowRealMatrix, (, n, ,, n, ), ;, result, ., setSubMatrix, (]
[result, =, new, Array2DRowRealMatrix, (, n, ,, n, ), ;, result, ., setSubMatrix, (, result00, ., getData, (, ), ,]
[new, Array2DRowRealMatrix, (, n, ,, n, ), ;, result, ., setSubMatrix, (, result00, ., getData, (, ), ,, 0, ,]
[n, ,, n, ), ;, result, ., setSubMatrix, (, result00, ., getData, (, ), ,, 0, ,, 0, ), ;]
[n, ,, n, ), ;, result, ., setSubMatrix, (, result00, ., getData, (, ), ,, 0, ,, 0, ), ;]
[;, result, ., setSubMatrix, (, result00, ., getData, (, ), ,, 0, ,, 0, ), ;, result, ., setSubMatrix, (]
[;, result, ., setSubMatrix, (, result00, ., getData, (, ), ,, 0, ,, 0, ), ;, result, ., setSubMatrix, (]
[., getData, (, ), ,, 0, ,, 0, ), ;, result, ., setSubMatrix, (, result01, ., getData, (, ), ,]
[(, ), ,, 0, ,, 0, ), ;, result, ., setSubMatrix, (, result01, ., getData, (, ), ,, 0, ,]
[0, ,, 0, ), ;, result, ., setSubMatrix, (, result01, ., getData, (, ), ,, 0, ,, splitIndex1, ), ;]
[0, ,, 0, ), ;, result, ., setSubMatrix, (, result01, ., getData, (, ), ,, 0, ,, splitIndex1, ), ;]
[;, result, ., setSubMatrix, (, result01, ., getData, (, ), ,, 0, ,, splitIndex1, ), ;, result, ., setSubMatrix, (]
[;, result, ., setSubMatrix, (, result01, ., getData, (, ), ,, 0, ,, splitIndex1, ), ;, result, ., setSubMatrix, (]
[., getData, (, ), ,, 0, ,, splitIndex1, ), ;, result, ., setSubMatrix, (, result10, ., getData, (, ), ,]
[(, ), ,, 0, ,, splitIndex1, ), ;, result, ., setSubMatrix, (, result10, ., getData, (, ), ,, splitIndex1, ,]
[0, ,, splitIndex1, ), ;, result, ., setSubMatrix, (, result10, ., getData, (, ), ,, splitIndex1, ,, 0, ), ;]
[0, ,, splitIndex1, ), ;, result, ., setSubMatrix, (, result10, ., getData, (, ), ,, splitIndex1, ,, 0, ), ;]
[;, result, ., setSubMatrix, (, result10, ., getData, (, ), ,, splitIndex1, ,, 0, ), ;, result, ., setSubMatrix, (]
[;, result, ., setSubMatrix, (, result10, ., getData, (, ), ,, splitIndex1, ,, 0, ), ;, result, ., setSubMatrix, (]
[., getData, (, ), ,, splitIndex1, ,, 0, ), ;, result, ., setSubMatrix, (, result11, ., getData, (, ), ,]
[(, ), ,, splitIndex1, ,, 0, ), ;, result, ., setSubMatrix, (, result11, ., getData, (, ), ,, splitIndex1, ,]
[,, 0, ), ;, result, ., setSubMatrix, (, result11, ., getData, (, ), ,, splitIndex1, ,, splitIndex1, ), ;, return]
