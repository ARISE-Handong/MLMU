[java, ., util, ., *, ;, public, abstract, class, GenericMetadataSupport, {, protected, Map, <, TypeVariable, ,, Type, >, contextualActualTypeParameters, =]
[new, HashMap, <, TypeVariable, ,, Type, >, (, ), ;, protected, void, registerTypeVariablesOn, (, Type, classType, ), {, if, (]
[HashMap, <, TypeVariable, ,, Type, >, (, ), ;, protected, void, registerTypeVariablesOn, (, Type, classType, ), {, if, (, !]
[<, TypeVariable, ,, Type, >, (, ), ;, protected, void, registerTypeVariablesOn, (, Type, classType, ), {, if, (, !, (]
[<, TypeVariable, ,, Type, >, (, ), ;, protected, void, registerTypeVariablesOn, (, Type, classType, ), {, if, (, !, (]
[Type, classType, ), {, if, (, !, (, classType, instanceof, ParameterizedType, ), ), {, return, ;, }, ParameterizedType, parameterizedType, =]
[{, if, (, !, (, classType, instanceof, ParameterizedType, ), ), {, return, ;, }, ParameterizedType, parameterizedType, =, (, ParameterizedType, )]
[ParameterizedType, ), ), {, return, ;, }, ParameterizedType, parameterizedType, =, (, ParameterizedType, ), classType, ;, TypeVariable, [, ], typeParameters, =]
[ParameterizedType, ), ), {, return, ;, }, ParameterizedType, parameterizedType, =, (, ParameterizedType, ), classType, ;, TypeVariable, [, ], typeParameters, =]
[), ), {, return, ;, }, ParameterizedType, parameterizedType, =, (, ParameterizedType, ), classType, ;, TypeVariable, [, ], typeParameters, =, (]
[ParameterizedType, parameterizedType, =, (, ParameterizedType, ), classType, ;, TypeVariable, [, ], typeParameters, =, (, (, Class, <, ?, >, )]
[ParameterizedType, parameterizedType, =, (, ParameterizedType, ), classType, ;, TypeVariable, [, ], typeParameters, =, (, (, Class, <, ?, >, )]
[<, ?, >, ), parameterizedType, ., getRawType, (, ), ), ., getTypeParameters, (, ), ;, Type, [, ], actualTypeArguments, =]
[<, ?, >, ), parameterizedType, ., getRawType, (, ), ), ., getTypeParameters, (, ), ;, Type, [, ], actualTypeArguments, =]
[getTypeParameters, (, ), ;, Type, [, ], actualTypeArguments, =, parameterizedType, ., getActualTypeArguments, (, ), ;, for, (, int, i, =]
[), ;, Type, [, ], actualTypeArguments, =, parameterizedType, ., getActualTypeArguments, (, ), ;, for, (, int, i, =, 0, ;]
[), ;, Type, [, ], actualTypeArguments, =, parameterizedType, ., getActualTypeArguments, (, ), ;, for, (, int, i, =, 0, ;]
[Type, [, ], actualTypeArguments, =, parameterizedType, ., getActualTypeArguments, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[Type, [, ], actualTypeArguments, =, parameterizedType, ., getActualTypeArguments, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, parameterizedType, ., getActualTypeArguments, (, ), ;, for, (, int, i, =, 0, ;, i, <, actualTypeArguments, ., length, ;]
[=, parameterizedType, ., getActualTypeArguments, (, ), ;, for, (, int, i, =, 0, ;, i, <, actualTypeArguments, ., length, ;]
[for, (, int, i, =, 0, ;, i, <, actualTypeArguments, ., length, ;, i, ++, ), {, TypeVariable, typeParameter, =]
[for, (, int, i, =, 0, ;, i, <, actualTypeArguments, ., length, ;, i, ++, ), {, TypeVariable, typeParameter, =]
[int, i, =, 0, ;, i, <, actualTypeArguments, ., length, ;, i, ++, ), {, TypeVariable, typeParameter, =, typeParameters, []
[<, actualTypeArguments, ., length, ;, i, ++, ), {, TypeVariable, typeParameter, =, typeParameters, [, i, ], ;, Type, actualTypeArgument, =]
[<, actualTypeArguments, ., length, ;, i, ++, ), {, TypeVariable, typeParameter, =, typeParameters, [, i, ], ;, Type, actualTypeArgument, =]
[., length, ;, i, ++, ), {, TypeVariable, typeParameter, =, typeParameters, [, i, ], ;, Type, actualTypeArgument, =, actualTypeArguments, []
[), {, TypeVariable, typeParameter, =, typeParameters, [, i, ], ;, Type, actualTypeArgument, =, actualTypeArguments, [, i, ], ;, if, (]
[), {, TypeVariable, typeParameter, =, typeParameters, [, i, ], ;, Type, actualTypeArgument, =, actualTypeArguments, [, i, ], ;, if, (]
[typeParameters, [, i, ], ;, Type, actualTypeArgument, =, actualTypeArguments, [, i, ], ;, if, (, actualTypeArgument, instanceof, WildcardType, ), {]
[typeParameters, [, i, ], ;, Type, actualTypeArgument, =, actualTypeArguments, [, i, ], ;, if, (, actualTypeArgument, instanceof, WildcardType, ), {]
[;, Type, actualTypeArgument, =, actualTypeArguments, [, i, ], ;, if, (, actualTypeArgument, instanceof, WildcardType, ), {, contextualActualTypeParameters, ., put, (]
[actualTypeArgument, =, actualTypeArguments, [, i, ], ;, if, (, actualTypeArgument, instanceof, WildcardType, ), {, contextualActualTypeParameters, ., put, (, typeParameter, ,]
[actualTypeArguments, [, i, ], ;, if, (, actualTypeArgument, instanceof, WildcardType, ), {, contextualActualTypeParameters, ., put, (, typeParameter, ,, boundsOf, (]
[], ;, if, (, actualTypeArgument, instanceof, WildcardType, ), {, contextualActualTypeParameters, ., put, (, typeParameter, ,, boundsOf, (, (, WildcardType, )]
[{, contextualActualTypeParameters, ., put, (, typeParameter, ,, boundsOf, (, (, WildcardType, ), actualTypeArgument, ), ), ;, }, else, if, (]
[{, contextualActualTypeParameters, ., put, (, typeParameter, ,, boundsOf, (, (, WildcardType, ), actualTypeArgument, ), ), ;, }, else, if, (]
[., put, (, typeParameter, ,, boundsOf, (, (, WildcardType, ), actualTypeArgument, ), ), ;, }, else, if, (, typeParameter, !=]
[typeParameter, ,, boundsOf, (, (, WildcardType, ), actualTypeArgument, ), ), ;, }, else, if, (, typeParameter, !=, actualTypeArgument, ), {]
[typeParameter, ,, boundsOf, (, (, WildcardType, ), actualTypeArgument, ), ), ;, }, else, if, (, typeParameter, !=, actualTypeArgument, ), {]
[(, WildcardType, ), actualTypeArgument, ), ), ;, }, else, if, (, typeParameter, !=, actualTypeArgument, ), {, contextualActualTypeParameters, ., put, (]
[), actualTypeArgument, ), ), ;, }, else, if, (, typeParameter, !=, actualTypeArgument, ), {, contextualActualTypeParameters, ., put, (, typeParameter, ,]
[), ;, }, }, }, protected, void, registerTypeParametersOn, (, TypeVariable, [, ], typeParameters, ), {, for, (, TypeVariable, type, :]
[}, }, protected, void, registerTypeParametersOn, (, TypeVariable, [, ], typeParameters, ), {, for, (, TypeVariable, type, :, typeParameters, ), {]
[protected, void, registerTypeParametersOn, (, TypeVariable, [, ], typeParameters, ), {, for, (, TypeVariable, type, :, typeParameters, ), {, registerTypeVariableIfNotPresent, (]
[typeParameters, ), {, registerTypeVariableIfNotPresent, (, type, ), ;, }, }, private, void, registerTypeVariableIfNotPresent, (, TypeVariable, typeVariable, ), {, if, (]
[), {, registerTypeVariableIfNotPresent, (, type, ), ;, }, }, private, void, registerTypeVariableIfNotPresent, (, TypeVariable, typeVariable, ), {, if, (, !]
[), {, registerTypeVariableIfNotPresent, (, type, ), ;, }, }, private, void, registerTypeVariableIfNotPresent, (, TypeVariable, typeVariable, ), {, if, (, !]
[type, ), ;, }, }, private, void, registerTypeVariableIfNotPresent, (, TypeVariable, typeVariable, ), {, if, (, !, contextualActualTypeParameters, ., containsKey, (]
[}, private, void, registerTypeVariableIfNotPresent, (, TypeVariable, typeVariable, ), {, if, (, !, contextualActualTypeParameters, ., containsKey, (, typeVariable, ), ), {]
[}, private, void, registerTypeVariableIfNotPresent, (, TypeVariable, typeVariable, ), {, if, (, !, contextualActualTypeParameters, ., containsKey, (, typeVariable, ), ), {]
[(, TypeVariable, typeVariable, ), {, if, (, !, contextualActualTypeParameters, ., containsKey, (, typeVariable, ), ), {, contextualActualTypeParameters, ., put, (]
[typeVariable, ), {, if, (, !, contextualActualTypeParameters, ., containsKey, (, typeVariable, ), ), {, contextualActualTypeParameters, ., put, (, typeVariable, ,]
[{, if, (, !, contextualActualTypeParameters, ., containsKey, (, typeVariable, ), ), {, contextualActualTypeParameters, ., put, (, typeVariable, ,, boundsOf, (]
[typeVariable, ,, boundsOf, (, typeVariable, ), ), ;, }, }, private, BoundedType, boundsOf, (, TypeVariable, typeParameter, ), {, if, (]
[typeVariable, ,, boundsOf, (, typeVariable, ), ), ;, }, }, private, BoundedType, boundsOf, (, TypeVariable, typeParameter, ), {, if, (]
[typeVariable, ,, boundsOf, (, typeVariable, ), ), ;, }, }, private, BoundedType, boundsOf, (, TypeVariable, typeParameter, ), {, if, (]
[typeVariable, ,, boundsOf, (, typeVariable, ), ), ;, }, }, private, BoundedType, boundsOf, (, TypeVariable, typeParameter, ), {, if, (]
[), ;, }, }, private, BoundedType, boundsOf, (, TypeVariable, typeParameter, ), {, if, (, typeParameter, ., getBounds, (, ), []
[(, TypeVariable, typeParameter, ), {, if, (, typeParameter, ., getBounds, (, ), [, 0, ], instanceof, TypeVariable, ), {, return]
[typeParameter, ), {, if, (, typeParameter, ., getBounds, (, ), [, 0, ], instanceof, TypeVariable, ), {, return, boundsOf, (]
[if, (, typeParameter, ., getBounds, (, ), [, 0, ], instanceof, TypeVariable, ), {, return, boundsOf, (, (, TypeVariable, )]
[if, (, typeParameter, ., getBounds, (, ), [, 0, ], instanceof, TypeVariable, ), {, return, boundsOf, (, (, TypeVariable, )]
[if, (, typeParameter, ., getBounds, (, ), [, 0, ], instanceof, TypeVariable, ), {, return, boundsOf, (, (, TypeVariable, )]
[), [, 0, ], instanceof, TypeVariable, ), {, return, boundsOf, (, (, TypeVariable, ), typeParameter, ., getBounds, (, ), []
[), {, return, boundsOf, (, (, TypeVariable, ), typeParameter, ., getBounds, (, ), [, 0, ], ), ;, }, return]
[boundsOf, (, (, TypeVariable, ), typeParameter, ., getBounds, (, ), [, 0, ], ), ;, }, return, new, TypeVarBoundedType, (]
[}, return, new, TypeVarBoundedType, (, typeParameter, ), ;, }, private, BoundedType, boundsOf, (, WildcardType, wildCard, ), {, WildCardBoundedType, wildCardBoundedType, =]
[TypeVarBoundedType, (, typeParameter, ), ;, }, private, BoundedType, boundsOf, (, WildcardType, wildCard, ), {, WildCardBoundedType, wildCardBoundedType, =, new, WildCardBoundedType, (]
[}, private, BoundedType, boundsOf, (, WildcardType, wildCard, ), {, WildCardBoundedType, wildCardBoundedType, =, new, WildCardBoundedType, (, wildCard, ), ;, if, (]
[}, private, BoundedType, boundsOf, (, WildcardType, wildCard, ), {, WildCardBoundedType, wildCardBoundedType, =, new, WildCardBoundedType, (, wildCard, ), ;, if, (]
[}, private, BoundedType, boundsOf, (, WildcardType, wildCard, ), {, WildCardBoundedType, wildCardBoundedType, =, new, WildCardBoundedType, (, wildCard, ), ;, if, (]
[wildCardBoundedType, =, new, WildCardBoundedType, (, wildCard, ), ;, if, (, wildCardBoundedType, ., firstBound, (, ), instanceof, TypeVariable, ), {, return]
[new, WildCardBoundedType, (, wildCard, ), ;, if, (, wildCardBoundedType, ., firstBound, (, ), instanceof, TypeVariable, ), {, return, boundsOf, (]
[wildCard, ), ;, if, (, wildCardBoundedType, ., firstBound, (, ), instanceof, TypeVariable, ), {, return, boundsOf, (, (, TypeVariable, )]
[wildCard, ), ;, if, (, wildCardBoundedType, ., firstBound, (, ), instanceof, TypeVariable, ), {, return, boundsOf, (, (, TypeVariable, )]
[), instanceof, TypeVariable, ), {, return, boundsOf, (, (, TypeVariable, ), wildCardBoundedType, ., firstBound, (, ), ), ;, }, return]
[public, abstract, Class, <, ?, >, rawType, (, ), ;, public, List, <, Type, >, extraInterfaces, (, ), {, return]
[public, abstract, Class, <, ?, >, rawType, (, ), ;, public, List, <, Type, >, extraInterfaces, (, ), {, return]
[return, Collections, ., emptyList, (, ), ;, }, public, Class, <, ?, >, [, ], rawExtraInterfaces, (, ), {, return]
[emptyList, (, ), ;, }, public, Class, <, ?, >, [, ], rawExtraInterfaces, (, ), {, return, new, Class, []
[], rawExtraInterfaces, (, ), {, return, new, Class, [, 0, ], ;, }, public, boolean, hasRawExtraInterfaces, (, ), {, return]
[], rawExtraInterfaces, (, ), {, return, new, Class, [, 0, ], ;, }, public, boolean, hasRawExtraInterfaces, (, ), {, return]
[], rawExtraInterfaces, (, ), {, return, new, Class, [, 0, ], ;, }, public, boolean, hasRawExtraInterfaces, (, ), {, return]
[new, Class, [, 0, ], ;, }, public, boolean, hasRawExtraInterfaces, (, ), {, return, rawExtraInterfaces, (, ), ., length, >]
[>, 0, ;, }, public, Map, <, TypeVariable, ,, Type, >, actualTypeArguments, (, ), {, TypeVariable, [, ], typeParameters, =]
[>, 0, ;, }, public, Map, <, TypeVariable, ,, Type, >, actualTypeArguments, (, ), {, TypeVariable, [, ], typeParameters, =]
[[, ], typeParameters, =, rawType, (, ), ., getTypeParameters, (, ), ;, LinkedHashMap, <, TypeVariable, ,, Type, >, actualTypeArguments, =]
[,, Type, >, actualTypeArguments, =, new, LinkedHashMap, <, TypeVariable, ,, Type, >, (, ), ;, for, (, TypeVariable, typeParameter, :]
[LinkedHashMap, <, TypeVariable, ,, Type, >, (, ), ;, for, (, TypeVariable, typeParameter, :, typeParameters, ), {, Type, actualType, =]
[TypeVariable, ,, Type, >, (, ), ;, for, (, TypeVariable, typeParameter, :, typeParameters, ), {, Type, actualType, =, getActualTypeArgumentFor, (]
[>, (, ), ;, for, (, TypeVariable, typeParameter, :, typeParameters, ), {, Type, actualType, =, getActualTypeArgumentFor, (, typeParameter, ), ;]
[>, (, ), ;, for, (, TypeVariable, typeParameter, :, typeParameters, ), {, Type, actualType, =, getActualTypeArgumentFor, (, typeParameter, ), ;]
[for, (, TypeVariable, typeParameter, :, typeParameters, ), {, Type, actualType, =, getActualTypeArgumentFor, (, typeParameter, ), ;, actualTypeArguments, ., put, (]
[TypeVariable, typeParameter, :, typeParameters, ), {, Type, actualType, =, getActualTypeArgumentFor, (, typeParameter, ), ;, actualTypeArguments, ., put, (, typeParameter, ,]
[{, Type, actualType, =, getActualTypeArgumentFor, (, typeParameter, ), ;, actualTypeArguments, ., put, (, typeParameter, ,, actualType, ), ;, }, return]
[,, actualType, ), ;, }, return, actualTypeArguments, ;, }, protected, Type, getActualTypeArgumentFor, (, TypeVariable, typeParameter, ), {, Type, type, =]
[,, actualType, ), ;, }, return, actualTypeArguments, ;, }, protected, Type, getActualTypeArgumentFor, (, TypeVariable, typeParameter, ), {, Type, type, =]
[,, actualType, ), ;, }, return, actualTypeArguments, ;, }, protected, Type, getActualTypeArgumentFor, (, TypeVariable, typeParameter, ), {, Type, type, =]
[actualTypeArguments, ;, }, protected, Type, getActualTypeArgumentFor, (, TypeVariable, typeParameter, ), {, Type, type, =, this, ., contextualActualTypeParameters, ., get, (]
[getActualTypeArgumentFor, (, TypeVariable, typeParameter, ), {, Type, type, =, this, ., contextualActualTypeParameters, ., get, (, typeParameter, ), ;, if, (]
[getActualTypeArgumentFor, (, TypeVariable, typeParameter, ), {, Type, type, =, this, ., contextualActualTypeParameters, ., get, (, typeParameter, ), ;, if, (]
[=, this, ., contextualActualTypeParameters, ., get, (, typeParameter, ), ;, if, (, type, instanceof, TypeVariable, ), {, TypeVariable, typeVariable, =]
[contextualActualTypeParameters, ., get, (, typeParameter, ), ;, if, (, type, instanceof, TypeVariable, ), {, TypeVariable, typeVariable, =, (, TypeVariable, )]
[(, typeParameter, ), ;, if, (, type, instanceof, TypeVariable, ), {, TypeVariable, typeVariable, =, (, TypeVariable, ), type, ;, return]
[), ;, if, (, type, instanceof, TypeVariable, ), {, TypeVariable, typeVariable, =, (, TypeVariable, ), type, ;, return, getActualTypeArgumentFor, (]
[instanceof, TypeVariable, ), {, TypeVariable, typeVariable, =, (, TypeVariable, ), type, ;, return, getActualTypeArgumentFor, (, typeVariable, ), ;, }, return]
[(, typeVariable, ), ;, }, return, type, ;, }, public, GenericMetadataSupport, resolveGenericReturnType, (, Method, method, ), {, Type, genericReturnType, =]
[(, typeVariable, ), ;, }, return, type, ;, }, public, GenericMetadataSupport, resolveGenericReturnType, (, Method, method, ), {, Type, genericReturnType, =]
[}, public, GenericMetadataSupport, resolveGenericReturnType, (, Method, method, ), {, Type, genericReturnType, =, method, ., getGenericReturnType, (, ), ;, if, (]
[}, public, GenericMetadataSupport, resolveGenericReturnType, (, Method, method, ), {, Type, genericReturnType, =, method, ., getGenericReturnType, (, ), ;, if, (]
[method, ), {, Type, genericReturnType, =, method, ., getGenericReturnType, (, ), ;, if, (, genericReturnType, instanceof, Class, ), {, return]
[Type, genericReturnType, =, method, ., getGenericReturnType, (, ), ;, if, (, genericReturnType, instanceof, Class, ), {, return, new, NotGenericReturnTypeSupport, (]
[(, ), ;, if, (, genericReturnType, instanceof, Class, ), {, return, new, NotGenericReturnTypeSupport, (, genericReturnType, ), ;, }, if, (]
[(, ), ;, if, (, genericReturnType, instanceof, Class, ), {, return, new, NotGenericReturnTypeSupport, (, genericReturnType, ), ;, }, if, (]
[instanceof, Class, ), {, return, new, NotGenericReturnTypeSupport, (, genericReturnType, ), ;, }, if, (, genericReturnType, instanceof, ParameterizedType, ), {, return]
[{, return, new, NotGenericReturnTypeSupport, (, genericReturnType, ), ;, }, if, (, genericReturnType, instanceof, ParameterizedType, ), {, return, new, ParameterizedReturnType, (]
[new, NotGenericReturnTypeSupport, (, genericReturnType, ), ;, }, if, (, genericReturnType, instanceof, ParameterizedType, ), {, return, new, ParameterizedReturnType, (, this, ,]
[new, NotGenericReturnTypeSupport, (, genericReturnType, ), ;, }, if, (, genericReturnType, instanceof, ParameterizedType, ), {, return, new, ParameterizedReturnType, (, this, ,]
[}, if, (, genericReturnType, instanceof, ParameterizedType, ), {, return, new, ParameterizedReturnType, (, this, ,, method, ., getTypeParameters, (, ), ,]
[genericReturnType, instanceof, ParameterizedType, ), {, return, new, ParameterizedReturnType, (, this, ,, method, ., getTypeParameters, (, ), ,, (, ParameterizedType, )]
[genericReturnType, instanceof, ParameterizedType, ), {, return, new, ParameterizedReturnType, (, this, ,, method, ., getTypeParameters, (, ), ,, (, ParameterizedType, )]
[,, method, ., getTypeParameters, (, ), ,, (, ParameterizedType, ), method, ., getGenericReturnType, (, ), ), ;, }, if, (]
[,, method, ., getTypeParameters, (, ), ,, (, ParameterizedType, ), method, ., getGenericReturnType, (, ), ), ;, }, if, (]
[,, (, ParameterizedType, ), method, ., getGenericReturnType, (, ), ), ;, }, if, (, genericReturnType, instanceof, TypeVariable, ), {, return]
[), method, ., getGenericReturnType, (, ), ), ;, }, if, (, genericReturnType, instanceof, TypeVariable, ), {, return, new, TypeVariableReturnType, (]
[., getGenericReturnType, (, ), ), ;, }, if, (, genericReturnType, instanceof, TypeVariable, ), {, return, new, TypeVariableReturnType, (, this, ,]
[., getGenericReturnType, (, ), ), ;, }, if, (, genericReturnType, instanceof, TypeVariable, ), {, return, new, TypeVariableReturnType, (, this, ,]
[}, if, (, genericReturnType, instanceof, TypeVariable, ), {, return, new, TypeVariableReturnType, (, this, ,, method, ., getTypeParameters, (, ), ,]
[genericReturnType, instanceof, TypeVariable, ), {, return, new, TypeVariableReturnType, (, this, ,, method, ., getTypeParameters, (, ), ,, (, TypeVariable, )]
[return, new, TypeVariableReturnType, (, this, ,, method, ., getTypeParameters, (, ), ,, (, TypeVariable, ), genericReturnType, ), ;, }, throw]
[(, this, ,, method, ., getTypeParameters, (, ), ,, (, TypeVariable, ), genericReturnType, ), ;, }, throw, new, MockitoException, (]
[(, this, ,, method, ., getTypeParameters, (, ), ,, (, TypeVariable, ), genericReturnType, ), ;, }, throw, new, MockitoException, (]
[(, this, ,, method, ., getTypeParameters, (, ), ,, (, TypeVariable, ), genericReturnType, ), ;, }, throw, new, MockitoException, (]
[(, this, ,, method, ., getTypeParameters, (, ), ,, (, TypeVariable, ), genericReturnType, ), ;, }, throw, new, MockitoException, (]
[(, this, ,, method, ., getTypeParameters, (, ), ,, (, TypeVariable, ), genericReturnType, ), ;, }, throw, new, MockitoException, (]
[(, this, ,, method, ., getTypeParameters, (, ), ,, (, TypeVariable, ), genericReturnType, ), ;, }, throw, new, MockitoException, (]
[,, method, ., getTypeParameters, (, ), ,, (, TypeVariable, ), genericReturnType, ), ;, }, throw, new, MockitoException, (, "Ouch, it shouldn't happen, type '", +]
[,, method, ., getTypeParameters, (, ), ,, (, TypeVariable, ), genericReturnType, ), ;, }, throw, new, MockitoException, (, "Ouch, it shouldn't happen, type '", +]
[,, method, ., getTypeParameters, (, ), ,, (, TypeVariable, ), genericReturnType, ), ;, }, throw, new, MockitoException, (, "Ouch, it shouldn't happen, type '", +]
[genericReturnType, ), ;, }, throw, new, MockitoException, (, "Ouch, it shouldn't happen, type '", +, genericReturnType, ., getClass, (, ), ., getCanonicalName, (, ), +]
[;, }, throw, new, MockitoException, (, "Ouch, it shouldn't happen, type '", +, genericReturnType, ., getClass, (, ), ., getCanonicalName, (, ), +, "' on method : '", +]
[;, }, throw, new, MockitoException, (, "Ouch, it shouldn't happen, type '", +, genericReturnType, ., getClass, (, ), ., getCanonicalName, (, ), +, "' on method : '", +]
["Ouch, it shouldn't happen, type '", +, genericReturnType, ., getClass, (, ), ., getCanonicalName, (, ), +, "' on method : '", +, method, ., toGenericString, (, ), +]
[genericReturnType, ., getClass, (, ), ., getCanonicalName, (, ), +, "' on method : '", +, method, ., toGenericString, (, ), +, "' is not supported : ", +]
[., toGenericString, (, ), +, "' is not supported : ", +, genericReturnType, ), ;, }, public, static, GenericMetadataSupport, inferFrom, (, Type, type, ), {]
[., toGenericString, (, ), +, "' is not supported : ", +, genericReturnType, ), ;, }, public, static, GenericMetadataSupport, inferFrom, (, Type, type, ), {]
[+, "' is not supported : ", +, genericReturnType, ), ;, }, public, static, GenericMetadataSupport, inferFrom, (, Type, type, ), {, Checks, ., checkNotNull, (]
[+, genericReturnType, ), ;, }, public, static, GenericMetadataSupport, inferFrom, (, Type, type, ), {, Checks, ., checkNotNull, (, type, ,]
[public, static, GenericMetadataSupport, inferFrom, (, Type, type, ), {, Checks, ., checkNotNull, (, type, ,, "type", ), ;, if, (]
[public, static, GenericMetadataSupport, inferFrom, (, Type, type, ), {, Checks, ., checkNotNull, (, type, ,, "type", ), ;, if, (]
[type, ), {, Checks, ., checkNotNull, (, type, ,, "type", ), ;, if, (, type, instanceof, Class, ), {, return]
[Checks, ., checkNotNull, (, type, ,, "type", ), ;, if, (, type, instanceof, Class, ), {, return, new, FromClassGenericMetadataSupport, (]
["type", ), ;, if, (, type, instanceof, Class, ), {, return, new, FromClassGenericMetadataSupport, (, (, Class, <, ?, >, )]
[instanceof, Class, ), {, return, new, FromClassGenericMetadataSupport, (, (, Class, <, ?, >, ), type, ), ;, }, if, (]
[instanceof, Class, ), {, return, new, FromClassGenericMetadataSupport, (, (, Class, <, ?, >, ), type, ), ;, }, if, (]
[FromClassGenericMetadataSupport, (, (, Class, <, ?, >, ), type, ), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return]
[Class, <, ?, >, ), type, ), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, new, FromParameterizedTypeGenericMetadataSupport, (]
[>, ), type, ), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, new, FromParameterizedTypeGenericMetadataSupport, (, (, ParameterizedType, )]
[}, if, (, type, instanceof, ParameterizedType, ), {, return, new, FromParameterizedTypeGenericMetadataSupport, (, (, ParameterizedType, ), type, ), ;, }, throw]
[type, instanceof, ParameterizedType, ), {, return, new, FromParameterizedTypeGenericMetadataSupport, (, (, ParameterizedType, ), type, ), ;, }, throw, new, MockitoException, (]
[type, instanceof, ParameterizedType, ), {, return, new, FromParameterizedTypeGenericMetadataSupport, (, (, ParameterizedType, ), type, ), ;, }, throw, new, MockitoException, (]
[type, instanceof, ParameterizedType, ), {, return, new, FromParameterizedTypeGenericMetadataSupport, (, (, ParameterizedType, ), type, ), ;, }, throw, new, MockitoException, (]
[type, instanceof, ParameterizedType, ), {, return, new, FromParameterizedTypeGenericMetadataSupport, (, (, ParameterizedType, ), type, ), ;, }, throw, new, MockitoException, (]
[ParameterizedType, ), {, return, new, FromParameterizedTypeGenericMetadataSupport, (, (, ParameterizedType, ), type, ), ;, }, throw, new, MockitoException, (, "Type meta-data for this Type (", +]
[ParameterizedType, ), {, return, new, FromParameterizedTypeGenericMetadataSupport, (, (, ParameterizedType, ), type, ), ;, }, throw, new, MockitoException, (, "Type meta-data for this Type (", +]
[ParameterizedType, ), {, return, new, FromParameterizedTypeGenericMetadataSupport, (, (, ParameterizedType, ), type, ), ;, }, throw, new, MockitoException, (, "Type meta-data for this Type (", +]
[type, ), ;, }, throw, new, MockitoException, (, "Type meta-data for this Type (", +, type, ., getClass, (, ), ., getCanonicalName, (, ), +]
[;, }, throw, new, MockitoException, (, "Type meta-data for this Type (", +, type, ., getClass, (, ), ., getCanonicalName, (, ), +, ") is not supported : ", +]
[GenericMetadataSupport, {, private, final, Class, <, ?, >, clazz, ;, public, FromClassGenericMetadataSupport, (, Class, <, ?, >, clazz, ), {]
[GenericMetadataSupport, {, private, final, Class, <, ?, >, clazz, ;, public, FromClassGenericMetadataSupport, (, Class, <, ?, >, clazz, ), {]
[Class, <, ?, >, clazz, ;, public, FromClassGenericMetadataSupport, (, Class, <, ?, >, clazz, ), {, this, ., clazz, =]
[FromClassGenericMetadataSupport, (, Class, <, ?, >, clazz, ), {, this, ., clazz, =, clazz, ;, for, (, Class, currentExploredClass, =]
[Class, <, ?, >, clazz, ), {, this, ., clazz, =, clazz, ;, for, (, Class, currentExploredClass, =, clazz, ;]
[Class, <, ?, >, clazz, ), {, this, ., clazz, =, clazz, ;, for, (, Class, currentExploredClass, =, clazz, ;]
[Class, <, ?, >, clazz, ), {, this, ., clazz, =, clazz, ;, for, (, Class, currentExploredClass, =, clazz, ;]
[?, >, clazz, ), {, this, ., clazz, =, clazz, ;, for, (, Class, currentExploredClass, =, clazz, ;, currentExploredClass, !=]
[clazz, ), {, this, ., clazz, =, clazz, ;, for, (, Class, currentExploredClass, =, clazz, ;, currentExploredClass, !=, null, &&]
[clazz, ), {, this, ., clazz, =, clazz, ;, for, (, Class, currentExploredClass, =, clazz, ;, currentExploredClass, !=, null, &&]
[{, this, ., clazz, =, clazz, ;, for, (, Class, currentExploredClass, =, clazz, ;, currentExploredClass, !=, null, &&, currentExploredClass, !=]
[=, clazz, ;, for, (, Class, currentExploredClass, =, clazz, ;, currentExploredClass, !=, null, &&, currentExploredClass, !=, Object, ., class, ;]
[;, for, (, Class, currentExploredClass, =, clazz, ;, currentExploredClass, !=, null, &&, currentExploredClass, !=, Object, ., class, ;, currentExploredClass, =]
[(, Class, currentExploredClass, =, clazz, ;, currentExploredClass, !=, null, &&, currentExploredClass, !=, Object, ., class, ;, currentExploredClass, =, superClassOf, (]
[clazz, ;, currentExploredClass, !=, null, &&, currentExploredClass, !=, Object, ., class, ;, currentExploredClass, =, superClassOf, (, currentExploredClass, ), ), {]
[currentExploredClass, !=, null, &&, currentExploredClass, !=, Object, ., class, ;, currentExploredClass, =, superClassOf, (, currentExploredClass, ), ), {, readActualTypeParametersOnDeclaringClass, (]
[), {, readActualTypeParametersOnDeclaringClass, (, currentExploredClass, ), ;, }, }, private, Class, superClassOf, (, Class, currentExploredClass, ), {, Type, genericSuperclass, =]
[), {, readActualTypeParametersOnDeclaringClass, (, currentExploredClass, ), ;, }, }, private, Class, superClassOf, (, Class, currentExploredClass, ), {, Type, genericSuperclass, =]
[}, private, Class, superClassOf, (, Class, currentExploredClass, ), {, Type, genericSuperclass, =, currentExploredClass, ., getGenericSuperclass, (, ), ;, if, (]
[}, private, Class, superClassOf, (, Class, currentExploredClass, ), {, Type, genericSuperclass, =, currentExploredClass, ., getGenericSuperclass, (, ), ;, if, (]
[{, Type, genericSuperclass, =, currentExploredClass, ., getGenericSuperclass, (, ), ;, if, (, genericSuperclass, instanceof, ParameterizedType, ), {, Type, rawType, =]
[{, Type, genericSuperclass, =, currentExploredClass, ., getGenericSuperclass, (, ), ;, if, (, genericSuperclass, instanceof, ParameterizedType, ), {, Type, rawType, =]
[Type, genericSuperclass, =, currentExploredClass, ., getGenericSuperclass, (, ), ;, if, (, genericSuperclass, instanceof, ParameterizedType, ), {, Type, rawType, =, (]
[currentExploredClass, ., getGenericSuperclass, (, ), ;, if, (, genericSuperclass, instanceof, ParameterizedType, ), {, Type, rawType, =, (, (, ParameterizedType, )]
[genericSuperclass, instanceof, ParameterizedType, ), {, Type, rawType, =, (, (, ParameterizedType, ), genericSuperclass, ), ., getRawType, (, ), ;, return]
[), {, Type, rawType, =, (, (, ParameterizedType, ), genericSuperclass, ), ., getRawType, (, ), ;, return, (, Class, )]
[=, (, (, ParameterizedType, ), genericSuperclass, ), ., getRawType, (, ), ;, return, (, Class, ), rawType, ;, }, return]
[ParameterizedType, ), genericSuperclass, ), ., getRawType, (, ), ;, return, (, Class, ), rawType, ;, }, return, (, Class, )]
[;, }, return, (, Class, ), genericSuperclass, ;, }, private, void, readActualTypeParametersOnDeclaringClass, (, Class, <, ?, >, clazz, ), {]
[return, (, Class, ), genericSuperclass, ;, }, private, void, readActualTypeParametersOnDeclaringClass, (, Class, <, ?, >, clazz, ), {, registerTypeParametersOn, (]
[return, (, Class, ), genericSuperclass, ;, }, private, void, readActualTypeParametersOnDeclaringClass, (, Class, <, ?, >, clazz, ), {, registerTypeParametersOn, (]
[private, void, readActualTypeParametersOnDeclaringClass, (, Class, <, ?, >, clazz, ), {, registerTypeParametersOn, (, clazz, ., getTypeParameters, (, ), ), ;]
[readActualTypeParametersOnDeclaringClass, (, Class, <, ?, >, clazz, ), {, registerTypeParametersOn, (, clazz, ., getTypeParameters, (, ), ), ;, registerTypeVariablesOn, (]
[readActualTypeParametersOnDeclaringClass, (, Class, <, ?, >, clazz, ), {, registerTypeParametersOn, (, clazz, ., getTypeParameters, (, ), ), ;, registerTypeVariablesOn, (]
[., getTypeParameters, (, ), ), ;, registerTypeVariablesOn, (, clazz, ., getGenericSuperclass, (, ), ), ;, for, (, Type, genericInterface, :]
[., getTypeParameters, (, ), ), ;, registerTypeVariablesOn, (, clazz, ., getGenericSuperclass, (, ), ), ;, for, (, Type, genericInterface, :]
[(, clazz, ., getGenericSuperclass, (, ), ), ;, for, (, Type, genericInterface, :, clazz, ., getGenericInterfaces, (, ), ), {]
[., getGenericSuperclass, (, ), ), ;, for, (, Type, genericInterface, :, clazz, ., getGenericInterfaces, (, ), ), {, registerTypeVariablesOn, (]
[{, registerTypeVariablesOn, (, genericInterface, ), ;, }, }, @, Override, public, Class, <, ?, >, rawType, (, ), {, return]
[}, private, static, class, FromParameterizedTypeGenericMetadataSupport, extends, GenericMetadataSupport, {, private, final, ParameterizedType, parameterizedType, ;, public, FromParameterizedTypeGenericMetadataSupport, (, ParameterizedType, parameterizedType, ), {]
[}, private, static, class, FromParameterizedTypeGenericMetadataSupport, extends, GenericMetadataSupport, {, private, final, ParameterizedType, parameterizedType, ;, public, FromParameterizedTypeGenericMetadataSupport, (, ParameterizedType, parameterizedType, ), {]
[FromParameterizedTypeGenericMetadataSupport, extends, GenericMetadataSupport, {, private, final, ParameterizedType, parameterizedType, ;, public, FromParameterizedTypeGenericMetadataSupport, (, ParameterizedType, parameterizedType, ), {, this, ., parameterizedType, =]
[GenericMetadataSupport, {, private, final, ParameterizedType, parameterizedType, ;, public, FromParameterizedTypeGenericMetadataSupport, (, ParameterizedType, parameterizedType, ), {, this, ., parameterizedType, =, parameterizedType, ;]
[parameterizedType, ), {, this, ., parameterizedType, =, parameterizedType, ;, readActualTypeParameters, (, ), ;, }, private, void, readActualTypeParameters, (, ), {]
[{, this, ., parameterizedType, =, parameterizedType, ;, readActualTypeParameters, (, ), ;, }, private, void, readActualTypeParameters, (, ), {, registerTypeVariablesOn, (]
[{, this, ., parameterizedType, =, parameterizedType, ;, readActualTypeParameters, (, ), ;, }, private, void, readActualTypeParameters, (, ), {, registerTypeVariablesOn, (]
[readActualTypeParameters, (, ), ;, }, private, void, readActualTypeParameters, (, ), {, registerTypeVariablesOn, (, parameterizedType, ., getRawType, (, ), ), ;]
[), ;, }, private, void, readActualTypeParameters, (, ), {, registerTypeVariablesOn, (, parameterizedType, ., getRawType, (, ), ), ;, registerTypeVariablesOn, (]
[), ;, registerTypeVariablesOn, (, parameterizedType, ), ;, }, @, Override, public, Class, <, ?, >, rawType, (, ), {, return]
[;, }, @, Override, public, Class, <, ?, >, rawType, (, ), {, return, (, Class, <, ?, >, )]
[;, }, @, Override, public, Class, <, ?, >, rawType, (, ), {, return, (, Class, <, ?, >, )]
[TypeVariable, [, ], typeParameters, ;, public, ParameterizedReturnType, (, GenericMetadataSupport, source, ,, TypeVariable, [, ], typeParameters, ,, ParameterizedType, parameterizedType, ), {]
[TypeVariable, [, ], typeParameters, ;, public, ParameterizedReturnType, (, GenericMetadataSupport, source, ,, TypeVariable, [, ], typeParameters, ,, ParameterizedType, parameterizedType, ), {]
[;, public, ParameterizedReturnType, (, GenericMetadataSupport, source, ,, TypeVariable, [, ], typeParameters, ,, ParameterizedType, parameterizedType, ), {, this, ., parameterizedType, =]
[ParameterizedReturnType, (, GenericMetadataSupport, source, ,, TypeVariable, [, ], typeParameters, ,, ParameterizedType, parameterizedType, ), {, this, ., parameterizedType, =, parameterizedType, ;]
[ParameterizedReturnType, (, GenericMetadataSupport, source, ,, TypeVariable, [, ], typeParameters, ,, ParameterizedType, parameterizedType, ), {, this, ., parameterizedType, =, parameterizedType, ;]
[,, TypeVariable, [, ], typeParameters, ,, ParameterizedType, parameterizedType, ), {, this, ., parameterizedType, =, parameterizedType, ;, this, ., typeParameters, =]
[[, ], typeParameters, ,, ParameterizedType, parameterizedType, ), {, this, ., parameterizedType, =, parameterizedType, ;, this, ., typeParameters, =, typeParameters, ;]
[[, ], typeParameters, ,, ParameterizedType, parameterizedType, ), {, this, ., parameterizedType, =, parameterizedType, ;, this, ., typeParameters, =, typeParameters, ;]
[ParameterizedType, parameterizedType, ), {, this, ., parameterizedType, =, parameterizedType, ;, this, ., typeParameters, =, typeParameters, ;, this, ., contextualActualTypeParameters, =]
[ParameterizedType, parameterizedType, ), {, this, ., parameterizedType, =, parameterizedType, ;, this, ., typeParameters, =, typeParameters, ;, this, ., contextualActualTypeParameters, =]
[this, ., parameterizedType, =, parameterizedType, ;, this, ., typeParameters, =, typeParameters, ;, this, ., contextualActualTypeParameters, =, source, ., contextualActualTypeParameters, ;]
[parameterizedType, ;, this, ., typeParameters, =, typeParameters, ;, this, ., contextualActualTypeParameters, =, source, ., contextualActualTypeParameters, ;, readTypeParameters, (, ), ;]
[=, source, ., contextualActualTypeParameters, ;, readTypeParameters, (, ), ;, readTypeVariables, (, ), ;, }, private, void, readTypeParameters, (, ), {]
[., contextualActualTypeParameters, ;, readTypeParameters, (, ), ;, readTypeVariables, (, ), ;, }, private, void, readTypeParameters, (, ), {, registerTypeParametersOn, (]
[;, }, private, void, readTypeParameters, (, ), {, registerTypeParametersOn, (, typeParameters, ), ;, }, private, void, readTypeVariables, (, ), {]
[private, void, readTypeParameters, (, ), {, registerTypeParametersOn, (, typeParameters, ), ;, }, private, void, readTypeVariables, (, ), {, registerTypeVariablesOn, (]
[), {, registerTypeVariablesOn, (, parameterizedType, ), ;, }, @, Override, public, Class, <, ?, >, rawType, (, ), {, return]
[;, }, @, Override, public, Class, <, ?, >, rawType, (, ), {, return, (, Class, <, ?, >, )]
[;, }, @, Override, public, Class, <, ?, >, rawType, (, ), {, return, (, Class, <, ?, >, )]
[<, ?, >, rawType, ;, public, TypeVariableReturnType, (, GenericMetadataSupport, source, ,, TypeVariable, [, ], typeParameters, ,, TypeVariable, typeVariable, ), {]
[<, ?, >, rawType, ;, public, TypeVariableReturnType, (, GenericMetadataSupport, source, ,, TypeVariable, [, ], typeParameters, ,, TypeVariable, typeVariable, ), {]
[;, public, TypeVariableReturnType, (, GenericMetadataSupport, source, ,, TypeVariable, [, ], typeParameters, ,, TypeVariable, typeVariable, ), {, this, ., typeParameters, =]
[TypeVariableReturnType, (, GenericMetadataSupport, source, ,, TypeVariable, [, ], typeParameters, ,, TypeVariable, typeVariable, ), {, this, ., typeParameters, =, typeParameters, ;]
[TypeVariableReturnType, (, GenericMetadataSupport, source, ,, TypeVariable, [, ], typeParameters, ,, TypeVariable, typeVariable, ), {, this, ., typeParameters, =, typeParameters, ;]
[,, TypeVariable, [, ], typeParameters, ,, TypeVariable, typeVariable, ), {, this, ., typeParameters, =, typeParameters, ;, this, ., typeVariable, =]
[[, ], typeParameters, ,, TypeVariable, typeVariable, ), {, this, ., typeParameters, =, typeParameters, ;, this, ., typeVariable, =, typeVariable, ;]
[[, ], typeParameters, ,, TypeVariable, typeVariable, ), {, this, ., typeParameters, =, typeParameters, ;, this, ., typeVariable, =, typeVariable, ;]
[TypeVariable, typeVariable, ), {, this, ., typeParameters, =, typeParameters, ;, this, ., typeVariable, =, typeVariable, ;, this, ., contextualActualTypeParameters, =]
[TypeVariable, typeVariable, ), {, this, ., typeParameters, =, typeParameters, ;, this, ., typeVariable, =, typeVariable, ;, this, ., contextualActualTypeParameters, =]
[this, ., typeParameters, =, typeParameters, ;, this, ., typeVariable, =, typeVariable, ;, this, ., contextualActualTypeParameters, =, source, ., contextualActualTypeParameters, ;]
[typeParameters, ;, this, ., typeVariable, =, typeVariable, ;, this, ., contextualActualTypeParameters, =, source, ., contextualActualTypeParameters, ;, readTypeParameters, (, ), ;]
[=, source, ., contextualActualTypeParameters, ;, readTypeParameters, (, ), ;, readTypeVariables, (, ), ;, }, private, void, readTypeParameters, (, ), {]
[., contextualActualTypeParameters, ;, readTypeParameters, (, ), ;, readTypeVariables, (, ), ;, }, private, void, readTypeParameters, (, ), {, registerTypeParametersOn, (]
[(, ), {, registerTypeParametersOn, (, typeParameters, ), ;, }, private, void, readTypeVariables, (, ), {, for, (, Type, type, :]
[(, ), {, registerTypeParametersOn, (, typeParameters, ), ;, }, private, void, readTypeVariables, (, ), {, for, (, Type, type, :]
[;, }, private, void, readTypeVariables, (, ), {, for, (, Type, type, :, typeVariable, ., getBounds, (, ), ), {]
[private, void, readTypeVariables, (, ), {, for, (, Type, type, :, typeVariable, ., getBounds, (, ), ), {, registerTypeVariablesOn, (]
[), {, for, (, Type, type, :, typeVariable, ., getBounds, (, ), ), {, registerTypeVariablesOn, (, type, ), ;, }]
[for, (, Type, type, :, typeVariable, ., getBounds, (, ), ), {, registerTypeVariablesOn, (, type, ), ;, }, registerTypeParametersOn, (]
[:, typeVariable, ., getBounds, (, ), ), {, registerTypeVariablesOn, (, type, ), ;, }, registerTypeParametersOn, (, new, TypeVariable, [, ]]
[typeVariable, ., getBounds, (, ), ), {, registerTypeVariablesOn, (, type, ), ;, }, registerTypeParametersOn, (, new, TypeVariable, [, ], {]
[), ), {, registerTypeVariablesOn, (, type, ), ;, }, registerTypeParametersOn, (, new, TypeVariable, [, ], {, typeVariable, }, ), ;]
[{, registerTypeVariablesOn, (, type, ), ;, }, registerTypeParametersOn, (, new, TypeVariable, [, ], {, typeVariable, }, ), ;, registerTypeVariablesOn, (]
[(, type, ), ;, }, registerTypeParametersOn, (, new, TypeVariable, [, ], {, typeVariable, }, ), ;, registerTypeVariablesOn, (, getActualTypeArgumentFor, (]
[getActualTypeArgumentFor, (, typeVariable, ), ), ;, }, @, Override, public, Class, <, ?, >, rawType, (, ), {, if, (]
[getActualTypeArgumentFor, (, typeVariable, ), ), ;, }, @, Override, public, Class, <, ?, >, rawType, (, ), {, if, (]
[typeVariable, ), ), ;, }, @, Override, public, Class, <, ?, >, rawType, (, ), {, if, (, rawType, ==]
[;, }, @, Override, public, Class, <, ?, >, rawType, (, ), {, if, (, rawType, ==, null, ), {]
[@, Override, public, Class, <, ?, >, rawType, (, ), {, if, (, rawType, ==, null, ), {, rawType, =]
[public, Class, <, ?, >, rawType, (, ), {, if, (, rawType, ==, null, ), {, rawType, =, extractRawTypeOf, (]
[rawType, (, ), {, if, (, rawType, ==, null, ), {, rawType, =, extractRawTypeOf, (, typeVariable, ), ;, }, return]
[), ;, }, return, rawType, ;, }, private, Class, <, ?, >, extractRawTypeOf, (, Type, type, ), {, if, (]
[), ;, }, return, rawType, ;, }, private, Class, <, ?, >, extractRawTypeOf, (, Type, type, ), {, if, (]
[}, private, Class, <, ?, >, extractRawTypeOf, (, Type, type, ), {, if, (, type, instanceof, Class, ), {, return]
[extractRawTypeOf, (, Type, type, ), {, if, (, type, instanceof, Class, ), {, return, (, Class, <, ?, >, )]
[{, if, (, type, instanceof, Class, ), {, return, (, Class, <, ?, >, ), type, ;, }, if, (]
[{, if, (, type, instanceof, Class, ), {, return, (, Class, <, ?, >, ), type, ;, }, if, (]
[), {, return, (, Class, <, ?, >, ), type, ;, }, if, (, type, instanceof, ParameterizedType, ), {, return]
[?, >, ), type, ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, (, Class, <, ?, >, )]
[?, >, ), type, ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, (, Class, <, ?, >, )]
[>, ), type, ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, (, Class, <, ?, >, ), (]
[;, }, if, (, type, instanceof, ParameterizedType, ), {, return, (, Class, <, ?, >, ), (, (, ParameterizedType, )]
[(, Class, <, ?, >, ), (, (, ParameterizedType, ), type, ), ., getRawType, (, ), ;, }, if, (]
[(, Class, <, ?, >, ), (, (, ParameterizedType, ), type, ), ., getRawType, (, ), ;, }, if, (]
[(, (, ParameterizedType, ), type, ), ., getRawType, (, ), ;, }, if, (, type, instanceof, BoundedType, ), {, return]
[ParameterizedType, ), type, ), ., getRawType, (, ), ;, }, if, (, type, instanceof, BoundedType, ), {, return, extractRawTypeOf, (]
[ParameterizedType, ), type, ), ., getRawType, (, ), ;, }, if, (, type, instanceof, BoundedType, ), {, return, extractRawTypeOf, (]
[), type, ), ., getRawType, (, ), ;, }, if, (, type, instanceof, BoundedType, ), {, return, extractRawTypeOf, (, (]
[., getRawType, (, ), ;, }, if, (, type, instanceof, BoundedType, ), {, return, extractRawTypeOf, (, (, (, BoundedType, )]
[), {, return, extractRawTypeOf, (, (, (, BoundedType, ), type, ), ., firstBound, (, ), ), ;, }, if, (]
[), {, return, extractRawTypeOf, (, (, (, BoundedType, ), type, ), ., firstBound, (, ), ), ;, }, if, (]
[(, BoundedType, ), type, ), ., firstBound, (, ), ), ;, }, if, (, type, instanceof, TypeVariable, ), {, return]
[), type, ), ., firstBound, (, ), ), ;, }, if, (, type, instanceof, TypeVariable, ), {, return, extractRawTypeOf, (]
[), type, ), ., firstBound, (, ), ), ;, }, if, (, type, instanceof, TypeVariable, ), {, return, extractRawTypeOf, (]
[firstBound, (, ), ), ;, }, if, (, type, instanceof, TypeVariable, ), {, return, extractRawTypeOf, (, contextualActualTypeParameters, ., get, (]
[if, (, type, instanceof, TypeVariable, ), {, return, extractRawTypeOf, (, contextualActualTypeParameters, ., get, (, type, ), ), ;, }, throw]
[instanceof, TypeVariable, ), {, return, extractRawTypeOf, (, contextualActualTypeParameters, ., get, (, type, ), ), ;, }, throw, new, MockitoException, (]
[instanceof, TypeVariable, ), {, return, extractRawTypeOf, (, contextualActualTypeParameters, ., get, (, type, ), ), ;, }, throw, new, MockitoException, (]
[instanceof, TypeVariable, ), {, return, extractRawTypeOf, (, contextualActualTypeParameters, ., get, (, type, ), ), ;, }, throw, new, MockitoException, (]
[), {, return, extractRawTypeOf, (, contextualActualTypeParameters, ., get, (, type, ), ), ;, }, throw, new, MockitoException, (, "Raw extraction not supported for : '", +]
[return, extractRawTypeOf, (, contextualActualTypeParameters, ., get, (, type, ), ), ;, }, throw, new, MockitoException, (, "Raw extraction not supported for : '", +, type, +]
[type, +, "'", ), ;, }, @, Override, public, List, <, Type, >, extraInterfaces, (, ), {, Type, type, =]
["'", ), ;, }, @, Override, public, List, <, Type, >, extraInterfaces, (, ), {, Type, type, =, extractActualBoundedTypeOf, (]
[Override, public, List, <, Type, >, extraInterfaces, (, ), {, Type, type, =, extractActualBoundedTypeOf, (, typeVariable, ), ;, if, (]
[Override, public, List, <, Type, >, extraInterfaces, (, ), {, Type, type, =, extractActualBoundedTypeOf, (, typeVariable, ), ;, if, (]
[extraInterfaces, (, ), {, Type, type, =, extractActualBoundedTypeOf, (, typeVariable, ), ;, if, (, type, instanceof, BoundedType, ), {, return]
[extraInterfaces, (, ), {, Type, type, =, extractActualBoundedTypeOf, (, typeVariable, ), ;, if, (, type, instanceof, BoundedType, ), {, return]
[Type, type, =, extractActualBoundedTypeOf, (, typeVariable, ), ;, if, (, type, instanceof, BoundedType, ), {, return, Arrays, ., asList, (]
[Type, type, =, extractActualBoundedTypeOf, (, typeVariable, ), ;, if, (, type, instanceof, BoundedType, ), {, return, Arrays, ., asList, (]
[type, =, extractActualBoundedTypeOf, (, typeVariable, ), ;, if, (, type, instanceof, BoundedType, ), {, return, Arrays, ., asList, (, (]
[(, typeVariable, ), ;, if, (, type, instanceof, BoundedType, ), {, return, Arrays, ., asList, (, (, (, BoundedType, )]
[return, Arrays, ., asList, (, (, (, BoundedType, ), type, ), ., interfaceBounds, (, ), ), ;, }, if, (]
[return, Arrays, ., asList, (, (, (, BoundedType, ), type, ), ., interfaceBounds, (, ), ), ;, }, if, (]
[(, BoundedType, ), type, ), ., interfaceBounds, (, ), ), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return]
[(, BoundedType, ), type, ), ., interfaceBounds, (, ), ), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return]
[), ., interfaceBounds, (, ), ), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, Collections, ., singletonList, (]
[;, }, if, (, type, instanceof, ParameterizedType, ), {, return, Collections, ., singletonList, (, type, ), ;, }, if, (]
[;, }, if, (, type, instanceof, ParameterizedType, ), {, return, Collections, ., singletonList, (, type, ), ;, }, if, (]
[ParameterizedType, ), {, return, Collections, ., singletonList, (, type, ), ;, }, if, (, type, instanceof, Class, ), {, return]
[ParameterizedType, ), {, return, Collections, ., singletonList, (, type, ), ;, }, if, (, type, instanceof, Class, ), {, return]
[type, ), ;, }, if, (, type, instanceof, Class, ), {, return, Collections, ., emptyList, (, ), ;, }, throw]
[}, if, (, type, instanceof, Class, ), {, return, Collections, ., emptyList, (, ), ;, }, throw, new, MockitoException, (]
[}, if, (, type, instanceof, Class, ), {, return, Collections, ., emptyList, (, ), ;, }, throw, new, MockitoException, (]
[}, if, (, type, instanceof, Class, ), {, return, Collections, ., emptyList, (, ), ;, }, throw, new, MockitoException, (]
[}, if, (, type, instanceof, Class, ), {, return, Collections, ., emptyList, (, ), ;, }, throw, new, MockitoException, (]
[}, if, (, type, instanceof, Class, ), {, return, Collections, ., emptyList, (, ), ;, }, throw, new, MockitoException, (]
[(, type, instanceof, Class, ), {, return, Collections, ., emptyList, (, ), ;, }, throw, new, MockitoException, (, "Cannot extract extra-interfaces from '", +]
[instanceof, Class, ), {, return, Collections, ., emptyList, (, ), ;, }, throw, new, MockitoException, (, "Cannot extract extra-interfaces from '", +, typeVariable, +]
[), {, return, Collections, ., emptyList, (, ), ;, }, throw, new, MockitoException, (, "Cannot extract extra-interfaces from '", +, typeVariable, +, "' : '", +]
[return, Collections, ., emptyList, (, ), ;, }, throw, new, MockitoException, (, "Cannot extract extra-interfaces from '", +, typeVariable, +, "' : '", +, type, +]
[), ;, }, public, Class, <, ?, >, [, ], rawExtraInterfaces, (, ), {, List, <, Type, >, extraInterfaces, =]
[{, List, <, Type, >, extraInterfaces, =, extraInterfaces, (, ), ;, List, <, Class, <, ?, >, >, rawExtraInterfaces, =]
[>, >, rawExtraInterfaces, =, new, ArrayList, <, Class, <, ?, >, >, (, ), ;, for, (, Type, extraInterface, :]
[?, >, >, (, ), ;, for, (, Type, extraInterface, :, extraInterfaces, ), {, Class, <, ?, >, rawInterface, =]
[>, (, ), ;, for, (, Type, extraInterface, :, extraInterfaces, ), {, Class, <, ?, >, rawInterface, =, extractRawTypeOf, (]
[(, Type, extraInterface, :, extraInterfaces, ), {, Class, <, ?, >, rawInterface, =, extractRawTypeOf, (, extraInterface, ), ;, if, (]
[Type, extraInterface, :, extraInterfaces, ), {, Class, <, ?, >, rawInterface, =, extractRawTypeOf, (, extraInterface, ), ;, if, (, !]
[Type, extraInterface, :, extraInterfaces, ), {, Class, <, ?, >, rawInterface, =, extractRawTypeOf, (, extraInterface, ), ;, if, (, !]
[Class, <, ?, >, rawInterface, =, extractRawTypeOf, (, extraInterface, ), ;, if, (, !, rawType, (, ), ., equals, (]
[rawInterface, =, extractRawTypeOf, (, extraInterface, ), ;, if, (, !, rawType, (, ), ., equals, (, rawInterface, ), ), {]
[rawInterface, =, extractRawTypeOf, (, extraInterface, ), ;, if, (, !, rawType, (, ), ., equals, (, rawInterface, ), ), {]
[extraInterface, ), ;, if, (, !, rawType, (, ), ., equals, (, rawInterface, ), ), {, rawExtraInterfaces, ., add, (]
[rawType, (, ), ., equals, (, rawInterface, ), ), {, rawExtraInterfaces, ., add, (, rawInterface, ), ;, }, }, return]
[rawType, (, ), ., equals, (, rawInterface, ), ), {, rawExtraInterfaces, ., add, (, rawInterface, ), ;, }, }, return]
[equals, (, rawInterface, ), ), {, rawExtraInterfaces, ., add, (, rawInterface, ), ;, }, }, return, rawExtraInterfaces, ., toArray, (]
[), ), {, rawExtraInterfaces, ., add, (, rawInterface, ), ;, }, }, return, rawExtraInterfaces, ., toArray, (, new, Class, []
[), ), {, rawExtraInterfaces, ., add, (, rawInterface, ), ;, }, }, return, rawExtraInterfaces, ., toArray, (, new, Class, []
[[, rawExtraInterfaces, ., size, (, ), ], ), ;, }, private, Type, extractActualBoundedTypeOf, (, Type, type, ), {, if, (]
[[, rawExtraInterfaces, ., size, (, ), ], ), ;, }, private, Type, extractActualBoundedTypeOf, (, Type, type, ), {, if, (]
[], ), ;, }, private, Type, extractActualBoundedTypeOf, (, Type, type, ), {, if, (, type, instanceof, TypeVariable, ), {, return]
[;, }, private, Type, extractActualBoundedTypeOf, (, Type, type, ), {, if, (, type, instanceof, TypeVariable, ), {, return, extractActualBoundedTypeOf, (]
[;, }, private, Type, extractActualBoundedTypeOf, (, Type, type, ), {, if, (, type, instanceof, TypeVariable, ), {, return, extractActualBoundedTypeOf, (]
[extractActualBoundedTypeOf, (, Type, type, ), {, if, (, type, instanceof, TypeVariable, ), {, return, extractActualBoundedTypeOf, (, contextualActualTypeParameters, ., get, (]
[(, type, instanceof, TypeVariable, ), {, return, extractActualBoundedTypeOf, (, contextualActualTypeParameters, ., get, (, type, ), ), ;, }, if, (]
[(, type, instanceof, TypeVariable, ), {, return, extractActualBoundedTypeOf, (, contextualActualTypeParameters, ., get, (, type, ), ), ;, }, if, (]
[(, contextualActualTypeParameters, ., get, (, type, ), ), ;, }, if, (, type, instanceof, BoundedType, ), {, Type, actualFirstBound, =]
[., get, (, type, ), ), ;, }, if, (, type, instanceof, BoundedType, ), {, Type, actualFirstBound, =, extractActualBoundedTypeOf, (]
[., get, (, type, ), ), ;, }, if, (, type, instanceof, BoundedType, ), {, Type, actualFirstBound, =, extractActualBoundedTypeOf, (]
[get, (, type, ), ), ;, }, if, (, type, instanceof, BoundedType, ), {, Type, actualFirstBound, =, extractActualBoundedTypeOf, (, (]
[), ), ;, }, if, (, type, instanceof, BoundedType, ), {, Type, actualFirstBound, =, extractActualBoundedTypeOf, (, (, (, BoundedType, )]
[{, Type, actualFirstBound, =, extractActualBoundedTypeOf, (, (, (, BoundedType, ), type, ), ., firstBound, (, ), ), ;, if, (]
[Type, actualFirstBound, =, extractActualBoundedTypeOf, (, (, (, BoundedType, ), type, ), ., firstBound, (, ), ), ;, if, (, !]
[actualFirstBound, =, extractActualBoundedTypeOf, (, (, (, BoundedType, ), type, ), ., firstBound, (, ), ), ;, if, (, !, (]
[actualFirstBound, =, extractActualBoundedTypeOf, (, (, (, BoundedType, ), type, ), ., firstBound, (, ), ), ;, if, (, !, (]
[), type, ), ., firstBound, (, ), ), ;, if, (, !, (, actualFirstBound, instanceof, BoundedType, ), ), {, return]
[firstBound, (, ), ), ;, if, (, !, (, actualFirstBound, instanceof, BoundedType, ), ), {, return, type, ;, }, return]
[;, if, (, !, (, actualFirstBound, instanceof, BoundedType, ), ), {, return, type, ;, }, return, actualFirstBound, ;, }, return]
[class, NotGenericReturnTypeSupport, extends, GenericMetadataSupport, {, private, final, Class, <, ?, >, returnType, ;, public, NotGenericReturnTypeSupport, (, Type, genericReturnType, ), {]
[extends, GenericMetadataSupport, {, private, final, Class, <, ?, >, returnType, ;, public, NotGenericReturnTypeSupport, (, Type, genericReturnType, ), {, returnType, =]
[<, ?, >, returnType, ;, public, NotGenericReturnTypeSupport, (, Type, genericReturnType, ), {, returnType, =, (, Class, <, ?, >, )]
[Class, <, ?, >, ), genericReturnType, ;, }, @, Override, public, Class, <, ?, >, rawType, (, ), {, return]
[}, public, static, class, TypeVarBoundedType, implements, BoundedType, {, private, final, TypeVariable, typeVariable, ;, public, TypeVarBoundedType, (, TypeVariable, typeVariable, ), {]
[}, public, static, class, TypeVarBoundedType, implements, BoundedType, {, private, final, TypeVariable, typeVariable, ;, public, TypeVarBoundedType, (, TypeVariable, typeVariable, ), {]
[TypeVarBoundedType, implements, BoundedType, {, private, final, TypeVariable, typeVariable, ;, public, TypeVarBoundedType, (, TypeVariable, typeVariable, ), {, this, ., typeVariable, =]
[TypeVarBoundedType, (, TypeVariable, typeVariable, ), {, this, ., typeVariable, =, typeVariable, ;, }, public, Type, firstBound, (, ), {, return]
[TypeVarBoundedType, (, TypeVariable, typeVariable, ), {, this, ., typeVariable, =, typeVariable, ;, }, public, Type, firstBound, (, ), {, return]
[TypeVarBoundedType, (, TypeVariable, typeVariable, ), {, this, ., typeVariable, =, typeVariable, ;, }, public, Type, firstBound, (, ), {, return]
[this, ., typeVariable, =, typeVariable, ;, }, public, Type, firstBound, (, ), {, return, typeVariable, ., getBounds, (, ), []
[(, ), [, 0, ], ;, }, public, Type, [, ], interfaceBounds, (, ), {, Type, [, ], interfaceBounds, =]
[0, ], ;, }, public, Type, [, ], interfaceBounds, (, ), {, Type, [, ], interfaceBounds, =, new, Type, []
[0, ], ;, }, public, Type, [, ], interfaceBounds, (, ), {, Type, [, ], interfaceBounds, =, new, Type, []
[0, ], ;, }, public, Type, [, ], interfaceBounds, (, ), {, Type, [, ], interfaceBounds, =, new, Type, []
[0, ], ;, }, public, Type, [, ], interfaceBounds, (, ), {, Type, [, ], interfaceBounds, =, new, Type, []
[interfaceBounds, (, ), {, Type, [, ], interfaceBounds, =, new, Type, [, typeVariable, ., getBounds, (, ), ., length, -]
[{, Type, [, ], interfaceBounds, =, new, Type, [, typeVariable, ., getBounds, (, ), ., length, -, 1, ], ;]
[{, Type, [, ], interfaceBounds, =, new, Type, [, typeVariable, ., getBounds, (, ), ., length, -, 1, ], ;]
[interfaceBounds, =, new, Type, [, typeVariable, ., getBounds, (, ), ., length, -, 1, ], ;, System, ., arraycopy, (]
[interfaceBounds, =, new, Type, [, typeVariable, ., getBounds, (, ), ., length, -, 1, ], ;, System, ., arraycopy, (]
[., getBounds, (, ), ., length, -, 1, ], ;, System, ., arraycopy, (, typeVariable, ., getBounds, (, ), ,]
[(, ), ., length, -, 1, ], ;, System, ., arraycopy, (, typeVariable, ., getBounds, (, ), ,, 1, ,]
[., length, -, 1, ], ;, System, ., arraycopy, (, typeVariable, ., getBounds, (, ), ,, 1, ,, interfaceBounds, ,]
[-, 1, ], ;, System, ., arraycopy, (, typeVariable, ., getBounds, (, ), ,, 1, ,, interfaceBounds, ,, 0, ,]
[-, 1, ], ;, System, ., arraycopy, (, typeVariable, ., getBounds, (, ), ,, 1, ,, interfaceBounds, ,, 0, ,]
[-, 1, ], ;, System, ., arraycopy, (, typeVariable, ., getBounds, (, ), ,, 1, ,, interfaceBounds, ,, 0, ,]
[-, 1, ], ;, System, ., arraycopy, (, typeVariable, ., getBounds, (, ), ,, 1, ,, interfaceBounds, ,, 0, ,]
[typeVariable, ., getBounds, (, ), ,, 1, ,, interfaceBounds, ,, 0, ,, typeVariable, ., getBounds, (, ), ., length, -]
[), ,, 1, ,, interfaceBounds, ,, 0, ,, typeVariable, ., getBounds, (, ), ., length, -, 1, ), ;, return]
[-, 1, ), ;, return, interfaceBounds, ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (]
[-, 1, ), ;, return, interfaceBounds, ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (]
[), ;, return, interfaceBounds, ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, this, ==]
[interfaceBounds, ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, this, ==, o, ), return]
[Override, public, boolean, equals, (, Object, o, ), {, if, (, this, ==, o, ), return, true, ;, if, (]
[Override, public, boolean, equals, (, Object, o, ), {, if, (, this, ==, o, ), return, true, ;, if, (]
[Override, public, boolean, equals, (, Object, o, ), {, if, (, this, ==, o, ), return, true, ;, if, (]
[boolean, equals, (, Object, o, ), {, if, (, this, ==, o, ), return, true, ;, if, (, o, ==]
[(, Object, o, ), {, if, (, this, ==, o, ), return, true, ;, if, (, o, ==, null, ||]
[(, Object, o, ), {, if, (, this, ==, o, ), return, true, ;, if, (, o, ==, null, ||]
[{, if, (, this, ==, o, ), return, true, ;, if, (, o, ==, null, ||, getClass, (, ), !=]
[{, if, (, this, ==, o, ), return, true, ;, if, (, o, ==, null, ||, getClass, (, ), !=]
[return, true, ;, if, (, o, ==, null, ||, getClass, (, ), !=, o, ., getClass, (, ), ), return]
[if, (, o, ==, null, ||, getClass, (, ), !=, o, ., getClass, (, ), ), return, false, ;, return]
[if, (, o, ==, null, ||, getClass, (, ), !=, o, ., getClass, (, ), ), return, false, ;, return]
[null, ||, getClass, (, ), !=, o, ., getClass, (, ), ), return, false, ;, return, typeVariable, ., equals, (]
[null, ||, getClass, (, ), !=, o, ., getClass, (, ), ), return, false, ;, return, typeVariable, ., equals, (]
[||, getClass, (, ), !=, o, ., getClass, (, ), ), return, false, ;, return, typeVariable, ., equals, (, (]
[), !=, o, ., getClass, (, ), ), return, false, ;, return, typeVariable, ., equals, (, (, (, TypeVarBoundedType, )]
[(, (, TypeVarBoundedType, ), o, ), ., typeVariable, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, (, TypeVarBoundedType, ), o, ), ., typeVariable, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, ), {, return, typeVariable, ., hashCode, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[(, ), {, return, typeVariable, ., hashCode, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[(, ), {, return, typeVariable, ., hashCode, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[(, ), {, return, typeVariable, ., hashCode, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[(, ), {, return, typeVariable, ., hashCode, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[{, return, typeVariable, ., hashCode, (, ), ;, }, @, Override, public, String, toString, (, ), {, return, "{firstBound=", +]
[hashCode, (, ), ;, }, @, Override, public, String, toString, (, ), {, return, "{firstBound=", +, firstBound, (, ), +]
[), ;, }, @, Override, public, String, toString, (, ), {, return, "{firstBound=", +, firstBound, (, ), +, ", interfaceBounds=", +]
[), ;, }, @, Override, public, String, toString, (, ), {, return, "{firstBound=", +, firstBound, (, ), +, ", interfaceBounds=", +]
[Override, public, String, toString, (, ), {, return, "{firstBound=", +, firstBound, (, ), +, ", interfaceBounds=", +, Arrays, ., deepToString, (]
[), {, return, "{firstBound=", +, firstBound, (, ), +, ", interfaceBounds=", +, Arrays, ., deepToString, (, interfaceBounds, (, ), ), +]
[+, Arrays, ., deepToString, (, interfaceBounds, (, ), ), +, '}', ;, }, public, TypeVariable, typeVariable, (, ), {, return]
[}, public, static, class, WildCardBoundedType, implements, BoundedType, {, private, final, WildcardType, wildcard, ;, public, WildCardBoundedType, (, WildcardType, wildcard, ), {]
[}, public, static, class, WildCardBoundedType, implements, BoundedType, {, private, final, WildcardType, wildcard, ;, public, WildCardBoundedType, (, WildcardType, wildcard, ), {]
[WildCardBoundedType, implements, BoundedType, {, private, final, WildcardType, wildcard, ;, public, WildCardBoundedType, (, WildcardType, wildcard, ), {, this, ., wildcard, =]
[), {, this, ., wildcard, =, wildcard, ;, }, public, Type, firstBound, (, ), {, Type, [, ], lowerBounds, =]
[), {, this, ., wildcard, =, wildcard, ;, }, public, Type, firstBound, (, ), {, Type, [, ], lowerBounds, =]
[firstBound, (, ), {, Type, [, ], lowerBounds, =, wildcard, ., getLowerBounds, (, ), ;, Type, [, ], upperBounds, =]
[firstBound, (, ), {, Type, [, ], lowerBounds, =, wildcard, ., getLowerBounds, (, ), ;, Type, [, ], upperBounds, =]
[lowerBounds, =, wildcard, ., getLowerBounds, (, ), ;, Type, [, ], upperBounds, =, wildcard, ., getUpperBounds, (, ), ;, return]
[lowerBounds, =, wildcard, ., getLowerBounds, (, ), ;, Type, [, ], upperBounds, =, wildcard, ., getUpperBounds, (, ), ;, return]
[lowerBounds, =, wildcard, ., getLowerBounds, (, ), ;, Type, [, ], upperBounds, =, wildcard, ., getUpperBounds, (, ), ;, return]
[lowerBounds, =, wildcard, ., getLowerBounds, (, ), ;, Type, [, ], upperBounds, =, wildcard, ., getUpperBounds, (, ), ;, return]
[getLowerBounds, (, ), ;, Type, [, ], upperBounds, =, wildcard, ., getUpperBounds, (, ), ;, return, lowerBounds, ., length, !=]
[), ;, Type, [, ], upperBounds, =, wildcard, ., getUpperBounds, (, ), ;, return, lowerBounds, ., length, !=, 0, ?]
[), ;, Type, [, ], upperBounds, =, wildcard, ., getUpperBounds, (, ), ;, return, lowerBounds, ., length, !=, 0, ?]
[Type, [, ], upperBounds, =, wildcard, ., getUpperBounds, (, ), ;, return, lowerBounds, ., length, !=, 0, ?, lowerBounds, []
[upperBounds, =, wildcard, ., getUpperBounds, (, ), ;, return, lowerBounds, ., length, !=, 0, ?, lowerBounds, [, 0, ], :]
[upperBounds, =, wildcard, ., getUpperBounds, (, ), ;, return, lowerBounds, ., length, !=, 0, ?, lowerBounds, [, 0, ], :]
[wildcard, ., getUpperBounds, (, ), ;, return, lowerBounds, ., length, !=, 0, ?, lowerBounds, [, 0, ], :, upperBounds, []
[lowerBounds, [, 0, ], :, upperBounds, [, 0, ], ;, }, public, Type, [, ], interfaceBounds, (, ), {, return]
[], :, upperBounds, [, 0, ], ;, }, public, Type, [, ], interfaceBounds, (, ), {, return, new, Type, []
[return, new, Type, [, 0, ], ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (]
[return, new, Type, [, 0, ], ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (]
[Type, [, 0, ], ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, this, ==]
[], ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, this, ==, o, ), return]
[Override, public, boolean, equals, (, Object, o, ), {, if, (, this, ==, o, ), return, true, ;, if, (]
[Override, public, boolean, equals, (, Object, o, ), {, if, (, this, ==, o, ), return, true, ;, if, (]
[Override, public, boolean, equals, (, Object, o, ), {, if, (, this, ==, o, ), return, true, ;, if, (]
[boolean, equals, (, Object, o, ), {, if, (, this, ==, o, ), return, true, ;, if, (, o, ==]
[(, Object, o, ), {, if, (, this, ==, o, ), return, true, ;, if, (, o, ==, null, ||]
[(, Object, o, ), {, if, (, this, ==, o, ), return, true, ;, if, (, o, ==, null, ||]
[{, if, (, this, ==, o, ), return, true, ;, if, (, o, ==, null, ||, getClass, (, ), !=]
[{, if, (, this, ==, o, ), return, true, ;, if, (, o, ==, null, ||, getClass, (, ), !=]
[return, true, ;, if, (, o, ==, null, ||, getClass, (, ), !=, o, ., getClass, (, ), ), return]
[if, (, o, ==, null, ||, getClass, (, ), !=, o, ., getClass, (, ), ), return, false, ;, return]
[if, (, o, ==, null, ||, getClass, (, ), !=, o, ., getClass, (, ), ), return, false, ;, return]
[null, ||, getClass, (, ), !=, o, ., getClass, (, ), ), return, false, ;, return, wildcard, ., equals, (]
[null, ||, getClass, (, ), !=, o, ., getClass, (, ), ), return, false, ;, return, wildcard, ., equals, (]
[||, getClass, (, ), !=, o, ., getClass, (, ), ), return, false, ;, return, wildcard, ., equals, (, (]
[), !=, o, ., getClass, (, ), ), return, false, ;, return, wildcard, ., equals, (, (, (, TypeVarBoundedType, )]
[(, (, TypeVarBoundedType, ), o, ), ., typeVariable, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, (, TypeVarBoundedType, ), o, ), ., typeVariable, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, ), {, return, wildcard, ., hashCode, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[(, ), {, return, wildcard, ., hashCode, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[(, ), {, return, wildcard, ., hashCode, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[{, return, wildcard, ., hashCode, (, ), ;, }, @, Override, public, String, toString, (, ), {, return, "{firstBound=", +]
[hashCode, (, ), ;, }, @, Override, public, String, toString, (, ), {, return, "{firstBound=", +, firstBound, (, ), +]
[(, ), {, return, "{firstBound=", +, firstBound, (, ), +, ", interfaceBounds=[]}", ;, }, public, WildcardType, wildCard, (, ), {, return]
