[public, abstract, class, BaseSingleFieldPeriod, implements, ReadablePeriod, ,, Comparable, <, BaseSingleFieldPeriod, >, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[<, BaseSingleFieldPeriod, >, ,, Serializable, {, private, static, final, long, serialVersionUID, =, 9386874258972L, ;, private, static, final, long, START_1972, =]
[<, BaseSingleFieldPeriod, >, ,, Serializable, {, private, static, final, long, serialVersionUID, =, 9386874258972L, ;, private, static, final, long, START_1972, =]
[<, BaseSingleFieldPeriod, >, ,, Serializable, {, private, static, final, long, serialVersionUID, =, 9386874258972L, ;, private, static, final, long, START_1972, =]
[<, BaseSingleFieldPeriod, >, ,, Serializable, {, private, static, final, long, serialVersionUID, =, 9386874258972L, ;, private, static, final, long, START_1972, =]
[>, ,, Serializable, {, private, static, final, long, serialVersionUID, =, 9386874258972L, ;, private, static, final, long, START_1972, =, 2L, *]
[Serializable, {, private, static, final, long, serialVersionUID, =, 9386874258972L, ;, private, static, final, long, START_1972, =, 2L, *, 365L, *]
[private, static, final, long, serialVersionUID, =, 9386874258972L, ;, private, static, final, long, START_1972, =, 2L, *, 365L, *, 86400L, *]
[int, iPeriod, ;, protected, static, int, between, (, ReadableInstant, start, ,, ReadableInstant, end, ,, DurationFieldType, field, ), {, if, (]
[int, iPeriod, ;, protected, static, int, between, (, ReadableInstant, start, ,, ReadableInstant, end, ,, DurationFieldType, field, ), {, if, (]
[int, iPeriod, ;, protected, static, int, between, (, ReadableInstant, start, ,, ReadableInstant, end, ,, DurationFieldType, field, ), {, if, (]
[;, protected, static, int, between, (, ReadableInstant, start, ,, ReadableInstant, end, ,, DurationFieldType, field, ), {, if, (, start, ==]
[static, int, between, (, ReadableInstant, start, ,, ReadableInstant, end, ,, DurationFieldType, field, ), {, if, (, start, ==, null, ||]
[static, int, between, (, ReadableInstant, start, ,, ReadableInstant, end, ,, DurationFieldType, field, ), {, if, (, start, ==, null, ||]
[between, (, ReadableInstant, start, ,, ReadableInstant, end, ,, DurationFieldType, field, ), {, if, (, start, ==, null, ||, end, ==]
[,, ReadableInstant, end, ,, DurationFieldType, field, ), {, if, (, start, ==, null, ||, end, ==, null, ), {, throw]
[,, DurationFieldType, field, ), {, if, (, start, ==, null, ||, end, ==, null, ), {, throw, new, IllegalArgumentException, (]
[start, ==, null, ||, end, ==, null, ), {, throw, new, IllegalArgumentException, (, "ReadableInstant objects must not be null", ), ;, }, Chronology, chrono, =]
[start, ==, null, ||, end, ==, null, ), {, throw, new, IllegalArgumentException, (, "ReadableInstant objects must not be null", ), ;, }, Chronology, chrono, =]
[end, ==, null, ), {, throw, new, IllegalArgumentException, (, "ReadableInstant objects must not be null", ), ;, }, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (]
[new, IllegalArgumentException, (, "ReadableInstant objects must not be null", ), ;, }, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, start, ), ;, int, amount, =]
[new, IllegalArgumentException, (, "ReadableInstant objects must not be null", ), ;, }, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, start, ), ;, int, amount, =]
[new, IllegalArgumentException, (, "ReadableInstant objects must not be null", ), ;, }, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, start, ), ;, int, amount, =]
[), ;, }, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, start, ), ;, int, amount, =, field, ., getField, (]
[=, DateTimeUtils, ., getInstantChronology, (, start, ), ;, int, amount, =, field, ., getField, (, chrono, ), ., getDifference, (]
[=, DateTimeUtils, ., getInstantChronology, (, start, ), ;, int, amount, =, field, ., getField, (, chrono, ), ., getDifference, (]
[), ;, int, amount, =, field, ., getField, (, chrono, ), ., getDifference, (, end, ., getMillis, (, ), ,]
[), ;, int, amount, =, field, ., getField, (, chrono, ), ., getDifference, (, end, ., getMillis, (, ), ,]
[(, chrono, ), ., getDifference, (, end, ., getMillis, (, ), ,, start, ., getMillis, (, ), ), ;, return]
[amount, ;, }, protected, static, int, between, (, ReadablePartial, start, ,, ReadablePartial, end, ,, ReadablePeriod, zeroInstance, ), {, if, (]
[amount, ;, }, protected, static, int, between, (, ReadablePartial, start, ,, ReadablePartial, end, ,, ReadablePeriod, zeroInstance, ), {, if, (]
[amount, ;, }, protected, static, int, between, (, ReadablePartial, start, ,, ReadablePartial, end, ,, ReadablePeriod, zeroInstance, ), {, if, (]
[}, protected, static, int, between, (, ReadablePartial, start, ,, ReadablePartial, end, ,, ReadablePeriod, zeroInstance, ), {, if, (, start, ==]
[static, int, between, (, ReadablePartial, start, ,, ReadablePartial, end, ,, ReadablePeriod, zeroInstance, ), {, if, (, start, ==, null, ||]
[static, int, between, (, ReadablePartial, start, ,, ReadablePartial, end, ,, ReadablePeriod, zeroInstance, ), {, if, (, start, ==, null, ||]
[between, (, ReadablePartial, start, ,, ReadablePartial, end, ,, ReadablePeriod, zeroInstance, ), {, if, (, start, ==, null, ||, end, ==]
[,, ReadablePartial, end, ,, ReadablePeriod, zeroInstance, ), {, if, (, start, ==, null, ||, end, ==, null, ), {, throw]
[,, ReadablePeriod, zeroInstance, ), {, if, (, start, ==, null, ||, end, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, start, ==, null, ||, end, ==, null, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must not be null", ), ;, }, if, (]
[(, start, ==, null, ||, end, ==, null, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must not be null", ), ;, }, if, (]
[(, start, ==, null, ||, end, ==, null, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must not be null", ), ;, }, if, (]
[==, null, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must not be null", ), ;, }, if, (, start, ., size, (, ), !=]
[==, null, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must not be null", ), ;, }, if, (, start, ., size, (, ), !=]
["ReadablePartial objects must not be null", ), ;, }, if, (, start, ., size, (, ), !=, end, ., size, (, ), ), {, throw]
[}, if, (, start, ., size, (, ), !=, end, ., size, (, ), ), {, throw, new, IllegalArgumentException, (]
[end, ., size, (, ), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, for, (, int, i, =]
[), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, for, (, int, i, =, 0, ,, isize, =]
[), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, for, (, int, i, =, 0, ,, isize, =]
[(, "ReadablePartial objects must have the same set of fields", ), ;, }, for, (, int, i, =, 0, ,, isize, =, start, ., size, (, ), ;]
[(, "ReadablePartial objects must have the same set of fields", ), ;, }, for, (, int, i, =, 0, ,, isize, =, start, ., size, (, ), ;]
[), ;, }, for, (, int, i, =, 0, ,, isize, =, start, ., size, (, ), ;, i, <]
[}, for, (, int, i, =, 0, ,, isize, =, start, ., size, (, ), ;, i, <, isize, ;]
[}, for, (, int, i, =, 0, ,, isize, =, start, ., size, (, ), ;, i, <, isize, ;]
[0, ,, isize, =, start, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, if, (]
[0, ,, isize, =, start, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, if, (]
[0, ,, isize, =, start, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, if, (]
[start, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, if, (, start, ., getFieldType, (]
[(, ), ;, i, <, isize, ;, i, ++, ), {, if, (, start, ., getFieldType, (, i, ), !=]
[(, ), ;, i, <, isize, ;, i, ++, ), {, if, (, start, ., getFieldType, (, i, ), !=]
[<, isize, ;, i, ++, ), {, if, (, start, ., getFieldType, (, i, ), !=, end, ., getFieldType, (]
[), {, if, (, start, ., getFieldType, (, i, ), !=, end, ., getFieldType, (, i, ), ), {, throw]
[(, start, ., getFieldType, (, i, ), !=, end, ., getFieldType, (, i, ), ), {, throw, new, IllegalArgumentException, (]
[!=, end, ., getFieldType, (, i, ), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, }, if, (]
[!=, end, ., getFieldType, (, i, ), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, }, if, (]
[!=, end, ., getFieldType, (, i, ), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, }, if, (]
[(, i, ), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, }, if, (, DateTimeUtils, ., isContiguous, (]
[), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, }, if, (, DateTimeUtils, ., isContiguous, (, start, ), ==]
[IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, }, if, (, DateTimeUtils, ., isContiguous, (, start, ), ==, false, ), {, throw]
[), ;, }, }, if, (, DateTimeUtils, ., isContiguous, (, start, ), ==, false, ), {, throw, new, IllegalArgumentException, (]
[., isContiguous, (, start, ), ==, false, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must be contiguous", ), ;, }, Chronology, chrono, =]
[., isContiguous, (, start, ), ==, false, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must be contiguous", ), ;, }, Chronology, chrono, =]
[., isContiguous, (, start, ), ==, false, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must be contiguous", ), ;, }, Chronology, chrono, =]
[), ==, false, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must be contiguous", ), ;, }, Chronology, chrono, =, DateTimeUtils, ., getChronology, (]
[), ==, false, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must be contiguous", ), ;, }, Chronology, chrono, =, DateTimeUtils, ., getChronology, (]
[DateTimeUtils, ., getChronology, (, start, ., getChronology, (, ), ), ., withUTC, (, ), ;, int, [, ], values, =]
[DateTimeUtils, ., getChronology, (, start, ., getChronology, (, ), ), ., withUTC, (, ), ;, int, [, ], values, =]
[start, ., getChronology, (, ), ), ., withUTC, (, ), ;, int, [, ], values, =, chrono, ., get, (]
[getChronology, (, ), ), ., withUTC, (, ), ;, int, [, ], values, =, chrono, ., get, (, zeroInstance, ,]
[getChronology, (, ), ), ., withUTC, (, ), ;, int, [, ], values, =, chrono, ., get, (, zeroInstance, ,]
[., withUTC, (, ), ;, int, [, ], values, =, chrono, ., get, (, zeroInstance, ,, chrono, ., set, (]
[(, ), ;, int, [, ], values, =, chrono, ., get, (, zeroInstance, ,, chrono, ., set, (, start, ,]
[int, [, ], values, =, chrono, ., get, (, zeroInstance, ,, chrono, ., set, (, start, ,, START_1972, ), ,]
[int, [, ], values, =, chrono, ., get, (, zeroInstance, ,, chrono, ., set, (, start, ,, START_1972, ), ,]
[=, chrono, ., get, (, zeroInstance, ,, chrono, ., set, (, start, ,, START_1972, ), ,, chrono, ., set, (]
[., get, (, zeroInstance, ,, chrono, ., set, (, start, ,, START_1972, ), ,, chrono, ., set, (, end, ,]
[chrono, ., set, (, start, ,, START_1972, ), ,, chrono, ., set, (, end, ,, START_1972, ), ), ;, return]
[chrono, ., set, (, start, ,, START_1972, ), ,, chrono, ., set, (, end, ,, START_1972, ), ), ;, return]
[set, (, start, ,, START_1972, ), ,, chrono, ., set, (, end, ,, START_1972, ), ), ;, return, values, []
[values, [, 0, ], ;, }, protected, static, int, standardPeriodIn, (, ReadablePeriod, period, ,, long, millisPerUnit, ), {, if, (]
[values, [, 0, ], ;, }, protected, static, int, standardPeriodIn, (, ReadablePeriod, period, ,, long, millisPerUnit, ), {, if, (]
[0, ], ;, }, protected, static, int, standardPeriodIn, (, ReadablePeriod, period, ,, long, millisPerUnit, ), {, if, (, period, ==]
[protected, static, int, standardPeriodIn, (, ReadablePeriod, period, ,, long, millisPerUnit, ), {, if, (, period, ==, null, ), {, return]
[period, ,, long, millisPerUnit, ), {, if, (, period, ==, null, ), {, return, 0, ;, }, Chronology, iso, =]
[period, ,, long, millisPerUnit, ), {, if, (, period, ==, null, ), {, return, 0, ;, }, Chronology, iso, =]
[==, null, ), {, return, 0, ;, }, Chronology, iso, =, ISOChronology, ., getInstanceUTC, (, ), ;, long, duration, =]
[}, Chronology, iso, =, ISOChronology, ., getInstanceUTC, (, ), ;, long, duration, =, 0L, ;, for, (, int, i, =]
[iso, =, ISOChronology, ., getInstanceUTC, (, ), ;, long, duration, =, 0L, ;, for, (, int, i, =, 0, ;]
[iso, =, ISOChronology, ., getInstanceUTC, (, ), ;, long, duration, =, 0L, ;, for, (, int, i, =, 0, ;]
[ISOChronology, ., getInstanceUTC, (, ), ;, long, duration, =, 0L, ;, for, (, int, i, =, 0, ;, i, <]
[ISOChronology, ., getInstanceUTC, (, ), ;, long, duration, =, 0L, ;, for, (, int, i, =, 0, ;, i, <]
[long, duration, =, 0L, ;, for, (, int, i, =, 0, ;, i, <, period, ., size, (, ), ;]
[long, duration, =, 0L, ;, for, (, int, i, =, 0, ;, i, <, period, ., size, (, ), ;]
[int, i, =, 0, ;, i, <, period, ., size, (, ), ;, i, ++, ), {, int, value, =]
[int, i, =, 0, ;, i, <, period, ., size, (, ), ;, i, ++, ), {, int, value, =]
[;, i, <, period, ., size, (, ), ;, i, ++, ), {, int, value, =, period, ., getValue, (]
[size, (, ), ;, i, ++, ), {, int, value, =, period, ., getValue, (, i, ), ;, if, (]
[size, (, ), ;, i, ++, ), {, int, value, =, period, ., getValue, (, i, ), ;, if, (]
[), ;, i, ++, ), {, int, value, =, period, ., getValue, (, i, ), ;, if, (, value, !=]
[int, value, =, period, ., getValue, (, i, ), ;, if, (, value, !=, 0, ), {, DurationField, field, =]
[int, value, =, period, ., getValue, (, i, ), ;, if, (, value, !=, 0, ), {, DurationField, field, =]
[int, value, =, period, ., getValue, (, i, ), ;, if, (, value, !=, 0, ), {, DurationField, field, =]
[., getValue, (, i, ), ;, if, (, value, !=, 0, ), {, DurationField, field, =, period, ., getFieldType, (]
[;, if, (, value, !=, 0, ), {, DurationField, field, =, period, ., getFieldType, (, i, ), ., getField, (]
[0, ), {, DurationField, field, =, period, ., getFieldType, (, i, ), ., getField, (, iso, ), ;, if, (]
[0, ), {, DurationField, field, =, period, ., getFieldType, (, i, ), ., getField, (, iso, ), ;, if, (]
[0, ), {, DurationField, field, =, period, ., getFieldType, (, i, ), ., getField, (, iso, ), ;, if, (]
[period, ., getFieldType, (, i, ), ., getField, (, iso, ), ;, if, (, field, ., isPrecise, (, ), ==]
[i, ), ., getField, (, iso, ), ;, if, (, field, ., isPrecise, (, ), ==, false, ), {, throw]
[getField, (, iso, ), ;, if, (, field, ., isPrecise, (, ), ==, false, ), {, throw, new, IllegalArgumentException, (]
[getField, (, iso, ), ;, if, (, field, ., isPrecise, (, ), ==, false, ), {, throw, new, IllegalArgumentException, (]
[getField, (, iso, ), ;, if, (, field, ., isPrecise, (, ), ==, false, ), {, throw, new, IllegalArgumentException, (]
[getField, (, iso, ), ;, if, (, field, ., isPrecise, (, ), ==, false, ), {, throw, new, IllegalArgumentException, (]
[iso, ), ;, if, (, field, ., isPrecise, (, ), ==, false, ), {, throw, new, IllegalArgumentException, (, "Cannot convert period to duration as ", +]
[iso, ), ;, if, (, field, ., isPrecise, (, ), ==, false, ), {, throw, new, IllegalArgumentException, (, "Cannot convert period to duration as ", +]
[., isPrecise, (, ), ==, false, ), {, throw, new, IllegalArgumentException, (, "Cannot convert period to duration as ", +, field, ., getName, (, ), +]
[(, ), ==, false, ), {, throw, new, IllegalArgumentException, (, "Cannot convert period to duration as ", +, field, ., getName, (, ), +, " is not precise in the period ", +]
[), {, throw, new, IllegalArgumentException, (, "Cannot convert period to duration as ", +, field, ., getName, (, ), +, " is not precise in the period ", +, period, ), ;, }]
[throw, new, IllegalArgumentException, (, "Cannot convert period to duration as ", +, field, ., getName, (, ), +, " is not precise in the period ", +, period, ), ;, }, duration, =]
[throw, new, IllegalArgumentException, (, "Cannot convert period to duration as ", +, field, ., getName, (, ), +, " is not precise in the period ", +, period, ), ;, }, duration, =]
["Cannot convert period to duration as ", +, field, ., getName, (, ), +, " is not precise in the period ", +, period, ), ;, }, duration, =, FieldUtils, ., safeAdd, (]
[field, ., getName, (, ), +, " is not precise in the period ", +, period, ), ;, }, duration, =, FieldUtils, ., safeAdd, (, duration, ,]
[field, ., getName, (, ), +, " is not precise in the period ", +, period, ), ;, }, duration, =, FieldUtils, ., safeAdd, (, duration, ,]
[), +, " is not precise in the period ", +, period, ), ;, }, duration, =, FieldUtils, ., safeAdd, (, duration, ,, FieldUtils, ., safeMultiply, (]
[), +, " is not precise in the period ", +, period, ), ;, }, duration, =, FieldUtils, ., safeAdd, (, duration, ,, FieldUtils, ., safeMultiply, (]
[;, }, duration, =, FieldUtils, ., safeAdd, (, duration, ,, FieldUtils, ., safeMultiply, (, field, ., getUnitMillis, (, ), ,]
[(, duration, ,, FieldUtils, ., safeMultiply, (, field, ., getUnitMillis, (, ), ,, value, ), ), ;, }, }, return]
[(, duration, ,, FieldUtils, ., safeMultiply, (, field, ., getUnitMillis, (, ), ,, value, ), ), ;, }, }, return]
[., safeMultiply, (, field, ., getUnitMillis, (, ), ,, value, ), ), ;, }, }, return, FieldUtils, ., safeToInt, (]
[., safeMultiply, (, field, ., getUnitMillis, (, ), ,, value, ), ), ;, }, }, return, FieldUtils, ., safeToInt, (]
[(, field, ., getUnitMillis, (, ), ,, value, ), ), ;, }, }, return, FieldUtils, ., safeToInt, (, duration, /]
[., safeToInt, (, duration, /, millisPerUnit, ), ;, }, protected, BaseSingleFieldPeriod, (, int, period, ), {, super, (, ), ;]
[(, duration, /, millisPerUnit, ), ;, }, protected, BaseSingleFieldPeriod, (, int, period, ), {, super, (, ), ;, iPeriod, =]
[int, period, ), {, super, (, ), ;, iPeriod, =, period, ;, }, protected, int, getValue, (, ), {, return]
[;, }, protected, int, getValue, (, ), {, return, iPeriod, ;, }, protected, void, setValue, (, int, value, ), {]
[protected, int, getValue, (, ), {, return, iPeriod, ;, }, protected, void, setValue, (, int, value, ), {, iPeriod, =]
[abstract, DurationFieldType, getFieldType, (, ), ;, public, abstract, PeriodType, getPeriodType, (, ), ;, public, int, size, (, ), {, return]
[public, int, size, (, ), {, return, 1, ;, }, public, DurationFieldType, getFieldType, (, int, index, ), {, if, (]
[public, int, size, (, ), {, return, 1, ;, }, public, DurationFieldType, getFieldType, (, int, index, ), {, if, (]
[size, (, ), {, return, 1, ;, }, public, DurationFieldType, getFieldType, (, int, index, ), {, if, (, index, !=]
[return, 1, ;, }, public, DurationFieldType, getFieldType, (, int, index, ), {, if, (, index, !=, 0, ), {, throw]
[}, public, DurationFieldType, getFieldType, (, int, index, ), {, if, (, index, !=, 0, ), {, throw, new, IndexOutOfBoundsException, (]
[}, public, DurationFieldType, getFieldType, (, int, index, ), {, if, (, index, !=, 0, ), {, throw, new, IndexOutOfBoundsException, (]
[(, int, index, ), {, if, (, index, !=, 0, ), {, throw, new, IndexOutOfBoundsException, (, String, ., valueOf, (]
[(, index, !=, 0, ), {, throw, new, IndexOutOfBoundsException, (, String, ., valueOf, (, index, ), ), ;, }, return]
[), ), ;, }, return, getFieldType, (, ), ;, }, public, int, getValue, (, int, index, ), {, if, (]
[), ), ;, }, return, getFieldType, (, ), ;, }, public, int, getValue, (, int, index, ), {, if, (]
[;, }, return, getFieldType, (, ), ;, }, public, int, getValue, (, int, index, ), {, if, (, index, !=]
[(, ), ;, }, public, int, getValue, (, int, index, ), {, if, (, index, !=, 0, ), {, throw]
[}, public, int, getValue, (, int, index, ), {, if, (, index, !=, 0, ), {, throw, new, IndexOutOfBoundsException, (]
[}, public, int, getValue, (, int, index, ), {, if, (, index, !=, 0, ), {, throw, new, IndexOutOfBoundsException, (]
[(, int, index, ), {, if, (, index, !=, 0, ), {, throw, new, IndexOutOfBoundsException, (, String, ., valueOf, (]
[(, index, !=, 0, ), {, throw, new, IndexOutOfBoundsException, (, String, ., valueOf, (, index, ), ), ;, }, return]
[), ), ;, }, return, getValue, (, ), ;, }, public, int, get, (, DurationFieldType, type, ), {, if, (]
[), ), ;, }, return, getValue, (, ), ;, }, public, int, get, (, DurationFieldType, type, ), {, if, (]
[;, }, return, getValue, (, ), ;, }, public, int, get, (, DurationFieldType, type, ), {, if, (, type, ==]
[;, }, public, int, get, (, DurationFieldType, type, ), {, if, (, type, ==, getFieldType, (, ), ), {, return]
[DurationFieldType, type, ), {, if, (, type, ==, getFieldType, (, ), ), {, return, getValue, (, ), ;, }, return]
[{, return, getValue, (, ), ;, }, return, 0, ;, }, public, boolean, isSupported, (, DurationFieldType, type, ), {, return]
[return, getValue, (, ), ;, }, return, 0, ;, }, public, boolean, isSupported, (, DurationFieldType, type, ), {, return, (]
[return, getValue, (, ), ;, }, return, 0, ;, }, public, boolean, isSupported, (, DurationFieldType, type, ), {, return, (]
[(, ), ;, }, return, 0, ;, }, public, boolean, isSupported, (, DurationFieldType, type, ), {, return, (, type, ==]
[type, ), {, return, (, type, ==, getFieldType, (, ), ), ;, }, public, Period, toPeriod, (, ), {, return]
[type, ), {, return, (, type, ==, getFieldType, (, ), ), ;, }, public, Period, toPeriod, (, ), {, return]
[type, ), {, return, (, type, ==, getFieldType, (, ), ), ;, }, public, Period, toPeriod, (, ), {, return]
[==, getFieldType, (, ), ), ;, }, public, Period, toPeriod, (, ), {, return, Period, ., ZERO, ., withFields, (]
[return, Period, ., ZERO, ., withFields, (, this, ), ;, }, public, MutablePeriod, toMutablePeriod, (, ), {, MutablePeriod, period, =]
[withFields, (, this, ), ;, }, public, MutablePeriod, toMutablePeriod, (, ), {, MutablePeriod, period, =, new, MutablePeriod, (, ), ;]
[withFields, (, this, ), ;, }, public, MutablePeriod, toMutablePeriod, (, ), {, MutablePeriod, period, =, new, MutablePeriod, (, ), ;]
[;, }, public, MutablePeriod, toMutablePeriod, (, ), {, MutablePeriod, period, =, new, MutablePeriod, (, ), ;, period, ., add, (]
[toMutablePeriod, (, ), {, MutablePeriod, period, =, new, MutablePeriod, (, ), ;, period, ., add, (, this, ), ;, return]
[., add, (, this, ), ;, return, period, ;, }, public, boolean, equals, (, Object, period, ), {, if, (]
[., add, (, this, ), ;, return, period, ;, }, public, boolean, equals, (, Object, period, ), {, if, (]
[(, this, ), ;, return, period, ;, }, public, boolean, equals, (, Object, period, ), {, if, (, this, ==]
[return, period, ;, }, public, boolean, equals, (, Object, period, ), {, if, (, this, ==, period, ), {, return]
[boolean, equals, (, Object, period, ), {, if, (, this, ==, period, ), {, return, true, ;, }, if, (]
[boolean, equals, (, Object, period, ), {, if, (, this, ==, period, ), {, return, true, ;, }, if, (]
[boolean, equals, (, Object, period, ), {, if, (, this, ==, period, ), {, return, true, ;, }, if, (]
[period, ), {, if, (, this, ==, period, ), {, return, true, ;, }, if, (, period, instanceof, ReadablePeriod, ==]
[(, this, ==, period, ), {, return, true, ;, }, if, (, period, instanceof, ReadablePeriod, ==, false, ), {, return]
[return, true, ;, }, if, (, period, instanceof, ReadablePeriod, ==, false, ), {, return, false, ;, }, ReadablePeriod, other, =]
[}, if, (, period, instanceof, ReadablePeriod, ==, false, ), {, return, false, ;, }, ReadablePeriod, other, =, (, ReadablePeriod, )]
[period, instanceof, ReadablePeriod, ==, false, ), {, return, false, ;, }, ReadablePeriod, other, =, (, ReadablePeriod, ), period, ;, return]
[instanceof, ReadablePeriod, ==, false, ), {, return, false, ;, }, ReadablePeriod, other, =, (, ReadablePeriod, ), period, ;, return, (]
[instanceof, ReadablePeriod, ==, false, ), {, return, false, ;, }, ReadablePeriod, other, =, (, ReadablePeriod, ), period, ;, return, (]
[instanceof, ReadablePeriod, ==, false, ), {, return, false, ;, }, ReadablePeriod, other, =, (, ReadablePeriod, ), period, ;, return, (]
[instanceof, ReadablePeriod, ==, false, ), {, return, false, ;, }, ReadablePeriod, other, =, (, ReadablePeriod, ), period, ;, return, (]
[return, false, ;, }, ReadablePeriod, other, =, (, ReadablePeriod, ), period, ;, return, (, other, ., getPeriodType, (, ), ==]
[ReadablePeriod, other, =, (, ReadablePeriod, ), period, ;, return, (, other, ., getPeriodType, (, ), ==, getPeriodType, (, ), &&]
[ReadablePeriod, other, =, (, ReadablePeriod, ), period, ;, return, (, other, ., getPeriodType, (, ), ==, getPeriodType, (, ), &&]
[ReadablePeriod, other, =, (, ReadablePeriod, ), period, ;, return, (, other, ., getPeriodType, (, ), ==, getPeriodType, (, ), &&]
[ReadablePeriod, ), period, ;, return, (, other, ., getPeriodType, (, ), ==, getPeriodType, (, ), &&, other, ., getValue, (]
[;, return, (, other, ., getPeriodType, (, ), ==, getPeriodType, (, ), &&, other, ., getValue, (, 0, ), ==]
[getValue, (, 0, ), ==, getValue, (, ), ), ;, }, public, int, hashCode, (, ), {, int, total, =]
[0, ), ==, getValue, (, ), ), ;, }, public, int, hashCode, (, ), {, int, total, =, 17, ;]
[==, getValue, (, ), ), ;, }, public, int, hashCode, (, ), {, int, total, =, 17, ;, total, =]
[==, getValue, (, ), ), ;, }, public, int, hashCode, (, ), {, int, total, =, 17, ;, total, =]
[==, getValue, (, ), ), ;, }, public, int, hashCode, (, ), {, int, total, =, 17, ;, total, =]
[(, ), ), ;, }, public, int, hashCode, (, ), {, int, total, =, 17, ;, total, =, 27, *]
[), ;, }, public, int, hashCode, (, ), {, int, total, =, 17, ;, total, =, 27, *, total, +]
[int, hashCode, (, ), {, int, total, =, 17, ;, total, =, 27, *, total, +, getValue, (, ), ;]
[(, ), {, int, total, =, 17, ;, total, =, 27, *, total, +, getValue, (, ), ;, total, =]
[(, ), {, int, total, =, 17, ;, total, =, 27, *, total, +, getValue, (, ), ;, total, =]
[(, ), {, int, total, =, 17, ;, total, =, 27, *, total, +, getValue, (, ), ;, total, =]
[{, int, total, =, 17, ;, total, =, 27, *, total, +, getValue, (, ), ;, total, =, 27, *]
[total, =, 17, ;, total, =, 27, *, total, +, getValue, (, ), ;, total, =, 27, *, total, +]
[total, =, 17, ;, total, =, 27, *, total, +, getValue, (, ), ;, total, =, 27, *, total, +]
[+, getValue, (, ), ;, total, =, 27, *, total, +, getFieldType, (, ), ., hashCode, (, ), ;, return]
[), ., hashCode, (, ), ;, return, total, ;, }, public, int, compareTo, (, BaseSingleFieldPeriod, other, ), {, if, (]
[), ., hashCode, (, ), ;, return, total, ;, }, public, int, compareTo, (, BaseSingleFieldPeriod, other, ), {, if, (]
[), ., hashCode, (, ), ;, return, total, ;, }, public, int, compareTo, (, BaseSingleFieldPeriod, other, ), {, if, (]
[return, total, ;, }, public, int, compareTo, (, BaseSingleFieldPeriod, other, ), {, if, (, other, ., getClass, (, ), !=]
[compareTo, (, BaseSingleFieldPeriod, other, ), {, if, (, other, ., getClass, (, ), !=, getClass, (, ), ), {, throw]
[other, ), {, if, (, other, ., getClass, (, ), !=, getClass, (, ), ), {, throw, new, ClassCastException, (]
[other, ), {, if, (, other, ., getClass, (, ), !=, getClass, (, ), ), {, throw, new, ClassCastException, (]
[other, ), {, if, (, other, ., getClass, (, ), !=, getClass, (, ), ), {, throw, new, ClassCastException, (]
[(, other, ., getClass, (, ), !=, getClass, (, ), ), {, throw, new, ClassCastException, (, getClass, (, ), +]
[., getClass, (, ), !=, getClass, (, ), ), {, throw, new, ClassCastException, (, getClass, (, ), +, " cannot be compared to ", +]
[., getClass, (, ), !=, getClass, (, ), ), {, throw, new, ClassCastException, (, getClass, (, ), +, " cannot be compared to ", +]
[new, ClassCastException, (, getClass, (, ), +, " cannot be compared to ", +, other, ., getClass, (, ), ), ;, }, int, otherValue, =]
[new, ClassCastException, (, getClass, (, ), +, " cannot be compared to ", +, other, ., getClass, (, ), ), ;, }, int, otherValue, =]
[other, ., getClass, (, ), ), ;, }, int, otherValue, =, other, ., getValue, (, ), ;, int, thisValue, =]
[;, }, int, otherValue, =, other, ., getValue, (, ), ;, int, thisValue, =, getValue, (, ), ;, if, (]
[;, }, int, otherValue, =, other, ., getValue, (, ), ;, int, thisValue, =, getValue, (, ), ;, if, (]
[int, otherValue, =, other, ., getValue, (, ), ;, int, thisValue, =, getValue, (, ), ;, if, (, thisValue, >]
[., getValue, (, ), ;, int, thisValue, =, getValue, (, ), ;, if, (, thisValue, >, otherValue, ), {, return]
[int, thisValue, =, getValue, (, ), ;, if, (, thisValue, >, otherValue, ), {, return, 1, ;, }, if, (]
[int, thisValue, =, getValue, (, ), ;, if, (, thisValue, >, otherValue, ), {, return, 1, ;, }, if, (]
[=, getValue, (, ), ;, if, (, thisValue, >, otherValue, ), {, return, 1, ;, }, if, (, thisValue, <]
[;, if, (, thisValue, >, otherValue, ), {, return, 1, ;, }, if, (, thisValue, <, otherValue, ), {, return]
[if, (, thisValue, >, otherValue, ), {, return, 1, ;, }, if, (, thisValue, <, otherValue, ), {, return, -]
[otherValue, ), {, return, 1, ;, }, if, (, thisValue, <, otherValue, ), {, return, -, 1, ;, }, return]
