[;, private, static, final, int, THREAD_POOL_SIZE, =, 1, ;, private, final, ScheduledExecutorService, executorService, ;, private, final, long, period, ;, private]
[;, private, final, ScheduledExecutorService, executorService, ;, private, final, long, period, ;, private, final, TimeUnit, unit, ;, private, final, boolean, ownExecutor]
[,, timePeriod, ,, timeUnit, ,, limit, ), ;, }, public, TimedSemaphore, (, final, ScheduledExecutorService, service, ,, final, long, timePeriod, ,]
[,, timeUnit, ,, limit, ), ;, }, public, TimedSemaphore, (, final, ScheduledExecutorService, service, ,, final, long, timePeriod, ,, final, TimeUnit]
[,, limit, ), ;, }, public, TimedSemaphore, (, final, ScheduledExecutorService, service, ,, final, long, timePeriod, ,, final, TimeUnit, timeUnit, ,]
[), ;, }, public, TimedSemaphore, (, final, ScheduledExecutorService, service, ,, final, long, timePeriod, ,, final, TimeUnit, timeUnit, ,, final, int]
[), {, throw, new, IllegalArgumentException, (, "Time period must be greater 0!", ), ;, }, period, =, timePeriod, ;, unit, =, timeUnit, ;, if, (]
[<=, 0, ), {, throw, new, IllegalArgumentException, (, "Time period must be greater 0!", ), ;, }, period, =, timePeriod, ;, unit, =, timeUnit, ;]
[), {, throw, new, IllegalArgumentException, (, "Time period must be greater 0!", ), ;, }, period, =, timePeriod, ;, unit, =, timeUnit, ;, if, (]
[;, }, period, =, timePeriod, ;, unit, =, timeUnit, ;, if, (, service, !=, null, ), {, executorService, =, service]
[), ;, }, period, =, timePeriod, ;, unit, =, timeUnit, ;, if, (, service, !=, null, ), {, executorService, =]
[=, timePeriod, ;, unit, =, timeUnit, ;, if, (, service, !=, null, ), {, executorService, =, service, ;, ownExecutor, =]
[;, unit, =, timeUnit, ;, if, (, service, !=, null, ), {, executorService, =, service, ;, ownExecutor, =, false, ;]
[=, timeUnit, ;, if, (, service, !=, null, ), {, executorService, =, service, ;, ownExecutor, =, false, ;, }, else]
[;, if, (, service, !=, null, ), {, executorService, =, service, ;, ownExecutor, =, false, ;, }, else, {, final]
[), {, executorService, =, service, ;, ownExecutor, =, false, ;, }, else, {, final, ScheduledThreadPoolExecutor, s, =, new, ScheduledThreadPoolExecutor, (]
[!=, null, ), {, executorService, =, service, ;, ownExecutor, =, false, ;, }, else, {, final, ScheduledThreadPoolExecutor, s, =, new]
[), {, executorService, =, service, ;, ownExecutor, =, false, ;, }, else, {, final, ScheduledThreadPoolExecutor, s, =, new, ScheduledThreadPoolExecutor, (]
[=, service, ;, ownExecutor, =, false, ;, }, else, {, final, ScheduledThreadPoolExecutor, s, =, new, ScheduledThreadPoolExecutor, (, THREAD_POOL_SIZE, ), ;]
[;, ownExecutor, =, false, ;, }, else, {, final, ScheduledThreadPoolExecutor, s, =, new, ScheduledThreadPoolExecutor, (, THREAD_POOL_SIZE, ), ;, s, .]
[=, false, ;, }, else, {, final, ScheduledThreadPoolExecutor, s, =, new, ScheduledThreadPoolExecutor, (, THREAD_POOL_SIZE, ), ;, s, ., setContinueExistingPeriodicTasksAfterShutdownPolicy, (]
[;, }, else, {, final, ScheduledThreadPoolExecutor, s, =, new, ScheduledThreadPoolExecutor, (, THREAD_POOL_SIZE, ), ;, s, ., setContinueExistingPeriodicTasksAfterShutdownPolicy, (, false, )]
[;, s, ., setContinueExistingPeriodicTasksAfterShutdownPolicy, (, false, ), ;, s, ., setExecuteExistingDelayedTasksAfterShutdownPolicy, (, false, ), ;, executorService, =, s, ;, ownExecutor]
[), ;, s, ., setContinueExistingPeriodicTasksAfterShutdownPolicy, (, false, ), ;, s, ., setExecuteExistingDelayedTasksAfterShutdownPolicy, (, false, ), ;, executorService, =, s, ;]
[;, s, ., setExecuteExistingDelayedTasksAfterShutdownPolicy, (, false, ), ;, executorService, =, s, ;, ownExecutor, =, true, ;, }, setLimit, (, limit]
[., setContinueExistingPeriodicTasksAfterShutdownPolicy, (, false, ), ;, s, ., setExecuteExistingDelayedTasksAfterShutdownPolicy, (, false, ), ;, executorService, =, s, ;, ownExecutor, =, true]
[), ;, s, ., setExecuteExistingDelayedTasksAfterShutdownPolicy, (, false, ), ;, executorService, =, s, ;, ownExecutor, =, true, ;, }, setLimit, (]
[;, executorService, =, s, ;, ownExecutor, =, true, ;, }, setLimit, (, limit, ), ;, }, public, final, synchronized, int]
[., setExecuteExistingDelayedTasksAfterShutdownPolicy, (, false, ), ;, executorService, =, s, ;, ownExecutor, =, true, ;, }, setLimit, (, limit, ), ;]
[), ;, executorService, =, s, ;, ownExecutor, =, true, ;, }, setLimit, (, limit, ), ;, }, public, final, synchronized]
[=, s, ;, ownExecutor, =, true, ;, }, setLimit, (, limit, ), ;, }, public, final, synchronized, int, getLimit, (]
[;, ownExecutor, =, true, ;, }, setLimit, (, limit, ), ;, }, public, final, synchronized, int, getLimit, (, ), {]
[=, true, ;, }, setLimit, (, limit, ), ;, }, public, final, synchronized, int, getLimit, (, ), {, return, limit]
[;, }, setLimit, (, limit, ), ;, }, public, final, synchronized, int, getLimit, (, ), {, return, limit, ;, }]
[;, }, public, final, synchronized, int, getLimit, (, ), {, return, limit, ;, }, public, final, synchronized, void, setLimit, (]
[), ;, }, public, final, synchronized, int, getLimit, (, ), {, return, limit, ;, }, public, final, synchronized, void, setLimit]
[;, }, public, final, synchronized, void, setLimit, (, final, int, limit, ), {, this, ., limit, =, limit, ;, }]
[=, limit, ;, }, public, synchronized, void, shutdown, (, ), {, if, (, !, shutdown, ), {, if, (, ownExecutor]
[., limit, =, limit, ;, }, public, synchronized, void, shutdown, (, ), {, if, (, !, shutdown, ), {, if]
[;, }, public, synchronized, void, shutdown, (, ), {, if, (, !, shutdown, ), {, if, (, ownExecutor, ), {]
[), {, if, (, ownExecutor, ), {, getExecutorService, (, ), ., shutdownNow, (, ), ;, }, if, (, task, !=]
[), {, if, (, ownExecutor, ), {, getExecutorService, (, ), ., shutdownNow, (, ), ;, }, if, (, task, !=]
[), {, getExecutorService, (, ), ., shutdownNow, (, ), ;, }, if, (, task, !=, null, ), {, task, .]
[;, }, if, (, task, !=, null, ), {, task, ., cancel, (, false, ), ;, }, shutdown, =, true]
[., shutdownNow, (, ), ;, }, if, (, task, !=, null, ), {, task, ., cancel, (, false, ), ;]
[), {, task, ., cancel, (, false, ), ;, }, shutdown, =, true, ;, }, }, public, synchronized, boolean, isShutdown]
[!=, null, ), {, task, ., cancel, (, false, ), ;, }, shutdown, =, true, ;, }, }, public, synchronized]
[), {, task, ., cancel, (, false, ), ;, }, shutdown, =, true, ;, }, }, public, synchronized, boolean, isShutdown]
[;, }, shutdown, =, true, ;, }, }, public, synchronized, boolean, isShutdown, (, ), {, return, shutdown, ;, }, public]
[., cancel, (, false, ), ;, }, shutdown, =, true, ;, }, }, public, synchronized, boolean, isShutdown, (, ), {]
[), ;, }, shutdown, =, true, ;, }, }, public, synchronized, boolean, isShutdown, (, ), {, return, shutdown, ;, }]
[=, true, ;, }, }, public, synchronized, boolean, isShutdown, (, ), {, return, shutdown, ;, }, public, synchronized, void, acquire]
[;, }, }, public, synchronized, boolean, isShutdown, (, ), {, return, shutdown, ;, }, public, synchronized, void, acquire, (, )]
[;, }, public, synchronized, void, acquire, (, ), throws, InterruptedException, {, if, (, isShutdown, (, ), ), {, throw, new]
[), {, throw, new, IllegalStateException, (, "TimedSemaphore is shut down!", ), ;, }, if, (, task, ==, null, ), {, task, =, startTimer]
[;, }, if, (, task, ==, null, ), {, task, =, startTimer, (, ), ;, }, boolean, canPass, =, false]
[), ;, }, if, (, task, ==, null, ), {, task, =, startTimer, (, ), ;, }, boolean, canPass, =]
[), {, task, =, startTimer, (, ), ;, }, boolean, canPass, =, false, ;, do, {, canPass, =, getLimit, (]
[==, null, ), {, task, =, startTimer, (, ), ;, }, boolean, canPass, =, false, ;, do, {, canPass, =]
[), {, task, =, startTimer, (, ), ;, }, boolean, canPass, =, false, ;, do, {, canPass, =, getLimit, (]
[=, startTimer, (, ), ;, }, boolean, canPass, =, false, ;, do, {, canPass, =, getLimit, (, ), <=, NO_LIMIT]
[;, }, boolean, canPass, =, false, ;, do, {, canPass, =, getLimit, (, ), <=, NO_LIMIT, ||, acquireCount, <, getLimit]
[;, do, {, canPass, =, getLimit, (, ), <=, NO_LIMIT, ||, acquireCount, <, getLimit, (, ), ;, if, (, !]
[=, getLimit, (, ), <=, NO_LIMIT, ||, acquireCount, <, getLimit, (, ), ;, if, (, !, canPass, ), {, wait]
[;, if, (, !, canPass, ), {, wait, (, ), ;, }, else, {, acquireCount, ++, ;, }, }, while]
[||, acquireCount, <, getLimit, (, ), ;, if, (, !, canPass, ), {, wait, (, ), ;, }, else, {]
[<=, NO_LIMIT, ||, acquireCount, <, getLimit, (, ), ;, if, (, !, canPass, ), {, wait, (, ), ;, }]
[||, acquireCount, <, getLimit, (, ), ;, if, (, !, canPass, ), {, wait, (, ), ;, }, else, {]
[;, if, (, !, canPass, ), {, wait, (, ), ;, }, else, {, acquireCount, ++, ;, }, }, while]
[<, getLimit, (, ), ;, if, (, !, canPass, ), {, wait, (, ), ;, }, else, {, acquireCount, ++]
[;, if, (, !, canPass, ), {, wait, (, ), ;, }, else, {, acquireCount, ++, ;, }, }, while]
[), {, wait, (, ), ;, }, else, {, acquireCount, ++, ;, }, }, while, (, !, canPass, ), ;]
[), {, wait, (, ), ;, }, else, {, acquireCount, ++, ;, }, }, while, (, !, canPass, ), ;]
[;, }, else, {, acquireCount, ++, ;, }, }, while, (, !, canPass, ), ;, }, public, synchronized, int, getLastAcquiresPerPeriod]
[;, }, }, while, (, !, canPass, ), ;, }, public, synchronized, int, getLastAcquiresPerPeriod, (, ), {, return, lastCallsPerPeriod, ;]
[++, ;, }, }, while, (, !, canPass, ), ;, }, public, synchronized, int, getLastAcquiresPerPeriod, (, ), {, return, lastCallsPerPeriod]
[), ;, }, public, synchronized, int, getLastAcquiresPerPeriod, (, ), {, return, lastCallsPerPeriod, ;, }, public, synchronized, int, getAcquireCount, (, )]
[), ;, }, public, synchronized, int, getLastAcquiresPerPeriod, (, ), {, return, lastCallsPerPeriod, ;, }, public, synchronized, int, getAcquireCount, (, )]
[;, }, public, synchronized, int, getAcquireCount, (, ), {, return, acquireCount, ;, }, public, synchronized, int, getAvailablePermits, (, ), {]
[;, }, public, synchronized, int, getAvailablePermits, (, ), {, return, getLimit, (, ), -, getAcquireCount, (, ), ;, }, public]
[;, }, public, synchronized, double, getAverageCallsPerPeriod, (, ), {, return, periodCount, ==, 0, ?, 0, :, (, double, ), totalAcquireCount]
[-, getAcquireCount, (, ), ;, }, public, synchronized, double, getAverageCallsPerPeriod, (, ), {, return, periodCount, ==, 0, ?, 0, :]
[;, }, public, synchronized, double, getAverageCallsPerPeriod, (, ), {, return, periodCount, ==, 0, ?, 0, :, (, double, ), totalAcquireCount]
[;, }, public, long, getPeriod, (, ), {, return, period, ;, }, public, TimeUnit, getUnit, (, ), {, return, unit]
[?, 0, :, (, double, ), totalAcquireCount, /, (, double, ), periodCount, ;, }, public, long, getPeriod, (, ), {]
[==, 0, ?, 0, :, (, double, ), totalAcquireCount, /, (, double, ), periodCount, ;, }, public, long, getPeriod, (]
[?, 0, :, (, double, ), totalAcquireCount, /, (, double, ), periodCount, ;, }, public, long, getPeriod, (, ), {]
[:, (, double, ), totalAcquireCount, /, (, double, ), periodCount, ;, }, public, long, getPeriod, (, ), {, return, period]
[;, }, public, long, getPeriod, (, ), {, return, period, ;, }, public, TimeUnit, getUnit, (, ), {, return, unit]
[/, (, double, ), periodCount, ;, }, public, long, getPeriod, (, ), {, return, period, ;, }, public, TimeUnit, getUnit]
[/, (, double, ), periodCount, ;, }, public, long, getPeriod, (, ), {, return, period, ;, }, public, TimeUnit, getUnit]
[;, }, public, long, getPeriod, (, ), {, return, period, ;, }, public, TimeUnit, getUnit, (, ), {, return, unit]
[;, }, public, long, getPeriod, (, ), {, return, period, ;, }, public, TimeUnit, getUnit, (, ), {, return, unit]
[;, }, public, TimeUnit, getUnit, (, ), {, return, unit, ;, }, protected, ScheduledExecutorService, getExecutorService, (, ), {, return, executorService]
[;, }, protected, ScheduledExecutorService, getExecutorService, (, ), {, return, executorService, ;, }, protected, ScheduledFuture, <, ?, >, startTimer, (, )]
[;, }, protected, ScheduledFuture, <, ?, >, startTimer, (, ), {, return, getExecutorService, (, ), ., scheduleAtFixedRate, (, new, Runnable]
[;, }, synchronized, void, endOfPeriod, (, ), {, lastCallsPerPeriod, =, acquireCount, ;, totalAcquireCount, +=, acquireCount, ;, periodCount, ++, ;, acquireCount]
[., scheduleAtFixedRate, (, new, Runnable, (, ), {, @, Override, public, void, run, (, ), {, endOfPeriod, (, ), ;]
[,, getPeriod, (, ), ,, getPeriod, (, ), ,, getUnit, (, ), ), ;, }, synchronized, void, endOfPeriod, (, )]
[;, }, }, ,, getPeriod, (, ), ,, getPeriod, (, ), ,, getUnit, (, ), ), ;, }, synchronized, void]
[,, getPeriod, (, ), ,, getUnit, (, ), ), ;, }, synchronized, void, endOfPeriod, (, ), {, lastCallsPerPeriod, =, acquireCount]
[,, getUnit, (, ), ), ;, }, synchronized, void, endOfPeriod, (, ), {, lastCallsPerPeriod, =, acquireCount, ;, totalAcquireCount, +=, acquireCount]
[), ;, }, synchronized, void, endOfPeriod, (, ), {, lastCallsPerPeriod, =, acquireCount, ;, totalAcquireCount, +=, acquireCount, ;, periodCount, ++, ;]
[=, acquireCount, ;, totalAcquireCount, +=, acquireCount, ;, periodCount, ++, ;, acquireCount, =, 0, ;, notifyAll, (, ), ;, }, }]
[;, totalAcquireCount, +=, acquireCount, ;, periodCount, ++, ;, acquireCount, =, 0, ;, notifyAll, (, ), ;, }, }]
[+=, acquireCount, ;, periodCount, ++, ;, acquireCount, =, 0, ;, notifyAll, (, ), ;, }, }]
[;, periodCount, ++, ;, acquireCount, =, 0, ;, notifyAll, (, ), ;, }, }]
[;, acquireCount, =, 0, ;, notifyAll, (, ), ;, }, }]
[++, ;, acquireCount, =, 0, ;, notifyAll, (, ), ;, }, }]
[=, 0, ;, notifyAll, (, ), ;, }, }]
[;, notifyAll, (, ), ;, }, }]
[;, }, }]
