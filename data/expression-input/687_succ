[;, private, static, final, UnivariateStatistic, SUM_OF_SQUARES, =, new, SumOfSquares, (, ), ;, private, static, final, UnivariateStatistic, PRODUCT, =, new, Product]
[;, private, static, final, UnivariateStatistic, PRODUCT, =, new, Product, (, ), ;, private, static, final, UnivariateStatistic, SUM_OF_LOGS, =, new, SumOfLogs]
[;, private, static, final, UnivariateStatistic, SUM_OF_LOGS, =, new, SumOfLogs, (, ), ;, private, static, final, UnivariateStatistic, MIN, =, new, Min]
[;, private, static, final, UnivariateStatistic, MIN, =, new, Min, (, ), ;, private, static, final, UnivariateStatistic, MAX, =, new, Max]
[;, private, static, final, UnivariateStatistic, MAX, =, new, Max, (, ), ;, private, static, final, UnivariateStatistic, MEAN, =, new, Mean]
[;, private, static, final, UnivariateStatistic, MEAN, =, new, Mean, (, ), ;, private, static, final, Variance, VARIANCE, =, new, Variance]
[;, private, static, final, Variance, VARIANCE, =, new, Variance, (, ), ;, private, static, final, Percentile, PERCENTILE, =, new, Percentile]
[;, private, static, final, Percentile, PERCENTILE, =, new, Percentile, (, ), ;, private, static, final, GeometricMean, GEOMETRIC_MEAN, =, new, GeometricMean]
[;, private, static, final, GeometricMean, GEOMETRIC_MEAN, =, new, GeometricMean, (, ), ;, private, StatUtils, (, ), {, }, public, static]
[;, private, StatUtils, (, ), {, }, public, static, double, sum, (, final, double, [, ], values, ), throws, MathIllegalArgumentException]
[;, }, public, static, double, sum, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length]
[., evaluate, (, values, ), ;, }, public, static, double, sum, (, final, double, [, ], values, ,, final, int]
[), ;, }, public, static, double, sum, (, final, double, [, ], values, ,, final, int, begin, ,, final, int]
[;, }, public, static, double, sumSq, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, SUM_OF_SQUARES, ., evaluate]
[., evaluate, (, values, ,, begin, ,, length, ), ;, }, public, static, double, sumSq, (, final, double, [, ]]
[,, begin, ,, length, ), ;, }, public, static, double, sumSq, (, final, double, [, ], values, ), throws, MathIllegalArgumentException]
[,, length, ), ;, }, public, static, double, sumSq, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[), ;, }, public, static, double, sumSq, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, SUM_OF_SQUARES, .]
[;, }, public, static, double, sumSq, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length]
[., evaluate, (, values, ), ;, }, public, static, double, sumSq, (, final, double, [, ], values, ,, final, int]
[), ;, }, public, static, double, sumSq, (, final, double, [, ], values, ,, final, int, begin, ,, final, int]
[;, }, public, static, double, product, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, PRODUCT, ., evaluate]
[., evaluate, (, values, ,, begin, ,, length, ), ;, }, public, static, double, product, (, final, double, [, ]]
[,, begin, ,, length, ), ;, }, public, static, double, product, (, final, double, [, ], values, ), throws, MathIllegalArgumentException]
[,, length, ), ;, }, public, static, double, product, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[), ;, }, public, static, double, product, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, PRODUCT, .]
[;, }, public, static, double, product, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length]
[., evaluate, (, values, ), ;, }, public, static, double, product, (, final, double, [, ], values, ,, final, int]
[), ;, }, public, static, double, product, (, final, double, [, ], values, ,, final, int, begin, ,, final, int]
[;, }, public, static, double, sumLog, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, SUM_OF_LOGS, ., evaluate]
[., evaluate, (, values, ,, begin, ,, length, ), ;, }, public, static, double, sumLog, (, final, double, [, ]]
[,, begin, ,, length, ), ;, }, public, static, double, sumLog, (, final, double, [, ], values, ), throws, MathIllegalArgumentException]
[,, length, ), ;, }, public, static, double, sumLog, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[), ;, }, public, static, double, sumLog, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, SUM_OF_LOGS, .]
[;, }, public, static, double, sumLog, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length]
[., evaluate, (, values, ), ;, }, public, static, double, sumLog, (, final, double, [, ], values, ,, final, int]
[), ;, }, public, static, double, sumLog, (, final, double, [, ], values, ,, final, int, begin, ,, final, int]
[;, }, public, static, double, mean, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, MEAN, ., evaluate]
[., evaluate, (, values, ,, begin, ,, length, ), ;, }, public, static, double, mean, (, final, double, [, ]]
[,, begin, ,, length, ), ;, }, public, static, double, mean, (, final, double, [, ], values, ), throws, MathIllegalArgumentException]
[,, length, ), ;, }, public, static, double, mean, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[), ;, }, public, static, double, mean, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, MEAN, .]
[;, }, public, static, double, mean, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length]
[., evaluate, (, values, ), ;, }, public, static, double, mean, (, final, double, [, ], values, ,, final, int]
[), ;, }, public, static, double, mean, (, final, double, [, ], values, ,, final, int, begin, ,, final, int]
[;, }, public, static, double, geometricMean, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, GEOMETRIC_MEAN, ., evaluate]
[., evaluate, (, values, ,, begin, ,, length, ), ;, }, public, static, double, geometricMean, (, final, double, [, ]]
[,, begin, ,, length, ), ;, }, public, static, double, geometricMean, (, final, double, [, ], values, ), throws, MathIllegalArgumentException]
[,, length, ), ;, }, public, static, double, geometricMean, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[), ;, }, public, static, double, geometricMean, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, GEOMETRIC_MEAN, .]
[;, }, public, static, double, geometricMean, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length]
[., evaluate, (, values, ), ;, }, public, static, double, geometricMean, (, final, double, [, ], values, ,, final, int]
[), ;, }, public, static, double, geometricMean, (, final, double, [, ], values, ,, final, int, begin, ,, final, int]
[;, }, public, static, double, variance, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, VARIANCE, ., evaluate]
[., evaluate, (, values, ,, begin, ,, length, ), ;, }, public, static, double, variance, (, final, double, [, ]]
[,, begin, ,, length, ), ;, }, public, static, double, variance, (, final, double, [, ], values, ), throws, MathIllegalArgumentException]
[,, length, ), ;, }, public, static, double, variance, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[), ;, }, public, static, double, variance, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, VARIANCE, .]
[;, }, public, static, double, variance, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length]
[., evaluate, (, values, ), ;, }, public, static, double, variance, (, final, double, [, ], values, ,, final, int]
[), ;, }, public, static, double, variance, (, final, double, [, ], values, ,, final, int, begin, ,, final, int]
[;, }, public, static, double, variance, (, final, double, [, ], values, ,, final, double, mean, ,, final, int, begin]
[., evaluate, (, values, ,, begin, ,, length, ), ;, }, public, static, double, variance, (, final, double, [, ]]
[,, begin, ,, length, ), ;, }, public, static, double, variance, (, final, double, [, ], values, ,, final, double]
[,, length, ), ;, }, public, static, double, variance, (, final, double, [, ], values, ,, final, double, mean, ,]
[), ;, }, public, static, double, variance, (, final, double, [, ], values, ,, final, double, mean, ,, final, int]
[;, }, public, static, double, variance, (, final, double, [, ], values, ,, final, double, mean, ), throws, MathIllegalArgumentException, {]
[., evaluate, (, values, ,, mean, ,, begin, ,, length, ), ;, }, public, static, double, variance, (, final, double]
[,, mean, ,, begin, ,, length, ), ;, }, public, static, double, variance, (, final, double, [, ], values, ,]
[,, begin, ,, length, ), ;, }, public, static, double, variance, (, final, double, [, ], values, ,, final, double]
[,, length, ), ;, }, public, static, double, variance, (, final, double, [, ], values, ,, final, double, mean, )]
[), ;, }, public, static, double, variance, (, final, double, [, ], values, ,, final, double, mean, ), throws, MathIllegalArgumentException]
[;, }, public, static, double, populationVariance, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, new, Variance, (]
[., evaluate, (, values, ,, mean, ), ;, }, public, static, double, populationVariance, (, final, double, [, ], values, )]
[,, mean, ), ;, }, public, static, double, populationVariance, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[), ;, }, public, static, double, populationVariance, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, new, Variance]
[;, }, public, static, double, populationVariance, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length]
[., evaluate, (, values, ), ;, }, public, static, double, populationVariance, (, final, double, [, ], values, ,, final, int]
[), ., evaluate, (, values, ), ;, }, public, static, double, populationVariance, (, final, double, [, ], values, ,, final]
[), ;, }, public, static, double, populationVariance, (, final, double, [, ], values, ,, final, int, begin, ,, final, int]
[;, }, public, static, double, populationVariance, (, final, double, [, ], values, ,, final, double, mean, ,, final, int, begin]
[., evaluate, (, values, ,, begin, ,, length, ), ;, }, public, static, double, populationVariance, (, final, double, [, ]]
[), ., evaluate, (, values, ,, begin, ,, length, ), ;, }, public, static, double, populationVariance, (, final, double, []
[,, begin, ,, length, ), ;, }, public, static, double, populationVariance, (, final, double, [, ], values, ,, final, double]
[,, length, ), ;, }, public, static, double, populationVariance, (, final, double, [, ], values, ,, final, double, mean, ,]
[), ;, }, public, static, double, populationVariance, (, final, double, [, ], values, ,, final, double, mean, ,, final, int]
[;, }, public, static, double, populationVariance, (, final, double, [, ], values, ,, final, double, mean, ), throws, MathIllegalArgumentException, {]
[., evaluate, (, values, ,, mean, ,, begin, ,, length, ), ;, }, public, static, double, populationVariance, (, final, double]
[), ., evaluate, (, values, ,, mean, ,, begin, ,, length, ), ;, }, public, static, double, populationVariance, (, final]
[,, mean, ,, begin, ,, length, ), ;, }, public, static, double, populationVariance, (, final, double, [, ], values, ,]
[,, begin, ,, length, ), ;, }, public, static, double, populationVariance, (, final, double, [, ], values, ,, final, double]
[,, length, ), ;, }, public, static, double, populationVariance, (, final, double, [, ], values, ,, final, double, mean, )]
[), ;, }, public, static, double, populationVariance, (, final, double, [, ], values, ,, final, double, mean, ), throws, MathIllegalArgumentException]
[;, }, public, static, double, max, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, MAX, ., evaluate]
[., evaluate, (, values, ,, mean, ), ;, }, public, static, double, max, (, final, double, [, ], values, )]
[), ., evaluate, (, values, ,, mean, ), ;, }, public, static, double, max, (, final, double, [, ], values]
[,, mean, ), ;, }, public, static, double, max, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[), ;, }, public, static, double, max, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, MAX, .]
[;, }, public, static, double, max, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length]
[., evaluate, (, values, ), ;, }, public, static, double, max, (, final, double, [, ], values, ,, final, int]
[), ;, }, public, static, double, max, (, final, double, [, ], values, ,, final, int, begin, ,, final, int]
[;, }, public, static, double, min, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, MIN, ., evaluate]
[., evaluate, (, values, ,, begin, ,, length, ), ;, }, public, static, double, min, (, final, double, [, ]]
[,, begin, ,, length, ), ;, }, public, static, double, min, (, final, double, [, ], values, ), throws, MathIllegalArgumentException]
[,, length, ), ;, }, public, static, double, min, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[), ;, }, public, static, double, min, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, MIN, .]
[;, }, public, static, double, min, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length]
[., evaluate, (, values, ), ;, }, public, static, double, min, (, final, double, [, ], values, ,, final, int]
[), ;, }, public, static, double, min, (, final, double, [, ], values, ,, final, int, begin, ,, final, int]
[;, }, public, static, double, percentile, (, final, double, [, ], values, ,, final, double, p, ), throws, MathIllegalArgumentException, {]
[., evaluate, (, values, ,, begin, ,, length, ), ;, }, public, static, double, percentile, (, final, double, [, ]]
[,, begin, ,, length, ), ;, }, public, static, double, percentile, (, final, double, [, ], values, ,, final, double]
[,, length, ), ;, }, public, static, double, percentile, (, final, double, [, ], values, ,, final, double, p, )]
[), ;, }, public, static, double, percentile, (, final, double, [, ], values, ,, final, double, p, ), throws, MathIllegalArgumentException]
[;, }, public, static, double, percentile, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length]
[., evaluate, (, values, ,, p, ), ;, }, public, static, double, percentile, (, final, double, [, ], values, ,]
[,, p, ), ;, }, public, static, double, percentile, (, final, double, [, ], values, ,, final, int, begin, ,]
[), ;, }, public, static, double, percentile, (, final, double, [, ], values, ,, final, int, begin, ,, final, int]
[;, }, public, static, double, sumDifference, (, final, double, [, ], sample1, ,, final, double, [, ], sample2, ), throws]
[., evaluate, (, values, ,, begin, ,, length, ,, p, ), ;, }, public, static, double, sumDifference, (, final, double]
[,, begin, ,, length, ,, p, ), ;, }, public, static, double, sumDifference, (, final, double, [, ], sample1, ,]
[,, length, ,, p, ), ;, }, public, static, double, sumDifference, (, final, double, [, ], sample1, ,, final, double]
[,, p, ), ;, }, public, static, double, sumDifference, (, final, double, [, ], sample1, ,, final, double, [, ]]
[), ;, }, public, static, double, sumDifference, (, final, double, [, ], sample1, ,, final, double, [, ], sample2, )]
[;, if, (, n, !=, sample2, ., length, ), {, throw, new, DimensionMismatchException, (, n, ,, sample2, ., length, )]
[., length, ;, if, (, n, !=, sample2, ., length, ), {, throw, new, DimensionMismatchException, (, n, ,, sample2, .]
[), {, throw, new, DimensionMismatchException, (, n, ,, sample2, ., length, ), ;, }, if, (, n, <=, 0, )]
[!=, sample2, ., length, ), {, throw, new, DimensionMismatchException, (, n, ,, sample2, ., length, ), ;, }, if, (]
[), {, throw, new, DimensionMismatchException, (, n, ,, sample2, ., length, ), ;, }, if, (, n, <=, 0, )]
[., length, ), {, throw, new, DimensionMismatchException, (, n, ,, sample2, ., length, ), ;, }, if, (, n, <=]
[;, }, if, (, n, <=, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., INSUFFICIENT_DIMENSION, ), ;, }, double]
[,, sample2, ., length, ), ;, }, if, (, n, <=, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, .]
[), ;, }, if, (, n, <=, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., INSUFFICIENT_DIMENSION, ), ;, }]
[., length, ), ;, }, if, (, n, <=, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., INSUFFICIENT_DIMENSION, )]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., INSUFFICIENT_DIMENSION, ), ;, }, double, result, =, 0, ;, for, (, int]
[<=, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., INSUFFICIENT_DIMENSION, ), ;, }, double, result, =, 0, ;, for]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., INSUFFICIENT_DIMENSION, ), ;, }, double, result, =, 0, ;, for, (, int]
[;, }, double, result, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++]
[), ;, }, double, result, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i]
[., INSUFFICIENT_DIMENSION, ), ;, }, double, result, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, result, +=, sample1, []
[;, i, <, n, ;, i, ++, ), {, result, +=, sample1, [, i, ], -, sample2, [, i, ]]
[;, i, ++, ), {, result, +=, sample1, [, i, ], -, sample2, [, i, ], ;, }, return, result]
[<, n, ;, i, ++, ), {, result, +=, sample1, [, i, ], -, sample2, [, i, ], ;, }]
[;, i, ++, ), {, result, +=, sample1, [, i, ], -, sample2, [, i, ], ;, }, return, result]
[), {, result, +=, sample1, [, i, ], -, sample2, [, i, ], ;, }, return, result, ;, }, public]
[++, ), {, result, +=, sample1, [, i, ], -, sample2, [, i, ], ;, }, return, result, ;, }]
[+=, sample1, [, i, ], -, sample2, [, i, ], ;, }, return, result, ;, }, public, static, double, meanDifference]
[;, }, return, result, ;, }, public, static, double, meanDifference, (, final, double, [, ], sample1, ,, final, double, []
[-, sample2, [, i, ], ;, }, return, result, ;, }, public, static, double, meanDifference, (, final, double, [, ]]
[[, i, ], -, sample2, [, i, ], ;, }, return, result, ;, }, public, static, double, meanDifference, (, final]
[], -, sample2, [, i, ], ;, }, return, result, ;, }, public, static, double, meanDifference, (, final, double, []
[;, }, return, result, ;, }, public, static, double, meanDifference, (, final, double, [, ], sample1, ,, final, double, []
[[, i, ], ;, }, return, result, ;, }, public, static, double, meanDifference, (, final, double, [, ], sample1, ,]
[], ;, }, return, result, ;, }, public, static, double, meanDifference, (, final, double, [, ], sample1, ,, final, double]
[;, }, public, static, double, meanDifference, (, final, double, [, ], sample1, ,, final, double, [, ], sample2, ), throws]
[;, }, public, static, double, varianceDifference, (, final, double, [, ], sample1, ,, final, double, [, ], sample2, ,, double]
[/, sample1, ., length, ;, }, public, static, double, varianceDifference, (, final, double, [, ], sample1, ,, final, double, []
[,, sample2, ), /, sample1, ., length, ;, }, public, static, double, varianceDifference, (, final, double, [, ], sample1, ,]
[), /, sample1, ., length, ;, }, public, static, double, varianceDifference, (, final, double, [, ], sample1, ,, final, double]
[;, }, public, static, double, varianceDifference, (, final, double, [, ], sample1, ,, final, double, [, ], sample2, ,, double]
[., length, ;, }, public, static, double, varianceDifference, (, final, double, [, ], sample1, ,, final, double, [, ], sample2]
[;, double, sum2, =, 0d, ;, double, diff, =, 0d, ;, int, n, =, sample1, ., length, ;, if, (]
[;, double, diff, =, 0d, ;, int, n, =, sample1, ., length, ;, if, (, n, !=, sample2, ., length]
[;, int, n, =, sample1, ., length, ;, if, (, n, !=, sample2, ., length, ), {, throw, new, DimensionMismatchException]
[;, if, (, n, !=, sample2, ., length, ), {, throw, new, DimensionMismatchException, (, n, ,, sample2, ., length, )]
[., length, ;, if, (, n, !=, sample2, ., length, ), {, throw, new, DimensionMismatchException, (, n, ,, sample2, .]
[), {, throw, new, DimensionMismatchException, (, n, ,, sample2, ., length, ), ;, }, if, (, n, <, 2, )]
[!=, sample2, ., length, ), {, throw, new, DimensionMismatchException, (, n, ,, sample2, ., length, ), ;, }, if, (]
[), {, throw, new, DimensionMismatchException, (, n, ,, sample2, ., length, ), ;, }, if, (, n, <, 2, )]
[., length, ), {, throw, new, DimensionMismatchException, (, n, ,, sample2, ., length, ), ;, }, if, (, n, <]
[;, }, if, (, n, <, 2, ), {, throw, new, NumberIsTooSmallException, (, n, ,, 2, ,, true, ), ;]
[,, sample2, ., length, ), ;, }, if, (, n, <, 2, ), {, throw, new, NumberIsTooSmallException, (, n, ,]
[), ;, }, if, (, n, <, 2, ), {, throw, new, NumberIsTooSmallException, (, n, ,, 2, ,, true, )]
[., length, ), ;, }, if, (, n, <, 2, ), {, throw, new, NumberIsTooSmallException, (, n, ,, 2, ,]
[), {, throw, new, NumberIsTooSmallException, (, n, ,, 2, ,, true, ), ;, }, for, (, int, i, =, 0]
[<, 2, ), {, throw, new, NumberIsTooSmallException, (, n, ,, 2, ,, true, ), ;, }, for, (, int, i]
[), {, throw, new, NumberIsTooSmallException, (, n, ,, 2, ,, true, ), ;, }, for, (, int, i, =, 0]
[;, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, diff, =, sample1]
[,, 2, ,, true, ), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++]
[,, true, ), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, diff, =]
[;, i, <, n, ;, i, ++, ), {, diff, =, sample1, [, i, ], -, sample2, [, i, ]]
[;, i, ++, ), {, diff, =, sample1, [, i, ], -, sample2, [, i, ], ;, sum1, +=, (]
[<, n, ;, i, ++, ), {, diff, =, sample1, [, i, ], -, sample2, [, i, ], ;, sum1]
[;, i, ++, ), {, diff, =, sample1, [, i, ], -, sample2, [, i, ], ;, sum1, +=, (]
[), {, diff, =, sample1, [, i, ], -, sample2, [, i, ], ;, sum1, +=, (, diff, -, meanDifference]
[++, ), {, diff, =, sample1, [, i, ], -, sample2, [, i, ], ;, sum1, +=, (, diff, -]
[=, sample1, [, i, ], -, sample2, [, i, ], ;, sum1, +=, (, diff, -, meanDifference, ), *, (]
[;, sum1, +=, (, diff, -, meanDifference, ), *, (, diff, -, meanDifference, ), ;, sum2, +=, diff, -, meanDifference]
[-, sample2, [, i, ], ;, sum1, +=, (, diff, -, meanDifference, ), *, (, diff, -, meanDifference, ), ;]
[[, i, ], -, sample2, [, i, ], ;, sum1, +=, (, diff, -, meanDifference, ), *, (, diff, -]
[], -, sample2, [, i, ], ;, sum1, +=, (, diff, -, meanDifference, ), *, (, diff, -, meanDifference, )]
[;, sum1, +=, (, diff, -, meanDifference, ), *, (, diff, -, meanDifference, ), ;, sum2, +=, diff, -, meanDifference]
[[, i, ], ;, sum1, +=, (, diff, -, meanDifference, ), *, (, diff, -, meanDifference, ), ;, sum2, +=]
[], ;, sum1, +=, (, diff, -, meanDifference, ), *, (, diff, -, meanDifference, ), ;, sum2, +=, diff, -]
[+=, (, diff, -, meanDifference, ), *, (, diff, -, meanDifference, ), ;, sum2, +=, diff, -, meanDifference, ;, }]
[;, sum2, +=, diff, -, meanDifference, ;, }, return, (, sum1, -, (, sum2, *, sum2, /, n, ), )]
[*, (, diff, -, meanDifference, ), ;, sum2, +=, diff, -, meanDifference, ;, }, return, (, sum1, -, (, sum2]
[), *, (, diff, -, meanDifference, ), ;, sum2, +=, diff, -, meanDifference, ;, }, return, (, sum1, -, (]
[-, meanDifference, ), *, (, diff, -, meanDifference, ), ;, sum2, +=, diff, -, meanDifference, ;, }, return, (, sum1]
[), *, (, diff, -, meanDifference, ), ;, sum2, +=, diff, -, meanDifference, ;, }, return, (, sum1, -, (]
[;, sum2, +=, diff, -, meanDifference, ;, }, return, (, sum1, -, (, sum2, *, sum2, /, n, ), )]
[), ;, sum2, +=, diff, -, meanDifference, ;, }, return, (, sum1, -, (, sum2, *, sum2, /, n, )]
[-, meanDifference, ), ;, sum2, +=, diff, -, meanDifference, ;, }, return, (, sum1, -, (, sum2, *, sum2, /]
[), ;, sum2, +=, diff, -, meanDifference, ;, }, return, (, sum1, -, (, sum2, *, sum2, /, n, )]
[+=, diff, -, meanDifference, ;, }, return, (, sum1, -, (, sum2, *, sum2, /, n, ), ), /, (]
[;, }, return, (, sum1, -, (, sum2, *, sum2, /, n, ), ), /, (, n, -, 1, )]
[-, meanDifference, ;, }, return, (, sum1, -, (, sum2, *, sum2, /, n, ), ), /, (, n, -]
[;, }, return, (, sum1, -, (, sum2, *, sum2, /, n, ), ), /, (, n, -, 1, )]
[;, }, public, static, double, [, ], normalize, (, final, double, [, ], sample, ), {, DescriptiveStatistics, stats, =, new]
[/, (, n, -, 1, ), ;, }, public, static, double, [, ], normalize, (, final, double, [, ], sample]
[), /, (, n, -, 1, ), ;, }, public, static, double, [, ], normalize, (, final, double, [, ]]
[-, (, sum2, *, sum2, /, n, ), ), /, (, n, -, 1, ), ;, }, public, static, double]
[), /, (, n, -, 1, ), ;, }, public, static, double, [, ], normalize, (, final, double, [, ]]
[), ), /, (, n, -, 1, ), ;, }, public, static, double, [, ], normalize, (, final, double, []
[/, n, ), ), /, (, n, -, 1, ), ;, }, public, static, double, [, ], normalize, (, final]
[*, sum2, /, n, ), ), /, (, n, -, 1, ), ;, }, public, static, double, [, ], normalize]
[/, n, ), ), /, (, n, -, 1, ), ;, }, public, static, double, [, ], normalize, (, final]
[), ), /, (, n, -, 1, ), ;, }, public, static, double, [, ], normalize, (, final, double, []
[;, }, public, static, double, [, ], normalize, (, final, double, [, ], sample, ), {, DescriptiveStatistics, stats, =, new]
[), ;, }, public, static, double, [, ], normalize, (, final, double, [, ], sample, ), {, DescriptiveStatistics, stats, =]
[-, 1, ), ;, }, public, static, double, [, ], normalize, (, final, double, [, ], sample, ), {, DescriptiveStatistics]
[), ;, }, public, static, double, [, ], normalize, (, final, double, [, ], sample, ), {, DescriptiveStatistics, stats, =]
[;, for, (, int, i, =, 0, ;, i, <, sample, ., length, ;, i, ++, ), {, stats, .]
[;, i, <, sample, ., length, ;, i, ++, ), {, stats, ., addValue, (, sample, [, i, ], )]
[;, i, ++, ), {, stats, ., addValue, (, sample, [, i, ], ), ;, }, double, mean, =, stats]
[<, sample, ., length, ;, i, ++, ), {, stats, ., addValue, (, sample, [, i, ], ), ;, }]
[;, i, ++, ), {, stats, ., addValue, (, sample, [, i, ], ), ;, }, double, mean, =, stats]
[., length, ;, i, ++, ), {, stats, ., addValue, (, sample, [, i, ], ), ;, }, double, mean]
[), {, stats, ., addValue, (, sample, [, i, ], ), ;, }, double, mean, =, stats, ., getMean, (]
[++, ), {, stats, ., addValue, (, sample, [, i, ], ), ;, }, double, mean, =, stats, ., getMean]
[;, }, double, mean, =, stats, ., getMean, (, ), ;, double, standardDeviation, =, stats, ., getStandardDeviation, (, ), ;]
[., addValue, (, sample, [, i, ], ), ;, }, double, mean, =, stats, ., getMean, (, ), ;, double]
[), ;, }, double, mean, =, stats, ., getMean, (, ), ;, double, standardDeviation, =, stats, ., getStandardDeviation, (, )]
[[, i, ], ), ;, }, double, mean, =, stats, ., getMean, (, ), ;, double, standardDeviation, =, stats, .]
[], ), ;, }, double, mean, =, stats, ., getMean, (, ), ;, double, standardDeviation, =, stats, ., getStandardDeviation, (]
[;, double, standardDeviation, =, stats, ., getStandardDeviation, (, ), ;, double, [, ], standardizedSample, =, new, double, [, sample, .]
[., getMean, (, ), ;, double, standardDeviation, =, stats, ., getStandardDeviation, (, ), ;, double, [, ], standardizedSample, =, new]
[;, double, [, ], standardizedSample, =, new, double, [, sample, ., length, ], ;, for, (, int, i, =, 0]
[., getStandardDeviation, (, ), ;, double, [, ], standardizedSample, =, new, double, [, sample, ., length, ], ;, for, (]
[;, for, (, int, i, =, 0, ;, i, <, sample, ., length, ;, i, ++, ), {, standardizedSample, []
[], ;, for, (, int, i, =, 0, ;, i, <, sample, ., length, ;, i, ++, ), {, standardizedSample]
[., length, ], ;, for, (, int, i, =, 0, ;, i, <, sample, ., length, ;, i, ++, )]
[;, i, <, sample, ., length, ;, i, ++, ), {, standardizedSample, [, i, ], =, (, sample, [, i]
[;, i, ++, ), {, standardizedSample, [, i, ], =, (, sample, [, i, ], -, mean, ), /, standardDeviation]
[<, sample, ., length, ;, i, ++, ), {, standardizedSample, [, i, ], =, (, sample, [, i, ], -]
[;, i, ++, ), {, standardizedSample, [, i, ], =, (, sample, [, i, ], -, mean, ), /, standardDeviation]
[., length, ;, i, ++, ), {, standardizedSample, [, i, ], =, (, sample, [, i, ], -, mean, )]
[), {, standardizedSample, [, i, ], =, (, sample, [, i, ], -, mean, ), /, standardDeviation, ;, }, return]
[++, ), {, standardizedSample, [, i, ], =, (, sample, [, i, ], -, mean, ), /, standardDeviation, ;, }]
[=, (, sample, [, i, ], -, mean, ), /, standardDeviation, ;, }, return, standardizedSample, ;, }, public, static, double]
[[, i, ], =, (, sample, [, i, ], -, mean, ), /, standardDeviation, ;, }, return, standardizedSample, ;, }]
[], =, (, sample, [, i, ], -, mean, ), /, standardDeviation, ;, }, return, standardizedSample, ;, }, public, static]
[;, }, return, standardizedSample, ;, }, public, static, double, [, ], mode, (, double, [, ], sample, ), throws, MathIllegalArgumentException]
[/, standardDeviation, ;, }, return, standardizedSample, ;, }, public, static, double, [, ], mode, (, double, [, ], sample, )]
[), /, standardDeviation, ;, }, return, standardizedSample, ;, }, public, static, double, [, ], mode, (, double, [, ], sample]
[-, mean, ), /, standardDeviation, ;, }, return, standardizedSample, ;, }, public, static, double, [, ], mode, (, double, []
[[, i, ], -, mean, ), /, standardDeviation, ;, }, return, standardizedSample, ;, }, public, static, double, [, ], mode]
[], -, mean, ), /, standardDeviation, ;, }, return, standardizedSample, ;, }, public, static, double, [, ], mode, (, double]
[), /, standardDeviation, ;, }, return, standardizedSample, ;, }, public, static, double, [, ], mode, (, double, [, ], sample]
[;, }, return, standardizedSample, ;, }, public, static, double, [, ], mode, (, double, [, ], sample, ), throws, MathIllegalArgumentException]
[;, }, public, static, double, [, ], mode, (, double, [, ], sample, ), throws, MathIllegalArgumentException, {, if, (, sample]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, return, getMode, (, sample, ,, 0, ,, sample]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, return, getMode, (, sample, ,, 0]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, return, getMode, (, sample, ,, 0, ,, sample]
[;, }, return, getMode, (, sample, ,, 0, ,, sample, ., length, ), ;, }, public, static, double, [, ]]
[), ;, }, return, getMode, (, sample, ,, 0, ,, sample, ., length, ), ;, }, public, static, double, []
[., INPUT_ARRAY, ), ;, }, return, getMode, (, sample, ,, 0, ,, sample, ., length, ), ;, }, public, static]
[;, }, public, static, double, [, ], mode, (, double, [, ], sample, ,, final, int, begin, ,, final, int]
[,, 0, ,, sample, ., length, ), ;, }, public, static, double, [, ], mode, (, double, [, ], sample]
[,, sample, ., length, ), ;, }, public, static, double, [, ], mode, (, double, [, ], sample, ,, final]
[), ;, }, public, static, double, [, ], mode, (, double, [, ], sample, ,, final, int, begin, ,, final]
[., length, ), ;, }, public, static, double, [, ], mode, (, double, [, ], sample, ,, final, int, begin]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, begin, <, 0, ), {, throw]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, begin, <, 0, )]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, begin, <, 0, ), {, throw]
[;, }, if, (, begin, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,, Integer, ., valueOf]
[), ;, }, if, (, begin, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,, Integer, .]
[., INPUT_ARRAY, ), ;, }, if, (, begin, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,, Integer, ., valueOf, (, begin, ), ), ;, }, if]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,, Integer, ., valueOf, (, begin, ), ), ;]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,, Integer, ., valueOf, (, begin, ), ), ;, }, if]
[;, }, if, (, length, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,, Integer, ., valueOf]
[,, Integer, ., valueOf, (, begin, ), ), ;, }, if, (, length, <, 0, ), {, throw, new, NotPositiveException]
[., START_POSITION, ,, Integer, ., valueOf, (, begin, ), ), ;, }, if, (, length, <, 0, ), {, throw]
[), ;, }, if, (, length, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,, Integer, .]
[., valueOf, (, begin, ), ), ;, }, if, (, length, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats]
[), ), ;, }, if, (, length, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,, Integer]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,, Integer, ., valueOf, (, length, ), ), ;, }, return]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,, Integer, ., valueOf, (, length, ), ), ;]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,, Integer, ., valueOf, (, length, ), ), ;, }, return]
[;, }, return, getMode, (, sample, ,, begin, ,, length, ), ;, }, private, static, double, [, ], getMode, (]
[,, Integer, ., valueOf, (, length, ), ), ;, }, return, getMode, (, sample, ,, begin, ,, length, ), ;]
[., LENGTH, ,, Integer, ., valueOf, (, length, ), ), ;, }, return, getMode, (, sample, ,, begin, ,, length]
[), ;, }, return, getMode, (, sample, ,, begin, ,, length, ), ;, }, private, static, double, [, ], getMode]
[., valueOf, (, length, ), ), ;, }, return, getMode, (, sample, ,, begin, ,, length, ), ;, }, private]
[), ), ;, }, return, getMode, (, sample, ,, begin, ,, length, ), ;, }, private, static, double, [, ]]
[;, }, private, static, double, [, ], getMode, (, double, [, ], values, ,, final, int, begin, ,, final, int]
[,, begin, ,, length, ), ;, }, private, static, double, [, ], getMode, (, double, [, ], values, ,, final]
[,, length, ), ;, }, private, static, double, [, ], getMode, (, double, [, ], values, ,, final, int, begin]
[), ;, }, private, static, double, [, ], getMode, (, double, [, ], values, ,, final, int, begin, ,, final]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, final, double]
[;, i, <, begin, +, length, ;, i, ++, ), {, final, double, value, =, values, [, i, ], ;]
[;, i, ++, ), {, final, double, value, =, values, [, i, ], ;, if, (, !, Double, ., isNaN]
[<, begin, +, length, ;, i, ++, ), {, final, double, value, =, values, [, i, ], ;, if, (]
[;, i, ++, ), {, final, double, value, =, values, [, i, ], ;, if, (, !, Double, ., isNaN]
[+, length, ;, i, ++, ), {, final, double, value, =, values, [, i, ], ;, if, (, !, Double]
[;, i, ++, ), {, final, double, value, =, values, [, i, ], ;, if, (, !, Double, ., isNaN]
[), {, final, double, value, =, values, [, i, ], ;, if, (, !, Double, ., isNaN, (, value, )]
[++, ), {, final, double, value, =, values, [, i, ], ;, if, (, !, Double, ., isNaN, (, value]
[;, if, (, !, Double, ., isNaN, (, value, ), ), {, freq, ., addValue, (, Double, ., valueOf, (]
[[, i, ], ;, if, (, !, Double, ., isNaN, (, value, ), ), {, freq, ., addValue, (, Double]
[], ;, if, (, !, Double, ., isNaN, (, value, ), ), {, freq, ., addValue, (, Double, ., valueOf]
[), {, freq, ., addValue, (, Double, ., valueOf, (, value, ), ), ;, }, }, List, <, Comparable, <]
[), {, freq, ., addValue, (, Double, ., valueOf, (, value, ), ), ;, }, }, List, <, Comparable, <]
[., isNaN, (, value, ), ), {, freq, ., addValue, (, Double, ., valueOf, (, value, ), ), ;, }]
[), ), {, freq, ., addValue, (, Double, ., valueOf, (, value, ), ), ;, }, }, List, <, Comparable]
[;, }, }, List, <, Comparable, <, ?, >, >, list, =, freq, ., getMode, (, ), ;, double, []
[., addValue, (, Double, ., valueOf, (, value, ), ), ;, }, }, List, <, Comparable, <, ?, >, >]
[), ;, }, }, List, <, Comparable, <, ?, >, >, list, =, freq, ., getMode, (, ), ;, double]
[., valueOf, (, value, ), ), ;, }, }, List, <, Comparable, <, ?, >, >, list, =, freq, .]
[), ), ;, }, }, List, <, Comparable, <, ?, >, >, list, =, freq, ., getMode, (, ), ;]
[;, double, [, ], modes, =, new, double, [, list, ., size, (, ), ], ;, int, i, =, 0]
[., getMode, (, ), ;, double, [, ], modes, =, new, double, [, list, ., size, (, ), ], ;]
[;, int, i, =, 0, ;, for, (, Comparable, <, ?, >, c, :, list, ), {, modes, [, i]
[], ;, int, i, =, 0, ;, for, (, Comparable, <, ?, >, c, :, list, ), {, modes, []
[., size, (, ), ], ;, int, i, =, 0, ;, for, (, Comparable, <, ?, >, c, :, list]
[;, for, (, Comparable, <, ?, >, c, :, list, ), {, modes, [, i, ++, ], =, (, (]
[), {, modes, [, i, ++, ], =, (, (, Double, ), c, ), ., doubleValue, (, ), ;, }]
[=, (, (, Double, ), c, ), ., doubleValue, (, ), ;, }, return, modes, ;, }, }]
[[, i, ++, ], =, (, (, Double, ), c, ), ., doubleValue, (, ), ;, }, return, modes, ;]
[], =, (, (, Double, ), c, ), ., doubleValue, (, ), ;, }, return, modes, ;, }, }]
[++, ], =, (, (, Double, ), c, ), ., doubleValue, (, ), ;, }, return, modes, ;, }, }]
[;, }, return, modes, ;, }, }]
[., doubleValue, (, ), ;, }, return, modes, ;, }, }]
[), ., doubleValue, (, ), ;, }, return, modes, ;, }, }]
[), ., doubleValue, (, ), ;, }, return, modes, ;, }, }]
[;, }, }]
