[class, HarmonicFitter, extends, CurveFitter, <, HarmonicOscillator, ., Parametric, >, {, public, HarmonicFitter, (, final, DifferentiableMultivariateVectorOptimizer, optimizer, ), {, super, (]
[{, super, (, optimizer, ), ;, }, public, double, [, ], fit, (, double, [, ], initialGuess, ), {, return]
[(, optimizer, ), ;, }, public, double, [, ], fit, (, double, [, ], initialGuess, ), {, return, fit, (]
[[, ], fit, (, double, [, ], initialGuess, ), {, return, fit, (, new, HarmonicOscillator, ., Parametric, (, ), ,]
[new, HarmonicOscillator, ., Parametric, (, ), ,, initialGuess, ), ;, }, public, double, [, ], fit, (, ), {, return]
[., Parametric, (, ), ,, initialGuess, ), ;, }, public, double, [, ], fit, (, ), {, return, fit, (]
[., Parametric, (, ), ,, initialGuess, ), ;, }, public, double, [, ], fit, (, ), {, return, fit, (]
[Parametric, (, ), ,, initialGuess, ), ;, }, public, double, [, ], fit, (, ), {, return, fit, (, (]
[,, initialGuess, ), ;, }, public, double, [, ], fit, (, ), {, return, fit, (, (, new, ParameterGuesser, (]
[final, double, omega, ;, private, final, double, phi, ;, public, ParameterGuesser, (, WeightedObservedPoint, [, ], observations, ), {, if, (]
[final, double, omega, ;, private, final, double, phi, ;, public, ParameterGuesser, (, WeightedObservedPoint, [, ], observations, ), {, if, (]
[final, double, omega, ;, private, final, double, phi, ;, public, ParameterGuesser, (, WeightedObservedPoint, [, ], observations, ), {, if, (]
[private, final, double, phi, ;, public, ParameterGuesser, (, WeightedObservedPoint, [, ], observations, ), {, if, (, observations, ., length, <]
[;, public, ParameterGuesser, (, WeightedObservedPoint, [, ], observations, ), {, if, (, observations, ., length, <, 4, ), {, throw]
[(, WeightedObservedPoint, [, ], observations, ), {, if, (, observations, ., length, <, 4, ), {, throw, new, NumberIsTooSmallException, (]
[(, WeightedObservedPoint, [, ], observations, ), {, if, (, observations, ., length, <, 4, ), {, throw, new, NumberIsTooSmallException, (]
[observations, ), {, if, (, observations, ., length, <, 4, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE, ,]
[observations, ), {, if, (, observations, ., length, <, 4, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE, ,]
[(, observations, ., length, <, 4, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE, ,, observations, ., length, ,]
[., length, <, 4, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE, ,, observations, ., length, ,, 4, ,]
[LocalizedFormats, ., INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE, ,, observations, ., length, ,, 4, ,, true, ), ;, }, final, WeightedObservedPoint, [, ], sorted, =]
[INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE, ,, observations, ., length, ,, 4, ,, true, ), ;, }, final, WeightedObservedPoint, [, ], sorted, =, sortObservations, (]
[), ;, }, final, WeightedObservedPoint, [, ], sorted, =, sortObservations, (, observations, ), ;, final, double, aOmega, [, ], =]
[}, final, WeightedObservedPoint, [, ], sorted, =, sortObservations, (, observations, ), ;, final, double, aOmega, [, ], =, guessAOmega, (]
[[, ], sorted, =, sortObservations, (, observations, ), ;, final, double, aOmega, [, ], =, guessAOmega, (, sorted, ), ;]
[sorted, =, sortObservations, (, observations, ), ;, final, double, aOmega, [, ], =, guessAOmega, (, sorted, ), ;, a, =]
[sorted, =, sortObservations, (, observations, ), ;, final, double, aOmega, [, ], =, guessAOmega, (, sorted, ), ;, a, =]
[sortObservations, (, observations, ), ;, final, double, aOmega, [, ], =, guessAOmega, (, sorted, ), ;, a, =, aOmega, []
[), ;, final, double, aOmega, [, ], =, guessAOmega, (, sorted, ), ;, a, =, aOmega, [, 0, ], ;]
[final, double, aOmega, [, ], =, guessAOmega, (, sorted, ), ;, a, =, aOmega, [, 0, ], ;, omega, =]
[final, double, aOmega, [, ], =, guessAOmega, (, sorted, ), ;, a, =, aOmega, [, 0, ], ;, omega, =]
[aOmega, [, ], =, guessAOmega, (, sorted, ), ;, a, =, aOmega, [, 0, ], ;, omega, =, aOmega, []
[=, guessAOmega, (, sorted, ), ;, a, =, aOmega, [, 0, ], ;, omega, =, aOmega, [, 1, ], ;]
[(, sorted, ), ;, a, =, aOmega, [, 0, ], ;, omega, =, aOmega, [, 1, ], ;, phi, =]
[), ;, a, =, aOmega, [, 0, ], ;, omega, =, aOmega, [, 1, ], ;, phi, =, guessPhi, (]
[1, ], ;, phi, =, guessPhi, (, sorted, ), ;, }, public, double, [, ], guess, (, ), {, return]
[=, guessPhi, (, sorted, ), ;, }, public, double, [, ], guess, (, ), {, return, new, double, [, ]]
[guessPhi, (, sorted, ), ;, }, public, double, [, ], guess, (, ), {, return, new, double, [, ], {]
[sorted, ), ;, }, public, double, [, ], guess, (, ), {, return, new, double, [, ], {, a, ,]
[;, }, public, double, [, ], guess, (, ), {, return, new, double, [, ], {, a, ,, omega, ,]
[;, }, private, WeightedObservedPoint, [, ], sortObservations, (, WeightedObservedPoint, [, ], unsorted, ), {, final, WeightedObservedPoint, [, ], observations, =]
[;, }, private, WeightedObservedPoint, [, ], sortObservations, (, WeightedObservedPoint, [, ], unsorted, ), {, final, WeightedObservedPoint, [, ], observations, =]
[[, ], unsorted, ), {, final, WeightedObservedPoint, [, ], observations, =, unsorted, ., clone, (, ), ;, WeightedObservedPoint, curr, =]
[[, ], unsorted, ), {, final, WeightedObservedPoint, [, ], observations, =, unsorted, ., clone, (, ), ;, WeightedObservedPoint, curr, =]
[unsorted, ), {, final, WeightedObservedPoint, [, ], observations, =, unsorted, ., clone, (, ), ;, WeightedObservedPoint, curr, =, observations, []
[=, unsorted, ., clone, (, ), ;, WeightedObservedPoint, curr, =, observations, [, 0, ], ;, for, (, int, j, =]
[., clone, (, ), ;, WeightedObservedPoint, curr, =, observations, [, 0, ], ;, for, (, int, j, =, 1, ;]
[., clone, (, ), ;, WeightedObservedPoint, curr, =, observations, [, 0, ], ;, for, (, int, j, =, 1, ;]
[(, ), ;, WeightedObservedPoint, curr, =, observations, [, 0, ], ;, for, (, int, j, =, 1, ;, j, <]
[(, ), ;, WeightedObservedPoint, curr, =, observations, [, 0, ], ;, for, (, int, j, =, 1, ;, j, <]
[curr, =, observations, [, 0, ], ;, for, (, int, j, =, 1, ;, j, <, observations, ., length, ;]
[=, observations, [, 0, ], ;, for, (, int, j, =, 1, ;, j, <, observations, ., length, ;, ++]
[for, (, int, j, =, 1, ;, j, <, observations, ., length, ;, ++, j, ), {, WeightedObservedPoint, prec, =]
[int, j, =, 1, ;, j, <, observations, ., length, ;, ++, j, ), {, WeightedObservedPoint, prec, =, curr, ;]
[=, 1, ;, j, <, observations, ., length, ;, ++, j, ), {, WeightedObservedPoint, prec, =, curr, ;, curr, =]
[=, 1, ;, j, <, observations, ., length, ;, ++, j, ), {, WeightedObservedPoint, prec, =, curr, ;, curr, =]
[;, j, <, observations, ., length, ;, ++, j, ), {, WeightedObservedPoint, prec, =, curr, ;, curr, =, observations, []
[length, ;, ++, j, ), {, WeightedObservedPoint, prec, =, curr, ;, curr, =, observations, [, j, ], ;, if, (]
[length, ;, ++, j, ), {, WeightedObservedPoint, prec, =, curr, ;, curr, =, observations, [, j, ], ;, if, (]
[length, ;, ++, j, ), {, WeightedObservedPoint, prec, =, curr, ;, curr, =, observations, [, j, ], ;, if, (]
[WeightedObservedPoint, prec, =, curr, ;, curr, =, observations, [, j, ], ;, if, (, curr, ., getX, (, ), <]
[WeightedObservedPoint, prec, =, curr, ;, curr, =, observations, [, j, ], ;, if, (, curr, ., getX, (, ), <]
[], ;, if, (, curr, ., getX, (, ), <, prec, ., getX, (, ), ), {, int, i, =]
[], ;, if, (, curr, ., getX, (, ), <, prec, ., getX, (, ), ), {, int, i, =]
[if, (, curr, ., getX, (, ), <, prec, ., getX, (, ), ), {, int, i, =, j, -]
[(, ), <, prec, ., getX, (, ), ), {, int, i, =, j, -, 1, ;, WeightedObservedPoint, mI, =]
[(, ), <, prec, ., getX, (, ), ), {, int, i, =, j, -, 1, ;, WeightedObservedPoint, mI, =]
[<, prec, ., getX, (, ), ), {, int, i, =, j, -, 1, ;, WeightedObservedPoint, mI, =, observations, []
[), ), {, int, i, =, j, -, 1, ;, WeightedObservedPoint, mI, =, observations, [, i, ], ;, while, (]
[), ), {, int, i, =, j, -, 1, ;, WeightedObservedPoint, mI, =, observations, [, i, ], ;, while, (]
[), {, int, i, =, j, -, 1, ;, WeightedObservedPoint, mI, =, observations, [, i, ], ;, while, (, (]
[), {, int, i, =, j, -, 1, ;, WeightedObservedPoint, mI, =, observations, [, i, ], ;, while, (, (]
[int, i, =, j, -, 1, ;, WeightedObservedPoint, mI, =, observations, [, i, ], ;, while, (, (, i, >=]
[j, -, 1, ;, WeightedObservedPoint, mI, =, observations, [, i, ], ;, while, (, (, i, >=, 0, ), &&]
[-, 1, ;, WeightedObservedPoint, mI, =, observations, [, i, ], ;, while, (, (, i, >=, 0, ), &&, (]
[-, 1, ;, WeightedObservedPoint, mI, =, observations, [, i, ], ;, while, (, (, i, >=, 0, ), &&, (]
[-, 1, ;, WeightedObservedPoint, mI, =, observations, [, i, ], ;, while, (, (, i, >=, 0, ), &&, (]
[observations, [, i, ], ;, while, (, (, i, >=, 0, ), &&, (, curr, ., getX, (, ), <]
[observations, [, i, ], ;, while, (, (, i, >=, 0, ), &&, (, curr, ., getX, (, ), <]
[i, >=, 0, ), &&, (, curr, ., getX, (, ), <, mI, ., getX, (, ), ), ), {]
[i, >=, 0, ), &&, (, curr, ., getX, (, ), <, mI, ., getX, (, ), ), ), {]
[0, ), &&, (, curr, ., getX, (, ), <, mI, ., getX, (, ), ), ), {, observations, []
[0, ), &&, (, curr, ., getX, (, ), <, mI, ., getX, (, ), ), ), {, observations, []
[&&, (, curr, ., getX, (, ), <, mI, ., getX, (, ), ), ), {, observations, [, i, +]
[., getX, (, ), <, mI, ., getX, (, ), ), ), {, observations, [, i, +, 1, ], =]
[<, mI, ., getX, (, ), ), ), {, observations, [, i, +, 1, ], =, mI, ;, if, (]
[<, mI, ., getX, (, ), ), ), {, observations, [, i, +, 1, ], =, mI, ;, if, (]
[<, mI, ., getX, (, ), ), ), {, observations, [, i, +, 1, ], =, mI, ;, if, (]
[getX, (, ), ), ), {, observations, [, i, +, 1, ], =, mI, ;, if, (, i, --, !=]
[), ), {, observations, [, i, +, 1, ], =, mI, ;, if, (, i, --, !=, 0, ), {]
[{, observations, [, i, +, 1, ], =, mI, ;, if, (, i, --, !=, 0, ), {, mI, =]
[{, observations, [, i, +, 1, ], =, mI, ;, if, (, i, --, !=, 0, ), {, mI, =]
[[, i, +, 1, ], =, mI, ;, if, (, i, --, !=, 0, ), {, mI, =, observations, []
[=, mI, ;, if, (, i, --, !=, 0, ), {, mI, =, observations, [, i, ], ;, }, }]
[=, mI, ;, if, (, i, --, !=, 0, ), {, mI, =, observations, [, i, ], ;, }, }]
[;, if, (, i, --, !=, 0, ), {, mI, =, observations, [, i, ], ;, }, }, observations, []
[;, if, (, i, --, !=, 0, ), {, mI, =, observations, [, i, ], ;, }, }, observations, []
[(, i, --, !=, 0, ), {, mI, =, observations, [, i, ], ;, }, }, observations, [, i, +]
[!=, 0, ), {, mI, =, observations, [, i, ], ;, }, }, observations, [, i, +, 1, ], =]
[), {, mI, =, observations, [, i, ], ;, }, }, observations, [, i, +, 1, ], =, curr, ;]
[mI, =, observations, [, i, ], ;, }, }, observations, [, i, +, 1, ], =, curr, ;, curr, =]
[mI, =, observations, [, i, ], ;, }, }, observations, [, i, +, 1, ], =, curr, ;, curr, =]
[observations, [, i, ], ;, }, }, observations, [, i, +, 1, ], =, curr, ;, curr, =, observations, []
[}, observations, [, i, +, 1, ], =, curr, ;, curr, =, observations, [, j, ], ;, }, }, return]
[;, }, private, double, [, ], guessAOmega, (, WeightedObservedPoint, [, ], observations, ), {, final, double, [, ], aOmega, =]
[double, [, ], guessAOmega, (, WeightedObservedPoint, [, ], observations, ), {, final, double, [, ], aOmega, =, new, double, []
[[, ], observations, ), {, final, double, [, ], aOmega, =, new, double, [, 2, ], ;, double, sx2, =]
[final, double, [, ], aOmega, =, new, double, [, 2, ], ;, double, sx2, =, 0, ;, double, sy2, =]
[=, new, double, [, 2, ], ;, double, sx2, =, 0, ;, double, sy2, =, 0, ;, double, sxy, =]
[], ;, double, sx2, =, 0, ;, double, sy2, =, 0, ;, double, sxy, =, 0, ;, double, sxz, =]
[0, ;, double, sy2, =, 0, ;, double, sxy, =, 0, ;, double, sxz, =, 0, ;, double, syz, =]
[0, ;, double, sxy, =, 0, ;, double, sxz, =, 0, ;, double, syz, =, 0, ;, double, currentX, =]
[0, ;, double, sxy, =, 0, ;, double, sxz, =, 0, ;, double, syz, =, 0, ;, double, currentX, =]
[0, ;, double, sxy, =, 0, ;, double, sxz, =, 0, ;, double, syz, =, 0, ;, double, currentX, =]
[double, sxy, =, 0, ;, double, sxz, =, 0, ;, double, syz, =, 0, ;, double, currentX, =, observations, []
[double, syz, =, 0, ;, double, currentX, =, observations, [, 0, ], ., getX, (, ), ;, double, currentY, =]
[double, syz, =, 0, ;, double, currentX, =, observations, [, 0, ], ., getX, (, ), ;, double, currentY, =]
[double, syz, =, 0, ;, double, currentX, =, observations, [, 0, ], ., getX, (, ), ;, double, currentY, =]
[=, 0, ;, double, currentX, =, observations, [, 0, ], ., getX, (, ), ;, double, currentY, =, observations, []
[., getX, (, ), ;, double, currentY, =, observations, [, 0, ], ., getY, (, ), ;, double, f2Integral, =]
[double, currentY, =, observations, [, 0, ], ., getY, (, ), ;, double, f2Integral, =, 0, ;, double, fPrime2Integral, =]
[], ., getY, (, ), ;, double, f2Integral, =, 0, ;, double, fPrime2Integral, =, 0, ;, final, double, startX, =]
[f2Integral, =, 0, ;, double, fPrime2Integral, =, 0, ;, final, double, startX, =, currentX, ;, for, (, int, i, =]
[0, ;, double, fPrime2Integral, =, 0, ;, final, double, startX, =, currentX, ;, for, (, int, i, =, 1, ;]
[0, ;, double, fPrime2Integral, =, 0, ;, final, double, startX, =, currentX, ;, for, (, int, i, =, 1, ;]
[double, fPrime2Integral, =, 0, ;, final, double, startX, =, currentX, ;, for, (, int, i, =, 1, ;, i, <]
[double, fPrime2Integral, =, 0, ;, final, double, startX, =, currentX, ;, for, (, int, i, =, 1, ;, i, <]
[;, final, double, startX, =, currentX, ;, for, (, int, i, =, 1, ;, i, <, observations, ., length, ;]
[final, double, startX, =, currentX, ;, for, (, int, i, =, 1, ;, i, <, observations, ., length, ;, ++]
[(, int, i, =, 1, ;, i, <, observations, ., length, ;, ++, i, ), {, final, double, previousX, =]
[i, <, observations, ., length, ;, ++, i, ), {, final, double, previousX, =, currentX, ;, final, double, previousY, =]
[observations, ., length, ;, ++, i, ), {, final, double, previousX, =, currentX, ;, final, double, previousY, =, currentY, ;]
[length, ;, ++, i, ), {, final, double, previousX, =, currentX, ;, final, double, previousY, =, currentY, ;, currentX, =]
[length, ;, ++, i, ), {, final, double, previousX, =, currentX, ;, final, double, previousY, =, currentY, ;, currentX, =]
[length, ;, ++, i, ), {, final, double, previousX, =, currentX, ;, final, double, previousY, =, currentY, ;, currentX, =]
[++, i, ), {, final, double, previousX, =, currentX, ;, final, double, previousY, =, currentY, ;, currentX, =, observations, []
[=, currentX, ;, final, double, previousY, =, currentY, ;, currentX, =, observations, [, i, ], ., getX, (, ), ;]
[;, final, double, previousY, =, currentY, ;, currentX, =, observations, [, i, ], ., getX, (, ), ;, currentY, =]
[;, final, double, previousY, =, currentY, ;, currentX, =, observations, [, i, ], ., getX, (, ), ;, currentY, =]
[;, final, double, previousY, =, currentY, ;, currentX, =, observations, [, i, ], ., getX, (, ), ;, currentY, =]
[double, previousY, =, currentY, ;, currentX, =, observations, [, i, ], ., getX, (, ), ;, currentY, =, observations, []
[., getX, (, ), ;, currentY, =, observations, [, i, ], ., getY, (, ), ;, final, double, dx, =]
[., getX, (, ), ;, currentY, =, observations, [, i, ], ., getY, (, ), ;, final, double, dx, =]
[(, ), ;, currentY, =, observations, [, i, ], ., getY, (, ), ;, final, double, dx, =, currentX, -]
[[, i, ], ., getY, (, ), ;, final, double, dx, =, currentX, -, previousX, ;, final, double, dy, =]
[[, i, ], ., getY, (, ), ;, final, double, dx, =, currentX, -, previousX, ;, final, double, dy, =]
[], ., getY, (, ), ;, final, double, dx, =, currentX, -, previousX, ;, final, double, dy, =, currentY, -]
[final, double, dx, =, currentX, -, previousX, ;, final, double, dy, =, currentY, -, previousY, ;, final, double, f2StepIntegral, =]
[final, double, dx, =, currentX, -, previousX, ;, final, double, dy, =, currentY, -, previousY, ;, final, double, f2StepIntegral, =]
[final, double, dx, =, currentX, -, previousX, ;, final, double, dy, =, currentY, -, previousY, ;, final, double, f2StepIntegral, =]
[dx, =, currentX, -, previousX, ;, final, double, dy, =, currentY, -, previousY, ;, final, double, f2StepIntegral, =, dx, *]
[=, currentX, -, previousX, ;, final, double, dy, =, currentY, -, previousY, ;, final, double, f2StepIntegral, =, dx, *, (]
[=, currentX, -, previousX, ;, final, double, dy, =, currentY, -, previousY, ;, final, double, f2StepIntegral, =, dx, *, (]
[=, currentX, -, previousX, ;, final, double, dy, =, currentY, -, previousY, ;, final, double, f2StepIntegral, =, dx, *, (]
[=, currentX, -, previousX, ;, final, double, dy, =, currentY, -, previousY, ;, final, double, f2StepIntegral, =, dx, *, (]
[-, previousX, ;, final, double, dy, =, currentY, -, previousY, ;, final, double, f2StepIntegral, =, dx, *, (, previousY, *]
[;, final, double, dy, =, currentY, -, previousY, ;, final, double, f2StepIntegral, =, dx, *, (, previousY, *, previousY, +]
[;, final, double, dy, =, currentY, -, previousY, ;, final, double, f2StepIntegral, =, dx, *, (, previousY, *, previousY, +]
[double, dy, =, currentY, -, previousY, ;, final, double, f2StepIntegral, =, dx, *, (, previousY, *, previousY, +, previousY, *]
[=, currentY, -, previousY, ;, final, double, f2StepIntegral, =, dx, *, (, previousY, *, previousY, +, previousY, *, currentY, +]
[=, currentY, -, previousY, ;, final, double, f2StepIntegral, =, dx, *, (, previousY, *, previousY, +, previousY, *, currentY, +]
[-, previousY, ;, final, double, f2StepIntegral, =, dx, *, (, previousY, *, previousY, +, previousY, *, currentY, +, currentY, *]
[final, double, f2StepIntegral, =, dx, *, (, previousY, *, previousY, +, previousY, *, currentY, +, currentY, *, currentY, ), /]
[(, previousY, *, previousY, +, previousY, *, currentY, +, currentY, *, currentY, ), /, 3, ;, final, double, fPrime2StepIntegral, =]
[(, previousY, *, previousY, +, previousY, *, currentY, +, currentY, *, currentY, ), /, 3, ;, final, double, fPrime2StepIntegral, =]
[(, previousY, *, previousY, +, previousY, *, currentY, +, currentY, *, currentY, ), /, 3, ;, final, double, fPrime2StepIntegral, =]
[*, previousY, +, previousY, *, currentY, +, currentY, *, currentY, ), /, 3, ;, final, double, fPrime2StepIntegral, =, dy, *]
[+, previousY, *, currentY, +, currentY, *, currentY, ), /, 3, ;, final, double, fPrime2StepIntegral, =, dy, *, dy, /]
[*, currentY, ), /, 3, ;, final, double, fPrime2StepIntegral, =, dy, *, dy, /, dx, ;, final, double, x, =]
[*, currentY, ), /, 3, ;, final, double, fPrime2StepIntegral, =, dy, *, dy, /, dx, ;, final, double, x, =]
[), /, 3, ;, final, double, fPrime2StepIntegral, =, dy, *, dy, /, dx, ;, final, double, x, =, currentX, -]
[3, ;, final, double, fPrime2StepIntegral, =, dy, *, dy, /, dx, ;, final, double, x, =, currentX, -, startX, ;]
[final, double, fPrime2StepIntegral, =, dy, *, dy, /, dx, ;, final, double, x, =, currentX, -, startX, ;, f2Integral, +=]
[fPrime2StepIntegral, =, dy, *, dy, /, dx, ;, final, double, x, =, currentX, -, startX, ;, f2Integral, +=, f2StepIntegral, ;]
[dy, *, dy, /, dx, ;, final, double, x, =, currentX, -, startX, ;, f2Integral, +=, f2StepIntegral, ;, fPrime2Integral, +=]
[dy, /, dx, ;, final, double, x, =, currentX, -, startX, ;, f2Integral, +=, f2StepIntegral, ;, fPrime2Integral, +=, fPrime2StepIntegral, ;]
[dx, ;, final, double, x, =, currentX, -, startX, ;, f2Integral, +=, f2StepIntegral, ;, fPrime2Integral, +=, fPrime2StepIntegral, ;, sx2, +=]
[dx, ;, final, double, x, =, currentX, -, startX, ;, f2Integral, +=, f2StepIntegral, ;, fPrime2Integral, +=, fPrime2StepIntegral, ;, sx2, +=]
[final, double, x, =, currentX, -, startX, ;, f2Integral, +=, f2StepIntegral, ;, fPrime2Integral, +=, fPrime2StepIntegral, ;, sx2, +=, x, *]
[x, =, currentX, -, startX, ;, f2Integral, +=, f2StepIntegral, ;, fPrime2Integral, +=, fPrime2StepIntegral, ;, sx2, +=, x, *, x, ;]
[currentX, -, startX, ;, f2Integral, +=, f2StepIntegral, ;, fPrime2Integral, +=, fPrime2StepIntegral, ;, sx2, +=, x, *, x, ;, sy2, +=]
[currentX, -, startX, ;, f2Integral, +=, f2StepIntegral, ;, fPrime2Integral, +=, fPrime2StepIntegral, ;, sx2, +=, x, *, x, ;, sy2, +=]
[startX, ;, f2Integral, +=, f2StepIntegral, ;, fPrime2Integral, +=, fPrime2StepIntegral, ;, sx2, +=, x, *, x, ;, sy2, +=, f2Integral, *]
[f2Integral, +=, f2StepIntegral, ;, fPrime2Integral, +=, fPrime2StepIntegral, ;, sx2, +=, x, *, x, ;, sy2, +=, f2Integral, *, f2Integral, ;]
[f2StepIntegral, ;, fPrime2Integral, +=, fPrime2StepIntegral, ;, sx2, +=, x, *, x, ;, sy2, +=, f2Integral, *, f2Integral, ;, sxy, +=]
[f2StepIntegral, ;, fPrime2Integral, +=, fPrime2StepIntegral, ;, sx2, +=, x, *, x, ;, sy2, +=, f2Integral, *, f2Integral, ;, sxy, +=]
[fPrime2Integral, +=, fPrime2StepIntegral, ;, sx2, +=, x, *, x, ;, sy2, +=, f2Integral, *, f2Integral, ;, sxy, +=, x, *]
[fPrime2StepIntegral, ;, sx2, +=, x, *, x, ;, sy2, +=, f2Integral, *, f2Integral, ;, sxy, +=, x, *, f2Integral, ;]
[sx2, +=, x, *, x, ;, sy2, +=, f2Integral, *, f2Integral, ;, sxy, +=, x, *, f2Integral, ;, sxz, +=]
[sx2, +=, x, *, x, ;, sy2, +=, f2Integral, *, f2Integral, ;, sxy, +=, x, *, f2Integral, ;, sxz, +=]
[x, *, x, ;, sy2, +=, f2Integral, *, f2Integral, ;, sxy, +=, x, *, f2Integral, ;, sxz, +=, x, *]
[x, ;, sy2, +=, f2Integral, *, f2Integral, ;, sxy, +=, x, *, f2Integral, ;, sxz, +=, x, *, fPrime2Integral, ;]
[sy2, +=, f2Integral, *, f2Integral, ;, sxy, +=, x, *, f2Integral, ;, sxz, +=, x, *, fPrime2Integral, ;, syz, +=]
[sy2, +=, f2Integral, *, f2Integral, ;, sxy, +=, x, *, f2Integral, ;, sxz, +=, x, *, fPrime2Integral, ;, syz, +=]
[f2Integral, *, f2Integral, ;, sxy, +=, x, *, f2Integral, ;, sxz, +=, x, *, fPrime2Integral, ;, syz, +=, f2Integral, *]
[x, *, f2Integral, ;, sxz, +=, x, *, fPrime2Integral, ;, syz, +=, f2Integral, *, fPrime2Integral, ;, }, double, c1, =]
[x, *, f2Integral, ;, sxz, +=, x, *, fPrime2Integral, ;, syz, +=, f2Integral, *, fPrime2Integral, ;, }, double, c1, =]
[x, *, f2Integral, ;, sxz, +=, x, *, fPrime2Integral, ;, syz, +=, f2Integral, *, fPrime2Integral, ;, }, double, c1, =]
[f2Integral, ;, sxz, +=, x, *, fPrime2Integral, ;, syz, +=, f2Integral, *, fPrime2Integral, ;, }, double, c1, =, sy2, *]
[sxz, +=, x, *, fPrime2Integral, ;, syz, +=, f2Integral, *, fPrime2Integral, ;, }, double, c1, =, sy2, *, sxz, -]
[sxz, +=, x, *, fPrime2Integral, ;, syz, +=, f2Integral, *, fPrime2Integral, ;, }, double, c1, =, sy2, *, sxz, -]
[x, *, fPrime2Integral, ;, syz, +=, f2Integral, *, fPrime2Integral, ;, }, double, c1, =, sy2, *, sxz, -, sxy, *]
[+=, f2Integral, *, fPrime2Integral, ;, }, double, c1, =, sy2, *, sxz, -, sxy, *, syz, ;, double, c2, =]
[+=, f2Integral, *, fPrime2Integral, ;, }, double, c1, =, sy2, *, sxz, -, sxy, *, syz, ;, double, c2, =]
[+=, f2Integral, *, fPrime2Integral, ;, }, double, c1, =, sy2, *, sxz, -, sxy, *, syz, ;, double, c2, =]
[*, fPrime2Integral, ;, }, double, c1, =, sy2, *, sxz, -, sxy, *, syz, ;, double, c2, =, sxy, *]
[;, }, double, c1, =, sy2, *, sxz, -, sxy, *, syz, ;, double, c2, =, sxy, *, sxz, -]
[;, }, double, c1, =, sy2, *, sxz, -, sxy, *, syz, ;, double, c2, =, sxy, *, sxz, -]
[double, c1, =, sy2, *, sxz, -, sxy, *, syz, ;, double, c2, =, sxy, *, sxz, -, sx2, *]
[sxz, -, sxy, *, syz, ;, double, c2, =, sxy, *, sxz, -, sx2, *, syz, ;, double, c3, =]
[sxz, -, sxy, *, syz, ;, double, c2, =, sxy, *, sxz, -, sx2, *, syz, ;, double, c3, =]
[sxz, -, sxy, *, syz, ;, double, c2, =, sxy, *, sxz, -, sx2, *, syz, ;, double, c3, =]
[sxy, *, syz, ;, double, c2, =, sxy, *, sxz, -, sx2, *, syz, ;, double, c3, =, sx2, *]
[syz, ;, double, c2, =, sxy, *, sxz, -, sx2, *, syz, ;, double, c3, =, sx2, *, sy2, -]
[syz, ;, double, c2, =, sxy, *, sxz, -, sx2, *, syz, ;, double, c3, =, sx2, *, sy2, -]
[double, c2, =, sxy, *, sxz, -, sx2, *, syz, ;, double, c3, =, sx2, *, sy2, -, sxy, *]
[*, sxz, -, sx2, *, syz, ;, double, c3, =, sx2, *, sy2, -, sxy, *, sxy, ;, if, (]
[*, sxz, -, sx2, *, syz, ;, double, c3, =, sx2, *, sy2, -, sxy, *, sxy, ;, if, (]
[sxz, -, sx2, *, syz, ;, double, c3, =, sx2, *, sy2, -, sxy, *, sxy, ;, if, (, (]
[sxz, -, sx2, *, syz, ;, double, c3, =, sx2, *, sy2, -, sxy, *, sxy, ;, if, (, (]
[sxz, -, sx2, *, syz, ;, double, c3, =, sx2, *, sy2, -, sxy, *, sxy, ;, if, (, (]
[sx2, *, syz, ;, double, c3, =, sx2, *, sy2, -, sxy, *, sxy, ;, if, (, (, c1, /]
[syz, ;, double, c3, =, sx2, *, sy2, -, sxy, *, sxy, ;, if, (, (, c1, /, c2, <]
[c3, =, sx2, *, sy2, -, sxy, *, sxy, ;, if, (, (, c1, /, c2, <, 0, ), ||]
[=, sx2, *, sy2, -, sxy, *, sxy, ;, if, (, (, c1, /, c2, <, 0, ), ||, (]
[=, sx2, *, sy2, -, sxy, *, sxy, ;, if, (, (, c1, /, c2, <, 0, ), ||, (]
[=, sx2, *, sy2, -, sxy, *, sxy, ;, if, (, (, c1, /, c2, <, 0, ), ||, (]
[*, sy2, -, sxy, *, sxy, ;, if, (, (, c1, /, c2, <, 0, ), ||, (, c2, /]
[-, sxy, *, sxy, ;, if, (, (, c1, /, c2, <, 0, ), ||, (, c2, /, c3, <]
[c1, /, c2, <, 0, ), ||, (, c2, /, c3, <, 0, ), ), {, final, int, last, =]
[c1, /, c2, <, 0, ), ||, (, c2, /, c3, <, 0, ), ), {, final, int, last, =]
[c1, /, c2, <, 0, ), ||, (, c2, /, c3, <, 0, ), ), {, final, int, last, =]
[0, ), ||, (, c2, /, c3, <, 0, ), ), {, final, int, last, =, observations, ., length, -]
[c3, <, 0, ), ), {, final, int, last, =, observations, ., length, -, 1, ;, final, double, xRange, =]
[c3, <, 0, ), ), {, final, int, last, =, observations, ., length, -, 1, ;, final, double, xRange, =]
[c3, <, 0, ), ), {, final, int, last, =, observations, ., length, -, 1, ;, final, double, xRange, =]
[c3, <, 0, ), ), {, final, int, last, =, observations, ., length, -, 1, ;, final, double, xRange, =]
[0, ), ), {, final, int, last, =, observations, ., length, -, 1, ;, final, double, xRange, =, observations, []
[=, observations, ., length, -, 1, ;, final, double, xRange, =, observations, [, last, ], ., getX, (, ), -]
[=, observations, ., length, -, 1, ;, final, double, xRange, =, observations, [, last, ], ., getX, (, ), -]
[=, observations, ., length, -, 1, ;, final, double, xRange, =, observations, [, last, ], ., getX, (, ), -]
[., length, -, 1, ;, final, double, xRange, =, observations, [, last, ], ., getX, (, ), -, observations, []
[observations, [, last, ], ., getX, (, ), -, observations, [, 0, ], ., getX, (, ), ;, if, (]
[observations, [, last, ], ., getX, (, ), -, observations, [, 0, ], ., getX, (, ), ;, if, (]
[last, ], ., getX, (, ), -, observations, [, 0, ], ., getX, (, ), ;, if, (, xRange, ==]
[(, ), -, observations, [, 0, ], ., getX, (, ), ;, if, (, xRange, ==, 0, ), {, throw]
[], ., getX, (, ), ;, if, (, xRange, ==, 0, ), {, throw, new, ZeroException, (, ), ;, }]
[], ., getX, (, ), ;, if, (, xRange, ==, 0, ), {, throw, new, ZeroException, (, ), ;, }]
[getX, (, ), ;, if, (, xRange, ==, 0, ), {, throw, new, ZeroException, (, ), ;, }, aOmega, []
[;, if, (, xRange, ==, 0, ), {, throw, new, ZeroException, (, ), ;, }, aOmega, [, 1, ], =]
[;, if, (, xRange, ==, 0, ), {, throw, new, ZeroException, (, ), ;, }, aOmega, [, 1, ], =]
[;, if, (, xRange, ==, 0, ), {, throw, new, ZeroException, (, ), ;, }, aOmega, [, 1, ], =]
[(, xRange, ==, 0, ), {, throw, new, ZeroException, (, ), ;, }, aOmega, [, 1, ], =, 2, *]
[(, xRange, ==, 0, ), {, throw, new, ZeroException, (, ), ;, }, aOmega, [, 1, ], =, 2, *]
[), {, throw, new, ZeroException, (, ), ;, }, aOmega, [, 1, ], =, 2, *, Math, ., PI, /]
[(, ), ;, }, aOmega, [, 1, ], =, 2, *, Math, ., PI, /, xRange, ;, double, yMin, =]
[(, ), ;, }, aOmega, [, 1, ], =, 2, *, Math, ., PI, /, xRange, ;, double, yMin, =]
[], =, 2, *, Math, ., PI, /, xRange, ;, double, yMin, =, Double, ., POSITIVE_INFINITY, ;, double, yMax, =]
[], =, 2, *, Math, ., PI, /, xRange, ;, double, yMin, =, Double, ., POSITIVE_INFINITY, ;, double, yMax, =]
[;, double, yMin, =, Double, ., POSITIVE_INFINITY, ;, double, yMax, =, Double, ., NEGATIVE_INFINITY, ;, for, (, int, i, =]
[yMin, =, Double, ., POSITIVE_INFINITY, ;, double, yMax, =, Double, ., NEGATIVE_INFINITY, ;, for, (, int, i, =, 1, ;]
[yMin, =, Double, ., POSITIVE_INFINITY, ;, double, yMax, =, Double, ., NEGATIVE_INFINITY, ;, for, (, int, i, =, 1, ;]
[Double, ., POSITIVE_INFINITY, ;, double, yMax, =, Double, ., NEGATIVE_INFINITY, ;, for, (, int, i, =, 1, ;, i, <]
[Double, ., POSITIVE_INFINITY, ;, double, yMax, =, Double, ., NEGATIVE_INFINITY, ;, for, (, int, i, =, 1, ;, i, <]
[double, yMax, =, Double, ., NEGATIVE_INFINITY, ;, for, (, int, i, =, 1, ;, i, <, observations, ., length, ;]
[yMax, =, Double, ., NEGATIVE_INFINITY, ;, for, (, int, i, =, 1, ;, i, <, observations, ., length, ;, ++]
[(, int, i, =, 1, ;, i, <, observations, ., length, ;, ++, i, ), {, final, double, y, =]
[(, int, i, =, 1, ;, i, <, observations, ., length, ;, ++, i, ), {, final, double, y, =]
[(, int, i, =, 1, ;, i, <, observations, ., length, ;, ++, i, ), {, final, double, y, =]
[i, =, 1, ;, i, <, observations, ., length, ;, ++, i, ), {, final, double, y, =, observations, []
[;, ++, i, ), {, final, double, y, =, observations, [, i, ], ., getY, (, ), ;, if, (]
[;, ++, i, ), {, final, double, y, =, observations, [, i, ], ., getY, (, ), ;, if, (]
[i, ), {, final, double, y, =, observations, [, i, ], ., getY, (, ), ;, if, (, y, <]
[final, double, y, =, observations, [, i, ], ., getY, (, ), ;, if, (, y, <, yMin, ), {]
[y, =, observations, [, i, ], ., getY, (, ), ;, if, (, y, <, yMin, ), {, yMin, =]
[], ., getY, (, ), ;, if, (, y, <, yMin, ), {, yMin, =, y, ;, }, if, (]
[], ., getY, (, ), ;, if, (, y, <, yMin, ), {, yMin, =, y, ;, }, if, (]
[getY, (, ), ;, if, (, y, <, yMin, ), {, yMin, =, y, ;, }, if, (, y, >]
[;, if, (, y, <, yMin, ), {, yMin, =, y, ;, }, if, (, y, >, yMax, ), {]
[(, y, <, yMin, ), {, yMin, =, y, ;, }, if, (, y, >, yMax, ), {, yMax, =]
[), {, yMin, =, y, ;, }, if, (, y, >, yMax, ), {, yMax, =, y, ;, }, }]
[), {, yMin, =, y, ;, }, if, (, y, >, yMax, ), {, yMax, =, y, ;, }, }]
[yMin, =, y, ;, }, if, (, y, >, yMax, ), {, yMax, =, y, ;, }, }, aOmega, []
[;, }, if, (, y, >, yMax, ), {, yMax, =, y, ;, }, }, aOmega, [, 0, ], =]
[;, }, if, (, y, >, yMax, ), {, yMax, =, y, ;, }, }, aOmega, [, 0, ], =]
[if, (, y, >, yMax, ), {, yMax, =, y, ;, }, }, aOmega, [, 0, ], =, 0.5, *]
[(, y, >, yMax, ), {, yMax, =, y, ;, }, }, aOmega, [, 0, ], =, 0.5, *, (]
[(, y, >, yMax, ), {, yMax, =, y, ;, }, }, aOmega, [, 0, ], =, 0.5, *, (]
[>, yMax, ), {, yMax, =, y, ;, }, }, aOmega, [, 0, ], =, 0.5, *, (, yMax, -]
[}, }, aOmega, [, 0, ], =, 0.5, *, (, yMax, -, yMin, ), ;, }, else, {, if, (]
[}, }, aOmega, [, 0, ], =, 0.5, *, (, yMax, -, yMin, ), ;, }, else, {, if, (]
[aOmega, [, 0, ], =, 0.5, *, (, yMax, -, yMin, ), ;, }, else, {, if, (, c2, ==]
[=, 0.5, *, (, yMax, -, yMin, ), ;, }, else, {, if, (, c2, ==, 0, ), {, throw]
[(, yMax, -, yMin, ), ;, }, else, {, if, (, c2, ==, 0, ), {, throw, new, MathIllegalStateException, (]
[(, yMax, -, yMin, ), ;, }, else, {, if, (, c2, ==, 0, ), {, throw, new, MathIllegalStateException, (]
[}, else, {, if, (, c2, ==, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }]
[}, else, {, if, (, c2, ==, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }]
[{, if, (, c2, ==, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, aOmega, []
[c2, ==, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, aOmega, [, 0, ], =]
[c2, ==, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, aOmega, [, 0, ], =]
[{, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, aOmega, [, 0, ], =, FastMath, ., sqrt, (]
[{, throw, new, MathIllegalStateException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, aOmega, [, 0, ], =, FastMath, ., sqrt, (]
[new, MathIllegalStateException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, aOmega, [, 0, ], =, FastMath, ., sqrt, (, c1, /]
[LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, aOmega, [, 0, ], =, FastMath, ., sqrt, (, c1, /, c2, ), ;]
[LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, aOmega, [, 0, ], =, FastMath, ., sqrt, (, c1, /, c2, ), ;]
[ZERO_DENOMINATOR, ), ;, }, aOmega, [, 0, ], =, FastMath, ., sqrt, (, c1, /, c2, ), ;, aOmega, []
[}, aOmega, [, 0, ], =, FastMath, ., sqrt, (, c1, /, c2, ), ;, aOmega, [, 1, ], =]
[}, aOmega, [, 0, ], =, FastMath, ., sqrt, (, c1, /, c2, ), ;, aOmega, [, 1, ], =]
[], =, FastMath, ., sqrt, (, c1, /, c2, ), ;, aOmega, [, 1, ], =, FastMath, ., sqrt, (]
[], =, FastMath, ., sqrt, (, c1, /, c2, ), ;, aOmega, [, 1, ], =, FastMath, ., sqrt, (]
[FastMath, ., sqrt, (, c1, /, c2, ), ;, aOmega, [, 1, ], =, FastMath, ., sqrt, (, c2, /]
[/, c2, ), ;, aOmega, [, 1, ], =, FastMath, ., sqrt, (, c2, /, c3, ), ;, }, return]
[), ;, }, return, aOmega, ;, }, private, double, guessPhi, (, WeightedObservedPoint, [, ], observations, ), {, double, fcMean, =]
[;, }, private, double, guessPhi, (, WeightedObservedPoint, [, ], observations, ), {, double, fcMean, =, 0, ;, double, fsMean, =]
[(, WeightedObservedPoint, [, ], observations, ), {, double, fcMean, =, 0, ;, double, fsMean, =, 0, ;, double, currentX, =]
[(, WeightedObservedPoint, [, ], observations, ), {, double, fcMean, =, 0, ;, double, fsMean, =, 0, ;, double, currentX, =]
[(, WeightedObservedPoint, [, ], observations, ), {, double, fcMean, =, 0, ;, double, fsMean, =, 0, ;, double, currentX, =]
[[, ], observations, ), {, double, fcMean, =, 0, ;, double, fsMean, =, 0, ;, double, currentX, =, observations, []
[double, fsMean, =, 0, ;, double, currentX, =, observations, [, 0, ], ., getX, (, ), ;, double, currentY, =]
[double, fsMean, =, 0, ;, double, currentX, =, observations, [, 0, ], ., getX, (, ), ;, double, currentY, =]
[double, fsMean, =, 0, ;, double, currentX, =, observations, [, 0, ], ., getX, (, ), ;, double, currentY, =]
[=, 0, ;, double, currentX, =, observations, [, 0, ], ., getX, (, ), ;, double, currentY, =, observations, []
[(, ), ;, double, currentY, =, observations, [, 0, ], ., getY, (, ), ;, for, (, int, i, =]
[;, double, currentY, =, observations, [, 0, ], ., getY, (, ), ;, for, (, int, i, =, 1, ;]
[;, double, currentY, =, observations, [, 0, ], ., getY, (, ), ;, for, (, int, i, =, 1, ;]
[currentY, =, observations, [, 0, ], ., getY, (, ), ;, for, (, int, i, =, 1, ;, i, <]
[currentY, =, observations, [, 0, ], ., getY, (, ), ;, for, (, int, i, =, 1, ;, i, <]
[0, ], ., getY, (, ), ;, for, (, int, i, =, 1, ;, i, <, observations, ., length, ;]
[], ., getY, (, ), ;, for, (, int, i, =, 1, ;, i, <, observations, ., length, ;, ++]
[(, int, i, =, 1, ;, i, <, observations, ., length, ;, ++, i, ), {, final, double, previousX, =]
[i, <, observations, ., length, ;, ++, i, ), {, final, double, previousX, =, currentX, ;, final, double, previousY, =]
[observations, ., length, ;, ++, i, ), {, final, double, previousX, =, currentX, ;, final, double, previousY, =, currentY, ;]
[length, ;, ++, i, ), {, final, double, previousX, =, currentX, ;, final, double, previousY, =, currentY, ;, currentX, =]
[length, ;, ++, i, ), {, final, double, previousX, =, currentX, ;, final, double, previousY, =, currentY, ;, currentX, =]
[length, ;, ++, i, ), {, final, double, previousX, =, currentX, ;, final, double, previousY, =, currentY, ;, currentX, =]
[++, i, ), {, final, double, previousX, =, currentX, ;, final, double, previousY, =, currentY, ;, currentX, =, observations, []
[=, currentX, ;, final, double, previousY, =, currentY, ;, currentX, =, observations, [, i, ], ., getX, (, ), ;]
[;, final, double, previousY, =, currentY, ;, currentX, =, observations, [, i, ], ., getX, (, ), ;, currentY, =]
[;, final, double, previousY, =, currentY, ;, currentX, =, observations, [, i, ], ., getX, (, ), ;, currentY, =]
[;, final, double, previousY, =, currentY, ;, currentX, =, observations, [, i, ], ., getX, (, ), ;, currentY, =]
[double, previousY, =, currentY, ;, currentX, =, observations, [, i, ], ., getX, (, ), ;, currentY, =, observations, []
[., getX, (, ), ;, currentY, =, observations, [, i, ], ., getY, (, ), ;, final, double, currentYPrime, =]
[., getX, (, ), ;, currentY, =, observations, [, i, ], ., getY, (, ), ;, final, double, currentYPrime, =]
[getX, (, ), ;, currentY, =, observations, [, i, ], ., getY, (, ), ;, final, double, currentYPrime, =, (]
[getX, (, ), ;, currentY, =, observations, [, i, ], ., getY, (, ), ;, final, double, currentYPrime, =, (]
[), ;, currentY, =, observations, [, i, ], ., getY, (, ), ;, final, double, currentYPrime, =, (, currentY, -]
[=, observations, [, i, ], ., getY, (, ), ;, final, double, currentYPrime, =, (, currentY, -, previousY, ), /]
[observations, [, i, ], ., getY, (, ), ;, final, double, currentYPrime, =, (, currentY, -, previousY, ), /, (]
[observations, [, i, ], ., getY, (, ), ;, final, double, currentYPrime, =, (, currentY, -, previousY, ), /, (]
[i, ], ., getY, (, ), ;, final, double, currentYPrime, =, (, currentY, -, previousY, ), /, (, currentX, -]
[;, final, double, currentYPrime, =, (, currentY, -, previousY, ), /, (, currentX, -, previousX, ), ;, double, omegaX, =]
[;, final, double, currentYPrime, =, (, currentY, -, previousY, ), /, (, currentX, -, previousX, ), ;, double, omegaX, =]
[double, currentYPrime, =, (, currentY, -, previousY, ), /, (, currentX, -, previousX, ), ;, double, omegaX, =, omega, *]
[-, previousY, ), /, (, currentX, -, previousX, ), ;, double, omegaX, =, omega, *, currentX, ;, double, cosine, =]
[-, previousY, ), /, (, currentX, -, previousX, ), ;, double, omegaX, =, omega, *, currentX, ;, double, cosine, =]
[(, currentX, -, previousX, ), ;, double, omegaX, =, omega, *, currentX, ;, double, cosine, =, FastMath, ., cos, (]
[double, omegaX, =, omega, *, currentX, ;, double, cosine, =, FastMath, ., cos, (, omegaX, ), ;, double, sine, =]
[double, omegaX, =, omega, *, currentX, ;, double, cosine, =, FastMath, ., cos, (, omegaX, ), ;, double, sine, =]
[*, currentX, ;, double, cosine, =, FastMath, ., cos, (, omegaX, ), ;, double, sine, =, FastMath, ., sin, (]
[double, cosine, =, FastMath, ., cos, (, omegaX, ), ;, double, sine, =, FastMath, ., sin, (, omegaX, ), ;]
[=, FastMath, ., cos, (, omegaX, ), ;, double, sine, =, FastMath, ., sin, (, omegaX, ), ;, fcMean, +=]
[=, FastMath, ., cos, (, omegaX, ), ;, double, sine, =, FastMath, ., sin, (, omegaX, ), ;, fcMean, +=]
[=, FastMath, ., cos, (, omegaX, ), ;, double, sine, =, FastMath, ., sin, (, omegaX, ), ;, fcMean, +=]
[=, FastMath, ., cos, (, omegaX, ), ;, double, sine, =, FastMath, ., sin, (, omegaX, ), ;, fcMean, +=]
[., cos, (, omegaX, ), ;, double, sine, =, FastMath, ., sin, (, omegaX, ), ;, fcMean, +=, omega, *]
[(, omegaX, ), ;, double, sine, =, FastMath, ., sin, (, omegaX, ), ;, fcMean, +=, omega, *, currentY, *]
[), ;, double, sine, =, FastMath, ., sin, (, omegaX, ), ;, fcMean, +=, omega, *, currentY, *, cosine, -]
[), ;, double, sine, =, FastMath, ., sin, (, omegaX, ), ;, fcMean, +=, omega, *, currentY, *, cosine, -]
[double, sine, =, FastMath, ., sin, (, omegaX, ), ;, fcMean, +=, omega, *, currentY, *, cosine, -, currentYPrime, *]
[=, FastMath, ., sin, (, omegaX, ), ;, fcMean, +=, omega, *, currentY, *, cosine, -, currentYPrime, *, sine, ;]
[., sin, (, omegaX, ), ;, fcMean, +=, omega, *, currentY, *, cosine, -, currentYPrime, *, sine, ;, fsMean, +=]
[., sin, (, omegaX, ), ;, fcMean, +=, omega, *, currentY, *, cosine, -, currentYPrime, *, sine, ;, fsMean, +=]
[., sin, (, omegaX, ), ;, fcMean, +=, omega, *, currentY, *, cosine, -, currentYPrime, *, sine, ;, fsMean, +=]
[., sin, (, omegaX, ), ;, fcMean, +=, omega, *, currentY, *, cosine, -, currentYPrime, *, sine, ;, fsMean, +=]
[(, omegaX, ), ;, fcMean, +=, omega, *, currentY, *, cosine, -, currentYPrime, *, sine, ;, fsMean, +=, omega, *]
[), ;, fcMean, +=, omega, *, currentY, *, cosine, -, currentYPrime, *, sine, ;, fsMean, +=, omega, *, currentY, *]
[fcMean, +=, omega, *, currentY, *, cosine, -, currentYPrime, *, sine, ;, fsMean, +=, omega, *, currentY, *, sine, +]
[fcMean, +=, omega, *, currentY, *, cosine, -, currentYPrime, *, sine, ;, fsMean, +=, omega, *, currentY, *, sine, +]
[omega, *, currentY, *, cosine, -, currentYPrime, *, sine, ;, fsMean, +=, omega, *, currentY, *, sine, +, currentYPrime, *]
[cosine, -, currentYPrime, *, sine, ;, fsMean, +=, omega, *, currentY, *, sine, +, currentYPrime, *, cosine, ;, }, return]
[cosine, -, currentYPrime, *, sine, ;, fsMean, +=, omega, *, currentY, *, sine, +, currentYPrime, *, cosine, ;, }, return]
[sine, ;, fsMean, +=, omega, *, currentY, *, sine, +, currentYPrime, *, cosine, ;, }, return, FastMath, ., atan2, (]
[;, fsMean, +=, omega, *, currentY, *, sine, +, currentYPrime, *, cosine, ;, }, return, FastMath, ., atan2, (, -]
[+=, omega, *, currentY, *, sine, +, currentYPrime, *, cosine, ;, }, return, FastMath, ., atan2, (, -, fsMean, ,]
