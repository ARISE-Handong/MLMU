[chart, ., util, ., VerticalAlignment, ;, public, class, FlowArrangement, implements, Arrangement, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[;, private, VerticalAlignment, verticalAlignment, ;, private, double, horizontalGap, ;, private, double, verticalGap, ;, public, FlowArrangement, (, ), {, this, (]
[;, private, VerticalAlignment, verticalAlignment, ;, private, double, horizontalGap, ;, private, double, verticalGap, ;, public, FlowArrangement, (, ), {, this, (]
[;, private, double, horizontalGap, ;, private, double, verticalGap, ;, public, FlowArrangement, (, ), {, this, (, HorizontalAlignment, ., CENTER, ,]
[;, private, double, horizontalGap, ;, private, double, verticalGap, ;, public, FlowArrangement, (, ), {, this, (, HorizontalAlignment, ., CENTER, ,]
[;, private, double, verticalGap, ;, public, FlowArrangement, (, ), {, this, (, HorizontalAlignment, ., CENTER, ,, VerticalAlignment, ., CENTER, ,]
[double, verticalGap, ;, public, FlowArrangement, (, ), {, this, (, HorizontalAlignment, ., CENTER, ,, VerticalAlignment, ., CENTER, ,, 2.0, ,]
[2.0, ), ;, }, public, FlowArrangement, (, HorizontalAlignment, hAlign, ,, VerticalAlignment, vAlign, ,, double, hGap, ,, double, vGap, ), {]
[2.0, ), ;, }, public, FlowArrangement, (, HorizontalAlignment, hAlign, ,, VerticalAlignment, vAlign, ,, double, hGap, ,, double, vGap, ), {]
[public, FlowArrangement, (, HorizontalAlignment, hAlign, ,, VerticalAlignment, vAlign, ,, double, hGap, ,, double, vGap, ), {, this, ., horizontalAlignment, =]
[(, HorizontalAlignment, hAlign, ,, VerticalAlignment, vAlign, ,, double, hGap, ,, double, vGap, ), {, this, ., horizontalAlignment, =, hAlign, ;]
[(, HorizontalAlignment, hAlign, ,, VerticalAlignment, vAlign, ,, double, hGap, ,, double, vGap, ), {, this, ., horizontalAlignment, =, hAlign, ;]
[VerticalAlignment, vAlign, ,, double, hGap, ,, double, vGap, ), {, this, ., horizontalAlignment, =, hAlign, ;, this, ., verticalAlignment, =]
[,, double, hGap, ,, double, vGap, ), {, this, ., horizontalAlignment, =, hAlign, ;, this, ., verticalAlignment, =, vAlign, ;]
[,, double, hGap, ,, double, vGap, ), {, this, ., horizontalAlignment, =, hAlign, ;, this, ., verticalAlignment, =, vAlign, ;]
[double, vGap, ), {, this, ., horizontalAlignment, =, hAlign, ;, this, ., verticalAlignment, =, vAlign, ;, this, ., horizontalGap, =]
[), {, this, ., horizontalAlignment, =, hAlign, ;, this, ., verticalAlignment, =, vAlign, ;, this, ., horizontalGap, =, hGap, ;]
[), {, this, ., horizontalAlignment, =, hAlign, ;, this, ., verticalAlignment, =, vAlign, ;, this, ., horizontalGap, =, hGap, ;]
[horizontalAlignment, =, hAlign, ;, this, ., verticalAlignment, =, vAlign, ;, this, ., horizontalGap, =, hGap, ;, this, ., verticalGap, =]
[), {, }, public, Size2D, arrange, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, LengthConstraintType, w, =]
[), {, }, public, Size2D, arrange, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, LengthConstraintType, w, =]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, LengthConstraintType, w, =, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, LengthConstraintType, w, =, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =]
[LengthConstraintType, w, =, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (]
[LengthConstraintType, w, =, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (]
[=, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==]
[=, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==]
[LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (]
[LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (]
[=, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==]
[=, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==]
[;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return]
[(, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (]
[==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,]
[(, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (]
[(, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==]
[return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return]
[(, container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeNF, (]
[,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeNF, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeNF, (, container, ,, g2, ,]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[., FIXED, ), {, return, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[., FIXED, ), {, return, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[(, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw]
[g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (]
[(, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (]
[(, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (]
[==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==]
[==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==]
[new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (]
[new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (]
[(, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==]
[(, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==]
[else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return]
[(, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (]
[==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,]
[., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[(, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[(, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeFR, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeFR, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeFR, (, container, ,, g2, ,]
[LengthConstraintType, ., RANGE, ), {, return, arrangeFR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (]
[LengthConstraintType, ., RANGE, ), {, return, arrangeFR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (]
[RANGE, ), {, return, arrangeFR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==]
[RANGE, ), {, return, arrangeFR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==]
[,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (]
[,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (]
[,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==]
[,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==]
[else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return]
[(, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (]
[==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,]
[., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[(, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[(, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,]
[h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, throw]
[., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, throw, new, RuntimeException, (]
[), ;, }, protected, Size2D, arrangeFN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, List, blocks, =]
[), ;, }, protected, Size2D, arrangeFN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, List, blocks, =]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, List, blocks, =, container, ., getBlocks, (, ), ;, double, width, =]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, List, blocks, =, container, ., getBlocks, (, ), ;, double, width, =]
[blocks, =, container, ., getBlocks, (, ), ;, double, width, =, constraint, ., getWidth, (, ), ;, double, x, =]
[(, ), ;, double, width, =, constraint, ., getWidth, (, ), ;, double, x, =, 0.0, ;, double, y, =]
[=, constraint, ., getWidth, (, ), ;, double, x, =, 0.0, ;, double, y, =, 0.0, ;, double, maxHeight, =]
[), ;, double, x, =, 0.0, ;, double, y, =, 0.0, ;, double, maxHeight, =, 0.0, ;, List, itemsInRow, =]
[0.0, ;, double, maxHeight, =, 0.0, ;, List, itemsInRow, =, new, ArrayList, (, ), ;, for, (, int, i, =]
[double, maxHeight, =, 0.0, ;, List, itemsInRow, =, new, ArrayList, (, ), ;, for, (, int, i, =, 0, ;]
[double, maxHeight, =, 0.0, ;, List, itemsInRow, =, new, ArrayList, (, ), ;, for, (, int, i, =, 0, ;]
[=, 0.0, ;, List, itemsInRow, =, new, ArrayList, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, 0.0, ;, List, itemsInRow, =, new, ArrayList, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[new, ArrayList, (, ), ;, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;]
[new, ArrayList, (, ), ;, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;]
[int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =]
[0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, )]
[0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, )]
[blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (]
[i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, Size2D, size, =]
[i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, Size2D, size, =]
[Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, Size2D, size, =, block, ., arrange, (]
[=, (, Block, ), blocks, ., get, (, i, ), ;, Size2D, size, =, block, ., arrange, (, g2, ,]
[=, (, Block, ), blocks, ., get, (, i, ), ;, Size2D, size, =, block, ., arrange, (, g2, ,]
[(, i, ), ;, Size2D, size, =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (]
[(, i, ), ;, Size2D, size, =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (]
[(, i, ), ;, Size2D, size, =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (]
[), ;, Size2D, size, =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (, x, +]
[), ;, Size2D, size, =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (, x, +]
[=, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (, x, +, size, ., width, <=]
[arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (, x, +, size, ., width, <=, width, ), {]
[arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (, x, +, size, ., width, <=, width, ), {]
[RectangleConstraint, ., NONE, ), ;, if, (, x, +, size, ., width, <=, width, ), {, itemsInRow, ., add, (]
[), ;, if, (, x, +, size, ., width, <=, width, ), {, itemsInRow, ., add, (, block, ), ;]
[), ;, if, (, x, +, size, ., width, <=, width, ), {, itemsInRow, ., add, (, block, ), ;]
[x, +, size, ., width, <=, width, ), {, itemsInRow, ., add, (, block, ), ;, block, ., setBounds, (]
[<=, width, ), {, itemsInRow, ., add, (, block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (]
[), {, itemsInRow, ., add, (, block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,]
[itemsInRow, ., add, (, block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,]
[itemsInRow, ., add, (, block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,]
[block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,]
[block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,]
[(, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, size, ., height, ), ), ;]
[Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, size, ., height, ), ), ;, x, =]
[Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, size, ., height, ), ), ;, x, =]
[Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, size, ., height, ), ), ;, x, =]
[Double, (, x, ,, y, ,, size, ., width, ,, size, ., height, ), ), ;, x, =, x, +]
[Double, (, x, ,, y, ,, size, ., width, ,, size, ., height, ), ), ;, x, =, x, +]
[y, ,, size, ., width, ,, size, ., height, ), ), ;, x, =, x, +, size, ., width, +]
[y, ,, size, ., width, ,, size, ., height, ), ), ;, x, =, x, +, size, ., width, +]
[width, ,, size, ., height, ), ), ;, x, =, x, +, size, ., width, +, this, ., horizontalGap, ;]
[size, ., height, ), ), ;, x, =, x, +, size, ., width, +, this, ., horizontalGap, ;, maxHeight, =]
[size, ., height, ), ), ;, x, =, x, +, size, ., width, +, this, ., horizontalGap, ;, maxHeight, =]
[), ;, x, =, x, +, size, ., width, +, this, ., horizontalGap, ;, maxHeight, =, Math, ., max, (]
[x, =, x, +, size, ., width, +, this, ., horizontalGap, ;, maxHeight, =, Math, ., max, (, maxHeight, ,]
[x, =, x, +, size, ., width, +, this, ., horizontalGap, ;, maxHeight, =, Math, ., max, (, maxHeight, ,]
[horizontalGap, ;, maxHeight, =, Math, ., max, (, maxHeight, ,, size, ., height, ), ;, }, else, {, if, (]
[horizontalGap, ;, maxHeight, =, Math, ., max, (, maxHeight, ,, size, ., height, ), ;, }, else, {, if, (]
[(, maxHeight, ,, size, ., height, ), ;, }, else, {, if, (, itemsInRow, ., isEmpty, (, ), ), {]
[(, maxHeight, ,, size, ., height, ), ;, }, else, {, if, (, itemsInRow, ., isEmpty, (, ), ), {]
[., height, ), ;, }, else, {, if, (, itemsInRow, ., isEmpty, (, ), ), {, block, ., setBounds, (]
[else, {, if, (, itemsInRow, ., isEmpty, (, ), ), {, block, ., setBounds, (, new, Rectangle2D, ., Double, (]
[if, (, itemsInRow, ., isEmpty, (, ), ), {, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,]
[itemsInRow, ., isEmpty, (, ), ), {, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,]
[itemsInRow, ., isEmpty, (, ), ), {, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,]
[), ), {, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, Math, ., min, (]
[), ), {, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, Math, ., min, (]
[., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, Math, ., min, (, size, ., width, ,]
[., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, Math, ., min, (, size, ., width, ,]
[(, new, Rectangle2D, ., Double, (, x, ,, y, ,, Math, ., min, (, size, ., width, ,, width, -]
[., Double, (, x, ,, y, ,, Math, ., min, (, size, ., width, ,, width, -, x, ), ,]
[., Double, (, x, ,, y, ,, Math, ., min, (, size, ., width, ,, width, -, x, ), ,]
[,, Math, ., min, (, size, ., width, ,, width, -, x, ), ,, size, ., height, ), ), ;]
[., min, (, size, ., width, ,, width, -, x, ), ,, size, ., height, ), ), ;, x, =]
[(, size, ., width, ,, width, -, x, ), ,, size, ., height, ), ), ;, x, =, 0.0, ;]
[., width, ,, width, -, x, ), ,, size, ., height, ), ), ;, x, =, 0.0, ;, y, =]
[., width, ,, width, -, x, ), ,, size, ., height, ), ), ;, x, =, 0.0, ;, y, =]
[., width, ,, width, -, x, ), ,, size, ., height, ), ), ;, x, =, 0.0, ;, y, =]
[,, width, -, x, ), ,, size, ., height, ), ), ;, x, =, 0.0, ;, y, =, y, +]
[,, width, -, x, ), ,, size, ., height, ), ), ;, x, =, 0.0, ;, y, =, y, +]
[), ,, size, ., height, ), ), ;, x, =, 0.0, ;, y, =, y, +, size, ., height, +]
[), ,, size, ., height, ), ), ;, x, =, 0.0, ;, y, =, y, +, size, ., height, +]
[;, x, =, 0.0, ;, y, =, y, +, size, ., height, +, this, ., verticalGap, ;, }, else, {]
[;, x, =, 0.0, ;, y, =, y, +, size, ., height, +, this, ., verticalGap, ;, }, else, {]
[=, y, +, size, ., height, +, this, ., verticalGap, ;, }, else, {, itemsInRow, ., clear, (, ), ;]
[+, size, ., height, +, this, ., verticalGap, ;, }, else, {, itemsInRow, ., clear, (, ), ;, x, =]
[., height, +, this, ., verticalGap, ;, }, else, {, itemsInRow, ., clear, (, ), ;, x, =, 0.0, ;]
[+, this, ., verticalGap, ;, }, else, {, itemsInRow, ., clear, (, ), ;, x, =, 0.0, ;, y, =]
[+, this, ., verticalGap, ;, }, else, {, itemsInRow, ., clear, (, ), ;, x, =, 0.0, ;, y, =]
[+, this, ., verticalGap, ;, }, else, {, itemsInRow, ., clear, (, ), ;, x, =, 0.0, ;, y, =]
[., verticalGap, ;, }, else, {, itemsInRow, ., clear, (, ), ;, x, =, 0.0, ;, y, =, y, +]
[;, }, else, {, itemsInRow, ., clear, (, ), ;, x, =, 0.0, ;, y, =, y, +, maxHeight, +]
[;, }, else, {, itemsInRow, ., clear, (, ), ;, x, =, 0.0, ;, y, =, y, +, maxHeight, +]
[itemsInRow, ., clear, (, ), ;, x, =, 0.0, ;, y, =, y, +, maxHeight, +, this, ., verticalGap, ;]
[clear, (, ), ;, x, =, 0.0, ;, y, =, y, +, maxHeight, +, this, ., verticalGap, ;, maxHeight, =]
[clear, (, ), ;, x, =, 0.0, ;, y, =, y, +, maxHeight, +, this, ., verticalGap, ;, maxHeight, =]
[x, =, 0.0, ;, y, =, y, +, maxHeight, +, this, ., verticalGap, ;, maxHeight, =, size, ., height, ;]
[x, =, 0.0, ;, y, =, y, +, maxHeight, +, this, ., verticalGap, ;, maxHeight, =, size, ., height, ;]
[y, =, y, +, maxHeight, +, this, ., verticalGap, ;, maxHeight, =, size, ., height, ;, block, ., setBounds, (]
[+, this, ., verticalGap, ;, maxHeight, =, size, ., height, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (]
[., verticalGap, ;, maxHeight, =, size, ., height, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,]
[;, maxHeight, =, size, ., height, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,]
[;, maxHeight, =, size, ., height, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,]
[., height, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, Math, ., min, (]
[., height, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, Math, ., min, (]
[., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, Math, ., min, (, size, ., width, ,]
[new, Rectangle2D, ., Double, (, x, ,, y, ,, Math, ., min, (, size, ., width, ,, width, ), ,]
[new, Rectangle2D, ., Double, (, x, ,, y, ,, Math, ., min, (, size, ., width, ,, width, ), ,]
[,, y, ,, Math, ., min, (, size, ., width, ,, width, ), ,, size, ., height, ), ), ;]
[,, Math, ., min, (, size, ., width, ,, width, ), ,, size, ., height, ), ), ;, x, =]
[,, Math, ., min, (, size, ., width, ,, width, ), ,, size, ., height, ), ), ;, x, =]
[,, Math, ., min, (, size, ., width, ,, width, ), ,, size, ., height, ), ), ;, x, =]
[(, size, ., width, ,, width, ), ,, size, ., height, ), ), ;, x, =, size, ., width, +]
[(, size, ., width, ,, width, ), ,, size, ., height, ), ), ;, x, =, size, ., width, +]
[,, width, ), ,, size, ., height, ), ), ;, x, =, size, ., width, +, this, ., horizontalGap, ;]
[,, width, ), ,, size, ., height, ), ), ;, x, =, size, ., width, +, this, ., horizontalGap, ;]
[size, ., height, ), ), ;, x, =, size, ., width, +, this, ., horizontalGap, ;, itemsInRow, ., add, (]
[=, size, ., width, +, this, ., horizontalGap, ;, itemsInRow, ., add, (, block, ), ;, }, }, }, return]
[width, +, this, ., horizontalGap, ;, itemsInRow, ., add, (, block, ), ;, }, }, }, return, new, Size2D, (]
[width, +, this, ., horizontalGap, ;, itemsInRow, ., add, (, block, ), ;, }, }, }, return, new, Size2D, (]
[itemsInRow, ., add, (, block, ), ;, }, }, }, return, new, Size2D, (, constraint, ., getWidth, (, ), ,]
[itemsInRow, ., add, (, block, ), ;, }, }, }, return, new, Size2D, (, constraint, ., getWidth, (, ), ,]
[add, (, block, ), ;, }, }, }, return, new, Size2D, (, constraint, ., getWidth, (, ), ,, y, +]
[), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =]
[}, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeFN, (]
[Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeFN, (, container, ,]
[(, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeFN, (, container, ,, g2, ,]
[g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, if, (]
[g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, if, (]
[g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, if, (]
[=, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (]
[=, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (]
[constraint, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, s, ., height, ), ), {, return]
[(, ), ., contains, (, s, ., height, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =]
[(, ), ., contains, (, s, ., height, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =]
[(, s, ., height, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (]
[(, s, ., height, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (]
[(, s, ., height, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (]
[s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (, constraint, ., getHeightRange, (, ), ., constrain, (]
[s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (, constraint, ., getHeightRange, (, ), ., constrain, (]
[., toFixedHeight, (, constraint, ., getHeightRange, (, ), ., constrain, (, s, ., getHeight, (, ), ), ), ;, return]
[(, constraint, ., getHeightRange, (, ), ., constrain, (, s, ., getHeight, (, ), ), ), ;, return, arrangeFF, (]
[., getHeightRange, (, ), ., constrain, (, s, ., getHeight, (, ), ), ), ;, return, arrangeFF, (, container, ,]
[(, ), ., constrain, (, s, ., getHeight, (, ), ), ), ;, return, arrangeFF, (, container, ,, g2, ,]
[c, ), ;, }, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return]
[;, }, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeFN, (]
[}, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeFN, (, container, ,]
[Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeFN, (, container, ,, g2, ,]
[), ;, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =]
[}, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (]
[Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (, container, ,]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (]
[Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (]
[Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (]
[g2, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s1, ., width, ), ), {, return]
[(, ), ., contains, (, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =]
[(, ), ., contains, (, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =]
[(, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (]
[(, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (]
[(, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (]
[{, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return]
[c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeFR, (]
[constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeFR, (, container, ,]
[toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeFR, (, container, ,, g2, ,]
[;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =]
[}, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeNF, (]
[Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeNF, (, container, ,]
[(, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeNF, (, container, ,, g2, ,]
[g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, if, (]
[g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, if, (]
[g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, if, (]
[=, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (]
[=, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (]
[constraint, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s, ., width, ), ), {, return]
[(, ), ., contains, (, s, ., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =]
[(, ), ., contains, (, s, ., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =]
[(, s, ., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (]
[(, s, ., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (]
[(, s, ., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (]
[s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., constrain, (]
[s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., constrain, (]
[., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., constrain, (, s, ., getWidth, (, ), ), ), ;, return]
[(, constraint, ., getWidthRange, (, ), ., constrain, (, s, ., getWidth, (, ), ), ), ;, return, arrangeFF, (]
[., getWidthRange, (, ), ., constrain, (, s, ., getWidth, (, ), ), ), ;, return, arrangeFF, (, container, ,]
[(, ), ., constrain, (, s, ., getWidth, (, ), ), ), ;, return, arrangeFF, (, container, ,, g2, ,]
[;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =]
[}, protected, Size2D, arrangeRN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (]
[Size2D, arrangeRN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (, container, ,]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (]
[Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (]
[Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (]
[g2, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s1, ., width, ), ), {, return]
[(, ), ., contains, (, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =]
[(, ), ., contains, (, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =]
[(, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (]
[(, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (]
[(, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (]
[{, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return]
[c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeFN, (]
[constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeFN, (, container, ,]
[toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeFN, (, container, ,, g2, ,]
[,, c, ), ;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, double, x, =]
[}, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, double, x, =, 0.0, ;, double, width, =]
[BlockContainer, container, ,, Graphics2D, g2, ), {, double, x, =, 0.0, ;, double, width, =, 0.0, ;, double, maxHeight, =]
[), {, double, x, =, 0.0, ;, double, width, =, 0.0, ;, double, maxHeight, =, 0.0, ;, List, blocks, =]
[), {, double, x, =, 0.0, ;, double, width, =, 0.0, ;, double, maxHeight, =, 0.0, ;, List, blocks, =]
[=, 0.0, ;, double, maxHeight, =, 0.0, ;, List, blocks, =, container, ., getBlocks, (, ), ;, int, blockCount, =]
[=, 0.0, ;, double, maxHeight, =, 0.0, ;, List, blocks, =, container, ., getBlocks, (, ), ;, int, blockCount, =]
[List, blocks, =, container, ., getBlocks, (, ), ;, int, blockCount, =, blocks, ., size, (, ), ;, if, (]
[List, blocks, =, container, ., getBlocks, (, ), ;, int, blockCount, =, blocks, ., size, (, ), ;, if, (]
[=, container, ., getBlocks, (, ), ;, int, blockCount, =, blocks, ., size, (, ), ;, if, (, blockCount, >]
[blockCount, =, blocks, ., size, (, ), ;, if, (, blockCount, >, 0, ), {, Size2D, [, ], sizes, =]
[., size, (, ), ;, if, (, blockCount, >, 0, ), {, Size2D, [, ], sizes, =, new, Size2D, []
[., size, (, ), ;, if, (, blockCount, >, 0, ), {, Size2D, [, ], sizes, =, new, Size2D, []
[Size2D, [, ], sizes, =, new, Size2D, [, blocks, ., size, (, ), ], ;, for, (, int, i, =]
[], sizes, =, new, Size2D, [, blocks, ., size, (, ), ], ;, for, (, int, i, =, 0, ;]
[], sizes, =, new, Size2D, [, blocks, ., size, (, ), ], ;, for, (, int, i, =, 0, ;]
[=, new, Size2D, [, blocks, ., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[=, new, Size2D, [, blocks, ., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;]
[size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;]
[int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =]
[0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, )]
[0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, )]
[blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (]
[(, ), ;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;]
[(, ), ;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;]
[;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, sizes, []
[), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, sizes, [, i, ], =]
[), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, sizes, [, i, ], =]
[=, (, Block, ), blocks, ., get, (, i, ), ;, sizes, [, i, ], =, block, ., arrange, (]
[Block, ), blocks, ., get, (, i, ), ;, sizes, [, i, ], =, block, ., arrange, (, g2, ,]
[Block, ), blocks, ., get, (, i, ), ;, sizes, [, i, ], =, block, ., arrange, (, g2, ,]
[(, i, ), ;, sizes, [, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;]
[), ;, sizes, [, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, width, =]
[), ;, sizes, [, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, width, =]
[sizes, [, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, width, =, width, +]
[sizes, [, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, width, =, width, +]
[sizes, [, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, width, =, width, +]
[i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, width, =, width, +, sizes, []
[g2, ,, RectangleConstraint, ., NONE, ), ;, width, =, width, +, sizes, [, i, ], ., getWidth, (, ), ;]
[RectangleConstraint, ., NONE, ), ;, width, =, width, +, sizes, [, i, ], ., getWidth, (, ), ;, maxHeight, =]
[RectangleConstraint, ., NONE, ), ;, width, =, width, +, sizes, [, i, ], ., getWidth, (, ), ;, maxHeight, =]
[;, width, =, width, +, sizes, [, i, ], ., getWidth, (, ), ;, maxHeight, =, Math, ., max, (]
[;, width, =, width, +, sizes, [, i, ], ., getWidth, (, ), ;, maxHeight, =, Math, ., max, (]
[;, width, =, width, +, sizes, [, i, ], ., getWidth, (, ), ;, maxHeight, =, Math, ., max, (]
[=, width, +, sizes, [, i, ], ., getWidth, (, ), ;, maxHeight, =, Math, ., max, (, sizes, []
[i, ], ., getWidth, (, ), ;, maxHeight, =, Math, ., max, (, sizes, [, i, ], ., height, ,]
[getWidth, (, ), ;, maxHeight, =, Math, ., max, (, sizes, [, i, ], ., height, ,, maxHeight, ), ;]
[getWidth, (, ), ;, maxHeight, =, Math, ., max, (, sizes, [, i, ], ., height, ,, maxHeight, ), ;]
[maxHeight, =, Math, ., max, (, sizes, [, i, ], ., height, ,, maxHeight, ), ;, block, ., setBounds, (]
[(, sizes, [, i, ], ., height, ,, maxHeight, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (]
[[, i, ], ., height, ,, maxHeight, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,]
[], ., height, ,, maxHeight, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, 0.0, ,]
[], ., height, ,, maxHeight, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, 0.0, ,]
[], ., height, ,, maxHeight, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, 0.0, ,]
[height, ,, maxHeight, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, 0.0, ,, sizes, []
[block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, 0.0, ,, sizes, [, i, ], ., width, ,]
[block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, 0.0, ,, sizes, [, i, ], ., width, ,]
[block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, 0.0, ,, sizes, [, i, ], ., width, ,]
[setBounds, (, new, Rectangle2D, ., Double, (, x, ,, 0.0, ,, sizes, [, i, ], ., width, ,, sizes, []
[x, ,, 0.0, ,, sizes, [, i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;]
[0.0, ,, sizes, [, i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;, x, =]
[0.0, ,, sizes, [, i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;, x, =]
[0.0, ,, sizes, [, i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;, x, =]
[sizes, [, i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;, x, =, x, +]
[sizes, [, i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;, x, =, x, +]
[sizes, [, i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;, x, =, x, +]
[i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;, x, =, x, +, sizes, []
[sizes, [, i, ], ., height, ), ), ;, x, =, x, +, sizes, [, i, ], ., width, +]
[sizes, [, i, ], ., height, ), ), ;, x, =, x, +, sizes, [, i, ], ., width, +]
[), ;, x, =, x, +, sizes, [, i, ], ., width, +, this, ., horizontalGap, ;, }, if, (]
[), ;, x, =, x, +, sizes, [, i, ], ., width, +, this, ., horizontalGap, ;, }, if, (]
[x, =, x, +, sizes, [, i, ], ., width, +, this, ., horizontalGap, ;, }, if, (, blockCount, >]
[+, sizes, [, i, ], ., width, +, this, ., horizontalGap, ;, }, if, (, blockCount, >, 1, ), {]
[[, i, ], ., width, +, this, ., horizontalGap, ;, }, if, (, blockCount, >, 1, ), {, width, =]
[[, i, ], ., width, +, this, ., horizontalGap, ;, }, if, (, blockCount, >, 1, ), {, width, =]
[], ., width, +, this, ., horizontalGap, ;, }, if, (, blockCount, >, 1, ), {, width, =, width, +]
[], ., width, +, this, ., horizontalGap, ;, }, if, (, blockCount, >, 1, ), {, width, =, width, +]
[], ., width, +, this, ., horizontalGap, ;, }, if, (, blockCount, >, 1, ), {, width, =, width, +]
[this, ., horizontalGap, ;, }, if, (, blockCount, >, 1, ), {, width, =, width, +, this, ., horizontalGap, *]
[., horizontalGap, ;, }, if, (, blockCount, >, 1, ), {, width, =, width, +, this, ., horizontalGap, *, (]
[., horizontalGap, ;, }, if, (, blockCount, >, 1, ), {, width, =, width, +, this, ., horizontalGap, *, (]
[;, }, if, (, blockCount, >, 1, ), {, width, =, width, +, this, ., horizontalGap, *, (, blockCount, -]
[1, ), {, width, =, width, +, this, ., horizontalGap, *, (, blockCount, -, 1, ), ;, }, if, (]
[1, ), {, width, =, width, +, this, ., horizontalGap, *, (, blockCount, -, 1, ), ;, }, if, (]
[1, ), {, width, =, width, +, this, ., horizontalGap, *, (, blockCount, -, 1, ), ;, }, if, (]
[=, width, +, this, ., horizontalGap, *, (, blockCount, -, 1, ), ;, }, if, (, this, ., verticalAlignment, !=]
[=, width, +, this, ., horizontalGap, *, (, blockCount, -, 1, ), ;, }, if, (, this, ., verticalAlignment, !=]
[1, ), ;, }, if, (, this, ., verticalAlignment, !=, VerticalAlignment, ., TOP, ), {, for, (, int, i, =]
[;, }, if, (, this, ., verticalAlignment, !=, VerticalAlignment, ., TOP, ), {, for, (, int, i, =, 0, ;]
[;, }, if, (, this, ., verticalAlignment, !=, VerticalAlignment, ., TOP, ), {, for, (, int, i, =, 0, ;]
[if, (, this, ., verticalAlignment, !=, VerticalAlignment, ., TOP, ), {, for, (, int, i, =, 0, ;, i, <]
[if, (, this, ., verticalAlignment, !=, VerticalAlignment, ., TOP, ), {, for, (, int, i, =, 0, ;, i, <]
[VerticalAlignment, ., TOP, ), {, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;]
[VerticalAlignment, ., TOP, ), {, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;]
[(, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, if, (]
[0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, if, (, this, ., verticalAlignment, ==]
[0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, if, (, this, ., verticalAlignment, ==]
[;, i, ++, ), {, if, (, this, ., verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, }, else, if, (]
[;, i, ++, ), {, if, (, this, ., verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, }, else, if, (]
[;, i, ++, ), {, if, (, this, ., verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, }, else, if, (]
[{, if, (, this, ., verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, }, else, if, (, this, ., verticalAlignment, ==]
[{, if, (, this, ., verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, }, else, if, (, this, ., verticalAlignment, ==]
[), {, }, else, if, (, this, ., verticalAlignment, ==, VerticalAlignment, ., BOTTOM, ), {, }, }, }, }, return]
[else, if, (, this, ., verticalAlignment, ==, VerticalAlignment, ., BOTTOM, ), {, }, }, }, }, return, new, Size2D, (]
[(, this, ., verticalAlignment, ==, VerticalAlignment, ., BOTTOM, ), {, }, }, }, }, return, new, Size2D, (, width, ,]
[,, maxHeight, ), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return]
[), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeNN, (]
[}, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeNN, (, container, ,]
[), ;, }, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[), ;, }, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[}, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[(, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, FlowArrangement, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, FlowArrangement, ), ), {, return, false, ;, }, FlowArrangement, that, =]
[if, (, !, (, obj, instanceof, FlowArrangement, ), ), {, return, false, ;, }, FlowArrangement, that, =, (, FlowArrangement, )]
[obj, instanceof, FlowArrangement, ), ), {, return, false, ;, }, FlowArrangement, that, =, (, FlowArrangement, ), obj, ;, if, (]
[obj, instanceof, FlowArrangement, ), ), {, return, false, ;, }, FlowArrangement, that, =, (, FlowArrangement, ), obj, ;, if, (]
[obj, instanceof, FlowArrangement, ), ), {, return, false, ;, }, FlowArrangement, that, =, (, FlowArrangement, ), obj, ;, if, (]
[), {, return, false, ;, }, FlowArrangement, that, =, (, FlowArrangement, ), obj, ;, if, (, this, ., horizontalAlignment, !=]
[), {, return, false, ;, }, FlowArrangement, that, =, (, FlowArrangement, ), obj, ;, if, (, this, ., horizontalAlignment, !=]
[FlowArrangement, that, =, (, FlowArrangement, ), obj, ;, if, (, this, ., horizontalAlignment, !=, that, ., horizontalAlignment, ), {, return]
[), obj, ;, if, (, this, ., horizontalAlignment, !=, that, ., horizontalAlignment, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, this, ., horizontalAlignment, !=, that, ., horizontalAlignment, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, this, ., horizontalAlignment, !=, that, ., horizontalAlignment, ), {, return, false, ;, }, if, (]
[(, this, ., horizontalAlignment, !=, that, ., horizontalAlignment, ), {, return, false, ;, }, if, (, this, ., verticalAlignment, !=]
[(, this, ., horizontalAlignment, !=, that, ., horizontalAlignment, ), {, return, false, ;, }, if, (, this, ., verticalAlignment, !=]
[., horizontalAlignment, ), {, return, false, ;, }, if, (, this, ., verticalAlignment, !=, that, ., verticalAlignment, ), {, return]
[false, ;, }, if, (, this, ., verticalAlignment, !=, that, ., verticalAlignment, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., verticalAlignment, !=, that, ., verticalAlignment, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., verticalAlignment, !=, that, ., verticalAlignment, ), {, return, false, ;, }, if, (]
[(, this, ., verticalAlignment, !=, that, ., verticalAlignment, ), {, return, false, ;, }, if, (, this, ., horizontalGap, !=]
[(, this, ., verticalAlignment, !=, that, ., verticalAlignment, ), {, return, false, ;, }, if, (, this, ., horizontalGap, !=]
[., verticalAlignment, ), {, return, false, ;, }, if, (, this, ., horizontalGap, !=, that, ., horizontalGap, ), {, return]
[false, ;, }, if, (, this, ., horizontalGap, !=, that, ., horizontalGap, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., horizontalGap, !=, that, ., horizontalGap, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., horizontalGap, !=, that, ., horizontalGap, ), {, return, false, ;, }, if, (]
[(, this, ., horizontalGap, !=, that, ., horizontalGap, ), {, return, false, ;, }, if, (, this, ., verticalGap, !=]
[(, this, ., horizontalGap, !=, that, ., horizontalGap, ), {, return, false, ;, }, if, (, this, ., verticalGap, !=]
[., horizontalGap, ), {, return, false, ;, }, if, (, this, ., verticalGap, !=, that, ., verticalGap, ), {, return]
[return, false, ;, }, if, (, this, ., verticalGap, !=, that, ., verticalGap, ), {, return, false, ;, }, return]
