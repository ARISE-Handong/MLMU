[omega, ;, private, final, double, phase, ;, public, HarmonicOscillator, (, double, amplitude, ,, double, omega, ,, double, phase, ), {]
[omega, ;, private, final, double, phase, ;, public, HarmonicOscillator, (, double, amplitude, ,, double, omega, ,, double, phase, ), {]
[double, phase, ;, public, HarmonicOscillator, (, double, amplitude, ,, double, omega, ,, double, phase, ), {, this, ., amplitude, =]
[;, public, HarmonicOscillator, (, double, amplitude, ,, double, omega, ,, double, phase, ), {, this, ., amplitude, =, amplitude, ;]
[;, public, HarmonicOscillator, (, double, amplitude, ,, double, omega, ,, double, phase, ), {, this, ., amplitude, =, amplitude, ;]
[double, amplitude, ,, double, omega, ,, double, phase, ), {, this, ., amplitude, =, amplitude, ;, this, ., omega, =]
[,, double, omega, ,, double, phase, ), {, this, ., amplitude, =, amplitude, ;, this, ., omega, =, omega, ;]
[,, double, omega, ,, double, phase, ), {, this, ., amplitude, =, amplitude, ;, this, ., omega, =, omega, ;]
[double, phase, ), {, this, ., amplitude, =, amplitude, ;, this, ., omega, =, omega, ;, this, ., phase, =]
[omega, =, omega, ;, this, ., phase, =, phase, ;, }, public, double, value, (, double, x, ), {, return]
[omega, ;, this, ., phase, =, phase, ;, }, public, double, value, (, double, x, ), {, return, value, (]
[omega, ;, this, ., phase, =, phase, ;, }, public, double, value, (, double, x, ), {, return, value, (]
[omega, ;, this, ., phase, =, phase, ;, }, public, double, value, (, double, x, ), {, return, value, (]
[this, ., phase, =, phase, ;, }, public, double, value, (, double, x, ), {, return, value, (, omega, *]
[phase, =, phase, ;, }, public, double, value, (, double, x, ), {, return, value, (, omega, *, x, +]
[phase, ;, }, public, double, value, (, double, x, ), {, return, value, (, omega, *, x, +, phase, ,]
[(, omega, *, x, +, phase, ,, amplitude, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return]
[(, omega, *, x, +, phase, ,, amplitude, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return]
[(, omega, *, x, +, phase, ,, amplitude, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return]
[+, phase, ,, amplitude, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (]
[Parametric, implements, ParametricUnivariateFunction, {, public, double, value, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {]
[ParametricUnivariateFunction, {, public, double, value, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (]
[value, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return]
[value, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return]
[,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return, HarmonicOscillator, ., value, (]
[,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return, HarmonicOscillator, ., value, (]
[,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return, HarmonicOscillator, ., value, (]
[..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return, HarmonicOscillator, ., value, (, x, *]
[..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return, HarmonicOscillator, ., value, (, x, *]
[), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return, HarmonicOscillator, ., value, (, x, *, param, []
[,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return, HarmonicOscillator, ., value, (, x, *, param, [, 1, ], +]
[,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return, HarmonicOscillator, ., value, (, x, *, param, [, 1, ], +]
[{, validateParameters, (, param, ), ;, return, HarmonicOscillator, ., value, (, x, *, param, [, 1, ], +, param, []
[param, ), ;, return, HarmonicOscillator, ., value, (, x, *, param, [, 1, ], +, param, [, 2, ], ,]
[param, ), ;, return, HarmonicOscillator, ., value, (, x, *, param, [, 1, ], +, param, [, 2, ], ,]
[;, return, HarmonicOscillator, ., value, (, x, *, param, [, 1, ], +, param, [, 2, ], ,, param, []
[;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {]
[public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (]
[x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, final, double, amplitude, =]
[x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, final, double, amplitude, =]
[double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, final, double, amplitude, =, param, []
[DimensionMismatchException, {, validateParameters, (, param, ), ;, final, double, amplitude, =, param, [, 0, ], ;, final, double, omega, =]
[DimensionMismatchException, {, validateParameters, (, param, ), ;, final, double, amplitude, =, param, [, 0, ], ;, final, double, omega, =]
[validateParameters, (, param, ), ;, final, double, amplitude, =, param, [, 0, ], ;, final, double, omega, =, param, []
[amplitude, =, param, [, 0, ], ;, final, double, omega, =, param, [, 1, ], ;, final, double, phase, =]
[amplitude, =, param, [, 0, ], ;, final, double, omega, =, param, [, 1, ], ;, final, double, phase, =]
[param, [, 0, ], ;, final, double, omega, =, param, [, 1, ], ;, final, double, phase, =, param, []
[omega, =, param, [, 1, ], ;, final, double, phase, =, param, [, 2, ], ;, final, double, xTimesOmegaPlusPhase, =]
[omega, =, param, [, 1, ], ;, final, double, phase, =, param, [, 2, ], ;, final, double, xTimesOmegaPlusPhase, =]
[omega, =, param, [, 1, ], ;, final, double, phase, =, param, [, 2, ], ;, final, double, xTimesOmegaPlusPhase, =]
[param, [, 1, ], ;, final, double, phase, =, param, [, 2, ], ;, final, double, xTimesOmegaPlusPhase, =, omega, *]
[1, ], ;, final, double, phase, =, param, [, 2, ], ;, final, double, xTimesOmegaPlusPhase, =, omega, *, x, +]
[=, param, [, 2, ], ;, final, double, xTimesOmegaPlusPhase, =, omega, *, x, +, phase, ;, final, double, a, =]
[=, param, [, 2, ], ;, final, double, xTimesOmegaPlusPhase, =, omega, *, x, +, phase, ;, final, double, a, =]
[], ;, final, double, xTimesOmegaPlusPhase, =, omega, *, x, +, phase, ;, final, double, a, =, HarmonicOscillator, ., value, (]
[final, double, xTimesOmegaPlusPhase, =, omega, *, x, +, phase, ;, final, double, a, =, HarmonicOscillator, ., value, (, xTimesOmegaPlusPhase, ,]
[+, phase, ;, final, double, a, =, HarmonicOscillator, ., value, (, xTimesOmegaPlusPhase, ,, 1, ), ;, final, double, p, =]
[+, phase, ;, final, double, a, =, HarmonicOscillator, ., value, (, xTimesOmegaPlusPhase, ,, 1, ), ;, final, double, p, =]
[phase, ;, final, double, a, =, HarmonicOscillator, ., value, (, xTimesOmegaPlusPhase, ,, 1, ), ;, final, double, p, =, -]
[final, double, a, =, HarmonicOscillator, ., value, (, xTimesOmegaPlusPhase, ,, 1, ), ;, final, double, p, =, -, amplitude, *]
[final, double, a, =, HarmonicOscillator, ., value, (, xTimesOmegaPlusPhase, ,, 1, ), ;, final, double, p, =, -, amplitude, *]
[HarmonicOscillator, ., value, (, xTimesOmegaPlusPhase, ,, 1, ), ;, final, double, p, =, -, amplitude, *, FastMath, ., sin, (]
[), ;, final, double, p, =, -, amplitude, *, FastMath, ., sin, (, xTimesOmegaPlusPhase, ), ;, final, double, w, =]
[), ;, final, double, p, =, -, amplitude, *, FastMath, ., sin, (, xTimesOmegaPlusPhase, ), ;, final, double, w, =]
[final, double, p, =, -, amplitude, *, FastMath, ., sin, (, xTimesOmegaPlusPhase, ), ;, final, double, w, =, p, *]
[=, -, amplitude, *, FastMath, ., sin, (, xTimesOmegaPlusPhase, ), ;, final, double, w, =, p, *, x, ;, return]
[FastMath, ., sin, (, xTimesOmegaPlusPhase, ), ;, final, double, w, =, p, *, x, ;, return, new, double, [, ]]
[., sin, (, xTimesOmegaPlusPhase, ), ;, final, double, w, =, p, *, x, ;, return, new, double, [, ], {]
[(, xTimesOmegaPlusPhase, ), ;, final, double, w, =, p, *, x, ;, return, new, double, [, ], {, a, ,]
[), ;, final, double, w, =, p, *, x, ;, return, new, double, [, ], {, a, ,, w, ,]
[p, }, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (]
[p, }, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (]
[;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (, param, ==]
[validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (, param, ==, null, ), {, throw]
[NullArgumentException, ,, DimensionMismatchException, {, if, (, param, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[NullArgumentException, ,, DimensionMismatchException, {, if, (, param, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[NullArgumentException, ,, DimensionMismatchException, {, if, (, param, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[if, (, param, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=]
[null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 3, ), {, throw]
[throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 3, ), {, throw, new, DimensionMismatchException, (]
[throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 3, ), {, throw, new, DimensionMismatchException, (]
[), ;, }, if, (, param, ., length, !=, 3, ), {, throw, new, DimensionMismatchException, (, param, ., length, ,]
[,, 3, ), ;, }, }, }, private, static, double, value, (, double, xTimesOmegaPlusPhase, ,, double, amplitude, ), {, return]
[,, 3, ), ;, }, }, }, private, static, double, value, (, double, xTimesOmegaPlusPhase, ,, double, amplitude, ), {, return]
[), ;, }, }, }, private, static, double, value, (, double, xTimesOmegaPlusPhase, ,, double, amplitude, ), {, return, amplitude, *]
[), ;, }, }, }, private, static, double, value, (, double, xTimesOmegaPlusPhase, ,, double, amplitude, ), {, return, amplitude, *]
[}, private, static, double, value, (, double, xTimesOmegaPlusPhase, ,, double, amplitude, ), {, return, amplitude, *, FastMath, ., cos, (]
[(, xTimesOmegaPlusPhase, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, x, =]
[(, xTimesOmegaPlusPhase, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, x, =]
[t, ), throws, DimensionMismatchException, {, final, double, x, =, t, ., getValue, (, ), ;, double, [, ], f, =]
[DimensionMismatchException, {, final, double, x, =, t, ., getValue, (, ), ;, double, [, ], f, =, new, double, []
[DimensionMismatchException, {, final, double, x, =, t, ., getValue, (, ), ;, double, [, ], f, =, new, double, []
[DimensionMismatchException, {, final, double, x, =, t, ., getValue, (, ), ;, double, [, ], f, =, new, double, []
[t, ., getValue, (, ), ;, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +]
[[, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;, final, double, alpha, =]
[[, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;, final, double, alpha, =]
[[, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;, final, double, alpha, =]
[f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;, final, double, alpha, =, omega, *]
[new, double, [, t, ., getOrder, (, ), +, 1, ], ;, final, double, alpha, =, omega, *, x, +]
[[, t, ., getOrder, (, ), +, 1, ], ;, final, double, alpha, =, omega, *, x, +, phase, ;]
[[, t, ., getOrder, (, ), +, 1, ], ;, final, double, alpha, =, omega, *, x, +, phase, ;]
[., getOrder, (, ), +, 1, ], ;, final, double, alpha, =, omega, *, x, +, phase, ;, f, []
[), +, 1, ], ;, final, double, alpha, =, omega, *, x, +, phase, ;, f, [, 0, ], =]
[), +, 1, ], ;, final, double, alpha, =, omega, *, x, +, phase, ;, f, [, 0, ], =]
[1, ], ;, final, double, alpha, =, omega, *, x, +, phase, ;, f, [, 0, ], =, amplitude, *]
[1, ], ;, final, double, alpha, =, omega, *, x, +, phase, ;, f, [, 0, ], =, amplitude, *]
[double, alpha, =, omega, *, x, +, phase, ;, f, [, 0, ], =, amplitude, *, FastMath, ., cos, (]
[x, +, phase, ;, f, [, 0, ], =, amplitude, *, FastMath, ., cos, (, alpha, ), ;, if, (]
[x, +, phase, ;, f, [, 0, ], =, amplitude, *, FastMath, ., cos, (, alpha, ), ;, if, (]
[x, +, phase, ;, f, [, 0, ], =, amplitude, *, FastMath, ., cos, (, alpha, ), ;, if, (]
[f, [, 0, ], =, amplitude, *, FastMath, ., cos, (, alpha, ), ;, if, (, f, ., length, >]
[], =, amplitude, *, FastMath, ., cos, (, alpha, ), ;, if, (, f, ., length, >, 1, ), {]
[], =, amplitude, *, FastMath, ., cos, (, alpha, ), ;, if, (, f, ., length, >, 1, ), {]
[amplitude, *, FastMath, ., cos, (, alpha, ), ;, if, (, f, ., length, >, 1, ), {, f, []
[., cos, (, alpha, ), ;, if, (, f, ., length, >, 1, ), {, f, [, 1, ], =]
[., cos, (, alpha, ), ;, if, (, f, ., length, >, 1, ), {, f, [, 1, ], =]
[., cos, (, alpha, ), ;, if, (, f, ., length, >, 1, ), {, f, [, 1, ], =]
[cos, (, alpha, ), ;, if, (, f, ., length, >, 1, ), {, f, [, 1, ], =, -]
[alpha, ), ;, if, (, f, ., length, >, 1, ), {, f, [, 1, ], =, -, amplitude, *]
[;, if, (, f, ., length, >, 1, ), {, f, [, 1, ], =, -, amplitude, *, omega, *]
[;, if, (, f, ., length, >, 1, ), {, f, [, 1, ], =, -, amplitude, *, omega, *]
[., length, >, 1, ), {, f, [, 1, ], =, -, amplitude, *, omega, *, FastMath, ., sin, (]
[[, 1, ], =, -, amplitude, *, omega, *, FastMath, ., sin, (, alpha, ), ;, final, double, mo2, =]
[[, 1, ], =, -, amplitude, *, omega, *, FastMath, ., sin, (, alpha, ), ;, final, double, mo2, =]
[1, ], =, -, amplitude, *, omega, *, FastMath, ., sin, (, alpha, ), ;, final, double, mo2, =, -]
[=, -, amplitude, *, omega, *, FastMath, ., sin, (, alpha, ), ;, final, double, mo2, =, -, omega, *]
[., sin, (, alpha, ), ;, final, double, mo2, =, -, omega, *, omega, ;, for, (, int, i, =]
[(, alpha, ), ;, final, double, mo2, =, -, omega, *, omega, ;, for, (, int, i, =, 2, ;]
[(, alpha, ), ;, final, double, mo2, =, -, omega, *, omega, ;, for, (, int, i, =, 2, ;]
[), ;, final, double, mo2, =, -, omega, *, omega, ;, for, (, int, i, =, 2, ;, i, <]
[), ;, final, double, mo2, =, -, omega, *, omega, ;, for, (, int, i, =, 2, ;, i, <]
[mo2, =, -, omega, *, omega, ;, for, (, int, i, =, 2, ;, i, <, f, ., length, ;]
[=, -, omega, *, omega, ;, for, (, int, i, =, 2, ;, i, <, f, ., length, ;, ++]
[*, omega, ;, for, (, int, i, =, 2, ;, i, <, f, ., length, ;, ++, i, ), {]
[*, omega, ;, for, (, int, i, =, 2, ;, i, <, f, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 2, ;, i, <, f, ., length, ;, ++, i, ), {, f, []
[int, i, =, 2, ;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], =]
[int, i, =, 2, ;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], =]
[=, 2, ;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], =, mo2, *]
[=, 2, ;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], =, mo2, *]
[;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], =, mo2, *, f, []
[;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], =, mo2, *, f, []
[<, f, ., length, ;, ++, i, ), {, f, [, i, ], =, mo2, *, f, [, i, -]
[i, ), {, f, [, i, ], =, mo2, *, f, [, i, -, 2, ], ;, }, }, return]
[i, ), {, f, [, i, ], =, mo2, *, f, [, i, -, 2, ], ;, }, }, return]
[[, i, ], =, mo2, *, f, [, i, -, 2, ], ;, }, }, return, t, ., compose, (]
