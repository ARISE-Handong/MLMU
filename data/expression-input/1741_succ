[=, FastMath, ., ulp, (, 1., ), ;, CBRT_MACH_PREC, =, FastMath, ., cbrt, (, MACH_PREC, ), ;, }, public, State]
[;, CBRT_MACH_PREC, =, FastMath, ., cbrt, (, MACH_PREC, ), ;, }, public, State, (, final, RealLinearOperator, a, ,, final, RealLinearOperator]
[., ulp, (, 1., ), ;, CBRT_MACH_PREC, =, FastMath, ., cbrt, (, MACH_PREC, ), ;, }, public, State, (, final]
[), ;, CBRT_MACH_PREC, =, FastMath, ., cbrt, (, MACH_PREC, ), ;, }, public, State, (, final, RealLinearOperator, a, ,, final]
[=, FastMath, ., cbrt, (, MACH_PREC, ), ;, }, public, State, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m, ,]
[;, }, public, State, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m, ,, final, RealVector, b, ,, final, boolean, goodb]
[., cbrt, (, MACH_PREC, ), ;, }, public, State, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m, ,, final, RealVector]
[), ;, }, public, State, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m, ,, final, RealVector, b, ,, final, boolean]
[=, a, ;, this, ., m, =, m, ;, this, ., b, =, b, ;, this, ., xL, =, new]
[., a, =, a, ;, this, ., m, =, m, ;, this, ., b, =, b, ;, this, ., xL]
[;, this, ., m, =, m, ;, this, ., b, =, b, ;, this, ., xL, =, new, ArrayRealVector, (]
[=, m, ;, this, ., b, =, b, ;, this, ., xL, =, new, ArrayRealVector, (, b, ., getDimension, (]
[., m, =, m, ;, this, ., b, =, b, ;, this, ., xL, =, new, ArrayRealVector, (, b, .]
[;, this, ., b, =, b, ;, this, ., xL, =, new, ArrayRealVector, (, b, ., getDimension, (, ), )]
[=, b, ;, this, ., xL, =, new, ArrayRealVector, (, b, ., getDimension, (, ), ), ;, this, ., goodb]
[., b, =, b, ;, this, ., xL, =, new, ArrayRealVector, (, b, ., getDimension, (, ), ), ;, this]
[;, this, ., xL, =, new, ArrayRealVector, (, b, ., getDimension, (, ), ), ;, this, ., goodb, =, goodb]
[=, new, ArrayRealVector, (, b, ., getDimension, (, ), ), ;, this, ., goodb, =, goodb, ;, this, ., shift]
[., xL, =, new, ArrayRealVector, (, b, ., getDimension, (, ), ), ;, this, ., goodb, =, goodb, ;, this]
[;, this, ., goodb, =, goodb, ;, this, ., shift, =, shift, ;, this, ., mb, =, m, ==, null]
[), ;, this, ., goodb, =, goodb, ;, this, ., shift, =, shift, ;, this, ., mb, =, m, ==]
[., getDimension, (, ), ), ;, this, ., goodb, =, goodb, ;, this, ., shift, =, shift, ;, this, .]
[=, goodb, ;, this, ., shift, =, shift, ;, this, ., mb, =, m, ==, null, ?, b, :, m]
[., goodb, =, goodb, ;, this, ., shift, =, shift, ;, this, ., mb, =, m, ==, null, ?, b]
[;, this, ., shift, =, shift, ;, this, ., mb, =, m, ==, null, ?, b, :, m, ., operate]
[=, shift, ;, this, ., mb, =, m, ==, null, ?, b, :, m, ., operate, (, b, ), ;]
[., shift, =, shift, ;, this, ., mb, =, m, ==, null, ?, b, :, m, ., operate, (, b]
[;, this, ., mb, =, m, ==, null, ?, b, :, m, ., operate, (, b, ), ;, this, .]
[=, m, ==, null, ?, b, :, m, ., operate, (, b, ), ;, this, ., hasConverged, =, false, ;]
[., mb, =, m, ==, null, ?, b, :, m, ., operate, (, b, ), ;, this, ., hasConverged, =]
[;, this, ., hasConverged, =, false, ;, this, ., check, =, check, ;, this, ., delta, =, delta, ;, }]
[?, b, :, m, ., operate, (, b, ), ;, this, ., hasConverged, =, false, ;, this, ., check, =]
[==, null, ?, b, :, m, ., operate, (, b, ), ;, this, ., hasConverged, =, false, ;, this, .]
[?, b, :, m, ., operate, (, b, ), ;, this, ., hasConverged, =, false, ;, this, ., check, =]
[:, m, ., operate, (, b, ), ;, this, ., hasConverged, =, false, ;, this, ., check, =, check, ;]
[;, this, ., hasConverged, =, false, ;, this, ., check, =, check, ;, this, ., delta, =, delta, ;, }]
[., operate, (, b, ), ;, this, ., hasConverged, =, false, ;, this, ., check, =, check, ;, this, .]
[), ;, this, ., hasConverged, =, false, ;, this, ., check, =, check, ;, this, ., delta, =, delta, ;]
[=, false, ;, this, ., check, =, check, ;, this, ., delta, =, delta, ;, }, private, static, void, checkSymmetry]
[., hasConverged, =, false, ;, this, ., check, =, check, ;, this, ., delta, =, delta, ;, }, private, static]
[;, this, ., check, =, check, ;, this, ., delta, =, delta, ;, }, private, static, void, checkSymmetry, (, final]
[=, check, ;, this, ., delta, =, delta, ;, }, private, static, void, checkSymmetry, (, final, RealLinearOperator, l, ,, final]
[., check, =, check, ;, this, ., delta, =, delta, ;, }, private, static, void, checkSymmetry, (, final, RealLinearOperator, l]
[;, this, ., delta, =, delta, ;, }, private, static, void, checkSymmetry, (, final, RealLinearOperator, l, ,, final, RealVector, x]
[=, delta, ;, }, private, static, void, checkSymmetry, (, final, RealLinearOperator, l, ,, final, RealVector, x, ,, final, RealVector, y]
[., delta, =, delta, ;, }, private, static, void, checkSymmetry, (, final, RealLinearOperator, l, ,, final, RealVector, x, ,, final]
[;, }, private, static, void, checkSymmetry, (, final, RealLinearOperator, l, ,, final, RealVector, x, ,, final, RealVector, y, ,, final]
[;, final, double, t, =, x, ., dotProduct, (, z, ), ;, final, double, epsa, =, (, s, +, MACH_PREC]
[., dotProduct, (, y, ), ;, final, double, t, =, x, ., dotProduct, (, z, ), ;, final, double, epsa]
[), ;, final, double, t, =, x, ., dotProduct, (, z, ), ;, final, double, epsa, =, (, s, +]
[;, final, double, epsa, =, (, s, +, MACH_PREC, ), *, CBRT_MACH_PREC, ;, if, (, FastMath, ., abs, (, s]
[., dotProduct, (, z, ), ;, final, double, epsa, =, (, s, +, MACH_PREC, ), *, CBRT_MACH_PREC, ;, if, (]
[), ;, final, double, epsa, =, (, s, +, MACH_PREC, ), *, CBRT_MACH_PREC, ;, if, (, FastMath, ., abs, (]
[;, if, (, FastMath, ., abs, (, s, -, t, ), >, epsa, ), {, final, NonSelfAdjointOperatorException, e, ;, e]
[*, CBRT_MACH_PREC, ;, if, (, FastMath, ., abs, (, s, -, t, ), >, epsa, ), {, final, NonSelfAdjointOperatorException, e]
[), *, CBRT_MACH_PREC, ;, if, (, FastMath, ., abs, (, s, -, t, ), >, epsa, ), {, final, NonSelfAdjointOperatorException]
[+, MACH_PREC, ), *, CBRT_MACH_PREC, ;, if, (, FastMath, ., abs, (, s, -, t, ), >, epsa, ), {]
[), *, CBRT_MACH_PREC, ;, if, (, FastMath, ., abs, (, s, -, t, ), >, epsa, ), {, final, NonSelfAdjointOperatorException]
[;, if, (, FastMath, ., abs, (, s, -, t, ), >, epsa, ), {, final, NonSelfAdjointOperatorException, e, ;, e]
[), {, final, NonSelfAdjointOperatorException, e, ;, e, =, new, NonSelfAdjointOperatorException, (, ), ;, final, ExceptionContext, context, =, e, ., getContext]
[>, epsa, ), {, final, NonSelfAdjointOperatorException, e, ;, e, =, new, NonSelfAdjointOperatorException, (, ), ;, final, ExceptionContext, context, =, e]
[., abs, (, s, -, t, ), >, epsa, ), {, final, NonSelfAdjointOperatorException, e, ;, e, =, new, NonSelfAdjointOperatorException, (]
[), >, epsa, ), {, final, NonSelfAdjointOperatorException, e, ;, e, =, new, NonSelfAdjointOperatorException, (, ), ;, final, ExceptionContext, context, =]
[-, t, ), >, epsa, ), {, final, NonSelfAdjointOperatorException, e, ;, e, =, new, NonSelfAdjointOperatorException, (, ), ;, final, ExceptionContext]
[), >, epsa, ), {, final, NonSelfAdjointOperatorException, e, ;, e, =, new, NonSelfAdjointOperatorException, (, ), ;, final, ExceptionContext, context, =]
[), {, final, NonSelfAdjointOperatorException, e, ;, e, =, new, NonSelfAdjointOperatorException, (, ), ;, final, ExceptionContext, context, =, e, ., getContext]
[=, new, NonSelfAdjointOperatorException, (, ), ;, final, ExceptionContext, context, =, e, ., getContext, (, ), ;, context, ., setValue, (]
[;, final, ExceptionContext, context, =, e, ., getContext, (, ), ;, context, ., setValue, (, SymmLQ, ., OPERATOR, ,, l]
[;, context, ., setValue, (, SymmLQ, ., OPERATOR, ,, l, ), ;, context, ., setValue, (, SymmLQ, ., VECTOR1, ,]
[., getContext, (, ), ;, context, ., setValue, (, SymmLQ, ., OPERATOR, ,, l, ), ;, context, ., setValue, (]
[;, context, ., setValue, (, SymmLQ, ., VECTOR1, ,, x, ), ;, context, ., setValue, (, SymmLQ, ., VECTOR2, ,]
[., setValue, (, SymmLQ, ., OPERATOR, ,, l, ), ;, context, ., setValue, (, SymmLQ, ., VECTOR1, ,, x, )]
[,, l, ), ;, context, ., setValue, (, SymmLQ, ., VECTOR1, ,, x, ), ;, context, ., setValue, (, SymmLQ]
[., OPERATOR, ,, l, ), ;, context, ., setValue, (, SymmLQ, ., VECTOR1, ,, x, ), ;, context, ., setValue]
[), ;, context, ., setValue, (, SymmLQ, ., VECTOR1, ,, x, ), ;, context, ., setValue, (, SymmLQ, ., VECTOR2]
[;, context, ., setValue, (, SymmLQ, ., VECTOR2, ,, y, ), ;, context, ., setValue, (, SymmLQ, ., THRESHOLD, ,]
[., setValue, (, SymmLQ, ., VECTOR1, ,, x, ), ;, context, ., setValue, (, SymmLQ, ., VECTOR2, ,, y, )]
[,, x, ), ;, context, ., setValue, (, SymmLQ, ., VECTOR2, ,, y, ), ;, context, ., setValue, (, SymmLQ]
[., VECTOR1, ,, x, ), ;, context, ., setValue, (, SymmLQ, ., VECTOR2, ,, y, ), ;, context, ., setValue]
[), ;, context, ., setValue, (, SymmLQ, ., VECTOR2, ,, y, ), ;, context, ., setValue, (, SymmLQ, ., THRESHOLD]
[;, context, ., setValue, (, SymmLQ, ., THRESHOLD, ,, Double, ., valueOf, (, epsa, ), ), ;, throw, e, ;]
[., setValue, (, SymmLQ, ., VECTOR2, ,, y, ), ;, context, ., setValue, (, SymmLQ, ., THRESHOLD, ,, Double, .]
[,, y, ), ;, context, ., setValue, (, SymmLQ, ., THRESHOLD, ,, Double, ., valueOf, (, epsa, ), ), ;]
[., VECTOR2, ,, y, ), ;, context, ., setValue, (, SymmLQ, ., THRESHOLD, ,, Double, ., valueOf, (, epsa, )]
[), ;, context, ., setValue, (, SymmLQ, ., THRESHOLD, ,, Double, ., valueOf, (, epsa, ), ), ;, throw, e]
[;, throw, e, ;, }, }, private, static, void, throwNPDLOException, (, final, RealLinearOperator, l, ,, final, RealVector, v, ), throws]
[., setValue, (, SymmLQ, ., THRESHOLD, ,, Double, ., valueOf, (, epsa, ), ), ;, throw, e, ;, }, }]
[,, Double, ., valueOf, (, epsa, ), ), ;, throw, e, ;, }, }, private, static, void, throwNPDLOException, (, final]
[., THRESHOLD, ,, Double, ., valueOf, (, epsa, ), ), ;, throw, e, ;, }, }, private, static, void, throwNPDLOException]
[), ;, throw, e, ;, }, }, private, static, void, throwNPDLOException, (, final, RealLinearOperator, l, ,, final, RealVector, v, )]
[., valueOf, (, epsa, ), ), ;, throw, e, ;, }, }, private, static, void, throwNPDLOException, (, final, RealLinearOperator, l]
[), ), ;, throw, e, ;, }, }, private, static, void, throwNPDLOException, (, final, RealLinearOperator, l, ,, final, RealVector, v]
[;, }, }, private, static, void, throwNPDLOException, (, final, RealLinearOperator, l, ,, final, RealVector, v, ), throws, NonPositiveDefiniteOperatorException, {, final]
[=, new, NonPositiveDefiniteOperatorException, (, ), ;, final, ExceptionContext, context, =, e, ., getContext, (, ), ;, context, ., setValue, (]
[;, final, ExceptionContext, context, =, e, ., getContext, (, ), ;, context, ., setValue, (, OPERATOR, ,, l, ), ;]
[;, context, ., setValue, (, OPERATOR, ,, l, ), ;, context, ., setValue, (, VECTOR, ,, v, ), ;, throw]
[., getContext, (, ), ;, context, ., setValue, (, OPERATOR, ,, l, ), ;, context, ., setValue, (, VECTOR, ,]
[;, context, ., setValue, (, VECTOR, ,, v, ), ;, throw, e, ;, }, private, static, void, daxpy, (, final]
[., setValue, (, OPERATOR, ,, l, ), ;, context, ., setValue, (, VECTOR, ,, v, ), ;, throw, e, ;]
[,, l, ), ;, context, ., setValue, (, VECTOR, ,, v, ), ;, throw, e, ;, }, private, static, void]
[), ;, context, ., setValue, (, VECTOR, ,, v, ), ;, throw, e, ;, }, private, static, void, daxpy, (]
[;, throw, e, ;, }, private, static, void, daxpy, (, final, double, a, ,, final, RealVector, x, ,, final, RealVector]
[., setValue, (, VECTOR, ,, v, ), ;, throw, e, ;, }, private, static, void, daxpy, (, final, double, a]
[,, v, ), ;, throw, e, ;, }, private, static, void, daxpy, (, final, double, a, ,, final, RealVector, x]
[), ;, throw, e, ;, }, private, static, void, daxpy, (, final, double, a, ,, final, RealVector, x, ,, final]
[;, }, private, static, void, daxpy, (, final, double, a, ,, final, RealVector, x, ,, final, RealVector, y, ), {]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, y, ., setEntry, (]
[., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, i, <, n, ;, i, ++, ), {, y, ., setEntry, (, i, ,, a, *, x, ., getEntry]
[;, i, ++, ), {, y, ., setEntry, (, i, ,, a, *, x, ., getEntry, (, i, ), +]
[<, n, ;, i, ++, ), {, y, ., setEntry, (, i, ,, a, *, x, ., getEntry, (, i]
[;, i, ++, ), {, y, ., setEntry, (, i, ,, a, *, x, ., getEntry, (, i, ), +]
[), {, y, ., setEntry, (, i, ,, a, *, x, ., getEntry, (, i, ), +, y, ., getEntry]
[++, ), {, y, ., setEntry, (, i, ,, a, *, x, ., getEntry, (, i, ), +, y, .]
[;, }, }, private, static, void, daxpbypz, (, final, double, a, ,, final, RealVector, x, ,, final, double, b, ,]
[., setEntry, (, i, ,, a, *, x, ., getEntry, (, i, ), +, y, ., getEntry, (, i, )]
[,, a, *, x, ., getEntry, (, i, ), +, y, ., getEntry, (, i, ), ), ;, }, }]
[), ;, }, }, private, static, void, daxpbypz, (, final, double, a, ,, final, RealVector, x, ,, final, double, b]
[+, y, ., getEntry, (, i, ), ), ;, }, }, private, static, void, daxpbypz, (, final, double, a, ,]
[*, x, ., getEntry, (, i, ), +, y, ., getEntry, (, i, ), ), ;, }, }, private, static]
[+, y, ., getEntry, (, i, ), ), ;, }, }, private, static, void, daxpbypz, (, final, double, a, ,]
[., getEntry, (, i, ), +, y, ., getEntry, (, i, ), ), ;, }, }, private, static, void, daxpbypz]
[), +, y, ., getEntry, (, i, ), ), ;, }, }, private, static, void, daxpbypz, (, final, double, a]
[), ;, }, }, private, static, void, daxpbypz, (, final, double, a, ,, final, RealVector, x, ,, final, double, b]
[., getEntry, (, i, ), ), ;, }, }, private, static, void, daxpbypz, (, final, double, a, ,, final, RealVector]
[), ), ;, }, }, private, static, void, daxpbypz, (, final, double, a, ,, final, RealVector, x, ,, final, double]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, zi, ;]
[., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, i, <, n, ;, i, ++, ), {, final, double, zi, ;, zi, =, a, *, x, ., getEntry]
[;, i, ++, ), {, final, double, zi, ;, zi, =, a, *, x, ., getEntry, (, i, ), +]
[<, n, ;, i, ++, ), {, final, double, zi, ;, zi, =, a, *, x, ., getEntry, (, i]
[;, i, ++, ), {, final, double, zi, ;, zi, =, a, *, x, ., getEntry, (, i, ), +]
[), {, final, double, zi, ;, zi, =, a, *, x, ., getEntry, (, i, ), +, b, *, y]
[++, ), {, final, double, zi, ;, zi, =, a, *, x, ., getEntry, (, i, ), +, b, *]
[=, a, *, x, ., getEntry, (, i, ), +, b, *, y, ., getEntry, (, i, ), +, z]
[;, z, ., setEntry, (, i, ,, zi, ), ;, }, }, void, refineSolution, (, final, RealVector, x, ), {]
[+, z, ., getEntry, (, i, ), ;, z, ., setEntry, (, i, ,, zi, ), ;, }, }, void]
[+, b, *, y, ., getEntry, (, i, ), +, z, ., getEntry, (, i, ), ;, z, ., setEntry]
[*, x, ., getEntry, (, i, ), +, b, *, y, ., getEntry, (, i, ), +, z, ., getEntry]
[+, b, *, y, ., getEntry, (, i, ), +, z, ., getEntry, (, i, ), ;, z, ., setEntry]
[., getEntry, (, i, ), +, b, *, y, ., getEntry, (, i, ), +, z, ., getEntry, (, i]
[), +, b, *, y, ., getEntry, (, i, ), +, z, ., getEntry, (, i, ), ;, z, .]
[+, z, ., getEntry, (, i, ), ;, z, ., setEntry, (, i, ,, zi, ), ;, }, }, void]
[*, y, ., getEntry, (, i, ), +, z, ., getEntry, (, i, ), ;, z, ., setEntry, (, i]
[+, z, ., getEntry, (, i, ), ;, z, ., setEntry, (, i, ,, zi, ), ;, }, }, void]
[., getEntry, (, i, ), +, z, ., getEntry, (, i, ), ;, z, ., setEntry, (, i, ,, zi]
[), +, z, ., getEntry, (, i, ), ;, z, ., setEntry, (, i, ,, zi, ), ;, }, }]
[;, z, ., setEntry, (, i, ,, zi, ), ;, }, }, void, refineSolution, (, final, RealVector, x, ), {]
[., getEntry, (, i, ), ;, z, ., setEntry, (, i, ,, zi, ), ;, }, }, void, refineSolution, (]
[), ;, z, ., setEntry, (, i, ,, zi, ), ;, }, }, void, refineSolution, (, final, RealVector, x, )]
[;, }, }, void, refineSolution, (, final, RealVector, x, ), {, final, int, n, =, this, ., xL, ., getDimension]
[., setEntry, (, i, ,, zi, ), ;, }, }, void, refineSolution, (, final, RealVector, x, ), {, final, int]
[,, zi, ), ;, }, }, void, refineSolution, (, final, RealVector, x, ), {, final, int, n, =, this, .]
[), ;, }, }, void, refineSolution, (, final, RealVector, x, ), {, final, int, n, =, this, ., xL, .]
[;, if, (, lqnorm, <, cgnorm, ), {, if, (, !, goodb, ), {, x, ., setSubVector, (, 0, ,]
[., getDimension, (, ), ;, if, (, lqnorm, <, cgnorm, ), {, if, (, !, goodb, ), {, x, .]
[., xL, ., getDimension, (, ), ;, if, (, lqnorm, <, cgnorm, ), {, if, (, !, goodb, ), {]
[), {, if, (, !, goodb, ), {, x, ., setSubVector, (, 0, ,, this, ., xL, ), ;, }]
[<, cgnorm, ), {, if, (, !, goodb, ), {, x, ., setSubVector, (, 0, ,, this, ., xL, )]
[), {, if, (, !, goodb, ), {, x, ., setSubVector, (, 0, ,, this, ., xL, ), ;, }]
[), {, x, ., setSubVector, (, 0, ,, this, ., xL, ), ;, }, else, {, final, double, step, =]
[), {, x, ., setSubVector, (, 0, ,, this, ., xL, ), ;, }, else, {, final, double, step, =]
[;, }, else, {, final, double, step, =, bstep, /, beta1, ;, for, (, int, i, =, 0, ;, i]
[., setSubVector, (, 0, ,, this, ., xL, ), ;, }, else, {, final, double, step, =, bstep, /, beta1]
[,, this, ., xL, ), ;, }, else, {, final, double, step, =, bstep, /, beta1, ;, for, (, int]
[), ;, }, else, {, final, double, step, =, bstep, /, beta1, ;, for, (, int, i, =, 0, ;]
[., xL, ), ;, }, else, {, final, double, step, =, bstep, /, beta1, ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, bi, =]
[/, beta1, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, bi, =]
[;, i, <, n, ;, i, ++, ), {, final, double, bi, =, mb, ., getEntry, (, i, ), ;]
[;, i, ++, ), {, final, double, bi, =, mb, ., getEntry, (, i, ), ;, final, double, xi, =]
[<, n, ;, i, ++, ), {, final, double, bi, =, mb, ., getEntry, (, i, ), ;, final, double]
[;, i, ++, ), {, final, double, bi, =, mb, ., getEntry, (, i, ), ;, final, double, xi, =]
[), {, final, double, bi, =, mb, ., getEntry, (, i, ), ;, final, double, xi, =, this, ., xL]
[++, ), {, final, double, bi, =, mb, ., getEntry, (, i, ), ;, final, double, xi, =, this, .]
[;, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,]
[., getEntry, (, i, ), ;, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, x]
[), ;, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, x, ., setEntry, (, i]
[;, x, ., setEntry, (, i, ,, xi, +, step, *, bi, ), ;, }, }, }, else, {, final]
[., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,, xi, +, step, *, bi, ), ;, }]
[., xL, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,, xi, +, step, *, bi, )]
[), ;, x, ., setEntry, (, i, ,, xi, +, step, *, bi, ), ;, }, }, }, else, {]
[;, }, }, }, else, {, final, double, anorm, =, FastMath, ., sqrt, (, tnorm, ), ;, final, double, diag]
[., setEntry, (, i, ,, xi, +, step, *, bi, ), ;, }, }, }, else, {, final, double, anorm]
[,, xi, +, step, *, bi, ), ;, }, }, }, else, {, final, double, anorm, =, FastMath, ., sqrt]
[), ;, }, }, }, else, {, final, double, anorm, =, FastMath, ., sqrt, (, tnorm, ), ;, final, double]
[+, step, *, bi, ), ;, }, }, }, else, {, final, double, anorm, =, FastMath, ., sqrt, (, tnorm]
[), ;, }, }, }, else, {, final, double, anorm, =, FastMath, ., sqrt, (, tnorm, ), ;, final, double]
[*, bi, ), ;, }, }, }, else, {, final, double, anorm, =, FastMath, ., sqrt, (, tnorm, ), ;]
[), ;, }, }, }, else, {, final, double, anorm, =, FastMath, ., sqrt, (, tnorm, ), ;, final, double]
[;, final, double, diag, =, gbar, ==, 0., ?, anorm, *, MACH_PREC, :, gbar, ;, final, double, zbar, =, gammaZeta]
[., sqrt, (, tnorm, ), ;, final, double, diag, =, gbar, ==, 0., ?, anorm, *, MACH_PREC, :, gbar, ;]
[), ;, final, double, diag, =, gbar, ==, 0., ?, anorm, *, MACH_PREC, :, gbar, ;, final, double, zbar, =]
[;, final, double, zbar, =, gammaZeta, /, diag, ;, final, double, step, =, (, bstep, +, snprod, *, zbar, )]
[?, anorm, *, MACH_PREC, :, gbar, ;, final, double, zbar, =, gammaZeta, /, diag, ;, final, double, step, =, (]
[==, 0., ?, anorm, *, MACH_PREC, :, gbar, ;, final, double, zbar, =, gammaZeta, /, diag, ;, final, double, step]
[?, anorm, *, MACH_PREC, :, gbar, ;, final, double, zbar, =, gammaZeta, /, diag, ;, final, double, step, =, (]
[:, gbar, ;, final, double, zbar, =, gammaZeta, /, diag, ;, final, double, step, =, (, bstep, +, snprod, *]
[*, MACH_PREC, :, gbar, ;, final, double, zbar, =, gammaZeta, /, diag, ;, final, double, step, =, (, bstep, +]
[:, gbar, ;, final, double, zbar, =, gammaZeta, /, diag, ;, final, double, step, =, (, bstep, +, snprod, *]
[;, final, double, zbar, =, gammaZeta, /, diag, ;, final, double, step, =, (, bstep, +, snprod, *, zbar, )]
[;, final, double, step, =, (, bstep, +, snprod, *, zbar, ), /, beta1, ;, if, (, !, goodb, )]
[/, diag, ;, final, double, step, =, (, bstep, +, snprod, *, zbar, ), /, beta1, ;, if, (, !]
[;, final, double, step, =, (, bstep, +, snprod, *, zbar, ), /, beta1, ;, if, (, !, goodb, )]
[;, if, (, !, goodb, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++]
[/, beta1, ;, if, (, !, goodb, ), {, for, (, int, i, =, 0, ;, i, <, n, ;]
[), /, beta1, ;, if, (, !, goodb, ), {, for, (, int, i, =, 0, ;, i, <, n]
[+, snprod, *, zbar, ), /, beta1, ;, if, (, !, goodb, ), {, for, (, int, i, =, 0]
[), /, beta1, ;, if, (, !, goodb, ), {, for, (, int, i, =, 0, ;, i, <, n]
[*, zbar, ), /, beta1, ;, if, (, !, goodb, ), {, for, (, int, i, =, 0, ;, i]
[), /, beta1, ;, if, (, !, goodb, ), {, for, (, int, i, =, 0, ;, i, <, n]
[;, if, (, !, goodb, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++]
[), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, xi]
[), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, xi]
[;, i, <, n, ;, i, ++, ), {, final, double, xi, =, this, ., xL, ., getEntry, (, i]
[;, i, ++, ), {, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, final, double]
[<, n, ;, i, ++, ), {, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;]
[;, i, ++, ), {, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, final, double]
[), {, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, final, double, wi, =, wbar]
[++, ), {, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, final, double, wi, =]
[;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,, xi, +]
[., getEntry, (, i, ), ;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, x, ., setEntry]
[., xL, ., getEntry, (, i, ), ;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, x]
[), ;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,, xi]
[;, x, ., setEntry, (, i, ,, xi, +, zbar, *, wi, ), ;, }, }, else, {, for, (]
[., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,, xi, +, zbar, *, wi, ), ;, }]
[), ;, x, ., setEntry, (, i, ,, xi, +, zbar, *, wi, ), ;, }, }, else, {, for]
[;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[., setEntry, (, i, ,, xi, +, zbar, *, wi, ), ;, }, }, else, {, for, (, int, i]
[,, xi, +, zbar, *, wi, ), ;, }, }, else, {, for, (, int, i, =, 0, ;, i]
[), ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[+, zbar, *, wi, ), ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, n]
[), ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[*, wi, ), ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, n, ;, i]
[), ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[;, i, <, n, ;, i, ++, ), {, final, double, xi, =, this, ., xL, ., getEntry, (, i]
[;, i, ++, ), {, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, final, double]
[<, n, ;, i, ++, ), {, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;]
[;, i, ++, ), {, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, final, double]
[), {, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, final, double, wi, =, wbar]
[++, ), {, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, final, double, wi, =]
[;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, final, double, bi, =, mb, ., getEntry, (]
[., getEntry, (, i, ), ;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, final, double, bi]
[., xL, ., getEntry, (, i, ), ;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, final]
[), ;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, final, double, bi, =, mb, ., getEntry]
[;, final, double, bi, =, mb, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,, xi, +]
[., getEntry, (, i, ), ;, final, double, bi, =, mb, ., getEntry, (, i, ), ;, x, ., setEntry]
[), ;, final, double, bi, =, mb, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,, xi]
[;, x, ., setEntry, (, i, ,, xi, +, zbar, *, wi, +, step, *, bi, ), ;, }, }]
[., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,, xi, +, zbar, *, wi, +, step, *]
[), ;, x, ., setEntry, (, i, ,, xi, +, zbar, *, wi, +, step, *, bi, ), ;, }]
[;, }, }, }, }, void, init, (, ), {, this, ., xL, ., set, (, 0., ), ;, this]
[., setEntry, (, i, ,, xi, +, zbar, *, wi, +, step, *, bi, ), ;, }, }, }, }]
[,, xi, +, zbar, *, wi, +, step, *, bi, ), ;, }, }, }, }, void, init, (, )]
[), ;, }, }, }, }, void, init, (, ), {, this, ., xL, ., set, (, 0., ), ;]
[+, step, *, bi, ), ;, }, }, }, }, void, init, (, ), {, this, ., xL, ., set]
[+, zbar, *, wi, +, step, *, bi, ), ;, }, }, }, }, void, init, (, ), {, this]
[+, step, *, bi, ), ;, }, }, }, }, void, init, (, ), {, this, ., xL, ., set]
[*, wi, +, step, *, bi, ), ;, }, }, }, }, void, init, (, ), {, this, ., xL]
[+, step, *, bi, ), ;, }, }, }, }, void, init, (, ), {, this, ., xL, ., set]
[), ;, }, }, }, }, void, init, (, ), {, this, ., xL, ., set, (, 0., ), ;]
[*, bi, ), ;, }, }, }, }, void, init, (, ), {, this, ., xL, ., set, (, 0.]
[), ;, }, }, }, }, void, init, (, ), {, this, ., xL, ., set, (, 0., ), ;]
[;, this, ., r1, =, this, ., b, ., copy, (, ), ;, this, ., y, =, this, ., m]
[., set, (, 0., ), ;, this, ., r1, =, this, ., b, ., copy, (, ), ;, this, .]
[., xL, ., set, (, 0., ), ;, this, ., r1, =, this, ., b, ., copy, (, ), ;]
[), ;, this, ., r1, =, this, ., b, ., copy, (, ), ;, this, ., y, =, this, .]
[=, this, ., b, ., copy, (, ), ;, this, ., y, =, this, ., m, ==, null, ?, this]
[., r1, =, this, ., b, ., copy, (, ), ;, this, ., y, =, this, ., m, ==, null]
[;, this, ., y, =, this, ., m, ==, null, ?, this, ., b, ., copy, (, ), :, this]
[., copy, (, ), ;, this, ., y, =, this, ., m, ==, null, ?, this, ., b, ., copy]
[., b, ., copy, (, ), ;, this, ., y, =, this, ., m, ==, null, ?, this, ., b]
[=, this, ., m, ==, null, ?, this, ., b, ., copy, (, ), :, this, ., m, ., operate]
[., y, =, this, ., m, ==, null, ?, this, ., b, ., copy, (, ), :, this, ., m]
[;, if, (, (, this, ., m, !=, null, ), &&, this, ., check, ), {, checkSymmetry, (, this, .]
[?, this, ., b, ., copy, (, ), :, this, ., m, ., operate, (, this, ., r1, ), ;]
[==, null, ?, this, ., b, ., copy, (, ), :, this, ., m, ., operate, (, this, ., r1]
[., m, ==, null, ?, this, ., b, ., copy, (, ), :, this, ., m, ., operate, (, this]
[?, this, ., b, ., copy, (, ), :, this, ., m, ., operate, (, this, ., r1, ), ;]
[:, this, ., m, ., operate, (, this, ., r1, ), ;, if, (, (, this, ., m, !=, null]
[., copy, (, ), :, this, ., m, ., operate, (, this, ., r1, ), ;, if, (, (, this]
[., b, ., copy, (, ), :, this, ., m, ., operate, (, this, ., r1, ), ;, if, (]
[;, if, (, (, this, ., m, !=, null, ), &&, this, ., check, ), {, checkSymmetry, (, this, .]
[., operate, (, this, ., r1, ), ;, if, (, (, this, ., m, !=, null, ), &&, this, .]
[., m, ., operate, (, this, ., r1, ), ;, if, (, (, this, ., m, !=, null, ), &&]
[), ;, if, (, (, this, ., m, !=, null, ), &&, this, ., check, ), {, checkSymmetry, (, this]
[., r1, ), ;, if, (, (, this, ., m, !=, null, ), &&, this, ., check, ), {, checkSymmetry]
[), {, checkSymmetry, (, this, ., m, ,, this, ., r1, ,, this, ., y, ,, this, ., m, .]
[&&, this, ., check, ), {, checkSymmetry, (, this, ., m, ,, this, ., r1, ,, this, ., y, ,]
[), &&, this, ., check, ), {, checkSymmetry, (, this, ., m, ,, this, ., r1, ,, this, ., y]
[!=, null, ), &&, this, ., check, ), {, checkSymmetry, (, this, ., m, ,, this, ., r1, ,, this]
[., m, !=, null, ), &&, this, ., check, ), {, checkSymmetry, (, this, ., m, ,, this, ., r1]
[), &&, this, ., check, ), {, checkSymmetry, (, this, ., m, ,, this, ., r1, ,, this, ., y]
[), {, checkSymmetry, (, this, ., m, ,, this, ., r1, ,, this, ., y, ,, this, ., m, .]
[., check, ), {, checkSymmetry, (, this, ., m, ,, this, ., r1, ,, this, ., y, ,, this, .]
[;, }, this, ., beta1, =, this, ., r1, ., dotProduct, (, this, ., y, ), ;, if, (, this]
[,, this, ., r1, ,, this, ., y, ,, this, ., m, ., operate, (, this, ., y, ), )]
[., m, ,, this, ., r1, ,, this, ., y, ,, this, ., m, ., operate, (, this, ., y]
[,, this, ., y, ,, this, ., m, ., operate, (, this, ., y, ), ), ;, }, this, .]
[., r1, ,, this, ., y, ,, this, ., m, ., operate, (, this, ., y, ), ), ;, }]
[,, this, ., m, ., operate, (, this, ., y, ), ), ;, }, this, ., beta1, =, this, .]
[., y, ,, this, ., m, ., operate, (, this, ., y, ), ), ;, }, this, ., beta1, =]
[), ;, }, this, ., beta1, =, this, ., r1, ., dotProduct, (, this, ., y, ), ;, if, (]
[., operate, (, this, ., y, ), ), ;, }, this, ., beta1, =, this, ., r1, ., dotProduct, (]
[., m, ., operate, (, this, ., y, ), ), ;, }, this, ., beta1, =, this, ., r1, .]
[), ), ;, }, this, ., beta1, =, this, ., r1, ., dotProduct, (, this, ., y, ), ;, if]
[., y, ), ), ;, }, this, ., beta1, =, this, ., r1, ., dotProduct, (, this, ., y, )]
[=, this, ., r1, ., dotProduct, (, this, ., y, ), ;, if, (, this, ., beta1, <, 0., )]
[., beta1, =, this, ., r1, ., dotProduct, (, this, ., y, ), ;, if, (, this, ., beta1, <]
[;, if, (, this, ., beta1, <, 0., ), {, throwNPDLOException, (, this, ., m, ,, this, ., y, )]
[., dotProduct, (, this, ., y, ), ;, if, (, this, ., beta1, <, 0., ), {, throwNPDLOException, (, this]
[., r1, ., dotProduct, (, this, ., y, ), ;, if, (, this, ., beta1, <, 0., ), {, throwNPDLOException]
[), ;, if, (, this, ., beta1, <, 0., ), {, throwNPDLOException, (, this, ., m, ,, this, ., y]
[., y, ), ;, if, (, this, ., beta1, <, 0., ), {, throwNPDLOException, (, this, ., m, ,, this]
[), {, throwNPDLOException, (, this, ., m, ,, this, ., y, ), ;, }, if, (, this, ., beta1, ==]
[<, 0., ), {, throwNPDLOException, (, this, ., m, ,, this, ., y, ), ;, }, if, (, this, .]
[., beta1, <, 0., ), {, throwNPDLOException, (, this, ., m, ,, this, ., y, ), ;, }, if, (]
[), {, throwNPDLOException, (, this, ., m, ,, this, ., y, ), ;, }, if, (, this, ., beta1, ==]
[;, }, if, (, this, ., beta1, ==, 0., ), {, this, ., bIsNull, =, true, ;, return, ;, }]
[,, this, ., y, ), ;, }, if, (, this, ., beta1, ==, 0., ), {, this, ., bIsNull, =]
[., m, ,, this, ., y, ), ;, }, if, (, this, ., beta1, ==, 0., ), {, this, .]
[), ;, }, if, (, this, ., beta1, ==, 0., ), {, this, ., bIsNull, =, true, ;, return, ;]
[., y, ), ;, }, if, (, this, ., beta1, ==, 0., ), {, this, ., bIsNull, =, true, ;]
[), {, this, ., bIsNull, =, true, ;, return, ;, }, this, ., bIsNull, =, false, ;, this, ., beta1]
[==, 0., ), {, this, ., bIsNull, =, true, ;, return, ;, }, this, ., bIsNull, =, false, ;, this]
[., beta1, ==, 0., ), {, this, ., bIsNull, =, true, ;, return, ;, }, this, ., bIsNull, =, false]
[), {, this, ., bIsNull, =, true, ;, return, ;, }, this, ., bIsNull, =, false, ;, this, ., beta1]
[=, true, ;, return, ;, }, this, ., bIsNull, =, false, ;, this, ., beta1, =, FastMath, ., sqrt, (]
[., bIsNull, =, true, ;, return, ;, }, this, ., bIsNull, =, false, ;, this, ., beta1, =, FastMath, .]
[;, return, ;, }, this, ., bIsNull, =, false, ;, this, ., beta1, =, FastMath, ., sqrt, (, this, .]
[=, false, ;, this, ., beta1, =, FastMath, ., sqrt, (, this, ., beta1, ), ;, final, RealVector, v, =]
[., bIsNull, =, false, ;, this, ., beta1, =, FastMath, ., sqrt, (, this, ., beta1, ), ;, final, RealVector]
[;, this, ., beta1, =, FastMath, ., sqrt, (, this, ., beta1, ), ;, final, RealVector, v, =, this, .]
[=, FastMath, ., sqrt, (, this, ., beta1, ), ;, final, RealVector, v, =, this, ., y, ., mapMultiply, (]
[., beta1, =, FastMath, ., sqrt, (, this, ., beta1, ), ;, final, RealVector, v, =, this, ., y, .]
[;, final, RealVector, v, =, this, ., y, ., mapMultiply, (, 1., /, this, ., beta1, ), ;, this, .]
[., sqrt, (, this, ., beta1, ), ;, final, RealVector, v, =, this, ., y, ., mapMultiply, (, 1., /]
[), ;, final, RealVector, v, =, this, ., y, ., mapMultiply, (, 1., /, this, ., beta1, ), ;, this]
[., beta1, ), ;, final, RealVector, v, =, this, ., y, ., mapMultiply, (, 1., /, this, ., beta1, )]
[;, this, ., y, =, this, ., a, ., operate, (, v, ), ;, if, (, this, ., check, )]
[., mapMultiply, (, 1., /, this, ., beta1, ), ;, this, ., y, =, this, ., a, ., operate, (]
[., y, ., mapMultiply, (, 1., /, this, ., beta1, ), ;, this, ., y, =, this, ., a, .]
[), ;, this, ., y, =, this, ., a, ., operate, (, v, ), ;, if, (, this, ., check]
[/, this, ., beta1, ), ;, this, ., y, =, this, ., a, ., operate, (, v, ), ;, if]
[), ;, this, ., y, =, this, ., a, ., operate, (, v, ), ;, if, (, this, ., check]
[., beta1, ), ;, this, ., y, =, this, ., a, ., operate, (, v, ), ;, if, (, this]
[=, this, ., a, ., operate, (, v, ), ;, if, (, this, ., check, ), {, checkSymmetry, (, this]
[., y, =, this, ., a, ., operate, (, v, ), ;, if, (, this, ., check, ), {, checkSymmetry]
[;, if, (, this, ., check, ), {, checkSymmetry, (, this, ., a, ,, v, ,, this, ., y, ,]
[., operate, (, v, ), ;, if, (, this, ., check, ), {, checkSymmetry, (, this, ., a, ,, v]
[., a, ., operate, (, v, ), ;, if, (, this, ., check, ), {, checkSymmetry, (, this, ., a]
[), ;, if, (, this, ., check, ), {, checkSymmetry, (, this, ., a, ,, v, ,, this, ., y]
[), {, checkSymmetry, (, this, ., a, ,, v, ,, this, ., y, ,, this, ., a, ., operate, (]
[., check, ), {, checkSymmetry, (, this, ., a, ,, v, ,, this, ., y, ,, this, ., a, .]
[;, }, daxpy, (, -, this, ., shift, ,, v, ,, this, ., y, ), ;, final, double, alpha, =]
[,, v, ,, this, ., y, ,, this, ., a, ., operate, (, this, ., y, ), ), ;, }]
[., a, ,, v, ,, this, ., y, ,, this, ., a, ., operate, (, this, ., y, ), )]
[,, this, ., y, ,, this, ., a, ., operate, (, this, ., y, ), ), ;, }, daxpy, (]
[,, this, ., a, ., operate, (, this, ., y, ), ), ;, }, daxpy, (, -, this, ., shift]
[., y, ,, this, ., a, ., operate, (, this, ., y, ), ), ;, }, daxpy, (, -, this]
[), ;, }, daxpy, (, -, this, ., shift, ,, v, ,, this, ., y, ), ;, final, double, alpha]
[., operate, (, this, ., y, ), ), ;, }, daxpy, (, -, this, ., shift, ,, v, ,, this]
[., a, ., operate, (, this, ., y, ), ), ;, }, daxpy, (, -, this, ., shift, ,, v]
[), ), ;, }, daxpy, (, -, this, ., shift, ,, v, ,, this, ., y, ), ;, final, double]
[., y, ), ), ;, }, daxpy, (, -, this, ., shift, ,, v, ,, this, ., y, ), ;]
[;, final, double, alpha, =, v, ., dotProduct, (, this, ., y, ), ;, daxpy, (, -, alpha, /, this]
[,, v, ,, this, ., y, ), ;, final, double, alpha, =, v, ., dotProduct, (, this, ., y, )]
[,, v, ,, this, ., y, ), ;, final, double, alpha, =, v, ., dotProduct, (, this, ., y, )]
[., shift, ,, v, ,, this, ., y, ), ;, final, double, alpha, =, v, ., dotProduct, (, this, .]
[,, this, ., y, ), ;, final, double, alpha, =, v, ., dotProduct, (, this, ., y, ), ;, daxpy]
[), ;, final, double, alpha, =, v, ., dotProduct, (, this, ., y, ), ;, daxpy, (, -, alpha, /]
[., y, ), ;, final, double, alpha, =, v, ., dotProduct, (, this, ., y, ), ;, daxpy, (, -]
[;, daxpy, (, -, alpha, /, this, ., beta1, ,, this, ., r1, ,, this, ., y, ), ;, final]
[., dotProduct, (, this, ., y, ), ;, daxpy, (, -, alpha, /, this, ., beta1, ,, this, ., r1]
[), ;, daxpy, (, -, alpha, /, this, ., beta1, ,, this, ., r1, ,, this, ., y, ), ;]
[., y, ), ;, daxpy, (, -, alpha, /, this, ., beta1, ,, this, ., r1, ,, this, ., y]
[;, final, double, vty, =, v, ., dotProduct, (, this, ., y, ), ;, final, double, vtv, =, v, .]
[,, this, ., r1, ,, this, ., y, ), ;, final, double, vty, =, v, ., dotProduct, (, this, .]
[/, this, ., beta1, ,, this, ., r1, ,, this, ., y, ), ;, final, double, vty, =, v, .]
[/, this, ., beta1, ,, this, ., r1, ,, this, ., y, ), ;, final, double, vty, =, v, .]
[,, this, ., r1, ,, this, ., y, ), ;, final, double, vty, =, v, ., dotProduct, (, this, .]
[., beta1, ,, this, ., r1, ,, this, ., y, ), ;, final, double, vty, =, v, ., dotProduct, (]
[,, this, ., y, ), ;, final, double, vty, =, v, ., dotProduct, (, this, ., y, ), ;, final]
[., r1, ,, this, ., y, ), ;, final, double, vty, =, v, ., dotProduct, (, this, ., y, )]
[), ;, final, double, vty, =, v, ., dotProduct, (, this, ., y, ), ;, final, double, vtv, =, v]
[., y, ), ;, final, double, vty, =, v, ., dotProduct, (, this, ., y, ), ;, final, double, vtv]
[;, final, double, vtv, =, v, ., dotProduct, (, v, ), ;, daxpy, (, -, vty, /, vtv, ,, v]
[., dotProduct, (, this, ., y, ), ;, final, double, vtv, =, v, ., dotProduct, (, v, ), ;, daxpy]
[), ;, final, double, vtv, =, v, ., dotProduct, (, v, ), ;, daxpy, (, -, vty, /, vtv, ,]
[., y, ), ;, final, double, vtv, =, v, ., dotProduct, (, v, ), ;, daxpy, (, -, vty, /]
[;, daxpy, (, -, vty, /, vtv, ,, v, ,, this, ., y, ), ;, this, ., r2, =, this]
[., dotProduct, (, v, ), ;, daxpy, (, -, vty, /, vtv, ,, v, ,, this, ., y, ), ;]
[), ;, daxpy, (, -, vty, /, vtv, ,, v, ,, this, ., y, ), ;, this, ., r2, =]
[;, this, ., r2, =, this, ., y, ., copy, (, ), ;, if, (, this, ., m, !=, null]
[,, v, ,, this, ., y, ), ;, this, ., r2, =, this, ., y, ., copy, (, ), ;]
[/, vtv, ,, v, ,, this, ., y, ), ;, this, ., r2, =, this, ., y, ., copy, (]
[/, vtv, ,, v, ,, this, ., y, ), ;, this, ., r2, =, this, ., y, ., copy, (]
[,, v, ,, this, ., y, ), ;, this, ., r2, =, this, ., y, ., copy, (, ), ;]
[,, this, ., y, ), ;, this, ., r2, =, this, ., y, ., copy, (, ), ;, if, (]
[), ;, this, ., r2, =, this, ., y, ., copy, (, ), ;, if, (, this, ., m, !=]
[., y, ), ;, this, ., r2, =, this, ., y, ., copy, (, ), ;, if, (, this, .]
[=, this, ., y, ., copy, (, ), ;, if, (, this, ., m, !=, null, ), {, this, .]
[., r2, =, this, ., y, ., copy, (, ), ;, if, (, this, ., m, !=, null, ), {]
[;, if, (, this, ., m, !=, null, ), {, this, ., y, =, this, ., m, ., operate, (]
[., copy, (, ), ;, if, (, this, ., m, !=, null, ), {, this, ., y, =, this, .]
[., y, ., copy, (, ), ;, if, (, this, ., m, !=, null, ), {, this, ., y, =]
[), {, this, ., y, =, this, ., m, ., operate, (, this, ., r2, ), ;, }, this, .]
[!=, null, ), {, this, ., y, =, this, ., m, ., operate, (, this, ., r2, ), ;, }]
[., m, !=, null, ), {, this, ., y, =, this, ., m, ., operate, (, this, ., r2, )]
[), {, this, ., y, =, this, ., m, ., operate, (, this, ., r2, ), ;, }, this, .]
[=, this, ., m, ., operate, (, this, ., r2, ), ;, }, this, ., oldb, =, this, ., beta1]
[., y, =, this, ., m, ., operate, (, this, ., r2, ), ;, }, this, ., oldb, =, this]
[;, }, this, ., oldb, =, this, ., beta1, ;, this, ., beta, =, this, ., r2, ., dotProduct, (]
[., operate, (, this, ., r2, ), ;, }, this, ., oldb, =, this, ., beta1, ;, this, ., beta]
[., m, ., operate, (, this, ., r2, ), ;, }, this, ., oldb, =, this, ., beta1, ;, this]
[), ;, }, this, ., oldb, =, this, ., beta1, ;, this, ., beta, =, this, ., r2, ., dotProduct]
[., r2, ), ;, }, this, ., oldb, =, this, ., beta1, ;, this, ., beta, =, this, ., r2]
[=, this, ., beta1, ;, this, ., beta, =, this, ., r2, ., dotProduct, (, this, ., y, ), ;]
[., oldb, =, this, ., beta1, ;, this, ., beta, =, this, ., r2, ., dotProduct, (, this, ., y]
[;, this, ., beta, =, this, ., r2, ., dotProduct, (, this, ., y, ), ;, if, (, this, .]
[., beta1, ;, this, ., beta, =, this, ., r2, ., dotProduct, (, this, ., y, ), ;, if, (]
[=, this, ., r2, ., dotProduct, (, this, ., y, ), ;, if, (, this, ., beta, <, 0., )]
[., beta, =, this, ., r2, ., dotProduct, (, this, ., y, ), ;, if, (, this, ., beta, <]
[;, if, (, this, ., beta, <, 0., ), {, throwNPDLOException, (, this, ., m, ,, this, ., y, )]
[., dotProduct, (, this, ., y, ), ;, if, (, this, ., beta, <, 0., ), {, throwNPDLOException, (, this]
[., r2, ., dotProduct, (, this, ., y, ), ;, if, (, this, ., beta, <, 0., ), {, throwNPDLOException]
[), ;, if, (, this, ., beta, <, 0., ), {, throwNPDLOException, (, this, ., m, ,, this, ., y]
[., y, ), ;, if, (, this, ., beta, <, 0., ), {, throwNPDLOException, (, this, ., m, ,, this]
[), {, throwNPDLOException, (, this, ., m, ,, this, ., y, ), ;, }, this, ., beta, =, FastMath, .]
[<, 0., ), {, throwNPDLOException, (, this, ., m, ,, this, ., y, ), ;, }, this, ., beta, =]
[., beta, <, 0., ), {, throwNPDLOException, (, this, ., m, ,, this, ., y, ), ;, }, this, .]
[), {, throwNPDLOException, (, this, ., m, ,, this, ., y, ), ;, }, this, ., beta, =, FastMath, .]
[;, }, this, ., beta, =, FastMath, ., sqrt, (, this, ., beta, ), ;, this, ., cgnorm, =, this]
[,, this, ., y, ), ;, }, this, ., beta, =, FastMath, ., sqrt, (, this, ., beta, ), ;]
[., m, ,, this, ., y, ), ;, }, this, ., beta, =, FastMath, ., sqrt, (, this, ., beta]
[), ;, }, this, ., beta, =, FastMath, ., sqrt, (, this, ., beta, ), ;, this, ., cgnorm, =]
[., y, ), ;, }, this, ., beta, =, FastMath, ., sqrt, (, this, ., beta, ), ;, this, .]
[=, FastMath, ., sqrt, (, this, ., beta, ), ;, this, ., cgnorm, =, this, ., beta1, ;, this, .]
[., beta, =, FastMath, ., sqrt, (, this, ., beta, ), ;, this, ., cgnorm, =, this, ., beta1, ;]
[;, this, ., cgnorm, =, this, ., beta1, ;, this, ., gbar, =, alpha, ;, this, ., dbar, =, this]
[., sqrt, (, this, ., beta, ), ;, this, ., cgnorm, =, this, ., beta1, ;, this, ., gbar, =]
[), ;, this, ., cgnorm, =, this, ., beta1, ;, this, ., gbar, =, alpha, ;, this, ., dbar, =]
[., beta, ), ;, this, ., cgnorm, =, this, ., beta1, ;, this, ., gbar, =, alpha, ;, this, .]
[=, this, ., beta1, ;, this, ., gbar, =, alpha, ;, this, ., dbar, =, this, ., beta, ;, this]
[., cgnorm, =, this, ., beta1, ;, this, ., gbar, =, alpha, ;, this, ., dbar, =, this, ., beta]
[;, this, ., gbar, =, alpha, ;, this, ., dbar, =, this, ., beta, ;, this, ., gammaZeta, =, this]
[., beta1, ;, this, ., gbar, =, alpha, ;, this, ., dbar, =, this, ., beta, ;, this, ., gammaZeta]
[=, alpha, ;, this, ., dbar, =, this, ., beta, ;, this, ., gammaZeta, =, this, ., beta1, ;, this]
[., gbar, =, alpha, ;, this, ., dbar, =, this, ., beta, ;, this, ., gammaZeta, =, this, ., beta1]
[;, this, ., dbar, =, this, ., beta, ;, this, ., gammaZeta, =, this, ., beta1, ;, this, ., minusEpsZeta]
[=, this, ., beta, ;, this, ., gammaZeta, =, this, ., beta1, ;, this, ., minusEpsZeta, =, 0., ;, this]
[., dbar, =, this, ., beta, ;, this, ., gammaZeta, =, this, ., beta1, ;, this, ., minusEpsZeta, =, 0.]
[;, this, ., gammaZeta, =, this, ., beta1, ;, this, ., minusEpsZeta, =, 0., ;, this, ., bstep, =, 0.]
[., beta, ;, this, ., gammaZeta, =, this, ., beta1, ;, this, ., minusEpsZeta, =, 0., ;, this, ., bstep]
[=, this, ., beta1, ;, this, ., minusEpsZeta, =, 0., ;, this, ., bstep, =, 0., ;, this, ., snprod]
[., gammaZeta, =, this, ., beta1, ;, this, ., minusEpsZeta, =, 0., ;, this, ., bstep, =, 0., ;, this]
[;, this, ., minusEpsZeta, =, 0., ;, this, ., bstep, =, 0., ;, this, ., snprod, =, 1., ;, this]
[., beta1, ;, this, ., minusEpsZeta, =, 0., ;, this, ., bstep, =, 0., ;, this, ., snprod, =, 1.]
[=, 0., ;, this, ., bstep, =, 0., ;, this, ., snprod, =, 1., ;, this, ., tnorm, =, alpha]
[., minusEpsZeta, =, 0., ;, this, ., bstep, =, 0., ;, this, ., snprod, =, 1., ;, this, ., tnorm]
[;, this, ., bstep, =, 0., ;, this, ., snprod, =, 1., ;, this, ., tnorm, =, alpha, *, alpha]
[=, 0., ;, this, ., snprod, =, 1., ;, this, ., tnorm, =, alpha, *, alpha, +, this, ., beta]
[., bstep, =, 0., ;, this, ., snprod, =, 1., ;, this, ., tnorm, =, alpha, *, alpha, +, this]
[;, this, ., snprod, =, 1., ;, this, ., tnorm, =, alpha, *, alpha, +, this, ., beta, *, this]
[=, 1., ;, this, ., tnorm, =, alpha, *, alpha, +, this, ., beta, *, this, ., beta, ;, this]
[., snprod, =, 1., ;, this, ., tnorm, =, alpha, *, alpha, +, this, ., beta, *, this, ., beta]
[;, this, ., tnorm, =, alpha, *, alpha, +, this, ., beta, *, this, ., beta, ;, this, ., ynorm2]
[=, alpha, *, alpha, +, this, ., beta, *, this, ., beta, ;, this, ., ynorm2, =, 0., ;, this]
[., tnorm, =, alpha, *, alpha, +, this, ., beta, *, this, ., beta, ;, this, ., ynorm2, =, 0.]
[;, this, ., ynorm2, =, 0., ;, this, ., gmax, =, FastMath, ., abs, (, alpha, ), +, MACH_PREC, ;]
[+, this, ., beta, *, this, ., beta, ;, this, ., ynorm2, =, 0., ;, this, ., gmax, =, FastMath]
[*, alpha, +, this, ., beta, *, this, ., beta, ;, this, ., ynorm2, =, 0., ;, this, ., gmax]
[+, this, ., beta, *, this, ., beta, ;, this, ., ynorm2, =, 0., ;, this, ., gmax, =, FastMath]
[;, this, ., ynorm2, =, 0., ;, this, ., gmax, =, FastMath, ., abs, (, alpha, ), +, MACH_PREC, ;]
[*, this, ., beta, ;, this, ., ynorm2, =, 0., ;, this, ., gmax, =, FastMath, ., abs, (, alpha]
[., beta, *, this, ., beta, ;, this, ., ynorm2, =, 0., ;, this, ., gmax, =, FastMath, ., abs]
[;, this, ., ynorm2, =, 0., ;, this, ., gmax, =, FastMath, ., abs, (, alpha, ), +, MACH_PREC, ;]
[., beta, ;, this, ., ynorm2, =, 0., ;, this, ., gmax, =, FastMath, ., abs, (, alpha, ), +]
[=, 0., ;, this, ., gmax, =, FastMath, ., abs, (, alpha, ), +, MACH_PREC, ;, this, ., gmin, =]
[., ynorm2, =, 0., ;, this, ., gmax, =, FastMath, ., abs, (, alpha, ), +, MACH_PREC, ;, this, .]
[;, this, ., gmax, =, FastMath, ., abs, (, alpha, ), +, MACH_PREC, ;, this, ., gmin, =, this, .]
[=, FastMath, ., abs, (, alpha, ), +, MACH_PREC, ;, this, ., gmin, =, this, ., gmax, ;, if, (]
[., gmax, =, FastMath, ., abs, (, alpha, ), +, MACH_PREC, ;, this, ., gmin, =, this, ., gmax, ;]
[;, this, ., gmin, =, this, ., gmax, ;, if, (, this, ., goodb, ), {, this, ., wbar, =]
[+, MACH_PREC, ;, this, ., gmin, =, this, ., gmax, ;, if, (, this, ., goodb, ), {, this, .]
[., abs, (, alpha, ), +, MACH_PREC, ;, this, ., gmin, =, this, ., gmax, ;, if, (, this, .]
[), +, MACH_PREC, ;, this, ., gmin, =, this, ., gmax, ;, if, (, this, ., goodb, ), {, this]
[;, this, ., gmin, =, this, ., gmax, ;, if, (, this, ., goodb, ), {, this, ., wbar, =]
[=, this, ., gmax, ;, if, (, this, ., goodb, ), {, this, ., wbar, =, new, ArrayRealVector, (, this]
[., gmin, =, this, ., gmax, ;, if, (, this, ., goodb, ), {, this, ., wbar, =, new, ArrayRealVector]
[;, if, (, this, ., goodb, ), {, this, ., wbar, =, new, ArrayRealVector, (, this, ., a, ., getRowDimension]
[., gmax, ;, if, (, this, ., goodb, ), {, this, ., wbar, =, new, ArrayRealVector, (, this, ., a]
[), {, this, ., wbar, =, new, ArrayRealVector, (, this, ., a, ., getRowDimension, (, ), ), ;, this, .]
[., goodb, ), {, this, ., wbar, =, new, ArrayRealVector, (, this, ., a, ., getRowDimension, (, ), ), ;]
[=, new, ArrayRealVector, (, this, ., a, ., getRowDimension, (, ), ), ;, this, ., wbar, ., set, (, 0.]
[., wbar, =, new, ArrayRealVector, (, this, ., a, ., getRowDimension, (, ), ), ;, this, ., wbar, ., set]
[;, this, ., wbar, ., set, (, 0., ), ;, }, else, {, this, ., wbar, =, v, ;, }]
[), ;, this, ., wbar, ., set, (, 0., ), ;, }, else, {, this, ., wbar, =, v, ;]
[., getRowDimension, (, ), ), ;, this, ., wbar, ., set, (, 0., ), ;, }, else, {, this, .]
[., a, ., getRowDimension, (, ), ), ;, this, ., wbar, ., set, (, 0., ), ;, }, else, {]
[;, }, else, {, this, ., wbar, =, v, ;, }, updateNorms, (, ), ;, }, void, update, (, )]
[., set, (, 0., ), ;, }, else, {, this, ., wbar, =, v, ;, }, updateNorms, (, ), ;]
[., wbar, ., set, (, 0., ), ;, }, else, {, this, ., wbar, =, v, ;, }, updateNorms, (]
[), ;, }, else, {, this, ., wbar, =, v, ;, }, updateNorms, (, ), ;, }, void, update, (]
[=, v, ;, }, updateNorms, (, ), ;, }, void, update, (, ), {, final, RealVector, v, =, y, .]
[., wbar, =, v, ;, }, updateNorms, (, ), ;, }, void, update, (, ), {, final, RealVector, v, =]
[;, }, updateNorms, (, ), ;, }, void, update, (, ), {, final, RealVector, v, =, y, ., mapMultiply, (]
[;, }, void, update, (, ), {, final, RealVector, v, =, y, ., mapMultiply, (, 1., /, beta, ), ;]
[;, y, =, a, ., operate, (, v, ), ;, daxpbypz, (, -, shift, ,, v, ,, -, beta, /]
[., mapMultiply, (, 1., /, beta, ), ;, y, =, a, ., operate, (, v, ), ;, daxpbypz, (, -]
[), ;, y, =, a, ., operate, (, v, ), ;, daxpbypz, (, -, shift, ,, v, ,, -, beta]
[/, beta, ), ;, y, =, a, ., operate, (, v, ), ;, daxpbypz, (, -, shift, ,, v, ,]
[), ;, y, =, a, ., operate, (, v, ), ;, daxpbypz, (, -, shift, ,, v, ,, -, beta]
[=, a, ., operate, (, v, ), ;, daxpbypz, (, -, shift, ,, v, ,, -, beta, /, oldb, ,]
[;, daxpbypz, (, -, shift, ,, v, ,, -, beta, /, oldb, ,, r1, ,, y, ), ;, final, double]
[., operate, (, v, ), ;, daxpbypz, (, -, shift, ,, v, ,, -, beta, /, oldb, ,, r1, ,]
[), ;, daxpbypz, (, -, shift, ,, v, ,, -, beta, /, oldb, ,, r1, ,, y, ), ;, final]
[;, final, double, alpha, =, v, ., dotProduct, (, y, ), ;, daxpy, (, -, alpha, /, beta, ,, r2]
[,, v, ,, -, beta, /, oldb, ,, r1, ,, y, ), ;, final, double, alpha, =, v, ., dotProduct]
[,, v, ,, -, beta, /, oldb, ,, r1, ,, y, ), ;, final, double, alpha, =, v, ., dotProduct]
[,, -, beta, /, oldb, ,, r1, ,, y, ), ;, final, double, alpha, =, v, ., dotProduct, (, y]
[,, r1, ,, y, ), ;, final, double, alpha, =, v, ., dotProduct, (, y, ), ;, daxpy, (, -]
[/, oldb, ,, r1, ,, y, ), ;, final, double, alpha, =, v, ., dotProduct, (, y, ), ;, daxpy]
[/, oldb, ,, r1, ,, y, ), ;, final, double, alpha, =, v, ., dotProduct, (, y, ), ;, daxpy]
[,, r1, ,, y, ), ;, final, double, alpha, =, v, ., dotProduct, (, y, ), ;, daxpy, (, -]
[,, y, ), ;, final, double, alpha, =, v, ., dotProduct, (, y, ), ;, daxpy, (, -, alpha, /]
[), ;, final, double, alpha, =, v, ., dotProduct, (, y, ), ;, daxpy, (, -, alpha, /, beta, ,]
[;, daxpy, (, -, alpha, /, beta, ,, r2, ,, y, ), ;, r1, =, r2, ;, r2, =, y]
[., dotProduct, (, y, ), ;, daxpy, (, -, alpha, /, beta, ,, r2, ,, y, ), ;, r1, =]
[), ;, daxpy, (, -, alpha, /, beta, ,, r2, ,, y, ), ;, r1, =, r2, ;, r2, =]
[;, r1, =, r2, ;, r2, =, y, ;, if, (, m, !=, null, ), {, y, =, m, .]
[,, r2, ,, y, ), ;, r1, =, r2, ;, r2, =, y, ;, if, (, m, !=, null, )]
[/, beta, ,, r2, ,, y, ), ;, r1, =, r2, ;, r2, =, y, ;, if, (, m, !=]
[/, beta, ,, r2, ,, y, ), ;, r1, =, r2, ;, r2, =, y, ;, if, (, m, !=]
[,, r2, ,, y, ), ;, r1, =, r2, ;, r2, =, y, ;, if, (, m, !=, null, )]
[,, y, ), ;, r1, =, r2, ;, r2, =, y, ;, if, (, m, !=, null, ), {, y]
[), ;, r1, =, r2, ;, r2, =, y, ;, if, (, m, !=, null, ), {, y, =, m]
[=, r2, ;, r2, =, y, ;, if, (, m, !=, null, ), {, y, =, m, ., operate, (]
[;, r2, =, y, ;, if, (, m, !=, null, ), {, y, =, m, ., operate, (, r2, )]
[=, y, ;, if, (, m, !=, null, ), {, y, =, m, ., operate, (, r2, ), ;, }]
[;, if, (, m, !=, null, ), {, y, =, m, ., operate, (, r2, ), ;, }, oldb, =]
[), {, y, =, m, ., operate, (, r2, ), ;, }, oldb, =, beta, ;, beta, =, r2, .]
[!=, null, ), {, y, =, m, ., operate, (, r2, ), ;, }, oldb, =, beta, ;, beta, =]
[), {, y, =, m, ., operate, (, r2, ), ;, }, oldb, =, beta, ;, beta, =, r2, .]
[=, m, ., operate, (, r2, ), ;, }, oldb, =, beta, ;, beta, =, r2, ., dotProduct, (, y]
[;, }, oldb, =, beta, ;, beta, =, r2, ., dotProduct, (, y, ), ;, if, (, beta, <, 0.]
[., operate, (, r2, ), ;, }, oldb, =, beta, ;, beta, =, r2, ., dotProduct, (, y, ), ;]
[), ;, }, oldb, =, beta, ;, beta, =, r2, ., dotProduct, (, y, ), ;, if, (, beta, <]
[=, beta, ;, beta, =, r2, ., dotProduct, (, y, ), ;, if, (, beta, <, 0., ), {, throwNPDLOException]
[;, beta, =, r2, ., dotProduct, (, y, ), ;, if, (, beta, <, 0., ), {, throwNPDLOException, (, m]
[=, r2, ., dotProduct, (, y, ), ;, if, (, beta, <, 0., ), {, throwNPDLOException, (, m, ,, y]
[;, if, (, beta, <, 0., ), {, throwNPDLOException, (, m, ,, y, ), ;, }, beta, =, FastMath, .]
[., dotProduct, (, y, ), ;, if, (, beta, <, 0., ), {, throwNPDLOException, (, m, ,, y, ), ;]
[), ;, if, (, beta, <, 0., ), {, throwNPDLOException, (, m, ,, y, ), ;, }, beta, =, FastMath]
[), {, throwNPDLOException, (, m, ,, y, ), ;, }, beta, =, FastMath, ., sqrt, (, beta, ), ;, tnorm]
[<, 0., ), {, throwNPDLOException, (, m, ,, y, ), ;, }, beta, =, FastMath, ., sqrt, (, beta, )]
[), {, throwNPDLOException, (, m, ,, y, ), ;, }, beta, =, FastMath, ., sqrt, (, beta, ), ;, tnorm]
[;, }, beta, =, FastMath, ., sqrt, (, beta, ), ;, tnorm, +=, alpha, *, alpha, +, oldb, *, oldb]
[,, y, ), ;, }, beta, =, FastMath, ., sqrt, (, beta, ), ;, tnorm, +=, alpha, *, alpha, +]
[), ;, }, beta, =, FastMath, ., sqrt, (, beta, ), ;, tnorm, +=, alpha, *, alpha, +, oldb, *]
[=, FastMath, ., sqrt, (, beta, ), ;, tnorm, +=, alpha, *, alpha, +, oldb, *, oldb, +, beta, *]
[;, tnorm, +=, alpha, *, alpha, +, oldb, *, oldb, +, beta, *, beta, ;, final, double, gamma, =, FastMath]
[., sqrt, (, beta, ), ;, tnorm, +=, alpha, *, alpha, +, oldb, *, oldb, +, beta, *, beta, ;]
[), ;, tnorm, +=, alpha, *, alpha, +, oldb, *, oldb, +, beta, *, beta, ;, final, double, gamma, =]
[+=, alpha, *, alpha, +, oldb, *, oldb, +, beta, *, beta, ;, final, double, gamma, =, FastMath, ., sqrt]
[;, final, double, gamma, =, FastMath, ., sqrt, (, gbar, *, gbar, +, oldb, *, oldb, ), ;, final, double]
[+, beta, *, beta, ;, final, double, gamma, =, FastMath, ., sqrt, (, gbar, *, gbar, +, oldb, *, oldb]
[+, oldb, *, oldb, +, beta, *, beta, ;, final, double, gamma, =, FastMath, ., sqrt, (, gbar, *, gbar]
[*, alpha, +, oldb, *, oldb, +, beta, *, beta, ;, final, double, gamma, =, FastMath, ., sqrt, (, gbar]
[+, oldb, *, oldb, +, beta, *, beta, ;, final, double, gamma, =, FastMath, ., sqrt, (, gbar, *, gbar]
[+, beta, *, beta, ;, final, double, gamma, =, FastMath, ., sqrt, (, gbar, *, gbar, +, oldb, *, oldb]
[*, oldb, +, beta, *, beta, ;, final, double, gamma, =, FastMath, ., sqrt, (, gbar, *, gbar, +, oldb]
[+, beta, *, beta, ;, final, double, gamma, =, FastMath, ., sqrt, (, gbar, *, gbar, +, oldb, *, oldb]
[;, final, double, gamma, =, FastMath, ., sqrt, (, gbar, *, gbar, +, oldb, *, oldb, ), ;, final, double]
[*, beta, ;, final, double, gamma, =, FastMath, ., sqrt, (, gbar, *, gbar, +, oldb, *, oldb, ), ;]
[;, final, double, gamma, =, FastMath, ., sqrt, (, gbar, *, gbar, +, oldb, *, oldb, ), ;, final, double]
[;, final, double, c, =, gbar, /, gamma, ;, final, double, s, =, oldb, /, gamma, ;, final, double, deltak]
[., sqrt, (, gbar, *, gbar, +, oldb, *, oldb, ), ;, final, double, c, =, gbar, /, gamma, ;]
[), ;, final, double, c, =, gbar, /, gamma, ;, final, double, s, =, oldb, /, gamma, ;, final, double]
[+, oldb, *, oldb, ), ;, final, double, c, =, gbar, /, gamma, ;, final, double, s, =, oldb, /]
[*, gbar, +, oldb, *, oldb, ), ;, final, double, c, =, gbar, /, gamma, ;, final, double, s, =]
[+, oldb, *, oldb, ), ;, final, double, c, =, gbar, /, gamma, ;, final, double, s, =, oldb, /]
[), ;, final, double, c, =, gbar, /, gamma, ;, final, double, s, =, oldb, /, gamma, ;, final, double]
[*, oldb, ), ;, final, double, c, =, gbar, /, gamma, ;, final, double, s, =, oldb, /, gamma, ;]
[), ;, final, double, c, =, gbar, /, gamma, ;, final, double, s, =, oldb, /, gamma, ;, final, double]
[;, final, double, s, =, oldb, /, gamma, ;, final, double, deltak, =, c, *, dbar, +, s, *, alpha]
[/, gamma, ;, final, double, s, =, oldb, /, gamma, ;, final, double, deltak, =, c, *, dbar, +, s]
[;, final, double, s, =, oldb, /, gamma, ;, final, double, deltak, =, c, *, dbar, +, s, *, alpha]
[;, final, double, deltak, =, c, *, dbar, +, s, *, alpha, ;, gbar, =, s, *, dbar, -, c]
[/, gamma, ;, final, double, deltak, =, c, *, dbar, +, s, *, alpha, ;, gbar, =, s, *, dbar]
[;, final, double, deltak, =, c, *, dbar, +, s, *, alpha, ;, gbar, =, s, *, dbar, -, c]
[;, gbar, =, s, *, dbar, -, c, *, alpha, ;, final, double, eps, =, s, *, beta, ;, dbar]
[+, s, *, alpha, ;, gbar, =, s, *, dbar, -, c, *, alpha, ;, final, double, eps, =, s]
[*, dbar, +, s, *, alpha, ;, gbar, =, s, *, dbar, -, c, *, alpha, ;, final, double, eps]
[+, s, *, alpha, ;, gbar, =, s, *, dbar, -, c, *, alpha, ;, final, double, eps, =, s]
[;, gbar, =, s, *, dbar, -, c, *, alpha, ;, final, double, eps, =, s, *, beta, ;, dbar]
[*, alpha, ;, gbar, =, s, *, dbar, -, c, *, alpha, ;, final, double, eps, =, s, *, beta]
[;, gbar, =, s, *, dbar, -, c, *, alpha, ;, final, double, eps, =, s, *, beta, ;, dbar]
[=, s, *, dbar, -, c, *, alpha, ;, final, double, eps, =, s, *, beta, ;, dbar, =, -]
[;, final, double, eps, =, s, *, beta, ;, dbar, =, -, c, *, beta, ;, final, double, zeta, =]
[-, c, *, alpha, ;, final, double, eps, =, s, *, beta, ;, dbar, =, -, c, *, beta, ;]
[*, dbar, -, c, *, alpha, ;, final, double, eps, =, s, *, beta, ;, dbar, =, -, c, *]
[-, c, *, alpha, ;, final, double, eps, =, s, *, beta, ;, dbar, =, -, c, *, beta, ;]
[;, final, double, eps, =, s, *, beta, ;, dbar, =, -, c, *, beta, ;, final, double, zeta, =]
[*, alpha, ;, final, double, eps, =, s, *, beta, ;, dbar, =, -, c, *, beta, ;, final, double]
[;, final, double, eps, =, s, *, beta, ;, dbar, =, -, c, *, beta, ;, final, double, zeta, =]
[;, dbar, =, -, c, *, beta, ;, final, double, zeta, =, gammaZeta, /, gamma, ;, final, double, zetaC, =]
[*, beta, ;, dbar, =, -, c, *, beta, ;, final, double, zeta, =, gammaZeta, /, gamma, ;, final, double]
[;, dbar, =, -, c, *, beta, ;, final, double, zeta, =, gammaZeta, /, gamma, ;, final, double, zetaC, =]
[=, -, c, *, beta, ;, final, double, zeta, =, gammaZeta, /, gamma, ;, final, double, zetaC, =, zeta, *]
[;, final, double, zeta, =, gammaZeta, /, gamma, ;, final, double, zetaC, =, zeta, *, c, ;, final, double, zetaS]
[*, beta, ;, final, double, zeta, =, gammaZeta, /, gamma, ;, final, double, zetaC, =, zeta, *, c, ;, final]
[*, beta, ;, final, double, zeta, =, gammaZeta, /, gamma, ;, final, double, zetaC, =, zeta, *, c, ;, final]
[;, final, double, zeta, =, gammaZeta, /, gamma, ;, final, double, zetaC, =, zeta, *, c, ;, final, double, zetaS]
[;, final, double, zetaC, =, zeta, *, c, ;, final, double, zetaS, =, zeta, *, s, ;, final, int, n]
[/, gamma, ;, final, double, zetaC, =, zeta, *, c, ;, final, double, zetaS, =, zeta, *, s, ;, final]
[;, final, double, zetaC, =, zeta, *, c, ;, final, double, zetaS, =, zeta, *, s, ;, final, int, n]
[;, final, double, zetaS, =, zeta, *, s, ;, final, int, n, =, xL, ., getDimension, (, ), ;, for]
[*, c, ;, final, double, zetaS, =, zeta, *, s, ;, final, int, n, =, xL, ., getDimension, (, )]
[;, final, double, zetaS, =, zeta, *, s, ;, final, int, n, =, xL, ., getDimension, (, ), ;, for]
[;, final, int, n, =, xL, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[*, s, ;, final, int, n, =, xL, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;]
[;, final, int, n, =, xL, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, xi, =]
[., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, i, <, n, ;, i, ++, ), {, final, double, xi, =, xL, ., getEntry, (, i, ), ;]
[;, i, ++, ), {, final, double, xi, =, xL, ., getEntry, (, i, ), ;, final, double, vi, =]
[<, n, ;, i, ++, ), {, final, double, xi, =, xL, ., getEntry, (, i, ), ;, final, double]
[;, i, ++, ), {, final, double, xi, =, xL, ., getEntry, (, i, ), ;, final, double, vi, =]
[), {, final, double, xi, =, xL, ., getEntry, (, i, ), ;, final, double, vi, =, v, ., getEntry]
[++, ), {, final, double, xi, =, xL, ., getEntry, (, i, ), ;, final, double, vi, =, v, .]
[;, final, double, vi, =, v, ., getEntry, (, i, ), ;, final, double, wi, =, wbar, ., getEntry, (]
[., getEntry, (, i, ), ;, final, double, vi, =, v, ., getEntry, (, i, ), ;, final, double, wi]
[), ;, final, double, vi, =, v, ., getEntry, (, i, ), ;, final, double, wi, =, wbar, ., getEntry]
[;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, xL, ., setEntry, (, i, ,, xi, +]
[., getEntry, (, i, ), ;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, xL, ., setEntry]
[), ;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, xL, ., setEntry, (, i, ,, xi]
[;, xL, ., setEntry, (, i, ,, xi, +, wi, *, zetaC, +, vi, *, zetaS, ), ;, wbar, .]
[., getEntry, (, i, ), ;, xL, ., setEntry, (, i, ,, xi, +, wi, *, zetaC, +, vi, *]
[), ;, xL, ., setEntry, (, i, ,, xi, +, wi, *, zetaC, +, vi, *, zetaS, ), ;, wbar]
[;, wbar, ., setEntry, (, i, ,, wi, *, s, -, vi, *, c, ), ;, }, bstep, +=, snprod]
[., setEntry, (, i, ,, xi, +, wi, *, zetaC, +, vi, *, zetaS, ), ;, wbar, ., setEntry, (]
[,, xi, +, wi, *, zetaC, +, vi, *, zetaS, ), ;, wbar, ., setEntry, (, i, ,, wi, *]
[), ;, wbar, ., setEntry, (, i, ,, wi, *, s, -, vi, *, c, ), ;, }, bstep, +=]
[+, vi, *, zetaS, ), ;, wbar, ., setEntry, (, i, ,, wi, *, s, -, vi, *, c, )]
[+, wi, *, zetaC, +, vi, *, zetaS, ), ;, wbar, ., setEntry, (, i, ,, wi, *, s, -]
[+, vi, *, zetaS, ), ;, wbar, ., setEntry, (, i, ,, wi, *, s, -, vi, *, c, )]
[*, zetaC, +, vi, *, zetaS, ), ;, wbar, ., setEntry, (, i, ,, wi, *, s, -, vi, *]
[+, vi, *, zetaS, ), ;, wbar, ., setEntry, (, i, ,, wi, *, s, -, vi, *, c, )]
[), ;, wbar, ., setEntry, (, i, ,, wi, *, s, -, vi, *, c, ), ;, }, bstep, +=]
[*, zetaS, ), ;, wbar, ., setEntry, (, i, ,, wi, *, s, -, vi, *, c, ), ;, }]
[), ;, wbar, ., setEntry, (, i, ,, wi, *, s, -, vi, *, c, ), ;, }, bstep, +=]
[;, }, bstep, +=, snprod, *, c, *, zeta, ;, snprod, *=, s, ;, gmax, =, FastMath, ., max, (]
[., setEntry, (, i, ,, wi, *, s, -, vi, *, c, ), ;, }, bstep, +=, snprod, *, c]
[,, wi, *, s, -, vi, *, c, ), ;, }, bstep, +=, snprod, *, c, *, zeta, ;, snprod]
[), ;, }, bstep, +=, snprod, *, c, *, zeta, ;, snprod, *=, s, ;, gmax, =, FastMath, ., max]
[-, vi, *, c, ), ;, }, bstep, +=, snprod, *, c, *, zeta, ;, snprod, *=, s, ;, gmax]
[*, s, -, vi, *, c, ), ;, }, bstep, +=, snprod, *, c, *, zeta, ;, snprod, *=, s]
[-, vi, *, c, ), ;, }, bstep, +=, snprod, *, c, *, zeta, ;, snprod, *=, s, ;, gmax]
[), ;, }, bstep, +=, snprod, *, c, *, zeta, ;, snprod, *=, s, ;, gmax, =, FastMath, ., max]
[*, c, ), ;, }, bstep, +=, snprod, *, c, *, zeta, ;, snprod, *=, s, ;, gmax, =, FastMath]
[), ;, }, bstep, +=, snprod, *, c, *, zeta, ;, snprod, *=, s, ;, gmax, =, FastMath, ., max]
[+=, snprod, *, c, *, zeta, ;, snprod, *=, s, ;, gmax, =, FastMath, ., max, (, gmax, ,, gamma]
[;, snprod, *=, s, ;, gmax, =, FastMath, ., max, (, gmax, ,, gamma, ), ;, gmin, =, FastMath, .]
[*, zeta, ;, snprod, *=, s, ;, gmax, =, FastMath, ., max, (, gmax, ,, gamma, ), ;, gmin, =]
[*, c, *, zeta, ;, snprod, *=, s, ;, gmax, =, FastMath, ., max, (, gmax, ,, gamma, ), ;]
[*, zeta, ;, snprod, *=, s, ;, gmax, =, FastMath, ., max, (, gmax, ,, gamma, ), ;, gmin, =]
[;, snprod, *=, s, ;, gmax, =, FastMath, ., max, (, gmax, ,, gamma, ), ;, gmin, =, FastMath, .]
[*=, s, ;, gmax, =, FastMath, ., max, (, gmax, ,, gamma, ), ;, gmin, =, FastMath, ., min, (]
[;, gmax, =, FastMath, ., max, (, gmax, ,, gamma, ), ;, gmin, =, FastMath, ., min, (, gmin, ,]
[=, FastMath, ., max, (, gmax, ,, gamma, ), ;, gmin, =, FastMath, ., min, (, gmin, ,, gamma, )]
[;, gmin, =, FastMath, ., min, (, gmin, ,, gamma, ), ;, ynorm2, +=, zeta, *, zeta, ;, gammaZeta, =]
[., max, (, gmax, ,, gamma, ), ;, gmin, =, FastMath, ., min, (, gmin, ,, gamma, ), ;, ynorm2]
[,, gamma, ), ;, gmin, =, FastMath, ., min, (, gmin, ,, gamma, ), ;, ynorm2, +=, zeta, *, zeta]
[), ;, gmin, =, FastMath, ., min, (, gmin, ,, gamma, ), ;, ynorm2, +=, zeta, *, zeta, ;, gammaZeta]
[=, FastMath, ., min, (, gmin, ,, gamma, ), ;, ynorm2, +=, zeta, *, zeta, ;, gammaZeta, =, minusEpsZeta, -]
[;, ynorm2, +=, zeta, *, zeta, ;, gammaZeta, =, minusEpsZeta, -, deltak, *, zeta, ;, minusEpsZeta, =, -, eps, *]
[., min, (, gmin, ,, gamma, ), ;, ynorm2, +=, zeta, *, zeta, ;, gammaZeta, =, minusEpsZeta, -, deltak, *]
[,, gamma, ), ;, ynorm2, +=, zeta, *, zeta, ;, gammaZeta, =, minusEpsZeta, -, deltak, *, zeta, ;, minusEpsZeta, =]
[), ;, ynorm2, +=, zeta, *, zeta, ;, gammaZeta, =, minusEpsZeta, -, deltak, *, zeta, ;, minusEpsZeta, =, -, eps]
[+=, zeta, *, zeta, ;, gammaZeta, =, minusEpsZeta, -, deltak, *, zeta, ;, minusEpsZeta, =, -, eps, *, zeta, ;]
[;, gammaZeta, =, minusEpsZeta, -, deltak, *, zeta, ;, minusEpsZeta, =, -, eps, *, zeta, ;, updateNorms, (, ), ;]
[*, zeta, ;, gammaZeta, =, minusEpsZeta, -, deltak, *, zeta, ;, minusEpsZeta, =, -, eps, *, zeta, ;, updateNorms, (]
[;, gammaZeta, =, minusEpsZeta, -, deltak, *, zeta, ;, minusEpsZeta, =, -, eps, *, zeta, ;, updateNorms, (, ), ;]
[=, minusEpsZeta, -, deltak, *, zeta, ;, minusEpsZeta, =, -, eps, *, zeta, ;, updateNorms, (, ), ;, }, private]
[;, minusEpsZeta, =, -, eps, *, zeta, ;, updateNorms, (, ), ;, }, private, void, updateNorms, (, ), {, final]
[-, deltak, *, zeta, ;, minusEpsZeta, =, -, eps, *, zeta, ;, updateNorms, (, ), ;, }, private, void, updateNorms]
[;, minusEpsZeta, =, -, eps, *, zeta, ;, updateNorms, (, ), ;, }, private, void, updateNorms, (, ), {, final]
[*, zeta, ;, minusEpsZeta, =, -, eps, *, zeta, ;, updateNorms, (, ), ;, }, private, void, updateNorms, (, )]
[;, minusEpsZeta, =, -, eps, *, zeta, ;, updateNorms, (, ), ;, }, private, void, updateNorms, (, ), {, final]
[=, -, eps, *, zeta, ;, updateNorms, (, ), ;, }, private, void, updateNorms, (, ), {, final, double, anorm]
[;, updateNorms, (, ), ;, }, private, void, updateNorms, (, ), {, final, double, anorm, =, FastMath, ., sqrt, (]
[*, zeta, ;, updateNorms, (, ), ;, }, private, void, updateNorms, (, ), {, final, double, anorm, =, FastMath, .]
[*, zeta, ;, updateNorms, (, ), ;, }, private, void, updateNorms, (, ), {, final, double, anorm, =, FastMath, .]
[;, updateNorms, (, ), ;, }, private, void, updateNorms, (, ), {, final, double, anorm, =, FastMath, ., sqrt, (]
[;, }, private, void, updateNorms, (, ), {, final, double, anorm, =, FastMath, ., sqrt, (, tnorm, ), ;, final]
[;, final, double, ynorm, =, FastMath, ., sqrt, (, ynorm2, ), ;, final, double, epsa, =, anorm, *, MACH_PREC, ;]
[., sqrt, (, tnorm, ), ;, final, double, ynorm, =, FastMath, ., sqrt, (, ynorm2, ), ;, final, double, epsa]
[), ;, final, double, ynorm, =, FastMath, ., sqrt, (, ynorm2, ), ;, final, double, epsa, =, anorm, *, MACH_PREC]
[;, final, double, epsa, =, anorm, *, MACH_PREC, ;, final, double, epsx, =, anorm, *, ynorm, *, MACH_PREC, ;, final]
[., sqrt, (, ynorm2, ), ;, final, double, epsa, =, anorm, *, MACH_PREC, ;, final, double, epsx, =, anorm, *]
[), ;, final, double, epsa, =, anorm, *, MACH_PREC, ;, final, double, epsx, =, anorm, *, ynorm, *, MACH_PREC, ;]
[;, final, double, epsx, =, anorm, *, ynorm, *, MACH_PREC, ;, final, double, epsr, =, anorm, *, ynorm, *, delta]
[*, MACH_PREC, ;, final, double, epsx, =, anorm, *, ynorm, *, MACH_PREC, ;, final, double, epsr, =, anorm, *, ynorm]
[;, final, double, epsx, =, anorm, *, ynorm, *, MACH_PREC, ;, final, double, epsr, =, anorm, *, ynorm, *, delta]
[;, final, double, epsr, =, anorm, *, ynorm, *, delta, ;, final, double, diag, =, gbar, ==, 0., ?, epsa]
[*, MACH_PREC, ;, final, double, epsr, =, anorm, *, ynorm, *, delta, ;, final, double, diag, =, gbar, ==, 0.]
[*, ynorm, *, MACH_PREC, ;, final, double, epsr, =, anorm, *, ynorm, *, delta, ;, final, double, diag, =, gbar]
[*, MACH_PREC, ;, final, double, epsr, =, anorm, *, ynorm, *, delta, ;, final, double, diag, =, gbar, ==, 0.]
[;, final, double, epsr, =, anorm, *, ynorm, *, delta, ;, final, double, diag, =, gbar, ==, 0., ?, epsa]
[;, final, double, diag, =, gbar, ==, 0., ?, epsa, :, gbar, ;, lqnorm, =, FastMath, ., sqrt, (, gammaZeta]
[*, delta, ;, final, double, diag, =, gbar, ==, 0., ?, epsa, :, gbar, ;, lqnorm, =, FastMath, ., sqrt]
[*, ynorm, *, delta, ;, final, double, diag, =, gbar, ==, 0., ?, epsa, :, gbar, ;, lqnorm, =, FastMath]
[*, delta, ;, final, double, diag, =, gbar, ==, 0., ?, epsa, :, gbar, ;, lqnorm, =, FastMath, ., sqrt]
[;, final, double, diag, =, gbar, ==, 0., ?, epsa, :, gbar, ;, lqnorm, =, FastMath, ., sqrt, (, gammaZeta]
[;, lqnorm, =, FastMath, ., sqrt, (, gammaZeta, *, gammaZeta, +, minusEpsZeta, *, minusEpsZeta, ), ;, final, double, qrnorm, =]
[?, epsa, :, gbar, ;, lqnorm, =, FastMath, ., sqrt, (, gammaZeta, *, gammaZeta, +, minusEpsZeta, *, minusEpsZeta, ), ;]
[==, 0., ?, epsa, :, gbar, ;, lqnorm, =, FastMath, ., sqrt, (, gammaZeta, *, gammaZeta, +, minusEpsZeta, *, minusEpsZeta]
[?, epsa, :, gbar, ;, lqnorm, =, FastMath, ., sqrt, (, gammaZeta, *, gammaZeta, +, minusEpsZeta, *, minusEpsZeta, ), ;]
[:, gbar, ;, lqnorm, =, FastMath, ., sqrt, (, gammaZeta, *, gammaZeta, +, minusEpsZeta, *, minusEpsZeta, ), ;, final, double]
[;, lqnorm, =, FastMath, ., sqrt, (, gammaZeta, *, gammaZeta, +, minusEpsZeta, *, minusEpsZeta, ), ;, final, double, qrnorm, =]
[=, FastMath, ., sqrt, (, gammaZeta, *, gammaZeta, +, minusEpsZeta, *, minusEpsZeta, ), ;, final, double, qrnorm, =, snprod, *]
[;, final, double, qrnorm, =, snprod, *, beta1, ;, cgnorm, =, qrnorm, *, beta, /, FastMath, ., abs, (, diag]
[., sqrt, (, gammaZeta, *, gammaZeta, +, minusEpsZeta, *, minusEpsZeta, ), ;, final, double, qrnorm, =, snprod, *, beta1, ;]
[), ;, final, double, qrnorm, =, snprod, *, beta1, ;, cgnorm, =, qrnorm, *, beta, /, FastMath, ., abs, (]
[+, minusEpsZeta, *, minusEpsZeta, ), ;, final, double, qrnorm, =, snprod, *, beta1, ;, cgnorm, =, qrnorm, *, beta, /]
[*, gammaZeta, +, minusEpsZeta, *, minusEpsZeta, ), ;, final, double, qrnorm, =, snprod, *, beta1, ;, cgnorm, =, qrnorm, *]
[+, minusEpsZeta, *, minusEpsZeta, ), ;, final, double, qrnorm, =, snprod, *, beta1, ;, cgnorm, =, qrnorm, *, beta, /]
[), ;, final, double, qrnorm, =, snprod, *, beta1, ;, cgnorm, =, qrnorm, *, beta, /, FastMath, ., abs, (]
[*, minusEpsZeta, ), ;, final, double, qrnorm, =, snprod, *, beta1, ;, cgnorm, =, qrnorm, *, beta, /, FastMath, .]
[), ;, final, double, qrnorm, =, snprod, *, beta1, ;, cgnorm, =, qrnorm, *, beta, /, FastMath, ., abs, (]
[;, cgnorm, =, qrnorm, *, beta, /, FastMath, ., abs, (, diag, ), ;, final, double, acond, ;, if, (]
[*, beta1, ;, cgnorm, =, qrnorm, *, beta, /, FastMath, ., abs, (, diag, ), ;, final, double, acond, ;]
[;, cgnorm, =, qrnorm, *, beta, /, FastMath, ., abs, (, diag, ), ;, final, double, acond, ;, if, (]
[=, qrnorm, *, beta, /, FastMath, ., abs, (, diag, ), ;, final, double, acond, ;, if, (, lqnorm, <=]
[;, final, double, acond, ;, if, (, lqnorm, <=, cgnorm, ), {, acond, =, gmax, /, gmin, ;, }, else]
[/, FastMath, ., abs, (, diag, ), ;, final, double, acond, ;, if, (, lqnorm, <=, cgnorm, ), {, acond]
[*, beta, /, FastMath, ., abs, (, diag, ), ;, final, double, acond, ;, if, (, lqnorm, <=, cgnorm, )]
[/, FastMath, ., abs, (, diag, ), ;, final, double, acond, ;, if, (, lqnorm, <=, cgnorm, ), {, acond]
[;, final, double, acond, ;, if, (, lqnorm, <=, cgnorm, ), {, acond, =, gmax, /, gmin, ;, }, else]
[., abs, (, diag, ), ;, final, double, acond, ;, if, (, lqnorm, <=, cgnorm, ), {, acond, =, gmax]
[), ;, final, double, acond, ;, if, (, lqnorm, <=, cgnorm, ), {, acond, =, gmax, /, gmin, ;, }]
[), {, acond, =, gmax, /, gmin, ;, }, else, {, acond, =, gmax, /, FastMath, ., min, (, gmin]
[<=, cgnorm, ), {, acond, =, gmax, /, gmin, ;, }, else, {, acond, =, gmax, /, FastMath, ., min]
[), {, acond, =, gmax, /, gmin, ;, }, else, {, acond, =, gmax, /, FastMath, ., min, (, gmin]
[=, gmax, /, gmin, ;, }, else, {, acond, =, gmax, /, FastMath, ., min, (, gmin, ,, FastMath, .]
[;, }, else, {, acond, =, gmax, /, FastMath, ., min, (, gmin, ,, FastMath, ., abs, (, diag, )]
[/, gmin, ;, }, else, {, acond, =, gmax, /, FastMath, ., min, (, gmin, ,, FastMath, ., abs, (]
[;, }, else, {, acond, =, gmax, /, FastMath, ., min, (, gmin, ,, FastMath, ., abs, (, diag, )]
[=, gmax, /, FastMath, ., min, (, gmin, ,, FastMath, ., abs, (, diag, ), ), ;, }, if, (]
[;, }, if, (, acond, *, MACH_PREC, >=, 0.1, ), {, throw, new, IllConditionedOperatorException, (, acond, ), ;, }, if]
[/, FastMath, ., min, (, gmin, ,, FastMath, ., abs, (, diag, ), ), ;, }, if, (, acond, *]
[;, }, if, (, acond, *, MACH_PREC, >=, 0.1, ), {, throw, new, IllConditionedOperatorException, (, acond, ), ;, }, if]
[., min, (, gmin, ,, FastMath, ., abs, (, diag, ), ), ;, }, if, (, acond, *, MACH_PREC, >=]
[,, FastMath, ., abs, (, diag, ), ), ;, }, if, (, acond, *, MACH_PREC, >=, 0.1, ), {, throw]
[), ;, }, if, (, acond, *, MACH_PREC, >=, 0.1, ), {, throw, new, IllConditionedOperatorException, (, acond, ), ;, }]
[., abs, (, diag, ), ), ;, }, if, (, acond, *, MACH_PREC, >=, 0.1, ), {, throw, new, IllConditionedOperatorException]
[), ), ;, }, if, (, acond, *, MACH_PREC, >=, 0.1, ), {, throw, new, IllConditionedOperatorException, (, acond, ), ;]
[), {, throw, new, IllConditionedOperatorException, (, acond, ), ;, }, if, (, beta1, <=, epsx, ), {, throw, new, SingularOperatorException]
[>=, 0.1, ), {, throw, new, IllConditionedOperatorException, (, acond, ), ;, }, if, (, beta1, <=, epsx, ), {, throw]
[*, MACH_PREC, >=, 0.1, ), {, throw, new, IllConditionedOperatorException, (, acond, ), ;, }, if, (, beta1, <=, epsx, )]
[>=, 0.1, ), {, throw, new, IllConditionedOperatorException, (, acond, ), ;, }, if, (, beta1, <=, epsx, ), {, throw]
[), {, throw, new, IllConditionedOperatorException, (, acond, ), ;, }, if, (, beta1, <=, epsx, ), {, throw, new, SingularOperatorException]
[;, }, if, (, beta1, <=, epsx, ), {, throw, new, SingularOperatorException, (, ), ;, }, rnorm, =, FastMath, .]
[), ;, }, if, (, beta1, <=, epsx, ), {, throw, new, SingularOperatorException, (, ), ;, }, rnorm, =, FastMath]
[), {, throw, new, SingularOperatorException, (, ), ;, }, rnorm, =, FastMath, ., min, (, cgnorm, ,, lqnorm, ), ;]
[<=, epsx, ), {, throw, new, SingularOperatorException, (, ), ;, }, rnorm, =, FastMath, ., min, (, cgnorm, ,, lqnorm]
[), {, throw, new, SingularOperatorException, (, ), ;, }, rnorm, =, FastMath, ., min, (, cgnorm, ,, lqnorm, ), ;]
[;, }, rnorm, =, FastMath, ., min, (, cgnorm, ,, lqnorm, ), ;, hasConverged, =, (, cgnorm, <=, epsx, )]
[=, FastMath, ., min, (, cgnorm, ,, lqnorm, ), ;, hasConverged, =, (, cgnorm, <=, epsx, ), ||, (, cgnorm]
[;, hasConverged, =, (, cgnorm, <=, epsx, ), ||, (, cgnorm, <=, epsr, ), ;, }, boolean, hasConverged, (, )]
[., min, (, cgnorm, ,, lqnorm, ), ;, hasConverged, =, (, cgnorm, <=, epsx, ), ||, (, cgnorm, <=, epsr]
[,, lqnorm, ), ;, hasConverged, =, (, cgnorm, <=, epsx, ), ||, (, cgnorm, <=, epsr, ), ;, }, boolean]
[), ;, hasConverged, =, (, cgnorm, <=, epsx, ), ||, (, cgnorm, <=, epsr, ), ;, }, boolean, hasConverged, (]
[=, (, cgnorm, <=, epsx, ), ||, (, cgnorm, <=, epsr, ), ;, }, boolean, hasConverged, (, ), {, return]
[;, }, boolean, hasConverged, (, ), {, return, hasConverged, ;, }, boolean, bEqualsNullVector, (, ), {, return, bIsNull, ;, }]
[||, (, cgnorm, <=, epsr, ), ;, }, boolean, hasConverged, (, ), {, return, hasConverged, ;, }, boolean, bEqualsNullVector, (]
[), ||, (, cgnorm, <=, epsr, ), ;, }, boolean, hasConverged, (, ), {, return, hasConverged, ;, }, boolean, bEqualsNullVector]
[<=, epsx, ), ||, (, cgnorm, <=, epsr, ), ;, }, boolean, hasConverged, (, ), {, return, hasConverged, ;, }]
[), ||, (, cgnorm, <=, epsr, ), ;, }, boolean, hasConverged, (, ), {, return, hasConverged, ;, }, boolean, bEqualsNullVector]
[;, }, boolean, hasConverged, (, ), {, return, hasConverged, ;, }, boolean, bEqualsNullVector, (, ), {, return, bIsNull, ;, }]
[), ;, }, boolean, hasConverged, (, ), {, return, hasConverged, ;, }, boolean, bEqualsNullVector, (, ), {, return, bIsNull, ;]
[<=, epsr, ), ;, }, boolean, hasConverged, (, ), {, return, hasConverged, ;, }, boolean, bEqualsNullVector, (, ), {, return]
[), ;, }, boolean, hasConverged, (, ), {, return, hasConverged, ;, }, boolean, bEqualsNullVector, (, ), {, return, bIsNull, ;]
[;, }, boolean, bEqualsNullVector, (, ), {, return, bIsNull, ;, }, boolean, betaEqualsZero, (, ), {, return, beta, <, MACH_PREC]
[;, }, boolean, betaEqualsZero, (, ), {, return, beta, <, MACH_PREC, ;, }, double, getNormOfResidual, (, ), {, return, rnorm]
[;, }, double, getNormOfResidual, (, ), {, return, rnorm, ;, }, }, private, static, final, String, OPERATOR, =, "operator", ;]
[<, MACH_PREC, ;, }, double, getNormOfResidual, (, ), {, return, rnorm, ;, }, }, private, static, final, String, OPERATOR, =]
[;, }, double, getNormOfResidual, (, ), {, return, rnorm, ;, }, }, private, static, final, String, OPERATOR, =, "operator", ;]
[;, }, }, private, static, final, String, OPERATOR, =, "operator", ;, private, static, final, String, THRESHOLD, =, "threshold", ;, private]
[;, private, static, final, String, THRESHOLD, =, "threshold", ;, private, static, final, String, VECTOR, =, "vector", ;, private, static, final]
[;, private, static, final, String, VECTOR, =, "vector", ;, private, static, final, String, VECTOR1, =, "vector1", ;, private, static, final]
[;, private, static, final, String, VECTOR1, =, "vector1", ;, private, static, final, String, VECTOR2, =, "vector2", ;, private, final, boolean]
[;, private, static, final, String, VECTOR2, =, "vector2", ;, private, final, boolean, check, ;, private, final, double, delta, ;, public]
[;, private, final, boolean, check, ;, private, final, double, delta, ;, public, SymmLQ, (, final, int, maxIterations, ,, final, double]
[), ;, this, ., delta, =, delta, ;, this, ., check, =, check, ;, }, public, SymmLQ, (, final, IterationManager]
[=, delta, ;, this, ., check, =, check, ;, }, public, SymmLQ, (, final, IterationManager, manager, ,, final, double, delta]
[., delta, =, delta, ;, this, ., check, =, check, ;, }, public, SymmLQ, (, final, IterationManager, manager, ,, final]
[;, this, ., check, =, check, ;, }, public, SymmLQ, (, final, IterationManager, manager, ,, final, double, delta, ,, final]
[=, check, ;, }, public, SymmLQ, (, final, IterationManager, manager, ,, final, double, delta, ,, final, boolean, check, ), {]
[., check, =, check, ;, }, public, SymmLQ, (, final, IterationManager, manager, ,, final, double, delta, ,, final, boolean, check]
[;, }, public, SymmLQ, (, final, IterationManager, manager, ,, final, double, delta, ,, final, boolean, check, ), {, super, (]
[), ;, this, ., delta, =, delta, ;, this, ., check, =, check, ;, }, public, final, boolean, getCheck, (]
[=, delta, ;, this, ., check, =, check, ;, }, public, final, boolean, getCheck, (, ), {, return, check, ;]
[., delta, =, delta, ;, this, ., check, =, check, ;, }, public, final, boolean, getCheck, (, ), {, return]
[;, this, ., check, =, check, ;, }, public, final, boolean, getCheck, (, ), {, return, check, ;, }, @]
[=, check, ;, }, public, final, boolean, getCheck, (, ), {, return, check, ;, }, @, Override, public, RealVector, solve]
[., check, =, check, ;, }, public, final, boolean, getCheck, (, ), {, return, check, ;, }, @, Override, public]
[;, }, public, final, boolean, getCheck, (, ), {, return, check, ;, }, @, Override, public, RealVector, solve, (, final]
[;, }, @, Override, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m, ,, final, RealVector, b, )]
[;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a, ,]
[., checkNotNull, (, a, ), ;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;]
[), ;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a]
[;, return, solveInPlace, (, a, ,, m, ,, b, ,, x, ,, false, ,, 0., ), ;, }, public, RealVector]
[), ;, return, solveInPlace, (, a, ,, m, ,, b, ,, x, ,, false, ,, 0., ), ;, }, public]
[., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a, ,, m, ,, b, ,, x, ,, false, ,, 0.]
[;, }, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m, ,, final, RealVector, b, ,, final, boolean]
[,, m, ,, b, ,, x, ,, false, ,, 0., ), ;, }, public, RealVector, solve, (, final, RealLinearOperator, a]
[,, b, ,, x, ,, false, ,, 0., ), ;, }, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final]
[,, x, ,, false, ,, 0., ), ;, }, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m]
[,, false, ,, 0., ), ;, }, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m, ,, final]
[,, 0., ), ;, }, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m, ,, final, RealVector, b]
[), ;, }, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m, ,, final, RealVector, b, ,, final]
[;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a, ,]
[., checkNotNull, (, a, ), ;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;]
[), ;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a]
[;, return, solveInPlace, (, a, ,, m, ,, b, ,, x, ,, goodb, ,, shift, ), ;, }, @, Override]
[), ;, return, solveInPlace, (, a, ,, m, ,, b, ,, x, ,, goodb, ,, shift, ), ;, }, @]
[., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a, ,, m, ,, b, ,, x, ,, goodb, ,, shift]
[;, }, @, Override, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m, ,, final, RealVector, b, ,]
[,, m, ,, b, ,, x, ,, goodb, ,, shift, ), ;, }, @, Override, public, RealVector, solve, (, final]
[,, b, ,, x, ,, goodb, ,, shift, ), ;, }, @, Override, public, RealVector, solve, (, final, RealLinearOperator, a]
[,, x, ,, goodb, ,, shift, ), ;, }, @, Override, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final]
[,, goodb, ,, shift, ), ;, }, @, Override, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m]
[,, shift, ), ;, }, @, Override, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m, ,, final]
[), ;, }, @, Override, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m, ,, final, RealVector, b]
[;, return, solveInPlace, (, a, ,, m, ,, b, ,, x, ., copy, (, ), ,, false, ,, 0., )]
[., checkNotNull, (, x, ), ;, return, solveInPlace, (, a, ,, m, ,, b, ,, x, ., copy, (, )]
[), ;, return, solveInPlace, (, a, ,, m, ,, b, ,, x, ., copy, (, ), ,, false, ,, 0.]
[;, }, @, Override, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealVector, b, ), throws, NullArgumentException, ,, NonSquareOperatorException]
[,, m, ,, b, ,, x, ., copy, (, ), ,, false, ,, 0., ), ;, }, @, Override, public]
[,, b, ,, x, ., copy, (, ), ,, false, ,, 0., ), ;, }, @, Override, public, RealVector, solve]
[,, x, ., copy, (, ), ,, false, ,, 0., ), ;, }, @, Override, public, RealVector, solve, (, final]
[,, false, ,, 0., ), ;, }, @, Override, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealVector, b]
[., copy, (, ), ,, false, ,, 0., ), ;, }, @, Override, public, RealVector, solve, (, final, RealLinearOperator, a]
[,, 0., ), ;, }, @, Override, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealVector, b, ), throws]
[), ;, }, @, Override, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealVector, b, ), throws, NullArgumentException, ,]
[;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, x, ., set, (, 0.]
[., checkNotNull, (, a, ), ;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;]
[), ;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, x, ., set, (]
[;, x, ., set, (, 0., ), ;, return, solveInPlace, (, a, ,, null, ,, b, ,, x, ,, false]
[), ;, x, ., set, (, 0., ), ;, return, solveInPlace, (, a, ,, null, ,, b, ,, x, ,]
[., getColumnDimension, (, ), ), ;, x, ., set, (, 0., ), ;, return, solveInPlace, (, a, ,, null, ,]
[;, return, solveInPlace, (, a, ,, null, ,, b, ,, x, ,, false, ,, 0., ), ;, }, public, RealVector]
[., set, (, 0., ), ;, return, solveInPlace, (, a, ,, null, ,, b, ,, x, ,, false, ,, 0.]
[), ;, return, solveInPlace, (, a, ,, null, ,, b, ,, x, ,, false, ,, 0., ), ;, }, public]
[;, }, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealVector, b, ,, final, boolean, goodb, ,, final, double]
[,, null, ,, b, ,, x, ,, false, ,, 0., ), ;, }, public, RealVector, solve, (, final, RealLinearOperator, a]
[,, b, ,, x, ,, false, ,, 0., ), ;, }, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final]
[,, x, ,, false, ,, 0., ), ;, }, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealVector, b]
[,, false, ,, 0., ), ;, }, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealVector, b, ,, final]
[,, 0., ), ;, }, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealVector, b, ,, final, boolean, goodb]
[), ;, }, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealVector, b, ,, final, boolean, goodb, ,, final]
[;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a, ,]
[., checkNotNull, (, a, ), ;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;]
[), ;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a]
[;, return, solveInPlace, (, a, ,, null, ,, b, ,, x, ,, goodb, ,, shift, ), ;, }, @, Override]
[), ;, return, solveInPlace, (, a, ,, null, ,, b, ,, x, ,, goodb, ,, shift, ), ;, }, @]
[., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a, ,, null, ,, b, ,, x, ,, goodb, ,, shift]
[;, }, @, Override, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealVector, b, ,, final, RealVector, x, )]
[,, null, ,, b, ,, x, ,, goodb, ,, shift, ), ;, }, @, Override, public, RealVector, solve, (, final]
[,, b, ,, x, ,, goodb, ,, shift, ), ;, }, @, Override, public, RealVector, solve, (, final, RealLinearOperator, a]
[,, x, ,, goodb, ,, shift, ), ;, }, @, Override, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final]
[,, goodb, ,, shift, ), ;, }, @, Override, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealVector, b]
[,, shift, ), ;, }, @, Override, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealVector, b, ,, final]
[), ;, }, @, Override, public, RealVector, solve, (, final, RealLinearOperator, a, ,, final, RealVector, b, ,, final, RealVector, x]
[;, return, solveInPlace, (, a, ,, null, ,, b, ,, x, ., copy, (, ), ,, false, ,, 0., )]
[., checkNotNull, (, x, ), ;, return, solveInPlace, (, a, ,, null, ,, b, ,, x, ., copy, (, )]
[), ;, return, solveInPlace, (, a, ,, null, ,, b, ,, x, ., copy, (, ), ,, false, ,, 0.]
[;, }, @, Override, public, RealVector, solveInPlace, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m, ,, final, RealVector, b, ,]
[,, null, ,, b, ,, x, ., copy, (, ), ,, false, ,, 0., ), ;, }, @, Override, public]
[,, b, ,, x, ., copy, (, ), ,, false, ,, 0., ), ;, }, @, Override, public, RealVector, solveInPlace]
[,, x, ., copy, (, ), ,, false, ,, 0., ), ;, }, @, Override, public, RealVector, solveInPlace, (, final]
[,, false, ,, 0., ), ;, }, @, Override, public, RealVector, solveInPlace, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m]
[., copy, (, ), ,, false, ,, 0., ), ;, }, @, Override, public, RealVector, solveInPlace, (, final, RealLinearOperator, a]
[,, 0., ), ;, }, @, Override, public, RealVector, solveInPlace, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m, ,, final]
[), ;, }, @, Override, public, RealVector, solveInPlace, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m, ,, final, RealVector, b]
[;, }, public, RealVector, solveInPlace, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m, ,, final, RealVector, b, ,, final, RealVector]
[,, m, ,, b, ,, x, ,, false, ,, 0., ), ;, }, public, RealVector, solveInPlace, (, final, RealLinearOperator, a]
[,, b, ,, x, ,, false, ,, 0., ), ;, }, public, RealVector, solveInPlace, (, final, RealLinearOperator, a, ,, final]
[,, x, ,, false, ,, 0., ), ;, }, public, RealVector, solveInPlace, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m]
[,, false, ,, 0., ), ;, }, public, RealVector, solveInPlace, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m, ,, final]
[,, 0., ), ;, }, public, RealVector, solveInPlace, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m, ,, final, RealVector, b]
[), ;, }, public, RealVector, solveInPlace, (, final, RealLinearOperator, a, ,, final, RealLinearOperator, m, ,, final, RealVector, b, ,, final]
[;, final, IterationManager, manager, =, getIterationManager, (, ), ;, manager, ., resetIterationCount, (, ), ;, manager, ., incrementIterationCount, (, )]
[,, m, ,, b, ,, x, ), ;, final, IterationManager, manager, =, getIterationManager, (, ), ;, manager, ., resetIterationCount, (]
[,, b, ,, x, ), ;, final, IterationManager, manager, =, getIterationManager, (, ), ;, manager, ., resetIterationCount, (, ), ;]
[,, x, ), ;, final, IterationManager, manager, =, getIterationManager, (, ), ;, manager, ., resetIterationCount, (, ), ;, manager, .]
[), ;, final, IterationManager, manager, =, getIterationManager, (, ), ;, manager, ., resetIterationCount, (, ), ;, manager, ., incrementIterationCount, (]
[;, manager, ., resetIterationCount, (, ), ;, manager, ., incrementIterationCount, (, ), ;, final, State, state, ;, state, =, new]
[;, manager, ., incrementIterationCount, (, ), ;, final, State, state, ;, state, =, new, State, (, a, ,, m, ,]
[., resetIterationCount, (, ), ;, manager, ., incrementIterationCount, (, ), ;, final, State, state, ;, state, =, new, State, (]
[;, final, State, state, ;, state, =, new, State, (, a, ,, m, ,, b, ,, goodb, ,, shift, ,]
[., incrementIterationCount, (, ), ;, final, State, state, ;, state, =, new, State, (, a, ,, m, ,, b, ,]
[=, new, State, (, a, ,, m, ,, b, ,, goodb, ,, shift, ,, delta, ,, check, ), ;, state]
[;, state, ., init, (, ), ;, state, ., refineSolution, (, x, ), ;, IterativeLinearSolverEvent, event, ;, event, =, new]
[,, m, ,, b, ,, goodb, ,, shift, ,, delta, ,, check, ), ;, state, ., init, (, ), ;]
[,, b, ,, goodb, ,, shift, ,, delta, ,, check, ), ;, state, ., init, (, ), ;, state, .]
[,, goodb, ,, shift, ,, delta, ,, check, ), ;, state, ., init, (, ), ;, state, ., refineSolution, (]
[,, shift, ,, delta, ,, check, ), ;, state, ., init, (, ), ;, state, ., refineSolution, (, x, )]
[,, delta, ,, check, ), ;, state, ., init, (, ), ;, state, ., refineSolution, (, x, ), ;, IterativeLinearSolverEvent]
[,, check, ), ;, state, ., init, (, ), ;, state, ., refineSolution, (, x, ), ;, IterativeLinearSolverEvent, event, ;]
[), ;, state, ., init, (, ), ;, state, ., refineSolution, (, x, ), ;, IterativeLinearSolverEvent, event, ;, event, =]
[;, state, ., refineSolution, (, x, ), ;, IterativeLinearSolverEvent, event, ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, .]
[., init, (, ), ;, state, ., refineSolution, (, x, ), ;, IterativeLinearSolverEvent, event, ;, event, =, new, DefaultIterativeLinearSolverEvent, (]
[;, IterativeLinearSolverEvent, event, ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b]
[., refineSolution, (, x, ), ;, IterativeLinearSolverEvent, event, ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (]
[), ;, IterativeLinearSolverEvent, event, ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,]
[=, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (]
[;, if, (, state, ., bEqualsNullVector, (, ), ), {, manager, ., fireTerminationEvent, (, event, ), ;, return, x, ;]
[,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, if, (]
[,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, if, (, state, ., bEqualsNullVector, (, ), )]
[., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, if, (, state, .]
[,, b, ,, state, ., getNormOfResidual, (, ), ), ;, if, (, state, ., bEqualsNullVector, (, ), ), {, manager]
[,, state, ., getNormOfResidual, (, ), ), ;, if, (, state, ., bEqualsNullVector, (, ), ), {, manager, ., fireTerminationEvent]
[), ;, if, (, state, ., bEqualsNullVector, (, ), ), {, manager, ., fireTerminationEvent, (, event, ), ;, return, x]
[., getNormOfResidual, (, ), ), ;, if, (, state, ., bEqualsNullVector, (, ), ), {, manager, ., fireTerminationEvent, (, event]
[), {, manager, ., fireTerminationEvent, (, event, ), ;, return, x, ;, }, final, boolean, earlyStop, ;, earlyStop, =, state]
[., bEqualsNullVector, (, ), ), {, manager, ., fireTerminationEvent, (, event, ), ;, return, x, ;, }, final, boolean, earlyStop]
[;, return, x, ;, }, final, boolean, earlyStop, ;, earlyStop, =, state, ., betaEqualsZero, (, ), ||, state, ., hasConverged]
[., fireTerminationEvent, (, event, ), ;, return, x, ;, }, final, boolean, earlyStop, ;, earlyStop, =, state, ., betaEqualsZero, (]
[), ;, return, x, ;, }, final, boolean, earlyStop, ;, earlyStop, =, state, ., betaEqualsZero, (, ), ||, state, .]
[;, }, final, boolean, earlyStop, ;, earlyStop, =, state, ., betaEqualsZero, (, ), ||, state, ., hasConverged, (, ), ;]
[=, state, ., betaEqualsZero, (, ), ||, state, ., hasConverged, (, ), ;, manager, ., fireInitializationEvent, (, event, ), ;]
[;, manager, ., fireInitializationEvent, (, event, ), ;, if, (, !, earlyStop, ), {, do, {, manager, ., incrementIterationCount, (]
[||, state, ., hasConverged, (, ), ;, manager, ., fireInitializationEvent, (, event, ), ;, if, (, !, earlyStop, ), {]
[., betaEqualsZero, (, ), ||, state, ., hasConverged, (, ), ;, manager, ., fireInitializationEvent, (, event, ), ;, if, (]
[;, manager, ., fireInitializationEvent, (, event, ), ;, if, (, !, earlyStop, ), {, do, {, manager, ., incrementIterationCount, (]
[., hasConverged, (, ), ;, manager, ., fireInitializationEvent, (, event, ), ;, if, (, !, earlyStop, ), {, do, {]
[;, if, (, !, earlyStop, ), {, do, {, manager, ., incrementIterationCount, (, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (]
[., fireInitializationEvent, (, event, ), ;, if, (, !, earlyStop, ), {, do, {, manager, ., incrementIterationCount, (, ), ;]
[), ;, if, (, !, earlyStop, ), {, do, {, manager, ., incrementIterationCount, (, ), ;, event, =, new, DefaultIterativeLinearSolverEvent]
[), {, do, {, manager, ., incrementIterationCount, (, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations]
[), {, do, {, manager, ., incrementIterationCount, (, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations]
[;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, .]
[., incrementIterationCount, (, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,]
[=, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (]
[;, manager, ., fireIterationStartedEvent, (, event, ), ;, state, ., update, (, ), ;, state, ., refineSolution, (, x, )]
[,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, manager, .]
[,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, manager, ., fireIterationStartedEvent, (, event, ), ;, state]
[., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, manager, ., fireIterationStartedEvent, (]
[,, b, ,, state, ., getNormOfResidual, (, ), ), ;, manager, ., fireIterationStartedEvent, (, event, ), ;, state, ., update]
[,, state, ., getNormOfResidual, (, ), ), ;, manager, ., fireIterationStartedEvent, (, event, ), ;, state, ., update, (, )]
[), ;, manager, ., fireIterationStartedEvent, (, event, ), ;, state, ., update, (, ), ;, state, ., refineSolution, (, x]
[., getNormOfResidual, (, ), ), ;, manager, ., fireIterationStartedEvent, (, event, ), ;, state, ., update, (, ), ;, state]
[;, state, ., update, (, ), ;, state, ., refineSolution, (, x, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this]
[., fireIterationStartedEvent, (, event, ), ;, state, ., update, (, ), ;, state, ., refineSolution, (, x, ), ;, event]
[), ;, state, ., update, (, ), ;, state, ., refineSolution, (, x, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (]
[;, state, ., refineSolution, (, x, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, )]
[., update, (, ), ;, state, ., refineSolution, (, x, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager]
[;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, .]
[., refineSolution, (, x, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x]
[), ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state]
[=, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (]
[;, manager, ., fireIterationPerformedEvent, (, event, ), ;, }, while, (, !, state, ., hasConverged, (, ), ), ;, }]
[,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, manager, .]
[,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, manager, ., fireIterationPerformedEvent, (, event, ), ;, }]
[., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, manager, ., fireIterationPerformedEvent, (]
[,, b, ,, state, ., getNormOfResidual, (, ), ), ;, manager, ., fireIterationPerformedEvent, (, event, ), ;, }, while, (]
[,, state, ., getNormOfResidual, (, ), ), ;, manager, ., fireIterationPerformedEvent, (, event, ), ;, }, while, (, !, state]
[), ;, manager, ., fireIterationPerformedEvent, (, event, ), ;, }, while, (, !, state, ., hasConverged, (, ), ), ;]
[., getNormOfResidual, (, ), ), ;, manager, ., fireIterationPerformedEvent, (, event, ), ;, }, while, (, !, state, ., hasConverged]
[;, }, while, (, !, state, ., hasConverged, (, ), ), ;, }, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,]
[., fireIterationPerformedEvent, (, event, ), ;, }, while, (, !, state, ., hasConverged, (, ), ), ;, }, event, =]
[), ;, }, while, (, !, state, ., hasConverged, (, ), ), ;, }, event, =, new, DefaultIterativeLinearSolverEvent, (, this]
[), ;, }, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,]
[), ;, }, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,]
[., hasConverged, (, ), ), ;, }, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,]
[=, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (]
[;, manager, ., fireTerminationEvent, (, event, ), ;, return, x, ;, }, @, Override, public, RealVector, solveInPlace, (, final, RealLinearOperator]
[,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, manager, .]
[,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, manager, ., fireTerminationEvent, (, event, ), ;, return]
[., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, manager, ., fireTerminationEvent, (]
[,, b, ,, state, ., getNormOfResidual, (, ), ), ;, manager, ., fireTerminationEvent, (, event, ), ;, return, x, ;]
[,, state, ., getNormOfResidual, (, ), ), ;, manager, ., fireTerminationEvent, (, event, ), ;, return, x, ;, }, @]
[), ;, manager, ., fireTerminationEvent, (, event, ), ;, return, x, ;, }, @, Override, public, RealVector, solveInPlace, (, final]
[., getNormOfResidual, (, ), ), ;, manager, ., fireTerminationEvent, (, event, ), ;, return, x, ;, }, @, Override, public]
[;, return, x, ;, }, @, Override, public, RealVector, solveInPlace, (, final, RealLinearOperator, a, ,, final, RealVector, b, ,, final]
[., fireTerminationEvent, (, event, ), ;, return, x, ;, }, @, Override, public, RealVector, solveInPlace, (, final, RealLinearOperator, a, ,]
[), ;, return, x, ;, }, @, Override, public, RealVector, solveInPlace, (, final, RealLinearOperator, a, ,, final, RealVector, b, ,]
[;, }, @, Override, public, RealVector, solveInPlace, (, final, RealLinearOperator, a, ,, final, RealVector, b, ,, final, RealVector, x, )]
[;, }, }]
[,, null, ,, b, ,, x, ,, false, ,, 0., ), ;, }, }]
[,, b, ,, x, ,, false, ,, 0., ), ;, }, }]
[,, x, ,, false, ,, 0., ), ;, }, }]
[,, false, ,, 0., ), ;, }, }]
[,, 0., ), ;, }, }]
[), ;, }, }]
