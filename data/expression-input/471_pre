[Arrays, ;, import, java, ., util, ., List, ;, public, final, class, PathUtil, {, private, static, final, CharMatcher, SLASH_MATCHER, =]
[Arrays, ;, import, java, ., util, ., List, ;, public, final, class, PathUtil, {, private, static, final, CharMatcher, SLASH_MATCHER, =]
[., util, ., List, ;, public, final, class, PathUtil, {, private, static, final, CharMatcher, SLASH_MATCHER, =, CharMatcher, ., is, (]
[{, private, static, final, CharMatcher, SLASH_MATCHER, =, CharMatcher, ., is, (, '/', ), ;, private, static, final, CharMatcher, NON_SLASH_MATCHER, =]
[{, private, static, final, CharMatcher, SLASH_MATCHER, =, CharMatcher, ., is, (, '/', ), ;, private, static, final, CharMatcher, NON_SLASH_MATCHER, =]
[CharMatcher, SLASH_MATCHER, =, CharMatcher, ., is, (, '/', ), ;, private, static, final, CharMatcher, NON_SLASH_MATCHER, =, CharMatcher, ., isNot, (]
[isNot, (, '/', ), ;, private, PathUtil, (, ), {, }, public, static, String, collapseDots, (, String, path, ), {]
['/', ), ;, private, PathUtil, (, ), {, }, public, static, String, collapseDots, (, String, path, ), {, path, =]
[;, private, PathUtil, (, ), {, }, public, static, String, collapseDots, (, String, path, ), {, path, =, removeExtraneousSlashes, (]
[{, }, public, static, String, collapseDots, (, String, path, ), {, path, =, removeExtraneousSlashes, (, path, ), ;, if, (]
[}, public, static, String, collapseDots, (, String, path, ), {, path, =, removeExtraneousSlashes, (, path, ), ;, if, (, !]
[}, public, static, String, collapseDots, (, String, path, ), {, path, =, removeExtraneousSlashes, (, path, ), ;, if, (, !]
[collapseDots, (, String, path, ), {, path, =, removeExtraneousSlashes, (, path, ), ;, if, (, !, path, ., contains, (]
[{, path, =, removeExtraneousSlashes, (, path, ), ;, if, (, !, path, ., contains, (, ".", ), ), {, return]
[if, (, !, path, ., contains, (, ".", ), ), {, return, path, ;, }, String, [, ], srcFragments, =]
[if, (, !, path, ., contains, (, ".", ), ), {, return, path, ;, }, String, [, ], srcFragments, =]
[., contains, (, ".", ), ), {, return, path, ;, }, String, [, ], srcFragments, =, path, ., split, (]
[;, }, String, [, ], srcFragments, =, path, ., split, (, "/", ), ;, List, <, String, >, dstFragments, =]
[;, }, String, [, ], srcFragments, =, path, ., split, (, "/", ), ;, List, <, String, >, dstFragments, =]
["/", ), ;, List, <, String, >, dstFragments, =, Lists, ., newArrayList, (, ), ;, for, (, String, fragment, :]
[String, >, dstFragments, =, Lists, ., newArrayList, (, ), ;, for, (, String, fragment, :, srcFragments, ), {, if, (]
[String, >, dstFragments, =, Lists, ., newArrayList, (, ), ;, for, (, String, fragment, :, srcFragments, ), {, if, (]
[Lists, ., newArrayList, (, ), ;, for, (, String, fragment, :, srcFragments, ), {, if, (, fragment, ., equals, (]
[for, (, String, fragment, :, srcFragments, ), {, if, (, fragment, ., equals, (, "..", ), ), {, if, (]
[(, String, fragment, :, srcFragments, ), {, if, (, fragment, ., equals, (, "..", ), ), {, if, (, !]
[(, String, fragment, :, srcFragments, ), {, if, (, fragment, ., equals, (, "..", ), ), {, if, (, !]
[if, (, fragment, ., equals, (, "..", ), ), {, if, (, !, dstFragments, ., isEmpty, (, ), ), {]
[if, (, fragment, ., equals, (, "..", ), ), {, if, (, !, dstFragments, ., isEmpty, (, ), ), {]
[equals, (, "..", ), ), {, if, (, !, dstFragments, ., isEmpty, (, ), ), {, dstFragments, ., remove, (]
[equals, (, "..", ), ), {, if, (, !, dstFragments, ., isEmpty, (, ), ), {, dstFragments, ., remove, (]
[equals, (, "..", ), ), {, if, (, !, dstFragments, ., isEmpty, (, ), ), {, dstFragments, ., remove, (]
[if, (, !, dstFragments, ., isEmpty, (, ), ), {, dstFragments, ., remove, (, dstFragments, ., size, (, ), -]
[), {, dstFragments, ., remove, (, dstFragments, ., size, (, ), -, 1, ), ;, }, }, else, if, (]
[{, dstFragments, ., remove, (, dstFragments, ., size, (, ), -, 1, ), ;, }, }, else, if, (, !]
[{, dstFragments, ., remove, (, dstFragments, ., size, (, ), -, 1, ), ;, }, }, else, if, (, !]
[(, dstFragments, ., size, (, ), -, 1, ), ;, }, }, else, if, (, !, fragment, ., equals, (]
[(, ), -, 1, ), ;, }, }, else, if, (, !, fragment, ., equals, (, ".", ), ), {]
[(, ), -, 1, ), ;, }, }, else, if, (, !, fragment, ., equals, (, ".", ), ), {]
[), ;, }, }, else, if, (, !, fragment, ., equals, (, ".", ), ), {, dstFragments, ., add, (]
[!, fragment, ., equals, (, ".", ), ), {, dstFragments, ., add, (, fragment, ), ;, }, }, if, (]
[!, fragment, ., equals, (, ".", ), ), {, dstFragments, ., add, (, fragment, ), ;, }, }, if, (]
[!, fragment, ., equals, (, ".", ), ), {, dstFragments, ., add, (, fragment, ), ;, }, }, if, (]
[!, fragment, ., equals, (, ".", ), ), {, dstFragments, ., add, (, fragment, ), ;, }, }, if, (]
[), ), {, dstFragments, ., add, (, fragment, ), ;, }, }, if, (, dstFragments, ., size, (, ), ==]
[{, dstFragments, ., add, (, fragment, ), ;, }, }, if, (, dstFragments, ., size, (, ), ==, 1, &&]
[{, dstFragments, ., add, (, fragment, ), ;, }, }, if, (, dstFragments, ., size, (, ), ==, 1, &&]
[{, dstFragments, ., add, (, fragment, ), ;, }, }, if, (, dstFragments, ., size, (, ), ==, 1, &&]
[(, fragment, ), ;, }, }, if, (, dstFragments, ., size, (, ), ==, 1, &&, dstFragments, ., get, (]
[., size, (, ), ==, 1, &&, dstFragments, ., get, (, 0, ), ., isEmpty, (, ), ), {, return]
[==, 1, &&, dstFragments, ., get, (, 0, ), ., isEmpty, (, ), ), {, return, "/", ;, }, return]
[==, 1, &&, dstFragments, ., get, (, 0, ), ., isEmpty, (, ), ), {, return, "/", ;, }, return]
[==, 1, &&, dstFragments, ., get, (, 0, ), ., isEmpty, (, ), ), {, return, "/", ;, }, return]
[., get, (, 0, ), ., isEmpty, (, ), ), {, return, "/", ;, }, return, Joiner, ., on, (]
[., isEmpty, (, ), ), {, return, "/", ;, }, return, Joiner, ., on, (, "/", ), ., join, (]
[on, (, "/", ), ., join, (, dstFragments, ), ;, }, static, boolean, isAbsolute, (, String, path, ), {, return]
[on, (, "/", ), ., join, (, dstFragments, ), ;, }, static, boolean, isAbsolute, (, String, path, ), {, return]
[., join, (, dstFragments, ), ;, }, static, boolean, isAbsolute, (, String, path, ), {, return, path, ., startsWith, (]
[return, path, ., startsWith, (, "/", ), ;, }, static, String, removeExtraneousSlashes, (, String, s, ), {, int, lastNonSlash, =]
[return, path, ., startsWith, (, "/", ), ;, }, static, String, removeExtraneousSlashes, (, String, s, ), {, int, lastNonSlash, =]
[(, "/", ), ;, }, static, String, removeExtraneousSlashes, (, String, s, ), {, int, lastNonSlash, =, NON_SLASH_MATCHER, ., lastIndexIn, (]
[static, String, removeExtraneousSlashes, (, String, s, ), {, int, lastNonSlash, =, NON_SLASH_MATCHER, ., lastIndexIn, (, s, ), ;, if, (]
[static, String, removeExtraneousSlashes, (, String, s, ), {, int, lastNonSlash, =, NON_SLASH_MATCHER, ., lastIndexIn, (, s, ), ;, if, (]
[removeExtraneousSlashes, (, String, s, ), {, int, lastNonSlash, =, NON_SLASH_MATCHER, ., lastIndexIn, (, s, ), ;, if, (, lastNonSlash, !=]
[(, String, s, ), {, int, lastNonSlash, =, NON_SLASH_MATCHER, ., lastIndexIn, (, s, ), ;, if, (, lastNonSlash, !=, -]
[), {, int, lastNonSlash, =, NON_SLASH_MATCHER, ., lastIndexIn, (, s, ), ;, if, (, lastNonSlash, !=, -, 1, ), {]
[int, lastNonSlash, =, NON_SLASH_MATCHER, ., lastIndexIn, (, s, ), ;, if, (, lastNonSlash, !=, -, 1, ), {, s, =]
[int, lastNonSlash, =, NON_SLASH_MATCHER, ., lastIndexIn, (, s, ), ;, if, (, lastNonSlash, !=, -, 1, ), {, s, =]
[., lastIndexIn, (, s, ), ;, if, (, lastNonSlash, !=, -, 1, ), {, s, =, s, ., substring, (]
[(, s, ), ;, if, (, lastNonSlash, !=, -, 1, ), {, s, =, s, ., substring, (, 0, ,]
[(, s, ), ;, if, (, lastNonSlash, !=, -, 1, ), {, s, =, s, ., substring, (, 0, ,]
[), ;, if, (, lastNonSlash, !=, -, 1, ), {, s, =, s, ., substring, (, 0, ,, lastNonSlash, +]
[!=, -, 1, ), {, s, =, s, ., substring, (, 0, ,, lastNonSlash, +, 1, ), ;, }, return]
[!=, -, 1, ), {, s, =, s, ., substring, (, 0, ,, lastNonSlash, +, 1, ), ;, }, return]
[{, s, =, s, ., substring, (, 0, ,, lastNonSlash, +, 1, ), ;, }, return, SLASH_MATCHER, ., collapseFrom, (]
[=, s, ., substring, (, 0, ,, lastNonSlash, +, 1, ), ;, }, return, SLASH_MATCHER, ., collapseFrom, (, s, ,]
[SLASH_MATCHER, ., collapseFrom, (, s, ,, '/', ), ;, }, public, static, String, makeAbsolute, (, String, path, ), {, return]
[collapseFrom, (, s, ,, '/', ), ;, }, public, static, String, makeAbsolute, (, String, path, ), {, return, makeAbsolute, (]
[s, ,, '/', ), ;, }, public, static, String, makeAbsolute, (, String, path, ), {, return, makeAbsolute, (, path, ,]
[s, ,, '/', ), ;, }, public, static, String, makeAbsolute, (, String, path, ), {, return, makeAbsolute, (, path, ,]
[;, }, public, static, String, makeAbsolute, (, String, path, ), {, return, makeAbsolute, (, path, ,, System, ., getProperty, (]
[(, "user.dir", ), ), ;, }, public, static, String, makeAbsolute, (, String, path, ,, String, rootPath, ), {, if, (]
["user.dir", ), ), ;, }, public, static, String, makeAbsolute, (, String, path, ,, String, rootPath, ), {, if, (, !]
[), ;, }, public, static, String, makeAbsolute, (, String, path, ,, String, rootPath, ), {, if, (, !, isAbsolute, (]
[static, String, makeAbsolute, (, String, path, ,, String, rootPath, ), {, if, (, !, isAbsolute, (, path, ), ), {]
[makeAbsolute, (, String, path, ,, String, rootPath, ), {, if, (, !, isAbsolute, (, path, ), ), {, path, =]
[makeAbsolute, (, String, path, ,, String, rootPath, ), {, if, (, !, isAbsolute, (, path, ), ), {, path, =]
[makeAbsolute, (, String, path, ,, String, rootPath, ), {, if, (, !, isAbsolute, (, path, ), ), {, path, =]
[String, path, ,, String, rootPath, ), {, if, (, !, isAbsolute, (, path, ), ), {, path, =, rootPath, +]
[,, String, rootPath, ), {, if, (, !, isAbsolute, (, path, ), ), {, path, =, rootPath, +, "/", +]
[{, if, (, !, isAbsolute, (, path, ), ), {, path, =, rootPath, +, "/", +, path, ;, }, return]
[(, !, isAbsolute, (, path, ), ), {, path, =, rootPath, +, "/", +, path, ;, }, return, collapseDots, (]
[collapseDots, (, path, ), ;, }, public, static, String, makeRelative, (, String, basePath, ,, String, targetPath, ), {, if, (]
[collapseDots, (, path, ), ;, }, public, static, String, makeRelative, (, String, basePath, ,, String, targetPath, ), {, if, (]
[path, ), ;, }, public, static, String, makeRelative, (, String, basePath, ,, String, targetPath, ), {, if, (, isAbsolute, (]
[}, public, static, String, makeRelative, (, String, basePath, ,, String, targetPath, ), {, if, (, isAbsolute, (, basePath, ), !=]
[static, String, makeRelative, (, String, basePath, ,, String, targetPath, ), {, if, (, isAbsolute, (, basePath, ), !=, isAbsolute, (]
[basePath, ,, String, targetPath, ), {, if, (, isAbsolute, (, basePath, ), !=, isAbsolute, (, targetPath, ), ), {, throw]
[targetPath, ), {, if, (, isAbsolute, (, basePath, ), !=, isAbsolute, (, targetPath, ), ), {, throw, new, IllegalArgumentException, (]
[targetPath, ), {, if, (, isAbsolute, (, basePath, ), !=, isAbsolute, (, targetPath, ), ), {, throw, new, IllegalArgumentException, (]
[targetPath, ), {, if, (, isAbsolute, (, basePath, ), !=, isAbsolute, (, targetPath, ), ), {, throw, new, IllegalArgumentException, (]
[targetPath, ), {, if, (, isAbsolute, (, basePath, ), !=, isAbsolute, (, targetPath, ), ), {, throw, new, IllegalArgumentException, (]
[targetPath, ), {, if, (, isAbsolute, (, basePath, ), !=, isAbsolute, (, targetPath, ), ), {, throw, new, IllegalArgumentException, (]
[targetPath, ), {, if, (, isAbsolute, (, basePath, ), !=, isAbsolute, (, targetPath, ), ), {, throw, new, IllegalArgumentException, (]
[{, if, (, isAbsolute, (, basePath, ), !=, isAbsolute, (, targetPath, ), ), {, throw, new, IllegalArgumentException, (, "Paths must both be relative or both absolute.\n", +]
[(, isAbsolute, (, basePath, ), !=, isAbsolute, (, targetPath, ), ), {, throw, new, IllegalArgumentException, (, "Paths must both be relative or both absolute.\n", +, "  basePath: ", +]
[(, basePath, ), !=, isAbsolute, (, targetPath, ), ), {, throw, new, IllegalArgumentException, (, "Paths must both be relative or both absolute.\n", +, "  basePath: ", +, basePath, +]
[), !=, isAbsolute, (, targetPath, ), ), {, throw, new, IllegalArgumentException, (, "Paths must both be relative or both absolute.\n", +, "  basePath: ", +, basePath, +, "\n", +]
[isAbsolute, (, targetPath, ), ), {, throw, new, IllegalArgumentException, (, "Paths must both be relative or both absolute.\n", +, "  basePath: ", +, basePath, +, "\n", +, "  targetPath: ", +]
[), {, throw, new, IllegalArgumentException, (, "Paths must both be relative or both absolute.\n", +, "  basePath: ", +, basePath, +, "\n", +, "  targetPath: ", +, targetPath, ), ;, }]
[throw, new, IllegalArgumentException, (, "Paths must both be relative or both absolute.\n", +, "  basePath: ", +, basePath, +, "\n", +, "  targetPath: ", +, targetPath, ), ;, }, basePath, =]
[IllegalArgumentException, (, "Paths must both be relative or both absolute.\n", +, "  basePath: ", +, basePath, +, "\n", +, "  targetPath: ", +, targetPath, ), ;, }, basePath, =, collapseDots, (]
[+, "  basePath: ", +, basePath, +, "\n", +, "  targetPath: ", +, targetPath, ), ;, }, basePath, =, collapseDots, (, basePath, ), ;]
[+, basePath, +, "\n", +, "  targetPath: ", +, targetPath, ), ;, }, basePath, =, collapseDots, (, basePath, ), ;, targetPath, =]
[+, "\n", +, "  targetPath: ", +, targetPath, ), ;, }, basePath, =, collapseDots, (, basePath, ), ;, targetPath, =, collapseDots, (]
[}, basePath, =, collapseDots, (, basePath, ), ;, targetPath, =, collapseDots, (, targetPath, ), ;, String, [, ], baseFragments, =]
[}, basePath, =, collapseDots, (, basePath, ), ;, targetPath, =, collapseDots, (, targetPath, ), ;, String, [, ], baseFragments, =]
[(, basePath, ), ;, targetPath, =, collapseDots, (, targetPath, ), ;, String, [, ], baseFragments, =, basePath, ., split, (]
[targetPath, ), ;, String, [, ], baseFragments, =, basePath, ., split, (, "/", ), ;, String, [, ], targetFragments, =]
[targetPath, ), ;, String, [, ], baseFragments, =, basePath, ., split, (, "/", ), ;, String, [, ], targetFragments, =]
[[, ], baseFragments, =, basePath, ., split, (, "/", ), ;, String, [, ], targetFragments, =, targetPath, ., split, (]
[split, (, "/", ), ;, String, [, ], targetFragments, =, targetPath, ., split, (, "/", ), ;, int, i, =]
[(, "/", ), ;, String, [, ], targetFragments, =, targetPath, ., split, (, "/", ), ;, int, i, =, -]
[String, [, ], targetFragments, =, targetPath, ., split, (, "/", ), ;, int, i, =, -, 1, ;, do, {]
[], targetFragments, =, targetPath, ., split, (, "/", ), ;, int, i, =, -, 1, ;, do, {, i, +=]
[., split, (, "/", ), ;, int, i, =, -, 1, ;, do, {, i, +=, 1, ;, if, (]
[., split, (, "/", ), ;, int, i, =, -, 1, ;, do, {, i, +=, 1, ;, if, (]
[., split, (, "/", ), ;, int, i, =, -, 1, ;, do, {, i, +=, 1, ;, if, (]
[(, "/", ), ;, int, i, =, -, 1, ;, do, {, i, +=, 1, ;, if, (, i, ==]
[(, "/", ), ;, int, i, =, -, 1, ;, do, {, i, +=, 1, ;, if, (, i, ==]
[int, i, =, -, 1, ;, do, {, i, +=, 1, ;, if, (, i, ==, baseFragments, ., length, &&]
[int, i, =, -, 1, ;, do, {, i, +=, 1, ;, if, (, i, ==, baseFragments, ., length, &&]
[=, -, 1, ;, do, {, i, +=, 1, ;, if, (, i, ==, baseFragments, ., length, &&, i, ==]
[=, -, 1, ;, do, {, i, +=, 1, ;, if, (, i, ==, baseFragments, ., length, &&, i, ==]
[i, +=, 1, ;, if, (, i, ==, baseFragments, ., length, &&, i, ==, targetFragments, ., length, ), {, return]
[i, ==, baseFragments, ., length, &&, i, ==, targetFragments, ., length, ), {, return, ".", ;, }, else, if, (]
[i, ==, baseFragments, ., length, &&, i, ==, targetFragments, ., length, ), {, return, ".", ;, }, else, if, (]
[baseFragments, ., length, &&, i, ==, targetFragments, ., length, ), {, return, ".", ;, }, else, if, (, i, ==]
[baseFragments, ., length, &&, i, ==, targetFragments, ., length, ), {, return, ".", ;, }, else, if, (, i, ==]
[targetFragments, ., length, ), {, return, ".", ;, }, else, if, (, i, ==, baseFragments, ., length, ), {, return]
[targetFragments, ., length, ), {, return, ".", ;, }, else, if, (, i, ==, baseFragments, ., length, ), {, return]
[targetFragments, ., length, ), {, return, ".", ;, }, else, if, (, i, ==, baseFragments, ., length, ), {, return]
[{, return, ".", ;, }, else, if, (, i, ==, baseFragments, ., length, ), {, return, Joiner, ., on, (]
[else, if, (, i, ==, baseFragments, ., length, ), {, return, Joiner, ., on, (, "/", ), ., join, (]
[else, if, (, i, ==, baseFragments, ., length, ), {, return, Joiner, ., on, (, "/", ), ., join, (]
[==, baseFragments, ., length, ), {, return, Joiner, ., on, (, "/", ), ., join, (, Lists, ., newArrayList, (]
[==, baseFragments, ., length, ), {, return, Joiner, ., on, (, "/", ), ., join, (, Lists, ., newArrayList, (]
[==, baseFragments, ., length, ), {, return, Joiner, ., on, (, "/", ), ., join, (, Lists, ., newArrayList, (]
[), {, return, Joiner, ., on, (, "/", ), ., join, (, Lists, ., newArrayList, (, Arrays, ., asList, (]
[on, (, "/", ), ., join, (, Lists, ., newArrayList, (, Arrays, ., asList, (, targetFragments, ), ., listIterator, (]
[newArrayList, (, Arrays, ., asList, (, targetFragments, ), ., listIterator, (, i, ), ), ), ;, }, else, if, (]
[newArrayList, (, Arrays, ., asList, (, targetFragments, ), ., listIterator, (, i, ), ), ), ;, }, else, if, (]
[Arrays, ., asList, (, targetFragments, ), ., listIterator, (, i, ), ), ), ;, }, else, if, (, i, ==]
[Arrays, ., asList, (, targetFragments, ), ., listIterator, (, i, ), ), ), ;, }, else, if, (, i, ==]
[., listIterator, (, i, ), ), ), ;, }, else, if, (, i, ==, targetFragments, ., length, ), {, return]
[., listIterator, (, i, ), ), ), ;, }, else, if, (, i, ==, targetFragments, ., length, ), {, return]
[., listIterator, (, i, ), ), ), ;, }, else, if, (, i, ==, targetFragments, ., length, ), {, return]
[), ), ), ;, }, else, if, (, i, ==, targetFragments, ., length, ), {, return, Strings, ., repeat, (]
[), ;, }, else, if, (, i, ==, targetFragments, ., length, ), {, return, Strings, ., repeat, (, "../", ,]
[), ;, }, else, if, (, i, ==, targetFragments, ., length, ), {, return, Strings, ., repeat, (, "../", ,]
[), ;, }, else, if, (, i, ==, targetFragments, ., length, ), {, return, Strings, ., repeat, (, "../", ,]
[), ;, }, else, if, (, i, ==, targetFragments, ., length, ), {, return, Strings, ., repeat, (, "../", ,]
[if, (, i, ==, targetFragments, ., length, ), {, return, Strings, ., repeat, (, "../", ,, baseFragments, ., length, -]
[i, ==, targetFragments, ., length, ), {, return, Strings, ., repeat, (, "../", ,, baseFragments, ., length, -, i, -]
[., length, ), {, return, Strings, ., repeat, (, "../", ,, baseFragments, ., length, -, i, -, 1, ), +]
[., repeat, (, "../", ,, baseFragments, ., length, -, i, -, 1, ), +, "..", ;, }, }, while, (]
[., repeat, (, "../", ,, baseFragments, ., length, -, i, -, 1, ), +, "..", ;, }, }, while, (]
[., repeat, (, "../", ,, baseFragments, ., length, -, i, -, 1, ), +, "..", ;, }, }, while, (]
[(, "../", ,, baseFragments, ., length, -, i, -, 1, ), +, "..", ;, }, }, while, (, baseFragments, []
[length, -, i, -, 1, ), +, "..", ;, }, }, while, (, baseFragments, [, i, ], ., equals, (]
[length, -, i, -, 1, ), +, "..", ;, }, }, while, (, baseFragments, [, i, ], ., equals, (]
[i, -, 1, ), +, "..", ;, }, }, while, (, baseFragments, [, i, ], ., equals, (, targetFragments, []
[;, }, }, while, (, baseFragments, [, i, ], ., equals, (, targetFragments, [, i, ], ), ), ;, return]
[;, }, }, while, (, baseFragments, [, i, ], ., equals, (, targetFragments, [, i, ], ), ), ;, return]
[;, }, }, while, (, baseFragments, [, i, ], ., equals, (, targetFragments, [, i, ], ), ), ;, return]
[(, baseFragments, [, i, ], ., equals, (, targetFragments, [, i, ], ), ), ;, return, Strings, ., repeat, (]
[[, i, ], ., equals, (, targetFragments, [, i, ], ), ), ;, return, Strings, ., repeat, (, "../", ,]
[[, i, ], ., equals, (, targetFragments, [, i, ], ), ), ;, return, Strings, ., repeat, (, "../", ,]
[[, i, ], ., equals, (, targetFragments, [, i, ], ), ), ;, return, Strings, ., repeat, (, "../", ,]
[equals, (, targetFragments, [, i, ], ), ), ;, return, Strings, ., repeat, (, "../", ,, baseFragments, ., length, -]
[[, i, ], ), ), ;, return, Strings, ., repeat, (, "../", ,, baseFragments, ., length, -, i, ), +]
[[, i, ], ), ), ;, return, Strings, ., repeat, (, "../", ,, baseFragments, ., length, -, i, ), +]
[[, i, ], ), ), ;, return, Strings, ., repeat, (, "../", ,, baseFragments, ., length, -, i, ), +]
[), ;, return, Strings, ., repeat, (, "../", ,, baseFragments, ., length, -, i, ), +, Joiner, ., on, (]
[repeat, (, "../", ,, baseFragments, ., length, -, i, ), +, Joiner, ., on, (, "/", ), ., join, (]
[repeat, (, "../", ,, baseFragments, ., length, -, i, ), +, Joiner, ., on, (, "/", ), ., join, (]
[baseFragments, ., length, -, i, ), +, Joiner, ., on, (, "/", ), ., join, (, Lists, ., newArrayList, (]
[baseFragments, ., length, -, i, ), +, Joiner, ., on, (, "/", ), ., join, (, Lists, ., newArrayList, (]
[baseFragments, ., length, -, i, ), +, Joiner, ., on, (, "/", ), ., join, (, Lists, ., newArrayList, (]
[i, ), +, Joiner, ., on, (, "/", ), ., join, (, Lists, ., newArrayList, (, Arrays, ., asList, (]
[on, (, "/", ), ., join, (, Lists, ., newArrayList, (, Arrays, ., asList, (, targetFragments, ), ., listIterator, (]
