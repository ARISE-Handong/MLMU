[math3, ., util, ., NumberTransformer, ;, public, class, ListUnivariateImpl, extends, DescriptiveStatistics, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[., util, ., NumberTransformer, ;, public, class, ListUnivariateImpl, extends, DescriptiveStatistics, implements, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[8837442489133392138L, ;, protected, List, <, Object, >, list, ;, protected, NumberTransformer, transformer, ;, public, ListUnivariateImpl, (, ), {, this, (]
[<, Object, >, (, ), ), ;, }, public, ListUnivariateImpl, (, List, <, Object, >, list, ), {, this, (]
[>, (, ), ), ;, }, public, ListUnivariateImpl, (, List, <, Object, >, list, ), {, this, (, list, ,]
[), ;, }, public, ListUnivariateImpl, (, List, <, Object, >, list, ,, NumberTransformer, transformer, ), {, super, (, ), ;]
[), ;, }, public, ListUnivariateImpl, (, List, <, Object, >, list, ,, NumberTransformer, transformer, ), {, super, (, ), ;]
[ListUnivariateImpl, (, List, <, Object, >, list, ,, NumberTransformer, transformer, ), {, super, (, ), ;, this, ., list, =]
[List, <, Object, >, list, ,, NumberTransformer, transformer, ), {, super, (, ), ;, this, ., list, =, list, ;]
[List, <, Object, >, list, ,, NumberTransformer, transformer, ), {, super, (, ), ;, this, ., list, =, list, ;]
[list, ,, NumberTransformer, transformer, ), {, super, (, ), ;, this, ., list, =, list, ;, this, ., transformer, =]
[this, ., transformer, =, transformer, ;, }, @, Override, public, double, [, ], getValues, (, ), {, int, length, =]
[this, ., transformer, =, transformer, ;, }, @, Override, public, double, [, ], getValues, (, ), {, int, length, =]
[double, [, ], getValues, (, ), {, int, length, =, list, ., size, (, ), ;, final, int, wSize, =]
[{, int, length, =, list, ., size, (, ), ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (]
[{, int, length, =, list, ., size, (, ), ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (]
[{, int, length, =, list, ., size, (, ), ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (]
[length, =, list, ., size, (, ), ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=]
[length, =, list, ., size, (, ), ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=]
[size, (, ), ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&]
[size, (, ), ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&]
[), ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&, wSize, <]
[), ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&, wSize, <]
[(, ), ;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&, wSize, <, list, ., size, (, ), ), {]
[;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&, wSize, <, list, ., size, (, ), ), {, length, =]
[;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&, wSize, <, list, ., size, (, ), ), {, length, =]
[;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&, wSize, <, list, ., size, (, ), ), {, length, =]
[., INFINITE_WINDOW, &&, wSize, <, list, ., size, (, ), ), {, length, =, list, ., size, (, ), -]
[., INFINITE_WINDOW, &&, wSize, <, list, ., size, (, ), ), {, length, =, list, ., size, (, ), -]
[<, list, ., size, (, ), ), {, length, =, list, ., size, (, ), -, FastMath, ., max, (]
[., size, (, ), ), {, length, =, list, ., size, (, ), -, FastMath, ., max, (, 0, ,]
[., size, (, ), ), {, length, =, list, ., size, (, ), -, FastMath, ., max, (, 0, ,]
[., size, (, ), ), {, length, =, list, ., size, (, ), -, FastMath, ., max, (, 0, ,]
[length, =, list, ., size, (, ), -, FastMath, ., max, (, 0, ,, list, ., size, (, ), -]
[., max, (, 0, ,, list, ., size, (, ), -, wSize, ), ;, }, double, [, ], copiedArray, =]
[0, ,, list, ., size, (, ), -, wSize, ), ;, }, double, [, ], copiedArray, =, new, double, []
[wSize, ), ;, }, double, [, ], copiedArray, =, new, double, [, length, ], ;, for, (, int, i, =]
[;, }, double, [, ], copiedArray, =, new, double, [, length, ], ;, for, (, int, i, =, 0, ;]
[;, }, double, [, ], copiedArray, =, new, double, [, length, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], copiedArray, =, new, double, [, length, ], ;, for, (, int, i, =, 0, ;, i, <]
[double, [, ], copiedArray, =, new, double, [, length, ], ;, for, (, int, i, =, 0, ;, i, <]
[=, new, double, [, length, ], ;, for, (, int, i, =, 0, ;, i, <, copiedArray, ., length, ;]
[=, new, double, [, length, ], ;, for, (, int, i, =, 0, ;, i, <, copiedArray, ., length, ;]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, copiedArray, ., length, ;, i, ++, ), {]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, copiedArray, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, copiedArray, ., length, ;, i, ++, ), {, copiedArray, []
[int, i, =, 0, ;, i, <, copiedArray, ., length, ;, i, ++, ), {, copiedArray, [, i, ], =]
[=, 0, ;, i, <, copiedArray, ., length, ;, i, ++, ), {, copiedArray, [, i, ], =, getElement, (]
[copiedArray, ., length, ;, i, ++, ), {, copiedArray, [, i, ], =, getElement, (, i, ), ;, }, return]
[), ;, }, return, copiedArray, ;, }, @, Override, public, double, getElement, (, int, index, ), {, double, value, =]
[), ;, }, return, copiedArray, ;, }, @, Override, public, double, getElement, (, int, index, ), {, double, value, =]
[@, Override, public, double, getElement, (, int, index, ), {, double, value, =, Double, ., NaN, ;, int, calcIndex, =]
[int, index, ), {, double, value, =, Double, ., NaN, ;, int, calcIndex, =, index, ;, final, int, wSize, =]
[=, Double, ., NaN, ;, int, calcIndex, =, index, ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (]
[=, Double, ., NaN, ;, int, calcIndex, =, index, ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (]
[=, Double, ., NaN, ;, int, calcIndex, =, index, ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (]
[., NaN, ;, int, calcIndex, =, index, ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=]
[., NaN, ;, int, calcIndex, =, index, ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=]
[calcIndex, =, index, ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&]
[calcIndex, =, index, ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&]
[index, ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&, wSize, <]
[index, ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&, wSize, <]
[(, ), ;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&, wSize, <, list, ., size, (, ), ), {]
[;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&, wSize, <, list, ., size, (, ), ), {, calcIndex, =]
[;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&, wSize, <, list, ., size, (, ), ), {, calcIndex, =]
[if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&, wSize, <, list, ., size, (, ), ), {, calcIndex, =, (]
[if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&, wSize, <, list, ., size, (, ), ), {, calcIndex, =, (]
[if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&, wSize, <, list, ., size, (, ), ), {, calcIndex, =, (]
[INFINITE_WINDOW, &&, wSize, <, list, ., size, (, ), ), {, calcIndex, =, (, list, ., size, (, ), -]
[<, list, ., size, (, ), ), {, calcIndex, =, (, list, ., size, (, ), -, wSize, ), +]
[), ), {, calcIndex, =, (, list, ., size, (, ), -, wSize, ), +, index, ;, }, try, {]
[{, calcIndex, =, (, list, ., size, (, ), -, wSize, ), +, index, ;, }, try, {, value, =]
[{, calcIndex, =, (, list, ., size, (, ), -, wSize, ), +, index, ;, }, try, {, value, =]
[list, ., size, (, ), -, wSize, ), +, index, ;, }, try, {, value, =, transformer, ., transform, (]
[list, ., size, (, ), -, wSize, ), +, index, ;, }, try, {, value, =, transformer, ., transform, (]
[), -, wSize, ), +, index, ;, }, try, {, value, =, transformer, ., transform, (, list, ., get, (]
[=, transformer, ., transform, (, list, ., get, (, calcIndex, ), ), ;, }, catch, (, MathIllegalArgumentException, e, ), {]
[=, transformer, ., transform, (, list, ., get, (, calcIndex, ), ), ;, }, catch, (, MathIllegalArgumentException, e, ), {]
[(, calcIndex, ), ), ;, }, catch, (, MathIllegalArgumentException, e, ), {, e, ., printStackTrace, (, ), ;, }, return]
[printStackTrace, (, ), ;, }, return, value, ;, }, @, Override, public, long, getN, (, ), {, int, n, =]
[value, ;, }, @, Override, public, long, getN, (, ), {, int, n, =, 0, ;, final, int, wSize, =]
[long, getN, (, ), {, int, n, =, 0, ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (]
[long, getN, (, ), {, int, n, =, 0, ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (]
[(, ), {, int, n, =, 0, ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=]
[(, ), {, int, n, =, 0, ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=]
[;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, ), {, if, (]
[;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, ), {, if, (]
[;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, ), {, if, (]
[(, ), ;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, ), {, if, (, list, ., size, (, ), >]
[if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, ), {, if, (, list, ., size, (, ), >, wSize, ), {]
[wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, ), {, if, (, list, ., size, (, ), >, wSize, ), {, n, =]
[), {, if, (, list, ., size, (, ), >, wSize, ), {, n, =, wSize, ;, }, else, {]
[if, (, list, ., size, (, ), >, wSize, ), {, n, =, wSize, ;, }, else, {, n, =]
[if, (, list, ., size, (, ), >, wSize, ), {, n, =, wSize, ;, }, else, {, n, =]
[{, n, =, wSize, ;, }, else, {, n, =, list, ., size, (, ), ;, }, }, else, {]
[=, wSize, ;, }, else, {, n, =, list, ., size, (, ), ;, }, }, else, {, n, =]
[=, wSize, ;, }, else, {, n, =, list, ., size, (, ), ;, }, }, else, {, n, =]
[list, ., size, (, ), ;, }, }, else, {, n, =, list, ., size, (, ), ;, }, return]
[., size, (, ), ;, }, return, n, ;, }, @, Override, public, void, addValue, (, double, v, ), {]
[., size, (, ), ;, }, return, n, ;, }, @, Override, public, void, addValue, (, double, v, ), {]
[;, }, return, n, ;, }, @, Override, public, void, addValue, (, double, v, ), {, list, ., add, (]
[;, }, return, n, ;, }, @, Override, public, void, addValue, (, double, v, ), {, list, ., add, (]
[;, }, @, Override, public, void, addValue, (, double, v, ), {, list, ., add, (, Double, ., valueOf, (]
[., add, (, Double, ., valueOf, (, v, ), ), ;, }, public, void, addObject, (, Object, o, ), {]
[., add, (, Double, ., valueOf, (, v, ), ), ;, }, public, void, addObject, (, Object, o, ), {]
[., valueOf, (, v, ), ), ;, }, public, void, addObject, (, Object, o, ), {, list, ., add, (]
[Object, o, ), {, list, ., add, (, o, ), ;, }, @, Override, public, void, clear, (, ), {]
[Object, o, ), {, list, ., add, (, o, ), ;, }, @, Override, public, void, clear, (, ), {]
[clear, (, ), ;, }, @, Override, public, double, apply, (, UnivariateStatistic, stat, ), {, double, [, ], v, =]
[clear, (, ), ;, }, @, Override, public, double, apply, (, UnivariateStatistic, stat, ), {, double, [, ], v, =]
[double, apply, (, UnivariateStatistic, stat, ), {, double, [, ], v, =, this, ., getValues, (, ), ;, if, (]
[double, apply, (, UnivariateStatistic, stat, ), {, double, [, ], v, =, this, ., getValues, (, ), ;, if, (]
[(, UnivariateStatistic, stat, ), {, double, [, ], v, =, this, ., getValues, (, ), ;, if, (, v, !=]
[{, double, [, ], v, =, this, ., getValues, (, ), ;, if, (, v, !=, null, ), {, return]
[{, double, [, ], v, =, this, ., getValues, (, ), ;, if, (, v, !=, null, ), {, return]
[v, =, this, ., getValues, (, ), ;, if, (, v, !=, null, ), {, return, stat, ., evaluate, (]
[this, ., getValues, (, ), ;, if, (, v, !=, null, ), {, return, stat, ., evaluate, (, v, ,]
[getValues, (, ), ;, if, (, v, !=, null, ), {, return, stat, ., evaluate, (, v, ,, 0, ,]
[getValues, (, ), ;, if, (, v, !=, null, ), {, return, stat, ., evaluate, (, v, ,, 0, ,]
[!=, null, ), {, return, stat, ., evaluate, (, v, ,, 0, ,, v, ., length, ), ;, }, return]
[!=, null, ), {, return, stat, ., evaluate, (, v, ,, 0, ,, v, ., length, ), ;, }, return]
[,, v, ., length, ), ;, }, return, Double, ., NaN, ;, }, public, NumberTransformer, getTransformer, (, ), {, return]
[;, }, public, NumberTransformer, getTransformer, (, ), {, return, transformer, ;, }, public, void, setTransformer, (, NumberTransformer, transformer, ), {]
[;, }, public, NumberTransformer, getTransformer, (, ), {, return, transformer, ;, }, public, void, setTransformer, (, NumberTransformer, transformer, ), {]
[getTransformer, (, ), {, return, transformer, ;, }, public, void, setTransformer, (, NumberTransformer, transformer, ), {, this, ., transformer, =]
[transformer, ), {, this, ., transformer, =, transformer, ;, }, @, Override, public, void, setWindowSize, (, int, windowSize, ), {]
[transformer, ), {, this, ., transformer, =, transformer, ;, }, @, Override, public, void, setWindowSize, (, int, windowSize, ), {]
[., transformer, =, transformer, ;, }, @, Override, public, void, setWindowSize, (, int, windowSize, ), {, super, ., setWindowSize, (]
[@, Override, public, void, setWindowSize, (, int, windowSize, ), {, super, ., setWindowSize, (, windowSize, ), ;, int, extra, =]
[@, Override, public, void, setWindowSize, (, int, windowSize, ), {, super, ., setWindowSize, (, windowSize, ), ;, int, extra, =]
[@, Override, public, void, setWindowSize, (, int, windowSize, ), {, super, ., setWindowSize, (, windowSize, ), ;, int, extra, =]
[int, windowSize, ), {, super, ., setWindowSize, (, windowSize, ), ;, int, extra, =, list, ., size, (, ), -]
[(, windowSize, ), ;, int, extra, =, list, ., size, (, ), -, windowSize, ;, for, (, int, i, =]
[), ;, int, extra, =, list, ., size, (, ), -, windowSize, ;, for, (, int, i, =, 0, ;]
[), ;, int, extra, =, list, ., size, (, ), -, windowSize, ;, for, (, int, i, =, 0, ;]
[int, extra, =, list, ., size, (, ), -, windowSize, ;, for, (, int, i, =, 0, ;, i, <]
[=, list, ., size, (, ), -, windowSize, ;, for, (, int, i, =, 0, ;, i, <, extra, ;]
[=, list, ., size, (, ), -, windowSize, ;, for, (, int, i, =, 0, ;, i, <, extra, ;]
[(, ), -, windowSize, ;, for, (, int, i, =, 0, ;, i, <, extra, ;, i, ++, ), {]
[(, ), -, windowSize, ;, for, (, int, i, =, 0, ;, i, <, extra, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, extra, ;, i, ++, ), {, list, ., remove, (]
