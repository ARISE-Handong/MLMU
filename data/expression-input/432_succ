[;, private, JSModule, module, ;, final, private, InputId, id, ;, private, final, SourceAst, ast, ;, private, final, Set, <, String]
[;, private, final, Set, <, String, >, requires, =, Sets, ., newHashSet, (, ), ;, private, boolean, generatedDependencyInfoFromSource, =, false]
[., newHashSet, (, ), ;, private, final, Set, <, String, >, requires, =, Sets, ., newHashSet, (, ), ;, private]
[;, private, boolean, generatedDependencyInfoFromSource, =, false, ;, private, transient, AbstractCompiler, compiler, ;, public, CompilerInput, (, SourceAst, ast, ), {, this]
[., newHashSet, (, ), ;, private, boolean, generatedDependencyInfoFromSource, =, false, ;, private, transient, AbstractCompiler, compiler, ;, public, CompilerInput, (, SourceAst]
[;, private, transient, AbstractCompiler, compiler, ;, public, CompilerInput, (, SourceAst, ast, ), {, this, (, ast, ,, ast, ., getSourceFile]
[,, ast, ., getSourceFile, (, ), ., getName, (, ), ,, false, ), ;, }, public, CompilerInput, (, SourceAst, ast]
[,, false, ), ;, }, public, CompilerInput, (, SourceAst, ast, ,, boolean, isExtern, ), {, this, (, ast, ,, ast]
[., getName, (, ), ,, false, ), ;, }, public, CompilerInput, (, SourceAst, ast, ,, boolean, isExtern, ), {, this]
[., getSourceFile, (, ), ., getName, (, ), ,, false, ), ;, }, public, CompilerInput, (, SourceAst, ast, ,, boolean]
[), ;, }, public, CompilerInput, (, SourceAst, ast, ,, boolean, isExtern, ), {, this, (, ast, ,, ast, ., getInputId]
[,, ast, ., getInputId, (, ), ,, isExtern, ), ;, }, public, CompilerInput, (, SourceAst, ast, ,, String, inputId, ,]
[,, isExtern, ), ;, }, public, CompilerInput, (, SourceAst, ast, ,, String, inputId, ,, boolean, isExtern, ), {, this, (]
[., getInputId, (, ), ,, isExtern, ), ;, }, public, CompilerInput, (, SourceAst, ast, ,, String, inputId, ,, boolean, isExtern]
[), ;, }, public, CompilerInput, (, SourceAst, ast, ,, String, inputId, ,, boolean, isExtern, ), {, this, (, ast, ,]
[,, new, InputId, (, inputId, ), ,, isExtern, ), ;, }, public, CompilerInput, (, SourceAst, ast, ,, InputId, inputId, ,]
[,, isExtern, ), ;, }, public, CompilerInput, (, SourceAst, ast, ,, InputId, inputId, ,, boolean, isExtern, ), {, this, .]
[), ,, isExtern, ), ;, }, public, CompilerInput, (, SourceAst, ast, ,, InputId, inputId, ,, boolean, isExtern, ), {, this]
[), ;, }, public, CompilerInput, (, SourceAst, ast, ,, InputId, inputId, ,, boolean, isExtern, ), {, this, ., ast, =]
[=, ast, ;, this, ., id, =, inputId, ;, if, (, ast, !=, null, &&, ast, ., getSourceFile, (, )]
[., ast, =, ast, ;, this, ., id, =, inputId, ;, if, (, ast, !=, null, &&, ast, ., getSourceFile]
[;, this, ., id, =, inputId, ;, if, (, ast, !=, null, &&, ast, ., getSourceFile, (, ), !=, null]
[=, inputId, ;, if, (, ast, !=, null, &&, ast, ., getSourceFile, (, ), !=, null, ), {, ast, .]
[., id, =, inputId, ;, if, (, ast, !=, null, &&, ast, ., getSourceFile, (, ), !=, null, ), {]
[;, if, (, ast, !=, null, &&, ast, ., getSourceFile, (, ), !=, null, ), {, ast, ., getSourceFile, (]
[), {, ast, ., getSourceFile, (, ), ., setIsExtern, (, isExtern, ), ;, }, }, public, CompilerInput, (, SourceFile, file]
[&&, ast, ., getSourceFile, (, ), !=, null, ), {, ast, ., getSourceFile, (, ), ., setIsExtern, (, isExtern, )]
[!=, null, &&, ast, ., getSourceFile, (, ), !=, null, ), {, ast, ., getSourceFile, (, ), ., setIsExtern, (]
[&&, ast, ., getSourceFile, (, ), !=, null, ), {, ast, ., getSourceFile, (, ), ., setIsExtern, (, isExtern, )]
[), {, ast, ., getSourceFile, (, ), ., setIsExtern, (, isExtern, ), ;, }, }, public, CompilerInput, (, SourceFile, file]
[!=, null, ), {, ast, ., getSourceFile, (, ), ., setIsExtern, (, isExtern, ), ;, }, }, public, CompilerInput, (]
[., getSourceFile, (, ), !=, null, ), {, ast, ., getSourceFile, (, ), ., setIsExtern, (, isExtern, ), ;, }]
[), {, ast, ., getSourceFile, (, ), ., setIsExtern, (, isExtern, ), ;, }, }, public, CompilerInput, (, SourceFile, file]
[;, }, }, public, CompilerInput, (, SourceFile, file, ), {, this, (, file, ,, false, ), ;, }, public, CompilerInput]
[., setIsExtern, (, isExtern, ), ;, }, }, public, CompilerInput, (, SourceFile, file, ), {, this, (, file, ,, false]
[., getSourceFile, (, ), ., setIsExtern, (, isExtern, ), ;, }, }, public, CompilerInput, (, SourceFile, file, ), {, this]
[), ;, }, }, public, CompilerInput, (, SourceFile, file, ), {, this, (, file, ,, false, ), ;, }, public]
[,, false, ), ;, }, public, CompilerInput, (, SourceFile, file, ,, boolean, isExtern, ), {, this, (, new, JsAst, (]
[), ;, }, public, CompilerInput, (, SourceFile, file, ,, boolean, isExtern, ), {, this, (, new, JsAst, (, file, )]
[,, isExtern, ), ;, }, @, Override, public, InputId, getInputId, (, ), {, return, id, ;, }, @, Override, public]
[), ,, isExtern, ), ;, }, @, Override, public, InputId, getInputId, (, ), {, return, id, ;, }, @, Override]
[), ;, }, @, Override, public, InputId, getInputId, (, ), {, return, id, ;, }, @, Override, public, String, getName]
[;, }, @, Override, public, String, getName, (, ), {, return, id, ., getIdName, (, ), ;, }, public, SourceAst]
[;, }, public, SourceAst, getAst, (, ), {, return, ast, ;, }, @, Override, public, String, getPathRelativeToClosureBase, (, ), {]
[., getIdName, (, ), ;, }, public, SourceAst, getAst, (, ), {, return, ast, ;, }, @, Override, public, String]
[;, }, @, Override, public, String, getPathRelativeToClosureBase, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, @, Override, public]
[;, }, @, Override, public, Node, getAstRoot, (, AbstractCompiler, compiler, ), {, Node, root, =, ast, ., getAstRoot, (, compiler]
[;, if, (, root, !=, null, ), {, Preconditions, ., checkState, (, root, ., isScript, (, ), ), ;, Preconditions]
[., getAstRoot, (, compiler, ), ;, if, (, root, !=, null, ), {, Preconditions, ., checkState, (, root, ., isScript]
[), ;, if, (, root, !=, null, ), {, Preconditions, ., checkState, (, root, ., isScript, (, ), ), ;]
[), {, Preconditions, ., checkState, (, root, ., isScript, (, ), ), ;, Preconditions, ., checkNotNull, (, root, ., getInputId]
[!=, null, ), {, Preconditions, ., checkState, (, root, ., isScript, (, ), ), ;, Preconditions, ., checkNotNull, (, root]
[), {, Preconditions, ., checkState, (, root, ., isScript, (, ), ), ;, Preconditions, ., checkNotNull, (, root, ., getInputId]
[;, Preconditions, ., checkNotNull, (, root, ., getInputId, (, ), ), ;, }, return, root, ;, }, @, Override, public]
[., checkState, (, root, ., isScript, (, ), ), ;, Preconditions, ., checkNotNull, (, root, ., getInputId, (, ), )]
[), ;, Preconditions, ., checkNotNull, (, root, ., getInputId, (, ), ), ;, }, return, root, ;, }, @, Override]
[., isScript, (, ), ), ;, Preconditions, ., checkNotNull, (, root, ., getInputId, (, ), ), ;, }, return, root]
[;, }, return, root, ;, }, @, Override, public, void, clearAst, (, ), {, ast, ., clearAst, (, ), ;]
[., checkNotNull, (, root, ., getInputId, (, ), ), ;, }, return, root, ;, }, @, Override, public, void, clearAst]
[), ;, }, return, root, ;, }, @, Override, public, void, clearAst, (, ), {, ast, ., clearAst, (, )]
[., getInputId, (, ), ), ;, }, return, root, ;, }, @, Override, public, void, clearAst, (, ), {, ast]
[;, }, @, Override, public, void, clearAst, (, ), {, ast, ., clearAst, (, ), ;, }, @, Override, public]
[;, }, @, Override, public, SourceFile, getSourceFile, (, ), {, return, ast, ., getSourceFile, (, ), ;, }, @, Override]
[., clearAst, (, ), ;, }, @, Override, public, SourceFile, getSourceFile, (, ), {, return, ast, ., getSourceFile, (, )]
[;, }, @, Override, public, void, setSourceFile, (, SourceFile, file, ), {, ast, ., setSourceFile, (, file, ), ;, }]
[., getSourceFile, (, ), ;, }, @, Override, public, void, setSourceFile, (, SourceFile, file, ), {, ast, ., setSourceFile, (]
[;, }, public, SourceAst, getSourceAst, (, ), {, return, ast, ;, }, public, void, setCompiler, (, AbstractCompiler, compiler, ), {]
[., setSourceFile, (, file, ), ;, }, public, SourceAst, getSourceAst, (, ), {, return, ast, ;, }, public, void, setCompiler]
[), ;, }, public, SourceAst, getSourceAst, (, ), {, return, ast, ;, }, public, void, setCompiler, (, AbstractCompiler, compiler, )]
[;, }, public, void, setCompiler, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, private, void, checkErrorManager]
[=, compiler, ;, }, private, void, checkErrorManager, (, ), {, Preconditions, ., checkNotNull, (, compiler, ,, "Expected setCompiler to be called first: ", +, this, )]
[., compiler, =, compiler, ;, }, private, void, checkErrorManager, (, ), {, Preconditions, ., checkNotNull, (, compiler, ,, "Expected setCompiler to be called first: ", +]
[;, }, private, void, checkErrorManager, (, ), {, Preconditions, ., checkNotNull, (, compiler, ,, "Expected setCompiler to be called first: ", +, this, ), ;, Preconditions]
[;, Preconditions, ., checkNotNull, (, compiler, ., getErrorManager, (, ), ,, "Expected compiler to call an error manager: ", +, this, ), ;, }, @, Override, public]
[., checkNotNull, (, compiler, ,, "Expected setCompiler to be called first: ", +, this, ), ;, Preconditions, ., checkNotNull, (, compiler, ., getErrorManager, (, ), ,]
[,, "Expected setCompiler to be called first: ", +, this, ), ;, Preconditions, ., checkNotNull, (, compiler, ., getErrorManager, (, ), ,, "Expected compiler to call an error manager: ", +, this, )]
[), ;, Preconditions, ., checkNotNull, (, compiler, ., getErrorManager, (, ), ,, "Expected compiler to call an error manager: ", +, this, ), ;, }, @, Override]
[+, this, ), ;, Preconditions, ., checkNotNull, (, compiler, ., getErrorManager, (, ), ,, "Expected compiler to call an error manager: ", +, this, ), ;, }]
[), ;, Preconditions, ., checkNotNull, (, compiler, ., getErrorManager, (, ), ,, "Expected compiler to call an error manager: ", +, this, ), ;, }, @, Override]
[;, }, @, Override, public, Collection, <, String, >, getRequires, (, ), {, checkErrorManager, (, ), ;, try, {, regenerateDependencyInfoIfNecessary]
[., checkNotNull, (, compiler, ., getErrorManager, (, ), ,, "Expected compiler to call an error manager: ", +, this, ), ;, }, @, Override, public, Collection, <]
[,, "Expected compiler to call an error manager: ", +, this, ), ;, }, @, Override, public, Collection, <, String, >, getRequires, (, ), {, checkErrorManager, (]
[., getErrorManager, (, ), ,, "Expected compiler to call an error manager: ", +, this, ), ;, }, @, Override, public, Collection, <, String, >, getRequires, (]
[), ;, }, @, Override, public, Collection, <, String, >, getRequires, (, ), {, checkErrorManager, (, ), ;, try, {]
[+, this, ), ;, }, @, Override, public, Collection, <, String, >, getRequires, (, ), {, checkErrorManager, (, ), ;]
[), ;, }, @, Override, public, Collection, <, String, >, getRequires, (, ), {, checkErrorManager, (, ), ;, try, {]
[;, try, {, regenerateDependencyInfoIfNecessary, (, ), ;, return, Collections, ., <, String, >, unmodifiableSet, (, requires, ), ;, }, catch]
[;, return, Collections, ., <, String, >, unmodifiableSet, (, requires, ), ;, }, catch, (, IOException, e, ), {, compiler]
[;, }, catch, (, IOException, e, ), {, compiler, ., getErrorManager, (, ), ., report, (, CheckLevel, ., ERROR, ,]
[., <, String, >, unmodifiableSet, (, requires, ), ;, }, catch, (, IOException, e, ), {, compiler, ., getErrorManager, (]
[), ;, }, catch, (, IOException, e, ), {, compiler, ., getErrorManager, (, ), ., report, (, CheckLevel, ., ERROR]
[;, return, ImmutableList, ., <, String, >, of, (, ), ;, }, }, @, Override, public, Collection, <, String, >]
[., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, getName, (, ), ), )]
[., getErrorManager, (, ), ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, getName]
[,, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, getName, (, ), ), ), ;, return, ImmutableList, ., <, String]
[., ERROR, ,, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, getName, (, ), ), ), ;, return, ImmutableList, .]
[), ;, return, ImmutableList, ., <, String, >, of, (, ), ;, }, }, @, Override, public, Collection, <, String]
[., make, (, AbstractCompiler, ., READ_ERROR, ,, getName, (, ), ), ), ;, return, ImmutableList, ., <, String, >, of]
[,, getName, (, ), ), ), ;, return, ImmutableList, ., <, String, >, of, (, ), ;, }, }, @]
[., READ_ERROR, ,, getName, (, ), ), ), ;, return, ImmutableList, ., <, String, >, of, (, ), ;, }]
[), ), ;, return, ImmutableList, ., <, String, >, of, (, ), ;, }, }, @, Override, public, Collection, <]
[;, }, }, @, Override, public, Collection, <, String, >, getProvides, (, ), {, checkErrorManager, (, ), ;, try, {]
[., <, String, >, of, (, ), ;, }, }, @, Override, public, Collection, <, String, >, getProvides, (, )]
[;, try, {, regenerateDependencyInfoIfNecessary, (, ), ;, return, Collections, ., <, String, >, unmodifiableSet, (, provides, ), ;, }, catch]
[;, return, Collections, ., <, String, >, unmodifiableSet, (, provides, ), ;, }, catch, (, IOException, e, ), {, compiler]
[;, }, catch, (, IOException, e, ), {, compiler, ., getErrorManager, (, ), ., report, (, CheckLevel, ., ERROR, ,]
[., <, String, >, unmodifiableSet, (, provides, ), ;, }, catch, (, IOException, e, ), {, compiler, ., getErrorManager, (]
[), ;, }, catch, (, IOException, e, ), {, compiler, ., getErrorManager, (, ), ., report, (, CheckLevel, ., ERROR]
[;, return, ImmutableList, ., <, String, >, of, (, ), ;, }, }, void, addProvide, (, String, provide, ), {]
[., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, getName, (, ), ), )]
[., getErrorManager, (, ), ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, getName]
[,, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, getName, (, ), ), ), ;, return, ImmutableList, ., <, String]
[., ERROR, ,, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, getName, (, ), ), ), ;, return, ImmutableList, .]
[), ;, return, ImmutableList, ., <, String, >, of, (, ), ;, }, }, void, addProvide, (, String, provide, )]
[., make, (, AbstractCompiler, ., READ_ERROR, ,, getName, (, ), ), ), ;, return, ImmutableList, ., <, String, >, of]
[,, getName, (, ), ), ), ;, return, ImmutableList, ., <, String, >, of, (, ), ;, }, }, void]
[., READ_ERROR, ,, getName, (, ), ), ), ;, return, ImmutableList, ., <, String, >, of, (, ), ;, }]
[), ), ;, return, ImmutableList, ., <, String, >, of, (, ), ;, }, }, void, addProvide, (, String, provide]
[;, }, }, void, addProvide, (, String, provide, ), {, getProvides, (, ), ;, provides, ., add, (, provide, )]
[., <, String, >, of, (, ), ;, }, }, void, addProvide, (, String, provide, ), {, getProvides, (, )]
[;, provides, ., add, (, provide, ), ;, }, void, addRequire, (, String, require, ), {, getRequires, (, ), ;]
[;, }, void, addRequire, (, String, require, ), {, getRequires, (, ), ;, requires, ., add, (, require, ), ;]
[., add, (, provide, ), ;, }, void, addRequire, (, String, require, ), {, getRequires, (, ), ;, requires, .]
[), ;, }, void, addRequire, (, String, require, ), {, getRequires, (, ), ;, requires, ., add, (, require, )]
[;, requires, ., add, (, require, ), ;, }, public, void, removeRequire, (, String, require, ), {, getRequires, (, )]
[;, }, public, void, removeRequire, (, String, require, ), {, getRequires, (, ), ;, requires, ., remove, (, require, )]
[., add, (, require, ), ;, }, public, void, removeRequire, (, String, require, ), {, getRequires, (, ), ;, requires]
[), ;, }, public, void, removeRequire, (, String, require, ), {, getRequires, (, ), ;, requires, ., remove, (, require]
[;, requires, ., remove, (, require, ), ;, }, private, void, regenerateDependencyInfoIfNecessary, (, ), throws, IOException, {, if, (, !]
[;, }, private, void, regenerateDependencyInfoIfNecessary, (, ), throws, IOException, {, if, (, !, (, ast, instanceof, JsAst, ), ), {]
[., remove, (, require, ), ;, }, private, void, regenerateDependencyInfoIfNecessary, (, ), throws, IOException, {, if, (, !, (, ast]
[), ;, }, private, void, regenerateDependencyInfoIfNecessary, (, ), throws, IOException, {, if, (, !, (, ast, instanceof, JsAst, ), )]
[), {, Preconditions, ., checkNotNull, (, compiler, ,, "Expected setCompiler to be called first", ), ;, DepsFinder, finder, =, new, DepsFinder, (, ), ;, Node]
[), {, Preconditions, ., checkNotNull, (, compiler, ,, "Expected setCompiler to be called first", ), ;, DepsFinder, finder, =, new, DepsFinder, (, ), ;, Node]
[), ), {, Preconditions, ., checkNotNull, (, compiler, ,, "Expected setCompiler to be called first", ), ;, DepsFinder, finder, =, new, DepsFinder, (, ), ;]
[instanceof, JsAst, ), ), {, Preconditions, ., checkNotNull, (, compiler, ,, "Expected setCompiler to be called first", ), ;, DepsFinder, finder, =, new, DepsFinder, (]
[;, DepsFinder, finder, =, new, DepsFinder, (, ), ;, Node, root, =, getAstRoot, (, compiler, ), ;, if, (, root]
[., checkNotNull, (, compiler, ,, "Expected setCompiler to be called first", ), ;, DepsFinder, finder, =, new, DepsFinder, (, ), ;, Node, root, =, getAstRoot]
[,, "Expected setCompiler to be called first", ), ;, DepsFinder, finder, =, new, DepsFinder, (, ), ;, Node, root, =, getAstRoot, (, compiler, ), ;]
[), ;, DepsFinder, finder, =, new, DepsFinder, (, ), ;, Node, root, =, getAstRoot, (, compiler, ), ;, if, (]
[;, Node, root, =, getAstRoot, (, compiler, ), ;, if, (, root, ==, null, ), {, return, ;, }, finder]
[;, if, (, root, ==, null, ), {, return, ;, }, finder, ., visitTree, (, getAstRoot, (, compiler, ), )]
[), ;, if, (, root, ==, null, ), {, return, ;, }, finder, ., visitTree, (, getAstRoot, (, compiler, )]
[), {, return, ;, }, finder, ., visitTree, (, getAstRoot, (, compiler, ), ), ;, provides, ., addAll, (, finder]
[==, null, ), {, return, ;, }, finder, ., visitTree, (, getAstRoot, (, compiler, ), ), ;, provides, ., addAll]
[), {, return, ;, }, finder, ., visitTree, (, getAstRoot, (, compiler, ), ), ;, provides, ., addAll, (, finder]
[;, provides, ., addAll, (, finder, ., provides, ), ;, requires, ., addAll, (, finder, ., requires, ), ;, }]
[., visitTree, (, getAstRoot, (, compiler, ), ), ;, provides, ., addAll, (, finder, ., provides, ), ;, requires, .]
[), ;, provides, ., addAll, (, finder, ., provides, ), ;, requires, ., addAll, (, finder, ., requires, ), ;]
[), ), ;, provides, ., addAll, (, finder, ., provides, ), ;, requires, ., addAll, (, finder, ., requires, )]
[;, requires, ., addAll, (, finder, ., requires, ), ;, }, else, {, if, (, !, generatedDependencyInfoFromSource, ), {, DependencyInfo]
[., addAll, (, finder, ., provides, ), ;, requires, ., addAll, (, finder, ., requires, ), ;, }, else, {]
[), ;, requires, ., addAll, (, finder, ., requires, ), ;, }, else, {, if, (, !, generatedDependencyInfoFromSource, ), {]
[., provides, ), ;, requires, ., addAll, (, finder, ., requires, ), ;, }, else, {, if, (, !, generatedDependencyInfoFromSource]
[;, }, else, {, if, (, !, generatedDependencyInfoFromSource, ), {, DependencyInfo, info, =, (, new, JsFileParser, (, compiler, ., getErrorManager]
[., addAll, (, finder, ., requires, ), ;, }, else, {, if, (, !, generatedDependencyInfoFromSource, ), {, DependencyInfo, info, =]
[), ;, }, else, {, if, (, !, generatedDependencyInfoFromSource, ), {, DependencyInfo, info, =, (, new, JsFileParser, (, compiler, .]
[., requires, ), ;, }, else, {, if, (, !, generatedDependencyInfoFromSource, ), {, DependencyInfo, info, =, (, new, JsFileParser, (]
[), {, DependencyInfo, info, =, (, new, JsFileParser, (, compiler, ., getErrorManager, (, ), ), ), ., setIncludeGoogBase, (, true]
[), {, DependencyInfo, info, =, (, new, JsFileParser, (, compiler, ., getErrorManager, (, ), ), ), ., setIncludeGoogBase, (, true]
[;, provides, ., addAll, (, info, ., getProvides, (, ), ), ;, requires, ., addAll, (, info, ., getRequires, (]
[., parseFile, (, getName, (, ), ,, getName, (, ), ,, getCode, (, ), ), ;, provides, ., addAll, (]
[., setIncludeGoogBase, (, true, ), ., parseFile, (, getName, (, ), ,, getName, (, ), ,, getCode, (, ), )]
[), ., setIncludeGoogBase, (, true, ), ., parseFile, (, getName, (, ), ,, getName, (, ), ,, getCode, (, )]
[), ), ., setIncludeGoogBase, (, true, ), ., parseFile, (, getName, (, ), ,, getName, (, ), ,, getCode, (]
[., getErrorManager, (, ), ), ), ., setIncludeGoogBase, (, true, ), ., parseFile, (, getName, (, ), ,, getName, (]
[), ., parseFile, (, getName, (, ), ,, getName, (, ), ,, getCode, (, ), ), ;, provides, ., addAll]
[,, getName, (, ), ,, getCode, (, ), ), ;, provides, ., addAll, (, info, ., getProvides, (, ), )]
[,, getCode, (, ), ), ;, provides, ., addAll, (, info, ., getProvides, (, ), ), ;, requires, ., addAll]
[), ;, provides, ., addAll, (, info, ., getProvides, (, ), ), ;, requires, ., addAll, (, info, ., getRequires]
[;, requires, ., addAll, (, info, ., getRequires, (, ), ), ;, generatedDependencyInfoFromSource, =, true, ;, }, }, }, private]
[., addAll, (, info, ., getProvides, (, ), ), ;, requires, ., addAll, (, info, ., getRequires, (, ), )]
[), ;, requires, ., addAll, (, info, ., getRequires, (, ), ), ;, generatedDependencyInfoFromSource, =, true, ;, }, }, }]
[., getProvides, (, ), ), ;, requires, ., addAll, (, info, ., getRequires, (, ), ), ;, generatedDependencyInfoFromSource, =, true]
[;, generatedDependencyInfoFromSource, =, true, ;, }, }, }, private, static, class, DepsFinder, {, private, final, List, <, String, >, provides]
[., addAll, (, info, ., getRequires, (, ), ), ;, generatedDependencyInfoFromSource, =, true, ;, }, }, }, private, static, class]
[), ;, generatedDependencyInfoFromSource, =, true, ;, }, }, }, private, static, class, DepsFinder, {, private, final, List, <, String, >]
[., getRequires, (, ), ), ;, generatedDependencyInfoFromSource, =, true, ;, }, }, }, private, static, class, DepsFinder, {, private, final]
[=, true, ;, }, }, }, private, static, class, DepsFinder, {, private, final, List, <, String, >, provides, =, Lists]
[;, }, }, }, private, static, class, DepsFinder, {, private, final, List, <, String, >, provides, =, Lists, ., newArrayList]
[;, private, final, List, <, String, >, requires, =, Lists, ., newArrayList, (, ), ;, private, final, CodingConvention, codingConvention, =]
[., newArrayList, (, ), ;, private, final, List, <, String, >, requires, =, Lists, ., newArrayList, (, ), ;, private]
[;, private, final, CodingConvention, codingConvention, =, new, ClosureCodingConvention, (, ), ;, void, visitTree, (, Node, n, ), {, visitSubtree, (]
[., newArrayList, (, ), ;, private, final, CodingConvention, codingConvention, =, new, ClosureCodingConvention, (, ), ;, void, visitTree, (, Node, n]
[;, void, visitTree, (, Node, n, ), {, visitSubtree, (, n, ,, null, ), ;, }, void, visitSubtree, (, Node]
[;, }, void, visitSubtree, (, Node, n, ,, Node, parent, ), {, if, (, n, ., isCall, (, ), )]
[,, null, ), ;, }, void, visitSubtree, (, Node, n, ,, Node, parent, ), {, if, (, n, ., isCall]
[), ;, }, void, visitSubtree, (, Node, n, ,, Node, parent, ), {, if, (, n, ., isCall, (, )]
[), {, String, require, =, codingConvention, ., extractClassNameIfRequire, (, n, ,, parent, ), ;, if, (, require, !=, null, )]
[., isCall, (, ), ), {, String, require, =, codingConvention, ., extractClassNameIfRequire, (, n, ,, parent, ), ;, if, (]
[;, if, (, require, !=, null, ), {, requires, ., add, (, require, ), ;, }, String, provide, =, codingConvention]
[., extractClassNameIfRequire, (, n, ,, parent, ), ;, if, (, require, !=, null, ), {, requires, ., add, (, require]
[,, parent, ), ;, if, (, require, !=, null, ), {, requires, ., add, (, require, ), ;, }, String]
[), ;, if, (, require, !=, null, ), {, requires, ., add, (, require, ), ;, }, String, provide, =]
[), {, requires, ., add, (, require, ), ;, }, String, provide, =, codingConvention, ., extractClassNameIfProvide, (, n, ,, parent]
[!=, null, ), {, requires, ., add, (, require, ), ;, }, String, provide, =, codingConvention, ., extractClassNameIfProvide, (, n]
[), {, requires, ., add, (, require, ), ;, }, String, provide, =, codingConvention, ., extractClassNameIfProvide, (, n, ,, parent]
[;, }, String, provide, =, codingConvention, ., extractClassNameIfProvide, (, n, ,, parent, ), ;, if, (, provide, !=, null, )]
[., add, (, require, ), ;, }, String, provide, =, codingConvention, ., extractClassNameIfProvide, (, n, ,, parent, ), ;, if]
[), ;, }, String, provide, =, codingConvention, ., extractClassNameIfProvide, (, n, ,, parent, ), ;, if, (, provide, !=, null]
[;, if, (, provide, !=, null, ), {, provides, ., add, (, provide, ), ;, }, return, ;, }, else]
[., extractClassNameIfProvide, (, n, ,, parent, ), ;, if, (, provide, !=, null, ), {, provides, ., add, (, provide]
[,, parent, ), ;, if, (, provide, !=, null, ), {, provides, ., add, (, provide, ), ;, }, return]
[), ;, if, (, provide, !=, null, ), {, provides, ., add, (, provide, ), ;, }, return, ;, }]
[), {, provides, ., add, (, provide, ), ;, }, return, ;, }, else, if, (, parent, !=, null, &&]
[!=, null, ), {, provides, ., add, (, provide, ), ;, }, return, ;, }, else, if, (, parent, !=]
[), {, provides, ., add, (, provide, ), ;, }, return, ;, }, else, if, (, parent, !=, null, &&]
[;, }, return, ;, }, else, if, (, parent, !=, null, &&, !, parent, ., isExprResult, (, ), &&, !]
[., add, (, provide, ), ;, }, return, ;, }, else, if, (, parent, !=, null, &&, !, parent, .]
[), ;, }, return, ;, }, else, if, (, parent, !=, null, &&, !, parent, ., isExprResult, (, ), &&]
[), {, return, ;, }, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;]
[&&, !, parent, ., isScript, (, ), ), {, return, ;, }, for, (, Node, child, =, n, ., getFirstChild]
[&&, !, parent, ., isExprResult, (, ), &&, !, parent, ., isScript, (, ), ), {, return, ;, }, for]
[!=, null, &&, !, parent, ., isExprResult, (, ), &&, !, parent, ., isScript, (, ), ), {, return, ;]
[&&, !, parent, ., isExprResult, (, ), &&, !, parent, ., isScript, (, ), ), {, return, ;, }, for]
[&&, !, parent, ., isScript, (, ), ), {, return, ;, }, for, (, Node, child, =, n, ., getFirstChild]
[&&, !, parent, ., isScript, (, ), ), {, return, ;, }, for, (, Node, child, =, n, ., getFirstChild]
[., isExprResult, (, ), &&, !, parent, ., isScript, (, ), ), {, return, ;, }, for, (, Node, child]
[), {, return, ;, }, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;]
[), {, return, ;, }, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;]
[., isScript, (, ), ), {, return, ;, }, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, visitSubtree, (, child, ,, n, )]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, visitSubtree, (]
[;, child, =, child, ., getNext, (, ), ), {, visitSubtree, (, child, ,, n, ), ;, }, }, }]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, visitSubtree, (, child, ,, n, ), ;, }]
[;, child, =, child, ., getNext, (, ), ), {, visitSubtree, (, child, ,, n, ), ;, }, }, }]
[=, child, ., getNext, (, ), ), {, visitSubtree, (, child, ,, n, ), ;, }, }, }, public, String]
[), {, visitSubtree, (, child, ,, n, ), ;, }, }, }, public, String, getLine, (, int, lineNumber, ), {]
[., getNext, (, ), ), {, visitSubtree, (, child, ,, n, ), ;, }, }, }, public, String, getLine, (]
[;, }, }, }, public, String, getLine, (, int, lineNumber, ), {, return, getSourceFile, (, ), ., getLine, (, lineNumber]
[,, n, ), ;, }, }, }, public, String, getLine, (, int, lineNumber, ), {, return, getSourceFile, (, ), .]
[), ;, }, }, }, public, String, getLine, (, int, lineNumber, ), {, return, getSourceFile, (, ), ., getLine, (]
[;, }, public, Region, getRegion, (, int, lineNumber, ), {, return, getSourceFile, (, ), ., getRegion, (, lineNumber, ), ;]
[., getLine, (, lineNumber, ), ;, }, public, Region, getRegion, (, int, lineNumber, ), {, return, getSourceFile, (, ), .]
[), ;, }, public, Region, getRegion, (, int, lineNumber, ), {, return, getSourceFile, (, ), ., getRegion, (, lineNumber, )]
[;, }, public, String, getCode, (, ), throws, IOException, {, return, getSourceFile, (, ), ., getCode, (, ), ;, }]
[., getRegion, (, lineNumber, ), ;, }, public, String, getCode, (, ), throws, IOException, {, return, getSourceFile, (, ), .]
[), ;, }, public, String, getCode, (, ), throws, IOException, {, return, getSourceFile, (, ), ., getCode, (, ), ;]
[;, }, public, JSModule, getModule, (, ), {, return, module, ;, }, public, void, setModule, (, JSModule, module, ), {]
[., getCode, (, ), ;, }, public, JSModule, getModule, (, ), {, return, module, ;, }, public, void, setModule, (]
[;, }, public, void, setModule, (, JSModule, module, ), {, Preconditions, ., checkArgument, (, module, ==, null, ||, this, .]
[;, this, ., module, =, module, ;, }, void, overrideModule, (, JSModule, module, ), {, this, ., module, =, module]
[., checkArgument, (, module, ==, null, ||, this, ., module, ==, null, ||, this, ., module, ==, module, ), ;]
[), ;, this, ., module, =, module, ;, }, void, overrideModule, (, JSModule, module, ), {, this, ., module, =]
[||, this, ., module, ==, module, ), ;, this, ., module, =, module, ;, }, void, overrideModule, (, JSModule, module]
[||, this, ., module, ==, null, ||, this, ., module, ==, module, ), ;, this, ., module, =, module, ;]
[==, null, ||, this, ., module, ==, null, ||, this, ., module, ==, module, ), ;, this, ., module, =]
[||, this, ., module, ==, null, ||, this, ., module, ==, module, ), ;, this, ., module, =, module, ;]
[||, this, ., module, ==, module, ), ;, this, ., module, =, module, ;, }, void, overrideModule, (, JSModule, module]
[==, null, ||, this, ., module, ==, module, ), ;, this, ., module, =, module, ;, }, void, overrideModule, (]
[., module, ==, null, ||, this, ., module, ==, module, ), ;, this, ., module, =, module, ;, }, void]
[||, this, ., module, ==, module, ), ;, this, ., module, =, module, ;, }, void, overrideModule, (, JSModule, module]
[), ;, this, ., module, =, module, ;, }, void, overrideModule, (, JSModule, module, ), {, this, ., module, =]
[==, module, ), ;, this, ., module, =, module, ;, }, void, overrideModule, (, JSModule, module, ), {, this, .]
[., module, ==, module, ), ;, this, ., module, =, module, ;, }, void, overrideModule, (, JSModule, module, ), {]
[), ;, this, ., module, =, module, ;, }, void, overrideModule, (, JSModule, module, ), {, this, ., module, =]
[=, module, ;, }, void, overrideModule, (, JSModule, module, ), {, this, ., module, =, module, ;, }, public, boolean]
[., module, =, module, ;, }, void, overrideModule, (, JSModule, module, ), {, this, ., module, =, module, ;, }]
[;, }, void, overrideModule, (, JSModule, module, ), {, this, ., module, =, module, ;, }, public, boolean, isExtern, (]
[=, module, ;, }, public, boolean, isExtern, (, ), {, if, (, ast, ==, null, ||, ast, ., getSourceFile, (]
[., module, =, module, ;, }, public, boolean, isExtern, (, ), {, if, (, ast, ==, null, ||, ast, .]
[;, }, public, boolean, isExtern, (, ), {, if, (, ast, ==, null, ||, ast, ., getSourceFile, (, ), ==]
[), {, return, false, ;, }, return, ast, ., getSourceFile, (, ), ., isExtern, (, ), ;, }, void, setIsExtern]
[||, ast, ., getSourceFile, (, ), ==, null, ), {, return, false, ;, }, return, ast, ., getSourceFile, (, )]
[==, null, ||, ast, ., getSourceFile, (, ), ==, null, ), {, return, false, ;, }, return, ast, ., getSourceFile]
[||, ast, ., getSourceFile, (, ), ==, null, ), {, return, false, ;, }, return, ast, ., getSourceFile, (, )]
[), {, return, false, ;, }, return, ast, ., getSourceFile, (, ), ., isExtern, (, ), ;, }, void, setIsExtern]
[==, null, ), {, return, false, ;, }, return, ast, ., getSourceFile, (, ), ., isExtern, (, ), ;, }]
[., getSourceFile, (, ), ==, null, ), {, return, false, ;, }, return, ast, ., getSourceFile, (, ), ., isExtern]
[), {, return, false, ;, }, return, ast, ., getSourceFile, (, ), ., isExtern, (, ), ;, }, void, setIsExtern]
[;, }, return, ast, ., getSourceFile, (, ), ., isExtern, (, ), ;, }, void, setIsExtern, (, boolean, isExtern, )]
[;, }, void, setIsExtern, (, boolean, isExtern, ), {, if, (, ast, ==, null, ||, ast, ., getSourceFile, (, )]
[., isExtern, (, ), ;, }, void, setIsExtern, (, boolean, isExtern, ), {, if, (, ast, ==, null, ||, ast]
[., getSourceFile, (, ), ., isExtern, (, ), ;, }, void, setIsExtern, (, boolean, isExtern, ), {, if, (, ast]
[), {, return, ;, }, ast, ., getSourceFile, (, ), ., setIsExtern, (, isExtern, ), ;, }, public, int, getLineOffset]
[||, ast, ., getSourceFile, (, ), ==, null, ), {, return, ;, }, ast, ., getSourceFile, (, ), ., setIsExtern]
[==, null, ||, ast, ., getSourceFile, (, ), ==, null, ), {, return, ;, }, ast, ., getSourceFile, (, )]
[||, ast, ., getSourceFile, (, ), ==, null, ), {, return, ;, }, ast, ., getSourceFile, (, ), ., setIsExtern]
[), {, return, ;, }, ast, ., getSourceFile, (, ), ., setIsExtern, (, isExtern, ), ;, }, public, int, getLineOffset]
[==, null, ), {, return, ;, }, ast, ., getSourceFile, (, ), ., setIsExtern, (, isExtern, ), ;, }, public]
[., getSourceFile, (, ), ==, null, ), {, return, ;, }, ast, ., getSourceFile, (, ), ., setIsExtern, (, isExtern]
[), {, return, ;, }, ast, ., getSourceFile, (, ), ., setIsExtern, (, isExtern, ), ;, }, public, int, getLineOffset]
[;, }, public, int, getLineOffset, (, int, lineno, ), {, return, ast, ., getSourceFile, (, ), ., getLineOffset, (, lineno]
[., setIsExtern, (, isExtern, ), ;, }, public, int, getLineOffset, (, int, lineno, ), {, return, ast, ., getSourceFile, (]
[., getSourceFile, (, ), ., setIsExtern, (, isExtern, ), ;, }, public, int, getLineOffset, (, int, lineno, ), {, return]
[), ;, }, public, int, getLineOffset, (, int, lineno, ), {, return, ast, ., getSourceFile, (, ), ., getLineOffset, (]
[;, }, public, int, getNumLines, (, ), {, return, ast, ., getSourceFile, (, ), ., getNumLines, (, ), ;, }]
[., getLineOffset, (, lineno, ), ;, }, public, int, getNumLines, (, ), {, return, ast, ., getSourceFile, (, ), .]
[., getSourceFile, (, ), ., getLineOffset, (, lineno, ), ;, }, public, int, getNumLines, (, ), {, return, ast, .]
[), ;, }, public, int, getNumLines, (, ), {, return, ast, ., getSourceFile, (, ), ., getNumLines, (, ), ;]
[;, }, @, Override, public, String, toString, (, ), {, return, getName, (, ), ;, }, }]
[., getNumLines, (, ), ;, }, @, Override, public, String, toString, (, ), {, return, getName, (, ), ;, }]
[., getSourceFile, (, ), ., getNumLines, (, ), ;, }, @, Override, public, String, toString, (, ), {, return, getName]
[;, }, }]
