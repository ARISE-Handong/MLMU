[;, private, static, final, double, MIN_RELATIVE_TOLERANCE, =, 2, *, FastMath, ., ulp, (, 1d, ), ;, private, final, double, relativeThreshold]
[*, (, 3, -, FastMath, ., sqrt, (, 5, ), ), ;, private, static, final, double, MIN_RELATIVE_TOLERANCE, =, 2, *]
[;, private, static, final, double, MIN_RELATIVE_TOLERANCE, =, 2, *, FastMath, ., ulp, (, 1d, ), ;, private, final, double, relativeThreshold]
[), ;, private, static, final, double, MIN_RELATIVE_TOLERANCE, =, 2, *, FastMath, ., ulp, (, 1d, ), ;, private, final, double]
[-, FastMath, ., sqrt, (, 5, ), ), ;, private, static, final, double, MIN_RELATIVE_TOLERANCE, =, 2, *, FastMath, ., ulp]
[), ;, private, static, final, double, MIN_RELATIVE_TOLERANCE, =, 2, *, FastMath, ., ulp, (, 1d, ), ;, private, final, double]
[., sqrt, (, 5, ), ), ;, private, static, final, double, MIN_RELATIVE_TOLERANCE, =, 2, *, FastMath, ., ulp, (, 1d]
[), ), ;, private, static, final, double, MIN_RELATIVE_TOLERANCE, =, 2, *, FastMath, ., ulp, (, 1d, ), ;, private, final]
[;, private, final, double, relativeThreshold, ;, private, final, double, absoluteThreshold, ;, public, BrentOptimizer, (, double, rel, ,, double, abs, ,]
[*, FastMath, ., ulp, (, 1d, ), ;, private, final, double, relativeThreshold, ;, private, final, double, absoluteThreshold, ;, public, BrentOptimizer]
[;, private, final, double, relativeThreshold, ;, private, final, double, absoluteThreshold, ;, public, BrentOptimizer, (, double, rel, ,, double, abs, ,]
[., ulp, (, 1d, ), ;, private, final, double, relativeThreshold, ;, private, final, double, absoluteThreshold, ;, public, BrentOptimizer, (, double]
[), ;, private, final, double, relativeThreshold, ;, private, final, double, absoluteThreshold, ;, public, BrentOptimizer, (, double, rel, ,, double, abs]
[), ;, if, (, rel, <, MIN_RELATIVE_TOLERANCE, ), {, throw, new, NumberIsTooSmallException, (, rel, ,, MIN_RELATIVE_TOLERANCE, ,, true, ), ;]
[), {, throw, new, NumberIsTooSmallException, (, rel, ,, MIN_RELATIVE_TOLERANCE, ,, true, ), ;, }, if, (, abs, <=, 0, )]
[<, MIN_RELATIVE_TOLERANCE, ), {, throw, new, NumberIsTooSmallException, (, rel, ,, MIN_RELATIVE_TOLERANCE, ,, true, ), ;, }, if, (, abs, <=]
[), {, throw, new, NumberIsTooSmallException, (, rel, ,, MIN_RELATIVE_TOLERANCE, ,, true, ), ;, }, if, (, abs, <=, 0, )]
[;, }, if, (, abs, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }, relativeThreshold, =, rel]
[,, MIN_RELATIVE_TOLERANCE, ,, true, ), ;, }, if, (, abs, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, abs, )]
[,, true, ), ;, }, if, (, abs, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }]
[), ;, }, if, (, abs, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }, relativeThreshold, =]
[), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }, relativeThreshold, =, rel, ;, absoluteThreshold, =, abs, ;, }, public]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }, relativeThreshold, =, rel, ;, absoluteThreshold, =, abs, ;]
[), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }, relativeThreshold, =, rel, ;, absoluteThreshold, =, abs, ;, }, public]
[;, }, relativeThreshold, =, rel, ;, absoluteThreshold, =, abs, ;, }, public, BrentOptimizer, (, double, rel, ,, double, abs, )]
[), ;, }, relativeThreshold, =, rel, ;, absoluteThreshold, =, abs, ;, }, public, BrentOptimizer, (, double, rel, ,, double, abs]
[=, rel, ;, absoluteThreshold, =, abs, ;, }, public, BrentOptimizer, (, double, rel, ,, double, abs, ), {, this, (]
[;, absoluteThreshold, =, abs, ;, }, public, BrentOptimizer, (, double, rel, ,, double, abs, ), {, this, (, rel, ,]
[=, abs, ;, }, public, BrentOptimizer, (, double, rel, ,, double, abs, ), {, this, (, rel, ,, abs, ,]
[;, }, public, BrentOptimizer, (, double, rel, ,, double, abs, ), {, this, (, rel, ,, abs, ,, null, )]
[,, abs, ,, null, ), ;, }, @, Override, protected, UnivariatePointValuePair, doOptimize, (, ), {, final, boolean, isMinim, =, getGoalType]
[,, null, ), ;, }, @, Override, protected, UnivariatePointValuePair, doOptimize, (, ), {, final, boolean, isMinim, =, getGoalType, (, )]
[), ;, }, @, Override, protected, UnivariatePointValuePair, doOptimize, (, ), {, final, boolean, isMinim, =, getGoalType, (, ), ==, GoalType]
[;, final, double, lo, =, getMin, (, ), ;, final, double, mid, =, getStartValue, (, ), ;, final, double, hi]
[==, GoalType, ., MINIMIZE, ;, final, double, lo, =, getMin, (, ), ;, final, double, mid, =, getStartValue, (, )]
[;, final, double, lo, =, getMin, (, ), ;, final, double, mid, =, getStartValue, (, ), ;, final, double, hi]
[., MINIMIZE, ;, final, double, lo, =, getMin, (, ), ;, final, double, mid, =, getStartValue, (, ), ;, final]
[;, final, double, mid, =, getStartValue, (, ), ;, final, double, hi, =, getMax, (, ), ;, final, ConvergenceChecker, <]
[;, final, double, hi, =, getMax, (, ), ;, final, ConvergenceChecker, <, UnivariatePointValuePair, >, checker, =, getConvergenceChecker, (, ), ;]
[;, final, ConvergenceChecker, <, UnivariatePointValuePair, >, checker, =, getConvergenceChecker, (, ), ;, double, a, ;, double, b, ;, if, (]
[;, double, a, ;, double, b, ;, if, (, lo, <, hi, ), {, a, =, lo, ;, b, =]
[), {, a, =, lo, ;, b, =, hi, ;, }, else, {, a, =, hi, ;, b, =, lo]
[<, hi, ), {, a, =, lo, ;, b, =, hi, ;, }, else, {, a, =, hi, ;, b]
[), {, a, =, lo, ;, b, =, hi, ;, }, else, {, a, =, hi, ;, b, =, lo]
[=, lo, ;, b, =, hi, ;, }, else, {, a, =, hi, ;, b, =, lo, ;, }, double]
[;, b, =, hi, ;, }, else, {, a, =, hi, ;, b, =, lo, ;, }, double, x, =]
[=, hi, ;, }, else, {, a, =, hi, ;, b, =, lo, ;, }, double, x, =, mid, ;]
[;, }, else, {, a, =, hi, ;, b, =, lo, ;, }, double, x, =, mid, ;, double, v]
[=, hi, ;, b, =, lo, ;, }, double, x, =, mid, ;, double, v, =, x, ;, double, w]
[;, b, =, lo, ;, }, double, x, =, mid, ;, double, v, =, x, ;, double, w, =, x]
[=, lo, ;, }, double, x, =, mid, ;, double, v, =, x, ;, double, w, =, x, ;, double]
[;, }, double, x, =, mid, ;, double, v, =, x, ;, double, w, =, x, ;, double, d, =]
[;, double, v, =, x, ;, double, w, =, x, ;, double, d, =, 0, ;, double, e, =, 0]
[;, double, w, =, x, ;, double, d, =, 0, ;, double, e, =, 0, ;, double, fx, =, computeObjectiveValue]
[;, double, d, =, 0, ;, double, e, =, 0, ;, double, fx, =, computeObjectiveValue, (, x, ), ;, if]
[;, double, e, =, 0, ;, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (, !, isMinim, ), {]
[;, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (, !, isMinim, ), {, fx, =, -, fx, ;]
[;, if, (, !, isMinim, ), {, fx, =, -, fx, ;, }, double, fv, =, fx, ;, double, fw]
[), ;, if, (, !, isMinim, ), {, fx, =, -, fx, ;, }, double, fv, =, fx, ;, double]
[), {, fx, =, -, fx, ;, }, double, fv, =, fx, ;, double, fw, =, fx, ;, UnivariatePointValuePair, previous]
[), {, fx, =, -, fx, ;, }, double, fv, =, fx, ;, double, fw, =, fx, ;, UnivariatePointValuePair, previous]
[=, -, fx, ;, }, double, fv, =, fx, ;, double, fw, =, fx, ;, UnivariatePointValuePair, previous, =, null, ;]
[;, }, double, fv, =, fx, ;, double, fw, =, fx, ;, UnivariatePointValuePair, previous, =, null, ;, UnivariatePointValuePair, current, =]
[;, }, double, fv, =, fx, ;, double, fw, =, fx, ;, UnivariatePointValuePair, previous, =, null, ;, UnivariatePointValuePair, current, =]
[;, double, fw, =, fx, ;, UnivariatePointValuePair, previous, =, null, ;, UnivariatePointValuePair, current, =, new, UnivariatePointValuePair, (, x, ,, isMinim]
[;, UnivariatePointValuePair, previous, =, null, ;, UnivariatePointValuePair, current, =, new, UnivariatePointValuePair, (, x, ,, isMinim, ?, fx, :, -, fx]
[;, UnivariatePointValuePair, current, =, new, UnivariatePointValuePair, (, x, ,, isMinim, ?, fx, :, -, fx, ), ;, UnivariatePointValuePair, best, =]
[;, UnivariatePointValuePair, best, =, current, ;, int, iter, =, 0, ;, while, (, true, ), {, final, double, m, =]
[,, isMinim, ?, fx, :, -, fx, ), ;, UnivariatePointValuePair, best, =, current, ;, int, iter, =, 0, ;, while]
[), ;, UnivariatePointValuePair, best, =, current, ;, int, iter, =, 0, ;, while, (, true, ), {, final, double, m]
[?, fx, :, -, fx, ), ;, UnivariatePointValuePair, best, =, current, ;, int, iter, =, 0, ;, while, (, true]
[:, -, fx, ), ;, UnivariatePointValuePair, best, =, current, ;, int, iter, =, 0, ;, while, (, true, ), {]
[), ;, UnivariatePointValuePair, best, =, current, ;, int, iter, =, 0, ;, while, (, true, ), {, final, double, m]
[), ;, UnivariatePointValuePair, best, =, current, ;, int, iter, =, 0, ;, while, (, true, ), {, final, double, m]
[;, int, iter, =, 0, ;, while, (, true, ), {, final, double, m, =, 0.5, *, (, a, +]
[;, while, (, true, ), {, final, double, m, =, 0.5, *, (, a, +, b, ), ;, final, double]
[), {, final, double, m, =, 0.5, *, (, a, +, b, ), ;, final, double, tol1, =, relativeThreshold, *]
[;, final, double, tol1, =, relativeThreshold, *, FastMath, ., abs, (, x, ), +, absoluteThreshold, ;, final, double, tol2, =]
[*, (, a, +, b, ), ;, final, double, tol1, =, relativeThreshold, *, FastMath, ., abs, (, x, ), +]
[;, final, double, tol1, =, relativeThreshold, *, FastMath, ., abs, (, x, ), +, absoluteThreshold, ;, final, double, tol2, =]
[), ;, final, double, tol1, =, relativeThreshold, *, FastMath, ., abs, (, x, ), +, absoluteThreshold, ;, final, double, tol2]
[+, b, ), ;, final, double, tol1, =, relativeThreshold, *, FastMath, ., abs, (, x, ), +, absoluteThreshold, ;, final]
[), ;, final, double, tol1, =, relativeThreshold, *, FastMath, ., abs, (, x, ), +, absoluteThreshold, ;, final, double, tol2]
[;, final, double, tol2, =, 2, *, tol1, ;, final, boolean, stop, =, FastMath, ., abs, (, x, -, m]
[+, absoluteThreshold, ;, final, double, tol2, =, 2, *, tol1, ;, final, boolean, stop, =, FastMath, ., abs, (, x]
[*, FastMath, ., abs, (, x, ), +, absoluteThreshold, ;, final, double, tol2, =, 2, *, tol1, ;, final, boolean]
[+, absoluteThreshold, ;, final, double, tol2, =, 2, *, tol1, ;, final, boolean, stop, =, FastMath, ., abs, (, x]
[., abs, (, x, ), +, absoluteThreshold, ;, final, double, tol2, =, 2, *, tol1, ;, final, boolean, stop, =]
[), +, absoluteThreshold, ;, final, double, tol2, =, 2, *, tol1, ;, final, boolean, stop, =, FastMath, ., abs, (]
[;, final, double, tol2, =, 2, *, tol1, ;, final, boolean, stop, =, FastMath, ., abs, (, x, -, m]
[;, final, boolean, stop, =, FastMath, ., abs, (, x, -, m, ), <=, tol2, -, 0.5, *, (, b]
[*, tol1, ;, final, boolean, stop, =, FastMath, ., abs, (, x, -, m, ), <=, tol2, -, 0.5, *]
[;, final, boolean, stop, =, FastMath, ., abs, (, x, -, m, ), <=, tol2, -, 0.5, *, (, b]
[;, if, (, !, stop, ), {, double, p, =, 0, ;, double, q, =, 0, ;, double, r, =]
[<=, tol2, -, 0.5, *, (, b, -, a, ), ;, if, (, !, stop, ), {, double, p, =]
[., abs, (, x, -, m, ), <=, tol2, -, 0.5, *, (, b, -, a, ), ;, if, (]
[), <=, tol2, -, 0.5, *, (, b, -, a, ), ;, if, (, !, stop, ), {, double, p]
[-, m, ), <=, tol2, -, 0.5, *, (, b, -, a, ), ;, if, (, !, stop, ), {]
[), <=, tol2, -, 0.5, *, (, b, -, a, ), ;, if, (, !, stop, ), {, double, p]
[;, if, (, !, stop, ), {, double, p, =, 0, ;, double, q, =, 0, ;, double, r, =]
[-, 0.5, *, (, b, -, a, ), ;, if, (, !, stop, ), {, double, p, =, 0, ;]
[;, if, (, !, stop, ), {, double, p, =, 0, ;, double, q, =, 0, ;, double, r, =]
[*, (, b, -, a, ), ;, if, (, !, stop, ), {, double, p, =, 0, ;, double, q]
[;, if, (, !, stop, ), {, double, p, =, 0, ;, double, q, =, 0, ;, double, r, =]
[), ;, if, (, !, stop, ), {, double, p, =, 0, ;, double, q, =, 0, ;, double, r]
[-, a, ), ;, if, (, !, stop, ), {, double, p, =, 0, ;, double, q, =, 0, ;]
[), ;, if, (, !, stop, ), {, double, p, =, 0, ;, double, q, =, 0, ;, double, r]
[), {, double, p, =, 0, ;, double, q, =, 0, ;, double, r, =, 0, ;, double, u, =]
[), {, double, p, =, 0, ;, double, q, =, 0, ;, double, r, =, 0, ;, double, u, =]
[;, double, q, =, 0, ;, double, r, =, 0, ;, double, u, =, 0, ;, if, (, FastMath, .]
[;, double, r, =, 0, ;, double, u, =, 0, ;, if, (, FastMath, ., abs, (, e, ), >]
[;, double, u, =, 0, ;, if, (, FastMath, ., abs, (, e, ), >, tol1, ), {, r, =]
[;, if, (, FastMath, ., abs, (, e, ), >, tol1, ), {, r, =, (, x, -, w, )]
[), {, r, =, (, x, -, w, ), *, (, fx, -, fv, ), ;, q, =, (, x]
[>, tol1, ), {, r, =, (, x, -, w, ), *, (, fx, -, fv, ), ;, q, =]
[., abs, (, e, ), >, tol1, ), {, r, =, (, x, -, w, ), *, (, fx, -]
[), >, tol1, ), {, r, =, (, x, -, w, ), *, (, fx, -, fv, ), ;, q]
[), {, r, =, (, x, -, w, ), *, (, fx, -, fv, ), ;, q, =, (, x]
[=, (, x, -, w, ), *, (, fx, -, fv, ), ;, q, =, (, x, -, v, )]
[;, q, =, (, x, -, v, ), *, (, fx, -, fw, ), ;, p, =, (, x, -]
[*, (, fx, -, fv, ), ;, q, =, (, x, -, v, ), *, (, fx, -, fw, )]
[), *, (, fx, -, fv, ), ;, q, =, (, x, -, v, ), *, (, fx, -, fw]
[-, w, ), *, (, fx, -, fv, ), ;, q, =, (, x, -, v, ), *, (, fx]
[), *, (, fx, -, fv, ), ;, q, =, (, x, -, v, ), *, (, fx, -, fw]
[;, q, =, (, x, -, v, ), *, (, fx, -, fw, ), ;, p, =, (, x, -]
[), ;, q, =, (, x, -, v, ), *, (, fx, -, fw, ), ;, p, =, (, x]
[-, fv, ), ;, q, =, (, x, -, v, ), *, (, fx, -, fw, ), ;, p, =]
[), ;, q, =, (, x, -, v, ), *, (, fx, -, fw, ), ;, p, =, (, x]
[=, (, x, -, v, ), *, (, fx, -, fw, ), ;, p, =, (, x, -, v, )]
[;, p, =, (, x, -, v, ), *, q, -, (, x, -, w, ), *, r, ;, q]
[*, (, fx, -, fw, ), ;, p, =, (, x, -, v, ), *, q, -, (, x, -]
[), *, (, fx, -, fw, ), ;, p, =, (, x, -, v, ), *, q, -, (, x]
[-, v, ), *, (, fx, -, fw, ), ;, p, =, (, x, -, v, ), *, q, -]
[), *, (, fx, -, fw, ), ;, p, =, (, x, -, v, ), *, q, -, (, x]
[;, p, =, (, x, -, v, ), *, q, -, (, x, -, w, ), *, r, ;, q]
[), ;, p, =, (, x, -, v, ), *, q, -, (, x, -, w, ), *, r, ;]
[-, fw, ), ;, p, =, (, x, -, v, ), *, q, -, (, x, -, w, ), *]
[), ;, p, =, (, x, -, v, ), *, q, -, (, x, -, w, ), *, r, ;]
[=, (, x, -, v, ), *, q, -, (, x, -, w, ), *, r, ;, q, =, 2]
[;, q, =, 2, *, (, q, -, r, ), ;, if, (, q, >, 0, ), {, p, =]
[-, (, x, -, w, ), *, r, ;, q, =, 2, *, (, q, -, r, ), ;, if]
[*, q, -, (, x, -, w, ), *, r, ;, q, =, 2, *, (, q, -, r, )]
[), *, q, -, (, x, -, w, ), *, r, ;, q, =, 2, *, (, q, -, r]
[-, v, ), *, q, -, (, x, -, w, ), *, r, ;, q, =, 2, *, (, q]
[), *, q, -, (, x, -, w, ), *, r, ;, q, =, 2, *, (, q, -, r]
[-, (, x, -, w, ), *, r, ;, q, =, 2, *, (, q, -, r, ), ;, if]
[;, q, =, 2, *, (, q, -, r, ), ;, if, (, q, >, 0, ), {, p, =]
[*, r, ;, q, =, 2, *, (, q, -, r, ), ;, if, (, q, >, 0, ), {]
[), *, r, ;, q, =, 2, *, (, q, -, r, ), ;, if, (, q, >, 0, )]
[-, w, ), *, r, ;, q, =, 2, *, (, q, -, r, ), ;, if, (, q, >]
[), *, r, ;, q, =, 2, *, (, q, -, r, ), ;, if, (, q, >, 0, )]
[;, q, =, 2, *, (, q, -, r, ), ;, if, (, q, >, 0, ), {, p, =]
[=, 2, *, (, q, -, r, ), ;, if, (, q, >, 0, ), {, p, =, -, p]
[;, if, (, q, >, 0, ), {, p, =, -, p, ;, }, else, {, q, =, -, q]
[*, (, q, -, r, ), ;, if, (, q, >, 0, ), {, p, =, -, p, ;, }]
[;, if, (, q, >, 0, ), {, p, =, -, p, ;, }, else, {, q, =, -, q]
[), ;, if, (, q, >, 0, ), {, p, =, -, p, ;, }, else, {, q, =, -]
[-, r, ), ;, if, (, q, >, 0, ), {, p, =, -, p, ;, }, else, {, q]
[), ;, if, (, q, >, 0, ), {, p, =, -, p, ;, }, else, {, q, =, -]
[), {, p, =, -, p, ;, }, else, {, q, =, -, q, ;, }, r, =, e, ;]
[>, 0, ), {, p, =, -, p, ;, }, else, {, q, =, -, q, ;, }, r, =]
[), {, p, =, -, p, ;, }, else, {, q, =, -, q, ;, }, r, =, e, ;]
[=, -, p, ;, }, else, {, q, =, -, q, ;, }, r, =, e, ;, e, =, d]
[;, }, else, {, q, =, -, q, ;, }, r, =, e, ;, e, =, d, ;, if, (]
[;, }, else, {, q, =, -, q, ;, }, r, =, e, ;, e, =, d, ;, if, (]
[=, -, q, ;, }, r, =, e, ;, e, =, d, ;, if, (, p, >, q, *, (]
[;, }, r, =, e, ;, e, =, d, ;, if, (, p, >, q, *, (, a, -, x]
[;, }, r, =, e, ;, e, =, d, ;, if, (, p, >, q, *, (, a, -, x]
[=, e, ;, e, =, d, ;, if, (, p, >, q, *, (, a, -, x, ), &&, p]
[;, e, =, d, ;, if, (, p, >, q, *, (, a, -, x, ), &&, p, <, q]
[=, d, ;, if, (, p, >, q, *, (, a, -, x, ), &&, p, <, q, *, (]
[;, if, (, p, >, q, *, (, a, -, x, ), &&, p, <, q, *, (, b, -]
[), {, d, =, p, /, q, ;, u, =, x, +, d, ;, if, (, u, -, a, <]
[&&, FastMath, ., abs, (, p, ), <, FastMath, ., abs, (, 0.5, *, q, *, r, ), ), {]
[&&, p, <, q, *, (, b, -, x, ), &&, FastMath, ., abs, (, p, ), <, FastMath, .]
[>, q, *, (, a, -, x, ), &&, p, <, q, *, (, b, -, x, ), &&, FastMath]
[&&, p, <, q, *, (, b, -, x, ), &&, FastMath, ., abs, (, p, ), <, FastMath, .]
[*, (, a, -, x, ), &&, p, <, q, *, (, b, -, x, ), &&, FastMath, ., abs]
[&&, p, <, q, *, (, b, -, x, ), &&, FastMath, ., abs, (, p, ), <, FastMath, .]
[), &&, p, <, q, *, (, b, -, x, ), &&, FastMath, ., abs, (, p, ), <, FastMath]
[-, x, ), &&, p, <, q, *, (, b, -, x, ), &&, FastMath, ., abs, (, p, )]
[), &&, p, <, q, *, (, b, -, x, ), &&, FastMath, ., abs, (, p, ), <, FastMath]
[&&, FastMath, ., abs, (, p, ), <, FastMath, ., abs, (, 0.5, *, q, *, r, ), ), {]
[<, q, *, (, b, -, x, ), &&, FastMath, ., abs, (, p, ), <, FastMath, ., abs, (]
[&&, FastMath, ., abs, (, p, ), <, FastMath, ., abs, (, 0.5, *, q, *, r, ), ), {]
[*, (, b, -, x, ), &&, FastMath, ., abs, (, p, ), <, FastMath, ., abs, (, 0.5, *]
[&&, FastMath, ., abs, (, p, ), <, FastMath, ., abs, (, 0.5, *, q, *, r, ), ), {]
[), &&, FastMath, ., abs, (, p, ), <, FastMath, ., abs, (, 0.5, *, q, *, r, ), )]
[-, x, ), &&, FastMath, ., abs, (, p, ), <, FastMath, ., abs, (, 0.5, *, q, *, r]
[), &&, FastMath, ., abs, (, p, ), <, FastMath, ., abs, (, 0.5, *, q, *, r, ), )]
[), {, d, =, p, /, q, ;, u, =, x, +, d, ;, if, (, u, -, a, <]
[<, FastMath, ., abs, (, 0.5, *, q, *, r, ), ), {, d, =, p, /, q, ;, u]
[., abs, (, p, ), <, FastMath, ., abs, (, 0.5, *, q, *, r, ), ), {, d, =]
[), <, FastMath, ., abs, (, 0.5, *, q, *, r, ), ), {, d, =, p, /, q, ;]
[), {, d, =, p, /, q, ;, u, =, x, +, d, ;, if, (, u, -, a, <]
[., abs, (, 0.5, *, q, *, r, ), ), {, d, =, p, /, q, ;, u, =, x]
[), ), {, d, =, p, /, q, ;, u, =, x, +, d, ;, if, (, u, -, a]
[*, r, ), ), {, d, =, p, /, q, ;, u, =, x, +, d, ;, if, (, u]
[*, q, *, r, ), ), {, d, =, p, /, q, ;, u, =, x, +, d, ;, if]
[*, r, ), ), {, d, =, p, /, q, ;, u, =, x, +, d, ;, if, (, u]
[), ), {, d, =, p, /, q, ;, u, =, x, +, d, ;, if, (, u, -, a]
[=, p, /, q, ;, u, =, x, +, d, ;, if, (, u, -, a, <, tol2, ||, b]
[;, u, =, x, +, d, ;, if, (, u, -, a, <, tol2, ||, b, -, u, <, tol2]
[/, q, ;, u, =, x, +, d, ;, if, (, u, -, a, <, tol2, ||, b, -, u]
[;, u, =, x, +, d, ;, if, (, u, -, a, <, tol2, ||, b, -, u, <, tol2]
[=, x, +, d, ;, if, (, u, -, a, <, tol2, ||, b, -, u, <, tol2, ), {]
[;, if, (, u, -, a, <, tol2, ||, b, -, u, <, tol2, ), {, if, (, x, <=]
[+, d, ;, if, (, u, -, a, <, tol2, ||, b, -, u, <, tol2, ), {, if, (]
[;, if, (, u, -, a, <, tol2, ||, b, -, u, <, tol2, ), {, if, (, x, <=]
[), {, if, (, x, <=, m, ), {, d, =, tol1, ;, }, else, {, d, =, -, tol1]
[||, b, -, u, <, tol2, ), {, if, (, x, <=, m, ), {, d, =, tol1, ;, }]
[<, tol2, ||, b, -, u, <, tol2, ), {, if, (, x, <=, m, ), {, d, =, tol1]
[-, a, <, tol2, ||, b, -, u, <, tol2, ), {, if, (, x, <=, m, ), {, d]
[<, tol2, ||, b, -, u, <, tol2, ), {, if, (, x, <=, m, ), {, d, =, tol1]
[||, b, -, u, <, tol2, ), {, if, (, x, <=, m, ), {, d, =, tol1, ;, }]
[), {, if, (, x, <=, m, ), {, d, =, tol1, ;, }, else, {, d, =, -, tol1]
[<, tol2, ), {, if, (, x, <=, m, ), {, d, =, tol1, ;, }, else, {, d, =]
[-, u, <, tol2, ), {, if, (, x, <=, m, ), {, d, =, tol1, ;, }, else, {]
[<, tol2, ), {, if, (, x, <=, m, ), {, d, =, tol1, ;, }, else, {, d, =]
[), {, if, (, x, <=, m, ), {, d, =, tol1, ;, }, else, {, d, =, -, tol1]
[), {, d, =, tol1, ;, }, else, {, d, =, -, tol1, ;, }, }, }, else, {, if]
[<=, m, ), {, d, =, tol1, ;, }, else, {, d, =, -, tol1, ;, }, }, }, else]
[), {, d, =, tol1, ;, }, else, {, d, =, -, tol1, ;, }, }, }, else, {, if]
[=, tol1, ;, }, else, {, d, =, -, tol1, ;, }, }, }, else, {, if, (, x, <]
[;, }, else, {, d, =, -, tol1, ;, }, }, }, else, {, if, (, x, <, m, )]
[=, -, tol1, ;, }, }, }, else, {, if, (, x, <, m, ), {, e, =, b, -]
[;, }, }, }, else, {, if, (, x, <, m, ), {, e, =, b, -, x, ;, }]
[;, }, }, }, else, {, if, (, x, <, m, ), {, e, =, b, -, x, ;, }]
[), {, e, =, b, -, x, ;, }, else, {, e, =, a, -, x, ;, }, d, =]
[<, m, ), {, e, =, b, -, x, ;, }, else, {, e, =, a, -, x, ;, }]
[), {, e, =, b, -, x, ;, }, else, {, e, =, a, -, x, ;, }, d, =]
[=, b, -, x, ;, }, else, {, e, =, a, -, x, ;, }, d, =, GOLDEN_SECTION, *, e]
[;, }, else, {, e, =, a, -, x, ;, }, d, =, GOLDEN_SECTION, *, e, ;, }, }, else]
[-, x, ;, }, else, {, e, =, a, -, x, ;, }, d, =, GOLDEN_SECTION, *, e, ;, }]
[;, }, else, {, e, =, a, -, x, ;, }, d, =, GOLDEN_SECTION, *, e, ;, }, }, else]
[=, a, -, x, ;, }, d, =, GOLDEN_SECTION, *, e, ;, }, }, else, {, if, (, x, <]
[;, }, d, =, GOLDEN_SECTION, *, e, ;, }, }, else, {, if, (, x, <, m, ), {, e]
[-, x, ;, }, d, =, GOLDEN_SECTION, *, e, ;, }, }, else, {, if, (, x, <, m, )]
[;, }, d, =, GOLDEN_SECTION, *, e, ;, }, }, else, {, if, (, x, <, m, ), {, e]
[=, GOLDEN_SECTION, *, e, ;, }, }, else, {, if, (, x, <, m, ), {, e, =, b, -]
[;, }, }, else, {, if, (, x, <, m, ), {, e, =, b, -, x, ;, }, else]
[*, e, ;, }, }, else, {, if, (, x, <, m, ), {, e, =, b, -, x, ;]
[;, }, }, else, {, if, (, x, <, m, ), {, e, =, b, -, x, ;, }, else]
[), {, e, =, b, -, x, ;, }, else, {, e, =, a, -, x, ;, }, d, =]
[<, m, ), {, e, =, b, -, x, ;, }, else, {, e, =, a, -, x, ;, }]
[), {, e, =, b, -, x, ;, }, else, {, e, =, a, -, x, ;, }, d, =]
[=, b, -, x, ;, }, else, {, e, =, a, -, x, ;, }, d, =, GOLDEN_SECTION, *, e]
[;, }, else, {, e, =, a, -, x, ;, }, d, =, GOLDEN_SECTION, *, e, ;, }, if, (]
[-, x, ;, }, else, {, e, =, a, -, x, ;, }, d, =, GOLDEN_SECTION, *, e, ;, }]
[;, }, else, {, e, =, a, -, x, ;, }, d, =, GOLDEN_SECTION, *, e, ;, }, if, (]
[=, a, -, x, ;, }, d, =, GOLDEN_SECTION, *, e, ;, }, if, (, FastMath, ., abs, (, d]
[;, }, d, =, GOLDEN_SECTION, *, e, ;, }, if, (, FastMath, ., abs, (, d, ), <, tol1, )]
[-, x, ;, }, d, =, GOLDEN_SECTION, *, e, ;, }, if, (, FastMath, ., abs, (, d, ), <]
[;, }, d, =, GOLDEN_SECTION, *, e, ;, }, if, (, FastMath, ., abs, (, d, ), <, tol1, )]
[=, GOLDEN_SECTION, *, e, ;, }, if, (, FastMath, ., abs, (, d, ), <, tol1, ), {, if, (]
[;, }, if, (, FastMath, ., abs, (, d, ), <, tol1, ), {, if, (, d, >=, 0, )]
[*, e, ;, }, if, (, FastMath, ., abs, (, d, ), <, tol1, ), {, if, (, d, >=]
[;, }, if, (, FastMath, ., abs, (, d, ), <, tol1, ), {, if, (, d, >=, 0, )]
[), {, if, (, d, >=, 0, ), {, u, =, x, +, tol1, ;, }, else, {, u, =]
[<, tol1, ), {, if, (, d, >=, 0, ), {, u, =, x, +, tol1, ;, }, else, {]
[., abs, (, d, ), <, tol1, ), {, if, (, d, >=, 0, ), {, u, =, x, +]
[), <, tol1, ), {, if, (, d, >=, 0, ), {, u, =, x, +, tol1, ;, }, else]
[), {, if, (, d, >=, 0, ), {, u, =, x, +, tol1, ;, }, else, {, u, =]
[), {, u, =, x, +, tol1, ;, }, else, {, u, =, x, -, tol1, ;, }, }, else]
[>=, 0, ), {, u, =, x, +, tol1, ;, }, else, {, u, =, x, -, tol1, ;, }]
[), {, u, =, x, +, tol1, ;, }, else, {, u, =, x, -, tol1, ;, }, }, else]
[=, x, +, tol1, ;, }, else, {, u, =, x, -, tol1, ;, }, }, else, {, u, =]
[;, }, else, {, u, =, x, -, tol1, ;, }, }, else, {, u, =, x, +, d, ;]
[+, tol1, ;, }, else, {, u, =, x, -, tol1, ;, }, }, else, {, u, =, x, +]
[;, }, else, {, u, =, x, -, tol1, ;, }, }, else, {, u, =, x, +, d, ;]
[=, x, -, tol1, ;, }, }, else, {, u, =, x, +, d, ;, }, double, fu, =, computeObjectiveValue]
[;, }, }, else, {, u, =, x, +, d, ;, }, double, fu, =, computeObjectiveValue, (, u, ), ;]
[-, tol1, ;, }, }, else, {, u, =, x, +, d, ;, }, double, fu, =, computeObjectiveValue, (, u]
[;, }, }, else, {, u, =, x, +, d, ;, }, double, fu, =, computeObjectiveValue, (, u, ), ;]
[=, x, +, d, ;, }, double, fu, =, computeObjectiveValue, (, u, ), ;, if, (, !, isMinim, ), {]
[;, }, double, fu, =, computeObjectiveValue, (, u, ), ;, if, (, !, isMinim, ), {, fu, =, -, fu]
[+, d, ;, }, double, fu, =, computeObjectiveValue, (, u, ), ;, if, (, !, isMinim, ), {, fu, =]
[;, }, double, fu, =, computeObjectiveValue, (, u, ), ;, if, (, !, isMinim, ), {, fu, =, -, fu]
[;, if, (, !, isMinim, ), {, fu, =, -, fu, ;, }, previous, =, current, ;, current, =, new]
[), ;, if, (, !, isMinim, ), {, fu, =, -, fu, ;, }, previous, =, current, ;, current, =]
[), {, fu, =, -, fu, ;, }, previous, =, current, ;, current, =, new, UnivariatePointValuePair, (, u, ,, isMinim]
[), {, fu, =, -, fu, ;, }, previous, =, current, ;, current, =, new, UnivariatePointValuePair, (, u, ,, isMinim]
[=, -, fu, ;, }, previous, =, current, ;, current, =, new, UnivariatePointValuePair, (, u, ,, isMinim, ?, fu, :]
[;, }, previous, =, current, ;, current, =, new, UnivariatePointValuePair, (, u, ,, isMinim, ?, fu, :, -, fu, )]
[;, }, previous, =, current, ;, current, =, new, UnivariatePointValuePair, (, u, ,, isMinim, ?, fu, :, -, fu, )]
[=, current, ;, current, =, new, UnivariatePointValuePair, (, u, ,, isMinim, ?, fu, :, -, fu, ), ;, best, =]
[;, current, =, new, UnivariatePointValuePair, (, u, ,, isMinim, ?, fu, :, -, fu, ), ;, best, =, best, (]
[=, new, UnivariatePointValuePair, (, u, ,, isMinim, ?, fu, :, -, fu, ), ;, best, =, best, (, best, ,]
[;, best, =, best, (, best, ,, best, (, previous, ,, current, ,, isMinim, ), ,, isMinim, ), ;, if]
[,, isMinim, ?, fu, :, -, fu, ), ;, best, =, best, (, best, ,, best, (, previous, ,, current]
[), ;, best, =, best, (, best, ,, best, (, previous, ,, current, ,, isMinim, ), ,, isMinim, ), ;]
[?, fu, :, -, fu, ), ;, best, =, best, (, best, ,, best, (, previous, ,, current, ,, isMinim]
[:, -, fu, ), ;, best, =, best, (, best, ,, best, (, previous, ,, current, ,, isMinim, ), ,]
[), ;, best, =, best, (, best, ,, best, (, previous, ,, current, ,, isMinim, ), ,, isMinim, ), ;]
[), ;, best, =, best, (, best, ,, best, (, previous, ,, current, ,, isMinim, ), ,, isMinim, ), ;]
[=, best, (, best, ,, best, (, previous, ,, current, ,, isMinim, ), ,, isMinim, ), ;, if, (, checker]
[;, if, (, checker, !=, null, &&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, return]
[,, best, (, previous, ,, current, ,, isMinim, ), ,, isMinim, ), ;, if, (, checker, !=, null, &&, checker]
[,, isMinim, ), ;, if, (, checker, !=, null, &&, checker, ., converged, (, iter, ,, previous, ,, current, )]
[,, current, ,, isMinim, ), ,, isMinim, ), ;, if, (, checker, !=, null, &&, checker, ., converged, (, iter]
[,, isMinim, ), ,, isMinim, ), ;, if, (, checker, !=, null, &&, checker, ., converged, (, iter, ,, previous]
[), ,, isMinim, ), ;, if, (, checker, !=, null, &&, checker, ., converged, (, iter, ,, previous, ,, current]
[), ;, if, (, checker, !=, null, &&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {]
[), {, return, best, ;, }, if, (, fu, <=, fx, ), {, if, (, u, <, x, ), {]
[&&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, return, best, ;, }, if, (, fu]
[!=, null, &&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, return, best, ;, }, if]
[&&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, return, best, ;, }, if, (, fu]
[), {, return, best, ;, }, if, (, fu, <=, fx, ), {, if, (, u, <, x, ), {]
[., converged, (, iter, ,, previous, ,, current, ), ), {, return, best, ;, }, if, (, fu, <=, fx]
[,, previous, ,, current, ), ), {, return, best, ;, }, if, (, fu, <=, fx, ), {, if, (]
[,, current, ), ), {, return, best, ;, }, if, (, fu, <=, fx, ), {, if, (, u, <]
[), ), {, return, best, ;, }, if, (, fu, <=, fx, ), {, if, (, u, <, x, )]
[;, }, if, (, fu, <=, fx, ), {, if, (, u, <, x, ), {, b, =, x, ;]
[), {, if, (, u, <, x, ), {, b, =, x, ;, }, else, {, a, =, x, ;]
[<=, fx, ), {, if, (, u, <, x, ), {, b, =, x, ;, }, else, {, a, =]
[), {, if, (, u, <, x, ), {, b, =, x, ;, }, else, {, a, =, x, ;]
[), {, b, =, x, ;, }, else, {, a, =, x, ;, }, v, =, w, ;, fv, =]
[<, x, ), {, b, =, x, ;, }, else, {, a, =, x, ;, }, v, =, w, ;]
[), {, b, =, x, ;, }, else, {, a, =, x, ;, }, v, =, w, ;, fv, =]
[=, x, ;, }, else, {, a, =, x, ;, }, v, =, w, ;, fv, =, fw, ;, w]
[;, }, else, {, a, =, x, ;, }, v, =, w, ;, fv, =, fw, ;, w, =, x]
[=, x, ;, }, v, =, w, ;, fv, =, fw, ;, w, =, x, ;, fw, =, fx, ;]
[;, }, v, =, w, ;, fv, =, fw, ;, w, =, x, ;, fw, =, fx, ;, x, =]
[=, w, ;, fv, =, fw, ;, w, =, x, ;, fw, =, fx, ;, x, =, u, ;, fx]
[;, fv, =, fw, ;, w, =, x, ;, fw, =, fx, ;, x, =, u, ;, fx, =, fu]
[=, fw, ;, w, =, x, ;, fw, =, fx, ;, x, =, u, ;, fx, =, fu, ;, }]
[;, w, =, x, ;, fw, =, fx, ;, x, =, u, ;, fx, =, fu, ;, }, else, {]
[=, x, ;, fw, =, fx, ;, x, =, u, ;, fx, =, fu, ;, }, else, {, if, (]
[;, fw, =, fx, ;, x, =, u, ;, fx, =, fu, ;, }, else, {, if, (, u, <]
[=, fx, ;, x, =, u, ;, fx, =, fu, ;, }, else, {, if, (, u, <, x, )]
[;, x, =, u, ;, fx, =, fu, ;, }, else, {, if, (, u, <, x, ), {, a]
[=, u, ;, fx, =, fu, ;, }, else, {, if, (, u, <, x, ), {, a, =, u]
[;, fx, =, fu, ;, }, else, {, if, (, u, <, x, ), {, a, =, u, ;, }]
[=, fu, ;, }, else, {, if, (, u, <, x, ), {, a, =, u, ;, }, else, {]
[;, }, else, {, if, (, u, <, x, ), {, a, =, u, ;, }, else, {, b, =]
[), {, a, =, u, ;, }, else, {, b, =, u, ;, }, if, (, fu, <=, fw, ||]
[<, x, ), {, a, =, u, ;, }, else, {, b, =, u, ;, }, if, (, fu, <=]
[), {, a, =, u, ;, }, else, {, b, =, u, ;, }, if, (, fu, <=, fw, ||]
[=, u, ;, }, else, {, b, =, u, ;, }, if, (, fu, <=, fw, ||, Precision, ., equals]
[;, }, else, {, b, =, u, ;, }, if, (, fu, <=, fw, ||, Precision, ., equals, (, w]
[=, u, ;, }, if, (, fu, <=, fw, ||, Precision, ., equals, (, w, ,, x, ), ), {]
[;, }, if, (, fu, <=, fw, ||, Precision, ., equals, (, w, ,, x, ), ), {, v, =]
[), {, v, =, w, ;, fv, =, fw, ;, w, =, u, ;, fw, =, fu, ;, }, else]
[||, Precision, ., equals, (, w, ,, x, ), ), {, v, =, w, ;, fv, =, fw, ;, w]
[<=, fw, ||, Precision, ., equals, (, w, ,, x, ), ), {, v, =, w, ;, fv, =, fw]
[||, Precision, ., equals, (, w, ,, x, ), ), {, v, =, w, ;, fv, =, fw, ;, w]
[), {, v, =, w, ;, fv, =, fw, ;, w, =, u, ;, fw, =, fu, ;, }, else]
[., equals, (, w, ,, x, ), ), {, v, =, w, ;, fv, =, fw, ;, w, =, u]
[,, x, ), ), {, v, =, w, ;, fv, =, fw, ;, w, =, u, ;, fw, =, fu]
[), ), {, v, =, w, ;, fv, =, fw, ;, w, =, u, ;, fw, =, fu, ;, }]
[=, w, ;, fv, =, fw, ;, w, =, u, ;, fw, =, fu, ;, }, else, if, (, fu]
[;, fv, =, fw, ;, w, =, u, ;, fw, =, fu, ;, }, else, if, (, fu, <=, fv]
[=, fw, ;, w, =, u, ;, fw, =, fu, ;, }, else, if, (, fu, <=, fv, ||, Precision]
[;, w, =, u, ;, fw, =, fu, ;, }, else, if, (, fu, <=, fv, ||, Precision, ., equals]
[=, u, ;, fw, =, fu, ;, }, else, if, (, fu, <=, fv, ||, Precision, ., equals, (, v]
[;, fw, =, fu, ;, }, else, if, (, fu, <=, fv, ||, Precision, ., equals, (, v, ,, x]
[=, fu, ;, }, else, if, (, fu, <=, fv, ||, Precision, ., equals, (, v, ,, x, ), ||]
[;, }, else, if, (, fu, <=, fv, ||, Precision, ., equals, (, v, ,, x, ), ||, Precision, .]
[), {, v, =, u, ;, fv, =, fu, ;, }, }, }, else, {, return, best, (, best, ,]
[||, Precision, ., equals, (, v, ,, w, ), ), {, v, =, u, ;, fv, =, fu, ;, }]
[||, Precision, ., equals, (, v, ,, x, ), ||, Precision, ., equals, (, v, ,, w, ), ), {]
[<=, fv, ||, Precision, ., equals, (, v, ,, x, ), ||, Precision, ., equals, (, v, ,, w, )]
[||, Precision, ., equals, (, v, ,, x, ), ||, Precision, ., equals, (, v, ,, w, ), ), {]
[||, Precision, ., equals, (, v, ,, w, ), ), {, v, =, u, ;, fv, =, fu, ;, }]
[., equals, (, v, ,, x, ), ||, Precision, ., equals, (, v, ,, w, ), ), {, v, =]
[,, x, ), ||, Precision, ., equals, (, v, ,, w, ), ), {, v, =, u, ;, fv, =]
[), ||, Precision, ., equals, (, v, ,, w, ), ), {, v, =, u, ;, fv, =, fu, ;]
[), {, v, =, u, ;, fv, =, fu, ;, }, }, }, else, {, return, best, (, best, ,]
[., equals, (, v, ,, w, ), ), {, v, =, u, ;, fv, =, fu, ;, }, }, }]
[,, w, ), ), {, v, =, u, ;, fv, =, fu, ;, }, }, }, else, {, return, best]
[), ), {, v, =, u, ;, fv, =, fu, ;, }, }, }, else, {, return, best, (, best]
[=, u, ;, fv, =, fu, ;, }, }, }, else, {, return, best, (, best, ,, best, (, previous]
[;, fv, =, fu, ;, }, }, }, else, {, return, best, (, best, ,, best, (, previous, ,, current]
[=, fu, ;, }, }, }, else, {, return, best, (, best, ,, best, (, previous, ,, current, ,, isMinim]
[;, }, }, }, else, {, return, best, (, best, ,, best, (, previous, ,, current, ,, isMinim, ), ,]
[;, }, ++, iter, ;, }, }, private, UnivariatePointValuePair, best, (, UnivariatePointValuePair, a, ,, UnivariatePointValuePair, b, ,, boolean, isMinim, )]
[,, best, (, previous, ,, current, ,, isMinim, ), ,, isMinim, ), ;, }, ++, iter, ;, }, }, private]
[,, isMinim, ), ;, }, ++, iter, ;, }, }, private, UnivariatePointValuePair, best, (, UnivariatePointValuePair, a, ,, UnivariatePointValuePair, b, ,]
[,, current, ,, isMinim, ), ,, isMinim, ), ;, }, ++, iter, ;, }, }, private, UnivariatePointValuePair, best, (, UnivariatePointValuePair]
[,, isMinim, ), ,, isMinim, ), ;, }, ++, iter, ;, }, }, private, UnivariatePointValuePair, best, (, UnivariatePointValuePair, a, ,]
[), ,, isMinim, ), ;, }, ++, iter, ;, }, }, private, UnivariatePointValuePair, best, (, UnivariatePointValuePair, a, ,, UnivariatePointValuePair, b]
[), ;, }, ++, iter, ;, }, }, private, UnivariatePointValuePair, best, (, UnivariatePointValuePair, a, ,, UnivariatePointValuePair, b, ,, boolean, isMinim]
[;, }, }, private, UnivariatePointValuePair, best, (, UnivariatePointValuePair, a, ,, UnivariatePointValuePair, b, ,, boolean, isMinim, ), {, if, (, a]
[;, }, }, private, UnivariatePointValuePair, best, (, UnivariatePointValuePair, a, ,, UnivariatePointValuePair, b, ,, boolean, isMinim, ), {, if, (, a]
[), {, return, b, ;, }, if, (, b, ==, null, ), {, return, a, ;, }, if, (, isMinim]
[==, null, ), {, return, b, ;, }, if, (, b, ==, null, ), {, return, a, ;, }, if]
[), {, return, b, ;, }, if, (, b, ==, null, ), {, return, a, ;, }, if, (, isMinim]
[;, }, if, (, b, ==, null, ), {, return, a, ;, }, if, (, isMinim, ), {, return, a]
[), {, return, a, ;, }, if, (, isMinim, ), {, return, a, ., getValue, (, ), <=, b, .]
[==, null, ), {, return, a, ;, }, if, (, isMinim, ), {, return, a, ., getValue, (, ), <=]
[), {, return, a, ;, }, if, (, isMinim, ), {, return, a, ., getValue, (, ), <=, b, .]
[;, }, if, (, isMinim, ), {, return, a, ., getValue, (, ), <=, b, ., getValue, (, ), ?]
[), {, return, a, ., getValue, (, ), <=, b, ., getValue, (, ), ?, a, :, b, ;, }]
[;, }, else, {, return, a, ., getValue, (, ), >=, b, ., getValue, (, ), ?, a, :, b]
[?, a, :, b, ;, }, else, {, return, a, ., getValue, (, ), >=, b, ., getValue, (, )]
[<=, b, ., getValue, (, ), ?, a, :, b, ;, }, else, {, return, a, ., getValue, (, )]
[., getValue, (, ), <=, b, ., getValue, (, ), ?, a, :, b, ;, }, else, {, return, a]
[?, a, :, b, ;, }, else, {, return, a, ., getValue, (, ), >=, b, ., getValue, (, )]
[., getValue, (, ), ?, a, :, b, ;, }, else, {, return, a, ., getValue, (, ), >=, b]
[:, b, ;, }, else, {, return, a, ., getValue, (, ), >=, b, ., getValue, (, ), ?, a]
[;, }, else, {, return, a, ., getValue, (, ), >=, b, ., getValue, (, ), ?, a, :, b]
[;, }, }, }]
[?, a, :, b, ;, }, }, }]
[>=, b, ., getValue, (, ), ?, a, :, b, ;, }, }, }]
[., getValue, (, ), >=, b, ., getValue, (, ), ?, a, :, b, ;, }, }, }]
[?, a, :, b, ;, }, }, }]
[., getValue, (, ), ?, a, :, b, ;, }, }, }]
[:, b, ;, }, }, }]
[;, }, }, }]
