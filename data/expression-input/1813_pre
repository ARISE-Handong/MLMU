[{, private, final, AbstractCompiler, compiler, ;, private, final, CodingConvention, convention, ;, private, final, CheckLevel, level, ;, private, GlobalNamespace, namespace, =]
[;, private, final, CheckLevel, level, ;, private, GlobalNamespace, namespace, =, null, ;, private, final, Set, <, String, >, objectPrototypeProps, =]
[;, private, final, CheckLevel, level, ;, private, GlobalNamespace, namespace, =, null, ;, private, final, Set, <, String, >, objectPrototypeProps, =]
[Set, <, String, >, objectPrototypeProps, =, Sets, ., newHashSet, (, ), ;, private, final, Set, <, String, >, functionPrototypeProps, =]
[Set, <, String, >, objectPrototypeProps, =, Sets, ., newHashSet, (, ), ;, private, final, Set, <, String, >, functionPrototypeProps, =]
[;, private, final, Set, <, String, >, functionPrototypeProps, =, Sets, ., newHashSet, (, ), ;, static, final, DiagnosticType, UNDEFINED_NAME_WARNING, =]
[;, private, final, Set, <, String, >, functionPrototypeProps, =, Sets, ., newHashSet, (, ), ;, static, final, DiagnosticType, UNDEFINED_NAME_WARNING, =]
[<, String, >, functionPrototypeProps, =, Sets, ., newHashSet, (, ), ;, static, final, DiagnosticType, UNDEFINED_NAME_WARNING, =, DiagnosticType, ., warning, (]
[>, functionPrototypeProps, =, Sets, ., newHashSet, (, ), ;, static, final, DiagnosticType, UNDEFINED_NAME_WARNING, =, DiagnosticType, ., warning, (, "JSC_UNDEFINED_NAME", ,]
[;, static, final, DiagnosticType, UNDEFINED_NAME_WARNING, =, DiagnosticType, ., warning, (, "JSC_UNDEFINED_NAME", ,, "{0} is never defined", ), ;, static, final, DiagnosticType, NAME_DEFINED_LATE_WARNING, =]
[;, static, final, DiagnosticType, UNDEFINED_NAME_WARNING, =, DiagnosticType, ., warning, (, "JSC_UNDEFINED_NAME", ,, "{0} is never defined", ), ;, static, final, DiagnosticType, NAME_DEFINED_LATE_WARNING, =]
[UNDEFINED_NAME_WARNING, =, DiagnosticType, ., warning, (, "JSC_UNDEFINED_NAME", ,, "{0} is never defined", ), ;, static, final, DiagnosticType, NAME_DEFINED_LATE_WARNING, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_UNDEFINED_NAME", ,, "{0} is never defined", ), ;, static, final, DiagnosticType, NAME_DEFINED_LATE_WARNING, =, DiagnosticType, ., warning, (, "JSC_NAME_DEFINED_LATE", ,]
[;, static, final, DiagnosticType, NAME_DEFINED_LATE_WARNING, =, DiagnosticType, ., warning, (, "JSC_NAME_DEFINED_LATE", ,, "{0} defined before its owner. {1} is defined at {2}:{3}", ), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_QNAME, =]
[;, static, final, DiagnosticType, NAME_DEFINED_LATE_WARNING, =, DiagnosticType, ., warning, (, "JSC_NAME_DEFINED_LATE", ,, "{0} defined before its owner. {1} is defined at {2}:{3}", ), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_QNAME, =]
[NAME_DEFINED_LATE_WARNING, =, DiagnosticType, ., warning, (, "JSC_NAME_DEFINED_LATE", ,, "{0} defined before its owner. {1} is defined at {2}:{3}", ), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_QNAME, =, DiagnosticType, ., disabled, (]
[DiagnosticType, ., warning, (, "JSC_NAME_DEFINED_LATE", ,, "{0} defined before its owner. {1} is defined at {2}:{3}", ), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_QNAME, =, DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEP_QNAME", ,]
[DiagnosticType, ., warning, (, "JSC_NAME_DEFINED_LATE", ,, "{0} defined before its owner. {1} is defined at {2}:{3}", ), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_QNAME, =, DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEP_QNAME", ,]
[warning, (, "JSC_NAME_DEFINED_LATE", ,, "{0} defined before its owner. {1} is defined at {2}:{3}", ), ;, static, final, DiagnosticType, STRICT_MODULE_DEP_QNAME, =, DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEP_QNAME", ,, "module {0} cannot reference {2}, defined in ", +]
[DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEP_QNAME", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}", ), ;, CheckGlobalNames, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {]
[DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEP_QNAME", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}", ), ;, CheckGlobalNames, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {]
["JSC_STRICT_MODULE_DEP_QNAME", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}", ), ;, CheckGlobalNames, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =]
["module {0} cannot reference {2}, defined in ", +, "module {1}", ), ;, CheckGlobalNames, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =, compiler, ;]
["module {0} cannot reference {2}, defined in ", +, "module {1}", ), ;, CheckGlobalNames, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =, compiler, ;]
[;, CheckGlobalNames, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =, compiler, ;, this, ., convention, =]
[;, CheckGlobalNames, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =, compiler, ;, this, ., convention, =]
[CheckLevel, level, ), {, this, ., compiler, =, compiler, ;, this, ., convention, =, compiler, ., getCodingConvention, (, ), ;]
[CheckLevel, level, ), {, this, ., compiler, =, compiler, ;, this, ., convention, =, compiler, ., getCodingConvention, (, ), ;]
[this, ., compiler, =, compiler, ;, this, ., convention, =, compiler, ., getCodingConvention, (, ), ;, this, ., level, =]
[compiler, ., getCodingConvention, (, ), ;, this, ., level, =, level, ;, }, CheckGlobalNames, injectNamespace, (, GlobalNamespace, namespace, ), {]
[compiler, ., getCodingConvention, (, ), ;, this, ., level, =, level, ;, }, CheckGlobalNames, injectNamespace, (, GlobalNamespace, namespace, ), {]
[), ;, this, ., level, =, level, ;, }, CheckGlobalNames, injectNamespace, (, GlobalNamespace, namespace, ), {, Preconditions, ., checkArgument, (]
[), ;, this, ., level, =, level, ;, }, CheckGlobalNames, injectNamespace, (, GlobalNamespace, namespace, ), {, Preconditions, ., checkArgument, (]
[;, }, CheckGlobalNames, injectNamespace, (, GlobalNamespace, namespace, ), {, Preconditions, ., checkArgument, (, namespace, ., hasExternsRoot, (, ), ), ;]
[;, }, CheckGlobalNames, injectNamespace, (, GlobalNamespace, namespace, ), {, Preconditions, ., checkArgument, (, namespace, ., hasExternsRoot, (, ), ), ;]
[(, GlobalNamespace, namespace, ), {, Preconditions, ., checkArgument, (, namespace, ., hasExternsRoot, (, ), ), ;, this, ., namespace, =]
[), {, Preconditions, ., checkArgument, (, namespace, ., hasExternsRoot, (, ), ), ;, this, ., namespace, =, namespace, ;, return]
[;, return, this, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (]
[;, return, this, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (]
[this, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, namespace, ==]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, namespace, ==, null, ), {]
[public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, namespace, ==, null, ), {, namespace, =]
[(, Node, externs, ,, Node, root, ), {, if, (, namespace, ==, null, ), {, namespace, =, new, GlobalNamespace, (]
[externs, ,, Node, root, ), {, if, (, namespace, ==, null, ), {, namespace, =, new, GlobalNamespace, (, compiler, ,]
[Node, root, ), {, if, (, namespace, ==, null, ), {, namespace, =, new, GlobalNamespace, (, compiler, ,, externs, ,]
[if, (, namespace, ==, null, ), {, namespace, =, new, GlobalNamespace, (, compiler, ,, externs, ,, root, ), ;, }]
[if, (, namespace, ==, null, ), {, namespace, =, new, GlobalNamespace, (, compiler, ,, externs, ,, root, ), ;, }]
[null, ), {, namespace, =, new, GlobalNamespace, (, compiler, ,, externs, ,, root, ), ;, }, Preconditions, ., checkState, (]
[null, ), {, namespace, =, new, GlobalNamespace, (, compiler, ,, externs, ,, root, ), ;, }, Preconditions, ., checkState, (]
[(, compiler, ,, externs, ,, root, ), ;, }, Preconditions, ., checkState, (, namespace, ., hasExternsRoot, (, ), ), ;]
[,, externs, ,, root, ), ;, }, Preconditions, ., checkState, (, namespace, ., hasExternsRoot, (, ), ), ;, findPrototypeProps, (]
[,, root, ), ;, }, Preconditions, ., checkState, (, namespace, ., hasExternsRoot, (, ), ), ;, findPrototypeProps, (, "Object", ,]
[;, }, Preconditions, ., checkState, (, namespace, ., hasExternsRoot, (, ), ), ;, findPrototypeProps, (, "Object", ,, objectPrototypeProps, ), ;]
[Preconditions, ., checkState, (, namespace, ., hasExternsRoot, (, ), ), ;, findPrototypeProps, (, "Object", ,, objectPrototypeProps, ), ;, findPrototypeProps, (]
[checkState, (, namespace, ., hasExternsRoot, (, ), ), ;, findPrototypeProps, (, "Object", ,, objectPrototypeProps, ), ;, findPrototypeProps, (, "Function", ,]
[., hasExternsRoot, (, ), ), ;, findPrototypeProps, (, "Object", ,, objectPrototypeProps, ), ;, findPrototypeProps, (, "Function", ,, functionPrototypeProps, ), ;]
[., hasExternsRoot, (, ), ), ;, findPrototypeProps, (, "Object", ,, objectPrototypeProps, ), ;, findPrototypeProps, (, "Function", ,, functionPrototypeProps, ), ;]
[), ;, findPrototypeProps, (, "Object", ,, objectPrototypeProps, ), ;, findPrototypeProps, (, "Function", ,, functionPrototypeProps, ), ;, objectPrototypeProps, ., addAll, (]
[), ;, findPrototypeProps, (, "Object", ,, objectPrototypeProps, ), ;, findPrototypeProps, (, "Function", ,, functionPrototypeProps, ), ;, objectPrototypeProps, ., addAll, (]
[,, functionPrototypeProps, ), ;, objectPrototypeProps, ., addAll, (, convention, ., getIndirectlyDeclaredProperties, (, ), ), ;, for, (, Name, name, :]
[,, functionPrototypeProps, ), ;, objectPrototypeProps, ., addAll, (, convention, ., getIndirectlyDeclaredProperties, (, ), ), ;, for, (, Name, name, :]
[., getIndirectlyDeclaredProperties, (, ), ), ;, for, (, Name, name, :, namespace, ., getNameForest, (, ), ), {, if, (]
[., getIndirectlyDeclaredProperties, (, ), ), ;, for, (, Name, name, :, namespace, ., getNameForest, (, ), ), {, if, (]
[Name, name, :, namespace, ., getNameForest, (, ), ), {, if, (, name, ., inExterns, ), {, continue, ;, }]
[:, namespace, ., getNameForest, (, ), ), {, if, (, name, ., inExterns, ), {, continue, ;, }, checkDescendantNames, (]
[., getNameForest, (, ), ), {, if, (, name, ., inExterns, ), {, continue, ;, }, checkDescendantNames, (, name, ,]
[., getNameForest, (, ), ), {, if, (, name, ., inExterns, ), {, continue, ;, }, checkDescendantNames, (, name, ,]
[., getNameForest, (, ), ), {, if, (, name, ., inExterns, ), {, continue, ;, }, checkDescendantNames, (, name, ,]
[., getNameForest, (, ), ), {, if, (, name, ., inExterns, ), {, continue, ;, }, checkDescendantNames, (, name, ,]
[), {, if, (, name, ., inExterns, ), {, continue, ;, }, checkDescendantNames, (, name, ,, name, ., globalSets, +]
[), {, if, (, name, ., inExterns, ), {, continue, ;, }, checkDescendantNames, (, name, ,, name, ., globalSets, +]
[name, ., inExterns, ), {, continue, ;, }, checkDescendantNames, (, name, ,, name, ., globalSets, +, name, ., localSets, >]
[;, }, }, private, void, findPrototypeProps, (, String, type, ,, Set, <, String, >, props, ), {, Name, slot, =]
[;, }, }, private, void, findPrototypeProps, (, String, type, ,, Set, <, String, >, props, ), {, Name, slot, =]
[void, findPrototypeProps, (, String, type, ,, Set, <, String, >, props, ), {, Name, slot, =, namespace, ., getSlot, (]
[,, Set, <, String, >, props, ), {, Name, slot, =, namespace, ., getSlot, (, type, ), ;, if, (]
[,, Set, <, String, >, props, ), {, Name, slot, =, namespace, ., getSlot, (, type, ), ;, if, (]
[<, String, >, props, ), {, Name, slot, =, namespace, ., getSlot, (, type, ), ;, if, (, slot, !=]
[=, namespace, ., getSlot, (, type, ), ;, if, (, slot, !=, null, ), {, for, (, Ref, ref, :]
[=, namespace, ., getSlot, (, type, ), ;, if, (, slot, !=, null, ), {, for, (, Ref, ref, :]
[(, slot, !=, null, ), {, for, (, Ref, ref, :, slot, ., getRefs, (, ), ), {, if, (]
[(, slot, !=, null, ), {, for, (, Ref, ref, :, slot, ., getRefs, (, ), ), {, if, (]
[(, slot, !=, null, ), {, for, (, Ref, ref, :, slot, ., getRefs, (, ), ), {, if, (]
[), {, for, (, Ref, ref, :, slot, ., getRefs, (, ), ), {, if, (, ref, ., type, ==]
[), {, for, (, Ref, ref, :, slot, ., getRefs, (, ), ), {, if, (, ref, ., type, ==]
[), {, for, (, Ref, ref, :, slot, ., getRefs, (, ), ), {, if, (, ref, ., type, ==]
[(, ), ), {, if, (, ref, ., type, ==, Ref, ., Type, ., PROTOTYPE_GET, ), {, Node, fullName, =]
[(, ), ), {, if, (, ref, ., type, ==, Ref, ., Type, ., PROTOTYPE_GET, ), {, Node, fullName, =]
[(, ), ), {, if, (, ref, ., type, ==, Ref, ., Type, ., PROTOTYPE_GET, ), {, Node, fullName, =]
[(, ), ), {, if, (, ref, ., type, ==, Ref, ., Type, ., PROTOTYPE_GET, ), {, Node, fullName, =]
[{, Node, fullName, =, ref, ., getNode, (, ), ., getParent, (, ), ., getParent, (, ), ;, if, (]
[{, Node, fullName, =, ref, ., getNode, (, ), ., getParent, (, ), ., getParent, (, ), ;, if, (]
[(, ), ., getParent, (, ), ., getParent, (, ), ;, if, (, fullName, ., isGetProp, (, ), ), {]
[(, ), ., getParent, (, ), ., getParent, (, ), ;, if, (, fullName, ., isGetProp, (, ), ), {]
[(, ), ., getParent, (, ), ;, if, (, fullName, ., isGetProp, (, ), ), {, props, ., add, (]
[(, ), ., getParent, (, ), ;, if, (, fullName, ., isGetProp, (, ), ), {, props, ., add, (]
[(, ), ., getParent, (, ), ;, if, (, fullName, ., isGetProp, (, ), ), {, props, ., add, (]
[), ;, }, }, }, }, }, private, void, checkDescendantNames, (, Name, name, ,, boolean, nameIsDefined, ), {, if, (]
[), ;, }, }, }, }, }, private, void, checkDescendantNames, (, Name, name, ,, boolean, nameIsDefined, ), {, if, (]
[), ;, }, }, }, }, }, private, void, checkDescendantNames, (, Name, name, ,, boolean, nameIsDefined, ), {, if, (]
[}, }, }, private, void, checkDescendantNames, (, Name, name, ,, boolean, nameIsDefined, ), {, if, (, name, ., props, !=]
[name, ,, boolean, nameIsDefined, ), {, if, (, name, ., props, !=, null, ), {, for, (, Name, prop, :]
[name, ,, boolean, nameIsDefined, ), {, if, (, name, ., props, !=, null, ), {, for, (, Name, prop, :]
[name, ., props, !=, null, ), {, for, (, Name, prop, :, name, ., props, ), {, boolean, propIsDefined, =]
[null, ), {, for, (, Name, prop, :, name, ., props, ), {, boolean, propIsDefined, =, false, ;, if, (]
[for, (, Name, prop, :, name, ., props, ), {, boolean, propIsDefined, =, false, ;, if, (, nameIsDefined, ), {]
[Name, prop, :, name, ., props, ), {, boolean, propIsDefined, =, false, ;, if, (, nameIsDefined, ), {, propIsDefined, =]
[prop, :, name, ., props, ), {, boolean, propIsDefined, =, false, ;, if, (, nameIsDefined, ), {, propIsDefined, =, (]
[prop, :, name, ., props, ), {, boolean, propIsDefined, =, false, ;, if, (, nameIsDefined, ), {, propIsDefined, =, (]
[:, name, ., props, ), {, boolean, propIsDefined, =, false, ;, if, (, nameIsDefined, ), {, propIsDefined, =, (, !]
[., props, ), {, boolean, propIsDefined, =, false, ;, if, (, nameIsDefined, ), {, propIsDefined, =, (, !, propertyMustBeInitializedByFullName, (]
[{, boolean, propIsDefined, =, false, ;, if, (, nameIsDefined, ), {, propIsDefined, =, (, !, propertyMustBeInitializedByFullName, (, prop, ), ||]
[{, boolean, propIsDefined, =, false, ;, if, (, nameIsDefined, ), {, propIsDefined, =, (, !, propertyMustBeInitializedByFullName, (, prop, ), ||]
[{, boolean, propIsDefined, =, false, ;, if, (, nameIsDefined, ), {, propIsDefined, =, (, !, propertyMustBeInitializedByFullName, (, prop, ), ||]
[{, boolean, propIsDefined, =, false, ;, if, (, nameIsDefined, ), {, propIsDefined, =, (, !, propertyMustBeInitializedByFullName, (, prop, ), ||]
[false, ;, if, (, nameIsDefined, ), {, propIsDefined, =, (, !, propertyMustBeInitializedByFullName, (, prop, ), ||, prop, ., globalSets, +]
[false, ;, if, (, nameIsDefined, ), {, propIsDefined, =, (, !, propertyMustBeInitializedByFullName, (, prop, ), ||, prop, ., globalSets, +]
[nameIsDefined, ), {, propIsDefined, =, (, !, propertyMustBeInitializedByFullName, (, prop, ), ||, prop, ., globalSets, +, prop, ., localSets, >]
[=, (, !, propertyMustBeInitializedByFullName, (, prop, ), ||, prop, ., globalSets, +, prop, ., localSets, >, 0, ), ;, }]
[!, propertyMustBeInitializedByFullName, (, prop, ), ||, prop, ., globalSets, +, prop, ., localSets, >, 0, ), ;, }, validateName, (]
[(, prop, ), ||, prop, ., globalSets, +, prop, ., localSets, >, 0, ), ;, }, validateName, (, prop, ,]
[||, prop, ., globalSets, +, prop, ., localSets, >, 0, ), ;, }, validateName, (, prop, ,, propIsDefined, ), ;]
[., globalSets, +, prop, ., localSets, >, 0, ), ;, }, validateName, (, prop, ,, propIsDefined, ), ;, checkDescendantNames, (]
[+, prop, ., localSets, >, 0, ), ;, }, validateName, (, prop, ,, propIsDefined, ), ;, checkDescendantNames, (, prop, ,]
[propIsDefined, ), ;, }, }, }, private, void, validateName, (, Name, name, ,, boolean, isDefined, ), {, Ref, declaration, =]
[propIsDefined, ), ;, }, }, }, private, void, validateName, (, Name, name, ,, boolean, isDefined, ), {, Ref, declaration, =]
[(, Name, name, ,, boolean, isDefined, ), {, Ref, declaration, =, name, ., getDeclaration, (, ), ;, Name, parent, =]
[(, Name, name, ,, boolean, isDefined, ), {, Ref, declaration, =, name, ., getDeclaration, (, ), ;, Name, parent, =]
[{, Ref, declaration, =, name, ., getDeclaration, (, ), ;, Name, parent, =, name, ., parent, ;, JSModuleGraph, moduleGraph, =]
[{, Ref, declaration, =, name, ., getDeclaration, (, ), ;, Name, parent, =, name, ., parent, ;, JSModuleGraph, moduleGraph, =]
[parent, =, name, ., parent, ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, for, (, Ref, ref, :]
[parent, =, name, ., parent, ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, for, (, Ref, ref, :]
[., getModuleGraph, (, ), ;, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, boolean, isGlobalExpr, =]
[., getModuleGraph, (, ), ;, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, boolean, isGlobalExpr, =]
[., getModuleGraph, (, ), ;, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, boolean, isGlobalExpr, =]
[., getModuleGraph, (, ), ;, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, boolean, isGlobalExpr, =]
[{, boolean, isGlobalExpr, =, ref, ., getNode, (, ), ., getParent, (, ), ., isExprResult, (, ), ;, if, (]
[{, boolean, isGlobalExpr, =, ref, ., getNode, (, ), ., getParent, (, ), ., isExprResult, (, ), ;, if, (]
[boolean, isGlobalExpr, =, ref, ., getNode, (, ), ., getParent, (, ), ., isExprResult, (, ), ;, if, (, !]
[=, ref, ., getNode, (, ), ., getParent, (, ), ., isExprResult, (, ), ;, if, (, !, isDefined, &&]
[ref, ., getNode, (, ), ., getParent, (, ), ., isExprResult, (, ), ;, if, (, !, isDefined, &&, !]
[getNode, (, ), ., getParent, (, ), ., isExprResult, (, ), ;, if, (, !, isDefined, &&, !, isTypedef, (]
[), ., isExprResult, (, ), ;, if, (, !, isDefined, &&, !, isTypedef, (, ref, ), ), {, if, (]
[., isExprResult, (, ), ;, if, (, !, isDefined, &&, !, isTypedef, (, ref, ), ), {, if, (, !]
[), ;, if, (, !, isDefined, &&, !, isTypedef, (, ref, ), ), {, if, (, !, isGlobalExpr, ), {]
[if, (, !, isDefined, &&, !, isTypedef, (, ref, ), ), {, if, (, !, isGlobalExpr, ), {, reportRefToUndefinedName, (]
[!, isDefined, &&, !, isTypedef, (, ref, ), ), {, if, (, !, isGlobalExpr, ), {, reportRefToUndefinedName, (, name, ,]
[), {, if, (, !, isGlobalExpr, ), {, reportRefToUndefinedName, (, name, ,, ref, ), ;, }, }, else, if, (]
[), {, if, (, !, isGlobalExpr, ), {, reportRefToUndefinedName, (, name, ,, ref, ), ;, }, }, else, if, (]
[), {, if, (, !, isGlobalExpr, ), {, reportRefToUndefinedName, (, name, ,, ref, ), ;, }, }, else, if, (]
[), {, if, (, !, isGlobalExpr, ), {, reportRefToUndefinedName, (, name, ,, ref, ), ;, }, }, else, if, (]
[if, (, !, isGlobalExpr, ), {, reportRefToUndefinedName, (, name, ,, ref, ), ;, }, }, else, if, (, declaration, !=]
[!, isGlobalExpr, ), {, reportRefToUndefinedName, (, name, ,, ref, ), ;, }, }, else, if, (, declaration, !=, null, &&]
[!, isGlobalExpr, ), {, reportRefToUndefinedName, (, name, ,, ref, ), ;, }, }, else, if, (, declaration, !=, null, &&]
[!, isGlobalExpr, ), {, reportRefToUndefinedName, (, name, ,, ref, ), ;, }, }, else, if, (, declaration, !=, null, &&]
[name, ,, ref, ), ;, }, }, else, if, (, declaration, !=, null, &&, ref, ., getModule, (, ), !=]
[name, ,, ref, ), ;, }, }, else, if, (, declaration, !=, null, &&, ref, ., getModule, (, ), !=]
[}, else, if, (, declaration, !=, null, &&, ref, ., getModule, (, ), !=, declaration, ., getModule, (, ), &&]
[else, if, (, declaration, !=, null, &&, ref, ., getModule, (, ), !=, declaration, ., getModule, (, ), &&, !]
[else, if, (, declaration, !=, null, &&, ref, ., getModule, (, ), !=, declaration, ., getModule, (, ), &&, !]
[!=, null, &&, ref, ., getModule, (, ), !=, declaration, ., getModule, (, ), &&, !, moduleGraph, ., dependsOn, (]
[!=, null, &&, ref, ., getModule, (, ), !=, declaration, ., getModule, (, ), &&, !, moduleGraph, ., dependsOn, (]
[(, ), !=, declaration, ., getModule, (, ), &&, !, moduleGraph, ., dependsOn, (, ref, ., getModule, (, ), ,]
[(, ), !=, declaration, ., getModule, (, ), &&, !, moduleGraph, ., dependsOn, (, ref, ., getModule, (, ), ,]
[&&, !, moduleGraph, ., dependsOn, (, ref, ., getModule, (, ), ,, declaration, ., getModule, (, ), ), ), {]
[moduleGraph, ., dependsOn, (, ref, ., getModule, (, ), ,, declaration, ., getModule, (, ), ), ), {, reportBadModuleReference, (]
[dependsOn, (, ref, ., getModule, (, ), ,, declaration, ., getModule, (, ), ), ), {, reportBadModuleReference, (, name, ,]
[declaration, ., getModule, (, ), ), ), {, reportBadModuleReference, (, name, ,, ref, ), ;, }, else, {, if, (]
[declaration, ., getModule, (, ), ), ), {, reportBadModuleReference, (, name, ,, ref, ), ;, }, else, {, if, (]
[declaration, ., getModule, (, ), ), ), {, reportBadModuleReference, (, name, ,, ref, ), ;, }, else, {, if, (]
[ref, ), ;, }, else, {, if, (, ref, ., scope, ., isGlobal, (, ), ), {, boolean, isPrototypeGet, =]
[), ;, }, else, {, if, (, ref, ., scope, ., isGlobal, (, ), ), {, boolean, isPrototypeGet, =, (]
[), ;, }, else, {, if, (, ref, ., scope, ., isGlobal, (, ), ), {, boolean, isPrototypeGet, =, (]
[), ;, }, else, {, if, (, ref, ., scope, ., isGlobal, (, ), ), {, boolean, isPrototypeGet, =, (]
[{, if, (, ref, ., scope, ., isGlobal, (, ), ), {, boolean, isPrototypeGet, =, (, ref, ., type, ==]
[{, if, (, ref, ., scope, ., isGlobal, (, ), ), {, boolean, isPrototypeGet, =, (, ref, ., type, ==]
[{, if, (, ref, ., scope, ., isGlobal, (, ), ), {, boolean, isPrototypeGet, =, (, ref, ., type, ==]
[), {, boolean, isPrototypeGet, =, (, ref, ., type, ==, Ref, ., Type, ., PROTOTYPE_GET, ), ;, Name, owner, =]
[), {, boolean, isPrototypeGet, =, (, ref, ., type, ==, Ref, ., Type, ., PROTOTYPE_GET, ), ;, Name, owner, =]
[boolean, isPrototypeGet, =, (, ref, ., type, ==, Ref, ., Type, ., PROTOTYPE_GET, ), ;, Name, owner, =, isPrototypeGet, ?]
[=, (, ref, ., type, ==, Ref, ., Type, ., PROTOTYPE_GET, ), ;, Name, owner, =, isPrototypeGet, ?, name, :]
[==, Ref, ., Type, ., PROTOTYPE_GET, ), ;, Name, owner, =, isPrototypeGet, ?, name, :, parent, ;, boolean, singleGlobalParentDecl, =]
[==, Ref, ., Type, ., PROTOTYPE_GET, ), ;, Name, owner, =, isPrototypeGet, ?, name, :, parent, ;, boolean, singleGlobalParentDecl, =]
[==, Ref, ., Type, ., PROTOTYPE_GET, ), ;, Name, owner, =, isPrototypeGet, ?, name, :, parent, ;, boolean, singleGlobalParentDecl, =]
[==, Ref, ., Type, ., PROTOTYPE_GET, ), ;, Name, owner, =, isPrototypeGet, ?, name, :, parent, ;, boolean, singleGlobalParentDecl, =]
[., Type, ., PROTOTYPE_GET, ), ;, Name, owner, =, isPrototypeGet, ?, name, :, parent, ;, boolean, singleGlobalParentDecl, =, owner, !=]
[., PROTOTYPE_GET, ), ;, Name, owner, =, isPrototypeGet, ?, name, :, parent, ;, boolean, singleGlobalParentDecl, =, owner, !=, null, &&]
[., PROTOTYPE_GET, ), ;, Name, owner, =, isPrototypeGet, ?, name, :, parent, ;, boolean, singleGlobalParentDecl, =, owner, !=, null, &&]
[., PROTOTYPE_GET, ), ;, Name, owner, =, isPrototypeGet, ?, name, :, parent, ;, boolean, singleGlobalParentDecl, =, owner, !=, null, &&]
[=, isPrototypeGet, ?, name, :, parent, ;, boolean, singleGlobalParentDecl, =, owner, !=, null, &&, owner, ., getDeclaration, (, ), !=]
[?, name, :, parent, ;, boolean, singleGlobalParentDecl, =, owner, !=, null, &&, owner, ., getDeclaration, (, ), !=, null, &&]
[?, name, :, parent, ;, boolean, singleGlobalParentDecl, =, owner, !=, null, &&, owner, ., getDeclaration, (, ), !=, null, &&]
[?, name, :, parent, ;, boolean, singleGlobalParentDecl, =, owner, !=, null, &&, owner, ., getDeclaration, (, ), !=, null, &&]
[;, boolean, singleGlobalParentDecl, =, owner, !=, null, &&, owner, ., getDeclaration, (, ), !=, null, &&, owner, ., localSets, ==]
[owner, !=, null, &&, owner, ., getDeclaration, (, ), !=, null, &&, owner, ., localSets, ==, 0, ;, if, (]
[owner, !=, null, &&, owner, ., getDeclaration, (, ), !=, null, &&, owner, ., localSets, ==, 0, ;, if, (]
[null, &&, owner, ., getDeclaration, (, ), !=, null, &&, owner, ., localSets, ==, 0, ;, if, (, singleGlobalParentDecl, &&]
[null, &&, owner, ., getDeclaration, (, ), !=, null, &&, owner, ., localSets, ==, 0, ;, if, (, singleGlobalParentDecl, &&]
[null, &&, owner, ., getDeclaration, (, ), !=, null, &&, owner, ., localSets, ==, 0, ;, if, (, singleGlobalParentDecl, &&]
[null, &&, owner, ., getDeclaration, (, ), !=, null, &&, owner, ., localSets, ==, 0, ;, if, (, singleGlobalParentDecl, &&]
[null, &&, owner, ., localSets, ==, 0, ;, if, (, singleGlobalParentDecl, &&, owner, ., getDeclaration, (, ), ., preOrderIndex, >]
[null, &&, owner, ., localSets, ==, 0, ;, if, (, singleGlobalParentDecl, &&, owner, ., getDeclaration, (, ), ., preOrderIndex, >]
[if, (, singleGlobalParentDecl, &&, owner, ., getDeclaration, (, ), ., preOrderIndex, >, ref, ., preOrderIndex, ), {, String, refName, =]
[if, (, singleGlobalParentDecl, &&, owner, ., getDeclaration, (, ), ., preOrderIndex, >, ref, ., preOrderIndex, ), {, String, refName, =]
[singleGlobalParentDecl, &&, owner, ., getDeclaration, (, ), ., preOrderIndex, >, ref, ., preOrderIndex, ), {, String, refName, =, isPrototypeGet, ?]
[singleGlobalParentDecl, &&, owner, ., getDeclaration, (, ), ., preOrderIndex, >, ref, ., preOrderIndex, ), {, String, refName, =, isPrototypeGet, ?]
[singleGlobalParentDecl, &&, owner, ., getDeclaration, (, ), ., preOrderIndex, >, ref, ., preOrderIndex, ), {, String, refName, =, isPrototypeGet, ?]
[), ., preOrderIndex, >, ref, ., preOrderIndex, ), {, String, refName, =, isPrototypeGet, ?, name, ., getFullName, (, ), +]
[preOrderIndex, >, ref, ., preOrderIndex, ), {, String, refName, =, isPrototypeGet, ?, name, ., getFullName, (, ), +, ".prototype", :]
[preOrderIndex, >, ref, ., preOrderIndex, ), {, String, refName, =, isPrototypeGet, ?, name, ., getFullName, (, ), +, ".prototype", :]
[{, String, refName, =, isPrototypeGet, ?, name, ., getFullName, (, ), +, ".prototype", :, name, ., getFullName, (, ), ;]
[{, String, refName, =, isPrototypeGet, ?, name, ., getFullName, (, ), +, ".prototype", :, name, ., getFullName, (, ), ;]
[isPrototypeGet, ?, name, ., getFullName, (, ), +, ".prototype", :, name, ., getFullName, (, ), ;, compiler, ., report, (]
[isPrototypeGet, ?, name, ., getFullName, (, ), +, ".prototype", :, name, ., getFullName, (, ), ;, compiler, ., report, (]
[getFullName, (, ), +, ".prototype", :, name, ., getFullName, (, ), ;, compiler, ., report, (, JSError, ., make, (]
[getFullName, (, ), +, ".prototype", :, name, ., getFullName, (, ), ;, compiler, ., report, (, JSError, ., make, (]
[getFullName, (, ), +, ".prototype", :, name, ., getFullName, (, ), ;, compiler, ., report, (, JSError, ., make, (]
[getFullName, (, ), ;, compiler, ., report, (, JSError, ., make, (, ref, ., source, ., getName, (, ), ,]
[getFullName, (, ), ;, compiler, ., report, (, JSError, ., make, (, ref, ., source, ., getName, (, ), ,]
[compiler, ., report, (, JSError, ., make, (, ref, ., source, ., getName, (, ), ,, ref, ., node, ,]
[report, (, JSError, ., make, (, ref, ., source, ., getName, (, ), ,, ref, ., node, ,, NAME_DEFINED_LATE_WARNING, ,]
[JSError, ., make, (, ref, ., source, ., getName, (, ), ,, ref, ., node, ,, NAME_DEFINED_LATE_WARNING, ,, refName, ,]
[JSError, ., make, (, ref, ., source, ., getName, (, ), ,, ref, ., node, ,, NAME_DEFINED_LATE_WARNING, ,, refName, ,]
[source, ., getName, (, ), ,, ref, ., node, ,, NAME_DEFINED_LATE_WARNING, ,, refName, ,, owner, ., getFullName, (, ), ,]
[source, ., getName, (, ), ,, ref, ., node, ,, NAME_DEFINED_LATE_WARNING, ,, refName, ,, owner, ., getFullName, (, ), ,]
[source, ., getName, (, ), ,, ref, ., node, ,, NAME_DEFINED_LATE_WARNING, ,, refName, ,, owner, ., getFullName, (, ), ,]
[source, ., getName, (, ), ,, ref, ., node, ,, NAME_DEFINED_LATE_WARNING, ,, refName, ,, owner, ., getFullName, (, ), ,]
[refName, ,, owner, ., getFullName, (, ), ,, owner, ., getDeclaration, (, ), ., source, ., getName, (, ), ,]
[refName, ,, owner, ., getFullName, (, ), ,, owner, ., getDeclaration, (, ), ., source, ., getName, (, ), ,]
[getFullName, (, ), ,, owner, ., getDeclaration, (, ), ., source, ., getName, (, ), ,, String, ., valueOf, (]
[getFullName, (, ), ,, owner, ., getDeclaration, (, ), ., source, ., getName, (, ), ,, String, ., valueOf, (]
[getFullName, (, ), ,, owner, ., getDeclaration, (, ), ., source, ., getName, (, ), ,, String, ., valueOf, (]
[getFullName, (, ), ,, owner, ., getDeclaration, (, ), ., source, ., getName, (, ), ,, String, ., valueOf, (]
[), ), ), ;, }, }, }, }, }, private, boolean, isTypedef, (, Ref, ref, ), {, Node, parent, =]
[), ), ), ;, }, }, }, }, }, private, boolean, isTypedef, (, Ref, ref, ), {, Node, parent, =]
[), ), ), ;, }, }, }, }, }, private, boolean, isTypedef, (, Ref, ref, ), {, Node, parent, =]
[boolean, isTypedef, (, Ref, ref, ), {, Node, parent, =, ref, ., node, ., getParent, (, ), ;, if, (]
[boolean, isTypedef, (, Ref, ref, ), {, Node, parent, =, ref, ., node, ., getParent, (, ), ;, if, (]
[ref, ., node, ., getParent, (, ), ;, if, (, parent, ., isExprResult, (, ), ), {, JSDocInfo, info, =]
[ref, ., node, ., getParent, (, ), ;, if, (, parent, ., isExprResult, (, ), ), {, JSDocInfo, info, =]
[ref, ., node, ., getParent, (, ), ;, if, (, parent, ., isExprResult, (, ), ), {, JSDocInfo, info, =]
[parent, ., isExprResult, (, ), ), {, JSDocInfo, info, =, ref, ., node, ., getJSDocInfo, (, ), ;, if, (]
[parent, ., isExprResult, (, ), ), {, JSDocInfo, info, =, ref, ., node, ., getJSDocInfo, (, ), ;, if, (]
[parent, ., isExprResult, (, ), ), {, JSDocInfo, info, =, ref, ., node, ., getJSDocInfo, (, ), ;, if, (]
[isExprResult, (, ), ), {, JSDocInfo, info, =, ref, ., node, ., getJSDocInfo, (, ), ;, if, (, info, !=]
[), ), {, JSDocInfo, info, =, ref, ., node, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[), ), {, JSDocInfo, info, =, ref, ., node, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[node, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., hasTypedefType, (, ), ), {, return]
[;, if, (, info, !=, null, &&, info, ., hasTypedefType, (, ), ), {, return, true, ;, }, }, return]
[return, true, ;, }, }, return, false, ;, }, private, void, reportBadModuleReference, (, Name, name, ,, Ref, ref, ), {]
[return, true, ;, }, }, return, false, ;, }, private, void, reportBadModuleReference, (, Name, name, ,, Ref, ref, ), {]
[}, return, false, ;, }, private, void, reportBadModuleReference, (, Name, name, ,, Ref, ref, ), {, compiler, ., report, (]
[}, return, false, ;, }, private, void, reportBadModuleReference, (, Name, name, ,, Ref, ref, ), {, compiler, ., report, (]
[}, private, void, reportBadModuleReference, (, Name, name, ,, Ref, ref, ), {, compiler, ., report, (, JSError, ., make, (]
[}, private, void, reportBadModuleReference, (, Name, name, ,, Ref, ref, ), {, compiler, ., report, (, JSError, ., make, (]
[}, private, void, reportBadModuleReference, (, Name, name, ,, Ref, ref, ), {, compiler, ., report, (, JSError, ., make, (]
[Ref, ref, ), {, compiler, ., report, (, JSError, ., make, (, ref, ., source, ., getName, (, ), ,]
[Ref, ref, ), {, compiler, ., report, (, JSError, ., make, (, ref, ., source, ., getName, (, ), ,]
[compiler, ., report, (, JSError, ., make, (, ref, ., source, ., getName, (, ), ,, ref, ., node, ,]
[report, (, JSError, ., make, (, ref, ., source, ., getName, (, ), ,, ref, ., node, ,, STRICT_MODULE_DEP_QNAME, ,]
[report, (, JSError, ., make, (, ref, ., source, ., getName, (, ), ,, ref, ., node, ,, STRICT_MODULE_DEP_QNAME, ,]
[report, (, JSError, ., make, (, ref, ., source, ., getName, (, ), ,, ref, ., node, ,, STRICT_MODULE_DEP_QNAME, ,]
[getName, (, ), ,, ref, ., node, ,, STRICT_MODULE_DEP_QNAME, ,, ref, ., getModule, (, ), ., getName, (, ), ,]
[getName, (, ), ,, ref, ., node, ,, STRICT_MODULE_DEP_QNAME, ,, ref, ., getModule, (, ), ., getName, (, ), ,]
[getName, (, ), ,, ref, ., node, ,, STRICT_MODULE_DEP_QNAME, ,, ref, ., getModule, (, ), ., getName, (, ), ,]
[getName, (, ), ,, ref, ., node, ,, STRICT_MODULE_DEP_QNAME, ,, ref, ., getModule, (, ), ., getName, (, ), ,]
[), ., getName, (, ), ,, name, ., getDeclaration, (, ), ., getModule, (, ), ., getName, (, ), ,]
[), ., getName, (, ), ,, name, ., getDeclaration, (, ), ., getModule, (, ), ., getName, (, ), ,]
[getFullName, (, ), ), ), ;, }, private, void, reportRefToUndefinedName, (, Name, name, ,, Ref, ref, ), {, while, (]
[getFullName, (, ), ), ), ;, }, private, void, reportRefToUndefinedName, (, Name, name, ,, Ref, ref, ), {, while, (]
[getFullName, (, ), ), ), ;, }, private, void, reportRefToUndefinedName, (, Name, name, ,, Ref, ref, ), {, while, (]
[getFullName, (, ), ), ), ;, }, private, void, reportRefToUndefinedName, (, Name, name, ,, Ref, ref, ), {, while, (]
[), ;, }, private, void, reportRefToUndefinedName, (, Name, name, ,, Ref, ref, ), {, while, (, name, ., parent, !=]
[}, private, void, reportRefToUndefinedName, (, Name, name, ,, Ref, ref, ), {, while, (, name, ., parent, !=, null, &&]
[}, private, void, reportRefToUndefinedName, (, Name, name, ,, Ref, ref, ), {, while, (, name, ., parent, !=, null, &&]
[}, private, void, reportRefToUndefinedName, (, Name, name, ,, Ref, ref, ), {, while, (, name, ., parent, !=, null, &&]
[}, private, void, reportRefToUndefinedName, (, Name, name, ,, Ref, ref, ), {, while, (, name, ., parent, !=, null, &&]
[}, private, void, reportRefToUndefinedName, (, Name, name, ,, Ref, ref, ), {, while, (, name, ., parent, !=, null, &&]
[name, ,, Ref, ref, ), {, while, (, name, ., parent, !=, null, &&, name, ., parent, ., globalSets, +]
[name, ,, Ref, ref, ), {, while, (, name, ., parent, !=, null, &&, name, ., parent, ., globalSets, +]
[name, ,, Ref, ref, ), {, while, (, name, ., parent, !=, null, &&, name, ., parent, ., globalSets, +]
[while, (, name, ., parent, !=, null, &&, name, ., parent, ., globalSets, +, name, ., parent, ., localSets, ==]
[., parent, !=, null, &&, name, ., parent, ., globalSets, +, name, ., parent, ., localSets, ==, 0, ), {]
[!=, null, &&, name, ., parent, ., globalSets, +, name, ., parent, ., localSets, ==, 0, ), {, name, =]
[!=, null, &&, name, ., parent, ., globalSets, +, name, ., parent, ., localSets, ==, 0, ), {, name, =]
[parent, ., globalSets, +, name, ., parent, ., localSets, ==, 0, ), {, name, =, name, ., parent, ;, }]
[parent, ., globalSets, +, name, ., parent, ., localSets, ==, 0, ), {, name, =, name, ., parent, ;, }]
[name, ., parent, ., localSets, ==, 0, ), {, name, =, name, ., parent, ;, }, compiler, ., report, (]
[name, ., parent, ., localSets, ==, 0, ), {, name, =, name, ., parent, ;, }, compiler, ., report, (]
[localSets, ==, 0, ), {, name, =, name, ., parent, ;, }, compiler, ., report, (, JSError, ., make, (]
[localSets, ==, 0, ), {, name, =, name, ., parent, ;, }, compiler, ., report, (, JSError, ., make, (]
[=, name, ., parent, ;, }, compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,]
[=, name, ., parent, ;, }, compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,]
[;, }, compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,, ref, ., node, ,]
[compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,, ref, ., node, ,, level, ,]
[report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,, ref, ., node, ,, level, ,, UNDEFINED_NAME_WARNING, ,]
[report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,, ref, ., node, ,, level, ,, UNDEFINED_NAME_WARNING, ,]
[,, name, ., getFullName, (, ), ), ), ;, }, private, boolean, propertyMustBeInitializedByFullName, (, Name, name, ), {, if, (]
[,, name, ., getFullName, (, ), ), ), ;, }, private, boolean, propertyMustBeInitializedByFullName, (, Name, name, ), {, if, (]
[,, name, ., getFullName, (, ), ), ), ;, }, private, boolean, propertyMustBeInitializedByFullName, (, Name, name, ), {, if, (]
[(, ), ), ), ;, }, private, boolean, propertyMustBeInitializedByFullName, (, Name, name, ), {, if, (, name, ., parent, ==]
[;, }, private, boolean, propertyMustBeInitializedByFullName, (, Name, name, ), {, if, (, name, ., parent, ==, null, ), {, return]
[Name, name, ), {, if, (, name, ., parent, ==, null, ), {, return, false, ;, }, boolean, parentIsAliased, =]
[if, (, name, ., parent, ==, null, ), {, return, false, ;, }, boolean, parentIsAliased, =, false, ;, if, (]
[if, (, name, ., parent, ==, null, ), {, return, false, ;, }, boolean, parentIsAliased, =, false, ;, if, (]
[if, (, name, ., parent, ==, null, ), {, return, false, ;, }, boolean, parentIsAliased, =, false, ;, if, (]
[if, (, name, ., parent, ==, null, ), {, return, false, ;, }, boolean, parentIsAliased, =, false, ;, if, (]
[null, ), {, return, false, ;, }, boolean, parentIsAliased, =, false, ;, if, (, name, ., parent, ., aliasingGets, >]
[parentIsAliased, =, false, ;, if, (, name, ., parent, ., aliasingGets, >, 0, ), {, for, (, Ref, ref, :]
[parentIsAliased, =, false, ;, if, (, name, ., parent, ., aliasingGets, >, 0, ), {, for, (, Ref, ref, :]
[parentIsAliased, =, false, ;, if, (, name, ., parent, ., aliasingGets, >, 0, ), {, for, (, Ref, ref, :]
[>, 0, ), {, for, (, Ref, ref, :, name, ., parent, ., getRefs, (, ), ), {, if, (]
[>, 0, ), {, for, (, Ref, ref, :, name, ., parent, ., getRefs, (, ), ), {, if, (]
[>, 0, ), {, for, (, Ref, ref, :, name, ., parent, ., getRefs, (, ), ), {, if, (]
[for, (, Ref, ref, :, name, ., parent, ., getRefs, (, ), ), {, if, (, ref, ., type, ==]
[for, (, Ref, ref, :, name, ., parent, ., getRefs, (, ), ), {, if, (, ref, ., type, ==]
[for, (, Ref, ref, :, name, ., parent, ., getRefs, (, ), ), {, if, (, ref, ., type, ==]
[(, ), ), {, if, (, ref, ., type, ==, Ref, ., Type, ., ALIASING_GET, ), {, Node, aliaser, =]
[(, ), ), {, if, (, ref, ., type, ==, Ref, ., Type, ., ALIASING_GET, ), {, Node, aliaser, =]
[(, ), ), {, if, (, ref, ., type, ==, Ref, ., Type, ., ALIASING_GET, ), {, Node, aliaser, =]
[., ALIASING_GET, ), {, Node, aliaser, =, ref, ., getNode, (, ), ., getParent, (, ), ;, boolean, isKnownAlias, =]
[., ALIASING_GET, ), {, Node, aliaser, =, ref, ., getNode, (, ), ., getParent, (, ), ;, boolean, isKnownAlias, =]
[., ALIASING_GET, ), {, Node, aliaser, =, ref, ., getNode, (, ), ., getParent, (, ), ;, boolean, isKnownAlias, =]
[=, ref, ., getNode, (, ), ., getParent, (, ), ;, boolean, isKnownAlias, =, aliaser, ., isCall, (, ), &&]
[ref, ., getNode, (, ), ., getParent, (, ), ;, boolean, isKnownAlias, =, aliaser, ., isCall, (, ), &&, (]
[ref, ., getNode, (, ), ., getParent, (, ), ;, boolean, isKnownAlias, =, aliaser, ., isCall, (, ), &&, (]
[ref, ., getNode, (, ), ., getParent, (, ), ;, boolean, isKnownAlias, =, aliaser, ., isCall, (, ), &&, (]
[ref, ., getNode, (, ), ., getParent, (, ), ;, boolean, isKnownAlias, =, aliaser, ., isCall, (, ), &&, (]
[), ., getParent, (, ), ;, boolean, isKnownAlias, =, aliaser, ., isCall, (, ), &&, (, convention, ., getClassesDefinedByCall, (]
[(, ), ;, boolean, isKnownAlias, =, aliaser, ., isCall, (, ), &&, (, convention, ., getClassesDefinedByCall, (, aliaser, ), !=]
[;, boolean, isKnownAlias, =, aliaser, ., isCall, (, ), &&, (, convention, ., getClassesDefinedByCall, (, aliaser, ), !=, null, ||]
[;, boolean, isKnownAlias, =, aliaser, ., isCall, (, ), &&, (, convention, ., getClassesDefinedByCall, (, aliaser, ), !=, null, ||]
[;, boolean, isKnownAlias, =, aliaser, ., isCall, (, ), &&, (, convention, ., getClassesDefinedByCall, (, aliaser, ), !=, null, ||]
[aliaser, ., isCall, (, ), &&, (, convention, ., getClassesDefinedByCall, (, aliaser, ), !=, null, ||, convention, ., getSingletonGetterClassName, (]
[(, ), &&, (, convention, ., getClassesDefinedByCall, (, aliaser, ), !=, null, ||, convention, ., getSingletonGetterClassName, (, aliaser, ), !=]
[., getClassesDefinedByCall, (, aliaser, ), !=, null, ||, convention, ., getSingletonGetterClassName, (, aliaser, ), !=, null, ), ;, if, (]
[getClassesDefinedByCall, (, aliaser, ), !=, null, ||, convention, ., getSingletonGetterClassName, (, aliaser, ), !=, null, ), ;, if, (, !]
[), !=, null, ||, convention, ., getSingletonGetterClassName, (, aliaser, ), !=, null, ), ;, if, (, !, isKnownAlias, ), {]
[null, ||, convention, ., getSingletonGetterClassName, (, aliaser, ), !=, null, ), ;, if, (, !, isKnownAlias, ), {, parentIsAliased, =]
[!=, null, ), ;, if, (, !, isKnownAlias, ), {, parentIsAliased, =, true, ;, }, }, }, }, if, (]
[if, (, !, isKnownAlias, ), {, parentIsAliased, =, true, ;, }, }, }, }, if, (, parentIsAliased, ), {, return]
[{, parentIsAliased, =, true, ;, }, }, }, }, if, (, parentIsAliased, ), {, return, false, ;, }, if, (]
[{, parentIsAliased, =, true, ;, }, }, }, }, if, (, parentIsAliased, ), {, return, false, ;, }, if, (]
[;, }, }, }, }, if, (, parentIsAliased, ), {, return, false, ;, }, if, (, objectPrototypeProps, ., contains, (]
[;, }, }, }, }, if, (, parentIsAliased, ), {, return, false, ;, }, if, (, objectPrototypeProps, ., contains, (]
[{, return, false, ;, }, if, (, objectPrototypeProps, ., contains, (, name, ., getBaseName, (, ), ), ), {, return]
[if, (, objectPrototypeProps, ., contains, (, name, ., getBaseName, (, ), ), ), {, return, false, ;, }, if, (]
[if, (, objectPrototypeProps, ., contains, (, name, ., getBaseName, (, ), ), ), {, return, false, ;, }, if, (]
[if, (, objectPrototypeProps, ., contains, (, name, ., getBaseName, (, ), ), ), {, return, false, ;, }, if, (]
[if, (, objectPrototypeProps, ., contains, (, name, ., getBaseName, (, ), ), ), {, return, false, ;, }, if, (]
[name, ., getBaseName, (, ), ), ), {, return, false, ;, }, if, (, name, ., parent, ., type, ==]
[name, ., getBaseName, (, ), ), ), {, return, false, ;, }, if, (, name, ., parent, ., type, ==]
[name, ., getBaseName, (, ), ), ), {, return, false, ;, }, if, (, name, ., parent, ., type, ==]
[return, false, ;, }, if, (, name, ., parent, ., type, ==, Name, ., Type, ., OBJECTLIT, ), {, return]
[(, name, ., parent, ., type, ==, Name, ., Type, ., OBJECTLIT, ), {, return, true, ;, }, if, (]
[(, name, ., parent, ., type, ==, Name, ., Type, ., OBJECTLIT, ), {, return, true, ;, }, if, (]
[(, name, ., parent, ., type, ==, Name, ., Type, ., OBJECTLIT, ), {, return, true, ;, }, if, (]
[(, name, ., parent, ., type, ==, Name, ., Type, ., OBJECTLIT, ), {, return, true, ;, }, if, (]
[(, name, ., parent, ., type, ==, Name, ., Type, ., OBJECTLIT, ), {, return, true, ;, }, if, (]
[(, name, ., parent, ., type, ==, Name, ., Type, ., OBJECTLIT, ), {, return, true, ;, }, if, (]
[==, Name, ., Type, ., OBJECTLIT, ), {, return, true, ;, }, if, (, name, ., parent, ., type, ==]
[==, Name, ., Type, ., OBJECTLIT, ), {, return, true, ;, }, if, (, name, ., parent, ., type, ==]
[==, Name, ., Type, ., OBJECTLIT, ), {, return, true, ;, }, if, (, name, ., parent, ., type, ==]
[), {, return, true, ;, }, if, (, name, ., parent, ., type, ==, Name, ., Type, ., FUNCTION, &&]
[), {, return, true, ;, }, if, (, name, ., parent, ., type, ==, Name, ., Type, ., FUNCTION, &&]
[), {, return, true, ;, }, if, (, name, ., parent, ., type, ==, Name, ., Type, ., FUNCTION, &&]
[name, ., parent, ., type, ==, Name, ., Type, ., FUNCTION, &&, name, ., parent, ., isDeclaredType, (, ), &&]
[., parent, ., type, ==, Name, ., Type, ., FUNCTION, &&, name, ., parent, ., isDeclaredType, (, ), &&, !]
[., parent, ., type, ==, Name, ., Type, ., FUNCTION, &&, name, ., parent, ., isDeclaredType, (, ), &&, !]
[==, Name, ., Type, ., FUNCTION, &&, name, ., parent, ., isDeclaredType, (, ), &&, !, functionPrototypeProps, ., contains, (]
[==, Name, ., Type, ., FUNCTION, &&, name, ., parent, ., isDeclaredType, (, ), &&, !, functionPrototypeProps, ., contains, (]
[parent, ., isDeclaredType, (, ), &&, !, functionPrototypeProps, ., contains, (, name, ., getBaseName, (, ), ), ), {, return]
[), &&, !, functionPrototypeProps, ., contains, (, name, ., getBaseName, (, ), ), ), {, return, true, ;, }, return]
