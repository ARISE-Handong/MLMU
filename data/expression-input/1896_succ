[;, private, final, String, DEFAULT_PLACEHOLDER_TOKEN, =, "`", ;, private, final, String, placeholderToken, ;, private, static, final, String, REPLACE_ONE_MARKER, =, "?"]
[., warning, (, "JSC_BAD_REPLACEMENT_CONFIGURATION", ,, "Bad replacement configuration.", ), ;, private, final, String, DEFAULT_PLACEHOLDER_TOKEN, =, "`", ;, private, final, String, placeholderToken, ;]
[,, "Bad replacement configuration.", ), ;, private, final, String, DEFAULT_PLACEHOLDER_TOKEN, =, "`", ;, private, final, String, placeholderToken, ;, private, static, final, String]
[), ;, private, final, String, DEFAULT_PLACEHOLDER_TOKEN, =, "`", ;, private, final, String, placeholderToken, ;, private, static, final, String, REPLACE_ONE_MARKER, =]
[;, private, final, String, placeholderToken, ;, private, static, final, String, REPLACE_ONE_MARKER, =, "?", ;, private, static, final, String, REPLACE_ALL_MARKER, =]
[;, private, static, final, String, REPLACE_ALL_MARKER, =, "*", ;, private, final, AbstractCompiler, compiler, ;, private, final, JSTypeRegistry, registry, ;, private]
[;, private, final, AbstractCompiler, compiler, ;, private, final, JSTypeRegistry, registry, ;, private, final, Map, <, String, ,, Config, >, functions]
[;, private, final, Multimap, <, String, ,, String, >, methods, =, HashMultimap, ., create, (, ), ;, private, final, NameGenerator]
[., newHashMap, (, ), ;, private, final, Multimap, <, String, ,, String, >, methods, =, HashMultimap, ., create, (, )]
[;, private, final, NameGenerator, nameGenerator, ;, private, final, Map, <, String, ,, Result, >, results, =, Maps, ., newLinkedHashMap, (]
[., create, (, ), ;, private, final, NameGenerator, nameGenerator, ;, private, final, Map, <, String, ,, Result, >, results, =]
[;, private, class, Config, {, final, String, name, ;, final, int, parameter, ;, static, final, int, REPLACE_ALL_VALUE, =, 0, ;]
[., newLinkedHashMap, (, ), ;, private, class, Config, {, final, String, name, ;, final, int, parameter, ;, static, final, int]
[;, Config, (, String, name, ,, int, parameter, ), {, this, ., name, =, name, ;, this, ., parameter, =]
[=, name, ;, this, ., parameter, =, parameter, ;, }, }, class, Result, {, public, final, String, original, ;, public]
[., name, =, name, ;, this, ., parameter, =, parameter, ;, }, }, class, Result, {, public, final, String, original]
[;, this, ., parameter, =, parameter, ;, }, }, class, Result, {, public, final, String, original, ;, public, final, String]
[=, parameter, ;, }, }, class, Result, {, public, final, String, original, ;, public, final, String, replacement, ;, public, final]
[., parameter, =, parameter, ;, }, }, class, Result, {, public, final, String, original, ;, public, final, String, replacement, ;]
[;, }, }, class, Result, {, public, final, String, original, ;, public, final, String, replacement, ;, public, final, List, <]
[;, Result, (, String, original, ,, String, replacement, ), {, this, ., original, =, original, ;, this, ., replacement, =]
[., newLinkedList, (, ), ;, Result, (, String, original, ,, String, replacement, ), {, this, ., original, =, original, ;]
[=, original, ;, this, ., replacement, =, replacement, ;, }, void, addLocation, (, Node, n, ), {, replacementLocations, ., add]
[., original, =, original, ;, this, ., replacement, =, replacement, ;, }, void, addLocation, (, Node, n, ), {, replacementLocations]
[;, this, ., replacement, =, replacement, ;, }, void, addLocation, (, Node, n, ), {, replacementLocations, ., add, (, new]
[=, replacement, ;, }, void, addLocation, (, Node, n, ), {, replacementLocations, ., add, (, new, Location, (, n, .]
[., replacement, =, replacement, ;, }, void, addLocation, (, Node, n, ), {, replacementLocations, ., add, (, new, Location, (]
[;, }, void, addLocation, (, Node, n, ), {, replacementLocations, ., add, (, new, Location, (, n, ., getSourceFileName, (]
[;, }, }, class, Location, {, public, final, String, sourceFile, ;, public, final, int, line, ;, public, final, int, column]
[., add, (, new, Location, (, n, ., getSourceFileName, (, ), ,, n, ., getLineno, (, ), ,, n, .]
[), ;, }, }, class, Location, {, public, final, String, sourceFile, ;, public, final, int, line, ;, public, final, int]
[,, n, ., getLineno, (, ), ,, n, ., getCharno, (, ), ), ), ;, }, }, class, Location, {]
[., getSourceFileName, (, ), ,, n, ., getLineno, (, ), ,, n, ., getCharno, (, ), ), ), ;, }]
[,, n, ., getCharno, (, ), ), ), ;, }, }, class, Location, {, public, final, String, sourceFile, ;, public]
[., getLineno, (, ), ,, n, ., getCharno, (, ), ), ), ;, }, }, class, Location, {, public, final]
[), ), ;, }, }, class, Location, {, public, final, String, sourceFile, ;, public, final, int, line, ;, public, final]
[., getCharno, (, ), ), ), ;, }, }, class, Location, {, public, final, String, sourceFile, ;, public, final, int]
[=, sourceFile, ;, this, ., line, =, line, ;, this, ., column, =, column, ;, }, }, ReplaceStrings, (, AbstractCompiler]
[., sourceFile, =, sourceFile, ;, this, ., line, =, line, ;, this, ., column, =, column, ;, }, }, ReplaceStrings]
[;, this, ., line, =, line, ;, this, ., column, =, column, ;, }, }, ReplaceStrings, (, AbstractCompiler, compiler, ,]
[=, line, ;, this, ., column, =, column, ;, }, }, ReplaceStrings, (, AbstractCompiler, compiler, ,, String, placeholderToken, ,, List]
[., line, =, line, ;, this, ., column, =, column, ;, }, }, ReplaceStrings, (, AbstractCompiler, compiler, ,, String, placeholderToken]
[;, this, ., column, =, column, ;, }, }, ReplaceStrings, (, AbstractCompiler, compiler, ,, String, placeholderToken, ,, List, <, String]
[=, column, ;, }, }, ReplaceStrings, (, AbstractCompiler, compiler, ,, String, placeholderToken, ,, List, <, String, >, functionsToInspect, ,, Set]
[., column, =, column, ;, }, }, ReplaceStrings, (, AbstractCompiler, compiler, ,, String, placeholderToken, ,, List, <, String, >, functionsToInspect]
[;, }, }, ReplaceStrings, (, AbstractCompiler, compiler, ,, String, placeholderToken, ,, List, <, String, >, functionsToInspect, ,, Set, <, String]
[=, compiler, ;, this, ., placeholderToken, =, placeholderToken, ., isEmpty, (, ), ?, DEFAULT_PLACEHOLDER_TOKEN, :, placeholderToken, ;, this, ., registry]
[., compiler, =, compiler, ;, this, ., placeholderToken, =, placeholderToken, ., isEmpty, (, ), ?, DEFAULT_PLACEHOLDER_TOKEN, :, placeholderToken, ;, this]
[;, this, ., placeholderToken, =, placeholderToken, ., isEmpty, (, ), ?, DEFAULT_PLACEHOLDER_TOKEN, :, placeholderToken, ;, this, ., registry, =, compiler]
[=, placeholderToken, ., isEmpty, (, ), ?, DEFAULT_PLACEHOLDER_TOKEN, :, placeholderToken, ;, this, ., registry, =, compiler, ., getTypeRegistry, (, )]
[., placeholderToken, =, placeholderToken, ., isEmpty, (, ), ?, DEFAULT_PLACEHOLDER_TOKEN, :, placeholderToken, ;, this, ., registry, =, compiler, ., getTypeRegistry]
[;, this, ., registry, =, compiler, ., getTypeRegistry, (, ), ;, Iterable, <, String, >, reservedNames, =, blacklisted, ;, if]
[?, DEFAULT_PLACEHOLDER_TOKEN, :, placeholderToken, ;, this, ., registry, =, compiler, ., getTypeRegistry, (, ), ;, Iterable, <, String, >, reservedNames]
[., isEmpty, (, ), ?, DEFAULT_PLACEHOLDER_TOKEN, :, placeholderToken, ;, this, ., registry, =, compiler, ., getTypeRegistry, (, ), ;, Iterable]
[:, placeholderToken, ;, this, ., registry, =, compiler, ., getTypeRegistry, (, ), ;, Iterable, <, String, >, reservedNames, =, blacklisted]
[;, this, ., registry, =, compiler, ., getTypeRegistry, (, ), ;, Iterable, <, String, >, reservedNames, =, blacklisted, ;, if]
[=, compiler, ., getTypeRegistry, (, ), ;, Iterable, <, String, >, reservedNames, =, blacklisted, ;, if, (, previousMappings, !=, null]
[., registry, =, compiler, ., getTypeRegistry, (, ), ;, Iterable, <, String, >, reservedNames, =, blacklisted, ;, if, (, previousMappings]
[;, Iterable, <, String, >, reservedNames, =, blacklisted, ;, if, (, previousMappings, !=, null, ), {, Set, <, String, >]
[., getTypeRegistry, (, ), ;, Iterable, <, String, >, reservedNames, =, blacklisted, ;, if, (, previousMappings, !=, null, ), {]
[;, if, (, previousMappings, !=, null, ), {, Set, <, String, >, previous, =, previousMappings, ., getOriginalNameToNewNameMap, (, ), .]
[), {, Set, <, String, >, previous, =, previousMappings, ., getOriginalNameToNewNameMap, (, ), ., keySet, (, ), ;, reservedNames, =]
[!=, null, ), {, Set, <, String, >, previous, =, previousMappings, ., getOriginalNameToNewNameMap, (, ), ., keySet, (, ), ;]
[), {, Set, <, String, >, previous, =, previousMappings, ., getOriginalNameToNewNameMap, (, ), ., keySet, (, ), ;, reservedNames, =]
[;, reservedNames, =, Iterables, ., concat, (, blacklisted, ,, previous, ), ;, initMapping, (, previousMappings, ,, blacklisted, ), ;, }]
[., keySet, (, ), ;, reservedNames, =, Iterables, ., concat, (, blacklisted, ,, previous, ), ;, initMapping, (, previousMappings, ,]
[., getOriginalNameToNewNameMap, (, ), ., keySet, (, ), ;, reservedNames, =, Iterables, ., concat, (, blacklisted, ,, previous, ), ;]
[=, Iterables, ., concat, (, blacklisted, ,, previous, ), ;, initMapping, (, previousMappings, ,, blacklisted, ), ;, }, this, .]
[;, initMapping, (, previousMappings, ,, blacklisted, ), ;, }, this, ., nameGenerator, =, createNameGenerator, (, reservedNames, ), ;, parseConfiguration, (]
[., concat, (, blacklisted, ,, previous, ), ;, initMapping, (, previousMappings, ,, blacklisted, ), ;, }, this, ., nameGenerator, =]
[,, previous, ), ;, initMapping, (, previousMappings, ,, blacklisted, ), ;, }, this, ., nameGenerator, =, createNameGenerator, (, reservedNames, )]
[), ;, initMapping, (, previousMappings, ,, blacklisted, ), ;, }, this, ., nameGenerator, =, createNameGenerator, (, reservedNames, ), ;, parseConfiguration]
[;, }, this, ., nameGenerator, =, createNameGenerator, (, reservedNames, ), ;, parseConfiguration, (, functionsToInspect, ), ;, }, private, void, initMapping]
[,, blacklisted, ), ;, }, this, ., nameGenerator, =, createNameGenerator, (, reservedNames, ), ;, parseConfiguration, (, functionsToInspect, ), ;, }]
[), ;, }, this, ., nameGenerator, =, createNameGenerator, (, reservedNames, ), ;, parseConfiguration, (, functionsToInspect, ), ;, }, private, void]
[=, createNameGenerator, (, reservedNames, ), ;, parseConfiguration, (, functionsToInspect, ), ;, }, private, void, initMapping, (, VariableMap, previousVarMap, ,, Set]
[., nameGenerator, =, createNameGenerator, (, reservedNames, ), ;, parseConfiguration, (, functionsToInspect, ), ;, }, private, void, initMapping, (, VariableMap, previousVarMap]
[;, parseConfiguration, (, functionsToInspect, ), ;, }, private, void, initMapping, (, VariableMap, previousVarMap, ,, Set, <, String, >, reservedNames, )]
[), ;, parseConfiguration, (, functionsToInspect, ), ;, }, private, void, initMapping, (, VariableMap, previousVarMap, ,, Set, <, String, >, reservedNames]
[;, }, private, void, initMapping, (, VariableMap, previousVarMap, ,, Set, <, String, >, reservedNames, ), {, Map, <, String, ,]
[), ;, }, private, void, initMapping, (, VariableMap, previousVarMap, ,, Set, <, String, >, reservedNames, ), {, Map, <, String]
[;, for, (, Map, ., Entry, <, String, ,, String, >, entry, :, previous, ., entrySet, (, ), ), {]
[., getOriginalNameToNewNameMap, (, ), ;, for, (, Map, ., Entry, <, String, ,, String, >, entry, :, previous, ., entrySet]
[), {, String, key, =, entry, ., getKey, (, ), ;, if, (, !, reservedNames, ., contains, (, key, )]
[., entrySet, (, ), ), {, String, key, =, entry, ., getKey, (, ), ;, if, (, !, reservedNames, .]
[;, if, (, !, reservedNames, ., contains, (, key, ), ), {, String, value, =, entry, ., getValue, (, )]
[., getKey, (, ), ;, if, (, !, reservedNames, ., contains, (, key, ), ), {, String, value, =, entry]
[), {, String, value, =, entry, ., getValue, (, ), ;, results, ., put, (, value, ,, new, Result, (]
[), {, String, value, =, entry, ., getValue, (, ), ;, results, ., put, (, value, ,, new, Result, (]
[., contains, (, key, ), ), {, String, value, =, entry, ., getValue, (, ), ;, results, ., put, (]
[), ), {, String, value, =, entry, ., getValue, (, ), ;, results, ., put, (, value, ,, new, Result]
[;, results, ., put, (, value, ,, new, Result, (, value, ,, key, ), ), ;, }, }, }, static]
[., getValue, (, ), ;, results, ., put, (, value, ,, new, Result, (, value, ,, key, ), ), ;]
[;, }, }, }, static, final, Predicate, <, Result, >, USED_RESULTS, =, new, Predicate, <, Result, >, (, ), {]
[., put, (, value, ,, new, Result, (, value, ,, key, ), ), ;, }, }, }, static, final, Predicate]
[,, new, Result, (, value, ,, key, ), ), ;, }, }, }, static, final, Predicate, <, Result, >, USED_RESULTS]
[), ;, }, }, }, static, final, Predicate, <, Result, >, USED_RESULTS, =, new, Predicate, <, Result, >, (, )]
[,, key, ), ), ;, }, }, }, static, final, Predicate, <, Result, >, USED_RESULTS, =, new, Predicate, <, Result]
[), ), ;, }, }, }, static, final, Predicate, <, Result, >, USED_RESULTS, =, new, Predicate, <, Result, >, (]
[;, List, <, Result, >, getResult, (, ), {, return, ImmutableList, ., copyOf, (, Iterables, ., filter, (, results, .]
[;, }, }, ;, List, <, Result, >, getResult, (, ), {, return, ImmutableList, ., copyOf, (, Iterables, ., filter]
[;, }, }, ;, List, <, Result, >, getResult, (, ), {, return, ImmutableList, ., copyOf, (, Iterables, ., filter]
[., isEmpty, (, ), ;, }, }, ;, List, <, Result, >, getResult, (, ), {, return, ImmutableList, ., copyOf]
[., replacementLocations, ., isEmpty, (, ), ;, }, }, ;, List, <, Result, >, getResult, (, ), {, return, ImmutableList]
[;, }, VariableMap, getStringMap, (, ), {, ImmutableMap, ., Builder, <, String, ,, String, >, map, =, ImmutableMap, ., builder]
[., copyOf, (, Iterables, ., filter, (, results, ., values, (, ), ,, USED_RESULTS, ), ), ;, }, VariableMap, getStringMap]
[), ;, }, VariableMap, getStringMap, (, ), {, ImmutableMap, ., Builder, <, String, ,, String, >, map, =, ImmutableMap, .]
[., filter, (, results, ., values, (, ), ,, USED_RESULTS, ), ), ;, }, VariableMap, getStringMap, (, ), {, ImmutableMap]
[,, USED_RESULTS, ), ), ;, }, VariableMap, getStringMap, (, ), {, ImmutableMap, ., Builder, <, String, ,, String, >, map]
[., values, (, ), ,, USED_RESULTS, ), ), ;, }, VariableMap, getStringMap, (, ), {, ImmutableMap, ., Builder, <, String]
[), ), ;, }, VariableMap, getStringMap, (, ), {, ImmutableMap, ., Builder, <, String, ,, String, >, map, =, ImmutableMap]
[;, for, (, Result, result, :, Iterables, ., filter, (, results, ., values, (, ), ,, USED_RESULTS, ), ), {]
[., builder, (, ), ;, for, (, Result, result, :, Iterables, ., filter, (, results, ., values, (, ), ,]
[), {, map, ., put, (, result, ., replacement, ,, result, ., original, ), ;, }, VariableMap, stringMap, =, new]
[., filter, (, results, ., values, (, ), ,, USED_RESULTS, ), ), {, map, ., put, (, result, ., replacement]
[,, USED_RESULTS, ), ), {, map, ., put, (, result, ., replacement, ,, result, ., original, ), ;, }, VariableMap]
[., values, (, ), ,, USED_RESULTS, ), ), {, map, ., put, (, result, ., replacement, ,, result, ., original]
[), ), {, map, ., put, (, result, ., replacement, ,, result, ., original, ), ;, }, VariableMap, stringMap, =]
[;, }, VariableMap, stringMap, =, new, VariableMap, (, map, ., build, (, ), ), ;, return, stringMap, ;, }, @]
[., put, (, result, ., replacement, ,, result, ., original, ), ;, }, VariableMap, stringMap, =, new, VariableMap, (, map]
[,, result, ., original, ), ;, }, VariableMap, stringMap, =, new, VariableMap, (, map, ., build, (, ), ), ;]
[., replacement, ,, result, ., original, ), ;, }, VariableMap, stringMap, =, new, VariableMap, (, map, ., build, (, )]
[), ;, }, VariableMap, stringMap, =, new, VariableMap, (, map, ., build, (, ), ), ;, return, stringMap, ;, }]
[., original, ), ;, }, VariableMap, stringMap, =, new, VariableMap, (, map, ., build, (, ), ), ;, return, stringMap]
[;, return, stringMap, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, .]
[), ;, return, stringMap, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[., build, (, ), ), ;, return, stringMap, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[,, root, ,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node]
[,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch]
[), {, case, Token, ., NEW, :, case, Token, ., CALL, :, Node, calledFn, =, n, ., getFirstChild, (, )]
[., getType, (, ), ), {, case, Token, ., NEW, :, case, Token, ., CALL, :, Node, calledFn, =, n]
[:, case, Token, ., CALL, :, Node, calledFn, =, n, ., getFirstChild, (, ), ;, String, name, =, calledFn, .]
[., NEW, :, case, Token, ., CALL, :, Node, calledFn, =, n, ., getFirstChild, (, ), ;, String, name, =]
[:, Node, calledFn, =, n, ., getFirstChild, (, ), ;, String, name, =, calledFn, ., getQualifiedName, (, ), ;, if]
[., CALL, :, Node, calledFn, =, n, ., getFirstChild, (, ), ;, String, name, =, calledFn, ., getQualifiedName, (, )]
[;, String, name, =, calledFn, ., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, Config, config, =]
[., getFirstChild, (, ), ;, String, name, =, calledFn, ., getQualifiedName, (, ), ;, if, (, name, !=, null, )]
[;, if, (, name, !=, null, ), {, Config, config, =, findMatching, (, name, ), ;, if, (, config, !=]
[., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, Config, config, =, findMatching, (, name, ), ;]
[), {, Config, config, =, findMatching, (, name, ), ;, if, (, config, !=, null, ), {, doSubstitutions, (, t]
[!=, null, ), {, Config, config, =, findMatching, (, name, ), ;, if, (, config, !=, null, ), {, doSubstitutions]
[), {, Config, config, =, findMatching, (, name, ), ;, if, (, config, !=, null, ), {, doSubstitutions, (, t]
[;, if, (, config, !=, null, ), {, doSubstitutions, (, t, ,, config, ,, n, ), ;, return, ;, }]
[), ;, if, (, config, !=, null, ), {, doSubstitutions, (, t, ,, config, ,, n, ), ;, return, ;]
[), {, doSubstitutions, (, t, ,, config, ,, n, ), ;, return, ;, }, }, if, (, NodeUtil, ., isGet]
[!=, null, ), {, doSubstitutions, (, t, ,, config, ,, n, ), ;, return, ;, }, }, if, (, NodeUtil]
[), {, doSubstitutions, (, t, ,, config, ,, n, ), ;, return, ;, }, }, if, (, NodeUtil, ., isGet]
[;, return, ;, }, }, if, (, NodeUtil, ., isGet, (, calledFn, ), ), {, Node, rhs, =, calledFn, .]
[,, config, ,, n, ), ;, return, ;, }, }, if, (, NodeUtil, ., isGet, (, calledFn, ), ), {]
[,, n, ), ;, return, ;, }, }, if, (, NodeUtil, ., isGet, (, calledFn, ), ), {, Node, rhs]
[), ;, return, ;, }, }, if, (, NodeUtil, ., isGet, (, calledFn, ), ), {, Node, rhs, =, calledFn]
[), {, Node, rhs, =, calledFn, ., getLastChild, (, ), ;, if, (, rhs, ., isName, (, ), ||, rhs]
[., isGet, (, calledFn, ), ), {, Node, rhs, =, calledFn, ., getLastChild, (, ), ;, if, (, rhs, .]
[), ), {, Node, rhs, =, calledFn, ., getLastChild, (, ), ;, if, (, rhs, ., isName, (, ), ||]
[;, if, (, rhs, ., isName, (, ), ||, rhs, ., isString, (, ), ), {, String, methodName, =, rhs]
[., getLastChild, (, ), ;, if, (, rhs, ., isName, (, ), ||, rhs, ., isString, (, ), ), {]
[), {, String, methodName, =, rhs, ., getString, (, ), ;, Collection, <, String, >, classes, =, methods, ., get]
[||, rhs, ., isString, (, ), ), {, String, methodName, =, rhs, ., getString, (, ), ;, Collection, <, String]
[., isName, (, ), ||, rhs, ., isString, (, ), ), {, String, methodName, =, rhs, ., getString, (, )]
[), {, String, methodName, =, rhs, ., getString, (, ), ;, Collection, <, String, >, classes, =, methods, ., get]
[., isString, (, ), ), {, String, methodName, =, rhs, ., getString, (, ), ;, Collection, <, String, >, classes]
[;, Collection, <, String, >, classes, =, methods, ., get, (, methodName, ), ;, if, (, classes, !=, null, )]
[., getString, (, ), ;, Collection, <, String, >, classes, =, methods, ., get, (, methodName, ), ;, if, (]
[;, if, (, classes, !=, null, ), {, Node, lhs, =, calledFn, ., getFirstChild, (, ), ;, if, (, lhs]
[., get, (, methodName, ), ;, if, (, classes, !=, null, ), {, Node, lhs, =, calledFn, ., getFirstChild, (]
[), ;, if, (, classes, !=, null, ), {, Node, lhs, =, calledFn, ., getFirstChild, (, ), ;, if, (]
[), {, Node, lhs, =, calledFn, ., getFirstChild, (, ), ;, if, (, lhs, ., getJSType, (, ), !=, null]
[!=, null, ), {, Node, lhs, =, calledFn, ., getFirstChild, (, ), ;, if, (, lhs, ., getJSType, (, )]
[), {, Node, lhs, =, calledFn, ., getFirstChild, (, ), ;, if, (, lhs, ., getJSType, (, ), !=, null]
[;, if, (, lhs, ., getJSType, (, ), !=, null, ), {, JSType, type, =, lhs, ., getJSType, (, )]
[., getFirstChild, (, ), ;, if, (, lhs, ., getJSType, (, ), !=, null, ), {, JSType, type, =, lhs]
[), {, JSType, type, =, lhs, ., getJSType, (, ), ., restrictByNotNullOrUndefined, (, ), ;, Config, config, =, findMatchingClass, (]
[!=, null, ), {, JSType, type, =, lhs, ., getJSType, (, ), ., restrictByNotNullOrUndefined, (, ), ;, Config, config, =]
[., getJSType, (, ), !=, null, ), {, JSType, type, =, lhs, ., getJSType, (, ), ., restrictByNotNullOrUndefined, (, )]
[), {, JSType, type, =, lhs, ., getJSType, (, ), ., restrictByNotNullOrUndefined, (, ), ;, Config, config, =, findMatchingClass, (]
[;, Config, config, =, findMatchingClass, (, type, ,, classes, ), ;, if, (, config, !=, null, ), {, doSubstitutions, (]
[., restrictByNotNullOrUndefined, (, ), ;, Config, config, =, findMatchingClass, (, type, ,, classes, ), ;, if, (, config, !=, null]
[., getJSType, (, ), ., restrictByNotNullOrUndefined, (, ), ;, Config, config, =, findMatchingClass, (, type, ,, classes, ), ;, if]
[;, if, (, config, !=, null, ), {, doSubstitutions, (, t, ,, config, ,, n, ), ;, return, ;, }]
[,, classes, ), ;, if, (, config, !=, null, ), {, doSubstitutions, (, t, ,, config, ,, n, ), ;]
[), ;, if, (, config, !=, null, ), {, doSubstitutions, (, t, ,, config, ,, n, ), ;, return, ;]
[), {, doSubstitutions, (, t, ,, config, ,, n, ), ;, return, ;, }, }, }, }, }, break, ;]
[!=, null, ), {, doSubstitutions, (, t, ,, config, ,, n, ), ;, return, ;, }, }, }, }, }]
[), {, doSubstitutions, (, t, ,, config, ,, n, ), ;, return, ;, }, }, }, }, }, break, ;]
[;, return, ;, }, }, }, }, }, break, ;, }, }, private, Config, findMatching, (, String, name, ), {]
[,, config, ,, n, ), ;, return, ;, }, }, }, }, }, break, ;, }, }, private, Config, findMatching]
[,, n, ), ;, return, ;, }, }, }, }, }, break, ;, }, }, private, Config, findMatching, (, String]
[), ;, return, ;, }, }, }, }, }, break, ;, }, }, private, Config, findMatching, (, String, name, )]
[;, if, (, config, ==, null, ), {, name, =, name, ., replace, (, '$', ,, '.', ), ;, config]
[., get, (, name, ), ;, if, (, config, ==, null, ), {, name, =, name, ., replace, (, '$']
[), ;, if, (, config, ==, null, ), {, name, =, name, ., replace, (, '$', ,, '.', ), ;]
[), {, name, =, name, ., replace, (, '$', ,, '.', ), ;, config, =, functions, ., get, (, name]
[==, null, ), {, name, =, name, ., replace, (, '$', ,, '.', ), ;, config, =, functions, ., get]
[), {, name, =, name, ., replace, (, '$', ,, '.', ), ;, config, =, functions, ., get, (, name]
[=, name, ., replace, (, '$', ,, '.', ), ;, config, =, functions, ., get, (, name, ), ;, }]
[;, config, =, functions, ., get, (, name, ), ;, }, return, config, ;, }, private, Config, findMatchingClass, (, JSType]
[., replace, (, '$', ,, '.', ), ;, config, =, functions, ., get, (, name, ), ;, }, return, config]
[,, '.', ), ;, config, =, functions, ., get, (, name, ), ;, }, return, config, ;, }, private, Config]
[), ;, config, =, functions, ., get, (, name, ), ;, }, return, config, ;, }, private, Config, findMatchingClass, (]
[=, functions, ., get, (, name, ), ;, }, return, config, ;, }, private, Config, findMatchingClass, (, JSType, callClassType, ,]
[;, }, return, config, ;, }, private, Config, findMatchingClass, (, JSType, callClassType, ,, Collection, <, String, >, declarationNames, ), {]
[., get, (, name, ), ;, }, return, config, ;, }, private, Config, findMatchingClass, (, JSType, callClassType, ,, Collection, <]
[), ;, }, return, config, ;, }, private, Config, findMatchingClass, (, JSType, callClassType, ,, Collection, <, String, >, declarationNames, )]
[;, }, private, Config, findMatchingClass, (, JSType, callClassType, ,, Collection, <, String, >, declarationNames, ), {, if, (, !, callClassType]
[), {, for, (, String, declarationName, :, declarationNames, ), {, String, className, =, getClassFromDeclarationName, (, declarationName, ), ;, JSType, methodClassType]
[&&, !, callClassType, ., isUnknownType, (, ), ), {, for, (, String, declarationName, :, declarationNames, ), {, String, className, =]
[&&, !, callClassType, ., isUnknownType, (, ), ), {, for, (, String, declarationName, :, declarationNames, ), {, String, className, =]
[., isNoObjectType, (, ), &&, !, callClassType, ., isUnknownType, (, ), ), {, for, (, String, declarationName, :, declarationNames, )]
[), {, for, (, String, declarationName, :, declarationNames, ), {, String, className, =, getClassFromDeclarationName, (, declarationName, ), ;, JSType, methodClassType]
[), {, for, (, String, declarationName, :, declarationNames, ), {, String, className, =, getClassFromDeclarationName, (, declarationName, ), ;, JSType, methodClassType]
[., isUnknownType, (, ), ), {, for, (, String, declarationName, :, declarationNames, ), {, String, className, =, getClassFromDeclarationName, (, declarationName]
[), {, String, className, =, getClassFromDeclarationName, (, declarationName, ), ;, JSType, methodClassType, =, registry, ., getType, (, className, ), ;]
[;, JSType, methodClassType, =, registry, ., getType, (, className, ), ;, if, (, methodClassType, !=, null, &&, callClassType, ., isSubtype]
[), ;, JSType, methodClassType, =, registry, ., getType, (, className, ), ;, if, (, methodClassType, !=, null, &&, callClassType, .]
[;, if, (, methodClassType, !=, null, &&, callClassType, ., isSubtype, (, methodClassType, ), ), {, return, functions, ., get, (]
[., getType, (, className, ), ;, if, (, methodClassType, !=, null, &&, callClassType, ., isSubtype, (, methodClassType, ), ), {]
[), ;, if, (, methodClassType, !=, null, &&, callClassType, ., isSubtype, (, methodClassType, ), ), {, return, functions, ., get]
[), {, return, functions, ., get, (, declarationName, ), ;, }, }, }, return, null, ;, }, private, void, doSubstitutions]
[&&, callClassType, ., isSubtype, (, methodClassType, ), ), {, return, functions, ., get, (, declarationName, ), ;, }, }, }]
[!=, null, &&, callClassType, ., isSubtype, (, methodClassType, ), ), {, return, functions, ., get, (, declarationName, ), ;, }]
[&&, callClassType, ., isSubtype, (, methodClassType, ), ), {, return, functions, ., get, (, declarationName, ), ;, }, }, }]
[), {, return, functions, ., get, (, declarationName, ), ;, }, }, }, return, null, ;, }, private, void, doSubstitutions]
[., isSubtype, (, methodClassType, ), ), {, return, functions, ., get, (, declarationName, ), ;, }, }, }, return, null]
[), ), {, return, functions, ., get, (, declarationName, ), ;, }, }, }, return, null, ;, }, private, void]
[;, }, }, }, return, null, ;, }, private, void, doSubstitutions, (, NodeTraversal, t, ,, Config, config, ,, Node, n]
[., get, (, declarationName, ), ;, }, }, }, return, null, ;, }, private, void, doSubstitutions, (, NodeTraversal, t, ,]
[), ;, }, }, }, return, null, ;, }, private, void, doSubstitutions, (, NodeTraversal, t, ,, Config, config, ,, Node]
[;, }, private, void, doSubstitutions, (, NodeTraversal, t, ,, Config, config, ,, Node, n, ), {, Preconditions, ., checkState, (]
[;, if, (, config, ., parameter, !=, Config, ., REPLACE_ALL_VALUE, ), {, Node, arg, =, n, ., getChildAtIndex, (, config]
[., checkState, (, n, ., isNew, (, ), ||, n, ., isCall, (, ), ), ;, if, (, config, .]
[), ;, if, (, config, ., parameter, !=, Config, ., REPLACE_ALL_VALUE, ), {, Node, arg, =, n, ., getChildAtIndex, (]
[||, n, ., isCall, (, ), ), ;, if, (, config, ., parameter, !=, Config, ., REPLACE_ALL_VALUE, ), {, Node]
[., isNew, (, ), ||, n, ., isCall, (, ), ), ;, if, (, config, ., parameter, !=, Config, .]
[), ;, if, (, config, ., parameter, !=, Config, ., REPLACE_ALL_VALUE, ), {, Node, arg, =, n, ., getChildAtIndex, (]
[., isCall, (, ), ), ;, if, (, config, ., parameter, !=, Config, ., REPLACE_ALL_VALUE, ), {, Node, arg, =]
[), {, Node, arg, =, n, ., getChildAtIndex, (, config, ., parameter, ), ;, if, (, arg, !=, null, )]
[!=, Config, ., REPLACE_ALL_VALUE, ), {, Node, arg, =, n, ., getChildAtIndex, (, config, ., parameter, ), ;, if, (]
[., parameter, !=, Config, ., REPLACE_ALL_VALUE, ), {, Node, arg, =, n, ., getChildAtIndex, (, config, ., parameter, ), ;]
[), {, Node, arg, =, n, ., getChildAtIndex, (, config, ., parameter, ), ;, if, (, arg, !=, null, )]
[., REPLACE_ALL_VALUE, ), {, Node, arg, =, n, ., getChildAtIndex, (, config, ., parameter, ), ;, if, (, arg, !=]
[;, if, (, arg, !=, null, ), {, replaceExpression, (, t, ,, arg, ,, n, ), ;, }, }, else]
[., getChildAtIndex, (, config, ., parameter, ), ;, if, (, arg, !=, null, ), {, replaceExpression, (, t, ,, arg]
[), ;, if, (, arg, !=, null, ), {, replaceExpression, (, t, ,, arg, ,, n, ), ;, }, }]
[., parameter, ), ;, if, (, arg, !=, null, ), {, replaceExpression, (, t, ,, arg, ,, n, ), ;]
[), {, replaceExpression, (, t, ,, arg, ,, n, ), ;, }, }, else, {, Node, firstParam, =, n, .]
[!=, null, ), {, replaceExpression, (, t, ,, arg, ,, n, ), ;, }, }, else, {, Node, firstParam, =]
[), {, replaceExpression, (, t, ,, arg, ,, n, ), ;, }, }, else, {, Node, firstParam, =, n, .]
[;, }, }, else, {, Node, firstParam, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, for, (]
[,, arg, ,, n, ), ;, }, }, else, {, Node, firstParam, =, n, ., getFirstChild, (, ), ., getNext]
[,, n, ), ;, }, }, else, {, Node, firstParam, =, n, ., getFirstChild, (, ), ., getNext, (, )]
[), ;, }, }, else, {, Node, firstParam, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, for]
[;, for, (, Node, arg, =, firstParam, ;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), )]
[., getNext, (, ), ;, for, (, Node, arg, =, firstParam, ;, arg, !=, null, ;, arg, =, arg, .]
[., getFirstChild, (, ), ., getNext, (, ), ;, for, (, Node, arg, =, firstParam, ;, arg, !=, null, ;]
[;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {, arg, =, replaceExpression, (, t, ,]
[;, arg, =, arg, ., getNext, (, ), ), {, arg, =, replaceExpression, (, t, ,, arg, ,, n, )]
[!=, null, ;, arg, =, arg, ., getNext, (, ), ), {, arg, =, replaceExpression, (, t, ,, arg, ,]
[;, arg, =, arg, ., getNext, (, ), ), {, arg, =, replaceExpression, (, t, ,, arg, ,, n, )]
[=, arg, ., getNext, (, ), ), {, arg, =, replaceExpression, (, t, ,, arg, ,, n, ), ;, }]
[), {, arg, =, replaceExpression, (, t, ,, arg, ,, n, ), ;, }, }, }, private, Node, replaceExpression, (]
[., getNext, (, ), ), {, arg, =, replaceExpression, (, t, ,, arg, ,, n, ), ;, }, }, }]
[=, replaceExpression, (, t, ,, arg, ,, n, ), ;, }, }, }, private, Node, replaceExpression, (, NodeTraversal, t, ,]
[;, }, }, }, private, Node, replaceExpression, (, NodeTraversal, t, ,, Node, expr, ,, Node, parent, ), {, Node, replacement]
[,, arg, ,, n, ), ;, }, }, }, private, Node, replaceExpression, (, NodeTraversal, t, ,, Node, expr, ,, Node]
[,, n, ), ;, }, }, }, private, Node, replaceExpression, (, NodeTraversal, t, ,, Node, expr, ,, Node, parent, )]
[), ;, }, }, }, private, Node, replaceExpression, (, NodeTraversal, t, ,, Node, expr, ,, Node, parent, ), {, Node]
[;, String, replacementString, ;, switch, (, expr, ., getType, (, ), ), {, case, Token, ., STRING, :, key, =]
[), {, case, Token, ., STRING, :, key, =, expr, ., getString, (, ), ;, replacementString, =, getReplacement, (, key]
[., getType, (, ), ), {, case, Token, ., STRING, :, key, =, expr, ., getString, (, ), ;, replacementString]
[:, key, =, expr, ., getString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;, replacement, =, IR, .]
[., STRING, :, key, =, expr, ., getString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;, replacement, =]
[=, expr, ., getString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;, replacement, =, IR, ., string, (]
[;, replacementString, =, getReplacement, (, key, ), ;, replacement, =, IR, ., string, (, replacementString, ), ;, break, ;, case]
[., getString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;, replacement, =, IR, ., string, (, replacementString, )]
[=, getReplacement, (, key, ), ;, replacement, =, IR, ., string, (, replacementString, ), ;, break, ;, case, Token, .]
[;, replacement, =, IR, ., string, (, replacementString, ), ;, break, ;, case, Token, ., ADD, :, StringBuilder, keyBuilder, =]
[), ;, replacement, =, IR, ., string, (, replacementString, ), ;, break, ;, case, Token, ., ADD, :, StringBuilder, keyBuilder]
[=, IR, ., string, (, replacementString, ), ;, break, ;, case, Token, ., ADD, :, StringBuilder, keyBuilder, =, new, StringBuilder]
[;, break, ;, case, Token, ., ADD, :, StringBuilder, keyBuilder, =, new, StringBuilder, (, ), ;, Node, keyNode, =, IR]
[., string, (, replacementString, ), ;, break, ;, case, Token, ., ADD, :, StringBuilder, keyBuilder, =, new, StringBuilder, (, )]
[), ;, break, ;, case, Token, ., ADD, :, StringBuilder, keyBuilder, =, new, StringBuilder, (, ), ;, Node, keyNode, =]
[:, StringBuilder, keyBuilder, =, new, StringBuilder, (, ), ;, Node, keyNode, =, IR, ., string, (, "", ), ;, replacement]
[., ADD, :, StringBuilder, keyBuilder, =, new, StringBuilder, (, ), ;, Node, keyNode, =, IR, ., string, (, "", )]
[;, Node, keyNode, =, IR, ., string, (, "", ), ;, replacement, =, buildReplacement, (, expr, ,, keyNode, ,, keyBuilder]
[;, replacement, =, buildReplacement, (, expr, ,, keyNode, ,, keyBuilder, ), ;, key, =, keyBuilder, ., toString, (, ), ;]
[., string, (, "", ), ;, replacement, =, buildReplacement, (, expr, ,, keyNode, ,, keyBuilder, ), ;, key, =, keyBuilder]
[), ;, replacement, =, buildReplacement, (, expr, ,, keyNode, ,, keyBuilder, ), ;, key, =, keyBuilder, ., toString, (, )]
[=, buildReplacement, (, expr, ,, keyNode, ,, keyBuilder, ), ;, key, =, keyBuilder, ., toString, (, ), ;, replacementString, =]
[;, key, =, keyBuilder, ., toString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;, keyNode, ., setString, (]
[,, keyNode, ,, keyBuilder, ), ;, key, =, keyBuilder, ., toString, (, ), ;, replacementString, =, getReplacement, (, key, )]
[,, keyBuilder, ), ;, key, =, keyBuilder, ., toString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;, keyNode]
[), ;, key, =, keyBuilder, ., toString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;, keyNode, ., setString]
[=, keyBuilder, ., toString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;, keyNode, ., setString, (, replacementString, )]
[;, replacementString, =, getReplacement, (, key, ), ;, keyNode, ., setString, (, replacementString, ), ;, break, ;, case, Token, .]
[., toString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;, keyNode, ., setString, (, replacementString, ), ;, break]
[=, getReplacement, (, key, ), ;, keyNode, ., setString, (, replacementString, ), ;, break, ;, case, Token, ., NAME, :]
[;, keyNode, ., setString, (, replacementString, ), ;, break, ;, case, Token, ., NAME, :, Scope, ., Var, var, =]
[), ;, keyNode, ., setString, (, replacementString, ), ;, break, ;, case, Token, ., NAME, :, Scope, ., Var, var]
[;, break, ;, case, Token, ., NAME, :, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar]
[., setString, (, replacementString, ), ;, break, ;, case, Token, ., NAME, :, Scope, ., Var, var, =, t, .]
[), ;, break, ;, case, Token, ., NAME, :, Scope, ., Var, var, =, t, ., getScope, (, ), .]
[:, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, expr, ., getString, (, ), )]
[., NAME, :, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, expr, ., getString, (]
[;, if, (, var, !=, null, &&, var, ., isConst, (, ), ), {, Node, value, =, var, ., getInitialValue]
[., getVar, (, expr, ., getString, (, ), ), ;, if, (, var, !=, null, &&, var, ., isConst, (]
[., getScope, (, ), ., getVar, (, expr, ., getString, (, ), ), ;, if, (, var, !=, null, &&]
[), ;, if, (, var, !=, null, &&, var, ., isConst, (, ), ), {, Node, value, =, var, .]
[., getString, (, ), ), ;, if, (, var, !=, null, &&, var, ., isConst, (, ), ), {, Node]
[), {, Node, value, =, var, ., getInitialValue, (, ), ;, if, (, value, !=, null, &&, value, ., isString]
[&&, var, ., isConst, (, ), ), {, Node, value, =, var, ., getInitialValue, (, ), ;, if, (, value]
[!=, null, &&, var, ., isConst, (, ), ), {, Node, value, =, var, ., getInitialValue, (, ), ;, if]
[&&, var, ., isConst, (, ), ), {, Node, value, =, var, ., getInitialValue, (, ), ;, if, (, value]
[), {, Node, value, =, var, ., getInitialValue, (, ), ;, if, (, value, !=, null, &&, value, ., isString]
[., isConst, (, ), ), {, Node, value, =, var, ., getInitialValue, (, ), ;, if, (, value, !=, null]
[;, if, (, value, !=, null, &&, value, ., isString, (, ), ), {, key, =, value, ., getString, (]
[., getInitialValue, (, ), ;, if, (, value, !=, null, &&, value, ., isString, (, ), ), {, key, =]
[), {, key, =, value, ., getString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;, replacement, =, IR]
[&&, value, ., isString, (, ), ), {, key, =, value, ., getString, (, ), ;, replacementString, =, getReplacement, (]
[!=, null, &&, value, ., isString, (, ), ), {, key, =, value, ., getString, (, ), ;, replacementString, =]
[&&, value, ., isString, (, ), ), {, key, =, value, ., getString, (, ), ;, replacementString, =, getReplacement, (]
[), {, key, =, value, ., getString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;, replacement, =, IR]
[., isString, (, ), ), {, key, =, value, ., getString, (, ), ;, replacementString, =, getReplacement, (, key, )]
[=, value, ., getString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;, replacement, =, IR, ., string, (]
[;, replacementString, =, getReplacement, (, key, ), ;, replacement, =, IR, ., string, (, replacementString, ), ;, break, ;, }]
[., getString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;, replacement, =, IR, ., string, (, replacementString, )]
[=, getReplacement, (, key, ), ;, replacement, =, IR, ., string, (, replacementString, ), ;, break, ;, }, }, return]
[;, replacement, =, IR, ., string, (, replacementString, ), ;, break, ;, }, }, return, expr, ;, default, :, return]
[), ;, replacement, =, IR, ., string, (, replacementString, ), ;, break, ;, }, }, return, expr, ;, default, :]
[=, IR, ., string, (, replacementString, ), ;, break, ;, }, }, return, expr, ;, default, :, return, expr, ;]
[;, break, ;, }, }, return, expr, ;, default, :, return, expr, ;, }, Preconditions, ., checkNotNull, (, key, )]
[., string, (, replacementString, ), ;, break, ;, }, }, return, expr, ;, default, :, return, expr, ;, }, Preconditions]
[), ;, break, ;, }, }, return, expr, ;, default, :, return, expr, ;, }, Preconditions, ., checkNotNull, (, key]
[;, default, :, return, expr, ;, }, Preconditions, ., checkNotNull, (, key, ), ;, Preconditions, ., checkNotNull, (, replacementString, )]
[;, }, Preconditions, ., checkNotNull, (, key, ), ;, Preconditions, ., checkNotNull, (, replacementString, ), ;, recordReplacement, (, expr, ,]
[;, Preconditions, ., checkNotNull, (, replacementString, ), ;, recordReplacement, (, expr, ,, key, ,, replacementString, ), ;, parent, ., replaceChild]
[., checkNotNull, (, key, ), ;, Preconditions, ., checkNotNull, (, replacementString, ), ;, recordReplacement, (, expr, ,, key, ,, replacementString]
[), ;, Preconditions, ., checkNotNull, (, replacementString, ), ;, recordReplacement, (, expr, ,, key, ,, replacementString, ), ;, parent, .]
[;, recordReplacement, (, expr, ,, key, ,, replacementString, ), ;, parent, ., replaceChild, (, expr, ,, replacement, ), ;, compiler]
[., checkNotNull, (, replacementString, ), ;, recordReplacement, (, expr, ,, key, ,, replacementString, ), ;, parent, ., replaceChild, (, expr]
[), ;, recordReplacement, (, expr, ,, key, ,, replacementString, ), ;, parent, ., replaceChild, (, expr, ,, replacement, ), ;]
[;, parent, ., replaceChild, (, expr, ,, replacement, ), ;, compiler, ., reportCodeChange, (, ), ;, return, replacement, ;, }]
[,, key, ,, replacementString, ), ;, parent, ., replaceChild, (, expr, ,, replacement, ), ;, compiler, ., reportCodeChange, (, )]
[,, replacementString, ), ;, parent, ., replaceChild, (, expr, ,, replacement, ), ;, compiler, ., reportCodeChange, (, ), ;, return]
[), ;, parent, ., replaceChild, (, expr, ,, replacement, ), ;, compiler, ., reportCodeChange, (, ), ;, return, replacement, ;]
[;, compiler, ., reportCodeChange, (, ), ;, return, replacement, ;, }, private, String, getReplacement, (, String, key, ), {, Result]
[., replaceChild, (, expr, ,, replacement, ), ;, compiler, ., reportCodeChange, (, ), ;, return, replacement, ;, }, private, String]
[,, replacement, ), ;, compiler, ., reportCodeChange, (, ), ;, return, replacement, ;, }, private, String, getReplacement, (, String, key]
[), ;, compiler, ., reportCodeChange, (, ), ;, return, replacement, ;, }, private, String, getReplacement, (, String, key, ), {]
[;, return, replacement, ;, }, private, String, getReplacement, (, String, key, ), {, Result, result, =, results, ., get, (]
[., reportCodeChange, (, ), ;, return, replacement, ;, }, private, String, getReplacement, (, String, key, ), {, Result, result, =]
[;, }, private, String, getReplacement, (, String, key, ), {, Result, result, =, results, ., get, (, key, ), ;]
[;, if, (, result, !=, null, ), {, return, result, ., replacement, ;, }, String, replacement, =, nameGenerator, ., generateNextName]
[., get, (, key, ), ;, if, (, result, !=, null, ), {, return, result, ., replacement, ;, }, String]
[), ;, if, (, result, !=, null, ), {, return, result, ., replacement, ;, }, String, replacement, =, nameGenerator, .]
[), {, return, result, ., replacement, ;, }, String, replacement, =, nameGenerator, ., generateNextName, (, ), ;, result, =, new]
[!=, null, ), {, return, result, ., replacement, ;, }, String, replacement, =, nameGenerator, ., generateNextName, (, ), ;, result]
[), {, return, result, ., replacement, ;, }, String, replacement, =, nameGenerator, ., generateNextName, (, ), ;, result, =, new]
[;, }, String, replacement, =, nameGenerator, ., generateNextName, (, ), ;, result, =, new, Result, (, key, ,, replacement, )]
[., replacement, ;, }, String, replacement, =, nameGenerator, ., generateNextName, (, ), ;, result, =, new, Result, (, key, ,]
[;, result, =, new, Result, (, key, ,, replacement, ), ;, results, ., put, (, key, ,, result, ), ;]
[., generateNextName, (, ), ;, result, =, new, Result, (, key, ,, replacement, ), ;, results, ., put, (, key]
[=, new, Result, (, key, ,, replacement, ), ;, results, ., put, (, key, ,, result, ), ;, return, replacement]
[;, results, ., put, (, key, ,, result, ), ;, return, replacement, ;, }, private, void, recordReplacement, (, Node, n]
[,, replacement, ), ;, results, ., put, (, key, ,, result, ), ;, return, replacement, ;, }, private, void, recordReplacement]
[), ;, results, ., put, (, key, ,, result, ), ;, return, replacement, ;, }, private, void, recordReplacement, (, Node]
[;, return, replacement, ;, }, private, void, recordReplacement, (, Node, n, ,, String, key, ,, String, replacement, ), {, Result]
[., put, (, key, ,, result, ), ;, return, replacement, ;, }, private, void, recordReplacement, (, Node, n, ,, String]
[,, result, ), ;, return, replacement, ;, }, private, void, recordReplacement, (, Node, n, ,, String, key, ,, String, replacement]
[), ;, return, replacement, ;, }, private, void, recordReplacement, (, Node, n, ,, String, key, ,, String, replacement, ), {]
[;, }, private, void, recordReplacement, (, Node, n, ,, String, key, ,, String, replacement, ), {, Result, result, =, results]
[;, Preconditions, ., checkState, (, result, !=, null, ), ;, result, ., addLocation, (, n, ), ;, }, private, Node]
[., get, (, key, ), ;, Preconditions, ., checkState, (, result, !=, null, ), ;, result, ., addLocation, (, n]
[), ;, Preconditions, ., checkState, (, result, !=, null, ), ;, result, ., addLocation, (, n, ), ;, }, private]
[;, result, ., addLocation, (, n, ), ;, }, private, Node, buildReplacement, (, Node, expr, ,, Node, prefix, ,, StringBuilder]
[., checkState, (, result, !=, null, ), ;, result, ., addLocation, (, n, ), ;, }, private, Node, buildReplacement, (]
[), ;, result, ., addLocation, (, n, ), ;, }, private, Node, buildReplacement, (, Node, expr, ,, Node, prefix, ,]
[!=, null, ), ;, result, ., addLocation, (, n, ), ;, }, private, Node, buildReplacement, (, Node, expr, ,, Node]
[), ;, result, ., addLocation, (, n, ), ;, }, private, Node, buildReplacement, (, Node, expr, ,, Node, prefix, ,]
[;, }, private, Node, buildReplacement, (, Node, expr, ,, Node, prefix, ,, StringBuilder, keyBuilder, ), {, switch, (, expr, .]
[., addLocation, (, n, ), ;, }, private, Node, buildReplacement, (, Node, expr, ,, Node, prefix, ,, StringBuilder, keyBuilder, )]
[), ;, }, private, Node, buildReplacement, (, Node, expr, ,, Node, prefix, ,, StringBuilder, keyBuilder, ), {, switch, (, expr]
[), {, case, Token, ., ADD, :, Node, left, =, expr, ., getFirstChild, (, ), ;, Node, right, =, left]
[., getType, (, ), ), {, case, Token, ., ADD, :, Node, left, =, expr, ., getFirstChild, (, ), ;]
[:, Node, left, =, expr, ., getFirstChild, (, ), ;, Node, right, =, left, ., getNext, (, ), ;, prefix]
[., ADD, :, Node, left, =, expr, ., getFirstChild, (, ), ;, Node, right, =, left, ., getNext, (, )]
[;, Node, right, =, left, ., getNext, (, ), ;, prefix, =, buildReplacement, (, left, ,, prefix, ,, keyBuilder, )]
[., getFirstChild, (, ), ;, Node, right, =, left, ., getNext, (, ), ;, prefix, =, buildReplacement, (, left, ,]
[;, prefix, =, buildReplacement, (, left, ,, prefix, ,, keyBuilder, ), ;, return, buildReplacement, (, right, ,, prefix, ,, keyBuilder]
[., getNext, (, ), ;, prefix, =, buildReplacement, (, left, ,, prefix, ,, keyBuilder, ), ;, return, buildReplacement, (, right]
[=, buildReplacement, (, left, ,, prefix, ,, keyBuilder, ), ;, return, buildReplacement, (, right, ,, prefix, ,, keyBuilder, ), ;]
[;, return, buildReplacement, (, right, ,, prefix, ,, keyBuilder, ), ;, case, Token, ., STRING, :, keyBuilder, ., append, (]
[,, prefix, ,, keyBuilder, ), ;, return, buildReplacement, (, right, ,, prefix, ,, keyBuilder, ), ;, case, Token, ., STRING]
[,, keyBuilder, ), ;, return, buildReplacement, (, right, ,, prefix, ,, keyBuilder, ), ;, case, Token, ., STRING, :, keyBuilder]
[), ;, return, buildReplacement, (, right, ,, prefix, ,, keyBuilder, ), ;, case, Token, ., STRING, :, keyBuilder, ., append]
[;, case, Token, ., STRING, :, keyBuilder, ., append, (, expr, ., getString, (, ), ), ;, return, prefix, ;]
[,, prefix, ,, keyBuilder, ), ;, case, Token, ., STRING, :, keyBuilder, ., append, (, expr, ., getString, (, )]
[,, keyBuilder, ), ;, case, Token, ., STRING, :, keyBuilder, ., append, (, expr, ., getString, (, ), ), ;]
[), ;, case, Token, ., STRING, :, keyBuilder, ., append, (, expr, ., getString, (, ), ), ;, return, prefix]
[:, keyBuilder, ., append, (, expr, ., getString, (, ), ), ;, return, prefix, ;, default, :, keyBuilder, ., append]
[., STRING, :, keyBuilder, ., append, (, expr, ., getString, (, ), ), ;, return, prefix, ;, default, :, keyBuilder]
[;, return, prefix, ;, default, :, keyBuilder, ., append, (, placeholderToken, ), ;, prefix, =, IR, ., add, (, prefix]
[., append, (, expr, ., getString, (, ), ), ;, return, prefix, ;, default, :, keyBuilder, ., append, (, placeholderToken]
[), ;, return, prefix, ;, default, :, keyBuilder, ., append, (, placeholderToken, ), ;, prefix, =, IR, ., add, (]
[., getString, (, ), ), ;, return, prefix, ;, default, :, keyBuilder, ., append, (, placeholderToken, ), ;, prefix, =]
[;, default, :, keyBuilder, ., append, (, placeholderToken, ), ;, prefix, =, IR, ., add, (, prefix, ,, IR, .]
[;, prefix, =, IR, ., add, (, prefix, ,, IR, ., string, (, placeholderToken, ), ), ;, return, IR, .]
[., append, (, placeholderToken, ), ;, prefix, =, IR, ., add, (, prefix, ,, IR, ., string, (, placeholderToken, )]
[), ;, prefix, =, IR, ., add, (, prefix, ,, IR, ., string, (, placeholderToken, ), ), ;, return, IR]
[=, IR, ., add, (, prefix, ,, IR, ., string, (, placeholderToken, ), ), ;, return, IR, ., add, (]
[;, return, IR, ., add, (, prefix, ,, expr, ., cloneTree, (, ), ), ;, }, }, private, String, getMethodFromDeclarationName]
[., add, (, prefix, ,, IR, ., string, (, placeholderToken, ), ), ;, return, IR, ., add, (, prefix, ,]
[,, IR, ., string, (, placeholderToken, ), ), ;, return, IR, ., add, (, prefix, ,, expr, ., cloneTree, (]
[), ;, return, IR, ., add, (, prefix, ,, expr, ., cloneTree, (, ), ), ;, }, }, private, String]
[., string, (, placeholderToken, ), ), ;, return, IR, ., add, (, prefix, ,, expr, ., cloneTree, (, ), )]
[), ), ;, return, IR, ., add, (, prefix, ,, expr, ., cloneTree, (, ), ), ;, }, }, private]
[;, }, }, private, String, getMethodFromDeclarationName, (, String, fullDeclarationName, ), {, String, [, ], parts, =, fullDeclarationName, ., split, (]
[., add, (, prefix, ,, expr, ., cloneTree, (, ), ), ;, }, }, private, String, getMethodFromDeclarationName, (, String, fullDeclarationName]
[,, expr, ., cloneTree, (, ), ), ;, }, }, private, String, getMethodFromDeclarationName, (, String, fullDeclarationName, ), {, String, []
[), ;, }, }, private, String, getMethodFromDeclarationName, (, String, fullDeclarationName, ), {, String, [, ], parts, =, fullDeclarationName, ., split]
[., cloneTree, (, ), ), ;, }, }, private, String, getMethodFromDeclarationName, (, String, fullDeclarationName, ), {, String, [, ], parts]
[;, Preconditions, ., checkState, (, parts, ., length, ==, 1, ||, parts, ., length, ==, 2, ), ;, if, (]
[., split, (, "\\.prototype\\.", ), ;, Preconditions, ., checkState, (, parts, ., length, ==, 1, ||, parts, ., length, ==]
[), ;, Preconditions, ., checkState, (, parts, ., length, ==, 1, ||, parts, ., length, ==, 2, ), ;, if]
[;, if, (, parts, ., length, ==, 2, ), {, return, parts, [, 1, ], ;, }, return, null, ;]
[., checkState, (, parts, ., length, ==, 1, ||, parts, ., length, ==, 2, ), ;, if, (, parts, .]
[), ;, if, (, parts, ., length, ==, 2, ), {, return, parts, [, 1, ], ;, }, return, null]
[||, parts, ., length, ==, 2, ), ;, if, (, parts, ., length, ==, 2, ), {, return, parts, []
[==, 1, ||, parts, ., length, ==, 2, ), ;, if, (, parts, ., length, ==, 2, ), {, return]
[., length, ==, 1, ||, parts, ., length, ==, 2, ), ;, if, (, parts, ., length, ==, 2, )]
[||, parts, ., length, ==, 2, ), ;, if, (, parts, ., length, ==, 2, ), {, return, parts, []
[), ;, if, (, parts, ., length, ==, 2, ), {, return, parts, [, 1, ], ;, }, return, null]
[==, 2, ), ;, if, (, parts, ., length, ==, 2, ), {, return, parts, [, 1, ], ;, }]
[., length, ==, 2, ), ;, if, (, parts, ., length, ==, 2, ), {, return, parts, [, 1, ]]
[), ;, if, (, parts, ., length, ==, 2, ), {, return, parts, [, 1, ], ;, }, return, null]
[), {, return, parts, [, 1, ], ;, }, return, null, ;, }, private, String, getClassFromDeclarationName, (, String, fullDeclarationName, )]
[==, 2, ), {, return, parts, [, 1, ], ;, }, return, null, ;, }, private, String, getClassFromDeclarationName, (, String]
[., length, ==, 2, ), {, return, parts, [, 1, ], ;, }, return, null, ;, }, private, String, getClassFromDeclarationName]
[), {, return, parts, [, 1, ], ;, }, return, null, ;, }, private, String, getClassFromDeclarationName, (, String, fullDeclarationName, )]
[;, }, return, null, ;, }, private, String, getClassFromDeclarationName, (, String, fullDeclarationName, ), {, String, [, ], parts, =, fullDeclarationName]
[[, 1, ], ;, }, return, null, ;, }, private, String, getClassFromDeclarationName, (, String, fullDeclarationName, ), {, String, [, ]]
[], ;, }, return, null, ;, }, private, String, getClassFromDeclarationName, (, String, fullDeclarationName, ), {, String, [, ], parts, =]
[;, }, private, String, getClassFromDeclarationName, (, String, fullDeclarationName, ), {, String, [, ], parts, =, fullDeclarationName, ., split, (, "\\.prototype\\."]
[;, Preconditions, ., checkState, (, parts, ., length, ==, 1, ||, parts, ., length, ==, 2, ), ;, if, (]
[., split, (, "\\.prototype\\.", ), ;, Preconditions, ., checkState, (, parts, ., length, ==, 1, ||, parts, ., length, ==]
[), ;, Preconditions, ., checkState, (, parts, ., length, ==, 1, ||, parts, ., length, ==, 2, ), ;, if]
[;, if, (, parts, ., length, ==, 2, ), {, return, parts, [, 0, ], ;, }, return, null, ;]
[., checkState, (, parts, ., length, ==, 1, ||, parts, ., length, ==, 2, ), ;, if, (, parts, .]
[), ;, if, (, parts, ., length, ==, 2, ), {, return, parts, [, 0, ], ;, }, return, null]
[||, parts, ., length, ==, 2, ), ;, if, (, parts, ., length, ==, 2, ), {, return, parts, []
[==, 1, ||, parts, ., length, ==, 2, ), ;, if, (, parts, ., length, ==, 2, ), {, return]
[., length, ==, 1, ||, parts, ., length, ==, 2, ), ;, if, (, parts, ., length, ==, 2, )]
[||, parts, ., length, ==, 2, ), ;, if, (, parts, ., length, ==, 2, ), {, return, parts, []
[), ;, if, (, parts, ., length, ==, 2, ), {, return, parts, [, 0, ], ;, }, return, null]
[==, 2, ), ;, if, (, parts, ., length, ==, 2, ), {, return, parts, [, 0, ], ;, }]
[., length, ==, 2, ), ;, if, (, parts, ., length, ==, 2, ), {, return, parts, [, 0, ]]
[), ;, if, (, parts, ., length, ==, 2, ), {, return, parts, [, 0, ], ;, }, return, null]
[), {, return, parts, [, 0, ], ;, }, return, null, ;, }, private, void, parseConfiguration, (, List, <, String]
[==, 2, ), {, return, parts, [, 0, ], ;, }, return, null, ;, }, private, void, parseConfiguration, (, List]
[., length, ==, 2, ), {, return, parts, [, 0, ], ;, }, return, null, ;, }, private, void, parseConfiguration]
[), {, return, parts, [, 0, ], ;, }, return, null, ;, }, private, void, parseConfiguration, (, List, <, String]
[;, }, return, null, ;, }, private, void, parseConfiguration, (, List, <, String, >, functionsToInspect, ), {, for, (, String]
[[, 0, ], ;, }, return, null, ;, }, private, void, parseConfiguration, (, List, <, String, >, functionsToInspect, ), {]
[], ;, }, return, null, ;, }, private, void, parseConfiguration, (, List, <, String, >, functionsToInspect, ), {, for, (]
[;, }, private, void, parseConfiguration, (, List, <, String, >, functionsToInspect, ), {, for, (, String, function, :, functionsToInspect, )]
[), {, Config, config, =, parseConfiguration, (, function, ), ;, functions, ., put, (, config, ., name, ,, config, )]
[;, functions, ., put, (, config, ., name, ,, config, ), ;, String, method, =, getMethodFromDeclarationName, (, config, ., name]
[), ;, functions, ., put, (, config, ., name, ,, config, ), ;, String, method, =, getMethodFromDeclarationName, (, config, .]
[;, String, method, =, getMethodFromDeclarationName, (, config, ., name, ), ;, if, (, method, !=, null, ), {, methods, .]
[., put, (, config, ., name, ,, config, ), ;, String, method, =, getMethodFromDeclarationName, (, config, ., name, ), ;]
[,, config, ), ;, String, method, =, getMethodFromDeclarationName, (, config, ., name, ), ;, if, (, method, !=, null, )]
[., name, ,, config, ), ;, String, method, =, getMethodFromDeclarationName, (, config, ., name, ), ;, if, (, method, !=]
[), ;, String, method, =, getMethodFromDeclarationName, (, config, ., name, ), ;, if, (, method, !=, null, ), {, methods]
[;, if, (, method, !=, null, ), {, methods, ., put, (, method, ,, config, ., name, ), ;, }]
[), ;, if, (, method, !=, null, ), {, methods, ., put, (, method, ,, config, ., name, ), ;]
[., name, ), ;, if, (, method, !=, null, ), {, methods, ., put, (, method, ,, config, ., name]
[), {, methods, ., put, (, method, ,, config, ., name, ), ;, }, }, }, private, Config, parseConfiguration, (]
[!=, null, ), {, methods, ., put, (, method, ,, config, ., name, ), ;, }, }, }, private, Config]
[), {, methods, ., put, (, method, ,, config, ., name, ), ;, }, }, }, private, Config, parseConfiguration, (]
[;, }, }, }, private, Config, parseConfiguration, (, String, function, ), {, int, first, =, function, ., indexOf, (, '(']
[., put, (, method, ,, config, ., name, ), ;, }, }, }, private, Config, parseConfiguration, (, String, function, )]
[,, config, ., name, ), ;, }, }, }, private, Config, parseConfiguration, (, String, function, ), {, int, first, =]
[), ;, }, }, }, private, Config, parseConfiguration, (, String, function, ), {, int, first, =, function, ., indexOf, (]
[., name, ), ;, }, }, }, private, Config, parseConfiguration, (, String, function, ), {, int, first, =, function, .]
[;, int, last, =, function, ., indexOf, (, ')', ), ;, Preconditions, ., checkState, (, first, !=, -, 1, &&]
[., indexOf, (, '(', ), ;, int, last, =, function, ., indexOf, (, ')', ), ;, Preconditions, ., checkState, (]
[), ;, int, last, =, function, ., indexOf, (, ')', ), ;, Preconditions, ., checkState, (, first, !=, -, 1]
[;, Preconditions, ., checkState, (, first, !=, -, 1, &&, last, !=, -, 1, ), ;, String, name, =, function]
[., indexOf, (, ')', ), ;, Preconditions, ., checkState, (, first, !=, -, 1, &&, last, !=, -, 1, )]
[), ;, Preconditions, ., checkState, (, first, !=, -, 1, &&, last, !=, -, 1, ), ;, String, name, =]
[;, String, name, =, function, ., substring, (, 0, ,, first, ), ;, String, params, =, function, ., substring, (]
[., checkState, (, first, !=, -, 1, &&, last, !=, -, 1, ), ;, String, name, =, function, ., substring]
[), ;, String, name, =, function, ., substring, (, 0, ,, first, ), ;, String, params, =, function, ., substring]
[&&, last, !=, -, 1, ), ;, String, name, =, function, ., substring, (, 0, ,, first, ), ;, String]
[!=, -, 1, &&, last, !=, -, 1, ), ;, String, name, =, function, ., substring, (, 0, ,, first]
[&&, last, !=, -, 1, ), ;, String, name, =, function, ., substring, (, 0, ,, first, ), ;, String]
[&&, last, !=, -, 1, ), ;, String, name, =, function, ., substring, (, 0, ,, first, ), ;, String]
[), ;, String, name, =, function, ., substring, (, 0, ,, first, ), ;, String, params, =, function, ., substring]
[!=, -, 1, ), ;, String, name, =, function, ., substring, (, 0, ,, first, ), ;, String, params, =]
[), ;, String, name, =, function, ., substring, (, 0, ,, first, ), ;, String, params, =, function, ., substring]
[), ;, String, name, =, function, ., substring, (, 0, ,, first, ), ;, String, params, =, function, ., substring]
[;, String, params, =, function, ., substring, (, first, +, 1, ,, last, ), ;, int, paramCount, =, 0, ;]
[., substring, (, 0, ,, first, ), ;, String, params, =, function, ., substring, (, first, +, 1, ,, last]
[,, first, ), ;, String, params, =, function, ., substring, (, first, +, 1, ,, last, ), ;, int, paramCount]
[), ;, String, params, =, function, ., substring, (, first, +, 1, ,, last, ), ;, int, paramCount, =, 0]
[;, int, paramCount, =, 0, ;, int, replacementParameter, =, -, 1, ;, String, [, ], parts, =, params, ., split]
[., substring, (, first, +, 1, ,, last, ), ;, int, paramCount, =, 0, ;, int, replacementParameter, =, -, 1]
[,, last, ), ;, int, paramCount, =, 0, ;, int, replacementParameter, =, -, 1, ;, String, [, ], parts, =]
[+, 1, ,, last, ), ;, int, paramCount, =, 0, ;, int, replacementParameter, =, -, 1, ;, String, [, ]]
[,, last, ), ;, int, paramCount, =, 0, ;, int, replacementParameter, =, -, 1, ;, String, [, ], parts, =]
[), ;, int, paramCount, =, 0, ;, int, replacementParameter, =, -, 1, ;, String, [, ], parts, =, params, .]
[;, int, replacementParameter, =, -, 1, ;, String, [, ], parts, =, params, ., split, (, ",", ), ;, for]
[;, String, [, ], parts, =, params, ., split, (, ",", ), ;, for, (, String, param, :, parts, )]
[;, String, [, ], parts, =, params, ., split, (, ",", ), ;, for, (, String, param, :, parts, )]
[;, for, (, String, param, :, parts, ), {, paramCount, ++, ;, if, (, param, ., equals, (, REPLACE_ALL_MARKER, )]
[., split, (, ",", ), ;, for, (, String, param, :, parts, ), {, paramCount, ++, ;, if, (, param]
[), ;, for, (, String, param, :, parts, ), {, paramCount, ++, ;, if, (, param, ., equals, (, REPLACE_ALL_MARKER]
[), {, paramCount, ++, ;, if, (, param, ., equals, (, REPLACE_ALL_MARKER, ), ), {, Preconditions, ., checkState, (, paramCount]
[;, if, (, param, ., equals, (, REPLACE_ALL_MARKER, ), ), {, Preconditions, ., checkState, (, paramCount, ==, 1, &&, parts]
[++, ;, if, (, param, ., equals, (, REPLACE_ALL_MARKER, ), ), {, Preconditions, ., checkState, (, paramCount, ==, 1, &&]
[), {, Preconditions, ., checkState, (, paramCount, ==, 1, &&, parts, ., length, ==, 1, ), ;, replacementParameter, =, Config]
[., equals, (, REPLACE_ALL_MARKER, ), ), {, Preconditions, ., checkState, (, paramCount, ==, 1, &&, parts, ., length, ==, 1]
[), ), {, Preconditions, ., checkState, (, paramCount, ==, 1, &&, parts, ., length, ==, 1, ), ;, replacementParameter, =]
[;, replacementParameter, =, Config, ., REPLACE_ALL_VALUE, ;, }, else, if, (, param, ., equals, (, REPLACE_ONE_MARKER, ), ), {, Preconditions]
[., checkState, (, paramCount, ==, 1, &&, parts, ., length, ==, 1, ), ;, replacementParameter, =, Config, ., REPLACE_ALL_VALUE, ;]
[), ;, replacementParameter, =, Config, ., REPLACE_ALL_VALUE, ;, }, else, if, (, param, ., equals, (, REPLACE_ONE_MARKER, ), ), {]
[&&, parts, ., length, ==, 1, ), ;, replacementParameter, =, Config, ., REPLACE_ALL_VALUE, ;, }, else, if, (, param, .]
[==, 1, &&, parts, ., length, ==, 1, ), ;, replacementParameter, =, Config, ., REPLACE_ALL_VALUE, ;, }, else, if, (]
[&&, parts, ., length, ==, 1, ), ;, replacementParameter, =, Config, ., REPLACE_ALL_VALUE, ;, }, else, if, (, param, .]
[), ;, replacementParameter, =, Config, ., REPLACE_ALL_VALUE, ;, }, else, if, (, param, ., equals, (, REPLACE_ONE_MARKER, ), ), {]
[==, 1, ), ;, replacementParameter, =, Config, ., REPLACE_ALL_VALUE, ;, }, else, if, (, param, ., equals, (, REPLACE_ONE_MARKER, )]
[., length, ==, 1, ), ;, replacementParameter, =, Config, ., REPLACE_ALL_VALUE, ;, }, else, if, (, param, ., equals, (]
[), ;, replacementParameter, =, Config, ., REPLACE_ALL_VALUE, ;, }, else, if, (, param, ., equals, (, REPLACE_ONE_MARKER, ), ), {]
[=, Config, ., REPLACE_ALL_VALUE, ;, }, else, if, (, param, ., equals, (, REPLACE_ONE_MARKER, ), ), {, Preconditions, ., checkState]
[;, }, else, if, (, param, ., equals, (, REPLACE_ONE_MARKER, ), ), {, Preconditions, ., checkState, (, replacementParameter, ==, -]
[., REPLACE_ALL_VALUE, ;, }, else, if, (, param, ., equals, (, REPLACE_ONE_MARKER, ), ), {, Preconditions, ., checkState, (, replacementParameter]
[), {, Preconditions, ., checkState, (, replacementParameter, ==, -, 1, ), ;, replacementParameter, =, paramCount, ;, }, else, {, Preconditions]
[., equals, (, REPLACE_ONE_MARKER, ), ), {, Preconditions, ., checkState, (, replacementParameter, ==, -, 1, ), ;, replacementParameter, =, paramCount]
[), ), {, Preconditions, ., checkState, (, replacementParameter, ==, -, 1, ), ;, replacementParameter, =, paramCount, ;, }, else, {]
[;, replacementParameter, =, paramCount, ;, }, else, {, Preconditions, ., checkState, (, param, ., isEmpty, (, ), ,, "Unknown marker", ,]
[., checkState, (, replacementParameter, ==, -, 1, ), ;, replacementParameter, =, paramCount, ;, }, else, {, Preconditions, ., checkState, (]
[), ;, replacementParameter, =, paramCount, ;, }, else, {, Preconditions, ., checkState, (, param, ., isEmpty, (, ), ,, "Unknown marker"]
[==, -, 1, ), ;, replacementParameter, =, paramCount, ;, }, else, {, Preconditions, ., checkState, (, param, ., isEmpty, (]
[), ;, replacementParameter, =, paramCount, ;, }, else, {, Preconditions, ., checkState, (, param, ., isEmpty, (, ), ,, "Unknown marker"]
[), ;, replacementParameter, =, paramCount, ;, }, else, {, Preconditions, ., checkState, (, param, ., isEmpty, (, ), ,, "Unknown marker"]
[=, paramCount, ;, }, else, {, Preconditions, ., checkState, (, param, ., isEmpty, (, ), ,, "Unknown marker", ,, param, )]
[;, }, else, {, Preconditions, ., checkState, (, param, ., isEmpty, (, ), ,, "Unknown marker", ,, param, ), ;, }]
[;, }, }, Preconditions, ., checkState, (, replacementParameter, !=, -, 1, ), ;, return, new, Config, (, name, ,, replacementParameter]
[., checkState, (, param, ., isEmpty, (, ), ,, "Unknown marker", ,, param, ), ;, }, }, Preconditions, ., checkState, (]
[,, "Unknown marker", ,, param, ), ;, }, }, Preconditions, ., checkState, (, replacementParameter, !=, -, 1, ), ;, return, new]
[., isEmpty, (, ), ,, "Unknown marker", ,, param, ), ;, }, }, Preconditions, ., checkState, (, replacementParameter, !=, -, 1]
[,, param, ), ;, }, }, Preconditions, ., checkState, (, replacementParameter, !=, -, 1, ), ;, return, new, Config, (]
[), ;, }, }, Preconditions, ., checkState, (, replacementParameter, !=, -, 1, ), ;, return, new, Config, (, name, ,]
[;, return, new, Config, (, name, ,, replacementParameter, ), ;, }, private, static, NameGenerator, createNameGenerator, (, Iterable, <, String, >]
[., checkState, (, replacementParameter, !=, -, 1, ), ;, return, new, Config, (, name, ,, replacementParameter, ), ;, }, private]
[), ;, return, new, Config, (, name, ,, replacementParameter, ), ;, }, private, static, NameGenerator, createNameGenerator, (, Iterable, <, String]
[!=, -, 1, ), ;, return, new, Config, (, name, ,, replacementParameter, ), ;, }, private, static, NameGenerator, createNameGenerator, (]
[), ;, return, new, Config, (, name, ,, replacementParameter, ), ;, }, private, static, NameGenerator, createNameGenerator, (, Iterable, <, String]
[), ;, return, new, Config, (, name, ,, replacementParameter, ), ;, }, private, static, NameGenerator, createNameGenerator, (, Iterable, <, String]
[;, }, private, static, NameGenerator, createNameGenerator, (, Iterable, <, String, >, reserved, ), {, final, String, namePrefix, =, "", ;]
[,, replacementParameter, ), ;, }, private, static, NameGenerator, createNameGenerator, (, Iterable, <, String, >, reserved, ), {, final, String, namePrefix]
[), ;, }, private, static, NameGenerator, createNameGenerator, (, Iterable, <, String, >, reserved, ), {, final, String, namePrefix, =, ""]
[;, final, char, [, ], reservedChars, =, new, char, [, 0, ], ;, return, new, NameGenerator, (, ImmutableSet, ., copyOf]
[;, return, new, NameGenerator, (, ImmutableSet, ., copyOf, (, reserved, ), ,, namePrefix, ,, reservedChars, ), ;, }, }]
[], ;, return, new, NameGenerator, (, ImmutableSet, ., copyOf, (, reserved, ), ,, namePrefix, ,, reservedChars, ), ;, }, }]
[;, }, }]
[,, namePrefix, ,, reservedChars, ), ;, }, }]
[., copyOf, (, reserved, ), ,, namePrefix, ,, reservedChars, ), ;, }, }]
[), ,, namePrefix, ,, reservedChars, ), ;, }, }]
[,, reservedChars, ), ;, }, }]
[), ;, }, }]
