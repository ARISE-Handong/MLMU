[MathInternalError, ;, public, abstract, class, BaseSecantSolver, extends, AbstractUnivariateSolver, implements, BracketedUnivariateSolver, <, UnivariateFunction, >, {, protected, static, final, double, DEFAULT_ABSOLUTE_ACCURACY, =]
[;, private, final, Method, method, ;, protected, BaseSecantSolver, (, final, double, absoluteAccuracy, ,, final, Method, method, ), {, super, (]
[Method, method, ;, protected, BaseSecantSolver, (, final, double, absoluteAccuracy, ,, final, Method, method, ), {, super, (, absoluteAccuracy, ), ;]
[Method, method, ;, protected, BaseSecantSolver, (, final, double, absoluteAccuracy, ,, final, Method, method, ), {, super, (, absoluteAccuracy, ), ;]
[BaseSecantSolver, (, final, double, absoluteAccuracy, ,, final, Method, method, ), {, super, (, absoluteAccuracy, ), ;, this, ., allowed, =]
[BaseSecantSolver, (, final, double, absoluteAccuracy, ,, final, Method, method, ), {, super, (, absoluteAccuracy, ), ;, this, ., allowed, =]
[absoluteAccuracy, ,, final, Method, method, ), {, super, (, absoluteAccuracy, ), ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;]
[absoluteAccuracy, ,, final, Method, method, ), {, super, (, absoluteAccuracy, ), ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;]
[method, ), {, super, (, absoluteAccuracy, ), ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, this, ., method, =]
[;, }, protected, BaseSecantSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, Method, method, ), {, super, (]
[protected, BaseSecantSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, Method, method, ), {, super, (, relativeAccuracy, ,]
[final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, Method, method, ), {, super, (, relativeAccuracy, ,, absoluteAccuracy, ), ;]
[final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, Method, method, ), {, super, (, relativeAccuracy, ,, absoluteAccuracy, ), ;]
[final, double, absoluteAccuracy, ,, final, Method, method, ), {, super, (, relativeAccuracy, ,, absoluteAccuracy, ), ;, this, ., allowed, =]
[final, double, absoluteAccuracy, ,, final, Method, method, ), {, super, (, relativeAccuracy, ,, absoluteAccuracy, ), ;, this, ., allowed, =]
[final, Method, method, ), {, super, (, relativeAccuracy, ,, absoluteAccuracy, ), ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;]
[final, Method, method, ), {, super, (, relativeAccuracy, ,, absoluteAccuracy, ), ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;]
[{, super, (, relativeAccuracy, ,, absoluteAccuracy, ), ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, this, ., method, =]
[(, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, double, functionValueAccuracy, ,, final, Method, method, ), {, super, (]
[double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, double, functionValueAccuracy, ,, final, Method, method, ), {, super, (, relativeAccuracy, ,]
[,, final, double, absoluteAccuracy, ,, final, double, functionValueAccuracy, ,, final, Method, method, ), {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,]
[absoluteAccuracy, ,, final, double, functionValueAccuracy, ,, final, Method, method, ), {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, functionValueAccuracy, ), ;]
[absoluteAccuracy, ,, final, double, functionValueAccuracy, ,, final, Method, method, ), {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, functionValueAccuracy, ), ;]
[functionValueAccuracy, ,, final, Method, method, ), {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, functionValueAccuracy, ), ;, this, ., allowed, =]
[functionValueAccuracy, ,, final, Method, method, ), {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, functionValueAccuracy, ), ;, this, ., allowed, =]
[method, ), {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, functionValueAccuracy, ), ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;]
[method, ), {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, functionValueAccuracy, ), ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;]
[(, relativeAccuracy, ,, absoluteAccuracy, ,, functionValueAccuracy, ), ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, this, ., method, =]
[maxEval, ,, final, UnivariateFunction, f, ,, final, double, min, ,, final, double, max, ,, final, AllowedSolution, allowedSolution, ), {, return]
[final, UnivariateFunction, f, ,, final, double, min, ,, final, double, max, ,, final, AllowedSolution, allowedSolution, ), {, return, solve, (]
[f, ,, final, double, min, ,, final, double, max, ,, final, AllowedSolution, allowedSolution, ), {, return, solve, (, maxEval, ,]
[final, double, min, ,, final, double, max, ,, final, AllowedSolution, allowedSolution, ), {, return, solve, (, maxEval, ,, f, ,]
[min, ,, final, double, max, ,, final, AllowedSolution, allowedSolution, ), {, return, solve, (, maxEval, ,, f, ,, min, ,]
[final, double, max, ,, final, AllowedSolution, allowedSolution, ), {, return, solve, (, maxEval, ,, f, ,, min, ,, max, ,]
[final, double, max, ,, final, AllowedSolution, allowedSolution, ), {, return, solve, (, maxEval, ,, f, ,, min, ,, max, ,]
[max, ,, final, AllowedSolution, allowedSolution, ), {, return, solve, (, maxEval, ,, f, ,, min, ,, max, ,, min, +]
[max, ,, final, AllowedSolution, allowedSolution, ), {, return, solve, (, maxEval, ,, f, ,, min, ,, max, ,, min, +]
[final, AllowedSolution, allowedSolution, ), {, return, solve, (, maxEval, ,, f, ,, min, ,, max, ,, min, +, 0.5, *]
[AllowedSolution, allowedSolution, ), {, return, solve, (, maxEval, ,, f, ,, min, ,, max, ,, min, +, 0.5, *, (]
[AllowedSolution, allowedSolution, ), {, return, solve, (, maxEval, ,, f, ,, min, ,, max, ,, min, +, 0.5, *, (]
[), {, return, solve, (, maxEval, ,, f, ,, min, ,, max, ,, min, +, 0.5, *, (, max, -]
[solve, (, maxEval, ,, f, ,, min, ,, max, ,, min, +, 0.5, *, (, max, -, min, ), ,]
[UnivariateFunction, f, ,, final, double, min, ,, final, double, max, ,, final, double, startValue, ,, final, AllowedSolution, allowedSolution, ), {]
[UnivariateFunction, f, ,, final, double, min, ,, final, double, max, ,, final, double, startValue, ,, final, AllowedSolution, allowedSolution, ), {]
[double, min, ,, final, double, max, ,, final, double, startValue, ,, final, AllowedSolution, allowedSolution, ), {, this, ., allowed, =]
[final, double, max, ,, final, double, startValue, ,, final, AllowedSolution, allowedSolution, ), {, this, ., allowed, =, allowedSolution, ;, return]
[final, double, max, ,, final, double, startValue, ,, final, AllowedSolution, allowedSolution, ), {, this, ., allowed, =, allowedSolution, ;, return]
[final, double, startValue, ,, final, AllowedSolution, allowedSolution, ), {, this, ., allowed, =, allowedSolution, ;, return, super, ., solve, (]
[startValue, ,, final, AllowedSolution, allowedSolution, ), {, this, ., allowed, =, allowedSolution, ;, return, super, ., solve, (, maxEval, ,]
[final, AllowedSolution, allowedSolution, ), {, this, ., allowed, =, allowedSolution, ;, return, super, ., solve, (, maxEval, ,, f, ,]
[allowedSolution, ), {, this, ., allowed, =, allowedSolution, ;, return, super, ., solve, (, maxEval, ,, f, ,, min, ,]
[{, this, ., allowed, =, allowedSolution, ;, return, super, ., solve, (, maxEval, ,, f, ,, min, ,, max, ,]
[maxEval, ,, final, UnivariateFunction, f, ,, final, double, min, ,, final, double, max, ,, final, double, startValue, ), {, return]
[final, UnivariateFunction, f, ,, final, double, min, ,, final, double, max, ,, final, double, startValue, ), {, return, solve, (]
[f, ,, final, double, min, ,, final, double, max, ,, final, double, startValue, ), {, return, solve, (, maxEval, ,]
[final, double, min, ,, final, double, max, ,, final, double, startValue, ), {, return, solve, (, maxEval, ,, f, ,]
[min, ,, final, double, max, ,, final, double, startValue, ), {, return, solve, (, maxEval, ,, f, ,, min, ,]
[final, double, max, ,, final, double, startValue, ), {, return, solve, (, maxEval, ,, f, ,, min, ,, max, ,]
[max, ,, final, double, startValue, ), {, return, solve, (, maxEval, ,, f, ,, min, ,, max, ,, startValue, ,]
[max, ,, final, double, startValue, ), {, return, solve, (, maxEval, ,, f, ,, min, ,, max, ,, startValue, ,]
[AllowedSolution, ., ANY_SIDE, ), ;, }, @, Override, protected, final, double, doSolve, (, ), throws, ConvergenceException, {, double, x0, =]
[Override, protected, final, double, doSolve, (, ), throws, ConvergenceException, {, double, x0, =, getMin, (, ), ;, double, x1, =]
[throws, ConvergenceException, {, double, x0, =, getMin, (, ), ;, double, x1, =, getMax, (, ), ;, double, f0, =]
[{, double, x0, =, getMin, (, ), ;, double, x1, =, getMax, (, ), ;, double, f0, =, computeObjectiveValue, (]
[), ;, double, x1, =, getMax, (, ), ;, double, f0, =, computeObjectiveValue, (, x0, ), ;, double, f1, =]
[double, x1, =, getMax, (, ), ;, double, f0, =, computeObjectiveValue, (, x0, ), ;, double, f1, =, computeObjectiveValue, (]
[), ;, double, f0, =, computeObjectiveValue, (, x0, ), ;, double, f1, =, computeObjectiveValue, (, x1, ), ;, if, (]
[), ;, double, f0, =, computeObjectiveValue, (, x0, ), ;, double, f1, =, computeObjectiveValue, (, x1, ), ;, if, (]
[double, f0, =, computeObjectiveValue, (, x0, ), ;, double, f1, =, computeObjectiveValue, (, x1, ), ;, if, (, f0, ==]
[(, x0, ), ;, double, f1, =, computeObjectiveValue, (, x1, ), ;, if, (, f0, ==, 0.0, ), {, return]
[f1, =, computeObjectiveValue, (, x1, ), ;, if, (, f0, ==, 0.0, ), {, return, x0, ;, }, if, (]
[f1, =, computeObjectiveValue, (, x1, ), ;, if, (, f0, ==, 0.0, ), {, return, x0, ;, }, if, (]
[computeObjectiveValue, (, x1, ), ;, if, (, f0, ==, 0.0, ), {, return, x0, ;, }, if, (, f1, ==]
[;, if, (, f0, ==, 0.0, ), {, return, x0, ;, }, if, (, f1, ==, 0.0, ), {, return]
[f0, ==, 0.0, ), {, return, x0, ;, }, if, (, f1, ==, 0.0, ), {, return, x1, ;, }]
[0.0, ), {, return, x0, ;, }, if, (, f1, ==, 0.0, ), {, return, x1, ;, }, verifyBracketing, (]
[{, return, x0, ;, }, if, (, f1, ==, 0.0, ), {, return, x1, ;, }, verifyBracketing, (, x0, ,]
[f1, ==, 0.0, ), {, return, x1, ;, }, verifyBracketing, (, x0, ,, x1, ), ;, final, double, ftol, =]
[}, verifyBracketing, (, x0, ,, x1, ), ;, final, double, ftol, =, getFunctionValueAccuracy, (, ), ;, final, double, atol, =]
[final, double, ftol, =, getFunctionValueAccuracy, (, ), ;, final, double, atol, =, getAbsoluteAccuracy, (, ), ;, final, double, rtol, =]
[;, final, double, atol, =, getAbsoluteAccuracy, (, ), ;, final, double, rtol, =, getRelativeAccuracy, (, ), ;, boolean, inverted, =]
[=, getAbsoluteAccuracy, (, ), ;, final, double, rtol, =, getRelativeAccuracy, (, ), ;, boolean, inverted, =, false, ;, while, (]
[rtol, =, getRelativeAccuracy, (, ), ;, boolean, inverted, =, false, ;, while, (, true, ), {, final, double, x, =]
[rtol, =, getRelativeAccuracy, (, ), ;, boolean, inverted, =, false, ;, while, (, true, ), {, final, double, x, =]
[getRelativeAccuracy, (, ), ;, boolean, inverted, =, false, ;, while, (, true, ), {, final, double, x, =, x1, -]
[(, ), ;, boolean, inverted, =, false, ;, while, (, true, ), {, final, double, x, =, x1, -, (]
[(, ), ;, boolean, inverted, =, false, ;, while, (, true, ), {, final, double, x, =, x1, -, (]
[), ;, boolean, inverted, =, false, ;, while, (, true, ), {, final, double, x, =, x1, -, (, (]
[), ;, boolean, inverted, =, false, ;, while, (, true, ), {, final, double, x, =, x1, -, (, (]
[boolean, inverted, =, false, ;, while, (, true, ), {, final, double, x, =, x1, -, (, (, f1, *]
[inverted, =, false, ;, while, (, true, ), {, final, double, x, =, x1, -, (, (, f1, *, (]
[inverted, =, false, ;, while, (, true, ), {, final, double, x, =, x1, -, (, (, f1, *, (]
[false, ;, while, (, true, ), {, final, double, x, =, x1, -, (, (, f1, *, (, x1, -]
[true, ), {, final, double, x, =, x1, -, (, (, f1, *, (, x1, -, x0, ), ), /]
[), {, final, double, x, =, x1, -, (, (, f1, *, (, x1, -, x0, ), ), /, (]
[), {, final, double, x, =, x1, -, (, (, f1, *, (, x1, -, x0, ), ), /, (]
[final, double, x, =, x1, -, (, (, f1, *, (, x1, -, x0, ), ), /, (, f1, -]
[f1, *, (, x1, -, x0, ), ), /, (, f1, -, f0, ), ), ;, final, double, fx, =]
[(, x1, -, x0, ), ), /, (, f1, -, f0, ), ), ;, final, double, fx, =, computeObjectiveValue, (]
[), /, (, f1, -, f0, ), ), ;, final, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (]
[), /, (, f1, -, f0, ), ), ;, final, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (]
[(, f1, -, f0, ), ), ;, final, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (, fx, ==]
[), ), ;, final, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (, fx, ==, 0.0, ), {, return]
[fx, =, computeObjectiveValue, (, x, ), ;, if, (, fx, ==, 0.0, ), {, return, x, ;, }, if, (]
[fx, =, computeObjectiveValue, (, x, ), ;, if, (, fx, ==, 0.0, ), {, return, x, ;, }, if, (]
[fx, =, computeObjectiveValue, (, x, ), ;, if, (, fx, ==, 0.0, ), {, return, x, ;, }, if, (]
[computeObjectiveValue, (, x, ), ;, if, (, fx, ==, 0.0, ), {, return, x, ;, }, if, (, f1, *]
[x, ), ;, if, (, fx, ==, 0.0, ), {, return, x, ;, }, if, (, f1, *, fx, <]
[if, (, fx, ==, 0.0, ), {, return, x, ;, }, if, (, f1, *, fx, <, 0, ), {]
[fx, ==, 0.0, ), {, return, x, ;, }, if, (, f1, *, fx, <, 0, ), {, x0, =]
[0.0, ), {, return, x, ;, }, if, (, f1, *, fx, <, 0, ), {, x0, =, x1, ;]
[{, return, x, ;, }, if, (, f1, *, fx, <, 0, ), {, x0, =, x1, ;, f0, =]
[x, ;, }, if, (, f1, *, fx, <, 0, ), {, x0, =, x1, ;, f0, =, f1, ;]
[}, if, (, f1, *, fx, <, 0, ), {, x0, =, x1, ;, f0, =, f1, ;, inverted, =]
[if, (, f1, *, fx, <, 0, ), {, x0, =, x1, ;, f0, =, f1, ;, inverted, =, !]
[), {, x0, =, x1, ;, f0, =, f1, ;, inverted, =, !, inverted, ;, }, else, {, switch, (]
[x1, ;, f0, =, f1, ;, inverted, =, !, inverted, ;, }, else, {, switch, (, method, ), {, case]
[f0, =, f1, ;, inverted, =, !, inverted, ;, }, else, {, switch, (, method, ), {, case, ILLINOIS, :]
[f1, ;, inverted, =, !, inverted, ;, }, else, {, switch, (, method, ), {, case, ILLINOIS, :, f0, *=]
[inverted, ;, }, else, {, switch, (, method, ), {, case, ILLINOIS, :, f0, *=, 0.5, ;, break, ;, case]
[}, else, {, switch, (, method, ), {, case, ILLINOIS, :, f0, *=, 0.5, ;, break, ;, case, PEGASUS, :]
[{, switch, (, method, ), {, case, ILLINOIS, :, f0, *=, 0.5, ;, break, ;, case, PEGASUS, :, f0, *=]
[{, switch, (, method, ), {, case, ILLINOIS, :, f0, *=, 0.5, ;, break, ;, case, PEGASUS, :, f0, *=]
[(, method, ), {, case, ILLINOIS, :, f0, *=, 0.5, ;, break, ;, case, PEGASUS, :, f0, *=, f1, /]
[method, ), {, case, ILLINOIS, :, f0, *=, 0.5, ;, break, ;, case, PEGASUS, :, f0, *=, f1, /, (]
[method, ), {, case, ILLINOIS, :, f0, *=, 0.5, ;, break, ;, case, PEGASUS, :, f0, *=, f1, /, (]
[{, case, ILLINOIS, :, f0, *=, 0.5, ;, break, ;, case, PEGASUS, :, f0, *=, f1, /, (, f1, +]
[0.5, ;, break, ;, case, PEGASUS, :, f0, *=, f1, /, (, f1, +, fx, ), ;, break, ;, case]
[case, PEGASUS, :, f0, *=, f1, /, (, f1, +, fx, ), ;, break, ;, case, REGULA_FALSI, :, if, (]
[case, PEGASUS, :, f0, *=, f1, /, (, f1, +, fx, ), ;, break, ;, case, REGULA_FALSI, :, if, (]
[:, f0, *=, f1, /, (, f1, +, fx, ), ;, break, ;, case, REGULA_FALSI, :, if, (, x, ==]
[/, (, f1, +, fx, ), ;, break, ;, case, REGULA_FALSI, :, if, (, x, ==, x1, ), {, throw]
[:, if, (, x, ==, x1, ), {, throw, new, ConvergenceException, (, ), ;, }, break, ;, default, :, throw]
[{, throw, new, ConvergenceException, (, ), ;, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }]
[new, ConvergenceException, (, ), ;, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, x1, =]
[(, ), ;, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, x1, =, x, ;]
[;, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, x1, =, x, ;, f1, =]
[default, :, throw, new, MathInternalError, (, ), ;, }, }, x1, =, x, ;, f1, =, fx, ;, if, (]
[default, :, throw, new, MathInternalError, (, ), ;, }, }, x1, =, x, ;, f1, =, fx, ;, if, (]
[default, :, throw, new, MathInternalError, (, ), ;, }, }, x1, =, x, ;, f1, =, fx, ;, if, (]
[MathInternalError, (, ), ;, }, }, x1, =, x, ;, f1, =, fx, ;, if, (, FastMath, ., abs, (]
[;, }, }, x1, =, x, ;, f1, =, fx, ;, if, (, FastMath, ., abs, (, f1, ), <=]
[x, ;, f1, =, fx, ;, if, (, FastMath, ., abs, (, f1, ), <=, ftol, ), {, switch, (]
[fx, ;, if, (, FastMath, ., abs, (, f1, ), <=, ftol, ), {, switch, (, allowed, ), {, case]
[(, FastMath, ., abs, (, f1, ), <=, ftol, ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return]
[abs, (, f1, ), <=, ftol, ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, x1, ;, case]
[<=, ftol, ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :, if, (]
[switch, (, allowed, ), {, case, ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :, if, (, inverted, ), {, return]
[ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :, if, (, inverted, ), {, return, x1, ;, }, break, ;, case]
[;, case, LEFT_SIDE, :, if, (, inverted, ), {, return, x1, ;, }, break, ;, case, RIGHT_SIDE, :, if, (]
[case, LEFT_SIDE, :, if, (, inverted, ), {, return, x1, ;, }, break, ;, case, RIGHT_SIDE, :, if, (, !]
[(, inverted, ), {, return, x1, ;, }, break, ;, case, RIGHT_SIDE, :, if, (, !, inverted, ), {, return]
[;, }, break, ;, case, RIGHT_SIDE, :, if, (, !, inverted, ), {, return, x1, ;, }, break, ;, case]
[case, RIGHT_SIDE, :, if, (, !, inverted, ), {, return, x1, ;, }, break, ;, case, BELOW_SIDE, :, if, (]
[case, RIGHT_SIDE, :, if, (, !, inverted, ), {, return, x1, ;, }, break, ;, case, BELOW_SIDE, :, if, (]
[:, if, (, !, inverted, ), {, return, x1, ;, }, break, ;, case, BELOW_SIDE, :, if, (, f1, <=]
[inverted, ), {, return, x1, ;, }, break, ;, case, BELOW_SIDE, :, if, (, f1, <=, 0, ), {, return]
[}, break, ;, case, BELOW_SIDE, :, if, (, f1, <=, 0, ), {, return, x1, ;, }, break, ;, case]
[BELOW_SIDE, :, if, (, f1, <=, 0, ), {, return, x1, ;, }, break, ;, case, ABOVE_SIDE, :, if, (]
[BELOW_SIDE, :, if, (, f1, <=, 0, ), {, return, x1, ;, }, break, ;, case, ABOVE_SIDE, :, if, (]
[if, (, f1, <=, 0, ), {, return, x1, ;, }, break, ;, case, ABOVE_SIDE, :, if, (, f1, >=]
[0, ), {, return, x1, ;, }, break, ;, case, ABOVE_SIDE, :, if, (, f1, >=, 0, ), {, return]
[;, case, ABOVE_SIDE, :, if, (, f1, >=, 0, ), {, return, x1, ;, }, break, ;, default, :, throw]
[), {, return, x1, ;, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, if, (]
[), {, return, x1, ;, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, if, (]
[), {, return, x1, ;, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, if, (]
[;, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, if, (, FastMath, ., abs, (]
[;, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, if, (, FastMath, ., abs, (]
[break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, if, (, FastMath, ., abs, (, x1, -]
[:, throw, new, MathInternalError, (, ), ;, }, }, if, (, FastMath, ., abs, (, x1, -, x0, ), <]
[:, throw, new, MathInternalError, (, ), ;, }, }, if, (, FastMath, ., abs, (, x1, -, x0, ), <]
[(, ), ;, }, }, if, (, FastMath, ., abs, (, x1, -, x0, ), <, FastMath, ., max, (]
[(, ), ;, }, }, if, (, FastMath, ., abs, (, x1, -, x0, ), <, FastMath, ., max, (]
[;, }, }, if, (, FastMath, ., abs, (, x1, -, x0, ), <, FastMath, ., max, (, rtol, *]
[;, }, }, if, (, FastMath, ., abs, (, x1, -, x0, ), <, FastMath, ., max, (, rtol, *]
[(, FastMath, ., abs, (, x1, -, x0, ), <, FastMath, ., max, (, rtol, *, FastMath, ., abs, (]
[abs, (, x1, -, x0, ), <, FastMath, ., max, (, rtol, *, FastMath, ., abs, (, x1, ), ,]
[<, FastMath, ., max, (, rtol, *, FastMath, ., abs, (, x1, ), ,, atol, ), ), {, switch, (]
[(, rtol, *, FastMath, ., abs, (, x1, ), ,, atol, ), ), {, switch, (, allowed, ), {, case]
[FastMath, ., abs, (, x1, ), ,, atol, ), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return]
[(, x1, ), ,, atol, ), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, x1, ;, case]
[,, atol, ), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :, return]
[,, atol, ), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :, return]
[), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :, return, inverted, ?]
[{, switch, (, allowed, ), {, case, ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :, return, inverted, ?, x1, :]
[allowed, ), {, case, ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :, return, inverted, ?, x1, :, x0, ;, case]
[case, ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :, return, inverted, ?, x1, :, x0, ;, case, RIGHT_SIDE, :, return]
[case, ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :, return, inverted, ?, x1, :, x0, ;, case, RIGHT_SIDE, :, return]
[:, return, x1, ;, case, LEFT_SIDE, :, return, inverted, ?, x1, :, x0, ;, case, RIGHT_SIDE, :, return, inverted, ?]
[x1, ;, case, LEFT_SIDE, :, return, inverted, ?, x1, :, x0, ;, case, RIGHT_SIDE, :, return, inverted, ?, x0, :]
[LEFT_SIDE, :, return, inverted, ?, x1, :, x0, ;, case, RIGHT_SIDE, :, return, inverted, ?, x0, :, x1, ;, case]
[inverted, ?, x1, :, x0, ;, case, RIGHT_SIDE, :, return, inverted, ?, x0, :, x1, ;, case, BELOW_SIDE, :, return]
[inverted, ?, x1, :, x0, ;, case, RIGHT_SIDE, :, return, inverted, ?, x0, :, x1, ;, case, BELOW_SIDE, :, return]
[?, x1, :, x0, ;, case, RIGHT_SIDE, :, return, inverted, ?, x0, :, x1, ;, case, BELOW_SIDE, :, return, (]
[?, x1, :, x0, ;, case, RIGHT_SIDE, :, return, inverted, ?, x0, :, x1, ;, case, BELOW_SIDE, :, return, (]
[:, x0, ;, case, RIGHT_SIDE, :, return, inverted, ?, x0, :, x1, ;, case, BELOW_SIDE, :, return, (, f1, <=]
[case, RIGHT_SIDE, :, return, inverted, ?, x0, :, x1, ;, case, BELOW_SIDE, :, return, (, f1, <=, 0, ), ?]
[:, return, inverted, ?, x0, :, x1, ;, case, BELOW_SIDE, :, return, (, f1, <=, 0, ), ?, x1, :]
[?, x0, :, x1, ;, case, BELOW_SIDE, :, return, (, f1, <=, 0, ), ?, x1, :, x0, ;, case]
[x1, ;, case, BELOW_SIDE, :, return, (, f1, <=, 0, ), ?, x1, :, x0, ;, case, ABOVE_SIDE, :, return]
[x1, ;, case, BELOW_SIDE, :, return, (, f1, <=, 0, ), ?, x1, :, x0, ;, case, ABOVE_SIDE, :, return]
[;, case, BELOW_SIDE, :, return, (, f1, <=, 0, ), ?, x1, :, x0, ;, case, ABOVE_SIDE, :, return, (]
[;, case, BELOW_SIDE, :, return, (, f1, <=, 0, ), ?, x1, :, x0, ;, case, ABOVE_SIDE, :, return, (]
[BELOW_SIDE, :, return, (, f1, <=, 0, ), ?, x1, :, x0, ;, case, ABOVE_SIDE, :, return, (, f1, >=]
[(, f1, <=, 0, ), ?, x1, :, x0, ;, case, ABOVE_SIDE, :, return, (, f1, >=, 0, ), ?]
[<=, 0, ), ?, x1, :, x0, ;, case, ABOVE_SIDE, :, return, (, f1, >=, 0, ), ?, x1, :]
[:, x0, ;, case, ABOVE_SIDE, :, return, (, f1, >=, 0, ), ?, x1, :, x0, ;, default, :, throw]
