[u, ;, private, Vector3D, v, ;, private, Vector3D, w, ;, public, Plane, (, final, Vector3D, normal, ), throws, MathArithmeticException, {]
[private, Vector3D, v, ;, private, Vector3D, w, ;, public, Plane, (, final, Vector3D, normal, ), throws, MathArithmeticException, {, setNormal, (]
[;, private, Vector3D, w, ;, public, Plane, (, final, Vector3D, normal, ), throws, MathArithmeticException, {, setNormal, (, normal, ), ;]
[Vector3D, w, ;, public, Plane, (, final, Vector3D, normal, ), throws, MathArithmeticException, {, setNormal, (, normal, ), ;, originOffset, =]
[;, public, Plane, (, final, Vector3D, normal, ), throws, MathArithmeticException, {, setNormal, (, normal, ), ;, originOffset, =, 0, ;]
[;, setFrame, (, ), ;, }, public, Plane, (, final, Vector3D, p, ,, final, Vector3D, normal, ), throws, MathArithmeticException, {]
[(, ), ;, }, public, Plane, (, final, Vector3D, p, ,, final, Vector3D, normal, ), throws, MathArithmeticException, {, setNormal, (]
[}, public, Plane, (, final, Vector3D, p, ,, final, Vector3D, normal, ), throws, MathArithmeticException, {, setNormal, (, normal, ), ;]
[Plane, (, final, Vector3D, p, ,, final, Vector3D, normal, ), throws, MathArithmeticException, {, setNormal, (, normal, ), ;, originOffset, =]
[(, final, Vector3D, p, ,, final, Vector3D, normal, ), throws, MathArithmeticException, {, setNormal, (, normal, ), ;, originOffset, =, -]
[(, final, Vector3D, p, ,, final, Vector3D, normal, ), throws, MathArithmeticException, {, setNormal, (, normal, ), ;, originOffset, =, -]
[,, final, Vector3D, normal, ), throws, MathArithmeticException, {, setNormal, (, normal, ), ;, originOffset, =, -, p, ., dotProduct, (]
[normal, ), throws, MathArithmeticException, {, setNormal, (, normal, ), ;, originOffset, =, -, p, ., dotProduct, (, w, ), ;]
[public, Plane, (, final, Vector3D, p1, ,, final, Vector3D, p2, ,, final, Vector3D, p3, ), throws, MathArithmeticException, {, this, (]
[(, final, Vector3D, p1, ,, final, Vector3D, p2, ,, final, Vector3D, p3, ), throws, MathArithmeticException, {, this, (, p1, ,]
[(, final, Vector3D, p1, ,, final, Vector3D, p2, ,, final, Vector3D, p3, ), throws, MathArithmeticException, {, this, (, p1, ,]
[(, final, Vector3D, p1, ,, final, Vector3D, p2, ,, final, Vector3D, p3, ), throws, MathArithmeticException, {, this, (, p1, ,]
[,, final, Vector3D, p2, ,, final, Vector3D, p3, ), throws, MathArithmeticException, {, this, (, p1, ,, p2, ., subtract, (]
[final, Vector3D, p3, ), throws, MathArithmeticException, {, this, (, p1, ,, p2, ., subtract, (, p1, ), ., crossProduct, (]
[final, Vector3D, p3, ), throws, MathArithmeticException, {, this, (, p1, ,, p2, ., subtract, (, p1, ), ., crossProduct, (]
[throws, MathArithmeticException, {, this, (, p1, ,, p2, ., subtract, (, p1, ), ., crossProduct, (, p3, ., subtract, (]
[crossProduct, (, p3, ., subtract, (, p1, ), ), ), ;, }, public, Plane, (, final, Plane, plane, ), {]
[p3, ., subtract, (, p1, ), ), ), ;, }, public, Plane, (, final, Plane, plane, ), {, originOffset, =]
[p3, ., subtract, (, p1, ), ), ), ;, }, public, Plane, (, final, Plane, plane, ), {, originOffset, =]
[p1, ), ), ), ;, }, public, Plane, (, final, Plane, plane, ), {, originOffset, =, plane, ., originOffset, ;]
[), ), ;, }, public, Plane, (, final, Plane, plane, ), {, originOffset, =, plane, ., originOffset, ;, origin, =]
[), ), ;, }, public, Plane, (, final, Plane, plane, ), {, originOffset, =, plane, ., originOffset, ;, origin, =]
[public, Plane, (, final, Plane, plane, ), {, originOffset, =, plane, ., originOffset, ;, origin, =, plane, ., origin, ;]
[(, final, Plane, plane, ), {, originOffset, =, plane, ., originOffset, ;, origin, =, plane, ., origin, ;, u, =]
[(, final, Plane, plane, ), {, originOffset, =, plane, ., originOffset, ;, origin, =, plane, ., origin, ;, u, =]
[), {, originOffset, =, plane, ., originOffset, ;, origin, =, plane, ., origin, ;, u, =, plane, ., u, ;]
[originOffset, =, plane, ., originOffset, ;, origin, =, plane, ., origin, ;, u, =, plane, ., u, ;, v, =]
[originOffset, =, plane, ., originOffset, ;, origin, =, plane, ., origin, ;, u, =, plane, ., u, ;, v, =]
[originOffset, ;, origin, =, plane, ., origin, ;, u, =, plane, ., u, ;, v, =, plane, ., v, ;]
[origin, =, plane, ., origin, ;, u, =, plane, ., u, ;, v, =, plane, ., v, ;, w, =]
[origin, =, plane, ., origin, ;, u, =, plane, ., u, ;, v, =, plane, ., v, ;, w, =]
[v, =, plane, ., v, ;, w, =, plane, ., w, ;, }, public, Plane, copySelf, (, ), {, return]
[., v, ;, w, =, plane, ., w, ;, }, public, Plane, copySelf, (, ), {, return, new, Plane, (]
[(, this, ), ;, }, public, void, reset, (, final, Vector3D, p, ,, final, Vector3D, normal, ), throws, MathArithmeticException, {]
[), ;, }, public, void, reset, (, final, Vector3D, p, ,, final, Vector3D, normal, ), throws, MathArithmeticException, {, setNormal, (]
[public, void, reset, (, final, Vector3D, p, ,, final, Vector3D, normal, ), throws, MathArithmeticException, {, setNormal, (, normal, ), ;]
[reset, (, final, Vector3D, p, ,, final, Vector3D, normal, ), throws, MathArithmeticException, {, setNormal, (, normal, ), ;, originOffset, =]
[(, final, Vector3D, p, ,, final, Vector3D, normal, ), throws, MathArithmeticException, {, setNormal, (, normal, ), ;, originOffset, =, -]
[(, final, Vector3D, p, ,, final, Vector3D, normal, ), throws, MathArithmeticException, {, setNormal, (, normal, ), ;, originOffset, =, -]
[,, final, Vector3D, normal, ), throws, MathArithmeticException, {, setNormal, (, normal, ), ;, originOffset, =, -, p, ., dotProduct, (]
[normal, ), throws, MathArithmeticException, {, setNormal, (, normal, ), ;, originOffset, =, -, p, ., dotProduct, (, w, ), ;]
[., dotProduct, (, w, ), ;, setFrame, (, ), ;, }, public, void, reset, (, final, Plane, original, ), {]
[(, w, ), ;, setFrame, (, ), ;, }, public, void, reset, (, final, Plane, original, ), {, originOffset, =]
[(, w, ), ;, setFrame, (, ), ;, }, public, void, reset, (, final, Plane, original, ), {, originOffset, =]
[setFrame, (, ), ;, }, public, void, reset, (, final, Plane, original, ), {, originOffset, =, original, ., originOffset, ;]
[), ;, }, public, void, reset, (, final, Plane, original, ), {, originOffset, =, original, ., originOffset, ;, origin, =]
[), ;, }, public, void, reset, (, final, Plane, original, ), {, originOffset, =, original, ., originOffset, ;, origin, =]
[void, reset, (, final, Plane, original, ), {, originOffset, =, original, ., originOffset, ;, origin, =, original, ., origin, ;]
[(, final, Plane, original, ), {, originOffset, =, original, ., originOffset, ;, origin, =, original, ., origin, ;, u, =]
[(, final, Plane, original, ), {, originOffset, =, original, ., originOffset, ;, origin, =, original, ., origin, ;, u, =]
[), {, originOffset, =, original, ., originOffset, ;, origin, =, original, ., origin, ;, u, =, original, ., u, ;]
[originOffset, =, original, ., originOffset, ;, origin, =, original, ., origin, ;, u, =, original, ., u, ;, v, =]
[originOffset, =, original, ., originOffset, ;, origin, =, original, ., origin, ;, u, =, original, ., u, ;, v, =]
[originOffset, ;, origin, =, original, ., origin, ;, u, =, original, ., u, ;, v, =, original, ., v, ;]
[origin, =, original, ., origin, ;, u, =, original, ., u, ;, v, =, original, ., v, ;, w, =]
[origin, =, original, ., origin, ;, u, =, original, ., u, ;, v, =, original, ., v, ;, w, =]
[original, ., w, ;, }, private, void, setNormal, (, final, Vector3D, normal, ), throws, MathArithmeticException, {, final, double, norm, =]
[original, ., w, ;, }, private, void, setNormal, (, final, Vector3D, normal, ), throws, MathArithmeticException, {, final, double, norm, =]
[(, final, Vector3D, normal, ), throws, MathArithmeticException, {, final, double, norm, =, normal, ., getNorm, (, ), ;, if, (]
[(, final, Vector3D, normal, ), throws, MathArithmeticException, {, final, double, norm, =, normal, ., getNorm, (, ), ;, if, (]
[Vector3D, normal, ), throws, MathArithmeticException, {, final, double, norm, =, normal, ., getNorm, (, ), ;, if, (, norm, <]
[MathArithmeticException, {, final, double, norm, =, normal, ., getNorm, (, ), ;, if, (, norm, <, 1.0e-10, ), {, throw]
[double, norm, =, normal, ., getNorm, (, ), ;, if, (, norm, <, 1.0e-10, ), {, throw, new, MathArithmeticException, (]
[double, norm, =, normal, ., getNorm, (, ), ;, if, (, norm, <, 1.0e-10, ), {, throw, new, MathArithmeticException, (]
[(, ), ;, if, (, norm, <, 1.0e-10, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }]
[;, if, (, norm, <, 1.0e-10, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, w, =]
[norm, <, 1.0e-10, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, w, =, new, Vector3D, (]
[norm, <, 1.0e-10, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, w, =, new, Vector3D, (]
[1.0e-10, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, w, =, new, Vector3D, (, 1.0, /]
[{, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, w, =, new, Vector3D, (, 1.0, /, norm, ,]
[}, w, =, new, Vector3D, (, 1.0, /, norm, ,, normal, ), ;, }, private, void, setFrame, (, ), {]
[=, new, Vector3D, (, 1.0, /, norm, ,, normal, ), ;, }, private, void, setFrame, (, ), {, origin, =]
[(, 1.0, /, norm, ,, normal, ), ;, }, private, void, setFrame, (, ), {, origin, =, new, Vector3D, (]
[1.0, /, norm, ,, normal, ), ;, }, private, void, setFrame, (, ), {, origin, =, new, Vector3D, (, -]
[norm, ,, normal, ), ;, }, private, void, setFrame, (, ), {, origin, =, new, Vector3D, (, -, originOffset, ,]
[), ;, }, private, void, setFrame, (, ), {, origin, =, new, Vector3D, (, -, originOffset, ,, w, ), ;]
[}, private, void, setFrame, (, ), {, origin, =, new, Vector3D, (, -, originOffset, ,, w, ), ;, u, =]
[}, private, void, setFrame, (, ), {, origin, =, new, Vector3D, (, -, originOffset, ,, w, ), ;, u, =]
[{, origin, =, new, Vector3D, (, -, originOffset, ,, w, ), ;, u, =, w, ., orthogonal, (, ), ;]
[=, new, Vector3D, (, -, originOffset, ,, w, ), ;, u, =, w, ., orthogonal, (, ), ;, v, =]
[=, new, Vector3D, (, -, originOffset, ,, w, ), ;, u, =, w, ., orthogonal, (, ), ;, v, =]
[-, originOffset, ,, w, ), ;, u, =, w, ., orthogonal, (, ), ;, v, =, Vector3D, ., crossProduct, (]
[,, w, ), ;, u, =, w, ., orthogonal, (, ), ;, v, =, Vector3D, ., crossProduct, (, w, ,]
[;, v, =, Vector3D, ., crossProduct, (, w, ,, u, ), ;, }, public, Vector3D, getOrigin, (, ), {, return]
[), ;, }, public, Vector3D, getOrigin, (, ), {, return, origin, ;, }, public, Vector3D, getNormal, (, ), {, return]
[origin, ;, }, public, Vector3D, getNormal, (, ), {, return, w, ;, }, public, Vector3D, getU, (, ), {, return]
[w, ;, }, public, Vector3D, getU, (, ), {, return, u, ;, }, public, Vector3D, getV, (, ), {, return]
[public, Vector3D, getV, (, ), {, return, v, ;, }, public, void, revertSelf, (, ), {, final, Vector3D, tmp, =]
[getV, (, ), {, return, v, ;, }, public, void, revertSelf, (, ), {, final, Vector3D, tmp, =, u, ;]
[), {, return, v, ;, }, public, void, revertSelf, (, ), {, final, Vector3D, tmp, =, u, ;, u, =]
[return, v, ;, }, public, void, revertSelf, (, ), {, final, Vector3D, tmp, =, u, ;, u, =, v, ;]
[;, }, public, void, revertSelf, (, ), {, final, Vector3D, tmp, =, u, ;, u, =, v, ;, v, =]
[public, void, revertSelf, (, ), {, final, Vector3D, tmp, =, u, ;, u, =, v, ;, v, =, tmp, ;]
[revertSelf, (, ), {, final, Vector3D, tmp, =, u, ;, u, =, v, ;, v, =, tmp, ;, w, =]
[revertSelf, (, ), {, final, Vector3D, tmp, =, u, ;, u, =, v, ;, v, =, tmp, ;, w, =]
[tmp, =, u, ;, u, =, v, ;, v, =, tmp, ;, w, =, w, ., negate, (, ), ;]
[u, ;, u, =, v, ;, v, =, tmp, ;, w, =, w, ., negate, (, ), ;, originOffset, =]
[;, u, =, v, ;, v, =, tmp, ;, w, =, w, ., negate, (, ), ;, originOffset, =, -]
[;, originOffset, =, -, originOffset, ;, }, public, Vector2D, toSubSpace, (, final, Vector, <, Euclidean3D, >, point, ), {, return]
[-, originOffset, ;, }, public, Vector2D, toSubSpace, (, final, Vector, <, Euclidean3D, >, point, ), {, return, new, Vector2D, (]
[-, originOffset, ;, }, public, Vector2D, toSubSpace, (, final, Vector, <, Euclidean3D, >, point, ), {, return, new, Vector2D, (]
[public, Vector2D, toSubSpace, (, final, Vector, <, Euclidean3D, >, point, ), {, return, new, Vector2D, (, point, ., dotProduct, (]
[(, final, Vector, <, Euclidean3D, >, point, ), {, return, new, Vector2D, (, point, ., dotProduct, (, u, ), ,]
[(, final, Vector, <, Euclidean3D, >, point, ), {, return, new, Vector2D, (, point, ., dotProduct, (, u, ), ,]
[Euclidean3D, >, point, ), {, return, new, Vector2D, (, point, ., dotProduct, (, u, ), ,, point, ., dotProduct, (]
[), ), ;, }, public, Vector3D, toSpace, (, final, Vector, <, Euclidean2D, >, point, ), {, final, Vector2D, p2D, =]
[}, public, Vector3D, toSpace, (, final, Vector, <, Euclidean2D, >, point, ), {, final, Vector2D, p2D, =, (, Vector2D, )]
[toSpace, (, final, Vector, <, Euclidean2D, >, point, ), {, final, Vector2D, p2D, =, (, Vector2D, ), point, ;, return]
[Vector, <, Euclidean2D, >, point, ), {, final, Vector2D, p2D, =, (, Vector2D, ), point, ;, return, new, Vector3D, (]
[Vector, <, Euclidean2D, >, point, ), {, final, Vector2D, p2D, =, (, Vector2D, ), point, ;, return, new, Vector3D, (]
[{, final, Vector2D, p2D, =, (, Vector2D, ), point, ;, return, new, Vector3D, (, p2D, ., getX, (, ), ,]
[Vector2D, p2D, =, (, Vector2D, ), point, ;, return, new, Vector3D, (, p2D, ., getX, (, ), ,, u, ,]
[Vector2D, p2D, =, (, Vector2D, ), point, ;, return, new, Vector3D, (, p2D, ., getX, (, ), ,, u, ,]
[point, ;, return, new, Vector3D, (, p2D, ., getX, (, ), ,, u, ,, p2D, ., getY, (, ), ,]
[return, new, Vector3D, (, p2D, ., getX, (, ), ,, u, ,, p2D, ., getY, (, ), ,, v, ,]
[new, Vector3D, (, p2D, ., getX, (, ), ,, u, ,, p2D, ., getY, (, ), ,, v, ,, -]
[(, p2D, ., getX, (, ), ,, u, ,, p2D, ., getY, (, ), ,, v, ,, -, originOffset, ,]
[originOffset, ,, w, ), ;, }, public, Vector3D, getPointAt, (, final, Vector2D, inPlane, ,, final, double, offset, ), {, return]
[), ;, }, public, Vector3D, getPointAt, (, final, Vector2D, inPlane, ,, final, double, offset, ), {, return, new, Vector3D, (]
[), ;, }, public, Vector3D, getPointAt, (, final, Vector2D, inPlane, ,, final, double, offset, ), {, return, new, Vector3D, (]
[(, final, Vector2D, inPlane, ,, final, double, offset, ), {, return, new, Vector3D, (, inPlane, ., getX, (, ), ,]
[Vector2D, inPlane, ,, final, double, offset, ), {, return, new, Vector3D, (, inPlane, ., getX, (, ), ,, u, ,]
[Vector2D, inPlane, ,, final, double, offset, ), {, return, new, Vector3D, (, inPlane, ., getX, (, ), ,, u, ,]
[), {, return, new, Vector3D, (, inPlane, ., getX, (, ), ,, u, ,, inPlane, ., getY, (, ), ,]
[return, new, Vector3D, (, inPlane, ., getX, (, ), ,, u, ,, inPlane, ., getY, (, ), ,, v, ,]
[return, new, Vector3D, (, inPlane, ., getX, (, ), ,, u, ,, inPlane, ., getY, (, ), ,, v, ,]
[Vector3D, (, inPlane, ., getX, (, ), ,, u, ,, inPlane, ., getY, (, ), ,, v, ,, offset, -]
[inPlane, ., getX, (, ), ,, u, ,, inPlane, ., getY, (, ), ,, v, ,, offset, -, originOffset, ,]
[-, originOffset, ,, w, ), ;, }, public, boolean, isSimilarTo, (, final, Plane, plane, ), {, final, double, angle, =]
[-, originOffset, ,, w, ), ;, }, public, boolean, isSimilarTo, (, final, Plane, plane, ), {, final, double, angle, =]
[), ;, }, public, boolean, isSimilarTo, (, final, Plane, plane, ), {, final, double, angle, =, Vector3D, ., angle, (]
[}, public, boolean, isSimilarTo, (, final, Plane, plane, ), {, final, double, angle, =, Vector3D, ., angle, (, w, ,]
[}, public, boolean, isSimilarTo, (, final, Plane, plane, ), {, final, double, angle, =, Vector3D, ., angle, (, w, ,]
[Plane, plane, ), {, final, double, angle, =, Vector3D, ., angle, (, w, ,, plane, ., w, ), ;, return]
[Plane, plane, ), {, final, double, angle, =, Vector3D, ., angle, (, w, ,, plane, ., w, ), ;, return]
[plane, ), {, final, double, angle, =, Vector3D, ., angle, (, w, ,, plane, ., w, ), ;, return, (]
[plane, ), {, final, double, angle, =, Vector3D, ., angle, (, w, ,, plane, ., w, ), ;, return, (]
[), {, final, double, angle, =, Vector3D, ., angle, (, w, ,, plane, ., w, ), ;, return, (, (]
[), {, final, double, angle, =, Vector3D, ., angle, (, w, ,, plane, ., w, ), ;, return, (, (]
[final, double, angle, =, Vector3D, ., angle, (, w, ,, plane, ., w, ), ;, return, (, (, angle, <]
[=, Vector3D, ., angle, (, w, ,, plane, ., w, ), ;, return, (, (, angle, <, 1.0e-10, ), &&]
[Vector3D, ., angle, (, w, ,, plane, ., w, ), ;, return, (, (, angle, <, 1.0e-10, ), &&, (]
[Vector3D, ., angle, (, w, ,, plane, ., w, ), ;, return, (, (, angle, <, 1.0e-10, ), &&, (]
[Vector3D, ., angle, (, w, ,, plane, ., w, ), ;, return, (, (, angle, <, 1.0e-10, ), &&, (]
[w, ,, plane, ., w, ), ;, return, (, (, angle, <, 1.0e-10, ), &&, (, FastMath, ., abs, (]
[w, ,, plane, ., w, ), ;, return, (, (, angle, <, 1.0e-10, ), &&, (, FastMath, ., abs, (]
[plane, ., w, ), ;, return, (, (, angle, <, 1.0e-10, ), &&, (, FastMath, ., abs, (, originOffset, -]
[plane, ., w, ), ;, return, (, (, angle, <, 1.0e-10, ), &&, (, FastMath, ., abs, (, originOffset, -]
[return, (, (, angle, <, 1.0e-10, ), &&, (, FastMath, ., abs, (, originOffset, -, plane, ., originOffset, ), <]
[<, 1.0e-10, ), &&, (, FastMath, ., abs, (, originOffset, -, plane, ., originOffset, ), <, 1.0e-10, ), ), ||]
[1.0e-10, ), &&, (, FastMath, ., abs, (, originOffset, -, plane, ., originOffset, ), <, 1.0e-10, ), ), ||, (]
[1.0e-10, ), &&, (, FastMath, ., abs, (, originOffset, -, plane, ., originOffset, ), <, 1.0e-10, ), ), ||, (]
[), &&, (, FastMath, ., abs, (, originOffset, -, plane, ., originOffset, ), <, 1.0e-10, ), ), ||, (, (]
[), &&, (, FastMath, ., abs, (, originOffset, -, plane, ., originOffset, ), <, 1.0e-10, ), ), ||, (, (]
[(, FastMath, ., abs, (, originOffset, -, plane, ., originOffset, ), <, 1.0e-10, ), ), ||, (, (, angle, >]
[FastMath, ., abs, (, originOffset, -, plane, ., originOffset, ), <, 1.0e-10, ), ), ||, (, (, angle, >, (]
[FastMath, ., abs, (, originOffset, -, plane, ., originOffset, ), <, 1.0e-10, ), ), ||, (, (, angle, >, (]
[FastMath, ., abs, (, originOffset, -, plane, ., originOffset, ), <, 1.0e-10, ), ), ||, (, (, angle, >, (]
[originOffset, -, plane, ., originOffset, ), <, 1.0e-10, ), ), ||, (, (, angle, >, (, FastMath, ., PI, -]
[originOffset, ), <, 1.0e-10, ), ), ||, (, (, angle, >, (, FastMath, ., PI, -, 1.0e-10, ), ), &&]
[), <, 1.0e-10, ), ), ||, (, (, angle, >, (, FastMath, ., PI, -, 1.0e-10, ), ), &&, (]
[), <, 1.0e-10, ), ), ||, (, (, angle, >, (, FastMath, ., PI, -, 1.0e-10, ), ), &&, (]
[), <, 1.0e-10, ), ), ||, (, (, angle, >, (, FastMath, ., PI, -, 1.0e-10, ), ), &&, (]
[), ||, (, (, angle, >, (, FastMath, ., PI, -, 1.0e-10, ), ), &&, (, FastMath, ., abs, (]
[), ||, (, (, angle, >, (, FastMath, ., PI, -, 1.0e-10, ), ), &&, (, FastMath, ., abs, (]
[(, (, angle, >, (, FastMath, ., PI, -, 1.0e-10, ), ), &&, (, FastMath, ., abs, (, originOffset, +]
[(, (, angle, >, (, FastMath, ., PI, -, 1.0e-10, ), ), &&, (, FastMath, ., abs, (, originOffset, +]
[FastMath, ., PI, -, 1.0e-10, ), ), &&, (, FastMath, ., abs, (, originOffset, +, plane, ., originOffset, ), <]
[), ;, }, public, Plane, rotate, (, final, Vector3D, center, ,, final, Rotation, rotation, ), {, final, Vector3D, delta, =]
[), ;, }, public, Plane, rotate, (, final, Vector3D, center, ,, final, Rotation, rotation, ), {, final, Vector3D, delta, =]
[Plane, rotate, (, final, Vector3D, center, ,, final, Rotation, rotation, ), {, final, Vector3D, delta, =, origin, ., subtract, (]
[final, Rotation, rotation, ), {, final, Vector3D, delta, =, origin, ., subtract, (, center, ), ;, final, Plane, plane, =]
[), {, final, Vector3D, delta, =, origin, ., subtract, (, center, ), ;, final, Plane, plane, =, new, Plane, (]
[), {, final, Vector3D, delta, =, origin, ., subtract, (, center, ), ;, final, Plane, plane, =, new, Plane, (]
[delta, =, origin, ., subtract, (, center, ), ;, final, Plane, plane, =, new, Plane, (, center, ., add, (]
[delta, =, origin, ., subtract, (, center, ), ;, final, Plane, plane, =, new, Plane, (, center, ., add, (]
[subtract, (, center, ), ;, final, Plane, plane, =, new, Plane, (, center, ., add, (, rotation, ., applyTo, (]
[;, final, Plane, plane, =, new, Plane, (, center, ., add, (, rotation, ., applyTo, (, delta, ), ), ,]
[;, final, Plane, plane, =, new, Plane, (, center, ., add, (, rotation, ., applyTo, (, delta, ), ), ,]
[=, new, Plane, (, center, ., add, (, rotation, ., applyTo, (, delta, ), ), ,, rotation, ., applyTo, (]
[center, ., add, (, rotation, ., applyTo, (, delta, ), ), ,, rotation, ., applyTo, (, w, ), ), ;]
[center, ., add, (, rotation, ., applyTo, (, delta, ), ), ,, rotation, ., applyTo, (, w, ), ), ;]
[rotation, ., applyTo, (, delta, ), ), ,, rotation, ., applyTo, (, w, ), ), ;, plane, ., u, =]
[rotation, ., applyTo, (, delta, ), ), ,, rotation, ., applyTo, (, w, ), ), ;, plane, ., u, =]
[delta, ), ), ,, rotation, ., applyTo, (, w, ), ), ;, plane, ., u, =, rotation, ., applyTo, (]
[,, rotation, ., applyTo, (, w, ), ), ;, plane, ., u, =, rotation, ., applyTo, (, u, ), ;]
[,, rotation, ., applyTo, (, w, ), ), ;, plane, ., u, =, rotation, ., applyTo, (, u, ), ;]
[(, w, ), ), ;, plane, ., u, =, rotation, ., applyTo, (, u, ), ;, plane, ., v, =]
[(, w, ), ), ;, plane, ., u, =, rotation, ., applyTo, (, u, ), ;, plane, ., v, =]
[;, plane, ., u, =, rotation, ., applyTo, (, u, ), ;, plane, ., v, =, rotation, ., applyTo, (]
[=, rotation, ., applyTo, (, u, ), ;, plane, ., v, =, rotation, ., applyTo, (, v, ), ;, return]
[v, ), ;, return, plane, ;, }, public, Plane, translate, (, final, Vector3D, translation, ), {, final, Plane, plane, =]
[return, plane, ;, }, public, Plane, translate, (, final, Vector3D, translation, ), {, final, Plane, plane, =, new, Plane, (]
[return, plane, ;, }, public, Plane, translate, (, final, Vector3D, translation, ), {, final, Plane, plane, =, new, Plane, (]
[public, Plane, translate, (, final, Vector3D, translation, ), {, final, Plane, plane, =, new, Plane, (, origin, ., add, (]
[(, final, Vector3D, translation, ), {, final, Plane, plane, =, new, Plane, (, origin, ., add, (, translation, ), ,]
[translation, ), {, final, Plane, plane, =, new, Plane, (, origin, ., add, (, translation, ), ,, w, ), ;]
[translation, ), {, final, Plane, plane, =, new, Plane, (, origin, ., add, (, translation, ), ,, w, ), ;]
[Plane, plane, =, new, Plane, (, origin, ., add, (, translation, ), ,, w, ), ;, plane, ., u, =]
[=, new, Plane, (, origin, ., add, (, translation, ), ,, w, ), ;, plane, ., u, =, u, ;]
[=, new, Plane, (, origin, ., add, (, translation, ), ,, w, ), ;, plane, ., u, =, u, ;]
[origin, ., add, (, translation, ), ,, w, ), ;, plane, ., u, =, u, ;, plane, ., v, =]
[(, translation, ), ,, w, ), ;, plane, ., u, =, u, ;, plane, ., v, =, v, ;, return]
[=, v, ;, return, plane, ;, }, public, Vector3D, intersection, (, final, Line, line, ), {, final, Vector3D, direction, =]
[=, v, ;, return, plane, ;, }, public, Vector3D, intersection, (, final, Line, line, ), {, final, Vector3D, direction, =]
[(, final, Line, line, ), {, final, Vector3D, direction, =, line, ., getDirection, (, ), ;, final, double, dot, =]
[(, final, Line, line, ), {, final, Vector3D, direction, =, line, ., getDirection, (, ), ;, final, double, dot, =]
[), {, final, Vector3D, direction, =, line, ., getDirection, (, ), ;, final, double, dot, =, w, ., dotProduct, (]
[=, line, ., getDirection, (, ), ;, final, double, dot, =, w, ., dotProduct, (, direction, ), ;, if, (]
[=, line, ., getDirection, (, ), ;, final, double, dot, =, w, ., dotProduct, (, direction, ), ;, if, (]
[=, line, ., getDirection, (, ), ;, final, double, dot, =, w, ., dotProduct, (, direction, ), ;, if, (]
[(, ), ;, final, double, dot, =, w, ., dotProduct, (, direction, ), ;, if, (, FastMath, ., abs, (]
[final, double, dot, =, w, ., dotProduct, (, direction, ), ;, if, (, FastMath, ., abs, (, dot, ), <]
[w, ., dotProduct, (, direction, ), ;, if, (, FastMath, ., abs, (, dot, ), <, 1.0e-10, ), {, return]
[if, (, FastMath, ., abs, (, dot, ), <, 1.0e-10, ), {, return, null, ;, }, final, Vector3D, point, =]
[if, (, FastMath, ., abs, (, dot, ), <, 1.0e-10, ), {, return, null, ;, }, final, Vector3D, point, =]
[abs, (, dot, ), <, 1.0e-10, ), {, return, null, ;, }, final, Vector3D, point, =, line, ., toSpace, (]
[abs, (, dot, ), <, 1.0e-10, ), {, return, null, ;, }, final, Vector3D, point, =, line, ., toSpace, (]
[null, ;, }, final, Vector3D, point, =, line, ., toSpace, (, Vector1D, ., ZERO, ), ;, final, double, k, =]
[null, ;, }, final, Vector3D, point, =, line, ., toSpace, (, Vector1D, ., ZERO, ), ;, final, double, k, =]
[;, }, final, Vector3D, point, =, line, ., toSpace, (, Vector1D, ., ZERO, ), ;, final, double, k, =, -]
[}, final, Vector3D, point, =, line, ., toSpace, (, Vector1D, ., ZERO, ), ;, final, double, k, =, -, (]
[}, final, Vector3D, point, =, line, ., toSpace, (, Vector1D, ., ZERO, ), ;, final, double, k, =, -, (]
[Vector3D, point, =, line, ., toSpace, (, Vector1D, ., ZERO, ), ;, final, double, k, =, -, (, originOffset, +]
[Vector3D, point, =, line, ., toSpace, (, Vector1D, ., ZERO, ), ;, final, double, k, =, -, (, originOffset, +]
[., toSpace, (, Vector1D, ., ZERO, ), ;, final, double, k, =, -, (, originOffset, +, w, ., dotProduct, (]
[., ZERO, ), ;, final, double, k, =, -, (, originOffset, +, w, ., dotProduct, (, point, ), ), /]
[;, final, double, k, =, -, (, originOffset, +, w, ., dotProduct, (, point, ), ), /, dot, ;, return]
[k, =, -, (, originOffset, +, w, ., dotProduct, (, point, ), ), /, dot, ;, return, new, Vector3D, (]
[-, (, originOffset, +, w, ., dotProduct, (, point, ), ), /, dot, ;, return, new, Vector3D, (, 1.0, ,]
[originOffset, +, w, ., dotProduct, (, point, ), ), /, dot, ;, return, new, Vector3D, (, 1.0, ,, point, ,]
[w, ., dotProduct, (, point, ), ), /, dot, ;, return, new, Vector3D, (, 1.0, ,, point, ,, k, ,]
[,, k, ,, direction, ), ;, }, public, Line, intersection, (, final, Plane, other, ), {, final, Vector3D, direction, =]
[,, k, ,, direction, ), ;, }, public, Line, intersection, (, final, Plane, other, ), {, final, Vector3D, direction, =]
[), ;, }, public, Line, intersection, (, final, Plane, other, ), {, final, Vector3D, direction, =, Vector3D, ., crossProduct, (]
[}, public, Line, intersection, (, final, Plane, other, ), {, final, Vector3D, direction, =, Vector3D, ., crossProduct, (, w, ,]
[}, public, Line, intersection, (, final, Plane, other, ), {, final, Vector3D, direction, =, Vector3D, ., crossProduct, (, w, ,]
[other, ), {, final, Vector3D, direction, =, Vector3D, ., crossProduct, (, w, ,, other, ., w, ), ;, if, (]
[other, ), {, final, Vector3D, direction, =, Vector3D, ., crossProduct, (, w, ,, other, ., w, ), ;, if, (]
[other, ), {, final, Vector3D, direction, =, Vector3D, ., crossProduct, (, w, ,, other, ., w, ), ;, if, (]
[=, Vector3D, ., crossProduct, (, w, ,, other, ., w, ), ;, if, (, direction, ., getNorm, (, ), <]
[(, w, ,, other, ., w, ), ;, if, (, direction, ., getNorm, (, ), <, 1.0e-10, ), {, return]
[;, if, (, direction, ., getNorm, (, ), <, 1.0e-10, ), {, return, null, ;, }, final, Vector3D, point, =]
[(, direction, ., getNorm, (, ), <, 1.0e-10, ), {, return, null, ;, }, final, Vector3D, point, =, intersection, (]
[., getNorm, (, ), <, 1.0e-10, ), {, return, null, ;, }, final, Vector3D, point, =, intersection, (, this, ,]
[(, ), <, 1.0e-10, ), {, return, null, ;, }, final, Vector3D, point, =, intersection, (, this, ,, other, ,]
[1.0e-10, ), {, return, null, ;, }, final, Vector3D, point, =, intersection, (, this, ,, other, ,, new, Plane, (]
[;, }, final, Vector3D, point, =, intersection, (, this, ,, other, ,, new, Plane, (, direction, ), ), ;, return]
[Vector3D, point, =, intersection, (, this, ,, other, ,, new, Plane, (, direction, ), ), ;, return, new, Line, (]
[=, intersection, (, this, ,, other, ,, new, Plane, (, direction, ), ), ;, return, new, Line, (, point, ,]
[=, intersection, (, this, ,, other, ,, new, Plane, (, direction, ), ), ;, return, new, Line, (, point, ,]
[,, other, ,, new, Plane, (, direction, ), ), ;, return, new, Line, (, point, ,, point, ., add, (]
[Vector3D, intersection, (, final, Plane, plane1, ,, final, Plane, plane2, ,, final, Plane, plane3, ), {, final, double, a1, =]
[Vector3D, intersection, (, final, Plane, plane1, ,, final, Plane, plane2, ,, final, Plane, plane3, ), {, final, double, a1, =]
[Vector3D, intersection, (, final, Plane, plane1, ,, final, Plane, plane2, ,, final, Plane, plane3, ), {, final, double, a1, =]
[Plane, plane3, ), {, final, double, a1, =, plane1, ., w, ., getX, (, ), ;, final, double, b1, =]
[Plane, plane3, ), {, final, double, a1, =, plane1, ., w, ., getX, (, ), ;, final, double, b1, =]
[Plane, plane3, ), {, final, double, a1, =, plane1, ., w, ., getX, (, ), ;, final, double, b1, =]
[getX, (, ), ;, final, double, b1, =, plane1, ., w, ., getY, (, ), ;, final, double, c1, =]
[getX, (, ), ;, final, double, b1, =, plane1, ., w, ., getY, (, ), ;, final, double, c1, =]
[getX, (, ), ;, final, double, b1, =, plane1, ., w, ., getY, (, ), ;, final, double, c1, =]
[getY, (, ), ;, final, double, c1, =, plane1, ., w, ., getZ, (, ), ;, final, double, d1, =]
[getY, (, ), ;, final, double, c1, =, plane1, ., w, ., getZ, (, ), ;, final, double, d1, =]
[plane1, ., w, ., getZ, (, ), ;, final, double, d1, =, plane1, ., originOffset, ;, final, double, a2, =]
[plane1, ., w, ., getZ, (, ), ;, final, double, d1, =, plane1, ., originOffset, ;, final, double, a2, =]
[plane1, ., w, ., getZ, (, ), ;, final, double, d1, =, plane1, ., originOffset, ;, final, double, a2, =]
[plane1, ., originOffset, ;, final, double, a2, =, plane2, ., w, ., getX, (, ), ;, final, double, b2, =]
[plane1, ., originOffset, ;, final, double, a2, =, plane2, ., w, ., getX, (, ), ;, final, double, b2, =]
[plane1, ., originOffset, ;, final, double, a2, =, plane2, ., w, ., getX, (, ), ;, final, double, b2, =]
[getX, (, ), ;, final, double, b2, =, plane2, ., w, ., getY, (, ), ;, final, double, c2, =]
[getX, (, ), ;, final, double, b2, =, plane2, ., w, ., getY, (, ), ;, final, double, c2, =]
[getX, (, ), ;, final, double, b2, =, plane2, ., w, ., getY, (, ), ;, final, double, c2, =]
[getY, (, ), ;, final, double, c2, =, plane2, ., w, ., getZ, (, ), ;, final, double, d2, =]
[getY, (, ), ;, final, double, c2, =, plane2, ., w, ., getZ, (, ), ;, final, double, d2, =]
[plane2, ., w, ., getZ, (, ), ;, final, double, d2, =, plane2, ., originOffset, ;, final, double, a3, =]
[plane2, ., w, ., getZ, (, ), ;, final, double, d2, =, plane2, ., originOffset, ;, final, double, a3, =]
[plane2, ., w, ., getZ, (, ), ;, final, double, d2, =, plane2, ., originOffset, ;, final, double, a3, =]
[plane2, ., originOffset, ;, final, double, a3, =, plane3, ., w, ., getX, (, ), ;, final, double, b3, =]
[plane2, ., originOffset, ;, final, double, a3, =, plane3, ., w, ., getX, (, ), ;, final, double, b3, =]
[plane2, ., originOffset, ;, final, double, a3, =, plane3, ., w, ., getX, (, ), ;, final, double, b3, =]
[getX, (, ), ;, final, double, b3, =, plane3, ., w, ., getY, (, ), ;, final, double, c3, =]
[getX, (, ), ;, final, double, b3, =, plane3, ., w, ., getY, (, ), ;, final, double, c3, =]
[getX, (, ), ;, final, double, b3, =, plane3, ., w, ., getY, (, ), ;, final, double, c3, =]
[getY, (, ), ;, final, double, c3, =, plane3, ., w, ., getZ, (, ), ;, final, double, d3, =]
[getY, (, ), ;, final, double, c3, =, plane3, ., w, ., getZ, (, ), ;, final, double, d3, =]
[plane3, ., w, ., getZ, (, ), ;, final, double, d3, =, plane3, ., originOffset, ;, final, double, a23, =]
[plane3, ., w, ., getZ, (, ), ;, final, double, d3, =, plane3, ., originOffset, ;, final, double, a23, =]
[plane3, ., w, ., getZ, (, ), ;, final, double, d3, =, plane3, ., originOffset, ;, final, double, a23, =]
[w, ., getZ, (, ), ;, final, double, d3, =, plane3, ., originOffset, ;, final, double, a23, =, b2, *]
[getZ, (, ), ;, final, double, d3, =, plane3, ., originOffset, ;, final, double, a23, =, b2, *, c3, -]
[getZ, (, ), ;, final, double, d3, =, plane3, ., originOffset, ;, final, double, a23, =, b2, *, c3, -]
[), ;, final, double, d3, =, plane3, ., originOffset, ;, final, double, a23, =, b2, *, c3, -, b3, *]
[plane3, ., originOffset, ;, final, double, a23, =, b2, *, c3, -, b3, *, c2, ;, final, double, b23, =]
[plane3, ., originOffset, ;, final, double, a23, =, b2, *, c3, -, b3, *, c2, ;, final, double, b23, =]
[plane3, ., originOffset, ;, final, double, a23, =, b2, *, c3, -, b3, *, c2, ;, final, double, b23, =]
[originOffset, ;, final, double, a23, =, b2, *, c3, -, b3, *, c2, ;, final, double, b23, =, c2, *]
[final, double, a23, =, b2, *, c3, -, b3, *, c2, ;, final, double, b23, =, c2, *, a3, -]
[final, double, a23, =, b2, *, c3, -, b3, *, c2, ;, final, double, b23, =, c2, *, a3, -]
[a23, =, b2, *, c3, -, b3, *, c2, ;, final, double, b23, =, c2, *, a3, -, c3, *]
[b3, *, c2, ;, final, double, b23, =, c2, *, a3, -, c3, *, a2, ;, final, double, c23, =]
[b3, *, c2, ;, final, double, b23, =, c2, *, a3, -, c3, *, a2, ;, final, double, c23, =]
[b3, *, c2, ;, final, double, b23, =, c2, *, a3, -, c3, *, a2, ;, final, double, c23, =]
[c2, ;, final, double, b23, =, c2, *, a3, -, c3, *, a2, ;, final, double, c23, =, a2, *]
[final, double, b23, =, c2, *, a3, -, c3, *, a2, ;, final, double, c23, =, a2, *, b3, -]
[final, double, b23, =, c2, *, a3, -, c3, *, a2, ;, final, double, c23, =, a2, *, b3, -]
[b23, =, c2, *, a3, -, c3, *, a2, ;, final, double, c23, =, a2, *, b3, -, a3, *]
[c3, *, a2, ;, final, double, c23, =, a2, *, b3, -, a3, *, b2, ;, final, double, determinant, =]
[c3, *, a2, ;, final, double, c23, =, a2, *, b3, -, a3, *, b2, ;, final, double, determinant, =]
[c3, *, a2, ;, final, double, c23, =, a2, *, b3, -, a3, *, b2, ;, final, double, determinant, =]
[c3, *, a2, ;, final, double, c23, =, a2, *, b3, -, a3, *, b2, ;, final, double, determinant, =]
[a2, ;, final, double, c23, =, a2, *, b3, -, a3, *, b2, ;, final, double, determinant, =, a1, *]
[final, double, c23, =, a2, *, b3, -, a3, *, b2, ;, final, double, determinant, =, a1, *, a23, +]
[final, double, c23, =, a2, *, b3, -, a3, *, b2, ;, final, double, determinant, =, a1, *, a23, +]
[c23, =, a2, *, b3, -, a3, *, b2, ;, final, double, determinant, =, a1, *, a23, +, b1, *]
[a2, *, b3, -, a3, *, b2, ;, final, double, determinant, =, a1, *, a23, +, b1, *, b23, +]
[a2, *, b3, -, a3, *, b2, ;, final, double, determinant, =, a1, *, a23, +, b1, *, b23, +]
[b3, -, a3, *, b2, ;, final, double, determinant, =, a1, *, a23, +, b1, *, b23, +, c1, *]
[b2, ;, final, double, determinant, =, a1, *, a23, +, b1, *, b23, +, c1, *, c23, ;, if, (]
[b2, ;, final, double, determinant, =, a1, *, a23, +, b1, *, b23, +, c1, *, c23, ;, if, (]
[b2, ;, final, double, determinant, =, a1, *, a23, +, b1, *, b23, +, c1, *, c23, ;, if, (]
[determinant, =, a1, *, a23, +, b1, *, b23, +, c1, *, c23, ;, if, (, FastMath, ., abs, (]
[*, a23, +, b1, *, b23, +, c1, *, c23, ;, if, (, FastMath, ., abs, (, determinant, ), <]
[*, b23, +, c1, *, c23, ;, if, (, FastMath, ., abs, (, determinant, ), <, 1.0e-10, ), {, return]
[if, (, FastMath, ., abs, (, determinant, ), <, 1.0e-10, ), {, return, null, ;, }, final, double, r, =]
[if, (, FastMath, ., abs, (, determinant, ), <, 1.0e-10, ), {, return, null, ;, }, final, double, r, =]
[FastMath, ., abs, (, determinant, ), <, 1.0e-10, ), {, return, null, ;, }, final, double, r, =, 1.0, /]
[(, determinant, ), <, 1.0e-10, ), {, return, null, ;, }, final, double, r, =, 1.0, /, determinant, ;, return]
[<, 1.0e-10, ), {, return, null, ;, }, final, double, r, =, 1.0, /, determinant, ;, return, new, Vector3D, (]
[<, 1.0e-10, ), {, return, null, ;, }, final, double, r, =, 1.0, /, determinant, ;, return, new, Vector3D, (]
[1.0e-10, ), {, return, null, ;, }, final, double, r, =, 1.0, /, determinant, ;, return, new, Vector3D, (, (]
[1.0e-10, ), {, return, null, ;, }, final, double, r, =, 1.0, /, determinant, ;, return, new, Vector3D, (, (]
[1.0e-10, ), {, return, null, ;, }, final, double, r, =, 1.0, /, determinant, ;, return, new, Vector3D, (, (]
[1.0e-10, ), {, return, null, ;, }, final, double, r, =, 1.0, /, determinant, ;, return, new, Vector3D, (, (]
[), {, return, null, ;, }, final, double, r, =, 1.0, /, determinant, ;, return, new, Vector3D, (, (, -]
[return, null, ;, }, final, double, r, =, 1.0, /, determinant, ;, return, new, Vector3D, (, (, -, a23, *]
[;, }, final, double, r, =, 1.0, /, determinant, ;, return, new, Vector3D, (, (, -, a23, *, d1, -]
[;, }, final, double, r, =, 1.0, /, determinant, ;, return, new, Vector3D, (, (, -, a23, *, d1, -]
[}, final, double, r, =, 1.0, /, determinant, ;, return, new, Vector3D, (, (, -, a23, *, d1, -, (]
[}, final, double, r, =, 1.0, /, determinant, ;, return, new, Vector3D, (, (, -, a23, *, d1, -, (]
[}, final, double, r, =, 1.0, /, determinant, ;, return, new, Vector3D, (, (, -, a23, *, d1, -, (]
[double, r, =, 1.0, /, determinant, ;, return, new, Vector3D, (, (, -, a23, *, d1, -, (, c1, *]
[=, 1.0, /, determinant, ;, return, new, Vector3D, (, (, -, a23, *, d1, -, (, c1, *, b3, -]
[=, 1.0, /, determinant, ;, return, new, Vector3D, (, (, -, a23, *, d1, -, (, c1, *, b3, -]
[/, determinant, ;, return, new, Vector3D, (, (, -, a23, *, d1, -, (, c1, *, b3, -, c3, *]
[return, new, Vector3D, (, (, -, a23, *, d1, -, (, c1, *, b3, -, c3, *, b1, ), *]
[Vector3D, (, (, -, a23, *, d1, -, (, c1, *, b3, -, c3, *, b1, ), *, d2, -]
[Vector3D, (, (, -, a23, *, d1, -, (, c1, *, b3, -, c3, *, b1, ), *, d2, -]
[(, (, -, a23, *, d1, -, (, c1, *, b3, -, c3, *, b1, ), *, d2, -, (]
[(, (, -, a23, *, d1, -, (, c1, *, b3, -, c3, *, b1, ), *, d2, -, (]
[(, (, -, a23, *, d1, -, (, c1, *, b3, -, c3, *, b1, ), *, d2, -, (]
[-, a23, *, d1, -, (, c1, *, b3, -, c3, *, b1, ), *, d2, -, (, c2, *]
[*, d1, -, (, c1, *, b3, -, c3, *, b1, ), *, d2, -, (, c2, *, b1, -]
[*, d1, -, (, c1, *, b3, -, c3, *, b1, ), *, d2, -, (, c2, *, b1, -]
[-, (, c1, *, b3, -, c3, *, b1, ), *, d2, -, (, c2, *, b1, -, c1, *]
[*, b3, -, c3, *, b1, ), *, d2, -, (, c2, *, b1, -, c1, *, b2, ), *]
[c3, *, b1, ), *, d2, -, (, c2, *, b1, -, c1, *, b2, ), *, d3, ), *]
[b1, ), *, d2, -, (, c2, *, b1, -, c1, *, b2, ), *, d3, ), *, r, ,]
[b1, ), *, d2, -, (, c2, *, b1, -, c1, *, b2, ), *, d3, ), *, r, ,]
[), *, d2, -, (, c2, *, b1, -, c1, *, b2, ), *, d3, ), *, r, ,, (]
[), *, d2, -, (, c2, *, b1, -, c1, *, b2, ), *, d3, ), *, r, ,, (]
[), *, d2, -, (, c2, *, b1, -, c1, *, b2, ), *, d3, ), *, r, ,, (]
[), *, d2, -, (, c2, *, b1, -, c1, *, b2, ), *, d3, ), *, r, ,, (]
[*, d2, -, (, c2, *, b1, -, c1, *, b2, ), *, d3, ), *, r, ,, (, -]
[-, (, c2, *, b1, -, c1, *, b2, ), *, d3, ), *, r, ,, (, -, b23, *]
[c2, *, b1, -, c1, *, b2, ), *, d3, ), *, r, ,, (, -, b23, *, d1, -]
[c2, *, b1, -, c1, *, b2, ), *, d3, ), *, r, ,, (, -, b23, *, d1, -]
[*, b1, -, c1, *, b2, ), *, d3, ), *, r, ,, (, -, b23, *, d1, -, (]
[*, b1, -, c1, *, b2, ), *, d3, ), *, r, ,, (, -, b23, *, d1, -, (]
[*, b1, -, c1, *, b2, ), *, d3, ), *, r, ,, (, -, b23, *, d1, -, (]
[-, c1, *, b2, ), *, d3, ), *, r, ,, (, -, b23, *, d1, -, (, c3, *]
[*, b2, ), *, d3, ), *, r, ,, (, -, b23, *, d1, -, (, c3, *, a1, -]
[*, b2, ), *, d3, ), *, r, ,, (, -, b23, *, d1, -, (, c3, *, a1, -]
[), *, d3, ), *, r, ,, (, -, b23, *, d1, -, (, c3, *, a1, -, c1, *]
[), *, r, ,, (, -, b23, *, d1, -, (, c3, *, a1, -, c1, *, a3, ), *]
[r, ,, (, -, b23, *, d1, -, (, c3, *, a1, -, c1, *, a3, ), *, d2, -]
[r, ,, (, -, b23, *, d1, -, (, c3, *, a1, -, c1, *, a3, ), *, d2, -]
[,, (, -, b23, *, d1, -, (, c3, *, a1, -, c1, *, a3, ), *, d2, -, (]
[,, (, -, b23, *, d1, -, (, c3, *, a1, -, c1, *, a3, ), *, d2, -, (]
[,, (, -, b23, *, d1, -, (, c3, *, a1, -, c1, *, a3, ), *, d2, -, (]
[-, b23, *, d1, -, (, c3, *, a1, -, c1, *, a3, ), *, d2, -, (, c1, *]
[*, d1, -, (, c3, *, a1, -, c1, *, a3, ), *, d2, -, (, c1, *, a2, -]
[*, d1, -, (, c3, *, a1, -, c1, *, a3, ), *, d2, -, (, c1, *, a2, -]
[-, (, c3, *, a1, -, c1, *, a3, ), *, d2, -, (, c1, *, a2, -, c2, *]
[*, a1, -, c1, *, a3, ), *, d2, -, (, c1, *, a2, -, c2, *, a1, ), *]
[c1, *, a3, ), *, d2, -, (, c1, *, a2, -, c2, *, a1, ), *, d3, ), *]
[a3, ), *, d2, -, (, c1, *, a2, -, c2, *, a1, ), *, d3, ), *, r, ,]
[a3, ), *, d2, -, (, c1, *, a2, -, c2, *, a1, ), *, d3, ), *, r, ,]
[), *, d2, -, (, c1, *, a2, -, c2, *, a1, ), *, d3, ), *, r, ,, (]
[), *, d2, -, (, c1, *, a2, -, c2, *, a1, ), *, d3, ), *, r, ,, (]
[), *, d2, -, (, c1, *, a2, -, c2, *, a1, ), *, d3, ), *, r, ,, (]
[), *, d2, -, (, c1, *, a2, -, c2, *, a1, ), *, d3, ), *, r, ,, (]
[*, d2, -, (, c1, *, a2, -, c2, *, a1, ), *, d3, ), *, r, ,, (, -]
[-, (, c1, *, a2, -, c2, *, a1, ), *, d3, ), *, r, ,, (, -, c23, *]
[c1, *, a2, -, c2, *, a1, ), *, d3, ), *, r, ,, (, -, c23, *, d1, -]
[c1, *, a2, -, c2, *, a1, ), *, d3, ), *, r, ,, (, -, c23, *, d1, -]
[*, a2, -, c2, *, a1, ), *, d3, ), *, r, ,, (, -, c23, *, d1, -, (]
[*, a2, -, c2, *, a1, ), *, d3, ), *, r, ,, (, -, c23, *, d1, -, (]
[*, a2, -, c2, *, a1, ), *, d3, ), *, r, ,, (, -, c23, *, d1, -, (]
[-, c2, *, a1, ), *, d3, ), *, r, ,, (, -, c23, *, d1, -, (, b1, *]
[*, a1, ), *, d3, ), *, r, ,, (, -, c23, *, d1, -, (, b1, *, a3, -]
[*, a1, ), *, d3, ), *, r, ,, (, -, c23, *, d1, -, (, b1, *, a3, -]
[), *, d3, ), *, r, ,, (, -, c23, *, d1, -, (, b1, *, a3, -, b3, *]
[), *, r, ,, (, -, c23, *, d1, -, (, b1, *, a3, -, b3, *, a1, ), *]
[r, ,, (, -, c23, *, d1, -, (, b1, *, a3, -, b3, *, a1, ), *, d2, -]
[r, ,, (, -, c23, *, d1, -, (, b1, *, a3, -, b3, *, a1, ), *, d2, -]
[,, (, -, c23, *, d1, -, (, b1, *, a3, -, b3, *, a1, ), *, d2, -, (]
[,, (, -, c23, *, d1, -, (, b1, *, a3, -, b3, *, a1, ), *, d2, -, (]
[,, (, -, c23, *, d1, -, (, b1, *, a3, -, b3, *, a1, ), *, d2, -, (]
[-, c23, *, d1, -, (, b1, *, a3, -, b3, *, a1, ), *, d2, -, (, b2, *]
[*, d1, -, (, b1, *, a3, -, b3, *, a1, ), *, d2, -, (, b2, *, a1, -]
[*, d1, -, (, b1, *, a3, -, b3, *, a1, ), *, d2, -, (, b2, *, a1, -]
[-, (, b1, *, a3, -, b3, *, a1, ), *, d2, -, (, b2, *, a1, -, b1, *]
[*, a3, -, b3, *, a1, ), *, d2, -, (, b2, *, a1, -, b1, *, a2, ), *]
[b3, *, a1, ), *, d2, -, (, b2, *, a1, -, b1, *, a2, ), *, d3, ), *]
[-, b1, *, a2, ), *, d3, ), *, r, ), ;, }, public, SubPlane, wholeHyperplane, (, ), {, return]
[a2, ), *, d3, ), *, r, ), ;, }, public, SubPlane, wholeHyperplane, (, ), {, return, new, SubPlane, (]
[*, d3, ), *, r, ), ;, }, public, SubPlane, wholeHyperplane, (, ), {, return, new, SubPlane, (, this, ,]
[return, new, SubPlane, (, this, ,, new, PolygonsSet, (, ), ), ;, }, public, PolyhedronsSet, wholeSpace, (, ), {, return]
[(, ), {, return, new, PolyhedronsSet, (, ), ;, }, public, boolean, contains, (, final, Vector3D, p, ), {, return]
[(, ), {, return, new, PolyhedronsSet, (, ), ;, }, public, boolean, contains, (, final, Vector3D, p, ), {, return]
[(, ), {, return, new, PolyhedronsSet, (, ), ;, }, public, boolean, contains, (, final, Vector3D, p, ), {, return]
[new, PolyhedronsSet, (, ), ;, }, public, boolean, contains, (, final, Vector3D, p, ), {, return, FastMath, ., abs, (]
[(, ), ;, }, public, boolean, contains, (, final, Vector3D, p, ), {, return, FastMath, ., abs, (, getOffset, (]
[public, boolean, contains, (, final, Vector3D, p, ), {, return, FastMath, ., abs, (, getOffset, (, p, ), ), <]
[(, getOffset, (, p, ), ), <, 1.0e-10, ;, }, public, double, getOffset, (, final, Plane, plane, ), {, return]
[(, getOffset, (, p, ), ), <, 1.0e-10, ;, }, public, double, getOffset, (, final, Plane, plane, ), {, return]
[(, p, ), ), <, 1.0e-10, ;, }, public, double, getOffset, (, final, Plane, plane, ), {, return, originOffset, +]
[p, ), ), <, 1.0e-10, ;, }, public, double, getOffset, (, final, Plane, plane, ), {, return, originOffset, +, (]
[p, ), ), <, 1.0e-10, ;, }, public, double, getOffset, (, final, Plane, plane, ), {, return, originOffset, +, (]
[), <, 1.0e-10, ;, }, public, double, getOffset, (, final, Plane, plane, ), {, return, originOffset, +, (, sameOrientationAs, (]
[;, }, public, double, getOffset, (, final, Plane, plane, ), {, return, originOffset, +, (, sameOrientationAs, (, plane, ), ?]
[}, public, double, getOffset, (, final, Plane, plane, ), {, return, originOffset, +, (, sameOrientationAs, (, plane, ), ?, -]
[}, public, double, getOffset, (, final, Plane, plane, ), {, return, originOffset, +, (, sameOrientationAs, (, plane, ), ?, -]
[(, final, Plane, plane, ), {, return, originOffset, +, (, sameOrientationAs, (, plane, ), ?, -, plane, ., originOffset, :]
[(, final, Plane, plane, ), {, return, originOffset, +, (, sameOrientationAs, (, plane, ), ?, -, plane, ., originOffset, :]
[:, plane, ., originOffset, ), ;, }, public, double, getOffset, (, final, Vector, <, Euclidean3D, >, point, ), {, return]
[:, plane, ., originOffset, ), ;, }, public, double, getOffset, (, final, Vector, <, Euclidean3D, >, point, ), {, return]
[:, plane, ., originOffset, ), ;, }, public, double, getOffset, (, final, Vector, <, Euclidean3D, >, point, ), {, return]
[), ;, }, public, double, getOffset, (, final, Vector, <, Euclidean3D, >, point, ), {, return, point, ., dotProduct, (]
[public, double, getOffset, (, final, Vector, <, Euclidean3D, >, point, ), {, return, point, ., dotProduct, (, w, ), +]
[(, w, ), +, originOffset, ;, }, public, boolean, sameOrientationAs, (, final, Hyperplane, <, Euclidean3D, >, other, ), {, return]
[(, w, ), +, originOffset, ;, }, public, boolean, sameOrientationAs, (, final, Hyperplane, <, Euclidean3D, >, other, ), {, return]
[(, w, ), +, originOffset, ;, }, public, boolean, sameOrientationAs, (, final, Hyperplane, <, Euclidean3D, >, other, ), {, return]
[w, ), +, originOffset, ;, }, public, boolean, sameOrientationAs, (, final, Hyperplane, <, Euclidean3D, >, other, ), {, return, (]
[w, ), +, originOffset, ;, }, public, boolean, sameOrientationAs, (, final, Hyperplane, <, Euclidean3D, >, other, ), {, return, (]
[), +, originOffset, ;, }, public, boolean, sameOrientationAs, (, final, Hyperplane, <, Euclidean3D, >, other, ), {, return, (, (]
[;, }, public, boolean, sameOrientationAs, (, final, Hyperplane, <, Euclidean3D, >, other, ), {, return, (, (, (, Plane, )]
[<, Euclidean3D, >, other, ), {, return, (, (, (, Plane, ), other, ), ., w, ), ., dotProduct, (]
[other, ), {, return, (, (, (, Plane, ), other, ), ., w, ), ., dotProduct, (, w, ), >]
