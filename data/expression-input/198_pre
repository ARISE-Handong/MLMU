[field, ., FieldUtils, ;, import, org, ., joda, ., time, ., field, ., ImpreciseDateTimeField, ;, class, BasicYearDateTimeField, extends, ImpreciseDateTimeField, {]
[;, import, org, ., joda, ., time, ., field, ., ImpreciseDateTimeField, ;, class, BasicYearDateTimeField, extends, ImpreciseDateTimeField, {, @, SuppressWarnings, (]
[field, ., ImpreciseDateTimeField, ;, class, BasicYearDateTimeField, extends, ImpreciseDateTimeField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long, serialVersionUID, =]
[., ImpreciseDateTimeField, ;, class, BasicYearDateTimeField, extends, ImpreciseDateTimeField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long, serialVersionUID, =, -]
[final, long, serialVersionUID, =, -, 98628754872287L, ;, protected, final, BasicChronology, iChronology, ;, BasicYearDateTimeField, (, BasicChronology, chronology, ), {, super, (]
[final, long, serialVersionUID, =, -, 98628754872287L, ;, protected, final, BasicChronology, iChronology, ;, BasicYearDateTimeField, (, BasicChronology, chronology, ), {, super, (]
[;, protected, final, BasicChronology, iChronology, ;, BasicYearDateTimeField, (, BasicChronology, chronology, ), {, super, (, DateTimeFieldType, ., year, (, ), ,]
[;, protected, final, BasicChronology, iChronology, ;, BasicYearDateTimeField, (, BasicChronology, chronology, ), {, super, (, DateTimeFieldType, ., year, (, ), ,]
[(, BasicChronology, chronology, ), {, super, (, DateTimeFieldType, ., year, (, ), ,, chronology, ., getAverageMillisPerYear, (, ), ), ;]
[chronology, ), {, super, (, DateTimeFieldType, ., year, (, ), ,, chronology, ., getAverageMillisPerYear, (, ), ), ;, iChronology, =]
[,, chronology, ., getAverageMillisPerYear, (, ), ), ;, iChronology, =, chronology, ;, }, public, boolean, isLenient, (, ), {, return]
[}, public, boolean, isLenient, (, ), {, return, false, ;, }, public, int, get, (, long, instant, ), {, return]
[}, public, boolean, isLenient, (, ), {, return, false, ;, }, public, int, get, (, long, instant, ), {, return]
[(, ), {, return, false, ;, }, public, int, get, (, long, instant, ), {, return, iChronology, ., getYear, (]
[., getYear, (, instant, ), ;, }, public, long, add, (, long, instant, ,, int, years, ), {, if, (]
[., getYear, (, instant, ), ;, }, public, long, add, (, long, instant, ,, int, years, ), {, if, (]
[(, instant, ), ;, }, public, long, add, (, long, instant, ,, int, years, ), {, if, (, years, ==]
[}, public, long, add, (, long, instant, ,, int, years, ), {, if, (, years, ==, 0, ), {, return]
[instant, ,, int, years, ), {, if, (, years, ==, 0, ), {, return, instant, ;, }, int, thisYear, =]
[int, years, ), {, if, (, years, ==, 0, ), {, return, instant, ;, }, int, thisYear, =, get, (]
[years, ==, 0, ), {, return, instant, ;, }, int, thisYear, =, get, (, instant, ), ;, int, newYear, =]
[years, ==, 0, ), {, return, instant, ;, }, int, thisYear, =, get, (, instant, ), ;, int, newYear, =]
[{, return, instant, ;, }, int, thisYear, =, get, (, instant, ), ;, int, newYear, =, FieldUtils, ., safeAdd, (]
[instant, ;, }, int, thisYear, =, get, (, instant, ), ;, int, newYear, =, FieldUtils, ., safeAdd, (, thisYear, ,]
[thisYear, =, get, (, instant, ), ;, int, newYear, =, FieldUtils, ., safeAdd, (, thisYear, ,, years, ), ;, return]
[get, (, instant, ), ;, int, newYear, =, FieldUtils, ., safeAdd, (, thisYear, ,, years, ), ;, return, set, (]
[instant, ), ;, int, newYear, =, FieldUtils, ., safeAdd, (, thisYear, ,, years, ), ;, return, set, (, instant, ,]
[set, (, instant, ,, newYear, ), ;, }, public, long, add, (, long, instant, ,, long, years, ), {, return]
[instant, ,, newYear, ), ;, }, public, long, add, (, long, instant, ,, long, years, ), {, return, add, (]
[newYear, ), ;, }, public, long, add, (, long, instant, ,, long, years, ), {, return, add, (, instant, ,]
[newYear, ), ;, }, public, long, add, (, long, instant, ,, long, years, ), {, return, add, (, instant, ,]
[public, long, add, (, long, instant, ,, long, years, ), {, return, add, (, instant, ,, FieldUtils, ., safeToInt, (]
[safeToInt, (, years, ), ), ;, }, public, long, addWrapField, (, long, instant, ,, int, years, ), {, if, (]
[safeToInt, (, years, ), ), ;, }, public, long, addWrapField, (, long, instant, ,, int, years, ), {, if, (]
[years, ), ), ;, }, public, long, addWrapField, (, long, instant, ,, int, years, ), {, if, (, years, ==]
[}, public, long, addWrapField, (, long, instant, ,, int, years, ), {, if, (, years, ==, 0, ), {, return]
[instant, ,, int, years, ), {, if, (, years, ==, 0, ), {, return, instant, ;, }, int, thisYear, =]
[instant, ,, int, years, ), {, if, (, years, ==, 0, ), {, return, instant, ;, }, int, thisYear, =]
[), {, if, (, years, ==, 0, ), {, return, instant, ;, }, int, thisYear, =, iChronology, ., getYear, (]
[0, ), {, return, instant, ;, }, int, thisYear, =, iChronology, ., getYear, (, instant, ), ;, int, wrappedYear, =]
[0, ), {, return, instant, ;, }, int, thisYear, =, iChronology, ., getYear, (, instant, ), ;, int, wrappedYear, =]
[instant, ;, }, int, thisYear, =, iChronology, ., getYear, (, instant, ), ;, int, wrappedYear, =, FieldUtils, ., getWrappedValue, (]
[}, int, thisYear, =, iChronology, ., getYear, (, instant, ), ;, int, wrappedYear, =, FieldUtils, ., getWrappedValue, (, thisYear, ,]
[thisYear, =, iChronology, ., getYear, (, instant, ), ;, int, wrappedYear, =, FieldUtils, ., getWrappedValue, (, thisYear, ,, years, ,]
[thisYear, =, iChronology, ., getYear, (, instant, ), ;, int, wrappedYear, =, FieldUtils, ., getWrappedValue, (, thisYear, ,, years, ,]
[instant, ), ;, int, wrappedYear, =, FieldUtils, ., getWrappedValue, (, thisYear, ,, years, ,, iChronology, ., getMinYear, (, ), ,]
[instant, ), ;, int, wrappedYear, =, FieldUtils, ., getWrappedValue, (, thisYear, ,, years, ,, iChronology, ., getMinYear, (, ), ,]
[getWrappedValue, (, thisYear, ,, years, ,, iChronology, ., getMinYear, (, ), ,, iChronology, ., getMaxYear, (, ), ), ;, return]
[thisYear, ,, years, ,, iChronology, ., getMinYear, (, ), ,, iChronology, ., getMaxYear, (, ), ), ;, return, set, (]
[years, ,, iChronology, ., getMinYear, (, ), ,, iChronology, ., getMaxYear, (, ), ), ;, return, set, (, instant, ,]
[return, set, (, instant, ,, wrappedYear, ), ;, }, public, long, set, (, long, instant, ,, int, year, ), {]
[return, set, (, instant, ,, wrappedYear, ), ;, }, public, long, set, (, long, instant, ,, int, year, ), {]
[,, wrappedYear, ), ;, }, public, long, set, (, long, instant, ,, int, year, ), {, FieldUtils, ., verifyValueBounds, (]
[), ;, }, public, long, set, (, long, instant, ,, int, year, ), {, FieldUtils, ., verifyValueBounds, (, this, ,]
[}, public, long, set, (, long, instant, ,, int, year, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, year, ,]
[}, public, long, set, (, long, instant, ,, int, year, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, year, ,]
[instant, ,, int, year, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, year, ,, iChronology, ., getMinYear, (, ), ,]
[instant, ,, int, year, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, year, ,, iChronology, ., getMinYear, (, ), ,]
[verifyValueBounds, (, this, ,, year, ,, iChronology, ., getMinYear, (, ), ,, iChronology, ., getMaxYear, (, ), ), ;, return]
[verifyValueBounds, (, this, ,, year, ,, iChronology, ., getMinYear, (, ), ,, iChronology, ., getMaxYear, (, ), ), ;, return]
[year, ,, iChronology, ., getMinYear, (, ), ,, iChronology, ., getMaxYear, (, ), ), ;, return, iChronology, ., setYear, (]
[iChronology, ., getMinYear, (, ), ,, iChronology, ., getMaxYear, (, ), ), ;, return, iChronology, ., setYear, (, instant, ,]
[(, instant, ,, year, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (]
[(, instant, ,, year, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (]
[,, year, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, <]
[}, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, <, subtrahendInstant, ), {, return]
[public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, <, subtrahendInstant, ), {, return, -]
[public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, <, subtrahendInstant, ), {, return, -]
[long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, <, subtrahendInstant, ), {, return, -, iChronology, ., getYearDifference, (]
[,, long, subtrahendInstant, ), {, if, (, minuendInstant, <, subtrahendInstant, ), {, return, -, iChronology, ., getYearDifference, (, subtrahendInstant, ,]
[if, (, minuendInstant, <, subtrahendInstant, ), {, return, -, iChronology, ., getYearDifference, (, subtrahendInstant, ,, minuendInstant, ), ;, }, return]
[if, (, minuendInstant, <, subtrahendInstant, ), {, return, -, iChronology, ., getYearDifference, (, subtrahendInstant, ,, minuendInstant, ), ;, }, return]
[subtrahendInstant, ), {, return, -, iChronology, ., getYearDifference, (, subtrahendInstant, ,, minuendInstant, ), ;, }, return, iChronology, ., getYearDifference, (]
[{, return, -, iChronology, ., getYearDifference, (, subtrahendInstant, ,, minuendInstant, ), ;, }, return, iChronology, ., getYearDifference, (, minuendInstant, ,]
[;, }, return, iChronology, ., getYearDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, DurationField, getRangeDurationField, (, ), {, return]
[}, public, DurationField, getRangeDurationField, (, ), {, return, null, ;, }, public, boolean, isLeap, (, long, instant, ), {, return]
[}, public, DurationField, getRangeDurationField, (, ), {, return, null, ;, }, public, boolean, isLeap, (, long, instant, ), {, return]
[(, ), {, return, null, ;, }, public, boolean, isLeap, (, long, instant, ), {, return, iChronology, ., isLeapYear, (]
[{, return, null, ;, }, public, boolean, isLeap, (, long, instant, ), {, return, iChronology, ., isLeapYear, (, get, (]
[., isLeapYear, (, get, (, instant, ), ), ;, }, public, int, getLeapAmount, (, long, instant, ), {, if, (]
[., isLeapYear, (, get, (, instant, ), ), ;, }, public, int, getLeapAmount, (, long, instant, ), {, if, (]
[(, instant, ), ), ;, }, public, int, getLeapAmount, (, long, instant, ), {, if, (, iChronology, ., isLeapYear, (]
[), ), ;, }, public, int, getLeapAmount, (, long, instant, ), {, if, (, iChronology, ., isLeapYear, (, get, (]
[getLeapAmount, (, long, instant, ), {, if, (, iChronology, ., isLeapYear, (, get, (, instant, ), ), ), {, return]
[if, (, iChronology, ., isLeapYear, (, get, (, instant, ), ), ), {, return, 1, ;, }, else, {, return]
[), {, return, 1, ;, }, else, {, return, 0, ;, }, }, public, DurationField, getLeapDurationField, (, ), {, return]
[), {, return, 1, ;, }, else, {, return, 0, ;, }, }, public, DurationField, getLeapDurationField, (, ), {, return]
[DurationField, getLeapDurationField, (, ), {, return, iChronology, ., days, (, ), ;, }, public, int, getMinimumValue, (, ), {, return]
[DurationField, getLeapDurationField, (, ), {, return, iChronology, ., days, (, ), ;, }, public, int, getMinimumValue, (, ), {, return]
[int, getMinimumValue, (, ), {, return, iChronology, ., getMinYear, (, ), ;, }, public, int, getMaximumValue, (, ), {, return]
[int, getMinimumValue, (, ), {, return, iChronology, ., getMinYear, (, ), ;, }, public, int, getMaximumValue, (, ), {, return]
[(, ), {, return, iChronology, ., getMaxYear, (, ), ;, }, public, long, roundFloor, (, long, instant, ), {, return]
[(, ), {, return, iChronology, ., getMaxYear, (, ), ;, }, public, long, roundFloor, (, long, instant, ), {, return]
[iChronology, ., getMaxYear, (, ), ;, }, public, long, roundFloor, (, long, instant, ), {, return, iChronology, ., getYearMillis, (]
[getMaxYear, (, ), ;, }, public, long, roundFloor, (, long, instant, ), {, return, iChronology, ., getYearMillis, (, get, (]
[getYearMillis, (, get, (, instant, ), ), ;, }, public, long, roundCeiling, (, long, instant, ), {, int, year, =]
[get, (, instant, ), ), ;, }, public, long, roundCeiling, (, long, instant, ), {, int, year, =, get, (]
[}, public, long, roundCeiling, (, long, instant, ), {, int, year, =, get, (, instant, ), ;, long, yearStartMillis, =]
[}, public, long, roundCeiling, (, long, instant, ), {, int, year, =, get, (, instant, ), ;, long, yearStartMillis, =]
[(, long, instant, ), {, int, year, =, get, (, instant, ), ;, long, yearStartMillis, =, iChronology, ., getYearMillis, (]
[int, year, =, get, (, instant, ), ;, long, yearStartMillis, =, iChronology, ., getYearMillis, (, year, ), ;, if, (]
[int, year, =, get, (, instant, ), ;, long, yearStartMillis, =, iChronology, ., getYearMillis, (, year, ), ;, if, (]
[=, get, (, instant, ), ;, long, yearStartMillis, =, iChronology, ., getYearMillis, (, year, ), ;, if, (, instant, !=]
[instant, ), ;, long, yearStartMillis, =, iChronology, ., getYearMillis, (, year, ), ;, if, (, instant, !=, yearStartMillis, ), {]
[;, long, yearStartMillis, =, iChronology, ., getYearMillis, (, year, ), ;, if, (, instant, !=, yearStartMillis, ), {, instant, =]
[;, long, yearStartMillis, =, iChronology, ., getYearMillis, (, year, ), ;, if, (, instant, !=, yearStartMillis, ), {, instant, =]
[iChronology, ., getYearMillis, (, year, ), ;, if, (, instant, !=, yearStartMillis, ), {, instant, =, iChronology, ., getYearMillis, (]
[iChronology, ., getYearMillis, (, year, ), ;, if, (, instant, !=, yearStartMillis, ), {, instant, =, iChronology, ., getYearMillis, (]
[getYearMillis, (, year, ), ;, if, (, instant, !=, yearStartMillis, ), {, instant, =, iChronology, ., getYearMillis, (, year, +]
[if, (, instant, !=, yearStartMillis, ), {, instant, =, iChronology, ., getYearMillis, (, year, +, 1, ), ;, }, return]
[(, year, +, 1, ), ;, }, return, instant, ;, }, public, long, remainder, (, long, instant, ), {, return]
[(, year, +, 1, ), ;, }, return, instant, ;, }, public, long, remainder, (, long, instant, ), {, return]
[+, 1, ), ;, }, return, instant, ;, }, public, long, remainder, (, long, instant, ), {, return, instant, -]
[), ;, }, return, instant, ;, }, public, long, remainder, (, long, instant, ), {, return, instant, -, roundFloor, (]
[long, instant, ), {, return, instant, -, roundFloor, (, instant, ), ;, }, private, Object, readResolve, (, ), {, return]
[long, instant, ), {, return, instant, -, roundFloor, (, instant, ), ;, }, private, Object, readResolve, (, ), {, return]
