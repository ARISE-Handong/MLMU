[math3, ., exception, ., TooManyEvaluationsException, ;, @, Deprecated, public, class, NewtonSolver, extends, AbstractDifferentiableUnivariateSolver, {, private, static, final, double, DEFAULT_ABSOLUTE_ACCURACY, =]
[class, NewtonSolver, extends, AbstractDifferentiableUnivariateSolver, {, private, static, final, double, DEFAULT_ABSOLUTE_ACCURACY, =, 1e-6, ;, public, NewtonSolver, (, ), {, this, (]
[public, NewtonSolver, (, ), {, this, (, DEFAULT_ABSOLUTE_ACCURACY, ), ;, }, public, NewtonSolver, (, double, absoluteAccuracy, ), {, super, (]
[(, int, maxEval, ,, final, DifferentiableUnivariateFunction, f, ,, final, double, min, ,, final, double, max, ), throws, TooManyEvaluationsException, {, return]
[(, int, maxEval, ,, final, DifferentiableUnivariateFunction, f, ,, final, double, min, ,, final, double, max, ), throws, TooManyEvaluationsException, {, return]
[final, DifferentiableUnivariateFunction, f, ,, final, double, min, ,, final, double, max, ), throws, TooManyEvaluationsException, {, return, super, ., solve, (]
[f, ,, final, double, min, ,, final, double, max, ), throws, TooManyEvaluationsException, {, return, super, ., solve, (, maxEval, ,]
[final, double, min, ,, final, double, max, ), throws, TooManyEvaluationsException, {, return, super, ., solve, (, maxEval, ,, f, ,]
[final, double, min, ,, final, double, max, ), throws, TooManyEvaluationsException, {, return, super, ., solve, (, maxEval, ,, f, ,]
[final, double, max, ), throws, TooManyEvaluationsException, {, return, super, ., solve, (, maxEval, ,, f, ,, UnivariateSolverUtils, ., midpoint, (]
[max, ), throws, TooManyEvaluationsException, {, return, super, ., solve, (, maxEval, ,, f, ,, UnivariateSolverUtils, ., midpoint, (, min, ,]
[,, max, ), ), ;, }, @, Override, protected, double, doSolve, (, ), throws, TooManyEvaluationsException, {, final, double, startValue, =]
[protected, double, doSolve, (, ), throws, TooManyEvaluationsException, {, final, double, startValue, =, getStartValue, (, ), ;, final, double, absoluteAccuracy, =]
[{, final, double, startValue, =, getStartValue, (, ), ;, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, double, x0, =]
[), ;, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, double, x0, =, startValue, ;, double, x1, ;, while, (]
[double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, double, x0, =, startValue, ;, double, x1, ;, while, (, true, ), {]
[=, getAbsoluteAccuracy, (, ), ;, double, x0, =, startValue, ;, double, x1, ;, while, (, true, ), {, x1, =]
[=, getAbsoluteAccuracy, (, ), ;, double, x0, =, startValue, ;, double, x1, ;, while, (, true, ), {, x1, =]
[(, ), ;, double, x0, =, startValue, ;, double, x1, ;, while, (, true, ), {, x1, =, x0, -]
[), ;, double, x0, =, startValue, ;, double, x1, ;, while, (, true, ), {, x1, =, x0, -, (]
[), ;, double, x0, =, startValue, ;, double, x1, ;, while, (, true, ), {, x1, =, x0, -, (]
[double, x0, =, startValue, ;, double, x1, ;, while, (, true, ), {, x1, =, x0, -, (, computeObjectiveValue, (]
[startValue, ;, double, x1, ;, while, (, true, ), {, x1, =, x0, -, (, computeObjectiveValue, (, x0, ), /]
[double, x1, ;, while, (, true, ), {, x1, =, x0, -, (, computeObjectiveValue, (, x0, ), /, computeDerivativeObjectiveValue, (]
[), {, x1, =, x0, -, (, computeObjectiveValue, (, x0, ), /, computeDerivativeObjectiveValue, (, x0, ), ), ;, if, (]
[), {, x1, =, x0, -, (, computeObjectiveValue, (, x0, ), /, computeDerivativeObjectiveValue, (, x0, ), ), ;, if, (]
[), {, x1, =, x0, -, (, computeObjectiveValue, (, x0, ), /, computeDerivativeObjectiveValue, (, x0, ), ), ;, if, (]
[x0, -, (, computeObjectiveValue, (, x0, ), /, computeDerivativeObjectiveValue, (, x0, ), ), ;, if, (, FastMath, ., abs, (]
[x0, -, (, computeObjectiveValue, (, x0, ), /, computeDerivativeObjectiveValue, (, x0, ), ), ;, if, (, FastMath, ., abs, (]
[(, computeObjectiveValue, (, x0, ), /, computeDerivativeObjectiveValue, (, x0, ), ), ;, if, (, FastMath, ., abs, (, x1, -]
[x0, ), /, computeDerivativeObjectiveValue, (, x0, ), ), ;, if, (, FastMath, ., abs, (, x1, -, x0, ), <=]
[(, x0, ), ), ;, if, (, FastMath, ., abs, (, x1, -, x0, ), <=, absoluteAccuracy, ), {, return]
[), ;, if, (, FastMath, ., abs, (, x1, -, x0, ), <=, absoluteAccuracy, ), {, return, x1, ;, }]
[if, (, FastMath, ., abs, (, x1, -, x0, ), <=, absoluteAccuracy, ), {, return, x1, ;, }, x0, =]
