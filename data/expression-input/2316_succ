[=, dimension, ;, this, ., rand, =, rand, ;, }, public, UnitSphereRandomVectorGenerator, (, final, int, dimension, ), {, this, (]
[., dimension, =, dimension, ;, this, ., rand, =, rand, ;, }, public, UnitSphereRandomVectorGenerator, (, final, int, dimension, ), {]
[;, this, ., rand, =, rand, ;, }, public, UnitSphereRandomVectorGenerator, (, final, int, dimension, ), {, this, (, dimension, ,]
[=, rand, ;, }, public, UnitSphereRandomVectorGenerator, (, final, int, dimension, ), {, this, (, dimension, ,, new, MersenneTwister, (, )]
[., rand, =, rand, ;, }, public, UnitSphereRandomVectorGenerator, (, final, int, dimension, ), {, this, (, dimension, ,, new, MersenneTwister]
[;, }, public, UnitSphereRandomVectorGenerator, (, final, int, dimension, ), {, this, (, dimension, ,, new, MersenneTwister, (, ), ), ;]
[,, new, MersenneTwister, (, ), ), ;, }, public, double, [, ], nextVector, (, ), {, final, double, [, ]]
[), ;, }, public, double, [, ], nextVector, (, ), {, final, double, [, ], v, =, new, double, []
[;, double, normSq, =, 0, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, )]
[], ;, double, normSq, =, 0, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++]
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, final, double, comp, =]
[;, i, <, dimension, ;, i, ++, ), {, final, double, comp, =, rand, ., nextGaussian, (, ), ;, v]
[;, i, ++, ), {, final, double, comp, =, rand, ., nextGaussian, (, ), ;, v, [, i, ], =]
[<, dimension, ;, i, ++, ), {, final, double, comp, =, rand, ., nextGaussian, (, ), ;, v, [, i]
[;, i, ++, ), {, final, double, comp, =, rand, ., nextGaussian, (, ), ;, v, [, i, ], =]
[), {, final, double, comp, =, rand, ., nextGaussian, (, ), ;, v, [, i, ], =, comp, ;, normSq]
[++, ), {, final, double, comp, =, rand, ., nextGaussian, (, ), ;, v, [, i, ], =, comp, ;]
[;, v, [, i, ], =, comp, ;, normSq, +=, comp, *, comp, ;, }, final, double, f, =, 1]
[., nextGaussian, (, ), ;, v, [, i, ], =, comp, ;, normSq, +=, comp, *, comp, ;, }, final]
[=, comp, ;, normSq, +=, comp, *, comp, ;, }, final, double, f, =, 1, /, FastMath, ., sqrt, (]
[[, i, ], =, comp, ;, normSq, +=, comp, *, comp, ;, }, final, double, f, =, 1, /, FastMath]
[], =, comp, ;, normSq, +=, comp, *, comp, ;, }, final, double, f, =, 1, /, FastMath, ., sqrt]
[;, normSq, +=, comp, *, comp, ;, }, final, double, f, =, 1, /, FastMath, ., sqrt, (, normSq, )]
[+=, comp, *, comp, ;, }, final, double, f, =, 1, /, FastMath, ., sqrt, (, normSq, ), ;, for]
[;, }, final, double, f, =, 1, /, FastMath, ., sqrt, (, normSq, ), ;, for, (, int, i, =]
[*, comp, ;, }, final, double, f, =, 1, /, FastMath, ., sqrt, (, normSq, ), ;, for, (, int]
[;, }, final, double, f, =, 1, /, FastMath, ., sqrt, (, normSq, ), ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, v, [, i, ]]
[/, FastMath, ., sqrt, (, normSq, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, v, [, i, ]]
[., sqrt, (, normSq, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, )]
[), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, v, [, i]
[;, i, <, dimension, ;, i, ++, ), {, v, [, i, ], *=, f, ;, }, return, v, ;]
[;, i, ++, ), {, v, [, i, ], *=, f, ;, }, return, v, ;, }, }]
[<, dimension, ;, i, ++, ), {, v, [, i, ], *=, f, ;, }, return, v, ;, }, }]
[;, i, ++, ), {, v, [, i, ], *=, f, ;, }, return, v, ;, }, }]
[), {, v, [, i, ], *=, f, ;, }, return, v, ;, }, }]
[++, ), {, v, [, i, ], *=, f, ;, }, return, v, ;, }, }]
[*=, f, ;, }, return, v, ;, }, }]
[[, i, ], *=, f, ;, }, return, v, ;, }, }]
[], *=, f, ;, }, return, v, ;, }, }]
[;, }, return, v, ;, }, }]
[;, }, }]
