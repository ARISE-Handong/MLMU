[;, public, double, [, ], transform, (, final, double, [, ], f, ,, final, TransformType, type, ), {, if, (]
[), {, return, fht, (, f, ), ;, }, return, TransformUtils, ., scaleArray, (, fht, (, f, ), ,, 1.0]
[==, TransformType, ., FORWARD, ), {, return, fht, (, f, ), ;, }, return, TransformUtils, ., scaleArray, (, fht, (]
[), {, return, fht, (, f, ), ;, }, return, TransformUtils, ., scaleArray, (, fht, (, f, ), ,, 1.0]
[., FORWARD, ), {, return, fht, (, f, ), ;, }, return, TransformUtils, ., scaleArray, (, fht, (, f, )]
[;, }, return, TransformUtils, ., scaleArray, (, fht, (, f, ), ,, 1.0, /, f, ., length, ), ;, }]
[), ;, }, return, TransformUtils, ., scaleArray, (, fht, (, f, ), ,, 1.0, /, f, ., length, ), ;]
[;, }, public, double, [, ], transform, (, final, UnivariateFunction, f, ,, final, double, min, ,, final, double, max, ,]
[., scaleArray, (, fht, (, f, ), ,, 1.0, /, f, ., length, ), ;, }, public, double, [, ]]
[,, 1.0, /, f, ., length, ), ;, }, public, double, [, ], transform, (, final, UnivariateFunction, f, ,, final]
[), ,, 1.0, /, f, ., length, ), ;, }, public, double, [, ], transform, (, final, UnivariateFunction, f, ,]
[), ;, }, public, double, [, ], transform, (, final, UnivariateFunction, f, ,, final, double, min, ,, final, double, max]
[/, f, ., length, ), ;, }, public, double, [, ], transform, (, final, UnivariateFunction, f, ,, final, double, min]
[), ;, }, public, double, [, ], transform, (, final, UnivariateFunction, f, ,, final, double, min, ,, final, double, max]
[., length, ), ;, }, public, double, [, ], transform, (, final, UnivariateFunction, f, ,, final, double, min, ,, final]
[;, }, public, int, [, ], transform, (, final, int, [, ], f, ), {, return, fht, (, f, )]
[,, type, ), ;, }, public, int, [, ], transform, (, final, int, [, ], f, ), {, return, fht]
[., sample, (, f, ,, min, ,, max, ,, n, ), ,, type, ), ;, }, public, int, [, ]]
[,, min, ,, max, ,, n, ), ,, type, ), ;, }, public, int, [, ], transform, (, final, int]
[,, max, ,, n, ), ,, type, ), ;, }, public, int, [, ], transform, (, final, int, [, ]]
[,, n, ), ,, type, ), ;, }, public, int, [, ], transform, (, final, int, [, ], f, )]
[), ,, type, ), ;, }, public, int, [, ], transform, (, final, int, [, ], f, ), {, return]
[), ;, }, public, int, [, ], transform, (, final, int, [, ], f, ), {, return, fht, (, f]
[;, }, protected, double, [, ], fht, (, double, [, ], x, ), throws, MathIllegalArgumentException, {, final, int, n, =]
[), ;, }, protected, double, [, ], fht, (, double, [, ], x, ), throws, MathIllegalArgumentException, {, final, int, n]
[;, final, int, halfN, =, n, /, 2, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {]
[., length, ;, final, int, halfN, =, n, /, 2, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, )]
[;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO, ,]
[/, 2, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, .]
[;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO, ,]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO, ,, Integer, ., valueOf, (, n, ), ), ;, }, double]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO, ,, Integer, ., valueOf, (, n, ), ), ;, }, double]
[., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO, ,, Integer, ., valueOf, (, n]
[), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO, ,, Integer, ., valueOf, (, n, ), ), ;, }]
[;, }, double, [, ], yPrevious, =, new, double, [, n, ], ;, double, [, ], yCurrent, =, x, .]
[,, Integer, ., valueOf, (, n, ), ), ;, }, double, [, ], yPrevious, =, new, double, [, n, ]]
[., NOT_POWER_OF_TWO, ,, Integer, ., valueOf, (, n, ), ), ;, }, double, [, ], yPrevious, =, new, double, []
[), ;, }, double, [, ], yPrevious, =, new, double, [, n, ], ;, double, [, ], yCurrent, =, x]
[., valueOf, (, n, ), ), ;, }, double, [, ], yPrevious, =, new, double, [, n, ], ;, double]
[), ), ;, }, double, [, ], yPrevious, =, new, double, [, n, ], ;, double, [, ], yCurrent, =]
[;, double, [, ], yCurrent, =, x, ., clone, (, ), ;, for, (, int, j, =, 1, ;, j]
[], ;, double, [, ], yCurrent, =, x, ., clone, (, ), ;, for, (, int, j, =, 1, ;]
[;, for, (, int, j, =, 1, ;, j, <, n, ;, j, <<=, 1, ), {, final, double, []
[., clone, (, ), ;, for, (, int, j, =, 1, ;, j, <, n, ;, j, <<=, 1, )]
[;, j, <, n, ;, j, <<=, 1, ), {, final, double, [, ], yTmp, =, yCurrent, ;, yCurrent, =]
[;, j, <<=, 1, ), {, final, double, [, ], yTmp, =, yCurrent, ;, yCurrent, =, yPrevious, ;, yPrevious, =]
[<, n, ;, j, <<=, 1, ), {, final, double, [, ], yTmp, =, yCurrent, ;, yCurrent, =, yPrevious, ;]
[;, j, <<=, 1, ), {, final, double, [, ], yTmp, =, yCurrent, ;, yCurrent, =, yPrevious, ;, yPrevious, =]
[<<=, 1, ), {, final, double, [, ], yTmp, =, yCurrent, ;, yCurrent, =, yPrevious, ;, yPrevious, =, yTmp, ;]
[), {, final, double, [, ], yTmp, =, yCurrent, ;, yCurrent, =, yPrevious, ;, yPrevious, =, yTmp, ;, for, (]
[;, yCurrent, =, yPrevious, ;, yPrevious, =, yTmp, ;, for, (, int, i, =, 0, ;, i, <, halfN, ;]
[=, yPrevious, ;, yPrevious, =, yTmp, ;, for, (, int, i, =, 0, ;, i, <, halfN, ;, ++, i]
[;, yPrevious, =, yTmp, ;, for, (, int, i, =, 0, ;, i, <, halfN, ;, ++, i, ), {]
[=, yTmp, ;, for, (, int, i, =, 0, ;, i, <, halfN, ;, ++, i, ), {, final, int]
[;, for, (, int, i, =, 0, ;, i, <, halfN, ;, ++, i, ), {, final, int, twoI, =]
[;, i, <, halfN, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i]
[;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, []
[<, halfN, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =]
[;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, []
[), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, ], +]
[), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, ], +]
[;, yCurrent, [, i, ], =, yPrevious, [, twoI, ], +, yPrevious, [, twoI, +, 1, ], ;, }, for]
[*, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, ], +, yPrevious, [, twoI, +, 1, ], ;]
[;, yCurrent, [, i, ], =, yPrevious, [, twoI, ], +, yPrevious, [, twoI, +, 1, ], ;, }, for]
[=, yPrevious, [, twoI, ], +, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =, halfN]
[[, i, ], =, yPrevious, [, twoI, ], +, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int]
[], =, yPrevious, [, twoI, ], +, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =]
[;, }, for, (, int, i, =, halfN, ;, i, <, n, ;, ++, i, ), {, final, int, twoI]
[+, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =, halfN, ;, i, <, n, ;]
[[, twoI, ], +, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =, halfN, ;, i]
[], +, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =, halfN, ;, i, <, n]
[;, }, for, (, int, i, =, halfN, ;, i, <, n, ;, ++, i, ), {, final, int, twoI]
[[, twoI, +, 1, ], ;, }, for, (, int, i, =, halfN, ;, i, <, n, ;, ++, i]
[], ;, }, for, (, int, i, =, halfN, ;, i, <, n, ;, ++, i, ), {, final, int]
[+, 1, ], ;, }, for, (, int, i, =, halfN, ;, i, <, n, ;, ++, i, ), {]
[], ;, }, for, (, int, i, =, halfN, ;, i, <, n, ;, ++, i, ), {, final, int]
[;, i, <, n, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i]
[;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, []
[<, n, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =]
[;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, []
[), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n]
[), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n]
[;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n, ], -, yPrevious, [, twoI, -, n, +, 1]
[*, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n, ], -, yPrevious, [, twoI, -, n]
[;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n, ], -, yPrevious, [, twoI, -, n, +, 1]
[=, yPrevious, [, twoI, -, n, ], -, yPrevious, [, twoI, -, n, +, 1, ], ;, }, }, return]
[[, i, ], =, yPrevious, [, twoI, -, n, ], -, yPrevious, [, twoI, -, n, +, 1, ], ;]
[], =, yPrevious, [, twoI, -, n, ], -, yPrevious, [, twoI, -, n, +, 1, ], ;, }, }]
[;, }, }, return, yCurrent, ;, }, protected, int, [, ], fht, (, int, [, ], x, ), throws, MathIllegalArgumentException]
[-, yPrevious, [, twoI, -, n, +, 1, ], ;, }, }, return, yCurrent, ;, }, protected, int, [, ]]
[[, twoI, -, n, ], -, yPrevious, [, twoI, -, n, +, 1, ], ;, }, }, return, yCurrent, ;]
[], -, yPrevious, [, twoI, -, n, +, 1, ], ;, }, }, return, yCurrent, ;, }, protected, int, []
[-, n, ], -, yPrevious, [, twoI, -, n, +, 1, ], ;, }, }, return, yCurrent, ;, }, protected]
[], -, yPrevious, [, twoI, -, n, +, 1, ], ;, }, }, return, yCurrent, ;, }, protected, int, []
[;, }, }, return, yCurrent, ;, }, protected, int, [, ], fht, (, int, [, ], x, ), throws, MathIllegalArgumentException]
[[, twoI, -, n, +, 1, ], ;, }, }, return, yCurrent, ;, }, protected, int, [, ], fht, (]
[], ;, }, }, return, yCurrent, ;, }, protected, int, [, ], fht, (, int, [, ], x, ), throws]
[+, 1, ], ;, }, }, return, yCurrent, ;, }, protected, int, [, ], fht, (, int, [, ], x]
[-, n, +, 1, ], ;, }, }, return, yCurrent, ;, }, protected, int, [, ], fht, (, int, []
[+, 1, ], ;, }, }, return, yCurrent, ;, }, protected, int, [, ], fht, (, int, [, ], x]
[], ;, }, }, return, yCurrent, ;, }, protected, int, [, ], fht, (, int, [, ], x, ), throws]
[;, }, protected, int, [, ], fht, (, int, [, ], x, ), throws, MathIllegalArgumentException, {, final, int, n, =]
[;, final, int, halfN, =, n, /, 2, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {]
[., length, ;, final, int, halfN, =, n, /, 2, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, )]
[;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO, ,]
[/, 2, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, .]
[;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO, ,]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO, ,, Integer, ., valueOf, (, n, ), ), ;, }, int]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO, ,, Integer, ., valueOf, (, n, ), ), ;, }, int]
[., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO, ,, Integer, ., valueOf, (, n]
[), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO, ,, Integer, ., valueOf, (, n, ), ), ;, }]
[;, }, int, [, ], yPrevious, =, new, int, [, n, ], ;, int, [, ], yCurrent, =, x, .]
[,, Integer, ., valueOf, (, n, ), ), ;, }, int, [, ], yPrevious, =, new, int, [, n, ]]
[., NOT_POWER_OF_TWO, ,, Integer, ., valueOf, (, n, ), ), ;, }, int, [, ], yPrevious, =, new, int, []
[), ;, }, int, [, ], yPrevious, =, new, int, [, n, ], ;, int, [, ], yCurrent, =, x]
[., valueOf, (, n, ), ), ;, }, int, [, ], yPrevious, =, new, int, [, n, ], ;, int]
[), ), ;, }, int, [, ], yPrevious, =, new, int, [, n, ], ;, int, [, ], yCurrent, =]
[;, int, [, ], yCurrent, =, x, ., clone, (, ), ;, for, (, int, j, =, 1, ;, j]
[], ;, int, [, ], yCurrent, =, x, ., clone, (, ), ;, for, (, int, j, =, 1, ;]
[;, for, (, int, j, =, 1, ;, j, <, n, ;, j, <<=, 1, ), {, final, int, []
[., clone, (, ), ;, for, (, int, j, =, 1, ;, j, <, n, ;, j, <<=, 1, )]
[;, j, <, n, ;, j, <<=, 1, ), {, final, int, [, ], yTmp, =, yCurrent, ;, yCurrent, =]
[;, j, <<=, 1, ), {, final, int, [, ], yTmp, =, yCurrent, ;, yCurrent, =, yPrevious, ;, yPrevious, =]
[<, n, ;, j, <<=, 1, ), {, final, int, [, ], yTmp, =, yCurrent, ;, yCurrent, =, yPrevious, ;]
[;, j, <<=, 1, ), {, final, int, [, ], yTmp, =, yCurrent, ;, yCurrent, =, yPrevious, ;, yPrevious, =]
[<<=, 1, ), {, final, int, [, ], yTmp, =, yCurrent, ;, yCurrent, =, yPrevious, ;, yPrevious, =, yTmp, ;]
[), {, final, int, [, ], yTmp, =, yCurrent, ;, yCurrent, =, yPrevious, ;, yPrevious, =, yTmp, ;, for, (]
[;, yCurrent, =, yPrevious, ;, yPrevious, =, yTmp, ;, for, (, int, i, =, 0, ;, i, <, halfN, ;]
[=, yPrevious, ;, yPrevious, =, yTmp, ;, for, (, int, i, =, 0, ;, i, <, halfN, ;, ++, i]
[;, yPrevious, =, yTmp, ;, for, (, int, i, =, 0, ;, i, <, halfN, ;, ++, i, ), {]
[=, yTmp, ;, for, (, int, i, =, 0, ;, i, <, halfN, ;, ++, i, ), {, final, int]
[;, for, (, int, i, =, 0, ;, i, <, halfN, ;, ++, i, ), {, final, int, twoI, =]
[;, i, <, halfN, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i]
[;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, []
[<, halfN, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =]
[;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, []
[), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, ], +]
[), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, ], +]
[;, yCurrent, [, i, ], =, yPrevious, [, twoI, ], +, yPrevious, [, twoI, +, 1, ], ;, }, for]
[*, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, ], +, yPrevious, [, twoI, +, 1, ], ;]
[;, yCurrent, [, i, ], =, yPrevious, [, twoI, ], +, yPrevious, [, twoI, +, 1, ], ;, }, for]
[=, yPrevious, [, twoI, ], +, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =, halfN]
[[, i, ], =, yPrevious, [, twoI, ], +, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int]
[], =, yPrevious, [, twoI, ], +, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =]
[;, }, for, (, int, i, =, halfN, ;, i, <, n, ;, ++, i, ), {, final, int, twoI]
[+, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =, halfN, ;, i, <, n, ;]
[[, twoI, ], +, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =, halfN, ;, i]
[], +, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =, halfN, ;, i, <, n]
[;, }, for, (, int, i, =, halfN, ;, i, <, n, ;, ++, i, ), {, final, int, twoI]
[[, twoI, +, 1, ], ;, }, for, (, int, i, =, halfN, ;, i, <, n, ;, ++, i]
[], ;, }, for, (, int, i, =, halfN, ;, i, <, n, ;, ++, i, ), {, final, int]
[+, 1, ], ;, }, for, (, int, i, =, halfN, ;, i, <, n, ;, ++, i, ), {]
[], ;, }, for, (, int, i, =, halfN, ;, i, <, n, ;, ++, i, ), {, final, int]
[;, i, <, n, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i]
[;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, []
[<, n, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =]
[;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, []
[), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n]
[), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n]
[;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n, ], -, yPrevious, [, twoI, -, n, +, 1]
[*, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n, ], -, yPrevious, [, twoI, -, n]
[;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n, ], -, yPrevious, [, twoI, -, n, +, 1]
[=, yPrevious, [, twoI, -, n, ], -, yPrevious, [, twoI, -, n, +, 1, ], ;, }, }, return]
[[, i, ], =, yPrevious, [, twoI, -, n, ], -, yPrevious, [, twoI, -, n, +, 1, ], ;]
[], =, yPrevious, [, twoI, -, n, ], -, yPrevious, [, twoI, -, n, +, 1, ], ;, }, }]
[;, }, }, return, yCurrent, ;, }, }]
[-, yPrevious, [, twoI, -, n, +, 1, ], ;, }, }, return, yCurrent, ;, }, }]
[[, twoI, -, n, ], -, yPrevious, [, twoI, -, n, +, 1, ], ;, }, }, return, yCurrent, ;]
[], -, yPrevious, [, twoI, -, n, +, 1, ], ;, }, }, return, yCurrent, ;, }, }]
[-, n, ], -, yPrevious, [, twoI, -, n, +, 1, ], ;, }, }, return, yCurrent, ;, }, }]
[], -, yPrevious, [, twoI, -, n, +, 1, ], ;, }, }, return, yCurrent, ;, }, }]
[;, }, }, return, yCurrent, ;, }, }]
[[, twoI, -, n, +, 1, ], ;, }, }, return, yCurrent, ;, }, }]
[], ;, }, }, return, yCurrent, ;, }, }]
[+, 1, ], ;, }, }, return, yCurrent, ;, }, }]
[-, n, +, 1, ], ;, }, }, return, yCurrent, ;, }, }]
[+, 1, ], ;, }, }, return, yCurrent, ;, }, }]
[], ;, }, }, return, yCurrent, ;, }, }]
[;, }, }]
