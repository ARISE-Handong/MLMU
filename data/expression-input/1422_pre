[google, ., javascript, ., rhino, ., jstype, ., TernaryValue, ;, class, CheckMissingReturn, implements, ScopedCallback, {, static, final, DiagnosticType, MISSING_RETURN_STATEMENT, =]
[google, ., javascript, ., rhino, ., jstype, ., TernaryValue, ;, class, CheckMissingReturn, implements, ScopedCallback, {, static, final, DiagnosticType, MISSING_RETURN_STATEMENT, =]
[rhino, ., jstype, ., TernaryValue, ;, class, CheckMissingReturn, implements, ScopedCallback, {, static, final, DiagnosticType, MISSING_RETURN_STATEMENT, =, DiagnosticType, ., warning, (]
[jstype, ., TernaryValue, ;, class, CheckMissingReturn, implements, ScopedCallback, {, static, final, DiagnosticType, MISSING_RETURN_STATEMENT, =, DiagnosticType, ., warning, (, "JSC_MISSING_RETURN_STATEMENT", ,]
[;, private, final, AbstractCompiler, compiler, ;, private, final, CheckLevel, level, ;, private, static, final, Predicate, <, Node, >, IS_RETURN, =]
[=, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return]
[=, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return]
[=, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return]
[Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return, input, !=]
[Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return, input, !=, null, &&]
[Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return, input, !=, null, &&]
[;, }, }, ;, private, static, final, Predicate, <, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, >, GOES_THROUGH_TRUE_CONDITION_PREDICATE, =]
[@, Override, public, boolean, apply, (, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, input, ), {, Branch, branch, =]
[@, Override, public, boolean, apply, (, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, input, ), {, Branch, branch, =]
[Node, ,, ControlFlowGraph, ., Branch, >, input, ), {, Branch, branch, =, input, ., getValue, (, ), ;, if, (]
[Node, ,, ControlFlowGraph, ., Branch, >, input, ), {, Branch, branch, =, input, ., getValue, (, ), ;, if, (]
[ControlFlowGraph, ., Branch, >, input, ), {, Branch, branch, =, input, ., getValue, (, ), ;, if, (, branch, ==]
[ControlFlowGraph, ., Branch, >, input, ), {, Branch, branch, =, input, ., getValue, (, ), ;, if, (, branch, ==]
[{, Branch, branch, =, input, ., getValue, (, ), ;, if, (, branch, ==, Branch, ., ON_EX, ), {, return]
[getValue, (, ), ;, if, (, branch, ==, Branch, ., ON_EX, ), {, return, false, ;, }, else, if, (]
[getValue, (, ), ;, if, (, branch, ==, Branch, ., ON_EX, ), {, return, false, ;, }, else, if, (]
[ON_EX, ), {, return, false, ;, }, else, if, (, branch, ., isConditional, (, ), ), {, Node, condition, =]
[ON_EX, ), {, return, false, ;, }, else, if, (, branch, ., isConditional, (, ), ), {, Node, condition, =]
[false, ;, }, else, if, (, branch, ., isConditional, (, ), ), {, Node, condition, =, NodeUtil, ., getConditionExpression, (]
[false, ;, }, else, if, (, branch, ., isConditional, (, ), ), {, Node, condition, =, NodeUtil, ., getConditionExpression, (]
[false, ;, }, else, if, (, branch, ., isConditional, (, ), ), {, Node, condition, =, NodeUtil, ., getConditionExpression, (]
[Node, condition, =, NodeUtil, ., getConditionExpression, (, input, ., getSource, (, ), ., getValue, (, ), ), ;, if, (]
[Node, condition, =, NodeUtil, ., getConditionExpression, (, input, ., getSource, (, ), ., getValue, (, ), ), ;, if, (]
[=, NodeUtil, ., getConditionExpression, (, input, ., getSource, (, ), ., getValue, (, ), ), ;, if, (, condition, !=]
[., getSource, (, ), ., getValue, (, ), ), ;, if, (, condition, !=, null, ), {, TernaryValue, val, =]
[., getSource, (, ), ., getValue, (, ), ), ;, if, (, condition, !=, null, ), {, TernaryValue, val, =]
[., getValue, (, ), ), ;, if, (, condition, !=, null, ), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (]
[;, if, (, condition, !=, null, ), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (]
[;, if, (, condition, !=, null, ), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (]
[(, condition, !=, null, ), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (, val, !=]
[(, condition, !=, null, ), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (, val, !=]
[TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return]
[TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return]
[TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return]
[., getImpureBooleanValue, (, condition, ), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return, val, ., toBoolean, (]
[condition, ), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return, val, ., toBoolean, (, true, ), ==]
[), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return, val, ., toBoolean, (, true, ), ==, (]
[), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return, val, ., toBoolean, (, true, ), ==, (]
[), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return, val, ., toBoolean, (, true, ), ==, (]
[val, !=, TernaryValue, ., UNKNOWN, ), {, return, val, ., toBoolean, (, true, ), ==, (, Branch, ., ON_TRUE, ==]
[return, val, ., toBoolean, (, true, ), ==, (, Branch, ., ON_TRUE, ==, branch, ), ;, }, }, }, return]
[), ;, }, }, }, return, true, ;, }, }, ;, CheckMissingReturn, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {]
[), ;, }, }, }, return, true, ;, }, }, ;, CheckMissingReturn, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {]
[}, return, true, ;, }, }, ;, CheckMissingReturn, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =]
[true, ;, }, }, ;, CheckMissingReturn, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =, compiler, ;]
[true, ;, }, }, ;, CheckMissingReturn, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =, compiler, ;]
[;, CheckMissingReturn, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =, compiler, ;, this, ., level, =]
[this, ., level, =, level, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, JSType, returnType, =]
[level, =, level, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, JSType, returnType, =, explicitReturnExpected, (]
[level, =, level, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, JSType, returnType, =, explicitReturnExpected, (]
[enterScope, (, NodeTraversal, t, ), {, JSType, returnType, =, explicitReturnExpected, (, t, ., getScopeRoot, (, ), ), ;, if, (]
[enterScope, (, NodeTraversal, t, ), {, JSType, returnType, =, explicitReturnExpected, (, t, ., getScopeRoot, (, ), ), ;, if, (]
[NodeTraversal, t, ), {, JSType, returnType, =, explicitReturnExpected, (, t, ., getScopeRoot, (, ), ), ;, if, (, returnType, ==]
[(, t, ., getScopeRoot, (, ), ), ;, if, (, returnType, ==, null, ), {, return, ;, }, if, (]
[., getScopeRoot, (, ), ), ;, if, (, returnType, ==, null, ), {, return, ;, }, if, (, fastAllPathsReturnCheck, (]
[., getScopeRoot, (, ), ), ;, if, (, returnType, ==, null, ), {, return, ;, }, if, (, fastAllPathsReturnCheck, (]
[., getControlFlowGraph, (, ), ), ), {, return, ;, }, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, test, =]
[CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, test, =, new, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, (]
[CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, test, =, new, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, (]
[Branch, >, test, =, new, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, (, t, ., getControlFlowGraph, (, ), ,]
[Branch, >, test, =, new, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, (, t, ., getControlFlowGraph, (, ), ,]
[Branch, >, test, =, new, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, (, t, ., getControlFlowGraph, (, ), ,]
[., Branch, >, (, t, ., getControlFlowGraph, (, ), ,, t, ., getControlFlowGraph, (, ), ., getEntry, (, ), ,]
[., Branch, >, (, t, ., getControlFlowGraph, (, ), ,, t, ., getControlFlowGraph, (, ), ., getEntry, (, ), ,]
[., Branch, >, (, t, ., getControlFlowGraph, (, ), ,, t, ., getControlFlowGraph, (, ), ., getEntry, (, ), ,]
[t, ., getControlFlowGraph, (, ), ., getEntry, (, ), ,, t, ., getControlFlowGraph, (, ), ., getImplicitReturn, (, ), ,]
[getControlFlowGraph, (, ), ., getEntry, (, ), ,, t, ., getControlFlowGraph, (, ), ., getImplicitReturn, (, ), ,, IS_RETURN, ,]
[(, ), ,, t, ., getControlFlowGraph, (, ), ., getImplicitReturn, (, ), ,, IS_RETURN, ,, GOES_THROUGH_TRUE_CONDITION_PREDICATE, ), ;, if, (]
[), ,, t, ., getControlFlowGraph, (, ), ., getImplicitReturn, (, ), ,, IS_RETURN, ,, GOES_THROUGH_TRUE_CONDITION_PREDICATE, ), ;, if, (, !]
[), ,, t, ., getControlFlowGraph, (, ), ., getImplicitReturn, (, ), ,, IS_RETURN, ,, GOES_THROUGH_TRUE_CONDITION_PREDICATE, ), ;, if, (, !]
[., getImplicitReturn, (, ), ,, IS_RETURN, ,, GOES_THROUGH_TRUE_CONDITION_PREDICATE, ), ;, if, (, !, test, ., allPathsSatisfyPredicate, (, ), ), {]
[., getImplicitReturn, (, ), ,, IS_RETURN, ,, GOES_THROUGH_TRUE_CONDITION_PREDICATE, ), ;, if, (, !, test, ., allPathsSatisfyPredicate, (, ), ), {]
[,, IS_RETURN, ,, GOES_THROUGH_TRUE_CONDITION_PREDICATE, ), ;, if, (, !, test, ., allPathsSatisfyPredicate, (, ), ), {, compiler, ., report, (]
[,, IS_RETURN, ,, GOES_THROUGH_TRUE_CONDITION_PREDICATE, ), ;, if, (, !, test, ., allPathsSatisfyPredicate, (, ), ), {, compiler, ., report, (]
[), ;, if, (, !, test, ., allPathsSatisfyPredicate, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[), ;, if, (, !, test, ., allPathsSatisfyPredicate, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[., allPathsSatisfyPredicate, (, ), ), {, compiler, ., report, (, t, ., makeError, (, t, ., getScopeRoot, (, ), ,]
[(, ), ), {, compiler, ., report, (, t, ., makeError, (, t, ., getScopeRoot, (, ), ,, level, ,]
[), {, compiler, ., report, (, t, ., makeError, (, t, ., getScopeRoot, (, ), ,, level, ,, MISSING_RETURN_STATEMENT, ,]
[), {, compiler, ., report, (, t, ., makeError, (, t, ., getScopeRoot, (, ), ,, level, ,, MISSING_RETURN_STATEMENT, ,]
[boolean, fastAllPathsReturnCheck, (, ControlFlowGraph, <, Node, >, cfg, ), {, for, (, DiGraphEdge, <, Node, ,, Branch, >, s, :]
[boolean, fastAllPathsReturnCheck, (, ControlFlowGraph, <, Node, >, cfg, ), {, for, (, DiGraphEdge, <, Node, ,, Branch, >, s, :]
[boolean, fastAllPathsReturnCheck, (, ControlFlowGraph, <, Node, >, cfg, ), {, for, (, DiGraphEdge, <, Node, ,, Branch, >, s, :]
[<, Node, ,, Branch, >, s, :, cfg, ., getImplicitReturn, (, ), ., getInEdges, (, ), ), {, if, (]
[Node, ,, Branch, >, s, :, cfg, ., getImplicitReturn, (, ), ., getInEdges, (, ), ), {, if, (, !]
[Node, ,, Branch, >, s, :, cfg, ., getImplicitReturn, (, ), ., getInEdges, (, ), ), {, if, (, !]
[Node, ,, Branch, >, s, :, cfg, ., getImplicitReturn, (, ), ., getInEdges, (, ), ), {, if, (, !]
[Node, ,, Branch, >, s, :, cfg, ., getImplicitReturn, (, ), ., getInEdges, (, ), ), {, if, (, !]
[{, if, (, !, s, ., getSource, (, ), ., getValue, (, ), ., isReturn, (, ), ), {, return]
[., getSource, (, ), ., getValue, (, ), ., isReturn, (, ), ), {, return, false, ;, }, }, return]
[), {, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return]
[,, Node, n, ,, Node, parent, ), {, }, private, JSType, explicitReturnExpected, (, Node, scope, ), {, FunctionType, scopeType, =]
[,, Node, n, ,, Node, parent, ), {, }, private, JSType, explicitReturnExpected, (, Node, scope, ), {, FunctionType, scopeType, =]
[Node, parent, ), {, }, private, JSType, explicitReturnExpected, (, Node, scope, ), {, FunctionType, scopeType, =, JSType, ., toMaybeFunctionType, (]
[Node, parent, ), {, }, private, JSType, explicitReturnExpected, (, Node, scope, ), {, FunctionType, scopeType, =, JSType, ., toMaybeFunctionType, (]
[Node, scope, ), {, FunctionType, scopeType, =, JSType, ., toMaybeFunctionType, (, scope, ., getJSType, (, ), ), ;, if, (]
[Node, scope, ), {, FunctionType, scopeType, =, JSType, ., toMaybeFunctionType, (, scope, ., getJSType, (, ), ), ;, if, (]
[), {, FunctionType, scopeType, =, JSType, ., toMaybeFunctionType, (, scope, ., getJSType, (, ), ), ;, if, (, scopeType, ==]
[=, JSType, ., toMaybeFunctionType, (, scope, ., getJSType, (, ), ), ;, if, (, scopeType, ==, null, ), {, return]
[scope, ., getJSType, (, ), ), ;, if, (, scopeType, ==, null, ), {, return, null, ;, }, if, (]
[getJSType, (, ), ), ;, if, (, scopeType, ==, null, ), {, return, null, ;, }, if, (, isEmptyFunction, (]
[if, (, scopeType, ==, null, ), {, return, null, ;, }, if, (, isEmptyFunction, (, scope, ), ), {, return]
[{, return, null, ;, }, if, (, isEmptyFunction, (, scope, ), ), {, return, null, ;, }, JSType, returnType, =]
[{, return, null, ;, }, if, (, isEmptyFunction, (, scope, ), ), {, return, null, ;, }, JSType, returnType, =]
[(, scope, ), ), {, return, null, ;, }, JSType, returnType, =, scopeType, ., getReturnType, (, ), ;, if, (]
[(, scope, ), ), {, return, null, ;, }, JSType, returnType, =, scopeType, ., getReturnType, (, ), ;, if, (]
[), ), {, return, null, ;, }, JSType, returnType, =, scopeType, ., getReturnType, (, ), ;, if, (, returnType, ==]
[null, ;, }, JSType, returnType, =, scopeType, ., getReturnType, (, ), ;, if, (, returnType, ==, null, ), {, return]
[=, scopeType, ., getReturnType, (, ), ;, if, (, returnType, ==, null, ), {, return, null, ;, }, if, (]
[scopeType, ., getReturnType, (, ), ;, if, (, returnType, ==, null, ), {, return, null, ;, }, if, (, !]
[getReturnType, (, ), ;, if, (, returnType, ==, null, ), {, return, null, ;, }, if, (, !, isVoidOrUnknown, (]
[(, returnType, ==, null, ), {, return, null, ;, }, if, (, !, isVoidOrUnknown, (, returnType, ), ), {, return]
[), {, return, null, ;, }, if, (, !, isVoidOrUnknown, (, returnType, ), ), {, return, returnType, ;, }, return]
[), {, return, returnType, ;, }, return, null, ;, }, private, static, boolean, isEmptyFunction, (, Node, function, ), {, return]
[), {, return, returnType, ;, }, return, null, ;, }, private, static, boolean, isEmptyFunction, (, Node, function, ), {, return]
[), {, return, returnType, ;, }, return, null, ;, }, private, static, boolean, isEmptyFunction, (, Node, function, ), {, return]
[), {, return, returnType, ;, }, return, null, ;, }, private, static, boolean, isEmptyFunction, (, Node, function, ), {, return]
[return, null, ;, }, private, static, boolean, isEmptyFunction, (, Node, function, ), {, return, function, ., getChildCount, (, ), ==]
[;, }, private, static, boolean, isEmptyFunction, (, Node, function, ), {, return, function, ., getChildCount, (, ), ==, 3, &&]
[}, private, static, boolean, isEmptyFunction, (, Node, function, ), {, return, function, ., getChildCount, (, ), ==, 3, &&, !]
[}, private, static, boolean, isEmptyFunction, (, Node, function, ), {, return, function, ., getChildCount, (, ), ==, 3, &&, !]
[}, private, static, boolean, isEmptyFunction, (, Node, function, ), {, return, function, ., getChildCount, (, ), ==, 3, &&, !]
[}, private, static, boolean, isEmptyFunction, (, Node, function, ), {, return, function, ., getChildCount, (, ), ==, 3, &&, !]
[}, private, static, boolean, isEmptyFunction, (, Node, function, ), {, return, function, ., getChildCount, (, ), ==, 3, &&, !]
[(, ), ., hasChildren, (, ), ;, }, private, boolean, isVoidOrUnknown, (, JSType, returnType, ), {, final, JSType, voidType, =]
[(, ), ., hasChildren, (, ), ;, }, private, boolean, isVoidOrUnknown, (, JSType, returnType, ), {, final, JSType, voidType, =]
[(, ), ., hasChildren, (, ), ;, }, private, boolean, isVoidOrUnknown, (, JSType, returnType, ), {, final, JSType, voidType, =]
[private, boolean, isVoidOrUnknown, (, JSType, returnType, ), {, final, JSType, voidType, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (]
[private, boolean, isVoidOrUnknown, (, JSType, returnType, ), {, final, JSType, voidType, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (]
[), {, final, JSType, voidType, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ;, return]
[), {, final, JSType, voidType, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ;, return]
[voidType, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ;, return, voidType, ., isSubtype, (]
