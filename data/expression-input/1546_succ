[;, }, public, abstract, int, numCapturingGroups, (, ), ;, public, abstract, List, <, ?, extends, RegExpTree, >, children, (, )]
[!=, 0, ;, }, public, abstract, int, numCapturingGroups, (, ), ;, public, abstract, List, <, ?, extends, RegExpTree, >, children]
[;, }, public, abstract, int, numCapturingGroups, (, ), ;, public, abstract, List, <, ?, extends, RegExpTree, >, children, (, )]
[;, sb, ., append, (, '/', ), ;, appendSourceCode, (, sb, ), ;, if, (, sb, ., length, (, )]
[;, appendSourceCode, (, sb, ), ;, if, (, sb, ., length, (, ), ==, 1, ), {, sb, ., append]
[., append, (, '/', ), ;, appendSourceCode, (, sb, ), ;, if, (, sb, ., length, (, ), ==, 1]
[), ;, appendSourceCode, (, sb, ), ;, if, (, sb, ., length, (, ), ==, 1, ), {, sb, .]
[;, if, (, sb, ., length, (, ), ==, 1, ), {, sb, ., append, (, "(?:)", ), ;, }]
[), ;, if, (, sb, ., length, (, ), ==, 1, ), {, sb, ., append, (, "(?:)", ), ;]
[), {, sb, ., append, (, "(?:)", ), ;, }, sb, ., append, (, '/', ), ;, return, sb, .]
[==, 1, ), {, sb, ., append, (, "(?:)", ), ;, }, sb, ., append, (, '/', ), ;, return]
[., length, (, ), ==, 1, ), {, sb, ., append, (, "(?:)", ), ;, }, sb, ., append, (]
[), {, sb, ., append, (, "(?:)", ), ;, }, sb, ., append, (, '/', ), ;, return, sb, .]
[;, }, sb, ., append, (, '/', ), ;, return, sb, ., toString, (, ), ;, }, public, final, String]
[., append, (, "(?:)", ), ;, }, sb, ., append, (, '/', ), ;, return, sb, ., toString, (, )]
[), ;, }, sb, ., append, (, '/', ), ;, return, sb, ., toString, (, ), ;, }, public, final]
[;, return, sb, ., toString, (, ), ;, }, public, final, String, toDebugString, (, ), {, StringBuilder, sb, =, new]
[., append, (, '/', ), ;, return, sb, ., toString, (, ), ;, }, public, final, String, toDebugString, (, )]
[), ;, return, sb, ., toString, (, ), ;, }, public, final, String, toDebugString, (, ), {, StringBuilder, sb, =]
[;, }, public, final, String, toDebugString, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, appendDebugString, (, sb]
[., toString, (, ), ;, }, public, final, String, toDebugString, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, )]
[;, appendDebugString, (, sb, ), ;, return, sb, ., toString, (, ), ;, }, private, void, appendDebugString, (, StringBuilder, sb]
[;, return, sb, ., toString, (, ), ;, }, private, void, appendDebugString, (, StringBuilder, sb, ), {, sb, ., append]
[), ;, return, sb, ., toString, (, ), ;, }, private, void, appendDebugString, (, StringBuilder, sb, ), {, sb, .]
[;, }, private, void, appendDebugString, (, StringBuilder, sb, ), {, sb, ., append, (, '(', ), ., append, (, getClass]
[., toString, (, ), ;, }, private, void, appendDebugString, (, StringBuilder, sb, ), {, sb, ., append, (, '(', )]
[;, int, len, =, sb, ., length, (, ), ;, sb, ., append, (, ' ', ), ;, appendDebugInfo, (, sb]
[., append, (, getClass, (, ), ., getSimpleName, (, ), ), ;, int, len, =, sb, ., length, (, )]
[., append, (, '(', ), ., append, (, getClass, (, ), ., getSimpleName, (, ), ), ;, int, len, =]
[), ., append, (, getClass, (, ), ., getSimpleName, (, ), ), ;, int, len, =, sb, ., length, (]
[), ;, int, len, =, sb, ., length, (, ), ;, sb, ., append, (, ' ', ), ;, appendDebugInfo, (]
[., getSimpleName, (, ), ), ;, int, len, =, sb, ., length, (, ), ;, sb, ., append, (, ' ']
[;, sb, ., append, (, ' ', ), ;, appendDebugInfo, (, sb, ), ;, if, (, sb, ., length, (, )]
[., length, (, ), ;, sb, ., append, (, ' ', ), ;, appendDebugInfo, (, sb, ), ;, if, (, sb]
[;, appendDebugInfo, (, sb, ), ;, if, (, sb, ., length, (, ), ==, len, +, 1, ), {, sb]
[., append, (, ' ', ), ;, appendDebugInfo, (, sb, ), ;, if, (, sb, ., length, (, ), ==, len]
[), ;, appendDebugInfo, (, sb, ), ;, if, (, sb, ., length, (, ), ==, len, +, 1, ), {]
[;, if, (, sb, ., length, (, ), ==, len, +, 1, ), {, sb, ., setLength, (, len, )]
[), ;, if, (, sb, ., length, (, ), ==, len, +, 1, ), {, sb, ., setLength, (, len]
[), {, sb, ., setLength, (, len, ), ;, }, for, (, RegExpTree, child, :, children, (, ), ), {]
[==, len, +, 1, ), {, sb, ., setLength, (, len, ), ;, }, for, (, RegExpTree, child, :, children]
[., length, (, ), ==, len, +, 1, ), {, sb, ., setLength, (, len, ), ;, }, for, (]
[), {, sb, ., setLength, (, len, ), ;, }, for, (, RegExpTree, child, :, children, (, ), ), {]
[+, 1, ), {, sb, ., setLength, (, len, ), ;, }, for, (, RegExpTree, child, :, children, (, )]
[), {, sb, ., setLength, (, len, ), ;, }, for, (, RegExpTree, child, :, children, (, ), ), {]
[;, }, for, (, RegExpTree, child, :, children, (, ), ), {, sb, ., append, (, ' ', ), ;, child]
[., setLength, (, len, ), ;, }, for, (, RegExpTree, child, :, children, (, ), ), {, sb, ., append]
[), ;, }, for, (, RegExpTree, child, :, children, (, ), ), {, sb, ., append, (, ' ', ), ;]
[), {, sb, ., append, (, ' ', ), ;, child, ., appendDebugString, (, sb, ), ;, }, sb, ., append]
[;, child, ., appendDebugString, (, sb, ), ;, }, sb, ., append, (, ')', ), ;, }, @, Override, public]
[., append, (, ' ', ), ;, child, ., appendDebugString, (, sb, ), ;, }, sb, ., append, (, ')', )]
[), ;, child, ., appendDebugString, (, sb, ), ;, }, sb, ., append, (, ')', ), ;, }, @, Override]
[;, }, sb, ., append, (, ')', ), ;, }, @, Override, public, abstract, boolean, equals, (, Object, o, )]
[., appendDebugString, (, sb, ), ;, }, sb, ., append, (, ')', ), ;, }, @, Override, public, abstract, boolean]
[), ;, }, sb, ., append, (, ')', ), ;, }, @, Override, public, abstract, boolean, equals, (, Object, o]
[;, }, @, Override, public, abstract, boolean, equals, (, Object, o, ), ;, @, Override, public, abstract, int, hashCode, (]
[., append, (, ')', ), ;, }, @, Override, public, abstract, boolean, equals, (, Object, o, ), ;, @, Override]
[), ;, }, @, Override, public, abstract, boolean, equals, (, Object, o, ), ;, @, Override, public, abstract, int, hashCode]
[;, final, int, limit, =, pattern, ., length, (, ), ;, RegExpTree, parseTopLevel, (, ), {, this, ., pos, =]
[;, RegExpTree, parseTopLevel, (, ), {, this, ., pos, =, 0, ;, RegExpTree, out, =, parse, (, ), ;, if]
[., length, (, ), ;, RegExpTree, parseTopLevel, (, ), {, this, ., pos, =, 0, ;, RegExpTree, out, =, parse]
[=, 0, ;, RegExpTree, out, =, parse, (, ), ;, if, (, pos, <, limit, ), {, throw, new, IllegalArgumentException]
[., pos, =, 0, ;, RegExpTree, out, =, parse, (, ), ;, if, (, pos, <, limit, ), {, throw]
[;, RegExpTree, out, =, parse, (, ), ;, if, (, pos, <, limit, ), {, throw, new, IllegalArgumentException, (, pattern]
[;, if, (, pos, <, limit, ), {, throw, new, IllegalArgumentException, (, pattern, ., substring, (, pos, ), ), ;]
[), {, throw, new, IllegalArgumentException, (, pattern, ., substring, (, pos, ), ), ;, }, return, out, ;, }, RegExpTree]
[<, limit, ), {, throw, new, IllegalArgumentException, (, pattern, ., substring, (, pos, ), ), ;, }, return, out, ;]
[), {, throw, new, IllegalArgumentException, (, pattern, ., substring, (, pos, ), ), ;, }, return, out, ;, }, RegExpTree]
[;, }, return, out, ;, }, RegExpTree, parse, (, ), {, ImmutableList, ., Builder, <, RegExpTree, >, alternatives, =, null]
[), ;, }, return, out, ;, }, RegExpTree, parse, (, ), {, ImmutableList, ., Builder, <, RegExpTree, >, alternatives, =]
[., substring, (, pos, ), ), ;, }, return, out, ;, }, RegExpTree, parse, (, ), {, ImmutableList, ., Builder]
[), ), ;, }, return, out, ;, }, RegExpTree, parse, (, ), {, ImmutableList, ., Builder, <, RegExpTree, >, alternatives]
[;, }, RegExpTree, parse, (, ), {, ImmutableList, ., Builder, <, RegExpTree, >, alternatives, =, null, ;, RegExpTree, preceder, =]
[;, RegExpTree, preceder, =, null, ;, topLoop, :, while, (, pos, <, limit, ), {, char, ch, =, pattern, .]
[;, topLoop, :, while, (, pos, <, limit, ), {, char, ch, =, pattern, ., charAt, (, pos, ), ;]
[), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, RegExpTree, atom, ;, switch, (, ch, ), {]
[<, limit, ), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, RegExpTree, atom, ;, switch, (, ch]
[), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, RegExpTree, atom, ;, switch, (, ch, ), {]
[;, RegExpTree, atom, ;, switch, (, ch, ), {, case, '[', :, atom, =, parseCharset, (, ), ;, break, ;]
[., charAt, (, pos, ), ;, RegExpTree, atom, ;, switch, (, ch, ), {, case, '[', :, atom, =, parseCharset]
[), ;, RegExpTree, atom, ;, switch, (, ch, ), {, case, '[', :, atom, =, parseCharset, (, ), ;, break]
[), {, case, '[', :, atom, =, parseCharset, (, ), ;, break, ;, case, '(', :, atom, =, parseParenthetical, (]
[:, atom, =, parseCharset, (, ), ;, break, ;, case, '(', :, atom, =, parseParenthetical, (, ), ;, break, ;]
[=, parseCharset, (, ), ;, break, ;, case, '(', :, atom, =, parseParenthetical, (, ), ;, break, ;, case, ')']
[;, break, ;, case, '(', :, atom, =, parseParenthetical, (, ), ;, break, ;, case, ')', :, break, topLoop, ;]
[:, atom, =, parseParenthetical, (, ), ;, break, ;, case, ')', :, break, topLoop, ;, case, '\\', :, atom, =]
[=, parseParenthetical, (, ), ;, break, ;, case, ')', :, break, topLoop, ;, case, '\\', :, atom, =, parseEscape, (]
[;, break, ;, case, ')', :, break, topLoop, ;, case, '\\', :, atom, =, parseEscape, (, ), ;, break, ;]
[:, break, topLoop, ;, case, '\\', :, atom, =, parseEscape, (, ), ;, break, ;, case, '^', :, case, '$']
[:, atom, =, parseEscape, (, ), ;, break, ;, case, '^', :, case, '$', :, atom, =, new, Anchor, (]
[=, parseEscape, (, ), ;, break, ;, case, '^', :, case, '$', :, atom, =, new, Anchor, (, ch, )]
[;, break, ;, case, '^', :, case, '$', :, atom, =, new, Anchor, (, ch, ), ;, ++, pos, ;]
[:, case, '$', :, atom, =, new, Anchor, (, ch, ), ;, ++, pos, ;, break, ;, case, '.', :]
[:, atom, =, new, Anchor, (, ch, ), ;, ++, pos, ;, break, ;, case, '.', :, atom, =, DOT_CHARSET]
[=, new, Anchor, (, ch, ), ;, ++, pos, ;, break, ;, case, '.', :, atom, =, DOT_CHARSET, ;, ++]
[;, ++, pos, ;, break, ;, case, '.', :, atom, =, DOT_CHARSET, ;, ++, pos, ;, break, ;, case, '|']
[), ;, ++, pos, ;, break, ;, case, '.', :, atom, =, DOT_CHARSET, ;, ++, pos, ;, break, ;, case]
[;, break, ;, case, '.', :, atom, =, DOT_CHARSET, ;, ++, pos, ;, break, ;, case, '|', :, atom, =]
[;, break, ;, case, '.', :, atom, =, DOT_CHARSET, ;, ++, pos, ;, break, ;, case, '|', :, atom, =]
[:, atom, =, DOT_CHARSET, ;, ++, pos, ;, break, ;, case, '|', :, atom, =, Empty, ., INSTANCE, ;, break]
[=, DOT_CHARSET, ;, ++, pos, ;, break, ;, case, '|', :, atom, =, Empty, ., INSTANCE, ;, break, ;, default]
[;, ++, pos, ;, break, ;, case, '|', :, atom, =, Empty, ., INSTANCE, ;, break, ;, default, :, int]
[;, break, ;, case, '|', :, atom, =, Empty, ., INSTANCE, ;, break, ;, default, :, int, start, =, pos]
[;, break, ;, case, '|', :, atom, =, Empty, ., INSTANCE, ;, break, ;, default, :, int, start, =, pos]
[:, atom, =, Empty, ., INSTANCE, ;, break, ;, default, :, int, start, =, pos, ;, int, end, =, pos]
[=, Empty, ., INSTANCE, ;, break, ;, default, :, int, start, =, pos, ;, int, end, =, pos, +, 1]
[;, break, ;, default, :, int, start, =, pos, ;, int, end, =, pos, +, 1, ;, charsLoop, :, while]
[., INSTANCE, ;, break, ;, default, :, int, start, =, pos, ;, int, end, =, pos, +, 1, ;, charsLoop]
[;, int, end, =, pos, +, 1, ;, charsLoop, :, while, (, end, <, limit, ), {, switch, (, pattern]
[;, charsLoop, :, while, (, end, <, limit, ), {, switch, (, pattern, ., charAt, (, end, ), ), {]
[+, 1, ;, charsLoop, :, while, (, end, <, limit, ), {, switch, (, pattern, ., charAt, (, end, )]
[;, charsLoop, :, while, (, end, <, limit, ), {, switch, (, pattern, ., charAt, (, end, ), ), {]
[), {, switch, (, pattern, ., charAt, (, end, ), ), {, case, '[', :, case, '(', :, case, ')']
[<, limit, ), {, switch, (, pattern, ., charAt, (, end, ), ), {, case, '[', :, case, '(', :]
[), {, switch, (, pattern, ., charAt, (, end, ), ), {, case, '[', :, case, '(', :, case, ')']
[), {, case, '[', :, case, '(', :, case, ')', :, case, '\\', :, case, '^', :, case, '$', :]
[., charAt, (, end, ), ), {, case, '[', :, case, '(', :, case, ')', :, case, '\\', :, case]
[), ), {, case, '[', :, case, '(', :, case, ')', :, case, '\\', :, case, '^', :, case, '$']
[:, case, '(', :, case, ')', :, case, '\\', :, case, '^', :, case, '$', :, case, '|', :, case]
[:, case, ')', :, case, '\\', :, case, '^', :, case, '$', :, case, '|', :, case, '.', :, case]
[:, case, '\\', :, case, '^', :, case, '$', :, case, '|', :, case, '.', :, case, '*', :, case]
[:, case, '^', :, case, '$', :, case, '|', :, case, '.', :, case, '*', :, case, '+', :, case]
[:, case, '$', :, case, '|', :, case, '.', :, case, '*', :, case, '+', :, case, '?', :, case]
[:, case, '|', :, case, '.', :, case, '*', :, case, '+', :, case, '?', :, case, '{', :, break]
[:, case, '.', :, case, '*', :, case, '+', :, case, '?', :, case, '{', :, break, charsLoop, ;, default]
[:, case, '*', :, case, '+', :, case, '?', :, case, '{', :, break, charsLoop, ;, default, :, if, (]
[:, case, '+', :, case, '?', :, case, '{', :, break, charsLoop, ;, default, :, if, (, end, +, 1]
[:, case, '?', :, case, '{', :, break, charsLoop, ;, default, :, if, (, end, +, 1, >=, limit, ||]
[:, case, '{', :, break, charsLoop, ;, default, :, if, (, end, +, 1, >=, limit, ||, !, isRepetitionStart, (]
[:, break, charsLoop, ;, default, :, if, (, end, +, 1, >=, limit, ||, !, isRepetitionStart, (, pattern, ., charAt]
[), {, ++, end, ;, }, else, {, break, charsLoop, ;, }, }, }, atom, =, new, Text, (, pattern]
[||, !, isRepetitionStart, (, pattern, ., charAt, (, end, +, 1, ), ), ), {, ++, end, ;, }, else]
[>=, limit, ||, !, isRepetitionStart, (, pattern, ., charAt, (, end, +, 1, ), ), ), {, ++, end, ;]
[+, 1, >=, limit, ||, !, isRepetitionStart, (, pattern, ., charAt, (, end, +, 1, ), ), ), {, ++]
[>=, limit, ||, !, isRepetitionStart, (, pattern, ., charAt, (, end, +, 1, ), ), ), {, ++, end, ;]
[||, !, isRepetitionStart, (, pattern, ., charAt, (, end, +, 1, ), ), ), {, ++, end, ;, }, else]
[), {, ++, end, ;, }, else, {, break, charsLoop, ;, }, }, }, atom, =, new, Text, (, pattern]
[), {, ++, end, ;, }, else, {, break, charsLoop, ;, }, }, }, atom, =, new, Text, (, pattern]
[), ), {, ++, end, ;, }, else, {, break, charsLoop, ;, }, }, }, atom, =, new, Text, (]
[., charAt, (, end, +, 1, ), ), ), {, ++, end, ;, }, else, {, break, charsLoop, ;, }]
[), ), ), {, ++, end, ;, }, else, {, break, charsLoop, ;, }, }, }, atom, =, new, Text]
[+, 1, ), ), ), {, ++, end, ;, }, else, {, break, charsLoop, ;, }, }, }, atom, =]
[), ), ), {, ++, end, ;, }, else, {, break, charsLoop, ;, }, }, }, atom, =, new, Text]
[;, }, else, {, break, charsLoop, ;, }, }, }, atom, =, new, Text, (, pattern, ., substring, (, start]
[;, }, else, {, break, charsLoop, ;, }, }, }, atom, =, new, Text, (, pattern, ., substring, (, start]
[=, new, Text, (, pattern, ., substring, (, start, ,, end, ), ), ;, pos, =, end, ;, break, ;]
[;, pos, =, end, ;, break, ;, }, if, (, pos, <, limit, &&, isRepetitionStart, (, pattern, ., charAt, (]
[), ;, pos, =, end, ;, break, ;, }, if, (, pos, <, limit, &&, isRepetitionStart, (, pattern, ., charAt]
[., substring, (, start, ,, end, ), ), ;, pos, =, end, ;, break, ;, }, if, (, pos, <]
[,, end, ), ), ;, pos, =, end, ;, break, ;, }, if, (, pos, <, limit, &&, isRepetitionStart, (]
[), ), ;, pos, =, end, ;, break, ;, }, if, (, pos, <, limit, &&, isRepetitionStart, (, pattern, .]
[=, end, ;, break, ;, }, if, (, pos, <, limit, &&, isRepetitionStart, (, pattern, ., charAt, (, pos, )]
[;, break, ;, }, if, (, pos, <, limit, &&, isRepetitionStart, (, pattern, ., charAt, (, pos, ), ), )]
[), {, atom, =, parseRepetition, (, atom, ), ;, }, if, (, preceder, ==, null, ), {, preceder, =, atom]
[&&, isRepetitionStart, (, pattern, ., charAt, (, pos, ), ), ), {, atom, =, parseRepetition, (, atom, ), ;, }]
[<, limit, &&, isRepetitionStart, (, pattern, ., charAt, (, pos, ), ), ), {, atom, =, parseRepetition, (, atom, )]
[&&, isRepetitionStart, (, pattern, ., charAt, (, pos, ), ), ), {, atom, =, parseRepetition, (, atom, ), ;, }]
[), {, atom, =, parseRepetition, (, atom, ), ;, }, if, (, preceder, ==, null, ), {, preceder, =, atom]
[), ), {, atom, =, parseRepetition, (, atom, ), ;, }, if, (, preceder, ==, null, ), {, preceder, =]
[., charAt, (, pos, ), ), ), {, atom, =, parseRepetition, (, atom, ), ;, }, if, (, preceder, ==]
[), ), ), {, atom, =, parseRepetition, (, atom, ), ;, }, if, (, preceder, ==, null, ), {, preceder]
[=, parseRepetition, (, atom, ), ;, }, if, (, preceder, ==, null, ), {, preceder, =, atom, ;, }, else]
[;, }, if, (, preceder, ==, null, ), {, preceder, =, atom, ;, }, else, {, preceder, =, new, Concatenation]
[), ;, }, if, (, preceder, ==, null, ), {, preceder, =, atom, ;, }, else, {, preceder, =, new]
[), {, preceder, =, atom, ;, }, else, {, preceder, =, new, Concatenation, (, preceder, ,, atom, ), ;, }]
[==, null, ), {, preceder, =, atom, ;, }, else, {, preceder, =, new, Concatenation, (, preceder, ,, atom, )]
[), {, preceder, =, atom, ;, }, else, {, preceder, =, new, Concatenation, (, preceder, ,, atom, ), ;, }]
[=, atom, ;, }, else, {, preceder, =, new, Concatenation, (, preceder, ,, atom, ), ;, }, if, (, pos]
[;, }, else, {, preceder, =, new, Concatenation, (, preceder, ,, atom, ), ;, }, if, (, pos, <, limit]
[=, new, Concatenation, (, preceder, ,, atom, ), ;, }, if, (, pos, <, limit, &&, pattern, ., charAt, (]
[;, }, if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '|', ), {, if, (]
[,, atom, ), ;, }, if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '|', )]
[), ;, }, if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '|', ), {, if]
[), {, if, (, alternatives, ==, null, ), {, alternatives, =, ImmutableList, ., builder, (, ), ;, }, alternatives, .]
[&&, pattern, ., charAt, (, pos, ), ==, '|', ), {, if, (, alternatives, ==, null, ), {, alternatives, =]
[<, limit, &&, pattern, ., charAt, (, pos, ), ==, '|', ), {, if, (, alternatives, ==, null, ), {]
[&&, pattern, ., charAt, (, pos, ), ==, '|', ), {, if, (, alternatives, ==, null, ), {, alternatives, =]
[), {, if, (, alternatives, ==, null, ), {, alternatives, =, ImmutableList, ., builder, (, ), ;, }, alternatives, .]
[==, '|', ), {, if, (, alternatives, ==, null, ), {, alternatives, =, ImmutableList, ., builder, (, ), ;, }]
[., charAt, (, pos, ), ==, '|', ), {, if, (, alternatives, ==, null, ), {, alternatives, =, ImmutableList, .]
[), ==, '|', ), {, if, (, alternatives, ==, null, ), {, alternatives, =, ImmutableList, ., builder, (, ), ;]
[), {, if, (, alternatives, ==, null, ), {, alternatives, =, ImmutableList, ., builder, (, ), ;, }, alternatives, .]
[), {, alternatives, =, ImmutableList, ., builder, (, ), ;, }, alternatives, ., add, (, preceder, ), ;, preceder, =]
[==, null, ), {, alternatives, =, ImmutableList, ., builder, (, ), ;, }, alternatives, ., add, (, preceder, ), ;]
[), {, alternatives, =, ImmutableList, ., builder, (, ), ;, }, alternatives, ., add, (, preceder, ), ;, preceder, =]
[=, ImmutableList, ., builder, (, ), ;, }, alternatives, ., add, (, preceder, ), ;, preceder, =, null, ;, ++]
[;, }, alternatives, ., add, (, preceder, ), ;, preceder, =, null, ;, ++, pos, ;, }, }, if, (]
[., builder, (, ), ;, }, alternatives, ., add, (, preceder, ), ;, preceder, =, null, ;, ++, pos, ;]
[;, preceder, =, null, ;, ++, pos, ;, }, }, if, (, preceder, ==, null, ), {, preceder, =, Empty]
[., add, (, preceder, ), ;, preceder, =, null, ;, ++, pos, ;, }, }, if, (, preceder, ==, null]
[), ;, preceder, =, null, ;, ++, pos, ;, }, }, if, (, preceder, ==, null, ), {, preceder, =]
[=, null, ;, ++, pos, ;, }, }, if, (, preceder, ==, null, ), {, preceder, =, Empty, ., INSTANCE]
[;, ++, pos, ;, }, }, if, (, preceder, ==, null, ), {, preceder, =, Empty, ., INSTANCE, ;, }]
[;, }, }, if, (, preceder, ==, null, ), {, preceder, =, Empty, ., INSTANCE, ;, }, if, (, alternatives]
[;, }, }, if, (, preceder, ==, null, ), {, preceder, =, Empty, ., INSTANCE, ;, }, if, (, alternatives]
[), {, preceder, =, Empty, ., INSTANCE, ;, }, if, (, alternatives, !=, null, ), {, alternatives, ., add, (]
[==, null, ), {, preceder, =, Empty, ., INSTANCE, ;, }, if, (, alternatives, !=, null, ), {, alternatives, .]
[), {, preceder, =, Empty, ., INSTANCE, ;, }, if, (, alternatives, !=, null, ), {, alternatives, ., add, (]
[=, Empty, ., INSTANCE, ;, }, if, (, alternatives, !=, null, ), {, alternatives, ., add, (, preceder, ), ;]
[;, }, if, (, alternatives, !=, null, ), {, alternatives, ., add, (, preceder, ), ;, return, new, Alternation, (]
[., INSTANCE, ;, }, if, (, alternatives, !=, null, ), {, alternatives, ., add, (, preceder, ), ;, return, new]
[), {, alternatives, ., add, (, preceder, ), ;, return, new, Alternation, (, alternatives, ., build, (, ), ), ;]
[!=, null, ), {, alternatives, ., add, (, preceder, ), ;, return, new, Alternation, (, alternatives, ., build, (, )]
[), {, alternatives, ., add, (, preceder, ), ;, return, new, Alternation, (, alternatives, ., build, (, ), ), ;]
[;, return, new, Alternation, (, alternatives, ., build, (, ), ), ;, }, else, {, return, preceder, ;, }, }]
[., add, (, preceder, ), ;, return, new, Alternation, (, alternatives, ., build, (, ), ), ;, }, else, {]
[), ;, return, new, Alternation, (, alternatives, ., build, (, ), ), ;, }, else, {, return, preceder, ;, }]
[;, }, else, {, return, preceder, ;, }, }, private, RegExpTree, parseParenthetical, (, ), {, Preconditions, ., checkState, (, pattern]
[), ;, }, else, {, return, preceder, ;, }, }, private, RegExpTree, parseParenthetical, (, ), {, Preconditions, ., checkState, (]
[., build, (, ), ), ;, }, else, {, return, preceder, ;, }, }, private, RegExpTree, parseParenthetical, (, ), {]
[;, }, }, private, RegExpTree, parseParenthetical, (, ), {, Preconditions, ., checkState, (, pattern, ., charAt, (, pos, ), ==]
[;, int, start, =, pos, ;, ++, pos, ;, boolean, capturing, =, true, ;, int, type, =, 0, ;, if]
[., checkState, (, pattern, ., charAt, (, pos, ), ==, '(', ), ;, int, start, =, pos, ;, ++, pos]
[), ;, int, start, =, pos, ;, ++, pos, ;, boolean, capturing, =, true, ;, int, type, =, 0, ;]
[==, '(', ), ;, int, start, =, pos, ;, ++, pos, ;, boolean, capturing, =, true, ;, int, type, =]
[., charAt, (, pos, ), ==, '(', ), ;, int, start, =, pos, ;, ++, pos, ;, boolean, capturing, =]
[), ==, '(', ), ;, int, start, =, pos, ;, ++, pos, ;, boolean, capturing, =, true, ;, int, type]
[), ;, int, start, =, pos, ;, ++, pos, ;, boolean, capturing, =, true, ;, int, type, =, 0, ;]
[;, ++, pos, ;, boolean, capturing, =, true, ;, int, type, =, 0, ;, if, (, pos, <, limit, &&]
[;, boolean, capturing, =, true, ;, int, type, =, 0, ;, if, (, pos, <, limit, &&, pattern, ., charAt]
[;, boolean, capturing, =, true, ;, int, type, =, 0, ;, if, (, pos, <, limit, &&, pattern, ., charAt]
[;, int, type, =, 0, ;, if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '?']
[;, if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '?', ), {, if, (, pos]
[), {, if, (, pos, +, 1, <, limit, ), {, capturing, =, false, ;, char, ch, =, pattern, .]
[&&, pattern, ., charAt, (, pos, ), ==, '?', ), {, if, (, pos, +, 1, <, limit, ), {]
[<, limit, &&, pattern, ., charAt, (, pos, ), ==, '?', ), {, if, (, pos, +, 1, <, limit]
[&&, pattern, ., charAt, (, pos, ), ==, '?', ), {, if, (, pos, +, 1, <, limit, ), {]
[), {, if, (, pos, +, 1, <, limit, ), {, capturing, =, false, ;, char, ch, =, pattern, .]
[==, '?', ), {, if, (, pos, +, 1, <, limit, ), {, capturing, =, false, ;, char, ch, =]
[., charAt, (, pos, ), ==, '?', ), {, if, (, pos, +, 1, <, limit, ), {, capturing, =]
[), ==, '?', ), {, if, (, pos, +, 1, <, limit, ), {, capturing, =, false, ;, char, ch]
[), {, if, (, pos, +, 1, <, limit, ), {, capturing, =, false, ;, char, ch, =, pattern, .]
[), {, capturing, =, false, ;, char, ch, =, pattern, ., charAt, (, pos, +, 1, ), ;, switch, (]
[<, limit, ), {, capturing, =, false, ;, char, ch, =, pattern, ., charAt, (, pos, +, 1, ), ;]
[+, 1, <, limit, ), {, capturing, =, false, ;, char, ch, =, pattern, ., charAt, (, pos, +, 1]
[<, limit, ), {, capturing, =, false, ;, char, ch, =, pattern, ., charAt, (, pos, +, 1, ), ;]
[), {, capturing, =, false, ;, char, ch, =, pattern, ., charAt, (, pos, +, 1, ), ;, switch, (]
[=, false, ;, char, ch, =, pattern, ., charAt, (, pos, +, 1, ), ;, switch, (, ch, ), {]
[;, char, ch, =, pattern, ., charAt, (, pos, +, 1, ), ;, switch, (, ch, ), {, case, ':']
[;, switch, (, ch, ), {, case, ':', :, pos, +=, 2, ;, break, ;, case, '!', :, case, '=']
[., charAt, (, pos, +, 1, ), ;, switch, (, ch, ), {, case, ':', :, pos, +=, 2, ;]
[), ;, switch, (, ch, ), {, case, ':', :, pos, +=, 2, ;, break, ;, case, '!', :, case]
[+, 1, ), ;, switch, (, ch, ), {, case, ':', :, pos, +=, 2, ;, break, ;, case, '!']
[), ;, switch, (, ch, ), {, case, ':', :, pos, +=, 2, ;, break, ;, case, '!', :, case]
[), {, case, ':', :, pos, +=, 2, ;, break, ;, case, '!', :, case, '=', :, pos, +=, 2]
[:, pos, +=, 2, ;, break, ;, case, '!', :, case, '=', :, pos, +=, 2, ;, type, =, ch]
[+=, 2, ;, break, ;, case, '!', :, case, '=', :, pos, +=, 2, ;, type, =, ch, ;, break]
[;, break, ;, case, '!', :, case, '=', :, pos, +=, 2, ;, type, =, ch, ;, break, ;, default]
[:, case, '=', :, pos, +=, 2, ;, type, =, ch, ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[:, pos, +=, 2, ;, type, =, ch, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Malformed parenthetical: ", +, pattern]
[+=, 2, ;, type, =, ch, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Malformed parenthetical: ", +, pattern, ., substring]
[;, type, =, ch, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Malformed parenthetical: ", +, pattern, ., substring, (, start]
[=, ch, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Malformed parenthetical: ", +, pattern, ., substring, (, start, ), )]
[;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Malformed parenthetical: ", +, pattern, ., substring, (, start, ), ), ;, }]
[;, }, }, }, RegExpTree, body, =, parse, (, ), ;, if, (, pos, <, limit, &&, pattern, ., charAt]
[), ;, }, }, }, RegExpTree, body, =, parse, (, ), ;, if, (, pos, <, limit, &&, pattern, .]
[+, pattern, ., substring, (, start, ), ), ;, }, }, }, RegExpTree, body, =, parse, (, ), ;, if]
[), ;, }, }, }, RegExpTree, body, =, parse, (, ), ;, if, (, pos, <, limit, &&, pattern, .]
[., substring, (, start, ), ), ;, }, }, }, RegExpTree, body, =, parse, (, ), ;, if, (, pos]
[), ), ;, }, }, }, RegExpTree, body, =, parse, (, ), ;, if, (, pos, <, limit, &&, pattern]
[;, if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, ')', ), {, ++, pos, ;]
[), {, ++, pos, ;, }, else, {, throw, new, IllegalArgumentException, (, "Unclosed parenthetical group: ", +, pattern, ., substring, (, start, )]
[&&, pattern, ., charAt, (, pos, ), ==, ')', ), {, ++, pos, ;, }, else, {, throw, new, IllegalArgumentException]
[<, limit, &&, pattern, ., charAt, (, pos, ), ==, ')', ), {, ++, pos, ;, }, else, {, throw]
[&&, pattern, ., charAt, (, pos, ), ==, ')', ), {, ++, pos, ;, }, else, {, throw, new, IllegalArgumentException]
[), {, ++, pos, ;, }, else, {, throw, new, IllegalArgumentException, (, "Unclosed parenthetical group: ", +, pattern, ., substring, (, start, )]
[==, ')', ), {, ++, pos, ;, }, else, {, throw, new, IllegalArgumentException, (, "Unclosed parenthetical group: ", +, pattern, ., substring, (]
[., charAt, (, pos, ), ==, ')', ), {, ++, pos, ;, }, else, {, throw, new, IllegalArgumentException, (, "Unclosed parenthetical group: "]
[), ==, ')', ), {, ++, pos, ;, }, else, {, throw, new, IllegalArgumentException, (, "Unclosed parenthetical group: ", +, pattern, ., substring]
[), {, ++, pos, ;, }, else, {, throw, new, IllegalArgumentException, (, "Unclosed parenthetical group: ", +, pattern, ., substring, (, start, )]
[;, }, else, {, throw, new, IllegalArgumentException, (, "Unclosed parenthetical group: ", +, pattern, ., substring, (, start, ), ), ;, }, if]
[;, }, else, {, throw, new, IllegalArgumentException, (, "Unclosed parenthetical group: ", +, pattern, ., substring, (, start, ), ), ;, }, if]
[;, }, if, (, capturing, ), {, ++, numCapturingGroups, ;, return, new, CapturingGroup, (, body, ), ;, }, else, if]
[), ;, }, if, (, capturing, ), {, ++, numCapturingGroups, ;, return, new, CapturingGroup, (, body, ), ;, }, else]
[+, pattern, ., substring, (, start, ), ), ;, }, if, (, capturing, ), {, ++, numCapturingGroups, ;, return, new]
[), ;, }, if, (, capturing, ), {, ++, numCapturingGroups, ;, return, new, CapturingGroup, (, body, ), ;, }, else]
[., substring, (, start, ), ), ;, }, if, (, capturing, ), {, ++, numCapturingGroups, ;, return, new, CapturingGroup, (]
[), ), ;, }, if, (, capturing, ), {, ++, numCapturingGroups, ;, return, new, CapturingGroup, (, body, ), ;, }]
[), {, ++, numCapturingGroups, ;, return, new, CapturingGroup, (, body, ), ;, }, else, if, (, type, !=, 0, )]
[;, return, new, CapturingGroup, (, body, ), ;, }, else, if, (, type, !=, 0, ), {, return, new, LookaheadAssertion]
[;, return, new, CapturingGroup, (, body, ), ;, }, else, if, (, type, !=, 0, ), {, return, new, LookaheadAssertion]
[;, }, else, if, (, type, !=, 0, ), {, return, new, LookaheadAssertion, (, body, ,, type, ==, '=', )]
[), ;, }, else, if, (, type, !=, 0, ), {, return, new, LookaheadAssertion, (, body, ,, type, ==, '=']
[), {, return, new, LookaheadAssertion, (, body, ,, type, ==, '=', ), ;, }, else, {, return, body, ;, }]
[!=, 0, ), {, return, new, LookaheadAssertion, (, body, ,, type, ==, '=', ), ;, }, else, {, return, body]
[), {, return, new, LookaheadAssertion, (, body, ,, type, ==, '=', ), ;, }, else, {, return, body, ;, }]
[;, }, else, {, return, body, ;, }, }, private, RegExpTree, parseCharset, (, ), {, Preconditions, ., checkState, (, pattern]
[,, type, ==, '=', ), ;, }, else, {, return, body, ;, }, }, private, RegExpTree, parseCharset, (, ), {]
[), ;, }, else, {, return, body, ;, }, }, private, RegExpTree, parseCharset, (, ), {, Preconditions, ., checkState, (]
[==, '=', ), ;, }, else, {, return, body, ;, }, }, private, RegExpTree, parseCharset, (, ), {, Preconditions, .]
[), ;, }, else, {, return, body, ;, }, }, private, RegExpTree, parseCharset, (, ), {, Preconditions, ., checkState, (]
[;, }, }, private, RegExpTree, parseCharset, (, ), {, Preconditions, ., checkState, (, pattern, ., charAt, (, pos, ), ==]
[;, ++, pos, ;, boolean, isCaseInsensitive, =, flags, ., indexOf, (, 'i', ), >=, 0, ;, boolean, inverse, =, pos]
[., checkState, (, pattern, ., charAt, (, pos, ), ==, '[', ), ;, ++, pos, ;, boolean, isCaseInsensitive, =, flags]
[), ;, ++, pos, ;, boolean, isCaseInsensitive, =, flags, ., indexOf, (, 'i', ), >=, 0, ;, boolean, inverse, =]
[==, '[', ), ;, ++, pos, ;, boolean, isCaseInsensitive, =, flags, ., indexOf, (, 'i', ), >=, 0, ;, boolean]
[., charAt, (, pos, ), ==, '[', ), ;, ++, pos, ;, boolean, isCaseInsensitive, =, flags, ., indexOf, (, 'i']
[), ==, '[', ), ;, ++, pos, ;, boolean, isCaseInsensitive, =, flags, ., indexOf, (, 'i', ), >=, 0, ;]
[), ;, ++, pos, ;, boolean, isCaseInsensitive, =, flags, ., indexOf, (, 'i', ), >=, 0, ;, boolean, inverse, =]
[;, boolean, isCaseInsensitive, =, flags, ., indexOf, (, 'i', ), >=, 0, ;, boolean, inverse, =, pos, <, limit, &&]
[;, boolean, isCaseInsensitive, =, flags, ., indexOf, (, 'i', ), >=, 0, ;, boolean, inverse, =, pos, <, limit, &&]
[;, boolean, inverse, =, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '^', ;, if, (, inverse]
[>=, 0, ;, boolean, inverse, =, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '^', ;, if]
[., indexOf, (, 'i', ), >=, 0, ;, boolean, inverse, =, pos, <, limit, &&, pattern, ., charAt, (, pos]
[), >=, 0, ;, boolean, inverse, =, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '^', ;]
[;, boolean, inverse, =, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '^', ;, if, (, inverse]
[;, if, (, inverse, ), {, ++, pos, ;, }, CharRanges, ranges, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =]
[&&, pattern, ., charAt, (, pos, ), ==, '^', ;, if, (, inverse, ), {, ++, pos, ;, }, CharRanges]
[<, limit, &&, pattern, ., charAt, (, pos, ), ==, '^', ;, if, (, inverse, ), {, ++, pos, ;]
[&&, pattern, ., charAt, (, pos, ), ==, '^', ;, if, (, inverse, ), {, ++, pos, ;, }, CharRanges]
[;, if, (, inverse, ), {, ++, pos, ;, }, CharRanges, ranges, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =]
[==, '^', ;, if, (, inverse, ), {, ++, pos, ;, }, CharRanges, ranges, =, CharRanges, ., EMPTY, ;, CharRanges]
[., charAt, (, pos, ), ==, '^', ;, if, (, inverse, ), {, ++, pos, ;, }, CharRanges, ranges, =]
[), ==, '^', ;, if, (, inverse, ), {, ++, pos, ;, }, CharRanges, ranges, =, CharRanges, ., EMPTY, ;]
[;, if, (, inverse, ), {, ++, pos, ;, }, CharRanges, ranges, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =]
[), {, ++, pos, ;, }, CharRanges, ranges, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;]
[;, }, CharRanges, ranges, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;, while, (, pos, <]
[;, }, CharRanges, ranges, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;, while, (, pos, <]
[;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;, while, (, pos, <, limit, &&, pattern, ., charAt, (, pos, )]
[., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;, while, (, pos, <, limit, &&, pattern, ., charAt, (]
[;, while, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), !=, ']', ), {, char, ch, =]
[., EMPTY, ;, while, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), !=, ']', ), {, char]
[), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, char, start, ;, if, (, ch, ==, '\\']
[&&, pattern, ., charAt, (, pos, ), !=, ']', ), {, char, ch, =, pattern, ., charAt, (, pos, )]
[<, limit, &&, pattern, ., charAt, (, pos, ), !=, ']', ), {, char, ch, =, pattern, ., charAt, (]
[&&, pattern, ., charAt, (, pos, ), !=, ']', ), {, char, ch, =, pattern, ., charAt, (, pos, )]
[), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, char, start, ;, if, (, ch, ==, '\\']
[!=, ']', ), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, char, start, ;, if, (, ch]
[., charAt, (, pos, ), !=, ']', ), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, char]
[), !=, ']', ), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, char, start, ;, if, (]
[), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, char, start, ;, if, (, ch, ==, '\\']
[;, char, start, ;, if, (, ch, ==, '\\', ), {, ++, pos, ;, char, possibleGroupName, =, pattern, ., charAt]
[., charAt, (, pos, ), ;, char, start, ;, if, (, ch, ==, '\\', ), {, ++, pos, ;, char]
[), ;, char, start, ;, if, (, ch, ==, '\\', ), {, ++, pos, ;, char, possibleGroupName, =, pattern, .]
[), {, ++, pos, ;, char, possibleGroupName, =, pattern, ., charAt, (, pos, ), ;, CharRanges, group, =, NAMED_CHAR_GROUPS, .]
[==, '\\', ), {, ++, pos, ;, char, possibleGroupName, =, pattern, ., charAt, (, pos, ), ;, CharRanges, group, =]
[), {, ++, pos, ;, char, possibleGroupName, =, pattern, ., charAt, (, pos, ), ;, CharRanges, group, =, NAMED_CHAR_GROUPS, .]
[;, char, possibleGroupName, =, pattern, ., charAt, (, pos, ), ;, CharRanges, group, =, NAMED_CHAR_GROUPS, ., get, (, possibleGroupName, )]
[;, char, possibleGroupName, =, pattern, ., charAt, (, pos, ), ;, CharRanges, group, =, NAMED_CHAR_GROUPS, ., get, (, possibleGroupName, )]
[;, CharRanges, group, =, NAMED_CHAR_GROUPS, ., get, (, possibleGroupName, ), ;, if, (, group, !=, null, ), {, ++, pos]
[., charAt, (, pos, ), ;, CharRanges, group, =, NAMED_CHAR_GROUPS, ., get, (, possibleGroupName, ), ;, if, (, group, !=]
[), ;, CharRanges, group, =, NAMED_CHAR_GROUPS, ., get, (, possibleGroupName, ), ;, if, (, group, !=, null, ), {, ++]
[;, if, (, group, !=, null, ), {, ++, pos, ;, ranges, =, ranges, ., union, (, group, ), ;]
[., get, (, possibleGroupName, ), ;, if, (, group, !=, null, ), {, ++, pos, ;, ranges, =, ranges, .]
[), ;, if, (, group, !=, null, ), {, ++, pos, ;, ranges, =, ranges, ., union, (, group, )]
[), {, ++, pos, ;, ranges, =, ranges, ., union, (, group, ), ;, continue, ;, }, start, =, parseEscapeChar]
[!=, null, ), {, ++, pos, ;, ranges, =, ranges, ., union, (, group, ), ;, continue, ;, }, start]
[), {, ++, pos, ;, ranges, =, ranges, ., union, (, group, ), ;, continue, ;, }, start, =, parseEscapeChar]
[;, ranges, =, ranges, ., union, (, group, ), ;, continue, ;, }, start, =, parseEscapeChar, (, ), ;, }]
[;, ranges, =, ranges, ., union, (, group, ), ;, continue, ;, }, start, =, parseEscapeChar, (, ), ;, }]
[=, ranges, ., union, (, group, ), ;, continue, ;, }, start, =, parseEscapeChar, (, ), ;, }, else, {]
[;, continue, ;, }, start, =, parseEscapeChar, (, ), ;, }, else, {, start, =, ch, ;, ++, pos, ;]
[., union, (, group, ), ;, continue, ;, }, start, =, parseEscapeChar, (, ), ;, }, else, {, start, =]
[), ;, continue, ;, }, start, =, parseEscapeChar, (, ), ;, }, else, {, start, =, ch, ;, ++, pos]
[=, parseEscapeChar, (, ), ;, }, else, {, start, =, ch, ;, ++, pos, ;, }, char, end, =, start]
[;, }, else, {, start, =, ch, ;, ++, pos, ;, }, char, end, =, start, ;, if, (, pos]
[=, ch, ;, ++, pos, ;, }, char, end, =, start, ;, if, (, pos, +, 1, <, limit, &&]
[;, ++, pos, ;, }, char, end, =, start, ;, if, (, pos, +, 1, <, limit, &&, pattern, .]
[;, }, char, end, =, start, ;, if, (, pos, +, 1, <, limit, &&, pattern, ., charAt, (, pos]
[;, }, char, end, =, start, ;, if, (, pos, +, 1, <, limit, &&, pattern, ., charAt, (, pos]
[;, if, (, pos, +, 1, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '-', &&, pattern, .]
[), {, ++, pos, ;, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==, '\\', )]
[&&, pattern, ., charAt, (, pos, +, 1, ), !=, ']', ), {, ++, pos, ;, ch, =, pattern, .]
[&&, pattern, ., charAt, (, pos, ), ==, '-', &&, pattern, ., charAt, (, pos, +, 1, ), !=, ']']
[<, limit, &&, pattern, ., charAt, (, pos, ), ==, '-', &&, pattern, ., charAt, (, pos, +, 1, )]
[+, 1, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '-', &&, pattern, ., charAt, (, pos, +]
[<, limit, &&, pattern, ., charAt, (, pos, ), ==, '-', &&, pattern, ., charAt, (, pos, +, 1, )]
[&&, pattern, ., charAt, (, pos, ), ==, '-', &&, pattern, ., charAt, (, pos, +, 1, ), !=, ']']
[&&, pattern, ., charAt, (, pos, +, 1, ), !=, ']', ), {, ++, pos, ;, ch, =, pattern, .]
[==, '-', &&, pattern, ., charAt, (, pos, +, 1, ), !=, ']', ), {, ++, pos, ;, ch, =]
[., charAt, (, pos, ), ==, '-', &&, pattern, ., charAt, (, pos, +, 1, ), !=, ']', ), {]
[), ==, '-', &&, pattern, ., charAt, (, pos, +, 1, ), !=, ']', ), {, ++, pos, ;, ch]
[&&, pattern, ., charAt, (, pos, +, 1, ), !=, ']', ), {, ++, pos, ;, ch, =, pattern, .]
[), {, ++, pos, ;, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==, '\\', )]
[!=, ']', ), {, ++, pos, ;, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==]
[., charAt, (, pos, +, 1, ), !=, ']', ), {, ++, pos, ;, ch, =, pattern, ., charAt, (]
[), !=, ']', ), {, ++, pos, ;, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch]
[+, 1, ), !=, ']', ), {, ++, pos, ;, ch, =, pattern, ., charAt, (, pos, ), ;, if]
[), !=, ']', ), {, ++, pos, ;, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch]
[), {, ++, pos, ;, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==, '\\', )]
[;, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==, '\\', ), {, ++, pos, ;]
[;, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==, '\\', ), {, ++, pos, ;]
[=, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==, '\\', ), {, ++, pos, ;, end, =]
[;, if, (, ch, ==, '\\', ), {, ++, pos, ;, end, =, parseEscapeChar, (, ), ;, }, else, {]
[., charAt, (, pos, ), ;, if, (, ch, ==, '\\', ), {, ++, pos, ;, end, =, parseEscapeChar, (]
[), ;, if, (, ch, ==, '\\', ), {, ++, pos, ;, end, =, parseEscapeChar, (, ), ;, }, else]
[), {, ++, pos, ;, end, =, parseEscapeChar, (, ), ;, }, else, {, end, =, ch, ;, ++, pos]
[==, '\\', ), {, ++, pos, ;, end, =, parseEscapeChar, (, ), ;, }, else, {, end, =, ch, ;]
[), {, ++, pos, ;, end, =, parseEscapeChar, (, ), ;, }, else, {, end, =, ch, ;, ++, pos]
[;, end, =, parseEscapeChar, (, ), ;, }, else, {, end, =, ch, ;, ++, pos, ;, }, }, CharRanges]
[;, end, =, parseEscapeChar, (, ), ;, }, else, {, end, =, ch, ;, ++, pos, ;, }, }, CharRanges]
[=, parseEscapeChar, (, ), ;, }, else, {, end, =, ch, ;, ++, pos, ;, }, }, CharRanges, range, =]
[;, }, else, {, end, =, ch, ;, ++, pos, ;, }, }, CharRanges, range, =, CharRanges, ., inclusive, (]
[=, ch, ;, ++, pos, ;, }, }, CharRanges, range, =, CharRanges, ., inclusive, (, start, ,, end, ), ;]
[;, ++, pos, ;, }, }, CharRanges, range, =, CharRanges, ., inclusive, (, start, ,, end, ), ;, ranges, =]
[;, }, }, CharRanges, range, =, CharRanges, ., inclusive, (, start, ,, end, ), ;, ranges, =, ranges, ., union]
[;, }, }, CharRanges, range, =, CharRanges, ., inclusive, (, start, ,, end, ), ;, ranges, =, ranges, ., union]
[;, ranges, =, ranges, ., union, (, range, ), ;, if, (, IE_SPEC_ERRORS, ., contains, (, start, ), &&, IE_SPEC_ERRORS]
[., inclusive, (, start, ,, end, ), ;, ranges, =, ranges, ., union, (, range, ), ;, if, (, IE_SPEC_ERRORS]
[,, end, ), ;, ranges, =, ranges, ., union, (, range, ), ;, if, (, IE_SPEC_ERRORS, ., contains, (, start]
[), ;, ranges, =, ranges, ., union, (, range, ), ;, if, (, IE_SPEC_ERRORS, ., contains, (, start, ), &&]
[=, ranges, ., union, (, range, ), ;, if, (, IE_SPEC_ERRORS, ., contains, (, start, ), &&, IE_SPEC_ERRORS, ., contains]
[;, if, (, IE_SPEC_ERRORS, ., contains, (, start, ), &&, IE_SPEC_ERRORS, ., contains, (, end, ), ), {, ieExplicits, =]
[., union, (, range, ), ;, if, (, IE_SPEC_ERRORS, ., contains, (, start, ), &&, IE_SPEC_ERRORS, ., contains, (, end]
[), ;, if, (, IE_SPEC_ERRORS, ., contains, (, start, ), &&, IE_SPEC_ERRORS, ., contains, (, end, ), ), {, ieExplicits]
[), {, ieExplicits, =, ieExplicits, ., union, (, range, ., intersection, (, IE_SPEC_ERRORS, ), ), ;, }, if, (, isCaseInsensitive]
[&&, IE_SPEC_ERRORS, ., contains, (, end, ), ), {, ieExplicits, =, ieExplicits, ., union, (, range, ., intersection, (, IE_SPEC_ERRORS]
[., contains, (, start, ), &&, IE_SPEC_ERRORS, ., contains, (, end, ), ), {, ieExplicits, =, ieExplicits, ., union, (]
[), &&, IE_SPEC_ERRORS, ., contains, (, end, ), ), {, ieExplicits, =, ieExplicits, ., union, (, range, ., intersection, (]
[), {, ieExplicits, =, ieExplicits, ., union, (, range, ., intersection, (, IE_SPEC_ERRORS, ), ), ;, }, if, (, isCaseInsensitive]
[., contains, (, end, ), ), {, ieExplicits, =, ieExplicits, ., union, (, range, ., intersection, (, IE_SPEC_ERRORS, ), )]
[), ), {, ieExplicits, =, ieExplicits, ., union, (, range, ., intersection, (, IE_SPEC_ERRORS, ), ), ;, }, if, (]
[=, ieExplicits, ., union, (, range, ., intersection, (, IE_SPEC_ERRORS, ), ), ;, }, if, (, isCaseInsensitive, ), {, ranges]
[;, }, if, (, isCaseInsensitive, ), {, ranges, =, CaseCanonicalize, ., expandToAllMatched, (, ranges, ), ;, }, }, ++, pos]
[., union, (, range, ., intersection, (, IE_SPEC_ERRORS, ), ), ;, }, if, (, isCaseInsensitive, ), {, ranges, =, CaseCanonicalize]
[), ;, }, if, (, isCaseInsensitive, ), {, ranges, =, CaseCanonicalize, ., expandToAllMatched, (, ranges, ), ;, }, }, ++]
[., intersection, (, IE_SPEC_ERRORS, ), ), ;, }, if, (, isCaseInsensitive, ), {, ranges, =, CaseCanonicalize, ., expandToAllMatched, (, ranges]
[), ), ;, }, if, (, isCaseInsensitive, ), {, ranges, =, CaseCanonicalize, ., expandToAllMatched, (, ranges, ), ;, }, }]
[), {, ranges, =, CaseCanonicalize, ., expandToAllMatched, (, ranges, ), ;, }, }, ++, pos, ;, if, (, inverse, )]
[=, CaseCanonicalize, ., expandToAllMatched, (, ranges, ), ;, }, }, ++, pos, ;, if, (, inverse, ), {, ranges, =]
[;, }, }, ++, pos, ;, if, (, inverse, ), {, ranges, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges]
[., expandToAllMatched, (, ranges, ), ;, }, }, ++, pos, ;, if, (, inverse, ), {, ranges, =, CharRanges, .]
[), ;, }, }, ++, pos, ;, if, (, inverse, ), {, ranges, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (]
[;, if, (, inverse, ), {, ranges, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, ), ;, }, return, new]
[;, if, (, inverse, ), {, ranges, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, ), ;, }, return, new]
[), {, ranges, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, ), ;, }, return, new, Charset, (, ranges, ,]
[=, CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, ), ;, }, return, new, Charset, (, ranges, ,, ieExplicits, ), ;]
[;, }, return, new, Charset, (, ranges, ,, ieExplicits, ), ;, }, private, char, parseEscapeChar, (, ), {, char, ch]
[., difference, (, ranges, ), ;, }, return, new, Charset, (, ranges, ,, ieExplicits, ), ;, }, private, char, parseEscapeChar]
[., ALL_CODE_UNITS, ., difference, (, ranges, ), ;, }, return, new, Charset, (, ranges, ,, ieExplicits, ), ;, }, private]
[), ;, }, return, new, Charset, (, ranges, ,, ieExplicits, ), ;, }, private, char, parseEscapeChar, (, ), {, char]
[;, }, private, char, parseEscapeChar, (, ), {, char, ch, =, pattern, ., charAt, (, pos, ++, ), ;, switch]
[,, ieExplicits, ), ;, }, private, char, parseEscapeChar, (, ), {, char, ch, =, pattern, ., charAt, (, pos, ++]
[), ;, }, private, char, parseEscapeChar, (, ), {, char, ch, =, pattern, ., charAt, (, pos, ++, ), ;]
[;, switch, (, ch, ), {, case, 'b', :, return, '\b', ;, case, 'f', :, return, '\f', ;, case, 'n']
[., charAt, (, pos, ++, ), ;, switch, (, ch, ), {, case, 'b', :, return, '\b', ;, case, 'f']
[), ;, switch, (, ch, ), {, case, 'b', :, return, '\b', ;, case, 'f', :, return, '\f', ;, case]
[++, ), ;, switch, (, ch, ), {, case, 'b', :, return, '\b', ;, case, 'f', :, return, '\f', ;]
[), {, case, 'b', :, return, '\b', ;, case, 'f', :, return, '\f', ;, case, 'n', :, return, '\n', ;]
[:, return, '\b', ;, case, 'f', :, return, '\f', ;, case, 'n', :, return, '\n', ;, case, 'r', :, return]
[;, case, 'f', :, return, '\f', ;, case, 'n', :, return, '\n', ;, case, 'r', :, return, '\r', ;, case]
[:, return, '\f', ;, case, 'n', :, return, '\n', ;, case, 'r', :, return, '\r', ;, case, 't', :, return]
[;, case, 'n', :, return, '\n', ;, case, 'r', :, return, '\r', ;, case, 't', :, return, '\t', ;, case]
[:, return, '\n', ;, case, 'r', :, return, '\r', ;, case, 't', :, return, '\t', ;, case, 'u', :, return]
[;, case, 'r', :, return, '\r', ;, case, 't', :, return, '\t', ;, case, 'u', :, return, parseHex, (, 4]
[:, return, '\r', ;, case, 't', :, return, '\t', ;, case, 'u', :, return, parseHex, (, 4, ), ;, case]
[;, case, 't', :, return, '\t', ;, case, 'u', :, return, parseHex, (, 4, ), ;, case, 'v', :, return]
[:, return, '\t', ;, case, 'u', :, return, parseHex, (, 4, ), ;, case, 'v', :, return, '\u000b', ;, case]
[;, case, 'u', :, return, parseHex, (, 4, ), ;, case, 'v', :, return, '\u000b', ;, case, 'x', :, return]
[:, return, parseHex, (, 4, ), ;, case, 'v', :, return, '\u000b', ;, case, 'x', :, return, parseHex, (, 2]
[;, case, 'v', :, return, '\u000b', ;, case, 'x', :, return, parseHex, (, 2, ), ;, default, :, if, (]
[), ;, case, 'v', :, return, '\u000b', ;, case, 'x', :, return, parseHex, (, 2, ), ;, default, :, if]
[:, return, '\u000b', ;, case, 'x', :, return, parseHex, (, 2, ), ;, default, :, if, (, '0', <=, ch]
[;, case, 'x', :, return, parseHex, (, 2, ), ;, default, :, if, (, '0', <=, ch, &&, ch, <=]
[:, return, parseHex, (, 2, ), ;, default, :, if, (, '0', <=, ch, &&, ch, <=, '7', ), {]
[;, default, :, if, (, '0', <=, ch, &&, ch, <=, '7', ), {, char, codeUnit, =, (, char, )]
[), ;, default, :, if, (, '0', <=, ch, &&, ch, <=, '7', ), {, char, codeUnit, =, (, char]
[), {, char, codeUnit, =, (, char, ), (, ch, -, '0', ), ;, int, octLimit, =, Math, ., min]
[&&, ch, <=, '7', ), {, char, codeUnit, =, (, char, ), (, ch, -, '0', ), ;, int, octLimit]
[<=, ch, &&, ch, <=, '7', ), {, char, codeUnit, =, (, char, ), (, ch, -, '0', ), ;]
[&&, ch, <=, '7', ), {, char, codeUnit, =, (, char, ), (, ch, -, '0', ), ;, int, octLimit]
[), {, char, codeUnit, =, (, char, ), (, ch, -, '0', ), ;, int, octLimit, =, Math, ., min]
[<=, '7', ), {, char, codeUnit, =, (, char, ), (, ch, -, '0', ), ;, int, octLimit, =, Math]
[), {, char, codeUnit, =, (, char, ), (, ch, -, '0', ), ;, int, octLimit, =, Math, ., min]
[;, int, octLimit, =, Math, ., min, (, limit, ,, pos, +, (, ch, <=, '3', ?, 2, :, 1]
[;, int, octLimit, =, Math, ., min, (, limit, ,, pos, +, (, ch, <=, '3', ?, 2, :, 1]
[), ;, int, octLimit, =, Math, ., min, (, limit, ,, pos, +, (, ch, <=, '3', ?, 2, :]
[-, '0', ), ;, int, octLimit, =, Math, ., min, (, limit, ,, pos, +, (, ch, <=, '3', ?]
[), ;, int, octLimit, =, Math, ., min, (, limit, ,, pos, +, (, ch, <=, '3', ?, 2, :]
[;, while, (, pos, <, octLimit, ), {, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, '0']
[., min, (, limit, ,, pos, +, (, ch, <=, '3', ?, 2, :, 1, ), +, (, ch, ==]
[,, pos, +, (, ch, <=, '3', ?, 2, :, 1, ), +, (, ch, ==, '0', ?, 1, :]
[), ;, while, (, pos, <, octLimit, ), {, ch, =, pattern, ., charAt, (, pos, ), ;, if, (]
[+, (, ch, ==, '0', ?, 1, :, 0, ), ), ;, while, (, pos, <, octLimit, ), {, ch]
[+, (, ch, <=, '3', ?, 2, :, 1, ), +, (, ch, ==, '0', ?, 1, :, 0, )]
[+, (, ch, ==, '0', ?, 1, :, 0, ), ), ;, while, (, pos, <, octLimit, ), {, ch]
[), +, (, ch, ==, '0', ?, 1, :, 0, ), ), ;, while, (, pos, <, octLimit, ), {]
[?, 2, :, 1, ), +, (, ch, ==, '0', ?, 1, :, 0, ), ), ;, while, (, pos]
[<=, '3', ?, 2, :, 1, ), +, (, ch, ==, '0', ?, 1, :, 0, ), ), ;, while]
[?, 2, :, 1, ), +, (, ch, ==, '0', ?, 1, :, 0, ), ), ;, while, (, pos]
[:, 1, ), +, (, ch, ==, '0', ?, 1, :, 0, ), ), ;, while, (, pos, <, octLimit]
[), +, (, ch, ==, '0', ?, 1, :, 0, ), ), ;, while, (, pos, <, octLimit, ), {]
[), ;, while, (, pos, <, octLimit, ), {, ch, =, pattern, ., charAt, (, pos, ), ;, if, (]
[), ), ;, while, (, pos, <, octLimit, ), {, ch, =, pattern, ., charAt, (, pos, ), ;, if]
[?, 1, :, 0, ), ), ;, while, (, pos, <, octLimit, ), {, ch, =, pattern, ., charAt, (]
[==, '0', ?, 1, :, 0, ), ), ;, while, (, pos, <, octLimit, ), {, ch, =, pattern, .]
[?, 1, :, 0, ), ), ;, while, (, pos, <, octLimit, ), {, ch, =, pattern, ., charAt, (]
[:, 0, ), ), ;, while, (, pos, <, octLimit, ), {, ch, =, pattern, ., charAt, (, pos, )]
[), ), ;, while, (, pos, <, octLimit, ), {, ch, =, pattern, ., charAt, (, pos, ), ;, if]
[), {, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, '0', <=, ch, &&, ch, <=, '7']
[<, octLimit, ), {, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, '0', <=, ch, &&, ch]
[), {, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, '0', <=, ch, &&, ch, <=, '7']
[=, pattern, ., charAt, (, pos, ), ;, if, (, '0', <=, ch, &&, ch, <=, '7', ), {, codeUnit]
[;, if, (, '0', <=, ch, &&, ch, <=, '7', ), {, codeUnit, =, (, char, ), (, (, codeUnit]
[., charAt, (, pos, ), ;, if, (, '0', <=, ch, &&, ch, <=, '7', ), {, codeUnit, =, (]
[), ;, if, (, '0', <=, ch, &&, ch, <=, '7', ), {, codeUnit, =, (, char, ), (, (]
[), {, codeUnit, =, (, char, ), (, (, codeUnit, <<, 3, ), +, (, ch, -, '0', ), )]
[&&, ch, <=, '7', ), {, codeUnit, =, (, char, ), (, (, codeUnit, <<, 3, ), +, (, ch]
[<=, ch, &&, ch, <=, '7', ), {, codeUnit, =, (, char, ), (, (, codeUnit, <<, 3, ), +]
[&&, ch, <=, '7', ), {, codeUnit, =, (, char, ), (, (, codeUnit, <<, 3, ), +, (, ch]
[), {, codeUnit, =, (, char, ), (, (, codeUnit, <<, 3, ), +, (, ch, -, '0', ), )]
[<=, '7', ), {, codeUnit, =, (, char, ), (, (, codeUnit, <<, 3, ), +, (, ch, -, '0']
[), {, codeUnit, =, (, char, ), (, (, codeUnit, <<, 3, ), +, (, ch, -, '0', ), )]
[=, (, char, ), (, (, codeUnit, <<, 3, ), +, (, ch, -, '0', ), ), ;, ++, pos]
[;, ++, pos, ;, }, else, {, break, ;, }, }, return, codeUnit, ;, }, return, ch, ;, }, }]
[;, ++, pos, ;, }, else, {, break, ;, }, }, return, codeUnit, ;, }, return, ch, ;, }, }]
[), ;, ++, pos, ;, }, else, {, break, ;, }, }, return, codeUnit, ;, }, return, ch, ;, }]
[+, (, ch, -, '0', ), ), ;, ++, pos, ;, }, else, {, break, ;, }, }, return, codeUnit]
[), +, (, ch, -, '0', ), ), ;, ++, pos, ;, }, else, {, break, ;, }, }, return]
[<<, 3, ), +, (, ch, -, '0', ), ), ;, ++, pos, ;, }, else, {, break, ;, }]
[), +, (, ch, -, '0', ), ), ;, ++, pos, ;, }, else, {, break, ;, }, }, return]
[), ;, ++, pos, ;, }, else, {, break, ;, }, }, return, codeUnit, ;, }, return, ch, ;, }]
[), ), ;, ++, pos, ;, }, else, {, break, ;, }, }, return, codeUnit, ;, }, return, ch, ;]
[-, '0', ), ), ;, ++, pos, ;, }, else, {, break, ;, }, }, return, codeUnit, ;, }, return]
[), ), ;, ++, pos, ;, }, else, {, break, ;, }, }, return, codeUnit, ;, }, return, ch, ;]
[;, }, else, {, break, ;, }, }, return, codeUnit, ;, }, return, ch, ;, }, }, private, RegExpTree, parseEscape]
[;, }, else, {, break, ;, }, }, return, codeUnit, ;, }, return, ch, ;, }, }, private, RegExpTree, parseEscape]
[;, }, return, ch, ;, }, }, private, RegExpTree, parseEscape, (, ), {, Preconditions, ., checkState, (, pattern, ., charAt]
[;, }, }, private, RegExpTree, parseEscape, (, ), {, Preconditions, ., checkState, (, pattern, ., charAt, (, pos, ), ==]
[;, ++, pos, ;, char, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==, 'b', ||]
[., checkState, (, pattern, ., charAt, (, pos, ), ==, '\\', ), ;, ++, pos, ;, char, ch, =, pattern]
[), ;, ++, pos, ;, char, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==, 'b']
[==, '\\', ), ;, ++, pos, ;, char, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch]
[., charAt, (, pos, ), ==, '\\', ), ;, ++, pos, ;, char, ch, =, pattern, ., charAt, (, pos]
[), ==, '\\', ), ;, ++, pos, ;, char, ch, =, pattern, ., charAt, (, pos, ), ;, if, (]
[), ;, ++, pos, ;, char, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==, 'b']
[;, char, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==, 'b', ||, ch, ==, 'B']
[;, char, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==, 'b', ||, ch, ==, 'B']
[;, if, (, ch, ==, 'b', ||, ch, ==, 'B', ), {, ++, pos, ;, return, new, WordBoundary, (, ch]
[., charAt, (, pos, ), ;, if, (, ch, ==, 'b', ||, ch, ==, 'B', ), {, ++, pos, ;]
[), ;, if, (, ch, ==, 'b', ||, ch, ==, 'B', ), {, ++, pos, ;, return, new, WordBoundary, (]
[), {, ++, pos, ;, return, new, WordBoundary, (, ch, ), ;, }, else, if, (, '1', <=, ch, &&]
[||, ch, ==, 'B', ), {, ++, pos, ;, return, new, WordBoundary, (, ch, ), ;, }, else, if, (]
[==, 'b', ||, ch, ==, 'B', ), {, ++, pos, ;, return, new, WordBoundary, (, ch, ), ;, }, else]
[||, ch, ==, 'B', ), {, ++, pos, ;, return, new, WordBoundary, (, ch, ), ;, }, else, if, (]
[), {, ++, pos, ;, return, new, WordBoundary, (, ch, ), ;, }, else, if, (, '1', <=, ch, &&]
[==, 'B', ), {, ++, pos, ;, return, new, WordBoundary, (, ch, ), ;, }, else, if, (, '1', <=]
[), {, ++, pos, ;, return, new, WordBoundary, (, ch, ), ;, }, else, if, (, '1', <=, ch, &&]
[;, return, new, WordBoundary, (, ch, ), ;, }, else, if, (, '1', <=, ch, &&, ch, <=, '9', )]
[;, return, new, WordBoundary, (, ch, ), ;, }, else, if, (, '1', <=, ch, &&, ch, <=, '9', )]
[;, }, else, if, (, '1', <=, ch, &&, ch, <=, '9', ), {, ++, pos, ;, int, possibleGroupIndex, =]
[), ;, }, else, if, (, '1', <=, ch, &&, ch, <=, '9', ), {, ++, pos, ;, int, possibleGroupIndex]
[), {, ++, pos, ;, int, possibleGroupIndex, =, ch, -, '0', ;, if, (, numCapturingGroups, >=, possibleGroupIndex, ), {, if]
[&&, ch, <=, '9', ), {, ++, pos, ;, int, possibleGroupIndex, =, ch, -, '0', ;, if, (, numCapturingGroups, >=]
[<=, ch, &&, ch, <=, '9', ), {, ++, pos, ;, int, possibleGroupIndex, =, ch, -, '0', ;, if, (]
[&&, ch, <=, '9', ), {, ++, pos, ;, int, possibleGroupIndex, =, ch, -, '0', ;, if, (, numCapturingGroups, >=]
[), {, ++, pos, ;, int, possibleGroupIndex, =, ch, -, '0', ;, if, (, numCapturingGroups, >=, possibleGroupIndex, ), {, if]
[<=, '9', ), {, ++, pos, ;, int, possibleGroupIndex, =, ch, -, '0', ;, if, (, numCapturingGroups, >=, possibleGroupIndex, )]
[), {, ++, pos, ;, int, possibleGroupIndex, =, ch, -, '0', ;, if, (, numCapturingGroups, >=, possibleGroupIndex, ), {, if]
[;, int, possibleGroupIndex, =, ch, -, '0', ;, if, (, numCapturingGroups, >=, possibleGroupIndex, ), {, if, (, pos, <, limit]
[;, int, possibleGroupIndex, =, ch, -, '0', ;, if, (, numCapturingGroups, >=, possibleGroupIndex, ), {, if, (, pos, <, limit]
[;, if, (, numCapturingGroups, >=, possibleGroupIndex, ), {, if, (, pos, <, limit, ), {, char, next, =, pattern, .]
[-, '0', ;, if, (, numCapturingGroups, >=, possibleGroupIndex, ), {, if, (, pos, <, limit, ), {, char, next, =]
[;, if, (, numCapturingGroups, >=, possibleGroupIndex, ), {, if, (, pos, <, limit, ), {, char, next, =, pattern, .]
[), {, if, (, pos, <, limit, ), {, char, next, =, pattern, ., charAt, (, pos, ), ;, if]
[>=, possibleGroupIndex, ), {, if, (, pos, <, limit, ), {, char, next, =, pattern, ., charAt, (, pos, )]
[), {, if, (, pos, <, limit, ), {, char, next, =, pattern, ., charAt, (, pos, ), ;, if]
[), {, char, next, =, pattern, ., charAt, (, pos, ), ;, if, (, '0', <=, next, &&, next, <=]
[<, limit, ), {, char, next, =, pattern, ., charAt, (, pos, ), ;, if, (, '0', <=, next, &&]
[), {, char, next, =, pattern, ., charAt, (, pos, ), ;, if, (, '0', <=, next, &&, next, <=]
[;, if, (, '0', <=, next, &&, next, <=, '9', ), {, int, twoDigitGroupIndex, =, possibleGroupIndex, *, 10, +, (]
[., charAt, (, pos, ), ;, if, (, '0', <=, next, &&, next, <=, '9', ), {, int, twoDigitGroupIndex, =]
[), ;, if, (, '0', <=, next, &&, next, <=, '9', ), {, int, twoDigitGroupIndex, =, possibleGroupIndex, *, 10, +]
[), {, int, twoDigitGroupIndex, =, possibleGroupIndex, *, 10, +, (, next, -, '0', ), ;, if, (, numCapturingGroups, >=, twoDigitGroupIndex]
[&&, next, <=, '9', ), {, int, twoDigitGroupIndex, =, possibleGroupIndex, *, 10, +, (, next, -, '0', ), ;, if]
[<=, next, &&, next, <=, '9', ), {, int, twoDigitGroupIndex, =, possibleGroupIndex, *, 10, +, (, next, -, '0', )]
[&&, next, <=, '9', ), {, int, twoDigitGroupIndex, =, possibleGroupIndex, *, 10, +, (, next, -, '0', ), ;, if]
[), {, int, twoDigitGroupIndex, =, possibleGroupIndex, *, 10, +, (, next, -, '0', ), ;, if, (, numCapturingGroups, >=, twoDigitGroupIndex]
[<=, '9', ), {, int, twoDigitGroupIndex, =, possibleGroupIndex, *, 10, +, (, next, -, '0', ), ;, if, (, numCapturingGroups]
[), {, int, twoDigitGroupIndex, =, possibleGroupIndex, *, 10, +, (, next, -, '0', ), ;, if, (, numCapturingGroups, >=, twoDigitGroupIndex]
[;, if, (, numCapturingGroups, >=, twoDigitGroupIndex, ), {, ++, pos, ;, possibleGroupIndex, =, twoDigitGroupIndex, ;, }, }, }, return, new]
[+, (, next, -, '0', ), ;, if, (, numCapturingGroups, >=, twoDigitGroupIndex, ), {, ++, pos, ;, possibleGroupIndex, =, twoDigitGroupIndex]
[*, 10, +, (, next, -, '0', ), ;, if, (, numCapturingGroups, >=, twoDigitGroupIndex, ), {, ++, pos, ;, possibleGroupIndex]
[+, (, next, -, '0', ), ;, if, (, numCapturingGroups, >=, twoDigitGroupIndex, ), {, ++, pos, ;, possibleGroupIndex, =, twoDigitGroupIndex]
[;, if, (, numCapturingGroups, >=, twoDigitGroupIndex, ), {, ++, pos, ;, possibleGroupIndex, =, twoDigitGroupIndex, ;, }, }, }, return, new]
[), ;, if, (, numCapturingGroups, >=, twoDigitGroupIndex, ), {, ++, pos, ;, possibleGroupIndex, =, twoDigitGroupIndex, ;, }, }, }, return]
[-, '0', ), ;, if, (, numCapturingGroups, >=, twoDigitGroupIndex, ), {, ++, pos, ;, possibleGroupIndex, =, twoDigitGroupIndex, ;, }, }]
[), ;, if, (, numCapturingGroups, >=, twoDigitGroupIndex, ), {, ++, pos, ;, possibleGroupIndex, =, twoDigitGroupIndex, ;, }, }, }, return]
[), {, ++, pos, ;, possibleGroupIndex, =, twoDigitGroupIndex, ;, }, }, }, return, new, BackReference, (, possibleGroupIndex, ), ;, }]
[>=, twoDigitGroupIndex, ), {, ++, pos, ;, possibleGroupIndex, =, twoDigitGroupIndex, ;, }, }, }, return, new, BackReference, (, possibleGroupIndex, )]
[), {, ++, pos, ;, possibleGroupIndex, =, twoDigitGroupIndex, ;, }, }, }, return, new, BackReference, (, possibleGroupIndex, ), ;, }]
[;, possibleGroupIndex, =, twoDigitGroupIndex, ;, }, }, }, return, new, BackReference, (, possibleGroupIndex, ), ;, }, else, {, return, new]
[;, possibleGroupIndex, =, twoDigitGroupIndex, ;, }, }, }, return, new, BackReference, (, possibleGroupIndex, ), ;, }, else, {, return, new]
[=, twoDigitGroupIndex, ;, }, }, }, return, new, BackReference, (, possibleGroupIndex, ), ;, }, else, {, return, new, Text, (]
[;, }, }, }, return, new, BackReference, (, possibleGroupIndex, ), ;, }, else, {, return, new, Text, (, Character, .]
[;, }, else, {, return, new, Text, (, Character, ., toString, (, possibleGroupIndex, <=, 7, ?, (, char, ), possibleGroupIndex]
[), ;, }, else, {, return, new, Text, (, Character, ., toString, (, possibleGroupIndex, <=, 7, ?, (, char, )]
[;, }, }, else, {, CharRanges, charGroup, =, NAMED_CHAR_GROUPS, ., get, (, ch, ), ;, if, (, charGroup, !=, null]
[), ;, }, }, else, {, CharRanges, charGroup, =, NAMED_CHAR_GROUPS, ., get, (, ch, ), ;, if, (, charGroup, !=]
[., toString, (, possibleGroupIndex, <=, 7, ?, (, char, ), possibleGroupIndex, :, ch, ), ), ;, }, }, else, {]
[), ), ;, }, }, else, {, CharRanges, charGroup, =, NAMED_CHAR_GROUPS, ., get, (, ch, ), ;, if, (, charGroup]
[?, (, char, ), possibleGroupIndex, :, ch, ), ), ;, }, }, else, {, CharRanges, charGroup, =, NAMED_CHAR_GROUPS, ., get]
[<=, 7, ?, (, char, ), possibleGroupIndex, :, ch, ), ), ;, }, }, else, {, CharRanges, charGroup, =, NAMED_CHAR_GROUPS]
[?, (, char, ), possibleGroupIndex, :, ch, ), ), ;, }, }, else, {, CharRanges, charGroup, =, NAMED_CHAR_GROUPS, ., get]
[:, ch, ), ), ;, }, }, else, {, CharRanges, charGroup, =, NAMED_CHAR_GROUPS, ., get, (, ch, ), ;, if]
[:, ch, ), ), ;, }, }, else, {, CharRanges, charGroup, =, NAMED_CHAR_GROUPS, ., get, (, ch, ), ;, if]
[), ), ;, }, }, else, {, CharRanges, charGroup, =, NAMED_CHAR_GROUPS, ., get, (, ch, ), ;, if, (, charGroup]
[;, if, (, charGroup, !=, null, ), {, ++, pos, ;, return, new, Charset, (, charGroup, ,, CharRanges, ., EMPTY]
[., get, (, ch, ), ;, if, (, charGroup, !=, null, ), {, ++, pos, ;, return, new, Charset, (]
[), ;, if, (, charGroup, !=, null, ), {, ++, pos, ;, return, new, Charset, (, charGroup, ,, CharRanges, .]
[), {, ++, pos, ;, return, new, Charset, (, charGroup, ,, CharRanges, ., EMPTY, ), ;, }, return, new, Text]
[!=, null, ), {, ++, pos, ;, return, new, Charset, (, charGroup, ,, CharRanges, ., EMPTY, ), ;, }, return]
[), {, ++, pos, ;, return, new, Charset, (, charGroup, ,, CharRanges, ., EMPTY, ), ;, }, return, new, Text]
[;, return, new, Charset, (, charGroup, ,, CharRanges, ., EMPTY, ), ;, }, return, new, Text, (, "", +, parseEscapeChar]
[;, return, new, Charset, (, charGroup, ,, CharRanges, ., EMPTY, ), ;, }, return, new, Text, (, "", +, parseEscapeChar]
[;, }, return, new, Text, (, "", +, parseEscapeChar, (, ), ), ;, }, }, private, char, parseHex, (, int]
[,, CharRanges, ., EMPTY, ), ;, }, return, new, Text, (, "", +, parseEscapeChar, (, ), ), ;, }, }]
[), ;, }, return, new, Text, (, "", +, parseEscapeChar, (, ), ), ;, }, }, private, char, parseHex, (]
[., EMPTY, ), ;, }, return, new, Text, (, "", +, parseEscapeChar, (, ), ), ;, }, }, private, char]
[;, }, }, private, char, parseHex, (, int, n, ), {, if, (, pos, +, n, >, limit, ), {]
[), ;, }, }, private, char, parseHex, (, int, n, ), {, if, (, pos, +, n, >, limit, )]
[+, parseEscapeChar, (, ), ), ;, }, }, private, char, parseHex, (, int, n, ), {, if, (, pos, +]
[), ;, }, }, private, char, parseHex, (, int, n, ), {, if, (, pos, +, n, >, limit, )]
[), {, throw, new, IllegalArgumentException, (, "Abbreviated hex escape ", +, pattern, ., substring, (, pos, ), ), ;, }, int, result, =]
[>, limit, ), {, throw, new, IllegalArgumentException, (, "Abbreviated hex escape ", +, pattern, ., substring, (, pos, ), ), ;, }, int]
[+, n, >, limit, ), {, throw, new, IllegalArgumentException, (, "Abbreviated hex escape ", +, pattern, ., substring, (, pos, ), ), ;]
[>, limit, ), {, throw, new, IllegalArgumentException, (, "Abbreviated hex escape ", +, pattern, ., substring, (, pos, ), ), ;, }, int]
[), {, throw, new, IllegalArgumentException, (, "Abbreviated hex escape ", +, pattern, ., substring, (, pos, ), ), ;, }, int, result, =]
[;, }, int, result, =, 0, ;, while, (, --, n, >=, 0, ), {, char, ch, =, pattern, .]
[), ;, }, int, result, =, 0, ;, while, (, --, n, >=, 0, ), {, char, ch, =, pattern]
[+, pattern, ., substring, (, pos, ), ), ;, }, int, result, =, 0, ;, while, (, --, n, >=]
[), ;, }, int, result, =, 0, ;, while, (, --, n, >=, 0, ), {, char, ch, =, pattern]
[., substring, (, pos, ), ), ;, }, int, result, =, 0, ;, while, (, --, n, >=, 0, )]
[), ), ;, }, int, result, =, 0, ;, while, (, --, n, >=, 0, ), {, char, ch, =]
[;, while, (, --, n, >=, 0, ), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, int]
[), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, int, digit, ;, if, (, '0', <=, ch]
[>=, 0, ), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, int, digit, ;, if, (, '0']
[>=, 0, ), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, int, digit, ;, if, (, '0']
[), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, int, digit, ;, if, (, '0', <=, ch]
[;, int, digit, ;, if, (, '0', <=, ch, &&, ch, <=, '9', ), {, digit, =, ch, -, '0']
[., charAt, (, pos, ), ;, int, digit, ;, if, (, '0', <=, ch, &&, ch, <=, '9', ), {]
[), ;, int, digit, ;, if, (, '0', <=, ch, &&, ch, <=, '9', ), {, digit, =, ch, -]
[), {, digit, =, ch, -, '0', ;, }, else, if, (, 'a', <=, ch, &&, ch, <=, 'f', )]
[&&, ch, <=, '9', ), {, digit, =, ch, -, '0', ;, }, else, if, (, 'a', <=, ch, &&]
[<=, ch, &&, ch, <=, '9', ), {, digit, =, ch, -, '0', ;, }, else, if, (, 'a', <=]
[&&, ch, <=, '9', ), {, digit, =, ch, -, '0', ;, }, else, if, (, 'a', <=, ch, &&]
[), {, digit, =, ch, -, '0', ;, }, else, if, (, 'a', <=, ch, &&, ch, <=, 'f', )]
[<=, '9', ), {, digit, =, ch, -, '0', ;, }, else, if, (, 'a', <=, ch, &&, ch, <=]
[), {, digit, =, ch, -, '0', ;, }, else, if, (, 'a', <=, ch, &&, ch, <=, 'f', )]
[=, ch, -, '0', ;, }, else, if, (, 'a', <=, ch, &&, ch, <=, 'f', ), {, digit, =]
[;, }, else, if, (, 'a', <=, ch, &&, ch, <=, 'f', ), {, digit, =, ch, +, (, 10]
[-, '0', ;, }, else, if, (, 'a', <=, ch, &&, ch, <=, 'f', ), {, digit, =, ch, +]
[;, }, else, if, (, 'a', <=, ch, &&, ch, <=, 'f', ), {, digit, =, ch, +, (, 10]
[), {, digit, =, ch, +, (, 10, -, 'a', ), ;, }, else, if, (, 'A', <=, ch, &&]
[&&, ch, <=, 'f', ), {, digit, =, ch, +, (, 10, -, 'a', ), ;, }, else, if, (]
[<=, ch, &&, ch, <=, 'f', ), {, digit, =, ch, +, (, 10, -, 'a', ), ;, }, else]
[&&, ch, <=, 'f', ), {, digit, =, ch, +, (, 10, -, 'a', ), ;, }, else, if, (]
[), {, digit, =, ch, +, (, 10, -, 'a', ), ;, }, else, if, (, 'A', <=, ch, &&]
[<=, 'f', ), {, digit, =, ch, +, (, 10, -, 'a', ), ;, }, else, if, (, 'A', <=]
[), {, digit, =, ch, +, (, 10, -, 'a', ), ;, }, else, if, (, 'A', <=, ch, &&]
[=, ch, +, (, 10, -, 'a', ), ;, }, else, if, (, 'A', <=, ch, &&, ch, <=, 'F']
[;, }, else, if, (, 'A', <=, ch, &&, ch, <=, 'F', ), {, digit, =, ch, +, (, 10]
[+, (, 10, -, 'a', ), ;, }, else, if, (, 'A', <=, ch, &&, ch, <=, 'F', ), {]
[;, }, else, if, (, 'A', <=, ch, &&, ch, <=, 'F', ), {, digit, =, ch, +, (, 10]
[), ;, }, else, if, (, 'A', <=, ch, &&, ch, <=, 'F', ), {, digit, =, ch, +, (]
[-, 'a', ), ;, }, else, if, (, 'A', <=, ch, &&, ch, <=, 'F', ), {, digit, =, ch]
[), ;, }, else, if, (, 'A', <=, ch, &&, ch, <=, 'F', ), {, digit, =, ch, +, (]
[), {, digit, =, ch, +, (, 10, -, 'A', ), ;, }, else, {, throw, new, IllegalArgumentException, (, pattern]
[&&, ch, <=, 'F', ), {, digit, =, ch, +, (, 10, -, 'A', ), ;, }, else, {, throw]
[<=, ch, &&, ch, <=, 'F', ), {, digit, =, ch, +, (, 10, -, 'A', ), ;, }, else]
[&&, ch, <=, 'F', ), {, digit, =, ch, +, (, 10, -, 'A', ), ;, }, else, {, throw]
[), {, digit, =, ch, +, (, 10, -, 'A', ), ;, }, else, {, throw, new, IllegalArgumentException, (, pattern]
[<=, 'F', ), {, digit, =, ch, +, (, 10, -, 'A', ), ;, }, else, {, throw, new, IllegalArgumentException]
[), {, digit, =, ch, +, (, 10, -, 'A', ), ;, }, else, {, throw, new, IllegalArgumentException, (, pattern]
[=, ch, +, (, 10, -, 'A', ), ;, }, else, {, throw, new, IllegalArgumentException, (, pattern, ., substring, (]
[;, }, else, {, throw, new, IllegalArgumentException, (, pattern, ., substring, (, pos, ), ), ;, }, ++, pos, ;]
[+, (, 10, -, 'A', ), ;, }, else, {, throw, new, IllegalArgumentException, (, pattern, ., substring, (, pos, )]
[;, }, else, {, throw, new, IllegalArgumentException, (, pattern, ., substring, (, pos, ), ), ;, }, ++, pos, ;]
[), ;, }, else, {, throw, new, IllegalArgumentException, (, pattern, ., substring, (, pos, ), ), ;, }, ++, pos]
[-, 'A', ), ;, }, else, {, throw, new, IllegalArgumentException, (, pattern, ., substring, (, pos, ), ), ;, }]
[), ;, }, else, {, throw, new, IllegalArgumentException, (, pattern, ., substring, (, pos, ), ), ;, }, ++, pos]
[;, }, ++, pos, ;, result, =, (, result, <<, 4, ), |, digit, ;, }, return, (, char, )]
[), ;, }, ++, pos, ;, result, =, (, result, <<, 4, ), |, digit, ;, }, return, (, char]
[., substring, (, pos, ), ), ;, }, ++, pos, ;, result, =, (, result, <<, 4, ), |, digit]
[), ), ;, }, ++, pos, ;, result, =, (, result, <<, 4, ), |, digit, ;, }, return, (]
[;, result, =, (, result, <<, 4, ), |, digit, ;, }, return, (, char, ), result, ;, }, private]
[;, result, =, (, result, <<, 4, ), |, digit, ;, }, return, (, char, ), result, ;, }, private]
[=, (, result, <<, 4, ), |, digit, ;, }, return, (, char, ), result, ;, }, private, boolean, isRepetitionStart]
[;, }, return, (, char, ), result, ;, }, private, boolean, isRepetitionStart, (, char, ch, ), {, switch, (, ch]
[|, digit, ;, }, return, (, char, ), result, ;, }, private, boolean, isRepetitionStart, (, char, ch, ), {, switch]
[), |, digit, ;, }, return, (, char, ), result, ;, }, private, boolean, isRepetitionStart, (, char, ch, ), {]
[<<, 4, ), |, digit, ;, }, return, (, char, ), result, ;, }, private, boolean, isRepetitionStart, (, char, ch]
[), |, digit, ;, }, return, (, char, ), result, ;, }, private, boolean, isRepetitionStart, (, char, ch, ), {]
[;, }, return, (, char, ), result, ;, }, private, boolean, isRepetitionStart, (, char, ch, ), {, switch, (, ch]
[;, }, private, boolean, isRepetitionStart, (, char, ch, ), {, switch, (, ch, ), {, case, '?', :, case, '*']
[;, }, private, boolean, isRepetitionStart, (, char, ch, ), {, switch, (, ch, ), {, case, '?', :, case, '*']
[), {, case, '?', :, case, '*', :, case, '+', :, case, '{', :, return, true, ;, default, :, return]
[:, case, '*', :, case, '+', :, case, '{', :, return, true, ;, default, :, return, false, ;, }, }]
[:, case, '+', :, case, '{', :, return, true, ;, default, :, return, false, ;, }, }, private, RegExpTree, parseRepetition]
[:, case, '{', :, return, true, ;, default, :, return, false, ;, }, }, private, RegExpTree, parseRepetition, (, RegExpTree, body]
[:, return, true, ;, default, :, return, false, ;, }, }, private, RegExpTree, parseRepetition, (, RegExpTree, body, ), {, if]
[;, default, :, return, false, ;, }, }, private, RegExpTree, parseRepetition, (, RegExpTree, body, ), {, if, (, pos, ==]
[;, }, }, private, RegExpTree, parseRepetition, (, RegExpTree, body, ), {, if, (, pos, ==, limit, ), {, return, body]
[), {, return, body, ;, }, int, min, ,, max, ;, switch, (, pattern, ., charAt, (, pos, ), )]
[==, limit, ), {, return, body, ;, }, int, min, ,, max, ;, switch, (, pattern, ., charAt, (, pos]
[), {, return, body, ;, }, int, min, ,, max, ;, switch, (, pattern, ., charAt, (, pos, ), )]
[;, }, int, min, ,, max, ;, switch, (, pattern, ., charAt, (, pos, ), ), {, case, '+', :]
[), {, case, '+', :, ++, pos, ;, min, =, 1, ;, max, =, Integer, ., MAX_VALUE, ;, break, ;]
[., charAt, (, pos, ), ), {, case, '+', :, ++, pos, ;, min, =, 1, ;, max, =, Integer]
[), ), {, case, '+', :, ++, pos, ;, min, =, 1, ;, max, =, Integer, ., MAX_VALUE, ;, break]
[:, ++, pos, ;, min, =, 1, ;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '*', :, ++]
[;, min, =, 1, ;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '*', :, ++, pos, ;, min]
[;, min, =, 1, ;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '*', :, ++, pos, ;, min]
[=, 1, ;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '*', :, ++, pos, ;, min, =, 0]
[;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '*', :, ++, pos, ;, min, =, 0, ;, max]
[=, Integer, ., MAX_VALUE, ;, break, ;, case, '*', :, ++, pos, ;, min, =, 0, ;, max, =, Integer]
[;, break, ;, case, '*', :, ++, pos, ;, min, =, 0, ;, max, =, Integer, ., MAX_VALUE, ;, break]
[., MAX_VALUE, ;, break, ;, case, '*', :, ++, pos, ;, min, =, 0, ;, max, =, Integer, ., MAX_VALUE]
[:, ++, pos, ;, min, =, 0, ;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '?', :, ++]
[;, min, =, 0, ;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '?', :, ++, pos, ;, min]
[;, min, =, 0, ;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '?', :, ++, pos, ;, min]
[=, 0, ;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '?', :, ++, pos, ;, min, =, 0]
[;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '?', :, ++, pos, ;, min, =, 0, ;, max]
[=, Integer, ., MAX_VALUE, ;, break, ;, case, '?', :, ++, pos, ;, min, =, 0, ;, max, =, 1]
[;, break, ;, case, '?', :, ++, pos, ;, min, =, 0, ;, max, =, 1, ;, break, ;, case]
[., MAX_VALUE, ;, break, ;, case, '?', :, ++, pos, ;, min, =, 0, ;, max, =, 1, ;, break]
[:, ++, pos, ;, min, =, 0, ;, max, =, 1, ;, break, ;, case, '{', :, ++, pos, ;]
[;, min, =, 0, ;, max, =, 1, ;, break, ;, case, '{', :, ++, pos, ;, int, start, =]
[;, min, =, 0, ;, max, =, 1, ;, break, ;, case, '{', :, ++, pos, ;, int, start, =]
[=, 0, ;, max, =, 1, ;, break, ;, case, '{', :, ++, pos, ;, int, start, =, pos, ;]
[;, max, =, 1, ;, break, ;, case, '{', :, ++, pos, ;, int, start, =, pos, ;, int, end]
[=, 1, ;, break, ;, case, '{', :, ++, pos, ;, int, start, =, pos, ;, int, end, =, pattern]
[;, break, ;, case, '{', :, ++, pos, ;, int, start, =, pos, ;, int, end, =, pattern, ., indexOf]
[:, ++, pos, ;, int, start, =, pos, ;, int, end, =, pattern, ., indexOf, (, '}', ,, start, )]
[;, int, start, =, pos, ;, int, end, =, pattern, ., indexOf, (, '}', ,, start, ), ;, if, (]
[;, int, start, =, pos, ;, int, end, =, pattern, ., indexOf, (, '}', ,, start, ), ;, if, (]
[;, int, end, =, pattern, ., indexOf, (, '}', ,, start, ), ;, if, (, end, <, 0, ), {]
[;, if, (, end, <, 0, ), {, pos, =, start, -, 1, ;, return, body, ;, }, String, counts]
[., indexOf, (, '}', ,, start, ), ;, if, (, end, <, 0, ), {, pos, =, start, -, 1]
[,, start, ), ;, if, (, end, <, 0, ), {, pos, =, start, -, 1, ;, return, body, ;]
[), ;, if, (, end, <, 0, ), {, pos, =, start, -, 1, ;, return, body, ;, }, String]
[), {, pos, =, start, -, 1, ;, return, body, ;, }, String, counts, =, pattern, ., substring, (, start]
[<, 0, ), {, pos, =, start, -, 1, ;, return, body, ;, }, String, counts, =, pattern, ., substring]
[), {, pos, =, start, -, 1, ;, return, body, ;, }, String, counts, =, pattern, ., substring, (, start]
[=, start, -, 1, ;, return, body, ;, }, String, counts, =, pattern, ., substring, (, start, ,, end, )]
[;, return, body, ;, }, String, counts, =, pattern, ., substring, (, start, ,, end, ), ;, pos, =, end]
[-, 1, ;, return, body, ;, }, String, counts, =, pattern, ., substring, (, start, ,, end, ), ;, pos]
[;, return, body, ;, }, String, counts, =, pattern, ., substring, (, start, ,, end, ), ;, pos, =, end]
[;, }, String, counts, =, pattern, ., substring, (, start, ,, end, ), ;, pos, =, end, +, 1, ;]
[;, pos, =, end, +, 1, ;, int, comma, =, counts, ., indexOf, (, ',', ), ;, try, {, min]
[., substring, (, start, ,, end, ), ;, pos, =, end, +, 1, ;, int, comma, =, counts, ., indexOf]
[,, end, ), ;, pos, =, end, +, 1, ;, int, comma, =, counts, ., indexOf, (, ',', ), ;]
[), ;, pos, =, end, +, 1, ;, int, comma, =, counts, ., indexOf, (, ',', ), ;, try, {]
[=, end, +, 1, ;, int, comma, =, counts, ., indexOf, (, ',', ), ;, try, {, min, =, Integer]
[;, int, comma, =, counts, ., indexOf, (, ',', ), ;, try, {, min, =, Integer, ., parseInt, (, comma]
[+, 1, ;, int, comma, =, counts, ., indexOf, (, ',', ), ;, try, {, min, =, Integer, ., parseInt]
[;, int, comma, =, counts, ., indexOf, (, ',', ), ;, try, {, min, =, Integer, ., parseInt, (, comma]
[;, try, {, min, =, Integer, ., parseInt, (, comma, >=, 0, ?, counts, ., substring, (, 0, ,, comma]
[., indexOf, (, ',', ), ;, try, {, min, =, Integer, ., parseInt, (, comma, >=, 0, ?, counts, .]
[), ;, try, {, min, =, Integer, ., parseInt, (, comma, >=, 0, ?, counts, ., substring, (, 0, ,]
[=, Integer, ., parseInt, (, comma, >=, 0, ?, counts, ., substring, (, 0, ,, comma, ), :, counts, )]
[;, max, =, comma, >=, 0, ?, comma, +, 1, !=, counts, ., length, (, ), ?, Integer, ., parseInt]
[., parseInt, (, comma, >=, 0, ?, counts, ., substring, (, 0, ,, comma, ), :, counts, ), ;, max]
[), ;, max, =, comma, >=, 0, ?, comma, +, 1, !=, counts, ., length, (, ), ?, Integer, .]
[?, counts, ., substring, (, 0, ,, comma, ), :, counts, ), ;, max, =, comma, >=, 0, ?, comma]
[>=, 0, ?, counts, ., substring, (, 0, ,, comma, ), :, counts, ), ;, max, =, comma, >=, 0]
[?, counts, ., substring, (, 0, ,, comma, ), :, counts, ), ;, max, =, comma, >=, 0, ?, comma]
[:, counts, ), ;, max, =, comma, >=, 0, ?, comma, +, 1, !=, counts, ., length, (, ), ?]
[., substring, (, 0, ,, comma, ), :, counts, ), ;, max, =, comma, >=, 0, ?, comma, +, 1]
[,, comma, ), :, counts, ), ;, max, =, comma, >=, 0, ?, comma, +, 1, !=, counts, ., length]
[), :, counts, ), ;, max, =, comma, >=, 0, ?, comma, +, 1, !=, counts, ., length, (, )]
[), ;, max, =, comma, >=, 0, ?, comma, +, 1, !=, counts, ., length, (, ), ?, Integer, .]
[=, comma, >=, 0, ?, comma, +, 1, !=, counts, ., length, (, ), ?, Integer, ., parseInt, (, counts]
[;, }, catch, (, NumberFormatException, ex, ), {, min, =, max, =, -, 1, ;, }, if, (, min, <]
[?, comma, +, 1, !=, counts, ., length, (, ), ?, Integer, ., parseInt, (, counts, ., substring, (, comma]
[>=, 0, ?, comma, +, 1, !=, counts, ., length, (, ), ?, Integer, ., parseInt, (, counts, ., substring]
[?, comma, +, 1, !=, counts, ., length, (, ), ?, Integer, ., parseInt, (, counts, ., substring, (, comma]
[:, min, ;, }, catch, (, NumberFormatException, ex, ), {, min, =, max, =, -, 1, ;, }, if, (]
[?, Integer, ., parseInt, (, counts, ., substring, (, comma, +, 1, ), ), :, Integer, ., MAX_VALUE, :, min]
[!=, counts, ., length, (, ), ?, Integer, ., parseInt, (, counts, ., substring, (, comma, +, 1, ), )]
[+, 1, !=, counts, ., length, (, ), ?, Integer, ., parseInt, (, counts, ., substring, (, comma, +, 1]
[!=, counts, ., length, (, ), ?, Integer, ., parseInt, (, counts, ., substring, (, comma, +, 1, ), )]
[?, Integer, ., parseInt, (, counts, ., substring, (, comma, +, 1, ), ), :, Integer, ., MAX_VALUE, :, min]
[., length, (, ), ?, Integer, ., parseInt, (, counts, ., substring, (, comma, +, 1, ), ), :, Integer]
[:, Integer, ., MAX_VALUE, :, min, ;, }, catch, (, NumberFormatException, ex, ), {, min, =, max, =, -, 1]
[., parseInt, (, counts, ., substring, (, comma, +, 1, ), ), :, Integer, ., MAX_VALUE, :, min, ;, }]
[), :, Integer, ., MAX_VALUE, :, min, ;, }, catch, (, NumberFormatException, ex, ), {, min, =, max, =, -]
[., substring, (, comma, +, 1, ), ), :, Integer, ., MAX_VALUE, :, min, ;, }, catch, (, NumberFormatException, ex]
[), ), :, Integer, ., MAX_VALUE, :, min, ;, }, catch, (, NumberFormatException, ex, ), {, min, =, max, =]
[+, 1, ), ), :, Integer, ., MAX_VALUE, :, min, ;, }, catch, (, NumberFormatException, ex, ), {, min, =]
[), ), :, Integer, ., MAX_VALUE, :, min, ;, }, catch, (, NumberFormatException, ex, ), {, min, =, max, =]
[:, min, ;, }, catch, (, NumberFormatException, ex, ), {, min, =, max, =, -, 1, ;, }, if, (]
[., MAX_VALUE, :, min, ;, }, catch, (, NumberFormatException, ex, ), {, min, =, max, =, -, 1, ;, }]
[;, }, catch, (, NumberFormatException, ex, ), {, min, =, max, =, -, 1, ;, }, if, (, min, <]
[=, max, =, -, 1, ;, }, if, (, min, <, 0, ||, min, >, max, ), {, pos, =]
[=, -, 1, ;, }, if, (, min, <, 0, ||, min, >, max, ), {, pos, =, start, -]
[;, }, if, (, min, <, 0, ||, min, >, max, ), {, pos, =, start, -, 1, ;, return]
[;, }, if, (, min, <, 0, ||, min, >, max, ), {, pos, =, start, -, 1, ;, return]
[), {, pos, =, start, -, 1, ;, return, body, ;, }, break, ;, default, :, return, body, ;, }]
[||, min, >, max, ), {, pos, =, start, -, 1, ;, return, body, ;, }, break, ;, default, :]
[<, 0, ||, min, >, max, ), {, pos, =, start, -, 1, ;, return, body, ;, }, break, ;]
[||, min, >, max, ), {, pos, =, start, -, 1, ;, return, body, ;, }, break, ;, default, :]
[), {, pos, =, start, -, 1, ;, return, body, ;, }, break, ;, default, :, return, body, ;, }]
[>, max, ), {, pos, =, start, -, 1, ;, return, body, ;, }, break, ;, default, :, return, body]
[), {, pos, =, start, -, 1, ;, return, body, ;, }, break, ;, default, :, return, body, ;, }]
[=, start, -, 1, ;, return, body, ;, }, break, ;, default, :, return, body, ;, }, boolean, greedy, =]
[;, return, body, ;, }, break, ;, default, :, return, body, ;, }, boolean, greedy, =, true, ;, if, (]
[-, 1, ;, return, body, ;, }, break, ;, default, :, return, body, ;, }, boolean, greedy, =, true, ;]
[;, return, body, ;, }, break, ;, default, :, return, body, ;, }, boolean, greedy, =, true, ;, if, (]
[;, }, break, ;, default, :, return, body, ;, }, boolean, greedy, =, true, ;, if, (, pos, <, limit]
[;, }, boolean, greedy, =, true, ;, if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==]
[;, if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '?', ), {, greedy, =, false]
[), {, greedy, =, false, ;, ++, pos, ;, }, return, new, Repetition, (, body, ,, min, ,, max, ,]
[&&, pattern, ., charAt, (, pos, ), ==, '?', ), {, greedy, =, false, ;, ++, pos, ;, }, return]
[<, limit, &&, pattern, ., charAt, (, pos, ), ==, '?', ), {, greedy, =, false, ;, ++, pos, ;]
[&&, pattern, ., charAt, (, pos, ), ==, '?', ), {, greedy, =, false, ;, ++, pos, ;, }, return]
[), {, greedy, =, false, ;, ++, pos, ;, }, return, new, Repetition, (, body, ,, min, ,, max, ,]
[==, '?', ), {, greedy, =, false, ;, ++, pos, ;, }, return, new, Repetition, (, body, ,, min, ,]
[., charAt, (, pos, ), ==, '?', ), {, greedy, =, false, ;, ++, pos, ;, }, return, new, Repetition]
[), ==, '?', ), {, greedy, =, false, ;, ++, pos, ;, }, return, new, Repetition, (, body, ,, min]
[), {, greedy, =, false, ;, ++, pos, ;, }, return, new, Repetition, (, body, ,, min, ,, max, ,]
[=, false, ;, ++, pos, ;, }, return, new, Repetition, (, body, ,, min, ,, max, ,, greedy, ), ;]
[;, ++, pos, ;, }, return, new, Repetition, (, body, ,, min, ,, max, ,, greedy, ), ;, }, }]
[;, }, return, new, Repetition, (, body, ,, min, ,, max, ,, greedy, ), ;, }, }, return, new, Parser]
[;, }, return, new, Repetition, (, body, ,, min, ,, max, ,, greedy, ), ;, }, }, return, new, Parser]
[;, }, }, return, new, Parser, (, ), ., parseTopLevel, (, ), ;, }, public, static, boolean, matchesWholeInput, (, RegExpTree]
[,, min, ,, max, ,, greedy, ), ;, }, }, return, new, Parser, (, ), ., parseTopLevel, (, ), ;]
[,, max, ,, greedy, ), ;, }, }, return, new, Parser, (, ), ., parseTopLevel, (, ), ;, }, public]
[,, greedy, ), ;, }, }, return, new, Parser, (, ), ., parseTopLevel, (, ), ;, }, public, static, boolean]
[), ;, }, }, return, new, Parser, (, ), ., parseTopLevel, (, ), ;, }, public, static, boolean, matchesWholeInput, (]
[;, }, public, static, boolean, matchesWholeInput, (, RegExpTree, t, ,, String, flags, ), {, if, (, flags, ., indexOf, (]
[., parseTopLevel, (, ), ;, }, public, static, boolean, matchesWholeInput, (, RegExpTree, t, ,, String, flags, ), {, if, (]
[), {, return, false, ;, }, if, (, !, (, t, instanceof, Concatenation, ), ), {, return, false, ;, }]
[>=, 0, ), {, return, false, ;, }, if, (, !, (, t, instanceof, Concatenation, ), ), {, return, false]
[., indexOf, (, 'm', ), >=, 0, ), {, return, false, ;, }, if, (, !, (, t, instanceof, Concatenation]
[), >=, 0, ), {, return, false, ;, }, if, (, !, (, t, instanceof, Concatenation, ), ), {, return]
[), {, return, false, ;, }, if, (, !, (, t, instanceof, Concatenation, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, t, instanceof, Concatenation, ), ), {, return, false, ;, }, Concatenation, c, =, (]
[), {, return, false, ;, }, Concatenation, c, =, (, Concatenation, ), t, ;, if, (, c, ., elements, .]
[), {, return, false, ;, }, Concatenation, c, =, (, Concatenation, ), t, ;, if, (, c, ., elements, .]
[), ), {, return, false, ;, }, Concatenation, c, =, (, Concatenation, ), t, ;, if, (, c, ., elements]
[instanceof, Concatenation, ), ), {, return, false, ;, }, Concatenation, c, =, (, Concatenation, ), t, ;, if, (, c]
[;, }, Concatenation, c, =, (, Concatenation, ), t, ;, if, (, c, ., elements, ., isEmpty, (, ), )]
[;, if, (, c, ., elements, ., isEmpty, (, ), ), {, return, false, ;, }, RegExpTree, first, =, c]
[;, if, (, c, ., elements, ., isEmpty, (, ), ), {, return, false, ;, }, RegExpTree, first, =, c]
[), {, return, false, ;, }, RegExpTree, first, =, c, ., elements, ., get, (, 0, ), ,, last, =]
[., isEmpty, (, ), ), {, return, false, ;, }, RegExpTree, first, =, c, ., elements, ., get, (, 0]
[., elements, ., isEmpty, (, ), ), {, return, false, ;, }, RegExpTree, first, =, c, ., elements, ., get]
[;, }, RegExpTree, first, =, c, ., elements, ., get, (, 0, ), ,, last, =, c, ., elements, .]
[,, last, =, c, ., elements, ., get, (, c, ., elements, ., size, (, ), -, 1, ), ;]
[., get, (, 0, ), ,, last, =, c, ., elements, ., get, (, c, ., elements, ., size, (]
[., elements, ., get, (, 0, ), ,, last, =, c, ., elements, ., get, (, c, ., elements, .]
[), ,, last, =, c, ., elements, ., get, (, c, ., elements, ., size, (, ), -, 1, )]
[;, if, (, !, (, first, instanceof, Anchor, &&, last, instanceof, Anchor, ), ), {, return, false, ;, }, return]
[., get, (, c, ., elements, ., size, (, ), -, 1, ), ;, if, (, !, (, first, instanceof]
[., elements, ., get, (, c, ., elements, ., size, (, ), -, 1, ), ;, if, (, !, (]
[), ;, if, (, !, (, first, instanceof, Anchor, &&, last, instanceof, Anchor, ), ), {, return, false, ;, }]
[-, 1, ), ;, if, (, !, (, first, instanceof, Anchor, &&, last, instanceof, Anchor, ), ), {, return, false]
[., size, (, ), -, 1, ), ;, if, (, !, (, first, instanceof, Anchor, &&, last, instanceof, Anchor, )]
[., elements, ., size, (, ), -, 1, ), ;, if, (, !, (, first, instanceof, Anchor, &&, last, instanceof]
[), ;, if, (, !, (, first, instanceof, Anchor, &&, last, instanceof, Anchor, ), ), {, return, false, ;, }]
[), {, return, false, ;, }, return, (, (, Anchor, ), first, ), ., type, ==, '^', &&, (, (]
[), {, return, false, ;, }, return, (, (, Anchor, ), first, ), ., type, ==, '^', &&, (, (]
[), ), {, return, false, ;, }, return, (, (, Anchor, ), first, ), ., type, ==, '^', &&, (]
[&&, last, instanceof, Anchor, ), ), {, return, false, ;, }, return, (, (, Anchor, ), first, ), ., type]
[instanceof, Anchor, &&, last, instanceof, Anchor, ), ), {, return, false, ;, }, return, (, (, Anchor, ), first, )]
[), ), {, return, false, ;, }, return, (, (, Anchor, ), first, ), ., type, ==, '^', &&, (]
[instanceof, Anchor, ), ), {, return, false, ;, }, return, (, (, Anchor, ), first, ), ., type, ==, '^']
[;, }, return, (, (, Anchor, ), first, ), ., type, ==, '^', &&, (, (, Anchor, ), last, )]
[;, }, static, abstract, class, RegExpTreeAtom, extends, RegExpTree, {, @, Override, public, boolean, isCaseSensitive, (, ), {, return, false, ;]
[&&, (, (, Anchor, ), last, ), ., type, ==, '$', ;, }, static, abstract, class, RegExpTreeAtom, extends, RegExpTree, {]
[==, '^', &&, (, (, Anchor, ), last, ), ., type, ==, '$', ;, }, static, abstract, class, RegExpTreeAtom, extends]
[., type, ==, '^', &&, (, (, Anchor, ), last, ), ., type, ==, '$', ;, }, static, abstract, class]
[), ., type, ==, '^', &&, (, (, Anchor, ), last, ), ., type, ==, '$', ;, }, static, abstract]
[), ., type, ==, '^', &&, (, (, Anchor, ), last, ), ., type, ==, '$', ;, }, static, abstract]
[&&, (, (, Anchor, ), last, ), ., type, ==, '$', ;, }, static, abstract, class, RegExpTreeAtom, extends, RegExpTree, {]
[;, }, static, abstract, class, RegExpTreeAtom, extends, RegExpTree, {, @, Override, public, boolean, isCaseSensitive, (, ), {, return, false, ;]
[==, '$', ;, }, static, abstract, class, RegExpTreeAtom, extends, RegExpTree, {, @, Override, public, boolean, isCaseSensitive, (, ), {, return]
[., type, ==, '$', ;, }, static, abstract, class, RegExpTreeAtom, extends, RegExpTree, {, @, Override, public, boolean, isCaseSensitive, (, )]
[), ., type, ==, '$', ;, }, static, abstract, class, RegExpTreeAtom, extends, RegExpTree, {, @, Override, public, boolean, isCaseSensitive, (]
[), ., type, ==, '$', ;, }, static, abstract, class, RegExpTreeAtom, extends, RegExpTree, {, @, Override, public, boolean, isCaseSensitive, (]
[;, }, static, abstract, class, RegExpTreeAtom, extends, RegExpTree, {, @, Override, public, boolean, isCaseSensitive, (, ), {, return, false, ;]
[;, }, @, Override, public, boolean, containsAnchor, (, ), {, return, false, ;, }, @, Override, public, final, int, numCapturingGroups]
[;, }, @, Override, public, final, int, numCapturingGroups, (, ), {, return, 0, ;, }, @, Override, public, final, List]
[;, }, @, Override, public, final, List, <, ?, extends, RegExpTree, >, children, (, ), {, return, ImmutableList, ., of]
[;, }, }, static, final, class, Empty, extends, RegExpTreeAtom, {, static, final, Empty, INSTANCE, =, new, Empty, (, ), ;]
[., of, (, ), ;, }, }, static, final, class, Empty, extends, RegExpTreeAtom, {, static, final, Empty, INSTANCE, =, new]
[;, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return, this, ;, }, @, Override, protected, void, appendSourceCode]
[;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 0x7ee06141, ;, }, }, static, final, class, Anchor, extends]
[instanceof, Empty, ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x7ee06141, ;, }, }, static, final, class]
[;, }, }, static, final, class, Anchor, extends, RegExpTreeAtom, {, final, char, type, ;, Anchor, (, char, type, ), {]
[=, type, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return, this, ;, }, @, Override]
[., type, =, type, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return, this, ;, }]
[;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return, this, ;, }, @, Override, public, boolean]
[;, }, @, Override, public, boolean, containsAnchor, (, ), {, return, true, ;, }, @, Override, protected, void, appendSourceCode, (]
[;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (, type, ), ;, }]
[;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (, type, ), ;, }]
[., append, (, type, ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append]
[), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (, type, ), ;]
[;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Anchor, &&, type, ==, (]
[., append, (, type, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof]
[), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Anchor, &&, type, ==]
[;, }, @, Override, public, int, hashCode, (, ), {, return, type, ^, 0xe85317ff, ;, }, }, static, final, class]
[&&, type, ==, (, (, Anchor, ), o, ), ., type, ;, }, @, Override, public, int, hashCode, (, )]
[instanceof, Anchor, &&, type, ==, (, (, Anchor, ), o, ), ., type, ;, }, @, Override, public, int, hashCode]
[;, }, @, Override, public, int, hashCode, (, ), {, return, type, ^, 0xe85317ff, ;, }, }, static, final, class]
[==, (, (, Anchor, ), o, ), ., type, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[;, }, @, Override, public, int, hashCode, (, ), {, return, type, ^, 0xe85317ff, ;, }, }, static, final, class]
[., type, ;, }, @, Override, public, int, hashCode, (, ), {, return, type, ^, 0xe85317ff, ;, }, }, static]
[), ., type, ;, }, @, Override, public, int, hashCode, (, ), {, return, type, ^, 0xe85317ff, ;, }, }]
[), ., type, ;, }, @, Override, public, int, hashCode, (, ), {, return, type, ^, 0xe85317ff, ;, }, }]
[;, }, }, static, final, class, WordBoundary, extends, RegExpTreeAtom, {, final, char, type, ;, WordBoundary, (, char, type, ), {]
[^, 0xe85317ff, ;, }, }, static, final, class, WordBoundary, extends, RegExpTreeAtom, {, final, char, type, ;, WordBoundary, (, char, type]
[;, }, }, static, final, class, WordBoundary, extends, RegExpTreeAtom, {, final, char, type, ;, WordBoundary, (, char, type, ), {]
[=, type, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return, this, ;, }, @, Override]
[., type, =, type, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return, this, ;, }]
[;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return, this, ;, }, @, Override, protected, void]
[;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (, '\\', ), ., append]
[;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (, type, ), ;, }]
[., append, (, type, ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append]
[., append, (, '\\', ), ., append, (, type, ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb]
[), ., append, (, type, ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, .]
[), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (, type, ), ;]
[;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, WordBoundary, &&, type, ==, (]
[., append, (, type, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof]
[), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, WordBoundary, &&, type, ==]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 0x5673aa29, ^, type, ;, }, }, static, final, class]
[&&, type, ==, (, (, WordBoundary, ), o, ), ., type, ;, }, @, Override, public, int, hashCode, (, )]
[instanceof, WordBoundary, &&, type, ==, (, (, WordBoundary, ), o, ), ., type, ;, }, @, Override, public, int, hashCode]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 0x5673aa29, ^, type, ;, }, }, static, final, class]
[==, (, (, WordBoundary, ), o, ), ., type, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 0x5673aa29, ^, type, ;, }, }, static, final, class]
[., type, ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x5673aa29, ^, type, ;, }, }, static]
[), ., type, ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x5673aa29, ^, type, ;, }, }]
[), ., type, ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x5673aa29, ^, type, ;, }, }]
[;, }, }, static, final, class, BackReference, extends, RegExpTreeAtom, {, final, int, groupIndex, ;, BackReference, (, int, groupIndex, ), {]
[^, type, ;, }, }, static, final, class, BackReference, extends, RegExpTreeAtom, {, final, int, groupIndex, ;, BackReference, (, int, groupIndex]
[;, }, }, static, final, class, BackReference, extends, RegExpTreeAtom, {, final, int, groupIndex, ;, BackReference, (, int, groupIndex, ), {]
[;, this, ., groupIndex, =, groupIndex, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return, this]
[., checkArgument, (, groupIndex, >=, 0, &&, groupIndex, <=, 99, ), ;, this, ., groupIndex, =, groupIndex, ;, }, @]
[), ;, this, ., groupIndex, =, groupIndex, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return]
[&&, groupIndex, <=, 99, ), ;, this, ., groupIndex, =, groupIndex, ;, }, @, Override, public, RegExpTree, simplify, (, String]
[>=, 0, &&, groupIndex, <=, 99, ), ;, this, ., groupIndex, =, groupIndex, ;, }, @, Override, public, RegExpTree, simplify]
[&&, groupIndex, <=, 99, ), ;, this, ., groupIndex, =, groupIndex, ;, }, @, Override, public, RegExpTree, simplify, (, String]
[), ;, this, ., groupIndex, =, groupIndex, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return]
[<=, 99, ), ;, this, ., groupIndex, =, groupIndex, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, )]
[), ;, this, ., groupIndex, =, groupIndex, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return]
[=, groupIndex, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return, this, ;, }, @, Override]
[., groupIndex, =, groupIndex, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return, this, ;, }]
[;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return, this, ;, }, @, Override, protected, void]
[;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (, '\\', ), ., append]
[;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (, groupIndex, ), ;, }]
[., append, (, groupIndex, ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append]
[., append, (, '\\', ), ., append, (, groupIndex, ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb]
[), ., append, (, groupIndex, ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, .]
[), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (, groupIndex, ), ;]
[;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, BackReference, &&, groupIndex, ==, (]
[., append, (, groupIndex, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof]
[), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, BackReference, &&, groupIndex, ==]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 0xff072663, ^, groupIndex, ;, }, }, static, final, class]
[&&, groupIndex, ==, (, (, BackReference, ), o, ), ., groupIndex, ;, }, @, Override, public, int, hashCode, (, )]
[instanceof, BackReference, &&, groupIndex, ==, (, (, BackReference, ), o, ), ., groupIndex, ;, }, @, Override, public, int, hashCode]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 0xff072663, ^, groupIndex, ;, }, }, static, final, class]
[==, (, (, BackReference, ), o, ), ., groupIndex, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 0xff072663, ^, groupIndex, ;, }, }, static, final, class]
[., groupIndex, ;, }, @, Override, public, int, hashCode, (, ), {, return, 0xff072663, ^, groupIndex, ;, }, }, static]
[), ., groupIndex, ;, }, @, Override, public, int, hashCode, (, ), {, return, 0xff072663, ^, groupIndex, ;, }, }]
[), ., groupIndex, ;, }, @, Override, public, int, hashCode, (, ), {, return, 0xff072663, ^, groupIndex, ;, }, }]
[;, }, }, static, final, class, Text, extends, RegExpTreeAtom, {, final, String, text, ;, Text, (, String, text, ), {]
[^, groupIndex, ;, }, }, static, final, class, Text, extends, RegExpTreeAtom, {, final, String, text, ;, Text, (, String, text]
[;, }, }, static, final, class, Text, extends, RegExpTreeAtom, {, final, String, text, ;, Text, (, String, text, ), {]
[=, text, ;, }, private, static, void, escapeRegularCharOnto, (, char, ch, ,, int, next, ,, StringBuilder, sb, ), {, switch]
[., text, =, text, ;, }, private, static, void, escapeRegularCharOnto, (, char, ch, ,, int, next, ,, StringBuilder, sb, )]
[;, }, private, static, void, escapeRegularCharOnto, (, char, ch, ,, int, next, ,, StringBuilder, sb, ), {, switch, (, ch]
[), {, case, '$', :, case, '^', :, case, '*', :, case, '(', :, case, ')', :, case, '+', :]
[:, case, '^', :, case, '*', :, case, '(', :, case, ')', :, case, '+', :, case, '[', :, case]
[:, case, '*', :, case, '(', :, case, ')', :, case, '+', :, case, '[', :, case, '|', :, case]
[:, case, '(', :, case, ')', :, case, '+', :, case, '[', :, case, '|', :, case, '.', :, case]
[:, case, ')', :, case, '+', :, case, '[', :, case, '|', :, case, '.', :, case, '/', :, case]
[:, case, '+', :, case, '[', :, case, '|', :, case, '.', :, case, '/', :, case, '?', :, sb]
[:, case, '[', :, case, '|', :, case, '.', :, case, '/', :, case, '?', :, sb, ., append, (]
[:, case, '|', :, case, '.', :, case, '/', :, case, '?', :, sb, ., append, (, '\\', ), .]
[:, case, '.', :, case, '/', :, case, '?', :, sb, ., append, (, '\\', ), ., append, (, ch]
[:, case, '/', :, case, '?', :, sb, ., append, (, '\\', ), ., append, (, ch, ), ;, break]
[:, case, '?', :, sb, ., append, (, '\\', ), ., append, (, ch, ), ;, break, ;, case, '{']
[:, sb, ., append, (, '\\', ), ., append, (, ch, ), ;, break, ;, case, '{', :, if, (]
[;, break, ;, case, '{', :, if, (, '0', <=, next, &&, next, <=, '9', ), {, sb, ., append]
[., append, (, ch, ), ;, break, ;, case, '{', :, if, (, '0', <=, next, &&, next, <=, '9']
[., append, (, '\\', ), ., append, (, ch, ), ;, break, ;, case, '{', :, if, (, '0', <=]
[), ., append, (, ch, ), ;, break, ;, case, '{', :, if, (, '0', <=, next, &&, next, <=]
[), ;, break, ;, case, '{', :, if, (, '0', <=, next, &&, next, <=, '9', ), {, sb, .]
[:, if, (, '0', <=, next, &&, next, <=, '9', ), {, sb, ., append, (, '\\', ), ;, }]
[), {, sb, ., append, (, '\\', ), ;, }, sb, ., append, (, ch, ), ;, break, ;, default]
[&&, next, <=, '9', ), {, sb, ., append, (, '\\', ), ;, }, sb, ., append, (, ch, )]
[<=, next, &&, next, <=, '9', ), {, sb, ., append, (, '\\', ), ;, }, sb, ., append, (]
[&&, next, <=, '9', ), {, sb, ., append, (, '\\', ), ;, }, sb, ., append, (, ch, )]
[), {, sb, ., append, (, '\\', ), ;, }, sb, ., append, (, ch, ), ;, break, ;, default]
[<=, '9', ), {, sb, ., append, (, '\\', ), ;, }, sb, ., append, (, ch, ), ;, break]
[), {, sb, ., append, (, '\\', ), ;, }, sb, ., append, (, ch, ), ;, break, ;, default]
[;, }, sb, ., append, (, ch, ), ;, break, ;, default, :, escapeCharOnto, (, ch, ,, sb, ), ;]
[., append, (, '\\', ), ;, }, sb, ., append, (, ch, ), ;, break, ;, default, :, escapeCharOnto, (]
[), ;, }, sb, ., append, (, ch, ), ;, break, ;, default, :, escapeCharOnto, (, ch, ,, sb, )]
[;, break, ;, default, :, escapeCharOnto, (, ch, ,, sb, ), ;, }, }, @, Override, public, RegExpTree, simplify, (]
[., append, (, ch, ), ;, break, ;, default, :, escapeCharOnto, (, ch, ,, sb, ), ;, }, }, @]
[), ;, break, ;, default, :, escapeCharOnto, (, ch, ,, sb, ), ;, }, }, @, Override, public, RegExpTree, simplify]
[;, }, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, int, n, =, text, ., length, (]
[,, sb, ), ;, }, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, int, n, =, text]
[), ;, }, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, int, n, =, text, ., length]
[;, if, (, n, ==, 0, ), {, return, Empty, ., INSTANCE, ;, }, if, (, flags, ., indexOf, (]
[., length, (, ), ;, if, (, n, ==, 0, ), {, return, Empty, ., INSTANCE, ;, }, if, (]
[), {, return, Empty, ., INSTANCE, ;, }, if, (, flags, ., indexOf, (, 'i', ), >=, 0, ), {]
[==, 0, ), {, return, Empty, ., INSTANCE, ;, }, if, (, flags, ., indexOf, (, 'i', ), >=, 0]
[), {, return, Empty, ., INSTANCE, ;, }, if, (, flags, ., indexOf, (, 'i', ), >=, 0, ), {]
[;, }, if, (, flags, ., indexOf, (, 'i', ), >=, 0, ), {, String, canonicalized, =, CaseCanonicalize, ., caseCanonicalize]
[., INSTANCE, ;, }, if, (, flags, ., indexOf, (, 'i', ), >=, 0, ), {, String, canonicalized, =, CaseCanonicalize]
[), {, String, canonicalized, =, CaseCanonicalize, ., caseCanonicalize, (, text, ), ;, if, (, text, !=, canonicalized, ), {, return]
[>=, 0, ), {, String, canonicalized, =, CaseCanonicalize, ., caseCanonicalize, (, text, ), ;, if, (, text, !=, canonicalized, )]
[., indexOf, (, 'i', ), >=, 0, ), {, String, canonicalized, =, CaseCanonicalize, ., caseCanonicalize, (, text, ), ;, if]
[), >=, 0, ), {, String, canonicalized, =, CaseCanonicalize, ., caseCanonicalize, (, text, ), ;, if, (, text, !=, canonicalized]
[), {, String, canonicalized, =, CaseCanonicalize, ., caseCanonicalize, (, text, ), ;, if, (, text, !=, canonicalized, ), {, return]
[;, if, (, text, !=, canonicalized, ), {, return, new, Text, (, canonicalized, ), ;, }, }, return, this, ;]
[., caseCanonicalize, (, text, ), ;, if, (, text, !=, canonicalized, ), {, return, new, Text, (, canonicalized, ), ;]
[), ;, if, (, text, !=, canonicalized, ), {, return, new, Text, (, canonicalized, ), ;, }, }, return, this]
[), {, return, new, Text, (, canonicalized, ), ;, }, }, return, this, ;, }, @, Override, public, boolean, isCaseSensitive]
[!=, canonicalized, ), {, return, new, Text, (, canonicalized, ), ;, }, }, return, this, ;, }, @, Override, public]
[), {, return, new, Text, (, canonicalized, ), ;, }, }, return, this, ;, }, @, Override, public, boolean, isCaseSensitive]
[;, }, }, return, this, ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, for, (, int, i, =]
[), ;, }, }, return, this, ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, for, (, int, i]
[;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, for, (, int, i, =, 0, ,, n, =, text]
[,, n, =, text, ., length, (, ), ;, i, <, n, ;, ++, i, ), {, if, (, CaseCanonicalize]
[;, i, <, n, ;, ++, i, ), {, if, (, CaseCanonicalize, ., CASE_SENSITIVE, ., contains, (, text, ., charAt]
[., length, (, ), ;, i, <, n, ;, ++, i, ), {, if, (, CaseCanonicalize, ., CASE_SENSITIVE, ., contains]
[;, ++, i, ), {, if, (, CaseCanonicalize, ., CASE_SENSITIVE, ., contains, (, text, ., charAt, (, i, ), )]
[<, n, ;, ++, i, ), {, if, (, CaseCanonicalize, ., CASE_SENSITIVE, ., contains, (, text, ., charAt, (, i]
[;, ++, i, ), {, if, (, CaseCanonicalize, ., CASE_SENSITIVE, ., contains, (, text, ., charAt, (, i, ), )]
[), {, if, (, CaseCanonicalize, ., CASE_SENSITIVE, ., contains, (, text, ., charAt, (, i, ), ), ), {, return]
[), {, if, (, CaseCanonicalize, ., CASE_SENSITIVE, ., contains, (, text, ., charAt, (, i, ), ), ), {, return]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, )]
[., contains, (, text, ., charAt, (, i, ), ), ), {, return, true, ;, }, }, return, false, ;]
[., CASE_SENSITIVE, ., contains, (, text, ., charAt, (, i, ), ), ), {, return, true, ;, }, }, return]
[), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb]
[., charAt, (, i, ), ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, protected]
[), ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder]
[;, }, }, return, false, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, for, (, int]
[;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, for, (, int, i, =, 0, ,, n]
[,, n, =, text, ., length, (, ), ;, i, <, n, ;, ++, i, ), {, escapeRegularCharOnto, (, text]
[;, i, <, n, ;, ++, i, ), {, escapeRegularCharOnto, (, text, ., charAt, (, i, ), ,, i, +]
[., length, (, ), ;, i, <, n, ;, ++, i, ), {, escapeRegularCharOnto, (, text, ., charAt, (, i]
[;, ++, i, ), {, escapeRegularCharOnto, (, text, ., charAt, (, i, ), ,, i, +, 1, <, n, ?]
[<, n, ;, ++, i, ), {, escapeRegularCharOnto, (, text, ., charAt, (, i, ), ,, i, +, 1, <]
[;, ++, i, ), {, escapeRegularCharOnto, (, text, ., charAt, (, i, ), ,, i, +, 1, <, n, ?]
[), {, escapeRegularCharOnto, (, text, ., charAt, (, i, ), ,, i, +, 1, <, n, ?, text, ., charAt]
[), {, escapeRegularCharOnto, (, text, ., charAt, (, i, ), ,, i, +, 1, <, n, ?, text, ., charAt]
[;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (, '`', ), .]
[,, i, +, 1, <, n, ?, text, ., charAt, (, i, +, 1, ), :, -, 1, ,, sb]
[., charAt, (, i, ), ,, i, +, 1, <, n, ?, text, ., charAt, (, i, +, 1, )]
[), ,, i, +, 1, <, n, ?, text, ., charAt, (, i, +, 1, ), :, -, 1, ,]
[,, sb, ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (]
[?, text, ., charAt, (, i, +, 1, ), :, -, 1, ,, sb, ), ;, }, }, @, Override]
[<, n, ?, text, ., charAt, (, i, +, 1, ), :, -, 1, ,, sb, ), ;, }, }]
[+, 1, <, n, ?, text, ., charAt, (, i, +, 1, ), :, -, 1, ,, sb, ), ;]
[<, n, ?, text, ., charAt, (, i, +, 1, ), :, -, 1, ,, sb, ), ;, }, }]
[?, text, ., charAt, (, i, +, 1, ), :, -, 1, ,, sb, ), ;, }, }, @, Override]
[:, -, 1, ,, sb, ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb]
[., charAt, (, i, +, 1, ), :, -, 1, ,, sb, ), ;, }, }, @, Override, protected, void]
[), :, -, 1, ,, sb, ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[+, 1, ), :, -, 1, ,, sb, ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb]
[), :, -, 1, ,, sb, ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[,, sb, ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (]
[,, sb, ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (]
[), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (, '`', )]
[;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Text, &&, text, ., equals]
[., append, (, '`', ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof]
[., append, (, text, ), ., append, (, '`', ), ;, }, @, Override, public, boolean, equals, (, Object, o]
[., append, (, '`', ), ., append, (, text, ), ., append, (, '`', ), ;, }, @, Override, public]
[), ., append, (, text, ), ., append, (, '`', ), ;, }, @, Override, public, boolean, equals, (, Object]
[), ., append, (, '`', ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o]
[), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Text, &&, text, .]
[;, }, @, Override, public, int, hashCode, (, ), {, return, text, ., hashCode, (, ), ^, 0x617e310, ;, }]
[&&, text, ., equals, (, (, (, Text, ), o, ), ., text, ), ;, }, @, Override, public, int]
[instanceof, Text, &&, text, ., equals, (, (, (, Text, ), o, ), ., text, ), ;, }, @, Override]
[;, }, @, Override, public, int, hashCode, (, ), {, return, text, ., hashCode, (, ), ^, 0x617e310, ;, }]
[., equals, (, (, (, Text, ), o, ), ., text, ), ;, }, @, Override, public, int, hashCode, (]
[), ;, }, @, Override, public, int, hashCode, (, ), {, return, text, ., hashCode, (, ), ^, 0x617e310, ;]
[., text, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, text, ., hashCode, (, ), ^]
[), ., text, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, text, ., hashCode, (, )]
[), ., text, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, text, ., hashCode, (, )]
[;, }, }, static, final, class, Repetition, extends, RegExpTree, {, final, RegExpTree, body, ;, final, int, min, ,, max, ;]
[^, 0x617e310, ;, }, }, static, final, class, Repetition, extends, RegExpTree, {, final, RegExpTree, body, ;, final, int, min, ,]
[., hashCode, (, ), ^, 0x617e310, ;, }, }, static, final, class, Repetition, extends, RegExpTree, {, final, RegExpTree, body, ;]
[;, }, }, static, final, class, Repetition, extends, RegExpTree, {, final, RegExpTree, body, ;, final, int, min, ,, max, ;]
[=, body, ;, this, ., min, =, min, ;, this, ., max, =, max, ;, this, ., greedy, =, greedy]
[., body, =, body, ;, this, ., min, =, min, ;, this, ., max, =, max, ;, this, ., greedy]
[;, this, ., min, =, min, ;, this, ., max, =, max, ;, this, ., greedy, =, greedy, ;, }]
[=, min, ;, this, ., max, =, max, ;, this, ., greedy, =, greedy, ;, }, @, Override, public, RegExpTree]
[., min, =, min, ;, this, ., max, =, max, ;, this, ., greedy, =, greedy, ;, }, @, Override]
[;, this, ., max, =, max, ;, this, ., greedy, =, greedy, ;, }, @, Override, public, RegExpTree, simplify, (]
[=, max, ;, this, ., greedy, =, greedy, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {]
[., max, =, max, ;, this, ., greedy, =, greedy, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags]
[;, this, ., greedy, =, greedy, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, RegExpTree, body]
[=, greedy, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, RegExpTree, body, =, this, ., body]
[., greedy, =, greedy, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, RegExpTree, body, =, this]
[;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, RegExpTree, body, =, this, ., body, ., simplify]
[;, if, (, max, ==, 0, &&, !, body, ., hasCapturingGroup, (, ), ), {, return, Empty, ., INSTANCE, ;]
[., simplify, (, flags, ), ;, if, (, max, ==, 0, &&, !, body, ., hasCapturingGroup, (, ), ), {]
[., body, ., simplify, (, flags, ), ;, if, (, max, ==, 0, &&, !, body, ., hasCapturingGroup, (, )]
[), ;, if, (, max, ==, 0, &&, !, body, ., hasCapturingGroup, (, ), ), {, return, Empty, ., INSTANCE]
[), {, return, Empty, ., INSTANCE, ;, }, if, (, body, instanceof, Empty, ||, NEVER_MATCHES, ., equals, (, body, )]
[&&, !, body, ., hasCapturingGroup, (, ), ), {, return, Empty, ., INSTANCE, ;, }, if, (, body, instanceof, Empty]
[==, 0, &&, !, body, ., hasCapturingGroup, (, ), ), {, return, Empty, ., INSTANCE, ;, }, if, (, body]
[&&, !, body, ., hasCapturingGroup, (, ), ), {, return, Empty, ., INSTANCE, ;, }, if, (, body, instanceof, Empty]
[), {, return, Empty, ., INSTANCE, ;, }, if, (, body, instanceof, Empty, ||, NEVER_MATCHES, ., equals, (, body, )]
[), {, return, Empty, ., INSTANCE, ;, }, if, (, body, instanceof, Empty, ||, NEVER_MATCHES, ., equals, (, body, )]
[., hasCapturingGroup, (, ), ), {, return, Empty, ., INSTANCE, ;, }, if, (, body, instanceof, Empty, ||, NEVER_MATCHES, .]
[;, }, if, (, body, instanceof, Empty, ||, NEVER_MATCHES, ., equals, (, body, ), ), {, return, body, ;, }]
[., INSTANCE, ;, }, if, (, body, instanceof, Empty, ||, NEVER_MATCHES, ., equals, (, body, ), ), {, return, body]
[), {, return, body, ;, }, int, min, =, this, ., min, ;, int, max, =, this, ., max, ;]
[||, NEVER_MATCHES, ., equals, (, body, ), ), {, return, body, ;, }, int, min, =, this, ., min, ;]
[instanceof, Empty, ||, NEVER_MATCHES, ., equals, (, body, ), ), {, return, body, ;, }, int, min, =, this, .]
[), {, return, body, ;, }, int, min, =, this, ., min, ;, int, max, =, this, ., max, ;]
[., equals, (, body, ), ), {, return, body, ;, }, int, min, =, this, ., min, ;, int, max]
[), ), {, return, body, ;, }, int, min, =, this, ., min, ;, int, max, =, this, ., max]
[;, }, int, min, =, this, ., min, ;, int, max, =, this, ., max, ;, if, (, body, instanceof]
[;, int, max, =, this, ., max, ;, if, (, body, instanceof, Repetition, ), {, Repetition, rbody, =, (, Repetition]
[., min, ;, int, max, =, this, ., max, ;, if, (, body, instanceof, Repetition, ), {, Repetition, rbody, =]
[;, if, (, body, instanceof, Repetition, ), {, Repetition, rbody, =, (, Repetition, ), body, ;, if, (, rbody, .]
[., max, ;, if, (, body, instanceof, Repetition, ), {, Repetition, rbody, =, (, Repetition, ), body, ;, if, (]
[), {, Repetition, rbody, =, (, Repetition, ), body, ;, if, (, rbody, ., greedy, ==, greedy, ), {, long]
[instanceof, Repetition, ), {, Repetition, rbody, =, (, Repetition, ), body, ;, if, (, rbody, ., greedy, ==, greedy, )]
[;, if, (, rbody, ., greedy, ==, greedy, ), {, long, lmin, =, (, (, long, ), min, ), *]
[;, if, (, rbody, ., greedy, ==, greedy, ), {, long, lmin, =, (, (, long, ), min, ), *]
[), {, long, lmin, =, (, (, long, ), min, ), *, rbody, ., min, ;, long, lmax, =, (]
[==, greedy, ), {, long, lmin, =, (, (, long, ), min, ), *, rbody, ., min, ;, long, lmax]
[., greedy, ==, greedy, ), {, long, lmin, =, (, (, long, ), min, ), *, rbody, ., min, ;]
[), {, long, lmin, =, (, (, long, ), min, ), *, rbody, ., min, ;, long, lmax, =, (]
[;, long, lmax, =, (, (, long, ), max, ), *, rbody, ., max, ;, if, (, lmin, <, Integer]
[*, rbody, ., min, ;, long, lmax, =, (, (, long, ), max, ), *, rbody, ., max, ;, if]
[), *, rbody, ., min, ;, long, lmax, =, (, (, long, ), max, ), *, rbody, ., max, ;]
[), *, rbody, ., min, ;, long, lmax, =, (, (, long, ), max, ), *, rbody, ., max, ;]
[;, long, lmax, =, (, (, long, ), max, ), *, rbody, ., max, ;, if, (, lmin, <, Integer]
[., min, ;, long, lmax, =, (, (, long, ), max, ), *, rbody, ., max, ;, if, (, lmin]
[;, if, (, lmin, <, Integer, ., MAX_VALUE, ), {, body, =, rbody, ., body, ;, min, =, (, int]
[*, rbody, ., max, ;, if, (, lmin, <, Integer, ., MAX_VALUE, ), {, body, =, rbody, ., body, ;]
[), *, rbody, ., max, ;, if, (, lmin, <, Integer, ., MAX_VALUE, ), {, body, =, rbody, ., body]
[), *, rbody, ., max, ;, if, (, lmin, <, Integer, ., MAX_VALUE, ), {, body, =, rbody, ., body]
[;, if, (, lmin, <, Integer, ., MAX_VALUE, ), {, body, =, rbody, ., body, ;, min, =, (, int]
[., max, ;, if, (, lmin, <, Integer, ., MAX_VALUE, ), {, body, =, rbody, ., body, ;, min, =]
[), {, body, =, rbody, ., body, ;, min, =, (, int, ), lmin, ;, max, =, lmax, >=, Integer]
[<, Integer, ., MAX_VALUE, ), {, body, =, rbody, ., body, ;, min, =, (, int, ), lmin, ;, max]
[), {, body, =, rbody, ., body, ;, min, =, (, int, ), lmin, ;, max, =, lmax, >=, Integer]
[., MAX_VALUE, ), {, body, =, rbody, ., body, ;, min, =, (, int, ), lmin, ;, max, =, lmax]
[=, rbody, ., body, ;, min, =, (, int, ), lmin, ;, max, =, lmax, >=, Integer, ., MAX_VALUE, ?]
[;, min, =, (, int, ), lmin, ;, max, =, lmax, >=, Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :]
[., body, ;, min, =, (, int, ), lmin, ;, max, =, lmax, >=, Integer, ., MAX_VALUE, ?, Integer, .]
[=, (, int, ), lmin, ;, max, =, lmax, >=, Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int]
[;, max, =, lmax, >=, Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, }, }]
[;, max, =, lmax, >=, Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, }, }]
[=, lmax, >=, Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, }, }, }, if]
[;, }, }, }, if, (, min, ==, 1, &&, max, ==, 1, ), {, return, body, ;, }, boolean]
[?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, }, }, }, if, (, min, ==, 1, &&, max]
[>=, Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, }, }, }, if, (, min]
[?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, }, }, }, if, (, min, ==, 1, &&, max]
[., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, }, }, }, if, (, min, ==, 1]
[:, (, int, ), lmax, ;, }, }, }, if, (, min, ==, 1, &&, max, ==, 1, ), {]
[., MAX_VALUE, :, (, int, ), lmax, ;, }, }, }, if, (, min, ==, 1, &&, max, ==, 1]
[;, }, }, }, if, (, min, ==, 1, &&, max, ==, 1, ), {, return, body, ;, }, boolean]
[;, }, }, }, if, (, min, ==, 1, &&, max, ==, 1, ), {, return, body, ;, }, boolean]
[), {, return, body, ;, }, boolean, greedy, =, this, ., greedy, ||, min, ==, max, ;, return, body, .]
[&&, max, ==, 1, ), {, return, body, ;, }, boolean, greedy, =, this, ., greedy, ||, min, ==, max]
[==, 1, &&, max, ==, 1, ), {, return, body, ;, }, boolean, greedy, =, this, ., greedy, ||, min]
[&&, max, ==, 1, ), {, return, body, ;, }, boolean, greedy, =, this, ., greedy, ||, min, ==, max]
[), {, return, body, ;, }, boolean, greedy, =, this, ., greedy, ||, min, ==, max, ;, return, body, .]
[==, 1, ), {, return, body, ;, }, boolean, greedy, =, this, ., greedy, ||, min, ==, max, ;, return]
[), {, return, body, ;, }, boolean, greedy, =, this, ., greedy, ||, min, ==, max, ;, return, body, .]
[;, }, boolean, greedy, =, this, ., greedy, ||, min, ==, max, ;, return, body, ., equals, (, this, .]
[;, return, body, ., equals, (, this, ., body, ), &&, min, ==, this, ., min, &&, max, ==, this]
[||, min, ==, max, ;, return, body, ., equals, (, this, ., body, ), &&, min, ==, this, ., min]
[., greedy, ||, min, ==, max, ;, return, body, ., equals, (, this, ., body, ), &&, min, ==, this]
[;, return, body, ., equals, (, this, ., body, ), &&, min, ==, this, ., min, &&, max, ==, this]
[==, max, ;, return, body, ., equals, (, this, ., body, ), &&, min, ==, this, ., min, &&, max]
[;, return, body, ., equals, (, this, ., body, ), &&, min, ==, this, ., min, &&, max, ==, this]
[;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, return, body, ., isCaseSensitive, (, ), ;, }, @, Override]
[?, this, :, new, Repetition, (, body, ,, min, ,, max, ,, greedy, ), ., simplify, (, flags, ), ;]
[&&, greedy, ==, this, ., greedy, ?, this, :, new, Repetition, (, body, ,, min, ,, max, ,, greedy, )]
[&&, max, ==, this, ., max, &&, greedy, ==, this, ., greedy, ?, this, :, new, Repetition, (, body, ,]
[&&, min, ==, this, ., min, &&, max, ==, this, ., max, &&, greedy, ==, this, ., greedy, ?, this]
[., equals, (, this, ., body, ), &&, min, ==, this, ., min, &&, max, ==, this, ., max, &&]
[), &&, min, ==, this, ., min, &&, max, ==, this, ., max, &&, greedy, ==, this, ., greedy, ?]
[., body, ), &&, min, ==, this, ., min, &&, max, ==, this, ., max, &&, greedy, ==, this, .]
[&&, max, ==, this, ., max, &&, greedy, ==, this, ., greedy, ?, this, :, new, Repetition, (, body, ,]
[==, this, ., min, &&, max, ==, this, ., max, &&, greedy, ==, this, ., greedy, ?, this, :, new]
[&&, max, ==, this, ., max, &&, greedy, ==, this, ., greedy, ?, this, :, new, Repetition, (, body, ,]
[., min, &&, max, ==, this, ., max, &&, greedy, ==, this, ., greedy, ?, this, :, new, Repetition, (]
[&&, greedy, ==, this, ., greedy, ?, this, :, new, Repetition, (, body, ,, min, ,, max, ,, greedy, )]
[==, this, ., max, &&, greedy, ==, this, ., greedy, ?, this, :, new, Repetition, (, body, ,, min, ,]
[&&, greedy, ==, this, ., greedy, ?, this, :, new, Repetition, (, body, ,, min, ,, max, ,, greedy, )]
[., max, &&, greedy, ==, this, ., greedy, ?, this, :, new, Repetition, (, body, ,, min, ,, max, ,]
[?, this, :, new, Repetition, (, body, ,, min, ,, max, ,, greedy, ), ., simplify, (, flags, ), ;]
[==, this, ., greedy, ?, this, :, new, Repetition, (, body, ,, min, ,, max, ,, greedy, ), ., simplify]
[?, this, :, new, Repetition, (, body, ,, min, ,, max, ,, greedy, ), ., simplify, (, flags, ), ;]
[., greedy, ?, this, :, new, Repetition, (, body, ,, min, ,, max, ,, greedy, ), ., simplify, (, flags]
[:, new, Repetition, (, body, ,, min, ,, max, ,, greedy, ), ., simplify, (, flags, ), ;, }, @]
[;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, return, body, ., isCaseSensitive, (, ), ;, }, @, Override]
[., simplify, (, flags, ), ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, return, body, ., isCaseSensitive, (]
[,, min, ,, max, ,, greedy, ), ., simplify, (, flags, ), ;, }, @, Override, public, boolean, isCaseSensitive, (]
[,, max, ,, greedy, ), ., simplify, (, flags, ), ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {]
[,, greedy, ), ., simplify, (, flags, ), ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, return, body]
[), ., simplify, (, flags, ), ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, return, body, ., isCaseSensitive]
[), ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, return, body, ., isCaseSensitive, (, ), ;, }, @]
[;, }, @, Override, public, boolean, containsAnchor, (, ), {, return, body, ., containsAnchor, (, ), ;, }, @, Override]
[., isCaseSensitive, (, ), ;, }, @, Override, public, boolean, containsAnchor, (, ), {, return, body, ., containsAnchor, (, )]
[;, }, @, Override, public, int, numCapturingGroups, (, ), {, return, body, ., numCapturingGroups, (, ), ;, }, @, Override]
[., containsAnchor, (, ), ;, }, @, Override, public, int, numCapturingGroups, (, ), {, return, body, ., numCapturingGroups, (, )]
[;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children, (, ), {, return, ImmutableList, ., of, (]
[., numCapturingGroups, (, ), ;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children, (, ), {, return]
[;, }, private, void, appendBodySourceCode, (, StringBuilder, sb, ), {, if, (, body, instanceof, Alternation, ||, body, instanceof, Concatenation, ||]
[., of, (, body, ), ;, }, private, void, appendBodySourceCode, (, StringBuilder, sb, ), {, if, (, body, instanceof, Alternation]
[), ;, }, private, void, appendBodySourceCode, (, StringBuilder, sb, ), {, if, (, body, instanceof, Alternation, ||, body, instanceof, Concatenation]
[), {, sb, ., append, (, "(?:", ), ;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append, (]
[||, (, body, instanceof, Text, &&, (, (, Text, ), body, ), ., text, ., length, (, ), >, 1]
[||, body, instanceof, Repetition, ||, (, body, instanceof, Text, &&, (, (, Text, ), body, ), ., text, ., length]
[||, body, instanceof, Concatenation, ||, body, instanceof, Repetition, ||, (, body, instanceof, Text, &&, (, (, Text, ), body, )]
[instanceof, Alternation, ||, body, instanceof, Concatenation, ||, body, instanceof, Repetition, ||, (, body, instanceof, Text, &&, (, (, Text, )]
[||, body, instanceof, Repetition, ||, (, body, instanceof, Text, &&, (, (, Text, ), body, ), ., text, ., length]
[instanceof, Concatenation, ||, body, instanceof, Repetition, ||, (, body, instanceof, Text, &&, (, (, Text, ), body, ), ., text]
[||, (, body, instanceof, Text, &&, (, (, Text, ), body, ), ., text, ., length, (, ), >, 1]
[instanceof, Repetition, ||, (, body, instanceof, Text, &&, (, (, Text, ), body, ), ., text, ., length, (, )]
[), {, sb, ., append, (, "(?:", ), ;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append, (]
[), ), {, sb, ., append, (, "(?:", ), ;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append]
[&&, (, (, Text, ), body, ), ., text, ., length, (, ), >, 1, ), ), {, sb, .]
[instanceof, Text, &&, (, (, Text, ), body, ), ., text, ., length, (, ), >, 1, ), ), {]
[), ), {, sb, ., append, (, "(?:", ), ;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append]
[>, 1, ), ), {, sb, ., append, (, "(?:", ), ;, body, ., appendSourceCode, (, sb, ), ;, sb]
[., length, (, ), >, 1, ), ), {, sb, ., append, (, "(?:", ), ;, body, ., appendSourceCode, (]
[., text, ., length, (, ), >, 1, ), ), {, sb, ., append, (, "(?:", ), ;, body, .]
[), ., text, ., length, (, ), >, 1, ), ), {, sb, ., append, (, "(?:", ), ;, body]
[), ., text, ., length, (, ), >, 1, ), ), {, sb, ., append, (, "(?:", ), ;, body]
[), ), {, sb, ., append, (, "(?:", ), ;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append]
[;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;, }, else, {, body, .]
[., append, (, "(?:", ), ;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;]
[), ;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;, }, else, {, body]
[;, sb, ., append, (, ')', ), ;, }, else, {, body, ., appendSourceCode, (, sb, ), ;, }, }]
[., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;, }, else, {, body, ., appendSourceCode, (]
[), ;, sb, ., append, (, ')', ), ;, }, else, {, body, ., appendSourceCode, (, sb, ), ;, }]
[;, }, else, {, body, ., appendSourceCode, (, sb, ), ;, }, }, private, static, int, suffixLen, (, int, min]
[., append, (, ')', ), ;, }, else, {, body, ., appendSourceCode, (, sb, ), ;, }, }, private, static]
[), ;, }, else, {, body, ., appendSourceCode, (, sb, ), ;, }, }, private, static, int, suffixLen, (, int]
[;, }, }, private, static, int, suffixLen, (, int, min, ,, int, max, ), {, if, (, max, ==, Integer]
[., appendSourceCode, (, sb, ), ;, }, }, private, static, int, suffixLen, (, int, min, ,, int, max, ), {]
[), ;, }, }, private, static, int, suffixLen, (, int, min, ,, int, max, ), {, if, (, max, ==]
[), {, switch, (, min, ), {, case, 0, :, return, 1, ;, case, 1, :, return, 1, ;, default]
[==, Integer, ., MAX_VALUE, ), {, switch, (, min, ), {, case, 0, :, return, 1, ;, case, 1, :]
[), {, switch, (, min, ), {, case, 0, :, return, 1, ;, case, 1, :, return, 1, ;, default]
[., MAX_VALUE, ), {, switch, (, min, ), {, case, 0, :, return, 1, ;, case, 1, :, return, 1]
[), {, case, 0, :, return, 1, ;, case, 1, :, return, 1, ;, default, :, return, 3, +, numDecimalDigits]
[:, return, 1, ;, case, 1, :, return, 1, ;, default, :, return, 3, +, numDecimalDigits, (, min, ), ;]
[;, case, 1, :, return, 1, ;, default, :, return, 3, +, numDecimalDigits, (, min, ), ;, }, }, if]
[:, return, 1, ;, default, :, return, 3, +, numDecimalDigits, (, min, ), ;, }, }, if, (, min, ==]
[;, default, :, return, 3, +, numDecimalDigits, (, min, ), ;, }, }, if, (, min, ==, 0, &&, max]
[;, }, }, if, (, min, ==, 0, &&, max, ==, 1, ), {, return, 1, ;, }, if, (]
[+, numDecimalDigits, (, min, ), ;, }, }, if, (, min, ==, 0, &&, max, ==, 1, ), {, return]
[;, }, }, if, (, min, ==, 0, &&, max, ==, 1, ), {, return, 1, ;, }, if, (]
[), ;, }, }, if, (, min, ==, 0, &&, max, ==, 1, ), {, return, 1, ;, }, if]
[), {, return, 1, ;, }, if, (, min, ==, max, ), {, if, (, min, ==, 1, ), {]
[&&, max, ==, 1, ), {, return, 1, ;, }, if, (, min, ==, max, ), {, if, (, min]
[==, 0, &&, max, ==, 1, ), {, return, 1, ;, }, if, (, min, ==, max, ), {, if]
[&&, max, ==, 1, ), {, return, 1, ;, }, if, (, min, ==, max, ), {, if, (, min]
[), {, return, 1, ;, }, if, (, min, ==, max, ), {, if, (, min, ==, 1, ), {]
[==, 1, ), {, return, 1, ;, }, if, (, min, ==, max, ), {, if, (, min, ==, 1]
[), {, return, 1, ;, }, if, (, min, ==, max, ), {, if, (, min, ==, 1, ), {]
[;, }, if, (, min, ==, max, ), {, if, (, min, ==, 1, ), {, return, 0, ;, }]
[), {, if, (, min, ==, 1, ), {, return, 0, ;, }, return, 2, +, numDecimalDigits, (, min, )]
[==, max, ), {, if, (, min, ==, 1, ), {, return, 0, ;, }, return, 2, +, numDecimalDigits, (]
[), {, if, (, min, ==, 1, ), {, return, 0, ;, }, return, 2, +, numDecimalDigits, (, min, )]
[), {, return, 0, ;, }, return, 2, +, numDecimalDigits, (, min, ), ;, }, return, 3, +, numDecimalDigits, (]
[==, 1, ), {, return, 0, ;, }, return, 2, +, numDecimalDigits, (, min, ), ;, }, return, 3, +]
[), {, return, 0, ;, }, return, 2, +, numDecimalDigits, (, min, ), ;, }, return, 3, +, numDecimalDigits, (]
[;, }, return, 2, +, numDecimalDigits, (, min, ), ;, }, return, 3, +, numDecimalDigits, (, min, ), +, numDecimalDigits]
[;, }, return, 3, +, numDecimalDigits, (, min, ), +, numDecimalDigits, (, max, ), ;, }, private, static, int, numDecimalDigits]
[+, numDecimalDigits, (, min, ), ;, }, return, 3, +, numDecimalDigits, (, min, ), +, numDecimalDigits, (, max, ), ;]
[;, }, return, 3, +, numDecimalDigits, (, min, ), +, numDecimalDigits, (, max, ), ;, }, private, static, int, numDecimalDigits]
[), ;, }, return, 3, +, numDecimalDigits, (, min, ), +, numDecimalDigits, (, max, ), ;, }, private, static, int]
[;, }, private, static, int, numDecimalDigits, (, int, n, ), {, if, (, n, <, 0, ), {, throw, new]
[+, numDecimalDigits, (, max, ), ;, }, private, static, int, numDecimalDigits, (, int, n, ), {, if, (, n, <]
[+, numDecimalDigits, (, min, ), +, numDecimalDigits, (, max, ), ;, }, private, static, int, numDecimalDigits, (, int, n, )]
[+, numDecimalDigits, (, max, ), ;, }, private, static, int, numDecimalDigits, (, int, n, ), {, if, (, n, <]
[), +, numDecimalDigits, (, max, ), ;, }, private, static, int, numDecimalDigits, (, int, n, ), {, if, (, n]
[;, }, private, static, int, numDecimalDigits, (, int, n, ), {, if, (, n, <, 0, ), {, throw, new]
[), ;, }, private, static, int, numDecimalDigits, (, int, n, ), {, if, (, n, <, 0, ), {, throw]
[), {, throw, new, AssertionError, (, ), ;, }, int, nDigits, =, 1, ;, while, (, n, >=, 10, )]
[<, 0, ), {, throw, new, AssertionError, (, ), ;, }, int, nDigits, =, 1, ;, while, (, n, >=]
[), {, throw, new, AssertionError, (, ), ;, }, int, nDigits, =, 1, ;, while, (, n, >=, 10, )]
[;, }, int, nDigits, =, 1, ;, while, (, n, >=, 10, ), {, ++, nDigits, ;, n, /=, 10]
[;, while, (, n, >=, 10, ), {, ++, nDigits, ;, n, /=, 10, ;, }, return, nDigits, ;, }]
[), {, ++, nDigits, ;, n, /=, 10, ;, }, return, nDigits, ;, }, @, Override, protected, void, appendSourceCode, (]
[>=, 10, ), {, ++, nDigits, ;, n, /=, 10, ;, }, return, nDigits, ;, }, @, Override, protected, void]
[), {, ++, nDigits, ;, n, /=, 10, ;, }, return, nDigits, ;, }, @, Override, protected, void, appendSourceCode, (]
[;, n, /=, 10, ;, }, return, nDigits, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {]
[;, n, /=, 10, ;, }, return, nDigits, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {]
[/=, 10, ;, }, return, nDigits, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, int, bodyStart]
[;, }, return, nDigits, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, int, bodyStart, =, sb]
[;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, int, bodyStart, =, sb, ., length, (, )]
[;, appendBodySourceCode, (, sb, ), ;, int, bodyEnd, =, sb, ., length, (, ), ;, int, bodyLen, =, bodyEnd, -]
[., length, (, ), ;, appendBodySourceCode, (, sb, ), ;, int, bodyEnd, =, sb, ., length, (, ), ;, int]
[;, int, bodyEnd, =, sb, ., length, (, ), ;, int, bodyLen, =, bodyEnd, -, bodyStart, ;, int, min, =]
[), ;, int, bodyEnd, =, sb, ., length, (, ), ;, int, bodyLen, =, bodyEnd, -, bodyStart, ;, int, min]
[;, int, bodyLen, =, bodyEnd, -, bodyStart, ;, int, min, =, this, ., min, ;, int, max, =, this, .]
[., length, (, ), ;, int, bodyLen, =, bodyEnd, -, bodyStart, ;, int, min, =, this, ., min, ;, int]
[;, int, min, =, this, ., min, ;, int, max, =, this, ., max, ;, if, (, min, >=, 2]
[-, bodyStart, ;, int, min, =, this, ., min, ;, int, max, =, this, ., max, ;, if, (, min]
[;, int, min, =, this, ., min, ;, int, max, =, this, ., max, ;, if, (, min, >=, 2]
[;, int, max, =, this, ., max, ;, if, (, min, >=, 2, &&, max, ==, Integer, ., MAX_VALUE, ||]
[., min, ;, int, max, =, this, ., max, ;, if, (, min, >=, 2, &&, max, ==, Integer, .]
[;, if, (, min, >=, 2, &&, max, ==, Integer, ., MAX_VALUE, ||, max, -, min, <=, 1, ), {]
[., max, ;, if, (, min, >=, 2, &&, max, ==, Integer, ., MAX_VALUE, ||, max, -, min, <=, 1]
[), {, int, expanded, =, min, ==, max, ||, max, ==, Integer, ., MAX_VALUE, ?, min, -, 1, :, min]
[||, max, -, min, <=, 1, ), {, int, expanded, =, min, ==, max, ||, max, ==, Integer, ., MAX_VALUE]
[&&, max, ==, Integer, ., MAX_VALUE, ||, max, -, min, <=, 1, ), {, int, expanded, =, min, ==, max]
[>=, 2, &&, max, ==, Integer, ., MAX_VALUE, ||, max, -, min, <=, 1, ), {, int, expanded, =, min]
[&&, max, ==, Integer, ., MAX_VALUE, ||, max, -, min, <=, 1, ), {, int, expanded, =, min, ==, max]
[||, max, -, min, <=, 1, ), {, int, expanded, =, min, ==, max, ||, max, ==, Integer, ., MAX_VALUE]
[==, Integer, ., MAX_VALUE, ||, max, -, min, <=, 1, ), {, int, expanded, =, min, ==, max, ||, max]
[||, max, -, min, <=, 1, ), {, int, expanded, =, min, ==, max, ||, max, ==, Integer, ., MAX_VALUE]
[., MAX_VALUE, ||, max, -, min, <=, 1, ), {, int, expanded, =, min, ==, max, ||, max, ==, Integer]
[), {, int, expanded, =, min, ==, max, ||, max, ==, Integer, ., MAX_VALUE, ?, min, -, 1, :, min]
[<=, 1, ), {, int, expanded, =, min, ==, max, ||, max, ==, Integer, ., MAX_VALUE, ?, min, -, 1]
[-, min, <=, 1, ), {, int, expanded, =, min, ==, max, ||, max, ==, Integer, ., MAX_VALUE, ?, min]
[<=, 1, ), {, int, expanded, =, min, ==, max, ||, max, ==, Integer, ., MAX_VALUE, ?, min, -, 1]
[), {, int, expanded, =, min, ==, max, ||, max, ==, Integer, ., MAX_VALUE, ?, min, -, 1, :, min]
[;, int, expandedMin, =, min, -, expanded, ;, int, expandedMax, =, max, ==, Integer, ., MAX_VALUE, ?, max, :, max]
[?, min, -, 1, :, min, ;, int, expandedMin, =, min, -, expanded, ;, int, expandedMax, =, max, ==, Integer]
[||, max, ==, Integer, ., MAX_VALUE, ?, min, -, 1, :, min, ;, int, expandedMin, =, min, -, expanded, ;]
[==, max, ||, max, ==, Integer, ., MAX_VALUE, ?, min, -, 1, :, min, ;, int, expandedMin, =, min, -]
[||, max, ==, Integer, ., MAX_VALUE, ?, min, -, 1, :, min, ;, int, expandedMin, =, min, -, expanded, ;]
[?, min, -, 1, :, min, ;, int, expandedMin, =, min, -, expanded, ;, int, expandedMax, =, max, ==, Integer]
[==, Integer, ., MAX_VALUE, ?, min, -, 1, :, min, ;, int, expandedMin, =, min, -, expanded, ;, int, expandedMax]
[?, min, -, 1, :, min, ;, int, expandedMin, =, min, -, expanded, ;, int, expandedMax, =, max, ==, Integer]
[., MAX_VALUE, ?, min, -, 1, :, min, ;, int, expandedMin, =, min, -, expanded, ;, int, expandedMax, =, max]
[:, min, ;, int, expandedMin, =, min, -, expanded, ;, int, expandedMax, =, max, ==, Integer, ., MAX_VALUE, ?, max]
[-, 1, :, min, ;, int, expandedMin, =, min, -, expanded, ;, int, expandedMax, =, max, ==, Integer, ., MAX_VALUE]
[:, min, ;, int, expandedMin, =, min, -, expanded, ;, int, expandedMax, =, max, ==, Integer, ., MAX_VALUE, ?, max]
[;, int, expandedMin, =, min, -, expanded, ;, int, expandedMax, =, max, ==, Integer, ., MAX_VALUE, ?, max, :, max]
[;, int, expandedMax, =, max, ==, Integer, ., MAX_VALUE, ?, max, :, max, -, expanded, ;, int, suffixLen, =, suffixLen]
[-, expanded, ;, int, expandedMax, =, max, ==, Integer, ., MAX_VALUE, ?, max, :, max, -, expanded, ;, int, suffixLen]
[;, int, expandedMax, =, max, ==, Integer, ., MAX_VALUE, ?, max, :, max, -, expanded, ;, int, suffixLen, =, suffixLen]
[;, int, suffixLen, =, suffixLen, (, min, ,, max, ), ;, int, expandedSuffixLen, =, suffixLen, (, expandedMin, ,, expandedMax, )]
[?, max, :, max, -, expanded, ;, int, suffixLen, =, suffixLen, (, min, ,, max, ), ;, int, expandedSuffixLen, =]
[==, Integer, ., MAX_VALUE, ?, max, :, max, -, expanded, ;, int, suffixLen, =, suffixLen, (, min, ,, max, )]
[?, max, :, max, -, expanded, ;, int, suffixLen, =, suffixLen, (, min, ,, max, ), ;, int, expandedSuffixLen, =]
[., MAX_VALUE, ?, max, :, max, -, expanded, ;, int, suffixLen, =, suffixLen, (, min, ,, max, ), ;, int]
[:, max, -, expanded, ;, int, suffixLen, =, suffixLen, (, min, ,, max, ), ;, int, expandedSuffixLen, =, suffixLen, (]
[;, int, suffixLen, =, suffixLen, (, min, ,, max, ), ;, int, expandedSuffixLen, =, suffixLen, (, expandedMin, ,, expandedMax, )]
[-, expanded, ;, int, suffixLen, =, suffixLen, (, min, ,, max, ), ;, int, expandedSuffixLen, =, suffixLen, (, expandedMin, ,]
[;, int, suffixLen, =, suffixLen, (, min, ,, max, ), ;, int, expandedSuffixLen, =, suffixLen, (, expandedMin, ,, expandedMax, )]
[;, int, expandedSuffixLen, =, suffixLen, (, expandedMin, ,, expandedMax, ), ;, if, (, bodyLen, *, expanded, +, expandedSuffixLen, <, suffixLen]
[,, max, ), ;, int, expandedSuffixLen, =, suffixLen, (, expandedMin, ,, expandedMax, ), ;, if, (, bodyLen, *, expanded, +]
[), ;, int, expandedSuffixLen, =, suffixLen, (, expandedMin, ,, expandedMax, ), ;, if, (, bodyLen, *, expanded, +, expandedSuffixLen, <]
[;, if, (, bodyLen, *, expanded, +, expandedSuffixLen, <, suffixLen, &&, !, body, ., hasCapturingGroup, (, ), ), {, while]
[,, expandedMax, ), ;, if, (, bodyLen, *, expanded, +, expandedSuffixLen, <, suffixLen, &&, !, body, ., hasCapturingGroup, (, )]
[), ;, if, (, bodyLen, *, expanded, +, expandedSuffixLen, <, suffixLen, &&, !, body, ., hasCapturingGroup, (, ), ), {]
[), {, while, (, --, expanded, >=, 0, ), {, sb, ., append, (, sb, ,, bodyStart, ,, bodyEnd, )]
[&&, !, body, ., hasCapturingGroup, (, ), ), {, while, (, --, expanded, >=, 0, ), {, sb, ., append]
[<, suffixLen, &&, !, body, ., hasCapturingGroup, (, ), ), {, while, (, --, expanded, >=, 0, ), {, sb]
[+, expandedSuffixLen, <, suffixLen, &&, !, body, ., hasCapturingGroup, (, ), ), {, while, (, --, expanded, >=, 0, )]
[*, expanded, +, expandedSuffixLen, <, suffixLen, &&, !, body, ., hasCapturingGroup, (, ), ), {, while, (, --, expanded, >=]
[+, expandedSuffixLen, <, suffixLen, &&, !, body, ., hasCapturingGroup, (, ), ), {, while, (, --, expanded, >=, 0, )]
[<, suffixLen, &&, !, body, ., hasCapturingGroup, (, ), ), {, while, (, --, expanded, >=, 0, ), {, sb]
[&&, !, body, ., hasCapturingGroup, (, ), ), {, while, (, --, expanded, >=, 0, ), {, sb, ., append]
[), {, while, (, --, expanded, >=, 0, ), {, sb, ., append, (, sb, ,, bodyStart, ,, bodyEnd, )]
[), {, while, (, --, expanded, >=, 0, ), {, sb, ., append, (, sb, ,, bodyStart, ,, bodyEnd, )]
[., hasCapturingGroup, (, ), ), {, while, (, --, expanded, >=, 0, ), {, sb, ., append, (, sb, ,]
[), {, sb, ., append, (, sb, ,, bodyStart, ,, bodyEnd, ), ;, }, min, =, expandedMin, ;, max, =]
[>=, 0, ), {, sb, ., append, (, sb, ,, bodyStart, ,, bodyEnd, ), ;, }, min, =, expandedMin, ;]
[>=, 0, ), {, sb, ., append, (, sb, ,, bodyStart, ,, bodyEnd, ), ;, }, min, =, expandedMin, ;]
[), {, sb, ., append, (, sb, ,, bodyStart, ,, bodyEnd, ), ;, }, min, =, expandedMin, ;, max, =]
[;, }, min, =, expandedMin, ;, max, =, expandedMax, ;, }, }, if, (, max, ==, Integer, ., MAX_VALUE, )]
[., append, (, sb, ,, bodyStart, ,, bodyEnd, ), ;, }, min, =, expandedMin, ;, max, =, expandedMax, ;, }]
[,, bodyStart, ,, bodyEnd, ), ;, }, min, =, expandedMin, ;, max, =, expandedMax, ;, }, }, if, (, max]
[,, bodyEnd, ), ;, }, min, =, expandedMin, ;, max, =, expandedMax, ;, }, }, if, (, max, ==, Integer]
[), ;, }, min, =, expandedMin, ;, max, =, expandedMax, ;, }, }, if, (, max, ==, Integer, ., MAX_VALUE]
[=, expandedMin, ;, max, =, expandedMax, ;, }, }, if, (, max, ==, Integer, ., MAX_VALUE, ), {, switch, (]
[;, max, =, expandedMax, ;, }, }, if, (, max, ==, Integer, ., MAX_VALUE, ), {, switch, (, min, )]
[=, expandedMax, ;, }, }, if, (, max, ==, Integer, ., MAX_VALUE, ), {, switch, (, min, ), {, case]
[;, }, }, if, (, max, ==, Integer, ., MAX_VALUE, ), {, switch, (, min, ), {, case, 0, :]
[), {, switch, (, min, ), {, case, 0, :, sb, ., append, (, '*', ), ;, break, ;, case]
[==, Integer, ., MAX_VALUE, ), {, switch, (, min, ), {, case, 0, :, sb, ., append, (, '*', )]
[), {, switch, (, min, ), {, case, 0, :, sb, ., append, (, '*', ), ;, break, ;, case]
[., MAX_VALUE, ), {, switch, (, min, ), {, case, 0, :, sb, ., append, (, '*', ), ;, break]
[), {, case, 0, :, sb, ., append, (, '*', ), ;, break, ;, case, 1, :, sb, ., append]
[:, sb, ., append, (, '*', ), ;, break, ;, case, 1, :, sb, ., append, (, '+', ), ;]
[;, break, ;, case, 1, :, sb, ., append, (, '+', ), ;, break, ;, default, :, sb, ., append]
[., append, (, '*', ), ;, break, ;, case, 1, :, sb, ., append, (, '+', ), ;, break, ;]
[), ;, break, ;, case, 1, :, sb, ., append, (, '+', ), ;, break, ;, default, :, sb, .]
[:, sb, ., append, (, '+', ), ;, break, ;, default, :, sb, ., append, (, '{', ), ., append]
[;, break, ;, default, :, sb, ., append, (, '{', ), ., append, (, min, ), ., append, (, ",}"]
[., append, (, '+', ), ;, break, ;, default, :, sb, ., append, (, '{', ), ., append, (, min]
[), ;, break, ;, default, :, sb, ., append, (, '{', ), ., append, (, min, ), ., append, (]
[;, }, }, else, if, (, min, ==, 0, &&, max, ==, 1, ), {, sb, ., append, (, '?']
[., append, (, ",}", ), ;, }, }, else, if, (, min, ==, 0, &&, max, ==, 1, ), {]
[., append, (, min, ), ., append, (, ",}", ), ;, }, }, else, if, (, min, ==, 0, &&]
[., append, (, '{', ), ., append, (, min, ), ., append, (, ",}", ), ;, }, }, else, if]
[), ., append, (, min, ), ., append, (, ",}", ), ;, }, }, else, if, (, min, ==, 0]
[), ., append, (, ",}", ), ;, }, }, else, if, (, min, ==, 0, &&, max, ==, 1, )]
[), ;, }, }, else, if, (, min, ==, 0, &&, max, ==, 1, ), {, sb, ., append, (]
[), {, sb, ., append, (, '?', ), ;, }, else, if, (, min, ==, max, ), {, if, (]
[&&, max, ==, 1, ), {, sb, ., append, (, '?', ), ;, }, else, if, (, min, ==, max]
[==, 0, &&, max, ==, 1, ), {, sb, ., append, (, '?', ), ;, }, else, if, (, min]
[&&, max, ==, 1, ), {, sb, ., append, (, '?', ), ;, }, else, if, (, min, ==, max]
[), {, sb, ., append, (, '?', ), ;, }, else, if, (, min, ==, max, ), {, if, (]
[==, 1, ), {, sb, ., append, (, '?', ), ;, }, else, if, (, min, ==, max, ), {]
[), {, sb, ., append, (, '?', ), ;, }, else, if, (, min, ==, max, ), {, if, (]
[;, }, else, if, (, min, ==, max, ), {, if, (, min, !=, 1, ), {, sb, ., append]
[., append, (, '?', ), ;, }, else, if, (, min, ==, max, ), {, if, (, min, !=, 1]
[), ;, }, else, if, (, min, ==, max, ), {, if, (, min, !=, 1, ), {, sb, .]
[), {, if, (, min, !=, 1, ), {, sb, ., append, (, '{', ), ., append, (, min, )]
[==, max, ), {, if, (, min, !=, 1, ), {, sb, ., append, (, '{', ), ., append, (]
[), {, if, (, min, !=, 1, ), {, sb, ., append, (, '{', ), ., append, (, min, )]
[), {, sb, ., append, (, '{', ), ., append, (, min, ), ., append, (, '}', ), ;, }]
[!=, 1, ), {, sb, ., append, (, '{', ), ., append, (, min, ), ., append, (, '}', )]
[), {, sb, ., append, (, '{', ), ., append, (, min, ), ., append, (, '}', ), ;, }]
[;, }, }, else, {, sb, ., append, (, '{', ), ., append, (, min, ), ., append, (, ',']
[., append, (, '}', ), ;, }, }, else, {, sb, ., append, (, '{', ), ., append, (, min]
[., append, (, min, ), ., append, (, '}', ), ;, }, }, else, {, sb, ., append, (, '{']
[., append, (, '{', ), ., append, (, min, ), ., append, (, '}', ), ;, }, }, else, {]
[), ., append, (, min, ), ., append, (, '}', ), ;, }, }, else, {, sb, ., append, (]
[), ., append, (, '}', ), ;, }, }, else, {, sb, ., append, (, '{', ), ., append, (]
[), ;, }, }, else, {, sb, ., append, (, '{', ), ., append, (, min, ), ., append, (]
[;, }, if, (, !, greedy, ), {, sb, ., append, (, '?', ), ;, }, }, @, Override, protected]
[., append, (, '}', ), ;, }, if, (, !, greedy, ), {, sb, ., append, (, '?', ), ;]
[., append, (, max, ), ., append, (, '}', ), ;, }, if, (, !, greedy, ), {, sb, .]
[., append, (, ',', ), ., append, (, max, ), ., append, (, '}', ), ;, }, if, (, !]
[., append, (, min, ), ., append, (, ',', ), ., append, (, max, ), ., append, (, '}', )]
[., append, (, '{', ), ., append, (, min, ), ., append, (, ',', ), ., append, (, max, )]
[), ., append, (, min, ), ., append, (, ',', ), ., append, (, max, ), ., append, (, '}']
[), ., append, (, ',', ), ., append, (, max, ), ., append, (, '}', ), ;, }, if, (]
[), ., append, (, max, ), ., append, (, '}', ), ;, }, if, (, !, greedy, ), {, sb]
[), ., append, (, '}', ), ;, }, if, (, !, greedy, ), {, sb, ., append, (, '?', )]
[), ;, }, if, (, !, greedy, ), {, sb, ., append, (, '?', ), ;, }, }, @, Override]
[), {, sb, ., append, (, '?', ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, )]
[), {, sb, ., append, (, '?', ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, )]
[;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (, " min=", ), .]
[., append, (, '?', ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, .]
[), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (, " min=", )]
[;, if, (, !, greedy, ), {, sb, ., append, (, "  not_greedy", ), ;, }, }, @, Override, public, boolean]
[., append, (, max, ), ;, if, (, !, greedy, ), {, sb, ., append, (, "  not_greedy", ), ;, }]
[., append, (, ", max=", ), ., append, (, max, ), ;, if, (, !, greedy, ), {, sb, ., append]
[., append, (, min, ), ., append, (, ", max=", ), ., append, (, max, ), ;, if, (, !, greedy]
[., append, (, " min=", ), ., append, (, min, ), ., append, (, ", max=", ), ., append, (, max, )]
[), ., append, (, min, ), ., append, (, ", max=", ), ., append, (, max, ), ;, if, (, !]
[), ., append, (, ", max=", ), ., append, (, max, ), ;, if, (, !, greedy, ), {, sb, .]
[), ., append, (, max, ), ;, if, (, !, greedy, ), {, sb, ., append, (, "  not_greedy", ), ;]
[), ;, if, (, !, greedy, ), {, sb, ., append, (, "  not_greedy", ), ;, }, }, @, Override, public]
[), {, sb, ., append, (, "  not_greedy", ), ;, }, }, @, Override, public, boolean, equals, (, Object, o, )]
[), {, sb, ., append, (, "  not_greedy", ), ;, }, }, @, Override, public, boolean, equals, (, Object, o, )]
[;, }, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (, o, instanceof, Repetition]
[., append, (, "  not_greedy", ), ;, }, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (]
[), ;, }, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (, o, instanceof]
[), {, return, false, ;, }, Repetition, that, =, (, Repetition, ), o, ;, return, this, ., body, ., equals]
[), {, return, false, ;, }, Repetition, that, =, (, Repetition, ), o, ;, return, this, ., body, ., equals]
[), ), {, return, false, ;, }, Repetition, that, =, (, Repetition, ), o, ;, return, this, ., body, .]
[instanceof, Repetition, ), ), {, return, false, ;, }, Repetition, that, =, (, Repetition, ), o, ;, return, this, .]
[;, }, Repetition, that, =, (, Repetition, ), o, ;, return, this, ., body, ., equals, (, that, ., body]
[;, return, this, ., body, ., equals, (, that, ., body, ), &&, this, ., min, ==, that, ., min]
[;, return, this, ., body, ., equals, (, that, ., body, ), &&, this, ., min, ==, that, ., min]
[;, }, @, Override, public, int, hashCode, (, ), {, return, min, +, 31, *, (, max, +, 31, *]
[&&, this, ., greedy, ==, that, ., greedy, ;, }, @, Override, public, int, hashCode, (, ), {, return, min]
[&&, this, ., max, ==, that, ., max, &&, this, ., greedy, ==, that, ., greedy, ;, }, @, Override]
[&&, this, ., min, ==, that, ., min, &&, this, ., max, ==, that, ., max, &&, this, ., greedy]
[., equals, (, that, ., body, ), &&, this, ., min, ==, that, ., min, &&, this, ., max, ==]
[., body, ., equals, (, that, ., body, ), &&, this, ., min, ==, that, ., min, &&, this, .]
[), &&, this, ., min, ==, that, ., min, &&, this, ., max, ==, that, ., max, &&, this, .]
[., body, ), &&, this, ., min, ==, that, ., min, &&, this, ., max, ==, that, ., max, &&]
[&&, this, ., max, ==, that, ., max, &&, this, ., greedy, ==, that, ., greedy, ;, }, @, Override]
[==, that, ., min, &&, this, ., max, ==, that, ., max, &&, this, ., greedy, ==, that, ., greedy]
[., min, ==, that, ., min, &&, this, ., max, ==, that, ., max, &&, this, ., greedy, ==, that]
[&&, this, ., max, ==, that, ., max, &&, this, ., greedy, ==, that, ., greedy, ;, }, @, Override]
[., min, &&, this, ., max, ==, that, ., max, &&, this, ., greedy, ==, that, ., greedy, ;, }]
[&&, this, ., greedy, ==, that, ., greedy, ;, }, @, Override, public, int, hashCode, (, ), {, return, min]
[==, that, ., max, &&, this, ., greedy, ==, that, ., greedy, ;, }, @, Override, public, int, hashCode, (]
[., max, ==, that, ., max, &&, this, ., greedy, ==, that, ., greedy, ;, }, @, Override, public, int]
[&&, this, ., greedy, ==, that, ., greedy, ;, }, @, Override, public, int, hashCode, (, ), {, return, min]
[., max, &&, this, ., greedy, ==, that, ., greedy, ;, }, @, Override, public, int, hashCode, (, ), {]
[;, }, @, Override, public, int, hashCode, (, ), {, return, min, +, 31, *, (, max, +, 31, *]
[==, that, ., greedy, ;, }, @, Override, public, int, hashCode, (, ), {, return, min, +, 31, *, (]
[., greedy, ==, that, ., greedy, ;, }, @, Override, public, int, hashCode, (, ), {, return, min, +, 31]
[;, }, @, Override, public, int, hashCode, (, ), {, return, min, +, 31, *, (, max, +, 31, *]
[., greedy, ;, }, @, Override, public, int, hashCode, (, ), {, return, min, +, 31, *, (, max, +]
[;, }, }, static, final, class, Alternation, extends, RegExpTree, {, final, ImmutableList, <, RegExpTree, >, alternatives, ;, Alternation, (, List]
[+, 31, *, (, max, +, 31, *, (, (, greedy, ?, 1, :, 0, ), +, 31, *, body]
[;, }, }, static, final, class, Alternation, extends, RegExpTree, {, final, ImmutableList, <, RegExpTree, >, alternatives, ;, Alternation, (, List]
[*, (, max, +, 31, *, (, (, greedy, ?, 1, :, 0, ), +, 31, *, body, ., hashCode]
[;, }, }, static, final, class, Alternation, extends, RegExpTree, {, final, ImmutableList, <, RegExpTree, >, alternatives, ;, Alternation, (, List]
[), ;, }, }, static, final, class, Alternation, extends, RegExpTree, {, final, ImmutableList, <, RegExpTree, >, alternatives, ;, Alternation, (]
[+, 31, *, (, (, greedy, ?, 1, :, 0, ), +, 31, *, body, ., hashCode, (, ), )]
[), ;, }, }, static, final, class, Alternation, extends, RegExpTree, {, final, ImmutableList, <, RegExpTree, >, alternatives, ;, Alternation, (]
[*, (, (, greedy, ?, 1, :, 0, ), +, 31, *, body, ., hashCode, (, ), ), ), ;]
[), ;, }, }, static, final, class, Alternation, extends, RegExpTree, {, final, ImmutableList, <, RegExpTree, >, alternatives, ;, Alternation, (]
[), ), ;, }, }, static, final, class, Alternation, extends, RegExpTree, {, final, ImmutableList, <, RegExpTree, >, alternatives, ;, Alternation]
[+, 31, *, body, ., hashCode, (, ), ), ), ;, }, }, static, final, class, Alternation, extends, RegExpTree, {]
[), +, 31, *, body, ., hashCode, (, ), ), ), ;, }, }, static, final, class, Alternation, extends, RegExpTree]
[?, 1, :, 0, ), +, 31, *, body, ., hashCode, (, ), ), ), ;, }, }, static, final]
[:, 0, ), +, 31, *, body, ., hashCode, (, ), ), ), ;, }, }, static, final, class, Alternation]
[), +, 31, *, body, ., hashCode, (, ), ), ), ;, }, }, static, final, class, Alternation, extends, RegExpTree]
[), ), ;, }, }, static, final, class, Alternation, extends, RegExpTree, {, final, ImmutableList, <, RegExpTree, >, alternatives, ;, Alternation]
[*, body, ., hashCode, (, ), ), ), ;, }, }, static, final, class, Alternation, extends, RegExpTree, {, final, ImmutableList]
[), ), ;, }, }, static, final, class, Alternation, extends, RegExpTree, {, final, ImmutableList, <, RegExpTree, >, alternatives, ;, Alternation]
[., hashCode, (, ), ), ), ;, }, }, static, final, class, Alternation, extends, RegExpTree, {, final, ImmutableList, <, RegExpTree]
[=, ImmutableList, ., copyOf, (, alternatives, ), ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, List]
[., alternatives, =, ImmutableList, ., copyOf, (, alternatives, ), ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, )]
[;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, List, <, RegExpTree, >, alternatives, =, Lists, .]
[., copyOf, (, alternatives, ), ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, List, <, RegExpTree]
[), ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, List, <, RegExpTree, >, alternatives, =, Lists]
[;, for, (, RegExpTree, alternative, :, this, ., alternatives, ), {, alternative, =, alternative, ., simplify, (, flags, ), ;]
[., newArrayList, (, ), ;, for, (, RegExpTree, alternative, :, this, ., alternatives, ), {, alternative, =, alternative, ., simplify]
[), {, alternative, =, alternative, ., simplify, (, flags, ), ;, if, (, alternative, instanceof, Alternation, ), {, alternatives, .]
[., alternatives, ), {, alternative, =, alternative, ., simplify, (, flags, ), ;, if, (, alternative, instanceof, Alternation, ), {]
[=, alternative, ., simplify, (, flags, ), ;, if, (, alternative, instanceof, Alternation, ), {, alternatives, ., addAll, (, (]
[;, if, (, alternative, instanceof, Alternation, ), {, alternatives, ., addAll, (, (, (, Alternation, ), alternative, ), ., alternatives]
[., simplify, (, flags, ), ;, if, (, alternative, instanceof, Alternation, ), {, alternatives, ., addAll, (, (, (, Alternation]
[), ;, if, (, alternative, instanceof, Alternation, ), {, alternatives, ., addAll, (, (, (, Alternation, ), alternative, ), .]
[), {, alternatives, ., addAll, (, (, (, Alternation, ), alternative, ), ., alternatives, ), ;, }, else, {, alternatives]
[instanceof, Alternation, ), {, alternatives, ., addAll, (, (, (, Alternation, ), alternative, ), ., alternatives, ), ;, }, else]
[;, }, else, {, alternatives, ., add, (, alternative, ), ;, }, }, RegExpTree, last, =, null, ;, for, (]
[., addAll, (, (, (, Alternation, ), alternative, ), ., alternatives, ), ;, }, else, {, alternatives, ., add, (]
[), ;, }, else, {, alternatives, ., add, (, alternative, ), ;, }, }, RegExpTree, last, =, null, ;, for]
[., alternatives, ), ;, }, else, {, alternatives, ., add, (, alternative, ), ;, }, }, RegExpTree, last, =, null]
[), ., alternatives, ), ;, }, else, {, alternatives, ., add, (, alternative, ), ;, }, }, RegExpTree, last, =]
[), ., alternatives, ), ;, }, else, {, alternatives, ., add, (, alternative, ), ;, }, }, RegExpTree, last, =]
[;, }, }, RegExpTree, last, =, null, ;, for, (, Iterator, <, RegExpTree, >, it, =, alternatives, ., iterator, (]
[., add, (, alternative, ), ;, }, }, RegExpTree, last, =, null, ;, for, (, Iterator, <, RegExpTree, >, it]
[), ;, }, }, RegExpTree, last, =, null, ;, for, (, Iterator, <, RegExpTree, >, it, =, alternatives, ., iterator]
[;, for, (, Iterator, <, RegExpTree, >, it, =, alternatives, ., iterator, (, ), ;, it, ., hasNext, (, )]
[;, it, ., hasNext, (, ), ;, ), {, RegExpTree, alternative, =, it, ., next, (, ), ;, if, (]
[., iterator, (, ), ;, it, ., hasNext, (, ), ;, ), {, RegExpTree, alternative, =, it, ., next, (]
[;, ), {, RegExpTree, alternative, =, it, ., next, (, ), ;, if, (, alternative, ., equals, (, NEVER_MATCHES, )]
[., hasNext, (, ), ;, ), {, RegExpTree, alternative, =, it, ., next, (, ), ;, if, (, alternative, .]
[;, if, (, alternative, ., equals, (, NEVER_MATCHES, ), ), {, continue, ;, }, if, (, alternative, ., equals, (]
[., next, (, ), ;, if, (, alternative, ., equals, (, NEVER_MATCHES, ), ), {, continue, ;, }, if, (]
[), {, continue, ;, }, if, (, alternative, ., equals, (, last, ), &&, !, alternative, ., hasCapturingGroup, (, )]
[., equals, (, NEVER_MATCHES, ), ), {, continue, ;, }, if, (, alternative, ., equals, (, last, ), &&, !]
[), ), {, continue, ;, }, if, (, alternative, ., equals, (, last, ), &&, !, alternative, ., hasCapturingGroup, (]
[), {, it, ., remove, (, ), ;, }, else, {, last, =, alternative, ;, }, }, for, (, int]
[&&, !, alternative, ., hasCapturingGroup, (, ), ), {, it, ., remove, (, ), ;, }, else, {, last, =]
[., equals, (, last, ), &&, !, alternative, ., hasCapturingGroup, (, ), ), {, it, ., remove, (, ), ;]
[), &&, !, alternative, ., hasCapturingGroup, (, ), ), {, it, ., remove, (, ), ;, }, else, {, last]
[), {, it, ., remove, (, ), ;, }, else, {, last, =, alternative, ;, }, }, for, (, int]
[), {, it, ., remove, (, ), ;, }, else, {, last, =, alternative, ;, }, }, for, (, int]
[., hasCapturingGroup, (, ), ), {, it, ., remove, (, ), ;, }, else, {, last, =, alternative, ;, }]
[;, }, else, {, last, =, alternative, ;, }, }, for, (, int, i, =, 0, ,, n, =, alternatives]
[., remove, (, ), ;, }, else, {, last, =, alternative, ;, }, }, for, (, int, i, =, 0]
[=, alternative, ;, }, }, for, (, int, i, =, 0, ,, n, =, alternatives, ., size, (, ), ;]
[;, }, }, for, (, int, i, =, 0, ,, n, =, alternatives, ., size, (, ), ;, i, <]
[,, n, =, alternatives, ., size, (, ), ;, i, <, n, ;, ++, i, ), {, RegExpTree, alternative, =]
[;, i, <, n, ;, ++, i, ), {, RegExpTree, alternative, =, alternatives, ., get, (, i, ), ;, if]
[., size, (, ), ;, i, <, n, ;, ++, i, ), {, RegExpTree, alternative, =, alternatives, ., get, (]
[;, ++, i, ), {, RegExpTree, alternative, =, alternatives, ., get, (, i, ), ;, if, (, (, alternative, instanceof]
[<, n, ;, ++, i, ), {, RegExpTree, alternative, =, alternatives, ., get, (, i, ), ;, if, (, (]
[;, ++, i, ), {, RegExpTree, alternative, =, alternatives, ., get, (, i, ), ;, if, (, (, alternative, instanceof]
[), {, RegExpTree, alternative, =, alternatives, ., get, (, i, ), ;, if, (, (, alternative, instanceof, Text, &&, (]
[), {, RegExpTree, alternative, =, alternatives, ., get, (, i, ), ;, if, (, (, alternative, instanceof, Text, &&, (]
[;, if, (, (, alternative, instanceof, Text, &&, (, (, Text, ), alternative, ), ., text, ., length, (, )]
[., get, (, i, ), ;, if, (, (, alternative, instanceof, Text, &&, (, (, Text, ), alternative, ), .]
[), ;, if, (, (, alternative, instanceof, Text, &&, (, (, Text, ), alternative, ), ., text, ., length, (]
[), {, int, end, =, i, ;, int, nCharsets, =, 0, ;, while, (, end, <, n, ), {, RegExpTree]
[||, alternative, instanceof, Charset, ), {, int, end, =, i, ;, int, nCharsets, =, 0, ;, while, (, end, <]
[), ||, alternative, instanceof, Charset, ), {, int, end, =, i, ;, int, nCharsets, =, 0, ;, while, (, end]
[&&, (, (, Text, ), alternative, ), ., text, ., length, (, ), ==, 1, ), ||, alternative, instanceof, Charset]
[instanceof, Text, &&, (, (, Text, ), alternative, ), ., text, ., length, (, ), ==, 1, ), ||, alternative]
[), ||, alternative, instanceof, Charset, ), {, int, end, =, i, ;, int, nCharsets, =, 0, ;, while, (, end]
[==, 1, ), ||, alternative, instanceof, Charset, ), {, int, end, =, i, ;, int, nCharsets, =, 0, ;, while]
[., length, (, ), ==, 1, ), ||, alternative, instanceof, Charset, ), {, int, end, =, i, ;, int, nCharsets]
[., text, ., length, (, ), ==, 1, ), ||, alternative, instanceof, Charset, ), {, int, end, =, i, ;]
[), ., text, ., length, (, ), ==, 1, ), ||, alternative, instanceof, Charset, ), {, int, end, =, i]
[), ., text, ., length, (, ), ==, 1, ), ||, alternative, instanceof, Charset, ), {, int, end, =, i]
[), ||, alternative, instanceof, Charset, ), {, int, end, =, i, ;, int, nCharsets, =, 0, ;, while, (, end]
[), {, int, end, =, i, ;, int, nCharsets, =, 0, ;, while, (, end, <, n, ), {, RegExpTree]
[instanceof, Charset, ), {, int, end, =, i, ;, int, nCharsets, =, 0, ;, while, (, end, <, n, )]
[;, int, nCharsets, =, 0, ;, while, (, end, <, n, ), {, RegExpTree, follower, =, alternatives, ., get, (]
[;, while, (, end, <, n, ), {, RegExpTree, follower, =, alternatives, ., get, (, end, ), ;, if, (]
[), {, RegExpTree, follower, =, alternatives, ., get, (, end, ), ;, if, (, follower, instanceof, Charset, ), {, ++]
[<, n, ), {, RegExpTree, follower, =, alternatives, ., get, (, end, ), ;, if, (, follower, instanceof, Charset, )]
[), {, RegExpTree, follower, =, alternatives, ., get, (, end, ), ;, if, (, follower, instanceof, Charset, ), {, ++]
[;, if, (, follower, instanceof, Charset, ), {, ++, nCharsets, ;, }, else, if, (, !, (, follower, instanceof, Text]
[., get, (, end, ), ;, if, (, follower, instanceof, Charset, ), {, ++, nCharsets, ;, }, else, if, (]
[), ;, if, (, follower, instanceof, Charset, ), {, ++, nCharsets, ;, }, else, if, (, !, (, follower, instanceof]
[), {, ++, nCharsets, ;, }, else, if, (, !, (, follower, instanceof, Text, &&, (, (, Text, ), follower]
[instanceof, Charset, ), {, ++, nCharsets, ;, }, else, if, (, !, (, follower, instanceof, Text, &&, (, (, Text]
[;, }, else, if, (, !, (, follower, instanceof, Text, &&, (, (, Text, ), follower, ), ., text, .]
[;, }, else, if, (, !, (, follower, instanceof, Text, &&, (, (, Text, ), follower, ), ., text, .]
[), {, break, ;, }, ++, end, ;, }, if, (, end, -, i, >=, 3, ||, (, nCharsets, !=]
[), {, break, ;, }, ++, end, ;, }, if, (, end, -, i, >=, 3, ||, (, nCharsets, !=]
[), ), {, break, ;, }, ++, end, ;, }, if, (, end, -, i, >=, 3, ||, (, nCharsets]
[&&, (, (, Text, ), follower, ), ., text, ., length, (, ), ==, 1, ), ), {, break, ;]
[instanceof, Text, &&, (, (, Text, ), follower, ), ., text, ., length, (, ), ==, 1, ), ), {]
[), ), {, break, ;, }, ++, end, ;, }, if, (, end, -, i, >=, 3, ||, (, nCharsets]
[==, 1, ), ), {, break, ;, }, ++, end, ;, }, if, (, end, -, i, >=, 3, ||]
[., length, (, ), ==, 1, ), ), {, break, ;, }, ++, end, ;, }, if, (, end, -]
[., text, ., length, (, ), ==, 1, ), ), {, break, ;, }, ++, end, ;, }, if, (]
[), ., text, ., length, (, ), ==, 1, ), ), {, break, ;, }, ++, end, ;, }, if]
[), ., text, ., length, (, ), ==, 1, ), ), {, break, ;, }, ++, end, ;, }, if]
[), ), {, break, ;, }, ++, end, ;, }, if, (, end, -, i, >=, 3, ||, (, nCharsets]
[;, }, if, (, end, -, i, >=, 3, ||, (, nCharsets, !=, 0, &&, end, -, i, >=, 2]
[;, }, if, (, end, -, i, >=, 3, ||, (, nCharsets, !=, 0, &&, end, -, i, >=, 2]
[), {, int, [, ], members, =, new, int, [, end, -, i, -, nCharsets, ], ;, int, memberIdx, =]
[||, (, nCharsets, !=, 0, &&, end, -, i, >=, 2, ), ), {, int, [, ], members, =, new]
[>=, 3, ||, (, nCharsets, !=, 0, &&, end, -, i, >=, 2, ), ), {, int, [, ], members]
[-, i, >=, 3, ||, (, nCharsets, !=, 0, &&, end, -, i, >=, 2, ), ), {, int, []
[>=, 3, ||, (, nCharsets, !=, 0, &&, end, -, i, >=, 2, ), ), {, int, [, ], members]
[||, (, nCharsets, !=, 0, &&, end, -, i, >=, 2, ), ), {, int, [, ], members, =, new]
[), {, int, [, ], members, =, new, int, [, end, -, i, -, nCharsets, ], ;, int, memberIdx, =]
[), ), {, int, [, ], members, =, new, int, [, end, -, i, -, nCharsets, ], ;, int, memberIdx]
[&&, end, -, i, >=, 2, ), ), {, int, [, ], members, =, new, int, [, end, -, i]
[!=, 0, &&, end, -, i, >=, 2, ), ), {, int, [, ], members, =, new, int, [, end]
[&&, end, -, i, >=, 2, ), ), {, int, [, ], members, =, new, int, [, end, -, i]
[), ), {, int, [, ], members, =, new, int, [, end, -, i, -, nCharsets, ], ;, int, memberIdx]
[>=, 2, ), ), {, int, [, ], members, =, new, int, [, end, -, i, -, nCharsets, ], ;]
[-, i, >=, 2, ), ), {, int, [, ], members, =, new, int, [, end, -, i, -, nCharsets]
[>=, 2, ), ), {, int, [, ], members, =, new, int, [, end, -, i, -, nCharsets, ], ;]
[), ), {, int, [, ], members, =, new, int, [, end, -, i, -, nCharsets, ], ;, int, memberIdx]
[;, int, memberIdx, =, 0, ;, CharRanges, chars, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;]
[], ;, int, memberIdx, =, 0, ;, CharRanges, chars, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY]
[-, nCharsets, ], ;, int, memberIdx, =, 0, ;, CharRanges, chars, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges]
[-, i, -, nCharsets, ], ;, int, memberIdx, =, 0, ;, CharRanges, chars, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits]
[-, nCharsets, ], ;, int, memberIdx, =, 0, ;, CharRanges, chars, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges]
[], ;, int, memberIdx, =, 0, ;, CharRanges, chars, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY]
[;, CharRanges, chars, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;, List, <, RegExpTree, >, charAlternatives]
[;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;, List, <, RegExpTree, >, charAlternatives, =, alternatives, ., subList, (, i, ,]
[., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;, List, <, RegExpTree, >, charAlternatives, =, alternatives, ., subList, (]
[;, List, <, RegExpTree, >, charAlternatives, =, alternatives, ., subList, (, i, ,, end, ), ;, for, (, RegExpTree, charAlternative]
[., EMPTY, ;, List, <, RegExpTree, >, charAlternatives, =, alternatives, ., subList, (, i, ,, end, ), ;, for, (]
[;, for, (, RegExpTree, charAlternative, :, charAlternatives, ), {, if, (, charAlternative, instanceof, Text, ), {, char, ch, =, (]
[., subList, (, i, ,, end, ), ;, for, (, RegExpTree, charAlternative, :, charAlternatives, ), {, if, (, charAlternative, instanceof]
[,, end, ), ;, for, (, RegExpTree, charAlternative, :, charAlternatives, ), {, if, (, charAlternative, instanceof, Text, ), {, char]
[), ;, for, (, RegExpTree, charAlternative, :, charAlternatives, ), {, if, (, charAlternative, instanceof, Text, ), {, char, ch, =]
[), {, if, (, charAlternative, instanceof, Text, ), {, char, ch, =, (, (, Text, ), charAlternative, ), ., text]
[), {, char, ch, =, (, (, Text, ), charAlternative, ), ., text, ., charAt, (, 0, ), ;, members]
[instanceof, Text, ), {, char, ch, =, (, (, Text, ), charAlternative, ), ., text, ., charAt, (, 0, )]
[;, members, [, memberIdx, ++, ], =, ch, ;, if, (, IE_SPEC_ERRORS, ., contains, (, ch, ), ), {, ieExplicits]
[., charAt, (, 0, ), ;, members, [, memberIdx, ++, ], =, ch, ;, if, (, IE_SPEC_ERRORS, ., contains, (]
[., text, ., charAt, (, 0, ), ;, members, [, memberIdx, ++, ], =, ch, ;, if, (, IE_SPEC_ERRORS, .]
[), ., text, ., charAt, (, 0, ), ;, members, [, memberIdx, ++, ], =, ch, ;, if, (, IE_SPEC_ERRORS]
[), ., text, ., charAt, (, 0, ), ;, members, [, memberIdx, ++, ], =, ch, ;, if, (, IE_SPEC_ERRORS]
[), ;, members, [, memberIdx, ++, ], =, ch, ;, if, (, IE_SPEC_ERRORS, ., contains, (, ch, ), ), {]
[=, ch, ;, if, (, IE_SPEC_ERRORS, ., contains, (, ch, ), ), {, ieExplicits, =, ieExplicits, ., union, (, CharRanges]
[[, memberIdx, ++, ], =, ch, ;, if, (, IE_SPEC_ERRORS, ., contains, (, ch, ), ), {, ieExplicits, =, ieExplicits]
[], =, ch, ;, if, (, IE_SPEC_ERRORS, ., contains, (, ch, ), ), {, ieExplicits, =, ieExplicits, ., union, (]
[++, ], =, ch, ;, if, (, IE_SPEC_ERRORS, ., contains, (, ch, ), ), {, ieExplicits, =, ieExplicits, ., union]
[;, if, (, IE_SPEC_ERRORS, ., contains, (, ch, ), ), {, ieExplicits, =, ieExplicits, ., union, (, CharRanges, ., inclusive]
[), {, ieExplicits, =, ieExplicits, ., union, (, CharRanges, ., inclusive, (, ch, ,, ch, ), ), ;, }, }]
[., contains, (, ch, ), ), {, ieExplicits, =, ieExplicits, ., union, (, CharRanges, ., inclusive, (, ch, ,, ch]
[), ), {, ieExplicits, =, ieExplicits, ., union, (, CharRanges, ., inclusive, (, ch, ,, ch, ), ), ;, }]
[=, ieExplicits, ., union, (, CharRanges, ., inclusive, (, ch, ,, ch, ), ), ;, }, }, else, if, (]
[;, }, }, else, if, (, charAlternative, instanceof, Charset, ), {, Charset, cs, =, (, Charset, ), charAlternative, ;, chars]
[., union, (, CharRanges, ., inclusive, (, ch, ,, ch, ), ), ;, }, }, else, if, (, charAlternative, instanceof]
[), ;, }, }, else, if, (, charAlternative, instanceof, Charset, ), {, Charset, cs, =, (, Charset, ), charAlternative, ;]
[., inclusive, (, ch, ,, ch, ), ), ;, }, }, else, if, (, charAlternative, instanceof, Charset, ), {, Charset]
[,, ch, ), ), ;, }, }, else, if, (, charAlternative, instanceof, Charset, ), {, Charset, cs, =, (, Charset]
[), ), ;, }, }, else, if, (, charAlternative, instanceof, Charset, ), {, Charset, cs, =, (, Charset, ), charAlternative]
[), {, Charset, cs, =, (, Charset, ), charAlternative, ;, chars, =, chars, ., union, (, cs, ., ranges, )]
[instanceof, Charset, ), {, Charset, cs, =, (, Charset, ), charAlternative, ;, chars, =, chars, ., union, (, cs, .]
[;, chars, =, chars, ., union, (, cs, ., ranges, ), ;, ieExplicits, =, ieExplicits, ., union, (, cs, .]
[;, chars, =, chars, ., union, (, cs, ., ranges, ), ;, ieExplicits, =, ieExplicits, ., union, (, cs, .]
[=, chars, ., union, (, cs, ., ranges, ), ;, ieExplicits, =, ieExplicits, ., union, (, cs, ., ieExplicits, )]
[;, ieExplicits, =, ieExplicits, ., union, (, cs, ., ieExplicits, ), ;, }, }, chars, =, chars, ., union, (]
[., union, (, cs, ., ranges, ), ;, ieExplicits, =, ieExplicits, ., union, (, cs, ., ieExplicits, ), ;, }]
[), ;, ieExplicits, =, ieExplicits, ., union, (, cs, ., ieExplicits, ), ;, }, }, chars, =, chars, ., union]
[., ranges, ), ;, ieExplicits, =, ieExplicits, ., union, (, cs, ., ieExplicits, ), ;, }, }, chars, =, chars]
[=, ieExplicits, ., union, (, cs, ., ieExplicits, ), ;, }, }, chars, =, chars, ., union, (, CharRanges, .]
[;, }, }, chars, =, chars, ., union, (, CharRanges, ., withMembers, (, members, ), ), ;, charAlternatives, ., clear]
[., union, (, cs, ., ieExplicits, ), ;, }, }, chars, =, chars, ., union, (, CharRanges, ., withMembers, (]
[), ;, }, }, chars, =, chars, ., union, (, CharRanges, ., withMembers, (, members, ), ), ;, charAlternatives, .]
[., ieExplicits, ), ;, }, }, chars, =, chars, ., union, (, CharRanges, ., withMembers, (, members, ), ), ;]
[=, chars, ., union, (, CharRanges, ., withMembers, (, members, ), ), ;, charAlternatives, ., clear, (, ), ;, charAlternatives]
[;, charAlternatives, ., clear, (, ), ;, charAlternatives, ., add, (, new, Charset, (, chars, ,, ieExplicits, ), ., simplify]
[., union, (, CharRanges, ., withMembers, (, members, ), ), ;, charAlternatives, ., clear, (, ), ;, charAlternatives, ., add]
[), ;, charAlternatives, ., clear, (, ), ;, charAlternatives, ., add, (, new, Charset, (, chars, ,, ieExplicits, ), .]
[., withMembers, (, members, ), ), ;, charAlternatives, ., clear, (, ), ;, charAlternatives, ., add, (, new, Charset, (]
[), ), ;, charAlternatives, ., clear, (, ), ;, charAlternatives, ., add, (, new, Charset, (, chars, ,, ieExplicits, )]
[;, charAlternatives, ., add, (, new, Charset, (, chars, ,, ieExplicits, ), ., simplify, (, flags, ), ), ;, n]
[., clear, (, ), ;, charAlternatives, ., add, (, new, Charset, (, chars, ,, ieExplicits, ), ., simplify, (, flags]
[;, n, =, alternatives, ., size, (, ), ;, }, }, }, switch, (, alternatives, ., size, (, ), )]
[., add, (, new, Charset, (, chars, ,, ieExplicits, ), ., simplify, (, flags, ), ), ;, n, =, alternatives]
[), ;, n, =, alternatives, ., size, (, ), ;, }, }, }, switch, (, alternatives, ., size, (, )]
[., simplify, (, flags, ), ), ;, n, =, alternatives, ., size, (, ), ;, }, }, }, switch, (]
[,, ieExplicits, ), ., simplify, (, flags, ), ), ;, n, =, alternatives, ., size, (, ), ;, }, }]
[), ., simplify, (, flags, ), ), ;, n, =, alternatives, ., size, (, ), ;, }, }, }, switch]
[), ), ;, n, =, alternatives, ., size, (, ), ;, }, }, }, switch, (, alternatives, ., size, (]
[=, alternatives, ., size, (, ), ;, }, }, }, switch, (, alternatives, ., size, (, ), ), {, case]
[;, }, }, }, switch, (, alternatives, ., size, (, ), ), {, case, 0, :, return, Empty, ., INSTANCE]
[., size, (, ), ;, }, }, }, switch, (, alternatives, ., size, (, ), ), {, case, 0, :]
[), {, case, 0, :, return, Empty, ., INSTANCE, ;, case, 1, :, return, alternatives, ., get, (, 0, )]
[., size, (, ), ), {, case, 0, :, return, Empty, ., INSTANCE, ;, case, 1, :, return, alternatives, .]
[:, return, Empty, ., INSTANCE, ;, case, 1, :, return, alternatives, ., get, (, 0, ), ;, case, 2, :]
[;, case, 1, :, return, alternatives, ., get, (, 0, ), ;, case, 2, :, if, (, alternatives, ., get]
[., INSTANCE, ;, case, 1, :, return, alternatives, ., get, (, 0, ), ;, case, 2, :, if, (, alternatives]
[:, return, alternatives, ., get, (, 0, ), ;, case, 2, :, if, (, alternatives, ., get, (, 1, )]
[;, case, 2, :, if, (, alternatives, ., get, (, 1, ), instanceof, Empty, ), {, return, new, Repetition, (]
[., get, (, 0, ), ;, case, 2, :, if, (, alternatives, ., get, (, 1, ), instanceof, Empty, )]
[), ;, case, 2, :, if, (, alternatives, ., get, (, 1, ), instanceof, Empty, ), {, return, new, Repetition]
[:, if, (, alternatives, ., get, (, 1, ), instanceof, Empty, ), {, return, new, Repetition, (, alternatives, ., get]
[), {, return, new, Repetition, (, alternatives, ., get, (, 0, ), ,, 0, ,, 1, ,, true, ), ;]
[instanceof, Empty, ), {, return, new, Repetition, (, alternatives, ., get, (, 0, ), ,, 0, ,, 1, ,, true]
[., get, (, 1, ), instanceof, Empty, ), {, return, new, Repetition, (, alternatives, ., get, (, 0, ), ,]
[), instanceof, Empty, ), {, return, new, Repetition, (, alternatives, ., get, (, 0, ), ,, 0, ,, 1, ,]
[;, }, else, if, (, alternatives, ., get, (, 0, ), instanceof, Empty, ), {, return, new, Repetition, (, alternatives]
[,, 0, ,, 1, ,, true, ), ;, }, else, if, (, alternatives, ., get, (, 0, ), instanceof, Empty]
[., get, (, 0, ), ,, 0, ,, 1, ,, true, ), ;, }, else, if, (, alternatives, ., get]
[), ,, 0, ,, 1, ,, true, ), ;, }, else, if, (, alternatives, ., get, (, 0, ), instanceof]
[,, 1, ,, true, ), ;, }, else, if, (, alternatives, ., get, (, 0, ), instanceof, Empty, ), {]
[,, true, ), ;, }, else, if, (, alternatives, ., get, (, 0, ), instanceof, Empty, ), {, return, new]
[), ;, }, else, if, (, alternatives, ., get, (, 0, ), instanceof, Empty, ), {, return, new, Repetition, (]
[), {, return, new, Repetition, (, alternatives, ., get, (, 1, ), ,, 0, ,, 1, ,, false, ), ;]
[instanceof, Empty, ), {, return, new, Repetition, (, alternatives, ., get, (, 1, ), ,, 0, ,, 1, ,, false]
[., get, (, 0, ), instanceof, Empty, ), {, return, new, Repetition, (, alternatives, ., get, (, 1, ), ,]
[), instanceof, Empty, ), {, return, new, Repetition, (, alternatives, ., get, (, 1, ), ,, 0, ,, 1, ,]
[;, }, break, ;, }, return, alternatives, ., equals, (, this, ., alternatives, ), ?, this, :, new, Alternation, (]
[,, 0, ,, 1, ,, false, ), ;, }, break, ;, }, return, alternatives, ., equals, (, this, ., alternatives]
[., get, (, 1, ), ,, 0, ,, 1, ,, false, ), ;, }, break, ;, }, return, alternatives, .]
[), ,, 0, ,, 1, ,, false, ), ;, }, break, ;, }, return, alternatives, ., equals, (, this, .]
[,, 1, ,, false, ), ;, }, break, ;, }, return, alternatives, ., equals, (, this, ., alternatives, ), ?]
[,, false, ), ;, }, break, ;, }, return, alternatives, ., equals, (, this, ., alternatives, ), ?, this, :]
[), ;, }, break, ;, }, return, alternatives, ., equals, (, this, ., alternatives, ), ?, this, :, new, Alternation]
[;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, for, (, RegExpTree, alternative, :, alternatives, ), {, if, (]
[?, this, :, new, Alternation, (, alternatives, ), ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, for, (]
[., equals, (, this, ., alternatives, ), ?, this, :, new, Alternation, (, alternatives, ), ;, }, @, Override, public]
[), ?, this, :, new, Alternation, (, alternatives, ), ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, for]
[., alternatives, ), ?, this, :, new, Alternation, (, alternatives, ), ;, }, @, Override, public, boolean, isCaseSensitive, (, )]
[:, new, Alternation, (, alternatives, ), ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, for, (, RegExpTree, alternative]
[;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, for, (, RegExpTree, alternative, :, alternatives, ), {, if, (]
[), ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, for, (, RegExpTree, alternative, :, alternatives, ), {, if]
[), {, if, (, alternative, ., isCaseSensitive, (, ), ), {, return, true, ;, }, }, return, false, ;, }]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, containsAnchor, (, ), {, for]
[., isCaseSensitive, (, ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, containsAnchor]
[;, }, }, return, false, ;, }, @, Override, public, boolean, containsAnchor, (, ), {, for, (, RegExpTree, alternative, :]
[;, }, @, Override, public, boolean, containsAnchor, (, ), {, for, (, RegExpTree, alternative, :, alternatives, ), {, if, (]
[), {, if, (, alternative, ., containsAnchor, (, ), ), {, return, true, ;, }, }, return, false, ;, }]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, int, numCapturingGroups, (, ), {, int]
[., containsAnchor, (, ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, int, numCapturingGroups]
[;, }, }, return, false, ;, }, @, Override, public, int, numCapturingGroups, (, ), {, int, n, =, 0, ;]
[;, }, @, Override, public, int, numCapturingGroups, (, ), {, int, n, =, 0, ;, for, (, RegExpTree, alternative, :]
[;, for, (, RegExpTree, alternative, :, alternatives, ), {, n, +=, alternative, ., numCapturingGroups, (, ), ;, }, return, n]
[), {, n, +=, alternative, ., numCapturingGroups, (, ), ;, }, return, n, ;, }, @, Override, public, List, <]
[+=, alternative, ., numCapturingGroups, (, ), ;, }, return, n, ;, }, @, Override, public, List, <, ?, extends, RegExpTree]
[;, }, return, n, ;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children, (, ), {, return]
[., numCapturingGroups, (, ), ;, }, return, n, ;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children]
[;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children, (, ), {, return, alternatives, ;, }, @]
[;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, for, (, int, i, =, 0, ,, n]
[,, n, =, alternatives, ., size, (, ), ;, i, <, n, ;, ++, i, ), {, if, (, i]
[;, i, <, n, ;, ++, i, ), {, if, (, i, !=, 0, ), {, sb, ., append, (]
[., size, (, ), ;, i, <, n, ;, ++, i, ), {, if, (, i, !=, 0, ), {]
[;, ++, i, ), {, if, (, i, !=, 0, ), {, sb, ., append, (, '|', ), ;, }]
[<, n, ;, ++, i, ), {, if, (, i, !=, 0, ), {, sb, ., append, (, '|', )]
[;, ++, i, ), {, if, (, i, !=, 0, ), {, sb, ., append, (, '|', ), ;, }]
[), {, if, (, i, !=, 0, ), {, sb, ., append, (, '|', ), ;, }, alternatives, ., get]
[), {, if, (, i, !=, 0, ), {, sb, ., append, (, '|', ), ;, }, alternatives, ., get]
[), {, sb, ., append, (, '|', ), ;, }, alternatives, ., get, (, i, ), ., appendSourceCode, (, sb]
[!=, 0, ), {, sb, ., append, (, '|', ), ;, }, alternatives, ., get, (, i, ), ., appendSourceCode]
[), {, sb, ., append, (, '|', ), ;, }, alternatives, ., get, (, i, ), ., appendSourceCode, (, sb]
[;, }, alternatives, ., get, (, i, ), ., appendSourceCode, (, sb, ), ;, }, }, @, Override, protected, void]
[., append, (, '|', ), ;, }, alternatives, ., get, (, i, ), ., appendSourceCode, (, sb, ), ;, }]
[), ;, }, alternatives, ., get, (, i, ), ., appendSourceCode, (, sb, ), ;, }, }, @, Override, protected]
[;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public, boolean, equals, (]
[., appendSourceCode, (, sb, ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @]
[., get, (, i, ), ., appendSourceCode, (, sb, ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder]
[), ., appendSourceCode, (, sb, ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }]
[), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public, boolean, equals]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 0x51b57cd1, ^, alternatives, ., hashCode, (, ), ;, }]
[||, (, (, o, instanceof, Alternation, ), &&, alternatives, ., equals, (, (, (, Alternation, ), o, ), ., alternatives]
[==, o, ||, (, (, o, instanceof, Alternation, ), &&, alternatives, ., equals, (, (, (, Alternation, ), o, )]
[||, (, (, o, instanceof, Alternation, ), &&, alternatives, ., equals, (, (, (, Alternation, ), o, ), ., alternatives]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 0x51b57cd1, ^, alternatives, ., hashCode, (, ), ;, }]
[), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x51b57cd1, ^, alternatives, ., hashCode, (, ), ;]
[&&, alternatives, ., equals, (, (, (, Alternation, ), o, ), ., alternatives, ), ), ;, }, @, Override, public]
[), &&, alternatives, ., equals, (, (, (, Alternation, ), o, ), ., alternatives, ), ), ;, }, @, Override]
[instanceof, Alternation, ), &&, alternatives, ., equals, (, (, (, Alternation, ), o, ), ., alternatives, ), ), ;, }]
[), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x51b57cd1, ^, alternatives, ., hashCode, (, ), ;]
[., equals, (, (, (, Alternation, ), o, ), ., alternatives, ), ), ;, }, @, Override, public, int, hashCode]
[), ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x51b57cd1, ^, alternatives, ., hashCode, (, )]
[., alternatives, ), ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x51b57cd1, ^, alternatives, ., hashCode]
[), ., alternatives, ), ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x51b57cd1, ^, alternatives, .]
[), ., alternatives, ), ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x51b57cd1, ^, alternatives, .]
[;, }, }, private, static, final, RegExpTree, NEVER_MATCHES, =, new, LookaheadAssertion, (, Empty, ., INSTANCE, ,, false, ), ;, static]
[^, alternatives, ., hashCode, (, ), ;, }, }, private, static, final, RegExpTree, NEVER_MATCHES, =, new, LookaheadAssertion, (, Empty, .]
[;, }, }, private, static, final, RegExpTree, NEVER_MATCHES, =, new, LookaheadAssertion, (, Empty, ., INSTANCE, ,, false, ), ;, static]
[., hashCode, (, ), ;, }, }, private, static, final, RegExpTree, NEVER_MATCHES, =, new, LookaheadAssertion, (, Empty, ., INSTANCE, ,]
[;, static, final, class, LookaheadAssertion, extends, RegExpTree, {, final, RegExpTree, body, ;, final, boolean, positive, ;, LookaheadAssertion, (, RegExpTree, body]
[,, false, ), ;, static, final, class, LookaheadAssertion, extends, RegExpTree, {, final, RegExpTree, body, ;, final, boolean, positive, ;, LookaheadAssertion]
[., INSTANCE, ,, false, ), ;, static, final, class, LookaheadAssertion, extends, RegExpTree, {, final, RegExpTree, body, ;, final, boolean, positive]
[), ;, static, final, class, LookaheadAssertion, extends, RegExpTree, {, final, RegExpTree, body, ;, final, boolean, positive, ;, LookaheadAssertion, (, RegExpTree]
[=, body, ;, this, ., positive, =, positive, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {]
[., body, =, body, ;, this, ., positive, =, positive, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags]
[;, this, ., positive, =, positive, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, RegExpTree, simpleBody]
[=, positive, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, RegExpTree, simpleBody, =, body, ., simplify]
[., positive, =, positive, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, RegExpTree, simpleBody, =, body]
[;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, RegExpTree, simpleBody, =, body, ., simplify, (, flags]
[;, if, (, simpleBody, instanceof, Empty, ), {, if, (, positive, ), {, return, simpleBody, ;, }, }, return, new]
[., simplify, (, flags, ), ;, if, (, simpleBody, instanceof, Empty, ), {, if, (, positive, ), {, return, simpleBody]
[), ;, if, (, simpleBody, instanceof, Empty, ), {, if, (, positive, ), {, return, simpleBody, ;, }, }, return]
[), {, if, (, positive, ), {, return, simpleBody, ;, }, }, return, new, LookaheadAssertion, (, simpleBody, ,, positive, )]
[instanceof, Empty, ), {, if, (, positive, ), {, return, simpleBody, ;, }, }, return, new, LookaheadAssertion, (, simpleBody, ,]
[), {, return, simpleBody, ;, }, }, return, new, LookaheadAssertion, (, simpleBody, ,, positive, ), ;, }, @, Override, public]
[;, }, }, return, new, LookaheadAssertion, (, simpleBody, ,, positive, ), ;, }, @, Override, public, boolean, isCaseSensitive, (, )]
[;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, return, body, ., isCaseSensitive, (, ), ;, }, @, Override]
[,, positive, ), ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, return, body, ., isCaseSensitive, (, ), ;]
[), ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, return, body, ., isCaseSensitive, (, ), ;, }, @]
[;, }, @, Override, public, boolean, containsAnchor, (, ), {, return, body, ., containsAnchor, (, ), ;, }, @, Override]
[., isCaseSensitive, (, ), ;, }, @, Override, public, boolean, containsAnchor, (, ), {, return, body, ., containsAnchor, (, )]
[;, }, @, Override, public, int, numCapturingGroups, (, ), {, return, body, ., numCapturingGroups, (, ), ;, }, @, Override]
[., containsAnchor, (, ), ;, }, @, Override, public, int, numCapturingGroups, (, ), {, return, body, ., numCapturingGroups, (, )]
[;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children, (, ), {, return, ImmutableList, ., of, (]
[., numCapturingGroups, (, ), ;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children, (, ), {, return]
[;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (, positive, ?, "(?=", :]
[., of, (, body, ), ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append]
[), ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (, positive, ?, "(?="]
[;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;, }, @, Override, protected, void]
[., append, (, positive, ?, "(?=", :, "(?!", ), ;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append]
[), ;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;, }, @, Override, protected]
[?, "(?=", :, "(?!", ), ;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;]
[:, "(?!", ), ;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;, }, @]
[), ;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;, }, @, Override, protected]
[;, sb, ., append, (, ')', ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb]
[., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;, }, @, Override, protected, void, appendDebugInfo, (]
[), ;, sb, ., append, (, ')', ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (, positive, ?, "positive", :]
[., append, (, ')', ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append]
[), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (, positive, ?, "positive"]
[;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (, o, instanceof, LookaheadAssertion, )]
[., append, (, positive, ?, "positive", :, "negative", ), ;, }, @, Override, public, boolean, equals, (, Object, o, )]
[), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (, o, instanceof, LookaheadAssertion]
[?, "positive", :, "negative", ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !]
[:, "negative", ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (, o]
[), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (, o, instanceof, LookaheadAssertion]
[), {, return, false, ;, }, LookaheadAssertion, that, =, (, LookaheadAssertion, ), o, ;, return, this, ., positive, ==, that]
[), {, return, false, ;, }, LookaheadAssertion, that, =, (, LookaheadAssertion, ), o, ;, return, this, ., positive, ==, that]
[), ), {, return, false, ;, }, LookaheadAssertion, that, =, (, LookaheadAssertion, ), o, ;, return, this, ., positive, ==]
[instanceof, LookaheadAssertion, ), ), {, return, false, ;, }, LookaheadAssertion, that, =, (, LookaheadAssertion, ), o, ;, return, this, .]
[;, }, LookaheadAssertion, that, =, (, LookaheadAssertion, ), o, ;, return, this, ., positive, ==, that, ., positive, &&, this]
[;, return, this, ., positive, ==, that, ., positive, &&, this, ., body, ., equals, (, that, ., body, )]
[;, return, this, ., positive, ==, that, ., positive, &&, this, ., body, ., equals, (, that, ., body, )]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 0x723aba9, ^, body, ., hashCode, (, ), ;, }]
[&&, this, ., body, ., equals, (, that, ., body, ), ;, }, @, Override, public, int, hashCode, (, )]
[==, that, ., positive, &&, this, ., body, ., equals, (, that, ., body, ), ;, }, @, Override, public]
[., positive, ==, that, ., positive, &&, this, ., body, ., equals, (, that, ., body, ), ;, }, @]
[&&, this, ., body, ., equals, (, that, ., body, ), ;, }, @, Override, public, int, hashCode, (, )]
[., positive, &&, this, ., body, ., equals, (, that, ., body, ), ;, }, @, Override, public, int, hashCode]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 0x723aba9, ^, body, ., hashCode, (, ), ;, }]
[., equals, (, that, ., body, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x723aba9, ^]
[., body, ., equals, (, that, ., body, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x723aba9, ^, body, ., hashCode, (, ), ;]
[., body, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x723aba9, ^, body, ., hashCode, (]
[;, }, }, static, final, class, CapturingGroup, extends, RegExpTree, {, final, RegExpTree, body, ;, CapturingGroup, (, RegExpTree, body, ), {]
[^, body, ., hashCode, (, ), ;, }, }, static, final, class, CapturingGroup, extends, RegExpTree, {, final, RegExpTree, body, ;]
[;, }, }, static, final, class, CapturingGroup, extends, RegExpTree, {, final, RegExpTree, body, ;, CapturingGroup, (, RegExpTree, body, ), {]
[., hashCode, (, ), ;, }, }, static, final, class, CapturingGroup, extends, RegExpTree, {, final, RegExpTree, body, ;, CapturingGroup, (]
[=, body, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return, new, CapturingGroup, (, body, .]
[., body, =, body, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return, new, CapturingGroup, (]
[;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return, new, CapturingGroup, (, body, ., simplify, (]
[;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, return, body, ., isCaseSensitive, (, ), ;, }, @, Override]
[), ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, return, body, ., isCaseSensitive, (, ), ;, }, @]
[., simplify, (, flags, ), ), ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, return, body, ., isCaseSensitive]
[), ), ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, return, body, ., isCaseSensitive, (, ), ;, }]
[;, }, @, Override, public, boolean, containsAnchor, (, ), {, return, body, ., containsAnchor, (, ), ;, }, @, Override]
[., isCaseSensitive, (, ), ;, }, @, Override, public, boolean, containsAnchor, (, ), {, return, body, ., containsAnchor, (, )]
[;, }, @, Override, public, int, numCapturingGroups, (, ), {, return, 1, ;, }, @, Override, public, List, <, ?]
[., containsAnchor, (, ), ;, }, @, Override, public, int, numCapturingGroups, (, ), {, return, 1, ;, }, @, Override]
[;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children, (, ), {, return, ImmutableList, ., of, (]
[;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (, '(', ), ;, body]
[., of, (, body, ), ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append]
[), ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (, '(', ), ;]
[;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;, }, @, Override, protected, void]
[., append, (, '(', ), ;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;]
[), ;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;, }, @, Override, protected]
[;, sb, ., append, (, ')', ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }]
[., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;, }, @, Override, protected, void, appendDebugInfo, (]
[), ;, sb, ., append, (, ')', ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public, boolean, equals, (, Object]
[., append, (, ')', ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override]
[), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public, boolean, equals, (]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 0x55781738, ^, body, ., hashCode, (, ), ;, }]
[&&, body, ., equals, (, (, (, CapturingGroup, ), o, ), ., body, ), ;, }, @, Override, public, int]
[instanceof, CapturingGroup, &&, body, ., equals, (, (, (, CapturingGroup, ), o, ), ., body, ), ;, }, @, Override]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 0x55781738, ^, body, ., hashCode, (, ), ;, }]
[., equals, (, (, (, CapturingGroup, ), o, ), ., body, ), ;, }, @, Override, public, int, hashCode, (]
[), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x55781738, ^, body, ., hashCode, (, ), ;]
[., body, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x55781738, ^, body, ., hashCode, (]
[), ., body, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x55781738, ^, body, ., hashCode]
[), ., body, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x55781738, ^, body, ., hashCode]
[;, }, }, private, static, final, CharRanges, DIGITS, =, CharRanges, ., inclusive, (, '0', ,, '9', ), ;, private, static]
[^, body, ., hashCode, (, ), ;, }, }, private, static, final, CharRanges, DIGITS, =, CharRanges, ., inclusive, (, '0']
[;, }, }, private, static, final, CharRanges, DIGITS, =, CharRanges, ., inclusive, (, '0', ,, '9', ), ;, private, static]
[., hashCode, (, ), ;, }, }, private, static, final, CharRanges, DIGITS, =, CharRanges, ., inclusive, (, '0', ,, '9']
[;, private, static, final, CharRanges, UCASE_LETTERS, =, CharRanges, ., inclusive, (, 'A', ,, 'Z', ), ;, private, static, final, CharRanges]
[., inclusive, (, '0', ,, '9', ), ;, private, static, final, CharRanges, UCASE_LETTERS, =, CharRanges, ., inclusive, (, 'A', ,]
[,, '9', ), ;, private, static, final, CharRanges, UCASE_LETTERS, =, CharRanges, ., inclusive, (, 'A', ,, 'Z', ), ;, private]
[), ;, private, static, final, CharRanges, UCASE_LETTERS, =, CharRanges, ., inclusive, (, 'A', ,, 'Z', ), ;, private, static, final]
[;, private, static, final, CharRanges, LCASE_LETTERS, =, CharRanges, ., inclusive, (, 'a', ,, 'z', ), ;, private, static, final, CharRanges]
[., inclusive, (, 'A', ,, 'Z', ), ;, private, static, final, CharRanges, LCASE_LETTERS, =, CharRanges, ., inclusive, (, 'a', ,]
[,, 'Z', ), ;, private, static, final, CharRanges, LCASE_LETTERS, =, CharRanges, ., inclusive, (, 'a', ,, 'z', ), ;, private]
[), ;, private, static, final, CharRanges, LCASE_LETTERS, =, CharRanges, ., inclusive, (, 'a', ,, 'z', ), ;, private, static, final]
[;, private, static, final, CharRanges, LETTERS, =, UCASE_LETTERS, ., union, (, LCASE_LETTERS, ), ;, private, static, final, CharRanges, WORD_CHARS, =]
[., inclusive, (, 'a', ,, 'z', ), ;, private, static, final, CharRanges, LETTERS, =, UCASE_LETTERS, ., union, (, LCASE_LETTERS, )]
[,, 'z', ), ;, private, static, final, CharRanges, LETTERS, =, UCASE_LETTERS, ., union, (, LCASE_LETTERS, ), ;, private, static, final]
[), ;, private, static, final, CharRanges, LETTERS, =, UCASE_LETTERS, ., union, (, LCASE_LETTERS, ), ;, private, static, final, CharRanges, WORD_CHARS]
[;, private, static, final, CharRanges, WORD_CHARS, =, DIGITS, ., union, (, LETTERS, ), ., union, (, CharRanges, ., withMembers, (]
[., union, (, LCASE_LETTERS, ), ;, private, static, final, CharRanges, WORD_CHARS, =, DIGITS, ., union, (, LETTERS, ), ., union]
[), ;, private, static, final, CharRanges, WORD_CHARS, =, DIGITS, ., union, (, LETTERS, ), ., union, (, CharRanges, ., withMembers]
[;, private, static, final, CharRanges, INVERSE_WORD_CHARS, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (, WORD_CHARS, ), ;, private, static, final, CharRanges]
[., union, (, CharRanges, ., withMembers, (, '_', ), ), ;, private, static, final, CharRanges, INVERSE_WORD_CHARS, =, CharRanges, ., ALL_CODE_UNITS]
[., union, (, LETTERS, ), ., union, (, CharRanges, ., withMembers, (, '_', ), ), ;, private, static, final, CharRanges]
[), ., union, (, CharRanges, ., withMembers, (, '_', ), ), ;, private, static, final, CharRanges, INVERSE_WORD_CHARS, =, CharRanges, .]
[), ;, private, static, final, CharRanges, INVERSE_WORD_CHARS, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (, WORD_CHARS, ), ;, private, static, final]
[., withMembers, (, '_', ), ), ;, private, static, final, CharRanges, INVERSE_WORD_CHARS, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (, WORD_CHARS]
[), ), ;, private, static, final, CharRanges, INVERSE_WORD_CHARS, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (, WORD_CHARS, ), ;, private, static]
[;, private, static, final, CharRanges, SPACE_CHARS, =, CharRanges, ., withMembers, (, '\t', ,, '\n', ,, '\u000b', ,, '\u000c', ,, '\r']
[., difference, (, WORD_CHARS, ), ;, private, static, final, CharRanges, SPACE_CHARS, =, CharRanges, ., withMembers, (, '\t', ,, '\n', ,]
[., ALL_CODE_UNITS, ., difference, (, WORD_CHARS, ), ;, private, static, final, CharRanges, SPACE_CHARS, =, CharRanges, ., withMembers, (, '\t', ,]
[), ;, private, static, final, CharRanges, SPACE_CHARS, =, CharRanges, ., withMembers, (, '\t', ,, '\n', ,, '\u000b', ,, '\u000c', ,]
[;, private, static, final, CharRanges, IE_SPACE_CHARS, =, CharRanges, ., withMembers, (, '\t', ,, '\n', ,, '\u000b', ,, '\u000c', ,, '\r']
[., withMembers, (, '\t', ,, '\n', ,, '\u000b', ,, '\u000c', ,, '\r', ,, ' ', ,, '\u00a0', ,, '\u1680', ,, '\u180e']
[,, '\n', ,, '\u000b', ,, '\u000c', ,, '\r', ,, ' ', ,, '\u00a0', ,, '\u1680', ,, '\u180e', ,, '\u2000', ,, '\u2001']
[,, '\u000b', ,, '\u000c', ,, '\r', ,, ' ', ,, '\u00a0', ,, '\u1680', ,, '\u180e', ,, '\u2000', ,, '\u2001', ,, '\u2002']
[,, '\u000c', ,, '\r', ,, ' ', ,, '\u00a0', ,, '\u1680', ,, '\u180e', ,, '\u2000', ,, '\u2001', ,, '\u2002', ,, '\u2003']
[,, '\r', ,, ' ', ,, '\u00a0', ,, '\u1680', ,, '\u180e', ,, '\u2000', ,, '\u2001', ,, '\u2002', ,, '\u2003', ,, '\u2004']
[,, ' ', ,, '\u00a0', ,, '\u1680', ,, '\u180e', ,, '\u2000', ,, '\u2001', ,, '\u2002', ,, '\u2003', ,, '\u2004', ,, '\u2005']
[,, '\u00a0', ,, '\u1680', ,, '\u180e', ,, '\u2000', ,, '\u2001', ,, '\u2002', ,, '\u2003', ,, '\u2004', ,, '\u2005', ,, '\u2006']
[,, '\u1680', ,, '\u180e', ,, '\u2000', ,, '\u2001', ,, '\u2002', ,, '\u2003', ,, '\u2004', ,, '\u2005', ,, '\u2006', ,, '\u2007']
[,, '\u180e', ,, '\u2000', ,, '\u2001', ,, '\u2002', ,, '\u2003', ,, '\u2004', ,, '\u2005', ,, '\u2006', ,, '\u2007', ,, '\u2008']
[,, '\u2000', ,, '\u2001', ,, '\u2002', ,, '\u2003', ,, '\u2004', ,, '\u2005', ,, '\u2006', ,, '\u2007', ,, '\u2008', ,, '\u2009']
[,, '\u2001', ,, '\u2002', ,, '\u2003', ,, '\u2004', ,, '\u2005', ,, '\u2006', ,, '\u2007', ,, '\u2008', ,, '\u2009', ,, '\u200a']
[,, '\u2002', ,, '\u2003', ,, '\u2004', ,, '\u2005', ,, '\u2006', ,, '\u2007', ,, '\u2008', ,, '\u2009', ,, '\u200a', ,, '\u2028']
[,, '\u2003', ,, '\u2004', ,, '\u2005', ,, '\u2006', ,, '\u2007', ,, '\u2008', ,, '\u2009', ,, '\u200a', ,, '\u2028', ,, '\u2029']
[,, '\u2004', ,, '\u2005', ,, '\u2006', ,, '\u2007', ,, '\u2008', ,, '\u2009', ,, '\u200a', ,, '\u2028', ,, '\u2029', ,, '\u202f']
[,, '\u2005', ,, '\u2006', ,, '\u2007', ,, '\u2008', ,, '\u2009', ,, '\u200a', ,, '\u2028', ,, '\u2029', ,, '\u202f', ,, '\u205f']
[,, '\u2006', ,, '\u2007', ,, '\u2008', ,, '\u2009', ,, '\u200a', ,, '\u2028', ,, '\u2029', ,, '\u202f', ,, '\u205f', ,, '\u3000']
[,, '\u2007', ,, '\u2008', ,, '\u2009', ,, '\u200a', ,, '\u2028', ,, '\u2029', ,, '\u202f', ,, '\u205f', ,, '\u3000', ,, '\ufeff']
[,, '\u2008', ,, '\u2009', ,, '\u200a', ,, '\u2028', ,, '\u2029', ,, '\u202f', ,, '\u205f', ,, '\u3000', ,, '\ufeff', ), ;]
[,, '\u2009', ,, '\u200a', ,, '\u2028', ,, '\u2029', ,, '\u202f', ,, '\u205f', ,, '\u3000', ,, '\ufeff', ), ;, private, static]
[,, '\u200a', ,, '\u2028', ,, '\u2029', ,, '\u202f', ,, '\u205f', ,, '\u3000', ,, '\ufeff', ), ;, private, static, final, CharRanges]
[,, '\u2028', ,, '\u2029', ,, '\u202f', ,, '\u205f', ,, '\u3000', ,, '\ufeff', ), ;, private, static, final, CharRanges, IE_SPACE_CHARS, =]
[,, '\u2029', ,, '\u202f', ,, '\u205f', ,, '\u3000', ,, '\ufeff', ), ;, private, static, final, CharRanges, IE_SPACE_CHARS, =, CharRanges, .]
[,, '\u202f', ,, '\u205f', ,, '\u3000', ,, '\ufeff', ), ;, private, static, final, CharRanges, IE_SPACE_CHARS, =, CharRanges, ., withMembers, (]
[,, '\u205f', ,, '\u3000', ,, '\ufeff', ), ;, private, static, final, CharRanges, IE_SPACE_CHARS, =, CharRanges, ., withMembers, (, '\t', ,]
[,, '\u3000', ,, '\ufeff', ), ;, private, static, final, CharRanges, IE_SPACE_CHARS, =, CharRanges, ., withMembers, (, '\t', ,, '\n', ,]
[,, '\ufeff', ), ;, private, static, final, CharRanges, IE_SPACE_CHARS, =, CharRanges, ., withMembers, (, '\t', ,, '\n', ,, '\u000b', ,]
[), ;, private, static, final, CharRanges, IE_SPACE_CHARS, =, CharRanges, ., withMembers, (, '\t', ,, '\n', ,, '\u000b', ,, '\u000c', ,]
[;, private, static, final, CharRanges, IE_SPEC_ERRORS, =, SPACE_CHARS, ., difference, (, IE_SPACE_CHARS, ), ;, private, static, final, ImmutableMap, <, Character]
[., withMembers, (, '\t', ,, '\n', ,, '\u000b', ,, '\u000c', ,, '\r', ,, ' ', ), ;, private, static, final, CharRanges]
[,, '\n', ,, '\u000b', ,, '\u000c', ,, '\r', ,, ' ', ), ;, private, static, final, CharRanges, IE_SPEC_ERRORS, =, SPACE_CHARS, .]
[,, '\u000b', ,, '\u000c', ,, '\r', ,, ' ', ), ;, private, static, final, CharRanges, IE_SPEC_ERRORS, =, SPACE_CHARS, ., difference, (]
[,, '\u000c', ,, '\r', ,, ' ', ), ;, private, static, final, CharRanges, IE_SPEC_ERRORS, =, SPACE_CHARS, ., difference, (, IE_SPACE_CHARS, )]
[,, '\r', ,, ' ', ), ;, private, static, final, CharRanges, IE_SPEC_ERRORS, =, SPACE_CHARS, ., difference, (, IE_SPACE_CHARS, ), ;, private]
[,, ' ', ), ;, private, static, final, CharRanges, IE_SPEC_ERRORS, =, SPACE_CHARS, ., difference, (, IE_SPACE_CHARS, ), ;, private, static, final]
[), ;, private, static, final, CharRanges, IE_SPEC_ERRORS, =, SPACE_CHARS, ., difference, (, IE_SPACE_CHARS, ), ;, private, static, final, ImmutableMap, <]
[;, private, static, final, ImmutableMap, <, Character, ,, CharRanges, >, NAMED_CHAR_GROUPS, =, ImmutableMap, ., <, Character, ,, CharRanges, >, builder]
[., difference, (, IE_SPACE_CHARS, ), ;, private, static, final, ImmutableMap, <, Character, ,, CharRanges, >, NAMED_CHAR_GROUPS, =, ImmutableMap, ., <]
[), ;, private, static, final, ImmutableMap, <, Character, ,, CharRanges, >, NAMED_CHAR_GROUPS, =, ImmutableMap, ., <, Character, ,, CharRanges, >]
[;, private, static, final, Charset, DOT_CHARSET, =, new, Charset, (, CharRanges, ., ALL_CODE_UNITS, ., difference, (, CharRanges, ., withMembers, (]
[., build, (, ), ;, private, static, final, Charset, DOT_CHARSET, =, new, Charset, (, CharRanges, ., ALL_CODE_UNITS, ., difference, (]
[., put, (, 'W', ,, INVERSE_WORD_CHARS, ), ., build, (, ), ;, private, static, final, Charset, DOT_CHARSET, =, new, Charset]
[., put, (, 'w', ,, WORD_CHARS, ), ., put, (, 'W', ,, INVERSE_WORD_CHARS, ), ., build, (, ), ;, private]
[., put, (, 'S', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, SPACE_CHARS, ), ), ., put, (, 'w', ,, WORD_CHARS]
[., put, (, 's', ,, SPACE_CHARS, ), ., put, (, 'S', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, SPACE_CHARS, )]
[., put, (, 'D', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, DIGITS, ), ), ., put, (, 's', ,, SPACE_CHARS]
[., put, (, 'd', ,, DIGITS, ), ., put, (, 'D', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, DIGITS, )]
[., <, Character, ,, CharRanges, >, builder, (, ), ., put, (, 'd', ,, DIGITS, ), ., put, (, 'D']
[,, DIGITS, ), ., put, (, 'D', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, DIGITS, ), ), ., put, (]
[), ., put, (, 'D', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, DIGITS, ), ), ., put, (, 's', ,]
[,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, DIGITS, ), ), ., put, (, 's', ,, SPACE_CHARS, ), ., put, (]
[), ., put, (, 's', ,, SPACE_CHARS, ), ., put, (, 'S', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, SPACE_CHARS]
[., difference, (, DIGITS, ), ), ., put, (, 's', ,, SPACE_CHARS, ), ., put, (, 'S', ,, CharRanges, .]
[., ALL_CODE_UNITS, ., difference, (, DIGITS, ), ), ., put, (, 's', ,, SPACE_CHARS, ), ., put, (, 'S', ,]
[), ), ., put, (, 's', ,, SPACE_CHARS, ), ., put, (, 'S', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (]
[,, SPACE_CHARS, ), ., put, (, 'S', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, SPACE_CHARS, ), ), ., put, (]
[), ., put, (, 'S', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, SPACE_CHARS, ), ), ., put, (, 'w', ,]
[,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, SPACE_CHARS, ), ), ., put, (, 'w', ,, WORD_CHARS, ), ., put, (]
[), ., put, (, 'w', ,, WORD_CHARS, ), ., put, (, 'W', ,, INVERSE_WORD_CHARS, ), ., build, (, ), ;]
[., difference, (, SPACE_CHARS, ), ), ., put, (, 'w', ,, WORD_CHARS, ), ., put, (, 'W', ,, INVERSE_WORD_CHARS, )]
[., ALL_CODE_UNITS, ., difference, (, SPACE_CHARS, ), ), ., put, (, 'w', ,, WORD_CHARS, ), ., put, (, 'W', ,]
[), ), ., put, (, 'w', ,, WORD_CHARS, ), ., put, (, 'W', ,, INVERSE_WORD_CHARS, ), ., build, (, )]
[,, WORD_CHARS, ), ., put, (, 'W', ,, INVERSE_WORD_CHARS, ), ., build, (, ), ;, private, static, final, Charset, DOT_CHARSET]
[), ., put, (, 'W', ,, INVERSE_WORD_CHARS, ), ., build, (, ), ;, private, static, final, Charset, DOT_CHARSET, =, new]
[,, INVERSE_WORD_CHARS, ), ., build, (, ), ;, private, static, final, Charset, DOT_CHARSET, =, new, Charset, (, CharRanges, ., ALL_CODE_UNITS]
[), ., build, (, ), ;, private, static, final, Charset, DOT_CHARSET, =, new, Charset, (, CharRanges, ., ALL_CODE_UNITS, ., difference]
[;, static, final, class, Charset, extends, RegExpTreeAtom, {, final, CharRanges, ranges, ;, final, CharRanges, ieExplicits, ;, Charset, (, CharRanges, ranges]
[,, CharRanges, ., EMPTY, ), ;, static, final, class, Charset, extends, RegExpTreeAtom, {, final, CharRanges, ranges, ;, final, CharRanges, ieExplicits]
[., difference, (, CharRanges, ., withMembers, (, '\n', ,, '\r', ,, '\u2028', ,, '\u2029', ), ), ,, CharRanges, ., EMPTY]
[., ALL_CODE_UNITS, ., difference, (, CharRanges, ., withMembers, (, '\n', ,, '\r', ,, '\u2028', ,, '\u2029', ), ), ,, CharRanges]
[), ,, CharRanges, ., EMPTY, ), ;, static, final, class, Charset, extends, RegExpTreeAtom, {, final, CharRanges, ranges, ;, final, CharRanges]
[., withMembers, (, '\n', ,, '\r', ,, '\u2028', ,, '\u2029', ), ), ,, CharRanges, ., EMPTY, ), ;, static, final]
[,, '\r', ,, '\u2028', ,, '\u2029', ), ), ,, CharRanges, ., EMPTY, ), ;, static, final, class, Charset, extends, RegExpTreeAtom]
[,, '\u2028', ,, '\u2029', ), ), ,, CharRanges, ., EMPTY, ), ;, static, final, class, Charset, extends, RegExpTreeAtom, {, final]
[,, '\u2029', ), ), ,, CharRanges, ., EMPTY, ), ;, static, final, class, Charset, extends, RegExpTreeAtom, {, final, CharRanges, ranges]
[), ), ,, CharRanges, ., EMPTY, ), ;, static, final, class, Charset, extends, RegExpTreeAtom, {, final, CharRanges, ranges, ;, final]
[), ;, static, final, class, Charset, extends, RegExpTreeAtom, {, final, CharRanges, ranges, ;, final, CharRanges, ieExplicits, ;, Charset, (, CharRanges]
[., EMPTY, ), ;, static, final, class, Charset, extends, RegExpTreeAtom, {, final, CharRanges, ranges, ;, final, CharRanges, ieExplicits, ;, Charset]
[=, ranges, ;, this, ., ieExplicits, =, ieExplicits, ;, }, private, static, int, complexityWordFolded, (, CharRanges, ranges, ), {, return]
[., ranges, =, ranges, ;, this, ., ieExplicits, =, ieExplicits, ;, }, private, static, int, complexityWordFolded, (, CharRanges, ranges, )]
[;, this, ., ieExplicits, =, ieExplicits, ;, }, private, static, int, complexityWordFolded, (, CharRanges, ranges, ), {, return, Math, .]
[=, ieExplicits, ;, }, private, static, int, complexityWordFolded, (, CharRanges, ranges, ), {, return, Math, ., min, (, complexityWordFoldedHelper, (]
[., ieExplicits, =, ieExplicits, ;, }, private, static, int, complexityWordFolded, (, CharRanges, ranges, ), {, return, Math, ., min, (]
[;, }, private, static, int, complexityWordFolded, (, CharRanges, ranges, ), {, return, Math, ., min, (, complexityWordFoldedHelper, (, ranges, )]
[;, }, private, static, int, complexityWordFoldedHelper, (, CharRanges, ranges, ), {, int, complexity, =, DecomposedCharset, ., complexity, (, ranges, )]
[., min, (, complexityWordFoldedHelper, (, ranges, ), ,, 1, +, complexityWordFoldedHelper, (, CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, )]
[,, 1, +, complexityWordFoldedHelper, (, CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, ), ), ), ;, }, private, static, int]
[), ,, 1, +, complexityWordFoldedHelper, (, CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, ), ), ), ;, }, private, static]
[), ;, }, private, static, int, complexityWordFoldedHelper, (, CharRanges, ranges, ), {, int, complexity, =, DecomposedCharset, ., complexity, (, ranges]
[+, complexityWordFoldedHelper, (, CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, ), ), ), ;, }, private, static, int, complexityWordFoldedHelper, (]
[), ;, }, private, static, int, complexityWordFoldedHelper, (, CharRanges, ranges, ), {, int, complexity, =, DecomposedCharset, ., complexity, (, ranges]
[), ), ;, }, private, static, int, complexityWordFoldedHelper, (, CharRanges, ranges, ), {, int, complexity, =, DecomposedCharset, ., complexity, (]
[., difference, (, ranges, ), ), ), ;, }, private, static, int, complexityWordFoldedHelper, (, CharRanges, ranges, ), {, int, complexity]
[., ALL_CODE_UNITS, ., difference, (, ranges, ), ), ), ;, }, private, static, int, complexityWordFoldedHelper, (, CharRanges, ranges, ), {]
[), ), ), ;, }, private, static, int, complexityWordFoldedHelper, (, CharRanges, ranges, ), {, int, complexity, =, DecomposedCharset, ., complexity]
[;, if, (, ranges, ., containsAll, (, WORD_CHARS, ), ), {, complexity, =, Math, ., min, (, complexity, ,, 1]
[., complexity, (, ranges, ), ;, if, (, ranges, ., containsAll, (, WORD_CHARS, ), ), {, complexity, =, Math, .]
[), ;, if, (, ranges, ., containsAll, (, WORD_CHARS, ), ), {, complexity, =, Math, ., min, (, complexity, ,]
[), {, complexity, =, Math, ., min, (, complexity, ,, 1, +, DecomposedCharset, ., complexity, (, ranges, ., difference, (]
[., containsAll, (, WORD_CHARS, ), ), {, complexity, =, Math, ., min, (, complexity, ,, 1, +, DecomposedCharset, ., complexity]
[), ), {, complexity, =, Math, ., min, (, complexity, ,, 1, +, DecomposedCharset, ., complexity, (, ranges, ., difference]
[=, Math, ., min, (, complexity, ,, 1, +, DecomposedCharset, ., complexity, (, ranges, ., difference, (, WORD_CHARS, ), )]
[;, }, if, (, ranges, ., containsAll, (, INVERSE_WORD_CHARS, ), ), {, complexity, =, Math, ., min, (, complexity, ,]
[., min, (, complexity, ,, 1, +, DecomposedCharset, ., complexity, (, ranges, ., difference, (, WORD_CHARS, ), ), ), ;]
[,, 1, +, DecomposedCharset, ., complexity, (, ranges, ., difference, (, WORD_CHARS, ), ), ), ;, }, if, (, ranges]
[), ;, }, if, (, ranges, ., containsAll, (, INVERSE_WORD_CHARS, ), ), {, complexity, =, Math, ., min, (, complexity]
[+, DecomposedCharset, ., complexity, (, ranges, ., difference, (, WORD_CHARS, ), ), ), ;, }, if, (, ranges, ., containsAll]
[), ;, }, if, (, ranges, ., containsAll, (, INVERSE_WORD_CHARS, ), ), {, complexity, =, Math, ., min, (, complexity]
[., complexity, (, ranges, ., difference, (, WORD_CHARS, ), ), ), ;, }, if, (, ranges, ., containsAll, (, INVERSE_WORD_CHARS]
[), ), ;, }, if, (, ranges, ., containsAll, (, INVERSE_WORD_CHARS, ), ), {, complexity, =, Math, ., min, (]
[., difference, (, WORD_CHARS, ), ), ), ;, }, if, (, ranges, ., containsAll, (, INVERSE_WORD_CHARS, ), ), {, complexity]
[), ), ), ;, }, if, (, ranges, ., containsAll, (, INVERSE_WORD_CHARS, ), ), {, complexity, =, Math, ., min]
[), {, complexity, =, Math, ., min, (, complexity, ,, 1, +, DecomposedCharset, ., complexity, (, ranges, ., difference, (]
[., containsAll, (, INVERSE_WORD_CHARS, ), ), {, complexity, =, Math, ., min, (, complexity, ,, 1, +, DecomposedCharset, ., complexity]
[), ), {, complexity, =, Math, ., min, (, complexity, ,, 1, +, DecomposedCharset, ., complexity, (, ranges, ., difference]
[=, Math, ., min, (, complexity, ,, 1, +, DecomposedCharset, ., complexity, (, ranges, ., difference, (, INVERSE_WORD_CHARS, ), )]
[;, }, return, complexity, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, if, (, ranges, .]
[., min, (, complexity, ,, 1, +, DecomposedCharset, ., complexity, (, ranges, ., difference, (, INVERSE_WORD_CHARS, ), ), ), ;]
[,, 1, +, DecomposedCharset, ., complexity, (, ranges, ., difference, (, INVERSE_WORD_CHARS, ), ), ), ;, }, return, complexity, ;]
[), ;, }, return, complexity, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, if, (, ranges]
[+, DecomposedCharset, ., complexity, (, ranges, ., difference, (, INVERSE_WORD_CHARS, ), ), ), ;, }, return, complexity, ;, }, @]
[), ;, }, return, complexity, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, if, (, ranges]
[., complexity, (, ranges, ., difference, (, INVERSE_WORD_CHARS, ), ), ), ;, }, return, complexity, ;, }, @, Override, public]
[), ), ;, }, return, complexity, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, if, (]
[., difference, (, INVERSE_WORD_CHARS, ), ), ), ;, }, return, complexity, ;, }, @, Override, public, RegExpTree, simplify, (, String]
[), ), ), ;, }, return, complexity, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, if]
[;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, if, (, ranges, ., isEmpty, (, ), )]
[), {, return, NEVER_MATCHES, ;, }, CharRanges, best, =, ranges, ;, if, (, flags, ., indexOf, (, 'i', ), >=]
[., isEmpty, (, ), ), {, return, NEVER_MATCHES, ;, }, CharRanges, best, =, ranges, ;, if, (, flags, ., indexOf]
[;, }, CharRanges, best, =, ranges, ;, if, (, flags, ., indexOf, (, 'i', ), >=, 0, ), {, Set]
[;, if, (, flags, ., indexOf, (, 'i', ), >=, 0, ), {, Set, <, CharRanges, >, options, =, Sets]
[), {, Set, <, CharRanges, >, options, =, Sets, ., newLinkedHashSet, (, ), ;, options, ., add, (, CaseCanonicalize, .]
[>=, 0, ), {, Set, <, CharRanges, >, options, =, Sets, ., newLinkedHashSet, (, ), ;, options, ., add, (]
[., indexOf, (, 'i', ), >=, 0, ), {, Set, <, CharRanges, >, options, =, Sets, ., newLinkedHashSet, (, )]
[), >=, 0, ), {, Set, <, CharRanges, >, options, =, Sets, ., newLinkedHashSet, (, ), ;, options, ., add]
[), {, Set, <, CharRanges, >, options, =, Sets, ., newLinkedHashSet, (, ), ;, options, ., add, (, CaseCanonicalize, .]
[;, options, ., add, (, CaseCanonicalize, ., expandToAllMatched, (, ranges, ), ), ;, options, ., add, (, CaseCanonicalize, ., reduceToMinimum]
[., newLinkedHashSet, (, ), ;, options, ., add, (, CaseCanonicalize, ., expandToAllMatched, (, ranges, ), ), ;, options, ., add]
[;, options, ., add, (, CaseCanonicalize, ., reduceToMinimum, (, ranges, ), ), ;, CharRanges, lcaseLetters, =, ranges, ., intersection, (]
[., add, (, CaseCanonicalize, ., expandToAllMatched, (, ranges, ), ), ;, options, ., add, (, CaseCanonicalize, ., reduceToMinimum, (, ranges]
[), ;, options, ., add, (, CaseCanonicalize, ., reduceToMinimum, (, ranges, ), ), ;, CharRanges, lcaseLetters, =, ranges, ., intersection]
[., expandToAllMatched, (, ranges, ), ), ;, options, ., add, (, CaseCanonicalize, ., reduceToMinimum, (, ranges, ), ), ;, CharRanges]
[), ), ;, options, ., add, (, CaseCanonicalize, ., reduceToMinimum, (, ranges, ), ), ;, CharRanges, lcaseLetters, =, ranges, .]
[;, CharRanges, lcaseLetters, =, ranges, ., intersection, (, LCASE_LETTERS, ), ;, CharRanges, ucaseLetters, =, ranges, ., intersection, (, UCASE_LETTERS, )]
[., add, (, CaseCanonicalize, ., reduceToMinimum, (, ranges, ), ), ;, CharRanges, lcaseLetters, =, ranges, ., intersection, (, LCASE_LETTERS, )]
[), ;, CharRanges, lcaseLetters, =, ranges, ., intersection, (, LCASE_LETTERS, ), ;, CharRanges, ucaseLetters, =, ranges, ., intersection, (, UCASE_LETTERS]
[., reduceToMinimum, (, ranges, ), ), ;, CharRanges, lcaseLetters, =, ranges, ., intersection, (, LCASE_LETTERS, ), ;, CharRanges, ucaseLetters, =]
[), ), ;, CharRanges, lcaseLetters, =, ranges, ., intersection, (, LCASE_LETTERS, ), ;, CharRanges, ucaseLetters, =, ranges, ., intersection, (]
[;, CharRanges, ucaseLetters, =, ranges, ., intersection, (, UCASE_LETTERS, ), ;, CharRanges, lcaseLettersToUpper, =, lcaseLetters, ., shift, (, -, 32]
[., intersection, (, LCASE_LETTERS, ), ;, CharRanges, ucaseLetters, =, ranges, ., intersection, (, UCASE_LETTERS, ), ;, CharRanges, lcaseLettersToUpper, =, lcaseLetters]
[), ;, CharRanges, ucaseLetters, =, ranges, ., intersection, (, UCASE_LETTERS, ), ;, CharRanges, lcaseLettersToUpper, =, lcaseLetters, ., shift, (, -]
[;, CharRanges, lcaseLettersToUpper, =, lcaseLetters, ., shift, (, -, 32, ), ;, CharRanges, ucaseLettersToLower, =, ucaseLetters, ., shift, (, 32]
[., intersection, (, UCASE_LETTERS, ), ;, CharRanges, lcaseLettersToUpper, =, lcaseLetters, ., shift, (, -, 32, ), ;, CharRanges, ucaseLettersToLower, =]
[), ;, CharRanges, lcaseLettersToUpper, =, lcaseLetters, ., shift, (, -, 32, ), ;, CharRanges, ucaseLettersToLower, =, ucaseLetters, ., shift, (]
[;, CharRanges, ucaseLettersToLower, =, ucaseLetters, ., shift, (, 32, ), ;, options, ., add, (, ranges, ., union, (, ucaseLettersToLower]
[., shift, (, -, 32, ), ;, CharRanges, ucaseLettersToLower, =, ucaseLetters, ., shift, (, 32, ), ;, options, ., add]
[), ;, CharRanges, ucaseLettersToLower, =, ucaseLetters, ., shift, (, 32, ), ;, options, ., add, (, ranges, ., union, (]
[), ;, CharRanges, ucaseLettersToLower, =, ucaseLetters, ., shift, (, 32, ), ;, options, ., add, (, ranges, ., union, (]
[;, options, ., add, (, ranges, ., union, (, ucaseLettersToLower, ), ), ;, options, ., add, (, ranges, ., union]
[., shift, (, 32, ), ;, options, ., add, (, ranges, ., union, (, ucaseLettersToLower, ), ), ;, options, .]
[), ;, options, ., add, (, ranges, ., union, (, ucaseLettersToLower, ), ), ;, options, ., add, (, ranges, .]
[;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ), ;, options, ., add, (, ranges, ., union]
[., add, (, ranges, ., union, (, ucaseLettersToLower, ), ), ;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper]
[), ;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ), ;, options, ., add, (, ranges, .]
[., union, (, ucaseLettersToLower, ), ), ;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ), ;, options]
[), ), ;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ), ;, options, ., add, (, ranges]
[;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., union, (, ucaseLettersToLower, ), ), ;, options, .]
[., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ), ;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper]
[), ;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., union, (, ucaseLettersToLower, ), ), ;, options]
[., union, (, lcaseLettersToUpper, ), ), ;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., union, (]
[), ), ;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., union, (, ucaseLettersToLower, ), ), ;]
[;, options, ., add, (, ranges, ., union, (, ucaseLettersToLower, ), ., difference, (, ucaseLetters, ), ), ;, options, .]
[., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., union, (, ucaseLettersToLower, ), ), ;, options, ., add, (]
[), ;, options, ., add, (, ranges, ., union, (, ucaseLettersToLower, ), ., difference, (, ucaseLetters, ), ), ;, options]
[., union, (, ucaseLettersToLower, ), ), ;, options, ., add, (, ranges, ., union, (, ucaseLettersToLower, ), ., difference, (]
[., union, (, lcaseLettersToUpper, ), ., union, (, ucaseLettersToLower, ), ), ;, options, ., add, (, ranges, ., union, (]
[), ., union, (, ucaseLettersToLower, ), ), ;, options, ., add, (, ranges, ., union, (, ucaseLettersToLower, ), ., difference]
[), ), ;, options, ., add, (, ranges, ., union, (, ucaseLettersToLower, ), ., difference, (, ucaseLetters, ), ), ;]
[;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., difference, (, lcaseLetters, ), ), ;, int, bestComplexity]
[., add, (, ranges, ., union, (, ucaseLettersToLower, ), ., difference, (, ucaseLetters, ), ), ;, options, ., add, (]
[), ;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., difference, (, lcaseLetters, ), ), ;, int]
[., difference, (, ucaseLetters, ), ), ;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., difference, (]
[., union, (, ucaseLettersToLower, ), ., difference, (, ucaseLetters, ), ), ;, options, ., add, (, ranges, ., union, (]
[), ., difference, (, ucaseLetters, ), ), ;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., difference]
[), ), ;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., difference, (, lcaseLetters, ), ), ;]
[;, int, bestComplexity, =, complexityWordFolded, (, ranges, ), ;, for, (, CharRanges, option, :, options, ), {, int, complexity, =]
[., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., difference, (, lcaseLetters, ), ), ;, int, bestComplexity, =, complexityWordFolded]
[), ;, int, bestComplexity, =, complexityWordFolded, (, ranges, ), ;, for, (, CharRanges, option, :, options, ), {, int, complexity]
[., difference, (, lcaseLetters, ), ), ;, int, bestComplexity, =, complexityWordFolded, (, ranges, ), ;, for, (, CharRanges, option, :]
[., union, (, lcaseLettersToUpper, ), ., difference, (, lcaseLetters, ), ), ;, int, bestComplexity, =, complexityWordFolded, (, ranges, ), ;]
[), ., difference, (, lcaseLetters, ), ), ;, int, bestComplexity, =, complexityWordFolded, (, ranges, ), ;, for, (, CharRanges, option]
[), ), ;, int, bestComplexity, =, complexityWordFolded, (, ranges, ), ;, for, (, CharRanges, option, :, options, ), {, int]
[;, for, (, CharRanges, option, :, options, ), {, int, complexity, =, complexityWordFolded, (, option, ), ;, if, (, complexity]
[), ;, for, (, CharRanges, option, :, options, ), {, int, complexity, =, complexityWordFolded, (, option, ), ;, if, (]
[), {, int, complexity, =, complexityWordFolded, (, option, ), ;, if, (, complexity, <, bestComplexity, ), {, bestComplexity, =, complexity]
[;, if, (, complexity, <, bestComplexity, ), {, bestComplexity, =, complexity, ;, best, =, option, ;, }, }, }, if]
[), ;, if, (, complexity, <, bestComplexity, ), {, bestComplexity, =, complexity, ;, best, =, option, ;, }, }, }]
[), {, bestComplexity, =, complexity, ;, best, =, option, ;, }, }, }, if, (, best, ., getNumRanges, (, )]
[<, bestComplexity, ), {, bestComplexity, =, complexity, ;, best, =, option, ;, }, }, }, if, (, best, ., getNumRanges]
[), {, bestComplexity, =, complexity, ;, best, =, option, ;, }, }, }, if, (, best, ., getNumRanges, (, )]
[=, complexity, ;, best, =, option, ;, }, }, }, if, (, best, ., getNumRanges, (, ), ==, 1, &&]
[;, best, =, option, ;, }, }, }, if, (, best, ., getNumRanges, (, ), ==, 1, &&, best, .]
[=, option, ;, }, }, }, if, (, best, ., getNumRanges, (, ), ==, 1, &&, best, ., end, (]
[;, }, }, }, if, (, best, ., getNumRanges, (, ), ==, 1, &&, best, ., end, (, 0, )]
[), {, return, new, Text, (, Character, ., toString, (, (, char, ), best, ., start, (, 0, ), )]
[&&, best, ., end, (, 0, ), -, best, ., start, (, 0, ), ==, 1, ), {, return, new]
[==, 1, &&, best, ., end, (, 0, ), -, best, ., start, (, 0, ), ==, 1, ), {]
[., getNumRanges, (, ), ==, 1, &&, best, ., end, (, 0, ), -, best, ., start, (, 0, )]
[&&, best, ., end, (, 0, ), -, best, ., start, (, 0, ), ==, 1, ), {, return, new]
[), {, return, new, Text, (, Character, ., toString, (, (, char, ), best, ., start, (, 0, ), )]
[==, 1, ), {, return, new, Text, (, Character, ., toString, (, (, char, ), best, ., start, (, 0]
[-, best, ., start, (, 0, ), ==, 1, ), {, return, new, Text, (, Character, ., toString, (, (]
[., end, (, 0, ), -, best, ., start, (, 0, ), ==, 1, ), {, return, new, Text, (]
[), -, best, ., start, (, 0, ), ==, 1, ), {, return, new, Text, (, Character, ., toString, (]
[==, 1, ), {, return, new, Text, (, Character, ., toString, (, (, char, ), best, ., start, (, 0]
[., start, (, 0, ), ==, 1, ), {, return, new, Text, (, Character, ., toString, (, (, char, )]
[), ==, 1, ), {, return, new, Text, (, Character, ., toString, (, (, char, ), best, ., start, (]
[), {, return, new, Text, (, Character, ., toString, (, (, char, ), best, ., start, (, 0, ), )]
[;, }, if, (, !, best, ., equals, (, ranges, ), ), {, return, new, Charset, (, best, ,, ieExplicits]
[), ;, }, if, (, !, best, ., equals, (, ranges, ), ), {, return, new, Charset, (, best, ,]
[., toString, (, (, char, ), best, ., start, (, 0, ), ), ), ;, }, if, (, !, best]
[), ), ;, }, if, (, !, best, ., equals, (, ranges, ), ), {, return, new, Charset, (, best]
[), ), ;, }, if, (, !, best, ., equals, (, ranges, ), ), {, return, new, Charset, (, best]
[., start, (, 0, ), ), ), ;, }, if, (, !, best, ., equals, (, ranges, ), ), {]
[), ), ), ;, }, if, (, !, best, ., equals, (, ranges, ), ), {, return, new, Charset, (]
[), {, return, new, Charset, (, best, ,, ieExplicits, ), ;, }, return, this, ;, }, @, Override, public, boolean]
[), {, return, new, Charset, (, best, ,, ieExplicits, ), ;, }, return, this, ;, }, @, Override, public, boolean]
[., equals, (, ranges, ), ), {, return, new, Charset, (, best, ,, ieExplicits, ), ;, }, return, this, ;]
[), ), {, return, new, Charset, (, best, ,, ieExplicits, ), ;, }, return, this, ;, }, @, Override, public]
[;, }, return, this, ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, CharRanges, withoutNamedGroups, =, decompose, (, )]
[,, ieExplicits, ), ;, }, return, this, ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, CharRanges, withoutNamedGroups, =]
[), ;, }, return, this, ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, CharRanges, withoutNamedGroups, =, decompose, (]
[;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, CharRanges, withoutNamedGroups, =, decompose, (, ), ., ranges, ;, return]
[;, return, !, withoutNamedGroups, ., equals, (, CaseCanonicalize, ., expandToAllMatched, (, withoutNamedGroups, ), ), ;, }, private, DecomposedCharset, decompose, (]
[., ranges, ;, return, !, withoutNamedGroups, ., equals, (, CaseCanonicalize, ., expandToAllMatched, (, withoutNamedGroups, ), ), ;, }, private, DecomposedCharset]
[;, }, private, DecomposedCharset, decompose, (, CharRanges, ranges, ,, boolean, inverted, ), {, StringBuilder, namedGroups, =, new, StringBuilder, (, )]
[;, }, private, DecomposedCharset, decompose, (, CharRanges, ranges, ,, boolean, inverted, ), {, StringBuilder, namedGroups, =, new, StringBuilder, (, )]
[., equals, (, CaseCanonicalize, ., expandToAllMatched, (, withoutNamedGroups, ), ), ;, }, private, DecomposedCharset, decompose, (, CharRanges, ranges, ,, boolean]
[), ;, }, private, DecomposedCharset, decompose, (, CharRanges, ranges, ,, boolean, inverted, ), {, StringBuilder, namedGroups, =, new, StringBuilder, (]
[., expandToAllMatched, (, withoutNamedGroups, ), ), ;, }, private, DecomposedCharset, decompose, (, CharRanges, ranges, ,, boolean, inverted, ), {, StringBuilder]
[), ), ;, }, private, DecomposedCharset, decompose, (, CharRanges, ranges, ,, boolean, inverted, ), {, StringBuilder, namedGroups, =, new, StringBuilder]
[;, CharRanges, rangesInterIeExplicits, =, ranges, ., intersection, (, ieExplicits, ), ;, while, (, true, ), {, char, groupName, =, 0]
[;, while, (, true, ), {, char, groupName, =, 0, ;, CharRanges, simplest, =, null, ;, int, minComplexity, =, DecomposedCharset]
[., intersection, (, ieExplicits, ), ;, while, (, true, ), {, char, groupName, =, 0, ;, CharRanges, simplest, =, null]
[), ;, while, (, true, ), {, char, groupName, =, 0, ;, CharRanges, simplest, =, null, ;, int, minComplexity, =]
[), {, char, groupName, =, 0, ;, CharRanges, simplest, =, null, ;, int, minComplexity, =, DecomposedCharset, ., complexity, (, ranges]
[;, CharRanges, simplest, =, null, ;, int, minComplexity, =, DecomposedCharset, ., complexity, (, ranges, ), ;, for, (, Map, .]
[;, int, minComplexity, =, DecomposedCharset, ., complexity, (, ranges, ), ;, for, (, Map, ., Entry, <, Character, ,, CharRanges]
[;, for, (, Map, ., Entry, <, Character, ,, CharRanges, >, namedGroup, :, NAMED_CHAR_GROUPS, ., entrySet, (, ), ), {]
[., complexity, (, ranges, ), ;, for, (, Map, ., Entry, <, Character, ,, CharRanges, >, namedGroup, :, NAMED_CHAR_GROUPS, .]
[), ;, for, (, Map, ., Entry, <, Character, ,, CharRanges, >, namedGroup, :, NAMED_CHAR_GROUPS, ., entrySet, (, ), )]
[), {, CharRanges, group, =, namedGroup, ., getValue, (, ), ;, if, (, ranges, ., containsAll, (, group, ), )]
[., entrySet, (, ), ), {, CharRanges, group, =, namedGroup, ., getValue, (, ), ;, if, (, ranges, ., containsAll]
[;, if, (, ranges, ., containsAll, (, group, ), ), {, CharRanges, withoutGroup, =, ranges, ., difference, (, group, )]
[., getValue, (, ), ;, if, (, ranges, ., containsAll, (, group, ), ), {, CharRanges, withoutGroup, =, ranges, .]
[), {, CharRanges, withoutGroup, =, ranges, ., difference, (, group, ), ., union, (, rangesInterIeExplicits, ), ;, int, complexity, =]
[., containsAll, (, group, ), ), {, CharRanges, withoutGroup, =, ranges, ., difference, (, group, ), ., union, (, rangesInterIeExplicits]
[), ), {, CharRanges, withoutGroup, =, ranges, ., difference, (, group, ), ., union, (, rangesInterIeExplicits, ), ;, int, complexity]
[;, int, complexity, =, DecomposedCharset, ., complexity, (, withoutGroup, ), ;, if, (, complexity, <, minComplexity, ), {, simplest, =]
[., union, (, rangesInterIeExplicits, ), ;, int, complexity, =, DecomposedCharset, ., complexity, (, withoutGroup, ), ;, if, (, complexity, <]
[., difference, (, group, ), ., union, (, rangesInterIeExplicits, ), ;, int, complexity, =, DecomposedCharset, ., complexity, (, withoutGroup, )]
[), ., union, (, rangesInterIeExplicits, ), ;, int, complexity, =, DecomposedCharset, ., complexity, (, withoutGroup, ), ;, if, (, complexity]
[), ;, int, complexity, =, DecomposedCharset, ., complexity, (, withoutGroup, ), ;, if, (, complexity, <, minComplexity, ), {, simplest]
[;, if, (, complexity, <, minComplexity, ), {, simplest, =, withoutGroup, ;, groupName, =, namedGroup, ., getKey, (, ), .]
[., complexity, (, withoutGroup, ), ;, if, (, complexity, <, minComplexity, ), {, simplest, =, withoutGroup, ;, groupName, =, namedGroup]
[), ;, if, (, complexity, <, minComplexity, ), {, simplest, =, withoutGroup, ;, groupName, =, namedGroup, ., getKey, (, )]
[), {, simplest, =, withoutGroup, ;, groupName, =, namedGroup, ., getKey, (, ), ., charValue, (, ), ;, minComplexity, =]
[<, minComplexity, ), {, simplest, =, withoutGroup, ;, groupName, =, namedGroup, ., getKey, (, ), ., charValue, (, ), ;]
[), {, simplest, =, withoutGroup, ;, groupName, =, namedGroup, ., getKey, (, ), ., charValue, (, ), ;, minComplexity, =]
[=, withoutGroup, ;, groupName, =, namedGroup, ., getKey, (, ), ., charValue, (, ), ;, minComplexity, =, complexity, ;, }]
[;, groupName, =, namedGroup, ., getKey, (, ), ., charValue, (, ), ;, minComplexity, =, complexity, ;, }, }, }]
[=, namedGroup, ., getKey, (, ), ., charValue, (, ), ;, minComplexity, =, complexity, ;, }, }, }, if, (]
[;, minComplexity, =, complexity, ;, }, }, }, if, (, simplest, !=, null, ), {, namedGroups, ., append, (, '\\']
[., charValue, (, ), ;, minComplexity, =, complexity, ;, }, }, }, if, (, simplest, !=, null, ), {, namedGroups]
[., getKey, (, ), ., charValue, (, ), ;, minComplexity, =, complexity, ;, }, }, }, if, (, simplest, !=]
[=, complexity, ;, }, }, }, if, (, simplest, !=, null, ), {, namedGroups, ., append, (, '\\', ), .]
[;, }, }, }, if, (, simplest, !=, null, ), {, namedGroups, ., append, (, '\\', ), ., append, (]
[), {, namedGroups, ., append, (, '\\', ), ., append, (, groupName, ), ;, ranges, =, simplest, ;, }, else]
[!=, null, ), {, namedGroups, ., append, (, '\\', ), ., append, (, groupName, ), ;, ranges, =, simplest, ;]
[), {, namedGroups, ., append, (, '\\', ), ., append, (, groupName, ), ;, ranges, =, simplest, ;, }, else]
[;, ranges, =, simplest, ;, }, else, {, break, ;, }, }, return, new, DecomposedCharset, (, inverted, ,, ranges, ,]
[., append, (, groupName, ), ;, ranges, =, simplest, ;, }, else, {, break, ;, }, }, return, new, DecomposedCharset]
[., append, (, '\\', ), ., append, (, groupName, ), ;, ranges, =, simplest, ;, }, else, {, break, ;]
[), ., append, (, groupName, ), ;, ranges, =, simplest, ;, }, else, {, break, ;, }, }, return, new]
[), ;, ranges, =, simplest, ;, }, else, {, break, ;, }, }, return, new, DecomposedCharset, (, inverted, ,, ranges]
[=, simplest, ;, }, else, {, break, ;, }, }, return, new, DecomposedCharset, (, inverted, ,, ranges, ,, namedGroups, .]
[;, }, else, {, break, ;, }, }, return, new, DecomposedCharset, (, inverted, ,, ranges, ,, namedGroups, ., toString, (]
[;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, if, (, DOT_CHARSET, ., ranges, ., equals, (]
[,, ranges, ,, namedGroups, ., toString, (, ), ), ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, )]
[,, namedGroups, ., toString, (, ), ), ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, if]
[), ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, if, (, DOT_CHARSET, ., ranges, ., equals]
[., toString, (, ), ), ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, if, (, DOT_CHARSET]
[), {, sb, ., append, (, '.', ), ;, return, ;, }, decompose, (, ), ., appendSourceCode, (, sb, )]
[., equals, (, ranges, ), ), {, sb, ., append, (, '.', ), ;, return, ;, }, decompose, (, )]
[., ranges, ., equals, (, ranges, ), ), {, sb, ., append, (, '.', ), ;, return, ;, }, decompose]
[), ), {, sb, ., append, (, '.', ), ;, return, ;, }, decompose, (, ), ., appendSourceCode, (, sb]
[;, return, ;, }, decompose, (, ), ., appendSourceCode, (, sb, ), ;, }, DecomposedCharset, decompose, (, ), {, CharRanges]
[., append, (, '.', ), ;, return, ;, }, decompose, (, ), ., appendSourceCode, (, sb, ), ;, }, DecomposedCharset]
[), ;, return, ;, }, decompose, (, ), ., appendSourceCode, (, sb, ), ;, }, DecomposedCharset, decompose, (, ), {]
[;, }, DecomposedCharset, decompose, (, ), {, CharRanges, negRanges, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, ), ;, if]
[., appendSourceCode, (, sb, ), ;, }, DecomposedCharset, decompose, (, ), {, CharRanges, negRanges, =, CharRanges, ., ALL_CODE_UNITS, ., difference]
[), ;, }, DecomposedCharset, decompose, (, ), {, CharRanges, negRanges, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, ), ;]
[;, if, (, !, ieExplicits, ., isEmpty, (, ), ), {, if, (, negRanges, ., intersection, (, ieExplicits, ), .]
[., difference, (, ranges, ), ;, if, (, !, ieExplicits, ., isEmpty, (, ), ), {, if, (, negRanges, .]
[., ALL_CODE_UNITS, ., difference, (, ranges, ), ;, if, (, !, ieExplicits, ., isEmpty, (, ), ), {, if, (]
[), ;, if, (, !, ieExplicits, ., isEmpty, (, ), ), {, if, (, negRanges, ., intersection, (, ieExplicits, )]
[), {, if, (, negRanges, ., intersection, (, ieExplicits, ), ., isEmpty, (, ), ), {, return, decompose, (, ranges]
[), {, if, (, negRanges, ., intersection, (, ieExplicits, ), ., isEmpty, (, ), ), {, return, decompose, (, ranges]
[., isEmpty, (, ), ), {, if, (, negRanges, ., intersection, (, ieExplicits, ), ., isEmpty, (, ), ), {]
[), {, return, decompose, (, ranges, ,, false, ), ;, }, else, if, (, ranges, ., intersection, (, ieExplicits, )]
[., isEmpty, (, ), ), {, return, decompose, (, ranges, ,, false, ), ;, }, else, if, (, ranges, .]
[., intersection, (, ieExplicits, ), ., isEmpty, (, ), ), {, return, decompose, (, ranges, ,, false, ), ;, }]
[), ., isEmpty, (, ), ), {, return, decompose, (, ranges, ,, false, ), ;, }, else, if, (, ranges]
[;, }, else, if, (, ranges, ., intersection, (, ieExplicits, ), ., isEmpty, (, ), ), {, return, decompose, (]
[,, false, ), ;, }, else, if, (, ranges, ., intersection, (, ieExplicits, ), ., isEmpty, (, ), ), {]
[), ;, }, else, if, (, ranges, ., intersection, (, ieExplicits, ), ., isEmpty, (, ), ), {, return, decompose]
[), {, return, decompose, (, negRanges, ,, true, ), ;, }, }, DecomposedCharset, positive, =, decompose, (, ranges, ,, false]
[., isEmpty, (, ), ), {, return, decompose, (, negRanges, ,, true, ), ;, }, }, DecomposedCharset, positive, =, decompose]
[., intersection, (, ieExplicits, ), ., isEmpty, (, ), ), {, return, decompose, (, negRanges, ,, true, ), ;, }]
[), ., isEmpty, (, ), ), {, return, decompose, (, negRanges, ,, true, ), ;, }, }, DecomposedCharset, positive, =]
[;, }, }, DecomposedCharset, positive, =, decompose, (, ranges, ,, false, ), ;, DecomposedCharset, negative, =, decompose, (, negRanges, ,]
[,, true, ), ;, }, }, DecomposedCharset, positive, =, decompose, (, ranges, ,, false, ), ;, DecomposedCharset, negative, =, decompose]
[), ;, }, }, DecomposedCharset, positive, =, decompose, (, ranges, ,, false, ), ;, DecomposedCharset, negative, =, decompose, (, negRanges]
[;, DecomposedCharset, negative, =, decompose, (, negRanges, ,, true, ), ;, return, positive, ., complexity, (, ), <=, negative, .]
[,, false, ), ;, DecomposedCharset, negative, =, decompose, (, negRanges, ,, true, ), ;, return, positive, ., complexity, (, )]
[), ;, DecomposedCharset, negative, =, decompose, (, negRanges, ,, true, ), ;, return, positive, ., complexity, (, ), <=, negative]
[;, return, positive, ., complexity, (, ), <=, negative, ., complexity, (, ), ?, positive, :, negative, ;, }, @]
[,, true, ), ;, return, positive, ., complexity, (, ), <=, negative, ., complexity, (, ), ?, positive, :, negative]
[), ;, return, positive, ., complexity, (, ), <=, negative, ., complexity, (, ), ?, positive, :, negative, ;, }]
[;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (, ranges, ), ;, }]
[?, positive, :, negative, ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (]
[<=, negative, ., complexity, (, ), ?, positive, :, negative, ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb]
[., complexity, (, ), <=, negative, ., complexity, (, ), ?, positive, :, negative, ;, }, @, Override, protected, void]
[?, positive, :, negative, ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (]
[., complexity, (, ), ?, positive, :, negative, ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[:, negative, ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (, ranges, )]
[;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (, ranges, ), ;, }]
[;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Charset, &&, ranges, ., equals]
[., append, (, ranges, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof]
[), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Charset, &&, ranges, .]
[;, }, @, Override, public, int, hashCode, (, ), {, return, ranges, ., hashCode, (, ), ^, 0xdede2246, ;, }]
[&&, ranges, ., equals, (, (, (, Charset, ), o, ), ., ranges, ), ;, }, @, Override, public, int]
[instanceof, Charset, &&, ranges, ., equals, (, (, (, Charset, ), o, ), ., ranges, ), ;, }, @, Override]
[;, }, @, Override, public, int, hashCode, (, ), {, return, ranges, ., hashCode, (, ), ^, 0xdede2246, ;, }]
[., equals, (, (, (, Charset, ), o, ), ., ranges, ), ;, }, @, Override, public, int, hashCode, (]
[), ;, }, @, Override, public, int, hashCode, (, ), {, return, ranges, ., hashCode, (, ), ^, 0xdede2246, ;]
[., ranges, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, ranges, ., hashCode, (, ), ^]
[), ., ranges, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, ranges, ., hashCode, (, )]
[), ., ranges, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, ranges, ., hashCode, (, )]
[;, }, }, static, final, class, DecomposedCharset, {, boolean, inverted, ;, final, CharRanges, ranges, ;, final, String, namedGroups, ;, DecomposedCharset]
[^, 0xdede2246, ;, }, }, static, final, class, DecomposedCharset, {, boolean, inverted, ;, final, CharRanges, ranges, ;, final, String, namedGroups]
[., hashCode, (, ), ^, 0xdede2246, ;, }, }, static, final, class, DecomposedCharset, {, boolean, inverted, ;, final, CharRanges, ranges]
[;, }, }, static, final, class, DecomposedCharset, {, boolean, inverted, ;, final, CharRanges, ranges, ;, final, String, namedGroups, ;, DecomposedCharset]
[=, inverted, ;, this, ., ranges, =, ranges, ;, this, ., namedGroups, =, namedGroups, ;, }, int, complexity, (, )]
[., inverted, =, inverted, ;, this, ., ranges, =, ranges, ;, this, ., namedGroups, =, namedGroups, ;, }, int, complexity]
[;, this, ., ranges, =, ranges, ;, this, ., namedGroups, =, namedGroups, ;, }, int, complexity, (, ), {, return]
[=, ranges, ;, this, ., namedGroups, =, namedGroups, ;, }, int, complexity, (, ), {, return, (, inverted, ?, 1]
[., ranges, =, ranges, ;, this, ., namedGroups, =, namedGroups, ;, }, int, complexity, (, ), {, return, (, inverted]
[;, this, ., namedGroups, =, namedGroups, ;, }, int, complexity, (, ), {, return, (, inverted, ?, 1, :, 0]
[=, namedGroups, ;, }, int, complexity, (, ), {, return, (, inverted, ?, 1, :, 0, ), +, namedGroups, .]
[., namedGroups, =, namedGroups, ;, }, int, complexity, (, ), {, return, (, inverted, ?, 1, :, 0, ), +]
[;, }, int, complexity, (, ), {, return, (, inverted, ?, 1, :, 0, ), +, namedGroups, ., length, (]
[;, }, void, appendSourceCode, (, StringBuilder, sb, ), {, if, (, ranges, ., isEmpty, (, ), ), {, if, (]
[+, complexity, (, ranges, ), ;, }, void, appendSourceCode, (, StringBuilder, sb, ), {, if, (, ranges, ., isEmpty, (]
[+, namedGroups, ., length, (, ), +, complexity, (, ranges, ), ;, }, void, appendSourceCode, (, StringBuilder, sb, ), {]
[), +, namedGroups, ., length, (, ), +, complexity, (, ranges, ), ;, }, void, appendSourceCode, (, StringBuilder, sb, )]
[?, 1, :, 0, ), +, namedGroups, ., length, (, ), +, complexity, (, ranges, ), ;, }, void, appendSourceCode]
[:, 0, ), +, namedGroups, ., length, (, ), +, complexity, (, ranges, ), ;, }, void, appendSourceCode, (, StringBuilder]
[), +, namedGroups, ., length, (, ), +, complexity, (, ranges, ), ;, }, void, appendSourceCode, (, StringBuilder, sb, )]
[+, complexity, (, ranges, ), ;, }, void, appendSourceCode, (, StringBuilder, sb, ), {, if, (, ranges, ., isEmpty, (]
[., length, (, ), +, complexity, (, ranges, ), ;, }, void, appendSourceCode, (, StringBuilder, sb, ), {, if, (]
[;, }, void, appendSourceCode, (, StringBuilder, sb, ), {, if, (, ranges, ., isEmpty, (, ), ), {, if, (]
[), ;, }, void, appendSourceCode, (, StringBuilder, sb, ), {, if, (, ranges, ., isEmpty, (, ), ), {, if]
[), {, if, (, !, inverted, &&, namedGroups, ., length, (, ), ==, 2, ), {, sb, ., append, (]
[., isEmpty, (, ), ), {, if, (, !, inverted, &&, namedGroups, ., length, (, ), ==, 2, ), {]
[), {, sb, ., append, (, namedGroups, ), ;, return, ;, }, else, if, (, ranges, ., isEmpty, (, )]
[&&, namedGroups, ., length, (, ), ==, 2, ), {, sb, ., append, (, namedGroups, ), ;, return, ;, }]
[&&, namedGroups, ., length, (, ), ==, 2, ), {, sb, ., append, (, namedGroups, ), ;, return, ;, }]
[), {, sb, ., append, (, namedGroups, ), ;, return, ;, }, else, if, (, ranges, ., isEmpty, (, )]
[==, 2, ), {, sb, ., append, (, namedGroups, ), ;, return, ;, }, else, if, (, ranges, ., isEmpty]
[., length, (, ), ==, 2, ), {, sb, ., append, (, namedGroups, ), ;, return, ;, }, else, if]
[), {, sb, ., append, (, namedGroups, ), ;, return, ;, }, else, if, (, ranges, ., isEmpty, (, )]
[;, return, ;, }, else, if, (, ranges, ., isEmpty, (, ), &&, namedGroups, ., length, (, ), ==, 0]
[., append, (, namedGroups, ), ;, return, ;, }, else, if, (, ranges, ., isEmpty, (, ), &&, namedGroups, .]
[), ;, return, ;, }, else, if, (, ranges, ., isEmpty, (, ), &&, namedGroups, ., length, (, ), ==]
[), {, sb, ., append, (, inverted, ?, "[\\S\\s]", :, "(?!)", ), ;, return, ;, }, }, sb, ., append]
[&&, namedGroups, ., length, (, ), ==, 0, ), {, sb, ., append, (, inverted, ?, "[\\S\\s]", :, "(?!)", )]
[., isEmpty, (, ), &&, namedGroups, ., length, (, ), ==, 0, ), {, sb, ., append, (, inverted, ?]
[), {, sb, ., append, (, inverted, ?, "[\\S\\s]", :, "(?!)", ), ;, return, ;, }, }, sb, ., append]
[==, 0, ), {, sb, ., append, (, inverted, ?, "[\\S\\s]", :, "(?!)", ), ;, return, ;, }, }, sb]
[., length, (, ), ==, 0, ), {, sb, ., append, (, inverted, ?, "[\\S\\s]", :, "(?!)", ), ;, return]
[), {, sb, ., append, (, inverted, ?, "[\\S\\s]", :, "(?!)", ), ;, return, ;, }, }, sb, ., append]
[;, return, ;, }, }, sb, ., append, (, '[', ), ;, if, (, inverted, ), {, sb, ., append]
[., append, (, inverted, ?, "[\\S\\s]", :, "(?!)", ), ;, return, ;, }, }, sb, ., append, (, '[', )]
[), ;, return, ;, }, }, sb, ., append, (, '[', ), ;, if, (, inverted, ), {, sb, .]
[?, "[\\S\\s]", :, "(?!)", ), ;, return, ;, }, }, sb, ., append, (, '[', ), ;, if, (, inverted]
[:, "(?!)", ), ;, return, ;, }, }, sb, ., append, (, '[', ), ;, if, (, inverted, ), {]
[), ;, return, ;, }, }, sb, ., append, (, '[', ), ;, if, (, inverted, ), {, sb, .]
[;, if, (, inverted, ), {, sb, ., append, (, '^', ), ;, }, sb, ., append, (, namedGroups, )]
[., append, (, '[', ), ;, if, (, inverted, ), {, sb, ., append, (, '^', ), ;, }, sb]
[), ;, if, (, inverted, ), {, sb, ., append, (, '^', ), ;, }, sb, ., append, (, namedGroups]
[), {, sb, ., append, (, '^', ), ;, }, sb, ., append, (, namedGroups, ), ;, boolean, rangesStartCharset, =]
[;, }, sb, ., append, (, namedGroups, ), ;, boolean, rangesStartCharset, =, !, inverted, &&, namedGroups, ., length, (, )]
[., append, (, '^', ), ;, }, sb, ., append, (, namedGroups, ), ;, boolean, rangesStartCharset, =, !, inverted, &&]
[), ;, }, sb, ., append, (, namedGroups, ), ;, boolean, rangesStartCharset, =, !, inverted, &&, namedGroups, ., length, (]
[;, boolean, rangesStartCharset, =, !, inverted, &&, namedGroups, ., length, (, ), ==, 0, ;, boolean, emitDashAtEnd, =, false, ;]
[., append, (, namedGroups, ), ;, boolean, rangesStartCharset, =, !, inverted, &&, namedGroups, ., length, (, ), ==, 0, ;]
[), ;, boolean, rangesStartCharset, =, !, inverted, &&, namedGroups, ., length, (, ), ==, 0, ;, boolean, emitDashAtEnd, =, false]
[;, boolean, emitDashAtEnd, =, false, ;, for, (, int, i, =, 0, ,, n, =, ranges, ., getNumRanges, (, )]
[&&, namedGroups, ., length, (, ), ==, 0, ;, boolean, emitDashAtEnd, =, false, ;, for, (, int, i, =, 0]
[&&, namedGroups, ., length, (, ), ==, 0, ;, boolean, emitDashAtEnd, =, false, ;, for, (, int, i, =, 0]
[;, boolean, emitDashAtEnd, =, false, ;, for, (, int, i, =, 0, ,, n, =, ranges, ., getNumRanges, (, )]
[==, 0, ;, boolean, emitDashAtEnd, =, false, ;, for, (, int, i, =, 0, ,, n, =, ranges, ., getNumRanges]
[., length, (, ), ==, 0, ;, boolean, emitDashAtEnd, =, false, ;, for, (, int, i, =, 0, ,, n]
[;, boolean, emitDashAtEnd, =, false, ;, for, (, int, i, =, 0, ,, n, =, ranges, ., getNumRanges, (, )]
[;, for, (, int, i, =, 0, ,, n, =, ranges, ., getNumRanges, (, ), ;, i, <, n, ;]
[,, n, =, ranges, ., getNumRanges, (, ), ;, i, <, n, ;, ++, i, ), {, char, start, =]
[;, i, <, n, ;, ++, i, ), {, char, start, =, (, char, ), ranges, ., start, (, i]
[., getNumRanges, (, ), ;, i, <, n, ;, ++, i, ), {, char, start, =, (, char, ), ranges]
[;, ++, i, ), {, char, start, =, (, char, ), ranges, ., start, (, i, ), ;, char, end]
[<, n, ;, ++, i, ), {, char, start, =, (, char, ), ranges, ., start, (, i, ), ;]
[;, ++, i, ), {, char, start, =, (, char, ), ranges, ., start, (, i, ), ;, char, end]
[), {, char, start, =, (, char, ), ranges, ., start, (, i, ), ;, char, end, =, (, char]
[), {, char, start, =, (, char, ), ranges, ., start, (, i, ), ;, char, end, =, (, char]
[;, char, end, =, (, char, ), (, ranges, ., end, (, i, ), -, 1, ), ;, switch, (]
[;, char, end, =, (, char, ), (, ranges, ., end, (, i, ), -, 1, ), ;, switch, (]
[., start, (, i, ), ;, char, end, =, (, char, ), (, ranges, ., end, (, i, ), -]
[), ;, char, end, =, (, char, ), (, ranges, ., end, (, i, ), -, 1, ), ;, switch]
[;, switch, (, end, -, start, ), {, case, 0, :, if, (, start, ==, '-', ), {, emitDashAtEnd, =]
[;, switch, (, end, -, start, ), {, case, 0, :, if, (, start, ==, '-', ), {, emitDashAtEnd, =]
[), ;, switch, (, end, -, start, ), {, case, 0, :, if, (, start, ==, '-', ), {, emitDashAtEnd]
[-, 1, ), ;, switch, (, end, -, start, ), {, case, 0, :, if, (, start, ==, '-', )]
[., end, (, i, ), -, 1, ), ;, switch, (, end, -, start, ), {, case, 0, :, if]
[), -, 1, ), ;, switch, (, end, -, start, ), {, case, 0, :, if, (, start, ==, '-']
[), ;, switch, (, end, -, start, ), {, case, 0, :, if, (, start, ==, '-', ), {, emitDashAtEnd]
[), {, case, 0, :, if, (, start, ==, '-', ), {, emitDashAtEnd, =, true, ;, }, else, {, escapeRangeCharOnto]
[-, start, ), {, case, 0, :, if, (, start, ==, '-', ), {, emitDashAtEnd, =, true, ;, }, else]
[), {, case, 0, :, if, (, start, ==, '-', ), {, emitDashAtEnd, =, true, ;, }, else, {, escapeRangeCharOnto]
[:, if, (, start, ==, '-', ), {, emitDashAtEnd, =, true, ;, }, else, {, escapeRangeCharOnto, (, start, ,, rangesStartCharset]
[), {, emitDashAtEnd, =, true, ;, }, else, {, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, i]
[==, '-', ), {, emitDashAtEnd, =, true, ;, }, else, {, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0]
[), {, emitDashAtEnd, =, true, ;, }, else, {, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, i]
[=, true, ;, }, else, {, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, i, +, 1, ==]
[;, }, else, {, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, i, +, 1, ==, n, ,]
[;, }, break, ;, case, 1, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, false, ,, sb]
[,, rangesStartCharset, ,, i, ==, 0, ,, i, +, 1, ==, n, ,, sb, ), ;, }, break, ;, case]
[,, i, ==, 0, ,, i, +, 1, ==, n, ,, sb, ), ;, }, break, ;, case, 1, :]
[,, i, +, 1, ==, n, ,, sb, ), ;, }, break, ;, case, 1, :, escapeRangeCharOnto, (, start, ,]
[==, 0, ,, i, +, 1, ==, n, ,, sb, ), ;, }, break, ;, case, 1, :, escapeRangeCharOnto, (]
[,, i, +, 1, ==, n, ,, sb, ), ;, }, break, ;, case, 1, :, escapeRangeCharOnto, (, start, ,]
[,, sb, ), ;, }, break, ;, case, 1, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,]
[==, n, ,, sb, ), ;, }, break, ;, case, 1, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==]
[+, 1, ==, n, ,, sb, ), ;, }, break, ;, case, 1, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,]
[==, n, ,, sb, ), ;, }, break, ;, case, 1, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==]
[,, sb, ), ;, }, break, ;, case, 1, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,]
[), ;, }, break, ;, case, 1, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, false, ,]
[:, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, false, ,, sb, ), ;, escapeRangeCharOnto, (, end, ,]
[;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,, i, +, 1, ==, n, ,, sb, ), ;, break, ;]
[,, rangesStartCharset, ,, i, ==, 0, ,, false, ,, sb, ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,]
[,, i, ==, 0, ,, false, ,, sb, ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,, i, +]
[,, false, ,, sb, ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,, i, +, 1, ==, n, ,]
[==, 0, ,, false, ,, sb, ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,, i, +, 1, ==]
[,, false, ,, sb, ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,, i, +, 1, ==, n, ,]
[,, sb, ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,, i, +, 1, ==, n, ,, sb, )]
[), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,, i, +, 1, ==, n, ,, sb, ), ;, break]
[;, break, ;, default, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, false, ,, sb, ), ;]
[,, rangesStartCharset, ,, false, ,, i, +, 1, ==, n, ,, sb, ), ;, break, ;, default, :, escapeRangeCharOnto, (]
[,, false, ,, i, +, 1, ==, n, ,, sb, ), ;, break, ;, default, :, escapeRangeCharOnto, (, start, ,]
[,, i, +, 1, ==, n, ,, sb, ), ;, break, ;, default, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,]
[,, sb, ), ;, break, ;, default, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, false, ,]
[==, n, ,, sb, ), ;, break, ;, default, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,]
[+, 1, ==, n, ,, sb, ), ;, break, ;, default, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==]
[==, n, ,, sb, ), ;, break, ;, default, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,]
[,, sb, ), ;, break, ;, default, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, false, ,]
[), ;, break, ;, default, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, false, ,, sb, )]
[;, sb, ., append, (, '-', ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,, true, ,, sb, )]
[,, rangesStartCharset, ,, i, ==, 0, ,, false, ,, sb, ), ;, sb, ., append, (, '-', ), ;, escapeRangeCharOnto]
[,, i, ==, 0, ,, false, ,, sb, ), ;, sb, ., append, (, '-', ), ;, escapeRangeCharOnto, (, end]
[,, false, ,, sb, ), ;, sb, ., append, (, '-', ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false]
[==, 0, ,, false, ,, sb, ), ;, sb, ., append, (, '-', ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset]
[,, false, ,, sb, ), ;, sb, ., append, (, '-', ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false]
[,, sb, ), ;, sb, ., append, (, '-', ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,, true]
[), ;, sb, ., append, (, '-', ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,, true, ,, sb]
[;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,, true, ,, sb, ), ;, break, ;, }, }, if, (]
[., append, (, '-', ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,, true, ,, sb, ), ;, break]
[), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,, true, ,, sb, ), ;, break, ;, }, }, if]
[;, break, ;, }, }, if, (, emitDashAtEnd, ), {, sb, ., append, (, '-', ), ;, }, sb, .]
[,, rangesStartCharset, ,, false, ,, true, ,, sb, ), ;, break, ;, }, }, if, (, emitDashAtEnd, ), {, sb]
[,, false, ,, true, ,, sb, ), ;, break, ;, }, }, if, (, emitDashAtEnd, ), {, sb, ., append]
[,, true, ,, sb, ), ;, break, ;, }, }, if, (, emitDashAtEnd, ), {, sb, ., append, (, '-']
[,, sb, ), ;, break, ;, }, }, if, (, emitDashAtEnd, ), {, sb, ., append, (, '-', ), ;]
[), ;, break, ;, }, }, if, (, emitDashAtEnd, ), {, sb, ., append, (, '-', ), ;, }, sb]
[), {, sb, ., append, (, '-', ), ;, }, sb, ., append, (, ']', ), ;, }, static, void]
[;, }, sb, ., append, (, ']', ), ;, }, static, void, escapeRangeCharOnto, (, char, ch, ,, boolean, startIsFlush, ,]
[., append, (, '-', ), ;, }, sb, ., append, (, ']', ), ;, }, static, void, escapeRangeCharOnto, (, char]
[), ;, }, sb, ., append, (, ']', ), ;, }, static, void, escapeRangeCharOnto, (, char, ch, ,, boolean, startIsFlush]
[;, }, static, void, escapeRangeCharOnto, (, char, ch, ,, boolean, startIsFlush, ,, boolean, atStart, ,, boolean, atEnd, ,, StringBuilder, sb]
[., append, (, ']', ), ;, }, static, void, escapeRangeCharOnto, (, char, ch, ,, boolean, startIsFlush, ,, boolean, atStart, ,]
[), ;, }, static, void, escapeRangeCharOnto, (, char, ch, ,, boolean, startIsFlush, ,, boolean, atStart, ,, boolean, atEnd, ,, StringBuilder]
[), {, case, '\b', :, sb, ., append, (, "\\b", ), ;, break, ;, case, '^', :, sb, ., append]
[:, sb, ., append, (, "\\b", ), ;, break, ;, case, '^', :, sb, ., append, (, atStart, &&, startIsFlush]
[;, break, ;, case, '^', :, sb, ., append, (, atStart, &&, startIsFlush, ?, "\\^", :, "^", ), ;, break]
[., append, (, "\\b", ), ;, break, ;, case, '^', :, sb, ., append, (, atStart, &&, startIsFlush, ?, "\\^"]
[), ;, break, ;, case, '^', :, sb, ., append, (, atStart, &&, startIsFlush, ?, "\\^", :, "^", ), ;]
[:, sb, ., append, (, atStart, &&, startIsFlush, ?, "\\^", :, "^", ), ;, break, ;, case, '-', :, sb]
[;, break, ;, case, '-', :, sb, ., append, (, atStart, ||, atEnd, ?, "-", :, "\\-", ), ;, break]
[., append, (, atStart, &&, startIsFlush, ?, "\\^", :, "^", ), ;, break, ;, case, '-', :, sb, ., append]
[), ;, break, ;, case, '-', :, sb, ., append, (, atStart, ||, atEnd, ?, "-", :, "\\-", ), ;]
[?, "\\^", :, "^", ), ;, break, ;, case, '-', :, sb, ., append, (, atStart, ||, atEnd, ?, "-"]
[&&, startIsFlush, ?, "\\^", :, "^", ), ;, break, ;, case, '-', :, sb, ., append, (, atStart, ||, atEnd]
[?, "\\^", :, "^", ), ;, break, ;, case, '-', :, sb, ., append, (, atStart, ||, atEnd, ?, "-"]
[:, "^", ), ;, break, ;, case, '-', :, sb, ., append, (, atStart, ||, atEnd, ?, "-", :, "\\-"]
[), ;, break, ;, case, '-', :, sb, ., append, (, atStart, ||, atEnd, ?, "-", :, "\\-", ), ;]
[:, sb, ., append, (, atStart, ||, atEnd, ?, "-", :, "\\-", ), ;, break, ;, case, '\\', :, case]
[;, break, ;, case, '\\', :, case, ']', :, sb, ., append, (, '\\', ), ., append, (, ch, )]
[., append, (, atStart, ||, atEnd, ?, "-", :, "\\-", ), ;, break, ;, case, '\\', :, case, ']', :]
[), ;, break, ;, case, '\\', :, case, ']', :, sb, ., append, (, '\\', ), ., append, (, ch]
[?, "-", :, "\\-", ), ;, break, ;, case, '\\', :, case, ']', :, sb, ., append, (, '\\', )]
[||, atEnd, ?, "-", :, "\\-", ), ;, break, ;, case, '\\', :, case, ']', :, sb, ., append, (]
[?, "-", :, "\\-", ), ;, break, ;, case, '\\', :, case, ']', :, sb, ., append, (, '\\', )]
[:, "\\-", ), ;, break, ;, case, '\\', :, case, ']', :, sb, ., append, (, '\\', ), ., append]
[), ;, break, ;, case, '\\', :, case, ']', :, sb, ., append, (, '\\', ), ., append, (, ch]
[:, case, ']', :, sb, ., append, (, '\\', ), ., append, (, ch, ), ;, break, ;, default, :]
[:, sb, ., append, (, '\\', ), ., append, (, ch, ), ;, break, ;, default, :, escapeCharOnto, (, ch]
[;, break, ;, default, :, escapeCharOnto, (, ch, ,, sb, ), ;, }, }, static, int, complexity, (, CharRanges, ranges]
[., append, (, ch, ), ;, break, ;, default, :, escapeCharOnto, (, ch, ,, sb, ), ;, }, }, static]
[., append, (, '\\', ), ., append, (, ch, ), ;, break, ;, default, :, escapeCharOnto, (, ch, ,, sb]
[), ., append, (, ch, ), ;, break, ;, default, :, escapeCharOnto, (, ch, ,, sb, ), ;, }, }]
[), ;, break, ;, default, :, escapeCharOnto, (, ch, ,, sb, ), ;, }, }, static, int, complexity, (, CharRanges]
[;, }, }, static, int, complexity, (, CharRanges, ranges, ), {, int, complexity, =, 0, ;, for, (, int, i]
[,, sb, ), ;, }, }, static, int, complexity, (, CharRanges, ranges, ), {, int, complexity, =, 0, ;, for]
[), ;, }, }, static, int, complexity, (, CharRanges, ranges, ), {, int, complexity, =, 0, ;, for, (, int]
[;, for, (, int, i, =, 0, ,, n, =, ranges, ., getNumRanges, (, ), ;, i, <, n, ;]
[,, n, =, ranges, ., getNumRanges, (, ), ;, i, <, n, ;, ++, i, ), {, int, start, =]
[;, i, <, n, ;, ++, i, ), {, int, start, =, ranges, ., start, (, i, ), ;, int]
[., getNumRanges, (, ), ;, i, <, n, ;, ++, i, ), {, int, start, =, ranges, ., start, (]
[;, ++, i, ), {, int, start, =, ranges, ., start, (, i, ), ;, int, end, =, ranges, .]
[<, n, ;, ++, i, ), {, int, start, =, ranges, ., start, (, i, ), ;, int, end, =]
[;, ++, i, ), {, int, start, =, ranges, ., start, (, i, ), ;, int, end, =, ranges, .]
[), {, int, start, =, ranges, ., start, (, i, ), ;, int, end, =, ranges, ., end, (, i]
[), {, int, start, =, ranges, ., start, (, i, ), ;, int, end, =, ranges, ., end, (, i]
[;, int, end, =, ranges, ., end, (, i, ), -, 1, ;, if, (, start, <, 0x20, ||, start]
[., start, (, i, ), ;, int, end, =, ranges, ., end, (, i, ), -, 1, ;, if, (]
[), ;, int, end, =, ranges, ., end, (, i, ), -, 1, ;, if, (, start, <, 0x20, ||]
[;, if, (, start, <, 0x20, ||, start, >=, 0x7f, ), {, complexity, +=, start, >=, 0x100, ?, 6, :]
[-, 1, ;, if, (, start, <, 0x20, ||, start, >=, 0x7f, ), {, complexity, +=, start, >=, 0x100, ?]
[., end, (, i, ), -, 1, ;, if, (, start, <, 0x20, ||, start, >=, 0x7f, ), {, complexity]
[), -, 1, ;, if, (, start, <, 0x20, ||, start, >=, 0x7f, ), {, complexity, +=, start, >=, 0x100]
[;, if, (, start, <, 0x20, ||, start, >=, 0x7f, ), {, complexity, +=, start, >=, 0x100, ?, 6, :]
[), {, complexity, +=, start, >=, 0x100, ?, 6, :, 4, ;, }, else, {, ++, complexity, ;, }, switch]
[||, start, >=, 0x7f, ), {, complexity, +=, start, >=, 0x100, ?, 6, :, 4, ;, }, else, {, ++]
[<, 0x20, ||, start, >=, 0x7f, ), {, complexity, +=, start, >=, 0x100, ?, 6, :, 4, ;, }, else]
[||, start, >=, 0x7f, ), {, complexity, +=, start, >=, 0x100, ?, 6, :, 4, ;, }, else, {, ++]
[), {, complexity, +=, start, >=, 0x100, ?, 6, :, 4, ;, }, else, {, ++, complexity, ;, }, switch]
[>=, 0x7f, ), {, complexity, +=, start, >=, 0x100, ?, 6, :, 4, ;, }, else, {, ++, complexity, ;]
[), {, complexity, +=, start, >=, 0x100, ?, 6, :, 4, ;, }, else, {, ++, complexity, ;, }, switch]
[+=, start, >=, 0x100, ?, 6, :, 4, ;, }, else, {, ++, complexity, ;, }, switch, (, end, -]
[;, }, else, {, ++, complexity, ;, }, switch, (, end, -, start, ), {, case, 0, :, continue, ;]
[?, 6, :, 4, ;, }, else, {, ++, complexity, ;, }, switch, (, end, -, start, ), {, case]
[>=, 0x100, ?, 6, :, 4, ;, }, else, {, ++, complexity, ;, }, switch, (, end, -, start, )]
[?, 6, :, 4, ;, }, else, {, ++, complexity, ;, }, switch, (, end, -, start, ), {, case]
[:, 4, ;, }, else, {, ++, complexity, ;, }, switch, (, end, -, start, ), {, case, 0, :]
[;, }, else, {, ++, complexity, ;, }, switch, (, end, -, start, ), {, case, 0, :, continue, ;]
[;, }, switch, (, end, -, start, ), {, case, 0, :, continue, ;, case, 1, :, break, ;, default]
[;, }, switch, (, end, -, start, ), {, case, 0, :, continue, ;, case, 1, :, break, ;, default]
[), {, case, 0, :, continue, ;, case, 1, :, break, ;, default, :, complexity, +=, 1, ;, }, if]
[-, start, ), {, case, 0, :, continue, ;, case, 1, :, break, ;, default, :, complexity, +=, 1, ;]
[), {, case, 0, :, continue, ;, case, 1, :, break, ;, default, :, complexity, +=, 1, ;, }, if]
[:, continue, ;, case, 1, :, break, ;, default, :, complexity, +=, 1, ;, }, if, (, end, <, 0x20]
[:, break, ;, default, :, complexity, +=, 1, ;, }, if, (, end, <, 0x20, ||, end, >=, 0x7f, )]
[+=, 1, ;, }, if, (, end, <, 0x20, ||, end, >=, 0x7f, ), {, complexity, +=, end, >=, 0x100]
[;, }, if, (, end, <, 0x20, ||, end, >=, 0x7f, ), {, complexity, +=, end, >=, 0x100, ?, 6]
[), {, complexity, +=, end, >=, 0x100, ?, 6, :, 4, ;, }, else, {, ++, complexity, ;, }, }]
[||, end, >=, 0x7f, ), {, complexity, +=, end, >=, 0x100, ?, 6, :, 4, ;, }, else, {, ++]
[<, 0x20, ||, end, >=, 0x7f, ), {, complexity, +=, end, >=, 0x100, ?, 6, :, 4, ;, }, else]
[||, end, >=, 0x7f, ), {, complexity, +=, end, >=, 0x100, ?, 6, :, 4, ;, }, else, {, ++]
[), {, complexity, +=, end, >=, 0x100, ?, 6, :, 4, ;, }, else, {, ++, complexity, ;, }, }]
[>=, 0x7f, ), {, complexity, +=, end, >=, 0x100, ?, 6, :, 4, ;, }, else, {, ++, complexity, ;]
[), {, complexity, +=, end, >=, 0x100, ?, 6, :, 4, ;, }, else, {, ++, complexity, ;, }, }]
[+=, end, >=, 0x100, ?, 6, :, 4, ;, }, else, {, ++, complexity, ;, }, }, return, complexity, ;]
[;, }, else, {, ++, complexity, ;, }, }, return, complexity, ;, }, @, Override, public, boolean, equals, (, Object]
[?, 6, :, 4, ;, }, else, {, ++, complexity, ;, }, }, return, complexity, ;, }, @, Override, public]
[>=, 0x100, ?, 6, :, 4, ;, }, else, {, ++, complexity, ;, }, }, return, complexity, ;, }, @]
[?, 6, :, 4, ;, }, else, {, ++, complexity, ;, }, }, return, complexity, ;, }, @, Override, public]
[:, 4, ;, }, else, {, ++, complexity, ;, }, }, return, complexity, ;, }, @, Override, public, boolean, equals]
[;, }, else, {, ++, complexity, ;, }, }, return, complexity, ;, }, @, Override, public, boolean, equals, (, Object]
[;, }, }, return, complexity, ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !]
[;, }, }, return, complexity, ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !]
[;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (, o, instanceof, DecomposedCharset, )]
[), {, return, false, ;, }, DecomposedCharset, that, =, (, DecomposedCharset, ), o, ;, return, this, ., inverted, =, that]
[), {, return, false, ;, }, DecomposedCharset, that, =, (, DecomposedCharset, ), o, ;, return, this, ., inverted, =, that]
[), ), {, return, false, ;, }, DecomposedCharset, that, =, (, DecomposedCharset, ), o, ;, return, this, ., inverted, =]
[instanceof, DecomposedCharset, ), ), {, return, false, ;, }, DecomposedCharset, that, =, (, DecomposedCharset, ), o, ;, return, this, .]
[;, }, DecomposedCharset, that, =, (, DecomposedCharset, ), o, ;, return, this, ., inverted, =, that, ., inverted, &&, this]
[;, return, this, ., inverted, =, that, ., inverted, &&, this, ., ranges, ., equals, (, that, ., ranges, )]
[;, return, this, ., inverted, =, that, ., inverted, &&, this, ., ranges, ., equals, (, that, ., ranges, )]
[=, that, ., inverted, &&, this, ., ranges, ., equals, (, that, ., ranges, ), &&, this, ., namedGroups, .]
[., inverted, =, that, ., inverted, &&, this, ., ranges, ., equals, (, that, ., ranges, ), &&, this, .]
[;, }, @, Override, public, int, hashCode, (, ), {, return, ranges, ., hashCode, (, ), +, 31, *, (]
[&&, this, ., namedGroups, ., equals, (, that, ., namedGroups, ), ;, }, @, Override, public, int, hashCode, (, )]
[&&, this, ., ranges, ., equals, (, that, ., ranges, ), &&, this, ., namedGroups, ., equals, (, that, .]
[., inverted, &&, this, ., ranges, ., equals, (, that, ., ranges, ), &&, this, ., namedGroups, ., equals, (]
[&&, this, ., namedGroups, ., equals, (, that, ., namedGroups, ), ;, }, @, Override, public, int, hashCode, (, )]
[., equals, (, that, ., ranges, ), &&, this, ., namedGroups, ., equals, (, that, ., namedGroups, ), ;, }]
[., ranges, ., equals, (, that, ., ranges, ), &&, this, ., namedGroups, ., equals, (, that, ., namedGroups, )]
[), &&, this, ., namedGroups, ., equals, (, that, ., namedGroups, ), ;, }, @, Override, public, int, hashCode, (]
[., ranges, ), &&, this, ., namedGroups, ., equals, (, that, ., namedGroups, ), ;, }, @, Override, public, int]
[;, }, @, Override, public, int, hashCode, (, ), {, return, ranges, ., hashCode, (, ), +, 31, *, (]
[., equals, (, that, ., namedGroups, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, ranges, .]
[., namedGroups, ., equals, (, that, ., namedGroups, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[), ;, }, @, Override, public, int, hashCode, (, ), {, return, ranges, ., hashCode, (, ), +, 31, *]
[., namedGroups, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, ranges, ., hashCode, (, ), +]
[;, }, }, static, final, class, Concatenation, extends, RegExpTree, {, final, ImmutableList, <, RegExpTree, >, elements, ;, Concatenation, (, RegExpTree]
[+, 31, *, (, namedGroups, ., hashCode, (, ), +, (, inverted, ?, 1, :, 0, ), ), ;, }]
[., hashCode, (, ), +, 31, *, (, namedGroups, ., hashCode, (, ), +, (, inverted, ?, 1, :, 0]
[;, }, }, static, final, class, Concatenation, extends, RegExpTree, {, final, ImmutableList, <, RegExpTree, >, elements, ;, Concatenation, (, RegExpTree]
[*, (, namedGroups, ., hashCode, (, ), +, (, inverted, ?, 1, :, 0, ), ), ;, }, }, static]
[;, }, }, static, final, class, Concatenation, extends, RegExpTree, {, final, ImmutableList, <, RegExpTree, >, elements, ;, Concatenation, (, RegExpTree]
[), ;, }, }, static, final, class, Concatenation, extends, RegExpTree, {, final, ImmutableList, <, RegExpTree, >, elements, ;, Concatenation, (]
[+, (, inverted, ?, 1, :, 0, ), ), ;, }, }, static, final, class, Concatenation, extends, RegExpTree, {, final]
[., hashCode, (, ), +, (, inverted, ?, 1, :, 0, ), ), ;, }, }, static, final, class, Concatenation]
[), ;, }, }, static, final, class, Concatenation, extends, RegExpTree, {, final, ImmutableList, <, RegExpTree, >, elements, ;, Concatenation, (]
[), ), ;, }, }, static, final, class, Concatenation, extends, RegExpTree, {, final, ImmutableList, <, RegExpTree, >, elements, ;, Concatenation]
[?, 1, :, 0, ), ), ;, }, }, static, final, class, Concatenation, extends, RegExpTree, {, final, ImmutableList, <, RegExpTree]
[:, 0, ), ), ;, }, }, static, final, class, Concatenation, extends, RegExpTree, {, final, ImmutableList, <, RegExpTree, >, elements]
[), ), ;, }, }, static, final, class, Concatenation, extends, RegExpTree, {, final, ImmutableList, <, RegExpTree, >, elements, ;, Concatenation]
[=, ImmutableList, ., of, (, a, ,, b, ), ;, }, Concatenation, (, List, <, ?, extends, RegExpTree, >, elements]
[;, }, Concatenation, (, List, <, ?, extends, RegExpTree, >, elements, ), {, this, ., elements, =, ImmutableList, ., copyOf]
[., of, (, a, ,, b, ), ;, }, Concatenation, (, List, <, ?, extends, RegExpTree, >, elements, ), {]
[,, b, ), ;, }, Concatenation, (, List, <, ?, extends, RegExpTree, >, elements, ), {, this, ., elements, =]
[), ;, }, Concatenation, (, List, <, ?, extends, RegExpTree, >, elements, ), {, this, ., elements, =, ImmutableList, .]
[=, ImmutableList, ., copyOf, (, elements, ), ;, }, @, Override, public, RegExpTree, simplify, (, final, String, flags, ), {]
[., elements, =, ImmutableList, ., copyOf, (, elements, ), ;, }, @, Override, public, RegExpTree, simplify, (, final, String, flags]
[;, }, @, Override, public, RegExpTree, simplify, (, final, String, flags, ), {, class, Simplifier, {, final, List, <, RegExpTree]
[., copyOf, (, elements, ), ;, }, @, Override, public, RegExpTree, simplify, (, final, String, flags, ), {, class, Simplifier]
[), ;, }, @, Override, public, RegExpTree, simplify, (, final, String, flags, ), {, class, Simplifier, {, final, List, <]
[;, void, simplify, (, RegExpTree, t, ), {, if, (, t, instanceof, Concatenation, ), {, for, (, RegExpTree, child, :]
[., newArrayList, (, ), ;, void, simplify, (, RegExpTree, t, ), {, if, (, t, instanceof, Concatenation, ), {, for]
[), {, for, (, RegExpTree, child, :, (, (, Concatenation, ), t, ), ., elements, ), {, simplify, (, child]
[instanceof, Concatenation, ), {, for, (, RegExpTree, child, :, (, (, Concatenation, ), t, ), ., elements, ), {, simplify]
[), {, simplify, (, child, ), ;, }, }, else, if, (, t, instanceof, Empty, ), {, }, else, {]
[., elements, ), {, simplify, (, child, ), ;, }, }, else, if, (, t, instanceof, Empty, ), {, }]
[), ., elements, ), {, simplify, (, child, ), ;, }, }, else, if, (, t, instanceof, Empty, ), {]
[), ., elements, ), {, simplify, (, child, ), ;, }, }, else, if, (, t, instanceof, Empty, ), {]
[;, }, }, else, if, (, t, instanceof, Empty, ), {, }, else, {, int, lastIndex, =, simplified, ., size]
[), ;, }, }, else, if, (, t, instanceof, Empty, ), {, }, else, {, int, lastIndex, =, simplified, .]
[), {, }, else, {, int, lastIndex, =, simplified, ., size, (, ), -, 1, ;, if, (, lastIndex, >=]
[instanceof, Empty, ), {, }, else, {, int, lastIndex, =, simplified, ., size, (, ), -, 1, ;, if, (]
[;, if, (, lastIndex, >=, 0, ), {, RegExpTree, pairwise, =, simplifyPairwise, (, simplified, ., get, (, lastIndex, ), ,]
[-, 1, ;, if, (, lastIndex, >=, 0, ), {, RegExpTree, pairwise, =, simplifyPairwise, (, simplified, ., get, (, lastIndex]
[., size, (, ), -, 1, ;, if, (, lastIndex, >=, 0, ), {, RegExpTree, pairwise, =, simplifyPairwise, (, simplified]
[;, if, (, lastIndex, >=, 0, ), {, RegExpTree, pairwise, =, simplifyPairwise, (, simplified, ., get, (, lastIndex, ), ,]
[), {, RegExpTree, pairwise, =, simplifyPairwise, (, simplified, ., get, (, lastIndex, ), ,, t, ), ;, if, (, pairwise]
[>=, 0, ), {, RegExpTree, pairwise, =, simplifyPairwise, (, simplified, ., get, (, lastIndex, ), ,, t, ), ;, if]
[), {, RegExpTree, pairwise, =, simplifyPairwise, (, simplified, ., get, (, lastIndex, ), ,, t, ), ;, if, (, pairwise]
[;, if, (, pairwise, !=, null, ), {, simplified, ., set, (, lastIndex, ,, pairwise, ), ;, return, ;, }]
[,, t, ), ;, if, (, pairwise, !=, null, ), {, simplified, ., set, (, lastIndex, ,, pairwise, ), ;]
[., get, (, lastIndex, ), ,, t, ), ;, if, (, pairwise, !=, null, ), {, simplified, ., set, (]
[), ,, t, ), ;, if, (, pairwise, !=, null, ), {, simplified, ., set, (, lastIndex, ,, pairwise, )]
[), ;, if, (, pairwise, !=, null, ), {, simplified, ., set, (, lastIndex, ,, pairwise, ), ;, return, ;]
[), {, simplified, ., set, (, lastIndex, ,, pairwise, ), ;, return, ;, }, }, simplified, ., add, (, t]
[!=, null, ), {, simplified, ., set, (, lastIndex, ,, pairwise, ), ;, return, ;, }, }, simplified, ., add]
[), {, simplified, ., set, (, lastIndex, ,, pairwise, ), ;, return, ;, }, }, simplified, ., add, (, t]
[;, return, ;, }, }, simplified, ., add, (, t, ), ;, }, }, RegExpTree, simplifyPairwise, (, RegExpTree, before, ,]
[., set, (, lastIndex, ,, pairwise, ), ;, return, ;, }, }, simplified, ., add, (, t, ), ;, }]
[,, pairwise, ), ;, return, ;, }, }, simplified, ., add, (, t, ), ;, }, }, RegExpTree, simplifyPairwise, (]
[), ;, return, ;, }, }, simplified, ., add, (, t, ), ;, }, }, RegExpTree, simplifyPairwise, (, RegExpTree, before]
[;, }, }, RegExpTree, simplifyPairwise, (, RegExpTree, before, ,, RegExpTree, after, ), {, if, (, before, instanceof, Text, &&, after]
[., add, (, t, ), ;, }, }, RegExpTree, simplifyPairwise, (, RegExpTree, before, ,, RegExpTree, after, ), {, if, (]
[), ;, }, }, RegExpTree, simplifyPairwise, (, RegExpTree, before, ,, RegExpTree, after, ), {, if, (, before, instanceof, Text, &&]
[), {, return, new, Text, (, (, (, Text, ), before, ), ., text, +, (, (, Text, ), after]
[&&, after, instanceof, Text, ), {, return, new, Text, (, (, (, Text, ), before, ), ., text, +, (]
[instanceof, Text, &&, after, instanceof, Text, ), {, return, new, Text, (, (, (, Text, ), before, ), ., text]
[), {, return, new, Text, (, (, (, Text, ), before, ), ., text, +, (, (, Text, ), after]
[instanceof, Text, ), {, return, new, Text, (, (, (, Text, ), before, ), ., text, +, (, (, Text]
[;, }, int, beforeMin, =, 1, ,, beforeMax, =, 1, ;, RegExpTree, beforeBody, =, before, ;, boolean, beforeGreedy, =, false]
[., simplify, (, flags, ), ;, }, int, beforeMin, =, 1, ,, beforeMax, =, 1, ;, RegExpTree, beforeBody, =, before]
[), ., simplify, (, flags, ), ;, }, int, beforeMin, =, 1, ,, beforeMax, =, 1, ;, RegExpTree, beforeBody, =]
[+, (, (, Text, ), after, ), ., text, ), ., simplify, (, flags, ), ;, }, int, beforeMin, =]
[., text, +, (, (, Text, ), after, ), ., text, ), ., simplify, (, flags, ), ;, }, int]
[), ., text, +, (, (, Text, ), after, ), ., text, ), ., simplify, (, flags, ), ;, }]
[), ., text, +, (, (, Text, ), after, ), ., text, ), ., simplify, (, flags, ), ;, }]
[), ., simplify, (, flags, ), ;, }, int, beforeMin, =, 1, ,, beforeMax, =, 1, ;, RegExpTree, beforeBody, =]
[., text, ), ., simplify, (, flags, ), ;, }, int, beforeMin, =, 1, ,, beforeMax, =, 1, ;, RegExpTree]
[), ., text, ), ., simplify, (, flags, ), ;, }, int, beforeMin, =, 1, ,, beforeMax, =, 1, ;]
[), ., text, ), ., simplify, (, flags, ), ;, }, int, beforeMin, =, 1, ,, beforeMax, =, 1, ;]
[), ;, }, int, beforeMin, =, 1, ,, beforeMax, =, 1, ;, RegExpTree, beforeBody, =, before, ;, boolean, beforeGreedy, =]
[,, beforeMax, =, 1, ;, RegExpTree, beforeBody, =, before, ;, boolean, beforeGreedy, =, false, ;, if, (, before, instanceof, Repetition]
[;, RegExpTree, beforeBody, =, before, ;, boolean, beforeGreedy, =, false, ;, if, (, before, instanceof, Repetition, ), {, Repetition, r]
[;, boolean, beforeGreedy, =, false, ;, if, (, before, instanceof, Repetition, ), {, Repetition, r, =, (, Repetition, ), before]
[;, if, (, before, instanceof, Repetition, ), {, Repetition, r, =, (, Repetition, ), before, ;, beforeMin, =, r, .]
[), {, Repetition, r, =, (, Repetition, ), before, ;, beforeMin, =, r, ., min, ;, beforeMax, =, r, .]
[instanceof, Repetition, ), {, Repetition, r, =, (, Repetition, ), before, ;, beforeMin, =, r, ., min, ;, beforeMax, =]
[;, beforeMin, =, r, ., min, ;, beforeMax, =, r, ., max, ;, beforeBody, =, r, ., body, ;, beforeGreedy]
[;, beforeMin, =, r, ., min, ;, beforeMax, =, r, ., max, ;, beforeBody, =, r, ., body, ;, beforeGreedy]
[=, r, ., min, ;, beforeMax, =, r, ., max, ;, beforeBody, =, r, ., body, ;, beforeGreedy, =, r]
[;, beforeMax, =, r, ., max, ;, beforeBody, =, r, ., body, ;, beforeGreedy, =, r, ., greedy, ;, }]
[., min, ;, beforeMax, =, r, ., max, ;, beforeBody, =, r, ., body, ;, beforeGreedy, =, r, ., greedy]
[=, r, ., max, ;, beforeBody, =, r, ., body, ;, beforeGreedy, =, r, ., greedy, ;, }, int, afterMin]
[;, beforeBody, =, r, ., body, ;, beforeGreedy, =, r, ., greedy, ;, }, int, afterMin, =, 1, ,, afterMax]
[., max, ;, beforeBody, =, r, ., body, ;, beforeGreedy, =, r, ., greedy, ;, }, int, afterMin, =, 1]
[=, r, ., body, ;, beforeGreedy, =, r, ., greedy, ;, }, int, afterMin, =, 1, ,, afterMax, =, 1]
[;, beforeGreedy, =, r, ., greedy, ;, }, int, afterMin, =, 1, ,, afterMax, =, 1, ;, RegExpTree, afterBody, =]
[., body, ;, beforeGreedy, =, r, ., greedy, ;, }, int, afterMin, =, 1, ,, afterMax, =, 1, ;, RegExpTree]
[=, r, ., greedy, ;, }, int, afterMin, =, 1, ,, afterMax, =, 1, ;, RegExpTree, afterBody, =, after, ;]
[;, }, int, afterMin, =, 1, ,, afterMax, =, 1, ;, RegExpTree, afterBody, =, after, ;, boolean, afterGreedy, =, false]
[., greedy, ;, }, int, afterMin, =, 1, ,, afterMax, =, 1, ;, RegExpTree, afterBody, =, after, ;, boolean, afterGreedy]
[,, afterMax, =, 1, ;, RegExpTree, afterBody, =, after, ;, boolean, afterGreedy, =, false, ;, if, (, after, instanceof, Repetition]
[;, RegExpTree, afterBody, =, after, ;, boolean, afterGreedy, =, false, ;, if, (, after, instanceof, Repetition, ), {, Repetition, r]
[;, boolean, afterGreedy, =, false, ;, if, (, after, instanceof, Repetition, ), {, Repetition, r, =, (, Repetition, ), after]
[;, if, (, after, instanceof, Repetition, ), {, Repetition, r, =, (, Repetition, ), after, ;, afterMin, =, r, .]
[), {, Repetition, r, =, (, Repetition, ), after, ;, afterMin, =, r, ., min, ;, afterMax, =, r, .]
[instanceof, Repetition, ), {, Repetition, r, =, (, Repetition, ), after, ;, afterMin, =, r, ., min, ;, afterMax, =]
[;, afterMin, =, r, ., min, ;, afterMax, =, r, ., max, ;, afterBody, =, r, ., body, ;, afterGreedy]
[;, afterMin, =, r, ., min, ;, afterMax, =, r, ., max, ;, afterBody, =, r, ., body, ;, afterGreedy]
[=, r, ., min, ;, afterMax, =, r, ., max, ;, afterBody, =, r, ., body, ;, afterGreedy, =, r]
[;, afterMax, =, r, ., max, ;, afterBody, =, r, ., body, ;, afterGreedy, =, r, ., greedy, ;, }]
[., min, ;, afterMax, =, r, ., max, ;, afterBody, =, r, ., body, ;, afterGreedy, =, r, ., greedy]
[=, r, ., max, ;, afterBody, =, r, ., body, ;, afterGreedy, =, r, ., greedy, ;, }, if, (]
[;, afterBody, =, r, ., body, ;, afterGreedy, =, r, ., greedy, ;, }, if, (, beforeBody, ., equals, (]
[., max, ;, afterBody, =, r, ., body, ;, afterGreedy, =, r, ., greedy, ;, }, if, (, beforeBody, .]
[=, r, ., body, ;, afterGreedy, =, r, ., greedy, ;, }, if, (, beforeBody, ., equals, (, afterBody, )]
[;, afterGreedy, =, r, ., greedy, ;, }, if, (, beforeBody, ., equals, (, afterBody, ), &&, !, beforeBody, .]
[., body, ;, afterGreedy, =, r, ., greedy, ;, }, if, (, beforeBody, ., equals, (, afterBody, ), &&, !]
[=, r, ., greedy, ;, }, if, (, beforeBody, ., equals, (, afterBody, ), &&, !, beforeBody, ., hasCapturingGroup, (]
[;, }, if, (, beforeBody, ., equals, (, afterBody, ), &&, !, beforeBody, ., hasCapturingGroup, (, ), ), {, long]
[., greedy, ;, }, if, (, beforeBody, ., equals, (, afterBody, ), &&, !, beforeBody, ., hasCapturingGroup, (, ), )]
[), {, long, lmin, =, (, (, long, ), beforeMin, ), +, afterMin, ;, long, lmax, =, (, (, long]
[&&, !, beforeBody, ., hasCapturingGroup, (, ), ), {, long, lmin, =, (, (, long, ), beforeMin, ), +, afterMin]
[., equals, (, afterBody, ), &&, !, beforeBody, ., hasCapturingGroup, (, ), ), {, long, lmin, =, (, (, long]
[), &&, !, beforeBody, ., hasCapturingGroup, (, ), ), {, long, lmin, =, (, (, long, ), beforeMin, ), +]
[), {, long, lmin, =, (, (, long, ), beforeMin, ), +, afterMin, ;, long, lmax, =, (, (, long]
[), {, long, lmin, =, (, (, long, ), beforeMin, ), +, afterMin, ;, long, lmax, =, (, (, long]
[., hasCapturingGroup, (, ), ), {, long, lmin, =, (, (, long, ), beforeMin, ), +, afterMin, ;, long, lmax]
[;, long, lmax, =, (, (, long, ), beforeMax, ), +, afterMax, ;, if, (, lmin, <, Integer, ., MAX_VALUE]
[+, afterMin, ;, long, lmax, =, (, (, long, ), beforeMax, ), +, afterMax, ;, if, (, lmin, <, Integer]
[), +, afterMin, ;, long, lmax, =, (, (, long, ), beforeMax, ), +, afterMax, ;, if, (, lmin, <]
[), +, afterMin, ;, long, lmax, =, (, (, long, ), beforeMax, ), +, afterMax, ;, if, (, lmin, <]
[;, long, lmax, =, (, (, long, ), beforeMax, ), +, afterMax, ;, if, (, lmin, <, Integer, ., MAX_VALUE]
[;, if, (, lmin, <, Integer, ., MAX_VALUE, ), {, int, min, =, (, int, ), lmin, ;, int, max]
[+, afterMax, ;, if, (, lmin, <, Integer, ., MAX_VALUE, ), {, int, min, =, (, int, ), lmin, ;]
[), +, afterMax, ;, if, (, lmin, <, Integer, ., MAX_VALUE, ), {, int, min, =, (, int, ), lmin]
[), +, afterMax, ;, if, (, lmin, <, Integer, ., MAX_VALUE, ), {, int, min, =, (, int, ), lmin]
[;, if, (, lmin, <, Integer, ., MAX_VALUE, ), {, int, min, =, (, int, ), lmin, ;, int, max]
[), {, int, min, =, (, int, ), lmin, ;, int, max, =, lmax, >=, Integer, ., MAX_VALUE, ?, Integer]
[<, Integer, ., MAX_VALUE, ), {, int, min, =, (, int, ), lmin, ;, int, max, =, lmax, >=, Integer]
[), {, int, min, =, (, int, ), lmin, ;, int, max, =, lmax, >=, Integer, ., MAX_VALUE, ?, Integer]
[., MAX_VALUE, ), {, int, min, =, (, int, ), lmin, ;, int, max, =, lmax, >=, Integer, ., MAX_VALUE]
[;, int, max, =, lmax, >=, Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, return]
[;, int, max, =, lmax, >=, Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, return]
[;, return, new, Repetition, (, beforeBody, ,, min, ,, max, ,, beforeGreedy, ||, afterGreedy, ||, min, ==, max, ), ;]
[?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, return, new, Repetition, (, beforeBody, ,, min, ,, max, ,]
[>=, Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, return, new, Repetition, (, beforeBody, ,]
[?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, return, new, Repetition, (, beforeBody, ,, min, ,, max, ,]
[., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, return, new, Repetition, (, beforeBody, ,, min, ,]
[:, (, int, ), lmax, ;, return, new, Repetition, (, beforeBody, ,, min, ,, max, ,, beforeGreedy, ||, afterGreedy, ||]
[., MAX_VALUE, :, (, int, ), lmax, ;, return, new, Repetition, (, beforeBody, ,, min, ,, max, ,, beforeGreedy, ||]
[;, return, new, Repetition, (, beforeBody, ,, min, ,, max, ,, beforeGreedy, ||, afterGreedy, ||, min, ==, max, ), ;]
[;, return, new, Repetition, (, beforeBody, ,, min, ,, max, ,, beforeGreedy, ||, afterGreedy, ||, min, ==, max, ), ;]
[;, }, }, return, null, ;, }, }, Simplifier, s, =, new, Simplifier, (, ), ;, for, (, RegExpTree, element]
[,, min, ,, max, ,, beforeGreedy, ||, afterGreedy, ||, min, ==, max, ), ;, }, }, return, null, ;, }]
[,, max, ,, beforeGreedy, ||, afterGreedy, ||, min, ==, max, ), ;, }, }, return, null, ;, }, }, Simplifier]
[,, beforeGreedy, ||, afterGreedy, ||, min, ==, max, ), ;, }, }, return, null, ;, }, }, Simplifier, s, =]
[), ;, }, }, return, null, ;, }, }, Simplifier, s, =, new, Simplifier, (, ), ;, for, (, RegExpTree]
[||, min, ==, max, ), ;, }, }, return, null, ;, }, }, Simplifier, s, =, new, Simplifier, (, )]
[||, afterGreedy, ||, min, ==, max, ), ;, }, }, return, null, ;, }, }, Simplifier, s, =, new, Simplifier]
[||, min, ==, max, ), ;, }, }, return, null, ;, }, }, Simplifier, s, =, new, Simplifier, (, )]
[), ;, }, }, return, null, ;, }, }, Simplifier, s, =, new, Simplifier, (, ), ;, for, (, RegExpTree]
[==, max, ), ;, }, }, return, null, ;, }, }, Simplifier, s, =, new, Simplifier, (, ), ;, for]
[), ;, }, }, return, null, ;, }, }, Simplifier, s, =, new, Simplifier, (, ), ;, for, (, RegExpTree]
[;, }, }, Simplifier, s, =, new, Simplifier, (, ), ;, for, (, RegExpTree, element, :, elements, ), {, s]
[;, for, (, RegExpTree, element, :, elements, ), {, s, ., simplify, (, element, ., simplify, (, flags, ), )]
[), {, s, ., simplify, (, element, ., simplify, (, flags, ), ), ;, }, switch, (, s, ., simplified]
[;, }, switch, (, s, ., simplified, ., size, (, ), ), {, case, 0, :, return, Empty, ., INSTANCE]
[., simplify, (, element, ., simplify, (, flags, ), ), ;, }, switch, (, s, ., simplified, ., size, (]
[), ;, }, switch, (, s, ., simplified, ., size, (, ), ), {, case, 0, :, return, Empty, .]
[., simplify, (, flags, ), ), ;, }, switch, (, s, ., simplified, ., size, (, ), ), {, case]
[), ), ;, }, switch, (, s, ., simplified, ., size, (, ), ), {, case, 0, :, return, Empty]
[), {, case, 0, :, return, Empty, ., INSTANCE, ;, case, 1, :, return, s, ., simplified, ., get, (]
[., size, (, ), ), {, case, 0, :, return, Empty, ., INSTANCE, ;, case, 1, :, return, s, .]
[., simplified, ., size, (, ), ), {, case, 0, :, return, Empty, ., INSTANCE, ;, case, 1, :, return]
[:, return, Empty, ., INSTANCE, ;, case, 1, :, return, s, ., simplified, ., get, (, 0, ), ;, default]
[;, case, 1, :, return, s, ., simplified, ., get, (, 0, ), ;, default, :, return, new, Concatenation, (]
[., INSTANCE, ;, case, 1, :, return, s, ., simplified, ., get, (, 0, ), ;, default, :, return, new]
[:, return, s, ., simplified, ., get, (, 0, ), ;, default, :, return, new, Concatenation, (, s, ., simplified]
[;, default, :, return, new, Concatenation, (, s, ., simplified, ), ;, }, }, @, Override, public, boolean, isCaseSensitive, (]
[., get, (, 0, ), ;, default, :, return, new, Concatenation, (, s, ., simplified, ), ;, }, }, @]
[., simplified, ., get, (, 0, ), ;, default, :, return, new, Concatenation, (, s, ., simplified, ), ;, }]
[), ;, default, :, return, new, Concatenation, (, s, ., simplified, ), ;, }, }, @, Override, public, boolean, isCaseSensitive]
[;, }, }, @, Override, public, boolean, isCaseSensitive, (, ), {, for, (, RegExpTree, element, :, elements, ), {, if]
[), ;, }, }, @, Override, public, boolean, isCaseSensitive, (, ), {, for, (, RegExpTree, element, :, elements, ), {]
[., simplified, ), ;, }, }, @, Override, public, boolean, isCaseSensitive, (, ), {, for, (, RegExpTree, element, :, elements]
[), {, if, (, element, ., isCaseSensitive, (, ), ), {, return, true, ;, }, }, return, false, ;, }]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, containsAnchor, (, ), {, for]
[., isCaseSensitive, (, ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, containsAnchor]
[;, }, }, return, false, ;, }, @, Override, public, boolean, containsAnchor, (, ), {, for, (, RegExpTree, element, :]
[;, }, @, Override, public, boolean, containsAnchor, (, ), {, for, (, RegExpTree, element, :, elements, ), {, if, (]
[), {, if, (, element, ., containsAnchor, (, ), ), {, return, true, ;, }, }, return, false, ;, }]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, int, numCapturingGroups, (, ), {, int]
[., containsAnchor, (, ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, int, numCapturingGroups]
[;, }, }, return, false, ;, }, @, Override, public, int, numCapturingGroups, (, ), {, int, n, =, 0, ;]
[;, }, @, Override, public, int, numCapturingGroups, (, ), {, int, n, =, 0, ;, for, (, RegExpTree, element, :]
[;, for, (, RegExpTree, element, :, elements, ), {, n, +=, element, ., numCapturingGroups, (, ), ;, }, return, n]
[), {, n, +=, element, ., numCapturingGroups, (, ), ;, }, return, n, ;, }, @, Override, public, List, <]
[+=, element, ., numCapturingGroups, (, ), ;, }, return, n, ;, }, @, Override, public, List, <, ?, extends, RegExpTree]
[;, }, return, n, ;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children, (, ), {, return]
[., numCapturingGroups, (, ), ;, }, return, n, ;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children]
[;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children, (, ), {, return, elements, ;, }, @]
[;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, boolean, digitsMightBleed, =, false, ;, for, (, RegExpTree]
[;, for, (, RegExpTree, element, :, elements, ), {, boolean, parenthesize, =, false, ;, if, (, element, instanceof, Alternation, ||]
[), {, boolean, parenthesize, =, false, ;, if, (, element, instanceof, Alternation, ||, element, instanceof, Concatenation, ), {, parenthesize, =]
[;, if, (, element, instanceof, Alternation, ||, element, instanceof, Concatenation, ), {, parenthesize, =, true, ;, }, if, (, parenthesize]
[), {, parenthesize, =, true, ;, }, if, (, parenthesize, ), {, sb, ., append, (, "(?:", ), ;, element]
[||, element, instanceof, Concatenation, ), {, parenthesize, =, true, ;, }, if, (, parenthesize, ), {, sb, ., append, (]
[instanceof, Alternation, ||, element, instanceof, Concatenation, ), {, parenthesize, =, true, ;, }, if, (, parenthesize, ), {, sb, .]
[), {, parenthesize, =, true, ;, }, if, (, parenthesize, ), {, sb, ., append, (, "(?:", ), ;, element]
[instanceof, Concatenation, ), {, parenthesize, =, true, ;, }, if, (, parenthesize, ), {, sb, ., append, (, "(?:", )]
[=, true, ;, }, if, (, parenthesize, ), {, sb, ., append, (, "(?:", ), ;, element, ., appendSourceCode, (]
[;, }, if, (, parenthesize, ), {, sb, ., append, (, "(?:", ), ;, element, ., appendSourceCode, (, sb, )]
[), {, sb, ., append, (, "(?:", ), ;, element, ., appendSourceCode, (, sb, ), ;, sb, ., append, (]
[;, element, ., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;, }, else, {, int, start]
[., append, (, "(?:", ), ;, element, ., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;]
[), ;, element, ., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;, }, else, {, int]
[;, sb, ., append, (, ')', ), ;, }, else, {, int, start, =, sb, ., length, (, ), ;]
[., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;, }, else, {, int, start, =, sb]
[), ;, sb, ., append, (, ')', ), ;, }, else, {, int, start, =, sb, ., length, (, )]
[;, }, else, {, int, start, =, sb, ., length, (, ), ;, element, ., appendSourceCode, (, sb, ), ;]
[., append, (, ')', ), ;, }, else, {, int, start, =, sb, ., length, (, ), ;, element, .]
[), ;, }, else, {, int, start, =, sb, ., length, (, ), ;, element, ., appendSourceCode, (, sb, )]
[;, element, ., appendSourceCode, (, sb, ), ;, if, (, digitsMightBleed, &&, sb, ., length, (, ), >, start, )]
[., length, (, ), ;, element, ., appendSourceCode, (, sb, ), ;, if, (, digitsMightBleed, &&, sb, ., length, (]
[;, if, (, digitsMightBleed, &&, sb, ., length, (, ), >, start, ), {, char, firstChar, =, sb, ., charAt]
[., appendSourceCode, (, sb, ), ;, if, (, digitsMightBleed, &&, sb, ., length, (, ), >, start, ), {, char]
[), ;, if, (, digitsMightBleed, &&, sb, ., length, (, ), >, start, ), {, char, firstChar, =, sb, .]
[), {, char, firstChar, =, sb, ., charAt, (, start, ), ;, if, (, '0', <=, firstChar, &&, firstChar, <=]
[&&, sb, ., length, (, ), >, start, ), {, char, firstChar, =, sb, ., charAt, (, start, ), ;]
[), {, char, firstChar, =, sb, ., charAt, (, start, ), ;, if, (, '0', <=, firstChar, &&, firstChar, <=]
[>, start, ), {, char, firstChar, =, sb, ., charAt, (, start, ), ;, if, (, '0', <=, firstChar, &&]
[., length, (, ), >, start, ), {, char, firstChar, =, sb, ., charAt, (, start, ), ;, if, (]
[), {, char, firstChar, =, sb, ., charAt, (, start, ), ;, if, (, '0', <=, firstChar, &&, firstChar, <=]
[;, if, (, '0', <=, firstChar, &&, firstChar, <=, '9', ), {, if, (, sb, ., charAt, (, start, -]
[., charAt, (, start, ), ;, if, (, '0', <=, firstChar, &&, firstChar, <=, '9', ), {, if, (, sb]
[), ;, if, (, '0', <=, firstChar, &&, firstChar, <=, '9', ), {, if, (, sb, ., charAt, (, start]
[), {, if, (, sb, ., charAt, (, start, -, 1, ), ==, '{', ), {, sb, ., insert, (]
[&&, firstChar, <=, '9', ), {, if, (, sb, ., charAt, (, start, -, 1, ), ==, '{', ), {]
[<=, firstChar, &&, firstChar, <=, '9', ), {, if, (, sb, ., charAt, (, start, -, 1, ), ==, '{']
[&&, firstChar, <=, '9', ), {, if, (, sb, ., charAt, (, start, -, 1, ), ==, '{', ), {]
[), {, if, (, sb, ., charAt, (, start, -, 1, ), ==, '{', ), {, sb, ., insert, (]
[<=, '9', ), {, if, (, sb, ., charAt, (, start, -, 1, ), ==, '{', ), {, sb, .]
[), {, if, (, sb, ., charAt, (, start, -, 1, ), ==, '{', ), {, sb, ., insert, (]
[), {, sb, ., insert, (, start, -, 1, ,, '\\', ), ;, }, else, {, sb, ., insert, (]
[==, '{', ), {, sb, ., insert, (, start, -, 1, ,, '\\', ), ;, }, else, {, sb, .]
[., charAt, (, start, -, 1, ), ==, '{', ), {, sb, ., insert, (, start, -, 1, ,, '\\']
[), ==, '{', ), {, sb, ., insert, (, start, -, 1, ,, '\\', ), ;, }, else, {, sb]
[-, 1, ), ==, '{', ), {, sb, ., insert, (, start, -, 1, ,, '\\', ), ;, }, else]
[), ==, '{', ), {, sb, ., insert, (, start, -, 1, ,, '\\', ), ;, }, else, {, sb]
[), {, sb, ., insert, (, start, -, 1, ,, '\\', ), ;, }, else, {, sb, ., insert, (]
[;, }, else, {, sb, ., insert, (, start, ,, "(?:", ), ., append, (, ')', ), ;, }, }]
[., insert, (, start, -, 1, ,, '\\', ), ;, }, else, {, sb, ., insert, (, start, ,, "(?:"]
[,, '\\', ), ;, }, else, {, sb, ., insert, (, start, ,, "(?:", ), ., append, (, ')', )]
[-, 1, ,, '\\', ), ;, }, else, {, sb, ., insert, (, start, ,, "(?:", ), ., append, (]
[,, '\\', ), ;, }, else, {, sb, ., insert, (, start, ,, "(?:", ), ., append, (, ')', )]
[), ;, }, else, {, sb, ., insert, (, start, ,, "(?:", ), ., append, (, ')', ), ;, }]
[;, }, }, }, }, digitsMightBleed, =, (, (, element, instanceof, BackReference, &&, (, (, BackReference, ), element, ), .]
[., append, (, ')', ), ;, }, }, }, }, digitsMightBleed, =, (, (, element, instanceof, BackReference, &&, (, (]
[., insert, (, start, ,, "(?:", ), ., append, (, ')', ), ;, }, }, }, }, digitsMightBleed, =, (]
[,, "(?:", ), ., append, (, ')', ), ;, }, }, }, }, digitsMightBleed, =, (, (, element, instanceof, BackReference]
[), ., append, (, ')', ), ;, }, }, }, }, digitsMightBleed, =, (, (, element, instanceof, BackReference, &&, (]
[), ;, }, }, }, }, digitsMightBleed, =, (, (, element, instanceof, BackReference, &&, (, (, BackReference, ), element, )]
[=, (, (, element, instanceof, BackReference, &&, (, (, BackReference, ), element, ), ., groupIndex, <, 10, ), ||, (]
[;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public, boolean, equals, (]
[), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public, boolean, equals]
[||, (, element, instanceof, Text, &&, (, (, Text, ), element, ), ., text, ., endsWith, (, "{", ), )]
[), ||, (, element, instanceof, Text, &&, (, (, Text, ), element, ), ., text, ., endsWith, (, "{", )]
[&&, (, (, BackReference, ), element, ), ., groupIndex, <, 10, ), ||, (, element, instanceof, Text, &&, (, (]
[instanceof, BackReference, &&, (, (, BackReference, ), element, ), ., groupIndex, <, 10, ), ||, (, element, instanceof, Text, &&]
[), ||, (, element, instanceof, Text, &&, (, (, Text, ), element, ), ., text, ., endsWith, (, "{", )]
[<, 10, ), ||, (, element, instanceof, Text, &&, (, (, Text, ), element, ), ., text, ., endsWith, (]
[., groupIndex, <, 10, ), ||, (, element, instanceof, Text, &&, (, (, Text, ), element, ), ., text, .]
[), ., groupIndex, <, 10, ), ||, (, element, instanceof, Text, &&, (, (, Text, ), element, ), ., text]
[), ., groupIndex, <, 10, ), ||, (, element, instanceof, Text, &&, (, (, Text, ), element, ), ., text]
[), ||, (, element, instanceof, Text, &&, (, (, Text, ), element, ), ., text, ., endsWith, (, "{", )]
[), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public, boolean, equals]
[), ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public, boolean]
[&&, (, (, Text, ), element, ), ., text, ., endsWith, (, "{", ), ), ), ;, }, }, @]
[instanceof, Text, &&, (, (, Text, ), element, ), ., text, ., endsWith, (, "{", ), ), ), ;, }]
[), ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public, boolean]
[., endsWith, (, "{", ), ), ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[., text, ., endsWith, (, "{", ), ), ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb]
[), ., text, ., endsWith, (, "{", ), ), ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder]
[), ., text, ., endsWith, (, "{", ), ), ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder]
[), ), ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 0x20997e3e, ^, elements, ., hashCode, (, ), ;, }]
[&&, elements, ., equals, (, (, (, Concatenation, ), o, ), ., elements, ), ;, }, @, Override, public, int]
[instanceof, Concatenation, &&, elements, ., equals, (, (, (, Concatenation, ), o, ), ., elements, ), ;, }, @, Override]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 0x20997e3e, ^, elements, ., hashCode, (, ), ;, }]
[., equals, (, (, (, Concatenation, ), o, ), ., elements, ), ;, }, @, Override, public, int, hashCode, (]
[), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x20997e3e, ^, elements, ., hashCode, (, ), ;]
[., elements, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x20997e3e, ^, elements, ., hashCode, (]
[), ., elements, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x20997e3e, ^, elements, ., hashCode]
[), ., elements, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x20997e3e, ^, elements, ., hashCode]
[;, }, }, static, void, escapeCharOnto, (, char, ch, ,, StringBuilder, sb, ), {, switch, (, ch, ), {, case]
[^, elements, ., hashCode, (, ), ;, }, }, static, void, escapeCharOnto, (, char, ch, ,, StringBuilder, sb, ), {]
[;, }, }, static, void, escapeCharOnto, (, char, ch, ,, StringBuilder, sb, ), {, switch, (, ch, ), {, case]
[., hashCode, (, ), ;, }, }, static, void, escapeCharOnto, (, char, ch, ,, StringBuilder, sb, ), {, switch, (]
[), {, case, '\u0000', :, sb, ., append, (, "\\0", ), ;, break, ;, case, '\f', :, sb, ., append]
[:, sb, ., append, (, "\\0", ), ;, break, ;, case, '\f', :, sb, ., append, (, "\\f", ), ;]
[;, break, ;, case, '\f', :, sb, ., append, (, "\\f", ), ;, break, ;, case, '\t', :, sb, .]
[., append, (, "\\0", ), ;, break, ;, case, '\f', :, sb, ., append, (, "\\f", ), ;, break, ;]
[), ;, break, ;, case, '\f', :, sb, ., append, (, "\\f", ), ;, break, ;, case, '\t', :, sb]
[:, sb, ., append, (, "\\f", ), ;, break, ;, case, '\t', :, sb, ., append, (, "\\t", ), ;]
[;, break, ;, case, '\t', :, sb, ., append, (, "\\t", ), ;, break, ;, case, '\n', :, sb, .]
[., append, (, "\\f", ), ;, break, ;, case, '\t', :, sb, ., append, (, "\\t", ), ;, break, ;]
[), ;, break, ;, case, '\t', :, sb, ., append, (, "\\t", ), ;, break, ;, case, '\n', :, sb]
[:, sb, ., append, (, "\\t", ), ;, break, ;, case, '\n', :, sb, ., append, (, "\\n", ), ;]
[;, break, ;, case, '\n', :, sb, ., append, (, "\\n", ), ;, break, ;, case, '\r', :, sb, .]
[., append, (, "\\t", ), ;, break, ;, case, '\n', :, sb, ., append, (, "\\n", ), ;, break, ;]
[), ;, break, ;, case, '\n', :, sb, ., append, (, "\\n", ), ;, break, ;, case, '\r', :, sb]
[:, sb, ., append, (, "\\n", ), ;, break, ;, case, '\r', :, sb, ., append, (, "\\r", ), ;]
[;, break, ;, case, '\r', :, sb, ., append, (, "\\r", ), ;, break, ;, case, '\\', :, sb, .]
[., append, (, "\\n", ), ;, break, ;, case, '\r', :, sb, ., append, (, "\\r", ), ;, break, ;]
[), ;, break, ;, case, '\r', :, sb, ., append, (, "\\r", ), ;, break, ;, case, '\\', :, sb]
[:, sb, ., append, (, "\\r", ), ;, break, ;, case, '\\', :, sb, ., append, (, "\\\\", ), ;]
[;, break, ;, case, '\\', :, sb, ., append, (, "\\\\", ), ;, break, ;, default, :, if, (, ch]
[., append, (, "\\r", ), ;, break, ;, case, '\\', :, sb, ., append, (, "\\\\", ), ;, break, ;]
[), ;, break, ;, case, '\\', :, sb, ., append, (, "\\\\", ), ;, break, ;, default, :, if, (]
[:, sb, ., append, (, "\\\\", ), ;, break, ;, default, :, if, (, ch, <, 0x20, ||, ch, >=]
[;, break, ;, default, :, if, (, ch, <, 0x20, ||, ch, >=, 0x7f, ), {, if, (, ch, >=]
[., append, (, "\\\\", ), ;, break, ;, default, :, if, (, ch, <, 0x20, ||, ch, >=, 0x7f, )]
[), ;, break, ;, default, :, if, (, ch, <, 0x20, ||, ch, >=, 0x7f, ), {, if, (, ch]
[), {, if, (, ch, >=, 0x100, ), {, sb, ., append, (, "\\u", ), ;, sb, ., append, (]
[||, ch, >=, 0x7f, ), {, if, (, ch, >=, 0x100, ), {, sb, ., append, (, "\\u", ), ;]
[<, 0x20, ||, ch, >=, 0x7f, ), {, if, (, ch, >=, 0x100, ), {, sb, ., append, (, "\\u"]
[||, ch, >=, 0x7f, ), {, if, (, ch, >=, 0x100, ), {, sb, ., append, (, "\\u", ), ;]
[), {, if, (, ch, >=, 0x100, ), {, sb, ., append, (, "\\u", ), ;, sb, ., append, (]
[>=, 0x7f, ), {, if, (, ch, >=, 0x100, ), {, sb, ., append, (, "\\u", ), ;, sb, .]
[), {, if, (, ch, >=, 0x100, ), {, sb, ., append, (, "\\u", ), ;, sb, ., append, (]
[), {, sb, ., append, (, "\\u", ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >]
[>=, 0x100, ), {, sb, ., append, (, "\\u", ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (]
[), {, sb, ., append, (, "\\u", ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >]
[;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 12, ), &, 0xf, ), ), ;]
[., append, (, "\\u", ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 12, )]
[), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 12, ), &, 0xf, ), )]
[;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 8, ), &, 0xf, ), ), ;]
[., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 12, ), &, 0xf, ), ), ;, sb, .]
[), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 8, ), &, 0xf, ), )]
[., charAt, (, (, ch, >, >, 12, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", .]
[), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 8, ), &, 0xf, )]
[&, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 8, ), &]
[), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 8, )]
[>, >, 12, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >]
[), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 8, )]
[), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 8, ), &, 0xf, )]
[;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &, 0xf, ), ), ;]
[., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 8, ), &, 0xf, ), ), ;, sb, .]
[), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &, 0xf, ), )]
[., charAt, (, (, ch, >, >, 8, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", .]
[), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &, 0xf, )]
[&, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &]
[), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, )]
[>, >, 8, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >]
[), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, )]
[), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &, 0xf, )]
[;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, ), ), ;, }, else, {]
[., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &, 0xf, ), ), ;, sb, .]
[), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, ), ), ;, }, else]
[., charAt, (, (, ch, >, >, 4, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", .]
[), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, ), ), ;, }]
[&, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, ), )]
[), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, )]
[>, >, 4, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, )]
[), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, )]
[), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, ), ), ;, }]
[;, }, else, {, sb, ., append, (, "\\x", ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (]
[., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, ), ), ;, }, else, {, sb, .]
[), ;, }, else, {, sb, ., append, (, "\\x", ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (]
[., charAt, (, (, ch, ), &, 0xf, ), ), ;, }, else, {, sb, ., append, (, "\\x", )]
[), ), ;, }, else, {, sb, ., append, (, "\\x", ), ;, sb, ., append, (, "0123456789abcdef", ., charAt]
[&, 0xf, ), ), ;, }, else, {, sb, ., append, (, "\\x", ), ;, sb, ., append, (, "0123456789abcdef"]
[), &, 0xf, ), ), ;, }, else, {, sb, ., append, (, "\\x", ), ;, sb, ., append, (]
[), ), ;, }, else, {, sb, ., append, (, "\\x", ), ;, sb, ., append, (, "0123456789abcdef", ., charAt]
[;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &, 0xf, ), ), ;]
[., append, (, "\\x", ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, )]
[), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &, 0xf, ), )]
[;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, ), ), ;, }, }, else]
[., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &, 0xf, ), ), ;, sb, .]
[), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, ), ), ;, }, }]
[., charAt, (, (, ch, >, >, 4, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", .]
[), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, ), ), ;, }]
[&, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, ), )]
[), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, )]
[>, >, 4, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, )]
[), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, )]
[), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, ), ), ;, }]
[;, }, }, else, {, sb, ., append, (, ch, ), ;, }, }, }, }]
[., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, ), ), ;, }, }, else, {, sb]
[), ;, }, }, else, {, sb, ., append, (, ch, ), ;, }, }, }, }]
[., charAt, (, (, ch, ), &, 0xf, ), ), ;, }, }, else, {, sb, ., append, (, ch]
[), ), ;, }, }, else, {, sb, ., append, (, ch, ), ;, }, }, }, }]
[&, 0xf, ), ), ;, }, }, else, {, sb, ., append, (, ch, ), ;, }, }, }, }]
[), &, 0xf, ), ), ;, }, }, else, {, sb, ., append, (, ch, ), ;, }, }, }]
[), ), ;, }, }, else, {, sb, ., append, (, ch, ), ;, }, }, }, }]
[;, }, }, }, }]
[., append, (, ch, ), ;, }, }, }, }]
[), ;, }, }, }, }]
