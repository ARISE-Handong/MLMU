[;, }, public, static, Node, function, (, Node, name, ,, Node, params, ,, Node, body, ), {, Preconditions, ., checkState]
[), ;, }, public, static, Node, function, (, Node, name, ,, Node, params, ,, Node, body, ), {, Preconditions, .]
[., EMPTY, ), ;, }, public, static, Node, function, (, Node, name, ,, Node, params, ,, Node, body, ), {]
[;, Preconditions, ., checkState, (, params, ., isParamList, (, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (]
[., checkState, (, name, ., isName, (, ), ), ;, Preconditions, ., checkState, (, params, ., isParamList, (, ), )]
[), ;, Preconditions, ., checkState, (, params, ., isParamList, (, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock]
[., isName, (, ), ), ;, Preconditions, ., checkState, (, params, ., isParamList, (, ), ), ;, Preconditions, ., checkState]
[;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FUNCTION, ,]
[., checkState, (, params, ., isParamList, (, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), )]
[), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FUNCTION]
[., isParamList, (, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node]
[;, return, new, Node, (, Token, ., FUNCTION, ,, name, ,, params, ,, body, ), ;, }, public, static, Node]
[., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FUNCTION, ,, name, ,]
[), ;, return, new, Node, (, Token, ., FUNCTION, ,, name, ,, params, ,, body, ), ;, }, public, static]
[., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FUNCTION, ,, name, ,, params, ,, body, )]
[;, }, public, static, Node, paramList, (, ), {, return, new, Node, (, Token, ., PARAM_LIST, ), ;, }, public]
[,, name, ,, params, ,, body, ), ;, }, public, static, Node, paramList, (, ), {, return, new, Node, (]
[., FUNCTION, ,, name, ,, params, ,, body, ), ;, }, public, static, Node, paramList, (, ), {, return, new]
[,, params, ,, body, ), ;, }, public, static, Node, paramList, (, ), {, return, new, Node, (, Token, .]
[,, body, ), ;, }, public, static, Node, paramList, (, ), {, return, new, Node, (, Token, ., PARAM_LIST, )]
[), ;, }, public, static, Node, paramList, (, ), {, return, new, Node, (, Token, ., PARAM_LIST, ), ;, }]
[;, }, public, static, Node, paramList, (, Node, param, ), {, Preconditions, ., checkState, (, param, ., isName, (, )]
[), ;, }, public, static, Node, paramList, (, Node, param, ), {, Preconditions, ., checkState, (, param, ., isName, (]
[., PARAM_LIST, ), ;, }, public, static, Node, paramList, (, Node, param, ), {, Preconditions, ., checkState, (, param, .]
[;, return, new, Node, (, Token, ., PARAM_LIST, ,, param, ), ;, }, public, static, Node, paramList, (, Node, ...]
[., checkState, (, param, ., isName, (, ), ), ;, return, new, Node, (, Token, ., PARAM_LIST, ,, param, )]
[), ;, return, new, Node, (, Token, ., PARAM_LIST, ,, param, ), ;, }, public, static, Node, paramList, (, Node]
[., isName, (, ), ), ;, return, new, Node, (, Token, ., PARAM_LIST, ,, param, ), ;, }, public, static]
[;, }, public, static, Node, paramList, (, Node, ..., params, ), {, Node, paramList, =, paramList, (, ), ;, for]
[,, param, ), ;, }, public, static, Node, paramList, (, Node, ..., params, ), {, Node, paramList, =, paramList, (]
[., PARAM_LIST, ,, param, ), ;, }, public, static, Node, paramList, (, Node, ..., params, ), {, Node, paramList, =]
[), ;, }, public, static, Node, paramList, (, Node, ..., params, ), {, Node, paramList, =, paramList, (, ), ;]
[;, for, (, Node, param, :, params, ), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;]
[), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, paramList, ., addChildToBack, (, param, ), ;]
[;, paramList, ., addChildToBack, (, param, ), ;, }, return, paramList, ;, }, public, static, Node, paramList, (, List, <]
[., checkState, (, param, ., isName, (, ), ), ;, paramList, ., addChildToBack, (, param, ), ;, }, return, paramList]
[), ;, paramList, ., addChildToBack, (, param, ), ;, }, return, paramList, ;, }, public, static, Node, paramList, (, List]
[., isName, (, ), ), ;, paramList, ., addChildToBack, (, param, ), ;, }, return, paramList, ;, }, public, static]
[;, }, return, paramList, ;, }, public, static, Node, paramList, (, List, <, Node, >, params, ), {, Node, paramList]
[., addChildToBack, (, param, ), ;, }, return, paramList, ;, }, public, static, Node, paramList, (, List, <, Node, >]
[), ;, }, return, paramList, ;, }, public, static, Node, paramList, (, List, <, Node, >, params, ), {, Node]
[;, }, public, static, Node, paramList, (, List, <, Node, >, params, ), {, Node, paramList, =, paramList, (, )]
[;, for, (, Node, param, :, params, ), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;]
[), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, paramList, ., addChildToBack, (, param, ), ;]
[;, paramList, ., addChildToBack, (, param, ), ;, }, return, paramList, ;, }, public, static, Node, block, (, ), {]
[., checkState, (, param, ., isName, (, ), ), ;, paramList, ., addChildToBack, (, param, ), ;, }, return, paramList]
[), ;, paramList, ., addChildToBack, (, param, ), ;, }, return, paramList, ;, }, public, static, Node, block, (, )]
[., isName, (, ), ), ;, paramList, ., addChildToBack, (, param, ), ;, }, return, paramList, ;, }, public, static]
[;, }, return, paramList, ;, }, public, static, Node, block, (, ), {, Node, block, =, new, Node, (, Token]
[., addChildToBack, (, param, ), ;, }, return, paramList, ;, }, public, static, Node, block, (, ), {, Node, block]
[), ;, }, return, paramList, ;, }, public, static, Node, block, (, ), {, Node, block, =, new, Node, (]
[;, }, public, static, Node, block, (, ), {, Node, block, =, new, Node, (, Token, ., BLOCK, ), ;]
[;, return, block, ;, }, public, static, Node, block, (, Node, stmt, ), {, Preconditions, ., checkState, (, mayBeStatement, (]
[), ;, return, block, ;, }, public, static, Node, block, (, Node, stmt, ), {, Preconditions, ., checkState, (, mayBeStatement]
[., BLOCK, ), ;, return, block, ;, }, public, static, Node, block, (, Node, stmt, ), {, Preconditions, ., checkState]
[;, }, public, static, Node, block, (, Node, stmt, ), {, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), )]
[;, Node, block, =, new, Node, (, Token, ., BLOCK, ,, stmt, ), ;, return, block, ;, }, public, static]
[., checkState, (, mayBeStatement, (, stmt, ), ), ;, Node, block, =, new, Node, (, Token, ., BLOCK, ,, stmt]
[), ;, Node, block, =, new, Node, (, Token, ., BLOCK, ,, stmt, ), ;, return, block, ;, }, public]
[), ), ;, Node, block, =, new, Node, (, Token, ., BLOCK, ,, stmt, ), ;, return, block, ;, }]
[;, return, block, ;, }, public, static, Node, block, (, Node, ..., stmts, ), {, Node, block, =, block, (]
[,, stmt, ), ;, return, block, ;, }, public, static, Node, block, (, Node, ..., stmts, ), {, Node, block]
[., BLOCK, ,, stmt, ), ;, return, block, ;, }, public, static, Node, block, (, Node, ..., stmts, ), {]
[), ;, return, block, ;, }, public, static, Node, block, (, Node, ..., stmts, ), {, Node, block, =, block]
[;, }, public, static, Node, block, (, Node, ..., stmts, ), {, Node, block, =, block, (, ), ;, for]
[;, for, (, Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;, block]
[), {, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;, block, ., addChildToBack, (, stmt, ), ;, }]
[;, block, ., addChildToBack, (, stmt, ), ;, }, return, block, ;, }, public, static, Node, block, (, List, <]
[., checkState, (, mayBeStatement, (, stmt, ), ), ;, block, ., addChildToBack, (, stmt, ), ;, }, return, block, ;]
[), ;, block, ., addChildToBack, (, stmt, ), ;, }, return, block, ;, }, public, static, Node, block, (, List]
[), ), ;, block, ., addChildToBack, (, stmt, ), ;, }, return, block, ;, }, public, static, Node, block, (]
[;, }, return, block, ;, }, public, static, Node, block, (, List, <, Node, >, stmts, ), {, Node, paramList]
[., addChildToBack, (, stmt, ), ;, }, return, block, ;, }, public, static, Node, block, (, List, <, Node, >]
[), ;, }, return, block, ;, }, public, static, Node, block, (, List, <, Node, >, stmts, ), {, Node]
[;, }, public, static, Node, block, (, List, <, Node, >, stmts, ), {, Node, paramList, =, block, (, )]
[;, for, (, Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;, paramList]
[), {, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;, paramList, ., addChildToBack, (, stmt, ), ;, }]
[;, paramList, ., addChildToBack, (, stmt, ), ;, }, return, paramList, ;, }, private, static, Node, blockUnchecked, (, Node, stmt]
[., checkState, (, mayBeStatement, (, stmt, ), ), ;, paramList, ., addChildToBack, (, stmt, ), ;, }, return, paramList, ;]
[), ;, paramList, ., addChildToBack, (, stmt, ), ;, }, return, paramList, ;, }, private, static, Node, blockUnchecked, (, Node]
[), ), ;, paramList, ., addChildToBack, (, stmt, ), ;, }, return, paramList, ;, }, private, static, Node, blockUnchecked, (]
[;, }, return, paramList, ;, }, private, static, Node, blockUnchecked, (, Node, stmt, ), {, return, new, Node, (, Token]
[., addChildToBack, (, stmt, ), ;, }, return, paramList, ;, }, private, static, Node, blockUnchecked, (, Node, stmt, ), {]
[), ;, }, return, paramList, ;, }, private, static, Node, blockUnchecked, (, Node, stmt, ), {, return, new, Node, (]
[;, }, private, static, Node, blockUnchecked, (, Node, stmt, ), {, return, new, Node, (, Token, ., BLOCK, ,, stmt]
[;, }, public, static, Node, script, (, ), {, Node, block, =, new, Node, (, Token, ., SCRIPT, ), ;]
[,, stmt, ), ;, }, public, static, Node, script, (, ), {, Node, block, =, new, Node, (, Token, .]
[., BLOCK, ,, stmt, ), ;, }, public, static, Node, script, (, ), {, Node, block, =, new, Node, (]
[), ;, }, public, static, Node, script, (, ), {, Node, block, =, new, Node, (, Token, ., SCRIPT, )]
[;, return, block, ;, }, public, static, Node, script, (, Node, ..., stmts, ), {, Node, block, =, script, (]
[), ;, return, block, ;, }, public, static, Node, script, (, Node, ..., stmts, ), {, Node, block, =, script]
[., SCRIPT, ), ;, return, block, ;, }, public, static, Node, script, (, Node, ..., stmts, ), {, Node, block]
[;, }, public, static, Node, script, (, Node, ..., stmts, ), {, Node, block, =, script, (, ), ;, for]
[;, for, (, Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (, mayBeStatementNoReturn, (, stmt, ), ), ;, block]
[), {, Preconditions, ., checkState, (, mayBeStatementNoReturn, (, stmt, ), ), ;, block, ., addChildToBack, (, stmt, ), ;, }]
[;, block, ., addChildToBack, (, stmt, ), ;, }, return, block, ;, }, public, static, Node, script, (, List, <]
[., checkState, (, mayBeStatementNoReturn, (, stmt, ), ), ;, block, ., addChildToBack, (, stmt, ), ;, }, return, block, ;]
[), ;, block, ., addChildToBack, (, stmt, ), ;, }, return, block, ;, }, public, static, Node, script, (, List]
[), ), ;, block, ., addChildToBack, (, stmt, ), ;, }, return, block, ;, }, public, static, Node, script, (]
[;, }, return, block, ;, }, public, static, Node, script, (, List, <, Node, >, stmts, ), {, Node, paramList]
[., addChildToBack, (, stmt, ), ;, }, return, block, ;, }, public, static, Node, script, (, List, <, Node, >]
[), ;, }, return, block, ;, }, public, static, Node, script, (, List, <, Node, >, stmts, ), {, Node]
[;, }, public, static, Node, script, (, List, <, Node, >, stmts, ), {, Node, paramList, =, script, (, )]
[;, for, (, Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (, mayBeStatementNoReturn, (, stmt, ), ), ;, paramList]
[), {, Preconditions, ., checkState, (, mayBeStatementNoReturn, (, stmt, ), ), ;, paramList, ., addChildToBack, (, stmt, ), ;, }]
[;, paramList, ., addChildToBack, (, stmt, ), ;, }, return, paramList, ;, }, public, static, Node, var, (, Node, name]
[., checkState, (, mayBeStatementNoReturn, (, stmt, ), ), ;, paramList, ., addChildToBack, (, stmt, ), ;, }, return, paramList, ;]
[), ;, paramList, ., addChildToBack, (, stmt, ), ;, }, return, paramList, ;, }, public, static, Node, var, (, Node]
[), ), ;, paramList, ., addChildToBack, (, stmt, ), ;, }, return, paramList, ;, }, public, static, Node, var, (]
[;, }, return, paramList, ;, }, public, static, Node, var, (, Node, name, ,, Node, value, ), {, Preconditions, .]
[., addChildToBack, (, stmt, ), ;, }, return, paramList, ;, }, public, static, Node, var, (, Node, name, ,, Node]
[), ;, }, return, paramList, ;, }, public, static, Node, var, (, Node, name, ,, Node, value, ), {, Preconditions]
[;, }, public, static, Node, var, (, Node, name, ,, Node, value, ), {, Preconditions, ., checkState, (, name, .]
[;, Preconditions, ., checkState, (, mayBeExpression, (, value, ), ), ;, name, ., addChildToFront, (, value, ), ;, return, var]
[., checkState, (, name, ., isName, (, ), &&, !, name, ., hasChildren, (, ), ), ;, Preconditions, ., checkState]
[), ;, Preconditions, ., checkState, (, mayBeExpression, (, value, ), ), ;, name, ., addChildToFront, (, value, ), ;, return]
[&&, !, name, ., hasChildren, (, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, value, ), ), ;, name]
[., isName, (, ), &&, !, name, ., hasChildren, (, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, value]
[), ;, Preconditions, ., checkState, (, mayBeExpression, (, value, ), ), ;, name, ., addChildToFront, (, value, ), ;, return]
[), ;, Preconditions, ., checkState, (, mayBeExpression, (, value, ), ), ;, name, ., addChildToFront, (, value, ), ;, return]
[., hasChildren, (, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, value, ), ), ;, name, ., addChildToFront, (]
[;, name, ., addChildToFront, (, value, ), ;, return, var, (, name, ), ;, }, public, static, Node, var, (]
[., checkState, (, mayBeExpression, (, value, ), ), ;, name, ., addChildToFront, (, value, ), ;, return, var, (, name]
[), ;, name, ., addChildToFront, (, value, ), ;, return, var, (, name, ), ;, }, public, static, Node, var]
[), ), ;, name, ., addChildToFront, (, value, ), ;, return, var, (, name, ), ;, }, public, static, Node]
[;, return, var, (, name, ), ;, }, public, static, Node, var, (, Node, name, ), {, Preconditions, ., checkState]
[., addChildToFront, (, value, ), ;, return, var, (, name, ), ;, }, public, static, Node, var, (, Node, name]
[), ;, return, var, (, name, ), ;, }, public, static, Node, var, (, Node, name, ), {, Preconditions, .]
[;, }, public, static, Node, var, (, Node, name, ), {, Preconditions, ., checkState, (, name, ., isName, (, )]
[), ;, }, public, static, Node, var, (, Node, name, ), {, Preconditions, ., checkState, (, name, ., isName, (]
[;, return, new, Node, (, Token, ., VAR, ,, name, ), ;, }, public, static, Node, returnNode, (, ), {]
[., checkState, (, name, ., isName, (, ), ), ;, return, new, Node, (, Token, ., VAR, ,, name, )]
[), ;, return, new, Node, (, Token, ., VAR, ,, name, ), ;, }, public, static, Node, returnNode, (, )]
[., isName, (, ), ), ;, return, new, Node, (, Token, ., VAR, ,, name, ), ;, }, public, static]
[;, }, public, static, Node, returnNode, (, ), {, return, new, Node, (, Token, ., RETURN, ), ;, }, public]
[,, name, ), ;, }, public, static, Node, returnNode, (, ), {, return, new, Node, (, Token, ., RETURN, )]
[., VAR, ,, name, ), ;, }, public, static, Node, returnNode, (, ), {, return, new, Node, (, Token, .]
[), ;, }, public, static, Node, returnNode, (, ), {, return, new, Node, (, Token, ., RETURN, ), ;, }]
[;, }, public, static, Node, returnNode, (, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), )]
[), ;, }, public, static, Node, returnNode, (, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, )]
[., RETURN, ), ;, }, public, static, Node, returnNode, (, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[;, return, new, Node, (, Token, ., RETURN, ,, expr, ), ;, }, public, static, Node, throwNode, (, Node, expr]
[., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (, Token, ., RETURN, ,, expr, ), ;]
[), ;, return, new, Node, (, Token, ., RETURN, ,, expr, ), ;, }, public, static, Node, throwNode, (, Node]
[), ), ;, return, new, Node, (, Token, ., RETURN, ,, expr, ), ;, }, public, static, Node, throwNode, (]
[;, }, public, static, Node, throwNode, (, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), )]
[,, expr, ), ;, }, public, static, Node, throwNode, (, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[., RETURN, ,, expr, ), ;, }, public, static, Node, throwNode, (, Node, expr, ), {, Preconditions, ., checkState, (]
[), ;, }, public, static, Node, throwNode, (, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, )]
[;, return, new, Node, (, Token, ., THROW, ,, expr, ), ;, }, public, static, Node, exprResult, (, Node, expr]
[., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (, Token, ., THROW, ,, expr, ), ;]
[), ;, return, new, Node, (, Token, ., THROW, ,, expr, ), ;, }, public, static, Node, exprResult, (, Node]
[), ), ;, return, new, Node, (, Token, ., THROW, ,, expr, ), ;, }, public, static, Node, exprResult, (]
[;, }, public, static, Node, exprResult, (, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), )]
[,, expr, ), ;, }, public, static, Node, exprResult, (, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[., THROW, ,, expr, ), ;, }, public, static, Node, exprResult, (, Node, expr, ), {, Preconditions, ., checkState, (]
[), ;, }, public, static, Node, exprResult, (, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, )]
[;, return, new, Node, (, Token, ., EXPR_RESULT, ,, expr, ), ;, }, public, static, Node, ifNode, (, Node, cond]
[., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (, Token, ., EXPR_RESULT, ,, expr, ), ;]
[), ;, return, new, Node, (, Token, ., EXPR_RESULT, ,, expr, ), ;, }, public, static, Node, ifNode, (, Node]
[), ), ;, return, new, Node, (, Token, ., EXPR_RESULT, ,, expr, ), ;, }, public, static, Node, ifNode, (]
[;, }, public, static, Node, ifNode, (, Node, cond, ,, Node, then, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[,, expr, ), ;, }, public, static, Node, ifNode, (, Node, cond, ,, Node, then, ), {, Preconditions, ., checkState]
[., EXPR_RESULT, ,, expr, ), ;, }, public, static, Node, ifNode, (, Node, cond, ,, Node, then, ), {, Preconditions]
[), ;, }, public, static, Node, ifNode, (, Node, cond, ,, Node, then, ), {, Preconditions, ., checkState, (, mayBeExpression]
[;, Preconditions, ., checkState, (, then, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., IF, ,]
[., checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (, then, ., isBlock, (, ), ), ;]
[), ;, Preconditions, ., checkState, (, then, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., IF]
[), ), ;, Preconditions, ., checkState, (, then, ., isBlock, (, ), ), ;, return, new, Node, (, Token, .]
[;, return, new, Node, (, Token, ., IF, ,, cond, ,, then, ), ;, }, public, static, Node, ifNode, (]
[., checkState, (, then, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., IF, ,, cond, ,]
[), ;, return, new, Node, (, Token, ., IF, ,, cond, ,, then, ), ;, }, public, static, Node, ifNode]
[., isBlock, (, ), ), ;, return, new, Node, (, Token, ., IF, ,, cond, ,, then, ), ;, }]
[;, }, public, static, Node, ifNode, (, Node, cond, ,, Node, then, ,, Node, elseNode, ), {, Preconditions, ., checkState]
[,, cond, ,, then, ), ;, }, public, static, Node, ifNode, (, Node, cond, ,, Node, then, ,, Node, elseNode]
[., IF, ,, cond, ,, then, ), ;, }, public, static, Node, ifNode, (, Node, cond, ,, Node, then, ,]
[,, then, ), ;, }, public, static, Node, ifNode, (, Node, cond, ,, Node, then, ,, Node, elseNode, ), {]
[), ;, }, public, static, Node, ifNode, (, Node, cond, ,, Node, then, ,, Node, elseNode, ), {, Preconditions, .]
[;, Preconditions, ., checkState, (, then, ., isBlock, (, ), ), ;, Preconditions, ., checkState, (, elseNode, ., isBlock, (]
[., checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (, then, ., isBlock, (, ), ), ;]
[), ;, Preconditions, ., checkState, (, then, ., isBlock, (, ), ), ;, Preconditions, ., checkState, (, elseNode, ., isBlock]
[), ), ;, Preconditions, ., checkState, (, then, ., isBlock, (, ), ), ;, Preconditions, ., checkState, (, elseNode, .]
[;, Preconditions, ., checkState, (, elseNode, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., IF, ,]
[., checkState, (, then, ., isBlock, (, ), ), ;, Preconditions, ., checkState, (, elseNode, ., isBlock, (, ), )]
[), ;, Preconditions, ., checkState, (, elseNode, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., IF]
[., isBlock, (, ), ), ;, Preconditions, ., checkState, (, elseNode, ., isBlock, (, ), ), ;, return, new, Node]
[;, return, new, Node, (, Token, ., IF, ,, cond, ,, then, ,, elseNode, ), ;, }, public, static, Node]
[., checkState, (, elseNode, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., IF, ,, cond, ,]
[), ;, return, new, Node, (, Token, ., IF, ,, cond, ,, then, ,, elseNode, ), ;, }, public, static]
[., isBlock, (, ), ), ;, return, new, Node, (, Token, ., IF, ,, cond, ,, then, ,, elseNode, )]
[;, }, public, static, Node, doNode, (, Node, body, ,, Node, cond, ), {, Preconditions, ., checkState, (, body, .]
[,, cond, ,, then, ,, elseNode, ), ;, }, public, static, Node, doNode, (, Node, body, ,, Node, cond, )]
[., IF, ,, cond, ,, then, ,, elseNode, ), ;, }, public, static, Node, doNode, (, Node, body, ,, Node]
[,, then, ,, elseNode, ), ;, }, public, static, Node, doNode, (, Node, body, ,, Node, cond, ), {, Preconditions]
[,, elseNode, ), ;, }, public, static, Node, doNode, (, Node, body, ,, Node, cond, ), {, Preconditions, ., checkState]
[), ;, }, public, static, Node, doNode, (, Node, body, ,, Node, cond, ), {, Preconditions, ., checkState, (, body]
[;, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, return, new, Node, (, Token, ., DO, ,, body]
[., checkState, (, body, ., isBlock, (, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;]
[), ;, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, return, new, Node, (, Token, ., DO, ,]
[., isBlock, (, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, return, new, Node, (]
[;, return, new, Node, (, Token, ., DO, ,, body, ,, cond, ), ;, }, public, static, Node, forIn, (]
[., checkState, (, mayBeExpression, (, cond, ), ), ;, return, new, Node, (, Token, ., DO, ,, body, ,, cond]
[), ;, return, new, Node, (, Token, ., DO, ,, body, ,, cond, ), ;, }, public, static, Node, forIn]
[), ), ;, return, new, Node, (, Token, ., DO, ,, body, ,, cond, ), ;, }, public, static, Node]
[;, }, public, static, Node, forIn, (, Node, target, ,, Node, cond, ,, Node, body, ), {, Preconditions, ., checkState]
[,, body, ,, cond, ), ;, }, public, static, Node, forIn, (, Node, target, ,, Node, cond, ,, Node, body]
[., DO, ,, body, ,, cond, ), ;, }, public, static, Node, forIn, (, Node, target, ,, Node, cond, ,]
[,, cond, ), ;, }, public, static, Node, forIn, (, Node, target, ,, Node, cond, ,, Node, body, ), {]
[), ;, }, public, static, Node, forIn, (, Node, target, ,, Node, cond, ,, Node, body, ), {, Preconditions, .]
[;, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, )]
[., checkState, (, target, ., isVar, (, ), ||, mayBeExpression, (, target, ), ), ;, Preconditions, ., checkState, (, mayBeExpression]
[), ;, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (]
[||, mayBeExpression, (, target, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState]
[., isVar, (, ), ||, mayBeExpression, (, target, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), )]
[), ;, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (]
[), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock]
[;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FOR, ,]
[., checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;]
[), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FOR]
[), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, .]
[;, return, new, Node, (, Token, ., FOR, ,, target, ,, cond, ,, body, ), ;, }, public, static, Node]
[., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FOR, ,, target, ,]
[), ;, return, new, Node, (, Token, ., FOR, ,, target, ,, cond, ,, body, ), ;, }, public, static]
[., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FOR, ,, target, ,, cond, ,, body, )]
[;, }, public, static, Node, forNode, (, Node, init, ,, Node, cond, ,, Node, incr, ,, Node, body, ), {]
[,, target, ,, cond, ,, body, ), ;, }, public, static, Node, forNode, (, Node, init, ,, Node, cond, ,]
[., FOR, ,, target, ,, cond, ,, body, ), ;, }, public, static, Node, forNode, (, Node, init, ,, Node]
[,, cond, ,, body, ), ;, }, public, static, Node, forNode, (, Node, init, ,, Node, cond, ,, Node, incr]
[,, body, ), ;, }, public, static, Node, forNode, (, Node, init, ,, Node, cond, ,, Node, incr, ,, Node]
[), ;, }, public, static, Node, forNode, (, Node, init, ,, Node, cond, ,, Node, incr, ,, Node, body, )]
[;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, cond, ), ), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, incr, ), )]
[., checkState, (, init, ., isVar, (, ), ||, mayBeExpressionOrEmpty, (, init, ), ), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty]
[), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, cond, ), ), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, incr, )]
[||, mayBeExpressionOrEmpty, (, init, ), ), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, cond, ), ), ;, Preconditions, ., checkState]
[., isVar, (, ), ||, mayBeExpressionOrEmpty, (, init, ), ), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, cond, ), )]
[), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, cond, ), ), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, incr, )]
[), ), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, cond, ), ), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, incr]
[;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, incr, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, )]
[., checkState, (, mayBeExpressionOrEmpty, (, cond, ), ), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, incr, ), ), ;, Preconditions]
[), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, incr, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (]
[), ), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, incr, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock]
[;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FOR, ,]
[., checkState, (, mayBeExpressionOrEmpty, (, incr, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;]
[), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FOR]
[), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, .]
[;, return, new, Node, (, Token, ., FOR, ,, init, ,, cond, ,, incr, ,, body, ), ;, }, public]
[., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FOR, ,, init, ,]
[), ;, return, new, Node, (, Token, ., FOR, ,, init, ,, cond, ,, incr, ,, body, ), ;, }]
[., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FOR, ,, init, ,, cond, ,, incr, ,]
[;, }, public, static, Node, switchNode, (, Node, cond, ,, Node, ..., cases, ), {, Preconditions, ., checkState, (, mayBeExpression]
[,, init, ,, cond, ,, incr, ,, body, ), ;, }, public, static, Node, switchNode, (, Node, cond, ,, Node]
[., FOR, ,, init, ,, cond, ,, incr, ,, body, ), ;, }, public, static, Node, switchNode, (, Node, cond]
[,, cond, ,, incr, ,, body, ), ;, }, public, static, Node, switchNode, (, Node, cond, ,, Node, ..., cases]
[,, incr, ,, body, ), ;, }, public, static, Node, switchNode, (, Node, cond, ,, Node, ..., cases, ), {]
[,, body, ), ;, }, public, static, Node, switchNode, (, Node, cond, ,, Node, ..., cases, ), {, Preconditions, .]
[), ;, }, public, static, Node, switchNode, (, Node, cond, ,, Node, ..., cases, ), {, Preconditions, ., checkState, (]
[;, Node, switchNode, =, new, Node, (, Token, ., SWITCH, ,, cond, ), ;, for, (, Node, caseNode, :, cases]
[., checkState, (, mayBeExpression, (, cond, ), ), ;, Node, switchNode, =, new, Node, (, Token, ., SWITCH, ,, cond]
[), ;, Node, switchNode, =, new, Node, (, Token, ., SWITCH, ,, cond, ), ;, for, (, Node, caseNode, :]
[), ), ;, Node, switchNode, =, new, Node, (, Token, ., SWITCH, ,, cond, ), ;, for, (, Node, caseNode]
[;, for, (, Node, caseNode, :, cases, ), {, Preconditions, ., checkState, (, caseNode, ., isCase, (, ), ||, caseNode]
[,, cond, ), ;, for, (, Node, caseNode, :, cases, ), {, Preconditions, ., checkState, (, caseNode, ., isCase, (]
[., SWITCH, ,, cond, ), ;, for, (, Node, caseNode, :, cases, ), {, Preconditions, ., checkState, (, caseNode, .]
[), ;, for, (, Node, caseNode, :, cases, ), {, Preconditions, ., checkState, (, caseNode, ., isCase, (, ), ||]
[), {, Preconditions, ., checkState, (, caseNode, ., isCase, (, ), ||, caseNode, ., isDefaultCase, (, ), ), ;, switchNode]
[;, switchNode, ., addChildToBack, (, caseNode, ), ;, }, return, switchNode, ;, }, public, static, Node, caseNode, (, Node, expr]
[., checkState, (, caseNode, ., isCase, (, ), ||, caseNode, ., isDefaultCase, (, ), ), ;, switchNode, ., addChildToBack, (]
[), ;, switchNode, ., addChildToBack, (, caseNode, ), ;, }, return, switchNode, ;, }, public, static, Node, caseNode, (, Node]
[||, caseNode, ., isDefaultCase, (, ), ), ;, switchNode, ., addChildToBack, (, caseNode, ), ;, }, return, switchNode, ;, }]
[., isCase, (, ), ||, caseNode, ., isDefaultCase, (, ), ), ;, switchNode, ., addChildToBack, (, caseNode, ), ;, }]
[), ;, switchNode, ., addChildToBack, (, caseNode, ), ;, }, return, switchNode, ;, }, public, static, Node, caseNode, (, Node]
[., isDefaultCase, (, ), ), ;, switchNode, ., addChildToBack, (, caseNode, ), ;, }, return, switchNode, ;, }, public, static]
[;, }, return, switchNode, ;, }, public, static, Node, caseNode, (, Node, expr, ,, Node, body, ), {, Preconditions, .]
[., addChildToBack, (, caseNode, ), ;, }, return, switchNode, ;, }, public, static, Node, caseNode, (, Node, expr, ,, Node]
[), ;, }, return, switchNode, ;, }, public, static, Node, caseNode, (, Node, expr, ,, Node, body, ), {, Preconditions]
[;, }, public, static, Node, caseNode, (, Node, expr, ,, Node, body, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,]
[., checkState, (, mayBeExpression, (, expr, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;]
[), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP]
[), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, body, ., putBooleanProp, (, Node, .]
[;, body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, return, new, Node, (, Token, ., CASE, ,]
[., checkState, (, body, ., isBlock, (, ), ), ;, body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, )]
[), ;, body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, return, new, Node, (, Token, ., CASE]
[., isBlock, (, ), ), ;, body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, return, new, Node]
[;, return, new, Node, (, Token, ., CASE, ,, expr, ,, body, ), ;, }, public, static, Node, defaultCase, (]
[., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, return, new, Node, (, Token, ., CASE, ,, expr, ,]
[,, true, ), ;, return, new, Node, (, Token, ., CASE, ,, expr, ,, body, ), ;, }, public, static]
[., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, return, new, Node, (, Token, ., CASE, ,, expr, ,, body, ), ;, }]
[), ;, return, new, Node, (, Token, ., CASE, ,, expr, ,, body, ), ;, }, public, static, Node, defaultCase]
[;, }, public, static, Node, defaultCase, (, Node, body, ), {, Preconditions, ., checkState, (, body, ., isBlock, (, )]
[,, expr, ,, body, ), ;, }, public, static, Node, defaultCase, (, Node, body, ), {, Preconditions, ., checkState, (]
[., CASE, ,, expr, ,, body, ), ;, }, public, static, Node, defaultCase, (, Node, body, ), {, Preconditions, .]
[,, body, ), ;, }, public, static, Node, defaultCase, (, Node, body, ), {, Preconditions, ., checkState, (, body, .]
[), ;, }, public, static, Node, defaultCase, (, Node, body, ), {, Preconditions, ., checkState, (, body, ., isBlock, (]
[;, body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, return, new, Node, (, Token, ., DEFAULT_CASE, ,]
[., checkState, (, body, ., isBlock, (, ), ), ;, body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, )]
[), ;, body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, return, new, Node, (, Token, ., DEFAULT_CASE]
[., isBlock, (, ), ), ;, body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, return, new, Node]
[;, return, new, Node, (, Token, ., DEFAULT_CASE, ,, body, ), ;, }, public, static, Node, label, (, Node, name]
[., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, return, new, Node, (, Token, ., DEFAULT_CASE, ,, body, )]
[,, true, ), ;, return, new, Node, (, Token, ., DEFAULT_CASE, ,, body, ), ;, }, public, static, Node, label]
[., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, return, new, Node, (, Token, ., DEFAULT_CASE, ,, body, ), ;, }, public, static]
[), ;, return, new, Node, (, Token, ., DEFAULT_CASE, ,, body, ), ;, }, public, static, Node, label, (, Node]
[;, }, public, static, Node, label, (, Node, name, ,, Node, stmt, ), {, Preconditions, ., checkState, (, name, .]
[,, body, ), ;, }, public, static, Node, label, (, Node, name, ,, Node, stmt, ), {, Preconditions, ., checkState]
[., DEFAULT_CASE, ,, body, ), ;, }, public, static, Node, label, (, Node, name, ,, Node, stmt, ), {, Preconditions]
[), ;, }, public, static, Node, label, (, Node, name, ,, Node, stmt, ), {, Preconditions, ., checkState, (, name]
[;, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;, Node, block, =, new, Node, (, Token, ., LABEL]
[., checkState, (, name, ., isLabelName, (, ), ), ;, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;]
[), ;, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;, Node, block, =, new, Node, (, Token, .]
[., isLabelName, (, ), ), ;, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;, Node, block, =, new]
[;, Node, block, =, new, Node, (, Token, ., LABEL, ,, name, ,, stmt, ), ;, return, block, ;, }]
[., checkState, (, mayBeStatement, (, stmt, ), ), ;, Node, block, =, new, Node, (, Token, ., LABEL, ,, name]
[), ;, Node, block, =, new, Node, (, Token, ., LABEL, ,, name, ,, stmt, ), ;, return, block, ;]
[), ), ;, Node, block, =, new, Node, (, Token, ., LABEL, ,, name, ,, stmt, ), ;, return, block]
[;, return, block, ;, }, public, static, Node, labelName, (, String, name, ), {, Preconditions, ., checkState, (, !, name]
[,, name, ,, stmt, ), ;, return, block, ;, }, public, static, Node, labelName, (, String, name, ), {, Preconditions]
[., LABEL, ,, name, ,, stmt, ), ;, return, block, ;, }, public, static, Node, labelName, (, String, name, )]
[,, stmt, ), ;, return, block, ;, }, public, static, Node, labelName, (, String, name, ), {, Preconditions, ., checkState]
[), ;, return, block, ;, }, public, static, Node, labelName, (, String, name, ), {, Preconditions, ., checkState, (, !]
[;, }, public, static, Node, labelName, (, String, name, ), {, Preconditions, ., checkState, (, !, name, ., isEmpty, (]
[;, return, Node, ., newString, (, Token, ., LABEL_NAME, ,, name, ), ;, }, public, static, Node, tryFinally, (, Node]
[., checkState, (, !, name, ., isEmpty, (, ), ), ;, return, Node, ., newString, (, Token, ., LABEL_NAME, ,]
[), ;, return, Node, ., newString, (, Token, ., LABEL_NAME, ,, name, ), ;, }, public, static, Node, tryFinally, (]
[), ;, return, Node, ., newString, (, Token, ., LABEL_NAME, ,, name, ), ;, }, public, static, Node, tryFinally, (]
[., isEmpty, (, ), ), ;, return, Node, ., newString, (, Token, ., LABEL_NAME, ,, name, ), ;, }, public]
[;, }, public, static, Node, tryFinally, (, Node, tryBody, ,, Node, finallyBody, ), {, Preconditions, ., checkState, (, tryBody, .]
[., newString, (, Token, ., LABEL_NAME, ,, name, ), ;, }, public, static, Node, tryFinally, (, Node, tryBody, ,, Node]
[,, name, ), ;, }, public, static, Node, tryFinally, (, Node, tryBody, ,, Node, finallyBody, ), {, Preconditions, ., checkState]
[., LABEL_NAME, ,, name, ), ;, }, public, static, Node, tryFinally, (, Node, tryBody, ,, Node, finallyBody, ), {, Preconditions]
[), ;, }, public, static, Node, tryFinally, (, Node, tryBody, ,, Node, finallyBody, ), {, Preconditions, ., checkState, (, tryBody]
[;, Preconditions, ., checkState, (, finallyBody, ., isBlock, (, ), ), ;, Node, catchBody, =, block, (, ), ., copyInformationFrom]
[., checkState, (, tryBody, ., isBlock, (, ), ), ;, Preconditions, ., checkState, (, finallyBody, ., isBlock, (, ), )]
[), ;, Preconditions, ., checkState, (, finallyBody, ., isBlock, (, ), ), ;, Node, catchBody, =, block, (, ), .]
[., isBlock, (, ), ), ;, Preconditions, ., checkState, (, finallyBody, ., isBlock, (, ), ), ;, Node, catchBody, =]
[;, Node, catchBody, =, block, (, ), ., copyInformationFrom, (, tryBody, ), ;, return, new, Node, (, Token, ., TRY]
[., checkState, (, finallyBody, ., isBlock, (, ), ), ;, Node, catchBody, =, block, (, ), ., copyInformationFrom, (, tryBody]
[), ;, Node, catchBody, =, block, (, ), ., copyInformationFrom, (, tryBody, ), ;, return, new, Node, (, Token, .]
[., isBlock, (, ), ), ;, Node, catchBody, =, block, (, ), ., copyInformationFrom, (, tryBody, ), ;, return, new]
[;, return, new, Node, (, Token, ., TRY, ,, tryBody, ,, catchBody, ,, finallyBody, ), ;, }, public, static, Node]
[., copyInformationFrom, (, tryBody, ), ;, return, new, Node, (, Token, ., TRY, ,, tryBody, ,, catchBody, ,, finallyBody, )]
[), ;, return, new, Node, (, Token, ., TRY, ,, tryBody, ,, catchBody, ,, finallyBody, ), ;, }, public, static]
[;, }, public, static, Node, tryCatch, (, Node, tryBody, ,, Node, catchNode, ), {, Preconditions, ., checkState, (, tryBody, .]
[,, tryBody, ,, catchBody, ,, finallyBody, ), ;, }, public, static, Node, tryCatch, (, Node, tryBody, ,, Node, catchNode, )]
[., TRY, ,, tryBody, ,, catchBody, ,, finallyBody, ), ;, }, public, static, Node, tryCatch, (, Node, tryBody, ,, Node]
[,, catchBody, ,, finallyBody, ), ;, }, public, static, Node, tryCatch, (, Node, tryBody, ,, Node, catchNode, ), {, Preconditions]
[,, finallyBody, ), ;, }, public, static, Node, tryCatch, (, Node, tryBody, ,, Node, catchNode, ), {, Preconditions, ., checkState]
[), ;, }, public, static, Node, tryCatch, (, Node, tryBody, ,, Node, catchNode, ), {, Preconditions, ., checkState, (, tryBody]
[;, Preconditions, ., checkState, (, catchNode, ., isCatch, (, ), ), ;, Node, catchBody, =, blockUnchecked, (, catchNode, ), .]
[., checkState, (, tryBody, ., isBlock, (, ), ), ;, Preconditions, ., checkState, (, catchNode, ., isCatch, (, ), )]
[), ;, Preconditions, ., checkState, (, catchNode, ., isCatch, (, ), ), ;, Node, catchBody, =, blockUnchecked, (, catchNode, )]
[., isBlock, (, ), ), ;, Preconditions, ., checkState, (, catchNode, ., isCatch, (, ), ), ;, Node, catchBody, =]
[;, Node, catchBody, =, blockUnchecked, (, catchNode, ), ., copyInformationFrom, (, catchNode, ), ;, return, new, Node, (, Token, .]
[., checkState, (, catchNode, ., isCatch, (, ), ), ;, Node, catchBody, =, blockUnchecked, (, catchNode, ), ., copyInformationFrom, (]
[), ;, Node, catchBody, =, blockUnchecked, (, catchNode, ), ., copyInformationFrom, (, catchNode, ), ;, return, new, Node, (, Token]
[., isCatch, (, ), ), ;, Node, catchBody, =, blockUnchecked, (, catchNode, ), ., copyInformationFrom, (, catchNode, ), ;, return]
[;, return, new, Node, (, Token, ., TRY, ,, tryBody, ,, catchBody, ), ;, }, public, static, Node, tryCatchFinally, (]
[., copyInformationFrom, (, catchNode, ), ;, return, new, Node, (, Token, ., TRY, ,, tryBody, ,, catchBody, ), ;, }]
[), ., copyInformationFrom, (, catchNode, ), ;, return, new, Node, (, Token, ., TRY, ,, tryBody, ,, catchBody, ), ;]
[), ;, return, new, Node, (, Token, ., TRY, ,, tryBody, ,, catchBody, ), ;, }, public, static, Node, tryCatchFinally]
[;, }, public, static, Node, tryCatchFinally, (, Node, tryBody, ,, Node, catchNode, ,, Node, finallyBody, ), {, Preconditions, ., checkState]
[,, tryBody, ,, catchBody, ), ;, }, public, static, Node, tryCatchFinally, (, Node, tryBody, ,, Node, catchNode, ,, Node, finallyBody]
[., TRY, ,, tryBody, ,, catchBody, ), ;, }, public, static, Node, tryCatchFinally, (, Node, tryBody, ,, Node, catchNode, ,]
[,, catchBody, ), ;, }, public, static, Node, tryCatchFinally, (, Node, tryBody, ,, Node, catchNode, ,, Node, finallyBody, ), {]
[), ;, }, public, static, Node, tryCatchFinally, (, Node, tryBody, ,, Node, catchNode, ,, Node, finallyBody, ), {, Preconditions, .]
[;, Node, tryNode, =, tryCatch, (, tryBody, ,, catchNode, ), ;, tryNode, ., addChildToBack, (, finallyBody, ), ;, return, tryNode]
[., checkState, (, finallyBody, ., isBlock, (, ), ), ;, Node, tryNode, =, tryCatch, (, tryBody, ,, catchNode, ), ;]
[), ;, Node, tryNode, =, tryCatch, (, tryBody, ,, catchNode, ), ;, tryNode, ., addChildToBack, (, finallyBody, ), ;, return]
[., isBlock, (, ), ), ;, Node, tryNode, =, tryCatch, (, tryBody, ,, catchNode, ), ;, tryNode, ., addChildToBack, (]
[;, tryNode, ., addChildToBack, (, finallyBody, ), ;, return, tryNode, ;, }, public, static, Node, catchNode, (, Node, expr, ,]
[,, catchNode, ), ;, tryNode, ., addChildToBack, (, finallyBody, ), ;, return, tryNode, ;, }, public, static, Node, catchNode, (]
[), ;, tryNode, ., addChildToBack, (, finallyBody, ), ;, return, tryNode, ;, }, public, static, Node, catchNode, (, Node, expr]
[;, return, tryNode, ;, }, public, static, Node, catchNode, (, Node, expr, ,, Node, body, ), {, Preconditions, ., checkState]
[., addChildToBack, (, finallyBody, ), ;, return, tryNode, ;, }, public, static, Node, catchNode, (, Node, expr, ,, Node, body]
[), ;, return, tryNode, ;, }, public, static, Node, catchNode, (, Node, expr, ,, Node, body, ), {, Preconditions, .]
[;, }, public, static, Node, catchNode, (, Node, expr, ,, Node, body, ), {, Preconditions, ., checkState, (, expr, .]
[;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., CATCH, ,]
[., checkState, (, expr, ., isName, (, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), )]
[), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., CATCH]
[., isName, (, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node]
[;, return, new, Node, (, Token, ., CATCH, ,, expr, ,, body, ), ;, }, public, static, Node, breakNode, (]
[., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., CATCH, ,, expr, ,]
[), ;, return, new, Node, (, Token, ., CATCH, ,, expr, ,, body, ), ;, }, public, static, Node, breakNode]
[., isBlock, (, ), ), ;, return, new, Node, (, Token, ., CATCH, ,, expr, ,, body, ), ;, }]
[;, }, public, static, Node, breakNode, (, ), {, return, new, Node, (, Token, ., BREAK, ), ;, }, public]
[,, expr, ,, body, ), ;, }, public, static, Node, breakNode, (, ), {, return, new, Node, (, Token, .]
[., CATCH, ,, expr, ,, body, ), ;, }, public, static, Node, breakNode, (, ), {, return, new, Node, (]
[,, body, ), ;, }, public, static, Node, breakNode, (, ), {, return, new, Node, (, Token, ., BREAK, )]
[), ;, }, public, static, Node, breakNode, (, ), {, return, new, Node, (, Token, ., BREAK, ), ;, }]
[;, }, public, static, Node, breakNode, (, Node, name, ), {, Preconditions, ., checkState, (, name, ., isLabelName, (, )]
[), ;, }, public, static, Node, breakNode, (, Node, name, ), {, Preconditions, ., checkState, (, name, ., isLabelName, (]
[., BREAK, ), ;, }, public, static, Node, breakNode, (, Node, name, ), {, Preconditions, ., checkState, (, name, .]
[;, return, new, Node, (, Token, ., BREAK, ,, name, ), ;, }, public, static, Node, continueNode, (, ), {]
[., checkState, (, name, ., isLabelName, (, ), ), ;, return, new, Node, (, Token, ., BREAK, ,, name, )]
[), ;, return, new, Node, (, Token, ., BREAK, ,, name, ), ;, }, public, static, Node, continueNode, (, )]
[., isLabelName, (, ), ), ;, return, new, Node, (, Token, ., BREAK, ,, name, ), ;, }, public, static]
[;, }, public, static, Node, continueNode, (, ), {, return, new, Node, (, Token, ., CONTINUE, ), ;, }, public]
[,, name, ), ;, }, public, static, Node, continueNode, (, ), {, return, new, Node, (, Token, ., CONTINUE, )]
[., BREAK, ,, name, ), ;, }, public, static, Node, continueNode, (, ), {, return, new, Node, (, Token, .]
[), ;, }, public, static, Node, continueNode, (, ), {, return, new, Node, (, Token, ., CONTINUE, ), ;, }]
[;, }, public, static, Node, continueNode, (, Node, name, ), {, Preconditions, ., checkState, (, name, ., isLabelName, (, )]
[), ;, }, public, static, Node, continueNode, (, Node, name, ), {, Preconditions, ., checkState, (, name, ., isLabelName, (]
[., CONTINUE, ), ;, }, public, static, Node, continueNode, (, Node, name, ), {, Preconditions, ., checkState, (, name, .]
[;, return, new, Node, (, Token, ., CONTINUE, ,, name, ), ;, }, public, static, Node, call, (, Node, target]
[., checkState, (, name, ., isLabelName, (, ), ), ;, return, new, Node, (, Token, ., CONTINUE, ,, name, )]
[), ;, return, new, Node, (, Token, ., CONTINUE, ,, name, ), ;, }, public, static, Node, call, (, Node]
[., isLabelName, (, ), ), ;, return, new, Node, (, Token, ., CONTINUE, ,, name, ), ;, }, public, static]
[;, }, public, static, Node, call, (, Node, target, ,, Node, ..., args, ), {, Node, call, =, new, Node]
[,, name, ), ;, }, public, static, Node, call, (, Node, target, ,, Node, ..., args, ), {, Node, call]
[., CONTINUE, ,, name, ), ;, }, public, static, Node, call, (, Node, target, ,, Node, ..., args, ), {]
[), ;, }, public, static, Node, call, (, Node, target, ,, Node, ..., args, ), {, Node, call, =, new]
[;, for, (, Node, arg, :, args, ), {, Preconditions, ., checkState, (, mayBeExpression, (, arg, ), ), ;, call]
[,, target, ), ;, for, (, Node, arg, :, args, ), {, Preconditions, ., checkState, (, mayBeExpression, (, arg, )]
[., CALL, ,, target, ), ;, for, (, Node, arg, :, args, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[), ;, for, (, Node, arg, :, args, ), {, Preconditions, ., checkState, (, mayBeExpression, (, arg, ), ), ;]
[), {, Preconditions, ., checkState, (, mayBeExpression, (, arg, ), ), ;, call, ., addChildToBack, (, arg, ), ;, }]
[;, call, ., addChildToBack, (, arg, ), ;, }, return, call, ;, }, public, static, Node, newNode, (, Node, target]
[., checkState, (, mayBeExpression, (, arg, ), ), ;, call, ., addChildToBack, (, arg, ), ;, }, return, call, ;]
[), ;, call, ., addChildToBack, (, arg, ), ;, }, return, call, ;, }, public, static, Node, newNode, (, Node]
[), ), ;, call, ., addChildToBack, (, arg, ), ;, }, return, call, ;, }, public, static, Node, newNode, (]
[;, }, return, call, ;, }, public, static, Node, newNode, (, Node, target, ,, Node, ..., args, ), {, Node]
[., addChildToBack, (, arg, ), ;, }, return, call, ;, }, public, static, Node, newNode, (, Node, target, ,, Node]
[), ;, }, return, call, ;, }, public, static, Node, newNode, (, Node, target, ,, Node, ..., args, ), {]
[;, }, public, static, Node, newNode, (, Node, target, ,, Node, ..., args, ), {, Node, newcall, =, new, Node]
[;, for, (, Node, arg, :, args, ), {, Preconditions, ., checkState, (, mayBeExpression, (, arg, ), ), ;, newcall]
[,, target, ), ;, for, (, Node, arg, :, args, ), {, Preconditions, ., checkState, (, mayBeExpression, (, arg, )]
[., NEW, ,, target, ), ;, for, (, Node, arg, :, args, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[), ;, for, (, Node, arg, :, args, ), {, Preconditions, ., checkState, (, mayBeExpression, (, arg, ), ), ;]
[), {, Preconditions, ., checkState, (, mayBeExpression, (, arg, ), ), ;, newcall, ., addChildToBack, (, arg, ), ;, }]
[;, newcall, ., addChildToBack, (, arg, ), ;, }, return, newcall, ;, }, public, static, Node, name, (, String, name]
[., checkState, (, mayBeExpression, (, arg, ), ), ;, newcall, ., addChildToBack, (, arg, ), ;, }, return, newcall, ;]
[), ;, newcall, ., addChildToBack, (, arg, ), ;, }, return, newcall, ;, }, public, static, Node, name, (, String]
[), ), ;, newcall, ., addChildToBack, (, arg, ), ;, }, return, newcall, ;, }, public, static, Node, name, (]
[;, }, return, newcall, ;, }, public, static, Node, name, (, String, name, ), {, return, Node, ., newString, (]
[., addChildToBack, (, arg, ), ;, }, return, newcall, ;, }, public, static, Node, name, (, String, name, ), {]
[), ;, }, return, newcall, ;, }, public, static, Node, name, (, String, name, ), {, return, Node, ., newString]
[;, }, public, static, Node, name, (, String, name, ), {, return, Node, ., newString, (, Token, ., NAME, ,]
[;, }, public, static, Node, getprop, (, Node, target, ,, Node, prop, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[., newString, (, Token, ., NAME, ,, name, ), ;, }, public, static, Node, getprop, (, Node, target, ,, Node]
[,, name, ), ;, }, public, static, Node, getprop, (, Node, target, ,, Node, prop, ), {, Preconditions, ., checkState]
[., NAME, ,, name, ), ;, }, public, static, Node, getprop, (, Node, target, ,, Node, prop, ), {, Preconditions]
[), ;, }, public, static, Node, getprop, (, Node, target, ,, Node, prop, ), {, Preconditions, ., checkState, (, mayBeExpression]
[;, Preconditions, ., checkState, (, prop, ., isString, (, ), ), ;, return, new, Node, (, Token, ., GETPROP, ,]
[., checkState, (, mayBeExpression, (, target, ), ), ;, Preconditions, ., checkState, (, prop, ., isString, (, ), ), ;]
[), ;, Preconditions, ., checkState, (, prop, ., isString, (, ), ), ;, return, new, Node, (, Token, ., GETPROP]
[), ), ;, Preconditions, ., checkState, (, prop, ., isString, (, ), ), ;, return, new, Node, (, Token, .]
[;, return, new, Node, (, Token, ., GETPROP, ,, target, ,, prop, ), ;, }, public, static, Node, getelem, (]
[., checkState, (, prop, ., isString, (, ), ), ;, return, new, Node, (, Token, ., GETPROP, ,, target, ,]
[), ;, return, new, Node, (, Token, ., GETPROP, ,, target, ,, prop, ), ;, }, public, static, Node, getelem]
[., isString, (, ), ), ;, return, new, Node, (, Token, ., GETPROP, ,, target, ,, prop, ), ;, }]
[;, }, public, static, Node, getelem, (, Node, target, ,, Node, elem, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[,, target, ,, prop, ), ;, }, public, static, Node, getelem, (, Node, target, ,, Node, elem, ), {, Preconditions]
[., GETPROP, ,, target, ,, prop, ), ;, }, public, static, Node, getelem, (, Node, target, ,, Node, elem, )]
[,, prop, ), ;, }, public, static, Node, getelem, (, Node, target, ,, Node, elem, ), {, Preconditions, ., checkState]
[), ;, }, public, static, Node, getelem, (, Node, target, ,, Node, elem, ), {, Preconditions, ., checkState, (, mayBeExpression]
[;, Preconditions, ., checkState, (, mayBeExpression, (, elem, ), ), ;, return, new, Node, (, Token, ., GETELEM, ,, target]
[., checkState, (, mayBeExpression, (, target, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, elem, ), ), ;, return]
[), ;, Preconditions, ., checkState, (, mayBeExpression, (, elem, ), ), ;, return, new, Node, (, Token, ., GETELEM, ,]
[), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, elem, ), ), ;, return, new, Node, (, Token, ., GETELEM]
[;, return, new, Node, (, Token, ., GETELEM, ,, target, ,, elem, ), ;, }, public, static, Node, assign, (]
[., checkState, (, mayBeExpression, (, elem, ), ), ;, return, new, Node, (, Token, ., GETELEM, ,, target, ,, elem]
[), ;, return, new, Node, (, Token, ., GETELEM, ,, target, ,, elem, ), ;, }, public, static, Node, assign]
[), ), ;, return, new, Node, (, Token, ., GETELEM, ,, target, ,, elem, ), ;, }, public, static, Node]
[;, }, public, static, Node, assign, (, Node, target, ,, Node, expr, ), {, Preconditions, ., checkState, (, isAssignmentTarget, (]
[,, target, ,, elem, ), ;, }, public, static, Node, assign, (, Node, target, ,, Node, expr, ), {, Preconditions]
[., GETELEM, ,, target, ,, elem, ), ;, }, public, static, Node, assign, (, Node, target, ,, Node, expr, )]
[,, elem, ), ;, }, public, static, Node, assign, (, Node, target, ,, Node, expr, ), {, Preconditions, ., checkState]
[), ;, }, public, static, Node, assign, (, Node, target, ,, Node, expr, ), {, Preconditions, ., checkState, (, isAssignmentTarget]
[;, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (, Token, ., ASSIGN, ,, target]
[., checkState, (, isAssignmentTarget, (, target, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return]
[), ;, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (, Token, ., ASSIGN, ,]
[), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (, Token, ., ASSIGN]
[;, return, new, Node, (, Token, ., ASSIGN, ,, target, ,, expr, ), ;, }, public, static, Node, hook, (]
[., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (, Token, ., ASSIGN, ,, target, ,, expr]
[), ;, return, new, Node, (, Token, ., ASSIGN, ,, target, ,, expr, ), ;, }, public, static, Node, hook]
[), ), ;, return, new, Node, (, Token, ., ASSIGN, ,, target, ,, expr, ), ;, }, public, static, Node]
[;, }, public, static, Node, hook, (, Node, cond, ,, Node, trueval, ,, Node, falseval, ), {, Preconditions, ., checkState]
[,, target, ,, expr, ), ;, }, public, static, Node, hook, (, Node, cond, ,, Node, trueval, ,, Node, falseval]
[., ASSIGN, ,, target, ,, expr, ), ;, }, public, static, Node, hook, (, Node, cond, ,, Node, trueval, ,]
[,, expr, ), ;, }, public, static, Node, hook, (, Node, cond, ,, Node, trueval, ,, Node, falseval, ), {]
[), ;, }, public, static, Node, hook, (, Node, cond, ,, Node, trueval, ,, Node, falseval, ), {, Preconditions, .]
[;, Preconditions, ., checkState, (, mayBeExpression, (, trueval, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, falseval, ), )]
[., checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, trueval, ), ), ;, Preconditions]
[), ;, Preconditions, ., checkState, (, mayBeExpression, (, trueval, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, falseval, )]
[), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, trueval, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, falseval]
[;, Preconditions, ., checkState, (, mayBeExpression, (, falseval, ), ), ;, return, new, Node, (, Token, ., HOOK, ,, cond]
[., checkState, (, mayBeExpression, (, trueval, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, falseval, ), ), ;, return]
[), ;, Preconditions, ., checkState, (, mayBeExpression, (, falseval, ), ), ;, return, new, Node, (, Token, ., HOOK, ,]
[), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, falseval, ), ), ;, return, new, Node, (, Token, ., HOOK]
[;, return, new, Node, (, Token, ., HOOK, ,, cond, ,, trueval, ,, falseval, ), ;, }, public, static, Node]
[., checkState, (, mayBeExpression, (, falseval, ), ), ;, return, new, Node, (, Token, ., HOOK, ,, cond, ,, trueval]
[), ;, return, new, Node, (, Token, ., HOOK, ,, cond, ,, trueval, ,, falseval, ), ;, }, public, static]
[), ), ;, return, new, Node, (, Token, ., HOOK, ,, cond, ,, trueval, ,, falseval, ), ;, }, public]
[;, }, public, static, Node, comma, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, ., COMMA]
[,, cond, ,, trueval, ,, falseval, ), ;, }, public, static, Node, comma, (, Node, expr1, ,, Node, expr2, )]
[., HOOK, ,, cond, ,, trueval, ,, falseval, ), ;, }, public, static, Node, comma, (, Node, expr1, ,, Node]
[,, trueval, ,, falseval, ), ;, }, public, static, Node, comma, (, Node, expr1, ,, Node, expr2, ), {, return]
[,, falseval, ), ;, }, public, static, Node, comma, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (]
[), ;, }, public, static, Node, comma, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, .]
[;, }, public, static, Node, and, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, ., AND]
[,, expr1, ,, expr2, ), ;, }, public, static, Node, and, (, Node, expr1, ,, Node, expr2, ), {, return]
[., COMMA, ,, expr1, ,, expr2, ), ;, }, public, static, Node, and, (, Node, expr1, ,, Node, expr2, )]
[,, expr2, ), ;, }, public, static, Node, and, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (]
[), ;, }, public, static, Node, and, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, .]
[;, }, public, static, Node, or, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, ., OR]
[,, expr1, ,, expr2, ), ;, }, public, static, Node, or, (, Node, expr1, ,, Node, expr2, ), {, return]
[., AND, ,, expr1, ,, expr2, ), ;, }, public, static, Node, or, (, Node, expr1, ,, Node, expr2, )]
[,, expr2, ), ;, }, public, static, Node, or, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (]
[), ;, }, public, static, Node, or, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, .]
[;, }, public, static, Node, not, (, Node, expr1, ), {, return, unaryOp, (, Token, ., NOT, ,, expr1, )]
[,, expr1, ,, expr2, ), ;, }, public, static, Node, not, (, Node, expr1, ), {, return, unaryOp, (, Token]
[., OR, ,, expr1, ,, expr2, ), ;, }, public, static, Node, not, (, Node, expr1, ), {, return, unaryOp]
[,, expr2, ), ;, }, public, static, Node, not, (, Node, expr1, ), {, return, unaryOp, (, Token, ., NOT]
[), ;, }, public, static, Node, not, (, Node, expr1, ), {, return, unaryOp, (, Token, ., NOT, ,, expr1]
[;, }, public, static, Node, eq, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, ., EQ]
[,, expr1, ), ;, }, public, static, Node, eq, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (]
[., NOT, ,, expr1, ), ;, }, public, static, Node, eq, (, Node, expr1, ,, Node, expr2, ), {, return]
[), ;, }, public, static, Node, eq, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, .]
[;, }, public, static, Node, sheq, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, ., SHEQ]
[,, expr1, ,, expr2, ), ;, }, public, static, Node, sheq, (, Node, expr1, ,, Node, expr2, ), {, return]
[., EQ, ,, expr1, ,, expr2, ), ;, }, public, static, Node, sheq, (, Node, expr1, ,, Node, expr2, )]
[,, expr2, ), ;, }, public, static, Node, sheq, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (]
[), ;, }, public, static, Node, sheq, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, .]
[;, }, public, static, Node, voidNode, (, Node, expr1, ), {, return, unaryOp, (, Token, ., VOID, ,, expr1, )]
[,, expr1, ,, expr2, ), ;, }, public, static, Node, voidNode, (, Node, expr1, ), {, return, unaryOp, (, Token]
[., SHEQ, ,, expr1, ,, expr2, ), ;, }, public, static, Node, voidNode, (, Node, expr1, ), {, return, unaryOp]
[,, expr2, ), ;, }, public, static, Node, voidNode, (, Node, expr1, ), {, return, unaryOp, (, Token, ., VOID]
[), ;, }, public, static, Node, voidNode, (, Node, expr1, ), {, return, unaryOp, (, Token, ., VOID, ,, expr1]
[;, }, public, static, Node, neg, (, Node, expr1, ), {, return, unaryOp, (, Token, ., NEG, ,, expr1, )]
[,, expr1, ), ;, }, public, static, Node, neg, (, Node, expr1, ), {, return, unaryOp, (, Token, ., NEG]
[., VOID, ,, expr1, ), ;, }, public, static, Node, neg, (, Node, expr1, ), {, return, unaryOp, (, Token]
[), ;, }, public, static, Node, neg, (, Node, expr1, ), {, return, unaryOp, (, Token, ., NEG, ,, expr1]
[;, }, public, static, Node, pos, (, Node, expr1, ), {, return, unaryOp, (, Token, ., POS, ,, expr1, )]
[,, expr1, ), ;, }, public, static, Node, pos, (, Node, expr1, ), {, return, unaryOp, (, Token, ., POS]
[., NEG, ,, expr1, ), ;, }, public, static, Node, pos, (, Node, expr1, ), {, return, unaryOp, (, Token]
[), ;, }, public, static, Node, pos, (, Node, expr1, ), {, return, unaryOp, (, Token, ., POS, ,, expr1]
[;, }, public, static, Node, add, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, ., ADD]
[,, expr1, ), ;, }, public, static, Node, add, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (]
[., POS, ,, expr1, ), ;, }, public, static, Node, add, (, Node, expr1, ,, Node, expr2, ), {, return]
[), ;, }, public, static, Node, add, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, .]
[;, }, public, static, Node, sub, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, ., SUB]
[,, expr1, ,, expr2, ), ;, }, public, static, Node, sub, (, Node, expr1, ,, Node, expr2, ), {, return]
[., ADD, ,, expr1, ,, expr2, ), ;, }, public, static, Node, sub, (, Node, expr1, ,, Node, expr2, )]
[,, expr2, ), ;, }, public, static, Node, sub, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (]
[), ;, }, public, static, Node, sub, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, .]
[;, }, public, static, Node, objectlit, (, Node, ..., propdefs, ), {, Node, objectlit, =, new, Node, (, Token, .]
[,, expr1, ,, expr2, ), ;, }, public, static, Node, objectlit, (, Node, ..., propdefs, ), {, Node, objectlit, =]
[., SUB, ,, expr1, ,, expr2, ), ;, }, public, static, Node, objectlit, (, Node, ..., propdefs, ), {, Node]
[,, expr2, ), ;, }, public, static, Node, objectlit, (, Node, ..., propdefs, ), {, Node, objectlit, =, new, Node]
[), ;, }, public, static, Node, objectlit, (, Node, ..., propdefs, ), {, Node, objectlit, =, new, Node, (, Token]
[;, for, (, Node, propdef, :, propdefs, ), {, Preconditions, ., checkState, (, propdef, ., isStringKey, (, ), ||, propdef]
[), ;, for, (, Node, propdef, :, propdefs, ), {, Preconditions, ., checkState, (, propdef, ., isStringKey, (, ), ||]
[., OBJECTLIT, ), ;, for, (, Node, propdef, :, propdefs, ), {, Preconditions, ., checkState, (, propdef, ., isStringKey, (]
[), {, Preconditions, ., checkState, (, propdef, ., isStringKey, (, ), ||, propdef, ., isGetterDef, (, ), ||, propdef, .]
[;, Preconditions, ., checkState, (, propdef, ., hasOneChild, (, ), ), ;, objectlit, ., addChildToBack, (, propdef, ), ;, }]
[., checkState, (, propdef, ., isStringKey, (, ), ||, propdef, ., isGetterDef, (, ), ||, propdef, ., isSetterDef, (, )]
[), ;, Preconditions, ., checkState, (, propdef, ., hasOneChild, (, ), ), ;, objectlit, ., addChildToBack, (, propdef, ), ;]
[||, propdef, ., isSetterDef, (, ), ), ;, Preconditions, ., checkState, (, propdef, ., hasOneChild, (, ), ), ;, objectlit]
[||, propdef, ., isGetterDef, (, ), ||, propdef, ., isSetterDef, (, ), ), ;, Preconditions, ., checkState, (, propdef, .]
[., isStringKey, (, ), ||, propdef, ., isGetterDef, (, ), ||, propdef, ., isSetterDef, (, ), ), ;, Preconditions, .]
[||, propdef, ., isSetterDef, (, ), ), ;, Preconditions, ., checkState, (, propdef, ., hasOneChild, (, ), ), ;, objectlit]
[., isGetterDef, (, ), ||, propdef, ., isSetterDef, (, ), ), ;, Preconditions, ., checkState, (, propdef, ., hasOneChild, (]
[), ;, Preconditions, ., checkState, (, propdef, ., hasOneChild, (, ), ), ;, objectlit, ., addChildToBack, (, propdef, ), ;]
[., isSetterDef, (, ), ), ;, Preconditions, ., checkState, (, propdef, ., hasOneChild, (, ), ), ;, objectlit, ., addChildToBack]
[;, objectlit, ., addChildToBack, (, propdef, ), ;, }, return, objectlit, ;, }, public, static, Node, propdef, (, Node, string]
[., checkState, (, propdef, ., hasOneChild, (, ), ), ;, objectlit, ., addChildToBack, (, propdef, ), ;, }, return, objectlit]
[), ;, objectlit, ., addChildToBack, (, propdef, ), ;, }, return, objectlit, ;, }, public, static, Node, propdef, (, Node]
[., hasOneChild, (, ), ), ;, objectlit, ., addChildToBack, (, propdef, ), ;, }, return, objectlit, ;, }, public, static]
[;, }, return, objectlit, ;, }, public, static, Node, propdef, (, Node, string, ,, Node, value, ), {, Preconditions, .]
[., addChildToBack, (, propdef, ), ;, }, return, objectlit, ;, }, public, static, Node, propdef, (, Node, string, ,, Node]
[), ;, }, return, objectlit, ;, }, public, static, Node, propdef, (, Node, string, ,, Node, value, ), {, Preconditions]
[;, }, public, static, Node, propdef, (, Node, string, ,, Node, value, ), {, Preconditions, ., checkState, (, string, .]
[;, Preconditions, ., checkState, (, !, string, ., hasChildren, (, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, value]
[., checkState, (, string, ., isStringKey, (, ), ), ;, Preconditions, ., checkState, (, !, string, ., hasChildren, (, )]
[), ;, Preconditions, ., checkState, (, !, string, ., hasChildren, (, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (]
[., isStringKey, (, ), ), ;, Preconditions, ., checkState, (, !, string, ., hasChildren, (, ), ), ;, Preconditions, .]
[;, Preconditions, ., checkState, (, mayBeExpression, (, value, ), ), ;, string, ., addChildToFront, (, value, ), ;, return, string]
[., checkState, (, !, string, ., hasChildren, (, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, value, ), )]
[), ;, Preconditions, ., checkState, (, mayBeExpression, (, value, ), ), ;, string, ., addChildToFront, (, value, ), ;, return]
[), ;, Preconditions, ., checkState, (, mayBeExpression, (, value, ), ), ;, string, ., addChildToFront, (, value, ), ;, return]
[., hasChildren, (, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, value, ), ), ;, string, ., addChildToFront, (]
[;, string, ., addChildToFront, (, value, ), ;, return, string, ;, }, public, static, Node, arraylit, (, Node, ..., exprs]
[., checkState, (, mayBeExpression, (, value, ), ), ;, string, ., addChildToFront, (, value, ), ;, return, string, ;, }]
[), ;, string, ., addChildToFront, (, value, ), ;, return, string, ;, }, public, static, Node, arraylit, (, Node, ...]
[), ), ;, string, ., addChildToFront, (, value, ), ;, return, string, ;, }, public, static, Node, arraylit, (, Node]
[;, return, string, ;, }, public, static, Node, arraylit, (, Node, ..., exprs, ), {, Node, arraylit, =, new, Node]
[., addChildToFront, (, value, ), ;, return, string, ;, }, public, static, Node, arraylit, (, Node, ..., exprs, ), {]
[), ;, return, string, ;, }, public, static, Node, arraylit, (, Node, ..., exprs, ), {, Node, arraylit, =, new]
[;, }, public, static, Node, arraylit, (, Node, ..., exprs, ), {, Node, arraylit, =, new, Node, (, Token, .]
[;, for, (, Node, expr, :, exprs, ), {, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, expr, ), ), ;, arraylit]
[), ;, for, (, Node, expr, :, exprs, ), {, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, expr, ), ), ;]
[., ARRAYLIT, ), ;, for, (, Node, expr, :, exprs, ), {, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, expr, )]
[), {, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, expr, ), ), ;, arraylit, ., addChildToBack, (, expr, ), ;, }]
[;, arraylit, ., addChildToBack, (, expr, ), ;, }, return, arraylit, ;, }, public, static, Node, regexp, (, Node, expr]
[., checkState, (, mayBeExpressionOrEmpty, (, expr, ), ), ;, arraylit, ., addChildToBack, (, expr, ), ;, }, return, arraylit, ;]
[), ;, arraylit, ., addChildToBack, (, expr, ), ;, }, return, arraylit, ;, }, public, static, Node, regexp, (, Node]
[), ), ;, arraylit, ., addChildToBack, (, expr, ), ;, }, return, arraylit, ;, }, public, static, Node, regexp, (]
[;, }, return, arraylit, ;, }, public, static, Node, regexp, (, Node, expr, ), {, Preconditions, ., checkState, (, expr]
[., addChildToBack, (, expr, ), ;, }, return, arraylit, ;, }, public, static, Node, regexp, (, Node, expr, ), {]
[), ;, }, return, arraylit, ;, }, public, static, Node, regexp, (, Node, expr, ), {, Preconditions, ., checkState, (]
[;, }, public, static, Node, regexp, (, Node, expr, ), {, Preconditions, ., checkState, (, expr, ., isString, (, )]
[;, return, new, Node, (, Token, ., REGEXP, ,, expr, ), ;, }, public, static, Node, regexp, (, Node, expr]
[., checkState, (, expr, ., isString, (, ), ), ;, return, new, Node, (, Token, ., REGEXP, ,, expr, )]
[), ;, return, new, Node, (, Token, ., REGEXP, ,, expr, ), ;, }, public, static, Node, regexp, (, Node]
[., isString, (, ), ), ;, return, new, Node, (, Token, ., REGEXP, ,, expr, ), ;, }, public, static]
[;, }, public, static, Node, regexp, (, Node, expr, ,, Node, flags, ), {, Preconditions, ., checkState, (, expr, .]
[,, expr, ), ;, }, public, static, Node, regexp, (, Node, expr, ,, Node, flags, ), {, Preconditions, ., checkState]
[., REGEXP, ,, expr, ), ;, }, public, static, Node, regexp, (, Node, expr, ,, Node, flags, ), {, Preconditions]
[), ;, }, public, static, Node, regexp, (, Node, expr, ,, Node, flags, ), {, Preconditions, ., checkState, (, expr]
[;, Preconditions, ., checkState, (, flags, ., isString, (, ), ), ;, return, new, Node, (, Token, ., REGEXP, ,]
[., checkState, (, expr, ., isString, (, ), ), ;, Preconditions, ., checkState, (, flags, ., isString, (, ), )]
[), ;, Preconditions, ., checkState, (, flags, ., isString, (, ), ), ;, return, new, Node, (, Token, ., REGEXP]
[., isString, (, ), ), ;, Preconditions, ., checkState, (, flags, ., isString, (, ), ), ;, return, new, Node]
[;, return, new, Node, (, Token, ., REGEXP, ,, expr, ,, flags, ), ;, }, public, static, Node, string, (]
[., checkState, (, flags, ., isString, (, ), ), ;, return, new, Node, (, Token, ., REGEXP, ,, expr, ,]
[), ;, return, new, Node, (, Token, ., REGEXP, ,, expr, ,, flags, ), ;, }, public, static, Node, string]
[., isString, (, ), ), ;, return, new, Node, (, Token, ., REGEXP, ,, expr, ,, flags, ), ;, }]
[;, }, public, static, Node, string, (, String, s, ), {, return, Node, ., newString, (, s, ), ;, }]
[,, expr, ,, flags, ), ;, }, public, static, Node, string, (, String, s, ), {, return, Node, ., newString]
[., REGEXP, ,, expr, ,, flags, ), ;, }, public, static, Node, string, (, String, s, ), {, return, Node]
[,, flags, ), ;, }, public, static, Node, string, (, String, s, ), {, return, Node, ., newString, (, s]
[), ;, }, public, static, Node, string, (, String, s, ), {, return, Node, ., newString, (, s, ), ;]
[;, }, public, static, Node, stringKey, (, String, s, ), {, return, Node, ., newString, (, Token, ., STRING_KEY, ,]
[., newString, (, s, ), ;, }, public, static, Node, stringKey, (, String, s, ), {, return, Node, ., newString]
[), ;, }, public, static, Node, stringKey, (, String, s, ), {, return, Node, ., newString, (, Token, ., STRING_KEY]
[;, }, public, static, Node, number, (, double, d, ), {, return, Node, ., newNumber, (, d, ), ;, }]
[., newString, (, Token, ., STRING_KEY, ,, s, ), ;, }, public, static, Node, number, (, double, d, ), {]
[,, s, ), ;, }, public, static, Node, number, (, double, d, ), {, return, Node, ., newNumber, (, d]
[., STRING_KEY, ,, s, ), ;, }, public, static, Node, number, (, double, d, ), {, return, Node, ., newNumber]
[), ;, }, public, static, Node, number, (, double, d, ), {, return, Node, ., newNumber, (, d, ), ;]
[;, }, public, static, Node, thisNode, (, ), {, return, new, Node, (, Token, ., THIS, ), ;, }, public]
[., newNumber, (, d, ), ;, }, public, static, Node, thisNode, (, ), {, return, new, Node, (, Token, .]
[), ;, }, public, static, Node, thisNode, (, ), {, return, new, Node, (, Token, ., THIS, ), ;, }]
[;, }, public, static, Node, trueNode, (, ), {, return, new, Node, (, Token, ., TRUE, ), ;, }, public]
[), ;, }, public, static, Node, trueNode, (, ), {, return, new, Node, (, Token, ., TRUE, ), ;, }]
[., THIS, ), ;, }, public, static, Node, trueNode, (, ), {, return, new, Node, (, Token, ., TRUE, )]
[;, }, public, static, Node, falseNode, (, ), {, return, new, Node, (, Token, ., FALSE, ), ;, }, public]
[), ;, }, public, static, Node, falseNode, (, ), {, return, new, Node, (, Token, ., FALSE, ), ;, }]
[., TRUE, ), ;, }, public, static, Node, falseNode, (, ), {, return, new, Node, (, Token, ., FALSE, )]
[;, }, public, static, Node, nullNode, (, ), {, return, new, Node, (, Token, ., NULL, ), ;, }, private]
[), ;, }, public, static, Node, nullNode, (, ), {, return, new, Node, (, Token, ., NULL, ), ;, }]
[., FALSE, ), ;, }, public, static, Node, nullNode, (, ), {, return, new, Node, (, Token, ., NULL, )]
[;, }, private, static, Node, binaryOp, (, int, token, ,, Node, expr1, ,, Node, expr2, ), {, Preconditions, ., checkState]
[), ;, }, private, static, Node, binaryOp, (, int, token, ,, Node, expr1, ,, Node, expr2, ), {, Preconditions, .]
[., NULL, ), ;, }, private, static, Node, binaryOp, (, int, token, ,, Node, expr1, ,, Node, expr2, ), {]
[;, Preconditions, ., checkState, (, mayBeExpression, (, expr2, ), ), ;, return, new, Node, (, token, ,, expr1, ,, expr2]
[., checkState, (, mayBeExpression, (, expr1, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, expr2, ), ), ;, return]
[), ;, Preconditions, ., checkState, (, mayBeExpression, (, expr2, ), ), ;, return, new, Node, (, token, ,, expr1, ,]
[), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, expr2, ), ), ;, return, new, Node, (, token, ,, expr1]
[;, return, new, Node, (, token, ,, expr1, ,, expr2, ), ;, }, private, static, Node, unaryOp, (, int, token]
[., checkState, (, mayBeExpression, (, expr2, ), ), ;, return, new, Node, (, token, ,, expr1, ,, expr2, ), ;]
[), ;, return, new, Node, (, token, ,, expr1, ,, expr2, ), ;, }, private, static, Node, unaryOp, (, int]
[), ), ;, return, new, Node, (, token, ,, expr1, ,, expr2, ), ;, }, private, static, Node, unaryOp, (]
[;, }, private, static, Node, unaryOp, (, int, token, ,, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[,, expr1, ,, expr2, ), ;, }, private, static, Node, unaryOp, (, int, token, ,, Node, expr, ), {, Preconditions]
[,, expr2, ), ;, }, private, static, Node, unaryOp, (, int, token, ,, Node, expr, ), {, Preconditions, ., checkState]
[), ;, }, private, static, Node, unaryOp, (, int, token, ,, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression]
[;, return, new, Node, (, token, ,, expr, ), ;, }, private, static, boolean, mayBeExpressionOrEmpty, (, Node, n, ), {]
[., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (, token, ,, expr, ), ;, }, private]
[), ;, return, new, Node, (, token, ,, expr, ), ;, }, private, static, boolean, mayBeExpressionOrEmpty, (, Node, n, )]
[), ), ;, return, new, Node, (, token, ,, expr, ), ;, }, private, static, boolean, mayBeExpressionOrEmpty, (, Node, n]
[;, }, private, static, boolean, mayBeExpressionOrEmpty, (, Node, n, ), {, return, n, ., isEmpty, (, ), ||, mayBeExpression, (]
[,, expr, ), ;, }, private, static, boolean, mayBeExpressionOrEmpty, (, Node, n, ), {, return, n, ., isEmpty, (, )]
[), ;, }, private, static, boolean, mayBeExpressionOrEmpty, (, Node, n, ), {, return, n, ., isEmpty, (, ), ||, mayBeExpression]
[;, }, private, static, boolean, isAssignmentTarget, (, Node, n, ), {, return, n, ., isName, (, ), ||, n, .]
[||, mayBeExpression, (, n, ), ;, }, private, static, boolean, isAssignmentTarget, (, Node, n, ), {, return, n, ., isName]
[., isEmpty, (, ), ||, mayBeExpression, (, n, ), ;, }, private, static, boolean, isAssignmentTarget, (, Node, n, ), {]
[;, }, private, static, boolean, isAssignmentTarget, (, Node, n, ), {, return, n, ., isName, (, ), ||, n, .]
[), ;, }, private, static, boolean, isAssignmentTarget, (, Node, n, ), {, return, n, ., isName, (, ), ||, n]
[;, }, private, static, boolean, mayBeStatementNoReturn, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {]
[||, n, ., isGetElem, (, ), ;, }, private, static, boolean, mayBeStatementNoReturn, (, Node, n, ), {, switch, (, n]
[||, n, ., isGetProp, (, ), ||, n, ., isGetElem, (, ), ;, }, private, static, boolean, mayBeStatementNoReturn, (, Node]
[., isName, (, ), ||, n, ., isGetProp, (, ), ||, n, ., isGetElem, (, ), ;, }, private, static]
[||, n, ., isGetElem, (, ), ;, }, private, static, boolean, mayBeStatementNoReturn, (, Node, n, ), {, switch, (, n]
[., isGetProp, (, ), ||, n, ., isGetElem, (, ), ;, }, private, static, boolean, mayBeStatementNoReturn, (, Node, n, )]
[;, }, private, static, boolean, mayBeStatementNoReturn, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {]
[., isGetElem, (, ), ;, }, private, static, boolean, mayBeStatementNoReturn, (, Node, n, ), {, switch, (, n, ., getType]
[), {, case, Token, ., EMPTY, :, case, Token, ., FUNCTION, :, return, true, ;, case, Token, ., BLOCK, :]
[., getType, (, ), ), {, case, Token, ., EMPTY, :, case, Token, ., FUNCTION, :, return, true, ;, case]
[:, case, Token, ., FUNCTION, :, return, true, ;, case, Token, ., BLOCK, :, case, Token, ., BREAK, :, case]
[., EMPTY, :, case, Token, ., FUNCTION, :, return, true, ;, case, Token, ., BLOCK, :, case, Token, ., BREAK]
[:, return, true, ;, case, Token, ., BLOCK, :, case, Token, ., BREAK, :, case, Token, ., CONST, :, case]
[., FUNCTION, :, return, true, ;, case, Token, ., BLOCK, :, case, Token, ., BREAK, :, case, Token, ., CONST]
[;, case, Token, ., BLOCK, :, case, Token, ., BREAK, :, case, Token, ., CONST, :, case, Token, ., CONTINUE]
[:, case, Token, ., BREAK, :, case, Token, ., CONST, :, case, Token, ., CONTINUE, :, case, Token, ., DEBUGGER]
[., BLOCK, :, case, Token, ., BREAK, :, case, Token, ., CONST, :, case, Token, ., CONTINUE, :, case, Token]
[:, case, Token, ., CONST, :, case, Token, ., CONTINUE, :, case, Token, ., DEBUGGER, :, case, Token, ., DO]
[., BREAK, :, case, Token, ., CONST, :, case, Token, ., CONTINUE, :, case, Token, ., DEBUGGER, :, case, Token]
[:, case, Token, ., CONTINUE, :, case, Token, ., DEBUGGER, :, case, Token, ., DO, :, case, Token, ., EXPR_RESULT]
[., CONST, :, case, Token, ., CONTINUE, :, case, Token, ., DEBUGGER, :, case, Token, ., DO, :, case, Token]
[:, case, Token, ., DEBUGGER, :, case, Token, ., DO, :, case, Token, ., EXPR_RESULT, :, case, Token, ., FOR]
[., CONTINUE, :, case, Token, ., DEBUGGER, :, case, Token, ., DO, :, case, Token, ., EXPR_RESULT, :, case, Token]
[:, case, Token, ., DO, :, case, Token, ., EXPR_RESULT, :, case, Token, ., FOR, :, case, Token, ., IF]
[., DEBUGGER, :, case, Token, ., DO, :, case, Token, ., EXPR_RESULT, :, case, Token, ., FOR, :, case, Token]
[:, case, Token, ., EXPR_RESULT, :, case, Token, ., FOR, :, case, Token, ., IF, :, case, Token, ., LABEL]
[., DO, :, case, Token, ., EXPR_RESULT, :, case, Token, ., FOR, :, case, Token, ., IF, :, case, Token]
[:, case, Token, ., FOR, :, case, Token, ., IF, :, case, Token, ., LABEL, :, case, Token, ., SWITCH]
[., EXPR_RESULT, :, case, Token, ., FOR, :, case, Token, ., IF, :, case, Token, ., LABEL, :, case, Token]
[:, case, Token, ., IF, :, case, Token, ., LABEL, :, case, Token, ., SWITCH, :, case, Token, ., THROW]
[., FOR, :, case, Token, ., IF, :, case, Token, ., LABEL, :, case, Token, ., SWITCH, :, case, Token]
[:, case, Token, ., LABEL, :, case, Token, ., SWITCH, :, case, Token, ., THROW, :, case, Token, ., TRY]
[., IF, :, case, Token, ., LABEL, :, case, Token, ., SWITCH, :, case, Token, ., THROW, :, case, Token]
[:, case, Token, ., SWITCH, :, case, Token, ., THROW, :, case, Token, ., TRY, :, case, Token, ., VAR]
[., LABEL, :, case, Token, ., SWITCH, :, case, Token, ., THROW, :, case, Token, ., TRY, :, case, Token]
[:, case, Token, ., THROW, :, case, Token, ., TRY, :, case, Token, ., VAR, :, case, Token, ., WHILE]
[., SWITCH, :, case, Token, ., THROW, :, case, Token, ., TRY, :, case, Token, ., VAR, :, case, Token]
[:, case, Token, ., TRY, :, case, Token, ., VAR, :, case, Token, ., WHILE, :, case, Token, ., WITH]
[., THROW, :, case, Token, ., TRY, :, case, Token, ., VAR, :, case, Token, ., WHILE, :, case, Token]
[:, case, Token, ., VAR, :, case, Token, ., WHILE, :, case, Token, ., WITH, :, return, true, ;, default]
[., TRY, :, case, Token, ., VAR, :, case, Token, ., WHILE, :, case, Token, ., WITH, :, return, true]
[:, case, Token, ., WHILE, :, case, Token, ., WITH, :, return, true, ;, default, :, return, false, ;, }]
[., VAR, :, case, Token, ., WHILE, :, case, Token, ., WITH, :, return, true, ;, default, :, return, false]
[:, case, Token, ., WITH, :, return, true, ;, default, :, return, false, ;, }, }, private, static, boolean, mayBeStatement]
[., WHILE, :, case, Token, ., WITH, :, return, true, ;, default, :, return, false, ;, }, }, private, static]
[:, return, true, ;, default, :, return, false, ;, }, }, private, static, boolean, mayBeStatement, (, Node, n, ), {]
[., WITH, :, return, true, ;, default, :, return, false, ;, }, }, private, static, boolean, mayBeStatement, (, Node, n]
[;, default, :, return, false, ;, }, }, private, static, boolean, mayBeStatement, (, Node, n, ), {, if, (, !]
[;, }, }, private, static, boolean, mayBeStatement, (, Node, n, ), {, if, (, !, mayBeStatementNoReturn, (, n, ), )]
[), {, return, n, ., isReturn, (, ), ;, }, return, true, ;, }, private, static, boolean, mayBeExpression, (, Node]
[), {, return, n, ., isReturn, (, ), ;, }, return, true, ;, }, private, static, boolean, mayBeExpression, (, Node]
[), ), {, return, n, ., isReturn, (, ), ;, }, return, true, ;, }, private, static, boolean, mayBeExpression, (]
[;, }, return, true, ;, }, private, static, boolean, mayBeExpression, (, Node, n, ), {, switch, (, n, ., getType]
[., isReturn, (, ), ;, }, return, true, ;, }, private, static, boolean, mayBeExpression, (, Node, n, ), {, switch]
[;, }, private, static, boolean, mayBeExpression, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {]
[), {, case, Token, ., FUNCTION, :, return, true, ;, case, Token, ., ADD, :, case, Token, ., AND, :]
[., getType, (, ), ), {, case, Token, ., FUNCTION, :, return, true, ;, case, Token, ., ADD, :, case]
[:, return, true, ;, case, Token, ., ADD, :, case, Token, ., AND, :, case, Token, ., ARRAYLIT, :, case]
[., FUNCTION, :, return, true, ;, case, Token, ., ADD, :, case, Token, ., AND, :, case, Token, ., ARRAYLIT]
[;, case, Token, ., ADD, :, case, Token, ., AND, :, case, Token, ., ARRAYLIT, :, case, Token, ., ASSIGN]
[:, case, Token, ., AND, :, case, Token, ., ARRAYLIT, :, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR]
[., ADD, :, case, Token, ., AND, :, case, Token, ., ARRAYLIT, :, case, Token, ., ASSIGN, :, case, Token]
[:, case, Token, ., ARRAYLIT, :, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR]
[., AND, :, case, Token, ., ARRAYLIT, :, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token]
[:, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND]
[., ARRAYLIT, :, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token]
[:, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH]
[., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token]
[:, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH]
[., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token]
[:, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH]
[., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token]
[:, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD]
[., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token]
[:, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB]
[., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token]
[:, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL]
[., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token]
[:, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV]
[., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token]
[:, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD]
[., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token]
[:, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., BITAND]
[., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token]
[:, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., BITAND, :, case, Token, ., BITOR]
[., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., BITAND, :, case, Token]
[:, case, Token, ., ASSIGN_MOD, :, case, Token, ., BITAND, :, case, Token, ., BITOR, :, case, Token, ., BITNOT]
[., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., BITAND, :, case, Token, ., BITOR, :, case, Token]
[:, case, Token, ., BITAND, :, case, Token, ., BITOR, :, case, Token, ., BITNOT, :, case, Token, ., BITXOR]
[., ASSIGN_MOD, :, case, Token, ., BITAND, :, case, Token, ., BITOR, :, case, Token, ., BITNOT, :, case, Token]
[:, case, Token, ., BITOR, :, case, Token, ., BITNOT, :, case, Token, ., BITXOR, :, case, Token, ., CALL]
[., BITAND, :, case, Token, ., BITOR, :, case, Token, ., BITNOT, :, case, Token, ., BITXOR, :, case, Token]
[:, case, Token, ., BITNOT, :, case, Token, ., BITXOR, :, case, Token, ., CALL, :, case, Token, ., COMMA]
[., BITOR, :, case, Token, ., BITNOT, :, case, Token, ., BITXOR, :, case, Token, ., CALL, :, case, Token]
[:, case, Token, ., BITXOR, :, case, Token, ., CALL, :, case, Token, ., COMMA, :, case, Token, ., DEC]
[., BITNOT, :, case, Token, ., BITXOR, :, case, Token, ., CALL, :, case, Token, ., COMMA, :, case, Token]
[:, case, Token, ., CALL, :, case, Token, ., COMMA, :, case, Token, ., DEC, :, case, Token, ., DELPROP]
[., BITXOR, :, case, Token, ., CALL, :, case, Token, ., COMMA, :, case, Token, ., DEC, :, case, Token]
[:, case, Token, ., COMMA, :, case, Token, ., DEC, :, case, Token, ., DELPROP, :, case, Token, ., DIV]
[., CALL, :, case, Token, ., COMMA, :, case, Token, ., DEC, :, case, Token, ., DELPROP, :, case, Token]
[:, case, Token, ., DEC, :, case, Token, ., DELPROP, :, case, Token, ., DIV, :, case, Token, ., EQ]
[., COMMA, :, case, Token, ., DEC, :, case, Token, ., DELPROP, :, case, Token, ., DIV, :, case, Token]
[:, case, Token, ., DELPROP, :, case, Token, ., DIV, :, case, Token, ., EQ, :, case, Token, ., FALSE]
[., DEC, :, case, Token, ., DELPROP, :, case, Token, ., DIV, :, case, Token, ., EQ, :, case, Token]
[:, case, Token, ., DIV, :, case, Token, ., EQ, :, case, Token, ., FALSE, :, case, Token, ., GE]
[., DELPROP, :, case, Token, ., DIV, :, case, Token, ., EQ, :, case, Token, ., FALSE, :, case, Token]
[:, case, Token, ., EQ, :, case, Token, ., FALSE, :, case, Token, ., GE, :, case, Token, ., GETPROP]
[., DIV, :, case, Token, ., EQ, :, case, Token, ., FALSE, :, case, Token, ., GE, :, case, Token]
[:, case, Token, ., FALSE, :, case, Token, ., GE, :, case, Token, ., GETPROP, :, case, Token, ., GETELEM]
[., EQ, :, case, Token, ., FALSE, :, case, Token, ., GE, :, case, Token, ., GETPROP, :, case, Token]
[:, case, Token, ., GE, :, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, case, Token, ., GT]
[., FALSE, :, case, Token, ., GE, :, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, case, Token]
[:, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, case, Token, ., GT, :, case, Token, ., HOOK]
[., GE, :, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, case, Token, ., GT, :, case, Token]
[:, case, Token, ., GETELEM, :, case, Token, ., GT, :, case, Token, ., HOOK, :, case, Token, ., IN]
[., GETPROP, :, case, Token, ., GETELEM, :, case, Token, ., GT, :, case, Token, ., HOOK, :, case, Token]
[:, case, Token, ., GT, :, case, Token, ., HOOK, :, case, Token, ., IN, :, case, Token, ., INC]
[., GETELEM, :, case, Token, ., GT, :, case, Token, ., HOOK, :, case, Token, ., IN, :, case, Token]
[:, case, Token, ., HOOK, :, case, Token, ., IN, :, case, Token, ., INC, :, case, Token, ., INSTANCEOF]
[., GT, :, case, Token, ., HOOK, :, case, Token, ., IN, :, case, Token, ., INC, :, case, Token]
[:, case, Token, ., IN, :, case, Token, ., INC, :, case, Token, ., INSTANCEOF, :, case, Token, ., LE]
[., HOOK, :, case, Token, ., IN, :, case, Token, ., INC, :, case, Token, ., INSTANCEOF, :, case, Token]
[:, case, Token, ., INC, :, case, Token, ., INSTANCEOF, :, case, Token, ., LE, :, case, Token, ., LSH]
[., IN, :, case, Token, ., INC, :, case, Token, ., INSTANCEOF, :, case, Token, ., LE, :, case, Token]
[:, case, Token, ., INSTANCEOF, :, case, Token, ., LE, :, case, Token, ., LSH, :, case, Token, ., LT]
[., INC, :, case, Token, ., INSTANCEOF, :, case, Token, ., LE, :, case, Token, ., LSH, :, case, Token]
[:, case, Token, ., LE, :, case, Token, ., LSH, :, case, Token, ., LT, :, case, Token, ., MOD]
[., INSTANCEOF, :, case, Token, ., LE, :, case, Token, ., LSH, :, case, Token, ., LT, :, case, Token]
[:, case, Token, ., LSH, :, case, Token, ., LT, :, case, Token, ., MOD, :, case, Token, ., MUL]
[., LE, :, case, Token, ., LSH, :, case, Token, ., LT, :, case, Token, ., MOD, :, case, Token]
[:, case, Token, ., LT, :, case, Token, ., MOD, :, case, Token, ., MUL, :, case, Token, ., NAME]
[., LSH, :, case, Token, ., LT, :, case, Token, ., MOD, :, case, Token, ., MUL, :, case, Token]
[:, case, Token, ., MOD, :, case, Token, ., MUL, :, case, Token, ., NAME, :, case, Token, ., NE]
[., LT, :, case, Token, ., MOD, :, case, Token, ., MUL, :, case, Token, ., NAME, :, case, Token]
[:, case, Token, ., MUL, :, case, Token, ., NAME, :, case, Token, ., NE, :, case, Token, ., NEG]
[., MOD, :, case, Token, ., MUL, :, case, Token, ., NAME, :, case, Token, ., NE, :, case, Token]
[:, case, Token, ., NAME, :, case, Token, ., NE, :, case, Token, ., NEG, :, case, Token, ., NEW]
[., MUL, :, case, Token, ., NAME, :, case, Token, ., NE, :, case, Token, ., NEG, :, case, Token]
[:, case, Token, ., NE, :, case, Token, ., NEG, :, case, Token, ., NEW, :, case, Token, ., NOT]
[., NAME, :, case, Token, ., NE, :, case, Token, ., NEG, :, case, Token, ., NEW, :, case, Token]
[:, case, Token, ., NEG, :, case, Token, ., NEW, :, case, Token, ., NOT, :, case, Token, ., NUMBER]
[., NE, :, case, Token, ., NEG, :, case, Token, ., NEW, :, case, Token, ., NOT, :, case, Token]
[:, case, Token, ., NEW, :, case, Token, ., NOT, :, case, Token, ., NUMBER, :, case, Token, ., NULL]
[., NEG, :, case, Token, ., NEW, :, case, Token, ., NOT, :, case, Token, ., NUMBER, :, case, Token]
[:, case, Token, ., NOT, :, case, Token, ., NUMBER, :, case, Token, ., NULL, :, case, Token, ., OBJECTLIT]
[., NEW, :, case, Token, ., NOT, :, case, Token, ., NUMBER, :, case, Token, ., NULL, :, case, Token]
[:, case, Token, ., NUMBER, :, case, Token, ., NULL, :, case, Token, ., OBJECTLIT, :, case, Token, ., OR]
[., NOT, :, case, Token, ., NUMBER, :, case, Token, ., NULL, :, case, Token, ., OBJECTLIT, :, case, Token]
[:, case, Token, ., NULL, :, case, Token, ., OBJECTLIT, :, case, Token, ., OR, :, case, Token, ., POS]
[., NUMBER, :, case, Token, ., NULL, :, case, Token, ., OBJECTLIT, :, case, Token, ., OR, :, case, Token]
[:, case, Token, ., OBJECTLIT, :, case, Token, ., OR, :, case, Token, ., POS, :, case, Token, ., REGEXP]
[., NULL, :, case, Token, ., OBJECTLIT, :, case, Token, ., OR, :, case, Token, ., POS, :, case, Token]
[:, case, Token, ., OR, :, case, Token, ., POS, :, case, Token, ., REGEXP, :, case, Token, ., RSH]
[., OBJECTLIT, :, case, Token, ., OR, :, case, Token, ., POS, :, case, Token, ., REGEXP, :, case, Token]
[:, case, Token, ., POS, :, case, Token, ., REGEXP, :, case, Token, ., RSH, :, case, Token, ., SHEQ]
[., OR, :, case, Token, ., POS, :, case, Token, ., REGEXP, :, case, Token, ., RSH, :, case, Token]
[:, case, Token, ., REGEXP, :, case, Token, ., RSH, :, case, Token, ., SHEQ, :, case, Token, ., SHNE]
[., POS, :, case, Token, ., REGEXP, :, case, Token, ., RSH, :, case, Token, ., SHEQ, :, case, Token]
[:, case, Token, ., RSH, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., STRING]
[., REGEXP, :, case, Token, ., RSH, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token]
[:, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., STRING, :, case, Token, ., SUB]
[., RSH, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., STRING, :, case, Token]
[:, case, Token, ., SHNE, :, case, Token, ., STRING, :, case, Token, ., SUB, :, case, Token, ., THIS]
[., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., STRING, :, case, Token, ., SUB, :, case, Token]
[:, case, Token, ., STRING, :, case, Token, ., SUB, :, case, Token, ., THIS, :, case, Token, ., TYPEOF]
[., SHNE, :, case, Token, ., STRING, :, case, Token, ., SUB, :, case, Token, ., THIS, :, case, Token]
[:, case, Token, ., SUB, :, case, Token, ., THIS, :, case, Token, ., TYPEOF, :, case, Token, ., TRUE]
[., STRING, :, case, Token, ., SUB, :, case, Token, ., THIS, :, case, Token, ., TYPEOF, :, case, Token]
[:, case, Token, ., THIS, :, case, Token, ., TYPEOF, :, case, Token, ., TRUE, :, case, Token, ., URSH]
[., SUB, :, case, Token, ., THIS, :, case, Token, ., TYPEOF, :, case, Token, ., TRUE, :, case, Token]
[:, case, Token, ., TYPEOF, :, case, Token, ., TRUE, :, case, Token, ., URSH, :, case, Token, ., VOID]
[., THIS, :, case, Token, ., TYPEOF, :, case, Token, ., TRUE, :, case, Token, ., URSH, :, case, Token]
[:, case, Token, ., TRUE, :, case, Token, ., URSH, :, case, Token, ., VOID, :, return, true, ;, default]
[., TYPEOF, :, case, Token, ., TRUE, :, case, Token, ., URSH, :, case, Token, ., VOID, :, return, true]
[:, case, Token, ., URSH, :, case, Token, ., VOID, :, return, true, ;, default, :, return, false, ;, }]
[., TRUE, :, case, Token, ., URSH, :, case, Token, ., VOID, :, return, true, ;, default, :, return, false]
[:, case, Token, ., VOID, :, return, true, ;, default, :, return, false, ;, }, }, }]
[., URSH, :, case, Token, ., VOID, :, return, true, ;, default, :, return, false, ;, }, }, }]
[:, return, true, ;, default, :, return, false, ;, }, }, }]
[., VOID, :, return, true, ;, default, :, return, false, ;, }, }, }]
[;, default, :, return, false, ;, }, }, }]
[;, }, }, }]
