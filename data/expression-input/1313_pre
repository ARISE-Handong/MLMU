[private, final, AbstractCompiler, compiler, ;, private, final, NameReferenceGraph, graph, ;, private, final, Multimap, <, String, ,, NameUse, >, unknownNameUse, =]
[private, final, AbstractCompiler, compiler, ;, private, final, NameReferenceGraph, graph, ;, private, final, Multimap, <, String, ,, NameUse, >, unknownNameUse, =]
[Multimap, <, String, ,, NameUse, >, unknownNameUse, =, HashMultimap, ., create, (, ), ;, private, static, final, boolean, CONSERVATIVE, =]
[create, (, ), ;, private, static, final, boolean, CONSERVATIVE, =, false, ;, private, final, ArrayList, <, Name, >, currentFunctionStack, =]
[ArrayList, <, Name, >, currentFunctionStack, =, new, ArrayList, <, Name, >, (, ), ;, NameReferenceGraphConstruction, (, AbstractCompiler, compiler, ), {]
[ArrayList, <, Name, >, currentFunctionStack, =, new, ArrayList, <, Name, >, (, ), ;, NameReferenceGraphConstruction, (, AbstractCompiler, compiler, ), {]
[currentFunctionStack, =, new, ArrayList, <, Name, >, (, ), ;, NameReferenceGraphConstruction, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[new, ArrayList, <, Name, >, (, ), ;, NameReferenceGraphConstruction, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[new, ArrayList, <, Name, >, (, ), ;, NameReferenceGraphConstruction, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[>, (, ), ;, NameReferenceGraphConstruction, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., graph, =]
[;, NameReferenceGraphConstruction, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., graph, =, new, NameReferenceGraph, (]
[=, compiler, ;, this, ., graph, =, new, NameReferenceGraph, (, compiler, ), ;, }, NameReferenceGraph, getNameReferenceGraph, (, ), {, return]
[=, compiler, ;, this, ., graph, =, new, NameReferenceGraph, (, compiler, ), ;, }, NameReferenceGraph, getNameReferenceGraph, (, ), {, return]
[., graph, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ScopeCreator, scopeCreator, =]
[., graph, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ScopeCreator, scopeCreator, =]
[process, (, Node, externs, ,, Node, root, ), {, ScopeCreator, scopeCreator, =, compiler, ., getTypedScopeCreator, (, ), ;, if, (]
[process, (, Node, externs, ,, Node, root, ), {, ScopeCreator, scopeCreator, =, compiler, ., getTypedScopeCreator, (, ), ;, if, (]
[Node, externs, ,, Node, root, ), {, ScopeCreator, scopeCreator, =, compiler, ., getTypedScopeCreator, (, ), ;, if, (, scopeCreator, ==]
[Node, root, ), {, ScopeCreator, scopeCreator, =, compiler, ., getTypedScopeCreator, (, ), ;, if, (, scopeCreator, ==, null, ), {]
[), {, ScopeCreator, scopeCreator, =, compiler, ., getTypedScopeCreator, (, ), ;, if, (, scopeCreator, ==, null, ), {, scopeCreator, =]
[scopeCreator, =, compiler, ., getTypedScopeCreator, (, ), ;, if, (, scopeCreator, ==, null, ), {, scopeCreator, =, new, MemoizedScopeCreator, (]
[., getTypedScopeCreator, (, ), ;, if, (, scopeCreator, ==, null, ), {, scopeCreator, =, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (]
[==, null, ), {, scopeCreator, =, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (, compiler, ), ), ;, }, NodeTraversal, externsTraversal, =]
[{, scopeCreator, =, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (, compiler, ), ), ;, }, NodeTraversal, externsTraversal, =, new, NodeTraversal, (]
[=, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (, compiler, ), ), ;, }, NodeTraversal, externsTraversal, =, new, NodeTraversal, (, compiler, ,]
[(, new, TypedScopeCreator, (, compiler, ), ), ;, }, NodeTraversal, externsTraversal, =, new, NodeTraversal, (, compiler, ,, new, Traversal, (]
[(, compiler, ), ), ;, }, NodeTraversal, externsTraversal, =, new, NodeTraversal, (, compiler, ,, new, Traversal, (, true, ), ,]
[NodeTraversal, externsTraversal, =, new, NodeTraversal, (, compiler, ,, new, Traversal, (, true, ), ,, scopeCreator, ), ;, NodeTraversal, codeTraversal, =]
[new, NodeTraversal, (, compiler, ,, new, Traversal, (, true, ), ,, scopeCreator, ), ;, NodeTraversal, codeTraversal, =, new, NodeTraversal, (]
[(, compiler, ,, new, Traversal, (, true, ), ,, scopeCreator, ), ;, NodeTraversal, codeTraversal, =, new, NodeTraversal, (, compiler, ,]
[new, Traversal, (, true, ), ,, scopeCreator, ), ;, NodeTraversal, codeTraversal, =, new, NodeTraversal, (, compiler, ,, new, Traversal, (]
[true, ), ,, scopeCreator, ), ;, NodeTraversal, codeTraversal, =, new, NodeTraversal, (, compiler, ,, new, Traversal, (, false, ), ,]
[NodeTraversal, codeTraversal, =, new, NodeTraversal, (, compiler, ,, new, Traversal, (, false, ), ,, scopeCreator, ), ;, Scope, topScope, =]
[NodeTraversal, codeTraversal, =, new, NodeTraversal, (, compiler, ,, new, Traversal, (, false, ), ,, scopeCreator, ), ;, Scope, topScope, =]
[new, Traversal, (, false, ), ,, scopeCreator, ), ;, Scope, topScope, =, compiler, ., getTopScope, (, ), ;, if, (]
[new, Traversal, (, false, ), ,, scopeCreator, ), ;, Scope, topScope, =, compiler, ., getTopScope, (, ), ;, if, (]
[(, false, ), ,, scopeCreator, ), ;, Scope, topScope, =, compiler, ., getTopScope, (, ), ;, if, (, topScope, !=]
[,, scopeCreator, ), ;, Scope, topScope, =, compiler, ., getTopScope, (, ), ;, if, (, topScope, !=, null, ), {]
[,, scopeCreator, ), ;, Scope, topScope, =, compiler, ., getTopScope, (, ), ;, if, (, topScope, !=, null, ), {]
[Scope, topScope, =, compiler, ., getTopScope, (, ), ;, if, (, topScope, !=, null, ), {, externsTraversal, ., traverseWithScope, (]
[=, compiler, ., getTopScope, (, ), ;, if, (, topScope, !=, null, ), {, externsTraversal, ., traverseWithScope, (, externs, ,]
[getTopScope, (, ), ;, if, (, topScope, !=, null, ), {, externsTraversal, ., traverseWithScope, (, externs, ,, topScope, ), ;]
[getTopScope, (, ), ;, if, (, topScope, !=, null, ), {, externsTraversal, ., traverseWithScope, (, externs, ,, topScope, ), ;]
[if, (, topScope, !=, null, ), {, externsTraversal, ., traverseWithScope, (, externs, ,, topScope, ), ;, codeTraversal, ., traverseWithScope, (]
[topScope, !=, null, ), {, externsTraversal, ., traverseWithScope, (, externs, ,, topScope, ), ;, codeTraversal, ., traverseWithScope, (, root, ,]
[., traverseWithScope, (, externs, ,, topScope, ), ;, codeTraversal, ., traverseWithScope, (, root, ,, topScope, ), ;, }, else, {]
[., traverseWithScope, (, externs, ,, topScope, ), ;, codeTraversal, ., traverseWithScope, (, root, ,, topScope, ), ;, }, else, {]
[,, topScope, ), ;, codeTraversal, ., traverseWithScope, (, root, ,, topScope, ), ;, }, else, {, externsTraversal, ., traverse, (]
[;, codeTraversal, ., traverseWithScope, (, root, ,, topScope, ), ;, }, else, {, externsTraversal, ., traverse, (, externs, ), ;]
[;, codeTraversal, ., traverseWithScope, (, root, ,, topScope, ), ;, }, else, {, externsTraversal, ., traverse, (, externs, ), ;]
[(, root, ,, topScope, ), ;, }, else, {, externsTraversal, ., traverse, (, externs, ), ;, codeTraversal, ., traverse, (]
[), ;, }, else, {, externsTraversal, ., traverse, (, externs, ), ;, codeTraversal, ., traverse, (, root, ), ;, }]
[), ;, }, private, class, Traversal, implements, ScopedCallback, {, final, boolean, isExtern, ;, private, Traversal, (, boolean, isExtern, ), {]
[), ;, }, private, class, Traversal, implements, ScopedCallback, {, final, boolean, isExtern, ;, private, Traversal, (, boolean, isExtern, ), {]
[class, Traversal, implements, ScopedCallback, {, final, boolean, isExtern, ;, private, Traversal, (, boolean, isExtern, ), {, this, ., isExtern, =]
[implements, ScopedCallback, {, final, boolean, isExtern, ;, private, Traversal, (, boolean, isExtern, ), {, this, ., isExtern, =, isExtern, ;]
[{, final, boolean, isExtern, ;, private, Traversal, (, boolean, isExtern, ), {, this, ., isExtern, =, isExtern, ;, pushContainingFunction, (]
[{, final, boolean, isExtern, ;, private, Traversal, (, boolean, isExtern, ), {, this, ., isExtern, =, isExtern, ;, pushContainingFunction, (]
[(, graph, ., MAIN, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, root, =]
[(, graph, ., MAIN, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, root, =]
[public, void, enterScope, (, NodeTraversal, t, ), {, Node, root, =, t, ., getScopeRoot, (, ), ;, Node, parent, =]
[public, void, enterScope, (, NodeTraversal, t, ), {, Node, root, =, t, ., getScopeRoot, (, ), ;, Node, parent, =]
[Node, root, =, t, ., getScopeRoot, (, ), ;, Node, parent, =, root, ., getParent, (, ), ;, if, (]
[root, =, t, ., getScopeRoot, (, ), ;, Node, parent, =, root, ., getParent, (, ), ;, if, (, !]
[root, =, t, ., getScopeRoot, (, ), ;, Node, parent, =, root, ., getParent, (, ), ;, if, (, !]
[=, root, ., getParent, (, ), ;, if, (, !, t, ., inGlobalScope, (, ), ), {, String, name, =]
[=, root, ., getParent, (, ), ;, if, (, !, t, ., inGlobalScope, (, ), ), {, String, name, =]
[(, ), ;, if, (, !, t, ., inGlobalScope, (, ), ), {, String, name, =, NodeUtil, ., getFunctionName, (]
[!, t, ., inGlobalScope, (, ), ), {, String, name, =, NodeUtil, ., getFunctionName, (, root, ), ;, if, (]
[!, t, ., inGlobalScope, (, ), ), {, String, name, =, NodeUtil, ., getFunctionName, (, root, ), ;, if, (]
[., inGlobalScope, (, ), ), {, String, name, =, NodeUtil, ., getFunctionName, (, root, ), ;, if, (, name, ==]
[), ), {, String, name, =, NodeUtil, ., getFunctionName, (, root, ), ;, if, (, name, ==, null, ), {]
[{, String, name, =, NodeUtil, ., getFunctionName, (, root, ), ;, if, (, name, ==, null, ), {, pushContainingFunction, (]
[{, String, name, =, NodeUtil, ., getFunctionName, (, root, ), ;, if, (, name, ==, null, ), {, pushContainingFunction, (]
[if, (, name, ==, null, ), {, pushContainingFunction, (, graph, ., UNKNOWN, ), ;, return, ;, }, JSType, type, =]
[name, ==, null, ), {, pushContainingFunction, (, graph, ., UNKNOWN, ), ;, return, ;, }, JSType, type, =, getType, (]
[(, graph, ., UNKNOWN, ), ;, return, ;, }, JSType, type, =, getType, (, root, ), ;, Node, gParent, =]
[(, graph, ., UNKNOWN, ), ;, return, ;, }, JSType, type, =, getType, (, root, ), ;, Node, gParent, =]
[JSType, type, =, getType, (, root, ), ;, Node, gParent, =, parent, ., getParent, (, ), ;, Node, ggParent, =]
[JSType, type, =, getType, (, root, ), ;, Node, gParent, =, parent, ., getParent, (, ), ;, Node, ggParent, =]
[Node, gParent, =, parent, ., getParent, (, ), ;, Node, ggParent, =, gParent, ., getParent, (, ), ;, if, (]
[Node, gParent, =, parent, ., getParent, (, ), ;, Node, ggParent, =, gParent, ., getParent, (, ), ;, if, (]
[Node, gParent, =, parent, ., getParent, (, ), ;, Node, ggParent, =, gParent, ., getParent, (, ), ;, if, (]
[(, ), ;, Node, ggParent, =, gParent, ., getParent, (, ), ;, if, (, parent, ., isAssign, (, ), &&]
[(, ), ;, Node, ggParent, =, gParent, ., getParent, (, ), ;, if, (, parent, ., isAssign, (, ), &&]
[ggParent, =, gParent, ., getParent, (, ), ;, if, (, parent, ., isAssign, (, ), &&, NodeUtil, ., isPrototypeProperty, (]
[ggParent, =, gParent, ., getParent, (, ), ;, if, (, parent, ., isAssign, (, ), &&, NodeUtil, ., isPrototypeProperty, (]
[if, (, parent, ., isAssign, (, ), &&, NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild, (, ), ), ), {]
[parent, ., isAssign, (, ), &&, NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild, (, ), ), ), {, pushContainingFunction, (]
[isAssign, (, ), &&, NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild, (, ), ), ), {, pushContainingFunction, (, recordPrototypePropDefinition, (]
[), &&, NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild, (, ), ), ), {, pushContainingFunction, (, recordPrototypePropDefinition, (, t, ,]
[), &&, NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild, (, ), ), ), {, pushContainingFunction, (, recordPrototypePropDefinition, (, t, ,]
[parent, ., getFirstChild, (, ), ), ), {, pushContainingFunction, (, recordPrototypePropDefinition, (, t, ,, parent, ., getFirstChild, (, ), ,]
[getFirstChild, (, ), ), ), {, pushContainingFunction, (, recordPrototypePropDefinition, (, t, ,, parent, ., getFirstChild, (, ), ,, type, ,]
[), ), ), {, pushContainingFunction, (, recordPrototypePropDefinition, (, t, ,, parent, ., getFirstChild, (, ), ,, type, ,, parent, ,]
[), {, pushContainingFunction, (, recordPrototypePropDefinition, (, t, ,, parent, ., getFirstChild, (, ), ,, type, ,, parent, ,, gParent, ,]
[,, parent, ., getFirstChild, (, ), ,, type, ,, parent, ,, gParent, ,, ggParent, ), ), ;, }, else, {]
[., getFirstChild, (, ), ,, type, ,, parent, ,, gParent, ,, ggParent, ), ), ;, }, else, {, pushContainingFunction, (]
[(, ), ,, type, ,, parent, ,, gParent, ,, ggParent, ), ), ;, }, else, {, pushContainingFunction, (, recordStaticNameDefinition, (]
[,, type, ,, parent, ,, gParent, ,, ggParent, ), ), ;, }, else, {, pushContainingFunction, (, recordStaticNameDefinition, (, t, ,]
[,, parent, ,, gParent, ,, ggParent, ), ), ;, }, else, {, pushContainingFunction, (, recordStaticNameDefinition, (, t, ,, name, ,]
[,, gParent, ,, ggParent, ), ), ;, }, else, {, pushContainingFunction, (, recordStaticNameDefinition, (, t, ,, name, ,, type, ,]
[,, ggParent, ), ), ;, }, else, {, pushContainingFunction, (, recordStaticNameDefinition, (, t, ,, name, ,, type, ,, root, ,]
[), ), ;, }, else, {, pushContainingFunction, (, recordStaticNameDefinition, (, t, ,, name, ,, type, ,, root, ,, parent, ,]
[;, }, else, {, pushContainingFunction, (, recordStaticNameDefinition, (, t, ,, name, ,, type, ,, root, ,, parent, ,, gParent, ,]
[;, }, else, {, pushContainingFunction, (, recordStaticNameDefinition, (, t, ,, name, ,, type, ,, root, ,, parent, ,, gParent, ,]
[(, ), ), ), ;, }, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (]
[), ), ), ;, }, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, !]
[), ), ), ;, }, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, !]
[@, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, !, t, ., inGlobalScope, (, ), ), {]
[;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return]
[@, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return, true, ;, }]
[boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return, true, ;, }, @, SuppressWarnings, (]
["fallthrough", ), @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
["fallthrough", ), @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, case]
[,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, case]
[(, n, ., getType, (, ), ), {, case, Token, ., NAME, :, case, Token, ., GETPROP, :, if, (]
[(, n, ., getType, (, ), ), {, case, Token, ., NAME, :, case, Token, ., GETPROP, :, if, (]
[case, Token, ., GETPROP, :, if, (, parent, ., isGetProp, (, ), ), {, return, ;, }, else, if, (]
[case, Token, ., GETPROP, :, if, (, parent, ., isGetProp, (, ), ), {, return, ;, }, else, if, (]
[{, return, ;, }, else, if, (, parent, ., isFunction, (, ), ), {, return, ;, }, else, if, (]
[{, return, ;, }, else, if, (, parent, ., isFunction, (, ), ), {, return, ;, }, else, if, (]
[), {, return, ;, }, else, if, (, parent, ., isAssign, (, ), ), {, return, ;, }, if, (]
[return, ;, }, else, if, (, parent, ., isAssign, (, ), ), {, return, ;, }, if, (, isLocalNameReference, (]
[}, else, if, (, parent, ., isAssign, (, ), ), {, return, ;, }, if, (, isLocalNameReference, (, t, ,]
[), {, return, ;, }, if, (, isLocalNameReference, (, t, ,, n, ), ), {, return, ;, }, if, (]
[return, ;, }, if, (, isLocalNameReference, (, t, ,, n, ), ), {, return, ;, }, if, (, isPrototypeNameReference, (]
[(, isLocalNameReference, (, t, ,, n, ), ), {, return, ;, }, if, (, isPrototypeNameReference, (, n, ), ), {]
[(, t, ,, n, ), ), {, return, ;, }, if, (, isPrototypeNameReference, (, n, ), ), {, recordPrototypePropUse, (]
[,, n, ), ), {, return, ;, }, if, (, isPrototypeNameReference, (, n, ), ), {, recordPrototypePropUse, (, t, ,]
[), ), {, return, ;, }, if, (, isPrototypeNameReference, (, n, ), ), {, recordPrototypePropUse, (, t, ,, n, ,]
[(, isPrototypeNameReference, (, n, ), ), {, recordPrototypePropUse, (, t, ,, n, ,, parent, ), ;, }, else, if, (]
[(, n, ), ), {, recordPrototypePropUse, (, t, ,, n, ,, parent, ), ;, }, else, if, (, isStaticNameReference, (]
[), ), {, recordPrototypePropUse, (, t, ,, n, ,, parent, ), ;, }, else, if, (, isStaticNameReference, (, n, ,]
[), ), {, recordPrototypePropUse, (, t, ,, n, ,, parent, ), ;, }, else, if, (, isStaticNameReference, (, n, ,]
[,, parent, ), ;, }, else, if, (, isStaticNameReference, (, n, ,, t, ., getScope, (, ), ), ), {]
[), ;, }, else, if, (, isStaticNameReference, (, n, ,, t, ., getScope, (, ), ), ), {, recordStaticNameUse, (]
[}, else, if, (, isStaticNameReference, (, n, ,, t, ., getScope, (, ), ), ), {, recordStaticNameUse, (, t, ,]
[if, (, isStaticNameReference, (, n, ,, t, ., getScope, (, ), ), ), {, recordStaticNameUse, (, t, ,, n, ,]
[t, ., getScope, (, ), ), ), {, recordStaticNameUse, (, t, ,, n, ,, parent, ), ;, }, else, {]
[getScope, (, ), ), ), {, recordStaticNameUse, (, t, ,, n, ,, parent, ), ;, }, else, {, recordUnknownUse, (]
[), ), ), {, recordStaticNameUse, (, t, ,, n, ,, parent, ), ;, }, else, {, recordUnknownUse, (, t, ,]
[), {, recordStaticNameUse, (, t, ,, n, ,, parent, ), ;, }, else, {, recordUnknownUse, (, t, ,, n, ,]
[,, parent, ), ;, }, else, {, recordUnknownUse, (, t, ,, n, ,, parent, ), ;, }, break, ;, case]
[,, parent, ), ;, }, else, {, recordUnknownUse, (, t, ,, n, ,, parent, ), ;, }, break, ;, case]
[recordUnknownUse, (, t, ,, n, ,, parent, ), ;, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =]
[recordUnknownUse, (, t, ,, n, ,, parent, ), ;, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =]
[}, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =]
[}, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =]
[Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, n, ., getLastChild, (, ), ;, if, (]
[Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, n, ., getLastChild, (, ), ;, if, (]
[n, ., getLastChild, (, ), ;, if, (, rhs, ., isFunction, (, ), ), {, return, ;, }, if, (]
[n, ., getLastChild, (, ), ;, if, (, rhs, ., isFunction, (, ), ), {, return, ;, }, if, (]
[n, ., getLastChild, (, ), ;, if, (, rhs, ., isFunction, (, ), ), {, return, ;, }, if, (]
[n, ., getLastChild, (, ), ;, if, (, rhs, ., isFunction, (, ), ), {, return, ;, }, if, (]
[if, (, rhs, ., isFunction, (, ), ), {, return, ;, }, if, (, lhs, ., isName, (, ), ||]
[if, (, rhs, ., isFunction, (, ), ), {, return, ;, }, if, (, lhs, ., isName, (, ), ||]
[), ), {, return, ;, }, if, (, lhs, ., isName, (, ), ||, lhs, ., isGetProp, (, ), ||]
[), ), {, return, ;, }, if, (, lhs, ., isName, (, ), ||, lhs, ., isGetProp, (, ), ||]
[., isName, (, ), ||, lhs, ., isGetProp, (, ), ||, rhs, ., isGetProp, (, ), ), {, if, (]
[., isName, (, ), ||, lhs, ., isGetProp, (, ), ||, rhs, ., isGetProp, (, ), ), {, if, (]
[||, lhs, ., isGetProp, (, ), ||, rhs, ., isGetProp, (, ), ), {, if, (, NodeUtil, ., isPrototypeProperty, (]
[rhs, ., isGetProp, (, ), ), {, if, (, NodeUtil, ., isPrototypeProperty, (, lhs, ), ), {, Name, name, =]
[isGetProp, (, ), ), {, if, (, NodeUtil, ., isPrototypeProperty, (, lhs, ), ), {, Name, name, =, recordPrototypePropDefinition, (]
[), ), {, if, (, NodeUtil, ., isPrototypeProperty, (, lhs, ), ), {, Name, name, =, recordPrototypePropDefinition, (, t, ,]
[{, if, (, NodeUtil, ., isPrototypeProperty, (, lhs, ), ), {, Name, name, =, recordPrototypePropDefinition, (, t, ,, lhs, ,]
[(, NodeUtil, ., isPrototypeProperty, (, lhs, ), ), {, Name, name, =, recordPrototypePropDefinition, (, t, ,, lhs, ,, getType, (]
[isPrototypeProperty, (, lhs, ), ), {, Name, name, =, recordPrototypePropDefinition, (, t, ,, lhs, ,, getType, (, rhs, ), ,]
[lhs, ), ), {, Name, name, =, recordPrototypePropDefinition, (, t, ,, lhs, ,, getType, (, rhs, ), ,, n, ,]
[), {, Name, name, =, recordPrototypePropDefinition, (, t, ,, lhs, ,, getType, (, rhs, ), ,, n, ,, parent, ,]
[), {, Name, name, =, recordPrototypePropDefinition, (, t, ,, lhs, ,, getType, (, rhs, ), ,, n, ,, parent, ,]
[t, ,, lhs, ,, getType, (, rhs, ), ,, n, ,, parent, ,, parent, ., getParent, (, ), ), ;]
[t, ,, lhs, ,, getType, (, rhs, ), ,, n, ,, parent, ,, parent, ., getParent, (, ), ), ;]
[getType, (, rhs, ), ,, n, ,, parent, ,, parent, ., getParent, (, ), ), ;, name, ., setAliased, (]
[n, ,, parent, ,, parent, ., getParent, (, ), ), ;, name, ., setAliased, (, true, ), ;, }, }]
[parent, ,, parent, ., getParent, (, ), ), ;, name, ., setAliased, (, true, ), ;, }, }, maybeAliasNamesOnAssign, (]
[parent, ., getParent, (, ), ), ;, name, ., setAliased, (, true, ), ;, }, }, maybeAliasNamesOnAssign, (, lhs, ,]
[;, name, ., setAliased, (, true, ), ;, }, }, maybeAliasNamesOnAssign, (, lhs, ,, rhs, ), ;, break, ;, case]
[;, name, ., setAliased, (, true, ), ;, }, }, maybeAliasNamesOnAssign, (, lhs, ,, rhs, ), ;, break, ;, case]
[;, }, }, maybeAliasNamesOnAssign, (, lhs, ,, rhs, ), ;, break, ;, case, Token, ., VAR, :, Node, varName, =]
[;, }, }, maybeAliasNamesOnAssign, (, lhs, ,, rhs, ), ;, break, ;, case, Token, ., VAR, :, Node, varName, =]
[;, break, ;, case, Token, ., VAR, :, Node, varName, =, n, ., getFirstChild, (, ), ;, Node, assignedValue, =]
[;, break, ;, case, Token, ., VAR, :, Node, varName, =, n, ., getFirstChild, (, ), ;, Node, assignedValue, =]
[Node, varName, =, n, ., getFirstChild, (, ), ;, Node, assignedValue, =, varName, ., getFirstChild, (, ), ;, if, (]
[Node, varName, =, n, ., getFirstChild, (, ), ;, Node, assignedValue, =, varName, ., getFirstChild, (, ), ;, if, (]
[=, n, ., getFirstChild, (, ), ;, Node, assignedValue, =, varName, ., getFirstChild, (, ), ;, if, (, assignedValue, ==]
[;, Node, assignedValue, =, varName, ., getFirstChild, (, ), ;, if, (, assignedValue, ==, null, ), {, return, ;, }]
[assignedValue, =, varName, ., getFirstChild, (, ), ;, if, (, assignedValue, ==, null, ), {, return, ;, }, maybeAliasNamesOnAssign, (]
[varName, ., getFirstChild, (, ), ;, if, (, assignedValue, ==, null, ), {, return, ;, }, maybeAliasNamesOnAssign, (, varName, ,]
[if, (, assignedValue, ==, null, ), {, return, ;, }, maybeAliasNamesOnAssign, (, varName, ,, assignedValue, ), ;, break, ;, case]
[if, (, assignedValue, ==, null, ), {, return, ;, }, maybeAliasNamesOnAssign, (, varName, ,, assignedValue, ), ;, break, ;, case]
[return, ;, }, maybeAliasNamesOnAssign, (, varName, ,, assignedValue, ), ;, break, ;, case, Token, ., CALL, :, Node, param, =]
[return, ;, }, maybeAliasNamesOnAssign, (, varName, ,, assignedValue, ), ;, break, ;, case, Token, ., CALL, :, Node, param, =]
[), ;, break, ;, case, Token, ., CALL, :, Node, param, =, n, ., getFirstChild, (, ), ;, while, (]
[), ;, break, ;, case, Token, ., CALL, :, Node, param, =, n, ., getFirstChild, (, ), ;, while, (]
[;, break, ;, case, Token, ., CALL, :, Node, param, =, n, ., getFirstChild, (, ), ;, while, (, (]
[;, case, Token, ., CALL, :, Node, param, =, n, ., getFirstChild, (, ), ;, while, (, (, param, =]
[;, case, Token, ., CALL, :, Node, param, =, n, ., getFirstChild, (, ), ;, while, (, (, param, =]
[param, =, n, ., getFirstChild, (, ), ;, while, (, (, param, =, param, ., getNext, (, ), ), !=]
[(, ), ;, while, (, (, param, =, param, ., getNext, (, ), ), !=, null, ), {, if, (]
[(, ), ;, while, (, (, param, =, param, ., getNext, (, ), ), !=, null, ), {, if, (]
[(, ), ;, while, (, (, param, =, param, ., getNext, (, ), ), !=, null, ), {, if, (]
[param, =, param, ., getNext, (, ), ), !=, null, ), {, if, (, param, ., isName, (, ), ||]
[param, =, param, ., getNext, (, ), ), !=, null, ), {, if, (, param, ., isName, (, ), ||]
[), !=, null, ), {, if, (, param, ., isName, (, ), ||, param, ., isGetProp, (, ), ), {]
[null, ), {, if, (, param, ., isName, (, ), ||, param, ., isGetProp, (, ), ), {, safeAlias, (]
[param, ., isName, (, ), ||, param, ., isGetProp, (, ), ), {, safeAlias, (, param, ), ;, }, }]
[isName, (, ), ||, param, ., isGetProp, (, ), ), {, safeAlias, (, param, ), ;, }, }, maybeRecordExport, (]
[}, }, maybeRecordExport, (, n, ), ;, break, ;, }, }, private, boolean, containsName, (, Node, n, ), {, return]
[}, }, maybeRecordExport, (, n, ), ;, break, ;, }, }, private, boolean, containsName, (, Node, n, ), {, return]
[}, }, maybeRecordExport, (, n, ), ;, break, ;, }, }, private, boolean, containsName, (, Node, n, ), {, return]
[}, }, maybeRecordExport, (, n, ), ;, break, ;, }, }, private, boolean, containsName, (, Node, n, ), {, return]
[n, ), ;, break, ;, }, }, private, boolean, containsName, (, Node, n, ), {, return, NodeUtil, ., containsType, (]
[;, break, ;, }, }, private, boolean, containsName, (, Node, n, ), {, return, NodeUtil, ., containsType, (, n, ,]
[;, break, ;, }, }, private, boolean, containsName, (, Node, n, ), {, return, NodeUtil, ., containsType, (, n, ,]
[private, boolean, containsName, (, Node, n, ), {, return, NodeUtil, ., containsType, (, n, ,, Token, ., NAME, ), ||]
[private, boolean, containsName, (, Node, n, ), {, return, NodeUtil, ., containsType, (, n, ,, Token, ., NAME, ), ||]
[Node, n, ), {, return, NodeUtil, ., containsType, (, n, ,, Token, ., NAME, ), ||, NodeUtil, ., containsType, (]
[), {, return, NodeUtil, ., containsType, (, n, ,, Token, ., NAME, ), ||, NodeUtil, ., containsType, (, n, ,]
[), {, return, NodeUtil, ., containsType, (, n, ,, Token, ., NAME, ), ||, NodeUtil, ., containsType, (, n, ,]
[containsType, (, n, ,, Token, ., NAME, ), ||, NodeUtil, ., containsType, (, n, ,, Token, ., GETELEM, ), ||]
[containsType, (, n, ,, Token, ., NAME, ), ||, NodeUtil, ., containsType, (, n, ,, Token, ., GETELEM, ), ||]
[Token, ., NAME, ), ||, NodeUtil, ., containsType, (, n, ,, Token, ., GETELEM, ), ||, NodeUtil, ., containsType, (]
[NAME, ), ||, NodeUtil, ., containsType, (, n, ,, Token, ., GETELEM, ), ||, NodeUtil, ., containsType, (, n, ,]
[NAME, ), ||, NodeUtil, ., containsType, (, n, ,, Token, ., GETELEM, ), ||, NodeUtil, ., containsType, (, n, ,]
[containsType, (, n, ,, Token, ., GETPROP, ), ;, }, private, void, safeAlias, (, Node, n, ), {, if, (]
[containsType, (, n, ,, Token, ., GETPROP, ), ;, }, private, void, safeAlias, (, Node, n, ), {, if, (]
[containsType, (, n, ,, Token, ., GETPROP, ), ;, }, private, void, safeAlias, (, Node, n, ), {, if, (]
[GETPROP, ), ;, }, private, void, safeAlias, (, Node, n, ), {, if, (, n, ., isName, (, ), ||]
[GETPROP, ), ;, }, private, void, safeAlias, (, Node, n, ), {, if, (, n, ., isName, (, ), ||]
[), {, if, (, n, ., isName, (, ), ||, n, ., isGetProp, (, ), ), {, String, name, =]
[), {, if, (, n, ., isName, (, ), ||, n, ., isGetProp, (, ), ), {, String, name, =]
[), ||, n, ., isGetProp, (, ), ), {, String, name, =, n, ., getQualifiedName, (, ), ;, if, (]
[), ||, n, ., isGetProp, (, ), ), {, String, name, =, n, ., getQualifiedName, (, ), ;, if, (]
[n, ., isGetProp, (, ), ), {, String, name, =, n, ., getQualifiedName, (, ), ;, if, (, name, !=]
[(, ), ), {, String, name, =, n, ., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {]
[), {, String, name, =, n, ., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, defineAndAlias, (]
[), ;, if, (, name, !=, null, ), {, defineAndAlias, (, name, ), ;, return, ;, }, }, if, (]
[), ;, if, (, name, !=, null, ), {, defineAndAlias, (, name, ), ;, return, ;, }, }, if, (]
[), {, defineAndAlias, (, name, ), ;, return, ;, }, }, if, (, n, ., isGetProp, (, ), ), {]
[defineAndAlias, (, name, ), ;, return, ;, }, }, if, (, n, ., isGetProp, (, ), ), {, defineAndAlias, (]
[defineAndAlias, (, name, ), ;, return, ;, }, }, if, (, n, ., isGetProp, (, ), ), {, defineAndAlias, (]
[defineAndAlias, (, name, ), ;, return, ;, }, }, if, (, n, ., isGetProp, (, ), ), {, defineAndAlias, (]
[), ), {, defineAndAlias, (, n, ., getLastChild, (, ), ., getString, (, ), ), ;, }, else, if, (]
[), ), {, defineAndAlias, (, n, ., getLastChild, (, ), ., getString, (, ), ), ;, }, else, if, (]
[getLastChild, (, ), ., getString, (, ), ), ;, }, else, if, (, n, ., isAssign, (, ), ), {]
[), ., getString, (, ), ), ;, }, else, if, (, n, ., isAssign, (, ), ), {, safeAlias, (]
[), ., getString, (, ), ), ;, }, else, if, (, n, ., isAssign, (, ), ), {, safeAlias, (]
[n, ., isAssign, (, ), ), {, safeAlias, (, n, ., getFirstChild, (, ), ), ;, }, else, if, (]
[n, ., isAssign, (, ), ), {, safeAlias, (, n, ., getFirstChild, (, ), ), ;, }, else, if, (]
[., getFirstChild, (, ), ), ;, }, else, if, (, n, ., hasChildren, (, ), ), {, Node, cur, =]
[., getFirstChild, (, ), ), ;, }, else, if, (, n, ., hasChildren, (, ), ), {, Node, cur, =]
[if, (, n, ., hasChildren, (, ), ), {, Node, cur, =, n, ., getFirstChild, (, ), ;, do, {]
[n, ., hasChildren, (, ), ), {, Node, cur, =, n, ., getFirstChild, (, ), ;, do, {, safeAlias, (]
[{, Node, cur, =, n, ., getFirstChild, (, ), ;, do, {, safeAlias, (, cur, ), ;, }, while, (]
[{, Node, cur, =, n, ., getFirstChild, (, ), ;, do, {, safeAlias, (, cur, ), ;, }, while, (]
[Node, cur, =, n, ., getFirstChild, (, ), ;, do, {, safeAlias, (, cur, ), ;, }, while, (, (]
[=, n, ., getFirstChild, (, ), ;, do, {, safeAlias, (, cur, ), ;, }, while, (, (, cur, =]
[=, n, ., getFirstChild, (, ), ;, do, {, safeAlias, (, cur, ), ;, }, while, (, (, cur, =]
[do, {, safeAlias, (, cur, ), ;, }, while, (, (, cur, =, cur, ., getNext, (, ), ), !=]
[), ;, }, else, {, }, }, private, void, maybeAliasNamesOnAssign, (, Node, lhs, ,, Node, rhs, ), {, if, (]
[), ;, }, else, {, }, }, private, void, maybeAliasNamesOnAssign, (, Node, lhs, ,, Node, rhs, ), {, if, (]
[), ;, }, else, {, }, }, private, void, maybeAliasNamesOnAssign, (, Node, lhs, ,, Node, rhs, ), {, if, (]
[), ;, }, else, {, }, }, private, void, maybeAliasNamesOnAssign, (, Node, lhs, ,, Node, rhs, ), {, if, (]
[;, }, else, {, }, }, private, void, maybeAliasNamesOnAssign, (, Node, lhs, ,, Node, rhs, ), {, if, (, (]
[;, }, else, {, }, }, private, void, maybeAliasNamesOnAssign, (, Node, lhs, ,, Node, rhs, ), {, if, (, (]
[;, }, else, {, }, }, private, void, maybeAliasNamesOnAssign, (, Node, lhs, ,, Node, rhs, ), {, if, (, (]
[private, void, maybeAliasNamesOnAssign, (, Node, lhs, ,, Node, rhs, ), {, if, (, (, lhs, ., isName, (, ), ||]
[private, void, maybeAliasNamesOnAssign, (, Node, lhs, ,, Node, rhs, ), {, if, (, (, lhs, ., isName, (, ), ||]
[Node, rhs, ), {, if, (, (, lhs, ., isName, (, ), ||, lhs, ., isGetProp, (, ), ), &&]
[), {, if, (, (, lhs, ., isName, (, ), ||, lhs, ., isGetProp, (, ), ), &&, containsName, (]
[(, (, lhs, ., isName, (, ), ||, lhs, ., isGetProp, (, ), ), &&, containsName, (, rhs, ), &&]
[(, lhs, ., isName, (, ), ||, lhs, ., isGetProp, (, ), ), &&, containsName, (, rhs, ), &&, !]
[(, lhs, ., isName, (, ), ||, lhs, ., isGetProp, (, ), ), &&, containsName, (, rhs, ), &&, !]
[||, lhs, ., isGetProp, (, ), ), &&, containsName, (, rhs, ), &&, !, rhs, ., isFunction, (, ), &&]
[lhs, ., isGetProp, (, ), ), &&, containsName, (, rhs, ), &&, !, rhs, ., isFunction, (, ), &&, !]
[lhs, ., isGetProp, (, ), ), &&, containsName, (, rhs, ), &&, !, rhs, ., isFunction, (, ), &&, !]
[containsName, (, rhs, ), &&, !, rhs, ., isFunction, (, ), &&, !, rhs, ., isNew, (, ), ), {]
[rhs, ), &&, !, rhs, ., isFunction, (, ), &&, !, rhs, ., isNew, (, ), ), {, safeAlias, (]
[!, rhs, ., isFunction, (, ), &&, !, rhs, ., isNew, (, ), ), {, safeAlias, (, lhs, ), ;]
[., isFunction, (, ), &&, !, rhs, ., isNew, (, ), ), {, safeAlias, (, lhs, ), ;, safeAlias, (]
[safeAlias, (, lhs, ), ;, safeAlias, (, rhs, ), ;, }, }, private, void, defineAndAlias, (, String, name, ), {]
[safeAlias, (, lhs, ), ;, safeAlias, (, rhs, ), ;, }, }, private, void, defineAndAlias, (, String, name, ), {]
[safeAlias, (, lhs, ), ;, safeAlias, (, rhs, ), ;, }, }, private, void, defineAndAlias, (, String, name, ), {]
[;, safeAlias, (, rhs, ), ;, }, }, private, void, defineAndAlias, (, String, name, ), {, graph, ., defineNameIfNotExists, (]
[(, rhs, ), ;, }, }, private, void, defineAndAlias, (, String, name, ), {, graph, ., defineNameIfNotExists, (, name, ,]
[}, private, void, defineAndAlias, (, String, name, ), {, graph, ., defineNameIfNotExists, (, name, ,, isExtern, ), ., setAliased, (]
[(, name, ,, isExtern, ), ., setAliased, (, true, ), ;, }, private, void, maybeRecordExport, (, Node, call, ), {]
[(, name, ,, isExtern, ), ., setAliased, (, true, ), ;, }, private, void, maybeRecordExport, (, Node, call, ), {]
[), ., setAliased, (, true, ), ;, }, private, void, maybeRecordExport, (, Node, call, ), {, Preconditions, ., checkArgument, (]
[), ., setAliased, (, true, ), ;, }, private, void, maybeRecordExport, (, Node, call, ), {, Preconditions, ., checkArgument, (]
[maybeRecordExport, (, Node, call, ), {, Preconditions, ., checkArgument, (, call, ., isCall, (, ), ), ;, Node, getProp, =]
[maybeRecordExport, (, Node, call, ), {, Preconditions, ., checkArgument, (, call, ., isCall, (, ), ), ;, Node, getProp, =]
[checkArgument, (, call, ., isCall, (, ), ), ;, Node, getProp, =, call, ., getFirstChild, (, ), ;, if, (]
[(, call, ., isCall, (, ), ), ;, Node, getProp, =, call, ., getFirstChild, (, ), ;, if, (, !]
[(, call, ., isCall, (, ), ), ;, Node, getProp, =, call, ., getFirstChild, (, ), ;, if, (, !]
[getFirstChild, (, ), ;, if, (, !, getProp, ., isGetProp, (, ), ), {, return, ;, }, String, propQName, =]
[getFirstChild, (, ), ;, if, (, !, getProp, ., isGetProp, (, ), ), {, return, ;, }, String, propQName, =]
[., isGetProp, (, ), ), {, return, ;, }, String, propQName, =, getProp, ., getQualifiedName, (, ), ;, if, (]
[., isGetProp, (, ), ), {, return, ;, }, String, propQName, =, getProp, ., getQualifiedName, (, ), ;, if, (]
[(, ), ), {, return, ;, }, String, propQName, =, getProp, ., getQualifiedName, (, ), ;, if, (, propQName, ==]
[propQName, =, getProp, ., getQualifiedName, (, ), ;, if, (, propQName, ==, null, ), {, return, ;, }, if, (]
[propQName, =, getProp, ., getQualifiedName, (, ), ;, if, (, propQName, ==, null, ), {, return, ;, }, if, (]
[propQName, =, getProp, ., getQualifiedName, (, ), ;, if, (, propQName, ==, null, ), {, return, ;, }, if, (]
[getQualifiedName, (, ), ;, if, (, propQName, ==, null, ), {, return, ;, }, if, (, propQName, ., endsWith, (]
[;, if, (, propQName, ==, null, ), {, return, ;, }, if, (, propQName, ., endsWith, (, ".call", ), ||]
[;, if, (, propQName, ==, null, ), {, return, ;, }, if, (, propQName, ., endsWith, (, ".call", ), ||]
[==, null, ), {, return, ;, }, if, (, propQName, ., endsWith, (, ".call", ), ||, propQName, ., endsWith, (]
[return, ;, }, if, (, propQName, ., endsWith, (, ".call", ), ||, propQName, ., endsWith, (, ".apply", ), ), {]
[return, ;, }, if, (, propQName, ., endsWith, (, ".call", ), ||, propQName, ., endsWith, (, ".apply", ), ), {]
[return, ;, }, if, (, propQName, ., endsWith, (, ".call", ), ||, propQName, ., endsWith, (, ".apply", ), ), {]
[(, propQName, ., endsWith, (, ".call", ), ||, propQName, ., endsWith, (, ".apply", ), ), {, graph, ., defineNameIfNotExists, (]
[(, propQName, ., endsWith, (, ".call", ), ||, propQName, ., endsWith, (, ".apply", ), ), {, graph, ., defineNameIfNotExists, (]
[(, propQName, ., endsWith, (, ".call", ), ||, propQName, ., endsWith, (, ".apply", ), ), {, graph, ., defineNameIfNotExists, (]
[endsWith, (, ".apply", ), ), {, graph, ., defineNameIfNotExists, (, getProp, ., getFirstChild, (, ), ., getQualifiedName, (, ), ,]
[getProp, ., getFirstChild, (, ), ., getQualifiedName, (, ), ,, isExtern, ), ., markExposedToCallOrApply, (, ), ;, }, if, (]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ,, isExtern, ), ., markExposedToCallOrApply, (, ), ;, }, if, (, !]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ,, isExtern, ), ., markExposedToCallOrApply, (, ), ;, }, if, (, !]
[., getQualifiedName, (, ), ,, isExtern, ), ., markExposedToCallOrApply, (, ), ;, }, if, (, !, "goog.exportSymbol", ., equals, (]
[), ;, }, if, (, !, "goog.exportSymbol", ., equals, (, propQName, ), ), {, return, ;, }, Node, symbol, =]
[), ;, }, if, (, !, "goog.exportSymbol", ., equals, (, propQName, ), ), {, return, ;, }, Node, symbol, =]
[equals, (, propQName, ), ), {, return, ;, }, Node, symbol, =, getProp, ., getNext, (, ), ;, if, (]
[(, propQName, ), ), {, return, ;, }, Node, symbol, =, getProp, ., getNext, (, ), ;, if, (, !]
[(, propQName, ), ), {, return, ;, }, Node, symbol, =, getProp, ., getNext, (, ), ;, if, (, !]
[getNext, (, ), ;, if, (, !, symbol, ., isString, (, ), ), {, return, ;, }, Node, obj, =]
[getNext, (, ), ;, if, (, !, symbol, ., isString, (, ), ), {, return, ;, }, Node, obj, =]
[isString, (, ), ), {, return, ;, }, Node, obj, =, symbol, ., getNext, (, ), ;, String, qName, =]
[isString, (, ), ), {, return, ;, }, Node, obj, =, symbol, ., getNext, (, ), ;, String, qName, =]
[Node, obj, =, symbol, ., getNext, (, ), ;, String, qName, =, obj, ., getQualifiedName, (, ), ;, if, (]
[Node, obj, =, symbol, ., getNext, (, ), ;, String, qName, =, obj, ., getQualifiedName, (, ), ;, if, (]
[Node, obj, =, symbol, ., getNext, (, ), ;, String, qName, =, obj, ., getQualifiedName, (, ), ;, if, (]
[=, symbol, ., getNext, (, ), ;, String, qName, =, obj, ., getQualifiedName, (, ), ;, if, (, qName, ==]
[., getNext, (, ), ;, String, qName, =, obj, ., getQualifiedName, (, ), ;, if, (, qName, ==, null, ||]
[., getNext, (, ), ;, String, qName, =, obj, ., getQualifiedName, (, ), ;, if, (, qName, ==, null, ||]
[., getNext, (, ), ;, String, qName, =, obj, ., getQualifiedName, (, ), ;, if, (, qName, ==, null, ||]
[qName, =, obj, ., getQualifiedName, (, ), ;, if, (, qName, ==, null, ||, obj, ., getNext, (, ), !=]
[), ;, if, (, qName, ==, null, ||, obj, ., getNext, (, ), !=, null, ), {, return, ;, }]
[), ;, if, (, qName, ==, null, ||, obj, ., getNext, (, ), !=, null, ), {, return, ;, }]
[), ;, if, (, qName, ==, null, ||, obj, ., getNext, (, ), !=, null, ), {, return, ;, }]
[qName, ==, null, ||, obj, ., getNext, (, ), !=, null, ), {, return, ;, }, graph, ., defineNameIfNotExists, (]
[null, ||, obj, ., getNext, (, ), !=, null, ), {, return, ;, }, graph, ., defineNameIfNotExists, (, qName, ,]
[), ., markExported, (, ), ;, }, private, boolean, isLocalNameReference, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[), ., markExported, (, ), ;, }, private, boolean, isLocalNameReference, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[(, NodeTraversal, t, ,, Node, n, ), {, if, (, n, ., isName, (, ), ), {, Var, v, =]
[(, NodeTraversal, t, ,, Node, n, ), {, if, (, n, ., isName, (, ), ), {, Var, v, =]
[(, NodeTraversal, t, ,, Node, n, ), {, if, (, n, ., isName, (, ), ), {, Var, v, =]
[if, (, n, ., isName, (, ), ), {, Var, v, =, t, ., getScope, (, ), ., getVar, (]
[if, (, n, ., isName, (, ), ), {, Var, v, =, t, ., getScope, (, ), ., getVar, (]
[{, Var, v, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, return]
[{, Var, v, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, return]
[{, Var, v, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, return]
[v, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, return, v, !=]
[t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, return, v, !=, null, &&]
[t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, return, v, !=, null, &&]
[n, ., getString, (, ), ), ;, return, v, !=, null, &&, v, ., isLocal, (, ), ;, }, return]
[isLocal, (, ), ;, }, return, false, ;, }, private, boolean, isStaticNameReference, (, Node, n, ,, Scope, scope, ), {]
[isLocal, (, ), ;, }, return, false, ;, }, private, boolean, isStaticNameReference, (, Node, n, ,, Scope, scope, ), {]
[}, return, false, ;, }, private, boolean, isStaticNameReference, (, Node, n, ,, Scope, scope, ), {, Preconditions, ., checkArgument, (]
[}, return, false, ;, }, private, boolean, isStaticNameReference, (, Node, n, ,, Scope, scope, ), {, Preconditions, ., checkArgument, (]
[}, return, false, ;, }, private, boolean, isStaticNameReference, (, Node, n, ,, Scope, scope, ), {, Preconditions, ., checkArgument, (]
[boolean, isStaticNameReference, (, Node, n, ,, Scope, scope, ), {, Preconditions, ., checkArgument, (, n, ., isName, (, ), ||]
[boolean, isStaticNameReference, (, Node, n, ,, Scope, scope, ), {, Preconditions, ., checkArgument, (, n, ., isName, (, ), ||]
[{, Preconditions, ., checkArgument, (, n, ., isName, (, ), ||, n, ., isGetProp, (, ), ), ;, if, (]
[{, Preconditions, ., checkArgument, (, n, ., isName, (, ), ||, n, ., isGetProp, (, ), ), ;, if, (]
[(, ), ||, n, ., isGetProp, (, ), ), ;, if, (, n, ., isName, (, ), ), {, return]
[(, ), ), ;, if, (, n, ., isName, (, ), ), {, return, true, ;, }, String, qName, =]
[(, ), ), ;, if, (, n, ., isName, (, ), ), {, return, true, ;, }, String, qName, =]
[isName, (, ), ), {, return, true, ;, }, String, qName, =, n, ., getQualifiedName, (, ), ;, if, (]
[isName, (, ), ), {, return, true, ;, }, String, qName, =, n, ., getQualifiedName, (, ), ;, if, (]
[), ), {, return, true, ;, }, String, qName, =, n, ., getQualifiedName, (, ), ;, if, (, qName, ==]
[true, ;, }, String, qName, =, n, ., getQualifiedName, (, ), ;, if, (, qName, ==, null, ), {, return]
[qName, =, n, ., getQualifiedName, (, ), ;, if, (, qName, ==, null, ), {, return, false, ;, }, return]
[qName, =, n, ., getQualifiedName, (, ), ;, if, (, qName, ==, null, ), {, return, false, ;, }, return]
[getQualifiedName, (, ), ;, if, (, qName, ==, null, ), {, return, false, ;, }, return, scope, ., isDeclared, (]
[), ;, if, (, qName, ==, null, ), {, return, false, ;, }, return, scope, ., isDeclared, (, qName, ,]
[scope, ., isDeclared, (, qName, ,, true, ), ;, }, private, boolean, isPrototypeNameReference, (, Node, n, ), {, if, (]
[., isDeclared, (, qName, ,, true, ), ;, }, private, boolean, isPrototypeNameReference, (, Node, n, ), {, if, (, !]
[., isDeclared, (, qName, ,, true, ), ;, }, private, boolean, isPrototypeNameReference, (, Node, n, ), {, if, (, !]
[}, private, boolean, isPrototypeNameReference, (, Node, n, ), {, if, (, !, n, ., isGetProp, (, ), ), {, return]
[n, ), {, if, (, !, n, ., isGetProp, (, ), ), {, return, false, ;, }, JSType, type, =]
[{, if, (, !, n, ., isGetProp, (, ), ), {, return, false, ;, }, JSType, type, =, getType, (]
[{, if, (, !, n, ., isGetProp, (, ), ), {, return, false, ;, }, JSType, type, =, getType, (]
[), {, return, false, ;, }, JSType, type, =, getType, (, n, ., getFirstChild, (, ), ), ;, if, (]
[), {, return, false, ;, }, JSType, type, =, getType, (, n, ., getFirstChild, (, ), ), ;, if, (]
[), {, return, false, ;, }, JSType, type, =, getType, (, n, ., getFirstChild, (, ), ), ;, if, (]
[JSType, type, =, getType, (, n, ., getFirstChild, (, ), ), ;, if, (, type, ., isUnknownType, (, ), ||]
[JSType, type, =, getType, (, n, ., getFirstChild, (, ), ), ;, if, (, type, ., isUnknownType, (, ), ||]
[(, ), ), ;, if, (, type, ., isUnknownType, (, ), ||, type, ., isUnionType, (, ), ), {, return]
[if, (, type, ., isUnknownType, (, ), ||, type, ., isUnionType, (, ), ), {, return, false, ;, }, return]
[(, type, ., isUnknownType, (, ), ||, type, ., isUnionType, (, ), ), {, return, false, ;, }, return, (]
[(, type, ., isUnknownType, (, ), ||, type, ., isUnionType, (, ), ), {, return, false, ;, }, return, (]
[(, type, ., isUnknownType, (, ), ||, type, ., isUnionType, (, ), ), {, return, false, ;, }, return, (]
[||, type, ., isUnionType, (, ), ), {, return, false, ;, }, return, (, type, ., isInstanceType, (, ), ||]
[||, type, ., isUnionType, (, ), ), {, return, false, ;, }, return, (, type, ., isInstanceType, (, ), ||]
[||, type, ., isUnionType, (, ), ), {, return, false, ;, }, return, (, type, ., isInstanceType, (, ), ||]
[), {, return, false, ;, }, return, (, type, ., isInstanceType, (, ), ||, type, ., autoboxesTo, (, ), !=]
[name, ,, JSType, type, ,, Node, n, ,, Node, parent, ,, Node, gParent, ,, Node, rValue, ), {, if, (]
[name, ,, JSType, type, ,, Node, n, ,, Node, parent, ,, Node, gParent, ,, Node, rValue, ), {, if, (]
[,, Node, n, ,, Node, parent, ,, Node, gParent, ,, Node, rValue, ), {, if, (, getNamedContainingFunction, (, ), !=]
[,, Node, n, ,, Node, parent, ,, Node, gParent, ,, Node, rValue, ), {, if, (, getNamedContainingFunction, (, ), !=]
[gParent, ,, Node, rValue, ), {, if, (, getNamedContainingFunction, (, ), !=, graph, ., MAIN, ), {, }, if, (]
[gParent, ,, Node, rValue, ), {, if, (, getNamedContainingFunction, (, ), !=, graph, ., MAIN, ), {, }, if, (]
[getNamedContainingFunction, (, ), !=, graph, ., MAIN, ), {, }, if, (, type, ., isConstructor, (, ), ), {, return]
[), !=, graph, ., MAIN, ), {, }, if, (, type, ., isConstructor, (, ), ), {, return, recordClassConstructorOrInterface, (]
[graph, ., MAIN, ), {, }, if, (, type, ., isConstructor, (, ), ), {, return, recordClassConstructorOrInterface, (, name, ,]
[graph, ., MAIN, ), {, }, if, (, type, ., isConstructor, (, ), ), {, return, recordClassConstructorOrInterface, (, name, ,]
[if, (, type, ., isConstructor, (, ), ), {, return, recordClassConstructorOrInterface, (, name, ,, type, ., toMaybeFunctionType, (, ), ,]
[type, ., isConstructor, (, ), ), {, return, recordClassConstructorOrInterface, (, name, ,, type, ., toMaybeFunctionType, (, ), ,, n, ,]
[isConstructor, (, ), ), {, return, recordClassConstructorOrInterface, (, name, ,, type, ., toMaybeFunctionType, (, ), ,, n, ,, parent, ,]
[isConstructor, (, ), ), {, return, recordClassConstructorOrInterface, (, name, ,, type, ., toMaybeFunctionType, (, ), ,, n, ,, parent, ,]
[recordClassConstructorOrInterface, (, name, ,, type, ., toMaybeFunctionType, (, ), ,, n, ,, parent, ,, parent, ., getParent, (, ), ,]
[,, n, ,, parent, ,, parent, ., getParent, (, ), ,, rValue, ), ;, }, else, {, Name, symbol, =]
[,, n, ,, parent, ,, parent, ., getParent, (, ), ,, rValue, ), ;, }, else, {, Name, symbol, =]
[,, parent, ., getParent, (, ), ,, rValue, ), ;, }, else, {, Name, symbol, =, graph, ., defineNameIfNotExists, (]
[., getParent, (, ), ,, rValue, ), ;, }, else, {, Name, symbol, =, graph, ., defineNameIfNotExists, (, name, ,]
[), ,, rValue, ), ;, }, else, {, Name, symbol, =, graph, ., defineNameIfNotExists, (, name, ,, isExtern, ), ;]
[), ,, rValue, ), ;, }, else, {, Name, symbol, =, graph, ., defineNameIfNotExists, (, name, ,, isExtern, ), ;]
[;, }, else, {, Name, symbol, =, graph, ., defineNameIfNotExists, (, name, ,, isExtern, ), ;, symbol, ., setType, (]
[symbol, =, graph, ., defineNameIfNotExists, (, name, ,, isExtern, ), ;, symbol, ., setType, (, type, ), ;, if, (]
[symbol, =, graph, ., defineNameIfNotExists, (, name, ,, isExtern, ), ;, symbol, ., setType, (, type, ), ;, if, (]
[,, isExtern, ), ;, symbol, ., setType, (, type, ), ;, if, (, n, ., isAssign, (, ), ), {]
[,, isExtern, ), ;, symbol, ., setType, (, type, ), ;, if, (, n, ., isAssign, (, ), ), {]
[symbol, ., setType, (, type, ), ;, if, (, n, ., isAssign, (, ), ), {, symbol, ., addAssignmentDeclaration, (]
[;, if, (, n, ., isAssign, (, ), ), {, symbol, ., addAssignmentDeclaration, (, n, ), ;, }, else, {]
[;, if, (, n, ., isAssign, (, ), ), {, symbol, ., addAssignmentDeclaration, (, n, ), ;, }, else, {]
[., isAssign, (, ), ), {, symbol, ., addAssignmentDeclaration, (, n, ), ;, }, else, {, symbol, ., addFunctionDeclaration, (]
[{, symbol, ., addAssignmentDeclaration, (, n, ), ;, }, else, {, symbol, ., addFunctionDeclaration, (, n, ), ;, }, return]
[,, @, Nullable, Node, assign, ,, @, Nullable, Node, parent, ,, @, Nullable, Node, gParent, ), {, JSType, constructor, =]
[Nullable, Node, assign, ,, @, Nullable, Node, parent, ,, @, Nullable, Node, gParent, ), {, JSType, constructor, =, getType, (]
[Nullable, Node, assign, ,, @, Nullable, Node, parent, ,, @, Nullable, Node, gParent, ), {, JSType, constructor, =, getType, (]
[@, Nullable, Node, parent, ,, @, Nullable, Node, gParent, ), {, JSType, constructor, =, getType, (, NodeUtil, ., getPrototypeClassName, (]
[Node, gParent, ), {, JSType, constructor, =, getType, (, NodeUtil, ., getPrototypeClassName, (, qName, ), ), ;, FunctionType, classType, =]
[constructor, =, getType, (, NodeUtil, ., getPrototypeClassName, (, qName, ), ), ;, FunctionType, classType, =, null, ;, String, className, =]
[NodeUtil, ., getPrototypeClassName, (, qName, ), ), ;, FunctionType, classType, =, null, ;, String, className, =, null, ;, if, (]
[NodeUtil, ., getPrototypeClassName, (, qName, ), ), ;, FunctionType, classType, =, null, ;, String, className, =, null, ;, if, (]
[NodeUtil, ., getPrototypeClassName, (, qName, ), ), ;, FunctionType, classType, =, null, ;, String, className, =, null, ;, if, (]
[getPrototypeClassName, (, qName, ), ), ;, FunctionType, classType, =, null, ;, String, className, =, null, ;, if, (, constructor, !=]
[qName, ), ), ;, FunctionType, classType, =, null, ;, String, className, =, null, ;, if, (, constructor, !=, null, &&]
[qName, ), ), ;, FunctionType, classType, =, null, ;, String, className, =, null, ;, if, (, constructor, !=, null, &&]
[null, ;, String, className, =, null, ;, if, (, constructor, !=, null, &&, constructor, ., isConstructor, (, ), ), {]
[String, className, =, null, ;, if, (, constructor, !=, null, &&, constructor, ., isConstructor, (, ), ), {, classType, =]
[String, className, =, null, ;, if, (, constructor, !=, null, &&, constructor, ., isConstructor, (, ), ), {, classType, =]
[(, constructor, !=, null, &&, constructor, ., isConstructor, (, ), ), {, classType, =, constructor, ., toMaybeFunctionType, (, ), ;]
[!=, null, &&, constructor, ., isConstructor, (, ), ), {, classType, =, constructor, ., toMaybeFunctionType, (, ), ;, className, =]
[!=, null, &&, constructor, ., isConstructor, (, ), ), {, classType, =, constructor, ., toMaybeFunctionType, (, ), ;, className, =]
[{, classType, =, constructor, ., toMaybeFunctionType, (, ), ;, className, =, classType, ., getReferenceName, (, ), ;, }, else, {]
[=, constructor, ., toMaybeFunctionType, (, ), ;, className, =, classType, ., getReferenceName, (, ), ;, }, else, {, classType, =]
[=, constructor, ., toMaybeFunctionType, (, ), ;, className, =, classType, ., getReferenceName, (, ), ;, }, else, {, classType, =]
[=, constructor, ., toMaybeFunctionType, (, ), ;, className, =, classType, ., getReferenceName, (, ), ;, }, else, {, classType, =]
[=, classType, ., getReferenceName, (, ), ;, }, else, {, classType, =, compiler, ., getTypeRegistry, (, ), ., getNativeFunctionType, (]
[=, classType, ., getReferenceName, (, ), ;, }, else, {, classType, =, compiler, ., getTypeRegistry, (, ), ., getNativeFunctionType, (]
[), ;, }, else, {, classType, =, compiler, ., getTypeRegistry, (, ), ., getNativeFunctionType, (, JSTypeNative, ., U2U_CONSTRUCTOR_TYPE, ), ;]
[}, else, {, classType, =, compiler, ., getTypeRegistry, (, ), ., getNativeFunctionType, (, JSTypeNative, ., U2U_CONSTRUCTOR_TYPE, ), ;, className, =]
[}, else, {, classType, =, compiler, ., getTypeRegistry, (, ), ., getNativeFunctionType, (, JSTypeNative, ., U2U_CONSTRUCTOR_TYPE, ), ;, className, =]
[}, else, {, classType, =, compiler, ., getTypeRegistry, (, ), ., getNativeFunctionType, (, JSTypeNative, ., U2U_CONSTRUCTOR_TYPE, ), ;, className, =]
[=, compiler, ., getTypeRegistry, (, ), ., getNativeFunctionType, (, JSTypeNative, ., U2U_CONSTRUCTOR_TYPE, ), ;, className, =, NodeUtil, ., getPrototypeClassName, (]
[(, JSTypeNative, ., U2U_CONSTRUCTOR_TYPE, ), ;, className, =, NodeUtil, ., getPrototypeClassName, (, qName, ), ., getQualifiedName, (, ), ;, }]
[., U2U_CONSTRUCTOR_TYPE, ), ;, className, =, NodeUtil, ., getPrototypeClassName, (, qName, ), ., getQualifiedName, (, ), ;, }, recordClassConstructorOrInterface, (]
[), ;, className, =, NodeUtil, ., getPrototypeClassName, (, qName, ), ., getQualifiedName, (, ), ;, }, recordClassConstructorOrInterface, (, className, ,]
[className, =, NodeUtil, ., getPrototypeClassName, (, qName, ), ., getQualifiedName, (, ), ;, }, recordClassConstructorOrInterface, (, className, ,, classType, ,]
[NodeUtil, ., getPrototypeClassName, (, qName, ), ., getQualifiedName, (, ), ;, }, recordClassConstructorOrInterface, (, className, ,, classType, ,, null, ,]
[getPrototypeClassName, (, qName, ), ., getQualifiedName, (, ), ;, }, recordClassConstructorOrInterface, (, className, ,, classType, ,, null, ,, null, ,]
[qName, ), ., getQualifiedName, (, ), ;, }, recordClassConstructorOrInterface, (, className, ,, classType, ,, null, ,, null, ,, null, ,]
[;, }, recordClassConstructorOrInterface, (, className, ,, classType, ,, null, ,, null, ,, null, ,, null, ), ;, String, qNameStr, =]
[;, }, recordClassConstructorOrInterface, (, className, ,, classType, ,, null, ,, null, ,, null, ,, null, ), ;, String, qNameStr, =]
[;, }, recordClassConstructorOrInterface, (, className, ,, classType, ,, null, ,, null, ,, null, ,, null, ), ;, String, qNameStr, =]
[recordClassConstructorOrInterface, (, className, ,, classType, ,, null, ,, null, ,, null, ,, null, ), ;, String, qNameStr, =, className, +]
[className, ,, classType, ,, null, ,, null, ,, null, ,, null, ), ;, String, qNameStr, =, className, +, ".prototype.", +]
[className, ,, classType, ,, null, ,, null, ,, null, ,, null, ), ;, String, qNameStr, =, className, +, ".prototype.", +]
[null, ,, null, ,, null, ,, null, ), ;, String, qNameStr, =, className, +, ".prototype.", +, NodeUtil, ., getPrototypePropertyName, (]
[null, ), ;, String, qNameStr, =, className, +, ".prototype.", +, NodeUtil, ., getPrototypePropertyName, (, qName, ), ;, Name, prototypeProp, =]
[null, ), ;, String, qNameStr, =, className, +, ".prototype.", +, NodeUtil, ., getPrototypePropertyName, (, qName, ), ;, Name, prototypeProp, =]
[qNameStr, =, className, +, ".prototype.", +, NodeUtil, ., getPrototypePropertyName, (, qName, ), ;, Name, prototypeProp, =, graph, ., defineNameIfNotExists, (]
[className, +, ".prototype.", +, NodeUtil, ., getPrototypePropertyName, (, qName, ), ;, Name, prototypeProp, =, graph, ., defineNameIfNotExists, (, qNameStr, ,]
[+, NodeUtil, ., getPrototypePropertyName, (, qName, ), ;, Name, prototypeProp, =, graph, ., defineNameIfNotExists, (, qNameStr, ,, isExtern, ), ;]
[+, NodeUtil, ., getPrototypePropertyName, (, qName, ), ;, Name, prototypeProp, =, graph, ., defineNameIfNotExists, (, qNameStr, ,, isExtern, ), ;]
[(, qName, ), ;, Name, prototypeProp, =, graph, ., defineNameIfNotExists, (, qNameStr, ,, isExtern, ), ;, Preconditions, ., checkNotNull, (]
[), ;, Name, prototypeProp, =, graph, ., defineNameIfNotExists, (, qNameStr, ,, isExtern, ), ;, Preconditions, ., checkNotNull, (, prototypeProp, ,]
[Name, prototypeProp, =, graph, ., defineNameIfNotExists, (, qNameStr, ,, isExtern, ), ;, Preconditions, ., checkNotNull, (, prototypeProp, ,, "%s should be in the name graph as a node.", ,]
[defineNameIfNotExists, (, qNameStr, ,, isExtern, ), ;, Preconditions, ., checkNotNull, (, prototypeProp, ,, "%s should be in the name graph as a node.", ,, qNameStr, ), ;, if, (]
[defineNameIfNotExists, (, qNameStr, ,, isExtern, ), ;, Preconditions, ., checkNotNull, (, prototypeProp, ,, "%s should be in the name graph as a node.", ,, qNameStr, ), ;, if, (]
[qNameStr, ,, isExtern, ), ;, Preconditions, ., checkNotNull, (, prototypeProp, ,, "%s should be in the name graph as a node.", ,, qNameStr, ), ;, if, (, assign, !=]
[), ;, Preconditions, ., checkNotNull, (, prototypeProp, ,, "%s should be in the name graph as a node.", ,, qNameStr, ), ;, if, (, assign, !=, null, ), {]
[), ;, Preconditions, ., checkNotNull, (, prototypeProp, ,, "%s should be in the name graph as a node.", ,, qNameStr, ), ;, if, (, assign, !=, null, ), {]
[checkNotNull, (, prototypeProp, ,, "%s should be in the name graph as a node.", ,, qNameStr, ), ;, if, (, assign, !=, null, ), {, prototypeProp, ., addAssignmentDeclaration, (]
["%s should be in the name graph as a node.", ,, qNameStr, ), ;, if, (, assign, !=, null, ), {, prototypeProp, ., addAssignmentDeclaration, (, assign, ), ;, }]
["%s should be in the name graph as a node.", ,, qNameStr, ), ;, if, (, assign, !=, null, ), {, prototypeProp, ., addAssignmentDeclaration, (, assign, ), ;, }]
[;, if, (, assign, !=, null, ), {, prototypeProp, ., addAssignmentDeclaration, (, assign, ), ;, }, prototypeProp, ., setType, (]
[!=, null, ), {, prototypeProp, ., addAssignmentDeclaration, (, assign, ), ;, }, prototypeProp, ., setType, (, type, ), ;, return]
[return, prototypeProp, ;, }, private, Reference, recordStaticNameUse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[private, Reference, recordStaticNameUse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, isExtern, ), {, return]
[n, ,, Node, parent, ), {, if, (, isExtern, ), {, return, null, ;, }, else, {, Reference, reference, =]
[parent, ), {, if, (, isExtern, ), {, return, null, ;, }, else, {, Reference, reference, =, new, Reference, (]
[{, if, (, isExtern, ), {, return, null, ;, }, else, {, Reference, reference, =, new, Reference, (, n, ,]
[return, null, ;, }, else, {, Reference, reference, =, new, Reference, (, n, ,, parent, ), ;, Name, name, =]
[return, null, ;, }, else, {, Reference, reference, =, new, Reference, (, n, ,, parent, ), ;, Name, name, =]
[else, {, Reference, reference, =, new, Reference, (, n, ,, parent, ), ;, Name, name, =, graph, ., defineNameIfNotExists, (]
[else, {, Reference, reference, =, new, Reference, (, n, ,, parent, ), ;, Name, name, =, graph, ., defineNameIfNotExists, (]
[Reference, (, n, ,, parent, ), ;, Name, name, =, graph, ., defineNameIfNotExists, (, n, ., getQualifiedName, (, ), ,]
[,, parent, ), ;, Name, name, =, graph, ., defineNameIfNotExists, (, n, ., getQualifiedName, (, ), ,, isExtern, ), ;]
[,, parent, ), ;, Name, name, =, graph, ., defineNameIfNotExists, (, n, ., getQualifiedName, (, ), ,, isExtern, ), ;]
[Name, name, =, graph, ., defineNameIfNotExists, (, n, ., getQualifiedName, (, ), ,, isExtern, ), ;, name, ., setType, (]
[=, graph, ., defineNameIfNotExists, (, n, ., getQualifiedName, (, ), ,, isExtern, ), ;, name, ., setType, (, getType, (]
[(, n, ., getQualifiedName, (, ), ,, isExtern, ), ;, name, ., setType, (, getType, (, n, ), ), ;]
[(, n, ., getQualifiedName, (, ), ,, isExtern, ), ;, name, ., setType, (, getType, (, n, ), ), ;]
[(, ), ,, isExtern, ), ;, name, ., setType, (, getType, (, n, ), ), ;, graph, ., connect, (]
[), ;, name, ., setType, (, getType, (, n, ), ), ;, graph, ., connect, (, getNamedContainingFunction, (, ), ,]
[name, ., setType, (, getType, (, n, ), ), ;, graph, ., connect, (, getNamedContainingFunction, (, ), ,, reference, ,]
[getType, (, n, ), ), ;, graph, ., connect, (, getNamedContainingFunction, (, ), ,, reference, ,, name, ), ;, return]
[;, return, reference, ;, }, }, private, void, recordPrototypePropUse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[;, return, reference, ;, }, }, private, void, recordPrototypePropUse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[}, }, private, void, recordPrototypePropUse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Preconditions, ., checkArgument, (]
[}, }, private, void, recordPrototypePropUse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Preconditions, ., checkArgument, (]
[n, ,, Node, parent, ), {, Preconditions, ., checkArgument, (, n, ., isGetProp, (, ), ), ;, Node, instance, =]
[n, ,, Node, parent, ), {, Preconditions, ., checkArgument, (, n, ., isGetProp, (, ), ), ;, Node, instance, =]
[(, n, ., isGetProp, (, ), ), ;, Node, instance, =, n, ., getFirstChild, (, ), ;, JSType, instanceType, =]
[., isGetProp, (, ), ), ;, Node, instance, =, n, ., getFirstChild, (, ), ;, JSType, instanceType, =, getType, (]
[Node, instance, =, n, ., getFirstChild, (, ), ;, JSType, instanceType, =, getType, (, instance, ), ;, JSType, boxedType, =]
[Node, instance, =, n, ., getFirstChild, (, ), ;, JSType, instanceType, =, getType, (, instance, ), ;, JSType, boxedType, =]
[(, ), ;, JSType, instanceType, =, getType, (, instance, ), ;, JSType, boxedType, =, instanceType, ., autoboxesTo, (, ), ;]
[;, JSType, instanceType, =, getType, (, instance, ), ;, JSType, boxedType, =, instanceType, ., autoboxesTo, (, ), ;, instanceType, =]
[;, JSType, instanceType, =, getType, (, instance, ), ;, JSType, boxedType, =, instanceType, ., autoboxesTo, (, ), ;, instanceType, =]
[;, JSType, instanceType, =, getType, (, instance, ), ;, JSType, boxedType, =, instanceType, ., autoboxesTo, (, ), ;, instanceType, =]
[instanceType, =, getType, (, instance, ), ;, JSType, boxedType, =, instanceType, ., autoboxesTo, (, ), ;, instanceType, =, boxedType, !=]
[getType, (, instance, ), ;, JSType, boxedType, =, instanceType, ., autoboxesTo, (, ), ;, instanceType, =, boxedType, !=, null, ?]
[instance, ), ;, JSType, boxedType, =, instanceType, ., autoboxesTo, (, ), ;, instanceType, =, boxedType, !=, null, ?, boxedType, :]
[=, instanceType, ., autoboxesTo, (, ), ;, instanceType, =, boxedType, !=, null, ?, boxedType, :, instanceType, ;, ObjectType, objType, =]
[=, instanceType, ., autoboxesTo, (, ), ;, instanceType, =, boxedType, !=, null, ?, boxedType, :, instanceType, ;, ObjectType, objType, =]
[;, instanceType, =, boxedType, !=, null, ?, boxedType, :, instanceType, ;, ObjectType, objType, =, instanceType, ., toObjectType, (, ), ;]
[;, instanceType, =, boxedType, !=, null, ?, boxedType, :, instanceType, ;, ObjectType, objType, =, instanceType, ., toObjectType, (, ), ;]
[!=, null, ?, boxedType, :, instanceType, ;, ObjectType, objType, =, instanceType, ., toObjectType, (, ), ;, Preconditions, ., checkState, (]
[!=, null, ?, boxedType, :, instanceType, ;, ObjectType, objType, =, instanceType, ., toObjectType, (, ), ;, Preconditions, ., checkState, (]
[?, boxedType, :, instanceType, ;, ObjectType, objType, =, instanceType, ., toObjectType, (, ), ;, Preconditions, ., checkState, (, objType, !=]
[ObjectType, objType, =, instanceType, ., toObjectType, (, ), ;, Preconditions, ., checkState, (, objType, !=, null, ), ;, if, (]
[objType, =, instanceType, ., toObjectType, (, ), ;, Preconditions, ., checkState, (, objType, !=, null, ), ;, if, (, !]
[), ;, Preconditions, ., checkState, (, objType, !=, null, ), ;, if, (, !, isExtern, ), {, Reference, ref, =]
[., checkState, (, objType, !=, null, ), ;, if, (, !, isExtern, ), {, Reference, ref, =, new, Reference, (]
[(, objType, !=, null, ), ;, if, (, !, isExtern, ), {, Reference, ref, =, new, Reference, (, n, ,]
[if, (, !, isExtern, ), {, Reference, ref, =, new, Reference, (, n, ,, parent, ), ;, FunctionType, constructor, =]
[if, (, !, isExtern, ), {, Reference, ref, =, new, Reference, (, n, ,, parent, ), ;, FunctionType, constructor, =]
[=, new, Reference, (, n, ,, parent, ), ;, FunctionType, constructor, =, objType, ., getConstructor, (, ), ;, if, (]
[=, new, Reference, (, n, ,, parent, ), ;, FunctionType, constructor, =, objType, ., getConstructor, (, ), ;, if, (]
[Reference, (, n, ,, parent, ), ;, FunctionType, constructor, =, objType, ., getConstructor, (, ), ;, if, (, constructor, !=]
[;, FunctionType, constructor, =, objType, ., getConstructor, (, ), ;, if, (, constructor, !=, null, ), {, String, propName, =]
[;, FunctionType, constructor, =, objType, ., getConstructor, (, ), ;, if, (, constructor, !=, null, ), {, String, propName, =]
[;, FunctionType, constructor, =, objType, ., getConstructor, (, ), ;, if, (, constructor, !=, null, ), {, String, propName, =]
[constructor, !=, null, ), {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[!=, null, ), {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (, !]
[!=, null, ), {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (, !]
[!=, null, ), {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (, !]
[., getLastChild, (, ), ., getString, (, ), ;, if, (, !, constructor, ., getPrototype, (, ), ., hasOwnProperty, (]
[., getString, (, ), ;, if, (, !, constructor, ., getPrototype, (, ), ., hasOwnProperty, (, propName, ), ), {]
[(, ), ;, if, (, !, constructor, ., getPrototype, (, ), ., hasOwnProperty, (, propName, ), ), {, recordSuperClassPrototypePropUse, (]
[;, if, (, !, constructor, ., getPrototype, (, ), ., hasOwnProperty, (, propName, ), ), {, recordSuperClassPrototypePropUse, (, constructor, ,]
[(, !, constructor, ., getPrototype, (, ), ., hasOwnProperty, (, propName, ), ), {, recordSuperClassPrototypePropUse, (, constructor, ,, propName, ,]
[getPrototype, (, ), ., hasOwnProperty, (, propName, ), ), {, recordSuperClassPrototypePropUse, (, constructor, ,, propName, ,, ref, ), ;, }]
[), ., hasOwnProperty, (, propName, ), ), {, recordSuperClassPrototypePropUse, (, constructor, ,, propName, ,, ref, ), ;, }, recordSubclassPrototypePropUse, (]
[hasOwnProperty, (, propName, ), ), {, recordSuperClassPrototypePropUse, (, constructor, ,, propName, ,, ref, ), ;, }, recordSubclassPrototypePropUse, (, constructor, ,]
[propName, ), ), {, recordSuperClassPrototypePropUse, (, constructor, ,, propName, ,, ref, ), ;, }, recordSubclassPrototypePropUse, (, constructor, ,, propName, ,]
[constructor, ,, propName, ,, ref, ), ;, }, recordSubclassPrototypePropUse, (, constructor, ,, propName, ,, ref, ), ;, }, else, {]
[propName, ,, ref, ), ;, }, recordSubclassPrototypePropUse, (, constructor, ,, propName, ,, ref, ), ;, }, else, {, recordUnknownUse, (]
[ref, ), ;, }, recordSubclassPrototypePropUse, (, constructor, ,, propName, ,, ref, ), ;, }, else, {, recordUnknownUse, (, t, ,]
[;, }, recordSubclassPrototypePropUse, (, constructor, ,, propName, ,, ref, ), ;, }, else, {, recordUnknownUse, (, t, ,, n, ,]
[}, }, }, private, void, recordSuperClassPrototypePropUse, (, FunctionType, classType, ,, String, prop, ,, Reference, ref, ), {, FunctionType, superClass, =]
[}, }, }, private, void, recordSuperClassPrototypePropUse, (, FunctionType, classType, ,, String, prop, ,, Reference, ref, ), {, FunctionType, superClass, =]
[classType, ,, String, prop, ,, Reference, ref, ), {, FunctionType, superClass, =, classType, ., getSuperClassConstructor, (, ), ;, while, (]
[classType, ,, String, prop, ,, Reference, ref, ), {, FunctionType, superClass, =, classType, ., getSuperClassConstructor, (, ), ;, while, (]
[String, prop, ,, Reference, ref, ), {, FunctionType, superClass, =, classType, ., getSuperClassConstructor, (, ), ;, while, (, superClass, !=]
[), {, FunctionType, superClass, =, classType, ., getSuperClassConstructor, (, ), ;, while, (, superClass, !=, null, ), {, if, (]
[), {, FunctionType, superClass, =, classType, ., getSuperClassConstructor, (, ), ;, while, (, superClass, !=, null, ), {, if, (]
[), {, FunctionType, superClass, =, classType, ., getSuperClassConstructor, (, ), ;, while, (, superClass, !=, null, ), {, if, (]
[(, ), ;, while, (, superClass, !=, null, ), {, if, (, superClass, ., getPrototype, (, ), ., hasOwnProperty, (]
[(, superClass, !=, null, ), {, if, (, superClass, ., getPrototype, (, ), ., hasOwnProperty, (, prop, ), ), {]
[(, superClass, !=, null, ), {, if, (, superClass, ., getPrototype, (, ), ., hasOwnProperty, (, prop, ), ), {]
[), {, if, (, superClass, ., getPrototype, (, ), ., hasOwnProperty, (, prop, ), ), {, graph, ., connect, (]
[superClass, ., getPrototype, (, ), ., hasOwnProperty, (, prop, ), ), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,]
[getPrototype, (, ), ., hasOwnProperty, (, prop, ), ), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref, ,]
[getPrototype, (, ), ., hasOwnProperty, (, prop, ), ), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref, ,]
[hasOwnProperty, (, prop, ), ), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists, (]
[hasOwnProperty, (, prop, ), ), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists, (]
[hasOwnProperty, (, prop, ), ), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists, (]
[hasOwnProperty, (, prop, ), ), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists, (]
[graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists, (, superClass, ., getReferenceName, (, ), +]
[connect, (, getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists, (, superClass, ., getReferenceName, (, ), +, ".prototype.", +]
[getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists, (, superClass, ., getReferenceName, (, ), +, ".prototype.", +, prop, ,]
[(, superClass, ., getReferenceName, (, ), +, ".prototype.", +, prop, ,, false, ), ), ;, return, ;, }, else, {]
[., getReferenceName, (, ), +, ".prototype.", +, prop, ,, false, ), ), ;, return, ;, }, else, {, superClass, =]
[., getReferenceName, (, ), +, ".prototype.", +, prop, ,, false, ), ), ;, return, ;, }, else, {, superClass, =]
[;, }, }, }, private, void, recordSubclassPrototypePropUse, (, FunctionType, classType, ,, String, prop, ,, Reference, ref, ), {, if, (]
[;, }, }, }, private, void, recordSubclassPrototypePropUse, (, FunctionType, classType, ,, String, prop, ,, Reference, ref, ), {, if, (]
[;, }, }, }, private, void, recordSubclassPrototypePropUse, (, FunctionType, classType, ,, String, prop, ,, Reference, ref, ), {, if, (]
[FunctionType, classType, ,, String, prop, ,, Reference, ref, ), {, if, (, classType, ., getPrototype, (, ), ., hasOwnProperty, (]
[prop, ,, Reference, ref, ), {, if, (, classType, ., getPrototype, (, ), ., hasOwnProperty, (, prop, ), ), {]
[prop, ,, Reference, ref, ), {, if, (, classType, ., getPrototype, (, ), ., hasOwnProperty, (, prop, ), ), {]
[), {, if, (, classType, ., getPrototype, (, ), ., hasOwnProperty, (, prop, ), ), {, graph, ., connect, (]
[classType, ., getPrototype, (, ), ., hasOwnProperty, (, prop, ), ), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,]
[getPrototype, (, ), ., hasOwnProperty, (, prop, ), ), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref, ,]
[getPrototype, (, ), ., hasOwnProperty, (, prop, ), ), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref, ,]
[hasOwnProperty, (, prop, ), ), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists, (]
[hasOwnProperty, (, prop, ), ), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists, (]
[hasOwnProperty, (, prop, ), ), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists, (]
[hasOwnProperty, (, prop, ), ), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists, (]
[graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists, (, classType, ., getReferenceName, (, ), +]
[connect, (, getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists, (, classType, ., getReferenceName, (, ), +, ".prototype.", +]
[getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists, (, classType, ., getReferenceName, (, ), +, ".prototype.", +, prop, ,]
[., defineNameIfNotExists, (, classType, ., getReferenceName, (, ), +, ".prototype.", +, prop, ,, false, ), ), ;, }, if, (]
[., defineNameIfNotExists, (, classType, ., getReferenceName, (, ), +, ".prototype.", +, prop, ,, false, ), ), ;, }, if, (]
[., defineNameIfNotExists, (, classType, ., getReferenceName, (, ), +, ".prototype.", +, prop, ,, false, ), ), ;, }, if, (]
[(, ), +, ".prototype.", +, prop, ,, false, ), ), ;, }, if, (, classType, ., getSubTypes, (, ), !=]
[), ), ;, }, if, (, classType, ., getSubTypes, (, ), !=, null, ), {, for, (, FunctionType, subclass, :]
[), ), ;, }, if, (, classType, ., getSubTypes, (, ), !=, null, ), {, for, (, FunctionType, subclass, :]
[., getSubTypes, (, ), !=, null, ), {, for, (, FunctionType, subclass, :, classType, ., getSubTypes, (, ), ), {]
[(, ), !=, null, ), {, for, (, FunctionType, subclass, :, classType, ., getSubTypes, (, ), ), {, recordSubclassPrototypePropUse, (]
[!=, null, ), {, for, (, FunctionType, subclass, :, classType, ., getSubTypes, (, ), ), {, recordSubclassPrototypePropUse, (, subclass, ,]
[), {, for, (, FunctionType, subclass, :, classType, ., getSubTypes, (, ), ), {, recordSubclassPrototypePropUse, (, subclass, ,, prop, ,]
[;, }, }, }, private, void, recordUnknownUse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, isExtern, ), {, return, ;, }, else, {]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, isExtern, ), {, return, ;, }, else, {]
[n, ,, Node, parent, ), {, if, (, isExtern, ), {, return, ;, }, else, {, Preconditions, ., checkArgument, (]
[n, ,, Node, parent, ), {, if, (, isExtern, ), {, return, ;, }, else, {, Preconditions, ., checkArgument, (]
[{, return, ;, }, else, {, Preconditions, ., checkArgument, (, n, ., isGetProp, (, ), ), ;, Reference, ref, =]
[}, else, {, Preconditions, ., checkArgument, (, n, ., isGetProp, (, ), ), ;, Reference, ref, =, new, Reference, (]
[{, Preconditions, ., checkArgument, (, n, ., isGetProp, (, ), ), ;, Reference, ref, =, new, Reference, (, n, ,]
[checkArgument, (, n, ., isGetProp, (, ), ), ;, Reference, ref, =, new, Reference, (, n, ,, parent, ), ;]
[checkArgument, (, n, ., isGetProp, (, ), ), ;, Reference, ref, =, new, Reference, (, n, ,, parent, ), ;]
[isGetProp, (, ), ), ;, Reference, ref, =, new, Reference, (, n, ,, parent, ), ;, ref, ., setUnknown, (]
[), ;, Reference, ref, =, new, Reference, (, n, ,, parent, ), ;, ref, ., setUnknown, (, true, ), ;]
[), ;, Reference, ref, =, new, Reference, (, n, ,, parent, ), ;, ref, ., setUnknown, (, true, ), ;]
[=, new, Reference, (, n, ,, parent, ), ;, ref, ., setUnknown, (, true, ), ;, unknownNameUse, ., put, (]
[=, new, Reference, (, n, ,, parent, ), ;, ref, ., setUnknown, (, true, ), ;, unknownNameUse, ., put, (]
[=, new, Reference, (, n, ,, parent, ), ;, ref, ., setUnknown, (, true, ), ;, unknownNameUse, ., put, (]
[., setUnknown, (, true, ), ;, unknownNameUse, ., put, (, n, ., getLastChild, (, ), ., getString, (, ), ,]
[true, ), ;, unknownNameUse, ., put, (, n, ., getLastChild, (, ), ., getString, (, ), ,, new, NameUse, (]
[., put, (, n, ., getLastChild, (, ), ., getString, (, ), ,, new, NameUse, (, getNamedContainingFunction, (, ), ,]
[Nullable, Node, n, ,, @, Nullable, Node, parent, ,, @, Nullable, Node, gParent, ,, @, Nullable, Node, rhs, ), {]
[Nullable, Node, n, ,, @, Nullable, Node, parent, ,, @, Nullable, Node, gParent, ,, @, Nullable, Node, rhs, ), {]
[@, Nullable, Node, parent, ,, @, Nullable, Node, gParent, ,, @, Nullable, Node, rhs, ), {, Preconditions, ., checkArgument, (]
[@, Nullable, Node, parent, ,, @, Nullable, Node, gParent, ,, @, Nullable, Node, rhs, ), {, Preconditions, ., checkArgument, (]
[@, Nullable, Node, parent, ,, @, Nullable, Node, gParent, ,, @, Nullable, Node, rhs, ), {, Preconditions, ., checkArgument, (]
[Nullable, Node, gParent, ,, @, Nullable, Node, rhs, ), {, Preconditions, ., checkArgument, (, type, ., isConstructor, (, ), ||]
[Nullable, Node, gParent, ,, @, Nullable, Node, rhs, ), {, Preconditions, ., checkArgument, (, type, ., isConstructor, (, ), ||]
[Preconditions, ., checkArgument, (, type, ., isConstructor, (, ), ||, type, ., isInterface, (, ), ), ;, Name, symbol, =]
[Preconditions, ., checkArgument, (, type, ., isConstructor, (, ), ||, type, ., isInterface, (, ), ), ;, Name, symbol, =]
[type, ., isConstructor, (, ), ||, type, ., isInterface, (, ), ), ;, Name, symbol, =, graph, ., defineNameIfNotExists, (]
[isConstructor, (, ), ||, type, ., isInterface, (, ), ), ;, Name, symbol, =, graph, ., defineNameIfNotExists, (, name, ,]
[., isInterface, (, ), ), ;, Name, symbol, =, graph, ., defineNameIfNotExists, (, name, ,, isExtern, ), ;, if, (]
[., isInterface, (, ), ), ;, Name, symbol, =, graph, ., defineNameIfNotExists, (, name, ,, isExtern, ), ;, if, (]
[(, ), ), ;, Name, symbol, =, graph, ., defineNameIfNotExists, (, name, ,, isExtern, ), ;, if, (, rhs, !=]
[;, Name, symbol, =, graph, ., defineNameIfNotExists, (, name, ,, isExtern, ), ;, if, (, rhs, !=, null, ), {]
[;, Name, symbol, =, graph, ., defineNameIfNotExists, (, name, ,, isExtern, ), ;, if, (, rhs, !=, null, ), {]
[graph, ., defineNameIfNotExists, (, name, ,, isExtern, ), ;, if, (, rhs, !=, null, ), {, symbol, ., setType, (]
[defineNameIfNotExists, (, name, ,, isExtern, ), ;, if, (, rhs, !=, null, ), {, symbol, ., setType, (, getType, (]
[;, if, (, rhs, !=, null, ), {, symbol, ., setType, (, getType, (, rhs, ), ), ;, if, (]
[;, if, (, rhs, !=, null, ), {, symbol, ., setType, (, getType, (, rhs, ), ), ;, if, (]
[{, symbol, ., setType, (, getType, (, rhs, ), ), ;, if, (, n, ., isAssign, (, ), ), {]
[{, symbol, ., setType, (, getType, (, rhs, ), ), ;, if, (, n, ., isAssign, (, ), ), {]
[(, getType, (, rhs, ), ), ;, if, (, n, ., isAssign, (, ), ), {, symbol, ., addAssignmentDeclaration, (]
[;, if, (, n, ., isAssign, (, ), ), {, symbol, ., addAssignmentDeclaration, (, n, ), ;, }, else, {]
[;, if, (, n, ., isAssign, (, ), ), {, symbol, ., addAssignmentDeclaration, (, n, ), ;, }, else, {]
[., isAssign, (, ), ), {, symbol, ., addAssignmentDeclaration, (, n, ), ;, }, else, {, symbol, ., addFunctionDeclaration, (]
[addAssignmentDeclaration, (, n, ), ;, }, else, {, symbol, ., addFunctionDeclaration, (, n, ), ;, }, }, ObjectType, prototype, =]
[addAssignmentDeclaration, (, n, ), ;, }, else, {, symbol, ., addFunctionDeclaration, (, n, ), ;, }, }, ObjectType, prototype, =]
[(, n, ), ;, }, }, ObjectType, prototype, =, type, ., getPrototype, (, ), ;, for, (, String, prop, :]
[(, n, ), ;, }, }, ObjectType, prototype, =, type, ., getPrototype, (, ), ;, for, (, String, prop, :]
[prototype, =, type, ., getPrototype, (, ), ;, for, (, String, prop, :, prototype, ., getOwnPropertyNames, (, ), ), {]
[prototype, =, type, ., getPrototype, (, ), ;, for, (, String, prop, :, prototype, ., getOwnPropertyNames, (, ), ), {]
[getPrototype, (, ), ;, for, (, String, prop, :, prototype, ., getOwnPropertyNames, (, ), ), {, graph, ., defineNameIfNotExists, (]
[getPrototype, (, ), ;, for, (, String, prop, :, prototype, ., getOwnPropertyNames, (, ), ), {, graph, ., defineNameIfNotExists, (]
[getPrototype, (, ), ;, for, (, String, prop, :, prototype, ., getOwnPropertyNames, (, ), ), {, graph, ., defineNameIfNotExists, (]
[), ;, for, (, String, prop, :, prototype, ., getOwnPropertyNames, (, ), ), {, graph, ., defineNameIfNotExists, (, name, +]
[for, (, String, prop, :, prototype, ., getOwnPropertyNames, (, ), ), {, graph, ., defineNameIfNotExists, (, name, +, ".prototype.", +]
[String, prop, :, prototype, ., getOwnPropertyNames, (, ), ), {, graph, ., defineNameIfNotExists, (, name, +, ".prototype.", +, prop, ,]
[getOwnPropertyNames, (, ), ), {, graph, ., defineNameIfNotExists, (, name, +, ".prototype.", +, prop, ,, isExtern, ), ;, }, return]
[symbol, ;, }, }, private, void, connectUnknowns, (, ), {, for, (, GraphNode, <, Name, ,, Reference, >, node, :]
[symbol, ;, }, }, private, void, connectUnknowns, (, ), {, for, (, GraphNode, <, Name, ,, Reference, >, node, :]
[for, (, GraphNode, <, Name, ,, Reference, >, node, :, graph, ., getNodes, (, ), ), {, Name, name, =]
[for, (, GraphNode, <, Name, ,, Reference, >, node, :, graph, ., getNodes, (, ), ), {, Name, name, =]
[:, graph, ., getNodes, (, ), ), {, Name, name, =, node, ., getValue, (, ), ;, String, propName, =]
[:, graph, ., getNodes, (, ), ), {, Name, name, =, node, ., getValue, (, ), ;, String, propName, =]
[Name, name, =, node, ., getValue, (, ), ;, String, propName, =, name, ., getPropertyName, (, ), ;, if, (]
[Name, name, =, node, ., getValue, (, ), ;, String, propName, =, name, ., getPropertyName, (, ), ;, if, (]
[=, node, ., getValue, (, ), ;, String, propName, =, name, ., getPropertyName, (, ), ;, if, (, propName, ==]
[getPropertyName, (, ), ;, if, (, propName, ==, null, ), {, continue, ;, }, Collection, <, NameUse, >, uses, =]
[getPropertyName, (, ), ;, if, (, propName, ==, null, ), {, continue, ;, }, Collection, <, NameUse, >, uses, =]
[if, (, propName, ==, null, ), {, continue, ;, }, Collection, <, NameUse, >, uses, =, unknownNameUse, ., get, (]
[), {, continue, ;, }, Collection, <, NameUse, >, uses, =, unknownNameUse, ., get, (, propName, ), ;, if, (]
[), {, continue, ;, }, Collection, <, NameUse, >, uses, =, unknownNameUse, ., get, (, propName, ), ;, if, (]
[continue, ;, }, Collection, <, NameUse, >, uses, =, unknownNameUse, ., get, (, propName, ), ;, if, (, uses, !=]
[=, unknownNameUse, ., get, (, propName, ), ;, if, (, uses, !=, null, ), {, for, (, NameUse, use, :]
[get, (, propName, ), ;, if, (, uses, !=, null, ), {, for, (, NameUse, use, :, uses, ), {]
[get, (, propName, ), ;, if, (, uses, !=, null, ), {, for, (, NameUse, use, :, uses, ), {]
[;, if, (, uses, !=, null, ), {, for, (, NameUse, use, :, uses, ), {, graph, ., connect, (]
[;, if, (, uses, !=, null, ), {, for, (, NameUse, use, :, uses, ), {, graph, ., connect, (]
[!=, null, ), {, for, (, NameUse, use, :, uses, ), {, graph, ., connect, (, use, ., name, ,]
[!=, null, ), {, for, (, NameUse, use, :, uses, ), {, graph, ., connect, (, use, ., name, ,]
[for, (, NameUse, use, :, uses, ), {, graph, ., connect, (, use, ., name, ,, use, ., reference, ,]
[reference, ,, name, ), ;, }, }, }, }, private, JSType, getType, (, Node, n, ), {, JSType, type, =]
[reference, ,, name, ), ;, }, }, }, }, private, JSType, getType, (, Node, n, ), {, JSType, type, =]
[}, private, JSType, getType, (, Node, n, ), {, JSType, type, =, n, ., getJSType, (, ), ;, if, (]
[}, private, JSType, getType, (, Node, n, ), {, JSType, type, =, n, ., getJSType, (, ), ;, if, (]
[JSType, getType, (, Node, n, ), {, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, ==]
[), {, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, ==, null, ), {, if, (]
[=, n, ., getJSType, (, ), ;, if, (, type, ==, null, ), {, if, (, CONSERVATIVE, ), {, throw]
[getJSType, (, ), ;, if, (, type, ==, null, ), {, if, (, CONSERVATIVE, ), {, throw, new, RuntimeException, (]
[==, null, ), {, if, (, CONSERVATIVE, ), {, throw, new, RuntimeException, (, "Type system failed us :(", ), ;, }, else, {, return]
[==, null, ), {, if, (, CONSERVATIVE, ), {, throw, new, RuntimeException, (, "Type system failed us :(", ), ;, }, else, {, return]
[==, null, ), {, if, (, CONSERVATIVE, ), {, throw, new, RuntimeException, (, "Type system failed us :(", ), ;, }, else, {, return]
[{, throw, new, RuntimeException, (, "Type system failed us :(", ), ;, }, else, {, return, compiler, ., getTypeRegistry, (, ), ., getNativeType, (]
[{, throw, new, RuntimeException, (, "Type system failed us :(", ), ;, }, else, {, return, compiler, ., getTypeRegistry, (, ), ., getNativeType, (]
[}, else, {, return, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, }, return]
[}, else, {, return, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, }, return]
[), ;, }, }, return, type, ., restrictByNotNullOrUndefined, (, ), ;, }, private, void, pushContainingFunction, (, Name, functionNode, ), {]
[), ;, }, }, return, type, ., restrictByNotNullOrUndefined, (, ), ;, }, private, void, pushContainingFunction, (, Name, functionNode, ), {]
[return, type, ., restrictByNotNullOrUndefined, (, ), ;, }, private, void, pushContainingFunction, (, Name, functionNode, ), {, currentFunctionStack, ., add, (]
[pushContainingFunction, (, Name, functionNode, ), {, currentFunctionStack, ., add, (, functionNode, ), ;, }, private, void, popContainingFunction, (, ), {]
[pushContainingFunction, (, Name, functionNode, ), {, currentFunctionStack, ., add, (, functionNode, ), ;, }, private, void, popContainingFunction, (, ), {]
[), {, currentFunctionStack, ., add, (, functionNode, ), ;, }, private, void, popContainingFunction, (, ), {, currentFunctionStack, ., remove, (]
[), {, currentFunctionStack, ., add, (, functionNode, ), ;, }, private, void, popContainingFunction, (, ), {, currentFunctionStack, ., remove, (]
[), {, currentFunctionStack, ., add, (, functionNode, ), ;, }, private, void, popContainingFunction, (, ), {, currentFunctionStack, ., remove, (]
[functionNode, ), ;, }, private, void, popContainingFunction, (, ), {, currentFunctionStack, ., remove, (, currentFunctionStack, ., size, (, ), -]
[(, currentFunctionStack, ., size, (, ), -, 1, ), ;, }, private, Name, getNamedContainingFunction, (, ), {, Name, containingFn, =]
[1, ), ;, }, private, Name, getNamedContainingFunction, (, ), {, Name, containingFn, =, null, ;, int, pos, ;, for, (]
[;, }, private, Name, getNamedContainingFunction, (, ), {, Name, containingFn, =, null, ;, int, pos, ;, for, (, pos, =]
[;, }, private, Name, getNamedContainingFunction, (, ), {, Name, containingFn, =, null, ;, int, pos, ;, for, (, pos, =]
[;, }, private, Name, getNamedContainingFunction, (, ), {, Name, containingFn, =, null, ;, int, pos, ;, for, (, pos, =]
[), {, Name, containingFn, =, null, ;, int, pos, ;, for, (, pos, =, currentFunctionStack, ., size, (, ), -]
[Name, containingFn, =, null, ;, int, pos, ;, for, (, pos, =, currentFunctionStack, ., size, (, ), -, 1, ;]
[Name, containingFn, =, null, ;, int, pos, ;, for, (, pos, =, currentFunctionStack, ., size, (, ), -, 1, ;]
[=, null, ;, int, pos, ;, for, (, pos, =, currentFunctionStack, ., size, (, ), -, 1, ;, pos, >=]
[;, int, pos, ;, for, (, pos, =, currentFunctionStack, ., size, (, ), -, 1, ;, pos, >=, 0, ;]
[pos, ;, for, (, pos, =, currentFunctionStack, ., size, (, ), -, 1, ;, pos, >=, 0, ;, pos, =]
[pos, ;, for, (, pos, =, currentFunctionStack, ., size, (, ), -, 1, ;, pos, >=, 0, ;, pos, =]
[for, (, pos, =, currentFunctionStack, ., size, (, ), -, 1, ;, pos, >=, 0, ;, pos, =, pos, -]
[size, (, ), -, 1, ;, pos, >=, 0, ;, pos, =, pos, -, 1, ), {, Name, cf, =]
[size, (, ), -, 1, ;, pos, >=, 0, ;, pos, =, pos, -, 1, ), {, Name, cf, =]
[1, ;, pos, >=, 0, ;, pos, =, pos, -, 1, ), {, Name, cf, =, currentFunctionStack, ., get, (]
[;, pos, =, pos, -, 1, ), {, Name, cf, =, currentFunctionStack, ., get, (, pos, ), ;, if, (]
[;, pos, =, pos, -, 1, ), {, Name, cf, =, currentFunctionStack, ., get, (, pos, ), ;, if, (]
[=, pos, -, 1, ), {, Name, cf, =, currentFunctionStack, ., get, (, pos, ), ;, if, (, cf, !=]
[=, pos, -, 1, ), {, Name, cf, =, currentFunctionStack, ., get, (, pos, ), ;, if, (, cf, !=]
[{, Name, cf, =, currentFunctionStack, ., get, (, pos, ), ;, if, (, cf, !=, graph, ., UNKNOWN, ), {]
[cf, =, currentFunctionStack, ., get, (, pos, ), ;, if, (, cf, !=, graph, ., UNKNOWN, ), {, containingFn, =]
[pos, ), ;, if, (, cf, !=, graph, ., UNKNOWN, ), {, containingFn, =, cf, ;, break, ;, }, }]
[pos, ), ;, if, (, cf, !=, graph, ., UNKNOWN, ), {, containingFn, =, cf, ;, break, ;, }, }]
[(, cf, !=, graph, ., UNKNOWN, ), {, containingFn, =, cf, ;, break, ;, }, }, Preconditions, ., checkNotNull, (]
[., UNKNOWN, ), {, containingFn, =, cf, ;, break, ;, }, }, Preconditions, ., checkNotNull, (, containingFn, ), ;, return]
[private, final, Name, name, ;, private, final, Reference, reference, ;, private, NameUse, (, Name, name, ,, Reference, reference, ), {]
[private, final, Name, name, ;, private, final, Reference, reference, ;, private, NameUse, (, Name, name, ,, Reference, reference, ), {]
[;, private, final, Reference, reference, ;, private, NameUse, (, Name, name, ,, Reference, reference, ), {, this, ., name, =]
[final, Reference, reference, ;, private, NameUse, (, Name, name, ,, Reference, reference, ), {, this, ., name, =, name, ;]
[final, Reference, reference, ;, private, NameUse, (, Name, name, ,, Reference, reference, ), {, this, ., name, =, name, ;]
[private, NameUse, (, Name, name, ,, Reference, reference, ), {, this, ., name, =, name, ;, this, ., reference, =]
