[math3, ., exception, ., util, ., LocalizedFormats, ;, public, final, class, CombinatoricsUtils, {, static, final, long, [, ], FACTORIALS, =]
[util, ., LocalizedFormats, ;, public, final, class, CombinatoricsUtils, {, static, final, long, [, ], FACTORIALS, =, new, long, [, ]]
[., LocalizedFormats, ;, public, final, class, CombinatoricsUtils, {, static, final, long, [, ], FACTORIALS, =, new, long, [, ], {]
[;, public, final, class, CombinatoricsUtils, {, static, final, long, [, ], FACTORIALS, =, new, long, [, ], {, 1l, ,]
[final, class, CombinatoricsUtils, {, static, final, long, [, ], FACTORIALS, =, new, long, [, ], {, 1l, ,, 1l, ,]
[CombinatoricsUtils, {, static, final, long, [, ], FACTORIALS, =, new, long, [, ], {, 1l, ,, 1l, ,, 2l, ,]
[static, final, long, [, ], FACTORIALS, =, new, long, [, ], {, 1l, ,, 1l, ,, 2l, ,, 6l, ,]
[long, [, ], FACTORIALS, =, new, long, [, ], {, 1l, ,, 1l, ,, 2l, ,, 6l, ,, 24l, ,]
[], FACTORIALS, =, new, long, [, ], {, 1l, ,, 1l, ,, 2l, ,, 6l, ,, 24l, ,, 120l, ,]
[=, new, long, [, ], {, 1l, ,, 1l, ,, 2l, ,, 6l, ,, 24l, ,, 120l, ,, 720l, ,]
[long, [, ], {, 1l, ,, 1l, ,, 2l, ,, 6l, ,, 24l, ,, 120l, ,, 720l, ,, 5040l, ,]
[], {, 1l, ,, 1l, ,, 2l, ,, 6l, ,, 24l, ,, 120l, ,, 720l, ,, 5040l, ,, 40320l, ,]
[1l, ,, 1l, ,, 2l, ,, 6l, ,, 24l, ,, 120l, ,, 720l, ,, 5040l, ,, 40320l, ,, 362880l, ,]
[1l, ,, 2l, ,, 6l, ,, 24l, ,, 120l, ,, 720l, ,, 5040l, ,, 40320l, ,, 362880l, ,, 3628800l, ,]
[2l, ,, 6l, ,, 24l, ,, 120l, ,, 720l, ,, 5040l, ,, 40320l, ,, 362880l, ,, 3628800l, ,, 39916800l, ,]
[6l, ,, 24l, ,, 120l, ,, 720l, ,, 5040l, ,, 40320l, ,, 362880l, ,, 3628800l, ,, 39916800l, ,, 479001600l, ,]
[24l, ,, 120l, ,, 720l, ,, 5040l, ,, 40320l, ,, 362880l, ,, 3628800l, ,, 39916800l, ,, 479001600l, ,, 6227020800l, ,]
[120l, ,, 720l, ,, 5040l, ,, 40320l, ,, 362880l, ,, 3628800l, ,, 39916800l, ,, 479001600l, ,, 6227020800l, ,, 87178291200l, ,]
[720l, ,, 5040l, ,, 40320l, ,, 362880l, ,, 3628800l, ,, 39916800l, ,, 479001600l, ,, 6227020800l, ,, 87178291200l, ,, 1307674368000l, ,]
[5040l, ,, 40320l, ,, 362880l, ,, 3628800l, ,, 39916800l, ,, 479001600l, ,, 6227020800l, ,, 87178291200l, ,, 1307674368000l, ,, 20922789888000l, ,]
[40320l, ,, 362880l, ,, 3628800l, ,, 39916800l, ,, 479001600l, ,, 6227020800l, ,, 87178291200l, ,, 1307674368000l, ,, 20922789888000l, ,, 355687428096000l, ,]
[362880l, ,, 3628800l, ,, 39916800l, ,, 479001600l, ,, 6227020800l, ,, 87178291200l, ,, 1307674368000l, ,, 20922789888000l, ,, 355687428096000l, ,, 6402373705728000l, ,]
[3628800l, ,, 39916800l, ,, 479001600l, ,, 6227020800l, ,, 87178291200l, ,, 1307674368000l, ,, 20922789888000l, ,, 355687428096000l, ,, 6402373705728000l, ,, 121645100408832000l, ,]
[,, 6402373705728000l, ,, 121645100408832000l, ,, 2432902008176640000l, }, ;, static, final, AtomicReference, <, long, [, ], [, ], >, STIRLING_S2, =]
[AtomicReference, <, long, [, ], [, ], >, STIRLING_S2, =, new, AtomicReference, <, long, [, ], [, ], >, (]
[public, static, long, binomialCoefficient, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {]
[public, static, long, binomialCoefficient, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {]
[(, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (]
[int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,]
[k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (]
[k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (]
[), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (, (]
[), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (, (]
[NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (, (, n, ==]
[,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (, (, n, ==, k, ), ||]
[MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (, (, n, ==, k, ), ||, (]
[MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (, (, n, ==, k, ), ||, (]
[CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (, (, n, ==, k, ), ||, (, k, ==]
[,, k, ), ;, if, (, (, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return]
[(, (, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return, 1, ;, }, if, (]
[(, (, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return, 1, ;, }, if, (]
[(, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return, 1, ;, }, if, (, (]
[(, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return, 1, ;, }, if, (, (]
[==, k, ), ||, (, k, ==, 0, ), ), {, return, 1, ;, }, if, (, (, k, ==]
[||, (, k, ==, 0, ), ), {, return, 1, ;, }, if, (, (, k, ==, 1, ), ||]
[(, k, ==, 0, ), ), {, return, 1, ;, }, if, (, (, k, ==, 1, ), ||, (]
[(, k, ==, 0, ), ), {, return, 1, ;, }, if, (, (, k, ==, 1, ), ||, (]
[==, 0, ), ), {, return, 1, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==]
[==, 0, ), ), {, return, 1, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==]
[), ), {, return, 1, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -]
[;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -, 1, ), ), {, return]
[k, ==, 1, ), ||, (, k, ==, n, -, 1, ), ), {, return, n, ;, }, if, (]
[k, ==, 1, ), ||, (, k, ==, n, -, 1, ), ), {, return, n, ;, }, if, (]
[1, ), ||, (, k, ==, n, -, 1, ), ), {, return, n, ;, }, if, (, k, >]
[1, ), ||, (, k, ==, n, -, 1, ), ), {, return, n, ;, }, if, (, k, >]
[||, (, k, ==, n, -, 1, ), ), {, return, n, ;, }, if, (, k, >, n, /]
[n, -, 1, ), ), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {, return]
[1, ), ), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficient, (]
[), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficient, (, n, ,]
[), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficient, (, n, ,]
[return, n, ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficient, (, n, ,, n, -]
[>, n, /, 2, ), {, return, binomialCoefficient, (, n, ,, n, -, k, ), ;, }, long, result, =]
[), {, return, binomialCoefficient, (, n, ,, n, -, k, ), ;, }, long, result, =, 1, ;, if, (]
[), {, return, binomialCoefficient, (, n, ,, n, -, k, ), ;, }, long, result, =, 1, ;, if, (]
[return, binomialCoefficient, (, n, ,, n, -, k, ), ;, }, long, result, =, 1, ;, if, (, n, <=]
[-, k, ), ;, }, long, result, =, 1, ;, if, (, n, <=, 61, ), {, int, i, =]
[-, k, ), ;, }, long, result, =, 1, ;, if, (, n, <=, 61, ), {, int, i, =]
[-, k, ), ;, }, long, result, =, 1, ;, if, (, n, <=, 61, ), {, int, i, =]
[), ;, }, long, result, =, 1, ;, if, (, n, <=, 61, ), {, int, i, =, n, -]
[}, long, result, =, 1, ;, if, (, n, <=, 61, ), {, int, i, =, n, -, k, +]
[(, n, <=, 61, ), {, int, i, =, n, -, k, +, 1, ;, for, (, int, j, =]
[<=, 61, ), {, int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1, ;]
[<=, 61, ), {, int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1, ;]
[), {, int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1, ;, j, <=]
[int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;]
[int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;]
[-, k, +, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {]
[+, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {, result, =]
[+, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {, result, =]
[+, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {, result, =]
[;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {, result, =, result, *]
[(, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {, result, =, result, *, i, /]
[j, =, 1, ;, j, <=, k, ;, j, ++, ), {, result, =, result, *, i, /, j, ;]
[j, =, 1, ;, j, <=, k, ;, j, ++, ), {, result, =, result, *, i, /, j, ;]
[j, ++, ), {, result, =, result, *, i, /, j, ;, i, ++, ;, }, }, else, if, (]
[j, ++, ), {, result, =, result, *, i, /, j, ;, i, ++, ;, }, }, else, if, (]
[), {, result, =, result, *, i, /, j, ;, i, ++, ;, }, }, else, if, (, n, <=]
[i, /, j, ;, i, ++, ;, }, }, else, if, (, n, <=, 66, ), {, int, i, =]
[i, /, j, ;, i, ++, ;, }, }, else, if, (, n, <=, 66, ), {, int, i, =]
[i, /, j, ;, i, ++, ;, }, }, else, if, (, n, <=, 66, ), {, int, i, =]
[j, ;, i, ++, ;, }, }, else, if, (, n, <=, 66, ), {, int, i, =, n, -]
[i, ++, ;, }, }, else, if, (, n, <=, 66, ), {, int, i, =, n, -, k, +]
[(, n, <=, 66, ), {, int, i, =, n, -, k, +, 1, ;, for, (, int, j, =]
[<=, 66, ), {, int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1, ;]
[<=, 66, ), {, int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1, ;]
[), {, int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1, ;, j, <=]
[int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;]
[int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;]
[;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {, final, long, d, =]
[;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {, final, long, d, =]
[j, =, 1, ;, j, <=, k, ;, j, ++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (]
[1, ;, j, <=, k, ;, j, ++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,]
[<=, k, ;, j, ++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;]
[;, j, ++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =]
[;, j, ++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =]
[j, ++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =, (]
[j, ++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =, (]
[), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =, (, result, /]
[{, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =, (, result, /, (]
[{, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =, (, result, /, (]
[long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =, (, result, /, (, j, /]
[., gcd, (, i, ,, j, ), ;, result, =, (, result, /, (, j, /, d, ), ), *]
[gcd, (, i, ,, j, ), ;, result, =, (, result, /, (, j, /, d, ), ), *, (]
[gcd, (, i, ,, j, ), ;, result, =, (, result, /, (, j, /, d, ), ), *, (]
[i, ,, j, ), ;, result, =, (, result, /, (, j, /, d, ), ), *, (, i, /]
[), ;, result, =, (, result, /, (, j, /, d, ), ), *, (, i, /, d, ), ;]
[), ;, result, =, (, result, /, (, j, /, d, ), ), *, (, i, /, d, ), ;]
[d, ), ), *, (, i, /, d, ), ;, i, ++, ;, }, }, else, {, int, i, =]
[d, ), ), *, (, i, /, d, ), ;, i, ++, ;, }, }, else, {, int, i, =]
[d, ), ), *, (, i, /, d, ), ;, i, ++, ;, }, }, else, {, int, i, =]
[), *, (, i, /, d, ), ;, i, ++, ;, }, }, else, {, int, i, =, n, -]
[(, i, /, d, ), ;, i, ++, ;, }, }, else, {, int, i, =, n, -, k, +]
[++, ;, }, }, else, {, int, i, =, n, -, k, +, 1, ;, for, (, int, j, =]
[}, }, else, {, int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1, ;]
[}, }, else, {, int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1, ;]
[else, {, int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1, ;, j, <=]
[int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;]
[int, i, =, n, -, k, +, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;]
[;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {, final, long, d, =]
[;, for, (, int, j, =, 1, ;, j, <=, k, ;, j, ++, ), {, final, long, d, =]
[j, =, 1, ;, j, <=, k, ;, j, ++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (]
[1, ;, j, <=, k, ;, j, ++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,]
[<=, k, ;, j, ++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;]
[;, j, ++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =]
[;, j, ++, ), {, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =]
[{, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =, ArithmeticUtils, ., mulAndCheck, (]
[{, final, long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =, ArithmeticUtils, ., mulAndCheck, (]
[long, d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =, ArithmeticUtils, ., mulAndCheck, (, result, /]
[d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =, ArithmeticUtils, ., mulAndCheck, (, result, /, (]
[d, =, ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =, ArithmeticUtils, ., mulAndCheck, (, result, /, (]
[ArithmeticUtils, ., gcd, (, i, ,, j, ), ;, result, =, ArithmeticUtils, ., mulAndCheck, (, result, /, (, j, /]
[(, i, ,, j, ), ;, result, =, ArithmeticUtils, ., mulAndCheck, (, result, /, (, j, /, d, ), ,]
[(, i, ,, j, ), ;, result, =, ArithmeticUtils, ., mulAndCheck, (, result, /, (, j, /, d, ), ,]
[,, j, ), ;, result, =, ArithmeticUtils, ., mulAndCheck, (, result, /, (, j, /, d, ), ,, i, /]
[;, result, =, ArithmeticUtils, ., mulAndCheck, (, result, /, (, j, /, d, ), ,, i, /, d, ), ;]
[;, result, =, ArithmeticUtils, ., mulAndCheck, (, result, /, (, j, /, d, ), ,, i, /, d, ), ;]
[(, result, /, (, j, /, d, ), ,, i, /, d, ), ;, i, ++, ;, }, }, return]
[public, static, double, binomialCoefficientDouble, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {]
[public, static, double, binomialCoefficientDouble, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {]
[(, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (]
[int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,]
[k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (]
[k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (]
[), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (, (]
[), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (, (]
[NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (, (, n, ==]
[,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (, (, n, ==, k, ), ||]
[MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (, (, n, ==, k, ), ||, (]
[MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (, (, n, ==, k, ), ||, (]
[CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (, (, n, ==, k, ), ||, (, k, ==]
[,, k, ), ;, if, (, (, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return]
[(, (, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return, 1d, ;, }, if, (]
[(, (, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return, 1d, ;, }, if, (]
[(, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return, 1d, ;, }, if, (, (]
[(, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return, 1d, ;, }, if, (, (]
[==, k, ), ||, (, k, ==, 0, ), ), {, return, 1d, ;, }, if, (, (, k, ==]
[||, (, k, ==, 0, ), ), {, return, 1d, ;, }, if, (, (, k, ==, 1, ), ||]
[(, k, ==, 0, ), ), {, return, 1d, ;, }, if, (, (, k, ==, 1, ), ||, (]
[(, k, ==, 0, ), ), {, return, 1d, ;, }, if, (, (, k, ==, 1, ), ||, (]
[==, 0, ), ), {, return, 1d, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==]
[==, 0, ), ), {, return, 1d, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==]
[), ), {, return, 1d, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -]
[;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -, 1, ), ), {, return]
[k, ==, 1, ), ||, (, k, ==, n, -, 1, ), ), {, return, n, ;, }, if, (]
[k, ==, 1, ), ||, (, k, ==, n, -, 1, ), ), {, return, n, ;, }, if, (]
[1, ), ||, (, k, ==, n, -, 1, ), ), {, return, n, ;, }, if, (, k, >]
[1, ), ||, (, k, ==, n, -, 1, ), ), {, return, n, ;, }, if, (, k, >]
[||, (, k, ==, n, -, 1, ), ), {, return, n, ;, }, if, (, k, >, n, /]
[n, -, 1, ), ), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {, return]
[1, ), ), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficientDouble, (]
[), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficientDouble, (, n, ,]
[), {, return, n, ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficientDouble, (, n, ,]
[return, n, ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficientDouble, (, n, ,, n, -]
[k, >, n, /, 2, ), {, return, binomialCoefficientDouble, (, n, ,, n, -, k, ), ;, }, if, (]
[k, >, n, /, 2, ), {, return, binomialCoefficientDouble, (, n, ,, n, -, k, ), ;, }, if, (]
[n, /, 2, ), {, return, binomialCoefficientDouble, (, n, ,, n, -, k, ), ;, }, if, (, n, <]
[{, return, binomialCoefficientDouble, (, n, ,, n, -, k, ), ;, }, if, (, n, <, 67, ), {, return]
[binomialCoefficientDouble, (, n, ,, n, -, k, ), ;, }, if, (, n, <, 67, ), {, return, binomialCoefficient, (]
[n, ,, n, -, k, ), ;, }, if, (, n, <, 67, ), {, return, binomialCoefficient, (, n, ,]
[}, if, (, n, <, 67, ), {, return, binomialCoefficient, (, n, ,, k, ), ;, }, double, result, =]
[{, return, binomialCoefficient, (, n, ,, k, ), ;, }, double, result, =, 1d, ;, for, (, int, i, =]
[binomialCoefficient, (, n, ,, k, ), ;, }, double, result, =, 1d, ;, for, (, int, i, =, 1, ;]
[binomialCoefficient, (, n, ,, k, ), ;, }, double, result, =, 1d, ;, for, (, int, i, =, 1, ;]
[n, ,, k, ), ;, }, double, result, =, 1d, ;, for, (, int, i, =, 1, ;, i, <=]
[k, ), ;, }, double, result, =, 1d, ;, for, (, int, i, =, 1, ;, i, <=, k, ;]
[k, ), ;, }, double, result, =, 1d, ;, for, (, int, i, =, 1, ;, i, <=, k, ;]
[double, result, =, 1d, ;, for, (, int, i, =, 1, ;, i, <=, k, ;, i, ++, ), {]
[=, 1d, ;, for, (, int, i, =, 1, ;, i, <=, k, ;, i, ++, ), {, result, *=]
[=, 1d, ;, for, (, int, i, =, 1, ;, i, <=, k, ;, i, ++, ), {, result, *=]
[for, (, int, i, =, 1, ;, i, <=, k, ;, i, ++, ), {, result, *=, (, double, )]
[(, int, i, =, 1, ;, i, <=, k, ;, i, ++, ), {, result, *=, (, double, ), (]
[(, int, i, =, 1, ;, i, <=, k, ;, i, ++, ), {, result, *=, (, double, ), (]
[(, int, i, =, 1, ;, i, <=, k, ;, i, ++, ), {, result, *=, (, double, ), (]
[i, =, 1, ;, i, <=, k, ;, i, ++, ), {, result, *=, (, double, ), (, n, -]
[1, ;, i, <=, k, ;, i, ++, ), {, result, *=, (, double, ), (, n, -, k, +]
[<=, k, ;, i, ++, ), {, result, *=, (, double, ), (, n, -, k, +, i, ), /]
[i, ++, ), {, result, *=, (, double, ), (, n, -, k, +, i, ), /, (, double, )]
[result, *=, (, double, ), (, n, -, k, +, i, ), /, (, double, ), i, ;, }, return]
[result, *=, (, double, ), (, n, -, k, +, i, ), /, (, double, ), i, ;, }, return]
[), (, n, -, k, +, i, ), /, (, double, ), i, ;, }, return, FastMath, ., floor, (]
[), (, n, -, k, +, i, ), /, (, double, ), i, ;, }, return, FastMath, ., floor, (]
[n, -, k, +, i, ), /, (, double, ), i, ;, }, return, FastMath, ., floor, (, result, +]
[public, static, double, binomialCoefficientLog, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {]
[public, static, double, binomialCoefficientLog, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {]
[(, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (]
[int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,]
[k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (]
[k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (]
[), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (, (]
[), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (, (]
[NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (, (, n, ==]
[,, MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (, (, n, ==, k, ), ||]
[MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (, (, n, ==, k, ), ||, (]
[MathArithmeticException, {, CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (, (, n, ==, k, ), ||, (]
[CombinatoricsUtils, ., checkBinomial, (, n, ,, k, ), ;, if, (, (, n, ==, k, ), ||, (, k, ==]
[,, k, ), ;, if, (, (, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return]
[(, (, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return, 0, ;, }, if, (]
[(, (, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return, 0, ;, }, if, (]
[(, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return, 0, ;, }, if, (, (]
[(, n, ==, k, ), ||, (, k, ==, 0, ), ), {, return, 0, ;, }, if, (, (]
[==, k, ), ||, (, k, ==, 0, ), ), {, return, 0, ;, }, if, (, (, k, ==]
[||, (, k, ==, 0, ), ), {, return, 0, ;, }, if, (, (, k, ==, 1, ), ||]
[(, k, ==, 0, ), ), {, return, 0, ;, }, if, (, (, k, ==, 1, ), ||, (]
[(, k, ==, 0, ), ), {, return, 0, ;, }, if, (, (, k, ==, 1, ), ||, (]
[==, 0, ), ), {, return, 0, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==]
[==, 0, ), ), {, return, 0, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==]
[), ), {, return, 0, ;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -]
[;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -, 1, ), ), {, return]
[;, }, if, (, (, k, ==, 1, ), ||, (, k, ==, n, -, 1, ), ), {, return]
[(, k, ==, 1, ), ||, (, k, ==, n, -, 1, ), ), {, return, FastMath, ., log, (]
[(, k, ==, n, -, 1, ), ), {, return, FastMath, ., log, (, n, ), ;, }, if, (]
[(, k, ==, n, -, 1, ), ), {, return, FastMath, ., log, (, n, ), ;, }, if, (]
[==, n, -, 1, ), ), {, return, FastMath, ., log, (, n, ), ;, }, if, (, n, <]
[), ), {, return, FastMath, ., log, (, n, ), ;, }, if, (, n, <, 67, ), {, return]
[), ), {, return, FastMath, ., log, (, n, ), ;, }, if, (, n, <, 67, ), {, return]
[FastMath, ., log, (, n, ), ;, }, if, (, n, <, 67, ), {, return, FastMath, ., log, (]
[log, (, n, ), ;, }, if, (, n, <, 67, ), {, return, FastMath, ., log, (, binomialCoefficient, (]
[n, ), ;, }, if, (, n, <, 67, ), {, return, FastMath, ., log, (, binomialCoefficient, (, n, ,]
[<, 67, ), {, return, FastMath, ., log, (, binomialCoefficient, (, n, ,, k, ), ), ;, }, if, (]
[<, 67, ), {, return, FastMath, ., log, (, binomialCoefficient, (, n, ,, k, ), ), ;, }, if, (]
[), {, return, FastMath, ., log, (, binomialCoefficient, (, n, ,, k, ), ), ;, }, if, (, n, <]
[., log, (, binomialCoefficient, (, n, ,, k, ), ), ;, }, if, (, n, <, 1030, ), {, return]
[., log, (, binomialCoefficient, (, n, ,, k, ), ), ;, }, if, (, n, <, 1030, ), {, return]
[(, n, ,, k, ), ), ;, }, if, (, n, <, 1030, ), {, return, FastMath, ., log, (]
[,, k, ), ), ;, }, if, (, n, <, 1030, ), {, return, FastMath, ., log, (, binomialCoefficientDouble, (]
[), ), ;, }, if, (, n, <, 1030, ), {, return, FastMath, ., log, (, binomialCoefficientDouble, (, n, ,]
[<, 1030, ), {, return, FastMath, ., log, (, binomialCoefficientDouble, (, n, ,, k, ), ), ;, }, if, (]
[<, 1030, ), {, return, FastMath, ., log, (, binomialCoefficientDouble, (, n, ,, k, ), ), ;, }, if, (]
[), {, return, FastMath, ., log, (, binomialCoefficientDouble, (, n, ,, k, ), ), ;, }, if, (, k, >]
[), {, return, FastMath, ., log, (, binomialCoefficientDouble, (, n, ,, k, ), ), ;, }, if, (, k, >]
[return, FastMath, ., log, (, binomialCoefficientDouble, (, n, ,, k, ), ), ;, }, if, (, k, >, n, /]
[(, binomialCoefficientDouble, (, n, ,, k, ), ), ;, }, if, (, k, >, n, /, 2, ), {, return]
[(, n, ,, k, ), ), ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficientLog, (]
[,, k, ), ), ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficientLog, (, n, ,]
[,, k, ), ), ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficientLog, (, n, ,]
[), ), ;, }, if, (, k, >, n, /, 2, ), {, return, binomialCoefficientLog, (, n, ,, n, -]
[>, n, /, 2, ), {, return, binomialCoefficientLog, (, n, ,, n, -, k, ), ;, }, double, logSum, =]
[binomialCoefficientLog, (, n, ,, n, -, k, ), ;, }, double, logSum, =, 0, ;, for, (, int, i, =]
[binomialCoefficientLog, (, n, ,, n, -, k, ), ;, }, double, logSum, =, 0, ;, for, (, int, i, =]
[binomialCoefficientLog, (, n, ,, n, -, k, ), ;, }, double, logSum, =, 0, ;, for, (, int, i, =]
[n, ,, n, -, k, ), ;, }, double, logSum, =, 0, ;, for, (, int, i, =, n, -]
[n, -, k, ), ;, }, double, logSum, =, 0, ;, for, (, int, i, =, n, -, k, +]
[k, ), ;, }, double, logSum, =, 0, ;, for, (, int, i, =, n, -, k, +, 1, ;]
[k, ), ;, }, double, logSum, =, 0, ;, for, (, int, i, =, n, -, k, +, 1, ;]
[;, }, double, logSum, =, 0, ;, for, (, int, i, =, n, -, k, +, 1, ;, i, <=]
[double, logSum, =, 0, ;, for, (, int, i, =, n, -, k, +, 1, ;, i, <=, n, ;]
[double, logSum, =, 0, ;, for, (, int, i, =, n, -, k, +, 1, ;, i, <=, n, ;]
[;, for, (, int, i, =, n, -, k, +, 1, ;, i, <=, n, ;, i, ++, ), {]
[(, int, i, =, n, -, k, +, 1, ;, i, <=, n, ;, i, ++, ), {, logSum, +=]
[(, int, i, =, n, -, k, +, 1, ;, i, <=, n, ;, i, ++, ), {, logSum, +=]
[n, -, k, +, 1, ;, i, <=, n, ;, i, ++, ), {, logSum, +=, FastMath, ., log, (]
[;, i, ++, ), {, logSum, +=, FastMath, ., log, (, i, ), ;, }, for, (, int, i, =]
[++, ), {, logSum, +=, FastMath, ., log, (, i, ), ;, }, for, (, int, i, =, 2, ;]
[++, ), {, logSum, +=, FastMath, ., log, (, i, ), ;, }, for, (, int, i, =, 2, ;]
[{, logSum, +=, FastMath, ., log, (, i, ), ;, }, for, (, int, i, =, 2, ;, i, <=]
[+=, FastMath, ., log, (, i, ), ;, }, for, (, int, i, =, 2, ;, i, <=, k, ;]
[+=, FastMath, ., log, (, i, ), ;, }, for, (, int, i, =, 2, ;, i, <=, k, ;]
[(, i, ), ;, }, for, (, int, i, =, 2, ;, i, <=, k, ;, i, ++, ), {]
[), ;, }, for, (, int, i, =, 2, ;, i, <=, k, ;, i, ++, ), {, logSum, -=]
[), ;, }, for, (, int, i, =, 2, ;, i, <=, k, ;, i, ++, ), {, logSum, -=]
[(, int, i, =, 2, ;, i, <=, k, ;, i, ++, ), {, logSum, -=, FastMath, ., log, (]
[;, i, <=, k, ;, i, ++, ), {, logSum, -=, FastMath, ., log, (, i, ), ;, }, return]
[return, logSum, ;, }, public, static, long, factorial, (, final, int, n, ), throws, NotPositiveException, ,, MathArithmeticException, {, if, (]
[return, logSum, ;, }, public, static, long, factorial, (, final, int, n, ), throws, NotPositiveException, ,, MathArithmeticException, {, if, (]
[;, }, public, static, long, factorial, (, final, int, n, ), throws, NotPositiveException, ,, MathArithmeticException, {, if, (, n, <]
[long, factorial, (, final, int, n, ), throws, NotPositiveException, ,, MathArithmeticException, {, if, (, n, <, 0, ), {, throw]
[final, int, n, ), throws, NotPositiveException, ,, MathArithmeticException, {, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (]
[final, int, n, ), throws, NotPositiveException, ,, MathArithmeticException, {, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (]
[throws, NotPositiveException, ,, MathArithmeticException, {, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,]
[(, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (]
[(, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, >]
[throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, >, 20, ), {, throw]
[,, n, ), ;, }, if, (, n, >, 20, ), {, throw, new, MathArithmeticException, (, ), ;, }, return]
[,, n, ), ;, }, if, (, n, >, 20, ), {, throw, new, MathArithmeticException, (, ), ;, }, return]
[), ;, }, if, (, n, >, 20, ), {, throw, new, MathArithmeticException, (, ), ;, }, return, FACTORIALS, []
[FACTORIALS, [, n, ], ;, }, public, static, double, factorialDouble, (, final, int, n, ), throws, NotPositiveException, {, if, (]
[FACTORIALS, [, n, ], ;, }, public, static, double, factorialDouble, (, final, int, n, ), throws, NotPositiveException, {, if, (]
[n, ], ;, }, public, static, double, factorialDouble, (, final, int, n, ), throws, NotPositiveException, {, if, (, n, <]
[public, static, double, factorialDouble, (, final, int, n, ), throws, NotPositiveException, {, if, (, n, <, 0, ), {, throw]
[factorialDouble, (, final, int, n, ), throws, NotPositiveException, {, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (]
[factorialDouble, (, final, int, n, ), throws, NotPositiveException, {, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (]
[n, ), throws, NotPositiveException, {, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,]
[(, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (]
[(, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, <]
[throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, <, 21, ), {, return]
[throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, <, 21, ), {, return]
[NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, <, 21, ), {, return, FACTORIALS, []
[,, n, ), ;, }, if, (, n, <, 21, ), {, return, FACTORIALS, [, n, ], ;, }, return]
[,, n, ), ;, }, if, (, n, <, 21, ), {, return, FACTORIALS, [, n, ], ;, }, return]
[}, if, (, n, <, 21, ), {, return, FACTORIALS, [, n, ], ;, }, return, FastMath, ., floor, (]
[}, if, (, n, <, 21, ), {, return, FACTORIALS, [, n, ], ;, }, return, FastMath, ., floor, (]
[}, if, (, n, <, 21, ), {, return, FACTORIALS, [, n, ], ;, }, return, FastMath, ., floor, (]
[<, 21, ), {, return, FACTORIALS, [, n, ], ;, }, return, FastMath, ., floor, (, FastMath, ., exp, (]
[<, 21, ), {, return, FACTORIALS, [, n, ], ;, }, return, FastMath, ., floor, (, FastMath, ., exp, (]
[return, FACTORIALS, [, n, ], ;, }, return, FastMath, ., floor, (, FastMath, ., exp, (, CombinatoricsUtils, ., factorialLog, (]
[], ;, }, return, FastMath, ., floor, (, FastMath, ., exp, (, CombinatoricsUtils, ., factorialLog, (, n, ), ), +]
[), +, 0.5, ), ;, }, public, static, double, factorialLog, (, final, int, n, ), throws, NotPositiveException, {, if, (]
[), +, 0.5, ), ;, }, public, static, double, factorialLog, (, final, int, n, ), throws, NotPositiveException, {, if, (]
[0.5, ), ;, }, public, static, double, factorialLog, (, final, int, n, ), throws, NotPositiveException, {, if, (, n, <]
[public, static, double, factorialLog, (, final, int, n, ), throws, NotPositiveException, {, if, (, n, <, 0, ), {, throw]
[factorialLog, (, final, int, n, ), throws, NotPositiveException, {, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (]
[factorialLog, (, final, int, n, ), throws, NotPositiveException, {, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (]
[n, ), throws, NotPositiveException, {, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,]
[(, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (]
[(, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, <]
[throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, <, 21, ), {, return]
[throw, new, NotPositiveException, (, LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, <, 21, ), {, return]
[LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, <, 21, ), {, return, FastMath, ., log, (]
[LocalizedFormats, ., FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, <, 21, ), {, return, FastMath, ., log, (]
[FACTORIAL_NEGATIVE_PARAMETER, ,, n, ), ;, }, if, (, n, <, 21, ), {, return, FastMath, ., log, (, FACTORIALS, []
[n, <, 21, ), {, return, FastMath, ., log, (, FACTORIALS, [, n, ], ), ;, }, double, logSum, =]
[., log, (, FACTORIALS, [, n, ], ), ;, }, double, logSum, =, 0, ;, for, (, int, i, =]
[(, FACTORIALS, [, n, ], ), ;, }, double, logSum, =, 0, ;, for, (, int, i, =, 2, ;]
[(, FACTORIALS, [, n, ], ), ;, }, double, logSum, =, 0, ;, for, (, int, i, =, 2, ;]
[[, n, ], ), ;, }, double, logSum, =, 0, ;, for, (, int, i, =, 2, ;, i, <=]
[], ), ;, }, double, logSum, =, 0, ;, for, (, int, i, =, 2, ;, i, <=, n, ;]
[], ), ;, }, double, logSum, =, 0, ;, for, (, int, i, =, 2, ;, i, <=, n, ;]
[double, logSum, =, 0, ;, for, (, int, i, =, 2, ;, i, <=, n, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 2, ;, i, <=, n, ;, i, ++, ), {, logSum, +=]
[=, 0, ;, for, (, int, i, =, 2, ;, i, <=, n, ;, i, ++, ), {, logSum, +=]
[(, int, i, =, 2, ;, i, <=, n, ;, i, ++, ), {, logSum, +=, FastMath, ., log, (]
[;, i, <=, n, ;, i, ++, ), {, logSum, +=, FastMath, ., log, (, i, ), ;, }, return]
[long, stirlingS2, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, if, (]
[long, stirlingS2, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, if, (]
[(, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, if, (, k, <]
[,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, if, (, k, <, 0, ), {, throw]
[k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,, MathArithmeticException, {, if, (, k, <, 0, ), {, throw, new, NotPositiveException, (]
[,, MathArithmeticException, {, if, (, k, <, 0, ), {, throw, new, NotPositiveException, (, k, ), ;, }, if, (]
[,, MathArithmeticException, {, if, (, k, <, 0, ), {, throw, new, NotPositiveException, (, k, ), ;, }, if, (]
[{, if, (, k, <, 0, ), {, throw, new, NotPositiveException, (, k, ), ;, }, if, (, k, >]
[<, 0, ), {, throw, new, NotPositiveException, (, k, ), ;, }, if, (, k, >, n, ), {, throw]
[{, throw, new, NotPositiveException, (, k, ), ;, }, if, (, k, >, n, ), {, throw, new, NumberIsTooLargeException, (]
[new, NotPositiveException, (, k, ), ;, }, if, (, k, >, n, ), {, throw, new, NumberIsTooLargeException, (, k, ,]
[(, k, ), ;, }, if, (, k, >, n, ), {, throw, new, NumberIsTooLargeException, (, k, ,, n, ,]
[{, throw, new, NumberIsTooLargeException, (, k, ,, n, ,, true, ), ;, }, long, [, ], [, ], stirlingS2, =]
[{, throw, new, NumberIsTooLargeException, (, k, ,, n, ,, true, ), ;, }, long, [, ], [, ], stirlingS2, =]
[,, true, ), ;, }, long, [, ], [, ], stirlingS2, =, STIRLING_S2, ., get, (, ), ;, if, (]
[,, true, ), ;, }, long, [, ], [, ], stirlingS2, =, STIRLING_S2, ., get, (, ), ;, if, (]
[), ;, }, long, [, ], [, ], stirlingS2, =, STIRLING_S2, ., get, (, ), ;, if, (, stirlingS2, ==]
[], stirlingS2, =, STIRLING_S2, ., get, (, ), ;, if, (, stirlingS2, ==, null, ), {, final, int, maxIndex, =]
[=, STIRLING_S2, ., get, (, ), ;, if, (, stirlingS2, ==, null, ), {, final, int, maxIndex, =, 26, ;]
[., get, (, ), ;, if, (, stirlingS2, ==, null, ), {, final, int, maxIndex, =, 26, ;, stirlingS2, =]
[), ;, if, (, stirlingS2, ==, null, ), {, final, int, maxIndex, =, 26, ;, stirlingS2, =, new, long, []
[==, null, ), {, final, int, maxIndex, =, 26, ;, stirlingS2, =, new, long, [, maxIndex, ], [, ], ;]
[==, null, ), {, final, int, maxIndex, =, 26, ;, stirlingS2, =, new, long, [, maxIndex, ], [, ], ;]
[), {, final, int, maxIndex, =, 26, ;, stirlingS2, =, new, long, [, maxIndex, ], [, ], ;, stirlingS2, []
[int, maxIndex, =, 26, ;, stirlingS2, =, new, long, [, maxIndex, ], [, ], ;, stirlingS2, [, 0, ], =]
[;, stirlingS2, =, new, long, [, maxIndex, ], [, ], ;, stirlingS2, [, 0, ], =, new, long, [, ]]
[stirlingS2, =, new, long, [, maxIndex, ], [, ], ;, stirlingS2, [, 0, ], =, new, long, [, ], {]
[], ;, stirlingS2, [, 0, ], =, new, long, [, ], {, 1l, }, ;, for, (, int, i, =]
[stirlingS2, [, 0, ], =, new, long, [, ], {, 1l, }, ;, for, (, int, i, =, 1, ;]
[stirlingS2, [, 0, ], =, new, long, [, ], {, 1l, }, ;, for, (, int, i, =, 1, ;]
[0, ], =, new, long, [, ], {, 1l, }, ;, for, (, int, i, =, 1, ;, i, <]
[0, ], =, new, long, [, ], {, 1l, }, ;, for, (, int, i, =, 1, ;, i, <]
[long, [, ], {, 1l, }, ;, for, (, int, i, =, 1, ;, i, <, stirlingS2, ., length, ;]
[[, ], {, 1l, }, ;, for, (, int, i, =, 1, ;, i, <, stirlingS2, ., length, ;, ++]
[1l, }, ;, for, (, int, i, =, 1, ;, i, <, stirlingS2, ., length, ;, ++, i, ), {]
[1l, }, ;, for, (, int, i, =, 1, ;, i, <, stirlingS2, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 1, ;, i, <, stirlingS2, ., length, ;, ++, i, ), {, stirlingS2, []
[int, i, =, 1, ;, i, <, stirlingS2, ., length, ;, ++, i, ), {, stirlingS2, [, i, ], =]
[1, ;, i, <, stirlingS2, ., length, ;, ++, i, ), {, stirlingS2, [, i, ], =, new, long, []
[1, ;, i, <, stirlingS2, ., length, ;, ++, i, ), {, stirlingS2, [, i, ], =, new, long, []
[i, <, stirlingS2, ., length, ;, ++, i, ), {, stirlingS2, [, i, ], =, new, long, [, i, +]
[., length, ;, ++, i, ), {, stirlingS2, [, i, ], =, new, long, [, i, +, 1, ], ;]
[., length, ;, ++, i, ), {, stirlingS2, [, i, ], =, new, long, [, i, +, 1, ], ;]
[., length, ;, ++, i, ), {, stirlingS2, [, i, ], =, new, long, [, i, +, 1, ], ;]
[;, ++, i, ), {, stirlingS2, [, i, ], =, new, long, [, i, +, 1, ], ;, stirlingS2, []
[), {, stirlingS2, [, i, ], =, new, long, [, i, +, 1, ], ;, stirlingS2, [, i, ], []
[[, i, ], =, new, long, [, i, +, 1, ], ;, stirlingS2, [, i, ], [, 0, ], =]
[], =, new, long, [, i, +, 1, ], ;, stirlingS2, [, i, ], [, 0, ], =, 0, ;]
[], =, new, long, [, i, +, 1, ], ;, stirlingS2, [, i, ], [, 0, ], =, 0, ;]
[], =, new, long, [, i, +, 1, ], ;, stirlingS2, [, i, ], [, 0, ], =, 0, ;]
[new, long, [, i, +, 1, ], ;, stirlingS2, [, i, ], [, 0, ], =, 0, ;, stirlingS2, []
[i, +, 1, ], ;, stirlingS2, [, i, ], [, 0, ], =, 0, ;, stirlingS2, [, i, ], []
[], ;, stirlingS2, [, i, ], [, 0, ], =, 0, ;, stirlingS2, [, i, ], [, 1, ], =]
[stirlingS2, [, i, ], [, 0, ], =, 0, ;, stirlingS2, [, i, ], [, 1, ], =, 1, ;]
[stirlingS2, [, i, ], [, 0, ], =, 0, ;, stirlingS2, [, i, ], [, 1, ], =, 1, ;]
[stirlingS2, [, i, ], [, 0, ], =, 0, ;, stirlingS2, [, i, ], [, 1, ], =, 1, ;]
[i, ], [, 0, ], =, 0, ;, stirlingS2, [, i, ], [, 1, ], =, 1, ;, stirlingS2, []
[0, ], =, 0, ;, stirlingS2, [, i, ], [, 1, ], =, 1, ;, stirlingS2, [, i, ], []
[0, ;, stirlingS2, [, i, ], [, 1, ], =, 1, ;, stirlingS2, [, i, ], [, i, ], =]
[1, ], =, 1, ;, stirlingS2, [, i, ], [, i, ], =, 1, ;, for, (, int, j, =]
[=, 1, ;, stirlingS2, [, i, ], [, i, ], =, 1, ;, for, (, int, j, =, 2, ;]
[=, 1, ;, stirlingS2, [, i, ], [, i, ], =, 1, ;, for, (, int, j, =, 2, ;]
[;, stirlingS2, [, i, ], [, i, ], =, 1, ;, for, (, int, j, =, 2, ;, j, <]
[[, i, ], [, i, ], =, 1, ;, for, (, int, j, =, 2, ;, j, <, i, ;]
[i, ], [, i, ], =, 1, ;, for, (, int, j, =, 2, ;, j, <, i, ;, ++]
[i, ], =, 1, ;, for, (, int, j, =, 2, ;, j, <, i, ;, ++, j, ), {]
[i, ], =, 1, ;, for, (, int, j, =, 2, ;, j, <, i, ;, ++, j, ), {]
[i, ], =, 1, ;, for, (, int, j, =, 2, ;, j, <, i, ;, ++, j, ), {]
[=, 1, ;, for, (, int, j, =, 2, ;, j, <, i, ;, ++, j, ), {, stirlingS2, []
[for, (, int, j, =, 2, ;, j, <, i, ;, ++, j, ), {, stirlingS2, [, i, ], []
[j, =, 2, ;, j, <, i, ;, ++, j, ), {, stirlingS2, [, i, ], [, j, ], =]
[j, =, 2, ;, j, <, i, ;, ++, j, ), {, stirlingS2, [, i, ], [, j, ], =]
[j, =, 2, ;, j, <, i, ;, ++, j, ), {, stirlingS2, [, i, ], [, j, ], =]
[2, ;, j, <, i, ;, ++, j, ), {, stirlingS2, [, i, ], [, j, ], =, j, *]
[2, ;, j, <, i, ;, ++, j, ), {, stirlingS2, [, i, ], [, j, ], =, j, *]
[2, ;, j, <, i, ;, ++, j, ), {, stirlingS2, [, i, ], [, j, ], =, j, *]
[j, <, i, ;, ++, j, ), {, stirlingS2, [, i, ], [, j, ], =, j, *, stirlingS2, []
[j, <, i, ;, ++, j, ), {, stirlingS2, [, i, ], [, j, ], =, j, *, stirlingS2, []
[i, ;, ++, j, ), {, stirlingS2, [, i, ], [, j, ], =, j, *, stirlingS2, [, i, -]
[j, ), {, stirlingS2, [, i, ], [, j, ], =, j, *, stirlingS2, [, i, -, 1, ], []
[stirlingS2, [, i, ], [, j, ], =, j, *, stirlingS2, [, i, -, 1, ], [, j, ], +]
[stirlingS2, [, i, ], [, j, ], =, j, *, stirlingS2, [, i, -, 1, ], [, j, ], +]
[stirlingS2, [, i, ], [, j, ], =, j, *, stirlingS2, [, i, -, 1, ], [, j, ], +]
[i, ], [, j, ], =, j, *, stirlingS2, [, i, -, 1, ], [, j, ], +, stirlingS2, []
[i, ], [, j, ], =, j, *, stirlingS2, [, i, -, 1, ], [, j, ], +, stirlingS2, []
[[, j, ], =, j, *, stirlingS2, [, i, -, 1, ], [, j, ], +, stirlingS2, [, i, -]
[=, j, *, stirlingS2, [, i, -, 1, ], [, j, ], +, stirlingS2, [, i, -, 1, ], []
[=, j, *, stirlingS2, [, i, -, 1, ], [, j, ], +, stirlingS2, [, i, -, 1, ], []
[*, stirlingS2, [, i, -, 1, ], [, j, ], +, stirlingS2, [, i, -, 1, ], [, j, -]
[1, ], [, j, ], +, stirlingS2, [, i, -, 1, ], [, j, -, 1, ], ;, }, }]
[1, ], [, j, ], +, stirlingS2, [, i, -, 1, ], [, j, -, 1, ], ;, }, }]
[], +, stirlingS2, [, i, -, 1, ], [, j, -, 1, ], ;, }, }, STIRLING_S2, ., compareAndSet, (]
[stirlingS2, [, i, -, 1, ], [, j, -, 1, ], ;, }, }, STIRLING_S2, ., compareAndSet, (, null, ,]
[[, j, -, 1, ], ;, }, }, STIRLING_S2, ., compareAndSet, (, null, ,, stirlingS2, ), ;, }, if, (]
[[, j, -, 1, ], ;, }, }, STIRLING_S2, ., compareAndSet, (, null, ,, stirlingS2, ), ;, }, if, (]
[-, 1, ], ;, }, }, STIRLING_S2, ., compareAndSet, (, null, ,, stirlingS2, ), ;, }, if, (, n, <]
[-, 1, ], ;, }, }, STIRLING_S2, ., compareAndSet, (, null, ,, stirlingS2, ), ;, }, if, (, n, <]
[STIRLING_S2, ., compareAndSet, (, null, ,, stirlingS2, ), ;, }, if, (, n, <, stirlingS2, ., length, ), {, return]
[STIRLING_S2, ., compareAndSet, (, null, ,, stirlingS2, ), ;, }, if, (, n, <, stirlingS2, ., length, ), {, return]
[STIRLING_S2, ., compareAndSet, (, null, ,, stirlingS2, ), ;, }, if, (, n, <, stirlingS2, ., length, ), {, return]
[compareAndSet, (, null, ,, stirlingS2, ), ;, }, if, (, n, <, stirlingS2, ., length, ), {, return, stirlingS2, []
[,, stirlingS2, ), ;, }, if, (, n, <, stirlingS2, ., length, ), {, return, stirlingS2, [, n, ], []
[<, stirlingS2, ., length, ), {, return, stirlingS2, [, n, ], [, k, ], ;, }, else, {, if, (]
[<, stirlingS2, ., length, ), {, return, stirlingS2, [, n, ], [, k, ], ;, }, else, {, if, (]
[., length, ), {, return, stirlingS2, [, n, ], [, k, ], ;, }, else, {, if, (, k, ==]
[return, stirlingS2, [, n, ], [, k, ], ;, }, else, {, if, (, k, ==, 0, ), {, return]
[k, ], ;, }, else, {, if, (, k, ==, 0, ), {, return, 0, ;, }, else, if, (]
[k, ], ;, }, else, {, if, (, k, ==, 0, ), {, return, 0, ;, }, else, if, (]
[k, ], ;, }, else, {, if, (, k, ==, 0, ), {, return, 0, ;, }, else, if, (]
[;, }, else, {, if, (, k, ==, 0, ), {, return, 0, ;, }, else, if, (, k, ==]
[else, {, if, (, k, ==, 0, ), {, return, 0, ;, }, else, if, (, k, ==, 1, ||]
[else, {, if, (, k, ==, 0, ), {, return, 0, ;, }, else, if, (, k, ==, 1, ||]
[if, (, k, ==, 0, ), {, return, 0, ;, }, else, if, (, k, ==, 1, ||, k, ==]
[0, ), {, return, 0, ;, }, else, if, (, k, ==, 1, ||, k, ==, n, ), {, return]
[}, else, if, (, k, ==, 1, ||, k, ==, n, ), {, return, 1, ;, }, else, if, (]
[}, else, if, (, k, ==, 1, ||, k, ==, n, ), {, return, 1, ;, }, else, if, (]
[if, (, k, ==, 1, ||, k, ==, n, ), {, return, 1, ;, }, else, if, (, k, ==]
[1, ||, k, ==, n, ), {, return, 1, ;, }, else, if, (, k, ==, 2, ), {, return]
[1, ||, k, ==, n, ), {, return, 1, ;, }, else, if, (, k, ==, 2, ), {, return]
[||, k, ==, n, ), {, return, 1, ;, }, else, if, (, k, ==, 2, ), {, return, (]
[||, k, ==, n, ), {, return, 1, ;, }, else, if, (, k, ==, 2, ), {, return, (]
[==, n, ), {, return, 1, ;, }, else, if, (, k, ==, 2, ), {, return, (, 1l, <<]
[n, ), {, return, 1, ;, }, else, if, (, k, ==, 2, ), {, return, (, 1l, <<, (]
[n, ), {, return, 1, ;, }, else, if, (, k, ==, 2, ), {, return, (, 1l, <<, (]
[{, return, 1, ;, }, else, if, (, k, ==, 2, ), {, return, (, 1l, <<, (, n, -]
[}, else, if, (, k, ==, 2, ), {, return, (, 1l, <<, (, n, -, 1, ), ), -]
[2, ), {, return, (, 1l, <<, (, n, -, 1, ), ), -, 1l, ;, }, else, if, (]
[2, ), {, return, (, 1l, <<, (, n, -, 1, ), ), -, 1l, ;, }, else, if, (]
[{, return, (, 1l, <<, (, n, -, 1, ), ), -, 1l, ;, }, else, if, (, k, ==]
[{, return, (, 1l, <<, (, n, -, 1, ), ), -, 1l, ;, }, else, if, (, k, ==]
[(, 1l, <<, (, n, -, 1, ), ), -, 1l, ;, }, else, if, (, k, ==, n, -]
[n, -, 1, ), ), -, 1l, ;, }, else, if, (, k, ==, n, -, 1, ), {, return]
[1, ), ), -, 1l, ;, }, else, if, (, k, ==, n, -, 1, ), {, return, binomialCoefficient, (]
[), -, 1l, ;, }, else, if, (, k, ==, n, -, 1, ), {, return, binomialCoefficient, (, n, ,]
[==, n, -, 1, ), {, return, binomialCoefficient, (, n, ,, 2, ), ;, }, else, {, long, sum, =]
[{, return, binomialCoefficient, (, n, ,, 2, ), ;, }, else, {, long, sum, =, 0, ;, long, sign, =]
[{, return, binomialCoefficient, (, n, ,, 2, ), ;, }, else, {, long, sum, =, 0, ;, long, sign, =]
[return, binomialCoefficient, (, n, ,, 2, ), ;, }, else, {, long, sum, =, 0, ;, long, sign, =, (]
[return, binomialCoefficient, (, n, ,, 2, ), ;, }, else, {, long, sum, =, 0, ;, long, sign, =, (]
[binomialCoefficient, (, n, ,, 2, ), ;, }, else, {, long, sum, =, 0, ;, long, sign, =, (, (]
[binomialCoefficient, (, n, ,, 2, ), ;, }, else, {, long, sum, =, 0, ;, long, sign, =, (, (]
[n, ,, 2, ), ;, }, else, {, long, sum, =, 0, ;, long, sign, =, (, (, k, &]
[), ;, }, else, {, long, sum, =, 0, ;, long, sign, =, (, (, k, &, 0x1, ), ==]
[else, {, long, sum, =, 0, ;, long, sign, =, (, (, k, &, 0x1, ), ==, 0, ), ?]
[long, sum, =, 0, ;, long, sign, =, (, (, k, &, 0x1, ), ==, 0, ), ?, 1, :]
[sum, =, 0, ;, long, sign, =, (, (, k, &, 0x1, ), ==, 0, ), ?, 1, :, -]
[(, (, k, &, 0x1, ), ==, 0, ), ?, 1, :, -, 1, ;, for, (, int, j, =]
[k, &, 0x1, ), ==, 0, ), ?, 1, :, -, 1, ;, for, (, int, j, =, 1, ;]
[k, &, 0x1, ), ==, 0, ), ?, 1, :, -, 1, ;, for, (, int, j, =, 1, ;]
[0x1, ), ==, 0, ), ?, 1, :, -, 1, ;, for, (, int, j, =, 1, ;, j, <=]
[==, 0, ), ?, 1, :, -, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;]
[0, ), ?, 1, :, -, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;, ++]
[1, :, -, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;, ++, j, ), {]
[-, 1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;, ++, j, ), {, sign, =]
[1, ;, for, (, int, j, =, 1, ;, j, <=, k, ;, ++, j, ), {, sign, =, -]
[for, (, int, j, =, 1, ;, j, <=, k, ;, ++, j, ), {, sign, =, -, sign, ;]
[int, j, =, 1, ;, j, <=, k, ;, ++, j, ), {, sign, =, -, sign, ;, sum, +=]
[int, j, =, 1, ;, j, <=, k, ;, ++, j, ), {, sign, =, -, sign, ;, sum, +=]
[int, j, =, 1, ;, j, <=, k, ;, ++, j, ), {, sign, =, -, sign, ;, sum, +=]
[=, 1, ;, j, <=, k, ;, ++, j, ), {, sign, =, -, sign, ;, sum, +=, sign, *]
[;, j, <=, k, ;, ++, j, ), {, sign, =, -, sign, ;, sum, +=, sign, *, binomialCoefficient, (]
[<=, k, ;, ++, j, ), {, sign, =, -, sign, ;, sum, +=, sign, *, binomialCoefficient, (, k, ,]
[++, j, ), {, sign, =, -, sign, ;, sum, +=, sign, *, binomialCoefficient, (, k, ,, j, ), *]
[++, j, ), {, sign, =, -, sign, ;, sum, +=, sign, *, binomialCoefficient, (, k, ,, j, ), *]
[sign, =, -, sign, ;, sum, +=, sign, *, binomialCoefficient, (, k, ,, j, ), *, ArithmeticUtils, ., pow, (]
[-, sign, ;, sum, +=, sign, *, binomialCoefficient, (, k, ,, j, ), *, ArithmeticUtils, ., pow, (, j, ,]
[sign, *, binomialCoefficient, (, k, ,, j, ), *, ArithmeticUtils, ., pow, (, j, ,, n, ), ;, if, (]
[sign, *, binomialCoefficient, (, k, ,, j, ), *, ArithmeticUtils, ., pow, (, j, ,, n, ), ;, if, (]
[binomialCoefficient, (, k, ,, j, ), *, ArithmeticUtils, ., pow, (, j, ,, n, ), ;, if, (, sum, <]
[j, ), *, ArithmeticUtils, ., pow, (, j, ,, n, ), ;, if, (, sum, <, 0, ), {, throw]
[ArithmeticUtils, ., pow, (, j, ,, n, ), ;, if, (, sum, <, 0, ), {, throw, new, MathArithmeticException, (]
[ArithmeticUtils, ., pow, (, j, ,, n, ), ;, if, (, sum, <, 0, ), {, throw, new, MathArithmeticException, (]
[j, ,, n, ), ;, if, (, sum, <, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARGUMENT_OUTSIDE_DOMAIN, ,]
[n, ), ;, if, (, sum, <, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARGUMENT_OUTSIDE_DOMAIN, ,, n, ,]
[;, if, (, sum, <, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARGUMENT_OUTSIDE_DOMAIN, ,, n, ,, 0, ,]
[;, if, (, sum, <, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARGUMENT_OUTSIDE_DOMAIN, ,, n, ,, 0, ,]
[;, if, (, sum, <, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARGUMENT_OUTSIDE_DOMAIN, ,, n, ,, 0, ,]
[<, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARGUMENT_OUTSIDE_DOMAIN, ,, n, ,, 0, ,, stirlingS2, ., length, -]
[MathArithmeticException, (, LocalizedFormats, ., ARGUMENT_OUTSIDE_DOMAIN, ,, n, ,, 0, ,, stirlingS2, ., length, -, 1, ), ;, }, }, return]
[MathArithmeticException, (, LocalizedFormats, ., ARGUMENT_OUTSIDE_DOMAIN, ,, n, ,, 0, ,, stirlingS2, ., length, -, 1, ), ;, }, }, return]
[LocalizedFormats, ., ARGUMENT_OUTSIDE_DOMAIN, ,, n, ,, 0, ,, stirlingS2, ., length, -, 1, ), ;, }, }, return, sum, /]
[ARGUMENT_OUTSIDE_DOMAIN, ,, n, ,, 0, ,, stirlingS2, ., length, -, 1, ), ;, }, }, return, sum, /, factorial, (]
[}, }, }, public, static, Iterator, <, int, [, ], >, combinationsIterator, (, int, n, ,, int, k, ), {]
[}, public, static, Iterator, <, int, [, ], >, combinationsIterator, (, int, n, ,, int, k, ), {, checkBinomial, (]
[static, Iterator, <, int, [, ], >, combinationsIterator, (, int, n, ,, int, k, ), {, checkBinomial, (, n, ,]
[], >, combinationsIterator, (, int, n, ,, int, k, ), {, checkBinomial, (, n, ,, k, ), ;, if, (]
[], >, combinationsIterator, (, int, n, ,, int, k, ), {, checkBinomial, (, n, ,, k, ), ;, if, (]
[combinationsIterator, (, int, n, ,, int, k, ), {, checkBinomial, (, n, ,, k, ), ;, if, (, k, ==]
[,, int, k, ), {, checkBinomial, (, n, ,, k, ), ;, if, (, k, ==, 0, ), {, return]
[), {, checkBinomial, (, n, ,, k, ), ;, if, (, k, ==, 0, ), {, return, new, SingletonIterator, (]
[n, ,, k, ), ;, if, (, k, ==, 0, ), {, return, new, SingletonIterator, (, new, int, [, ]]
[k, ==, 0, ), {, return, new, SingletonIterator, (, new, int, [, ], {, }, ), ;, }, if, (]
[k, ==, 0, ), {, return, new, SingletonIterator, (, new, int, [, ], {, }, ), ;, }, if, (]
[0, ), {, return, new, SingletonIterator, (, new, int, [, ], {, }, ), ;, }, if, (, k, ==]
[[, ], {, }, ), ;, }, if, (, k, ==, n, ), {, final, int, [, ], natural, =]
[}, ), ;, }, if, (, k, ==, n, ), {, final, int, [, ], natural, =, new, int, []
[n, ), {, final, int, [, ], natural, =, new, int, [, n, ], ;, for, (, int, i, =]
[{, final, int, [, ], natural, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;]
[{, final, int, [, ], natural, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;]
[int, [, ], natural, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[], natural, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[], natural, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, natural, []
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, natural, [, i, ], =]
[=, 0, ;, i, <, n, ;, i, ++, ), {, natural, [, i, ], =, i, ;, }, return]
[i, <, n, ;, i, ++, ), {, natural, [, i, ], =, i, ;, }, return, new, SingletonIterator, (]
[++, ), {, natural, [, i, ], =, i, ;, }, return, new, SingletonIterator, (, natural, ), ;, }, return]
[natural, [, i, ], =, i, ;, }, return, new, SingletonIterator, (, natural, ), ;, }, return, new, LexicographicCombinationIterator, (]
[i, ], =, i, ;, }, return, new, SingletonIterator, (, natural, ), ;, }, return, new, LexicographicCombinationIterator, (, n, ,]
[[, ], >, {, private, final, int, k, ;, private, final, int, [, ], c, ;, private, boolean, more, =]
[private, boolean, more, =, true, ;, private, int, j, ;, public, LexicographicCombinationIterator, (, int, n, ,, int, k, ), {]
[private, boolean, more, =, true, ;, private, int, j, ;, public, LexicographicCombinationIterator, (, int, n, ,, int, k, ), {]
[true, ;, private, int, j, ;, public, LexicographicCombinationIterator, (, int, n, ,, int, k, ), {, this, ., k, =]
[private, int, j, ;, public, LexicographicCombinationIterator, (, int, n, ,, int, k, ), {, this, ., k, =, k, ;]
[j, ;, public, LexicographicCombinationIterator, (, int, n, ,, int, k, ), {, this, ., k, =, k, ;, c, =]
[LexicographicCombinationIterator, (, int, n, ,, int, k, ), {, this, ., k, =, k, ;, c, =, new, int, []
[LexicographicCombinationIterator, (, int, n, ,, int, k, ), {, this, ., k, =, k, ;, c, =, new, int, []
[int, n, ,, int, k, ), {, this, ., k, =, k, ;, c, =, new, int, [, k, +]
[), {, this, ., k, =, k, ;, c, =, new, int, [, k, +, 3, ], ;, if, (]
[), {, this, ., k, =, k, ;, c, =, new, int, [, k, +, 3, ], ;, if, (]
[), {, this, ., k, =, k, ;, c, =, new, int, [, k, +, 3, ], ;, if, (]
[this, ., k, =, k, ;, c, =, new, int, [, k, +, 3, ], ;, if, (, k, ==]
[k, =, k, ;, c, =, new, int, [, k, +, 3, ], ;, if, (, k, ==, 0, ||]
[k, =, k, ;, c, =, new, int, [, k, +, 3, ], ;, if, (, k, ==, 0, ||]
[k, ;, c, =, new, int, [, k, +, 3, ], ;, if, (, k, ==, 0, ||, k, >=]
[=, new, int, [, k, +, 3, ], ;, if, (, k, ==, 0, ||, k, >=, n, ), {]
[int, [, k, +, 3, ], ;, if, (, k, ==, 0, ||, k, >=, n, ), {, more, =]
[==, 0, ||, k, >=, n, ), {, more, =, false, ;, return, ;, }, for, (, int, i, =]
[||, k, >=, n, ), {, more, =, false, ;, return, ;, }, for, (, int, i, =, 1, ;]
[||, k, >=, n, ), {, more, =, false, ;, return, ;, }, for, (, int, i, =, 1, ;]
[>=, n, ), {, more, =, false, ;, return, ;, }, for, (, int, i, =, 1, ;, i, <=]
[), {, more, =, false, ;, return, ;, }, for, (, int, i, =, 1, ;, i, <=, k, ;]
[), {, more, =, false, ;, return, ;, }, for, (, int, i, =, 1, ;, i, <=, k, ;]
[false, ;, return, ;, }, for, (, int, i, =, 1, ;, i, <=, k, ;, i, ++, ), {]
[false, ;, return, ;, }, for, (, int, i, =, 1, ;, i, <=, k, ;, i, ++, ), {]
[return, ;, }, for, (, int, i, =, 1, ;, i, <=, k, ;, i, ++, ), {, c, []
[for, (, int, i, =, 1, ;, i, <=, k, ;, i, ++, ), {, c, [, i, ], =]
[for, (, int, i, =, 1, ;, i, <=, k, ;, i, ++, ), {, c, [, i, ], =]
[int, i, =, 1, ;, i, <=, k, ;, i, ++, ), {, c, [, i, ], =, i, -]
[1, ;, i, <=, k, ;, i, ++, ), {, c, [, i, ], =, i, -, 1, ;, }]
[1, ;, i, <=, k, ;, i, ++, ), {, c, [, i, ], =, i, -, 1, ;, }]
[i, <=, k, ;, i, ++, ), {, c, [, i, ], =, i, -, 1, ;, }, c, []
[i, <=, k, ;, i, ++, ), {, c, [, i, ], =, i, -, 1, ;, }, c, []
[k, ;, i, ++, ), {, c, [, i, ], =, i, -, 1, ;, }, c, [, k, +]
[++, ), {, c, [, i, ], =, i, -, 1, ;, }, c, [, k, +, 1, ], =]
[{, c, [, i, ], =, i, -, 1, ;, }, c, [, k, +, 1, ], =, n, ;]
[{, c, [, i, ], =, i, -, 1, ;, }, c, [, k, +, 1, ], =, n, ;]
[[, i, ], =, i, -, 1, ;, }, c, [, k, +, 1, ], =, n, ;, c, []
[[, i, ], =, i, -, 1, ;, }, c, [, k, +, 1, ], =, n, ;, c, []
[], =, i, -, 1, ;, }, c, [, k, +, 1, ], =, n, ;, c, [, k, +]
[-, 1, ;, }, c, [, k, +, 1, ], =, n, ;, c, [, k, +, 2, ], =]
[;, }, c, [, k, +, 1, ], =, n, ;, c, [, k, +, 2, ], =, 0, ;]
[c, [, k, +, 1, ], =, n, ;, c, [, k, +, 2, ], =, 0, ;, j, =]
[[, k, +, 2, ], =, 0, ;, j, =, k, ;, }, public, boolean, hasNext, (, ), {, return]
[public, boolean, hasNext, (, ), {, return, more, ;, }, public, int, [, ], next, (, ), {, if, (]
[boolean, hasNext, (, ), {, return, more, ;, }, public, int, [, ], next, (, ), {, if, (, !]
[{, return, more, ;, }, public, int, [, ], next, (, ), {, if, (, !, more, ), {, throw]
[{, if, (, !, more, ), {, throw, new, NoSuchElementException, (, ), ;, }, final, int, [, ], ret, =]
[!, more, ), {, throw, new, NoSuchElementException, (, ), ;, }, final, int, [, ], ret, =, new, int, []
[{, throw, new, NoSuchElementException, (, ), ;, }, final, int, [, ], ret, =, new, int, [, k, ], ;]
[{, throw, new, NoSuchElementException, (, ), ;, }, final, int, [, ], ret, =, new, int, [, k, ], ;]
[(, ), ;, }, final, int, [, ], ret, =, new, int, [, k, ], ;, System, ., arraycopy, (]
[;, }, final, int, [, ], ret, =, new, int, [, k, ], ;, System, ., arraycopy, (, c, ,]
[final, int, [, ], ret, =, new, int, [, k, ], ;, System, ., arraycopy, (, c, ,, 1, ,]
[[, ], ret, =, new, int, [, k, ], ;, System, ., arraycopy, (, c, ,, 1, ,, ret, ,]
[ret, =, new, int, [, k, ], ;, System, ., arraycopy, (, c, ,, 1, ,, ret, ,, 0, ,]
[], ;, System, ., arraycopy, (, c, ,, 1, ,, ret, ,, 0, ,, k, ), ;, int, x, =]
[arraycopy, (, c, ,, 1, ,, ret, ,, 0, ,, k, ), ;, int, x, =, 0, ;, if, (]
[arraycopy, (, c, ,, 1, ,, ret, ,, 0, ,, k, ), ;, int, x, =, 0, ;, if, (]
[c, ,, 1, ,, ret, ,, 0, ,, k, ), ;, int, x, =, 0, ;, if, (, j, >]
[,, ret, ,, 0, ,, k, ), ;, int, x, =, 0, ;, if, (, j, >, 0, ), {]
[,, 0, ,, k, ), ;, int, x, =, 0, ;, if, (, j, >, 0, ), {, x, =]
[,, k, ), ;, int, x, =, 0, ;, if, (, j, >, 0, ), {, x, =, j, ;]
[,, k, ), ;, int, x, =, 0, ;, if, (, j, >, 0, ), {, x, =, j, ;]
[), ;, int, x, =, 0, ;, if, (, j, >, 0, ), {, x, =, j, ;, c, []
[x, =, 0, ;, if, (, j, >, 0, ), {, x, =, j, ;, c, [, j, ], =]
[0, ;, if, (, j, >, 0, ), {, x, =, j, ;, c, [, j, ], =, x, ;]
[0, ;, if, (, j, >, 0, ), {, x, =, j, ;, c, [, j, ], =, x, ;]
[j, >, 0, ), {, x, =, j, ;, c, [, j, ], =, x, ;, j, --, ;, return]
[x, =, j, ;, c, [, j, ], =, x, ;, j, --, ;, return, ret, ;, }, if, (]
[x, =, j, ;, c, [, j, ], =, x, ;, j, --, ;, return, ret, ;, }, if, (]
[x, =, j, ;, c, [, j, ], =, x, ;, j, --, ;, return, ret, ;, }, if, (]
[x, =, j, ;, c, [, j, ], =, x, ;, j, --, ;, return, ret, ;, }, if, (]
[j, ;, c, [, j, ], =, x, ;, j, --, ;, return, ret, ;, }, if, (, c, []
[[, j, ], =, x, ;, j, --, ;, return, ret, ;, }, if, (, c, [, 1, ], +]
[], =, x, ;, j, --, ;, return, ret, ;, }, if, (, c, [, 1, ], +, 1, <]
[], =, x, ;, j, --, ;, return, ret, ;, }, if, (, c, [, 1, ], +, 1, <]
[x, ;, j, --, ;, return, ret, ;, }, if, (, c, [, 1, ], +, 1, <, c, []
[;, return, ret, ;, }, if, (, c, [, 1, ], +, 1, <, c, [, 2, ], ), {]
[;, return, ret, ;, }, if, (, c, [, 1, ], +, 1, <, c, [, 2, ], ), {]
[ret, ;, }, if, (, c, [, 1, ], +, 1, <, c, [, 2, ], ), {, c, []
[if, (, c, [, 1, ], +, 1, <, c, [, 2, ], ), {, c, [, 1, ], =]
[if, (, c, [, 1, ], +, 1, <, c, [, 2, ], ), {, c, [, 1, ], =]
[if, (, c, [, 1, ], +, 1, <, c, [, 2, ], ), {, c, [, 1, ], =]
[c, [, 1, ], +, 1, <, c, [, 2, ], ), {, c, [, 1, ], =, c, []
[], +, 1, <, c, [, 2, ], ), {, c, [, 1, ], =, c, [, 1, ], +]
[<, c, [, 2, ], ), {, c, [, 1, ], =, c, [, 1, ], +, 1, ;, return]
[), {, c, [, 1, ], =, c, [, 1, ], +, 1, ;, return, ret, ;, }, else, {]
[c, [, 1, ], =, c, [, 1, ], +, 1, ;, return, ret, ;, }, else, {, j, =]
[[, 1, ], +, 1, ;, return, ret, ;, }, else, {, j, =, 2, ;, }, boolean, stepDone, =]
[1, ;, return, ret, ;, }, else, {, j, =, 2, ;, }, boolean, stepDone, =, false, ;, while, (]
[;, return, ret, ;, }, else, {, j, =, 2, ;, }, boolean, stepDone, =, false, ;, while, (, !]
[;, }, else, {, j, =, 2, ;, }, boolean, stepDone, =, false, ;, while, (, !, stepDone, ), {]
[;, }, else, {, j, =, 2, ;, }, boolean, stepDone, =, false, ;, while, (, !, stepDone, ), {]
[else, {, j, =, 2, ;, }, boolean, stepDone, =, false, ;, while, (, !, stepDone, ), {, c, []
[else, {, j, =, 2, ;, }, boolean, stepDone, =, false, ;, while, (, !, stepDone, ), {, c, []
[j, =, 2, ;, }, boolean, stepDone, =, false, ;, while, (, !, stepDone, ), {, c, [, j, -]
[;, }, boolean, stepDone, =, false, ;, while, (, !, stepDone, ), {, c, [, j, -, 1, ], =]
[;, }, boolean, stepDone, =, false, ;, while, (, !, stepDone, ), {, c, [, j, -, 1, ], =]
[boolean, stepDone, =, false, ;, while, (, !, stepDone, ), {, c, [, j, -, 1, ], =, j, -]
[=, false, ;, while, (, !, stepDone, ), {, c, [, j, -, 1, ], =, j, -, 2, ;]
[;, while, (, !, stepDone, ), {, c, [, j, -, 1, ], =, j, -, 2, ;, x, =]
[;, while, (, !, stepDone, ), {, c, [, j, -, 1, ], =, j, -, 2, ;, x, =]
[;, while, (, !, stepDone, ), {, c, [, j, -, 1, ], =, j, -, 2, ;, x, =]
[(, !, stepDone, ), {, c, [, j, -, 1, ], =, j, -, 2, ;, x, =, c, []
[), {, c, [, j, -, 1, ], =, j, -, 2, ;, x, =, c, [, j, ], +]
[j, -, 1, ], =, j, -, 2, ;, x, =, c, [, j, ], +, 1, ;, if, (]
[j, -, 1, ], =, j, -, 2, ;, x, =, c, [, j, ], +, 1, ;, if, (]
[1, ], =, j, -, 2, ;, x, =, c, [, j, ], +, 1, ;, if, (, x, ==]
[1, ], =, j, -, 2, ;, x, =, c, [, j, ], +, 1, ;, if, (, x, ==]
[=, j, -, 2, ;, x, =, c, [, j, ], +, 1, ;, if, (, x, ==, c, []
[=, j, -, 2, ;, x, =, c, [, j, ], +, 1, ;, if, (, x, ==, c, []
[-, 2, ;, x, =, c, [, j, ], +, 1, ;, if, (, x, ==, c, [, j, +]
[=, c, [, j, ], +, 1, ;, if, (, x, ==, c, [, j, +, 1, ], ), {]
[=, c, [, j, ], +, 1, ;, if, (, x, ==, c, [, j, +, 1, ], ), {]
[1, ;, if, (, x, ==, c, [, j, +, 1, ], ), {, j, ++, ;, }, else, {]
[if, (, x, ==, c, [, j, +, 1, ], ), {, j, ++, ;, }, else, {, stepDone, =]
[j, +, 1, ], ), {, j, ++, ;, }, else, {, stepDone, =, true, ;, }, }, if, (]
[j, +, 1, ], ), {, j, ++, ;, }, else, {, stepDone, =, true, ;, }, }, if, (]
[1, ], ), {, j, ++, ;, }, else, {, stepDone, =, true, ;, }, }, if, (, j, >]
[{, j, ++, ;, }, else, {, stepDone, =, true, ;, }, }, if, (, j, >, k, ), {]
[++, ;, }, else, {, stepDone, =, true, ;, }, }, if, (, j, >, k, ), {, more, =]
[else, {, stepDone, =, true, ;, }, }, if, (, j, >, k, ), {, more, =, false, ;, return]
[=, true, ;, }, }, if, (, j, >, k, ), {, more, =, false, ;, return, ret, ;, }]
[=, true, ;, }, }, if, (, j, >, k, ), {, more, =, false, ;, return, ret, ;, }]
[;, }, }, if, (, j, >, k, ), {, more, =, false, ;, return, ret, ;, }, c, []
[if, (, j, >, k, ), {, more, =, false, ;, return, ret, ;, }, c, [, j, ], =]
[j, >, k, ), {, more, =, false, ;, return, ret, ;, }, c, [, j, ], =, x, ;]
[j, >, k, ), {, more, =, false, ;, return, ret, ;, }, c, [, j, ], =, x, ;]
[{, more, =, false, ;, return, ret, ;, }, c, [, j, ], =, x, ;, j, --, ;, return]
[[, j, ], =, x, ;, j, --, ;, return, ret, ;, }, public, void, remove, (, ), {, throw]
[SingletonIterator, implements, Iterator, <, int, [, ], >, {, private, final, int, [, ], singleton, ;, private, boolean, more, =]
[[, ], singleton, ;, private, boolean, more, =, true, ;, public, SingletonIterator, (, final, int, [, ], singleton, ), {]
[[, ], singleton, ;, private, boolean, more, =, true, ;, public, SingletonIterator, (, final, int, [, ], singleton, ), {]
[private, boolean, more, =, true, ;, public, SingletonIterator, (, final, int, [, ], singleton, ), {, this, ., singleton, =]
[int, [, ], singleton, ), {, this, ., singleton, =, singleton, ;, }, public, boolean, hasNext, (, ), {, return]
[public, boolean, hasNext, (, ), {, return, more, ;, }, public, int, [, ], next, (, ), {, if, (]
[(, ), {, return, more, ;, }, public, int, [, ], next, (, ), {, if, (, more, ), {]
[{, return, more, ;, }, public, int, [, ], next, (, ), {, if, (, more, ), {, more, =]
[;, }, public, int, [, ], next, (, ), {, if, (, more, ), {, more, =, false, ;, return]
[next, (, ), {, if, (, more, ), {, more, =, false, ;, return, singleton, ;, }, else, {, throw]
[singleton, ;, }, else, {, throw, new, NoSuchElementException, (, ), ;, }, }, public, void, remove, (, ), {, throw]
[private, static, void, checkBinomial, (, final, int, n, ,, final, int, k, ), throws, NumberIsTooLargeException, ,, NotPositiveException, {, if, (]
[private, static, void, checkBinomial, (, final, int, n, ,, final, int, k, ), throws, NumberIsTooLargeException, ,, NotPositiveException, {, if, (]
[void, checkBinomial, (, final, int, n, ,, final, int, k, ), throws, NumberIsTooLargeException, ,, NotPositiveException, {, if, (, n, <]
[int, n, ,, final, int, k, ), throws, NumberIsTooLargeException, ,, NotPositiveException, {, if, (, n, <, k, ), {, throw]
[final, int, k, ), throws, NumberIsTooLargeException, ,, NotPositiveException, {, if, (, n, <, k, ), {, throw, new, NumberIsTooLargeException, (]
[final, int, k, ), throws, NumberIsTooLargeException, ,, NotPositiveException, {, if, (, n, <, k, ), {, throw, new, NumberIsTooLargeException, (]
[throws, NumberIsTooLargeException, ,, NotPositiveException, {, if, (, n, <, k, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., BINOMIAL_INVALID_PARAMETERS_ORDER, ,]
[,, NotPositiveException, {, if, (, n, <, k, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., BINOMIAL_INVALID_PARAMETERS_ORDER, ,, k, ,]
[{, if, (, n, <, k, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., BINOMIAL_INVALID_PARAMETERS_ORDER, ,, k, ,, n, ,]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., BINOMIAL_INVALID_PARAMETERS_ORDER, ,, k, ,, n, ,, true, ), ;, }, if, (]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., BINOMIAL_INVALID_PARAMETERS_ORDER, ,, k, ,, n, ,, true, ), ;, }, if, (]
[throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., BINOMIAL_INVALID_PARAMETERS_ORDER, ,, k, ,, n, ,, true, ), ;, }, if, (, n, <]
[LocalizedFormats, ., BINOMIAL_INVALID_PARAMETERS_ORDER, ,, k, ,, n, ,, true, ), ;, }, if, (, n, <, 0, ), {, throw]
[,, k, ,, n, ,, true, ), ;, }, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (]
[,, k, ,, n, ,, true, ), ;, }, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (]
[,, true, ), ;, }, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., BINOMIAL_NEGATIVE_PARAMETER, ,]
