[;, private, final, SymbolType, VAR, =, SymbolType, ., VAR, ;, private, final, AbstractCompiler, compiler, ;, private, final, boolean, canModifyExterns, ;]
[., PROPERTY, ;, private, final, SymbolType, VAR, =, SymbolType, ., VAR, ;, private, final, AbstractCompiler, compiler, ;, private, final, boolean]
[;, private, final, AbstractCompiler, compiler, ;, private, final, boolean, canModifyExterns, ;, private, final, boolean, anchorUnusedVars, ;, private, final, JSModuleGraph, moduleGraph]
[., VAR, ;, private, final, AbstractCompiler, compiler, ;, private, final, boolean, canModifyExterns, ;, private, final, boolean, anchorUnusedVars, ;, private, final]
[;, private, final, LinkedDirectedGraph, <, NameInfo, ,, JSModule, >, symbolGraph, =, LinkedDirectedGraph, ., createWithoutAnnotations, (, ), ;, private, final, NameInfo]
[., of, (, "length", ,, "toString", ,, "valueOf", ), ;, private, final, LinkedDirectedGraph, <, NameInfo, ,, JSModule, >, symbolGraph, =]
[,, "toString", ,, "valueOf", ), ;, private, final, LinkedDirectedGraph, <, NameInfo, ,, JSModule, >, symbolGraph, =, LinkedDirectedGraph, ., createWithoutAnnotations, (]
[,, "valueOf", ), ;, private, final, LinkedDirectedGraph, <, NameInfo, ,, JSModule, >, symbolGraph, =, LinkedDirectedGraph, ., createWithoutAnnotations, (, ), ;]
[), ;, private, final, LinkedDirectedGraph, <, NameInfo, ,, JSModule, >, symbolGraph, =, LinkedDirectedGraph, ., createWithoutAnnotations, (, ), ;, private, final]
[;, private, final, NameInfo, globalNode, =, new, NameInfo, (, "[global]", ), ;, private, final, NameInfo, externNode, =, new, NameInfo, (]
[., createWithoutAnnotations, (, ), ;, private, final, NameInfo, globalNode, =, new, NameInfo, (, "[global]", ), ;, private, final, NameInfo, externNode]
[;, private, final, NameInfo, externNode, =, new, NameInfo, (, "[extern]", ), ;, private, final, NameInfo, anonymousNode, =, new, NameInfo, (]
[), ;, private, final, NameInfo, externNode, =, new, NameInfo, (, "[extern]", ), ;, private, final, NameInfo, anonymousNode, =, new, NameInfo]
[;, private, final, NameInfo, anonymousNode, =, new, NameInfo, (, "[anonymous]", ), ;, private, final, Map, <, String, ,, NameInfo, >]
[), ;, private, final, NameInfo, anonymousNode, =, new, NameInfo, (, "[anonymous]", ), ;, private, final, Map, <, String, ,, NameInfo]
[;, private, final, Map, <, String, ,, NameInfo, >, propertyNameInfo, =, Maps, ., newHashMap, (, ), ;, private, final, Map]
[), ;, private, final, Map, <, String, ,, NameInfo, >, propertyNameInfo, =, Maps, ., newHashMap, (, ), ;, private, final]
[;, private, final, Map, <, String, ,, NameInfo, >, varNameInfo, =, Maps, ., newHashMap, (, ), ;, AnalyzePrototypeProperties, (, AbstractCompiler]
[., newHashMap, (, ), ;, private, final, Map, <, String, ,, NameInfo, >, varNameInfo, =, Maps, ., newHashMap, (, )]
[;, AnalyzePrototypeProperties, (, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ,, boolean, canModifyExterns, ,, boolean, anchorUnusedVars, ), {, this, ., compiler, =]
[., newHashMap, (, ), ;, AnalyzePrototypeProperties, (, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ,, boolean, canModifyExterns, ,, boolean, anchorUnusedVars, ), {]
[=, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, this, ., canModifyExterns, =, canModifyExterns, ;, this, ., anchorUnusedVars, =, anchorUnusedVars]
[., compiler, =, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, this, ., canModifyExterns, =, canModifyExterns, ;, this, ., anchorUnusedVars]
[;, this, ., moduleGraph, =, moduleGraph, ;, this, ., canModifyExterns, =, canModifyExterns, ;, this, ., anchorUnusedVars, =, anchorUnusedVars, ;, if]
[=, moduleGraph, ;, this, ., canModifyExterns, =, canModifyExterns, ;, this, ., anchorUnusedVars, =, anchorUnusedVars, ;, if, (, moduleGraph, !=, null]
[., moduleGraph, =, moduleGraph, ;, this, ., canModifyExterns, =, canModifyExterns, ;, this, ., anchorUnusedVars, =, anchorUnusedVars, ;, if, (, moduleGraph]
[;, this, ., canModifyExterns, =, canModifyExterns, ;, this, ., anchorUnusedVars, =, anchorUnusedVars, ;, if, (, moduleGraph, !=, null, ), {]
[=, canModifyExterns, ;, this, ., anchorUnusedVars, =, anchorUnusedVars, ;, if, (, moduleGraph, !=, null, ), {, firstModule, =, moduleGraph, .]
[., canModifyExterns, =, canModifyExterns, ;, this, ., anchorUnusedVars, =, anchorUnusedVars, ;, if, (, moduleGraph, !=, null, ), {, firstModule, =]
[;, this, ., anchorUnusedVars, =, anchorUnusedVars, ;, if, (, moduleGraph, !=, null, ), {, firstModule, =, moduleGraph, ., getRootModule, (]
[=, anchorUnusedVars, ;, if, (, moduleGraph, !=, null, ), {, firstModule, =, moduleGraph, ., getRootModule, (, ), ;, }, else]
[., anchorUnusedVars, =, anchorUnusedVars, ;, if, (, moduleGraph, !=, null, ), {, firstModule, =, moduleGraph, ., getRootModule, (, ), ;]
[;, if, (, moduleGraph, !=, null, ), {, firstModule, =, moduleGraph, ., getRootModule, (, ), ;, }, else, {, firstModule]
[), {, firstModule, =, moduleGraph, ., getRootModule, (, ), ;, }, else, {, firstModule, =, null, ;, }, globalNode, .]
[!=, null, ), {, firstModule, =, moduleGraph, ., getRootModule, (, ), ;, }, else, {, firstModule, =, null, ;, }]
[), {, firstModule, =, moduleGraph, ., getRootModule, (, ), ;, }, else, {, firstModule, =, null, ;, }, globalNode, .]
[=, moduleGraph, ., getRootModule, (, ), ;, }, else, {, firstModule, =, null, ;, }, globalNode, ., markReference, (, null]
[;, }, else, {, firstModule, =, null, ;, }, globalNode, ., markReference, (, null, ), ;, externNode, ., markReference, (]
[., getRootModule, (, ), ;, }, else, {, firstModule, =, null, ;, }, globalNode, ., markReference, (, null, ), ;]
[=, null, ;, }, globalNode, ., markReference, (, null, ), ;, externNode, ., markReference, (, null, ), ;, symbolGraph, .]
[;, }, globalNode, ., markReference, (, null, ), ;, externNode, ., markReference, (, null, ), ;, symbolGraph, ., createNode, (]
[;, externNode, ., markReference, (, null, ), ;, symbolGraph, ., createNode, (, globalNode, ), ;, symbolGraph, ., createNode, (, externNode]
[., markReference, (, null, ), ;, externNode, ., markReference, (, null, ), ;, symbolGraph, ., createNode, (, globalNode, ), ;]
[), ;, externNode, ., markReference, (, null, ), ;, symbolGraph, ., createNode, (, globalNode, ), ;, symbolGraph, ., createNode, (]
[;, symbolGraph, ., createNode, (, globalNode, ), ;, symbolGraph, ., createNode, (, externNode, ), ;, for, (, String, property, :]
[., markReference, (, null, ), ;, symbolGraph, ., createNode, (, globalNode, ), ;, symbolGraph, ., createNode, (, externNode, ), ;]
[), ;, symbolGraph, ., createNode, (, globalNode, ), ;, symbolGraph, ., createNode, (, externNode, ), ;, for, (, String, property]
[;, symbolGraph, ., createNode, (, externNode, ), ;, for, (, String, property, :, IMPLICITLY_USED_PROPERTIES, ), {, NameInfo, nameInfo, =, getNameInfoForName]
[., createNode, (, globalNode, ), ;, symbolGraph, ., createNode, (, externNode, ), ;, for, (, String, property, :, IMPLICITLY_USED_PROPERTIES, )]
[), ;, symbolGraph, ., createNode, (, externNode, ), ;, for, (, String, property, :, IMPLICITLY_USED_PROPERTIES, ), {, NameInfo, nameInfo, =]
[;, for, (, String, property, :, IMPLICITLY_USED_PROPERTIES, ), {, NameInfo, nameInfo, =, getNameInfoForName, (, property, ,, PROPERTY, ), ;, if]
[., createNode, (, externNode, ), ;, for, (, String, property, :, IMPLICITLY_USED_PROPERTIES, ), {, NameInfo, nameInfo, =, getNameInfoForName, (, property]
[), ;, for, (, String, property, :, IMPLICITLY_USED_PROPERTIES, ), {, NameInfo, nameInfo, =, getNameInfoForName, (, property, ,, PROPERTY, ), ;]
[), {, NameInfo, nameInfo, =, getNameInfoForName, (, property, ,, PROPERTY, ), ;, if, (, moduleGraph, ==, null, ), {, symbolGraph]
[;, if, (, moduleGraph, ==, null, ), {, symbolGraph, ., connect, (, externNode, ,, null, ,, nameInfo, ), ;, }]
[,, PROPERTY, ), ;, if, (, moduleGraph, ==, null, ), {, symbolGraph, ., connect, (, externNode, ,, null, ,, nameInfo]
[), ;, if, (, moduleGraph, ==, null, ), {, symbolGraph, ., connect, (, externNode, ,, null, ,, nameInfo, ), ;]
[), {, symbolGraph, ., connect, (, externNode, ,, null, ,, nameInfo, ), ;, }, else, {, for, (, JSModule, module]
[==, null, ), {, symbolGraph, ., connect, (, externNode, ,, null, ,, nameInfo, ), ;, }, else, {, for, (]
[), {, symbolGraph, ., connect, (, externNode, ,, null, ,, nameInfo, ), ;, }, else, {, for, (, JSModule, module]
[;, }, else, {, for, (, JSModule, module, :, moduleGraph, ., getAllModules, (, ), ), {, symbolGraph, ., connect, (]
[., connect, (, externNode, ,, null, ,, nameInfo, ), ;, }, else, {, for, (, JSModule, module, :, moduleGraph, .]
[,, null, ,, nameInfo, ), ;, }, else, {, for, (, JSModule, module, :, moduleGraph, ., getAllModules, (, ), )]
[,, nameInfo, ), ;, }, else, {, for, (, JSModule, module, :, moduleGraph, ., getAllModules, (, ), ), {, symbolGraph]
[), ;, }, else, {, for, (, JSModule, module, :, moduleGraph, ., getAllModules, (, ), ), {, symbolGraph, ., connect]
[), {, symbolGraph, ., connect, (, externNode, ,, module, ,, nameInfo, ), ;, }, }, }, }, @, Override, public]
[., getAllModules, (, ), ), {, symbolGraph, ., connect, (, externNode, ,, module, ,, nameInfo, ), ;, }, }, }]
[;, }, }, }, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, if, (]
[., connect, (, externNode, ,, module, ,, nameInfo, ), ;, }, }, }, }, @, Override, public, void, process, (]
[,, module, ,, nameInfo, ), ;, }, }, }, }, @, Override, public, void, process, (, Node, externRoot, ,, Node]
[,, nameInfo, ), ;, }, }, }, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, )]
[), ;, }, }, }, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, if]
[), {, NodeTraversal, ., traverse, (, compiler, ,, externRoot, ,, new, ProcessExternProperties, (, ), ), ;, }, NodeTraversal, ., traverse]
[), {, NodeTraversal, ., traverse, (, compiler, ,, externRoot, ,, new, ProcessExternProperties, (, ), ), ;, }, NodeTraversal, ., traverse]
[;, }, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), ), ;, FixedPointGraphTraversal, <, NameInfo, ,]
[., traverse, (, compiler, ,, externRoot, ,, new, ProcessExternProperties, (, ), ), ;, }, NodeTraversal, ., traverse, (, compiler, ,]
[,, externRoot, ,, new, ProcessExternProperties, (, ), ), ;, }, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties]
[,, new, ProcessExternProperties, (, ), ), ;, }, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, )]
[), ;, }, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), ), ;, FixedPointGraphTraversal, <, NameInfo]
[;, FixedPointGraphTraversal, <, NameInfo, ,, JSModule, >, t, =, FixedPointGraphTraversal, ., newTraversal, (, new, PropagateReferences, (, ), ), ;, t]
[., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), ), ;, FixedPointGraphTraversal, <, NameInfo, ,, JSModule, >, t]
[,, root, ,, new, ProcessProperties, (, ), ), ;, FixedPointGraphTraversal, <, NameInfo, ,, JSModule, >, t, =, FixedPointGraphTraversal, ., newTraversal]
[,, new, ProcessProperties, (, ), ), ;, FixedPointGraphTraversal, <, NameInfo, ,, JSModule, >, t, =, FixedPointGraphTraversal, ., newTraversal, (, new]
[), ;, FixedPointGraphTraversal, <, NameInfo, ,, JSModule, >, t, =, FixedPointGraphTraversal, ., newTraversal, (, new, PropagateReferences, (, ), ), ;]
[;, t, ., computeFixedPoint, (, symbolGraph, ,, Sets, ., newHashSet, (, externNode, ,, globalNode, ), ), ;, }, public, Collection]
[., newTraversal, (, new, PropagateReferences, (, ), ), ;, t, ., computeFixedPoint, (, symbolGraph, ,, Sets, ., newHashSet, (, externNode]
[), ;, t, ., computeFixedPoint, (, symbolGraph, ,, Sets, ., newHashSet, (, externNode, ,, globalNode, ), ), ;, }, public]
[;, }, public, Collection, <, NameInfo, >, getAllNameInfo, (, ), {, List, <, NameInfo, >, result, =, Lists, ., newArrayList]
[., computeFixedPoint, (, symbolGraph, ,, Sets, ., newHashSet, (, externNode, ,, globalNode, ), ), ;, }, public, Collection, <, NameInfo]
[,, Sets, ., newHashSet, (, externNode, ,, globalNode, ), ), ;, }, public, Collection, <, NameInfo, >, getAllNameInfo, (, )]
[), ;, }, public, Collection, <, NameInfo, >, getAllNameInfo, (, ), {, List, <, NameInfo, >, result, =, Lists, .]
[., newHashSet, (, externNode, ,, globalNode, ), ), ;, }, public, Collection, <, NameInfo, >, getAllNameInfo, (, ), {, List]
[,, globalNode, ), ), ;, }, public, Collection, <, NameInfo, >, getAllNameInfo, (, ), {, List, <, NameInfo, >, result]
[), ), ;, }, public, Collection, <, NameInfo, >, getAllNameInfo, (, ), {, List, <, NameInfo, >, result, =, Lists]
[;, result, ., addAll, (, varNameInfo, ., values, (, ), ), ;, return, result, ;, }, private, NameInfo, getNameInfoForName, (]
[., newArrayList, (, propertyNameInfo, ., values, (, ), ), ;, result, ., addAll, (, varNameInfo, ., values, (, ), )]
[), ;, result, ., addAll, (, varNameInfo, ., values, (, ), ), ;, return, result, ;, }, private, NameInfo, getNameInfoForName]
[., values, (, ), ), ;, result, ., addAll, (, varNameInfo, ., values, (, ), ), ;, return, result, ;]
[;, return, result, ;, }, private, NameInfo, getNameInfoForName, (, String, name, ,, SymbolType, type, ), {, Map, <, String, ,]
[., addAll, (, varNameInfo, ., values, (, ), ), ;, return, result, ;, }, private, NameInfo, getNameInfoForName, (, String, name]
[), ;, return, result, ;, }, private, NameInfo, getNameInfoForName, (, String, name, ,, SymbolType, type, ), {, Map, <, String]
[., values, (, ), ), ;, return, result, ;, }, private, NameInfo, getNameInfoForName, (, String, name, ,, SymbolType, type, )]
[;, }, private, NameInfo, getNameInfoForName, (, String, name, ,, SymbolType, type, ), {, Map, <, String, ,, NameInfo, >, map]
[;, if, (, map, ., containsKey, (, name, ), ), {, return, map, ., get, (, name, ), ;, }]
[?, propertyNameInfo, :, varNameInfo, ;, if, (, map, ., containsKey, (, name, ), ), {, return, map, ., get, (]
[==, PROPERTY, ?, propertyNameInfo, :, varNameInfo, ;, if, (, map, ., containsKey, (, name, ), ), {, return, map, .]
[?, propertyNameInfo, :, varNameInfo, ;, if, (, map, ., containsKey, (, name, ), ), {, return, map, ., get, (]
[:, varNameInfo, ;, if, (, map, ., containsKey, (, name, ), ), {, return, map, ., get, (, name, )]
[;, if, (, map, ., containsKey, (, name, ), ), {, return, map, ., get, (, name, ), ;, }]
[), {, return, map, ., get, (, name, ), ;, }, else, {, NameInfo, nameInfo, =, new, NameInfo, (, name]
[., containsKey, (, name, ), ), {, return, map, ., get, (, name, ), ;, }, else, {, NameInfo, nameInfo]
[), ), {, return, map, ., get, (, name, ), ;, }, else, {, NameInfo, nameInfo, =, new, NameInfo, (]
[;, }, else, {, NameInfo, nameInfo, =, new, NameInfo, (, name, ), ;, map, ., put, (, name, ,, nameInfo]
[., get, (, name, ), ;, }, else, {, NameInfo, nameInfo, =, new, NameInfo, (, name, ), ;, map, .]
[), ;, }, else, {, NameInfo, nameInfo, =, new, NameInfo, (, name, ), ;, map, ., put, (, name, ,]
[;, map, ., put, (, name, ,, nameInfo, ), ;, symbolGraph, ., createNode, (, nameInfo, ), ;, return, nameInfo, ;]
[), ;, map, ., put, (, name, ,, nameInfo, ), ;, symbolGraph, ., createNode, (, nameInfo, ), ;, return, nameInfo]
[;, symbolGraph, ., createNode, (, nameInfo, ), ;, return, nameInfo, ;, }, }, private, class, ProcessProperties, implements, NodeTraversal, ., ScopedCallback]
[., put, (, name, ,, nameInfo, ), ;, symbolGraph, ., createNode, (, nameInfo, ), ;, return, nameInfo, ;, }, }]
[,, nameInfo, ), ;, symbolGraph, ., createNode, (, nameInfo, ), ;, return, nameInfo, ;, }, }, private, class, ProcessProperties, implements]
[), ;, symbolGraph, ., createNode, (, nameInfo, ), ;, return, nameInfo, ;, }, }, private, class, ProcessProperties, implements, NodeTraversal, .]
[;, return, nameInfo, ;, }, }, private, class, ProcessProperties, implements, NodeTraversal, ., ScopedCallback, {, private, Stack, <, NameContext, >, symbolStack]
[., createNode, (, nameInfo, ), ;, return, nameInfo, ;, }, }, private, class, ProcessProperties, implements, NodeTraversal, ., ScopedCallback, {, private]
[), ;, return, nameInfo, ;, }, }, private, class, ProcessProperties, implements, NodeTraversal, ., ScopedCallback, {, private, Stack, <, NameContext, >]
[;, }, }, private, class, ProcessProperties, implements, NodeTraversal, ., ScopedCallback, {, private, Stack, <, NameContext, >, symbolStack, =, new, Stack]
[;, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, n, =, t, ., getCurrentNode, (, ), ;]
[;, if, (, n, ., isFunction, (, ), ), {, String, propName, =, getPrototypePropertyNameFromRValue, (, n, ), ;, if, (]
[., getCurrentNode, (, ), ;, if, (, n, ., isFunction, (, ), ), {, String, propName, =, getPrototypePropertyNameFromRValue, (, n]
[), {, String, propName, =, getPrototypePropertyNameFromRValue, (, n, ), ;, if, (, propName, !=, null, ), {, symbolStack, ., push]
[., isFunction, (, ), ), {, String, propName, =, getPrototypePropertyNameFromRValue, (, n, ), ;, if, (, propName, !=, null, )]
[;, if, (, propName, !=, null, ), {, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, propName, ,, PROPERTY]
[), ;, if, (, propName, !=, null, ), {, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, propName, ,]
[), {, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, propName, ,, PROPERTY, ), ,, t, ., getScope, (]
[!=, null, ), {, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, propName, ,, PROPERTY, ), ,, t, .]
[), {, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, propName, ,, PROPERTY, ), ,, t, ., getScope, (]
[;, }, else, if, (, isGlobalFunctionDeclaration, (, t, ,, n, ), ), {, Node, parent, =, n, ., getParent, (]
[., push, (, new, NameContext, (, getNameInfoForName, (, propName, ,, PROPERTY, ), ,, t, ., getScope, (, ), ), )]
[), ;, }, else, if, (, isGlobalFunctionDeclaration, (, t, ,, n, ), ), {, Node, parent, =, n, ., getParent]
[,, t, ., getScope, (, ), ), ), ;, }, else, if, (, isGlobalFunctionDeclaration, (, t, ,, n, ), )]
[,, PROPERTY, ), ,, t, ., getScope, (, ), ), ), ;, }, else, if, (, isGlobalFunctionDeclaration, (, t, ,]
[), ,, t, ., getScope, (, ), ), ), ;, }, else, if, (, isGlobalFunctionDeclaration, (, t, ,, n, )]
[), ), ;, }, else, if, (, isGlobalFunctionDeclaration, (, t, ,, n, ), ), {, Node, parent, =, n, .]
[., getScope, (, ), ), ), ;, }, else, if, (, isGlobalFunctionDeclaration, (, t, ,, n, ), ), {, Node]
[), {, Node, parent, =, n, ., getParent, (, ), ;, String, name, =, parent, ., isName, (, ), ?]
[,, n, ), ), {, Node, parent, =, n, ., getParent, (, ), ;, String, name, =, parent, ., isName]
[), ), {, Node, parent, =, n, ., getParent, (, ), ;, String, name, =, parent, ., isName, (, )]
[;, String, name, =, parent, ., isName, (, ), ?, parent, ., getString, (, ), :, n, ., getFirstChild, (]
[., getParent, (, ), ;, String, name, =, parent, ., isName, (, ), ?, parent, ., getString, (, ), :]
[;, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, name, ,, VAR, ), ,, t, ., getScope, (, )]
[?, parent, ., getString, (, ), :, n, ., getFirstChild, (, ), ., getString, (, ), ;, symbolStack, ., push]
[., isName, (, ), ?, parent, ., getString, (, ), :, n, ., getFirstChild, (, ), ., getString, (, )]
[:, n, ., getFirstChild, (, ), ., getString, (, ), ;, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (]
[., getString, (, ), :, n, ., getFirstChild, (, ), ., getString, (, ), ;, symbolStack, ., push, (, new]
[;, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, name, ,, VAR, ), ,, t, ., getScope, (, )]
[., getString, (, ), ;, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, name, ,, VAR, ), ,, t]
[., getFirstChild, (, ), ., getString, (, ), ;, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, name, ,]
[;, }, else, {, symbolStack, ., push, (, new, NameContext, (, anonymousNode, ,, t, ., getScope, (, ), ), )]
[., push, (, new, NameContext, (, getNameInfoForName, (, name, ,, VAR, ), ,, t, ., getScope, (, ), ), )]
[), ;, }, else, {, symbolStack, ., push, (, new, NameContext, (, anonymousNode, ,, t, ., getScope, (, ), )]
[,, t, ., getScope, (, ), ), ), ;, }, else, {, symbolStack, ., push, (, new, NameContext, (, anonymousNode]
[,, VAR, ), ,, t, ., getScope, (, ), ), ), ;, }, else, {, symbolStack, ., push, (, new]
[), ,, t, ., getScope, (, ), ), ), ;, }, else, {, symbolStack, ., push, (, new, NameContext, (]
[), ), ;, }, else, {, symbolStack, ., push, (, new, NameContext, (, anonymousNode, ,, t, ., getScope, (, )]
[., getScope, (, ), ), ), ;, }, else, {, symbolStack, ., push, (, new, NameContext, (, anonymousNode, ,, t]
[;, }, }, else, {, Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;, symbolStack, ., push, (]
[., push, (, new, NameContext, (, anonymousNode, ,, t, ., getScope, (, ), ), ), ;, }, }, else, {]
[), ;, }, }, else, {, Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;, symbolStack, ., push]
[,, t, ., getScope, (, ), ), ), ;, }, }, else, {, Preconditions, ., checkState, (, t, ., inGlobalScope]
[), ), ;, }, }, else, {, Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;, symbolStack, .]
[., getScope, (, ), ), ), ;, }, }, else, {, Preconditions, ., checkState, (, t, ., inGlobalScope, (, )]
[;, symbolStack, ., push, (, new, NameContext, (, globalNode, ,, t, ., getScope, (, ), ), ), ;, }, }]
[., checkState, (, t, ., inGlobalScope, (, ), ), ;, symbolStack, ., push, (, new, NameContext, (, globalNode, ,, t]
[), ;, symbolStack, ., push, (, new, NameContext, (, globalNode, ,, t, ., getScope, (, ), ), ), ;, }]
[., inGlobalScope, (, ), ), ;, symbolStack, ., push, (, new, NameContext, (, globalNode, ,, t, ., getScope, (, )]
[;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, symbolStack, ., pop, (, ), ;, }]
[., push, (, new, NameContext, (, globalNode, ,, t, ., getScope, (, ), ), ), ;, }, }, @, Override]
[), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, symbolStack, ., pop, (, ), ;]
[,, t, ., getScope, (, ), ), ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, )]
[), ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, symbolStack, ., pop, (, )]
[., getScope, (, ), ), ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, symbolStack]
[;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, String, propName]
[., pop, (, ), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, if, (, propName, !=, null, ), {, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, propName, ,, PROPERTY]
[,, parent, ), ;, if, (, propName, !=, null, ), {, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (]
[), ;, if, (, propName, !=, null, ), {, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, propName, ,]
[), {, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, propName, ,, PROPERTY, ), ,, null, ), ), ;]
[!=, null, ), {, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, propName, ,, PROPERTY, ), ,, null, )]
[), {, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, propName, ,, PROPERTY, ), ,, null, ), ), ;]
[;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[., push, (, new, NameContext, (, getNameInfoForName, (, propName, ,, PROPERTY, ), ,, null, ), ), ;, }, return, true]
[), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node]
[,, null, ), ), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[,, PROPERTY, ), ,, null, ), ), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal]
[), ,, null, ), ), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[), ), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, String, propName, =, n, ., getFirstChild, (, ), ., getNext, (, ), ., getString, (, ), ;, if]
[., isGetProp, (, ), ), {, String, propName, =, n, ., getFirstChild, (, ), ., getNext, (, ), ., getString]
[;, if, (, n, ., isQualifiedName, (, ), ), {, if, (, propName, ., equals, (, "prototype", ), ), {]
[., getString, (, ), ;, if, (, n, ., isQualifiedName, (, ), ), {, if, (, propName, ., equals, (]
[., getNext, (, ), ., getString, (, ), ;, if, (, n, ., isQualifiedName, (, ), ), {, if, (]
[., getFirstChild, (, ), ., getNext, (, ), ., getString, (, ), ;, if, (, n, ., isQualifiedName, (, )]
[), {, if, (, propName, ., equals, (, "prototype", ), ), {, if, (, processPrototypeRef, (, t, ,, n, )]
[., isQualifiedName, (, ), ), {, if, (, propName, ., equals, (, "prototype", ), ), {, if, (, processPrototypeRef, (]
[), {, if, (, processPrototypeRef, (, t, ,, n, ), ), {, return, ;, }, }, else, if, (, compiler]
[., equals, (, "prototype", ), ), {, if, (, processPrototypeRef, (, t, ,, n, ), ), {, return, ;, }]
[), ), {, if, (, processPrototypeRef, (, t, ,, n, ), ), {, return, ;, }, }, else, if, (]
[), {, return, ;, }, }, else, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, propName, ), )]
[,, n, ), ), {, return, ;, }, }, else, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (]
[), ), {, return, ;, }, }, else, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, propName, )]
[), {, addGlobalUseOfSymbol, (, propName, ,, t, ., getModule, (, ), ,, PROPERTY, ), ;, return, ;, }, else, {]
[., isExported, (, propName, ), ), {, addGlobalUseOfSymbol, (, propName, ,, t, ., getModule, (, ), ,, PROPERTY, ), ;]
[., getCodingConvention, (, ), ., isExported, (, propName, ), ), {, addGlobalUseOfSymbol, (, propName, ,, t, ., getModule, (, )]
[), ), {, addGlobalUseOfSymbol, (, propName, ,, t, ., getModule, (, ), ,, PROPERTY, ), ;, return, ;, }, else]
[;, return, ;, }, else, {, if, (, n, ., getParent, (, ), ., isAssign, (, ), &&, n, .]
[,, t, ., getModule, (, ), ,, PROPERTY, ), ;, return, ;, }, else, {, if, (, n, ., getParent]
[,, PROPERTY, ), ;, return, ;, }, else, {, if, (, n, ., getParent, (, ), ., isAssign, (, )]
[., getModule, (, ), ,, PROPERTY, ), ;, return, ;, }, else, {, if, (, n, ., getParent, (, )]
[), ;, return, ;, }, else, {, if, (, n, ., getParent, (, ), ., isAssign, (, ), &&, n]
[), {, String, rValueName, =, getPrototypePropertyNameFromRValue, (, n, ), ;, if, (, rValueName, !=, null, ), {, return, ;, }]
[&&, n, ., getNext, (, ), !=, null, ), {, String, rValueName, =, getPrototypePropertyNameFromRValue, (, n, ), ;, if, (]
[., isAssign, (, ), &&, n, ., getNext, (, ), !=, null, ), {, String, rValueName, =, getPrototypePropertyNameFromRValue, (, n]
[., getParent, (, ), ., isAssign, (, ), &&, n, ., getNext, (, ), !=, null, ), {, String, rValueName]
[), {, String, rValueName, =, getPrototypePropertyNameFromRValue, (, n, ), ;, if, (, rValueName, !=, null, ), {, return, ;, }]
[!=, null, ), {, String, rValueName, =, getPrototypePropertyNameFromRValue, (, n, ), ;, if, (, rValueName, !=, null, ), {, return]
[., getNext, (, ), !=, null, ), {, String, rValueName, =, getPrototypePropertyNameFromRValue, (, n, ), ;, if, (, rValueName, !=]
[), {, String, rValueName, =, getPrototypePropertyNameFromRValue, (, n, ), ;, if, (, rValueName, !=, null, ), {, return, ;, }]
[;, if, (, rValueName, !=, null, ), {, return, ;, }, }, }, }, addSymbolUse, (, propName, ,, t, .]
[), ;, if, (, rValueName, !=, null, ), {, return, ;, }, }, }, }, addSymbolUse, (, propName, ,, t]
[), {, return, ;, }, }, }, }, addSymbolUse, (, propName, ,, t, ., getModule, (, ), ,, PROPERTY, )]
[!=, null, ), {, return, ;, }, }, }, }, addSymbolUse, (, propName, ,, t, ., getModule, (, ), ,]
[), {, return, ;, }, }, }, }, addSymbolUse, (, propName, ,, t, ., getModule, (, ), ,, PROPERTY, )]
[;, }, else, if, (, n, ., isObjectLit, (, ), ), {, String, lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil]
[,, t, ., getModule, (, ), ,, PROPERTY, ), ;, }, else, if, (, n, ., isObjectLit, (, ), )]
[,, PROPERTY, ), ;, }, else, if, (, n, ., isObjectLit, (, ), ), {, String, lValueName, =, NodeUtil, .]
[., getModule, (, ), ,, PROPERTY, ), ;, }, else, if, (, n, ., isObjectLit, (, ), ), {, String]
[), ;, }, else, if, (, n, ., isObjectLit, (, ), ), {, String, lValueName, =, NodeUtil, ., getBestLValueName, (]
[), {, String, lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, n, ), ), ;, if, (, lValueName]
[., isObjectLit, (, ), ), {, String, lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, n, ), )]
[;, if, (, lValueName, !=, null, &&, lValueName, ., endsWith, (, ".prototype", ), ), {, return, ;, }, for, (]
[., getBestLValueName, (, NodeUtil, ., getBestLValue, (, n, ), ), ;, if, (, lValueName, !=, null, &&, lValueName, ., endsWith]
[), ;, if, (, lValueName, !=, null, &&, lValueName, ., endsWith, (, ".prototype", ), ), {, return, ;, }, for]
[., getBestLValue, (, n, ), ), ;, if, (, lValueName, !=, null, &&, lValueName, ., endsWith, (, ".prototype", ), )]
[), ), ;, if, (, lValueName, !=, null, &&, lValueName, ., endsWith, (, ".prototype", ), ), {, return, ;, }]
[), {, return, ;, }, for, (, Node, propNameNode, =, n, ., getFirstChild, (, ), ;, propNameNode, !=, null, ;]
[&&, lValueName, ., endsWith, (, ".prototype", ), ), {, return, ;, }, for, (, Node, propNameNode, =, n, ., getFirstChild]
[!=, null, &&, lValueName, ., endsWith, (, ".prototype", ), ), {, return, ;, }, for, (, Node, propNameNode, =, n]
[&&, lValueName, ., endsWith, (, ".prototype", ), ), {, return, ;, }, for, (, Node, propNameNode, =, n, ., getFirstChild]
[), {, return, ;, }, for, (, Node, propNameNode, =, n, ., getFirstChild, (, ), ;, propNameNode, !=, null, ;]
[., endsWith, (, ".prototype", ), ), {, return, ;, }, for, (, Node, propNameNode, =, n, ., getFirstChild, (, )]
[), ), {, return, ;, }, for, (, Node, propNameNode, =, n, ., getFirstChild, (, ), ;, propNameNode, !=, null]
[;, propNameNode, !=, null, ;, propNameNode, =, propNameNode, ., getNext, (, ), ), {, if, (, !, propNameNode, ., isQuotedString]
[., getFirstChild, (, ), ;, propNameNode, !=, null, ;, propNameNode, =, propNameNode, ., getNext, (, ), ), {, if, (]
[;, propNameNode, =, propNameNode, ., getNext, (, ), ), {, if, (, !, propNameNode, ., isQuotedString, (, ), ), {]
[!=, null, ;, propNameNode, =, propNameNode, ., getNext, (, ), ), {, if, (, !, propNameNode, ., isQuotedString, (, )]
[;, propNameNode, =, propNameNode, ., getNext, (, ), ), {, if, (, !, propNameNode, ., isQuotedString, (, ), ), {]
[=, propNameNode, ., getNext, (, ), ), {, if, (, !, propNameNode, ., isQuotedString, (, ), ), {, addSymbolUse, (]
[), {, if, (, !, propNameNode, ., isQuotedString, (, ), ), {, addSymbolUse, (, propNameNode, ., getString, (, ), ,]
[., getNext, (, ), ), {, if, (, !, propNameNode, ., isQuotedString, (, ), ), {, addSymbolUse, (, propNameNode, .]
[), {, addSymbolUse, (, propNameNode, ., getString, (, ), ,, t, ., getModule, (, ), ,, PROPERTY, ), ;, }]
[), {, addSymbolUse, (, propNameNode, ., getString, (, ), ,, t, ., getModule, (, ), ,, PROPERTY, ), ;, }]
[., isQuotedString, (, ), ), {, addSymbolUse, (, propNameNode, ., getString, (, ), ,, t, ., getModule, (, ), ,]
[;, }, }, }, else, if, (, n, ., isName, (, ), ), {, String, name, =, n, ., getString]
[,, t, ., getModule, (, ), ,, PROPERTY, ), ;, }, }, }, else, if, (, n, ., isName, (]
[., getString, (, ), ,, t, ., getModule, (, ), ,, PROPERTY, ), ;, }, }, }, else, if, (]
[,, PROPERTY, ), ;, }, }, }, else, if, (, n, ., isName, (, ), ), {, String, name, =]
[., getModule, (, ), ,, PROPERTY, ), ;, }, }, }, else, if, (, n, ., isName, (, ), )]
[), ;, }, }, }, else, if, (, n, ., isName, (, ), ), {, String, name, =, n, .]
[), {, String, name, =, n, ., getString, (, ), ;, Var, var, =, t, ., getScope, (, ), .]
[., isName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, Var, var, =, t, .]
[;, Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, !=, null]
[., getString, (, ), ;, Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if]
[;, if, (, var, !=, null, ), {, if, (, var, ., isGlobal, (, ), ), {, if, (, var]
[., getVar, (, name, ), ;, if, (, var, !=, null, ), {, if, (, var, ., isGlobal, (, )]
[., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, !=, null, ), {, if, (, var]
[), ;, if, (, var, !=, null, ), {, if, (, var, ., isGlobal, (, ), ), {, if, (]
[), {, if, (, var, ., isGlobal, (, ), ), {, if, (, var, ., getInitialValue, (, ), !=, null]
[!=, null, ), {, if, (, var, ., isGlobal, (, ), ), {, if, (, var, ., getInitialValue, (, )]
[), {, if, (, var, ., isGlobal, (, ), ), {, if, (, var, ., getInitialValue, (, ), !=, null]
[), {, if, (, var, ., getInitialValue, (, ), !=, null, &&, var, ., getInitialValue, (, ), ., isFunction, (]
[., isGlobal, (, ), ), {, if, (, var, ., getInitialValue, (, ), !=, null, &&, var, ., getInitialValue, (]
[), {, if, (, t, ., inGlobalScope, (, ), ), {, if, (, !, processGlobalFunctionDeclaration, (, t, ,, n, ,]
[&&, var, ., getInitialValue, (, ), ., isFunction, (, ), ), {, if, (, t, ., inGlobalScope, (, ), )]
[!=, null, &&, var, ., getInitialValue, (, ), ., isFunction, (, ), ), {, if, (, t, ., inGlobalScope, (]
[., getInitialValue, (, ), !=, null, &&, var, ., getInitialValue, (, ), ., isFunction, (, ), ), {, if, (]
[&&, var, ., getInitialValue, (, ), ., isFunction, (, ), ), {, if, (, t, ., inGlobalScope, (, ), )]
[), {, if, (, t, ., inGlobalScope, (, ), ), {, if, (, !, processGlobalFunctionDeclaration, (, t, ,, n, ,]
[., isFunction, (, ), ), {, if, (, t, ., inGlobalScope, (, ), ), {, if, (, !, processGlobalFunctionDeclaration, (]
[., getInitialValue, (, ), ., isFunction, (, ), ), {, if, (, t, ., inGlobalScope, (, ), ), {, if]
[), {, if, (, !, processGlobalFunctionDeclaration, (, t, ,, n, ,, var, ), ), {, addGlobalUseOfSymbol, (, name, ,, t]
[., inGlobalScope, (, ), ), {, if, (, !, processGlobalFunctionDeclaration, (, t, ,, n, ,, var, ), ), {, addGlobalUseOfSymbol]
[), {, addGlobalUseOfSymbol, (, name, ,, t, ., getModule, (, ), ,, VAR, ), ;, }, }, else, {, addSymbolUse]
[), {, addGlobalUseOfSymbol, (, name, ,, t, ., getModule, (, ), ,, VAR, ), ;, }, }, else, {, addSymbolUse]
[,, n, ,, var, ), ), {, addGlobalUseOfSymbol, (, name, ,, t, ., getModule, (, ), ,, VAR, ), ;]
[,, var, ), ), {, addGlobalUseOfSymbol, (, name, ,, t, ., getModule, (, ), ,, VAR, ), ;, }, }]
[), ), {, addGlobalUseOfSymbol, (, name, ,, t, ., getModule, (, ), ,, VAR, ), ;, }, }, else, {]
[;, }, }, else, {, addSymbolUse, (, name, ,, t, ., getModule, (, ), ,, VAR, ), ;, }, }]
[,, t, ., getModule, (, ), ,, VAR, ), ;, }, }, else, {, addSymbolUse, (, name, ,, t, .]
[,, VAR, ), ;, }, }, else, {, addSymbolUse, (, name, ,, t, ., getModule, (, ), ,, VAR, )]
[., getModule, (, ), ,, VAR, ), ;, }, }, else, {, addSymbolUse, (, name, ,, t, ., getModule, (]
[), ;, }, }, else, {, addSymbolUse, (, name, ,, t, ., getModule, (, ), ,, VAR, ), ;, }]
[;, }, }, }, else, if, (, var, ., getScope, (, ), !=, t, ., getScope, (, ), ), {]
[,, t, ., getModule, (, ), ,, VAR, ), ;, }, }, }, else, if, (, var, ., getScope, (]
[,, VAR, ), ;, }, }, }, else, if, (, var, ., getScope, (, ), !=, t, ., getScope, (]
[., getModule, (, ), ,, VAR, ), ;, }, }, }, else, if, (, var, ., getScope, (, ), !=]
[), ;, }, }, }, else, if, (, var, ., getScope, (, ), !=, t, ., getScope, (, ), )]
[), {, for, (, int, i, =, symbolStack, ., size, (, ), -, 1, ;, i, >=, 0, ;, i]
[!=, t, ., getScope, (, ), ), {, for, (, int, i, =, symbolStack, ., size, (, ), -, 1]
[., getScope, (, ), !=, t, ., getScope, (, ), ), {, for, (, int, i, =, symbolStack, ., size]
[), {, for, (, int, i, =, symbolStack, ., size, (, ), -, 1, ;, i, >=, 0, ;, i]
[., getScope, (, ), ), {, for, (, int, i, =, symbolStack, ., size, (, ), -, 1, ;, i]
[;, i, >=, 0, ;, i, --, ), {, NameContext, context, =, symbolStack, ., get, (, i, ), ;, if]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, NameContext, context, =, symbolStack, ., get, (, i, )]
[., size, (, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, NameContext, context, =, symbolStack, .]
[;, i, >=, 0, ;, i, --, ), {, NameContext, context, =, symbolStack, ., get, (, i, ), ;, if]
[;, i, --, ), {, NameContext, context, =, symbolStack, ., get, (, i, ), ;, if, (, context, ., scope]
[>=, 0, ;, i, --, ), {, NameContext, context, =, symbolStack, ., get, (, i, ), ;, if, (, context]
[;, i, --, ), {, NameContext, context, =, symbolStack, ., get, (, i, ), ;, if, (, context, ., scope]
[), {, NameContext, context, =, symbolStack, ., get, (, i, ), ;, if, (, context, ., scope, ==, var, .]
[--, ), {, NameContext, context, =, symbolStack, ., get, (, i, ), ;, if, (, context, ., scope, ==, var]
[;, if, (, context, ., scope, ==, var, ., getScope, (, ), ), {, break, ;, }, context, ., name]
[., get, (, i, ), ;, if, (, context, ., scope, ==, var, ., getScope, (, ), ), {, break]
[), ;, if, (, context, ., scope, ==, var, ., getScope, (, ), ), {, break, ;, }, context, .]
[), {, break, ;, }, context, ., name, ., readClosureVariables, =, true, ;, }, }, }, }, if, (, processNonFunctionPrototypeAssign]
[==, var, ., getScope, (, ), ), {, break, ;, }, context, ., name, ., readClosureVariables, =, true, ;, }]
[., scope, ==, var, ., getScope, (, ), ), {, break, ;, }, context, ., name, ., readClosureVariables, =, true]
[), {, break, ;, }, context, ., name, ., readClosureVariables, =, true, ;, }, }, }, }, if, (, processNonFunctionPrototypeAssign]
[., getScope, (, ), ), {, break, ;, }, context, ., name, ., readClosureVariables, =, true, ;, }, }, }]
[=, true, ;, }, }, }, }, if, (, processNonFunctionPrototypeAssign, (, n, ,, parent, ), !=, null, ), {, symbolStack]
[., readClosureVariables, =, true, ;, }, }, }, }, if, (, processNonFunctionPrototypeAssign, (, n, ,, parent, ), !=, null, )]
[., name, ., readClosureVariables, =, true, ;, }, }, }, }, if, (, processNonFunctionPrototypeAssign, (, n, ,, parent, ), !=]
[;, }, }, }, }, if, (, processNonFunctionPrototypeAssign, (, n, ,, parent, ), !=, null, ), {, symbolStack, ., pop]
[), {, symbolStack, ., pop, (, ), ;, }, }, private, void, addSymbolUse, (, String, name, ,, JSModule, module, ,]
[!=, null, ), {, symbolStack, ., pop, (, ), ;, }, }, private, void, addSymbolUse, (, String, name, ,, JSModule]
[,, parent, ), !=, null, ), {, symbolStack, ., pop, (, ), ;, }, }, private, void, addSymbolUse, (, String]
[), !=, null, ), {, symbolStack, ., pop, (, ), ;, }, }, private, void, addSymbolUse, (, String, name, ,]
[), {, symbolStack, ., pop, (, ), ;, }, }, private, void, addSymbolUse, (, String, name, ,, JSModule, module, ,]
[;, }, }, private, void, addSymbolUse, (, String, name, ,, JSModule, module, ,, SymbolType, type, ), {, NameInfo, info, =]
[., pop, (, ), ;, }, }, private, void, addSymbolUse, (, String, name, ,, JSModule, module, ,, SymbolType, type, )]
[;, NameInfo, def, =, null, ;, for, (, int, i, =, symbolStack, ., size, (, ), -, 1, ;, i]
[,, type, ), ;, NameInfo, def, =, null, ;, for, (, int, i, =, symbolStack, ., size, (, ), -]
[), ;, NameInfo, def, =, null, ;, for, (, int, i, =, symbolStack, ., size, (, ), -, 1, ;]
[;, for, (, int, i, =, symbolStack, ., size, (, ), -, 1, ;, i, >=, 0, ;, i, --]
[;, i, >=, 0, ;, i, --, ), {, def, =, symbolStack, ., get, (, i, ), ., name, ;]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, def, =, symbolStack, ., get, (, i, ), .]
[., size, (, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, def, =, symbolStack, ., get]
[;, i, >=, 0, ;, i, --, ), {, def, =, symbolStack, ., get, (, i, ), ., name, ;]
[;, i, --, ), {, def, =, symbolStack, ., get, (, i, ), ., name, ;, if, (, def, !=]
[>=, 0, ;, i, --, ), {, def, =, symbolStack, ., get, (, i, ), ., name, ;, if, (]
[;, i, --, ), {, def, =, symbolStack, ., get, (, i, ), ., name, ;, if, (, def, !=]
[), {, def, =, symbolStack, ., get, (, i, ), ., name, ;, if, (, def, !=, anonymousNode, ), {]
[--, ), {, def, =, symbolStack, ., get, (, i, ), ., name, ;, if, (, def, !=, anonymousNode, )]
[=, symbolStack, ., get, (, i, ), ., name, ;, if, (, def, !=, anonymousNode, ), {, break, ;, }]
[;, if, (, def, !=, anonymousNode, ), {, break, ;, }, }, if, (, !, def, ., equals, (, info]
[., name, ;, if, (, def, !=, anonymousNode, ), {, break, ;, }, }, if, (, !, def, ., equals]
[., get, (, i, ), ., name, ;, if, (, def, !=, anonymousNode, ), {, break, ;, }, }, if]
[), ., name, ;, if, (, def, !=, anonymousNode, ), {, break, ;, }, }, if, (, !, def, .]
[), {, break, ;, }, }, if, (, !, def, ., equals, (, info, ), ), {, symbolGraph, ., connect]
[!=, anonymousNode, ), {, break, ;, }, }, if, (, !, def, ., equals, (, info, ), ), {, symbolGraph]
[), {, break, ;, }, }, if, (, !, def, ., equals, (, info, ), ), {, symbolGraph, ., connect]
[), {, symbolGraph, ., connect, (, def, ,, module, ,, info, ), ;, }, }, private, String, processNonFunctionPrototypeAssign, (, Node]
[), {, symbolGraph, ., connect, (, def, ,, module, ,, info, ), ;, }, }, private, String, processNonFunctionPrototypeAssign, (, Node]
[., equals, (, info, ), ), {, symbolGraph, ., connect, (, def, ,, module, ,, info, ), ;, }, }]
[), ), {, symbolGraph, ., connect, (, def, ,, module, ,, info, ), ;, }, }, private, String, processNonFunctionPrototypeAssign, (]
[;, }, }, private, String, processNonFunctionPrototypeAssign, (, Node, n, ,, Node, parent, ), {, if, (, isAssignRValue, (, n, ,]
[., connect, (, def, ,, module, ,, info, ), ;, }, }, private, String, processNonFunctionPrototypeAssign, (, Node, n, ,, Node]
[,, module, ,, info, ), ;, }, }, private, String, processNonFunctionPrototypeAssign, (, Node, n, ,, Node, parent, ), {, if]
[,, info, ), ;, }, }, private, String, processNonFunctionPrototypeAssign, (, Node, n, ,, Node, parent, ), {, if, (, isAssignRValue]
[), ;, }, }, private, String, processNonFunctionPrototypeAssign, (, Node, n, ,, Node, parent, ), {, if, (, isAssignRValue, (, n]
[), {, return, getPrototypePropertyNameFromRValue, (, n, ), ;, }, return, null, ;, }, private, boolean, isGlobalFunctionDeclaration, (, NodeTraversal, t, ,]
[&&, !, n, ., isFunction, (, ), ), {, return, getPrototypePropertyNameFromRValue, (, n, ), ;, }, return, null, ;, }]
[,, parent, ), &&, !, n, ., isFunction, (, ), ), {, return, getPrototypePropertyNameFromRValue, (, n, ), ;, }, return]
[), &&, !, n, ., isFunction, (, ), ), {, return, getPrototypePropertyNameFromRValue, (, n, ), ;, }, return, null, ;]
[), {, return, getPrototypePropertyNameFromRValue, (, n, ), ;, }, return, null, ;, }, private, boolean, isGlobalFunctionDeclaration, (, NodeTraversal, t, ,]
[), {, return, getPrototypePropertyNameFromRValue, (, n, ), ;, }, return, null, ;, }, private, boolean, isGlobalFunctionDeclaration, (, NodeTraversal, t, ,]
[., isFunction, (, ), ), {, return, getPrototypePropertyNameFromRValue, (, n, ), ;, }, return, null, ;, }, private, boolean, isGlobalFunctionDeclaration]
[;, }, return, null, ;, }, private, boolean, isGlobalFunctionDeclaration, (, NodeTraversal, t, ,, Node, n, ), {, Scope, s, =]
[), ;, }, return, null, ;, }, private, boolean, isGlobalFunctionDeclaration, (, NodeTraversal, t, ,, Node, n, ), {, Scope, s]
[;, }, private, boolean, isGlobalFunctionDeclaration, (, NodeTraversal, t, ,, Node, n, ), {, Scope, s, =, t, ., getScope, (]
[;, if, (, !, (, s, ., isGlobal, (, ), ||, s, ., getDepth, (, ), ==, 1, &&, s]
[., getScope, (, ), ;, if, (, !, (, s, ., isGlobal, (, ), ||, s, ., getDepth, (, )]
[), {, return, false, ;, }, return, NodeUtil, ., isFunctionDeclaration, (, n, ), ||, n, ., isFunction, (, ), &&]
[), {, return, false, ;, }, return, NodeUtil, ., isFunctionDeclaration, (, n, ), ||, n, ., isFunction, (, ), &&]
[), ), {, return, false, ;, }, return, NodeUtil, ., isFunctionDeclaration, (, n, ), ||, n, ., isFunction, (, )]
[||, s, ., getDepth, (, ), ==, 1, &&, s, ., getRootNode, (, ), ==, n, ), ), {, return]
[., isGlobal, (, ), ||, s, ., getDepth, (, ), ==, 1, &&, s, ., getRootNode, (, ), ==, n]
[), ), {, return, false, ;, }, return, NodeUtil, ., isFunctionDeclaration, (, n, ), ||, n, ., isFunction, (, )]
[&&, s, ., getRootNode, (, ), ==, n, ), ), {, return, false, ;, }, return, NodeUtil, ., isFunctionDeclaration, (]
[==, 1, &&, s, ., getRootNode, (, ), ==, n, ), ), {, return, false, ;, }, return, NodeUtil, .]
[., getDepth, (, ), ==, 1, &&, s, ., getRootNode, (, ), ==, n, ), ), {, return, false, ;]
[&&, s, ., getRootNode, (, ), ==, n, ), ), {, return, false, ;, }, return, NodeUtil, ., isFunctionDeclaration, (]
[), ), {, return, false, ;, }, return, NodeUtil, ., isFunctionDeclaration, (, n, ), ||, n, ., isFunction, (, )]
[==, n, ), ), {, return, false, ;, }, return, NodeUtil, ., isFunctionDeclaration, (, n, ), ||, n, ., isFunction]
[., getRootNode, (, ), ==, n, ), ), {, return, false, ;, }, return, NodeUtil, ., isFunctionDeclaration, (, n, )]
[), ), {, return, false, ;, }, return, NodeUtil, ., isFunctionDeclaration, (, n, ), ||, n, ., isFunction, (, )]
[;, }, return, NodeUtil, ., isFunctionDeclaration, (, n, ), ||, n, ., isFunction, (, ), &&, n, ., getParent, (]
[;, }, private, boolean, isAssignRValue, (, Node, n, ,, Node, parent, ), {, return, parent, !=, null, &&, parent, .]
[||, n, ., isFunction, (, ), &&, n, ., getParent, (, ), ., isName, (, ), ;, }, private, boolean]
[., isFunctionDeclaration, (, n, ), ||, n, ., isFunction, (, ), &&, n, ., getParent, (, ), ., isName, (]
[), ||, n, ., isFunction, (, ), &&, n, ., getParent, (, ), ., isName, (, ), ;, }, private]
[;, }, private, boolean, isAssignRValue, (, Node, n, ,, Node, parent, ), {, return, parent, !=, null, &&, parent, .]
[&&, n, ., getParent, (, ), ., isName, (, ), ;, }, private, boolean, isAssignRValue, (, Node, n, ,, Node]
[., isFunction, (, ), &&, n, ., getParent, (, ), ., isName, (, ), ;, }, private, boolean, isAssignRValue, (]
[;, }, private, boolean, isAssignRValue, (, Node, n, ,, Node, parent, ), {, return, parent, !=, null, &&, parent, .]
[., isName, (, ), ;, }, private, boolean, isAssignRValue, (, Node, n, ,, Node, parent, ), {, return, parent, !=]
[., getParent, (, ), ., isName, (, ), ;, }, private, boolean, isAssignRValue, (, Node, n, ,, Node, parent, )]
[;, }, private, String, getPrototypePropertyNameFromRValue, (, Node, rValue, ), {, Node, lValue, =, NodeUtil, ., getBestLValue, (, rValue, ), ;]
[&&, parent, ., getFirstChild, (, ), !=, n, ;, }, private, String, getPrototypePropertyNameFromRValue, (, Node, rValue, ), {, Node, lValue]
[&&, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), !=, n, ;, }, private, String, getPrototypePropertyNameFromRValue, (]
[!=, null, &&, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), !=, n, ;, }, private, String]
[&&, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), !=, n, ;, }, private, String, getPrototypePropertyNameFromRValue, (]
[&&, parent, ., getFirstChild, (, ), !=, n, ;, }, private, String, getPrototypePropertyNameFromRValue, (, Node, rValue, ), {, Node, lValue]
[., isAssign, (, ), &&, parent, ., getFirstChild, (, ), !=, n, ;, }, private, String, getPrototypePropertyNameFromRValue, (, Node, rValue]
[;, }, private, String, getPrototypePropertyNameFromRValue, (, Node, rValue, ), {, Node, lValue, =, NodeUtil, ., getBestLValue, (, rValue, ), ;]
[!=, n, ;, }, private, String, getPrototypePropertyNameFromRValue, (, Node, rValue, ), {, Node, lValue, =, NodeUtil, ., getBestLValue, (, rValue]
[., getFirstChild, (, ), !=, n, ;, }, private, String, getPrototypePropertyNameFromRValue, (, Node, rValue, ), {, Node, lValue, =, NodeUtil]
[;, }, private, String, getPrototypePropertyNameFromRValue, (, Node, rValue, ), {, Node, lValue, =, NodeUtil, ., getBestLValue, (, rValue, ), ;]
[;, if, (, lValue, ==, null, ||, lValue, ., getParent, (, ), ==, null, ||, lValue, ., getParent, (, )]
[., getBestLValue, (, rValue, ), ;, if, (, lValue, ==, null, ||, lValue, ., getParent, (, ), ==, null, ||]
[), ;, if, (, lValue, ==, null, ||, lValue, ., getParent, (, ), ==, null, ||, lValue, ., getParent, (]
[), {, return, null, ;, }, String, lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rValue, ), )]
[||, !, (, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ||, NodeUtil, ., isExprAssign, (]
[||, lValue, ., getParent, (, ), ., getParent, (, ), ==, null, ||, !, (, NodeUtil, ., isObjectLitKey, (, lValue]
[||, lValue, ., getParent, (, ), ==, null, ||, lValue, ., getParent, (, ), ., getParent, (, ), ==, null]
[==, null, ||, lValue, ., getParent, (, ), ==, null, ||, lValue, ., getParent, (, ), ., getParent, (, )]
[||, lValue, ., getParent, (, ), ==, null, ||, lValue, ., getParent, (, ), ., getParent, (, ), ==, null]
[||, lValue, ., getParent, (, ), ., getParent, (, ), ==, null, ||, !, (, NodeUtil, ., isObjectLitKey, (, lValue]
[==, null, ||, lValue, ., getParent, (, ), ., getParent, (, ), ==, null, ||, !, (, NodeUtil, ., isObjectLitKey]
[., getParent, (, ), ==, null, ||, lValue, ., getParent, (, ), ., getParent, (, ), ==, null, ||, !]
[||, lValue, ., getParent, (, ), ., getParent, (, ), ==, null, ||, !, (, NodeUtil, ., isObjectLitKey, (, lValue]
[||, !, (, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ||, NodeUtil, ., isExprAssign, (]
[==, null, ||, !, (, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ||, NodeUtil, .]
[., getParent, (, ), ==, null, ||, !, (, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, )]
[., getParent, (, ), ., getParent, (, ), ==, null, ||, !, (, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue]
[||, !, (, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ||, NodeUtil, ., isExprAssign, (]
[), {, return, null, ;, }, String, lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rValue, ), )]
[), {, return, null, ;, }, String, lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rValue, ), )]
[), ), {, return, null, ;, }, String, lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rValue, )]
[||, NodeUtil, ., isExprAssign, (, lValue, ., getParent, (, ), ., getParent, (, ), ), ), ), {, return, null]
[., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ||, NodeUtil, ., isExprAssign, (, lValue, ., getParent, (]
[,, lValue, ., getParent, (, ), ), ||, NodeUtil, ., isExprAssign, (, lValue, ., getParent, (, ), ., getParent, (]
[), ||, NodeUtil, ., isExprAssign, (, lValue, ., getParent, (, ), ., getParent, (, ), ), ), ), {, return]
[., getParent, (, ), ), ||, NodeUtil, ., isExprAssign, (, lValue, ., getParent, (, ), ., getParent, (, ), )]
[), ), {, return, null, ;, }, String, lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rValue, )]
[., isExprAssign, (, lValue, ., getParent, (, ), ., getParent, (, ), ), ), ), {, return, null, ;, }]
[), ), ), {, return, null, ;, }, String, lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rValue]
[., getParent, (, ), ), ), ), {, return, null, ;, }, String, lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil]
[., getParent, (, ), ., getParent, (, ), ), ), ), {, return, null, ;, }, String, lValueName, =, NodeUtil]
[;, }, String, lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rValue, ), ), ;, if, (, lValueName]
[;, if, (, lValueName, ==, null, ), {, return, null, ;, }, int, lastDot, =, lValueName, ., lastIndexOf, (, '.']
[., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rValue, ), ), ;, if, (, lValueName, ==, null, ), {, return, null]
[), ;, if, (, lValueName, ==, null, ), {, return, null, ;, }, int, lastDot, =, lValueName, ., lastIndexOf, (]
[., getBestLValue, (, rValue, ), ), ;, if, (, lValueName, ==, null, ), {, return, null, ;, }, int, lastDot]
[), ), ;, if, (, lValueName, ==, null, ), {, return, null, ;, }, int, lastDot, =, lValueName, ., lastIndexOf]
[), {, return, null, ;, }, int, lastDot, =, lValueName, ., lastIndexOf, (, '.', ), ;, if, (, lastDot, ==]
[==, null, ), {, return, null, ;, }, int, lastDot, =, lValueName, ., lastIndexOf, (, '.', ), ;, if, (]
[), {, return, null, ;, }, int, lastDot, =, lValueName, ., lastIndexOf, (, '.', ), ;, if, (, lastDot, ==]
[;, }, int, lastDot, =, lValueName, ., lastIndexOf, (, '.', ), ;, if, (, lastDot, ==, -, 1, ), {]
[;, if, (, lastDot, ==, -, 1, ), {, return, null, ;, }, String, firstPart, =, lValueName, ., substring, (]
[., lastIndexOf, (, '.', ), ;, if, (, lastDot, ==, -, 1, ), {, return, null, ;, }, String, firstPart]
[), ;, if, (, lastDot, ==, -, 1, ), {, return, null, ;, }, String, firstPart, =, lValueName, ., substring]
[), {, return, null, ;, }, String, firstPart, =, lValueName, ., substring, (, 0, ,, lastDot, ), ;, if, (]
[==, -, 1, ), {, return, null, ;, }, String, firstPart, =, lValueName, ., substring, (, 0, ,, lastDot, )]
[), {, return, null, ;, }, String, firstPart, =, lValueName, ., substring, (, 0, ,, lastDot, ), ;, if, (]
[), {, return, null, ;, }, String, firstPart, =, lValueName, ., substring, (, 0, ,, lastDot, ), ;, if, (]
[;, }, String, firstPart, =, lValueName, ., substring, (, 0, ,, lastDot, ), ;, if, (, !, firstPart, ., endsWith]
[;, if, (, !, firstPart, ., endsWith, (, ".prototype", ), ), {, return, null, ;, }, return, lValueName, ., substring]
[., substring, (, 0, ,, lastDot, ), ;, if, (, !, firstPart, ., endsWith, (, ".prototype", ), ), {, return]
[,, lastDot, ), ;, if, (, !, firstPart, ., endsWith, (, ".prototype", ), ), {, return, null, ;, }, return]
[), ;, if, (, !, firstPart, ., endsWith, (, ".prototype", ), ), {, return, null, ;, }, return, lValueName, .]
[), {, return, null, ;, }, return, lValueName, ., substring, (, lastDot, +, 1, ), ;, }, private, boolean, processGlobalFunctionDeclaration]
[), {, return, null, ;, }, return, lValueName, ., substring, (, lastDot, +, 1, ), ;, }, private, boolean, processGlobalFunctionDeclaration]
[., endsWith, (, ".prototype", ), ), {, return, null, ;, }, return, lValueName, ., substring, (, lastDot, +, 1, )]
[), ), {, return, null, ;, }, return, lValueName, ., substring, (, lastDot, +, 1, ), ;, }, private, boolean]
[;, }, return, lValueName, ., substring, (, lastDot, +, 1, ), ;, }, private, boolean, processGlobalFunctionDeclaration, (, NodeTraversal, t, ,]
[;, }, private, boolean, processGlobalFunctionDeclaration, (, NodeTraversal, t, ,, Node, nameNode, ,, Var, v, ), {, Node, firstChild, =, nameNode]
[., substring, (, lastDot, +, 1, ), ;, }, private, boolean, processGlobalFunctionDeclaration, (, NodeTraversal, t, ,, Node, nameNode, ,, Var]
[), ;, }, private, boolean, processGlobalFunctionDeclaration, (, NodeTraversal, t, ,, Node, nameNode, ,, Var, v, ), {, Node, firstChild, =]
[+, 1, ), ;, }, private, boolean, processGlobalFunctionDeclaration, (, NodeTraversal, t, ,, Node, nameNode, ,, Var, v, ), {, Node]
[), ;, }, private, boolean, processGlobalFunctionDeclaration, (, NodeTraversal, t, ,, Node, nameNode, ,, Var, v, ), {, Node, firstChild, =]
[;, Node, parent, =, nameNode, ., getParent, (, ), ;, if, (, isGlobalFunctionDeclaration, (, t, ,, parent, ), ||, firstChild]
[., getFirstChild, (, ), ;, Node, parent, =, nameNode, ., getParent, (, ), ;, if, (, isGlobalFunctionDeclaration, (, t, ,]
[;, if, (, isGlobalFunctionDeclaration, (, t, ,, parent, ), ||, firstChild, !=, null, &&, isGlobalFunctionDeclaration, (, t, ,, firstChild, )]
[., getParent, (, ), ;, if, (, isGlobalFunctionDeclaration, (, t, ,, parent, ), ||, firstChild, !=, null, &&, isGlobalFunctionDeclaration, (]
[), {, String, name, =, nameNode, ., getString, (, ), ;, getNameInfoForName, (, name, ,, VAR, ), ., getDeclarations, (]
[||, firstChild, !=, null, &&, isGlobalFunctionDeclaration, (, t, ,, firstChild, ), ), {, String, name, =, nameNode, ., getString, (]
[,, parent, ), ||, firstChild, !=, null, &&, isGlobalFunctionDeclaration, (, t, ,, firstChild, ), ), {, String, name, =, nameNode]
[), ||, firstChild, !=, null, &&, isGlobalFunctionDeclaration, (, t, ,, firstChild, ), ), {, String, name, =, nameNode, ., getString]
[), {, String, name, =, nameNode, ., getString, (, ), ;, getNameInfoForName, (, name, ,, VAR, ), ., getDeclarations, (]
[&&, isGlobalFunctionDeclaration, (, t, ,, firstChild, ), ), {, String, name, =, nameNode, ., getString, (, ), ;, getNameInfoForName, (]
[!=, null, &&, isGlobalFunctionDeclaration, (, t, ,, firstChild, ), ), {, String, name, =, nameNode, ., getString, (, ), ;]
[&&, isGlobalFunctionDeclaration, (, t, ,, firstChild, ), ), {, String, name, =, nameNode, ., getString, (, ), ;, getNameInfoForName, (]
[), {, String, name, =, nameNode, ., getString, (, ), ;, getNameInfoForName, (, name, ,, VAR, ), ., getDeclarations, (]
[,, firstChild, ), ), {, String, name, =, nameNode, ., getString, (, ), ;, getNameInfoForName, (, name, ,, VAR, )]
[), ), {, String, name, =, nameNode, ., getString, (, ), ;, getNameInfoForName, (, name, ,, VAR, ), ., getDeclarations]
[;, getNameInfoForName, (, name, ,, VAR, ), ., getDeclarations, (, ), ., add, (, new, GlobalFunction, (, nameNode, ,, v]
[., getString, (, ), ;, getNameInfoForName, (, name, ,, VAR, ), ., getDeclarations, (, ), ., add, (, new, GlobalFunction]
[;, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ||, anchorUnusedVars, ), {, addGlobalUseOfSymbol, (, name]
[., add, (, new, GlobalFunction, (, nameNode, ,, v, ,, t, ., getModule, (, ), ), ), ;, if, (]
[., getDeclarations, (, ), ., add, (, new, GlobalFunction, (, nameNode, ,, v, ,, t, ., getModule, (, ), )]
[,, VAR, ), ., getDeclarations, (, ), ., add, (, new, GlobalFunction, (, nameNode, ,, v, ,, t, ., getModule]
[), ., getDeclarations, (, ), ., add, (, new, GlobalFunction, (, nameNode, ,, v, ,, t, ., getModule, (, )]
[), ;, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ||, anchorUnusedVars, ), {, addGlobalUseOfSymbol, (]
[,, v, ,, t, ., getModule, (, ), ), ), ;, if, (, compiler, ., getCodingConvention, (, ), ., isExported]
[,, t, ., getModule, (, ), ), ), ;, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, name]
[), ), ;, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ||, anchorUnusedVars, ), {, addGlobalUseOfSymbol]
[., getModule, (, ), ), ), ;, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ||]
[), {, addGlobalUseOfSymbol, (, name, ,, t, ., getModule, (, ), ,, VAR, ), ;, }, return, true, ;, }]
[||, anchorUnusedVars, ), {, addGlobalUseOfSymbol, (, name, ,, t, ., getModule, (, ), ,, VAR, ), ;, }, return, true]
[., isExported, (, name, ), ||, anchorUnusedVars, ), {, addGlobalUseOfSymbol, (, name, ,, t, ., getModule, (, ), ,, VAR]
[., getCodingConvention, (, ), ., isExported, (, name, ), ||, anchorUnusedVars, ), {, addGlobalUseOfSymbol, (, name, ,, t, ., getModule]
[), ||, anchorUnusedVars, ), {, addGlobalUseOfSymbol, (, name, ,, t, ., getModule, (, ), ,, VAR, ), ;, }, return]
[), {, addGlobalUseOfSymbol, (, name, ,, t, ., getModule, (, ), ,, VAR, ), ;, }, return, true, ;, }]
[;, }, return, true, ;, }, return, false, ;, }, private, boolean, processPrototypeRef, (, NodeTraversal, t, ,, Node, ref, )]
[,, t, ., getModule, (, ), ,, VAR, ), ;, }, return, true, ;, }, return, false, ;, }, private]
[,, VAR, ), ;, }, return, true, ;, }, return, false, ;, }, private, boolean, processPrototypeRef, (, NodeTraversal, t, ,]
[., getModule, (, ), ,, VAR, ), ;, }, return, true, ;, }, return, false, ;, }, private, boolean, processPrototypeRef]
[), ;, }, return, true, ;, }, return, false, ;, }, private, boolean, processPrototypeRef, (, NodeTraversal, t, ,, Node, ref]
[;, }, return, false, ;, }, private, boolean, processPrototypeRef, (, NodeTraversal, t, ,, Node, ref, ), {, Node, root, =]
[;, }, private, boolean, processPrototypeRef, (, NodeTraversal, t, ,, Node, ref, ), {, Node, root, =, NodeUtil, ., getRootOfQualifiedName, (]
[;, Node, n, =, ref, ., getParent, (, ), ;, switch, (, n, ., getType, (, ), ), {, case]
[., getRootOfQualifiedName, (, ref, ), ;, Node, n, =, ref, ., getParent, (, ), ;, switch, (, n, ., getType]
[), ;, Node, n, =, ref, ., getParent, (, ), ;, switch, (, n, ., getType, (, ), ), {]
[;, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, dest, =, n, .]
[., getParent, (, ), ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, Node]
[), {, case, Token, ., GETPROP, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;]
[., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, dest, =, n, ., getFirstChild, (, ), .]
[:, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, Node, parent, =, n, ., getParent]
[., GETPROP, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, Node, parent, =, n]
[;, Node, parent, =, n, ., getParent, (, ), ;, Node, grandParent, =, parent, ., getParent, (, ), ;, if]
[., getNext, (, ), ;, Node, parent, =, n, ., getParent, (, ), ;, Node, grandParent, =, parent, ., getParent]
[., getFirstChild, (, ), ., getNext, (, ), ;, Node, parent, =, n, ., getParent, (, ), ;, Node, grandParent]
[;, Node, grandParent, =, parent, ., getParent, (, ), ;, if, (, dest, ., isString, (, ), &&, NodeUtil, .]
[., getParent, (, ), ;, Node, grandParent, =, parent, ., getParent, (, ), ;, if, (, dest, ., isString, (]
[;, if, (, dest, ., isString, (, ), &&, NodeUtil, ., isExprAssign, (, grandParent, ), &&, NodeUtil, ., isVarOrSimpleAssignLhs, (]
[., getParent, (, ), ;, if, (, dest, ., isString, (, ), &&, NodeUtil, ., isExprAssign, (, grandParent, ), &&]
[), {, String, name, =, dest, ., getString, (, ), ;, Property, prop, =, new, AssignmentProperty, (, grandParent, ,, maybeGetVar]
[&&, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, String, name, =, dest, ., getString, (, ), ;]
[&&, NodeUtil, ., isExprAssign, (, grandParent, ), &&, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, String, name]
[., isString, (, ), &&, NodeUtil, ., isExprAssign, (, grandParent, ), &&, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, )]
[&&, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, String, name, =, dest, ., getString, (, ), ;]
[., isExprAssign, (, grandParent, ), &&, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, String, name, =, dest]
[), &&, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, String, name, =, dest, ., getString, (, )]
[), {, String, name, =, dest, ., getString, (, ), ;, Property, prop, =, new, AssignmentProperty, (, grandParent, ,, maybeGetVar]
[., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, String, name, =, dest, ., getString, (, ), ;, Property, prop]
[,, parent, ), ), {, String, name, =, dest, ., getString, (, ), ;, Property, prop, =, new, AssignmentProperty, (]
[), ), {, String, name, =, dest, ., getString, (, ), ;, Property, prop, =, new, AssignmentProperty, (, grandParent, ,]
[;, Property, prop, =, new, AssignmentProperty, (, grandParent, ,, maybeGetVar, (, t, ,, root, ), ,, t, ., getModule, (]
[., getString, (, ), ;, Property, prop, =, new, AssignmentProperty, (, grandParent, ,, maybeGetVar, (, t, ,, root, ), ,]
[;, getNameInfoForName, (, name, ,, PROPERTY, ), ., getDeclarations, (, ), ., add, (, prop, ), ;, return, true, ;]
[,, maybeGetVar, (, t, ,, root, ), ,, t, ., getModule, (, ), ), ;, getNameInfoForName, (, name, ,, PROPERTY]
[,, t, ., getModule, (, ), ), ;, getNameInfoForName, (, name, ,, PROPERTY, ), ., getDeclarations, (, ), ., add]
[,, root, ), ,, t, ., getModule, (, ), ), ;, getNameInfoForName, (, name, ,, PROPERTY, ), ., getDeclarations, (]
[), ,, t, ., getModule, (, ), ), ;, getNameInfoForName, (, name, ,, PROPERTY, ), ., getDeclarations, (, ), .]
[), ;, getNameInfoForName, (, name, ,, PROPERTY, ), ., getDeclarations, (, ), ., add, (, prop, ), ;, return, true]
[., getModule, (, ), ), ;, getNameInfoForName, (, name, ,, PROPERTY, ), ., getDeclarations, (, ), ., add, (, prop]
[;, return, true, ;, }, break, ;, case, Token, ., ASSIGN, :, Node, map, =, n, ., getFirstChild, (, )]
[., add, (, prop, ), ;, return, true, ;, }, break, ;, case, Token, ., ASSIGN, :, Node, map, =]
[., getDeclarations, (, ), ., add, (, prop, ), ;, return, true, ;, }, break, ;, case, Token, ., ASSIGN]
[,, PROPERTY, ), ., getDeclarations, (, ), ., add, (, prop, ), ;, return, true, ;, }, break, ;, case]
[), ., getDeclarations, (, ), ., add, (, prop, ), ;, return, true, ;, }, break, ;, case, Token, .]
[), ;, return, true, ;, }, break, ;, case, Token, ., ASSIGN, :, Node, map, =, n, ., getFirstChild, (]
[;, }, break, ;, case, Token, ., ASSIGN, :, Node, map, =, n, ., getFirstChild, (, ), ., getNext, (]
[:, Node, map, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, map, ., isObjectLit, (]
[., ASSIGN, :, Node, map, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, map, .]
[;, if, (, map, ., isObjectLit, (, ), ), {, for, (, Node, key, =, map, ., getFirstChild, (, )]
[., getNext, (, ), ;, if, (, map, ., isObjectLit, (, ), ), {, for, (, Node, key, =, map]
[., getFirstChild, (, ), ., getNext, (, ), ;, if, (, map, ., isObjectLit, (, ), ), {, for, (]
[), {, for, (, Node, key, =, map, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key]
[., isObjectLit, (, ), ), {, for, (, Node, key, =, map, ., getFirstChild, (, ), ;, key, !=, null]
[;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, String, name, =, key, ., getString]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, String, name]
[;, key, =, key, ., getNext, (, ), ), {, String, name, =, key, ., getString, (, ), ;, Property]
[!=, null, ;, key, =, key, ., getNext, (, ), ), {, String, name, =, key, ., getString, (, )]
[;, key, =, key, ., getNext, (, ), ), {, String, name, =, key, ., getString, (, ), ;, Property]
[=, key, ., getNext, (, ), ), {, String, name, =, key, ., getString, (, ), ;, Property, prop, =]
[), {, String, name, =, key, ., getString, (, ), ;, Property, prop, =, new, LiteralProperty, (, key, ,, key]
[., getNext, (, ), ), {, String, name, =, key, ., getString, (, ), ;, Property, prop, =, new, LiteralProperty]
[;, Property, prop, =, new, LiteralProperty, (, key, ,, key, ., getFirstChild, (, ), ,, map, ,, n, ,, maybeGetVar]
[., getString, (, ), ;, Property, prop, =, new, LiteralProperty, (, key, ,, key, ., getFirstChild, (, ), ,, map]
[;, getNameInfoForName, (, name, ,, PROPERTY, ), ., getDeclarations, (, ), ., add, (, prop, ), ;, }, return, true]
[,, key, ., getFirstChild, (, ), ,, map, ,, n, ,, maybeGetVar, (, t, ,, root, ), ,, t, .]
[,, map, ,, n, ,, maybeGetVar, (, t, ,, root, ), ,, t, ., getModule, (, ), ), ;, getNameInfoForName]
[., getFirstChild, (, ), ,, map, ,, n, ,, maybeGetVar, (, t, ,, root, ), ,, t, ., getModule, (]
[,, n, ,, maybeGetVar, (, t, ,, root, ), ,, t, ., getModule, (, ), ), ;, getNameInfoForName, (, name]
[,, maybeGetVar, (, t, ,, root, ), ,, t, ., getModule, (, ), ), ;, getNameInfoForName, (, name, ,, PROPERTY]
[,, t, ., getModule, (, ), ), ;, getNameInfoForName, (, name, ,, PROPERTY, ), ., getDeclarations, (, ), ., add]
[,, root, ), ,, t, ., getModule, (, ), ), ;, getNameInfoForName, (, name, ,, PROPERTY, ), ., getDeclarations, (]
[), ,, t, ., getModule, (, ), ), ;, getNameInfoForName, (, name, ,, PROPERTY, ), ., getDeclarations, (, ), .]
[), ;, getNameInfoForName, (, name, ,, PROPERTY, ), ., getDeclarations, (, ), ., add, (, prop, ), ;, }, return]
[., getModule, (, ), ), ;, getNameInfoForName, (, name, ,, PROPERTY, ), ., getDeclarations, (, ), ., add, (, prop]
[;, }, return, true, ;, }, break, ;, }, return, false, ;, }, private, Var, maybeGetVar, (, NodeTraversal, t, ,]
[., add, (, prop, ), ;, }, return, true, ;, }, break, ;, }, return, false, ;, }, private, Var]
[., getDeclarations, (, ), ., add, (, prop, ), ;, }, return, true, ;, }, break, ;, }, return, false]
[,, PROPERTY, ), ., getDeclarations, (, ), ., add, (, prop, ), ;, }, return, true, ;, }, break, ;]
[), ., getDeclarations, (, ), ., add, (, prop, ), ;, }, return, true, ;, }, break, ;, }, return]
[), ;, }, return, true, ;, }, break, ;, }, return, false, ;, }, private, Var, maybeGetVar, (, NodeTraversal, t]
[;, }, break, ;, }, return, false, ;, }, private, Var, maybeGetVar, (, NodeTraversal, t, ,, Node, maybeName, ), {]
[;, }, private, Var, maybeGetVar, (, NodeTraversal, t, ,, Node, maybeName, ), {, return, maybeName, ., isName, (, ), ?]
[;, }, private, void, addGlobalUseOfSymbol, (, String, name, ,, JSModule, module, ,, SymbolType, type, ), {, symbolGraph, ., connect, (]
[?, t, ., getScope, (, ), ., getVar, (, maybeName, ., getString, (, ), ), :, null, ;, }, private]
[., isName, (, ), ?, t, ., getScope, (, ), ., getVar, (, maybeName, ., getString, (, ), ), :]
[:, null, ;, }, private, void, addGlobalUseOfSymbol, (, String, name, ,, JSModule, module, ,, SymbolType, type, ), {, symbolGraph, .]
[., getVar, (, maybeName, ., getString, (, ), ), :, null, ;, }, private, void, addGlobalUseOfSymbol, (, String, name, ,]
[., getScope, (, ), ., getVar, (, maybeName, ., getString, (, ), ), :, null, ;, }, private, void, addGlobalUseOfSymbol]
[), :, null, ;, }, private, void, addGlobalUseOfSymbol, (, String, name, ,, JSModule, module, ,, SymbolType, type, ), {, symbolGraph]
[., getString, (, ), ), :, null, ;, }, private, void, addGlobalUseOfSymbol, (, String, name, ,, JSModule, module, ,, SymbolType]
[;, }, private, void, addGlobalUseOfSymbol, (, String, name, ,, JSModule, module, ,, SymbolType, type, ), {, symbolGraph, ., connect, (]
[;, }, }, private, class, ProcessExternProperties, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[., connect, (, globalNode, ,, module, ,, getNameInfoForName, (, name, ,, type, ), ), ;, }, }, private, class, ProcessExternProperties]
[,, module, ,, getNameInfoForName, (, name, ,, type, ), ), ;, }, }, private, class, ProcessExternProperties, extends, AbstractPostOrderCallback, {, @]
[,, getNameInfoForName, (, name, ,, type, ), ), ;, }, }, private, class, ProcessExternProperties, extends, AbstractPostOrderCallback, {, @, Override, public]
[), ;, }, }, private, class, ProcessExternProperties, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[,, type, ), ), ;, }, }, private, class, ProcessExternProperties, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal]
[), ), ;, }, }, private, class, ProcessExternProperties, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[), {, symbolGraph, ., connect, (, externNode, ,, firstModule, ,, getNameInfoForName, (, n, ., getLastChild, (, ), ., getString, (]
[., isGetProp, (, ), ), {, symbolGraph, ., connect, (, externNode, ,, firstModule, ,, getNameInfoForName, (, n, ., getLastChild, (]
[;, }, }, }, private, class, PropagateReferences, implements, EdgeCallback, <, NameInfo, ,, JSModule, >, {, @, Override, public, boolean, traverseEdge]
[., connect, (, externNode, ,, firstModule, ,, getNameInfoForName, (, n, ., getLastChild, (, ), ., getString, (, ), ,, PROPERTY]
[,, firstModule, ,, getNameInfoForName, (, n, ., getLastChild, (, ), ., getString, (, ), ,, PROPERTY, ), ), ;, }]
[,, getNameInfoForName, (, n, ., getLastChild, (, ), ., getString, (, ), ,, PROPERTY, ), ), ;, }, }, }]
[), ;, }, }, }, private, class, PropagateReferences, implements, EdgeCallback, <, NameInfo, ,, JSModule, >, {, @, Override, public, boolean]
[,, PROPERTY, ), ), ;, }, }, }, private, class, PropagateReferences, implements, EdgeCallback, <, NameInfo, ,, JSModule, >, {, @]
[., getString, (, ), ,, PROPERTY, ), ), ;, }, }, }, private, class, PropagateReferences, implements, EdgeCallback, <, NameInfo, ,]
[., getLastChild, (, ), ., getString, (, ), ,, PROPERTY, ), ), ;, }, }, }, private, class, PropagateReferences, implements]
[), ), ;, }, }, }, private, class, PropagateReferences, implements, EdgeCallback, <, NameInfo, ,, JSModule, >, {, @, Override, public]
[), {, JSModule, startModule, =, start, ., getDeepestCommonModuleRef, (, ), ;, if, (, startModule, !=, null, &&, moduleGraph, ., dependsOn]
[., isReferenced, (, ), ), {, JSModule, startModule, =, start, ., getDeepestCommonModuleRef, (, ), ;, if, (, startModule, !=, null]
[;, if, (, startModule, !=, null, &&, moduleGraph, ., dependsOn, (, startModule, ,, edge, ), ), {, return, dest, .]
[., getDeepestCommonModuleRef, (, ), ;, if, (, startModule, !=, null, &&, moduleGraph, ., dependsOn, (, startModule, ,, edge, ), )]
[), {, return, dest, ., markReference, (, startModule, ), ;, }, else, {, return, dest, ., markReference, (, edge, )]
[&&, moduleGraph, ., dependsOn, (, startModule, ,, edge, ), ), {, return, dest, ., markReference, (, startModule, ), ;, }]
[!=, null, &&, moduleGraph, ., dependsOn, (, startModule, ,, edge, ), ), {, return, dest, ., markReference, (, startModule, )]
[&&, moduleGraph, ., dependsOn, (, startModule, ,, edge, ), ), {, return, dest, ., markReference, (, startModule, ), ;, }]
[), {, return, dest, ., markReference, (, startModule, ), ;, }, else, {, return, dest, ., markReference, (, edge, )]
[., dependsOn, (, startModule, ,, edge, ), ), {, return, dest, ., markReference, (, startModule, ), ;, }, else, {]
[,, edge, ), ), {, return, dest, ., markReference, (, startModule, ), ;, }, else, {, return, dest, ., markReference]
[), ), {, return, dest, ., markReference, (, startModule, ), ;, }, else, {, return, dest, ., markReference, (, edge]
[;, }, else, {, return, dest, ., markReference, (, edge, ), ;, }, }, return, false, ;, }, }, interface]
[., markReference, (, startModule, ), ;, }, else, {, return, dest, ., markReference, (, edge, ), ;, }, }, return]
[), ;, }, else, {, return, dest, ., markReference, (, edge, ), ;, }, }, return, false, ;, }, }]
[;, }, }, return, false, ;, }, }, interface, Symbol, {, void, remove, (, ), ;, Var, getRootVar, (, )]
[., markReference, (, edge, ), ;, }, }, return, false, ;, }, }, interface, Symbol, {, void, remove, (, )]
[), ;, }, }, return, false, ;, }, }, interface, Symbol, {, void, remove, (, ), ;, Var, getRootVar, (]
[;, }, }, interface, Symbol, {, void, remove, (, ), ;, Var, getRootVar, (, ), ;, JSModule, getModule, (, )]
[;, Preconditions, ., checkState, (, parent, ., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent, ), ), ;, this]
[., getParent, (, ), ;, Preconditions, ., checkState, (, parent, ., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent]
[;, this, ., nameNode, =, nameNode, ;, this, ., var, =, var, ;, this, ., module, =, module, ;, }]
[., checkState, (, parent, ., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent, ), ), ;, this, ., nameNode]
[), ;, this, ., nameNode, =, nameNode, ;, this, ., var, =, var, ;, this, ., module, =, module, ;]
[||, NodeUtil, ., isFunctionDeclaration, (, parent, ), ), ;, this, ., nameNode, =, nameNode, ;, this, ., var, =, var]
[., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent, ), ), ;, this, ., nameNode, =, nameNode, ;, this]
[), ;, this, ., nameNode, =, nameNode, ;, this, ., var, =, var, ;, this, ., module, =, module, ;]
[., isFunctionDeclaration, (, parent, ), ), ;, this, ., nameNode, =, nameNode, ;, this, ., var, =, var, ;, this]
[), ), ;, this, ., nameNode, =, nameNode, ;, this, ., var, =, var, ;, this, ., module, =, module]
[=, nameNode, ;, this, ., var, =, var, ;, this, ., module, =, module, ;, }, @, Override, public, Var]
[., nameNode, =, nameNode, ;, this, ., var, =, var, ;, this, ., module, =, module, ;, }, @, Override]
[;, this, ., var, =, var, ;, this, ., module, =, module, ;, }, @, Override, public, Var, getRootVar, (]
[=, var, ;, this, ., module, =, module, ;, }, @, Override, public, Var, getRootVar, (, ), {, return, var]
[., var, =, var, ;, this, ., module, =, module, ;, }, @, Override, public, Var, getRootVar, (, ), {]
[;, this, ., module, =, module, ;, }, @, Override, public, Var, getRootVar, (, ), {, return, var, ;, }]
[=, module, ;, }, @, Override, public, Var, getRootVar, (, ), {, return, var, ;, }, @, Override, public, void]
[., module, =, module, ;, }, @, Override, public, Var, getRootVar, (, ), {, return, var, ;, }, @, Override]
[;, }, @, Override, public, Var, getRootVar, (, ), {, return, var, ;, }, @, Override, public, void, remove, (]
[;, }, @, Override, public, void, remove, (, ), {, Node, parent, =, nameNode, ., getParent, (, ), ;, if]
[;, if, (, parent, ., isFunction, (, ), ||, parent, ., hasOneChild, (, ), ), {, NodeUtil, ., removeChild, (]
[., getParent, (, ), ;, if, (, parent, ., isFunction, (, ), ||, parent, ., hasOneChild, (, ), ), {]
[), {, NodeUtil, ., removeChild, (, parent, ., getParent, (, ), ,, parent, ), ;, }, else, {, Preconditions, .]
[||, parent, ., hasOneChild, (, ), ), {, NodeUtil, ., removeChild, (, parent, ., getParent, (, ), ,, parent, )]
[., isFunction, (, ), ||, parent, ., hasOneChild, (, ), ), {, NodeUtil, ., removeChild, (, parent, ., getParent, (]
[), {, NodeUtil, ., removeChild, (, parent, ., getParent, (, ), ,, parent, ), ;, }, else, {, Preconditions, .]
[., hasOneChild, (, ), ), {, NodeUtil, ., removeChild, (, parent, ., getParent, (, ), ,, parent, ), ;, }]
[;, }, else, {, Preconditions, ., checkState, (, parent, ., isVar, (, ), ), ;, parent, ., removeChild, (, nameNode]
[., removeChild, (, parent, ., getParent, (, ), ,, parent, ), ;, }, else, {, Preconditions, ., checkState, (, parent]
[,, parent, ), ;, }, else, {, Preconditions, ., checkState, (, parent, ., isVar, (, ), ), ;, parent, .]
[., getParent, (, ), ,, parent, ), ;, }, else, {, Preconditions, ., checkState, (, parent, ., isVar, (, )]
[), ;, }, else, {, Preconditions, ., checkState, (, parent, ., isVar, (, ), ), ;, parent, ., removeChild, (]
[;, parent, ., removeChild, (, nameNode, ), ;, }, }, @, Override, public, JSModule, getModule, (, ), {, return, module]
[., checkState, (, parent, ., isVar, (, ), ), ;, parent, ., removeChild, (, nameNode, ), ;, }, }, @]
[), ;, parent, ., removeChild, (, nameNode, ), ;, }, }, @, Override, public, JSModule, getModule, (, ), {, return]
[., isVar, (, ), ), ;, parent, ., removeChild, (, nameNode, ), ;, }, }, @, Override, public, JSModule, getModule]
[;, }, }, @, Override, public, JSModule, getModule, (, ), {, return, module, ;, }, public, Node, getFunctionNode, (, )]
[., removeChild, (, nameNode, ), ;, }, }, @, Override, public, JSModule, getModule, (, ), {, return, module, ;, }]
[), ;, }, }, @, Override, public, JSModule, getModule, (, ), {, return, module, ;, }, public, Node, getFunctionNode, (]
[;, }, public, Node, getFunctionNode, (, ), {, Node, parent, =, nameNode, ., getParent, (, ), ;, if, (, parent]
[;, if, (, parent, ., isFunction, (, ), ), {, return, parent, ;, }, else, {, return, nameNode, ., getChildAtIndex]
[., getParent, (, ), ;, if, (, parent, ., isFunction, (, ), ), {, return, parent, ;, }, else, {]
[), {, return, parent, ;, }, else, {, return, nameNode, ., getChildAtIndex, (, 1, ), ;, }, }, }, interface]
[., isFunction, (, ), ), {, return, parent, ;, }, else, {, return, nameNode, ., getChildAtIndex, (, 1, ), ;]
[;, }, else, {, return, nameNode, ., getChildAtIndex, (, 1, ), ;, }, }, }, interface, Property, extends, Symbol, {]
[;, }, }, }, interface, Property, extends, Symbol, {, Node, getPrototype, (, ), ;, Node, getValue, (, ), ;, }]
[., getChildAtIndex, (, 1, ), ;, }, }, }, interface, Property, extends, Symbol, {, Node, getPrototype, (, ), ;, Node]
[), ;, }, }, }, interface, Property, extends, Symbol, {, Node, getPrototype, (, ), ;, Node, getValue, (, ), ;]
[=, node, ;, this, ., rootVar, =, rootVar, ;, this, ., module, =, module, ;, }, @, Override, public, Var]
[., exprNode, =, node, ;, this, ., rootVar, =, rootVar, ;, this, ., module, =, module, ;, }, @, Override]
[;, this, ., rootVar, =, rootVar, ;, this, ., module, =, module, ;, }, @, Override, public, Var, getRootVar, (]
[=, rootVar, ;, this, ., module, =, module, ;, }, @, Override, public, Var, getRootVar, (, ), {, return, rootVar]
[., rootVar, =, rootVar, ;, this, ., module, =, module, ;, }, @, Override, public, Var, getRootVar, (, ), {]
[;, this, ., module, =, module, ;, }, @, Override, public, Var, getRootVar, (, ), {, return, rootVar, ;, }]
[=, module, ;, }, @, Override, public, Var, getRootVar, (, ), {, return, rootVar, ;, }, @, Override, public, void]
[., module, =, module, ;, }, @, Override, public, Var, getRootVar, (, ), {, return, rootVar, ;, }, @, Override]
[;, }, @, Override, public, Var, getRootVar, (, ), {, return, rootVar, ;, }, @, Override, public, void, remove, (]
[;, }, @, Override, public, void, remove, (, ), {, NodeUtil, ., removeChild, (, exprNode, ., getParent, (, ), ,]
[;, }, @, Override, public, Node, getPrototype, (, ), {, return, getAssignNode, (, ), ., getFirstChild, (, ), ., getFirstChild]
[., removeChild, (, exprNode, ., getParent, (, ), ,, exprNode, ), ;, }, @, Override, public, Node, getPrototype, (, )]
[,, exprNode, ), ;, }, @, Override, public, Node, getPrototype, (, ), {, return, getAssignNode, (, ), ., getFirstChild, (]
[., getParent, (, ), ,, exprNode, ), ;, }, @, Override, public, Node, getPrototype, (, ), {, return, getAssignNode, (]
[), ;, }, @, Override, public, Node, getPrototype, (, ), {, return, getAssignNode, (, ), ., getFirstChild, (, ), .]
[;, }, @, Override, public, Node, getValue, (, ), {, return, getAssignNode, (, ), ., getLastChild, (, ), ;, }]
[., getFirstChild, (, ), ;, }, @, Override, public, Node, getValue, (, ), {, return, getAssignNode, (, ), ., getLastChild]
[., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, @, Override, public, Node, getValue, (, ), {, return, getAssignNode]
[;, }, private, Node, getAssignNode, (, ), {, return, exprNode, ., getFirstChild, (, ), ;, }, @, Override, public, JSModule]
[., getLastChild, (, ), ;, }, private, Node, getAssignNode, (, ), {, return, exprNode, ., getFirstChild, (, ), ;, }]
[;, }, @, Override, public, JSModule, getModule, (, ), {, return, module, ;, }, }, static, class, LiteralProperty, implements, Property]
[., getFirstChild, (, ), ;, }, @, Override, public, JSModule, getModule, (, ), {, return, module, ;, }, }, static]
[;, }, }, static, class, LiteralProperty, implements, Property, {, private, final, Node, key, ;, private, final, Node, value, ;, private]
[=, key, ;, this, ., value, =, value, ;, this, ., map, =, map, ;, this, ., assign, =, assign]
[., key, =, key, ;, this, ., value, =, value, ;, this, ., map, =, map, ;, this, ., assign]
[;, this, ., value, =, value, ;, this, ., map, =, map, ;, this, ., assign, =, assign, ;, this]
[=, value, ;, this, ., map, =, map, ;, this, ., assign, =, assign, ;, this, ., rootVar, =, rootVar]
[., value, =, value, ;, this, ., map, =, map, ;, this, ., assign, =, assign, ;, this, ., rootVar]
[;, this, ., map, =, map, ;, this, ., assign, =, assign, ;, this, ., rootVar, =, rootVar, ;, this]
[=, map, ;, this, ., assign, =, assign, ;, this, ., rootVar, =, rootVar, ;, this, ., module, =, module]
[., map, =, map, ;, this, ., assign, =, assign, ;, this, ., rootVar, =, rootVar, ;, this, ., module]
[;, this, ., assign, =, assign, ;, this, ., rootVar, =, rootVar, ;, this, ., module, =, module, ;, }]
[=, assign, ;, this, ., rootVar, =, rootVar, ;, this, ., module, =, module, ;, }, @, Override, public, Var]
[., assign, =, assign, ;, this, ., rootVar, =, rootVar, ;, this, ., module, =, module, ;, }, @, Override]
[;, this, ., rootVar, =, rootVar, ;, this, ., module, =, module, ;, }, @, Override, public, Var, getRootVar, (]
[=, rootVar, ;, this, ., module, =, module, ;, }, @, Override, public, Var, getRootVar, (, ), {, return, rootVar]
[., rootVar, =, rootVar, ;, this, ., module, =, module, ;, }, @, Override, public, Var, getRootVar, (, ), {]
[;, this, ., module, =, module, ;, }, @, Override, public, Var, getRootVar, (, ), {, return, rootVar, ;, }]
[=, module, ;, }, @, Override, public, Var, getRootVar, (, ), {, return, rootVar, ;, }, @, Override, public, void]
[., module, =, module, ;, }, @, Override, public, Var, getRootVar, (, ), {, return, rootVar, ;, }, @, Override]
[;, }, @, Override, public, Var, getRootVar, (, ), {, return, rootVar, ;, }, @, Override, public, void, remove, (]
[;, }, @, Override, public, void, remove, (, ), {, map, ., removeChild, (, key, ), ;, }, @, Override]
[;, }, @, Override, public, Node, getPrototype, (, ), {, return, assign, ., getFirstChild, (, ), ;, }, @, Override]
[., removeChild, (, key, ), ;, }, @, Override, public, Node, getPrototype, (, ), {, return, assign, ., getFirstChild, (]
[), ;, }, @, Override, public, Node, getPrototype, (, ), {, return, assign, ., getFirstChild, (, ), ;, }, @]
[;, }, @, Override, public, Node, getValue, (, ), {, return, value, ;, }, @, Override, public, JSModule, getModule, (]
[., getFirstChild, (, ), ;, }, @, Override, public, Node, getValue, (, ), {, return, value, ;, }, @, Override]
[;, }, @, Override, public, JSModule, getModule, (, ), {, return, module, ;, }, }, private, class, NameContext, {, final]
[;, }, }, private, class, NameContext, {, final, NameInfo, name, ;, final, Scope, scope, ;, NameContext, (, NameInfo, name, ,]
[=, name, ;, this, ., scope, =, scope, ;, }, }, class, NameInfo, {, final, String, name, ;, private, boolean]
[., name, =, name, ;, this, ., scope, =, scope, ;, }, }, class, NameInfo, {, final, String, name, ;]
[;, this, ., scope, =, scope, ;, }, }, class, NameInfo, {, final, String, name, ;, private, boolean, referenced, =]
[=, scope, ;, }, }, class, NameInfo, {, final, String, name, ;, private, boolean, referenced, =, false, ;, private, final]
[., scope, =, scope, ;, }, }, class, NameInfo, {, final, String, name, ;, private, boolean, referenced, =, false, ;]
[;, }, }, class, NameInfo, {, final, String, name, ;, private, boolean, referenced, =, false, ;, private, final, Deque, <]
[;, private, final, Deque, <, Symbol, >, declarations, =, new, ArrayDeque, <, Symbol, >, (, ), ;, private, JSModule, deepestCommonModuleRef]
[;, private, JSModule, deepestCommonModuleRef, =, null, ;, private, boolean, readClosureVariables, =, false, ;, NameInfo, (, String, name, ), {, this]
[;, private, boolean, readClosureVariables, =, false, ;, NameInfo, (, String, name, ), {, this, ., name, =, name, ;, }]
[;, NameInfo, (, String, name, ), {, this, ., name, =, name, ;, }, @, Override, public, String, toString, (]
[=, name, ;, }, @, Override, public, String, toString, (, ), {, return, name, ;, }, boolean, isReferenced, (, )]
[., name, =, name, ;, }, @, Override, public, String, toString, (, ), {, return, name, ;, }, boolean, isReferenced]
[;, }, @, Override, public, String, toString, (, ), {, return, name, ;, }, boolean, isReferenced, (, ), {, return]
[;, }, boolean, isReferenced, (, ), {, return, referenced, ;, }, boolean, readsClosureVariables, (, ), {, return, readClosureVariables, ;, }]
[;, }, boolean, readsClosureVariables, (, ), {, return, readClosureVariables, ;, }, boolean, markReference, (, JSModule, module, ), {, boolean, hasChanged]
[;, }, boolean, markReference, (, JSModule, module, ), {, boolean, hasChanged, =, false, ;, if, (, !, referenced, ), {]
[;, if, (, !, referenced, ), {, referenced, =, true, ;, hasChanged, =, true, ;, }, if, (, moduleGraph, !=]
[), {, referenced, =, true, ;, hasChanged, =, true, ;, }, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon]
[), {, referenced, =, true, ;, hasChanged, =, true, ;, }, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon]
[=, true, ;, hasChanged, =, true, ;, }, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;]
[;, hasChanged, =, true, ;, }, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (]
[=, true, ;, }, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==]
[;, }, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==, null, )]
[), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==, null, ), {, deepestCommonModuleRef, =, module, ;, }, else]
[!=, null, ), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==, null, ), {, deepestCommonModuleRef, =, module, ;]
[), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==, null, ), {, deepestCommonModuleRef, =, module, ;, }, else]
[;, if, (, deepestCommonModuleRef, ==, null, ), {, deepestCommonModuleRef, =, module, ;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive]
[), {, deepestCommonModuleRef, =, module, ;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;]
[==, null, ), {, deepestCommonModuleRef, =, module, ;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module]
[), {, deepestCommonModuleRef, =, module, ;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;]
[=, module, ;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;, }, if, (]
[;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;, }, if, (, originalDeepestCommon, !=]
[=, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;, }, if, (, originalDeepestCommon, !=, deepestCommonModuleRef, ), {, hasChanged, =]
[;, }, if, (, originalDeepestCommon, !=, deepestCommonModuleRef, ), {, hasChanged, =, true, ;, }, }, return, hasChanged, ;, }, JSModule]
[., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;, }, if, (, originalDeepestCommon, !=, deepestCommonModuleRef, ), {, hasChanged, =, true, ;]
[,, module, ), ;, }, if, (, originalDeepestCommon, !=, deepestCommonModuleRef, ), {, hasChanged, =, true, ;, }, }, return, hasChanged]
[), ;, }, if, (, originalDeepestCommon, !=, deepestCommonModuleRef, ), {, hasChanged, =, true, ;, }, }, return, hasChanged, ;, }]
[), {, hasChanged, =, true, ;, }, }, return, hasChanged, ;, }, JSModule, getDeepestCommonModuleRef, (, ), {, return, deepestCommonModuleRef, ;]
[!=, deepestCommonModuleRef, ), {, hasChanged, =, true, ;, }, }, return, hasChanged, ;, }, JSModule, getDeepestCommonModuleRef, (, ), {, return]
[), {, hasChanged, =, true, ;, }, }, return, hasChanged, ;, }, JSModule, getDeepestCommonModuleRef, (, ), {, return, deepestCommonModuleRef, ;]
[=, true, ;, }, }, return, hasChanged, ;, }, JSModule, getDeepestCommonModuleRef, (, ), {, return, deepestCommonModuleRef, ;, }, Deque, <]
[;, }, }, return, hasChanged, ;, }, JSModule, getDeepestCommonModuleRef, (, ), {, return, deepestCommonModuleRef, ;, }, Deque, <, Symbol, >]
[;, }, JSModule, getDeepestCommonModuleRef, (, ), {, return, deepestCommonModuleRef, ;, }, Deque, <, Symbol, >, getDeclarations, (, ), {, return]
[;, }, Deque, <, Symbol, >, getDeclarations, (, ), {, return, declarations, ;, }, }, }]
[;, }, }, }]
