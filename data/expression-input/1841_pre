[EventHandler, handler, ,, final, double, maxCheckInterval, ,, final, double, convergence, ,, final, int, maxIterationCount, ,, final, UnivariateSolver, solver, ), {]
[EventHandler, handler, ,, final, double, maxCheckInterval, ,, final, double, convergence, ,, final, int, maxIterationCount, ,, final, UnivariateSolver, solver, ), {]
[double, maxCheckInterval, ,, final, double, convergence, ,, final, int, maxIterationCount, ,, final, UnivariateSolver, solver, ), {, this, ., handler, =]
[,, final, double, convergence, ,, final, int, maxIterationCount, ,, final, UnivariateSolver, solver, ), {, this, ., handler, =, handler, ;]
[,, final, double, convergence, ,, final, int, maxIterationCount, ,, final, UnivariateSolver, solver, ), {, this, ., handler, =, handler, ;]
[,, final, int, maxIterationCount, ,, final, UnivariateSolver, solver, ), {, this, ., handler, =, handler, ;, this, ., maxCheckInterval, =]
[int, maxIterationCount, ,, final, UnivariateSolver, solver, ), {, this, ., handler, =, handler, ;, this, ., maxCheckInterval, =, maxCheckInterval, ;]
[int, maxIterationCount, ,, final, UnivariateSolver, solver, ), {, this, ., handler, =, handler, ;, this, ., maxCheckInterval, =, maxCheckInterval, ;]
[UnivariateSolver, solver, ), {, this, ., handler, =, handler, ;, this, ., maxCheckInterval, =, maxCheckInterval, ;, this, ., convergence, =]
[UnivariateSolver, solver, ), {, this, ., handler, =, handler, ;, this, ., maxCheckInterval, =, maxCheckInterval, ;, this, ., convergence, =]
[this, ., handler, =, handler, ;, this, ., maxCheckInterval, =, maxCheckInterval, ;, this, ., convergence, =, FastMath, ., abs, (]
[=, handler, ;, this, ., maxCheckInterval, =, maxCheckInterval, ;, this, ., convergence, =, FastMath, ., abs, (, convergence, ), ;]
[=, handler, ;, this, ., maxCheckInterval, =, maxCheckInterval, ;, this, ., convergence, =, FastMath, ., abs, (, convergence, ), ;]
[., maxCheckInterval, =, maxCheckInterval, ;, this, ., convergence, =, FastMath, ., abs, (, convergence, ), ;, this, ., maxIterationCount, =]
[=, maxCheckInterval, ;, this, ., convergence, =, FastMath, ., abs, (, convergence, ), ;, this, ., maxIterationCount, =, maxIterationCount, ;]
[=, maxCheckInterval, ;, this, ., convergence, =, FastMath, ., abs, (, convergence, ), ;, this, ., maxIterationCount, =, maxIterationCount, ;]
[., convergence, =, FastMath, ., abs, (, convergence, ), ;, this, ., maxIterationCount, =, maxIterationCount, ;, this, ., solver, =]
[=, FastMath, ., abs, (, convergence, ), ;, this, ., maxIterationCount, =, maxIterationCount, ;, this, ., solver, =, solver, ;]
[., abs, (, convergence, ), ;, this, ., maxIterationCount, =, maxIterationCount, ;, this, ., solver, =, solver, ;, expandable, =]
[(, convergence, ), ;, this, ., maxIterationCount, =, maxIterationCount, ;, this, ., solver, =, solver, ;, expandable, =, null, ;]
[), ;, this, ., maxIterationCount, =, maxIterationCount, ;, this, ., solver, =, solver, ;, expandable, =, null, ;, t0, =]
[), ;, this, ., maxIterationCount, =, maxIterationCount, ;, this, ., solver, =, solver, ;, expandable, =, null, ;, t0, =]
[maxIterationCount, =, maxIterationCount, ;, this, ., solver, =, solver, ;, expandable, =, null, ;, t0, =, Double, ., NaN, ;]
[maxIterationCount, ;, this, ., solver, =, solver, ;, expandable, =, null, ;, t0, =, Double, ., NaN, ;, g0, =]
[maxIterationCount, ;, this, ., solver, =, solver, ;, expandable, =, null, ;, t0, =, Double, ., NaN, ;, g0, =]
[solver, =, solver, ;, expandable, =, null, ;, t0, =, Double, ., NaN, ;, g0, =, Double, ., NaN, ;]
[solver, ;, expandable, =, null, ;, t0, =, Double, ., NaN, ;, g0, =, Double, ., NaN, ;, g0Positive, =]
[expandable, =, null, ;, t0, =, Double, ., NaN, ;, g0, =, Double, ., NaN, ;, g0Positive, =, true, ;]
[null, ;, t0, =, Double, ., NaN, ;, g0, =, Double, ., NaN, ;, g0Positive, =, true, ;, pendingEvent, =]
[t0, =, Double, ., NaN, ;, g0, =, Double, ., NaN, ;, g0Positive, =, true, ;, pendingEvent, =, false, ;]
[Double, ., NaN, ;, g0, =, Double, ., NaN, ;, g0Positive, =, true, ;, pendingEvent, =, false, ;, pendingEventTime, =]
[Double, ., NaN, ;, g0, =, Double, ., NaN, ;, g0Positive, =, true, ;, pendingEvent, =, false, ;, pendingEventTime, =]
[g0, =, Double, ., NaN, ;, g0Positive, =, true, ;, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;]
[Double, ., NaN, ;, g0Positive, =, true, ;, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, previousEventTime, =]
[Double, ., NaN, ;, g0Positive, =, true, ;, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, previousEventTime, =]
[g0Positive, =, true, ;, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, previousEventTime, =, Double, ., NaN, ;]
[true, ;, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, previousEventTime, =, Double, ., NaN, ;, increasing, =]
[pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, previousEventTime, =, Double, ., NaN, ;, increasing, =, true, ;]
[false, ;, pendingEventTime, =, Double, ., NaN, ;, previousEventTime, =, Double, ., NaN, ;, increasing, =, true, ;, nextAction, =]
[false, ;, pendingEventTime, =, Double, ., NaN, ;, previousEventTime, =, Double, ., NaN, ;, increasing, =, true, ;, nextAction, =]
[false, ;, pendingEventTime, =, Double, ., NaN, ;, previousEventTime, =, Double, ., NaN, ;, increasing, =, true, ;, nextAction, =]
[increasing, =, true, ;, nextAction, =, EventHandler, ., Action, ., CONTINUE, ;, }, public, EventHandler, getEventHandler, (, ), {, return]
[}, public, EventHandler, getEventHandler, (, ), {, return, handler, ;, }, public, void, setExpandable, (, final, ExpandableStatefulODE, expandable, ), {]
[}, public, EventHandler, getEventHandler, (, ), {, return, handler, ;, }, public, void, setExpandable, (, final, ExpandableStatefulODE, expandable, ), {]
[(, ), {, return, handler, ;, }, public, void, setExpandable, (, final, ExpandableStatefulODE, expandable, ), {, this, ., expandable, =]
[(, final, ExpandableStatefulODE, expandable, ), {, this, ., expandable, =, expandable, ;, }, public, double, getMaxCheckInterval, (, ), {, return]
[expandable, ;, }, public, double, getMaxCheckInterval, (, ), {, return, maxCheckInterval, ;, }, public, double, getConvergence, (, ), {, return]
[maxCheckInterval, ;, }, public, double, getConvergence, (, ), {, return, convergence, ;, }, public, int, getMaxIterationCount, (, ), {, return]
[int, getMaxIterationCount, (, ), {, return, maxIterationCount, ;, }, public, void, reinitializeBegin, (, final, StepInterpolator, interpolator, ), throws, MaxCountExceededException, {]
[(, ), {, return, maxIterationCount, ;, }, public, void, reinitializeBegin, (, final, StepInterpolator, interpolator, ), throws, MaxCountExceededException, {, t0, =]
[(, ), {, return, maxIterationCount, ;, }, public, void, reinitializeBegin, (, final, StepInterpolator, interpolator, ), throws, MaxCountExceededException, {, t0, =]
[}, public, void, reinitializeBegin, (, final, StepInterpolator, interpolator, ), throws, MaxCountExceededException, {, t0, =, interpolator, ., getPreviousTime, (, ), ;]
[}, public, void, reinitializeBegin, (, final, StepInterpolator, interpolator, ), throws, MaxCountExceededException, {, t0, =, interpolator, ., getPreviousTime, (, ), ;]
[(, final, StepInterpolator, interpolator, ), throws, MaxCountExceededException, {, t0, =, interpolator, ., getPreviousTime, (, ), ;, interpolator, ., setInterpolatedTime, (]
[interpolator, ), throws, MaxCountExceededException, {, t0, =, interpolator, ., getPreviousTime, (, ), ;, interpolator, ., setInterpolatedTime, (, t0, ), ;]
[throws, MaxCountExceededException, {, t0, =, interpolator, ., getPreviousTime, (, ), ;, interpolator, ., setInterpolatedTime, (, t0, ), ;, g0, =]
[throws, MaxCountExceededException, {, t0, =, interpolator, ., getPreviousTime, (, ), ;, interpolator, ., setInterpolatedTime, (, t0, ), ;, g0, =]
[=, interpolator, ., getPreviousTime, (, ), ;, interpolator, ., setInterpolatedTime, (, t0, ), ;, g0, =, handler, ., g, (]
[., getPreviousTime, (, ), ;, interpolator, ., setInterpolatedTime, (, t0, ), ;, g0, =, handler, ., g, (, t0, ,]
[(, ), ;, interpolator, ., setInterpolatedTime, (, t0, ), ;, g0, =, handler, ., g, (, t0, ,, getCompleteState, (]
[(, t0, ), ;, g0, =, handler, ., g, (, t0, ,, getCompleteState, (, interpolator, ), ), ;, if, (]
[(, t0, ), ;, g0, =, handler, ., g, (, t0, ,, getCompleteState, (, interpolator, ), ), ;, if, (]
[), ;, g0, =, handler, ., g, (, t0, ,, getCompleteState, (, interpolator, ), ), ;, if, (, g0, ==]
[(, t0, ,, getCompleteState, (, interpolator, ), ), ;, if, (, g0, ==, 0, ), {, final, double, epsilon, =]
[(, t0, ,, getCompleteState, (, interpolator, ), ), ;, if, (, g0, ==, 0, ), {, final, double, epsilon, =]
[(, interpolator, ), ), ;, if, (, g0, ==, 0, ), {, final, double, epsilon, =, FastMath, ., max, (]
[(, interpolator, ), ), ;, if, (, g0, ==, 0, ), {, final, double, epsilon, =, FastMath, ., max, (]
[(, g0, ==, 0, ), {, final, double, epsilon, =, FastMath, ., max, (, solver, ., getAbsoluteAccuracy, (, ), ,]
[(, g0, ==, 0, ), {, final, double, epsilon, =, FastMath, ., max, (, solver, ., getAbsoluteAccuracy, (, ), ,]
[), {, final, double, epsilon, =, FastMath, ., max, (, solver, ., getAbsoluteAccuracy, (, ), ,, FastMath, ., abs, (]
[), {, final, double, epsilon, =, FastMath, ., max, (, solver, ., getAbsoluteAccuracy, (, ), ,, FastMath, ., abs, (]
[), {, final, double, epsilon, =, FastMath, ., max, (, solver, ., getAbsoluteAccuracy, (, ), ,, FastMath, ., abs, (]
[FastMath, ., max, (, solver, ., getAbsoluteAccuracy, (, ), ,, FastMath, ., abs, (, solver, ., getRelativeAccuracy, (, ), *]
[), ,, FastMath, ., abs, (, solver, ., getRelativeAccuracy, (, ), *, t0, ), ), ;, final, double, tStart, =]
[), ,, FastMath, ., abs, (, solver, ., getRelativeAccuracy, (, ), *, t0, ), ), ;, final, double, tStart, =]
[FastMath, ., abs, (, solver, ., getRelativeAccuracy, (, ), *, t0, ), ), ;, final, double, tStart, =, t0, +]
[FastMath, ., abs, (, solver, ., getRelativeAccuracy, (, ), *, t0, ), ), ;, final, double, tStart, =, t0, +]
[abs, (, solver, ., getRelativeAccuracy, (, ), *, t0, ), ), ;, final, double, tStart, =, t0, +, 0.5, *]
[solver, ., getRelativeAccuracy, (, ), *, t0, ), ), ;, final, double, tStart, =, t0, +, 0.5, *, epsilon, ;]
[solver, ., getRelativeAccuracy, (, ), *, t0, ), ), ;, final, double, tStart, =, t0, +, 0.5, *, epsilon, ;]
[), *, t0, ), ), ;, final, double, tStart, =, t0, +, 0.5, *, epsilon, ;, interpolator, ., setInterpolatedTime, (]
[), ), ;, final, double, tStart, =, t0, +, 0.5, *, epsilon, ;, interpolator, ., setInterpolatedTime, (, tStart, ), ;]
[;, final, double, tStart, =, t0, +, 0.5, *, epsilon, ;, interpolator, ., setInterpolatedTime, (, tStart, ), ;, g0, =]
[;, final, double, tStart, =, t0, +, 0.5, *, epsilon, ;, interpolator, ., setInterpolatedTime, (, tStart, ), ;, g0, =]
[=, t0, +, 0.5, *, epsilon, ;, interpolator, ., setInterpolatedTime, (, tStart, ), ;, g0, =, handler, ., g, (]
[+, 0.5, *, epsilon, ;, interpolator, ., setInterpolatedTime, (, tStart, ), ;, g0, =, handler, ., g, (, tStart, ,]
[*, epsilon, ;, interpolator, ., setInterpolatedTime, (, tStart, ), ;, g0, =, handler, ., g, (, tStart, ,, getCompleteState, (]
[setInterpolatedTime, (, tStart, ), ;, g0, =, handler, ., g, (, tStart, ,, getCompleteState, (, interpolator, ), ), ;, }]
[tStart, ), ;, g0, =, handler, ., g, (, tStart, ,, getCompleteState, (, interpolator, ), ), ;, }, g0Positive, =]
[tStart, ), ;, g0, =, handler, ., g, (, tStart, ,, getCompleteState, (, interpolator, ), ), ;, }, g0Positive, =]
[;, g0, =, handler, ., g, (, tStart, ,, getCompleteState, (, interpolator, ), ), ;, }, g0Positive, =, g0, >=]
[0, ;, }, private, double, [, ], getCompleteState, (, final, StepInterpolator, interpolator, ), {, final, double, [, ], complete, =]
[private, double, [, ], getCompleteState, (, final, StepInterpolator, interpolator, ), {, final, double, [, ], complete, =, new, double, []
[private, double, [, ], getCompleteState, (, final, StepInterpolator, interpolator, ), {, final, double, [, ], complete, =, new, double, []
[StepInterpolator, interpolator, ), {, final, double, [, ], complete, =, new, double, [, expandable, ., getTotalDimension, (, ), ], ;]
[StepInterpolator, interpolator, ), {, final, double, [, ], complete, =, new, double, [, expandable, ., getTotalDimension, (, ), ], ;]
[StepInterpolator, interpolator, ), {, final, double, [, ], complete, =, new, double, [, expandable, ., getTotalDimension, (, ), ], ;]
[complete, =, new, double, [, expandable, ., getTotalDimension, (, ), ], ;, expandable, ., getPrimaryMapper, (, ), ., insertEquationData, (]
[complete, =, new, double, [, expandable, ., getTotalDimension, (, ), ], ;, expandable, ., getPrimaryMapper, (, ), ., insertEquationData, (]
[., getTotalDimension, (, ), ], ;, expandable, ., getPrimaryMapper, (, ), ., insertEquationData, (, interpolator, ., getInterpolatedState, (, ), ,]
[expandable, ., getPrimaryMapper, (, ), ., insertEquationData, (, interpolator, ., getInterpolatedState, (, ), ,, complete, ), ;, int, index, =]
[(, interpolator, ., getInterpolatedState, (, ), ,, complete, ), ;, int, index, =, 0, ;, for, (, EquationsMapper, secondary, :]
[(, interpolator, ., getInterpolatedState, (, ), ,, complete, ), ;, int, index, =, 0, ;, for, (, EquationsMapper, secondary, :]
[complete, ), ;, int, index, =, 0, ;, for, (, EquationsMapper, secondary, :, expandable, ., getSecondaryMappers, (, ), ), {]
[complete, ), ;, int, index, =, 0, ;, for, (, EquationsMapper, secondary, :, expandable, ., getSecondaryMappers, (, ), ), {]
[index, =, 0, ;, for, (, EquationsMapper, secondary, :, expandable, ., getSecondaryMappers, (, ), ), {, secondary, ., insertEquationData, (]
[index, =, 0, ;, for, (, EquationsMapper, secondary, :, expandable, ., getSecondaryMappers, (, ), ), {, secondary, ., insertEquationData, (]
[for, (, EquationsMapper, secondary, :, expandable, ., getSecondaryMappers, (, ), ), {, secondary, ., insertEquationData, (, interpolator, ., getInterpolatedSecondaryState, (]
[for, (, EquationsMapper, secondary, :, expandable, ., getSecondaryMappers, (, ), ), {, secondary, ., insertEquationData, (, interpolator, ., getInterpolatedSecondaryState, (]
[:, expandable, ., getSecondaryMappers, (, ), ), {, secondary, ., insertEquationData, (, interpolator, ., getInterpolatedSecondaryState, (, index, ++, ), ,]
[), ), {, secondary, ., insertEquationData, (, interpolator, ., getInterpolatedSecondaryState, (, index, ++, ), ,, complete, ), ;, }, return]
[}, return, complete, ;, }, public, boolean, evaluateStep, (, final, StepInterpolator, interpolator, ), throws, MaxCountExceededException, ,, NoBracketingException, {, try, {]
[complete, ;, }, public, boolean, evaluateStep, (, final, StepInterpolator, interpolator, ), throws, MaxCountExceededException, ,, NoBracketingException, {, try, {, forward, =]
[complete, ;, }, public, boolean, evaluateStep, (, final, StepInterpolator, interpolator, ), throws, MaxCountExceededException, ,, NoBracketingException, {, try, {, forward, =]
[), throws, MaxCountExceededException, ,, NoBracketingException, {, try, {, forward, =, interpolator, ., isForward, (, ), ;, final, double, t1, =]
[), throws, MaxCountExceededException, ,, NoBracketingException, {, try, {, forward, =, interpolator, ., isForward, (, ), ;, final, double, t1, =]
[interpolator, ., isForward, (, ), ;, final, double, t1, =, interpolator, ., getCurrentTime, (, ), ;, final, double, dt, =]
[interpolator, ., isForward, (, ), ;, final, double, t1, =, interpolator, ., getCurrentTime, (, ), ;, final, double, dt, =]
[isForward, (, ), ;, final, double, t1, =, interpolator, ., getCurrentTime, (, ), ;, final, double, dt, =, t1, -]
[final, double, t1, =, interpolator, ., getCurrentTime, (, ), ;, final, double, dt, =, t1, -, t0, ;, if, (]
[final, double, t1, =, interpolator, ., getCurrentTime, (, ), ;, final, double, dt, =, t1, -, t0, ;, if, (]
[final, double, t1, =, interpolator, ., getCurrentTime, (, ), ;, final, double, dt, =, t1, -, t0, ;, if, (]
[interpolator, ., getCurrentTime, (, ), ;, final, double, dt, =, t1, -, t0, ;, if, (, FastMath, ., abs, (]
[(, ), ;, final, double, dt, =, t1, -, t0, ;, if, (, FastMath, ., abs, (, dt, ), <]
[double, dt, =, t1, -, t0, ;, if, (, FastMath, ., abs, (, dt, ), <, convergence, ), {, return]
[if, (, FastMath, ., abs, (, dt, ), <, convergence, ), {, return, false, ;, }, final, int, n, =]
[if, (, FastMath, ., abs, (, dt, ), <, convergence, ), {, return, false, ;, }, final, int, n, =]
[abs, (, dt, ), <, convergence, ), {, return, false, ;, }, final, int, n, =, FastMath, ., max, (]
[dt, ), <, convergence, ), {, return, false, ;, }, final, int, n, =, FastMath, ., max, (, 1, ,]
[convergence, ), {, return, false, ;, }, final, int, n, =, FastMath, ., max, (, 1, ,, (, int, )]
[convergence, ), {, return, false, ;, }, final, int, n, =, FastMath, ., max, (, 1, ,, (, int, )]
[false, ;, }, final, int, n, =, FastMath, ., max, (, 1, ,, (, int, ), FastMath, ., ceil, (]
[false, ;, }, final, int, n, =, FastMath, ., max, (, 1, ,, (, int, ), FastMath, ., ceil, (]
[false, ;, }, final, int, n, =, FastMath, ., max, (, 1, ,, (, int, ), FastMath, ., ceil, (]
[int, n, =, FastMath, ., max, (, 1, ,, (, int, ), FastMath, ., ceil, (, FastMath, ., abs, (]
[FastMath, ., max, (, 1, ,, (, int, ), FastMath, ., ceil, (, FastMath, ., abs, (, dt, ), /]
[), FastMath, ., ceil, (, FastMath, ., abs, (, dt, ), /, maxCheckInterval, ), ), ;, final, double, h, =]
[), FastMath, ., ceil, (, FastMath, ., abs, (, dt, ), /, maxCheckInterval, ), ), ;, final, double, h, =]
[., ceil, (, FastMath, ., abs, (, dt, ), /, maxCheckInterval, ), ), ;, final, double, h, =, dt, /]
[(, dt, ), /, maxCheckInterval, ), ), ;, final, double, h, =, dt, /, n, ;, final, UnivariateFunction, f, =]
[f, =, new, UnivariateFunction, (, ), {, public, double, value, (, final, double, t, ), throws, LocalMaxCountExceededException, {, try, {]
[f, =, new, UnivariateFunction, (, ), {, public, double, value, (, final, double, t, ), throws, LocalMaxCountExceededException, {, try, {]
[(, ), {, public, double, value, (, final, double, t, ), throws, LocalMaxCountExceededException, {, try, {, interpolator, ., setInterpolatedTime, (]
[double, value, (, final, double, t, ), throws, LocalMaxCountExceededException, {, try, {, interpolator, ., setInterpolatedTime, (, t, ), ;, return]
[double, value, (, final, double, t, ), throws, LocalMaxCountExceededException, {, try, {, interpolator, ., setInterpolatedTime, (, t, ), ;, return]
[double, t, ), throws, LocalMaxCountExceededException, {, try, {, interpolator, ., setInterpolatedTime, (, t, ), ;, return, handler, ., g, (]
[), throws, LocalMaxCountExceededException, {, try, {, interpolator, ., setInterpolatedTime, (, t, ), ;, return, handler, ., g, (, t, ,]
[LocalMaxCountExceededException, {, try, {, interpolator, ., setInterpolatedTime, (, t, ), ;, return, handler, ., g, (, t, ,, getCompleteState, (]
[handler, ., g, (, t, ,, getCompleteState, (, interpolator, ), ), ;, }, catch, (, MaxCountExceededException, mcee, ), {, throw]
[(, t, ,, getCompleteState, (, interpolator, ), ), ;, }, catch, (, MaxCountExceededException, mcee, ), {, throw, new, LocalMaxCountExceededException, (]
[catch, (, MaxCountExceededException, mcee, ), {, throw, new, LocalMaxCountExceededException, (, mcee, ), ;, }, }, }, ;, double, ta, =]
[{, throw, new, LocalMaxCountExceededException, (, mcee, ), ;, }, }, }, ;, double, ta, =, t0, ;, double, ga, =]
[;, }, }, }, ;, double, ta, =, t0, ;, double, ga, =, g0, ;, for, (, int, i, =]
[}, }, ;, double, ta, =, t0, ;, double, ga, =, g0, ;, for, (, int, i, =, 0, ;]
[}, }, ;, double, ta, =, t0, ;, double, ga, =, g0, ;, for, (, int, i, =, 0, ;]
[;, double, ta, =, t0, ;, double, ga, =, g0, ;, for, (, int, i, =, 0, ;, i, <]
[ta, =, t0, ;, double, ga, =, g0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[=, t0, ;, double, ga, =, g0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, final, double, tb, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, final, double, tb, =]
[(, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, final, double, tb, =, t0, +]
[(, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, final, double, tb, =, t0, +]
[int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, final, double, tb, =, t0, +, (]
[int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, final, double, tb, =, t0, +, (]
[=, 0, ;, i, <, n, ;, ++, i, ), {, final, double, tb, =, t0, +, (, i, +]
[i, <, n, ;, ++, i, ), {, final, double, tb, =, t0, +, (, i, +, 1, ), *]
[n, ;, ++, i, ), {, final, double, tb, =, t0, +, (, i, +, 1, ), *, h, ;]
[n, ;, ++, i, ), {, final, double, tb, =, t0, +, (, i, +, 1, ), *, h, ;]
[), {, final, double, tb, =, t0, +, (, i, +, 1, ), *, h, ;, interpolator, ., setInterpolatedTime, (]
[+, (, i, +, 1, ), *, h, ;, interpolator, ., setInterpolatedTime, (, tb, ), ;, final, double, gb, =]
[+, (, i, +, 1, ), *, h, ;, interpolator, ., setInterpolatedTime, (, tb, ), ;, final, double, gb, =]
[1, ), *, h, ;, interpolator, ., setInterpolatedTime, (, tb, ), ;, final, double, gb, =, handler, ., g, (]
[*, h, ;, interpolator, ., setInterpolatedTime, (, tb, ), ;, final, double, gb, =, handler, ., g, (, tb, ,]
[;, interpolator, ., setInterpolatedTime, (, tb, ), ;, final, double, gb, =, handler, ., g, (, tb, ,, getCompleteState, (]
[), ;, final, double, gb, =, handler, ., g, (, tb, ,, getCompleteState, (, interpolator, ), ), ;, if, (]
[), ;, final, double, gb, =, handler, ., g, (, tb, ,, getCompleteState, (, interpolator, ), ), ;, if, (]
[final, double, gb, =, handler, ., g, (, tb, ,, getCompleteState, (, interpolator, ), ), ;, if, (, g0Positive, ^]
[double, gb, =, handler, ., g, (, tb, ,, getCompleteState, (, interpolator, ), ), ;, if, (, g0Positive, ^, (]
[double, gb, =, handler, ., g, (, tb, ,, getCompleteState, (, interpolator, ), ), ;, if, (, g0Positive, ^, (]
[=, handler, ., g, (, tb, ,, getCompleteState, (, interpolator, ), ), ;, if, (, g0Positive, ^, (, gb, >=]
[(, tb, ,, getCompleteState, (, interpolator, ), ), ;, if, (, g0Positive, ^, (, gb, >=, 0, ), ), {]
[,, getCompleteState, (, interpolator, ), ), ;, if, (, g0Positive, ^, (, gb, >=, 0, ), ), {, increasing, =]
[,, getCompleteState, (, interpolator, ), ), ;, if, (, g0Positive, ^, (, gb, >=, 0, ), ), {, increasing, =]
[(, interpolator, ), ), ;, if, (, g0Positive, ^, (, gb, >=, 0, ), ), {, increasing, =, gb, >=]
[^, (, gb, >=, 0, ), ), {, increasing, =, gb, >=, ga, ;, final, double, root, ;, if, (]
[^, (, gb, >=, 0, ), ), {, increasing, =, gb, >=, ga, ;, final, double, root, ;, if, (]
[increasing, =, gb, >=, ga, ;, final, double, root, ;, if, (, solver, instanceof, BracketedUnivariateSolver, <, ?, >, ), {]
[>=, ga, ;, final, double, root, ;, if, (, solver, instanceof, BracketedUnivariateSolver, <, ?, >, ), {, @, SuppressWarnings, (]
[(, solver, instanceof, BracketedUnivariateSolver, <, ?, >, ), {, @, SuppressWarnings, (, "unchecked", ), BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =]
[>, ), {, @, SuppressWarnings, (, "unchecked", ), BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =, (, BracketedUnivariateSolver, <, UnivariateFunction, >, )]
[{, @, SuppressWarnings, (, "unchecked", ), BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =, (, BracketedUnivariateSolver, <, UnivariateFunction, >, ), solver, ;]
[SuppressWarnings, (, "unchecked", ), BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =, (, BracketedUnivariateSolver, <, UnivariateFunction, >, ), solver, ;, root, =]
[SuppressWarnings, (, "unchecked", ), BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =, (, BracketedUnivariateSolver, <, UnivariateFunction, >, ), solver, ;, root, =]
["unchecked", ), BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =, (, BracketedUnivariateSolver, <, UnivariateFunction, >, ), solver, ;, root, =, forward, ?]
["unchecked", ), BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =, (, BracketedUnivariateSolver, <, UnivariateFunction, >, ), solver, ;, root, =, forward, ?]
[UnivariateFunction, >, bracketing, =, (, BracketedUnivariateSolver, <, UnivariateFunction, >, ), solver, ;, root, =, forward, ?, bracketing, ., solve, (]
[bracketing, =, (, BracketedUnivariateSolver, <, UnivariateFunction, >, ), solver, ;, root, =, forward, ?, bracketing, ., solve, (, maxIterationCount, ,]
[(, BracketedUnivariateSolver, <, UnivariateFunction, >, ), solver, ;, root, =, forward, ?, bracketing, ., solve, (, maxIterationCount, ,, f, ,]
[<, UnivariateFunction, >, ), solver, ;, root, =, forward, ?, bracketing, ., solve, (, maxIterationCount, ,, f, ,, ta, ,]
[>, ), solver, ;, root, =, forward, ?, bracketing, ., solve, (, maxIterationCount, ,, f, ,, ta, ,, tb, ,]
[>, ), solver, ;, root, =, forward, ?, bracketing, ., solve, (, maxIterationCount, ,, f, ,, ta, ,, tb, ,]
[=, forward, ?, bracketing, ., solve, (, maxIterationCount, ,, f, ,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :]
[=, forward, ?, bracketing, ., solve, (, maxIterationCount, ,, f, ,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :]
[., solve, (, maxIterationCount, ,, f, ,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :, bracketing, ., solve, (]
[(, maxIterationCount, ,, f, ,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :, bracketing, ., solve, (, maxIterationCount, ,]
[,, f, ,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :, bracketing, ., solve, (, maxIterationCount, ,, f, ,]
[,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :, bracketing, ., solve, (, maxIterationCount, ,, f, ,, tb, ,]
[,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :, bracketing, ., solve, (, maxIterationCount, ,, f, ,, tb, ,, ta, ,]
[,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :, bracketing, ., solve, (, maxIterationCount, ,, f, ,, tb, ,, ta, ,]
[maxIterationCount, ,, f, ,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, else, {, final, double, baseRoot, =]
[maxIterationCount, ,, f, ,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, else, {, final, double, baseRoot, =]
[f, ,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, else, {, final, double, baseRoot, =, forward, ?]
[f, ,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, else, {, final, double, baseRoot, =, forward, ?]
[ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, else, {, final, double, baseRoot, =, forward, ?, solver, ., solve, (]
[AllowedSolution, ., LEFT_SIDE, ), ;, }, else, {, final, double, baseRoot, =, forward, ?, solver, ., solve, (, maxIterationCount, ,]
[LEFT_SIDE, ), ;, }, else, {, final, double, baseRoot, =, forward, ?, solver, ., solve, (, maxIterationCount, ,, f, ,]
[;, }, else, {, final, double, baseRoot, =, forward, ?, solver, ., solve, (, maxIterationCount, ,, f, ,, ta, ,]
[{, final, double, baseRoot, =, forward, ?, solver, ., solve, (, maxIterationCount, ,, f, ,, ta, ,, tb, ), :]
[{, final, double, baseRoot, =, forward, ?, solver, ., solve, (, maxIterationCount, ,, f, ,, ta, ,, tb, ), :]
[=, forward, ?, solver, ., solve, (, maxIterationCount, ,, f, ,, ta, ,, tb, ), :, solver, ., solve, (]
[?, solver, ., solve, (, maxIterationCount, ,, f, ,, ta, ,, tb, ), :, solver, ., solve, (, maxIterationCount, ,]
[., solve, (, maxIterationCount, ,, f, ,, ta, ,, tb, ), :, solver, ., solve, (, maxIterationCount, ,, f, ,]
[(, maxIterationCount, ,, f, ,, ta, ,, tb, ), :, solver, ., solve, (, maxIterationCount, ,, f, ,, tb, ,]
[tb, ), :, solver, ., solve, (, maxIterationCount, ,, f, ,, tb, ,, ta, ), ;, final, int, remainingEval, =]
[tb, ), :, solver, ., solve, (, maxIterationCount, ,, f, ,, tb, ,, ta, ), ;, final, int, remainingEval, =]
[:, solver, ., solve, (, maxIterationCount, ,, f, ,, tb, ,, ta, ), ;, final, int, remainingEval, =, maxIterationCount, -]
[:, solver, ., solve, (, maxIterationCount, ,, f, ,, tb, ,, ta, ), ;, final, int, remainingEval, =, maxIterationCount, -]
[), ;, final, int, remainingEval, =, maxIterationCount, -, solver, ., getEvaluations, (, ), ;, BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =]
[int, remainingEval, =, maxIterationCount, -, solver, ., getEvaluations, (, ), ;, BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =, new, PegasusSolver, (]
[int, remainingEval, =, maxIterationCount, -, solver, ., getEvaluations, (, ), ;, BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =, new, PegasusSolver, (]
[., getEvaluations, (, ), ;, BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =, new, PegasusSolver, (, solver, ., getRelativeAccuracy, (, ), ,]
[., getEvaluations, (, ), ;, BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =, new, PegasusSolver, (, solver, ., getRelativeAccuracy, (, ), ,]
[UnivariateFunction, >, bracketing, =, new, PegasusSolver, (, solver, ., getRelativeAccuracy, (, ), ,, solver, ., getAbsoluteAccuracy, (, ), ), ;]
[bracketing, =, new, PegasusSolver, (, solver, ., getRelativeAccuracy, (, ), ,, solver, ., getAbsoluteAccuracy, (, ), ), ;, root, =]
[bracketing, =, new, PegasusSolver, (, solver, ., getRelativeAccuracy, (, ), ,, solver, ., getAbsoluteAccuracy, (, ), ), ;, root, =]
[new, PegasusSolver, (, solver, ., getRelativeAccuracy, (, ), ,, solver, ., getAbsoluteAccuracy, (, ), ), ;, root, =, forward, ?]
[new, PegasusSolver, (, solver, ., getRelativeAccuracy, (, ), ,, solver, ., getAbsoluteAccuracy, (, ), ), ;, root, =, forward, ?]
[., getRelativeAccuracy, (, ), ,, solver, ., getAbsoluteAccuracy, (, ), ), ;, root, =, forward, ?, UnivariateSolverUtils, ., forceSide, (]
[(, ), ,, solver, ., getAbsoluteAccuracy, (, ), ), ;, root, =, forward, ?, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,]
[,, solver, ., getAbsoluteAccuracy, (, ), ), ;, root, =, forward, ?, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,]
[., getAbsoluteAccuracy, (, ), ), ;, root, =, forward, ?, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,, bracketing, ,]
[(, ), ), ;, root, =, forward, ?, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,]
[), ;, root, =, forward, ?, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,, ta, ,]
[root, =, forward, ?, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,, ta, ,, tb, ,]
[root, =, forward, ?, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,, ta, ,, tb, ,]
[., forceSide, (, remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :]
[., forceSide, (, remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :]
[,, f, ,, bracketing, ,, baseRoot, ,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :, UnivariateSolverUtils, ., forceSide, (]
[,, bracketing, ,, baseRoot, ,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,]
[,, baseRoot, ,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,]
[,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,, bracketing, ,]
[,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,]
[,, AllowedSolution, ., RIGHT_SIDE, ), :, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,, tb, ,]
[., RIGHT_SIDE, ), :, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,, tb, ,, ta, ,]
[., RIGHT_SIDE, ), :, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,, tb, ,, ta, ,]
[remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, if, (]
[remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, if, (]
[remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, if, (]
[,, f, ,, bracketing, ,, baseRoot, ,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, if, (, (]
[f, ,, bracketing, ,, baseRoot, ,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, if, (, (, !]
[f, ,, bracketing, ,, baseRoot, ,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, if, (, (, !]
[baseRoot, ,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, if, (, (, !, Double, ., isNaN, (]
[ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, if, (, (, !, Double, ., isNaN, (, previousEventTime, ), ), &&]
[,, AllowedSolution, ., LEFT_SIDE, ), ;, }, if, (, (, !, Double, ., isNaN, (, previousEventTime, ), ), &&, (]
[,, AllowedSolution, ., LEFT_SIDE, ), ;, }, if, (, (, !, Double, ., isNaN, (, previousEventTime, ), ), &&, (]
[,, AllowedSolution, ., LEFT_SIDE, ), ;, }, if, (, (, !, Double, ., isNaN, (, previousEventTime, ), ), &&, (]
[), ;, }, if, (, (, !, Double, ., isNaN, (, previousEventTime, ), ), &&, (, FastMath, ., abs, (]
[), ;, }, if, (, (, !, Double, ., isNaN, (, previousEventTime, ), ), &&, (, FastMath, ., abs, (]
[}, if, (, (, !, Double, ., isNaN, (, previousEventTime, ), ), &&, (, FastMath, ., abs, (, root, -]
[(, !, Double, ., isNaN, (, previousEventTime, ), ), &&, (, FastMath, ., abs, (, root, -, ta, ), <=]
[., isNaN, (, previousEventTime, ), ), &&, (, FastMath, ., abs, (, root, -, ta, ), <=, convergence, ), &&]
[isNaN, (, previousEventTime, ), ), &&, (, FastMath, ., abs, (, root, -, ta, ), <=, convergence, ), &&, (]
[isNaN, (, previousEventTime, ), ), &&, (, FastMath, ., abs, (, root, -, ta, ), <=, convergence, ), &&, (]
[isNaN, (, previousEventTime, ), ), &&, (, FastMath, ., abs, (, root, -, ta, ), <=, convergence, ), &&, (]
[), &&, (, FastMath, ., abs, (, root, -, ta, ), <=, convergence, ), &&, (, FastMath, ., abs, (]
[), &&, (, FastMath, ., abs, (, root, -, ta, ), <=, convergence, ), &&, (, FastMath, ., abs, (]
[(, FastMath, ., abs, (, root, -, ta, ), <=, convergence, ), &&, (, FastMath, ., abs, (, root, -]
[abs, (, root, -, ta, ), <=, convergence, ), &&, (, FastMath, ., abs, (, root, -, previousEventTime, ), <=]
[ta, ), <=, convergence, ), &&, (, FastMath, ., abs, (, root, -, previousEventTime, ), <=, convergence, ), ), {]
[<=, convergence, ), &&, (, FastMath, ., abs, (, root, -, previousEventTime, ), <=, convergence, ), ), {, ta, =]
[<=, convergence, ), &&, (, FastMath, ., abs, (, root, -, previousEventTime, ), <=, convergence, ), ), {, ta, =]
[), &&, (, FastMath, ., abs, (, root, -, previousEventTime, ), <=, convergence, ), ), {, ta, =, forward, ?]
[), &&, (, FastMath, ., abs, (, root, -, previousEventTime, ), <=, convergence, ), ), {, ta, =, forward, ?]
[(, FastMath, ., abs, (, root, -, previousEventTime, ), <=, convergence, ), ), {, ta, =, forward, ?, ta, +]
[., abs, (, root, -, previousEventTime, ), <=, convergence, ), ), {, ta, =, forward, ?, ta, +, convergence, :]
[., abs, (, root, -, previousEventTime, ), <=, convergence, ), ), {, ta, =, forward, ?, ta, +, convergence, :]
[(, root, -, previousEventTime, ), <=, convergence, ), ), {, ta, =, forward, ?, ta, +, convergence, :, ta, -]
[-, previousEventTime, ), <=, convergence, ), ), {, ta, =, forward, ?, ta, +, convergence, :, ta, -, convergence, ;]
[), <=, convergence, ), ), {, ta, =, forward, ?, ta, +, convergence, :, ta, -, convergence, ;, ga, =]
[), <=, convergence, ), ), {, ta, =, forward, ?, ta, +, convergence, :, ta, -, convergence, ;, ga, =]
[), {, ta, =, forward, ?, ta, +, convergence, :, ta, -, convergence, ;, ga, =, f, ., value, (]
[=, forward, ?, ta, +, convergence, :, ta, -, convergence, ;, ga, =, f, ., value, (, ta, ), ;]
[forward, ?, ta, +, convergence, :, ta, -, convergence, ;, ga, =, f, ., value, (, ta, ), ;, --]
[ta, -, convergence, ;, ga, =, f, ., value, (, ta, ), ;, --, i, ;, }, else, if, (]
[ta, -, convergence, ;, ga, =, f, ., value, (, ta, ), ;, --, i, ;, }, else, if, (]
[ta, -, convergence, ;, ga, =, f, ., value, (, ta, ), ;, --, i, ;, }, else, if, (]
[ga, =, f, ., value, (, ta, ), ;, --, i, ;, }, else, if, (, Double, ., isNaN, (]
[., value, (, ta, ), ;, --, i, ;, }, else, if, (, Double, ., isNaN, (, previousEventTime, ), ||]
[value, (, ta, ), ;, --, i, ;, }, else, if, (, Double, ., isNaN, (, previousEventTime, ), ||, (]
[value, (, ta, ), ;, --, i, ;, }, else, if, (, Double, ., isNaN, (, previousEventTime, ), ||, (]
[value, (, ta, ), ;, --, i, ;, }, else, if, (, Double, ., isNaN, (, previousEventTime, ), ||, (]
[;, --, i, ;, }, else, if, (, Double, ., isNaN, (, previousEventTime, ), ||, (, FastMath, ., abs, (]
[;, --, i, ;, }, else, if, (, Double, ., isNaN, (, previousEventTime, ), ||, (, FastMath, ., abs, (]
[i, ;, }, else, if, (, Double, ., isNaN, (, previousEventTime, ), ||, (, FastMath, ., abs, (, previousEventTime, -]
[else, if, (, Double, ., isNaN, (, previousEventTime, ), ||, (, FastMath, ., abs, (, previousEventTime, -, root, ), >]
[., isNaN, (, previousEventTime, ), ||, (, FastMath, ., abs, (, previousEventTime, -, root, ), >, convergence, ), ), {]
[(, previousEventTime, ), ||, (, FastMath, ., abs, (, previousEventTime, -, root, ), >, convergence, ), ), {, pendingEventTime, =]
[), ||, (, FastMath, ., abs, (, previousEventTime, -, root, ), >, convergence, ), ), {, pendingEventTime, =, root, ;]
[(, FastMath, ., abs, (, previousEventTime, -, root, ), >, convergence, ), ), {, pendingEventTime, =, root, ;, pendingEvent, =]
[abs, (, previousEventTime, -, root, ), >, convergence, ), ), {, pendingEventTime, =, root, ;, pendingEvent, =, true, ;, return]
[), >, convergence, ), ), {, pendingEventTime, =, root, ;, pendingEvent, =, true, ;, return, true, ;, }, else, {]
[convergence, ), ), {, pendingEventTime, =, root, ;, pendingEvent, =, true, ;, return, true, ;, }, else, {, ta, =]
[), {, pendingEventTime, =, root, ;, pendingEvent, =, true, ;, return, true, ;, }, else, {, ta, =, tb, ;]
[pendingEventTime, =, root, ;, pendingEvent, =, true, ;, return, true, ;, }, else, {, ta, =, tb, ;, ga, =]
[true, ;, return, true, ;, }, else, {, ta, =, tb, ;, ga, =, gb, ;, }, }, else, {]
[return, true, ;, }, else, {, ta, =, tb, ;, ga, =, gb, ;, }, }, else, {, ta, =]
[;, }, else, {, ta, =, tb, ;, ga, =, gb, ;, }, }, else, {, ta, =, tb, ;]
[else, {, ta, =, tb, ;, ga, =, gb, ;, }, }, else, {, ta, =, tb, ;, ga, =]
[tb, ;, ga, =, gb, ;, }, }, else, {, ta, =, tb, ;, ga, =, gb, ;, }, }]
[ga, =, gb, ;, }, }, else, {, ta, =, tb, ;, ga, =, gb, ;, }, }, pendingEvent, =]
[gb, ;, }, }, else, {, ta, =, tb, ;, ga, =, gb, ;, }, }, pendingEvent, =, false, ;]
[}, }, else, {, ta, =, tb, ;, ga, =, gb, ;, }, }, pendingEvent, =, false, ;, pendingEventTime, =]
[}, }, else, {, ta, =, tb, ;, ga, =, gb, ;, }, }, pendingEvent, =, false, ;, pendingEventTime, =]
[=, tb, ;, ga, =, gb, ;, }, }, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, return]
[=, false, ;, pendingEventTime, =, Double, ., NaN, ;, return, false, ;, }, catch, (, LocalMaxCountExceededException, lmcee, ), {, throw]
[=, false, ;, pendingEventTime, =, Double, ., NaN, ;, return, false, ;, }, catch, (, LocalMaxCountExceededException, lmcee, ), {, throw]
[LocalMaxCountExceededException, lmcee, ), {, throw, lmcee, ., getException, (, ), ;, }, }, public, double, getEventTime, (, ), {, return]
[LocalMaxCountExceededException, lmcee, ), {, throw, lmcee, ., getException, (, ), ;, }, }, public, double, getEventTime, (, ), {, return]
[), {, throw, lmcee, ., getException, (, ), ;, }, }, public, double, getEventTime, (, ), {, return, pendingEvent, ?]
[throw, lmcee, ., getException, (, ), ;, }, }, public, double, getEventTime, (, ), {, return, pendingEvent, ?, pendingEventTime, :]
[lmcee, ., getException, (, ), ;, }, }, public, double, getEventTime, (, ), {, return, pendingEvent, ?, pendingEventTime, :, (]
[lmcee, ., getException, (, ), ;, }, }, public, double, getEventTime, (, ), {, return, pendingEvent, ?, pendingEventTime, :, (]
[getException, (, ), ;, }, }, public, double, getEventTime, (, ), {, return, pendingEvent, ?, pendingEventTime, :, (, forward, ?]
[getException, (, ), ;, }, }, public, double, getEventTime, (, ), {, return, pendingEvent, ?, pendingEventTime, :, (, forward, ?]
[}, }, public, double, getEventTime, (, ), {, return, pendingEvent, ?, pendingEventTime, :, (, forward, ?, Double, ., POSITIVE_INFINITY, :]
[}, }, public, double, getEventTime, (, ), {, return, pendingEvent, ?, pendingEventTime, :, (, forward, ?, Double, ., POSITIVE_INFINITY, :]
[., NEGATIVE_INFINITY, ), ;, }, public, void, stepAccepted, (, final, double, t, ,, final, double, [, ], y, ), {]
[), ;, }, public, void, stepAccepted, (, final, double, t, ,, final, double, [, ], y, ), {, t0, =]
[}, public, void, stepAccepted, (, final, double, t, ,, final, double, [, ], y, ), {, t0, =, t, ;]
[void, stepAccepted, (, final, double, t, ,, final, double, [, ], y, ), {, t0, =, t, ;, g0, =]
[void, stepAccepted, (, final, double, t, ,, final, double, [, ], y, ), {, t0, =, t, ;, g0, =]
[double, t, ,, final, double, [, ], y, ), {, t0, =, t, ;, g0, =, handler, ., g, (]
[,, final, double, [, ], y, ), {, t0, =, t, ;, g0, =, handler, ., g, (, t, ,]
[y, ), {, t0, =, t, ;, g0, =, handler, ., g, (, t, ,, y, ), ;, if, (]
[y, ), {, t0, =, t, ;, g0, =, handler, ., g, (, t, ,, y, ), ;, if, (]
[{, t0, =, t, ;, g0, =, handler, ., g, (, t, ,, y, ), ;, if, (, pendingEvent, &&]
[t0, =, t, ;, g0, =, handler, ., g, (, t, ,, y, ), ;, if, (, pendingEvent, &&, (]
[t0, =, t, ;, g0, =, handler, ., g, (, t, ,, y, ), ;, if, (, pendingEvent, &&, (]
[t0, =, t, ;, g0, =, handler, ., g, (, t, ,, y, ), ;, if, (, pendingEvent, &&, (]
[g0, =, handler, ., g, (, t, ,, y, ), ;, if, (, pendingEvent, &&, (, FastMath, ., abs, (]
[g0, =, handler, ., g, (, t, ,, y, ), ;, if, (, pendingEvent, &&, (, FastMath, ., abs, (]
[handler, ., g, (, t, ,, y, ), ;, if, (, pendingEvent, &&, (, FastMath, ., abs, (, pendingEventTime, -]
[(, t, ,, y, ), ;, if, (, pendingEvent, &&, (, FastMath, ., abs, (, pendingEventTime, -, t, ), <=]
[), ;, if, (, pendingEvent, &&, (, FastMath, ., abs, (, pendingEventTime, -, t, ), <=, convergence, ), ), {]
[if, (, pendingEvent, &&, (, FastMath, ., abs, (, pendingEventTime, -, t, ), <=, convergence, ), ), {, previousEventTime, =]
[pendingEvent, &&, (, FastMath, ., abs, (, pendingEventTime, -, t, ), <=, convergence, ), ), {, previousEventTime, =, t, ;]
[(, FastMath, ., abs, (, pendingEventTime, -, t, ), <=, convergence, ), ), {, previousEventTime, =, t, ;, g0Positive, =]
[., abs, (, pendingEventTime, -, t, ), <=, convergence, ), ), {, previousEventTime, =, t, ;, g0Positive, =, increasing, ;]
[(, pendingEventTime, -, t, ), <=, convergence, ), ), {, previousEventTime, =, t, ;, g0Positive, =, increasing, ;, nextAction, =]
[(, pendingEventTime, -, t, ), <=, convergence, ), ), {, previousEventTime, =, t, ;, g0Positive, =, increasing, ;, nextAction, =]
[), <=, convergence, ), ), {, previousEventTime, =, t, ;, g0Positive, =, increasing, ;, nextAction, =, handler, ., eventOccurred, (]
[convergence, ), ), {, previousEventTime, =, t, ;, g0Positive, =, increasing, ;, nextAction, =, handler, ., eventOccurred, (, t, ,]
[), {, previousEventTime, =, t, ;, g0Positive, =, increasing, ;, nextAction, =, handler, ., eventOccurred, (, t, ,, y, ,]
[{, previousEventTime, =, t, ;, g0Positive, =, increasing, ;, nextAction, =, handler, ., eventOccurred, (, t, ,, y, ,, !]
[previousEventTime, =, t, ;, g0Positive, =, increasing, ;, nextAction, =, handler, ., eventOccurred, (, t, ,, y, ,, !, (]
[previousEventTime, =, t, ;, g0Positive, =, increasing, ;, nextAction, =, handler, ., eventOccurred, (, t, ,, y, ,, !, (]
[t, ;, g0Positive, =, increasing, ;, nextAction, =, handler, ., eventOccurred, (, t, ,, y, ,, !, (, increasing, ^]
[=, handler, ., eventOccurred, (, t, ,, y, ,, !, (, increasing, ^, forward, ), ), ;, }, else, {]
[., eventOccurred, (, t, ,, y, ,, !, (, increasing, ^, forward, ), ), ;, }, else, {, g0Positive, =]
[., eventOccurred, (, t, ,, y, ,, !, (, increasing, ^, forward, ), ), ;, }, else, {, g0Positive, =]
[(, t, ,, y, ,, !, (, increasing, ^, forward, ), ), ;, }, else, {, g0Positive, =, g0, >=]
[,, y, ,, !, (, increasing, ^, forward, ), ), ;, }, else, {, g0Positive, =, g0, >=, 0, ;]
[,, !, (, increasing, ^, forward, ), ), ;, }, else, {, g0Positive, =, g0, >=, 0, ;, nextAction, =]
[,, !, (, increasing, ^, forward, ), ), ;, }, else, {, g0Positive, =, g0, >=, 0, ;, nextAction, =]
[,, !, (, increasing, ^, forward, ), ), ;, }, else, {, g0Positive, =, g0, >=, 0, ;, nextAction, =]
[>=, 0, ;, nextAction, =, EventHandler, ., Action, ., CONTINUE, ;, }, }, public, boolean, stop, (, ), {, return]
[>=, 0, ;, nextAction, =, EventHandler, ., Action, ., CONTINUE, ;, }, }, public, boolean, stop, (, ), {, return]
[;, nextAction, =, EventHandler, ., Action, ., CONTINUE, ;, }, }, public, boolean, stop, (, ), {, return, nextAction, ==]
[;, nextAction, =, EventHandler, ., Action, ., CONTINUE, ;, }, }, public, boolean, stop, (, ), {, return, nextAction, ==]
[;, nextAction, =, EventHandler, ., Action, ., CONTINUE, ;, }, }, public, boolean, stop, (, ), {, return, nextAction, ==]
[STOP, ;, }, public, boolean, reset, (, final, double, t, ,, final, double, [, ], y, ), {, if, (]
[;, }, public, boolean, reset, (, final, double, t, ,, final, double, [, ], y, ), {, if, (, !]
[}, public, boolean, reset, (, final, double, t, ,, final, double, [, ], y, ), {, if, (, !, (]
[}, public, boolean, reset, (, final, double, t, ,, final, double, [, ], y, ), {, if, (, !, (]
[boolean, reset, (, final, double, t, ,, final, double, [, ], y, ), {, if, (, !, (, pendingEvent, &&]
[reset, (, final, double, t, ,, final, double, [, ], y, ), {, if, (, !, (, pendingEvent, &&, (]
[reset, (, final, double, t, ,, final, double, [, ], y, ), {, if, (, !, (, pendingEvent, &&, (]
[reset, (, final, double, t, ,, final, double, [, ], y, ), {, if, (, !, (, pendingEvent, &&, (]
[t, ,, final, double, [, ], y, ), {, if, (, !, (, pendingEvent, &&, (, FastMath, ., abs, (]
[t, ,, final, double, [, ], y, ), {, if, (, !, (, pendingEvent, &&, (, FastMath, ., abs, (]
[final, double, [, ], y, ), {, if, (, !, (, pendingEvent, &&, (, FastMath, ., abs, (, pendingEventTime, -]
[], y, ), {, if, (, !, (, pendingEvent, &&, (, FastMath, ., abs, (, pendingEventTime, -, t, ), <=]
[!, (, pendingEvent, &&, (, FastMath, ., abs, (, pendingEventTime, -, t, ), <=, convergence, ), ), ), {, return]
[FastMath, ., abs, (, pendingEventTime, -, t, ), <=, convergence, ), ), ), {, return, false, ;, }, if, (]
[FastMath, ., abs, (, pendingEventTime, -, t, ), <=, convergence, ), ), ), {, return, false, ;, }, if, (]
[abs, (, pendingEventTime, -, t, ), <=, convergence, ), ), ), {, return, false, ;, }, if, (, nextAction, ==]
[abs, (, pendingEventTime, -, t, ), <=, convergence, ), ), ), {, return, false, ;, }, if, (, nextAction, ==]
[abs, (, pendingEventTime, -, t, ), <=, convergence, ), ), ), {, return, false, ;, }, if, (, nextAction, ==]
[convergence, ), ), ), {, return, false, ;, }, if, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), {]
[convergence, ), ), ), {, return, false, ;, }, if, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), {]
[{, return, false, ;, }, if, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), {, handler, ., resetState, (]
[false, ;, }, if, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), {, handler, ., resetState, (, t, ,]
[(, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), {, handler, ., resetState, (, t, ,, y, ), ;, }]
[==, EventHandler, ., Action, ., RESET_STATE, ), {, handler, ., resetState, (, t, ,, y, ), ;, }, pendingEvent, =]
[., Action, ., RESET_STATE, ), {, handler, ., resetState, (, t, ,, y, ), ;, }, pendingEvent, =, false, ;]
[., RESET_STATE, ), {, handler, ., resetState, (, t, ,, y, ), ;, }, pendingEvent, =, false, ;, pendingEventTime, =]
[., RESET_STATE, ), {, handler, ., resetState, (, t, ,, y, ), ;, }, pendingEvent, =, false, ;, pendingEventTime, =]
[., resetState, (, t, ,, y, ), ;, }, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, return]
[., resetState, (, t, ,, y, ), ;, }, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, return]
[resetState, (, t, ,, y, ), ;, }, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, return, (]
[resetState, (, t, ,, y, ), ;, }, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, return, (]
[t, ,, y, ), ;, }, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, return, (, nextAction, ==]
[t, ,, y, ), ;, }, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, return, (, nextAction, ==]
[t, ,, y, ), ;, }, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, return, (, nextAction, ==]
[=, false, ;, pendingEventTime, =, Double, ., NaN, ;, return, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), ||]
[false, ;, pendingEventTime, =, Double, ., NaN, ;, return, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), ||, (]
[false, ;, pendingEventTime, =, Double, ., NaN, ;, return, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), ||, (]
[pendingEventTime, =, Double, ., NaN, ;, return, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), ||, (, nextAction, ==]
[pendingEventTime, =, Double, ., NaN, ;, return, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), ||, (, nextAction, ==]
[pendingEventTime, =, Double, ., NaN, ;, return, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), ||, (, nextAction, ==]
[., Action, ., RESET_DERIVATIVES, ), ;, }, private, static, class, LocalMaxCountExceededException, extends, RuntimeException, {, private, static, final, long, serialVersionUID, =]
[static, final, long, serialVersionUID, =, 20120901L, ;, private, final, MaxCountExceededException, wrapped, ;, public, LocalMaxCountExceededException, (, final, MaxCountExceededException, exception, ), {]
[long, serialVersionUID, =, 20120901L, ;, private, final, MaxCountExceededException, wrapped, ;, public, LocalMaxCountExceededException, (, final, MaxCountExceededException, exception, ), {, wrapped, =]
[public, LocalMaxCountExceededException, (, final, MaxCountExceededException, exception, ), {, wrapped, =, exception, ;, }, public, MaxCountExceededException, getException, (, ), {, return]
