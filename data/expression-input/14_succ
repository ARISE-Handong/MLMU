[,, style, ,, new, CompilerOptions, (, ), ), ;, }, public, JsMessageExtractor, (, JsMessage, ., IdGenerator, idGenerator, ,, JsMessage, .]
[,, new, CompilerOptions, (, ), ), ;, }, public, JsMessageExtractor, (, JsMessage, ., IdGenerator, idGenerator, ,, JsMessage, ., Style, style]
[), ;, }, public, JsMessageExtractor, (, JsMessage, ., IdGenerator, idGenerator, ,, JsMessage, ., Style, style, ,, CompilerOptions, options, ), {]
[=, idGenerator, ;, this, ., style, =, style, ;, this, ., options, =, options, ;, }, private, class, ExtractMessagesVisitor, extends]
[., idGenerator, =, idGenerator, ;, this, ., style, =, style, ;, this, ., options, =, options, ;, }, private, class]
[;, this, ., style, =, style, ;, this, ., options, =, options, ;, }, private, class, ExtractMessagesVisitor, extends, JsMessageVisitor, {]
[=, style, ;, this, ., options, =, options, ;, }, private, class, ExtractMessagesVisitor, extends, JsMessageVisitor, {, private, final, List, <]
[., style, =, style, ;, this, ., options, =, options, ;, }, private, class, ExtractMessagesVisitor, extends, JsMessageVisitor, {, private, final]
[;, this, ., options, =, options, ;, }, private, class, ExtractMessagesVisitor, extends, JsMessageVisitor, {, private, final, List, <, JsMessage, >]
[=, options, ;, }, private, class, ExtractMessagesVisitor, extends, JsMessageVisitor, {, private, final, List, <, JsMessage, >, messages, =, Lists, .]
[., options, =, options, ;, }, private, class, ExtractMessagesVisitor, extends, JsMessageVisitor, {, private, final, List, <, JsMessage, >, messages, =]
[;, }, private, class, ExtractMessagesVisitor, extends, JsMessageVisitor, {, private, final, List, <, JsMessage, >, messages, =, Lists, ., newLinkedList, (]
[;, private, ExtractMessagesVisitor, (, AbstractCompiler, compiler, ), {, super, (, compiler, ,, true, ,, style, ,, idGenerator, ), ;, }]
[., newLinkedList, (, ), ;, private, ExtractMessagesVisitor, (, AbstractCompiler, compiler, ), {, super, (, compiler, ,, true, ,, style, ,]
[,, true, ,, style, ,, idGenerator, ), ;, }, @, Override, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, )]
[,, style, ,, idGenerator, ), ;, }, @, Override, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, ), {, if]
[,, idGenerator, ), ;, }, @, Override, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, ), {, if, (, !]
[), ;, }, @, Override, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, ), {, if, (, !, message, .]
[), {, messages, ., add, (, message, ), ;, }, }, public, Collection, <, JsMessage, >, getMessages, (, ), {]
[), {, messages, ., add, (, message, ), ;, }, }, public, Collection, <, JsMessage, >, getMessages, (, ), {]
[., isExternal, (, ), ), {, messages, ., add, (, message, ), ;, }, }, public, Collection, <, JsMessage, >]
[;, }, }, public, Collection, <, JsMessage, >, getMessages, (, ), {, return, messages, ;, }, }, public, Collection, <]
[., add, (, message, ), ;, }, }, public, Collection, <, JsMessage, >, getMessages, (, ), {, return, messages, ;]
[), ;, }, }, public, Collection, <, JsMessage, >, getMessages, (, ), {, return, messages, ;, }, }, public, Collection]
[;, }, }, public, Collection, <, JsMessage, >, extractMessages, (, SourceFile, ..., inputs, ), throws, IOException, {, return, extractMessages, (]
[;, }, public, <, T, extends, SourceFile, >, Collection, <, JsMessage, >, extractMessages, (, Iterable, <, T, >, inputs, )]
[), ;, }, public, <, T, extends, SourceFile, >, Collection, <, JsMessage, >, extractMessages, (, Iterable, <, T, >, inputs]
[., copyOf, (, inputs, ), ), ;, }, public, <, T, extends, SourceFile, >, Collection, <, JsMessage, >, extractMessages, (]
[), ), ;, }, public, <, T, extends, SourceFile, >, Collection, <, JsMessage, >, extractMessages, (, Iterable, <, T, >]
[;, compiler, ., init, (, ImmutableList, ., <, SourceFile, >, of, (, ), ,, Lists, ., newArrayList, (, inputs, )]
[;, compiler, ., parseInputs, (, ), ;, ExtractMessagesVisitor, extractCompilerPass, =, new, ExtractMessagesVisitor, (, compiler, ), ;, if, (, compiler, .]
[., init, (, ImmutableList, ., <, SourceFile, >, of, (, ), ,, Lists, ., newArrayList, (, inputs, ), ,, options]
[,, Lists, ., newArrayList, (, inputs, ), ,, options, ), ;, compiler, ., parseInputs, (, ), ;, ExtractMessagesVisitor, extractCompilerPass, =]
[., <, SourceFile, >, of, (, ), ,, Lists, ., newArrayList, (, inputs, ), ,, options, ), ;, compiler, .]
[,, options, ), ;, compiler, ., parseInputs, (, ), ;, ExtractMessagesVisitor, extractCompilerPass, =, new, ExtractMessagesVisitor, (, compiler, ), ;, if]
[., newArrayList, (, inputs, ), ,, options, ), ;, compiler, ., parseInputs, (, ), ;, ExtractMessagesVisitor, extractCompilerPass, =, new, ExtractMessagesVisitor]
[), ,, options, ), ;, compiler, ., parseInputs, (, ), ;, ExtractMessagesVisitor, extractCompilerPass, =, new, ExtractMessagesVisitor, (, compiler, ), ;]
[), ;, compiler, ., parseInputs, (, ), ;, ExtractMessagesVisitor, extractCompilerPass, =, new, ExtractMessagesVisitor, (, compiler, ), ;, if, (, compiler]
[;, ExtractMessagesVisitor, extractCompilerPass, =, new, ExtractMessagesVisitor, (, compiler, ), ;, if, (, compiler, ., getErrors, (, ), ., length, ==]
[., parseInputs, (, ), ;, ExtractMessagesVisitor, extractCompilerPass, =, new, ExtractMessagesVisitor, (, compiler, ), ;, if, (, compiler, ., getErrors, (]
[;, if, (, compiler, ., getErrors, (, ), ., length, ==, 0, ), {, extractCompilerPass, ., process, (, null, ,]
[), ;, if, (, compiler, ., getErrors, (, ), ., length, ==, 0, ), {, extractCompilerPass, ., process, (, null]
[), {, extractCompilerPass, ., process, (, null, ,, compiler, ., getRoot, (, ), ), ;, }, JSError, [, ], errors]
[==, 0, ), {, extractCompilerPass, ., process, (, null, ,, compiler, ., getRoot, (, ), ), ;, }, JSError, []
[., length, ==, 0, ), {, extractCompilerPass, ., process, (, null, ,, compiler, ., getRoot, (, ), ), ;, }]
[., getErrors, (, ), ., length, ==, 0, ), {, extractCompilerPass, ., process, (, null, ,, compiler, ., getRoot, (]
[), {, extractCompilerPass, ., process, (, null, ,, compiler, ., getRoot, (, ), ), ;, }, JSError, [, ], errors]
[;, }, JSError, [, ], errors, =, compiler, ., getErrors, (, ), ;, if, (, errors, ., length, >, 0]
[., process, (, null, ,, compiler, ., getRoot, (, ), ), ;, }, JSError, [, ], errors, =, compiler, .]
[,, compiler, ., getRoot, (, ), ), ;, }, JSError, [, ], errors, =, compiler, ., getErrors, (, ), ;]
[), ;, }, JSError, [, ], errors, =, compiler, ., getErrors, (, ), ;, if, (, errors, ., length, >]
[., getRoot, (, ), ), ;, }, JSError, [, ], errors, =, compiler, ., getErrors, (, ), ;, if, (]
[;, if, (, errors, ., length, >, 0, ), {, StringBuilder, msg, =, new, StringBuilder, (, "JSCompiler errors\n", ), ;, MessageFormatter]
[., getErrors, (, ), ;, if, (, errors, ., length, >, 0, ), {, StringBuilder, msg, =, new, StringBuilder, (]
[), {, StringBuilder, msg, =, new, StringBuilder, (, "JSCompiler errors\n", ), ;, MessageFormatter, formatter, =, new, LightweightMessageFormatter, (, compiler, ), ;]
[>, 0, ), {, StringBuilder, msg, =, new, StringBuilder, (, "JSCompiler errors\n", ), ;, MessageFormatter, formatter, =, new, LightweightMessageFormatter, (, compiler]
[., length, >, 0, ), {, StringBuilder, msg, =, new, StringBuilder, (, "JSCompiler errors\n", ), ;, MessageFormatter, formatter, =, new, LightweightMessageFormatter]
[), {, StringBuilder, msg, =, new, StringBuilder, (, "JSCompiler errors\n", ), ;, MessageFormatter, formatter, =, new, LightweightMessageFormatter, (, compiler, ), ;]
[;, MessageFormatter, formatter, =, new, LightweightMessageFormatter, (, compiler, ), ;, for, (, JSError, e, :, errors, ), {, msg, .]
[), ;, MessageFormatter, formatter, =, new, LightweightMessageFormatter, (, compiler, ), ;, for, (, JSError, e, :, errors, ), {, msg]
[;, for, (, JSError, e, :, errors, ), {, msg, ., append, (, formatter, ., formatError, (, e, ), )]
[), ;, for, (, JSError, e, :, errors, ), {, msg, ., append, (, formatter, ., formatError, (, e, )]
[), {, msg, ., append, (, formatter, ., formatError, (, e, ), ), ;, }, throw, new, RuntimeException, (, msg]
[;, }, throw, new, RuntimeException, (, msg, ., toString, (, ), ), ;, }, return, extractCompilerPass, ., getMessages, (, )]
[., append, (, formatter, ., formatError, (, e, ), ), ;, }, throw, new, RuntimeException, (, msg, ., toString, (]
[), ;, }, throw, new, RuntimeException, (, msg, ., toString, (, ), ), ;, }, return, extractCompilerPass, ., getMessages, (]
[., formatError, (, e, ), ), ;, }, throw, new, RuntimeException, (, msg, ., toString, (, ), ), ;, }]
[), ), ;, }, throw, new, RuntimeException, (, msg, ., toString, (, ), ), ;, }, return, extractCompilerPass, ., getMessages]
[;, }, return, extractCompilerPass, ., getMessages, (, ), ;, }, }]
[), ;, }, return, extractCompilerPass, ., getMessages, (, ), ;, }, }]
[., toString, (, ), ), ;, }, return, extractCompilerPass, ., getMessages, (, ), ;, }, }]
[;, }, }]
[., getMessages, (, ), ;, }, }]
