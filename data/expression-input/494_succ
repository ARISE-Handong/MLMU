[;, protected, SecondMoment, moment, =, null, ;, protected, boolean, incMoment, =, true, ;, private, boolean, isBiasCorrected, =, true, ;, public]
[;, protected, SecondMoment, moment, =, null, ;, protected, boolean, incMoment, =, true, ;, private, boolean, isBiasCorrected, =, true, ;, public]
[;, protected, boolean, incMoment, =, true, ;, private, boolean, isBiasCorrected, =, true, ;, public, Variance, (, ), {, moment, =]
[;, private, boolean, isBiasCorrected, =, true, ;, public, Variance, (, ), {, moment, =, new, SecondMoment, (, ), ;, }]
[;, public, Variance, (, ), {, moment, =, new, SecondMoment, (, ), ;, }, public, Variance, (, final, SecondMoment, m2]
[=, new, SecondMoment, (, ), ;, }, public, Variance, (, final, SecondMoment, m2, ), {, incMoment, =, false, ;, this]
[;, }, public, Variance, (, final, SecondMoment, m2, ), {, incMoment, =, false, ;, this, ., moment, =, m2, ;]
[=, false, ;, this, ., moment, =, m2, ;, }, public, Variance, (, boolean, isBiasCorrected, ), {, moment, =, new]
[;, this, ., moment, =, m2, ;, }, public, Variance, (, boolean, isBiasCorrected, ), {, moment, =, new, SecondMoment, (]
[=, m2, ;, }, public, Variance, (, boolean, isBiasCorrected, ), {, moment, =, new, SecondMoment, (, ), ;, this, .]
[., moment, =, m2, ;, }, public, Variance, (, boolean, isBiasCorrected, ), {, moment, =, new, SecondMoment, (, ), ;]
[;, }, public, Variance, (, boolean, isBiasCorrected, ), {, moment, =, new, SecondMoment, (, ), ;, this, ., isBiasCorrected, =]
[=, new, SecondMoment, (, ), ;, this, ., isBiasCorrected, =, isBiasCorrected, ;, }, public, Variance, (, boolean, isBiasCorrected, ,, SecondMoment]
[;, this, ., isBiasCorrected, =, isBiasCorrected, ;, }, public, Variance, (, boolean, isBiasCorrected, ,, SecondMoment, m2, ), {, incMoment, =]
[=, isBiasCorrected, ;, }, public, Variance, (, boolean, isBiasCorrected, ,, SecondMoment, m2, ), {, incMoment, =, false, ;, this, .]
[., isBiasCorrected, =, isBiasCorrected, ;, }, public, Variance, (, boolean, isBiasCorrected, ,, SecondMoment, m2, ), {, incMoment, =, false, ;]
[;, }, public, Variance, (, boolean, isBiasCorrected, ,, SecondMoment, m2, ), {, incMoment, =, false, ;, this, ., moment, =]
[=, false, ;, this, ., moment, =, m2, ;, this, ., isBiasCorrected, =, isBiasCorrected, ;, }, public, Variance, (, Variance]
[;, this, ., moment, =, m2, ;, this, ., isBiasCorrected, =, isBiasCorrected, ;, }, public, Variance, (, Variance, original, )]
[=, m2, ;, this, ., isBiasCorrected, =, isBiasCorrected, ;, }, public, Variance, (, Variance, original, ), throws, NullArgumentException, {, copy]
[., moment, =, m2, ;, this, ., isBiasCorrected, =, isBiasCorrected, ;, }, public, Variance, (, Variance, original, ), throws, NullArgumentException]
[;, this, ., isBiasCorrected, =, isBiasCorrected, ;, }, public, Variance, (, Variance, original, ), throws, NullArgumentException, {, copy, (, original]
[=, isBiasCorrected, ;, }, public, Variance, (, Variance, original, ), throws, NullArgumentException, {, copy, (, original, ,, this, ), ;]
[., isBiasCorrected, =, isBiasCorrected, ;, }, public, Variance, (, Variance, original, ), throws, NullArgumentException, {, copy, (, original, ,, this]
[;, }, public, Variance, (, Variance, original, ), throws, NullArgumentException, {, copy, (, original, ,, this, ), ;, }, @]
[;, }, @, Override, public, void, increment, (, final, double, d, ), {, if, (, incMoment, ), {, moment, .]
[,, this, ), ;, }, @, Override, public, void, increment, (, final, double, d, ), {, if, (, incMoment, )]
[), ;, }, @, Override, public, void, increment, (, final, double, d, ), {, if, (, incMoment, ), {, moment]
[), {, moment, ., increment, (, d, ), ;, }, }, @, Override, public, double, getResult, (, ), {, if]
[;, }, }, @, Override, public, double, getResult, (, ), {, if, (, moment, ., n, ==, 0, ), {]
[., increment, (, d, ), ;, }, }, @, Override, public, double, getResult, (, ), {, if, (, moment, .]
[), ;, }, }, @, Override, public, double, getResult, (, ), {, if, (, moment, ., n, ==, 0, )]
[), {, return, Double, ., NaN, ;, }, else, if, (, moment, ., n, ==, 1, ), {, return, 0d]
[==, 0, ), {, return, Double, ., NaN, ;, }, else, if, (, moment, ., n, ==, 1, ), {]
[., n, ==, 0, ), {, return, Double, ., NaN, ;, }, else, if, (, moment, ., n, ==, 1]
[), {, return, Double, ., NaN, ;, }, else, if, (, moment, ., n, ==, 1, ), {, return, 0d]
[;, }, else, if, (, moment, ., n, ==, 1, ), {, return, 0d, ;, }, else, {, if, (]
[., NaN, ;, }, else, if, (, moment, ., n, ==, 1, ), {, return, 0d, ;, }, else, {]
[), {, return, 0d, ;, }, else, {, if, (, isBiasCorrected, ), {, return, moment, ., m2, /, (, moment]
[==, 1, ), {, return, 0d, ;, }, else, {, if, (, isBiasCorrected, ), {, return, moment, ., m2, /]
[., n, ==, 1, ), {, return, 0d, ;, }, else, {, if, (, isBiasCorrected, ), {, return, moment, .]
[), {, return, 0d, ;, }, else, {, if, (, isBiasCorrected, ), {, return, moment, ., m2, /, (, moment]
[;, }, else, {, if, (, isBiasCorrected, ), {, return, moment, ., m2, /, (, moment, ., n, -, 1d]
[), {, return, moment, ., m2, /, (, moment, ., n, -, 1d, ), ;, }, else, {, return, moment]
[;, }, else, {, return, moment, ., m2, /, (, moment, ., n, ), ;, }, }, }, public, long]
[/, (, moment, ., n, -, 1d, ), ;, }, else, {, return, moment, ., m2, /, (, moment, .]
[., m2, /, (, moment, ., n, -, 1d, ), ;, }, else, {, return, moment, ., m2, /, (]
[;, }, else, {, return, moment, ., m2, /, (, moment, ., n, ), ;, }, }, }, public, long]
[), ;, }, else, {, return, moment, ., m2, /, (, moment, ., n, ), ;, }, }, }, public]
[-, 1d, ), ;, }, else, {, return, moment, ., m2, /, (, moment, ., n, ), ;, }, }]
[., n, -, 1d, ), ;, }, else, {, return, moment, ., m2, /, (, moment, ., n, ), ;]
[), ;, }, else, {, return, moment, ., m2, /, (, moment, ., n, ), ;, }, }, }, public]
[;, }, }, }, public, long, getN, (, ), {, return, moment, ., getN, (, ), ;, }, @, Override]
[/, (, moment, ., n, ), ;, }, }, }, public, long, getN, (, ), {, return, moment, ., getN]
[., m2, /, (, moment, ., n, ), ;, }, }, }, public, long, getN, (, ), {, return, moment]
[;, }, }, }, public, long, getN, (, ), {, return, moment, ., getN, (, ), ;, }, @, Override]
[), ;, }, }, }, public, long, getN, (, ), {, return, moment, ., getN, (, ), ;, }, @]
[., n, ), ;, }, }, }, public, long, getN, (, ), {, return, moment, ., getN, (, ), ;]
[;, }, @, Override, public, void, clear, (, ), {, if, (, incMoment, ), {, moment, ., clear, (, )]
[., getN, (, ), ;, }, @, Override, public, void, clear, (, ), {, if, (, incMoment, ), {, moment]
[), {, moment, ., clear, (, ), ;, }, }, @, Override, public, double, evaluate, (, final, double, [, ]]
[;, }, }, @, Override, public, double, evaluate, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, if, (]
[., clear, (, ), ;, }, }, @, Override, public, double, evaluate, (, final, double, [, ], values, ), throws]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, return, evaluate, (, values, ,, 0, ,, values]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, return, evaluate, (, values, ,, 0]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, return, evaluate, (, values, ,, 0, ,, values]
[;, }, return, evaluate, (, values, ,, 0, ,, values, ., length, ), ;, }, @, Override, public, double, evaluate]
[), ;, }, return, evaluate, (, values, ,, 0, ,, values, ., length, ), ;, }, @, Override, public, double]
[., INPUT_ARRAY, ), ;, }, return, evaluate, (, values, ,, 0, ,, values, ., length, ), ;, }, @, Override]
[;, }, @, Override, public, double, evaluate, (, final, double, [, ], values, ,, final, int, begin, ,, final, int]
[,, 0, ,, values, ., length, ), ;, }, @, Override, public, double, evaluate, (, final, double, [, ], values]
[,, values, ., length, ), ;, }, @, Override, public, double, evaluate, (, final, double, [, ], values, ,, final]
[), ;, }, @, Override, public, double, evaluate, (, final, double, [, ], values, ,, final, int, begin, ,, final]
[., length, ), ;, }, @, Override, public, double, evaluate, (, final, double, [, ], values, ,, final, int, begin]
[;, if, (, test, (, values, ,, begin, ,, length, ), ), {, clear, (, ), ;, if, (, length]
[., NaN, ;, if, (, test, (, values, ,, begin, ,, length, ), ), {, clear, (, ), ;, if]
[), {, clear, (, ), ;, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if]
[,, begin, ,, length, ), ), {, clear, (, ), ;, if, (, length, ==, 1, ), {, var, =]
[,, length, ), ), {, clear, (, ), ;, if, (, length, ==, 1, ), {, var, =, 0.0, ;]
[), ), {, clear, (, ), ;, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else]
[;, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if, (, length, >, 1, )]
[), {, var, =, 0.0, ;, }, else, if, (, length, >, 1, ), {, Mean, mean, =, new, Mean]
[==, 1, ), {, var, =, 0.0, ;, }, else, if, (, length, >, 1, ), {, Mean, mean, =]
[), {, var, =, 0.0, ;, }, else, if, (, length, >, 1, ), {, Mean, mean, =, new, Mean]
[=, 0.0, ;, }, else, if, (, length, >, 1, ), {, Mean, mean, =, new, Mean, (, ), ;]
[;, }, else, if, (, length, >, 1, ), {, Mean, mean, =, new, Mean, (, ), ;, double, m]
[), {, Mean, mean, =, new, Mean, (, ), ;, double, m, =, mean, ., evaluate, (, values, ,, begin]
[>, 1, ), {, Mean, mean, =, new, Mean, (, ), ;, double, m, =, mean, ., evaluate, (, values]
[), {, Mean, mean, =, new, Mean, (, ), ;, double, m, =, mean, ., evaluate, (, values, ,, begin]
[;, double, m, =, mean, ., evaluate, (, values, ,, begin, ,, length, ), ;, var, =, evaluate, (, values]
[;, var, =, evaluate, (, values, ,, m, ,, begin, ,, length, ), ;, }, }, return, var, ;, }]
[., evaluate, (, values, ,, begin, ,, length, ), ;, var, =, evaluate, (, values, ,, m, ,, begin, ,]
[,, begin, ,, length, ), ;, var, =, evaluate, (, values, ,, m, ,, begin, ,, length, ), ;, }]
[,, length, ), ;, var, =, evaluate, (, values, ,, m, ,, begin, ,, length, ), ;, }, }, return]
[), ;, var, =, evaluate, (, values, ,, m, ,, begin, ,, length, ), ;, }, }, return, var, ;]
[=, evaluate, (, values, ,, m, ,, begin, ,, length, ), ;, }, }, return, var, ;, }, public, double]
[;, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double, []
[,, m, ,, begin, ,, length, ), ;, }, }, return, var, ;, }, public, double, evaluate, (, final, double]
[,, begin, ,, length, ), ;, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ]]
[,, length, ), ;, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ], values, ,]
[), ;, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double]
[;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double, [, ], weights, ,, final, int]
[;, if, (, test, (, values, ,, weights, ,, begin, ,, length, ), ), {, clear, (, ), ;, if]
[., NaN, ;, if, (, test, (, values, ,, weights, ,, begin, ,, length, ), ), {, clear, (, )]
[), {, clear, (, ), ;, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if]
[,, weights, ,, begin, ,, length, ), ), {, clear, (, ), ;, if, (, length, ==, 1, ), {]
[,, begin, ,, length, ), ), {, clear, (, ), ;, if, (, length, ==, 1, ), {, var, =]
[,, length, ), ), {, clear, (, ), ;, if, (, length, ==, 1, ), {, var, =, 0.0, ;]
[), ), {, clear, (, ), ;, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else]
[;, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if, (, length, >, 1, )]
[), {, var, =, 0.0, ;, }, else, if, (, length, >, 1, ), {, Mean, mean, =, new, Mean]
[==, 1, ), {, var, =, 0.0, ;, }, else, if, (, length, >, 1, ), {, Mean, mean, =]
[), {, var, =, 0.0, ;, }, else, if, (, length, >, 1, ), {, Mean, mean, =, new, Mean]
[=, 0.0, ;, }, else, if, (, length, >, 1, ), {, Mean, mean, =, new, Mean, (, ), ;]
[;, }, else, if, (, length, >, 1, ), {, Mean, mean, =, new, Mean, (, ), ;, double, m]
[), {, Mean, mean, =, new, Mean, (, ), ;, double, m, =, mean, ., evaluate, (, values, ,, weights]
[>, 1, ), {, Mean, mean, =, new, Mean, (, ), ;, double, m, =, mean, ., evaluate, (, values]
[), {, Mean, mean, =, new, Mean, (, ), ;, double, m, =, mean, ., evaluate, (, values, ,, weights]
[;, double, m, =, mean, ., evaluate, (, values, ,, weights, ,, begin, ,, length, ), ;, var, =, evaluate]
[;, var, =, evaluate, (, values, ,, weights, ,, m, ,, begin, ,, length, ), ;, }, }, return, var]
[., evaluate, (, values, ,, weights, ,, begin, ,, length, ), ;, var, =, evaluate, (, values, ,, weights, ,]
[,, weights, ,, begin, ,, length, ), ;, var, =, evaluate, (, values, ,, weights, ,, m, ,, begin, ,]
[,, begin, ,, length, ), ;, var, =, evaluate, (, values, ,, weights, ,, m, ,, begin, ,, length, )]
[,, length, ), ;, var, =, evaluate, (, values, ,, weights, ,, m, ,, begin, ,, length, ), ;, }]
[), ;, var, =, evaluate, (, values, ,, weights, ,, m, ,, begin, ,, length, ), ;, }, }, return]
[=, evaluate, (, values, ,, weights, ,, m, ,, begin, ,, length, ), ;, }, }, return, var, ;, }]
[;, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double, []
[,, weights, ,, m, ,, begin, ,, length, ), ;, }, }, return, var, ;, }, public, double, evaluate, (]
[,, m, ,, begin, ,, length, ), ;, }, }, return, var, ;, }, public, double, evaluate, (, final, double]
[,, begin, ,, length, ), ;, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ]]
[,, length, ), ;, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ], values, ,]
[), ;, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double]
[;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double, [, ], weights, ), throws, MathIllegalArgumentException]
[;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double, mean, ,, final, int, begin, ,]
[,, weights, ,, 0, ,, values, ., length, ), ;, }, public, double, evaluate, (, final, double, [, ], values]
[,, 0, ,, values, ., length, ), ;, }, public, double, evaluate, (, final, double, [, ], values, ,, final]
[,, values, ., length, ), ;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double, mean]
[), ;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double, mean, ,, final, int, begin]
[., length, ), ;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double, mean, ,, final]
[;, if, (, test, (, values, ,, begin, ,, length, ), ), {, if, (, length, ==, 1, ), {]
[., NaN, ;, if, (, test, (, values, ,, begin, ,, length, ), ), {, if, (, length, ==, 1]
[), {, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if, (, length, >, 1]
[,, begin, ,, length, ), ), {, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else]
[,, length, ), ), {, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if, (]
[), ), {, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if, (, length, >]
[), {, var, =, 0.0, ;, }, else, if, (, length, >, 1, ), {, double, accum, =, 0.0, ;]
[==, 1, ), {, var, =, 0.0, ;, }, else, if, (, length, >, 1, ), {, double, accum, =]
[), {, var, =, 0.0, ;, }, else, if, (, length, >, 1, ), {, double, accum, =, 0.0, ;]
[=, 0.0, ;, }, else, if, (, length, >, 1, ), {, double, accum, =, 0.0, ;, double, dev, =]
[;, }, else, if, (, length, >, 1, ), {, double, accum, =, 0.0, ;, double, dev, =, 0.0, ;]
[), {, double, accum, =, 0.0, ;, double, dev, =, 0.0, ;, double, accum2, =, 0.0, ;, for, (, int]
[>, 1, ), {, double, accum, =, 0.0, ;, double, dev, =, 0.0, ;, double, accum2, =, 0.0, ;, for]
[), {, double, accum, =, 0.0, ;, double, dev, =, 0.0, ;, double, accum2, =, 0.0, ;, for, (, int]
[;, double, dev, =, 0.0, ;, double, accum2, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <]
[;, double, accum2, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, dev, =]
[;, i, <, begin, +, length, ;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;]
[;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=, dev, *, dev, ;]
[<, begin, +, length, ;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=]
[;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=, dev, *, dev, ;]
[+, length, ;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=, dev, *]
[;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=, dev, *, dev, ;]
[), {, dev, =, values, [, i, ], -, mean, ;, accum, +=, dev, *, dev, ;, accum2, +=, dev]
[++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=, dev, *, dev, ;, accum2, +=]
[=, values, [, i, ], -, mean, ;, accum, +=, dev, *, dev, ;, accum2, +=, dev, ;, }, double]
[;, accum, +=, dev, *, dev, ;, accum2, +=, dev, ;, }, double, len, =, length, ;, if, (, isBiasCorrected]
[-, mean, ;, accum, +=, dev, *, dev, ;, accum2, +=, dev, ;, }, double, len, =, length, ;, if]
[[, i, ], -, mean, ;, accum, +=, dev, *, dev, ;, accum2, +=, dev, ;, }, double, len, =]
[], -, mean, ;, accum, +=, dev, *, dev, ;, accum2, +=, dev, ;, }, double, len, =, length, ;]
[;, accum, +=, dev, *, dev, ;, accum2, +=, dev, ;, }, double, len, =, length, ;, if, (, isBiasCorrected]
[+=, dev, *, dev, ;, accum2, +=, dev, ;, }, double, len, =, length, ;, if, (, isBiasCorrected, ), {]
[;, accum2, +=, dev, ;, }, double, len, =, length, ;, if, (, isBiasCorrected, ), {, var, =, (, accum]
[*, dev, ;, accum2, +=, dev, ;, }, double, len, =, length, ;, if, (, isBiasCorrected, ), {, var, =]
[;, accum2, +=, dev, ;, }, double, len, =, length, ;, if, (, isBiasCorrected, ), {, var, =, (, accum]
[+=, dev, ;, }, double, len, =, length, ;, if, (, isBiasCorrected, ), {, var, =, (, accum, -, (]
[;, }, double, len, =, length, ;, if, (, isBiasCorrected, ), {, var, =, (, accum, -, (, accum2, *]
[;, if, (, isBiasCorrected, ), {, var, =, (, accum, -, (, accum2, *, accum2, /, len, ), ), /]
[), {, var, =, (, accum, -, (, accum2, *, accum2, /, len, ), ), /, (, len, -, 1.0]
[=, (, accum, -, (, accum2, *, accum2, /, len, ), ), /, (, len, -, 1.0, ), ;, }]
[;, }, else, {, var, =, (, accum, -, (, accum2, *, accum2, /, len, ), ), /, len, ;]
[/, (, len, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (, accum2, *, accum2, /]
[), /, (, len, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (, accum2, *, accum2]
[-, (, accum2, *, accum2, /, len, ), ), /, (, len, -, 1.0, ), ;, }, else, {, var]
[), /, (, len, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (, accum2, *, accum2]
[), ), /, (, len, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (, accum2, *]
[/, len, ), ), /, (, len, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (]
[*, accum2, /, len, ), ), /, (, len, -, 1.0, ), ;, }, else, {, var, =, (, accum]
[/, len, ), ), /, (, len, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (]
[), ), /, (, len, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (, accum2, *]
[;, }, else, {, var, =, (, accum, -, (, accum2, *, accum2, /, len, ), ), /, len, ;]
[), ;, }, else, {, var, =, (, accum, -, (, accum2, *, accum2, /, len, ), ), /, len]
[-, 1.0, ), ;, }, else, {, var, =, (, accum, -, (, accum2, *, accum2, /, len, ), )]
[), ;, }, else, {, var, =, (, accum, -, (, accum2, *, accum2, /, len, ), ), /, len]
[=, (, accum, -, (, accum2, *, accum2, /, len, ), ), /, len, ;, }, }, }, return, var]
[;, }, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double]
[/, len, ;, }, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ], values, ,]
[), /, len, ;, }, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ], values]
[-, (, accum2, *, accum2, /, len, ), ), /, len, ;, }, }, }, return, var, ;, }, public]
[), /, len, ;, }, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ], values]
[), ), /, len, ;, }, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ]]
[/, len, ), ), /, len, ;, }, }, }, return, var, ;, }, public, double, evaluate, (, final, double]
[*, accum2, /, len, ), ), /, len, ;, }, }, }, return, var, ;, }, public, double, evaluate, (]
[/, len, ), ), /, len, ;, }, }, }, return, var, ;, }, public, double, evaluate, (, final, double]
[), ), /, len, ;, }, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ]]
[;, }, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double]
[;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return]
[;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double, [, ], weights, ,, final, double]
[,, mean, ,, 0, ,, values, ., length, ), ;, }, public, double, evaluate, (, final, double, [, ], values]
[,, 0, ,, values, ., length, ), ;, }, public, double, evaluate, (, final, double, [, ], values, ,, final]
[,, values, ., length, ), ;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double, []
[), ;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double, [, ], weights, ,, final]
[., length, ), ;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double, [, ], weights]
[;, if, (, test, (, values, ,, weights, ,, begin, ,, length, ), ), {, if, (, length, ==, 1]
[., NaN, ;, if, (, test, (, values, ,, weights, ,, begin, ,, length, ), ), {, if, (, length]
[), {, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if, (, length, >, 1]
[,, weights, ,, begin, ,, length, ), ), {, if, (, length, ==, 1, ), {, var, =, 0.0, ;]
[,, begin, ,, length, ), ), {, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else]
[,, length, ), ), {, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if, (]
[), ), {, if, (, length, ==, 1, ), {, var, =, 0.0, ;, }, else, if, (, length, >]
[), {, var, =, 0.0, ;, }, else, if, (, length, >, 1, ), {, double, accum, =, 0.0, ;]
[==, 1, ), {, var, =, 0.0, ;, }, else, if, (, length, >, 1, ), {, double, accum, =]
[), {, var, =, 0.0, ;, }, else, if, (, length, >, 1, ), {, double, accum, =, 0.0, ;]
[=, 0.0, ;, }, else, if, (, length, >, 1, ), {, double, accum, =, 0.0, ;, double, dev, =]
[;, }, else, if, (, length, >, 1, ), {, double, accum, =, 0.0, ;, double, dev, =, 0.0, ;]
[), {, double, accum, =, 0.0, ;, double, dev, =, 0.0, ;, double, accum2, =, 0.0, ;, for, (, int]
[>, 1, ), {, double, accum, =, 0.0, ;, double, dev, =, 0.0, ;, double, accum2, =, 0.0, ;, for]
[), {, double, accum, =, 0.0, ;, double, dev, =, 0.0, ;, double, accum2, =, 0.0, ;, for, (, int]
[;, double, dev, =, 0.0, ;, double, accum2, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <]
[;, double, accum2, =, 0.0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, dev, =]
[;, i, <, begin, +, length, ;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;]
[;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=, weights, [, i, ]]
[<, begin, +, length, ;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=]
[;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=, weights, [, i, ]]
[+, length, ;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=, weights, []
[;, i, ++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=, weights, [, i, ]]
[), {, dev, =, values, [, i, ], -, mean, ;, accum, +=, weights, [, i, ], *, (, dev]
[++, ), {, dev, =, values, [, i, ], -, mean, ;, accum, +=, weights, [, i, ], *, (]
[=, values, [, i, ], -, mean, ;, accum, +=, weights, [, i, ], *, (, dev, *, dev, )]
[;, accum, +=, weights, [, i, ], *, (, dev, *, dev, ), ;, accum2, +=, weights, [, i, ]]
[-, mean, ;, accum, +=, weights, [, i, ], *, (, dev, *, dev, ), ;, accum2, +=, weights, []
[[, i, ], -, mean, ;, accum, +=, weights, [, i, ], *, (, dev, *, dev, ), ;, accum2]
[], -, mean, ;, accum, +=, weights, [, i, ], *, (, dev, *, dev, ), ;, accum2, +=, weights]
[;, accum, +=, weights, [, i, ], *, (, dev, *, dev, ), ;, accum2, +=, weights, [, i, ]]
[+=, weights, [, i, ], *, (, dev, *, dev, ), ;, accum2, +=, weights, [, i, ], *, dev]
[;, accum2, +=, weights, [, i, ], *, dev, ;, }, double, sumWts, =, 0, ;, for, (, int, i]
[*, (, dev, *, dev, ), ;, accum2, +=, weights, [, i, ], *, dev, ;, }, double, sumWts, =]
[[, i, ], *, (, dev, *, dev, ), ;, accum2, +=, weights, [, i, ], *, dev, ;, }]
[], *, (, dev, *, dev, ), ;, accum2, +=, weights, [, i, ], *, dev, ;, }, double, sumWts]
[;, accum2, +=, weights, [, i, ], *, dev, ;, }, double, sumWts, =, 0, ;, for, (, int, i]
[), ;, accum2, +=, weights, [, i, ], *, dev, ;, }, double, sumWts, =, 0, ;, for, (, int]
[*, dev, ), ;, accum2, +=, weights, [, i, ], *, dev, ;, }, double, sumWts, =, 0, ;, for]
[), ;, accum2, +=, weights, [, i, ], *, dev, ;, }, double, sumWts, =, 0, ;, for, (, int]
[+=, weights, [, i, ], *, dev, ;, }, double, sumWts, =, 0, ;, for, (, int, i, =, begin]
[;, }, double, sumWts, =, 0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;]
[*, dev, ;, }, double, sumWts, =, 0, ;, for, (, int, i, =, begin, ;, i, <, begin, +]
[[, i, ], *, dev, ;, }, double, sumWts, =, 0, ;, for, (, int, i, =, begin, ;, i]
[], *, dev, ;, }, double, sumWts, =, 0, ;, for, (, int, i, =, begin, ;, i, <, begin]
[;, }, double, sumWts, =, 0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, sumWts, +=]
[;, i, <, begin, +, length, ;, i, ++, ), {, sumWts, +=, weights, [, i, ], ;, }, if]
[;, i, ++, ), {, sumWts, +=, weights, [, i, ], ;, }, if, (, isBiasCorrected, ), {, var, =]
[<, begin, +, length, ;, i, ++, ), {, sumWts, +=, weights, [, i, ], ;, }, if, (, isBiasCorrected]
[;, i, ++, ), {, sumWts, +=, weights, [, i, ], ;, }, if, (, isBiasCorrected, ), {, var, =]
[+, length, ;, i, ++, ), {, sumWts, +=, weights, [, i, ], ;, }, if, (, isBiasCorrected, ), {]
[;, i, ++, ), {, sumWts, +=, weights, [, i, ], ;, }, if, (, isBiasCorrected, ), {, var, =]
[), {, sumWts, +=, weights, [, i, ], ;, }, if, (, isBiasCorrected, ), {, var, =, (, accum, -]
[++, ), {, sumWts, +=, weights, [, i, ], ;, }, if, (, isBiasCorrected, ), {, var, =, (, accum]
[+=, weights, [, i, ], ;, }, if, (, isBiasCorrected, ), {, var, =, (, accum, -, (, accum2, *]
[;, }, if, (, isBiasCorrected, ), {, var, =, (, accum, -, (, accum2, *, accum2, /, sumWts, ), )]
[[, i, ], ;, }, if, (, isBiasCorrected, ), {, var, =, (, accum, -, (, accum2, *, accum2, /]
[], ;, }, if, (, isBiasCorrected, ), {, var, =, (, accum, -, (, accum2, *, accum2, /, sumWts, )]
[), {, var, =, (, accum, -, (, accum2, *, accum2, /, sumWts, ), ), /, (, sumWts, -, 1.0]
[=, (, accum, -, (, accum2, *, accum2, /, sumWts, ), ), /, (, sumWts, -, 1.0, ), ;, }]
[;, }, else, {, var, =, (, accum, -, (, accum2, *, accum2, /, sumWts, ), ), /, sumWts, ;]
[/, (, sumWts, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (, accum2, *, accum2, /]
[), /, (, sumWts, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (, accum2, *, accum2]
[-, (, accum2, *, accum2, /, sumWts, ), ), /, (, sumWts, -, 1.0, ), ;, }, else, {, var]
[), /, (, sumWts, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (, accum2, *, accum2]
[), ), /, (, sumWts, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (, accum2, *]
[/, sumWts, ), ), /, (, sumWts, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (]
[*, accum2, /, sumWts, ), ), /, (, sumWts, -, 1.0, ), ;, }, else, {, var, =, (, accum]
[/, sumWts, ), ), /, (, sumWts, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (]
[), ), /, (, sumWts, -, 1.0, ), ;, }, else, {, var, =, (, accum, -, (, accum2, *]
[;, }, else, {, var, =, (, accum, -, (, accum2, *, accum2, /, sumWts, ), ), /, sumWts, ;]
[), ;, }, else, {, var, =, (, accum, -, (, accum2, *, accum2, /, sumWts, ), ), /, sumWts]
[-, 1.0, ), ;, }, else, {, var, =, (, accum, -, (, accum2, *, accum2, /, sumWts, ), )]
[), ;, }, else, {, var, =, (, accum, -, (, accum2, *, accum2, /, sumWts, ), ), /, sumWts]
[=, (, accum, -, (, accum2, *, accum2, /, sumWts, ), ), /, sumWts, ;, }, }, }, return, var]
[;, }, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double]
[/, sumWts, ;, }, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ], values, ,]
[), /, sumWts, ;, }, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ], values]
[-, (, accum2, *, accum2, /, sumWts, ), ), /, sumWts, ;, }, }, }, return, var, ;, }, public]
[), /, sumWts, ;, }, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ], values]
[), ), /, sumWts, ;, }, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ]]
[/, sumWts, ), ), /, sumWts, ;, }, }, }, return, var, ;, }, public, double, evaluate, (, final, double]
[*, accum2, /, sumWts, ), ), /, sumWts, ;, }, }, }, return, var, ;, }, public, double, evaluate, (]
[/, sumWts, ), ), /, sumWts, ;, }, }, }, return, var, ;, }, public, double, evaluate, (, final, double]
[), ), /, sumWts, ;, }, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ]]
[;, }, }, }, return, var, ;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double]
[;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double, [, ], weights, ,, final, double]
[;, }, public, boolean, isBiasCorrected, (, ), {, return, isBiasCorrected, ;, }, public, void, setBiasCorrected, (, boolean, biasCorrected, ), {]
[,, weights, ,, mean, ,, 0, ,, values, ., length, ), ;, }, public, boolean, isBiasCorrected, (, ), {, return]
[,, mean, ,, 0, ,, values, ., length, ), ;, }, public, boolean, isBiasCorrected, (, ), {, return, isBiasCorrected, ;]
[,, 0, ,, values, ., length, ), ;, }, public, boolean, isBiasCorrected, (, ), {, return, isBiasCorrected, ;, }, public]
[,, values, ., length, ), ;, }, public, boolean, isBiasCorrected, (, ), {, return, isBiasCorrected, ;, }, public, void, setBiasCorrected]
[), ;, }, public, boolean, isBiasCorrected, (, ), {, return, isBiasCorrected, ;, }, public, void, setBiasCorrected, (, boolean, biasCorrected, )]
[., length, ), ;, }, public, boolean, isBiasCorrected, (, ), {, return, isBiasCorrected, ;, }, public, void, setBiasCorrected, (, boolean]
[;, }, public, void, setBiasCorrected, (, boolean, biasCorrected, ), {, this, ., isBiasCorrected, =, biasCorrected, ;, }, @, Override, public]
[=, biasCorrected, ;, }, @, Override, public, Variance, copy, (, ), {, Variance, result, =, new, Variance, (, ), ;]
[., isBiasCorrected, =, biasCorrected, ;, }, @, Override, public, Variance, copy, (, ), {, Variance, result, =, new, Variance, (]
[;, }, @, Override, public, Variance, copy, (, ), {, Variance, result, =, new, Variance, (, ), ;, copy, (]
[;, copy, (, this, ,, result, ), ;, return, result, ;, }, public, static, void, copy, (, Variance, source, ,]
[;, return, result, ;, }, public, static, void, copy, (, Variance, source, ,, Variance, dest, ), throws, NullArgumentException, {, MathUtils]
[,, result, ), ;, return, result, ;, }, public, static, void, copy, (, Variance, source, ,, Variance, dest, ), throws]
[), ;, return, result, ;, }, public, static, void, copy, (, Variance, source, ,, Variance, dest, ), throws, NullArgumentException, {]
[;, }, public, static, void, copy, (, Variance, source, ,, Variance, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest]
[., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef]
[), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;]
[;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., moment, =, source, ., moment, .]
[., checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., moment]
[), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., moment, =, source, ., moment]
[;, dest, ., moment, =, source, ., moment, ., copy, (, ), ;, dest, ., isBiasCorrected, =, source, ., isBiasCorrected]
[., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., moment, =, source, ., moment, ., copy, (]
[), ;, dest, ., moment, =, source, ., moment, ., copy, (, ), ;, dest, ., isBiasCorrected, =, source, .]
[., getDataRef, (, ), ), ;, dest, ., moment, =, source, ., moment, ., copy, (, ), ;, dest, .]
[=, source, ., moment, ., copy, (, ), ;, dest, ., isBiasCorrected, =, source, ., isBiasCorrected, ;, dest, ., incMoment]
[., moment, =, source, ., moment, ., copy, (, ), ;, dest, ., isBiasCorrected, =, source, ., isBiasCorrected, ;, dest]
[;, dest, ., isBiasCorrected, =, source, ., isBiasCorrected, ;, dest, ., incMoment, =, source, ., incMoment, ;, }, }]
[., copy, (, ), ;, dest, ., isBiasCorrected, =, source, ., isBiasCorrected, ;, dest, ., incMoment, =, source, ., incMoment]
[., moment, ., copy, (, ), ;, dest, ., isBiasCorrected, =, source, ., isBiasCorrected, ;, dest, ., incMoment, =, source]
[=, source, ., isBiasCorrected, ;, dest, ., incMoment, =, source, ., incMoment, ;, }, }]
[., isBiasCorrected, =, source, ., isBiasCorrected, ;, dest, ., incMoment, =, source, ., incMoment, ;, }, }]
[;, dest, ., incMoment, =, source, ., incMoment, ;, }, }]
[., isBiasCorrected, ;, dest, ., incMoment, =, source, ., incMoment, ;, }, }]
[=, source, ., incMoment, ;, }, }]
[., incMoment, =, source, ., incMoment, ;, }, }]
[;, }, }]
[., incMoment, ;, }, }]
