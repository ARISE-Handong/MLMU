[time, ., DateTimeFieldType, ;, import, org, ., joda, ., time, ., DurationField, ;, public, abstract, class, PreciseDurationDateTimeField, extends, BaseDateTimeField, {]
[;, import, org, ., joda, ., time, ., DurationField, ;, public, abstract, class, PreciseDurationDateTimeField, extends, BaseDateTimeField, {, @, SuppressWarnings, (]
[DurationField, ;, public, abstract, class, PreciseDurationDateTimeField, extends, BaseDateTimeField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long, serialVersionUID, =]
[long, iUnitMillis, ;, private, final, DurationField, iUnitField, ;, public, PreciseDurationDateTimeField, (, DateTimeFieldType, type, ,, DurationField, unit, ), {, super, (]
[DurationField, iUnitField, ;, public, PreciseDurationDateTimeField, (, DateTimeFieldType, type, ,, DurationField, unit, ), {, super, (, type, ), ;, if, (]
[iUnitField, ;, public, PreciseDurationDateTimeField, (, DateTimeFieldType, type, ,, DurationField, unit, ), {, super, (, type, ), ;, if, (, !]
[iUnitField, ;, public, PreciseDurationDateTimeField, (, DateTimeFieldType, type, ,, DurationField, unit, ), {, super, (, type, ), ;, if, (, !]
[DurationField, unit, ), {, super, (, type, ), ;, if, (, !, unit, ., isPrecise, (, ), ), {, throw]
[{, super, (, type, ), ;, if, (, !, unit, ., isPrecise, (, ), ), {, throw, new, IllegalArgumentException, (]
[), ;, if, (, !, unit, ., isPrecise, (, ), ), {, throw, new, IllegalArgumentException, (, "Unit duration field must be precise", ), ;, }]
[if, (, !, unit, ., isPrecise, (, ), ), {, throw, new, IllegalArgumentException, (, "Unit duration field must be precise", ), ;, }, iUnitMillis, =]
[if, (, !, unit, ., isPrecise, (, ), ), {, throw, new, IllegalArgumentException, (, "Unit duration field must be precise", ), ;, }, iUnitMillis, =]
[), {, throw, new, IllegalArgumentException, (, "Unit duration field must be precise", ), ;, }, iUnitMillis, =, unit, ., getUnitMillis, (, ), ;, if, (]
[), {, throw, new, IllegalArgumentException, (, "Unit duration field must be precise", ), ;, }, iUnitMillis, =, unit, ., getUnitMillis, (, ), ;, if, (]
[throw, new, IllegalArgumentException, (, "Unit duration field must be precise", ), ;, }, iUnitMillis, =, unit, ., getUnitMillis, (, ), ;, if, (, iUnitMillis, <]
["Unit duration field must be precise", ), ;, }, iUnitMillis, =, unit, ., getUnitMillis, (, ), ;, if, (, iUnitMillis, <, 1, ), {, throw]
[}, iUnitMillis, =, unit, ., getUnitMillis, (, ), ;, if, (, iUnitMillis, <, 1, ), {, throw, new, IllegalArgumentException, (]
[., getUnitMillis, (, ), ;, if, (, iUnitMillis, <, 1, ), {, throw, new, IllegalArgumentException, (, "The unit milliseconds must be at least 1", ), ;, }]
[(, ), ;, if, (, iUnitMillis, <, 1, ), {, throw, new, IllegalArgumentException, (, "The unit milliseconds must be at least 1", ), ;, }, iUnitField, =]
[throw, new, IllegalArgumentException, (, "The unit milliseconds must be at least 1", ), ;, }, iUnitField, =, unit, ;, }, public, boolean, isLenient, (, ), {, return]
[boolean, isLenient, (, ), {, return, false, ;, }, public, long, set, (, long, instant, ,, int, value, ), {]
[boolean, isLenient, (, ), {, return, false, ;, }, public, long, set, (, long, instant, ,, int, value, ), {]
[{, return, false, ;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (]
[false, ;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,]
[}, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,]
[(, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, getMinimumValue, (, ), ,]
[instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, getMinimumValue, (, ), ,, getMaximumValueForSet, (]
[int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, getMinimumValue, (, ), ,, getMaximumValueForSet, (, instant, ,]
[., verifyValueBounds, (, this, ,, value, ,, getMinimumValue, (, ), ,, getMaximumValueForSet, (, instant, ,, value, ), ), ;, return]
[., verifyValueBounds, (, this, ,, value, ,, getMinimumValue, (, ), ,, getMaximumValueForSet, (, instant, ,, value, ), ), ;, return]
[(, this, ,, value, ,, getMinimumValue, (, ), ,, getMaximumValueForSet, (, instant, ,, value, ), ), ;, return, instant, +]
[(, this, ,, value, ,, getMinimumValue, (, ), ,, getMaximumValueForSet, (, instant, ,, value, ), ), ;, return, instant, +]
[this, ,, value, ,, getMinimumValue, (, ), ,, getMaximumValueForSet, (, instant, ,, value, ), ), ;, return, instant, +, (]
[this, ,, value, ,, getMinimumValue, (, ), ,, getMaximumValueForSet, (, instant, ,, value, ), ), ;, return, instant, +, (]
[value, ,, getMinimumValue, (, ), ,, getMaximumValueForSet, (, instant, ,, value, ), ), ;, return, instant, +, (, value, -]
[getMinimumValue, (, ), ,, getMaximumValueForSet, (, instant, ,, value, ), ), ;, return, instant, +, (, value, -, get, (]
[getMaximumValueForSet, (, instant, ,, value, ), ), ;, return, instant, +, (, value, -, get, (, instant, ), ), *]
[-, get, (, instant, ), ), *, iUnitMillis, ;, }, public, long, roundFloor, (, long, instant, ), {, if, (]
[-, get, (, instant, ), ), *, iUnitMillis, ;, }, public, long, roundFloor, (, long, instant, ), {, if, (]
[(, instant, ), ), *, iUnitMillis, ;, }, public, long, roundFloor, (, long, instant, ), {, if, (, instant, >=]
[*, iUnitMillis, ;, }, public, long, roundFloor, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return]
[*, iUnitMillis, ;, }, public, long, roundFloor, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return]
[;, }, public, long, roundFloor, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return, instant, -]
[;, }, public, long, roundFloor, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return, instant, -]
[public, long, roundFloor, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return, instant, -, instant, %]
[instant, ), {, if, (, instant, >=, 0, ), {, return, instant, -, instant, %, iUnitMillis, ;, }, else, {]
[{, if, (, instant, >=, 0, ), {, return, instant, -, instant, %, iUnitMillis, ;, }, else, {, instant, +=]
[instant, >=, 0, ), {, return, instant, -, instant, %, iUnitMillis, ;, }, else, {, instant, +=, 1, ;, return]
[instant, >=, 0, ), {, return, instant, -, instant, %, iUnitMillis, ;, }, else, {, instant, +=, 1, ;, return]
[instant, >=, 0, ), {, return, instant, -, instant, %, iUnitMillis, ;, }, else, {, instant, +=, 1, ;, return]
[0, ), {, return, instant, -, instant, %, iUnitMillis, ;, }, else, {, instant, +=, 1, ;, return, instant, -]
[0, ), {, return, instant, -, instant, %, iUnitMillis, ;, }, else, {, instant, +=, 1, ;, return, instant, -]
[{, return, instant, -, instant, %, iUnitMillis, ;, }, else, {, instant, +=, 1, ;, return, instant, -, instant, %]
[instant, -, instant, %, iUnitMillis, ;, }, else, {, instant, +=, 1, ;, return, instant, -, instant, %, iUnitMillis, -]
[instant, -, instant, %, iUnitMillis, -, iUnitMillis, ;, }, }, public, long, roundCeiling, (, long, instant, ), {, if, (]
[instant, -, instant, %, iUnitMillis, -, iUnitMillis, ;, }, }, public, long, roundCeiling, (, long, instant, ), {, if, (]
[instant, %, iUnitMillis, -, iUnitMillis, ;, }, }, public, long, roundCeiling, (, long, instant, ), {, if, (, instant, >]
[-, iUnitMillis, ;, }, }, public, long, roundCeiling, (, long, instant, ), {, if, (, instant, >, 0, ), {]
[;, }, }, public, long, roundCeiling, (, long, instant, ), {, if, (, instant, >, 0, ), {, instant, -=]
[public, long, roundCeiling, (, long, instant, ), {, if, (, instant, >, 0, ), {, instant, -=, 1, ;, return]
[public, long, roundCeiling, (, long, instant, ), {, if, (, instant, >, 0, ), {, instant, -=, 1, ;, return]
[public, long, roundCeiling, (, long, instant, ), {, if, (, instant, >, 0, ), {, instant, -=, 1, ;, return]
[roundCeiling, (, long, instant, ), {, if, (, instant, >, 0, ), {, instant, -=, 1, ;, return, instant, -]
[roundCeiling, (, long, instant, ), {, if, (, instant, >, 0, ), {, instant, -=, 1, ;, return, instant, -]
[long, instant, ), {, if, (, instant, >, 0, ), {, instant, -=, 1, ;, return, instant, -, instant, %]
[), {, if, (, instant, >, 0, ), {, instant, -=, 1, ;, return, instant, -, instant, %, iUnitMillis, +]
[0, ), {, instant, -=, 1, ;, return, instant, -, instant, %, iUnitMillis, +, iUnitMillis, ;, }, else, {, return]
[0, ), {, instant, -=, 1, ;, return, instant, -, instant, %, iUnitMillis, +, iUnitMillis, ;, }, else, {, return]
[{, instant, -=, 1, ;, return, instant, -, instant, %, iUnitMillis, +, iUnitMillis, ;, }, else, {, return, instant, -]
[{, instant, -=, 1, ;, return, instant, -, instant, %, iUnitMillis, +, iUnitMillis, ;, }, else, {, return, instant, -]
[-=, 1, ;, return, instant, -, instant, %, iUnitMillis, +, iUnitMillis, ;, }, else, {, return, instant, -, instant, %]
[{, return, instant, -, instant, %, iUnitMillis, ;, }, }, public, long, remainder, (, long, instant, ), {, if, (]
[{, return, instant, -, instant, %, iUnitMillis, ;, }, }, public, long, remainder, (, long, instant, ), {, if, (]
[instant, -, instant, %, iUnitMillis, ;, }, }, public, long, remainder, (, long, instant, ), {, if, (, instant, >=]
[iUnitMillis, ;, }, }, public, long, remainder, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return]
[iUnitMillis, ;, }, }, public, long, remainder, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return]
[}, }, public, long, remainder, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return, instant, %]
[long, instant, ), {, if, (, instant, >=, 0, ), {, return, instant, %, iUnitMillis, ;, }, else, {, return]
[long, instant, ), {, if, (, instant, >=, 0, ), {, return, instant, %, iUnitMillis, ;, }, else, {, return]
[long, instant, ), {, if, (, instant, >=, 0, ), {, return, instant, %, iUnitMillis, ;, }, else, {, return]
[long, instant, ), {, if, (, instant, >=, 0, ), {, return, instant, %, iUnitMillis, ;, }, else, {, return]
[instant, ), {, if, (, instant, >=, 0, ), {, return, instant, %, iUnitMillis, ;, }, else, {, return, (]
[instant, ), {, if, (, instant, >=, 0, ), {, return, instant, %, iUnitMillis, ;, }, else, {, return, (]
[{, if, (, instant, >=, 0, ), {, return, instant, %, iUnitMillis, ;, }, else, {, return, (, instant, +]
[instant, >=, 0, ), {, return, instant, %, iUnitMillis, ;, }, else, {, return, (, instant, +, 1, ), %]
[0, ), {, return, instant, %, iUnitMillis, ;, }, else, {, return, (, instant, +, 1, ), %, iUnitMillis, +]
[{, return, instant, %, iUnitMillis, ;, }, else, {, return, (, instant, +, 1, ), %, iUnitMillis, +, iUnitMillis, -]
[instant, +, 1, ), %, iUnitMillis, +, iUnitMillis, -, 1, ;, }, }, public, DurationField, getDurationField, (, ), {, return]
[;, }, }, public, DurationField, getDurationField, (, ), {, return, iUnitField, ;, }, public, int, getMinimumValue, (, ), {, return]
[;, }, public, int, getMinimumValue, (, ), {, return, 0, ;, }, public, final, long, getUnitMillis, (, ), {, return]
[getUnitMillis, (, ), {, return, iUnitMillis, ;, }, protected, int, getMaximumValueForSet, (, long, instant, ,, int, value, ), {, return]
[), {, return, iUnitMillis, ;, }, protected, int, getMaximumValueForSet, (, long, instant, ,, int, value, ), {, return, getMaximumValue, (]
