[;, public, static, final, CharRanges, ALL_CODE_UNITS, =, new, CharRanges, (, new, int, [, ], {, 0, ,, 0x10000, }, )]
[), ;, public, static, final, CharRanges, ALL_CODE_UNITS, =, new, CharRanges, (, new, int, [, ], {, 0, ,, 0x10000, }]
[], ), ;, public, static, final, CharRanges, ALL_CODE_UNITS, =, new, CharRanges, (, new, int, [, ], {, 0, ,, 0x10000]
[;, public, static, CharRanges, inclusive, (, int, start, ,, int, end, ), {, if, (, start, >, end, ), {]
[), ;, public, static, CharRanges, inclusive, (, int, start, ,, int, end, ), {, if, (, start, >, end, )]
[), ;, public, static, CharRanges, inclusive, (, int, start, ,, int, end, ), {, if, (, start, >, end, )]
[,, 0x10000, }, ), ;, public, static, CharRanges, inclusive, (, int, start, ,, int, end, ), {, if, (, start]
[}, ), ;, public, static, CharRanges, inclusive, (, int, start, ,, int, end, ), {, if, (, start, >, end]
[), {, throw, new, IndexOutOfBoundsException, (, start, +, " > ", +, end, ), ;, }, return, new, CharRanges, (, new, int]
[>, end, ), {, throw, new, IndexOutOfBoundsException, (, start, +, " > ", +, end, ), ;, }, return, new, CharRanges, (]
[), {, throw, new, IndexOutOfBoundsException, (, start, +, " > ", +, end, ), ;, }, return, new, CharRanges, (, new, int]
[;, }, return, new, CharRanges, (, new, int, [, ], {, start, ,, end, +, 1, }, ), ;, }]
[), ;, }, return, new, CharRanges, (, new, int, [, ], {, start, ,, end, +, 1, }, ), ;]
[+, end, ), ;, }, return, new, CharRanges, (, new, int, [, ], {, start, ,, end, +, 1, }]
[+, " > ", +, end, ), ;, }, return, new, CharRanges, (, new, int, [, ], {, start, ,, end, +]
[+, end, ), ;, }, return, new, CharRanges, (, new, int, [, ], {, start, ,, end, +, 1, }]
[), ;, }, return, new, CharRanges, (, new, int, [, ], {, start, ,, end, +, 1, }, ), ;]
[;, }, public, static, CharRanges, withMembers, (, int, ..., members, ), {, return, new, CharRanges, (, intArrayToRanges, (, members, .]
[), ;, }, public, static, CharRanges, withMembers, (, int, ..., members, ), {, return, new, CharRanges, (, intArrayToRanges, (, members]
[), ;, }, public, static, CharRanges, withMembers, (, int, ..., members, ), {, return, new, CharRanges, (, intArrayToRanges, (, members]
[,, end, +, 1, }, ), ;, }, public, static, CharRanges, withMembers, (, int, ..., members, ), {, return, new]
[}, ), ;, }, public, static, CharRanges, withMembers, (, int, ..., members, ), {, return, new, CharRanges, (, intArrayToRanges, (]
[+, 1, }, ), ;, }, public, static, CharRanges, withMembers, (, int, ..., members, ), {, return, new, CharRanges, (]
[}, ), ;, }, public, static, CharRanges, withMembers, (, int, ..., members, ), {, return, new, CharRanges, (, intArrayToRanges, (]
[;, }, public, static, CharRanges, withRanges, (, int, ..., ranges, ), {, ranges, =, ranges, ., clone, (, ), ;]
[), ;, }, public, static, CharRanges, withRanges, (, int, ..., ranges, ), {, ranges, =, ranges, ., clone, (, )]
[), ), ;, }, public, static, CharRanges, withRanges, (, int, ..., ranges, ), {, ranges, =, ranges, ., clone, (]
[., clone, (, ), ), ), ;, }, public, static, CharRanges, withRanges, (, int, ..., ranges, ), {, ranges, =]
[=, ranges, ., clone, (, ), ;, if, (, (, ranges, ., length, &, 1, ), !=, 0, ), {]
[;, if, (, (, ranges, ., length, &, 1, ), !=, 0, ), {, throw, new, IllegalArgumentException, (, ), ;]
[., clone, (, ), ;, if, (, (, ranges, ., length, &, 1, ), !=, 0, ), {, throw, new]
[), {, throw, new, IllegalArgumentException, (, ), ;, }, for, (, int, i, =, 1, ;, i, <, ranges, .]
[!=, 0, ), {, throw, new, IllegalArgumentException, (, ), ;, }, for, (, int, i, =, 1, ;, i, <]
[), !=, 0, ), {, throw, new, IllegalArgumentException, (, ), ;, }, for, (, int, i, =, 1, ;, i]
[&, 1, ), !=, 0, ), {, throw, new, IllegalArgumentException, (, ), ;, }, for, (, int, i, =, 1]
[., length, &, 1, ), !=, 0, ), {, throw, new, IllegalArgumentException, (, ), ;, }, for, (, int, i]
[), !=, 0, ), {, throw, new, IllegalArgumentException, (, ), ;, }, for, (, int, i, =, 1, ;, i]
[), {, throw, new, IllegalArgumentException, (, ), ;, }, for, (, int, i, =, 1, ;, i, <, ranges, .]
[;, }, for, (, int, i, =, 1, ;, i, <, ranges, ., length, ;, ++, i, ), {, if]
[;, i, <, ranges, ., length, ;, ++, i, ), {, if, (, ranges, [, i, ], <=, ranges, []
[;, ++, i, ), {, if, (, ranges, [, i, ], <=, ranges, [, i, -, 1, ], ), {]
[<, ranges, ., length, ;, ++, i, ), {, if, (, ranges, [, i, ], <=, ranges, [, i, -]
[;, ++, i, ), {, if, (, ranges, [, i, ], <=, ranges, [, i, -, 1, ], ), {]
[., length, ;, ++, i, ), {, if, (, ranges, [, i, ], <=, ranges, [, i, -, 1, ]]
[), {, if, (, ranges, [, i, ], <=, ranges, [, i, -, 1, ], ), {, throw, new, IllegalArgumentException]
[), {, if, (, ranges, [, i, ], <=, ranges, [, i, -, 1, ], ), {, throw, new, IllegalArgumentException]
[), {, throw, new, IllegalArgumentException, (, ranges, [, i, ], +, " > ", +, ranges, [, i, -, 1, ], )]
[<=, ranges, [, i, -, 1, ], ), {, throw, new, IllegalArgumentException, (, ranges, [, i, ], +, " > ", +]
[[, i, ], <=, ranges, [, i, -, 1, ], ), {, throw, new, IllegalArgumentException, (, ranges, [, i, ]]
[], <=, ranges, [, i, -, 1, ], ), {, throw, new, IllegalArgumentException, (, ranges, [, i, ], +, " > "]
[), {, throw, new, IllegalArgumentException, (, ranges, [, i, ], +, " > ", +, ranges, [, i, -, 1, ], )]
[[, i, -, 1, ], ), {, throw, new, IllegalArgumentException, (, ranges, [, i, ], +, " > ", +, ranges, []
[], ), {, throw, new, IllegalArgumentException, (, ranges, [, i, ], +, " > ", +, ranges, [, i, -, 1, ]]
[-, 1, ], ), {, throw, new, IllegalArgumentException, (, ranges, [, i, ], +, " > ", +, ranges, [, i, -]
[], ), {, throw, new, IllegalArgumentException, (, ranges, [, i, ], +, " > ", +, ranges, [, i, -, 1, ]]
[;, }, }, return, new, CharRanges, (, ranges, ), ;, }, private, CharRanges, (, int, [, ], ranges, ), {]
[), ;, }, }, return, new, CharRanges, (, ranges, ), ;, }, private, CharRanges, (, int, [, ], ranges, )]
[+, ranges, [, i, -, 1, ], ), ;, }, }, return, new, CharRanges, (, ranges, ), ;, }, private]
[+, " > ", +, ranges, [, i, -, 1, ], ), ;, }, }, return, new, CharRanges, (, ranges, ), ;]
[[, i, ], +, " > ", +, ranges, [, i, -, 1, ], ), ;, }, }, return, new, CharRanges, (]
[], +, " > ", +, ranges, [, i, -, 1, ], ), ;, }, }, return, new, CharRanges, (, ranges, )]
[+, ranges, [, i, -, 1, ], ), ;, }, }, return, new, CharRanges, (, ranges, ), ;, }, private]
[), ;, }, }, return, new, CharRanges, (, ranges, ), ;, }, private, CharRanges, (, int, [, ], ranges, )]
[[, i, -, 1, ], ), ;, }, }, return, new, CharRanges, (, ranges, ), ;, }, private, CharRanges, (]
[], ), ;, }, }, return, new, CharRanges, (, ranges, ), ;, }, private, CharRanges, (, int, [, ], ranges]
[-, 1, ], ), ;, }, }, return, new, CharRanges, (, ranges, ), ;, }, private, CharRanges, (, int, []
[], ), ;, }, }, return, new, CharRanges, (, ranges, ), ;, }, private, CharRanges, (, int, [, ], ranges]
[;, }, private, CharRanges, (, int, [, ], ranges, ), {, this, ., ranges, =, ranges, ;, }, private, static]
[), ;, }, private, CharRanges, (, int, [, ], ranges, ), {, this, ., ranges, =, ranges, ;, }, private]
[=, ranges, ;, }, private, static, int, [, ], intArrayToRanges, (, int, [, ], members, ), {, int, nMembers, =]
[., ranges, =, ranges, ;, }, private, static, int, [, ], intArrayToRanges, (, int, [, ], members, ), {, int]
[;, }, private, static, int, [, ], intArrayToRanges, (, int, [, ], members, ), {, int, nMembers, =, members, .]
[;, if, (, nMembers, ==, 0, ), {, return, new, int, [, 0, ], ;, }, Arrays, ., sort, (]
[., length, ;, if, (, nMembers, ==, 0, ), {, return, new, int, [, 0, ], ;, }, Arrays, .]
[), {, return, new, int, [, 0, ], ;, }, Arrays, ., sort, (, members, ), ;, int, nRuns, =]
[==, 0, ), {, return, new, int, [, 0, ], ;, }, Arrays, ., sort, (, members, ), ;, int]
[), {, return, new, int, [, 0, ], ;, }, Arrays, ., sort, (, members, ), ;, int, nRuns, =]
[;, }, Arrays, ., sort, (, members, ), ;, int, nRuns, =, 1, ;, for, (, int, i, =, 1]
[], ;, }, Arrays, ., sort, (, members, ), ;, int, nRuns, =, 1, ;, for, (, int, i, =]
[;, int, nRuns, =, 1, ;, for, (, int, i, =, 1, ;, i, <, nMembers, ;, ++, i, )]
[., sort, (, members, ), ;, int, nRuns, =, 1, ;, for, (, int, i, =, 1, ;, i, <]
[), ;, int, nRuns, =, 1, ;, for, (, int, i, =, 1, ;, i, <, nMembers, ;, ++, i]
[;, for, (, int, i, =, 1, ;, i, <, nMembers, ;, ++, i, ), {, int, current, =, members]
[;, i, <, nMembers, ;, ++, i, ), {, int, current, =, members, [, i, ], ,, last, =, members]
[;, ++, i, ), {, int, current, =, members, [, i, ], ,, last, =, members, [, i, -, 1]
[<, nMembers, ;, ++, i, ), {, int, current, =, members, [, i, ], ,, last, =, members, [, i]
[;, ++, i, ), {, int, current, =, members, [, i, ], ,, last, =, members, [, i, -, 1]
[), {, int, current, =, members, [, i, ], ,, last, =, members, [, i, -, 1, ], ;, if]
[), {, int, current, =, members, [, i, ], ,, last, =, members, [, i, -, 1, ], ;, if]
[,, last, =, members, [, i, -, 1, ], ;, if, (, current, ==, last, ), {, continue, ;, }]
[[, i, ], ,, last, =, members, [, i, -, 1, ], ;, if, (, current, ==, last, ), {]
[], ,, last, =, members, [, i, -, 1, ], ;, if, (, current, ==, last, ), {, continue, ;]
[;, if, (, current, ==, last, ), {, continue, ;, }, if, (, current, !=, last, +, 1, ), {]
[[, i, -, 1, ], ;, if, (, current, ==, last, ), {, continue, ;, }, if, (, current, !=]
[], ;, if, (, current, ==, last, ), {, continue, ;, }, if, (, current, !=, last, +, 1, )]
[-, 1, ], ;, if, (, current, ==, last, ), {, continue, ;, }, if, (, current, !=, last, +]
[], ;, if, (, current, ==, last, ), {, continue, ;, }, if, (, current, !=, last, +, 1, )]
[), {, continue, ;, }, if, (, current, !=, last, +, 1, ), {, ++, nRuns, ;, }, }, int]
[==, last, ), {, continue, ;, }, if, (, current, !=, last, +, 1, ), {, ++, nRuns, ;, }]
[), {, continue, ;, }, if, (, current, !=, last, +, 1, ), {, ++, nRuns, ;, }, }, int]
[), {, ++, nRuns, ;, }, }, int, [, ], ranges, =, new, int, [, nRuns, *, 2, ], ;]
[!=, last, +, 1, ), {, ++, nRuns, ;, }, }, int, [, ], ranges, =, new, int, [, nRuns]
[), {, ++, nRuns, ;, }, }, int, [, ], ranges, =, new, int, [, nRuns, *, 2, ], ;]
[+, 1, ), {, ++, nRuns, ;, }, }, int, [, ], ranges, =, new, int, [, nRuns, *, 2]
[), {, ++, nRuns, ;, }, }, int, [, ], ranges, =, new, int, [, nRuns, *, 2, ], ;]
[;, }, }, int, [, ], ranges, =, new, int, [, nRuns, *, 2, ], ;, ranges, [, 0, ]]
[;, }, }, int, [, ], ranges, =, new, int, [, nRuns, *, 2, ], ;, ranges, [, 0, ]]
[;, ranges, [, 0, ], =, members, [, 0, ], ;, int, k, =, 0, ;, for, (, int, i]
[], ;, ranges, [, 0, ], =, members, [, 0, ], ;, int, k, =, 0, ;, for, (, int]
[*, 2, ], ;, ranges, [, 0, ], =, members, [, 0, ], ;, int, k, =, 0, ;, for]
[], ;, ranges, [, 0, ], =, members, [, 0, ], ;, int, k, =, 0, ;, for, (, int]
[=, members, [, 0, ], ;, int, k, =, 0, ;, for, (, int, i, =, 1, ;, k, +]
[[, 0, ], =, members, [, 0, ], ;, int, k, =, 0, ;, for, (, int, i, =, 1]
[], =, members, [, 0, ], ;, int, k, =, 0, ;, for, (, int, i, =, 1, ;, k]
[;, int, k, =, 0, ;, for, (, int, i, =, 1, ;, k, +, 2, <, ranges, ., length]
[[, 0, ], ;, int, k, =, 0, ;, for, (, int, i, =, 1, ;, k, +, 2, <]
[], ;, int, k, =, 0, ;, for, (, int, i, =, 1, ;, k, +, 2, <, ranges, .]
[;, for, (, int, i, =, 1, ;, k, +, 2, <, ranges, ., length, ;, ++, i, ), {]
[;, k, +, 2, <, ranges, ., length, ;, ++, i, ), {, int, current, =, members, [, i, ]]
[;, ++, i, ), {, int, current, =, members, [, i, ], ,, last, =, members, [, i, -, 1]
[<, ranges, ., length, ;, ++, i, ), {, int, current, =, members, [, i, ], ,, last, =, members]
[+, 2, <, ranges, ., length, ;, ++, i, ), {, int, current, =, members, [, i, ], ,, last]
[<, ranges, ., length, ;, ++, i, ), {, int, current, =, members, [, i, ], ,, last, =, members]
[;, ++, i, ), {, int, current, =, members, [, i, ], ,, last, =, members, [, i, -, 1]
[., length, ;, ++, i, ), {, int, current, =, members, [, i, ], ,, last, =, members, [, i]
[), {, int, current, =, members, [, i, ], ,, last, =, members, [, i, -, 1, ], ;, if]
[), {, int, current, =, members, [, i, ], ,, last, =, members, [, i, -, 1, ], ;, if]
[,, last, =, members, [, i, -, 1, ], ;, if, (, current, ==, last, ), {, continue, ;, }]
[[, i, ], ,, last, =, members, [, i, -, 1, ], ;, if, (, current, ==, last, ), {]
[], ,, last, =, members, [, i, -, 1, ], ;, if, (, current, ==, last, ), {, continue, ;]
[;, if, (, current, ==, last, ), {, continue, ;, }, if, (, current, !=, last, +, 1, ), {]
[[, i, -, 1, ], ;, if, (, current, ==, last, ), {, continue, ;, }, if, (, current, !=]
[], ;, if, (, current, ==, last, ), {, continue, ;, }, if, (, current, !=, last, +, 1, )]
[-, 1, ], ;, if, (, current, ==, last, ), {, continue, ;, }, if, (, current, !=, last, +]
[], ;, if, (, current, ==, last, ), {, continue, ;, }, if, (, current, !=, last, +, 1, )]
[), {, continue, ;, }, if, (, current, !=, last, +, 1, ), {, ranges, [, ++, k, ], =]
[==, last, ), {, continue, ;, }, if, (, current, !=, last, +, 1, ), {, ranges, [, ++, k]
[), {, continue, ;, }, if, (, current, !=, last, +, 1, ), {, ranges, [, ++, k, ], =]
[), {, ranges, [, ++, k, ], =, last, +, 1, ;, ranges, [, ++, k, ], =, current, ;]
[!=, last, +, 1, ), {, ranges, [, ++, k, ], =, last, +, 1, ;, ranges, [, ++, k]
[), {, ranges, [, ++, k, ], =, last, +, 1, ;, ranges, [, ++, k, ], =, current, ;]
[+, 1, ), {, ranges, [, ++, k, ], =, last, +, 1, ;, ranges, [, ++, k, ], =]
[), {, ranges, [, ++, k, ], =, last, +, 1, ;, ranges, [, ++, k, ], =, current, ;]
[=, last, +, 1, ;, ranges, [, ++, k, ], =, current, ;, }, }, ranges, [, ++, k, ]]
[[, ++, k, ], =, last, +, 1, ;, ranges, [, ++, k, ], =, current, ;, }, }, ranges]
[], =, last, +, 1, ;, ranges, [, ++, k, ], =, current, ;, }, }, ranges, [, ++, k]
[], =, last, +, 1, ;, ranges, [, ++, k, ], =, current, ;, }, }, ranges, [, ++, k]
[;, ranges, [, ++, k, ], =, current, ;, }, }, ranges, [, ++, k, ], =, members, [, nMembers]
[+, 1, ;, ranges, [, ++, k, ], =, current, ;, }, }, ranges, [, ++, k, ], =, members]
[;, ranges, [, ++, k, ], =, current, ;, }, }, ranges, [, ++, k, ], =, members, [, nMembers]
[=, current, ;, }, }, ranges, [, ++, k, ], =, members, [, nMembers, -, 1, ], +, 1, ;]
[[, ++, k, ], =, current, ;, }, }, ranges, [, ++, k, ], =, members, [, nMembers, -, 1]
[], =, current, ;, }, }, ranges, [, ++, k, ], =, members, [, nMembers, -, 1, ], +, 1]
[], =, current, ;, }, }, ranges, [, ++, k, ], =, members, [, nMembers, -, 1, ], +, 1]
[;, }, }, ranges, [, ++, k, ], =, members, [, nMembers, -, 1, ], +, 1, ;, return, ranges]
[=, members, [, nMembers, -, 1, ], +, 1, ;, return, ranges, ;, }, public, boolean, contains, (, int, bit]
[[, ++, k, ], =, members, [, nMembers, -, 1, ], +, 1, ;, return, ranges, ;, }, public, boolean]
[], =, members, [, nMembers, -, 1, ], +, 1, ;, return, ranges, ;, }, public, boolean, contains, (, int]
[], =, members, [, nMembers, -, 1, ], +, 1, ;, return, ranges, ;, }, public, boolean, contains, (, int]
[;, return, ranges, ;, }, public, boolean, contains, (, int, bit, ), {, return, (, Arrays, ., binarySearch, (, ranges]
[+, 1, ;, return, ranges, ;, }, public, boolean, contains, (, int, bit, ), {, return, (, Arrays, ., binarySearch]
[[, nMembers, -, 1, ], +, 1, ;, return, ranges, ;, }, public, boolean, contains, (, int, bit, ), {]
[], +, 1, ;, return, ranges, ;, }, public, boolean, contains, (, int, bit, ), {, return, (, Arrays, .]
[-, 1, ], +, 1, ;, return, ranges, ;, }, public, boolean, contains, (, int, bit, ), {, return, (]
[], +, 1, ;, return, ranges, ;, }, public, boolean, contains, (, int, bit, ), {, return, (, Arrays, .]
[;, return, ranges, ;, }, public, boolean, contains, (, int, bit, ), {, return, (, Arrays, ., binarySearch, (, ranges]
[;, }, public, boolean, contains, (, int, bit, ), {, return, (, Arrays, ., binarySearch, (, ranges, ,, bit, )]
[;, }, public, int, minSetBit, (, ), {, return, ranges, ., length, >=, 0, ?, ranges, [, 0, ], :]
[==, 0, ;, }, public, int, minSetBit, (, ), {, return, ranges, ., length, >=, 0, ?, ranges, [, 0]
[), ==, 0, ;, }, public, int, minSetBit, (, ), {, return, ranges, ., length, >=, 0, ?, ranges, []
[&, 1, ), ==, 0, ;, }, public, int, minSetBit, (, ), {, return, ranges, ., length, >=, 0, ?]
[., binarySearch, (, ranges, ,, bit, ), &, 1, ), ==, 0, ;, }, public, int, minSetBit, (, ), {]
[,, bit, ), &, 1, ), ==, 0, ;, }, public, int, minSetBit, (, ), {, return, ranges, ., length]
[), &, 1, ), ==, 0, ;, }, public, int, minSetBit, (, ), {, return, ranges, ., length, >=, 0]
[), ==, 0, ;, }, public, int, minSetBit, (, ), {, return, ranges, ., length, >=, 0, ?, ranges, []
[;, }, public, int, minSetBit, (, ), {, return, ranges, ., length, >=, 0, ?, ranges, [, 0, ], :]
[;, }, public, boolean, isEmpty, (, ), {, return, ranges, ., length, ==, 0, ;, }, public, int, getNumRanges, (]
[?, ranges, [, 0, ], :, Integer, ., MIN_VALUE, ;, }, public, boolean, isEmpty, (, ), {, return, ranges, .]
[>=, 0, ?, ranges, [, 0, ], :, Integer, ., MIN_VALUE, ;, }, public, boolean, isEmpty, (, ), {, return]
[., length, >=, 0, ?, ranges, [, 0, ], :, Integer, ., MIN_VALUE, ;, }, public, boolean, isEmpty, (, )]
[?, ranges, [, 0, ], :, Integer, ., MIN_VALUE, ;, }, public, boolean, isEmpty, (, ), {, return, ranges, .]
[:, Integer, ., MIN_VALUE, ;, }, public, boolean, isEmpty, (, ), {, return, ranges, ., length, ==, 0, ;, }]
[[, 0, ], :, Integer, ., MIN_VALUE, ;, }, public, boolean, isEmpty, (, ), {, return, ranges, ., length, ==]
[], :, Integer, ., MIN_VALUE, ;, }, public, boolean, isEmpty, (, ), {, return, ranges, ., length, ==, 0, ;]
[;, }, public, boolean, isEmpty, (, ), {, return, ranges, ., length, ==, 0, ;, }, public, int, getNumRanges, (]
[., MIN_VALUE, ;, }, public, boolean, isEmpty, (, ), {, return, ranges, ., length, ==, 0, ;, }, public, int]
[;, }, public, int, getNumRanges, (, ), {, return, ranges, ., length, >, >, 1, ;, }, public, int, start]
[==, 0, ;, }, public, int, getNumRanges, (, ), {, return, ranges, ., length, >, >, 1, ;, }, public]
[., length, ==, 0, ;, }, public, int, getNumRanges, (, ), {, return, ranges, ., length, >, >, 1, ;]
[;, }, public, int, getNumRanges, (, ), {, return, ranges, ., length, >, >, 1, ;, }, public, int, start]
[;, }, public, int, start, (, int, i, ), {, return, ranges, [, i, <<, 1, ], ;, }, public]
[>, >, 1, ;, }, public, int, start, (, int, i, ), {, return, ranges, [, i, <<, 1, ]]
[., length, >, >, 1, ;, }, public, int, start, (, int, i, ), {, return, ranges, [, i, <<]
[;, }, public, int, start, (, int, i, ), {, return, ranges, [, i, <<, 1, ], ;, }, public]
[;, }, public, int, end, (, int, i, ), {, return, ranges, [, (, i, <<, 1, ), |, 1]
[[, i, <<, 1, ], ;, }, public, int, end, (, int, i, ), {, return, ranges, [, (, i]
[], ;, }, public, int, end, (, int, i, ), {, return, ranges, [, (, i, <<, 1, ), |]
[<<, 1, ], ;, }, public, int, end, (, int, i, ), {, return, ranges, [, (, i, <<, 1]
[], ;, }, public, int, end, (, int, i, ), {, return, ranges, [, (, i, <<, 1, ), |]
[;, }, public, CharRanges, union, (, CharRanges, other, ), {, int, [, ], q, =, this, ., ranges, ,, r]
[[, (, i, <<, 1, ), |, 1, ], ;, }, public, CharRanges, union, (, CharRanges, other, ), {, int]
[], ;, }, public, CharRanges, union, (, CharRanges, other, ), {, int, [, ], q, =, this, ., ranges, ,]
[|, 1, ], ;, }, public, CharRanges, union, (, CharRanges, other, ), {, int, [, ], q, =, this, .]
[), |, 1, ], ;, }, public, CharRanges, union, (, CharRanges, other, ), {, int, [, ], q, =, this]
[<<, 1, ), |, 1, ], ;, }, public, CharRanges, union, (, CharRanges, other, ), {, int, [, ], q]
[), |, 1, ], ;, }, public, CharRanges, union, (, CharRanges, other, ), {, int, [, ], q, =, this]
[], ;, }, public, CharRanges, union, (, CharRanges, other, ), {, int, [, ], q, =, this, ., ranges, ,]
[,, r, =, other, ., ranges, ;, int, m, =, q, ., length, ,, n, =, r, ., length, ;]
[., ranges, ,, r, =, other, ., ranges, ;, int, m, =, q, ., length, ,, n, =, r, .]
[;, int, m, =, q, ., length, ,, n, =, r, ., length, ;, if, (, m, ==, 0, )]
[., ranges, ;, int, m, =, q, ., length, ,, n, =, r, ., length, ;, if, (, m, ==]
[,, n, =, r, ., length, ;, if, (, m, ==, 0, ), {, return, other, ;, }, if, (]
[., length, ,, n, =, r, ., length, ;, if, (, m, ==, 0, ), {, return, other, ;, }]
[;, if, (, m, ==, 0, ), {, return, other, ;, }, if, (, n, ==, 0, ), {, return]
[., length, ;, if, (, m, ==, 0, ), {, return, other, ;, }, if, (, n, ==, 0, )]
[), {, return, other, ;, }, if, (, n, ==, 0, ), {, return, this, ;, }, int, [, ]]
[==, 0, ), {, return, other, ;, }, if, (, n, ==, 0, ), {, return, this, ;, }, int]
[), {, return, other, ;, }, if, (, n, ==, 0, ), {, return, this, ;, }, int, [, ]]
[;, }, if, (, n, ==, 0, ), {, return, this, ;, }, int, [, ], out, =, new, int]
[), {, return, this, ;, }, int, [, ], out, =, new, int, [, m, +, n, ], ;, int]
[==, 0, ), {, return, this, ;, }, int, [, ], out, =, new, int, [, m, +, n, ]]
[), {, return, this, ;, }, int, [, ], out, =, new, int, [, m, +, n, ], ;, int]
[;, }, int, [, ], out, =, new, int, [, m, +, n, ], ;, int, i, =, 0, ,]
[;, int, i, =, 0, ,, j, =, 0, ,, k, =, 0, ;, while, (, i, <, m, &&]
[], ;, int, i, =, 0, ,, j, =, 0, ,, k, =, 0, ;, while, (, i, <, m]
[+, n, ], ;, int, i, =, 0, ,, j, =, 0, ,, k, =, 0, ;, while, (, i]
[], ;, int, i, =, 0, ,, j, =, 0, ,, k, =, 0, ;, while, (, i, <, m]
[,, j, =, 0, ,, k, =, 0, ;, while, (, i, <, m, &&, j, <, n, ), {]
[,, k, =, 0, ;, while, (, i, <, m, &&, j, <, n, ), {, int, a0, =, q]
[;, while, (, i, <, m, &&, j, <, n, ), {, int, a0, =, q, [, i, ], ,]
[), {, int, a0, =, q, [, i, ], ,, a1, =, q, [, i, +, 1, ], ,, b0]
[&&, j, <, n, ), {, int, a0, =, q, [, i, ], ,, a1, =, q, [, i, +]
[<, m, &&, j, <, n, ), {, int, a0, =, q, [, i, ], ,, a1, =, q, []
[&&, j, <, n, ), {, int, a0, =, q, [, i, ], ,, a1, =, q, [, i, +]
[), {, int, a0, =, q, [, i, ], ,, a1, =, q, [, i, +, 1, ], ,, b0]
[<, n, ), {, int, a0, =, q, [, i, ], ,, a1, =, q, [, i, +, 1, ]]
[), {, int, a0, =, q, [, i, ], ,, a1, =, q, [, i, +, 1, ], ,, b0]
[,, a1, =, q, [, i, +, 1, ], ,, b0, =, r, [, j, ], ,, b1, =, r]
[[, i, ], ,, a1, =, q, [, i, +, 1, ], ,, b0, =, r, [, j, ], ,]
[], ,, a1, =, q, [, i, +, 1, ], ,, b0, =, r, [, j, ], ,, b1, =]
[,, b0, =, r, [, j, ], ,, b1, =, r, [, j, +, 1, ], ;, if, (, a1]
[[, i, +, 1, ], ,, b0, =, r, [, j, ], ,, b1, =, r, [, j, +, 1]
[], ,, b0, =, r, [, j, ], ,, b1, =, r, [, j, +, 1, ], ;, if, (]
[+, 1, ], ,, b0, =, r, [, j, ], ,, b1, =, r, [, j, +, 1, ], ;]
[], ,, b0, =, r, [, j, ], ,, b1, =, r, [, j, +, 1, ], ;, if, (]
[,, b1, =, r, [, j, +, 1, ], ;, if, (, a1, <, b0, ), {, out, [, k]
[[, j, ], ,, b1, =, r, [, j, +, 1, ], ;, if, (, a1, <, b0, ), {]
[], ,, b1, =, r, [, j, +, 1, ], ;, if, (, a1, <, b0, ), {, out, []
[;, if, (, a1, <, b0, ), {, out, [, k, ++, ], =, a0, ;, out, [, k, ++]
[[, j, +, 1, ], ;, if, (, a1, <, b0, ), {, out, [, k, ++, ], =, a0]
[], ;, if, (, a1, <, b0, ), {, out, [, k, ++, ], =, a0, ;, out, [, k]
[+, 1, ], ;, if, (, a1, <, b0, ), {, out, [, k, ++, ], =, a0, ;, out]
[], ;, if, (, a1, <, b0, ), {, out, [, k, ++, ], =, a0, ;, out, [, k]
[), {, out, [, k, ++, ], =, a0, ;, out, [, k, ++, ], =, a1, ;, i, +=]
[<, b0, ), {, out, [, k, ++, ], =, a0, ;, out, [, k, ++, ], =, a1, ;]
[), {, out, [, k, ++, ], =, a0, ;, out, [, k, ++, ], =, a1, ;, i, +=]
[=, a0, ;, out, [, k, ++, ], =, a1, ;, i, +=, 2, ;, }, else, if, (, b1]
[[, k, ++, ], =, a0, ;, out, [, k, ++, ], =, a1, ;, i, +=, 2, ;, }]
[], =, a0, ;, out, [, k, ++, ], =, a1, ;, i, +=, 2, ;, }, else, if, (]
[++, ], =, a0, ;, out, [, k, ++, ], =, a1, ;, i, +=, 2, ;, }, else, if]
[;, out, [, k, ++, ], =, a1, ;, i, +=, 2, ;, }, else, if, (, b1, <, a0]
[=, a1, ;, i, +=, 2, ;, }, else, if, (, b1, <, a0, ), {, out, [, k, ++]
[[, k, ++, ], =, a1, ;, i, +=, 2, ;, }, else, if, (, b1, <, a0, ), {]
[], =, a1, ;, i, +=, 2, ;, }, else, if, (, b1, <, a0, ), {, out, [, k]
[++, ], =, a1, ;, i, +=, 2, ;, }, else, if, (, b1, <, a0, ), {, out, []
[;, i, +=, 2, ;, }, else, if, (, b1, <, a0, ), {, out, [, k, ++, ], =]
[+=, 2, ;, }, else, if, (, b1, <, a0, ), {, out, [, k, ++, ], =, b0, ;]
[;, }, else, if, (, b1, <, a0, ), {, out, [, k, ++, ], =, b0, ;, out, []
[), {, out, [, k, ++, ], =, b0, ;, out, [, k, ++, ], =, b1, ;, j, +=]
[<, a0, ), {, out, [, k, ++, ], =, b0, ;, out, [, k, ++, ], =, b1, ;]
[), {, out, [, k, ++, ], =, b0, ;, out, [, k, ++, ], =, b1, ;, j, +=]
[=, b0, ;, out, [, k, ++, ], =, b1, ;, j, +=, 2, ;, }, else, {, int, start]
[[, k, ++, ], =, b0, ;, out, [, k, ++, ], =, b1, ;, j, +=, 2, ;, }]
[], =, b0, ;, out, [, k, ++, ], =, b1, ;, j, +=, 2, ;, }, else, {, int]
[++, ], =, b0, ;, out, [, k, ++, ], =, b1, ;, j, +=, 2, ;, }, else, {]
[;, out, [, k, ++, ], =, b1, ;, j, +=, 2, ;, }, else, {, int, start, =, Math]
[=, b1, ;, j, +=, 2, ;, }, else, {, int, start, =, Math, ., min, (, a0, ,, b0]
[[, k, ++, ], =, b1, ;, j, +=, 2, ;, }, else, {, int, start, =, Math, ., min]
[], =, b1, ;, j, +=, 2, ;, }, else, {, int, start, =, Math, ., min, (, a0, ,]
[++, ], =, b1, ;, j, +=, 2, ;, }, else, {, int, start, =, Math, ., min, (, a0]
[;, j, +=, 2, ;, }, else, {, int, start, =, Math, ., min, (, a0, ,, b0, ), ;]
[+=, 2, ;, }, else, {, int, start, =, Math, ., min, (, a0, ,, b0, ), ;, int, end]
[;, }, else, {, int, start, =, Math, ., min, (, a0, ,, b0, ), ;, int, end, =, Math]
[;, int, end, =, Math, ., max, (, a1, ,, b1, ), ;, i, +=, 2, ;, j, +=, 2]
[., min, (, a0, ,, b0, ), ;, int, end, =, Math, ., max, (, a1, ,, b1, ), ;]
[,, b0, ), ;, int, end, =, Math, ., max, (, a1, ,, b1, ), ;, i, +=, 2, ;]
[), ;, int, end, =, Math, ., max, (, a1, ,, b1, ), ;, i, +=, 2, ;, j, +=]
[;, i, +=, 2, ;, j, +=, 2, ;, while, (, i, <, m, ||, j, <, n, ), {]
[., max, (, a1, ,, b1, ), ;, i, +=, 2, ;, j, +=, 2, ;, while, (, i, <]
[,, b1, ), ;, i, +=, 2, ;, j, +=, 2, ;, while, (, i, <, m, ||, j, <]
[), ;, i, +=, 2, ;, j, +=, 2, ;, while, (, i, <, m, ||, j, <, n, )]
[+=, 2, ;, j, +=, 2, ;, while, (, i, <, m, ||, j, <, n, ), {, if, (]
[;, j, +=, 2, ;, while, (, i, <, m, ||, j, <, n, ), {, if, (, i, <]
[+=, 2, ;, while, (, i, <, m, ||, j, <, n, ), {, if, (, i, <, m, &&]
[;, while, (, i, <, m, ||, j, <, n, ), {, if, (, i, <, m, &&, q, []
[), {, if, (, i, <, m, &&, q, [, i, ], <=, end, ), {, end, =, Math, .]
[||, j, <, n, ), {, if, (, i, <, m, &&, q, [, i, ], <=, end, ), {]
[<, m, ||, j, <, n, ), {, if, (, i, <, m, &&, q, [, i, ], <=, end]
[||, j, <, n, ), {, if, (, i, <, m, &&, q, [, i, ], <=, end, ), {]
[), {, if, (, i, <, m, &&, q, [, i, ], <=, end, ), {, end, =, Math, .]
[<, n, ), {, if, (, i, <, m, &&, q, [, i, ], <=, end, ), {, end, =]
[), {, if, (, i, <, m, &&, q, [, i, ], <=, end, ), {, end, =, Math, .]
[), {, end, =, Math, ., max, (, end, ,, q, [, i, +, 1, ], ), ;, i, +=]
[&&, q, [, i, ], <=, end, ), {, end, =, Math, ., max, (, end, ,, q, [, i]
[<, m, &&, q, [, i, ], <=, end, ), {, end, =, Math, ., max, (, end, ,, q]
[&&, q, [, i, ], <=, end, ), {, end, =, Math, ., max, (, end, ,, q, [, i]
[), {, end, =, Math, ., max, (, end, ,, q, [, i, +, 1, ], ), ;, i, +=]
[<=, end, ), {, end, =, Math, ., max, (, end, ,, q, [, i, +, 1, ], ), ;]
[[, i, ], <=, end, ), {, end, =, Math, ., max, (, end, ,, q, [, i, +, 1]
[], <=, end, ), {, end, =, Math, ., max, (, end, ,, q, [, i, +, 1, ], )]
[), {, end, =, Math, ., max, (, end, ,, q, [, i, +, 1, ], ), ;, i, +=]
[=, Math, ., max, (, end, ,, q, [, i, +, 1, ], ), ;, i, +=, 2, ;, }]
[;, i, +=, 2, ;, }, else, if, (, j, <, n, &&, r, [, j, ], <=, end, )]
[., max, (, end, ,, q, [, i, +, 1, ], ), ;, i, +=, 2, ;, }, else, if]
[,, q, [, i, +, 1, ], ), ;, i, +=, 2, ;, }, else, if, (, j, <, n]
[), ;, i, +=, 2, ;, }, else, if, (, j, <, n, &&, r, [, j, ], <=, end]
[[, i, +, 1, ], ), ;, i, +=, 2, ;, }, else, if, (, j, <, n, &&, r]
[], ), ;, i, +=, 2, ;, }, else, if, (, j, <, n, &&, r, [, j, ], <=]
[+, 1, ], ), ;, i, +=, 2, ;, }, else, if, (, j, <, n, &&, r, [, j]
[], ), ;, i, +=, 2, ;, }, else, if, (, j, <, n, &&, r, [, j, ], <=]
[+=, 2, ;, }, else, if, (, j, <, n, &&, r, [, j, ], <=, end, ), {, end]
[;, }, else, if, (, j, <, n, &&, r, [, j, ], <=, end, ), {, end, =, Math]
[), {, end, =, Math, ., max, (, end, ,, r, [, j, +, 1, ], ), ;, j, +=]
[&&, r, [, j, ], <=, end, ), {, end, =, Math, ., max, (, end, ,, r, [, j]
[<, n, &&, r, [, j, ], <=, end, ), {, end, =, Math, ., max, (, end, ,, r]
[&&, r, [, j, ], <=, end, ), {, end, =, Math, ., max, (, end, ,, r, [, j]
[), {, end, =, Math, ., max, (, end, ,, r, [, j, +, 1, ], ), ;, j, +=]
[<=, end, ), {, end, =, Math, ., max, (, end, ,, r, [, j, +, 1, ], ), ;]
[[, j, ], <=, end, ), {, end, =, Math, ., max, (, end, ,, r, [, j, +, 1]
[], <=, end, ), {, end, =, Math, ., max, (, end, ,, r, [, j, +, 1, ], )]
[), {, end, =, Math, ., max, (, end, ,, r, [, j, +, 1, ], ), ;, j, +=]
[=, Math, ., max, (, end, ,, r, [, j, +, 1, ], ), ;, j, +=, 2, ;, }]
[;, j, +=, 2, ;, }, else, {, break, ;, }, }, out, [, k, ++, ], =, start, ;]
[., max, (, end, ,, r, [, j, +, 1, ], ), ;, j, +=, 2, ;, }, else, {]
[,, r, [, j, +, 1, ], ), ;, j, +=, 2, ;, }, else, {, break, ;, }, }]
[), ;, j, +=, 2, ;, }, else, {, break, ;, }, }, out, [, k, ++, ], =, start]
[[, j, +, 1, ], ), ;, j, +=, 2, ;, }, else, {, break, ;, }, }, out, []
[], ), ;, j, +=, 2, ;, }, else, {, break, ;, }, }, out, [, k, ++, ], =]
[+, 1, ], ), ;, j, +=, 2, ;, }, else, {, break, ;, }, }, out, [, k, ++]
[], ), ;, j, +=, 2, ;, }, else, {, break, ;, }, }, out, [, k, ++, ], =]
[+=, 2, ;, }, else, {, break, ;, }, }, out, [, k, ++, ], =, start, ;, out, []
[;, }, else, {, break, ;, }, }, out, [, k, ++, ], =, start, ;, out, [, k, ++]
[=, start, ;, out, [, k, ++, ], =, end, ;, }, }, if, (, i, <, m, ), {]
[[, k, ++, ], =, start, ;, out, [, k, ++, ], =, end, ;, }, }, if, (, i]
[], =, start, ;, out, [, k, ++, ], =, end, ;, }, }, if, (, i, <, m, )]
[++, ], =, start, ;, out, [, k, ++, ], =, end, ;, }, }, if, (, i, <, m]
[;, out, [, k, ++, ], =, end, ;, }, }, if, (, i, <, m, ), {, System, .]
[=, end, ;, }, }, if, (, i, <, m, ), {, System, ., arraycopy, (, q, ,, i, ,]
[[, k, ++, ], =, end, ;, }, }, if, (, i, <, m, ), {, System, ., arraycopy, (]
[], =, end, ;, }, }, if, (, i, <, m, ), {, System, ., arraycopy, (, q, ,, i]
[++, ], =, end, ;, }, }, if, (, i, <, m, ), {, System, ., arraycopy, (, q, ,]
[;, }, }, if, (, i, <, m, ), {, System, ., arraycopy, (, q, ,, i, ,, out, ,]
[), {, System, ., arraycopy, (, q, ,, i, ,, out, ,, k, ,, m, -, i, ), ;, k]
[<, m, ), {, System, ., arraycopy, (, q, ,, i, ,, out, ,, k, ,, m, -, i, )]
[), {, System, ., arraycopy, (, q, ,, i, ,, out, ,, k, ,, m, -, i, ), ;, k]
[;, k, +=, m, -, i, ;, }, else, if, (, j, <, n, ), {, System, ., arraycopy, (]
[., arraycopy, (, q, ,, i, ,, out, ,, k, ,, m, -, i, ), ;, k, +=, m, -]
[,, i, ,, out, ,, k, ,, m, -, i, ), ;, k, +=, m, -, i, ;, }, else]
[,, out, ,, k, ,, m, -, i, ), ;, k, +=, m, -, i, ;, }, else, if, (]
[,, k, ,, m, -, i, ), ;, k, +=, m, -, i, ;, }, else, if, (, j, <]
[,, m, -, i, ), ;, k, +=, m, -, i, ;, }, else, if, (, j, <, n, )]
[), ;, k, +=, m, -, i, ;, }, else, if, (, j, <, n, ), {, System, ., arraycopy]
[-, i, ), ;, k, +=, m, -, i, ;, }, else, if, (, j, <, n, ), {, System]
[), ;, k, +=, m, -, i, ;, }, else, if, (, j, <, n, ), {, System, ., arraycopy]
[+=, m, -, i, ;, }, else, if, (, j, <, n, ), {, System, ., arraycopy, (, r, ,]
[;, }, else, if, (, j, <, n, ), {, System, ., arraycopy, (, r, ,, j, ,, out, ,]
[-, i, ;, }, else, if, (, j, <, n, ), {, System, ., arraycopy, (, r, ,, j, ,]
[;, }, else, if, (, j, <, n, ), {, System, ., arraycopy, (, r, ,, j, ,, out, ,]
[), {, System, ., arraycopy, (, r, ,, j, ,, out, ,, k, ,, n, -, j, ), ;, k]
[<, n, ), {, System, ., arraycopy, (, r, ,, j, ,, out, ,, k, ,, n, -, j, )]
[), {, System, ., arraycopy, (, r, ,, j, ,, out, ,, k, ,, n, -, j, ), ;, k]
[;, k, +=, n, -, j, ;, }, if, (, k, !=, out, ., length, ), {, int, [, ]]
[., arraycopy, (, r, ,, j, ,, out, ,, k, ,, n, -, j, ), ;, k, +=, n, -]
[,, j, ,, out, ,, k, ,, n, -, j, ), ;, k, +=, n, -, j, ;, }, if]
[,, out, ,, k, ,, n, -, j, ), ;, k, +=, n, -, j, ;, }, if, (, k]
[,, k, ,, n, -, j, ), ;, k, +=, n, -, j, ;, }, if, (, k, !=, out]
[,, n, -, j, ), ;, k, +=, n, -, j, ;, }, if, (, k, !=, out, ., length]
[), ;, k, +=, n, -, j, ;, }, if, (, k, !=, out, ., length, ), {, int, []
[-, j, ), ;, k, +=, n, -, j, ;, }, if, (, k, !=, out, ., length, ), {]
[), ;, k, +=, n, -, j, ;, }, if, (, k, !=, out, ., length, ), {, int, []
[+=, n, -, j, ;, }, if, (, k, !=, out, ., length, ), {, int, [, ], clipped, =]
[;, }, if, (, k, !=, out, ., length, ), {, int, [, ], clipped, =, new, int, [, k]
[-, j, ;, }, if, (, k, !=, out, ., length, ), {, int, [, ], clipped, =, new, int]
[;, }, if, (, k, !=, out, ., length, ), {, int, [, ], clipped, =, new, int, [, k]
[), {, int, [, ], clipped, =, new, int, [, k, ], ;, System, ., arraycopy, (, out, ,, 0]
[!=, out, ., length, ), {, int, [, ], clipped, =, new, int, [, k, ], ;, System, ., arraycopy]
[), {, int, [, ], clipped, =, new, int, [, k, ], ;, System, ., arraycopy, (, out, ,, 0]
[., length, ), {, int, [, ], clipped, =, new, int, [, k, ], ;, System, ., arraycopy, (, out]
[;, System, ., arraycopy, (, out, ,, 0, ,, clipped, ,, 0, ,, k, ), ;, out, =, clipped, ;]
[], ;, System, ., arraycopy, (, out, ,, 0, ,, clipped, ,, 0, ,, k, ), ;, out, =, clipped]
[;, out, =, clipped, ;, }, return, new, CharRanges, (, out, ), ;, }, public, CharRanges, intersection, (, CharRanges, other]
[., arraycopy, (, out, ,, 0, ,, clipped, ,, 0, ,, k, ), ;, out, =, clipped, ;, }, return]
[,, 0, ,, clipped, ,, 0, ,, k, ), ;, out, =, clipped, ;, }, return, new, CharRanges, (, out]
[,, clipped, ,, 0, ,, k, ), ;, out, =, clipped, ;, }, return, new, CharRanges, (, out, ), ;]
[,, 0, ,, k, ), ;, out, =, clipped, ;, }, return, new, CharRanges, (, out, ), ;, }, public]
[,, k, ), ;, out, =, clipped, ;, }, return, new, CharRanges, (, out, ), ;, }, public, CharRanges, intersection]
[), ;, out, =, clipped, ;, }, return, new, CharRanges, (, out, ), ;, }, public, CharRanges, intersection, (, CharRanges]
[=, clipped, ;, }, return, new, CharRanges, (, out, ), ;, }, public, CharRanges, intersection, (, CharRanges, other, ), {]
[;, }, return, new, CharRanges, (, out, ), ;, }, public, CharRanges, intersection, (, CharRanges, other, ), {, int, []
[;, }, public, CharRanges, intersection, (, CharRanges, other, ), {, int, [, ], aRanges, =, ranges, ,, bRanges, =, other]
[), ;, }, public, CharRanges, intersection, (, CharRanges, other, ), {, int, [, ], aRanges, =, ranges, ,, bRanges, =]
[,, bRanges, =, other, ., ranges, ;, int, aLen, =, aRanges, ., length, ,, bLen, =, bRanges, ., length, ;]
[;, int, aLen, =, aRanges, ., length, ,, bLen, =, bRanges, ., length, ;, if, (, aLen, ==, 0, )]
[., ranges, ;, int, aLen, =, aRanges, ., length, ,, bLen, =, bRanges, ., length, ;, if, (, aLen, ==]
[,, bLen, =, bRanges, ., length, ;, if, (, aLen, ==, 0, ), {, return, this, ;, }, if, (]
[., length, ,, bLen, =, bRanges, ., length, ;, if, (, aLen, ==, 0, ), {, return, this, ;, }]
[;, if, (, aLen, ==, 0, ), {, return, this, ;, }, if, (, bLen, ==, 0, ), {, return]
[., length, ;, if, (, aLen, ==, 0, ), {, return, this, ;, }, if, (, bLen, ==, 0, )]
[), {, return, this, ;, }, if, (, bLen, ==, 0, ), {, return, other, ;, }, int, aIdx, =]
[==, 0, ), {, return, this, ;, }, if, (, bLen, ==, 0, ), {, return, other, ;, }, int]
[), {, return, this, ;, }, if, (, bLen, ==, 0, ), {, return, other, ;, }, int, aIdx, =]
[;, }, if, (, bLen, ==, 0, ), {, return, other, ;, }, int, aIdx, =, 0, ,, bIdx, =]
[), {, return, other, ;, }, int, aIdx, =, 0, ,, bIdx, =, 0, ;, int, [, ], intersection, =]
[==, 0, ), {, return, other, ;, }, int, aIdx, =, 0, ,, bIdx, =, 0, ;, int, [, ]]
[), {, return, other, ;, }, int, aIdx, =, 0, ,, bIdx, =, 0, ;, int, [, ], intersection, =]
[;, }, int, aIdx, =, 0, ,, bIdx, =, 0, ;, int, [, ], intersection, =, new, int, [, Math]
[,, bIdx, =, 0, ;, int, [, ], intersection, =, new, int, [, Math, ., min, (, aLen, ,, bLen]
[;, int, [, ], intersection, =, new, int, [, Math, ., min, (, aLen, ,, bLen, ), ], ;, int]
[;, int, intersectionIdx, =, 0, ;, int, pos, =, Math, ., min, (, aRanges, [, 0, ], ,, bRanges, []
[], ;, int, intersectionIdx, =, 0, ;, int, pos, =, Math, ., min, (, aRanges, [, 0, ], ,, bRanges]
[., min, (, aLen, ,, bLen, ), ], ;, int, intersectionIdx, =, 0, ;, int, pos, =, Math, ., min]
[,, bLen, ), ], ;, int, intersectionIdx, =, 0, ;, int, pos, =, Math, ., min, (, aRanges, [, 0]
[), ], ;, int, intersectionIdx, =, 0, ;, int, pos, =, Math, ., min, (, aRanges, [, 0, ], ,]
[;, int, pos, =, Math, ., min, (, aRanges, [, 0, ], ,, bRanges, [, 0, ], ), ;, while]
[;, while, (, aIdx, <, aLen, &&, bIdx, <, bLen, ), {, if, (, aRanges, [, aIdx, +, 1, ]]
[., min, (, aRanges, [, 0, ], ,, bRanges, [, 0, ], ), ;, while, (, aIdx, <, aLen, &&]
[,, bRanges, [, 0, ], ), ;, while, (, aIdx, <, aLen, &&, bIdx, <, bLen, ), {, if, (]
[[, 0, ], ,, bRanges, [, 0, ], ), ;, while, (, aIdx, <, aLen, &&, bIdx, <, bLen, )]
[], ,, bRanges, [, 0, ], ), ;, while, (, aIdx, <, aLen, &&, bIdx, <, bLen, ), {, if]
[), ;, while, (, aIdx, <, aLen, &&, bIdx, <, bLen, ), {, if, (, aRanges, [, aIdx, +, 1]
[[, 0, ], ), ;, while, (, aIdx, <, aLen, &&, bIdx, <, bLen, ), {, if, (, aRanges, []
[], ), ;, while, (, aIdx, <, aLen, &&, bIdx, <, bLen, ), {, if, (, aRanges, [, aIdx, +]
[), {, if, (, aRanges, [, aIdx, +, 1, ], <=, pos, ), {, aIdx, +=, 2, ;, }, else]
[&&, bIdx, <, bLen, ), {, if, (, aRanges, [, aIdx, +, 1, ], <=, pos, ), {, aIdx, +=]
[<, aLen, &&, bIdx, <, bLen, ), {, if, (, aRanges, [, aIdx, +, 1, ], <=, pos, ), {]
[&&, bIdx, <, bLen, ), {, if, (, aRanges, [, aIdx, +, 1, ], <=, pos, ), {, aIdx, +=]
[), {, if, (, aRanges, [, aIdx, +, 1, ], <=, pos, ), {, aIdx, +=, 2, ;, }, else]
[<, bLen, ), {, if, (, aRanges, [, aIdx, +, 1, ], <=, pos, ), {, aIdx, +=, 2, ;]
[), {, if, (, aRanges, [, aIdx, +, 1, ], <=, pos, ), {, aIdx, +=, 2, ;, }, else]
[), {, aIdx, +=, 2, ;, }, else, if, (, bRanges, [, bIdx, +, 1, ], <=, pos, ), {]
[<=, pos, ), {, aIdx, +=, 2, ;, }, else, if, (, bRanges, [, bIdx, +, 1, ], <=, pos]
[[, aIdx, +, 1, ], <=, pos, ), {, aIdx, +=, 2, ;, }, else, if, (, bRanges, [, bIdx]
[], <=, pos, ), {, aIdx, +=, 2, ;, }, else, if, (, bRanges, [, bIdx, +, 1, ], <=]
[+, 1, ], <=, pos, ), {, aIdx, +=, 2, ;, }, else, if, (, bRanges, [, bIdx, +, 1]
[], <=, pos, ), {, aIdx, +=, 2, ;, }, else, if, (, bRanges, [, bIdx, +, 1, ], <=]
[), {, aIdx, +=, 2, ;, }, else, if, (, bRanges, [, bIdx, +, 1, ], <=, pos, ), {]
[+=, 2, ;, }, else, if, (, bRanges, [, bIdx, +, 1, ], <=, pos, ), {, bIdx, +=, 2]
[;, }, else, if, (, bRanges, [, bIdx, +, 1, ], <=, pos, ), {, bIdx, +=, 2, ;, }]
[), {, bIdx, +=, 2, ;, }, else, {, int, start, =, Math, ., max, (, aRanges, [, aIdx, ]]
[<=, pos, ), {, bIdx, +=, 2, ;, }, else, {, int, start, =, Math, ., max, (, aRanges, []
[[, bIdx, +, 1, ], <=, pos, ), {, bIdx, +=, 2, ;, }, else, {, int, start, =, Math]
[], <=, pos, ), {, bIdx, +=, 2, ;, }, else, {, int, start, =, Math, ., max, (, aRanges]
[+, 1, ], <=, pos, ), {, bIdx, +=, 2, ;, }, else, {, int, start, =, Math, ., max]
[], <=, pos, ), {, bIdx, +=, 2, ;, }, else, {, int, start, =, Math, ., max, (, aRanges]
[), {, bIdx, +=, 2, ;, }, else, {, int, start, =, Math, ., max, (, aRanges, [, aIdx, ]]
[+=, 2, ;, }, else, {, int, start, =, Math, ., max, (, aRanges, [, aIdx, ], ,, bRanges, []
[;, }, else, {, int, start, =, Math, ., max, (, aRanges, [, aIdx, ], ,, bRanges, [, bIdx, ]]
[;, if, (, pos, <, start, ), {, pos, =, start, ;, }, else, {, int, end, =, Math, .]
[., max, (, aRanges, [, aIdx, ], ,, bRanges, [, bIdx, ], ), ;, if, (, pos, <, start, )]
[,, bRanges, [, bIdx, ], ), ;, if, (, pos, <, start, ), {, pos, =, start, ;, }, else]
[[, aIdx, ], ,, bRanges, [, bIdx, ], ), ;, if, (, pos, <, start, ), {, pos, =, start]
[], ,, bRanges, [, bIdx, ], ), ;, if, (, pos, <, start, ), {, pos, =, start, ;, }]
[), ;, if, (, pos, <, start, ), {, pos, =, start, ;, }, else, {, int, end, =, Math]
[[, bIdx, ], ), ;, if, (, pos, <, start, ), {, pos, =, start, ;, }, else, {, int]
[], ), ;, if, (, pos, <, start, ), {, pos, =, start, ;, }, else, {, int, end, =]
[), {, pos, =, start, ;, }, else, {, int, end, =, Math, ., min, (, aRanges, [, aIdx, +]
[<, start, ), {, pos, =, start, ;, }, else, {, int, end, =, Math, ., min, (, aRanges, []
[), {, pos, =, start, ;, }, else, {, int, end, =, Math, ., min, (, aRanges, [, aIdx, +]
[=, start, ;, }, else, {, int, end, =, Math, ., min, (, aRanges, [, aIdx, +, 1, ], ,]
[;, }, else, {, int, end, =, Math, ., min, (, aRanges, [, aIdx, +, 1, ], ,, bRanges, []
[;, if, (, intersectionIdx, !=, 0, &&, pos, ==, intersection, [, intersectionIdx, -, 1, ], ), {, intersection, [, intersectionIdx]
[., min, (, aRanges, [, aIdx, +, 1, ], ,, bRanges, [, bIdx, +, 1, ], ), ;, if, (]
[,, bRanges, [, bIdx, +, 1, ], ), ;, if, (, intersectionIdx, !=, 0, &&, pos, ==, intersection, [, intersectionIdx]
[[, aIdx, +, 1, ], ,, bRanges, [, bIdx, +, 1, ], ), ;, if, (, intersectionIdx, !=, 0, &&]
[], ,, bRanges, [, bIdx, +, 1, ], ), ;, if, (, intersectionIdx, !=, 0, &&, pos, ==, intersection, []
[+, 1, ], ,, bRanges, [, bIdx, +, 1, ], ), ;, if, (, intersectionIdx, !=, 0, &&, pos, ==]
[], ,, bRanges, [, bIdx, +, 1, ], ), ;, if, (, intersectionIdx, !=, 0, &&, pos, ==, intersection, []
[), ;, if, (, intersectionIdx, !=, 0, &&, pos, ==, intersection, [, intersectionIdx, -, 1, ], ), {, intersection, []
[[, bIdx, +, 1, ], ), ;, if, (, intersectionIdx, !=, 0, &&, pos, ==, intersection, [, intersectionIdx, -, 1]
[], ), ;, if, (, intersectionIdx, !=, 0, &&, pos, ==, intersection, [, intersectionIdx, -, 1, ], ), {, intersection]
[+, 1, ], ), ;, if, (, intersectionIdx, !=, 0, &&, pos, ==, intersection, [, intersectionIdx, -, 1, ], )]
[], ), ;, if, (, intersectionIdx, !=, 0, &&, pos, ==, intersection, [, intersectionIdx, -, 1, ], ), {, intersection]
[), {, intersection, [, intersectionIdx, -, 1, ], =, end, ;, }, else, {, if, (, intersectionIdx, ==, intersection, .]
[&&, pos, ==, intersection, [, intersectionIdx, -, 1, ], ), {, intersection, [, intersectionIdx, -, 1, ], =, end, ;]
[!=, 0, &&, pos, ==, intersection, [, intersectionIdx, -, 1, ], ), {, intersection, [, intersectionIdx, -, 1, ], =]
[&&, pos, ==, intersection, [, intersectionIdx, -, 1, ], ), {, intersection, [, intersectionIdx, -, 1, ], =, end, ;]
[), {, intersection, [, intersectionIdx, -, 1, ], =, end, ;, }, else, {, if, (, intersectionIdx, ==, intersection, .]
[==, intersection, [, intersectionIdx, -, 1, ], ), {, intersection, [, intersectionIdx, -, 1, ], =, end, ;, }, else]
[), {, intersection, [, intersectionIdx, -, 1, ], =, end, ;, }, else, {, if, (, intersectionIdx, ==, intersection, .]
[[, intersectionIdx, -, 1, ], ), {, intersection, [, intersectionIdx, -, 1, ], =, end, ;, }, else, {, if]
[], ), {, intersection, [, intersectionIdx, -, 1, ], =, end, ;, }, else, {, if, (, intersectionIdx, ==, intersection]
[-, 1, ], ), {, intersection, [, intersectionIdx, -, 1, ], =, end, ;, }, else, {, if, (, intersectionIdx]
[], ), {, intersection, [, intersectionIdx, -, 1, ], =, end, ;, }, else, {, if, (, intersectionIdx, ==, intersection]
[=, end, ;, }, else, {, if, (, intersectionIdx, ==, intersection, ., length, ), {, int, [, ], newArr, =]
[[, intersectionIdx, -, 1, ], =, end, ;, }, else, {, if, (, intersectionIdx, ==, intersection, ., length, ), {]
[], =, end, ;, }, else, {, if, (, intersectionIdx, ==, intersection, ., length, ), {, int, [, ], newArr]
[-, 1, ], =, end, ;, }, else, {, if, (, intersectionIdx, ==, intersection, ., length, ), {, int, []
[], =, end, ;, }, else, {, if, (, intersectionIdx, ==, intersection, ., length, ), {, int, [, ], newArr]
[;, }, else, {, if, (, intersectionIdx, ==, intersection, ., length, ), {, int, [, ], newArr, =, new, int]
[), {, int, [, ], newArr, =, new, int, [, intersectionIdx, *, 2, ], ;, System, ., arraycopy, (, intersection]
[==, intersection, ., length, ), {, int, [, ], newArr, =, new, int, [, intersectionIdx, *, 2, ], ;, System]
[), {, int, [, ], newArr, =, new, int, [, intersectionIdx, *, 2, ], ;, System, ., arraycopy, (, intersection]
[., length, ), {, int, [, ], newArr, =, new, int, [, intersectionIdx, *, 2, ], ;, System, ., arraycopy]
[;, System, ., arraycopy, (, intersection, ,, 0, ,, newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr, ;]
[], ;, System, ., arraycopy, (, intersection, ,, 0, ,, newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr]
[*, 2, ], ;, System, ., arraycopy, (, intersection, ,, 0, ,, newArr, ,, 0, ,, intersectionIdx, ), ;, intersection]
[], ;, System, ., arraycopy, (, intersection, ,, 0, ,, newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr]
[;, intersection, =, newArr, ;, }, intersection, [, intersectionIdx, ++, ], =, pos, ;, intersection, [, intersectionIdx, ++, ], =]
[., arraycopy, (, intersection, ,, 0, ,, newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr, ;, }, intersection]
[,, 0, ,, newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr, ;, }, intersection, [, intersectionIdx, ++, ]]
[,, newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr, ;, }, intersection, [, intersectionIdx, ++, ], =, pos]
[,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr, ;, }, intersection, [, intersectionIdx, ++, ], =, pos, ;, intersection]
[,, intersectionIdx, ), ;, intersection, =, newArr, ;, }, intersection, [, intersectionIdx, ++, ], =, pos, ;, intersection, [, intersectionIdx]
[), ;, intersection, =, newArr, ;, }, intersection, [, intersectionIdx, ++, ], =, pos, ;, intersection, [, intersectionIdx, ++, ]]
[=, newArr, ;, }, intersection, [, intersectionIdx, ++, ], =, pos, ;, intersection, [, intersectionIdx, ++, ], =, end, ;]
[;, }, intersection, [, intersectionIdx, ++, ], =, pos, ;, intersection, [, intersectionIdx, ++, ], =, end, ;, }, pos]
[=, pos, ;, intersection, [, intersectionIdx, ++, ], =, end, ;, }, pos, =, end, ;, }, }, }, if]
[[, intersectionIdx, ++, ], =, pos, ;, intersection, [, intersectionIdx, ++, ], =, end, ;, }, pos, =, end, ;]
[], =, pos, ;, intersection, [, intersectionIdx, ++, ], =, end, ;, }, pos, =, end, ;, }, }, }]
[++, ], =, pos, ;, intersection, [, intersectionIdx, ++, ], =, end, ;, }, pos, =, end, ;, }, }]
[;, intersection, [, intersectionIdx, ++, ], =, end, ;, }, pos, =, end, ;, }, }, }, if, (, intersectionIdx]
[=, end, ;, }, pos, =, end, ;, }, }, }, if, (, intersectionIdx, !=, intersection, ., length, ), {]
[[, intersectionIdx, ++, ], =, end, ;, }, pos, =, end, ;, }, }, }, if, (, intersectionIdx, !=, intersection]
[], =, end, ;, }, pos, =, end, ;, }, }, }, if, (, intersectionIdx, !=, intersection, ., length, )]
[++, ], =, end, ;, }, pos, =, end, ;, }, }, }, if, (, intersectionIdx, !=, intersection, ., length]
[;, }, pos, =, end, ;, }, }, }, if, (, intersectionIdx, !=, intersection, ., length, ), {, int, []
[=, end, ;, }, }, }, if, (, intersectionIdx, !=, intersection, ., length, ), {, int, [, ], newArr, =]
[;, }, }, }, if, (, intersectionIdx, !=, intersection, ., length, ), {, int, [, ], newArr, =, new, int]
[), {, int, [, ], newArr, =, new, int, [, intersectionIdx, ], ;, System, ., arraycopy, (, intersection, ,, 0]
[!=, intersection, ., length, ), {, int, [, ], newArr, =, new, int, [, intersectionIdx, ], ;, System, ., arraycopy]
[), {, int, [, ], newArr, =, new, int, [, intersectionIdx, ], ;, System, ., arraycopy, (, intersection, ,, 0]
[., length, ), {, int, [, ], newArr, =, new, int, [, intersectionIdx, ], ;, System, ., arraycopy, (, intersection]
[;, System, ., arraycopy, (, intersection, ,, 0, ,, newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr, ;]
[], ;, System, ., arraycopy, (, intersection, ,, 0, ,, newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr]
[;, intersection, =, newArr, ;, }, return, new, CharRanges, (, intersection, ), ;, }, public, CharRanges, difference, (, CharRanges, subtrahendRanges]
[., arraycopy, (, intersection, ,, 0, ,, newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr, ;, }, return]
[,, 0, ,, newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr, ;, }, return, new, CharRanges, (, intersection]
[,, newArr, ,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr, ;, }, return, new, CharRanges, (, intersection, ), ;]
[,, 0, ,, intersectionIdx, ), ;, intersection, =, newArr, ;, }, return, new, CharRanges, (, intersection, ), ;, }, public]
[,, intersectionIdx, ), ;, intersection, =, newArr, ;, }, return, new, CharRanges, (, intersection, ), ;, }, public, CharRanges, difference]
[), ;, intersection, =, newArr, ;, }, return, new, CharRanges, (, intersection, ), ;, }, public, CharRanges, difference, (, CharRanges]
[=, newArr, ;, }, return, new, CharRanges, (, intersection, ), ;, }, public, CharRanges, difference, (, CharRanges, subtrahendRanges, ), {]
[;, }, return, new, CharRanges, (, intersection, ), ;, }, public, CharRanges, difference, (, CharRanges, subtrahendRanges, ), {, int, []
[;, }, public, CharRanges, difference, (, CharRanges, subtrahendRanges, ), {, int, [, ], minuend, =, this, ., ranges, ;, int]
[), ;, }, public, CharRanges, difference, (, CharRanges, subtrahendRanges, ), {, int, [, ], minuend, =, this, ., ranges, ;]
[;, int, [, ], subtrahend, =, subtrahendRanges, ., ranges, ;, int, mn, =, minuend, ., length, ,, sn, =, subtrahend]
[., ranges, ;, int, [, ], subtrahend, =, subtrahendRanges, ., ranges, ;, int, mn, =, minuend, ., length, ,, sn]
[;, int, mn, =, minuend, ., length, ,, sn, =, subtrahend, ., length, ;, if, (, mn, ==, 0, ||]
[., ranges, ;, int, mn, =, minuend, ., length, ,, sn, =, subtrahend, ., length, ;, if, (, mn, ==]
[,, sn, =, subtrahend, ., length, ;, if, (, mn, ==, 0, ||, sn, ==, 0, ), {, return, this]
[., length, ,, sn, =, subtrahend, ., length, ;, if, (, mn, ==, 0, ||, sn, ==, 0, ), {]
[;, if, (, mn, ==, 0, ||, sn, ==, 0, ), {, return, this, ;, }, int, [, ], difference]
[., length, ;, if, (, mn, ==, 0, ||, sn, ==, 0, ), {, return, this, ;, }, int, []
[), {, return, this, ;, }, int, [, ], difference, =, new, int, [, minuend, ., length, ], ;, int]
[||, sn, ==, 0, ), {, return, this, ;, }, int, [, ], difference, =, new, int, [, minuend, .]
[==, 0, ||, sn, ==, 0, ), {, return, this, ;, }, int, [, ], difference, =, new, int, []
[||, sn, ==, 0, ), {, return, this, ;, }, int, [, ], difference, =, new, int, [, minuend, .]
[), {, return, this, ;, }, int, [, ], difference, =, new, int, [, minuend, ., length, ], ;, int]
[==, 0, ), {, return, this, ;, }, int, [, ], difference, =, new, int, [, minuend, ., length, ]]
[), {, return, this, ;, }, int, [, ], difference, =, new, int, [, minuend, ., length, ], ;, int]
[;, }, int, [, ], difference, =, new, int, [, minuend, ., length, ], ;, int, mIdx, =, 0, ,]
[;, int, mIdx, =, 0, ,, sIdx, =, 0, ,, dIdx, =, 0, ;, int, pos, =, minuend, [, 0]
[], ;, int, mIdx, =, 0, ,, sIdx, =, 0, ,, dIdx, =, 0, ;, int, pos, =, minuend, []
[., length, ], ;, int, mIdx, =, 0, ,, sIdx, =, 0, ,, dIdx, =, 0, ;, int, pos, =]
[,, sIdx, =, 0, ,, dIdx, =, 0, ;, int, pos, =, minuend, [, 0, ], ;, while, (, mIdx]
[,, dIdx, =, 0, ;, int, pos, =, minuend, [, 0, ], ;, while, (, mIdx, <, mn, ), {]
[;, int, pos, =, minuend, [, 0, ], ;, while, (, mIdx, <, mn, ), {, if, (, pos, >=]
[;, while, (, mIdx, <, mn, ), {, if, (, pos, >=, minuend, [, mIdx, +, 1, ], ), {]
[[, 0, ], ;, while, (, mIdx, <, mn, ), {, if, (, pos, >=, minuend, [, mIdx, +, 1]
[], ;, while, (, mIdx, <, mn, ), {, if, (, pos, >=, minuend, [, mIdx, +, 1, ], )]
[), {, if, (, pos, >=, minuend, [, mIdx, +, 1, ], ), {, mIdx, +=, 2, ;, }, else]
[<, mn, ), {, if, (, pos, >=, minuend, [, mIdx, +, 1, ], ), {, mIdx, +=, 2, ;]
[), {, if, (, pos, >=, minuend, [, mIdx, +, 1, ], ), {, mIdx, +=, 2, ;, }, else]
[), {, mIdx, +=, 2, ;, }, else, if, (, pos, <, minuend, [, mIdx, ], ), {, pos, =]
[>=, minuend, [, mIdx, +, 1, ], ), {, mIdx, +=, 2, ;, }, else, if, (, pos, <, minuend]
[), {, mIdx, +=, 2, ;, }, else, if, (, pos, <, minuend, [, mIdx, ], ), {, pos, =]
[[, mIdx, +, 1, ], ), {, mIdx, +=, 2, ;, }, else, if, (, pos, <, minuend, [, mIdx]
[], ), {, mIdx, +=, 2, ;, }, else, if, (, pos, <, minuend, [, mIdx, ], ), {, pos]
[+, 1, ], ), {, mIdx, +=, 2, ;, }, else, if, (, pos, <, minuend, [, mIdx, ], )]
[], ), {, mIdx, +=, 2, ;, }, else, if, (, pos, <, minuend, [, mIdx, ], ), {, pos]
[+=, 2, ;, }, else, if, (, pos, <, minuend, [, mIdx, ], ), {, pos, =, minuend, [, mIdx]
[;, }, else, if, (, pos, <, minuend, [, mIdx, ], ), {, pos, =, minuend, [, mIdx, ], ;]
[), {, pos, =, minuend, [, mIdx, ], ;, }, else, if, (, sIdx, <, sn, &&, pos, >=, subtrahend]
[<, minuend, [, mIdx, ], ), {, pos, =, minuend, [, mIdx, ], ;, }, else, if, (, sIdx, <]
[), {, pos, =, minuend, [, mIdx, ], ;, }, else, if, (, sIdx, <, sn, &&, pos, >=, subtrahend]
[[, mIdx, ], ), {, pos, =, minuend, [, mIdx, ], ;, }, else, if, (, sIdx, <, sn, &&]
[], ), {, pos, =, minuend, [, mIdx, ], ;, }, else, if, (, sIdx, <, sn, &&, pos, >=]
[=, minuend, [, mIdx, ], ;, }, else, if, (, sIdx, <, sn, &&, pos, >=, subtrahend, [, sIdx, ]]
[;, }, else, if, (, sIdx, <, sn, &&, pos, >=, subtrahend, [, sIdx, ], ), {, pos, =, subtrahend]
[[, mIdx, ], ;, }, else, if, (, sIdx, <, sn, &&, pos, >=, subtrahend, [, sIdx, ], ), {]
[], ;, }, else, if, (, sIdx, <, sn, &&, pos, >=, subtrahend, [, sIdx, ], ), {, pos, =]
[), {, pos, =, subtrahend, [, sIdx, +, 1, ], ;, sIdx, +=, 2, ;, }, else, {, int, end]
[&&, pos, >=, subtrahend, [, sIdx, ], ), {, pos, =, subtrahend, [, sIdx, +, 1, ], ;, sIdx, +=]
[<, sn, &&, pos, >=, subtrahend, [, sIdx, ], ), {, pos, =, subtrahend, [, sIdx, +, 1, ], ;]
[&&, pos, >=, subtrahend, [, sIdx, ], ), {, pos, =, subtrahend, [, sIdx, +, 1, ], ;, sIdx, +=]
[), {, pos, =, subtrahend, [, sIdx, +, 1, ], ;, sIdx, +=, 2, ;, }, else, {, int, end]
[>=, subtrahend, [, sIdx, ], ), {, pos, =, subtrahend, [, sIdx, +, 1, ], ;, sIdx, +=, 2, ;]
[), {, pos, =, subtrahend, [, sIdx, +, 1, ], ;, sIdx, +=, 2, ;, }, else, {, int, end]
[[, sIdx, ], ), {, pos, =, subtrahend, [, sIdx, +, 1, ], ;, sIdx, +=, 2, ;, }, else]
[], ), {, pos, =, subtrahend, [, sIdx, +, 1, ], ;, sIdx, +=, 2, ;, }, else, {, int]
[=, subtrahend, [, sIdx, +, 1, ], ;, sIdx, +=, 2, ;, }, else, {, int, end, =, sIdx, <]
[;, sIdx, +=, 2, ;, }, else, {, int, end, =, sIdx, <, sn, ?, Math, ., min, (, minuend]
[[, sIdx, +, 1, ], ;, sIdx, +=, 2, ;, }, else, {, int, end, =, sIdx, <, sn, ?]
[], ;, sIdx, +=, 2, ;, }, else, {, int, end, =, sIdx, <, sn, ?, Math, ., min, (]
[+, 1, ], ;, sIdx, +=, 2, ;, }, else, {, int, end, =, sIdx, <, sn, ?, Math, .]
[], ;, sIdx, +=, 2, ;, }, else, {, int, end, =, sIdx, <, sn, ?, Math, ., min, (]
[+=, 2, ;, }, else, {, int, end, =, sIdx, <, sn, ?, Math, ., min, (, minuend, [, mIdx]
[;, }, else, {, int, end, =, sIdx, <, sn, ?, Math, ., min, (, minuend, [, mIdx, +, 1]
[;, if, (, dIdx, !=, 0, &&, difference, [, dIdx, -, 1, ], ==, pos, ), {, difference, [, dIdx]
[?, Math, ., min, (, minuend, [, mIdx, +, 1, ], ,, subtrahend, [, sIdx, ], ), :, minuend, []
[<, sn, ?, Math, ., min, (, minuend, [, mIdx, +, 1, ], ,, subtrahend, [, sIdx, ], ), :]
[?, Math, ., min, (, minuend, [, mIdx, +, 1, ], ,, subtrahend, [, sIdx, ], ), :, minuend, []
[:, minuend, [, mIdx, +, 1, ], ;, if, (, dIdx, !=, 0, &&, difference, [, dIdx, -, 1, ]]
[., min, (, minuend, [, mIdx, +, 1, ], ,, subtrahend, [, sIdx, ], ), :, minuend, [, mIdx, +]
[,, subtrahend, [, sIdx, ], ), :, minuend, [, mIdx, +, 1, ], ;, if, (, dIdx, !=, 0, &&]
[[, mIdx, +, 1, ], ,, subtrahend, [, sIdx, ], ), :, minuend, [, mIdx, +, 1, ], ;, if]
[], ,, subtrahend, [, sIdx, ], ), :, minuend, [, mIdx, +, 1, ], ;, if, (, dIdx, !=, 0]
[+, 1, ], ,, subtrahend, [, sIdx, ], ), :, minuend, [, mIdx, +, 1, ], ;, if, (, dIdx]
[], ,, subtrahend, [, sIdx, ], ), :, minuend, [, mIdx, +, 1, ], ;, if, (, dIdx, !=, 0]
[), :, minuend, [, mIdx, +, 1, ], ;, if, (, dIdx, !=, 0, &&, difference, [, dIdx, -, 1]
[[, sIdx, ], ), :, minuend, [, mIdx, +, 1, ], ;, if, (, dIdx, !=, 0, &&, difference, []
[], ), :, minuend, [, mIdx, +, 1, ], ;, if, (, dIdx, !=, 0, &&, difference, [, dIdx, -]
[;, if, (, dIdx, !=, 0, &&, difference, [, dIdx, -, 1, ], ==, pos, ), {, difference, [, dIdx]
[[, mIdx, +, 1, ], ;, if, (, dIdx, !=, 0, &&, difference, [, dIdx, -, 1, ], ==, pos]
[], ;, if, (, dIdx, !=, 0, &&, difference, [, dIdx, -, 1, ], ==, pos, ), {, difference, []
[+, 1, ], ;, if, (, dIdx, !=, 0, &&, difference, [, dIdx, -, 1, ], ==, pos, ), {]
[], ;, if, (, dIdx, !=, 0, &&, difference, [, dIdx, -, 1, ], ==, pos, ), {, difference, []
[), {, difference, [, dIdx, -, 1, ], =, pos, ;, }, else, {, if, (, dIdx, ==, difference, .]
[&&, difference, [, dIdx, -, 1, ], ==, pos, ), {, difference, [, dIdx, -, 1, ], =, pos, ;]
[!=, 0, &&, difference, [, dIdx, -, 1, ], ==, pos, ), {, difference, [, dIdx, -, 1, ], =]
[&&, difference, [, dIdx, -, 1, ], ==, pos, ), {, difference, [, dIdx, -, 1, ], =, pos, ;]
[), {, difference, [, dIdx, -, 1, ], =, pos, ;, }, else, {, if, (, dIdx, ==, difference, .]
[==, pos, ), {, difference, [, dIdx, -, 1, ], =, pos, ;, }, else, {, if, (, dIdx, ==]
[[, dIdx, -, 1, ], ==, pos, ), {, difference, [, dIdx, -, 1, ], =, pos, ;, }, else]
[], ==, pos, ), {, difference, [, dIdx, -, 1, ], =, pos, ;, }, else, {, if, (, dIdx]
[-, 1, ], ==, pos, ), {, difference, [, dIdx, -, 1, ], =, pos, ;, }, else, {, if]
[], ==, pos, ), {, difference, [, dIdx, -, 1, ], =, pos, ;, }, else, {, if, (, dIdx]
[), {, difference, [, dIdx, -, 1, ], =, pos, ;, }, else, {, if, (, dIdx, ==, difference, .]
[=, pos, ;, }, else, {, if, (, dIdx, ==, difference, ., length, ), {, int, [, ], newArr, =]
[[, dIdx, -, 1, ], =, pos, ;, }, else, {, if, (, dIdx, ==, difference, ., length, ), {]
[], =, pos, ;, }, else, {, if, (, dIdx, ==, difference, ., length, ), {, int, [, ], newArr]
[-, 1, ], =, pos, ;, }, else, {, if, (, dIdx, ==, difference, ., length, ), {, int, []
[], =, pos, ;, }, else, {, if, (, dIdx, ==, difference, ., length, ), {, int, [, ], newArr]
[;, }, else, {, if, (, dIdx, ==, difference, ., length, ), {, int, [, ], newArr, =, new, int]
[), {, int, [, ], newArr, =, new, int, [, dIdx, *, 2, ], ;, System, ., arraycopy, (, difference]
[==, difference, ., length, ), {, int, [, ], newArr, =, new, int, [, dIdx, *, 2, ], ;, System]
[), {, int, [, ], newArr, =, new, int, [, dIdx, *, 2, ], ;, System, ., arraycopy, (, difference]
[., length, ), {, int, [, ], newArr, =, new, int, [, dIdx, *, 2, ], ;, System, ., arraycopy]
[;, System, ., arraycopy, (, difference, ,, 0, ,, newArr, ,, 0, ,, dIdx, ), ;, difference, =, newArr, ;]
[], ;, System, ., arraycopy, (, difference, ,, 0, ,, newArr, ,, 0, ,, dIdx, ), ;, difference, =, newArr]
[*, 2, ], ;, System, ., arraycopy, (, difference, ,, 0, ,, newArr, ,, 0, ,, dIdx, ), ;, difference]
[], ;, System, ., arraycopy, (, difference, ,, 0, ,, newArr, ,, 0, ,, dIdx, ), ;, difference, =, newArr]
[;, difference, =, newArr, ;, }, difference, [, dIdx, ++, ], =, pos, ;, difference, [, dIdx, ++, ], =]
[., arraycopy, (, difference, ,, 0, ,, newArr, ,, 0, ,, dIdx, ), ;, difference, =, newArr, ;, }, difference]
[,, 0, ,, newArr, ,, 0, ,, dIdx, ), ;, difference, =, newArr, ;, }, difference, [, dIdx, ++, ]]
[,, newArr, ,, 0, ,, dIdx, ), ;, difference, =, newArr, ;, }, difference, [, dIdx, ++, ], =, pos]
[,, 0, ,, dIdx, ), ;, difference, =, newArr, ;, }, difference, [, dIdx, ++, ], =, pos, ;, difference]
[,, dIdx, ), ;, difference, =, newArr, ;, }, difference, [, dIdx, ++, ], =, pos, ;, difference, [, dIdx]
[), ;, difference, =, newArr, ;, }, difference, [, dIdx, ++, ], =, pos, ;, difference, [, dIdx, ++, ]]
[=, newArr, ;, }, difference, [, dIdx, ++, ], =, pos, ;, difference, [, dIdx, ++, ], =, end, ;]
[;, }, difference, [, dIdx, ++, ], =, pos, ;, difference, [, dIdx, ++, ], =, end, ;, }, pos]
[=, pos, ;, difference, [, dIdx, ++, ], =, end, ;, }, pos, =, end, ;, }, }, if, (]
[[, dIdx, ++, ], =, pos, ;, difference, [, dIdx, ++, ], =, end, ;, }, pos, =, end, ;]
[], =, pos, ;, difference, [, dIdx, ++, ], =, end, ;, }, pos, =, end, ;, }, }, if]
[++, ], =, pos, ;, difference, [, dIdx, ++, ], =, end, ;, }, pos, =, end, ;, }, }]
[;, difference, [, dIdx, ++, ], =, end, ;, }, pos, =, end, ;, }, }, if, (, dIdx, !=]
[=, end, ;, }, pos, =, end, ;, }, }, if, (, dIdx, !=, difference, ., length, ), {, int]
[[, dIdx, ++, ], =, end, ;, }, pos, =, end, ;, }, }, if, (, dIdx, !=, difference, .]
[], =, end, ;, }, pos, =, end, ;, }, }, if, (, dIdx, !=, difference, ., length, ), {]
[++, ], =, end, ;, }, pos, =, end, ;, }, }, if, (, dIdx, !=, difference, ., length, )]
[;, }, pos, =, end, ;, }, }, if, (, dIdx, !=, difference, ., length, ), {, int, [, ]]
[=, end, ;, }, }, if, (, dIdx, !=, difference, ., length, ), {, int, [, ], newArr, =, new]
[;, }, }, if, (, dIdx, !=, difference, ., length, ), {, int, [, ], newArr, =, new, int, []
[), {, int, [, ], newArr, =, new, int, [, dIdx, ], ;, System, ., arraycopy, (, difference, ,, 0]
[!=, difference, ., length, ), {, int, [, ], newArr, =, new, int, [, dIdx, ], ;, System, ., arraycopy]
[), {, int, [, ], newArr, =, new, int, [, dIdx, ], ;, System, ., arraycopy, (, difference, ,, 0]
[., length, ), {, int, [, ], newArr, =, new, int, [, dIdx, ], ;, System, ., arraycopy, (, difference]
[;, System, ., arraycopy, (, difference, ,, 0, ,, newArr, ,, 0, ,, dIdx, ), ;, difference, =, newArr, ;]
[], ;, System, ., arraycopy, (, difference, ,, 0, ,, newArr, ,, 0, ,, dIdx, ), ;, difference, =, newArr]
[;, difference, =, newArr, ;, }, return, new, CharRanges, (, difference, ), ;, }, public, boolean, containsAll, (, CharRanges, sub]
[., arraycopy, (, difference, ,, 0, ,, newArr, ,, 0, ,, dIdx, ), ;, difference, =, newArr, ;, }, return]
[,, 0, ,, newArr, ,, 0, ,, dIdx, ), ;, difference, =, newArr, ;, }, return, new, CharRanges, (, difference]
[,, newArr, ,, 0, ,, dIdx, ), ;, difference, =, newArr, ;, }, return, new, CharRanges, (, difference, ), ;]
[,, 0, ,, dIdx, ), ;, difference, =, newArr, ;, }, return, new, CharRanges, (, difference, ), ;, }, public]
[,, dIdx, ), ;, difference, =, newArr, ;, }, return, new, CharRanges, (, difference, ), ;, }, public, boolean, containsAll]
[), ;, difference, =, newArr, ;, }, return, new, CharRanges, (, difference, ), ;, }, public, boolean, containsAll, (, CharRanges]
[=, newArr, ;, }, return, new, CharRanges, (, difference, ), ;, }, public, boolean, containsAll, (, CharRanges, sub, ), {]
[;, }, return, new, CharRanges, (, difference, ), ;, }, public, boolean, containsAll, (, CharRanges, sub, ), {, int, []
[;, }, public, boolean, containsAll, (, CharRanges, sub, ), {, int, [, ], superRanges, =, this, ., ranges, ;, int]
[), ;, }, public, boolean, containsAll, (, CharRanges, sub, ), {, int, [, ], superRanges, =, this, ., ranges, ;]
[;, int, [, ], subRanges, =, sub, ., ranges, ;, int, superIdx, =, 0, ,, subIdx, =, 0, ;, int]
[., ranges, ;, int, [, ], subRanges, =, sub, ., ranges, ;, int, superIdx, =, 0, ,, subIdx, =, 0]
[;, int, superIdx, =, 0, ,, subIdx, =, 0, ;, int, superLen, =, superRanges, ., length, ,, subLen, =, subRanges]
[., ranges, ;, int, superIdx, =, 0, ,, subIdx, =, 0, ;, int, superLen, =, superRanges, ., length, ,, subLen]
[,, subIdx, =, 0, ;, int, superLen, =, superRanges, ., length, ,, subLen, =, subRanges, ., length, ;, while, (]
[;, int, superLen, =, superRanges, ., length, ,, subLen, =, subRanges, ., length, ;, while, (, subIdx, <, subLen, )]
[,, subLen, =, subRanges, ., length, ;, while, (, subIdx, <, subLen, ), {, if, (, superIdx, ==, superLen, )]
[., length, ,, subLen, =, subRanges, ., length, ;, while, (, subIdx, <, subLen, ), {, if, (, superIdx, ==]
[;, while, (, subIdx, <, subLen, ), {, if, (, superIdx, ==, superLen, ), {, return, false, ;, }, if]
[., length, ;, while, (, subIdx, <, subLen, ), {, if, (, superIdx, ==, superLen, ), {, return, false, ;]
[), {, if, (, superIdx, ==, superLen, ), {, return, false, ;, }, if, (, superRanges, [, superIdx, +, 1]
[<, subLen, ), {, if, (, superIdx, ==, superLen, ), {, return, false, ;, }, if, (, superRanges, [, superIdx]
[), {, if, (, superIdx, ==, superLen, ), {, return, false, ;, }, if, (, superRanges, [, superIdx, +, 1]
[), {, return, false, ;, }, if, (, superRanges, [, superIdx, +, 1, ], <=, subRanges, [, subIdx, ], )]
[==, superLen, ), {, return, false, ;, }, if, (, superRanges, [, superIdx, +, 1, ], <=, subRanges, [, subIdx]
[), {, return, false, ;, }, if, (, superRanges, [, superIdx, +, 1, ], <=, subRanges, [, subIdx, ], )]
[;, }, if, (, superRanges, [, superIdx, +, 1, ], <=, subRanges, [, subIdx, ], ), {, superIdx, +=, 2]
[), {, superIdx, +=, 2, ;, }, else, if, (, superRanges, [, superIdx, ], >, subRanges, [, subIdx, ], )]
[<=, subRanges, [, subIdx, ], ), {, superIdx, +=, 2, ;, }, else, if, (, superRanges, [, superIdx, ], >]
[[, superIdx, +, 1, ], <=, subRanges, [, subIdx, ], ), {, superIdx, +=, 2, ;, }, else, if, (]
[], <=, subRanges, [, subIdx, ], ), {, superIdx, +=, 2, ;, }, else, if, (, superRanges, [, superIdx, ]]
[+, 1, ], <=, subRanges, [, subIdx, ], ), {, superIdx, +=, 2, ;, }, else, if, (, superRanges, []
[], <=, subRanges, [, subIdx, ], ), {, superIdx, +=, 2, ;, }, else, if, (, superRanges, [, superIdx, ]]
[), {, superIdx, +=, 2, ;, }, else, if, (, superRanges, [, superIdx, ], >, subRanges, [, subIdx, ], )]
[[, subIdx, ], ), {, superIdx, +=, 2, ;, }, else, if, (, superRanges, [, superIdx, ], >, subRanges, []
[], ), {, superIdx, +=, 2, ;, }, else, if, (, superRanges, [, superIdx, ], >, subRanges, [, subIdx, ]]
[+=, 2, ;, }, else, if, (, superRanges, [, superIdx, ], >, subRanges, [, subIdx, ], ), {, return, false]
[;, }, else, if, (, superRanges, [, superIdx, ], >, subRanges, [, subIdx, ], ), {, return, false, ;, }]
[), {, return, false, ;, }, else, if, (, superRanges, [, superIdx, +, 1, ], >=, subRanges, [, subIdx, +]
[>, subRanges, [, subIdx, ], ), {, return, false, ;, }, else, if, (, superRanges, [, superIdx, +, 1, ]]
[[, superIdx, ], >, subRanges, [, subIdx, ], ), {, return, false, ;, }, else, if, (, superRanges, [, superIdx]
[], >, subRanges, [, subIdx, ], ), {, return, false, ;, }, else, if, (, superRanges, [, superIdx, +, 1]
[), {, return, false, ;, }, else, if, (, superRanges, [, superIdx, +, 1, ], >=, subRanges, [, subIdx, +]
[[, subIdx, ], ), {, return, false, ;, }, else, if, (, superRanges, [, superIdx, +, 1, ], >=, subRanges]
[], ), {, return, false, ;, }, else, if, (, superRanges, [, superIdx, +, 1, ], >=, subRanges, [, subIdx]
[;, }, else, if, (, superRanges, [, superIdx, +, 1, ], >=, subRanges, [, subIdx, +, 1, ], ), {]
[), {, subIdx, +=, 2, ;, }, else, {, return, false, ;, }, }, return, subIdx, ==, subLen, ;, }]
[>=, subRanges, [, subIdx, +, 1, ], ), {, subIdx, +=, 2, ;, }, else, {, return, false, ;, }]
[[, superIdx, +, 1, ], >=, subRanges, [, subIdx, +, 1, ], ), {, subIdx, +=, 2, ;, }, else]
[], >=, subRanges, [, subIdx, +, 1, ], ), {, subIdx, +=, 2, ;, }, else, {, return, false, ;]
[+, 1, ], >=, subRanges, [, subIdx, +, 1, ], ), {, subIdx, +=, 2, ;, }, else, {, return]
[], >=, subRanges, [, subIdx, +, 1, ], ), {, subIdx, +=, 2, ;, }, else, {, return, false, ;]
[), {, subIdx, +=, 2, ;, }, else, {, return, false, ;, }, }, return, subIdx, ==, subLen, ;, }]
[[, subIdx, +, 1, ], ), {, subIdx, +=, 2, ;, }, else, {, return, false, ;, }, }, return]
[], ), {, subIdx, +=, 2, ;, }, else, {, return, false, ;, }, }, return, subIdx, ==, subLen, ;]
[+, 1, ], ), {, subIdx, +=, 2, ;, }, else, {, return, false, ;, }, }, return, subIdx, ==]
[], ), {, subIdx, +=, 2, ;, }, else, {, return, false, ;, }, }, return, subIdx, ==, subLen, ;]
[+=, 2, ;, }, else, {, return, false, ;, }, }, return, subIdx, ==, subLen, ;, }, public, CharRanges, shift]
[;, }, else, {, return, false, ;, }, }, return, subIdx, ==, subLen, ;, }, public, CharRanges, shift, (, int]
[;, }, }, return, subIdx, ==, subLen, ;, }, public, CharRanges, shift, (, int, delta, ), {, int, n, =]
[;, }, public, CharRanges, shift, (, int, delta, ), {, int, n, =, ranges, ., length, ;, if, (, delta]
[==, subLen, ;, }, public, CharRanges, shift, (, int, delta, ), {, int, n, =, ranges, ., length, ;, if]
[;, }, public, CharRanges, shift, (, int, delta, ), {, int, n, =, ranges, ., length, ;, if, (, delta]
[;, if, (, delta, ==, 0, ||, n, ==, 0, ), {, return, this, ;, }, if, (, delta, <]
[., length, ;, if, (, delta, ==, 0, ||, n, ==, 0, ), {, return, this, ;, }, if, (]
[), {, return, this, ;, }, if, (, delta, <, 0, ), {, long, lmin, =, ranges, [, 0, ]]
[||, n, ==, 0, ), {, return, this, ;, }, if, (, delta, <, 0, ), {, long, lmin, =]
[==, 0, ||, n, ==, 0, ), {, return, this, ;, }, if, (, delta, <, 0, ), {, long]
[||, n, ==, 0, ), {, return, this, ;, }, if, (, delta, <, 0, ), {, long, lmin, =]
[), {, return, this, ;, }, if, (, delta, <, 0, ), {, long, lmin, =, ranges, [, 0, ]]
[==, 0, ), {, return, this, ;, }, if, (, delta, <, 0, ), {, long, lmin, =, ranges, []
[), {, return, this, ;, }, if, (, delta, <, 0, ), {, long, lmin, =, ranges, [, 0, ]]
[;, }, if, (, delta, <, 0, ), {, long, lmin, =, ranges, [, 0, ], +, delta, ;, if]
[), {, long, lmin, =, ranges, [, 0, ], +, delta, ;, if, (, lmin, <, Integer, ., MIN_VALUE, )]
[<, 0, ), {, long, lmin, =, ranges, [, 0, ], +, delta, ;, if, (, lmin, <, Integer, .]
[), {, long, lmin, =, ranges, [, 0, ], +, delta, ;, if, (, lmin, <, Integer, ., MIN_VALUE, )]
[;, if, (, lmin, <, Integer, ., MIN_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }, else, {]
[+, delta, ;, if, (, lmin, <, Integer, ., MIN_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }]
[[, 0, ], +, delta, ;, if, (, lmin, <, Integer, ., MIN_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, )]
[], +, delta, ;, if, (, lmin, <, Integer, ., MIN_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }]
[;, if, (, lmin, <, Integer, ., MIN_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }, else, {]
[), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }, else, {, long, lmax, =, ranges, [, n, -, 1]
[<, Integer, ., MIN_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }, else, {, long, lmax, =, ranges]
[), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }, else, {, long, lmax, =, ranges, [, n, -, 1]
[., MIN_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }, else, {, long, lmax, =, ranges, [, n]
[;, }, }, else, {, long, lmax, =, ranges, [, n, -, 1, ], +, delta, ;, if, (, lmax]
[;, if, (, lmax, >, Integer, ., MAX_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }, int, []
[+, delta, ;, if, (, lmax, >, Integer, ., MAX_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }]
[[, n, -, 1, ], +, delta, ;, if, (, lmax, >, Integer, ., MAX_VALUE, ), {, throw, new, IndexOutOfBoundsException]
[], +, delta, ;, if, (, lmax, >, Integer, ., MAX_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }]
[-, 1, ], +, delta, ;, if, (, lmax, >, Integer, ., MAX_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, )]
[], +, delta, ;, if, (, lmax, >, Integer, ., MAX_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }]
[;, if, (, lmax, >, Integer, ., MAX_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }, int, []
[), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }, int, [, ], shiftedRanges, =, new, int, [, n, ]]
[>, Integer, ., MAX_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }, int, [, ], shiftedRanges, =, new]
[), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }, int, [, ], shiftedRanges, =, new, int, [, n, ]]
[., MAX_VALUE, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, }, int, [, ], shiftedRanges, =, new, int, []
[;, }, }, int, [, ], shiftedRanges, =, new, int, [, n, ], ;, for, (, int, i, =, n]
[;, for, (, int, i, =, n, ;, --, i, >=, 0, ;, ), {, shiftedRanges, [, i, ], =]
[], ;, for, (, int, i, =, n, ;, --, i, >=, 0, ;, ), {, shiftedRanges, [, i, ]]
[;, --, i, >=, 0, ;, ), {, shiftedRanges, [, i, ], =, ranges, [, i, ], +, delta, ;]
[;, ), {, shiftedRanges, [, i, ], =, ranges, [, i, ], +, delta, ;, }, return, new, CharRanges, (]
[>=, 0, ;, ), {, shiftedRanges, [, i, ], =, ranges, [, i, ], +, delta, ;, }, return, new]
[>=, 0, ;, ), {, shiftedRanges, [, i, ], =, ranges, [, i, ], +, delta, ;, }, return, new]
[;, ), {, shiftedRanges, [, i, ], =, ranges, [, i, ], +, delta, ;, }, return, new, CharRanges, (]
[=, ranges, [, i, ], +, delta, ;, }, return, new, CharRanges, (, shiftedRanges, ), ;, }, @, Override, public]
[[, i, ], =, ranges, [, i, ], +, delta, ;, }, return, new, CharRanges, (, shiftedRanges, ), ;, }]
[], =, ranges, [, i, ], +, delta, ;, }, return, new, CharRanges, (, shiftedRanges, ), ;, }, @, Override]
[;, }, return, new, CharRanges, (, shiftedRanges, ), ;, }, @, Override, public, String, toString, (, ), {, StringBuilder, sb]
[+, delta, ;, }, return, new, CharRanges, (, shiftedRanges, ), ;, }, @, Override, public, String, toString, (, ), {]
[[, i, ], +, delta, ;, }, return, new, CharRanges, (, shiftedRanges, ), ;, }, @, Override, public, String, toString]
[], +, delta, ;, }, return, new, CharRanges, (, shiftedRanges, ), ;, }, @, Override, public, String, toString, (, )]
[;, }, return, new, CharRanges, (, shiftedRanges, ), ;, }, @, Override, public, String, toString, (, ), {, StringBuilder, sb]
[;, }, @, Override, public, String, toString, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, .]
[), ;, }, @, Override, public, String, toString, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb]
[;, sb, ., append, (, '[', ), ;, for, (, int, i, =, 0, ;, i, <, ranges, ., length]
[;, for, (, int, i, =, 0, ;, i, <, ranges, ., length, ;, ++, i, ), {, if, (]
[., append, (, '[', ), ;, for, (, int, i, =, 0, ;, i, <, ranges, ., length, ;, ++]
[), ;, for, (, int, i, =, 0, ;, i, <, ranges, ., length, ;, ++, i, ), {, if]
[;, i, <, ranges, ., length, ;, ++, i, ), {, if, (, (, i, &, 1, ), !=, 0]
[;, ++, i, ), {, if, (, (, i, &, 1, ), !=, 0, &&, ranges, [, i, ], ==]
[<, ranges, ., length, ;, ++, i, ), {, if, (, (, i, &, 1, ), !=, 0, &&, ranges]
[;, ++, i, ), {, if, (, (, i, &, 1, ), !=, 0, &&, ranges, [, i, ], ==]
[., length, ;, ++, i, ), {, if, (, (, i, &, 1, ), !=, 0, &&, ranges, [, i]
[), {, if, (, (, i, &, 1, ), !=, 0, &&, ranges, [, i, ], ==, ranges, [, i]
[), {, if, (, (, i, &, 1, ), !=, 0, &&, ranges, [, i, ], ==, ranges, [, i]
[), {, continue, ;, }, if, (, i, !=, 0, ), {, sb, ., append, (, (, i, &, 1]
[&&, ranges, [, i, ], ==, ranges, [, i, -, 1, ], +, 1, ), {, continue, ;, }, if]
[!=, 0, &&, ranges, [, i, ], ==, ranges, [, i, -, 1, ], +, 1, ), {, continue, ;]
[), !=, 0, &&, ranges, [, i, ], ==, ranges, [, i, -, 1, ], +, 1, ), {, continue]
[&, 1, ), !=, 0, &&, ranges, [, i, ], ==, ranges, [, i, -, 1, ], +, 1, )]
[), !=, 0, &&, ranges, [, i, ], ==, ranges, [, i, -, 1, ], +, 1, ), {, continue]
[&&, ranges, [, i, ], ==, ranges, [, i, -, 1, ], +, 1, ), {, continue, ;, }, if]
[), {, continue, ;, }, if, (, i, !=, 0, ), {, sb, ., append, (, (, i, &, 1]
[==, ranges, [, i, -, 1, ], +, 1, ), {, continue, ;, }, if, (, i, !=, 0, )]
[[, i, ], ==, ranges, [, i, -, 1, ], +, 1, ), {, continue, ;, }, if, (, i]
[], ==, ranges, [, i, -, 1, ], +, 1, ), {, continue, ;, }, if, (, i, !=, 0]
[), {, continue, ;, }, if, (, i, !=, 0, ), {, sb, ., append, (, (, i, &, 1]
[+, 1, ), {, continue, ;, }, if, (, i, !=, 0, ), {, sb, ., append, (, (, i]
[[, i, -, 1, ], +, 1, ), {, continue, ;, }, if, (, i, !=, 0, ), {, sb]
[], +, 1, ), {, continue, ;, }, if, (, i, !=, 0, ), {, sb, ., append, (, (]
[-, 1, ], +, 1, ), {, continue, ;, }, if, (, i, !=, 0, ), {, sb, ., append]
[], +, 1, ), {, continue, ;, }, if, (, i, !=, 0, ), {, sb, ., append, (, (]
[), {, continue, ;, }, if, (, i, !=, 0, ), {, sb, ., append, (, (, i, &, 1]
[), {, sb, ., append, (, (, i, &, 1, ), ==, 0, ?, ' ', :, '-', ), ;, }]
[!=, 0, ), {, sb, ., append, (, (, i, &, 1, ), ==, 0, ?, ' ', :, '-', )]
[), {, sb, ., append, (, (, i, &, 1, ), ==, 0, ?, ' ', :, '-', ), ;, }]
[;, }, sb, ., append, (, "0x", ), ., append, (, Integer, ., toString, (, ranges, [, i, ], -]
[., append, (, (, i, &, 1, ), ==, 0, ?, ' ', :, '-', ), ;, }, sb, ., append]
[), ;, }, sb, ., append, (, "0x", ), ., append, (, Integer, ., toString, (, ranges, [, i, ]]
[?, ' ', :, '-', ), ;, }, sb, ., append, (, "0x", ), ., append, (, Integer, ., toString, (]
[==, 0, ?, ' ', :, '-', ), ;, }, sb, ., append, (, "0x", ), ., append, (, Integer, .]
[), ==, 0, ?, ' ', :, '-', ), ;, }, sb, ., append, (, "0x", ), ., append, (, Integer]
[&, 1, ), ==, 0, ?, ' ', :, '-', ), ;, }, sb, ., append, (, "0x", ), ., append]
[), ==, 0, ?, ' ', :, '-', ), ;, }, sb, ., append, (, "0x", ), ., append, (, Integer]
[?, ' ', :, '-', ), ;, }, sb, ., append, (, "0x", ), ., append, (, Integer, ., toString, (]
[:, '-', ), ;, }, sb, ., append, (, "0x", ), ., append, (, Integer, ., toString, (, ranges, []
[), ;, }, sb, ., append, (, "0x", ), ., append, (, Integer, ., toString, (, ranges, [, i, ]]
[;, }, sb, ., append, (, ']', ), ;, return, sb, ., toString, (, ), ;, }, @, Override, public]
[., append, (, Integer, ., toString, (, ranges, [, i, ], -, (, i, &, 1, ), ,, 16, )]
[., append, (, "0x", ), ., append, (, Integer, ., toString, (, ranges, [, i, ], -, (, i, &]
[), ., append, (, Integer, ., toString, (, ranges, [, i, ], -, (, i, &, 1, ), ,, 16]
[), ;, }, sb, ., append, (, ']', ), ;, return, sb, ., toString, (, ), ;, }, @, Override]
[., toString, (, ranges, [, i, ], -, (, i, &, 1, ), ,, 16, ), ), ;, }, sb]
[,, 16, ), ), ;, }, sb, ., append, (, ']', ), ;, return, sb, ., toString, (, ), ;]
[-, (, i, &, 1, ), ,, 16, ), ), ;, }, sb, ., append, (, ']', ), ;, return]
[[, i, ], -, (, i, &, 1, ), ,, 16, ), ), ;, }, sb, ., append, (, ']']
[], -, (, i, &, 1, ), ,, 16, ), ), ;, }, sb, ., append, (, ']', ), ;]
[,, 16, ), ), ;, }, sb, ., append, (, ']', ), ;, return, sb, ., toString, (, ), ;]
[), ,, 16, ), ), ;, }, sb, ., append, (, ']', ), ;, return, sb, ., toString, (, )]
[&, 1, ), ,, 16, ), ), ;, }, sb, ., append, (, ']', ), ;, return, sb, ., toString]
[), ,, 16, ), ), ;, }, sb, ., append, (, ']', ), ;, return, sb, ., toString, (, )]
[), ), ;, }, sb, ., append, (, ']', ), ;, return, sb, ., toString, (, ), ;, }, @]
[;, return, sb, ., toString, (, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if]
[., append, (, ']', ), ;, return, sb, ., toString, (, ), ;, }, @, Override, public, boolean, equals, (]
[), ;, return, sb, ., toString, (, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {]
[;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (, o, instanceof, CharRanges, )]
[., toString, (, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (]
[), {, return, false, ;, }, return, Arrays, ., equals, (, this, ., ranges, ,, (, (, CharRanges, ), o]
[), {, return, false, ;, }, return, Arrays, ., equals, (, this, ., ranges, ,, (, (, CharRanges, ), o]
[), ), {, return, false, ;, }, return, Arrays, ., equals, (, this, ., ranges, ,, (, (, CharRanges, )]
[instanceof, CharRanges, ), ), {, return, false, ;, }, return, Arrays, ., equals, (, this, ., ranges, ,, (, (]
[;, }, return, Arrays, ., equals, (, this, ., ranges, ,, (, (, CharRanges, ), o, ), ., ranges, )]
[;, }, @, Override, public, int, hashCode, (, ), {, int, hc, =, 0, ;, for, (, int, i, =]
[., equals, (, this, ., ranges, ,, (, (, CharRanges, ), o, ), ., ranges, ), ;, }, @, Override]
[,, (, (, CharRanges, ), o, ), ., ranges, ), ;, }, @, Override, public, int, hashCode, (, ), {]
[., ranges, ,, (, (, CharRanges, ), o, ), ., ranges, ), ;, }, @, Override, public, int, hashCode, (]
[), ;, }, @, Override, public, int, hashCode, (, ), {, int, hc, =, 0, ;, for, (, int, i]
[., ranges, ), ;, }, @, Override, public, int, hashCode, (, ), {, int, hc, =, 0, ;, for, (]
[), ., ranges, ), ;, }, @, Override, public, int, hashCode, (, ), {, int, hc, =, 0, ;, for]
[), ., ranges, ), ;, }, @, Override, public, int, hashCode, (, ), {, int, hc, =, 0, ;, for]
[;, for, (, int, i, =, 0, ,, n, =, Math, ., min, (, 16, ,, ranges, ., length, )]
[,, n, =, Math, ., min, (, 16, ,, ranges, ., length, ), ;, i, <, n, ;, ++, i]
[;, i, <, n, ;, ++, i, ), {, hc, =, (, hc, <<, 2, ), +, ranges, [, i]
[., min, (, 16, ,, ranges, ., length, ), ;, i, <, n, ;, ++, i, ), {, hc, =]
[,, ranges, ., length, ), ;, i, <, n, ;, ++, i, ), {, hc, =, (, hc, <<, 2]
[), ;, i, <, n, ;, ++, i, ), {, hc, =, (, hc, <<, 2, ), +, ranges, []
[., length, ), ;, i, <, n, ;, ++, i, ), {, hc, =, (, hc, <<, 2, ), +]
[;, ++, i, ), {, hc, =, (, hc, <<, 2, ), +, ranges, [, i, ], ;, }, return]
[<, n, ;, ++, i, ), {, hc, =, (, hc, <<, 2, ), +, ranges, [, i, ], ;]
[;, ++, i, ), {, hc, =, (, hc, <<, 2, ), +, ranges, [, i, ], ;, }, return]
[), {, hc, =, (, hc, <<, 2, ), +, ranges, [, i, ], ;, }, return, hc, ;, }]
[), {, hc, =, (, hc, <<, 2, ), +, ranges, [, i, ], ;, }, return, hc, ;, }]
[=, (, hc, <<, 2, ), +, ranges, [, i, ], ;, }, return, hc, ;, }, }]
[;, }, return, hc, ;, }, }]
[+, ranges, [, i, ], ;, }, return, hc, ;, }, }]
[), +, ranges, [, i, ], ;, }, return, hc, ;, }, }]
[<<, 2, ), +, ranges, [, i, ], ;, }, return, hc, ;, }, }]
[), +, ranges, [, i, ], ;, }, return, hc, ;, }, }]
[;, }, return, hc, ;, }, }]
[[, i, ], ;, }, return, hc, ;, }, }]
[], ;, }, return, hc, ;, }, }]
[;, }, }]
