[,, DifferentiableUnivariateFunction, {, private, final, double, lo, ;, private, final, double, hi, ;, public, Sigmoid, (, ), {, this, (]
[{, private, final, double, lo, ;, private, final, double, hi, ;, public, Sigmoid, (, ), {, this, (, 0, ,]
[), {, this, (, 0, ,, 1, ), ;, }, public, Sigmoid, (, double, lo, ,, double, hi, ), {]
[), {, this, (, 0, ,, 1, ), ;, }, public, Sigmoid, (, double, lo, ,, double, hi, ), {]
[0, ,, 1, ), ;, }, public, Sigmoid, (, double, lo, ,, double, hi, ), {, this, ., lo, =]
[1, ), ;, }, public, Sigmoid, (, double, lo, ,, double, hi, ), {, this, ., lo, =, lo, ;]
[1, ), ;, }, public, Sigmoid, (, double, lo, ,, double, hi, ), {, this, ., lo, =, lo, ;]
[public, Sigmoid, (, double, lo, ,, double, hi, ), {, this, ., lo, =, lo, ;, this, ., hi, =]
[lo, =, lo, ;, this, ., hi, =, hi, ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return]
[lo, =, lo, ;, this, ., hi, =, hi, ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return]
[lo, =, lo, ;, this, ., hi, =, hi, ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return]
[this, ., hi, =, hi, ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (]
[., toDifferentiableUnivariateFunction, (, this, ), ., derivative, (, ), ;, }, public, double, value, (, double, x, ), {, return]
[(, this, ), ., derivative, (, ), ;, }, public, double, value, (, double, x, ), {, return, value, (]
[), ., derivative, (, ), ;, }, public, double, value, (, double, x, ), {, return, value, (, x, ,]
[derivative, (, ), ;, }, public, double, value, (, double, x, ), {, return, value, (, x, ,, lo, ,]
[Parametric, implements, ParametricUnivariateFunction, {, public, double, value, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {]
[ParametricUnivariateFunction, {, public, double, value, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (]
[value, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return]
[value, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return]
[,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return, Sigmoid, ., value, (]
[..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return, Sigmoid, ., value, (, x, ,]
[..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return, Sigmoid, ., value, (, x, ,]
[), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return, Sigmoid, ., value, (, x, ,, param, []
[,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return, Sigmoid, ., value, (, x, ,, param, [, 0, ], ,]
[,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return, Sigmoid, ., value, (, x, ,, param, [, 0, ], ,]
[{, validateParameters, (, param, ), ;, return, Sigmoid, ., value, (, x, ,, param, [, 0, ], ,, param, []
[;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {]
[public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (]
[x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, final, double, invExp1, =]
[x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, final, double, invExp1, =]
[double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, final, double, invExp1, =, 1, /]
[..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, final, double, invExp1, =, 1, /, (]
[..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, final, double, invExp1, =, 1, /, (]
[), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, final, double, invExp1, =, 1, /, (, 1, +]
[), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, final, double, invExp1, =, 1, /, (, 1, +]
[DimensionMismatchException, {, validateParameters, (, param, ), ;, final, double, invExp1, =, 1, /, (, 1, +, FastMath, ., exp, (]
[{, validateParameters, (, param, ), ;, final, double, invExp1, =, 1, /, (, 1, +, FastMath, ., exp, (, -]
[;, final, double, invExp1, =, 1, /, (, 1, +, FastMath, ., exp, (, -, x, ), ), ;, return]
[=, 1, /, (, 1, +, FastMath, ., exp, (, -, x, ), ), ;, return, new, double, [, ]]
[1, /, (, 1, +, FastMath, ., exp, (, -, x, ), ), ;, return, new, double, [, ], {]
[1, /, (, 1, +, FastMath, ., exp, (, -, x, ), ), ;, return, new, double, [, ], {]
[(, 1, +, FastMath, ., exp, (, -, x, ), ), ;, return, new, double, [, ], {, 1, -]
[+, FastMath, ., exp, (, -, x, ), ), ;, return, new, double, [, ], {, 1, -, invExp1, ,]
[invExp1, }, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (]
[invExp1, }, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (]
[;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (, param, ==]
[validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (, param, ==, null, ), {, throw]
[NullArgumentException, ,, DimensionMismatchException, {, if, (, param, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[NullArgumentException, ,, DimensionMismatchException, {, if, (, param, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[NullArgumentException, ,, DimensionMismatchException, {, if, (, param, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[if, (, param, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=]
[null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 2, ), {, throw]
[throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 2, ), {, throw, new, DimensionMismatchException, (]
[throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 2, ), {, throw, new, DimensionMismatchException, (]
[), ;, }, if, (, param, ., length, !=, 2, ), {, throw, new, DimensionMismatchException, (, param, ., length, ,]
[;, }, }, }, private, static, double, value, (, double, x, ,, double, lo, ,, double, hi, ), {, return]
[;, }, }, }, private, static, double, value, (, double, x, ,, double, lo, ,, double, hi, ), {, return]
[}, }, private, static, double, value, (, double, x, ,, double, lo, ,, double, hi, ), {, return, lo, +]
[}, }, private, static, double, value, (, double, x, ,, double, lo, ,, double, hi, ), {, return, lo, +]
[}, private, static, double, value, (, double, x, ,, double, lo, ,, double, hi, ), {, return, lo, +, (]
[}, private, static, double, value, (, double, x, ,, double, lo, ,, double, hi, ), {, return, lo, +, (]
[static, double, value, (, double, x, ,, double, lo, ,, double, hi, ), {, return, lo, +, (, hi, -]
[(, double, x, ,, double, lo, ,, double, hi, ), {, return, lo, +, (, hi, -, lo, ), /]
[double, x, ,, double, lo, ,, double, hi, ), {, return, lo, +, (, hi, -, lo, ), /, (]
[double, x, ,, double, lo, ,, double, hi, ), {, return, lo, +, (, hi, -, lo, ), /, (]
[,, double, lo, ,, double, hi, ), {, return, lo, +, (, hi, -, lo, ), /, (, 1, +]
[,, double, lo, ,, double, hi, ), {, return, lo, +, (, hi, -, lo, ), /, (, 1, +]
[double, hi, ), {, return, lo, +, (, hi, -, lo, ), /, (, 1, +, FastMath, ., exp, (]
[hi, ), {, return, lo, +, (, hi, -, lo, ), /, (, 1, +, FastMath, ., exp, (, -]
[), ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, double, [, ], f, =]
[}, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, double, [, ], f, =, new, double, []
[}, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, double, [, ], f, =, new, double, []
[}, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, double, [, ], f, =, new, double, []
[DerivativeStructure, t, ), throws, DimensionMismatchException, {, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +]
[[, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;, final, double, exp, =]
[[, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;, final, double, exp, =]
[new, double, [, t, ., getOrder, (, ), +, 1, ], ;, final, double, exp, =, FastMath, ., exp, (]
[double, [, t, ., getOrder, (, ), +, 1, ], ;, final, double, exp, =, FastMath, ., exp, (, -]
[double, [, t, ., getOrder, (, ), +, 1, ], ;, final, double, exp, =, FastMath, ., exp, (, -]
[], ;, final, double, exp, =, FastMath, ., exp, (, -, t, ., getValue, (, ), ), ;, if, (]
[], ;, final, double, exp, =, FastMath, ., exp, (, -, t, ., getValue, (, ), ), ;, if, (]
[exp, =, FastMath, ., exp, (, -, t, ., getValue, (, ), ), ;, if, (, Double, ., isInfinite, (]
[exp, (, -, t, ., getValue, (, ), ), ;, if, (, Double, ., isInfinite, (, exp, ), ), {]
[exp, (, -, t, ., getValue, (, ), ), ;, if, (, Double, ., isInfinite, (, exp, ), ), {]
[-, t, ., getValue, (, ), ), ;, if, (, Double, ., isInfinite, (, exp, ), ), {, f, []
[getValue, (, ), ), ;, if, (, Double, ., isInfinite, (, exp, ), ), {, f, [, 0, ], =]
[), ), ;, if, (, Double, ., isInfinite, (, exp, ), ), {, f, [, 0, ], =, lo, ;]
[), ), ;, if, (, Double, ., isInfinite, (, exp, ), ), {, f, [, 0, ], =, lo, ;]
[(, Double, ., isInfinite, (, exp, ), ), {, f, [, 0, ], =, lo, ;, Arrays, ., fill, (]
[., isInfinite, (, exp, ), ), {, f, [, 0, ], =, lo, ;, Arrays, ., fill, (, f, ,]
[(, exp, ), ), {, f, [, 0, ], =, lo, ;, Arrays, ., fill, (, f, ,, 1, ,]
[(, exp, ), ), {, f, [, 0, ], =, lo, ;, Arrays, ., fill, (, f, ,, 1, ,]
[{, f, [, 0, ], =, lo, ;, Arrays, ., fill, (, f, ,, 1, ,, f, ., length, ,]
[f, ,, 1, ,, f, ., length, ,, 0.0, ), ;, }, else, {, final, double, [, ], p, =]
[,, f, ., length, ,, 0.0, ), ;, }, else, {, final, double, [, ], p, =, new, double, []
[,, f, ., length, ,, 0.0, ), ;, }, else, {, final, double, [, ], p, =, new, double, []
[else, {, final, double, [, ], p, =, new, double, [, f, ., length, ], ;, final, double, inv, =]
[else, {, final, double, [, ], p, =, new, double, [, f, ., length, ], ;, final, double, inv, =]
[final, double, [, ], p, =, new, double, [, f, ., length, ], ;, final, double, inv, =, 1, /]
[double, [, ], p, =, new, double, [, f, ., length, ], ;, final, double, inv, =, 1, /, (]
[double, [, ], p, =, new, double, [, f, ., length, ], ;, final, double, inv, =, 1, /, (]
[], p, =, new, double, [, f, ., length, ], ;, final, double, inv, =, 1, /, (, 1, +]
[f, ., length, ], ;, final, double, inv, =, 1, /, (, 1, +, exp, ), ;, double, coeff, =]
[f, ., length, ], ;, final, double, inv, =, 1, /, (, 1, +, exp, ), ;, double, coeff, =]
[length, ], ;, final, double, inv, =, 1, /, (, 1, +, exp, ), ;, double, coeff, =, hi, -]
[1, /, (, 1, +, exp, ), ;, double, coeff, =, hi, -, lo, ;, for, (, int, n, =]
[(, 1, +, exp, ), ;, double, coeff, =, hi, -, lo, ;, for, (, int, n, =, 0, ;]
[(, 1, +, exp, ), ;, double, coeff, =, hi, -, lo, ;, for, (, int, n, =, 0, ;]
[+, exp, ), ;, double, coeff, =, hi, -, lo, ;, for, (, int, n, =, 0, ;, n, <]
[+, exp, ), ;, double, coeff, =, hi, -, lo, ;, for, (, int, n, =, 0, ;, n, <]
[double, coeff, =, hi, -, lo, ;, for, (, int, n, =, 0, ;, n, <, f, ., length, ;]
[coeff, =, hi, -, lo, ;, for, (, int, n, =, 0, ;, n, <, f, ., length, ;, ++]
[for, (, int, n, =, 0, ;, n, <, f, ., length, ;, ++, n, ), {, double, v, =]
[int, n, =, 0, ;, n, <, f, ., length, ;, ++, n, ), {, double, v, =, 0, ;]
[int, n, =, 0, ;, n, <, f, ., length, ;, ++, n, ), {, double, v, =, 0, ;]
[=, 0, ;, n, <, f, ., length, ;, ++, n, ), {, double, v, =, 0, ;, p, []
[n, <, f, ., length, ;, ++, n, ), {, double, v, =, 0, ;, p, [, n, ], =]
[n, ), {, double, v, =, 0, ;, p, [, n, ], =, 1, ;, for, (, int, k, =]
[{, double, v, =, 0, ;, p, [, n, ], =, 1, ;, for, (, int, k, =, n, ;]
[{, double, v, =, 0, ;, p, [, n, ], =, 1, ;, for, (, int, k, =, n, ;]
[v, =, 0, ;, p, [, n, ], =, 1, ;, for, (, int, k, =, n, ;, k, >=]
[0, ;, p, [, n, ], =, 1, ;, for, (, int, k, =, n, ;, k, >=, 0, ;]
[;, p, [, n, ], =, 1, ;, for, (, int, k, =, n, ;, k, >=, 0, ;, --]
[n, ], =, 1, ;, for, (, int, k, =, n, ;, k, >=, 0, ;, --, k, ), {]
[=, 1, ;, for, (, int, k, =, n, ;, k, >=, 0, ;, --, k, ), {, v, =]
[=, 1, ;, for, (, int, k, =, n, ;, k, >=, 0, ;, --, k, ), {, v, =]
[=, 1, ;, for, (, int, k, =, n, ;, k, >=, 0, ;, --, k, ), {, v, =]
[;, for, (, int, k, =, n, ;, k, >=, 0, ;, --, k, ), {, v, =, v, *]
[(, int, k, =, n, ;, k, >=, 0, ;, --, k, ), {, v, =, v, *, exp, +]
[(, int, k, =, n, ;, k, >=, 0, ;, --, k, ), {, v, =, v, *, exp, +]
[k, =, n, ;, k, >=, 0, ;, --, k, ), {, v, =, v, *, exp, +, p, []
[>=, 0, ;, --, k, ), {, v, =, v, *, exp, +, p, [, k, ], ;, if, (]
[>=, 0, ;, --, k, ), {, v, =, v, *, exp, +, p, [, k, ], ;, if, (]
[;, --, k, ), {, v, =, v, *, exp, +, p, [, k, ], ;, if, (, k, >]
[), {, v, =, v, *, exp, +, p, [, k, ], ;, if, (, k, >, 1, ), {]
[), {, v, =, v, *, exp, +, p, [, k, ], ;, if, (, k, >, 1, ), {]
[v, =, v, *, exp, +, p, [, k, ], ;, if, (, k, >, 1, ), {, p, []
[v, =, v, *, exp, +, p, [, k, ], ;, if, (, k, >, 1, ), {, p, []
[v, *, exp, +, p, [, k, ], ;, if, (, k, >, 1, ), {, p, [, k, -]
[+, p, [, k, ], ;, if, (, k, >, 1, ), {, p, [, k, -, 1, ], =]
[+, p, [, k, ], ;, if, (, k, >, 1, ), {, p, [, k, -, 1, ], =]
[+, p, [, k, ], ;, if, (, k, >, 1, ), {, p, [, k, -, 1, ], =]
[p, [, k, ], ;, if, (, k, >, 1, ), {, p, [, k, -, 1, ], =, (]
[p, [, k, ], ;, if, (, k, >, 1, ), {, p, [, k, -, 1, ], =, (]
[p, [, k, ], ;, if, (, k, >, 1, ), {, p, [, k, -, 1, ], =, (]
[k, ], ;, if, (, k, >, 1, ), {, p, [, k, -, 1, ], =, (, n, -]
[;, if, (, k, >, 1, ), {, p, [, k, -, 1, ], =, (, n, -, k, +]
[k, >, 1, ), {, p, [, k, -, 1, ], =, (, n, -, k, +, 2, ), *]
[k, >, 1, ), {, p, [, k, -, 1, ], =, (, n, -, k, +, 2, ), *]
[1, ), {, p, [, k, -, 1, ], =, (, n, -, k, +, 2, ), *, p, []
[1, ), {, p, [, k, -, 1, ], =, (, n, -, k, +, 2, ), *, p, []
[{, p, [, k, -, 1, ], =, (, n, -, k, +, 2, ), *, p, [, k, -]
[k, -, 1, ], =, (, n, -, k, +, 2, ), *, p, [, k, -, 2, ], -]
[k, -, 1, ], =, (, n, -, k, +, 2, ), *, p, [, k, -, 2, ], -]
[-, 1, ], =, (, n, -, k, +, 2, ), *, p, [, k, -, 2, ], -, (]
[-, 1, ], =, (, n, -, k, +, 2, ), *, p, [, k, -, 2, ], -, (]
[], =, (, n, -, k, +, 2, ), *, p, [, k, -, 2, ], -, (, k, -]
[n, -, k, +, 2, ), *, p, [, k, -, 2, ], -, (, k, -, 1, ), *]
[n, -, k, +, 2, ), *, p, [, k, -, 2, ], -, (, k, -, 1, ), *]
[k, +, 2, ), *, p, [, k, -, 2, ], -, (, k, -, 1, ), *, p, []
[k, +, 2, ), *, p, [, k, -, 2, ], -, (, k, -, 1, ), *, p, []
[2, ), *, p, [, k, -, 2, ], -, (, k, -, 1, ), *, p, [, k, -]
[-, 2, ], -, (, k, -, 1, ), *, p, [, k, -, 1, ], ;, }, else, {]
[-, 2, ], -, (, k, -, 1, ), *, p, [, k, -, 1, ], ;, }, else, {]
[], -, (, k, -, 1, ), *, p, [, k, -, 1, ], ;, }, else, {, p, []
[k, -, 1, ), *, p, [, k, -, 1, ], ;, }, else, {, p, [, 0, ], =]
[*, p, [, k, -, 1, ], ;, }, else, {, p, [, 0, ], =, 0, ;, }, }]
[[, k, -, 1, ], ;, }, else, {, p, [, 0, ], =, 0, ;, }, }, coeff, *=]
[-, 1, ], ;, }, else, {, p, [, 0, ], =, 0, ;, }, }, coeff, *=, inv, ;]
[-, 1, ], ;, }, else, {, p, [, 0, ], =, 0, ;, }, }, coeff, *=, inv, ;]
[], ;, }, else, {, p, [, 0, ], =, 0, ;, }, }, coeff, *=, inv, ;, f, []
[else, {, p, [, 0, ], =, 0, ;, }, }, coeff, *=, inv, ;, f, [, n, ], =]
[else, {, p, [, 0, ], =, 0, ;, }, }, coeff, *=, inv, ;, f, [, n, ], =]
[p, [, 0, ], =, 0, ;, }, }, coeff, *=, inv, ;, f, [, n, ], =, coeff, *]
[], =, 0, ;, }, }, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, v, ;, }]
[], =, 0, ;, }, }, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, v, ;, }]
[0, ;, }, }, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, v, ;, }, f, []
[}, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, v, ;, }, f, [, 0, ], +=]
[;, f, [, n, ], =, coeff, *, v, ;, }, f, [, 0, ], +=, lo, ;, }, return]
[;, f, [, n, ], =, coeff, *, v, ;, }, f, [, 0, ], +=, lo, ;, }, return]
[], =, coeff, *, v, ;, }, f, [, 0, ], +=, lo, ;, }, return, t, ., compose, (]
