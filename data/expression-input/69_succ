[;, static, final, DiagnosticType, CIRCULAR_DEPENDENCY_ERROR, =, DiagnosticType, ., error, (, "JSC_CIRCULAR_DEP", ,, "Circular dependency detected: {0}", ), ;, private, final, String, name, ;]
[;, private, final, String, name, ;, private, final, List, <, CompilerInput, >, inputs, =, new, ArrayList, <, CompilerInput, >, (]
[., error, (, "JSC_CIRCULAR_DEP", ,, "Circular dependency detected: {0}", ), ;, private, final, String, name, ;, private, final, List, <, CompilerInput, >, inputs]
[,, "Circular dependency detected: {0}", ), ;, private, final, String, name, ;, private, final, List, <, CompilerInput, >, inputs, =, new, ArrayList, <]
[), ;, private, final, String, name, ;, private, final, List, <, CompilerInput, >, inputs, =, new, ArrayList, <, CompilerInput, >]
[;, private, final, List, <, JSModule, >, deps, =, new, ArrayList, <, JSModule, >, (, ), ;, private, int, depth]
[;, private, int, depth, ;, public, JSModule, (, String, name, ), {, this, ., name, =, name, ;, this, .]
[=, name, ;, this, ., depth, =, -, 1, ;, }, @, Override, public, String, getName, (, ), {, return]
[., name, =, name, ;, this, ., depth, =, -, 1, ;, }, @, Override, public, String, getName, (, )]
[;, this, ., depth, =, -, 1, ;, }, @, Override, public, String, getName, (, ), {, return, name, ;]
[=, -, 1, ;, }, @, Override, public, String, getName, (, ), {, return, name, ;, }, @, Override, public]
[., depth, =, -, 1, ;, }, @, Override, public, String, getName, (, ), {, return, name, ;, }, @]
[;, }, @, Override, public, String, getName, (, ), {, return, name, ;, }, @, Override, public, List, <, String]
[;, }, @, Override, public, String, getName, (, ), {, return, name, ;, }, @, Override, public, List, <, String]
[;, }, @, Override, public, List, <, String, >, getProvides, (, ), {, return, ImmutableList, ., <, String, >, of]
[;, }, @, Override, public, List, <, String, >, getRequires, (, ), {, ImmutableList, ., Builder, <, String, >, builder]
[., <, String, >, of, (, name, ), ;, }, @, Override, public, List, <, String, >, getRequires, (, )]
[), ;, }, @, Override, public, List, <, String, >, getRequires, (, ), {, ImmutableList, ., Builder, <, String, >]
[;, for, (, JSModule, m, :, deps, ), {, builder, ., add, (, m, ., getName, (, ), ), ;]
[., builder, (, ), ;, for, (, JSModule, m, :, deps, ), {, builder, ., add, (, m, ., getName]
[), {, builder, ., add, (, m, ., getName, (, ), ), ;, }, return, builder, ., build, (, )]
[;, }, return, builder, ., build, (, ), ;, }, @, Override, public, String, getPathRelativeToClosureBase, (, ), {, throw, new]
[., add, (, m, ., getName, (, ), ), ;, }, return, builder, ., build, (, ), ;, }, @]
[), ;, }, return, builder, ., build, (, ), ;, }, @, Override, public, String, getPathRelativeToClosureBase, (, ), {, throw]
[., getName, (, ), ), ;, }, return, builder, ., build, (, ), ;, }, @, Override, public, String, getPathRelativeToClosureBase]
[;, }, @, Override, public, String, getPathRelativeToClosureBase, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, public, void, add]
[., build, (, ), ;, }, @, Override, public, String, getPathRelativeToClosureBase, (, ), {, throw, new, UnsupportedOperationException, (, ), ;]
[;, }, public, void, add, (, SourceFile, file, ), {, add, (, new, CompilerInput, (, file, ), ), ;, }]
[;, }, public, void, addFirst, (, SourceFile, file, ), {, addFirst, (, new, CompilerInput, (, file, ), ), ;, }]
[), ;, }, public, void, addFirst, (, SourceFile, file, ), {, addFirst, (, new, CompilerInput, (, file, ), ), ;]
[), ), ;, }, public, void, addFirst, (, SourceFile, file, ), {, addFirst, (, new, CompilerInput, (, file, ), )]
[;, }, public, void, add, (, CompilerInput, input, ), {, inputs, ., add, (, input, ), ;, input, ., setModule]
[), ;, }, public, void, add, (, CompilerInput, input, ), {, inputs, ., add, (, input, ), ;, input, .]
[), ), ;, }, public, void, add, (, CompilerInput, input, ), {, inputs, ., add, (, input, ), ;, input]
[;, input, ., setModule, (, this, ), ;, }, void, addAndOverrideModule, (, CompilerInput, input, ), {, inputs, ., add, (]
[., add, (, input, ), ;, input, ., setModule, (, this, ), ;, }, void, addAndOverrideModule, (, CompilerInput, input, )]
[), ;, input, ., setModule, (, this, ), ;, }, void, addAndOverrideModule, (, CompilerInput, input, ), {, inputs, ., add]
[;, }, void, addAndOverrideModule, (, CompilerInput, input, ), {, inputs, ., add, (, input, ), ;, input, ., overrideModule, (]
[., setModule, (, this, ), ;, }, void, addAndOverrideModule, (, CompilerInput, input, ), {, inputs, ., add, (, input, )]
[), ;, }, void, addAndOverrideModule, (, CompilerInput, input, ), {, inputs, ., add, (, input, ), ;, input, ., overrideModule]
[;, input, ., overrideModule, (, this, ), ;, }, public, void, addFirst, (, CompilerInput, input, ), {, inputs, ., add]
[., add, (, input, ), ;, input, ., overrideModule, (, this, ), ;, }, public, void, addFirst, (, CompilerInput, input]
[), ;, input, ., overrideModule, (, this, ), ;, }, public, void, addFirst, (, CompilerInput, input, ), {, inputs, .]
[;, }, public, void, addFirst, (, CompilerInput, input, ), {, inputs, ., add, (, 0, ,, input, ), ;, input]
[., overrideModule, (, this, ), ;, }, public, void, addFirst, (, CompilerInput, input, ), {, inputs, ., add, (, 0]
[), ;, }, public, void, addFirst, (, CompilerInput, input, ), {, inputs, ., add, (, 0, ,, input, ), ;]
[;, input, ., setModule, (, this, ), ;, }, public, void, addAfter, (, CompilerInput, input, ,, CompilerInput, other, ), {]
[., add, (, 0, ,, input, ), ;, input, ., setModule, (, this, ), ;, }, public, void, addAfter, (]
[,, input, ), ;, input, ., setModule, (, this, ), ;, }, public, void, addAfter, (, CompilerInput, input, ,, CompilerInput]
[), ;, input, ., setModule, (, this, ), ;, }, public, void, addAfter, (, CompilerInput, input, ,, CompilerInput, other, )]
[;, }, public, void, addAfter, (, CompilerInput, input, ,, CompilerInput, other, ), {, Preconditions, ., checkState, (, inputs, ., contains]
[., setModule, (, this, ), ;, }, public, void, addAfter, (, CompilerInput, input, ,, CompilerInput, other, ), {, Preconditions, .]
[), ;, }, public, void, addAfter, (, CompilerInput, input, ,, CompilerInput, other, ), {, Preconditions, ., checkState, (, inputs, .]
[;, inputs, ., add, (, inputs, ., indexOf, (, other, ), ,, input, ), ;, input, ., setModule, (, this]
[., checkState, (, inputs, ., contains, (, other, ), ), ;, inputs, ., add, (, inputs, ., indexOf, (, other]
[), ;, inputs, ., add, (, inputs, ., indexOf, (, other, ), ,, input, ), ;, input, ., setModule, (]
[., contains, (, other, ), ), ;, inputs, ., add, (, inputs, ., indexOf, (, other, ), ,, input, )]
[), ), ;, inputs, ., add, (, inputs, ., indexOf, (, other, ), ,, input, ), ;, input, ., setModule]
[;, input, ., setModule, (, this, ), ;, }, public, void, addDependency, (, JSModule, dep, ), {, Preconditions, ., checkNotNull]
[., add, (, inputs, ., indexOf, (, other, ), ,, input, ), ;, input, ., setModule, (, this, ), ;]
[,, input, ), ;, input, ., setModule, (, this, ), ;, }, public, void, addDependency, (, JSModule, dep, ), {]
[., indexOf, (, other, ), ,, input, ), ;, input, ., setModule, (, this, ), ;, }, public, void, addDependency]
[), ,, input, ), ;, input, ., setModule, (, this, ), ;, }, public, void, addDependency, (, JSModule, dep, )]
[), ;, input, ., setModule, (, this, ), ;, }, public, void, addDependency, (, JSModule, dep, ), {, Preconditions, .]
[;, }, public, void, addDependency, (, JSModule, dep, ), {, Preconditions, ., checkNotNull, (, dep, ), ;, Preconditions, ., checkState]
[., setModule, (, this, ), ;, }, public, void, addDependency, (, JSModule, dep, ), {, Preconditions, ., checkNotNull, (, dep]
[), ;, }, public, void, addDependency, (, JSModule, dep, ), {, Preconditions, ., checkNotNull, (, dep, ), ;, Preconditions, .]
[;, Preconditions, ., checkState, (, dep, !=, this, ), ;, deps, ., add, (, dep, ), ;, }, public, void]
[., checkNotNull, (, dep, ), ;, Preconditions, ., checkState, (, dep, !=, this, ), ;, deps, ., add, (, dep]
[), ;, Preconditions, ., checkState, (, dep, !=, this, ), ;, deps, ., add, (, dep, ), ;, }, public]
[;, deps, ., add, (, dep, ), ;, }, public, void, remove, (, CompilerInput, input, ), {, input, ., setModule]
[., checkState, (, dep, !=, this, ), ;, deps, ., add, (, dep, ), ;, }, public, void, remove, (]
[), ;, deps, ., add, (, dep, ), ;, }, public, void, remove, (, CompilerInput, input, ), {, input, .]
[!=, this, ), ;, deps, ., add, (, dep, ), ;, }, public, void, remove, (, CompilerInput, input, ), {]
[), ;, deps, ., add, (, dep, ), ;, }, public, void, remove, (, CompilerInput, input, ), {, input, .]
[;, }, public, void, remove, (, CompilerInput, input, ), {, input, ., setModule, (, null, ), ;, inputs, ., remove]
[., add, (, dep, ), ;, }, public, void, remove, (, CompilerInput, input, ), {, input, ., setModule, (, null]
[), ;, }, public, void, remove, (, CompilerInput, input, ), {, input, ., setModule, (, null, ), ;, inputs, .]
[;, inputs, ., remove, (, input, ), ;, }, public, void, removeAll, (, ), {, for, (, CompilerInput, input, :]
[., setModule, (, null, ), ;, inputs, ., remove, (, input, ), ;, }, public, void, removeAll, (, ), {]
[), ;, inputs, ., remove, (, input, ), ;, }, public, void, removeAll, (, ), {, for, (, CompilerInput, input]
[;, }, public, void, removeAll, (, ), {, for, (, CompilerInput, input, :, inputs, ), {, input, ., setModule, (]
[., remove, (, input, ), ;, }, public, void, removeAll, (, ), {, for, (, CompilerInput, input, :, inputs, )]
[), ;, }, public, void, removeAll, (, ), {, for, (, CompilerInput, input, :, inputs, ), {, input, ., setModule]
[), {, input, ., setModule, (, null, ), ;, }, inputs, ., clear, (, ), ;, }, public, List, <]
[;, }, inputs, ., clear, (, ), ;, }, public, List, <, JSModule, >, getDependencies, (, ), {, return, deps]
[., setModule, (, null, ), ;, }, inputs, ., clear, (, ), ;, }, public, List, <, JSModule, >, getDependencies]
[), ;, }, inputs, ., clear, (, ), ;, }, public, List, <, JSModule, >, getDependencies, (, ), {, return]
[;, }, public, List, <, JSModule, >, getDependencies, (, ), {, return, deps, ;, }, List, <, String, >, getSortedDependencyNames]
[., clear, (, ), ;, }, public, List, <, JSModule, >, getDependencies, (, ), {, return, deps, ;, }, List]
[;, }, List, <, String, >, getSortedDependencyNames, (, ), {, List, <, String, >, names, =, Lists, ., newArrayList, (]
[;, for, (, JSModule, module, :, getDependencies, (, ), ), {, names, ., add, (, module, ., getName, (, )]
[., newArrayList, (, ), ;, for, (, JSModule, module, :, getDependencies, (, ), ), {, names, ., add, (, module]
[), {, names, ., add, (, module, ., getName, (, ), ), ;, }, Collections, ., sort, (, names, )]
[;, }, Collections, ., sort, (, names, ), ;, return, names, ;, }, public, Set, <, JSModule, >, getAllDependencies, (]
[., add, (, module, ., getName, (, ), ), ;, }, Collections, ., sort, (, names, ), ;, return, names]
[), ;, }, Collections, ., sort, (, names, ), ;, return, names, ;, }, public, Set, <, JSModule, >, getAllDependencies]
[., getName, (, ), ), ;, }, Collections, ., sort, (, names, ), ;, return, names, ;, }, public, Set]
[;, return, names, ;, }, public, Set, <, JSModule, >, getAllDependencies, (, ), {, Set, <, JSModule, >, allDeps, =]
[., sort, (, names, ), ;, return, names, ;, }, public, Set, <, JSModule, >, getAllDependencies, (, ), {, Set]
[), ;, return, names, ;, }, public, Set, <, JSModule, >, getAllDependencies, (, ), {, Set, <, JSModule, >, allDeps]
[;, }, public, Set, <, JSModule, >, getAllDependencies, (, ), {, Set, <, JSModule, >, allDeps, =, Sets, ., newHashSet]
[;, List, <, JSModule, >, workList, =, Lists, ., newArrayList, (, deps, ), ;, while, (, workList, ., size, (]
[., newHashSet, (, deps, ), ;, List, <, JSModule, >, workList, =, Lists, ., newArrayList, (, deps, ), ;, while]
[), ;, List, <, JSModule, >, workList, =, Lists, ., newArrayList, (, deps, ), ;, while, (, workList, ., size]
[;, while, (, workList, ., size, (, ), >, 0, ), {, JSModule, module, =, workList, ., remove, (, workList]
[., newArrayList, (, deps, ), ;, while, (, workList, ., size, (, ), >, 0, ), {, JSModule, module, =]
[), ;, while, (, workList, ., size, (, ), >, 0, ), {, JSModule, module, =, workList, ., remove, (]
[), {, JSModule, module, =, workList, ., remove, (, workList, ., size, (, ), -, 1, ), ;, for, (]
[>, 0, ), {, JSModule, module, =, workList, ., remove, (, workList, ., size, (, ), -, 1, ), ;]
[., size, (, ), >, 0, ), {, JSModule, module, =, workList, ., remove, (, workList, ., size, (, )]
[), {, JSModule, module, =, workList, ., remove, (, workList, ., size, (, ), -, 1, ), ;, for, (]
[;, for, (, JSModule, dep, :, module, ., getDependencies, (, ), ), {, if, (, allDeps, ., add, (, dep]
[., remove, (, workList, ., size, (, ), -, 1, ), ;, for, (, JSModule, dep, :, module, ., getDependencies]
[), ;, for, (, JSModule, dep, :, module, ., getDependencies, (, ), ), {, if, (, allDeps, ., add, (]
[-, 1, ), ;, for, (, JSModule, dep, :, module, ., getDependencies, (, ), ), {, if, (, allDeps, .]
[., size, (, ), -, 1, ), ;, for, (, JSModule, dep, :, module, ., getDependencies, (, ), ), {]
[), ;, for, (, JSModule, dep, :, module, ., getDependencies, (, ), ), {, if, (, allDeps, ., add, (]
[), {, if, (, allDeps, ., add, (, dep, ), ), {, workList, ., add, (, dep, ), ;, }]
[., getDependencies, (, ), ), {, if, (, allDeps, ., add, (, dep, ), ), {, workList, ., add, (]
[), {, workList, ., add, (, dep, ), ;, }, }, }, return, allDeps, ;, }, public, Set, <, JSModule]
[., add, (, dep, ), ), {, workList, ., add, (, dep, ), ;, }, }, }, return, allDeps, ;]
[), ), {, workList, ., add, (, dep, ), ;, }, }, }, return, allDeps, ;, }, public, Set, <]
[;, }, }, }, return, allDeps, ;, }, public, Set, <, JSModule, >, getThisAndAllDependencies, (, ), {, Set, <, JSModule]
[., add, (, dep, ), ;, }, }, }, return, allDeps, ;, }, public, Set, <, JSModule, >, getThisAndAllDependencies, (]
[), ;, }, }, }, return, allDeps, ;, }, public, Set, <, JSModule, >, getThisAndAllDependencies, (, ), {, Set, <]
[;, }, public, Set, <, JSModule, >, getThisAndAllDependencies, (, ), {, Set, <, JSModule, >, deps, =, getAllDependencies, (, )]
[;, deps, ., add, (, this, ), ;, return, deps, ;, }, public, List, <, CompilerInput, >, getInputs, (, )]
[;, return, deps, ;, }, public, List, <, CompilerInput, >, getInputs, (, ), {, return, inputs, ;, }, public, CompilerInput]
[., add, (, this, ), ;, return, deps, ;, }, public, List, <, CompilerInput, >, getInputs, (, ), {, return]
[), ;, return, deps, ;, }, public, List, <, CompilerInput, >, getInputs, (, ), {, return, inputs, ;, }, public]
[;, }, public, List, <, CompilerInput, >, getInputs, (, ), {, return, inputs, ;, }, public, CompilerInput, getByName, (, String]
[;, }, public, CompilerInput, getByName, (, String, name, ), {, for, (, CompilerInput, input, :, inputs, ), {, if, (]
[), {, if, (, name, ., equals, (, input, ., getName, (, ), ), ), {, return, input, ;, }]
[), {, return, input, ;, }, }, return, null, ;, }, public, boolean, removeByName, (, String, name, ), {, boolean]
[., equals, (, input, ., getName, (, ), ), ), {, return, input, ;, }, }, return, null, ;, }]
[), ), {, return, input, ;, }, }, return, null, ;, }, public, boolean, removeByName, (, String, name, ), {]
[., getName, (, ), ), ), {, return, input, ;, }, }, return, null, ;, }, public, boolean, removeByName, (]
[;, }, }, return, null, ;, }, public, boolean, removeByName, (, String, name, ), {, boolean, found, =, false, ;]
[;, }, public, boolean, removeByName, (, String, name, ), {, boolean, found, =, false, ;, Iterator, <, CompilerInput, >, iter]
[;, Iterator, <, CompilerInput, >, iter, =, inputs, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, )]
[;, while, (, iter, ., hasNext, (, ), ), {, CompilerInput, file, =, iter, ., next, (, ), ;, if]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, CompilerInput, file, =, iter, ., next]
[), {, CompilerInput, file, =, iter, ., next, (, ), ;, if, (, name, ., equals, (, file, ., getName]
[., hasNext, (, ), ), {, CompilerInput, file, =, iter, ., next, (, ), ;, if, (, name, ., equals]
[;, if, (, name, ., equals, (, file, ., getName, (, ), ), ), {, iter, ., remove, (, )]
[., next, (, ), ;, if, (, name, ., equals, (, file, ., getName, (, ), ), ), {, iter]
[), {, iter, ., remove, (, ), ;, file, ., setModule, (, null, ), ;, found, =, true, ;, }]
[., equals, (, file, ., getName, (, ), ), ), {, iter, ., remove, (, ), ;, file, ., setModule]
[), ), {, iter, ., remove, (, ), ;, file, ., setModule, (, null, ), ;, found, =, true, ;]
[., getName, (, ), ), ), {, iter, ., remove, (, ), ;, file, ., setModule, (, null, ), ;]
[;, file, ., setModule, (, null, ), ;, found, =, true, ;, }, }, return, found, ;, }, @, Override]
[., remove, (, ), ;, file, ., setModule, (, null, ), ;, found, =, true, ;, }, }, return, found]
[;, found, =, true, ;, }, }, return, found, ;, }, @, Override, public, String, toString, (, ), {, return]
[., setModule, (, null, ), ;, found, =, true, ;, }, }, return, found, ;, }, @, Override, public, String]
[), ;, found, =, true, ;, }, }, return, found, ;, }, @, Override, public, String, toString, (, ), {]
[=, true, ;, }, }, return, found, ;, }, @, Override, public, String, toString, (, ), {, return, name, ;]
[;, }, }, return, found, ;, }, @, Override, public, String, toString, (, ), {, return, name, ;, }, public]
[;, }, @, Override, public, String, toString, (, ), {, return, name, ;, }, public, void, clearAsts, (, ), {]
[;, }, public, void, clearAsts, (, ), {, for, (, CompilerInput, input, :, inputs, ), {, input, ., clearAst, (]
[), {, input, ., clearAst, (, ), ;, }, }, public, void, sortInputsByDeps, (, Compiler, compiler, ), {, for, (]
[;, }, }, public, void, sortInputsByDeps, (, Compiler, compiler, ), {, for, (, CompilerInput, input, :, inputs, ), {, input]
[., clearAst, (, ), ;, }, }, public, void, sortInputsByDeps, (, Compiler, compiler, ), {, for, (, CompilerInput, input, :]
[), {, input, ., setCompiler, (, compiler, ), ;, }, try, {, List, <, CompilerInput, >, sortedList, =, (, new]
[;, }, try, {, List, <, CompilerInput, >, sortedList, =, (, new, SortedDependencies, <, CompilerInput, >, (, Collections, ., <]
[., setCompiler, (, compiler, ), ;, }, try, {, List, <, CompilerInput, >, sortedList, =, (, new, SortedDependencies, <, CompilerInput]
[), ;, }, try, {, List, <, CompilerInput, >, sortedList, =, (, new, SortedDependencies, <, CompilerInput, >, (, Collections, .]
[;, inputs, ., clear, (, ), ;, inputs, ., addAll, (, sortedList, ), ;, }, catch, (, CircularDependencyException, e, )]
[., getSortedList, (, ), ;, inputs, ., clear, (, ), ;, inputs, ., addAll, (, sortedList, ), ;, }, catch]
[), ., getSortedList, (, ), ;, inputs, ., clear, (, ), ;, inputs, ., addAll, (, sortedList, ), ;, }]
[), ), ., getSortedList, (, ), ;, inputs, ., clear, (, ), ;, inputs, ., addAll, (, sortedList, ), ;]
[., <, CompilerInput, >, unmodifiableList, (, inputs, ), ), ), ., getSortedList, (, ), ;, inputs, ., clear, (, )]
[), ), ), ., getSortedList, (, ), ;, inputs, ., clear, (, ), ;, inputs, ., addAll, (, sortedList, )]
[;, inputs, ., addAll, (, sortedList, ), ;, }, catch, (, CircularDependencyException, e, ), {, compiler, ., report, (, JSError]
[., clear, (, ), ;, inputs, ., addAll, (, sortedList, ), ;, }, catch, (, CircularDependencyException, e, ), {, compiler]
[;, }, catch, (, CircularDependencyException, e, ), {, compiler, ., report, (, JSError, ., make, (, CIRCULAR_DEPENDENCY_ERROR, ,, e, .]
[., addAll, (, sortedList, ), ;, }, catch, (, CircularDependencyException, e, ), {, compiler, ., report, (, JSError, ., make]
[), ;, }, catch, (, CircularDependencyException, e, ), {, compiler, ., report, (, JSError, ., make, (, CIRCULAR_DEPENDENCY_ERROR, ,, e]
[;, }, }, public, static, JSModule, [, ], sortJsModules, (, Collection, <, JSModule, >, modules, ), throws, CircularDependencyException, {, List]
[., report, (, JSError, ., make, (, CIRCULAR_DEPENDENCY_ERROR, ,, e, ., getMessage, (, ), ), ), ;, }, }, public]
[), ;, }, }, public, static, JSModule, [, ], sortJsModules, (, Collection, <, JSModule, >, modules, ), throws, CircularDependencyException, {]
[., make, (, CIRCULAR_DEPENDENCY_ERROR, ,, e, ., getMessage, (, ), ), ), ;, }, }, public, static, JSModule, [, ]]
[,, e, ., getMessage, (, ), ), ), ;, }, }, public, static, JSModule, [, ], sortJsModules, (, Collection, <]
[), ), ;, }, }, public, static, JSModule, [, ], sortJsModules, (, Collection, <, JSModule, >, modules, ), throws, CircularDependencyException]
[., getMessage, (, ), ), ), ;, }, }, public, static, JSModule, [, ], sortJsModules, (, Collection, <, JSModule, >]
[;, return, sortedList, ., toArray, (, new, JSModule, [, sortedList, ., size, (, ), ], ), ;, }, public, void]
[., getSortedList, (, ), ;, return, sortedList, ., toArray, (, new, JSModule, [, sortedList, ., size, (, ), ], )]
[), ., getSortedList, (, ), ;, return, sortedList, ., toArray, (, new, JSModule, [, sortedList, ., size, (, ), ]]
[), ), ., getSortedList, (, ), ;, return, sortedList, ., toArray, (, new, JSModule, [, sortedList, ., size, (, )]
[., newArrayList, (, modules, ), ), ), ., getSortedList, (, ), ;, return, sortedList, ., toArray, (, new, JSModule, []
[), ), ), ., getSortedList, (, ), ;, return, sortedList, ., toArray, (, new, JSModule, [, sortedList, ., size, (]
[;, }, public, void, setDepth, (, int, dep, ), {, this, ., depth, =, dep, ;, }, public, int, getDepth]
[., toArray, (, new, JSModule, [, sortedList, ., size, (, ), ], ), ;, }, public, void, setDepth, (, int]
[), ;, }, public, void, setDepth, (, int, dep, ), {, this, ., depth, =, dep, ;, }, public, int]
[], ), ;, }, public, void, setDepth, (, int, dep, ), {, this, ., depth, =, dep, ;, }, public]
[., size, (, ), ], ), ;, }, public, void, setDepth, (, int, dep, ), {, this, ., depth, =]
[=, dep, ;, }, public, int, getDepth, (, ), {, return, depth, ;, }, }]
[., depth, =, dep, ;, }, public, int, getDepth, (, ), {, return, depth, ;, }, }]
[;, }, public, int, getDepth, (, ), {, return, depth, ;, }, }]
[;, }, }]
