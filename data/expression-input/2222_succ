[;, public, Iterator, <, Object, >, iterator, (, ), {, return, new, Iterator, <, Object, >, (, ), {, private]
[;, }, public, int, size, (, ), {, return, backingHashSet, ., size, (, ), ;, }, public, boolean, isEmpty, (]
[;, public, boolean, hasNext, (, ), {, return, iterator, ., hasNext, (, ), ;, }, public, Object, next, (, )]
[., iterator, (, ), ;, public, boolean, hasNext, (, ), {, return, iterator, ., hasNext, (, ), ;, }, public]
[;, }, public, Object, next, (, ), {, return, iterator, ., next, (, ), ., get, (, ), ;, }]
[., hasNext, (, ), ;, }, public, Object, next, (, ), {, return, iterator, ., next, (, ), ., get]
[;, }, public, void, remove, (, ), {, iterator, ., remove, (, ), ;, }, }, ;, }, public, int]
[., get, (, ), ;, }, public, void, remove, (, ), {, iterator, ., remove, (, ), ;, }, }]
[., next, (, ), ., get, (, ), ;, }, public, void, remove, (, ), {, iterator, ., remove, (]
[;, }, }, ;, }, public, int, size, (, ), {, return, backingHashSet, ., size, (, ), ;, }, public]
[., remove, (, ), ;, }, }, ;, }, public, int, size, (, ), {, return, backingHashSet, ., size, (]
[;, }, public, boolean, isEmpty, (, ), {, return, backingHashSet, ., isEmpty, (, ), ;, }, public, boolean, contains, (]
[., size, (, ), ;, }, public, boolean, isEmpty, (, ), {, return, backingHashSet, ., isEmpty, (, ), ;, }]
[;, }, public, boolean, contains, (, Object, mock, ), {, return, backingHashSet, ., contains, (, HashCodeAndEqualsMockWrapper, ., of, (, mock]
[., isEmpty, (, ), ;, }, public, boolean, contains, (, Object, mock, ), {, return, backingHashSet, ., contains, (, HashCodeAndEqualsMockWrapper]
[;, }, public, boolean, add, (, Object, mock, ), {, return, backingHashSet, ., add, (, HashCodeAndEqualsMockWrapper, ., of, (, mock]
[., contains, (, HashCodeAndEqualsMockWrapper, ., of, (, mock, ), ), ;, }, public, boolean, add, (, Object, mock, ), {]
[), ;, }, public, boolean, add, (, Object, mock, ), {, return, backingHashSet, ., add, (, HashCodeAndEqualsMockWrapper, ., of, (]
[., of, (, mock, ), ), ;, }, public, boolean, add, (, Object, mock, ), {, return, backingHashSet, ., add]
[), ), ;, }, public, boolean, add, (, Object, mock, ), {, return, backingHashSet, ., add, (, HashCodeAndEqualsMockWrapper, ., of]
[;, }, public, boolean, remove, (, Object, mock, ), {, return, backingHashSet, ., remove, (, HashCodeAndEqualsMockWrapper, ., of, (, mock]
[., add, (, HashCodeAndEqualsMockWrapper, ., of, (, mock, ), ), ;, }, public, boolean, remove, (, Object, mock, ), {]
[), ;, }, public, boolean, remove, (, Object, mock, ), {, return, backingHashSet, ., remove, (, HashCodeAndEqualsMockWrapper, ., of, (]
[., of, (, mock, ), ), ;, }, public, boolean, remove, (, Object, mock, ), {, return, backingHashSet, ., remove]
[), ), ;, }, public, boolean, remove, (, Object, mock, ), {, return, backingHashSet, ., remove, (, HashCodeAndEqualsMockWrapper, ., of]
[;, }, public, void, clear, (, ), {, backingHashSet, ., clear, (, ), ;, }, @, Override, public, Object, clone]
[., remove, (, HashCodeAndEqualsMockWrapper, ., of, (, mock, ), ), ;, }, public, void, clear, (, ), {, backingHashSet, .]
[), ;, }, public, void, clear, (, ), {, backingHashSet, ., clear, (, ), ;, }, @, Override, public, Object]
[., of, (, mock, ), ), ;, }, public, void, clear, (, ), {, backingHashSet, ., clear, (, ), ;]
[), ), ;, }, public, void, clear, (, ), {, backingHashSet, ., clear, (, ), ;, }, @, Override, public]
[;, }, @, Override, public, Object, clone, (, ), throws, CloneNotSupportedException, {, throw, new, CloneNotSupportedException, (, ), ;, }, @]
[., clear, (, ), ;, }, @, Override, public, Object, clone, (, ), throws, CloneNotSupportedException, {, throw, new, CloneNotSupportedException, (]
[;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (, o, instanceof, HashCodeAndEqualsSafeSet, )]
[), {, return, false, ;, }, HashCodeAndEqualsSafeSet, that, =, (, HashCodeAndEqualsSafeSet, ), o, ;, return, backingHashSet, ., equals, (, that]
[), {, return, false, ;, }, HashCodeAndEqualsSafeSet, that, =, (, HashCodeAndEqualsSafeSet, ), o, ;, return, backingHashSet, ., equals, (, that]
[), ), {, return, false, ;, }, HashCodeAndEqualsSafeSet, that, =, (, HashCodeAndEqualsSafeSet, ), o, ;, return, backingHashSet, ., equals, (]
[instanceof, HashCodeAndEqualsSafeSet, ), ), {, return, false, ;, }, HashCodeAndEqualsSafeSet, that, =, (, HashCodeAndEqualsSafeSet, ), o, ;, return, backingHashSet, .]
[;, }, HashCodeAndEqualsSafeSet, that, =, (, HashCodeAndEqualsSafeSet, ), o, ;, return, backingHashSet, ., equals, (, that, ., backingHashSet, ), ;]
[;, return, backingHashSet, ., equals, (, that, ., backingHashSet, ), ;, }, @, Override, public, int, hashCode, (, ), {]
[;, return, backingHashSet, ., equals, (, that, ., backingHashSet, ), ;, }, @, Override, public, int, hashCode, (, ), {]
[;, }, @, Override, public, int, hashCode, (, ), {, return, backingHashSet, ., hashCode, (, ), ;, }, public, Object]
[., equals, (, that, ., backingHashSet, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, backingHashSet, .]
[), ;, }, @, Override, public, int, hashCode, (, ), {, return, backingHashSet, ., hashCode, (, ), ;, }, public]
[., backingHashSet, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, backingHashSet, ., hashCode, (, ), ;]
[;, }, public, Object, [, ], toArray, (, ), {, return, unwrapTo, (, new, Object, [, size, (, ), ]]
[., hashCode, (, ), ;, }, public, Object, [, ], toArray, (, ), {, return, unwrapTo, (, new, Object, []
[;, }, private, <, T, >, T, [, ], unwrapTo, (, T, [, ], array, ), {, Iterator, <, Object]
[), ;, }, private, <, T, >, T, [, ], unwrapTo, (, T, [, ], array, ), {, Iterator, <]
[], ), ;, }, private, <, T, >, T, [, ], unwrapTo, (, T, [, ], array, ), {, Iterator]
[;, for, (, int, i, =, 0, ,, objectsLength, =, array, ., length, ;, i, <, objectsLength, ;, i, ++]
[,, objectsLength, =, array, ., length, ;, i, <, objectsLength, ;, i, ++, ), {, if, (, iterator, ., hasNext]
[;, i, <, objectsLength, ;, i, ++, ), {, if, (, iterator, ., hasNext, (, ), ), {, array, []
[., length, ;, i, <, objectsLength, ;, i, ++, ), {, if, (, iterator, ., hasNext, (, ), ), {]
[;, i, ++, ), {, if, (, iterator, ., hasNext, (, ), ), {, array, [, i, ], =, (]
[<, objectsLength, ;, i, ++, ), {, if, (, iterator, ., hasNext, (, ), ), {, array, [, i, ]]
[;, i, ++, ), {, if, (, iterator, ., hasNext, (, ), ), {, array, [, i, ], =, (]
[), {, if, (, iterator, ., hasNext, (, ), ), {, array, [, i, ], =, (, T, ), iterator]
[++, ), {, if, (, iterator, ., hasNext, (, ), ), {, array, [, i, ], =, (, T, )]
[), {, array, [, i, ], =, (, T, ), iterator, ., next, (, ), ;, }, }, return, array]
[., hasNext, (, ), ), {, array, [, i, ], =, (, T, ), iterator, ., next, (, ), ;]
[=, (, T, ), iterator, ., next, (, ), ;, }, }, return, array, ;, }, public, <, T, >]
[[, i, ], =, (, T, ), iterator, ., next, (, ), ;, }, }, return, array, ;, }, public]
[], =, (, T, ), iterator, ., next, (, ), ;, }, }, return, array, ;, }, public, <, T]
[;, }, }, return, array, ;, }, public, <, T, >, T, [, ], toArray, (, T, [, ], typedArray]
[;, }, }, return, array, ;, }, public, <, T, >, T, [, ], toArray, (, T, [, ], typedArray]
[., next, (, ), ;, }, }, return, array, ;, }, public, <, T, >, T, [, ], toArray, (]
[;, }, public, <, T, >, T, [, ], toArray, (, T, [, ], typedArray, ), {, T, [, ]]
[;, return, unwrapTo, (, array, ), ;, }, public, boolean, removeAll, (, Collection, <, ?, >, mocks, ), {, return]
[?, typedArray, :, (, T, [, ], ), newInstance, (, typedArray, ., getClass, (, ), ., getComponentType, (, ), ,]
[>=, size, (, ), ?, typedArray, :, (, T, [, ], ), newInstance, (, typedArray, ., getClass, (, ), .]
[., length, >=, size, (, ), ?, typedArray, :, (, T, [, ], ), newInstance, (, typedArray, ., getClass, (]
[?, typedArray, :, (, T, [, ], ), newInstance, (, typedArray, ., getClass, (, ), ., getComponentType, (, ), ,]
[:, (, T, [, ], ), newInstance, (, typedArray, ., getClass, (, ), ., getComponentType, (, ), ,, size, (]
[;, return, unwrapTo, (, array, ), ;, }, public, boolean, removeAll, (, Collection, <, ?, >, mocks, ), {, return]
[;, return, unwrapTo, (, array, ), ;, }, public, boolean, removeAll, (, Collection, <, ?, >, mocks, ), {, return]
[,, size, (, ), ), ;, return, unwrapTo, (, array, ), ;, }, public, boolean, removeAll, (, Collection, <, ?]
[., getComponentType, (, ), ,, size, (, ), ), ;, return, unwrapTo, (, array, ), ;, }, public, boolean, removeAll]
[., getClass, (, ), ., getComponentType, (, ), ,, size, (, ), ), ;, return, unwrapTo, (, array, ), ;]
[), ;, return, unwrapTo, (, array, ), ;, }, public, boolean, removeAll, (, Collection, <, ?, >, mocks, ), {]
[;, }, public, boolean, removeAll, (, Collection, <, ?, >, mocks, ), {, return, backingHashSet, ., removeAll, (, asWrappedMocks, (]
[), ;, }, public, boolean, removeAll, (, Collection, <, ?, >, mocks, ), {, return, backingHashSet, ., removeAll, (, asWrappedMocks]
[;, }, public, boolean, containsAll, (, Collection, <, ?, >, mocks, ), {, return, backingHashSet, ., containsAll, (, asWrappedMocks, (]
[., removeAll, (, asWrappedMocks, (, mocks, ), ), ;, }, public, boolean, containsAll, (, Collection, <, ?, >, mocks, )]
[), ;, }, public, boolean, containsAll, (, Collection, <, ?, >, mocks, ), {, return, backingHashSet, ., containsAll, (, asWrappedMocks]
[), ), ;, }, public, boolean, containsAll, (, Collection, <, ?, >, mocks, ), {, return, backingHashSet, ., containsAll, (]
[;, }, public, boolean, addAll, (, Collection, <, ?, >, mocks, ), {, return, backingHashSet, ., addAll, (, asWrappedMocks, (]
[., containsAll, (, asWrappedMocks, (, mocks, ), ), ;, }, public, boolean, addAll, (, Collection, <, ?, >, mocks, )]
[), ;, }, public, boolean, addAll, (, Collection, <, ?, >, mocks, ), {, return, backingHashSet, ., addAll, (, asWrappedMocks]
[), ), ;, }, public, boolean, addAll, (, Collection, <, ?, >, mocks, ), {, return, backingHashSet, ., addAll, (]
[;, }, public, boolean, retainAll, (, Collection, <, ?, >, mocks, ), {, return, backingHashSet, ., retainAll, (, asWrappedMocks, (]
[., addAll, (, asWrappedMocks, (, mocks, ), ), ;, }, public, boolean, retainAll, (, Collection, <, ?, >, mocks, )]
[), ;, }, public, boolean, retainAll, (, Collection, <, ?, >, mocks, ), {, return, backingHashSet, ., retainAll, (, asWrappedMocks]
[), ), ;, }, public, boolean, retainAll, (, Collection, <, ?, >, mocks, ), {, return, backingHashSet, ., retainAll, (]
[;, }, private, HashSet, <, HashCodeAndEqualsMockWrapper, >, asWrappedMocks, (, Collection, <, ?, >, mocks, ), {, Checks, ., checkNotNull, (]
[., retainAll, (, asWrappedMocks, (, mocks, ), ), ;, }, private, HashSet, <, HashCodeAndEqualsMockWrapper, >, asWrappedMocks, (, Collection, <, ?]
[), ;, }, private, HashSet, <, HashCodeAndEqualsMockWrapper, >, asWrappedMocks, (, Collection, <, ?, >, mocks, ), {, Checks, ., checkNotNull]
[), ), ;, }, private, HashSet, <, HashCodeAndEqualsMockWrapper, >, asWrappedMocks, (, Collection, <, ?, >, mocks, ), {, Checks, .]
[;, HashSet, <, HashCodeAndEqualsMockWrapper, >, hashSet, =, new, HashSet, <, HashCodeAndEqualsMockWrapper, >, (, ), ;, for, (, Object, mock, :]
[., checkNotNull, (, mocks, ,, "Passed collection should notify() be null", ), ;, HashSet, <, HashCodeAndEqualsMockWrapper, >, hashSet, =, new, HashSet, <, HashCodeAndEqualsMockWrapper, >, (]
[,, "Passed collection should notify() be null", ), ;, HashSet, <, HashCodeAndEqualsMockWrapper, >, hashSet, =, new, HashSet, <, HashCodeAndEqualsMockWrapper, >, (, ), ;, for, (]
[), ;, HashSet, <, HashCodeAndEqualsMockWrapper, >, hashSet, =, new, HashSet, <, HashCodeAndEqualsMockWrapper, >, (, ), ;, for, (, Object, mock]
[;, for, (, Object, mock, :, mocks, ), {, assert, !, (, mock, instanceof, HashCodeAndEqualsMockWrapper, ), :, "WRONG", ;, hashSet]
[), {, assert, !, (, mock, instanceof, HashCodeAndEqualsMockWrapper, ), :, "WRONG", ;, hashSet, ., add, (, HashCodeAndEqualsMockWrapper, ., of, (]
[:, "WRONG", ;, hashSet, ., add, (, HashCodeAndEqualsMockWrapper, ., of, (, mock, ), ), ;, }, return, hashSet, ;, }]
[:, "WRONG", ;, hashSet, ., add, (, HashCodeAndEqualsMockWrapper, ., of, (, mock, ), ), ;, }, return, hashSet, ;, }]
[), :, "WRONG", ;, hashSet, ., add, (, HashCodeAndEqualsMockWrapper, ., of, (, mock, ), ), ;, }, return, hashSet, ;]
[instanceof, HashCodeAndEqualsMockWrapper, ), :, "WRONG", ;, hashSet, ., add, (, HashCodeAndEqualsMockWrapper, ., of, (, mock, ), ), ;, }, return]
[;, hashSet, ., add, (, HashCodeAndEqualsMockWrapper, ., of, (, mock, ), ), ;, }, return, hashSet, ;, }, @, Override]
[;, }, return, hashSet, ;, }, @, Override, public, String, toString, (, ), {, return, backingHashSet, ., toString, (, )]
[., add, (, HashCodeAndEqualsMockWrapper, ., of, (, mock, ), ), ;, }, return, hashSet, ;, }, @, Override, public, String]
[), ;, }, return, hashSet, ;, }, @, Override, public, String, toString, (, ), {, return, backingHashSet, ., toString, (]
[., of, (, mock, ), ), ;, }, return, hashSet, ;, }, @, Override, public, String, toString, (, ), {]
[), ), ;, }, return, hashSet, ;, }, @, Override, public, String, toString, (, ), {, return, backingHashSet, ., toString]
[;, }, @, Override, public, String, toString, (, ), {, return, backingHashSet, ., toString, (, ), ;, }, public, static]
[;, }, public, static, HashCodeAndEqualsSafeSet, of, (, Object, ..., mocks, ), {, return, of, (, Arrays, ., asList, (, mocks]
[., toString, (, ), ;, }, public, static, HashCodeAndEqualsSafeSet, of, (, Object, ..., mocks, ), {, return, of, (, Arrays]
[;, }, public, static, HashCodeAndEqualsSafeSet, of, (, Iterable, <, Object, >, objects, ), {, HashCodeAndEqualsSafeSet, hashCodeAndEqualsSafeSet, =, new, HashCodeAndEqualsSafeSet, (]
[), ;, }, public, static, HashCodeAndEqualsSafeSet, of, (, Iterable, <, Object, >, objects, ), {, HashCodeAndEqualsSafeSet, hashCodeAndEqualsSafeSet, =, new, HashCodeAndEqualsSafeSet]
[., asList, (, mocks, ), ), ;, }, public, static, HashCodeAndEqualsSafeSet, of, (, Iterable, <, Object, >, objects, ), {]
[), ), ;, }, public, static, HashCodeAndEqualsSafeSet, of, (, Iterable, <, Object, >, objects, ), {, HashCodeAndEqualsSafeSet, hashCodeAndEqualsSafeSet, =, new]
[;, if, (, objects, !=, null, ), {, for, (, Object, mock, :, objects, ), {, hashCodeAndEqualsSafeSet, ., add, (]
[), {, for, (, Object, mock, :, objects, ), {, hashCodeAndEqualsSafeSet, ., add, (, mock, ), ;, }, }, return]
[!=, null, ), {, for, (, Object, mock, :, objects, ), {, hashCodeAndEqualsSafeSet, ., add, (, mock, ), ;, }]
[), {, for, (, Object, mock, :, objects, ), {, hashCodeAndEqualsSafeSet, ., add, (, mock, ), ;, }, }, return]
[), {, hashCodeAndEqualsSafeSet, ., add, (, mock, ), ;, }, }, return, hashCodeAndEqualsSafeSet, ;, }, }]
[;, }, }, return, hashCodeAndEqualsSafeSet, ;, }, }]
[., add, (, mock, ), ;, }, }, return, hashCodeAndEqualsSafeSet, ;, }, }]
[), ;, }, }, return, hashCodeAndEqualsSafeSet, ;, }, }]
[;, }, }]
