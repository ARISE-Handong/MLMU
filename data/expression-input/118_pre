[rhino, ., jstype, ., TernaryValue, ., UNKNOWN, ;, public, class, VoidType, extends, ValueType, {, private, static, final, long, serialVersionUID, =]
[VoidType, extends, ValueType, {, private, static, final, long, serialVersionUID, =, 1L, ;, VoidType, (, JSTypeRegistry, registry, ), {, super, (]
[(, JSTypeRegistry, registry, ), {, super, (, registry, ), ;, }, @, Override, public, JSType, restrictByNotNullOrUndefined, (, ), {, return]
[(, JSTypeRegistry, registry, ), {, super, (, registry, ), ;, }, @, Override, public, JSType, restrictByNotNullOrUndefined, (, ), {, return]
[{, super, (, registry, ), ;, }, @, Override, public, JSType, restrictByNotNullOrUndefined, (, ), {, return, registry, ., getNativeType, (]
[{, super, (, registry, ), ;, }, @, Override, public, JSType, restrictByNotNullOrUndefined, (, ), {, return, registry, ., getNativeType, (]
[getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, }, @, Override, public, TernaryValue, testForEquality, (, JSType, that, ), {, if, (]
[getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, }, @, Override, public, TernaryValue, testForEquality, (, JSType, that, ), {, if, (]
[NO_TYPE, ), ;, }, @, Override, public, TernaryValue, testForEquality, (, JSType, that, ), {, if, (, UNKNOWN, ., equals, (]
[NO_TYPE, ), ;, }, @, Override, public, TernaryValue, testForEquality, (, JSType, that, ), {, if, (, UNKNOWN, ., equals, (]
[@, Override, public, TernaryValue, testForEquality, (, JSType, that, ), {, if, (, UNKNOWN, ., equals, (, super, ., testForEquality, (]
[JSType, that, ), {, if, (, UNKNOWN, ., equals, (, super, ., testForEquality, (, that, ), ), ), {, return]
[(, UNKNOWN, ., equals, (, super, ., testForEquality, (, that, ), ), ), {, return, UNKNOWN, ;, }, if, (]
[(, UNKNOWN, ., equals, (, super, ., testForEquality, (, that, ), ), ), {, return, UNKNOWN, ;, }, if, (]
[(, UNKNOWN, ., equals, (, super, ., testForEquality, (, that, ), ), ), {, return, UNKNOWN, ;, }, if, (]
[(, super, ., testForEquality, (, that, ), ), ), {, return, UNKNOWN, ;, }, if, (, that, ., isSubtype, (]
[testForEquality, (, that, ), ), ), {, return, UNKNOWN, ;, }, if, (, that, ., isSubtype, (, this, ), ||]
[testForEquality, (, that, ), ), ), {, return, UNKNOWN, ;, }, if, (, that, ., isSubtype, (, this, ), ||]
[), ), {, return, UNKNOWN, ;, }, if, (, that, ., isSubtype, (, this, ), ||, that, ., isSubtype, (]
[{, return, UNKNOWN, ;, }, if, (, that, ., isSubtype, (, this, ), ||, that, ., isSubtype, (, getNativeType, (]
[{, return, UNKNOWN, ;, }, if, (, that, ., isSubtype, (, this, ), ||, that, ., isSubtype, (, getNativeType, (]
[., isSubtype, (, this, ), ||, that, ., isSubtype, (, getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ), ), {, return]
[), ||, that, ., isSubtype, (, getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ), ), {, return, TRUE, ;, }, return]
[), ), {, return, TRUE, ;, }, return, FALSE, ;, }, @, Override, public, boolean, matchesNumberContext, (, ), {, return]
[Override, public, boolean, matchesNumberContext, (, ), {, return, false, ;, }, @, Override, public, boolean, matchesObjectContext, (, ), {, return]
[Override, public, boolean, matchesObjectContext, (, ), {, return, false, ;, }, @, Override, public, boolean, matchesStringContext, (, ), {, return]
[Override, public, boolean, matchesStringContext, (, ), {, return, true, ;, }, @, Override, public, boolean, isVoidType, (, ), {, return]
[public, boolean, isVoidType, (, ), {, return, true, ;, }, @, Override, String, toStringHelper, (, boolean, forAnnotations, ), {, return]
[(, boolean, forAnnotations, ), {, return, getDisplayName, (, ), ;, }, @, Override, public, String, getDisplayName, (, ), {, return]
[Override, public, String, getDisplayName, (, ), {, return, "undefined", ;, }, @, Override, public, BooleanLiteralSet, getPossibleToBooleanOutcomes, (, ), {, return]
[Override, public, String, getDisplayName, (, ), {, return, "undefined", ;, }, @, Override, public, BooleanLiteralSet, getPossibleToBooleanOutcomes, (, ), {, return]
[FALSE, ;, }, @, Override, public, <, T, >, T, visit, (, Visitor, <, T, >, visitor, ), {, return]
[FALSE, ;, }, @, Override, public, <, T, >, T, visit, (, Visitor, <, T, >, visitor, ), {, return]
