[., util, ., List, ;, public, abstract, class, BoxAndWhiskerCalculator, {, public, static, BoxAndWhiskerItem, calculateBoxAndWhiskerStatistics, (, List, values, ), {, return]
[., List, ;, public, abstract, class, BoxAndWhiskerCalculator, {, public, static, BoxAndWhiskerItem, calculateBoxAndWhiskerStatistics, (, List, values, ), {, return, calculateBoxAndWhiskerStatistics, (]
[;, public, abstract, class, BoxAndWhiskerCalculator, {, public, static, BoxAndWhiskerItem, calculateBoxAndWhiskerStatistics, (, List, values, ), {, return, calculateBoxAndWhiskerStatistics, (, values, ,]
[values, ,, true, ), ;, }, public, static, BoxAndWhiskerItem, calculateBoxAndWhiskerStatistics, (, List, values, ,, boolean, stripNullAndNaNItems, ), {, if, (]
[values, ,, true, ), ;, }, public, static, BoxAndWhiskerItem, calculateBoxAndWhiskerStatistics, (, List, values, ,, boolean, stripNullAndNaNItems, ), {, if, (]
[true, ), ;, }, public, static, BoxAndWhiskerItem, calculateBoxAndWhiskerStatistics, (, List, values, ,, boolean, stripNullAndNaNItems, ), {, if, (, values, ==]
[public, static, BoxAndWhiskerItem, calculateBoxAndWhiskerStatistics, (, List, values, ,, boolean, stripNullAndNaNItems, ), {, if, (, values, ==, null, ), {, throw]
[calculateBoxAndWhiskerStatistics, (, List, values, ,, boolean, stripNullAndNaNItems, ), {, if, (, values, ==, null, ), {, throw, new, IllegalArgumentException, (]
[if, (, values, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, List, vlist, ;, if, (]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, List, vlist, ;, if, (, stripNullAndNaNItems, ), {]
[), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, List, vlist, ;, if, (, stripNullAndNaNItems, ), {, vlist, =]
[new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, List, vlist, ;, if, (, stripNullAndNaNItems, ), {, vlist, =, new, ArrayList, (]
[new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, List, vlist, ;, if, (, stripNullAndNaNItems, ), {, vlist, =, new, ArrayList, (]
[if, (, stripNullAndNaNItems, ), {, vlist, =, new, ArrayList, (, values, ., size, (, ), ), ;, Iterator, iterator, =]
[if, (, stripNullAndNaNItems, ), {, vlist, =, new, ArrayList, (, values, ., size, (, ), ), ;, Iterator, iterator, =]
[ArrayList, (, values, ., size, (, ), ), ;, Iterator, iterator, =, values, ., listIterator, (, ), ;, while, (]
[ArrayList, (, values, ., size, (, ), ), ;, Iterator, iterator, =, values, ., listIterator, (, ), ;, while, (]
[iterator, =, values, ., listIterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Object, obj, =]
[iterator, =, values, ., listIterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Object, obj, =]
[while, (, iterator, ., hasNext, (, ), ), {, Object, obj, =, iterator, ., next, (, ), ;, if, (]
[while, (, iterator, ., hasNext, (, ), ), {, Object, obj, =, iterator, ., next, (, ), ;, if, (]
[{, Object, obj, =, iterator, ., next, (, ), ;, if, (, obj, instanceof, Number, ), {, Number, n, =]
[=, iterator, ., next, (, ), ;, if, (, obj, instanceof, Number, ), {, Number, n, =, (, Number, )]
[), ;, if, (, obj, instanceof, Number, ), {, Number, n, =, (, Number, ), obj, ;, double, v, =]
[), ;, if, (, obj, instanceof, Number, ), {, Number, n, =, (, Number, ), obj, ;, double, v, =]
[{, Number, n, =, (, Number, ), obj, ;, double, v, =, n, ., doubleValue, (, ), ;, if, (]
[Number, n, =, (, Number, ), obj, ;, double, v, =, n, ., doubleValue, (, ), ;, if, (, !]
[Number, n, =, (, Number, ), obj, ;, double, v, =, n, ., doubleValue, (, ), ;, if, (, !]
[Number, ), obj, ;, double, v, =, n, ., doubleValue, (, ), ;, if, (, !, Double, ., isNaN, (]
[double, v, =, n, ., doubleValue, (, ), ;, if, (, !, Double, ., isNaN, (, v, ), ), {]
[double, v, =, n, ., doubleValue, (, ), ;, if, (, !, Double, ., isNaN, (, v, ), ), {]
[., doubleValue, (, ), ;, if, (, !, Double, ., isNaN, (, v, ), ), {, vlist, ., add, (]
[., isNaN, (, v, ), ), {, vlist, ., add, (, n, ), ;, }, }, }, }, else, {]
[(, v, ), ), {, vlist, ., add, (, n, ), ;, }, }, }, }, else, {, vlist, =]
[), {, vlist, ., add, (, n, ), ;, }, }, }, }, else, {, vlist, =, values, ;, }]
[), {, vlist, ., add, (, n, ), ;, }, }, }, }, else, {, vlist, =, values, ;, }]
[add, (, n, ), ;, }, }, }, }, else, {, vlist, =, values, ;, }, Collections, ., sort, (]
[}, }, }, else, {, vlist, =, values, ;, }, Collections, ., sort, (, vlist, ), ;, double, mean, =]
[}, }, }, else, {, vlist, =, values, ;, }, Collections, ., sort, (, vlist, ), ;, double, mean, =]
[{, vlist, =, values, ;, }, Collections, ., sort, (, vlist, ), ;, double, mean, =, Statistics, ., calculateMean, (]
[=, values, ;, }, Collections, ., sort, (, vlist, ), ;, double, mean, =, Statistics, ., calculateMean, (, vlist, ,]
[sort, (, vlist, ), ;, double, mean, =, Statistics, ., calculateMean, (, vlist, ,, false, ), ;, double, median, =]
[sort, (, vlist, ), ;, double, mean, =, Statistics, ., calculateMean, (, vlist, ,, false, ), ;, double, median, =]
[;, double, mean, =, Statistics, ., calculateMean, (, vlist, ,, false, ), ;, double, median, =, Statistics, ., calculateMedian, (]
[mean, =, Statistics, ., calculateMean, (, vlist, ,, false, ), ;, double, median, =, Statistics, ., calculateMedian, (, vlist, ,]
[vlist, ,, false, ), ;, double, median, =, Statistics, ., calculateMedian, (, vlist, ,, false, ), ;, double, q1, =]
[false, ), ;, double, median, =, Statistics, ., calculateMedian, (, vlist, ,, false, ), ;, double, q1, =, calculateQ1, (]
[Statistics, ., calculateMedian, (, vlist, ,, false, ), ;, double, q1, =, calculateQ1, (, vlist, ), ;, double, q3, =]
[calculateMedian, (, vlist, ,, false, ), ;, double, q1, =, calculateQ1, (, vlist, ), ;, double, q3, =, calculateQ3, (]
[;, double, q1, =, calculateQ1, (, vlist, ), ;, double, q3, =, calculateQ3, (, vlist, ), ;, double, interQuartileRange, =]
[;, double, q1, =, calculateQ1, (, vlist, ), ;, double, q3, =, calculateQ3, (, vlist, ), ;, double, interQuartileRange, =]
[q1, =, calculateQ1, (, vlist, ), ;, double, q3, =, calculateQ3, (, vlist, ), ;, double, interQuartileRange, =, q3, -]
[), ;, double, q3, =, calculateQ3, (, vlist, ), ;, double, interQuartileRange, =, q3, -, q1, ;, double, upperOutlierThreshold, =]
[), ;, double, q3, =, calculateQ3, (, vlist, ), ;, double, interQuartileRange, =, q3, -, q1, ;, double, upperOutlierThreshold, =]
[double, q3, =, calculateQ3, (, vlist, ), ;, double, interQuartileRange, =, q3, -, q1, ;, double, upperOutlierThreshold, =, q3, +]
[q3, =, calculateQ3, (, vlist, ), ;, double, interQuartileRange, =, q3, -, q1, ;, double, upperOutlierThreshold, =, q3, +, (]
[q3, =, calculateQ3, (, vlist, ), ;, double, interQuartileRange, =, q3, -, q1, ;, double, upperOutlierThreshold, =, q3, +, (]
[calculateQ3, (, vlist, ), ;, double, interQuartileRange, =, q3, -, q1, ;, double, upperOutlierThreshold, =, q3, +, (, interQuartileRange, *]
[interQuartileRange, =, q3, -, q1, ;, double, upperOutlierThreshold, =, q3, +, (, interQuartileRange, *, 1.5, ), ;, double, lowerOutlierThreshold, =]
[interQuartileRange, =, q3, -, q1, ;, double, upperOutlierThreshold, =, q3, +, (, interQuartileRange, *, 1.5, ), ;, double, lowerOutlierThreshold, =]
[q3, -, q1, ;, double, upperOutlierThreshold, =, q3, +, (, interQuartileRange, *, 1.5, ), ;, double, lowerOutlierThreshold, =, q1, -]
[-, q1, ;, double, upperOutlierThreshold, =, q3, +, (, interQuartileRange, *, 1.5, ), ;, double, lowerOutlierThreshold, =, q1, -, (]
[-, q1, ;, double, upperOutlierThreshold, =, q3, +, (, interQuartileRange, *, 1.5, ), ;, double, lowerOutlierThreshold, =, q1, -, (]
[;, double, upperOutlierThreshold, =, q3, +, (, interQuartileRange, *, 1.5, ), ;, double, lowerOutlierThreshold, =, q1, -, (, interQuartileRange, *]
[(, interQuartileRange, *, 1.5, ), ;, double, lowerOutlierThreshold, =, q1, -, (, interQuartileRange, *, 1.5, ), ;, double, upperFaroutThreshold, =]
[(, interQuartileRange, *, 1.5, ), ;, double, lowerOutlierThreshold, =, q1, -, (, interQuartileRange, *, 1.5, ), ;, double, upperFaroutThreshold, =]
[*, 1.5, ), ;, double, lowerOutlierThreshold, =, q1, -, (, interQuartileRange, *, 1.5, ), ;, double, upperFaroutThreshold, =, q3, +]
[1.5, ), ;, double, lowerOutlierThreshold, =, q1, -, (, interQuartileRange, *, 1.5, ), ;, double, upperFaroutThreshold, =, q3, +, (]
[1.5, ), ;, double, lowerOutlierThreshold, =, q1, -, (, interQuartileRange, *, 1.5, ), ;, double, upperFaroutThreshold, =, q3, +, (]
[;, double, lowerOutlierThreshold, =, q1, -, (, interQuartileRange, *, 1.5, ), ;, double, upperFaroutThreshold, =, q3, +, (, interQuartileRange, *]
[(, interQuartileRange, *, 1.5, ), ;, double, upperFaroutThreshold, =, q3, +, (, interQuartileRange, *, 2.0, ), ;, double, lowerFaroutThreshold, =]
[(, interQuartileRange, *, 1.5, ), ;, double, upperFaroutThreshold, =, q3, +, (, interQuartileRange, *, 2.0, ), ;, double, lowerFaroutThreshold, =]
[*, 1.5, ), ;, double, upperFaroutThreshold, =, q3, +, (, interQuartileRange, *, 2.0, ), ;, double, lowerFaroutThreshold, =, q1, -]
[1.5, ), ;, double, upperFaroutThreshold, =, q3, +, (, interQuartileRange, *, 2.0, ), ;, double, lowerFaroutThreshold, =, q1, -, (]
[1.5, ), ;, double, upperFaroutThreshold, =, q3, +, (, interQuartileRange, *, 2.0, ), ;, double, lowerFaroutThreshold, =, q1, -, (]
[;, double, upperFaroutThreshold, =, q3, +, (, interQuartileRange, *, 2.0, ), ;, double, lowerFaroutThreshold, =, q1, -, (, interQuartileRange, *]
[(, interQuartileRange, *, 2.0, ), ;, double, lowerFaroutThreshold, =, q1, -, (, interQuartileRange, *, 2.0, ), ;, double, minRegularValue, =]
[(, interQuartileRange, *, 2.0, ), ;, double, lowerFaroutThreshold, =, q1, -, (, interQuartileRange, *, 2.0, ), ;, double, minRegularValue, =]
[lowerFaroutThreshold, =, q1, -, (, interQuartileRange, *, 2.0, ), ;, double, minRegularValue, =, Double, ., POSITIVE_INFINITY, ;, double, maxRegularValue, =]
[lowerFaroutThreshold, =, q1, -, (, interQuartileRange, *, 2.0, ), ;, double, minRegularValue, =, Double, ., POSITIVE_INFINITY, ;, double, maxRegularValue, =]
[2.0, ), ;, double, minRegularValue, =, Double, ., POSITIVE_INFINITY, ;, double, maxRegularValue, =, Double, ., NEGATIVE_INFINITY, ;, double, minOutlier, =]
[2.0, ), ;, double, minRegularValue, =, Double, ., POSITIVE_INFINITY, ;, double, maxRegularValue, =, Double, ., NEGATIVE_INFINITY, ;, double, minOutlier, =]
[., POSITIVE_INFINITY, ;, double, maxRegularValue, =, Double, ., NEGATIVE_INFINITY, ;, double, minOutlier, =, Double, ., POSITIVE_INFINITY, ;, double, maxOutlier, =]
[., POSITIVE_INFINITY, ;, double, maxRegularValue, =, Double, ., NEGATIVE_INFINITY, ;, double, minOutlier, =, Double, ., POSITIVE_INFINITY, ;, double, maxOutlier, =]
[., NEGATIVE_INFINITY, ;, double, minOutlier, =, Double, ., POSITIVE_INFINITY, ;, double, maxOutlier, =, Double, ., NEGATIVE_INFINITY, ;, List, outliers, =]
[POSITIVE_INFINITY, ;, double, maxOutlier, =, Double, ., NEGATIVE_INFINITY, ;, List, outliers, =, new, ArrayList, (, ), ;, Iterator, iterator, =]
[POSITIVE_INFINITY, ;, double, maxOutlier, =, Double, ., NEGATIVE_INFINITY, ;, List, outliers, =, new, ArrayList, (, ), ;, Iterator, iterator, =]
[;, List, outliers, =, new, ArrayList, (, ), ;, Iterator, iterator, =, vlist, ., iterator, (, ), ;, while, (]
[;, List, outliers, =, new, ArrayList, (, ), ;, Iterator, iterator, =, vlist, ., iterator, (, ), ;, while, (]
[iterator, =, vlist, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Number, number, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Number, number, =, (, Number, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Number, number, =, (, Number, )]
[hasNext, (, ), ), {, Number, number, =, (, Number, ), iterator, ., next, (, ), ;, double, value, =]
[hasNext, (, ), ), {, Number, number, =, (, Number, ), iterator, ., next, (, ), ;, double, value, =]
[(, Number, ), iterator, ., next, (, ), ;, double, value, =, number, ., doubleValue, (, ), ;, if, (]
[(, Number, ), iterator, ., next, (, ), ;, double, value, =, number, ., doubleValue, (, ), ;, if, (]
[), iterator, ., next, (, ), ;, double, value, =, number, ., doubleValue, (, ), ;, if, (, value, >]
[next, (, ), ;, double, value, =, number, ., doubleValue, (, ), ;, if, (, value, >, upperOutlierThreshold, ), {]
[next, (, ), ;, double, value, =, number, ., doubleValue, (, ), ;, if, (, value, >, upperOutlierThreshold, ), {]
[double, value, =, number, ., doubleValue, (, ), ;, if, (, value, >, upperOutlierThreshold, ), {, outliers, ., add, (]
[doubleValue, (, ), ;, if, (, value, >, upperOutlierThreshold, ), {, outliers, ., add, (, number, ), ;, if, (]
[doubleValue, (, ), ;, if, (, value, >, upperOutlierThreshold, ), {, outliers, ., add, (, number, ), ;, if, (]
[doubleValue, (, ), ;, if, (, value, >, upperOutlierThreshold, ), {, outliers, ., add, (, number, ), ;, if, (]
[), ;, if, (, value, >, upperOutlierThreshold, ), {, outliers, ., add, (, number, ), ;, if, (, value, >]
[if, (, value, >, upperOutlierThreshold, ), {, outliers, ., add, (, number, ), ;, if, (, value, >, maxOutlier, &&]
[if, (, value, >, upperOutlierThreshold, ), {, outliers, ., add, (, number, ), ;, if, (, value, >, maxOutlier, &&]
[value, >, upperOutlierThreshold, ), {, outliers, ., add, (, number, ), ;, if, (, value, >, maxOutlier, &&, value, <=]
[), {, outliers, ., add, (, number, ), ;, if, (, value, >, maxOutlier, &&, value, <=, upperFaroutThreshold, ), {]
[outliers, ., add, (, number, ), ;, if, (, value, >, maxOutlier, &&, value, <=, upperFaroutThreshold, ), {, maxOutlier, =]
[if, (, value, >, maxOutlier, &&, value, <=, upperFaroutThreshold, ), {, maxOutlier, =, value, ;, }, }, else, if, (]
[if, (, value, >, maxOutlier, &&, value, <=, upperFaroutThreshold, ), {, maxOutlier, =, value, ;, }, }, else, if, (]
[value, >, maxOutlier, &&, value, <=, upperFaroutThreshold, ), {, maxOutlier, =, value, ;, }, }, else, if, (, value, <]
[&&, value, <=, upperFaroutThreshold, ), {, maxOutlier, =, value, ;, }, }, else, if, (, value, <, lowerOutlierThreshold, ), {]
[&&, value, <=, upperFaroutThreshold, ), {, maxOutlier, =, value, ;, }, }, else, if, (, value, <, lowerOutlierThreshold, ), {]
[), {, maxOutlier, =, value, ;, }, }, else, if, (, value, <, lowerOutlierThreshold, ), {, outliers, ., add, (]
[;, }, }, else, if, (, value, <, lowerOutlierThreshold, ), {, outliers, ., add, (, number, ), ;, if, (]
[;, }, }, else, if, (, value, <, lowerOutlierThreshold, ), {, outliers, ., add, (, number, ), ;, if, (]
[;, }, }, else, if, (, value, <, lowerOutlierThreshold, ), {, outliers, ., add, (, number, ), ;, if, (]
[}, else, if, (, value, <, lowerOutlierThreshold, ), {, outliers, ., add, (, number, ), ;, if, (, value, <]
[if, (, value, <, lowerOutlierThreshold, ), {, outliers, ., add, (, number, ), ;, if, (, value, <, minOutlier, &&]
[if, (, value, <, lowerOutlierThreshold, ), {, outliers, ., add, (, number, ), ;, if, (, value, <, minOutlier, &&]
[value, <, lowerOutlierThreshold, ), {, outliers, ., add, (, number, ), ;, if, (, value, <, minOutlier, &&, value, >=]
[), {, outliers, ., add, (, number, ), ;, if, (, value, <, minOutlier, &&, value, >=, lowerFaroutThreshold, ), {]
[outliers, ., add, (, number, ), ;, if, (, value, <, minOutlier, &&, value, >=, lowerFaroutThreshold, ), {, minOutlier, =]
[;, if, (, value, <, minOutlier, &&, value, >=, lowerFaroutThreshold, ), {, minOutlier, =, value, ;, }, }, else, {]
[(, value, <, minOutlier, &&, value, >=, lowerFaroutThreshold, ), {, minOutlier, =, value, ;, }, }, else, {, minRegularValue, =]
[(, value, <, minOutlier, &&, value, >=, lowerFaroutThreshold, ), {, minOutlier, =, value, ;, }, }, else, {, minRegularValue, =]
[&&, value, >=, lowerFaroutThreshold, ), {, minOutlier, =, value, ;, }, }, else, {, minRegularValue, =, Math, ., min, (]
[>=, lowerFaroutThreshold, ), {, minOutlier, =, value, ;, }, }, else, {, minRegularValue, =, Math, ., min, (, minRegularValue, ,]
[{, minOutlier, =, value, ;, }, }, else, {, minRegularValue, =, Math, ., min, (, minRegularValue, ,, value, ), ;]
[=, value, ;, }, }, else, {, minRegularValue, =, Math, ., min, (, minRegularValue, ,, value, ), ;, maxRegularValue, =]
[=, value, ;, }, }, else, {, minRegularValue, =, Math, ., min, (, minRegularValue, ,, value, ), ;, maxRegularValue, =]
[}, else, {, minRegularValue, =, Math, ., min, (, minRegularValue, ,, value, ), ;, maxRegularValue, =, Math, ., max, (]
[{, minRegularValue, =, Math, ., min, (, minRegularValue, ,, value, ), ;, maxRegularValue, =, Math, ., max, (, maxRegularValue, ,]
[., min, (, minRegularValue, ,, value, ), ;, maxRegularValue, =, Math, ., max, (, maxRegularValue, ,, value, ), ;, }]
[(, minRegularValue, ,, value, ), ;, maxRegularValue, =, Math, ., max, (, maxRegularValue, ,, value, ), ;, }, minOutlier, =]
[(, minRegularValue, ,, value, ), ;, maxRegularValue, =, Math, ., max, (, maxRegularValue, ,, value, ), ;, }, minOutlier, =]
[), ;, maxRegularValue, =, Math, ., max, (, maxRegularValue, ,, value, ), ;, }, minOutlier, =, Math, ., min, (]
[maxRegularValue, =, Math, ., max, (, maxRegularValue, ,, value, ), ;, }, minOutlier, =, Math, ., min, (, minOutlier, ,]
[., max, (, maxRegularValue, ,, value, ), ;, }, minOutlier, =, Math, ., min, (, minOutlier, ,, minRegularValue, ), ;]
[(, maxRegularValue, ,, value, ), ;, }, minOutlier, =, Math, ., min, (, minOutlier, ,, minRegularValue, ), ;, maxOutlier, =]
[(, maxRegularValue, ,, value, ), ;, }, minOutlier, =, Math, ., min, (, minOutlier, ,, minRegularValue, ), ;, maxOutlier, =]
[), ;, }, minOutlier, =, Math, ., min, (, minOutlier, ,, minRegularValue, ), ;, maxOutlier, =, Math, ., max, (]
[}, minOutlier, =, Math, ., min, (, minOutlier, ,, minRegularValue, ), ;, maxOutlier, =, Math, ., max, (, maxOutlier, ,]
[min, (, minOutlier, ,, minRegularValue, ), ;, maxOutlier, =, Math, ., max, (, maxOutlier, ,, maxRegularValue, ), ;, }, return]
[,, minRegularValue, ), ;, maxOutlier, =, Math, ., max, (, maxOutlier, ,, maxRegularValue, ), ;, }, return, new, BoxAndWhiskerItem, (]
[;, maxOutlier, =, Math, ., max, (, maxOutlier, ,, maxRegularValue, ), ;, }, return, new, BoxAndWhiskerItem, (, new, Double, (]
[Math, ., max, (, maxOutlier, ,, maxRegularValue, ), ;, }, return, new, BoxAndWhiskerItem, (, new, Double, (, mean, ), ,]
[(, maxOutlier, ,, maxRegularValue, ), ;, }, return, new, BoxAndWhiskerItem, (, new, Double, (, mean, ), ,, new, Double, (]
[maxRegularValue, ), ;, }, return, new, BoxAndWhiskerItem, (, new, Double, (, mean, ), ,, new, Double, (, median, ), ,]
[}, return, new, BoxAndWhiskerItem, (, new, Double, (, mean, ), ,, new, Double, (, median, ), ,, new, Double, (]
[BoxAndWhiskerItem, (, new, Double, (, mean, ), ,, new, Double, (, median, ), ,, new, Double, (, q1, ), ,]
[Double, (, mean, ), ,, new, Double, (, median, ), ,, new, Double, (, q1, ), ,, new, Double, (]
[), ,, new, Double, (, median, ), ,, new, Double, (, q1, ), ,, new, Double, (, q3, ), ,]
[Double, (, median, ), ,, new, Double, (, q1, ), ,, new, Double, (, q3, ), ,, new, Double, (]
[), ,, new, Double, (, q1, ), ,, new, Double, (, q3, ), ,, new, Double, (, minRegularValue, ), ,]
[Double, (, q1, ), ,, new, Double, (, q3, ), ,, new, Double, (, minRegularValue, ), ,, new, Double, (]
[), ,, new, Double, (, q3, ), ,, new, Double, (, minRegularValue, ), ,, new, Double, (, maxRegularValue, ), ,]
[Double, (, q3, ), ,, new, Double, (, minRegularValue, ), ,, new, Double, (, maxRegularValue, ), ,, new, Double, (]
[), ,, new, Double, (, minRegularValue, ), ,, new, Double, (, maxRegularValue, ), ,, new, Double, (, minOutlier, ), ,]
[Double, (, minRegularValue, ), ,, new, Double, (, maxRegularValue, ), ,, new, Double, (, minOutlier, ), ,, new, Double, (]
[), ,, new, Double, (, maxRegularValue, ), ,, new, Double, (, minOutlier, ), ,, new, Double, (, maxOutlier, ), ,]
[Double, (, maxOutlier, ), ,, outliers, ), ;, }, public, static, double, calculateQ1, (, List, values, ), {, if, (]
[Double, (, maxOutlier, ), ,, outliers, ), ;, }, public, static, double, calculateQ1, (, List, values, ), {, if, (]
[maxOutlier, ), ,, outliers, ), ;, }, public, static, double, calculateQ1, (, List, values, ), {, if, (, values, ==]
[), ;, }, public, static, double, calculateQ1, (, List, values, ), {, if, (, values, ==, null, ), {, throw]
[public, static, double, calculateQ1, (, List, values, ), {, if, (, values, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, values, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, double, result, =]
[), {, if, (, values, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, double, result, =]
[), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, double, result, =, Double, ., NaN, ;, int, count, =]
[), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, double, result, =, Double, ., NaN, ;, int, count, =]
[;, }, double, result, =, Double, ., NaN, ;, int, count, =, values, ., size, (, ), ;, if, (]
[;, }, double, result, =, Double, ., NaN, ;, int, count, =, values, ., size, (, ), ;, if, (]
[double, result, =, Double, ., NaN, ;, int, count, =, values, ., size, (, ), ;, if, (, count, >]
[NaN, ;, int, count, =, values, ., size, (, ), ;, if, (, count, >, 0, ), {, if, (]
[NaN, ;, int, count, =, values, ., size, (, ), ;, if, (, count, >, 0, ), {, if, (]
[NaN, ;, int, count, =, values, ., size, (, ), ;, if, (, count, >, 0, ), {, if, (]
[int, count, =, values, ., size, (, ), ;, if, (, count, >, 0, ), {, if, (, count, %]
[=, values, ., size, (, ), ;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==]
[), ;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (]
[), ;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (]
[if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >]
[>, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {]
[), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {, result, =]
[), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {, result, =]
[count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (]
[2, ==, 1, ), {, if, (, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (, values, ,]
[1, ), {, if, (, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,]
[1, ), {, if, (, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,]
[{, if, (, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, count, /]
[), {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, count, /, 2, ), ;, }, else, {]
[result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, count, /, 2, ), ;, }, else, {, result, =]
[result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, count, /, 2, ), ;, }, else, {, result, =]
[calculateMedian, (, values, ,, 0, ,, count, /, 2, ), ;, }, else, {, result, =, Statistics, ., calculateMedian, (]
[values, ,, 0, ,, count, /, 2, ), ;, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,]
[0, ,, count, /, 2, ), ;, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,]
[}, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, 0, ), ;, }, }, else, {]
[{, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, 0, ), ;, }, }, else, {, result, =]
[{, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, 0, ), ;, }, }, else, {, result, =]
[., calculateMedian, (, values, ,, 0, ,, 0, ), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (]
[(, values, ,, 0, ,, 0, ), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,]
[,, 0, ,, 0, ), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,]
[,, 0, ,, 0, ), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,]
[,, 0, ,, 0, ), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,]
[,, 0, ), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, count, /]
[), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, count, /, 2, -]
[result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, count, /, 2, -, 1, ), ;, }, }, return]
[1, ), ;, }, }, return, result, ;, }, public, static, double, calculateQ3, (, List, values, ), {, if, (]
[1, ), ;, }, }, return, result, ;, }, public, static, double, calculateQ3, (, List, values, ), {, if, (]
[;, }, }, return, result, ;, }, public, static, double, calculateQ3, (, List, values, ), {, if, (, values, ==]
[result, ;, }, public, static, double, calculateQ3, (, List, values, ), {, if, (, values, ==, null, ), {, throw]
[public, static, double, calculateQ3, (, List, values, ), {, if, (, values, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, values, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, double, result, =]
[), {, if, (, values, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, double, result, =]
[), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, double, result, =, Double, ., NaN, ;, int, count, =]
[), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, double, result, =, Double, ., NaN, ;, int, count, =]
[;, }, double, result, =, Double, ., NaN, ;, int, count, =, values, ., size, (, ), ;, if, (]
[;, }, double, result, =, Double, ., NaN, ;, int, count, =, values, ., size, (, ), ;, if, (]
[double, result, =, Double, ., NaN, ;, int, count, =, values, ., size, (, ), ;, if, (, count, >]
[NaN, ;, int, count, =, values, ., size, (, ), ;, if, (, count, >, 0, ), {, if, (]
[NaN, ;, int, count, =, values, ., size, (, ), ;, if, (, count, >, 0, ), {, if, (]
[NaN, ;, int, count, =, values, ., size, (, ), ;, if, (, count, >, 0, ), {, if, (]
[int, count, =, values, ., size, (, ), ;, if, (, count, >, 0, ), {, if, (, count, %]
[=, values, ., size, (, ), ;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==]
[), ;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (]
[), ;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (]
[if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >]
[>, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {]
[), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {, result, =]
[), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {, result, =]
[count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (]
[2, ==, 1, ), {, if, (, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (, values, ,]
[2, ==, 1, ), {, if, (, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (, values, ,]
[1, ), {, if, (, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (, values, ,, count, /]
[{, if, (, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (, values, ,, count, /, 2, ,]
[{, if, (, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (, values, ,, count, /, 2, ,]
[(, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (, values, ,, count, /, 2, ,, count, -]
[result, =, Statistics, ., calculateMedian, (, values, ,, count, /, 2, ,, count, -, 1, ), ;, }, else, {]
[Statistics, ., calculateMedian, (, values, ,, count, /, 2, ,, count, -, 1, ), ;, }, else, {, result, =]
[Statistics, ., calculateMedian, (, values, ,, count, /, 2, ,, count, -, 1, ), ;, }, else, {, result, =]
[values, ,, count, /, 2, ,, count, -, 1, ), ;, }, else, {, result, =, Statistics, ., calculateMedian, (]
[count, /, 2, ,, count, -, 1, ), ;, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,]
[2, ,, count, -, 1, ), ;, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,]
[}, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, 0, ), ;, }, }, else, {]
[{, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, 0, ), ;, }, }, else, {, result, =]
[{, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, 0, ), ;, }, }, else, {, result, =]
[., calculateMedian, (, values, ,, 0, ,, 0, ), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (]
[(, values, ,, 0, ,, 0, ), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,]
[(, values, ,, 0, ,, 0, ), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,]
[,, 0, ,, 0, ), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, count, /]
[,, 0, ), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, count, /, 2, ,]
[,, 0, ), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, count, /, 2, ,]
[), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, count, /, 2, ,, count, -]
[result, =, Statistics, ., calculateMedian, (, values, ,, count, /, 2, ,, count, -, 1, ), ;, }, }, return]
