[private, static, final, long, serialVersionUID, =, 5708241235177666790L, ;, final, int, iDivisor, ;, final, DurationField, iDurationField, ;, final, DurationField, iRangeField, ;]
[), private, static, final, long, serialVersionUID, =, 5708241235177666790L, ;, final, int, iDivisor, ;, final, DurationField, iDurationField, ;, final, DurationField, iRangeField]
[;, final, int, iDivisor, ;, final, DurationField, iDurationField, ;, final, DurationField, iRangeField, ;, public, RemainderDateTimeField, (, DateTimeField, field, ,, DateTimeFieldType]
[,, type, ), ;, if, (, divisor, <, 2, ), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, DurationField]
[), ;, if, (, divisor, <, 2, ), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, DurationField, rangeField, =]
[), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, DurationField, rangeField, =, field, ., getDurationField, (, ), ;, if]
[<, 2, ), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, DurationField, rangeField, =, field, ., getDurationField, (, )]
[), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, DurationField, rangeField, =, field, ., getDurationField, (, ), ;, if]
[;, }, DurationField, rangeField, =, field, ., getDurationField, (, ), ;, if, (, rangeField, ==, null, ), {, iRangeField, =]
[), ;, }, DurationField, rangeField, =, field, ., getDurationField, (, ), ;, if, (, rangeField, ==, null, ), {, iRangeField]
[;, if, (, rangeField, ==, null, ), {, iRangeField, =, null, ;, }, else, {, iRangeField, =, new, ScaledDurationField, (]
[., getDurationField, (, ), ;, if, (, rangeField, ==, null, ), {, iRangeField, =, null, ;, }, else, {, iRangeField]
[), {, iRangeField, =, null, ;, }, else, {, iRangeField, =, new, ScaledDurationField, (, rangeField, ,, type, ., getRangeDurationType, (]
[==, null, ), {, iRangeField, =, null, ;, }, else, {, iRangeField, =, new, ScaledDurationField, (, rangeField, ,, type, .]
[), {, iRangeField, =, null, ;, }, else, {, iRangeField, =, new, ScaledDurationField, (, rangeField, ,, type, ., getRangeDurationType, (]
[=, null, ;, }, else, {, iRangeField, =, new, ScaledDurationField, (, rangeField, ,, type, ., getRangeDurationType, (, ), ,, divisor]
[;, }, else, {, iRangeField, =, new, ScaledDurationField, (, rangeField, ,, type, ., getRangeDurationType, (, ), ,, divisor, ), ;]
[=, new, ScaledDurationField, (, rangeField, ,, type, ., getRangeDurationType, (, ), ,, divisor, ), ;, }, iDurationField, =, field, .]
[;, }, iDurationField, =, field, ., getDurationField, (, ), ;, iDivisor, =, divisor, ;, }, public, RemainderDateTimeField, (, DateTimeField, field]
[,, type, ., getRangeDurationType, (, ), ,, divisor, ), ;, }, iDurationField, =, field, ., getDurationField, (, ), ;, iDivisor]
[,, divisor, ), ;, }, iDurationField, =, field, ., getDurationField, (, ), ;, iDivisor, =, divisor, ;, }, public, RemainderDateTimeField]
[., getRangeDurationType, (, ), ,, divisor, ), ;, }, iDurationField, =, field, ., getDurationField, (, ), ;, iDivisor, =, divisor]
[), ;, }, iDurationField, =, field, ., getDurationField, (, ), ;, iDivisor, =, divisor, ;, }, public, RemainderDateTimeField, (, DateTimeField]
[=, field, ., getDurationField, (, ), ;, iDivisor, =, divisor, ;, }, public, RemainderDateTimeField, (, DateTimeField, field, ,, DurationField, rangeField]
[;, iDivisor, =, divisor, ;, }, public, RemainderDateTimeField, (, DateTimeField, field, ,, DurationField, rangeField, ,, DateTimeFieldType, type, ,, int, divisor]
[., getDurationField, (, ), ;, iDivisor, =, divisor, ;, }, public, RemainderDateTimeField, (, DateTimeField, field, ,, DurationField, rangeField, ,, DateTimeFieldType]
[=, divisor, ;, }, public, RemainderDateTimeField, (, DateTimeField, field, ,, DurationField, rangeField, ,, DateTimeFieldType, type, ,, int, divisor, ), {]
[;, }, public, RemainderDateTimeField, (, DateTimeField, field, ,, DurationField, rangeField, ,, DateTimeFieldType, type, ,, int, divisor, ), {, super, (]
[,, type, ), ;, if, (, divisor, <, 2, ), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, iRangeField]
[), ;, if, (, divisor, <, 2, ), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, iRangeField, =, rangeField]
[), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, iRangeField, =, rangeField, ;, iDurationField, =, field, ., getDurationField, (]
[<, 2, ), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, iRangeField, =, rangeField, ;, iDurationField, =, field, .]
[), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, iRangeField, =, rangeField, ;, iDurationField, =, field, ., getDurationField, (]
[;, }, iRangeField, =, rangeField, ;, iDurationField, =, field, ., getDurationField, (, ), ;, iDivisor, =, divisor, ;, }, public]
[), ;, }, iRangeField, =, rangeField, ;, iDurationField, =, field, ., getDurationField, (, ), ;, iDivisor, =, divisor, ;, }]
[=, rangeField, ;, iDurationField, =, field, ., getDurationField, (, ), ;, iDivisor, =, divisor, ;, }, public, RemainderDateTimeField, (, DividedDateTimeField]
[;, iDurationField, =, field, ., getDurationField, (, ), ;, iDivisor, =, divisor, ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, )]
[=, field, ., getDurationField, (, ), ;, iDivisor, =, divisor, ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, ), {, this]
[;, iDivisor, =, divisor, ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, ), {, this, (, dividedField, ,, dividedField, ., getType]
[., getDurationField, (, ), ;, iDivisor, =, divisor, ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, ), {, this, (, dividedField]
[=, divisor, ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, ), {, this, (, dividedField, ,, dividedField, ., getType, (, )]
[;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, ), {, this, (, dividedField, ,, dividedField, ., getType, (, ), ), ;]
[,, dividedField, ., getType, (, ), ), ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, ,, DateTimeFieldType, type, ), {, this]
[), ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, ,, DateTimeFieldType, type, ), {, this, (, dividedField, ,, dividedField, ., getWrappedField]
[., getType, (, ), ), ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, ,, DateTimeFieldType, type, ), {, this, (, dividedField]
[,, dividedField, ., getWrappedField, (, ), ., getDurationField, (, ), ,, type, ), ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField]
[,, type, ), ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, ,, DurationField, durationField, ,, DateTimeFieldType, type, ), {, super, (]
[., getDurationField, (, ), ,, type, ), ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, ,, DurationField, durationField, ,, DateTimeFieldType, type]
[., getWrappedField, (, ), ., getDurationField, (, ), ,, type, ), ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, ,, DurationField]
[), ;, }, public, RemainderDateTimeField, (, DividedDateTimeField, dividedField, ,, DurationField, durationField, ,, DateTimeFieldType, type, ), {, super, (, dividedField, .]
[,, type, ), ;, iDivisor, =, dividedField, ., iDivisor, ;, iDurationField, =, durationField, ;, iRangeField, =, dividedField, ., iDurationField, ;]
[., getWrappedField, (, ), ,, type, ), ;, iDivisor, =, dividedField, ., iDivisor, ;, iDurationField, =, durationField, ;, iRangeField, =]
[), ;, iDivisor, =, dividedField, ., iDivisor, ;, iDurationField, =, durationField, ;, iRangeField, =, dividedField, ., iDurationField, ;, }, public]
[=, dividedField, ., iDivisor, ;, iDurationField, =, durationField, ;, iRangeField, =, dividedField, ., iDurationField, ;, }, public, int, get, (]
[;, iDurationField, =, durationField, ;, iRangeField, =, dividedField, ., iDurationField, ;, }, public, int, get, (, long, instant, ), {]
[., iDivisor, ;, iDurationField, =, durationField, ;, iRangeField, =, dividedField, ., iDurationField, ;, }, public, int, get, (, long, instant]
[=, durationField, ;, iRangeField, =, dividedField, ., iDurationField, ;, }, public, int, get, (, long, instant, ), {, int, value]
[;, iRangeField, =, dividedField, ., iDurationField, ;, }, public, int, get, (, long, instant, ), {, int, value, =, getWrappedField]
[=, dividedField, ., iDurationField, ;, }, public, int, get, (, long, instant, ), {, int, value, =, getWrappedField, (, )]
[;, }, public, int, get, (, long, instant, ), {, int, value, =, getWrappedField, (, ), ., get, (, instant]
[., iDurationField, ;, }, public, int, get, (, long, instant, ), {, int, value, =, getWrappedField, (, ), ., get]
[;, if, (, value, >=, 0, ), {, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor, -]
[., get, (, instant, ), ;, if, (, value, >=, 0, ), {, return, value, %, iDivisor, ;, }, else]
[), ;, if, (, value, >=, 0, ), {, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor]
[), {, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +, (, (, value]
[>=, 0, ), {, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +, (]
[), {, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +, (, (, value]
[;, }, else, {, return, (, iDivisor, -, 1, ), +, (, (, value, +, 1, ), %, iDivisor, )]
[%, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +, (, (, value, +, 1, ), %]
[;, }, else, {, return, (, iDivisor, -, 1, ), +, (, (, value, +, 1, ), %, iDivisor, )]
[;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (, instant, ,, FieldUtils]
[+, (, (, value, +, 1, ), %, iDivisor, ), ;, }, }, public, long, addWrapField, (, long, instant, ,]
[), +, (, (, value, +, 1, ), %, iDivisor, ), ;, }, }, public, long, addWrapField, (, long, instant]
[-, 1, ), +, (, (, value, +, 1, ), %, iDivisor, ), ;, }, }, public, long, addWrapField, (]
[), +, (, (, value, +, 1, ), %, iDivisor, ), ;, }, }, public, long, addWrapField, (, long, instant]
[;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (, instant, ,, FieldUtils]
[), ;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (, instant, ,]
[%, iDivisor, ), ;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (]
[), %, iDivisor, ), ;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set]
[+, 1, ), %, iDivisor, ), ;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {]
[), %, iDivisor, ), ;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set]
[), ;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (, instant, ,]
[;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value]
[,, FieldUtils, ., getWrappedValue, (, get, (, instant, ), ,, amount, ,, 0, ,, iDivisor, -, 1, ), ), ;]
[), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,]
[., getWrappedValue, (, get, (, instant, ), ,, amount, ,, 0, ,, iDivisor, -, 1, ), ), ;, }, public]
[,, amount, ,, 0, ,, iDivisor, -, 1, ), ), ;, }, public, long, set, (, long, instant, ,, int]
[), ,, amount, ,, 0, ,, iDivisor, -, 1, ), ), ;, }, public, long, set, (, long, instant, ,]
[,, 0, ,, iDivisor, -, 1, ), ), ;, }, public, long, set, (, long, instant, ,, int, value, )]
[,, iDivisor, -, 1, ), ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils]
[), ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this]
[-, 1, ), ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds]
[), ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this]
[;, int, divided, =, getDivided, (, getWrappedField, (, ), ., get, (, instant, ), ), ;, return, getWrappedField, (, )]
[., verifyValueBounds, (, this, ,, value, ,, 0, ,, iDivisor, -, 1, ), ;, int, divided, =, getDivided, (, getWrappedField]
[,, value, ,, 0, ,, iDivisor, -, 1, ), ;, int, divided, =, getDivided, (, getWrappedField, (, ), ., get]
[,, 0, ,, iDivisor, -, 1, ), ;, int, divided, =, getDivided, (, getWrappedField, (, ), ., get, (, instant]
[,, iDivisor, -, 1, ), ;, int, divided, =, getDivided, (, getWrappedField, (, ), ., get, (, instant, ), )]
[), ;, int, divided, =, getDivided, (, getWrappedField, (, ), ., get, (, instant, ), ), ;, return, getWrappedField, (]
[-, 1, ), ;, int, divided, =, getDivided, (, getWrappedField, (, ), ., get, (, instant, ), ), ;, return]
[), ;, int, divided, =, getDivided, (, getWrappedField, (, ), ., get, (, instant, ), ), ;, return, getWrappedField, (]
[;, return, getWrappedField, (, ), ., set, (, instant, ,, divided, *, iDivisor, +, value, ), ;, }, @, Override]
[), ;, return, getWrappedField, (, ), ., set, (, instant, ,, divided, *, iDivisor, +, value, ), ;, }, @]
[., get, (, instant, ), ), ;, return, getWrappedField, (, ), ., set, (, instant, ,, divided, *, iDivisor, +]
[), ), ;, return, getWrappedField, (, ), ., set, (, instant, ,, divided, *, iDivisor, +, value, ), ;, }]
[;, }, @, Override, public, DurationField, getDurationField, (, ), {, return, iDurationField, ;, }, public, DurationField, getRangeDurationField, (, ), {]
[., set, (, instant, ,, divided, *, iDivisor, +, value, ), ;, }, @, Override, public, DurationField, getDurationField, (, )]
[,, divided, *, iDivisor, +, value, ), ;, }, @, Override, public, DurationField, getDurationField, (, ), {, return, iDurationField, ;]
[), ;, }, @, Override, public, DurationField, getDurationField, (, ), {, return, iDurationField, ;, }, public, DurationField, getRangeDurationField, (, )]
[+, value, ), ;, }, @, Override, public, DurationField, getDurationField, (, ), {, return, iDurationField, ;, }, public, DurationField, getRangeDurationField]
[*, iDivisor, +, value, ), ;, }, @, Override, public, DurationField, getDurationField, (, ), {, return, iDurationField, ;, }, public]
[+, value, ), ;, }, @, Override, public, DurationField, getDurationField, (, ), {, return, iDurationField, ;, }, public, DurationField, getRangeDurationField]
[), ;, }, @, Override, public, DurationField, getDurationField, (, ), {, return, iDurationField, ;, }, public, DurationField, getRangeDurationField, (, )]
[;, }, public, DurationField, getRangeDurationField, (, ), {, return, iRangeField, ;, }, public, int, getMinimumValue, (, ), {, return, 0]
[;, }, public, int, getMinimumValue, (, ), {, return, 0, ;, }, public, int, getMaximumValue, (, ), {, return, iDivisor]
[;, }, public, int, getMaximumValue, (, ), {, return, iDivisor, -, 1, ;, }, public, long, roundFloor, (, long, instant]
[;, }, public, long, roundFloor, (, long, instant, ), {, return, getWrappedField, (, ), ., roundFloor, (, instant, ), ;]
[-, 1, ;, }, public, long, roundFloor, (, long, instant, ), {, return, getWrappedField, (, ), ., roundFloor, (, instant]
[;, }, public, long, roundFloor, (, long, instant, ), {, return, getWrappedField, (, ), ., roundFloor, (, instant, ), ;]
[;, }, public, long, roundCeiling, (, long, instant, ), {, return, getWrappedField, (, ), ., roundCeiling, (, instant, ), ;]
[., roundFloor, (, instant, ), ;, }, public, long, roundCeiling, (, long, instant, ), {, return, getWrappedField, (, ), .]
[), ;, }, public, long, roundCeiling, (, long, instant, ), {, return, getWrappedField, (, ), ., roundCeiling, (, instant, )]
[;, }, public, long, roundHalfFloor, (, long, instant, ), {, return, getWrappedField, (, ), ., roundHalfFloor, (, instant, ), ;]
[., roundCeiling, (, instant, ), ;, }, public, long, roundHalfFloor, (, long, instant, ), {, return, getWrappedField, (, ), .]
[), ;, }, public, long, roundHalfFloor, (, long, instant, ), {, return, getWrappedField, (, ), ., roundHalfFloor, (, instant, )]
[;, }, public, long, roundHalfCeiling, (, long, instant, ), {, return, getWrappedField, (, ), ., roundHalfCeiling, (, instant, ), ;]
[., roundHalfFloor, (, instant, ), ;, }, public, long, roundHalfCeiling, (, long, instant, ), {, return, getWrappedField, (, ), .]
[), ;, }, public, long, roundHalfCeiling, (, long, instant, ), {, return, getWrappedField, (, ), ., roundHalfCeiling, (, instant, )]
[;, }, public, long, roundHalfEven, (, long, instant, ), {, return, getWrappedField, (, ), ., roundHalfEven, (, instant, ), ;]
[., roundHalfCeiling, (, instant, ), ;, }, public, long, roundHalfEven, (, long, instant, ), {, return, getWrappedField, (, ), .]
[), ;, }, public, long, roundHalfEven, (, long, instant, ), {, return, getWrappedField, (, ), ., roundHalfEven, (, instant, )]
[;, }, public, long, remainder, (, long, instant, ), {, return, getWrappedField, (, ), ., remainder, (, instant, ), ;]
[., roundHalfEven, (, instant, ), ;, }, public, long, remainder, (, long, instant, ), {, return, getWrappedField, (, ), .]
[), ;, }, public, long, remainder, (, long, instant, ), {, return, getWrappedField, (, ), ., remainder, (, instant, )]
[;, }, public, int, getDivisor, (, ), {, return, iDivisor, ;, }, private, int, getDivided, (, int, value, ), {]
[., remainder, (, instant, ), ;, }, public, int, getDivisor, (, ), {, return, iDivisor, ;, }, private, int, getDivided]
[), ;, }, public, int, getDivisor, (, ), {, return, iDivisor, ;, }, private, int, getDivided, (, int, value, )]
[;, }, private, int, getDivided, (, int, value, ), {, if, (, value, >=, 0, ), {, return, value, /]
[), {, return, value, /, iDivisor, ;, }, else, {, return, (, (, value, +, 1, ), /, iDivisor, )]
[>=, 0, ), {, return, value, /, iDivisor, ;, }, else, {, return, (, (, value, +, 1, ), /]
[), {, return, value, /, iDivisor, ;, }, else, {, return, (, (, value, +, 1, ), /, iDivisor, )]
[;, }, else, {, return, (, (, value, +, 1, ), /, iDivisor, ), -, 1, ;, }, }, }]
[/, iDivisor, ;, }, else, {, return, (, (, value, +, 1, ), /, iDivisor, ), -, 1, ;, }]
[;, }, else, {, return, (, (, value, +, 1, ), /, iDivisor, ), -, 1, ;, }, }, }]
[;, }, }, }]
[-, 1, ;, }, }, }]
[), -, 1, ;, }, }, }]
[/, iDivisor, ), -, 1, ;, }, }, }]
[), /, iDivisor, ), -, 1, ;, }, }, }]
[+, 1, ), /, iDivisor, ), -, 1, ;, }, }, }]
[), /, iDivisor, ), -, 1, ;, }, }, }]
[), -, 1, ;, }, }, }]
[;, }, }, }]
