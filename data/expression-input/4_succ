[public, class, DefaultAnnotationEngine, implements, AnnotationEngine, {, private, final, Map, <, Class, <, ?, extends, Annotation, >, ,, FieldAnnotationProcessor, <, ?]
[), public, class, DefaultAnnotationEngine, implements, AnnotationEngine, {, private, final, Map, <, Class, <, ?, extends, Annotation, >, ,, FieldAnnotationProcessor, <]
[;, public, DefaultAnnotationEngine, (, ), {, registerAnnotationProcessor, (, Mock, ., class, ,, new, MockAnnotationProcessor, (, ), ), ;, registerAnnotationProcessor, (]
[;, registerAnnotationProcessor, (, MockitoAnnotations, ., Mock, ., class, ,, new, MockitoAnnotationsMockAnnotationProcessor, (, ), ), ;, registerAnnotationProcessor, (, Captor, ., class]
[,, new, MockAnnotationProcessor, (, ), ), ;, registerAnnotationProcessor, (, MockitoAnnotations, ., Mock, ., class, ,, new, MockitoAnnotationsMockAnnotationProcessor, (, ), )]
[), ;, registerAnnotationProcessor, (, MockitoAnnotations, ., Mock, ., class, ,, new, MockitoAnnotationsMockAnnotationProcessor, (, ), ), ;, registerAnnotationProcessor, (, Captor, .]
[;, registerAnnotationProcessor, (, Captor, ., class, ,, new, CaptorAnnotationProcessor, (, ), ), ;, }, @, SuppressWarnings, (, "deprecation", ), public]
[,, new, MockitoAnnotationsMockAnnotationProcessor, (, ), ), ;, registerAnnotationProcessor, (, Captor, ., class, ,, new, CaptorAnnotationProcessor, (, ), ), ;, }]
[), ;, registerAnnotationProcessor, (, Captor, ., class, ,, new, CaptorAnnotationProcessor, (, ), ), ;, }, @, SuppressWarnings, (, "deprecation", )]
[;, }, @, SuppressWarnings, (, "deprecation", ), public, Object, createMockFor, (, Annotation, annotation, ,, Field, field, ), {, return, forAnnotation]
[,, new, CaptorAnnotationProcessor, (, ), ), ;, }, @, SuppressWarnings, (, "deprecation", ), public, Object, createMockFor, (, Annotation, annotation, ,]
[), ;, }, @, SuppressWarnings, (, "deprecation", ), public, Object, createMockFor, (, Annotation, annotation, ,, Field, field, ), {, return]
[public, Object, createMockFor, (, Annotation, annotation, ,, Field, field, ), {, return, forAnnotation, (, annotation, ), ., process, (, annotation]
[), public, Object, createMockFor, (, Annotation, annotation, ,, Field, field, ), {, return, forAnnotation, (, annotation, ), ., process, (]
[;, }, private, <, A, extends, Annotation, >, FieldAnnotationProcessor, <, A, >, forAnnotation, (, A, annotation, ), {, if, (]
[., process, (, annotation, ,, field, ), ;, }, private, <, A, extends, Annotation, >, FieldAnnotationProcessor, <, A, >, forAnnotation]
[), ., process, (, annotation, ,, field, ), ;, }, private, <, A, extends, Annotation, >, FieldAnnotationProcessor, <, A, >]
[,, field, ), ;, }, private, <, A, extends, Annotation, >, FieldAnnotationProcessor, <, A, >, forAnnotation, (, A, annotation, )]
[), ;, }, private, <, A, extends, Annotation, >, FieldAnnotationProcessor, <, A, >, forAnnotation, (, A, annotation, ), {, if]
[), {, return, (, FieldAnnotationProcessor, <, A, >, ), annotationProcessorMap, ., get, (, annotation, ., annotationType, (, ), ), ;]
[., containsKey, (, annotation, ., annotationType, (, ), ), ), {, return, (, FieldAnnotationProcessor, <, A, >, ), annotationProcessorMap, .]
[), ), {, return, (, FieldAnnotationProcessor, <, A, >, ), annotationProcessorMap, ., get, (, annotation, ., annotationType, (, ), )]
[., annotationType, (, ), ), ), {, return, (, FieldAnnotationProcessor, <, A, >, ), annotationProcessorMap, ., get, (, annotation, .]
[;, }, return, new, FieldAnnotationProcessor, <, A, >, (, ), {, public, Object, process, (, A, annotation, ,, Field, field]
[;, }, return, new, FieldAnnotationProcessor, <, A, >, (, ), {, public, Object, process, (, A, annotation, ,, Field, field]
[., get, (, annotation, ., annotationType, (, ), ), ;, }, return, new, FieldAnnotationProcessor, <, A, >, (, ), {]
[), ;, }, return, new, FieldAnnotationProcessor, <, A, >, (, ), {, public, Object, process, (, A, annotation, ,, Field]
[., annotationType, (, ), ), ;, }, return, new, FieldAnnotationProcessor, <, A, >, (, ), {, public, Object, process, (]
[;, }, private, <, A, extends, Annotation, >, void, registerAnnotationProcessor, (, Class, <, A, >, annotationClass, ,, FieldAnnotationProcessor, <, A]
[;, }, }, ;, }, private, <, A, extends, Annotation, >, void, registerAnnotationProcessor, (, Class, <, A, >, annotationClass, ,]
[;, }, public, void, process, (, Class, <, ?, >, clazz, ,, Object, testInstance, ), {, Field, [, ], fields]
[., put, (, annotationClass, ,, fieldAnnotationProcessor, ), ;, }, public, void, process, (, Class, <, ?, >, clazz, ,, Object]
[,, fieldAnnotationProcessor, ), ;, }, public, void, process, (, Class, <, ?, >, clazz, ,, Object, testInstance, ), {, Field]
[), ;, }, public, void, process, (, Class, <, ?, >, clazz, ,, Object, testInstance, ), {, Field, [, ]]
[;, for, (, Field, field, :, fields, ), {, boolean, alreadyAssigned, =, false, ;, for, (, Annotation, annotation, :, field]
[., getDeclaredFields, (, ), ;, for, (, Field, field, :, fields, ), {, boolean, alreadyAssigned, =, false, ;, for, (]
[), {, boolean, alreadyAssigned, =, false, ;, for, (, Annotation, annotation, :, field, ., getAnnotations, (, ), ), {, Object]
[;, for, (, Annotation, annotation, :, field, ., getAnnotations, (, ), ), {, Object, mock, =, createMockFor, (, annotation, ,]
[), {, Object, mock, =, createMockFor, (, annotation, ,, field, ), ;, if, (, mock, !=, null, ), {, throwIfAlreadyAssigned]
[., getAnnotations, (, ), ), {, Object, mock, =, createMockFor, (, annotation, ,, field, ), ;, if, (, mock, !=]
[;, if, (, mock, !=, null, ), {, throwIfAlreadyAssigned, (, field, ,, alreadyAssigned, ), ;, alreadyAssigned, =, true, ;, try]
[,, field, ), ;, if, (, mock, !=, null, ), {, throwIfAlreadyAssigned, (, field, ,, alreadyAssigned, ), ;, alreadyAssigned, =]
[), ;, if, (, mock, !=, null, ), {, throwIfAlreadyAssigned, (, field, ,, alreadyAssigned, ), ;, alreadyAssigned, =, true, ;]
[), {, throwIfAlreadyAssigned, (, field, ,, alreadyAssigned, ), ;, alreadyAssigned, =, true, ;, try, {, new, FieldSetter, (, testInstance, ,]
[!=, null, ), {, throwIfAlreadyAssigned, (, field, ,, alreadyAssigned, ), ;, alreadyAssigned, =, true, ;, try, {, new, FieldSetter, (]
[), {, throwIfAlreadyAssigned, (, field, ,, alreadyAssigned, ), ;, alreadyAssigned, =, true, ;, try, {, new, FieldSetter, (, testInstance, ,]
[;, alreadyAssigned, =, true, ;, try, {, new, FieldSetter, (, testInstance, ,, field, ), ., set, (, mock, ), ;]
[,, alreadyAssigned, ), ;, alreadyAssigned, =, true, ;, try, {, new, FieldSetter, (, testInstance, ,, field, ), ., set, (]
[), ;, alreadyAssigned, =, true, ;, try, {, new, FieldSetter, (, testInstance, ,, field, ), ., set, (, mock, )]
[=, true, ;, try, {, new, FieldSetter, (, testInstance, ,, field, ), ., set, (, mock, ), ;, }, catch]
[;, try, {, new, FieldSetter, (, testInstance, ,, field, ), ., set, (, mock, ), ;, }, catch, (, Exception]
[;, }, catch, (, Exception, e, ), {, throw, new, MockitoException, (, "Problems setting field ", +, field, ., getName, (, ), +]
[., set, (, mock, ), ;, }, catch, (, Exception, e, ), {, throw, new, MockitoException, (, "Problems setting field ", +, field]
[,, field, ), ., set, (, mock, ), ;, }, catch, (, Exception, e, ), {, throw, new, MockitoException, (]
[), ., set, (, mock, ), ;, }, catch, (, Exception, e, ), {, throw, new, MockitoException, (, "Problems setting field ", +]
[), ;, }, catch, (, Exception, e, ), {, throw, new, MockitoException, (, "Problems setting field ", +, field, ., getName, (, )]
[;, }, }, }, }, }, void, throwIfAlreadyAssigned, (, Field, field, ,, boolean, alreadyAssigned, ), {, if, (, alreadyAssigned, )]
[,, e, ), ;, }, }, }, }, }, void, throwIfAlreadyAssigned, (, Field, field, ,, boolean, alreadyAssigned, ), {, if]
[+, annotation, ,, e, ), ;, }, }, }, }, }, void, throwIfAlreadyAssigned, (, Field, field, ,, boolean, alreadyAssigned, )]
[+, " annotated with ", +, annotation, ,, e, ), ;, }, }, }, }, }, void, throwIfAlreadyAssigned, (, Field, field, ,, boolean]
[+, field, ., getName, (, ), +, " annotated with ", +, annotation, ,, e, ), ;, }, }, }, }, }, void]
[+, " annotated with ", +, annotation, ,, e, ), ;, }, }, }, }, }, void, throwIfAlreadyAssigned, (, Field, field, ,, boolean]
[., getName, (, ), +, " annotated with ", +, annotation, ,, e, ), ;, }, }, }, }, }, void, throwIfAlreadyAssigned, (]
[+, annotation, ,, e, ), ;, }, }, }, }, }, void, throwIfAlreadyAssigned, (, Field, field, ,, boolean, alreadyAssigned, )]
[,, e, ), ;, }, }, }, }, }, void, throwIfAlreadyAssigned, (, Field, field, ,, boolean, alreadyAssigned, ), {, if]
[), ;, }, }, }, }, }, void, throwIfAlreadyAssigned, (, Field, field, ,, boolean, alreadyAssigned, ), {, if, (, alreadyAssigned]
[), {, new, Reporter, (, ), ., moreThanOneAnnotationNotAllowed, (, field, ., getName, (, ), ), ;, }, }, }]
[;, }, }, }]
[., moreThanOneAnnotationNotAllowed, (, field, ., getName, (, ), ), ;, }, }, }]
[), ;, }, }, }]
[., getName, (, ), ), ;, }, }, }]
