[commons, ., math3, ., util, ., MathArrays, ;, public, class, BicubicSplineInterpolatingFunction, implements, BivariateFunction, {, private, static, final, int, NUM_COEFF, =]
[BivariateFunction, {, private, static, final, int, NUM_COEFF, =, 16, ;, private, static, final, double, [, ], [, ], AINV, =]
[{, private, static, final, int, NUM_COEFF, =, 16, ;, private, static, final, double, [, ], [, ], AINV, =, {]
[private, static, final, int, NUM_COEFF, =, 16, ;, private, static, final, double, [, ], [, ], AINV, =, {, {]
[final, int, NUM_COEFF, =, 16, ;, private, static, final, double, [, ], [, ], AINV, =, {, {, 1, ,]
[NUM_COEFF, =, 16, ;, private, static, final, double, [, ], [, ], AINV, =, {, {, 1, ,, 0, ,]
[16, ;, private, static, final, double, [, ], [, ], AINV, =, {, {, 1, ,, 0, ,, 0, ,]
[private, static, final, double, [, ], [, ], AINV, =, {, {, 1, ,, 0, ,, 0, ,, 0, ,]
[final, double, [, ], [, ], AINV, =, {, {, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[[, ], [, ], AINV, =, {, {, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[[, ], AINV, =, {, {, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[AINV, =, {, {, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[{, {, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,]
[0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,]
[0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,]
[0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,]
[,, {, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, -]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, -, 3, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, -, 3, ,, 3, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, -, 3, ,, 3, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, -, 3, ,, 3, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, }, ,, {, -, 3, ,, 3, ,, 0, ,, 0, ,, -]
[0, ,, 0, ,, 0, }, ,, {, -, 3, ,, 3, ,, 0, ,, 0, ,, -, 2, ,]
[,, 0, ,, 0, }, ,, {, -, 3, ,, 3, ,, 0, ,, 0, ,, -, 2, ,, -]
[,, 0, }, ,, {, -, 3, ,, 3, ,, 0, ,, 0, ,, -, 2, ,, -, 1, ,]
[}, ,, {, -, 3, ,, 3, ,, 0, ,, 0, ,, -, 2, ,, -, 1, ,, 0, ,]
[{, -, 3, ,, 3, ,, 0, ,, 0, ,, -, 2, ,, -, 1, ,, 0, ,, 0, ,]
[3, ,, 3, ,, 0, ,, 0, ,, -, 2, ,, -, 1, ,, 0, ,, 0, ,, 0, ,]
[3, ,, 0, ,, 0, ,, -, 2, ,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, -, 2, ,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, -, 2, ,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[-, 2, ,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 2, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 2, ,, -]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 2, ,, -, 2, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 2, ,, -, 2, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 2, ,, -, 2, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, 0, }, ,, {, 2, ,, -, 2, ,, 0, ,, 0, ,, 1, ,]
[,, 0, ,, 0, }, ,, {, 2, ,, -, 2, ,, 0, ,, 0, ,, 1, ,, 1, ,]
[,, 0, }, ,, {, 2, ,, -, 2, ,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,]
[}, ,, {, 2, ,, -, 2, ,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,, 0, ,]
[{, 2, ,, -, 2, ,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,, 0, ,, 0, ,]
[,, -, 2, ,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[2, ,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 1, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 1, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[1, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,]
[0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {]
[1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, }, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, }, ,, {]
[0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,]
[0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,]
[0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,]
[0, ,, 1, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,]
[1, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[}, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -]
[{, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 3, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 3, ,, 3, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 3, ,, 3, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 3, ,, 3, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 3, ,, 3, ,, 0, ,, 0, ,, -]
[0, ,, 0, ,, 0, ,, 0, ,, -, 3, ,, 3, ,, 0, ,, 0, ,, -, 2, ,]
[,, 0, ,, 0, ,, 0, ,, -, 3, ,, 3, ,, 0, ,, 0, ,, -, 2, ,, -]
[,, 0, ,, 0, ,, -, 3, ,, 3, ,, 0, ,, 0, ,, -, 2, ,, -, 1, ,]
[,, 0, ,, -, 3, ,, 3, ,, 0, ,, 0, ,, -, 2, ,, -, 1, ,, 0, ,]
[-, 3, ,, 3, ,, 0, ,, 0, ,, -, 2, ,, -, 1, ,, 0, ,, 0, }, ,]
[3, ,, 3, ,, 0, ,, 0, ,, -, 2, ,, -, 1, ,, 0, ,, 0, }, ,, {]
[3, ,, 0, ,, 0, ,, -, 2, ,, -, 1, ,, 0, ,, 0, }, ,, {, 0, ,]
[0, ,, 0, ,, -, 2, ,, -, 1, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,]
[0, ,, -, 2, ,, -, 1, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,]
[-, 2, ,, -, 1, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,]
[,, -, 1, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[1, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,]
[{, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,, -]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,, -, 2, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,, -, 2, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,, -, 2, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,, -, 2, ,, 0, ,, 0, ,, 1, ,]
[,, 0, ,, 0, ,, 0, ,, 2, ,, -, 2, ,, 0, ,, 0, ,, 1, ,, 1, ,]
[,, 0, ,, 0, ,, 2, ,, -, 2, ,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,]
[0, ,, 2, ,, -, 2, ,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,, 0, }, ,]
[,, 2, ,, -, 2, ,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,, 0, }, ,, {]
[2, ,, -, 2, ,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,, 0, }, ,, {, -]
[-, 2, ,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,, 0, }, ,, {, -, 3, ,]
[,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,, 0, }, ,, {, -, 3, ,, 0, ,]
[,, 0, ,, 1, ,, 1, ,, 0, ,, 0, }, ,, {, -, 3, ,, 0, ,, 3, ,]
[,, 1, ,, 1, ,, 0, ,, 0, }, ,, {, -, 3, ,, 0, ,, 3, ,, 0, ,]
[,, 1, ,, 0, ,, 0, }, ,, {, -, 3, ,, 0, ,, 3, ,, 0, ,, 0, ,]
[,, 0, ,, 0, }, ,, {, -, 3, ,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,]
[,, 0, }, ,, {, -, 3, ,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[}, ,, {, -, 3, ,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, {, -, 3, ,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -]
[-, 3, ,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,]
[,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,]
[0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,, -]
[3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,, -, 1, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,, -, 1, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,, -, 1, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,, -, 1, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, -, 2, ,, 0, ,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, -, 2, ,, 0, ,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,]
[-, 2, ,, 0, ,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {]
[,, 0, ,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,]
[,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,]
[1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, -]
[,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, -, 3, ,]
[,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, -, 3, ,, 0, ,]
[,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, -, 3, ,, 0, ,, 3, ,]
[}, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, -, 3, ,, 0, ,, 3, ,, 0, ,]
[{, 0, ,, 0, ,, 0, ,, 0, ,, -, 3, ,, 0, ,, 3, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, -, 3, ,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, -, 3, ,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, 0, ,, -, 3, ,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, -, 3, ,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -]
[-, 3, ,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,]
[,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,]
[0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,, -]
[3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,, -, 1, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,, -, 1, ,, 0, }, ,]
[0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,, -, 1, ,, 0, }, ,, {]
[0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,, -, 1, ,, 0, }, ,, {, 9, ,]
[,, 0, ,, 0, ,, -, 2, ,, 0, ,, -, 1, ,, 0, }, ,, {, 9, ,, -]
[,, 0, ,, -, 2, ,, 0, ,, -, 1, ,, 0, }, ,, {, 9, ,, -, 9, ,]
[0, ,, -, 2, ,, 0, ,, -, 1, ,, 0, }, ,, {, 9, ,, -, 9, ,, -]
[-, 2, ,, 0, ,, -, 1, ,, 0, }, ,, {, 9, ,, -, 9, ,, -, 9, ,]
[,, 0, ,, -, 1, ,, 0, }, ,, {, 9, ,, -, 9, ,, -, 9, ,, 9, ,]
[,, -, 1, ,, 0, }, ,, {, 9, ,, -, 9, ,, -, 9, ,, 9, ,, 6, ,]
[1, ,, 0, }, ,, {, 9, ,, -, 9, ,, -, 9, ,, 9, ,, 6, ,, 3, ,]
[,, 0, }, ,, {, 9, ,, -, 9, ,, -, 9, ,, 9, ,, 6, ,, 3, ,, -]
[}, ,, {, 9, ,, -, 9, ,, -, 9, ,, 9, ,, 6, ,, 3, ,, -, 6, ,]
[,, {, 9, ,, -, 9, ,, -, 9, ,, 9, ,, 6, ,, 3, ,, -, 6, ,, -]
[9, ,, -, 9, ,, -, 9, ,, 9, ,, 6, ,, 3, ,, -, 6, ,, -, 3, ,]
[-, 9, ,, -, 9, ,, 9, ,, 6, ,, 3, ,, -, 6, ,, -, 3, ,, 6, ,]
[9, ,, -, 9, ,, 9, ,, 6, ,, 3, ,, -, 6, ,, -, 3, ,, 6, ,, -]
[-, 9, ,, 9, ,, 6, ,, 3, ,, -, 6, ,, -, 3, ,, 6, ,, -, 6, ,]
[,, 9, ,, 6, ,, 3, ,, -, 6, ,, -, 3, ,, 6, ,, -, 6, ,, 3, ,]
[9, ,, 6, ,, 3, ,, -, 6, ,, -, 3, ,, 6, ,, -, 6, ,, 3, ,, -]
[6, ,, 3, ,, -, 6, ,, -, 3, ,, 6, ,, -, 6, ,, 3, ,, -, 3, ,]
[3, ,, -, 6, ,, -, 3, ,, 6, ,, -, 6, ,, 3, ,, -, 3, ,, 4, ,]
[-, 6, ,, -, 3, ,, 6, ,, -, 6, ,, 3, ,, -, 3, ,, 4, ,, 2, ,]
[,, -, 3, ,, 6, ,, -, 6, ,, 3, ,, -, 3, ,, 4, ,, 2, ,, 2, ,]
[,, 6, ,, -, 6, ,, 3, ,, -, 3, ,, 4, ,, 2, ,, 2, ,, 1, }, ,]
[6, ,, -, 6, ,, 3, ,, -, 3, ,, 4, ,, 2, ,, 2, ,, 1, }, ,, {]
[,, -, 6, ,, 3, ,, -, 3, ,, 4, ,, 2, ,, 2, ,, 1, }, ,, {, -]
[6, ,, 3, ,, -, 3, ,, 4, ,, 2, ,, 2, ,, 1, }, ,, {, -, 6, ,]
[3, ,, -, 3, ,, 4, ,, 2, ,, 2, ,, 1, }, ,, {, -, 6, ,, 6, ,]
[-, 3, ,, 4, ,, 2, ,, 2, ,, 1, }, ,, {, -, 6, ,, 6, ,, 6, ,]
[3, ,, 4, ,, 2, ,, 2, ,, 1, }, ,, {, -, 6, ,, 6, ,, 6, ,, -]
[4, ,, 2, ,, 2, ,, 1, }, ,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,]
[,, 2, ,, 2, ,, 1, }, ,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,, -]
[,, 2, ,, 1, }, ,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,, -, 3, ,]
[2, ,, 1, }, ,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,, -, 3, ,, -]
[1, }, ,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,, -, 3, ,, -, 3, ,]
[,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,, -, 3, ,, -, 3, ,, 3, ,]
[-, 6, ,, 6, ,, 6, ,, -, 6, ,, -, 3, ,, -, 3, ,, 3, ,, 3, ,]
[6, ,, 6, ,, 6, ,, -, 6, ,, -, 3, ,, -, 3, ,, 3, ,, 3, ,, -]
[6, ,, 6, ,, -, 6, ,, -, 3, ,, -, 3, ,, 3, ,, 3, ,, -, 4, ,]
[6, ,, -, 6, ,, -, 3, ,, -, 3, ,, 3, ,, 3, ,, -, 4, ,, 4, ,]
[,, -, 6, ,, -, 3, ,, -, 3, ,, 3, ,, 3, ,, -, 4, ,, 4, ,, -]
[6, ,, -, 3, ,, -, 3, ,, 3, ,, 3, ,, -, 4, ,, 4, ,, -, 2, ,]
[-, 3, ,, -, 3, ,, 3, ,, 3, ,, -, 4, ,, 4, ,, -, 2, ,, 2, ,]
[3, ,, -, 3, ,, 3, ,, 3, ,, -, 4, ,, 4, ,, -, 2, ,, 2, ,, -]
[-, 3, ,, 3, ,, 3, ,, -, 4, ,, 4, ,, -, 2, ,, 2, ,, -, 2, ,]
[3, ,, 3, ,, 3, ,, -, 4, ,, 4, ,, -, 2, ,, 2, ,, -, 2, ,, -]
[3, ,, 3, ,, -, 4, ,, 4, ,, -, 2, ,, 2, ,, -, 2, ,, -, 2, ,]
[,, 3, ,, -, 4, ,, 4, ,, -, 2, ,, 2, ,, -, 2, ,, -, 2, ,, -]
[,, -, 4, ,, 4, ,, -, 2, ,, 2, ,, -, 2, ,, -, 2, ,, -, 1, ,]
[-, 4, ,, 4, ,, -, 2, ,, 2, ,, -, 2, ,, -, 2, ,, -, 1, ,, -]
[4, ,, -, 2, ,, 2, ,, -, 2, ,, -, 2, ,, -, 1, ,, -, 1, }, ,]
[,, -, 2, ,, 2, ,, -, 2, ,, -, 2, ,, -, 1, ,, -, 1, }, ,, {]
[2, ,, 2, ,, -, 2, ,, -, 2, ,, -, 1, ,, -, 1, }, ,, {, 2, ,]
[2, ,, -, 2, ,, -, 2, ,, -, 1, ,, -, 1, }, ,, {, 2, ,, 0, ,]
[,, -, 2, ,, -, 2, ,, -, 1, ,, -, 1, }, ,, {, 2, ,, 0, ,, -]
[2, ,, -, 2, ,, -, 1, ,, -, 1, }, ,, {, 2, ,, 0, ,, -, 2, ,]
[-, 2, ,, -, 1, ,, -, 1, }, ,, {, 2, ,, 0, ,, -, 2, ,, 0, ,]
[,, -, 1, ,, -, 1, }, ,, {, 2, ,, 0, ,, -, 2, ,, 0, ,, 0, ,]
[1, ,, -, 1, }, ,, {, 2, ,, 0, ,, -, 2, ,, 0, ,, 0, ,, 0, ,]
[-, 1, }, ,, {, 2, ,, 0, ,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[}, ,, {, 2, ,, 0, ,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[{, 2, ,, 0, ,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,]
[,, 0, ,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,]
[,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,]
[2, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, 0, ,, 1, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,]
[0, ,, 1, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {]
[1, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,]
[0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,]
[1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,]
[0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,, 0, ,]
[,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,, 0, ,, -]
[,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,, 0, ,, -, 2, ,]
[}, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,, 0, ,, -, 2, ,, 0, ,]
[{, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,, 0, ,, -, 2, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 2, ,, 0, ,, -, 2, ,, 0, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, 2, ,, 0, ,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, 0, ,, 2, ,, 0, ,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, 2, ,, 0, ,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,]
[,, 0, ,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,]
[,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,, 0, }, ,]
[0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,, 0, }, ,, {]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,, 0, }, ,, {, -]
[,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,, 0, }, ,, {, -, 6, ,]
[,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,, 0, }, ,, {, -, 6, ,, 6, ,]
[,, 0, ,, 1, ,, 0, ,, 1, ,, 0, }, ,, {, -, 6, ,, 6, ,, 6, ,]
[0, ,, 1, ,, 0, ,, 1, ,, 0, }, ,, {, -, 6, ,, 6, ,, 6, ,, -]
[1, ,, 0, ,, 1, ,, 0, }, ,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,]
[,, 0, ,, 1, ,, 0, }, ,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,, -]
[,, 1, ,, 0, }, ,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,, -, 4, ,]
[1, ,, 0, }, ,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,, -, 4, ,, -]
[0, }, ,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,, -, 4, ,, -, 2, ,]
[,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,, -, 4, ,, -, 2, ,, 4, ,]
[-, 6, ,, 6, ,, 6, ,, -, 6, ,, -, 4, ,, -, 2, ,, 4, ,, 2, ,]
[6, ,, 6, ,, 6, ,, -, 6, ,, -, 4, ,, -, 2, ,, 4, ,, 2, ,, -]
[6, ,, 6, ,, -, 6, ,, -, 4, ,, -, 2, ,, 4, ,, 2, ,, -, 3, ,]
[6, ,, -, 6, ,, -, 4, ,, -, 2, ,, 4, ,, 2, ,, -, 3, ,, 3, ,]
[,, -, 6, ,, -, 4, ,, -, 2, ,, 4, ,, 2, ,, -, 3, ,, 3, ,, -]
[6, ,, -, 4, ,, -, 2, ,, 4, ,, 2, ,, -, 3, ,, 3, ,, -, 3, ,]
[-, 4, ,, -, 2, ,, 4, ,, 2, ,, -, 3, ,, 3, ,, -, 3, ,, 3, ,]
[4, ,, -, 2, ,, 4, ,, 2, ,, -, 3, ,, 3, ,, -, 3, ,, 3, ,, -]
[-, 2, ,, 4, ,, 2, ,, -, 3, ,, 3, ,, -, 3, ,, 3, ,, -, 2, ,]
[2, ,, 4, ,, 2, ,, -, 3, ,, 3, ,, -, 3, ,, 3, ,, -, 2, ,, -]
[4, ,, 2, ,, -, 3, ,, 3, ,, -, 3, ,, 3, ,, -, 2, ,, -, 1, ,]
[,, 2, ,, -, 3, ,, 3, ,, -, 3, ,, 3, ,, -, 2, ,, -, 1, ,, -]
[,, -, 3, ,, 3, ,, -, 3, ,, 3, ,, -, 2, ,, -, 1, ,, -, 2, ,]
[-, 3, ,, 3, ,, -, 3, ,, 3, ,, -, 2, ,, -, 1, ,, -, 2, ,, -]
[3, ,, -, 3, ,, 3, ,, -, 2, ,, -, 1, ,, -, 2, ,, -, 1, }, ,]
[,, -, 3, ,, 3, ,, -, 2, ,, -, 1, ,, -, 2, ,, -, 1, }, ,, {]
[3, ,, 3, ,, -, 2, ,, -, 1, ,, -, 2, ,, -, 1, }, ,, {, 4, ,]
[,, 3, ,, -, 2, ,, -, 1, ,, -, 2, ,, -, 1, }, ,, {, 4, ,, -]
[,, -, 2, ,, -, 1, ,, -, 2, ,, -, 1, }, ,, {, 4, ,, -, 4, ,]
[-, 2, ,, -, 1, ,, -, 2, ,, -, 1, }, ,, {, 4, ,, -, 4, ,, -]
[,, -, 1, ,, -, 2, ,, -, 1, }, ,, {, 4, ,, -, 4, ,, -, 4, ,]
[1, ,, -, 2, ,, -, 1, }, ,, {, 4, ,, -, 4, ,, -, 4, ,, 4, ,]
[-, 2, ,, -, 1, }, ,, {, 4, ,, -, 4, ,, -, 4, ,, 4, ,, 2, ,]
[,, -, 1, }, ,, {, 4, ,, -, 4, ,, -, 4, ,, 4, ,, 2, ,, 2, ,]
[-, 1, }, ,, {, 4, ,, -, 4, ,, -, 4, ,, 4, ,, 2, ,, 2, ,, -]
[}, ,, {, 4, ,, -, 4, ,, -, 4, ,, 4, ,, 2, ,, 2, ,, -, 2, ,]
[,, {, 4, ,, -, 4, ,, -, 4, ,, 4, ,, 2, ,, 2, ,, -, 2, ,, -]
[4, ,, -, 4, ,, -, 4, ,, 4, ,, 2, ,, 2, ,, -, 2, ,, -, 2, ,]
[-, 4, ,, -, 4, ,, 4, ,, 2, ,, 2, ,, -, 2, ,, -, 2, ,, 2, ,]
[4, ,, -, 4, ,, 4, ,, 2, ,, 2, ,, -, 2, ,, -, 2, ,, 2, ,, -]
[-, 4, ,, 4, ,, 2, ,, 2, ,, -, 2, ,, -, 2, ,, 2, ,, -, 2, ,]
[,, 4, ,, 2, ,, 2, ,, -, 2, ,, -, 2, ,, 2, ,, -, 2, ,, 2, ,]
[4, ,, 2, ,, 2, ,, -, 2, ,, -, 2, ,, 2, ,, -, 2, ,, 2, ,, -]
[2, ,, 2, ,, -, 2, ,, -, 2, ,, 2, ,, -, 2, ,, 2, ,, -, 2, ,]
[2, ,, -, 2, ,, -, 2, ,, 2, ,, -, 2, ,, 2, ,, -, 2, ,, 1, ,]
[-, 2, ,, -, 2, ,, 2, ,, -, 2, ,, 2, ,, -, 2, ,, 1, ,, 1, ,]
[,, -, 2, ,, 2, ,, -, 2, ,, 2, ,, -, 2, ,, 1, ,, 1, ,, 1, ,]
[;, private, final, BicubicSplineFunction, [, ], [, ], splines, ;, private, BivariateFunction, [, ], [, ], [, ], partialDerivatives, =]
[dFdY, ,, double, [, ], [, ], d2FdXdY, ), throws, DimensionMismatchException, ,, NoDataException, ,, NonMonotonicSequenceException, {, final, int, xLen, =]
[dFdY, ,, double, [, ], [, ], d2FdXdY, ), throws, DimensionMismatchException, ,, NoDataException, ,, NonMonotonicSequenceException, {, final, int, xLen, =]
[), throws, DimensionMismatchException, ,, NoDataException, ,, NonMonotonicSequenceException, {, final, int, xLen, =, x, ., length, ;, final, int, yLen, =]
[), throws, DimensionMismatchException, ,, NoDataException, ,, NonMonotonicSequenceException, {, final, int, xLen, =, x, ., length, ;, final, int, yLen, =]
[NonMonotonicSequenceException, {, final, int, xLen, =, x, ., length, ;, final, int, yLen, =, y, ., length, ;, if, (]
[NonMonotonicSequenceException, {, final, int, xLen, =, x, ., length, ;, final, int, yLen, =, y, ., length, ;, if, (]
[NonMonotonicSequenceException, {, final, int, xLen, =, x, ., length, ;, final, int, yLen, =, y, ., length, ;, if, (]
[NonMonotonicSequenceException, {, final, int, xLen, =, x, ., length, ;, final, int, yLen, =, y, ., length, ;, if, (]
[NonMonotonicSequenceException, {, final, int, xLen, =, x, ., length, ;, final, int, yLen, =, y, ., length, ;, if, (]
[final, int, xLen, =, x, ., length, ;, final, int, yLen, =, y, ., length, ;, if, (, xLen, ==]
[xLen, =, x, ., length, ;, final, int, yLen, =, y, ., length, ;, if, (, xLen, ==, 0, ||]
[xLen, =, x, ., length, ;, final, int, yLen, =, y, ., length, ;, if, (, xLen, ==, 0, ||]
[x, ., length, ;, final, int, yLen, =, y, ., length, ;, if, (, xLen, ==, 0, ||, yLen, ==]
[length, ;, final, int, yLen, =, y, ., length, ;, if, (, xLen, ==, 0, ||, yLen, ==, 0, ||]
[length, ;, final, int, yLen, =, y, ., length, ;, if, (, xLen, ==, 0, ||, yLen, ==, 0, ||]
[length, ;, final, int, yLen, =, y, ., length, ;, if, (, xLen, ==, 0, ||, yLen, ==, 0, ||]
[yLen, =, y, ., length, ;, if, (, xLen, ==, 0, ||, yLen, ==, 0, ||, f, ., length, ==]
[y, ., length, ;, if, (, xLen, ==, 0, ||, yLen, ==, 0, ||, f, ., length, ==, 0, ||]
[y, ., length, ;, if, (, xLen, ==, 0, ||, yLen, ==, 0, ||, f, ., length, ==, 0, ||]
[y, ., length, ;, if, (, xLen, ==, 0, ||, yLen, ==, 0, ||, f, ., length, ==, 0, ||]
[y, ., length, ;, if, (, xLen, ==, 0, ||, yLen, ==, 0, ||, f, ., length, ==, 0, ||]
[length, ;, if, (, xLen, ==, 0, ||, yLen, ==, 0, ||, f, ., length, ==, 0, ||, f, []
[==, 0, ||, yLen, ==, 0, ||, f, ., length, ==, 0, ||, f, [, 0, ], ., length, ==]
[==, 0, ||, f, ., length, ==, 0, ||, f, [, 0, ], ., length, ==, 0, ), {, throw]
[||, f, [, 0, ], ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (]
[||, f, [, 0, ], ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (]
[[, 0, ], ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, xLen, !=]
[[, 0, ], ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, xLen, !=]
[0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, xLen, !=, f, ., length, ), {, throw]
[throw, new, NoDataException, (, ), ;, }, if, (, xLen, !=, f, ., length, ), {, throw, new, DimensionMismatchException, (]
[NoDataException, (, ), ;, }, if, (, xLen, !=, f, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,]
[NoDataException, (, ), ;, }, if, (, xLen, !=, f, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,]
[!=, f, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, f, ., length, ), ;, }, if, (]
[!=, f, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, f, ., length, ), ;, }, if, (]
[., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, f, ., length, ), ;, }, if, (, xLen, !=]
[., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, f, ., length, ), ;, }, if, (, xLen, !=]
[DimensionMismatchException, (, xLen, ,, f, ., length, ), ;, }, if, (, xLen, !=, dFdX, ., length, ), {, throw]
[,, f, ., length, ), ;, }, if, (, xLen, !=, dFdX, ., length, ), {, throw, new, DimensionMismatchException, (]
[., length, ), ;, }, if, (, xLen, !=, dFdX, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,]
[., length, ), ;, }, if, (, xLen, !=, dFdX, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,]
[!=, dFdX, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, dFdX, ., length, ), ;, }, if, (]
[!=, dFdX, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, dFdX, ., length, ), ;, }, if, (]
[., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, dFdX, ., length, ), ;, }, if, (, xLen, !=]
[., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, dFdX, ., length, ), ;, }, if, (, xLen, !=]
[DimensionMismatchException, (, xLen, ,, dFdX, ., length, ), ;, }, if, (, xLen, !=, dFdY, ., length, ), {, throw]
[,, dFdX, ., length, ), ;, }, if, (, xLen, !=, dFdY, ., length, ), {, throw, new, DimensionMismatchException, (]
[., length, ), ;, }, if, (, xLen, !=, dFdY, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,]
[., length, ), ;, }, if, (, xLen, !=, dFdY, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,]
[!=, dFdY, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, dFdY, ., length, ), ;, }, if, (]
[!=, dFdY, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, dFdY, ., length, ), ;, }, if, (]
[., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, dFdY, ., length, ), ;, }, if, (, xLen, !=]
[., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, dFdY, ., length, ), ;, }, if, (, xLen, !=]
[DimensionMismatchException, (, xLen, ,, dFdY, ., length, ), ;, }, if, (, xLen, !=, d2FdXdY, ., length, ), {, throw]
[,, dFdY, ., length, ), ;, }, if, (, xLen, !=, d2FdXdY, ., length, ), {, throw, new, DimensionMismatchException, (]
[., length, ), ;, }, if, (, xLen, !=, d2FdXdY, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,]
[., length, ), ;, }, if, (, xLen, !=, d2FdXdY, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,]
[(, xLen, !=, d2FdXdY, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, d2FdXdY, ., length, ), ;, }]
[(, xLen, !=, d2FdXdY, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, d2FdXdY, ., length, ), ;, }]
[., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, d2FdXdY, ., length, ), ;, }, MathArrays, ., checkOrder, (]
[{, throw, new, DimensionMismatchException, (, xLen, ,, d2FdXdY, ., length, ), ;, }, MathArrays, ., checkOrder, (, x, ), ;]
[{, throw, new, DimensionMismatchException, (, xLen, ,, d2FdXdY, ., length, ), ;, }, MathArrays, ., checkOrder, (, x, ), ;]
[(, xLen, ,, d2FdXdY, ., length, ), ;, }, MathArrays, ., checkOrder, (, x, ), ;, MathArrays, ., checkOrder, (]
[d2FdXdY, ., length, ), ;, }, MathArrays, ., checkOrder, (, x, ), ;, MathArrays, ., checkOrder, (, y, ), ;]
[length, ), ;, }, MathArrays, ., checkOrder, (, x, ), ;, MathArrays, ., checkOrder, (, y, ), ;, xval, =]
[length, ), ;, }, MathArrays, ., checkOrder, (, x, ), ;, MathArrays, ., checkOrder, (, y, ), ;, xval, =]
[checkOrder, (, x, ), ;, MathArrays, ., checkOrder, (, y, ), ;, xval, =, x, ., clone, (, ), ;]
[x, ), ;, MathArrays, ., checkOrder, (, y, ), ;, xval, =, x, ., clone, (, ), ;, yval, =]
[x, ), ;, MathArrays, ., checkOrder, (, y, ), ;, xval, =, x, ., clone, (, ), ;, yval, =]
[xval, =, x, ., clone, (, ), ;, yval, =, y, ., clone, (, ), ;, final, int, lastI, =]
[xval, =, x, ., clone, (, ), ;, yval, =, y, ., clone, (, ), ;, final, int, lastI, =]
[x, ., clone, (, ), ;, yval, =, y, ., clone, (, ), ;, final, int, lastI, =, xLen, -]
[yval, =, y, ., clone, (, ), ;, final, int, lastI, =, xLen, -, 1, ;, final, int, lastJ, =]
[yval, =, y, ., clone, (, ), ;, final, int, lastI, =, xLen, -, 1, ;, final, int, lastJ, =]
[y, ., clone, (, ), ;, final, int, lastI, =, xLen, -, 1, ;, final, int, lastJ, =, yLen, -]
[clone, (, ), ;, final, int, lastI, =, xLen, -, 1, ;, final, int, lastJ, =, yLen, -, 1, ;]
[), ;, final, int, lastI, =, xLen, -, 1, ;, final, int, lastJ, =, yLen, -, 1, ;, splines, =]
[int, lastI, =, xLen, -, 1, ;, final, int, lastJ, =, yLen, -, 1, ;, splines, =, new, BicubicSplineFunction, []
[xLen, -, 1, ;, final, int, lastJ, =, yLen, -, 1, ;, splines, =, new, BicubicSplineFunction, [, lastI, ], []
[yLen, -, 1, ;, splines, =, new, BicubicSplineFunction, [, lastI, ], [, lastJ, ], ;, for, (, int, i, =]
[1, ;, splines, =, new, BicubicSplineFunction, [, lastI, ], [, lastJ, ], ;, for, (, int, i, =, 0, ;]
[1, ;, splines, =, new, BicubicSplineFunction, [, lastI, ], [, lastJ, ], ;, for, (, int, i, =, 0, ;]
[splines, =, new, BicubicSplineFunction, [, lastI, ], [, lastJ, ], ;, for, (, int, i, =, 0, ;, i, <]
[new, BicubicSplineFunction, [, lastI, ], [, lastJ, ], ;, for, (, int, i, =, 0, ;, i, <, lastI, ;]
[new, BicubicSplineFunction, [, lastI, ], [, lastJ, ], ;, for, (, int, i, =, 0, ;, i, <, lastI, ;]
[lastJ, ], ;, for, (, int, i, =, 0, ;, i, <, lastI, ;, i, ++, ), {, if, (]
[lastJ, ], ;, for, (, int, i, =, 0, ;, i, <, lastI, ;, i, ++, ), {, if, (]
[lastJ, ], ;, for, (, int, i, =, 0, ;, i, <, lastI, ;, i, ++, ), {, if, (]
[lastJ, ], ;, for, (, int, i, =, 0, ;, i, <, lastI, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, lastI, ;, i, ++, ), {, if, (, f, []
[=, 0, ;, i, <, lastI, ;, i, ++, ), {, if, (, f, [, i, ], ., length, !=]
[<, lastI, ;, i, ++, ), {, if, (, f, [, i, ], ., length, !=, yLen, ), {, throw]
[i, ++, ), {, if, (, f, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (]
[i, ++, ), {, if, (, f, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (]
[i, ++, ), {, if, (, f, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (]
[), {, if, (, f, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, f, []
[[, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, f, [, i, ], ., length, ,]
[yLen, ), {, throw, new, DimensionMismatchException, (, f, [, i, ], ., length, ,, yLen, ), ;, }, if, (]
[yLen, ), {, throw, new, DimensionMismatchException, (, f, [, i, ], ., length, ,, yLen, ), ;, }, if, (]
[yLen, ), {, throw, new, DimensionMismatchException, (, f, [, i, ], ., length, ,, yLen, ), ;, }, if, (]
[yLen, ), {, throw, new, DimensionMismatchException, (, f, [, i, ], ., length, ,, yLen, ), ;, }, if, (]
[{, throw, new, DimensionMismatchException, (, f, [, i, ], ., length, ,, yLen, ), ;, }, if, (, dFdX, []
[f, [, i, ], ., length, ,, yLen, ), ;, }, if, (, dFdX, [, i, ], ., length, !=]
[., length, ,, yLen, ), ;, }, if, (, dFdX, [, i, ], ., length, !=, yLen, ), {, throw]
[yLen, ), ;, }, if, (, dFdX, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (]
[yLen, ), ;, }, if, (, dFdX, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (]
[yLen, ), ;, }, if, (, dFdX, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (]
[;, }, if, (, dFdX, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, dFdX, []
[[, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, dFdX, [, i, ], ., length, ,]
[yLen, ), {, throw, new, DimensionMismatchException, (, dFdX, [, i, ], ., length, ,, yLen, ), ;, }, if, (]
[yLen, ), {, throw, new, DimensionMismatchException, (, dFdX, [, i, ], ., length, ,, yLen, ), ;, }, if, (]
[yLen, ), {, throw, new, DimensionMismatchException, (, dFdX, [, i, ], ., length, ,, yLen, ), ;, }, if, (]
[yLen, ), {, throw, new, DimensionMismatchException, (, dFdX, [, i, ], ., length, ,, yLen, ), ;, }, if, (]
[{, throw, new, DimensionMismatchException, (, dFdX, [, i, ], ., length, ,, yLen, ), ;, }, if, (, dFdY, []
[dFdX, [, i, ], ., length, ,, yLen, ), ;, }, if, (, dFdY, [, i, ], ., length, !=]
[., length, ,, yLen, ), ;, }, if, (, dFdY, [, i, ], ., length, !=, yLen, ), {, throw]
[yLen, ), ;, }, if, (, dFdY, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (]
[yLen, ), ;, }, if, (, dFdY, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (]
[yLen, ), ;, }, if, (, dFdY, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (]
[;, }, if, (, dFdY, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, dFdY, []
[[, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, dFdY, [, i, ], ., length, ,]
[yLen, ), {, throw, new, DimensionMismatchException, (, dFdY, [, i, ], ., length, ,, yLen, ), ;, }, if, (]
[yLen, ), {, throw, new, DimensionMismatchException, (, dFdY, [, i, ], ., length, ,, yLen, ), ;, }, if, (]
[yLen, ), {, throw, new, DimensionMismatchException, (, dFdY, [, i, ], ., length, ,, yLen, ), ;, }, if, (]
[yLen, ), {, throw, new, DimensionMismatchException, (, dFdY, [, i, ], ., length, ,, yLen, ), ;, }, if, (]
[{, throw, new, DimensionMismatchException, (, dFdY, [, i, ], ., length, ,, yLen, ), ;, }, if, (, d2FdXdY, []
[dFdY, [, i, ], ., length, ,, yLen, ), ;, }, if, (, d2FdXdY, [, i, ], ., length, !=]
[., length, ,, yLen, ), ;, }, if, (, d2FdXdY, [, i, ], ., length, !=, yLen, ), {, throw]
[yLen, ), ;, }, if, (, d2FdXdY, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (]
[yLen, ), ;, }, if, (, d2FdXdY, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (]
[yLen, ), ;, }, if, (, d2FdXdY, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (]
[;, }, if, (, d2FdXdY, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, d2FdXdY, []
[[, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, d2FdXdY, [, i, ], ., length, ,]
[{, throw, new, DimensionMismatchException, (, d2FdXdY, [, i, ], ., length, ,, yLen, ), ;, }, final, int, ip1, =]
[{, throw, new, DimensionMismatchException, (, d2FdXdY, [, i, ], ., length, ,, yLen, ), ;, }, final, int, ip1, =]
[new, DimensionMismatchException, (, d2FdXdY, [, i, ], ., length, ,, yLen, ), ;, }, final, int, ip1, =, i, +]
[., length, ,, yLen, ), ;, }, final, int, ip1, =, i, +, 1, ;, for, (, int, j, =]
[,, yLen, ), ;, }, final, int, ip1, =, i, +, 1, ;, for, (, int, j, =, 0, ;]
[,, yLen, ), ;, }, final, int, ip1, =, i, +, 1, ;, for, (, int, j, =, 0, ;]
[), ;, }, final, int, ip1, =, i, +, 1, ;, for, (, int, j, =, 0, ;, j, <]
[}, final, int, ip1, =, i, +, 1, ;, for, (, int, j, =, 0, ;, j, <, lastJ, ;]
[}, final, int, ip1, =, i, +, 1, ;, for, (, int, j, =, 0, ;, j, <, lastJ, ;]
[;, for, (, int, j, =, 0, ;, j, <, lastJ, ;, j, ++, ), {, final, int, jp1, =]
[;, for, (, int, j, =, 0, ;, j, <, lastJ, ;, j, ++, ), {, final, int, jp1, =]
[(, int, j, =, 0, ;, j, <, lastJ, ;, j, ++, ), {, final, int, jp1, =, j, +]
[lastJ, ;, j, ++, ), {, final, int, jp1, =, j, +, 1, ;, final, double, [, ], beta, =]
[), {, final, int, jp1, =, j, +, 1, ;, final, double, [, ], beta, =, new, double, [, ]]
[{, final, int, jp1, =, j, +, 1, ;, final, double, [, ], beta, =, new, double, [, ], {]
[{, final, int, jp1, =, j, +, 1, ;, final, double, [, ], beta, =, new, double, [, ], {]
[{, final, int, jp1, =, j, +, 1, ;, final, double, [, ], beta, =, new, double, [, ], {]
[int, jp1, =, j, +, 1, ;, final, double, [, ], beta, =, new, double, [, ], {, f, []
[j, +, 1, ;, final, double, [, ], beta, =, new, double, [, ], {, f, [, i, ], []
[;, final, double, [, ], beta, =, new, double, [, ], {, f, [, i, ], [, j, ], ,]
[;, final, double, [, ], beta, =, new, double, [, ], {, f, [, i, ], [, j, ], ,]
[;, final, double, [, ], beta, =, new, double, [, ], {, f, [, i, ], [, j, ], ,]
[double, [, ], beta, =, new, double, [, ], {, f, [, i, ], [, j, ], ,, f, []
[beta, =, new, double, [, ], {, f, [, i, ], [, j, ], ,, f, [, ip1, ], []
[double, [, ], {, f, [, i, ], [, j, ], ,, f, [, ip1, ], [, j, ], ,]
[double, [, ], {, f, [, i, ], [, j, ], ,, f, [, ip1, ], [, j, ], ,]
[double, [, ], {, f, [, i, ], [, j, ], ,, f, [, ip1, ], [, j, ], ,]
[], {, f, [, i, ], [, j, ], ,, f, [, ip1, ], [, j, ], ,, f, []
[[, i, ], [, j, ], ,, f, [, ip1, ], [, j, ], ,, f, [, i, ], []
[[, j, ], ,, f, [, ip1, ], [, j, ], ,, f, [, i, ], [, jp1, ], ,]
[[, j, ], ,, f, [, ip1, ], [, j, ], ,, f, [, i, ], [, jp1, ], ,]
[[, j, ], ,, f, [, ip1, ], [, j, ], ,, f, [, i, ], [, jp1, ], ,]
[], ,, f, [, ip1, ], [, j, ], ,, f, [, i, ], [, jp1, ], ,, f, []
[[, ip1, ], [, j, ], ,, f, [, i, ], [, jp1, ], ,, f, [, ip1, ], []
[[, j, ], ,, f, [, i, ], [, jp1, ], ,, f, [, ip1, ], [, jp1, ], ,]
[[, j, ], ,, f, [, i, ], [, jp1, ], ,, f, [, ip1, ], [, jp1, ], ,]
[[, j, ], ,, f, [, i, ], [, jp1, ], ,, f, [, ip1, ], [, jp1, ], ,]
[], ,, f, [, i, ], [, jp1, ], ,, f, [, ip1, ], [, jp1, ], ,, dFdX, []
[[, i, ], [, jp1, ], ,, f, [, ip1, ], [, jp1, ], ,, dFdX, [, i, ], []
[[, jp1, ], ,, f, [, ip1, ], [, jp1, ], ,, dFdX, [, i, ], [, j, ], ,]
[[, jp1, ], ,, f, [, ip1, ], [, jp1, ], ,, dFdX, [, i, ], [, j, ], ,]
[[, jp1, ], ,, f, [, ip1, ], [, jp1, ], ,, dFdX, [, i, ], [, j, ], ,]
[], ,, f, [, ip1, ], [, jp1, ], ,, dFdX, [, i, ], [, j, ], ,, dFdX, []
[[, ip1, ], [, jp1, ], ,, dFdX, [, i, ], [, j, ], ,, dFdX, [, ip1, ], []
[[, jp1, ], ,, dFdX, [, i, ], [, j, ], ,, dFdX, [, ip1, ], [, j, ], ,]
[[, jp1, ], ,, dFdX, [, i, ], [, j, ], ,, dFdX, [, ip1, ], [, j, ], ,]
[[, jp1, ], ,, dFdX, [, i, ], [, j, ], ,, dFdX, [, ip1, ], [, j, ], ,]
[], ,, dFdX, [, i, ], [, j, ], ,, dFdX, [, ip1, ], [, j, ], ,, dFdX, []
[[, i, ], [, j, ], ,, dFdX, [, ip1, ], [, j, ], ,, dFdX, [, i, ], []
[[, j, ], ,, dFdX, [, ip1, ], [, j, ], ,, dFdX, [, i, ], [, jp1, ], ,]
[[, j, ], ,, dFdX, [, ip1, ], [, j, ], ,, dFdX, [, i, ], [, jp1, ], ,]
[[, j, ], ,, dFdX, [, ip1, ], [, j, ], ,, dFdX, [, i, ], [, jp1, ], ,]
[], ,, dFdX, [, ip1, ], [, j, ], ,, dFdX, [, i, ], [, jp1, ], ,, dFdX, []
[[, ip1, ], [, j, ], ,, dFdX, [, i, ], [, jp1, ], ,, dFdX, [, ip1, ], []
[[, j, ], ,, dFdX, [, i, ], [, jp1, ], ,, dFdX, [, ip1, ], [, jp1, ], ,]
[[, j, ], ,, dFdX, [, i, ], [, jp1, ], ,, dFdX, [, ip1, ], [, jp1, ], ,]
[[, j, ], ,, dFdX, [, i, ], [, jp1, ], ,, dFdX, [, ip1, ], [, jp1, ], ,]
[], ,, dFdX, [, i, ], [, jp1, ], ,, dFdX, [, ip1, ], [, jp1, ], ,, dFdY, []
[[, i, ], [, jp1, ], ,, dFdX, [, ip1, ], [, jp1, ], ,, dFdY, [, i, ], []
[[, jp1, ], ,, dFdX, [, ip1, ], [, jp1, ], ,, dFdY, [, i, ], [, j, ], ,]
[[, jp1, ], ,, dFdX, [, ip1, ], [, jp1, ], ,, dFdY, [, i, ], [, j, ], ,]
[[, jp1, ], ,, dFdX, [, ip1, ], [, jp1, ], ,, dFdY, [, i, ], [, j, ], ,]
[], ,, dFdX, [, ip1, ], [, jp1, ], ,, dFdY, [, i, ], [, j, ], ,, dFdY, []
[[, ip1, ], [, jp1, ], ,, dFdY, [, i, ], [, j, ], ,, dFdY, [, ip1, ], []
[[, jp1, ], ,, dFdY, [, i, ], [, j, ], ,, dFdY, [, ip1, ], [, j, ], ,]
[[, jp1, ], ,, dFdY, [, i, ], [, j, ], ,, dFdY, [, ip1, ], [, j, ], ,]
[[, jp1, ], ,, dFdY, [, i, ], [, j, ], ,, dFdY, [, ip1, ], [, j, ], ,]
[], ,, dFdY, [, i, ], [, j, ], ,, dFdY, [, ip1, ], [, j, ], ,, dFdY, []
[[, i, ], [, j, ], ,, dFdY, [, ip1, ], [, j, ], ,, dFdY, [, i, ], []
[[, j, ], ,, dFdY, [, ip1, ], [, j, ], ,, dFdY, [, i, ], [, jp1, ], ,]
[[, j, ], ,, dFdY, [, ip1, ], [, j, ], ,, dFdY, [, i, ], [, jp1, ], ,]
[[, j, ], ,, dFdY, [, ip1, ], [, j, ], ,, dFdY, [, i, ], [, jp1, ], ,]
[], ,, dFdY, [, ip1, ], [, j, ], ,, dFdY, [, i, ], [, jp1, ], ,, dFdY, []
[[, ip1, ], [, j, ], ,, dFdY, [, i, ], [, jp1, ], ,, dFdY, [, ip1, ], []
[[, j, ], ,, dFdY, [, i, ], [, jp1, ], ,, dFdY, [, ip1, ], [, jp1, ], ,]
[[, j, ], ,, dFdY, [, i, ], [, jp1, ], ,, dFdY, [, ip1, ], [, jp1, ], ,]
[[, j, ], ,, dFdY, [, i, ], [, jp1, ], ,, dFdY, [, ip1, ], [, jp1, ], ,]
[], ,, dFdY, [, i, ], [, jp1, ], ,, dFdY, [, ip1, ], [, jp1, ], ,, d2FdXdY, []
[[, i, ], [, jp1, ], ,, dFdY, [, ip1, ], [, jp1, ], ,, d2FdXdY, [, i, ], []
[[, jp1, ], ,, dFdY, [, ip1, ], [, jp1, ], ,, d2FdXdY, [, i, ], [, j, ], ,]
[[, jp1, ], ,, dFdY, [, ip1, ], [, jp1, ], ,, d2FdXdY, [, i, ], [, j, ], ,]
[[, jp1, ], ,, dFdY, [, ip1, ], [, jp1, ], ,, d2FdXdY, [, i, ], [, j, ], ,]
[], ,, dFdY, [, ip1, ], [, jp1, ], ,, d2FdXdY, [, i, ], [, j, ], ,, d2FdXdY, []
[[, ip1, ], [, jp1, ], ,, d2FdXdY, [, i, ], [, j, ], ,, d2FdXdY, [, ip1, ], []
[[, jp1, ], ,, d2FdXdY, [, i, ], [, j, ], ,, d2FdXdY, [, ip1, ], [, j, ], ,]
[[, jp1, ], ,, d2FdXdY, [, i, ], [, j, ], ,, d2FdXdY, [, ip1, ], [, j, ], ,]
[[, jp1, ], ,, d2FdXdY, [, i, ], [, j, ], ,, d2FdXdY, [, ip1, ], [, j, ], ,]
[], ,, d2FdXdY, [, i, ], [, j, ], ,, d2FdXdY, [, ip1, ], [, j, ], ,, d2FdXdY, []
[[, i, ], [, j, ], ,, d2FdXdY, [, ip1, ], [, j, ], ,, d2FdXdY, [, i, ], []
[[, j, ], ,, d2FdXdY, [, ip1, ], [, j, ], ,, d2FdXdY, [, i, ], [, jp1, ], ,]
[[, j, ], ,, d2FdXdY, [, ip1, ], [, j, ], ,, d2FdXdY, [, i, ], [, jp1, ], ,]
[[, j, ], ,, d2FdXdY, [, ip1, ], [, j, ], ,, d2FdXdY, [, i, ], [, jp1, ], ,]
[], ,, d2FdXdY, [, ip1, ], [, j, ], ,, d2FdXdY, [, i, ], [, jp1, ], ,, d2FdXdY, []
[[, ip1, ], [, j, ], ,, d2FdXdY, [, i, ], [, jp1, ], ,, d2FdXdY, [, ip1, ], []
[j, ], ,, d2FdXdY, [, i, ], [, jp1, ], ,, d2FdXdY, [, ip1, ], [, jp1, ], }, ;]
[j, ], ,, d2FdXdY, [, i, ], [, jp1, ], ,, d2FdXdY, [, ip1, ], [, jp1, ], }, ;]
[j, ], ,, d2FdXdY, [, i, ], [, jp1, ], ,, d2FdXdY, [, ip1, ], [, jp1, ], }, ;]
[,, d2FdXdY, [, i, ], [, jp1, ], ,, d2FdXdY, [, ip1, ], [, jp1, ], }, ;, splines, []
[i, ], [, jp1, ], ,, d2FdXdY, [, ip1, ], [, jp1, ], }, ;, splines, [, i, ], []
[jp1, ], ,, d2FdXdY, [, ip1, ], [, jp1, ], }, ;, splines, [, i, ], [, j, ], =]
[d2FdXdY, [, ip1, ], [, jp1, ], }, ;, splines, [, i, ], [, j, ], =, new, BicubicSplineFunction, (]
[ip1, ], [, jp1, ], }, ;, splines, [, i, ], [, j, ], =, new, BicubicSplineFunction, (, computeSplineCoefficients, (]
[}, }, }, public, double, value, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, final, int, i, =]
[}, public, double, value, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, final, int, i, =, searchIndex, (]
[double, value, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, final, int, i, =, searchIndex, (, x, ,]
[y, ), throws, OutOfRangeException, {, final, int, i, =, searchIndex, (, x, ,, xval, ), ;, final, int, j, =]
[throws, OutOfRangeException, {, final, int, i, =, searchIndex, (, x, ,, xval, ), ;, final, int, j, =, searchIndex, (]
[{, final, int, i, =, searchIndex, (, x, ,, xval, ), ;, final, int, j, =, searchIndex, (, y, ,]
[x, ,, xval, ), ;, final, int, j, =, searchIndex, (, y, ,, yval, ), ;, final, double, xN, =]
[x, ,, xval, ), ;, final, int, j, =, searchIndex, (, y, ,, yval, ), ;, final, double, xN, =]
[,, xval, ), ;, final, int, j, =, searchIndex, (, y, ,, yval, ), ;, final, double, xN, =, (]
[,, xval, ), ;, final, int, j, =, searchIndex, (, y, ,, yval, ), ;, final, double, xN, =, (]
[), ;, final, int, j, =, searchIndex, (, y, ,, yval, ), ;, final, double, xN, =, (, x, -]
[), ;, final, int, j, =, searchIndex, (, y, ,, yval, ), ;, final, double, xN, =, (, x, -]
[final, int, j, =, searchIndex, (, y, ,, yval, ), ;, final, double, xN, =, (, x, -, xval, []
[searchIndex, (, y, ,, yval, ), ;, final, double, xN, =, (, x, -, xval, [, i, ], ), /]
[(, y, ,, yval, ), ;, final, double, xN, =, (, x, -, xval, [, i, ], ), /, (]
[(, y, ,, yval, ), ;, final, double, xN, =, (, x, -, xval, [, i, ], ), /, (]
[(, y, ,, yval, ), ;, final, double, xN, =, (, x, -, xval, [, i, ], ), /, (]
[,, yval, ), ;, final, double, xN, =, (, x, -, xval, [, i, ], ), /, (, xval, []
[,, yval, ), ;, final, double, xN, =, (, x, -, xval, [, i, ], ), /, (, xval, []
[), ;, final, double, xN, =, (, x, -, xval, [, i, ], ), /, (, xval, [, i, +]
[double, xN, =, (, x, -, xval, [, i, ], ), /, (, xval, [, i, +, 1, ], -]
[double, xN, =, (, x, -, xval, [, i, ], ), /, (, xval, [, i, +, 1, ], -]
[=, (, x, -, xval, [, i, ], ), /, (, xval, [, i, +, 1, ], -, xval, []
[), /, (, xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =]
[), /, (, xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =]
[/, (, xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =, (]
[/, (, xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =, (]
[xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =, (, y, -]
[xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =, (, y, -]
[i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =, (, y, -, yval, []
[-, xval, [, i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /]
[xval, [, i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (]
[xval, [, i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (]
[xval, [, i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (]
[i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval, []
[i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval, []
[), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval, [, j, +]
[double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval, [, j, +, 1, ], -]
[double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval, [, j, +, 1, ], -]
[=, (, y, -, yval, [, j, ], ), /, (, yval, [, j, +, 1, ], -, yval, []
[[, j, ], ), /, (, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return]
[[, j, ], ), /, (, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return]
[[, j, ], ), /, (, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return]
[[, j, ], ), /, (, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return]
[], ), /, (, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return, splines, []
[(, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return, splines, [, i, ], []
[1, ], -, yval, [, j, ], ), ;, return, splines, [, i, ], [, j, ], ., value, (]
[-, yval, [, j, ], ), ;, return, splines, [, i, ], [, j, ], ., value, (, xN, ,]
[(, xN, ,, yN, ), ;, }, public, boolean, isValidPoint, (, double, x, ,, double, y, ), {, if, (]
[(, xN, ,, yN, ), ;, }, public, boolean, isValidPoint, (, double, x, ,, double, y, ), {, if, (]
[(, xN, ,, yN, ), ;, }, public, boolean, isValidPoint, (, double, x, ,, double, y, ), {, if, (]
[(, xN, ,, yN, ), ;, }, public, boolean, isValidPoint, (, double, x, ,, double, y, ), {, if, (]
[(, xN, ,, yN, ), ;, }, public, boolean, isValidPoint, (, double, x, ,, double, y, ), {, if, (]
[,, yN, ), ;, }, public, boolean, isValidPoint, (, double, x, ,, double, y, ), {, if, (, x, <]
[,, yN, ), ;, }, public, boolean, isValidPoint, (, double, x, ,, double, y, ), {, if, (, x, <]
[), ;, }, public, boolean, isValidPoint, (, double, x, ,, double, y, ), {, if, (, x, <, xval, []
[public, boolean, isValidPoint, (, double, x, ,, double, y, ), {, if, (, x, <, xval, [, 0, ], ||]
[public, boolean, isValidPoint, (, double, x, ,, double, y, ), {, if, (, x, <, xval, [, 0, ], ||]
[isValidPoint, (, double, x, ,, double, y, ), {, if, (, x, <, xval, [, 0, ], ||, x, >]
[isValidPoint, (, double, x, ,, double, y, ), {, if, (, x, <, xval, [, 0, ], ||, x, >]
[double, x, ,, double, y, ), {, if, (, x, <, xval, [, 0, ], ||, x, >, xval, []
[double, x, ,, double, y, ), {, if, (, x, <, xval, [, 0, ], ||, x, >, xval, []
[double, x, ,, double, y, ), {, if, (, x, <, xval, [, 0, ], ||, x, >, xval, []
[y, ), {, if, (, x, <, xval, [, 0, ], ||, x, >, xval, [, xval, ., length, -]
[if, (, x, <, xval, [, 0, ], ||, x, >, xval, [, xval, ., length, -, 1, ], ||]
[if, (, x, <, xval, [, 0, ], ||, x, >, xval, [, xval, ., length, -, 1, ], ||]
[x, <, xval, [, 0, ], ||, x, >, xval, [, xval, ., length, -, 1, ], ||, y, <]
[x, <, xval, [, 0, ], ||, x, >, xval, [, xval, ., length, -, 1, ], ||, y, <]
[xval, [, 0, ], ||, x, >, xval, [, xval, ., length, -, 1, ], ||, y, <, yval, []
[], ||, x, >, xval, [, xval, ., length, -, 1, ], ||, y, <, yval, [, 0, ], ||]
[], ||, x, >, xval, [, xval, ., length, -, 1, ], ||, y, <, yval, [, 0, ], ||]
[x, >, xval, [, xval, ., length, -, 1, ], ||, y, <, yval, [, 0, ], ||, y, >]
[x, >, xval, [, xval, ., length, -, 1, ], ||, y, <, yval, [, 0, ], ||, y, >]
[xval, [, xval, ., length, -, 1, ], ||, y, <, yval, [, 0, ], ||, y, >, yval, []
[xval, [, xval, ., length, -, 1, ], ||, y, <, yval, [, 0, ], ||, y, >, yval, []
[xval, [, xval, ., length, -, 1, ], ||, y, <, yval, [, 0, ], ||, y, >, yval, []
[length, -, 1, ], ||, y, <, yval, [, 0, ], ||, y, >, yval, [, yval, ., length, -]
[y, <, yval, [, 0, ], ||, y, >, yval, [, yval, ., length, -, 1, ], ), {, return]
[||, y, >, yval, [, yval, ., length, -, 1, ], ), {, return, false, ;, }, else, {, return]
[{, return, true, ;, }, }, public, double, partialDerivativeX, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return]
[true, ;, }, }, public, double, partialDerivativeX, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (]
[}, }, public, double, partialDerivativeX, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (, 0, ,]
[public, double, partialDerivativeX, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (, 0, ,, x, ,]
[x, ,, y, ), ;, }, public, double, partialDerivativeY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return]
[y, ), ;, }, public, double, partialDerivativeY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (]
[;, }, public, double, partialDerivativeY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (, 1, ,]
[public, double, partialDerivativeY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (, 1, ,, x, ,]
[x, ,, y, ), ;, }, public, double, partialDerivativeXX, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return]
[y, ), ;, }, public, double, partialDerivativeXX, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (]
[;, }, public, double, partialDerivativeXX, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (, 2, ,]
[public, double, partialDerivativeXX, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (, 2, ,, x, ,]
[x, ,, y, ), ;, }, public, double, partialDerivativeYY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return]
[y, ), ;, }, public, double, partialDerivativeYY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (]
[;, }, public, double, partialDerivativeYY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (, 3, ,]
[public, double, partialDerivativeYY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (, 3, ,, x, ,]
[x, ,, y, ), ;, }, public, double, partialDerivativeXY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return]
[y, ), ;, }, public, double, partialDerivativeXY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (]
[;, }, public, double, partialDerivativeXY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (, 4, ,]
[public, double, partialDerivativeXY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (, 4, ,, x, ,]
[;, }, private, double, partialDerivative, (, int, which, ,, double, x, ,, double, y, ), throws, OutOfRangeException, {, if, (]
[;, }, private, double, partialDerivative, (, int, which, ,, double, x, ,, double, y, ), throws, OutOfRangeException, {, if, (]
[private, double, partialDerivative, (, int, which, ,, double, x, ,, double, y, ), throws, OutOfRangeException, {, if, (, partialDerivatives, ==]
[(, int, which, ,, double, x, ,, double, y, ), throws, OutOfRangeException, {, if, (, partialDerivatives, ==, null, ), {]
[), throws, OutOfRangeException, {, if, (, partialDerivatives, ==, null, ), {, computePartialDerivatives, (, ), ;, }, final, int, i, =]
[OutOfRangeException, {, if, (, partialDerivatives, ==, null, ), {, computePartialDerivatives, (, ), ;, }, final, int, i, =, searchIndex, (]
[if, (, partialDerivatives, ==, null, ), {, computePartialDerivatives, (, ), ;, }, final, int, i, =, searchIndex, (, x, ,]
[computePartialDerivatives, (, ), ;, }, final, int, i, =, searchIndex, (, x, ,, xval, ), ;, final, int, j, =]
[), ;, }, final, int, i, =, searchIndex, (, x, ,, xval, ), ;, final, int, j, =, searchIndex, (]
[}, final, int, i, =, searchIndex, (, x, ,, xval, ), ;, final, int, j, =, searchIndex, (, y, ,]
[x, ,, xval, ), ;, final, int, j, =, searchIndex, (, y, ,, yval, ), ;, final, double, xN, =]
[x, ,, xval, ), ;, final, int, j, =, searchIndex, (, y, ,, yval, ), ;, final, double, xN, =]
[,, xval, ), ;, final, int, j, =, searchIndex, (, y, ,, yval, ), ;, final, double, xN, =, (]
[,, xval, ), ;, final, int, j, =, searchIndex, (, y, ,, yval, ), ;, final, double, xN, =, (]
[), ;, final, int, j, =, searchIndex, (, y, ,, yval, ), ;, final, double, xN, =, (, x, -]
[), ;, final, int, j, =, searchIndex, (, y, ,, yval, ), ;, final, double, xN, =, (, x, -]
[final, int, j, =, searchIndex, (, y, ,, yval, ), ;, final, double, xN, =, (, x, -, xval, []
[searchIndex, (, y, ,, yval, ), ;, final, double, xN, =, (, x, -, xval, [, i, ], ), /]
[(, y, ,, yval, ), ;, final, double, xN, =, (, x, -, xval, [, i, ], ), /, (]
[(, y, ,, yval, ), ;, final, double, xN, =, (, x, -, xval, [, i, ], ), /, (]
[(, y, ,, yval, ), ;, final, double, xN, =, (, x, -, xval, [, i, ], ), /, (]
[,, yval, ), ;, final, double, xN, =, (, x, -, xval, [, i, ], ), /, (, xval, []
[,, yval, ), ;, final, double, xN, =, (, x, -, xval, [, i, ], ), /, (, xval, []
[), ;, final, double, xN, =, (, x, -, xval, [, i, ], ), /, (, xval, [, i, +]
[double, xN, =, (, x, -, xval, [, i, ], ), /, (, xval, [, i, +, 1, ], -]
[double, xN, =, (, x, -, xval, [, i, ], ), /, (, xval, [, i, +, 1, ], -]
[=, (, x, -, xval, [, i, ], ), /, (, xval, [, i, +, 1, ], -, xval, []
[), /, (, xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =]
[), /, (, xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =]
[/, (, xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =, (]
[/, (, xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =, (]
[xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =, (, y, -]
[xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =, (, y, -]
[i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =, (, y, -, yval, []
[-, xval, [, i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /]
[xval, [, i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (]
[xval, [, i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (]
[xval, [, i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (]
[i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval, []
[i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval, []
[), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval, [, j, +]
[double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval, [, j, +, 1, ], -]
[double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval, [, j, +, 1, ], -]
[=, (, y, -, yval, [, j, ], ), /, (, yval, [, j, +, 1, ], -, yval, []
[[, j, ], ), /, (, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return]
[[, j, ], ), /, (, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return]
[[, j, ], ), /, (, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return]
[[, j, ], ), /, (, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return]
[[, j, ], ), /, (, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return]
[], ), /, (, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return, partialDerivatives, []
[(, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return, partialDerivatives, [, which, ], []
[j, +, 1, ], -, yval, [, j, ], ), ;, return, partialDerivatives, [, which, ], [, i, ], []
[yval, [, j, ], ), ;, return, partialDerivatives, [, which, ], [, i, ], [, j, ], ., value, (]
[j, ], ), ;, return, partialDerivatives, [, which, ], [, i, ], [, j, ], ., value, (, xN, ,]
[], ., value, (, xN, ,, yN, ), ;, }, private, void, computePartialDerivatives, (, ), {, final, int, lastI, =]
[], ., value, (, xN, ,, yN, ), ;, }, private, void, computePartialDerivatives, (, ), {, final, int, lastI, =]
[], ., value, (, xN, ,, yN, ), ;, }, private, void, computePartialDerivatives, (, ), {, final, int, lastI, =]
[xN, ,, yN, ), ;, }, private, void, computePartialDerivatives, (, ), {, final, int, lastI, =, xval, ., length, -]
[private, void, computePartialDerivatives, (, ), {, final, int, lastI, =, xval, ., length, -, 1, ;, final, int, lastJ, =]
[private, void, computePartialDerivatives, (, ), {, final, int, lastI, =, xval, ., length, -, 1, ;, final, int, lastJ, =]
[private, void, computePartialDerivatives, (, ), {, final, int, lastI, =, xval, ., length, -, 1, ;, final, int, lastJ, =]
[), {, final, int, lastI, =, xval, ., length, -, 1, ;, final, int, lastJ, =, yval, ., length, -]
[final, int, lastI, =, xval, ., length, -, 1, ;, final, int, lastJ, =, yval, ., length, -, 1, ;]
[lastI, =, xval, ., length, -, 1, ;, final, int, lastJ, =, yval, ., length, -, 1, ;, partialDerivatives, =]
[., length, -, 1, ;, final, int, lastJ, =, yval, ., length, -, 1, ;, partialDerivatives, =, new, BivariateFunction, []
[1, ;, final, int, lastJ, =, yval, ., length, -, 1, ;, partialDerivatives, =, new, BivariateFunction, [, 5, ], []
[int, lastJ, =, yval, ., length, -, 1, ;, partialDerivatives, =, new, BivariateFunction, [, 5, ], [, lastI, ], []
[;, partialDerivatives, =, new, BivariateFunction, [, 5, ], [, lastI, ], [, lastJ, ], ;, for, (, int, i, =]
[=, new, BivariateFunction, [, 5, ], [, lastI, ], [, lastJ, ], ;, for, (, int, i, =, 0, ;]
[=, new, BivariateFunction, [, 5, ], [, lastI, ], [, lastJ, ], ;, for, (, int, i, =, 0, ;]
[BivariateFunction, [, 5, ], [, lastI, ], [, lastJ, ], ;, for, (, int, i, =, 0, ;, i, <]
[5, ], [, lastI, ], [, lastJ, ], ;, for, (, int, i, =, 0, ;, i, <, lastI, ;]
[5, ], [, lastI, ], [, lastJ, ], ;, for, (, int, i, =, 0, ;, i, <, lastI, ;]
[for, (, int, i, =, 0, ;, i, <, lastI, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, lastI, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, lastI, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, lastI, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, lastI, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, lastJ, ;]
[;, i, <, lastI, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, lastJ, ;]
[{, for, (, int, j, =, 0, ;, j, <, lastJ, ;, j, ++, ), {, final, BicubicSplineFunction, f, =]
[{, for, (, int, j, =, 0, ;, j, <, lastJ, ;, j, ++, ), {, final, BicubicSplineFunction, f, =]
[{, for, (, int, j, =, 0, ;, j, <, lastJ, ;, j, ++, ), {, final, BicubicSplineFunction, f, =]
[(, int, j, =, 0, ;, j, <, lastJ, ;, j, ++, ), {, final, BicubicSplineFunction, f, =, splines, []
[=, 0, ;, j, <, lastJ, ;, j, ++, ), {, final, BicubicSplineFunction, f, =, splines, [, i, ], []
[j, <, lastJ, ;, j, ++, ), {, final, BicubicSplineFunction, f, =, splines, [, i, ], [, j, ], ;]
[j, <, lastJ, ;, j, ++, ), {, final, BicubicSplineFunction, f, =, splines, [, i, ], [, j, ], ;]
[j, <, lastJ, ;, j, ++, ), {, final, BicubicSplineFunction, f, =, splines, [, i, ], [, j, ], ;]
[j, <, lastJ, ;, j, ++, ), {, final, BicubicSplineFunction, f, =, splines, [, i, ], [, j, ], ;]
[lastJ, ;, j, ++, ), {, final, BicubicSplineFunction, f, =, splines, [, i, ], [, j, ], ;, partialDerivatives, []
[++, ), {, final, BicubicSplineFunction, f, =, splines, [, i, ], [, j, ], ;, partialDerivatives, [, 0, ], []
[final, BicubicSplineFunction, f, =, splines, [, i, ], [, j, ], ;, partialDerivatives, [, 0, ], [, i, ], []
[=, splines, [, i, ], [, j, ], ;, partialDerivatives, [, 0, ], [, i, ], [, j, ], =]
[=, splines, [, i, ], [, j, ], ;, partialDerivatives, [, 0, ], [, i, ], [, j, ], =]
[j, ], ;, partialDerivatives, [, 0, ], [, i, ], [, j, ], =, f, ., partialDerivativeX, (, ), ;]
[j, ], ;, partialDerivatives, [, 0, ], [, i, ], [, j, ], =, f, ., partialDerivativeX, (, ), ;]
[j, ], ;, partialDerivatives, [, 0, ], [, i, ], [, j, ], =, f, ., partialDerivativeX, (, ), ;]
[j, ], ;, partialDerivatives, [, 0, ], [, i, ], [, j, ], =, f, ., partialDerivativeX, (, ), ;]
[;, partialDerivatives, [, 0, ], [, i, ], [, j, ], =, f, ., partialDerivativeX, (, ), ;, partialDerivatives, []
[0, ], [, i, ], [, j, ], =, f, ., partialDerivativeX, (, ), ;, partialDerivatives, [, 1, ], []
[i, ], [, j, ], =, f, ., partialDerivativeX, (, ), ;, partialDerivatives, [, 1, ], [, i, ], []
[j, ], =, f, ., partialDerivativeX, (, ), ;, partialDerivatives, [, 1, ], [, i, ], [, j, ], =]
[j, ], =, f, ., partialDerivativeX, (, ), ;, partialDerivatives, [, 1, ], [, i, ], [, j, ], =]
[(, ), ;, partialDerivatives, [, 1, ], [, i, ], [, j, ], =, f, ., partialDerivativeY, (, ), ;]
[(, ), ;, partialDerivatives, [, 1, ], [, i, ], [, j, ], =, f, ., partialDerivativeY, (, ), ;]
[(, ), ;, partialDerivatives, [, 1, ], [, i, ], [, j, ], =, f, ., partialDerivativeY, (, ), ;]
[(, ), ;, partialDerivatives, [, 1, ], [, i, ], [, j, ], =, f, ., partialDerivativeY, (, ), ;]
[;, partialDerivatives, [, 1, ], [, i, ], [, j, ], =, f, ., partialDerivativeY, (, ), ;, partialDerivatives, []
[1, ], [, i, ], [, j, ], =, f, ., partialDerivativeY, (, ), ;, partialDerivatives, [, 2, ], []
[i, ], [, j, ], =, f, ., partialDerivativeY, (, ), ;, partialDerivatives, [, 2, ], [, i, ], []
[j, ], =, f, ., partialDerivativeY, (, ), ;, partialDerivatives, [, 2, ], [, i, ], [, j, ], =]
[j, ], =, f, ., partialDerivativeY, (, ), ;, partialDerivatives, [, 2, ], [, i, ], [, j, ], =]
[(, ), ;, partialDerivatives, [, 2, ], [, i, ], [, j, ], =, f, ., partialDerivativeXX, (, ), ;]
[(, ), ;, partialDerivatives, [, 2, ], [, i, ], [, j, ], =, f, ., partialDerivativeXX, (, ), ;]
[(, ), ;, partialDerivatives, [, 2, ], [, i, ], [, j, ], =, f, ., partialDerivativeXX, (, ), ;]
[(, ), ;, partialDerivatives, [, 2, ], [, i, ], [, j, ], =, f, ., partialDerivativeXX, (, ), ;]
[;, partialDerivatives, [, 2, ], [, i, ], [, j, ], =, f, ., partialDerivativeXX, (, ), ;, partialDerivatives, []
[2, ], [, i, ], [, j, ], =, f, ., partialDerivativeXX, (, ), ;, partialDerivatives, [, 3, ], []
[i, ], [, j, ], =, f, ., partialDerivativeXX, (, ), ;, partialDerivatives, [, 3, ], [, i, ], []
[j, ], =, f, ., partialDerivativeXX, (, ), ;, partialDerivatives, [, 3, ], [, i, ], [, j, ], =]
[j, ], =, f, ., partialDerivativeXX, (, ), ;, partialDerivatives, [, 3, ], [, i, ], [, j, ], =]
[(, ), ;, partialDerivatives, [, 3, ], [, i, ], [, j, ], =, f, ., partialDerivativeYY, (, ), ;]
[(, ), ;, partialDerivatives, [, 3, ], [, i, ], [, j, ], =, f, ., partialDerivativeYY, (, ), ;]
[(, ), ;, partialDerivatives, [, 3, ], [, i, ], [, j, ], =, f, ., partialDerivativeYY, (, ), ;]
[(, ), ;, partialDerivatives, [, 3, ], [, i, ], [, j, ], =, f, ., partialDerivativeYY, (, ), ;]
[;, partialDerivatives, [, 3, ], [, i, ], [, j, ], =, f, ., partialDerivativeYY, (, ), ;, partialDerivatives, []
[3, ], [, i, ], [, j, ], =, f, ., partialDerivativeYY, (, ), ;, partialDerivatives, [, 4, ], []
[i, ], [, j, ], =, f, ., partialDerivativeYY, (, ), ;, partialDerivatives, [, 4, ], [, i, ], []
[j, ], =, f, ., partialDerivativeYY, (, ), ;, partialDerivatives, [, 4, ], [, i, ], [, j, ], =]
[j, ], =, f, ., partialDerivativeYY, (, ), ;, partialDerivatives, [, 4, ], [, i, ], [, j, ], =]
[}, }, }, private, int, searchIndex, (, double, c, ,, double, [, ], val, ), {, final, int, r, =]
[}, }, }, private, int, searchIndex, (, double, c, ,, double, [, ], val, ), {, final, int, r, =]
[int, searchIndex, (, double, c, ,, double, [, ], val, ), {, final, int, r, =, Arrays, ., binarySearch, (]
[(, double, c, ,, double, [, ], val, ), {, final, int, r, =, Arrays, ., binarySearch, (, val, ,]
[[, ], val, ), {, final, int, r, =, Arrays, ., binarySearch, (, val, ,, c, ), ;, if, (]
[[, ], val, ), {, final, int, r, =, Arrays, ., binarySearch, (, val, ,, c, ), ;, if, (]
[[, ], val, ), {, final, int, r, =, Arrays, ., binarySearch, (, val, ,, c, ), ;, if, (]
[val, ), {, final, int, r, =, Arrays, ., binarySearch, (, val, ,, c, ), ;, if, (, r, ==]
[), {, final, int, r, =, Arrays, ., binarySearch, (, val, ,, c, ), ;, if, (, r, ==, -]
[final, int, r, =, Arrays, ., binarySearch, (, val, ,, c, ), ;, if, (, r, ==, -, 1, ||]
[final, int, r, =, Arrays, ., binarySearch, (, val, ,, c, ), ;, if, (, r, ==, -, 1, ||]
[r, =, Arrays, ., binarySearch, (, val, ,, c, ), ;, if, (, r, ==, -, 1, ||, r, ==]
[r, =, Arrays, ., binarySearch, (, val, ,, c, ), ;, if, (, r, ==, -, 1, ||, r, ==]
[=, Arrays, ., binarySearch, (, val, ,, c, ), ;, if, (, r, ==, -, 1, ||, r, ==, -]
[=, Arrays, ., binarySearch, (, val, ,, c, ), ;, if, (, r, ==, -, 1, ||, r, ==, -]
[(, val, ,, c, ), ;, if, (, r, ==, -, 1, ||, r, ==, -, val, ., length, -]
[), ;, if, (, r, ==, -, 1, ||, r, ==, -, val, ., length, -, 1, ), {, throw]
[(, r, ==, -, 1, ||, r, ==, -, val, ., length, -, 1, ), {, throw, new, OutOfRangeException, (]
[==, -, 1, ||, r, ==, -, val, ., length, -, 1, ), {, throw, new, OutOfRangeException, (, c, ,]
[==, -, 1, ||, r, ==, -, val, ., length, -, 1, ), {, throw, new, OutOfRangeException, (, c, ,]
[1, ||, r, ==, -, val, ., length, -, 1, ), {, throw, new, OutOfRangeException, (, c, ,, val, []
[==, -, val, ., length, -, 1, ), {, throw, new, OutOfRangeException, (, c, ,, val, [, 0, ], ,]
[==, -, val, ., length, -, 1, ), {, throw, new, OutOfRangeException, (, c, ,, val, [, 0, ], ,]
[val, ., length, -, 1, ), {, throw, new, OutOfRangeException, (, c, ,, val, [, 0, ], ,, val, []
[val, ., length, -, 1, ), {, throw, new, OutOfRangeException, (, c, ,, val, [, 0, ], ,, val, []
[val, ., length, -, 1, ), {, throw, new, OutOfRangeException, (, c, ,, val, [, 0, ], ,, val, []
[1, ), {, throw, new, OutOfRangeException, (, c, ,, val, [, 0, ], ,, val, [, val, ., length, -]
[c, ,, val, [, 0, ], ,, val, [, val, ., length, -, 1, ], ), ;, }, if, (]
[c, ,, val, [, 0, ], ,, val, [, val, ., length, -, 1, ], ), ;, }, if, (]
[val, [, 0, ], ,, val, [, val, ., length, -, 1, ], ), ;, }, if, (, r, <]
[,, val, [, val, ., length, -, 1, ], ), ;, }, if, (, r, <, 0, ), {, return]
[,, val, [, val, ., length, -, 1, ], ), ;, }, if, (, r, <, 0, ), {, return]
[val, [, val, ., length, -, 1, ], ), ;, }, if, (, r, <, 0, ), {, return, -]
[val, ., length, -, 1, ], ), ;, }, if, (, r, <, 0, ), {, return, -, r, -]
[;, }, if, (, r, <, 0, ), {, return, -, r, -, 2, ;, }, final, int, last, =]
[;, }, if, (, r, <, 0, ), {, return, -, r, -, 2, ;, }, final, int, last, =]
[;, }, if, (, r, <, 0, ), {, return, -, r, -, 2, ;, }, final, int, last, =]
[r, <, 0, ), {, return, -, r, -, 2, ;, }, final, int, last, =, val, ., length, -]
[{, return, -, r, -, 2, ;, }, final, int, last, =, val, ., length, -, 1, ;, if, (]
[{, return, -, r, -, 2, ;, }, final, int, last, =, val, ., length, -, 1, ;, if, (]
[-, r, -, 2, ;, }, final, int, last, =, val, ., length, -, 1, ;, if, (, r, ==]
[;, }, final, int, last, =, val, ., length, -, 1, ;, if, (, r, ==, last, ), {, return]
[;, }, final, int, last, =, val, ., length, -, 1, ;, if, (, r, ==, last, ), {, return]
[final, int, last, =, val, ., length, -, 1, ;, if, (, r, ==, last, ), {, return, last, -]
[val, ., length, -, 1, ;, if, (, r, ==, last, ), {, return, last, -, 1, ;, }, return]
[;, }, private, double, [, ], computeSplineCoefficients, (, double, [, ], beta, ), {, final, double, [, ], a, =]
[double, [, ], computeSplineCoefficients, (, double, [, ], beta, ), {, final, double, [, ], a, =, new, double, []
[beta, ), {, final, double, [, ], a, =, new, double, [, NUM_COEFF, ], ;, for, (, int, i, =]
[{, final, double, [, ], a, =, new, double, [, NUM_COEFF, ], ;, for, (, int, i, =, 0, ;]
[{, final, double, [, ], a, =, new, double, [, NUM_COEFF, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], a, =, new, double, [, NUM_COEFF, ], ;, for, (, int, i, =, 0, ;, i, <]
[], a, =, new, double, [, NUM_COEFF, ], ;, for, (, int, i, =, 0, ;, i, <, NUM_COEFF, ;]
[], a, =, new, double, [, NUM_COEFF, ], ;, for, (, int, i, =, 0, ;, i, <, NUM_COEFF, ;]
[], ;, for, (, int, i, =, 0, ;, i, <, NUM_COEFF, ;, i, ++, ), {, double, result, =]
[;, i, <, NUM_COEFF, ;, i, ++, ), {, double, result, =, 0, ;, final, double, [, ], row, =]
[;, i, <, NUM_COEFF, ;, i, ++, ), {, double, result, =, 0, ;, final, double, [, ], row, =]
[<, NUM_COEFF, ;, i, ++, ), {, double, result, =, 0, ;, final, double, [, ], row, =, AINV, []
[result, =, 0, ;, final, double, [, ], row, =, AINV, [, i, ], ;, for, (, int, j, =]
[0, ;, final, double, [, ], row, =, AINV, [, i, ], ;, for, (, int, j, =, 0, ;]
[0, ;, final, double, [, ], row, =, AINV, [, i, ], ;, for, (, int, j, =, 0, ;]
[final, double, [, ], row, =, AINV, [, i, ], ;, for, (, int, j, =, 0, ;, j, <]
[[, ], row, =, AINV, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, NUM_COEFF, ;]
[[, ], row, =, AINV, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, NUM_COEFF, ;]
[AINV, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, NUM_COEFF, ;, j, ++, ), {]
[i, ], ;, for, (, int, j, =, 0, ;, j, <, NUM_COEFF, ;, j, ++, ), {, result, +=]
[i, ], ;, for, (, int, j, =, 0, ;, j, <, NUM_COEFF, ;, j, ++, ), {, result, +=]
[i, ], ;, for, (, int, j, =, 0, ;, j, <, NUM_COEFF, ;, j, ++, ), {, result, +=]
[;, for, (, int, j, =, 0, ;, j, <, NUM_COEFF, ;, j, ++, ), {, result, +=, row, []
[int, j, =, 0, ;, j, <, NUM_COEFF, ;, j, ++, ), {, result, +=, row, [, j, ], *]
[int, j, =, 0, ;, j, <, NUM_COEFF, ;, j, ++, ), {, result, +=, row, [, j, ], *]
[=, 0, ;, j, <, NUM_COEFF, ;, j, ++, ), {, result, +=, row, [, j, ], *, beta, []
[<, NUM_COEFF, ;, j, ++, ), {, result, +=, row, [, j, ], *, beta, [, j, ], ;, }]
[<, NUM_COEFF, ;, j, ++, ), {, result, +=, row, [, j, ], *, beta, [, j, ], ;, }]
[;, j, ++, ), {, result, +=, row, [, j, ], *, beta, [, j, ], ;, }, a, []
[), {, result, +=, row, [, j, ], *, beta, [, j, ], ;, }, a, [, i, ], =]
[row, [, j, ], *, beta, [, j, ], ;, }, a, [, i, ], =, result, ;, }, return]
[=, result, ;, }, return, a, ;, }, }, class, BicubicSplineFunction, implements, BivariateFunction, {, private, static, final, short, N, =]
[BivariateFunction, partialDerivativeXX, ;, private, BivariateFunction, partialDerivativeYY, ;, private, BivariateFunction, partialDerivativeXY, ;, public, BicubicSplineFunction, (, double, [, ], a, ), {]
[BivariateFunction, partialDerivativeXX, ;, private, BivariateFunction, partialDerivativeYY, ;, private, BivariateFunction, partialDerivativeXY, ;, public, BicubicSplineFunction, (, double, [, ], a, ), {]
[BivariateFunction, partialDerivativeYY, ;, private, BivariateFunction, partialDerivativeXY, ;, public, BicubicSplineFunction, (, double, [, ], a, ), {, this, ., a, =]
[private, BivariateFunction, partialDerivativeXY, ;, public, BicubicSplineFunction, (, double, [, ], a, ), {, this, ., a, =, new, double, []
[;, public, BicubicSplineFunction, (, double, [, ], a, ), {, this, ., a, =, new, double, [, N, ], []
[), {, this, ., a, =, new, double, [, N, ], [, N, ], ;, for, (, int, i, =]
[this, ., a, =, new, double, [, N, ], [, N, ], ;, for, (, int, i, =, 0, ;]
[this, ., a, =, new, double, [, N, ], [, N, ], ;, for, (, int, i, =, 0, ;]
[a, =, new, double, [, N, ], [, N, ], ;, for, (, int, i, =, 0, ;, i, <]
[new, double, [, N, ], [, N, ], ;, for, (, int, i, =, 0, ;, i, <, N, ;]
[new, double, [, N, ], [, N, ], ;, for, (, int, i, =, 0, ;, i, <, N, ;]
[for, (, int, i, =, 0, ;, i, <, N, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, N, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, N, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, N, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, N, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;]
[;, i, <, N, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {]
[{, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {, this, ., a, []
[int, j, =, 0, ;, j, <, N, ;, j, ++, ), {, this, ., a, [, i, ], []
[0, ;, j, <, N, ;, j, ++, ), {, this, ., a, [, i, ], [, j, ], =]
[0, ;, j, <, N, ;, j, ++, ), {, this, ., a, [, i, ], [, j, ], =]
[j, <, N, ;, j, ++, ), {, this, ., a, [, i, ], [, j, ], =, a, []
[j, <, N, ;, j, ++, ), {, this, ., a, [, i, ], [, j, ], =, a, []
[j, <, N, ;, j, ++, ), {, this, ., a, [, i, ], [, j, ], =, a, []
[N, ;, j, ++, ), {, this, ., a, [, i, ], [, j, ], =, a, [, i, *]
[j, ++, ), {, this, ., a, [, i, ], [, j, ], =, a, [, i, *, N, +]
[+, j, ], ;, }, }, }, public, double, value, (, double, x, ,, double, y, ), {, if, (]
[+, j, ], ;, }, }, }, public, double, value, (, double, x, ,, double, y, ), {, if, (]
[+, j, ], ;, }, }, }, public, double, value, (, double, x, ,, double, y, ), {, if, (]
[], ;, }, }, }, public, double, value, (, double, x, ,, double, y, ), {, if, (, x, <]
[}, }, }, public, double, value, (, double, x, ,, double, y, ), {, if, (, x, <, 0, ||]
[}, }, }, public, double, value, (, double, x, ,, double, y, ), {, if, (, x, <, 0, ||]
[}, public, double, value, (, double, x, ,, double, y, ), {, if, (, x, <, 0, ||, x, >]
[(, double, x, ,, double, y, ), {, if, (, x, <, 0, ||, x, >, 1, ), {, throw]
[,, double, y, ), {, if, (, x, <, 0, ||, x, >, 1, ), {, throw, new, OutOfRangeException, (]
[y, ), {, if, (, x, <, 0, ||, x, >, 1, ), {, throw, new, OutOfRangeException, (, x, ,]
[{, if, (, x, <, 0, ||, x, >, 1, ), {, throw, new, OutOfRangeException, (, x, ,, 0, ,]
[||, x, >, 1, ), {, throw, new, OutOfRangeException, (, x, ,, 0, ,, 1, ), ;, }, if, (]
[||, x, >, 1, ), {, throw, new, OutOfRangeException, (, x, ,, 0, ,, 1, ), ;, }, if, (]
[||, x, >, 1, ), {, throw, new, OutOfRangeException, (, x, ,, 0, ,, 1, ), ;, }, if, (]
[>, 1, ), {, throw, new, OutOfRangeException, (, x, ,, 0, ,, 1, ), ;, }, if, (, y, <]
[), {, throw, new, OutOfRangeException, (, x, ,, 0, ,, 1, ), ;, }, if, (, y, <, 0, ||]
[), {, throw, new, OutOfRangeException, (, x, ,, 0, ,, 1, ), ;, }, if, (, y, <, 0, ||]
[throw, new, OutOfRangeException, (, x, ,, 0, ,, 1, ), ;, }, if, (, y, <, 0, ||, y, >]
[x, ,, 0, ,, 1, ), ;, }, if, (, y, <, 0, ||, y, >, 1, ), {, throw]
[,, 1, ), ;, }, if, (, y, <, 0, ||, y, >, 1, ), {, throw, new, OutOfRangeException, (]
[), ;, }, if, (, y, <, 0, ||, y, >, 1, ), {, throw, new, OutOfRangeException, (, y, ,]
[}, if, (, y, <, 0, ||, y, >, 1, ), {, throw, new, OutOfRangeException, (, y, ,, 0, ,]
[>, 1, ), {, throw, new, OutOfRangeException, (, y, ,, 0, ,, 1, ), ;, }, final, double, x2, =]
[>, 1, ), {, throw, new, OutOfRangeException, (, y, ,, 0, ,, 1, ), ;, }, final, double, x2, =]
[), {, throw, new, OutOfRangeException, (, y, ,, 0, ,, 1, ), ;, }, final, double, x2, =, x, *]
[y, ,, 0, ,, 1, ), ;, }, final, double, x2, =, x, *, x, ;, final, double, x3, =]
[y, ,, 0, ,, 1, ), ;, }, final, double, x2, =, x, *, x, ;, final, double, x3, =]
[0, ,, 1, ), ;, }, final, double, x2, =, x, *, x, ;, final, double, x3, =, x2, *]
[x2, =, x, *, x, ;, final, double, x3, =, x2, *, x, ;, final, double, [, ], pX, =]
[=, x, *, x, ;, final, double, x3, =, x2, *, x, ;, final, double, [, ], pX, =, {]
[*, x, ;, final, double, x3, =, x2, *, x, ;, final, double, [, ], pX, =, {, 1, ,]
[;, final, double, x3, =, x2, *, x, ;, final, double, [, ], pX, =, {, 1, ,, x, ,]
[double, x3, =, x2, *, x, ;, final, double, [, ], pX, =, {, 1, ,, x, ,, x2, ,]
[final, double, [, ], pX, =, {, 1, ,, x, ,, x2, ,, x3, }, ;, final, double, y2, =]
[final, double, [, ], pX, =, {, 1, ,, x, ,, x2, ,, x3, }, ;, final, double, y2, =]
[[, ], pX, =, {, 1, ,, x, ,, x2, ,, x3, }, ;, final, double, y2, =, y, *]
[,, x, ,, x2, ,, x3, }, ;, final, double, y2, =, y, *, y, ;, final, double, y3, =]
[,, x, ,, x2, ,, x3, }, ;, final, double, y2, =, y, *, y, ;, final, double, y3, =]
[,, x2, ,, x3, }, ;, final, double, y2, =, y, *, y, ;, final, double, y3, =, y2, *]
[y2, =, y, *, y, ;, final, double, y3, =, y2, *, y, ;, final, double, [, ], pY, =]
[=, y, *, y, ;, final, double, y3, =, y2, *, y, ;, final, double, [, ], pY, =, {]
[*, y, ;, final, double, y3, =, y2, *, y, ;, final, double, [, ], pY, =, {, 1, ,]
[;, final, double, y3, =, y2, *, y, ;, final, double, [, ], pY, =, {, 1, ,, y, ,]
[double, y3, =, y2, *, y, ;, final, double, [, ], pY, =, {, 1, ,, y, ,, y2, ,]
[*, y, ;, final, double, [, ], pY, =, {, 1, ,, y, ,, y2, ,, y3, }, ;, return]
[;, final, double, [, ], pY, =, {, 1, ,, y, ,, y2, ,, y3, }, ;, return, apply, (]
[double, [, ], pY, =, {, 1, ,, y, ,, y2, ,, y3, }, ;, return, apply, (, pX, ,]
[], pY, =, {, 1, ,, y, ,, y2, ,, y3, }, ;, return, apply, (, pX, ,, pY, ,]
[[, ], pX, ,, double, [, ], pY, ,, double, [, ], [, ], coeff, ), {, double, result, =]
[pY, ,, double, [, ], [, ], coeff, ), {, double, result, =, 0, ;, for, (, int, i, =]
[double, [, ], [, ], coeff, ), {, double, result, =, 0, ;, for, (, int, i, =, 0, ;]
[double, [, ], [, ], coeff, ), {, double, result, =, 0, ;, for, (, int, i, =, 0, ;]
[], [, ], coeff, ), {, double, result, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[], coeff, ), {, double, result, =, 0, ;, for, (, int, i, =, 0, ;, i, <, N, ;]
[], coeff, ), {, double, result, =, 0, ;, for, (, int, i, =, 0, ;, i, <, N, ;]
[for, (, int, i, =, 0, ;, i, <, N, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, N, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, N, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, N, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, N, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;]
[;, i, <, N, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {]
[++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {, result, +=]
[++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {, result, +=]
[++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {, result, +=]
[++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {, result, +=]
[++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {, result, +=]
[{, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {, result, +=, coeff, []
[int, j, =, 0, ;, j, <, N, ;, j, ++, ), {, result, +=, coeff, [, i, ], []
[0, ;, j, <, N, ;, j, ++, ), {, result, +=, coeff, [, i, ], [, j, ], *]
[0, ;, j, <, N, ;, j, ++, ), {, result, +=, coeff, [, i, ], [, j, ], *]
[j, <, N, ;, j, ++, ), {, result, +=, coeff, [, i, ], [, j, ], *, pX, []
[;, j, ++, ), {, result, +=, coeff, [, i, ], [, j, ], *, pX, [, i, ], *]
[;, j, ++, ), {, result, +=, coeff, [, i, ], [, j, ], *, pX, [, i, ], *]
[++, ), {, result, +=, coeff, [, i, ], [, j, ], *, pX, [, i, ], *, pY, []
[[, i, ], [, j, ], *, pX, [, i, ], *, pY, [, j, ], ;, }, }, return]
[*, pY, [, j, ], ;, }, }, return, result, ;, }, public, BivariateFunction, partialDerivativeX, (, ), {, if, (]
[*, pY, [, j, ], ;, }, }, return, result, ;, }, public, BivariateFunction, partialDerivativeX, (, ), {, if, (]
[[, j, ], ;, }, }, return, result, ;, }, public, BivariateFunction, partialDerivativeX, (, ), {, if, (, partialDerivativeX, ==]
[;, }, }, return, result, ;, }, public, BivariateFunction, partialDerivativeX, (, ), {, if, (, partialDerivativeX, ==, null, ), {]
[}, public, BivariateFunction, partialDerivativeX, (, ), {, if, (, partialDerivativeX, ==, null, ), {, computePartialDerivatives, (, ), ;, }, return]
[null, ), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeX, ;, }, public, BivariateFunction, partialDerivativeY, (, ), {, if, (]
[null, ), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeX, ;, }, public, BivariateFunction, partialDerivativeY, (, ), {, if, (]
[{, computePartialDerivatives, (, ), ;, }, return, partialDerivativeX, ;, }, public, BivariateFunction, partialDerivativeY, (, ), {, if, (, partialDerivativeY, ==]
[), ;, }, return, partialDerivativeX, ;, }, public, BivariateFunction, partialDerivativeY, (, ), {, if, (, partialDerivativeY, ==, null, ), {]
[}, public, BivariateFunction, partialDerivativeY, (, ), {, if, (, partialDerivativeY, ==, null, ), {, computePartialDerivatives, (, ), ;, }, return]
[null, ), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeY, ;, }, public, BivariateFunction, partialDerivativeXX, (, ), {, if, (]
[null, ), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeY, ;, }, public, BivariateFunction, partialDerivativeXX, (, ), {, if, (]
[{, computePartialDerivatives, (, ), ;, }, return, partialDerivativeY, ;, }, public, BivariateFunction, partialDerivativeXX, (, ), {, if, (, partialDerivativeXX, ==]
[), ;, }, return, partialDerivativeY, ;, }, public, BivariateFunction, partialDerivativeXX, (, ), {, if, (, partialDerivativeXX, ==, null, ), {]
[}, public, BivariateFunction, partialDerivativeXX, (, ), {, if, (, partialDerivativeXX, ==, null, ), {, computePartialDerivatives, (, ), ;, }, return]
[null, ), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeXX, ;, }, public, BivariateFunction, partialDerivativeYY, (, ), {, if, (]
[null, ), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeXX, ;, }, public, BivariateFunction, partialDerivativeYY, (, ), {, if, (]
[{, computePartialDerivatives, (, ), ;, }, return, partialDerivativeXX, ;, }, public, BivariateFunction, partialDerivativeYY, (, ), {, if, (, partialDerivativeYY, ==]
[), ;, }, return, partialDerivativeXX, ;, }, public, BivariateFunction, partialDerivativeYY, (, ), {, if, (, partialDerivativeYY, ==, null, ), {]
[}, public, BivariateFunction, partialDerivativeYY, (, ), {, if, (, partialDerivativeYY, ==, null, ), {, computePartialDerivatives, (, ), ;, }, return]
[null, ), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeYY, ;, }, public, BivariateFunction, partialDerivativeXY, (, ), {, if, (]
[null, ), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeYY, ;, }, public, BivariateFunction, partialDerivativeXY, (, ), {, if, (]
[{, computePartialDerivatives, (, ), ;, }, return, partialDerivativeYY, ;, }, public, BivariateFunction, partialDerivativeXY, (, ), {, if, (, partialDerivativeXY, ==]
[), ;, }, return, partialDerivativeYY, ;, }, public, BivariateFunction, partialDerivativeXY, (, ), {, if, (, partialDerivativeXY, ==, null, ), {]
[}, public, BivariateFunction, partialDerivativeXY, (, ), {, if, (, partialDerivativeXY, ==, null, ), {, computePartialDerivatives, (, ), ;, }, return]
[;, }, return, partialDerivativeXY, ;, }, private, void, computePartialDerivatives, (, ), {, final, double, [, ], [, ], aX, =]
[partialDerivativeXY, ;, }, private, void, computePartialDerivatives, (, ), {, final, double, [, ], [, ], aX, =, new, double, []
[private, void, computePartialDerivatives, (, ), {, final, double, [, ], [, ], aX, =, new, double, [, N, ], []
[], aX, =, new, double, [, N, ], [, N, ], ;, final, double, [, ], [, ], aY, =]
[new, double, [, N, ], [, N, ], ;, final, double, [, ], [, ], aY, =, new, double, []
[N, ], [, N, ], ;, final, double, [, ], [, ], aY, =, new, double, [, N, ], []
[], aY, =, new, double, [, N, ], [, N, ], ;, final, double, [, ], [, ], aXX, =]
[new, double, [, N, ], [, N, ], ;, final, double, [, ], [, ], aXX, =, new, double, []
[N, ], [, N, ], ;, final, double, [, ], [, ], aXX, =, new, double, [, N, ], []
[], aXX, =, new, double, [, N, ], [, N, ], ;, final, double, [, ], [, ], aYY, =]
[new, double, [, N, ], [, N, ], ;, final, double, [, ], [, ], aYY, =, new, double, []
[N, ], [, N, ], ;, final, double, [, ], [, ], aYY, =, new, double, [, N, ], []
[], aYY, =, new, double, [, N, ], [, N, ], ;, final, double, [, ], [, ], aXY, =]
[new, double, [, N, ], [, N, ], ;, final, double, [, ], [, ], aXY, =, new, double, []
[N, ], [, N, ], ;, final, double, [, ], [, ], aXY, =, new, double, [, N, ], []
[[, ], [, ], aXY, =, new, double, [, N, ], [, N, ], ;, for, (, int, i, =]
[[, ], aXY, =, new, double, [, N, ], [, N, ], ;, for, (, int, i, =, 0, ;]
[[, ], aXY, =, new, double, [, N, ], [, N, ], ;, for, (, int, i, =, 0, ;]
[aXY, =, new, double, [, N, ], [, N, ], ;, for, (, int, i, =, 0, ;, i, <]
[new, double, [, N, ], [, N, ], ;, for, (, int, i, =, 0, ;, i, <, N, ;]
[new, double, [, N, ], [, N, ], ;, for, (, int, i, =, 0, ;, i, <, N, ;]
[for, (, int, i, =, 0, ;, i, <, N, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, N, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, N, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, N, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, N, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;]
[;, i, <, N, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;]
[{, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {, final, double, c, =]
[{, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {, final, double, c, =]
[{, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {, final, double, c, =]
[(, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {, final, double, c, =, a, []
[=, 0, ;, j, <, N, ;, j, ++, ), {, final, double, c, =, a, [, i, ], []
[j, <, N, ;, j, ++, ), {, final, double, c, =, a, [, i, ], [, j, ], ;]
[j, <, N, ;, j, ++, ), {, final, double, c, =, a, [, i, ], [, j, ], ;]
[j, <, N, ;, j, ++, ), {, final, double, c, =, a, [, i, ], [, j, ], ;]
[N, ;, j, ++, ), {, final, double, c, =, a, [, i, ], [, j, ], ;, aX, []
[++, ), {, final, double, c, =, a, [, i, ], [, j, ], ;, aX, [, i, ], []
[final, double, c, =, a, [, i, ], [, j, ], ;, aX, [, i, ], [, j, ], =]
[final, double, c, =, a, [, i, ], [, j, ], ;, aX, [, i, ], [, j, ], =]
[c, =, a, [, i, ], [, j, ], ;, aX, [, i, ], [, j, ], =, i, *]
[a, [, i, ], [, j, ], ;, aX, [, i, ], [, j, ], =, i, *, c, ;]
[a, [, i, ], [, j, ], ;, aX, [, i, ], [, j, ], =, i, *, c, ;]
[a, [, i, ], [, j, ], ;, aX, [, i, ], [, j, ], =, i, *, c, ;]
[i, ], [, j, ], ;, aX, [, i, ], [, j, ], =, i, *, c, ;, aY, []
[j, ], ;, aX, [, i, ], [, j, ], =, i, *, c, ;, aY, [, i, ], []
[aX, [, i, ], [, j, ], =, i, *, c, ;, aY, [, i, ], [, j, ], =]
[aX, [, i, ], [, j, ], =, i, *, c, ;, aY, [, i, ], [, j, ], =]
[i, ], [, j, ], =, i, *, c, ;, aY, [, i, ], [, j, ], =, j, *]
[[, j, ], =, i, *, c, ;, aY, [, i, ], [, j, ], =, j, *, c, ;]
[[, j, ], =, i, *, c, ;, aY, [, i, ], [, j, ], =, j, *, c, ;]
[[, j, ], =, i, *, c, ;, aY, [, i, ], [, j, ], =, j, *, c, ;]
[], =, i, *, c, ;, aY, [, i, ], [, j, ], =, j, *, c, ;, aXX, []
[*, c, ;, aY, [, i, ], [, j, ], =, j, *, c, ;, aXX, [, i, ], []
[aY, [, i, ], [, j, ], =, j, *, c, ;, aXX, [, i, ], [, j, ], =]
[aY, [, i, ], [, j, ], =, j, *, c, ;, aXX, [, i, ], [, j, ], =]
[[, i, ], [, j, ], =, j, *, c, ;, aXX, [, i, ], [, j, ], =, (]
[[, i, ], [, j, ], =, j, *, c, ;, aXX, [, i, ], [, j, ], =, (]
[], [, j, ], =, j, *, c, ;, aXX, [, i, ], [, j, ], =, (, i, -]
[], =, j, *, c, ;, aXX, [, i, ], [, j, ], =, (, i, -, 1, ), *]
[], =, j, *, c, ;, aXX, [, i, ], [, j, ], =, (, i, -, 1, ), *]
[], =, j, *, c, ;, aXX, [, i, ], [, j, ], =, (, i, -, 1, ), *]
[j, *, c, ;, aXX, [, i, ], [, j, ], =, (, i, -, 1, ), *, aX, []
[;, aXX, [, i, ], [, j, ], =, (, i, -, 1, ), *, aX, [, i, ], []
[i, ], [, j, ], =, (, i, -, 1, ), *, aX, [, i, ], [, j, ], ;]
[i, ], [, j, ], =, (, i, -, 1, ), *, aX, [, i, ], [, j, ], ;]
[i, ], [, j, ], =, (, i, -, 1, ), *, aX, [, i, ], [, j, ], ;]
[[, j, ], =, (, i, -, 1, ), *, aX, [, i, ], [, j, ], ;, aYY, []
[=, (, i, -, 1, ), *, aX, [, i, ], [, j, ], ;, aYY, [, i, ], []
[-, 1, ), *, aX, [, i, ], [, j, ], ;, aYY, [, i, ], [, j, ], =]
[-, 1, ), *, aX, [, i, ], [, j, ], ;, aYY, [, i, ], [, j, ], =]
[1, ), *, aX, [, i, ], [, j, ], ;, aYY, [, i, ], [, j, ], =, (]
[1, ), *, aX, [, i, ], [, j, ], ;, aYY, [, i, ], [, j, ], =, (]
[*, aX, [, i, ], [, j, ], ;, aYY, [, i, ], [, j, ], =, (, j, -]
[i, ], [, j, ], ;, aYY, [, i, ], [, j, ], =, (, j, -, 1, ), *]
[i, ], [, j, ], ;, aYY, [, i, ], [, j, ], =, (, j, -, 1, ), *]
[i, ], [, j, ], ;, aYY, [, i, ], [, j, ], =, (, j, -, 1, ), *]
[[, j, ], ;, aYY, [, i, ], [, j, ], =, (, j, -, 1, ), *, aY, []
[;, aYY, [, i, ], [, j, ], =, (, j, -, 1, ), *, aY, [, i, ], []
[i, ], [, j, ], =, (, j, -, 1, ), *, aY, [, i, ], [, j, ], ;]
[i, ], [, j, ], =, (, j, -, 1, ), *, aY, [, i, ], [, j, ], ;]
[i, ], [, j, ], =, (, j, -, 1, ), *, aY, [, i, ], [, j, ], ;]
[[, j, ], =, (, j, -, 1, ), *, aY, [, i, ], [, j, ], ;, aXY, []
[=, (, j, -, 1, ), *, aY, [, i, ], [, j, ], ;, aXY, [, i, ], []
[-, 1, ), *, aY, [, i, ], [, j, ], ;, aXY, [, i, ], [, j, ], =]
[-, 1, ), *, aY, [, i, ], [, j, ], ;, aXY, [, i, ], [, j, ], =]
[), *, aY, [, i, ], [, j, ], ;, aXY, [, i, ], [, j, ], =, j, *]
[), *, aY, [, i, ], [, j, ], ;, aXY, [, i, ], [, j, ], =, j, *]
[), *, aY, [, i, ], [, j, ], ;, aXY, [, i, ], [, j, ], =, j, *]
[aY, [, i, ], [, j, ], ;, aXY, [, i, ], [, j, ], =, j, *, aX, []
[], [, j, ], ;, aXY, [, i, ], [, j, ], =, j, *, aX, [, i, ], []
[aXY, [, i, ], [, j, ], =, j, *, aX, [, i, ], [, j, ], ;, }, }]
[i, ], [, j, ], =, j, *, aX, [, i, ], [, j, ], ;, }, }, partialDerivativeX, =]
[new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y, ), {, final, double, x2, =]
[new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y, ), {, final, double, x2, =]
[(, ), {, public, double, value, (, double, x, ,, double, y, ), {, final, double, x2, =, x, *]
[x, ,, double, y, ), {, final, double, x2, =, x, *, x, ;, final, double, [, ], pX, =]
[,, double, y, ), {, final, double, x2, =, x, *, x, ;, final, double, [, ], pX, =, {]
[y, ), {, final, double, x2, =, x, *, x, ;, final, double, [, ], pX, =, {, 0, ,]
[{, final, double, x2, =, x, *, x, ;, final, double, [, ], pX, =, {, 0, ,, 1, ,]
[double, x2, =, x, *, x, ;, final, double, [, ], pX, =, {, 0, ,, 1, ,, x, ,]
[final, double, [, ], pX, =, {, 0, ,, 1, ,, x, ,, x2, }, ;, final, double, y2, =]
[final, double, [, ], pX, =, {, 0, ,, 1, ,, x, ,, x2, }, ;, final, double, y2, =]
[[, ], pX, =, {, 0, ,, 1, ,, x, ,, x2, }, ;, final, double, y2, =, y, *]
[,, 1, ,, x, ,, x2, }, ;, final, double, y2, =, y, *, y, ;, final, double, y3, =]
[,, 1, ,, x, ,, x2, }, ;, final, double, y2, =, y, *, y, ;, final, double, y3, =]
[,, x, ,, x2, }, ;, final, double, y2, =, y, *, y, ;, final, double, y3, =, y2, *]
[y2, =, y, *, y, ;, final, double, y3, =, y2, *, y, ;, final, double, [, ], pY, =]
[=, y, *, y, ;, final, double, y3, =, y2, *, y, ;, final, double, [, ], pY, =, {]
[*, y, ;, final, double, y3, =, y2, *, y, ;, final, double, [, ], pY, =, {, 1, ,]
[;, final, double, y3, =, y2, *, y, ;, final, double, [, ], pY, =, {, 1, ,, y, ,]
[double, y3, =, y2, *, y, ;, final, double, [, ], pY, =, {, 1, ,, y, ,, y2, ,]
[*, y, ;, final, double, [, ], pY, =, {, 1, ,, y, ,, y2, ,, y3, }, ;, return]
[;, final, double, [, ], pY, =, {, 1, ,, y, ,, y2, ,, y3, }, ;, return, apply, (]
[double, [, ], pY, =, {, 1, ,, y, ,, y2, ,, y3, }, ;, return, apply, (, pX, ,]
[], pY, =, {, 1, ,, y, ,, y2, ,, y3, }, ;, return, apply, (, pX, ,, pY, ,]
[y, ,, y2, ,, y3, }, ;, return, apply, (, pX, ,, pY, ,, aX, ), ;, }, }, ;]
[y2, ,, y3, }, ;, return, apply, (, pX, ,, pY, ,, aX, ), ;, }, }, ;, partialDerivativeY, =]
[new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y, ), {, final, double, x2, =]
[new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y, ), {, final, double, x2, =]
[(, ), {, public, double, value, (, double, x, ,, double, y, ), {, final, double, x2, =, x, *]
[(, double, x, ,, double, y, ), {, final, double, x2, =, x, *, x, ;, final, double, x3, =]
[(, double, x, ,, double, y, ), {, final, double, x2, =, x, *, x, ;, final, double, x3, =]
[x, ,, double, y, ), {, final, double, x2, =, x, *, x, ;, final, double, x3, =, x2, *]
[x2, =, x, *, x, ;, final, double, x3, =, x2, *, x, ;, final, double, [, ], pX, =]
[=, x, *, x, ;, final, double, x3, =, x2, *, x, ;, final, double, [, ], pX, =, {]
[*, x, ;, final, double, x3, =, x2, *, x, ;, final, double, [, ], pX, =, {, 1, ,]
[;, final, double, x3, =, x2, *, x, ;, final, double, [, ], pX, =, {, 1, ,, x, ,]
[double, x3, =, x2, *, x, ;, final, double, [, ], pX, =, {, 1, ,, x, ,, x2, ,]
[final, double, [, ], pX, =, {, 1, ,, x, ,, x2, ,, x3, }, ;, final, double, y2, =]
[final, double, [, ], pX, =, {, 1, ,, x, ,, x2, ,, x3, }, ;, final, double, y2, =]
[[, ], pX, =, {, 1, ,, x, ,, x2, ,, x3, }, ;, final, double, y2, =, y, *]
[,, x2, ,, x3, }, ;, final, double, y2, =, y, *, y, ;, final, double, [, ], pY, =]
[x2, ,, x3, }, ;, final, double, y2, =, y, *, y, ;, final, double, [, ], pY, =, {]
[x3, }, ;, final, double, y2, =, y, *, y, ;, final, double, [, ], pY, =, {, 0, ,]
[;, final, double, y2, =, y, *, y, ;, final, double, [, ], pY, =, {, 0, ,, 1, ,]
[double, y2, =, y, *, y, ;, final, double, [, ], pY, =, {, 0, ,, 1, ,, y, ,]
[*, y, ;, final, double, [, ], pY, =, {, 0, ,, 1, ,, y, ,, y2, }, ;, return]
[;, final, double, [, ], pY, =, {, 0, ,, 1, ,, y, ,, y2, }, ;, return, apply, (]
[double, [, ], pY, =, {, 0, ,, 1, ,, y, ,, y2, }, ;, return, apply, (, pX, ,]
[], pY, =, {, 0, ,, 1, ,, y, ,, y2, }, ;, return, apply, (, pX, ,, pY, ,]
[1, ,, y, ,, y2, }, ;, return, apply, (, pX, ,, pY, ,, aY, ), ;, }, }, ;]
[y, ,, y2, }, ;, return, apply, (, pX, ,, pY, ,, aY, ), ;, }, }, ;, partialDerivativeXX, =]
[(, ), {, public, double, value, (, double, x, ,, double, y, ), {, final, double, [, ], pX, =]
[), {, public, double, value, (, double, x, ,, double, y, ), {, final, double, [, ], pX, =, {]
[public, double, value, (, double, x, ,, double, y, ), {, final, double, [, ], pX, =, {, 0, ,]
[value, (, double, x, ,, double, y, ), {, final, double, [, ], pX, =, {, 0, ,, 0, ,]
[double, x, ,, double, y, ), {, final, double, [, ], pX, =, {, 0, ,, 0, ,, 1, ,]
[final, double, [, ], pX, =, {, 0, ,, 0, ,, 1, ,, x, }, ;, final, double, y2, =]
[final, double, [, ], pX, =, {, 0, ,, 0, ,, 1, ,, x, }, ;, final, double, y2, =]
[[, ], pX, =, {, 0, ,, 0, ,, 1, ,, x, }, ;, final, double, y2, =, y, *]
[,, 0, ,, 1, ,, x, }, ;, final, double, y2, =, y, *, y, ;, final, double, y3, =]
[,, 0, ,, 1, ,, x, }, ;, final, double, y2, =, y, *, y, ;, final, double, y3, =]
[,, 1, ,, x, }, ;, final, double, y2, =, y, *, y, ;, final, double, y3, =, y2, *]
[y2, =, y, *, y, ;, final, double, y3, =, y2, *, y, ;, final, double, [, ], pY, =]
[=, y, *, y, ;, final, double, y3, =, y2, *, y, ;, final, double, [, ], pY, =, {]
[*, y, ;, final, double, y3, =, y2, *, y, ;, final, double, [, ], pY, =, {, 1, ,]
[;, final, double, y3, =, y2, *, y, ;, final, double, [, ], pY, =, {, 1, ,, y, ,]
[double, y3, =, y2, *, y, ;, final, double, [, ], pY, =, {, 1, ,, y, ,, y2, ,]
[*, y, ;, final, double, [, ], pY, =, {, 1, ,, y, ,, y2, ,, y3, }, ;, return]
[;, final, double, [, ], pY, =, {, 1, ,, y, ,, y2, ,, y3, }, ;, return, apply, (]
[double, [, ], pY, =, {, 1, ,, y, ,, y2, ,, y3, }, ;, return, apply, (, pX, ,]
[], pY, =, {, 1, ,, y, ,, y2, ,, y3, }, ;, return, apply, (, pX, ,, pY, ,]
[y, ,, y2, ,, y3, }, ;, return, apply, (, pX, ,, pY, ,, aXX, ), ;, }, }, ;]
[y2, ,, y3, }, ;, return, apply, (, pX, ,, pY, ,, aXX, ), ;, }, }, ;, partialDerivativeYY, =]
[new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y, ), {, final, double, x2, =]
[new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y, ), {, final, double, x2, =]
[(, ), {, public, double, value, (, double, x, ,, double, y, ), {, final, double, x2, =, x, *]
[(, double, x, ,, double, y, ), {, final, double, x2, =, x, *, x, ;, final, double, x3, =]
[(, double, x, ,, double, y, ), {, final, double, x2, =, x, *, x, ;, final, double, x3, =]
[x, ,, double, y, ), {, final, double, x2, =, x, *, x, ;, final, double, x3, =, x2, *]
[x2, =, x, *, x, ;, final, double, x3, =, x2, *, x, ;, final, double, [, ], pX, =]
[=, x, *, x, ;, final, double, x3, =, x2, *, x, ;, final, double, [, ], pX, =, {]
[*, x, ;, final, double, x3, =, x2, *, x, ;, final, double, [, ], pX, =, {, 1, ,]
[;, final, double, x3, =, x2, *, x, ;, final, double, [, ], pX, =, {, 1, ,, x, ,]
[double, x3, =, x2, *, x, ;, final, double, [, ], pX, =, {, 1, ,, x, ,, x2, ,]
[[, ], pX, =, {, 1, ,, x, ,, x2, ,, x3, }, ;, final, double, [, ], pY, =]
[], pX, =, {, 1, ,, x, ,, x2, ,, x3, }, ;, final, double, [, ], pY, =, {]
[=, {, 1, ,, x, ,, x2, ,, x3, }, ;, final, double, [, ], pY, =, {, 0, ,]
[1, ,, x, ,, x2, ,, x3, }, ;, final, double, [, ], pY, =, {, 0, ,, 0, ,]
[x, ,, x2, ,, x3, }, ;, final, double, [, ], pY, =, {, 0, ,, 0, ,, 1, ,]
[x3, }, ;, final, double, [, ], pY, =, {, 0, ,, 0, ,, 1, ,, y, }, ;, return]
[;, final, double, [, ], pY, =, {, 0, ,, 0, ,, 1, ,, y, }, ;, return, apply, (]
[double, [, ], pY, =, {, 0, ,, 0, ,, 1, ,, y, }, ;, return, apply, (, pX, ,]
[], pY, =, {, 0, ,, 0, ,, 1, ,, y, }, ;, return, apply, (, pX, ,, pY, ,]
[0, ,, 1, ,, y, }, ;, return, apply, (, pX, ,, pY, ,, aYY, ), ;, }, }, ;]
[1, ,, y, }, ;, return, apply, (, pX, ,, pY, ,, aYY, ), ;, }, }, ;, partialDerivativeXY, =]
[new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y, ), {, final, double, x2, =]
[new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y, ), {, final, double, x2, =]
[(, ), {, public, double, value, (, double, x, ,, double, y, ), {, final, double, x2, =, x, *]
[x, ,, double, y, ), {, final, double, x2, =, x, *, x, ;, final, double, [, ], pX, =]
[,, double, y, ), {, final, double, x2, =, x, *, x, ;, final, double, [, ], pX, =, {]
[y, ), {, final, double, x2, =, x, *, x, ;, final, double, [, ], pX, =, {, 0, ,]
[{, final, double, x2, =, x, *, x, ;, final, double, [, ], pX, =, {, 0, ,, 1, ,]
[double, x2, =, x, *, x, ;, final, double, [, ], pX, =, {, 0, ,, 1, ,, x, ,]
[final, double, [, ], pX, =, {, 0, ,, 1, ,, x, ,, x2, }, ;, final, double, y2, =]
[final, double, [, ], pX, =, {, 0, ,, 1, ,, x, ,, x2, }, ;, final, double, y2, =]
[[, ], pX, =, {, 0, ,, 1, ,, x, ,, x2, }, ;, final, double, y2, =, y, *]
[,, x, ,, x2, }, ;, final, double, y2, =, y, *, y, ;, final, double, [, ], pY, =]
[x, ,, x2, }, ;, final, double, y2, =, y, *, y, ;, final, double, [, ], pY, =, {]
[x2, }, ;, final, double, y2, =, y, *, y, ;, final, double, [, ], pY, =, {, 0, ,]
[;, final, double, y2, =, y, *, y, ;, final, double, [, ], pY, =, {, 0, ,, 1, ,]
[double, y2, =, y, *, y, ;, final, double, [, ], pY, =, {, 0, ,, 1, ,, y, ,]
[*, y, ;, final, double, [, ], pY, =, {, 0, ,, 1, ,, y, ,, y2, }, ;, return]
[;, final, double, [, ], pY, =, {, 0, ,, 1, ,, y, ,, y2, }, ;, return, apply, (]
[double, [, ], pY, =, {, 0, ,, 1, ,, y, ,, y2, }, ;, return, apply, (, pX, ,]
[], pY, =, {, 0, ,, 1, ,, y, ,, y2, }, ;, return, apply, (, pX, ,, pY, ,]
