[;, public, static, final, double, LANCZOS_G, =, 607.0, /, 128.0, ;, private, static, final, double, DEFAULT_EPSILON, =, 10e-15, ;, private]
[;, private, static, final, double, DEFAULT_EPSILON, =, 10e-15, ;, private, static, final, double, [, ], LANCZOS, =, {, 0.99999999999999709182, ,]
[/, 128.0, ;, private, static, final, double, DEFAULT_EPSILON, =, 10e-15, ;, private, static, final, double, [, ], LANCZOS, =, {]
[;, private, static, final, double, DEFAULT_EPSILON, =, 10e-15, ;, private, static, final, double, [, ], LANCZOS, =, {, 0.99999999999999709182, ,]
[;, private, static, final, double, [, ], LANCZOS, =, {, 0.99999999999999709182, ,, 57.156235665862923517, ,, -, 59.597960355475491248, ,, 14.136097974741747174, ,, -]
[;, private, static, final, double, HALF_LOG_2_PI, =, 0.5, *, FastMath, ., log, (, 2.0, *, FastMath, ., PI, ), ;]
[,, 57.156235665862923517, ,, -, 59.597960355475491248, ,, 14.136097974741747174, ,, -, 0.49191381609762019978, ,, .33994649984811888699e-4, ,, .46523628927048575665e-4, ,, -, .98374475304879564677e-4, ,, .15808870322491248884e-3, ,]
[,, -, 59.597960355475491248, ,, 14.136097974741747174, ,, -, 0.49191381609762019978, ,, .33994649984811888699e-4, ,, .46523628927048575665e-4, ,, -, .98374475304879564677e-4, ,, .15808870322491248884e-3, ,, -, .21026444172410488319e-3]
[,, 14.136097974741747174, ,, -, 0.49191381609762019978, ,, .33994649984811888699e-4, ,, .46523628927048575665e-4, ,, -, .98374475304879564677e-4, ,, .15808870322491248884e-3, ,, -, .21026444172410488319e-3, ,, .21743961811521264320e-3, ,]
[,, 14.136097974741747174, ,, -, 0.49191381609762019978, ,, .33994649984811888699e-4, ,, .46523628927048575665e-4, ,, -, .98374475304879564677e-4, ,, .15808870322491248884e-3, ,, -, .21026444172410488319e-3, ,, .21743961811521264320e-3, ,]
[,, -, 0.49191381609762019978, ,, .33994649984811888699e-4, ,, .46523628927048575665e-4, ,, -, .98374475304879564677e-4, ,, .15808870322491248884e-3, ,, -, .21026444172410488319e-3, ,, .21743961811521264320e-3, ,, -, .16431810653676389022e-3]
[,, .33994649984811888699e-4, ,, .46523628927048575665e-4, ,, -, .98374475304879564677e-4, ,, .15808870322491248884e-3, ,, -, .21026444172410488319e-3, ,, .21743961811521264320e-3, ,, -, .16431810653676389022e-3, ,, .84418223983852743293e-4, ,]
[,, .33994649984811888699e-4, ,, .46523628927048575665e-4, ,, -, .98374475304879564677e-4, ,, .15808870322491248884e-3, ,, -, .21026444172410488319e-3, ,, .21743961811521264320e-3, ,, -, .16431810653676389022e-3, ,, .84418223983852743293e-4, ,]
[,, .46523628927048575665e-4, ,, -, .98374475304879564677e-4, ,, .15808870322491248884e-3, ,, -, .21026444172410488319e-3, ,, .21743961811521264320e-3, ,, -, .16431810653676389022e-3, ,, .84418223983852743293e-4, ,, -, .26190838401581408670e-4]
[,, -, .98374475304879564677e-4, ,, .15808870322491248884e-3, ,, -, .21026444172410488319e-3, ,, .21743961811521264320e-3, ,, -, .16431810653676389022e-3, ,, .84418223983852743293e-4, ,, -, .26190838401581408670e-4, ,, .36899182659531622704e-5]
[,, .15808870322491248884e-3, ,, -, .21026444172410488319e-3, ,, .21743961811521264320e-3, ,, -, .16431810653676389022e-3, ,, .84418223983852743293e-4, ,, -, .26190838401581408670e-4, ,, .36899182659531622704e-5, ,, }, ;]
[,, .15808870322491248884e-3, ,, -, .21026444172410488319e-3, ,, .21743961811521264320e-3, ,, -, .16431810653676389022e-3, ,, .84418223983852743293e-4, ,, -, .26190838401581408670e-4, ,, .36899182659531622704e-5, ,, }, ;]
[,, -, .21026444172410488319e-3, ,, .21743961811521264320e-3, ,, -, .16431810653676389022e-3, ,, .84418223983852743293e-4, ,, -, .26190838401581408670e-4, ,, .36899182659531622704e-5, ,, }, ;, private, static]
[,, .21743961811521264320e-3, ,, -, .16431810653676389022e-3, ,, .84418223983852743293e-4, ,, -, .26190838401581408670e-4, ,, .36899182659531622704e-5, ,, }, ;, private, static, final, double, HALF_LOG_2_PI]
[,, .21743961811521264320e-3, ,, -, .16431810653676389022e-3, ,, .84418223983852743293e-4, ,, -, .26190838401581408670e-4, ,, .36899182659531622704e-5, ,, }, ;, private, static, final, double, HALF_LOG_2_PI]
[,, -, .16431810653676389022e-3, ,, .84418223983852743293e-4, ,, -, .26190838401581408670e-4, ,, .36899182659531622704e-5, ,, }, ;, private, static, final, double, HALF_LOG_2_PI, =, 0.5]
[,, .84418223983852743293e-4, ,, -, .26190838401581408670e-4, ,, .36899182659531622704e-5, ,, }, ;, private, static, final, double, HALF_LOG_2_PI, =, 0.5, *, FastMath, .]
[,, .84418223983852743293e-4, ,, -, .26190838401581408670e-4, ,, .36899182659531622704e-5, ,, }, ;, private, static, final, double, HALF_LOG_2_PI, =, 0.5, *, FastMath, .]
[,, -, .26190838401581408670e-4, ,, .36899182659531622704e-5, ,, }, ;, private, static, final, double, HALF_LOG_2_PI, =, 0.5, *, FastMath, ., log, (]
[,, .36899182659531622704e-5, ,, }, ;, private, static, final, double, HALF_LOG_2_PI, =, 0.5, *, FastMath, ., log, (, 2.0, *, FastMath]
[,, .36899182659531622704e-5, ,, }, ;, private, static, final, double, HALF_LOG_2_PI, =, 0.5, *, FastMath, ., log, (, 2.0, *, FastMath]
[,, }, ;, private, static, final, double, HALF_LOG_2_PI, =, 0.5, *, FastMath, ., log, (, 2.0, *, FastMath, ., PI]
[;, private, static, final, double, SQRT_TWO_PI, =, 2.506628274631000502, ;, private, static, final, double, C_LIMIT, =, 49, ;, private, static, final]
[*, FastMath, ., log, (, 2.0, *, FastMath, ., PI, ), ;, private, static, final, double, SQRT_TWO_PI, =, 2.506628274631000502, ;]
[;, private, static, final, double, SQRT_TWO_PI, =, 2.506628274631000502, ;, private, static, final, double, C_LIMIT, =, 49, ;, private, static, final]
[., log, (, 2.0, *, FastMath, ., PI, ), ;, private, static, final, double, SQRT_TWO_PI, =, 2.506628274631000502, ;, private, static]
[), ;, private, static, final, double, SQRT_TWO_PI, =, 2.506628274631000502, ;, private, static, final, double, C_LIMIT, =, 49, ;, private, static]
[*, FastMath, ., PI, ), ;, private, static, final, double, SQRT_TWO_PI, =, 2.506628274631000502, ;, private, static, final, double, C_LIMIT, =]
[), ;, private, static, final, double, SQRT_TWO_PI, =, 2.506628274631000502, ;, private, static, final, double, C_LIMIT, =, 49, ;, private, static]
[., PI, ), ;, private, static, final, double, SQRT_TWO_PI, =, 2.506628274631000502, ;, private, static, final, double, C_LIMIT, =, 49, ;]
[;, private, static, final, double, C_LIMIT, =, 49, ;, private, static, final, double, S_LIMIT, =, 1e-5, ;, private, static, final]
[;, private, static, final, double, S_LIMIT, =, 1e-5, ;, private, static, final, double, INV_GAMMA1P_M1_A0, =, .611609510448141581788E-08, ;, private, static, final]
[;, private, static, final, double, INV_GAMMA1P_M1_A0, =, .611609510448141581788E-08, ;, private, static, final, double, INV_GAMMA1P_M1_A1, =, .624730830116465516210E-08, ;, private, static, final]
[;, private, static, final, double, INV_GAMMA1P_M1_A1, =, .624730830116465516210E-08, ;, private, static, final, double, INV_GAMMA1P_M1_B1, =, .203610414066806987300E+00, ;, private, static, final]
[;, private, static, final, double, INV_GAMMA1P_M1_B1, =, .203610414066806987300E+00, ;, private, static, final, double, INV_GAMMA1P_M1_B2, =, .266205348428949217746E-01, ;, private, static, final]
[;, private, static, final, double, INV_GAMMA1P_M1_B2, =, .266205348428949217746E-01, ;, private, static, final, double, INV_GAMMA1P_M1_B3, =, .493944979382446875238E-03, ;, private, static, final]
[;, private, static, final, double, INV_GAMMA1P_M1_B3, =, .493944979382446875238E-03, ;, private, static, final, double, INV_GAMMA1P_M1_B4, =, -, .851419432440314906588E-05, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_B4, =, -, .851419432440314906588E-05, ;, private, static, final, double, INV_GAMMA1P_M1_B5, =, -, .643045481779353022248E-05, ;, private]
[;, private, static, final, double, INV_GAMMA1P_M1_B5, =, -, .643045481779353022248E-05, ;, private, static, final, double, INV_GAMMA1P_M1_B6, =, .992641840672773722196E-06, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_B5, =, -, .643045481779353022248E-05, ;, private, static, final, double, INV_GAMMA1P_M1_B6, =, .992641840672773722196E-06, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_B6, =, .992641840672773722196E-06, ;, private, static, final, double, INV_GAMMA1P_M1_B7, =, -, .607761895722825260739E-07, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_B6, =, .992641840672773722196E-06, ;, private, static, final, double, INV_GAMMA1P_M1_B7, =, -, .607761895722825260739E-07, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_B7, =, -, .607761895722825260739E-07, ;, private, static, final, double, INV_GAMMA1P_M1_B8, =, .195755836614639731882E-09, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_B8, =, .195755836614639731882E-09, ;, private, static, final, double, INV_GAMMA1P_M1_P0, =, .6116095104481415817861E-08, ;, private, static, final]
[;, private, static, final, double, INV_GAMMA1P_M1_B8, =, .195755836614639731882E-09, ;, private, static, final, double, INV_GAMMA1P_M1_P0, =, .6116095104481415817861E-08, ;, private, static, final]
[;, private, static, final, double, INV_GAMMA1P_M1_P0, =, .6116095104481415817861E-08, ;, private, static, final, double, INV_GAMMA1P_M1_P1, =, .6871674113067198736152E-08, ;, private, static, final]
[;, private, static, final, double, INV_GAMMA1P_M1_P1, =, .6871674113067198736152E-08, ;, private, static, final, double, INV_GAMMA1P_M1_P2, =, .6820161668496170657918E-09, ;, private, static, final]
[;, private, static, final, double, INV_GAMMA1P_M1_P2, =, .6820161668496170657918E-09, ;, private, static, final, double, INV_GAMMA1P_M1_P3, =, .4686843322948848031080E-10, ;, private, static, final]
[;, private, static, final, double, INV_GAMMA1P_M1_P3, =, .4686843322948848031080E-10, ;, private, static, final, double, INV_GAMMA1P_M1_P4, =, .1572833027710446286995E-11, ;, private, static, final]
[;, private, static, final, double, INV_GAMMA1P_M1_P4, =, .1572833027710446286995E-11, ;, private, static, final, double, INV_GAMMA1P_M1_P5, =, -, .1249441572276366213222E-12, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_P5, =, -, .1249441572276366213222E-12, ;, private, static, final, double, INV_GAMMA1P_M1_P6, =, .4343529937408594255178E-14, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_P6, =, .4343529937408594255178E-14, ;, private, static, final, double, INV_GAMMA1P_M1_Q1, =, .3056961078365221025009E+00, ;, private, static, final]
[;, private, static, final, double, INV_GAMMA1P_M1_P6, =, .4343529937408594255178E-14, ;, private, static, final, double, INV_GAMMA1P_M1_Q1, =, .3056961078365221025009E+00, ;, private, static, final]
[;, private, static, final, double, INV_GAMMA1P_M1_Q1, =, .3056961078365221025009E+00, ;, private, static, final, double, INV_GAMMA1P_M1_Q2, =, .5464213086042296536016E-01, ;, private, static, final]
[;, private, static, final, double, INV_GAMMA1P_M1_Q2, =, .5464213086042296536016E-01, ;, private, static, final, double, INV_GAMMA1P_M1_Q3, =, .4956830093825887312020E-02, ;, private, static, final]
[;, private, static, final, double, INV_GAMMA1P_M1_Q3, =, .4956830093825887312020E-02, ;, private, static, final, double, INV_GAMMA1P_M1_Q4, =, .2692369466186361192876E-03, ;, private, static, final]
[;, private, static, final, double, INV_GAMMA1P_M1_Q4, =, .2692369466186361192876E-03, ;, private, static, final, double, INV_GAMMA1P_M1_C, =, -, .422784335098467139393487909917598E+00, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_C, =, -, .422784335098467139393487909917598E+00, ;, private, static, final, double, INV_GAMMA1P_M1_C0, =, .577215664901532860606512090082402E+00, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_C0, =, .577215664901532860606512090082402E+00, ;, private, static, final, double, INV_GAMMA1P_M1_C1, =, -, .655878071520253881077019515145390E+00, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_C0, =, .577215664901532860606512090082402E+00, ;, private, static, final, double, INV_GAMMA1P_M1_C1, =, -, .655878071520253881077019515145390E+00, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_C1, =, -, .655878071520253881077019515145390E+00, ;, private, static, final, double, INV_GAMMA1P_M1_C2, =, -, .420026350340952355290039348754298E-01, ;, private]
[;, private, static, final, double, INV_GAMMA1P_M1_C2, =, -, .420026350340952355290039348754298E-01, ;, private, static, final, double, INV_GAMMA1P_M1_C3, =, .166538611382291489501700795102105E+00, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_C2, =, -, .420026350340952355290039348754298E-01, ;, private, static, final, double, INV_GAMMA1P_M1_C3, =, .166538611382291489501700795102105E+00, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_C3, =, .166538611382291489501700795102105E+00, ;, private, static, final, double, INV_GAMMA1P_M1_C4, =, -, .421977345555443367482083012891874E-01, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_C3, =, .166538611382291489501700795102105E+00, ;, private, static, final, double, INV_GAMMA1P_M1_C4, =, -, .421977345555443367482083012891874E-01, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_C4, =, -, .421977345555443367482083012891874E-01, ;, private, static, final, double, INV_GAMMA1P_M1_C5, =, -, .962197152787697356211492167234820E-02, ;, private]
[;, private, static, final, double, INV_GAMMA1P_M1_C5, =, -, .962197152787697356211492167234820E-02, ;, private, static, final, double, INV_GAMMA1P_M1_C6, =, .721894324666309954239501034044657E-02, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_C5, =, -, .962197152787697356211492167234820E-02, ;, private, static, final, double, INV_GAMMA1P_M1_C6, =, .721894324666309954239501034044657E-02, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_C6, =, .721894324666309954239501034044657E-02, ;, private, static, final, double, INV_GAMMA1P_M1_C7, =, -, .116516759185906511211397108401839E-02, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_C6, =, .721894324666309954239501034044657E-02, ;, private, static, final, double, INV_GAMMA1P_M1_C7, =, -, .116516759185906511211397108401839E-02, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_C7, =, -, .116516759185906511211397108401839E-02, ;, private, static, final, double, INV_GAMMA1P_M1_C8, =, -, .215241674114950972815729963053648E-03, ;, private]
[;, private, static, final, double, INV_GAMMA1P_M1_C8, =, -, .215241674114950972815729963053648E-03, ;, private, static, final, double, INV_GAMMA1P_M1_C9, =, .128050282388116186153198626328164E-03, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_C8, =, -, .215241674114950972815729963053648E-03, ;, private, static, final, double, INV_GAMMA1P_M1_C9, =, .128050282388116186153198626328164E-03, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_C9, =, .128050282388116186153198626328164E-03, ;, private, static, final, double, INV_GAMMA1P_M1_C10, =, -, .201348547807882386556893914210218E-04, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_C9, =, .128050282388116186153198626328164E-03, ;, private, static, final, double, INV_GAMMA1P_M1_C10, =, -, .201348547807882386556893914210218E-04, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_C10, =, -, .201348547807882386556893914210218E-04, ;, private, static, final, double, INV_GAMMA1P_M1_C11, =, -, .125049348214267065734535947383309E-05, ;, private]
[;, private, static, final, double, INV_GAMMA1P_M1_C11, =, -, .125049348214267065734535947383309E-05, ;, private, static, final, double, INV_GAMMA1P_M1_C12, =, .113302723198169588237412962033074E-05, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_C11, =, -, .125049348214267065734535947383309E-05, ;, private, static, final, double, INV_GAMMA1P_M1_C12, =, .113302723198169588237412962033074E-05, ;, private, static]
[;, private, static, final, double, INV_GAMMA1P_M1_C12, =, .113302723198169588237412962033074E-05, ;, private, static, final, double, INV_GAMMA1P_M1_C13, =, -, .205633841697760710345015413002057E-06, ;, private, Gamma]
[;, private, static, final, double, INV_GAMMA1P_M1_C12, =, .113302723198169588237412962033074E-05, ;, private, static, final, double, INV_GAMMA1P_M1_C13, =, -, .205633841697760710345015413002057E-06, ;, private, Gamma]
[;, private, static, final, double, INV_GAMMA1P_M1_C13, =, -, .205633841697760710345015413002057E-06, ;, private, Gamma, (, ), {, }, public, static, double, logGamma]
[;, private, Gamma, (, ), {, }, public, static, double, logGamma, (, double, x, ), {, double, ret, ;, if]
[;, private, Gamma, (, ), {, }, public, static, double, logGamma, (, double, x, ), {, double, ret, ;, if]
[), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, <, 0.5, ), {, return, logGamma1p, (]
[||, (, x, <=, 0.0, ), ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, <]
[., isNaN, (, x, ), ||, (, x, <=, 0.0, ), ), {, ret, =, Double, ., NaN, ;, }]
[), ||, (, x, <=, 0.0, ), ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x]
[), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, <, 0.5, ), {, return, logGamma1p, (]
[), ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, <, 0.5, ), {, return, logGamma1p]
[<=, 0.0, ), ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, <, 0.5, ), {]
[), ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, <, 0.5, ), {, return, logGamma1p]
[=, Double, ., NaN, ;, }, else, if, (, x, <, 0.5, ), {, return, logGamma1p, (, x, ), -]
[;, }, else, if, (, x, <, 0.5, ), {, return, logGamma1p, (, x, ), -, FastMath, ., log, (]
[., NaN, ;, }, else, if, (, x, <, 0.5, ), {, return, logGamma1p, (, x, ), -, FastMath, .]
[), {, return, logGamma1p, (, x, ), -, FastMath, ., log, (, x, ), ;, }, else, if, (, x]
[<, 0.5, ), {, return, logGamma1p, (, x, ), -, FastMath, ., log, (, x, ), ;, }, else, if]
[), {, return, logGamma1p, (, x, ), -, FastMath, ., log, (, x, ), ;, }, else, if, (, x]
[;, }, else, if, (, x, <=, 2.5, ), {, return, logGamma1p, (, (, x, -, 0.5, ), -, 0.5]
[-, FastMath, ., log, (, x, ), ;, }, else, if, (, x, <=, 2.5, ), {, return, logGamma1p, (]
[), -, FastMath, ., log, (, x, ), ;, }, else, if, (, x, <=, 2.5, ), {, return, logGamma1p]
[;, }, else, if, (, x, <=, 2.5, ), {, return, logGamma1p, (, (, x, -, 0.5, ), -, 0.5]
[., log, (, x, ), ;, }, else, if, (, x, <=, 2.5, ), {, return, logGamma1p, (, (, x]
[), ;, }, else, if, (, x, <=, 2.5, ), {, return, logGamma1p, (, (, x, -, 0.5, ), -]
[), {, return, logGamma1p, (, (, x, -, 0.5, ), -, 0.5, ), ;, }, else, if, (, x, <=]
[<=, 2.5, ), {, return, logGamma1p, (, (, x, -, 0.5, ), -, 0.5, ), ;, }, else, if, (]
[), {, return, logGamma1p, (, (, x, -, 0.5, ), -, 0.5, ), ;, }, else, if, (, x, <=]
[;, }, else, if, (, x, <=, 8.0, ), {, final, int, n, =, (, int, ), FastMath, ., floor]
[), ;, }, else, if, (, x, <=, 8.0, ), {, final, int, n, =, (, int, ), FastMath, .]
[-, 0.5, ), ;, }, else, if, (, x, <=, 8.0, ), {, final, int, n, =, (, int, )]
[), -, 0.5, ), ;, }, else, if, (, x, <=, 8.0, ), {, final, int, n, =, (, int]
[-, 0.5, ), -, 0.5, ), ;, }, else, if, (, x, <=, 8.0, ), {, final, int, n, =]
[), -, 0.5, ), ;, }, else, if, (, x, <=, 8.0, ), {, final, int, n, =, (, int]
[), ;, }, else, if, (, x, <=, 8.0, ), {, final, int, n, =, (, int, ), FastMath, .]
[), {, final, int, n, =, (, int, ), FastMath, ., floor, (, x, -, 1.5, ), ;, double, prod]
[<=, 8.0, ), {, final, int, n, =, (, int, ), FastMath, ., floor, (, x, -, 1.5, ), ;]
[), {, final, int, n, =, (, int, ), FastMath, ., floor, (, x, -, 1.5, ), ;, double, prod]
[;, double, prod, =, 1.0, ;, for, (, int, i, =, 1, ;, i, <=, n, ;, i, ++, )]
[;, double, prod, =, 1.0, ;, for, (, int, i, =, 1, ;, i, <=, n, ;, i, ++, )]
[., floor, (, x, -, 1.5, ), ;, double, prod, =, 1.0, ;, for, (, int, i, =, 1, ;]
[), ;, double, prod, =, 1.0, ;, for, (, int, i, =, 1, ;, i, <=, n, ;, i, ++]
[-, 1.5, ), ;, double, prod, =, 1.0, ;, for, (, int, i, =, 1, ;, i, <=, n, ;]
[), ;, double, prod, =, 1.0, ;, for, (, int, i, =, 1, ;, i, <=, n, ;, i, ++]
[;, for, (, int, i, =, 1, ;, i, <=, n, ;, i, ++, ), {, prod, *=, x, -]
[;, i, <=, n, ;, i, ++, ), {, prod, *=, x, -, i, ;, }, return, logGamma1p, (, x]
[;, i, ++, ), {, prod, *=, x, -, i, ;, }, return, logGamma1p, (, x, -, (, n, +]
[<=, n, ;, i, ++, ), {, prod, *=, x, -, i, ;, }, return, logGamma1p, (, x, -, (]
[;, i, ++, ), {, prod, *=, x, -, i, ;, }, return, logGamma1p, (, x, -, (, n, +]
[), {, prod, *=, x, -, i, ;, }, return, logGamma1p, (, x, -, (, n, +, 1, ), )]
[++, ), {, prod, *=, x, -, i, ;, }, return, logGamma1p, (, x, -, (, n, +, 1, )]
[*=, x, -, i, ;, }, return, logGamma1p, (, x, -, (, n, +, 1, ), ), +, FastMath, .]
[;, }, return, logGamma1p, (, x, -, (, n, +, 1, ), ), +, FastMath, ., log, (, prod, )]
[-, i, ;, }, return, logGamma1p, (, x, -, (, n, +, 1, ), ), +, FastMath, ., log, (]
[;, }, return, logGamma1p, (, x, -, (, n, +, 1, ), ), +, FastMath, ., log, (, prod, )]
[;, }, else, {, double, sum, =, lanczos, (, x, ), ;, double, tmp, =, x, +, LANCZOS_G, +, .5]
[+, FastMath, ., log, (, prod, ), ;, }, else, {, double, sum, =, lanczos, (, x, ), ;, double]
[), +, FastMath, ., log, (, prod, ), ;, }, else, {, double, sum, =, lanczos, (, x, ), ;]
[-, (, n, +, 1, ), ), +, FastMath, ., log, (, prod, ), ;, }, else, {, double, sum]
[), +, FastMath, ., log, (, prod, ), ;, }, else, {, double, sum, =, lanczos, (, x, ), ;]
[), ), +, FastMath, ., log, (, prod, ), ;, }, else, {, double, sum, =, lanczos, (, x, )]
[+, 1, ), ), +, FastMath, ., log, (, prod, ), ;, }, else, {, double, sum, =, lanczos, (]
[), ), +, FastMath, ., log, (, prod, ), ;, }, else, {, double, sum, =, lanczos, (, x, )]
[;, }, else, {, double, sum, =, lanczos, (, x, ), ;, double, tmp, =, x, +, LANCZOS_G, +, .5]
[., log, (, prod, ), ;, }, else, {, double, sum, =, lanczos, (, x, ), ;, double, tmp, =]
[), ;, }, else, {, double, sum, =, lanczos, (, x, ), ;, double, tmp, =, x, +, LANCZOS_G, +]
[;, double, tmp, =, x, +, LANCZOS_G, +, .5, ;, ret, =, (, (, x, +, .5, ), *, FastMath]
[), ;, double, tmp, =, x, +, LANCZOS_G, +, .5, ;, ret, =, (, (, x, +, .5, ), *]
[;, ret, =, (, (, x, +, .5, ), *, FastMath, ., log, (, tmp, ), ), -, tmp, +]
[+, .5, ;, ret, =, (, (, x, +, .5, ), *, FastMath, ., log, (, tmp, ), ), -]
[+, LANCZOS_G, +, .5, ;, ret, =, (, (, x, +, .5, ), *, FastMath, ., log, (, tmp, )]
[+, .5, ;, ret, =, (, (, x, +, .5, ), *, FastMath, ., log, (, tmp, ), ), -]
[;, ret, =, (, (, x, +, .5, ), *, FastMath, ., log, (, tmp, ), ), -, tmp, +]
[=, (, (, x, +, .5, ), *, FastMath, ., log, (, tmp, ), ), -, tmp, +, HALF_LOG_2_PI, +]
[;, }, return, ret, ;, }, public, static, double, regularizedGammaP, (, double, a, ,, double, x, ), {, return, regularizedGammaP]
[+, FastMath, ., log, (, sum, /, x, ), ;, }, return, ret, ;, }, public, static, double, regularizedGammaP, (]
[+, HALF_LOG_2_PI, +, FastMath, ., log, (, sum, /, x, ), ;, }, return, ret, ;, }, public, static, double]
[-, tmp, +, HALF_LOG_2_PI, +, FastMath, ., log, (, sum, /, x, ), ;, }, return, ret, ;, }, public]
[), -, tmp, +, HALF_LOG_2_PI, +, FastMath, ., log, (, sum, /, x, ), ;, }, return, ret, ;, }]
[*, FastMath, ., log, (, tmp, ), ), -, tmp, +, HALF_LOG_2_PI, +, FastMath, ., log, (, sum, /, x]
[), *, FastMath, ., log, (, tmp, ), ), -, tmp, +, HALF_LOG_2_PI, +, FastMath, ., log, (, sum, /]
[+, .5, ), *, FastMath, ., log, (, tmp, ), ), -, tmp, +, HALF_LOG_2_PI, +, FastMath, ., log, (]
[), *, FastMath, ., log, (, tmp, ), ), -, tmp, +, HALF_LOG_2_PI, +, FastMath, ., log, (, sum, /]
[), -, tmp, +, HALF_LOG_2_PI, +, FastMath, ., log, (, sum, /, x, ), ;, }, return, ret, ;, }]
[., log, (, tmp, ), ), -, tmp, +, HALF_LOG_2_PI, +, FastMath, ., log, (, sum, /, x, ), ;]
[), ), -, tmp, +, HALF_LOG_2_PI, +, FastMath, ., log, (, sum, /, x, ), ;, }, return, ret, ;]
[+, HALF_LOG_2_PI, +, FastMath, ., log, (, sum, /, x, ), ;, }, return, ret, ;, }, public, static, double]
[+, FastMath, ., log, (, sum, /, x, ), ;, }, return, ret, ;, }, public, static, double, regularizedGammaP, (]
[;, }, return, ret, ;, }, public, static, double, regularizedGammaP, (, double, a, ,, double, x, ), {, return, regularizedGammaP]
[., log, (, sum, /, x, ), ;, }, return, ret, ;, }, public, static, double, regularizedGammaP, (, double, a]
[), ;, }, return, ret, ;, }, public, static, double, regularizedGammaP, (, double, a, ,, double, x, ), {, return]
[/, x, ), ;, }, return, ret, ;, }, public, static, double, regularizedGammaP, (, double, a, ,, double, x, )]
[), ;, }, return, ret, ;, }, public, static, double, regularizedGammaP, (, double, a, ,, double, x, ), {, return]
[;, }, public, static, double, regularizedGammaP, (, double, a, ,, double, x, ), {, return, regularizedGammaP, (, a, ,, x]
[;, }, public, static, double, regularizedGammaP, (, double, a, ,, double, x, ,, double, epsilon, ,, int, maxIterations, ), {]
[,, x, ,, DEFAULT_EPSILON, ,, Integer, ., MAX_VALUE, ), ;, }, public, static, double, regularizedGammaP, (, double, a, ,, double]
[,, DEFAULT_EPSILON, ,, Integer, ., MAX_VALUE, ), ;, }, public, static, double, regularizedGammaP, (, double, a, ,, double, x, ,]
[,, Integer, ., MAX_VALUE, ), ;, }, public, static, double, regularizedGammaP, (, double, a, ,, double, x, ,, double, epsilon]
[), ;, }, public, static, double, regularizedGammaP, (, double, a, ,, double, x, ,, double, epsilon, ,, int, maxIterations, )]
[., MAX_VALUE, ), ;, }, public, static, double, regularizedGammaP, (, double, a, ,, double, x, ,, double, epsilon, ,, int]
[), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, ==, 0.0, ), {, ret, =, 0.0]
[||, (, x, <, 0.0, ), ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, ==]
[||, (, a, <=, 0.0, ), ||, (, x, <, 0.0, ), ), {, ret, =, Double, ., NaN, ;]
[||, Double, ., isNaN, (, x, ), ||, (, a, <=, 0.0, ), ||, (, x, <, 0.0, ), )]
[., isNaN, (, a, ), ||, Double, ., isNaN, (, x, ), ||, (, a, <=, 0.0, ), ||, (]
[), ||, Double, ., isNaN, (, x, ), ||, (, a, <=, 0.0, ), ||, (, x, <, 0.0, )]
[||, (, a, <=, 0.0, ), ||, (, x, <, 0.0, ), ), {, ret, =, Double, ., NaN, ;]
[., isNaN, (, x, ), ||, (, a, <=, 0.0, ), ||, (, x, <, 0.0, ), ), {, ret]
[), ||, (, a, <=, 0.0, ), ||, (, x, <, 0.0, ), ), {, ret, =, Double, ., NaN]
[||, (, x, <, 0.0, ), ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, ==]
[), ||, (, x, <, 0.0, ), ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x]
[<=, 0.0, ), ||, (, x, <, 0.0, ), ), {, ret, =, Double, ., NaN, ;, }, else, if]
[), ||, (, x, <, 0.0, ), ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x]
[), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, ==, 0.0, ), {, ret, =, 0.0]
[), ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, ==, 0.0, ), {, ret, =]
[<, 0.0, ), ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, ==, 0.0, ), {]
[), ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, ==, 0.0, ), {, ret, =]
[=, Double, ., NaN, ;, }, else, if, (, x, ==, 0.0, ), {, ret, =, 0.0, ;, }, else]
[;, }, else, if, (, x, ==, 0.0, ), {, ret, =, 0.0, ;, }, else, if, (, x, >=]
[., NaN, ;, }, else, if, (, x, ==, 0.0, ), {, ret, =, 0.0, ;, }, else, if, (]
[), {, ret, =, 0.0, ;, }, else, if, (, x, >=, a, +, 1, ), {, ret, =, 1.0]
[==, 0.0, ), {, ret, =, 0.0, ;, }, else, if, (, x, >=, a, +, 1, ), {, ret]
[), {, ret, =, 0.0, ;, }, else, if, (, x, >=, a, +, 1, ), {, ret, =, 1.0]
[=, 0.0, ;, }, else, if, (, x, >=, a, +, 1, ), {, ret, =, 1.0, -, regularizedGammaQ, (]
[;, }, else, if, (, x, >=, a, +, 1, ), {, ret, =, 1.0, -, regularizedGammaQ, (, a, ,]
[), {, ret, =, 1.0, -, regularizedGammaQ, (, a, ,, x, ,, epsilon, ,, maxIterations, ), ;, }, else, {]
[>=, a, +, 1, ), {, ret, =, 1.0, -, regularizedGammaQ, (, a, ,, x, ,, epsilon, ,, maxIterations, )]
[), {, ret, =, 1.0, -, regularizedGammaQ, (, a, ,, x, ,, epsilon, ,, maxIterations, ), ;, }, else, {]
[+, 1, ), {, ret, =, 1.0, -, regularizedGammaQ, (, a, ,, x, ,, epsilon, ,, maxIterations, ), ;, }]
[), {, ret, =, 1.0, -, regularizedGammaQ, (, a, ,, x, ,, epsilon, ,, maxIterations, ), ;, }, else, {]
[=, 1.0, -, regularizedGammaQ, (, a, ,, x, ,, epsilon, ,, maxIterations, ), ;, }, else, {, double, n, =]
[;, }, else, {, double, n, =, 0.0, ;, double, an, =, 1.0, /, a, ;, double, sum, =, an]
[-, regularizedGammaQ, (, a, ,, x, ,, epsilon, ,, maxIterations, ), ;, }, else, {, double, n, =, 0.0, ;]
[;, }, else, {, double, n, =, 0.0, ;, double, an, =, 1.0, /, a, ;, double, sum, =, an]
[,, x, ,, epsilon, ,, maxIterations, ), ;, }, else, {, double, n, =, 0.0, ;, double, an, =, 1.0]
[,, epsilon, ,, maxIterations, ), ;, }, else, {, double, n, =, 0.0, ;, double, an, =, 1.0, /, a]
[,, maxIterations, ), ;, }, else, {, double, n, =, 0.0, ;, double, an, =, 1.0, /, a, ;, double]
[), ;, }, else, {, double, n, =, 0.0, ;, double, an, =, 1.0, /, a, ;, double, sum, =]
[;, double, an, =, 1.0, /, a, ;, double, sum, =, an, ;, while, (, FastMath, ., abs, (, an]
[;, double, sum, =, an, ;, while, (, FastMath, ., abs, (, an, /, sum, ), >, epsilon, &&, n]
[/, a, ;, double, sum, =, an, ;, while, (, FastMath, ., abs, (, an, /, sum, ), >, epsilon]
[;, double, sum, =, an, ;, while, (, FastMath, ., abs, (, an, /, sum, ), >, epsilon, &&, n]
[;, while, (, FastMath, ., abs, (, an, /, sum, ), >, epsilon, &&, n, <, maxIterations, &&, sum, <]
[), {, n, =, n, +, 1.0, ;, an, =, an, *, (, x, /, (, a, +, n, )]
[&&, sum, <, Double, ., POSITIVE_INFINITY, ), {, n, =, n, +, 1.0, ;, an, =, an, *, (, x]
[&&, n, <, maxIterations, &&, sum, <, Double, ., POSITIVE_INFINITY, ), {, n, =, n, +, 1.0, ;, an, =]
[>, epsilon, &&, n, <, maxIterations, &&, sum, <, Double, ., POSITIVE_INFINITY, ), {, n, =, n, +, 1.0, ;]
[., abs, (, an, /, sum, ), >, epsilon, &&, n, <, maxIterations, &&, sum, <, Double, ., POSITIVE_INFINITY, )]
[), >, epsilon, &&, n, <, maxIterations, &&, sum, <, Double, ., POSITIVE_INFINITY, ), {, n, =, n, +, 1.0]
[/, sum, ), >, epsilon, &&, n, <, maxIterations, &&, sum, <, Double, ., POSITIVE_INFINITY, ), {, n, =, n]
[), >, epsilon, &&, n, <, maxIterations, &&, sum, <, Double, ., POSITIVE_INFINITY, ), {, n, =, n, +, 1.0]
[&&, n, <, maxIterations, &&, sum, <, Double, ., POSITIVE_INFINITY, ), {, n, =, n, +, 1.0, ;, an, =]
[&&, sum, <, Double, ., POSITIVE_INFINITY, ), {, n, =, n, +, 1.0, ;, an, =, an, *, (, x]
[<, maxIterations, &&, sum, <, Double, ., POSITIVE_INFINITY, ), {, n, =, n, +, 1.0, ;, an, =, an, *]
[&&, sum, <, Double, ., POSITIVE_INFINITY, ), {, n, =, n, +, 1.0, ;, an, =, an, *, (, x]
[), {, n, =, n, +, 1.0, ;, an, =, an, *, (, x, /, (, a, +, n, )]
[<, Double, ., POSITIVE_INFINITY, ), {, n, =, n, +, 1.0, ;, an, =, an, *, (, x, /, (]
[), {, n, =, n, +, 1.0, ;, an, =, an, *, (, x, /, (, a, +, n, )]
[., POSITIVE_INFINITY, ), {, n, =, n, +, 1.0, ;, an, =, an, *, (, x, /, (, a, +]
[=, n, +, 1.0, ;, an, =, an, *, (, x, /, (, a, +, n, ), ), ;, sum]
[;, an, =, an, *, (, x, /, (, a, +, n, ), ), ;, sum, =, sum, +, an]
[+, 1.0, ;, an, =, an, *, (, x, /, (, a, +, n, ), ), ;, sum, =, sum]
[;, an, =, an, *, (, x, /, (, a, +, n, ), ), ;, sum, =, sum, +, an]
[=, an, *, (, x, /, (, a, +, n, ), ), ;, sum, =, sum, +, an, ;, }]
[;, sum, =, sum, +, an, ;, }, if, (, n, >=, maxIterations, ), {, throw, new, MaxCountExceededException, (, maxIterations]
[*, (, x, /, (, a, +, n, ), ), ;, sum, =, sum, +, an, ;, }, if, (]
[;, sum, =, sum, +, an, ;, }, if, (, n, >=, maxIterations, ), {, throw, new, MaxCountExceededException, (, maxIterations]
[), ;, sum, =, sum, +, an, ;, }, if, (, n, >=, maxIterations, ), {, throw, new, MaxCountExceededException, (]
[/, (, a, +, n, ), ), ;, sum, =, sum, +, an, ;, }, if, (, n, >=, maxIterations]
[), ;, sum, =, sum, +, an, ;, }, if, (, n, >=, maxIterations, ), {, throw, new, MaxCountExceededException, (]
[), ), ;, sum, =, sum, +, an, ;, }, if, (, n, >=, maxIterations, ), {, throw, new, MaxCountExceededException]
[+, n, ), ), ;, sum, =, sum, +, an, ;, }, if, (, n, >=, maxIterations, ), {, throw]
[), ), ;, sum, =, sum, +, an, ;, }, if, (, n, >=, maxIterations, ), {, throw, new, MaxCountExceededException]
[=, sum, +, an, ;, }, if, (, n, >=, maxIterations, ), {, throw, new, MaxCountExceededException, (, maxIterations, ), ;]
[;, }, if, (, n, >=, maxIterations, ), {, throw, new, MaxCountExceededException, (, maxIterations, ), ;, }, else, if, (]
[+, an, ;, }, if, (, n, >=, maxIterations, ), {, throw, new, MaxCountExceededException, (, maxIterations, ), ;, }, else]
[;, }, if, (, n, >=, maxIterations, ), {, throw, new, MaxCountExceededException, (, maxIterations, ), ;, }, else, if, (]
[), {, throw, new, MaxCountExceededException, (, maxIterations, ), ;, }, else, if, (, Double, ., isInfinite, (, sum, ), )]
[>=, maxIterations, ), {, throw, new, MaxCountExceededException, (, maxIterations, ), ;, }, else, if, (, Double, ., isInfinite, (, sum]
[), {, throw, new, MaxCountExceededException, (, maxIterations, ), ;, }, else, if, (, Double, ., isInfinite, (, sum, ), )]
[;, }, else, if, (, Double, ., isInfinite, (, sum, ), ), {, ret, =, 1.0, ;, }, else, {]
[), ;, }, else, if, (, Double, ., isInfinite, (, sum, ), ), {, ret, =, 1.0, ;, }, else]
[), {, ret, =, 1.0, ;, }, else, {, ret, =, FastMath, ., exp, (, -, x, +, (, a]
[., isInfinite, (, sum, ), ), {, ret, =, 1.0, ;, }, else, {, ret, =, FastMath, ., exp, (]
[), ), {, ret, =, 1.0, ;, }, else, {, ret, =, FastMath, ., exp, (, -, x, +, (]
[=, 1.0, ;, }, else, {, ret, =, FastMath, ., exp, (, -, x, +, (, a, *, FastMath, .]
[;, }, else, {, ret, =, FastMath, ., exp, (, -, x, +, (, a, *, FastMath, ., log, (]
[=, FastMath, ., exp, (, -, x, +, (, a, *, FastMath, ., log, (, x, ), ), -, logGamma]
[;, }, }, return, ret, ;, }, public, static, double, regularizedGammaQ, (, double, a, ,, double, x, ), {, return]
[*, sum, ;, }, }, return, ret, ;, }, public, static, double, regularizedGammaQ, (, double, a, ,, double, x, )]
[., exp, (, -, x, +, (, a, *, FastMath, ., log, (, x, ), ), -, logGamma, (, a]
[), *, sum, ;, }, }, return, ret, ;, }, public, static, double, regularizedGammaQ, (, double, a, ,, double, x]
[-, logGamma, (, a, ), ), *, sum, ;, }, }, return, ret, ;, }, public, static, double, regularizedGammaQ, (]
[+, (, a, *, FastMath, ., log, (, x, ), ), -, logGamma, (, a, ), ), *, sum, ;]
[+, (, a, *, FastMath, ., log, (, x, ), ), -, logGamma, (, a, ), ), *, sum, ;]
[-, logGamma, (, a, ), ), *, sum, ;, }, }, return, ret, ;, }, public, static, double, regularizedGammaQ, (]
[), -, logGamma, (, a, ), ), *, sum, ;, }, }, return, ret, ;, }, public, static, double, regularizedGammaQ]
[*, FastMath, ., log, (, x, ), ), -, logGamma, (, a, ), ), *, sum, ;, }, }, return]
[), -, logGamma, (, a, ), ), *, sum, ;, }, }, return, ret, ;, }, public, static, double, regularizedGammaQ]
[., log, (, x, ), ), -, logGamma, (, a, ), ), *, sum, ;, }, }, return, ret, ;]
[), ), -, logGamma, (, a, ), ), *, sum, ;, }, }, return, ret, ;, }, public, static, double]
[), *, sum, ;, }, }, return, ret, ;, }, public, static, double, regularizedGammaQ, (, double, a, ,, double, x]
[), ), *, sum, ;, }, }, return, ret, ;, }, public, static, double, regularizedGammaQ, (, double, a, ,, double]
[;, }, }, return, ret, ;, }, public, static, double, regularizedGammaQ, (, double, a, ,, double, x, ), {, return]
[;, }, public, static, double, regularizedGammaQ, (, double, a, ,, double, x, ), {, return, regularizedGammaQ, (, a, ,, x]
[;, }, public, static, double, regularizedGammaQ, (, final, double, a, ,, double, x, ,, double, epsilon, ,, int, maxIterations, )]
[,, x, ,, DEFAULT_EPSILON, ,, Integer, ., MAX_VALUE, ), ;, }, public, static, double, regularizedGammaQ, (, final, double, a, ,]
[,, DEFAULT_EPSILON, ,, Integer, ., MAX_VALUE, ), ;, }, public, static, double, regularizedGammaQ, (, final, double, a, ,, double, x]
[,, Integer, ., MAX_VALUE, ), ;, }, public, static, double, regularizedGammaQ, (, final, double, a, ,, double, x, ,, double]
[), ;, }, public, static, double, regularizedGammaQ, (, final, double, a, ,, double, x, ,, double, epsilon, ,, int, maxIterations]
[., MAX_VALUE, ), ;, }, public, static, double, regularizedGammaQ, (, final, double, a, ,, double, x, ,, double, epsilon, ,]
[), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, ==, 0.0, ), {, ret, =, 1.0]
[||, (, x, <, 0.0, ), ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, ==]
[||, (, a, <=, 0.0, ), ||, (, x, <, 0.0, ), ), {, ret, =, Double, ., NaN, ;]
[||, Double, ., isNaN, (, x, ), ||, (, a, <=, 0.0, ), ||, (, x, <, 0.0, ), )]
[., isNaN, (, a, ), ||, Double, ., isNaN, (, x, ), ||, (, a, <=, 0.0, ), ||, (]
[), ||, Double, ., isNaN, (, x, ), ||, (, a, <=, 0.0, ), ||, (, x, <, 0.0, )]
[||, (, a, <=, 0.0, ), ||, (, x, <, 0.0, ), ), {, ret, =, Double, ., NaN, ;]
[., isNaN, (, x, ), ||, (, a, <=, 0.0, ), ||, (, x, <, 0.0, ), ), {, ret]
[), ||, (, a, <=, 0.0, ), ||, (, x, <, 0.0, ), ), {, ret, =, Double, ., NaN]
[||, (, x, <, 0.0, ), ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, ==]
[), ||, (, x, <, 0.0, ), ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x]
[<=, 0.0, ), ||, (, x, <, 0.0, ), ), {, ret, =, Double, ., NaN, ;, }, else, if]
[), ||, (, x, <, 0.0, ), ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x]
[), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, ==, 0.0, ), {, ret, =, 1.0]
[), ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, ==, 0.0, ), {, ret, =]
[<, 0.0, ), ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, ==, 0.0, ), {]
[), ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, ==, 0.0, ), {, ret, =]
[=, Double, ., NaN, ;, }, else, if, (, x, ==, 0.0, ), {, ret, =, 1.0, ;, }, else]
[;, }, else, if, (, x, ==, 0.0, ), {, ret, =, 1.0, ;, }, else, if, (, x, <]
[., NaN, ;, }, else, if, (, x, ==, 0.0, ), {, ret, =, 1.0, ;, }, else, if, (]
[), {, ret, =, 1.0, ;, }, else, if, (, x, <, a, +, 1.0, ), {, ret, =, 1.0]
[==, 0.0, ), {, ret, =, 1.0, ;, }, else, if, (, x, <, a, +, 1.0, ), {, ret]
[), {, ret, =, 1.0, ;, }, else, if, (, x, <, a, +, 1.0, ), {, ret, =, 1.0]
[=, 1.0, ;, }, else, if, (, x, <, a, +, 1.0, ), {, ret, =, 1.0, -, regularizedGammaP, (]
[;, }, else, if, (, x, <, a, +, 1.0, ), {, ret, =, 1.0, -, regularizedGammaP, (, a, ,]
[), {, ret, =, 1.0, -, regularizedGammaP, (, a, ,, x, ,, epsilon, ,, maxIterations, ), ;, }, else, {]
[<, a, +, 1.0, ), {, ret, =, 1.0, -, regularizedGammaP, (, a, ,, x, ,, epsilon, ,, maxIterations, )]
[), {, ret, =, 1.0, -, regularizedGammaP, (, a, ,, x, ,, epsilon, ,, maxIterations, ), ;, }, else, {]
[+, 1.0, ), {, ret, =, 1.0, -, regularizedGammaP, (, a, ,, x, ,, epsilon, ,, maxIterations, ), ;, }]
[), {, ret, =, 1.0, -, regularizedGammaP, (, a, ,, x, ,, epsilon, ,, maxIterations, ), ;, }, else, {]
[=, 1.0, -, regularizedGammaP, (, a, ,, x, ,, epsilon, ,, maxIterations, ), ;, }, else, {, ContinuedFraction, cf, =]
[;, }, else, {, ContinuedFraction, cf, =, new, ContinuedFraction, (, ), {, @, Override, protected, double, getA, (, int, n]
[-, regularizedGammaP, (, a, ,, x, ,, epsilon, ,, maxIterations, ), ;, }, else, {, ContinuedFraction, cf, =, new, ContinuedFraction]
[;, }, else, {, ContinuedFraction, cf, =, new, ContinuedFraction, (, ), {, @, Override, protected, double, getA, (, int, n]
[,, x, ,, epsilon, ,, maxIterations, ), ;, }, else, {, ContinuedFraction, cf, =, new, ContinuedFraction, (, ), {, @]
[,, epsilon, ,, maxIterations, ), ;, }, else, {, ContinuedFraction, cf, =, new, ContinuedFraction, (, ), {, @, Override, protected]
[,, maxIterations, ), ;, }, else, {, ContinuedFraction, cf, =, new, ContinuedFraction, (, ), {, @, Override, protected, double, getA]
[), ;, }, else, {, ContinuedFraction, cf, =, new, ContinuedFraction, (, ), {, @, Override, protected, double, getA, (, int]
[;, ret, =, 1.0, /, cf, ., evaluate, (, x, ,, epsilon, ,, maxIterations, ), ;, ret, =, FastMath, .]
[;, }, @, Override, protected, double, getB, (, int, n, ,, double, x, ), {, return, n, *, (, a]
[+, x, ;, }, @, Override, protected, double, getB, (, int, n, ,, double, x, ), {, return, n, *]
[-, a, +, x, ;, }, @, Override, protected, double, getB, (, int, n, ,, double, x, ), {, return]
[), -, a, +, x, ;, }, @, Override, protected, double, getB, (, int, n, ,, double, x, ), {]
[+, 1.0, ), -, a, +, x, ;, }, @, Override, protected, double, getB, (, int, n, ,, double, x]
[), +, 1.0, ), -, a, +, x, ;, }, @, Override, protected, double, getB, (, int, n, ,, double]
[*, n, ), +, 1.0, ), -, a, +, x, ;, }, @, Override, protected, double, getB, (, int, n]
[), +, 1.0, ), -, a, +, x, ;, }, @, Override, protected, double, getB, (, int, n, ,, double]
[), -, a, +, x, ;, }, @, Override, protected, double, getB, (, int, n, ,, double, x, ), {]
[+, x, ;, }, @, Override, protected, double, getB, (, int, n, ,, double, x, ), {, return, n, *]
[;, }, @, Override, protected, double, getB, (, int, n, ,, double, x, ), {, return, n, *, (, a]
[;, }, }, ;, ret, =, 1.0, /, cf, ., evaluate, (, x, ,, epsilon, ,, maxIterations, ), ;, ret]
[*, (, a, -, n, ), ;, }, }, ;, ret, =, 1.0, /, cf, ., evaluate, (, x, ,]
[;, }, }, ;, ret, =, 1.0, /, cf, ., evaluate, (, x, ,, epsilon, ,, maxIterations, ), ;, ret]
[), ;, }, }, ;, ret, =, 1.0, /, cf, ., evaluate, (, x, ,, epsilon, ,, maxIterations, ), ;]
[-, n, ), ;, }, }, ;, ret, =, 1.0, /, cf, ., evaluate, (, x, ,, epsilon, ,, maxIterations]
[), ;, }, }, ;, ret, =, 1.0, /, cf, ., evaluate, (, x, ,, epsilon, ,, maxIterations, ), ;]
[=, 1.0, /, cf, ., evaluate, (, x, ,, epsilon, ,, maxIterations, ), ;, ret, =, FastMath, ., exp, (]
[;, ret, =, FastMath, ., exp, (, -, x, +, (, a, *, FastMath, ., log, (, x, ), )]
[/, cf, ., evaluate, (, x, ,, epsilon, ,, maxIterations, ), ;, ret, =, FastMath, ., exp, (, -, x]
[;, ret, =, FastMath, ., exp, (, -, x, +, (, a, *, FastMath, ., log, (, x, ), )]
[., evaluate, (, x, ,, epsilon, ,, maxIterations, ), ;, ret, =, FastMath, ., exp, (, -, x, +, (]
[,, epsilon, ,, maxIterations, ), ;, ret, =, FastMath, ., exp, (, -, x, +, (, a, *, FastMath, .]
[,, maxIterations, ), ;, ret, =, FastMath, ., exp, (, -, x, +, (, a, *, FastMath, ., log, (]
[), ;, ret, =, FastMath, ., exp, (, -, x, +, (, a, *, FastMath, ., log, (, x, )]
[=, FastMath, ., exp, (, -, x, +, (, a, *, FastMath, ., log, (, x, ), ), -, logGamma]
[;, }, return, ret, ;, }, public, static, double, digamma, (, double, x, ), {, if, (, x, >, 0]
[*, ret, ;, }, return, ret, ;, }, public, static, double, digamma, (, double, x, ), {, if, (, x]
[., exp, (, -, x, +, (, a, *, FastMath, ., log, (, x, ), ), -, logGamma, (, a]
[), *, ret, ;, }, return, ret, ;, }, public, static, double, digamma, (, double, x, ), {, if, (]
[-, logGamma, (, a, ), ), *, ret, ;, }, return, ret, ;, }, public, static, double, digamma, (, double]
[+, (, a, *, FastMath, ., log, (, x, ), ), -, logGamma, (, a, ), ), *, ret, ;]
[+, (, a, *, FastMath, ., log, (, x, ), ), -, logGamma, (, a, ), ), *, ret, ;]
[-, logGamma, (, a, ), ), *, ret, ;, }, return, ret, ;, }, public, static, double, digamma, (, double]
[), -, logGamma, (, a, ), ), *, ret, ;, }, return, ret, ;, }, public, static, double, digamma, (]
[*, FastMath, ., log, (, x, ), ), -, logGamma, (, a, ), ), *, ret, ;, }, return, ret]
[), -, logGamma, (, a, ), ), *, ret, ;, }, return, ret, ;, }, public, static, double, digamma, (]
[., log, (, x, ), ), -, logGamma, (, a, ), ), *, ret, ;, }, return, ret, ;, }]
[), ), -, logGamma, (, a, ), ), *, ret, ;, }, return, ret, ;, }, public, static, double, digamma]
[), *, ret, ;, }, return, ret, ;, }, public, static, double, digamma, (, double, x, ), {, if, (]
[), ), *, ret, ;, }, return, ret, ;, }, public, static, double, digamma, (, double, x, ), {, if]
[;, }, return, ret, ;, }, public, static, double, digamma, (, double, x, ), {, if, (, x, >, 0]
[;, }, public, static, double, digamma, (, double, x, ), {, if, (, x, >, 0, &&, x, <=, S_LIMIT]
[), {, return, -, GAMMA, -, 1, /, x, ;, }, if, (, x, >=, C_LIMIT, ), {, double, inv]
[&&, x, <=, S_LIMIT, ), {, return, -, GAMMA, -, 1, /, x, ;, }, if, (, x, >=, C_LIMIT]
[>, 0, &&, x, <=, S_LIMIT, ), {, return, -, GAMMA, -, 1, /, x, ;, }, if, (, x]
[&&, x, <=, S_LIMIT, ), {, return, -, GAMMA, -, 1, /, x, ;, }, if, (, x, >=, C_LIMIT]
[), {, return, -, GAMMA, -, 1, /, x, ;, }, if, (, x, >=, C_LIMIT, ), {, double, inv]
[<=, S_LIMIT, ), {, return, -, GAMMA, -, 1, /, x, ;, }, if, (, x, >=, C_LIMIT, ), {]
[), {, return, -, GAMMA, -, 1, /, x, ;, }, if, (, x, >=, C_LIMIT, ), {, double, inv]
[;, }, if, (, x, >=, C_LIMIT, ), {, double, inv, =, 1, /, (, x, *, x, ), ;]
[-, 1, /, x, ;, }, if, (, x, >=, C_LIMIT, ), {, double, inv, =, 1, /, (, x]
[-, 1, /, x, ;, }, if, (, x, >=, C_LIMIT, ), {, double, inv, =, 1, /, (, x]
[;, }, if, (, x, >=, C_LIMIT, ), {, double, inv, =, 1, /, (, x, *, x, ), ;]
[/, x, ;, }, if, (, x, >=, C_LIMIT, ), {, double, inv, =, 1, /, (, x, *, x]
[;, }, if, (, x, >=, C_LIMIT, ), {, double, inv, =, 1, /, (, x, *, x, ), ;]
[), {, double, inv, =, 1, /, (, x, *, x, ), ;, return, FastMath, ., log, (, x, )]
[>=, C_LIMIT, ), {, double, inv, =, 1, /, (, x, *, x, ), ;, return, FastMath, ., log, (]
[), {, double, inv, =, 1, /, (, x, *, x, ), ;, return, FastMath, ., log, (, x, )]
[;, return, FastMath, ., log, (, x, ), -, 0.5, /, x, -, inv, *, (, (, 1.0, /, 12]
[/, (, x, *, x, ), ;, return, FastMath, ., log, (, x, ), -, 0.5, /, x, -, inv]
[;, return, FastMath, ., log, (, x, ), -, 0.5, /, x, -, inv, *, (, (, 1.0, /, 12]
[), ;, return, FastMath, ., log, (, x, ), -, 0.5, /, x, -, inv, *, (, (, 1.0, /]
[*, x, ), ;, return, FastMath, ., log, (, x, ), -, 0.5, /, x, -, inv, *, (, (]
[), ;, return, FastMath, ., log, (, x, ), -, 0.5, /, x, -, inv, *, (, (, 1.0, /]
[;, }, return, digamma, (, x, +, 1, ), -, 1, /, x, ;, }, public, static, double, trigamma, (]
[-, inv, *, (, (, 1.0, /, 12, ), +, inv, *, (, 1.0, /, 120, -, inv, /, 252]
[-, 0.5, /, x, -, inv, *, (, (, 1.0, /, 12, ), +, inv, *, (, 1.0, /, 120]
[., log, (, x, ), -, 0.5, /, x, -, inv, *, (, (, 1.0, /, 12, ), +, inv]
[), -, 0.5, /, x, -, inv, *, (, (, 1.0, /, 12, ), +, inv, *, (, 1.0, /]
[-, inv, *, (, (, 1.0, /, 12, ), +, inv, *, (, 1.0, /, 120, -, inv, /, 252]
[/, x, -, inv, *, (, (, 1.0, /, 12, ), +, inv, *, (, 1.0, /, 120, -, inv]
[-, inv, *, (, (, 1.0, /, 12, ), +, inv, *, (, 1.0, /, 120, -, inv, /, 252]
[;, }, return, digamma, (, x, +, 1, ), -, 1, /, x, ;, }, public, static, double, trigamma, (]
[*, (, (, 1.0, /, 12, ), +, inv, *, (, 1.0, /, 120, -, inv, /, 252, ), )]
[;, }, return, digamma, (, x, +, 1, ), -, 1, /, x, ;, }, public, static, double, trigamma, (]
[), ;, }, return, digamma, (, x, +, 1, ), -, 1, /, x, ;, }, public, static, double, trigamma]
[+, inv, *, (, 1.0, /, 120, -, inv, /, 252, ), ), ;, }, return, digamma, (, x, +]
[), +, inv, *, (, 1.0, /, 120, -, inv, /, 252, ), ), ;, }, return, digamma, (, x]
[/, 12, ), +, inv, *, (, 1.0, /, 120, -, inv, /, 252, ), ), ;, }, return, digamma]
[), +, inv, *, (, 1.0, /, 120, -, inv, /, 252, ), ), ;, }, return, digamma, (, x]
[), ;, }, return, digamma, (, x, +, 1, ), -, 1, /, x, ;, }, public, static, double, trigamma]
[*, (, 1.0, /, 120, -, inv, /, 252, ), ), ;, }, return, digamma, (, x, +, 1, )]
[), ;, }, return, digamma, (, x, +, 1, ), -, 1, /, x, ;, }, public, static, double, trigamma]
[), ), ;, }, return, digamma, (, x, +, 1, ), -, 1, /, x, ;, }, public, static, double]
[-, inv, /, 252, ), ), ;, }, return, digamma, (, x, +, 1, ), -, 1, /, x, ;]
[/, 120, -, inv, /, 252, ), ), ;, }, return, digamma, (, x, +, 1, ), -, 1, /]
[-, inv, /, 252, ), ), ;, }, return, digamma, (, x, +, 1, ), -, 1, /, x, ;]
[), ), ;, }, return, digamma, (, x, +, 1, ), -, 1, /, x, ;, }, public, static, double]
[/, 252, ), ), ;, }, return, digamma, (, x, +, 1, ), -, 1, /, x, ;, }, public]
[), ), ;, }, return, digamma, (, x, +, 1, ), -, 1, /, x, ;, }, public, static, double]
[;, }, public, static, double, trigamma, (, double, x, ), {, if, (, x, >, 0, &&, x, <=, S_LIMIT]
[-, 1, /, x, ;, }, public, static, double, trigamma, (, double, x, ), {, if, (, x, >, 0]
[), -, 1, /, x, ;, }, public, static, double, trigamma, (, double, x, ), {, if, (, x, >]
[+, 1, ), -, 1, /, x, ;, }, public, static, double, trigamma, (, double, x, ), {, if, (]
[), -, 1, /, x, ;, }, public, static, double, trigamma, (, double, x, ), {, if, (, x, >]
[;, }, public, static, double, trigamma, (, double, x, ), {, if, (, x, >, 0, &&, x, <=, S_LIMIT]
[/, x, ;, }, public, static, double, trigamma, (, double, x, ), {, if, (, x, >, 0, &&, x]
[;, }, public, static, double, trigamma, (, double, x, ), {, if, (, x, >, 0, &&, x, <=, S_LIMIT]
[), {, return, 1, /, (, x, *, x, ), ;, }, if, (, x, >=, C_LIMIT, ), {, double]
[&&, x, <=, S_LIMIT, ), {, return, 1, /, (, x, *, x, ), ;, }, if, (, x, >=]
[>, 0, &&, x, <=, S_LIMIT, ), {, return, 1, /, (, x, *, x, ), ;, }, if, (]
[&&, x, <=, S_LIMIT, ), {, return, 1, /, (, x, *, x, ), ;, }, if, (, x, >=]
[), {, return, 1, /, (, x, *, x, ), ;, }, if, (, x, >=, C_LIMIT, ), {, double]
[<=, S_LIMIT, ), {, return, 1, /, (, x, *, x, ), ;, }, if, (, x, >=, C_LIMIT, )]
[), {, return, 1, /, (, x, *, x, ), ;, }, if, (, x, >=, C_LIMIT, ), {, double]
[;, }, if, (, x, >=, C_LIMIT, ), {, double, inv, =, 1, /, (, x, *, x, ), ;]
[/, (, x, *, x, ), ;, }, if, (, x, >=, C_LIMIT, ), {, double, inv, =, 1, /]
[;, }, if, (, x, >=, C_LIMIT, ), {, double, inv, =, 1, /, (, x, *, x, ), ;]
[), ;, }, if, (, x, >=, C_LIMIT, ), {, double, inv, =, 1, /, (, x, *, x, )]
[*, x, ), ;, }, if, (, x, >=, C_LIMIT, ), {, double, inv, =, 1, /, (, x, *]
[), ;, }, if, (, x, >=, C_LIMIT, ), {, double, inv, =, 1, /, (, x, *, x, )]
[), {, double, inv, =, 1, /, (, x, *, x, ), ;, return, 1, /, x, +, inv, /]
[>=, C_LIMIT, ), {, double, inv, =, 1, /, (, x, *, x, ), ;, return, 1, /, x, +]
[), {, double, inv, =, 1, /, (, x, *, x, ), ;, return, 1, /, x, +, inv, /]
[;, return, 1, /, x, +, inv, /, 2, +, inv, /, x, *, (, 1.0, /, 6, -, inv]
[/, (, x, *, x, ), ;, return, 1, /, x, +, inv, /, 2, +, inv, /, x, *]
[;, return, 1, /, x, +, inv, /, 2, +, inv, /, x, *, (, 1.0, /, 6, -, inv]
[), ;, return, 1, /, x, +, inv, /, 2, +, inv, /, x, *, (, 1.0, /, 6, -]
[*, x, ), ;, return, 1, /, x, +, inv, /, 2, +, inv, /, x, *, (, 1.0, /]
[), ;, return, 1, /, x, +, inv, /, 2, +, inv, /, x, *, (, 1.0, /, 6, -]
[;, }, return, trigamma, (, x, +, 1, ), +, 1, /, (, x, *, x, ), ;, }, public]
[+, inv, /, x, *, (, 1.0, /, 6, -, inv, *, (, 1.0, /, 30, +, inv, /, 42]
[+, inv, /, 2, +, inv, /, x, *, (, 1.0, /, 6, -, inv, *, (, 1.0, /, 30]
[/, x, +, inv, /, 2, +, inv, /, x, *, (, 1.0, /, 6, -, inv, *, (, 1.0]
[+, inv, /, 2, +, inv, /, x, *, (, 1.0, /, 6, -, inv, *, (, 1.0, /, 30]
[+, inv, /, x, *, (, 1.0, /, 6, -, inv, *, (, 1.0, /, 30, +, inv, /, 42]
[/, 2, +, inv, /, x, *, (, 1.0, /, 6, -, inv, *, (, 1.0, /, 30, +, inv]
[+, inv, /, x, *, (, 1.0, /, 6, -, inv, *, (, 1.0, /, 30, +, inv, /, 42]
[;, }, return, trigamma, (, x, +, 1, ), +, 1, /, (, x, *, x, ), ;, }, public]
[*, (, 1.0, /, 6, -, inv, *, (, 1.0, /, 30, +, inv, /, 42, ), ), ;, }]
[/, x, *, (, 1.0, /, 6, -, inv, *, (, 1.0, /, 30, +, inv, /, 42, ), )]
[*, (, 1.0, /, 6, -, inv, *, (, 1.0, /, 30, +, inv, /, 42, ), ), ;, }]
[;, }, return, trigamma, (, x, +, 1, ), +, 1, /, (, x, *, x, ), ;, }, public]
[), ;, }, return, trigamma, (, x, +, 1, ), +, 1, /, (, x, *, x, ), ;, }]
[-, inv, *, (, 1.0, /, 30, +, inv, /, 42, ), ), ;, }, return, trigamma, (, x, +]
[/, 6, -, inv, *, (, 1.0, /, 30, +, inv, /, 42, ), ), ;, }, return, trigamma, (]
[-, inv, *, (, 1.0, /, 30, +, inv, /, 42, ), ), ;, }, return, trigamma, (, x, +]
[), ;, }, return, trigamma, (, x, +, 1, ), +, 1, /, (, x, *, x, ), ;, }]
[*, (, 1.0, /, 30, +, inv, /, 42, ), ), ;, }, return, trigamma, (, x, +, 1, )]
[), ;, }, return, trigamma, (, x, +, 1, ), +, 1, /, (, x, *, x, ), ;, }]
[), ), ;, }, return, trigamma, (, x, +, 1, ), +, 1, /, (, x, *, x, ), ;]
[+, inv, /, 42, ), ), ;, }, return, trigamma, (, x, +, 1, ), +, 1, /, (, x]
[/, 30, +, inv, /, 42, ), ), ;, }, return, trigamma, (, x, +, 1, ), +, 1, /]
[+, inv, /, 42, ), ), ;, }, return, trigamma, (, x, +, 1, ), +, 1, /, (, x]
[), ), ;, }, return, trigamma, (, x, +, 1, ), +, 1, /, (, x, *, x, ), ;]
[/, 42, ), ), ;, }, return, trigamma, (, x, +, 1, ), +, 1, /, (, x, *, x]
[), ), ;, }, return, trigamma, (, x, +, 1, ), +, 1, /, (, x, *, x, ), ;]
[;, }, public, static, double, lanczos, (, final, double, x, ), {, double, sum, =, 0.0, ;, for, (, int]
[+, 1, /, (, x, *, x, ), ;, }, public, static, double, lanczos, (, final, double, x, ), {]
[), +, 1, /, (, x, *, x, ), ;, }, public, static, double, lanczos, (, final, double, x, )]
[+, 1, ), +, 1, /, (, x, *, x, ), ;, }, public, static, double, lanczos, (, final, double]
[), +, 1, /, (, x, *, x, ), ;, }, public, static, double, lanczos, (, final, double, x, )]
[;, }, public, static, double, lanczos, (, final, double, x, ), {, double, sum, =, 0.0, ;, for, (, int]
[/, (, x, *, x, ), ;, }, public, static, double, lanczos, (, final, double, x, ), {, double, sum]
[;, }, public, static, double, lanczos, (, final, double, x, ), {, double, sum, =, 0.0, ;, for, (, int]
[), ;, }, public, static, double, lanczos, (, final, double, x, ), {, double, sum, =, 0.0, ;, for, (]
[*, x, ), ;, }, public, static, double, lanczos, (, final, double, x, ), {, double, sum, =, 0.0, ;]
[), ;, }, public, static, double, lanczos, (, final, double, x, ), {, double, sum, =, 0.0, ;, for, (]
[;, for, (, int, i, =, LANCZOS, ., length, -, 1, ;, i, >, 0, ;, --, i, ), {]
[;, i, >, 0, ;, --, i, ), {, sum, =, sum, +, (, LANCZOS, [, i, ], /, (]
[-, 1, ;, i, >, 0, ;, --, i, ), {, sum, =, sum, +, (, LANCZOS, [, i, ]]
[., length, -, 1, ;, i, >, 0, ;, --, i, ), {, sum, =, sum, +, (, LANCZOS, []
[;, i, >, 0, ;, --, i, ), {, sum, =, sum, +, (, LANCZOS, [, i, ], /, (]
[;, --, i, ), {, sum, =, sum, +, (, LANCZOS, [, i, ], /, (, x, +, i, )]
[>, 0, ;, --, i, ), {, sum, =, sum, +, (, LANCZOS, [, i, ], /, (, x, +]
[;, --, i, ), {, sum, =, sum, +, (, LANCZOS, [, i, ], /, (, x, +, i, )]
[), {, sum, =, sum, +, (, LANCZOS, [, i, ], /, (, x, +, i, ), ), ;, }]
[), {, sum, =, sum, +, (, LANCZOS, [, i, ], /, (, x, +, i, ), ), ;, }]
[=, sum, +, (, LANCZOS, [, i, ], /, (, x, +, i, ), ), ;, }, return, sum, +]
[;, }, return, sum, +, LANCZOS, [, 0, ], ;, }, public, static, double, invGamma1pm1, (, final, double, x, )]
[+, (, LANCZOS, [, i, ], /, (, x, +, i, ), ), ;, }, return, sum, +, LANCZOS, []
[;, }, return, sum, +, LANCZOS, [, 0, ], ;, }, public, static, double, invGamma1pm1, (, final, double, x, )]
[), ;, }, return, sum, +, LANCZOS, [, 0, ], ;, }, public, static, double, invGamma1pm1, (, final, double, x]
[/, (, x, +, i, ), ), ;, }, return, sum, +, LANCZOS, [, 0, ], ;, }, public, static]
[[, i, ], /, (, x, +, i, ), ), ;, }, return, sum, +, LANCZOS, [, 0, ], ;]
[], /, (, x, +, i, ), ), ;, }, return, sum, +, LANCZOS, [, 0, ], ;, }, public]
[), ;, }, return, sum, +, LANCZOS, [, 0, ], ;, }, public, static, double, invGamma1pm1, (, final, double, x]
[), ), ;, }, return, sum, +, LANCZOS, [, 0, ], ;, }, public, static, double, invGamma1pm1, (, final, double]
[+, i, ), ), ;, }, return, sum, +, LANCZOS, [, 0, ], ;, }, public, static, double, invGamma1pm1, (]
[), ), ;, }, return, sum, +, LANCZOS, [, 0, ], ;, }, public, static, double, invGamma1pm1, (, final, double]
[;, }, public, static, double, invGamma1pm1, (, final, double, x, ), {, if, (, x, <, -, 0.5, ), {]
[+, LANCZOS, [, 0, ], ;, }, public, static, double, invGamma1pm1, (, final, double, x, ), {, if, (, x]
[;, }, public, static, double, invGamma1pm1, (, final, double, x, ), {, if, (, x, <, -, 0.5, ), {]
[[, 0, ], ;, }, public, static, double, invGamma1pm1, (, final, double, x, ), {, if, (, x, <, -]
[], ;, }, public, static, double, invGamma1pm1, (, final, double, x, ), {, if, (, x, <, -, 0.5, )]
[), {, throw, new, NumberIsTooSmallException, (, x, ,, -, 0.5, ,, true, ), ;, }, if, (, x, >, 1.5]
[<, -, 0.5, ), {, throw, new, NumberIsTooSmallException, (, x, ,, -, 0.5, ,, true, ), ;, }, if, (]
[), {, throw, new, NumberIsTooSmallException, (, x, ,, -, 0.5, ,, true, ), ;, }, if, (, x, >, 1.5]
[), {, throw, new, NumberIsTooSmallException, (, x, ,, -, 0.5, ,, true, ), ;, }, if, (, x, >, 1.5]
[;, }, if, (, x, >, 1.5, ), {, throw, new, NumberIsTooLargeException, (, x, ,, 1.5, ,, true, ), ;]
[,, -, 0.5, ,, true, ), ;, }, if, (, x, >, 1.5, ), {, throw, new, NumberIsTooLargeException, (, x]
[,, true, ), ;, }, if, (, x, >, 1.5, ), {, throw, new, NumberIsTooLargeException, (, x, ,, 1.5, ,]
[,, true, ), ;, }, if, (, x, >, 1.5, ), {, throw, new, NumberIsTooLargeException, (, x, ,, 1.5, ,]
[), ;, }, if, (, x, >, 1.5, ), {, throw, new, NumberIsTooLargeException, (, x, ,, 1.5, ,, true, )]
[), {, throw, new, NumberIsTooLargeException, (, x, ,, 1.5, ,, true, ), ;, }, final, double, ret, ;, final, double]
[>, 1.5, ), {, throw, new, NumberIsTooLargeException, (, x, ,, 1.5, ,, true, ), ;, }, final, double, ret, ;]
[), {, throw, new, NumberIsTooLargeException, (, x, ,, 1.5, ,, true, ), ;, }, final, double, ret, ;, final, double]
[;, }, final, double, ret, ;, final, double, t, =, x, <=, 0.5, ?, x, :, (, x, -, 0.5]
[,, 1.5, ,, true, ), ;, }, final, double, ret, ;, final, double, t, =, x, <=, 0.5, ?, x]
[,, true, ), ;, }, final, double, ret, ;, final, double, t, =, x, <=, 0.5, ?, x, :, (]
[), ;, }, final, double, ret, ;, final, double, t, =, x, <=, 0.5, ?, x, :, (, x, -]
[;, if, (, t, <, 0.0, ), {, final, double, a, =, INV_GAMMA1P_M1_A0, +, t, *, INV_GAMMA1P_M1_A1, ;, double, b]
[?, x, :, (, x, -, 0.5, ), -, 0.5, ;, if, (, t, <, 0.0, ), {, final, double]
[<=, 0.5, ?, x, :, (, x, -, 0.5, ), -, 0.5, ;, if, (, t, <, 0.0, ), {]
[?, x, :, (, x, -, 0.5, ), -, 0.5, ;, if, (, t, <, 0.0, ), {, final, double]
[:, (, x, -, 0.5, ), -, 0.5, ;, if, (, t, <, 0.0, ), {, final, double, a, =]
[;, if, (, t, <, 0.0, ), {, final, double, a, =, INV_GAMMA1P_M1_A0, +, t, *, INV_GAMMA1P_M1_A1, ;, double, b]
[-, 0.5, ;, if, (, t, <, 0.0, ), {, final, double, a, =, INV_GAMMA1P_M1_A0, +, t, *, INV_GAMMA1P_M1_A1, ;]
[), -, 0.5, ;, if, (, t, <, 0.0, ), {, final, double, a, =, INV_GAMMA1P_M1_A0, +, t, *, INV_GAMMA1P_M1_A1]
[-, 0.5, ), -, 0.5, ;, if, (, t, <, 0.0, ), {, final, double, a, =, INV_GAMMA1P_M1_A0, +, t]
[), -, 0.5, ;, if, (, t, <, 0.0, ), {, final, double, a, =, INV_GAMMA1P_M1_A0, +, t, *, INV_GAMMA1P_M1_A1]
[;, if, (, t, <, 0.0, ), {, final, double, a, =, INV_GAMMA1P_M1_A0, +, t, *, INV_GAMMA1P_M1_A1, ;, double, b]
[), {, final, double, a, =, INV_GAMMA1P_M1_A0, +, t, *, INV_GAMMA1P_M1_A1, ;, double, b, =, INV_GAMMA1P_M1_B8, ;, b, =, INV_GAMMA1P_M1_B7]
[<, 0.0, ), {, final, double, a, =, INV_GAMMA1P_M1_A0, +, t, *, INV_GAMMA1P_M1_A1, ;, double, b, =, INV_GAMMA1P_M1_B8, ;, b]
[), {, final, double, a, =, INV_GAMMA1P_M1_A0, +, t, *, INV_GAMMA1P_M1_A1, ;, double, b, =, INV_GAMMA1P_M1_B8, ;, b, =, INV_GAMMA1P_M1_B7]
[;, double, b, =, INV_GAMMA1P_M1_B8, ;, b, =, INV_GAMMA1P_M1_B7, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B6, +, t, *]
[+, t, *, INV_GAMMA1P_M1_A1, ;, double, b, =, INV_GAMMA1P_M1_B8, ;, b, =, INV_GAMMA1P_M1_B7, +, t, *, b, ;, b, =]
[;, double, b, =, INV_GAMMA1P_M1_B8, ;, b, =, INV_GAMMA1P_M1_B7, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B6, +, t, *]
[*, INV_GAMMA1P_M1_A1, ;, double, b, =, INV_GAMMA1P_M1_B8, ;, b, =, INV_GAMMA1P_M1_B7, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B6, +]
[;, double, b, =, INV_GAMMA1P_M1_B8, ;, b, =, INV_GAMMA1P_M1_B7, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B6, +, t, *]
[;, b, =, INV_GAMMA1P_M1_B7, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B6, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B5]
[=, INV_GAMMA1P_M1_B7, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B6, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B5, +, t]
[;, b, =, INV_GAMMA1P_M1_B6, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B5, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B4]
[+, t, *, b, ;, b, =, INV_GAMMA1P_M1_B6, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B5, +, t, *, b]
[;, b, =, INV_GAMMA1P_M1_B6, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B5, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B4]
[*, b, ;, b, =, INV_GAMMA1P_M1_B6, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B5, +, t, *, b, ;, b]
[;, b, =, INV_GAMMA1P_M1_B6, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B5, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B4]
[=, INV_GAMMA1P_M1_B6, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B5, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B4, +, t]
[;, b, =, INV_GAMMA1P_M1_B5, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B4, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B3]
[+, t, *, b, ;, b, =, INV_GAMMA1P_M1_B5, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B4, +, t, *, b]
[;, b, =, INV_GAMMA1P_M1_B5, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B4, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B3]
[*, b, ;, b, =, INV_GAMMA1P_M1_B5, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B4, +, t, *, b, ;, b]
[;, b, =, INV_GAMMA1P_M1_B5, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B4, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B3]
[=, INV_GAMMA1P_M1_B5, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B4, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B3, +, t]
[;, b, =, INV_GAMMA1P_M1_B4, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B3, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B2]
[+, t, *, b, ;, b, =, INV_GAMMA1P_M1_B4, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B3, +, t, *, b]
[;, b, =, INV_GAMMA1P_M1_B4, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B3, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B2]
[*, b, ;, b, =, INV_GAMMA1P_M1_B4, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B3, +, t, *, b, ;, b]
[;, b, =, INV_GAMMA1P_M1_B4, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B3, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B2]
[=, INV_GAMMA1P_M1_B4, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B3, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B2, +, t]
[;, b, =, INV_GAMMA1P_M1_B3, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B2, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B1]
[+, t, *, b, ;, b, =, INV_GAMMA1P_M1_B3, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B2, +, t, *, b]
[;, b, =, INV_GAMMA1P_M1_B3, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B2, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B1]
[*, b, ;, b, =, INV_GAMMA1P_M1_B3, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B2, +, t, *, b, ;, b]
[;, b, =, INV_GAMMA1P_M1_B3, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B2, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B1]
[=, INV_GAMMA1P_M1_B3, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B2, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B1, +, t]
[;, b, =, INV_GAMMA1P_M1_B2, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B1, +, t, *, b, ;, b, =, 1.0]
[+, t, *, b, ;, b, =, INV_GAMMA1P_M1_B2, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B1, +, t, *, b]
[;, b, =, INV_GAMMA1P_M1_B2, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B1, +, t, *, b, ;, b, =, 1.0]
[*, b, ;, b, =, INV_GAMMA1P_M1_B2, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B1, +, t, *, b, ;, b]
[;, b, =, INV_GAMMA1P_M1_B2, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B1, +, t, *, b, ;, b, =, 1.0]
[=, INV_GAMMA1P_M1_B2, +, t, *, b, ;, b, =, INV_GAMMA1P_M1_B1, +, t, *, b, ;, b, =, 1.0, +, t]
[;, b, =, INV_GAMMA1P_M1_B1, +, t, *, b, ;, b, =, 1.0, +, t, *, b, ;, double, c, =]
[+, t, *, b, ;, b, =, INV_GAMMA1P_M1_B1, +, t, *, b, ;, b, =, 1.0, +, t, *, b]
[;, b, =, INV_GAMMA1P_M1_B1, +, t, *, b, ;, b, =, 1.0, +, t, *, b, ;, double, c, =]
[*, b, ;, b, =, INV_GAMMA1P_M1_B1, +, t, *, b, ;, b, =, 1.0, +, t, *, b, ;, double]
[;, b, =, INV_GAMMA1P_M1_B1, +, t, *, b, ;, b, =, 1.0, +, t, *, b, ;, double, c, =]
[=, INV_GAMMA1P_M1_B1, +, t, *, b, ;, b, =, 1.0, +, t, *, b, ;, double, c, =, INV_GAMMA1P_M1_C13, +]
[;, b, =, 1.0, +, t, *, b, ;, double, c, =, INV_GAMMA1P_M1_C13, +, t, *, (, a, /, b]
[+, t, *, b, ;, b, =, 1.0, +, t, *, b, ;, double, c, =, INV_GAMMA1P_M1_C13, +, t, *]
[;, b, =, 1.0, +, t, *, b, ;, double, c, =, INV_GAMMA1P_M1_C13, +, t, *, (, a, /, b]
[*, b, ;, b, =, 1.0, +, t, *, b, ;, double, c, =, INV_GAMMA1P_M1_C13, +, t, *, (, a]
[;, b, =, 1.0, +, t, *, b, ;, double, c, =, INV_GAMMA1P_M1_C13, +, t, *, (, a, /, b]
[=, 1.0, +, t, *, b, ;, double, c, =, INV_GAMMA1P_M1_C13, +, t, *, (, a, /, b, ), ;]
[;, double, c, =, INV_GAMMA1P_M1_C13, +, t, *, (, a, /, b, ), ;, c, =, INV_GAMMA1P_M1_C12, +, t, *]
[+, t, *, b, ;, double, c, =, INV_GAMMA1P_M1_C13, +, t, *, (, a, /, b, ), ;, c, =]
[;, double, c, =, INV_GAMMA1P_M1_C13, +, t, *, (, a, /, b, ), ;, c, =, INV_GAMMA1P_M1_C12, +, t, *]
[*, b, ;, double, c, =, INV_GAMMA1P_M1_C13, +, t, *, (, a, /, b, ), ;, c, =, INV_GAMMA1P_M1_C12, +]
[;, double, c, =, INV_GAMMA1P_M1_C13, +, t, *, (, a, /, b, ), ;, c, =, INV_GAMMA1P_M1_C12, +, t, *]
[;, c, =, INV_GAMMA1P_M1_C12, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10]
[+, t, *, (, a, /, b, ), ;, c, =, INV_GAMMA1P_M1_C12, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C11]
[;, c, =, INV_GAMMA1P_M1_C12, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10]
[*, (, a, /, b, ), ;, c, =, INV_GAMMA1P_M1_C12, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C11, +, t]
[;, c, =, INV_GAMMA1P_M1_C12, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10]
[), ;, c, =, INV_GAMMA1P_M1_C12, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =]
[/, b, ), ;, c, =, INV_GAMMA1P_M1_C12, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;]
[), ;, c, =, INV_GAMMA1P_M1_C12, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =]
[=, INV_GAMMA1P_M1_C12, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10, +, t]
[;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9]
[*, c, ;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c]
[;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9]
[=, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9, +, t]
[;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8]
[*, c, ;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c]
[;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8]
[=, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8, +, t]
[;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7]
[*, c, ;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c]
[;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7]
[=, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7, +, t]
[;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6]
[*, c, ;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c]
[;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6]
[=, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6, +, t]
[;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5]
[*, c, ;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c]
[;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5]
[=, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5, +, t]
[;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4]
[*, c, ;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c]
[;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4]
[=, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4, +, t]
[;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3]
[*, c, ;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c]
[;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3]
[=, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3, +, t]
[;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2]
[*, c, ;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c]
[;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2]
[=, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2, +, t]
[;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1]
[*, c, ;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c]
[;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1]
[=, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1, +, t]
[;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C]
[*, c, ;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c]
[;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C]
[=, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C, +, t]
[;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C, +, t, *, c, ;, if, (, x]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C, +, t, *, c, ;, if, (, x]
[*, c, ;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C, +, t, *, c, ;, if]
[;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C, +, t, *, c, ;, if, (, x]
[=, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C, +, t, *, c, ;, if, (, x, >, 0.5]
[;, c, =, INV_GAMMA1P_M1_C, +, t, *, c, ;, if, (, x, >, 0.5, ), {, ret, =, t, *]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C, +, t, *, c, ;, if, (, x, >, 0.5, ), {]
[;, c, =, INV_GAMMA1P_M1_C, +, t, *, c, ;, if, (, x, >, 0.5, ), {, ret, =, t, *]
[*, c, ;, c, =, INV_GAMMA1P_M1_C, +, t, *, c, ;, if, (, x, >, 0.5, ), {, ret, =]
[;, c, =, INV_GAMMA1P_M1_C, +, t, *, c, ;, if, (, x, >, 0.5, ), {, ret, =, t, *]
[=, INV_GAMMA1P_M1_C, +, t, *, c, ;, if, (, x, >, 0.5, ), {, ret, =, t, *, c, /]
[;, if, (, x, >, 0.5, ), {, ret, =, t, *, c, /, x, ;, }, else, {, ret]
[+, t, *, c, ;, if, (, x, >, 0.5, ), {, ret, =, t, *, c, /, x, ;]
[;, if, (, x, >, 0.5, ), {, ret, =, t, *, c, /, x, ;, }, else, {, ret]
[*, c, ;, if, (, x, >, 0.5, ), {, ret, =, t, *, c, /, x, ;, }, else]
[;, if, (, x, >, 0.5, ), {, ret, =, t, *, c, /, x, ;, }, else, {, ret]
[), {, ret, =, t, *, c, /, x, ;, }, else, {, ret, =, x, *, (, (, c]
[>, 0.5, ), {, ret, =, t, *, c, /, x, ;, }, else, {, ret, =, x, *, (]
[), {, ret, =, t, *, c, /, x, ;, }, else, {, ret, =, x, *, (, (, c]
[=, t, *, c, /, x, ;, }, else, {, ret, =, x, *, (, (, c, +, 0.5, )]
[;, }, else, {, ret, =, x, *, (, (, c, +, 0.5, ), +, 0.5, ), ;, }, }]
[/, x, ;, }, else, {, ret, =, x, *, (, (, c, +, 0.5, ), +, 0.5, ), ;]
[*, c, /, x, ;, }, else, {, ret, =, x, *, (, (, c, +, 0.5, ), +, 0.5]
[/, x, ;, }, else, {, ret, =, x, *, (, (, c, +, 0.5, ), +, 0.5, ), ;]
[;, }, else, {, ret, =, x, *, (, (, c, +, 0.5, ), +, 0.5, ), ;, }, }]
[=, x, *, (, (, c, +, 0.5, ), +, 0.5, ), ;, }, }, else, {, double, p, =]
[;, }, }, else, {, double, p, =, INV_GAMMA1P_M1_P6, ;, p, =, INV_GAMMA1P_M1_P5, +, t, *, p, ;, p, =]
[*, (, (, c, +, 0.5, ), +, 0.5, ), ;, }, }, else, {, double, p, =, INV_GAMMA1P_M1_P6, ;]
[;, }, }, else, {, double, p, =, INV_GAMMA1P_M1_P6, ;, p, =, INV_GAMMA1P_M1_P5, +, t, *, p, ;, p, =]
[), ;, }, }, else, {, double, p, =, INV_GAMMA1P_M1_P6, ;, p, =, INV_GAMMA1P_M1_P5, +, t, *, p, ;, p]
[+, 0.5, ), ;, }, }, else, {, double, p, =, INV_GAMMA1P_M1_P6, ;, p, =, INV_GAMMA1P_M1_P5, +, t, *, p]
[), +, 0.5, ), ;, }, }, else, {, double, p, =, INV_GAMMA1P_M1_P6, ;, p, =, INV_GAMMA1P_M1_P5, +, t, *]
[+, 0.5, ), +, 0.5, ), ;, }, }, else, {, double, p, =, INV_GAMMA1P_M1_P6, ;, p, =, INV_GAMMA1P_M1_P5, +]
[), +, 0.5, ), ;, }, }, else, {, double, p, =, INV_GAMMA1P_M1_P6, ;, p, =, INV_GAMMA1P_M1_P5, +, t, *]
[), ;, }, }, else, {, double, p, =, INV_GAMMA1P_M1_P6, ;, p, =, INV_GAMMA1P_M1_P5, +, t, *, p, ;, p]
[;, p, =, INV_GAMMA1P_M1_P5, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P4, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P3]
[=, INV_GAMMA1P_M1_P5, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P4, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P3, +, t]
[;, p, =, INV_GAMMA1P_M1_P4, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P3, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P2]
[+, t, *, p, ;, p, =, INV_GAMMA1P_M1_P4, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P3, +, t, *, p]
[;, p, =, INV_GAMMA1P_M1_P4, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P3, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P2]
[*, p, ;, p, =, INV_GAMMA1P_M1_P4, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P3, +, t, *, p, ;, p]
[;, p, =, INV_GAMMA1P_M1_P4, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P3, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P2]
[=, INV_GAMMA1P_M1_P4, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P3, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P2, +, t]
[;, p, =, INV_GAMMA1P_M1_P3, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P2, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P1]
[+, t, *, p, ;, p, =, INV_GAMMA1P_M1_P3, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P2, +, t, *, p]
[;, p, =, INV_GAMMA1P_M1_P3, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P2, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P1]
[*, p, ;, p, =, INV_GAMMA1P_M1_P3, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P2, +, t, *, p, ;, p]
[;, p, =, INV_GAMMA1P_M1_P3, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P2, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P1]
[=, INV_GAMMA1P_M1_P3, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P2, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P1, +, t]
[;, p, =, INV_GAMMA1P_M1_P2, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P1, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P0]
[+, t, *, p, ;, p, =, INV_GAMMA1P_M1_P2, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P1, +, t, *, p]
[;, p, =, INV_GAMMA1P_M1_P2, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P1, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P0]
[*, p, ;, p, =, INV_GAMMA1P_M1_P2, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P1, +, t, *, p, ;, p]
[;, p, =, INV_GAMMA1P_M1_P2, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P1, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P0]
[=, INV_GAMMA1P_M1_P2, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P1, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P0, +, t]
[;, p, =, INV_GAMMA1P_M1_P1, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P0, +, t, *, p, ;, double, q, =]
[+, t, *, p, ;, p, =, INV_GAMMA1P_M1_P1, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P0, +, t, *, p]
[;, p, =, INV_GAMMA1P_M1_P1, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P0, +, t, *, p, ;, double, q, =]
[*, p, ;, p, =, INV_GAMMA1P_M1_P1, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P0, +, t, *, p, ;, double]
[;, p, =, INV_GAMMA1P_M1_P1, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P0, +, t, *, p, ;, double, q, =]
[=, INV_GAMMA1P_M1_P1, +, t, *, p, ;, p, =, INV_GAMMA1P_M1_P0, +, t, *, p, ;, double, q, =, INV_GAMMA1P_M1_Q4, ;]
[;, p, =, INV_GAMMA1P_M1_P0, +, t, *, p, ;, double, q, =, INV_GAMMA1P_M1_Q4, ;, q, =, INV_GAMMA1P_M1_Q3, +, t, *]
[+, t, *, p, ;, p, =, INV_GAMMA1P_M1_P0, +, t, *, p, ;, double, q, =, INV_GAMMA1P_M1_Q4, ;, q, =]
[;, p, =, INV_GAMMA1P_M1_P0, +, t, *, p, ;, double, q, =, INV_GAMMA1P_M1_Q4, ;, q, =, INV_GAMMA1P_M1_Q3, +, t, *]
[*, p, ;, p, =, INV_GAMMA1P_M1_P0, +, t, *, p, ;, double, q, =, INV_GAMMA1P_M1_Q4, ;, q, =, INV_GAMMA1P_M1_Q3, +]
[;, p, =, INV_GAMMA1P_M1_P0, +, t, *, p, ;, double, q, =, INV_GAMMA1P_M1_Q4, ;, q, =, INV_GAMMA1P_M1_Q3, +, t, *]
[=, INV_GAMMA1P_M1_P0, +, t, *, p, ;, double, q, =, INV_GAMMA1P_M1_Q4, ;, q, =, INV_GAMMA1P_M1_Q3, +, t, *, q, ;]
[;, double, q, =, INV_GAMMA1P_M1_Q4, ;, q, =, INV_GAMMA1P_M1_Q3, +, t, *, q, ;, q, =, INV_GAMMA1P_M1_Q2, +, t, *]
[+, t, *, p, ;, double, q, =, INV_GAMMA1P_M1_Q4, ;, q, =, INV_GAMMA1P_M1_Q3, +, t, *, q, ;, q, =]
[;, double, q, =, INV_GAMMA1P_M1_Q4, ;, q, =, INV_GAMMA1P_M1_Q3, +, t, *, q, ;, q, =, INV_GAMMA1P_M1_Q2, +, t, *]
[*, p, ;, double, q, =, INV_GAMMA1P_M1_Q4, ;, q, =, INV_GAMMA1P_M1_Q3, +, t, *, q, ;, q, =, INV_GAMMA1P_M1_Q2, +]
[;, double, q, =, INV_GAMMA1P_M1_Q4, ;, q, =, INV_GAMMA1P_M1_Q3, +, t, *, q, ;, q, =, INV_GAMMA1P_M1_Q2, +, t, *]
[;, q, =, INV_GAMMA1P_M1_Q3, +, t, *, q, ;, q, =, INV_GAMMA1P_M1_Q2, +, t, *, q, ;, q, =, INV_GAMMA1P_M1_Q1]
[=, INV_GAMMA1P_M1_Q3, +, t, *, q, ;, q, =, INV_GAMMA1P_M1_Q2, +, t, *, q, ;, q, =, INV_GAMMA1P_M1_Q1, +, t]
[;, q, =, INV_GAMMA1P_M1_Q2, +, t, *, q, ;, q, =, INV_GAMMA1P_M1_Q1, +, t, *, q, ;, q, =, 1.0]
[+, t, *, q, ;, q, =, INV_GAMMA1P_M1_Q2, +, t, *, q, ;, q, =, INV_GAMMA1P_M1_Q1, +, t, *, q]
[;, q, =, INV_GAMMA1P_M1_Q2, +, t, *, q, ;, q, =, INV_GAMMA1P_M1_Q1, +, t, *, q, ;, q, =, 1.0]
[*, q, ;, q, =, INV_GAMMA1P_M1_Q2, +, t, *, q, ;, q, =, INV_GAMMA1P_M1_Q1, +, t, *, q, ;, q]
[;, q, =, INV_GAMMA1P_M1_Q2, +, t, *, q, ;, q, =, INV_GAMMA1P_M1_Q1, +, t, *, q, ;, q, =, 1.0]
[=, INV_GAMMA1P_M1_Q2, +, t, *, q, ;, q, =, INV_GAMMA1P_M1_Q1, +, t, *, q, ;, q, =, 1.0, +, t]
[;, q, =, INV_GAMMA1P_M1_Q1, +, t, *, q, ;, q, =, 1.0, +, t, *, q, ;, double, c, =]
[+, t, *, q, ;, q, =, INV_GAMMA1P_M1_Q1, +, t, *, q, ;, q, =, 1.0, +, t, *, q]
[;, q, =, INV_GAMMA1P_M1_Q1, +, t, *, q, ;, q, =, 1.0, +, t, *, q, ;, double, c, =]
[*, q, ;, q, =, INV_GAMMA1P_M1_Q1, +, t, *, q, ;, q, =, 1.0, +, t, *, q, ;, double]
[;, q, =, INV_GAMMA1P_M1_Q1, +, t, *, q, ;, q, =, 1.0, +, t, *, q, ;, double, c, =]
[=, INV_GAMMA1P_M1_Q1, +, t, *, q, ;, q, =, 1.0, +, t, *, q, ;, double, c, =, INV_GAMMA1P_M1_C13, +]
[;, q, =, 1.0, +, t, *, q, ;, double, c, =, INV_GAMMA1P_M1_C13, +, (, p, /, q, ), *]
[+, t, *, q, ;, q, =, 1.0, +, t, *, q, ;, double, c, =, INV_GAMMA1P_M1_C13, +, (, p]
[;, q, =, 1.0, +, t, *, q, ;, double, c, =, INV_GAMMA1P_M1_C13, +, (, p, /, q, ), *]
[*, q, ;, q, =, 1.0, +, t, *, q, ;, double, c, =, INV_GAMMA1P_M1_C13, +, (, p, /, q]
[;, q, =, 1.0, +, t, *, q, ;, double, c, =, INV_GAMMA1P_M1_C13, +, (, p, /, q, ), *]
[=, 1.0, +, t, *, q, ;, double, c, =, INV_GAMMA1P_M1_C13, +, (, p, /, q, ), *, t, ;]
[;, double, c, =, INV_GAMMA1P_M1_C13, +, (, p, /, q, ), *, t, ;, c, =, INV_GAMMA1P_M1_C12, +, t, *]
[+, t, *, q, ;, double, c, =, INV_GAMMA1P_M1_C13, +, (, p, /, q, ), *, t, ;, c, =]
[;, double, c, =, INV_GAMMA1P_M1_C13, +, (, p, /, q, ), *, t, ;, c, =, INV_GAMMA1P_M1_C12, +, t, *]
[*, q, ;, double, c, =, INV_GAMMA1P_M1_C13, +, (, p, /, q, ), *, t, ;, c, =, INV_GAMMA1P_M1_C12, +]
[;, double, c, =, INV_GAMMA1P_M1_C13, +, (, p, /, q, ), *, t, ;, c, =, INV_GAMMA1P_M1_C12, +, t, *]
[;, c, =, INV_GAMMA1P_M1_C12, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10]
[+, (, p, /, q, ), *, t, ;, c, =, INV_GAMMA1P_M1_C12, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C11]
[;, c, =, INV_GAMMA1P_M1_C12, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10]
[*, t, ;, c, =, INV_GAMMA1P_M1_C12, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c]
[), *, t, ;, c, =, INV_GAMMA1P_M1_C12, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;]
[/, q, ), *, t, ;, c, =, INV_GAMMA1P_M1_C12, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C11, +, t, *]
[), *, t, ;, c, =, INV_GAMMA1P_M1_C12, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;]
[;, c, =, INV_GAMMA1P_M1_C12, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10]
[=, INV_GAMMA1P_M1_C12, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10, +, t]
[;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9]
[*, c, ;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c]
[;, c, =, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9]
[=, INV_GAMMA1P_M1_C11, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9, +, t]
[;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8]
[*, c, ;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c]
[;, c, =, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8]
[=, INV_GAMMA1P_M1_C10, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8, +, t]
[;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7]
[*, c, ;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c]
[;, c, =, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7]
[=, INV_GAMMA1P_M1_C9, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7, +, t]
[;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6]
[*, c, ;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c]
[;, c, =, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6]
[=, INV_GAMMA1P_M1_C8, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6, +, t]
[;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5]
[*, c, ;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c]
[;, c, =, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5]
[=, INV_GAMMA1P_M1_C7, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5, +, t]
[;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4]
[*, c, ;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c]
[;, c, =, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4]
[=, INV_GAMMA1P_M1_C6, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4, +, t]
[;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3]
[*, c, ;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c]
[;, c, =, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3]
[=, INV_GAMMA1P_M1_C5, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3, +, t]
[;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2]
[*, c, ;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c]
[;, c, =, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2]
[=, INV_GAMMA1P_M1_C4, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2, +, t]
[;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1]
[*, c, ;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c]
[;, c, =, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1]
[=, INV_GAMMA1P_M1_C3, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1, +, t]
[;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C0]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C0]
[*, c, ;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c]
[;, c, =, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C0]
[=, INV_GAMMA1P_M1_C2, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C0, +, t]
[;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C0, +, t, *, c, ;, if, (, x]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C0, +, t, *, c]
[;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C0, +, t, *, c, ;, if, (, x]
[*, c, ;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C0, +, t, *, c, ;, if]
[;, c, =, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C0, +, t, *, c, ;, if, (, x]
[=, INV_GAMMA1P_M1_C1, +, t, *, c, ;, c, =, INV_GAMMA1P_M1_C0, +, t, *, c, ;, if, (, x, >, 0.5]
[;, c, =, INV_GAMMA1P_M1_C0, +, t, *, c, ;, if, (, x, >, 0.5, ), {, ret, =, (, t]
[+, t, *, c, ;, c, =, INV_GAMMA1P_M1_C0, +, t, *, c, ;, if, (, x, >, 0.5, ), {]
[;, c, =, INV_GAMMA1P_M1_C0, +, t, *, c, ;, if, (, x, >, 0.5, ), {, ret, =, (, t]
[*, c, ;, c, =, INV_GAMMA1P_M1_C0, +, t, *, c, ;, if, (, x, >, 0.5, ), {, ret, =]
[;, c, =, INV_GAMMA1P_M1_C0, +, t, *, c, ;, if, (, x, >, 0.5, ), {, ret, =, (, t]
[=, INV_GAMMA1P_M1_C0, +, t, *, c, ;, if, (, x, >, 0.5, ), {, ret, =, (, t, /, x]
[;, if, (, x, >, 0.5, ), {, ret, =, (, t, /, x, ), *, (, (, c, -]
[+, t, *, c, ;, if, (, x, >, 0.5, ), {, ret, =, (, t, /, x, ), *]
[;, if, (, x, >, 0.5, ), {, ret, =, (, t, /, x, ), *, (, (, c, -]
[*, c, ;, if, (, x, >, 0.5, ), {, ret, =, (, t, /, x, ), *, (, (]
[;, if, (, x, >, 0.5, ), {, ret, =, (, t, /, x, ), *, (, (, c, -]
[), {, ret, =, (, t, /, x, ), *, (, (, c, -, 0.5, ), -, 0.5, ), ;]
[>, 0.5, ), {, ret, =, (, t, /, x, ), *, (, (, c, -, 0.5, ), -, 0.5]
[), {, ret, =, (, t, /, x, ), *, (, (, c, -, 0.5, ), -, 0.5, ), ;]
[=, (, t, /, x, ), *, (, (, c, -, 0.5, ), -, 0.5, ), ;, }, else, {]
[;, }, else, {, ret, =, x, *, c, ;, }, }, return, ret, ;, }, public, static, double, logGamma1p]
[*, (, (, c, -, 0.5, ), -, 0.5, ), ;, }, else, {, ret, =, x, *, c, ;]
[), *, (, (, c, -, 0.5, ), -, 0.5, ), ;, }, else, {, ret, =, x, *, c]
[/, x, ), *, (, (, c, -, 0.5, ), -, 0.5, ), ;, }, else, {, ret, =, x]
[), *, (, (, c, -, 0.5, ), -, 0.5, ), ;, }, else, {, ret, =, x, *, c]
[;, }, else, {, ret, =, x, *, c, ;, }, }, return, ret, ;, }, public, static, double, logGamma1p]
[), ;, }, else, {, ret, =, x, *, c, ;, }, }, return, ret, ;, }, public, static, double]
[-, 0.5, ), ;, }, else, {, ret, =, x, *, c, ;, }, }, return, ret, ;, }, public]
[), -, 0.5, ), ;, }, else, {, ret, =, x, *, c, ;, }, }, return, ret, ;, }]
[-, 0.5, ), -, 0.5, ), ;, }, else, {, ret, =, x, *, c, ;, }, }, return, ret]
[), -, 0.5, ), ;, }, else, {, ret, =, x, *, c, ;, }, }, return, ret, ;, }]
[), ;, }, else, {, ret, =, x, *, c, ;, }, }, return, ret, ;, }, public, static, double]
[=, x, *, c, ;, }, }, return, ret, ;, }, public, static, double, logGamma1p, (, final, double, x, )]
[;, }, }, return, ret, ;, }, public, static, double, logGamma1p, (, final, double, x, ), throws, NumberIsTooSmallException, ,, NumberIsTooLargeException]
[*, c, ;, }, }, return, ret, ;, }, public, static, double, logGamma1p, (, final, double, x, ), throws, NumberIsTooSmallException]
[;, }, }, return, ret, ;, }, public, static, double, logGamma1p, (, final, double, x, ), throws, NumberIsTooSmallException, ,, NumberIsTooLargeException]
[;, }, public, static, double, logGamma1p, (, final, double, x, ), throws, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, if, (, x, <]
[), {, throw, new, NumberIsTooSmallException, (, x, ,, -, 0.5, ,, true, ), ;, }, if, (, x, >, 1.5]
[<, -, 0.5, ), {, throw, new, NumberIsTooSmallException, (, x, ,, -, 0.5, ,, true, ), ;, }, if, (]
[), {, throw, new, NumberIsTooSmallException, (, x, ,, -, 0.5, ,, true, ), ;, }, if, (, x, >, 1.5]
[), {, throw, new, NumberIsTooSmallException, (, x, ,, -, 0.5, ,, true, ), ;, }, if, (, x, >, 1.5]
[;, }, if, (, x, >, 1.5, ), {, throw, new, NumberIsTooLargeException, (, x, ,, 1.5, ,, true, ), ;]
[,, -, 0.5, ,, true, ), ;, }, if, (, x, >, 1.5, ), {, throw, new, NumberIsTooLargeException, (, x]
[,, true, ), ;, }, if, (, x, >, 1.5, ), {, throw, new, NumberIsTooLargeException, (, x, ,, 1.5, ,]
[,, true, ), ;, }, if, (, x, >, 1.5, ), {, throw, new, NumberIsTooLargeException, (, x, ,, 1.5, ,]
[), ;, }, if, (, x, >, 1.5, ), {, throw, new, NumberIsTooLargeException, (, x, ,, 1.5, ,, true, )]
[), {, throw, new, NumberIsTooLargeException, (, x, ,, 1.5, ,, true, ), ;, }, return, -, FastMath, ., log1p, (]
[>, 1.5, ), {, throw, new, NumberIsTooLargeException, (, x, ,, 1.5, ,, true, ), ;, }, return, -, FastMath, .]
[), {, throw, new, NumberIsTooLargeException, (, x, ,, 1.5, ,, true, ), ;, }, return, -, FastMath, ., log1p, (]
[;, }, return, -, FastMath, ., log1p, (, invGamma1pm1, (, x, ), ), ;, }, public, static, double, gamma, (]
[,, 1.5, ,, true, ), ;, }, return, -, FastMath, ., log1p, (, invGamma1pm1, (, x, ), ), ;, }]
[,, true, ), ;, }, return, -, FastMath, ., log1p, (, invGamma1pm1, (, x, ), ), ;, }, public, static]
[), ;, }, return, -, FastMath, ., log1p, (, invGamma1pm1, (, x, ), ), ;, }, public, static, double, gamma]
[;, }, public, static, double, gamma, (, final, double, x, ), {, if, (, (, x, ==, FastMath, ., rint]
[;, }, public, static, double, gamma, (, final, double, x, ), {, if, (, (, x, ==, FastMath, ., rint]
[., log1p, (, invGamma1pm1, (, x, ), ), ;, }, public, static, double, gamma, (, final, double, x, ), {]
[), ;, }, public, static, double, gamma, (, final, double, x, ), {, if, (, (, x, ==, FastMath, .]
[), ), ;, }, public, static, double, gamma, (, final, double, x, ), {, if, (, (, x, ==, FastMath]
[), {, return, Double, ., NaN, ;, }, final, double, ret, ;, final, double, absX, =, FastMath, ., abs, (]
[&&, (, x, <=, 0.0, ), ), {, return, Double, ., NaN, ;, }, final, double, ret, ;, final, double]
[), &&, (, x, <=, 0.0, ), ), {, return, Double, ., NaN, ;, }, final, double, ret, ;, final]
[==, FastMath, ., rint, (, x, ), ), &&, (, x, <=, 0.0, ), ), {, return, Double, ., NaN]
[), &&, (, x, <=, 0.0, ), ), {, return, Double, ., NaN, ;, }, final, double, ret, ;, final]
[., rint, (, x, ), ), &&, (, x, <=, 0.0, ), ), {, return, Double, ., NaN, ;, }]
[), ), &&, (, x, <=, 0.0, ), ), {, return, Double, ., NaN, ;, }, final, double, ret, ;]
[), {, return, Double, ., NaN, ;, }, final, double, ret, ;, final, double, absX, =, FastMath, ., abs, (]
[), ), {, return, Double, ., NaN, ;, }, final, double, ret, ;, final, double, absX, =, FastMath, ., abs]
[<=, 0.0, ), ), {, return, Double, ., NaN, ;, }, final, double, ret, ;, final, double, absX, =, FastMath]
[), ), {, return, Double, ., NaN, ;, }, final, double, ret, ;, final, double, absX, =, FastMath, ., abs]
[;, }, final, double, ret, ;, final, double, absX, =, FastMath, ., abs, (, x, ), ;, if, (, absX]
[., NaN, ;, }, final, double, ret, ;, final, double, absX, =, FastMath, ., abs, (, x, ), ;, if]
[;, if, (, absX, <=, 20.0, ), {, if, (, x, >=, 1.0, ), {, double, prod, =, 1.0, ;]
[., abs, (, x, ), ;, if, (, absX, <=, 20.0, ), {, if, (, x, >=, 1.0, ), {]
[), ;, if, (, absX, <=, 20.0, ), {, if, (, x, >=, 1.0, ), {, double, prod, =, 1.0]
[), {, if, (, x, >=, 1.0, ), {, double, prod, =, 1.0, ;, double, t, =, x, ;, while]
[<=, 20.0, ), {, if, (, x, >=, 1.0, ), {, double, prod, =, 1.0, ;, double, t, =, x]
[), {, if, (, x, >=, 1.0, ), {, double, prod, =, 1.0, ;, double, t, =, x, ;, while]
[), {, double, prod, =, 1.0, ;, double, t, =, x, ;, while, (, t, >, 2.5, ), {, t]
[>=, 1.0, ), {, double, prod, =, 1.0, ;, double, t, =, x, ;, while, (, t, >, 2.5, )]
[), {, double, prod, =, 1.0, ;, double, t, =, x, ;, while, (, t, >, 2.5, ), {, t]
[;, double, t, =, x, ;, while, (, t, >, 2.5, ), {, t, =, t, -, 1.0, ;, prod]
[;, while, (, t, >, 2.5, ), {, t, =, t, -, 1.0, ;, prod, *=, t, ;, }, ret]
[), {, t, =, t, -, 1.0, ;, prod, *=, t, ;, }, ret, =, prod, /, (, 1.0, +]
[>, 2.5, ), {, t, =, t, -, 1.0, ;, prod, *=, t, ;, }, ret, =, prod, /, (]
[), {, t, =, t, -, 1.0, ;, prod, *=, t, ;, }, ret, =, prod, /, (, 1.0, +]
[=, t, -, 1.0, ;, prod, *=, t, ;, }, ret, =, prod, /, (, 1.0, +, invGamma1pm1, (, t]
[;, prod, *=, t, ;, }, ret, =, prod, /, (, 1.0, +, invGamma1pm1, (, t, -, 1.0, ), )]
[-, 1.0, ;, prod, *=, t, ;, }, ret, =, prod, /, (, 1.0, +, invGamma1pm1, (, t, -, 1.0]
[;, prod, *=, t, ;, }, ret, =, prod, /, (, 1.0, +, invGamma1pm1, (, t, -, 1.0, ), )]
[*=, t, ;, }, ret, =, prod, /, (, 1.0, +, invGamma1pm1, (, t, -, 1.0, ), ), ;, }]
[;, }, ret, =, prod, /, (, 1.0, +, invGamma1pm1, (, t, -, 1.0, ), ), ;, }, else, {]
[=, prod, /, (, 1.0, +, invGamma1pm1, (, t, -, 1.0, ), ), ;, }, else, {, double, prod, =]
[;, }, else, {, double, prod, =, x, ;, double, t, =, x, ;, while, (, t, <, -, 0.5]
[/, (, 1.0, +, invGamma1pm1, (, t, -, 1.0, ), ), ;, }, else, {, double, prod, =, x, ;]
[;, }, else, {, double, prod, =, x, ;, double, t, =, x, ;, while, (, t, <, -, 0.5]
[), ;, }, else, {, double, prod, =, x, ;, double, t, =, x, ;, while, (, t, <, -]
[+, invGamma1pm1, (, t, -, 1.0, ), ), ;, }, else, {, double, prod, =, x, ;, double, t, =]
[), ;, }, else, {, double, prod, =, x, ;, double, t, =, x, ;, while, (, t, <, -]
[), ), ;, }, else, {, double, prod, =, x, ;, double, t, =, x, ;, while, (, t, <]
[-, 1.0, ), ), ;, }, else, {, double, prod, =, x, ;, double, t, =, x, ;, while, (]
[), ), ;, }, else, {, double, prod, =, x, ;, double, t, =, x, ;, while, (, t, <]
[;, double, t, =, x, ;, while, (, t, <, -, 0.5, ), {, t, =, t, +, 1.0, ;]
[;, while, (, t, <, -, 0.5, ), {, t, =, t, +, 1.0, ;, prod, *=, t, ;, }]
[), {, t, =, t, +, 1.0, ;, prod, *=, t, ;, }, ret, =, 1.0, /, (, prod, *]
[<, -, 0.5, ), {, t, =, t, +, 1.0, ;, prod, *=, t, ;, }, ret, =, 1.0, /]
[), {, t, =, t, +, 1.0, ;, prod, *=, t, ;, }, ret, =, 1.0, /, (, prod, *]
[), {, t, =, t, +, 1.0, ;, prod, *=, t, ;, }, ret, =, 1.0, /, (, prod, *]
[=, t, +, 1.0, ;, prod, *=, t, ;, }, ret, =, 1.0, /, (, prod, *, (, 1.0, +]
[;, prod, *=, t, ;, }, ret, =, 1.0, /, (, prod, *, (, 1.0, +, invGamma1pm1, (, t, )]
[+, 1.0, ;, prod, *=, t, ;, }, ret, =, 1.0, /, (, prod, *, (, 1.0, +, invGamma1pm1, (]
[;, prod, *=, t, ;, }, ret, =, 1.0, /, (, prod, *, (, 1.0, +, invGamma1pm1, (, t, )]
[*=, t, ;, }, ret, =, 1.0, /, (, prod, *, (, 1.0, +, invGamma1pm1, (, t, ), ), )]
[;, }, ret, =, 1.0, /, (, prod, *, (, 1.0, +, invGamma1pm1, (, t, ), ), ), ;, }]
[=, 1.0, /, (, prod, *, (, 1.0, +, invGamma1pm1, (, t, ), ), ), ;, }, }, else, {]
[;, }, }, else, {, final, double, y, =, absX, +, LANCZOS_G, +, 0.5, ;, final, double, gammaAbs, =, SQRT_TWO_PI]
[/, (, prod, *, (, 1.0, +, invGamma1pm1, (, t, ), ), ), ;, }, }, else, {, final, double]
[;, }, }, else, {, final, double, y, =, absX, +, LANCZOS_G, +, 0.5, ;, final, double, gammaAbs, =, SQRT_TWO_PI]
[), ;, }, }, else, {, final, double, y, =, absX, +, LANCZOS_G, +, 0.5, ;, final, double, gammaAbs, =]
[*, (, 1.0, +, invGamma1pm1, (, t, ), ), ), ;, }, }, else, {, final, double, y, =, absX]
[), ;, }, }, else, {, final, double, y, =, absX, +, LANCZOS_G, +, 0.5, ;, final, double, gammaAbs, =]
[), ), ;, }, }, else, {, final, double, y, =, absX, +, LANCZOS_G, +, 0.5, ;, final, double, gammaAbs]
[+, invGamma1pm1, (, t, ), ), ), ;, }, }, else, {, final, double, y, =, absX, +, LANCZOS_G, +]
[), ), ;, }, }, else, {, final, double, y, =, absX, +, LANCZOS_G, +, 0.5, ;, final, double, gammaAbs]
[), ), ), ;, }, }, else, {, final, double, y, =, absX, +, LANCZOS_G, +, 0.5, ;, final, double]
[;, final, double, gammaAbs, =, SQRT_TWO_PI, /, x, *, FastMath, ., pow, (, y, ,, absX, +, 0.5, ), *]
[+, 0.5, ;, final, double, gammaAbs, =, SQRT_TWO_PI, /, x, *, FastMath, ., pow, (, y, ,, absX, +, 0.5]
[+, LANCZOS_G, +, 0.5, ;, final, double, gammaAbs, =, SQRT_TWO_PI, /, x, *, FastMath, ., pow, (, y, ,, absX]
[+, 0.5, ;, final, double, gammaAbs, =, SQRT_TWO_PI, /, x, *, FastMath, ., pow, (, y, ,, absX, +, 0.5]
[;, final, double, gammaAbs, =, SQRT_TWO_PI, /, x, *, FastMath, ., pow, (, y, ,, absX, +, 0.5, ), *]
[;, if, (, x, >, 0.0, ), {, ret, =, gammaAbs, ;, }, else, {, ret, =, -, FastMath, .]
[*, lanczos, (, absX, ), ;, if, (, x, >, 0.0, ), {, ret, =, gammaAbs, ;, }, else, {]
[*, FastMath, ., exp, (, -, y, ), *, lanczos, (, absX, ), ;, if, (, x, >, 0.0, )]
[*, FastMath, ., pow, (, y, ,, absX, +, 0.5, ), *, FastMath, ., exp, (, -, y, ), *]
[/, x, *, FastMath, ., pow, (, y, ,, absX, +, 0.5, ), *, FastMath, ., exp, (, -, y]
[*, FastMath, ., pow, (, y, ,, absX, +, 0.5, ), *, FastMath, ., exp, (, -, y, ), *]
[*, FastMath, ., exp, (, -, y, ), *, lanczos, (, absX, ), ;, if, (, x, >, 0.0, )]
[., pow, (, y, ,, absX, +, 0.5, ), *, FastMath, ., exp, (, -, y, ), *, lanczos, (]
[,, absX, +, 0.5, ), *, FastMath, ., exp, (, -, y, ), *, lanczos, (, absX, ), ;, if]
[), *, FastMath, ., exp, (, -, y, ), *, lanczos, (, absX, ), ;, if, (, x, >, 0.0]
[+, 0.5, ), *, FastMath, ., exp, (, -, y, ), *, lanczos, (, absX, ), ;, if, (, x]
[), *, FastMath, ., exp, (, -, y, ), *, lanczos, (, absX, ), ;, if, (, x, >, 0.0]
[*, lanczos, (, absX, ), ;, if, (, x, >, 0.0, ), {, ret, =, gammaAbs, ;, }, else, {]
[., exp, (, -, y, ), *, lanczos, (, absX, ), ;, if, (, x, >, 0.0, ), {, ret]
[), *, lanczos, (, absX, ), ;, if, (, x, >, 0.0, ), {, ret, =, gammaAbs, ;, }, else]
[), *, lanczos, (, absX, ), ;, if, (, x, >, 0.0, ), {, ret, =, gammaAbs, ;, }, else]
[;, if, (, x, >, 0.0, ), {, ret, =, gammaAbs, ;, }, else, {, ret, =, -, FastMath, .]
[), ;, if, (, x, >, 0.0, ), {, ret, =, gammaAbs, ;, }, else, {, ret, =, -, FastMath]
[), {, ret, =, gammaAbs, ;, }, else, {, ret, =, -, FastMath, ., PI, /, (, x, *, FastMath]
[>, 0.0, ), {, ret, =, gammaAbs, ;, }, else, {, ret, =, -, FastMath, ., PI, /, (, x]
[), {, ret, =, gammaAbs, ;, }, else, {, ret, =, -, FastMath, ., PI, /, (, x, *, FastMath]
[=, gammaAbs, ;, }, else, {, ret, =, -, FastMath, ., PI, /, (, x, *, FastMath, ., sin, (]
[;, }, else, {, ret, =, -, FastMath, ., PI, /, (, x, *, FastMath, ., sin, (, FastMath, .]
[=, -, FastMath, ., PI, /, (, x, *, FastMath, ., sin, (, FastMath, ., PI, *, x, ), *]
[;, }, }, return, ret, ;, }, }]
[/, (, x, *, FastMath, ., sin, (, FastMath, ., PI, *, x, ), *, gammaAbs, ), ;, }, }]
[/, (, x, *, FastMath, ., sin, (, FastMath, ., PI, *, x, ), *, gammaAbs, ), ;, }, }]
[., PI, /, (, x, *, FastMath, ., sin, (, FastMath, ., PI, *, x, ), *, gammaAbs, ), ;]
[;, }, }, return, ret, ;, }, }]
[), ;, }, }, return, ret, ;, }, }]
[*, gammaAbs, ), ;, }, }, return, ret, ;, }, }]
[*, FastMath, ., sin, (, FastMath, ., PI, *, x, ), *, gammaAbs, ), ;, }, }, return, ret, ;]
[*, gammaAbs, ), ;, }, }, return, ret, ;, }, }]
[., sin, (, FastMath, ., PI, *, x, ), *, gammaAbs, ), ;, }, }, return, ret, ;, }, }]
[), *, gammaAbs, ), ;, }, }, return, ret, ;, }, }]
[*, x, ), *, gammaAbs, ), ;, }, }, return, ret, ;, }, }]
[., PI, *, x, ), *, gammaAbs, ), ;, }, }, return, ret, ;, }, }]
[), *, gammaAbs, ), ;, }, }, return, ret, ;, }, }]
[), ;, }, }, return, ret, ;, }, }]
[;, }, }]
