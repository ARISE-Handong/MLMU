[jfree, ., data, ., Range, ;, public, class, SymbolAxis, extends, NumberAxis, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[SymbolAxis, extends, NumberAxis, implements, Serializable, {, private, static, final, long, serialVersionUID, =, 7216330468770619716L, ;, public, static, final, Paint, DEFAULT_GRID_BAND_PAINT, =]
[implements, Serializable, {, private, static, final, long, serialVersionUID, =, 7216330468770619716L, ;, public, static, final, Paint, DEFAULT_GRID_BAND_PAINT, =, new, Color, (]
[{, private, static, final, long, serialVersionUID, =, 7216330468770619716L, ;, public, static, final, Paint, DEFAULT_GRID_BAND_PAINT, =, new, Color, (, 232, ,]
[static, final, long, serialVersionUID, =, 7216330468770619716L, ;, public, static, final, Paint, DEFAULT_GRID_BAND_PAINT, =, new, Color, (, 232, ,, 234, ,]
[long, serialVersionUID, =, 7216330468770619716L, ;, public, static, final, Paint, DEFAULT_GRID_BAND_PAINT, =, new, Color, (, 232, ,, 234, ,, 232, ,]
[DEFAULT_GRID_BAND_PAINT, =, new, Color, (, 232, ,, 234, ,, 232, ,, 128, ), ;, public, static, final, Paint, DEFAULT_GRID_BAND_ALTERNATE_PAINT, =]
[Color, (, 232, ,, 234, ,, 232, ,, 128, ), ;, public, static, final, Paint, DEFAULT_GRID_BAND_ALTERNATE_PAINT, =, new, Color, (]
[232, ,, 234, ,, 232, ,, 128, ), ;, public, static, final, Paint, DEFAULT_GRID_BAND_ALTERNATE_PAINT, =, new, Color, (, 0, ,]
[234, ,, 232, ,, 128, ), ;, public, static, final, Paint, DEFAULT_GRID_BAND_ALTERNATE_PAINT, =, new, Color, (, 0, ,, 0, ,]
[232, ,, 128, ), ;, public, static, final, Paint, DEFAULT_GRID_BAND_ALTERNATE_PAINT, =, new, Color, (, 0, ,, 0, ,, 0, ,]
[;, private, transient, Paint, gridBandAlternatePaint, ;, public, SymbolAxis, (, String, label, ,, String, [, ], sv, ), {, super, (]
[Paint, gridBandAlternatePaint, ;, public, SymbolAxis, (, String, label, ,, String, [, ], sv, ), {, super, (, label, ), ;]
[Paint, gridBandAlternatePaint, ;, public, SymbolAxis, (, String, label, ,, String, [, ], sv, ), {, super, (, label, ), ;]
[SymbolAxis, (, String, label, ,, String, [, ], sv, ), {, super, (, label, ), ;, this, ., symbols, =]
[SymbolAxis, (, String, label, ,, String, [, ], sv, ), {, super, (, label, ), ;, this, ., symbols, =]
[,, String, [, ], sv, ), {, super, (, label, ), ;, this, ., symbols, =, Arrays, ., asList, (]
[], sv, ), {, super, (, label, ), ;, this, ., symbols, =, Arrays, ., asList, (, sv, ), ;]
[], sv, ), {, super, (, label, ), ;, this, ., symbols, =, Arrays, ., asList, (, sv, ), ;]
[super, (, label, ), ;, this, ., symbols, =, Arrays, ., asList, (, sv, ), ;, this, ., gridBandsVisible, =]
[label, ), ;, this, ., symbols, =, Arrays, ., asList, (, sv, ), ;, this, ., gridBandsVisible, =, true, ;]
[label, ), ;, this, ., symbols, =, Arrays, ., asList, (, sv, ), ;, this, ., gridBandsVisible, =, true, ;]
[., symbols, =, Arrays, ., asList, (, sv, ), ;, this, ., gridBandsVisible, =, true, ;, this, ., gridBandPaint, =]
[=, Arrays, ., asList, (, sv, ), ;, this, ., gridBandsVisible, =, true, ;, this, ., gridBandPaint, =, DEFAULT_GRID_BAND_PAINT, ;]
[=, Arrays, ., asList, (, sv, ), ;, this, ., gridBandsVisible, =, true, ;, this, ., gridBandPaint, =, DEFAULT_GRID_BAND_PAINT, ;]
[(, sv, ), ;, this, ., gridBandsVisible, =, true, ;, this, ., gridBandPaint, =, DEFAULT_GRID_BAND_PAINT, ;, this, ., gridBandAlternatePaint, =]
[), ;, this, ., gridBandsVisible, =, true, ;, this, ., gridBandPaint, =, DEFAULT_GRID_BAND_PAINT, ;, this, ., gridBandAlternatePaint, =, DEFAULT_GRID_BAND_ALTERNATE_PAINT, ;]
[this, ., gridBandsVisible, =, true, ;, this, ., gridBandPaint, =, DEFAULT_GRID_BAND_PAINT, ;, this, ., gridBandAlternatePaint, =, DEFAULT_GRID_BAND_ALTERNATE_PAINT, ;, setAutoTickUnitSelection, (]
[gridBandsVisible, =, true, ;, this, ., gridBandPaint, =, DEFAULT_GRID_BAND_PAINT, ;, this, ., gridBandAlternatePaint, =, DEFAULT_GRID_BAND_ALTERNATE_PAINT, ;, setAutoTickUnitSelection, (, false, ,]
[;, this, ., gridBandPaint, =, DEFAULT_GRID_BAND_PAINT, ;, this, ., gridBandAlternatePaint, =, DEFAULT_GRID_BAND_ALTERNATE_PAINT, ;, setAutoTickUnitSelection, (, false, ,, false, ), ;]
[., gridBandPaint, =, DEFAULT_GRID_BAND_PAINT, ;, this, ., gridBandAlternatePaint, =, DEFAULT_GRID_BAND_ALTERNATE_PAINT, ;, setAutoTickUnitSelection, (, false, ,, false, ), ;, setAutoRangeStickyZero, (]
[;, setAutoRangeStickyZero, (, false, ), ;, }, public, String, [, ], getSymbols, (, ), {, String, [, ], result, =]
[false, ), ;, }, public, String, [, ], getSymbols, (, ), {, String, [, ], result, =, new, String, []
[false, ), ;, }, public, String, [, ], getSymbols, (, ), {, String, [, ], result, =, new, String, []
[false, ), ;, }, public, String, [, ], getSymbols, (, ), {, String, [, ], result, =, new, String, []
[(, ), {, String, [, ], result, =, new, String, [, this, ., symbols, ., size, (, ), ], ;]
[{, String, [, ], result, =, new, String, [, this, ., symbols, ., size, (, ), ], ;, result, =]
[=, new, String, [, this, ., symbols, ., size, (, ), ], ;, result, =, (, String, [, ], )]
[=, new, String, [, this, ., symbols, ., size, (, ), ], ;, result, =, (, String, [, ], )]
[=, new, String, [, this, ., symbols, ., size, (, ), ], ;, result, =, (, String, [, ], )]
[symbols, ., size, (, ), ], ;, result, =, (, String, [, ], ), this, ., symbols, ., toArray, (]
[), ], ;, result, =, (, String, [, ], ), this, ., symbols, ., toArray, (, result, ), ;, return]
[this, ., symbols, ., toArray, (, result, ), ;, return, result, ;, }, public, boolean, isGridBandsVisible, (, ), {, return]
[this, ., symbols, ., toArray, (, result, ), ;, return, result, ;, }, public, boolean, isGridBandsVisible, (, ), {, return]
[isGridBandsVisible, (, ), {, return, this, ., gridBandsVisible, ;, }, public, void, setGridBandsVisible, (, boolean, flag, ), {, if, (]
[isGridBandsVisible, (, ), {, return, this, ., gridBandsVisible, ;, }, public, void, setGridBandsVisible, (, boolean, flag, ), {, if, (]
[isGridBandsVisible, (, ), {, return, this, ., gridBandsVisible, ;, }, public, void, setGridBandsVisible, (, boolean, flag, ), {, if, (]
[return, this, ., gridBandsVisible, ;, }, public, void, setGridBandsVisible, (, boolean, flag, ), {, if, (, this, ., gridBandsVisible, !=]
[gridBandsVisible, ;, }, public, void, setGridBandsVisible, (, boolean, flag, ), {, if, (, this, ., gridBandsVisible, !=, flag, ), {]
[gridBandsVisible, ;, }, public, void, setGridBandsVisible, (, boolean, flag, ), {, if, (, this, ., gridBandsVisible, !=, flag, ), {]
[void, setGridBandsVisible, (, boolean, flag, ), {, if, (, this, ., gridBandsVisible, !=, flag, ), {, this, ., gridBandsVisible, =]
[(, boolean, flag, ), {, if, (, this, ., gridBandsVisible, !=, flag, ), {, this, ., gridBandsVisible, =, flag, ;]
[flag, ), {, if, (, this, ., gridBandsVisible, !=, flag, ), {, this, ., gridBandsVisible, =, flag, ;, notifyListeners, (]
[if, (, this, ., gridBandsVisible, !=, flag, ), {, this, ., gridBandsVisible, =, flag, ;, notifyListeners, (, new, AxisChangeEvent, (]
[flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public, Paint, getGridBandPaint, (, ), {, return]
[flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public, Paint, getGridBandPaint, (, ), {, return]
[getGridBandPaint, (, ), {, return, this, ., gridBandPaint, ;, }, public, void, setGridBandPaint, (, Paint, paint, ), {, if, (]
[getGridBandPaint, (, ), {, return, this, ., gridBandPaint, ;, }, public, void, setGridBandPaint, (, Paint, paint, ), {, if, (]
[), {, return, this, ., gridBandPaint, ;, }, public, void, setGridBandPaint, (, Paint, paint, ), {, if, (, paint, ==]
[., gridBandPaint, ;, }, public, void, setGridBandPaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw]
[}, public, void, setGridBandPaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }]
[(, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }]
[{, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., gridBandPaint, =]
[(, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., gridBandPaint, =, paint, ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., gridBandPaint, =, paint, ;, notifyListeners, (]
[{, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., gridBandPaint, =, paint, ;, notifyListeners, (, new, AxisChangeEvent, (]
[=, paint, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Paint, getGridBandAlternatePaint, (, ), {, return]
[=, paint, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Paint, getGridBandAlternatePaint, (, ), {, return]
[getGridBandAlternatePaint, (, ), {, return, this, ., gridBandAlternatePaint, ;, }, public, void, setGridBandAlternatePaint, (, Paint, paint, ), {, if, (]
[getGridBandAlternatePaint, (, ), {, return, this, ., gridBandAlternatePaint, ;, }, public, void, setGridBandAlternatePaint, (, Paint, paint, ), {, if, (]
[), {, return, this, ., gridBandAlternatePaint, ;, }, public, void, setGridBandAlternatePaint, (, Paint, paint, ), {, if, (, paint, ==]
[., gridBandAlternatePaint, ;, }, public, void, setGridBandAlternatePaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw]
[}, public, void, setGridBandAlternatePaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }]
[(, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }]
[{, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., gridBandAlternatePaint, =]
[(, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., gridBandAlternatePaint, =, paint, ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., gridBandAlternatePaint, =, paint, ;, notifyListeners, (]
[{, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., gridBandAlternatePaint, =, paint, ;, notifyListeners, (, new, AxisChangeEvent, (]
[this, ), ), ;, }, protected, void, selectAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, throw]
[,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, plotState, ), {, AxisState, info, =]
[,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, plotState, ), {, AxisState, info, =, new, AxisState, (]
[dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, plotState, ), {, AxisState, info, =, new, AxisState, (, cursor, ), ;, if, (]
[PlotRenderingInfo, plotState, ), {, AxisState, info, =, new, AxisState, (, cursor, ), ;, if, (, isVisible, (, ), ), {]
[), {, AxisState, info, =, new, AxisState, (, cursor, ), ;, if, (, isVisible, (, ), ), {, info, =]
[), {, AxisState, info, =, new, AxisState, (, cursor, ), ;, if, (, isVisible, (, ), ), {, info, =]
[=, new, AxisState, (, cursor, ), ;, if, (, isVisible, (, ), ), {, info, =, super, ., draw, (]
[AxisState, (, cursor, ), ;, if, (, isVisible, (, ), ), {, info, =, super, ., draw, (, g2, ,]
[cursor, ), ;, if, (, isVisible, (, ), ), {, info, =, super, ., draw, (, g2, ,, cursor, ,]
[;, if, (, isVisible, (, ), ), {, info, =, super, ., draw, (, g2, ,, cursor, ,, plotArea, ,]
[(, isVisible, (, ), ), {, info, =, super, ., draw, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,]
[(, ), ), {, info, =, super, ., draw, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,]
[super, ., draw, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;, }, if, (]
[super, ., draw, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;, }, if, (]
[,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;, }, if, (, this, ., gridBandsVisible, ), {]
[,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;, }, if, (, this, ., gridBandsVisible, ), {, drawGridBands, (]
[,, dataArea, ,, edge, ,, plotState, ), ;, }, if, (, this, ., gridBandsVisible, ), {, drawGridBands, (, g2, ,]
[,, edge, ,, plotState, ), ;, }, if, (, this, ., gridBandsVisible, ), {, drawGridBands, (, g2, ,, plotArea, ,]
[,, plotState, ), ;, }, if, (, this, ., gridBandsVisible, ), {, drawGridBands, (, g2, ,, plotArea, ,, dataArea, ,]
[), ;, }, if, (, this, ., gridBandsVisible, ), {, drawGridBands, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,]
[), ;, }, if, (, this, ., gridBandsVisible, ), {, drawGridBands, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,]
[{, drawGridBands, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, info, ., getTicks, (, ), ), ;, }, return]
[(, Graphics2D, g2, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, List, ticks, ), {, Shape, savedClip, =]
[(, Graphics2D, g2, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, List, ticks, ), {, Shape, savedClip, =]
[,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, List, ticks, ), {, Shape, savedClip, =, g2, ., getClip, (, ), ;]
[,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, List, ticks, ), {, Shape, savedClip, =, g2, ., getClip, (, ), ;]
[RectangleEdge, edge, ,, List, ticks, ), {, Shape, savedClip, =, g2, ., getClip, (, ), ;, g2, ., clip, (]
[), {, Shape, savedClip, =, g2, ., getClip, (, ), ;, g2, ., clip, (, dataArea, ), ;, if, (]
[), {, Shape, savedClip, =, g2, ., getClip, (, ), ;, g2, ., clip, (, dataArea, ), ;, if, (]
[=, g2, ., getClip, (, ), ;, g2, ., clip, (, dataArea, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (]
[(, ), ;, g2, ., clip, (, dataArea, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {]
[;, g2, ., clip, (, dataArea, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, drawGridBandsHorizontal, (]
[., clip, (, dataArea, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, drawGridBandsHorizontal, (, g2, ,]
[(, dataArea, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, drawGridBandsHorizontal, (, g2, ,, plotArea, ,]
[), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, drawGridBandsHorizontal, (, g2, ,, plotArea, ,, dataArea, ,]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, drawGridBandsHorizontal, (, g2, ,, plotArea, ,, dataArea, ,, true, ,]
[), ), {, drawGridBandsHorizontal, (, g2, ,, plotArea, ,, dataArea, ,, true, ,, ticks, ), ;, }, else, if, (]
[), ), {, drawGridBandsHorizontal, (, g2, ,, plotArea, ,, dataArea, ,, true, ,, ticks, ), ;, }, else, if, (]
[(, g2, ,, plotArea, ,, dataArea, ,, true, ,, ticks, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (]
[,, dataArea, ,, true, ,, ticks, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[,, true, ,, ticks, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, drawGridBandsVertical, (]
[,, ticks, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, drawGridBandsVertical, (, g2, ,]
[), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, drawGridBandsVertical, (, g2, ,, plotArea, ,]
[}, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, drawGridBandsVertical, (, g2, ,, plotArea, ,, dataArea, ,]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, drawGridBandsVertical, (, g2, ,, plotArea, ,, dataArea, ,, true, ,]
[isLeftOrRight, (, edge, ), ), {, drawGridBandsVertical, (, g2, ,, plotArea, ,, dataArea, ,, true, ,, ticks, ), ;, }]
[isLeftOrRight, (, edge, ), ), {, drawGridBandsVertical, (, g2, ,, plotArea, ,, dataArea, ,, true, ,, ticks, ), ;, }]
[), {, drawGridBandsVertical, (, g2, ,, plotArea, ,, dataArea, ,, true, ,, ticks, ), ;, }, g2, ., setClip, (]
[(, Graphics2D, g2, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, boolean, firstGridBandIsDark, ,, List, ticks, ), {, boolean, currentGridBandIsDark, =]
[plotArea, ,, Rectangle2D, dataArea, ,, boolean, firstGridBandIsDark, ,, List, ticks, ), {, boolean, currentGridBandIsDark, =, firstGridBandIsDark, ;, double, yy, =]
[plotArea, ,, Rectangle2D, dataArea, ,, boolean, firstGridBandIsDark, ,, List, ticks, ), {, boolean, currentGridBandIsDark, =, firstGridBandIsDark, ;, double, yy, =]
[;, double, yy, =, dataArea, ., getY, (, ), ;, double, xx1, ,, xx2, ;, double, outlineStrokeWidth, ;, if, (]
[;, double, yy, =, dataArea, ., getY, (, ), ;, double, xx1, ,, xx2, ;, double, outlineStrokeWidth, ;, if, (]
[;, double, yy, =, dataArea, ., getY, (, ), ;, double, xx1, ,, xx2, ;, double, outlineStrokeWidth, ;, if, (]
[), ;, double, xx1, ,, xx2, ;, double, outlineStrokeWidth, ;, if, (, getPlot, (, ), ., getOutlineStroke, (, ), !=]
[xx1, ,, xx2, ;, double, outlineStrokeWidth, ;, if, (, getPlot, (, ), ., getOutlineStroke, (, ), !=, null, ), {]
[xx2, ;, double, outlineStrokeWidth, ;, if, (, getPlot, (, ), ., getOutlineStroke, (, ), !=, null, ), {, outlineStrokeWidth, =]
[xx2, ;, double, outlineStrokeWidth, ;, if, (, getPlot, (, ), ., getOutlineStroke, (, ), !=, null, ), {, outlineStrokeWidth, =]
[;, double, outlineStrokeWidth, ;, if, (, getPlot, (, ), ., getOutlineStroke, (, ), !=, null, ), {, outlineStrokeWidth, =, (]
[;, if, (, getPlot, (, ), ., getOutlineStroke, (, ), !=, null, ), {, outlineStrokeWidth, =, (, (, BasicStroke, )]
[;, if, (, getPlot, (, ), ., getOutlineStroke, (, ), !=, null, ), {, outlineStrokeWidth, =, (, (, BasicStroke, )]
[(, (, BasicStroke, ), getPlot, (, ), ., getOutlineStroke, (, ), ), ., getLineWidth, (, ), ;, }, else, {]
[BasicStroke, ), getPlot, (, ), ., getOutlineStroke, (, ), ), ., getLineWidth, (, ), ;, }, else, {, outlineStrokeWidth, =]
[getOutlineStroke, (, ), ), ., getLineWidth, (, ), ;, }, else, {, outlineStrokeWidth, =, 1d, ;, }, Iterator, iterator, =]
[getOutlineStroke, (, ), ), ., getLineWidth, (, ), ;, }, else, {, outlineStrokeWidth, =, 1d, ;, }, Iterator, iterator, =]
[1d, ;, }, Iterator, iterator, =, ticks, ., iterator, (, ), ;, ValueTick, tick, ;, Rectangle2D, band, ;, while, (]
[1d, ;, }, Iterator, iterator, =, ticks, ., iterator, (, ), ;, ValueTick, tick, ;, Rectangle2D, band, ;, while, (]
[., iterator, (, ), ;, ValueTick, tick, ;, Rectangle2D, band, ;, while, (, iterator, ., hasNext, (, ), ), {]
[(, ), ;, ValueTick, tick, ;, Rectangle2D, band, ;, while, (, iterator, ., hasNext, (, ), ), {, tick, =]
[ValueTick, tick, ;, Rectangle2D, band, ;, while, (, iterator, ., hasNext, (, ), ), {, tick, =, (, ValueTick, )]
[ValueTick, tick, ;, Rectangle2D, band, ;, while, (, iterator, ., hasNext, (, ), ), {, tick, =, (, ValueTick, )]
[while, (, iterator, ., hasNext, (, ), ), {, tick, =, (, ValueTick, ), iterator, ., next, (, ), ;]
[iterator, ., hasNext, (, ), ), {, tick, =, (, ValueTick, ), iterator, ., next, (, ), ;, xx1, =]
[hasNext, (, ), ), {, tick, =, (, ValueTick, ), iterator, ., next, (, ), ;, xx1, =, valueToJava2D, (]
[hasNext, (, ), ), {, tick, =, (, ValueTick, ), iterator, ., next, (, ), ;, xx1, =, valueToJava2D, (]
[hasNext, (, ), ), {, tick, =, (, ValueTick, ), iterator, ., next, (, ), ;, xx1, =, valueToJava2D, (]
[=, (, ValueTick, ), iterator, ., next, (, ), ;, xx1, =, valueToJava2D, (, tick, ., getValue, (, ), -]
[ValueTick, ), iterator, ., next, (, ), ;, xx1, =, valueToJava2D, (, tick, ., getValue, (, ), -, 0.5d, ,]
[iterator, ., next, (, ), ;, xx1, =, valueToJava2D, (, tick, ., getValue, (, ), -, 0.5d, ,, dataArea, ,]
[iterator, ., next, (, ), ;, xx1, =, valueToJava2D, (, tick, ., getValue, (, ), -, 0.5d, ,, dataArea, ,]
[;, xx1, =, valueToJava2D, (, tick, ., getValue, (, ), -, 0.5d, ,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;]
[=, valueToJava2D, (, tick, ., getValue, (, ), -, 0.5d, ,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;, xx2, =]
[(, tick, ., getValue, (, ), -, 0.5d, ,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;, xx2, =, valueToJava2D, (]
[(, tick, ., getValue, (, ), -, 0.5d, ,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;, xx2, =, valueToJava2D, (]
[(, tick, ., getValue, (, ), -, 0.5d, ,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;, xx2, =, valueToJava2D, (]
[-, 0.5d, ,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;, xx2, =, valueToJava2D, (, tick, ., getValue, (, ), +]
[,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;, xx2, =, valueToJava2D, (, tick, ., getValue, (, ), +, 0.5d, ,]
[,, RectangleEdge, ., BOTTOM, ), ;, xx2, =, valueToJava2D, (, tick, ., getValue, (, ), +, 0.5d, ,, dataArea, ,]
[,, RectangleEdge, ., BOTTOM, ), ;, xx2, =, valueToJava2D, (, tick, ., getValue, (, ), +, 0.5d, ,, dataArea, ,]
[=, valueToJava2D, (, tick, ., getValue, (, ), +, 0.5d, ,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;, if, (]
[tick, ., getValue, (, ), +, 0.5d, ,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;, if, (, currentGridBandIsDark, ), {]
[tick, ., getValue, (, ), +, 0.5d, ,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;, if, (, currentGridBandIsDark, ), {]
[), +, 0.5d, ,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (]
[), +, 0.5d, ,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (]
[BOTTOM, ), ;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (, this, ., gridBandPaint, ), ;, }, else, {]
[BOTTOM, ), ;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (, this, ., gridBandPaint, ), ;, }, else, {]
[(, currentGridBandIsDark, ), {, g2, ., setPaint, (, this, ., gridBandPaint, ), ;, }, else, {, g2, ., setPaint, (]
[(, currentGridBandIsDark, ), {, g2, ., setPaint, (, this, ., gridBandPaint, ), ;, }, else, {, g2, ., setPaint, (]
[setPaint, (, this, ., gridBandPaint, ), ;, }, else, {, g2, ., setPaint, (, this, ., gridBandAlternatePaint, ), ;, }]
[this, ., gridBandPaint, ), ;, }, else, {, g2, ., setPaint, (, this, ., gridBandAlternatePaint, ), ;, }, band, =]
[}, else, {, g2, ., setPaint, (, this, ., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, ., Double, (]
[{, g2, ., setPaint, (, this, ., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, ., Double, (, xx1, ,]
[{, g2, ., setPaint, (, this, ., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, ., Double, (, xx1, ,]
[., setPaint, (, this, ., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, ., Double, (, xx1, ,, yy, +]
[(, this, ., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, ., Double, (, xx1, ,, yy, +, outlineStrokeWidth, ,]
[(, this, ., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, ., Double, (, xx1, ,, yy, +, outlineStrokeWidth, ,]
[., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, ., Double, (, xx1, ,, yy, +, outlineStrokeWidth, ,, xx2, -]
[), ;, }, band, =, new, Rectangle2D, ., Double, (, xx1, ,, yy, +, outlineStrokeWidth, ,, xx2, -, xx1, ,]
[), ;, }, band, =, new, Rectangle2D, ., Double, (, xx1, ,, yy, +, outlineStrokeWidth, ,, xx2, -, xx1, ,]
[), ;, }, band, =, new, Rectangle2D, ., Double, (, xx1, ,, yy, +, outlineStrokeWidth, ,, xx2, -, xx1, ,]
[), ;, }, band, =, new, Rectangle2D, ., Double, (, xx1, ,, yy, +, outlineStrokeWidth, ,, xx2, -, xx1, ,]
[Rectangle2D, ., Double, (, xx1, ,, yy, +, outlineStrokeWidth, ,, xx2, -, xx1, ,, dataArea, ., getMaxY, (, ), -]
[Double, (, xx1, ,, yy, +, outlineStrokeWidth, ,, xx2, -, xx1, ,, dataArea, ., getMaxY, (, ), -, yy, -]
[,, yy, +, outlineStrokeWidth, ,, xx2, -, xx1, ,, dataArea, ., getMaxY, (, ), -, yy, -, outlineStrokeWidth, ), ;]
[,, yy, +, outlineStrokeWidth, ,, xx2, -, xx1, ,, dataArea, ., getMaxY, (, ), -, yy, -, outlineStrokeWidth, ), ;]
[,, xx2, -, xx1, ,, dataArea, ., getMaxY, (, ), -, yy, -, outlineStrokeWidth, ), ;, g2, ., fill, (]
[xx1, ,, dataArea, ., getMaxY, (, ), -, yy, -, outlineStrokeWidth, ), ;, g2, ., fill, (, band, ), ;]
[dataArea, ., getMaxY, (, ), -, yy, -, outlineStrokeWidth, ), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =]
[., getMaxY, (, ), -, yy, -, outlineStrokeWidth, ), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !]
[), -, yy, -, outlineStrokeWidth, ), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }]
[), -, yy, -, outlineStrokeWidth, ), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }]
[(, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, Rectangle2D, plotArea, ,, boolean, firstGridBandIsDark, ,, List, ticks, ), {, boolean, currentGridBandIsDark, =]
[drawArea, ,, Rectangle2D, plotArea, ,, boolean, firstGridBandIsDark, ,, List, ticks, ), {, boolean, currentGridBandIsDark, =, firstGridBandIsDark, ;, double, xx, =]
[drawArea, ,, Rectangle2D, plotArea, ,, boolean, firstGridBandIsDark, ,, List, ticks, ), {, boolean, currentGridBandIsDark, =, firstGridBandIsDark, ;, double, xx, =]
[double, xx, =, plotArea, ., getX, (, ), ;, double, yy1, ,, yy2, ;, double, outlineStrokeWidth, ;, Stroke, outlineStroke, =]
[double, xx, =, plotArea, ., getX, (, ), ;, double, yy1, ,, yy2, ;, double, outlineStrokeWidth, ;, Stroke, outlineStroke, =]
[yy1, ,, yy2, ;, double, outlineStrokeWidth, ;, Stroke, outlineStroke, =, getPlot, (, ), ., getOutlineStroke, (, ), ;, if, (]
[yy1, ,, yy2, ;, double, outlineStrokeWidth, ;, Stroke, outlineStroke, =, getPlot, (, ), ., getOutlineStroke, (, ), ;, if, (]
[yy1, ,, yy2, ;, double, outlineStrokeWidth, ;, Stroke, outlineStroke, =, getPlot, (, ), ., getOutlineStroke, (, ), ;, if, (]
[yy2, ;, double, outlineStrokeWidth, ;, Stroke, outlineStroke, =, getPlot, (, ), ., getOutlineStroke, (, ), ;, if, (, outlineStroke, !=]
[double, outlineStrokeWidth, ;, Stroke, outlineStroke, =, getPlot, (, ), ., getOutlineStroke, (, ), ;, if, (, outlineStroke, !=, null, &&]
[double, outlineStrokeWidth, ;, Stroke, outlineStroke, =, getPlot, (, ), ., getOutlineStroke, (, ), ;, if, (, outlineStroke, !=, null, &&]
[=, getPlot, (, ), ., getOutlineStroke, (, ), ;, if, (, outlineStroke, !=, null, &&, outlineStroke, instanceof, BasicStroke, ), {]
[(, ), ., getOutlineStroke, (, ), ;, if, (, outlineStroke, !=, null, &&, outlineStroke, instanceof, BasicStroke, ), {, outlineStrokeWidth, =]
[(, ), ., getOutlineStroke, (, ), ;, if, (, outlineStroke, !=, null, &&, outlineStroke, instanceof, BasicStroke, ), {, outlineStrokeWidth, =]
[), ., getOutlineStroke, (, ), ;, if, (, outlineStroke, !=, null, &&, outlineStroke, instanceof, BasicStroke, ), {, outlineStrokeWidth, =, (]
[(, ), ;, if, (, outlineStroke, !=, null, &&, outlineStroke, instanceof, BasicStroke, ), {, outlineStrokeWidth, =, (, (, BasicStroke, )]
[instanceof, BasicStroke, ), {, outlineStrokeWidth, =, (, (, BasicStroke, ), outlineStroke, ), ., getLineWidth, (, ), ;, }, else, {]
[), {, outlineStrokeWidth, =, (, (, BasicStroke, ), outlineStroke, ), ., getLineWidth, (, ), ;, }, else, {, outlineStrokeWidth, =]
[BasicStroke, ), outlineStroke, ), ., getLineWidth, (, ), ;, }, else, {, outlineStrokeWidth, =, 1d, ;, }, Iterator, iterator, =]
[BasicStroke, ), outlineStroke, ), ., getLineWidth, (, ), ;, }, else, {, outlineStrokeWidth, =, 1d, ;, }, Iterator, iterator, =]
[1d, ;, }, Iterator, iterator, =, ticks, ., iterator, (, ), ;, ValueTick, tick, ;, Rectangle2D, band, ;, while, (]
[1d, ;, }, Iterator, iterator, =, ticks, ., iterator, (, ), ;, ValueTick, tick, ;, Rectangle2D, band, ;, while, (]
[., iterator, (, ), ;, ValueTick, tick, ;, Rectangle2D, band, ;, while, (, iterator, ., hasNext, (, ), ), {]
[(, ), ;, ValueTick, tick, ;, Rectangle2D, band, ;, while, (, iterator, ., hasNext, (, ), ), {, tick, =]
[ValueTick, tick, ;, Rectangle2D, band, ;, while, (, iterator, ., hasNext, (, ), ), {, tick, =, (, ValueTick, )]
[ValueTick, tick, ;, Rectangle2D, band, ;, while, (, iterator, ., hasNext, (, ), ), {, tick, =, (, ValueTick, )]
[while, (, iterator, ., hasNext, (, ), ), {, tick, =, (, ValueTick, ), iterator, ., next, (, ), ;]
[iterator, ., hasNext, (, ), ), {, tick, =, (, ValueTick, ), iterator, ., next, (, ), ;, yy1, =]
[hasNext, (, ), ), {, tick, =, (, ValueTick, ), iterator, ., next, (, ), ;, yy1, =, valueToJava2D, (]
[hasNext, (, ), ), {, tick, =, (, ValueTick, ), iterator, ., next, (, ), ;, yy1, =, valueToJava2D, (]
[hasNext, (, ), ), {, tick, =, (, ValueTick, ), iterator, ., next, (, ), ;, yy1, =, valueToJava2D, (]
[=, (, ValueTick, ), iterator, ., next, (, ), ;, yy1, =, valueToJava2D, (, tick, ., getValue, (, ), +]
[ValueTick, ), iterator, ., next, (, ), ;, yy1, =, valueToJava2D, (, tick, ., getValue, (, ), +, 0.5d, ,]
[iterator, ., next, (, ), ;, yy1, =, valueToJava2D, (, tick, ., getValue, (, ), +, 0.5d, ,, plotArea, ,]
[iterator, ., next, (, ), ;, yy1, =, valueToJava2D, (, tick, ., getValue, (, ), +, 0.5d, ,, plotArea, ,]
[;, yy1, =, valueToJava2D, (, tick, ., getValue, (, ), +, 0.5d, ,, plotArea, ,, RectangleEdge, ., LEFT, ), ;]
[=, valueToJava2D, (, tick, ., getValue, (, ), +, 0.5d, ,, plotArea, ,, RectangleEdge, ., LEFT, ), ;, yy2, =]
[(, tick, ., getValue, (, ), +, 0.5d, ,, plotArea, ,, RectangleEdge, ., LEFT, ), ;, yy2, =, valueToJava2D, (]
[(, tick, ., getValue, (, ), +, 0.5d, ,, plotArea, ,, RectangleEdge, ., LEFT, ), ;, yy2, =, valueToJava2D, (]
[(, tick, ., getValue, (, ), +, 0.5d, ,, plotArea, ,, RectangleEdge, ., LEFT, ), ;, yy2, =, valueToJava2D, (]
[+, 0.5d, ,, plotArea, ,, RectangleEdge, ., LEFT, ), ;, yy2, =, valueToJava2D, (, tick, ., getValue, (, ), -]
[,, plotArea, ,, RectangleEdge, ., LEFT, ), ;, yy2, =, valueToJava2D, (, tick, ., getValue, (, ), -, 0.5d, ,]
[,, RectangleEdge, ., LEFT, ), ;, yy2, =, valueToJava2D, (, tick, ., getValue, (, ), -, 0.5d, ,, plotArea, ,]
[,, RectangleEdge, ., LEFT, ), ;, yy2, =, valueToJava2D, (, tick, ., getValue, (, ), -, 0.5d, ,, plotArea, ,]
[=, valueToJava2D, (, tick, ., getValue, (, ), -, 0.5d, ,, plotArea, ,, RectangleEdge, ., LEFT, ), ;, if, (]
[tick, ., getValue, (, ), -, 0.5d, ,, plotArea, ,, RectangleEdge, ., LEFT, ), ;, if, (, currentGridBandIsDark, ), {]
[tick, ., getValue, (, ), -, 0.5d, ,, plotArea, ,, RectangleEdge, ., LEFT, ), ;, if, (, currentGridBandIsDark, ), {]
[), -, 0.5d, ,, plotArea, ,, RectangleEdge, ., LEFT, ), ;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (]
[), -, 0.5d, ,, plotArea, ,, RectangleEdge, ., LEFT, ), ;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (]
[LEFT, ), ;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (, this, ., gridBandPaint, ), ;, }, else, {]
[LEFT, ), ;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (, this, ., gridBandPaint, ), ;, }, else, {]
[(, currentGridBandIsDark, ), {, g2, ., setPaint, (, this, ., gridBandPaint, ), ;, }, else, {, g2, ., setPaint, (]
[(, currentGridBandIsDark, ), {, g2, ., setPaint, (, this, ., gridBandPaint, ), ;, }, else, {, g2, ., setPaint, (]
[setPaint, (, this, ., gridBandPaint, ), ;, }, else, {, g2, ., setPaint, (, this, ., gridBandAlternatePaint, ), ;, }]
[this, ., gridBandPaint, ), ;, }, else, {, g2, ., setPaint, (, this, ., gridBandAlternatePaint, ), ;, }, band, =]
[}, else, {, g2, ., setPaint, (, this, ., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, ., Double, (]
[}, else, {, g2, ., setPaint, (, this, ., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, ., Double, (]
[{, g2, ., setPaint, (, this, ., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, ., Double, (, xx, +]
[., setPaint, (, this, ., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, ., Double, (, xx, +, outlineStrokeWidth, ,]
[(, this, ., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, ., Double, (, xx, +, outlineStrokeWidth, ,, yy1, ,]
[(, this, ., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, ., Double, (, xx, +, outlineStrokeWidth, ,, yy1, ,]
[(, this, ., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, ., Double, (, xx, +, outlineStrokeWidth, ,, yy1, ,]
[(, this, ., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, ., Double, (, xx, +, outlineStrokeWidth, ,, yy1, ,]
[}, band, =, new, Rectangle2D, ., Double, (, xx, +, outlineStrokeWidth, ,, yy1, ,, plotArea, ., getMaxX, (, ), -]
[=, new, Rectangle2D, ., Double, (, xx, +, outlineStrokeWidth, ,, yy1, ,, plotArea, ., getMaxX, (, ), -, xx, -]
[Rectangle2D, ., Double, (, xx, +, outlineStrokeWidth, ,, yy1, ,, plotArea, ., getMaxX, (, ), -, xx, -, outlineStrokeWidth, ,]
[Rectangle2D, ., Double, (, xx, +, outlineStrokeWidth, ,, yy1, ,, plotArea, ., getMaxX, (, ), -, xx, -, outlineStrokeWidth, ,]
[Double, (, xx, +, outlineStrokeWidth, ,, yy1, ,, plotArea, ., getMaxX, (, ), -, xx, -, outlineStrokeWidth, ,, yy2, -]
[+, outlineStrokeWidth, ,, yy1, ,, plotArea, ., getMaxX, (, ), -, xx, -, outlineStrokeWidth, ,, yy2, -, yy1, ), ;]
[+, outlineStrokeWidth, ,, yy1, ,, plotArea, ., getMaxX, (, ), -, xx, -, outlineStrokeWidth, ,, yy2, -, yy1, ), ;]
[,, plotArea, ., getMaxX, (, ), -, xx, -, outlineStrokeWidth, ,, yy2, -, yy1, ), ;, g2, ., fill, (]
[getMaxX, (, ), -, xx, -, outlineStrokeWidth, ,, yy2, -, yy1, ), ;, g2, ., fill, (, band, ), ;]
[), -, xx, -, outlineStrokeWidth, ,, yy2, -, yy1, ), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =]
[-, xx, -, outlineStrokeWidth, ,, yy2, -, yy1, ), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !]
[outlineStrokeWidth, ,, yy2, -, yy1, ), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }]
[outlineStrokeWidth, ,, yy2, -, yy1, ), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }]
[!, currentGridBandIsDark, ;, }, g2, ., setPaintMode, (, ), ;, }, protected, void, autoAdjustRange, (, ), {, Plot, plot, =]
[setPaintMode, (, ), ;, }, protected, void, autoAdjustRange, (, ), {, Plot, plot, =, getPlot, (, ), ;, if, (]
[setPaintMode, (, ), ;, }, protected, void, autoAdjustRange, (, ), {, Plot, plot, =, getPlot, (, ), ;, if, (]
[), ;, }, protected, void, autoAdjustRange, (, ), {, Plot, plot, =, getPlot, (, ), ;, if, (, plot, ==]
[{, Plot, plot, =, getPlot, (, ), ;, if, (, plot, ==, null, ), {, return, ;, }, if, (]
[{, Plot, plot, =, getPlot, (, ), ;, if, (, plot, ==, null, ), {, return, ;, }, if, (]
[if, (, plot, ==, null, ), {, return, ;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, double, upper, =]
[if, (, plot, ==, null, ), {, return, ;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, double, upper, =]
[if, (, plot, ==, null, ), {, return, ;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, double, upper, =]
[if, (, plot, ==, null, ), {, return, ;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, double, upper, =]
[;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, double, upper, =, this, ., symbols, ., size, (, ), -]
[instanceof, ValueAxisPlot, ), {, double, upper, =, this, ., symbols, ., size, (, ), -, 1, ;, double, lower, =]
[upper, =, this, ., symbols, ., size, (, ), -, 1, ;, double, lower, =, 0, ;, double, range, =]
[upper, =, this, ., symbols, ., size, (, ), -, 1, ;, double, lower, =, 0, ;, double, range, =]
[this, ., symbols, ., size, (, ), -, 1, ;, double, lower, =, 0, ;, double, range, =, upper, -]
[(, ), -, 1, ;, double, lower, =, 0, ;, double, range, =, upper, -, lower, ;, double, minRange, =]
[lower, =, 0, ;, double, range, =, upper, -, lower, ;, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (]
[lower, =, 0, ;, double, range, =, upper, -, lower, ;, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (]
[0, ;, double, range, =, upper, -, lower, ;, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <]
[range, =, upper, -, lower, ;, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <, minRange, ), {]
[upper, -, lower, ;, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <, minRange, ), {, upper, =]
[upper, -, lower, ;, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <, minRange, ), {, upper, =]
[-, lower, ;, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <, minRange, ), {, upper, =, (]
[-, lower, ;, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <, minRange, ), {, upper, =, (]
[-, lower, ;, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <, minRange, ), {, upper, =, (]
[;, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <, minRange, ), {, upper, =, (, upper, +]
[minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <, minRange, ), {, upper, =, (, upper, +, lower, +]
[(, ), ;, if, (, range, <, minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /]
[;, if, (, range, <, minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;]
[(, range, <, minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =]
[(, range, <, minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =]
[range, <, minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =, (]
[range, <, minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =, (]
[range, <, minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =, (]
[minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =, (, upper, +]
[{, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =, (, upper, +, lower, -]
[(, upper, +, lower, +, minRange, ), /, 2, ;, lower, =, (, upper, +, lower, -, minRange, ), /]
[), /, 2, ;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;, }, double, upperMargin, =]
[=, (, upper, +, lower, -, minRange, ), /, 2, ;, }, double, upperMargin, =, 0.5, ;, double, lowerMargin, =]
[lower, -, minRange, ), /, 2, ;, }, double, upperMargin, =, 0.5, ;, double, lowerMargin, =, 0.5, ;, if, (]
[}, double, upperMargin, =, 0.5, ;, double, lowerMargin, =, 0.5, ;, if, (, getAutoRangeIncludesZero, (, ), ), {, if, (]
[lowerMargin, =, 0.5, ;, if, (, getAutoRangeIncludesZero, (, ), ), {, if, (, getAutoRangeStickyZero, (, ), ), {, if, (]
[lowerMargin, =, 0.5, ;, if, (, getAutoRangeIncludesZero, (, ), ), {, if, (, getAutoRangeStickyZero, (, ), ), {, if, (]
[0.5, ;, if, (, getAutoRangeIncludesZero, (, ), ), {, if, (, getAutoRangeStickyZero, (, ), ), {, if, (, upper, <=]
[(, getAutoRangeIncludesZero, (, ), ), {, if, (, getAutoRangeStickyZero, (, ), ), {, if, (, upper, <=, 0.0, ), {]
[(, ), ), {, if, (, getAutoRangeStickyZero, (, ), ), {, if, (, upper, <=, 0.0, ), {, upper, =]
[(, getAutoRangeStickyZero, (, ), ), {, if, (, upper, <=, 0.0, ), {, upper, =, 0.0, ;, }, else, {]
[(, ), ), {, if, (, upper, <=, 0.0, ), {, upper, =, 0.0, ;, }, else, {, upper, =]
[(, ), ), {, if, (, upper, <=, 0.0, ), {, upper, =, 0.0, ;, }, else, {, upper, =]
[), {, if, (, upper, <=, 0.0, ), {, upper, =, 0.0, ;, }, else, {, upper, =, upper, +]
[<=, 0.0, ), {, upper, =, 0.0, ;, }, else, {, upper, =, upper, +, upperMargin, ;, }, if, (]
[<=, 0.0, ), {, upper, =, 0.0, ;, }, else, {, upper, =, upper, +, upperMargin, ;, }, if, (]
[), {, upper, =, 0.0, ;, }, else, {, upper, =, upper, +, upperMargin, ;, }, if, (, lower, >=]
[=, 0.0, ;, }, else, {, upper, =, upper, +, upperMargin, ;, }, if, (, lower, >=, 0.0, ), {]
[;, }, else, {, upper, =, upper, +, upperMargin, ;, }, if, (, lower, >=, 0.0, ), {, lower, =]
[=, upper, +, upperMargin, ;, }, if, (, lower, >=, 0.0, ), {, lower, =, 0.0, ;, }, else, {]
[+, upperMargin, ;, }, if, (, lower, >=, 0.0, ), {, lower, =, 0.0, ;, }, else, {, lower, =]
[+, upperMargin, ;, }, if, (, lower, >=, 0.0, ), {, lower, =, 0.0, ;, }, else, {, lower, =]
[;, }, if, (, lower, >=, 0.0, ), {, lower, =, 0.0, ;, }, else, {, lower, =, lower, -]
[0.0, ), {, lower, =, 0.0, ;, }, else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {]
[{, lower, =, 0.0, ;, }, else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper, =]
[{, lower, =, 0.0, ;, }, else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper, =]
[;, }, else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper, =, Math, ., max, (]
[else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper, =, Math, ., max, (, 0.0, ,]
[else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper, =, Math, ., max, (, 0.0, ,]
[lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper, =, Math, ., max, (, 0.0, ,, upper, +]
[-, lowerMargin, ;, }, }, else, {, upper, =, Math, ., max, (, 0.0, ,, upper, +, upperMargin, ), ;]
[;, }, }, else, {, upper, =, Math, ., max, (, 0.0, ,, upper, +, upperMargin, ), ;, lower, =]
[;, }, }, else, {, upper, =, Math, ., max, (, 0.0, ,, upper, +, upperMargin, ), ;, lower, =]
[{, upper, =, Math, ., max, (, 0.0, ,, upper, +, upperMargin, ), ;, lower, =, Math, ., min, (]
[=, Math, ., max, (, 0.0, ,, upper, +, upperMargin, ), ;, lower, =, Math, ., min, (, 0.0, ,]
[=, Math, ., max, (, 0.0, ,, upper, +, upperMargin, ), ;, lower, =, Math, ., min, (, 0.0, ,]
[., max, (, 0.0, ,, upper, +, upperMargin, ), ;, lower, =, Math, ., min, (, 0.0, ,, lower, -]
[;, lower, =, Math, ., min, (, 0.0, ,, lower, -, lowerMargin, ), ;, }, }, else, {, if, (]
[0.0, ,, lower, -, lowerMargin, ), ;, }, }, else, {, if, (, getAutoRangeStickyZero, (, ), ), {, if, (]
[0.0, ,, lower, -, lowerMargin, ), ;, }, }, else, {, if, (, getAutoRangeStickyZero, (, ), ), {, if, (]
[lower, -, lowerMargin, ), ;, }, }, else, {, if, (, getAutoRangeStickyZero, (, ), ), {, if, (, upper, <=]
[), ;, }, }, else, {, if, (, getAutoRangeStickyZero, (, ), ), {, if, (, upper, <=, 0.0, ), {]
[}, }, else, {, if, (, getAutoRangeStickyZero, (, ), ), {, if, (, upper, <=, 0.0, ), {, upper, =]
[}, }, else, {, if, (, getAutoRangeStickyZero, (, ), ), {, if, (, upper, <=, 0.0, ), {, upper, =]
[if, (, getAutoRangeStickyZero, (, ), ), {, if, (, upper, <=, 0.0, ), {, upper, =, Math, ., min, (]
[getAutoRangeStickyZero, (, ), ), {, if, (, upper, <=, 0.0, ), {, upper, =, Math, ., min, (, 0.0, ,]
[getAutoRangeStickyZero, (, ), ), {, if, (, upper, <=, 0.0, ), {, upper, =, Math, ., min, (, 0.0, ,]
[), ), {, if, (, upper, <=, 0.0, ), {, upper, =, Math, ., min, (, 0.0, ,, upper, +]
[<=, 0.0, ), {, upper, =, Math, ., min, (, 0.0, ,, upper, +, upperMargin, ), ;, }, else, {]
[), {, upper, =, Math, ., min, (, 0.0, ,, upper, +, upperMargin, ), ;, }, else, {, upper, =]
[), {, upper, =, Math, ., min, (, 0.0, ,, upper, +, upperMargin, ), ;, }, else, {, upper, =]
[upper, =, Math, ., min, (, 0.0, ,, upper, +, upperMargin, ), ;, }, else, {, upper, =, upper, +]
[upper, =, Math, ., min, (, 0.0, ,, upper, +, upperMargin, ), ;, }, else, {, upper, =, upper, +]
[Math, ., min, (, 0.0, ,, upper, +, upperMargin, ), ;, }, else, {, upper, =, upper, +, upperMargin, *]
[,, upper, +, upperMargin, ), ;, }, else, {, upper, =, upper, +, upperMargin, *, range, ;, }, if, (]
[,, upper, +, upperMargin, ), ;, }, else, {, upper, =, upper, +, upperMargin, *, range, ;, }, if, (]
[+, upperMargin, ), ;, }, else, {, upper, =, upper, +, upperMargin, *, range, ;, }, if, (, lower, >=]
[;, }, else, {, upper, =, upper, +, upperMargin, *, range, ;, }, if, (, lower, >=, 0.0, ), {]
[else, {, upper, =, upper, +, upperMargin, *, range, ;, }, if, (, lower, >=, 0.0, ), {, lower, =]
[else, {, upper, =, upper, +, upperMargin, *, range, ;, }, if, (, lower, >=, 0.0, ), {, lower, =]
[upper, +, upperMargin, *, range, ;, }, if, (, lower, >=, 0.0, ), {, lower, =, Math, ., max, (]
[upperMargin, *, range, ;, }, if, (, lower, >=, 0.0, ), {, lower, =, Math, ., max, (, 0.0, ,]
[upperMargin, *, range, ;, }, if, (, lower, >=, 0.0, ), {, lower, =, Math, ., max, (, 0.0, ,]
[range, ;, }, if, (, lower, >=, 0.0, ), {, lower, =, Math, ., max, (, 0.0, ,, lower, -]
[>=, 0.0, ), {, lower, =, Math, ., max, (, 0.0, ,, lower, -, lowerMargin, ), ;, }, else, {]
[), {, lower, =, Math, ., max, (, 0.0, ,, lower, -, lowerMargin, ), ;, }, else, {, lower, =]
[), {, lower, =, Math, ., max, (, 0.0, ,, lower, -, lowerMargin, ), ;, }, else, {, lower, =]
[lower, =, Math, ., max, (, 0.0, ,, lower, -, lowerMargin, ), ;, }, else, {, lower, =, lower, -]
[0.0, ,, lower, -, lowerMargin, ), ;, }, else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {]
[lower, -, lowerMargin, ), ;, }, else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper, =]
[lower, -, lowerMargin, ), ;, }, else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper, =]
[lowerMargin, ), ;, }, else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper, =, upper, +]
[;, }, else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper, =, upper, +, upperMargin, ;]
[else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper, =, upper, +, upperMargin, ;, lower, =]
[else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper, =, upper, +, upperMargin, ;, lower, =]
[lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper, =, upper, +, upperMargin, ;, lower, =, lower, -]
[lowerMargin, ;, }, }, else, {, upper, =, upper, +, upperMargin, ;, lower, =, lower, -, lowerMargin, ;, }, }]
[}, }, else, {, upper, =, upper, +, upperMargin, ;, lower, =, lower, -, lowerMargin, ;, }, }, setRange, (]
[{, upper, =, upper, +, upperMargin, ;, lower, =, lower, -, lowerMargin, ;, }, }, setRange, (, new, Range, (]
[=, upper, +, upperMargin, ;, lower, =, lower, -, lowerMargin, ;, }, }, setRange, (, new, Range, (, lower, ,]
[upperMargin, ;, lower, =, lower, -, lowerMargin, ;, }, }, setRange, (, new, Range, (, lower, ,, upper, ), ,]
[lower, =, lower, -, lowerMargin, ;, }, }, setRange, (, new, Range, (, lower, ,, upper, ), ,, false, ,]
[public, List, refreshTicks, (, Graphics2D, g2, ,, AxisState, state, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, ticks, =]
[Graphics2D, g2, ,, AxisState, state, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, ticks, =, null, ;, if, (]
[Graphics2D, g2, ,, AxisState, state, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, ticks, =, null, ;, if, (]
[state, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, ticks, =, null, ;, if, (, RectangleEdge, ., isTopOrBottom, (]
[,, RectangleEdge, edge, ), {, List, ticks, =, null, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {]
[edge, ), {, List, ticks, =, null, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, ticks, =]
[{, List, ticks, =, null, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, ticks, =, refreshTicksHorizontal, (]
[ticks, =, null, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, ticks, =, refreshTicksHorizontal, (, g2, ,]
[null, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, ticks, =, refreshTicksHorizontal, (, g2, ,, dataArea, ,]
[(, edge, ), ), {, ticks, =, refreshTicksHorizontal, (, g2, ,, dataArea, ,, edge, ), ;, }, else, if, (]
[(, edge, ), ), {, ticks, =, refreshTicksHorizontal, (, g2, ,, dataArea, ,, edge, ), ;, }, else, if, (]
[{, ticks, =, refreshTicksHorizontal, (, g2, ,, dataArea, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (]
[(, g2, ,, dataArea, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[,, dataArea, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, ticks, =]
[,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, ticks, =, refreshTicksVertical, (]
[), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, ticks, =, refreshTicksVertical, (, g2, ,]
[}, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, ticks, =, refreshTicksVertical, (, g2, ,, dataArea, ,]
[., isLeftOrRight, (, edge, ), ), {, ticks, =, refreshTicksVertical, (, g2, ,, dataArea, ,, edge, ), ;, }, return]
[ticks, ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, ticks, =]
[,, RectangleEdge, edge, ), {, List, ticks, =, new, java, ., util, ., ArrayList, (, ), ;, Font, tickLabelFont, =]
[{, List, ticks, =, new, java, ., util, ., ArrayList, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;]
[{, List, ticks, =, new, java, ., util, ., ArrayList, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;]
[new, java, ., util, ., ArrayList, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (]
[(, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, double, size, =]
[(, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, double, size, =]
[., setFont, (, tickLabelFont, ), ;, double, size, =, getTickUnit, (, ), ., getSize, (, ), ;, int, count, =]
[size, =, getTickUnit, (, ), ., getSize, (, ), ;, int, count, =, calculateVisibleTickCount, (, ), ;, double, lowestTickValue, =]
[(, ), ;, int, count, =, calculateVisibleTickCount, (, ), ;, double, lowestTickValue, =, calculateLowestVisibleTickValue, (, ), ;, double, previousDrawnTickLabelPos, =]
[=, calculateVisibleTickCount, (, ), ;, double, lowestTickValue, =, calculateLowestVisibleTickValue, (, ), ;, double, previousDrawnTickLabelPos, =, 0.0, ;, double, previousDrawnTickLabelLength, =]
[;, double, lowestTickValue, =, calculateLowestVisibleTickValue, (, ), ;, double, previousDrawnTickLabelPos, =, 0.0, ;, double, previousDrawnTickLabelLength, =, 0.0, ;, if, (]
[;, double, lowestTickValue, =, calculateLowestVisibleTickValue, (, ), ;, double, previousDrawnTickLabelPos, =, 0.0, ;, double, previousDrawnTickLabelLength, =, 0.0, ;, if, (]
[lowestTickValue, =, calculateLowestVisibleTickValue, (, ), ;, double, previousDrawnTickLabelPos, =, 0.0, ;, double, previousDrawnTickLabelLength, =, 0.0, ;, if, (, count, <=]
[lowestTickValue, =, calculateLowestVisibleTickValue, (, ), ;, double, previousDrawnTickLabelPos, =, 0.0, ;, double, previousDrawnTickLabelLength, =, 0.0, ;, if, (, count, <=]
[;, double, previousDrawnTickLabelLength, =, 0.0, ;, if, (, count, <=, ValueAxis, ., MAXIMUM_TICK_COUNT, ), {, for, (, int, i, =]
[previousDrawnTickLabelLength, =, 0.0, ;, if, (, count, <=, ValueAxis, ., MAXIMUM_TICK_COUNT, ), {, for, (, int, i, =, 0, ;]
[previousDrawnTickLabelLength, =, 0.0, ;, if, (, count, <=, ValueAxis, ., MAXIMUM_TICK_COUNT, ), {, for, (, int, i, =, 0, ;]
[0.0, ;, if, (, count, <=, ValueAxis, ., MAXIMUM_TICK_COUNT, ), {, for, (, int, i, =, 0, ;, i, <]
[if, (, count, <=, ValueAxis, ., MAXIMUM_TICK_COUNT, ), {, for, (, int, i, =, 0, ;, i, <, count, ;]
[if, (, count, <=, ValueAxis, ., MAXIMUM_TICK_COUNT, ), {, for, (, int, i, =, 0, ;, i, <, count, ;]
[), {, for, (, int, i, =, 0, ;, i, <, count, ;, i, ++, ), {, double, currentTickValue, =]
[), {, for, (, int, i, =, 0, ;, i, <, count, ;, i, ++, ), {, double, currentTickValue, =]
[for, (, int, i, =, 0, ;, i, <, count, ;, i, ++, ), {, double, currentTickValue, =, lowestTickValue, +]
[(, int, i, =, 0, ;, i, <, count, ;, i, ++, ), {, double, currentTickValue, =, lowestTickValue, +, (]
[(, int, i, =, 0, ;, i, <, count, ;, i, ++, ), {, double, currentTickValue, =, lowestTickValue, +, (]
[i, =, 0, ;, i, <, count, ;, i, ++, ), {, double, currentTickValue, =, lowestTickValue, +, (, i, *]
[count, ;, i, ++, ), {, double, currentTickValue, =, lowestTickValue, +, (, i, *, size, ), ;, double, xx, =]
[i, ++, ), {, double, currentTickValue, =, lowestTickValue, +, (, i, *, size, ), ;, double, xx, =, valueToJava2D, (]
[), {, double, currentTickValue, =, lowestTickValue, +, (, i, *, size, ), ;, double, xx, =, valueToJava2D, (, currentTickValue, ,]
[double, currentTickValue, =, lowestTickValue, +, (, i, *, size, ), ;, double, xx, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,]
[), ;, double, xx, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =]
[(, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (]
[(, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (]
[,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=]
[edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {]
[;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, tickLabel, =]
[;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, tickLabel, =]
[NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, tickLabel, =, formatter, ., format, (]
[;, if, (, formatter, !=, null, ), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {]
[(, formatter, !=, null, ), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =]
[!=, null, ), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, valueToString, (]
[., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, valueToString, (, currentTickValue, ), ;, }, Rectangle2D, bounds, =]
[., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, valueToString, (, currentTickValue, ), ;, }, Rectangle2D, bounds, =]
[), ;, }, else, {, tickLabel, =, valueToString, (, currentTickValue, ), ;, }, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (]
[}, else, {, tickLabel, =, valueToString, (, currentTickValue, ), ;, }, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,]
[{, tickLabel, =, valueToString, (, currentTickValue, ), ;, }, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,, g2, ,]
[{, tickLabel, =, valueToString, (, currentTickValue, ), ;, }, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,, g2, ,]
[bounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,, g2, ,, g2, ., getFontMetrics, (, ), ), ;, double, tickLabelLength, =]
[bounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,, g2, ,, g2, ., getFontMetrics, (, ), ), ;, double, tickLabelLength, =]
[getTextBounds, (, tickLabel, ,, g2, ,, g2, ., getFontMetrics, (, ), ), ;, double, tickLabelLength, =, isVerticalTickLabels, (, ), ?]
[getTextBounds, (, tickLabel, ,, g2, ,, g2, ., getFontMetrics, (, ), ), ;, double, tickLabelLength, =, isVerticalTickLabels, (, ), ?]
[g2, ., getFontMetrics, (, ), ), ;, double, tickLabelLength, =, isVerticalTickLabels, (, ), ?, bounds, ., getHeight, (, ), :]
[g2, ., getFontMetrics, (, ), ), ;, double, tickLabelLength, =, isVerticalTickLabels, (, ), ?, bounds, ., getHeight, (, ), :]
[=, isVerticalTickLabels, (, ), ?, bounds, ., getHeight, (, ), :, bounds, ., getWidth, (, ), ;, boolean, tickLabelsOverlapping, =]
[?, bounds, ., getHeight, (, ), :, bounds, ., getWidth, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (]
[?, bounds, ., getHeight, (, ), :, bounds, ., getWidth, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (]
[., getHeight, (, ), :, bounds, ., getWidth, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >]
[., getWidth, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >, 0, ), {, double, avgTickLabelLength, =]
[., getWidth, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >, 0, ), {, double, avgTickLabelLength, =]
[getWidth, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >, 0, ), {, double, avgTickLabelLength, =, (]
[getWidth, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >, 0, ), {, double, avgTickLabelLength, =, (]
[), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >, 0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +]
[tickLabelsOverlapping, =, false, ;, if, (, i, >, 0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /]
[if, (, i, >, 0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if, (]
[if, (, i, >, 0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if, (]
[if, (, i, >, 0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if, (]
[0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if, (, Math, ., abs, (]
[0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if, (, Math, ., abs, (]
[{, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if, (, Math, ., abs, (, xx, -]
[=, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if, (, Math, ., abs, (, xx, -, previousDrawnTickLabelPos, ), <]
[+, tickLabelLength, ), /, 2.0, ;, if, (, Math, ., abs, (, xx, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {]
[), /, 2.0, ;, if, (, Math, ., abs, (, xx, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =]
[Math, ., abs, (, xx, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true, ;, }, }, if, (]
[(, xx, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping, ), {]
[-, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =]
[), {, tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;, }, else, {]
[tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;, }, else, {, previousDrawnTickLabelPos, =]
[true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;, }, else, {, previousDrawnTickLabelPos, =, xx, ;]
[}, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;, }, else, {, previousDrawnTickLabelPos, =, xx, ;, previousDrawnTickLabelLength, =]
[{, tickLabel, =, "", ;, }, else, {, previousDrawnTickLabelPos, =, xx, ;, previousDrawnTickLabelLength, =, tickLabelLength, ;, }, TextAnchor, anchor, =]
[}, else, {, previousDrawnTickLabelPos, =, xx, ;, previousDrawnTickLabelLength, =, tickLabelLength, ;, }, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =]
[xx, ;, previousDrawnTickLabelLength, =, tickLabelLength, ;, }, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =]
[tickLabelLength, ;, }, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (]
[=, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {]
[;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =]
[;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =]
[null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;]
[double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =]
[double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =]
[(, isVerticalTickLabels, (, ), ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (]
[(, isVerticalTickLabels, (, ), ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (]
[(, ), ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==]
[(, ), ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==]
[=, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =]
[., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =]
[., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =]
[=, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /]
[if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {]
[edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =]
[edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =]
[==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -]
[==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -]
[), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -, Math, ., PI, /]
[2.0, ;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (]
[2.0, ;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (]
[}, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==]
[}, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==]
[-, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =]
[., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =]
[;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;]
[}, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =]
[}, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =]
[RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {]
[TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =]
[TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =]
[=, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;]
[., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, rotationAnchor, =]
[., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, rotationAnchor, =]
[}, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, rotationAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, }, Tick, tick, =]
[anchor, =, TextAnchor, ., TOP_CENTER, ;, rotationAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, }, Tick, tick, =, new, NumberTick, (]
[., TOP_CENTER, ;, rotationAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (]
[rotationAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,]
[TextAnchor, ., TOP_CENTER, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel, ,]
[TOP_CENTER, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,]
[}, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,]
[tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;]
[tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;]
[(, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, ticks, ., add, (]
[,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, ticks, ., add, (, tick, ), ;, }, }, return]
[ticks, ;, }, protected, List, refreshTicksVertical, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, ticks, =]
[,, RectangleEdge, edge, ), {, List, ticks, =, new, java, ., util, ., ArrayList, (, ), ;, Font, tickLabelFont, =]
[{, List, ticks, =, new, java, ., util, ., ArrayList, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;]
[{, List, ticks, =, new, java, ., util, ., ArrayList, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;]
[new, java, ., util, ., ArrayList, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (]
[(, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, double, size, =]
[(, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, double, size, =]
[., setFont, (, tickLabelFont, ), ;, double, size, =, getTickUnit, (, ), ., getSize, (, ), ;, int, count, =]
[size, =, getTickUnit, (, ), ., getSize, (, ), ;, int, count, =, calculateVisibleTickCount, (, ), ;, double, lowestTickValue, =]
[(, ), ;, int, count, =, calculateVisibleTickCount, (, ), ;, double, lowestTickValue, =, calculateLowestVisibleTickValue, (, ), ;, double, previousDrawnTickLabelPos, =]
[=, calculateVisibleTickCount, (, ), ;, double, lowestTickValue, =, calculateLowestVisibleTickValue, (, ), ;, double, previousDrawnTickLabelPos, =, 0.0, ;, double, previousDrawnTickLabelLength, =]
[;, double, lowestTickValue, =, calculateLowestVisibleTickValue, (, ), ;, double, previousDrawnTickLabelPos, =, 0.0, ;, double, previousDrawnTickLabelLength, =, 0.0, ;, if, (]
[;, double, lowestTickValue, =, calculateLowestVisibleTickValue, (, ), ;, double, previousDrawnTickLabelPos, =, 0.0, ;, double, previousDrawnTickLabelLength, =, 0.0, ;, if, (]
[lowestTickValue, =, calculateLowestVisibleTickValue, (, ), ;, double, previousDrawnTickLabelPos, =, 0.0, ;, double, previousDrawnTickLabelLength, =, 0.0, ;, if, (, count, <=]
[lowestTickValue, =, calculateLowestVisibleTickValue, (, ), ;, double, previousDrawnTickLabelPos, =, 0.0, ;, double, previousDrawnTickLabelLength, =, 0.0, ;, if, (, count, <=]
[;, double, previousDrawnTickLabelLength, =, 0.0, ;, if, (, count, <=, ValueAxis, ., MAXIMUM_TICK_COUNT, ), {, for, (, int, i, =]
[previousDrawnTickLabelLength, =, 0.0, ;, if, (, count, <=, ValueAxis, ., MAXIMUM_TICK_COUNT, ), {, for, (, int, i, =, 0, ;]
[previousDrawnTickLabelLength, =, 0.0, ;, if, (, count, <=, ValueAxis, ., MAXIMUM_TICK_COUNT, ), {, for, (, int, i, =, 0, ;]
[0.0, ;, if, (, count, <=, ValueAxis, ., MAXIMUM_TICK_COUNT, ), {, for, (, int, i, =, 0, ;, i, <]
[if, (, count, <=, ValueAxis, ., MAXIMUM_TICK_COUNT, ), {, for, (, int, i, =, 0, ;, i, <, count, ;]
[if, (, count, <=, ValueAxis, ., MAXIMUM_TICK_COUNT, ), {, for, (, int, i, =, 0, ;, i, <, count, ;]
[), {, for, (, int, i, =, 0, ;, i, <, count, ;, i, ++, ), {, double, currentTickValue, =]
[), {, for, (, int, i, =, 0, ;, i, <, count, ;, i, ++, ), {, double, currentTickValue, =]
[for, (, int, i, =, 0, ;, i, <, count, ;, i, ++, ), {, double, currentTickValue, =, lowestTickValue, +]
[(, int, i, =, 0, ;, i, <, count, ;, i, ++, ), {, double, currentTickValue, =, lowestTickValue, +, (]
[(, int, i, =, 0, ;, i, <, count, ;, i, ++, ), {, double, currentTickValue, =, lowestTickValue, +, (]
[i, =, 0, ;, i, <, count, ;, i, ++, ), {, double, currentTickValue, =, lowestTickValue, +, (, i, *]
[count, ;, i, ++, ), {, double, currentTickValue, =, lowestTickValue, +, (, i, *, size, ), ;, double, yy, =]
[i, ++, ), {, double, currentTickValue, =, lowestTickValue, +, (, i, *, size, ), ;, double, yy, =, valueToJava2D, (]
[), {, double, currentTickValue, =, lowestTickValue, +, (, i, *, size, ), ;, double, yy, =, valueToJava2D, (, currentTickValue, ,]
[double, currentTickValue, =, lowestTickValue, +, (, i, *, size, ), ;, double, yy, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,]
[), ;, double, yy, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =]
[(, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (]
[(, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (]
[,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=]
[edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {]
[;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, tickLabel, =]
[;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, tickLabel, =]
[NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, tickLabel, =, formatter, ., format, (]
[;, if, (, formatter, !=, null, ), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {]
[(, formatter, !=, null, ), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =]
[!=, null, ), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, valueToString, (]
[., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, valueToString, (, currentTickValue, ), ;, }, Rectangle2D, bounds, =]
[., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, valueToString, (, currentTickValue, ), ;, }, Rectangle2D, bounds, =]
[), ;, }, else, {, tickLabel, =, valueToString, (, currentTickValue, ), ;, }, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (]
[}, else, {, tickLabel, =, valueToString, (, currentTickValue, ), ;, }, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,]
[{, tickLabel, =, valueToString, (, currentTickValue, ), ;, }, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,, g2, ,]
[{, tickLabel, =, valueToString, (, currentTickValue, ), ;, }, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,, g2, ,]
[bounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,, g2, ,, g2, ., getFontMetrics, (, ), ), ;, double, tickLabelLength, =]
[bounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,, g2, ,, g2, ., getFontMetrics, (, ), ), ;, double, tickLabelLength, =]
[getTextBounds, (, tickLabel, ,, g2, ,, g2, ., getFontMetrics, (, ), ), ;, double, tickLabelLength, =, isVerticalTickLabels, (, ), ?]
[getTextBounds, (, tickLabel, ,, g2, ,, g2, ., getFontMetrics, (, ), ), ;, double, tickLabelLength, =, isVerticalTickLabels, (, ), ?]
[g2, ., getFontMetrics, (, ), ), ;, double, tickLabelLength, =, isVerticalTickLabels, (, ), ?, bounds, ., getWidth, (, ), :]
[g2, ., getFontMetrics, (, ), ), ;, double, tickLabelLength, =, isVerticalTickLabels, (, ), ?, bounds, ., getWidth, (, ), :]
[=, isVerticalTickLabels, (, ), ?, bounds, ., getWidth, (, ), :, bounds, ., getHeight, (, ), ;, boolean, tickLabelsOverlapping, =]
[?, bounds, ., getWidth, (, ), :, bounds, ., getHeight, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (]
[?, bounds, ., getWidth, (, ), :, bounds, ., getHeight, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (]
[., getWidth, (, ), :, bounds, ., getHeight, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >]
[., getHeight, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >, 0, ), {, double, avgTickLabelLength, =]
[., getHeight, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >, 0, ), {, double, avgTickLabelLength, =]
[getHeight, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >, 0, ), {, double, avgTickLabelLength, =, (]
[getHeight, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >, 0, ), {, double, avgTickLabelLength, =, (]
[), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >, 0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +]
[tickLabelsOverlapping, =, false, ;, if, (, i, >, 0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /]
[if, (, i, >, 0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if, (]
[if, (, i, >, 0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if, (]
[if, (, i, >, 0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if, (]
[0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if, (, Math, ., abs, (]
[0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if, (, Math, ., abs, (]
[{, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if, (, Math, ., abs, (, yy, -]
[=, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if, (, Math, ., abs, (, yy, -, previousDrawnTickLabelPos, ), <]
[+, tickLabelLength, ), /, 2.0, ;, if, (, Math, ., abs, (, yy, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {]
[), /, 2.0, ;, if, (, Math, ., abs, (, yy, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =]
[Math, ., abs, (, yy, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true, ;, }, }, if, (]
[(, yy, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping, ), {]
[-, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =]
[), {, tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;, }, else, {]
[tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;, }, else, {, previousDrawnTickLabelPos, =]
[true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;, }, else, {, previousDrawnTickLabelPos, =, yy, ;]
[}, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;, }, else, {, previousDrawnTickLabelPos, =, yy, ;, previousDrawnTickLabelLength, =]
[{, tickLabel, =, "", ;, }, else, {, previousDrawnTickLabelPos, =, yy, ;, previousDrawnTickLabelLength, =, tickLabelLength, ;, }, TextAnchor, anchor, =]
[}, else, {, previousDrawnTickLabelPos, =, yy, ;, previousDrawnTickLabelLength, =, tickLabelLength, ;, }, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =]
[yy, ;, previousDrawnTickLabelLength, =, tickLabelLength, ;, }, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =]
[tickLabelLength, ;, }, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (]
[=, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {]
[;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =]
[;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =]
[null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;]
[double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =]
[double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =]
[(, isVerticalTickLabels, (, ), ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (]
[(, isVerticalTickLabels, (, ), ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (]
[(, ), ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, edge, ==]
[(, ), ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, edge, ==]
[=, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, angle, =]
[., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, angle, =]
[BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, angle, =, -]
[BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, angle, =, -]
[TextAnchor, ., BOTTOM_CENTER, ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, angle, =, -, Math, ., PI, /]
[(, edge, ==, RectangleEdge, ., LEFT, ), {, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {]
[==, RectangleEdge, ., LEFT, ), {, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, angle, =]
[==, RectangleEdge, ., LEFT, ), {, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, angle, =]
[==, RectangleEdge, ., LEFT, ), {, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, angle, =]
[), {, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, Math, ., PI, /]
[/, 2.0, ;, }, else, {, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (]
[/, 2.0, ;, }, else, {, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (]
[;, }, else, {, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==]
[;, }, else, {, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==]
[=, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =]
[., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =]
[;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;]
[}, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =]
[}, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =]
[RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {]
[LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =]
[LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =]
[=, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;]
[., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =]
[., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =]
[}, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, }, Tick, tick, =]
[anchor, =, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, }, Tick, tick, =, new, NumberTick, (]
[., CENTER_LEFT, ;, rotationAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (]
[rotationAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,]
[TextAnchor, ., CENTER_LEFT, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel, ,]
[CENTER_LEFT, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,]
[}, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,]
[tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;]
[tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;]
[(, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, ticks, ., add, (]
[,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, ticks, ., add, (, tick, ), ;, }, }, return]
[;, }, }, return, ticks, ;, }, public, String, valueToString, (, double, value, ), {, String, strToReturn, ;, try, {]
[}, return, ticks, ;, }, public, String, valueToString, (, double, value, ), {, String, strToReturn, ;, try, {, strToReturn, =]
[;, }, public, String, valueToString, (, double, value, ), {, String, strToReturn, ;, try, {, strToReturn, =, (, String, )]
[;, }, public, String, valueToString, (, double, value, ), {, String, strToReturn, ;, try, {, strToReturn, =, (, String, )]
[;, }, public, String, valueToString, (, double, value, ), {, String, strToReturn, ;, try, {, strToReturn, =, (, String, )]
[double, value, ), {, String, strToReturn, ;, try, {, strToReturn, =, (, String, ), this, ., symbols, ., get, (]
[{, String, strToReturn, ;, try, {, strToReturn, =, (, String, ), this, ., symbols, ., get, (, (, int, )]
[), this, ., symbols, ., get, (, (, int, ), value, ), ;, }, catch, (, IndexOutOfBoundsException, ex, ), {]
[., symbols, ., get, (, (, int, ), value, ), ;, }, catch, (, IndexOutOfBoundsException, ex, ), {, strToReturn, =]
[(, (, int, ), value, ), ;, }, catch, (, IndexOutOfBoundsException, ex, ), {, strToReturn, =, "", ;, }, return]
[{, strToReturn, =, "", ;, }, return, strToReturn, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[{, strToReturn, =, "", ;, }, return, strToReturn, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[=, "", ;, }, return, strToReturn, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[return, strToReturn, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, SymbolAxis, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, SymbolAxis, ), ), {, return, false, ;, }, SymbolAxis, that, =]
[if, (, !, (, obj, instanceof, SymbolAxis, ), ), {, return, false, ;, }, SymbolAxis, that, =, (, SymbolAxis, )]
[obj, instanceof, SymbolAxis, ), ), {, return, false, ;, }, SymbolAxis, that, =, (, SymbolAxis, ), obj, ;, if, (]
[instanceof, SymbolAxis, ), ), {, return, false, ;, }, SymbolAxis, that, =, (, SymbolAxis, ), obj, ;, if, (, !]
[instanceof, SymbolAxis, ), ), {, return, false, ;, }, SymbolAxis, that, =, (, SymbolAxis, ), obj, ;, if, (, !]
[instanceof, SymbolAxis, ), ), {, return, false, ;, }, SymbolAxis, that, =, (, SymbolAxis, ), obj, ;, if, (, !]
[false, ;, }, SymbolAxis, that, =, (, SymbolAxis, ), obj, ;, if, (, !, this, ., symbols, ., equals, (]
[false, ;, }, SymbolAxis, that, =, (, SymbolAxis, ), obj, ;, if, (, !, this, ., symbols, ., equals, (]
[SymbolAxis, ), obj, ;, if, (, !, this, ., symbols, ., equals, (, that, ., symbols, ), ), {, return]
[(, !, this, ., symbols, ., equals, (, that, ., symbols, ), ), {, return, false, ;, }, if, (]
[(, !, this, ., symbols, ., equals, (, that, ., symbols, ), ), {, return, false, ;, }, if, (]
[(, !, this, ., symbols, ., equals, (, that, ., symbols, ), ), {, return, false, ;, }, if, (]
[symbols, ., equals, (, that, ., symbols, ), ), {, return, false, ;, }, if, (, this, ., gridBandsVisible, !=]
[symbols, ., equals, (, that, ., symbols, ), ), {, return, false, ;, }, if, (, this, ., gridBandsVisible, !=]
[symbols, ), ), {, return, false, ;, }, if, (, this, ., gridBandsVisible, !=, that, ., gridBandsVisible, ), {, return]
[false, ;, }, if, (, this, ., gridBandsVisible, !=, that, ., gridBandsVisible, ), {, return, false, ;, }, if, (]
[;, }, if, (, this, ., gridBandsVisible, !=, that, ., gridBandsVisible, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, this, ., gridBandsVisible, !=, that, ., gridBandsVisible, ), {, return, false, ;, }, if, (, !]
[this, ., gridBandsVisible, !=, that, ., gridBandsVisible, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[this, ., gridBandsVisible, !=, that, ., gridBandsVisible, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[that, ., gridBandsVisible, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., gridBandPaint, ,]
[that, ., gridBandsVisible, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., gridBandPaint, ,]
[;, }, if, (, !, PaintUtilities, ., equal, (, this, ., gridBandPaint, ,, that, ., gridBandPaint, ), ), {, return]
[PaintUtilities, ., equal, (, this, ., gridBandPaint, ,, that, ., gridBandPaint, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., gridBandPaint, ,, that, ., gridBandPaint, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., gridBandPaint, ,, that, ., gridBandPaint, ), ), {, return, false, ;, }, if, (, !]
[., gridBandPaint, ,, that, ., gridBandPaint, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[., gridBandPaint, ,, that, ., gridBandPaint, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[., gridBandPaint, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., gridBandAlternatePaint, ,]
[., gridBandPaint, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., gridBandAlternatePaint, ,]
[;, }, if, (, !, PaintUtilities, ., equal, (, this, ., gridBandAlternatePaint, ,, that, ., gridBandAlternatePaint, ), ), {, return]
[!, PaintUtilities, ., equal, (, this, ., gridBandAlternatePaint, ,, that, ., gridBandAlternatePaint, ), ), {, return, false, ;, }, return]
[!, PaintUtilities, ., equal, (, this, ., gridBandAlternatePaint, ,, that, ., gridBandAlternatePaint, ), ), {, return, false, ;, }, return]
[(, this, ., gridBandAlternatePaint, ,, that, ., gridBandAlternatePaint, ), ), {, return, false, ;, }, return, super, ., equals, (]
[}, return, super, ., equals, (, obj, ), ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[}, return, super, ., equals, (, obj, ), ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[obj, ), ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;]
[obj, ), ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;]
[private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (]
[private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (]
[ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., gridBandPaint, ,]
[throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., gridBandPaint, ,, stream, ), ;]
[throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., gridBandPaint, ,, stream, ), ;]
[., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., gridBandPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (]
[., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., gridBandPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (]
[;, SerialUtilities, ., writePaint, (, this, ., gridBandPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., gridBandAlternatePaint, ,]
[this, ., gridBandAlternatePaint, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {]
[this, ., gridBandAlternatePaint, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., gridBandPaint, =]
[readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., gridBandPaint, =]
[), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., gridBandPaint, =, SerialUtilities, ., readPaint, (]
[,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., gridBandPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;]
[,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., gridBandPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;]
[., defaultReadObject, (, ), ;, this, ., gridBandPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., gridBandAlternatePaint, =]
[., defaultReadObject, (, ), ;, this, ., gridBandPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., gridBandAlternatePaint, =]
[;, this, ., gridBandPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., gridBandAlternatePaint, =, SerialUtilities, ., readPaint, (]
