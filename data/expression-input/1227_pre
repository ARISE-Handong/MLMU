[general, ., ValueDataset, ;, public, class, MeterPlot, extends, Plot, implements, Serializable, ,, Cloneable, {, private, static, final, long, serialVersionUID, =]
[extends, Plot, implements, Serializable, ,, Cloneable, {, private, static, final, long, serialVersionUID, =, 2987472457734470962L, ;, static, final, Paint, DEFAULT_DIAL_BACKGROUND_PAINT, =]
[extends, Plot, implements, Serializable, ,, Cloneable, {, private, static, final, long, serialVersionUID, =, 2987472457734470962L, ;, static, final, Paint, DEFAULT_DIAL_BACKGROUND_PAINT, =]
[final, long, serialVersionUID, =, 2987472457734470962L, ;, static, final, Paint, DEFAULT_DIAL_BACKGROUND_PAINT, =, Color, ., black, ;, static, final, Paint, DEFAULT_NEEDLE_PAINT, =]
[final, long, serialVersionUID, =, 2987472457734470962L, ;, static, final, Paint, DEFAULT_DIAL_BACKGROUND_PAINT, =, Color, ., black, ;, static, final, Paint, DEFAULT_NEEDLE_PAINT, =]
[DEFAULT_DIAL_BACKGROUND_PAINT, =, Color, ., black, ;, static, final, Paint, DEFAULT_NEEDLE_PAINT, =, Color, ., green, ;, static, final, Font, DEFAULT_VALUE_FONT, =]
[., black, ;, static, final, Paint, DEFAULT_NEEDLE_PAINT, =, Color, ., green, ;, static, final, Font, DEFAULT_VALUE_FONT, =, new, Font, (]
[;, static, final, Paint, DEFAULT_NEEDLE_PAINT, =, Color, ., green, ;, static, final, Font, DEFAULT_VALUE_FONT, =, new, Font, (, "Tahoma", ,]
[;, static, final, Paint, DEFAULT_NEEDLE_PAINT, =, Color, ., green, ;, static, final, Font, DEFAULT_VALUE_FONT, =, new, Font, (, "Tahoma", ,]
[DEFAULT_NEEDLE_PAINT, =, Color, ., green, ;, static, final, Font, DEFAULT_VALUE_FONT, =, new, Font, (, "Tahoma", ,, Font, ., BOLD, ,]
[Font, DEFAULT_VALUE_FONT, =, new, Font, (, "Tahoma", ,, Font, ., BOLD, ,, 12, ), ;, static, final, Paint, DEFAULT_VALUE_PAINT, =]
[Font, DEFAULT_VALUE_FONT, =, new, Font, (, "Tahoma", ,, Font, ., BOLD, ,, 12, ), ;, static, final, Paint, DEFAULT_VALUE_PAINT, =]
[BOLD, ,, 12, ), ;, static, final, Paint, DEFAULT_VALUE_PAINT, =, Color, ., yellow, ;, public, static, final, int, DEFAULT_METER_ANGLE, =]
[DEFAULT_VALUE_PAINT, =, Color, ., yellow, ;, public, static, final, int, DEFAULT_METER_ANGLE, =, 270, ;, public, static, final, float, DEFAULT_BORDER_SIZE, =]
[final, int, DEFAULT_METER_ANGLE, =, 270, ;, public, static, final, float, DEFAULT_BORDER_SIZE, =, 3f, ;, public, static, final, float, DEFAULT_CIRCLE_SIZE, =]
[final, float, DEFAULT_BORDER_SIZE, =, 3f, ;, public, static, final, float, DEFAULT_CIRCLE_SIZE, =, 10f, ;, public, static, final, Font, DEFAULT_LABEL_FONT, =]
[=, 3f, ;, public, static, final, float, DEFAULT_CIRCLE_SIZE, =, 10f, ;, public, static, final, Font, DEFAULT_LABEL_FONT, =, new, Font, (]
[;, public, static, final, float, DEFAULT_CIRCLE_SIZE, =, 10f, ;, public, static, final, Font, DEFAULT_LABEL_FONT, =, new, Font, (, "Tahoma", ,]
[;, public, static, final, float, DEFAULT_CIRCLE_SIZE, =, 10f, ;, public, static, final, Font, DEFAULT_LABEL_FONT, =, new, Font, (, "Tahoma", ,]
[float, DEFAULT_CIRCLE_SIZE, =, 10f, ;, public, static, final, Font, DEFAULT_LABEL_FONT, =, new, Font, (, "Tahoma", ,, Font, ., BOLD, ,]
[tickLabelsVisible, ;, private, Font, tickLabelFont, ;, private, transient, Paint, tickLabelPaint, ;, private, NumberFormat, tickLabelFormat, ;, protected, static, ResourceBundle, localizationResources, =]
[tickLabelsVisible, ;, private, Font, tickLabelFont, ;, private, transient, Paint, tickLabelPaint, ;, private, NumberFormat, tickLabelFormat, ;, protected, static, ResourceBundle, localizationResources, =]
[tickLabelFont, ;, private, transient, Paint, tickLabelPaint, ;, private, NumberFormat, tickLabelFormat, ;, protected, static, ResourceBundle, localizationResources, =, ResourceBundleWrapper, ., getBundle, (]
[localizationResources, =, ResourceBundleWrapper, ., getBundle, (, "org.jfree.chart.plot.LocalizationBundle", ), ;, private, List, intervals, ;, public, MeterPlot, (, ), {, this, (]
[(, ), {, this, (, null, ), ;, }, public, MeterPlot, (, ValueDataset, dataset, ), {, super, (, ), ;]
[(, ), {, this, (, null, ), ;, }, public, MeterPlot, (, ValueDataset, dataset, ), {, super, (, ), ;]
[(, null, ), ;, }, public, MeterPlot, (, ValueDataset, dataset, ), {, super, (, ), ;, this, ., shape, =]
[(, null, ), ;, }, public, MeterPlot, (, ValueDataset, dataset, ), {, super, (, ), ;, this, ., shape, =]
[}, public, MeterPlot, (, ValueDataset, dataset, ), {, super, (, ), ;, this, ., shape, =, DialShape, ., CIRCLE, ;]
[}, public, MeterPlot, (, ValueDataset, dataset, ), {, super, (, ), ;, this, ., shape, =, DialShape, ., CIRCLE, ;]
[ValueDataset, dataset, ), {, super, (, ), ;, this, ., shape, =, DialShape, ., CIRCLE, ;, this, ., meterAngle, =]
[), {, super, (, ), ;, this, ., shape, =, DialShape, ., CIRCLE, ;, this, ., meterAngle, =, DEFAULT_METER_ANGLE, ;]
[), {, super, (, ), ;, this, ., shape, =, DialShape, ., CIRCLE, ;, this, ., meterAngle, =, DEFAULT_METER_ANGLE, ;]
[), ;, this, ., shape, =, DialShape, ., CIRCLE, ;, this, ., meterAngle, =, DEFAULT_METER_ANGLE, ;, this, ., range, =]
[., shape, =, DialShape, ., CIRCLE, ;, this, ., meterAngle, =, DEFAULT_METER_ANGLE, ;, this, ., range, =, new, Range, (]
[=, DialShape, ., CIRCLE, ;, this, ., meterAngle, =, DEFAULT_METER_ANGLE, ;, this, ., range, =, new, Range, (, 0.0, ,]
[CIRCLE, ;, this, ., meterAngle, =, DEFAULT_METER_ANGLE, ;, this, ., range, =, new, Range, (, 0.0, ,, 100.0, ), ;]
[CIRCLE, ;, this, ., meterAngle, =, DEFAULT_METER_ANGLE, ;, this, ., range, =, new, Range, (, 0.0, ,, 100.0, ), ;]
[meterAngle, =, DEFAULT_METER_ANGLE, ;, this, ., range, =, new, Range, (, 0.0, ,, 100.0, ), ;, this, ., tickSize, =]
[DEFAULT_METER_ANGLE, ;, this, ., range, =, new, Range, (, 0.0, ,, 100.0, ), ;, this, ., tickSize, =, 10.0, ;]
[DEFAULT_METER_ANGLE, ;, this, ., range, =, new, Range, (, 0.0, ,, 100.0, ), ;, this, ., tickSize, =, 10.0, ;]
[range, =, new, Range, (, 0.0, ,, 100.0, ), ;, this, ., tickSize, =, 10.0, ;, this, ., tickPaint, =]
[range, =, new, Range, (, 0.0, ,, 100.0, ), ;, this, ., tickSize, =, 10.0, ;, this, ., tickPaint, =]
[(, 0.0, ,, 100.0, ), ;, this, ., tickSize, =, 10.0, ;, this, ., tickPaint, =, Color, ., white, ;]
[(, 0.0, ,, 100.0, ), ;, this, ., tickSize, =, 10.0, ;, this, ., tickPaint, =, Color, ., white, ;]
[), ;, this, ., tickSize, =, 10.0, ;, this, ., tickPaint, =, Color, ., white, ;, this, ., units, =]
[this, ., tickSize, =, 10.0, ;, this, ., tickPaint, =, Color, ., white, ;, this, ., units, =, "Units", ;]
[this, ., tickSize, =, 10.0, ;, this, ., tickPaint, =, Color, ., white, ;, this, ., units, =, "Units", ;]
[10.0, ;, this, ., tickPaint, =, Color, ., white, ;, this, ., units, =, "Units", ;, this, ., needlePaint, =]
[10.0, ;, this, ., tickPaint, =, Color, ., white, ;, this, ., units, =, "Units", ;, this, ., needlePaint, =]
[tickPaint, =, Color, ., white, ;, this, ., units, =, "Units", ;, this, ., needlePaint, =, MeterPlot, ., DEFAULT_NEEDLE_PAINT, ;]
[tickPaint, =, Color, ., white, ;, this, ., units, =, "Units", ;, this, ., needlePaint, =, MeterPlot, ., DEFAULT_NEEDLE_PAINT, ;]
[white, ;, this, ., units, =, "Units", ;, this, ., needlePaint, =, MeterPlot, ., DEFAULT_NEEDLE_PAINT, ;, this, ., tickLabelsVisible, =]
[this, ., units, =, "Units", ;, this, ., needlePaint, =, MeterPlot, ., DEFAULT_NEEDLE_PAINT, ;, this, ., tickLabelsVisible, =, true, ;]
[this, ., units, =, "Units", ;, this, ., needlePaint, =, MeterPlot, ., DEFAULT_NEEDLE_PAINT, ;, this, ., tickLabelsVisible, =, true, ;]
["Units", ;, this, ., needlePaint, =, MeterPlot, ., DEFAULT_NEEDLE_PAINT, ;, this, ., tickLabelsVisible, =, true, ;, this, ., tickLabelFont, =]
["Units", ;, this, ., needlePaint, =, MeterPlot, ., DEFAULT_NEEDLE_PAINT, ;, this, ., tickLabelsVisible, =, true, ;, this, ., tickLabelFont, =]
[needlePaint, =, MeterPlot, ., DEFAULT_NEEDLE_PAINT, ;, this, ., tickLabelsVisible, =, true, ;, this, ., tickLabelFont, =, MeterPlot, ., DEFAULT_LABEL_FONT, ;]
[needlePaint, =, MeterPlot, ., DEFAULT_NEEDLE_PAINT, ;, this, ., tickLabelsVisible, =, true, ;, this, ., tickLabelFont, =, MeterPlot, ., DEFAULT_LABEL_FONT, ;]
[DEFAULT_NEEDLE_PAINT, ;, this, ., tickLabelsVisible, =, true, ;, this, ., tickLabelFont, =, MeterPlot, ., DEFAULT_LABEL_FONT, ;, this, ., tickLabelPaint, =]
[DEFAULT_NEEDLE_PAINT, ;, this, ., tickLabelsVisible, =, true, ;, this, ., tickLabelFont, =, MeterPlot, ., DEFAULT_LABEL_FONT, ;, this, ., tickLabelPaint, =]
[tickLabelsVisible, =, true, ;, this, ., tickLabelFont, =, MeterPlot, ., DEFAULT_LABEL_FONT, ;, this, ., tickLabelPaint, =, Color, ., black, ;]
[tickLabelsVisible, =, true, ;, this, ., tickLabelFont, =, MeterPlot, ., DEFAULT_LABEL_FONT, ;, this, ., tickLabelPaint, =, Color, ., black, ;]
[this, ., tickLabelFont, =, MeterPlot, ., DEFAULT_LABEL_FONT, ;, this, ., tickLabelPaint, =, Color, ., black, ;, this, ., tickLabelFormat, =]
[this, ., tickLabelFont, =, MeterPlot, ., DEFAULT_LABEL_FONT, ;, this, ., tickLabelPaint, =, Color, ., black, ;, this, ., tickLabelFormat, =]
[DEFAULT_LABEL_FONT, ;, this, ., tickLabelPaint, =, Color, ., black, ;, this, ., tickLabelFormat, =, NumberFormat, ., getInstance, (, ), ;]
[DEFAULT_LABEL_FONT, ;, this, ., tickLabelPaint, =, Color, ., black, ;, this, ., tickLabelFormat, =, NumberFormat, ., getInstance, (, ), ;]
[tickLabelPaint, =, Color, ., black, ;, this, ., tickLabelFormat, =, NumberFormat, ., getInstance, (, ), ;, this, ., valueFont, =]
[tickLabelPaint, =, Color, ., black, ;, this, ., tickLabelFormat, =, NumberFormat, ., getInstance, (, ), ;, this, ., valueFont, =]
[black, ;, this, ., tickLabelFormat, =, NumberFormat, ., getInstance, (, ), ;, this, ., valueFont, =, MeterPlot, ., DEFAULT_VALUE_FONT, ;]
[black, ;, this, ., tickLabelFormat, =, NumberFormat, ., getInstance, (, ), ;, this, ., valueFont, =, MeterPlot, ., DEFAULT_VALUE_FONT, ;]
[tickLabelFormat, =, NumberFormat, ., getInstance, (, ), ;, this, ., valueFont, =, MeterPlot, ., DEFAULT_VALUE_FONT, ;, this, ., valuePaint, =]
[tickLabelFormat, =, NumberFormat, ., getInstance, (, ), ;, this, ., valueFont, =, MeterPlot, ., DEFAULT_VALUE_FONT, ;, this, ., valuePaint, =]
[getInstance, (, ), ;, this, ., valueFont, =, MeterPlot, ., DEFAULT_VALUE_FONT, ;, this, ., valuePaint, =, MeterPlot, ., DEFAULT_VALUE_PAINT, ;]
[getInstance, (, ), ;, this, ., valueFont, =, MeterPlot, ., DEFAULT_VALUE_FONT, ;, this, ., valuePaint, =, MeterPlot, ., DEFAULT_VALUE_PAINT, ;]
[this, ., valueFont, =, MeterPlot, ., DEFAULT_VALUE_FONT, ;, this, ., valuePaint, =, MeterPlot, ., DEFAULT_VALUE_PAINT, ;, this, ., dialBackgroundPaint, =]
[this, ., valueFont, =, MeterPlot, ., DEFAULT_VALUE_FONT, ;, this, ., valuePaint, =, MeterPlot, ., DEFAULT_VALUE_PAINT, ;, this, ., dialBackgroundPaint, =]
[MeterPlot, ., DEFAULT_VALUE_FONT, ;, this, ., valuePaint, =, MeterPlot, ., DEFAULT_VALUE_PAINT, ;, this, ., dialBackgroundPaint, =, MeterPlot, ., DEFAULT_DIAL_BACKGROUND_PAINT, ;]
[MeterPlot, ., DEFAULT_VALUE_FONT, ;, this, ., valuePaint, =, MeterPlot, ., DEFAULT_VALUE_PAINT, ;, this, ., dialBackgroundPaint, =, MeterPlot, ., DEFAULT_DIAL_BACKGROUND_PAINT, ;]
[this, ., valuePaint, =, MeterPlot, ., DEFAULT_VALUE_PAINT, ;, this, ., dialBackgroundPaint, =, MeterPlot, ., DEFAULT_DIAL_BACKGROUND_PAINT, ;, this, ., intervals, =]
[., dialBackgroundPaint, =, MeterPlot, ., DEFAULT_DIAL_BACKGROUND_PAINT, ;, this, ., intervals, =, new, java, ., util, ., ArrayList, (, ), ;]
[=, MeterPlot, ., DEFAULT_DIAL_BACKGROUND_PAINT, ;, this, ., intervals, =, new, java, ., util, ., ArrayList, (, ), ;, setDataset, (]
[., util, ., ArrayList, (, ), ;, setDataset, (, dataset, ), ;, }, public, DialShape, getDialShape, (, ), {, return]
[., util, ., ArrayList, (, ), ;, setDataset, (, dataset, ), ;, }, public, DialShape, getDialShape, (, ), {, return]
[getDialShape, (, ), {, return, this, ., shape, ;, }, public, void, setDialShape, (, DialShape, shape, ), {, if, (]
[getDialShape, (, ), {, return, this, ., shape, ;, }, public, void, setDialShape, (, DialShape, shape, ), {, if, (]
[), {, return, this, ., shape, ;, }, public, void, setDialShape, (, DialShape, shape, ), {, if, (, shape, ==]
[., shape, ;, }, public, void, setDialShape, (, DialShape, shape, ), {, if, (, shape, ==, null, ), {, throw]
[}, public, void, setDialShape, (, DialShape, shape, ), {, if, (, shape, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, DialShape, shape, ), {, if, (, shape, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }]
[(, DialShape, shape, ), {, if, (, shape, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }]
[{, if, (, shape, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, this, ., shape, =]
[(, shape, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, this, ., shape, =, shape, ;]
[;, }, this, ., shape, =, shape, ;, fireChangeEvent, (, ), ;, }, public, int, getMeterAngle, (, ), {, return]
[;, }, this, ., shape, =, shape, ;, fireChangeEvent, (, ), ;, }, public, int, getMeterAngle, (, ), {, return]
[getMeterAngle, (, ), {, return, this, ., meterAngle, ;, }, public, void, setMeterAngle, (, int, angle, ), {, if, (]
[getMeterAngle, (, ), {, return, this, ., meterAngle, ;, }, public, void, setMeterAngle, (, int, angle, ), {, if, (]
[getMeterAngle, (, ), {, return, this, ., meterAngle, ;, }, public, void, setMeterAngle, (, int, angle, ), {, if, (]
[), {, return, this, ., meterAngle, ;, }, public, void, setMeterAngle, (, int, angle, ), {, if, (, angle, <]
[return, this, ., meterAngle, ;, }, public, void, setMeterAngle, (, int, angle, ), {, if, (, angle, <, 1, ||]
[return, this, ., meterAngle, ;, }, public, void, setMeterAngle, (, int, angle, ), {, if, (, angle, <, 1, ||]
[., meterAngle, ;, }, public, void, setMeterAngle, (, int, angle, ), {, if, (, angle, <, 1, ||, angle, >]
[public, void, setMeterAngle, (, int, angle, ), {, if, (, angle, <, 1, ||, angle, >, 360, ), {, throw]
[(, int, angle, ), {, if, (, angle, <, 1, ||, angle, >, 360, ), {, throw, new, IllegalArgumentException, (]
[(, int, angle, ), {, if, (, angle, <, 1, ||, angle, >, 360, ), {, throw, new, IllegalArgumentException, (]
[(, int, angle, ), {, if, (, angle, <, 1, ||, angle, >, 360, ), {, throw, new, IllegalArgumentException, (]
[angle, ), {, if, (, angle, <, 1, ||, angle, >, 360, ), {, throw, new, IllegalArgumentException, (, "Invalid 'angle' (", +]
[{, if, (, angle, <, 1, ||, angle, >, 360, ), {, throw, new, IllegalArgumentException, (, "Invalid 'angle' (", +, angle, +]
[<, 1, ||, angle, >, 360, ), {, throw, new, IllegalArgumentException, (, "Invalid 'angle' (", +, angle, +, ")", ), ;, }]
[<, 1, ||, angle, >, 360, ), {, throw, new, IllegalArgumentException, (, "Invalid 'angle' (", +, angle, +, ")", ), ;, }]
[>, 360, ), {, throw, new, IllegalArgumentException, (, "Invalid 'angle' (", +, angle, +, ")", ), ;, }, this, ., meterAngle, =]
[), {, throw, new, IllegalArgumentException, (, "Invalid 'angle' (", +, angle, +, ")", ), ;, }, this, ., meterAngle, =, angle, ;]
[;, }, this, ., meterAngle, =, angle, ;, fireChangeEvent, (, ), ;, }, public, Range, getRange, (, ), {, return]
[;, }, this, ., meterAngle, =, angle, ;, fireChangeEvent, (, ), ;, }, public, Range, getRange, (, ), {, return]
[getRange, (, ), {, return, this, ., range, ;, }, public, void, setRange, (, Range, range, ), {, if, (]
[getRange, (, ), {, return, this, ., range, ;, }, public, void, setRange, (, Range, range, ), {, if, (]
[), {, return, this, ., range, ;, }, public, void, setRange, (, Range, range, ), {, if, (, range, ==]
[., range, ;, }, public, void, setRange, (, Range, range, ), {, if, (, range, ==, null, ), {, throw]
[}, public, void, setRange, (, Range, range, ), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (]
[range, ), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, if, (]
[), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, if, (, !]
[{, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, if, (, !, (]
[{, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, if, (, !, (]
[{, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, if, (, !, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, if, (, !, (, range, ., getLength, (, ), >]
[(, "Null 'range' argument.", ), ;, }, if, (, !, (, range, ., getLength, (, ), >, 0.0, ), ), {, throw]
[;, }, if, (, !, (, range, ., getLength, (, ), >, 0.0, ), ), {, throw, new, IllegalArgumentException, (]
[!, (, range, ., getLength, (, ), >, 0.0, ), ), {, throw, new, IllegalArgumentException, (, "Range length must be positive.", ), ;, }]
[!, (, range, ., getLength, (, ), >, 0.0, ), ), {, throw, new, IllegalArgumentException, (, "Range length must be positive.", ), ;, }]
[getLength, (, ), >, 0.0, ), ), {, throw, new, IllegalArgumentException, (, "Range length must be positive.", ), ;, }, this, ., range, =]
[), >, 0.0, ), ), {, throw, new, IllegalArgumentException, (, "Range length must be positive.", ), ;, }, this, ., range, =, range, ;]
[;, }, this, ., range, =, range, ;, fireChangeEvent, (, ), ;, }, public, double, getTickSize, (, ), {, return]
[;, }, this, ., range, =, range, ;, fireChangeEvent, (, ), ;, }, public, double, getTickSize, (, ), {, return]
[getTickSize, (, ), {, return, this, ., tickSize, ;, }, public, void, setTickSize, (, double, size, ), {, if, (]
[getTickSize, (, ), {, return, this, ., tickSize, ;, }, public, void, setTickSize, (, double, size, ), {, if, (]
[), {, return, this, ., tickSize, ;, }, public, void, setTickSize, (, double, size, ), {, if, (, size, <=]
[., tickSize, ;, }, public, void, setTickSize, (, double, size, ), {, if, (, size, <=, 0, ), {, throw]
[}, public, void, setTickSize, (, double, size, ), {, if, (, size, <=, 0, ), {, throw, new, IllegalArgumentException, (]
[(, double, size, ), {, if, (, size, <=, 0, ), {, throw, new, IllegalArgumentException, (, "Requires 'size' > 0.", ), ;, }]
[(, double, size, ), {, if, (, size, <=, 0, ), {, throw, new, IllegalArgumentException, (, "Requires 'size' > 0.", ), ;, }]
[{, if, (, size, <=, 0, ), {, throw, new, IllegalArgumentException, (, "Requires 'size' > 0.", ), ;, }, this, ., tickSize, =]
[(, size, <=, 0, ), {, throw, new, IllegalArgumentException, (, "Requires 'size' > 0.", ), ;, }, this, ., tickSize, =, size, ;]
[;, }, this, ., tickSize, =, size, ;, fireChangeEvent, (, ), ;, }, public, Paint, getTickPaint, (, ), {, return]
[;, }, this, ., tickSize, =, size, ;, fireChangeEvent, (, ), ;, }, public, Paint, getTickPaint, (, ), {, return]
[getTickPaint, (, ), {, return, this, ., tickPaint, ;, }, public, void, setTickPaint, (, Paint, paint, ), {, if, (]
[getTickPaint, (, ), {, return, this, ., tickPaint, ;, }, public, void, setTickPaint, (, Paint, paint, ), {, if, (]
[), {, return, this, ., tickPaint, ;, }, public, void, setTickPaint, (, Paint, paint, ), {, if, (, paint, ==]
[., tickPaint, ;, }, public, void, setTickPaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw]
[}, public, void, setTickPaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }]
[(, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }]
[{, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., tickPaint, =]
[(, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., tickPaint, =, paint, ;]
[;, }, this, ., tickPaint, =, paint, ;, fireChangeEvent, (, ), ;, }, public, String, getUnits, (, ), {, return]
[;, }, this, ., tickPaint, =, paint, ;, fireChangeEvent, (, ), ;, }, public, String, getUnits, (, ), {, return]
[public, String, getUnits, (, ), {, return, this, ., units, ;, }, public, void, setUnits, (, String, units, ), {]
[public, String, getUnits, (, ), {, return, this, ., units, ;, }, public, void, setUnits, (, String, units, ), {]
[), {, return, this, ., units, ;, }, public, void, setUnits, (, String, units, ), {, this, ., units, =]
[return, this, ., units, ;, }, public, void, setUnits, (, String, units, ), {, this, ., units, =, units, ;]
[), {, this, ., units, =, units, ;, fireChangeEvent, (, ), ;, }, public, Paint, getNeedlePaint, (, ), {, return]
[), {, this, ., units, =, units, ;, fireChangeEvent, (, ), ;, }, public, Paint, getNeedlePaint, (, ), {, return]
[getNeedlePaint, (, ), {, return, this, ., needlePaint, ;, }, public, void, setNeedlePaint, (, Paint, paint, ), {, if, (]
[getNeedlePaint, (, ), {, return, this, ., needlePaint, ;, }, public, void, setNeedlePaint, (, Paint, paint, ), {, if, (]
[), {, return, this, ., needlePaint, ;, }, public, void, setNeedlePaint, (, Paint, paint, ), {, if, (, paint, ==]
[., needlePaint, ;, }, public, void, setNeedlePaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw]
[}, public, void, setNeedlePaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }]
[(, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }]
[{, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., needlePaint, =]
[(, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., needlePaint, =, paint, ;]
[;, }, this, ., needlePaint, =, paint, ;, fireChangeEvent, (, ), ;, }, public, boolean, getTickLabelsVisible, (, ), {, return]
[;, }, this, ., needlePaint, =, paint, ;, fireChangeEvent, (, ), ;, }, public, boolean, getTickLabelsVisible, (, ), {, return]
[getTickLabelsVisible, (, ), {, return, this, ., tickLabelsVisible, ;, }, public, void, setTickLabelsVisible, (, boolean, visible, ), {, if, (]
[getTickLabelsVisible, (, ), {, return, this, ., tickLabelsVisible, ;, }, public, void, setTickLabelsVisible, (, boolean, visible, ), {, if, (]
[getTickLabelsVisible, (, ), {, return, this, ., tickLabelsVisible, ;, }, public, void, setTickLabelsVisible, (, boolean, visible, ), {, if, (]
[return, this, ., tickLabelsVisible, ;, }, public, void, setTickLabelsVisible, (, boolean, visible, ), {, if, (, this, ., tickLabelsVisible, !=]
[tickLabelsVisible, ;, }, public, void, setTickLabelsVisible, (, boolean, visible, ), {, if, (, this, ., tickLabelsVisible, !=, visible, ), {]
[tickLabelsVisible, ;, }, public, void, setTickLabelsVisible, (, boolean, visible, ), {, if, (, this, ., tickLabelsVisible, !=, visible, ), {]
[void, setTickLabelsVisible, (, boolean, visible, ), {, if, (, this, ., tickLabelsVisible, !=, visible, ), {, this, ., tickLabelsVisible, =]
[(, boolean, visible, ), {, if, (, this, ., tickLabelsVisible, !=, visible, ), {, this, ., tickLabelsVisible, =, visible, ;]
[{, this, ., tickLabelsVisible, =, visible, ;, fireChangeEvent, (, ), ;, }, }, public, Font, getTickLabelFont, (, ), {, return]
[{, this, ., tickLabelsVisible, =, visible, ;, fireChangeEvent, (, ), ;, }, }, public, Font, getTickLabelFont, (, ), {, return]
[getTickLabelFont, (, ), {, return, this, ., tickLabelFont, ;, }, public, void, setTickLabelFont, (, Font, font, ), {, if, (]
[getTickLabelFont, (, ), {, return, this, ., tickLabelFont, ;, }, public, void, setTickLabelFont, (, Font, font, ), {, if, (]
[), {, return, this, ., tickLabelFont, ;, }, public, void, setTickLabelFont, (, Font, font, ), {, if, (, font, ==]
[., tickLabelFont, ;, }, public, void, setTickLabelFont, (, Font, font, ), {, if, (, font, ==, null, ), {, throw]
[}, public, void, setTickLabelFont, (, Font, font, ), {, if, (, font, ==, null, ), {, throw, new, IllegalArgumentException, (]
[font, ), {, if, (, font, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, if, (]
[), {, if, (, font, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, if, (, !]
[), {, if, (, font, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, if, (, !]
[), {, if, (, font, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, if, (, !]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, if, (, !, this, ., tickLabelFont, ., equals, (]
[new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, if, (, !, this, ., tickLabelFont, ., equals, (, font, ), ), {]
[new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, if, (, !, this, ., tickLabelFont, ., equals, (, font, ), ), {]
[), ;, }, if, (, !, this, ., tickLabelFont, ., equals, (, font, ), ), {, this, ., tickLabelFont, =]
[}, if, (, !, this, ., tickLabelFont, ., equals, (, font, ), ), {, this, ., tickLabelFont, =, font, ;]
[{, this, ., tickLabelFont, =, font, ;, fireChangeEvent, (, ), ;, }, }, public, Paint, getTickLabelPaint, (, ), {, return]
[{, this, ., tickLabelFont, =, font, ;, fireChangeEvent, (, ), ;, }, }, public, Paint, getTickLabelPaint, (, ), {, return]
[getTickLabelPaint, (, ), {, return, this, ., tickLabelPaint, ;, }, public, void, setTickLabelPaint, (, Paint, paint, ), {, if, (]
[getTickLabelPaint, (, ), {, return, this, ., tickLabelPaint, ;, }, public, void, setTickLabelPaint, (, Paint, paint, ), {, if, (]
[), {, return, this, ., tickLabelPaint, ;, }, public, void, setTickLabelPaint, (, Paint, paint, ), {, if, (, paint, ==]
[., tickLabelPaint, ;, }, public, void, setTickLabelPaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw]
[}, public, void, setTickLabelPaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (]
[paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, if, (]
[), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, if, (, !]
[), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, if, (, !]
[), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, if, (, !]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, if, (, !, this, ., tickLabelPaint, ., equals, (]
[new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, if, (, !, this, ., tickLabelPaint, ., equals, (, paint, ), ), {]
[new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, if, (, !, this, ., tickLabelPaint, ., equals, (, paint, ), ), {]
[), ;, }, if, (, !, this, ., tickLabelPaint, ., equals, (, paint, ), ), {, this, ., tickLabelPaint, =]
[}, if, (, !, this, ., tickLabelPaint, ., equals, (, paint, ), ), {, this, ., tickLabelPaint, =, paint, ;]
[{, this, ., tickLabelPaint, =, paint, ;, fireChangeEvent, (, ), ;, }, }, public, NumberFormat, getTickLabelFormat, (, ), {, return]
[{, this, ., tickLabelPaint, =, paint, ;, fireChangeEvent, (, ), ;, }, }, public, NumberFormat, getTickLabelFormat, (, ), {, return]
[getTickLabelFormat, (, ), {, return, this, ., tickLabelFormat, ;, }, public, void, setTickLabelFormat, (, NumberFormat, format, ), {, if, (]
[getTickLabelFormat, (, ), {, return, this, ., tickLabelFormat, ;, }, public, void, setTickLabelFormat, (, NumberFormat, format, ), {, if, (]
[), {, return, this, ., tickLabelFormat, ;, }, public, void, setTickLabelFormat, (, NumberFormat, format, ), {, if, (, format, ==]
[., tickLabelFormat, ;, }, public, void, setTickLabelFormat, (, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw]
[}, public, void, setTickLabelFormat, (, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'format' argument.", ), ;, }]
[(, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'format' argument.", ), ;, }]
[{, if, (, format, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'format' argument.", ), ;, }, this, ., tickLabelFormat, =]
[(, format, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'format' argument.", ), ;, }, this, ., tickLabelFormat, =, format, ;]
[;, }, this, ., tickLabelFormat, =, format, ;, fireChangeEvent, (, ), ;, }, public, Font, getValueFont, (, ), {, return]
[;, }, this, ., tickLabelFormat, =, format, ;, fireChangeEvent, (, ), ;, }, public, Font, getValueFont, (, ), {, return]
[getValueFont, (, ), {, return, this, ., valueFont, ;, }, public, void, setValueFont, (, Font, font, ), {, if, (]
[getValueFont, (, ), {, return, this, ., valueFont, ;, }, public, void, setValueFont, (, Font, font, ), {, if, (]
[), {, return, this, ., valueFont, ;, }, public, void, setValueFont, (, Font, font, ), {, if, (, font, ==]
[., valueFont, ;, }, public, void, setValueFont, (, Font, font, ), {, if, (, font, ==, null, ), {, throw]
[}, public, void, setValueFont, (, Font, font, ), {, if, (, font, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Font, font, ), {, if, (, font, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }]
[(, Font, font, ), {, if, (, font, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }]
[{, if, (, font, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, this, ., valueFont, =]
[(, font, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, this, ., valueFont, =, font, ;]
[;, }, this, ., valueFont, =, font, ;, fireChangeEvent, (, ), ;, }, public, Paint, getValuePaint, (, ), {, return]
[;, }, this, ., valueFont, =, font, ;, fireChangeEvent, (, ), ;, }, public, Paint, getValuePaint, (, ), {, return]
[getValuePaint, (, ), {, return, this, ., valuePaint, ;, }, public, void, setValuePaint, (, Paint, paint, ), {, if, (]
[getValuePaint, (, ), {, return, this, ., valuePaint, ;, }, public, void, setValuePaint, (, Paint, paint, ), {, if, (]
[), {, return, this, ., valuePaint, ;, }, public, void, setValuePaint, (, Paint, paint, ), {, if, (, paint, ==]
[., valuePaint, ;, }, public, void, setValuePaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw]
[}, public, void, setValuePaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }]
[(, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }]
[{, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., valuePaint, =]
[(, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., valuePaint, =, paint, ;]
[;, }, this, ., valuePaint, =, paint, ;, fireChangeEvent, (, ), ;, }, public, Paint, getDialBackgroundPaint, (, ), {, return]
[;, }, this, ., valuePaint, =, paint, ;, fireChangeEvent, (, ), ;, }, public, Paint, getDialBackgroundPaint, (, ), {, return]
[public, Paint, getDialBackgroundPaint, (, ), {, return, this, ., dialBackgroundPaint, ;, }, public, void, setDialBackgroundPaint, (, Paint, paint, ), {]
[public, Paint, getDialBackgroundPaint, (, ), {, return, this, ., dialBackgroundPaint, ;, }, public, void, setDialBackgroundPaint, (, Paint, paint, ), {]
[), {, return, this, ., dialBackgroundPaint, ;, }, public, void, setDialBackgroundPaint, (, Paint, paint, ), {, this, ., dialBackgroundPaint, =]
[return, this, ., dialBackgroundPaint, ;, }, public, void, setDialBackgroundPaint, (, Paint, paint, ), {, this, ., dialBackgroundPaint, =, paint, ;]
[), {, this, ., dialBackgroundPaint, =, paint, ;, fireChangeEvent, (, ), ;, }, public, boolean, getDrawBorder, (, ), {, return]
[), {, this, ., dialBackgroundPaint, =, paint, ;, fireChangeEvent, (, ), ;, }, public, boolean, getDrawBorder, (, ), {, return]
[public, boolean, getDrawBorder, (, ), {, return, this, ., drawBorder, ;, }, public, void, setDrawBorder, (, boolean, draw, ), {]
[public, boolean, getDrawBorder, (, ), {, return, this, ., drawBorder, ;, }, public, void, setDrawBorder, (, boolean, draw, ), {]
[), {, return, this, ., drawBorder, ;, }, public, void, setDrawBorder, (, boolean, draw, ), {, this, ., drawBorder, =]
[return, this, ., drawBorder, ;, }, public, void, setDrawBorder, (, boolean, draw, ), {, this, ., drawBorder, =, draw, ;]
[), {, this, ., drawBorder, =, draw, ;, fireChangeEvent, (, ), ;, }, public, Paint, getDialOutlinePaint, (, ), {, return]
[), {, this, ., drawBorder, =, draw, ;, fireChangeEvent, (, ), ;, }, public, Paint, getDialOutlinePaint, (, ), {, return]
[public, Paint, getDialOutlinePaint, (, ), {, return, this, ., dialOutlinePaint, ;, }, public, void, setDialOutlinePaint, (, Paint, paint, ), {]
[public, Paint, getDialOutlinePaint, (, ), {, return, this, ., dialOutlinePaint, ;, }, public, void, setDialOutlinePaint, (, Paint, paint, ), {]
[), {, return, this, ., dialOutlinePaint, ;, }, public, void, setDialOutlinePaint, (, Paint, paint, ), {, this, ., dialOutlinePaint, =]
[return, this, ., dialOutlinePaint, ;, }, public, void, setDialOutlinePaint, (, Paint, paint, ), {, this, ., dialOutlinePaint, =, paint, ;]
[), {, this, ., dialOutlinePaint, =, paint, ;, fireChangeEvent, (, ), ;, }, public, ValueDataset, getDataset, (, ), {, return]
[), {, this, ., dialOutlinePaint, =, paint, ;, fireChangeEvent, (, ), ;, }, public, ValueDataset, getDataset, (, ), {, return]
[(, ), {, return, this, ., dataset, ;, }, public, void, setDataset, (, ValueDataset, dataset, ), {, ValueDataset, existing, =]
[(, ), {, return, this, ., dataset, ;, }, public, void, setDataset, (, ValueDataset, dataset, ), {, ValueDataset, existing, =]
[dataset, ;, }, public, void, setDataset, (, ValueDataset, dataset, ), {, ValueDataset, existing, =, this, ., dataset, ;, if, (]
[dataset, ;, }, public, void, setDataset, (, ValueDataset, dataset, ), {, ValueDataset, existing, =, this, ., dataset, ;, if, (]
[}, public, void, setDataset, (, ValueDataset, dataset, ), {, ValueDataset, existing, =, this, ., dataset, ;, if, (, existing, !=]
[setDataset, (, ValueDataset, dataset, ), {, ValueDataset, existing, =, this, ., dataset, ;, if, (, existing, !=, null, ), {]
[setDataset, (, ValueDataset, dataset, ), {, ValueDataset, existing, =, this, ., dataset, ;, if, (, existing, !=, null, ), {]
[), {, ValueDataset, existing, =, this, ., dataset, ;, if, (, existing, !=, null, ), {, existing, ., removeChangeListener, (]
[=, this, ., dataset, ;, if, (, existing, !=, null, ), {, existing, ., removeChangeListener, (, this, ), ;, }]
[=, this, ., dataset, ;, if, (, existing, !=, null, ), {, existing, ., removeChangeListener, (, this, ), ;, }]
[;, if, (, existing, !=, null, ), {, existing, ., removeChangeListener, (, this, ), ;, }, this, ., dataset, =]
[!=, null, ), {, existing, ., removeChangeListener, (, this, ), ;, }, this, ., dataset, =, dataset, ;, if, (]
[!=, null, ), {, existing, ., removeChangeListener, (, this, ), ;, }, this, ., dataset, =, dataset, ;, if, (]
[), {, existing, ., removeChangeListener, (, this, ), ;, }, this, ., dataset, =, dataset, ;, if, (, dataset, !=]
[., removeChangeListener, (, this, ), ;, }, this, ., dataset, =, dataset, ;, if, (, dataset, !=, null, ), {]
[(, this, ), ;, }, this, ., dataset, =, dataset, ;, if, (, dataset, !=, null, ), {, setDatasetGroup, (]
[(, this, ), ;, }, this, ., dataset, =, dataset, ;, if, (, dataset, !=, null, ), {, setDatasetGroup, (]
[dataset, =, dataset, ;, if, (, dataset, !=, null, ), {, setDatasetGroup, (, dataset, ., getGroup, (, ), ), ;]
[dataset, =, dataset, ;, if, (, dataset, !=, null, ), {, setDatasetGroup, (, dataset, ., getGroup, (, ), ), ;]
[if, (, dataset, !=, null, ), {, setDatasetGroup, (, dataset, ., getGroup, (, ), ), ;, dataset, ., addChangeListener, (]
[setDatasetGroup, (, dataset, ., getGroup, (, ), ), ;, dataset, ., addChangeListener, (, this, ), ;, }, DatasetChangeEvent, event, =]
[., getGroup, (, ), ), ;, dataset, ., addChangeListener, (, this, ), ;, }, DatasetChangeEvent, event, =, new, DatasetChangeEvent, (]
[(, ), ), ;, dataset, ., addChangeListener, (, this, ), ;, }, DatasetChangeEvent, event, =, new, DatasetChangeEvent, (, this, ,]
[), ;, dataset, ., addChangeListener, (, this, ), ;, }, DatasetChangeEvent, event, =, new, DatasetChangeEvent, (, this, ,, dataset, ,]
[this, ), ;, }, DatasetChangeEvent, event, =, new, DatasetChangeEvent, (, this, ,, dataset, ,, new, DatasetChangeInfo, (, ), ), ;]
[;, }, DatasetChangeEvent, event, =, new, DatasetChangeEvent, (, this, ,, dataset, ,, new, DatasetChangeInfo, (, ), ), ;, datasetChanged, (]
[,, new, DatasetChangeInfo, (, ), ), ;, datasetChanged, (, event, ), ;, }, public, List, getIntervals, (, ), {, return]
[,, new, DatasetChangeInfo, (, ), ), ;, datasetChanged, (, event, ), ;, }, public, List, getIntervals, (, ), {, return]
[), ), ;, datasetChanged, (, event, ), ;, }, public, List, getIntervals, (, ), {, return, Collections, ., unmodifiableList, (]
[), ), ;, datasetChanged, (, event, ), ;, }, public, List, getIntervals, (, ), {, return, Collections, ., unmodifiableList, (]
[Collections, ., unmodifiableList, (, this, ., intervals, ), ;, }, public, void, addInterval, (, MeterInterval, interval, ), {, if, (]
[Collections, ., unmodifiableList, (, this, ., intervals, ), ;, }, public, void, addInterval, (, MeterInterval, interval, ), {, if, (]
[unmodifiableList, (, this, ., intervals, ), ;, }, public, void, addInterval, (, MeterInterval, interval, ), {, if, (, interval, ==]
[intervals, ), ;, }, public, void, addInterval, (, MeterInterval, interval, ), {, if, (, interval, ==, null, ), {, throw]
[}, public, void, addInterval, (, MeterInterval, interval, ), {, if, (, interval, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, MeterInterval, interval, ), {, if, (, interval, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'interval' argument.", ), ;, }]
[(, MeterInterval, interval, ), {, if, (, interval, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'interval' argument.", ), ;, }]
[(, MeterInterval, interval, ), {, if, (, interval, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'interval' argument.", ), ;, }]
[(, interval, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'interval' argument.", ), ;, }, this, ., intervals, ., add, (]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'interval' argument.", ), ;, }, this, ., intervals, ., add, (, interval, ), ;]
[this, ., intervals, ., add, (, interval, ), ;, fireChangeEvent, (, ), ;, }, public, void, clearIntervals, (, ), {]
[this, ., intervals, ., add, (, interval, ), ;, fireChangeEvent, (, ), ;, }, public, void, clearIntervals, (, ), {]
[this, ., intervals, ., add, (, interval, ), ;, fireChangeEvent, (, ), ;, }, public, void, clearIntervals, (, ), {]
[;, fireChangeEvent, (, ), ;, }, public, void, clearIntervals, (, ), {, this, ., intervals, ., clear, (, ), ;]
[intervals, ., clear, (, ), ;, fireChangeEvent, (, ), ;, }, public, LegendItemCollection, getLegendItems, (, ), {, LegendItemCollection, result, =]
[), ;, }, public, LegendItemCollection, getLegendItems, (, ), {, LegendItemCollection, result, =, new, LegendItemCollection, (, ), ;, Iterator, iterator, =]
[), ;, }, public, LegendItemCollection, getLegendItems, (, ), {, LegendItemCollection, result, =, new, LegendItemCollection, (, ), ;, Iterator, iterator, =]
[), ;, }, public, LegendItemCollection, getLegendItems, (, ), {, LegendItemCollection, result, =, new, LegendItemCollection, (, ), ;, Iterator, iterator, =]
[result, =, new, LegendItemCollection, (, ), ;, Iterator, iterator, =, this, ., intervals, ., iterator, (, ), ;, while, (]
[result, =, new, LegendItemCollection, (, ), ;, Iterator, iterator, =, this, ., intervals, ., iterator, (, ), ;, while, (]
[this, ., intervals, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, MeterInterval, mi, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, MeterInterval, mi, =, (, MeterInterval, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, MeterInterval, mi, =, (, MeterInterval, )]
[hasNext, (, ), ), {, MeterInterval, mi, =, (, MeterInterval, ), iterator, ., next, (, ), ;, Paint, color, =]
[hasNext, (, ), ), {, MeterInterval, mi, =, (, MeterInterval, ), iterator, ., next, (, ), ;, Paint, color, =]
[(, MeterInterval, ), iterator, ., next, (, ), ;, Paint, color, =, mi, ., getBackgroundPaint, (, ), ;, if, (]
[(, MeterInterval, ), iterator, ., next, (, ), ;, Paint, color, =, mi, ., getBackgroundPaint, (, ), ;, if, (]
[), iterator, ., next, (, ), ;, Paint, color, =, mi, ., getBackgroundPaint, (, ), ;, if, (, color, ==]
[next, (, ), ;, Paint, color, =, mi, ., getBackgroundPaint, (, ), ;, if, (, color, ==, null, ), {]
[), ;, Paint, color, =, mi, ., getBackgroundPaint, (, ), ;, if, (, color, ==, null, ), {, color, =]
[), ;, Paint, color, =, mi, ., getBackgroundPaint, (, ), ;, if, (, color, ==, null, ), {, color, =]
[;, if, (, color, ==, null, ), {, color, =, mi, ., getOutlinePaint, (, ), ;, }, LegendItem, item, =]
[color, ==, null, ), {, color, =, mi, ., getOutlinePaint, (, ), ;, }, LegendItem, item, =, new, LegendItem, (]
[color, ==, null, ), {, color, =, mi, ., getOutlinePaint, (, ), ;, }, LegendItem, item, =, new, LegendItem, (]
[=, mi, ., getOutlinePaint, (, ), ;, }, LegendItem, item, =, new, LegendItem, (, mi, ., getLabel, (, ), ,]
[=, mi, ., getOutlinePaint, (, ), ;, }, LegendItem, item, =, new, LegendItem, (, mi, ., getLabel, (, ), ,]
[;, }, LegendItem, item, =, new, LegendItem, (, mi, ., getLabel, (, ), ,, mi, ., getLabel, (, ), ,]
[LegendItem, item, =, new, LegendItem, (, mi, ., getLabel, (, ), ,, mi, ., getLabel, (, ), ,, null, ,]
[=, new, LegendItem, (, mi, ., getLabel, (, ), ,, mi, ., getLabel, (, ), ,, null, ,, null, ,]
[., getLabel, (, ), ,, mi, ., getLabel, (, ), ,, null, ,, null, ,, new, Rectangle2D, ., Double, (]
[getLabel, (, ), ,, mi, ., getLabel, (, ), ,, null, ,, null, ,, new, Rectangle2D, ., Double, (, -]
[), ,, mi, ., getLabel, (, ), ,, null, ,, null, ,, new, Rectangle2D, ., Double, (, -, 4.0, ,]
[,, mi, ., getLabel, (, ), ,, null, ,, null, ,, new, Rectangle2D, ., Double, (, -, 4.0, ,, -]
[., getLabel, (, ), ,, null, ,, null, ,, new, Rectangle2D, ., Double, (, -, 4.0, ,, -, 4.0, ,]
[(, ), ,, null, ,, null, ,, new, Rectangle2D, ., Double, (, -, 4.0, ,, -, 4.0, ,, 8.0, ,]
[null, ,, null, ,, new, Rectangle2D, ., Double, (, -, 4.0, ,, -, 4.0, ,, 8.0, ,, 8.0, ), ,]
[,, new, Rectangle2D, ., Double, (, -, 4.0, ,, -, 4.0, ,, 8.0, ,, 8.0, ), ,, color, ), ;]
[,, new, Rectangle2D, ., Double, (, -, 4.0, ,, -, 4.0, ,, 8.0, ,, 8.0, ), ,, color, ), ;]
[Double, (, -, 4.0, ,, -, 4.0, ,, 8.0, ,, 8.0, ), ,, color, ), ;, item, ., setDataset, (]
[-, 4.0, ,, 8.0, ,, 8.0, ), ,, color, ), ;, item, ., setDataset, (, getDataset, (, ), ), ;]
[-, 4.0, ,, 8.0, ,, 8.0, ), ,, color, ), ;, item, ., setDataset, (, getDataset, (, ), ), ;]
[,, 8.0, ), ,, color, ), ;, item, ., setDataset, (, getDataset, (, ), ), ;, result, ., add, (]
[), ;, item, ., setDataset, (, getDataset, (, ), ), ;, result, ., add, (, item, ), ;, }, return]
[draw, (, Graphics2D, g2, ,, Rectangle2D, area, ,, Point2D, anchor, ,, PlotState, parentState, ,, PlotRenderingInfo, info, ), {, if, (]
[draw, (, Graphics2D, g2, ,, Rectangle2D, area, ,, Point2D, anchor, ,, PlotState, parentState, ,, PlotRenderingInfo, info, ), {, if, (]
[Graphics2D, g2, ,, Rectangle2D, area, ,, Point2D, anchor, ,, PlotState, parentState, ,, PlotRenderingInfo, info, ), {, if, (, info, !=]
[Rectangle2D, area, ,, Point2D, anchor, ,, PlotState, parentState, ,, PlotRenderingInfo, info, ), {, if, (, info, !=, null, ), {]
[Rectangle2D, area, ,, Point2D, anchor, ,, PlotState, parentState, ,, PlotRenderingInfo, info, ), {, if, (, info, !=, null, ), {]
[anchor, ,, PlotState, parentState, ,, PlotRenderingInfo, info, ), {, if, (, info, !=, null, ), {, info, ., setPlotArea, (]
[), {, if, (, info, !=, null, ), {, info, ., setPlotArea, (, area, ), ;, }, RectangleInsets, insets, =]
[info, !=, null, ), {, info, ., setPlotArea, (, area, ), ;, }, RectangleInsets, insets, =, getInsets, (, ), ;]
[info, !=, null, ), {, info, ., setPlotArea, (, area, ), ;, }, RectangleInsets, insets, =, getInsets, (, ), ;]
[{, info, ., setPlotArea, (, area, ), ;, }, RectangleInsets, insets, =, getInsets, (, ), ;, insets, ., trim, (]
[setPlotArea, (, area, ), ;, }, RectangleInsets, insets, =, getInsets, (, ), ;, insets, ., trim, (, area, ), ;]
[setPlotArea, (, area, ), ;, }, RectangleInsets, insets, =, getInsets, (, ), ;, insets, ., trim, (, area, ), ;]
[;, }, RectangleInsets, insets, =, getInsets, (, ), ;, insets, ., trim, (, area, ), ;, area, ., setRect, (]
[;, }, RectangleInsets, insets, =, getInsets, (, ), ;, insets, ., trim, (, area, ), ;, area, ., setRect, (]
[;, }, RectangleInsets, insets, =, getInsets, (, ), ;, insets, ., trim, (, area, ), ;, area, ., setRect, (]
[(, ), ;, insets, ., trim, (, area, ), ;, area, ., setRect, (, area, ., getX, (, ), +]
[;, insets, ., trim, (, area, ), ;, area, ., setRect, (, area, ., getX, (, ), +, 4, ,]
[;, insets, ., trim, (, area, ), ;, area, ., setRect, (, area, ., getX, (, ), +, 4, ,]
[;, insets, ., trim, (, area, ), ;, area, ., setRect, (, area, ., getX, (, ), +, 4, ,]
[), ;, area, ., setRect, (, area, ., getX, (, ), +, 4, ,, area, ., getY, (, ), +]
[area, ., setRect, (, area, ., getX, (, ), +, 4, ,, area, ., getY, (, ), +, 4, ,]
[area, ., setRect, (, area, ., getX, (, ), +, 4, ,, area, ., getY, (, ), +, 4, ,]
[area, ., setRect, (, area, ., getX, (, ), +, 4, ,, area, ., getY, (, ), +, 4, ,]
[getX, (, ), +, 4, ,, area, ., getY, (, ), +, 4, ,, area, ., getWidth, (, ), -]
[), +, 4, ,, area, ., getY, (, ), +, 4, ,, area, ., getWidth, (, ), -, 8, ,]
[), +, 4, ,, area, ., getY, (, ), +, 4, ,, area, ., getWidth, (, ), -, 8, ,]
[), +, 4, ,, area, ., getY, (, ), +, 4, ,, area, ., getWidth, (, ), -, 8, ,]
[getY, (, ), +, 4, ,, area, ., getWidth, (, ), -, 8, ,, area, ., getHeight, (, ), -]
[,, area, ., getWidth, (, ), -, 8, ,, area, ., getHeight, (, ), -, 8, ), ;, if, (]
[,, area, ., getWidth, (, ), -, 8, ,, area, ., getHeight, (, ), -, 8, ), ;, if, (]
[), -, 8, ,, area, ., getHeight, (, ), -, 8, ), ;, if, (, this, ., drawBorder, ), {]
[8, ,, area, ., getHeight, (, ), -, 8, ), ;, if, (, this, ., drawBorder, ), {, drawBackground, (]
[area, ., getHeight, (, ), -, 8, ), ;, if, (, this, ., drawBorder, ), {, drawBackground, (, g2, ,]
[), ;, if, (, this, ., drawBorder, ), {, drawBackground, (, g2, ,, area, ), ;, }, double, gapHorizontal, =]
[;, if, (, this, ., drawBorder, ), {, drawBackground, (, g2, ,, area, ), ;, }, double, gapHorizontal, =, (]
[;, if, (, this, ., drawBorder, ), {, drawBackground, (, g2, ,, area, ), ;, }, double, gapHorizontal, =, (]
[(, this, ., drawBorder, ), {, drawBackground, (, g2, ,, area, ), ;, }, double, gapHorizontal, =, (, 2, *]
[drawBackground, (, g2, ,, area, ), ;, }, double, gapHorizontal, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;, double, gapVertical, =]
[(, g2, ,, area, ), ;, }, double, gapHorizontal, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;, double, gapVertical, =, (]
[(, g2, ,, area, ), ;, }, double, gapHorizontal, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;, double, gapVertical, =, (]
[,, area, ), ;, }, double, gapHorizontal, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;, double, gapVertical, =, (, 2, *]
[gapHorizontal, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;, double, gapVertical, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;, double, meterX, =]
[gapHorizontal, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;, double, gapVertical, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;, double, meterX, =]
[gapHorizontal, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;, double, gapVertical, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;, double, meterX, =]
[), ;, double, gapVertical, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;, double, meterX, =, area, ., getX, (, ), +]
[), ;, double, gapVertical, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;, double, meterX, =, area, ., getX, (, ), +]
[double, gapVertical, =, (, 2, *, DEFAULT_BORDER_SIZE, ), ;, double, meterX, =, area, ., getX, (, ), +, gapHorizontal, /]
[*, DEFAULT_BORDER_SIZE, ), ;, double, meterX, =, area, ., getX, (, ), +, gapHorizontal, /, 2, ;, double, meterY, =]
[*, DEFAULT_BORDER_SIZE, ), ;, double, meterX, =, area, ., getX, (, ), +, gapHorizontal, /, 2, ;, double, meterY, =]
[*, DEFAULT_BORDER_SIZE, ), ;, double, meterX, =, area, ., getX, (, ), +, gapHorizontal, /, 2, ;, double, meterY, =]
[=, area, ., getX, (, ), +, gapHorizontal, /, 2, ;, double, meterY, =, area, ., getY, (, ), +]
[=, area, ., getX, (, ), +, gapHorizontal, /, 2, ;, double, meterY, =, area, ., getY, (, ), +]
[., getX, (, ), +, gapHorizontal, /, 2, ;, double, meterY, =, area, ., getY, (, ), +, gapVertical, /]
[gapHorizontal, /, 2, ;, double, meterY, =, area, ., getY, (, ), +, gapVertical, /, 2, ;, double, meterW, =]
[gapHorizontal, /, 2, ;, double, meterY, =, area, ., getY, (, ), +, gapVertical, /, 2, ;, double, meterW, =]
[gapHorizontal, /, 2, ;, double, meterY, =, area, ., getY, (, ), +, gapVertical, /, 2, ;, double, meterW, =]
[=, area, ., getY, (, ), +, gapVertical, /, 2, ;, double, meterW, =, area, ., getWidth, (, ), -]
[), +, gapVertical, /, 2, ;, double, meterW, =, area, ., getWidth, (, ), -, gapHorizontal, ;, double, meterH, =]
[), +, gapVertical, /, 2, ;, double, meterW, =, area, ., getWidth, (, ), -, gapHorizontal, ;, double, meterH, =]
[), +, gapVertical, /, 2, ;, double, meterW, =, area, ., getWidth, (, ), -, gapHorizontal, ;, double, meterH, =]
[), +, gapVertical, /, 2, ;, double, meterW, =, area, ., getWidth, (, ), -, gapHorizontal, ;, double, meterH, =]
[double, meterW, =, area, ., getWidth, (, ), -, gapHorizontal, ;, double, meterH, =, area, ., getHeight, (, ), -]
[=, area, ., getWidth, (, ), -, gapHorizontal, ;, double, meterH, =, area, ., getHeight, (, ), -, gapVertical, +]
[area, ., getWidth, (, ), -, gapHorizontal, ;, double, meterH, =, area, ., getHeight, (, ), -, gapVertical, +, (]
[area, ., getWidth, (, ), -, gapHorizontal, ;, double, meterH, =, area, ., getHeight, (, ), -, gapVertical, +, (]
[area, ., getWidth, (, ), -, gapHorizontal, ;, double, meterH, =, area, ., getHeight, (, ), -, gapVertical, +, (]
[., getWidth, (, ), -, gapHorizontal, ;, double, meterH, =, area, ., getHeight, (, ), -, gapVertical, +, (, (]
[., getWidth, (, ), -, gapHorizontal, ;, double, meterH, =, area, ., getHeight, (, ), -, gapVertical, +, (, (]
[., getWidth, (, ), -, gapHorizontal, ;, double, meterH, =, area, ., getHeight, (, ), -, gapVertical, +, (, (]
[-, gapHorizontal, ;, double, meterH, =, area, ., getHeight, (, ), -, gapVertical, +, (, (, this, ., meterAngle, <=]
[double, meterH, =, area, ., getHeight, (, ), -, gapVertical, +, (, (, this, ., meterAngle, <=, 180, ), &&]
[meterH, =, area, ., getHeight, (, ), -, gapVertical, +, (, (, this, ., meterAngle, <=, 180, ), &&, (]
[meterH, =, area, ., getHeight, (, ), -, gapVertical, +, (, (, this, ., meterAngle, <=, 180, ), &&, (]
[meterH, =, area, ., getHeight, (, ), -, gapVertical, +, (, (, this, ., meterAngle, <=, 180, ), &&, (]
[getHeight, (, ), -, gapVertical, +, (, (, this, ., meterAngle, <=, 180, ), &&, (, this, ., shape, !=]
[getHeight, (, ), -, gapVertical, +, (, (, this, ., meterAngle, <=, 180, ), &&, (, this, ., shape, !=]
[+, (, (, this, ., meterAngle, <=, 180, ), &&, (, this, ., shape, !=, DialShape, ., CIRCLE, ), ?]
[+, (, (, this, ., meterAngle, <=, 180, ), &&, (, this, ., shape, !=, DialShape, ., CIRCLE, ), ?]
[+, (, (, this, ., meterAngle, <=, 180, ), &&, (, this, ., shape, !=, DialShape, ., CIRCLE, ), ?]
[<=, 180, ), &&, (, this, ., shape, !=, DialShape, ., CIRCLE, ), ?, area, ., getHeight, (, ), /]
[), &&, (, this, ., shape, !=, DialShape, ., CIRCLE, ), ?, area, ., getHeight, (, ), /, 1.25, :]
[!=, DialShape, ., CIRCLE, ), ?, area, ., getHeight, (, ), /, 1.25, :, 0, ), ;, double, min, =]
[!=, DialShape, ., CIRCLE, ), ?, area, ., getHeight, (, ), /, 1.25, :, 0, ), ;, double, min, =]
[!=, DialShape, ., CIRCLE, ), ?, area, ., getHeight, (, ), /, 1.25, :, 0, ), ;, double, min, =]
[), ?, area, ., getHeight, (, ), /, 1.25, :, 0, ), ;, double, min, =, Math, ., min, (]
[area, ., getHeight, (, ), /, 1.25, :, 0, ), ;, double, min, =, Math, ., min, (, meterW, ,]
[(, ), /, 1.25, :, 0, ), ;, double, min, =, Math, ., min, (, meterW, ,, meterH, ), /]
[/, 1.25, :, 0, ), ;, double, min, =, Math, ., min, (, meterW, ,, meterH, ), /, 2, ;]
[:, 0, ), ;, double, min, =, Math, ., min, (, meterW, ,, meterH, ), /, 2, ;, meterX, =]
[:, 0, ), ;, double, min, =, Math, ., min, (, meterW, ,, meterH, ), /, 2, ;, meterX, =]
[:, 0, ), ;, double, min, =, Math, ., min, (, meterW, ,, meterH, ), /, 2, ;, meterX, =]
[0, ), ;, double, min, =, Math, ., min, (, meterW, ,, meterH, ), /, 2, ;, meterX, =, (]
[0, ), ;, double, min, =, Math, ., min, (, meterW, ,, meterH, ), /, 2, ;, meterX, =, (]
[0, ), ;, double, min, =, Math, ., min, (, meterW, ,, meterH, ), /, 2, ;, meterX, =, (]
[;, double, min, =, Math, ., min, (, meterW, ,, meterH, ), /, 2, ;, meterX, =, (, meterX, +]
[min, =, Math, ., min, (, meterW, ,, meterH, ), /, 2, ;, meterX, =, (, meterX, +, meterX, +]
[., min, (, meterW, ,, meterH, ), /, 2, ;, meterX, =, (, meterX, +, meterX, +, meterW, ), /]
[(, meterW, ,, meterH, ), /, 2, ;, meterX, =, (, meterX, +, meterX, +, meterW, ), /, 2, -]
[,, meterH, ), /, 2, ;, meterX, =, (, meterX, +, meterX, +, meterW, ), /, 2, -, min, ;]
[), /, 2, ;, meterX, =, (, meterX, +, meterX, +, meterW, ), /, 2, -, min, ;, meterY, =]
[), /, 2, ;, meterX, =, (, meterX, +, meterX, +, meterW, ), /, 2, -, min, ;, meterY, =]
[), /, 2, ;, meterX, =, (, meterX, +, meterX, +, meterW, ), /, 2, -, min, ;, meterY, =]
[/, 2, ;, meterX, =, (, meterX, +, meterX, +, meterW, ), /, 2, -, min, ;, meterY, =, (]
[/, 2, ;, meterX, =, (, meterX, +, meterX, +, meterW, ), /, 2, -, min, ;, meterY, =, (]
[/, 2, ;, meterX, =, (, meterX, +, meterX, +, meterW, ), /, 2, -, min, ;, meterY, =, (]
[;, meterX, =, (, meterX, +, meterX, +, meterW, ), /, 2, -, min, ;, meterY, =, (, meterY, +]
[=, (, meterX, +, meterX, +, meterW, ), /, 2, -, min, ;, meterY, =, (, meterY, +, meterY, +]
[+, meterX, +, meterW, ), /, 2, -, min, ;, meterY, =, (, meterY, +, meterY, +, meterH, ), /]
[+, meterW, ), /, 2, -, min, ;, meterY, =, (, meterY, +, meterY, +, meterH, ), /, 2, -]
[), /, 2, -, min, ;, meterY, =, (, meterY, +, meterY, +, meterH, ), /, 2, -, min, ;]
[2, -, min, ;, meterY, =, (, meterY, +, meterY, +, meterH, ), /, 2, -, min, ;, meterW, =]
[2, -, min, ;, meterY, =, (, meterY, +, meterY, +, meterH, ), /, 2, -, min, ;, meterW, =]
[min, ;, meterY, =, (, meterY, +, meterY, +, meterH, ), /, 2, -, min, ;, meterW, =, 2, *]
[meterY, =, (, meterY, +, meterY, +, meterH, ), /, 2, -, min, ;, meterW, =, 2, *, min, ;]
[(, meterY, +, meterY, +, meterH, ), /, 2, -, min, ;, meterW, =, 2, *, min, ;, meterH, =]
[(, meterY, +, meterY, +, meterH, ), /, 2, -, min, ;, meterW, =, 2, *, min, ;, meterH, =]
[+, meterY, +, meterH, ), /, 2, -, min, ;, meterW, =, 2, *, min, ;, meterH, =, 2, *]
[/, 2, -, min, ;, meterW, =, 2, *, min, ;, meterH, =, 2, *, min, ;, Rectangle2D, meterArea, =]
[meterW, =, 2, *, min, ;, meterH, =, 2, *, min, ;, Rectangle2D, meterArea, =, new, Rectangle2D, ., Double, (]
[2, *, min, ;, meterH, =, 2, *, min, ;, Rectangle2D, meterArea, =, new, Rectangle2D, ., Double, (, meterX, ,]
[min, ;, meterH, =, 2, *, min, ;, Rectangle2D, meterArea, =, new, Rectangle2D, ., Double, (, meterX, ,, meterY, ,]
[meterH, =, 2, *, min, ;, Rectangle2D, meterArea, =, new, Rectangle2D, ., Double, (, meterX, ,, meterY, ,, meterW, ,]
[=, new, Rectangle2D, ., Double, (, meterX, ,, meterY, ,, meterW, ,, meterH, ), ;, Rectangle2D, ., Double, originalArea, =]
[(, meterX, ,, meterY, ,, meterW, ,, meterH, ), ;, Rectangle2D, ., Double, originalArea, =, new, Rectangle2D, ., Double, (]
[(, meterX, ,, meterY, ,, meterW, ,, meterH, ), ;, Rectangle2D, ., Double, originalArea, =, new, Rectangle2D, ., Double, (]
[(, meterX, ,, meterY, ,, meterW, ,, meterH, ), ;, Rectangle2D, ., Double, originalArea, =, new, Rectangle2D, ., Double, (]
[,, meterH, ), ;, Rectangle2D, ., Double, originalArea, =, new, Rectangle2D, ., Double, (, meterArea, ., getX, (, ), -]
[), ;, Rectangle2D, ., Double, originalArea, =, new, Rectangle2D, ., Double, (, meterArea, ., getX, (, ), -, 4, ,]
[), ;, Rectangle2D, ., Double, originalArea, =, new, Rectangle2D, ., Double, (, meterArea, ., getX, (, ), -, 4, ,]
[), ;, Rectangle2D, ., Double, originalArea, =, new, Rectangle2D, ., Double, (, meterArea, ., getX, (, ), -, 4, ,]
[=, new, Rectangle2D, ., Double, (, meterArea, ., getX, (, ), -, 4, ,, meterArea, ., getY, (, ), -]
[Rectangle2D, ., Double, (, meterArea, ., getX, (, ), -, 4, ,, meterArea, ., getY, (, ), -, 4, ,]
[Rectangle2D, ., Double, (, meterArea, ., getX, (, ), -, 4, ,, meterArea, ., getY, (, ), -, 4, ,]
[Rectangle2D, ., Double, (, meterArea, ., getX, (, ), -, 4, ,, meterArea, ., getY, (, ), -, 4, ,]
[getX, (, ), -, 4, ,, meterArea, ., getY, (, ), -, 4, ,, meterArea, ., getWidth, (, ), +]
[), -, 4, ,, meterArea, ., getY, (, ), -, 4, ,, meterArea, ., getWidth, (, ), +, 8, ,]
[), -, 4, ,, meterArea, ., getY, (, ), -, 4, ,, meterArea, ., getWidth, (, ), +, 8, ,]
[), -, 4, ,, meterArea, ., getY, (, ), -, 4, ,, meterArea, ., getWidth, (, ), +, 8, ,]
[getY, (, ), -, 4, ,, meterArea, ., getWidth, (, ), +, 8, ,, meterArea, ., getHeight, (, ), +]
[meterArea, ., getWidth, (, ), +, 8, ,, meterArea, ., getHeight, (, ), +, 8, ), ;, double, meterMiddleX, =]
[meterArea, ., getWidth, (, ), +, 8, ,, meterArea, ., getHeight, (, ), +, 8, ), ;, double, meterMiddleX, =]
[., getHeight, (, ), +, 8, ), ;, double, meterMiddleX, =, meterArea, ., getCenterX, (, ), ;, double, meterMiddleY, =]
[., getHeight, (, ), +, 8, ), ;, double, meterMiddleX, =, meterArea, ., getCenterX, (, ), ;, double, meterMiddleY, =]
[meterMiddleX, =, meterArea, ., getCenterX, (, ), ;, double, meterMiddleY, =, meterArea, ., getCenterY, (, ), ;, ValueDataset, data, =]
[), ;, double, meterMiddleY, =, meterArea, ., getCenterY, (, ), ;, ValueDataset, data, =, getDataset, (, ), ;, if, (]
[), ;, double, meterMiddleY, =, meterArea, ., getCenterY, (, ), ;, ValueDataset, data, =, getDataset, (, ), ;, if, (]
[double, meterMiddleY, =, meterArea, ., getCenterY, (, ), ;, ValueDataset, data, =, getDataset, (, ), ;, if, (, data, !=]
[(, ), ;, ValueDataset, data, =, getDataset, (, ), ;, if, (, data, !=, null, ), {, double, dataMin, =]
[(, ), ;, ValueDataset, data, =, getDataset, (, ), ;, if, (, data, !=, null, ), {, double, dataMin, =]
[(, ), ;, ValueDataset, data, =, getDataset, (, ), ;, if, (, data, !=, null, ), {, double, dataMin, =]
[(, data, !=, null, ), {, double, dataMin, =, this, ., range, ., getLowerBound, (, ), ;, double, dataMax, =]
[(, data, !=, null, ), {, double, dataMin, =, this, ., range, ., getLowerBound, (, ), ;, double, dataMax, =]
[(, data, !=, null, ), {, double, dataMin, =, this, ., range, ., getLowerBound, (, ), ;, double, dataMax, =]
[range, ., getLowerBound, (, ), ;, double, dataMax, =, this, ., range, ., getUpperBound, (, ), ;, Shape, savedClip, =]
[range, ., getLowerBound, (, ), ;, double, dataMax, =, this, ., range, ., getUpperBound, (, ), ;, Shape, savedClip, =]
[double, dataMax, =, this, ., range, ., getUpperBound, (, ), ;, Shape, savedClip, =, g2, ., getClip, (, ), ;]
[double, dataMax, =, this, ., range, ., getUpperBound, (, ), ;, Shape, savedClip, =, g2, ., getClip, (, ), ;]
[., range, ., getUpperBound, (, ), ;, Shape, savedClip, =, g2, ., getClip, (, ), ;, g2, ., clip, (]
[;, Shape, savedClip, =, g2, ., getClip, (, ), ;, g2, ., clip, (, originalArea, ), ;, Composite, originalComposite, =]
[;, Shape, savedClip, =, g2, ., getClip, (, ), ;, g2, ., clip, (, originalArea, ), ;, Composite, originalComposite, =]
[getClip, (, ), ;, g2, ., clip, (, originalArea, ), ;, Composite, originalComposite, =, g2, ., getComposite, (, ), ;]
[getClip, (, ), ;, g2, ., clip, (, originalArea, ), ;, Composite, originalComposite, =, g2, ., getComposite, (, ), ;]
[g2, ., clip, (, originalArea, ), ;, Composite, originalComposite, =, g2, ., getComposite, (, ), ;, g2, ., setComposite, (]
[g2, ., clip, (, originalArea, ), ;, Composite, originalComposite, =, g2, ., getComposite, (, ), ;, g2, ., setComposite, (]
[originalArea, ), ;, Composite, originalComposite, =, g2, ., getComposite, (, ), ;, g2, ., setComposite, (, AlphaComposite, ., getInstance, (]
[originalArea, ), ;, Composite, originalComposite, =, g2, ., getComposite, (, ), ;, g2, ., setComposite, (, AlphaComposite, ., getInstance, (]
[originalComposite, =, g2, ., getComposite, (, ), ;, g2, ., setComposite, (, AlphaComposite, ., getInstance, (, AlphaComposite, ., SRC_OVER, ,]
[g2, ., setComposite, (, AlphaComposite, ., getInstance, (, AlphaComposite, ., SRC_OVER, ,, getForegroundAlpha, (, ), ), ), ;, if, (]
[g2, ., setComposite, (, AlphaComposite, ., getInstance, (, AlphaComposite, ., SRC_OVER, ,, getForegroundAlpha, (, ), ), ), ;, if, (]
[g2, ., setComposite, (, AlphaComposite, ., getInstance, (, AlphaComposite, ., SRC_OVER, ,, getForegroundAlpha, (, ), ), ), ;, if, (]
[AlphaComposite, ., getInstance, (, AlphaComposite, ., SRC_OVER, ,, getForegroundAlpha, (, ), ), ), ;, if, (, this, ., dialBackgroundPaint, !=]
[(, AlphaComposite, ., SRC_OVER, ,, getForegroundAlpha, (, ), ), ), ;, if, (, this, ., dialBackgroundPaint, !=, null, ), {]
[., SRC_OVER, ,, getForegroundAlpha, (, ), ), ), ;, if, (, this, ., dialBackgroundPaint, !=, null, ), {, fillArc, (]
[,, getForegroundAlpha, (, ), ), ), ;, if, (, this, ., dialBackgroundPaint, !=, null, ), {, fillArc, (, g2, ,]
[(, ), ), ), ;, if, (, this, ., dialBackgroundPaint, !=, null, ), {, fillArc, (, g2, ,, originalArea, ,]
[), ), ;, if, (, this, ., dialBackgroundPaint, !=, null, ), {, fillArc, (, g2, ,, originalArea, ,, dataMin, ,]
[;, if, (, this, ., dialBackgroundPaint, !=, null, ), {, fillArc, (, g2, ,, originalArea, ,, dataMin, ,, dataMax, ,]
[;, if, (, this, ., dialBackgroundPaint, !=, null, ), {, fillArc, (, g2, ,, originalArea, ,, dataMin, ,, dataMax, ,]
[., dialBackgroundPaint, !=, null, ), {, fillArc, (, g2, ,, originalArea, ,, dataMin, ,, dataMax, ,, this, ., dialBackgroundPaint, ,]
[), {, fillArc, (, g2, ,, originalArea, ,, dataMin, ,, dataMax, ,, this, ., dialBackgroundPaint, ,, true, ), ;, }]
[fillArc, (, g2, ,, originalArea, ,, dataMin, ,, dataMax, ,, this, ., dialBackgroundPaint, ,, true, ), ;, }, drawTicks, (]
[g2, ,, originalArea, ,, dataMin, ,, dataMax, ,, this, ., dialBackgroundPaint, ,, true, ), ;, }, drawTicks, (, g2, ,]
[originalArea, ,, dataMin, ,, dataMax, ,, this, ., dialBackgroundPaint, ,, true, ), ;, }, drawTicks, (, g2, ,, meterArea, ,]
[dataMin, ,, dataMax, ,, this, ., dialBackgroundPaint, ,, true, ), ;, }, drawTicks, (, g2, ,, meterArea, ,, dataMin, ,]
[,, this, ., dialBackgroundPaint, ,, true, ), ;, }, drawTicks, (, g2, ,, meterArea, ,, dataMin, ,, dataMax, ), ;]
[., dialBackgroundPaint, ,, true, ), ;, }, drawTicks, (, g2, ,, meterArea, ,, dataMin, ,, dataMax, ), ;, drawArcForInterval, (]
[,, true, ), ;, }, drawTicks, (, g2, ,, meterArea, ,, dataMin, ,, dataMax, ), ;, drawArcForInterval, (, g2, ,]
[), ;, }, drawTicks, (, g2, ,, meterArea, ,, dataMin, ,, dataMax, ), ;, drawArcForInterval, (, g2, ,, meterArea, ,]
[drawTicks, (, g2, ,, meterArea, ,, dataMin, ,, dataMax, ), ;, drawArcForInterval, (, g2, ,, meterArea, ,, new, MeterInterval, (]
[g2, ,, meterArea, ,, dataMin, ,, dataMax, ), ;, drawArcForInterval, (, g2, ,, meterArea, ,, new, MeterInterval, (, "", ,]
[g2, ,, meterArea, ,, dataMin, ,, dataMax, ), ;, drawArcForInterval, (, g2, ,, meterArea, ,, new, MeterInterval, (, "", ,]
[dataMin, ,, dataMax, ), ;, drawArcForInterval, (, g2, ,, meterArea, ,, new, MeterInterval, (, "", ,, this, ., range, ,]
[dataMin, ,, dataMax, ), ;, drawArcForInterval, (, g2, ,, meterArea, ,, new, MeterInterval, (, "", ,, this, ., range, ,]
[;, drawArcForInterval, (, g2, ,, meterArea, ,, new, MeterInterval, (, "", ,, this, ., range, ,, this, ., dialOutlinePaint, ,]
[g2, ,, meterArea, ,, new, MeterInterval, (, "", ,, this, ., range, ,, this, ., dialOutlinePaint, ,, new, BasicStroke, (]
[,, new, MeterInterval, (, "", ,, this, ., range, ,, this, ., dialOutlinePaint, ,, new, BasicStroke, (, 1.0f, ), ,]
[., range, ,, this, ., dialOutlinePaint, ,, new, BasicStroke, (, 1.0f, ), ,, null, ), ), ;, Iterator, iterator, =]
[., range, ,, this, ., dialOutlinePaint, ,, new, BasicStroke, (, 1.0f, ), ,, null, ), ), ;, Iterator, iterator, =]
[., range, ,, this, ., dialOutlinePaint, ,, new, BasicStroke, (, 1.0f, ), ,, null, ), ), ;, Iterator, iterator, =]
[1.0f, ), ,, null, ), ), ;, Iterator, iterator, =, this, ., intervals, ., iterator, (, ), ;, while, (]
[1.0f, ), ,, null, ), ), ;, Iterator, iterator, =, this, ., intervals, ., iterator, (, ), ;, while, (]
[this, ., intervals, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, MeterInterval, interval, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, MeterInterval, interval, =, (, MeterInterval, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, MeterInterval, interval, =, (, MeterInterval, )]
[(, iterator, ., hasNext, (, ), ), {, MeterInterval, interval, =, (, MeterInterval, ), iterator, ., next, (, ), ;]
[., hasNext, (, ), ), {, MeterInterval, interval, =, (, MeterInterval, ), iterator, ., next, (, ), ;, drawArcForInterval, (]
[(, ), ), {, MeterInterval, interval, =, (, MeterInterval, ), iterator, ., next, (, ), ;, drawArcForInterval, (, g2, ,]
[), {, MeterInterval, interval, =, (, MeterInterval, ), iterator, ., next, (, ), ;, drawArcForInterval, (, g2, ,, meterArea, ,]
[), iterator, ., next, (, ), ;, drawArcForInterval, (, g2, ,, meterArea, ,, interval, ), ;, }, Number, n, =]
[), iterator, ., next, (, ), ;, drawArcForInterval, (, g2, ,, meterArea, ,, interval, ), ;, }, Number, n, =]
[(, g2, ,, meterArea, ,, interval, ), ;, }, Number, n, =, data, ., getValue, (, ), ;, if, (]
[(, g2, ,, meterArea, ,, interval, ), ;, }, Number, n, =, data, ., getValue, (, ), ;, if, (]
[,, meterArea, ,, interval, ), ;, }, Number, n, =, data, ., getValue, (, ), ;, if, (, n, !=]
[}, Number, n, =, data, ., getValue, (, ), ;, if, (, n, !=, null, ), {, double, value, =]
[}, Number, n, =, data, ., getValue, (, ), ;, if, (, n, !=, null, ), {, double, value, =]
[getValue, (, ), ;, if, (, n, !=, null, ), {, double, value, =, n, ., doubleValue, (, ), ;]
[), ;, if, (, n, !=, null, ), {, double, value, =, n, ., doubleValue, (, ), ;, drawValueLabel, (]
[if, (, n, !=, null, ), {, double, value, =, n, ., doubleValue, (, ), ;, drawValueLabel, (, g2, ,]
[), {, double, value, =, n, ., doubleValue, (, ), ;, drawValueLabel, (, g2, ,, meterArea, ), ;, if, (]
[), {, double, value, =, n, ., doubleValue, (, ), ;, drawValueLabel, (, g2, ,, meterArea, ), ;, if, (]
[), {, double, value, =, n, ., doubleValue, (, ), ;, drawValueLabel, (, g2, ,, meterArea, ), ;, if, (]
[., doubleValue, (, ), ;, drawValueLabel, (, g2, ,, meterArea, ), ;, if, (, this, ., range, ., contains, (]
[;, drawValueLabel, (, g2, ,, meterArea, ), ;, if, (, this, ., range, ., contains, (, value, ), ), {]
[;, drawValueLabel, (, g2, ,, meterArea, ), ;, if, (, this, ., range, ., contains, (, value, ), ), {]
[,, meterArea, ), ;, if, (, this, ., range, ., contains, (, value, ), ), {, g2, ., setPaint, (]
[,, meterArea, ), ;, if, (, this, ., range, ., contains, (, value, ), ), {, g2, ., setPaint, (]
[(, this, ., range, ., contains, (, value, ), ), {, g2, ., setPaint, (, this, ., needlePaint, ), ;]
[(, this, ., range, ., contains, (, value, ), ), {, g2, ., setPaint, (, this, ., needlePaint, ), ;]
[., contains, (, value, ), ), {, g2, ., setPaint, (, this, ., needlePaint, ), ;, g2, ., setStroke, (]
[value, ), ), {, g2, ., setPaint, (, this, ., needlePaint, ), ;, g2, ., setStroke, (, new, BasicStroke, (]
[(, this, ., needlePaint, ), ;, g2, ., setStroke, (, new, BasicStroke, (, 2.0f, ), ), ;, double, radius, =]
[(, this, ., needlePaint, ), ;, g2, ., setStroke, (, new, BasicStroke, (, 2.0f, ), ), ;, double, radius, =]
[(, this, ., needlePaint, ), ;, g2, ., setStroke, (, new, BasicStroke, (, 2.0f, ), ), ;, double, radius, =]
[this, ., needlePaint, ), ;, g2, ., setStroke, (, new, BasicStroke, (, 2.0f, ), ), ;, double, radius, =, (]
[this, ., needlePaint, ), ;, g2, ., setStroke, (, new, BasicStroke, (, 2.0f, ), ), ;, double, radius, =, (]
[this, ., needlePaint, ), ;, g2, ., setStroke, (, new, BasicStroke, (, 2.0f, ), ), ;, double, radius, =, (]
[., setStroke, (, new, BasicStroke, (, 2.0f, ), ), ;, double, radius, =, (, meterArea, ., getWidth, (, ), /]
[new, BasicStroke, (, 2.0f, ), ), ;, double, radius, =, (, meterArea, ., getWidth, (, ), /, 2, ), +]
[(, 2.0f, ), ), ;, double, radius, =, (, meterArea, ., getWidth, (, ), /, 2, ), +, DEFAULT_BORDER_SIZE, +]
[double, radius, =, (, meterArea, ., getWidth, (, ), /, 2, ), +, DEFAULT_BORDER_SIZE, +, 15, ;, double, valueAngle, =]
[=, (, meterArea, ., getWidth, (, ), /, 2, ), +, DEFAULT_BORDER_SIZE, +, 15, ;, double, valueAngle, =, valueToAngle, (]
[), /, 2, ), +, DEFAULT_BORDER_SIZE, +, 15, ;, double, valueAngle, =, valueToAngle, (, value, ), ;, double, valueP1, =]
[), /, 2, ), +, DEFAULT_BORDER_SIZE, +, 15, ;, double, valueAngle, =, valueToAngle, (, value, ), ;, double, valueP1, =]
[2, ), +, DEFAULT_BORDER_SIZE, +, 15, ;, double, valueAngle, =, valueToAngle, (, value, ), ;, double, valueP1, =, meterMiddleX, +]
[), +, DEFAULT_BORDER_SIZE, +, 15, ;, double, valueAngle, =, valueToAngle, (, value, ), ;, double, valueP1, =, meterMiddleX, +, (]
[), +, DEFAULT_BORDER_SIZE, +, 15, ;, double, valueAngle, =, valueToAngle, (, value, ), ;, double, valueP1, =, meterMiddleX, +, (]
[DEFAULT_BORDER_SIZE, +, 15, ;, double, valueAngle, =, valueToAngle, (, value, ), ;, double, valueP1, =, meterMiddleX, +, (, radius, *]
[DEFAULT_BORDER_SIZE, +, 15, ;, double, valueAngle, =, valueToAngle, (, value, ), ;, double, valueP1, =, meterMiddleX, +, (, radius, *]
[double, valueAngle, =, valueToAngle, (, value, ), ;, double, valueP1, =, meterMiddleX, +, (, radius, *, Math, ., cos, (]
[double, valueAngle, =, valueToAngle, (, value, ), ;, double, valueP1, =, meterMiddleX, +, (, radius, *, Math, ., cos, (]
[double, valueAngle, =, valueToAngle, (, value, ), ;, double, valueP1, =, meterMiddleX, +, (, radius, *, Math, ., cos, (]
[(, value, ), ;, double, valueP1, =, meterMiddleX, +, (, radius, *, Math, ., cos, (, Math, ., PI, *]
[value, ), ;, double, valueP1, =, meterMiddleX, +, (, radius, *, Math, ., cos, (, Math, ., PI, *, (]
[value, ), ;, double, valueP1, =, meterMiddleX, +, (, radius, *, Math, ., cos, (, Math, ., PI, *, (]
[;, double, valueP1, =, meterMiddleX, +, (, radius, *, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /]
[*, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, double, valueP2, =]
[*, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, double, valueP2, =]
[., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, double, valueP2, =, meterMiddleY, -]
[cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, double, valueP2, =, meterMiddleY, -, (]
[cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, double, valueP2, =, meterMiddleY, -, (]
[Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, double, valueP2, =, meterMiddleY, -, (, radius, *]
[Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, double, valueP2, =, meterMiddleY, -, (, radius, *]
[(, valueAngle, /, 180, ), ), ), ;, double, valueP2, =, meterMiddleY, -, (, radius, *, Math, ., sin, (]
[(, valueAngle, /, 180, ), ), ), ;, double, valueP2, =, meterMiddleY, -, (, radius, *, Math, ., sin, (]
[(, valueAngle, /, 180, ), ), ), ;, double, valueP2, =, meterMiddleY, -, (, radius, *, Math, ., sin, (]
[), ), ), ;, double, valueP2, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *]
[), ), ;, double, valueP2, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *, (]
[), ), ;, double, valueP2, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *, (]
[;, double, valueP2, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /]
[*, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, Polygon, arrow, =]
[PI, *, (, valueAngle, /, 180, ), ), ), ;, Polygon, arrow, =, new, Polygon, (, ), ;, if, (]
[PI, *, (, valueAngle, /, 180, ), ), ), ;, Polygon, arrow, =, new, Polygon, (, ), ;, if, (]
[*, (, valueAngle, /, 180, ), ), ), ;, Polygon, arrow, =, new, Polygon, (, ), ;, if, (, (]
[*, (, valueAngle, /, 180, ), ), ), ;, Polygon, arrow, =, new, Polygon, (, ), ;, if, (, (]
[*, (, valueAngle, /, 180, ), ), ), ;, Polygon, arrow, =, new, Polygon, (, ), ;, if, (, (]
[valueAngle, /, 180, ), ), ), ;, Polygon, arrow, =, new, Polygon, (, ), ;, if, (, (, valueAngle, >]
[180, ), ), ), ;, Polygon, arrow, =, new, Polygon, (, ), ;, if, (, (, valueAngle, >, 135, &&]
[180, ), ), ), ;, Polygon, arrow, =, new, Polygon, (, ), ;, if, (, (, valueAngle, >, 135, &&]
[), ), ;, Polygon, arrow, =, new, Polygon, (, ), ;, if, (, (, valueAngle, >, 135, &&, valueAngle, <]
[Polygon, arrow, =, new, Polygon, (, ), ;, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, ), ||]
[arrow, =, new, Polygon, (, ), ;, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, ), ||, (]
[arrow, =, new, Polygon, (, ), ;, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, ), ||, (]
[arrow, =, new, Polygon, (, ), ;, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, ), ||, (]
[new, Polygon, (, ), ;, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, ), ||, (, valueAngle, <]
[(, ), ;, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, ), ||, (, valueAngle, <, 45, &&]
[(, ), ;, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, ), ||, (, valueAngle, <, 45, &&]
[;, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, ), ||, (, valueAngle, <, 45, &&, valueAngle, >]
[if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, ), ||, (, valueAngle, <, 45, &&, valueAngle, >, -]
[valueAngle, <, 225, ), ||, (, valueAngle, <, 45, &&, valueAngle, >, -, 45, ), ), {, double, valueP3, =]
[<, 225, ), ||, (, valueAngle, <, 45, &&, valueAngle, >, -, 45, ), ), {, double, valueP3, =, (]
[<, 225, ), ||, (, valueAngle, <, 45, &&, valueAngle, >, -, 45, ), ), {, double, valueP3, =, (]
[), ||, (, valueAngle, <, 45, &&, valueAngle, >, -, 45, ), ), {, double, valueP3, =, (, meterMiddleY, -]
[), ||, (, valueAngle, <, 45, &&, valueAngle, >, -, 45, ), ), {, double, valueP3, =, (, meterMiddleY, -]
[(, valueAngle, <, 45, &&, valueAngle, >, -, 45, ), ), {, double, valueP3, =, (, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /]
[>, -, 45, ), ), {, double, valueP3, =, (, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, double, valueP4, =]
[-, 45, ), ), {, double, valueP3, =, (, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, double, valueP4, =, (]
[-, 45, ), ), {, double, valueP3, =, (, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, double, valueP4, =, (]
[), ), {, double, valueP3, =, (, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, double, valueP4, =, (, meterMiddleY, +]
[), ), {, double, valueP3, =, (, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, double, valueP4, =, (, meterMiddleY, +]
[{, double, valueP3, =, (, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, double, valueP4, =, (, meterMiddleY, +, DEFAULT_CIRCLE_SIZE, /]
[=, (, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, double, valueP4, =, (, meterMiddleY, +, DEFAULT_CIRCLE_SIZE, /, 4, ), ;]
[=, (, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, double, valueP4, =, (, meterMiddleY, +, DEFAULT_CIRCLE_SIZE, /, 4, ), ;]
[DEFAULT_CIRCLE_SIZE, /, 4, ), ;, double, valueP4, =, (, meterMiddleY, +, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, arrow, ., addPoint, (]
[), ;, double, valueP4, =, (, meterMiddleY, +, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, arrow, ., addPoint, (, (, int, )]
[double, valueP4, =, (, meterMiddleY, +, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, arrow, ., addPoint, (, (, int, ), meterMiddleX, ,]
[(, meterMiddleY, +, DEFAULT_CIRCLE_SIZE, /, 4, ), ;, arrow, ., addPoint, (, (, int, ), meterMiddleX, ,, (, int, )]
[DEFAULT_CIRCLE_SIZE, /, 4, ), ;, arrow, ., addPoint, (, (, int, ), meterMiddleX, ,, (, int, ), valueP3, ), ;]
[DEFAULT_CIRCLE_SIZE, /, 4, ), ;, arrow, ., addPoint, (, (, int, ), meterMiddleX, ,, (, int, ), valueP3, ), ;]
[;, arrow, ., addPoint, (, (, int, ), meterMiddleX, ,, (, int, ), valueP3, ), ;, arrow, ., addPoint, (]
[addPoint, (, (, int, ), meterMiddleX, ,, (, int, ), valueP3, ), ;, arrow, ., addPoint, (, (, int, )]
[(, int, ), meterMiddleX, ,, (, int, ), valueP3, ), ;, arrow, ., addPoint, (, (, int, ), meterMiddleX, ,]
[meterMiddleX, ,, (, int, ), valueP3, ), ;, arrow, ., addPoint, (, (, int, ), meterMiddleX, ,, (, int, )]
[), ;, arrow, ., addPoint, (, (, int, ), meterMiddleX, ,, (, int, ), valueP4, ), ;, }, else, {]
[), ;, arrow, ., addPoint, (, (, int, ), meterMiddleX, ,, (, int, ), valueP4, ), ;, }, else, {]
[addPoint, (, (, int, ), meterMiddleX, ,, (, int, ), valueP4, ), ;, }, else, {, arrow, ., addPoint, (]
[int, ), meterMiddleX, ,, (, int, ), valueP4, ), ;, }, else, {, arrow, ., addPoint, (, (, int, )]
[), meterMiddleX, ,, (, int, ), valueP4, ), ;, }, else, {, arrow, ., addPoint, (, (, int, ), (]
[), meterMiddleX, ,, (, int, ), valueP4, ), ;, }, else, {, arrow, ., addPoint, (, (, int, ), (]
[,, (, int, ), valueP4, ), ;, }, else, {, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, -]
[,, (, int, ), valueP4, ), ;, }, else, {, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, -]
[int, ), valueP4, ), ;, }, else, {, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /]
[), ;, }, else, {, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ,]
[else, {, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ,, (, int, )]
[., addPoint, (, (, int, ), (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ,, (, int, ), meterMiddleY, ), ;]
[., addPoint, (, (, int, ), (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ,, (, int, ), meterMiddleY, ), ;]
[int, ), (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ,, (, int, ), meterMiddleY, ), ;, arrow, ., addPoint, (]
[meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 4, ), ,, (, int, ), meterMiddleY, ), ;, arrow, ., addPoint, (, (, int, )]
[-, DEFAULT_CIRCLE_SIZE, /, 4, ), ,, (, int, ), meterMiddleY, ), ;, arrow, ., addPoint, (, (, int, ), (]
[-, DEFAULT_CIRCLE_SIZE, /, 4, ), ,, (, int, ), meterMiddleY, ), ;, arrow, ., addPoint, (, (, int, ), (]
[/, 4, ), ,, (, int, ), meterMiddleY, ), ;, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, +]
[/, 4, ), ,, (, int, ), meterMiddleY, ), ;, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, +]
[), ,, (, int, ), meterMiddleY, ), ;, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, +, DEFAULT_CIRCLE_SIZE, /]
[int, ), meterMiddleY, ), ;, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, +, DEFAULT_CIRCLE_SIZE, /, 4, ), ,]
[), ;, arrow, ., addPoint, (, (, int, ), (, meterMiddleX, +, DEFAULT_CIRCLE_SIZE, /, 4, ), ,, (, int, )]
[addPoint, (, (, int, ), (, meterMiddleX, +, DEFAULT_CIRCLE_SIZE, /, 4, ), ,, (, int, ), meterMiddleY, ), ;, }]
[addPoint, (, (, int, ), (, meterMiddleX, +, DEFAULT_CIRCLE_SIZE, /, 4, ), ,, (, int, ), meterMiddleY, ), ;, }]
[), (, meterMiddleX, +, DEFAULT_CIRCLE_SIZE, /, 4, ), ,, (, int, ), meterMiddleY, ), ;, }, arrow, ., addPoint, (]
[+, DEFAULT_CIRCLE_SIZE, /, 4, ), ,, (, int, ), meterMiddleY, ), ;, }, arrow, ., addPoint, (, (, int, )]
[/, 4, ), ,, (, int, ), meterMiddleY, ), ;, }, arrow, ., addPoint, (, (, int, ), valueP1, ,]
[,, (, int, ), meterMiddleY, ), ;, }, arrow, ., addPoint, (, (, int, ), valueP1, ,, (, int, )]
[), meterMiddleY, ), ;, }, arrow, ., addPoint, (, (, int, ), valueP1, ,, (, int, ), valueP2, ), ;]
[), meterMiddleY, ), ;, }, arrow, ., addPoint, (, (, int, ), valueP1, ,, (, int, ), valueP2, ), ;]
[}, arrow, ., addPoint, (, (, int, ), valueP1, ,, (, int, ), valueP2, ), ;, g2, ., fill, (]
[int, ), valueP1, ,, (, int, ), valueP2, ), ;, g2, ., fill, (, arrow, ), ;, Ellipse2D, circle, =]
[int, ), valueP2, ), ;, g2, ., fill, (, arrow, ), ;, Ellipse2D, circle, =, new, Ellipse2D, ., Double, (]
[int, ), valueP2, ), ;, g2, ., fill, (, arrow, ), ;, Ellipse2D, circle, =, new, Ellipse2D, ., Double, (]
[valueP2, ), ;, g2, ., fill, (, arrow, ), ;, Ellipse2D, circle, =, new, Ellipse2D, ., Double, (, meterMiddleX, -]
[valueP2, ), ;, g2, ., fill, (, arrow, ), ;, Ellipse2D, circle, =, new, Ellipse2D, ., Double, (, meterMiddleX, -]
[;, g2, ., fill, (, arrow, ), ;, Ellipse2D, circle, =, new, Ellipse2D, ., Double, (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /]
[., fill, (, arrow, ), ;, Ellipse2D, circle, =, new, Ellipse2D, ., Double, (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 2, ,]
[., fill, (, arrow, ), ;, Ellipse2D, circle, =, new, Ellipse2D, ., Double, (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 2, ,]
[(, arrow, ), ;, Ellipse2D, circle, =, new, Ellipse2D, ., Double, (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 2, ,, meterMiddleY, -]
[(, arrow, ), ;, Ellipse2D, circle, =, new, Ellipse2D, ., Double, (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 2, ,, meterMiddleY, -]
[), ;, Ellipse2D, circle, =, new, Ellipse2D, ., Double, (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 2, ,, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /]
[Ellipse2D, circle, =, new, Ellipse2D, ., Double, (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 2, ,, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 2, ,]
[=, new, Ellipse2D, ., Double, (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 2, ,, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 2, ,, DEFAULT_CIRCLE_SIZE, ,]
[., Double, (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 2, ,, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 2, ,, DEFAULT_CIRCLE_SIZE, ,, DEFAULT_CIRCLE_SIZE, ), ;]
[., Double, (, meterMiddleX, -, DEFAULT_CIRCLE_SIZE, /, 2, ,, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 2, ,, DEFAULT_CIRCLE_SIZE, ,, DEFAULT_CIRCLE_SIZE, ), ;]
[-, DEFAULT_CIRCLE_SIZE, /, 2, ,, meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 2, ,, DEFAULT_CIRCLE_SIZE, ,, DEFAULT_CIRCLE_SIZE, ), ;, g2, ., fill, (]
[meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 2, ,, DEFAULT_CIRCLE_SIZE, ,, DEFAULT_CIRCLE_SIZE, ), ;, g2, ., fill, (, circle, ), ;, }, }]
[meterMiddleY, -, DEFAULT_CIRCLE_SIZE, /, 2, ,, DEFAULT_CIRCLE_SIZE, ,, DEFAULT_CIRCLE_SIZE, ), ;, g2, ., fill, (, circle, ), ;, }, }]
[2, ,, DEFAULT_CIRCLE_SIZE, ,, DEFAULT_CIRCLE_SIZE, ), ;, g2, ., fill, (, circle, ), ;, }, }, g2, ., setClip, (]
[,, DEFAULT_CIRCLE_SIZE, ), ;, g2, ., fill, (, circle, ), ;, }, }, g2, ., setClip, (, savedClip, ), ;]
[,, DEFAULT_CIRCLE_SIZE, ), ;, g2, ., fill, (, circle, ), ;, }, }, g2, ., setClip, (, savedClip, ), ;]
[g2, ., fill, (, circle, ), ;, }, }, g2, ., setClip, (, savedClip, ), ;, g2, ., setComposite, (]
[;, }, }, g2, ., setClip, (, savedClip, ), ;, g2, ., setComposite, (, originalComposite, ), ;, }, if, (]
[;, }, }, g2, ., setClip, (, savedClip, ), ;, g2, ., setComposite, (, originalComposite, ), ;, }, if, (]
[setClip, (, savedClip, ), ;, g2, ., setComposite, (, originalComposite, ), ;, }, if, (, this, ., drawBorder, ), {]
[savedClip, ), ;, g2, ., setComposite, (, originalComposite, ), ;, }, if, (, this, ., drawBorder, ), {, drawOutline, (]
[;, g2, ., setComposite, (, originalComposite, ), ;, }, if, (, this, ., drawBorder, ), {, drawOutline, (, g2, ,]
[;, }, }, protected, void, drawArcForInterval, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, MeterInterval, interval, ), {, double, minValue, =]
[;, }, }, protected, void, drawArcForInterval, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, MeterInterval, interval, ), {, double, minValue, =]
[;, }, }, protected, void, drawArcForInterval, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, MeterInterval, interval, ), {, double, minValue, =]
[MeterInterval, interval, ), {, double, minValue, =, interval, ., getRange, (, ), ., getLowerBound, (, ), ;, double, maxValue, =]
[MeterInterval, interval, ), {, double, minValue, =, interval, ., getRange, (, ), ., getLowerBound, (, ), ;, double, maxValue, =]
[MeterInterval, interval, ), {, double, minValue, =, interval, ., getRange, (, ), ., getLowerBound, (, ), ;, double, maxValue, =]
[getLowerBound, (, ), ;, double, maxValue, =, interval, ., getRange, (, ), ., getUpperBound, (, ), ;, Paint, outlinePaint, =]
[getLowerBound, (, ), ;, double, maxValue, =, interval, ., getRange, (, ), ., getUpperBound, (, ), ;, Paint, outlinePaint, =]
[getRange, (, ), ., getUpperBound, (, ), ;, Paint, outlinePaint, =, interval, ., getOutlinePaint, (, ), ;, Stroke, outlineStroke, =]
[getRange, (, ), ., getUpperBound, (, ), ;, Paint, outlinePaint, =, interval, ., getOutlinePaint, (, ), ;, Stroke, outlineStroke, =]
[outlinePaint, =, interval, ., getOutlinePaint, (, ), ;, Stroke, outlineStroke, =, interval, ., getOutlineStroke, (, ), ;, Paint, backgroundPaint, =]
[outlinePaint, =, interval, ., getOutlinePaint, (, ), ;, Stroke, outlineStroke, =, interval, ., getOutlineStroke, (, ), ;, Paint, backgroundPaint, =]
[Stroke, outlineStroke, =, interval, ., getOutlineStroke, (, ), ;, Paint, backgroundPaint, =, interval, ., getBackgroundPaint, (, ), ;, if, (]
[Stroke, outlineStroke, =, interval, ., getOutlineStroke, (, ), ;, Paint, backgroundPaint, =, interval, ., getBackgroundPaint, (, ), ;, if, (]
[=, interval, ., getOutlineStroke, (, ), ;, Paint, backgroundPaint, =, interval, ., getBackgroundPaint, (, ), ;, if, (, backgroundPaint, !=]
[getOutlineStroke, (, ), ;, Paint, backgroundPaint, =, interval, ., getBackgroundPaint, (, ), ;, if, (, backgroundPaint, !=, null, ), {]
[), ;, Paint, backgroundPaint, =, interval, ., getBackgroundPaint, (, ), ;, if, (, backgroundPaint, !=, null, ), {, fillArc, (]
[Paint, backgroundPaint, =, interval, ., getBackgroundPaint, (, ), ;, if, (, backgroundPaint, !=, null, ), {, fillArc, (, g2, ,]
[=, interval, ., getBackgroundPaint, (, ), ;, if, (, backgroundPaint, !=, null, ), {, fillArc, (, g2, ,, meterArea, ,]
[., getBackgroundPaint, (, ), ;, if, (, backgroundPaint, !=, null, ), {, fillArc, (, g2, ,, meterArea, ,, minValue, ,]
[(, ), ;, if, (, backgroundPaint, !=, null, ), {, fillArc, (, g2, ,, meterArea, ,, minValue, ,, maxValue, ,]
[;, if, (, backgroundPaint, !=, null, ), {, fillArc, (, g2, ,, meterArea, ,, minValue, ,, maxValue, ,, backgroundPaint, ,]
[), {, fillArc, (, g2, ,, meterArea, ,, minValue, ,, maxValue, ,, backgroundPaint, ,, false, ), ;, }, if, (]
[), {, fillArc, (, g2, ,, meterArea, ,, minValue, ,, maxValue, ,, backgroundPaint, ,, false, ), ;, }, if, (]
[fillArc, (, g2, ,, meterArea, ,, minValue, ,, maxValue, ,, backgroundPaint, ,, false, ), ;, }, if, (, outlinePaint, !=]
[,, minValue, ,, maxValue, ,, backgroundPaint, ,, false, ), ;, }, if, (, outlinePaint, !=, null, ), {, if, (]
[,, minValue, ,, maxValue, ,, backgroundPaint, ,, false, ), ;, }, if, (, outlinePaint, !=, null, ), {, if, (]
[,, maxValue, ,, backgroundPaint, ,, false, ), ;, }, if, (, outlinePaint, !=, null, ), {, if, (, outlineStroke, !=]
[backgroundPaint, ,, false, ), ;, }, if, (, outlinePaint, !=, null, ), {, if, (, outlineStroke, !=, null, ), {]
[false, ), ;, }, if, (, outlinePaint, !=, null, ), {, if, (, outlineStroke, !=, null, ), {, drawArc, (]
[;, }, if, (, outlinePaint, !=, null, ), {, if, (, outlineStroke, !=, null, ), {, drawArc, (, g2, ,]
[if, (, outlinePaint, !=, null, ), {, if, (, outlineStroke, !=, null, ), {, drawArc, (, g2, ,, meterArea, ,]
[outlinePaint, !=, null, ), {, if, (, outlineStroke, !=, null, ), {, drawArc, (, g2, ,, meterArea, ,, minValue, ,]
[null, ), {, if, (, outlineStroke, !=, null, ), {, drawArc, (, g2, ,, meterArea, ,, minValue, ,, maxValue, ,]
[{, if, (, outlineStroke, !=, null, ), {, drawArc, (, g2, ,, meterArea, ,, minValue, ,, maxValue, ,, outlinePaint, ,]
[!=, null, ), {, drawArc, (, g2, ,, meterArea, ,, minValue, ,, maxValue, ,, outlinePaint, ,, outlineStroke, ), ;, }]
[), {, drawArc, (, g2, ,, meterArea, ,, minValue, ,, maxValue, ,, outlinePaint, ,, outlineStroke, ), ;, }, drawTick, (]
[drawArc, (, g2, ,, meterArea, ,, minValue, ,, maxValue, ,, outlinePaint, ,, outlineStroke, ), ;, }, drawTick, (, g2, ,]
[g2, ,, meterArea, ,, minValue, ,, maxValue, ,, outlinePaint, ,, outlineStroke, ), ;, }, drawTick, (, g2, ,, meterArea, ,]
[meterArea, ,, minValue, ,, maxValue, ,, outlinePaint, ,, outlineStroke, ), ;, }, drawTick, (, g2, ,, meterArea, ,, minValue, ,]
[,, maxValue, ,, outlinePaint, ,, outlineStroke, ), ;, }, drawTick, (, g2, ,, meterArea, ,, minValue, ,, true, ), ;]
[,, outlinePaint, ,, outlineStroke, ), ;, }, drawTick, (, g2, ,, meterArea, ,, minValue, ,, true, ), ;, drawTick, (]
[,, outlineStroke, ), ;, }, drawTick, (, g2, ,, meterArea, ,, minValue, ,, true, ), ;, drawTick, (, g2, ,]
[), ;, }, drawTick, (, g2, ,, meterArea, ,, minValue, ,, true, ), ;, drawTick, (, g2, ,, meterArea, ,]
[}, drawTick, (, g2, ,, meterArea, ,, minValue, ,, true, ), ;, drawTick, (, g2, ,, meterArea, ,, maxValue, ,]
[,, Rectangle2D, area, ,, double, minValue, ,, double, maxValue, ,, Paint, paint, ,, Stroke, stroke, ), {, double, startAngle, =]
[area, ,, double, minValue, ,, double, maxValue, ,, Paint, paint, ,, Stroke, stroke, ), {, double, startAngle, =, valueToAngle, (]
[maxValue, ,, Paint, paint, ,, Stroke, stroke, ), {, double, startAngle, =, valueToAngle, (, maxValue, ), ;, double, endAngle, =]
[Paint, paint, ,, Stroke, stroke, ), {, double, startAngle, =, valueToAngle, (, maxValue, ), ;, double, endAngle, =, valueToAngle, (]
[{, double, startAngle, =, valueToAngle, (, maxValue, ), ;, double, endAngle, =, valueToAngle, (, minValue, ), ;, double, extent, =]
[{, double, startAngle, =, valueToAngle, (, maxValue, ), ;, double, endAngle, =, valueToAngle, (, minValue, ), ;, double, extent, =]
[startAngle, =, valueToAngle, (, maxValue, ), ;, double, endAngle, =, valueToAngle, (, minValue, ), ;, double, extent, =, endAngle, -]
[), ;, double, endAngle, =, valueToAngle, (, minValue, ), ;, double, extent, =, endAngle, -, startAngle, ;, double, x, =]
[), ;, double, endAngle, =, valueToAngle, (, minValue, ), ;, double, extent, =, endAngle, -, startAngle, ;, double, x, =]
[;, double, extent, =, endAngle, -, startAngle, ;, double, x, =, area, ., getX, (, ), ;, double, y, =]
[;, double, extent, =, endAngle, -, startAngle, ;, double, x, =, area, ., getX, (, ), ;, double, y, =]
[x, =, area, ., getX, (, ), ;, double, y, =, area, ., getY, (, ), ;, double, w, =]
[x, =, area, ., getX, (, ), ;, double, y, =, area, ., getY, (, ), ;, double, w, =]
[y, =, area, ., getY, (, ), ;, double, w, =, area, ., getWidth, (, ), ;, double, h, =]
[y, =, area, ., getY, (, ), ;, double, w, =, area, ., getWidth, (, ), ;, double, h, =]
[), ;, double, w, =, area, ., getWidth, (, ), ;, double, h, =, area, ., getHeight, (, ), ;]
[), ;, double, w, =, area, ., getWidth, (, ), ;, double, h, =, area, ., getHeight, (, ), ;]
[=, area, ., getWidth, (, ), ;, double, h, =, area, ., getHeight, (, ), ;, g2, ., setPaint, (]
[getWidth, (, ), ;, double, h, =, area, ., getHeight, (, ), ;, g2, ., setPaint, (, paint, ), ;]
[getWidth, (, ), ;, double, h, =, area, ., getHeight, (, ), ;, g2, ., setPaint, (, paint, ), ;]
[double, h, =, area, ., getHeight, (, ), ;, g2, ., setPaint, (, paint, ), ;, g2, ., setStroke, (]
[getHeight, (, ), ;, g2, ., setPaint, (, paint, ), ;, g2, ., setStroke, (, stroke, ), ;, if, (]
[getHeight, (, ), ;, g2, ., setPaint, (, paint, ), ;, g2, ., setStroke, (, stroke, ), ;, if, (]
[getHeight, (, ), ;, g2, ., setPaint, (, paint, ), ;, g2, ., setStroke, (, stroke, ), ;, if, (]
[), ;, g2, ., setPaint, (, paint, ), ;, g2, ., setStroke, (, stroke, ), ;, if, (, paint, !=]
[g2, ., setPaint, (, paint, ), ;, g2, ., setStroke, (, stroke, ), ;, if, (, paint, !=, null, &&]
[g2, ., setPaint, (, paint, ), ;, g2, ., setStroke, (, stroke, ), ;, if, (, paint, !=, null, &&]
[setPaint, (, paint, ), ;, g2, ., setStroke, (, stroke, ), ;, if, (, paint, !=, null, &&, stroke, !=]
[(, stroke, ), ;, if, (, paint, !=, null, &&, stroke, !=, null, ), {, Arc2D, ., Double, arc, =]
[(, paint, !=, null, &&, stroke, !=, null, ), {, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (]
[!=, null, &&, stroke, !=, null, ), {, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (, x, ,]
[&&, stroke, !=, null, ), {, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (, x, ,, y, ,]
[!=, null, ), {, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (, x, ,, y, ,, w, ,]
[), {, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (, x, ,, y, ,, w, ,, h, ,]
[Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (, x, ,, y, ,, w, ,, h, ,, startAngle, ,]
[Double, arc, =, new, Arc2D, ., Double, (, x, ,, y, ,, w, ,, h, ,, startAngle, ,, extent, ,]
[Double, arc, =, new, Arc2D, ., Double, (, x, ,, y, ,, w, ,, h, ,, startAngle, ,, extent, ,]
[., Double, (, x, ,, y, ,, w, ,, h, ,, startAngle, ,, extent, ,, Arc2D, ., OPEN, ), ;]
[., Double, (, x, ,, y, ,, w, ,, h, ,, startAngle, ,, extent, ,, Arc2D, ., OPEN, ), ;]
[,, y, ,, w, ,, h, ,, startAngle, ,, extent, ,, Arc2D, ., OPEN, ), ;, g2, ., setPaint, (]
[w, ,, h, ,, startAngle, ,, extent, ,, Arc2D, ., OPEN, ), ;, g2, ., setPaint, (, paint, ), ;]
[w, ,, h, ,, startAngle, ,, extent, ,, Arc2D, ., OPEN, ), ;, g2, ., setPaint, (, paint, ), ;]
[startAngle, ,, extent, ,, Arc2D, ., OPEN, ), ;, g2, ., setPaint, (, paint, ), ;, g2, ., setStroke, (]
[,, Arc2D, ., OPEN, ), ;, g2, ., setPaint, (, paint, ), ;, g2, ., setStroke, (, stroke, ), ;]
[,, Arc2D, ., OPEN, ), ;, g2, ., setPaint, (, paint, ), ;, g2, ., setStroke, (, stroke, ), ;]
[), ;, g2, ., setPaint, (, paint, ), ;, g2, ., setStroke, (, stroke, ), ;, g2, ., draw, (]
[g2, ,, Rectangle2D, area, ,, double, minValue, ,, double, maxValue, ,, Paint, paint, ,, boolean, dial, ), {, if, (]
[g2, ,, Rectangle2D, area, ,, double, minValue, ,, double, maxValue, ,, Paint, paint, ,, boolean, dial, ), {, if, (]
[Rectangle2D, area, ,, double, minValue, ,, double, maxValue, ,, Paint, paint, ,, boolean, dial, ), {, if, (, paint, ==]
[minValue, ,, double, maxValue, ,, Paint, paint, ,, boolean, dial, ), {, if, (, paint, ==, null, ), {, throw]
[maxValue, ,, Paint, paint, ,, boolean, dial, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument", ), ;, }, double, startAngle, =]
[if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument", ), ;, }, double, startAngle, =, valueToAngle, (]
[{, throw, new, IllegalArgumentException, (, "Null 'paint' argument", ), ;, }, double, startAngle, =, valueToAngle, (, maxValue, ), ;, double, endAngle, =]
[new, IllegalArgumentException, (, "Null 'paint' argument", ), ;, }, double, startAngle, =, valueToAngle, (, maxValue, ), ;, double, endAngle, =, valueToAngle, (]
[}, double, startAngle, =, valueToAngle, (, maxValue, ), ;, double, endAngle, =, valueToAngle, (, minValue, ), ;, double, extent, =]
[}, double, startAngle, =, valueToAngle, (, maxValue, ), ;, double, endAngle, =, valueToAngle, (, minValue, ), ;, double, extent, =]
[startAngle, =, valueToAngle, (, maxValue, ), ;, double, endAngle, =, valueToAngle, (, minValue, ), ;, double, extent, =, endAngle, -]
[), ;, double, endAngle, =, valueToAngle, (, minValue, ), ;, double, extent, =, endAngle, -, startAngle, ;, double, x, =]
[), ;, double, endAngle, =, valueToAngle, (, minValue, ), ;, double, extent, =, endAngle, -, startAngle, ;, double, x, =]
[;, double, extent, =, endAngle, -, startAngle, ;, double, x, =, area, ., getX, (, ), ;, double, y, =]
[;, double, extent, =, endAngle, -, startAngle, ;, double, x, =, area, ., getX, (, ), ;, double, y, =]
[x, =, area, ., getX, (, ), ;, double, y, =, area, ., getY, (, ), ;, double, w, =]
[x, =, area, ., getX, (, ), ;, double, y, =, area, ., getY, (, ), ;, double, w, =]
[y, =, area, ., getY, (, ), ;, double, w, =, area, ., getWidth, (, ), ;, double, h, =]
[y, =, area, ., getY, (, ), ;, double, w, =, area, ., getWidth, (, ), ;, double, h, =]
[w, =, area, ., getWidth, (, ), ;, double, h, =, area, ., getHeight, (, ), ;, int, joinType, =]
[w, =, area, ., getWidth, (, ), ;, double, h, =, area, ., getHeight, (, ), ;, int, joinType, =]
[), ;, double, h, =, area, ., getHeight, (, ), ;, int, joinType, =, Arc2D, ., OPEN, ;, if, (]
[), ;, double, h, =, area, ., getHeight, (, ), ;, int, joinType, =, Arc2D, ., OPEN, ;, if, (]
[), ;, double, h, =, area, ., getHeight, (, ), ;, int, joinType, =, Arc2D, ., OPEN, ;, if, (]
[=, area, ., getHeight, (, ), ;, int, joinType, =, Arc2D, ., OPEN, ;, if, (, this, ., shape, ==]
[=, area, ., getHeight, (, ), ;, int, joinType, =, Arc2D, ., OPEN, ;, if, (, this, ., shape, ==]
[), ;, int, joinType, =, Arc2D, ., OPEN, ;, if, (, this, ., shape, ==, DialShape, ., PIE, ), {]
[int, joinType, =, Arc2D, ., OPEN, ;, if, (, this, ., shape, ==, DialShape, ., PIE, ), {, joinType, =]
[int, joinType, =, Arc2D, ., OPEN, ;, if, (, this, ., shape, ==, DialShape, ., PIE, ), {, joinType, =]
[(, this, ., shape, ==, DialShape, ., PIE, ), {, joinType, =, Arc2D, ., PIE, ;, }, else, if, (]
[(, this, ., shape, ==, DialShape, ., PIE, ), {, joinType, =, Arc2D, ., PIE, ;, }, else, if, (]
[(, this, ., shape, ==, DialShape, ., PIE, ), {, joinType, =, Arc2D, ., PIE, ;, }, else, if, (]
[==, DialShape, ., PIE, ), {, joinType, =, Arc2D, ., PIE, ;, }, else, if, (, this, ., shape, ==]
[==, DialShape, ., PIE, ), {, joinType, =, Arc2D, ., PIE, ;, }, else, if, (, this, ., shape, ==]
[=, Arc2D, ., PIE, ;, }, else, if, (, this, ., shape, ==, DialShape, ., CHORD, ), {, if, (]
[=, Arc2D, ., PIE, ;, }, else, if, (, this, ., shape, ==, DialShape, ., CHORD, ), {, if, (]
[., PIE, ;, }, else, if, (, this, ., shape, ==, DialShape, ., CHORD, ), {, if, (, dial, &&]
[., PIE, ;, }, else, if, (, this, ., shape, ==, DialShape, ., CHORD, ), {, if, (, dial, &&]
[., PIE, ;, }, else, if, (, this, ., shape, ==, DialShape, ., CHORD, ), {, if, (, dial, &&]
[else, if, (, this, ., shape, ==, DialShape, ., CHORD, ), {, if, (, dial, &&, this, ., meterAngle, >]
[this, ., shape, ==, DialShape, ., CHORD, ), {, if, (, dial, &&, this, ., meterAngle, >, 180, ), {]
[shape, ==, DialShape, ., CHORD, ), {, if, (, dial, &&, this, ., meterAngle, >, 180, ), {, joinType, =]
[shape, ==, DialShape, ., CHORD, ), {, if, (, dial, &&, this, ., meterAngle, >, 180, ), {, joinType, =]
[if, (, dial, &&, this, ., meterAngle, >, 180, ), {, joinType, =, Arc2D, ., CHORD, ;, }, else, {]
[dial, &&, this, ., meterAngle, >, 180, ), {, joinType, =, Arc2D, ., CHORD, ;, }, else, {, joinType, =]
[dial, &&, this, ., meterAngle, >, 180, ), {, joinType, =, Arc2D, ., CHORD, ;, }, else, {, joinType, =]
[joinType, =, Arc2D, ., CHORD, ;, }, else, {, joinType, =, Arc2D, ., PIE, ;, }, }, else, if, (]
[joinType, =, Arc2D, ., CHORD, ;, }, else, {, joinType, =, Arc2D, ., PIE, ;, }, }, else, if, (]
[joinType, =, Arc2D, ., CHORD, ;, }, else, {, joinType, =, Arc2D, ., PIE, ;, }, }, else, if, (]
[CHORD, ;, }, else, {, joinType, =, Arc2D, ., PIE, ;, }, }, else, if, (, this, ., shape, ==]
[CHORD, ;, }, else, {, joinType, =, Arc2D, ., PIE, ;, }, }, else, if, (, this, ., shape, ==]
[joinType, =, Arc2D, ., PIE, ;, }, }, else, if, (, this, ., shape, ==, DialShape, ., CIRCLE, ), {]
[Arc2D, ., PIE, ;, }, }, else, if, (, this, ., shape, ==, DialShape, ., CIRCLE, ), {, joinType, =]
[Arc2D, ., PIE, ;, }, }, else, if, (, this, ., shape, ==, DialShape, ., CIRCLE, ), {, joinType, =]
[else, if, (, this, ., shape, ==, DialShape, ., CIRCLE, ), {, joinType, =, Arc2D, ., PIE, ;, if, (]
[this, ., shape, ==, DialShape, ., CIRCLE, ), {, joinType, =, Arc2D, ., PIE, ;, if, (, dial, ), {]
[shape, ==, DialShape, ., CIRCLE, ), {, joinType, =, Arc2D, ., PIE, ;, if, (, dial, ), {, extent, =]
[joinType, =, Arc2D, ., PIE, ;, if, (, dial, ), {, extent, =, 360, ;, }, }, else, {, throw]
[., PIE, ;, if, (, dial, ), {, extent, =, 360, ;, }, }, else, {, throw, new, IllegalStateException, (]
[(, dial, ), {, extent, =, 360, ;, }, }, else, {, throw, new, IllegalStateException, (, "DialShape not recognised.", ), ;, }]
[(, dial, ), {, extent, =, 360, ;, }, }, else, {, throw, new, IllegalStateException, (, "DialShape not recognised.", ), ;, }]
[extent, =, 360, ;, }, }, else, {, throw, new, IllegalStateException, (, "DialShape not recognised.", ), ;, }, g2, ., setPaint, (]
[throw, new, IllegalStateException, (, "DialShape not recognised.", ), ;, }, g2, ., setPaint, (, paint, ), ;, Arc2D, ., Double, arc, =]
[), ;, }, g2, ., setPaint, (, paint, ), ;, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (]
[}, g2, ., setPaint, (, paint, ), ;, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (, x, ,]
[., setPaint, (, paint, ), ;, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (, x, ,, y, ,]
[(, paint, ), ;, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (, x, ,, y, ,, w, ,]
[), ;, Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (, x, ,, y, ,, w, ,, h, ,]
[Arc2D, ., Double, arc, =, new, Arc2D, ., Double, (, x, ,, y, ,, w, ,, h, ,, startAngle, ,]
[Double, arc, =, new, Arc2D, ., Double, (, x, ,, y, ,, w, ,, h, ,, startAngle, ,, extent, ,]
[new, Arc2D, ., Double, (, x, ,, y, ,, w, ,, h, ,, startAngle, ,, extent, ,, joinType, ), ;]
[new, Arc2D, ., Double, (, x, ,, y, ,, w, ,, h, ,, startAngle, ,, extent, ,, joinType, ), ;]
[(, x, ,, y, ,, w, ,, h, ,, startAngle, ,, extent, ,, joinType, ), ;, g2, ., fill, (]
[,, joinType, ), ;, g2, ., fill, (, arc, ), ;, }, public, double, valueToAngle, (, double, value, ), {]
[), ;, g2, ., fill, (, arc, ), ;, }, public, double, valueToAngle, (, double, value, ), {, value, =]
[), ;, g2, ., fill, (, arc, ), ;, }, public, double, valueToAngle, (, double, value, ), {, value, =]
[g2, ., fill, (, arc, ), ;, }, public, double, valueToAngle, (, double, value, ), {, value, =, value, -]
[g2, ., fill, (, arc, ), ;, }, public, double, valueToAngle, (, double, value, ), {, value, =, value, -]
[g2, ., fill, (, arc, ), ;, }, public, double, valueToAngle, (, double, value, ), {, value, =, value, -]
[(, double, value, ), {, value, =, value, -, this, ., range, ., getLowerBound, (, ), ;, double, baseAngle, =]
[(, double, value, ), {, value, =, value, -, this, ., range, ., getLowerBound, (, ), ;, double, baseAngle, =]
[value, ), {, value, =, value, -, this, ., range, ., getLowerBound, (, ), ;, double, baseAngle, =, 180, +]
[), {, value, =, value, -, this, ., range, ., getLowerBound, (, ), ;, double, baseAngle, =, 180, +, (]
[), {, value, =, value, -, this, ., range, ., getLowerBound, (, ), ;, double, baseAngle, =, 180, +, (]
[{, value, =, value, -, this, ., range, ., getLowerBound, (, ), ;, double, baseAngle, =, 180, +, (, (]
[{, value, =, value, -, this, ., range, ., getLowerBound, (, ), ;, double, baseAngle, =, 180, +, (, (]
[{, value, =, value, -, this, ., range, ., getLowerBound, (, ), ;, double, baseAngle, =, 180, +, (, (]
[-, this, ., range, ., getLowerBound, (, ), ;, double, baseAngle, =, 180, +, (, (, this, ., meterAngle, -]
[range, ., getLowerBound, (, ), ;, double, baseAngle, =, 180, +, (, (, this, ., meterAngle, -, 180, ), /]
[), ;, double, baseAngle, =, 180, +, (, (, this, ., meterAngle, -, 180, ), /, 2, ), ;, return]
[), ;, double, baseAngle, =, 180, +, (, (, this, ., meterAngle, -, 180, ), /, 2, ), ;, return]
[double, baseAngle, =, 180, +, (, (, this, ., meterAngle, -, 180, ), /, 2, ), ;, return, baseAngle, -]
[baseAngle, =, 180, +, (, (, this, ., meterAngle, -, 180, ), /, 2, ), ;, return, baseAngle, -, (]
[baseAngle, =, 180, +, (, (, this, ., meterAngle, -, 180, ), /, 2, ), ;, return, baseAngle, -, (]
[=, 180, +, (, (, this, ., meterAngle, -, 180, ), /, 2, ), ;, return, baseAngle, -, (, (]
[=, 180, +, (, (, this, ., meterAngle, -, 180, ), /, 2, ), ;, return, baseAngle, -, (, (]
[+, (, (, this, ., meterAngle, -, 180, ), /, 2, ), ;, return, baseAngle, -, (, (, value, /]
[+, (, (, this, ., meterAngle, -, 180, ), /, 2, ), ;, return, baseAngle, -, (, (, value, /]
[+, (, (, this, ., meterAngle, -, 180, ), /, 2, ), ;, return, baseAngle, -, (, (, value, /]
[/, 2, ), ;, return, baseAngle, -, (, (, value, /, this, ., range, ., getLength, (, ), ), *]
[/, 2, ), ;, return, baseAngle, -, (, (, value, /, this, ., range, ., getLength, (, ), ), *]
[drawTicks, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, minValue, ,, double, maxValue, ), {, for, (, double, v, =]
[Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, minValue, ,, double, maxValue, ), {, for, (, double, v, =, minValue, ;]
[Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, minValue, ,, double, maxValue, ), {, for, (, double, v, =, minValue, ;]
[,, Rectangle2D, meterArea, ,, double, minValue, ,, double, maxValue, ), {, for, (, double, v, =, minValue, ;, v, <=]
[meterArea, ,, double, minValue, ,, double, maxValue, ), {, for, (, double, v, =, minValue, ;, v, <=, maxValue, ;]
[double, minValue, ,, double, maxValue, ), {, for, (, double, v, =, minValue, ;, v, <=, maxValue, ;, v, +=]
[double, minValue, ,, double, maxValue, ), {, for, (, double, v, =, minValue, ;, v, <=, maxValue, ;, v, +=]
[), {, for, (, double, v, =, minValue, ;, v, <=, maxValue, ;, v, +=, this, ., tickSize, ), {]
[for, (, double, v, =, minValue, ;, v, <=, maxValue, ;, v, +=, this, ., tickSize, ), {, drawTick, (]
[double, v, =, minValue, ;, v, <=, maxValue, ;, v, +=, this, ., tickSize, ), {, drawTick, (, g2, ,]
[=, minValue, ;, v, <=, maxValue, ;, v, +=, this, ., tickSize, ), {, drawTick, (, g2, ,, meterArea, ,]
[,, v, ), ;, }, }, protected, void, drawTick, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, value, ), {]
[), ;, }, }, protected, void, drawTick, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, value, ), {, drawTick, (]
[}, }, protected, void, drawTick, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, value, ), {, drawTick, (, g2, ,]
[protected, void, drawTick, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, value, ), {, drawTick, (, g2, ,, meterArea, ,]
[drawTick, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, value, ), {, drawTick, (, g2, ,, meterArea, ,, value, ,]
[protected, void, drawTick, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, value, ,, boolean, label, ), {, double, valueAngle, =]
[drawTick, (, Graphics2D, g2, ,, Rectangle2D, meterArea, ,, double, value, ,, boolean, label, ), {, double, valueAngle, =, valueToAngle, (]
[meterArea, ,, double, value, ,, boolean, label, ), {, double, valueAngle, =, valueToAngle, (, value, ), ;, double, meterMiddleX, =]
[meterArea, ,, double, value, ,, boolean, label, ), {, double, valueAngle, =, valueToAngle, (, value, ), ;, double, meterMiddleX, =]
[double, valueAngle, =, valueToAngle, (, value, ), ;, double, meterMiddleX, =, meterArea, ., getCenterX, (, ), ;, double, meterMiddleY, =]
[double, valueAngle, =, valueToAngle, (, value, ), ;, double, meterMiddleX, =, meterArea, ., getCenterX, (, ), ;, double, meterMiddleY, =]
[), ;, double, meterMiddleX, =, meterArea, ., getCenterX, (, ), ;, double, meterMiddleY, =, meterArea, ., getCenterY, (, ), ;]
[), ;, double, meterMiddleX, =, meterArea, ., getCenterX, (, ), ;, double, meterMiddleY, =, meterArea, ., getCenterY, (, ), ;]
[=, meterArea, ., getCenterX, (, ), ;, double, meterMiddleY, =, meterArea, ., getCenterY, (, ), ;, g2, ., setPaint, (]
[=, meterArea, ., getCenterX, (, ), ;, double, meterMiddleY, =, meterArea, ., getCenterY, (, ), ;, g2, ., setPaint, (]
[), ;, double, meterMiddleY, =, meterArea, ., getCenterY, (, ), ;, g2, ., setPaint, (, this, ., tickPaint, ), ;]
[), ;, double, meterMiddleY, =, meterArea, ., getCenterY, (, ), ;, g2, ., setPaint, (, this, ., tickPaint, ), ;]
[=, meterArea, ., getCenterY, (, ), ;, g2, ., setPaint, (, this, ., tickPaint, ), ;, g2, ., setStroke, (]
[getCenterY, (, ), ;, g2, ., setPaint, (, this, ., tickPaint, ), ;, g2, ., setStroke, (, new, BasicStroke, (]
[(, this, ., tickPaint, ), ;, g2, ., setStroke, (, new, BasicStroke, (, 2.0f, ), ), ;, double, valueP2X, =]
[;, g2, ., setStroke, (, new, BasicStroke, (, 2.0f, ), ), ;, double, valueP2X, =, 0, ;, double, valueP2Y, =]
[new, BasicStroke, (, 2.0f, ), ), ;, double, valueP2X, =, 0, ;, double, valueP2Y, =, 0, ;, double, radius, =]
[new, BasicStroke, (, 2.0f, ), ), ;, double, valueP2X, =, 0, ;, double, valueP2Y, =, 0, ;, double, radius, =]
[BasicStroke, (, 2.0f, ), ), ;, double, valueP2X, =, 0, ;, double, valueP2Y, =, 0, ;, double, radius, =, (]
[BasicStroke, (, 2.0f, ), ), ;, double, valueP2X, =, 0, ;, double, valueP2Y, =, 0, ;, double, radius, =, (]
[BasicStroke, (, 2.0f, ), ), ;, double, valueP2X, =, 0, ;, double, valueP2Y, =, 0, ;, double, radius, =, (]
[double, valueP2X, =, 0, ;, double, valueP2Y, =, 0, ;, double, radius, =, (, meterArea, ., getWidth, (, ), /]
[0, ;, double, valueP2Y, =, 0, ;, double, radius, =, (, meterArea, ., getWidth, (, ), /, 2, ), +]
[0, ;, double, radius, =, (, meterArea, ., getWidth, (, ), /, 2, ), +, DEFAULT_BORDER_SIZE, ;, double, radius1, =]
[0, ;, double, radius, =, (, meterArea, ., getWidth, (, ), /, 2, ), +, DEFAULT_BORDER_SIZE, ;, double, radius1, =]
[double, radius, =, (, meterArea, ., getWidth, (, ), /, 2, ), +, DEFAULT_BORDER_SIZE, ;, double, radius1, =, radius, -]
[., getWidth, (, ), /, 2, ), +, DEFAULT_BORDER_SIZE, ;, double, radius1, =, radius, -, 15, ;, double, valueP1X, =]
[., getWidth, (, ), /, 2, ), +, DEFAULT_BORDER_SIZE, ;, double, radius1, =, radius, -, 15, ;, double, valueP1X, =]
[(, ), /, 2, ), +, DEFAULT_BORDER_SIZE, ;, double, radius1, =, radius, -, 15, ;, double, valueP1X, =, meterMiddleX, +]
[), /, 2, ), +, DEFAULT_BORDER_SIZE, ;, double, radius1, =, radius, -, 15, ;, double, valueP1X, =, meterMiddleX, +, (]
[), /, 2, ), +, DEFAULT_BORDER_SIZE, ;, double, radius1, =, radius, -, 15, ;, double, valueP1X, =, meterMiddleX, +, (]
[2, ), +, DEFAULT_BORDER_SIZE, ;, double, radius1, =, radius, -, 15, ;, double, valueP1X, =, meterMiddleX, +, (, radius, *]
[2, ), +, DEFAULT_BORDER_SIZE, ;, double, radius1, =, radius, -, 15, ;, double, valueP1X, =, meterMiddleX, +, (, radius, *]
[;, double, radius1, =, radius, -, 15, ;, double, valueP1X, =, meterMiddleX, +, (, radius, *, Math, ., cos, (]
[;, double, radius1, =, radius, -, 15, ;, double, valueP1X, =, meterMiddleX, +, (, radius, *, Math, ., cos, (]
[;, double, radius1, =, radius, -, 15, ;, double, valueP1X, =, meterMiddleX, +, (, radius, *, Math, ., cos, (]
[radius, -, 15, ;, double, valueP1X, =, meterMiddleX, +, (, radius, *, Math, ., cos, (, Math, ., PI, *]
[-, 15, ;, double, valueP1X, =, meterMiddleX, +, (, radius, *, Math, ., cos, (, Math, ., PI, *, (]
[-, 15, ;, double, valueP1X, =, meterMiddleX, +, (, radius, *, Math, ., cos, (, Math, ., PI, *, (]
[;, double, valueP1X, =, meterMiddleX, +, (, radius, *, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /]
[*, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, double, valueP1Y, =]
[*, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, double, valueP1Y, =]
[., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, double, valueP1Y, =, meterMiddleY, -]
[cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, double, valueP1Y, =, meterMiddleY, -, (]
[cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, double, valueP1Y, =, meterMiddleY, -, (]
[Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, double, valueP1Y, =, meterMiddleY, -, (, radius, *]
[Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, double, valueP1Y, =, meterMiddleY, -, (, radius, *]
[(, valueAngle, /, 180, ), ), ), ;, double, valueP1Y, =, meterMiddleY, -, (, radius, *, Math, ., sin, (]
[(, valueAngle, /, 180, ), ), ), ;, double, valueP1Y, =, meterMiddleY, -, (, radius, *, Math, ., sin, (]
[(, valueAngle, /, 180, ), ), ), ;, double, valueP1Y, =, meterMiddleY, -, (, radius, *, Math, ., sin, (]
[), ), ), ;, double, valueP1Y, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *]
[), ), ;, double, valueP1Y, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *, (]
[), ), ;, double, valueP1Y, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *, (]
[;, double, valueP1Y, =, meterMiddleY, -, (, radius, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /]
[-, (, radius, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;]
[radius, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, valueP2X, =]
[radius, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, valueP2X, =]
[Math, ., sin, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, valueP2X, =, meterMiddleX, +]
[., sin, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, valueP2X, =, meterMiddleX, +, (]
[., sin, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, valueP2X, =, meterMiddleX, +, (]
[(, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, valueP2X, =, meterMiddleX, +, (, radius1, *]
[(, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, valueP2X, =, meterMiddleX, +, (, radius1, *]
[*, (, valueAngle, /, 180, ), ), ), ;, valueP2X, =, meterMiddleX, +, (, radius1, *, Math, ., cos, (]
[*, (, valueAngle, /, 180, ), ), ), ;, valueP2X, =, meterMiddleX, +, (, radius1, *, Math, ., cos, (]
[*, (, valueAngle, /, 180, ), ), ), ;, valueP2X, =, meterMiddleX, +, (, radius1, *, Math, ., cos, (]
[180, ), ), ), ;, valueP2X, =, meterMiddleX, +, (, radius1, *, Math, ., cos, (, Math, ., PI, *]
[), ), ), ;, valueP2X, =, meterMiddleX, +, (, radius1, *, Math, ., cos, (, Math, ., PI, *, (]
[), ), ), ;, valueP2X, =, meterMiddleX, +, (, radius1, *, Math, ., cos, (, Math, ., PI, *, (]
[), ;, valueP2X, =, meterMiddleX, +, (, radius1, *, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /]
[+, (, radius1, *, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;]
[radius1, *, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, valueP2Y, =]
[radius1, *, Math, ., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, valueP2Y, =]
[Math, ., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, valueP2Y, =, meterMiddleY, -]
[., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, valueP2Y, =, meterMiddleY, -, (]
[., cos, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, valueP2Y, =, meterMiddleY, -, (]
[(, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, valueP2Y, =, meterMiddleY, -, (, radius1, *]
[(, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, valueP2Y, =, meterMiddleY, -, (, radius1, *]
[*, (, valueAngle, /, 180, ), ), ), ;, valueP2Y, =, meterMiddleY, -, (, radius1, *, Math, ., sin, (]
[*, (, valueAngle, /, 180, ), ), ), ;, valueP2Y, =, meterMiddleY, -, (, radius1, *, Math, ., sin, (]
[*, (, valueAngle, /, 180, ), ), ), ;, valueP2Y, =, meterMiddleY, -, (, radius1, *, Math, ., sin, (]
[180, ), ), ), ;, valueP2Y, =, meterMiddleY, -, (, radius1, *, Math, ., sin, (, Math, ., PI, *]
[), ), ), ;, valueP2Y, =, meterMiddleY, -, (, radius1, *, Math, ., sin, (, Math, ., PI, *, (]
[), ), ), ;, valueP2Y, =, meterMiddleY, -, (, radius1, *, Math, ., sin, (, Math, ., PI, *, (]
[), ;, valueP2Y, =, meterMiddleY, -, (, radius1, *, Math, ., sin, (, Math, ., PI, *, (, valueAngle, /]
[., sin, (, Math, ., PI, *, (, valueAngle, /, 180, ), ), ), ;, Line2D, ., Double, line, =]
[PI, *, (, valueAngle, /, 180, ), ), ), ;, Line2D, ., Double, line, =, new, Line2D, ., Double, (]
[(, valueAngle, /, 180, ), ), ), ;, Line2D, ., Double, line, =, new, Line2D, ., Double, (, valueP1X, ,]
[/, 180, ), ), ), ;, Line2D, ., Double, line, =, new, Line2D, ., Double, (, valueP1X, ,, valueP1Y, ,]
[), ), ), ;, Line2D, ., Double, line, =, new, Line2D, ., Double, (, valueP1X, ,, valueP1Y, ,, valueP2X, ,]
[;, Line2D, ., Double, line, =, new, Line2D, ., Double, (, valueP1X, ,, valueP1Y, ,, valueP2X, ,, valueP2Y, ), ;]
[;, Line2D, ., Double, line, =, new, Line2D, ., Double, (, valueP1X, ,, valueP1Y, ,, valueP2X, ,, valueP2Y, ), ;]
[line, =, new, Line2D, ., Double, (, valueP1X, ,, valueP1Y, ,, valueP2X, ,, valueP2Y, ), ;, g2, ., draw, (]
[Double, (, valueP1X, ,, valueP1Y, ,, valueP2X, ,, valueP2Y, ), ;, g2, ., draw, (, line, ), ;, if, (]
[Double, (, valueP1X, ,, valueP1Y, ,, valueP2X, ,, valueP2Y, ), ;, g2, ., draw, (, line, ), ;, if, (]
[Double, (, valueP1X, ,, valueP1Y, ,, valueP2X, ,, valueP2Y, ), ;, g2, ., draw, (, line, ), ;, if, (]
[valueP1Y, ,, valueP2X, ,, valueP2Y, ), ;, g2, ., draw, (, line, ), ;, if, (, this, ., tickLabelsVisible, &&]
[;, g2, ., draw, (, line, ), ;, if, (, this, ., tickLabelsVisible, &&, label, ), {, String, tickLabel, =]
[;, g2, ., draw, (, line, ), ;, if, (, this, ., tickLabelsVisible, &&, label, ), {, String, tickLabel, =]
[;, g2, ., draw, (, line, ), ;, if, (, this, ., tickLabelsVisible, &&, label, ), {, String, tickLabel, =]
[), ;, if, (, this, ., tickLabelsVisible, &&, label, ), {, String, tickLabel, =, this, ., tickLabelFormat, ., format, (]
[(, this, ., tickLabelsVisible, &&, label, ), {, String, tickLabel, =, this, ., tickLabelFormat, ., format, (, value, ), ;]
[(, this, ., tickLabelsVisible, &&, label, ), {, String, tickLabel, =, this, ., tickLabelFormat, ., format, (, value, ), ;]
[&&, label, ), {, String, tickLabel, =, this, ., tickLabelFormat, ., format, (, value, ), ;, g2, ., setFont, (]
[&&, label, ), {, String, tickLabel, =, this, ., tickLabelFormat, ., format, (, value, ), ;, g2, ., setFont, (]
[tickLabel, =, this, ., tickLabelFormat, ., format, (, value, ), ;, g2, ., setFont, (, this, ., tickLabelFont, ), ;]
[tickLabel, =, this, ., tickLabelFormat, ., format, (, value, ), ;, g2, ., setFont, (, this, ., tickLabelFont, ), ;]
[tickLabelFormat, ., format, (, value, ), ;, g2, ., setFont, (, this, ., tickLabelFont, ), ;, g2, ., setPaint, (]
[tickLabelFormat, ., format, (, value, ), ;, g2, ., setFont, (, this, ., tickLabelFont, ), ;, g2, ., setPaint, (]
[., setFont, (, this, ., tickLabelFont, ), ;, g2, ., setPaint, (, this, ., tickLabelPaint, ), ;, FontMetrics, fm, =]
[., setFont, (, this, ., tickLabelFont, ), ;, g2, ., setPaint, (, this, ., tickLabelPaint, ), ;, FontMetrics, fm, =]
[., setPaint, (, this, ., tickLabelPaint, ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, ), ;, Rectangle2D, tickLabelBounds, =]
[., setPaint, (, this, ., tickLabelPaint, ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, ), ;, Rectangle2D, tickLabelBounds, =]
[., tickLabelPaint, ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, ), ;, Rectangle2D, tickLabelBounds, =, TextUtilities, ., getTextBounds, (]
[), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, ), ;, Rectangle2D, tickLabelBounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,]
[FontMetrics, fm, =, g2, ., getFontMetrics, (, ), ;, Rectangle2D, tickLabelBounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,, g2, ,]
[(, ), ;, Rectangle2D, tickLabelBounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,, g2, ,, fm, ), ;, double, x, =]
[=, TextUtilities, ., getTextBounds, (, tickLabel, ,, g2, ,, fm, ), ;, double, x, =, valueP2X, ;, double, y, =]
[(, tickLabel, ,, g2, ,, fm, ), ;, double, x, =, valueP2X, ;, double, y, =, valueP2Y, ;, if, (]
[(, tickLabel, ,, g2, ,, fm, ), ;, double, x, =, valueP2X, ;, double, y, =, valueP2Y, ;, if, (]
[(, tickLabel, ,, g2, ,, fm, ), ;, double, x, =, valueP2X, ;, double, y, =, valueP2Y, ;, if, (]
[,, g2, ,, fm, ), ;, double, x, =, valueP2X, ;, double, y, =, valueP2Y, ;, if, (, valueAngle, ==]
[,, fm, ), ;, double, x, =, valueP2X, ;, double, y, =, valueP2Y, ;, if, (, valueAngle, ==, 90, ||]
[,, fm, ), ;, double, x, =, valueP2X, ;, double, y, =, valueP2Y, ;, if, (, valueAngle, ==, 90, ||]
[), ;, double, x, =, valueP2X, ;, double, y, =, valueP2Y, ;, if, (, valueAngle, ==, 90, ||, valueAngle, ==]
[x, =, valueP2X, ;, double, y, =, valueP2Y, ;, if, (, valueAngle, ==, 90, ||, valueAngle, ==, 270, ), {]
[valueP2X, ;, double, y, =, valueP2Y, ;, if, (, valueAngle, ==, 90, ||, valueAngle, ==, 270, ), {, x, =]
[valueP2X, ;, double, y, =, valueP2Y, ;, if, (, valueAngle, ==, 90, ||, valueAngle, ==, 270, ), {, x, =]
[double, y, =, valueP2Y, ;, if, (, valueAngle, ==, 90, ||, valueAngle, ==, 270, ), {, x, =, x, -]
[double, y, =, valueP2Y, ;, if, (, valueAngle, ==, 90, ||, valueAngle, ==, 270, ), {, x, =, x, -]
[double, y, =, valueP2Y, ;, if, (, valueAngle, ==, 90, ||, valueAngle, ==, 270, ), {, x, =, x, -]
[(, valueAngle, ==, 90, ||, valueAngle, ==, 270, ), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), /]
[==, 270, ), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), /, 2, ;, }, else, if, (]
[==, 270, ), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), /, 2, ;, }, else, if, (]
[==, 270, ), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), /, 2, ;, }, else, if, (]
[), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), /, 2, ;, }, else, if, (, valueAngle, <]
[x, =, x, -, tickLabelBounds, ., getWidth, (, ), /, 2, ;, }, else, if, (, valueAngle, <, 90, ||]
[x, =, x, -, tickLabelBounds, ., getWidth, (, ), /, 2, ;, }, else, if, (, valueAngle, <, 90, ||]
[x, -, tickLabelBounds, ., getWidth, (, ), /, 2, ;, }, else, if, (, valueAngle, <, 90, ||, valueAngle, >]
[., getWidth, (, ), /, 2, ;, }, else, if, (, valueAngle, <, 90, ||, valueAngle, >, 270, ), {]
[(, ), /, 2, ;, }, else, if, (, valueAngle, <, 90, ||, valueAngle, >, 270, ), {, x, =]
[(, ), /, 2, ;, }, else, if, (, valueAngle, <, 90, ||, valueAngle, >, 270, ), {, x, =]
[/, 2, ;, }, else, if, (, valueAngle, <, 90, ||, valueAngle, >, 270, ), {, x, =, x, -]
[/, 2, ;, }, else, if, (, valueAngle, <, 90, ||, valueAngle, >, 270, ), {, x, =, x, -]
[90, ||, valueAngle, >, 270, ), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), ;, }, if, (]
[90, ||, valueAngle, >, 270, ), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), ;, }, if, (]
[90, ||, valueAngle, >, 270, ), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), ;, }, if, (]
[||, valueAngle, >, 270, ), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), ;, }, if, (, (]
[||, valueAngle, >, 270, ), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), ;, }, if, (, (]
[||, valueAngle, >, 270, ), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), ;, }, if, (, (]
[>, 270, ), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), ;, }, if, (, (, valueAngle, >]
[), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), ;, }, if, (, (, valueAngle, >, 135, &&]
[), {, x, =, x, -, tickLabelBounds, ., getWidth, (, ), ;, }, if, (, (, valueAngle, >, 135, &&]
[x, =, x, -, tickLabelBounds, ., getWidth, (, ), ;, }, if, (, (, valueAngle, >, 135, &&, valueAngle, <]
[-, tickLabelBounds, ., getWidth, (, ), ;, }, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, ), ||]
[-, tickLabelBounds, ., getWidth, (, ), ;, }, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, ), ||]
[., getWidth, (, ), ;, }, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, ), ||, valueAngle, >]
[(, ), ;, }, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, ), ||, valueAngle, >, 315, ||]
[(, ), ;, }, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, ), ||, valueAngle, >, 315, ||]
[;, }, if, (, (, valueAngle, >, 135, &&, valueAngle, <, 225, ), ||, valueAngle, >, 315, ||, valueAngle, <]
[(, (, valueAngle, >, 135, &&, valueAngle, <, 225, ), ||, valueAngle, >, 315, ||, valueAngle, <, 45, ), {]
[valueAngle, >, 135, &&, valueAngle, <, 225, ), ||, valueAngle, >, 315, ||, valueAngle, <, 45, ), {, y, =]
[valueAngle, >, 135, &&, valueAngle, <, 225, ), ||, valueAngle, >, 315, ||, valueAngle, <, 45, ), {, y, =]
[135, &&, valueAngle, <, 225, ), ||, valueAngle, >, 315, ||, valueAngle, <, 45, ), {, y, =, y, -]
[135, &&, valueAngle, <, 225, ), ||, valueAngle, >, 315, ||, valueAngle, <, 45, ), {, y, =, y, -]
[135, &&, valueAngle, <, 225, ), ||, valueAngle, >, 315, ||, valueAngle, <, 45, ), {, y, =, y, -]
[||, valueAngle, >, 315, ||, valueAngle, <, 45, ), {, y, =, y, -, tickLabelBounds, ., getHeight, (, ), /]
[valueAngle, <, 45, ), {, y, =, y, -, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, else, {]
[45, ), {, y, =, y, -, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, else, {, y, =]
[45, ), {, y, =, y, -, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, else, {, y, =]
[{, y, =, y, -, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, else, {, y, =, y, +]
[{, y, =, y, -, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, else, {, y, =, y, +]
[{, y, =, y, -, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, else, {, y, =, y, +]
[., getHeight, (, ), /, 2, ;, }, else, {, y, =, y, +, tickLabelBounds, ., getHeight, (, ), /]
[), /, 2, ;, }, else, {, y, =, y, +, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }]
[), /, 2, ;, }, else, {, y, =, y, +, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }]
[}, else, {, y, =, y, +, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, g2, ., drawString, (]
[{, y, =, y, +, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, g2, ., drawString, (, tickLabel, ,]
[y, +, tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, g2, ., drawString, (, tickLabel, ,, (, float, )]
[tickLabelBounds, ., getHeight, (, ), /, 2, ;, }, g2, ., drawString, (, tickLabel, ,, (, float, ), x, ,]
[(, ), /, 2, ;, }, g2, ., drawString, (, tickLabel, ,, (, float, ), x, ,, (, float, )]
[,, (, float, ), y, ), ;, }, }, protected, void, drawValueLabel, (, Graphics2D, g2, ,, Rectangle2D, area, ), {]
[,, (, float, ), y, ), ;, }, }, protected, void, drawValueLabel, (, Graphics2D, g2, ,, Rectangle2D, area, ), {]
[y, ), ;, }, }, protected, void, drawValueLabel, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, g2, ., setFont, (]
[y, ), ;, }, }, protected, void, drawValueLabel, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, g2, ., setFont, (]
[protected, void, drawValueLabel, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, g2, ., setFont, (, this, ., valueFont, ), ;]
[protected, void, drawValueLabel, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, g2, ., setFont, (, this, ., valueFont, ), ;]
[Graphics2D, g2, ,, Rectangle2D, area, ), {, g2, ., setFont, (, this, ., valueFont, ), ;, g2, ., setPaint, (]
[Graphics2D, g2, ,, Rectangle2D, area, ), {, g2, ., setFont, (, this, ., valueFont, ), ;, g2, ., setPaint, (]
[., setFont, (, this, ., valueFont, ), ;, g2, ., setPaint, (, this, ., valuePaint, ), ;, String, valueStr, =]
[., valueFont, ), ;, g2, ., setPaint, (, this, ., valuePaint, ), ;, String, valueStr, =, "No value", ;, if, (]
[., valueFont, ), ;, g2, ., setPaint, (, this, ., valuePaint, ), ;, String, valueStr, =, "No value", ;, if, (]
[., valueFont, ), ;, g2, ., setPaint, (, this, ., valuePaint, ), ;, String, valueStr, =, "No value", ;, if, (]
[g2, ., setPaint, (, this, ., valuePaint, ), ;, String, valueStr, =, "No value", ;, if, (, this, ., dataset, !=]
[valuePaint, ), ;, String, valueStr, =, "No value", ;, if, (, this, ., dataset, !=, null, ), {, Number, n, =]
[valuePaint, ), ;, String, valueStr, =, "No value", ;, if, (, this, ., dataset, !=, null, ), {, Number, n, =]
[valuePaint, ), ;, String, valueStr, =, "No value", ;, if, (, this, ., dataset, !=, null, ), {, Number, n, =]
[this, ., dataset, !=, null, ), {, Number, n, =, this, ., dataset, ., getValue, (, ), ;, if, (]
[this, ., dataset, !=, null, ), {, Number, n, =, this, ., dataset, ., getValue, (, ), ;, if, (]
[dataset, !=, null, ), {, Number, n, =, this, ., dataset, ., getValue, (, ), ;, if, (, n, !=]
[), {, Number, n, =, this, ., dataset, ., getValue, (, ), ;, if, (, n, !=, null, ), {]
[Number, n, =, this, ., dataset, ., getValue, (, ), ;, if, (, n, !=, null, ), {, valueStr, =]
[Number, n, =, this, ., dataset, ., getValue, (, ), ;, if, (, n, !=, null, ), {, valueStr, =]
[Number, n, =, this, ., dataset, ., getValue, (, ), ;, if, (, n, !=, null, ), {, valueStr, =]
[Number, n, =, this, ., dataset, ., getValue, (, ), ;, if, (, n, !=, null, ), {, valueStr, =]
[Number, n, =, this, ., dataset, ., getValue, (, ), ;, if, (, n, !=, null, ), {, valueStr, =]
[., getValue, (, ), ;, if, (, n, !=, null, ), {, valueStr, =, this, ., tickLabelFormat, ., format, (]
[., getValue, (, ), ;, if, (, n, !=, null, ), {, valueStr, =, this, ., tickLabelFormat, ., format, (]
[n, !=, null, ), {, valueStr, =, this, ., tickLabelFormat, ., format, (, n, ., doubleValue, (, ), ), +]
[null, ), {, valueStr, =, this, ., tickLabelFormat, ., format, (, n, ., doubleValue, (, ), ), +, " ", +]
[null, ), {, valueStr, =, this, ., tickLabelFormat, ., format, (, n, ., doubleValue, (, ), ), +, " ", +]
[format, (, n, ., doubleValue, (, ), ), +, " ", +, this, ., units, ;, }, }, float, x, =]
[., doubleValue, (, ), ), +, " ", +, this, ., units, ;, }, }, float, x, =, (, float, )]
[., doubleValue, (, ), ), +, " ", +, this, ., units, ;, }, }, float, x, =, (, float, )]
[., units, ;, }, }, float, x, =, (, float, ), area, ., getCenterX, (, ), ;, float, y, =]
[., units, ;, }, }, float, x, =, (, float, ), area, ., getCenterX, (, ), ;, float, y, =]
[}, }, float, x, =, (, float, ), area, ., getCenterX, (, ), ;, float, y, =, (, float, )]
[}, }, float, x, =, (, float, ), area, ., getCenterX, (, ), ;, float, y, =, (, float, )]
[float, ), area, ., getCenterX, (, ), ;, float, y, =, (, float, ), area, ., getCenterY, (, ), +]
[area, ., getCenterX, (, ), ;, float, y, =, (, float, ), area, ., getCenterY, (, ), +, DEFAULT_CIRCLE_SIZE, ;]
[area, ., getCenterX, (, ), ;, float, y, =, (, float, ), area, ., getCenterY, (, ), +, DEFAULT_CIRCLE_SIZE, ;]
[), ;, float, y, =, (, float, ), area, ., getCenterY, (, ), +, DEFAULT_CIRCLE_SIZE, ;, TextUtilities, ., drawAlignedString, (]
[float, y, =, (, float, ), area, ., getCenterY, (, ), +, DEFAULT_CIRCLE_SIZE, ;, TextUtilities, ., drawAlignedString, (, valueStr, ,]
[=, (, float, ), area, ., getCenterY, (, ), +, DEFAULT_CIRCLE_SIZE, ;, TextUtilities, ., drawAlignedString, (, valueStr, ,, g2, ,]
[float, ), area, ., getCenterY, (, ), +, DEFAULT_CIRCLE_SIZE, ;, TextUtilities, ., drawAlignedString, (, valueStr, ,, g2, ,, x, ,]
[area, ., getCenterY, (, ), +, DEFAULT_CIRCLE_SIZE, ;, TextUtilities, ., drawAlignedString, (, valueStr, ,, g2, ,, x, ,, y, ,]
[area, ., getCenterY, (, ), +, DEFAULT_CIRCLE_SIZE, ;, TextUtilities, ., drawAlignedString, (, valueStr, ,, g2, ,, x, ,, y, ,]
[,, g2, ,, x, ,, y, ,, TextAnchor, ., TOP_CENTER, ), ;, }, public, String, getPlotType, (, ), {, return]
[,, g2, ,, x, ,, y, ,, TextAnchor, ., TOP_CENTER, ), ;, }, public, String, getPlotType, (, ), {, return]
[,, y, ,, TextAnchor, ., TOP_CENTER, ), ;, }, public, String, getPlotType, (, ), {, return, localizationResources, ., getString, (]
[}, public, void, zoom, (, double, percent, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[}, public, void, zoom, (, double, percent, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[void, zoom, (, double, percent, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[percent, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, MeterPlot, ), ), {, return]
[return, true, ;, }, if, (, !, (, obj, instanceof, MeterPlot, ), ), {, return, false, ;, }, if, (]
[true, ;, }, if, (, !, (, obj, instanceof, MeterPlot, ), ), {, return, false, ;, }, if, (, !]
[true, ;, }, if, (, !, (, obj, instanceof, MeterPlot, ), ), {, return, false, ;, }, if, (, !]
[(, !, (, obj, instanceof, MeterPlot, ), ), {, return, false, ;, }, if, (, !, super, ., equals, (]
[MeterPlot, ), ), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return]
[;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, MeterPlot, that, =]
[(, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, MeterPlot, that, =, (, MeterPlot, )]
[equals, (, obj, ), ), {, return, false, ;, }, MeterPlot, that, =, (, MeterPlot, ), obj, ;, if, (]
[(, obj, ), ), {, return, false, ;, }, MeterPlot, that, =, (, MeterPlot, ), obj, ;, if, (, !]
[(, obj, ), ), {, return, false, ;, }, MeterPlot, that, =, (, MeterPlot, ), obj, ;, if, (, !]
[{, return, false, ;, }, MeterPlot, that, =, (, MeterPlot, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (]
[{, return, false, ;, }, MeterPlot, that, =, (, MeterPlot, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (]
[}, MeterPlot, that, =, (, MeterPlot, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (, this, ., units, ,]
[}, MeterPlot, that, =, (, MeterPlot, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (, this, ., units, ,]
[obj, ;, if, (, !, ObjectUtilities, ., equal, (, this, ., units, ,, that, ., units, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., units, ,, that, ., units, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., units, ,, that, ., units, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., units, ,, that, ., units, ), ), {, return, false, ;, }, if, (, !]
[., units, ,, that, ., units, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., units, ,, that, ., units, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., units, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., range, ,]
[., units, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., range, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., range, ,, that, ., range, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., range, ,, that, ., range, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., range, ,, that, ., range, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., range, ,, that, ., range, ), ), {, return, false, ;, }, if, (, !]
[., range, ,, that, ., range, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., range, ,, that, ., range, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., range, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., intervals, ,]
[., range, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., intervals, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., intervals, ,, that, ., intervals, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., intervals, ,, that, ., intervals, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., intervals, ,, that, ., intervals, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., intervals, ,, that, ., intervals, ), ), {, return, false, ;, }, if, (, !]
[., intervals, ,, that, ., intervals, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[., intervals, ,, that, ., intervals, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[., intervals, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., dialOutlinePaint, ,]
[., intervals, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., dialOutlinePaint, ,]
[;, }, if, (, !, PaintUtilities, ., equal, (, this, ., dialOutlinePaint, ,, that, ., dialOutlinePaint, ), ), {, return]
[PaintUtilities, ., equal, (, this, ., dialOutlinePaint, ,, that, ., dialOutlinePaint, ), ), {, return, false, ;, }, if, (]
[PaintUtilities, ., equal, (, this, ., dialOutlinePaint, ,, that, ., dialOutlinePaint, ), ), {, return, false, ;, }, if, (]
[PaintUtilities, ., equal, (, this, ., dialOutlinePaint, ,, that, ., dialOutlinePaint, ), ), {, return, false, ;, }, if, (]
[this, ., dialOutlinePaint, ,, that, ., dialOutlinePaint, ), ), {, return, false, ;, }, if, (, this, ., shape, !=]
[this, ., dialOutlinePaint, ,, that, ., dialOutlinePaint, ), ), {, return, false, ;, }, if, (, this, ., shape, !=]
[dialOutlinePaint, ), ), {, return, false, ;, }, if, (, this, ., shape, !=, that, ., shape, ), {, return]
[false, ;, }, if, (, this, ., shape, !=, that, ., shape, ), {, return, false, ;, }, if, (]
[;, }, if, (, this, ., shape, !=, that, ., shape, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, this, ., shape, !=, that, ., shape, ), {, return, false, ;, }, if, (, !]
[this, ., shape, !=, that, ., shape, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[this, ., shape, !=, that, ., shape, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[that, ., shape, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., dialBackgroundPaint, ,]
[that, ., shape, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., dialBackgroundPaint, ,]
[;, }, if, (, !, PaintUtilities, ., equal, (, this, ., dialBackgroundPaint, ,, that, ., dialBackgroundPaint, ), ), {, return]
[PaintUtilities, ., equal, (, this, ., dialBackgroundPaint, ,, that, ., dialBackgroundPaint, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., dialBackgroundPaint, ,, that, ., dialBackgroundPaint, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., dialBackgroundPaint, ,, that, ., dialBackgroundPaint, ), ), {, return, false, ;, }, if, (, !]
[., dialBackgroundPaint, ,, that, ., dialBackgroundPaint, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[., dialBackgroundPaint, ,, that, ., dialBackgroundPaint, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[., dialBackgroundPaint, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., needlePaint, ,]
[., dialBackgroundPaint, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., needlePaint, ,]
[;, }, if, (, !, PaintUtilities, ., equal, (, this, ., needlePaint, ,, that, ., needlePaint, ), ), {, return]
[PaintUtilities, ., equal, (, this, ., needlePaint, ,, that, ., needlePaint, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., needlePaint, ,, that, ., needlePaint, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., needlePaint, ,, that, ., needlePaint, ), ), {, return, false, ;, }, if, (, !]
[., needlePaint, ,, that, ., needlePaint, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., needlePaint, ,, that, ., needlePaint, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., needlePaint, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., valueFont, ,]
[., needlePaint, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., valueFont, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., valueFont, ,, that, ., valueFont, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., valueFont, ,, that, ., valueFont, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., valueFont, ,, that, ., valueFont, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., valueFont, ,, that, ., valueFont, ), ), {, return, false, ;, }, if, (, !]
[., valueFont, ,, that, ., valueFont, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[., valueFont, ,, that, ., valueFont, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[., valueFont, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., valuePaint, ,]
[., valueFont, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., valuePaint, ,]
[;, }, if, (, !, PaintUtilities, ., equal, (, this, ., valuePaint, ,, that, ., valuePaint, ), ), {, return]
[PaintUtilities, ., equal, (, this, ., valuePaint, ,, that, ., valuePaint, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., valuePaint, ,, that, ., valuePaint, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., valuePaint, ,, that, ., valuePaint, ), ), {, return, false, ;, }, if, (, !]
[., valuePaint, ,, that, ., valuePaint, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[., valuePaint, ,, that, ., valuePaint, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[., valuePaint, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., tickPaint, ,]
[., valuePaint, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., tickPaint, ,]
[;, }, if, (, !, PaintUtilities, ., equal, (, this, ., tickPaint, ,, that, ., tickPaint, ), ), {, return]
[PaintUtilities, ., equal, (, this, ., tickPaint, ,, that, ., tickPaint, ), ), {, return, false, ;, }, if, (]
[PaintUtilities, ., equal, (, this, ., tickPaint, ,, that, ., tickPaint, ), ), {, return, false, ;, }, if, (]
[PaintUtilities, ., equal, (, this, ., tickPaint, ,, that, ., tickPaint, ), ), {, return, false, ;, }, if, (]
[this, ., tickPaint, ,, that, ., tickPaint, ), ), {, return, false, ;, }, if, (, this, ., tickSize, !=]
[this, ., tickPaint, ,, that, ., tickPaint, ), ), {, return, false, ;, }, if, (, this, ., tickSize, !=]
[tickPaint, ), ), {, return, false, ;, }, if, (, this, ., tickSize, !=, that, ., tickSize, ), {, return]
[false, ;, }, if, (, this, ., tickSize, !=, that, ., tickSize, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., tickSize, !=, that, ., tickSize, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., tickSize, !=, that, ., tickSize, ), {, return, false, ;, }, if, (]
[(, this, ., tickSize, !=, that, ., tickSize, ), {, return, false, ;, }, if, (, this, ., tickLabelsVisible, !=]
[(, this, ., tickSize, !=, that, ., tickSize, ), {, return, false, ;, }, if, (, this, ., tickLabelsVisible, !=]
[., tickSize, ), {, return, false, ;, }, if, (, this, ., tickLabelsVisible, !=, that, ., tickLabelsVisible, ), {, return]
[false, ;, }, if, (, this, ., tickLabelsVisible, !=, that, ., tickLabelsVisible, ), {, return, false, ;, }, if, (]
[;, }, if, (, this, ., tickLabelsVisible, !=, that, ., tickLabelsVisible, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, this, ., tickLabelsVisible, !=, that, ., tickLabelsVisible, ), {, return, false, ;, }, if, (, !]
[this, ., tickLabelsVisible, !=, that, ., tickLabelsVisible, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[this, ., tickLabelsVisible, !=, that, ., tickLabelsVisible, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[that, ., tickLabelsVisible, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFont, ,]
[that, ., tickLabelsVisible, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFont, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFont, ,, that, ., tickLabelFont, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., tickLabelFont, ,, that, ., tickLabelFont, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., tickLabelFont, ,, that, ., tickLabelFont, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., tickLabelFont, ,, that, ., tickLabelFont, ), ), {, return, false, ;, }, if, (, !]
[., tickLabelFont, ,, that, ., tickLabelFont, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[., tickLabelFont, ,, that, ., tickLabelFont, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[., tickLabelFont, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., tickLabelPaint, ,]
[., tickLabelFont, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., tickLabelPaint, ,]
[;, }, if, (, !, PaintUtilities, ., equal, (, this, ., tickLabelPaint, ,, that, ., tickLabelPaint, ), ), {, return]
[PaintUtilities, ., equal, (, this, ., tickLabelPaint, ,, that, ., tickLabelPaint, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., tickLabelPaint, ,, that, ., tickLabelPaint, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., tickLabelPaint, ,, that, ., tickLabelPaint, ), ), {, return, false, ;, }, if, (, !]
[., tickLabelPaint, ,, that, ., tickLabelPaint, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., tickLabelPaint, ,, that, ., tickLabelPaint, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., tickLabelPaint, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFormat, ,]
[., tickLabelPaint, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFormat, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFormat, ,, that, ., tickLabelFormat, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., tickLabelFormat, ,, that, ., tickLabelFormat, ), ), {, return, false, ;, }, if, (]
[ObjectUtilities, ., equal, (, this, ., tickLabelFormat, ,, that, ., tickLabelFormat, ), ), {, return, false, ;, }, if, (]
[ObjectUtilities, ., equal, (, this, ., tickLabelFormat, ,, that, ., tickLabelFormat, ), ), {, return, false, ;, }, if, (]
[this, ., tickLabelFormat, ,, that, ., tickLabelFormat, ), ), {, return, false, ;, }, if, (, this, ., drawBorder, !=]
[this, ., tickLabelFormat, ,, that, ., tickLabelFormat, ), ), {, return, false, ;, }, if, (, this, ., drawBorder, !=]
[tickLabelFormat, ), ), {, return, false, ;, }, if, (, this, ., drawBorder, !=, that, ., drawBorder, ), {, return]
[false, ;, }, if, (, this, ., drawBorder, !=, that, ., drawBorder, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., drawBorder, !=, that, ., drawBorder, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., drawBorder, !=, that, ., drawBorder, ), {, return, false, ;, }, if, (]
[(, this, ., drawBorder, !=, that, ., drawBorder, ), {, return, false, ;, }, if, (, this, ., meterAngle, !=]
[(, this, ., drawBorder, !=, that, ., drawBorder, ), {, return, false, ;, }, if, (, this, ., meterAngle, !=]
[., drawBorder, ), {, return, false, ;, }, if, (, this, ., meterAngle, !=, that, ., meterAngle, ), {, return]
[return, false, ;, }, if, (, this, ., meterAngle, !=, that, ., meterAngle, ), {, return, false, ;, }, return]
[), {, return, false, ;, }, return, true, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[), {, return, false, ;, }, return, true, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[return, true, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;]
[return, true, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;]
[private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (]
[private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (]
[ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., dialBackgroundPaint, ,]
[throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., dialBackgroundPaint, ,, stream, ), ;]
[throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., dialBackgroundPaint, ,, stream, ), ;]
[., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., dialBackgroundPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (]
[., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., dialBackgroundPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (]
[;, SerialUtilities, ., writePaint, (, this, ., dialBackgroundPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., dialOutlinePaint, ,]
[writePaint, (, this, ., dialBackgroundPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., dialOutlinePaint, ,, stream, ), ;]
[writePaint, (, this, ., dialBackgroundPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., dialOutlinePaint, ,, stream, ), ;]
[dialBackgroundPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., dialOutlinePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (]
[dialBackgroundPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., dialOutlinePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (]
[;, SerialUtilities, ., writePaint, (, this, ., dialOutlinePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., needlePaint, ,]
[writePaint, (, this, ., dialOutlinePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., needlePaint, ,, stream, ), ;]
[writePaint, (, this, ., dialOutlinePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., needlePaint, ,, stream, ), ;]
[dialOutlinePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., needlePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (]
[dialOutlinePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., needlePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (]
[;, SerialUtilities, ., writePaint, (, this, ., needlePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., valuePaint, ,]
[writePaint, (, this, ., needlePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., valuePaint, ,, stream, ), ;]
[writePaint, (, this, ., needlePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., valuePaint, ,, stream, ), ;]
[needlePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., valuePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (]
[needlePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., valuePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (]
[;, SerialUtilities, ., writePaint, (, this, ., valuePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., tickPaint, ,]
[writePaint, (, this, ., valuePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., tickPaint, ,, stream, ), ;]
[writePaint, (, this, ., valuePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., tickPaint, ,, stream, ), ;]
[valuePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., tickPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (]
[valuePaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., tickPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (]
[;, SerialUtilities, ., writePaint, (, this, ., tickPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., tickLabelPaint, ,]
[this, ., tickLabelPaint, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {]
[this, ., tickLabelPaint, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., dialBackgroundPaint, =]
[readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., dialBackgroundPaint, =]
[), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., dialBackgroundPaint, =, SerialUtilities, ., readPaint, (]
[,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., dialBackgroundPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;]
[,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., dialBackgroundPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;]
[., defaultReadObject, (, ), ;, this, ., dialBackgroundPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., dialOutlinePaint, =]
[., defaultReadObject, (, ), ;, this, ., dialBackgroundPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., dialOutlinePaint, =]
[;, this, ., dialBackgroundPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., dialOutlinePaint, =, SerialUtilities, ., readPaint, (]
[dialBackgroundPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., dialOutlinePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;]
[dialBackgroundPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., dialOutlinePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;]
[readPaint, (, stream, ), ;, this, ., dialOutlinePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., needlePaint, =]
[readPaint, (, stream, ), ;, this, ., dialOutlinePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., needlePaint, =]
[;, this, ., dialOutlinePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., needlePaint, =, SerialUtilities, ., readPaint, (]
[dialOutlinePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., needlePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;]
[dialOutlinePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., needlePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;]
[readPaint, (, stream, ), ;, this, ., needlePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., valuePaint, =]
[readPaint, (, stream, ), ;, this, ., needlePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., valuePaint, =]
[;, this, ., needlePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., valuePaint, =, SerialUtilities, ., readPaint, (]
[needlePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., valuePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;]
[needlePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., valuePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;]
[readPaint, (, stream, ), ;, this, ., valuePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., tickPaint, =]
[readPaint, (, stream, ), ;, this, ., valuePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., tickPaint, =]
[;, this, ., valuePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., tickPaint, =, SerialUtilities, ., readPaint, (]
[valuePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., tickPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;]
[valuePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., tickPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;]
[readPaint, (, stream, ), ;, this, ., tickPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., tickLabelPaint, =]
[readPaint, (, stream, ), ;, this, ., tickPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., tickLabelPaint, =]
[;, this, ., tickPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., tickLabelPaint, =, SerialUtilities, ., readPaint, (]
[SerialUtilities, ., readPaint, (, stream, ), ;, this, ., tickLabelPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, if, (]
[SerialUtilities, ., readPaint, (, stream, ), ;, this, ., tickLabelPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, if, (]
[SerialUtilities, ., readPaint, (, stream, ), ;, this, ., tickLabelPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, if, (]
[stream, ), ;, this, ., tickLabelPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, if, (, this, ., dataset, !=]
[this, ., tickLabelPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, if, (, this, ., dataset, !=, null, ), {]
[this, ., tickLabelPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, if, (, this, ., dataset, !=, null, ), {]
[this, ., tickLabelPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, if, (, this, ., dataset, !=, null, ), {]
[readPaint, (, stream, ), ;, if, (, this, ., dataset, !=, null, ), {, this, ., dataset, ., addChangeListener, (]
[dataset, ., addChangeListener, (, this, ), ;, }, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, MeterPlot, clone, =]
[(, this, ), ;, }, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, MeterPlot, clone, =, (, MeterPlot, )]
[(, this, ), ;, }, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, MeterPlot, clone, =, (, MeterPlot, )]
[public, Object, clone, (, ), throws, CloneNotSupportedException, {, MeterPlot, clone, =, (, MeterPlot, ), super, ., clone, (, ), ;]
[public, Object, clone, (, ), throws, CloneNotSupportedException, {, MeterPlot, clone, =, (, MeterPlot, ), super, ., clone, (, ), ;]
[), throws, CloneNotSupportedException, {, MeterPlot, clone, =, (, MeterPlot, ), super, ., clone, (, ), ;, clone, ., tickLabelFormat, =]
[{, MeterPlot, clone, =, (, MeterPlot, ), super, ., clone, (, ), ;, clone, ., tickLabelFormat, =, (, NumberFormat, )]
[{, MeterPlot, clone, =, (, MeterPlot, ), super, ., clone, (, ), ;, clone, ., tickLabelFormat, =, (, NumberFormat, )]
[{, MeterPlot, clone, =, (, MeterPlot, ), super, ., clone, (, ), ;, clone, ., tickLabelFormat, =, (, NumberFormat, )]
[., clone, (, ), ;, clone, ., tickLabelFormat, =, (, NumberFormat, ), this, ., tickLabelFormat, ., clone, (, ), ;]
[., clone, (, ), ;, clone, ., tickLabelFormat, =, (, NumberFormat, ), this, ., tickLabelFormat, ., clone, (, ), ;]
[;, clone, ., tickLabelFormat, =, (, NumberFormat, ), this, ., tickLabelFormat, ., clone, (, ), ;, clone, ., intervals, =]
[), this, ., tickLabelFormat, ., clone, (, ), ;, clone, ., intervals, =, new, java, ., util, ., ArrayList, (]
[), this, ., tickLabelFormat, ., clone, (, ), ;, clone, ., intervals, =, new, java, ., util, ., ArrayList, (]
[), ;, clone, ., intervals, =, new, java, ., util, ., ArrayList, (, this, ., intervals, ), ;, if, (]
[), ;, clone, ., intervals, =, new, java, ., util, ., ArrayList, (, this, ., intervals, ), ;, if, (]
[), ;, clone, ., intervals, =, new, java, ., util, ., ArrayList, (, this, ., intervals, ), ;, if, (]
[intervals, =, new, java, ., util, ., ArrayList, (, this, ., intervals, ), ;, if, (, clone, ., dataset, !=]
[java, ., util, ., ArrayList, (, this, ., intervals, ), ;, if, (, clone, ., dataset, !=, null, ), {]
[java, ., util, ., ArrayList, (, this, ., intervals, ), ;, if, (, clone, ., dataset, !=, null, ), {]
[java, ., util, ., ArrayList, (, this, ., intervals, ), ;, if, (, clone, ., dataset, !=, null, ), {]
[this, ., intervals, ), ;, if, (, clone, ., dataset, !=, null, ), {, clone, ., dataset, ., addChangeListener, (]
[if, (, clone, ., dataset, !=, null, ), {, clone, ., dataset, ., addChangeListener, (, clone, ), ;, }, return]
