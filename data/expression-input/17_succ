[), ;, }, public, IntervalsSet, (, final, BSPTree, <, Euclidean1D, >, tree, ), {, super, (, tree, ), ;, }]
[,, upper, ), ), ;, }, public, IntervalsSet, (, final, BSPTree, <, Euclidean1D, >, tree, ), {, super, (, tree]
[), ), ;, }, public, IntervalsSet, (, final, BSPTree, <, Euclidean1D, >, tree, ), {, super, (, tree, ), ;]
[), ;, }, public, IntervalsSet, (, final, Collection, <, SubHyperplane, <, Euclidean1D, >, >, boundary, ), {, super, (, boundary]
[), ;, }, private, static, BSPTree, <, Euclidean1D, >, buildTree, (, final, double, lower, ,, final, double, upper, ), {]
[), {, if, (, Double, ., isInfinite, (, upper, ), &&, (, upper, >, 0, ), ), {, return, new]
[&&, (, lower, <, 0, ), ), {, if, (, Double, ., isInfinite, (, upper, ), &&, (, upper, >]
[., isInfinite, (, lower, ), &&, (, lower, <, 0, ), ), {, if, (, Double, ., isInfinite, (, upper]
[), &&, (, lower, <, 0, ), ), {, if, (, Double, ., isInfinite, (, upper, ), &&, (, upper]
[), {, if, (, Double, ., isInfinite, (, upper, ), &&, (, upper, >, 0, ), ), {, return, new]
[), ), {, if, (, Double, ., isInfinite, (, upper, ), &&, (, upper, >, 0, ), ), {, return]
[<, 0, ), ), {, if, (, Double, ., isInfinite, (, upper, ), &&, (, upper, >, 0, ), )]
[), ), {, if, (, Double, ., isInfinite, (, upper, ), &&, (, upper, >, 0, ), ), {, return]
[), {, return, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, ), ;, }, final, SubHyperplane, <, Euclidean1D, >]
[&&, (, upper, >, 0, ), ), {, return, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, ), ;]
[., isInfinite, (, upper, ), &&, (, upper, >, 0, ), ), {, return, new, BSPTree, <, Euclidean1D, >, (]
[), &&, (, upper, >, 0, ), ), {, return, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, )]
[), {, return, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, ), ;, }, final, SubHyperplane, <, Euclidean1D, >]
[), ), {, return, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, ), ;, }, final, SubHyperplane, <, Euclidean1D]
[>, 0, ), ), {, return, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, ), ;, }, final, SubHyperplane]
[), ), {, return, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, ), ;, }, final, SubHyperplane, <, Euclidean1D]
[;, }, final, SubHyperplane, <, Euclidean1D, >, upperCut, =, new, OrientedPoint, (, new, Vector1D, (, upper, ), ,, true, )]
[), ;, }, final, SubHyperplane, <, Euclidean1D, >, upperCut, =, new, OrientedPoint, (, new, Vector1D, (, upper, ), ,, true]
[., TRUE, ), ;, }, final, SubHyperplane, <, Euclidean1D, >, upperCut, =, new, OrientedPoint, (, new, Vector1D, (, upper, )]
[;, return, new, BSPTree, <, Euclidean1D, >, (, upperCut, ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., FALSE, )]
[., wholeHyperplane, (, ), ;, return, new, BSPTree, <, Euclidean1D, >, (, upperCut, ,, new, BSPTree, <, Euclidean1D, >, (]
[,, true, ), ., wholeHyperplane, (, ), ;, return, new, BSPTree, <, Euclidean1D, >, (, upperCut, ,, new, BSPTree, <]
[), ,, true, ), ., wholeHyperplane, (, ), ;, return, new, BSPTree, <, Euclidean1D, >, (, upperCut, ,, new, BSPTree]
[), ., wholeHyperplane, (, ), ;, return, new, BSPTree, <, Euclidean1D, >, (, upperCut, ,, new, BSPTree, <, Euclidean1D, >]
[;, }, final, SubHyperplane, <, Euclidean1D, >, lowerCut, =, new, OrientedPoint, (, new, Vector1D, (, lower, ), ,, false, )]
[,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., FALSE, ), ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, .]
[,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, ), ,, null, ), ;, }, final, SubHyperplane, <, Euclidean1D]
[), ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, ), ,, null, ), ;, }, final, SubHyperplane, <]
[., FALSE, ), ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, ), ,, null, ), ;, }, final]
[,, null, ), ;, }, final, SubHyperplane, <, Euclidean1D, >, lowerCut, =, new, OrientedPoint, (, new, Vector1D, (, lower, )]
[), ,, null, ), ;, }, final, SubHyperplane, <, Euclidean1D, >, lowerCut, =, new, OrientedPoint, (, new, Vector1D, (, lower]
[., TRUE, ), ,, null, ), ;, }, final, SubHyperplane, <, Euclidean1D, >, lowerCut, =, new, OrientedPoint, (, new, Vector1D]
[), ;, }, final, SubHyperplane, <, Euclidean1D, >, lowerCut, =, new, OrientedPoint, (, new, Vector1D, (, lower, ), ,, false]
[;, if, (, Double, ., isInfinite, (, upper, ), &&, (, upper, >, 0, ), ), {, return, new, BSPTree]
[., wholeHyperplane, (, ), ;, if, (, Double, ., isInfinite, (, upper, ), &&, (, upper, >, 0, ), )]
[,, false, ), ., wholeHyperplane, (, ), ;, if, (, Double, ., isInfinite, (, upper, ), &&, (, upper, >]
[), ,, false, ), ., wholeHyperplane, (, ), ;, if, (, Double, ., isInfinite, (, upper, ), &&, (, upper]
[), ., wholeHyperplane, (, ), ;, if, (, Double, ., isInfinite, (, upper, ), &&, (, upper, >, 0, )]
[), {, return, new, BSPTree, <, Euclidean1D, >, (, lowerCut, ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., FALSE]
[&&, (, upper, >, 0, ), ), {, return, new, BSPTree, <, Euclidean1D, >, (, lowerCut, ,, new, BSPTree, <]
[., isInfinite, (, upper, ), &&, (, upper, >, 0, ), ), {, return, new, BSPTree, <, Euclidean1D, >, (]
[), &&, (, upper, >, 0, ), ), {, return, new, BSPTree, <, Euclidean1D, >, (, lowerCut, ,, new, BSPTree]
[), {, return, new, BSPTree, <, Euclidean1D, >, (, lowerCut, ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., FALSE]
[), ), {, return, new, BSPTree, <, Euclidean1D, >, (, lowerCut, ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, .]
[>, 0, ), ), {, return, new, BSPTree, <, Euclidean1D, >, (, lowerCut, ,, new, BSPTree, <, Euclidean1D, >, (]
[), ), {, return, new, BSPTree, <, Euclidean1D, >, (, lowerCut, ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, .]
[;, }, final, SubHyperplane, <, Euclidean1D, >, upperCut, =, new, OrientedPoint, (, new, Vector1D, (, upper, ), ,, true, )]
[,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., FALSE, ), ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, .]
[,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, ), ,, null, ), ;, }, final, SubHyperplane, <, Euclidean1D]
[), ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, ), ,, null, ), ;, }, final, SubHyperplane, <]
[., FALSE, ), ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, ), ,, null, ), ;, }, final]
[,, null, ), ;, }, final, SubHyperplane, <, Euclidean1D, >, upperCut, =, new, OrientedPoint, (, new, Vector1D, (, upper, )]
[), ,, null, ), ;, }, final, SubHyperplane, <, Euclidean1D, >, upperCut, =, new, OrientedPoint, (, new, Vector1D, (, upper]
[., TRUE, ), ,, null, ), ;, }, final, SubHyperplane, <, Euclidean1D, >, upperCut, =, new, OrientedPoint, (, new, Vector1D]
[), ;, }, final, SubHyperplane, <, Euclidean1D, >, upperCut, =, new, OrientedPoint, (, new, Vector1D, (, upper, ), ,, true]
[;, return, new, BSPTree, <, Euclidean1D, >, (, lowerCut, ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., FALSE, )]
[., wholeHyperplane, (, ), ;, return, new, BSPTree, <, Euclidean1D, >, (, lowerCut, ,, new, BSPTree, <, Euclidean1D, >, (]
[,, true, ), ., wholeHyperplane, (, ), ;, return, new, BSPTree, <, Euclidean1D, >, (, lowerCut, ,, new, BSPTree, <]
[), ,, true, ), ., wholeHyperplane, (, ), ;, return, new, BSPTree, <, Euclidean1D, >, (, lowerCut, ,, new, BSPTree]
[), ., wholeHyperplane, (, ), ;, return, new, BSPTree, <, Euclidean1D, >, (, lowerCut, ,, new, BSPTree, <, Euclidean1D, >]
[;, }, @, Override, public, IntervalsSet, buildNew, (, final, BSPTree, <, Euclidean1D, >, tree, ), {, return, new, IntervalsSet, (]
[,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., FALSE, ), ,, new, BSPTree, <, Euclidean1D, >, (, upperCut, ,]
[,, new, BSPTree, <, Euclidean1D, >, (, upperCut, ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., FALSE, ), ,]
[), ,, new, BSPTree, <, Euclidean1D, >, (, upperCut, ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., FALSE, )]
[., FALSE, ), ,, new, BSPTree, <, Euclidean1D, >, (, upperCut, ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, .]
[,, null, ), ;, }, @, Override, public, IntervalsSet, buildNew, (, final, BSPTree, <, Euclidean1D, >, tree, ), {, return]
[,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., FALSE, ), ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, .]
[,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, ), ,, null, ), ,, null, ), ;, }, @]
[), ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, ), ,, null, ), ,, null, ), ;, }]
[., FALSE, ), ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, ), ,, null, ), ,, null, )]
[,, null, ), ,, null, ), ;, }, @, Override, public, IntervalsSet, buildNew, (, final, BSPTree, <, Euclidean1D, >, tree]
[), ,, null, ), ,, null, ), ;, }, @, Override, public, IntervalsSet, buildNew, (, final, BSPTree, <, Euclidean1D, >]
[., TRUE, ), ,, null, ), ,, null, ), ;, }, @, Override, public, IntervalsSet, buildNew, (, final, BSPTree, <]
[), ,, null, ), ;, }, @, Override, public, IntervalsSet, buildNew, (, final, BSPTree, <, Euclidean1D, >, tree, ), {]
[), ;, }, @, Override, public, IntervalsSet, buildNew, (, final, BSPTree, <, Euclidean1D, >, tree, ), {, return, new, IntervalsSet]
[;, }, @, Override, protected, void, computeGeometricalProperties, (, ), {, if, (, getTree, (, false, ), ., getCut, (, )]
[), ;, }, @, Override, protected, void, computeGeometricalProperties, (, ), {, if, (, getTree, (, false, ), ., getCut, (]
[), {, setBarycenter, (, Vector1D, ., NaN, ), ;, setSize, (, (, (, Boolean, ), getTree, (, false, ), .]
[==, null, ), {, setBarycenter, (, Vector1D, ., NaN, ), ;, setSize, (, (, (, Boolean, ), getTree, (, false]
[., getCut, (, ), ==, null, ), {, setBarycenter, (, Vector1D, ., NaN, ), ;, setSize, (, (, (, Boolean]
[), ., getCut, (, ), ==, null, ), {, setBarycenter, (, Vector1D, ., NaN, ), ;, setSize, (, (, (]
[), {, setBarycenter, (, Vector1D, ., NaN, ), ;, setSize, (, (, (, Boolean, ), getTree, (, false, ), .]
[;, setSize, (, (, (, Boolean, ), getTree, (, false, ), ., getAttribute, (, ), ), ?, Double, ., POSITIVE_INFINITY]
[), ;, setSize, (, (, (, Boolean, ), getTree, (, false, ), ., getAttribute, (, ), ), ?, Double, .]
[., NaN, ), ;, setSize, (, (, (, Boolean, ), getTree, (, false, ), ., getAttribute, (, ), ), ?]
[;, }, else, {, double, size, =, 0.0, ;, double, sum, =, 0.0, ;, for, (, final, Interval, interval, :]
[), ;, }, else, {, double, size, =, 0.0, ;, double, sum, =, 0.0, ;, for, (, final, Interval, interval]
[?, Double, ., POSITIVE_INFINITY, :, 0, ), ;, }, else, {, double, size, =, 0.0, ;, double, sum, =, 0.0]
[), ?, Double, ., POSITIVE_INFINITY, :, 0, ), ;, }, else, {, double, size, =, 0.0, ;, double, sum, =]
[), ?, Double, ., POSITIVE_INFINITY, :, 0, ), ;, }, else, {, double, size, =, 0.0, ;, double, sum, =]
[., getAttribute, (, ), ), ?, Double, ., POSITIVE_INFINITY, :, 0, ), ;, }, else, {, double, size, =, 0.0]
[), ., getAttribute, (, ), ), ?, Double, ., POSITIVE_INFINITY, :, 0, ), ;, }, else, {, double, size, =]
[:, 0, ), ;, }, else, {, double, size, =, 0.0, ;, double, sum, =, 0.0, ;, for, (, final]
[., POSITIVE_INFINITY, :, 0, ), ;, }, else, {, double, size, =, 0.0, ;, double, sum, =, 0.0, ;, for]
[), ;, }, else, {, double, size, =, 0.0, ;, double, sum, =, 0.0, ;, for, (, final, Interval, interval]
[;, double, sum, =, 0.0, ;, for, (, final, Interval, interval, :, asList, (, ), ), {, size, +=, interval]
[;, for, (, final, Interval, interval, :, asList, (, ), ), {, size, +=, interval, ., getSize, (, ), ;]
[), {, size, +=, interval, ., getSize, (, ), ;, sum, +=, interval, ., getSize, (, ), *, interval, .]
[+=, interval, ., getSize, (, ), ;, sum, +=, interval, ., getSize, (, ), *, interval, ., getBarycenter, (, )]
[;, sum, +=, interval, ., getSize, (, ), *, interval, ., getBarycenter, (, ), ;, }, setSize, (, size, )]
[., getSize, (, ), ;, sum, +=, interval, ., getSize, (, ), *, interval, ., getBarycenter, (, ), ;, }]
[+=, interval, ., getSize, (, ), *, interval, ., getBarycenter, (, ), ;, }, setSize, (, size, ), ;, if]
[;, }, setSize, (, size, ), ;, if, (, Double, ., isInfinite, (, size, ), ), {, setBarycenter, (, Vector1D]
[*, interval, ., getBarycenter, (, ), ;, }, setSize, (, size, ), ;, if, (, Double, ., isInfinite, (, size]
[., getSize, (, ), *, interval, ., getBarycenter, (, ), ;, }, setSize, (, size, ), ;, if, (, Double]
[;, }, setSize, (, size, ), ;, if, (, Double, ., isInfinite, (, size, ), ), {, setBarycenter, (, Vector1D]
[., getBarycenter, (, ), ;, }, setSize, (, size, ), ;, if, (, Double, ., isInfinite, (, size, ), )]
[;, if, (, Double, ., isInfinite, (, size, ), ), {, setBarycenter, (, Vector1D, ., NaN, ), ;, }, else]
[), ;, if, (, Double, ., isInfinite, (, size, ), ), {, setBarycenter, (, Vector1D, ., NaN, ), ;, }]
[), {, setBarycenter, (, Vector1D, ., NaN, ), ;, }, else, if, (, size, >=, Precision, ., SAFE_MIN, ), {]
[., isInfinite, (, size, ), ), {, setBarycenter, (, Vector1D, ., NaN, ), ;, }, else, if, (, size, >=]
[), ), {, setBarycenter, (, Vector1D, ., NaN, ), ;, }, else, if, (, size, >=, Precision, ., SAFE_MIN, )]
[;, }, else, if, (, size, >=, Precision, ., SAFE_MIN, ), {, setBarycenter, (, new, Vector1D, (, sum, /, size]
[), ;, }, else, if, (, size, >=, Precision, ., SAFE_MIN, ), {, setBarycenter, (, new, Vector1D, (, sum, /]
[., NaN, ), ;, }, else, if, (, size, >=, Precision, ., SAFE_MIN, ), {, setBarycenter, (, new, Vector1D, (]
[), {, setBarycenter, (, new, Vector1D, (, sum, /, size, ), ), ;, }, else, {, setBarycenter, (, (, (]
[>=, Precision, ., SAFE_MIN, ), {, setBarycenter, (, new, Vector1D, (, sum, /, size, ), ), ;, }, else, {]
[), {, setBarycenter, (, new, Vector1D, (, sum, /, size, ), ), ;, }, else, {, setBarycenter, (, (, (]
[., SAFE_MIN, ), {, setBarycenter, (, new, Vector1D, (, sum, /, size, ), ), ;, }, else, {, setBarycenter, (]
[;, }, else, {, setBarycenter, (, (, (, OrientedPoint, ), getTree, (, false, ), ., getCut, (, ), ., getHyperplane]
[), ;, }, else, {, setBarycenter, (, (, (, OrientedPoint, ), getTree, (, false, ), ., getCut, (, ), .]
[), ), ;, }, else, {, setBarycenter, (, (, (, OrientedPoint, ), getTree, (, false, ), ., getCut, (, )]
[/, size, ), ), ;, }, else, {, setBarycenter, (, (, (, OrientedPoint, ), getTree, (, false, ), ., getCut]
[), ), ;, }, else, {, setBarycenter, (, (, (, OrientedPoint, ), getTree, (, false, ), ., getCut, (, )]
[;, }, }, }, public, double, getInf, (, ), {, BSPTree, <, Euclidean1D, >, node, =, getTree, (, false, )]
[), ;, }, }, }, public, double, getInf, (, ), {, BSPTree, <, Euclidean1D, >, node, =, getTree, (, false]
[., getLocation, (, ), ), ;, }, }, }, public, double, getInf, (, ), {, BSPTree, <, Euclidean1D, >, node]
[), ., getLocation, (, ), ), ;, }, }, }, public, double, getInf, (, ), {, BSPTree, <, Euclidean1D, >]
[), ., getLocation, (, ), ), ;, }, }, }, public, double, getInf, (, ), {, BSPTree, <, Euclidean1D, >]
[., getHyperplane, (, ), ), ., getLocation, (, ), ), ;, }, }, }, public, double, getInf, (, ), {]
[., getCut, (, ), ., getHyperplane, (, ), ), ., getLocation, (, ), ), ;, }, }, }, public, double]
[), ., getCut, (, ), ., getHyperplane, (, ), ), ., getLocation, (, ), ), ;, }, }, }, public]
[;, double, inf, =, Double, ., POSITIVE_INFINITY, ;, while, (, node, ., getCut, (, ), !=, null, ), {, final]
[), ;, double, inf, =, Double, ., POSITIVE_INFINITY, ;, while, (, node, ., getCut, (, ), !=, null, ), {]
[;, while, (, node, ., getCut, (, ), !=, null, ), {, final, OrientedPoint, op, =, (, OrientedPoint, ), node]
[., POSITIVE_INFINITY, ;, while, (, node, ., getCut, (, ), !=, null, ), {, final, OrientedPoint, op, =, (, OrientedPoint]
[), {, final, OrientedPoint, op, =, (, OrientedPoint, ), node, ., getCut, (, ), ., getHyperplane, (, ), ;, inf]
[!=, null, ), {, final, OrientedPoint, op, =, (, OrientedPoint, ), node, ., getCut, (, ), ., getHyperplane, (, )]
[., getCut, (, ), !=, null, ), {, final, OrientedPoint, op, =, (, OrientedPoint, ), node, ., getCut, (, )]
[), {, final, OrientedPoint, op, =, (, OrientedPoint, ), node, ., getCut, (, ), ., getHyperplane, (, ), ;, inf]
[;, inf, =, op, ., getLocation, (, ), ., getX, (, ), ;, node, =, op, ., isDirect, (, )]
[;, inf, =, op, ., getLocation, (, ), ., getX, (, ), ;, node, =, op, ., isDirect, (, )]
[., getHyperplane, (, ), ;, inf, =, op, ., getLocation, (, ), ., getX, (, ), ;, node, =, op]
[., getCut, (, ), ., getHyperplane, (, ), ;, inf, =, op, ., getLocation, (, ), ., getX, (, )]
[=, op, ., getLocation, (, ), ., getX, (, ), ;, node, =, op, ., isDirect, (, ), ?, node]
[;, node, =, op, ., isDirect, (, ), ?, node, ., getMinus, (, ), :, node, ., getPlus, (, )]
[., getX, (, ), ;, node, =, op, ., isDirect, (, ), ?, node, ., getMinus, (, ), :, node]
[., getLocation, (, ), ., getX, (, ), ;, node, =, op, ., isDirect, (, ), ?, node, ., getMinus]
[=, op, ., isDirect, (, ), ?, node, ., getMinus, (, ), :, node, ., getPlus, (, ), ;, }]
[;, }, return, (, (, Boolean, ), node, ., getAttribute, (, ), ), ?, Double, ., NEGATIVE_INFINITY, :, inf, ;]
[?, node, ., getMinus, (, ), :, node, ., getPlus, (, ), ;, }, return, (, (, Boolean, ), node]
[., isDirect, (, ), ?, node, ., getMinus, (, ), :, node, ., getPlus, (, ), ;, }, return, (]
[:, node, ., getPlus, (, ), ;, }, return, (, (, Boolean, ), node, ., getAttribute, (, ), ), ?]
[., getMinus, (, ), :, node, ., getPlus, (, ), ;, }, return, (, (, Boolean, ), node, ., getAttribute]
[;, }, return, (, (, Boolean, ), node, ., getAttribute, (, ), ), ?, Double, ., NEGATIVE_INFINITY, :, inf, ;]
[., getPlus, (, ), ;, }, return, (, (, Boolean, ), node, ., getAttribute, (, ), ), ?, Double, .]
[;, }, public, double, getSup, (, ), {, BSPTree, <, Euclidean1D, >, node, =, getTree, (, false, ), ;, double]
[?, Double, ., NEGATIVE_INFINITY, :, inf, ;, }, public, double, getSup, (, ), {, BSPTree, <, Euclidean1D, >, node, =]
[), ?, Double, ., NEGATIVE_INFINITY, :, inf, ;, }, public, double, getSup, (, ), {, BSPTree, <, Euclidean1D, >, node]
[), ?, Double, ., NEGATIVE_INFINITY, :, inf, ;, }, public, double, getSup, (, ), {, BSPTree, <, Euclidean1D, >, node]
[., getAttribute, (, ), ), ?, Double, ., NEGATIVE_INFINITY, :, inf, ;, }, public, double, getSup, (, ), {, BSPTree]
[:, inf, ;, }, public, double, getSup, (, ), {, BSPTree, <, Euclidean1D, >, node, =, getTree, (, false, )]
[., NEGATIVE_INFINITY, :, inf, ;, }, public, double, getSup, (, ), {, BSPTree, <, Euclidean1D, >, node, =, getTree, (]
[;, }, public, double, getSup, (, ), {, BSPTree, <, Euclidean1D, >, node, =, getTree, (, false, ), ;, double]
[;, double, sup, =, Double, ., NEGATIVE_INFINITY, ;, while, (, node, ., getCut, (, ), !=, null, ), {, final]
[), ;, double, sup, =, Double, ., NEGATIVE_INFINITY, ;, while, (, node, ., getCut, (, ), !=, null, ), {]
[;, while, (, node, ., getCut, (, ), !=, null, ), {, final, OrientedPoint, op, =, (, OrientedPoint, ), node]
[., NEGATIVE_INFINITY, ;, while, (, node, ., getCut, (, ), !=, null, ), {, final, OrientedPoint, op, =, (, OrientedPoint]
[), {, final, OrientedPoint, op, =, (, OrientedPoint, ), node, ., getCut, (, ), ., getHyperplane, (, ), ;, sup]
[!=, null, ), {, final, OrientedPoint, op, =, (, OrientedPoint, ), node, ., getCut, (, ), ., getHyperplane, (, )]
[., getCut, (, ), !=, null, ), {, final, OrientedPoint, op, =, (, OrientedPoint, ), node, ., getCut, (, )]
[), {, final, OrientedPoint, op, =, (, OrientedPoint, ), node, ., getCut, (, ), ., getHyperplane, (, ), ;, sup]
[;, sup, =, op, ., getLocation, (, ), ., getX, (, ), ;, node, =, op, ., isDirect, (, )]
[;, sup, =, op, ., getLocation, (, ), ., getX, (, ), ;, node, =, op, ., isDirect, (, )]
[., getHyperplane, (, ), ;, sup, =, op, ., getLocation, (, ), ., getX, (, ), ;, node, =, op]
[., getCut, (, ), ., getHyperplane, (, ), ;, sup, =, op, ., getLocation, (, ), ., getX, (, )]
[=, op, ., getLocation, (, ), ., getX, (, ), ;, node, =, op, ., isDirect, (, ), ?, node]
[;, node, =, op, ., isDirect, (, ), ?, node, ., getPlus, (, ), :, node, ., getMinus, (, )]
[., getX, (, ), ;, node, =, op, ., isDirect, (, ), ?, node, ., getPlus, (, ), :, node]
[., getLocation, (, ), ., getX, (, ), ;, node, =, op, ., isDirect, (, ), ?, node, ., getPlus]
[=, op, ., isDirect, (, ), ?, node, ., getPlus, (, ), :, node, ., getMinus, (, ), ;, }]
[;, }, return, (, (, Boolean, ), node, ., getAttribute, (, ), ), ?, Double, ., POSITIVE_INFINITY, :, sup, ;]
[?, node, ., getPlus, (, ), :, node, ., getMinus, (, ), ;, }, return, (, (, Boolean, ), node]
[., isDirect, (, ), ?, node, ., getPlus, (, ), :, node, ., getMinus, (, ), ;, }, return, (]
[:, node, ., getMinus, (, ), ;, }, return, (, (, Boolean, ), node, ., getAttribute, (, ), ), ?]
[., getPlus, (, ), :, node, ., getMinus, (, ), ;, }, return, (, (, Boolean, ), node, ., getAttribute]
[;, }, return, (, (, Boolean, ), node, ., getAttribute, (, ), ), ?, Double, ., POSITIVE_INFINITY, :, sup, ;]
[., getMinus, (, ), ;, }, return, (, (, Boolean, ), node, ., getAttribute, (, ), ), ?, Double, .]
[;, }, public, List, <, Interval, >, asList, (, ), {, final, List, <, Interval, >, list, =, new, ArrayList]
[?, Double, ., POSITIVE_INFINITY, :, sup, ;, }, public, List, <, Interval, >, asList, (, ), {, final, List, <]
[), ?, Double, ., POSITIVE_INFINITY, :, sup, ;, }, public, List, <, Interval, >, asList, (, ), {, final, List]
[), ?, Double, ., POSITIVE_INFINITY, :, sup, ;, }, public, List, <, Interval, >, asList, (, ), {, final, List]
[., getAttribute, (, ), ), ?, Double, ., POSITIVE_INFINITY, :, sup, ;, }, public, List, <, Interval, >, asList, (]
[:, sup, ;, }, public, List, <, Interval, >, asList, (, ), {, final, List, <, Interval, >, list, =]
[., POSITIVE_INFINITY, :, sup, ;, }, public, List, <, Interval, >, asList, (, ), {, final, List, <, Interval, >]
[;, }, public, List, <, Interval, >, asList, (, ), {, final, List, <, Interval, >, list, =, new, ArrayList]
[;, recurseList, (, getTree, (, false, ), ,, list, ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, return]
[;, return, list, ;, }, private, void, recurseList, (, final, BSPTree, <, Euclidean1D, >, node, ,, final, List, <, Interval]
[,, list, ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, return, list, ;, }, private, void, recurseList, (]
[), ,, list, ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, return, list, ;, }, private, void, recurseList]
[,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, return, list, ;, }, private, void, recurseList, (, final, BSPTree]
[,, Double, ., POSITIVE_INFINITY, ), ;, return, list, ;, }, private, void, recurseList, (, final, BSPTree, <, Euclidean1D, >, node]
[., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, return, list, ;, }, private, void, recurseList, (, final, BSPTree, <, Euclidean1D]
[), ;, return, list, ;, }, private, void, recurseList, (, final, BSPTree, <, Euclidean1D, >, node, ,, final, List, <]
[., POSITIVE_INFINITY, ), ;, return, list, ;, }, private, void, recurseList, (, final, BSPTree, <, Euclidean1D, >, node, ,, final]
[;, }, private, void, recurseList, (, final, BSPTree, <, Euclidean1D, >, node, ,, final, List, <, Interval, >, list, ,]
[), {, if, (, (, Boolean, ), node, ., getAttribute, (, ), ), {, list, ., add, (, new, Interval]
[==, null, ), {, if, (, (, Boolean, ), node, ., getAttribute, (, ), ), {, list, ., add, (]
[., getCut, (, ), ==, null, ), {, if, (, (, Boolean, ), node, ., getAttribute, (, ), ), {]
[), {, if, (, (, Boolean, ), node, ., getAttribute, (, ), ), {, list, ., add, (, new, Interval]
[), {, list, ., add, (, new, Interval, (, lower, ,, upper, ), ), ;, }, }, else, {, final]
[), {, list, ., add, (, new, Interval, (, lower, ,, upper, ), ), ;, }, }, else, {, final]
[., getAttribute, (, ), ), {, list, ., add, (, new, Interval, (, lower, ,, upper, ), ), ;, }]
[;, }, }, else, {, final, OrientedPoint, op, =, (, OrientedPoint, ), node, ., getCut, (, ), ., getHyperplane, (]
[., add, (, new, Interval, (, lower, ,, upper, ), ), ;, }, }, else, {, final, OrientedPoint, op, =]
[), ;, }, }, else, {, final, OrientedPoint, op, =, (, OrientedPoint, ), node, ., getCut, (, ), ., getHyperplane]
[,, upper, ), ), ;, }, }, else, {, final, OrientedPoint, op, =, (, OrientedPoint, ), node, ., getCut, (]
[), ), ;, }, }, else, {, final, OrientedPoint, op, =, (, OrientedPoint, ), node, ., getCut, (, ), .]
[;, final, Vector1D, loc, =, op, ., getLocation, (, ), ;, double, x, =, loc, ., getX, (, ), ;]
[;, final, Vector1D, loc, =, op, ., getLocation, (, ), ;, double, x, =, loc, ., getX, (, ), ;]
[., getHyperplane, (, ), ;, final, Vector1D, loc, =, op, ., getLocation, (, ), ;, double, x, =, loc, .]
[., getCut, (, ), ., getHyperplane, (, ), ;, final, Vector1D, loc, =, op, ., getLocation, (, ), ;, double]
[;, double, x, =, loc, ., getX, (, ), ;, final, BSPTree, <, Euclidean1D, >, low, =, op, ., isDirect]
[., getLocation, (, ), ;, double, x, =, loc, ., getX, (, ), ;, final, BSPTree, <, Euclidean1D, >, low]
[;, final, BSPTree, <, Euclidean1D, >, low, =, op, ., isDirect, (, ), ?, node, ., getMinus, (, ), :]
[., getX, (, ), ;, final, BSPTree, <, Euclidean1D, >, low, =, op, ., isDirect, (, ), ?, node, .]
[;, final, BSPTree, <, Euclidean1D, >, high, =, op, ., isDirect, (, ), ?, node, ., getPlus, (, ), :]
[?, node, ., getMinus, (, ), :, node, ., getPlus, (, ), ;, final, BSPTree, <, Euclidean1D, >, high, =]
[., isDirect, (, ), ?, node, ., getMinus, (, ), :, node, ., getPlus, (, ), ;, final, BSPTree, <]
[:, node, ., getPlus, (, ), ;, final, BSPTree, <, Euclidean1D, >, high, =, op, ., isDirect, (, ), ?]
[., getMinus, (, ), :, node, ., getPlus, (, ), ;, final, BSPTree, <, Euclidean1D, >, high, =, op, .]
[;, final, BSPTree, <, Euclidean1D, >, high, =, op, ., isDirect, (, ), ?, node, ., getPlus, (, ), :]
[., getPlus, (, ), ;, final, BSPTree, <, Euclidean1D, >, high, =, op, ., isDirect, (, ), ?, node, .]
[;, recurseList, (, low, ,, list, ,, lower, ,, x, ), ;, if, (, (, checkPoint, (, low, ,, loc]
[?, node, ., getPlus, (, ), :, node, ., getMinus, (, ), ;, recurseList, (, low, ,, list, ,, lower]
[., isDirect, (, ), ?, node, ., getPlus, (, ), :, node, ., getMinus, (, ), ;, recurseList, (, low]
[:, node, ., getMinus, (, ), ;, recurseList, (, low, ,, list, ,, lower, ,, x, ), ;, if, (]
[., getPlus, (, ), :, node, ., getMinus, (, ), ;, recurseList, (, low, ,, list, ,, lower, ,, x]
[;, recurseList, (, low, ,, list, ,, lower, ,, x, ), ;, if, (, (, checkPoint, (, low, ,, loc]
[., getMinus, (, ), ;, recurseList, (, low, ,, list, ,, lower, ,, x, ), ;, if, (, (, checkPoint]
[;, if, (, (, checkPoint, (, low, ,, loc, ), ==, Location, ., INSIDE, ), &&, (, checkPoint, (, high]
[,, list, ,, lower, ,, x, ), ;, if, (, (, checkPoint, (, low, ,, loc, ), ==, Location, .]
[,, lower, ,, x, ), ;, if, (, (, checkPoint, (, low, ,, loc, ), ==, Location, ., INSIDE, )]
[,, x, ), ;, if, (, (, checkPoint, (, low, ,, loc, ), ==, Location, ., INSIDE, ), &&, (]
[), ;, if, (, (, checkPoint, (, low, ,, loc, ), ==, Location, ., INSIDE, ), &&, (, checkPoint, (]
[), {, x, =, list, ., remove, (, list, ., size, (, ), -, 1, ), ., getInf, (, )]
[&&, (, checkPoint, (, high, ,, loc, ), ==, Location, ., INSIDE, ), ), {, x, =, list, ., remove]
[), &&, (, checkPoint, (, high, ,, loc, ), ==, Location, ., INSIDE, ), ), {, x, =, list, .]
[==, Location, ., INSIDE, ), &&, (, checkPoint, (, high, ,, loc, ), ==, Location, ., INSIDE, ), ), {]
[,, loc, ), ==, Location, ., INSIDE, ), &&, (, checkPoint, (, high, ,, loc, ), ==, Location, ., INSIDE]
[), ==, Location, ., INSIDE, ), &&, (, checkPoint, (, high, ,, loc, ), ==, Location, ., INSIDE, ), )]
[), &&, (, checkPoint, (, high, ,, loc, ), ==, Location, ., INSIDE, ), ), {, x, =, list, .]
[., INSIDE, ), &&, (, checkPoint, (, high, ,, loc, ), ==, Location, ., INSIDE, ), ), {, x, =]
[), {, x, =, list, ., remove, (, list, ., size, (, ), -, 1, ), ., getInf, (, )]
[), ), {, x, =, list, ., remove, (, list, ., size, (, ), -, 1, ), ., getInf, (]
[==, Location, ., INSIDE, ), ), {, x, =, list, ., remove, (, list, ., size, (, ), -, 1]
[,, loc, ), ==, Location, ., INSIDE, ), ), {, x, =, list, ., remove, (, list, ., size, (]
[), ==, Location, ., INSIDE, ), ), {, x, =, list, ., remove, (, list, ., size, (, ), -]
[), ), {, x, =, list, ., remove, (, list, ., size, (, ), -, 1, ), ., getInf, (]
[., INSIDE, ), ), {, x, =, list, ., remove, (, list, ., size, (, ), -, 1, ), .]
[=, list, ., remove, (, list, ., size, (, ), -, 1, ), ., getInf, (, ), ;, }, recurseList]
[;, }, recurseList, (, high, ,, list, ,, x, ,, upper, ), ;, }, }, }]
[., getInf, (, ), ;, }, recurseList, (, high, ,, list, ,, x, ,, upper, ), ;, }, }, }]
[., remove, (, list, ., size, (, ), -, 1, ), ., getInf, (, ), ;, }, recurseList, (, high]
[), ., getInf, (, ), ;, }, recurseList, (, high, ,, list, ,, x, ,, upper, ), ;, }, }]
[-, 1, ), ., getInf, (, ), ;, }, recurseList, (, high, ,, list, ,, x, ,, upper, ), ;]
[., size, (, ), -, 1, ), ., getInf, (, ), ;, }, recurseList, (, high, ,, list, ,, x]
[), ., getInf, (, ), ;, }, recurseList, (, high, ,, list, ,, x, ,, upper, ), ;, }, }]
[;, }, }, }]
[,, list, ,, x, ,, upper, ), ;, }, }, }]
[,, x, ,, upper, ), ;, }, }, }]
[,, upper, ), ;, }, }, }]
[), ;, }, }, }]
