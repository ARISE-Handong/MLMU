[public, GaussIntegrator, (, double, [, ], points, ,, double, [, ], weights, ), throws, NonMonotonicSequenceException, ,, DimensionMismatchException, {, if, (]
[public, GaussIntegrator, (, double, [, ], points, ,, double, [, ], weights, ), throws, NonMonotonicSequenceException, ,, DimensionMismatchException, {, if, (]
[public, GaussIntegrator, (, double, [, ], points, ,, double, [, ], weights, ), throws, NonMonotonicSequenceException, ,, DimensionMismatchException, {, if, (]
[[, ], points, ,, double, [, ], weights, ), throws, NonMonotonicSequenceException, ,, DimensionMismatchException, {, if, (, points, ., length, !=]
[[, ], points, ,, double, [, ], weights, ), throws, NonMonotonicSequenceException, ,, DimensionMismatchException, {, if, (, points, ., length, !=]
[], weights, ), throws, NonMonotonicSequenceException, ,, DimensionMismatchException, {, if, (, points, ., length, !=, weights, ., length, ), {, throw]
[throws, NonMonotonicSequenceException, ,, DimensionMismatchException, {, if, (, points, ., length, !=, weights, ., length, ), {, throw, new, DimensionMismatchException, (]
[throws, NonMonotonicSequenceException, ,, DimensionMismatchException, {, if, (, points, ., length, !=, weights, ., length, ), {, throw, new, DimensionMismatchException, (]
[{, if, (, points, ., length, !=, weights, ., length, ), {, throw, new, DimensionMismatchException, (, points, ., length, ,]
[{, if, (, points, ., length, !=, weights, ., length, ), {, throw, new, DimensionMismatchException, (, points, ., length, ,]
[!=, weights, ., length, ), {, throw, new, DimensionMismatchException, (, points, ., length, ,, weights, ., length, ), ;, }]
[!=, weights, ., length, ), {, throw, new, DimensionMismatchException, (, points, ., length, ,, weights, ., length, ), ;, }]
[), {, throw, new, DimensionMismatchException, (, points, ., length, ,, weights, ., length, ), ;, }, MathArrays, ., checkOrder, (]
[throw, new, DimensionMismatchException, (, points, ., length, ,, weights, ., length, ), ;, }, MathArrays, ., checkOrder, (, points, ,]
[throw, new, DimensionMismatchException, (, points, ., length, ,, weights, ., length, ), ;, }, MathArrays, ., checkOrder, (, points, ,]
[throw, new, DimensionMismatchException, (, points, ., length, ,, weights, ., length, ), ;, }, MathArrays, ., checkOrder, (, points, ,]
[length, ,, weights, ., length, ), ;, }, MathArrays, ., checkOrder, (, points, ,, MathArrays, ., OrderDirection, ., INCREASING, ,]
[weights, ., length, ), ;, }, MathArrays, ., checkOrder, (, points, ,, MathArrays, ., OrderDirection, ., INCREASING, ,, true, ,]
[), ;, }, MathArrays, ., checkOrder, (, points, ,, MathArrays, ., OrderDirection, ., INCREASING, ,, true, ,, true, ), ;]
[), ;, }, MathArrays, ., checkOrder, (, points, ,, MathArrays, ., OrderDirection, ., INCREASING, ,, true, ,, true, ), ;]
[., checkOrder, (, points, ,, MathArrays, ., OrderDirection, ., INCREASING, ,, true, ,, true, ), ;, this, ., points, =]
[., checkOrder, (, points, ,, MathArrays, ., OrderDirection, ., INCREASING, ,, true, ,, true, ), ;, this, ., points, =]
[., OrderDirection, ., INCREASING, ,, true, ,, true, ), ;, this, ., points, =, points, ., clone, (, ), ;]
[., OrderDirection, ., INCREASING, ,, true, ,, true, ), ;, this, ., points, =, points, ., clone, (, ), ;]
[,, true, ,, true, ), ;, this, ., points, =, points, ., clone, (, ), ;, this, ., weights, =]
[,, true, ,, true, ), ;, this, ., points, =, points, ., clone, (, ), ;, this, ., weights, =]
[public, GaussIntegrator, (, Pair, <, double, [, ], ,, double, [, ], >, pointsAndWeights, ), throws, NonMonotonicSequenceException, {, this, (]
[public, GaussIntegrator, (, Pair, <, double, [, ], ,, double, [, ], >, pointsAndWeights, ), throws, NonMonotonicSequenceException, {, this, (]
[[, ], ,, double, [, ], >, pointsAndWeights, ), throws, NonMonotonicSequenceException, {, this, (, pointsAndWeights, ., getFirst, (, ), ,]
[[, ], ,, double, [, ], >, pointsAndWeights, ), throws, NonMonotonicSequenceException, {, this, (, pointsAndWeights, ., getFirst, (, ), ,]
[,, pointsAndWeights, ., getSecond, (, ), ), ;, }, public, double, integrate, (, UnivariateFunction, f, ), {, double, s, =]
[), ), ;, }, public, double, integrate, (, UnivariateFunction, f, ), {, double, s, =, 0, ;, double, c, =]
[(, UnivariateFunction, f, ), {, double, s, =, 0, ;, double, c, =, 0, ;, for, (, int, i, =]
[f, ), {, double, s, =, 0, ;, double, c, =, 0, ;, for, (, int, i, =, 0, ;]
[f, ), {, double, s, =, 0, ;, double, c, =, 0, ;, for, (, int, i, =, 0, ;]
[{, double, s, =, 0, ;, double, c, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[{, double, s, =, 0, ;, double, c, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[0, ;, double, c, =, 0, ;, for, (, int, i, =, 0, ;, i, <, points, ., length, ;]
[0, ;, double, c, =, 0, ;, for, (, int, i, =, 0, ;, i, <, points, ., length, ;]
[(, int, i, =, 0, ;, i, <, points, ., length, ;, i, ++, ), {, final, double, x, =]
[(, int, i, =, 0, ;, i, <, points, ., length, ;, i, ++, ), {, final, double, x, =]
[i, =, 0, ;, i, <, points, ., length, ;, i, ++, ), {, final, double, x, =, points, []
[., length, ;, i, ++, ), {, final, double, x, =, points, [, i, ], ;, final, double, w, =]
[., length, ;, i, ++, ), {, final, double, x, =, points, [, i, ], ;, final, double, w, =]
[;, i, ++, ), {, final, double, x, =, points, [, i, ], ;, final, double, w, =, weights, []
[x, =, points, [, i, ], ;, final, double, w, =, weights, [, i, ], ;, final, double, y, =]
[x, =, points, [, i, ], ;, final, double, w, =, weights, [, i, ], ;, final, double, y, =]
[x, =, points, [, i, ], ;, final, double, w, =, weights, [, i, ], ;, final, double, y, =]
[points, [, i, ], ;, final, double, w, =, weights, [, i, ], ;, final, double, y, =, w, *]
[points, [, i, ], ;, final, double, w, =, weights, [, i, ], ;, final, double, y, =, w, *]
[;, final, double, w, =, weights, [, i, ], ;, final, double, y, =, w, *, f, ., value, (]
[w, =, weights, [, i, ], ;, final, double, y, =, w, *, f, ., value, (, x, ), -]
[;, final, double, y, =, w, *, f, ., value, (, x, ), -, c, ;, final, double, t, =]
[;, final, double, y, =, w, *, f, ., value, (, x, ), -, c, ;, final, double, t, =]
[double, y, =, w, *, f, ., value, (, x, ), -, c, ;, final, double, t, =, s, +]
[=, w, *, f, ., value, (, x, ), -, c, ;, final, double, t, =, s, +, y, ;]
[*, f, ., value, (, x, ), -, c, ;, final, double, t, =, s, +, y, ;, c, =]
[*, f, ., value, (, x, ), -, c, ;, final, double, t, =, s, +, y, ;, c, =]
[f, ., value, (, x, ), -, c, ;, final, double, t, =, s, +, y, ;, c, =, (]
[f, ., value, (, x, ), -, c, ;, final, double, t, =, s, +, y, ;, c, =, (]
[value, (, x, ), -, c, ;, final, double, t, =, s, +, y, ;, c, =, (, t, -]
[), -, c, ;, final, double, t, =, s, +, y, ;, c, =, (, t, -, s, ), -]
[c, ;, final, double, t, =, s, +, y, ;, c, =, (, t, -, s, ), -, y, ;]
[final, double, t, =, s, +, y, ;, c, =, (, t, -, s, ), -, y, ;, s, =]
[s, +, y, ;, c, =, (, t, -, s, ), -, y, ;, s, =, t, ;, }, return]
[), -, y, ;, s, =, t, ;, }, return, s, ;, }, public, int, getNumberOfPoints, (, ), {, return]
[), -, y, ;, s, =, t, ;, }, return, s, ;, }, public, int, getNumberOfPoints, (, ), {, return]
[int, getNumberOfPoints, (, ), {, return, points, ., length, ;, }, public, double, getPoint, (, int, index, ), {, return]
[int, getNumberOfPoints, (, ), {, return, points, ., length, ;, }, public, double, getPoint, (, int, index, ), {, return]
[(, ), {, return, points, ., length, ;, }, public, double, getPoint, (, int, index, ), {, return, points, []
[int, index, ), {, return, points, [, index, ], ;, }, public, double, getWeight, (, int, index, ), {, return]
[int, index, ), {, return, points, [, index, ], ;, }, public, double, getWeight, (, int, index, ), {, return]
[), {, return, points, [, index, ], ;, }, public, double, getWeight, (, int, index, ), {, return, weights, []
