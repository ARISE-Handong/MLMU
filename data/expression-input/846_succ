[;, InlineVariables, (, AbstractCompiler, compiler, ,, Mode, mode, ,, boolean, inlineAllStrings, ), {, this, ., compiler, =, compiler, ;, this]
[=, compiler, ;, this, ., mode, =, mode, ;, this, ., inlineAllStrings, =, inlineAllStrings, ;, }, @, Override, public, void]
[., compiler, =, compiler, ;, this, ., mode, =, mode, ;, this, ., inlineAllStrings, =, inlineAllStrings, ;, }, @, Override]
[;, this, ., mode, =, mode, ;, this, ., inlineAllStrings, =, inlineAllStrings, ;, }, @, Override, public, void, process, (]
[=, mode, ;, this, ., inlineAllStrings, =, inlineAllStrings, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., mode, =, mode, ;, this, ., inlineAllStrings, =, inlineAllStrings, ;, }, @, Override, public, void, process, (, Node, externs]
[;, this, ., inlineAllStrings, =, inlineAllStrings, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[=, inlineAllStrings, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =]
[., inlineAllStrings, =, inlineAllStrings, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback]
[;, callback, ., process, (, externs, ,, root, ), ;, }, private, Predicate, <, Var, >, getFilterForMode, (, ), {]
[,, new, InliningBehavior, (, ), ,, getFilterForMode, (, ), ), ;, callback, ., process, (, externs, ,, root, ), ;]
[,, getFilterForMode, (, ), ), ;, callback, ., process, (, externs, ,, root, ), ;, }, private, Predicate, <, Var]
[), ;, callback, ., process, (, externs, ,, root, ), ;, }, private, Predicate, <, Var, >, getFilterForMode, (, )]
[;, }, private, Predicate, <, Var, >, getFilterForMode, (, ), {, switch, (, mode, ), {, case, ALL, :, return]
[., process, (, externs, ,, root, ), ;, }, private, Predicate, <, Var, >, getFilterForMode, (, ), {, switch, (]
[,, root, ), ;, }, private, Predicate, <, Var, >, getFilterForMode, (, ), {, switch, (, mode, ), {, case]
[), ;, }, private, Predicate, <, Var, >, getFilterForMode, (, ), {, switch, (, mode, ), {, case, ALL, :]
[), {, case, ALL, :, return, Predicates, ., <, Var, >, alwaysTrue, (, ), ;, case, LOCALS_ONLY, :, return, new]
[:, return, Predicates, ., <, Var, >, alwaysTrue, (, ), ;, case, LOCALS_ONLY, :, return, new, IdentifyLocals, (, ), ;]
[;, case, LOCALS_ONLY, :, return, new, IdentifyLocals, (, ), ;, case, CONSTANTS_ONLY, :, return, new, IdentifyConstants, (, ), ;, default]
[., <, Var, >, alwaysTrue, (, ), ;, case, LOCALS_ONLY, :, return, new, IdentifyLocals, (, ), ;, case, CONSTANTS_ONLY, :]
[:, return, new, IdentifyLocals, (, ), ;, case, CONSTANTS_ONLY, :, return, new, IdentifyConstants, (, ), ;, default, :, throw, new]
[;, case, CONSTANTS_ONLY, :, return, new, IdentifyConstants, (, ), ;, default, :, throw, new, IllegalStateException, (, ), ;, }, }]
[:, return, new, IdentifyConstants, (, ), ;, default, :, throw, new, IllegalStateException, (, ), ;, }, }, private, class, IdentifyConstants]
[;, default, :, throw, new, IllegalStateException, (, ), ;, }, }, private, class, IdentifyConstants, implements, Predicate, <, Var, >, {]
[;, }, }, private, class, IdentifyConstants, implements, Predicate, <, Var, >, {, @, Override, public, boolean, apply, (, Var, var]
[;, }, }, private, class, IdentifyLocals, implements, Predicate, <, Var, >, {, @, Override, public, boolean, apply, (, Var, var]
[., isConst, (, ), ;, }, }, private, class, IdentifyLocals, implements, Predicate, <, Var, >, {, @, Override, public, boolean]
[;, }, }, private, static, class, AliasCandidate, {, private, final, Var, alias, ;, private, final, ReferenceCollection, refInfo, ;, AliasCandidate, (]
[., isLocal, (, ), ;, }, }, private, static, class, AliasCandidate, {, private, final, Var, alias, ;, private, final, ReferenceCollection]
[., scope, ., isLocal, (, ), ;, }, }, private, static, class, AliasCandidate, {, private, final, Var, alias, ;, private]
[=, alias, ;, this, ., refInfo, =, refInfo, ;, }, }, private, class, InliningBehavior, implements, Behavior, {, private, final, Set]
[., alias, =, alias, ;, this, ., refInfo, =, refInfo, ;, }, }, private, class, InliningBehavior, implements, Behavior, {, private]
[;, this, ., refInfo, =, refInfo, ;, }, }, private, class, InliningBehavior, implements, Behavior, {, private, final, Set, <, Var]
[=, refInfo, ;, }, }, private, class, InliningBehavior, implements, Behavior, {, private, final, Set, <, Var, >, staleVars, =, Sets]
[., refInfo, =, refInfo, ;, }, }, private, class, InliningBehavior, implements, Behavior, {, private, final, Set, <, Var, >, staleVars]
[;, }, }, private, class, InliningBehavior, implements, Behavior, {, private, final, Set, <, Var, >, staleVars, =, Sets, ., newHashSet]
[;, final, Map, <, Node, ,, AliasCandidate, >, aliasCandidates, =, Maps, ., newHashMap, (, ), ;, @, Override, public, void]
[., newHashSet, (, ), ;, final, Map, <, Node, ,, AliasCandidate, >, aliasCandidates, =, Maps, ., newHashMap, (, ), ;]
[;, @, Override, public, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, collectAliasCandidates, (, t, ,, referenceMap, )]
[., newHashMap, (, ), ;, @, Override, public, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, collectAliasCandidates, (]
[;, doInlinesForScope, (, t, ,, referenceMap, ), ;, }, private, void, collectAliasCandidates, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {]
[,, referenceMap, ), ;, doInlinesForScope, (, t, ,, referenceMap, ), ;, }, private, void, collectAliasCandidates, (, NodeTraversal, t, ,, ReferenceMap]
[), ;, doInlinesForScope, (, t, ,, referenceMap, ), ;, }, private, void, collectAliasCandidates, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, )]
[;, }, private, void, collectAliasCandidates, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, if, (, mode, !=, Mode, ., CONSTANTS_ONLY]
[,, referenceMap, ), ;, }, private, void, collectAliasCandidates, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, if, (, mode, !=]
[), ;, }, private, void, collectAliasCandidates, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, if, (, mode, !=, Mode, .]
[), {, for, (, Iterator, <, Var, >, it, =, t, ., getScope, (, ), ., getVars, (, ), ;]
[!=, Mode, ., CONSTANTS_ONLY, ), {, for, (, Iterator, <, Var, >, it, =, t, ., getScope, (, ), .]
[), {, for, (, Iterator, <, Var, >, it, =, t, ., getScope, (, ), ., getVars, (, ), ;]
[., CONSTANTS_ONLY, ), {, for, (, Iterator, <, Var, >, it, =, t, ., getScope, (, ), ., getVars, (]
[;, it, ., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, ReferenceCollection, referenceInfo]
[., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (]
[., getScope, (, ), ., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =]
[;, ), {, Var, v, =, it, ., next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v]
[., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap]
[;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (, referenceInfo, !=, null, &&, referenceInfo, ., references]
[., next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (, referenceInfo, !=, null]
[;, if, (, referenceInfo, !=, null, &&, referenceInfo, ., references, ., size, (, ), >=, 2, &&, referenceInfo, ., isWellDefined]
[., getReferences, (, v, ), ;, if, (, referenceInfo, !=, null, &&, referenceInfo, ., references, ., size, (, ), >=]
[), ;, if, (, referenceInfo, !=, null, &&, referenceInfo, ., references, ., size, (, ), >=, 2, &&, referenceInfo, .]
[), {, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, Node, value, =, init, ., getAssignedValue, (, ), ;]
[&&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, Node, value, =]
[&&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {, Reference, init, =, referenceInfo, ., getInitializingReference]
[&&, referenceInfo, ., references, ., size, (, ), >=, 2, &&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime]
[!=, null, &&, referenceInfo, ., references, ., size, (, ), >=, 2, &&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo]
[&&, referenceInfo, ., references, ., size, (, ), >=, 2, &&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime]
[&&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {, Reference, init, =, referenceInfo, ., getInitializingReference]
[>=, 2, &&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {, Reference, init, =, referenceInfo]
[., size, (, ), >=, 2, &&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {]
[., references, ., size, (, ), >=, 2, &&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime, (, )]
[&&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {, Reference, init, =, referenceInfo, ., getInitializingReference]
[&&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, Node, value, =]
[., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {, Reference, init, =, referenceInfo, ., getInitializingReference, (, )]
[), {, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, Node, value, =, init, ., getAssignedValue, (, ), ;]
[., isAssignedOnceInLifetime, (, ), ), {, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, Node, value, =, init, .]
[;, Node, value, =, init, ., getAssignedValue, (, ), ;, if, (, value, !=, null, &&, value, ., isName, (]
[., getInitializingReference, (, ), ;, Node, value, =, init, ., getAssignedValue, (, ), ;, if, (, value, !=, null, &&]
[;, if, (, value, !=, null, &&, value, ., isName, (, ), ), {, aliasCandidates, ., put, (, value, ,]
[., getAssignedValue, (, ), ;, if, (, value, !=, null, &&, value, ., isName, (, ), ), {, aliasCandidates, .]
[), {, aliasCandidates, ., put, (, value, ,, new, AliasCandidate, (, v, ,, referenceInfo, ), ), ;, }, }, }]
[&&, value, ., isName, (, ), ), {, aliasCandidates, ., put, (, value, ,, new, AliasCandidate, (, v, ,, referenceInfo]
[!=, null, &&, value, ., isName, (, ), ), {, aliasCandidates, ., put, (, value, ,, new, AliasCandidate, (, v]
[&&, value, ., isName, (, ), ), {, aliasCandidates, ., put, (, value, ,, new, AliasCandidate, (, v, ,, referenceInfo]
[), {, aliasCandidates, ., put, (, value, ,, new, AliasCandidate, (, v, ,, referenceInfo, ), ), ;, }, }, }]
[., isName, (, ), ), {, aliasCandidates, ., put, (, value, ,, new, AliasCandidate, (, v, ,, referenceInfo, ), )]
[;, }, }, }, }, }, private, void, doInlinesForScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, boolean, maybeModifiedArguments, =]
[., put, (, value, ,, new, AliasCandidate, (, v, ,, referenceInfo, ), ), ;, }, }, }, }, }, private]
[,, new, AliasCandidate, (, v, ,, referenceInfo, ), ), ;, }, }, }, }, }, private, void, doInlinesForScope, (, NodeTraversal]
[), ;, }, }, }, }, }, private, void, doInlinesForScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, boolean, maybeModifiedArguments]
[,, referenceInfo, ), ), ;, }, }, }, }, }, private, void, doInlinesForScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, )]
[), ), ;, }, }, }, }, }, private, void, doInlinesForScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, boolean]
[;, for, (, Iterator, <, Var, >, it, =, t, ., getScope, (, ), ., getVars, (, ), ;, it]
[,, referenceMap, ), ;, for, (, Iterator, <, Var, >, it, =, t, ., getScope, (, ), ., getVars, (]
[., getScope, (, ), ,, referenceMap, ), ;, for, (, Iterator, <, Var, >, it, =, t, ., getScope, (]
[), ;, for, (, Iterator, <, Var, >, it, =, t, ., getScope, (, ), ., getVars, (, ), ;]
[;, it, ., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, ReferenceCollection, referenceInfo]
[., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (]
[., getScope, (, ), ., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =]
[;, ), {, Var, v, =, it, ., next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v]
[., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap]
[;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (, referenceInfo, ==, null, ||, isVarInlineForbidden, (, v]
[., next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (, referenceInfo, ==, null]
[;, if, (, referenceInfo, ==, null, ||, isVarInlineForbidden, (, v, ), ), {, continue, ;, }, else, if, (, isInlineableDeclaredConstant]
[., getReferences, (, v, ), ;, if, (, referenceInfo, ==, null, ||, isVarInlineForbidden, (, v, ), ), {, continue, ;]
[), ;, if, (, referenceInfo, ==, null, ||, isVarInlineForbidden, (, v, ), ), {, continue, ;, }, else, if, (]
[), {, continue, ;, }, else, if, (, isInlineableDeclaredConstant, (, v, ,, referenceInfo, ), ), {, Reference, init, =, referenceInfo]
[||, isVarInlineForbidden, (, v, ), ), {, continue, ;, }, else, if, (, isInlineableDeclaredConstant, (, v, ,, referenceInfo, ), )]
[==, null, ||, isVarInlineForbidden, (, v, ), ), {, continue, ;, }, else, if, (, isInlineableDeclaredConstant, (, v, ,, referenceInfo]
[||, isVarInlineForbidden, (, v, ), ), {, continue, ;, }, else, if, (, isInlineableDeclaredConstant, (, v, ,, referenceInfo, ), )]
[), {, continue, ;, }, else, if, (, isInlineableDeclaredConstant, (, v, ,, referenceInfo, ), ), {, Reference, init, =, referenceInfo]
[), ), {, continue, ;, }, else, if, (, isInlineableDeclaredConstant, (, v, ,, referenceInfo, ), ), {, Reference, init, =]
[), {, Reference, init, =, referenceInfo, ., getInitializingReferenceForConstants, (, ), ;, Node, value, =, init, ., getAssignedValue, (, ), ;]
[,, referenceInfo, ), ), {, Reference, init, =, referenceInfo, ., getInitializingReferenceForConstants, (, ), ;, Node, value, =, init, ., getAssignedValue]
[), ), {, Reference, init, =, referenceInfo, ., getInitializingReferenceForConstants, (, ), ;, Node, value, =, init, ., getAssignedValue, (, )]
[;, Node, value, =, init, ., getAssignedValue, (, ), ;, inlineDeclaredConstant, (, v, ,, value, ,, referenceInfo, ., references, )]
[., getInitializingReferenceForConstants, (, ), ;, Node, value, =, init, ., getAssignedValue, (, ), ;, inlineDeclaredConstant, (, v, ,, value, ,]
[;, inlineDeclaredConstant, (, v, ,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }]
[., getAssignedValue, (, ), ;, inlineDeclaredConstant, (, v, ,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (]
[;, staleVars, ., add, (, v, ), ;, }, else, if, (, mode, ==, Mode, ., CONSTANTS_ONLY, ), {, continue]
[,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }, else, if, (, mode]
[,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }, else, if, (, mode, ==, Mode]
[), ;, staleVars, ., add, (, v, ), ;, }, else, if, (, mode, ==, Mode, ., CONSTANTS_ONLY, ), {]
[., references, ), ;, staleVars, ., add, (, v, ), ;, }, else, if, (, mode, ==, Mode, ., CONSTANTS_ONLY]
[;, }, else, if, (, mode, ==, Mode, ., CONSTANTS_ONLY, ), {, continue, ;, }, else, {, inlineNonConstants, (, v]
[., add, (, v, ), ;, }, else, if, (, mode, ==, Mode, ., CONSTANTS_ONLY, ), {, continue, ;, }]
[), ;, }, else, if, (, mode, ==, Mode, ., CONSTANTS_ONLY, ), {, continue, ;, }, else, {, inlineNonConstants, (]
[), {, continue, ;, }, else, {, inlineNonConstants, (, v, ,, referenceInfo, ,, maybeModifiedArguments, ), ;, }, }, }, private]
[==, Mode, ., CONSTANTS_ONLY, ), {, continue, ;, }, else, {, inlineNonConstants, (, v, ,, referenceInfo, ,, maybeModifiedArguments, ), ;]
[), {, continue, ;, }, else, {, inlineNonConstants, (, v, ,, referenceInfo, ,, maybeModifiedArguments, ), ;, }, }, }, private]
[., CONSTANTS_ONLY, ), {, continue, ;, }, else, {, inlineNonConstants, (, v, ,, referenceInfo, ,, maybeModifiedArguments, ), ;, }, }]
[;, }, }, }, private, boolean, maybeEscapedOrModifiedArguments, (, Scope, scope, ,, ReferenceMap, referenceMap, ), {, if, (, scope, ., isLocal]
[,, referenceInfo, ,, maybeModifiedArguments, ), ;, }, }, }, private, boolean, maybeEscapedOrModifiedArguments, (, Scope, scope, ,, ReferenceMap, referenceMap, ), {]
[,, maybeModifiedArguments, ), ;, }, }, }, private, boolean, maybeEscapedOrModifiedArguments, (, Scope, scope, ,, ReferenceMap, referenceMap, ), {, if, (]
[), ;, }, }, }, private, boolean, maybeEscapedOrModifiedArguments, (, Scope, scope, ,, ReferenceMap, referenceMap, ), {, if, (, scope, .]
[), {, Var, arguments, =, scope, ., getArgumentsVar, (, ), ;, ReferenceCollection, refs, =, referenceMap, ., getReferences, (, arguments, )]
[., isLocal, (, ), ), {, Var, arguments, =, scope, ., getArgumentsVar, (, ), ;, ReferenceCollection, refs, =, referenceMap, .]
[;, ReferenceCollection, refs, =, referenceMap, ., getReferences, (, arguments, ), ;, if, (, refs, !=, null, &&, !, refs, .]
[., getArgumentsVar, (, ), ;, ReferenceCollection, refs, =, referenceMap, ., getReferences, (, arguments, ), ;, if, (, refs, !=, null]
[;, if, (, refs, !=, null, &&, !, refs, ., references, ., isEmpty, (, ), ), {, for, (, Reference]
[., getReferences, (, arguments, ), ;, if, (, refs, !=, null, &&, !, refs, ., references, ., isEmpty, (, )]
[), ;, if, (, refs, !=, null, &&, !, refs, ., references, ., isEmpty, (, ), ), {, for, (]
[), {, for, (, Reference, ref, :, refs, ., references, ), {, Node, refNode, =, ref, ., getNode, (, )]
[&&, !, refs, ., references, ., isEmpty, (, ), ), {, for, (, Reference, ref, :, refs, ., references, )]
[!=, null, &&, !, refs, ., references, ., isEmpty, (, ), ), {, for, (, Reference, ref, :, refs, .]
[&&, !, refs, ., references, ., isEmpty, (, ), ), {, for, (, Reference, ref, :, refs, ., references, )]
[), {, for, (, Reference, ref, :, refs, ., references, ), {, Node, refNode, =, ref, ., getNode, (, )]
[), {, for, (, Reference, ref, :, refs, ., references, ), {, Node, refNode, =, ref, ., getNode, (, )]
[., isEmpty, (, ), ), {, for, (, Reference, ref, :, refs, ., references, ), {, Node, refNode, =, ref]
[., references, ., isEmpty, (, ), ), {, for, (, Reference, ref, :, refs, ., references, ), {, Node, refNode]
[), {, Node, refNode, =, ref, ., getNode, (, ), ;, Node, refParent, =, ref, ., getParent, (, ), ;]
[., references, ), {, Node, refNode, =, ref, ., getNode, (, ), ;, Node, refParent, =, ref, ., getParent, (]
[;, Node, refParent, =, ref, ., getParent, (, ), ;, if, (, !, (, NodeUtil, ., isGet, (, refParent, )]
[., getNode, (, ), ;, Node, refParent, =, ref, ., getParent, (, ), ;, if, (, !, (, NodeUtil, .]
[;, if, (, !, (, NodeUtil, ., isGet, (, refParent, ), &&, refNode, ==, ref, ., getParent, (, ), .]
[., getParent, (, ), ;, if, (, !, (, NodeUtil, ., isGet, (, refParent, ), &&, refNode, ==, ref, .]
[), {, return, true, ;, }, }, }, }, return, false, ;, }, private, boolean, isLValue, (, Node, n, )]
[), {, return, true, ;, }, }, }, }, return, false, ;, }, private, boolean, isLValue, (, Node, n, )]
[), ), {, return, true, ;, }, }, }, }, return, false, ;, }, private, boolean, isLValue, (, Node, n]
[&&, !, isLValue, (, refParent, ), ), ), {, return, true, ;, }, }, }, }, return, false, ;, }]
[&&, refNode, ==, ref, ., getParent, (, ), ., getFirstChild, (, ), &&, !, isLValue, (, refParent, ), ), )]
[., isGet, (, refParent, ), &&, refNode, ==, ref, ., getParent, (, ), ., getFirstChild, (, ), &&, !, isLValue]
[), &&, refNode, ==, ref, ., getParent, (, ), ., getFirstChild, (, ), &&, !, isLValue, (, refParent, ), )]
[&&, !, isLValue, (, refParent, ), ), ), {, return, true, ;, }, }, }, }, return, false, ;, }]
[==, ref, ., getParent, (, ), ., getFirstChild, (, ), &&, !, isLValue, (, refParent, ), ), ), {, return]
[&&, !, isLValue, (, refParent, ), ), ), {, return, true, ;, }, }, }, }, return, false, ;, }]
[., getFirstChild, (, ), &&, !, isLValue, (, refParent, ), ), ), {, return, true, ;, }, }, }, }]
[., getParent, (, ), ., getFirstChild, (, ), &&, !, isLValue, (, refParent, ), ), ), {, return, true, ;]
[), ), {, return, true, ;, }, }, }, }, return, false, ;, }, private, boolean, isLValue, (, Node, n]
[), ), {, return, true, ;, }, }, }, }, return, false, ;, }, private, boolean, isLValue, (, Node, n]
[), ), ), {, return, true, ;, }, }, }, }, return, false, ;, }, private, boolean, isLValue, (, Node]
[;, }, }, }, }, return, false, ;, }, private, boolean, isLValue, (, Node, n, ), {, Node, parent, =]
[;, }, private, boolean, isLValue, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, return]
[;, return, (, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||, (, NodeUtil, ., isAssignmentOp, (]
[., getParent, (, ), ;, return, (, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||, (]
[;, }, private, void, inlineNonConstants, (, Var, v, ,, ReferenceCollection, referenceInfo, ,, boolean, maybeModifiedArguments, ), {, int, refCount, =, referenceInfo]
[), ;, }, private, void, inlineNonConstants, (, Var, v, ,, ReferenceCollection, referenceInfo, ,, boolean, maybeModifiedArguments, ), {, int, refCount, =]
[||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ), ;, }]
[||, parent, ., isDec, (, ), ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, )]
[., isInc, (, ), ||, parent, ., isDec, (, ), ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent]
[||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ), ;, }]
[., isDec, (, ), ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n]
[), ;, }, private, void, inlineNonConstants, (, Var, v, ,, ReferenceCollection, referenceInfo, ,, boolean, maybeModifiedArguments, ), {, int, refCount, =]
[), ), ;, }, private, void, inlineNonConstants, (, Var, v, ,, ReferenceCollection, referenceInfo, ,, boolean, maybeModifiedArguments, ), {, int, refCount]
[&&, parent, ., getFirstChild, (, ), ==, n, ), ), ;, }, private, void, inlineNonConstants, (, Var, v, ,, ReferenceCollection]
[., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ), ;, }, private, void, inlineNonConstants]
[), &&, parent, ., getFirstChild, (, ), ==, n, ), ), ;, }, private, void, inlineNonConstants, (, Var, v, ,]
[), ), ;, }, private, void, inlineNonConstants, (, Var, v, ,, ReferenceCollection, referenceInfo, ,, boolean, maybeModifiedArguments, ), {, int, refCount]
[==, n, ), ), ;, }, private, void, inlineNonConstants, (, Var, v, ,, ReferenceCollection, referenceInfo, ,, boolean, maybeModifiedArguments, ), {]
[., getFirstChild, (, ), ==, n, ), ), ;, }, private, void, inlineNonConstants, (, Var, v, ,, ReferenceCollection, referenceInfo, ,]
[), ), ;, }, private, void, inlineNonConstants, (, Var, v, ,, ReferenceCollection, referenceInfo, ,, boolean, maybeModifiedArguments, ), {, int, refCount]
[;, Reference, declaration, =, referenceInfo, ., references, ., get, (, 0, ), ;, Reference, init, =, referenceInfo, ., getInitializingReference, (]
[., size, (, ), ;, Reference, declaration, =, referenceInfo, ., references, ., get, (, 0, ), ;, Reference, init, =]
[., references, ., size, (, ), ;, Reference, declaration, =, referenceInfo, ., references, ., get, (, 0, ), ;, Reference]
[;, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, int, firstRefAfterInit, =, (, declaration, ==, init, ), ?, 2]
[., get, (, 0, ), ;, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, int, firstRefAfterInit, =, (, declaration]
[., references, ., get, (, 0, ), ;, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, int, firstRefAfterInit, =]
[), ;, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, int, firstRefAfterInit, =, (, declaration, ==, init, ), ?]
[;, int, firstRefAfterInit, =, (, declaration, ==, init, ), ?, 2, :, 3, ;, if, (, refCount, >, 1, &&]
[., getInitializingReference, (, ), ;, int, firstRefAfterInit, =, (, declaration, ==, init, ), ?, 2, :, 3, ;, if, (]
[;, if, (, refCount, >, 1, &&, isImmutableAndWellDefinedVariable, (, v, ,, referenceInfo, ), ), {, Node, value, ;, if, (]
[?, 2, :, 3, ;, if, (, refCount, >, 1, &&, isImmutableAndWellDefinedVariable, (, v, ,, referenceInfo, ), ), {, Node]
[), ?, 2, :, 3, ;, if, (, refCount, >, 1, &&, isImmutableAndWellDefinedVariable, (, v, ,, referenceInfo, ), ), {]
[==, init, ), ?, 2, :, 3, ;, if, (, refCount, >, 1, &&, isImmutableAndWellDefinedVariable, (, v, ,, referenceInfo, )]
[), ?, 2, :, 3, ;, if, (, refCount, >, 1, &&, isImmutableAndWellDefinedVariable, (, v, ,, referenceInfo, ), ), {]
[:, 3, ;, if, (, refCount, >, 1, &&, isImmutableAndWellDefinedVariable, (, v, ,, referenceInfo, ), ), {, Node, value, ;]
[;, if, (, refCount, >, 1, &&, isImmutableAndWellDefinedVariable, (, v, ,, referenceInfo, ), ), {, Node, value, ;, if, (]
[), {, Node, value, ;, if, (, init, !=, null, ), {, value, =, init, ., getAssignedValue, (, ), ;]
[&&, isImmutableAndWellDefinedVariable, (, v, ,, referenceInfo, ), ), {, Node, value, ;, if, (, init, !=, null, ), {, value]
[>, 1, &&, isImmutableAndWellDefinedVariable, (, v, ,, referenceInfo, ), ), {, Node, value, ;, if, (, init, !=, null, )]
[&&, isImmutableAndWellDefinedVariable, (, v, ,, referenceInfo, ), ), {, Node, value, ;, if, (, init, !=, null, ), {, value]
[), {, Node, value, ;, if, (, init, !=, null, ), {, value, =, init, ., getAssignedValue, (, ), ;]
[,, referenceInfo, ), ), {, Node, value, ;, if, (, init, !=, null, ), {, value, =, init, ., getAssignedValue]
[), ), {, Node, value, ;, if, (, init, !=, null, ), {, value, =, init, ., getAssignedValue, (, )]
[), {, value, =, init, ., getAssignedValue, (, ), ;, }, else, {, Node, srcLocation, =, declaration, ., getNode, (]
[!=, null, ), {, value, =, init, ., getAssignedValue, (, ), ;, }, else, {, Node, srcLocation, =, declaration, .]
[), {, value, =, init, ., getAssignedValue, (, ), ;, }, else, {, Node, srcLocation, =, declaration, ., getNode, (]
[=, init, ., getAssignedValue, (, ), ;, }, else, {, Node, srcLocation, =, declaration, ., getNode, (, ), ;, value]
[;, }, else, {, Node, srcLocation, =, declaration, ., getNode, (, ), ;, value, =, NodeUtil, ., newUndefinedNode, (, srcLocation]
[., getAssignedValue, (, ), ;, }, else, {, Node, srcLocation, =, declaration, ., getNode, (, ), ;, value, =, NodeUtil]
[;, value, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (]
[., getNode, (, ), ;, value, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, Preconditions, ., checkNotNull, (, value]
[=, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, v, ,]
[;, }, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, v, ,, value, ,, referenceInfo, ., references, ), ;]
[., newUndefinedNode, (, srcLocation, ), ;, }, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, v, ,, value, ,]
[), ;, }, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, v, ,, value, ,, referenceInfo, ., references, )]
[;, inlineWellDefinedVariable, (, v, ,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }]
[., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, v, ,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add]
[), ;, inlineWellDefinedVariable, (, v, ,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;]
[;, staleVars, ., add, (, v, ), ;, }, else, if, (, refCount, ==, firstRefAfterInit, ), {, Reference, reference, =]
[,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }, else, if, (, refCount]
[,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }, else, if, (, refCount, ==, firstRefAfterInit]
[), ;, staleVars, ., add, (, v, ), ;, }, else, if, (, refCount, ==, firstRefAfterInit, ), {, Reference, reference]
[., references, ), ;, staleVars, ., add, (, v, ), ;, }, else, if, (, refCount, ==, firstRefAfterInit, ), {]
[;, }, else, if, (, refCount, ==, firstRefAfterInit, ), {, Reference, reference, =, referenceInfo, ., references, ., get, (, firstRefAfterInit]
[., add, (, v, ), ;, }, else, if, (, refCount, ==, firstRefAfterInit, ), {, Reference, reference, =, referenceInfo, .]
[), ;, }, else, if, (, refCount, ==, firstRefAfterInit, ), {, Reference, reference, =, referenceInfo, ., references, ., get, (]
[), {, Reference, reference, =, referenceInfo, ., references, ., get, (, firstRefAfterInit, -, 1, ), ;, if, (, canInline, (]
[==, firstRefAfterInit, ), {, Reference, reference, =, referenceInfo, ., references, ., get, (, firstRefAfterInit, -, 1, ), ;, if, (]
[), {, Reference, reference, =, referenceInfo, ., references, ., get, (, firstRefAfterInit, -, 1, ), ;, if, (, canInline, (]
[;, if, (, canInline, (, declaration, ,, init, ,, reference, ), ), {, inline, (, v, ,, declaration, ,, init]
[., get, (, firstRefAfterInit, -, 1, ), ;, if, (, canInline, (, declaration, ,, init, ,, reference, ), ), {]
[., references, ., get, (, firstRefAfterInit, -, 1, ), ;, if, (, canInline, (, declaration, ,, init, ,, reference, )]
[), ;, if, (, canInline, (, declaration, ,, init, ,, reference, ), ), {, inline, (, v, ,, declaration, ,]
[-, 1, ), ;, if, (, canInline, (, declaration, ,, init, ,, reference, ), ), {, inline, (, v, ,]
[), ;, if, (, canInline, (, declaration, ,, init, ,, reference, ), ), {, inline, (, v, ,, declaration, ,]
[), {, inline, (, v, ,, declaration, ,, init, ,, reference, ), ;, staleVars, ., add, (, v, ), ;]
[,, init, ,, reference, ), ), {, inline, (, v, ,, declaration, ,, init, ,, reference, ), ;, staleVars, .]
[,, reference, ), ), {, inline, (, v, ,, declaration, ,, init, ,, reference, ), ;, staleVars, ., add, (]
[), ), {, inline, (, v, ,, declaration, ,, init, ,, reference, ), ;, staleVars, ., add, (, v, )]
[;, staleVars, ., add, (, v, ), ;, }, }, else, if, (, declaration, !=, init, &&, refCount, ==, 2]
[,, declaration, ,, init, ,, reference, ), ;, staleVars, ., add, (, v, ), ;, }, }, else, if, (]
[,, init, ,, reference, ), ;, staleVars, ., add, (, v, ), ;, }, }, else, if, (, declaration, !=]
[,, reference, ), ;, staleVars, ., add, (, v, ), ;, }, }, else, if, (, declaration, !=, init, &&]
[), ;, staleVars, ., add, (, v, ), ;, }, }, else, if, (, declaration, !=, init, &&, refCount, ==]
[;, }, }, else, if, (, declaration, !=, init, &&, refCount, ==, 2, ), {, if, (, isValidDeclaration, (, declaration]
[., add, (, v, ), ;, }, }, else, if, (, declaration, !=, init, &&, refCount, ==, 2, ), {]
[), ;, }, }, else, if, (, declaration, !=, init, &&, refCount, ==, 2, ), {, if, (, isValidDeclaration, (]
[), {, if, (, isValidDeclaration, (, declaration, ), &&, isValidInitialization, (, init, ), ), {, Node, value, =, init, .]
[&&, refCount, ==, 2, ), {, if, (, isValidDeclaration, (, declaration, ), &&, isValidInitialization, (, init, ), ), {, Node]
[!=, init, &&, refCount, ==, 2, ), {, if, (, isValidDeclaration, (, declaration, ), &&, isValidInitialization, (, init, ), )]
[&&, refCount, ==, 2, ), {, if, (, isValidDeclaration, (, declaration, ), &&, isValidInitialization, (, init, ), ), {, Node]
[), {, if, (, isValidDeclaration, (, declaration, ), &&, isValidInitialization, (, init, ), ), {, Node, value, =, init, .]
[==, 2, ), {, if, (, isValidDeclaration, (, declaration, ), &&, isValidInitialization, (, init, ), ), {, Node, value, =]
[), {, if, (, isValidDeclaration, (, declaration, ), &&, isValidInitialization, (, init, ), ), {, Node, value, =, init, .]
[), {, Node, value, =, init, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (]
[&&, isValidInitialization, (, init, ), ), {, Node, value, =, init, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (]
[), &&, isValidInitialization, (, init, ), ), {, Node, value, =, init, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull]
[), {, Node, value, =, init, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (]
[), ), {, Node, value, =, init, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable]
[;, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, v, ,, value, ,, referenceInfo, ., references, ), ;, staleVars]
[., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, v, ,, value, ,, referenceInfo, .]
[;, inlineWellDefinedVariable, (, v, ,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }]
[., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, v, ,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add]
[), ;, inlineWellDefinedVariable, (, v, ,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;]
[;, staleVars, ., add, (, v, ), ;, }, }, if, (, !, maybeModifiedArguments, &&, !, staleVars, ., contains, (]
[,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }, }, if, (, !]
[,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }, }, if, (, !, maybeModifiedArguments, &&]
[), ;, staleVars, ., add, (, v, ), ;, }, }, if, (, !, maybeModifiedArguments, &&, !, staleVars, ., contains]
[., references, ), ;, staleVars, ., add, (, v, ), ;, }, }, if, (, !, maybeModifiedArguments, &&, !, staleVars]
[;, }, }, if, (, !, maybeModifiedArguments, &&, !, staleVars, ., contains, (, v, ), &&, referenceInfo, ., isWellDefined, (]
[., add, (, v, ), ;, }, }, if, (, !, maybeModifiedArguments, &&, !, staleVars, ., contains, (, v, )]
[), ;, }, }, if, (, !, maybeModifiedArguments, &&, !, staleVars, ., contains, (, v, ), &&, referenceInfo, ., isWellDefined]
[), {, List, <, Reference, >, refs, =, referenceInfo, ., references, ;, for, (, int, i, =, 1, ;, i]
[&&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {, List, <, Reference, >, refs, =, referenceInfo, ., references, ;, for, (]
[&&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {, List, <, Reference, >, refs, =]
[&&, !, staleVars, ., contains, (, v, ), &&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime, (, )]
[&&, !, staleVars, ., contains, (, v, ), &&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime, (, )]
[&&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {, List, <, Reference, >, refs, =]
[&&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {, List, <, Reference, >, refs, =]
[., contains, (, v, ), &&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {, List]
[), &&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {, List, <, Reference, >, refs]
[&&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {, List, <, Reference, >, refs, =, referenceInfo, ., references, ;, for, (]
[., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {, List, <, Reference, >, refs, =, referenceInfo, .]
[), {, List, <, Reference, >, refs, =, referenceInfo, ., references, ;, for, (, int, i, =, 1, ;, i]
[., isAssignedOnceInLifetime, (, ), ), {, List, <, Reference, >, refs, =, referenceInfo, ., references, ;, for, (, int, i]
[;, for, (, int, i, =, 1, ;, i, <, refs, ., size, (, ), ;, i, ++, ), {]
[., references, ;, for, (, int, i, =, 1, ;, i, <, refs, ., size, (, ), ;, i, ++]
[;, i, <, refs, ., size, (, ), ;, i, ++, ), {, Node, nameNode, =, refs, ., get, (]
[;, i, ++, ), {, Node, nameNode, =, refs, ., get, (, i, ), ., getNode, (, ), ;, if]
[<, refs, ., size, (, ), ;, i, ++, ), {, Node, nameNode, =, refs, ., get, (, i, )]
[;, i, ++, ), {, Node, nameNode, =, refs, ., get, (, i, ), ., getNode, (, ), ;, if]
[., size, (, ), ;, i, ++, ), {, Node, nameNode, =, refs, ., get, (, i, ), ., getNode]
[), {, Node, nameNode, =, refs, ., get, (, i, ), ., getNode, (, ), ;, if, (, aliasCandidates, .]
[++, ), {, Node, nameNode, =, refs, ., get, (, i, ), ., getNode, (, ), ;, if, (, aliasCandidates]
[;, if, (, aliasCandidates, ., containsKey, (, nameNode, ), ), {, AliasCandidate, candidate, =, aliasCandidates, ., get, (, nameNode, )]
[., getNode, (, ), ;, if, (, aliasCandidates, ., containsKey, (, nameNode, ), ), {, AliasCandidate, candidate, =, aliasCandidates, .]
[., get, (, i, ), ., getNode, (, ), ;, if, (, aliasCandidates, ., containsKey, (, nameNode, ), ), {]
[), ., getNode, (, ), ;, if, (, aliasCandidates, ., containsKey, (, nameNode, ), ), {, AliasCandidate, candidate, =, aliasCandidates]
[), {, AliasCandidate, candidate, =, aliasCandidates, ., get, (, nameNode, ), ;, if, (, !, staleVars, ., contains, (, candidate]
[., containsKey, (, nameNode, ), ), {, AliasCandidate, candidate, =, aliasCandidates, ., get, (, nameNode, ), ;, if, (, !]
[), ), {, AliasCandidate, candidate, =, aliasCandidates, ., get, (, nameNode, ), ;, if, (, !, staleVars, ., contains, (]
[;, if, (, !, staleVars, ., contains, (, candidate, ., alias, ), &&, !, isVarInlineForbidden, (, candidate, ., alias, )]
[., get, (, nameNode, ), ;, if, (, !, staleVars, ., contains, (, candidate, ., alias, ), &&, !, isVarInlineForbidden]
[), ;, if, (, !, staleVars, ., contains, (, candidate, ., alias, ), &&, !, isVarInlineForbidden, (, candidate, ., alias]
[), {, Reference, aliasInit, ;, aliasInit, =, candidate, ., refInfo, ., getInitializingReference, (, ), ;, Node, value, =, aliasInit, .]
[&&, !, isVarInlineForbidden, (, candidate, ., alias, ), ), {, Reference, aliasInit, ;, aliasInit, =, candidate, ., refInfo, ., getInitializingReference]
[&&, !, isVarInlineForbidden, (, candidate, ., alias, ), ), {, Reference, aliasInit, ;, aliasInit, =, candidate, ., refInfo, ., getInitializingReference]
[., contains, (, candidate, ., alias, ), &&, !, isVarInlineForbidden, (, candidate, ., alias, ), ), {, Reference, aliasInit, ;]
[), &&, !, isVarInlineForbidden, (, candidate, ., alias, ), ), {, Reference, aliasInit, ;, aliasInit, =, candidate, ., refInfo, .]
[., alias, ), &&, !, isVarInlineForbidden, (, candidate, ., alias, ), ), {, Reference, aliasInit, ;, aliasInit, =, candidate, .]
[), {, Reference, aliasInit, ;, aliasInit, =, candidate, ., refInfo, ., getInitializingReference, (, ), ;, Node, value, =, aliasInit, .]
[), {, Reference, aliasInit, ;, aliasInit, =, candidate, ., refInfo, ., getInitializingReference, (, ), ;, Node, value, =, aliasInit, .]
[), ), {, Reference, aliasInit, ;, aliasInit, =, candidate, ., refInfo, ., getInitializingReference, (, ), ;, Node, value, =, aliasInit]
[., alias, ), ), {, Reference, aliasInit, ;, aliasInit, =, candidate, ., refInfo, ., getInitializingReference, (, ), ;, Node, value]
[=, candidate, ., refInfo, ., getInitializingReference, (, ), ;, Node, value, =, aliasInit, ., getAssignedValue, (, ), ;, Preconditions, .]
[;, Node, value, =, aliasInit, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, candidate]
[., getInitializingReference, (, ), ;, Node, value, =, aliasInit, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, )]
[., refInfo, ., getInitializingReference, (, ), ;, Node, value, =, aliasInit, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (]
[;, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, candidate, ., alias, ,, value, ,, candidate, ., refInfo, .]
[., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, candidate, ., alias, ,, value, ,]
[;, inlineWellDefinedVariable, (, candidate, ., alias, ,, value, ,, candidate, ., refInfo, ., references, ), ;, staleVars, ., add, (]
[., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, candidate, ., alias, ,, value, ,, candidate, ., refInfo, ., references, )]
[), ;, inlineWellDefinedVariable, (, candidate, ., alias, ,, value, ,, candidate, ., refInfo, ., references, ), ;, staleVars, ., add]
[;, staleVars, ., add, (, candidate, ., alias, ), ;, }, }, }, }, }, private, void, blacklistVarReferencesInTree, (, Node]
[,, value, ,, candidate, ., refInfo, ., references, ), ;, staleVars, ., add, (, candidate, ., alias, ), ;, }]
[., alias, ,, value, ,, candidate, ., refInfo, ., references, ), ;, staleVars, ., add, (, candidate, ., alias, )]
[,, candidate, ., refInfo, ., references, ), ;, staleVars, ., add, (, candidate, ., alias, ), ;, }, }, }]
[), ;, staleVars, ., add, (, candidate, ., alias, ), ;, }, }, }, }, }, private, void, blacklistVarReferencesInTree, (]
[., references, ), ;, staleVars, ., add, (, candidate, ., alias, ), ;, }, }, }, }, }, private, void]
[., refInfo, ., references, ), ;, staleVars, ., add, (, candidate, ., alias, ), ;, }, }, }, }, }]
[;, }, }, }, }, }, private, void, blacklistVarReferencesInTree, (, Node, root, ,, Scope, scope, ), {, for, (, Node]
[., add, (, candidate, ., alias, ), ;, }, }, }, }, }, private, void, blacklistVarReferencesInTree, (, Node, root, ,]
[), ;, }, }, }, }, }, private, void, blacklistVarReferencesInTree, (, Node, root, ,, Scope, scope, ), {, for, (]
[., alias, ), ;, }, }, }, }, }, private, void, blacklistVarReferencesInTree, (, Node, root, ,, Scope, scope, ), {]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, blacklistVarReferencesInTree, (, c, ,, scope, )]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, blacklistVarReferencesInTree, (]
[;, c, =, c, ., getNext, (, ), ), {, blacklistVarReferencesInTree, (, c, ,, scope, ), ;, }, if, (]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, blacklistVarReferencesInTree, (, c, ,, scope, ), ;, }]
[;, c, =, c, ., getNext, (, ), ), {, blacklistVarReferencesInTree, (, c, ,, scope, ), ;, }, if, (]
[=, c, ., getNext, (, ), ), {, blacklistVarReferencesInTree, (, c, ,, scope, ), ;, }, if, (, root, .]
[), {, blacklistVarReferencesInTree, (, c, ,, scope, ), ;, }, if, (, root, ., isName, (, ), ), {, staleVars]
[., getNext, (, ), ), {, blacklistVarReferencesInTree, (, c, ,, scope, ), ;, }, if, (, root, ., isName, (]
[;, }, if, (, root, ., isName, (, ), ), {, staleVars, ., add, (, scope, ., getVar, (, root]
[,, scope, ), ;, }, if, (, root, ., isName, (, ), ), {, staleVars, ., add, (, scope, .]
[), ;, }, if, (, root, ., isName, (, ), ), {, staleVars, ., add, (, scope, ., getVar, (]
[), {, staleVars, ., add, (, scope, ., getVar, (, root, ., getString, (, ), ), ), ;, }, }]
[., isName, (, ), ), {, staleVars, ., add, (, scope, ., getVar, (, root, ., getString, (, ), )]
[;, }, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return, var, ., isExtern, (, ), ||, compiler, .]
[., add, (, scope, ., getVar, (, root, ., getString, (, ), ), ), ;, }, }, private, boolean, isVarInlineForbidden]
[), ;, }, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return, var, ., isExtern, (, ), ||, compiler]
[., getVar, (, root, ., getString, (, ), ), ), ;, }, }, private, boolean, isVarInlineForbidden, (, Var, var, )]
[), ), ;, }, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return, var, ., isExtern, (, ), ||]
[., getString, (, ), ), ), ;, }, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return, var, .]
[;, }, private, void, inline, (, Var, v, ,, Reference, declaration, ,, Reference, init, ,, Reference, reference, ), {, Node]
[||, staleVars, ., contains, (, var, ), ;, }, private, void, inline, (, Var, v, ,, Reference, declaration, ,, Reference]
[||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, ), ||, staleVars, ., contains, (, var, ), ;, }]
[||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (]
[., isExtern, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||, RenameProperties, .]
[||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, ), ||, staleVars, ., contains, (, var, ), ;, }]
[., isExported, (, var, ., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, ), ||, staleVars]
[., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, .]
[), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, ), ||, staleVars, ., contains, (, var, ), ;]
[., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, ), ||, staleVars, ., contains, (, var]
[||, staleVars, ., contains, (, var, ), ;, }, private, void, inline, (, Var, v, ,, Reference, declaration, ,, Reference]
[., equals, (, var, ., name, ), ||, staleVars, ., contains, (, var, ), ;, }, private, void, inline, (]
[., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, ), ||, staleVars, ., contains, (, var, ), ;, }, private, void]
[), ||, staleVars, ., contains, (, var, ), ;, }, private, void, inline, (, Var, v, ,, Reference, declaration, ,]
[., name, ), ||, staleVars, ., contains, (, var, ), ;, }, private, void, inline, (, Var, v, ,, Reference]
[;, }, private, void, inline, (, Var, v, ,, Reference, declaration, ,, Reference, init, ,, Reference, reference, ), {, Node]
[., contains, (, var, ), ;, }, private, void, inline, (, Var, v, ,, Reference, declaration, ,, Reference, init, ,]
[), ;, }, private, void, inline, (, Var, v, ,, Reference, declaration, ,, Reference, init, ,, Reference, reference, ), {]
[;, Preconditions, ., checkState, (, value, !=, null, ), ;, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (, value, ), ;]
[., getAssignedValue, (, ), ;, Preconditions, ., checkState, (, value, !=, null, ), ;, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration]
[;, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (, value, ), ;, inlineValue, (, v, ,, reference, ,, value, ., detachFromParent]
[., checkState, (, value, !=, null, ), ;, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (, value, ), ;, inlineValue, (]
[), ;, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (, value, ), ;, inlineValue, (, v, ,, reference, ,, value, .]
[!=, null, ), ;, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (, value, ), ;, inlineValue, (, v, ,, reference, ,]
[), ;, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (, value, ), ;, inlineValue, (, v, ,, reference, ,, value, .]
[;, inlineValue, (, v, ,, reference, ,, value, ., detachFromParent, (, ), ), ;, if, (, declaration, !=, init, )]
[., isFunctionDeclaration, (, value, ), ;, inlineValue, (, v, ,, reference, ,, value, ., detachFromParent, (, ), ), ;, if]
[), ;, inlineValue, (, v, ,, reference, ,, value, ., detachFromParent, (, ), ), ;, if, (, declaration, !=, init]
[;, if, (, declaration, !=, init, ), {, Node, expressRoot, =, init, ., getGrandparent, (, ), ;, Preconditions, ., checkState]
[,, reference, ,, value, ., detachFromParent, (, ), ), ;, if, (, declaration, !=, init, ), {, Node, expressRoot, =]
[,, value, ., detachFromParent, (, ), ), ;, if, (, declaration, !=, init, ), {, Node, expressRoot, =, init, .]
[), ;, if, (, declaration, !=, init, ), {, Node, expressRoot, =, init, ., getGrandparent, (, ), ;, Preconditions, .]
[., detachFromParent, (, ), ), ;, if, (, declaration, !=, init, ), {, Node, expressRoot, =, init, ., getGrandparent, (]
[), {, Node, expressRoot, =, init, ., getGrandparent, (, ), ;, Preconditions, ., checkState, (, expressRoot, ., isExprResult, (, )]
[!=, init, ), {, Node, expressRoot, =, init, ., getGrandparent, (, ), ;, Preconditions, ., checkState, (, expressRoot, ., isExprResult]
[), {, Node, expressRoot, =, init, ., getGrandparent, (, ), ;, Preconditions, ., checkState, (, expressRoot, ., isExprResult, (, )]
[;, Preconditions, ., checkState, (, expressRoot, ., isExprResult, (, ), ), ;, NodeUtil, ., removeChild, (, expressRoot, ., getParent, (]
[., getGrandparent, (, ), ;, Preconditions, ., checkState, (, expressRoot, ., isExprResult, (, ), ), ;, NodeUtil, ., removeChild, (]
[;, NodeUtil, ., removeChild, (, expressRoot, ., getParent, (, ), ,, expressRoot, ), ;, }, if, (, !, isFunctionDeclaration, )]
[., checkState, (, expressRoot, ., isExprResult, (, ), ), ;, NodeUtil, ., removeChild, (, expressRoot, ., getParent, (, ), ,]
[), ;, NodeUtil, ., removeChild, (, expressRoot, ., getParent, (, ), ,, expressRoot, ), ;, }, if, (, !, isFunctionDeclaration]
[., isExprResult, (, ), ), ;, NodeUtil, ., removeChild, (, expressRoot, ., getParent, (, ), ,, expressRoot, ), ;, }]
[;, }, if, (, !, isFunctionDeclaration, ), {, removeDeclaration, (, declaration, ), ;, }, else, {, compiler, ., reportCodeChange, (]
[., removeChild, (, expressRoot, ., getParent, (, ), ,, expressRoot, ), ;, }, if, (, !, isFunctionDeclaration, ), {, removeDeclaration]
[,, expressRoot, ), ;, }, if, (, !, isFunctionDeclaration, ), {, removeDeclaration, (, declaration, ), ;, }, else, {, compiler]
[., getParent, (, ), ,, expressRoot, ), ;, }, if, (, !, isFunctionDeclaration, ), {, removeDeclaration, (, declaration, ), ;]
[), ;, }, if, (, !, isFunctionDeclaration, ), {, removeDeclaration, (, declaration, ), ;, }, else, {, compiler, ., reportCodeChange]
[), {, removeDeclaration, (, declaration, ), ;, }, else, {, compiler, ., reportCodeChange, (, ), ;, }, }, private, void]
[), {, removeDeclaration, (, declaration, ), ;, }, else, {, compiler, ., reportCodeChange, (, ), ;, }, }, private, void]
[;, }, else, {, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, inlineWellDefinedVariable, (, Var, v, ,, Node]
[), ;, }, else, {, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, inlineWellDefinedVariable, (, Var, v, ,]
[;, }, }, private, void, inlineWellDefinedVariable, (, Var, v, ,, Node, value, ,, List, <, Reference, >, refSet, ), {]
[., reportCodeChange, (, ), ;, }, }, private, void, inlineWellDefinedVariable, (, Var, v, ,, Node, value, ,, List, <, Reference]
[;, for, (, int, i, =, 1, ;, i, <, refSet, ., size, (, ), ;, i, ++, ), {]
[., get, (, 0, ), ;, for, (, int, i, =, 1, ;, i, <, refSet, ., size, (, )]
[), ;, for, (, int, i, =, 1, ;, i, <, refSet, ., size, (, ), ;, i, ++, )]
[;, i, <, refSet, ., size, (, ), ;, i, ++, ), {, inlineValue, (, v, ,, refSet, ., get]
[;, i, ++, ), {, inlineValue, (, v, ,, refSet, ., get, (, i, ), ,, value, ., cloneTree, (]
[<, refSet, ., size, (, ), ;, i, ++, ), {, inlineValue, (, v, ,, refSet, ., get, (, i]
[;, i, ++, ), {, inlineValue, (, v, ,, refSet, ., get, (, i, ), ,, value, ., cloneTree, (]
[., size, (, ), ;, i, ++, ), {, inlineValue, (, v, ,, refSet, ., get, (, i, ), ,]
[), {, inlineValue, (, v, ,, refSet, ., get, (, i, ), ,, value, ., cloneTree, (, ), ), ;]
[++, ), {, inlineValue, (, v, ,, refSet, ., get, (, i, ), ,, value, ., cloneTree, (, ), )]
[;, }, removeDeclaration, (, decl, ), ;, }, private, void, inlineDeclaredConstant, (, Var, v, ,, Node, value, ,, List, <]
[,, refSet, ., get, (, i, ), ,, value, ., cloneTree, (, ), ), ;, }, removeDeclaration, (, decl, )]
[,, value, ., cloneTree, (, ), ), ;, }, removeDeclaration, (, decl, ), ;, }, private, void, inlineDeclaredConstant, (, Var]
[., get, (, i, ), ,, value, ., cloneTree, (, ), ), ;, }, removeDeclaration, (, decl, ), ;, }]
[), ,, value, ., cloneTree, (, ), ), ;, }, removeDeclaration, (, decl, ), ;, }, private, void, inlineDeclaredConstant, (]
[), ;, }, removeDeclaration, (, decl, ), ;, }, private, void, inlineDeclaredConstant, (, Var, v, ,, Node, value, ,, List]
[., cloneTree, (, ), ), ;, }, removeDeclaration, (, decl, ), ;, }, private, void, inlineDeclaredConstant, (, Var, v, ,]
[;, }, private, void, inlineDeclaredConstant, (, Var, v, ,, Node, value, ,, List, <, Reference, >, refSet, ), {, Reference]
[), ;, }, private, void, inlineDeclaredConstant, (, Var, v, ,, Node, value, ,, List, <, Reference, >, refSet, ), {]
[;, for, (, Reference, r, :, refSet, ), {, if, (, r, ., getNode, (, ), ==, v, ., getNameNode]
[), {, if, (, r, ., getNode, (, ), ==, v, ., getNameNode, (, ), ), {, decl, =, r]
[), {, decl, =, r, ;, }, else, {, inlineValue, (, v, ,, r, ,, value, ., cloneTree, (, )]
[==, v, ., getNameNode, (, ), ), {, decl, =, r, ;, }, else, {, inlineValue, (, v, ,, r]
[., getNode, (, ), ==, v, ., getNameNode, (, ), ), {, decl, =, r, ;, }, else, {, inlineValue]
[), {, decl, =, r, ;, }, else, {, inlineValue, (, v, ,, r, ,, value, ., cloneTree, (, )]
[., getNameNode, (, ), ), {, decl, =, r, ;, }, else, {, inlineValue, (, v, ,, r, ,, value]
[=, r, ;, }, else, {, inlineValue, (, v, ,, r, ,, value, ., cloneTree, (, ), ), ;, }]
[;, }, else, {, inlineValue, (, v, ,, r, ,, value, ., cloneTree, (, ), ), ;, }, }, removeDeclaration]
[;, }, }, removeDeclaration, (, decl, ), ;, }, private, void, removeDeclaration, (, Reference, declaration, ), {, Node, varNode, =]
[,, r, ,, value, ., cloneTree, (, ), ), ;, }, }, removeDeclaration, (, decl, ), ;, }, private, void]
[,, value, ., cloneTree, (, ), ), ;, }, }, removeDeclaration, (, decl, ), ;, }, private, void, removeDeclaration, (]
[), ;, }, }, removeDeclaration, (, decl, ), ;, }, private, void, removeDeclaration, (, Reference, declaration, ), {, Node, varNode]
[., cloneTree, (, ), ), ;, }, }, removeDeclaration, (, decl, ), ;, }, private, void, removeDeclaration, (, Reference, declaration]
[;, }, private, void, removeDeclaration, (, Reference, declaration, ), {, Node, varNode, =, declaration, ., getParent, (, ), ;, Node]
[), ;, }, private, void, removeDeclaration, (, Reference, declaration, ), {, Node, varNode, =, declaration, ., getParent, (, ), ;]
[;, Node, grandparent, =, declaration, ., getGrandparent, (, ), ;, varNode, ., removeChild, (, declaration, ., getNode, (, ), )]
[., getParent, (, ), ;, Node, grandparent, =, declaration, ., getGrandparent, (, ), ;, varNode, ., removeChild, (, declaration, .]
[;, varNode, ., removeChild, (, declaration, ., getNode, (, ), ), ;, if, (, !, varNode, ., hasChildren, (, )]
[., getGrandparent, (, ), ;, varNode, ., removeChild, (, declaration, ., getNode, (, ), ), ;, if, (, !, varNode]
[;, if, (, !, varNode, ., hasChildren, (, ), ), {, Preconditions, ., checkState, (, varNode, ., isVar, (, )]
[., removeChild, (, declaration, ., getNode, (, ), ), ;, if, (, !, varNode, ., hasChildren, (, ), ), {]
[), ;, if, (, !, varNode, ., hasChildren, (, ), ), {, Preconditions, ., checkState, (, varNode, ., isVar, (]
[., getNode, (, ), ), ;, if, (, !, varNode, ., hasChildren, (, ), ), {, Preconditions, ., checkState, (]
[), {, Preconditions, ., checkState, (, varNode, ., isVar, (, ), ), ;, NodeUtil, ., removeChild, (, grandparent, ,, varNode]
[), {, Preconditions, ., checkState, (, varNode, ., isVar, (, ), ), ;, NodeUtil, ., removeChild, (, grandparent, ,, varNode]
[., hasChildren, (, ), ), {, Preconditions, ., checkState, (, varNode, ., isVar, (, ), ), ;, NodeUtil, ., removeChild]
[;, NodeUtil, ., removeChild, (, grandparent, ,, varNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, private, void]
[., checkState, (, varNode, ., isVar, (, ), ), ;, NodeUtil, ., removeChild, (, grandparent, ,, varNode, ), ;, }]
[), ;, NodeUtil, ., removeChild, (, grandparent, ,, varNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, private]
[., isVar, (, ), ), ;, NodeUtil, ., removeChild, (, grandparent, ,, varNode, ), ;, }, compiler, ., reportCodeChange, (]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, private, void, inlineValue, (, Var, v, ,, Reference, ref, ,, Node]
[., removeChild, (, grandparent, ,, varNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, private, void, inlineValue, (]
[,, varNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, private, void, inlineValue, (, Var, v, ,, Reference]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, private, void, inlineValue, (, Var, v, ,, Reference, ref, ,]
[;, }, private, void, inlineValue, (, Var, v, ,, Reference, ref, ,, Node, value, ), {, if, (, ref, .]
[., reportCodeChange, (, ), ;, }, private, void, inlineValue, (, Var, v, ,, Reference, ref, ,, Node, value, ), {]
[), {, ref, ., getGrandparent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, value, ), ;, }]
[., isSimpleAssignmentToName, (, ), ), {, ref, ., getGrandparent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,]
[;, }, else, {, ref, ., getParent, (, ), ., replaceChild, (, ref, ., getNode, (, ), ,, value, )]
[., replaceChild, (, ref, ., getParent, (, ), ,, value, ), ;, }, else, {, ref, ., getParent, (, )]
[., getGrandparent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, value, ), ;, }, else, {, ref]
[,, value, ), ;, }, else, {, ref, ., getParent, (, ), ., replaceChild, (, ref, ., getNode, (, )]
[., getParent, (, ), ,, value, ), ;, }, else, {, ref, ., getParent, (, ), ., replaceChild, (, ref]
[), ;, }, else, {, ref, ., getParent, (, ), ., replaceChild, (, ref, ., getNode, (, ), ,, value]
[;, }, blacklistVarReferencesInTree, (, value, ,, v, ., scope, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, boolean]
[., replaceChild, (, ref, ., getNode, (, ), ,, value, ), ;, }, blacklistVarReferencesInTree, (, value, ,, v, ., scope]
[., getParent, (, ), ., replaceChild, (, ref, ., getNode, (, ), ,, value, ), ;, }, blacklistVarReferencesInTree, (, value]
[,, value, ), ;, }, blacklistVarReferencesInTree, (, value, ,, v, ., scope, ), ;, compiler, ., reportCodeChange, (, ), ;]
[., getNode, (, ), ,, value, ), ;, }, blacklistVarReferencesInTree, (, value, ,, v, ., scope, ), ;, compiler, .]
[), ;, }, blacklistVarReferencesInTree, (, value, ,, v, ., scope, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, boolean, isInlineableDeclaredConstant, (, Var, var, ,, ReferenceCollection, refInfo, ), {, if]
[,, v, ., scope, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, boolean, isInlineableDeclaredConstant, (, Var, var, ,]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, boolean, isInlineableDeclaredConstant, (, Var, var, ,, ReferenceCollection, refInfo, ), {]
[., scope, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, boolean, isInlineableDeclaredConstant, (, Var, var, ,, ReferenceCollection, refInfo]
[;, }, private, boolean, isInlineableDeclaredConstant, (, Var, var, ,, ReferenceCollection, refInfo, ), {, if, (, !, identifyConstants, ., apply, (]
[., reportCodeChange, (, ), ;, }, private, boolean, isInlineableDeclaredConstant, (, Var, var, ,, ReferenceCollection, refInfo, ), {, if, (, !]
[), {, return, false, ;, }, if, (, !, refInfo, ., isAssignedOnceInLifetime, (, ), ), {, return, false, ;, }]
[), {, return, false, ;, }, if, (, !, refInfo, ., isAssignedOnceInLifetime, (, ), ), {, return, false, ;, }]
[., apply, (, var, ), ), {, return, false, ;, }, if, (, !, refInfo, ., isAssignedOnceInLifetime, (, ), )]
[), ), {, return, false, ;, }, if, (, !, refInfo, ., isAssignedOnceInLifetime, (, ), ), {, return, false, ;]
[;, }, if, (, !, refInfo, ., isAssignedOnceInLifetime, (, ), ), {, return, false, ;, }, Reference, init, =, refInfo]
[), {, return, false, ;, }, Reference, init, =, refInfo, ., getInitializingReferenceForConstants, (, ), ;, if, (, init, ==, null]
[), {, return, false, ;, }, Reference, init, =, refInfo, ., getInitializingReferenceForConstants, (, ), ;, if, (, init, ==, null]
[., isAssignedOnceInLifetime, (, ), ), {, return, false, ;, }, Reference, init, =, refInfo, ., getInitializingReferenceForConstants, (, ), ;, if]
[;, }, Reference, init, =, refInfo, ., getInitializingReferenceForConstants, (, ), ;, if, (, init, ==, null, ), {, return, false]
[;, if, (, init, ==, null, ), {, return, false, ;, }, Node, value, =, init, ., getAssignedValue, (, )]
[., getInitializingReferenceForConstants, (, ), ;, if, (, init, ==, null, ), {, return, false, ;, }, Node, value, =, init]
[), {, return, false, ;, }, Node, value, =, init, ., getAssignedValue, (, ), ;, if, (, value, ==, null]
[==, null, ), {, return, false, ;, }, Node, value, =, init, ., getAssignedValue, (, ), ;, if, (, value]
[), {, return, false, ;, }, Node, value, =, init, ., getAssignedValue, (, ), ;, if, (, value, ==, null]
[;, }, Node, value, =, init, ., getAssignedValue, (, ), ;, if, (, value, ==, null, ), {, return, false]
[;, if, (, value, ==, null, ), {, return, false, ;, }, if, (, !, NodeUtil, ., isImmutableValue, (, value]
[., getAssignedValue, (, ), ;, if, (, value, ==, null, ), {, return, false, ;, }, if, (, !, NodeUtil]
[), {, return, false, ;, }, if, (, !, NodeUtil, ., isImmutableValue, (, value, ), ), {, return, false, ;]
[==, null, ), {, return, false, ;, }, if, (, !, NodeUtil, ., isImmutableValue, (, value, ), ), {, return]
[), {, return, false, ;, }, if, (, !, NodeUtil, ., isImmutableValue, (, value, ), ), {, return, false, ;]
[;, }, if, (, !, NodeUtil, ., isImmutableValue, (, value, ), ), {, return, false, ;, }, return, !, value]
[), {, return, false, ;, }, return, !, value, ., isString, (, ), ||, isStringWorthInlining, (, var, ,, refInfo, .]
[), {, return, false, ;, }, return, !, value, ., isString, (, ), ||, isStringWorthInlining, (, var, ,, refInfo, .]
[., isImmutableValue, (, value, ), ), {, return, false, ;, }, return, !, value, ., isString, (, ), ||, isStringWorthInlining]
[), ), {, return, false, ;, }, return, !, value, ., isString, (, ), ||, isStringWorthInlining, (, var, ,, refInfo]
[;, }, return, !, value, ., isString, (, ), ||, isStringWorthInlining, (, var, ,, refInfo, ., references, ), ;, }]
[;, }, private, boolean, isStringWorthInlining, (, Var, var, ,, List, <, Reference, >, refs, ), {, if, (, !, inlineAllStrings]
[||, isStringWorthInlining, (, var, ,, refInfo, ., references, ), ;, }, private, boolean, isStringWorthInlining, (, Var, var, ,, List, <]
[||, isStringWorthInlining, (, var, ,, refInfo, ., references, ), ;, }, private, boolean, isStringWorthInlining, (, Var, var, ,, List, <]
[., isString, (, ), ||, isStringWorthInlining, (, var, ,, refInfo, ., references, ), ;, }, private, boolean, isStringWorthInlining, (, Var]
[;, }, private, boolean, isStringWorthInlining, (, Var, var, ,, List, <, Reference, >, refs, ), {, if, (, !, inlineAllStrings]
[,, refInfo, ., references, ), ;, }, private, boolean, isStringWorthInlining, (, Var, var, ,, List, <, Reference, >, refs, )]
[), ;, }, private, boolean, isStringWorthInlining, (, Var, var, ,, List, <, Reference, >, refs, ), {, if, (, !]
[., references, ), ;, }, private, boolean, isStringWorthInlining, (, Var, var, ,, List, <, Reference, >, refs, ), {, if]
[), {, int, len, =, var, ., getInitialValue, (, ), ., getString, (, ), ., length, (, ), +, "''"]
[&&, !, var, ., isDefine, (, ), ), {, int, len, =, var, ., getInitialValue, (, ), ., getString, (]
[&&, !, var, ., isDefine, (, ), ), {, int, len, =, var, ., getInitialValue, (, ), ., getString, (]
[), {, int, len, =, var, ., getInitialValue, (, ), ., getString, (, ), ., length, (, ), +, "''"]
[), {, int, len, =, var, ., getInitialValue, (, ), ., getString, (, ), ., length, (, ), +, "''"]
[., isDefine, (, ), ), {, int, len, =, var, ., getInitialValue, (, ), ., getString, (, ), ., length]
[;, int, noInlineBytes, =, "var xx=;", ., length, (, ), +, len, +, 4, *, (, refs, ., size, (, )]
[+, "''", ., length, (, ), ;, int, noInlineBytes, =, "var xx=;", ., length, (, ), +, len, +, 4, *]
[., length, (, ), +, "''", ., length, (, ), ;, int, noInlineBytes, =, "var xx=;", ., length, (, ), +]
[., getString, (, ), ., length, (, ), +, "''", ., length, (, ), ;, int, noInlineBytes, =, "var xx=;", .]
[., getInitialValue, (, ), ., getString, (, ), ., length, (, ), +, "''", ., length, (, ), ;, int]
[;, int, noInlineBytes, =, "var xx=;", ., length, (, ), +, len, +, 4, *, (, refs, ., size, (, )]
[., length, (, ), ;, int, noInlineBytes, =, "var xx=;", ., length, (, ), +, len, +, 4, *, (, refs]
[;, int, inlineBytes, =, (, len, -, 1, ), *, (, refs, ., size, (, ), -, 1, ), ;]
[+, 4, *, (, refs, ., size, (, ), -, 1, ), ;, int, inlineBytes, =, (, len, -, 1]
[+, len, +, 4, *, (, refs, ., size, (, ), -, 1, ), ;, int, inlineBytes, =, (, len]
[., length, (, ), +, len, +, 4, *, (, refs, ., size, (, ), -, 1, ), ;, int]
[+, 4, *, (, refs, ., size, (, ), -, 1, ), ;, int, inlineBytes, =, (, len, -, 1]
[;, int, inlineBytes, =, (, len, -, 1, ), *, (, refs, ., size, (, ), -, 1, ), ;]
[*, (, refs, ., size, (, ), -, 1, ), ;, int, inlineBytes, =, (, len, -, 1, ), *]
[;, int, inlineBytes, =, (, len, -, 1, ), *, (, refs, ., size, (, ), -, 1, ), ;]
[), ;, int, inlineBytes, =, (, len, -, 1, ), *, (, refs, ., size, (, ), -, 1, )]
[-, 1, ), ;, int, inlineBytes, =, (, len, -, 1, ), *, (, refs, ., size, (, ), -]
[., size, (, ), -, 1, ), ;, int, inlineBytes, =, (, len, -, 1, ), *, (, refs, .]
[), ;, int, inlineBytes, =, (, len, -, 1, ), *, (, refs, ., size, (, ), -, 1, )]
[;, return, noInlineBytes, >=, inlineBytes, ;, }, return, true, ;, }, private, boolean, canInline, (, Reference, declaration, ,, Reference, initialization]
[*, (, refs, ., size, (, ), -, 1, ), ;, return, noInlineBytes, >=, inlineBytes, ;, }, return, true, ;]
[), *, (, refs, ., size, (, ), -, 1, ), ;, return, noInlineBytes, >=, inlineBytes, ;, }, return, true]
[-, 1, ), *, (, refs, ., size, (, ), -, 1, ), ;, return, noInlineBytes, >=, inlineBytes, ;, }]
[), *, (, refs, ., size, (, ), -, 1, ), ;, return, noInlineBytes, >=, inlineBytes, ;, }, return, true]
[;, return, noInlineBytes, >=, inlineBytes, ;, }, return, true, ;, }, private, boolean, canInline, (, Reference, declaration, ,, Reference, initialization]
[), ;, return, noInlineBytes, >=, inlineBytes, ;, }, return, true, ;, }, private, boolean, canInline, (, Reference, declaration, ,, Reference]
[-, 1, ), ;, return, noInlineBytes, >=, inlineBytes, ;, }, return, true, ;, }, private, boolean, canInline, (, Reference, declaration]
[., size, (, ), -, 1, ), ;, return, noInlineBytes, >=, inlineBytes, ;, }, return, true, ;, }, private, boolean]
[), ;, return, noInlineBytes, >=, inlineBytes, ;, }, return, true, ;, }, private, boolean, canInline, (, Reference, declaration, ,, Reference]
[;, }, return, true, ;, }, private, boolean, canInline, (, Reference, declaration, ,, Reference, initialization, ,, Reference, reference, ), {]
[>=, inlineBytes, ;, }, return, true, ;, }, private, boolean, canInline, (, Reference, declaration, ,, Reference, initialization, ,, Reference, reference]
[;, }, return, true, ;, }, private, boolean, canInline, (, Reference, declaration, ,, Reference, initialization, ,, Reference, reference, ), {]
[;, }, private, boolean, canInline, (, Reference, declaration, ,, Reference, initialization, ,, Reference, reference, ), {, if, (, !, isValidDeclaration]
[), {, return, false, ;, }, if, (, declaration, !=, initialization, &&, !, initialization, ., getGrandparent, (, ), ., isExprResult]
[||, !, isValidReference, (, reference, ), ), {, return, false, ;, }, if, (, declaration, !=, initialization, &&, !, initialization]
[||, !, isValidInitialization, (, initialization, ), ||, !, isValidReference, (, reference, ), ), {, return, false, ;, }, if, (]
[||, !, isValidInitialization, (, initialization, ), ||, !, isValidReference, (, reference, ), ), {, return, false, ;, }, if, (]
[), ||, !, isValidInitialization, (, initialization, ), ||, !, isValidReference, (, reference, ), ), {, return, false, ;, }, if]
[||, !, isValidReference, (, reference, ), ), {, return, false, ;, }, if, (, declaration, !=, initialization, &&, !, initialization]
[||, !, isValidReference, (, reference, ), ), {, return, false, ;, }, if, (, declaration, !=, initialization, &&, !, initialization]
[), ||, !, isValidReference, (, reference, ), ), {, return, false, ;, }, if, (, declaration, !=, initialization, &&, !]
[), {, return, false, ;, }, if, (, declaration, !=, initialization, &&, !, initialization, ., getGrandparent, (, ), ., isExprResult]
[), {, return, false, ;, }, if, (, declaration, !=, initialization, &&, !, initialization, ., getGrandparent, (, ), ., isExprResult]
[), ), {, return, false, ;, }, if, (, declaration, !=, initialization, &&, !, initialization, ., getGrandparent, (, ), .]
[;, }, if, (, declaration, !=, initialization, &&, !, initialization, ., getGrandparent, (, ), ., isExprResult, (, ), ), {]
[), {, return, false, ;, }, if, (, declaration, ., getBasicBlock, (, ), !=, initialization, ., getBasicBlock, (, ), ||]
[&&, !, initialization, ., getGrandparent, (, ), ., isExprResult, (, ), ), {, return, false, ;, }, if, (, declaration]
[!=, initialization, &&, !, initialization, ., getGrandparent, (, ), ., isExprResult, (, ), ), {, return, false, ;, }, if]
[&&, !, initialization, ., getGrandparent, (, ), ., isExprResult, (, ), ), {, return, false, ;, }, if, (, declaration]
[), {, return, false, ;, }, if, (, declaration, ., getBasicBlock, (, ), !=, initialization, ., getBasicBlock, (, ), ||]
[), {, return, false, ;, }, if, (, declaration, ., getBasicBlock, (, ), !=, initialization, ., getBasicBlock, (, ), ||]
[., isExprResult, (, ), ), {, return, false, ;, }, if, (, declaration, ., getBasicBlock, (, ), !=, initialization, .]
[., getGrandparent, (, ), ., isExprResult, (, ), ), {, return, false, ;, }, if, (, declaration, ., getBasicBlock, (]
[;, }, if, (, declaration, ., getBasicBlock, (, ), !=, initialization, ., getBasicBlock, (, ), ||, declaration, ., getBasicBlock, (]
[), {, return, false, ;, }, Node, value, =, initialization, ., getAssignedValue, (, ), ;, Preconditions, ., checkState, (, value]
[||, declaration, ., getBasicBlock, (, ), !=, reference, ., getBasicBlock, (, ), ), {, return, false, ;, }, Node, value]
[!=, initialization, ., getBasicBlock, (, ), ||, declaration, ., getBasicBlock, (, ), !=, reference, ., getBasicBlock, (, ), ), {]
[., getBasicBlock, (, ), !=, initialization, ., getBasicBlock, (, ), ||, declaration, ., getBasicBlock, (, ), !=, reference, ., getBasicBlock]
[||, declaration, ., getBasicBlock, (, ), !=, reference, ., getBasicBlock, (, ), ), {, return, false, ;, }, Node, value]
[., getBasicBlock, (, ), ||, declaration, ., getBasicBlock, (, ), !=, reference, ., getBasicBlock, (, ), ), {, return, false]
[), {, return, false, ;, }, Node, value, =, initialization, ., getAssignedValue, (, ), ;, Preconditions, ., checkState, (, value]
[!=, reference, ., getBasicBlock, (, ), ), {, return, false, ;, }, Node, value, =, initialization, ., getAssignedValue, (, )]
[., getBasicBlock, (, ), !=, reference, ., getBasicBlock, (, ), ), {, return, false, ;, }, Node, value, =, initialization]
[), {, return, false, ;, }, Node, value, =, initialization, ., getAssignedValue, (, ), ;, Preconditions, ., checkState, (, value]
[., getBasicBlock, (, ), ), {, return, false, ;, }, Node, value, =, initialization, ., getAssignedValue, (, ), ;, Preconditions]
[;, }, Node, value, =, initialization, ., getAssignedValue, (, ), ;, Preconditions, ., checkState, (, value, !=, null, ), ;]
[;, Preconditions, ., checkState, (, value, !=, null, ), ;, if, (, value, ., isGetProp, (, ), &&, reference, .]
[., getAssignedValue, (, ), ;, Preconditions, ., checkState, (, value, !=, null, ), ;, if, (, value, ., isGetProp, (]
[;, if, (, value, ., isGetProp, (, ), &&, reference, ., getParent, (, ), ., isCall, (, ), &&, reference]
[., checkState, (, value, !=, null, ), ;, if, (, value, ., isGetProp, (, ), &&, reference, ., getParent, (]
[), ;, if, (, value, ., isGetProp, (, ), &&, reference, ., getParent, (, ), ., isCall, (, ), &&]
[!=, null, ), ;, if, (, value, ., isGetProp, (, ), &&, reference, ., getParent, (, ), ., isCall, (]
[), ;, if, (, value, ., isGetProp, (, ), &&, reference, ., getParent, (, ), ., isCall, (, ), &&]
[), {, return, false, ;, }, if, (, value, ., isFunction, (, ), ), {, Node, callNode, =, reference, .]
[&&, reference, ., getParent, (, ), ., getFirstChild, (, ), ==, reference, ., getNode, (, ), ), {, return, false]
[&&, reference, ., getParent, (, ), ., isCall, (, ), &&, reference, ., getParent, (, ), ., getFirstChild, (, )]
[., isGetProp, (, ), &&, reference, ., getParent, (, ), ., isCall, (, ), &&, reference, ., getParent, (, )]
[&&, reference, ., getParent, (, ), ., getFirstChild, (, ), ==, reference, ., getNode, (, ), ), {, return, false]
[., isCall, (, ), &&, reference, ., getParent, (, ), ., getFirstChild, (, ), ==, reference, ., getNode, (, )]
[., getParent, (, ), ., isCall, (, ), &&, reference, ., getParent, (, ), ., getFirstChild, (, ), ==, reference]
[), {, return, false, ;, }, if, (, value, ., isFunction, (, ), ), {, Node, callNode, =, reference, .]
[==, reference, ., getNode, (, ), ), {, return, false, ;, }, if, (, value, ., isFunction, (, ), )]
[., getFirstChild, (, ), ==, reference, ., getNode, (, ), ), {, return, false, ;, }, if, (, value, .]
[., getParent, (, ), ., getFirstChild, (, ), ==, reference, ., getNode, (, ), ), {, return, false, ;, }]
[), {, return, false, ;, }, if, (, value, ., isFunction, (, ), ), {, Node, callNode, =, reference, .]
[., getNode, (, ), ), {, return, false, ;, }, if, (, value, ., isFunction, (, ), ), {, Node]
[;, }, if, (, value, ., isFunction, (, ), ), {, Node, callNode, =, reference, ., getParent, (, ), ;]
[), {, Node, callNode, =, reference, ., getParent, (, ), ;, if, (, reference, ., getParent, (, ), ., isCall]
[., isFunction, (, ), ), {, Node, callNode, =, reference, ., getParent, (, ), ;, if, (, reference, ., getParent]
[;, if, (, reference, ., getParent, (, ), ., isCall, (, ), ), {, CodingConvention, convention, =, compiler, ., getCodingConvention]
[., getParent, (, ), ;, if, (, reference, ., getParent, (, ), ., isCall, (, ), ), {, CodingConvention, convention]
[), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, SubclassRelationship, relationship, =, convention, ., getClassesDefinedByCall, (, callNode, )]
[., isCall, (, ), ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, SubclassRelationship, relationship, =, convention, .]
[., getParent, (, ), ., isCall, (, ), ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, SubclassRelationship]
[;, SubclassRelationship, relationship, =, convention, ., getClassesDefinedByCall, (, callNode, ), ;, if, (, relationship, !=, null, ), {, return, false]
[., getCodingConvention, (, ), ;, SubclassRelationship, relationship, =, convention, ., getClassesDefinedByCall, (, callNode, ), ;, if, (, relationship, !=, null]
[;, if, (, relationship, !=, null, ), {, return, false, ;, }, if, (, convention, ., getSingletonGetterClassName, (, callNode, )]
[., getClassesDefinedByCall, (, callNode, ), ;, if, (, relationship, !=, null, ), {, return, false, ;, }, if, (, convention]
[), ;, if, (, relationship, !=, null, ), {, return, false, ;, }, if, (, convention, ., getSingletonGetterClassName, (, callNode]
[), {, return, false, ;, }, if, (, convention, ., getSingletonGetterClassName, (, callNode, ), !=, null, ), {, return, false]
[!=, null, ), {, return, false, ;, }, if, (, convention, ., getSingletonGetterClassName, (, callNode, ), !=, null, ), {]
[), {, return, false, ;, }, if, (, convention, ., getSingletonGetterClassName, (, callNode, ), !=, null, ), {, return, false]
[;, }, if, (, convention, ., getSingletonGetterClassName, (, callNode, ), !=, null, ), {, return, false, ;, }, }, }]
[), {, return, false, ;, }, }, }, return, canMoveAggressively, (, value, ), ||, canMoveModerately, (, initialization, ,, reference, )]
[!=, null, ), {, return, false, ;, }, }, }, return, canMoveAggressively, (, value, ), ||, canMoveModerately, (, initialization, ,]
[., getSingletonGetterClassName, (, callNode, ), !=, null, ), {, return, false, ;, }, }, }, return, canMoveAggressively, (, value, )]
[), !=, null, ), {, return, false, ;, }, }, }, return, canMoveAggressively, (, value, ), ||, canMoveModerately, (, initialization]
[), {, return, false, ;, }, }, }, return, canMoveAggressively, (, value, ), ||, canMoveModerately, (, initialization, ,, reference, )]
[;, }, }, }, return, canMoveAggressively, (, value, ), ||, canMoveModerately, (, initialization, ,, reference, ), ;, }, private, boolean]
[;, }, private, boolean, canMoveAggressively, (, Node, value, ), {, return, NodeUtil, ., isLiteralValue, (, value, ,, true, ), ||]
[||, canMoveModerately, (, initialization, ,, reference, ), ;, }, private, boolean, canMoveAggressively, (, Node, value, ), {, return, NodeUtil, .]
[), ||, canMoveModerately, (, initialization, ,, reference, ), ;, }, private, boolean, canMoveAggressively, (, Node, value, ), {, return, NodeUtil]
[;, }, private, boolean, canMoveAggressively, (, Node, value, ), {, return, NodeUtil, ., isLiteralValue, (, value, ,, true, ), ||]
[,, reference, ), ;, }, private, boolean, canMoveAggressively, (, Node, value, ), {, return, NodeUtil, ., isLiteralValue, (, value, ,]
[), ;, }, private, boolean, canMoveAggressively, (, Node, value, ), {, return, NodeUtil, ., isLiteralValue, (, value, ,, true, )]
[;, }, private, boolean, canMoveModerately, (, Reference, initialization, ,, Reference, reference, ), {, Iterator, <, Node, >, it, ;, if]
[||, value, ., isFunction, (, ), ;, }, private, boolean, canMoveModerately, (, Reference, initialization, ,, Reference, reference, ), {, Iterator]
[., isLiteralValue, (, value, ,, true, ), ||, value, ., isFunction, (, ), ;, }, private, boolean, canMoveModerately, (, Reference]
[,, true, ), ||, value, ., isFunction, (, ), ;, }, private, boolean, canMoveModerately, (, Reference, initialization, ,, Reference, reference]
[), ||, value, ., isFunction, (, ), ;, }, private, boolean, canMoveModerately, (, Reference, initialization, ,, Reference, reference, ), {]
[;, }, private, boolean, canMoveModerately, (, Reference, initialization, ,, Reference, reference, ), {, Iterator, <, Node, >, it, ;, if]
[., isFunction, (, ), ;, }, private, boolean, canMoveModerately, (, Reference, initialization, ,, Reference, reference, ), {, Iterator, <, Node]
[), {, it, =, NodeIterators, ., LocalVarMotion, ., forVar, (, initialization, ., getNode, (, ), ,, initialization, ., getParent, (]
[., isVar, (, ), ), {, it, =, NodeIterators, ., LocalVarMotion, ., forVar, (, initialization, ., getNode, (, ), ,]
[., getParent, (, ), ., isVar, (, ), ), {, it, =, NodeIterators, ., LocalVarMotion, ., forVar, (, initialization, .]
[=, NodeIterators, ., LocalVarMotion, ., forVar, (, initialization, ., getNode, (, ), ,, initialization, ., getParent, (, ), ,, initialization]
[;, }, else, if, (, initialization, ., getParent, (, ), ., isAssign, (, ), ), {, Preconditions, ., checkState, (]
[., forVar, (, initialization, ., getNode, (, ), ,, initialization, ., getParent, (, ), ,, initialization, ., getGrandparent, (, )]
[., LocalVarMotion, ., forVar, (, initialization, ., getNode, (, ), ,, initialization, ., getParent, (, ), ,, initialization, ., getGrandparent]
[,, initialization, ., getParent, (, ), ,, initialization, ., getGrandparent, (, ), ), ;, }, else, if, (, initialization, .]
[., getNode, (, ), ,, initialization, ., getParent, (, ), ,, initialization, ., getGrandparent, (, ), ), ;, }, else]
[,, initialization, ., getGrandparent, (, ), ), ;, }, else, if, (, initialization, ., getParent, (, ), ., isAssign, (]
[., getParent, (, ), ,, initialization, ., getGrandparent, (, ), ), ;, }, else, if, (, initialization, ., getParent, (]
[), ;, }, else, if, (, initialization, ., getParent, (, ), ., isAssign, (, ), ), {, Preconditions, ., checkState]
[., getGrandparent, (, ), ), ;, }, else, if, (, initialization, ., getParent, (, ), ., isAssign, (, ), )]
[), {, Preconditions, ., checkState, (, initialization, ., getGrandparent, (, ), ., isExprResult, (, ), ), ;, it, =, NodeIterators]
[., isAssign, (, ), ), {, Preconditions, ., checkState, (, initialization, ., getGrandparent, (, ), ., isExprResult, (, ), )]
[., getParent, (, ), ., isAssign, (, ), ), {, Preconditions, ., checkState, (, initialization, ., getGrandparent, (, ), .]
[;, it, =, NodeIterators, ., LocalVarMotion, ., forAssign, (, initialization, ., getNode, (, ), ,, initialization, ., getParent, (, )]
[., checkState, (, initialization, ., getGrandparent, (, ), ., isExprResult, (, ), ), ;, it, =, NodeIterators, ., LocalVarMotion, .]
[), ;, it, =, NodeIterators, ., LocalVarMotion, ., forAssign, (, initialization, ., getNode, (, ), ,, initialization, ., getParent, (]
[., isExprResult, (, ), ), ;, it, =, NodeIterators, ., LocalVarMotion, ., forAssign, (, initialization, ., getNode, (, ), ,]
[., getGrandparent, (, ), ., isExprResult, (, ), ), ;, it, =, NodeIterators, ., LocalVarMotion, ., forAssign, (, initialization, .]
[=, NodeIterators, ., LocalVarMotion, ., forAssign, (, initialization, ., getNode, (, ), ,, initialization, ., getParent, (, ), ,, initialization]
[;, }, else, {, throw, new, IllegalStateException, (, "Unexpected initialization parent ", +, initialization, ., getParent, (, ), ., toStringTree, (, ), )]
[., forAssign, (, initialization, ., getNode, (, ), ,, initialization, ., getParent, (, ), ,, initialization, ., getGrandparent, (, )]
[., LocalVarMotion, ., forAssign, (, initialization, ., getNode, (, ), ,, initialization, ., getParent, (, ), ,, initialization, ., getGrandparent]
[,, initialization, ., getParent, (, ), ,, initialization, ., getGrandparent, (, ), ,, initialization, ., getGrandparent, (, ), ., getParent]
[., getNode, (, ), ,, initialization, ., getParent, (, ), ,, initialization, ., getGrandparent, (, ), ,, initialization, ., getGrandparent]
[,, initialization, ., getGrandparent, (, ), ,, initialization, ., getGrandparent, (, ), ., getParent, (, ), ), ;, }, else]
[., getParent, (, ), ,, initialization, ., getGrandparent, (, ), ,, initialization, ., getGrandparent, (, ), ., getParent, (, )]
[,, initialization, ., getGrandparent, (, ), ., getParent, (, ), ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected initialization parent "]
[., getGrandparent, (, ), ,, initialization, ., getGrandparent, (, ), ., getParent, (, ), ), ;, }, else, {, throw]
[), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected initialization parent ", +, initialization, ., getParent, (, ), ., toStringTree, (, )]
[., getParent, (, ), ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected initialization parent ", +, initialization, ., getParent, (, )]
[., getGrandparent, (, ), ., getParent, (, ), ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected initialization parent ", +, initialization]
[;, }, Node, targetName, =, reference, ., getNode, (, ), ;, while, (, it, ., hasNext, (, ), ), {]
[), ;, }, Node, targetName, =, reference, ., getNode, (, ), ;, while, (, it, ., hasNext, (, ), )]
[+, initialization, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, Node, targetName, =, reference, ., getNode, (]
[), ;, }, Node, targetName, =, reference, ., getNode, (, ), ;, while, (, it, ., hasNext, (, ), )]
[., toStringTree, (, ), ), ;, }, Node, targetName, =, reference, ., getNode, (, ), ;, while, (, it, .]
[., getParent, (, ), ., toStringTree, (, ), ), ;, }, Node, targetName, =, reference, ., getNode, (, ), ;]
[;, while, (, it, ., hasNext, (, ), ), {, Node, curNode, =, it, ., next, (, ), ;, if]
[., getNode, (, ), ;, while, (, it, ., hasNext, (, ), ), {, Node, curNode, =, it, ., next]
[), {, Node, curNode, =, it, ., next, (, ), ;, if, (, curNode, ==, targetName, ), {, return, true]
[., hasNext, (, ), ), {, Node, curNode, =, it, ., next, (, ), ;, if, (, curNode, ==, targetName]
[;, if, (, curNode, ==, targetName, ), {, return, true, ;, }, }, return, false, ;, }, private, boolean, isValidDeclaration]
[., next, (, ), ;, if, (, curNode, ==, targetName, ), {, return, true, ;, }, }, return, false, ;]
[), {, return, true, ;, }, }, return, false, ;, }, private, boolean, isValidDeclaration, (, Reference, declaration, ), {, return]
[==, targetName, ), {, return, true, ;, }, }, return, false, ;, }, private, boolean, isValidDeclaration, (, Reference, declaration, )]
[), {, return, true, ;, }, }, return, false, ;, }, private, boolean, isValidDeclaration, (, Reference, declaration, ), {, return]
[;, }, }, return, false, ;, }, private, boolean, isValidDeclaration, (, Reference, declaration, ), {, return, (, declaration, ., getParent]
[;, }, private, boolean, isValidDeclaration, (, Reference, declaration, ), {, return, (, declaration, ., getParent, (, ), ., isVar, (]
[;, }, private, boolean, isValidInitialization, (, Reference, initialization, ), {, if, (, initialization, ==, null, ), {, return, false, ;]
[||, NodeUtil, ., isFunctionDeclaration, (, declaration, ., getParent, (, ), ), ;, }, private, boolean, isValidInitialization, (, Reference, initialization, )]
[), ||, NodeUtil, ., isFunctionDeclaration, (, declaration, ., getParent, (, ), ), ;, }, private, boolean, isValidInitialization, (, Reference, initialization]
[&&, !, declaration, ., getGrandparent, (, ), ., isFor, (, ), ), ||, NodeUtil, ., isFunctionDeclaration, (, declaration, ., getParent]
[., isVar, (, ), &&, !, declaration, ., getGrandparent, (, ), ., isFor, (, ), ), ||, NodeUtil, ., isFunctionDeclaration]
[., getParent, (, ), ., isVar, (, ), &&, !, declaration, ., getGrandparent, (, ), ., isFor, (, ), )]
[), ||, NodeUtil, ., isFunctionDeclaration, (, declaration, ., getParent, (, ), ), ;, }, private, boolean, isValidInitialization, (, Reference, initialization]
[), ||, NodeUtil, ., isFunctionDeclaration, (, declaration, ., getParent, (, ), ), ;, }, private, boolean, isValidInitialization, (, Reference, initialization]
[., isFor, (, ), ), ||, NodeUtil, ., isFunctionDeclaration, (, declaration, ., getParent, (, ), ), ;, }, private, boolean]
[., getGrandparent, (, ), ., isFor, (, ), ), ||, NodeUtil, ., isFunctionDeclaration, (, declaration, ., getParent, (, ), )]
[;, }, private, boolean, isValidInitialization, (, Reference, initialization, ), {, if, (, initialization, ==, null, ), {, return, false, ;]
[., isFunctionDeclaration, (, declaration, ., getParent, (, ), ), ;, }, private, boolean, isValidInitialization, (, Reference, initialization, ), {, if]
[), ;, }, private, boolean, isValidInitialization, (, Reference, initialization, ), {, if, (, initialization, ==, null, ), {, return, false]
[., getParent, (, ), ), ;, }, private, boolean, isValidInitialization, (, Reference, initialization, ), {, if, (, initialization, ==, null]
[), {, return, false, ;, }, else, if, (, initialization, ., isDeclaration, (, ), ), {, if, (, !, NodeUtil]
[==, null, ), {, return, false, ;, }, else, if, (, initialization, ., isDeclaration, (, ), ), {, if, (]
[), {, return, false, ;, }, else, if, (, initialization, ., isDeclaration, (, ), ), {, if, (, !, NodeUtil]
[;, }, else, if, (, initialization, ., isDeclaration, (, ), ), {, if, (, !, NodeUtil, ., isFunctionDeclaration, (, initialization]
[), {, if, (, !, NodeUtil, ., isFunctionDeclaration, (, initialization, ., getParent, (, ), ), &&, initialization, ., getNode, (]
[., isDeclaration, (, ), ), {, if, (, !, NodeUtil, ., isFunctionDeclaration, (, initialization, ., getParent, (, ), ), &&]
[), {, return, false, ;, }, }, else, {, Node, parent, =, initialization, ., getParent, (, ), ;, Preconditions, .]
[&&, initialization, ., getNode, (, ), ., getFirstChild, (, ), ==, null, ), {, return, false, ;, }, }, else]
[&&, initialization, ., getNode, (, ), ., getFirstChild, (, ), ==, null, ), {, return, false, ;, }, }, else]
[., isFunctionDeclaration, (, initialization, ., getParent, (, ), ), &&, initialization, ., getNode, (, ), ., getFirstChild, (, ), ==]
[), &&, initialization, ., getNode, (, ), ., getFirstChild, (, ), ==, null, ), {, return, false, ;, }, }]
[., getParent, (, ), ), &&, initialization, ., getNode, (, ), ., getFirstChild, (, ), ==, null, ), {, return]
[), {, return, false, ;, }, }, else, {, Node, parent, =, initialization, ., getParent, (, ), ;, Preconditions, .]
[==, null, ), {, return, false, ;, }, }, else, {, Node, parent, =, initialization, ., getParent, (, ), ;]
[., getFirstChild, (, ), ==, null, ), {, return, false, ;, }, }, else, {, Node, parent, =, initialization, .]
[., getNode, (, ), ., getFirstChild, (, ), ==, null, ), {, return, false, ;, }, }, else, {, Node]
[), {, return, false, ;, }, }, else, {, Node, parent, =, initialization, ., getParent, (, ), ;, Preconditions, .]
[;, }, }, else, {, Node, parent, =, initialization, ., getParent, (, ), ;, Preconditions, ., checkState, (, parent, .]
[;, Preconditions, ., checkState, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, initialization, ., getNode]
[., getParent, (, ), ;, Preconditions, ., checkState, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, )]
[;, }, Node, n, =, initialization, ., getAssignedValue, (, ), ;, if, (, n, ., isFunction, (, ), ), {]
[., checkState, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, initialization, ., getNode, (, )]
[), ;, }, Node, n, =, initialization, ., getAssignedValue, (, ), ;, if, (, n, ., isFunction, (, ), )]
[&&, parent, ., getFirstChild, (, ), ==, initialization, ., getNode, (, ), ), ;, }, Node, n, =, initialization, .]
[., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, initialization, ., getNode, (, ), ), ;, }, Node]
[), ;, }, Node, n, =, initialization, ., getAssignedValue, (, ), ;, if, (, n, ., isFunction, (, ), )]
[==, initialization, ., getNode, (, ), ), ;, }, Node, n, =, initialization, ., getAssignedValue, (, ), ;, if, (]
[., getFirstChild, (, ), ==, initialization, ., getNode, (, ), ), ;, }, Node, n, =, initialization, ., getAssignedValue, (]
[), ;, }, Node, n, =, initialization, ., getAssignedValue, (, ), ;, if, (, n, ., isFunction, (, ), )]
[., getNode, (, ), ), ;, }, Node, n, =, initialization, ., getAssignedValue, (, ), ;, if, (, n, .]
[;, if, (, n, ., isFunction, (, ), ), {, return, compiler, ., getCodingConvention, (, ), ., isInlinableFunction, (, n]
[., getAssignedValue, (, ), ;, if, (, n, ., isFunction, (, ), ), {, return, compiler, ., getCodingConvention, (, )]
[), {, return, compiler, ., getCodingConvention, (, ), ., isInlinableFunction, (, n, ), ;, }, return, true, ;, }, private]
[., isFunction, (, ), ), {, return, compiler, ., getCodingConvention, (, ), ., isInlinableFunction, (, n, ), ;, }, return]
[;, }, return, true, ;, }, private, boolean, isValidReference, (, Reference, reference, ), {, return, !, reference, ., isDeclaration, (]
[., isInlinableFunction, (, n, ), ;, }, return, true, ;, }, private, boolean, isValidReference, (, Reference, reference, ), {, return]
[., getCodingConvention, (, ), ., isInlinableFunction, (, n, ), ;, }, return, true, ;, }, private, boolean, isValidReference, (, Reference]
[), ;, }, return, true, ;, }, private, boolean, isValidReference, (, Reference, reference, ), {, return, !, reference, ., isDeclaration]
[;, }, private, boolean, isValidReference, (, Reference, reference, ), {, return, !, reference, ., isDeclaration, (, ), &&, !, reference]
[;, }, private, boolean, isImmutableAndWellDefinedVariable, (, Var, v, ,, ReferenceCollection, refInfo, ), {, List, <, Reference, >, refSet, =, refInfo]
[&&, !, reference, ., isLvalue, (, ), ;, }, private, boolean, isImmutableAndWellDefinedVariable, (, Var, v, ,, ReferenceCollection, refInfo, ), {]
[&&, !, reference, ., isLvalue, (, ), ;, }, private, boolean, isImmutableAndWellDefinedVariable, (, Var, v, ,, ReferenceCollection, refInfo, ), {]
[., isDeclaration, (, ), &&, !, reference, ., isLvalue, (, ), ;, }, private, boolean, isImmutableAndWellDefinedVariable, (, Var, v, ,]
[;, }, private, boolean, isImmutableAndWellDefinedVariable, (, Var, v, ,, ReferenceCollection, refInfo, ), {, List, <, Reference, >, refSet, =, refInfo]
[;, }, private, boolean, isImmutableAndWellDefinedVariable, (, Var, v, ,, ReferenceCollection, refInfo, ), {, List, <, Reference, >, refSet, =, refInfo]
[., isLvalue, (, ), ;, }, private, boolean, isImmutableAndWellDefinedVariable, (, Var, v, ,, ReferenceCollection, refInfo, ), {, List, <, Reference]
[;, int, startingReadRef, =, 1, ;, Reference, refDecl, =, refSet, ., get, (, 0, ), ;, if, (, !, isValidDeclaration]
[., references, ;, int, startingReadRef, =, 1, ;, Reference, refDecl, =, refSet, ., get, (, 0, ), ;, if, (]
[;, Reference, refDecl, =, refSet, ., get, (, 0, ), ;, if, (, !, isValidDeclaration, (, refDecl, ), ), {]
[;, if, (, !, isValidDeclaration, (, refDecl, ), ), {, return, false, ;, }, boolean, isNeverAssigned, =, refInfo, ., isNeverAssigned]
[., get, (, 0, ), ;, if, (, !, isValidDeclaration, (, refDecl, ), ), {, return, false, ;, }, boolean]
[), ;, if, (, !, isValidDeclaration, (, refDecl, ), ), {, return, false, ;, }, boolean, isNeverAssigned, =, refInfo, .]
[), {, return, false, ;, }, boolean, isNeverAssigned, =, refInfo, ., isNeverAssigned, (, ), ;, if, (, !, isNeverAssigned, )]
[), {, return, false, ;, }, boolean, isNeverAssigned, =, refInfo, ., isNeverAssigned, (, ), ;, if, (, !, isNeverAssigned, )]
[), ), {, return, false, ;, }, boolean, isNeverAssigned, =, refInfo, ., isNeverAssigned, (, ), ;, if, (, !, isNeverAssigned]
[;, }, boolean, isNeverAssigned, =, refInfo, ., isNeverAssigned, (, ), ;, if, (, !, isNeverAssigned, ), {, Reference, refInit, =]
[;, if, (, !, isNeverAssigned, ), {, Reference, refInit, =, refInfo, ., getInitializingReference, (, ), ;, if, (, !, isValidInitialization]
[., isNeverAssigned, (, ), ;, if, (, !, isNeverAssigned, ), {, Reference, refInit, =, refInfo, ., getInitializingReference, (, ), ;]
[), {, Reference, refInit, =, refInfo, ., getInitializingReference, (, ), ;, if, (, !, isValidInitialization, (, refInit, ), ), {]
[), {, Reference, refInit, =, refInfo, ., getInitializingReference, (, ), ;, if, (, !, isValidInitialization, (, refInit, ), ), {]
[;, if, (, !, isValidInitialization, (, refInit, ), ), {, return, false, ;, }, if, (, refDecl, !=, refInit, )]
[., getInitializingReference, (, ), ;, if, (, !, isValidInitialization, (, refInit, ), ), {, return, false, ;, }, if, (]
[), {, return, false, ;, }, if, (, refDecl, !=, refInit, ), {, Preconditions, ., checkState, (, refInit, ==, refSet]
[), {, return, false, ;, }, if, (, refDecl, !=, refInit, ), {, Preconditions, ., checkState, (, refInit, ==, refSet]
[), ), {, return, false, ;, }, if, (, refDecl, !=, refInit, ), {, Preconditions, ., checkState, (, refInit, ==]
[;, }, if, (, refDecl, !=, refInit, ), {, Preconditions, ., checkState, (, refInit, ==, refSet, ., get, (, 1]
[), {, Preconditions, ., checkState, (, refInit, ==, refSet, ., get, (, 1, ), ), ;, startingReadRef, =, 2, ;]
[!=, refInit, ), {, Preconditions, ., checkState, (, refInit, ==, refSet, ., get, (, 1, ), ), ;, startingReadRef, =]
[), {, Preconditions, ., checkState, (, refInit, ==, refSet, ., get, (, 1, ), ), ;, startingReadRef, =, 2, ;]
[;, startingReadRef, =, 2, ;, }, if, (, !, refInfo, ., isWellDefined, (, ), ), {, return, false, ;, }]
[., checkState, (, refInit, ==, refSet, ., get, (, 1, ), ), ;, startingReadRef, =, 2, ;, }, if, (]
[), ;, startingReadRef, =, 2, ;, }, if, (, !, refInfo, ., isWellDefined, (, ), ), {, return, false, ;]
[==, refSet, ., get, (, 1, ), ), ;, startingReadRef, =, 2, ;, }, if, (, !, refInfo, ., isWellDefined]
[), ;, startingReadRef, =, 2, ;, }, if, (, !, refInfo, ., isWellDefined, (, ), ), {, return, false, ;]
[., get, (, 1, ), ), ;, startingReadRef, =, 2, ;, }, if, (, !, refInfo, ., isWellDefined, (, )]
[), ), ;, startingReadRef, =, 2, ;, }, if, (, !, refInfo, ., isWellDefined, (, ), ), {, return, false]
[=, 2, ;, }, if, (, !, refInfo, ., isWellDefined, (, ), ), {, return, false, ;, }, Node, value]
[;, }, if, (, !, refInfo, ., isWellDefined, (, ), ), {, return, false, ;, }, Node, value, =, refInit]
[), {, return, false, ;, }, Node, value, =, refInit, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value]
[), {, return, false, ;, }, Node, value, =, refInit, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value]
[., isWellDefined, (, ), ), {, return, false, ;, }, Node, value, =, refInit, ., getAssignedValue, (, ), ;, Preconditions]
[;, }, Node, value, =, refInit, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, boolean, isImmutableValueWorthInlining]
[;, Preconditions, ., checkNotNull, (, value, ), ;, boolean, isImmutableValueWorthInlining, =, NodeUtil, ., isImmutableValue, (, value, ), &&, (, !]
[., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, boolean, isImmutableValueWorthInlining, =, NodeUtil, ., isImmutableValue, (, value]
[;, boolean, isImmutableValueWorthInlining, =, NodeUtil, ., isImmutableValue, (, value, ), &&, (, !, value, ., isString, (, ), ||, isStringWorthInlining]
[., checkNotNull, (, value, ), ;, boolean, isImmutableValueWorthInlining, =, NodeUtil, ., isImmutableValue, (, value, ), &&, (, !, value, .]
[), ;, boolean, isImmutableValueWorthInlining, =, NodeUtil, ., isImmutableValue, (, value, ), &&, (, !, value, ., isString, (, ), ||]
[;, boolean, isInlinableThisAlias, =, value, ., isThis, (, ), &&, !, refInfo, ., isEscaped, (, ), ;, if, (, !]
[&&, (, !, value, ., isString, (, ), ||, isStringWorthInlining, (, v, ,, refInfo, ., references, ), ), ;, boolean]
[., isImmutableValue, (, value, ), &&, (, !, value, ., isString, (, ), ||, isStringWorthInlining, (, v, ,, refInfo, .]
[), &&, (, !, value, ., isString, (, ), ||, isStringWorthInlining, (, v, ,, refInfo, ., references, ), ), ;]
[;, boolean, isInlinableThisAlias, =, value, ., isThis, (, ), &&, !, refInfo, ., isEscaped, (, ), ;, if, (, !]
[), ;, boolean, isInlinableThisAlias, =, value, ., isThis, (, ), &&, !, refInfo, ., isEscaped, (, ), ;, if, (]
[||, isStringWorthInlining, (, v, ,, refInfo, ., references, ), ), ;, boolean, isInlinableThisAlias, =, value, ., isThis, (, ), &&]
[||, isStringWorthInlining, (, v, ,, refInfo, ., references, ), ), ;, boolean, isInlinableThisAlias, =, value, ., isThis, (, ), &&]
[., isString, (, ), ||, isStringWorthInlining, (, v, ,, refInfo, ., references, ), ), ;, boolean, isInlinableThisAlias, =, value, .]
[), ;, boolean, isInlinableThisAlias, =, value, ., isThis, (, ), &&, !, refInfo, ., isEscaped, (, ), ;, if, (]
[,, refInfo, ., references, ), ), ;, boolean, isInlinableThisAlias, =, value, ., isThis, (, ), &&, !, refInfo, ., isEscaped]
[), ), ;, boolean, isInlinableThisAlias, =, value, ., isThis, (, ), &&, !, refInfo, ., isEscaped, (, ), ;, if]
[., references, ), ), ;, boolean, isInlinableThisAlias, =, value, ., isThis, (, ), &&, !, refInfo, ., isEscaped, (, )]
[;, if, (, !, isImmutableValueWorthInlining, &&, !, isInlinableThisAlias, ), {, return, false, ;, }, }, for, (, int, i, =]
[&&, !, refInfo, ., isEscaped, (, ), ;, if, (, !, isImmutableValueWorthInlining, &&, !, isInlinableThisAlias, ), {, return, false, ;]
[., isThis, (, ), &&, !, refInfo, ., isEscaped, (, ), ;, if, (, !, isImmutableValueWorthInlining, &&, !, isInlinableThisAlias, )]
[;, if, (, !, isImmutableValueWorthInlining, &&, !, isInlinableThisAlias, ), {, return, false, ;, }, }, for, (, int, i, =]
[;, if, (, !, isImmutableValueWorthInlining, &&, !, isInlinableThisAlias, ), {, return, false, ;, }, }, for, (, int, i, =]
[., isEscaped, (, ), ;, if, (, !, isImmutableValueWorthInlining, &&, !, isInlinableThisAlias, ), {, return, false, ;, }, }, for]
[), {, return, false, ;, }, }, for, (, int, i, =, startingReadRef, ;, i, <, refSet, ., size, (]
[&&, !, isInlinableThisAlias, ), {, return, false, ;, }, }, for, (, int, i, =, startingReadRef, ;, i, <, refSet]
[&&, !, isInlinableThisAlias, ), {, return, false, ;, }, }, for, (, int, i, =, startingReadRef, ;, i, <, refSet]
[), {, return, false, ;, }, }, for, (, int, i, =, startingReadRef, ;, i, <, refSet, ., size, (]
[), {, return, false, ;, }, }, for, (, int, i, =, startingReadRef, ;, i, <, refSet, ., size, (]
[;, }, }, for, (, int, i, =, startingReadRef, ;, i, <, refSet, ., size, (, ), ;, i, ++]
[;, i, <, refSet, ., size, (, ), ;, i, ++, ), {, Reference, ref, =, refSet, ., get, (]
[;, i, ++, ), {, Reference, ref, =, refSet, ., get, (, i, ), ;, if, (, !, isValidReference, (]
[<, refSet, ., size, (, ), ;, i, ++, ), {, Reference, ref, =, refSet, ., get, (, i, )]
[;, i, ++, ), {, Reference, ref, =, refSet, ., get, (, i, ), ;, if, (, !, isValidReference, (]
[., size, (, ), ;, i, ++, ), {, Reference, ref, =, refSet, ., get, (, i, ), ;, if]
[), {, Reference, ref, =, refSet, ., get, (, i, ), ;, if, (, !, isValidReference, (, ref, ), )]
[++, ), {, Reference, ref, =, refSet, ., get, (, i, ), ;, if, (, !, isValidReference, (, ref, )]
[;, if, (, !, isValidReference, (, ref, ), ), {, return, false, ;, }, }, return, true, ;, }, }]
[., get, (, i, ), ;, if, (, !, isValidReference, (, ref, ), ), {, return, false, ;, }, }]
[), ;, if, (, !, isValidReference, (, ref, ), ), {, return, false, ;, }, }, return, true, ;, }]
[), {, return, false, ;, }, }, return, true, ;, }, }, }]
[), {, return, false, ;, }, }, return, true, ;, }, }, }]
[), ), {, return, false, ;, }, }, return, true, ;, }, }, }]
[;, }, }, return, true, ;, }, }, }]
[;, }, }, }]
