[jfree, ., data, ., Range, ;, public, class, CombinedRangeXYPlot, extends, XYPlot, implements, PlotChangeListener, {, private, static, final, long, serialVersionUID, =]
[., data, ., Range, ;, public, class, CombinedRangeXYPlot, extends, XYPlot, implements, PlotChangeListener, {, private, static, final, long, serialVersionUID, =, -]
[implements, PlotChangeListener, {, private, static, final, long, serialVersionUID, =, -, 5177814085082031168L, ;, private, List, subplots, ;, private, double, gap, =]
[private, double, gap, =, 5.0, ;, private, transient, Rectangle2D, [, ], subplotAreas, ;, public, CombinedRangeXYPlot, (, ), {, this, (]
[), {, this, (, new, NumberAxis, (, ), ), ;, }, public, CombinedRangeXYPlot, (, ValueAxis, rangeAxis, ), {, super, (]
[this, (, new, NumberAxis, (, ), ), ;, }, public, CombinedRangeXYPlot, (, ValueAxis, rangeAxis, ), {, super, (, null, ,]
[new, NumberAxis, (, ), ), ;, }, public, CombinedRangeXYPlot, (, ValueAxis, rangeAxis, ), {, super, (, null, ,, null, ,]
[(, ), ), ;, }, public, CombinedRangeXYPlot, (, ValueAxis, rangeAxis, ), {, super, (, null, ,, null, ,, rangeAxis, ,]
[;, }, public, CombinedRangeXYPlot, (, ValueAxis, rangeAxis, ), {, super, (, null, ,, null, ,, rangeAxis, ,, null, ), ;]
[;, }, public, CombinedRangeXYPlot, (, ValueAxis, rangeAxis, ), {, super, (, null, ,, null, ,, rangeAxis, ,, null, ), ;]
[(, ValueAxis, rangeAxis, ), {, super, (, null, ,, null, ,, rangeAxis, ,, null, ), ;, this, ., subplots, =]
[., subplots, =, new, java, ., util, ., ArrayList, (, ), ;, }, public, String, getPlotType, (, ), {, return]
[., subplots, =, new, java, ., util, ., ArrayList, (, ), ;, }, public, String, getPlotType, (, ), {, return]
[java, ., util, ., ArrayList, (, ), ;, }, public, String, getPlotType, (, ), {, return, localizationResources, ., getString, (]
[getPlotType, (, ), {, return, localizationResources, ., getString, (, "Combined_Range_XYPlot", ), ;, }, public, double, getGap, (, ), {, return]
[getPlotType, (, ), {, return, localizationResources, ., getString, (, "Combined_Range_XYPlot", ), ;, }, public, double, getGap, (, ), {, return]
[public, double, getGap, (, ), {, return, this, ., gap, ;, }, public, void, setGap, (, double, gap, ), {]
[public, double, getGap, (, ), {, return, this, ., gap, ;, }, public, void, setGap, (, double, gap, ), {]
[), {, return, this, ., gap, ;, }, public, void, setGap, (, double, gap, ), {, this, ., gap, =]
[(, double, gap, ), {, this, ., gap, =, gap, ;, }, public, void, add, (, XYPlot, subplot, ), {]
[gap, ), {, this, ., gap, =, gap, ;, }, public, void, add, (, XYPlot, subplot, ), {, add, (]
[{, this, ., gap, =, gap, ;, }, public, void, add, (, XYPlot, subplot, ), {, add, (, subplot, ,]
[(, subplot, ,, 1, ), ;, }, public, void, add, (, XYPlot, subplot, ,, int, weight, ), {, if, (]
[(, subplot, ,, 1, ), ;, }, public, void, add, (, XYPlot, subplot, ,, int, weight, ), {, if, (]
[,, 1, ), ;, }, public, void, add, (, XYPlot, subplot, ,, int, weight, ), {, if, (, weight, <=]
[void, add, (, XYPlot, subplot, ,, int, weight, ), {, if, (, weight, <=, 0, ), {, String, msg, =]
[XYPlot, subplot, ,, int, weight, ), {, if, (, weight, <=, 0, ), {, String, msg, =, "The 'weight' must be positive.", ;, throw]
[int, weight, ), {, if, (, weight, <=, 0, ), {, String, msg, =, "The 'weight' must be positive.", ;, throw, new, IllegalArgumentException, (]
[if, (, weight, <=, 0, ), {, String, msg, =, "The 'weight' must be positive.", ;, throw, new, IllegalArgumentException, (, msg, ), ;, }]
[if, (, weight, <=, 0, ), {, String, msg, =, "The 'weight' must be positive.", ;, throw, new, IllegalArgumentException, (, msg, ), ;, }]
[0, ), {, String, msg, =, "The 'weight' must be positive.", ;, throw, new, IllegalArgumentException, (, msg, ), ;, }, subplot, ., setParent, (]
[String, msg, =, "The 'weight' must be positive.", ;, throw, new, IllegalArgumentException, (, msg, ), ;, }, subplot, ., setParent, (, this, ), ;]
[String, msg, =, "The 'weight' must be positive.", ;, throw, new, IllegalArgumentException, (, msg, ), ;, }, subplot, ., setParent, (, this, ), ;]
[;, throw, new, IllegalArgumentException, (, msg, ), ;, }, subplot, ., setParent, (, this, ), ;, subplot, ., setWeight, (]
[IllegalArgumentException, (, msg, ), ;, }, subplot, ., setParent, (, this, ), ;, subplot, ., setWeight, (, weight, ), ;]
[IllegalArgumentException, (, msg, ), ;, }, subplot, ., setParent, (, this, ), ;, subplot, ., setWeight, (, weight, ), ;]
[;, }, subplot, ., setParent, (, this, ), ;, subplot, ., setWeight, (, weight, ), ;, subplot, ., setInsets, (]
[., setParent, (, this, ), ;, subplot, ., setWeight, (, weight, ), ;, subplot, ., setInsets, (, new, RectangleInsets, (]
[(, this, ), ;, subplot, ., setWeight, (, weight, ), ;, subplot, ., setInsets, (, new, RectangleInsets, (, 0.0, ,]
[), ;, subplot, ., setWeight, (, weight, ), ;, subplot, ., setInsets, (, new, RectangleInsets, (, 0.0, ,, 0.0, ,]
[subplot, ., setWeight, (, weight, ), ;, subplot, ., setInsets, (, new, RectangleInsets, (, 0.0, ,, 0.0, ,, 0.0, ,]
[weight, ), ;, subplot, ., setInsets, (, new, RectangleInsets, (, 0.0, ,, 0.0, ,, 0.0, ,, 0.0, ), ), ;]
[weight, ), ;, subplot, ., setInsets, (, new, RectangleInsets, (, 0.0, ,, 0.0, ,, 0.0, ,, 0.0, ), ), ;]
[., setInsets, (, new, RectangleInsets, (, 0.0, ,, 0.0, ,, 0.0, ,, 0.0, ), ), ;, subplot, ., setRangeAxis, (]
[new, RectangleInsets, (, 0.0, ,, 0.0, ,, 0.0, ,, 0.0, ), ), ;, subplot, ., setRangeAxis, (, null, ), ;]
[new, RectangleInsets, (, 0.0, ,, 0.0, ,, 0.0, ,, 0.0, ), ), ;, subplot, ., setRangeAxis, (, null, ), ;]
[,, 0.0, ,, 0.0, ,, 0.0, ), ), ;, subplot, ., setRangeAxis, (, null, ), ;, subplot, ., addChangeListener, (]
[0.0, ,, 0.0, ), ), ;, subplot, ., setRangeAxis, (, null, ), ;, subplot, ., addChangeListener, (, this, ), ;]
[0.0, ,, 0.0, ), ), ;, subplot, ., setRangeAxis, (, null, ), ;, subplot, ., addChangeListener, (, this, ), ;]
[0.0, ,, 0.0, ), ), ;, subplot, ., setRangeAxis, (, null, ), ;, subplot, ., addChangeListener, (, this, ), ;]
[subplot, ., setRangeAxis, (, null, ), ;, subplot, ., addChangeListener, (, this, ), ;, this, ., subplots, ., add, (]
[(, null, ), ;, subplot, ., addChangeListener, (, this, ), ;, this, ., subplots, ., add, (, subplot, ), ;]
[subplot, ., addChangeListener, (, this, ), ;, this, ., subplots, ., add, (, subplot, ), ;, configureRangeAxes, (, ), ;]
[;, configureRangeAxes, (, ), ;, fireChangeEvent, (, ), ;, }, public, void, remove, (, XYPlot, subplot, ), {, if, (]
[;, configureRangeAxes, (, ), ;, fireChangeEvent, (, ), ;, }, public, void, remove, (, XYPlot, subplot, ), {, if, (]
[(, ), ;, fireChangeEvent, (, ), ;, }, public, void, remove, (, XYPlot, subplot, ), {, if, (, subplot, ==]
[(, ), ;, }, public, void, remove, (, XYPlot, subplot, ), {, if, (, subplot, ==, null, ), {, throw]
[}, public, void, remove, (, XYPlot, subplot, ), {, if, (, subplot, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, subplot, ==, null, ), {, throw, new, IllegalArgumentException, (, " Null 'subplot' argument.", ), ;, }, int, position, =]
[{, if, (, subplot, ==, null, ), {, throw, new, IllegalArgumentException, (, " Null 'subplot' argument.", ), ;, }, int, position, =, -]
[null, ), {, throw, new, IllegalArgumentException, (, " Null 'subplot' argument.", ), ;, }, int, position, =, -, 1, ;, int, size, =]
[null, ), {, throw, new, IllegalArgumentException, (, " Null 'subplot' argument.", ), ;, }, int, position, =, -, 1, ;, int, size, =]
[null, ), {, throw, new, IllegalArgumentException, (, " Null 'subplot' argument.", ), ;, }, int, position, =, -, 1, ;, int, size, =]
[int, position, =, -, 1, ;, int, size, =, this, ., subplots, ., size, (, ), ;, int, i, =]
[1, ;, int, size, =, this, ., subplots, ., size, (, ), ;, int, i, =, 0, ;, while, (]
[1, ;, int, size, =, this, ., subplots, ., size, (, ), ;, int, i, =, 0, ;, while, (]
[1, ;, int, size, =, this, ., subplots, ., size, (, ), ;, int, i, =, 0, ;, while, (]
[int, size, =, this, ., subplots, ., size, (, ), ;, int, i, =, 0, ;, while, (, position, ==]
[size, =, this, ., subplots, ., size, (, ), ;, int, i, =, 0, ;, while, (, position, ==, -]
[this, ., subplots, ., size, (, ), ;, int, i, =, 0, ;, while, (, position, ==, -, 1, &&]
[this, ., subplots, ., size, (, ), ;, int, i, =, 0, ;, while, (, position, ==, -, 1, &&]
[subplots, ., size, (, ), ;, int, i, =, 0, ;, while, (, position, ==, -, 1, &&, i, <]
[;, int, i, =, 0, ;, while, (, position, ==, -, 1, &&, i, <, size, ), {, if, (]
[;, int, i, =, 0, ;, while, (, position, ==, -, 1, &&, i, <, size, ), {, if, (]
[;, int, i, =, 0, ;, while, (, position, ==, -, 1, &&, i, <, size, ), {, if, (]
[;, int, i, =, 0, ;, while, (, position, ==, -, 1, &&, i, <, size, ), {, if, (]
[while, (, position, ==, -, 1, &&, i, <, size, ), {, if, (, this, ., subplots, ., get, (]
[==, -, 1, &&, i, <, size, ), {, if, (, this, ., subplots, ., get, (, i, ), ==]
[&&, i, <, size, ), {, if, (, this, ., subplots, ., get, (, i, ), ==, subplot, ), {]
[<, size, ), {, if, (, this, ., subplots, ., get, (, i, ), ==, subplot, ), {, position, =]
[{, if, (, this, ., subplots, ., get, (, i, ), ==, subplot, ), {, position, =, i, ;, }]
[{, if, (, this, ., subplots, ., get, (, i, ), ==, subplot, ), {, position, =, i, ;, }]
[., get, (, i, ), ==, subplot, ), {, position, =, i, ;, }, i, ++, ;, }, if, (]
[., get, (, i, ), ==, subplot, ), {, position, =, i, ;, }, i, ++, ;, }, if, (]
[(, i, ), ==, subplot, ), {, position, =, i, ;, }, i, ++, ;, }, if, (, position, !=]
[i, ), ==, subplot, ), {, position, =, i, ;, }, i, ++, ;, }, if, (, position, !=, -]
[subplot, ), {, position, =, i, ;, }, i, ++, ;, }, if, (, position, !=, -, 1, ), {]
[subplot, ), {, position, =, i, ;, }, i, ++, ;, }, if, (, position, !=, -, 1, ), {]
[subplot, ), {, position, =, i, ;, }, i, ++, ;, }, if, (, position, !=, -, 1, ), {]
[;, }, i, ++, ;, }, if, (, position, !=, -, 1, ), {, this, ., subplots, ., remove, (]
[++, ;, }, if, (, position, !=, -, 1, ), {, this, ., subplots, ., remove, (, position, ), ;]
[++, ;, }, if, (, position, !=, -, 1, ), {, this, ., subplots, ., remove, (, position, ), ;]
[(, position, !=, -, 1, ), {, this, ., subplots, ., remove, (, position, ), ;, subplot, ., setParent, (]
[-, 1, ), {, this, ., subplots, ., remove, (, position, ), ;, subplot, ., setParent, (, null, ), ;]
[-, 1, ), {, this, ., subplots, ., remove, (, position, ), ;, subplot, ., setParent, (, null, ), ;]
[this, ., subplots, ., remove, (, position, ), ;, subplot, ., setParent, (, null, ), ;, subplot, ., removeChangeListener, (]
[., remove, (, position, ), ;, subplot, ., setParent, (, null, ), ;, subplot, ., removeChangeListener, (, this, ), ;]
[), ;, subplot, ., setParent, (, null, ), ;, subplot, ., removeChangeListener, (, this, ), ;, configureRangeAxes, (, ), ;]
[), ;, configureRangeAxes, (, ), ;, fireChangeEvent, (, ), ;, }, }, public, List, getSubplots, (, ), {, if, (]
[), ;, configureRangeAxes, (, ), ;, fireChangeEvent, (, ), ;, }, }, public, List, getSubplots, (, ), {, if, (]
[), ;, configureRangeAxes, (, ), ;, fireChangeEvent, (, ), ;, }, }, public, List, getSubplots, (, ), {, if, (]
[), ;, fireChangeEvent, (, ), ;, }, }, public, List, getSubplots, (, ), {, if, (, this, ., subplots, !=]
[), ;, }, }, public, List, getSubplots, (, ), {, if, (, this, ., subplots, !=, null, ), {, return]
[), ;, }, }, public, List, getSubplots, (, ), {, if, (, this, ., subplots, !=, null, ), {, return]
[public, List, getSubplots, (, ), {, if, (, this, ., subplots, !=, null, ), {, return, Collections, ., unmodifiableList, (]
[public, List, getSubplots, (, ), {, if, (, this, ., subplots, !=, null, ), {, return, Collections, ., unmodifiableList, (]
[., subplots, !=, null, ), {, return, Collections, ., unmodifiableList, (, this, ., subplots, ), ;, }, else, {, return]
[., subplots, !=, null, ), {, return, Collections, ., unmodifiableList, (, this, ., subplots, ), ;, }, else, {, return]
[Collections, ., EMPTY_LIST, ;, }, }, protected, AxisSpace, calculateAxisSpace, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ), {, AxisSpace, space, =]
[calculateAxisSpace, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ), {, AxisSpace, space, =, new, AxisSpace, (, ), ;, PlotOrientation, orientation, =]
[), {, AxisSpace, space, =, new, AxisSpace, (, ), ;, PlotOrientation, orientation, =, getOrientation, (, ), ;, AxisSpace, fixed, =]
[AxisSpace, (, ), ;, PlotOrientation, orientation, =, getOrientation, (, ), ;, AxisSpace, fixed, =, getFixedRangeAxisSpace, (, ), ;, if, (]
[AxisSpace, (, ), ;, PlotOrientation, orientation, =, getOrientation, (, ), ;, AxisSpace, fixed, =, getFixedRangeAxisSpace, (, ), ;, if, (]
[), ;, PlotOrientation, orientation, =, getOrientation, (, ), ;, AxisSpace, fixed, =, getFixedRangeAxisSpace, (, ), ;, if, (, fixed, !=]
[getOrientation, (, ), ;, AxisSpace, fixed, =, getFixedRangeAxisSpace, (, ), ;, if, (, fixed, !=, null, ), {, if, (]
[getOrientation, (, ), ;, AxisSpace, fixed, =, getFixedRangeAxisSpace, (, ), ;, if, (, fixed, !=, null, ), {, if, (]
[), ;, AxisSpace, fixed, =, getFixedRangeAxisSpace, (, ), ;, if, (, fixed, !=, null, ), {, if, (, orientation, ==]
[), ;, AxisSpace, fixed, =, getFixedRangeAxisSpace, (, ), ;, if, (, fixed, !=, null, ), {, if, (, orientation, ==]
[getFixedRangeAxisSpace, (, ), ;, if, (, fixed, !=, null, ), {, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {]
[getFixedRangeAxisSpace, (, ), ;, if, (, fixed, !=, null, ), {, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {]
[if, (, fixed, !=, null, ), {, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, space, ., setLeft, (]
[if, (, fixed, !=, null, ), {, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, space, ., setLeft, (]
[if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, space, ., setLeft, (, fixed, ., getLeft, (, ), ), ;]
[if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, space, ., setLeft, (, fixed, ., getLeft, (, ), ), ;]
[PlotOrientation, ., VERTICAL, ), {, space, ., setLeft, (, fixed, ., getLeft, (, ), ), ;, space, ., setRight, (]
[PlotOrientation, ., VERTICAL, ), {, space, ., setLeft, (, fixed, ., getLeft, (, ), ), ;, space, ., setRight, (]
[getLeft, (, ), ), ;, space, ., setRight, (, fixed, ., getRight, (, ), ), ;, }, else, if, (]
[getLeft, (, ), ), ;, space, ., setRight, (, fixed, ., getRight, (, ), ), ;, }, else, if, (]
[), ), ;, space, ., setRight, (, fixed, ., getRight, (, ), ), ;, }, else, if, (, orientation, ==]
[), ), ;, space, ., setRight, (, fixed, ., getRight, (, ), ), ;, }, else, if, (, orientation, ==]
[setRight, (, fixed, ., getRight, (, ), ), ;, }, else, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {]
[setRight, (, fixed, ., getRight, (, ), ), ;, }, else, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {]
[getRight, (, ), ), ;, }, else, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, space, ., setTop, (]
[getRight, (, ), ), ;, }, else, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, space, ., setTop, (]
[if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, space, ., setTop, (, fixed, ., getTop, (, ), ), ;]
[if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, space, ., setTop, (, fixed, ., getTop, (, ), ), ;]
[PlotOrientation, ., HORIZONTAL, ), {, space, ., setTop, (, fixed, ., getTop, (, ), ), ;, space, ., setBottom, (]
[PlotOrientation, ., HORIZONTAL, ), {, space, ., setTop, (, fixed, ., getTop, (, ), ), ;, space, ., setBottom, (]
[), ;, space, ., setBottom, (, fixed, ., getBottom, (, ), ), ;, }, }, else, {, ValueAxis, valueAxis, =]
[., getBottom, (, ), ), ;, }, }, else, {, ValueAxis, valueAxis, =, getRangeAxis, (, ), ;, RectangleEdge, valueEdge, =]
[., getBottom, (, ), ), ;, }, }, else, {, ValueAxis, valueAxis, =, getRangeAxis, (, ), ;, RectangleEdge, valueEdge, =]
[), ;, }, }, else, {, ValueAxis, valueAxis, =, getRangeAxis, (, ), ;, RectangleEdge, valueEdge, =, Plot, ., resolveRangeAxisLocation, (]
[else, {, ValueAxis, valueAxis, =, getRangeAxis, (, ), ;, RectangleEdge, valueEdge, =, Plot, ., resolveRangeAxisLocation, (, getRangeAxisLocation, (, ), ,]
[getRangeAxis, (, ), ;, RectangleEdge, valueEdge, =, Plot, ., resolveRangeAxisLocation, (, getRangeAxisLocation, (, ), ,, orientation, ), ;, if, (]
[getRangeAxis, (, ), ;, RectangleEdge, valueEdge, =, Plot, ., resolveRangeAxisLocation, (, getRangeAxisLocation, (, ), ,, orientation, ), ;, if, (]
[), ;, RectangleEdge, valueEdge, =, Plot, ., resolveRangeAxisLocation, (, getRangeAxisLocation, (, ), ,, orientation, ), ;, if, (, valueAxis, !=]
[valueEdge, =, Plot, ., resolveRangeAxisLocation, (, getRangeAxisLocation, (, ), ,, orientation, ), ;, if, (, valueAxis, !=, null, ), {]
[Plot, ., resolveRangeAxisLocation, (, getRangeAxisLocation, (, ), ,, orientation, ), ;, if, (, valueAxis, !=, null, ), {, space, =]
[Plot, ., resolveRangeAxisLocation, (, getRangeAxisLocation, (, ), ,, orientation, ), ;, if, (, valueAxis, !=, null, ), {, space, =]
[getRangeAxisLocation, (, ), ,, orientation, ), ;, if, (, valueAxis, !=, null, ), {, space, =, valueAxis, ., reserveSpace, (]
[), ,, orientation, ), ;, if, (, valueAxis, !=, null, ), {, space, =, valueAxis, ., reserveSpace, (, g2, ,]
[orientation, ), ;, if, (, valueAxis, !=, null, ), {, space, =, valueAxis, ., reserveSpace, (, g2, ,, this, ,]
[;, if, (, valueAxis, !=, null, ), {, space, =, valueAxis, ., reserveSpace, (, g2, ,, this, ,, plotArea, ,]
[(, valueAxis, !=, null, ), {, space, =, valueAxis, ., reserveSpace, (, g2, ,, this, ,, plotArea, ,, valueEdge, ,]
[valueAxis, ., reserveSpace, (, g2, ,, this, ,, plotArea, ,, valueEdge, ,, space, ), ;, }, }, Rectangle2D, adjustedPlotArea, =]
[valueAxis, ., reserveSpace, (, g2, ,, this, ,, plotArea, ,, valueEdge, ,, space, ), ;, }, }, Rectangle2D, adjustedPlotArea, =]
[g2, ,, this, ,, plotArea, ,, valueEdge, ,, space, ), ;, }, }, Rectangle2D, adjustedPlotArea, =, space, ., shrink, (]
[this, ,, plotArea, ,, valueEdge, ,, space, ), ;, }, }, Rectangle2D, adjustedPlotArea, =, space, ., shrink, (, plotArea, ,]
[space, ), ;, }, }, Rectangle2D, adjustedPlotArea, =, space, ., shrink, (, plotArea, ,, null, ), ;, int, n, =]
[space, ), ;, }, }, Rectangle2D, adjustedPlotArea, =, space, ., shrink, (, plotArea, ,, null, ), ;, int, n, =]
[space, ), ;, }, }, Rectangle2D, adjustedPlotArea, =, space, ., shrink, (, plotArea, ,, null, ), ;, int, n, =]
[(, plotArea, ,, null, ), ;, int, n, =, this, ., subplots, ., size, (, ), ;, int, totalWeight, =]
[n, =, this, ., subplots, ., size, (, ), ;, int, totalWeight, =, 0, ;, for, (, int, i, =]
[this, ., subplots, ., size, (, ), ;, int, totalWeight, =, 0, ;, for, (, int, i, =, 0, ;]
[this, ., subplots, ., size, (, ), ;, int, totalWeight, =, 0, ;, for, (, int, i, =, 0, ;]
[subplots, ., size, (, ), ;, int, totalWeight, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[size, (, ), ;, int, totalWeight, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[size, (, ), ;, int, totalWeight, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, XYPlot, sub, =]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, XYPlot, sub, =, (, XYPlot, )]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, XYPlot, sub, =, (, XYPlot, )]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, XYPlot, sub, =, (, XYPlot, )]
[i, <, n, ;, i, ++, ), {, XYPlot, sub, =, (, XYPlot, ), this, ., subplots, ., get, (]
[;, i, ++, ), {, XYPlot, sub, =, (, XYPlot, ), this, ., subplots, ., get, (, i, ), ;]
[++, ), {, XYPlot, sub, =, (, XYPlot, ), this, ., subplots, ., get, (, i, ), ;, totalWeight, +=]
[++, ), {, XYPlot, sub, =, (, XYPlot, ), this, ., subplots, ., get, (, i, ), ;, totalWeight, +=]
[XYPlot, ), this, ., subplots, ., get, (, i, ), ;, totalWeight, +=, sub, ., getWeight, (, ), ;, }]
[XYPlot, ), this, ., subplots, ., get, (, i, ), ;, totalWeight, +=, sub, ., getWeight, (, ), ;, }]
[subplots, ., get, (, i, ), ;, totalWeight, +=, sub, ., getWeight, (, ), ;, }, this, ., subplotAreas, =]
[(, i, ), ;, totalWeight, +=, sub, ., getWeight, (, ), ;, }, this, ., subplotAreas, =, new, Rectangle2D, []
[sub, ., getWeight, (, ), ;, }, this, ., subplotAreas, =, new, Rectangle2D, [, n, ], ;, double, x, =]
[sub, ., getWeight, (, ), ;, }, this, ., subplotAreas, =, new, Rectangle2D, [, n, ], ;, double, x, =]
[subplotAreas, =, new, Rectangle2D, [, n, ], ;, double, x, =, adjustedPlotArea, ., getX, (, ), ;, double, y, =]
[subplotAreas, =, new, Rectangle2D, [, n, ], ;, double, x, =, adjustedPlotArea, ., getX, (, ), ;, double, y, =]
[x, =, adjustedPlotArea, ., getX, (, ), ;, double, y, =, adjustedPlotArea, ., getY, (, ), ;, double, usableSize, =]
[getX, (, ), ;, double, y, =, adjustedPlotArea, ., getY, (, ), ;, double, usableSize, =, 0.0, ;, if, (]
[getX, (, ), ;, double, y, =, adjustedPlotArea, ., getY, (, ), ;, double, usableSize, =, 0.0, ;, if, (]
[), ;, double, y, =, adjustedPlotArea, ., getY, (, ), ;, double, usableSize, =, 0.0, ;, if, (, orientation, ==]
[), ;, double, y, =, adjustedPlotArea, ., getY, (, ), ;, double, usableSize, =, 0.0, ;, if, (, orientation, ==]
[adjustedPlotArea, ., getY, (, ), ;, double, usableSize, =, 0.0, ;, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {]
[getY, (, ), ;, double, usableSize, =, 0.0, ;, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, usableSize, =]
[getY, (, ), ;, double, usableSize, =, 0.0, ;, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, usableSize, =]
[getY, (, ), ;, double, usableSize, =, 0.0, ;, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, usableSize, =]
[=, 0.0, ;, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, usableSize, =, adjustedPlotArea, ., getWidth, (, ), -]
[=, 0.0, ;, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, usableSize, =, adjustedPlotArea, ., getWidth, (, ), -]
[=, 0.0, ;, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, usableSize, =, adjustedPlotArea, ., getWidth, (, ), -]
[(, orientation, ==, PlotOrientation, ., VERTICAL, ), {, usableSize, =, adjustedPlotArea, ., getWidth, (, ), -, this, ., gap, *]
[orientation, ==, PlotOrientation, ., VERTICAL, ), {, usableSize, =, adjustedPlotArea, ., getWidth, (, ), -, this, ., gap, *, (]
[orientation, ==, PlotOrientation, ., VERTICAL, ), {, usableSize, =, adjustedPlotArea, ., getWidth, (, ), -, this, ., gap, *, (]
[PlotOrientation, ., VERTICAL, ), {, usableSize, =, adjustedPlotArea, ., getWidth, (, ), -, this, ., gap, *, (, n, -]
[adjustedPlotArea, ., getWidth, (, ), -, this, ., gap, *, (, n, -, 1, ), ;, }, else, if, (]
[adjustedPlotArea, ., getWidth, (, ), -, this, ., gap, *, (, n, -, 1, ), ;, }, else, if, (]
[getWidth, (, ), -, this, ., gap, *, (, n, -, 1, ), ;, }, else, if, (, orientation, ==]
[getWidth, (, ), -, this, ., gap, *, (, n, -, 1, ), ;, }, else, if, (, orientation, ==]
[., gap, *, (, n, -, 1, ), ;, }, else, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {]
[*, (, n, -, 1, ), ;, }, else, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, usableSize, =]
[*, (, n, -, 1, ), ;, }, else, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, usableSize, =]
[*, (, n, -, 1, ), ;, }, else, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, usableSize, =]
[;, }, else, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, usableSize, =, adjustedPlotArea, ., getHeight, (, ), -]
[;, }, else, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, usableSize, =, adjustedPlotArea, ., getHeight, (, ), -]
[;, }, else, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, usableSize, =, adjustedPlotArea, ., getHeight, (, ), -]
[(, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, usableSize, =, adjustedPlotArea, ., getHeight, (, ), -, this, ., gap, *]
[orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, usableSize, =, adjustedPlotArea, ., getHeight, (, ), -, this, ., gap, *, (]
[orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, usableSize, =, adjustedPlotArea, ., getHeight, (, ), -, this, ., gap, *, (]
[PlotOrientation, ., HORIZONTAL, ), {, usableSize, =, adjustedPlotArea, ., getHeight, (, ), -, this, ., gap, *, (, n, -]
[getHeight, (, ), -, this, ., gap, *, (, n, -, 1, ), ;, }, for, (, int, i, =]
[), -, this, ., gap, *, (, n, -, 1, ), ;, }, for, (, int, i, =, 0, ;]
[), -, this, ., gap, *, (, n, -, 1, ), ;, }, for, (, int, i, =, 0, ;]
[this, ., gap, *, (, n, -, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[gap, *, (, n, -, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;]
[gap, *, (, n, -, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, XYPlot, plot, =]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, XYPlot, plot, =, (, XYPlot, )]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, XYPlot, plot, =, (, XYPlot, )]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, XYPlot, plot, =, (, XYPlot, )]
[i, <, n, ;, i, ++, ), {, XYPlot, plot, =, (, XYPlot, ), this, ., subplots, ., get, (]
[++, ), {, XYPlot, plot, =, (, XYPlot, ), this, ., subplots, ., get, (, i, ), ;, if, (]
[++, ), {, XYPlot, plot, =, (, XYPlot, ), this, ., subplots, ., get, (, i, ), ;, if, (]
[{, XYPlot, plot, =, (, XYPlot, ), this, ., subplots, ., get, (, i, ), ;, if, (, orientation, ==]
[{, XYPlot, plot, =, (, XYPlot, ), this, ., subplots, ., get, (, i, ), ;, if, (, orientation, ==]
[., subplots, ., get, (, i, ), ;, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, double, w, =]
[., subplots, ., get, (, i, ), ;, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, double, w, =]
[., subplots, ., get, (, i, ), ;, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, double, w, =]
[., get, (, i, ), ;, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, double, w, =, usableSize, *]
[., get, (, i, ), ;, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, double, w, =, usableSize, *]
[if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, double, w, =, usableSize, *, plot, ., getWeight, (, ), /]
[orientation, ==, PlotOrientation, ., VERTICAL, ), {, double, w, =, usableSize, *, plot, ., getWeight, (, ), /, totalWeight, ;]
[orientation, ==, PlotOrientation, ., VERTICAL, ), {, double, w, =, usableSize, *, plot, ., getWeight, (, ), /, totalWeight, ;]
[orientation, ==, PlotOrientation, ., VERTICAL, ), {, double, w, =, usableSize, *, plot, ., getWeight, (, ), /, totalWeight, ;]
[VERTICAL, ), {, double, w, =, usableSize, *, plot, ., getWeight, (, ), /, totalWeight, ;, this, ., subplotAreas, []
[double, w, =, usableSize, *, plot, ., getWeight, (, ), /, totalWeight, ;, this, ., subplotAreas, [, i, ], =]
[plot, ., getWeight, (, ), /, totalWeight, ;, this, ., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (]
[getWeight, (, ), /, totalWeight, ;, this, ., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (, x, ,]
[), /, totalWeight, ;, this, ., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (, x, ,, y, ,]
[totalWeight, ;, this, ., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (, x, ,, y, ,, w, ,]
[totalWeight, ;, this, ., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (, x, ,, y, ,, w, ,]
[], =, new, Rectangle2D, ., Double, (, x, ,, y, ,, w, ,, adjustedPlotArea, ., getHeight, (, ), ), ;]
[new, Rectangle2D, ., Double, (, x, ,, y, ,, w, ,, adjustedPlotArea, ., getHeight, (, ), ), ;, x, =]
[new, Rectangle2D, ., Double, (, x, ,, y, ,, w, ,, adjustedPlotArea, ., getHeight, (, ), ), ;, x, =]
[new, Rectangle2D, ., Double, (, x, ,, y, ,, w, ,, adjustedPlotArea, ., getHeight, (, ), ), ;, x, =]
[., Double, (, x, ,, y, ,, w, ,, adjustedPlotArea, ., getHeight, (, ), ), ;, x, =, x, +]
[(, x, ,, y, ,, w, ,, adjustedPlotArea, ., getHeight, (, ), ), ;, x, =, x, +, w, +]
[(, x, ,, y, ,, w, ,, adjustedPlotArea, ., getHeight, (, ), ), ;, x, =, x, +, w, +]
[., getHeight, (, ), ), ;, x, =, x, +, w, +, this, ., gap, ;, }, else, if, (]
[., getHeight, (, ), ), ;, x, =, x, +, w, +, this, ., gap, ;, }, else, if, (]
[(, ), ), ;, x, =, x, +, w, +, this, ., gap, ;, }, else, if, (, orientation, ==]
[(, ), ), ;, x, =, x, +, w, +, this, ., gap, ;, }, else, if, (, orientation, ==]
[w, +, this, ., gap, ;, }, else, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, double, h, =]
[w, +, this, ., gap, ;, }, else, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, double, h, =]
[w, +, this, ., gap, ;, }, else, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, double, h, =]
[this, ., gap, ;, }, else, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, double, h, =, usableSize, *]
[this, ., gap, ;, }, else, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, double, h, =, usableSize, *]
[if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, double, h, =, usableSize, *, plot, ., getWeight, (, ), /]
[orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, double, h, =, usableSize, *, plot, ., getWeight, (, ), /, totalWeight, ;]
[orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, double, h, =, usableSize, *, plot, ., getWeight, (, ), /, totalWeight, ;]
[orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, double, h, =, usableSize, *, plot, ., getWeight, (, ), /, totalWeight, ;]
[HORIZONTAL, ), {, double, h, =, usableSize, *, plot, ., getWeight, (, ), /, totalWeight, ;, this, ., subplotAreas, []
[double, h, =, usableSize, *, plot, ., getWeight, (, ), /, totalWeight, ;, this, ., subplotAreas, [, i, ], =]
[plot, ., getWeight, (, ), /, totalWeight, ;, this, ., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (]
[getWeight, (, ), /, totalWeight, ;, this, ., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (, x, ,]
[), /, totalWeight, ;, this, ., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (, x, ,, y, ,]
[), /, totalWeight, ;, this, ., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (, x, ,, y, ,]
[subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (, x, ,, y, ,, adjustedPlotArea, ., getWidth, (, ), ,]
[], =, new, Rectangle2D, ., Double, (, x, ,, y, ,, adjustedPlotArea, ., getWidth, (, ), ,, h, ), ;]
[new, Rectangle2D, ., Double, (, x, ,, y, ,, adjustedPlotArea, ., getWidth, (, ), ,, h, ), ;, y, =]
[new, Rectangle2D, ., Double, (, x, ,, y, ,, adjustedPlotArea, ., getWidth, (, ), ,, h, ), ;, y, =]
[new, Rectangle2D, ., Double, (, x, ,, y, ,, adjustedPlotArea, ., getWidth, (, ), ,, h, ), ;, y, =]
[., Double, (, x, ,, y, ,, adjustedPlotArea, ., getWidth, (, ), ,, h, ), ;, y, =, y, +]
[(, x, ,, y, ,, adjustedPlotArea, ., getWidth, (, ), ,, h, ), ;, y, =, y, +, h, +]
[(, x, ,, y, ,, adjustedPlotArea, ., getWidth, (, ), ,, h, ), ;, y, =, y, +, h, +]
[(, ), ,, h, ), ;, y, =, y, +, h, +, this, ., gap, ;, }, AxisSpace, subSpace, =]
[(, ), ,, h, ), ;, y, =, y, +, h, +, this, ., gap, ;, }, AxisSpace, subSpace, =]
[), ;, y, =, y, +, h, +, this, ., gap, ;, }, AxisSpace, subSpace, =, plot, ., calculateDomainAxisSpace, (]
[y, =, y, +, h, +, this, ., gap, ;, }, AxisSpace, subSpace, =, plot, ., calculateDomainAxisSpace, (, g2, ,]
[y, =, y, +, h, +, this, ., gap, ;, }, AxisSpace, subSpace, =, plot, ., calculateDomainAxisSpace, (, g2, ,]
[y, =, y, +, h, +, this, ., gap, ;, }, AxisSpace, subSpace, =, plot, ., calculateDomainAxisSpace, (, g2, ,]
[h, +, this, ., gap, ;, }, AxisSpace, subSpace, =, plot, ., calculateDomainAxisSpace, (, g2, ,, this, ., subplotAreas, []
[., gap, ;, }, AxisSpace, subSpace, =, plot, ., calculateDomainAxisSpace, (, g2, ,, this, ., subplotAreas, [, i, ], ,]
[}, AxisSpace, subSpace, =, plot, ., calculateDomainAxisSpace, (, g2, ,, this, ., subplotAreas, [, i, ], ,, null, ), ;]
[}, AxisSpace, subSpace, =, plot, ., calculateDomainAxisSpace, (, g2, ,, this, ., subplotAreas, [, i, ], ,, null, ), ;]
[plot, ., calculateDomainAxisSpace, (, g2, ,, this, ., subplotAreas, [, i, ], ,, null, ), ;, space, ., ensureAtLeast, (]
[,, this, ., subplotAreas, [, i, ], ,, null, ), ;, space, ., ensureAtLeast, (, subSpace, ), ;, }, return]
[draw, (, Graphics2D, g2, ,, Rectangle2D, area, ,, Point2D, anchor, ,, PlotState, parentState, ,, PlotRenderingInfo, info, ), {, if, (]
[draw, (, Graphics2D, g2, ,, Rectangle2D, area, ,, Point2D, anchor, ,, PlotState, parentState, ,, PlotRenderingInfo, info, ), {, if, (]
[Graphics2D, g2, ,, Rectangle2D, area, ,, Point2D, anchor, ,, PlotState, parentState, ,, PlotRenderingInfo, info, ), {, if, (, info, !=]
[Rectangle2D, area, ,, Point2D, anchor, ,, PlotState, parentState, ,, PlotRenderingInfo, info, ), {, if, (, info, !=, null, ), {]
[Rectangle2D, area, ,, Point2D, anchor, ,, PlotState, parentState, ,, PlotRenderingInfo, info, ), {, if, (, info, !=, null, ), {]
[anchor, ,, PlotState, parentState, ,, PlotRenderingInfo, info, ), {, if, (, info, !=, null, ), {, info, ., setPlotArea, (]
[), {, if, (, info, !=, null, ), {, info, ., setPlotArea, (, area, ), ;, }, RectangleInsets, insets, =]
[info, !=, null, ), {, info, ., setPlotArea, (, area, ), ;, }, RectangleInsets, insets, =, getInsets, (, ), ;]
[info, !=, null, ), {, info, ., setPlotArea, (, area, ), ;, }, RectangleInsets, insets, =, getInsets, (, ), ;]
[{, info, ., setPlotArea, (, area, ), ;, }, RectangleInsets, insets, =, getInsets, (, ), ;, insets, ., trim, (]
[), ;, }, RectangleInsets, insets, =, getInsets, (, ), ;, insets, ., trim, (, area, ), ;, AxisSpace, space, =]
[}, RectangleInsets, insets, =, getInsets, (, ), ;, insets, ., trim, (, area, ), ;, AxisSpace, space, =, calculateAxisSpace, (]
[insets, =, getInsets, (, ), ;, insets, ., trim, (, area, ), ;, AxisSpace, space, =, calculateAxisSpace, (, g2, ,]
[insets, ., trim, (, area, ), ;, AxisSpace, space, =, calculateAxisSpace, (, g2, ,, area, ), ;, Rectangle2D, dataArea, =]
[insets, ., trim, (, area, ), ;, AxisSpace, space, =, calculateAxisSpace, (, g2, ,, area, ), ;, Rectangle2D, dataArea, =]
[area, ), ;, AxisSpace, space, =, calculateAxisSpace, (, g2, ,, area, ), ;, Rectangle2D, dataArea, =, space, ., shrink, (]
[;, AxisSpace, space, =, calculateAxisSpace, (, g2, ,, area, ), ;, Rectangle2D, dataArea, =, space, ., shrink, (, area, ,]
[=, calculateAxisSpace, (, g2, ,, area, ), ;, Rectangle2D, dataArea, =, space, ., shrink, (, area, ,, null, ), ;]
[(, g2, ,, area, ), ;, Rectangle2D, dataArea, =, space, ., shrink, (, area, ,, null, ), ;, setFixedDomainAxisSpaceForSubplots, (]
[Rectangle2D, dataArea, =, space, ., shrink, (, area, ,, null, ), ;, setFixedDomainAxisSpaceForSubplots, (, space, ), ;, ValueAxis, axis, =]
[area, ,, null, ), ;, setFixedDomainAxisSpaceForSubplots, (, space, ), ;, ValueAxis, axis, =, getRangeAxis, (, ), ;, RectangleEdge, edge, =]
[space, ), ;, ValueAxis, axis, =, getRangeAxis, (, ), ;, RectangleEdge, edge, =, getRangeAxisEdge, (, ), ;, double, cursor, =]
[space, ), ;, ValueAxis, axis, =, getRangeAxis, (, ), ;, RectangleEdge, edge, =, getRangeAxisEdge, (, ), ;, double, cursor, =]
[axis, =, getRangeAxis, (, ), ;, RectangleEdge, edge, =, getRangeAxisEdge, (, ), ;, double, cursor, =, RectangleEdge, ., coordinate, (]
[getRangeAxis, (, ), ;, RectangleEdge, edge, =, getRangeAxisEdge, (, ), ;, double, cursor, =, RectangleEdge, ., coordinate, (, dataArea, ,]
[=, getRangeAxisEdge, (, ), ;, double, cursor, =, RectangleEdge, ., coordinate, (, dataArea, ,, edge, ), ;, AxisState, axisState, =]
[=, getRangeAxisEdge, (, ), ;, double, cursor, =, RectangleEdge, ., coordinate, (, dataArea, ,, edge, ), ;, AxisState, axisState, =]
[;, double, cursor, =, RectangleEdge, ., coordinate, (, dataArea, ,, edge, ), ;, AxisState, axisState, =, axis, ., draw, (]
[cursor, =, RectangleEdge, ., coordinate, (, dataArea, ,, edge, ), ;, AxisState, axisState, =, axis, ., draw, (, g2, ,]
[RectangleEdge, ., coordinate, (, dataArea, ,, edge, ), ;, AxisState, axisState, =, axis, ., draw, (, g2, ,, cursor, ,]
[coordinate, (, dataArea, ,, edge, ), ;, AxisState, axisState, =, axis, ., draw, (, g2, ,, cursor, ,, area, ,]
[dataArea, ,, edge, ), ;, AxisState, axisState, =, axis, ., draw, (, g2, ,, cursor, ,, area, ,, dataArea, ,]
[edge, ), ;, AxisState, axisState, =, axis, ., draw, (, g2, ,, cursor, ,, area, ,, dataArea, ,, edge, ,]
[=, axis, ., draw, (, g2, ,, cursor, ,, area, ,, dataArea, ,, edge, ,, info, ), ;, if, (]
[=, axis, ., draw, (, g2, ,, cursor, ,, area, ,, dataArea, ,, edge, ,, info, ), ;, if, (]
[., draw, (, g2, ,, cursor, ,, area, ,, dataArea, ,, edge, ,, info, ), ;, if, (, parentState, ==]
[g2, ,, cursor, ,, area, ,, dataArea, ,, edge, ,, info, ), ;, if, (, parentState, ==, null, ), {]
[cursor, ,, area, ,, dataArea, ,, edge, ,, info, ), ;, if, (, parentState, ==, null, ), {, parentState, =]
[edge, ,, info, ), ;, if, (, parentState, ==, null, ), {, parentState, =, new, PlotState, (, ), ;, }]
[edge, ,, info, ), ;, if, (, parentState, ==, null, ), {, parentState, =, new, PlotState, (, ), ;, }]
[edge, ,, info, ), ;, if, (, parentState, ==, null, ), {, parentState, =, new, PlotState, (, ), ;, }]
[==, null, ), {, parentState, =, new, PlotState, (, ), ;, }, parentState, ., getSharedAxisStates, (, ), ., put, (]
[), {, parentState, =, new, PlotState, (, ), ;, }, parentState, ., getSharedAxisStates, (, ), ., put, (, axis, ,]
[;, }, parentState, ., getSharedAxisStates, (, ), ., put, (, axis, ,, axisState, ), ;, for, (, int, i, =]
[parentState, ., getSharedAxisStates, (, ), ., put, (, axis, ,, axisState, ), ;, for, (, int, i, =, 0, ;]
[parentState, ., getSharedAxisStates, (, ), ., put, (, axis, ,, axisState, ), ;, for, (, int, i, =, 0, ;]
[getSharedAxisStates, (, ), ., put, (, axis, ,, axisState, ), ;, for, (, int, i, =, 0, ;, i, <]
[getSharedAxisStates, (, ), ., put, (, axis, ,, axisState, ), ;, for, (, int, i, =, 0, ;, i, <]
[getSharedAxisStates, (, ), ., put, (, axis, ,, axisState, ), ;, for, (, int, i, =, 0, ;, i, <]
[axisState, ), ;, for, (, int, i, =, 0, ;, i, <, this, ., subplots, ., size, (, ), ;]
[axisState, ), ;, for, (, int, i, =, 0, ;, i, <, this, ., subplots, ., size, (, ), ;]
[=, 0, ;, i, <, this, ., subplots, ., size, (, ), ;, i, ++, ), {, XYPlot, plot, =]
[i, <, this, ., subplots, ., size, (, ), ;, i, ++, ), {, XYPlot, plot, =, (, XYPlot, )]
[i, <, this, ., subplots, ., size, (, ), ;, i, ++, ), {, XYPlot, plot, =, (, XYPlot, )]
[i, <, this, ., subplots, ., size, (, ), ;, i, ++, ), {, XYPlot, plot, =, (, XYPlot, )]
[size, (, ), ;, i, ++, ), {, XYPlot, plot, =, (, XYPlot, ), this, ., subplots, ., get, (]
[), {, XYPlot, plot, =, (, XYPlot, ), this, ., subplots, ., get, (, i, ), ;, PlotRenderingInfo, subplotInfo, =]
[=, (, XYPlot, ), this, ., subplots, ., get, (, i, ), ;, PlotRenderingInfo, subplotInfo, =, null, ;, if, (]
[=, (, XYPlot, ), this, ., subplots, ., get, (, i, ), ;, PlotRenderingInfo, subplotInfo, =, null, ;, if, (]
[XYPlot, ), this, ., subplots, ., get, (, i, ), ;, PlotRenderingInfo, subplotInfo, =, null, ;, if, (, info, !=]
[., subplots, ., get, (, i, ), ;, PlotRenderingInfo, subplotInfo, =, null, ;, if, (, info, !=, null, ), {]
[., get, (, i, ), ;, PlotRenderingInfo, subplotInfo, =, null, ;, if, (, info, !=, null, ), {, subplotInfo, =]
[i, ), ;, PlotRenderingInfo, subplotInfo, =, null, ;, if, (, info, !=, null, ), {, subplotInfo, =, new, PlotRenderingInfo, (]
[i, ), ;, PlotRenderingInfo, subplotInfo, =, null, ;, if, (, info, !=, null, ), {, subplotInfo, =, new, PlotRenderingInfo, (]
[;, if, (, info, !=, null, ), {, subplotInfo, =, new, PlotRenderingInfo, (, info, ., getOwner, (, ), ), ;]
[;, if, (, info, !=, null, ), {, subplotInfo, =, new, PlotRenderingInfo, (, info, ., getOwner, (, ), ), ;]
[!=, null, ), {, subplotInfo, =, new, PlotRenderingInfo, (, info, ., getOwner, (, ), ), ;, info, ., addSubplotInfo, (]
[subplotInfo, =, new, PlotRenderingInfo, (, info, ., getOwner, (, ), ), ;, info, ., addSubplotInfo, (, subplotInfo, ), ;, }]
[subplotInfo, =, new, PlotRenderingInfo, (, info, ., getOwner, (, ), ), ;, info, ., addSubplotInfo, (, subplotInfo, ), ;, }]
[(, info, ., getOwner, (, ), ), ;, info, ., addSubplotInfo, (, subplotInfo, ), ;, }, plot, ., draw, (]
[., getOwner, (, ), ), ;, info, ., addSubplotInfo, (, subplotInfo, ), ;, }, plot, ., draw, (, g2, ,]
[., getOwner, (, ), ), ;, info, ., addSubplotInfo, (, subplotInfo, ), ;, }, plot, ., draw, (, g2, ,]
[., getOwner, (, ), ), ;, info, ., addSubplotInfo, (, subplotInfo, ), ;, }, plot, ., draw, (, g2, ,]
[), ;, info, ., addSubplotInfo, (, subplotInfo, ), ;, }, plot, ., draw, (, g2, ,, this, ., subplotAreas, []
[., addSubplotInfo, (, subplotInfo, ), ;, }, plot, ., draw, (, g2, ,, this, ., subplotAreas, [, i, ], ,]
[(, subplotInfo, ), ;, }, plot, ., draw, (, g2, ,, this, ., subplotAreas, [, i, ], ,, anchor, ,]
[), ;, }, plot, ., draw, (, g2, ,, this, ., subplotAreas, [, i, ], ,, anchor, ,, parentState, ,]
[(, g2, ,, this, ., subplotAreas, [, i, ], ,, anchor, ,, parentState, ,, subplotInfo, ), ;, }, if, (]
[(, g2, ,, this, ., subplotAreas, [, i, ], ,, anchor, ,, parentState, ,, subplotInfo, ), ;, }, if, (]
[,, this, ., subplotAreas, [, i, ], ,, anchor, ,, parentState, ,, subplotInfo, ), ;, }, if, (, info, !=]
[subplotAreas, [, i, ], ,, anchor, ,, parentState, ,, subplotInfo, ), ;, }, if, (, info, !=, null, ), {]
[subplotAreas, [, i, ], ,, anchor, ,, parentState, ,, subplotInfo, ), ;, }, if, (, info, !=, null, ), {]
[,, anchor, ,, parentState, ,, subplotInfo, ), ;, }, if, (, info, !=, null, ), {, info, ., setDataArea, (]
[), {, info, ., setDataArea, (, dataArea, ), ;, }, }, public, LegendItemCollection, getLegendItems, (, ), {, LegendItemCollection, result, =]
[dataArea, ), ;, }, }, public, LegendItemCollection, getLegendItems, (, ), {, LegendItemCollection, result, =, getFixedLegendItems, (, ), ;, if, (]
[dataArea, ), ;, }, }, public, LegendItemCollection, getLegendItems, (, ), {, LegendItemCollection, result, =, getFixedLegendItems, (, ), ;, if, (]
[;, }, }, public, LegendItemCollection, getLegendItems, (, ), {, LegendItemCollection, result, =, getFixedLegendItems, (, ), ;, if, (, result, ==]
[public, LegendItemCollection, getLegendItems, (, ), {, LegendItemCollection, result, =, getFixedLegendItems, (, ), ;, if, (, result, ==, null, ), {]
[getLegendItems, (, ), {, LegendItemCollection, result, =, getFixedLegendItems, (, ), ;, if, (, result, ==, null, ), {, result, =]
[getFixedLegendItems, (, ), ;, if, (, result, ==, null, ), {, result, =, new, LegendItemCollection, (, ), ;, if, (]
[getFixedLegendItems, (, ), ;, if, (, result, ==, null, ), {, result, =, new, LegendItemCollection, (, ), ;, if, (]
[getFixedLegendItems, (, ), ;, if, (, result, ==, null, ), {, result, =, new, LegendItemCollection, (, ), ;, if, (]
[if, (, result, ==, null, ), {, result, =, new, LegendItemCollection, (, ), ;, if, (, this, ., subplots, !=]
[{, result, =, new, LegendItemCollection, (, ), ;, if, (, this, ., subplots, !=, null, ), {, Iterator, iterator, =]
[{, result, =, new, LegendItemCollection, (, ), ;, if, (, this, ., subplots, !=, null, ), {, Iterator, iterator, =]
[{, result, =, new, LegendItemCollection, (, ), ;, if, (, this, ., subplots, !=, null, ), {, Iterator, iterator, =]
[this, ., subplots, !=, null, ), {, Iterator, iterator, =, this, ., subplots, ., iterator, (, ), ;, while, (]
[this, ., subplots, !=, null, ), {, Iterator, iterator, =, this, ., subplots, ., iterator, (, ), ;, while, (]
[this, ., subplots, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYPlot, plot, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYPlot, plot, =, (, XYPlot, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYPlot, plot, =, (, XYPlot, )]
[hasNext, (, ), ), {, XYPlot, plot, =, (, XYPlot, ), iterator, ., next, (, ), ;, LegendItemCollection, more, =]
[hasNext, (, ), ), {, XYPlot, plot, =, (, XYPlot, ), iterator, ., next, (, ), ;, LegendItemCollection, more, =]
[plot, =, (, XYPlot, ), iterator, ., next, (, ), ;, LegendItemCollection, more, =, plot, ., getLegendItems, (, ), ;]
[plot, =, (, XYPlot, ), iterator, ., next, (, ), ;, LegendItemCollection, more, =, plot, ., getLegendItems, (, ), ;]
[), iterator, ., next, (, ), ;, LegendItemCollection, more, =, plot, ., getLegendItems, (, ), ;, result, ., addAll, (]
[LegendItemCollection, more, =, plot, ., getLegendItems, (, ), ;, result, ., addAll, (, more, ), ;, }, }, }, return]
[}, }, return, result, ;, }, public, void, zoomDomainAxes, (, double, factor, ,, PlotRenderingInfo, info, ,, Point2D, source, ), {]
[return, result, ;, }, public, void, zoomDomainAxes, (, double, factor, ,, PlotRenderingInfo, info, ,, Point2D, source, ), {, zoomDomainAxes, (]
[;, }, public, void, zoomDomainAxes, (, double, factor, ,, PlotRenderingInfo, info, ,, Point2D, source, ), {, zoomDomainAxes, (, factor, ,]
[public, void, zoomDomainAxes, (, double, factor, ,, PlotRenderingInfo, info, ,, Point2D, source, ), {, zoomDomainAxes, (, factor, ,, info, ,]
[zoomDomainAxes, (, double, factor, ,, PlotRenderingInfo, info, ,, Point2D, source, ), {, zoomDomainAxes, (, factor, ,, info, ,, source, ,]
[public, void, zoomDomainAxes, (, double, factor, ,, PlotRenderingInfo, info, ,, Point2D, source, ,, boolean, useAnchor, ), {, XYPlot, subplot, =]
[zoomDomainAxes, (, double, factor, ,, PlotRenderingInfo, info, ,, Point2D, source, ,, boolean, useAnchor, ), {, XYPlot, subplot, =, findSubplot, (]
[double, factor, ,, PlotRenderingInfo, info, ,, Point2D, source, ,, boolean, useAnchor, ), {, XYPlot, subplot, =, findSubplot, (, info, ,]
[,, Point2D, source, ,, boolean, useAnchor, ), {, XYPlot, subplot, =, findSubplot, (, info, ,, source, ), ;, if, (]
[,, Point2D, source, ,, boolean, useAnchor, ), {, XYPlot, subplot, =, findSubplot, (, info, ,, source, ), ;, if, (]
[source, ,, boolean, useAnchor, ), {, XYPlot, subplot, =, findSubplot, (, info, ,, source, ), ;, if, (, subplot, !=]
[useAnchor, ), {, XYPlot, subplot, =, findSubplot, (, info, ,, source, ), ;, if, (, subplot, !=, null, ), {]
[useAnchor, ), {, XYPlot, subplot, =, findSubplot, (, info, ,, source, ), ;, if, (, subplot, !=, null, ), {]
[subplot, =, findSubplot, (, info, ,, source, ), ;, if, (, subplot, !=, null, ), {, subplot, ., zoomDomainAxes, (]
[findSubplot, (, info, ,, source, ), ;, if, (, subplot, !=, null, ), {, subplot, ., zoomDomainAxes, (, factor, ,]
[info, ,, source, ), ;, if, (, subplot, !=, null, ), {, subplot, ., zoomDomainAxes, (, factor, ,, info, ,]
[source, ), ;, if, (, subplot, !=, null, ), {, subplot, ., zoomDomainAxes, (, factor, ,, info, ,, source, ,]
[{, subplot, ., zoomDomainAxes, (, factor, ,, info, ,, source, ,, useAnchor, ), ;, }, else, {, Iterator, iterator, =]
[{, subplot, ., zoomDomainAxes, (, factor, ,, info, ,, source, ,, useAnchor, ), ;, }, else, {, Iterator, iterator, =]
[,, useAnchor, ), ;, }, else, {, Iterator, iterator, =, getSubplots, (, ), ., iterator, (, ), ;, while, (]
[,, useAnchor, ), ;, }, else, {, Iterator, iterator, =, getSubplots, (, ), ., iterator, (, ), ;, while, (]
[Iterator, iterator, =, getSubplots, (, ), ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {]
[=, getSubplots, (, ), ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, subplot, =]
[), ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, subplot, =, (, XYPlot, )]
[), ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, subplot, =, (, XYPlot, )]
[while, (, iterator, ., hasNext, (, ), ), {, subplot, =, (, XYPlot, ), iterator, ., next, (, ), ;]
[while, (, iterator, ., hasNext, (, ), ), {, subplot, =, (, XYPlot, ), iterator, ., next, (, ), ;]
[hasNext, (, ), ), {, subplot, =, (, XYPlot, ), iterator, ., next, (, ), ;, subplot, ., zoomDomainAxes, (]
[), ), {, subplot, =, (, XYPlot, ), iterator, ., next, (, ), ;, subplot, ., zoomDomainAxes, (, factor, ,]
[{, subplot, =, (, XYPlot, ), iterator, ., next, (, ), ;, subplot, ., zoomDomainAxes, (, factor, ,, info, ,]
[=, (, XYPlot, ), iterator, ., next, (, ), ;, subplot, ., zoomDomainAxes, (, factor, ,, info, ,, source, ,]
[public, void, zoomDomainAxes, (, double, lowerPercent, ,, double, upperPercent, ,, PlotRenderingInfo, info, ,, Point2D, source, ), {, XYPlot, subplot, =]
[zoomDomainAxes, (, double, lowerPercent, ,, double, upperPercent, ,, PlotRenderingInfo, info, ,, Point2D, source, ), {, XYPlot, subplot, =, findSubplot, (]
[double, lowerPercent, ,, double, upperPercent, ,, PlotRenderingInfo, info, ,, Point2D, source, ), {, XYPlot, subplot, =, findSubplot, (, info, ,]
[,, PlotRenderingInfo, info, ,, Point2D, source, ), {, XYPlot, subplot, =, findSubplot, (, info, ,, source, ), ;, if, (]
[,, PlotRenderingInfo, info, ,, Point2D, source, ), {, XYPlot, subplot, =, findSubplot, (, info, ,, source, ), ;, if, (]
[info, ,, Point2D, source, ), {, XYPlot, subplot, =, findSubplot, (, info, ,, source, ), ;, if, (, subplot, !=]
[source, ), {, XYPlot, subplot, =, findSubplot, (, info, ,, source, ), ;, if, (, subplot, !=, null, ), {]
[source, ), {, XYPlot, subplot, =, findSubplot, (, info, ,, source, ), ;, if, (, subplot, !=, null, ), {]
[subplot, =, findSubplot, (, info, ,, source, ), ;, if, (, subplot, !=, null, ), {, subplot, ., zoomDomainAxes, (]
[findSubplot, (, info, ,, source, ), ;, if, (, subplot, !=, null, ), {, subplot, ., zoomDomainAxes, (, lowerPercent, ,]
[info, ,, source, ), ;, if, (, subplot, !=, null, ), {, subplot, ., zoomDomainAxes, (, lowerPercent, ,, upperPercent, ,]
[source, ), ;, if, (, subplot, !=, null, ), {, subplot, ., zoomDomainAxes, (, lowerPercent, ,, upperPercent, ,, info, ,]
[{, subplot, ., zoomDomainAxes, (, lowerPercent, ,, upperPercent, ,, info, ,, source, ), ;, }, else, {, Iterator, iterator, =]
[{, subplot, ., zoomDomainAxes, (, lowerPercent, ,, upperPercent, ,, info, ,, source, ), ;, }, else, {, Iterator, iterator, =]
[,, source, ), ;, }, else, {, Iterator, iterator, =, getSubplots, (, ), ., iterator, (, ), ;, while, (]
[,, source, ), ;, }, else, {, Iterator, iterator, =, getSubplots, (, ), ., iterator, (, ), ;, while, (]
[Iterator, iterator, =, getSubplots, (, ), ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {]
[=, getSubplots, (, ), ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, subplot, =]
[), ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, subplot, =, (, XYPlot, )]
[), ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, subplot, =, (, XYPlot, )]
[while, (, iterator, ., hasNext, (, ), ), {, subplot, =, (, XYPlot, ), iterator, ., next, (, ), ;]
[while, (, iterator, ., hasNext, (, ), ), {, subplot, =, (, XYPlot, ), iterator, ., next, (, ), ;]
[hasNext, (, ), ), {, subplot, =, (, XYPlot, ), iterator, ., next, (, ), ;, subplot, ., zoomDomainAxes, (]
[), ), {, subplot, =, (, XYPlot, ), iterator, ., next, (, ), ;, subplot, ., zoomDomainAxes, (, lowerPercent, ,]
[{, subplot, =, (, XYPlot, ), iterator, ., next, (, ), ;, subplot, ., zoomDomainAxes, (, lowerPercent, ,, upperPercent, ,]
[=, (, XYPlot, ), iterator, ., next, (, ), ;, subplot, ., zoomDomainAxes, (, lowerPercent, ,, upperPercent, ,, info, ,]
[,, source, ), ;, }, }, }, public, XYPlot, findSubplot, (, PlotRenderingInfo, info, ,, Point2D, source, ), {, if, (]
[,, source, ), ;, }, }, }, public, XYPlot, findSubplot, (, PlotRenderingInfo, info, ,, Point2D, source, ), {, if, (]
[), ;, }, }, }, public, XYPlot, findSubplot, (, PlotRenderingInfo, info, ,, Point2D, source, ), {, if, (, info, ==]
[}, public, XYPlot, findSubplot, (, PlotRenderingInfo, info, ,, Point2D, source, ), {, if, (, info, ==, null, ), {, throw]
[findSubplot, (, PlotRenderingInfo, info, ,, Point2D, source, ), {, if, (, info, ==, null, ), {, throw, new, IllegalArgumentException, (]
[source, ), {, if, (, info, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'info' argument.", ), ;, }, if, (]
[source, ), {, if, (, info, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'info' argument.", ), ;, }, if, (]
[{, if, (, info, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'info' argument.", ), ;, }, if, (, source, ==]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'info' argument.", ), ;, }, if, (, source, ==, null, ), {, throw]
[{, throw, new, IllegalArgumentException, (, "Null 'info' argument.", ), ;, }, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (]
[;, }, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'source' argument.", ), ;, }, XYPlot, result, =]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'source' argument.", ), ;, }, XYPlot, result, =, null, ;, int, subplotIndex, =]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'source' argument.", ), ;, }, XYPlot, result, =, null, ;, int, subplotIndex, =]
[throw, new, IllegalArgumentException, (, "Null 'source' argument.", ), ;, }, XYPlot, result, =, null, ;, int, subplotIndex, =, info, ., getSubplotIndex, (]
[), ;, }, XYPlot, result, =, null, ;, int, subplotIndex, =, info, ., getSubplotIndex, (, source, ), ;, if, (]
[), ;, }, XYPlot, result, =, null, ;, int, subplotIndex, =, info, ., getSubplotIndex, (, source, ), ;, if, (]
[}, XYPlot, result, =, null, ;, int, subplotIndex, =, info, ., getSubplotIndex, (, source, ), ;, if, (, subplotIndex, >=]
[=, null, ;, int, subplotIndex, =, info, ., getSubplotIndex, (, source, ), ;, if, (, subplotIndex, >=, 0, ), {]
[;, int, subplotIndex, =, info, ., getSubplotIndex, (, source, ), ;, if, (, subplotIndex, >=, 0, ), {, result, =]
[=, info, ., getSubplotIndex, (, source, ), ;, if, (, subplotIndex, >=, 0, ), {, result, =, (, XYPlot, )]
[=, info, ., getSubplotIndex, (, source, ), ;, if, (, subplotIndex, >=, 0, ), {, result, =, (, XYPlot, )]
[=, info, ., getSubplotIndex, (, source, ), ;, if, (, subplotIndex, >=, 0, ), {, result, =, (, XYPlot, )]
[), ;, if, (, subplotIndex, >=, 0, ), {, result, =, (, XYPlot, ), this, ., subplots, ., get, (]
[>=, 0, ), {, result, =, (, XYPlot, ), this, ., subplots, ., get, (, subplotIndex, ), ;, }, return]
[subplots, ., get, (, subplotIndex, ), ;, }, return, result, ;, }, public, void, setRenderer, (, XYItemRenderer, renderer, ), {]
[subplots, ., get, (, subplotIndex, ), ;, }, return, result, ;, }, public, void, setRenderer, (, XYItemRenderer, renderer, ), {]
[subplotIndex, ), ;, }, return, result, ;, }, public, void, setRenderer, (, XYItemRenderer, renderer, ), {, super, ., setRenderer, (]
[;, }, public, void, setRenderer, (, XYItemRenderer, renderer, ), {, super, ., setRenderer, (, renderer, ), ;, Iterator, iterator, =]
[;, }, public, void, setRenderer, (, XYItemRenderer, renderer, ), {, super, ., setRenderer, (, renderer, ), ;, Iterator, iterator, =]
[;, }, public, void, setRenderer, (, XYItemRenderer, renderer, ), {, super, ., setRenderer, (, renderer, ), ;, Iterator, iterator, =]
[super, ., setRenderer, (, renderer, ), ;, Iterator, iterator, =, this, ., subplots, ., iterator, (, ), ;, while, (]
[super, ., setRenderer, (, renderer, ), ;, Iterator, iterator, =, this, ., subplots, ., iterator, (, ), ;, while, (]
[this, ., subplots, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYPlot, plot, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYPlot, plot, =, (, XYPlot, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYPlot, plot, =, (, XYPlot, )]
[(, iterator, ., hasNext, (, ), ), {, XYPlot, plot, =, (, XYPlot, ), iterator, ., next, (, ), ;]
[(, iterator, ., hasNext, (, ), ), {, XYPlot, plot, =, (, XYPlot, ), iterator, ., next, (, ), ;]
[(, ), ), {, XYPlot, plot, =, (, XYPlot, ), iterator, ., next, (, ), ;, plot, ., setRenderer, (]
[(, ), ;, plot, ., setRenderer, (, renderer, ), ;, }, }, public, void, setOrientation, (, PlotOrientation, orientation, ), {]
[(, ), ;, plot, ., setRenderer, (, renderer, ), ;, }, }, public, void, setOrientation, (, PlotOrientation, orientation, ), {]
[., setRenderer, (, renderer, ), ;, }, }, public, void, setOrientation, (, PlotOrientation, orientation, ), {, super, ., setOrientation, (]
[}, }, public, void, setOrientation, (, PlotOrientation, orientation, ), {, super, ., setOrientation, (, orientation, ), ;, Iterator, iterator, =]
[}, }, public, void, setOrientation, (, PlotOrientation, orientation, ), {, super, ., setOrientation, (, orientation, ), ;, Iterator, iterator, =]
[}, }, public, void, setOrientation, (, PlotOrientation, orientation, ), {, super, ., setOrientation, (, orientation, ), ;, Iterator, iterator, =]
[super, ., setOrientation, (, orientation, ), ;, Iterator, iterator, =, this, ., subplots, ., iterator, (, ), ;, while, (]
[super, ., setOrientation, (, orientation, ), ;, Iterator, iterator, =, this, ., subplots, ., iterator, (, ), ;, while, (]
[this, ., subplots, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYPlot, plot, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYPlot, plot, =, (, XYPlot, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYPlot, plot, =, (, XYPlot, )]
[(, iterator, ., hasNext, (, ), ), {, XYPlot, plot, =, (, XYPlot, ), iterator, ., next, (, ), ;]
[(, iterator, ., hasNext, (, ), ), {, XYPlot, plot, =, (, XYPlot, ), iterator, ., next, (, ), ;]
[(, ), ), {, XYPlot, plot, =, (, XYPlot, ), iterator, ., next, (, ), ;, plot, ., setOrientation, (]
[plot, ., setOrientation, (, orientation, ), ;, }, }, public, Range, getDataRange, (, ValueAxis, axis, ), {, Range, result, =]
[orientation, ), ;, }, }, public, Range, getDataRange, (, ValueAxis, axis, ), {, Range, result, =, null, ;, if, (]
[orientation, ), ;, }, }, public, Range, getDataRange, (, ValueAxis, axis, ), {, Range, result, =, null, ;, if, (]
[orientation, ), ;, }, }, public, Range, getDataRange, (, ValueAxis, axis, ), {, Range, result, =, null, ;, if, (]
[}, public, Range, getDataRange, (, ValueAxis, axis, ), {, Range, result, =, null, ;, if, (, this, ., subplots, !=]
[axis, ), {, Range, result, =, null, ;, if, (, this, ., subplots, !=, null, ), {, Iterator, iterator, =]
[axis, ), {, Range, result, =, null, ;, if, (, this, ., subplots, !=, null, ), {, Iterator, iterator, =]
[axis, ), {, Range, result, =, null, ;, if, (, this, ., subplots, !=, null, ), {, Iterator, iterator, =]
[this, ., subplots, !=, null, ), {, Iterator, iterator, =, this, ., subplots, ., iterator, (, ), ;, while, (]
[this, ., subplots, !=, null, ), {, Iterator, iterator, =, this, ., subplots, ., iterator, (, ), ;, while, (]
[this, ., subplots, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYPlot, subplot, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYPlot, subplot, =, (, XYPlot, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYPlot, subplot, =, (, XYPlot, )]
[(, iterator, ., hasNext, (, ), ), {, XYPlot, subplot, =, (, XYPlot, ), iterator, ., next, (, ), ;]
[., hasNext, (, ), ), {, XYPlot, subplot, =, (, XYPlot, ), iterator, ., next, (, ), ;, result, =]
[., hasNext, (, ), ), {, XYPlot, subplot, =, (, XYPlot, ), iterator, ., next, (, ), ;, result, =]
[), {, XYPlot, subplot, =, (, XYPlot, ), iterator, ., next, (, ), ;, result, =, Range, ., combine, (]
[XYPlot, subplot, =, (, XYPlot, ), iterator, ., next, (, ), ;, result, =, Range, ., combine, (, result, ,]
[XYPlot, subplot, =, (, XYPlot, ), iterator, ., next, (, ), ;, result, =, Range, ., combine, (, result, ,]
[XYPlot, ), iterator, ., next, (, ), ;, result, =, Range, ., combine, (, result, ,, subplot, ., getDataRange, (]
[;, result, =, Range, ., combine, (, result, ,, subplot, ., getDataRange, (, axis, ), ), ;, }, }, return]
[), ), ;, }, }, return, result, ;, }, protected, void, setFixedDomainAxisSpaceForSubplots, (, AxisSpace, space, ), {, Iterator, iterator, =]
[), ), ;, }, }, return, result, ;, }, protected, void, setFixedDomainAxisSpaceForSubplots, (, AxisSpace, space, ), {, Iterator, iterator, =]
[), ), ;, }, }, return, result, ;, }, protected, void, setFixedDomainAxisSpaceForSubplots, (, AxisSpace, space, ), {, Iterator, iterator, =]
[void, setFixedDomainAxisSpaceForSubplots, (, AxisSpace, space, ), {, Iterator, iterator, =, this, ., subplots, ., iterator, (, ), ;, while, (]
[void, setFixedDomainAxisSpaceForSubplots, (, AxisSpace, space, ), {, Iterator, iterator, =, this, ., subplots, ., iterator, (, ), ;, while, (]
[this, ., subplots, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYPlot, plot, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYPlot, plot, =, (, XYPlot, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYPlot, plot, =, (, XYPlot, )]
[(, iterator, ., hasNext, (, ), ), {, XYPlot, plot, =, (, XYPlot, ), iterator, ., next, (, ), ;]
[(, iterator, ., hasNext, (, ), ), {, XYPlot, plot, =, (, XYPlot, ), iterator, ., next, (, ), ;]
[(, ), ), {, XYPlot, plot, =, (, XYPlot, ), iterator, ., next, (, ), ;, plot, ., setFixedDomainAxisSpace, (]
[), {, XYPlot, plot, =, (, XYPlot, ), iterator, ., next, (, ), ;, plot, ., setFixedDomainAxisSpace, (, space, ,]
[;, }, }, public, void, handleClick, (, int, x, ,, int, y, ,, PlotRenderingInfo, info, ), {, Rectangle2D, dataArea, =]
[;, }, }, public, void, handleClick, (, int, x, ,, int, y, ,, PlotRenderingInfo, info, ), {, Rectangle2D, dataArea, =]
[x, ,, int, y, ,, PlotRenderingInfo, info, ), {, Rectangle2D, dataArea, =, info, ., getDataArea, (, ), ;, if, (]
[x, ,, int, y, ,, PlotRenderingInfo, info, ), {, Rectangle2D, dataArea, =, info, ., getDataArea, (, ), ;, if, (]
[,, PlotRenderingInfo, info, ), {, Rectangle2D, dataArea, =, info, ., getDataArea, (, ), ;, if, (, dataArea, ., contains, (]
[info, ), {, Rectangle2D, dataArea, =, info, ., getDataArea, (, ), ;, if, (, dataArea, ., contains, (, x, ,]
[(, ), ;, if, (, dataArea, ., contains, (, x, ,, y, ), ), {, for, (, int, i, =]
[;, if, (, dataArea, ., contains, (, x, ,, y, ), ), {, for, (, int, i, =, 0, ;]
[;, if, (, dataArea, ., contains, (, x, ,, y, ), ), {, for, (, int, i, =, 0, ;]
[(, dataArea, ., contains, (, x, ,, y, ), ), {, for, (, int, i, =, 0, ;, i, <]
[(, dataArea, ., contains, (, x, ,, y, ), ), {, for, (, int, i, =, 0, ;, i, <]
[(, dataArea, ., contains, (, x, ,, y, ), ), {, for, (, int, i, =, 0, ;, i, <]
[), ), {, for, (, int, i, =, 0, ;, i, <, this, ., subplots, ., size, (, ), ;]
[), ), {, for, (, int, i, =, 0, ;, i, <, this, ., subplots, ., size, (, ), ;]
[=, 0, ;, i, <, this, ., subplots, ., size, (, ), ;, i, ++, ), {, XYPlot, subplot, =]
[i, <, this, ., subplots, ., size, (, ), ;, i, ++, ), {, XYPlot, subplot, =, (, XYPlot, )]
[i, <, this, ., subplots, ., size, (, ), ;, i, ++, ), {, XYPlot, subplot, =, (, XYPlot, )]
[i, <, this, ., subplots, ., size, (, ), ;, i, ++, ), {, XYPlot, subplot, =, (, XYPlot, )]
[size, (, ), ;, i, ++, ), {, XYPlot, subplot, =, (, XYPlot, ), this, ., subplots, ., get, (]
[), {, XYPlot, subplot, =, (, XYPlot, ), this, ., subplots, ., get, (, i, ), ;, PlotRenderingInfo, subplotInfo, =]
[), {, XYPlot, subplot, =, (, XYPlot, ), this, ., subplots, ., get, (, i, ), ;, PlotRenderingInfo, subplotInfo, =]
[=, (, XYPlot, ), this, ., subplots, ., get, (, i, ), ;, PlotRenderingInfo, subplotInfo, =, info, ., getSubplotInfo, (]
[), this, ., subplots, ., get, (, i, ), ;, PlotRenderingInfo, subplotInfo, =, info, ., getSubplotInfo, (, i, ), ;]
[), this, ., subplots, ., get, (, i, ), ;, PlotRenderingInfo, subplotInfo, =, info, ., getSubplotInfo, (, i, ), ;]
[., get, (, i, ), ;, PlotRenderingInfo, subplotInfo, =, info, ., getSubplotInfo, (, i, ), ;, subplot, ., handleClick, (]
[(, i, ), ;, PlotRenderingInfo, subplotInfo, =, info, ., getSubplotInfo, (, i, ), ;, subplot, ., handleClick, (, x, ,]
[), ;, PlotRenderingInfo, subplotInfo, =, info, ., getSubplotInfo, (, i, ), ;, subplot, ., handleClick, (, x, ,, y, ,]
[handleClick, (, x, ,, y, ,, subplotInfo, ), ;, }, }, }, public, void, plotChanged, (, PlotChangeEvent, event, ), {]
[x, ,, y, ,, subplotInfo, ), ;, }, }, }, public, void, plotChanged, (, PlotChangeEvent, event, ), {, notifyListeners, (]
[PlotChangeEvent, event, ), {, notifyListeners, (, event, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[PlotChangeEvent, event, ), {, notifyListeners, (, event, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[), {, notifyListeners, (, event, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[event, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, CombinedRangeXYPlot, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, CombinedRangeXYPlot, ), ), {, return, false, ;, }, CombinedRangeXYPlot, that, =]
[if, (, !, (, obj, instanceof, CombinedRangeXYPlot, ), ), {, return, false, ;, }, CombinedRangeXYPlot, that, =, (, CombinedRangeXYPlot, )]
[obj, instanceof, CombinedRangeXYPlot, ), ), {, return, false, ;, }, CombinedRangeXYPlot, that, =, (, CombinedRangeXYPlot, ), obj, ;, if, (]
[obj, instanceof, CombinedRangeXYPlot, ), ), {, return, false, ;, }, CombinedRangeXYPlot, that, =, (, CombinedRangeXYPlot, ), obj, ;, if, (]
[obj, instanceof, CombinedRangeXYPlot, ), ), {, return, false, ;, }, CombinedRangeXYPlot, that, =, (, CombinedRangeXYPlot, ), obj, ;, if, (]
[), {, return, false, ;, }, CombinedRangeXYPlot, that, =, (, CombinedRangeXYPlot, ), obj, ;, if, (, this, ., gap, !=]
[), {, return, false, ;, }, CombinedRangeXYPlot, that, =, (, CombinedRangeXYPlot, ), obj, ;, if, (, this, ., gap, !=]
[CombinedRangeXYPlot, that, =, (, CombinedRangeXYPlot, ), obj, ;, if, (, this, ., gap, !=, that, ., gap, ), {, return]
[), obj, ;, if, (, this, ., gap, !=, that, ., gap, ), {, return, false, ;, }, if, (]
[obj, ;, if, (, this, ., gap, !=, that, ., gap, ), {, return, false, ;, }, if, (, !]
[obj, ;, if, (, this, ., gap, !=, that, ., gap, ), {, return, false, ;, }, if, (, !]
[this, ., gap, !=, that, ., gap, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[this, ., gap, !=, that, ., gap, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[that, ., gap, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., subplots, ,]
[that, ., gap, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., subplots, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., subplots, ,, that, ., subplots, ), ), {, return]
[!, ObjectUtilities, ., equal, (, this, ., subplots, ,, that, ., subplots, ), ), {, return, false, ;, }, return]
[!, ObjectUtilities, ., equal, (, this, ., subplots, ,, that, ., subplots, ), ), {, return, false, ;, }, return]
[(, this, ., subplots, ,, that, ., subplots, ), ), {, return, false, ;, }, return, super, ., equals, (]
[return, super, ., equals, (, obj, ), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, CombinedRangeXYPlot, result, =]
[equals, (, obj, ), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, CombinedRangeXYPlot, result, =, (, CombinedRangeXYPlot, )]
[equals, (, obj, ), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, CombinedRangeXYPlot, result, =, (, CombinedRangeXYPlot, )]
[public, Object, clone, (, ), throws, CloneNotSupportedException, {, CombinedRangeXYPlot, result, =, (, CombinedRangeXYPlot, ), super, ., clone, (, ), ;]
[public, Object, clone, (, ), throws, CloneNotSupportedException, {, CombinedRangeXYPlot, result, =, (, CombinedRangeXYPlot, ), super, ., clone, (, ), ;]
[), throws, CloneNotSupportedException, {, CombinedRangeXYPlot, result, =, (, CombinedRangeXYPlot, ), super, ., clone, (, ), ;, result, ., subplots, =]
[{, CombinedRangeXYPlot, result, =, (, CombinedRangeXYPlot, ), super, ., clone, (, ), ;, result, ., subplots, =, (, List, )]
[{, CombinedRangeXYPlot, result, =, (, CombinedRangeXYPlot, ), super, ., clone, (, ), ;, result, ., subplots, =, (, List, )]
[(, CombinedRangeXYPlot, ), super, ., clone, (, ), ;, result, ., subplots, =, (, List, ), ObjectUtilities, ., deepClone, (]
[(, CombinedRangeXYPlot, ), super, ., clone, (, ), ;, result, ., subplots, =, (, List, ), ObjectUtilities, ., deepClone, (]
[., subplots, =, (, List, ), ObjectUtilities, ., deepClone, (, this, ., subplots, ), ;, for, (, Iterator, it, =]
[., subplots, =, (, List, ), ObjectUtilities, ., deepClone, (, this, ., subplots, ), ;, for, (, Iterator, it, =]
[., subplots, =, (, List, ), ObjectUtilities, ., deepClone, (, this, ., subplots, ), ;, for, (, Iterator, it, =]
[deepClone, (, this, ., subplots, ), ;, for, (, Iterator, it, =, result, ., subplots, ., iterator, (, ), ;]
[deepClone, (, this, ., subplots, ), ;, for, (, Iterator, it, =, result, ., subplots, ., iterator, (, ), ;]
[=, result, ., subplots, ., iterator, (, ), ;, it, ., hasNext, (, ), ;, ), {, Plot, child, =]
[subplots, ., iterator, (, ), ;, it, ., hasNext, (, ), ;, ), {, Plot, child, =, (, Plot, )]
[subplots, ., iterator, (, ), ;, it, ., hasNext, (, ), ;, ), {, Plot, child, =, (, Plot, )]
[it, ., hasNext, (, ), ;, ), {, Plot, child, =, (, Plot, ), it, ., next, (, ), ;]
[it, ., hasNext, (, ), ;, ), {, Plot, child, =, (, Plot, ), it, ., next, (, ), ;]
[), ;, ), {, Plot, child, =, (, Plot, ), it, ., next, (, ), ;, child, ., setParent, (]
[(, Plot, ), it, ., next, (, ), ;, child, ., setParent, (, result, ), ;, }, ValueAxis, rangeAxis, =]
[(, Plot, ), it, ., next, (, ), ;, child, ., setParent, (, result, ), ;, }, ValueAxis, rangeAxis, =]
[;, child, ., setParent, (, result, ), ;, }, ValueAxis, rangeAxis, =, result, ., getRangeAxis, (, ), ;, if, (]
[;, child, ., setParent, (, result, ), ;, }, ValueAxis, rangeAxis, =, result, ., getRangeAxis, (, ), ;, if, (]
[., setParent, (, result, ), ;, }, ValueAxis, rangeAxis, =, result, ., getRangeAxis, (, ), ;, if, (, rangeAxis, !=]
[result, ), ;, }, ValueAxis, rangeAxis, =, result, ., getRangeAxis, (, ), ;, if, (, rangeAxis, !=, null, ), {]
[result, ), ;, }, ValueAxis, rangeAxis, =, result, ., getRangeAxis, (, ), ;, if, (, rangeAxis, !=, null, ), {]
[., getRangeAxis, (, ), ;, if, (, rangeAxis, !=, null, ), {, rangeAxis, ., configure, (, ), ;, }, return]
