[extends, JComponent, implements, ListCellRenderer, {, private, Stroke, stroke, ;, private, Dimension, preferredSize, ;, public, StrokeSample, (, Stroke, stroke, ), {]
[extends, JComponent, implements, ListCellRenderer, {, private, Stroke, stroke, ;, private, Dimension, preferredSize, ;, public, StrokeSample, (, Stroke, stroke, ), {]
[{, private, Stroke, stroke, ;, private, Dimension, preferredSize, ;, public, StrokeSample, (, Stroke, stroke, ), {, this, ., stroke, =]
[Stroke, stroke, ;, private, Dimension, preferredSize, ;, public, StrokeSample, (, Stroke, stroke, ), {, this, ., stroke, =, stroke, ;]
[Stroke, stroke, ;, private, Dimension, preferredSize, ;, public, StrokeSample, (, Stroke, stroke, ), {, this, ., stroke, =, stroke, ;]
[Dimension, preferredSize, ;, public, StrokeSample, (, Stroke, stroke, ), {, this, ., stroke, =, stroke, ;, this, ., preferredSize, =]
[public, StrokeSample, (, Stroke, stroke, ), {, this, ., stroke, =, stroke, ;, this, ., preferredSize, =, new, Dimension, (]
[(, Stroke, stroke, ), {, this, ., stroke, =, stroke, ;, this, ., preferredSize, =, new, Dimension, (, 80, ,]
[this, ., preferredSize, =, new, Dimension, (, 80, ,, 18, ), ;, }, public, Stroke, getStroke, (, ), {, return]
[this, ., preferredSize, =, new, Dimension, (, 80, ,, 18, ), ;, }, public, Stroke, getStroke, (, ), {, return]
[public, Stroke, getStroke, (, ), {, return, this, ., stroke, ;, }, public, void, setStroke, (, Stroke, stroke, ), {]
[public, Stroke, getStroke, (, ), {, return, this, ., stroke, ;, }, public, void, setStroke, (, Stroke, stroke, ), {]
[), {, return, this, ., stroke, ;, }, public, void, setStroke, (, Stroke, stroke, ), {, this, ., stroke, =]
[return, this, ., stroke, ;, }, public, void, setStroke, (, Stroke, stroke, ), {, this, ., stroke, =, stroke, ;]
[), {, this, ., stroke, =, stroke, ;, repaint, (, ), ;, }, public, Dimension, getPreferredSize, (, ), {, return]
[), {, this, ., stroke, =, stroke, ;, repaint, (, ), ;, }, public, Dimension, getPreferredSize, (, ), {, return]
[(, ), {, return, this, ., preferredSize, ;, }, public, void, paintComponent, (, Graphics, g, ), {, Graphics2D, g2, =]
[return, this, ., preferredSize, ;, }, public, void, paintComponent, (, Graphics, g, ), {, Graphics2D, g2, =, (, Graphics2D, )]
[., preferredSize, ;, }, public, void, paintComponent, (, Graphics, g, ), {, Graphics2D, g2, =, (, Graphics2D, ), g, ;]
[., preferredSize, ;, }, public, void, paintComponent, (, Graphics, g, ), {, Graphics2D, g2, =, (, Graphics2D, ), g, ;]
[public, void, paintComponent, (, Graphics, g, ), {, Graphics2D, g2, =, (, Graphics2D, ), g, ;, g2, ., setRenderingHint, (]
[public, void, paintComponent, (, Graphics, g, ), {, Graphics2D, g2, =, (, Graphics2D, ), g, ;, g2, ., setRenderingHint, (]
[Graphics, g, ), {, Graphics2D, g2, =, (, Graphics2D, ), g, ;, g2, ., setRenderingHint, (, RenderingHints, ., KEY_ANTIALIASING, ,]
[Graphics, g, ), {, Graphics2D, g2, =, (, Graphics2D, ), g, ;, g2, ., setRenderingHint, (, RenderingHints, ., KEY_ANTIALIASING, ,]
[Graphics2D, ), g, ;, g2, ., setRenderingHint, (, RenderingHints, ., KEY_ANTIALIASING, ,, RenderingHints, ., VALUE_ANTIALIAS_ON, ), ;, Dimension, size, =]
[(, RenderingHints, ., KEY_ANTIALIASING, ,, RenderingHints, ., VALUE_ANTIALIAS_ON, ), ;, Dimension, size, =, getSize, (, ), ;, Insets, insets, =]
[VALUE_ANTIALIAS_ON, ), ;, Dimension, size, =, getSize, (, ), ;, Insets, insets, =, getInsets, (, ), ;, double, xx, =]
[VALUE_ANTIALIAS_ON, ), ;, Dimension, size, =, getSize, (, ), ;, Insets, insets, =, getInsets, (, ), ;, double, xx, =]
[(, ), ;, Insets, insets, =, getInsets, (, ), ;, double, xx, =, insets, ., left, ;, double, yy, =]
[(, ), ;, Insets, insets, =, getInsets, (, ), ;, double, xx, =, insets, ., left, ;, double, yy, =]
[(, ), ;, double, xx, =, insets, ., left, ;, double, yy, =, insets, ., top, ;, double, ww, =]
[(, ), ;, double, xx, =, insets, ., left, ;, double, yy, =, insets, ., top, ;, double, ww, =]
[(, ), ;, double, xx, =, insets, ., left, ;, double, yy, =, insets, ., top, ;, double, ww, =]
[(, ), ;, double, xx, =, insets, ., left, ;, double, yy, =, insets, ., top, ;, double, ww, =]
[insets, ., left, ;, double, yy, =, insets, ., top, ;, double, ww, =, size, ., getWidth, (, ), -]
[insets, ., left, ;, double, yy, =, insets, ., top, ;, double, ww, =, size, ., getWidth, (, ), -]
[double, yy, =, insets, ., top, ;, double, ww, =, size, ., getWidth, (, ), -, insets, ., left, -]
[double, yy, =, insets, ., top, ;, double, ww, =, size, ., getWidth, (, ), -, insets, ., left, -]
[double, ww, =, size, ., getWidth, (, ), -, insets, ., left, -, insets, ., right, ;, double, hh, =]
[double, ww, =, size, ., getWidth, (, ), -, insets, ., left, -, insets, ., right, ;, double, hh, =]
[double, ww, =, size, ., getWidth, (, ), -, insets, ., left, -, insets, ., right, ;, double, hh, =]
[double, ww, =, size, ., getWidth, (, ), -, insets, ., left, -, insets, ., right, ;, double, hh, =]
[(, ), -, insets, ., left, -, insets, ., right, ;, double, hh, =, size, ., getHeight, (, ), -]
[(, ), -, insets, ., left, -, insets, ., right, ;, double, hh, =, size, ., getHeight, (, ), -]
[., left, -, insets, ., right, ;, double, hh, =, size, ., getHeight, (, ), -, insets, ., top, -]
[., left, -, insets, ., right, ;, double, hh, =, size, ., getHeight, (, ), -, insets, ., top, -]
[double, hh, =, size, ., getHeight, (, ), -, insets, ., top, -, insets, ., bottom, ;, Point2D, one, =]
[getHeight, (, ), -, insets, ., top, -, insets, ., bottom, ;, Point2D, one, =, new, Point2D, ., Double, (]
[getHeight, (, ), -, insets, ., top, -, insets, ., bottom, ;, Point2D, one, =, new, Point2D, ., Double, (]
[), -, insets, ., top, -, insets, ., bottom, ;, Point2D, one, =, new, Point2D, ., Double, (, xx, +]
[insets, ., top, -, insets, ., bottom, ;, Point2D, one, =, new, Point2D, ., Double, (, xx, +, 6, ,]
[insets, ., top, -, insets, ., bottom, ;, Point2D, one, =, new, Point2D, ., Double, (, xx, +, 6, ,]
[top, -, insets, ., bottom, ;, Point2D, one, =, new, Point2D, ., Double, (, xx, +, 6, ,, yy, +]
[top, -, insets, ., bottom, ;, Point2D, one, =, new, Point2D, ., Double, (, xx, +, 6, ,, yy, +]
[insets, ., bottom, ;, Point2D, one, =, new, Point2D, ., Double, (, xx, +, 6, ,, yy, +, hh, /]
[=, new, Point2D, ., Double, (, xx, +, 6, ,, yy, +, hh, /, 2, ), ;, Point2D, two, =]
[(, xx, +, 6, ,, yy, +, hh, /, 2, ), ;, Point2D, two, =, new, Point2D, ., Double, (]
[(, xx, +, 6, ,, yy, +, hh, /, 2, ), ;, Point2D, two, =, new, Point2D, ., Double, (]
[(, xx, +, 6, ,, yy, +, hh, /, 2, ), ;, Point2D, two, =, new, Point2D, ., Double, (]
[+, 6, ,, yy, +, hh, /, 2, ), ;, Point2D, two, =, new, Point2D, ., Double, (, xx, +]
[,, yy, +, hh, /, 2, ), ;, Point2D, two, =, new, Point2D, ., Double, (, xx, +, ww, -]
[+, hh, /, 2, ), ;, Point2D, two, =, new, Point2D, ., Double, (, xx, +, ww, -, 6, ,]
[+, hh, /, 2, ), ;, Point2D, two, =, new, Point2D, ., Double, (, xx, +, ww, -, 6, ,]
[/, 2, ), ;, Point2D, two, =, new, Point2D, ., Double, (, xx, +, ww, -, 6, ,, yy, +]
[/, 2, ), ;, Point2D, two, =, new, Point2D, ., Double, (, xx, +, ww, -, 6, ,, yy, +]
[), ;, Point2D, two, =, new, Point2D, ., Double, (, xx, +, ww, -, 6, ,, yy, +, hh, /]
[Point2D, ., Double, (, xx, +, ww, -, 6, ,, yy, +, hh, /, 2, ), ;, Ellipse2D, circle1, =]
[+, ww, -, 6, ,, yy, +, hh, /, 2, ), ;, Ellipse2D, circle1, =, new, Ellipse2D, ., Double, (]
[+, ww, -, 6, ,, yy, +, hh, /, 2, ), ;, Ellipse2D, circle1, =, new, Ellipse2D, ., Double, (]
[+, ww, -, 6, ,, yy, +, hh, /, 2, ), ;, Ellipse2D, circle1, =, new, Ellipse2D, ., Double, (]
[+, hh, /, 2, ), ;, Ellipse2D, circle1, =, new, Ellipse2D, ., Double, (, one, ., getX, (, ), -]
[/, 2, ), ;, Ellipse2D, circle1, =, new, Ellipse2D, ., Double, (, one, ., getX, (, ), -, 5, ,]
[/, 2, ), ;, Ellipse2D, circle1, =, new, Ellipse2D, ., Double, (, one, ., getX, (, ), -, 5, ,]
[/, 2, ), ;, Ellipse2D, circle1, =, new, Ellipse2D, ., Double, (, one, ., getX, (, ), -, 5, ,]
[=, new, Ellipse2D, ., Double, (, one, ., getX, (, ), -, 5, ,, one, ., getY, (, ), -]
[Ellipse2D, ., Double, (, one, ., getX, (, ), -, 5, ,, one, ., getY, (, ), -, 5, ,]
[Double, (, one, ., getX, (, ), -, 5, ,, one, ., getY, (, ), -, 5, ,, 10, ,]
[), -, 5, ,, one, ., getY, (, ), -, 5, ,, 10, ,, 10, ), ;, Ellipse2D, circle2, =]
[., getY, (, ), -, 5, ,, 10, ,, 10, ), ;, Ellipse2D, circle2, =, new, Ellipse2D, ., Double, (]
[., getY, (, ), -, 5, ,, 10, ,, 10, ), ;, Ellipse2D, circle2, =, new, Ellipse2D, ., Double, (]
[., getY, (, ), -, 5, ,, 10, ,, 10, ), ;, Ellipse2D, circle2, =, new, Ellipse2D, ., Double, (]
[,, 10, ,, 10, ), ;, Ellipse2D, circle2, =, new, Ellipse2D, ., Double, (, two, ., getX, (, ), -]
[,, 10, ), ;, Ellipse2D, circle2, =, new, Ellipse2D, ., Double, (, two, ., getX, (, ), -, 6, ,]
[,, 10, ), ;, Ellipse2D, circle2, =, new, Ellipse2D, ., Double, (, two, ., getX, (, ), -, 6, ,]
[,, 10, ), ;, Ellipse2D, circle2, =, new, Ellipse2D, ., Double, (, two, ., getX, (, ), -, 6, ,]
[=, new, Ellipse2D, ., Double, (, two, ., getX, (, ), -, 6, ,, two, ., getY, (, ), -]
[Ellipse2D, ., Double, (, two, ., getX, (, ), -, 6, ,, two, ., getY, (, ), -, 5, ,]
[Double, (, two, ., getX, (, ), -, 6, ,, two, ., getY, (, ), -, 5, ,, 10, ,]
[., getX, (, ), -, 6, ,, two, ., getY, (, ), -, 5, ,, 10, ,, 10, ), ;]
[., getX, (, ), -, 6, ,, two, ., getY, (, ), -, 5, ,, 10, ,, 10, ), ;]
[-, 6, ,, two, ., getY, (, ), -, 5, ,, 10, ,, 10, ), ;, g2, ., draw, (]
[two, ., getY, (, ), -, 5, ,, 10, ,, 10, ), ;, g2, ., draw, (, circle1, ), ;]
[two, ., getY, (, ), -, 5, ,, 10, ,, 10, ), ;, g2, ., draw, (, circle1, ), ;]
[), -, 5, ,, 10, ,, 10, ), ;, g2, ., draw, (, circle1, ), ;, g2, ., fill, (]
[,, 10, ,, 10, ), ;, g2, ., draw, (, circle1, ), ;, g2, ., fill, (, circle1, ), ;]
[,, 10, ,, 10, ), ;, g2, ., draw, (, circle1, ), ;, g2, ., fill, (, circle1, ), ;]
[), ;, g2, ., draw, (, circle1, ), ;, g2, ., fill, (, circle1, ), ;, g2, ., draw, (]
[., draw, (, circle1, ), ;, g2, ., fill, (, circle1, ), ;, g2, ., draw, (, circle2, ), ;]
[., draw, (, circle1, ), ;, g2, ., fill, (, circle1, ), ;, g2, ., draw, (, circle2, ), ;]
[), ;, g2, ., fill, (, circle1, ), ;, g2, ., draw, (, circle2, ), ;, g2, ., fill, (]
[circle1, ), ;, g2, ., draw, (, circle2, ), ;, g2, ., fill, (, circle2, ), ;, Line2D, line, =]
[draw, (, circle2, ), ;, g2, ., fill, (, circle2, ), ;, Line2D, line, =, new, Line2D, ., Double, (]
[circle2, ), ;, g2, ., fill, (, circle2, ), ;, Line2D, line, =, new, Line2D, ., Double, (, one, ,]
[fill, (, circle2, ), ;, Line2D, line, =, new, Line2D, ., Double, (, one, ,, two, ), ;, if, (]
[fill, (, circle2, ), ;, Line2D, line, =, new, Line2D, ., Double, (, one, ,, two, ), ;, if, (]
[fill, (, circle2, ), ;, Line2D, line, =, new, Line2D, ., Double, (, one, ,, two, ), ;, if, (]
[;, Line2D, line, =, new, Line2D, ., Double, (, one, ,, two, ), ;, if, (, this, ., stroke, !=]
[=, new, Line2D, ., Double, (, one, ,, two, ), ;, if, (, this, ., stroke, !=, null, ), {]
[=, new, Line2D, ., Double, (, one, ,, two, ), ;, if, (, this, ., stroke, !=, null, ), {]
[Double, (, one, ,, two, ), ;, if, (, this, ., stroke, !=, null, ), {, g2, ., setStroke, (]
[Double, (, one, ,, two, ), ;, if, (, this, ., stroke, !=, null, ), {, g2, ., setStroke, (]
[(, this, ., stroke, !=, null, ), {, g2, ., setStroke, (, this, ., stroke, ), ;, }, else, {]
[(, this, ., stroke, !=, null, ), {, g2, ., setStroke, (, this, ., stroke, ), ;, }, else, {]
[!=, null, ), {, g2, ., setStroke, (, this, ., stroke, ), ;, }, else, {, g2, ., setStroke, (]
[{, g2, ., setStroke, (, this, ., stroke, ), ;, }, else, {, g2, ., setStroke, (, new, BasicStroke, (]
[this, ., stroke, ), ;, }, else, {, g2, ., setStroke, (, new, BasicStroke, (, 0.0f, ), ), ;, }]
[this, ., stroke, ), ;, }, else, {, g2, ., setStroke, (, new, BasicStroke, (, 0.0f, ), ), ;, }]
[;, }, else, {, g2, ., setStroke, (, new, BasicStroke, (, 0.0f, ), ), ;, }, g2, ., draw, (]
[getListCellRendererComponent, (, JList, list, ,, Object, value, ,, int, index, ,, boolean, isSelected, ,, boolean, cellHasFocus, ), {, if, (]
[getListCellRendererComponent, (, JList, list, ,, Object, value, ,, int, index, ,, boolean, isSelected, ,, boolean, cellHasFocus, ), {, if, (]
[index, ,, boolean, isSelected, ,, boolean, cellHasFocus, ), {, if, (, value, instanceof, StrokeSample, ), {, final, StrokeSample, in, =]
[isSelected, ,, boolean, cellHasFocus, ), {, if, (, value, instanceof, StrokeSample, ), {, final, StrokeSample, in, =, (, StrokeSample, )]
[boolean, cellHasFocus, ), {, if, (, value, instanceof, StrokeSample, ), {, final, StrokeSample, in, =, (, StrokeSample, ), value, ;]
[), {, if, (, value, instanceof, StrokeSample, ), {, final, StrokeSample, in, =, (, StrokeSample, ), value, ;, setStroke, (]
[), {, if, (, value, instanceof, StrokeSample, ), {, final, StrokeSample, in, =, (, StrokeSample, ), value, ;, setStroke, (]
[final, StrokeSample, in, =, (, StrokeSample, ), value, ;, setStroke, (, in, ., getStroke, (, ), ), ;, }, return]
