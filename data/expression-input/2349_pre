[apache, ., commons, ., math3, ., util, ., Pair, ;, public, class, MultivariateNormalMixtureExpectationMaximization, {, private, static, final, int, DEFAULT_MAX_ITERATIONS, =]
[Pair, ;, public, class, MultivariateNormalMixtureExpectationMaximization, {, private, static, final, int, DEFAULT_MAX_ITERATIONS, =, 1000, ;, private, static, final, double, DEFAULT_THRESHOLD, =]
[=, 1E-5, ;, private, final, double, [, ], [, ], data, ;, private, MixtureMultivariateNormalDistribution, fittedModel, ;, private, double, logLikelihood, =]
[;, public, MultivariateNormalMixtureExpectationMaximization, (, double, [, ], [, ], data, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, ,, NumberIsTooSmallException, {, if, (]
[;, public, MultivariateNormalMixtureExpectationMaximization, (, double, [, ], [, ], data, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, ,, NumberIsTooSmallException, {, if, (]
[;, public, MultivariateNormalMixtureExpectationMaximization, (, double, [, ], [, ], data, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, ,, NumberIsTooSmallException, {, if, (]
[double, [, ], [, ], data, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, ,, NumberIsTooSmallException, {, if, (, data, ., length, <]
[], data, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, ,, NumberIsTooSmallException, {, if, (, data, ., length, <, 1, ), {, throw]
[throws, NotStrictlyPositiveException, ,, DimensionMismatchException, ,, NumberIsTooSmallException, {, if, (, data, ., length, <, 1, ), {, throw, new, NotStrictlyPositiveException, (]
[throws, NotStrictlyPositiveException, ,, DimensionMismatchException, ,, NumberIsTooSmallException, {, if, (, data, ., length, <, 1, ), {, throw, new, NotStrictlyPositiveException, (]
[{, if, (, data, ., length, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, data, ., length, ), ;, }]
[{, if, (, data, ., length, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, data, ., length, ), ;, }]
[., length, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, data, ., length, ), ;, }, this, ., data, =]
[1, ), {, throw, new, NotStrictlyPositiveException, (, data, ., length, ), ;, }, this, ., data, =, new, double, []
[1, ), {, throw, new, NotStrictlyPositiveException, (, data, ., length, ), ;, }, this, ., data, =, new, double, []
[NotStrictlyPositiveException, (, data, ., length, ), ;, }, this, ., data, =, new, double, [, data, ., length, ], []
[NotStrictlyPositiveException, (, data, ., length, ), ;, }, this, ., data, =, new, double, [, data, ., length, ], []
[NotStrictlyPositiveException, (, data, ., length, ), ;, }, this, ., data, =, new, double, [, data, ., length, ], []
[data, ., length, ), ;, }, this, ., data, =, new, double, [, data, ., length, ], [, data, []
[double, [, data, ., length, ], [, data, [, 0, ], ., length, ], ;, for, (, int, i, =]
[data, ., length, ], [, data, [, 0, ], ., length, ], ;, for, (, int, i, =, 0, ;]
[data, ., length, ], [, data, [, 0, ], ., length, ], ;, for, (, int, i, =, 0, ;]
[length, ], [, data, [, 0, ], ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[length, ], [, data, [, 0, ], ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[[, 0, ], ., length, ], ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[[, 0, ], ., length, ], ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, if, (, data, []
[;, i, <, data, ., length, ;, i, ++, ), {, if, (, data, [, i, ], ., length, !=]
[;, i, <, data, ., length, ;, i, ++, ), {, if, (, data, [, i, ], ., length, !=]
[;, i, <, data, ., length, ;, i, ++, ), {, if, (, data, [, i, ], ., length, !=]
[<, data, ., length, ;, i, ++, ), {, if, (, data, [, i, ], ., length, !=, data, []
[), {, if, (, data, [, i, ], ., length, !=, data, [, 0, ], ., length, ), {, throw]
[(, data, [, i, ], ., length, !=, data, [, 0, ], ., length, ), {, throw, new, DimensionMismatchException, (]
[(, data, [, i, ], ., length, !=, data, [, 0, ], ., length, ), {, throw, new, DimensionMismatchException, (]
[(, data, [, i, ], ., length, !=, data, [, 0, ], ., length, ), {, throw, new, DimensionMismatchException, (]
[[, i, ], ., length, !=, data, [, 0, ], ., length, ), {, throw, new, DimensionMismatchException, (, data, []
[!=, data, [, 0, ], ., length, ), {, throw, new, DimensionMismatchException, (, data, [, i, ], ., length, ,]
[!=, data, [, 0, ], ., length, ), {, throw, new, DimensionMismatchException, (, data, [, i, ], ., length, ,]
[!=, data, [, 0, ], ., length, ), {, throw, new, DimensionMismatchException, (, data, [, i, ], ., length, ,]
[[, 0, ], ., length, ), {, throw, new, DimensionMismatchException, (, data, [, i, ], ., length, ,, data, []
[DimensionMismatchException, (, data, [, i, ], ., length, ,, data, [, 0, ], ., length, ), ;, }, if, (]
[DimensionMismatchException, (, data, [, i, ], ., length, ,, data, [, 0, ], ., length, ), ;, }, if, (]
[DimensionMismatchException, (, data, [, i, ], ., length, ,, data, [, 0, ], ., length, ), ;, }, if, (]
[DimensionMismatchException, (, data, [, i, ], ., length, ,, data, [, 0, ], ., length, ), ;, }, if, (]
[data, [, i, ], ., length, ,, data, [, 0, ], ., length, ), ;, }, if, (, data, []
[length, ,, data, [, 0, ], ., length, ), ;, }, if, (, data, [, i, ], ., length, <]
[0, ], ., length, ), ;, }, if, (, data, [, i, ], ., length, <, 2, ), {, throw]
[length, ), ;, }, if, (, data, [, i, ], ., length, <, 2, ), {, throw, new, NumberIsTooSmallException, (]
[length, ), ;, }, if, (, data, [, i, ], ., length, <, 2, ), {, throw, new, NumberIsTooSmallException, (]
[if, (, data, [, i, ], ., length, <, 2, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., NUMBER_TOO_SMALL, ,]
[if, (, data, [, i, ], ., length, <, 2, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., NUMBER_TOO_SMALL, ,]
[if, (, data, [, i, ], ., length, <, 2, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., NUMBER_TOO_SMALL, ,]
[data, [, i, ], ., length, <, 2, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., NUMBER_TOO_SMALL, ,, data, []
[length, <, 2, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., NUMBER_TOO_SMALL, ,, data, [, i, ], ., length, ,]
[2, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., NUMBER_TOO_SMALL, ,, data, [, i, ], ., length, ,, 2, ,]
[new, NumberIsTooSmallException, (, LocalizedFormats, ., NUMBER_TOO_SMALL, ,, data, [, i, ], ., length, ,, 2, ,, true, ), ;, }]
[new, NumberIsTooSmallException, (, LocalizedFormats, ., NUMBER_TOO_SMALL, ,, data, [, i, ], ., length, ,, 2, ,, true, ), ;, }]
[new, NumberIsTooSmallException, (, LocalizedFormats, ., NUMBER_TOO_SMALL, ,, data, [, i, ], ., length, ,, 2, ,, true, ), ;, }]
[., NUMBER_TOO_SMALL, ,, data, [, i, ], ., length, ,, 2, ,, true, ), ;, }, this, ., data, []
[data, [, i, ], ., length, ,, 2, ,, true, ), ;, }, this, ., data, [, i, ], =]
[data, [, i, ], ., length, ,, 2, ,, true, ), ;, }, this, ., data, [, i, ], =]
[., length, ,, 2, ,, true, ), ;, }, this, ., data, [, i, ], =, MathArrays, ., copyOf, (]
[., length, ,, 2, ,, true, ), ;, }, this, ., data, [, i, ], =, MathArrays, ., copyOf, (]
[,, 2, ,, true, ), ;, }, this, ., data, [, i, ], =, MathArrays, ., copyOf, (, data, []
[true, ), ;, }, this, ., data, [, i, ], =, MathArrays, ., copyOf, (, data, [, i, ], ,]
[true, ), ;, }, this, ., data, [, i, ], =, MathArrays, ., copyOf, (, data, [, i, ], ,]
[true, ), ;, }, this, ., data, [, i, ], =, MathArrays, ., copyOf, (, data, [, i, ], ,]
[;, }, this, ., data, [, i, ], =, MathArrays, ., copyOf, (, data, [, i, ], ,, data, []
[MixtureMultivariateNormalDistribution, initialMixture, ,, final, int, maxIterations, ,, final, double, threshold, ), throws, SingularMatrixException, ,, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (]
[MixtureMultivariateNormalDistribution, initialMixture, ,, final, int, maxIterations, ,, final, double, threshold, ), throws, SingularMatrixException, ,, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (]
[,, final, int, maxIterations, ,, final, double, threshold, ), throws, SingularMatrixException, ,, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (, maxIterations, <]
[,, final, double, threshold, ), throws, SingularMatrixException, ,, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (, maxIterations, <, 1, ), {, throw]
[threshold, ), throws, SingularMatrixException, ,, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (, maxIterations, <, 1, ), {, throw, new, NotStrictlyPositiveException, (]
[,, DimensionMismatchException, {, if, (, maxIterations, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, maxIterations, ), ;, }, if, (]
[,, DimensionMismatchException, {, if, (, maxIterations, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, maxIterations, ), ;, }, if, (]
[{, if, (, maxIterations, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, maxIterations, ), ;, }, if, (, threshold, <]
[{, if, (, maxIterations, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, maxIterations, ), ;, }, if, (, threshold, <]
[), {, throw, new, NotStrictlyPositiveException, (, maxIterations, ), ;, }, if, (, threshold, <, Double, ., MIN_VALUE, ), {, throw]
[new, NotStrictlyPositiveException, (, maxIterations, ), ;, }, if, (, threshold, <, Double, ., MIN_VALUE, ), {, throw, new, NotStrictlyPositiveException, (]
[(, threshold, <, Double, ., MIN_VALUE, ), {, throw, new, NotStrictlyPositiveException, (, threshold, ), ;, }, final, int, n, =]
[(, threshold, <, Double, ., MIN_VALUE, ), {, throw, new, NotStrictlyPositiveException, (, threshold, ), ;, }, final, int, n, =]
[throw, new, NotStrictlyPositiveException, (, threshold, ), ;, }, final, int, n, =, data, ., length, ;, final, int, numCols, =]
[throw, new, NotStrictlyPositiveException, (, threshold, ), ;, }, final, int, n, =, data, ., length, ;, final, int, numCols, =]
[throw, new, NotStrictlyPositiveException, (, threshold, ), ;, }, final, int, n, =, data, ., length, ;, final, int, numCols, =]
[NotStrictlyPositiveException, (, threshold, ), ;, }, final, int, n, =, data, ., length, ;, final, int, numCols, =, data, []
[=, data, ., length, ;, final, int, numCols, =, data, [, 0, ], ., length, ;, final, int, k, =]
[=, data, ., length, ;, final, int, numCols, =, data, [, 0, ], ., length, ;, final, int, k, =]
[=, data, ., length, ;, final, int, numCols, =, data, [, 0, ], ., length, ;, final, int, k, =]
[length, ;, final, int, k, =, initialMixture, ., getComponents, (, ), ., size, (, ), ;, final, int, numMeanColumns, =]
[length, ;, final, int, k, =, initialMixture, ., getComponents, (, ), ., size, (, ), ;, final, int, numMeanColumns, =]
[length, ;, final, int, k, =, initialMixture, ., getComponents, (, ), ., size, (, ), ;, final, int, numMeanColumns, =]
[length, ;, final, int, k, =, initialMixture, ., getComponents, (, ), ., size, (, ), ;, final, int, numMeanColumns, =]
[length, ;, final, int, k, =, initialMixture, ., getComponents, (, ), ., size, (, ), ;, final, int, numMeanColumns, =]
[length, ;, final, int, k, =, initialMixture, ., getComponents, (, ), ., size, (, ), ;, final, int, numMeanColumns, =]
[getComponents, (, ), ., size, (, ), ;, final, int, numMeanColumns, =, initialMixture, ., getComponents, (, ), ., get, (]
[(, ), ., get, (, 0, ), ., getSecond, (, ), ., getMeans, (, ), ., length, ;, if, (]
[(, ), ., get, (, 0, ), ., getSecond, (, ), ., getMeans, (, ), ., length, ;, if, (]
[., get, (, 0, ), ., getSecond, (, ), ., getMeans, (, ), ., length, ;, if, (, numMeanColumns, !=]
[), ., getSecond, (, ), ., getMeans, (, ), ., length, ;, if, (, numMeanColumns, !=, numCols, ), {, throw]
[(, ), ., getMeans, (, ), ., length, ;, if, (, numMeanColumns, !=, numCols, ), {, throw, new, DimensionMismatchException, (]
[., getMeans, (, ), ., length, ;, if, (, numMeanColumns, !=, numCols, ), {, throw, new, DimensionMismatchException, (, numMeanColumns, ,]
[if, (, numMeanColumns, !=, numCols, ), {, throw, new, DimensionMismatchException, (, numMeanColumns, ,, numCols, ), ;, }, int, numIterations, =]
[), {, throw, new, DimensionMismatchException, (, numMeanColumns, ,, numCols, ), ;, }, int, numIterations, =, 0, ;, double, previousLogLikelihood, =]
[throw, new, DimensionMismatchException, (, numMeanColumns, ,, numCols, ), ;, }, int, numIterations, =, 0, ;, double, previousLogLikelihood, =, 0d, ;]
[DimensionMismatchException, (, numMeanColumns, ,, numCols, ), ;, }, int, numIterations, =, 0, ;, double, previousLogLikelihood, =, 0d, ;, logLikelihood, =]
[DimensionMismatchException, (, numMeanColumns, ,, numCols, ), ;, }, int, numIterations, =, 0, ;, double, previousLogLikelihood, =, 0d, ;, logLikelihood, =]
[numCols, ), ;, }, int, numIterations, =, 0, ;, double, previousLogLikelihood, =, 0d, ;, logLikelihood, =, Double, ., NEGATIVE_INFINITY, ;]
[;, }, int, numIterations, =, 0, ;, double, previousLogLikelihood, =, 0d, ;, logLikelihood, =, Double, ., NEGATIVE_INFINITY, ;, fittedModel, =]
[numIterations, =, 0, ;, double, previousLogLikelihood, =, 0d, ;, logLikelihood, =, Double, ., NEGATIVE_INFINITY, ;, fittedModel, =, new, MixtureMultivariateNormalDistribution, (]
[numIterations, =, 0, ;, double, previousLogLikelihood, =, 0d, ;, logLikelihood, =, Double, ., NEGATIVE_INFINITY, ;, fittedModel, =, new, MixtureMultivariateNormalDistribution, (]
[logLikelihood, =, Double, ., NEGATIVE_INFINITY, ;, fittedModel, =, new, MixtureMultivariateNormalDistribution, (, initialMixture, ., getComponents, (, ), ), ;, while, (]
[logLikelihood, =, Double, ., NEGATIVE_INFINITY, ;, fittedModel, =, new, MixtureMultivariateNormalDistribution, (, initialMixture, ., getComponents, (, ), ), ;, while, (]
[logLikelihood, =, Double, ., NEGATIVE_INFINITY, ;, fittedModel, =, new, MixtureMultivariateNormalDistribution, (, initialMixture, ., getComponents, (, ), ), ;, while, (]
[logLikelihood, =, Double, ., NEGATIVE_INFINITY, ;, fittedModel, =, new, MixtureMultivariateNormalDistribution, (, initialMixture, ., getComponents, (, ), ), ;, while, (]
[., NEGATIVE_INFINITY, ;, fittedModel, =, new, MixtureMultivariateNormalDistribution, (, initialMixture, ., getComponents, (, ), ), ;, while, (, numIterations, ++, <=]
[;, fittedModel, =, new, MixtureMultivariateNormalDistribution, (, initialMixture, ., getComponents, (, ), ), ;, while, (, numIterations, ++, <=, maxIterations, &&]
[;, fittedModel, =, new, MixtureMultivariateNormalDistribution, (, initialMixture, ., getComponents, (, ), ), ;, while, (, numIterations, ++, <=, maxIterations, &&]
[;, fittedModel, =, new, MixtureMultivariateNormalDistribution, (, initialMixture, ., getComponents, (, ), ), ;, while, (, numIterations, ++, <=, maxIterations, &&]
[MixtureMultivariateNormalDistribution, (, initialMixture, ., getComponents, (, ), ), ;, while, (, numIterations, ++, <=, maxIterations, &&, Math, ., abs, (]
[MixtureMultivariateNormalDistribution, (, initialMixture, ., getComponents, (, ), ), ;, while, (, numIterations, ++, <=, maxIterations, &&, Math, ., abs, (]
[initialMixture, ., getComponents, (, ), ), ;, while, (, numIterations, ++, <=, maxIterations, &&, Math, ., abs, (, previousLogLikelihood, -]
[(, ), ), ;, while, (, numIterations, ++, <=, maxIterations, &&, Math, ., abs, (, previousLogLikelihood, -, logLikelihood, ), >]
[;, while, (, numIterations, ++, <=, maxIterations, &&, Math, ., abs, (, previousLogLikelihood, -, logLikelihood, ), >, threshold, ), {]
[(, numIterations, ++, <=, maxIterations, &&, Math, ., abs, (, previousLogLikelihood, -, logLikelihood, ), >, threshold, ), {, previousLogLikelihood, =]
[&&, Math, ., abs, (, previousLogLikelihood, -, logLikelihood, ), >, threshold, ), {, previousLogLikelihood, =, logLikelihood, ;, double, sumLogLikelihood, =]
[=, logLikelihood, ;, double, sumLogLikelihood, =, 0d, ;, final, List, <, Pair, <, Double, ,, MultivariateNormalDistribution, >, >, components, =]
[=, logLikelihood, ;, double, sumLogLikelihood, =, 0d, ;, final, List, <, Pair, <, Double, ,, MultivariateNormalDistribution, >, >, components, =]
[<, Double, ,, MultivariateNormalDistribution, >, >, components, =, fittedModel, ., getComponents, (, ), ;, final, double, [, ], weights, =]
[MultivariateNormalDistribution, >, >, components, =, fittedModel, ., getComponents, (, ), ;, final, double, [, ], weights, =, new, double, []
[), ;, final, double, [, ], weights, =, new, double, [, k, ], ;, final, MultivariateNormalDistribution, [, ], mvns, =]
[double, [, ], weights, =, new, double, [, k, ], ;, final, MultivariateNormalDistribution, [, ], mvns, =, new, MultivariateNormalDistribution, []
[k, ], ;, final, MultivariateNormalDistribution, [, ], mvns, =, new, MultivariateNormalDistribution, [, k, ], ;, for, (, int, j, =]
[;, final, MultivariateNormalDistribution, [, ], mvns, =, new, MultivariateNormalDistribution, [, k, ], ;, for, (, int, j, =, 0, ;]
[;, final, MultivariateNormalDistribution, [, ], mvns, =, new, MultivariateNormalDistribution, [, k, ], ;, for, (, int, j, =, 0, ;]
[MultivariateNormalDistribution, [, ], mvns, =, new, MultivariateNormalDistribution, [, k, ], ;, for, (, int, j, =, 0, ;, j, <]
[], mvns, =, new, MultivariateNormalDistribution, [, k, ], ;, for, (, int, j, =, 0, ;, j, <, k, ;]
[], mvns, =, new, MultivariateNormalDistribution, [, k, ], ;, for, (, int, j, =, 0, ;, j, <, k, ;]
[MultivariateNormalDistribution, [, k, ], ;, for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {]
[MultivariateNormalDistribution, [, k, ], ;, for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {]
[k, ], ;, for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {, weights, []
[for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {, weights, [, j, ], =]
[for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {, weights, [, j, ], =]
[for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {, weights, [, j, ], =]
[=, 0, ;, j, <, k, ;, j, ++, ), {, weights, [, j, ], =, components, ., get, (]
[j, ++, ), {, weights, [, j, ], =, components, ., get, (, j, ), ., getFirst, (, ), ;]
[j, ++, ), {, weights, [, j, ], =, components, ., get, (, j, ), ., getFirst, (, ), ;]
[), {, weights, [, j, ], =, components, ., get, (, j, ), ., getFirst, (, ), ;, mvns, []
[[, j, ], =, components, ., get, (, j, ), ., getFirst, (, ), ;, mvns, [, j, ], =]
[[, j, ], =, components, ., get, (, j, ), ., getFirst, (, ), ;, mvns, [, j, ], =]
[[, j, ], =, components, ., get, (, j, ), ., getFirst, (, ), ;, mvns, [, j, ], =]
[components, ., get, (, j, ), ., getFirst, (, ), ;, mvns, [, j, ], =, components, ., get, (]
[components, ., get, (, j, ), ., getSecond, (, ), ;, }, final, double, [, ], [, ], gamma, =]
[(, j, ), ., getSecond, (, ), ;, }, final, double, [, ], [, ], gamma, =, new, double, []
[., getSecond, (, ), ;, }, final, double, [, ], [, ], gamma, =, new, double, [, n, ], []
[], [, ], gamma, =, new, double, [, n, ], [, k, ], ;, final, double, [, ], gammaSums, =]
[gamma, =, new, double, [, n, ], [, k, ], ;, final, double, [, ], gammaSums, =, new, double, []
[final, double, [, ], gammaSums, =, new, double, [, k, ], ;, final, double, [, ], [, ], gammaDataProdSums, =]
[], gammaSums, =, new, double, [, k, ], ;, final, double, [, ], [, ], gammaDataProdSums, =, new, double, []
[new, double, [, k, ], ;, final, double, [, ], [, ], gammaDataProdSums, =, new, double, [, k, ], []
[[, ], [, ], gammaDataProdSums, =, new, double, [, k, ], [, numCols, ], ;, for, (, int, i, =]
[[, ], gammaDataProdSums, =, new, double, [, k, ], [, numCols, ], ;, for, (, int, i, =, 0, ;]
[[, ], gammaDataProdSums, =, new, double, [, k, ], [, numCols, ], ;, for, (, int, i, =, 0, ;]
[gammaDataProdSums, =, new, double, [, k, ], [, numCols, ], ;, for, (, int, i, =, 0, ;, i, <]
[new, double, [, k, ], [, numCols, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[new, double, [, k, ], [, numCols, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, rowDensity, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, rowDensity, =]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, rowDensity, =, fittedModel, ., density, (]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, rowDensity, =, fittedModel, ., density, (]
[0, ;, i, <, n, ;, i, ++, ), {, final, double, rowDensity, =, fittedModel, ., density, (, data, []
[n, ;, i, ++, ), {, final, double, rowDensity, =, fittedModel, ., density, (, data, [, i, ], ), ;]
[i, ++, ), {, final, double, rowDensity, =, fittedModel, ., density, (, data, [, i, ], ), ;, sumLogLikelihood, +=]
[i, ++, ), {, final, double, rowDensity, =, fittedModel, ., density, (, data, [, i, ], ), ;, sumLogLikelihood, +=]
[final, double, rowDensity, =, fittedModel, ., density, (, data, [, i, ], ), ;, sumLogLikelihood, +=, Math, ., log, (]
[data, [, i, ], ), ;, sumLogLikelihood, +=, Math, ., log, (, rowDensity, ), ;, for, (, int, j, =]
[i, ], ), ;, sumLogLikelihood, +=, Math, ., log, (, rowDensity, ), ;, for, (, int, j, =, 0, ;]
[i, ], ), ;, sumLogLikelihood, +=, Math, ., log, (, rowDensity, ), ;, for, (, int, j, =, 0, ;]
[), ;, sumLogLikelihood, +=, Math, ., log, (, rowDensity, ), ;, for, (, int, j, =, 0, ;, j, <]
[sumLogLikelihood, +=, Math, ., log, (, rowDensity, ), ;, for, (, int, j, =, 0, ;, j, <, k, ;]
[sumLogLikelihood, +=, Math, ., log, (, rowDensity, ), ;, for, (, int, j, =, 0, ;, j, <, k, ;]
[log, (, rowDensity, ), ;, for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {]
[log, (, rowDensity, ), ;, for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {]
[log, (, rowDensity, ), ;, for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {]
[rowDensity, ), ;, for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {, gamma, []
[for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {, gamma, [, i, ], []
[j, =, 0, ;, j, <, k, ;, j, ++, ), {, gamma, [, i, ], [, j, ], =]
[j, =, 0, ;, j, <, k, ;, j, ++, ), {, gamma, [, i, ], [, j, ], =]
[j, =, 0, ;, j, <, k, ;, j, ++, ), {, gamma, [, i, ], [, j, ], =]
[j, =, 0, ;, j, <, k, ;, j, ++, ), {, gamma, [, i, ], [, j, ], =]
[0, ;, j, <, k, ;, j, ++, ), {, gamma, [, i, ], [, j, ], =, weights, []
[<, k, ;, j, ++, ), {, gamma, [, i, ], [, j, ], =, weights, [, j, ], *]
[<, k, ;, j, ++, ), {, gamma, [, i, ], [, j, ], =, weights, [, j, ], *]
[<, k, ;, j, ++, ), {, gamma, [, i, ], [, j, ], =, weights, [, j, ], *]
[;, j, ++, ), {, gamma, [, i, ], [, j, ], =, weights, [, j, ], *, mvns, []
[gamma, [, i, ], [, j, ], =, weights, [, j, ], *, mvns, [, j, ], ., density, (]
[gamma, [, i, ], [, j, ], =, weights, [, j, ], *, mvns, [, j, ], ., density, (]
[i, ], [, j, ], =, weights, [, j, ], *, mvns, [, j, ], ., density, (, data, []
[], =, weights, [, j, ], *, mvns, [, j, ], ., density, (, data, [, i, ], ), /]
[weights, [, j, ], *, mvns, [, j, ], ., density, (, data, [, i, ], ), /, rowDensity, ;]
[weights, [, j, ], *, mvns, [, j, ], ., density, (, data, [, i, ], ), /, rowDensity, ;]
[j, ], *, mvns, [, j, ], ., density, (, data, [, i, ], ), /, rowDensity, ;, gammaSums, []
[mvns, [, j, ], ., density, (, data, [, i, ], ), /, rowDensity, ;, gammaSums, [, j, ], +=]
[mvns, [, j, ], ., density, (, data, [, i, ], ), /, rowDensity, ;, gammaSums, [, j, ], +=]
[mvns, [, j, ], ., density, (, data, [, i, ], ), /, rowDensity, ;, gammaSums, [, j, ], +=]
[j, ], ., density, (, data, [, i, ], ), /, rowDensity, ;, gammaSums, [, j, ], +=, gamma, []
[density, (, data, [, i, ], ), /, rowDensity, ;, gammaSums, [, j, ], +=, gamma, [, i, ], []
[rowDensity, ;, gammaSums, [, j, ], +=, gamma, [, i, ], [, j, ], ;, for, (, int, col, =]
[gammaSums, [, j, ], +=, gamma, [, i, ], [, j, ], ;, for, (, int, col, =, 0, ;]
[gammaSums, [, j, ], +=, gamma, [, i, ], [, j, ], ;, for, (, int, col, =, 0, ;]
[j, ], +=, gamma, [, i, ], [, j, ], ;, for, (, int, col, =, 0, ;, col, <]
[+=, gamma, [, i, ], [, j, ], ;, for, (, int, col, =, 0, ;, col, <, numCols, ;]
[+=, gamma, [, i, ], [, j, ], ;, for, (, int, col, =, 0, ;, col, <, numCols, ;]
[], [, j, ], ;, for, (, int, col, =, 0, ;, col, <, numCols, ;, col, ++, ), {]
[], [, j, ], ;, for, (, int, col, =, 0, ;, col, <, numCols, ;, col, ++, ), {]
[], [, j, ], ;, for, (, int, col, =, 0, ;, col, <, numCols, ;, col, ++, ), {]
[j, ], ;, for, (, int, col, =, 0, ;, col, <, numCols, ;, col, ++, ), {, gammaDataProdSums, []
[for, (, int, col, =, 0, ;, col, <, numCols, ;, col, ++, ), {, gammaDataProdSums, [, j, ], []
[col, =, 0, ;, col, <, numCols, ;, col, ++, ), {, gammaDataProdSums, [, j, ], [, col, ], +=]
[col, =, 0, ;, col, <, numCols, ;, col, ++, ), {, gammaDataProdSums, [, j, ], [, col, ], +=]
[col, =, 0, ;, col, <, numCols, ;, col, ++, ), {, gammaDataProdSums, [, j, ], [, col, ], +=]
[col, =, 0, ;, col, <, numCols, ;, col, ++, ), {, gammaDataProdSums, [, j, ], [, col, ], +=]
[0, ;, col, <, numCols, ;, col, ++, ), {, gammaDataProdSums, [, j, ], [, col, ], +=, gamma, []
[<, numCols, ;, col, ++, ), {, gammaDataProdSums, [, j, ], [, col, ], +=, gamma, [, i, ], []
[col, ++, ), {, gammaDataProdSums, [, j, ], [, col, ], +=, gamma, [, i, ], [, j, ], *]
[col, ++, ), {, gammaDataProdSums, [, j, ], [, col, ], +=, gamma, [, i, ], [, j, ], *]
[col, ++, ), {, gammaDataProdSums, [, j, ], [, col, ], +=, gamma, [, i, ], [, j, ], *]
[), {, gammaDataProdSums, [, j, ], [, col, ], +=, gamma, [, i, ], [, j, ], *, data, []
[[, j, ], [, col, ], +=, gamma, [, i, ], [, j, ], *, data, [, i, ], []
[+=, gamma, [, i, ], [, j, ], *, data, [, i, ], [, col, ], ;, }, }, }]
[[, i, ], [, j, ], *, data, [, i, ], [, col, ], ;, }, }, }, logLikelihood, =]
[[, i, ], [, j, ], *, data, [, i, ], [, col, ], ;, }, }, }, logLikelihood, =]
[], [, j, ], *, data, [, i, ], [, col, ], ;, }, }, }, logLikelihood, =, sumLogLikelihood, /]
[], [, col, ], ;, }, }, }, logLikelihood, =, sumLogLikelihood, /, n, ;, final, double, [, ], newWeights, =]
[], ;, }, }, }, logLikelihood, =, sumLogLikelihood, /, n, ;, final, double, [, ], newWeights, =, new, double, []
[final, double, [, ], newWeights, =, new, double, [, k, ], ;, final, double, [, ], [, ], newMeans, =]
[], newWeights, =, new, double, [, k, ], ;, final, double, [, ], [, ], newMeans, =, new, double, []
[new, double, [, k, ], ;, final, double, [, ], [, ], newMeans, =, new, double, [, k, ], []
[[, ], [, ], newMeans, =, new, double, [, k, ], [, numCols, ], ;, for, (, int, j, =]
[[, ], newMeans, =, new, double, [, k, ], [, numCols, ], ;, for, (, int, j, =, 0, ;]
[[, ], newMeans, =, new, double, [, k, ], [, numCols, ], ;, for, (, int, j, =, 0, ;]
[newMeans, =, new, double, [, k, ], [, numCols, ], ;, for, (, int, j, =, 0, ;, j, <]
[new, double, [, k, ], [, numCols, ], ;, for, (, int, j, =, 0, ;, j, <, k, ;]
[new, double, [, k, ], [, numCols, ], ;, for, (, int, j, =, 0, ;, j, <, k, ;]
[], [, numCols, ], ;, for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {]
[], [, numCols, ], ;, for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {]
[numCols, ], ;, for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {, newWeights, []
[for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {, newWeights, [, j, ], =]
[for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {, newWeights, [, j, ], =]
[for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {, newWeights, [, j, ], =]
[int, j, =, 0, ;, j, <, k, ;, j, ++, ), {, newWeights, [, j, ], =, gammaSums, []
[0, ;, j, <, k, ;, j, ++, ), {, newWeights, [, j, ], =, gammaSums, [, j, ], /]
[++, ), {, newWeights, [, j, ], =, gammaSums, [, j, ], /, n, ;, for, (, int, col, =]
[{, newWeights, [, j, ], =, gammaSums, [, j, ], /, n, ;, for, (, int, col, =, 0, ;]
[{, newWeights, [, j, ], =, gammaSums, [, j, ], /, n, ;, for, (, int, col, =, 0, ;]
[[, j, ], =, gammaSums, [, j, ], /, n, ;, for, (, int, col, =, 0, ;, col, <]
[], =, gammaSums, [, j, ], /, n, ;, for, (, int, col, =, 0, ;, col, <, numCols, ;]
[], =, gammaSums, [, j, ], /, n, ;, for, (, int, col, =, 0, ;, col, <, numCols, ;]
[j, ], /, n, ;, for, (, int, col, =, 0, ;, col, <, numCols, ;, col, ++, ), {]
[j, ], /, n, ;, for, (, int, col, =, 0, ;, col, <, numCols, ;, col, ++, ), {]
[j, ], /, n, ;, for, (, int, col, =, 0, ;, col, <, numCols, ;, col, ++, ), {]
[/, n, ;, for, (, int, col, =, 0, ;, col, <, numCols, ;, col, ++, ), {, newMeans, []
[for, (, int, col, =, 0, ;, col, <, numCols, ;, col, ++, ), {, newMeans, [, j, ], []
[col, =, 0, ;, col, <, numCols, ;, col, ++, ), {, newMeans, [, j, ], [, col, ], =]
[col, =, 0, ;, col, <, numCols, ;, col, ++, ), {, newMeans, [, j, ], [, col, ], =]
[col, =, 0, ;, col, <, numCols, ;, col, ++, ), {, newMeans, [, j, ], [, col, ], =]
[col, =, 0, ;, col, <, numCols, ;, col, ++, ), {, newMeans, [, j, ], [, col, ], =]
[0, ;, col, <, numCols, ;, col, ++, ), {, newMeans, [, j, ], [, col, ], =, gammaDataProdSums, []
[<, numCols, ;, col, ++, ), {, newMeans, [, j, ], [, col, ], =, gammaDataProdSums, [, j, ], []
[col, ++, ), {, newMeans, [, j, ], [, col, ], =, gammaDataProdSums, [, j, ], [, col, ], /]
[col, ++, ), {, newMeans, [, j, ], [, col, ], =, gammaDataProdSums, [, j, ], [, col, ], /]
[), {, newMeans, [, j, ], [, col, ], =, gammaDataProdSums, [, j, ], [, col, ], /, gammaSums, []
[[, j, ], [, col, ], /, gammaSums, [, j, ], ;, }, }, final, RealMatrix, [, ], newCovMats, =]
[[, col, ], /, gammaSums, [, j, ], ;, }, }, final, RealMatrix, [, ], newCovMats, =, new, RealMatrix, []
[;, }, }, final, RealMatrix, [, ], newCovMats, =, new, RealMatrix, [, k, ], ;, for, (, int, j, =]
[}, final, RealMatrix, [, ], newCovMats, =, new, RealMatrix, [, k, ], ;, for, (, int, j, =, 0, ;]
[}, final, RealMatrix, [, ], newCovMats, =, new, RealMatrix, [, k, ], ;, for, (, int, j, =, 0, ;]
[RealMatrix, [, ], newCovMats, =, new, RealMatrix, [, k, ], ;, for, (, int, j, =, 0, ;, j, <]
[], newCovMats, =, new, RealMatrix, [, k, ], ;, for, (, int, j, =, 0, ;, j, <, k, ;]
[], newCovMats, =, new, RealMatrix, [, k, ], ;, for, (, int, j, =, 0, ;, j, <, k, ;]
[RealMatrix, [, k, ], ;, for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {]
[RealMatrix, [, k, ], ;, for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {]
[k, ], ;, for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {, newCovMats, []
[for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {, newCovMats, [, j, ], =]
[j, =, 0, ;, j, <, k, ;, j, ++, ), {, newCovMats, [, j, ], =, new, Array2DRowRealMatrix, (]
[0, ;, j, <, k, ;, j, ++, ), {, newCovMats, [, j, ], =, new, Array2DRowRealMatrix, (, numCols, ,]
[{, newCovMats, [, j, ], =, new, Array2DRowRealMatrix, (, numCols, ,, numCols, ), ;, }, for, (, int, i, =]
[[, j, ], =, new, Array2DRowRealMatrix, (, numCols, ,, numCols, ), ;, }, for, (, int, i, =, 0, ;]
[[, j, ], =, new, Array2DRowRealMatrix, (, numCols, ,, numCols, ), ;, }, for, (, int, i, =, 0, ;]
[], =, new, Array2DRowRealMatrix, (, numCols, ,, numCols, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[new, Array2DRowRealMatrix, (, numCols, ,, numCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;]
[new, Array2DRowRealMatrix, (, numCols, ,, numCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;]
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, k, ;]
[;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, k, ;]
[{, for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {, final, RealMatrix, vec, =]
[int, j, =, 0, ;, j, <, k, ;, j, ++, ), {, final, RealMatrix, vec, =, new, Array2DRowRealMatrix, (]
[int, j, =, 0, ;, j, <, k, ;, j, ++, ), {, final, RealMatrix, vec, =, new, Array2DRowRealMatrix, (]
[;, j, <, k, ;, j, ++, ), {, final, RealMatrix, vec, =, new, Array2DRowRealMatrix, (, MathArrays, ., ebeSubtract, (]
[;, j, <, k, ;, j, ++, ), {, final, RealMatrix, vec, =, new, Array2DRowRealMatrix, (, MathArrays, ., ebeSubtract, (]
[<, k, ;, j, ++, ), {, final, RealMatrix, vec, =, new, Array2DRowRealMatrix, (, MathArrays, ., ebeSubtract, (, data, []
[j, ++, ), {, final, RealMatrix, vec, =, new, Array2DRowRealMatrix, (, MathArrays, ., ebeSubtract, (, data, [, i, ], ,]
[j, ++, ), {, final, RealMatrix, vec, =, new, Array2DRowRealMatrix, (, MathArrays, ., ebeSubtract, (, data, [, i, ], ,]
[), {, final, RealMatrix, vec, =, new, Array2DRowRealMatrix, (, MathArrays, ., ebeSubtract, (, data, [, i, ], ,, newMeans, []
[MathArrays, ., ebeSubtract, (, data, [, i, ], ,, newMeans, [, j, ], ), ), ;, final, RealMatrix, dataCov, =]
[MathArrays, ., ebeSubtract, (, data, [, i, ], ,, newMeans, [, j, ], ), ), ;, final, RealMatrix, dataCov, =]
[MathArrays, ., ebeSubtract, (, data, [, i, ], ,, newMeans, [, j, ], ), ), ;, final, RealMatrix, dataCov, =]
[data, [, i, ], ,, newMeans, [, j, ], ), ), ;, final, RealMatrix, dataCov, =, vec, ., multiply, (]
[data, [, i, ], ,, newMeans, [, j, ], ), ), ;, final, RealMatrix, dataCov, =, vec, ., multiply, (]
[), ), ;, final, RealMatrix, dataCov, =, vec, ., multiply, (, vec, ., transpose, (, ), ), ., scalarMultiply, (]
[), ), ;, final, RealMatrix, dataCov, =, vec, ., multiply, (, vec, ., transpose, (, ), ), ., scalarMultiply, (]
[), ), ;, final, RealMatrix, dataCov, =, vec, ., multiply, (, vec, ., transpose, (, ), ), ., scalarMultiply, (]
[;, final, RealMatrix, dataCov, =, vec, ., multiply, (, vec, ., transpose, (, ), ), ., scalarMultiply, (, gamma, []
[dataCov, =, vec, ., multiply, (, vec, ., transpose, (, ), ), ., scalarMultiply, (, gamma, [, i, ], []
[multiply, (, vec, ., transpose, (, ), ), ., scalarMultiply, (, gamma, [, i, ], [, j, ], ), ;]
[multiply, (, vec, ., transpose, (, ), ), ., scalarMultiply, (, gamma, [, i, ], [, j, ], ), ;]
[vec, ., transpose, (, ), ), ., scalarMultiply, (, gamma, [, i, ], [, j, ], ), ;, newCovMats, []
[(, ), ), ., scalarMultiply, (, gamma, [, i, ], [, j, ], ), ;, newCovMats, [, j, ], =]
[(, ), ), ., scalarMultiply, (, gamma, [, i, ], [, j, ], ), ;, newCovMats, [, j, ], =]
[(, ), ), ., scalarMultiply, (, gamma, [, i, ], [, j, ], ), ;, newCovMats, [, j, ], =]
[), ., scalarMultiply, (, gamma, [, i, ], [, j, ], ), ;, newCovMats, [, j, ], =, newCovMats, []
[[, i, ], [, j, ], ), ;, newCovMats, [, j, ], =, newCovMats, [, j, ], ., add, (]
[j, ], ., add, (, dataCov, ), ;, }, }, final, double, [, ], [, ], [, ], newCovMatArrays, =]
[add, (, dataCov, ), ;, }, }, final, double, [, ], [, ], [, ], newCovMatArrays, =, new, double, []
[), ;, }, }, final, double, [, ], [, ], [, ], newCovMatArrays, =, new, double, [, k, ], []
[}, final, double, [, ], [, ], [, ], newCovMatArrays, =, new, double, [, k, ], [, numCols, ], []
[], newCovMatArrays, =, new, double, [, k, ], [, numCols, ], [, numCols, ], ;, for, (, int, j, =]
[=, new, double, [, k, ], [, numCols, ], [, numCols, ], ;, for, (, int, j, =, 0, ;]
[=, new, double, [, k, ], [, numCols, ], [, numCols, ], ;, for, (, int, j, =, 0, ;]
[double, [, k, ], [, numCols, ], [, numCols, ], ;, for, (, int, j, =, 0, ;, j, <]
[k, ], [, numCols, ], [, numCols, ], ;, for, (, int, j, =, 0, ;, j, <, k, ;]
[k, ], [, numCols, ], [, numCols, ], ;, for, (, int, j, =, 0, ;, j, <, k, ;]
[], [, numCols, ], ;, for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {]
[], [, numCols, ], ;, for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {]
[numCols, ], ;, for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {, newCovMats, []
[for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {, newCovMats, [, j, ], =]
[for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {, newCovMats, [, j, ], =]
[for, (, int, j, =, 0, ;, j, <, k, ;, j, ++, ), {, newCovMats, [, j, ], =]
[int, j, =, 0, ;, j, <, k, ;, j, ++, ), {, newCovMats, [, j, ], =, newCovMats, []
[j, <, k, ;, j, ++, ), {, newCovMats, [, j, ], =, newCovMats, [, j, ], ., scalarMultiply, (]
[j, <, k, ;, j, ++, ), {, newCovMats, [, j, ], =, newCovMats, [, j, ], ., scalarMultiply, (]
[k, ;, j, ++, ), {, newCovMats, [, j, ], =, newCovMats, [, j, ], ., scalarMultiply, (, 1d, /]
[k, ;, j, ++, ), {, newCovMats, [, j, ], =, newCovMats, [, j, ], ., scalarMultiply, (, 1d, /]
[j, ++, ), {, newCovMats, [, j, ], =, newCovMats, [, j, ], ., scalarMultiply, (, 1d, /, gammaSums, []
[newCovMats, [, j, ], =, newCovMats, [, j, ], ., scalarMultiply, (, 1d, /, gammaSums, [, j, ], ), ;]
[newCovMats, [, j, ], =, newCovMats, [, j, ], ., scalarMultiply, (, 1d, /, gammaSums, [, j, ], ), ;]
[j, ], =, newCovMats, [, j, ], ., scalarMultiply, (, 1d, /, gammaSums, [, j, ], ), ;, newCovMatArrays, []
[newCovMats, [, j, ], ., scalarMultiply, (, 1d, /, gammaSums, [, j, ], ), ;, newCovMatArrays, [, j, ], =]
[newCovMats, [, j, ], ., scalarMultiply, (, 1d, /, gammaSums, [, j, ], ), ;, newCovMatArrays, [, j, ], =]
[newCovMats, [, j, ], ., scalarMultiply, (, 1d, /, gammaSums, [, j, ], ), ;, newCovMatArrays, [, j, ], =]
[j, ], ., scalarMultiply, (, 1d, /, gammaSums, [, j, ], ), ;, newCovMatArrays, [, j, ], =, newCovMats, []
[[, j, ], ), ;, newCovMatArrays, [, j, ], =, newCovMats, [, j, ], ., getData, (, ), ;, }]
[], ), ;, newCovMatArrays, [, j, ], =, newCovMats, [, j, ], ., getData, (, ), ;, }, fittedModel, =]
[newCovMatArrays, [, j, ], =, newCovMats, [, j, ], ., getData, (, ), ;, }, fittedModel, =, new, MixtureMultivariateNormalDistribution, (]
[j, ], =, newCovMats, [, j, ], ., getData, (, ), ;, }, fittedModel, =, new, MixtureMultivariateNormalDistribution, (, newWeights, ,]
[=, newCovMats, [, j, ], ., getData, (, ), ;, }, fittedModel, =, new, MixtureMultivariateNormalDistribution, (, newWeights, ,, newMeans, ,]
[getData, (, ), ;, }, fittedModel, =, new, MixtureMultivariateNormalDistribution, (, newWeights, ,, newMeans, ,, newCovMatArrays, ), ;, }, if, (]
[getData, (, ), ;, }, fittedModel, =, new, MixtureMultivariateNormalDistribution, (, newWeights, ,, newMeans, ,, newCovMatArrays, ), ;, }, if, (]
[getData, (, ), ;, }, fittedModel, =, new, MixtureMultivariateNormalDistribution, (, newWeights, ,, newMeans, ,, newCovMatArrays, ), ;, }, if, (]
[}, fittedModel, =, new, MixtureMultivariateNormalDistribution, (, newWeights, ,, newMeans, ,, newCovMatArrays, ), ;, }, if, (, Math, ., abs, (]
[}, fittedModel, =, new, MixtureMultivariateNormalDistribution, (, newWeights, ,, newMeans, ,, newCovMatArrays, ), ;, }, if, (, Math, ., abs, (]
[=, new, MixtureMultivariateNormalDistribution, (, newWeights, ,, newMeans, ,, newCovMatArrays, ), ;, }, if, (, Math, ., abs, (, previousLogLikelihood, -]
[(, newWeights, ,, newMeans, ,, newCovMatArrays, ), ;, }, if, (, Math, ., abs, (, previousLogLikelihood, -, logLikelihood, ), >]
[,, newCovMatArrays, ), ;, }, if, (, Math, ., abs, (, previousLogLikelihood, -, logLikelihood, ), >, threshold, ), {, throw]
[throw, new, ConvergenceException, (, ), ;, }, }, public, void, fit, (, MixtureMultivariateNormalDistribution, initialMixture, ), throws, SingularMatrixException, ,, NotStrictlyPositiveException, {]
[ConvergenceException, (, ), ;, }, }, public, void, fit, (, MixtureMultivariateNormalDistribution, initialMixture, ), throws, SingularMatrixException, ,, NotStrictlyPositiveException, {, fit, (]
[), ;, }, }, public, void, fit, (, MixtureMultivariateNormalDistribution, initialMixture, ), throws, SingularMatrixException, ,, NotStrictlyPositiveException, {, fit, (, initialMixture, ,]
[}, }, public, void, fit, (, MixtureMultivariateNormalDistribution, initialMixture, ), throws, SingularMatrixException, ,, NotStrictlyPositiveException, {, fit, (, initialMixture, ,, DEFAULT_MAX_ITERATIONS, ,]
[(, final, double, [, ], [, ], data, ,, final, int, numComponents, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (]
[(, final, double, [, ], [, ], data, ,, final, int, numComponents, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (]
[(, final, double, [, ], [, ], data, ,, final, int, numComponents, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (]
[], [, ], data, ,, final, int, numComponents, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (, data, ., length, <]
[,, final, int, numComponents, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (, data, ., length, <, 2, ), {, throw]
[numComponents, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (, data, ., length, <, 2, ), {, throw, new, NotStrictlyPositiveException, (]
[numComponents, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, if, (, data, ., length, <, 2, ), {, throw, new, NotStrictlyPositiveException, (]
[(, data, ., length, <, 2, ), {, throw, new, NotStrictlyPositiveException, (, data, ., length, ), ;, }, if, (]
[(, data, ., length, <, 2, ), {, throw, new, NotStrictlyPositiveException, (, data, ., length, ), ;, }, if, (]
[., length, <, 2, ), {, throw, new, NotStrictlyPositiveException, (, data, ., length, ), ;, }, if, (, numComponents, <]
[), {, throw, new, NotStrictlyPositiveException, (, data, ., length, ), ;, }, if, (, numComponents, <, 2, ), {, throw]
[new, NotStrictlyPositiveException, (, data, ., length, ), ;, }, if, (, numComponents, <, 2, ), {, throw, new, NumberIsTooSmallException, (]
[(, data, ., length, ), ;, }, if, (, numComponents, <, 2, ), {, throw, new, NumberIsTooSmallException, (, numComponents, ,]
[., length, ), ;, }, if, (, numComponents, <, 2, ), {, throw, new, NumberIsTooSmallException, (, numComponents, ,, 2, ,]
[(, numComponents, <, 2, ), {, throw, new, NumberIsTooSmallException, (, numComponents, ,, 2, ,, true, ), ;, }, if, (]
[(, numComponents, <, 2, ), {, throw, new, NumberIsTooSmallException, (, numComponents, ,, 2, ,, true, ), ;, }, if, (]
[<, 2, ), {, throw, new, NumberIsTooSmallException, (, numComponents, ,, 2, ,, true, ), ;, }, if, (, numComponents, >]
[<, 2, ), {, throw, new, NumberIsTooSmallException, (, numComponents, ,, 2, ,, true, ), ;, }, if, (, numComponents, >]
[NumberIsTooSmallException, (, numComponents, ,, 2, ,, true, ), ;, }, if, (, numComponents, >, data, ., length, ), {, throw]
[,, 2, ,, true, ), ;, }, if, (, numComponents, >, data, ., length, ), {, throw, new, NumberIsTooLargeException, (]
[,, true, ), ;, }, if, (, numComponents, >, data, ., length, ), {, throw, new, NumberIsTooLargeException, (, numComponents, ,]
[,, true, ), ;, }, if, (, numComponents, >, data, ., length, ), {, throw, new, NumberIsTooLargeException, (, numComponents, ,]
[}, if, (, numComponents, >, data, ., length, ), {, throw, new, NumberIsTooLargeException, (, numComponents, ,, data, ., length, ,]
[), {, throw, new, NumberIsTooLargeException, (, numComponents, ,, data, ., length, ,, true, ), ;, }, final, int, numRows, =]
[), {, throw, new, NumberIsTooLargeException, (, numComponents, ,, data, ., length, ,, true, ), ;, }, final, int, numRows, =]
[data, ., length, ,, true, ), ;, }, final, int, numRows, =, data, ., length, ;, final, int, numCols, =]
[data, ., length, ,, true, ), ;, }, final, int, numRows, =, data, ., length, ;, final, int, numCols, =]
[data, ., length, ,, true, ), ;, }, final, int, numRows, =, data, ., length, ;, final, int, numCols, =]
[length, ,, true, ), ;, }, final, int, numRows, =, data, ., length, ;, final, int, numCols, =, data, []
[., length, ;, final, int, numCols, =, data, [, 0, ], ., length, ;, final, DataRow, [, ], sortedData, =]
[final, int, numCols, =, data, [, 0, ], ., length, ;, final, DataRow, [, ], sortedData, =, new, DataRow, []
[., length, ;, final, DataRow, [, ], sortedData, =, new, DataRow, [, numRows, ], ;, for, (, int, i, =]
[;, final, DataRow, [, ], sortedData, =, new, DataRow, [, numRows, ], ;, for, (, int, i, =, 0, ;]
[;, final, DataRow, [, ], sortedData, =, new, DataRow, [, numRows, ], ;, for, (, int, i, =, 0, ;]
[DataRow, [, ], sortedData, =, new, DataRow, [, numRows, ], ;, for, (, int, i, =, 0, ;, i, <]
[], sortedData, =, new, DataRow, [, numRows, ], ;, for, (, int, i, =, 0, ;, i, <, numRows, ;]
[], sortedData, =, new, DataRow, [, numRows, ], ;, for, (, int, i, =, 0, ;, i, <, numRows, ;]
[DataRow, [, numRows, ], ;, for, (, int, i, =, 0, ;, i, <, numRows, ;, i, ++, ), {]
[DataRow, [, numRows, ], ;, for, (, int, i, =, 0, ;, i, <, numRows, ;, i, ++, ), {]
[numRows, ], ;, for, (, int, i, =, 0, ;, i, <, numRows, ;, i, ++, ), {, sortedData, []
[for, (, int, i, =, 0, ;, i, <, numRows, ;, i, ++, ), {, sortedData, [, i, ], =]
[i, =, 0, ;, i, <, numRows, ;, i, ++, ), {, sortedData, [, i, ], =, new, DataRow, (]
[i, =, 0, ;, i, <, numRows, ;, i, ++, ), {, sortedData, [, i, ], =, new, DataRow, (]
[0, ;, i, <, numRows, ;, i, ++, ), {, sortedData, [, i, ], =, new, DataRow, (, data, []
[;, i, ++, ), {, sortedData, [, i, ], =, new, DataRow, (, data, [, i, ], ), ;, }]
[;, i, ++, ), {, sortedData, [, i, ], =, new, DataRow, (, data, [, i, ], ), ;, }]
[{, sortedData, [, i, ], =, new, DataRow, (, data, [, i, ], ), ;, }, Arrays, ., sort, (]
[DataRow, (, data, [, i, ], ), ;, }, Arrays, ., sort, (, sortedData, ), ;, final, double, weight, =]
[DataRow, (, data, [, i, ], ), ;, }, Arrays, ., sort, (, sortedData, ), ;, final, double, weight, =]
[data, [, i, ], ), ;, }, Arrays, ., sort, (, sortedData, ), ;, final, double, weight, =, 1d, /]
[final, double, weight, =, 1d, /, numComponents, ;, final, List, <, Pair, <, Double, ,, MultivariateNormalDistribution, >, >, components, =]
[Pair, <, Double, ,, MultivariateNormalDistribution, >, >, components, =, new, ArrayList, <, Pair, <, Double, ,, MultivariateNormalDistribution, >, >, (]
[=, new, ArrayList, <, Pair, <, Double, ,, MultivariateNormalDistribution, >, >, (, numComponents, ), ;, for, (, int, binIndex, =]
[ArrayList, <, Pair, <, Double, ,, MultivariateNormalDistribution, >, >, (, numComponents, ), ;, for, (, int, binIndex, =, 0, ;]
[ArrayList, <, Pair, <, Double, ,, MultivariateNormalDistribution, >, >, (, numComponents, ), ;, for, (, int, binIndex, =, 0, ;]
[Pair, <, Double, ,, MultivariateNormalDistribution, >, >, (, numComponents, ), ;, for, (, int, binIndex, =, 0, ;, binIndex, <]
[Double, ,, MultivariateNormalDistribution, >, >, (, numComponents, ), ;, for, (, int, binIndex, =, 0, ;, binIndex, <, numComponents, ;]
[Double, ,, MultivariateNormalDistribution, >, >, (, numComponents, ), ;, for, (, int, binIndex, =, 0, ;, binIndex, <, numComponents, ;]
[;, for, (, int, binIndex, =, 0, ;, binIndex, <, numComponents, ;, binIndex, ++, ), {, final, int, minIndex, =]
[;, for, (, int, binIndex, =, 0, ;, binIndex, <, numComponents, ;, binIndex, ++, ), {, final, int, minIndex, =]
[for, (, int, binIndex, =, 0, ;, binIndex, <, numComponents, ;, binIndex, ++, ), {, final, int, minIndex, =, (]
[for, (, int, binIndex, =, 0, ;, binIndex, <, numComponents, ;, binIndex, ++, ), {, final, int, minIndex, =, (]
[int, binIndex, =, 0, ;, binIndex, <, numComponents, ;, binIndex, ++, ), {, final, int, minIndex, =, (, binIndex, *]
[0, ;, binIndex, <, numComponents, ;, binIndex, ++, ), {, final, int, minIndex, =, (, binIndex, *, numRows, ), /]
[binIndex, ++, ), {, final, int, minIndex, =, (, binIndex, *, numRows, ), /, numComponents, ;, final, int, maxIndex, =]
[binIndex, ++, ), {, final, int, minIndex, =, (, binIndex, *, numRows, ), /, numComponents, ;, final, int, maxIndex, =]
[++, ), {, final, int, minIndex, =, (, binIndex, *, numRows, ), /, numComponents, ;, final, int, maxIndex, =, (]
[++, ), {, final, int, minIndex, =, (, binIndex, *, numRows, ), /, numComponents, ;, final, int, maxIndex, =, (]
[), {, final, int, minIndex, =, (, binIndex, *, numRows, ), /, numComponents, ;, final, int, maxIndex, =, (, (]
[), {, final, int, minIndex, =, (, binIndex, *, numRows, ), /, numComponents, ;, final, int, maxIndex, =, (, (]
[final, int, minIndex, =, (, binIndex, *, numRows, ), /, numComponents, ;, final, int, maxIndex, =, (, (, binIndex, +]
[=, (, binIndex, *, numRows, ), /, numComponents, ;, final, int, maxIndex, =, (, (, binIndex, +, 1, ), *]
[*, numRows, ), /, numComponents, ;, final, int, maxIndex, =, (, (, binIndex, +, 1, ), *, numRows, ), /]
[final, int, maxIndex, =, (, (, binIndex, +, 1, ), *, numRows, ), /, numComponents, ;, final, int, numBinRows, =]
[final, int, maxIndex, =, (, (, binIndex, +, 1, ), *, numRows, ), /, numComponents, ;, final, int, numBinRows, =]
[maxIndex, =, (, (, binIndex, +, 1, ), *, numRows, ), /, numComponents, ;, final, int, numBinRows, =, maxIndex, -]
[), /, numComponents, ;, final, int, numBinRows, =, maxIndex, -, minIndex, ;, final, double, [, ], [, ], binData, =]
[;, final, int, numBinRows, =, maxIndex, -, minIndex, ;, final, double, [, ], [, ], binData, =, new, double, []
[numBinRows, =, maxIndex, -, minIndex, ;, final, double, [, ], [, ], binData, =, new, double, [, numBinRows, ], []
[], [, ], binData, =, new, double, [, numBinRows, ], [, numCols, ], ;, final, double, [, ], columnMeans, =]
[binData, =, new, double, [, numBinRows, ], [, numCols, ], ;, final, double, [, ], columnMeans, =, new, double, []
[numCols, ], ;, final, double, [, ], columnMeans, =, new, double, [, numCols, ], ;, for, (, int, i, =]
[double, [, ], columnMeans, =, new, double, [, numCols, ], ;, for, (, int, i, =, minIndex, ,, iBin, =]
[], columnMeans, =, new, double, [, numCols, ], ;, for, (, int, i, =, minIndex, ,, iBin, =, 0, ;]
[], columnMeans, =, new, double, [, numCols, ], ;, for, (, int, i, =, minIndex, ,, iBin, =, 0, ;]
[=, new, double, [, numCols, ], ;, for, (, int, i, =, minIndex, ,, iBin, =, 0, ;, i, <]
[double, [, numCols, ], ;, for, (, int, i, =, minIndex, ,, iBin, =, 0, ;, i, <, maxIndex, ;]
[double, [, numCols, ], ;, for, (, int, i, =, minIndex, ,, iBin, =, 0, ;, i, <, maxIndex, ;]
[], ;, for, (, int, i, =, minIndex, ,, iBin, =, 0, ;, i, <, maxIndex, ;, i, ++, ,]
[], ;, for, (, int, i, =, minIndex, ,, iBin, =, 0, ;, i, <, maxIndex, ;, i, ++, ,]
[iBin, =, 0, ;, i, <, maxIndex, ;, i, ++, ,, iBin, ++, ), {, for, (, int, j, =]
[0, ;, i, <, maxIndex, ;, i, ++, ,, iBin, ++, ), {, for, (, int, j, =, 0, ;]
[0, ;, i, <, maxIndex, ;, i, ++, ,, iBin, ++, ), {, for, (, int, j, =, 0, ;]
[i, <, maxIndex, ;, i, ++, ,, iBin, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[maxIndex, ;, i, ++, ,, iBin, ++, ), {, for, (, int, j, =, 0, ;, j, <, numCols, ;]
[maxIndex, ;, i, ++, ,, iBin, ++, ), {, for, (, int, j, =, 0, ;, j, <, numCols, ;]
[{, for, (, int, j, =, 0, ;, j, <, numCols, ;, j, ++, ), {, final, double, val, =]
[{, for, (, int, j, =, 0, ;, j, <, numCols, ;, j, ++, ), {, final, double, val, =]
[{, for, (, int, j, =, 0, ;, j, <, numCols, ;, j, ++, ), {, final, double, val, =]
[{, for, (, int, j, =, 0, ;, j, <, numCols, ;, j, ++, ), {, final, double, val, =]
[(, int, j, =, 0, ;, j, <, numCols, ;, j, ++, ), {, final, double, val, =, sortedData, []
[<, numCols, ;, j, ++, ), {, final, double, val, =, sortedData, [, i, ], ., getRow, (, ), []
[j, ++, ), {, final, double, val, =, sortedData, [, i, ], ., getRow, (, ), [, j, ], ;]
[j, ++, ), {, final, double, val, =, sortedData, [, i, ], ., getRow, (, ), [, j, ], ;]
[), {, final, double, val, =, sortedData, [, i, ], ., getRow, (, ), [, j, ], ;, columnMeans, []
[double, val, =, sortedData, [, i, ], ., getRow, (, ), [, j, ], ;, columnMeans, [, j, ], +=]
[=, sortedData, [, i, ], ., getRow, (, ), [, j, ], ;, columnMeans, [, j, ], +=, val, ;]
[=, sortedData, [, i, ], ., getRow, (, ), [, j, ], ;, columnMeans, [, j, ], +=, val, ;]
[=, sortedData, [, i, ], ., getRow, (, ), [, j, ], ;, columnMeans, [, j, ], +=, val, ;]
[[, i, ], ., getRow, (, ), [, j, ], ;, columnMeans, [, j, ], +=, val, ;, binData, []
[., getRow, (, ), [, j, ], ;, columnMeans, [, j, ], +=, val, ;, binData, [, iBin, ], []
[), [, j, ], ;, columnMeans, [, j, ], +=, val, ;, binData, [, iBin, ], [, j, ], =]
[;, columnMeans, [, j, ], +=, val, ;, binData, [, iBin, ], [, j, ], =, val, ;, }, }]
[;, columnMeans, [, j, ], +=, val, ;, binData, [, iBin, ], [, j, ], =, val, ;, }, }]
[], +=, val, ;, binData, [, iBin, ], [, j, ], =, val, ;, }, }, MathArrays, ., scaleInPlace, (]
[], +=, val, ;, binData, [, iBin, ], [, j, ], =, val, ;, }, }, MathArrays, ., scaleInPlace, (]
[val, ;, binData, [, iBin, ], [, j, ], =, val, ;, }, }, MathArrays, ., scaleInPlace, (, 1d, /]
[binData, [, iBin, ], [, j, ], =, val, ;, }, }, MathArrays, ., scaleInPlace, (, 1d, /, numBinRows, ,]
[}, MathArrays, ., scaleInPlace, (, 1d, /, numBinRows, ,, columnMeans, ), ;, final, double, [, ], [, ], covMat, =]
[}, MathArrays, ., scaleInPlace, (, 1d, /, numBinRows, ,, columnMeans, ), ;, final, double, [, ], [, ], covMat, =]
[}, MathArrays, ., scaleInPlace, (, 1d, /, numBinRows, ,, columnMeans, ), ;, final, double, [, ], [, ], covMat, =]
[scaleInPlace, (, 1d, /, numBinRows, ,, columnMeans, ), ;, final, double, [, ], [, ], covMat, =, new, Covariance, (]
[covMat, =, new, Covariance, (, binData, ), ., getCovarianceMatrix, (, ), ., getData, (, ), ;, final, MultivariateNormalDistribution, mvn, =]
[Covariance, (, binData, ), ., getCovarianceMatrix, (, ), ., getData, (, ), ;, final, MultivariateNormalDistribution, mvn, =, new, MultivariateNormalDistribution, (]
[binData, ), ., getCovarianceMatrix, (, ), ., getData, (, ), ;, final, MultivariateNormalDistribution, mvn, =, new, MultivariateNormalDistribution, (, columnMeans, ,]
[getCovarianceMatrix, (, ), ., getData, (, ), ;, final, MultivariateNormalDistribution, mvn, =, new, MultivariateNormalDistribution, (, columnMeans, ,, covMat, ), ;]
[getCovarianceMatrix, (, ), ., getData, (, ), ;, final, MultivariateNormalDistribution, mvn, =, new, MultivariateNormalDistribution, (, columnMeans, ,, covMat, ), ;]
[getData, (, ), ;, final, MultivariateNormalDistribution, mvn, =, new, MultivariateNormalDistribution, (, columnMeans, ,, covMat, ), ;, components, ., add, (]
[new, MultivariateNormalDistribution, (, columnMeans, ,, covMat, ), ;, components, ., add, (, new, Pair, <, Double, ,, MultivariateNormalDistribution, >, (]
[(, columnMeans, ,, covMat, ), ;, components, ., add, (, new, Pair, <, Double, ,, MultivariateNormalDistribution, >, (, weight, ,]
[components, ., add, (, new, Pair, <, Double, ,, MultivariateNormalDistribution, >, (, weight, ,, mvn, ), ), ;, }, return]
[(, new, Pair, <, Double, ,, MultivariateNormalDistribution, >, (, weight, ,, mvn, ), ), ;, }, return, new, MixtureMultivariateNormalDistribution, (]
[mvn, ), ), ;, }, return, new, MixtureMultivariateNormalDistribution, (, components, ), ;, }, public, double, getLogLikelihood, (, ), {, return]
[), ;, }, public, double, getLogLikelihood, (, ), {, return, logLikelihood, ;, }, public, MixtureMultivariateNormalDistribution, getFittedModel, (, ), {, return]
[public, double, getLogLikelihood, (, ), {, return, logLikelihood, ;, }, public, MixtureMultivariateNormalDistribution, getFittedModel, (, ), {, return, new, MixtureMultivariateNormalDistribution, (]
[public, double, getLogLikelihood, (, ), {, return, logLikelihood, ;, }, public, MixtureMultivariateNormalDistribution, getFittedModel, (, ), {, return, new, MixtureMultivariateNormalDistribution, (]
[private, final, double, [, ], row, ;, private, Double, mean, ;, DataRow, (, final, double, [, ], data, ), {]
[double, [, ], row, ;, private, Double, mean, ;, DataRow, (, final, double, [, ], data, ), {, row, =]
[], row, ;, private, Double, mean, ;, DataRow, (, final, double, [, ], data, ), {, row, =, data, ;]
[;, private, Double, mean, ;, DataRow, (, final, double, [, ], data, ), {, row, =, data, ;, mean, =]
[final, double, [, ], data, ), {, row, =, data, ;, mean, =, 0d, ;, for, (, int, i, =]
[[, ], data, ), {, row, =, data, ;, mean, =, 0d, ;, for, (, int, i, =, 0, ;]
[[, ], data, ), {, row, =, data, ;, mean, =, 0d, ;, for, (, int, i, =, 0, ;]
[data, ), {, row, =, data, ;, mean, =, 0d, ;, for, (, int, i, =, 0, ;, i, <]
[data, ), {, row, =, data, ;, mean, =, 0d, ;, for, (, int, i, =, 0, ;, i, <]
[=, data, ;, mean, =, 0d, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[=, data, ;, mean, =, 0d, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[=, 0d, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, mean, +=]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, mean, +=]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, mean, +=, data, []
[0, ;, i, <, data, ., length, ;, i, ++, ), {, mean, +=, data, [, i, ], ;, }]
[i, <, data, ., length, ;, i, ++, ), {, mean, +=, data, [, i, ], ;, }, mean, /=]
[i, <, data, ., length, ;, i, ++, ), {, mean, +=, data, [, i, ], ;, }, mean, /=]
[], ;, }, mean, /=, data, ., length, ;, }, public, int, compareTo, (, final, DataRow, other, ), {, return]
[], ;, }, mean, /=, data, ., length, ;, }, public, int, compareTo, (, final, DataRow, other, ), {, return]
[/=, data, ., length, ;, }, public, int, compareTo, (, final, DataRow, other, ), {, return, mean, ., compareTo, (]
[/=, data, ., length, ;, }, public, int, compareTo, (, final, DataRow, other, ), {, return, mean, ., compareTo, (]
[compareTo, (, other, ., mean, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[compareTo, (, other, ., mean, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[other, ., mean, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return]
[boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (]
[boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (]
[{, if, (, this, ==, other, ), {, return, true, ;, }, if, (, other, instanceof, DataRow, ), {, return]
[{, if, (, this, ==, other, ), {, return, true, ;, }, if, (, other, instanceof, DataRow, ), {, return]
[==, other, ), {, return, true, ;, }, if, (, other, instanceof, DataRow, ), {, return, MathArrays, ., equals, (]
[), {, return, true, ;, }, if, (, other, instanceof, DataRow, ), {, return, MathArrays, ., equals, (, row, ,]
[), {, return, true, ;, }, if, (, other, instanceof, DataRow, ), {, return, MathArrays, ., equals, (, row, ,]
[{, return, true, ;, }, if, (, other, instanceof, DataRow, ), {, return, MathArrays, ., equals, (, row, ,, (]
[;, }, if, (, other, instanceof, DataRow, ), {, return, MathArrays, ., equals, (, row, ,, (, (, DataRow, )]
[{, return, MathArrays, ., equals, (, row, ,, (, (, DataRow, ), other, ), ., row, ), ;, }, return]
[other, ), ., row, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[other, ), ., row, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, Arrays, ., hashCode, (]
[), {, return, Arrays, ., hashCode, (, row, ), ;, }, public, double, [, ], getRow, (, ), {, return]
