[;, public, FixedPointGraphTraversal, (, EdgeCallback, <, N, ,, E, >, callback, ), {, this, ., callback, =, callback, ;, }]
[=, callback, ;, }, public, static, <, NODE, ,, EDGE, >, FixedPointGraphTraversal, <, NODE, ,, EDGE, >, newTraversal, (, EdgeCallback]
[., callback, =, callback, ;, }, public, static, <, NODE, ,, EDGE, >, FixedPointGraphTraversal, <, NODE, ,, EDGE, >, newTraversal]
[;, }, public, static, <, NODE, ,, EDGE, >, FixedPointGraphTraversal, <, NODE, ,, EDGE, >, newTraversal, (, EdgeCallback, <, NODE]
[;, }, public, void, computeFixedPoint, (, DiGraph, <, N, ,, E, >, graph, ), {, Set, <, N, >, nodes]
[), ;, }, public, void, computeFixedPoint, (, DiGraph, <, N, ,, E, >, graph, ), {, Set, <, N, >]
[;, for, (, DiGraphNode, <, N, ,, E, >, node, :, graph, ., getDirectedGraphNodes, (, ), ), {, nodes, .]
[., newHashSet, (, ), ;, for, (, DiGraphNode, <, N, ,, E, >, node, :, graph, ., getDirectedGraphNodes, (, )]
[), {, nodes, ., add, (, node, ., getValue, (, ), ), ;, }, computeFixedPoint, (, graph, ,, nodes, )]
[., getDirectedGraphNodes, (, ), ), {, nodes, ., add, (, node, ., getValue, (, ), ), ;, }, computeFixedPoint, (]
[;, }, computeFixedPoint, (, graph, ,, nodes, ), ;, }, public, void, computeFixedPoint, (, DiGraph, <, N, ,, E, >]
[., add, (, node, ., getValue, (, ), ), ;, }, computeFixedPoint, (, graph, ,, nodes, ), ;, }, public]
[), ;, }, computeFixedPoint, (, graph, ,, nodes, ), ;, }, public, void, computeFixedPoint, (, DiGraph, <, N, ,, E]
[., getValue, (, ), ), ;, }, computeFixedPoint, (, graph, ,, nodes, ), ;, }, public, void, computeFixedPoint, (, DiGraph]
[;, }, public, void, computeFixedPoint, (, DiGraph, <, N, ,, E, >, graph, ,, N, entry, ), {, Set, <]
[,, nodes, ), ;, }, public, void, computeFixedPoint, (, DiGraph, <, N, ,, E, >, graph, ,, N, entry, )]
[), ;, }, public, void, computeFixedPoint, (, DiGraph, <, N, ,, E, >, graph, ,, N, entry, ), {, Set]
[;, entrySet, ., add, (, entry, ), ;, computeFixedPoint, (, graph, ,, entrySet, ), ;, }, public, void, computeFixedPoint, (]
[., newHashSet, (, ), ;, entrySet, ., add, (, entry, ), ;, computeFixedPoint, (, graph, ,, entrySet, ), ;, }]
[;, computeFixedPoint, (, graph, ,, entrySet, ), ;, }, public, void, computeFixedPoint, (, DiGraph, <, N, ,, E, >, graph]
[., add, (, entry, ), ;, computeFixedPoint, (, graph, ,, entrySet, ), ;, }, public, void, computeFixedPoint, (, DiGraph, <]
[), ;, computeFixedPoint, (, graph, ,, entrySet, ), ;, }, public, void, computeFixedPoint, (, DiGraph, <, N, ,, E, >]
[;, }, public, void, computeFixedPoint, (, DiGraph, <, N, ,, E, >, graph, ,, Set, <, N, >, entrySet, )]
[,, entrySet, ), ;, }, public, void, computeFixedPoint, (, DiGraph, <, N, ,, E, >, graph, ,, Set, <, N]
[), ;, }, public, void, computeFixedPoint, (, DiGraph, <, N, ,, E, >, graph, ,, Set, <, N, >, entrySet]
[;, long, nodeCount, =, graph, ., getNodes, (, ), ., size, (, ), ;, long, maxIterations, =, Math, ., max]
[;, long, maxIterations, =, Math, ., max, (, nodeCount, *, nodeCount, *, nodeCount, ,, 100, ), ;, LinkedHashSet, <, DiGraphNode]
[., size, (, ), ;, long, maxIterations, =, Math, ., max, (, nodeCount, *, nodeCount, *, nodeCount, ,, 100, )]
[., getNodes, (, ), ., size, (, ), ;, long, maxIterations, =, Math, ., max, (, nodeCount, *, nodeCount, *]
[;, LinkedHashSet, <, DiGraphNode, <, N, ,, E, >, >, workSet, =, Sets, ., newLinkedHashSet, (, ), ;, for, (]
[., max, (, nodeCount, *, nodeCount, *, nodeCount, ,, 100, ), ;, LinkedHashSet, <, DiGraphNode, <, N, ,, E, >]
[,, 100, ), ;, LinkedHashSet, <, DiGraphNode, <, N, ,, E, >, >, workSet, =, Sets, ., newLinkedHashSet, (, )]
[*, nodeCount, ,, 100, ), ;, LinkedHashSet, <, DiGraphNode, <, N, ,, E, >, >, workSet, =, Sets, ., newLinkedHashSet]
[*, nodeCount, *, nodeCount, ,, 100, ), ;, LinkedHashSet, <, DiGraphNode, <, N, ,, E, >, >, workSet, =, Sets]
[*, nodeCount, ,, 100, ), ;, LinkedHashSet, <, DiGraphNode, <, N, ,, E, >, >, workSet, =, Sets, ., newLinkedHashSet]
[,, 100, ), ;, LinkedHashSet, <, DiGraphNode, <, N, ,, E, >, >, workSet, =, Sets, ., newLinkedHashSet, (, )]
[), ;, LinkedHashSet, <, DiGraphNode, <, N, ,, E, >, >, workSet, =, Sets, ., newLinkedHashSet, (, ), ;, for]
[;, for, (, N, n, :, entrySet, ), {, workSet, ., add, (, graph, ., getDirectedGraphNode, (, n, ), )]
[., newLinkedHashSet, (, ), ;, for, (, N, n, :, entrySet, ), {, workSet, ., add, (, graph, ., getDirectedGraphNode]
[), {, workSet, ., add, (, graph, ., getDirectedGraphNode, (, n, ), ), ;, }, for, (, ;, !, workSet]
[;, }, for, (, ;, !, workSet, ., isEmpty, (, ), &&, cycleCount, <, maxIterations, ;, cycleCount, ++, ), {]
[., add, (, graph, ., getDirectedGraphNode, (, n, ), ), ;, }, for, (, ;, !, workSet, ., isEmpty, (]
[), ;, }, for, (, ;, !, workSet, ., isEmpty, (, ), &&, cycleCount, <, maxIterations, ;, cycleCount, ++, )]
[., getDirectedGraphNode, (, n, ), ), ;, }, for, (, ;, !, workSet, ., isEmpty, (, ), &&, cycleCount, <]
[), ), ;, }, for, (, ;, !, workSet, ., isEmpty, (, ), &&, cycleCount, <, maxIterations, ;, cycleCount, ++]
[;, cycleCount, ++, ), {, DiGraphNode, <, N, ,, E, >, source, =, workSet, ., iterator, (, ), ., next]
[&&, cycleCount, <, maxIterations, ;, cycleCount, ++, ), {, DiGraphNode, <, N, ,, E, >, source, =, workSet, ., iterator]
[&&, cycleCount, <, maxIterations, ;, cycleCount, ++, ), {, DiGraphNode, <, N, ,, E, >, source, =, workSet, ., iterator]
[., isEmpty, (, ), &&, cycleCount, <, maxIterations, ;, cycleCount, ++, ), {, DiGraphNode, <, N, ,, E, >, source]
[;, cycleCount, ++, ), {, DiGraphNode, <, N, ,, E, >, source, =, workSet, ., iterator, (, ), ., next]
[<, maxIterations, ;, cycleCount, ++, ), {, DiGraphNode, <, N, ,, E, >, source, =, workSet, ., iterator, (, )]
[;, cycleCount, ++, ), {, DiGraphNode, <, N, ,, E, >, source, =, workSet, ., iterator, (, ), ., next]
[), {, DiGraphNode, <, N, ,, E, >, source, =, workSet, ., iterator, (, ), ., next, (, ), ;]
[++, ), {, DiGraphNode, <, N, ,, E, >, source, =, workSet, ., iterator, (, ), ., next, (, )]
[;, N, sourceValue, =, source, ., getValue, (, ), ;, workSet, ., remove, (, source, ), ;, List, <, DiGraphEdge]
[., next, (, ), ;, N, sourceValue, =, source, ., getValue, (, ), ;, workSet, ., remove, (, source, )]
[., iterator, (, ), ., next, (, ), ;, N, sourceValue, =, source, ., getValue, (, ), ;, workSet, .]
[;, workSet, ., remove, (, source, ), ;, List, <, DiGraphEdge, <, N, ,, E, >, >, outEdges, =, source]
[., getValue, (, ), ;, workSet, ., remove, (, source, ), ;, List, <, DiGraphEdge, <, N, ,, E, >]
[;, List, <, DiGraphEdge, <, N, ,, E, >, >, outEdges, =, source, ., getOutEdges, (, ), ;, for, (]
[., remove, (, source, ), ;, List, <, DiGraphEdge, <, N, ,, E, >, >, outEdges, =, source, ., getOutEdges]
[), ;, List, <, DiGraphEdge, <, N, ,, E, >, >, outEdges, =, source, ., getOutEdges, (, ), ;, for]
[;, for, (, DiGraphEdge, <, N, ,, E, >, edge, :, outEdges, ), {, N, destNode, =, edge, ., getDestination]
[., getOutEdges, (, ), ;, for, (, DiGraphEdge, <, N, ,, E, >, edge, :, outEdges, ), {, N, destNode]
[), {, N, destNode, =, edge, ., getDestination, (, ), ., getValue, (, ), ;, if, (, callback, ., traverseEdge]
[;, if, (, callback, ., traverseEdge, (, sourceValue, ,, edge, ., getValue, (, ), ,, destNode, ), ), {, workSet]
[., getValue, (, ), ;, if, (, callback, ., traverseEdge, (, sourceValue, ,, edge, ., getValue, (, ), ,, destNode]
[., getDestination, (, ), ., getValue, (, ), ;, if, (, callback, ., traverseEdge, (, sourceValue, ,, edge, ., getValue]
[), {, workSet, ., add, (, edge, ., getDestination, (, ), ), ;, }, }, }, Preconditions, ., checkState, (]
[., traverseEdge, (, sourceValue, ,, edge, ., getValue, (, ), ,, destNode, ), ), {, workSet, ., add, (, edge]
[,, edge, ., getValue, (, ), ,, destNode, ), ), {, workSet, ., add, (, edge, ., getDestination, (, )]
[,, destNode, ), ), {, workSet, ., add, (, edge, ., getDestination, (, ), ), ;, }, }, }, Preconditions]
[., getValue, (, ), ,, destNode, ), ), {, workSet, ., add, (, edge, ., getDestination, (, ), ), ;]
[), ), {, workSet, ., add, (, edge, ., getDestination, (, ), ), ;, }, }, }, Preconditions, ., checkState]
[;, }, }, }, Preconditions, ., checkState, (, cycleCount, !=, maxIterations, ,, NON_HALTING_ERROR_MSG, ), ;, }, public, static, interface, EdgeCallback]
[., add, (, edge, ., getDestination, (, ), ), ;, }, }, }, Preconditions, ., checkState, (, cycleCount, !=, maxIterations]
[), ;, }, }, }, Preconditions, ., checkState, (, cycleCount, !=, maxIterations, ,, NON_HALTING_ERROR_MSG, ), ;, }, public, static, interface]
[., getDestination, (, ), ), ;, }, }, }, Preconditions, ., checkState, (, cycleCount, !=, maxIterations, ,, NON_HALTING_ERROR_MSG, ), ;]
[;, }, public, static, interface, EdgeCallback, <, Node, ,, Edge, >, {, boolean, traverseEdge, (, Node, source, ,, Edge, e]
[., checkState, (, cycleCount, !=, maxIterations, ,, NON_HALTING_ERROR_MSG, ), ;, }, public, static, interface, EdgeCallback, <, Node, ,, Edge, >]
[,, NON_HALTING_ERROR_MSG, ), ;, }, public, static, interface, EdgeCallback, <, Node, ,, Edge, >, {, boolean, traverseEdge, (, Node, source]
[!=, maxIterations, ,, NON_HALTING_ERROR_MSG, ), ;, }, public, static, interface, EdgeCallback, <, Node, ,, Edge, >, {, boolean, traverseEdge, (]
[,, NON_HALTING_ERROR_MSG, ), ;, }, public, static, interface, EdgeCallback, <, Node, ,, Edge, >, {, boolean, traverseEdge, (, Node, source]
[), ;, }, public, static, interface, EdgeCallback, <, Node, ,, Edge, >, {, boolean, traverseEdge, (, Node, source, ,, Edge]
