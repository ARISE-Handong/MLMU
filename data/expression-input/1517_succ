[;, private, final, ComplexSolver, complexSolver, =, new, ComplexSolver, (, ), ;, public, LaguerreSolver, (, ), {, this, (, DEFAULT_ABSOLUTE_ACCURACY, )]
[;, public, LaguerreSolver, (, ), {, this, (, DEFAULT_ABSOLUTE_ACCURACY, ), ;, }, public, LaguerreSolver, (, double, absoluteAccuracy, ), {, super]
[), ;, }, public, LaguerreSolver, (, double, absoluteAccuracy, ), {, super, (, absoluteAccuracy, ), ;, }, public, LaguerreSolver, (, double]
[), ;, }, public, LaguerreSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ), {, super, (, relativeAccuracy, ,, absoluteAccuracy, ), ;]
[,, absoluteAccuracy, ), ;, }, public, LaguerreSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ,, double, functionValueAccuracy, ), {, super, (]
[), ;, }, public, LaguerreSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ,, double, functionValueAccuracy, ), {, super, (, relativeAccuracy, ,]
[,, absoluteAccuracy, ,, functionValueAccuracy, ), ;, }, @, Override, public, double, doSolve, (, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException]
[,, functionValueAccuracy, ), ;, }, @, Override, public, double, doSolve, (, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, final]
[), ;, }, @, Override, public, double, doSolve, (, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, final, double, min]
[;, final, double, max, =, getMax, (, ), ;, final, double, initial, =, getStartValue, (, ), ;, final, double, functionValueAccuracy]
[;, final, double, initial, =, getStartValue, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, verifySequence, (, min]
[;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, verifySequence, (, min, ,, initial, ,, max, ), ;, final, double]
[;, verifySequence, (, min, ,, initial, ,, max, ), ;, final, double, yInitial, =, computeObjectiveValue, (, initial, ), ;, if]
[;, final, double, yInitial, =, computeObjectiveValue, (, initial, ), ;, if, (, FastMath, ., abs, (, yInitial, ), <=, functionValueAccuracy]
[,, initial, ,, max, ), ;, final, double, yInitial, =, computeObjectiveValue, (, initial, ), ;, if, (, FastMath, ., abs]
[,, max, ), ;, final, double, yInitial, =, computeObjectiveValue, (, initial, ), ;, if, (, FastMath, ., abs, (, yInitial]
[), ;, final, double, yInitial, =, computeObjectiveValue, (, initial, ), ;, if, (, FastMath, ., abs, (, yInitial, ), <=]
[;, if, (, FastMath, ., abs, (, yInitial, ), <=, functionValueAccuracy, ), {, return, initial, ;, }, final, double, yMin]
[), ;, if, (, FastMath, ., abs, (, yInitial, ), <=, functionValueAccuracy, ), {, return, initial, ;, }, final, double]
[), {, return, initial, ;, }, final, double, yMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath, ., abs]
[<=, functionValueAccuracy, ), {, return, initial, ;, }, final, double, yMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath]
[., abs, (, yInitial, ), <=, functionValueAccuracy, ), {, return, initial, ;, }, final, double, yMin, =, computeObjectiveValue, (, min]
[), <=, functionValueAccuracy, ), {, return, initial, ;, }, final, double, yMin, =, computeObjectiveValue, (, min, ), ;, if, (]
[), {, return, initial, ;, }, final, double, yMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath, ., abs]
[;, }, final, double, yMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath, ., abs, (, yMin, ), <=]
[;, if, (, FastMath, ., abs, (, yMin, ), <=, functionValueAccuracy, ), {, return, min, ;, }, if, (, yInitial]
[), ;, if, (, FastMath, ., abs, (, yMin, ), <=, functionValueAccuracy, ), {, return, min, ;, }, if, (]
[), {, return, min, ;, }, if, (, yInitial, *, yMin, <, 0, ), {, return, laguerre, (, min, ,]
[<=, functionValueAccuracy, ), {, return, min, ;, }, if, (, yInitial, *, yMin, <, 0, ), {, return, laguerre, (]
[., abs, (, yMin, ), <=, functionValueAccuracy, ), {, return, min, ;, }, if, (, yInitial, *, yMin, <, 0]
[), <=, functionValueAccuracy, ), {, return, min, ;, }, if, (, yInitial, *, yMin, <, 0, ), {, return, laguerre]
[), {, return, min, ;, }, if, (, yInitial, *, yMin, <, 0, ), {, return, laguerre, (, min, ,]
[;, }, if, (, yInitial, *, yMin, <, 0, ), {, return, laguerre, (, min, ,, initial, ,, yMin, ,]
[), {, return, laguerre, (, min, ,, initial, ,, yMin, ,, yInitial, ), ;, }, final, double, yMax, =, computeObjectiveValue]
[<, 0, ), {, return, laguerre, (, min, ,, initial, ,, yMin, ,, yInitial, ), ;, }, final, double, yMax]
[*, yMin, <, 0, ), {, return, laguerre, (, min, ,, initial, ,, yMin, ,, yInitial, ), ;, }, final]
[<, 0, ), {, return, laguerre, (, min, ,, initial, ,, yMin, ,, yInitial, ), ;, }, final, double, yMax]
[), {, return, laguerre, (, min, ,, initial, ,, yMin, ,, yInitial, ), ;, }, final, double, yMax, =, computeObjectiveValue]
[;, }, final, double, yMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath, ., abs, (, yMax, ), <=]
[,, initial, ,, yMin, ,, yInitial, ), ;, }, final, double, yMax, =, computeObjectiveValue, (, max, ), ;, if, (]
[,, yMin, ,, yInitial, ), ;, }, final, double, yMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath, .]
[,, yInitial, ), ;, }, final, double, yMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath, ., abs, (]
[), ;, }, final, double, yMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath, ., abs, (, yMax, )]
[;, if, (, FastMath, ., abs, (, yMax, ), <=, functionValueAccuracy, ), {, return, max, ;, }, if, (, yInitial]
[), ;, if, (, FastMath, ., abs, (, yMax, ), <=, functionValueAccuracy, ), {, return, max, ;, }, if, (]
[), {, return, max, ;, }, if, (, yInitial, *, yMax, <, 0, ), {, return, laguerre, (, initial, ,]
[<=, functionValueAccuracy, ), {, return, max, ;, }, if, (, yInitial, *, yMax, <, 0, ), {, return, laguerre, (]
[., abs, (, yMax, ), <=, functionValueAccuracy, ), {, return, max, ;, }, if, (, yInitial, *, yMax, <, 0]
[), <=, functionValueAccuracy, ), {, return, max, ;, }, if, (, yInitial, *, yMax, <, 0, ), {, return, laguerre]
[), {, return, max, ;, }, if, (, yInitial, *, yMax, <, 0, ), {, return, laguerre, (, initial, ,]
[;, }, if, (, yInitial, *, yMax, <, 0, ), {, return, laguerre, (, initial, ,, max, ,, yInitial, ,]
[), {, return, laguerre, (, initial, ,, max, ,, yInitial, ,, yMax, ), ;, }, throw, new, NoBracketingException, (, min]
[<, 0, ), {, return, laguerre, (, initial, ,, max, ,, yInitial, ,, yMax, ), ;, }, throw, new, NoBracketingException]
[*, yMax, <, 0, ), {, return, laguerre, (, initial, ,, max, ,, yInitial, ,, yMax, ), ;, }, throw]
[<, 0, ), {, return, laguerre, (, initial, ,, max, ,, yInitial, ,, yMax, ), ;, }, throw, new, NoBracketingException]
[), {, return, laguerre, (, initial, ,, max, ,, yInitial, ,, yMax, ), ;, }, throw, new, NoBracketingException, (, min]
[;, }, throw, new, NoBracketingException, (, min, ,, max, ,, yMin, ,, yMax, ), ;, }, @, Deprecated, public, double]
[,, max, ,, yInitial, ,, yMax, ), ;, }, throw, new, NoBracketingException, (, min, ,, max, ,, yMin, ,, yMax]
[,, yInitial, ,, yMax, ), ;, }, throw, new, NoBracketingException, (, min, ,, max, ,, yMin, ,, yMax, ), ;]
[,, yMax, ), ;, }, throw, new, NoBracketingException, (, min, ,, max, ,, yMin, ,, yMax, ), ;, }, @]
[), ;, }, throw, new, NoBracketingException, (, min, ,, max, ,, yMin, ,, yMax, ), ;, }, @, Deprecated, public]
[;, }, @, Deprecated, public, double, laguerre, (, double, lo, ,, double, hi, ,, double, fLo, ,, double, fHi, )]
[,, max, ,, yMin, ,, yMax, ), ;, }, @, Deprecated, public, double, laguerre, (, double, lo, ,, double, hi]
[,, yMin, ,, yMax, ), ;, }, @, Deprecated, public, double, laguerre, (, double, lo, ,, double, hi, ,, double]
[,, yMax, ), ;, }, @, Deprecated, public, double, laguerre, (, double, lo, ,, double, hi, ,, double, fLo, ,]
[), ;, }, @, Deprecated, public, double, laguerre, (, double, lo, ,, double, hi, ,, double, fLo, ,, double, fHi]
[;, final, Complex, initial, =, new, Complex, (, 0.5, *, (, lo, +, hi, ), ,, 0, ), ;, final]
[., convertToComplex, (, getCoefficients, (, ), ), ;, final, Complex, initial, =, new, Complex, (, 0.5, *, (, lo, +]
[), ;, final, Complex, initial, =, new, Complex, (, 0.5, *, (, lo, +, hi, ), ,, 0, ), ;]
[;, final, Complex, z, =, complexSolver, ., solve, (, c, ,, initial, ), ;, if, (, complexSolver, ., isRoot, (]
[,, 0, ), ;, final, Complex, z, =, complexSolver, ., solve, (, c, ,, initial, ), ;, if, (, complexSolver]
[*, (, lo, +, hi, ), ,, 0, ), ;, final, Complex, z, =, complexSolver, ., solve, (, c, ,]
[,, 0, ), ;, final, Complex, z, =, complexSolver, ., solve, (, c, ,, initial, ), ;, if, (, complexSolver]
[), ,, 0, ), ;, final, Complex, z, =, complexSolver, ., solve, (, c, ,, initial, ), ;, if, (]
[+, hi, ), ,, 0, ), ;, final, Complex, z, =, complexSolver, ., solve, (, c, ,, initial, ), ;]
[), ,, 0, ), ;, final, Complex, z, =, complexSolver, ., solve, (, c, ,, initial, ), ;, if, (]
[), ;, final, Complex, z, =, complexSolver, ., solve, (, c, ,, initial, ), ;, if, (, complexSolver, ., isRoot]
[;, if, (, complexSolver, ., isRoot, (, lo, ,, hi, ,, z, ), ), {, return, z, ., getReal, (]
[., solve, (, c, ,, initial, ), ;, if, (, complexSolver, ., isRoot, (, lo, ,, hi, ,, z, )]
[,, initial, ), ;, if, (, complexSolver, ., isRoot, (, lo, ,, hi, ,, z, ), ), {, return, z]
[), ;, if, (, complexSolver, ., isRoot, (, lo, ,, hi, ,, z, ), ), {, return, z, ., getReal]
[), {, return, z, ., getReal, (, ), ;, }, else, {, double, r, =, Double, ., NaN, ;, Complex]
[., isRoot, (, lo, ,, hi, ,, z, ), ), {, return, z, ., getReal, (, ), ;, }, else]
[,, hi, ,, z, ), ), {, return, z, ., getReal, (, ), ;, }, else, {, double, r, =]
[,, z, ), ), {, return, z, ., getReal, (, ), ;, }, else, {, double, r, =, Double, .]
[), ), {, return, z, ., getReal, (, ), ;, }, else, {, double, r, =, Double, ., NaN, ;]
[;, }, else, {, double, r, =, Double, ., NaN, ;, Complex, [, ], root, =, complexSolver, ., solveAll, (]
[., getReal, (, ), ;, }, else, {, double, r, =, Double, ., NaN, ;, Complex, [, ], root, =]
[;, Complex, [, ], root, =, complexSolver, ., solveAll, (, c, ,, initial, ), ;, for, (, int, i, =]
[., NaN, ;, Complex, [, ], root, =, complexSolver, ., solveAll, (, c, ,, initial, ), ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, root, ., length, ;, i, ++, ), {, if, (]
[., solveAll, (, c, ,, initial, ), ;, for, (, int, i, =, 0, ;, i, <, root, ., length]
[,, initial, ), ;, for, (, int, i, =, 0, ;, i, <, root, ., length, ;, i, ++, )]
[), ;, for, (, int, i, =, 0, ;, i, <, root, ., length, ;, i, ++, ), {, if]
[;, i, <, root, ., length, ;, i, ++, ), {, if, (, complexSolver, ., isRoot, (, lo, ,, hi]
[;, i, ++, ), {, if, (, complexSolver, ., isRoot, (, lo, ,, hi, ,, root, [, i, ], )]
[<, root, ., length, ;, i, ++, ), {, if, (, complexSolver, ., isRoot, (, lo, ,, hi, ,, root]
[;, i, ++, ), {, if, (, complexSolver, ., isRoot, (, lo, ,, hi, ,, root, [, i, ], )]
[., length, ;, i, ++, ), {, if, (, complexSolver, ., isRoot, (, lo, ,, hi, ,, root, [, i]
[), {, if, (, complexSolver, ., isRoot, (, lo, ,, hi, ,, root, [, i, ], ), ), {, r]
[++, ), {, if, (, complexSolver, ., isRoot, (, lo, ,, hi, ,, root, [, i, ], ), ), {]
[), {, r, =, root, [, i, ], ., getReal, (, ), ;, break, ;, }, }, return, r, ;]
[., isRoot, (, lo, ,, hi, ,, root, [, i, ], ), ), {, r, =, root, [, i, ]]
[,, hi, ,, root, [, i, ], ), ), {, r, =, root, [, i, ], ., getReal, (, )]
[,, root, [, i, ], ), ), {, r, =, root, [, i, ], ., getReal, (, ), ;, break]
[), ), {, r, =, root, [, i, ], ., getReal, (, ), ;, break, ;, }, }, return, r]
[[, i, ], ), ), {, r, =, root, [, i, ], ., getReal, (, ), ;, break, ;, }]
[], ), ), {, r, =, root, [, i, ], ., getReal, (, ), ;, break, ;, }, }, return]
[=, root, [, i, ], ., getReal, (, ), ;, break, ;, }, }, return, r, ;, }, }, public]
[;, break, ;, }, }, return, r, ;, }, }, public, Complex, [, ], solveAllComplex, (, double, [, ], coefficients]
[., getReal, (, ), ;, break, ;, }, }, return, r, ;, }, }, public, Complex, [, ], solveAllComplex, (]
[[, i, ], ., getReal, (, ), ;, break, ;, }, }, return, r, ;, }, }, public, Complex, []
[], ., getReal, (, ), ;, break, ;, }, }, return, r, ;, }, }, public, Complex, [, ], solveAllComplex]
[;, }, }, public, Complex, [, ], solveAllComplex, (, double, [, ], coefficients, ,, double, initial, ), throws, NullArgumentException, ,]
[;, return, complexSolver, ., solveAll, (, ComplexUtils, ., convertToComplex, (, coefficients, ), ,, new, Complex, (, initial, ,, 0d, )]
[,, new, PolynomialFunction, (, coefficients, ), ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver]
[., MAX_VALUE, ,, new, PolynomialFunction, (, coefficients, ), ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;]
[,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver, ., solveAll, (, ComplexUtils, ., convertToComplex]
[), ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver, ., solveAll, (, ComplexUtils, .]
[,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver, ., solveAll, (, ComplexUtils, ., convertToComplex, (, coefficients, ), ,]
[., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver, ., solveAll, (, ComplexUtils, ., convertToComplex, (, coefficients]
[,, initial, ), ;, return, complexSolver, ., solveAll, (, ComplexUtils, ., convertToComplex, (, coefficients, ), ,, new, Complex, (, initial]
[., POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver, ., solveAll, (, ComplexUtils, ., convertToComplex, (, coefficients, ), ,, new, Complex]
[), ;, return, complexSolver, ., solveAll, (, ComplexUtils, ., convertToComplex, (, coefficients, ), ,, new, Complex, (, initial, ,, 0d]
[;, }, public, Complex, solveComplex, (, double, [, ], coefficients, ,, double, initial, ), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException]
[., solveAll, (, ComplexUtils, ., convertToComplex, (, coefficients, ), ,, new, Complex, (, initial, ,, 0d, ), ), ;, }]
[,, new, Complex, (, initial, ,, 0d, ), ), ;, }, public, Complex, solveComplex, (, double, [, ], coefficients, ,]
[., convertToComplex, (, coefficients, ), ,, new, Complex, (, initial, ,, 0d, ), ), ;, }, public, Complex, solveComplex, (]
[), ,, new, Complex, (, initial, ,, 0d, ), ), ;, }, public, Complex, solveComplex, (, double, [, ], coefficients]
[), ;, }, public, Complex, solveComplex, (, double, [, ], coefficients, ,, double, initial, ), throws, NullArgumentException, ,, NoDataException, ,]
[,, 0d, ), ), ;, }, public, Complex, solveComplex, (, double, [, ], coefficients, ,, double, initial, ), throws, NullArgumentException]
[), ), ;, }, public, Complex, solveComplex, (, double, [, ], coefficients, ,, double, initial, ), throws, NullArgumentException, ,, NoDataException]
[;, return, complexSolver, ., solve, (, ComplexUtils, ., convertToComplex, (, coefficients, ), ,, new, Complex, (, initial, ,, 0d, )]
[,, new, PolynomialFunction, (, coefficients, ), ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver]
[., MAX_VALUE, ,, new, PolynomialFunction, (, coefficients, ), ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;]
[,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver, ., solve, (, ComplexUtils, ., convertToComplex]
[), ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver, ., solve, (, ComplexUtils, .]
[,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver, ., solve, (, ComplexUtils, ., convertToComplex, (, coefficients, ), ,]
[., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver, ., solve, (, ComplexUtils, ., convertToComplex, (, coefficients]
[,, initial, ), ;, return, complexSolver, ., solve, (, ComplexUtils, ., convertToComplex, (, coefficients, ), ,, new, Complex, (, initial]
[., POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver, ., solve, (, ComplexUtils, ., convertToComplex, (, coefficients, ), ,, new, Complex]
[), ;, return, complexSolver, ., solve, (, ComplexUtils, ., convertToComplex, (, coefficients, ), ,, new, Complex, (, initial, ,, 0d]
[;, }, private, class, ComplexSolver, {, public, boolean, isRoot, (, double, min, ,, double, max, ,, Complex, z, ), {]
[., solve, (, ComplexUtils, ., convertToComplex, (, coefficients, ), ,, new, Complex, (, initial, ,, 0d, ), ), ;, }]
[,, new, Complex, (, initial, ,, 0d, ), ), ;, }, private, class, ComplexSolver, {, public, boolean, isRoot, (, double]
[., convertToComplex, (, coefficients, ), ,, new, Complex, (, initial, ,, 0d, ), ), ;, }, private, class, ComplexSolver, {]
[), ,, new, Complex, (, initial, ,, 0d, ), ), ;, }, private, class, ComplexSolver, {, public, boolean, isRoot, (]
[), ;, }, private, class, ComplexSolver, {, public, boolean, isRoot, (, double, min, ,, double, max, ,, Complex, z, )]
[,, 0d, ), ), ;, }, private, class, ComplexSolver, {, public, boolean, isRoot, (, double, min, ,, double, max, ,]
[), ), ;, }, private, class, ComplexSolver, {, public, boolean, isRoot, (, double, min, ,, double, max, ,, Complex, z]
[), {, double, tolerance, =, FastMath, ., max, (, getRelativeAccuracy, (, ), *, z, ., abs, (, ), ,, getAbsoluteAccuracy]
[,, z, ., getReal, (, ), ,, max, ), ), {, double, tolerance, =, FastMath, ., max, (, getRelativeAccuracy, (]
[,, max, ), ), {, double, tolerance, =, FastMath, ., max, (, getRelativeAccuracy, (, ), *, z, ., abs, (]
[., getReal, (, ), ,, max, ), ), {, double, tolerance, =, FastMath, ., max, (, getRelativeAccuracy, (, ), *]
[), ), {, double, tolerance, =, FastMath, ., max, (, getRelativeAccuracy, (, ), *, z, ., abs, (, ), ,]
[;, return, (, FastMath, ., abs, (, z, ., getImaginary, (, ), ), <=, tolerance, ), ||, (, z, .]
[., max, (, getRelativeAccuracy, (, ), *, z, ., abs, (, ), ,, getAbsoluteAccuracy, (, ), ), ;, return, (]
[,, getAbsoluteAccuracy, (, ), ), ;, return, (, FastMath, ., abs, (, z, ., getImaginary, (, ), ), <=, tolerance]
[*, z, ., abs, (, ), ,, getAbsoluteAccuracy, (, ), ), ;, return, (, FastMath, ., abs, (, z, .]
[,, getAbsoluteAccuracy, (, ), ), ;, return, (, FastMath, ., abs, (, z, ., getImaginary, (, ), ), <=, tolerance]
[., abs, (, ), ,, getAbsoluteAccuracy, (, ), ), ;, return, (, FastMath, ., abs, (, z, ., getImaginary, (]
[), ;, return, (, FastMath, ., abs, (, z, ., getImaginary, (, ), ), <=, tolerance, ), ||, (, z]
[;, }, return, false, ;, }, public, Complex, [, ], solveAll, (, Complex, coefficients, [, ], ,, Complex, initial, )]
[||, (, z, ., abs, (, ), <=, getFunctionValueAccuracy, (, ), ), ;, }, return, false, ;, }, public, Complex]
[), ||, (, z, ., abs, (, ), <=, getFunctionValueAccuracy, (, ), ), ;, }, return, false, ;, }, public]
[<=, tolerance, ), ||, (, z, ., abs, (, ), <=, getFunctionValueAccuracy, (, ), ), ;, }, return, false, ;]
[., abs, (, z, ., getImaginary, (, ), ), <=, tolerance, ), ||, (, z, ., abs, (, ), <=]
[), <=, tolerance, ), ||, (, z, ., abs, (, ), <=, getFunctionValueAccuracy, (, ), ), ;, }, return, false]
[., getImaginary, (, ), ), <=, tolerance, ), ||, (, z, ., abs, (, ), <=, getFunctionValueAccuracy, (, ), )]
[), ||, (, z, ., abs, (, ), <=, getFunctionValueAccuracy, (, ), ), ;, }, return, false, ;, }, public]
[;, }, return, false, ;, }, public, Complex, [, ], solveAll, (, Complex, coefficients, [, ], ,, Complex, initial, )]
[), ;, }, return, false, ;, }, public, Complex, [, ], solveAll, (, Complex, coefficients, [, ], ,, Complex, initial]
[<=, getFunctionValueAccuracy, (, ), ), ;, }, return, false, ;, }, public, Complex, [, ], solveAll, (, Complex, coefficients, []
[., abs, (, ), <=, getFunctionValueAccuracy, (, ), ), ;, }, return, false, ;, }, public, Complex, [, ], solveAll]
[), ;, }, return, false, ;, }, public, Complex, [, ], solveAll, (, Complex, coefficients, [, ], ,, Complex, initial]
[;, }, public, Complex, [, ], solveAll, (, Complex, coefficients, [, ], ,, Complex, initial, ), throws, NullArgumentException, ,, NoDataException]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, int, n, =, coefficients, ., length, -, 1, ;, if]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, n, =, coefficients, ., length, -, 1]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, int, n, =, coefficients, ., length, -, 1, ;, if]
[;, }, final, int, n, =, coefficients, ., length, -, 1, ;, if, (, n, ==, 0, ), {, throw]
[;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., POLYNOMIAL, ), ;, }, final, Complex]
[-, 1, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., POLYNOMIAL, ), ;, }]
[., length, -, 1, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., POLYNOMIAL, )]
[;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., POLYNOMIAL, ), ;, }, final, Complex]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., POLYNOMIAL, ), ;, }, final, Complex, c, [, ], =, new, Complex]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., POLYNOMIAL, ), ;, }, final, Complex, c, [, ], =]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., POLYNOMIAL, ), ;, }, final, Complex, c, [, ], =, new, Complex]
[;, }, final, Complex, c, [, ], =, new, Complex, [, n, +, 1, ], ;, for, (, int, i]
[), ;, }, final, Complex, c, [, ], =, new, Complex, [, n, +, 1, ], ;, for, (, int]
[., POLYNOMIAL, ), ;, }, final, Complex, c, [, ], =, new, Complex, [, n, +, 1, ], ;, for]
[;, for, (, int, i, =, 0, ;, i, <=, n, ;, i, ++, ), {, c, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <=, n, ;, i, ++, ), {, c, [, i]
[+, 1, ], ;, for, (, int, i, =, 0, ;, i, <=, n, ;, i, ++, ), {, c]
[], ;, for, (, int, i, =, 0, ;, i, <=, n, ;, i, ++, ), {, c, [, i]
[;, i, <=, n, ;, i, ++, ), {, c, [, i, ], =, coefficients, [, i, ], ;, }]
[;, i, ++, ), {, c, [, i, ], =, coefficients, [, i, ], ;, }, final, Complex, root, []
[<=, n, ;, i, ++, ), {, c, [, i, ], =, coefficients, [, i, ], ;, }, final, Complex]
[;, i, ++, ), {, c, [, i, ], =, coefficients, [, i, ], ;, }, final, Complex, root, []
[), {, c, [, i, ], =, coefficients, [, i, ], ;, }, final, Complex, root, [, ], =, new]
[++, ), {, c, [, i, ], =, coefficients, [, i, ], ;, }, final, Complex, root, [, ], =]
[=, coefficients, [, i, ], ;, }, final, Complex, root, [, ], =, new, Complex, [, n, ], ;, for]
[[, i, ], =, coefficients, [, i, ], ;, }, final, Complex, root, [, ], =, new, Complex, [, n]
[], =, coefficients, [, i, ], ;, }, final, Complex, root, [, ], =, new, Complex, [, n, ], ;]
[;, }, final, Complex, root, [, ], =, new, Complex, [, n, ], ;, for, (, int, i, =, 0]
[[, i, ], ;, }, final, Complex, root, [, ], =, new, Complex, [, n, ], ;, for, (, int]
[], ;, }, final, Complex, root, [, ], =, new, Complex, [, n, ], ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, Complex, subarray, []
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, Complex, subarray]
[;, i, <, n, ;, i, ++, ), {, final, Complex, subarray, [, ], =, new, Complex, [, n, -]
[;, i, ++, ), {, final, Complex, subarray, [, ], =, new, Complex, [, n, -, i, +, 1, ]]
[<, n, ;, i, ++, ), {, final, Complex, subarray, [, ], =, new, Complex, [, n, -, i, +]
[;, i, ++, ), {, final, Complex, subarray, [, ], =, new, Complex, [, n, -, i, +, 1, ]]
[), {, final, Complex, subarray, [, ], =, new, Complex, [, n, -, i, +, 1, ], ;, System, .]
[++, ), {, final, Complex, subarray, [, ], =, new, Complex, [, n, -, i, +, 1, ], ;, System]
[;, System, ., arraycopy, (, c, ,, 0, ,, subarray, ,, 0, ,, subarray, ., length, ), ;, root, []
[], ;, System, ., arraycopy, (, c, ,, 0, ,, subarray, ,, 0, ,, subarray, ., length, ), ;, root]
[+, 1, ], ;, System, ., arraycopy, (, c, ,, 0, ,, subarray, ,, 0, ,, subarray, ., length, )]
[-, i, +, 1, ], ;, System, ., arraycopy, (, c, ,, 0, ,, subarray, ,, 0, ,, subarray, .]
[+, 1, ], ;, System, ., arraycopy, (, c, ,, 0, ,, subarray, ,, 0, ,, subarray, ., length, )]
[], ;, System, ., arraycopy, (, c, ,, 0, ,, subarray, ,, 0, ,, subarray, ., length, ), ;, root]
[;, root, [, i, ], =, solve, (, subarray, ,, initial, ), ;, Complex, newc, =, c, [, n, -]
[., arraycopy, (, c, ,, 0, ,, subarray, ,, 0, ,, subarray, ., length, ), ;, root, [, i, ]]
[,, 0, ,, subarray, ,, 0, ,, subarray, ., length, ), ;, root, [, i, ], =, solve, (, subarray]
[,, subarray, ,, 0, ,, subarray, ., length, ), ;, root, [, i, ], =, solve, (, subarray, ,, initial]
[,, 0, ,, subarray, ., length, ), ;, root, [, i, ], =, solve, (, subarray, ,, initial, ), ;]
[,, subarray, ., length, ), ;, root, [, i, ], =, solve, (, subarray, ,, initial, ), ;, Complex, newc]
[), ;, root, [, i, ], =, solve, (, subarray, ,, initial, ), ;, Complex, newc, =, c, [, n]
[., length, ), ;, root, [, i, ], =, solve, (, subarray, ,, initial, ), ;, Complex, newc, =, c]
[=, solve, (, subarray, ,, initial, ), ;, Complex, newc, =, c, [, n, -, i, ], ;, Complex, oldc]
[[, i, ], =, solve, (, subarray, ,, initial, ), ;, Complex, newc, =, c, [, n, -, i, ]]
[], =, solve, (, subarray, ,, initial, ), ;, Complex, newc, =, c, [, n, -, i, ], ;, Complex]
[;, Complex, newc, =, c, [, n, -, i, ], ;, Complex, oldc, =, null, ;, for, (, int, j]
[,, initial, ), ;, Complex, newc, =, c, [, n, -, i, ], ;, Complex, oldc, =, null, ;, for]
[), ;, Complex, newc, =, c, [, n, -, i, ], ;, Complex, oldc, =, null, ;, for, (, int]
[;, Complex, oldc, =, null, ;, for, (, int, j, =, n, -, i, -, 1, ;, j, >=, 0]
[[, n, -, i, ], ;, Complex, oldc, =, null, ;, for, (, int, j, =, n, -, i, -]
[], ;, Complex, oldc, =, null, ;, for, (, int, j, =, n, -, i, -, 1, ;, j, >=]
[-, i, ], ;, Complex, oldc, =, null, ;, for, (, int, j, =, n, -, i, -, 1, ;]
[], ;, Complex, oldc, =, null, ;, for, (, int, j, =, n, -, i, -, 1, ;, j, >=]
[;, for, (, int, j, =, n, -, i, -, 1, ;, j, >=, 0, ;, j, --, ), {]
[;, j, >=, 0, ;, j, --, ), {, oldc, =, c, [, j, ], ;, c, [, j, ]]
[-, 1, ;, j, >=, 0, ;, j, --, ), {, oldc, =, c, [, j, ], ;, c, []
[-, i, -, 1, ;, j, >=, 0, ;, j, --, ), {, oldc, =, c, [, j, ], ;]
[-, 1, ;, j, >=, 0, ;, j, --, ), {, oldc, =, c, [, j, ], ;, c, []
[;, j, >=, 0, ;, j, --, ), {, oldc, =, c, [, j, ], ;, c, [, j, ]]
[;, j, --, ), {, oldc, =, c, [, j, ], ;, c, [, j, ], =, newc, ;, newc]
[>=, 0, ;, j, --, ), {, oldc, =, c, [, j, ], ;, c, [, j, ], =, newc]
[;, j, --, ), {, oldc, =, c, [, j, ], ;, c, [, j, ], =, newc, ;, newc]
[), {, oldc, =, c, [, j, ], ;, c, [, j, ], =, newc, ;, newc, =, oldc, .]
[--, ), {, oldc, =, c, [, j, ], ;, c, [, j, ], =, newc, ;, newc, =, oldc]
[=, c, [, j, ], ;, c, [, j, ], =, newc, ;, newc, =, oldc, ., add, (, newc]
[;, c, [, j, ], =, newc, ;, newc, =, oldc, ., add, (, newc, ., multiply, (, root, []
[[, j, ], ;, c, [, j, ], =, newc, ;, newc, =, oldc, ., add, (, newc, ., multiply]
[], ;, c, [, j, ], =, newc, ;, newc, =, oldc, ., add, (, newc, ., multiply, (, root]
[=, newc, ;, newc, =, oldc, ., add, (, newc, ., multiply, (, root, [, i, ], ), ), ;]
[[, j, ], =, newc, ;, newc, =, oldc, ., add, (, newc, ., multiply, (, root, [, i, ]]
[], =, newc, ;, newc, =, oldc, ., add, (, newc, ., multiply, (, root, [, i, ], ), )]
[;, newc, =, oldc, ., add, (, newc, ., multiply, (, root, [, i, ], ), ), ;, }, }]
[=, oldc, ., add, (, newc, ., multiply, (, root, [, i, ], ), ), ;, }, }, return, root]
[;, }, }, return, root, ;, }, public, Complex, solve, (, Complex, coefficients, [, ], ,, Complex, initial, ), throws]
[., add, (, newc, ., multiply, (, root, [, i, ], ), ), ;, }, }, return, root, ;, }]
[), ;, }, }, return, root, ;, }, public, Complex, solve, (, Complex, coefficients, [, ], ,, Complex, initial, )]
[., multiply, (, root, [, i, ], ), ), ;, }, }, return, root, ;, }, public, Complex, solve, (]
[), ), ;, }, }, return, root, ;, }, public, Complex, solve, (, Complex, coefficients, [, ], ,, Complex, initial]
[[, i, ], ), ), ;, }, }, return, root, ;, }, public, Complex, solve, (, Complex, coefficients, [, ]]
[], ), ), ;, }, }, return, root, ;, }, public, Complex, solve, (, Complex, coefficients, [, ], ,, Complex]
[;, }, public, Complex, solve, (, Complex, coefficients, [, ], ,, Complex, initial, ), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, int, n, =, coefficients, ., length, -, 1, ;, if]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, n, =, coefficients, ., length, -, 1]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, int, n, =, coefficients, ., length, -, 1, ;, if]
[;, }, final, int, n, =, coefficients, ., length, -, 1, ;, if, (, n, ==, 0, ), {, throw]
[;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., POLYNOMIAL, ), ;, }, final, double]
[-, 1, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., POLYNOMIAL, ), ;, }]
[., length, -, 1, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., POLYNOMIAL, )]
[;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., POLYNOMIAL, ), ;, }, final, double]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., POLYNOMIAL, ), ;, }, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., POLYNOMIAL, ), ;, }, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., POLYNOMIAL, ), ;, }, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;]
[;, }, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, final, double, relativeAccuracy, =, getRelativeAccuracy, (, ), ;, final, double]
[), ;, }, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, final, double, relativeAccuracy, =, getRelativeAccuracy, (, ), ;, final]
[., POLYNOMIAL, ), ;, }, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, final, double, relativeAccuracy, =, getRelativeAccuracy, (, )]
[;, final, double, relativeAccuracy, =, getRelativeAccuracy, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, final, Complex, nC]
[;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, final, Complex, nC, =, new, Complex, (, n, ,, 0, )]
[;, final, Complex, nC, =, new, Complex, (, n, ,, 0, ), ;, final, Complex, n1C, =, new, Complex, (]
[;, final, Complex, n1C, =, new, Complex, (, n, -, 1, ,, 0, ), ;, Complex, z, =, initial, ;]
[,, 0, ), ;, final, Complex, n1C, =, new, Complex, (, n, -, 1, ,, 0, ), ;, Complex, z]
[), ;, final, Complex, n1C, =, new, Complex, (, n, -, 1, ,, 0, ), ;, Complex, z, =, initial]
[;, Complex, z, =, initial, ;, Complex, oldz, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, )]
[,, 0, ), ;, Complex, z, =, initial, ;, Complex, oldz, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,, Double]
[-, 1, ,, 0, ), ;, Complex, z, =, initial, ;, Complex, oldz, =, new, Complex, (, Double, ., POSITIVE_INFINITY]
[,, 0, ), ;, Complex, z, =, initial, ;, Complex, oldz, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,, Double]
[), ;, Complex, z, =, initial, ;, Complex, oldz, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY]
[;, Complex, oldz, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, while, (, true, )]
[;, while, (, true, ), {, Complex, pv, =, coefficients, [, n, ], ;, Complex, dv, =, Complex, ., ZERO]
[,, Double, ., POSITIVE_INFINITY, ), ;, while, (, true, ), {, Complex, pv, =, coefficients, [, n, ], ;, Complex]
[., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, while, (, true, ), {, Complex, pv, =, coefficients, [, n, ]]
[), ;, while, (, true, ), {, Complex, pv, =, coefficients, [, n, ], ;, Complex, dv, =, Complex, .]
[., POSITIVE_INFINITY, ), ;, while, (, true, ), {, Complex, pv, =, coefficients, [, n, ], ;, Complex, dv, =]
[), {, Complex, pv, =, coefficients, [, n, ], ;, Complex, dv, =, Complex, ., ZERO, ;, Complex, d2v, =]
[;, Complex, dv, =, Complex, ., ZERO, ;, Complex, d2v, =, Complex, ., ZERO, ;, for, (, int, j, =]
[[, n, ], ;, Complex, dv, =, Complex, ., ZERO, ;, Complex, d2v, =, Complex, ., ZERO, ;, for, (]
[], ;, Complex, dv, =, Complex, ., ZERO, ;, Complex, d2v, =, Complex, ., ZERO, ;, for, (, int, j]
[;, Complex, d2v, =, Complex, ., ZERO, ;, for, (, int, j, =, n, -, 1, ;, j, >=, 0]
[., ZERO, ;, Complex, d2v, =, Complex, ., ZERO, ;, for, (, int, j, =, n, -, 1, ;, j]
[;, for, (, int, j, =, n, -, 1, ;, j, >=, 0, ;, j, --, ), {, d2v, =]
[., ZERO, ;, for, (, int, j, =, n, -, 1, ;, j, >=, 0, ;, j, --, ), {]
[;, j, >=, 0, ;, j, --, ), {, d2v, =, dv, ., add, (, z, ., multiply, (, d2v]
[-, 1, ;, j, >=, 0, ;, j, --, ), {, d2v, =, dv, ., add, (, z, ., multiply]
[;, j, >=, 0, ;, j, --, ), {, d2v, =, dv, ., add, (, z, ., multiply, (, d2v]
[;, j, --, ), {, d2v, =, dv, ., add, (, z, ., multiply, (, d2v, ), ), ;, dv]
[>=, 0, ;, j, --, ), {, d2v, =, dv, ., add, (, z, ., multiply, (, d2v, ), )]
[;, j, --, ), {, d2v, =, dv, ., add, (, z, ., multiply, (, d2v, ), ), ;, dv]
[), {, d2v, =, dv, ., add, (, z, ., multiply, (, d2v, ), ), ;, dv, =, pv, .]
[--, ), {, d2v, =, dv, ., add, (, z, ., multiply, (, d2v, ), ), ;, dv, =, pv]
[=, dv, ., add, (, z, ., multiply, (, d2v, ), ), ;, dv, =, pv, ., add, (, z]
[;, dv, =, pv, ., add, (, z, ., multiply, (, dv, ), ), ;, pv, =, coefficients, [, j]
[., add, (, z, ., multiply, (, d2v, ), ), ;, dv, =, pv, ., add, (, z, ., multiply]
[), ;, dv, =, pv, ., add, (, z, ., multiply, (, dv, ), ), ;, pv, =, coefficients, []
[., multiply, (, d2v, ), ), ;, dv, =, pv, ., add, (, z, ., multiply, (, dv, ), )]
[), ), ;, dv, =, pv, ., add, (, z, ., multiply, (, dv, ), ), ;, pv, =, coefficients]
[=, pv, ., add, (, z, ., multiply, (, dv, ), ), ;, pv, =, coefficients, [, j, ], .]
[;, pv, =, coefficients, [, j, ], ., add, (, z, ., multiply, (, pv, ), ), ;, }, d2v]
[., add, (, z, ., multiply, (, dv, ), ), ;, pv, =, coefficients, [, j, ], ., add, (]
[), ;, pv, =, coefficients, [, j, ], ., add, (, z, ., multiply, (, pv, ), ), ;, }]
[., multiply, (, dv, ), ), ;, pv, =, coefficients, [, j, ], ., add, (, z, ., multiply, (]
[), ), ;, pv, =, coefficients, [, j, ], ., add, (, z, ., multiply, (, pv, ), ), ;]
[=, coefficients, [, j, ], ., add, (, z, ., multiply, (, pv, ), ), ;, }, d2v, =, d2v]
[;, }, d2v, =, d2v, ., multiply, (, new, Complex, (, 2.0, ,, 0.0, ), ), ;, final, double, tolerance]
[., add, (, z, ., multiply, (, pv, ), ), ;, }, d2v, =, d2v, ., multiply, (, new, Complex]
[[, j, ], ., add, (, z, ., multiply, (, pv, ), ), ;, }, d2v, =, d2v, ., multiply]
[], ., add, (, z, ., multiply, (, pv, ), ), ;, }, d2v, =, d2v, ., multiply, (, new]
[), ;, }, d2v, =, d2v, ., multiply, (, new, Complex, (, 2.0, ,, 0.0, ), ), ;, final, double]
[., multiply, (, pv, ), ), ;, }, d2v, =, d2v, ., multiply, (, new, Complex, (, 2.0, ,, 0.0]
[), ), ;, }, d2v, =, d2v, ., multiply, (, new, Complex, (, 2.0, ,, 0.0, ), ), ;, final]
[=, d2v, ., multiply, (, new, Complex, (, 2.0, ,, 0.0, ), ), ;, final, double, tolerance, =, FastMath, .]
[;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *, z, ., abs, (, ), ,, absoluteAccuracy, ), ;]
[., multiply, (, new, Complex, (, 2.0, ,, 0.0, ), ), ;, final, double, tolerance, =, FastMath, ., max, (]
[), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *, z, ., abs, (, ), ,, absoluteAccuracy, )]
[,, 0.0, ), ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *, z, ., abs, (, )]
[), ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *, z, ., abs, (, ), ,, absoluteAccuracy]
[;, if, (, (, z, ., subtract, (, oldz, ), ), ., abs, (, ), <=, tolerance, ), {, return]
[., max, (, relativeAccuracy, *, z, ., abs, (, ), ,, absoluteAccuracy, ), ;, if, (, (, z, ., subtract]
[,, absoluteAccuracy, ), ;, if, (, (, z, ., subtract, (, oldz, ), ), ., abs, (, ), <=, tolerance]
[*, z, ., abs, (, ), ,, absoluteAccuracy, ), ;, if, (, (, z, ., subtract, (, oldz, ), )]
[,, absoluteAccuracy, ), ;, if, (, (, z, ., subtract, (, oldz, ), ), ., abs, (, ), <=, tolerance]
[., abs, (, ), ,, absoluteAccuracy, ), ;, if, (, (, z, ., subtract, (, oldz, ), ), ., abs]
[), ;, if, (, (, z, ., subtract, (, oldz, ), ), ., abs, (, ), <=, tolerance, ), {]
[), {, return, z, ;, }, if, (, pv, ., abs, (, ), <=, functionValueAccuracy, ), {, return, z, ;]
[<=, tolerance, ), {, return, z, ;, }, if, (, pv, ., abs, (, ), <=, functionValueAccuracy, ), {, return]
[., abs, (, ), <=, tolerance, ), {, return, z, ;, }, if, (, pv, ., abs, (, ), <=]
[), ., abs, (, ), <=, tolerance, ), {, return, z, ;, }, if, (, pv, ., abs, (, )]
[., subtract, (, oldz, ), ), ., abs, (, ), <=, tolerance, ), {, return, z, ;, }, if, (]
[), ), ., abs, (, ), <=, tolerance, ), {, return, z, ;, }, if, (, pv, ., abs, (]
[), {, return, z, ;, }, if, (, pv, ., abs, (, ), <=, functionValueAccuracy, ), {, return, z, ;]
[;, }, if, (, pv, ., abs, (, ), <=, functionValueAccuracy, ), {, return, z, ;, }, final, Complex, G]
[), {, return, z, ;, }, final, Complex, G, =, dv, ., divide, (, pv, ), ;, final, Complex, G2]
[<=, functionValueAccuracy, ), {, return, z, ;, }, final, Complex, G, =, dv, ., divide, (, pv, ), ;, final]
[., abs, (, ), <=, functionValueAccuracy, ), {, return, z, ;, }, final, Complex, G, =, dv, ., divide, (]
[), {, return, z, ;, }, final, Complex, G, =, dv, ., divide, (, pv, ), ;, final, Complex, G2]
[;, }, final, Complex, G, =, dv, ., divide, (, pv, ), ;, final, Complex, G2, =, G, ., multiply]
[;, final, Complex, G2, =, G, ., multiply, (, G, ), ;, final, Complex, H, =, G2, ., subtract, (]
[., divide, (, pv, ), ;, final, Complex, G2, =, G, ., multiply, (, G, ), ;, final, Complex, H]
[), ;, final, Complex, G2, =, G, ., multiply, (, G, ), ;, final, Complex, H, =, G2, ., subtract]
[;, final, Complex, H, =, G2, ., subtract, (, d2v, ., divide, (, pv, ), ), ;, final, Complex, delta]
[., multiply, (, G, ), ;, final, Complex, H, =, G2, ., subtract, (, d2v, ., divide, (, pv, )]
[), ;, final, Complex, H, =, G2, ., subtract, (, d2v, ., divide, (, pv, ), ), ;, final, Complex]
[;, final, Complex, delta, =, n1C, ., multiply, (, (, nC, ., multiply, (, H, ), ), ., subtract, (]
[., subtract, (, d2v, ., divide, (, pv, ), ), ;, final, Complex, delta, =, n1C, ., multiply, (, (]
[), ;, final, Complex, delta, =, n1C, ., multiply, (, (, nC, ., multiply, (, H, ), ), ., subtract]
[., divide, (, pv, ), ), ;, final, Complex, delta, =, n1C, ., multiply, (, (, nC, ., multiply, (]
[), ), ;, final, Complex, delta, =, n1C, ., multiply, (, (, nC, ., multiply, (, H, ), ), .]
[;, final, Complex, deltaSqrt, =, delta, ., sqrt, (, ), ;, final, Complex, dplus, =, G, ., add, (, deltaSqrt]
[., multiply, (, (, nC, ., multiply, (, H, ), ), ., subtract, (, G2, ), ), ;, final, Complex]
[), ;, final, Complex, deltaSqrt, =, delta, ., sqrt, (, ), ;, final, Complex, dplus, =, G, ., add, (]
[., subtract, (, G2, ), ), ;, final, Complex, deltaSqrt, =, delta, ., sqrt, (, ), ;, final, Complex, dplus]
[), ., subtract, (, G2, ), ), ;, final, Complex, deltaSqrt, =, delta, ., sqrt, (, ), ;, final, Complex]
[., multiply, (, H, ), ), ., subtract, (, G2, ), ), ;, final, Complex, deltaSqrt, =, delta, ., sqrt]
[), ), ., subtract, (, G2, ), ), ;, final, Complex, deltaSqrt, =, delta, ., sqrt, (, ), ;, final]
[), ), ;, final, Complex, deltaSqrt, =, delta, ., sqrt, (, ), ;, final, Complex, dplus, =, G, ., add]
[;, final, Complex, dplus, =, G, ., add, (, deltaSqrt, ), ;, final, Complex, dminus, =, G, ., subtract, (]
[., sqrt, (, ), ;, final, Complex, dplus, =, G, ., add, (, deltaSqrt, ), ;, final, Complex, dminus, =]
[;, final, Complex, dminus, =, G, ., subtract, (, deltaSqrt, ), ;, final, Complex, denominator, =, dplus, ., abs, (]
[., add, (, deltaSqrt, ), ;, final, Complex, dminus, =, G, ., subtract, (, deltaSqrt, ), ;, final, Complex, denominator]
[), ;, final, Complex, dminus, =, G, ., subtract, (, deltaSqrt, ), ;, final, Complex, denominator, =, dplus, ., abs]
[;, final, Complex, denominator, =, dplus, ., abs, (, ), >, dminus, ., abs, (, ), ?, dplus, :, dminus]
[., subtract, (, deltaSqrt, ), ;, final, Complex, denominator, =, dplus, ., abs, (, ), >, dminus, ., abs, (]
[), ;, final, Complex, denominator, =, dplus, ., abs, (, ), >, dminus, ., abs, (, ), ?, dplus, :]
[;, if, (, denominator, ., equals, (, new, Complex, (, 0.0, ,, 0.0, ), ), ), {, z, =, z]
[?, dplus, :, dminus, ;, if, (, denominator, ., equals, (, new, Complex, (, 0.0, ,, 0.0, ), ), )]
[>, dminus, ., abs, (, ), ?, dplus, :, dminus, ;, if, (, denominator, ., equals, (, new, Complex, (]
[., abs, (, ), >, dminus, ., abs, (, ), ?, dplus, :, dminus, ;, if, (, denominator, ., equals]
[?, dplus, :, dminus, ;, if, (, denominator, ., equals, (, new, Complex, (, 0.0, ,, 0.0, ), ), )]
[., abs, (, ), ?, dplus, :, dminus, ;, if, (, denominator, ., equals, (, new, Complex, (, 0.0, ,]
[:, dminus, ;, if, (, denominator, ., equals, (, new, Complex, (, 0.0, ,, 0.0, ), ), ), {, z]
[;, if, (, denominator, ., equals, (, new, Complex, (, 0.0, ,, 0.0, ), ), ), {, z, =, z]
[), {, z, =, z, ., add, (, new, Complex, (, absoluteAccuracy, ,, absoluteAccuracy, ), ), ;, oldz, =, new]
[., equals, (, new, Complex, (, 0.0, ,, 0.0, ), ), ), {, z, =, z, ., add, (, new]
[), ), {, z, =, z, ., add, (, new, Complex, (, absoluteAccuracy, ,, absoluteAccuracy, ), ), ;, oldz, =]
[,, 0.0, ), ), ), {, z, =, z, ., add, (, new, Complex, (, absoluteAccuracy, ,, absoluteAccuracy, ), )]
[), ), ), {, z, =, z, ., add, (, new, Complex, (, absoluteAccuracy, ,, absoluteAccuracy, ), ), ;, oldz]
[=, z, ., add, (, new, Complex, (, absoluteAccuracy, ,, absoluteAccuracy, ), ), ;, oldz, =, new, Complex, (, Double]
[;, oldz, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, }, else, {, oldz, =]
[., add, (, new, Complex, (, absoluteAccuracy, ,, absoluteAccuracy, ), ), ;, oldz, =, new, Complex, (, Double, ., POSITIVE_INFINITY]
[), ;, oldz, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, }, else, {, oldz]
[,, absoluteAccuracy, ), ), ;, oldz, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, }]
[), ), ;, oldz, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, }, else, {]
[=, new, Complex, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, }, else, {, oldz, =, z, ;]
[;, }, else, {, oldz, =, z, ;, z, =, z, ., subtract, (, nC, ., divide, (, denominator, )]
[,, Double, ., POSITIVE_INFINITY, ), ;, }, else, {, oldz, =, z, ;, z, =, z, ., subtract, (, nC]
[., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, }, else, {, oldz, =, z, ;, z, =, z, ., subtract]
[), ;, }, else, {, oldz, =, z, ;, z, =, z, ., subtract, (, nC, ., divide, (, denominator]
[., POSITIVE_INFINITY, ), ;, }, else, {, oldz, =, z, ;, z, =, z, ., subtract, (, nC, ., divide]
[=, z, ;, z, =, z, ., subtract, (, nC, ., divide, (, denominator, ), ), ;, }, incrementEvaluationCount, (]
[;, z, =, z, ., subtract, (, nC, ., divide, (, denominator, ), ), ;, }, incrementEvaluationCount, (, ), ;]
[=, z, ., subtract, (, nC, ., divide, (, denominator, ), ), ;, }, incrementEvaluationCount, (, ), ;, }, }]
[;, }, incrementEvaluationCount, (, ), ;, }, }, }, }]
[., subtract, (, nC, ., divide, (, denominator, ), ), ;, }, incrementEvaluationCount, (, ), ;, }, }, }, }]
[), ;, }, incrementEvaluationCount, (, ), ;, }, }, }, }]
[., divide, (, denominator, ), ), ;, }, incrementEvaluationCount, (, ), ;, }, }, }, }]
[), ), ;, }, incrementEvaluationCount, (, ), ;, }, }, }, }]
[;, }, }, }, }]
