[;, private, final, Set, <, String, >, exportedVariables, =, Sets, ., newHashSet, (, ), ;, GatherRawExports, (, AbstractCompiler, compiler, )]
[,, "top", }, ;, private, final, Set, <, String, >, exportedVariables, =, Sets, ., newHashSet, (, ), ;, GatherRawExports, (]
[}, ;, private, final, Set, <, String, >, exportedVariables, =, Sets, ., newHashSet, (, ), ;, GatherRawExports, (, AbstractCompiler, compiler]
[;, GatherRawExports, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (]
[., newHashSet, (, ), ;, GatherRawExports, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, @, Override]
[=, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState]
[., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (, compiler]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal]
[., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, void, visit, (]
[., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override]
[., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, )]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, sibling]
[., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[,, root, ,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node]
[,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node]
[;, if, (, sibling, !=, null, &&, sibling, ., isString, (, ), &&, NodeUtil, ., isGet, (, parent, ), )]
[., getNext, (, ), ;, if, (, sibling, !=, null, &&, sibling, ., isString, (, ), &&, NodeUtil, ., isGet]
[), {, if, (, isGlobalThisObject, (, t, ,, n, ), ), {, exportedVariables, ., add, (, sibling, ., getString, (]
[&&, NodeUtil, ., isGet, (, parent, ), ), {, if, (, isGlobalThisObject, (, t, ,, n, ), ), {, exportedVariables]
[&&, sibling, ., isString, (, ), &&, NodeUtil, ., isGet, (, parent, ), ), {, if, (, isGlobalThisObject, (, t]
[!=, null, &&, sibling, ., isString, (, ), &&, NodeUtil, ., isGet, (, parent, ), ), {, if, (, isGlobalThisObject]
[&&, sibling, ., isString, (, ), &&, NodeUtil, ., isGet, (, parent, ), ), {, if, (, isGlobalThisObject, (, t]
[&&, NodeUtil, ., isGet, (, parent, ), ), {, if, (, isGlobalThisObject, (, t, ,, n, ), ), {, exportedVariables]
[., isString, (, ), &&, NodeUtil, ., isGet, (, parent, ), ), {, if, (, isGlobalThisObject, (, t, ,, n]
[), {, if, (, isGlobalThisObject, (, t, ,, n, ), ), {, exportedVariables, ., add, (, sibling, ., getString, (]
[., isGet, (, parent, ), ), {, if, (, isGlobalThisObject, (, t, ,, n, ), ), {, exportedVariables, ., add]
[), ), {, if, (, isGlobalThisObject, (, t, ,, n, ), ), {, exportedVariables, ., add, (, sibling, ., getString]
[), {, exportedVariables, ., add, (, sibling, ., getString, (, ), ), ;, }, }, }, private, boolean, isGlobalThisObject, (]
[,, n, ), ), {, exportedVariables, ., add, (, sibling, ., getString, (, ), ), ;, }, }, }, private]
[), ), {, exportedVariables, ., add, (, sibling, ., getString, (, ), ), ;, }, }, }, private, boolean, isGlobalThisObject]
[;, }, }, }, private, boolean, isGlobalThisObject, (, NodeTraversal, t, ,, Node, n, ), {, if, (, n, ., isThis]
[., add, (, sibling, ., getString, (, ), ), ;, }, }, }, private, boolean, isGlobalThisObject, (, NodeTraversal, t, ,]
[), ;, }, }, }, private, boolean, isGlobalThisObject, (, NodeTraversal, t, ,, Node, n, ), {, if, (, n, .]
[., getString, (, ), ), ;, }, }, }, private, boolean, isGlobalThisObject, (, NodeTraversal, t, ,, Node, n, ), {]
[), {, return, t, ., inGlobalScope, (, ), ;, }, else, if, (, n, ., isName, (, ), ), {]
[., isThis, (, ), ), {, return, t, ., inGlobalScope, (, ), ;, }, else, if, (, n, ., isName]
[;, }, else, if, (, n, ., isName, (, ), ), {, String, varName, =, n, ., getString, (, )]
[., inGlobalScope, (, ), ;, }, else, if, (, n, ., isName, (, ), ), {, String, varName, =, n]
[), {, String, varName, =, n, ., getString, (, ), ;, int, items, =, GLOBAL_THIS_NAMES, ., length, ;, for, (]
[., isName, (, ), ), {, String, varName, =, n, ., getString, (, ), ;, int, items, =, GLOBAL_THIS_NAMES, .]
[;, int, items, =, GLOBAL_THIS_NAMES, ., length, ;, for, (, int, i, =, 0, ;, i, <, items, ;, i]
[., getString, (, ), ;, int, items, =, GLOBAL_THIS_NAMES, ., length, ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, items, ;, i, ++, ), {, if, (, varName, .]
[., length, ;, for, (, int, i, =, 0, ;, i, <, items, ;, i, ++, ), {, if, (]
[;, i, <, items, ;, i, ++, ), {, if, (, varName, ., equals, (, GLOBAL_THIS_NAMES, [, i, ], )]
[;, i, ++, ), {, if, (, varName, ., equals, (, GLOBAL_THIS_NAMES, [, i, ], ), ), {, return, true]
[<, items, ;, i, ++, ), {, if, (, varName, ., equals, (, GLOBAL_THIS_NAMES, [, i, ], ), ), {]
[;, i, ++, ), {, if, (, varName, ., equals, (, GLOBAL_THIS_NAMES, [, i, ], ), ), {, return, true]
[), {, if, (, varName, ., equals, (, GLOBAL_THIS_NAMES, [, i, ], ), ), {, return, true, ;, }, }]
[++, ), {, if, (, varName, ., equals, (, GLOBAL_THIS_NAMES, [, i, ], ), ), {, return, true, ;, }]
[), {, return, true, ;, }, }, }, return, false, ;, }, public, Set, <, String, >, getExportedVariableNames, (, )]
[., equals, (, GLOBAL_THIS_NAMES, [, i, ], ), ), {, return, true, ;, }, }, }, return, false, ;, }]
[), ), {, return, true, ;, }, }, }, return, false, ;, }, public, Set, <, String, >, getExportedVariableNames, (]
[[, i, ], ), ), {, return, true, ;, }, }, }, return, false, ;, }, public, Set, <, String]
[], ), ), {, return, true, ;, }, }, }, return, false, ;, }, public, Set, <, String, >, getExportedVariableNames]
[;, }, }, }, return, false, ;, }, public, Set, <, String, >, getExportedVariableNames, (, ), {, return, exportedVariables, ;]
[;, }, public, Set, <, String, >, getExportedVariableNames, (, ), {, return, exportedVariables, ;, }, }]
[;, }, }]
