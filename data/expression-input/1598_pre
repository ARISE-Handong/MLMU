[., time, ., tz, ., ZoneInfoProvider, ;, public, abstract, class, DateTimeZone, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[abstract, class, DateTimeZone, implements, Serializable, {, private, static, final, long, serialVersionUID, =, 5546345482340108586L, ;, public, static, final, DateTimeZone, UTC, =]
[implements, Serializable, {, private, static, final, long, serialVersionUID, =, 5546345482340108586L, ;, public, static, final, DateTimeZone, UTC, =, new, FixedDateTimeZone, (]
[{, private, static, final, long, serialVersionUID, =, 5546345482340108586L, ;, public, static, final, DateTimeZone, UTC, =, new, FixedDateTimeZone, (, "UTC", ,]
[static, final, long, serialVersionUID, =, 5546345482340108586L, ;, public, static, final, DateTimeZone, UTC, =, new, FixedDateTimeZone, (, "UTC", ,, "UTC", ,]
[long, serialVersionUID, =, 5546345482340108586L, ;, public, static, final, DateTimeZone, UTC, =, new, FixedDateTimeZone, (, "UTC", ,, "UTC", ,, 0, ,]
[UTC, =, new, FixedDateTimeZone, (, "UTC", ,, "UTC", ,, 0, ,, 0, ), ;, private, static, final, int, MAX_MILLIS, =]
[UTC, =, new, FixedDateTimeZone, (, "UTC", ,, "UTC", ,, 0, ,, 0, ), ;, private, static, final, int, MAX_MILLIS, =]
[=, new, FixedDateTimeZone, (, "UTC", ,, "UTC", ,, 0, ,, 0, ), ;, private, static, final, int, MAX_MILLIS, =, (]
[=, new, FixedDateTimeZone, (, "UTC", ,, "UTC", ,, 0, ,, 0, ), ;, private, static, final, int, MAX_MILLIS, =, (]
[FixedDateTimeZone, (, "UTC", ,, "UTC", ,, 0, ,, 0, ), ;, private, static, final, int, MAX_MILLIS, =, (, 86400, *]
[,, "UTC", ,, 0, ,, 0, ), ;, private, static, final, int, MAX_MILLIS, =, (, 86400, *, 1000, ), -]
[,, SoftReference, <, DateTimeZone, >, >, iFixedOffsetCache, ;, private, static, Map, <, String, ,, String, >, cZoneIdConversion, ;, static, {]
[<, DateTimeZone, >, >, iFixedOffsetCache, ;, private, static, Map, <, String, ,, String, >, cZoneIdConversion, ;, static, {, setProvider0, (]
[>, iFixedOffsetCache, ;, private, static, Map, <, String, ,, String, >, cZoneIdConversion, ;, static, {, setProvider0, (, null, ), ;]
[;, private, static, Map, <, String, ,, String, >, cZoneIdConversion, ;, static, {, setProvider0, (, null, ), ;, setNameProvider0, (]
[(, null, ), ;, setNameProvider0, (, null, ), ;, }, public, static, DateTimeZone, getDefault, (, ), {, DateTimeZone, zone, =]
[setNameProvider0, (, null, ), ;, }, public, static, DateTimeZone, getDefault, (, ), {, DateTimeZone, zone, =, cDefault, ;, if, (]
[setNameProvider0, (, null, ), ;, }, public, static, DateTimeZone, getDefault, (, ), {, DateTimeZone, zone, =, cDefault, ;, if, (]
[null, ), ;, }, public, static, DateTimeZone, getDefault, (, ), {, DateTimeZone, zone, =, cDefault, ;, if, (, zone, ==]
[static, DateTimeZone, getDefault, (, ), {, DateTimeZone, zone, =, cDefault, ;, if, (, zone, ==, null, ), {, synchronized, (]
[{, DateTimeZone, zone, =, cDefault, ;, if, (, zone, ==, null, ), {, synchronized, (, DateTimeZone, ., class, ), {]
[zone, =, cDefault, ;, if, (, zone, ==, null, ), {, synchronized, (, DateTimeZone, ., class, ), {, zone, =]
[if, (, zone, ==, null, ), {, synchronized, (, DateTimeZone, ., class, ), {, zone, =, cDefault, ;, if, (]
[if, (, zone, ==, null, ), {, synchronized, (, DateTimeZone, ., class, ), {, zone, =, cDefault, ;, if, (]
[zone, ==, null, ), {, synchronized, (, DateTimeZone, ., class, ), {, zone, =, cDefault, ;, if, (, zone, ==]
[(, DateTimeZone, ., class, ), {, zone, =, cDefault, ;, if, (, zone, ==, null, ), {, DateTimeZone, temp, =]
[;, if, (, zone, ==, null, ), {, DateTimeZone, temp, =, null, ;, try, {, try, {, String, id, =]
[;, if, (, zone, ==, null, ), {, DateTimeZone, temp, =, null, ;, try, {, try, {, String, id, =]
[==, null, ), {, DateTimeZone, temp, =, null, ;, try, {, try, {, String, id, =, System, ., getProperty, (]
[temp, =, null, ;, try, {, try, {, String, id, =, System, ., getProperty, (, "user.timezone", ), ;, if, (]
[temp, =, null, ;, try, {, try, {, String, id, =, System, ., getProperty, (, "user.timezone", ), ;, if, (]
[null, ;, try, {, try, {, String, id, =, System, ., getProperty, (, "user.timezone", ), ;, if, (, id, !=]
[{, try, {, String, id, =, System, ., getProperty, (, "user.timezone", ), ;, if, (, id, !=, null, ), {]
[{, String, id, =, System, ., getProperty, (, "user.timezone", ), ;, if, (, id, !=, null, ), {, temp, =]
[id, =, System, ., getProperty, (, "user.timezone", ), ;, if, (, id, !=, null, ), {, temp, =, forID, (]
[), {, temp, =, forID, (, id, ), ;, }, }, catch, (, RuntimeException, ex, ), {, }, if, (]
[), {, temp, =, forID, (, id, ), ;, }, }, catch, (, RuntimeException, ex, ), {, }, if, (]
[temp, =, forID, (, id, ), ;, }, }, catch, (, RuntimeException, ex, ), {, }, if, (, temp, ==]
[(, id, ), ;, }, }, catch, (, RuntimeException, ex, ), {, }, if, (, temp, ==, null, ), {]
[), ;, }, }, catch, (, RuntimeException, ex, ), {, }, if, (, temp, ==, null, ), {, temp, =]
[}, }, catch, (, RuntimeException, ex, ), {, }, if, (, temp, ==, null, ), {, temp, =, forTimeZone, (]
[}, }, catch, (, RuntimeException, ex, ), {, }, if, (, temp, ==, null, ), {, temp, =, forTimeZone, (]
[forTimeZone, (, TimeZone, ., getDefault, (, ), ), ;, }, }, catch, (, IllegalArgumentException, ex, ), {, }, if, (]
[forTimeZone, (, TimeZone, ., getDefault, (, ), ), ;, }, }, catch, (, IllegalArgumentException, ex, ), {, }, if, (]
[TimeZone, ., getDefault, (, ), ), ;, }, }, catch, (, IllegalArgumentException, ex, ), {, }, if, (, temp, ==]
[(, ), ), ;, }, }, catch, (, IllegalArgumentException, ex, ), {, }, if, (, temp, ==, null, ), {]
[), ;, }, }, catch, (, IllegalArgumentException, ex, ), {, }, if, (, temp, ==, null, ), {, temp, =]
[}, catch, (, IllegalArgumentException, ex, ), {, }, if, (, temp, ==, null, ), {, temp, =, UTC, ;, }]
[(, IllegalArgumentException, ex, ), {, }, if, (, temp, ==, null, ), {, temp, =, UTC, ;, }, cDefault, =]
[ex, ), {, }, if, (, temp, ==, null, ), {, temp, =, UTC, ;, }, cDefault, =, zone, =]
[temp, ==, null, ), {, temp, =, UTC, ;, }, cDefault, =, zone, =, temp, ;, }, }, }, return]
[}, }, return, zone, ;, }, public, static, void, setDefault, (, DateTimeZone, zone, ), throws, SecurityException, {, SecurityManager, sm, =]
[}, }, return, zone, ;, }, public, static, void, setDefault, (, DateTimeZone, zone, ), throws, SecurityException, {, SecurityManager, sm, =]
[void, setDefault, (, DateTimeZone, zone, ), throws, SecurityException, {, SecurityManager, sm, =, System, ., getSecurityManager, (, ), ;, if, (]
[void, setDefault, (, DateTimeZone, zone, ), throws, SecurityException, {, SecurityManager, sm, =, System, ., getSecurityManager, (, ), ;, if, (]
[(, DateTimeZone, zone, ), throws, SecurityException, {, SecurityManager, sm, =, System, ., getSecurityManager, (, ), ;, if, (, sm, !=]
[), throws, SecurityException, {, SecurityManager, sm, =, System, ., getSecurityManager, (, ), ;, if, (, sm, !=, null, ), {]
[), throws, SecurityException, {, SecurityManager, sm, =, System, ., getSecurityManager, (, ), ;, if, (, sm, !=, null, ), {]
[SecurityManager, sm, =, System, ., getSecurityManager, (, ), ;, if, (, sm, !=, null, ), {, sm, ., checkPermission, (]
[System, ., getSecurityManager, (, ), ;, if, (, sm, !=, null, ), {, sm, ., checkPermission, (, new, JodaTimePermission, (]
[(, sm, !=, null, ), {, sm, ., checkPermission, (, new, JodaTimePermission, (, "DateTimeZone.setDefault", ), ), ;, }, if, (]
[(, sm, !=, null, ), {, sm, ., checkPermission, (, new, JodaTimePermission, (, "DateTimeZone.setDefault", ), ), ;, }, if, (]
[!=, null, ), {, sm, ., checkPermission, (, new, JodaTimePermission, (, "DateTimeZone.setDefault", ), ), ;, }, if, (, zone, ==]
[sm, ., checkPermission, (, new, JodaTimePermission, (, "DateTimeZone.setDefault", ), ), ;, }, if, (, zone, ==, null, ), {, throw]
[(, new, JodaTimePermission, (, "DateTimeZone.setDefault", ), ), ;, }, if, (, zone, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), ;, }, if, (, zone, ==, null, ), {, throw, new, IllegalArgumentException, (, "The datetime zone must not be null", ), ;, }, synchronized, (]
[zone, ==, null, ), {, throw, new, IllegalArgumentException, (, "The datetime zone must not be null", ), ;, }, synchronized, (, DateTimeZone, ., class, ), {]
[null, ), {, throw, new, IllegalArgumentException, (, "The datetime zone must not be null", ), ;, }, synchronized, (, DateTimeZone, ., class, ), {, cDefault, =]
[{, cDefault, =, zone, ;, }, }, @, FromString, public, static, DateTimeZone, forID, (, String, id, ), {, if, (]
[{, cDefault, =, zone, ;, }, }, @, FromString, public, static, DateTimeZone, forID, (, String, id, ), {, if, (]
[=, zone, ;, }, }, @, FromString, public, static, DateTimeZone, forID, (, String, id, ), {, if, (, id, ==]
[}, @, FromString, public, static, DateTimeZone, forID, (, String, id, ), {, if, (, id, ==, null, ), {, return]
[(, String, id, ), {, if, (, id, ==, null, ), {, return, getDefault, (, ), ;, }, if, (]
[(, String, id, ), {, if, (, id, ==, null, ), {, return, getDefault, (, ), ;, }, if, (]
[{, if, (, id, ==, null, ), {, return, getDefault, (, ), ;, }, if, (, id, ., equals, (]
[null, ), {, return, getDefault, (, ), ;, }, if, (, id, ., equals, (, "UTC", ), ), {, return]
[null, ), {, return, getDefault, (, ), ;, }, if, (, id, ., equals, (, "UTC", ), ), {, return]
[}, if, (, id, ., equals, (, "UTC", ), ), {, return, DateTimeZone, ., UTC, ;, }, DateTimeZone, zone, =]
[}, if, (, id, ., equals, (, "UTC", ), ), {, return, DateTimeZone, ., UTC, ;, }, DateTimeZone, zone, =]
[., equals, (, "UTC", ), ), {, return, DateTimeZone, ., UTC, ;, }, DateTimeZone, zone, =, cProvider, ., getZone, (]
[), {, return, DateTimeZone, ., UTC, ;, }, DateTimeZone, zone, =, cProvider, ., getZone, (, id, ), ;, if, (]
[), {, return, DateTimeZone, ., UTC, ;, }, DateTimeZone, zone, =, cProvider, ., getZone, (, id, ), ;, if, (]
[return, DateTimeZone, ., UTC, ;, }, DateTimeZone, zone, =, cProvider, ., getZone, (, id, ), ;, if, (, zone, !=]
[;, }, DateTimeZone, zone, =, cProvider, ., getZone, (, id, ), ;, if, (, zone, !=, null, ), {, return]
[cProvider, ., getZone, (, id, ), ;, if, (, zone, !=, null, ), {, return, zone, ;, }, if, (]
[cProvider, ., getZone, (, id, ), ;, if, (, zone, !=, null, ), {, return, zone, ;, }, if, (]
[cProvider, ., getZone, (, id, ), ;, if, (, zone, !=, null, ), {, return, zone, ;, }, if, (]
[id, ), ;, if, (, zone, !=, null, ), {, return, zone, ;, }, if, (, id, ., startsWith, (]
[if, (, zone, !=, null, ), {, return, zone, ;, }, if, (, id, ., startsWith, (, "+", ), ||]
[if, (, zone, !=, null, ), {, return, zone, ;, }, if, (, id, ., startsWith, (, "+", ), ||]
[null, ), {, return, zone, ;, }, if, (, id, ., startsWith, (, "+", ), ||, id, ., startsWith, (]
[if, (, id, ., startsWith, (, "+", ), ||, id, ., startsWith, (, "-", ), ), {, int, offset, =]
[id, ., startsWith, (, "+", ), ||, id, ., startsWith, (, "-", ), ), {, int, offset, =, parseOffset, (]
[), ||, id, ., startsWith, (, "-", ), ), {, int, offset, =, parseOffset, (, id, ), ;, if, (]
[), ||, id, ., startsWith, (, "-", ), ), {, int, offset, =, parseOffset, (, id, ), ;, if, (]
[id, ., startsWith, (, "-", ), ), {, int, offset, =, parseOffset, (, id, ), ;, if, (, offset, ==]
["-", ), ), {, int, offset, =, parseOffset, (, id, ), ;, if, (, offset, ==, 0L, ), {, return]
["-", ), ), {, int, offset, =, parseOffset, (, id, ), ;, if, (, offset, ==, 0L, ), {, return]
[parseOffset, (, id, ), ;, if, (, offset, ==, 0L, ), {, return, DateTimeZone, ., UTC, ;, }, else, {]
[id, ), ;, if, (, offset, ==, 0L, ), {, return, DateTimeZone, ., UTC, ;, }, else, {, id, =]
[;, if, (, offset, ==, 0L, ), {, return, DateTimeZone, ., UTC, ;, }, else, {, id, =, printOffset, (]
[==, 0L, ), {, return, DateTimeZone, ., UTC, ;, }, else, {, id, =, printOffset, (, offset, ), ;, return]
[), {, return, DateTimeZone, ., UTC, ;, }, else, {, id, =, printOffset, (, offset, ), ;, return, fixedOffsetZone, (]
[return, DateTimeZone, ., UTC, ;, }, else, {, id, =, printOffset, (, offset, ), ;, return, fixedOffsetZone, (, id, ,]
[else, {, id, =, printOffset, (, offset, ), ;, return, fixedOffsetZone, (, id, ,, offset, ), ;, }, }, throw]
[=, printOffset, (, offset, ), ;, return, fixedOffsetZone, (, id, ,, offset, ), ;, }, }, throw, new, IllegalArgumentException, (]
[=, printOffset, (, offset, ), ;, return, fixedOffsetZone, (, id, ,, offset, ), ;, }, }, throw, new, IllegalArgumentException, (]
[=, printOffset, (, offset, ), ;, return, fixedOffsetZone, (, id, ,, offset, ), ;, }, }, throw, new, IllegalArgumentException, (]
[(, offset, ), ;, return, fixedOffsetZone, (, id, ,, offset, ), ;, }, }, throw, new, IllegalArgumentException, (, "The datetime zone id '", +]
[), ;, return, fixedOffsetZone, (, id, ,, offset, ), ;, }, }, throw, new, IllegalArgumentException, (, "The datetime zone id '", +, id, +]
["The datetime zone id '", +, id, +, "' is not recognised", ), ;, }, public, static, DateTimeZone, forOffsetHours, (, int, hoursOffset, ), throws, IllegalArgumentException, {, return]
[id, +, "' is not recognised", ), ;, }, public, static, DateTimeZone, forOffsetHours, (, int, hoursOffset, ), throws, IllegalArgumentException, {, return, forOffsetHoursMinutes, (]
["' is not recognised", ), ;, }, public, static, DateTimeZone, forOffsetHours, (, int, hoursOffset, ), throws, IllegalArgumentException, {, return, forOffsetHoursMinutes, (, hoursOffset, ,]
[0, ), ;, }, public, static, DateTimeZone, forOffsetHoursMinutes, (, int, hoursOffset, ,, int, minutesOffset, ), throws, IllegalArgumentException, {, if, (]
[0, ), ;, }, public, static, DateTimeZone, forOffsetHoursMinutes, (, int, hoursOffset, ,, int, minutesOffset, ), throws, IllegalArgumentException, {, if, (]
[0, ), ;, }, public, static, DateTimeZone, forOffsetHoursMinutes, (, int, hoursOffset, ,, int, minutesOffset, ), throws, IllegalArgumentException, {, if, (]
[;, }, public, static, DateTimeZone, forOffsetHoursMinutes, (, int, hoursOffset, ,, int, minutesOffset, ), throws, IllegalArgumentException, {, if, (, hoursOffset, ==]
[public, static, DateTimeZone, forOffsetHoursMinutes, (, int, hoursOffset, ,, int, minutesOffset, ), throws, IllegalArgumentException, {, if, (, hoursOffset, ==, 0, &&]
[public, static, DateTimeZone, forOffsetHoursMinutes, (, int, hoursOffset, ,, int, minutesOffset, ), throws, IllegalArgumentException, {, if, (, hoursOffset, ==, 0, &&]
[DateTimeZone, forOffsetHoursMinutes, (, int, hoursOffset, ,, int, minutesOffset, ), throws, IllegalArgumentException, {, if, (, hoursOffset, ==, 0, &&, minutesOffset, ==]
[hoursOffset, ,, int, minutesOffset, ), throws, IllegalArgumentException, {, if, (, hoursOffset, ==, 0, &&, minutesOffset, ==, 0, ), {, return]
[hoursOffset, ,, int, minutesOffset, ), throws, IllegalArgumentException, {, if, (, hoursOffset, ==, 0, &&, minutesOffset, ==, 0, ), {, return]
[{, if, (, hoursOffset, ==, 0, &&, minutesOffset, ==, 0, ), {, return, DateTimeZone, ., UTC, ;, }, if, (]
[{, if, (, hoursOffset, ==, 0, &&, minutesOffset, ==, 0, ), {, return, DateTimeZone, ., UTC, ;, }, if, (]
[{, if, (, hoursOffset, ==, 0, &&, minutesOffset, ==, 0, ), {, return, DateTimeZone, ., UTC, ;, }, if, (]
[(, hoursOffset, ==, 0, &&, minutesOffset, ==, 0, ), {, return, DateTimeZone, ., UTC, ;, }, if, (, hoursOffset, <]
[hoursOffset, ==, 0, &&, minutesOffset, ==, 0, ), {, return, DateTimeZone, ., UTC, ;, }, if, (, hoursOffset, <, -]
[0, &&, minutesOffset, ==, 0, ), {, return, DateTimeZone, ., UTC, ;, }, if, (, hoursOffset, <, -, 23, ||]
[0, &&, minutesOffset, ==, 0, ), {, return, DateTimeZone, ., UTC, ;, }, if, (, hoursOffset, <, -, 23, ||]
[minutesOffset, ==, 0, ), {, return, DateTimeZone, ., UTC, ;, }, if, (, hoursOffset, <, -, 23, ||, hoursOffset, >]
[{, return, DateTimeZone, ., UTC, ;, }, if, (, hoursOffset, <, -, 23, ||, hoursOffset, >, 23, ), {, throw]
[., UTC, ;, }, if, (, hoursOffset, <, -, 23, ||, hoursOffset, >, 23, ), {, throw, new, IllegalArgumentException, (]
[., UTC, ;, }, if, (, hoursOffset, <, -, 23, ||, hoursOffset, >, 23, ), {, throw, new, IllegalArgumentException, (]
[;, }, if, (, hoursOffset, <, -, 23, ||, hoursOffset, >, 23, ), {, throw, new, IllegalArgumentException, (, "Hours out of range: ", +]
[-, 23, ||, hoursOffset, >, 23, ), {, throw, new, IllegalArgumentException, (, "Hours out of range: ", +, hoursOffset, ), ;, }, if, (]
[-, 23, ||, hoursOffset, >, 23, ), {, throw, new, IllegalArgumentException, (, "Hours out of range: ", +, hoursOffset, ), ;, }, if, (]
[-, 23, ||, hoursOffset, >, 23, ), {, throw, new, IllegalArgumentException, (, "Hours out of range: ", +, hoursOffset, ), ;, }, if, (]
[||, hoursOffset, >, 23, ), {, throw, new, IllegalArgumentException, (, "Hours out of range: ", +, hoursOffset, ), ;, }, if, (, minutesOffset, <]
[hoursOffset, >, 23, ), {, throw, new, IllegalArgumentException, (, "Hours out of range: ", +, hoursOffset, ), ;, }, if, (, minutesOffset, <, -]
[23, ), {, throw, new, IllegalArgumentException, (, "Hours out of range: ", +, hoursOffset, ), ;, }, if, (, minutesOffset, <, -, 59, ||]
[23, ), {, throw, new, IllegalArgumentException, (, "Hours out of range: ", +, hoursOffset, ), ;, }, if, (, minutesOffset, <, -, 59, ||]
[{, throw, new, IllegalArgumentException, (, "Hours out of range: ", +, hoursOffset, ), ;, }, if, (, minutesOffset, <, -, 59, ||, minutesOffset, >]
[(, "Hours out of range: ", +, hoursOffset, ), ;, }, if, (, minutesOffset, <, -, 59, ||, minutesOffset, >, 59, ), {, throw]
[hoursOffset, ), ;, }, if, (, minutesOffset, <, -, 59, ||, minutesOffset, >, 59, ), {, throw, new, IllegalArgumentException, (]
[hoursOffset, ), ;, }, if, (, minutesOffset, <, -, 59, ||, minutesOffset, >, 59, ), {, throw, new, IllegalArgumentException, (]
[;, }, if, (, minutesOffset, <, -, 59, ||, minutesOffset, >, 59, ), {, throw, new, IllegalArgumentException, (, "Minutes out of range: ", +]
[-, 59, ||, minutesOffset, >, 59, ), {, throw, new, IllegalArgumentException, (, "Minutes out of range: ", +, minutesOffset, ), ;, }, if, (]
[-, 59, ||, minutesOffset, >, 59, ), {, throw, new, IllegalArgumentException, (, "Minutes out of range: ", +, minutesOffset, ), ;, }, if, (]
[-, 59, ||, minutesOffset, >, 59, ), {, throw, new, IllegalArgumentException, (, "Minutes out of range: ", +, minutesOffset, ), ;, }, if, (]
[||, minutesOffset, >, 59, ), {, throw, new, IllegalArgumentException, (, "Minutes out of range: ", +, minutesOffset, ), ;, }, if, (, hoursOffset, >]
[>, 59, ), {, throw, new, IllegalArgumentException, (, "Minutes out of range: ", +, minutesOffset, ), ;, }, if, (, hoursOffset, >, 0, &&]
[>, 59, ), {, throw, new, IllegalArgumentException, (, "Minutes out of range: ", +, minutesOffset, ), ;, }, if, (, hoursOffset, >, 0, &&]
[), {, throw, new, IllegalArgumentException, (, "Minutes out of range: ", +, minutesOffset, ), ;, }, if, (, hoursOffset, >, 0, &&, minutesOffset, <]
[IllegalArgumentException, (, "Minutes out of range: ", +, minutesOffset, ), ;, }, if, (, hoursOffset, >, 0, &&, minutesOffset, <, 0, ), {, throw]
[+, minutesOffset, ), ;, }, if, (, hoursOffset, >, 0, &&, minutesOffset, <, 0, ), {, throw, new, IllegalArgumentException, (]
[+, minutesOffset, ), ;, }, if, (, hoursOffset, >, 0, &&, minutesOffset, <, 0, ), {, throw, new, IllegalArgumentException, (]
[), ;, }, if, (, hoursOffset, >, 0, &&, minutesOffset, <, 0, ), {, throw, new, IllegalArgumentException, (, "Positive hours must not have negative minutes: ", +]
[0, &&, minutesOffset, <, 0, ), {, throw, new, IllegalArgumentException, (, "Positive hours must not have negative minutes: ", +, minutesOffset, ), ;, }, int, offset, =]
[throw, new, IllegalArgumentException, (, "Positive hours must not have negative minutes: ", +, minutesOffset, ), ;, }, int, offset, =, 0, ;, try, {, int, hoursInMinutes, =]
[throw, new, IllegalArgumentException, (, "Positive hours must not have negative minutes: ", +, minutesOffset, ), ;, }, int, offset, =, 0, ;, try, {, int, hoursInMinutes, =]
[IllegalArgumentException, (, "Positive hours must not have negative minutes: ", +, minutesOffset, ), ;, }, int, offset, =, 0, ;, try, {, int, hoursInMinutes, =, hoursOffset, *]
[minutesOffset, ), ;, }, int, offset, =, 0, ;, try, {, int, hoursInMinutes, =, hoursOffset, *, 60, ;, if, (]
[minutesOffset, ), ;, }, int, offset, =, 0, ;, try, {, int, hoursInMinutes, =, hoursOffset, *, 60, ;, if, (]
[;, }, int, offset, =, 0, ;, try, {, int, hoursInMinutes, =, hoursOffset, *, 60, ;, if, (, hoursInMinutes, <]
[offset, =, 0, ;, try, {, int, hoursInMinutes, =, hoursOffset, *, 60, ;, if, (, hoursInMinutes, <, 0, ), {]
[0, ;, try, {, int, hoursInMinutes, =, hoursOffset, *, 60, ;, if, (, hoursInMinutes, <, 0, ), {, minutesOffset, =]
[0, ;, try, {, int, hoursInMinutes, =, hoursOffset, *, 60, ;, if, (, hoursInMinutes, <, 0, ), {, minutesOffset, =]
[try, {, int, hoursInMinutes, =, hoursOffset, *, 60, ;, if, (, hoursInMinutes, <, 0, ), {, minutesOffset, =, hoursInMinutes, -]
[try, {, int, hoursInMinutes, =, hoursOffset, *, 60, ;, if, (, hoursInMinutes, <, 0, ), {, minutesOffset, =, hoursInMinutes, -]
[=, hoursOffset, *, 60, ;, if, (, hoursInMinutes, <, 0, ), {, minutesOffset, =, hoursInMinutes, -, Math, ., abs, (]
[(, hoursInMinutes, <, 0, ), {, minutesOffset, =, hoursInMinutes, -, Math, ., abs, (, minutesOffset, ), ;, }, else, {]
[<, 0, ), {, minutesOffset, =, hoursInMinutes, -, Math, ., abs, (, minutesOffset, ), ;, }, else, {, minutesOffset, =]
[<, 0, ), {, minutesOffset, =, hoursInMinutes, -, Math, ., abs, (, minutesOffset, ), ;, }, else, {, minutesOffset, =]
[), {, minutesOffset, =, hoursInMinutes, -, Math, ., abs, (, minutesOffset, ), ;, }, else, {, minutesOffset, =, hoursInMinutes, +]
[=, hoursInMinutes, -, Math, ., abs, (, minutesOffset, ), ;, }, else, {, minutesOffset, =, hoursInMinutes, +, minutesOffset, ;, }]
[-, Math, ., abs, (, minutesOffset, ), ;, }, else, {, minutesOffset, =, hoursInMinutes, +, minutesOffset, ;, }, offset, =]
[-, Math, ., abs, (, minutesOffset, ), ;, }, else, {, minutesOffset, =, hoursInMinutes, +, minutesOffset, ;, }, offset, =]
[(, minutesOffset, ), ;, }, else, {, minutesOffset, =, hoursInMinutes, +, minutesOffset, ;, }, offset, =, FieldUtils, ., safeMultiply, (]
[), ;, }, else, {, minutesOffset, =, hoursInMinutes, +, minutesOffset, ;, }, offset, =, FieldUtils, ., safeMultiply, (, minutesOffset, ,]
[), ;, }, else, {, minutesOffset, =, hoursInMinutes, +, minutesOffset, ;, }, offset, =, FieldUtils, ., safeMultiply, (, minutesOffset, ,]
[=, FieldUtils, ., safeMultiply, (, minutesOffset, ,, DateTimeConstants, ., MILLIS_PER_MINUTE, ), ;, }, catch, (, ArithmeticException, ex, ), {, throw]
[safeMultiply, (, minutesOffset, ,, DateTimeConstants, ., MILLIS_PER_MINUTE, ), ;, }, catch, (, ArithmeticException, ex, ), {, throw, new, IllegalArgumentException, (]
[., MILLIS_PER_MINUTE, ), ;, }, catch, (, ArithmeticException, ex, ), {, throw, new, IllegalArgumentException, (, "Offset is too large", ), ;, }, return]
[), ;, }, catch, (, ArithmeticException, ex, ), {, throw, new, IllegalArgumentException, (, "Offset is too large", ), ;, }, return, forOffsetMillis, (]
[;, }, return, forOffsetMillis, (, offset, ), ;, }, public, static, DateTimeZone, forOffsetMillis, (, int, millisOffset, ), {, if, (]
[;, }, return, forOffsetMillis, (, offset, ), ;, }, public, static, DateTimeZone, forOffsetMillis, (, int, millisOffset, ), {, if, (]
[;, }, return, forOffsetMillis, (, offset, ), ;, }, public, static, DateTimeZone, forOffsetMillis, (, int, millisOffset, ), {, if, (]
[return, forOffsetMillis, (, offset, ), ;, }, public, static, DateTimeZone, forOffsetMillis, (, int, millisOffset, ), {, if, (, millisOffset, <]
[forOffsetMillis, (, offset, ), ;, }, public, static, DateTimeZone, forOffsetMillis, (, int, millisOffset, ), {, if, (, millisOffset, <, -]
[offset, ), ;, }, public, static, DateTimeZone, forOffsetMillis, (, int, millisOffset, ), {, if, (, millisOffset, <, -, MAX_MILLIS, ||]
[offset, ), ;, }, public, static, DateTimeZone, forOffsetMillis, (, int, millisOffset, ), {, if, (, millisOffset, <, -, MAX_MILLIS, ||]
[;, }, public, static, DateTimeZone, forOffsetMillis, (, int, millisOffset, ), {, if, (, millisOffset, <, -, MAX_MILLIS, ||, millisOffset, >]
[DateTimeZone, forOffsetMillis, (, int, millisOffset, ), {, if, (, millisOffset, <, -, MAX_MILLIS, ||, millisOffset, >, MAX_MILLIS, ), {, throw]
[int, millisOffset, ), {, if, (, millisOffset, <, -, MAX_MILLIS, ||, millisOffset, >, MAX_MILLIS, ), {, throw, new, IllegalArgumentException, (]
[int, millisOffset, ), {, if, (, millisOffset, <, -, MAX_MILLIS, ||, millisOffset, >, MAX_MILLIS, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, millisOffset, <, -, MAX_MILLIS, ||, millisOffset, >, MAX_MILLIS, ), {, throw, new, IllegalArgumentException, (, "Millis out of range: ", +]
[MAX_MILLIS, ||, millisOffset, >, MAX_MILLIS, ), {, throw, new, IllegalArgumentException, (, "Millis out of range: ", +, millisOffset, ), ;, }, String, id, =]
[millisOffset, >, MAX_MILLIS, ), {, throw, new, IllegalArgumentException, (, "Millis out of range: ", +, millisOffset, ), ;, }, String, id, =, printOffset, (]
[{, throw, new, IllegalArgumentException, (, "Millis out of range: ", +, millisOffset, ), ;, }, String, id, =, printOffset, (, millisOffset, ), ;, return]
[new, IllegalArgumentException, (, "Millis out of range: ", +, millisOffset, ), ;, }, String, id, =, printOffset, (, millisOffset, ), ;, return, fixedOffsetZone, (]
[(, "Millis out of range: ", +, millisOffset, ), ;, }, String, id, =, printOffset, (, millisOffset, ), ;, return, fixedOffsetZone, (, id, ,]
[return, fixedOffsetZone, (, id, ,, millisOffset, ), ;, }, public, static, DateTimeZone, forTimeZone, (, TimeZone, zone, ), {, if, (]
[return, fixedOffsetZone, (, id, ,, millisOffset, ), ;, }, public, static, DateTimeZone, forTimeZone, (, TimeZone, zone, ), {, if, (]
[(, id, ,, millisOffset, ), ;, }, public, static, DateTimeZone, forTimeZone, (, TimeZone, zone, ), {, if, (, zone, ==]
[), ;, }, public, static, DateTimeZone, forTimeZone, (, TimeZone, zone, ), {, if, (, zone, ==, null, ), {, return]
[zone, ), {, if, (, zone, ==, null, ), {, return, getDefault, (, ), ;, }, final, String, id, =]
[zone, ), {, if, (, zone, ==, null, ), {, return, getDefault, (, ), ;, }, final, String, id, =]
[), {, return, getDefault, (, ), ;, }, final, String, id, =, zone, ., getID, (, ), ;, if, (]
[), {, return, getDefault, (, ), ;, }, final, String, id, =, zone, ., getID, (, ), ;, if, (]
[(, ), ;, }, final, String, id, =, zone, ., getID, (, ), ;, if, (, id, ., equals, (]
[String, id, =, zone, ., getID, (, ), ;, if, (, id, ., equals, (, "UTC", ), ), {, return]
[String, id, =, zone, ., getID, (, ), ;, if, (, id, ., equals, (, "UTC", ), ), {, return]
[;, if, (, id, ., equals, (, "UTC", ), ), {, return, DateTimeZone, ., UTC, ;, }, DateTimeZone, dtz, =]
[equals, (, "UTC", ), ), {, return, DateTimeZone, ., UTC, ;, }, DateTimeZone, dtz, =, null, ;, String, convId, =]
["UTC", ), ), {, return, DateTimeZone, ., UTC, ;, }, DateTimeZone, dtz, =, null, ;, String, convId, =, getConvertedId, (]
[DateTimeZone, ., UTC, ;, }, DateTimeZone, dtz, =, null, ;, String, convId, =, getConvertedId, (, id, ), ;, if, (]
[DateTimeZone, ., UTC, ;, }, DateTimeZone, dtz, =, null, ;, String, convId, =, getConvertedId, (, id, ), ;, if, (]
[UTC, ;, }, DateTimeZone, dtz, =, null, ;, String, convId, =, getConvertedId, (, id, ), ;, if, (, convId, !=]
[DateTimeZone, dtz, =, null, ;, String, convId, =, getConvertedId, (, id, ), ;, if, (, convId, !=, null, ), {]
[=, null, ;, String, convId, =, getConvertedId, (, id, ), ;, if, (, convId, !=, null, ), {, dtz, =]
[=, null, ;, String, convId, =, getConvertedId, (, id, ), ;, if, (, convId, !=, null, ), {, dtz, =]
[convId, =, getConvertedId, (, id, ), ;, if, (, convId, !=, null, ), {, dtz, =, cProvider, ., getZone, (]
[;, if, (, convId, !=, null, ), {, dtz, =, cProvider, ., getZone, (, convId, ), ;, }, if, (]
[;, if, (, convId, !=, null, ), {, dtz, =, cProvider, ., getZone, (, convId, ), ;, }, if, (]
[(, convId, !=, null, ), {, dtz, =, cProvider, ., getZone, (, convId, ), ;, }, if, (, dtz, ==]
[null, ), {, dtz, =, cProvider, ., getZone, (, convId, ), ;, }, if, (, dtz, ==, null, ), {]
[{, dtz, =, cProvider, ., getZone, (, convId, ), ;, }, if, (, dtz, ==, null, ), {, dtz, =]
[{, dtz, =, cProvider, ., getZone, (, convId, ), ;, }, if, (, dtz, ==, null, ), {, dtz, =]
[., getZone, (, convId, ), ;, }, if, (, dtz, ==, null, ), {, dtz, =, cProvider, ., getZone, (]
[}, if, (, dtz, ==, null, ), {, dtz, =, cProvider, ., getZone, (, id, ), ;, }, if, (]
[}, if, (, dtz, ==, null, ), {, dtz, =, cProvider, ., getZone, (, id, ), ;, }, if, (]
[(, dtz, ==, null, ), {, dtz, =, cProvider, ., getZone, (, id, ), ;, }, if, (, dtz, !=]
[), {, dtz, =, cProvider, ., getZone, (, id, ), ;, }, if, (, dtz, !=, null, ), {, return]
[., getZone, (, id, ), ;, }, if, (, dtz, !=, null, ), {, return, dtz, ;, }, if, (]
[., getZone, (, id, ), ;, }, if, (, dtz, !=, null, ), {, return, dtz, ;, }, if, (]
[(, id, ), ;, }, if, (, dtz, !=, null, ), {, return, dtz, ;, }, if, (, convId, ==]
[;, }, if, (, dtz, !=, null, ), {, return, dtz, ;, }, if, (, convId, ==, null, ), {]
[if, (, dtz, !=, null, ), {, return, dtz, ;, }, if, (, convId, ==, null, ), {, convId, =]
[if, (, dtz, !=, null, ), {, return, dtz, ;, }, if, (, convId, ==, null, ), {, convId, =]
[dtz, ;, }, if, (, convId, ==, null, ), {, convId, =, zone, ., getID, (, ), ;, if, (]
[dtz, ;, }, if, (, convId, ==, null, ), {, convId, =, zone, ., getID, (, ), ;, if, (]
[dtz, ;, }, if, (, convId, ==, null, ), {, convId, =, zone, ., getID, (, ), ;, if, (]
[(, convId, ==, null, ), {, convId, =, zone, ., getID, (, ), ;, if, (, convId, ., startsWith, (]
[null, ), {, convId, =, zone, ., getID, (, ), ;, if, (, convId, ., startsWith, (, "GMT+", ), ||]
[null, ), {, convId, =, zone, ., getID, (, ), ;, if, (, convId, ., startsWith, (, "GMT+", ), ||]
[=, zone, ., getID, (, ), ;, if, (, convId, ., startsWith, (, "GMT+", ), ||, convId, ., startsWith, (]
[(, ), ;, if, (, convId, ., startsWith, (, "GMT+", ), ||, convId, ., startsWith, (, "GMT-", ), ), {]
[;, if, (, convId, ., startsWith, (, "GMT+", ), ||, convId, ., startsWith, (, "GMT-", ), ), {, convId, =]
[;, if, (, convId, ., startsWith, (, "GMT+", ), ||, convId, ., startsWith, (, "GMT-", ), ), {, convId, =]
[., startsWith, (, "GMT+", ), ||, convId, ., startsWith, (, "GMT-", ), ), {, convId, =, convId, ., substring, (]
[convId, ., startsWith, (, "GMT-", ), ), {, convId, =, convId, ., substring, (, 3, ), ;, int, offset, =]
[startsWith, (, "GMT-", ), ), {, convId, =, convId, ., substring, (, 3, ), ;, int, offset, =, parseOffset, (]
[{, convId, =, convId, ., substring, (, 3, ), ;, int, offset, =, parseOffset, (, convId, ), ;, if, (]
[{, convId, =, convId, ., substring, (, 3, ), ;, int, offset, =, parseOffset, (, convId, ), ;, if, (]
[=, convId, ., substring, (, 3, ), ;, int, offset, =, parseOffset, (, convId, ), ;, if, (, offset, ==]
[(, 3, ), ;, int, offset, =, parseOffset, (, convId, ), ;, if, (, offset, ==, 0L, ), {, return]
[(, 3, ), ;, int, offset, =, parseOffset, (, convId, ), ;, if, (, offset, ==, 0L, ), {, return]
[parseOffset, (, convId, ), ;, if, (, offset, ==, 0L, ), {, return, DateTimeZone, ., UTC, ;, }, else, {]
[convId, ), ;, if, (, offset, ==, 0L, ), {, return, DateTimeZone, ., UTC, ;, }, else, {, convId, =]
[;, if, (, offset, ==, 0L, ), {, return, DateTimeZone, ., UTC, ;, }, else, {, convId, =, printOffset, (]
[==, 0L, ), {, return, DateTimeZone, ., UTC, ;, }, else, {, convId, =, printOffset, (, offset, ), ;, return]
[), {, return, DateTimeZone, ., UTC, ;, }, else, {, convId, =, printOffset, (, offset, ), ;, return, fixedOffsetZone, (]
[return, DateTimeZone, ., UTC, ;, }, else, {, convId, =, printOffset, (, offset, ), ;, return, fixedOffsetZone, (, convId, ,]
[{, convId, =, printOffset, (, offset, ), ;, return, fixedOffsetZone, (, convId, ,, offset, ), ;, }, }, }, throw]
[printOffset, (, offset, ), ;, return, fixedOffsetZone, (, convId, ,, offset, ), ;, }, }, }, throw, new, IllegalArgumentException, (]
[printOffset, (, offset, ), ;, return, fixedOffsetZone, (, convId, ,, offset, ), ;, }, }, }, throw, new, IllegalArgumentException, (]
[printOffset, (, offset, ), ;, return, fixedOffsetZone, (, convId, ,, offset, ), ;, }, }, }, throw, new, IllegalArgumentException, (]
[offset, ), ;, return, fixedOffsetZone, (, convId, ,, offset, ), ;, }, }, }, throw, new, IllegalArgumentException, (, "The datetime zone id '", +]
[;, return, fixedOffsetZone, (, convId, ,, offset, ), ;, }, }, }, throw, new, IllegalArgumentException, (, "The datetime zone id '", +, id, +]
[+, "' is not recognised", ), ;, }, private, static, synchronized, DateTimeZone, fixedOffsetZone, (, String, id, ,, int, offset, ), {, if, (]
[+, "' is not recognised", ), ;, }, private, static, synchronized, DateTimeZone, fixedOffsetZone, (, String, id, ,, int, offset, ), {, if, (]
[), ;, }, private, static, synchronized, DateTimeZone, fixedOffsetZone, (, String, id, ,, int, offset, ), {, if, (, offset, ==]
[static, synchronized, DateTimeZone, fixedOffsetZone, (, String, id, ,, int, offset, ), {, if, (, offset, ==, 0, ), {, return]
[static, synchronized, DateTimeZone, fixedOffsetZone, (, String, id, ,, int, offset, ), {, if, (, offset, ==, 0, ), {, return]
[,, int, offset, ), {, if, (, offset, ==, 0, ), {, return, DateTimeZone, ., UTC, ;, }, if, (]
[,, int, offset, ), {, if, (, offset, ==, 0, ), {, return, DateTimeZone, ., UTC, ;, }, if, (]
[offset, ), {, if, (, offset, ==, 0, ), {, return, DateTimeZone, ., UTC, ;, }, if, (, iFixedOffsetCache, ==]
[if, (, offset, ==, 0, ), {, return, DateTimeZone, ., UTC, ;, }, if, (, iFixedOffsetCache, ==, null, ), {]
[offset, ==, 0, ), {, return, DateTimeZone, ., UTC, ;, }, if, (, iFixedOffsetCache, ==, null, ), {, iFixedOffsetCache, =]
[String, ,, SoftReference, <, DateTimeZone, >, >, (, ), ;, }, DateTimeZone, zone, ;, Reference, <, DateTimeZone, >, ref, =]
[String, ,, SoftReference, <, DateTimeZone, >, >, (, ), ;, }, DateTimeZone, zone, ;, Reference, <, DateTimeZone, >, ref, =]
[DateTimeZone, >, >, (, ), ;, }, DateTimeZone, zone, ;, Reference, <, DateTimeZone, >, ref, =, iFixedOffsetCache, ., get, (]
[;, }, DateTimeZone, zone, ;, Reference, <, DateTimeZone, >, ref, =, iFixedOffsetCache, ., get, (, id, ), ;, if, (]
[;, }, DateTimeZone, zone, ;, Reference, <, DateTimeZone, >, ref, =, iFixedOffsetCache, ., get, (, id, ), ;, if, (]
[DateTimeZone, zone, ;, Reference, <, DateTimeZone, >, ref, =, iFixedOffsetCache, ., get, (, id, ), ;, if, (, ref, !=]
[Reference, <, DateTimeZone, >, ref, =, iFixedOffsetCache, ., get, (, id, ), ;, if, (, ref, !=, null, ), {]
[DateTimeZone, >, ref, =, iFixedOffsetCache, ., get, (, id, ), ;, if, (, ref, !=, null, ), {, zone, =]
[DateTimeZone, >, ref, =, iFixedOffsetCache, ., get, (, id, ), ;, if, (, ref, !=, null, ), {, zone, =]
[id, ), ;, if, (, ref, !=, null, ), {, zone, =, ref, ., get, (, ), ;, if, (]
[id, ), ;, if, (, ref, !=, null, ), {, zone, =, ref, ., get, (, ), ;, if, (]
[;, if, (, ref, !=, null, ), {, zone, =, ref, ., get, (, ), ;, if, (, zone, !=]
[!=, null, ), {, zone, =, ref, ., get, (, ), ;, if, (, zone, !=, null, ), {, return]
[zone, =, ref, ., get, (, ), ;, if, (, zone, !=, null, ), {, return, zone, ;, }, }]
[ref, ., get, (, ), ;, if, (, zone, !=, null, ), {, return, zone, ;, }, }, zone, =]
[(, ), ;, if, (, zone, !=, null, ), {, return, zone, ;, }, }, zone, =, new, FixedDateTimeZone, (]
[;, if, (, zone, !=, null, ), {, return, zone, ;, }, }, zone, =, new, FixedDateTimeZone, (, id, ,]
[(, zone, !=, null, ), {, return, zone, ;, }, }, zone, =, new, FixedDateTimeZone, (, id, ,, null, ,]
[!=, null, ), {, return, zone, ;, }, }, zone, =, new, FixedDateTimeZone, (, id, ,, null, ,, offset, ,]
[{, return, zone, ;, }, }, zone, =, new, FixedDateTimeZone, (, id, ,, null, ,, offset, ,, offset, ), ;]
[{, return, zone, ;, }, }, zone, =, new, FixedDateTimeZone, (, id, ,, null, ,, offset, ,, offset, ), ;]
[}, }, zone, =, new, FixedDateTimeZone, (, id, ,, null, ,, offset, ,, offset, ), ;, iFixedOffsetCache, ., put, (]
[zone, =, new, FixedDateTimeZone, (, id, ,, null, ,, offset, ,, offset, ), ;, iFixedOffsetCache, ., put, (, id, ,]
[,, null, ,, offset, ,, offset, ), ;, iFixedOffsetCache, ., put, (, id, ,, new, SoftReference, <, DateTimeZone, >, (]
[offset, ), ;, iFixedOffsetCache, ., put, (, id, ,, new, SoftReference, <, DateTimeZone, >, (, zone, ), ), ;, return]
[(, zone, ), ), ;, return, zone, ;, }, public, static, Set, <, String, >, getAvailableIDs, (, ), {, return]
[Set, <, String, >, getAvailableIDs, (, ), {, return, cAvailableIDs, ;, }, public, static, Provider, getProvider, (, ), {, return]
[), {, return, cProvider, ;, }, public, static, void, setProvider, (, Provider, provider, ), throws, SecurityException, {, SecurityManager, sm, =]
[), {, return, cProvider, ;, }, public, static, void, setProvider, (, Provider, provider, ), throws, SecurityException, {, SecurityManager, sm, =]
[void, setProvider, (, Provider, provider, ), throws, SecurityException, {, SecurityManager, sm, =, System, ., getSecurityManager, (, ), ;, if, (]
[void, setProvider, (, Provider, provider, ), throws, SecurityException, {, SecurityManager, sm, =, System, ., getSecurityManager, (, ), ;, if, (]
[(, Provider, provider, ), throws, SecurityException, {, SecurityManager, sm, =, System, ., getSecurityManager, (, ), ;, if, (, sm, !=]
[), throws, SecurityException, {, SecurityManager, sm, =, System, ., getSecurityManager, (, ), ;, if, (, sm, !=, null, ), {]
[), throws, SecurityException, {, SecurityManager, sm, =, System, ., getSecurityManager, (, ), ;, if, (, sm, !=, null, ), {]
[SecurityManager, sm, =, System, ., getSecurityManager, (, ), ;, if, (, sm, !=, null, ), {, sm, ., checkPermission, (]
[System, ., getSecurityManager, (, ), ;, if, (, sm, !=, null, ), {, sm, ., checkPermission, (, new, JodaTimePermission, (]
[;, if, (, sm, !=, null, ), {, sm, ., checkPermission, (, new, JodaTimePermission, (, "DateTimeZone.setProvider", ), ), ;, }]
[(, sm, !=, null, ), {, sm, ., checkPermission, (, new, JodaTimePermission, (, "DateTimeZone.setProvider", ), ), ;, }, setProvider0, (]
[), ;, }, setProvider0, (, provider, ), ;, }, private, static, void, setProvider0, (, Provider, provider, ), {, if, (]
[), ;, }, setProvider0, (, provider, ), ;, }, private, static, void, setProvider0, (, Provider, provider, ), {, if, (]
[}, setProvider0, (, provider, ), ;, }, private, static, void, setProvider0, (, Provider, provider, ), {, if, (, provider, ==]
[provider, ), ;, }, private, static, void, setProvider0, (, Provider, provider, ), {, if, (, provider, ==, null, ), {]
[;, }, private, static, void, setProvider0, (, Provider, provider, ), {, if, (, provider, ==, null, ), {, provider, =]
[if, (, provider, ==, null, ), {, provider, =, getDefaultProvider, (, ), ;, }, Set, <, String, >, ids, =]
[if, (, provider, ==, null, ), {, provider, =, getDefaultProvider, (, ), ;, }, Set, <, String, >, ids, =]
[=, getDefaultProvider, (, ), ;, }, Set, <, String, >, ids, =, provider, ., getAvailableIDs, (, ), ;, if, (]
[=, getDefaultProvider, (, ), ;, }, Set, <, String, >, ids, =, provider, ., getAvailableIDs, (, ), ;, if, (]
[=, getDefaultProvider, (, ), ;, }, Set, <, String, >, ids, =, provider, ., getAvailableIDs, (, ), ;, if, (]
[(, ), ;, }, Set, <, String, >, ids, =, provider, ., getAvailableIDs, (, ), ;, if, (, ids, ==]
[;, }, Set, <, String, >, ids, =, provider, ., getAvailableIDs, (, ), ;, if, (, ids, ==, null, ||]
[;, }, Set, <, String, >, ids, =, provider, ., getAvailableIDs, (, ), ;, if, (, ids, ==, null, ||]
[;, }, Set, <, String, >, ids, =, provider, ., getAvailableIDs, (, ), ;, if, (, ids, ==, null, ||]
[ids, =, provider, ., getAvailableIDs, (, ), ;, if, (, ids, ==, null, ||, ids, ., size, (, ), ==]
[getAvailableIDs, (, ), ;, if, (, ids, ==, null, ||, ids, ., size, (, ), ==, 0, ), {, throw]
[;, if, (, ids, ==, null, ||, ids, ., size, (, ), ==, 0, ), {, throw, new, IllegalArgumentException, (]
[||, ids, ., size, (, ), ==, 0, ), {, throw, new, IllegalArgumentException, (, "The provider doesn't have any available ids", ), ;, }, if, (]
[ids, ., size, (, ), ==, 0, ), {, throw, new, IllegalArgumentException, (, "The provider doesn't have any available ids", ), ;, }, if, (, !]
[ids, ., size, (, ), ==, 0, ), {, throw, new, IllegalArgumentException, (, "The provider doesn't have any available ids", ), ;, }, if, (, !]
[), ==, 0, ), {, throw, new, IllegalArgumentException, (, "The provider doesn't have any available ids", ), ;, }, if, (, !, ids, ., contains, (]
[throw, new, IllegalArgumentException, (, "The provider doesn't have any available ids", ), ;, }, if, (, !, ids, ., contains, (, "UTC", ), ), {, throw]
[(, "The provider doesn't have any available ids", ), ;, }, if, (, !, ids, ., contains, (, "UTC", ), ), {, throw, new, IllegalArgumentException, (]
[(, !, ids, ., contains, (, "UTC", ), ), {, throw, new, IllegalArgumentException, (, "The provider doesn't support UTC", ), ;, }, if, (]
[!, ids, ., contains, (, "UTC", ), ), {, throw, new, IllegalArgumentException, (, "The provider doesn't support UTC", ), ;, }, if, (, !]
[!, ids, ., contains, (, "UTC", ), ), {, throw, new, IllegalArgumentException, (, "The provider doesn't support UTC", ), ;, }, if, (, !]
[(, "UTC", ), ), {, throw, new, IllegalArgumentException, (, "The provider doesn't support UTC", ), ;, }, if, (, !, UTC, ., equals, (]
[(, "UTC", ), ), {, throw, new, IllegalArgumentException, (, "The provider doesn't support UTC", ), ;, }, if, (, !, UTC, ., equals, (]
[{, throw, new, IllegalArgumentException, (, "The provider doesn't support UTC", ), ;, }, if, (, !, UTC, ., equals, (, provider, ., getZone, (]
[), ;, }, if, (, !, UTC, ., equals, (, provider, ., getZone, (, "UTC", ), ), ), {, throw]
[if, (, !, UTC, ., equals, (, provider, ., getZone, (, "UTC", ), ), ), {, throw, new, IllegalArgumentException, (]
[., equals, (, provider, ., getZone, (, "UTC", ), ), ), {, throw, new, IllegalArgumentException, (, "Invalid UTC zone provided", ), ;, }]
[(, provider, ., getZone, (, "UTC", ), ), ), {, throw, new, IllegalArgumentException, (, "Invalid UTC zone provided", ), ;, }, cProvider, =]
[., getZone, (, "UTC", ), ), ), {, throw, new, IllegalArgumentException, (, "Invalid UTC zone provided", ), ;, }, cProvider, =, provider, ;]
[(, "UTC", ), ), ), {, throw, new, IllegalArgumentException, (, "Invalid UTC zone provided", ), ;, }, cProvider, =, provider, ;, cAvailableIDs, =]
[}, cProvider, =, provider, ;, cAvailableIDs, =, ids, ;, }, private, static, Provider, getDefaultProvider, (, ), {, Provider, provider, =]
[ids, ;, }, private, static, Provider, getDefaultProvider, (, ), {, Provider, provider, =, null, ;, try, {, String, providerClass, =]
[ids, ;, }, private, static, Provider, getDefaultProvider, (, ), {, Provider, provider, =, null, ;, try, {, String, providerClass, =]
[static, Provider, getDefaultProvider, (, ), {, Provider, provider, =, null, ;, try, {, String, providerClass, =, System, ., getProperty, (]
[{, Provider, provider, =, null, ;, try, {, String, providerClass, =, System, ., getProperty, (, "org.joda.time.DateTimeZone.Provider", ), ;, if, (]
[{, Provider, provider, =, null, ;, try, {, String, providerClass, =, System, ., getProperty, (, "org.joda.time.DateTimeZone.Provider", ), ;, if, (]
[provider, =, null, ;, try, {, String, providerClass, =, System, ., getProperty, (, "org.joda.time.DateTimeZone.Provider", ), ;, if, (, providerClass, !=]
[{, String, providerClass, =, System, ., getProperty, (, "org.joda.time.DateTimeZone.Provider", ), ;, if, (, providerClass, !=, null, ), {, try, {]
[providerClass, =, System, ., getProperty, (, "org.joda.time.DateTimeZone.Provider", ), ;, if, (, providerClass, !=, null, ), {, try, {, provider, =]
[., getProperty, (, "org.joda.time.DateTimeZone.Provider", ), ;, if, (, providerClass, !=, null, ), {, try, {, provider, =, (, Provider, )]
[., getProperty, (, "org.joda.time.DateTimeZone.Provider", ), ;, if, (, providerClass, !=, null, ), {, try, {, provider, =, (, Provider, )]
[., getProperty, (, "org.joda.time.DateTimeZone.Provider", ), ;, if, (, providerClass, !=, null, ), {, try, {, provider, =, (, Provider, )]
[), ;, if, (, providerClass, !=, null, ), {, try, {, provider, =, (, Provider, ), Class, ., forName, (]
[), Class, ., forName, (, providerClass, ), ., newInstance, (, ), ;, }, catch, (, Exception, ex, ), {, throw]
[forName, (, providerClass, ), ., newInstance, (, ), ;, }, catch, (, Exception, ex, ), {, throw, new, RuntimeException, (]
[{, throw, new, RuntimeException, (, ex, ), ;, }, }, }, catch, (, SecurityException, ex, ), {, }, if, (]
[{, throw, new, RuntimeException, (, ex, ), ;, }, }, }, catch, (, SecurityException, ex, ), {, }, if, (]
[new, RuntimeException, (, ex, ), ;, }, }, }, catch, (, SecurityException, ex, ), {, }, if, (, provider, ==]
[;, }, }, }, catch, (, SecurityException, ex, ), {, }, if, (, provider, ==, null, ), {, try, {]
[}, }, catch, (, SecurityException, ex, ), {, }, if, (, provider, ==, null, ), {, try, {, provider, =]
[(, SecurityException, ex, ), {, }, if, (, provider, ==, null, ), {, try, {, provider, =, new, ZoneInfoProvider, (]
[null, ), {, try, {, provider, =, new, ZoneInfoProvider, (, "org/joda/time/tz/data", ), ;, }, catch, (, Exception, ex, ), {]
[null, ), {, try, {, provider, =, new, ZoneInfoProvider, (, "org/joda/time/tz/data", ), ;, }, catch, (, Exception, ex, ), {]
["org/joda/time/tz/data", ), ;, }, catch, (, Exception, ex, ), {, ex, ., printStackTrace, (, ), ;, }, }, if, (]
["org/joda/time/tz/data", ), ;, }, catch, (, Exception, ex, ), {, ex, ., printStackTrace, (, ), ;, }, }, if, (]
[;, }, catch, (, Exception, ex, ), {, ex, ., printStackTrace, (, ), ;, }, }, if, (, provider, ==]
[(, Exception, ex, ), {, ex, ., printStackTrace, (, ), ;, }, }, if, (, provider, ==, null, ), {]
[ex, ), {, ex, ., printStackTrace, (, ), ;, }, }, if, (, provider, ==, null, ), {, provider, =]
[), ;, }, }, if, (, provider, ==, null, ), {, provider, =, new, UTCProvider, (, ), ;, }, return]
[provider, =, new, UTCProvider, (, ), ;, }, return, provider, ;, }, public, static, NameProvider, getNameProvider, (, ), {, return]
[), {, return, cNameProvider, ;, }, public, static, void, setNameProvider, (, NameProvider, nameProvider, ), throws, SecurityException, {, SecurityManager, sm, =]
[), {, return, cNameProvider, ;, }, public, static, void, setNameProvider, (, NameProvider, nameProvider, ), throws, SecurityException, {, SecurityManager, sm, =]
[void, setNameProvider, (, NameProvider, nameProvider, ), throws, SecurityException, {, SecurityManager, sm, =, System, ., getSecurityManager, (, ), ;, if, (]
[void, setNameProvider, (, NameProvider, nameProvider, ), throws, SecurityException, {, SecurityManager, sm, =, System, ., getSecurityManager, (, ), ;, if, (]
[(, NameProvider, nameProvider, ), throws, SecurityException, {, SecurityManager, sm, =, System, ., getSecurityManager, (, ), ;, if, (, sm, !=]
[), throws, SecurityException, {, SecurityManager, sm, =, System, ., getSecurityManager, (, ), ;, if, (, sm, !=, null, ), {]
[), throws, SecurityException, {, SecurityManager, sm, =, System, ., getSecurityManager, (, ), ;, if, (, sm, !=, null, ), {]
[SecurityManager, sm, =, System, ., getSecurityManager, (, ), ;, if, (, sm, !=, null, ), {, sm, ., checkPermission, (]
[System, ., getSecurityManager, (, ), ;, if, (, sm, !=, null, ), {, sm, ., checkPermission, (, new, JodaTimePermission, (]
[;, if, (, sm, !=, null, ), {, sm, ., checkPermission, (, new, JodaTimePermission, (, "DateTimeZone.setNameProvider", ), ), ;, }]
[(, sm, !=, null, ), {, sm, ., checkPermission, (, new, JodaTimePermission, (, "DateTimeZone.setNameProvider", ), ), ;, }, setNameProvider0, (]
[), ;, }, setNameProvider0, (, nameProvider, ), ;, }, private, static, void, setNameProvider0, (, NameProvider, nameProvider, ), {, if, (]
[), ;, }, setNameProvider0, (, nameProvider, ), ;, }, private, static, void, setNameProvider0, (, NameProvider, nameProvider, ), {, if, (]
[}, setNameProvider0, (, nameProvider, ), ;, }, private, static, void, setNameProvider0, (, NameProvider, nameProvider, ), {, if, (, nameProvider, ==]
[nameProvider, ), ;, }, private, static, void, setNameProvider0, (, NameProvider, nameProvider, ), {, if, (, nameProvider, ==, null, ), {]
[;, }, private, static, void, setNameProvider0, (, NameProvider, nameProvider, ), {, if, (, nameProvider, ==, null, ), {, nameProvider, =]
[setNameProvider0, (, NameProvider, nameProvider, ), {, if, (, nameProvider, ==, null, ), {, nameProvider, =, getDefaultNameProvider, (, ), ;, }]
[NameProvider, nameProvider, ), {, if, (, nameProvider, ==, null, ), {, nameProvider, =, getDefaultNameProvider, (, ), ;, }, cNameProvider, =]
[getDefaultNameProvider, (, ), ;, }, cNameProvider, =, nameProvider, ;, }, private, static, NameProvider, getDefaultNameProvider, (, ), {, NameProvider, nameProvider, =]
[nameProvider, ;, }, private, static, NameProvider, getDefaultNameProvider, (, ), {, NameProvider, nameProvider, =, null, ;, try, {, String, providerClass, =]
[nameProvider, ;, }, private, static, NameProvider, getDefaultNameProvider, (, ), {, NameProvider, nameProvider, =, null, ;, try, {, String, providerClass, =]
[static, NameProvider, getDefaultNameProvider, (, ), {, NameProvider, nameProvider, =, null, ;, try, {, String, providerClass, =, System, ., getProperty, (]
[{, NameProvider, nameProvider, =, null, ;, try, {, String, providerClass, =, System, ., getProperty, (, "org.joda.time.DateTimeZone.NameProvider", ), ;, if, (]
[{, NameProvider, nameProvider, =, null, ;, try, {, String, providerClass, =, System, ., getProperty, (, "org.joda.time.DateTimeZone.NameProvider", ), ;, if, (]
[nameProvider, =, null, ;, try, {, String, providerClass, =, System, ., getProperty, (, "org.joda.time.DateTimeZone.NameProvider", ), ;, if, (, providerClass, !=]
[{, String, providerClass, =, System, ., getProperty, (, "org.joda.time.DateTimeZone.NameProvider", ), ;, if, (, providerClass, !=, null, ), {, try, {]
[providerClass, =, System, ., getProperty, (, "org.joda.time.DateTimeZone.NameProvider", ), ;, if, (, providerClass, !=, null, ), {, try, {, nameProvider, =]
[., getProperty, (, "org.joda.time.DateTimeZone.NameProvider", ), ;, if, (, providerClass, !=, null, ), {, try, {, nameProvider, =, (, NameProvider, )]
[., getProperty, (, "org.joda.time.DateTimeZone.NameProvider", ), ;, if, (, providerClass, !=, null, ), {, try, {, nameProvider, =, (, NameProvider, )]
[., getProperty, (, "org.joda.time.DateTimeZone.NameProvider", ), ;, if, (, providerClass, !=, null, ), {, try, {, nameProvider, =, (, NameProvider, )]
[), ;, if, (, providerClass, !=, null, ), {, try, {, nameProvider, =, (, NameProvider, ), Class, ., forName, (]
[), Class, ., forName, (, providerClass, ), ., newInstance, (, ), ;, }, catch, (, Exception, ex, ), {, throw]
[forName, (, providerClass, ), ., newInstance, (, ), ;, }, catch, (, Exception, ex, ), {, throw, new, RuntimeException, (]
[{, throw, new, RuntimeException, (, ex, ), ;, }, }, }, catch, (, SecurityException, ex, ), {, }, if, (]
[{, throw, new, RuntimeException, (, ex, ), ;, }, }, }, catch, (, SecurityException, ex, ), {, }, if, (]
[new, RuntimeException, (, ex, ), ;, }, }, }, catch, (, SecurityException, ex, ), {, }, if, (, nameProvider, ==]
[ex, ), ;, }, }, }, catch, (, SecurityException, ex, ), {, }, if, (, nameProvider, ==, null, ), {]
[;, }, }, }, catch, (, SecurityException, ex, ), {, }, if, (, nameProvider, ==, null, ), {, nameProvider, =]
[ex, ), {, }, if, (, nameProvider, ==, null, ), {, nameProvider, =, new, DefaultNameProvider, (, ), ;, }, return]
[;, }, private, static, synchronized, String, getConvertedId, (, String, id, ), {, Map, <, String, ,, String, >, map, =]
[synchronized, String, getConvertedId, (, String, id, ), {, Map, <, String, ,, String, >, map, =, cZoneIdConversion, ;, if, (]
[synchronized, String, getConvertedId, (, String, id, ), {, Map, <, String, ,, String, >, map, =, cZoneIdConversion, ;, if, (]
[getConvertedId, (, String, id, ), {, Map, <, String, ,, String, >, map, =, cZoneIdConversion, ;, if, (, map, ==]
[id, ), {, Map, <, String, ,, String, >, map, =, cZoneIdConversion, ;, if, (, map, ==, null, ), {]
[{, Map, <, String, ,, String, >, map, =, cZoneIdConversion, ;, if, (, map, ==, null, ), {, map, =]
[;, if, (, map, ==, null, ), {, map, =, new, HashMap, <, String, ,, String, >, (, ), ;]
[;, if, (, map, ==, null, ), {, map, =, new, HashMap, <, String, ,, String, >, (, ), ;]
[==, null, ), {, map, =, new, HashMap, <, String, ,, String, >, (, ), ;, map, ., put, (]
[), {, map, =, new, HashMap, <, String, ,, String, >, (, ), ;, map, ., put, (, "GMT", ,]
[=, new, HashMap, <, String, ,, String, >, (, ), ;, map, ., put, (, "GMT", ,, "UTC", ), ;]
[=, new, HashMap, <, String, ,, String, >, (, ), ;, map, ., put, (, "GMT", ,, "UTC", ), ;]
[String, ,, String, >, (, ), ;, map, ., put, (, "GMT", ,, "UTC", ), ;, map, ., put, (]
[String, >, (, ), ;, map, ., put, (, "GMT", ,, "UTC", ), ;, map, ., put, (, "WET", ,]
[), ;, map, ., put, (, "GMT", ,, "UTC", ), ;, map, ., put, (, "WET", ,, "WET", ), ;]
[), ;, map, ., put, (, "GMT", ,, "UTC", ), ;, map, ., put, (, "WET", ,, "WET", ), ;]
[put, (, "GMT", ,, "UTC", ), ;, map, ., put, (, "WET", ,, "WET", ), ;, map, ., put, (]
["GMT", ,, "UTC", ), ;, map, ., put, (, "WET", ,, "WET", ), ;, map, ., put, (, "CET", ,]
[), ;, map, ., put, (, "WET", ,, "WET", ), ;, map, ., put, (, "CET", ,, "CET", ), ;]
[), ;, map, ., put, (, "WET", ,, "WET", ), ;, map, ., put, (, "CET", ,, "CET", ), ;]
[put, (, "WET", ,, "WET", ), ;, map, ., put, (, "CET", ,, "CET", ), ;, map, ., put, (]
["WET", ,, "WET", ), ;, map, ., put, (, "CET", ,, "CET", ), ;, map, ., put, (, "MET", ,]
[), ;, map, ., put, (, "CET", ,, "CET", ), ;, map, ., put, (, "MET", ,, "CET", ), ;]
[), ;, map, ., put, (, "CET", ,, "CET", ), ;, map, ., put, (, "MET", ,, "CET", ), ;]
[put, (, "CET", ,, "CET", ), ;, map, ., put, (, "MET", ,, "CET", ), ;, map, ., put, (]
["CET", ,, "CET", ), ;, map, ., put, (, "MET", ,, "CET", ), ;, map, ., put, (, "ECT", ,]
[), ;, map, ., put, (, "MET", ,, "CET", ), ;, map, ., put, (, "ECT", ,, "CET", ), ;]
[), ;, map, ., put, (, "MET", ,, "CET", ), ;, map, ., put, (, "ECT", ,, "CET", ), ;]
[put, (, "MET", ,, "CET", ), ;, map, ., put, (, "ECT", ,, "CET", ), ;, map, ., put, (]
["MET", ,, "CET", ), ;, map, ., put, (, "ECT", ,, "CET", ), ;, map, ., put, (, "EET", ,]
[), ;, map, ., put, (, "ECT", ,, "CET", ), ;, map, ., put, (, "EET", ,, "EET", ), ;]
[), ;, map, ., put, (, "ECT", ,, "CET", ), ;, map, ., put, (, "EET", ,, "EET", ), ;]
[put, (, "ECT", ,, "CET", ), ;, map, ., put, (, "EET", ,, "EET", ), ;, map, ., put, (]
["ECT", ,, "CET", ), ;, map, ., put, (, "EET", ,, "EET", ), ;, map, ., put, (, "MIT", ,]
[), ;, map, ., put, (, "EET", ,, "EET", ), ;, map, ., put, (, "MIT", ,, "Pacific/Apia", ), ;]
[), ;, map, ., put, (, "EET", ,, "EET", ), ;, map, ., put, (, "MIT", ,, "Pacific/Apia", ), ;]
[put, (, "EET", ,, "EET", ), ;, map, ., put, (, "MIT", ,, "Pacific/Apia", ), ;, map, ., put, (]
["EET", ,, "EET", ), ;, map, ., put, (, "MIT", ,, "Pacific/Apia", ), ;, map, ., put, (, "HST", ,]
[), ;, map, ., put, (, "MIT", ,, "Pacific/Apia", ), ;, map, ., put, (, "HST", ,, "Pacific/Honolulu", ), ;]
[), ;, map, ., put, (, "MIT", ,, "Pacific/Apia", ), ;, map, ., put, (, "HST", ,, "Pacific/Honolulu", ), ;]
[put, (, "MIT", ,, "Pacific/Apia", ), ;, map, ., put, (, "HST", ,, "Pacific/Honolulu", ), ;, map, ., put, (]
["MIT", ,, "Pacific/Apia", ), ;, map, ., put, (, "HST", ,, "Pacific/Honolulu", ), ;, map, ., put, (, "AST", ,]
[), ;, map, ., put, (, "HST", ,, "Pacific/Honolulu", ), ;, map, ., put, (, "AST", ,, "America/Anchorage", ), ;]
[), ;, map, ., put, (, "HST", ,, "Pacific/Honolulu", ), ;, map, ., put, (, "AST", ,, "America/Anchorage", ), ;]
[put, (, "HST", ,, "Pacific/Honolulu", ), ;, map, ., put, (, "AST", ,, "America/Anchorage", ), ;, map, ., put, (]
["HST", ,, "Pacific/Honolulu", ), ;, map, ., put, (, "AST", ,, "America/Anchorage", ), ;, map, ., put, (, "PST", ,]
[), ;, map, ., put, (, "AST", ,, "America/Anchorage", ), ;, map, ., put, (, "PST", ,, "America/Los_Angeles", ), ;]
[), ;, map, ., put, (, "AST", ,, "America/Anchorage", ), ;, map, ., put, (, "PST", ,, "America/Los_Angeles", ), ;]
[put, (, "AST", ,, "America/Anchorage", ), ;, map, ., put, (, "PST", ,, "America/Los_Angeles", ), ;, map, ., put, (]
["AST", ,, "America/Anchorage", ), ;, map, ., put, (, "PST", ,, "America/Los_Angeles", ), ;, map, ., put, (, "MST", ,]
[), ;, map, ., put, (, "PST", ,, "America/Los_Angeles", ), ;, map, ., put, (, "MST", ,, "America/Denver", ), ;]
[), ;, map, ., put, (, "PST", ,, "America/Los_Angeles", ), ;, map, ., put, (, "MST", ,, "America/Denver", ), ;]
[put, (, "PST", ,, "America/Los_Angeles", ), ;, map, ., put, (, "MST", ,, "America/Denver", ), ;, map, ., put, (]
["PST", ,, "America/Los_Angeles", ), ;, map, ., put, (, "MST", ,, "America/Denver", ), ;, map, ., put, (, "PNT", ,]
[), ;, map, ., put, (, "MST", ,, "America/Denver", ), ;, map, ., put, (, "PNT", ,, "America/Phoenix", ), ;]
[), ;, map, ., put, (, "MST", ,, "America/Denver", ), ;, map, ., put, (, "PNT", ,, "America/Phoenix", ), ;]
[put, (, "MST", ,, "America/Denver", ), ;, map, ., put, (, "PNT", ,, "America/Phoenix", ), ;, map, ., put, (]
["MST", ,, "America/Denver", ), ;, map, ., put, (, "PNT", ,, "America/Phoenix", ), ;, map, ., put, (, "CST", ,]
[), ;, map, ., put, (, "PNT", ,, "America/Phoenix", ), ;, map, ., put, (, "CST", ,, "America/Chicago", ), ;]
[), ;, map, ., put, (, "PNT", ,, "America/Phoenix", ), ;, map, ., put, (, "CST", ,, "America/Chicago", ), ;]
[put, (, "PNT", ,, "America/Phoenix", ), ;, map, ., put, (, "CST", ,, "America/Chicago", ), ;, map, ., put, (]
["PNT", ,, "America/Phoenix", ), ;, map, ., put, (, "CST", ,, "America/Chicago", ), ;, map, ., put, (, "EST", ,]
[), ;, map, ., put, (, "CST", ,, "America/Chicago", ), ;, map, ., put, (, "EST", ,, "America/New_York", ), ;]
[), ;, map, ., put, (, "CST", ,, "America/Chicago", ), ;, map, ., put, (, "EST", ,, "America/New_York", ), ;]
[put, (, "CST", ,, "America/Chicago", ), ;, map, ., put, (, "EST", ,, "America/New_York", ), ;, map, ., put, (]
["CST", ,, "America/Chicago", ), ;, map, ., put, (, "EST", ,, "America/New_York", ), ;, map, ., put, (, "IET", ,]
[), ;, map, ., put, (, "EST", ,, "America/New_York", ), ;, map, ., put, (, "IET", ,, "America/Indiana/Indianapolis", ), ;]
[), ;, map, ., put, (, "EST", ,, "America/New_York", ), ;, map, ., put, (, "IET", ,, "America/Indiana/Indianapolis", ), ;]
[put, (, "EST", ,, "America/New_York", ), ;, map, ., put, (, "IET", ,, "America/Indiana/Indianapolis", ), ;, map, ., put, (]
["EST", ,, "America/New_York", ), ;, map, ., put, (, "IET", ,, "America/Indiana/Indianapolis", ), ;, map, ., put, (, "PRT", ,]
[), ;, map, ., put, (, "IET", ,, "America/Indiana/Indianapolis", ), ;, map, ., put, (, "PRT", ,, "America/Puerto_Rico", ), ;]
[), ;, map, ., put, (, "IET", ,, "America/Indiana/Indianapolis", ), ;, map, ., put, (, "PRT", ,, "America/Puerto_Rico", ), ;]
[put, (, "IET", ,, "America/Indiana/Indianapolis", ), ;, map, ., put, (, "PRT", ,, "America/Puerto_Rico", ), ;, map, ., put, (]
["IET", ,, "America/Indiana/Indianapolis", ), ;, map, ., put, (, "PRT", ,, "America/Puerto_Rico", ), ;, map, ., put, (, "CNT", ,]
[), ;, map, ., put, (, "PRT", ,, "America/Puerto_Rico", ), ;, map, ., put, (, "CNT", ,, "America/St_Johns", ), ;]
[), ;, map, ., put, (, "PRT", ,, "America/Puerto_Rico", ), ;, map, ., put, (, "CNT", ,, "America/St_Johns", ), ;]
[put, (, "PRT", ,, "America/Puerto_Rico", ), ;, map, ., put, (, "CNT", ,, "America/St_Johns", ), ;, map, ., put, (]
["PRT", ,, "America/Puerto_Rico", ), ;, map, ., put, (, "CNT", ,, "America/St_Johns", ), ;, map, ., put, (, "AGT", ,]
[), ;, map, ., put, (, "CNT", ,, "America/St_Johns", ), ;, map, ., put, (, "AGT", ,, "America/Argentina/Buenos_Aires", ), ;]
[), ;, map, ., put, (, "CNT", ,, "America/St_Johns", ), ;, map, ., put, (, "AGT", ,, "America/Argentina/Buenos_Aires", ), ;]
[put, (, "CNT", ,, "America/St_Johns", ), ;, map, ., put, (, "AGT", ,, "America/Argentina/Buenos_Aires", ), ;, map, ., put, (]
["CNT", ,, "America/St_Johns", ), ;, map, ., put, (, "AGT", ,, "America/Argentina/Buenos_Aires", ), ;, map, ., put, (, "BET", ,]
[), ;, map, ., put, (, "AGT", ,, "America/Argentina/Buenos_Aires", ), ;, map, ., put, (, "BET", ,, "America/Sao_Paulo", ), ;]
[), ;, map, ., put, (, "AGT", ,, "America/Argentina/Buenos_Aires", ), ;, map, ., put, (, "BET", ,, "America/Sao_Paulo", ), ;]
[put, (, "AGT", ,, "America/Argentina/Buenos_Aires", ), ;, map, ., put, (, "BET", ,, "America/Sao_Paulo", ), ;, map, ., put, (]
["AGT", ,, "America/Argentina/Buenos_Aires", ), ;, map, ., put, (, "BET", ,, "America/Sao_Paulo", ), ;, map, ., put, (, "ART", ,]
[), ;, map, ., put, (, "BET", ,, "America/Sao_Paulo", ), ;, map, ., put, (, "ART", ,, "Africa/Cairo", ), ;]
[), ;, map, ., put, (, "BET", ,, "America/Sao_Paulo", ), ;, map, ., put, (, "ART", ,, "Africa/Cairo", ), ;]
[put, (, "BET", ,, "America/Sao_Paulo", ), ;, map, ., put, (, "ART", ,, "Africa/Cairo", ), ;, map, ., put, (]
["BET", ,, "America/Sao_Paulo", ), ;, map, ., put, (, "ART", ,, "Africa/Cairo", ), ;, map, ., put, (, "CAT", ,]
[), ;, map, ., put, (, "ART", ,, "Africa/Cairo", ), ;, map, ., put, (, "CAT", ,, "Africa/Harare", ), ;]
[), ;, map, ., put, (, "ART", ,, "Africa/Cairo", ), ;, map, ., put, (, "CAT", ,, "Africa/Harare", ), ;]
[put, (, "ART", ,, "Africa/Cairo", ), ;, map, ., put, (, "CAT", ,, "Africa/Harare", ), ;, map, ., put, (]
["ART", ,, "Africa/Cairo", ), ;, map, ., put, (, "CAT", ,, "Africa/Harare", ), ;, map, ., put, (, "EAT", ,]
[), ;, map, ., put, (, "CAT", ,, "Africa/Harare", ), ;, map, ., put, (, "EAT", ,, "Africa/Addis_Ababa", ), ;]
[), ;, map, ., put, (, "CAT", ,, "Africa/Harare", ), ;, map, ., put, (, "EAT", ,, "Africa/Addis_Ababa", ), ;]
[put, (, "CAT", ,, "Africa/Harare", ), ;, map, ., put, (, "EAT", ,, "Africa/Addis_Ababa", ), ;, map, ., put, (]
["CAT", ,, "Africa/Harare", ), ;, map, ., put, (, "EAT", ,, "Africa/Addis_Ababa", ), ;, map, ., put, (, "NET", ,]
[), ;, map, ., put, (, "EAT", ,, "Africa/Addis_Ababa", ), ;, map, ., put, (, "NET", ,, "Asia/Yerevan", ), ;]
[), ;, map, ., put, (, "EAT", ,, "Africa/Addis_Ababa", ), ;, map, ., put, (, "NET", ,, "Asia/Yerevan", ), ;]
[put, (, "EAT", ,, "Africa/Addis_Ababa", ), ;, map, ., put, (, "NET", ,, "Asia/Yerevan", ), ;, map, ., put, (]
["EAT", ,, "Africa/Addis_Ababa", ), ;, map, ., put, (, "NET", ,, "Asia/Yerevan", ), ;, map, ., put, (, "PLT", ,]
[), ;, map, ., put, (, "NET", ,, "Asia/Yerevan", ), ;, map, ., put, (, "PLT", ,, "Asia/Karachi", ), ;]
[), ;, map, ., put, (, "NET", ,, "Asia/Yerevan", ), ;, map, ., put, (, "PLT", ,, "Asia/Karachi", ), ;]
[put, (, "NET", ,, "Asia/Yerevan", ), ;, map, ., put, (, "PLT", ,, "Asia/Karachi", ), ;, map, ., put, (]
["NET", ,, "Asia/Yerevan", ), ;, map, ., put, (, "PLT", ,, "Asia/Karachi", ), ;, map, ., put, (, "IST", ,]
[), ;, map, ., put, (, "PLT", ,, "Asia/Karachi", ), ;, map, ., put, (, "IST", ,, "Asia/Kolkata", ), ;]
[), ;, map, ., put, (, "PLT", ,, "Asia/Karachi", ), ;, map, ., put, (, "IST", ,, "Asia/Kolkata", ), ;]
[put, (, "PLT", ,, "Asia/Karachi", ), ;, map, ., put, (, "IST", ,, "Asia/Kolkata", ), ;, map, ., put, (]
["PLT", ,, "Asia/Karachi", ), ;, map, ., put, (, "IST", ,, "Asia/Kolkata", ), ;, map, ., put, (, "BST", ,]
[), ;, map, ., put, (, "IST", ,, "Asia/Kolkata", ), ;, map, ., put, (, "BST", ,, "Asia/Dhaka", ), ;]
[), ;, map, ., put, (, "IST", ,, "Asia/Kolkata", ), ;, map, ., put, (, "BST", ,, "Asia/Dhaka", ), ;]
[put, (, "IST", ,, "Asia/Kolkata", ), ;, map, ., put, (, "BST", ,, "Asia/Dhaka", ), ;, map, ., put, (]
["IST", ,, "Asia/Kolkata", ), ;, map, ., put, (, "BST", ,, "Asia/Dhaka", ), ;, map, ., put, (, "VST", ,]
[), ;, map, ., put, (, "BST", ,, "Asia/Dhaka", ), ;, map, ., put, (, "VST", ,, "Asia/Ho_Chi_Minh", ), ;]
[), ;, map, ., put, (, "BST", ,, "Asia/Dhaka", ), ;, map, ., put, (, "VST", ,, "Asia/Ho_Chi_Minh", ), ;]
[put, (, "BST", ,, "Asia/Dhaka", ), ;, map, ., put, (, "VST", ,, "Asia/Ho_Chi_Minh", ), ;, map, ., put, (]
["BST", ,, "Asia/Dhaka", ), ;, map, ., put, (, "VST", ,, "Asia/Ho_Chi_Minh", ), ;, map, ., put, (, "CTT", ,]
[), ;, map, ., put, (, "VST", ,, "Asia/Ho_Chi_Minh", ), ;, map, ., put, (, "CTT", ,, "Asia/Shanghai", ), ;]
[), ;, map, ., put, (, "VST", ,, "Asia/Ho_Chi_Minh", ), ;, map, ., put, (, "CTT", ,, "Asia/Shanghai", ), ;]
[put, (, "VST", ,, "Asia/Ho_Chi_Minh", ), ;, map, ., put, (, "CTT", ,, "Asia/Shanghai", ), ;, map, ., put, (]
["VST", ,, "Asia/Ho_Chi_Minh", ), ;, map, ., put, (, "CTT", ,, "Asia/Shanghai", ), ;, map, ., put, (, "JST", ,]
[), ;, map, ., put, (, "CTT", ,, "Asia/Shanghai", ), ;, map, ., put, (, "JST", ,, "Asia/Tokyo", ), ;]
[), ;, map, ., put, (, "CTT", ,, "Asia/Shanghai", ), ;, map, ., put, (, "JST", ,, "Asia/Tokyo", ), ;]
[put, (, "CTT", ,, "Asia/Shanghai", ), ;, map, ., put, (, "JST", ,, "Asia/Tokyo", ), ;, map, ., put, (]
["CTT", ,, "Asia/Shanghai", ), ;, map, ., put, (, "JST", ,, "Asia/Tokyo", ), ;, map, ., put, (, "ACT", ,]
[), ;, map, ., put, (, "JST", ,, "Asia/Tokyo", ), ;, map, ., put, (, "ACT", ,, "Australia/Darwin", ), ;]
[), ;, map, ., put, (, "JST", ,, "Asia/Tokyo", ), ;, map, ., put, (, "ACT", ,, "Australia/Darwin", ), ;]
[put, (, "JST", ,, "Asia/Tokyo", ), ;, map, ., put, (, "ACT", ,, "Australia/Darwin", ), ;, map, ., put, (]
["JST", ,, "Asia/Tokyo", ), ;, map, ., put, (, "ACT", ,, "Australia/Darwin", ), ;, map, ., put, (, "AET", ,]
[), ;, map, ., put, (, "ACT", ,, "Australia/Darwin", ), ;, map, ., put, (, "AET", ,, "Australia/Sydney", ), ;]
[), ;, map, ., put, (, "ACT", ,, "Australia/Darwin", ), ;, map, ., put, (, "AET", ,, "Australia/Sydney", ), ;]
[put, (, "ACT", ,, "Australia/Darwin", ), ;, map, ., put, (, "AET", ,, "Australia/Sydney", ), ;, map, ., put, (]
["ACT", ,, "Australia/Darwin", ), ;, map, ., put, (, "AET", ,, "Australia/Sydney", ), ;, map, ., put, (, "SST", ,]
[), ;, map, ., put, (, "AET", ,, "Australia/Sydney", ), ;, map, ., put, (, "SST", ,, "Pacific/Guadalcanal", ), ;]
[), ;, map, ., put, (, "AET", ,, "Australia/Sydney", ), ;, map, ., put, (, "SST", ,, "Pacific/Guadalcanal", ), ;]
[put, (, "AET", ,, "Australia/Sydney", ), ;, map, ., put, (, "SST", ,, "Pacific/Guadalcanal", ), ;, map, ., put, (]
["AET", ,, "Australia/Sydney", ), ;, map, ., put, (, "SST", ,, "Pacific/Guadalcanal", ), ;, map, ., put, (, "NST", ,]
[), ;, map, ., put, (, "SST", ,, "Pacific/Guadalcanal", ), ;, map, ., put, (, "NST", ,, "Pacific/Auckland", ), ;]
[map, ., put, (, "SST", ,, "Pacific/Guadalcanal", ), ;, map, ., put, (, "NST", ,, "Pacific/Auckland", ), ;, cZoneIdConversion, =]
["SST", ,, "Pacific/Guadalcanal", ), ;, map, ., put, (, "NST", ,, "Pacific/Auckland", ), ;, cZoneIdConversion, =, map, ;, }, return]
["SST", ,, "Pacific/Guadalcanal", ), ;, map, ., put, (, "NST", ,, "Pacific/Auckland", ), ;, cZoneIdConversion, =, map, ;, }, return]
[;, map, ., put, (, "NST", ,, "Pacific/Auckland", ), ;, cZoneIdConversion, =, map, ;, }, return, map, ., get, (]
[map, ., get, (, id, ), ;, }, private, static, int, parseOffset, (, String, str, ), {, Chronology, chrono, =]
[parseOffset, (, String, str, ), {, Chronology, chrono, =, new, BaseChronology, (, ), {, private, static, final, long, serialVersionUID, =]
[(, String, str, ), {, Chronology, chrono, =, new, BaseChronology, (, ), {, private, static, final, long, serialVersionUID, =, -]
[BaseChronology, (, ), {, private, static, final, long, serialVersionUID, =, -, 3128740902654445468L, ;, public, DateTimeZone, getZone, (, ), {, return]
[-, 3128740902654445468L, ;, public, DateTimeZone, getZone, (, ), {, return, null, ;, }, public, Chronology, withUTC, (, ), {, return]
[}, public, Chronology, withUTC, (, ), {, return, this, ;, }, public, Chronology, withZone, (, DateTimeZone, zone, ), {, return]
[}, public, Chronology, withZone, (, DateTimeZone, zone, ), {, return, this, ;, }, public, String, toString, (, ), {, return]
[}, public, Chronology, withZone, (, DateTimeZone, zone, ), {, return, this, ;, }, public, String, toString, (, ), {, return]
[}, public, String, toString, (, ), {, return, getClass, (, ), ., getName, (, ), ;, }, }, ;, return]
[public, String, toString, (, ), {, return, getClass, (, ), ., getName, (, ), ;, }, }, ;, return, -]
[(, ), {, return, getClass, (, ), ., getName, (, ), ;, }, }, ;, return, -, (, int, )]
[(, ), {, return, getClass, (, ), ., getName, (, ), ;, }, }, ;, return, -, (, int, )]
[(, ), {, return, getClass, (, ), ., getName, (, ), ;, }, }, ;, return, -, (, int, )]
[), ., getName, (, ), ;, }, }, ;, return, -, (, int, ), offsetFormatter, (, ), ., withChronology, (]
[;, }, }, ;, return, -, (, int, ), offsetFormatter, (, ), ., withChronology, (, chrono, ), ., parseMillis, (]
[), ., parseMillis, (, str, ), ;, }, private, static, String, printOffset, (, int, offset, ), {, StringBuffer, buf, =]
[}, private, static, String, printOffset, (, int, offset, ), {, StringBuffer, buf, =, new, StringBuffer, (, ), ;, if, (]
[}, private, static, String, printOffset, (, int, offset, ), {, StringBuffer, buf, =, new, StringBuffer, (, ), ;, if, (]
[static, String, printOffset, (, int, offset, ), {, StringBuffer, buf, =, new, StringBuffer, (, ), ;, if, (, offset, >=]
[(, int, offset, ), {, StringBuffer, buf, =, new, StringBuffer, (, ), ;, if, (, offset, >=, 0, ), {]
[(, int, offset, ), {, StringBuffer, buf, =, new, StringBuffer, (, ), ;, if, (, offset, >=, 0, ), {]
[{, StringBuffer, buf, =, new, StringBuffer, (, ), ;, if, (, offset, >=, 0, ), {, buf, ., append, (]
[(, ), ;, if, (, offset, >=, 0, ), {, buf, ., append, (, '+', ), ;, }, else, {]
[(, ), ;, if, (, offset, >=, 0, ), {, buf, ., append, (, '+', ), ;, }, else, {]
[(, offset, >=, 0, ), {, buf, ., append, (, '+', ), ;, }, else, {, buf, ., append, (]
[0, ), {, buf, ., append, (, '+', ), ;, }, else, {, buf, ., append, (, '-', ), ;]
[{, buf, ., append, (, '+', ), ;, }, else, {, buf, ., append, (, '-', ), ;, offset, =]
[buf, ., append, (, '+', ), ;, }, else, {, buf, ., append, (, '-', ), ;, offset, =, -]
[;, }, else, {, buf, ., append, (, '-', ), ;, offset, =, -, offset, ;, }, int, hours, =]
[;, }, else, {, buf, ., append, (, '-', ), ;, offset, =, -, offset, ;, }, int, hours, =]
[else, {, buf, ., append, (, '-', ), ;, offset, =, -, offset, ;, }, int, hours, =, offset, /]
[else, {, buf, ., append, (, '-', ), ;, offset, =, -, offset, ;, }, int, hours, =, offset, /]
[append, (, '-', ), ;, offset, =, -, offset, ;, }, int, hours, =, offset, /, DateTimeConstants, ., MILLIS_PER_HOUR, ;]
[append, (, '-', ), ;, offset, =, -, offset, ;, }, int, hours, =, offset, /, DateTimeConstants, ., MILLIS_PER_HOUR, ;]
[;, offset, =, -, offset, ;, }, int, hours, =, offset, /, DateTimeConstants, ., MILLIS_PER_HOUR, ;, FormatUtils, ., appendPaddedInteger, (]
[=, -, offset, ;, }, int, hours, =, offset, /, DateTimeConstants, ., MILLIS_PER_HOUR, ;, FormatUtils, ., appendPaddedInteger, (, buf, ,]
[offset, ;, }, int, hours, =, offset, /, DateTimeConstants, ., MILLIS_PER_HOUR, ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, hours, ,]
[int, hours, =, offset, /, DateTimeConstants, ., MILLIS_PER_HOUR, ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, hours, ,, 2, ), ;]
[=, offset, /, DateTimeConstants, ., MILLIS_PER_HOUR, ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, hours, ,, 2, ), ;, offset, -=]
[=, offset, /, DateTimeConstants, ., MILLIS_PER_HOUR, ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, hours, ,, 2, ), ;, offset, -=]
[/, DateTimeConstants, ., MILLIS_PER_HOUR, ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, hours, ,, 2, ), ;, offset, -=, hours, *]
[MILLIS_PER_HOUR, ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, hours, ,, 2, ), ;, offset, -=, hours, *, (, int, )]
[MILLIS_PER_HOUR, ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, hours, ,, 2, ), ;, offset, -=, hours, *, (, int, )]
[,, hours, ,, 2, ), ;, offset, -=, hours, *, (, int, ), DateTimeConstants, ., MILLIS_PER_HOUR, ;, int, minutes, =]
[,, hours, ,, 2, ), ;, offset, -=, hours, *, (, int, ), DateTimeConstants, ., MILLIS_PER_HOUR, ;, int, minutes, =]
[,, 2, ), ;, offset, -=, hours, *, (, int, ), DateTimeConstants, ., MILLIS_PER_HOUR, ;, int, minutes, =, offset, /]
[,, 2, ), ;, offset, -=, hours, *, (, int, ), DateTimeConstants, ., MILLIS_PER_HOUR, ;, int, minutes, =, offset, /]
[offset, -=, hours, *, (, int, ), DateTimeConstants, ., MILLIS_PER_HOUR, ;, int, minutes, =, offset, /, DateTimeConstants, ., MILLIS_PER_MINUTE, ;]
[offset, -=, hours, *, (, int, ), DateTimeConstants, ., MILLIS_PER_HOUR, ;, int, minutes, =, offset, /, DateTimeConstants, ., MILLIS_PER_MINUTE, ;]
[(, int, ), DateTimeConstants, ., MILLIS_PER_HOUR, ;, int, minutes, =, offset, /, DateTimeConstants, ., MILLIS_PER_MINUTE, ;, buf, ., append, (]
[DateTimeConstants, ., MILLIS_PER_HOUR, ;, int, minutes, =, offset, /, DateTimeConstants, ., MILLIS_PER_MINUTE, ;, buf, ., append, (, ':', ), ;]
[DateTimeConstants, ., MILLIS_PER_HOUR, ;, int, minutes, =, offset, /, DateTimeConstants, ., MILLIS_PER_MINUTE, ;, buf, ., append, (, ':', ), ;]
[int, minutes, =, offset, /, DateTimeConstants, ., MILLIS_PER_MINUTE, ;, buf, ., append, (, ':', ), ;, FormatUtils, ., appendPaddedInteger, (]
[=, offset, /, DateTimeConstants, ., MILLIS_PER_MINUTE, ;, buf, ., append, (, ':', ), ;, FormatUtils, ., appendPaddedInteger, (, buf, ,]
[/, DateTimeConstants, ., MILLIS_PER_MINUTE, ;, buf, ., append, (, ':', ), ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, minutes, ,]
[MILLIS_PER_MINUTE, ;, buf, ., append, (, ':', ), ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, minutes, ,, 2, ), ;]
[buf, ., append, (, ':', ), ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, minutes, ,, 2, ), ;, offset, -=]
[buf, ., append, (, ':', ), ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, minutes, ,, 2, ), ;, offset, -=]
[append, (, ':', ), ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, minutes, ,, 2, ), ;, offset, -=, minutes, *]
[append, (, ':', ), ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, minutes, ,, 2, ), ;, offset, -=, minutes, *]
[., appendPaddedInteger, (, buf, ,, minutes, ,, 2, ), ;, offset, -=, minutes, *, DateTimeConstants, ., MILLIS_PER_MINUTE, ;, if, (]
[., appendPaddedInteger, (, buf, ,, minutes, ,, 2, ), ;, offset, -=, minutes, *, DateTimeConstants, ., MILLIS_PER_MINUTE, ;, if, (]
[(, buf, ,, minutes, ,, 2, ), ;, offset, -=, minutes, *, DateTimeConstants, ., MILLIS_PER_MINUTE, ;, if, (, offset, ==]
[,, 2, ), ;, offset, -=, minutes, *, DateTimeConstants, ., MILLIS_PER_MINUTE, ;, if, (, offset, ==, 0, ), {, return]
[,, 2, ), ;, offset, -=, minutes, *, DateTimeConstants, ., MILLIS_PER_MINUTE, ;, if, (, offset, ==, 0, ), {, return]
[MILLIS_PER_MINUTE, ;, if, (, offset, ==, 0, ), {, return, buf, ., toString, (, ), ;, }, int, seconds, =]
[MILLIS_PER_MINUTE, ;, if, (, offset, ==, 0, ), {, return, buf, ., toString, (, ), ;, }, int, seconds, =]
[if, (, offset, ==, 0, ), {, return, buf, ., toString, (, ), ;, }, int, seconds, =, offset, /]
[if, (, offset, ==, 0, ), {, return, buf, ., toString, (, ), ;, }, int, seconds, =, offset, /]
[0, ), {, return, buf, ., toString, (, ), ;, }, int, seconds, =, offset, /, DateTimeConstants, ., MILLIS_PER_SECOND, ;]
[0, ), {, return, buf, ., toString, (, ), ;, }, int, seconds, =, offset, /, DateTimeConstants, ., MILLIS_PER_SECOND, ;]
[buf, ., toString, (, ), ;, }, int, seconds, =, offset, /, DateTimeConstants, ., MILLIS_PER_SECOND, ;, buf, ., append, (]
[(, ), ;, }, int, seconds, =, offset, /, DateTimeConstants, ., MILLIS_PER_SECOND, ;, buf, ., append, (, ':', ), ;]
[(, ), ;, }, int, seconds, =, offset, /, DateTimeConstants, ., MILLIS_PER_SECOND, ;, buf, ., append, (, ':', ), ;]
[int, seconds, =, offset, /, DateTimeConstants, ., MILLIS_PER_SECOND, ;, buf, ., append, (, ':', ), ;, FormatUtils, ., appendPaddedInteger, (]
[=, offset, /, DateTimeConstants, ., MILLIS_PER_SECOND, ;, buf, ., append, (, ':', ), ;, FormatUtils, ., appendPaddedInteger, (, buf, ,]
[/, DateTimeConstants, ., MILLIS_PER_SECOND, ;, buf, ., append, (, ':', ), ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, seconds, ,]
[MILLIS_PER_SECOND, ;, buf, ., append, (, ':', ), ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, seconds, ,, 2, ), ;]
[buf, ., append, (, ':', ), ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, seconds, ,, 2, ), ;, offset, -=]
[buf, ., append, (, ':', ), ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, seconds, ,, 2, ), ;, offset, -=]
[append, (, ':', ), ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, seconds, ,, 2, ), ;, offset, -=, seconds, *]
[append, (, ':', ), ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, seconds, ,, 2, ), ;, offset, -=, seconds, *]
[., appendPaddedInteger, (, buf, ,, seconds, ,, 2, ), ;, offset, -=, seconds, *, DateTimeConstants, ., MILLIS_PER_SECOND, ;, if, (]
[., appendPaddedInteger, (, buf, ,, seconds, ,, 2, ), ;, offset, -=, seconds, *, DateTimeConstants, ., MILLIS_PER_SECOND, ;, if, (]
[(, buf, ,, seconds, ,, 2, ), ;, offset, -=, seconds, *, DateTimeConstants, ., MILLIS_PER_SECOND, ;, if, (, offset, ==]
[,, 2, ), ;, offset, -=, seconds, *, DateTimeConstants, ., MILLIS_PER_SECOND, ;, if, (, offset, ==, 0, ), {, return]
[,, 2, ), ;, offset, -=, seconds, *, DateTimeConstants, ., MILLIS_PER_SECOND, ;, if, (, offset, ==, 0, ), {, return]
[*, DateTimeConstants, ., MILLIS_PER_SECOND, ;, if, (, offset, ==, 0, ), {, return, buf, ., toString, (, ), ;, }]
[*, DateTimeConstants, ., MILLIS_PER_SECOND, ;, if, (, offset, ==, 0, ), {, return, buf, ., toString, (, ), ;, }]
[;, if, (, offset, ==, 0, ), {, return, buf, ., toString, (, ), ;, }, buf, ., append, (]
[offset, ==, 0, ), {, return, buf, ., toString, (, ), ;, }, buf, ., append, (, '.', ), ;]
[offset, ==, 0, ), {, return, buf, ., toString, (, ), ;, }, buf, ., append, (, '.', ), ;]
[{, return, buf, ., toString, (, ), ;, }, buf, ., append, (, '.', ), ;, FormatUtils, ., appendPaddedInteger, (]
[buf, ., toString, (, ), ;, }, buf, ., append, (, '.', ), ;, FormatUtils, ., appendPaddedInteger, (, buf, ,]
[toString, (, ), ;, }, buf, ., append, (, '.', ), ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, offset, ,]
[}, buf, ., append, (, '.', ), ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, offset, ,, 3, ), ;, return]
[}, buf, ., append, (, '.', ), ;, FormatUtils, ., appendPaddedInteger, (, buf, ,, offset, ,, 3, ), ;, return]
[), ;, return, buf, ., toString, (, ), ;, }, private, static, synchronized, DateTimeFormatter, offsetFormatter, (, ), {, if, (]
[), ;, return, buf, ., toString, (, ), ;, }, private, static, synchronized, DateTimeFormatter, offsetFormatter, (, ), {, if, (]
[return, buf, ., toString, (, ), ;, }, private, static, synchronized, DateTimeFormatter, offsetFormatter, (, ), {, if, (, cOffsetFormatter, ==]
[toString, (, ), ;, }, private, static, synchronized, DateTimeFormatter, offsetFormatter, (, ), {, if, (, cOffsetFormatter, ==, null, ), {]
[), ;, }, private, static, synchronized, DateTimeFormatter, offsetFormatter, (, ), {, if, (, cOffsetFormatter, ==, null, ), {, cOffsetFormatter, =]
[), ;, }, private, static, synchronized, DateTimeFormatter, offsetFormatter, (, ), {, if, (, cOffsetFormatter, ==, null, ), {, cOffsetFormatter, =]
[), ;, }, private, static, synchronized, DateTimeFormatter, offsetFormatter, (, ), {, if, (, cOffsetFormatter, ==, null, ), {, cOffsetFormatter, =]
[offsetFormatter, (, ), {, if, (, cOffsetFormatter, ==, null, ), {, cOffsetFormatter, =, new, DateTimeFormatterBuilder, (, ), ., appendTimeZoneOffset, (]
[), {, if, (, cOffsetFormatter, ==, null, ), {, cOffsetFormatter, =, new, DateTimeFormatterBuilder, (, ), ., appendTimeZoneOffset, (, null, ,]
[if, (, cOffsetFormatter, ==, null, ), {, cOffsetFormatter, =, new, DateTimeFormatterBuilder, (, ), ., appendTimeZoneOffset, (, null, ,, true, ,]
[cOffsetFormatter, ==, null, ), {, cOffsetFormatter, =, new, DateTimeFormatterBuilder, (, ), ., appendTimeZoneOffset, (, null, ,, true, ,, 2, ,]
[(, ), ., appendTimeZoneOffset, (, null, ,, true, ,, 2, ,, 4, ), ., toFormatter, (, ), ;, }, return]
[;, }, return, cOffsetFormatter, ;, }, private, final, String, iID, ;, protected, DateTimeZone, (, String, id, ), {, if, (]
[;, }, return, cOffsetFormatter, ;, }, private, final, String, iID, ;, protected, DateTimeZone, (, String, id, ), {, if, (]
[return, cOffsetFormatter, ;, }, private, final, String, iID, ;, protected, DateTimeZone, (, String, id, ), {, if, (, id, ==]
[private, final, String, iID, ;, protected, DateTimeZone, (, String, id, ), {, if, (, id, ==, null, ), {, throw]
[iID, ;, protected, DateTimeZone, (, String, id, ), {, if, (, id, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, String, id, ), {, if, (, id, ==, null, ), {, throw, new, IllegalArgumentException, (, "Id must not be null", ), ;, }]
[id, ), {, if, (, id, ==, null, ), {, throw, new, IllegalArgumentException, (, "Id must not be null", ), ;, }, iID, =]
[(, "Id must not be null", ), ;, }, iID, =, id, ;, }, @, ToString, public, final, String, getID, (, ), {, return]
[}, public, abstract, String, getNameKey, (, long, instant, ), ;, public, final, String, getShortName, (, long, instant, ), {, return]
[abstract, String, getNameKey, (, long, instant, ), ;, public, final, String, getShortName, (, long, instant, ), {, return, getShortName, (]
[getNameKey, (, long, instant, ), ;, public, final, String, getShortName, (, long, instant, ), {, return, getShortName, (, instant, ,]
[(, instant, ,, null, ), ;, }, public, String, getShortName, (, long, instant, ,, Locale, locale, ), {, if, (]
[(, instant, ,, null, ), ;, }, public, String, getShortName, (, long, instant, ,, Locale, locale, ), {, if, (]
[,, null, ), ;, }, public, String, getShortName, (, long, instant, ,, Locale, locale, ), {, if, (, locale, ==]
[;, }, public, String, getShortName, (, long, instant, ,, Locale, locale, ), {, if, (, locale, ==, null, ), {]
[public, String, getShortName, (, long, instant, ,, Locale, locale, ), {, if, (, locale, ==, null, ), {, locale, =]
[public, String, getShortName, (, long, instant, ,, Locale, locale, ), {, if, (, locale, ==, null, ), {, locale, =]
[{, if, (, locale, ==, null, ), {, locale, =, Locale, ., getDefault, (, ), ;, }, String, nameKey, =]
[(, locale, ==, null, ), {, locale, =, Locale, ., getDefault, (, ), ;, }, String, nameKey, =, getNameKey, (]
[{, locale, =, Locale, ., getDefault, (, ), ;, }, String, nameKey, =, getNameKey, (, instant, ), ;, if, (]
[{, locale, =, Locale, ., getDefault, (, ), ;, }, String, nameKey, =, getNameKey, (, instant, ), ;, if, (]
[=, Locale, ., getDefault, (, ), ;, }, String, nameKey, =, getNameKey, (, instant, ), ;, if, (, nameKey, ==]
[(, ), ;, }, String, nameKey, =, getNameKey, (, instant, ), ;, if, (, nameKey, ==, null, ), {, return]
[=, getNameKey, (, instant, ), ;, if, (, nameKey, ==, null, ), {, return, iID, ;, }, String, name, =]
[=, getNameKey, (, instant, ), ;, if, (, nameKey, ==, null, ), {, return, iID, ;, }, String, name, =]
[), ;, if, (, nameKey, ==, null, ), {, return, iID, ;, }, String, name, =, cNameProvider, ., getShortName, (]
[if, (, nameKey, ==, null, ), {, return, iID, ;, }, String, name, =, cNameProvider, ., getShortName, (, locale, ,]
[nameKey, ==, null, ), {, return, iID, ;, }, String, name, =, cNameProvider, ., getShortName, (, locale, ,, iID, ,]
[return, iID, ;, }, String, name, =, cNameProvider, ., getShortName, (, locale, ,, iID, ,, nameKey, ), ;, if, (]
[return, iID, ;, }, String, name, =, cNameProvider, ., getShortName, (, locale, ,, iID, ,, nameKey, ), ;, if, (]
[;, }, String, name, =, cNameProvider, ., getShortName, (, locale, ,, iID, ,, nameKey, ), ;, if, (, name, !=]
[=, cNameProvider, ., getShortName, (, locale, ,, iID, ,, nameKey, ), ;, if, (, name, !=, null, ), {, return]
[(, locale, ,, iID, ,, nameKey, ), ;, if, (, name, !=, null, ), {, return, name, ;, }, return]
[,, iID, ,, nameKey, ), ;, if, (, name, !=, null, ), {, return, name, ;, }, return, printOffset, (]
[,, nameKey, ), ;, if, (, name, !=, null, ), {, return, name, ;, }, return, printOffset, (, getOffset, (]
[return, printOffset, (, getOffset, (, instant, ), ), ;, }, public, final, String, getName, (, long, instant, ), {, return]
[(, getOffset, (, instant, ), ), ;, }, public, final, String, getName, (, long, instant, ), {, return, getName, (]
[(, instant, ), ), ;, }, public, final, String, getName, (, long, instant, ), {, return, getName, (, instant, ,]
[(, instant, ,, null, ), ;, }, public, String, getName, (, long, instant, ,, Locale, locale, ), {, if, (]
[(, instant, ,, null, ), ;, }, public, String, getName, (, long, instant, ,, Locale, locale, ), {, if, (]
[,, null, ), ;, }, public, String, getName, (, long, instant, ,, Locale, locale, ), {, if, (, locale, ==]
[;, }, public, String, getName, (, long, instant, ,, Locale, locale, ), {, if, (, locale, ==, null, ), {]
[public, String, getName, (, long, instant, ,, Locale, locale, ), {, if, (, locale, ==, null, ), {, locale, =]
[public, String, getName, (, long, instant, ,, Locale, locale, ), {, if, (, locale, ==, null, ), {, locale, =]
[{, if, (, locale, ==, null, ), {, locale, =, Locale, ., getDefault, (, ), ;, }, String, nameKey, =]
[(, locale, ==, null, ), {, locale, =, Locale, ., getDefault, (, ), ;, }, String, nameKey, =, getNameKey, (]
[{, locale, =, Locale, ., getDefault, (, ), ;, }, String, nameKey, =, getNameKey, (, instant, ), ;, if, (]
[{, locale, =, Locale, ., getDefault, (, ), ;, }, String, nameKey, =, getNameKey, (, instant, ), ;, if, (]
[=, Locale, ., getDefault, (, ), ;, }, String, nameKey, =, getNameKey, (, instant, ), ;, if, (, nameKey, ==]
[(, ), ;, }, String, nameKey, =, getNameKey, (, instant, ), ;, if, (, nameKey, ==, null, ), {, return]
[=, getNameKey, (, instant, ), ;, if, (, nameKey, ==, null, ), {, return, iID, ;, }, String, name, =]
[=, getNameKey, (, instant, ), ;, if, (, nameKey, ==, null, ), {, return, iID, ;, }, String, name, =]
[), ;, if, (, nameKey, ==, null, ), {, return, iID, ;, }, String, name, =, cNameProvider, ., getName, (]
[if, (, nameKey, ==, null, ), {, return, iID, ;, }, String, name, =, cNameProvider, ., getName, (, locale, ,]
[nameKey, ==, null, ), {, return, iID, ;, }, String, name, =, cNameProvider, ., getName, (, locale, ,, iID, ,]
[return, iID, ;, }, String, name, =, cNameProvider, ., getName, (, locale, ,, iID, ,, nameKey, ), ;, if, (]
[return, iID, ;, }, String, name, =, cNameProvider, ., getName, (, locale, ,, iID, ,, nameKey, ), ;, if, (]
[;, }, String, name, =, cNameProvider, ., getName, (, locale, ,, iID, ,, nameKey, ), ;, if, (, name, !=]
[=, cNameProvider, ., getName, (, locale, ,, iID, ,, nameKey, ), ;, if, (, name, !=, null, ), {, return]
[(, locale, ,, iID, ,, nameKey, ), ;, if, (, name, !=, null, ), {, return, name, ;, }, return]
[,, iID, ,, nameKey, ), ;, if, (, name, !=, null, ), {, return, name, ;, }, return, printOffset, (]
[,, nameKey, ), ;, if, (, name, !=, null, ), {, return, name, ;, }, return, printOffset, (, getOffset, (]
[public, abstract, int, getOffset, (, long, instant, ), ;, public, final, int, getOffset, (, ReadableInstant, instant, ), {, if, (]
[public, abstract, int, getOffset, (, long, instant, ), ;, public, final, int, getOffset, (, ReadableInstant, instant, ), {, if, (]
[int, getOffset, (, long, instant, ), ;, public, final, int, getOffset, (, ReadableInstant, instant, ), {, if, (, instant, ==]
[instant, ), ;, public, final, int, getOffset, (, ReadableInstant, instant, ), {, if, (, instant, ==, null, ), {, return]
[;, public, final, int, getOffset, (, ReadableInstant, instant, ), {, if, (, instant, ==, null, ), {, return, getOffset, (]
[;, public, final, int, getOffset, (, ReadableInstant, instant, ), {, if, (, instant, ==, null, ), {, return, getOffset, (]
[{, if, (, instant, ==, null, ), {, return, getOffset, (, DateTimeUtils, ., currentTimeMillis, (, ), ), ;, }, return]
[(, instant, ==, null, ), {, return, getOffset, (, DateTimeUtils, ., currentTimeMillis, (, ), ), ;, }, return, getOffset, (]
[(, instant, ==, null, ), {, return, getOffset, (, DateTimeUtils, ., currentTimeMillis, (, ), ), ;, }, return, getOffset, (]
[;, }, public, abstract, int, getStandardOffset, (, long, instant, ), ;, public, boolean, isStandardOffset, (, long, instant, ), {, return]
[;, }, public, abstract, int, getStandardOffset, (, long, instant, ), ;, public, boolean, isStandardOffset, (, long, instant, ), {, return]
[public, abstract, int, getStandardOffset, (, long, instant, ), ;, public, boolean, isStandardOffset, (, long, instant, ), {, return, getOffset, (]
[getStandardOffset, (, long, instant, ), ;, public, boolean, isStandardOffset, (, long, instant, ), {, return, getOffset, (, instant, ), ==]
[long, instant, ), ;, public, boolean, isStandardOffset, (, long, instant, ), {, return, getOffset, (, instant, ), ==, getStandardOffset, (]
[), ==, getStandardOffset, (, instant, ), ;, }, public, int, getOffsetFromLocal, (, long, instantLocal, ), {, final, int, offsetLocal, =]
[getStandardOffset, (, instant, ), ;, }, public, int, getOffsetFromLocal, (, long, instantLocal, ), {, final, int, offsetLocal, =, getOffset, (]
[int, getOffsetFromLocal, (, long, instantLocal, ), {, final, int, offsetLocal, =, getOffset, (, instantLocal, ), ;, final, long, instantAdjusted, =]
[int, getOffsetFromLocal, (, long, instantLocal, ), {, final, int, offsetLocal, =, getOffset, (, instantLocal, ), ;, final, long, instantAdjusted, =]
[(, long, instantLocal, ), {, final, int, offsetLocal, =, getOffset, (, instantLocal, ), ;, final, long, instantAdjusted, =, instantLocal, -]
[int, offsetLocal, =, getOffset, (, instantLocal, ), ;, final, long, instantAdjusted, =, instantLocal, -, offsetLocal, ;, final, int, offsetAdjusted, =]
[=, getOffset, (, instantLocal, ), ;, final, long, instantAdjusted, =, instantLocal, -, offsetLocal, ;, final, int, offsetAdjusted, =, getOffset, (]
[;, final, long, instantAdjusted, =, instantLocal, -, offsetLocal, ;, final, int, offsetAdjusted, =, getOffset, (, instantAdjusted, ), ;, if, (]
[;, final, long, instantAdjusted, =, instantLocal, -, offsetLocal, ;, final, int, offsetAdjusted, =, getOffset, (, instantAdjusted, ), ;, if, (]
[long, instantAdjusted, =, instantLocal, -, offsetLocal, ;, final, int, offsetAdjusted, =, getOffset, (, instantAdjusted, ), ;, if, (, offsetLocal, !=]
[offsetLocal, ;, final, int, offsetAdjusted, =, getOffset, (, instantAdjusted, ), ;, if, (, offsetLocal, !=, offsetAdjusted, ), {, if, (]
[offsetLocal, ;, final, int, offsetAdjusted, =, getOffset, (, instantAdjusted, ), ;, if, (, offsetLocal, !=, offsetAdjusted, ), {, if, (]
[;, final, int, offsetAdjusted, =, getOffset, (, instantAdjusted, ), ;, if, (, offsetLocal, !=, offsetAdjusted, ), {, if, (, (]
[;, final, int, offsetAdjusted, =, getOffset, (, instantAdjusted, ), ;, if, (, offsetLocal, !=, offsetAdjusted, ), {, if, (, (]
[int, offsetAdjusted, =, getOffset, (, instantAdjusted, ), ;, if, (, offsetLocal, !=, offsetAdjusted, ), {, if, (, (, offsetLocal, -]
[getOffset, (, instantAdjusted, ), ;, if, (, offsetLocal, !=, offsetAdjusted, ), {, if, (, (, offsetLocal, -, offsetAdjusted, ), <]
[(, offsetLocal, !=, offsetAdjusted, ), {, if, (, (, offsetLocal, -, offsetAdjusted, ), <, 0, ), {, long, nextLocal, =]
[!=, offsetAdjusted, ), {, if, (, (, offsetLocal, -, offsetAdjusted, ), <, 0, ), {, long, nextLocal, =, nextTransition, (]
[(, offsetLocal, -, offsetAdjusted, ), <, 0, ), {, long, nextLocal, =, nextTransition, (, instantAdjusted, ), ;, long, nextAdjusted, =]
[-, offsetAdjusted, ), <, 0, ), {, long, nextLocal, =, nextTransition, (, instantAdjusted, ), ;, long, nextAdjusted, =, nextTransition, (]
[-, offsetAdjusted, ), <, 0, ), {, long, nextLocal, =, nextTransition, (, instantAdjusted, ), ;, long, nextAdjusted, =, nextTransition, (]
[), <, 0, ), {, long, nextLocal, =, nextTransition, (, instantAdjusted, ), ;, long, nextAdjusted, =, nextTransition, (, instantLocal, -]
[long, nextLocal, =, nextTransition, (, instantAdjusted, ), ;, long, nextAdjusted, =, nextTransition, (, instantLocal, -, offsetAdjusted, ), ;, if, (]
[long, nextLocal, =, nextTransition, (, instantAdjusted, ), ;, long, nextAdjusted, =, nextTransition, (, instantLocal, -, offsetAdjusted, ), ;, if, (]
[=, nextTransition, (, instantAdjusted, ), ;, long, nextAdjusted, =, nextTransition, (, instantLocal, -, offsetAdjusted, ), ;, if, (, nextLocal, !=]
[), ;, long, nextAdjusted, =, nextTransition, (, instantLocal, -, offsetAdjusted, ), ;, if, (, nextLocal, !=, nextAdjusted, ), {, return]
[-, offsetAdjusted, ), ;, if, (, nextLocal, !=, nextAdjusted, ), {, return, offsetLocal, ;, }, }, }, else, if, (]
[-, offsetAdjusted, ), ;, if, (, nextLocal, !=, nextAdjusted, ), {, return, offsetLocal, ;, }, }, }, else, if, (]
[), ;, if, (, nextLocal, !=, nextAdjusted, ), {, return, offsetLocal, ;, }, }, }, else, if, (, offsetLocal, >=]
[nextAdjusted, ), {, return, offsetLocal, ;, }, }, }, else, if, (, offsetLocal, >=, 0, ), {, long, prev, =]
[{, return, offsetLocal, ;, }, }, }, else, if, (, offsetLocal, >=, 0, ), {, long, prev, =, previousTransition, (]
[}, }, else, if, (, offsetLocal, >=, 0, ), {, long, prev, =, previousTransition, (, instantAdjusted, ), ;, if, (]
[}, }, else, if, (, offsetLocal, >=, 0, ), {, long, prev, =, previousTransition, (, instantAdjusted, ), ;, if, (]
[else, if, (, offsetLocal, >=, 0, ), {, long, prev, =, previousTransition, (, instantAdjusted, ), ;, if, (, prev, <]
[), {, long, prev, =, previousTransition, (, instantAdjusted, ), ;, if, (, prev, <, instantAdjusted, ), {, int, offsetPrev, =]
[long, prev, =, previousTransition, (, instantAdjusted, ), ;, if, (, prev, <, instantAdjusted, ), {, int, offsetPrev, =, getOffset, (]
[), ;, if, (, prev, <, instantAdjusted, ), {, int, offsetPrev, =, getOffset, (, prev, ), ;, int, diff, =]
[), ;, if, (, prev, <, instantAdjusted, ), {, int, offsetPrev, =, getOffset, (, prev, ), ;, int, diff, =]
[if, (, prev, <, instantAdjusted, ), {, int, offsetPrev, =, getOffset, (, prev, ), ;, int, diff, =, offsetPrev, -]
[instantAdjusted, ), {, int, offsetPrev, =, getOffset, (, prev, ), ;, int, diff, =, offsetPrev, -, offsetLocal, ;, if, (]
[instantAdjusted, ), {, int, offsetPrev, =, getOffset, (, prev, ), ;, int, diff, =, offsetPrev, -, offsetLocal, ;, if, (]
[instantAdjusted, ), {, int, offsetPrev, =, getOffset, (, prev, ), ;, int, diff, =, offsetPrev, -, offsetLocal, ;, if, (]
[{, int, offsetPrev, =, getOffset, (, prev, ), ;, int, diff, =, offsetPrev, -, offsetLocal, ;, if, (, instantAdjusted, -]
[offsetPrev, =, getOffset, (, prev, ), ;, int, diff, =, offsetPrev, -, offsetLocal, ;, if, (, instantAdjusted, -, prev, <=]
[prev, ), ;, int, diff, =, offsetPrev, -, offsetLocal, ;, if, (, instantAdjusted, -, prev, <=, diff, ), {, return]
[offsetPrev, -, offsetLocal, ;, if, (, instantAdjusted, -, prev, <=, diff, ), {, return, offsetPrev, ;, }, }, }, return]
[offsetPrev, ;, }, }, }, return, offsetAdjusted, ;, }, public, long, convertUTCToLocal, (, long, instantUTC, ), {, int, offset, =]
[}, }, }, return, offsetAdjusted, ;, }, public, long, convertUTCToLocal, (, long, instantUTC, ), {, int, offset, =, getOffset, (]
[}, public, long, convertUTCToLocal, (, long, instantUTC, ), {, int, offset, =, getOffset, (, instantUTC, ), ;, long, instantLocal, =]
[}, public, long, convertUTCToLocal, (, long, instantUTC, ), {, int, offset, =, getOffset, (, instantUTC, ), ;, long, instantLocal, =]
[long, convertUTCToLocal, (, long, instantUTC, ), {, int, offset, =, getOffset, (, instantUTC, ), ;, long, instantLocal, =, instantUTC, +]
[instantUTC, ), {, int, offset, =, getOffset, (, instantUTC, ), ;, long, instantLocal, =, instantUTC, +, offset, ;, if, (]
[instantUTC, ), {, int, offset, =, getOffset, (, instantUTC, ), ;, long, instantLocal, =, instantUTC, +, offset, ;, if, (]
[instantUTC, ), {, int, offset, =, getOffset, (, instantUTC, ), ;, long, instantLocal, =, instantUTC, +, offset, ;, if, (]
[), {, int, offset, =, getOffset, (, instantUTC, ), ;, long, instantLocal, =, instantUTC, +, offset, ;, if, (, (]
[), {, int, offset, =, getOffset, (, instantUTC, ), ;, long, instantLocal, =, instantUTC, +, offset, ;, if, (, (]
[int, offset, =, getOffset, (, instantUTC, ), ;, long, instantLocal, =, instantUTC, +, offset, ;, if, (, (, instantUTC, ^]
[getOffset, (, instantUTC, ), ;, long, instantLocal, =, instantUTC, +, offset, ;, if, (, (, instantUTC, ^, instantLocal, ), <]
[instantUTC, ), ;, long, instantLocal, =, instantUTC, +, offset, ;, if, (, (, instantUTC, ^, instantLocal, ), <, 0, &&]
[instantUTC, ), ;, long, instantLocal, =, instantUTC, +, offset, ;, if, (, (, instantUTC, ^, instantLocal, ), <, 0, &&]
[), ;, long, instantLocal, =, instantUTC, +, offset, ;, if, (, (, instantUTC, ^, instantLocal, ), <, 0, &&, (]
[), ;, long, instantLocal, =, instantUTC, +, offset, ;, if, (, (, instantUTC, ^, instantLocal, ), <, 0, &&, (]
[long, instantLocal, =, instantUTC, +, offset, ;, if, (, (, instantUTC, ^, instantLocal, ), <, 0, &&, (, instantUTC, ^]
[instantUTC, +, offset, ;, if, (, (, instantUTC, ^, instantLocal, ), <, 0, &&, (, instantUTC, ^, offset, ), >=]
[if, (, (, instantUTC, ^, instantLocal, ), <, 0, &&, (, instantUTC, ^, offset, ), >=, 0, ), {, throw]
[instantUTC, ^, instantLocal, ), <, 0, &&, (, instantUTC, ^, offset, ), >=, 0, ), {, throw, new, ArithmeticException, (]
[0, &&, (, instantUTC, ^, offset, ), >=, 0, ), {, throw, new, ArithmeticException, (, "Adding time zone offset caused overflow", ), ;, }, return]
[instantLocal, ;, }, public, long, convertLocalToUTC, (, long, instantLocal, ,, boolean, strict, ,, long, originalInstantUTC, ), {, int, offsetOriginal, =]
[}, public, long, convertLocalToUTC, (, long, instantLocal, ,, boolean, strict, ,, long, originalInstantUTC, ), {, int, offsetOriginal, =, getOffset, (]
[instantLocal, ,, boolean, strict, ,, long, originalInstantUTC, ), {, int, offsetOriginal, =, getOffset, (, originalInstantUTC, ), ;, long, instantUTC, =]
[instantLocal, ,, boolean, strict, ,, long, originalInstantUTC, ), {, int, offsetOriginal, =, getOffset, (, originalInstantUTC, ), ;, long, instantUTC, =]
[boolean, strict, ,, long, originalInstantUTC, ), {, int, offsetOriginal, =, getOffset, (, originalInstantUTC, ), ;, long, instantUTC, =, instantLocal, -]
[), {, int, offsetOriginal, =, getOffset, (, originalInstantUTC, ), ;, long, instantUTC, =, instantLocal, -, offsetOriginal, ;, int, offsetLocalFromOriginal, =]
[int, offsetOriginal, =, getOffset, (, originalInstantUTC, ), ;, long, instantUTC, =, instantLocal, -, offsetOriginal, ;, int, offsetLocalFromOriginal, =, getOffset, (]
[originalInstantUTC, ), ;, long, instantUTC, =, instantLocal, -, offsetOriginal, ;, int, offsetLocalFromOriginal, =, getOffset, (, instantUTC, ), ;, if, (]
[originalInstantUTC, ), ;, long, instantUTC, =, instantLocal, -, offsetOriginal, ;, int, offsetLocalFromOriginal, =, getOffset, (, instantUTC, ), ;, if, (]
[;, long, instantUTC, =, instantLocal, -, offsetOriginal, ;, int, offsetLocalFromOriginal, =, getOffset, (, instantUTC, ), ;, if, (, offsetLocalFromOriginal, ==]
[instantLocal, -, offsetOriginal, ;, int, offsetLocalFromOriginal, =, getOffset, (, instantUTC, ), ;, if, (, offsetLocalFromOriginal, ==, offsetOriginal, ), {, return]
[int, offsetLocalFromOriginal, =, getOffset, (, instantUTC, ), ;, if, (, offsetLocalFromOriginal, ==, offsetOriginal, ), {, return, instantUTC, ;, }, return]
[=, getOffset, (, instantUTC, ), ;, if, (, offsetLocalFromOriginal, ==, offsetOriginal, ), {, return, instantUTC, ;, }, return, convertLocalToUTC, (]
[(, instantUTC, ), ;, if, (, offsetLocalFromOriginal, ==, offsetOriginal, ), {, return, instantUTC, ;, }, return, convertLocalToUTC, (, instantLocal, ,]
[instantLocal, ,, strict, ), ;, }, public, long, convertLocalToUTC, (, long, instantLocal, ,, boolean, strict, ), {, int, offsetLocal, =]
[strict, ), ;, }, public, long, convertLocalToUTC, (, long, instantLocal, ,, boolean, strict, ), {, int, offsetLocal, =, getOffset, (]
[convertLocalToUTC, (, long, instantLocal, ,, boolean, strict, ), {, int, offsetLocal, =, getOffset, (, instantLocal, ), ;, int, offset, =]
[long, instantLocal, ,, boolean, strict, ), {, int, offsetLocal, =, getOffset, (, instantLocal, ), ;, int, offset, =, getOffset, (]
[long, instantLocal, ,, boolean, strict, ), {, int, offsetLocal, =, getOffset, (, instantLocal, ), ;, int, offset, =, getOffset, (]
[,, boolean, strict, ), {, int, offsetLocal, =, getOffset, (, instantLocal, ), ;, int, offset, =, getOffset, (, instantLocal, -]
[int, offsetLocal, =, getOffset, (, instantLocal, ), ;, int, offset, =, getOffset, (, instantLocal, -, offsetLocal, ), ;, if, (]
[int, offsetLocal, =, getOffset, (, instantLocal, ), ;, int, offset, =, getOffset, (, instantLocal, -, offsetLocal, ), ;, if, (]
[=, getOffset, (, instantLocal, ), ;, int, offset, =, getOffset, (, instantLocal, -, offsetLocal, ), ;, if, (, offsetLocal, !=]
[;, int, offset, =, getOffset, (, instantLocal, -, offsetLocal, ), ;, if, (, offsetLocal, !=, offset, ), {, if, (]
[;, int, offset, =, getOffset, (, instantLocal, -, offsetLocal, ), ;, if, (, offsetLocal, !=, offset, ), {, if, (]
[offset, =, getOffset, (, instantLocal, -, offsetLocal, ), ;, if, (, offsetLocal, !=, offset, ), {, if, (, strict, ||]
[offset, =, getOffset, (, instantLocal, -, offsetLocal, ), ;, if, (, offsetLocal, !=, offset, ), {, if, (, strict, ||]
[getOffset, (, instantLocal, -, offsetLocal, ), ;, if, (, offsetLocal, !=, offset, ), {, if, (, strict, ||, offsetLocal, <]
[;, if, (, offsetLocal, !=, offset, ), {, if, (, strict, ||, offsetLocal, <, 0, ), {, long, nextLocal, =]
[(, offsetLocal, !=, offset, ), {, if, (, strict, ||, offsetLocal, <, 0, ), {, long, nextLocal, =, nextTransition, (]
[(, offsetLocal, !=, offset, ), {, if, (, strict, ||, offsetLocal, <, 0, ), {, long, nextLocal, =, nextTransition, (]
[!=, offset, ), {, if, (, strict, ||, offsetLocal, <, 0, ), {, long, nextLocal, =, nextTransition, (, instantLocal, -]
[(, strict, ||, offsetLocal, <, 0, ), {, long, nextLocal, =, nextTransition, (, instantLocal, -, offsetLocal, ), ;, if, (]
[(, strict, ||, offsetLocal, <, 0, ), {, long, nextLocal, =, nextTransition, (, instantLocal, -, offsetLocal, ), ;, if, (]
[||, offsetLocal, <, 0, ), {, long, nextLocal, =, nextTransition, (, instantLocal, -, offsetLocal, ), ;, if, (, nextLocal, ==]
[offsetLocal, <, 0, ), {, long, nextLocal, =, nextTransition, (, instantLocal, -, offsetLocal, ), ;, if, (, nextLocal, ==, (]
[offsetLocal, <, 0, ), {, long, nextLocal, =, nextTransition, (, instantLocal, -, offsetLocal, ), ;, if, (, nextLocal, ==, (]
[0, ), {, long, nextLocal, =, nextTransition, (, instantLocal, -, offsetLocal, ), ;, if, (, nextLocal, ==, (, instantLocal, -]
[nextLocal, =, nextTransition, (, instantLocal, -, offsetLocal, ), ;, if, (, nextLocal, ==, (, instantLocal, -, offsetLocal, ), ), {]
[nextTransition, (, instantLocal, -, offsetLocal, ), ;, if, (, nextLocal, ==, (, instantLocal, -, offsetLocal, ), ), {, nextLocal, =]
[nextTransition, (, instantLocal, -, offsetLocal, ), ;, if, (, nextLocal, ==, (, instantLocal, -, offsetLocal, ), ), {, nextLocal, =]
[(, nextLocal, ==, (, instantLocal, -, offsetLocal, ), ), {, nextLocal, =, Long, ., MAX_VALUE, ;, }, long, nextAdjusted, =]
[==, (, instantLocal, -, offsetLocal, ), ), {, nextLocal, =, Long, ., MAX_VALUE, ;, }, long, nextAdjusted, =, nextTransition, (]
[==, (, instantLocal, -, offsetLocal, ), ), {, nextLocal, =, Long, ., MAX_VALUE, ;, }, long, nextAdjusted, =, nextTransition, (]
[instantLocal, -, offsetLocal, ), ), {, nextLocal, =, Long, ., MAX_VALUE, ;, }, long, nextAdjusted, =, nextTransition, (, instantLocal, -]
[{, nextLocal, =, Long, ., MAX_VALUE, ;, }, long, nextAdjusted, =, nextTransition, (, instantLocal, -, offset, ), ;, if, (]
[{, nextLocal, =, Long, ., MAX_VALUE, ;, }, long, nextAdjusted, =, nextTransition, (, instantLocal, -, offset, ), ;, if, (]
[=, Long, ., MAX_VALUE, ;, }, long, nextAdjusted, =, nextTransition, (, instantLocal, -, offset, ), ;, if, (, nextAdjusted, ==]
[Long, ., MAX_VALUE, ;, }, long, nextAdjusted, =, nextTransition, (, instantLocal, -, offset, ), ;, if, (, nextAdjusted, ==, (]
[Long, ., MAX_VALUE, ;, }, long, nextAdjusted, =, nextTransition, (, instantLocal, -, offset, ), ;, if, (, nextAdjusted, ==, (]
[MAX_VALUE, ;, }, long, nextAdjusted, =, nextTransition, (, instantLocal, -, offset, ), ;, if, (, nextAdjusted, ==, (, instantLocal, -]
[nextAdjusted, =, nextTransition, (, instantLocal, -, offset, ), ;, if, (, nextAdjusted, ==, (, instantLocal, -, offset, ), ), {]
[nextTransition, (, instantLocal, -, offset, ), ;, if, (, nextAdjusted, ==, (, instantLocal, -, offset, ), ), {, nextAdjusted, =]
[nextTransition, (, instantLocal, -, offset, ), ;, if, (, nextAdjusted, ==, (, instantLocal, -, offset, ), ), {, nextAdjusted, =]
[if, (, nextAdjusted, ==, (, instantLocal, -, offset, ), ), {, nextAdjusted, =, Long, ., MAX_VALUE, ;, }, if, (]
[if, (, nextAdjusted, ==, (, instantLocal, -, offset, ), ), {, nextAdjusted, =, Long, ., MAX_VALUE, ;, }, if, (]
[nextAdjusted, ==, (, instantLocal, -, offset, ), ), {, nextAdjusted, =, Long, ., MAX_VALUE, ;, }, if, (, nextLocal, !=]
[offset, ), ), {, nextAdjusted, =, Long, ., MAX_VALUE, ;, }, if, (, nextLocal, !=, nextAdjusted, ), {, if, (]
[nextAdjusted, =, Long, ., MAX_VALUE, ;, }, if, (, nextLocal, !=, nextAdjusted, ), {, if, (, strict, ), {, throw]
[., MAX_VALUE, ;, }, if, (, nextLocal, !=, nextAdjusted, ), {, if, (, strict, ), {, throw, new, IllegalInstantException, (]
[;, }, if, (, nextLocal, !=, nextAdjusted, ), {, if, (, strict, ), {, throw, new, IllegalInstantException, (, instantLocal, ,]
[{, if, (, strict, ), {, throw, new, IllegalInstantException, (, instantLocal, ,, getID, (, ), ), ;, }, else, {]
[(, strict, ), {, throw, new, IllegalInstantException, (, instantLocal, ,, getID, (, ), ), ;, }, else, {, offset, =]
[,, getID, (, ), ), ;, }, else, {, offset, =, offsetLocal, ;, }, }, }, }, long, instantUTC, =]
[,, getID, (, ), ), ;, }, else, {, offset, =, offsetLocal, ;, }, }, }, }, long, instantUTC, =]
[(, ), ), ;, }, else, {, offset, =, offsetLocal, ;, }, }, }, }, long, instantUTC, =, instantLocal, -]
[}, else, {, offset, =, offsetLocal, ;, }, }, }, }, long, instantUTC, =, instantLocal, -, offset, ;, if, (]
[}, else, {, offset, =, offsetLocal, ;, }, }, }, }, long, instantUTC, =, instantLocal, -, offset, ;, if, (]
[}, else, {, offset, =, offsetLocal, ;, }, }, }, }, long, instantUTC, =, instantLocal, -, offset, ;, if, (]
[else, {, offset, =, offsetLocal, ;, }, }, }, }, long, instantUTC, =, instantLocal, -, offset, ;, if, (, (]
[else, {, offset, =, offsetLocal, ;, }, }, }, }, long, instantUTC, =, instantLocal, -, offset, ;, if, (, (]
[offset, =, offsetLocal, ;, }, }, }, }, long, instantUTC, =, instantLocal, -, offset, ;, if, (, (, instantLocal, ^]
[;, }, }, }, }, long, instantUTC, =, instantLocal, -, offset, ;, if, (, (, instantLocal, ^, instantUTC, ), <]
[}, }, }, long, instantUTC, =, instantLocal, -, offset, ;, if, (, (, instantLocal, ^, instantUTC, ), <, 0, &&]
[}, }, }, long, instantUTC, =, instantLocal, -, offset, ;, if, (, (, instantLocal, ^, instantUTC, ), <, 0, &&]
[}, }, long, instantUTC, =, instantLocal, -, offset, ;, if, (, (, instantLocal, ^, instantUTC, ), <, 0, &&, (]
[}, }, long, instantUTC, =, instantLocal, -, offset, ;, if, (, (, instantLocal, ^, instantUTC, ), <, 0, &&, (]
[long, instantUTC, =, instantLocal, -, offset, ;, if, (, (, instantLocal, ^, instantUTC, ), <, 0, &&, (, instantLocal, ^]
[instantLocal, -, offset, ;, if, (, (, instantLocal, ^, instantUTC, ), <, 0, &&, (, instantLocal, ^, offset, ), <]
[if, (, (, instantLocal, ^, instantUTC, ), <, 0, &&, (, instantLocal, ^, offset, ), <, 0, ), {, throw]
[instantLocal, ^, instantUTC, ), <, 0, &&, (, instantLocal, ^, offset, ), <, 0, ), {, throw, new, ArithmeticException, (]
[0, &&, (, instantLocal, ^, offset, ), <, 0, ), {, throw, new, ArithmeticException, (, "Subtracting time zone offset caused overflow", ), ;, }, return]
[), ;, }, return, instantUTC, ;, }, public, long, getMillisKeepLocal, (, DateTimeZone, newZone, ,, long, oldInstant, ), {, if, (]
[), ;, }, return, instantUTC, ;, }, public, long, getMillisKeepLocal, (, DateTimeZone, newZone, ,, long, oldInstant, ), {, if, (]
[}, return, instantUTC, ;, }, public, long, getMillisKeepLocal, (, DateTimeZone, newZone, ,, long, oldInstant, ), {, if, (, newZone, ==]
[;, }, public, long, getMillisKeepLocal, (, DateTimeZone, newZone, ,, long, oldInstant, ), {, if, (, newZone, ==, null, ), {]
[public, long, getMillisKeepLocal, (, DateTimeZone, newZone, ,, long, oldInstant, ), {, if, (, newZone, ==, null, ), {, newZone, =]
[public, long, getMillisKeepLocal, (, DateTimeZone, newZone, ,, long, oldInstant, ), {, if, (, newZone, ==, null, ), {, newZone, =]
[), {, if, (, newZone, ==, null, ), {, newZone, =, DateTimeZone, ., getDefault, (, ), ;, }, if, (]
[), {, if, (, newZone, ==, null, ), {, newZone, =, DateTimeZone, ., getDefault, (, ), ;, }, if, (]
[if, (, newZone, ==, null, ), {, newZone, =, DateTimeZone, ., getDefault, (, ), ;, }, if, (, newZone, ==]
[null, ), {, newZone, =, DateTimeZone, ., getDefault, (, ), ;, }, if, (, newZone, ==, this, ), {, return]
[., getDefault, (, ), ;, }, if, (, newZone, ==, this, ), {, return, oldInstant, ;, }, long, instantLocal, =]
[(, ), ;, }, if, (, newZone, ==, this, ), {, return, oldInstant, ;, }, long, instantLocal, =, convertUTCToLocal, (]
[if, (, newZone, ==, this, ), {, return, oldInstant, ;, }, long, instantLocal, =, convertUTCToLocal, (, oldInstant, ), ;, return]
[if, (, newZone, ==, this, ), {, return, oldInstant, ;, }, long, instantLocal, =, convertUTCToLocal, (, oldInstant, ), ;, return]
[this, ), {, return, oldInstant, ;, }, long, instantLocal, =, convertUTCToLocal, (, oldInstant, ), ;, return, newZone, ., convertLocalToUTC, (]
[{, return, oldInstant, ;, }, long, instantLocal, =, convertUTCToLocal, (, oldInstant, ), ;, return, newZone, ., convertLocalToUTC, (, instantLocal, ,]
[oldInstant, ;, }, long, instantLocal, =, convertUTCToLocal, (, oldInstant, ), ;, return, newZone, ., convertLocalToUTC, (, instantLocal, ,, false, ,]
[convertLocalToUTC, (, instantLocal, ,, false, ,, oldInstant, ), ;, }, public, boolean, isLocalDateTimeGap, (, LocalDateTime, localDateTime, ), {, if, (]
[oldInstant, ), ;, }, public, boolean, isLocalDateTimeGap, (, LocalDateTime, localDateTime, ), {, if, (, isFixed, (, ), ), {, return]
[boolean, isLocalDateTimeGap, (, LocalDateTime, localDateTime, ), {, if, (, isFixed, (, ), ), {, return, false, ;, }, try, {]
[boolean, isLocalDateTimeGap, (, LocalDateTime, localDateTime, ), {, if, (, isFixed, (, ), ), {, return, false, ;, }, try, {]
[localDateTime, ), {, if, (, isFixed, (, ), ), {, return, false, ;, }, try, {, localDateTime, ., toDateTime, (]
[(, isFixed, (, ), ), {, return, false, ;, }, try, {, localDateTime, ., toDateTime, (, this, ), ;, return]
[try, {, localDateTime, ., toDateTime, (, this, ), ;, return, false, ;, }, catch, (, IllegalInstantException, ex, ), {, return]
[{, return, true, ;, }, }, public, long, adjustOffset, (, long, instant, ,, boolean, earlierOrLater, ), {, long, instantBefore, =]
[{, return, true, ;, }, }, public, long, adjustOffset, (, long, instant, ,, boolean, earlierOrLater, ), {, long, instantBefore, =]
[true, ;, }, }, public, long, adjustOffset, (, long, instant, ,, boolean, earlierOrLater, ), {, long, instantBefore, =, instant, -]
[true, ;, }, }, public, long, adjustOffset, (, long, instant, ,, boolean, earlierOrLater, ), {, long, instantBefore, =, instant, -]
[}, }, public, long, adjustOffset, (, long, instant, ,, boolean, earlierOrLater, ), {, long, instantBefore, =, instant, -, 3, *]
[}, }, public, long, adjustOffset, (, long, instant, ,, boolean, earlierOrLater, ), {, long, instantBefore, =, instant, -, 3, *]
[instant, ,, boolean, earlierOrLater, ), {, long, instantBefore, =, instant, -, 3, *, DateTimeConstants, ., MILLIS_PER_HOUR, ;, long, instantAfter, =]
[instant, ,, boolean, earlierOrLater, ), {, long, instantBefore, =, instant, -, 3, *, DateTimeConstants, ., MILLIS_PER_HOUR, ;, long, instantAfter, =]
[boolean, earlierOrLater, ), {, long, instantBefore, =, instant, -, 3, *, DateTimeConstants, ., MILLIS_PER_HOUR, ;, long, instantAfter, =, instant, +]
[boolean, earlierOrLater, ), {, long, instantBefore, =, instant, -, 3, *, DateTimeConstants, ., MILLIS_PER_HOUR, ;, long, instantAfter, =, instant, +]
[), {, long, instantBefore, =, instant, -, 3, *, DateTimeConstants, ., MILLIS_PER_HOUR, ;, long, instantAfter, =, instant, +, 3, *]
[), {, long, instantBefore, =, instant, -, 3, *, DateTimeConstants, ., MILLIS_PER_HOUR, ;, long, instantAfter, =, instant, +, 3, *]
[3, *, DateTimeConstants, ., MILLIS_PER_HOUR, ;, long, instantAfter, =, instant, +, 3, *, DateTimeConstants, ., MILLIS_PER_HOUR, ;, long, offsetBefore, =]
[DateTimeConstants, ., MILLIS_PER_HOUR, ;, long, instantAfter, =, instant, +, 3, *, DateTimeConstants, ., MILLIS_PER_HOUR, ;, long, offsetBefore, =, getOffset, (]
[=, instant, +, 3, *, DateTimeConstants, ., MILLIS_PER_HOUR, ;, long, offsetBefore, =, getOffset, (, instantBefore, ), ;, long, offsetAfter, =]
[+, 3, *, DateTimeConstants, ., MILLIS_PER_HOUR, ;, long, offsetBefore, =, getOffset, (, instantBefore, ), ;, long, offsetAfter, =, getOffset, (]
[MILLIS_PER_HOUR, ;, long, offsetBefore, =, getOffset, (, instantBefore, ), ;, long, offsetAfter, =, getOffset, (, instantAfter, ), ;, if, (]
[MILLIS_PER_HOUR, ;, long, offsetBefore, =, getOffset, (, instantBefore, ), ;, long, offsetAfter, =, getOffset, (, instantAfter, ), ;, if, (]
[long, offsetBefore, =, getOffset, (, instantBefore, ), ;, long, offsetAfter, =, getOffset, (, instantAfter, ), ;, if, (, offsetBefore, <=]
[(, instantBefore, ), ;, long, offsetAfter, =, getOffset, (, instantAfter, ), ;, if, (, offsetBefore, <=, offsetAfter, ), {, return]
[=, getOffset, (, instantAfter, ), ;, if, (, offsetBefore, <=, offsetAfter, ), {, return, instant, ;, }, long, diff, =]
[=, getOffset, (, instantAfter, ), ;, if, (, offsetBefore, <=, offsetAfter, ), {, return, instant, ;, }, long, diff, =]
[(, instantAfter, ), ;, if, (, offsetBefore, <=, offsetAfter, ), {, return, instant, ;, }, long, diff, =, offsetBefore, -]
[(, offsetBefore, <=, offsetAfter, ), {, return, instant, ;, }, long, diff, =, offsetBefore, -, offsetAfter, ;, long, transition, =]
[<=, offsetAfter, ), {, return, instant, ;, }, long, diff, =, offsetBefore, -, offsetAfter, ;, long, transition, =, nextTransition, (]
[;, }, long, diff, =, offsetBefore, -, offsetAfter, ;, long, transition, =, nextTransition, (, instantBefore, ), ;, long, overlapStart, =]
[;, }, long, diff, =, offsetBefore, -, offsetAfter, ;, long, transition, =, nextTransition, (, instantBefore, ), ;, long, overlapStart, =]
[long, diff, =, offsetBefore, -, offsetAfter, ;, long, transition, =, nextTransition, (, instantBefore, ), ;, long, overlapStart, =, transition, -]
[offsetAfter, ;, long, transition, =, nextTransition, (, instantBefore, ), ;, long, overlapStart, =, transition, -, diff, ;, long, overlapEnd, =]
[offsetAfter, ;, long, transition, =, nextTransition, (, instantBefore, ), ;, long, overlapStart, =, transition, -, diff, ;, long, overlapEnd, =]
[long, transition, =, nextTransition, (, instantBefore, ), ;, long, overlapStart, =, transition, -, diff, ;, long, overlapEnd, =, transition, +]
[(, instantBefore, ), ;, long, overlapStart, =, transition, -, diff, ;, long, overlapEnd, =, transition, +, diff, ;, if, (]
[(, instantBefore, ), ;, long, overlapStart, =, transition, -, diff, ;, long, overlapEnd, =, transition, +, diff, ;, if, (]
[(, instantBefore, ), ;, long, overlapStart, =, transition, -, diff, ;, long, overlapEnd, =, transition, +, diff, ;, if, (]
[), ;, long, overlapStart, =, transition, -, diff, ;, long, overlapEnd, =, transition, +, diff, ;, if, (, instant, <]
[long, overlapStart, =, transition, -, diff, ;, long, overlapEnd, =, transition, +, diff, ;, if, (, instant, <, overlapStart, ||]
[long, overlapStart, =, transition, -, diff, ;, long, overlapEnd, =, transition, +, diff, ;, if, (, instant, <, overlapStart, ||]
[=, transition, -, diff, ;, long, overlapEnd, =, transition, +, diff, ;, if, (, instant, <, overlapStart, ||, instant, >=]
[;, long, overlapEnd, =, transition, +, diff, ;, if, (, instant, <, overlapStart, ||, instant, >=, overlapEnd, ), {, return]
[diff, ;, if, (, instant, <, overlapStart, ||, instant, >=, overlapEnd, ), {, return, instant, ;, }, long, afterStart, =]
[diff, ;, if, (, instant, <, overlapStart, ||, instant, >=, overlapEnd, ), {, return, instant, ;, }, long, afterStart, =]
[if, (, instant, <, overlapStart, ||, instant, >=, overlapEnd, ), {, return, instant, ;, }, long, afterStart, =, instant, -]
[overlapStart, ||, instant, >=, overlapEnd, ), {, return, instant, ;, }, long, afterStart, =, instant, -, overlapStart, ;, if, (]
[overlapStart, ||, instant, >=, overlapEnd, ), {, return, instant, ;, }, long, afterStart, =, instant, -, overlapStart, ;, if, (]
[instant, >=, overlapEnd, ), {, return, instant, ;, }, long, afterStart, =, instant, -, overlapStart, ;, if, (, afterStart, >=]
[{, return, instant, ;, }, long, afterStart, =, instant, -, overlapStart, ;, if, (, afterStart, >=, diff, ), {, return]
[{, return, instant, ;, }, long, afterStart, =, instant, -, overlapStart, ;, if, (, afterStart, >=, diff, ), {, return]
[instant, ;, }, long, afterStart, =, instant, -, overlapStart, ;, if, (, afterStart, >=, diff, ), {, return, earlierOrLater, ?]
[}, long, afterStart, =, instant, -, overlapStart, ;, if, (, afterStart, >=, diff, ), {, return, earlierOrLater, ?, instant, :]
[}, long, afterStart, =, instant, -, overlapStart, ;, if, (, afterStart, >=, diff, ), {, return, earlierOrLater, ?, instant, :]
[afterStart, =, instant, -, overlapStart, ;, if, (, afterStart, >=, diff, ), {, return, earlierOrLater, ?, instant, :, instant, -]
[if, (, afterStart, >=, diff, ), {, return, earlierOrLater, ?, instant, :, instant, -, diff, ;, }, else, {, return]
[if, (, afterStart, >=, diff, ), {, return, earlierOrLater, ?, instant, :, instant, -, diff, ;, }, else, {, return]
[afterStart, >=, diff, ), {, return, earlierOrLater, ?, instant, :, instant, -, diff, ;, }, else, {, return, earlierOrLater, ?]
[afterStart, >=, diff, ), {, return, earlierOrLater, ?, instant, :, instant, -, diff, ;, }, else, {, return, earlierOrLater, ?]
[diff, ), {, return, earlierOrLater, ?, instant, :, instant, -, diff, ;, }, else, {, return, earlierOrLater, ?, instant, +]
[{, return, earlierOrLater, ?, instant, :, instant, -, diff, ;, }, else, {, return, earlierOrLater, ?, instant, +, diff, :]
[public, abstract, long, previousTransition, (, long, instant, ), ;, public, java, ., util, ., TimeZone, toTimeZone, (, ), {, return]
[public, abstract, long, previousTransition, (, long, instant, ), ;, public, java, ., util, ., TimeZone, toTimeZone, (, ), {, return]
[public, abstract, long, previousTransition, (, long, instant, ), ;, public, java, ., util, ., TimeZone, toTimeZone, (, ), {, return]
[public, abstract, long, previousTransition, (, long, instant, ), ;, public, java, ., util, ., TimeZone, toTimeZone, (, ), {, return]
[;, public, java, ., util, ., TimeZone, toTimeZone, (, ), {, return, java, ., util, ., TimeZone, ., getTimeZone, (]
[iID, ), ;, }, public, abstract, boolean, equals, (, Object, object, ), ;, public, int, hashCode, (, ), {, return]
[iID, ), ;, }, public, abstract, boolean, equals, (, Object, object, ), ;, public, int, hashCode, (, ), {, return]
[;, }, public, abstract, boolean, equals, (, Object, object, ), ;, public, int, hashCode, (, ), {, return, 57, +]
[;, }, public, abstract, boolean, equals, (, Object, object, ), ;, public, int, hashCode, (, ), {, return, 57, +]
[{, return, 57, +, getID, (, ), ., hashCode, (, ), ;, }, public, String, toString, (, ), {, return]
[String, toString, (, ), {, return, getID, (, ), ;, }, protected, Object, writeReplace, (, ), throws, ObjectStreamException, {, return]
[), {, return, getID, (, ), ;, }, protected, Object, writeReplace, (, ), throws, ObjectStreamException, {, return, new, Stub, (]
[Stub, (, iID, ), ;, }, private, static, final, class, Stub, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[(, iID, ), ;, }, private, static, final, class, Stub, implements, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[private, static, final, long, serialVersionUID, =, -, 6471952376487863581L, ;, private, transient, String, iID, ;, Stub, (, String, id, ), {]
[final, long, serialVersionUID, =, -, 6471952376487863581L, ;, private, transient, String, iID, ;, Stub, (, String, id, ), {, iID, =]
[(, String, id, ), {, iID, =, id, ;, }, private, void, writeObject, (, ObjectOutputStream, out, ), throws, IOException, {]
[(, String, id, ), {, iID, =, id, ;, }, private, void, writeObject, (, ObjectOutputStream, out, ), throws, IOException, {]
[{, iID, =, id, ;, }, private, void, writeObject, (, ObjectOutputStream, out, ), throws, IOException, {, out, ., writeUTF, (]
[IOException, {, out, ., writeUTF, (, iID, ), ;, }, private, void, readObject, (, ObjectInputStream, in, ), throws, IOException, {]
[out, ., writeUTF, (, iID, ), ;, }, private, void, readObject, (, ObjectInputStream, in, ), throws, IOException, {, iID, =]
[out, ., writeUTF, (, iID, ), ;, }, private, void, readObject, (, ObjectInputStream, in, ), throws, IOException, {, iID, =]
[IOException, {, iID, =, in, ., readUTF, (, ), ;, }, private, Object, readResolve, (, ), throws, ObjectStreamException, {, return]
[iID, =, in, ., readUTF, (, ), ;, }, private, Object, readResolve, (, ), throws, ObjectStreamException, {, return, forID, (]
