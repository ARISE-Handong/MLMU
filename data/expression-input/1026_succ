[;, }, catch, (, final, NoSuchMethodException, e, ), {, throw, new, IllegalArgumentException, (, "Class ", +, eventSource, ., getClass, (, )]
[., invokeMethod, (, eventSource, ,, "add", +, listenerType, ., getSimpleName, (, ), ,, listener, ), ;, }, catch, (, final]
[,, "add", +, listenerType, ., getSimpleName, (, ), ,, listener, ), ;, }, catch, (, final, NoSuchMethodException, e, ), {]
[,, listener, ), ;, }, catch, (, final, NoSuchMethodException, e, ), {, throw, new, IllegalArgumentException, (, "Class ", +, eventSource, .]
[+, listenerType, ., getSimpleName, (, ), ,, listener, ), ;, }, catch, (, final, NoSuchMethodException, e, ), {, throw, new]
[,, listener, ), ;, }, catch, (, final, NoSuchMethodException, e, ), {, throw, new, IllegalArgumentException, (, "Class ", +, eventSource, .]
[., getSimpleName, (, ), ,, listener, ), ;, }, catch, (, final, NoSuchMethodException, e, ), {, throw, new, IllegalArgumentException, (]
[), ;, }, catch, (, final, NoSuchMethodException, e, ), {, throw, new, IllegalArgumentException, (, "Class ", +, eventSource, ., getClass, (]
[;, }, catch, (, final, IllegalAccessException, e, ), {, throw, new, IllegalArgumentException, (, "Class ", +, eventSource, ., getClass, (, )]
[), ;, }, catch, (, final, IllegalAccessException, e, ), {, throw, new, IllegalArgumentException, (, "Class ", +, eventSource, ., getClass, (]
[+, ".", ), ;, }, catch, (, final, IllegalAccessException, e, ), {, throw, new, IllegalArgumentException, (, "Class ", +, eventSource, .]
[+, listenerType, ., getName, (, ), +, ".", ), ;, }, catch, (, final, IllegalAccessException, e, ), {, throw, new]
[+, " method which takes a parameter of type ", +, listenerType, ., getName, (, ), +, ".", ), ;, }, catch, (, final, IllegalAccessException, e, ), {]
[+, listenerType, ., getSimpleName, (, ), +, " method which takes a parameter of type ", +, listenerType, ., getName, (, ), +, ".", ), ;, }, catch]
[+, " does not have a public add", +, listenerType, ., getSimpleName, (, ), +, " method which takes a parameter of type ", +, listenerType, ., getName, (, ), +, ".", ), ;]
[+, eventSource, ., getClass, (, ), ., getName, (, ), +, " does not have a public add", +, listenerType, ., getSimpleName, (, ), +, " method which takes a parameter of type "]
[+, " does not have a public add", +, listenerType, ., getSimpleName, (, ), +, " method which takes a parameter of type ", +, listenerType, ., getName, (, ), +, ".", ), ;]
[., getName, (, ), +, " does not have a public add", +, listenerType, ., getSimpleName, (, ), +, " method which takes a parameter of type ", +, listenerType, ., getName, (, )]
[., getClass, (, ), ., getName, (, ), +, " does not have a public add", +, listenerType, ., getSimpleName, (, ), +, " method which takes a parameter of type ", +, listenerType]
[+, listenerType, ., getSimpleName, (, ), +, " method which takes a parameter of type ", +, listenerType, ., getName, (, ), +, ".", ), ;, }, catch]
[+, " method which takes a parameter of type ", +, listenerType, ., getName, (, ), +, ".", ), ;, }, catch, (, final, IllegalAccessException, e, ), {]
[., getSimpleName, (, ), +, " method which takes a parameter of type ", +, listenerType, ., getName, (, ), +, ".", ), ;, }, catch, (, final]
[+, listenerType, ., getName, (, ), +, ".", ), ;, }, catch, (, final, IllegalAccessException, e, ), {, throw, new]
[+, ".", ), ;, }, catch, (, final, IllegalAccessException, e, ), {, throw, new, IllegalArgumentException, (, "Class ", +, eventSource, .]
[., getName, (, ), +, ".", ), ;, }, catch, (, final, IllegalAccessException, e, ), {, throw, new, IllegalArgumentException, (]
[), ;, }, catch, (, final, IllegalAccessException, e, ), {, throw, new, IllegalArgumentException, (, "Class ", +, eventSource, ., getClass, (]
[;, }, catch, (, final, InvocationTargetException, e, ), {, throw, new, RuntimeException, (, "Unable to add listener.", ,, e, ., getCause, (, )]
[), ;, }, catch, (, final, InvocationTargetException, e, ), {, throw, new, RuntimeException, (, "Unable to add listener.", ,, e, ., getCause, (]
[+, ".", ), ;, }, catch, (, final, InvocationTargetException, e, ), {, throw, new, RuntimeException, (, "Unable to add listener.", ,, e, .]
[+, listenerType, ., getName, (, ), +, ".", ), ;, }, catch, (, final, InvocationTargetException, e, ), {, throw, new]
[+, " method which takes a parameter of type ", +, listenerType, ., getName, (, ), +, ".", ), ;, }, catch, (, final, InvocationTargetException, e, ), {]
[+, listenerType, ., getSimpleName, (, ), +, " method which takes a parameter of type ", +, listenerType, ., getName, (, ), +, ".", ), ;, }, catch]
[+, " does not have an accessible add", +, listenerType, ., getSimpleName, (, ), +, " method which takes a parameter of type ", +, listenerType, ., getName, (, ), +, ".", ), ;]
[+, eventSource, ., getClass, (, ), ., getName, (, ), +, " does not have an accessible add", +, listenerType, ., getSimpleName, (, ), +, " method which takes a parameter of type "]
[+, " does not have an accessible add", +, listenerType, ., getSimpleName, (, ), +, " method which takes a parameter of type ", +, listenerType, ., getName, (, ), +, ".", ), ;]
[., getName, (, ), +, " does not have an accessible add", +, listenerType, ., getSimpleName, (, ), +, " method which takes a parameter of type ", +, listenerType, ., getName, (, )]
[., getClass, (, ), ., getName, (, ), +, " does not have an accessible add", +, listenerType, ., getSimpleName, (, ), +, " method which takes a parameter of type ", +, listenerType]
[+, listenerType, ., getSimpleName, (, ), +, " method which takes a parameter of type ", +, listenerType, ., getName, (, ), +, ".", ), ;, }, catch]
[+, " method which takes a parameter of type ", +, listenerType, ., getName, (, ), +, ".", ), ;, }, catch, (, final, InvocationTargetException, e, ), {]
[., getSimpleName, (, ), +, " method which takes a parameter of type ", +, listenerType, ., getName, (, ), +, ".", ), ;, }, catch, (, final]
[+, listenerType, ., getName, (, ), +, ".", ), ;, }, catch, (, final, InvocationTargetException, e, ), {, throw, new]
[+, ".", ), ;, }, catch, (, final, InvocationTargetException, e, ), {, throw, new, RuntimeException, (, "Unable to add listener.", ,, e, .]
[., getName, (, ), +, ".", ), ;, }, catch, (, final, InvocationTargetException, e, ), {, throw, new, RuntimeException, (]
[), ;, }, catch, (, final, InvocationTargetException, e, ), {, throw, new, RuntimeException, (, "Unable to add listener.", ,, e, ., getCause, (]
[;, }, }, public, static, <, L, >, void, bindEventsToMethod, (, final, Object, target, ,, final, String, methodName, ,, final]
[,, e, ., getCause, (, ), ), ;, }, }, public, static, <, L, >, void, bindEventsToMethod, (, final, Object]
[), ;, }, }, public, static, <, L, >, void, bindEventsToMethod, (, final, Object, target, ,, final, String, methodName, ,]
[., getCause, (, ), ), ;, }, }, public, static, <, L, >, void, bindEventsToMethod, (, final, Object, target, ,]
[;, addEventListener, (, eventSource, ,, listenerType, ,, listener, ), ;, }, private, static, class, EventBindingInvocationHandler, implements, InvocationHandler, {, private, final]
[., cast, (, Proxy, ., newProxyInstance, (, target, ., getClass, (, ), ., getClassLoader, (, ), ,, new, Class, []
[), ;, addEventListener, (, eventSource, ,, listenerType, ,, listener, ), ;, }, private, static, class, EventBindingInvocationHandler, implements, InvocationHandler, {, private]
[., newProxyInstance, (, target, ., getClass, (, ), ., getClassLoader, (, ), ,, new, Class, [, ], {, listenerType, }]
[,, new, Class, [, ], {, listenerType, }, ,, new, EventBindingInvocationHandler, (, target, ,, methodName, ,, eventTypes, ), ), )]
[., getClassLoader, (, ), ,, new, Class, [, ], {, listenerType, }, ,, new, EventBindingInvocationHandler, (, target, ,, methodName, ,]
[., getClass, (, ), ., getClassLoader, (, ), ,, new, Class, [, ], {, listenerType, }, ,, new, EventBindingInvocationHandler, (]
[,, new, EventBindingInvocationHandler, (, target, ,, methodName, ,, eventTypes, ), ), ), ;, addEventListener, (, eventSource, ,, listenerType, ,, listener]
[,, new, EventBindingInvocationHandler, (, target, ,, methodName, ,, eventTypes, ), ), ), ;, addEventListener, (, eventSource, ,, listenerType, ,, listener]
[}, ,, new, EventBindingInvocationHandler, (, target, ,, methodName, ,, eventTypes, ), ), ), ;, addEventListener, (, eventSource, ,, listenerType, ,]
[), ), ;, addEventListener, (, eventSource, ,, listenerType, ,, listener, ), ;, }, private, static, class, EventBindingInvocationHandler, implements, InvocationHandler, {]
[,, methodName, ,, eventTypes, ), ), ), ;, addEventListener, (, eventSource, ,, listenerType, ,, listener, ), ;, }, private, static]
[,, eventTypes, ), ), ), ;, addEventListener, (, eventSource, ,, listenerType, ,, listener, ), ;, }, private, static, class, EventBindingInvocationHandler]
[), ), ), ;, addEventListener, (, eventSource, ,, listenerType, ,, listener, ), ;, }, private, static, class, EventBindingInvocationHandler, implements, InvocationHandler]
[;, }, private, static, class, EventBindingInvocationHandler, implements, InvocationHandler, {, private, final, Object, target, ;, private, final, String, methodName, ;, private]
[,, listenerType, ,, listener, ), ;, }, private, static, class, EventBindingInvocationHandler, implements, InvocationHandler, {, private, final, Object, target, ;, private]
[,, listener, ), ;, }, private, static, class, EventBindingInvocationHandler, implements, InvocationHandler, {, private, final, Object, target, ;, private, final, String]
[), ;, }, private, static, class, EventBindingInvocationHandler, implements, InvocationHandler, {, private, final, Object, target, ;, private, final, String, methodName, ;]
[=, target, ;, this, ., methodName, =, methodName, ;, this, ., eventTypes, =, new, HashSet, <, String, >, (, Arrays]
[., target, =, target, ;, this, ., methodName, =, methodName, ;, this, ., eventTypes, =, new, HashSet, <, String, >]
[;, this, ., methodName, =, methodName, ;, this, ., eventTypes, =, new, HashSet, <, String, >, (, Arrays, ., asList]
[=, methodName, ;, this, ., eventTypes, =, new, HashSet, <, String, >, (, Arrays, ., asList, (, eventTypes, ), )]
[., methodName, =, methodName, ;, this, ., eventTypes, =, new, HashSet, <, String, >, (, Arrays, ., asList, (, eventTypes]
[;, this, ., eventTypes, =, new, HashSet, <, String, >, (, Arrays, ., asList, (, eventTypes, ), ), ;, }]
[=, new, HashSet, <, String, >, (, Arrays, ., asList, (, eventTypes, ), ), ;, }, @, Override, public, Object]
[., eventTypes, =, new, HashSet, <, String, >, (, Arrays, ., asList, (, eventTypes, ), ), ;, }, @, Override]
[;, }, @, Override, public, Object, invoke, (, final, Object, proxy, ,, final, Method, method, ,, final, Object, [, ]]
[), ;, }, @, Override, public, Object, invoke, (, final, Object, proxy, ,, final, Method, method, ,, final, Object, []
[., asList, (, eventTypes, ), ), ;, }, @, Override, public, Object, invoke, (, final, Object, proxy, ,, final, Method]
[), ), ;, }, @, Override, public, Object, invoke, (, final, Object, proxy, ,, final, Method, method, ,, final, Object]
[), {, if, (, hasMatchingParametersMethod, (, method, ), ), {, return, MethodUtils, ., invokeMethod, (, target, ,, methodName, ,, parameters]
[||, eventTypes, ., contains, (, method, ., getName, (, ), ), ), {, if, (, hasMatchingParametersMethod, (, method, ), )]
[., isEmpty, (, ), ||, eventTypes, ., contains, (, method, ., getName, (, ), ), ), {, if, (, hasMatchingParametersMethod]
[), {, if, (, hasMatchingParametersMethod, (, method, ), ), {, return, MethodUtils, ., invokeMethod, (, target, ,, methodName, ,, parameters]
[., contains, (, method, ., getName, (, ), ), ), {, if, (, hasMatchingParametersMethod, (, method, ), ), {, return]
[), ), {, if, (, hasMatchingParametersMethod, (, method, ), ), {, return, MethodUtils, ., invokeMethod, (, target, ,, methodName, ,]
[., getName, (, ), ), ), {, if, (, hasMatchingParametersMethod, (, method, ), ), {, return, MethodUtils, ., invokeMethod, (]
[), {, return, MethodUtils, ., invokeMethod, (, target, ,, methodName, ,, parameters, ), ;, }, else, {, return, MethodUtils, .]
[), ), {, return, MethodUtils, ., invokeMethod, (, target, ,, methodName, ,, parameters, ), ;, }, else, {, return, MethodUtils]
[;, }, else, {, return, MethodUtils, ., invokeMethod, (, target, ,, methodName, ), ;, }, }, return, null, ;, }]
[., invokeMethod, (, target, ,, methodName, ,, parameters, ), ;, }, else, {, return, MethodUtils, ., invokeMethod, (, target, ,]
[,, methodName, ,, parameters, ), ;, }, else, {, return, MethodUtils, ., invokeMethod, (, target, ,, methodName, ), ;, }]
[,, parameters, ), ;, }, else, {, return, MethodUtils, ., invokeMethod, (, target, ,, methodName, ), ;, }, }, return]
[), ;, }, else, {, return, MethodUtils, ., invokeMethod, (, target, ,, methodName, ), ;, }, }, return, null, ;]
[;, }, }, return, null, ;, }, private, boolean, hasMatchingParametersMethod, (, final, Method, method, ), {, return, MethodUtils, ., getAccessibleMethod]
[., invokeMethod, (, target, ,, methodName, ), ;, }, }, return, null, ;, }, private, boolean, hasMatchingParametersMethod, (, final, Method]
[,, methodName, ), ;, }, }, return, null, ;, }, private, boolean, hasMatchingParametersMethod, (, final, Method, method, ), {, return]
[), ;, }, }, return, null, ;, }, private, boolean, hasMatchingParametersMethod, (, final, Method, method, ), {, return, MethodUtils, .]
[;, }, private, boolean, hasMatchingParametersMethod, (, final, Method, method, ), {, return, MethodUtils, ., getAccessibleMethod, (, target, ., getClass, (]
[;, }, }, }]
[!=, null, ;, }, }, }]
[., getAccessibleMethod, (, target, ., getClass, (, ), ,, methodName, ,, method, ., getParameterTypes, (, ), ), !=, null, ;]
[,, methodName, ,, method, ., getParameterTypes, (, ), ), !=, null, ;, }, }, }]
[., getClass, (, ), ,, methodName, ,, method, ., getParameterTypes, (, ), ), !=, null, ;, }, }, }]
[,, method, ., getParameterTypes, (, ), ), !=, null, ;, }, }, }]
[), !=, null, ;, }, }, }]
[., getParameterTypes, (, ), ), !=, null, ;, }, }, }]
[;, }, }, }]
