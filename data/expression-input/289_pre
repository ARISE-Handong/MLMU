[;, import, java, ., io, ., Serializable, ;, public, class, RectangleInsets, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[public, class, RectangleInsets, implements, Serializable, {, private, static, final, long, serialVersionUID, =, 1902273207559319996L, ;, public, static, final, RectangleInsets, ZERO_INSETS, =]
[implements, Serializable, {, private, static, final, long, serialVersionUID, =, 1902273207559319996L, ;, public, static, final, RectangleInsets, ZERO_INSETS, =, new, RectangleInsets, (]
[implements, Serializable, {, private, static, final, long, serialVersionUID, =, 1902273207559319996L, ;, public, static, final, RectangleInsets, ZERO_INSETS, =, new, RectangleInsets, (]
[static, final, long, serialVersionUID, =, 1902273207559319996L, ;, public, static, final, RectangleInsets, ZERO_INSETS, =, new, RectangleInsets, (, UnitType, ., ABSOLUTE, ,]
[long, serialVersionUID, =, 1902273207559319996L, ;, public, static, final, RectangleInsets, ZERO_INSETS, =, new, RectangleInsets, (, UnitType, ., ABSOLUTE, ,, 0.0, ,]
[=, 1902273207559319996L, ;, public, static, final, RectangleInsets, ZERO_INSETS, =, new, RectangleInsets, (, UnitType, ., ABSOLUTE, ,, 0.0, ,, 0.0, ,]
[;, public, static, final, RectangleInsets, ZERO_INSETS, =, new, RectangleInsets, (, UnitType, ., ABSOLUTE, ,, 0.0, ,, 0.0, ,, 0.0, ,]
[;, private, double, left, ;, private, double, bottom, ;, private, double, right, ;, public, RectangleInsets, (, ), {, this, (]
[double, left, ;, private, double, bottom, ;, private, double, right, ;, public, RectangleInsets, (, ), {, this, (, 1.0, ,]
[;, private, double, bottom, ;, private, double, right, ;, public, RectangleInsets, (, ), {, this, (, 1.0, ,, 1.0, ,]
[double, bottom, ;, private, double, right, ;, public, RectangleInsets, (, ), {, this, (, 1.0, ,, 1.0, ,, 1.0, ,]
[;, }, public, RectangleInsets, (, double, top, ,, double, left, ,, double, bottom, ,, double, right, ), {, this, (]
[;, }, public, RectangleInsets, (, double, top, ,, double, left, ,, double, bottom, ,, double, right, ), {, this, (]
[(, double, top, ,, double, left, ,, double, bottom, ,, double, right, ), {, this, (, UnitType, ., ABSOLUTE, ,]
[top, ,, double, left, ,, double, bottom, ,, double, right, ), {, this, (, UnitType, ., ABSOLUTE, ,, top, ,]
[double, left, ,, double, bottom, ,, double, right, ), {, this, (, UnitType, ., ABSOLUTE, ,, top, ,, left, ,]
[,, double, bottom, ,, double, right, ), {, this, (, UnitType, ., ABSOLUTE, ,, top, ,, left, ,, bottom, ,]
[RectangleInsets, (, UnitType, unitType, ,, double, top, ,, double, left, ,, double, bottom, ,, double, right, ), {, if, (]
[RectangleInsets, (, UnitType, unitType, ,, double, top, ,, double, left, ,, double, bottom, ,, double, right, ), {, if, (]
[UnitType, unitType, ,, double, top, ,, double, left, ,, double, bottom, ,, double, right, ), {, if, (, unitType, ==]
[top, ,, double, left, ,, double, bottom, ,, double, right, ), {, if, (, unitType, ==, null, ), {, throw]
[left, ,, double, bottom, ,, double, right, ), {, if, (, unitType, ==, null, ), {, throw, new, IllegalArgumentException, (]
[,, double, right, ), {, if, (, unitType, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'unitType' argument.", ), ;, }]
[,, double, right, ), {, if, (, unitType, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'unitType' argument.", ), ;, }]
[{, if, (, unitType, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'unitType' argument.", ), ;, }, this, ., unitType, =]
[(, unitType, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'unitType' argument.", ), ;, }, this, ., unitType, =, unitType, ;]
[(, unitType, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'unitType' argument.", ), ;, }, this, ., unitType, =, unitType, ;]
[), {, throw, new, IllegalArgumentException, (, "Null 'unitType' argument.", ), ;, }, this, ., unitType, =, unitType, ;, this, ., top, =]
[throw, new, IllegalArgumentException, (, "Null 'unitType' argument.", ), ;, }, this, ., unitType, =, unitType, ;, this, ., top, =, top, ;]
[throw, new, IllegalArgumentException, (, "Null 'unitType' argument.", ), ;, }, this, ., unitType, =, unitType, ;, this, ., top, =, top, ;]
["Null 'unitType' argument.", ), ;, }, this, ., unitType, =, unitType, ;, this, ., top, =, top, ;, this, ., bottom, =]
[;, }, this, ., unitType, =, unitType, ;, this, ., top, =, top, ;, this, ., bottom, =, bottom, ;]
[;, }, this, ., unitType, =, unitType, ;, this, ., top, =, top, ;, this, ., bottom, =, bottom, ;]
[unitType, =, unitType, ;, this, ., top, =, top, ;, this, ., bottom, =, bottom, ;, this, ., left, =]
[unitType, ;, this, ., top, =, top, ;, this, ., bottom, =, bottom, ;, this, ., left, =, left, ;]
[unitType, ;, this, ., top, =, top, ;, this, ., bottom, =, bottom, ;, this, ., left, =, left, ;]
[top, =, top, ;, this, ., bottom, =, bottom, ;, this, ., left, =, left, ;, this, ., right, =]
[this, ., left, =, left, ;, this, ., right, =, right, ;, }, public, UnitType, getUnitType, (, ), {, return]
[this, ., left, =, left, ;, this, ., right, =, right, ;, }, public, UnitType, getUnitType, (, ), {, return]
[}, public, UnitType, getUnitType, (, ), {, return, this, ., unitType, ;, }, public, double, getTop, (, ), {, return]
[}, public, UnitType, getUnitType, (, ), {, return, this, ., unitType, ;, }, public, double, getTop, (, ), {, return]
[}, public, double, getTop, (, ), {, return, this, ., top, ;, }, public, double, getBottom, (, ), {, return]
[}, public, double, getTop, (, ), {, return, this, ., top, ;, }, public, double, getBottom, (, ), {, return]
[}, public, double, getBottom, (, ), {, return, this, ., bottom, ;, }, public, double, getLeft, (, ), {, return]
[}, public, double, getBottom, (, ), {, return, this, ., bottom, ;, }, public, double, getLeft, (, ), {, return]
[}, public, double, getLeft, (, ), {, return, this, ., left, ;, }, public, double, getRight, (, ), {, return]
[}, public, double, getLeft, (, ), {, return, this, ., left, ;, }, public, double, getRight, (, ), {, return]
[getRight, (, ), {, return, this, ., right, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[getRight, (, ), {, return, this, ., right, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[), {, return, this, ., right, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[., right, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, RectangleInsets, ), ), {, return]
[;, }, if, (, !, (, obj, instanceof, RectangleInsets, ), ), {, return, false, ;, }, final, RectangleInsets, that, =]
[(, !, (, obj, instanceof, RectangleInsets, ), ), {, return, false, ;, }, final, RectangleInsets, that, =, (, RectangleInsets, )]
[instanceof, RectangleInsets, ), ), {, return, false, ;, }, final, RectangleInsets, that, =, (, RectangleInsets, ), obj, ;, if, (]
[instanceof, RectangleInsets, ), ), {, return, false, ;, }, final, RectangleInsets, that, =, (, RectangleInsets, ), obj, ;, if, (]
[instanceof, RectangleInsets, ), ), {, return, false, ;, }, final, RectangleInsets, that, =, (, RectangleInsets, ), obj, ;, if, (]
[{, return, false, ;, }, final, RectangleInsets, that, =, (, RectangleInsets, ), obj, ;, if, (, that, ., unitType, !=]
[{, return, false, ;, }, final, RectangleInsets, that, =, (, RectangleInsets, ), obj, ;, if, (, that, ., unitType, !=]
[RectangleInsets, that, =, (, RectangleInsets, ), obj, ;, if, (, that, ., unitType, !=, this, ., unitType, ), {, return]
[), obj, ;, if, (, that, ., unitType, !=, this, ., unitType, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, that, ., unitType, !=, this, ., unitType, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, that, ., unitType, !=, this, ., unitType, ), {, return, false, ;, }, if, (]
[(, that, ., unitType, !=, this, ., unitType, ), {, return, false, ;, }, if, (, this, ., left, !=]
[(, that, ., unitType, !=, this, ., unitType, ), {, return, false, ;, }, if, (, this, ., left, !=]
[., unitType, ), {, return, false, ;, }, if, (, this, ., left, !=, that, ., left, ), {, return]
[false, ;, }, if, (, this, ., left, !=, that, ., left, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., left, !=, that, ., left, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., left, !=, that, ., left, ), {, return, false, ;, }, if, (]
[(, this, ., left, !=, that, ., left, ), {, return, false, ;, }, if, (, this, ., right, !=]
[(, this, ., left, !=, that, ., left, ), {, return, false, ;, }, if, (, this, ., right, !=]
[., left, ), {, return, false, ;, }, if, (, this, ., right, !=, that, ., right, ), {, return]
[false, ;, }, if, (, this, ., right, !=, that, ., right, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., right, !=, that, ., right, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., right, !=, that, ., right, ), {, return, false, ;, }, if, (]
[(, this, ., right, !=, that, ., right, ), {, return, false, ;, }, if, (, this, ., top, !=]
[(, this, ., right, !=, that, ., right, ), {, return, false, ;, }, if, (, this, ., top, !=]
[., right, ), {, return, false, ;, }, if, (, this, ., top, !=, that, ., top, ), {, return]
[false, ;, }, if, (, this, ., top, !=, that, ., top, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., top, !=, that, ., top, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., top, !=, that, ., top, ), {, return, false, ;, }, if, (]
[(, this, ., top, !=, that, ., top, ), {, return, false, ;, }, if, (, this, ., bottom, !=]
[(, this, ., top, !=, that, ., top, ), {, return, false, ;, }, if, (, this, ., bottom, !=]
[., top, ), {, return, false, ;, }, if, (, this, ., bottom, !=, that, ., bottom, ), {, return]
[return, false, ;, }, if, (, this, ., bottom, !=, that, ., bottom, ), {, return, false, ;, }, return]
[return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, ;, long, temp, ;]
[;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, ;, long, temp, ;, result, =]
[}, return, true, ;, }, public, int, hashCode, (, ), {, int, result, ;, long, temp, ;, result, =, (]
[}, return, true, ;, }, public, int, hashCode, (, ), {, int, result, ;, long, temp, ;, result, =, (]
[}, return, true, ;, }, public, int, hashCode, (, ), {, int, result, ;, long, temp, ;, result, =, (]
[}, return, true, ;, }, public, int, hashCode, (, ), {, int, result, ;, long, temp, ;, result, =, (]
[}, public, int, hashCode, (, ), {, int, result, ;, long, temp, ;, result, =, (, this, ., unitType, !=]
[int, hashCode, (, ), {, int, result, ;, long, temp, ;, result, =, (, this, ., unitType, !=, null, ?]
[int, hashCode, (, ), {, int, result, ;, long, temp, ;, result, =, (, this, ., unitType, !=, null, ?]
[int, hashCode, (, ), {, int, result, ;, long, temp, ;, result, =, (, this, ., unitType, !=, null, ?]
[long, temp, ;, result, =, (, this, ., unitType, !=, null, ?, this, ., unitType, ., hashCode, (, ), :]
[result, =, (, this, ., unitType, !=, null, ?, this, ., unitType, ., hashCode, (, ), :, 0, ), ;]
[(, this, ., unitType, !=, null, ?, this, ., unitType, ., hashCode, (, ), :, 0, ), ;, temp, =]
[(, this, ., unitType, !=, null, ?, this, ., unitType, ., hashCode, (, ), :, 0, ), ;, temp, =]
[(, this, ., unitType, !=, null, ?, this, ., unitType, ., hashCode, (, ), :, 0, ), ;, temp, =]
[(, this, ., unitType, !=, null, ?, this, ., unitType, ., hashCode, (, ), :, 0, ), ;, temp, =]
[!=, null, ?, this, ., unitType, ., hashCode, (, ), :, 0, ), ;, temp, =, this, ., top, !=]
[null, ?, this, ., unitType, ., hashCode, (, ), :, 0, ), ;, temp, =, this, ., top, !=, +]
[this, ., unitType, ., hashCode, (, ), :, 0, ), ;, temp, =, this, ., top, !=, +, 0.0d, ?]
[this, ., unitType, ., hashCode, (, ), :, 0, ), ;, temp, =, this, ., top, !=, +, 0.0d, ?]
[hashCode, (, ), :, 0, ), ;, temp, =, this, ., top, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (]
[hashCode, (, ), :, 0, ), ;, temp, =, this, ., top, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (]
[), ;, temp, =, this, ., top, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., top, ), :]
[temp, =, this, ., top, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., top, ), :, 0L, ;]
[this, ., top, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., top, ), :, 0L, ;, result, =]
[this, ., top, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., top, ), :, 0L, ;, result, =]
[this, ., top, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., top, ), :, 0L, ;, result, =]
[top, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., top, ), :, 0L, ;, result, =, 29, *]
[+, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., top, ), :, 0L, ;, result, =, 29, *, result, +]
[Double, ., doubleToLongBits, (, this, ., top, ), :, 0L, ;, result, =, 29, *, result, +, (, int, )]
[., doubleToLongBits, (, this, ., top, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (]
[., doubleToLongBits, (, this, ., top, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (]
[(, this, ., top, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^]
[this, ., top, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (]
[this, ., top, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (]
[:, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >]
[=, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =]
[int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, this, ., bottom, !=]
[), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, this, ., bottom, !=, +]
[temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, this, ., bottom, !=, +, 0.0d, ?]
[temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, this, ., bottom, !=, +, 0.0d, ?]
[>, >, >, 32, ), ), ;, temp, =, this, ., bottom, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (]
[>, >, >, 32, ), ), ;, temp, =, this, ., bottom, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (]
[), ;, temp, =, this, ., bottom, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., bottom, ), :]
[temp, =, this, ., bottom, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., bottom, ), :, 0L, ;]
[this, ., bottom, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., bottom, ), :, 0L, ;, result, =]
[this, ., bottom, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., bottom, ), :, 0L, ;, result, =]
[this, ., bottom, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., bottom, ), :, 0L, ;, result, =]
[bottom, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., bottom, ), :, 0L, ;, result, =, 29, *]
[+, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., bottom, ), :, 0L, ;, result, =, 29, *, result, +]
[Double, ., doubleToLongBits, (, this, ., bottom, ), :, 0L, ;, result, =, 29, *, result, +, (, int, )]
[., doubleToLongBits, (, this, ., bottom, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (]
[., doubleToLongBits, (, this, ., bottom, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (]
[(, this, ., bottom, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^]
[this, ., bottom, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (]
[this, ., bottom, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (]
[:, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >]
[=, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =]
[int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, this, ., left, !=]
[), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, this, ., left, !=, +]
[temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, this, ., left, !=, +, 0.0d, ?]
[temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, this, ., left, !=, +, 0.0d, ?]
[>, >, >, 32, ), ), ;, temp, =, this, ., left, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (]
[>, >, >, 32, ), ), ;, temp, =, this, ., left, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (]
[), ;, temp, =, this, ., left, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., left, ), :]
[temp, =, this, ., left, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., left, ), :, 0L, ;]
[this, ., left, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., left, ), :, 0L, ;, result, =]
[this, ., left, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., left, ), :, 0L, ;, result, =]
[this, ., left, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., left, ), :, 0L, ;, result, =]
[left, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., left, ), :, 0L, ;, result, =, 29, *]
[+, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., left, ), :, 0L, ;, result, =, 29, *, result, +]
[Double, ., doubleToLongBits, (, this, ., left, ), :, 0L, ;, result, =, 29, *, result, +, (, int, )]
[., doubleToLongBits, (, this, ., left, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (]
[., doubleToLongBits, (, this, ., left, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (]
[(, this, ., left, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^]
[this, ., left, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (]
[this, ., left, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (]
[:, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >]
[=, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =]
[int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, this, ., right, !=]
[), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, this, ., right, !=, +]
[temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, this, ., right, !=, +, 0.0d, ?]
[temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, this, ., right, !=, +, 0.0d, ?]
[>, >, >, 32, ), ), ;, temp, =, this, ., right, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (]
[>, >, >, 32, ), ), ;, temp, =, this, ., right, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (]
[), ;, temp, =, this, ., right, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., right, ), :]
[temp, =, this, ., right, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., right, ), :, 0L, ;]
[this, ., right, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., right, ), :, 0L, ;, result, =]
[this, ., right, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., right, ), :, 0L, ;, result, =]
[this, ., right, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., right, ), :, 0L, ;, result, =]
[right, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., right, ), :, 0L, ;, result, =, 29, *]
[+, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., right, ), :, 0L, ;, result, =, 29, *, result, +]
[Double, ., doubleToLongBits, (, this, ., right, ), :, 0L, ;, result, =, 29, *, result, +, (, int, )]
[., doubleToLongBits, (, this, ., right, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (]
[., doubleToLongBits, (, this, ., right, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (]
[(, this, ., right, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^]
[this, ., right, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (]
[this, ., right, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (]
[:, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >]
[29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, return]
[(, temp, >, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return]
[(, temp, >, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return]
[(, temp, >, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return]
[(, temp, >, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return]
[(, temp, >, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return]
[(, temp, >, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return]
[(, temp, >, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return]
[(, temp, >, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return]
[(, temp, >, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return]
[>, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return, "RectangleInsets[t=", +]
[>, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return, "RectangleInsets[t=", +]
[), ), ;, return, result, ;, }, public, String, toString, (, ), {, return, "RectangleInsets[t=", +, this, ., top, +]
[;, return, result, ;, }, public, String, toString, (, ), {, return, "RectangleInsets[t=", +, this, ., top, +, ",l=", +]
[;, return, result, ;, }, public, String, toString, (, ), {, return, "RectangleInsets[t=", +, this, ., top, +, ",l=", +]
[}, public, String, toString, (, ), {, return, "RectangleInsets[t=", +, this, ., top, +, ",l=", +, this, ., left, +]
[String, toString, (, ), {, return, "RectangleInsets[t=", +, this, ., top, +, ",l=", +, this, ., left, +, ",b=", +]
[String, toString, (, ), {, return, "RectangleInsets[t=", +, this, ., top, +, ",l=", +, this, ., left, +, ",b=", +]
[{, return, "RectangleInsets[t=", +, this, ., top, +, ",l=", +, this, ., left, +, ",b=", +, this, ., bottom, +]
["RectangleInsets[t=", +, this, ., top, +, ",l=", +, this, ., left, +, ",b=", +, this, ., bottom, +, ",r=", +]
["RectangleInsets[t=", +, this, ., top, +, ",l=", +, this, ., left, +, ",b=", +, this, ., bottom, +, ",r=", +]
[top, +, ",l=", +, this, ., left, +, ",b=", +, this, ., bottom, +, ",r=", +, this, ., right, +]
[+, "]", ;, }, public, Rectangle2D, createAdjustedRectangle, (, Rectangle2D, base, ,, LengthAdjustmentType, horizontal, ,, LengthAdjustmentType, vertical, ), {, if, (]
[+, "]", ;, }, public, Rectangle2D, createAdjustedRectangle, (, Rectangle2D, base, ,, LengthAdjustmentType, horizontal, ,, LengthAdjustmentType, vertical, ), {, if, (]
[;, }, public, Rectangle2D, createAdjustedRectangle, (, Rectangle2D, base, ,, LengthAdjustmentType, horizontal, ,, LengthAdjustmentType, vertical, ), {, if, (, base, ==]
[createAdjustedRectangle, (, Rectangle2D, base, ,, LengthAdjustmentType, horizontal, ,, LengthAdjustmentType, vertical, ), {, if, (, base, ==, null, ), {, throw]
[base, ,, LengthAdjustmentType, horizontal, ,, LengthAdjustmentType, vertical, ), {, if, (, base, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, base, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, double, x, =]
[), {, if, (, base, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, double, x, =]
[throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, double, x, =, base, ., getX, (, ), ;, double, y, =]
[throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, double, x, =, base, ., getX, (, ), ;, double, y, =]
[x, =, base, ., getX, (, ), ;, double, y, =, base, ., getY, (, ), ;, double, w, =]
[x, =, base, ., getX, (, ), ;, double, y, =, base, ., getY, (, ), ;, double, w, =]
[y, =, base, ., getY, (, ), ;, double, w, =, base, ., getWidth, (, ), ;, double, h, =]
[y, =, base, ., getY, (, ), ;, double, w, =, base, ., getWidth, (, ), ;, double, h, =]
[double, w, =, base, ., getWidth, (, ), ;, double, h, =, base, ., getHeight, (, ), ;, if, (]
[double, w, =, base, ., getWidth, (, ), ;, double, h, =, base, ., getHeight, (, ), ;, if, (]
[=, base, ., getWidth, (, ), ;, double, h, =, base, ., getHeight, (, ), ;, if, (, horizontal, ==]
[=, base, ., getWidth, (, ), ;, double, h, =, base, ., getHeight, (, ), ;, if, (, horizontal, ==]
[h, =, base, ., getHeight, (, ), ;, if, (, horizontal, ==, LengthAdjustmentType, ., EXPAND, ), {, double, leftOutset, =]
[base, ., getHeight, (, ), ;, if, (, horizontal, ==, LengthAdjustmentType, ., EXPAND, ), {, double, leftOutset, =, calculateLeftOutset, (]
[(, ), ;, if, (, horizontal, ==, LengthAdjustmentType, ., EXPAND, ), {, double, leftOutset, =, calculateLeftOutset, (, w, ), ;]
[;, if, (, horizontal, ==, LengthAdjustmentType, ., EXPAND, ), {, double, leftOutset, =, calculateLeftOutset, (, w, ), ;, x, =]
[;, if, (, horizontal, ==, LengthAdjustmentType, ., EXPAND, ), {, double, leftOutset, =, calculateLeftOutset, (, w, ), ;, x, =]
[(, horizontal, ==, LengthAdjustmentType, ., EXPAND, ), {, double, leftOutset, =, calculateLeftOutset, (, w, ), ;, x, =, x, -]
[==, LengthAdjustmentType, ., EXPAND, ), {, double, leftOutset, =, calculateLeftOutset, (, w, ), ;, x, =, x, -, leftOutset, ;]
[., EXPAND, ), {, double, leftOutset, =, calculateLeftOutset, (, w, ), ;, x, =, x, -, leftOutset, ;, w, =]
[., EXPAND, ), {, double, leftOutset, =, calculateLeftOutset, (, w, ), ;, x, =, x, -, leftOutset, ;, w, =]
[., EXPAND, ), {, double, leftOutset, =, calculateLeftOutset, (, w, ), ;, x, =, x, -, leftOutset, ;, w, =]
[), {, double, leftOutset, =, calculateLeftOutset, (, w, ), ;, x, =, x, -, leftOutset, ;, w, =, w, +]
[double, leftOutset, =, calculateLeftOutset, (, w, ), ;, x, =, x, -, leftOutset, ;, w, =, w, +, leftOutset, +]
[=, calculateLeftOutset, (, w, ), ;, x, =, x, -, leftOutset, ;, w, =, w, +, leftOutset, +, calculateRightOutset, (]
[=, x, -, leftOutset, ;, w, =, w, +, leftOutset, +, calculateRightOutset, (, w, ), ;, }, else, if, (]
[=, x, -, leftOutset, ;, w, =, w, +, leftOutset, +, calculateRightOutset, (, w, ), ;, }, else, if, (]
[-, leftOutset, ;, w, =, w, +, leftOutset, +, calculateRightOutset, (, w, ), ;, }, else, if, (, horizontal, ==]
[-, leftOutset, ;, w, =, w, +, leftOutset, +, calculateRightOutset, (, w, ), ;, }, else, if, (, horizontal, ==]
[+, calculateRightOutset, (, w, ), ;, }, else, if, (, horizontal, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, leftMargin, =]
[(, w, ), ;, }, else, if, (, horizontal, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, leftMargin, =, calculateLeftInset, (]
[;, }, else, if, (, horizontal, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, leftMargin, =, calculateLeftInset, (, w, ), ;]
[else, if, (, horizontal, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, leftMargin, =, calculateLeftInset, (, w, ), ;, x, =]
[else, if, (, horizontal, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, leftMargin, =, calculateLeftInset, (, w, ), ;, x, =]
[(, horizontal, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, leftMargin, =, calculateLeftInset, (, w, ), ;, x, =, x, +]
[==, LengthAdjustmentType, ., CONTRACT, ), {, double, leftMargin, =, calculateLeftInset, (, w, ), ;, x, =, x, +, leftMargin, ;]
[., CONTRACT, ), {, double, leftMargin, =, calculateLeftInset, (, w, ), ;, x, =, x, +, leftMargin, ;, w, =]
[., CONTRACT, ), {, double, leftMargin, =, calculateLeftInset, (, w, ), ;, x, =, x, +, leftMargin, ;, w, =]
[., CONTRACT, ), {, double, leftMargin, =, calculateLeftInset, (, w, ), ;, x, =, x, +, leftMargin, ;, w, =]
[), {, double, leftMargin, =, calculateLeftInset, (, w, ), ;, x, =, x, +, leftMargin, ;, w, =, w, -]
[double, leftMargin, =, calculateLeftInset, (, w, ), ;, x, =, x, +, leftMargin, ;, w, =, w, -, leftMargin, -]
[=, calculateLeftInset, (, w, ), ;, x, =, x, +, leftMargin, ;, w, =, w, -, leftMargin, -, calculateRightInset, (]
[x, =, x, +, leftMargin, ;, w, =, w, -, leftMargin, -, calculateRightInset, (, w, ), ;, }, if, (]
[x, =, x, +, leftMargin, ;, w, =, w, -, leftMargin, -, calculateRightInset, (, w, ), ;, }, if, (]
[x, +, leftMargin, ;, w, =, w, -, leftMargin, -, calculateRightInset, (, w, ), ;, }, if, (, vertical, ==]
[x, +, leftMargin, ;, w, =, w, -, leftMargin, -, calculateRightInset, (, w, ), ;, }, if, (, vertical, ==]
[leftMargin, -, calculateRightInset, (, w, ), ;, }, if, (, vertical, ==, LengthAdjustmentType, ., EXPAND, ), {, double, topMargin, =]
[calculateRightInset, (, w, ), ;, }, if, (, vertical, ==, LengthAdjustmentType, ., EXPAND, ), {, double, topMargin, =, calculateTopOutset, (]
[), ;, }, if, (, vertical, ==, LengthAdjustmentType, ., EXPAND, ), {, double, topMargin, =, calculateTopOutset, (, h, ), ;]
[}, if, (, vertical, ==, LengthAdjustmentType, ., EXPAND, ), {, double, topMargin, =, calculateTopOutset, (, h, ), ;, y, =]
[}, if, (, vertical, ==, LengthAdjustmentType, ., EXPAND, ), {, double, topMargin, =, calculateTopOutset, (, h, ), ;, y, =]
[(, vertical, ==, LengthAdjustmentType, ., EXPAND, ), {, double, topMargin, =, calculateTopOutset, (, h, ), ;, y, =, y, -]
[==, LengthAdjustmentType, ., EXPAND, ), {, double, topMargin, =, calculateTopOutset, (, h, ), ;, y, =, y, -, topMargin, ;]
[., EXPAND, ), {, double, topMargin, =, calculateTopOutset, (, h, ), ;, y, =, y, -, topMargin, ;, h, =]
[., EXPAND, ), {, double, topMargin, =, calculateTopOutset, (, h, ), ;, y, =, y, -, topMargin, ;, h, =]
[., EXPAND, ), {, double, topMargin, =, calculateTopOutset, (, h, ), ;, y, =, y, -, topMargin, ;, h, =]
[), {, double, topMargin, =, calculateTopOutset, (, h, ), ;, y, =, y, -, topMargin, ;, h, =, h, +]
[double, topMargin, =, calculateTopOutset, (, h, ), ;, y, =, y, -, topMargin, ;, h, =, h, +, topMargin, +]
[=, calculateTopOutset, (, h, ), ;, y, =, y, -, topMargin, ;, h, =, h, +, topMargin, +, calculateBottomOutset, (]
[=, y, -, topMargin, ;, h, =, h, +, topMargin, +, calculateBottomOutset, (, h, ), ;, }, else, if, (]
[=, y, -, topMargin, ;, h, =, h, +, topMargin, +, calculateBottomOutset, (, h, ), ;, }, else, if, (]
[-, topMargin, ;, h, =, h, +, topMargin, +, calculateBottomOutset, (, h, ), ;, }, else, if, (, vertical, ==]
[-, topMargin, ;, h, =, h, +, topMargin, +, calculateBottomOutset, (, h, ), ;, }, else, if, (, vertical, ==]
[+, calculateBottomOutset, (, h, ), ;, }, else, if, (, vertical, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, topMargin, =]
[(, h, ), ;, }, else, if, (, vertical, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, topMargin, =, calculateTopInset, (]
[;, }, else, if, (, vertical, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, topMargin, =, calculateTopInset, (, h, ), ;]
[else, if, (, vertical, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, topMargin, =, calculateTopInset, (, h, ), ;, y, =]
[else, if, (, vertical, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, topMargin, =, calculateTopInset, (, h, ), ;, y, =]
[(, vertical, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, topMargin, =, calculateTopInset, (, h, ), ;, y, =, y, +]
[==, LengthAdjustmentType, ., CONTRACT, ), {, double, topMargin, =, calculateTopInset, (, h, ), ;, y, =, y, +, topMargin, ;]
[., CONTRACT, ), {, double, topMargin, =, calculateTopInset, (, h, ), ;, y, =, y, +, topMargin, ;, h, =]
[., CONTRACT, ), {, double, topMargin, =, calculateTopInset, (, h, ), ;, y, =, y, +, topMargin, ;, h, =]
[., CONTRACT, ), {, double, topMargin, =, calculateTopInset, (, h, ), ;, y, =, y, +, topMargin, ;, h, =]
[), {, double, topMargin, =, calculateTopInset, (, h, ), ;, y, =, y, +, topMargin, ;, h, =, h, -]
[double, topMargin, =, calculateTopInset, (, h, ), ;, y, =, y, +, topMargin, ;, h, =, h, -, topMargin, -]
[=, calculateTopInset, (, h, ), ;, y, =, y, +, topMargin, ;, h, =, h, -, topMargin, -, calculateBottomInset, (]
[;, y, =, y, +, topMargin, ;, h, =, h, -, topMargin, -, calculateBottomInset, (, h, ), ;, }, return]
[topMargin, ;, h, =, h, -, topMargin, -, calculateBottomInset, (, h, ), ;, }, return, new, Rectangle2D, ., Double, (]
[h, =, h, -, topMargin, -, calculateBottomInset, (, h, ), ;, }, return, new, Rectangle2D, ., Double, (, x, ,]
[h, -, topMargin, -, calculateBottomInset, (, h, ), ;, }, return, new, Rectangle2D, ., Double, (, x, ,, y, ,]
[topMargin, -, calculateBottomInset, (, h, ), ;, }, return, new, Rectangle2D, ., Double, (, x, ,, y, ,, w, ,]
[(, x, ,, y, ,, w, ,, h, ), ;, }, public, Rectangle2D, createInsetRectangle, (, Rectangle2D, base, ), {, return]
[,, y, ,, w, ,, h, ), ;, }, public, Rectangle2D, createInsetRectangle, (, Rectangle2D, base, ), {, return, createInsetRectangle, (]
[,, w, ,, h, ), ;, }, public, Rectangle2D, createInsetRectangle, (, Rectangle2D, base, ), {, return, createInsetRectangle, (, base, ,]
[,, h, ), ;, }, public, Rectangle2D, createInsetRectangle, (, Rectangle2D, base, ), {, return, createInsetRectangle, (, base, ,, true, ,]
[true, ), ;, }, public, Rectangle2D, createInsetRectangle, (, Rectangle2D, base, ,, boolean, horizontal, ,, boolean, vertical, ), {, if, (]
[true, ), ;, }, public, Rectangle2D, createInsetRectangle, (, Rectangle2D, base, ,, boolean, horizontal, ,, boolean, vertical, ), {, if, (]
[;, }, public, Rectangle2D, createInsetRectangle, (, Rectangle2D, base, ,, boolean, horizontal, ,, boolean, vertical, ), {, if, (, base, ==]
[createInsetRectangle, (, Rectangle2D, base, ,, boolean, horizontal, ,, boolean, vertical, ), {, if, (, base, ==, null, ), {, throw]
[base, ,, boolean, horizontal, ,, boolean, vertical, ), {, if, (, base, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, base, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, double, topMargin, =]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, double, topMargin, =, 0.0, ;, double, bottomMargin, =]
[throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, double, topMargin, =, 0.0, ;, double, bottomMargin, =, 0.0, ;, if, (]
[(, "Null 'base' argument.", ), ;, }, double, topMargin, =, 0.0, ;, double, bottomMargin, =, 0.0, ;, if, (, vertical, ), {]
[), ;, }, double, topMargin, =, 0.0, ;, double, bottomMargin, =, 0.0, ;, if, (, vertical, ), {, topMargin, =]
[}, double, topMargin, =, 0.0, ;, double, bottomMargin, =, 0.0, ;, if, (, vertical, ), {, topMargin, =, calculateTopInset, (]
[}, double, topMargin, =, 0.0, ;, double, bottomMargin, =, 0.0, ;, if, (, vertical, ), {, topMargin, =, calculateTopInset, (]
[bottomMargin, =, 0.0, ;, if, (, vertical, ), {, topMargin, =, calculateTopInset, (, base, ., getHeight, (, ), ), ;]
[0.0, ;, if, (, vertical, ), {, topMargin, =, calculateTopInset, (, base, ., getHeight, (, ), ), ;, bottomMargin, =]
[if, (, vertical, ), {, topMargin, =, calculateTopInset, (, base, ., getHeight, (, ), ), ;, bottomMargin, =, calculateBottomInset, (]
[if, (, vertical, ), {, topMargin, =, calculateTopInset, (, base, ., getHeight, (, ), ), ;, bottomMargin, =, calculateBottomInset, (]
[getHeight, (, ), ), ;, bottomMargin, =, calculateBottomInset, (, base, ., getHeight, (, ), ), ;, }, double, leftMargin, =]
[bottomMargin, =, calculateBottomInset, (, base, ., getHeight, (, ), ), ;, }, double, leftMargin, =, 0.0, ;, double, rightMargin, =]
[base, ., getHeight, (, ), ), ;, }, double, leftMargin, =, 0.0, ;, double, rightMargin, =, 0.0, ;, if, (]
[(, ), ), ;, }, double, leftMargin, =, 0.0, ;, double, rightMargin, =, 0.0, ;, if, (, horizontal, ), {]
[), ;, }, double, leftMargin, =, 0.0, ;, double, rightMargin, =, 0.0, ;, if, (, horizontal, ), {, leftMargin, =]
[}, double, leftMargin, =, 0.0, ;, double, rightMargin, =, 0.0, ;, if, (, horizontal, ), {, leftMargin, =, calculateLeftInset, (]
[}, double, leftMargin, =, 0.0, ;, double, rightMargin, =, 0.0, ;, if, (, horizontal, ), {, leftMargin, =, calculateLeftInset, (]
[rightMargin, =, 0.0, ;, if, (, horizontal, ), {, leftMargin, =, calculateLeftInset, (, base, ., getWidth, (, ), ), ;]
[0.0, ;, if, (, horizontal, ), {, leftMargin, =, calculateLeftInset, (, base, ., getWidth, (, ), ), ;, rightMargin, =]
[if, (, horizontal, ), {, leftMargin, =, calculateLeftInset, (, base, ., getWidth, (, ), ), ;, rightMargin, =, calculateRightInset, (]
[if, (, horizontal, ), {, leftMargin, =, calculateLeftInset, (, base, ., getWidth, (, ), ), ;, rightMargin, =, calculateRightInset, (]
[base, ., getWidth, (, ), ), ;, rightMargin, =, calculateRightInset, (, base, ., getWidth, (, ), ), ;, }, return]
[), ;, rightMargin, =, calculateRightInset, (, base, ., getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (]
[), ;, rightMargin, =, calculateRightInset, (, base, ., getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (]
[), ;, rightMargin, =, calculateRightInset, (, base, ., getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (]
[base, ., getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (, base, ., getX, (, ), +]
[getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (, base, ., getX, (, ), +, leftMargin, ,]
[getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (, base, ., getX, (, ), +, leftMargin, ,]
[getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (, base, ., getX, (, ), +, leftMargin, ,]
[return, new, Rectangle2D, ., Double, (, base, ., getX, (, ), +, leftMargin, ,, base, ., getY, (, ), +]
[Rectangle2D, ., Double, (, base, ., getX, (, ), +, leftMargin, ,, base, ., getY, (, ), +, topMargin, ,]
[Rectangle2D, ., Double, (, base, ., getX, (, ), +, leftMargin, ,, base, ., getY, (, ), +, topMargin, ,]
[Rectangle2D, ., Double, (, base, ., getX, (, ), +, leftMargin, ,, base, ., getY, (, ), +, topMargin, ,]
[Rectangle2D, ., Double, (, base, ., getX, (, ), +, leftMargin, ,, base, ., getY, (, ), +, topMargin, ,]
[getX, (, ), +, leftMargin, ,, base, ., getY, (, ), +, topMargin, ,, base, ., getWidth, (, ), -]
[), +, leftMargin, ,, base, ., getY, (, ), +, topMargin, ,, base, ., getWidth, (, ), -, leftMargin, -]
[leftMargin, ,, base, ., getY, (, ), +, topMargin, ,, base, ., getWidth, (, ), -, leftMargin, -, rightMargin, ,]
[leftMargin, ,, base, ., getY, (, ), +, topMargin, ,, base, ., getWidth, (, ), -, leftMargin, -, rightMargin, ,]
[leftMargin, ,, base, ., getY, (, ), +, topMargin, ,, base, ., getWidth, (, ), -, leftMargin, -, rightMargin, ,]
[leftMargin, ,, base, ., getY, (, ), +, topMargin, ,, base, ., getWidth, (, ), -, leftMargin, -, rightMargin, ,]
[), +, topMargin, ,, base, ., getWidth, (, ), -, leftMargin, -, rightMargin, ,, base, ., getHeight, (, ), -]
[topMargin, ,, base, ., getWidth, (, ), -, leftMargin, -, rightMargin, ,, base, ., getHeight, (, ), -, topMargin, -]
[., getHeight, (, ), -, topMargin, -, bottomMargin, ), ;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D, base, ), {, return]
[(, ), -, topMargin, -, bottomMargin, ), ;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D, base, ), {, return, createOutsetRectangle, (]
[-, topMargin, -, bottomMargin, ), ;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D, base, ), {, return, createOutsetRectangle, (, base, ,]
[-, bottomMargin, ), ;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D, base, ), {, return, createOutsetRectangle, (, base, ,, true, ,]
[true, ), ;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D, base, ,, boolean, horizontal, ,, boolean, vertical, ), {, if, (]
[true, ), ;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D, base, ,, boolean, horizontal, ,, boolean, vertical, ), {, if, (]
[;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D, base, ,, boolean, horizontal, ,, boolean, vertical, ), {, if, (, base, ==]
[createOutsetRectangle, (, Rectangle2D, base, ,, boolean, horizontal, ,, boolean, vertical, ), {, if, (, base, ==, null, ), {, throw]
[base, ,, boolean, horizontal, ,, boolean, vertical, ), {, if, (, base, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, base, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, double, topMargin, =]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, double, topMargin, =, 0.0, ;, double, bottomMargin, =]
[throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, double, topMargin, =, 0.0, ;, double, bottomMargin, =, 0.0, ;, if, (]
[(, "Null 'base' argument.", ), ;, }, double, topMargin, =, 0.0, ;, double, bottomMargin, =, 0.0, ;, if, (, vertical, ), {]
[), ;, }, double, topMargin, =, 0.0, ;, double, bottomMargin, =, 0.0, ;, if, (, vertical, ), {, topMargin, =]
[}, double, topMargin, =, 0.0, ;, double, bottomMargin, =, 0.0, ;, if, (, vertical, ), {, topMargin, =, calculateTopOutset, (]
[}, double, topMargin, =, 0.0, ;, double, bottomMargin, =, 0.0, ;, if, (, vertical, ), {, topMargin, =, calculateTopOutset, (]
[bottomMargin, =, 0.0, ;, if, (, vertical, ), {, topMargin, =, calculateTopOutset, (, base, ., getHeight, (, ), ), ;]
[0.0, ;, if, (, vertical, ), {, topMargin, =, calculateTopOutset, (, base, ., getHeight, (, ), ), ;, bottomMargin, =]
[if, (, vertical, ), {, topMargin, =, calculateTopOutset, (, base, ., getHeight, (, ), ), ;, bottomMargin, =, calculateBottomOutset, (]
[if, (, vertical, ), {, topMargin, =, calculateTopOutset, (, base, ., getHeight, (, ), ), ;, bottomMargin, =, calculateBottomOutset, (]
[getHeight, (, ), ), ;, bottomMargin, =, calculateBottomOutset, (, base, ., getHeight, (, ), ), ;, }, double, leftMargin, =]
[bottomMargin, =, calculateBottomOutset, (, base, ., getHeight, (, ), ), ;, }, double, leftMargin, =, 0.0, ;, double, rightMargin, =]
[base, ., getHeight, (, ), ), ;, }, double, leftMargin, =, 0.0, ;, double, rightMargin, =, 0.0, ;, if, (]
[(, ), ), ;, }, double, leftMargin, =, 0.0, ;, double, rightMargin, =, 0.0, ;, if, (, horizontal, ), {]
[), ;, }, double, leftMargin, =, 0.0, ;, double, rightMargin, =, 0.0, ;, if, (, horizontal, ), {, leftMargin, =]
[}, double, leftMargin, =, 0.0, ;, double, rightMargin, =, 0.0, ;, if, (, horizontal, ), {, leftMargin, =, calculateLeftOutset, (]
[}, double, leftMargin, =, 0.0, ;, double, rightMargin, =, 0.0, ;, if, (, horizontal, ), {, leftMargin, =, calculateLeftOutset, (]
[rightMargin, =, 0.0, ;, if, (, horizontal, ), {, leftMargin, =, calculateLeftOutset, (, base, ., getWidth, (, ), ), ;]
[0.0, ;, if, (, horizontal, ), {, leftMargin, =, calculateLeftOutset, (, base, ., getWidth, (, ), ), ;, rightMargin, =]
[if, (, horizontal, ), {, leftMargin, =, calculateLeftOutset, (, base, ., getWidth, (, ), ), ;, rightMargin, =, calculateRightOutset, (]
[if, (, horizontal, ), {, leftMargin, =, calculateLeftOutset, (, base, ., getWidth, (, ), ), ;, rightMargin, =, calculateRightOutset, (]
[base, ., getWidth, (, ), ), ;, rightMargin, =, calculateRightOutset, (, base, ., getWidth, (, ), ), ;, }, return]
[), ;, rightMargin, =, calculateRightOutset, (, base, ., getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (]
[), ;, rightMargin, =, calculateRightOutset, (, base, ., getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (]
[), ;, rightMargin, =, calculateRightOutset, (, base, ., getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (]
[base, ., getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (, base, ., getX, (, ), -]
[getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (, base, ., getX, (, ), -, leftMargin, ,]
[getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (, base, ., getX, (, ), -, leftMargin, ,]
[getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (, base, ., getX, (, ), -, leftMargin, ,]
[return, new, Rectangle2D, ., Double, (, base, ., getX, (, ), -, leftMargin, ,, base, ., getY, (, ), -]
[Rectangle2D, ., Double, (, base, ., getX, (, ), -, leftMargin, ,, base, ., getY, (, ), -, topMargin, ,]
[Rectangle2D, ., Double, (, base, ., getX, (, ), -, leftMargin, ,, base, ., getY, (, ), -, topMargin, ,]
[Rectangle2D, ., Double, (, base, ., getX, (, ), -, leftMargin, ,, base, ., getY, (, ), -, topMargin, ,]
[Rectangle2D, ., Double, (, base, ., getX, (, ), -, leftMargin, ,, base, ., getY, (, ), -, topMargin, ,]
[getX, (, ), -, leftMargin, ,, base, ., getY, (, ), -, topMargin, ,, base, ., getWidth, (, ), +]
[), -, leftMargin, ,, base, ., getY, (, ), -, topMargin, ,, base, ., getWidth, (, ), +, leftMargin, +]
[leftMargin, ,, base, ., getY, (, ), -, topMargin, ,, base, ., getWidth, (, ), +, leftMargin, +, rightMargin, ,]
[leftMargin, ,, base, ., getY, (, ), -, topMargin, ,, base, ., getWidth, (, ), +, leftMargin, +, rightMargin, ,]
[leftMargin, ,, base, ., getY, (, ), -, topMargin, ,, base, ., getWidth, (, ), +, leftMargin, +, rightMargin, ,]
[leftMargin, ,, base, ., getY, (, ), -, topMargin, ,, base, ., getWidth, (, ), +, leftMargin, +, rightMargin, ,]
[), -, topMargin, ,, base, ., getWidth, (, ), +, leftMargin, +, rightMargin, ,, base, ., getHeight, (, ), +]
[topMargin, ,, base, ., getWidth, (, ), +, leftMargin, +, rightMargin, ,, base, ., getHeight, (, ), +, topMargin, +]
[(, ), +, topMargin, +, bottomMargin, ), ;, }, public, double, calculateTopInset, (, double, height, ), {, double, result, =]
[(, ), +, topMargin, +, bottomMargin, ), ;, }, public, double, calculateTopInset, (, double, height, ), {, double, result, =]
[), ;, }, public, double, calculateTopInset, (, double, height, ), {, double, result, =, this, ., top, ;, if, (]
[), ;, }, public, double, calculateTopInset, (, double, height, ), {, double, result, =, this, ., top, ;, if, (]
[), ;, }, public, double, calculateTopInset, (, double, height, ), {, double, result, =, this, ., top, ;, if, (]
[double, calculateTopInset, (, double, height, ), {, double, result, =, this, ., top, ;, if, (, this, ., unitType, ==]
[double, calculateTopInset, (, double, height, ), {, double, result, =, this, ., top, ;, if, (, this, ., unitType, ==]
[), {, double, result, =, this, ., top, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {]
[double, result, =, this, ., top, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =]
[result, =, this, ., top, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (]
[result, =, this, ., top, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (]
[result, =, this, ., top, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (]
[top, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., top, *]
[., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., top, *, height, ), ;, }, return]
[*, height, ), ;, }, return, result, ;, }, public, double, calculateTopOutset, (, double, height, ), {, double, result, =]
[*, height, ), ;, }, return, result, ;, }, public, double, calculateTopOutset, (, double, height, ), {, double, result, =]
[result, ;, }, public, double, calculateTopOutset, (, double, height, ), {, double, result, =, this, ., top, ;, if, (]
[result, ;, }, public, double, calculateTopOutset, (, double, height, ), {, double, result, =, this, ., top, ;, if, (]
[result, ;, }, public, double, calculateTopOutset, (, double, height, ), {, double, result, =, this, ., top, ;, if, (]
[double, calculateTopOutset, (, double, height, ), {, double, result, =, this, ., top, ;, if, (, this, ., unitType, ==]
[double, calculateTopOutset, (, double, height, ), {, double, result, =, this, ., top, ;, if, (, this, ., unitType, ==]
[), {, double, result, =, this, ., top, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {]
[double, result, =, this, ., top, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =]
[double, result, =, this, ., top, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =]
[result, =, this, ., top, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (]
[result, =, this, ., top, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (]
[this, ., top, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /]
[., top, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (]
[., top, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (]
[., top, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (]
[;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (, 1, -]
[;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (, 1, -]
[., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (, 1, -, this, ., top, -]
[., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (, 1, -, this, ., top, -]
[), {, result, =, (, height, /, (, 1, -, this, ., top, -, this, ., bottom, ), ), *]
[), {, result, =, (, height, /, (, 1, -, this, ., top, -, this, ., bottom, ), ), *]
[/, (, 1, -, this, ., top, -, this, ., bottom, ), ), *, this, ., top, ;, }, return]
[this, ., top, ;, }, return, result, ;, }, public, double, calculateBottomInset, (, double, height, ), {, double, result, =]
[this, ., top, ;, }, return, result, ;, }, public, double, calculateBottomInset, (, double, height, ), {, double, result, =]
[result, ;, }, public, double, calculateBottomInset, (, double, height, ), {, double, result, =, this, ., bottom, ;, if, (]
[result, ;, }, public, double, calculateBottomInset, (, double, height, ), {, double, result, =, this, ., bottom, ;, if, (]
[result, ;, }, public, double, calculateBottomInset, (, double, height, ), {, double, result, =, this, ., bottom, ;, if, (]
[double, calculateBottomInset, (, double, height, ), {, double, result, =, this, ., bottom, ;, if, (, this, ., unitType, ==]
[double, calculateBottomInset, (, double, height, ), {, double, result, =, this, ., bottom, ;, if, (, this, ., unitType, ==]
[), {, double, result, =, this, ., bottom, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {]
[double, result, =, this, ., bottom, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =]
[result, =, this, ., bottom, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (]
[result, =, this, ., bottom, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (]
[result, =, this, ., bottom, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (]
[bottom, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., bottom, *]
[., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., bottom, *, height, ), ;, }, return]
[*, height, ), ;, }, return, result, ;, }, public, double, calculateBottomOutset, (, double, height, ), {, double, result, =]
[*, height, ), ;, }, return, result, ;, }, public, double, calculateBottomOutset, (, double, height, ), {, double, result, =]
[result, ;, }, public, double, calculateBottomOutset, (, double, height, ), {, double, result, =, this, ., bottom, ;, if, (]
[result, ;, }, public, double, calculateBottomOutset, (, double, height, ), {, double, result, =, this, ., bottom, ;, if, (]
[result, ;, }, public, double, calculateBottomOutset, (, double, height, ), {, double, result, =, this, ., bottom, ;, if, (]
[double, calculateBottomOutset, (, double, height, ), {, double, result, =, this, ., bottom, ;, if, (, this, ., unitType, ==]
[double, calculateBottomOutset, (, double, height, ), {, double, result, =, this, ., bottom, ;, if, (, this, ., unitType, ==]
[), {, double, result, =, this, ., bottom, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {]
[double, result, =, this, ., bottom, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =]
[double, result, =, this, ., bottom, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =]
[result, =, this, ., bottom, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (]
[result, =, this, ., bottom, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (]
[this, ., bottom, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /]
[., bottom, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (]
[., bottom, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (]
[., bottom, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (]
[;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (, 1, -]
[;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (, 1, -]
[., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (, 1, -, this, ., top, -]
[., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (, 1, -, this, ., top, -]
[), {, result, =, (, height, /, (, 1, -, this, ., top, -, this, ., bottom, ), ), *]
[), {, result, =, (, height, /, (, 1, -, this, ., top, -, this, ., bottom, ), ), *]
[/, (, 1, -, this, ., top, -, this, ., bottom, ), ), *, this, ., bottom, ;, }, return]
[this, ., bottom, ;, }, return, result, ;, }, public, double, calculateLeftInset, (, double, width, ), {, double, result, =]
[this, ., bottom, ;, }, return, result, ;, }, public, double, calculateLeftInset, (, double, width, ), {, double, result, =]
[result, ;, }, public, double, calculateLeftInset, (, double, width, ), {, double, result, =, this, ., left, ;, if, (]
[result, ;, }, public, double, calculateLeftInset, (, double, width, ), {, double, result, =, this, ., left, ;, if, (]
[result, ;, }, public, double, calculateLeftInset, (, double, width, ), {, double, result, =, this, ., left, ;, if, (]
[double, calculateLeftInset, (, double, width, ), {, double, result, =, this, ., left, ;, if, (, this, ., unitType, ==]
[double, calculateLeftInset, (, double, width, ), {, double, result, =, this, ., left, ;, if, (, this, ., unitType, ==]
[), {, double, result, =, this, ., left, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {]
[double, result, =, this, ., left, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =]
[result, =, this, ., left, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (]
[result, =, this, ., left, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (]
[result, =, this, ., left, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (]
[left, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., left, *]
[., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., left, *, width, ), ;, }, return]
[*, width, ), ;, }, return, result, ;, }, public, double, calculateLeftOutset, (, double, width, ), {, double, result, =]
[*, width, ), ;, }, return, result, ;, }, public, double, calculateLeftOutset, (, double, width, ), {, double, result, =]
[result, ;, }, public, double, calculateLeftOutset, (, double, width, ), {, double, result, =, this, ., left, ;, if, (]
[result, ;, }, public, double, calculateLeftOutset, (, double, width, ), {, double, result, =, this, ., left, ;, if, (]
[result, ;, }, public, double, calculateLeftOutset, (, double, width, ), {, double, result, =, this, ., left, ;, if, (]
[double, calculateLeftOutset, (, double, width, ), {, double, result, =, this, ., left, ;, if, (, this, ., unitType, ==]
[double, calculateLeftOutset, (, double, width, ), {, double, result, =, this, ., left, ;, if, (, this, ., unitType, ==]
[), {, double, result, =, this, ., left, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {]
[double, result, =, this, ., left, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =]
[double, result, =, this, ., left, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =]
[result, =, this, ., left, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (]
[result, =, this, ., left, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (]
[this, ., left, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /]
[., left, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (]
[., left, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (]
[., left, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (]
[;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (, 1, -]
[;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (, 1, -]
[., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (, 1, -, this, ., left, -]
[., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (, 1, -, this, ., left, -]
[), {, result, =, (, width, /, (, 1, -, this, ., left, -, this, ., right, ), ), *]
[), {, result, =, (, width, /, (, 1, -, this, ., left, -, this, ., right, ), ), *]
[/, (, 1, -, this, ., left, -, this, ., right, ), ), *, this, ., left, ;, }, return]
[this, ., left, ;, }, return, result, ;, }, public, double, calculateRightInset, (, double, width, ), {, double, result, =]
[this, ., left, ;, }, return, result, ;, }, public, double, calculateRightInset, (, double, width, ), {, double, result, =]
[result, ;, }, public, double, calculateRightInset, (, double, width, ), {, double, result, =, this, ., right, ;, if, (]
[result, ;, }, public, double, calculateRightInset, (, double, width, ), {, double, result, =, this, ., right, ;, if, (]
[result, ;, }, public, double, calculateRightInset, (, double, width, ), {, double, result, =, this, ., right, ;, if, (]
[double, calculateRightInset, (, double, width, ), {, double, result, =, this, ., right, ;, if, (, this, ., unitType, ==]
[double, calculateRightInset, (, double, width, ), {, double, result, =, this, ., right, ;, if, (, this, ., unitType, ==]
[), {, double, result, =, this, ., right, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {]
[double, result, =, this, ., right, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =]
[result, =, this, ., right, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (]
[result, =, this, ., right, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (]
[result, =, this, ., right, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (]
[right, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., right, *]
[., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., right, *, width, ), ;, }, return]
[*, width, ), ;, }, return, result, ;, }, public, double, calculateRightOutset, (, double, width, ), {, double, result, =]
[*, width, ), ;, }, return, result, ;, }, public, double, calculateRightOutset, (, double, width, ), {, double, result, =]
[result, ;, }, public, double, calculateRightOutset, (, double, width, ), {, double, result, =, this, ., right, ;, if, (]
[result, ;, }, public, double, calculateRightOutset, (, double, width, ), {, double, result, =, this, ., right, ;, if, (]
[result, ;, }, public, double, calculateRightOutset, (, double, width, ), {, double, result, =, this, ., right, ;, if, (]
[double, calculateRightOutset, (, double, width, ), {, double, result, =, this, ., right, ;, if, (, this, ., unitType, ==]
[double, calculateRightOutset, (, double, width, ), {, double, result, =, this, ., right, ;, if, (, this, ., unitType, ==]
[), {, double, result, =, this, ., right, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {]
[double, result, =, this, ., right, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =]
[double, result, =, this, ., right, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =]
[result, =, this, ., right, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (]
[result, =, this, ., right, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (]
[this, ., right, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /]
[., right, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (]
[., right, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (]
[., right, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (]
[;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (, 1, -]
[;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (, 1, -]
[., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (, 1, -, this, ., left, -]
[., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (, 1, -, this, ., left, -]
[), {, result, =, (, width, /, (, 1, -, this, ., left, -, this, ., right, ), ), *]
[), {, result, =, (, width, /, (, 1, -, this, ., left, -, this, ., right, ), ), *]
[/, (, 1, -, this, ., left, -, this, ., right, ), ), *, this, ., right, ;, }, return]
[), *, this, ., right, ;, }, return, result, ;, }, public, double, trimWidth, (, double, width, ), {, return]
[), *, this, ., right, ;, }, return, result, ;, }, public, double, trimWidth, (, double, width, ), {, return]
[), *, this, ., right, ;, }, return, result, ;, }, public, double, trimWidth, (, double, width, ), {, return]
[this, ., right, ;, }, return, result, ;, }, public, double, trimWidth, (, double, width, ), {, return, width, -]
[right, ;, }, return, result, ;, }, public, double, trimWidth, (, double, width, ), {, return, width, -, calculateLeftInset, (]
[return, result, ;, }, public, double, trimWidth, (, double, width, ), {, return, width, -, calculateLeftInset, (, width, ), -]
[;, }, public, double, trimWidth, (, double, width, ), {, return, width, -, calculateLeftInset, (, width, ), -, calculateRightInset, (]
[calculateLeftInset, (, width, ), -, calculateRightInset, (, width, ), ;, }, public, double, extendWidth, (, double, width, ), {, return]
[calculateLeftInset, (, width, ), -, calculateRightInset, (, width, ), ;, }, public, double, extendWidth, (, double, width, ), {, return]
[calculateLeftInset, (, width, ), -, calculateRightInset, (, width, ), ;, }, public, double, extendWidth, (, double, width, ), {, return]
[width, ), -, calculateRightInset, (, width, ), ;, }, public, double, extendWidth, (, double, width, ), {, return, width, +]
[-, calculateRightInset, (, width, ), ;, }, public, double, extendWidth, (, double, width, ), {, return, width, +, calculateLeftOutset, (]
[width, ), ;, }, public, double, extendWidth, (, double, width, ), {, return, width, +, calculateLeftOutset, (, width, ), +]
[;, }, public, double, extendWidth, (, double, width, ), {, return, width, +, calculateLeftOutset, (, width, ), +, calculateRightOutset, (]
[calculateLeftOutset, (, width, ), +, calculateRightOutset, (, width, ), ;, }, public, double, trimHeight, (, double, height, ), {, return]
[calculateLeftOutset, (, width, ), +, calculateRightOutset, (, width, ), ;, }, public, double, trimHeight, (, double, height, ), {, return]
[calculateLeftOutset, (, width, ), +, calculateRightOutset, (, width, ), ;, }, public, double, trimHeight, (, double, height, ), {, return]
[width, ), +, calculateRightOutset, (, width, ), ;, }, public, double, trimHeight, (, double, height, ), {, return, height, -]
[+, calculateRightOutset, (, width, ), ;, }, public, double, trimHeight, (, double, height, ), {, return, height, -, calculateTopInset, (]
[width, ), ;, }, public, double, trimHeight, (, double, height, ), {, return, height, -, calculateTopInset, (, height, ), -]
[;, }, public, double, trimHeight, (, double, height, ), {, return, height, -, calculateTopInset, (, height, ), -, calculateBottomInset, (]
[calculateTopInset, (, height, ), -, calculateBottomInset, (, height, ), ;, }, public, double, extendHeight, (, double, height, ), {, return]
[calculateTopInset, (, height, ), -, calculateBottomInset, (, height, ), ;, }, public, double, extendHeight, (, double, height, ), {, return]
[calculateTopInset, (, height, ), -, calculateBottomInset, (, height, ), ;, }, public, double, extendHeight, (, double, height, ), {, return]
[height, ), -, calculateBottomInset, (, height, ), ;, }, public, double, extendHeight, (, double, height, ), {, return, height, +]
[-, calculateBottomInset, (, height, ), ;, }, public, double, extendHeight, (, double, height, ), {, return, height, +, calculateTopOutset, (]
[height, ), ;, }, public, double, extendHeight, (, double, height, ), {, return, height, +, calculateTopOutset, (, height, ), +]
[;, }, public, double, extendHeight, (, double, height, ), {, return, height, +, calculateTopOutset, (, height, ), +, calculateBottomOutset, (]
[height, ), +, calculateBottomOutset, (, height, ), ;, }, public, void, trim, (, Rectangle2D, area, ), {, double, w, =]
[height, ), +, calculateBottomOutset, (, height, ), ;, }, public, void, trim, (, Rectangle2D, area, ), {, double, w, =]
[public, void, trim, (, Rectangle2D, area, ), {, double, w, =, area, ., getWidth, (, ), ;, double, h, =]
[public, void, trim, (, Rectangle2D, area, ), {, double, w, =, area, ., getWidth, (, ), ;, double, h, =]
[w, =, area, ., getWidth, (, ), ;, double, h, =, area, ., getHeight, (, ), ;, double, l, =]
[area, ., getWidth, (, ), ;, double, h, =, area, ., getHeight, (, ), ;, double, l, =, calculateLeftInset, (]
[double, h, =, area, ., getHeight, (, ), ;, double, l, =, calculateLeftInset, (, w, ), ;, double, r, =]
[=, area, ., getHeight, (, ), ;, double, l, =, calculateLeftInset, (, w, ), ;, double, r, =, calculateRightInset, (]
[;, double, l, =, calculateLeftInset, (, w, ), ;, double, r, =, calculateRightInset, (, w, ), ;, double, t, =]
[l, =, calculateLeftInset, (, w, ), ;, double, r, =, calculateRightInset, (, w, ), ;, double, t, =, calculateTopInset, (]
[;, double, r, =, calculateRightInset, (, w, ), ;, double, t, =, calculateTopInset, (, h, ), ;, double, b, =]
[r, =, calculateRightInset, (, w, ), ;, double, t, =, calculateTopInset, (, h, ), ;, double, b, =, calculateBottomInset, (]
[(, w, ), ;, double, t, =, calculateTopInset, (, h, ), ;, double, b, =, calculateBottomInset, (, h, ), ;]
[(, w, ), ;, double, t, =, calculateTopInset, (, h, ), ;, double, b, =, calculateBottomInset, (, h, ), ;]
[double, t, =, calculateTopInset, (, h, ), ;, double, b, =, calculateBottomInset, (, h, ), ;, area, ., setRect, (]
[double, t, =, calculateTopInset, (, h, ), ;, double, b, =, calculateBottomInset, (, h, ), ;, area, ., setRect, (]
[double, t, =, calculateTopInset, (, h, ), ;, double, b, =, calculateBottomInset, (, h, ), ;, area, ., setRect, (]
[), ;, double, b, =, calculateBottomInset, (, h, ), ;, area, ., setRect, (, area, ., getX, (, ), +]
[double, b, =, calculateBottomInset, (, h, ), ;, area, ., setRect, (, area, ., getX, (, ), +, l, ,]
[double, b, =, calculateBottomInset, (, h, ), ;, area, ., setRect, (, area, ., getX, (, ), +, l, ,]
[double, b, =, calculateBottomInset, (, h, ), ;, area, ., setRect, (, area, ., getX, (, ), +, l, ,]
[), ;, area, ., setRect, (, area, ., getX, (, ), +, l, ,, area, ., getY, (, ), +]
[area, ., setRect, (, area, ., getX, (, ), +, l, ,, area, ., getY, (, ), +, t, ,]
[area, ., setRect, (, area, ., getX, (, ), +, l, ,, area, ., getY, (, ), +, t, ,]
[area, ., setRect, (, area, ., getX, (, ), +, l, ,, area, ., getY, (, ), +, t, ,]
[setRect, (, area, ., getX, (, ), +, l, ,, area, ., getY, (, ), +, t, ,, w, -]
[area, ., getX, (, ), +, l, ,, area, ., getY, (, ), +, t, ,, w, -, l, -]
[getX, (, ), +, l, ,, area, ., getY, (, ), +, t, ,, w, -, l, -, r, ,]
[getX, (, ), +, l, ,, area, ., getY, (, ), +, t, ,, w, -, l, -, r, ,]
[getX, (, ), +, l, ,, area, ., getY, (, ), +, t, ,, w, -, l, -, r, ,]
[), +, l, ,, area, ., getY, (, ), +, t, ,, w, -, l, -, r, ,, h, -]
[l, ,, area, ., getY, (, ), +, t, ,, w, -, l, -, r, ,, h, -, t, -]
