[., NoSuchElementException, ;, final, class, CharRange, implements, Iterable, <, Character, >, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[private, CharRange, (, char, start, ,, char, end, ,, final, boolean, negated, ), {, super, (, ), ;, if, (]
[private, CharRange, (, char, start, ,, char, end, ,, final, boolean, negated, ), {, super, (, ), ;, if, (]
[(, char, start, ,, char, end, ,, final, boolean, negated, ), {, super, (, ), ;, if, (, start, >]
[final, boolean, negated, ), {, super, (, ), ;, if, (, start, >, end, ), {, final, char, temp, =]
[negated, ), {, super, (, ), ;, if, (, start, >, end, ), {, final, char, temp, =, start, ;]
[{, super, (, ), ;, if, (, start, >, end, ), {, final, char, temp, =, start, ;, start, =]
[(, ), ;, if, (, start, >, end, ), {, final, char, temp, =, start, ;, start, =, end, ;]
[;, if, (, start, >, end, ), {, final, char, temp, =, start, ;, start, =, end, ;, end, =]
[start, >, end, ), {, final, char, temp, =, start, ;, start, =, end, ;, end, =, temp, ;, }]
[start, >, end, ), {, final, char, temp, =, start, ;, start, =, end, ;, end, =, temp, ;, }]
[{, final, char, temp, =, start, ;, start, =, end, ;, end, =, temp, ;, }, this, ., start, =]
[char, temp, =, start, ;, start, =, end, ;, end, =, temp, ;, }, this, ., start, =, start, ;]
[char, temp, =, start, ;, start, =, end, ;, end, =, temp, ;, }, this, ., start, =, start, ;]
[;, start, =, end, ;, end, =, temp, ;, }, this, ., start, =, start, ;, this, ., end, =]
[=, end, ;, end, =, temp, ;, }, this, ., start, =, start, ;, this, ., end, =, end, ;]
[=, end, ;, end, =, temp, ;, }, this, ., start, =, start, ;, this, ., end, =, end, ;]
[=, temp, ;, }, this, ., start, =, start, ;, this, ., end, =, end, ;, this, ., negated, =]
[end, ;, this, ., negated, =, negated, ;, }, public, static, CharRange, is, (, final, char, ch, ), {, return]
[., negated, =, negated, ;, }, public, static, CharRange, is, (, final, char, ch, ), {, return, new, CharRange, (]
[=, negated, ;, }, public, static, CharRange, is, (, final, char, ch, ), {, return, new, CharRange, (, ch, ,]
[;, }, public, static, CharRange, is, (, final, char, ch, ), {, return, new, CharRange, (, ch, ,, ch, ,]
[(, ch, ,, ch, ,, false, ), ;, }, public, static, CharRange, isNot, (, final, char, ch, ), {, return]
[ch, ,, false, ), ;, }, public, static, CharRange, isNot, (, final, char, ch, ), {, return, new, CharRange, (]
[false, ), ;, }, public, static, CharRange, isNot, (, final, char, ch, ), {, return, new, CharRange, (, ch, ,]
[;, }, public, static, CharRange, isNot, (, final, char, ch, ), {, return, new, CharRange, (, ch, ,, ch, ,]
[,, true, ), ;, }, public, static, CharRange, isIn, (, final, char, start, ,, final, char, end, ), {, return]
[;, }, public, static, CharRange, isIn, (, final, char, start, ,, final, char, end, ), {, return, new, CharRange, (]
[public, static, CharRange, isIn, (, final, char, start, ,, final, char, end, ), {, return, new, CharRange, (, start, ,]
[CharRange, isIn, (, final, char, start, ,, final, char, end, ), {, return, new, CharRange, (, start, ,, end, ,]
[,, false, ), ;, }, public, static, CharRange, isNotIn, (, final, char, start, ,, final, char, end, ), {, return]
[;, }, public, static, CharRange, isNotIn, (, final, char, start, ,, final, char, end, ), {, return, new, CharRange, (]
[public, static, CharRange, isNotIn, (, final, char, start, ,, final, char, end, ), {, return, new, CharRange, (, start, ,]
[CharRange, isNotIn, (, final, char, start, ,, final, char, end, ), {, return, new, CharRange, (, start, ,, end, ,]
[{, return, new, CharRange, (, start, ,, end, ,, true, ), ;, }, public, char, getStart, (, ), {, return]
[{, return, new, CharRange, (, start, ,, end, ,, true, ), ;, }, public, char, getStart, (, ), {, return]
[}, public, char, getStart, (, ), {, return, this, ., start, ;, }, public, char, getEnd, (, ), {, return]
[}, public, char, getStart, (, ), {, return, this, ., start, ;, }, public, char, getEnd, (, ), {, return]
[}, public, char, getEnd, (, ), {, return, this, ., end, ;, }, public, boolean, isNegated, (, ), {, return]
[public, boolean, isNegated, (, ), {, return, negated, ;, }, public, boolean, contains, (, final, char, ch, ), {, return]
[public, boolean, isNegated, (, ), {, return, negated, ;, }, public, boolean, contains, (, final, char, ch, ), {, return]
[boolean, isNegated, (, ), {, return, negated, ;, }, public, boolean, contains, (, final, char, ch, ), {, return, (]
[boolean, isNegated, (, ), {, return, negated, ;, }, public, boolean, contains, (, final, char, ch, ), {, return, (]
[boolean, isNegated, (, ), {, return, negated, ;, }, public, boolean, contains, (, final, char, ch, ), {, return, (]
[(, ), {, return, negated, ;, }, public, boolean, contains, (, final, char, ch, ), {, return, (, ch, >=]
[{, return, negated, ;, }, public, boolean, contains, (, final, char, ch, ), {, return, (, ch, >=, start, &&]
[{, return, negated, ;, }, public, boolean, contains, (, final, char, ch, ), {, return, (, ch, >=, start, &&]
[negated, ;, }, public, boolean, contains, (, final, char, ch, ), {, return, (, ch, >=, start, &&, ch, <=]
[public, boolean, contains, (, final, char, ch, ), {, return, (, ch, >=, start, &&, ch, <=, end, ), !=]
[&&, ch, <=, end, ), !=, negated, ;, }, public, boolean, contains, (, final, CharRange, range, ), {, if, (]
[&&, ch, <=, end, ), !=, negated, ;, }, public, boolean, contains, (, final, CharRange, range, ), {, if, (]
[<=, end, ), !=, negated, ;, }, public, boolean, contains, (, final, CharRange, range, ), {, if, (, range, ==]
[negated, ;, }, public, boolean, contains, (, final, CharRange, range, ), {, if, (, range, ==, null, ), {, throw]
[public, boolean, contains, (, final, CharRange, range, ), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (]
[range, ), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Range must not be null", ), ;, }, if, (]
[range, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Range must not be null", ), ;, }, if, (, negated, ), {, if, (]
[range, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Range must not be null", ), ;, }, if, (, negated, ), {, if, (]
[new, IllegalArgumentException, (, "The Range must not be null", ), ;, }, if, (, negated, ), {, if, (, range, ., negated, ), {, return]
[new, IllegalArgumentException, (, "The Range must not be null", ), ;, }, if, (, negated, ), {, if, (, range, ., negated, ), {, return]
[new, IllegalArgumentException, (, "The Range must not be null", ), ;, }, if, (, negated, ), {, if, (, range, ., negated, ), {, return]
[(, "The Range must not be null", ), ;, }, if, (, negated, ), {, if, (, range, ., negated, ), {, return, start, >=]
[(, "The Range must not be null", ), ;, }, if, (, negated, ), {, if, (, range, ., negated, ), {, return, start, >=]
[}, if, (, negated, ), {, if, (, range, ., negated, ), {, return, start, >=, range, ., start, &&]
[}, if, (, negated, ), {, if, (, range, ., negated, ), {, return, start, >=, range, ., start, &&]
[(, negated, ), {, if, (, range, ., negated, ), {, return, start, >=, range, ., start, &&, end, <=]
[(, negated, ), {, if, (, range, ., negated, ), {, return, start, >=, range, ., start, &&, end, <=]
[range, ., negated, ), {, return, start, >=, range, ., start, &&, end, <=, range, ., end, ;, }, return]
[range, ., negated, ), {, return, start, >=, range, ., start, &&, end, <=, range, ., end, ;, }, return]
[range, ., negated, ), {, return, start, >=, range, ., start, &&, end, <=, range, ., end, ;, }, return]
[range, ., negated, ), {, return, start, >=, range, ., start, &&, end, <=, range, ., end, ;, }, return]
[{, return, start, >=, range, ., start, &&, end, <=, range, ., end, ;, }, return, range, ., end, <]
[start, >=, range, ., start, &&, end, <=, range, ., end, ;, }, return, range, ., end, <, start, ||]
[start, >=, range, ., start, &&, end, <=, range, ., end, ;, }, return, range, ., end, <, start, ||]
[start, >=, range, ., start, &&, end, <=, range, ., end, ;, }, return, range, ., end, <, start, ||]
[start, &&, end, <=, range, ., end, ;, }, return, range, ., end, <, start, ||, range, ., start, >]
[., end, ;, }, return, range, ., end, <, start, ||, range, ., start, >, end, ;, }, if, (]
[., end, ;, }, return, range, ., end, <, start, ||, range, ., start, >, end, ;, }, if, (]
[., end, <, start, ||, range, ., start, >, end, ;, }, if, (, range, ., negated, ), {, return]
[., end, <, start, ||, range, ., start, >, end, ;, }, if, (, range, ., negated, ), {, return]
[., end, <, start, ||, range, ., start, >, end, ;, }, if, (, range, ., negated, ), {, return]
[<, start, ||, range, ., start, >, end, ;, }, if, (, range, ., negated, ), {, return, start, ==]
[||, range, ., start, >, end, ;, }, if, (, range, ., negated, ), {, return, start, ==, 0, &&]
[||, range, ., start, >, end, ;, }, if, (, range, ., negated, ), {, return, start, ==, 0, &&]
[., start, >, end, ;, }, if, (, range, ., negated, ), {, return, start, ==, 0, &&, end, ==]
[., start, >, end, ;, }, if, (, range, ., negated, ), {, return, start, ==, 0, &&, end, ==]
[if, (, range, ., negated, ), {, return, start, ==, 0, &&, end, ==, Character, ., MAX_VALUE, ;, }, return]
[if, (, range, ., negated, ), {, return, start, ==, 0, &&, end, ==, Character, ., MAX_VALUE, ;, }, return]
[if, (, range, ., negated, ), {, return, start, ==, 0, &&, end, ==, Character, ., MAX_VALUE, ;, }, return]
[range, ., negated, ), {, return, start, ==, 0, &&, end, ==, Character, ., MAX_VALUE, ;, }, return, start, <=]
[range, ., negated, ), {, return, start, ==, 0, &&, end, ==, Character, ., MAX_VALUE, ;, }, return, start, <=]
[{, return, start, ==, 0, &&, end, ==, Character, ., MAX_VALUE, ;, }, return, start, <=, range, ., start, &&]
[{, return, start, ==, 0, &&, end, ==, Character, ., MAX_VALUE, ;, }, return, start, <=, range, ., start, &&]
[start, ==, 0, &&, end, ==, Character, ., MAX_VALUE, ;, }, return, start, <=, range, ., start, &&, end, >=]
[start, ==, 0, &&, end, ==, Character, ., MAX_VALUE, ;, }, return, start, <=, range, ., start, &&, end, >=]
[end, >=, range, ., end, ;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (]
[end, >=, range, ., end, ;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (]
[range, ., end, ;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (, obj, ==]
[}, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[equals, (, final, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, final, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, final, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, obj, instanceof, CharRange, ==]
[(, obj, ==, this, ), {, return, true, ;, }, if, (, obj, instanceof, CharRange, ==, false, ), {, return]
[true, ;, }, if, (, obj, instanceof, CharRange, ==, false, ), {, return, false, ;, }, final, CharRange, other, =]
[if, (, obj, instanceof, CharRange, ==, false, ), {, return, false, ;, }, final, CharRange, other, =, (, CharRange, )]
[instanceof, CharRange, ==, false, ), {, return, false, ;, }, final, CharRange, other, =, (, CharRange, ), obj, ;, return]
[instanceof, CharRange, ==, false, ), {, return, false, ;, }, final, CharRange, other, =, (, CharRange, ), obj, ;, return]
[instanceof, CharRange, ==, false, ), {, return, false, ;, }, final, CharRange, other, =, (, CharRange, ), obj, ;, return]
[instanceof, CharRange, ==, false, ), {, return, false, ;, }, final, CharRange, other, =, (, CharRange, ), obj, ;, return]
[==, false, ), {, return, false, ;, }, final, CharRange, other, =, (, CharRange, ), obj, ;, return, start, ==]
[==, false, ), {, return, false, ;, }, final, CharRange, other, =, (, CharRange, ), obj, ;, return, start, ==]
[return, false, ;, }, final, CharRange, other, =, (, CharRange, ), obj, ;, return, start, ==, other, ., start, &&]
[return, false, ;, }, final, CharRange, other, =, (, CharRange, ), obj, ;, return, start, ==, other, ., start, &&]
[;, }, final, CharRange, other, =, (, CharRange, ), obj, ;, return, start, ==, other, ., start, &&, end, ==]
[;, }, final, CharRange, other, =, (, CharRange, ), obj, ;, return, start, ==, other, ., start, &&, end, ==]
[other, =, (, CharRange, ), obj, ;, return, start, ==, other, ., start, &&, end, ==, other, ., end, &&]
[other, =, (, CharRange, ), obj, ;, return, start, ==, other, ., start, &&, end, ==, other, ., end, &&]
[(, CharRange, ), obj, ;, return, start, ==, other, ., start, &&, end, ==, other, ., end, &&, negated, ==]
[(, CharRange, ), obj, ;, return, start, ==, other, ., start, &&, end, ==, other, ., end, &&, negated, ==]
[other, ., end, &&, negated, ==, other, ., negated, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[other, ., end, &&, negated, ==, other, ., negated, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[other, ., end, &&, negated, ==, other, ., negated, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[other, ., end, &&, negated, ==, other, ., negated, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[end, &&, negated, ==, other, ., negated, ;, }, @, Override, public, int, hashCode, (, ), {, return, 83, +]
[negated, ==, other, ., negated, ;, }, @, Override, public, int, hashCode, (, ), {, return, 83, +, start, +]
[negated, ==, other, ., negated, ;, }, @, Override, public, int, hashCode, (, ), {, return, 83, +, start, +]
[other, ., negated, ;, }, @, Override, public, int, hashCode, (, ), {, return, 83, +, start, +, 7, *]
[negated, ;, }, @, Override, public, int, hashCode, (, ), {, return, 83, +, start, +, 7, *, end, +]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 83, +, start, +, 7, *, end, +, (]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 83, +, start, +, 7, *, end, +, (]
[@, Override, public, int, hashCode, (, ), {, return, 83, +, start, +, 7, *, end, +, (, negated, ?]
[public, int, hashCode, (, ), {, return, 83, +, start, +, 7, *, end, +, (, negated, ?, 1, :]
[+, (, negated, ?, 1, :, 0, ), ;, }, @, Override, public, String, toString, (, ), {, if, (]
[+, (, negated, ?, 1, :, 0, ), ;, }, @, Override, public, String, toString, (, ), {, if, (]
[negated, ?, 1, :, 0, ), ;, }, @, Override, public, String, toString, (, ), {, if, (, iToString, ==]
[}, @, Override, public, String, toString, (, ), {, if, (, iToString, ==, null, ), {, final, StringBuilder, buf, =]
[public, String, toString, (, ), {, if, (, iToString, ==, null, ), {, final, StringBuilder, buf, =, new, StringBuilder, (]
[{, if, (, iToString, ==, null, ), {, final, StringBuilder, buf, =, new, StringBuilder, (, 4, ), ;, if, (]
[null, ), {, final, StringBuilder, buf, =, new, StringBuilder, (, 4, ), ;, if, (, isNegated, (, ), ), {]
[null, ), {, final, StringBuilder, buf, =, new, StringBuilder, (, 4, ), ;, if, (, isNegated, (, ), ), {]
[StringBuilder, buf, =, new, StringBuilder, (, 4, ), ;, if, (, isNegated, (, ), ), {, buf, ., append, (]
[StringBuilder, (, 4, ), ;, if, (, isNegated, (, ), ), {, buf, ., append, (, '^', ), ;, }]
[StringBuilder, (, 4, ), ;, if, (, isNegated, (, ), ), {, buf, ., append, (, '^', ), ;, }]
[;, if, (, isNegated, (, ), ), {, buf, ., append, (, '^', ), ;, }, buf, ., append, (]
[), ), {, buf, ., append, (, '^', ), ;, }, buf, ., append, (, start, ), ;, if, (]
[), ), {, buf, ., append, (, '^', ), ;, }, buf, ., append, (, start, ), ;, if, (]
[{, buf, ., append, (, '^', ), ;, }, buf, ., append, (, start, ), ;, if, (, start, !=]
[append, (, '^', ), ;, }, buf, ., append, (, start, ), ;, if, (, start, !=, end, ), {]
[append, (, '^', ), ;, }, buf, ., append, (, start, ), ;, if, (, start, !=, end, ), {]
[;, }, buf, ., append, (, start, ), ;, if, (, start, !=, end, ), {, buf, ., append, (]
[., append, (, start, ), ;, if, (, start, !=, end, ), {, buf, ., append, (, '-', ), ;]
[., append, (, start, ), ;, if, (, start, !=, end, ), {, buf, ., append, (, '-', ), ;]
[), ;, if, (, start, !=, end, ), {, buf, ., append, (, '-', ), ;, buf, ., append, (]
[start, !=, end, ), {, buf, ., append, (, '-', ), ;, buf, ., append, (, end, ), ;, }]
[end, ), {, buf, ., append, (, '-', ), ;, buf, ., append, (, end, ), ;, }, iToString, =]
[end, ), {, buf, ., append, (, '-', ), ;, buf, ., append, (, end, ), ;, }, iToString, =]
[), ;, buf, ., append, (, end, ), ;, }, iToString, =, buf, ., toString, (, ), ;, }, return]
[(, ), ;, }, return, iToString, ;, }, @, Override, public, Iterator, <, Character, >, iterator, (, ), {, return]
[}, return, iToString, ;, }, @, Override, public, Iterator, <, Character, >, iterator, (, ), {, return, new, CharacterIterator, (]
[char, current, ;, private, final, CharRange, range, ;, private, boolean, hasNext, ;, private, CharacterIterator, (, final, CharRange, r, ), {]
[;, private, final, CharRange, range, ;, private, boolean, hasNext, ;, private, CharacterIterator, (, final, CharRange, r, ), {, range, =]
[final, CharRange, range, ;, private, boolean, hasNext, ;, private, CharacterIterator, (, final, CharRange, r, ), {, range, =, r, ;]
[range, ;, private, boolean, hasNext, ;, private, CharacterIterator, (, final, CharRange, r, ), {, range, =, r, ;, hasNext, =]
[hasNext, ;, private, CharacterIterator, (, final, CharRange, r, ), {, range, =, r, ;, hasNext, =, true, ;, if, (]
[hasNext, ;, private, CharacterIterator, (, final, CharRange, r, ), {, range, =, r, ;, hasNext, =, true, ;, if, (]
[r, ), {, range, =, r, ;, hasNext, =, true, ;, if, (, range, ., negated, ), {, if, (]
[r, ), {, range, =, r, ;, hasNext, =, true, ;, if, (, range, ., negated, ), {, if, (]
[r, ), {, range, =, r, ;, hasNext, =, true, ;, if, (, range, ., negated, ), {, if, (]
[=, r, ;, hasNext, =, true, ;, if, (, range, ., negated, ), {, if, (, range, ., start, ==]
[true, ;, if, (, range, ., negated, ), {, if, (, range, ., start, ==, 0, ), {, if, (]
[true, ;, if, (, range, ., negated, ), {, if, (, range, ., start, ==, 0, ), {, if, (]
[true, ;, if, (, range, ., negated, ), {, if, (, range, ., start, ==, 0, ), {, if, (]
[range, ., negated, ), {, if, (, range, ., start, ==, 0, ), {, if, (, range, ., end, ==]
[range, ., negated, ), {, if, (, range, ., start, ==, 0, ), {, if, (, range, ., end, ==]
[if, (, range, ., start, ==, 0, ), {, if, (, range, ., end, ==, Character, ., MAX_VALUE, ), {]
[range, ., start, ==, 0, ), {, if, (, range, ., end, ==, Character, ., MAX_VALUE, ), {, hasNext, =]
[), {, if, (, range, ., end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {]
[if, (, range, ., end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {, current, =]
[., end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {, current, =, (, char, )]
[end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {, current, =, (, char, ), (]
[end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {, current, =, (, char, ), (]
[end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {, current, =, (, char, ), (]
[MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {, current, =, (, char, ), (, range, ., end, +]
[}, else, {, current, =, (, char, ), (, range, ., end, +, 1, ), ;, }, }, else, {]
[{, current, =, (, char, ), (, range, ., end, +, 1, ), ;, }, }, else, {, current, =]
[(, range, ., end, +, 1, ), ;, }, }, else, {, current, =, 0, ;, }, }, else, {]
[., end, +, 1, ), ;, }, }, else, {, current, =, 0, ;, }, }, else, {, current, =]
[., end, +, 1, ), ;, }, }, else, {, current, =, 0, ;, }, }, else, {, current, =]
[}, }, else, {, current, =, range, ., start, ;, }, }, private, void, prepareNext, (, ), {, if, (]
[}, }, else, {, current, =, range, ., start, ;, }, }, private, void, prepareNext, (, ), {, if, (]
[., start, ;, }, }, private, void, prepareNext, (, ), {, if, (, range, ., negated, ), {, if, (]
[., start, ;, }, }, private, void, prepareNext, (, ), {, if, (, range, ., negated, ), {, if, (]
[;, }, }, private, void, prepareNext, (, ), {, if, (, range, ., negated, ), {, if, (, current, ==]
[;, }, }, private, void, prepareNext, (, ), {, if, (, range, ., negated, ), {, if, (, current, ==]
[prepareNext, (, ), {, if, (, range, ., negated, ), {, if, (, current, ==, Character, ., MAX_VALUE, ), {]
[), {, if, (, range, ., negated, ), {, if, (, current, ==, Character, ., MAX_VALUE, ), {, hasNext, =]
[negated, ), {, if, (, current, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, if, (]
[negated, ), {, if, (, current, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, if, (]
[negated, ), {, if, (, current, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, if, (]
[{, if, (, current, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, if, (, current, +]
[(, current, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, if, (, current, +, 1, ==]
[(, current, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, if, (, current, +, 1, ==]
[{, hasNext, =, false, ;, }, else, if, (, current, +, 1, ==, range, ., start, ), {, if, (]
[{, hasNext, =, false, ;, }, else, if, (, current, +, 1, ==, range, ., start, ), {, if, (]
[{, hasNext, =, false, ;, }, else, if, (, current, +, 1, ==, range, ., start, ), {, if, (]
[;, }, else, if, (, current, +, 1, ==, range, ., start, ), {, if, (, range, ., end, ==]
[;, }, else, if, (, current, +, 1, ==, range, ., start, ), {, if, (, range, ., end, ==]
[current, +, 1, ==, range, ., start, ), {, if, (, range, ., end, ==, Character, ., MAX_VALUE, ), {]
[1, ==, range, ., start, ), {, if, (, range, ., end, ==, Character, ., MAX_VALUE, ), {, hasNext, =]
[), {, if, (, range, ., end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {]
[if, (, range, ., end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {, current, =]
[., end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {, current, =, (, char, )]
[end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {, current, =, (, char, ), (]
[end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {, current, =, (, char, ), (]
[end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {, current, =, (, char, ), (]
[MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {, current, =, (, char, ), (, range, ., end, +]
[}, else, {, current, =, (, char, ), (, range, ., end, +, 1, ), ;, }, }, else, {]
[{, current, =, (, char, ), (, range, ., end, +, 1, ), ;, }, }, else, {, current, =]
[(, char, ), (, range, ., end, +, 1, ), ;, }, }, else, {, current, =, (, char, )]
[char, ), (, range, ., end, +, 1, ), ;, }, }, else, {, current, =, (, char, ), (]
[char, ), (, range, ., end, +, 1, ), ;, }, }, else, {, current, =, (, char, ), (]
[(, range, ., end, +, 1, ), ;, }, }, else, {, current, =, (, char, ), (, current, +]
[}, }, else, {, current, =, (, char, ), (, current, +, 1, ), ;, }, }, else, if, (]
[}, }, else, {, current, =, (, char, ), (, current, +, 1, ), ;, }, }, else, if, (]
[else, {, current, =, (, char, ), (, current, +, 1, ), ;, }, }, else, if, (, current, <]
[else, {, current, =, (, char, ), (, current, +, 1, ), ;, }, }, else, if, (, current, <]
[char, ), (, current, +, 1, ), ;, }, }, else, if, (, current, <, range, ., end, ), {]
[(, current, +, 1, ), ;, }, }, else, if, (, current, <, range, ., end, ), {, current, =]
[1, ), ;, }, }, else, if, (, current, <, range, ., end, ), {, current, =, (, char, )]
[), ;, }, }, else, if, (, current, <, range, ., end, ), {, current, =, (, char, ), (]
[), ;, }, }, else, if, (, current, <, range, ., end, ), {, current, =, (, char, ), (]
[}, }, else, if, (, current, <, range, ., end, ), {, current, =, (, char, ), (, current, +]
[<, range, ., end, ), {, current, =, (, char, ), (, current, +, 1, ), ;, }, else, {]
[., end, ), {, current, =, (, char, ), (, current, +, 1, ), ;, }, else, {, hasNext, =]
[), ;, }, else, {, hasNext, =, false, ;, }, }, @, Override, public, boolean, hasNext, (, ), {, return]
[public, boolean, hasNext, (, ), {, return, hasNext, ;, }, @, Override, public, Character, next, (, ), {, if, (]
[public, boolean, hasNext, (, ), {, return, hasNext, ;, }, @, Override, public, Character, next, (, ), {, if, (]
[hasNext, (, ), {, return, hasNext, ;, }, @, Override, public, Character, next, (, ), {, if, (, hasNext, ==]
[return, hasNext, ;, }, @, Override, public, Character, next, (, ), {, if, (, hasNext, ==, false, ), {, throw]
[), {, if, (, hasNext, ==, false, ), {, throw, new, NoSuchElementException, (, ), ;, }, final, char, cur, =]
[if, (, hasNext, ==, false, ), {, throw, new, NoSuchElementException, (, ), ;, }, final, char, cur, =, current, ;]
[), {, throw, new, NoSuchElementException, (, ), ;, }, final, char, cur, =, current, ;, prepareNext, (, ), ;, return]
[), {, throw, new, NoSuchElementException, (, ), ;, }, final, char, cur, =, current, ;, prepareNext, (, ), ;, return]
[NoSuchElementException, (, ), ;, }, final, char, cur, =, current, ;, prepareNext, (, ), ;, return, Character, ., valueOf, (]
[), ;, return, Character, ., valueOf, (, cur, ), ;, }, @, Override, public, void, remove, (, ), {, throw]
