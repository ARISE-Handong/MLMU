[;, import, java, ., util, ., regex, ., Pattern, ;, public, class, Decamelizer, {, private, static, final, Pattern, CAPS, =]
[;, import, java, ., util, ., regex, ., Pattern, ;, public, class, Decamelizer, {, private, static, final, Pattern, CAPS, =]
[util, ., regex, ., Pattern, ;, public, class, Decamelizer, {, private, static, final, Pattern, CAPS, =, Pattern, ., compile, (]
[CAPS, =, Pattern, ., compile, (, "([A-Z\\d][^A-Z\\d]*)", ), ;, public, static, String, decamelizeMatcher, (, String, className, ), {, if, (]
[CAPS, =, Pattern, ., compile, (, "([A-Z\\d][^A-Z\\d]*)", ), ;, public, static, String, decamelizeMatcher, (, String, className, ), {, if, (]
[CAPS, =, Pattern, ., compile, (, "([A-Z\\d][^A-Z\\d]*)", ), ;, public, static, String, decamelizeMatcher, (, String, className, ), {, if, (]
["([A-Z\\d][^A-Z\\d]*)", ), ;, public, static, String, decamelizeMatcher, (, String, className, ), {, if, (, className, ., length, (, ), ==]
[static, String, decamelizeMatcher, (, String, className, ), {, if, (, className, ., length, (, ), ==, 0, ), {, return]
[), {, if, (, className, ., length, (, ), ==, 0, ), {, return, "<custom argument matcher>", ;, }, String, decamelized, =]
[if, (, className, ., length, (, ), ==, 0, ), {, return, "<custom argument matcher>", ;, }, String, decamelized, =, decamelizeClassName, (]
[(, ), ==, 0, ), {, return, "<custom argument matcher>", ;, }, String, decamelized, =, decamelizeClassName, (, className, ), ;, if, (]
[(, ), ==, 0, ), {, return, "<custom argument matcher>", ;, }, String, decamelized, =, decamelizeClassName, (, className, ), ;, if, (]
[(, ), ==, 0, ), {, return, "<custom argument matcher>", ;, }, String, decamelized, =, decamelizeClassName, (, className, ), ;, if, (]
[return, "<custom argument matcher>", ;, }, String, decamelized, =, decamelizeClassName, (, className, ), ;, if, (, decamelized, ., length, (, ), ==]
[String, decamelized, =, decamelizeClassName, (, className, ), ;, if, (, decamelized, ., length, (, ), ==, 0, ), {, return]
[String, decamelized, =, decamelizeClassName, (, className, ), ;, if, (, decamelized, ., length, (, ), ==, 0, ), {, return]
[String, decamelized, =, decamelizeClassName, (, className, ), ;, if, (, decamelized, ., length, (, ), ==, 0, ), {, return]
[=, decamelizeClassName, (, className, ), ;, if, (, decamelized, ., length, (, ), ==, 0, ), {, return, "<", +]
[(, className, ), ;, if, (, decamelized, ., length, (, ), ==, 0, ), {, return, "<", +, className, +]
[if, (, decamelized, ., length, (, ), ==, 0, ), {, return, "<", +, className, +, ">", ;, }, return]
[if, (, decamelized, ., length, (, ), ==, 0, ), {, return, "<", +, className, +, ">", ;, }, return]
[if, (, decamelized, ., length, (, ), ==, 0, ), {, return, "<", +, className, +, ">", ;, }, return]
[decamelized, ., length, (, ), ==, 0, ), {, return, "<", +, className, +, ">", ;, }, return, "<", +]
[length, (, ), ==, 0, ), {, return, "<", +, className, +, ">", ;, }, return, "<", +, decamelized, +]
[return, "<", +, decamelized, +, ">", ;, }, private, static, String, decamelizeClassName, (, String, className, ), {, Matcher, match, =]
[return, "<", +, decamelized, +, ">", ;, }, private, static, String, decamelizeClassName, (, String, className, ), {, Matcher, match, =]
[+, ">", ;, }, private, static, String, decamelizeClassName, (, String, className, ), {, Matcher, match, =, CAPS, ., matcher, (]
[String, decamelizeClassName, (, String, className, ), {, Matcher, match, =, CAPS, ., matcher, (, className, ), ;, StringBuilder, deCameled, =]
[Matcher, match, =, CAPS, ., matcher, (, className, ), ;, StringBuilder, deCameled, =, new, StringBuilder, (, ), ;, while, (]
[Matcher, match, =, CAPS, ., matcher, (, className, ), ;, StringBuilder, deCameled, =, new, StringBuilder, (, ), ;, while, (]
[;, StringBuilder, deCameled, =, new, StringBuilder, (, ), ;, while, (, match, ., find, (, ), ), {, if, (]
[;, StringBuilder, deCameled, =, new, StringBuilder, (, ), ;, while, (, match, ., find, (, ), ), {, if, (]
[;, StringBuilder, deCameled, =, new, StringBuilder, (, ), ;, while, (, match, ., find, (, ), ), {, if, (]
[(, ), ;, while, (, match, ., find, (, ), ), {, if, (, deCameled, ., length, (, ), ==]
[while, (, match, ., find, (, ), ), {, if, (, deCameled, ., length, (, ), ==, 0, ), {]
[while, (, match, ., find, (, ), ), {, if, (, deCameled, ., length, (, ), ==, 0, ), {]
[find, (, ), ), {, if, (, deCameled, ., length, (, ), ==, 0, ), {, deCameled, ., append, (]
[find, (, ), ), {, if, (, deCameled, ., length, (, ), ==, 0, ), {, deCameled, ., append, (]
[(, ), ==, 0, ), {, deCameled, ., append, (, match, ., group, (, ), ), ;, }, else, {]
[(, ), ==, 0, ), {, deCameled, ., append, (, match, ., group, (, ), ), ;, }, else, {]
[), {, deCameled, ., append, (, match, ., group, (, ), ), ;, }, else, {, deCameled, ., append, (]
[., append, (, match, ., group, (, ), ), ;, }, else, {, deCameled, ., append, (, " ", ), ;]
[., append, (, match, ., group, (, ), ), ;, }, else, {, deCameled, ., append, (, " ", ), ;]
[., group, (, ), ), ;, }, else, {, deCameled, ., append, (, " ", ), ;, deCameled, ., append, (]
[., group, (, ), ), ;, }, else, {, deCameled, ., append, (, " ", ), ;, deCameled, ., append, (]
[., group, (, ), ), ;, }, else, {, deCameled, ., append, (, " ", ), ;, deCameled, ., append, (]
[), ;, deCameled, ., append, (, match, ., group, (, ), ., toLowerCase, (, ), ), ;, }, }, return]
[), ;, deCameled, ., append, (, match, ., group, (, ), ., toLowerCase, (, ), ), ;, }, }, return]
