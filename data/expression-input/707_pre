[commons, ., math3, ., util, ., FastMath, ;, public, class, GraggBulirschStoerIntegrator, extends, AdaptiveStepsizeIntegrator, {, private, static, final, String, METHOD_NAME, =]
[(, final, double, minStep, ,, final, double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (]
[double, minStep, ,, final, double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, METHOD_NAME, ,]
[,, final, double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, METHOD_NAME, ,, minStep, ,]
[double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, METHOD_NAME, ,, minStep, ,, maxStep, ,]
[,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, METHOD_NAME, ,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,]
[scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, METHOD_NAME, ,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;]
[final, double, scalRelativeTolerance, ), {, super, (, METHOD_NAME, ,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, setStabilityCheck, (]
[scalRelativeTolerance, ), {, super, (, METHOD_NAME, ,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, setStabilityCheck, (, true, ,]
[), {, super, (, METHOD_NAME, ,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -]
[super, (, METHOD_NAME, ,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,]
[(, METHOD_NAME, ,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,, -]
[,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,]
[minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -]
[,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -, 1, ), ;]
[,, scalRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setControlFactors, (]
[scalRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -]
[;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -, 1, ,]
[setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -]
[true, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,]
[,, -, 1, ,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -]
[1, ,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,]
[,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -]
[,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;]
[1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (]
[), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -]
[setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -, 1, ,]
[(, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -]
[1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,]
[,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -]
[,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;]
[1, ,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;, setInterpolationControl, (]
[-, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;, setInterpolationControl, (, true, ,]
[1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;, setInterpolationControl, (, true, ,, -]
[,, final, double, maxStep, ,, final, double, [, ], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (]
[double, maxStep, ,, final, double, [, ], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (, METHOD_NAME, ,]
[,, final, double, [, ], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (, METHOD_NAME, ,, minStep, ,]
[double, [, ], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (, METHOD_NAME, ,, minStep, ,, maxStep, ,]
[], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (, METHOD_NAME, ,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,]
[final, double, [, ], vecRelativeTolerance, ), {, super, (, METHOD_NAME, ,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;]
[[, ], vecRelativeTolerance, ), {, super, (, METHOD_NAME, ,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, setStabilityCheck, (]
[vecRelativeTolerance, ), {, super, (, METHOD_NAME, ,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, setStabilityCheck, (, true, ,]
[), {, super, (, METHOD_NAME, ,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -]
[super, (, METHOD_NAME, ,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,]
[(, METHOD_NAME, ,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,, -]
[,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,]
[minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -]
[,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -, 1, ), ;]
[,, vecRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setControlFactors, (]
[vecRelativeTolerance, ), ;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -]
[;, setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -, 1, ,]
[setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -]
[true, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,]
[,, -, 1, ,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -]
[1, ,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,]
[,, -, 1, ,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -]
[,, -, 1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;]
[1, ), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (]
[), ;, setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -]
[setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -, 1, ,]
[(, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -]
[1, ,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,]
[,, -, 1, ,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -]
[,, -, 1, ,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;]
[1, ,, -, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;, setInterpolationControl, (]
[-, 1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;, setInterpolationControl, (, true, ,]
[1, ), ;, setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, ), ;, setInterpolationControl, (, true, ,, -]
[void, setStabilityCheck, (, final, boolean, performStabilityCheck, ,, final, int, maxNumIter, ,, final, int, maxNumChecks, ,, final, double, stepsizeReductionFactor, ), {]
[void, setStabilityCheck, (, final, boolean, performStabilityCheck, ,, final, int, maxNumIter, ,, final, int, maxNumChecks, ,, final, double, stepsizeReductionFactor, ), {]
[boolean, performStabilityCheck, ,, final, int, maxNumIter, ,, final, int, maxNumChecks, ,, final, double, stepsizeReductionFactor, ), {, this, ., performTest, =]
[,, final, int, maxNumIter, ,, final, int, maxNumChecks, ,, final, double, stepsizeReductionFactor, ), {, this, ., performTest, =, performStabilityCheck, ;]
[,, final, int, maxNumIter, ,, final, int, maxNumChecks, ,, final, double, stepsizeReductionFactor, ), {, this, ., performTest, =, performStabilityCheck, ;]
[,, final, int, maxNumChecks, ,, final, double, stepsizeReductionFactor, ), {, this, ., performTest, =, performStabilityCheck, ;, this, ., maxIter, =]
[,, final, int, maxNumChecks, ,, final, double, stepsizeReductionFactor, ), {, this, ., performTest, =, performStabilityCheck, ;, this, ., maxIter, =]
[final, int, maxNumChecks, ,, final, double, stepsizeReductionFactor, ), {, this, ., performTest, =, performStabilityCheck, ;, this, ., maxIter, =, (]
[final, int, maxNumChecks, ,, final, double, stepsizeReductionFactor, ), {, this, ., performTest, =, performStabilityCheck, ;, this, ., maxIter, =, (]
[maxNumChecks, ,, final, double, stepsizeReductionFactor, ), {, this, ., performTest, =, performStabilityCheck, ;, this, ., maxIter, =, (, maxNumIter, <=]
[double, stepsizeReductionFactor, ), {, this, ., performTest, =, performStabilityCheck, ;, this, ., maxIter, =, (, maxNumIter, <=, 0, ), ?]
[), {, this, ., performTest, =, performStabilityCheck, ;, this, ., maxIter, =, (, maxNumIter, <=, 0, ), ?, 2, :]
[this, ., performTest, =, performStabilityCheck, ;, this, ., maxIter, =, (, maxNumIter, <=, 0, ), ?, 2, :, maxNumIter, ;]
[this, ., performTest, =, performStabilityCheck, ;, this, ., maxIter, =, (, maxNumIter, <=, 0, ), ?, 2, :, maxNumIter, ;]
[performStabilityCheck, ;, this, ., maxIter, =, (, maxNumIter, <=, 0, ), ?, 2, :, maxNumIter, ;, this, ., maxChecks, =]
[performStabilityCheck, ;, this, ., maxIter, =, (, maxNumIter, <=, 0, ), ?, 2, :, maxNumIter, ;, this, ., maxChecks, =]
[;, this, ., maxIter, =, (, maxNumIter, <=, 0, ), ?, 2, :, maxNumIter, ;, this, ., maxChecks, =, (]
[;, this, ., maxIter, =, (, maxNumIter, <=, 0, ), ?, 2, :, maxNumIter, ;, this, ., maxChecks, =, (]
[., maxIter, =, (, maxNumIter, <=, 0, ), ?, 2, :, maxNumIter, ;, this, ., maxChecks, =, (, maxNumChecks, <=]
[(, maxNumIter, <=, 0, ), ?, 2, :, maxNumIter, ;, this, ., maxChecks, =, (, maxNumChecks, <=, 0, ), ?]
[<=, 0, ), ?, 2, :, maxNumIter, ;, this, ., maxChecks, =, (, maxNumChecks, <=, 0, ), ?, 1, :]
[2, :, maxNumIter, ;, this, ., maxChecks, =, (, maxNumChecks, <=, 0, ), ?, 1, :, maxNumChecks, ;, if, (]
[2, :, maxNumIter, ;, this, ., maxChecks, =, (, maxNumChecks, <=, 0, ), ?, 1, :, maxNumChecks, ;, if, (]
[:, maxNumIter, ;, this, ., maxChecks, =, (, maxNumChecks, <=, 0, ), ?, 1, :, maxNumChecks, ;, if, (, (]
[:, maxNumIter, ;, this, ., maxChecks, =, (, maxNumChecks, <=, 0, ), ?, 1, :, maxNumChecks, ;, if, (, (]
[;, this, ., maxChecks, =, (, maxNumChecks, <=, 0, ), ?, 1, :, maxNumChecks, ;, if, (, (, stepsizeReductionFactor, <]
[maxChecks, =, (, maxNumChecks, <=, 0, ), ?, 1, :, maxNumChecks, ;, if, (, (, stepsizeReductionFactor, <, 0.0001, ), ||]
[=, (, maxNumChecks, <=, 0, ), ?, 1, :, maxNumChecks, ;, if, (, (, stepsizeReductionFactor, <, 0.0001, ), ||, (]
[=, (, maxNumChecks, <=, 0, ), ?, 1, :, maxNumChecks, ;, if, (, (, stepsizeReductionFactor, <, 0.0001, ), ||, (]
[maxNumChecks, <=, 0, ), ?, 1, :, maxNumChecks, ;, if, (, (, stepsizeReductionFactor, <, 0.0001, ), ||, (, stepsizeReductionFactor, >]
[?, 1, :, maxNumChecks, ;, if, (, (, stepsizeReductionFactor, <, 0.0001, ), ||, (, stepsizeReductionFactor, >, 0.9999, ), ), {]
[?, 1, :, maxNumChecks, ;, if, (, (, stepsizeReductionFactor, <, 0.0001, ), ||, (, stepsizeReductionFactor, >, 0.9999, ), ), {]
[;, if, (, (, stepsizeReductionFactor, <, 0.0001, ), ||, (, stepsizeReductionFactor, >, 0.9999, ), ), {, this, ., stabilityReduction, =]
[<, 0.0001, ), ||, (, stepsizeReductionFactor, >, 0.9999, ), ), {, this, ., stabilityReduction, =, 0.5, ;, }, else, {]
[<, 0.0001, ), ||, (, stepsizeReductionFactor, >, 0.9999, ), ), {, this, ., stabilityReduction, =, 0.5, ;, }, else, {]
[(, stepsizeReductionFactor, >, 0.9999, ), ), {, this, ., stabilityReduction, =, 0.5, ;, }, else, {, this, ., stabilityReduction, =]
[(, final, double, control1, ,, final, double, control2, ,, final, double, control3, ,, final, double, control4, ), {, if, (]
[(, final, double, control1, ,, final, double, control2, ,, final, double, control3, ,, final, double, control4, ), {, if, (]
[final, double, control1, ,, final, double, control2, ,, final, double, control3, ,, final, double, control4, ), {, if, (, (]
[final, double, control1, ,, final, double, control2, ,, final, double, control3, ,, final, double, control4, ), {, if, (, (]
[control1, ,, final, double, control2, ,, final, double, control3, ,, final, double, control4, ), {, if, (, (, control1, <]
[double, control2, ,, final, double, control3, ,, final, double, control4, ), {, if, (, (, control1, <, 0.0001, ), ||]
[control2, ,, final, double, control3, ,, final, double, control4, ), {, if, (, (, control1, <, 0.0001, ), ||, (]
[control2, ,, final, double, control3, ,, final, double, control4, ), {, if, (, (, control1, <, 0.0001, ), ||, (]
[final, double, control3, ,, final, double, control4, ), {, if, (, (, control1, <, 0.0001, ), ||, (, control1, >]
[final, double, control4, ), {, if, (, (, control1, <, 0.0001, ), ||, (, control1, >, 0.9999, ), ), {]
[final, double, control4, ), {, if, (, (, control1, <, 0.0001, ), ||, (, control1, >, 0.9999, ), ), {]
[{, if, (, (, control1, <, 0.0001, ), ||, (, control1, >, 0.9999, ), ), {, this, ., stepControl1, =]
[<, 0.0001, ), ||, (, control1, >, 0.9999, ), ), {, this, ., stepControl1, =, 0.65, ;, }, else, {]
[<, 0.0001, ), ||, (, control1, >, 0.9999, ), ), {, this, ., stepControl1, =, 0.65, ;, }, else, {]
[(, control1, >, 0.9999, ), ), {, this, ., stepControl1, =, 0.65, ;, }, else, {, this, ., stepControl1, =]
[), {, this, ., stepControl1, =, 0.65, ;, }, else, {, this, ., stepControl1, =, control1, ;, }, if, (]
[), {, this, ., stepControl1, =, 0.65, ;, }, else, {, this, ., stepControl1, =, control1, ;, }, if, (]
[{, this, ., stepControl1, =, 0.65, ;, }, else, {, this, ., stepControl1, =, control1, ;, }, if, (, (]
[{, this, ., stepControl1, =, 0.65, ;, }, else, {, this, ., stepControl1, =, control1, ;, }, if, (, (]
[., stepControl1, =, 0.65, ;, }, else, {, this, ., stepControl1, =, control1, ;, }, if, (, (, control2, <]
[0.65, ;, }, else, {, this, ., stepControl1, =, control1, ;, }, if, (, (, control2, <, 0.0001, ), ||]
[;, }, else, {, this, ., stepControl1, =, control1, ;, }, if, (, (, control2, <, 0.0001, ), ||, (]
[;, }, else, {, this, ., stepControl1, =, control1, ;, }, if, (, (, control2, <, 0.0001, ), ||, (]
[else, {, this, ., stepControl1, =, control1, ;, }, if, (, (, control2, <, 0.0001, ), ||, (, control2, >]
[stepControl1, =, control1, ;, }, if, (, (, control2, <, 0.0001, ), ||, (, control2, >, 0.9999, ), ), {]
[stepControl1, =, control1, ;, }, if, (, (, control2, <, 0.0001, ), ||, (, control2, >, 0.9999, ), ), {]
[}, if, (, (, control2, <, 0.0001, ), ||, (, control2, >, 0.9999, ), ), {, this, ., stepControl2, =]
[<, 0.0001, ), ||, (, control2, >, 0.9999, ), ), {, this, ., stepControl2, =, 0.94, ;, }, else, {]
[<, 0.0001, ), ||, (, control2, >, 0.9999, ), ), {, this, ., stepControl2, =, 0.94, ;, }, else, {]
[(, control2, >, 0.9999, ), ), {, this, ., stepControl2, =, 0.94, ;, }, else, {, this, ., stepControl2, =]
[), {, this, ., stepControl2, =, 0.94, ;, }, else, {, this, ., stepControl2, =, control2, ;, }, if, (]
[), {, this, ., stepControl2, =, 0.94, ;, }, else, {, this, ., stepControl2, =, control2, ;, }, if, (]
[{, this, ., stepControl2, =, 0.94, ;, }, else, {, this, ., stepControl2, =, control2, ;, }, if, (, (]
[{, this, ., stepControl2, =, 0.94, ;, }, else, {, this, ., stepControl2, =, control2, ;, }, if, (, (]
[., stepControl2, =, 0.94, ;, }, else, {, this, ., stepControl2, =, control2, ;, }, if, (, (, control3, <]
[0.94, ;, }, else, {, this, ., stepControl2, =, control2, ;, }, if, (, (, control3, <, 0.0001, ), ||]
[;, }, else, {, this, ., stepControl2, =, control2, ;, }, if, (, (, control3, <, 0.0001, ), ||, (]
[;, }, else, {, this, ., stepControl2, =, control2, ;, }, if, (, (, control3, <, 0.0001, ), ||, (]
[else, {, this, ., stepControl2, =, control2, ;, }, if, (, (, control3, <, 0.0001, ), ||, (, control3, >]
[stepControl2, =, control2, ;, }, if, (, (, control3, <, 0.0001, ), ||, (, control3, >, 0.9999, ), ), {]
[stepControl2, =, control2, ;, }, if, (, (, control3, <, 0.0001, ), ||, (, control3, >, 0.9999, ), ), {]
[}, if, (, (, control3, <, 0.0001, ), ||, (, control3, >, 0.9999, ), ), {, this, ., stepControl3, =]
[<, 0.0001, ), ||, (, control3, >, 0.9999, ), ), {, this, ., stepControl3, =, 0.02, ;, }, else, {]
[<, 0.0001, ), ||, (, control3, >, 0.9999, ), ), {, this, ., stepControl3, =, 0.02, ;, }, else, {]
[(, control3, >, 0.9999, ), ), {, this, ., stepControl3, =, 0.02, ;, }, else, {, this, ., stepControl3, =]
[), {, this, ., stepControl3, =, 0.02, ;, }, else, {, this, ., stepControl3, =, control3, ;, }, if, (]
[), {, this, ., stepControl3, =, 0.02, ;, }, else, {, this, ., stepControl3, =, control3, ;, }, if, (]
[{, this, ., stepControl3, =, 0.02, ;, }, else, {, this, ., stepControl3, =, control3, ;, }, if, (, (]
[{, this, ., stepControl3, =, 0.02, ;, }, else, {, this, ., stepControl3, =, control3, ;, }, if, (, (]
[., stepControl3, =, 0.02, ;, }, else, {, this, ., stepControl3, =, control3, ;, }, if, (, (, control4, <]
[0.02, ;, }, else, {, this, ., stepControl3, =, control3, ;, }, if, (, (, control4, <, 1.0001, ), ||]
[;, }, else, {, this, ., stepControl3, =, control3, ;, }, if, (, (, control4, <, 1.0001, ), ||, (]
[;, }, else, {, this, ., stepControl3, =, control3, ;, }, if, (, (, control4, <, 1.0001, ), ||, (]
[else, {, this, ., stepControl3, =, control3, ;, }, if, (, (, control4, <, 1.0001, ), ||, (, control4, >]
[stepControl3, =, control3, ;, }, if, (, (, control4, <, 1.0001, ), ||, (, control4, >, 999.9, ), ), {]
[stepControl3, =, control3, ;, }, if, (, (, control4, <, 1.0001, ), ||, (, control4, >, 999.9, ), ), {]
[}, if, (, (, control4, <, 1.0001, ), ||, (, control4, >, 999.9, ), ), {, this, ., stepControl4, =]
[<, 1.0001, ), ||, (, control4, >, 999.9, ), ), {, this, ., stepControl4, =, 4.0, ;, }, else, {]
[<, 1.0001, ), ||, (, control4, >, 999.9, ), ), {, this, ., stepControl4, =, 4.0, ;, }, else, {]
[(, control4, >, 999.9, ), ), {, this, ., stepControl4, =, 4.0, ;, }, else, {, this, ., stepControl4, =]
[}, public, void, setOrderControl, (, final, int, maximalOrder, ,, final, double, control1, ,, final, double, control2, ), {, if, (]
[}, public, void, setOrderControl, (, final, int, maximalOrder, ,, final, double, control1, ,, final, double, control2, ), {, if, (]
[public, void, setOrderControl, (, final, int, maximalOrder, ,, final, double, control1, ,, final, double, control2, ), {, if, (, (]
[public, void, setOrderControl, (, final, int, maximalOrder, ,, final, double, control1, ,, final, double, control2, ), {, if, (, (]
[setOrderControl, (, final, int, maximalOrder, ,, final, double, control1, ,, final, double, control2, ), {, if, (, (, maximalOrder, <=]
[int, maximalOrder, ,, final, double, control1, ,, final, double, control2, ), {, if, (, (, maximalOrder, <=, 6, ), ||]
[maximalOrder, ,, final, double, control1, ,, final, double, control2, ), {, if, (, (, maximalOrder, <=, 6, ), ||, (]
[maximalOrder, ,, final, double, control1, ,, final, double, control2, ), {, if, (, (, maximalOrder, <=, 6, ), ||, (]
[maximalOrder, ,, final, double, control1, ,, final, double, control2, ), {, if, (, (, maximalOrder, <=, 6, ), ||, (]
[final, double, control1, ,, final, double, control2, ), {, if, (, (, maximalOrder, <=, 6, ), ||, (, maximalOrder, %]
[control1, ,, final, double, control2, ), {, if, (, (, maximalOrder, <=, 6, ), ||, (, maximalOrder, %, 2, !=]
[control2, ), {, if, (, (, maximalOrder, <=, 6, ), ||, (, maximalOrder, %, 2, !=, 0, ), ), {]
[control2, ), {, if, (, (, maximalOrder, <=, 6, ), ||, (, maximalOrder, %, 2, !=, 0, ), ), {]
[(, (, maximalOrder, <=, 6, ), ||, (, maximalOrder, %, 2, !=, 0, ), ), {, this, ., maxOrder, =]
[), ||, (, maximalOrder, %, 2, !=, 0, ), ), {, this, ., maxOrder, =, 18, ;, }, if, (]
[), ||, (, maximalOrder, %, 2, !=, 0, ), ), {, this, ., maxOrder, =, 18, ;, }, if, (]
[||, (, maximalOrder, %, 2, !=, 0, ), ), {, this, ., maxOrder, =, 18, ;, }, if, (, (]
[||, (, maximalOrder, %, 2, !=, 0, ), ), {, this, ., maxOrder, =, 18, ;, }, if, (, (]
[maximalOrder, %, 2, !=, 0, ), ), {, this, ., maxOrder, =, 18, ;, }, if, (, (, control1, <]
[!=, 0, ), ), {, this, ., maxOrder, =, 18, ;, }, if, (, (, control1, <, 0.0001, ), ||]
[0, ), ), {, this, ., maxOrder, =, 18, ;, }, if, (, (, control1, <, 0.0001, ), ||, (]
[0, ), ), {, this, ., maxOrder, =, 18, ;, }, if, (, (, control1, <, 0.0001, ), ||, (]
[), {, this, ., maxOrder, =, 18, ;, }, if, (, (, control1, <, 0.0001, ), ||, (, control1, >]
[maxOrder, =, 18, ;, }, if, (, (, control1, <, 0.0001, ), ||, (, control1, >, 0.9999, ), ), {]
[maxOrder, =, 18, ;, }, if, (, (, control1, <, 0.0001, ), ||, (, control1, >, 0.9999, ), ), {]
[}, if, (, (, control1, <, 0.0001, ), ||, (, control1, >, 0.9999, ), ), {, this, ., orderControl1, =]
[<, 0.0001, ), ||, (, control1, >, 0.9999, ), ), {, this, ., orderControl1, =, 0.8, ;, }, else, {]
[<, 0.0001, ), ||, (, control1, >, 0.9999, ), ), {, this, ., orderControl1, =, 0.8, ;, }, else, {]
[(, control1, >, 0.9999, ), ), {, this, ., orderControl1, =, 0.8, ;, }, else, {, this, ., orderControl1, =]
[), {, this, ., orderControl1, =, 0.8, ;, }, else, {, this, ., orderControl1, =, control1, ;, }, if, (]
[), {, this, ., orderControl1, =, 0.8, ;, }, else, {, this, ., orderControl1, =, control1, ;, }, if, (]
[{, this, ., orderControl1, =, 0.8, ;, }, else, {, this, ., orderControl1, =, control1, ;, }, if, (, (]
[{, this, ., orderControl1, =, 0.8, ;, }, else, {, this, ., orderControl1, =, control1, ;, }, if, (, (]
[., orderControl1, =, 0.8, ;, }, else, {, this, ., orderControl1, =, control1, ;, }, if, (, (, control2, <]
[0.8, ;, }, else, {, this, ., orderControl1, =, control1, ;, }, if, (, (, control2, <, 0.0001, ), ||]
[;, }, else, {, this, ., orderControl1, =, control1, ;, }, if, (, (, control2, <, 0.0001, ), ||, (]
[;, }, else, {, this, ., orderControl1, =, control1, ;, }, if, (, (, control2, <, 0.0001, ), ||, (]
[else, {, this, ., orderControl1, =, control1, ;, }, if, (, (, control2, <, 0.0001, ), ||, (, control2, >]
[orderControl1, =, control1, ;, }, if, (, (, control2, <, 0.0001, ), ||, (, control2, >, 0.9999, ), ), {]
[orderControl1, =, control1, ;, }, if, (, (, control2, <, 0.0001, ), ||, (, control2, >, 0.9999, ), ), {]
[}, if, (, (, control2, <, 0.0001, ), ||, (, control2, >, 0.9999, ), ), {, this, ., orderControl2, =]
[<, 0.0001, ), ||, (, control2, >, 0.9999, ), ), {, this, ., orderControl2, =, 0.9, ;, }, else, {]
[<, 0.0001, ), ||, (, control2, >, 0.9999, ), ), {, this, ., orderControl2, =, 0.9, ;, }, else, {]
[(, control2, >, 0.9999, ), ), {, this, ., orderControl2, =, 0.9, ;, }, else, {, this, ., orderControl2, =]
[0.9999, ), ), {, this, ., orderControl2, =, 0.9, ;, }, else, {, this, ., orderControl2, =, control2, ;, }]
[=, control2, ;, }, initializeArrays, (, ), ;, }, @, Override, public, void, addStepHandler, (, final, StepHandler, handler, ), {]
[=, control2, ;, }, initializeArrays, (, ), ;, }, @, Override, public, void, addStepHandler, (, final, StepHandler, handler, ), {]
[initializeArrays, (, ), ;, }, @, Override, public, void, addStepHandler, (, final, StepHandler, handler, ), {, super, ., addStepHandler, (]
[;, }, @, Override, public, void, addStepHandler, (, final, StepHandler, handler, ), {, super, ., addStepHandler, (, handler, ), ;]
[EventHandler, function, ,, final, double, maxCheckInterval, ,, final, double, convergence, ,, final, int, maxIterationCount, ,, final, UnivariateSolver, solver, ), {]
[EventHandler, function, ,, final, double, maxCheckInterval, ,, final, double, convergence, ,, final, int, maxIterationCount, ,, final, UnivariateSolver, solver, ), {]
[double, maxCheckInterval, ,, final, double, convergence, ,, final, int, maxIterationCount, ,, final, UnivariateSolver, solver, ), {, super, ., addEventHandler, (]
[,, final, double, convergence, ,, final, int, maxIterationCount, ,, final, UnivariateSolver, solver, ), {, super, ., addEventHandler, (, function, ,]
[double, convergence, ,, final, int, maxIterationCount, ,, final, UnivariateSolver, solver, ), {, super, ., addEventHandler, (, function, ,, maxCheckInterval, ,]
[,, final, int, maxIterationCount, ,, final, UnivariateSolver, solver, ), {, super, ., addEventHandler, (, function, ,, maxCheckInterval, ,, convergence, ,]
[int, maxIterationCount, ,, final, UnivariateSolver, solver, ), {, super, ., addEventHandler, (, function, ,, maxCheckInterval, ,, convergence, ,, maxIterationCount, ,]
[final, UnivariateSolver, solver, ), {, super, ., addEventHandler, (, function, ,, maxCheckInterval, ,, convergence, ,, maxIterationCount, ,, solver, ), ;]
[maxIterationCount, ,, solver, ), ;, initializeArrays, (, ), ;, }, private, void, initializeArrays, (, ), {, final, int, size, =]
[maxIterationCount, ,, solver, ), ;, initializeArrays, (, ), ;, }, private, void, initializeArrays, (, ), {, final, int, size, =]
[solver, ), ;, initializeArrays, (, ), ;, }, private, void, initializeArrays, (, ), {, final, int, size, =, maxOrder, /]
[(, ), ;, }, private, void, initializeArrays, (, ), {, final, int, size, =, maxOrder, /, 2, ;, if, (]
[(, ), ;, }, private, void, initializeArrays, (, ), {, final, int, size, =, maxOrder, /, 2, ;, if, (]
[), ;, }, private, void, initializeArrays, (, ), {, final, int, size, =, maxOrder, /, 2, ;, if, (, (]
[), ;, }, private, void, initializeArrays, (, ), {, final, int, size, =, maxOrder, /, 2, ;, if, (, (]
[}, private, void, initializeArrays, (, ), {, final, int, size, =, maxOrder, /, 2, ;, if, (, (, sequence, ==]
[initializeArrays, (, ), {, final, int, size, =, maxOrder, /, 2, ;, if, (, (, sequence, ==, null, ), ||]
[(, ), {, final, int, size, =, maxOrder, /, 2, ;, if, (, (, sequence, ==, null, ), ||, (]
[(, ), {, final, int, size, =, maxOrder, /, 2, ;, if, (, (, sequence, ==, null, ), ||, (]
[(, ), {, final, int, size, =, maxOrder, /, 2, ;, if, (, (, sequence, ==, null, ), ||, (]
[int, size, =, maxOrder, /, 2, ;, if, (, (, sequence, ==, null, ), ||, (, sequence, ., length, !=]
[/, 2, ;, if, (, (, sequence, ==, null, ), ||, (, sequence, ., length, !=, size, ), ), {]
[;, if, (, (, sequence, ==, null, ), ||, (, sequence, ., length, !=, size, ), ), {, sequence, =]
[(, sequence, ==, null, ), ||, (, sequence, ., length, !=, size, ), ), {, sequence, =, new, int, []
[null, ), ||, (, sequence, ., length, !=, size, ), ), {, sequence, =, new, int, [, size, ], ;]
[||, (, sequence, ., length, !=, size, ), ), {, sequence, =, new, int, [, size, ], ;, costPerStep, =]
[., length, !=, size, ), ), {, sequence, =, new, int, [, size, ], ;, costPerStep, =, new, int, []
[size, ), ), {, sequence, =, new, int, [, size, ], ;, costPerStep, =, new, int, [, size, ], ;]
[), {, sequence, =, new, int, [, size, ], ;, costPerStep, =, new, int, [, size, ], ;, coeff, =]
[=, new, int, [, size, ], ;, costPerStep, =, new, int, [, size, ], ;, coeff, =, new, double, []
[], ;, costPerStep, =, new, int, [, size, ], ;, coeff, =, new, double, [, size, ], [, ], ;]
[costPerStep, =, new, int, [, size, ], ;, coeff, =, new, double, [, size, ], [, ], ;, costPerTimeUnit, =]
[int, [, size, ], ;, coeff, =, new, double, [, size, ], [, ], ;, costPerTimeUnit, =, new, double, []
[], ;, coeff, =, new, double, [, size, ], [, ], ;, costPerTimeUnit, =, new, double, [, size, ], ;]
[coeff, =, new, double, [, size, ], [, ], ;, costPerTimeUnit, =, new, double, [, size, ], ;, optimalStep, =]
[double, [, size, ], [, ], ;, costPerTimeUnit, =, new, double, [, size, ], ;, optimalStep, =, new, double, []
[new, double, [, size, ], ;, optimalStep, =, new, double, [, size, ], ;, }, for, (, int, k, =]
[[, size, ], ;, optimalStep, =, new, double, [, size, ], ;, }, for, (, int, k, =, 0, ;]
[[, size, ], ;, optimalStep, =, new, double, [, size, ], ;, }, for, (, int, k, =, 0, ;]
[], ;, optimalStep, =, new, double, [, size, ], ;, }, for, (, int, k, =, 0, ;, k, <]
[optimalStep, =, new, double, [, size, ], ;, }, for, (, int, k, =, 0, ;, k, <, size, ;]
[=, new, double, [, size, ], ;, }, for, (, int, k, =, 0, ;, k, <, size, ;, ++]
[[, size, ], ;, }, for, (, int, k, =, 0, ;, k, <, size, ;, ++, k, ), {]
[[, size, ], ;, }, for, (, int, k, =, 0, ;, k, <, size, ;, ++, k, ), {]
[], ;, }, for, (, int, k, =, 0, ;, k, <, size, ;, ++, k, ), {, sequence, []
[for, (, int, k, =, 0, ;, k, <, size, ;, ++, k, ), {, sequence, [, k, ], =]
[for, (, int, k, =, 0, ;, k, <, size, ;, ++, k, ), {, sequence, [, k, ], =]
[for, (, int, k, =, 0, ;, k, <, size, ;, ++, k, ), {, sequence, [, k, ], =]
[int, k, =, 0, ;, k, <, size, ;, ++, k, ), {, sequence, [, k, ], =, 4, *]
[=, 0, ;, k, <, size, ;, ++, k, ), {, sequence, [, k, ], =, 4, *, k, +]
[k, <, size, ;, ++, k, ), {, sequence, [, k, ], =, 4, *, k, +, 2, ;, }]
[k, <, size, ;, ++, k, ), {, sequence, [, k, ], =, 4, *, k, +, 2, ;, }]
[size, ;, ++, k, ), {, sequence, [, k, ], =, 4, *, k, +, 2, ;, }, costPerStep, []
[k, ), {, sequence, [, k, ], =, 4, *, k, +, 2, ;, }, costPerStep, [, 0, ], =]
[k, ), {, sequence, [, k, ], =, 4, *, k, +, 2, ;, }, costPerStep, [, 0, ], =]
[k, ), {, sequence, [, k, ], =, 4, *, k, +, 2, ;, }, costPerStep, [, 0, ], =]
[{, sequence, [, k, ], =, 4, *, k, +, 2, ;, }, costPerStep, [, 0, ], =, sequence, []
[k, ], =, 4, *, k, +, 2, ;, }, costPerStep, [, 0, ], =, sequence, [, 0, ], +]
[2, ;, }, costPerStep, [, 0, ], =, sequence, [, 0, ], +, 1, ;, for, (, int, k, =]
[}, costPerStep, [, 0, ], =, sequence, [, 0, ], +, 1, ;, for, (, int, k, =, 1, ;]
[}, costPerStep, [, 0, ], =, sequence, [, 0, ], +, 1, ;, for, (, int, k, =, 1, ;]
[[, 0, ], =, sequence, [, 0, ], +, 1, ;, for, (, int, k, =, 1, ;, k, <]
[], =, sequence, [, 0, ], +, 1, ;, for, (, int, k, =, 1, ;, k, <, size, ;]
[=, sequence, [, 0, ], +, 1, ;, for, (, int, k, =, 1, ;, k, <, size, ;, ++]
[0, ], +, 1, ;, for, (, int, k, =, 1, ;, k, <, size, ;, ++, k, ), {]
[0, ], +, 1, ;, for, (, int, k, =, 1, ;, k, <, size, ;, ++, k, ), {]
[+, 1, ;, for, (, int, k, =, 1, ;, k, <, size, ;, ++, k, ), {, costPerStep, []
[for, (, int, k, =, 1, ;, k, <, size, ;, ++, k, ), {, costPerStep, [, k, ], =]
[for, (, int, k, =, 1, ;, k, <, size, ;, ++, k, ), {, costPerStep, [, k, ], =]
[for, (, int, k, =, 1, ;, k, <, size, ;, ++, k, ), {, costPerStep, [, k, ], =]
[int, k, =, 1, ;, k, <, size, ;, ++, k, ), {, costPerStep, [, k, ], =, costPerStep, []
[int, k, =, 1, ;, k, <, size, ;, ++, k, ), {, costPerStep, [, k, ], =, costPerStep, []
[=, 1, ;, k, <, size, ;, ++, k, ), {, costPerStep, [, k, ], =, costPerStep, [, k, -]
[k, <, size, ;, ++, k, ), {, costPerStep, [, k, ], =, costPerStep, [, k, -, 1, ], +]
[k, <, size, ;, ++, k, ), {, costPerStep, [, k, ], =, costPerStep, [, k, -, 1, ], +]
[size, ;, ++, k, ), {, costPerStep, [, k, ], =, costPerStep, [, k, -, 1, ], +, sequence, []
[], =, costPerStep, [, k, -, 1, ], +, sequence, [, k, ], ;, }, for, (, int, k, =]
[costPerStep, [, k, -, 1, ], +, sequence, [, k, ], ;, }, for, (, int, k, =, 0, ;]
[costPerStep, [, k, -, 1, ], +, sequence, [, k, ], ;, }, for, (, int, k, =, 0, ;]
[k, -, 1, ], +, sequence, [, k, ], ;, }, for, (, int, k, =, 0, ;, k, <]
[1, ], +, sequence, [, k, ], ;, }, for, (, int, k, =, 0, ;, k, <, size, ;]
[], +, sequence, [, k, ], ;, }, for, (, int, k, =, 0, ;, k, <, size, ;, ++]
[[, k, ], ;, }, for, (, int, k, =, 0, ;, k, <, size, ;, ++, k, ), {]
[[, k, ], ;, }, for, (, int, k, =, 0, ;, k, <, size, ;, ++, k, ), {]
[], ;, }, for, (, int, k, =, 0, ;, k, <, size, ;, ++, k, ), {, coeff, []
[for, (, int, k, =, 0, ;, k, <, size, ;, ++, k, ), {, coeff, [, k, ], =]
[for, (, int, k, =, 0, ;, k, <, size, ;, ++, k, ), {, coeff, [, k, ], =]
[(, int, k, =, 0, ;, k, <, size, ;, ++, k, ), {, coeff, [, k, ], =, (]
[(, int, k, =, 0, ;, k, <, size, ;, ++, k, ), {, coeff, [, k, ], =, (]
[k, =, 0, ;, k, <, size, ;, ++, k, ), {, coeff, [, k, ], =, (, k, >]
[;, k, <, size, ;, ++, k, ), {, coeff, [, k, ], =, (, k, >, 0, ), ?]
[size, ;, ++, k, ), {, coeff, [, k, ], =, (, k, >, 0, ), ?, new, double, []
[k, ), {, coeff, [, k, ], =, (, k, >, 0, ), ?, new, double, [, k, ], :]
[=, (, k, >, 0, ), ?, new, double, [, k, ], :, null, ;, for, (, int, l, =]
[k, >, 0, ), ?, new, double, [, k, ], :, null, ;, for, (, int, l, =, 0, ;]
[k, >, 0, ), ?, new, double, [, k, ], :, null, ;, for, (, int, l, =, 0, ;]
[0, ), ?, new, double, [, k, ], :, null, ;, for, (, int, l, =, 0, ;, l, <]
[?, new, double, [, k, ], :, null, ;, for, (, int, l, =, 0, ;, l, <, k, ;]
[new, double, [, k, ], :, null, ;, for, (, int, l, =, 0, ;, l, <, k, ;, ++]
[;, for, (, int, l, =, 0, ;, l, <, k, ;, ++, l, ), {, final, double, ratio, =]
[;, for, (, int, l, =, 0, ;, l, <, k, ;, ++, l, ), {, final, double, ratio, =]
[for, (, int, l, =, 0, ;, l, <, k, ;, ++, l, ), {, final, double, ratio, =, (]
[l, =, 0, ;, l, <, k, ;, ++, l, ), {, final, double, ratio, =, (, (, double, )]
[l, =, 0, ;, l, <, k, ;, ++, l, ), {, final, double, ratio, =, (, (, double, )]
[0, ;, l, <, k, ;, ++, l, ), {, final, double, ratio, =, (, (, double, ), sequence, []
[k, ;, ++, l, ), {, final, double, ratio, =, (, (, double, ), sequence, [, k, ], ), /]
[k, ;, ++, l, ), {, final, double, ratio, =, (, (, double, ), sequence, [, k, ], ), /]
[++, l, ), {, final, double, ratio, =, (, (, double, ), sequence, [, k, ], ), /, sequence, []
[++, l, ), {, final, double, ratio, =, (, (, double, ), sequence, [, k, ], ), /, sequence, []
[++, l, ), {, final, double, ratio, =, (, (, double, ), sequence, [, k, ], ), /, sequence, []
[), {, final, double, ratio, =, (, (, double, ), sequence, [, k, ], ), /, sequence, [, k, -]
[final, double, ratio, =, (, (, double, ), sequence, [, k, ], ), /, sequence, [, k, -, l, -]
[=, (, (, double, ), sequence, [, k, ], ), /, sequence, [, k, -, l, -, 1, ], ;]
[=, (, (, double, ), sequence, [, k, ], ), /, sequence, [, k, -, l, -, 1, ], ;]
[=, (, (, double, ), sequence, [, k, ], ), /, sequence, [, k, -, l, -, 1, ], ;]
[(, double, ), sequence, [, k, ], ), /, sequence, [, k, -, l, -, 1, ], ;, coeff, []
[sequence, [, k, ], ), /, sequence, [, k, -, l, -, 1, ], ;, coeff, [, k, ], []
[], ), /, sequence, [, k, -, l, -, 1, ], ;, coeff, [, k, ], [, l, ], =]
[], ), /, sequence, [, k, -, l, -, 1, ], ;, coeff, [, k, ], [, l, ], =]
[/, sequence, [, k, -, l, -, 1, ], ;, coeff, [, k, ], [, l, ], =, 1.0, /]
[sequence, [, k, -, l, -, 1, ], ;, coeff, [, k, ], [, l, ], =, 1.0, /, (]
[sequence, [, k, -, l, -, 1, ], ;, coeff, [, k, ], [, l, ], =, 1.0, /, (]
[sequence, [, k, -, l, -, 1, ], ;, coeff, [, k, ], [, l, ], =, 1.0, /, (]
[k, -, l, -, 1, ], ;, coeff, [, k, ], [, l, ], =, 1.0, /, (, ratio, *]
[l, -, 1, ], ;, coeff, [, k, ], [, l, ], =, 1.0, /, (, ratio, *, ratio, -]
[-, 1.0, ), ;, }, }, }, public, void, setInterpolationControl, (, final, boolean, useInterpolationErrorForControl, ,, final, int, mudifControlParameter, ), {]
[-, 1.0, ), ;, }, }, }, public, void, setInterpolationControl, (, final, boolean, useInterpolationErrorForControl, ,, final, int, mudifControlParameter, ), {]
[}, }, }, public, void, setInterpolationControl, (, final, boolean, useInterpolationErrorForControl, ,, final, int, mudifControlParameter, ), {, this, ., useInterpolationError, =]
[void, setInterpolationControl, (, final, boolean, useInterpolationErrorForControl, ,, final, int, mudifControlParameter, ), {, this, ., useInterpolationError, =, useInterpolationErrorForControl, ;, if, (]
[void, setInterpolationControl, (, final, boolean, useInterpolationErrorForControl, ,, final, int, mudifControlParameter, ), {, this, ., useInterpolationError, =, useInterpolationErrorForControl, ;, if, (]
[setInterpolationControl, (, final, boolean, useInterpolationErrorForControl, ,, final, int, mudifControlParameter, ), {, this, ., useInterpolationError, =, useInterpolationErrorForControl, ;, if, (, (]
[setInterpolationControl, (, final, boolean, useInterpolationErrorForControl, ,, final, int, mudifControlParameter, ), {, this, ., useInterpolationError, =, useInterpolationErrorForControl, ;, if, (, (]
[final, boolean, useInterpolationErrorForControl, ,, final, int, mudifControlParameter, ), {, this, ., useInterpolationError, =, useInterpolationErrorForControl, ;, if, (, (, mudifControlParameter, <=]
[,, final, int, mudifControlParameter, ), {, this, ., useInterpolationError, =, useInterpolationErrorForControl, ;, if, (, (, mudifControlParameter, <=, 0, ), ||]
[final, int, mudifControlParameter, ), {, this, ., useInterpolationError, =, useInterpolationErrorForControl, ;, if, (, (, mudifControlParameter, <=, 0, ), ||, (]
[final, int, mudifControlParameter, ), {, this, ., useInterpolationError, =, useInterpolationErrorForControl, ;, if, (, (, mudifControlParameter, <=, 0, ), ||, (]
[mudifControlParameter, ), {, this, ., useInterpolationError, =, useInterpolationErrorForControl, ;, if, (, (, mudifControlParameter, <=, 0, ), ||, (, mudifControlParameter, >=]
[., useInterpolationError, =, useInterpolationErrorForControl, ;, if, (, (, mudifControlParameter, <=, 0, ), ||, (, mudifControlParameter, >=, 7, ), ), {]
[., useInterpolationError, =, useInterpolationErrorForControl, ;, if, (, (, mudifControlParameter, <=, 0, ), ||, (, mudifControlParameter, >=, 7, ), ), {]
[;, if, (, (, mudifControlParameter, <=, 0, ), ||, (, mudifControlParameter, >=, 7, ), ), {, this, ., mudif, =]
[<=, 0, ), ||, (, mudifControlParameter, >=, 7, ), ), {, this, ., mudif, =, 4, ;, }, else, {]
[<=, 0, ), ||, (, mudifControlParameter, >=, 7, ), ), {, this, ., mudif, =, 4, ;, }, else, {]
[(, mudifControlParameter, >=, 7, ), ), {, this, ., mudif, =, 4, ;, }, else, {, this, ., mudif, =]
[double, [, ], y1, ,, final, double, [, ], y2, ,, final, double, [, ], scale, ), {, if, (]
[double, [, ], y1, ,, final, double, [, ], y2, ,, final, double, [, ], scale, ), {, if, (]
[], y1, ,, final, double, [, ], y2, ,, final, double, [, ], scale, ), {, if, (, vecAbsoluteTolerance, ==]
[,, final, double, [, ], scale, ), {, if, (, vecAbsoluteTolerance, ==, null, ), {, for, (, int, i, =]
[double, [, ], scale, ), {, if, (, vecAbsoluteTolerance, ==, null, ), {, for, (, int, i, =, 0, ;]
[double, [, ], scale, ), {, if, (, vecAbsoluteTolerance, ==, null, ), {, for, (, int, i, =, 0, ;]
[], scale, ), {, if, (, vecAbsoluteTolerance, ==, null, ), {, for, (, int, i, =, 0, ;, i, <]
[], scale, ), {, if, (, vecAbsoluteTolerance, ==, null, ), {, for, (, int, i, =, 0, ;, i, <]
[if, (, vecAbsoluteTolerance, ==, null, ), {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;]
[(, vecAbsoluteTolerance, ==, null, ), {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++]
[(, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, final, double, yi, =]
[(, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, final, double, yi, =]
[0, ;, i, <, scale, ., length, ;, ++, i, ), {, final, double, yi, =, FastMath, ., max, (]
[0, ;, i, <, scale, ., length, ;, ++, i, ), {, final, double, yi, =, FastMath, ., max, (]
[scale, ., length, ;, ++, i, ), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs, (]
[scale, ., length, ;, ++, i, ), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs, (]
[length, ;, ++, i, ), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs, (, y1, []
[), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs, (, y1, [, i, ], ), ,]
[), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs, (, y1, [, i, ], ), ,]
[yi, =, FastMath, ., max, (, FastMath, ., abs, (, y1, [, i, ], ), ,, FastMath, ., abs, (]
[yi, =, FastMath, ., max, (, FastMath, ., abs, (, y1, [, i, ], ), ,, FastMath, ., abs, (]
[FastMath, ., max, (, FastMath, ., abs, (, y1, [, i, ], ), ,, FastMath, ., abs, (, y2, []
[., abs, (, y1, [, i, ], ), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;]
[., abs, (, y1, [, i, ], ), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;]
[(, y1, [, i, ], ), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;, scale, []
[i, ], ), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ], =]
[i, ], ), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ], =]
[), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ], =, scalAbsoluteTolerance, +]
[), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ], =, scalAbsoluteTolerance, +]
[FastMath, ., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *]
[scale, [, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yi, ;, }, }, else, {, for, (, int, i, =]
[i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yi, ;, }, }, else, {, for, (, int, i, =, 0, ;]
[i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yi, ;, }, }, else, {, for, (, int, i, =, 0, ;]
[=, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yi, ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <]
[=, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yi, ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <]
[*, yi, ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;]
[yi, ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++]
[(, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, final, double, yi, =]
[(, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, final, double, yi, =]
[0, ;, i, <, scale, ., length, ;, ++, i, ), {, final, double, yi, =, FastMath, ., max, (]
[0, ;, i, <, scale, ., length, ;, ++, i, ), {, final, double, yi, =, FastMath, ., max, (]
[scale, ., length, ;, ++, i, ), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs, (]
[scale, ., length, ;, ++, i, ), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs, (]
[length, ;, ++, i, ), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs, (, y1, []
[), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs, (, y1, [, i, ], ), ,]
[), {, final, double, yi, =, FastMath, ., max, (, FastMath, ., abs, (, y1, [, i, ], ), ,]
[yi, =, FastMath, ., max, (, FastMath, ., abs, (, y1, [, i, ], ), ,, FastMath, ., abs, (]
[yi, =, FastMath, ., max, (, FastMath, ., abs, (, y1, [, i, ], ), ,, FastMath, ., abs, (]
[FastMath, ., max, (, FastMath, ., abs, (, y1, [, i, ], ), ,, FastMath, ., abs, (, y2, []
[., abs, (, y1, [, i, ], ), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;]
[., abs, (, y1, [, i, ], ), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;]
[(, y1, [, i, ], ), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;, scale, []
[i, ], ), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ], =]
[i, ], ), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ], =]
[i, ], ), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ], =]
[), ,, FastMath, ., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ], =, vecAbsoluteTolerance, []
[., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +]
[., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +]
[., abs, (, y2, [, i, ], ), ), ;, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +]
[(, y2, [, i, ], ), ), ;, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, []
[i, ], ), ), ;, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ], *]
[double, [, ], yEnd, ,, final, double, [, ], yTmp, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, final, int, n, =]
[double, [, ], yEnd, ,, final, double, [, ], yTmp, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, final, int, n, =]
[], yEnd, ,, final, double, [, ], yTmp, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, final, int, n, =, sequence, []
[yTmp, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, final, int, n, =, sequence, [, k, ], ;, final, double, subStep, =]
[yTmp, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, final, int, n, =, sequence, [, k, ], ;, final, double, subStep, =]
[throws, MaxCountExceededException, ,, DimensionMismatchException, {, final, int, n, =, sequence, [, k, ], ;, final, double, subStep, =, step, /]
[int, n, =, sequence, [, k, ], ;, final, double, subStep, =, step, /, n, ;, final, double, subStep2, =]
[int, n, =, sequence, [, k, ], ;, final, double, subStep, =, step, /, n, ;, final, double, subStep2, =]
[=, sequence, [, k, ], ;, final, double, subStep, =, step, /, n, ;, final, double, subStep2, =, 2, *]
[;, final, double, subStep, =, step, /, n, ;, final, double, subStep2, =, 2, *, subStep, ;, double, t, =]
[;, final, double, subStep, =, step, /, n, ;, final, double, subStep2, =, 2, *, subStep, ;, double, t, =]
[double, subStep, =, step, /, n, ;, final, double, subStep2, =, 2, *, subStep, ;, double, t, =, t0, +]
[final, double, subStep2, =, 2, *, subStep, ;, double, t, =, t0, +, subStep, ;, for, (, int, i, =]
[subStep2, =, 2, *, subStep, ;, double, t, =, t0, +, subStep, ;, for, (, int, i, =, 0, ;]
[subStep2, =, 2, *, subStep, ;, double, t, =, t0, +, subStep, ;, for, (, int, i, =, 0, ;]
[2, *, subStep, ;, double, t, =, t0, +, subStep, ;, for, (, int, i, =, 0, ;, i, <]
[2, *, subStep, ;, double, t, =, t0, +, subStep, ;, for, (, int, i, =, 0, ;, i, <]
[double, t, =, t0, +, subStep, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;]
[t, =, t0, +, subStep, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++]
[+, subStep, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[+, subStep, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, yTmp, []
[int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, yTmp, [, i, ], =]
[int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, yTmp, [, i, ], =]
[=, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, yTmp, [, i, ], =, y0, []
[i, <, y0, ., length, ;, ++, i, ), {, yTmp, [, i, ], =, y0, [, i, ], ;]
[i, <, y0, ., length, ;, ++, i, ), {, yTmp, [, i, ], =, y0, [, i, ], ;]
[y0, ., length, ;, ++, i, ), {, yTmp, [, i, ], =, y0, [, i, ], ;, yEnd, []
[;, ++, i, ), {, yTmp, [, i, ], =, y0, [, i, ], ;, yEnd, [, i, ], =]
[;, ++, i, ), {, yTmp, [, i, ], =, y0, [, i, ], ;, yEnd, [, i, ], =]
[;, ++, i, ), {, yTmp, [, i, ], =, y0, [, i, ], ;, yEnd, [, i, ], =]
[i, ), {, yTmp, [, i, ], =, y0, [, i, ], ;, yEnd, [, i, ], =, y0, []
[yTmp, [, i, ], =, y0, [, i, ], ;, yEnd, [, i, ], =, y0, [, i, ], +]
[yTmp, [, i, ], =, y0, [, i, ], ;, yEnd, [, i, ], =, y0, [, i, ], +]
[i, ], =, y0, [, i, ], ;, yEnd, [, i, ], =, y0, [, i, ], +, subStep, *]
[i, ], =, y0, [, i, ], ;, yEnd, [, i, ], =, y0, [, i, ], +, subStep, *]
[i, ], =, y0, [, i, ], ;, yEnd, [, i, ], =, y0, [, i, ], +, subStep, *]
[=, y0, [, i, ], ;, yEnd, [, i, ], =, y0, [, i, ], +, subStep, *, f, []
[i, ], ;, yEnd, [, i, ], =, y0, [, i, ], +, subStep, *, f, [, 0, ], []
[[, i, ], =, y0, [, i, ], +, subStep, *, f, [, 0, ], [, i, ], ;, }]
[], =, y0, [, i, ], +, subStep, *, f, [, 0, ], [, i, ], ;, }, computeDerivatives, (]
[y0, [, i, ], +, subStep, *, f, [, 0, ], [, i, ], ;, }, computeDerivatives, (, t, ,]
[i, ], +, subStep, *, f, [, 0, ], [, i, ], ;, }, computeDerivatives, (, t, ,, yEnd, ,]
[i, ], +, subStep, *, f, [, 0, ], [, i, ], ;, }, computeDerivatives, (, t, ,, yEnd, ,]
[+, subStep, *, f, [, 0, ], [, i, ], ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, []
[], ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, 1, ], ), ;, for, (, int, j, =]
[}, computeDerivatives, (, t, ,, yEnd, ,, f, [, 1, ], ), ;, for, (, int, j, =, 1, ;]
[}, computeDerivatives, (, t, ,, yEnd, ,, f, [, 1, ], ), ;, for, (, int, j, =, 1, ;]
[(, t, ,, yEnd, ,, f, [, 1, ], ), ;, for, (, int, j, =, 1, ;, j, <]
[,, yEnd, ,, f, [, 1, ], ), ;, for, (, int, j, =, 1, ;, j, <, n, ;]
[yEnd, ,, f, [, 1, ], ), ;, for, (, int, j, =, 1, ;, j, <, n, ;, ++]
[], ), ;, for, (, int, j, =, 1, ;, j, <, n, ;, ++, j, ), {, if, (]
[], ), ;, for, (, int, j, =, 1, ;, j, <, n, ;, ++, j, ), {, if, (]
[], ), ;, for, (, int, j, =, 1, ;, j, <, n, ;, ++, j, ), {, if, (]
[;, for, (, int, j, =, 1, ;, j, <, n, ;, ++, j, ), {, if, (, 2, *]
[(, int, j, =, 1, ;, j, <, n, ;, ++, j, ), {, if, (, 2, *, j, ==]
[=, 1, ;, j, <, n, ;, ++, j, ), {, if, (, 2, *, j, ==, n, ), {]
[=, 1, ;, j, <, n, ;, ++, j, ), {, if, (, 2, *, j, ==, n, ), {]
[<, n, ;, ++, j, ), {, if, (, 2, *, j, ==, n, ), {, System, ., arraycopy, (]
[;, ++, j, ), {, if, (, 2, *, j, ==, n, ), {, System, ., arraycopy, (, yEnd, ,]
[j, ), {, if, (, 2, *, j, ==, n, ), {, System, ., arraycopy, (, yEnd, ,, 0, ,]
[{, if, (, 2, *, j, ==, n, ), {, System, ., arraycopy, (, yEnd, ,, 0, ,, yMiddle, ,]
[(, 2, *, j, ==, n, ), {, System, ., arraycopy, (, yEnd, ,, 0, ,, yMiddle, ,, 0, ,]
[(, 2, *, j, ==, n, ), {, System, ., arraycopy, (, yEnd, ,, 0, ,, yMiddle, ,, 0, ,]
[), {, System, ., arraycopy, (, yEnd, ,, 0, ,, yMiddle, ,, 0, ,, y0, ., length, ), ;, }]
[System, ., arraycopy, (, yEnd, ,, 0, ,, yMiddle, ,, 0, ,, y0, ., length, ), ;, }, t, +=]
[,, yMiddle, ,, 0, ,, y0, ., length, ), ;, }, t, +=, subStep, ;, for, (, int, i, =]
[,, 0, ,, y0, ., length, ), ;, }, t, +=, subStep, ;, for, (, int, i, =, 0, ;]
[,, 0, ,, y0, ., length, ), ;, }, t, +=, subStep, ;, for, (, int, i, =, 0, ;]
[,, y0, ., length, ), ;, }, t, +=, subStep, ;, for, (, int, i, =, 0, ;, i, <]
[,, y0, ., length, ), ;, }, t, +=, subStep, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, }, t, +=, subStep, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;]
[;, }, t, +=, subStep, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++]
[(, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, final, double, middle, =]
[(, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, final, double, middle, =]
[i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, final, double, middle, =, yEnd, []
[;, i, <, y0, ., length, ;, ++, i, ), {, final, double, middle, =, yEnd, [, i, ], ;]
[;, i, <, y0, ., length, ;, ++, i, ), {, final, double, middle, =, yEnd, [, i, ], ;]
[<, y0, ., length, ;, ++, i, ), {, final, double, middle, =, yEnd, [, i, ], ;, yEnd, []
[length, ;, ++, i, ), {, final, double, middle, =, yEnd, [, i, ], ;, yEnd, [, i, ], =]
[length, ;, ++, i, ), {, final, double, middle, =, yEnd, [, i, ], ;, yEnd, [, i, ], =]
[length, ;, ++, i, ), {, final, double, middle, =, yEnd, [, i, ], ;, yEnd, [, i, ], =]
[++, i, ), {, final, double, middle, =, yEnd, [, i, ], ;, yEnd, [, i, ], =, yTmp, []
[{, final, double, middle, =, yEnd, [, i, ], ;, yEnd, [, i, ], =, yTmp, [, i, ], +]
[{, final, double, middle, =, yEnd, [, i, ], ;, yEnd, [, i, ], =, yTmp, [, i, ], +]
[double, middle, =, yEnd, [, i, ], ;, yEnd, [, i, ], =, yTmp, [, i, ], +, subStep2, *]
[double, middle, =, yEnd, [, i, ], ;, yEnd, [, i, ], =, yTmp, [, i, ], +, subStep2, *]
[double, middle, =, yEnd, [, i, ], ;, yEnd, [, i, ], =, yTmp, [, i, ], +, subStep2, *]
[=, yEnd, [, i, ], ;, yEnd, [, i, ], =, yTmp, [, i, ], +, subStep2, *, f, []
[i, ], ;, yEnd, [, i, ], =, yTmp, [, i, ], +, subStep2, *, f, [, j, ], []
[yEnd, [, i, ], =, yTmp, [, i, ], +, subStep2, *, f, [, j, ], [, i, ], ;]
[yEnd, [, i, ], =, yTmp, [, i, ], +, subStep2, *, f, [, j, ], [, i, ], ;]
[i, ], =, yTmp, [, i, ], +, subStep2, *, f, [, j, ], [, i, ], ;, yTmp, []
[yTmp, [, i, ], +, subStep2, *, f, [, j, ], [, i, ], ;, yTmp, [, i, ], =]
[], +, subStep2, *, f, [, j, ], [, i, ], ;, yTmp, [, i, ], =, middle, ;, }]
[subStep2, *, f, [, j, ], [, i, ], ;, yTmp, [, i, ], =, middle, ;, }, computeDerivatives, (]
[f, [, j, ], [, i, ], ;, yTmp, [, i, ], =, middle, ;, }, computeDerivatives, (, t, ,]
[j, ], [, i, ], ;, yTmp, [, i, ], =, middle, ;, }, computeDerivatives, (, t, ,, yEnd, ,]
[j, ], [, i, ], ;, yTmp, [, i, ], =, middle, ;, }, computeDerivatives, (, t, ,, yEnd, ,]
[[, i, ], ;, yTmp, [, i, ], =, middle, ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, []
[[, i, ], ;, yTmp, [, i, ], =, middle, ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, []
[], ;, yTmp, [, i, ], =, middle, ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, j, +]
[=, middle, ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, j, +, 1, ], ), ;, if, (]
[=, middle, ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, j, +, 1, ], ), ;, if, (]
[=, middle, ;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, j, +, 1, ], ), ;, if, (]
[;, }, computeDerivatives, (, t, ,, yEnd, ,, f, [, j, +, 1, ], ), ;, if, (, performTest, &&]
[}, computeDerivatives, (, t, ,, yEnd, ,, f, [, j, +, 1, ], ), ;, if, (, performTest, &&, (]
[}, computeDerivatives, (, t, ,, yEnd, ,, f, [, j, +, 1, ], ), ;, if, (, performTest, &&, (]
[(, t, ,, yEnd, ,, f, [, j, +, 1, ], ), ;, if, (, performTest, &&, (, j, <=]
[yEnd, ,, f, [, j, +, 1, ], ), ;, if, (, performTest, &&, (, j, <=, maxChecks, ), &&]
[,, f, [, j, +, 1, ], ), ;, if, (, performTest, &&, (, j, <=, maxChecks, ), &&, (]
[,, f, [, j, +, 1, ], ), ;, if, (, performTest, &&, (, j, <=, maxChecks, ), &&, (]
[[, j, +, 1, ], ), ;, if, (, performTest, &&, (, j, <=, maxChecks, ), &&, (, k, <]
[if, (, performTest, &&, (, j, <=, maxChecks, ), &&, (, k, <, maxIter, ), ), {, double, initialNorm, =]
[maxChecks, ), &&, (, k, <, maxIter, ), ), {, double, initialNorm, =, 0.0, ;, for, (, int, l, =]
[&&, (, k, <, maxIter, ), ), {, double, initialNorm, =, 0.0, ;, for, (, int, l, =, 0, ;]
[&&, (, k, <, maxIter, ), ), {, double, initialNorm, =, 0.0, ;, for, (, int, l, =, 0, ;]
[k, <, maxIter, ), ), {, double, initialNorm, =, 0.0, ;, for, (, int, l, =, 0, ;, l, <]
[k, <, maxIter, ), ), {, double, initialNorm, =, 0.0, ;, for, (, int, l, =, 0, ;, l, <]
[), {, double, initialNorm, =, 0.0, ;, for, (, int, l, =, 0, ;, l, <, scale, ., length, ;]
[{, double, initialNorm, =, 0.0, ;, for, (, int, l, =, 0, ;, l, <, scale, ., length, ;, ++]
[(, int, l, =, 0, ;, l, <, scale, ., length, ;, ++, l, ), {, final, double, ratio, =]
[(, int, l, =, 0, ;, l, <, scale, ., length, ;, ++, l, ), {, final, double, ratio, =]
[(, int, l, =, 0, ;, l, <, scale, ., length, ;, ++, l, ), {, final, double, ratio, =]
[(, int, l, =, 0, ;, l, <, scale, ., length, ;, ++, l, ), {, final, double, ratio, =]
[l, =, 0, ;, l, <, scale, ., length, ;, ++, l, ), {, final, double, ratio, =, f, []
[;, l, <, scale, ., length, ;, ++, l, ), {, final, double, ratio, =, f, [, 0, ], []
[scale, ., length, ;, ++, l, ), {, final, double, ratio, =, f, [, 0, ], [, l, ], /]
[scale, ., length, ;, ++, l, ), {, final, double, ratio, =, f, [, 0, ], [, l, ], /]
[length, ;, ++, l, ), {, final, double, ratio, =, f, [, 0, ], [, l, ], /, scale, []
[l, ), {, final, double, ratio, =, f, [, 0, ], [, l, ], /, scale, [, l, ], ;]
[{, final, double, ratio, =, f, [, 0, ], [, l, ], /, scale, [, l, ], ;, initialNorm, +=]
[{, final, double, ratio, =, f, [, 0, ], [, l, ], /, scale, [, l, ], ;, initialNorm, +=]
[double, ratio, =, f, [, 0, ], [, l, ], /, scale, [, l, ], ;, initialNorm, +=, ratio, *]
[], [, l, ], /, scale, [, l, ], ;, initialNorm, +=, ratio, *, ratio, ;, }, double, deltaNorm, =]
[l, ], ;, initialNorm, +=, ratio, *, ratio, ;, }, double, deltaNorm, =, 0.0, ;, for, (, int, l, =]
[;, initialNorm, +=, ratio, *, ratio, ;, }, double, deltaNorm, =, 0.0, ;, for, (, int, l, =, 0, ;]
[;, initialNorm, +=, ratio, *, ratio, ;, }, double, deltaNorm, =, 0.0, ;, for, (, int, l, =, 0, ;]
[+=, ratio, *, ratio, ;, }, double, deltaNorm, =, 0.0, ;, for, (, int, l, =, 0, ;, l, <]
[+=, ratio, *, ratio, ;, }, double, deltaNorm, =, 0.0, ;, for, (, int, l, =, 0, ;, l, <]
[;, }, double, deltaNorm, =, 0.0, ;, for, (, int, l, =, 0, ;, l, <, scale, ., length, ;]
[}, double, deltaNorm, =, 0.0, ;, for, (, int, l, =, 0, ;, l, <, scale, ., length, ;, ++]
[(, int, l, =, 0, ;, l, <, scale, ., length, ;, ++, l, ), {, final, double, ratio, =]
[(, int, l, =, 0, ;, l, <, scale, ., length, ;, ++, l, ), {, final, double, ratio, =]
[int, l, =, 0, ;, l, <, scale, ., length, ;, ++, l, ), {, final, double, ratio, =, (]
[int, l, =, 0, ;, l, <, scale, ., length, ;, ++, l, ), {, final, double, ratio, =, (]
[int, l, =, 0, ;, l, <, scale, ., length, ;, ++, l, ), {, final, double, ratio, =, (]
[int, l, =, 0, ;, l, <, scale, ., length, ;, ++, l, ), {, final, double, ratio, =, (]
[=, 0, ;, l, <, scale, ., length, ;, ++, l, ), {, final, double, ratio, =, (, f, []
[=, 0, ;, l, <, scale, ., length, ;, ++, l, ), {, final, double, ratio, =, (, f, []
[;, l, <, scale, ., length, ;, ++, l, ), {, final, double, ratio, =, (, f, [, j, +]
[scale, ., length, ;, ++, l, ), {, final, double, ratio, =, (, f, [, j, +, 1, ], []
[;, ++, l, ), {, final, double, ratio, =, (, f, [, j, +, 1, ], [, l, ], -]
[;, ++, l, ), {, final, double, ratio, =, (, f, [, j, +, 1, ], [, l, ], -]
[;, ++, l, ), {, final, double, ratio, =, (, f, [, j, +, 1, ], [, l, ], -]
[l, ), {, final, double, ratio, =, (, f, [, j, +, 1, ], [, l, ], -, f, []
[final, double, ratio, =, (, f, [, j, +, 1, ], [, l, ], -, f, [, 0, ], []
[(, f, [, j, +, 1, ], [, l, ], -, f, [, 0, ], [, l, ], ), /]
[(, f, [, j, +, 1, ], [, l, ], -, f, [, 0, ], [, l, ], ), /]
[[, j, +, 1, ], [, l, ], -, f, [, 0, ], [, l, ], ), /, scale, []
[1, ], [, l, ], -, f, [, 0, ], [, l, ], ), /, scale, [, l, ], ;]
[[, l, ], -, f, [, 0, ], [, l, ], ), /, scale, [, l, ], ;, deltaNorm, +=]
[[, l, ], -, f, [, 0, ], [, l, ], ), /, scale, [, l, ], ;, deltaNorm, +=]
[], -, f, [, 0, ], [, l, ], ), /, scale, [, l, ], ;, deltaNorm, +=, ratio, *]
[], [, l, ], ), /, scale, [, l, ], ;, deltaNorm, +=, ratio, *, ratio, ;, }, if, (]
[], [, l, ], ), /, scale, [, l, ], ;, deltaNorm, +=, ratio, *, ratio, ;, }, if, (]
[l, ], ), /, scale, [, l, ], ;, deltaNorm, +=, ratio, *, ratio, ;, }, if, (, deltaNorm, >]
[l, ], ), /, scale, [, l, ], ;, deltaNorm, +=, ratio, *, ratio, ;, }, if, (, deltaNorm, >]
[), /, scale, [, l, ], ;, deltaNorm, +=, ratio, *, ratio, ;, }, if, (, deltaNorm, >, 4, *]
[), /, scale, [, l, ], ;, deltaNorm, +=, ratio, *, ratio, ;, }, if, (, deltaNorm, >, 4, *]
[l, ], ;, deltaNorm, +=, ratio, *, ratio, ;, }, if, (, deltaNorm, >, 4, *, FastMath, ., max, (]
[;, deltaNorm, +=, ratio, *, ratio, ;, }, if, (, deltaNorm, >, 4, *, FastMath, ., max, (, 1.0e-15, ,]
[ratio, ;, }, if, (, deltaNorm, >, 4, *, FastMath, ., max, (, 1.0e-15, ,, initialNorm, ), ), {, return]
[., max, (, 1.0e-15, ,, initialNorm, ), ), {, return, false, ;, }, }, }, for, (, int, i, =]
[(, 1.0e-15, ,, initialNorm, ), ), {, return, false, ;, }, }, }, for, (, int, i, =, 0, ;]
[(, 1.0e-15, ,, initialNorm, ), ), {, return, false, ;, }, }, }, for, (, int, i, =, 0, ;]
[,, initialNorm, ), ), {, return, false, ;, }, }, }, for, (, int, i, =, 0, ;, i, <]
[,, initialNorm, ), ), {, return, false, ;, }, }, }, for, (, int, i, =, 0, ;, i, <]
[{, return, false, ;, }, }, }, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;]
[return, false, ;, }, }, }, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++]
[}, }, }, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[}, }, }, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[}, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, yEnd, []
[int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, yEnd, [, i, ], =]
[int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, yEnd, [, i, ], =]
[=, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, yEnd, [, i, ], =, 0.5, *]
[0, ;, i, <, y0, ., length, ;, ++, i, ), {, yEnd, [, i, ], =, 0.5, *, (]
[0, ;, i, <, y0, ., length, ;, ++, i, ), {, yEnd, [, i, ], =, 0.5, *, (]
[0, ;, i, <, y0, ., length, ;, ++, i, ), {, yEnd, [, i, ], =, 0.5, *, (]
[0, ;, i, <, y0, ., length, ;, ++, i, ), {, yEnd, [, i, ], =, 0.5, *, (]
[i, <, y0, ., length, ;, ++, i, ), {, yEnd, [, i, ], =, 0.5, *, (, yTmp, []
[., length, ;, ++, i, ), {, yEnd, [, i, ], =, 0.5, *, (, yTmp, [, i, ], +]
[., length, ;, ++, i, ), {, yEnd, [, i, ], =, 0.5, *, (, yTmp, [, i, ], +]
[;, ++, i, ), {, yEnd, [, i, ], =, 0.5, *, (, yTmp, [, i, ], +, yEnd, []
[), {, yEnd, [, i, ], =, 0.5, *, (, yTmp, [, i, ], +, yEnd, [, i, ], +]
[), {, yEnd, [, i, ], =, 0.5, *, (, yTmp, [, i, ], +, yEnd, [, i, ], +]
[yEnd, [, i, ], =, 0.5, *, (, yTmp, [, i, ], +, yEnd, [, i, ], +, subStep, *]
[yEnd, [, i, ], =, 0.5, *, (, yTmp, [, i, ], +, yEnd, [, i, ], +, subStep, *]
[yEnd, [, i, ], =, 0.5, *, (, yTmp, [, i, ], +, yEnd, [, i, ], +, subStep, *]
[i, ], =, 0.5, *, (, yTmp, [, i, ], +, yEnd, [, i, ], +, subStep, *, f, []
[0.5, *, (, yTmp, [, i, ], +, yEnd, [, i, ], +, subStep, *, f, [, n, ], []
[], +, yEnd, [, i, ], +, subStep, *, f, [, n, ], [, i, ], ), ;, }, return]
[final, double, [, ], [, ], diag, ,, final, double, [, ], last, ), {, for, (, int, j, =]
[[, ], [, ], diag, ,, final, double, [, ], last, ), {, for, (, int, j, =, 1, ;]
[[, ], [, ], diag, ,, final, double, [, ], last, ), {, for, (, int, j, =, 1, ;]
[[, ], diag, ,, final, double, [, ], last, ), {, for, (, int, j, =, 1, ;, j, <]
[diag, ,, final, double, [, ], last, ), {, for, (, int, j, =, 1, ;, j, <, k, ;]
[,, final, double, [, ], last, ), {, for, (, int, j, =, 1, ;, j, <, k, ;, ++]
[for, (, int, j, =, 1, ;, j, <, k, ;, ++, j, ), {, for, (, int, i, =]
[int, j, =, 1, ;, j, <, k, ;, ++, j, ), {, for, (, int, i, =, 0, ;]
[int, j, =, 1, ;, j, <, k, ;, ++, j, ), {, for, (, int, i, =, 0, ;]
[=, 1, ;, j, <, k, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <]
[=, 1, ;, j, <, k, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <]
[<, k, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, last, ., length, ;]
[k, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, last, ., length, ;, ++]
[j, ), {, for, (, int, i, =, 0, ;, i, <, last, ., length, ;, ++, i, ), {]
[j, ), {, for, (, int, i, =, 0, ;, i, <, last, ., length, ;, ++, i, ), {]
[j, ), {, for, (, int, i, =, 0, ;, i, <, last, ., length, ;, ++, i, ), {]
[{, for, (, int, i, =, 0, ;, i, <, last, ., length, ;, ++, i, ), {, diag, []
[{, for, (, int, i, =, 0, ;, i, <, last, ., length, ;, ++, i, ), {, diag, []
[{, for, (, int, i, =, 0, ;, i, <, last, ., length, ;, ++, i, ), {, diag, []
[(, int, i, =, 0, ;, i, <, last, ., length, ;, ++, i, ), {, diag, [, k, -]
[i, =, 0, ;, i, <, last, ., length, ;, ++, i, ), {, diag, [, k, -, j, -]
[;, i, <, last, ., length, ;, ++, i, ), {, diag, [, k, -, j, -, 1, ], []
[last, ., length, ;, ++, i, ), {, diag, [, k, -, j, -, 1, ], [, i, ], =]
[last, ., length, ;, ++, i, ), {, diag, [, k, -, j, -, 1, ], [, i, ], =]
[last, ., length, ;, ++, i, ), {, diag, [, k, -, j, -, 1, ], [, i, ], =]
[last, ., length, ;, ++, i, ), {, diag, [, k, -, j, -, 1, ], [, i, ], =]
[length, ;, ++, i, ), {, diag, [, k, -, j, -, 1, ], [, i, ], =, diag, []
[length, ;, ++, i, ), {, diag, [, k, -, j, -, 1, ], [, i, ], =, diag, []
[++, i, ), {, diag, [, k, -, j, -, 1, ], [, i, ], =, diag, [, k, -]
[{, diag, [, k, -, j, -, 1, ], [, i, ], =, diag, [, k, -, j, ], []
[k, -, j, -, 1, ], [, i, ], =, diag, [, k, -, j, ], [, i, ], +]
[k, -, j, -, 1, ], [, i, ], =, diag, [, k, -, j, ], [, i, ], +]
[k, -, j, -, 1, ], [, i, ], =, diag, [, k, -, j, ], [, i, ], +]
[k, -, j, -, 1, ], [, i, ], =, diag, [, k, -, j, ], [, i, ], +]
[j, -, 1, ], [, i, ], =, diag, [, k, -, j, ], [, i, ], +, coeff, []
[j, -, 1, ], [, i, ], =, diag, [, k, -, j, ], [, i, ], +, coeff, []
[1, ], [, i, ], =, diag, [, k, -, j, ], [, i, ], +, coeff, [, k, +]
[i, ], =, diag, [, k, -, j, ], [, i, ], +, coeff, [, k, +, offset, ], []
[i, ], =, diag, [, k, -, j, ], [, i, ], +, coeff, [, k, +, offset, ], []
[=, diag, [, k, -, j, ], [, i, ], +, coeff, [, k, +, offset, ], [, j, -]
[k, -, j, ], [, i, ], +, coeff, [, k, +, offset, ], [, j, -, 1, ], *]
[-, j, ], [, i, ], +, coeff, [, k, +, offset, ], [, j, -, 1, ], *, (]
[-, j, ], [, i, ], +, coeff, [, k, +, offset, ], [, j, -, 1, ], *, (]
[-, j, ], [, i, ], +, coeff, [, k, +, offset, ], [, j, -, 1, ], *, (]
[-, j, ], [, i, ], +, coeff, [, k, +, offset, ], [, j, -, 1, ], *, (]
[], [, i, ], +, coeff, [, k, +, offset, ], [, j, -, 1, ], *, (, diag, []
[], [, i, ], +, coeff, [, k, +, offset, ], [, j, -, 1, ], *, (, diag, []
[i, ], +, coeff, [, k, +, offset, ], [, j, -, 1, ], *, (, diag, [, k, -]
[coeff, [, k, +, offset, ], [, j, -, 1, ], *, (, diag, [, k, -, j, ], []
[+, offset, ], [, j, -, 1, ], *, (, diag, [, k, -, j, ], [, i, ], -]
[+, offset, ], [, j, -, 1, ], *, (, diag, [, k, -, j, ], [, i, ], -]
[+, offset, ], [, j, -, 1, ], *, (, diag, [, k, -, j, ], [, i, ], -]
[], [, j, -, 1, ], *, (, diag, [, k, -, j, ], [, i, ], -, diag, []
[], [, j, -, 1, ], *, (, diag, [, k, -, j, ], [, i, ], -, diag, []
[], [, j, -, 1, ], *, (, diag, [, k, -, j, ], [, i, ], -, diag, []
[j, -, 1, ], *, (, diag, [, k, -, j, ], [, i, ], -, diag, [, k, -]
[1, ], *, (, diag, [, k, -, j, ], [, i, ], -, diag, [, k, -, j, -]
[(, diag, [, k, -, j, ], [, i, ], -, diag, [, k, -, j, -, 1, ], []
[diag, [, k, -, j, -, 1, ], [, i, ], ), ;, }, }, for, (, int, i, =]
[k, -, j, -, 1, ], [, i, ], ), ;, }, }, for, (, int, i, =, 0, ;]
[k, -, j, -, 1, ], [, i, ], ), ;, }, }, for, (, int, i, =, 0, ;]
[j, -, 1, ], [, i, ], ), ;, }, }, for, (, int, i, =, 0, ;, i, <]
[j, -, 1, ], [, i, ], ), ;, }, }, for, (, int, i, =, 0, ;, i, <]
[[, i, ], ), ;, }, }, for, (, int, i, =, 0, ;, i, <, last, ., length, ;]
[i, ], ), ;, }, }, for, (, int, i, =, 0, ;, i, <, last, ., length, ;, ++]
[;, }, }, for, (, int, i, =, 0, ;, i, <, last, ., length, ;, ++, i, ), {]
[;, }, }, for, (, int, i, =, 0, ;, i, <, last, ., length, ;, ++, i, ), {]
[}, for, (, int, i, =, 0, ;, i, <, last, ., length, ;, ++, i, ), {, last, []
[int, i, =, 0, ;, i, <, last, ., length, ;, ++, i, ), {, last, [, i, ], =]
[int, i, =, 0, ;, i, <, last, ., length, ;, ++, i, ), {, last, [, i, ], =]
[int, i, =, 0, ;, i, <, last, ., length, ;, ++, i, ), {, last, [, i, ], =]
[int, i, =, 0, ;, i, <, last, ., length, ;, ++, i, ), {, last, [, i, ], =]
[=, 0, ;, i, <, last, ., length, ;, ++, i, ), {, last, [, i, ], =, diag, []
[i, <, last, ., length, ;, ++, i, ), {, last, [, i, ], =, diag, [, 0, ], []
[., length, ;, ++, i, ), {, last, [, i, ], =, diag, [, 0, ], [, i, ], +]
[., length, ;, ++, i, ), {, last, [, i, ], =, diag, [, 0, ], [, i, ], +]
[., length, ;, ++, i, ), {, last, [, i, ], =, diag, [, 0, ], [, i, ], +]
[., length, ;, ++, i, ), {, last, [, i, ], =, diag, [, 0, ], [, i, ], +]
[;, ++, i, ), {, last, [, i, ], =, diag, [, 0, ], [, i, ], +, coeff, []
[;, ++, i, ), {, last, [, i, ], =, diag, [, 0, ], [, i, ], +, coeff, []
[i, ), {, last, [, i, ], =, diag, [, 0, ], [, i, ], +, coeff, [, k, +]
[last, [, i, ], =, diag, [, 0, ], [, i, ], +, coeff, [, k, +, offset, ], []
[last, [, i, ], =, diag, [, 0, ], [, i, ], +, coeff, [, k, +, offset, ], []
[i, ], =, diag, [, 0, ], [, i, ], +, coeff, [, k, +, offset, ], [, k, -]
[diag, [, 0, ], [, i, ], +, coeff, [, k, +, offset, ], [, k, -, 1, ], *]
[[, 0, ], [, i, ], +, coeff, [, k, +, offset, ], [, k, -, 1, ], *, (]
[[, 0, ], [, i, ], +, coeff, [, k, +, offset, ], [, k, -, 1, ], *, (]
[[, 0, ], [, i, ], +, coeff, [, k, +, offset, ], [, k, -, 1, ], *, (]
[[, 0, ], [, i, ], +, coeff, [, k, +, offset, ], [, k, -, 1, ], *, (]
[], [, i, ], +, coeff, [, k, +, offset, ], [, k, -, 1, ], *, (, diag, []
[], +, coeff, [, k, +, offset, ], [, k, -, 1, ], *, (, diag, [, 0, ], []
[[, k, +, offset, ], [, k, -, 1, ], *, (, diag, [, 0, ], [, i, ], -]
[[, k, +, offset, ], [, k, -, 1, ], *, (, diag, [, 0, ], [, i, ], -]
[+, offset, ], [, k, -, 1, ], *, (, diag, [, 0, ], [, i, ], -, last, []
[void, integrate, (, final, ExpandableStatefulODE, equations, ,, final, double, t, ), throws, NumberIsTooSmallException, ,, DimensionMismatchException, ,, MaxCountExceededException, ,, NoBracketingException, {]
[(, final, ExpandableStatefulODE, equations, ,, final, double, t, ), throws, NumberIsTooSmallException, ,, DimensionMismatchException, ,, MaxCountExceededException, ,, NoBracketingException, {, sanityChecks, (]
[ExpandableStatefulODE, equations, ,, final, double, t, ), throws, NumberIsTooSmallException, ,, DimensionMismatchException, ,, MaxCountExceededException, ,, NoBracketingException, {, sanityChecks, (, equations, ,]
[final, double, t, ), throws, NumberIsTooSmallException, ,, DimensionMismatchException, ,, MaxCountExceededException, ,, NoBracketingException, {, sanityChecks, (, equations, ,, t, ), ;]
[t, ), throws, NumberIsTooSmallException, ,, DimensionMismatchException, ,, MaxCountExceededException, ,, NoBracketingException, {, sanityChecks, (, equations, ,, t, ), ;, setEquations, (]
[MaxCountExceededException, ,, NoBracketingException, {, sanityChecks, (, equations, ,, t, ), ;, setEquations, (, equations, ), ;, final, boolean, forward, =]
[MaxCountExceededException, ,, NoBracketingException, {, sanityChecks, (, equations, ,, t, ), ;, setEquations, (, equations, ), ;, final, boolean, forward, =]
[NoBracketingException, {, sanityChecks, (, equations, ,, t, ), ;, setEquations, (, equations, ), ;, final, boolean, forward, =, t, >]
[NoBracketingException, {, sanityChecks, (, equations, ,, t, ), ;, setEquations, (, equations, ), ;, final, boolean, forward, =, t, >]
[), ;, final, boolean, forward, =, t, >, equations, ., getTime, (, ), ;, final, double, [, ], y0, =]
[), ;, final, boolean, forward, =, t, >, equations, ., getTime, (, ), ;, final, double, [, ], y0, =]
[), ;, final, double, [, ], y0, =, equations, ., getCompleteState, (, ), ;, final, double, [, ], y, =]
[), ;, final, double, [, ], y0, =, equations, ., getCompleteState, (, ), ;, final, double, [, ], y, =]
[), ;, final, double, [, ], y, =, y0, ., clone, (, ), ;, final, double, [, ], yDot0, =]
[double, [, ], y, =, y0, ., clone, (, ), ;, final, double, [, ], yDot0, =, new, double, []
[double, [, ], y, =, y0, ., clone, (, ), ;, final, double, [, ], yDot0, =, new, double, []
[final, double, [, ], yDot0, =, new, double, [, y, ., length, ], ;, final, double, [, ], y1, =]
[], yDot0, =, new, double, [, y, ., length, ], ;, final, double, [, ], y1, =, new, double, []
[], yDot0, =, new, double, [, y, ., length, ], ;, final, double, [, ], y1, =, new, double, []
[final, double, [, ], y1, =, new, double, [, y, ., length, ], ;, final, double, [, ], yTmp, =]
[], y1, =, new, double, [, y, ., length, ], ;, final, double, [, ], yTmp, =, new, double, []
[], y1, =, new, double, [, y, ., length, ], ;, final, double, [, ], yTmp, =, new, double, []
[final, double, [, ], yTmp, =, new, double, [, y, ., length, ], ;, final, double, [, ], yTmpDot, =]
[], yTmp, =, new, double, [, y, ., length, ], ;, final, double, [, ], yTmpDot, =, new, double, []
[], yTmp, =, new, double, [, y, ., length, ], ;, final, double, [, ], yTmpDot, =, new, double, []
[[, ], yTmpDot, =, new, double, [, y, ., length, ], ;, final, double, [, ], [, ], diagonal, =]
[=, new, double, [, y, ., length, ], ;, final, double, [, ], [, ], diagonal, =, new, double, []
[=, new, double, [, y, ., length, ], ;, final, double, [, ], [, ], diagonal, =, new, double, []
[=, new, double, [, y, ., length, ], ;, final, double, [, ], [, ], diagonal, =, new, double, []
[y, ., length, ], ;, final, double, [, ], [, ], diagonal, =, new, double, [, sequence, ., length, -]
[new, double, [, sequence, ., length, -, 1, ], [, ], ;, final, double, [, ], [, ], y1Diag, =]
[sequence, ., length, -, 1, ], [, ], ;, final, double, [, ], [, ], y1Diag, =, new, double, []
[sequence, ., length, -, 1, ], [, ], ;, final, double, [, ], [, ], y1Diag, =, new, double, []
[sequence, ., length, -, 1, ], [, ], ;, final, double, [, ], [, ], y1Diag, =, new, double, []
[1, ], [, ], ;, final, double, [, ], [, ], y1Diag, =, new, double, [, sequence, ., length, -]
[], y1Diag, =, new, double, [, sequence, ., length, -, 1, ], [, ], ;, for, (, int, k, =]
[=, new, double, [, sequence, ., length, -, 1, ], [, ], ;, for, (, int, k, =, 0, ;]
[=, new, double, [, sequence, ., length, -, 1, ], [, ], ;, for, (, int, k, =, 0, ;]
[double, [, sequence, ., length, -, 1, ], [, ], ;, for, (, int, k, =, 0, ;, k, <]
[double, [, sequence, ., length, -, 1, ], [, ], ;, for, (, int, k, =, 0, ;, k, <]
[double, [, sequence, ., length, -, 1, ], [, ], ;, for, (, int, k, =, 0, ;, k, <]
[length, -, 1, ], [, ], ;, for, (, int, k, =, 0, ;, k, <, sequence, ., length, -]
[1, ], [, ], ;, for, (, int, k, =, 0, ;, k, <, sequence, ., length, -, 1, ;]
[], [, ], ;, for, (, int, k, =, 0, ;, k, <, sequence, ., length, -, 1, ;, ++]
[;, for, (, int, k, =, 0, ;, k, <, sequence, ., length, -, 1, ;, ++, k, ), {]
[;, for, (, int, k, =, 0, ;, k, <, sequence, ., length, -, 1, ;, ++, k, ), {]
[(, int, k, =, 0, ;, k, <, sequence, ., length, -, 1, ;, ++, k, ), {, diagonal, []
[=, 0, ;, k, <, sequence, ., length, -, 1, ;, ++, k, ), {, diagonal, [, k, ], =]
[k, <, sequence, ., length, -, 1, ;, ++, k, ), {, diagonal, [, k, ], =, new, double, []
[k, <, sequence, ., length, -, 1, ;, ++, k, ), {, diagonal, [, k, ], =, new, double, []
[-, 1, ;, ++, k, ), {, diagonal, [, k, ], =, new, double, [, y, ., length, ], ;]
[-, 1, ;, ++, k, ), {, diagonal, [, k, ], =, new, double, [, y, ., length, ], ;]
[;, ++, k, ), {, diagonal, [, k, ], =, new, double, [, y, ., length, ], ;, y1Diag, []
[), {, diagonal, [, k, ], =, new, double, [, y, ., length, ], ;, y1Diag, [, k, ], =]
[[, k, ], =, new, double, [, y, ., length, ], ;, y1Diag, [, k, ], =, new, double, []
[[, k, ], =, new, double, [, y, ., length, ], ;, y1Diag, [, k, ], =, new, double, []
[=, new, double, [, y, ., length, ], ;, }, final, double, [, ], [, ], [, ], fk, =]
[[, y, ., length, ], ;, }, final, double, [, ], [, ], [, ], fk, =, new, double, []
[[, y, ., length, ], ;, }, final, double, [, ], [, ], [, ], fk, =, new, double, []
[], fk, =, new, double, [, sequence, ., length, ], [, ], [, ], ;, for, (, int, k, =]
[=, new, double, [, sequence, ., length, ], [, ], [, ], ;, for, (, int, k, =, 0, ;]
[=, new, double, [, sequence, ., length, ], [, ], [, ], ;, for, (, int, k, =, 0, ;]
[double, [, sequence, ., length, ], [, ], [, ], ;, for, (, int, k, =, 0, ;, k, <]
[double, [, sequence, ., length, ], [, ], [, ], ;, for, (, int, k, =, 0, ;, k, <]
[length, ], [, ], [, ], ;, for, (, int, k, =, 0, ;, k, <, sequence, ., length, ;]
[], [, ], [, ], ;, for, (, int, k, =, 0, ;, k, <, sequence, ., length, ;, ++]
[[, ], ;, for, (, int, k, =, 0, ;, k, <, sequence, ., length, ;, ++, k, ), {]
[[, ], ;, for, (, int, k, =, 0, ;, k, <, sequence, ., length, ;, ++, k, ), {]
[;, for, (, int, k, =, 0, ;, k, <, sequence, ., length, ;, ++, k, ), {, fk, []
[int, k, =, 0, ;, k, <, sequence, ., length, ;, ++, k, ), {, fk, [, k, ], =]
[0, ;, k, <, sequence, ., length, ;, ++, k, ), {, fk, [, k, ], =, new, double, []
[0, ;, k, <, sequence, ., length, ;, ++, k, ), {, fk, [, k, ], =, new, double, []
[0, ;, k, <, sequence, ., length, ;, ++, k, ), {, fk, [, k, ], =, new, double, []
[k, <, sequence, ., length, ;, ++, k, ), {, fk, [, k, ], =, new, double, [, sequence, []
[., length, ;, ++, k, ), {, fk, [, k, ], =, new, double, [, sequence, [, k, ], +]
[), {, fk, [, k, ], =, new, double, [, sequence, [, k, ], +, 1, ], [, ], ;]
[), {, fk, [, k, ], =, new, double, [, sequence, [, k, ], +, 1, ], [, ], ;]
[), {, fk, [, k, ], =, new, double, [, sequence, [, k, ], +, 1, ], [, ], ;]
[fk, [, k, ], =, new, double, [, sequence, [, k, ], +, 1, ], [, ], ;, fk, []
[], =, new, double, [, sequence, [, k, ], +, 1, ], [, ], ;, fk, [, k, ], []
[double, [, sequence, [, k, ], +, 1, ], [, ], ;, fk, [, k, ], [, 0, ], =]
[1, ], [, ], ;, fk, [, k, ], [, 0, ], =, yDot0, ;, for, (, int, l, =]
[[, ], ;, fk, [, k, ], [, 0, ], =, yDot0, ;, for, (, int, l, =, 0, ;]
[[, ], ;, fk, [, k, ], [, 0, ], =, yDot0, ;, for, (, int, l, =, 0, ;]
[;, fk, [, k, ], [, 0, ], =, yDot0, ;, for, (, int, l, =, 0, ;, l, <]
[;, fk, [, k, ], [, 0, ], =, yDot0, ;, for, (, int, l, =, 0, ;, l, <]
[[, k, ], [, 0, ], =, yDot0, ;, for, (, int, l, =, 0, ;, l, <, sequence, []
[[, 0, ], =, yDot0, ;, for, (, int, l, =, 0, ;, l, <, sequence, [, k, ], ;]
[0, ], =, yDot0, ;, for, (, int, l, =, 0, ;, l, <, sequence, [, k, ], ;, ++]
[yDot0, ;, for, (, int, l, =, 0, ;, l, <, sequence, [, k, ], ;, ++, l, ), {]
[yDot0, ;, for, (, int, l, =, 0, ;, l, <, sequence, [, k, ], ;, ++, l, ), {]
[yDot0, ;, for, (, int, l, =, 0, ;, l, <, sequence, [, k, ], ;, ++, l, ), {]
[for, (, int, l, =, 0, ;, l, <, sequence, [, k, ], ;, ++, l, ), {, fk, []
[l, =, 0, ;, l, <, sequence, [, k, ], ;, ++, l, ), {, fk, [, k, ], []
[l, =, 0, ;, l, <, sequence, [, k, ], ;, ++, l, ), {, fk, [, k, ], []
[0, ;, l, <, sequence, [, k, ], ;, ++, l, ), {, fk, [, k, ], [, l, +]
[<, sequence, [, k, ], ;, ++, l, ), {, fk, [, k, ], [, l, +, 1, ], =]
[k, ], ;, ++, l, ), {, fk, [, k, ], [, l, +, 1, ], =, new, double, []
[k, ], ;, ++, l, ), {, fk, [, k, ], [, l, +, 1, ], =, new, double, []
[k, ], [, l, +, 1, ], =, new, double, [, y0, ., length, ], ;, }, }, if, (]
[k, ], [, l, +, 1, ], =, new, double, [, y0, ., length, ], ;, }, }, if, (]
[[, l, +, 1, ], =, new, double, [, y0, ., length, ], ;, }, }, if, (, y, !=]
[1, ], =, new, double, [, y0, ., length, ], ;, }, }, if, (, y, !=, y0, ), {]
[1, ], =, new, double, [, y0, ., length, ], ;, }, }, if, (, y, !=, y0, ), {]
[double, [, y0, ., length, ], ;, }, }, if, (, y, !=, y0, ), {, System, ., arraycopy, (]
[y0, ., length, ], ;, }, }, if, (, y, !=, y0, ), {, System, ., arraycopy, (, y0, ,]
[length, ], ;, }, }, if, (, y, !=, y0, ), {, System, ., arraycopy, (, y0, ,, 0, ,]
[;, }, }, if, (, y, !=, y0, ), {, System, ., arraycopy, (, y0, ,, 0, ,, y, ,]
[}, if, (, y, !=, y0, ), {, System, ., arraycopy, (, y0, ,, 0, ,, y, ,, 0, ,]
[}, if, (, y, !=, y0, ), {, System, ., arraycopy, (, y0, ,, 0, ,, y, ,, 0, ,]
[y0, ,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, }, final, double, [, ], yDot1, =]
[,, y, ,, 0, ,, y0, ., length, ), ;, }, final, double, [, ], yDot1, =, new, double, []
[,, y, ,, 0, ,, y0, ., length, ), ;, }, final, double, [, ], yDot1, =, new, double, []
[[, ], yDot1, =, new, double, [, y0, ., length, ], ;, final, double, [, ], [, ], yMidDots, =]
[=, new, double, [, y0, ., length, ], ;, final, double, [, ], [, ], yMidDots, =, new, double, []
[=, new, double, [, y0, ., length, ], ;, final, double, [, ], [, ], yMidDots, =, new, double, []
[double, [, y0, ., length, ], ;, final, double, [, ], [, ], yMidDots, =, new, double, [, 1, +]
[double, [, y0, ., length, ], ;, final, double, [, ], [, ], yMidDots, =, new, double, [, 1, +]
[y0, ., length, ], ;, final, double, [, ], [, ], yMidDots, =, new, double, [, 1, +, 2, *]
[y0, ., length, ], ;, final, double, [, ], [, ], yMidDots, =, new, double, [, 1, +, 2, *]
[final, double, [, ], [, ], yMidDots, =, new, double, [, 1, +, 2, *, sequence, ., length, ], []
[final, double, [, ], [, ], yMidDots, =, new, double, [, 1, +, 2, *, sequence, ., length, ], []
[1, +, 2, *, sequence, ., length, ], [, y0, ., length, ], ;, final, double, [, ], scale, =]
[*, sequence, ., length, ], [, y0, ., length, ], ;, final, double, [, ], scale, =, new, double, []
[length, ], [, y0, ., length, ], ;, final, double, [, ], scale, =, new, double, [, mainSetDimension, ], ;]
[[, y0, ., length, ], ;, final, double, [, ], scale, =, new, double, [, mainSetDimension, ], ;, rescale, (]
[., length, ], ;, final, double, [, ], scale, =, new, double, [, mainSetDimension, ], ;, rescale, (, y, ,]
[], ;, final, double, [, ], scale, =, new, double, [, mainSetDimension, ], ;, rescale, (, y, ,, y, ,]
[=, new, double, [, mainSetDimension, ], ;, rescale, (, y, ,, y, ,, scale, ), ;, final, double, tol, =]
[=, new, double, [, mainSetDimension, ], ;, rescale, (, y, ,, y, ,, scale, ), ;, final, double, tol, =]
[new, double, [, mainSetDimension, ], ;, rescale, (, y, ,, y, ,, scale, ), ;, final, double, tol, =, (]
[new, double, [, mainSetDimension, ], ;, rescale, (, y, ,, y, ,, scale, ), ;, final, double, tol, =, (]
[[, mainSetDimension, ], ;, rescale, (, y, ,, y, ,, scale, ), ;, final, double, tol, =, (, vecRelativeTolerance, ==]
[;, rescale, (, y, ,, y, ,, scale, ), ;, final, double, tol, =, (, vecRelativeTolerance, ==, null, ), ?]
[(, y, ,, y, ,, scale, ), ;, final, double, tol, =, (, vecRelativeTolerance, ==, null, ), ?, scalRelativeTolerance, :]
[(, y, ,, y, ,, scale, ), ;, final, double, tol, =, (, vecRelativeTolerance, ==, null, ), ?, scalRelativeTolerance, :]
[,, y, ,, scale, ), ;, final, double, tol, =, (, vecRelativeTolerance, ==, null, ), ?, scalRelativeTolerance, :, vecRelativeTolerance, []
[double, tol, =, (, vecRelativeTolerance, ==, null, ), ?, scalRelativeTolerance, :, vecRelativeTolerance, [, 0, ], ;, final, double, log10R, =]
[double, tol, =, (, vecRelativeTolerance, ==, null, ), ?, scalRelativeTolerance, :, vecRelativeTolerance, [, 0, ], ;, final, double, log10R, =]
[vecRelativeTolerance, ==, null, ), ?, scalRelativeTolerance, :, vecRelativeTolerance, [, 0, ], ;, final, double, log10R, =, FastMath, ., log10, (]
[vecRelativeTolerance, ==, null, ), ?, scalRelativeTolerance, :, vecRelativeTolerance, [, 0, ], ;, final, double, log10R, =, FastMath, ., log10, (]
[?, scalRelativeTolerance, :, vecRelativeTolerance, [, 0, ], ;, final, double, log10R, =, FastMath, ., log10, (, FastMath, ., max, (]
[:, vecRelativeTolerance, [, 0, ], ;, final, double, log10R, =, FastMath, ., log10, (, FastMath, ., max, (, 1.0e-10, ,]
[double, log10R, =, FastMath, ., log10, (, FastMath, ., max, (, 1.0e-10, ,, tol, ), ), ;, int, targetIter, =]
[double, log10R, =, FastMath, ., log10, (, FastMath, ., max, (, 1.0e-10, ,, tol, ), ), ;, int, targetIter, =]
[., log10, (, FastMath, ., max, (, 1.0e-10, ,, tol, ), ), ;, int, targetIter, =, FastMath, ., max, (]
[(, FastMath, ., max, (, 1.0e-10, ,, tol, ), ), ;, int, targetIter, =, FastMath, ., max, (, 1, ,]
[(, FastMath, ., max, (, 1.0e-10, ,, tol, ), ), ;, int, targetIter, =, FastMath, ., max, (, 1, ,]
[(, 1.0e-10, ,, tol, ), ), ;, int, targetIter, =, FastMath, ., max, (, 1, ,, FastMath, ., min, (]
[(, 1.0e-10, ,, tol, ), ), ;, int, targetIter, =, FastMath, ., max, (, 1, ,, FastMath, ., min, (]
[(, 1.0e-10, ,, tol, ), ), ;, int, targetIter, =, FastMath, ., max, (, 1, ,, FastMath, ., min, (]
[), ), ;, int, targetIter, =, FastMath, ., max, (, 1, ,, FastMath, ., min, (, sequence, ., length, -]
[;, int, targetIter, =, FastMath, ., max, (, 1, ,, FastMath, ., min, (, sequence, ., length, -, 2, ,]
[=, FastMath, ., max, (, 1, ,, FastMath, ., min, (, sequence, ., length, -, 2, ,, (, int, )]
[=, FastMath, ., max, (, 1, ,, FastMath, ., min, (, sequence, ., length, -, 2, ,, (, int, )]
[(, 1, ,, FastMath, ., min, (, sequence, ., length, -, 2, ,, (, int, ), FastMath, ., floor, (]
[(, 1, ,, FastMath, ., min, (, sequence, ., length, -, 2, ,, (, int, ), FastMath, ., floor, (]
[,, FastMath, ., min, (, sequence, ., length, -, 2, ,, (, int, ), FastMath, ., floor, (, 0.5, -]
[,, FastMath, ., min, (, sequence, ., length, -, 2, ,, (, int, ), FastMath, ., floor, (, 0.5, -]
[., min, (, sequence, ., length, -, 2, ,, (, int, ), FastMath, ., floor, (, 0.5, -, 0.6, *]
[(, int, ), FastMath, ., floor, (, 0.5, -, 0.6, *, log10R, ), ), ), ;, final, AbstractStepInterpolator, interpolator, =]
[FastMath, ., floor, (, 0.5, -, 0.6, *, log10R, ), ), ), ;, final, AbstractStepInterpolator, interpolator, =, new, GraggBulirschStoerStepInterpolator, (]
[floor, (, 0.5, -, 0.6, *, log10R, ), ), ), ;, final, AbstractStepInterpolator, interpolator, =, new, GraggBulirschStoerStepInterpolator, (, y, ,]
[0.5, -, 0.6, *, log10R, ), ), ), ;, final, AbstractStepInterpolator, interpolator, =, new, GraggBulirschStoerStepInterpolator, (, y, ,, yDot0, ,]
[0.6, *, log10R, ), ), ), ;, final, AbstractStepInterpolator, interpolator, =, new, GraggBulirschStoerStepInterpolator, (, y, ,, yDot0, ,, y1, ,]
[log10R, ), ), ), ;, final, AbstractStepInterpolator, interpolator, =, new, GraggBulirschStoerStepInterpolator, (, y, ,, yDot0, ,, y1, ,, yDot1, ,]
[), ), ;, final, AbstractStepInterpolator, interpolator, =, new, GraggBulirschStoerStepInterpolator, (, y, ,, yDot0, ,, y1, ,, yDot1, ,, yMidDots, ,]
[;, final, AbstractStepInterpolator, interpolator, =, new, GraggBulirschStoerStepInterpolator, (, y, ,, yDot0, ,, y1, ,, yDot1, ,, yMidDots, ,, forward, ,]
[;, final, AbstractStepInterpolator, interpolator, =, new, GraggBulirschStoerStepInterpolator, (, y, ,, yDot0, ,, y1, ,, yDot1, ,, yMidDots, ,, forward, ,]
[GraggBulirschStoerStepInterpolator, (, y, ,, yDot0, ,, y1, ,, yDot1, ,, yMidDots, ,, forward, ,, equations, ., getPrimaryMapper, (, ), ,]
[GraggBulirschStoerStepInterpolator, (, y, ,, yDot0, ,, y1, ,, yDot1, ,, yMidDots, ,, forward, ,, equations, ., getPrimaryMapper, (, ), ,]
[,, yDot1, ,, yMidDots, ,, forward, ,, equations, ., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers, (, ), ), ;]
[,, yDot1, ,, yMidDots, ,, forward, ,, equations, ., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers, (, ), ), ;]
[,, forward, ,, equations, ., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers, (, ), ), ;, interpolator, ., storeTime, (]
[,, forward, ,, equations, ., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers, (, ), ), ;, interpolator, ., storeTime, (]
[), ,, equations, ., getSecondaryMappers, (, ), ), ;, interpolator, ., storeTime, (, equations, ., getTime, (, ), ), ;]
[equations, ., getSecondaryMappers, (, ), ), ;, interpolator, ., storeTime, (, equations, ., getTime, (, ), ), ;, stepStart, =]
[equations, ., getSecondaryMappers, (, ), ), ;, interpolator, ., storeTime, (, equations, ., getTime, (, ), ), ;, stepStart, =]
[storeTime, (, equations, ., getTime, (, ), ), ;, stepStart, =, equations, ., getTime, (, ), ;, double, hNew, =]
[(, ), ), ;, stepStart, =, equations, ., getTime, (, ), ;, double, hNew, =, 0, ;, double, maxError, =]
[(, ), ), ;, stepStart, =, equations, ., getTime, (, ), ;, double, hNew, =, 0, ;, double, maxError, =]
[., getTime, (, ), ;, double, hNew, =, 0, ;, double, maxError, =, Double, ., MAX_VALUE, ;, boolean, previousRejected, =]
[double, hNew, =, 0, ;, double, maxError, =, Double, ., MAX_VALUE, ;, boolean, previousRejected, =, false, ;, boolean, firstTime, =]
[double, maxError, =, Double, ., MAX_VALUE, ;, boolean, previousRejected, =, false, ;, boolean, firstTime, =, true, ;, boolean, newStep, =]
[MAX_VALUE, ;, boolean, previousRejected, =, false, ;, boolean, firstTime, =, true, ;, boolean, newStep, =, true, ;, boolean, firstStepAlreadyComputed, =]
[boolean, previousRejected, =, false, ;, boolean, firstTime, =, true, ;, boolean, newStep, =, true, ;, boolean, firstStepAlreadyComputed, =, false, ;]
[=, false, ;, boolean, firstTime, =, true, ;, boolean, newStep, =, true, ;, boolean, firstStepAlreadyComputed, =, false, ;, initIntegration, (]
[=, false, ;, boolean, firstTime, =, true, ;, boolean, newStep, =, true, ;, boolean, firstStepAlreadyComputed, =, false, ;, initIntegration, (]
[true, ;, boolean, newStep, =, true, ;, boolean, firstStepAlreadyComputed, =, false, ;, initIntegration, (, equations, ., getTime, (, ), ,]
[boolean, newStep, =, true, ;, boolean, firstStepAlreadyComputed, =, false, ;, initIntegration, (, equations, ., getTime, (, ), ,, y0, ,]
[true, ;, boolean, firstStepAlreadyComputed, =, false, ;, initIntegration, (, equations, ., getTime, (, ), ,, y0, ,, t, ), ;]
[true, ;, boolean, firstStepAlreadyComputed, =, false, ;, initIntegration, (, equations, ., getTime, (, ), ,, y0, ,, t, ), ;]
[boolean, firstStepAlreadyComputed, =, false, ;, initIntegration, (, equations, ., getTime, (, ), ,, y0, ,, t, ), ;, costPerTimeUnit, []
[false, ;, initIntegration, (, equations, ., getTime, (, ), ,, y0, ,, t, ), ;, costPerTimeUnit, [, 0, ], =]
[initIntegration, (, equations, ., getTime, (, ), ,, y0, ,, t, ), ;, costPerTimeUnit, [, 0, ], =, 0, ;]
[equations, ., getTime, (, ), ,, y0, ,, t, ), ;, costPerTimeUnit, [, 0, ], =, 0, ;, isLastStep, =]
[;, costPerTimeUnit, [, 0, ], =, 0, ;, isLastStep, =, false, ;, do, {, double, error, ;, boolean, reject, =]
[], =, 0, ;, isLastStep, =, false, ;, do, {, double, error, ;, boolean, reject, =, false, ;, if, (]
[;, isLastStep, =, false, ;, do, {, double, error, ;, boolean, reject, =, false, ;, if, (, newStep, ), {]
[;, isLastStep, =, false, ;, do, {, double, error, ;, boolean, reject, =, false, ;, if, (, newStep, ), {]
[error, ;, boolean, reject, =, false, ;, if, (, newStep, ), {, interpolator, ., shift, (, ), ;, if, (]
[;, boolean, reject, =, false, ;, if, (, newStep, ), {, interpolator, ., shift, (, ), ;, if, (, !]
[=, false, ;, if, (, newStep, ), {, interpolator, ., shift, (, ), ;, if, (, !, firstStepAlreadyComputed, ), {]
[;, if, (, newStep, ), {, interpolator, ., shift, (, ), ;, if, (, !, firstStepAlreadyComputed, ), {, computeDerivatives, (]
[(, newStep, ), {, interpolator, ., shift, (, ), ;, if, (, !, firstStepAlreadyComputed, ), {, computeDerivatives, (, stepStart, ,]
[), {, interpolator, ., shift, (, ), ;, if, (, !, firstStepAlreadyComputed, ), {, computeDerivatives, (, stepStart, ,, y, ,]
[), ;, if, (, !, firstStepAlreadyComputed, ), {, computeDerivatives, (, stepStart, ,, y, ,, yDot0, ), ;, }, if, (]
[(, !, firstStepAlreadyComputed, ), {, computeDerivatives, (, stepStart, ,, y, ,, yDot0, ), ;, }, if, (, firstTime, ), {]
[firstStepAlreadyComputed, ), {, computeDerivatives, (, stepStart, ,, y, ,, yDot0, ), ;, }, if, (, firstTime, ), {, hNew, =]
[{, computeDerivatives, (, stepStart, ,, y, ,, yDot0, ), ;, }, if, (, firstTime, ), {, hNew, =, initializeStep, (]
[(, stepStart, ,, y, ,, yDot0, ), ;, }, if, (, firstTime, ), {, hNew, =, initializeStep, (, forward, ,]
[(, stepStart, ,, y, ,, yDot0, ), ;, }, if, (, firstTime, ), {, hNew, =, initializeStep, (, forward, ,]
[(, stepStart, ,, y, ,, yDot0, ), ;, }, if, (, firstTime, ), {, hNew, =, initializeStep, (, forward, ,]
[,, y, ,, yDot0, ), ;, }, if, (, firstTime, ), {, hNew, =, initializeStep, (, forward, ,, 2, *]
[,, yDot0, ), ;, }, if, (, firstTime, ), {, hNew, =, initializeStep, (, forward, ,, 2, *, targetIter, +]
[), ;, }, if, (, firstTime, ), {, hNew, =, initializeStep, (, forward, ,, 2, *, targetIter, +, 1, ,]
[}, if, (, firstTime, ), {, hNew, =, initializeStep, (, forward, ,, 2, *, targetIter, +, 1, ,, scale, ,]
[(, firstTime, ), {, hNew, =, initializeStep, (, forward, ,, 2, *, targetIter, +, 1, ,, scale, ,, stepStart, ,]
[), {, hNew, =, initializeStep, (, forward, ,, 2, *, targetIter, +, 1, ,, scale, ,, stepStart, ,, y, ,]
[hNew, =, initializeStep, (, forward, ,, 2, *, targetIter, +, 1, ,, scale, ,, stepStart, ,, y, ,, yDot0, ,]
[initializeStep, (, forward, ,, 2, *, targetIter, +, 1, ,, scale, ,, stepStart, ,, y, ,, yDot0, ,, yTmp, ,]
[2, *, targetIter, +, 1, ,, scale, ,, stepStart, ,, y, ,, yDot0, ,, yTmp, ,, yTmpDot, ), ;, }]
[targetIter, +, 1, ,, scale, ,, stepStart, ,, y, ,, yDot0, ,, yTmp, ,, yTmpDot, ), ;, }, newStep, =]
[,, scale, ,, stepStart, ,, y, ,, yDot0, ,, yTmp, ,, yTmpDot, ), ;, }, newStep, =, false, ;, }]
[,, stepStart, ,, y, ,, yDot0, ,, yTmp, ,, yTmpDot, ), ;, }, newStep, =, false, ;, }, stepSize, =]
[,, yDot0, ,, yTmp, ,, yTmpDot, ), ;, }, newStep, =, false, ;, }, stepSize, =, hNew, ;, if, (]
[,, yDot0, ,, yTmp, ,, yTmpDot, ), ;, }, newStep, =, false, ;, }, stepSize, =, hNew, ;, if, (]
[yDot0, ,, yTmp, ,, yTmpDot, ), ;, }, newStep, =, false, ;, }, stepSize, =, hNew, ;, if, (, (]
[yDot0, ,, yTmp, ,, yTmpDot, ), ;, }, newStep, =, false, ;, }, stepSize, =, hNew, ;, if, (, (]
[yTmp, ,, yTmpDot, ), ;, }, newStep, =, false, ;, }, stepSize, =, hNew, ;, if, (, (, forward, &&]
[,, yTmpDot, ), ;, }, newStep, =, false, ;, }, stepSize, =, hNew, ;, if, (, (, forward, &&, (]
[,, yTmpDot, ), ;, }, newStep, =, false, ;, }, stepSize, =, hNew, ;, if, (, (, forward, &&, (]
[,, yTmpDot, ), ;, }, newStep, =, false, ;, }, stepSize, =, hNew, ;, if, (, (, forward, &&, (]
[), ;, }, newStep, =, false, ;, }, stepSize, =, hNew, ;, if, (, (, forward, &&, (, stepStart, +]
[}, newStep, =, false, ;, }, stepSize, =, hNew, ;, if, (, (, forward, &&, (, stepStart, +, stepSize, >]
[;, }, stepSize, =, hNew, ;, if, (, (, forward, &&, (, stepStart, +, stepSize, >, t, ), ), ||]
[}, stepSize, =, hNew, ;, if, (, (, forward, &&, (, stepStart, +, stepSize, >, t, ), ), ||, (]
[}, stepSize, =, hNew, ;, if, (, (, forward, &&, (, stepStart, +, stepSize, >, t, ), ), ||, (]
[stepSize, =, hNew, ;, if, (, (, forward, &&, (, stepStart, +, stepSize, >, t, ), ), ||, (, (]
[=, hNew, ;, if, (, (, forward, &&, (, stepStart, +, stepSize, >, t, ), ), ||, (, (, !]
[if, (, (, forward, &&, (, stepStart, +, stepSize, >, t, ), ), ||, (, (, !, forward, ), &&]
[(, (, forward, &&, (, stepStart, +, stepSize, >, t, ), ), ||, (, (, !, forward, ), &&, (]
[(, (, forward, &&, (, stepStart, +, stepSize, >, t, ), ), ||, (, (, !, forward, ), &&, (]
[(, (, forward, &&, (, stepStart, +, stepSize, >, t, ), ), ||, (, (, !, forward, ), &&, (]
[forward, &&, (, stepStart, +, stepSize, >, t, ), ), ||, (, (, !, forward, ), &&, (, stepStart, +]
[(, stepStart, +, stepSize, >, t, ), ), ||, (, (, !, forward, ), &&, (, stepStart, +, stepSize, <]
[t, ), ), ||, (, (, !, forward, ), &&, (, stepStart, +, stepSize, <, t, ), ), ), {]
[), ||, (, (, !, forward, ), &&, (, stepStart, +, stepSize, <, t, ), ), ), {, stepSize, =]
[), ||, (, (, !, forward, ), &&, (, stepStart, +, stepSize, <, t, ), ), ), {, stepSize, =]
[(, (, !, forward, ), &&, (, stepStart, +, stepSize, <, t, ), ), ), {, stepSize, =, t, -]
[stepStart, +, stepSize, <, t, ), ), ), {, stepSize, =, t, -, stepStart, ;, }, final, double, nextT, =]
[stepStart, +, stepSize, <, t, ), ), ), {, stepSize, =, t, -, stepStart, ;, }, final, double, nextT, =]
[stepSize, <, t, ), ), ), {, stepSize, =, t, -, stepStart, ;, }, final, double, nextT, =, stepStart, +]
[t, ), ), ), {, stepSize, =, t, -, stepStart, ;, }, final, double, nextT, =, stepStart, +, stepSize, ;]
[), ), {, stepSize, =, t, -, stepStart, ;, }, final, double, nextT, =, stepStart, +, stepSize, ;, isLastStep, =]
[), ), {, stepSize, =, t, -, stepStart, ;, }, final, double, nextT, =, stepStart, +, stepSize, ;, isLastStep, =]
[{, stepSize, =, t, -, stepStart, ;, }, final, double, nextT, =, stepStart, +, stepSize, ;, isLastStep, =, forward, ?]
[stepSize, =, t, -, stepStart, ;, }, final, double, nextT, =, stepStart, +, stepSize, ;, isLastStep, =, forward, ?, (]
[stepSize, =, t, -, stepStart, ;, }, final, double, nextT, =, stepStart, +, stepSize, ;, isLastStep, =, forward, ?, (]
[t, -, stepStart, ;, }, final, double, nextT, =, stepStart, +, stepSize, ;, isLastStep, =, forward, ?, (, nextT, >=]
[;, }, final, double, nextT, =, stepStart, +, stepSize, ;, isLastStep, =, forward, ?, (, nextT, >=, t, ), :]
[}, final, double, nextT, =, stepStart, +, stepSize, ;, isLastStep, =, forward, ?, (, nextT, >=, t, ), :, (]
[}, final, double, nextT, =, stepStart, +, stepSize, ;, isLastStep, =, forward, ?, (, nextT, >=, t, ), :, (]
[double, nextT, =, stepStart, +, stepSize, ;, isLastStep, =, forward, ?, (, nextT, >=, t, ), :, (, nextT, <=]
[;, isLastStep, =, forward, ?, (, nextT, >=, t, ), :, (, nextT, <=, t, ), ;, int, k, =]
[isLastStep, =, forward, ?, (, nextT, >=, t, ), :, (, nextT, <=, t, ), ;, int, k, =, -]
[t, ), :, (, nextT, <=, t, ), ;, int, k, =, -, 1, ;, for, (, boolean, loop, =]
[:, (, nextT, <=, t, ), ;, int, k, =, -, 1, ;, for, (, boolean, loop, =, true, ;]
[t, ), ;, int, k, =, -, 1, ;, for, (, boolean, loop, =, true, ;, loop, ;, ), {]
[), ;, int, k, =, -, 1, ;, for, (, boolean, loop, =, true, ;, loop, ;, ), {, ++]
[=, -, 1, ;, for, (, boolean, loop, =, true, ;, loop, ;, ), {, ++, k, ;, if, (]
[-, 1, ;, for, (, boolean, loop, =, true, ;, loop, ;, ), {, ++, k, ;, if, (, !]
[;, for, (, boolean, loop, =, true, ;, loop, ;, ), {, ++, k, ;, if, (, !, tryStep, (]
[(, boolean, loop, =, true, ;, loop, ;, ), {, ++, k, ;, if, (, !, tryStep, (, stepStart, ,]
[loop, =, true, ;, loop, ;, ), {, ++, k, ;, if, (, !, tryStep, (, stepStart, ,, y, ,]
[true, ;, loop, ;, ), {, ++, k, ;, if, (, !, tryStep, (, stepStart, ,, y, ,, stepSize, ,]
[loop, ;, ), {, ++, k, ;, if, (, !, tryStep, (, stepStart, ,, y, ,, stepSize, ,, k, ,]
[), {, ++, k, ;, if, (, !, tryStep, (, stepStart, ,, y, ,, stepSize, ,, k, ,, scale, ,]
[), {, ++, k, ;, if, (, !, tryStep, (, stepStart, ,, y, ,, stepSize, ,, k, ,, scale, ,]
[++, k, ;, if, (, !, tryStep, (, stepStart, ,, y, ,, stepSize, ,, k, ,, scale, ,, fk, []
[if, (, !, tryStep, (, stepStart, ,, y, ,, stepSize, ,, k, ,, scale, ,, fk, [, k, ], ,]
[if, (, !, tryStep, (, stepStart, ,, y, ,, stepSize, ,, k, ,, scale, ,, fk, [, k, ], ,]
[(, !, tryStep, (, stepStart, ,, y, ,, stepSize, ,, k, ,, scale, ,, fk, [, k, ], ,, (]
[(, !, tryStep, (, stepStart, ,, y, ,, stepSize, ,, k, ,, scale, ,, fk, [, k, ], ,, (]
[tryStep, (, stepStart, ,, y, ,, stepSize, ,, k, ,, scale, ,, fk, [, k, ], ,, (, k, ==]
[,, y, ,, stepSize, ,, k, ,, scale, ,, fk, [, k, ], ,, (, k, ==, 0, ), ?]
[,, y, ,, stepSize, ,, k, ,, scale, ,, fk, [, k, ], ,, (, k, ==, 0, ), ?]
[,, stepSize, ,, k, ,, scale, ,, fk, [, k, ], ,, (, k, ==, 0, ), ?, yMidDots, []
[k, ,, scale, ,, fk, [, k, ], ,, (, k, ==, 0, ), ?, yMidDots, [, 0, ], :]
[k, ,, scale, ,, fk, [, k, ], ,, (, k, ==, 0, ), ?, yMidDots, [, 0, ], :]
[scale, ,, fk, [, k, ], ,, (, k, ==, 0, ), ?, yMidDots, [, 0, ], :, diagonal, []
[scale, ,, fk, [, k, ], ,, (, k, ==, 0, ), ?, yMidDots, [, 0, ], :, diagonal, []
[fk, [, k, ], ,, (, k, ==, 0, ), ?, yMidDots, [, 0, ], :, diagonal, [, k, -]
[], ,, (, k, ==, 0, ), ?, yMidDots, [, 0, ], :, diagonal, [, k, -, 1, ], ,]
[], ,, (, k, ==, 0, ), ?, yMidDots, [, 0, ], :, diagonal, [, k, -, 1, ], ,]
[,, (, k, ==, 0, ), ?, yMidDots, [, 0, ], :, diagonal, [, k, -, 1, ], ,, (]
[,, (, k, ==, 0, ), ?, yMidDots, [, 0, ], :, diagonal, [, k, -, 1, ], ,, (]
[k, ==, 0, ), ?, yMidDots, [, 0, ], :, diagonal, [, k, -, 1, ], ,, (, k, ==]
[), ?, yMidDots, [, 0, ], :, diagonal, [, k, -, 1, ], ,, (, k, ==, 0, ), ?]
[yMidDots, [, 0, ], :, diagonal, [, k, -, 1, ], ,, (, k, ==, 0, ), ?, y1, :]
[yMidDots, [, 0, ], :, diagonal, [, k, -, 1, ], ,, (, k, ==, 0, ), ?, y1, :]
[0, ], :, diagonal, [, k, -, 1, ], ,, (, k, ==, 0, ), ?, y1, :, y1Diag, []
[0, ], :, diagonal, [, k, -, 1, ], ,, (, k, ==, 0, ), ?, y1, :, y1Diag, []
[:, diagonal, [, k, -, 1, ], ,, (, k, ==, 0, ), ?, y1, :, y1Diag, [, k, -]
[k, -, 1, ], ,, (, k, ==, 0, ), ?, y1, :, y1Diag, [, k, -, 1, ], ,]
[,, (, k, ==, 0, ), ?, y1, :, y1Diag, [, k, -, 1, ], ,, yTmp, ), ), {]
[k, ==, 0, ), ?, y1, :, y1Diag, [, k, -, 1, ], ,, yTmp, ), ), {, hNew, =]
[k, ==, 0, ), ?, y1, :, y1Diag, [, k, -, 1, ], ,, yTmp, ), ), {, hNew, =]
[?, y1, :, y1Diag, [, k, -, 1, ], ,, yTmp, ), ), {, hNew, =, FastMath, ., abs, (]
[:, y1Diag, [, k, -, 1, ], ,, yTmp, ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (]
[:, y1Diag, [, k, -, 1, ], ,, yTmp, ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (]
[[, k, -, 1, ], ,, yTmp, ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *]
[-, 1, ], ,, yTmp, ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,]
[], ,, yTmp, ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,]
[), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, ), ), ;]
[hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, ), ), ;, reject, =]
[FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, ), ), ;, reject, =, true, ;]
[abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, ), ), ;, reject, =, true, ;, loop, =]
[,, forward, ,, false, ), ), ;, reject, =, true, ;, loop, =, false, ;, }, else, {, if, (]
[,, forward, ,, false, ), ), ;, reject, =, true, ;, loop, =, false, ;, }, else, {, if, (]
[,, false, ), ), ;, reject, =, true, ;, loop, =, false, ;, }, else, {, if, (, k, >]
[), ;, reject, =, true, ;, loop, =, false, ;, }, else, {, if, (, k, >, 0, ), {]
[reject, =, true, ;, loop, =, false, ;, }, else, {, if, (, k, >, 0, ), {, extrapolate, (]
[true, ;, loop, =, false, ;, }, else, {, if, (, k, >, 0, ), {, extrapolate, (, 0, ,]
[loop, =, false, ;, }, else, {, if, (, k, >, 0, ), {, extrapolate, (, 0, ,, k, ,]
[false, ;, }, else, {, if, (, k, >, 0, ), {, extrapolate, (, 0, ,, k, ,, y1Diag, ,]
[else, {, if, (, k, >, 0, ), {, extrapolate, (, 0, ,, k, ,, y1Diag, ,, y1, ), ;]
[if, (, k, >, 0, ), {, extrapolate, (, 0, ,, k, ,, y1Diag, ,, y1, ), ;, rescale, (]
[k, >, 0, ), {, extrapolate, (, 0, ,, k, ,, y1Diag, ,, y1, ), ;, rescale, (, y, ,]
[0, ), {, extrapolate, (, 0, ,, k, ,, y1Diag, ,, y1, ), ;, rescale, (, y, ,, y1, ,]
[extrapolate, (, 0, ,, k, ,, y1Diag, ,, y1, ), ;, rescale, (, y, ,, y1, ,, scale, ), ;]
[0, ,, k, ,, y1Diag, ,, y1, ), ;, rescale, (, y, ,, y1, ,, scale, ), ;, error, =]
[), ;, rescale, (, y, ,, y1, ,, scale, ), ;, error, =, 0, ;, for, (, int, j, =]
[rescale, (, y, ,, y1, ,, scale, ), ;, error, =, 0, ;, for, (, int, j, =, 0, ;]
[rescale, (, y, ,, y1, ,, scale, ), ;, error, =, 0, ;, for, (, int, j, =, 0, ;]
[y, ,, y1, ,, scale, ), ;, error, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[y1, ,, scale, ), ;, error, =, 0, ;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;]
[,, scale, ), ;, error, =, 0, ;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++]
[;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, final, double, e, =]
[;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, final, double, e, =]
[;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, final, double, e, =]
[j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, final, double, e, =, FastMath, ., abs, (]
[j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, final, double, e, =, FastMath, ., abs, (]
[j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, final, double, e, =, FastMath, ., abs, (]
[0, ;, j, <, mainSetDimension, ;, ++, j, ), {, final, double, e, =, FastMath, ., abs, (, y1, []
[<, mainSetDimension, ;, ++, j, ), {, final, double, e, =, FastMath, ., abs, (, y1, [, j, ], -]
[<, mainSetDimension, ;, ++, j, ), {, final, double, e, =, FastMath, ., abs, (, y1, [, j, ], -]
[<, mainSetDimension, ;, ++, j, ), {, final, double, e, =, FastMath, ., abs, (, y1, [, j, ], -]
[;, ++, j, ), {, final, double, e, =, FastMath, ., abs, (, y1, [, j, ], -, y1Diag, []
[), {, final, double, e, =, FastMath, ., abs, (, y1, [, j, ], -, y1Diag, [, 0, ], []
[e, =, FastMath, ., abs, (, y1, [, j, ], -, y1Diag, [, 0, ], [, j, ], ), /]
[e, =, FastMath, ., abs, (, y1, [, j, ], -, y1Diag, [, 0, ], [, j, ], ), /]
[FastMath, ., abs, (, y1, [, j, ], -, y1Diag, [, 0, ], [, j, ], ), /, scale, []
[(, y1, [, j, ], -, y1Diag, [, 0, ], [, j, ], ), /, scale, [, j, ], ;]
[[, j, ], -, y1Diag, [, 0, ], [, j, ], ), /, scale, [, j, ], ;, error, +=]
[[, j, ], -, y1Diag, [, 0, ], [, j, ], ), /, scale, [, j, ], ;, error, +=]
[], -, y1Diag, [, 0, ], [, j, ], ), /, scale, [, j, ], ;, error, +=, e, *]
[[, 0, ], [, j, ], ), /, scale, [, j, ], ;, error, +=, e, *, e, ;, }]
[], [, j, ], ), /, scale, [, j, ], ;, error, +=, e, *, e, ;, }, error, =]
[], [, j, ], ), /, scale, [, j, ], ;, error, +=, e, *, e, ;, }, error, =]
[), /, scale, [, j, ], ;, error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (]
[), /, scale, [, j, ], ;, error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (]
[scale, [, j, ], ;, error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error, /]
[error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, if, (]
[error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, if, (]
[+=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, if, (, (]
[+=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, if, (, (]
[*, e, ;, }, error, =, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, if, (, (, error, >]
[}, error, =, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, if, (, (, error, >, 1.0e15, ), ||]
[error, =, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, if, (, (, error, >, 1.0e15, ), ||, (]
[error, =, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, if, (, (, error, >, 1.0e15, ), ||, (]
[=, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, if, (, (, error, >, 1.0e15, ), ||, (, (]
[=, FastMath, ., sqrt, (, error, /, mainSetDimension, ), ;, if, (, (, error, >, 1.0e15, ), ||, (, (]
[., sqrt, (, error, /, mainSetDimension, ), ;, if, (, (, error, >, 1.0e15, ), ||, (, (, k, >]
[error, /, mainSetDimension, ), ;, if, (, (, error, >, 1.0e15, ), ||, (, (, k, >, 1, ), &&]
[/, mainSetDimension, ), ;, if, (, (, error, >, 1.0e15, ), ||, (, (, k, >, 1, ), &&, (]
[/, mainSetDimension, ), ;, if, (, (, error, >, 1.0e15, ), ||, (, (, k, >, 1, ), &&, (]
[), ;, if, (, (, error, >, 1.0e15, ), ||, (, (, k, >, 1, ), &&, (, error, >]
[error, >, 1.0e15, ), ||, (, (, k, >, 1, ), &&, (, error, >, maxError, ), ), ), {]
[1.0e15, ), ||, (, (, k, >, 1, ), &&, (, error, >, maxError, ), ), ), {, hNew, =]
[1.0e15, ), ||, (, (, k, >, 1, ), &&, (, error, >, maxError, ), ), ), {, hNew, =]
[(, k, >, 1, ), &&, (, error, >, maxError, ), ), ), {, hNew, =, FastMath, ., abs, (]
[>, 1, ), &&, (, error, >, maxError, ), ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (]
[>, 1, ), &&, (, error, >, maxError, ), ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (]
[), &&, (, error, >, maxError, ), ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *]
[(, error, >, maxError, ), ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,]
[>, maxError, ), ), ), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,]
[), {, hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, ), ), ;]
[hNew, =, FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, ), ), ;, reject, =]
[FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, ), ), ;, reject, =, true, ;]
[abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, ), ), ;, reject, =, true, ;, loop, =]
[*, stabilityReduction, ,, forward, ,, false, ), ), ;, reject, =, true, ;, loop, =, false, ;, }, else, {]
[,, forward, ,, false, ), ), ;, reject, =, true, ;, loop, =, false, ;, }, else, {, maxError, =]
[,, forward, ,, false, ), ), ;, reject, =, true, ;, loop, =, false, ;, }, else, {, maxError, =]
[), ), ;, reject, =, true, ;, loop, =, false, ;, }, else, {, maxError, =, FastMath, ., max, (]
[), ), ;, reject, =, true, ;, loop, =, false, ;, }, else, {, maxError, =, FastMath, ., max, (]
[;, reject, =, true, ;, loop, =, false, ;, }, else, {, maxError, =, FastMath, ., max, (, 4, *]
[=, true, ;, loop, =, false, ;, }, else, {, maxError, =, FastMath, ., max, (, 4, *, error, ,]
[}, else, {, maxError, =, FastMath, ., max, (, 4, *, error, ,, 1.0, ), ;, final, double, exp, =]
[}, else, {, maxError, =, FastMath, ., max, (, 4, *, error, ,, 1.0, ), ;, final, double, exp, =]
[{, maxError, =, FastMath, ., max, (, 4, *, error, ,, 1.0, ), ;, final, double, exp, =, 1.0, /]
[maxError, =, FastMath, ., max, (, 4, *, error, ,, 1.0, ), ;, final, double, exp, =, 1.0, /, (]
[maxError, =, FastMath, ., max, (, 4, *, error, ,, 1.0, ), ;, final, double, exp, =, 1.0, /, (]
[maxError, =, FastMath, ., max, (, 4, *, error, ,, 1.0, ), ;, final, double, exp, =, 1.0, /, (]
[FastMath, ., max, (, 4, *, error, ,, 1.0, ), ;, final, double, exp, =, 1.0, /, (, 2, *]
[max, (, 4, *, error, ,, 1.0, ), ;, final, double, exp, =, 1.0, /, (, 2, *, k, +]
[1.0, ), ;, final, double, exp, =, 1.0, /, (, 2, *, k, +, 1, ), ;, double, fac, =]
[1.0, ), ;, final, double, exp, =, 1.0, /, (, 2, *, k, +, 1, ), ;, double, fac, =]
[;, final, double, exp, =, 1.0, /, (, 2, *, k, +, 1, ), ;, double, fac, =, stepControl2, /]
[;, final, double, exp, =, 1.0, /, (, 2, *, k, +, 1, ), ;, double, fac, =, stepControl2, /]
[=, 1.0, /, (, 2, *, k, +, 1, ), ;, double, fac, =, stepControl2, /, FastMath, ., pow, (]
[=, 1.0, /, (, 2, *, k, +, 1, ), ;, double, fac, =, stepControl2, /, FastMath, ., pow, (]
[/, (, 2, *, k, +, 1, ), ;, double, fac, =, stepControl2, /, FastMath, ., pow, (, error, /]
[2, *, k, +, 1, ), ;, double, fac, =, stepControl2, /, FastMath, ., pow, (, error, /, stepControl1, ,]
[double, fac, =, stepControl2, /, FastMath, ., pow, (, error, /, stepControl1, ,, exp, ), ;, final, double, pow, =]
[double, fac, =, stepControl2, /, FastMath, ., pow, (, error, /, stepControl1, ,, exp, ), ;, final, double, pow, =]
[/, FastMath, ., pow, (, error, /, stepControl1, ,, exp, ), ;, final, double, pow, =, FastMath, ., pow, (]
[., pow, (, error, /, stepControl1, ,, exp, ), ;, final, double, pow, =, FastMath, ., pow, (, stepControl3, ,]
[error, /, stepControl1, ,, exp, ), ;, final, double, pow, =, FastMath, ., pow, (, stepControl3, ,, exp, ), ;]
[stepControl1, ,, exp, ), ;, final, double, pow, =, FastMath, ., pow, (, stepControl3, ,, exp, ), ;, fac, =]
[stepControl1, ,, exp, ), ;, final, double, pow, =, FastMath, ., pow, (, stepControl3, ,, exp, ), ;, fac, =]
[;, final, double, pow, =, FastMath, ., pow, (, stepControl3, ,, exp, ), ;, fac, =, FastMath, ., max, (]
[;, final, double, pow, =, FastMath, ., pow, (, stepControl3, ,, exp, ), ;, fac, =, FastMath, ., max, (]
[double, pow, =, FastMath, ., pow, (, stepControl3, ,, exp, ), ;, fac, =, FastMath, ., max, (, pow, /]
[=, FastMath, ., pow, (, stepControl3, ,, exp, ), ;, fac, =, FastMath, ., max, (, pow, /, stepControl4, ,]
[=, FastMath, ., pow, (, stepControl3, ,, exp, ), ;, fac, =, FastMath, ., max, (, pow, /, stepControl4, ,]
[(, stepControl3, ,, exp, ), ;, fac, =, FastMath, ., max, (, pow, /, stepControl4, ,, FastMath, ., min, (]
[(, stepControl3, ,, exp, ), ;, fac, =, FastMath, ., max, (, pow, /, stepControl4, ,, FastMath, ., min, (]
[,, exp, ), ;, fac, =, FastMath, ., max, (, pow, /, stepControl4, ,, FastMath, ., min, (, 1, /]
[), ;, fac, =, FastMath, ., max, (, pow, /, stepControl4, ,, FastMath, ., min, (, 1, /, pow, ,]
[FastMath, ., max, (, pow, /, stepControl4, ,, FastMath, ., min, (, 1, /, pow, ,, fac, ), ), ;]
[FastMath, ., max, (, pow, /, stepControl4, ,, FastMath, ., min, (, 1, /, pow, ,, fac, ), ), ;]
[max, (, pow, /, stepControl4, ,, FastMath, ., min, (, 1, /, pow, ,, fac, ), ), ;, optimalStep, []
[/, stepControl4, ,, FastMath, ., min, (, 1, /, pow, ,, fac, ), ), ;, optimalStep, [, k, ], =]
[/, stepControl4, ,, FastMath, ., min, (, 1, /, pow, ,, fac, ), ), ;, optimalStep, [, k, ], =]
[., min, (, 1, /, pow, ,, fac, ), ), ;, optimalStep, [, k, ], =, FastMath, ., abs, (]
[(, 1, /, pow, ,, fac, ), ), ;, optimalStep, [, k, ], =, FastMath, ., abs, (, filterStep, (]
[(, 1, /, pow, ,, fac, ), ), ;, optimalStep, [, k, ], =, FastMath, ., abs, (, filterStep, (]
[/, pow, ,, fac, ), ), ;, optimalStep, [, k, ], =, FastMath, ., abs, (, filterStep, (, stepSize, *]
[,, fac, ), ), ;, optimalStep, [, k, ], =, FastMath, ., abs, (, filterStep, (, stepSize, *, fac, ,]
[), ), ;, optimalStep, [, k, ], =, FastMath, ., abs, (, filterStep, (, stepSize, *, fac, ,, forward, ,]
[[, k, ], =, FastMath, ., abs, (, filterStep, (, stepSize, *, fac, ,, forward, ,, true, ), ), ;]
[[, k, ], =, FastMath, ., abs, (, filterStep, (, stepSize, *, fac, ,, forward, ,, true, ), ), ;]
[], =, FastMath, ., abs, (, filterStep, (, stepSize, *, fac, ,, forward, ,, true, ), ), ;, costPerTimeUnit, []
[., abs, (, filterStep, (, stepSize, *, fac, ,, forward, ,, true, ), ), ;, costPerTimeUnit, [, k, ], =]
[., abs, (, filterStep, (, stepSize, *, fac, ,, forward, ,, true, ), ), ;, costPerTimeUnit, [, k, ], =]
[., abs, (, filterStep, (, stepSize, *, fac, ,, forward, ,, true, ), ), ;, costPerTimeUnit, [, k, ], =]
[(, filterStep, (, stepSize, *, fac, ,, forward, ,, true, ), ), ;, costPerTimeUnit, [, k, ], =, costPerStep, []
[stepSize, *, fac, ,, forward, ,, true, ), ), ;, costPerTimeUnit, [, k, ], =, costPerStep, [, k, ], /]
[stepSize, *, fac, ,, forward, ,, true, ), ), ;, costPerTimeUnit, [, k, ], =, costPerStep, [, k, ], /]
[fac, ,, forward, ,, true, ), ), ;, costPerTimeUnit, [, k, ], =, costPerStep, [, k, ], /, optimalStep, []
[), ), ;, costPerTimeUnit, [, k, ], =, costPerStep, [, k, ], /, optimalStep, [, k, ], ;, switch, (]
[), ), ;, costPerTimeUnit, [, k, ], =, costPerStep, [, k, ], /, optimalStep, [, k, ], ;, switch, (]
[;, costPerTimeUnit, [, k, ], =, costPerStep, [, k, ], /, optimalStep, [, k, ], ;, switch, (, k, -]
[], =, costPerStep, [, k, ], /, optimalStep, [, k, ], ;, switch, (, k, -, targetIter, ), {, case]
[=, costPerStep, [, k, ], /, optimalStep, [, k, ], ;, switch, (, k, -, targetIter, ), {, case, -]
[], /, optimalStep, [, k, ], ;, switch, (, k, -, targetIter, ), {, case, -, 1, :, if, (]
[], /, optimalStep, [, k, ], ;, switch, (, k, -, targetIter, ), {, case, -, 1, :, if, (]
[/, optimalStep, [, k, ], ;, switch, (, k, -, targetIter, ), {, case, -, 1, :, if, (, (]
[/, optimalStep, [, k, ], ;, switch, (, k, -, targetIter, ), {, case, -, 1, :, if, (, (]
[[, k, ], ;, switch, (, k, -, targetIter, ), {, case, -, 1, :, if, (, (, targetIter, >]
[;, switch, (, k, -, targetIter, ), {, case, -, 1, :, if, (, (, targetIter, >, 1, ), &&]
[switch, (, k, -, targetIter, ), {, case, -, 1, :, if, (, (, targetIter, >, 1, ), &&, !]
[), {, case, -, 1, :, if, (, (, targetIter, >, 1, ), &&, !, previousRejected, ), {, if, (]
[), {, case, -, 1, :, if, (, (, targetIter, >, 1, ), &&, !, previousRejected, ), {, if, (]
[case, -, 1, :, if, (, (, targetIter, >, 1, ), &&, !, previousRejected, ), {, if, (, error, <=]
[:, if, (, (, targetIter, >, 1, ), &&, !, previousRejected, ), {, if, (, error, <=, 1.0, ), {]
[(, (, targetIter, >, 1, ), &&, !, previousRejected, ), {, if, (, error, <=, 1.0, ), {, loop, =]
[), {, if, (, error, <=, 1.0, ), {, loop, =, false, ;, }, else, {, final, double, ratio, =]
[), {, if, (, error, <=, 1.0, ), {, loop, =, false, ;, }, else, {, final, double, ratio, =]
[{, if, (, error, <=, 1.0, ), {, loop, =, false, ;, }, else, {, final, double, ratio, =, (]
[{, if, (, error, <=, 1.0, ), {, loop, =, false, ;, }, else, {, final, double, ratio, =, (]
[error, <=, 1.0, ), {, loop, =, false, ;, }, else, {, final, double, ratio, =, (, (, double, )]
[error, <=, 1.0, ), {, loop, =, false, ;, }, else, {, final, double, ratio, =, (, (, double, )]
[1.0, ), {, loop, =, false, ;, }, else, {, final, double, ratio, =, (, (, double, ), sequence, []
[loop, =, false, ;, }, else, {, final, double, ratio, =, (, (, double, ), sequence, [, targetIter, ], *]
[loop, =, false, ;, }, else, {, final, double, ratio, =, (, (, double, ), sequence, [, targetIter, ], *]
[false, ;, }, else, {, final, double, ratio, =, (, (, double, ), sequence, [, targetIter, ], *, sequence, []
[false, ;, }, else, {, final, double, ratio, =, (, (, double, ), sequence, [, targetIter, ], *, sequence, []
[}, else, {, final, double, ratio, =, (, (, double, ), sequence, [, targetIter, ], *, sequence, [, targetIter, +]
[double, ratio, =, (, (, double, ), sequence, [, targetIter, ], *, sequence, [, targetIter, +, 1, ], ), /]
[ratio, =, (, (, double, ), sequence, [, targetIter, ], *, sequence, [, targetIter, +, 1, ], ), /, (]
[ratio, =, (, (, double, ), sequence, [, targetIter, ], *, sequence, [, targetIter, +, 1, ], ), /, (]
[ratio, =, (, (, double, ), sequence, [, targetIter, ], *, sequence, [, targetIter, +, 1, ], ), /, (]
[(, (, double, ), sequence, [, targetIter, ], *, sequence, [, targetIter, +, 1, ], ), /, (, sequence, []
[), sequence, [, targetIter, ], *, sequence, [, targetIter, +, 1, ], ), /, (, sequence, [, 0, ], *]
[), sequence, [, targetIter, ], *, sequence, [, targetIter, +, 1, ], ), /, (, sequence, [, 0, ], *]
[[, targetIter, ], *, sequence, [, targetIter, +, 1, ], ), /, (, sequence, [, 0, ], *, sequence, []
[targetIter, +, 1, ], ), /, (, sequence, [, 0, ], *, sequence, [, 0, ], ), ;, if, (]
[targetIter, +, 1, ], ), /, (, sequence, [, 0, ], *, sequence, [, 0, ], ), ;, if, (]
[1, ], ), /, (, sequence, [, 0, ], *, sequence, [, 0, ], ), ;, if, (, error, >]
[1, ], ), /, (, sequence, [, 0, ], *, sequence, [, 0, ], ), ;, if, (, error, >]
[), /, (, sequence, [, 0, ], *, sequence, [, 0, ], ), ;, if, (, error, >, ratio, *]
[sequence, [, 0, ], *, sequence, [, 0, ], ), ;, if, (, error, >, ratio, *, ratio, ), {]
[0, ], *, sequence, [, 0, ], ), ;, if, (, error, >, ratio, *, ratio, ), {, reject, =]
[*, sequence, [, 0, ], ), ;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;]
[[, 0, ], ), ;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;, loop, =]
[], ), ;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false, ;]
[;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false, ;, targetIter, =]
[>, ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false, ;, targetIter, =, k, ;, if, (]
[>, ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false, ;, targetIter, =, k, ;, if, (]
[ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false, ;, targetIter, =, k, ;, if, (, (]
[ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false, ;, targetIter, =, k, ;, if, (, (]
[ratio, ), {, reject, =, true, ;, loop, =, false, ;, targetIter, =, k, ;, if, (, (, targetIter, >]
[reject, =, true, ;, loop, =, false, ;, targetIter, =, k, ;, if, (, (, targetIter, >, 1, ), &&]
[=, true, ;, loop, =, false, ;, targetIter, =, k, ;, if, (, (, targetIter, >, 1, ), &&, (]
[=, true, ;, loop, =, false, ;, targetIter, =, k, ;, if, (, (, targetIter, >, 1, ), &&, (]
[=, true, ;, loop, =, false, ;, targetIter, =, k, ;, if, (, (, targetIter, >, 1, ), &&, (]
[;, loop, =, false, ;, targetIter, =, k, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, []
[;, loop, =, false, ;, targetIter, =, k, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, []
[=, false, ;, targetIter, =, k, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -]
[targetIter, =, k, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <]
[targetIter, =, k, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <]
[k, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *]
[k, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *]
[if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, []
[1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {]
[), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --]
[costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }]
[targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =]
[targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =]
[1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, []
[), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, }, break, ;, case]
[targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, }, break, ;, case, 0, :, if, (]
[targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, }, break, ;, case, 0, :, if, (]
[}, hNew, =, optimalStep, [, targetIter, ], ;, }, }, }, break, ;, case, 0, :, if, (, error, <=]
[optimalStep, [, targetIter, ], ;, }, }, }, break, ;, case, 0, :, if, (, error, <=, 1.0, ), {]
[targetIter, ], ;, }, }, }, break, ;, case, 0, :, if, (, error, <=, 1.0, ), {, loop, =]
[0, :, if, (, error, <=, 1.0, ), {, loop, =, false, ;, }, else, {, final, double, ratio, =]
[0, :, if, (, error, <=, 1.0, ), {, loop, =, false, ;, }, else, {, final, double, ratio, =]
[:, if, (, error, <=, 1.0, ), {, loop, =, false, ;, }, else, {, final, double, ratio, =, (]
[error, <=, 1.0, ), {, loop, =, false, ;, }, else, {, final, double, ratio, =, (, (, double, )]
[error, <=, 1.0, ), {, loop, =, false, ;, }, else, {, final, double, ratio, =, (, (, double, )]
[1.0, ), {, loop, =, false, ;, }, else, {, final, double, ratio, =, (, (, double, ), sequence, []
[1.0, ), {, loop, =, false, ;, }, else, {, final, double, ratio, =, (, (, double, ), sequence, []
[{, loop, =, false, ;, }, else, {, final, double, ratio, =, (, (, double, ), sequence, [, k, +]
[;, }, else, {, final, double, ratio, =, (, (, double, ), sequence, [, k, +, 1, ], ), /]
[;, }, else, {, final, double, ratio, =, (, (, double, ), sequence, [, k, +, 1, ], ), /]
[else, {, final, double, ratio, =, (, (, double, ), sequence, [, k, +, 1, ], ), /, sequence, []
[=, (, (, double, ), sequence, [, k, +, 1, ], ), /, sequence, [, 0, ], ;, if, (]
[=, (, (, double, ), sequence, [, k, +, 1, ], ), /, sequence, [, 0, ], ;, if, (]
[(, double, ), sequence, [, k, +, 1, ], ), /, sequence, [, 0, ], ;, if, (, error, >]
[(, double, ), sequence, [, k, +, 1, ], ), /, sequence, [, 0, ], ;, if, (, error, >]
[), sequence, [, k, +, 1, ], ), /, sequence, [, 0, ], ;, if, (, error, >, ratio, *]
[k, +, 1, ], ), /, sequence, [, 0, ], ;, if, (, error, >, ratio, *, ratio, ), {]
[1, ], ), /, sequence, [, 0, ], ;, if, (, error, >, ratio, *, ratio, ), {, reject, =]
[), /, sequence, [, 0, ], ;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;]
[sequence, [, 0, ], ;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;, loop, =]
[;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false, ;, if, (]
[;, if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false, ;, if, (]
[if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false, ;, if, (, (]
[if, (, error, >, ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false, ;, if, (, (]
[error, >, ratio, *, ratio, ), {, reject, =, true, ;, loop, =, false, ;, if, (, (, targetIter, >]
[*, ratio, ), {, reject, =, true, ;, loop, =, false, ;, if, (, (, targetIter, >, 1, ), &&]
[ratio, ), {, reject, =, true, ;, loop, =, false, ;, if, (, (, targetIter, >, 1, ), &&, (]
[ratio, ), {, reject, =, true, ;, loop, =, false, ;, if, (, (, targetIter, >, 1, ), &&, (]
[ratio, ), {, reject, =, true, ;, loop, =, false, ;, if, (, (, targetIter, >, 1, ), &&, (]
[{, reject, =, true, ;, loop, =, false, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, []
[{, reject, =, true, ;, loop, =, false, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, []
[=, true, ;, loop, =, false, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -]
[loop, =, false, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <]
[loop, =, false, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <]
[false, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *]
[false, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *]
[if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, []
[1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {]
[), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --]
[costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }]
[targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =]
[targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =]
[1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, []
[], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, break, ;, case]
[--, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, break, ;, case, 1, :, if, (]
[--, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, break, ;, case, 1, :, if, (]
[;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, }, break, ;, case, 1, :, if, (, error, >]
[=, optimalStep, [, targetIter, ], ;, }, }, break, ;, case, 1, :, if, (, error, >, 1.0, ), {]
[[, targetIter, ], ;, }, }, break, ;, case, 1, :, if, (, error, >, 1.0, ), {, reject, =]
[}, }, break, ;, case, 1, :, if, (, error, >, 1.0, ), {, reject, =, true, ;, if, (]
[}, }, break, ;, case, 1, :, if, (, error, >, 1.0, ), {, reject, =, true, ;, if, (]
[}, break, ;, case, 1, :, if, (, error, >, 1.0, ), {, reject, =, true, ;, if, (, (]
[}, break, ;, case, 1, :, if, (, error, >, 1.0, ), {, reject, =, true, ;, if, (, (]
[;, case, 1, :, if, (, error, >, 1.0, ), {, reject, =, true, ;, if, (, (, targetIter, >]
[:, if, (, error, >, 1.0, ), {, reject, =, true, ;, if, (, (, targetIter, >, 1, ), &&]
[if, (, error, >, 1.0, ), {, reject, =, true, ;, if, (, (, targetIter, >, 1, ), &&, (]
[if, (, error, >, 1.0, ), {, reject, =, true, ;, if, (, (, targetIter, >, 1, ), &&, (]
[if, (, error, >, 1.0, ), {, reject, =, true, ;, if, (, (, targetIter, >, 1, ), &&, (]
[error, >, 1.0, ), {, reject, =, true, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, []
[error, >, 1.0, ), {, reject, =, true, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, []
[1.0, ), {, reject, =, true, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -]
[reject, =, true, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <]
[reject, =, true, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <]
[true, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *]
[true, ;, if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *]
[if, (, (, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, []
[1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {]
[), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --]
[costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }]
[targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =]
[targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =]
[1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, []
[*, costPerTimeUnit, [, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }]
[[, targetIter, ], ), ), {, --, targetIter, ;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, loop, =]
[;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, loop, =, false, ;, break, ;, default, :, if, (]
[;, }, hNew, =, optimalStep, [, targetIter, ], ;, }, loop, =, false, ;, break, ;, default, :, if, (]
[}, hNew, =, optimalStep, [, targetIter, ], ;, }, loop, =, false, ;, break, ;, default, :, if, (, (]
[}, hNew, =, optimalStep, [, targetIter, ], ;, }, loop, =, false, ;, break, ;, default, :, if, (, (]
[=, optimalStep, [, targetIter, ], ;, }, loop, =, false, ;, break, ;, default, :, if, (, (, firstTime, ||]
[targetIter, ], ;, }, loop, =, false, ;, break, ;, default, :, if, (, (, firstTime, ||, isLastStep, ), &&]
[], ;, }, loop, =, false, ;, break, ;, default, :, if, (, (, firstTime, ||, isLastStep, ), &&, (]
[], ;, }, loop, =, false, ;, break, ;, default, :, if, (, (, firstTime, ||, isLastStep, ), &&, (]
[}, loop, =, false, ;, break, ;, default, :, if, (, (, firstTime, ||, isLastStep, ), &&, (, error, <=]
[;, break, ;, default, :, if, (, (, firstTime, ||, isLastStep, ), &&, (, error, <=, 1.0, ), ), {]
[;, default, :, if, (, (, firstTime, ||, isLastStep, ), &&, (, error, <=, 1.0, ), ), {, loop, =]
[error, <=, 1.0, ), ), {, loop, =, false, ;, }, break, ;, }, }, }, }, }, if, (]
[<=, 1.0, ), ), {, loop, =, false, ;, }, break, ;, }, }, }, }, }, if, (, !]
[), {, loop, =, false, ;, }, break, ;, }, }, }, }, }, if, (, !, reject, ), {]
[loop, =, false, ;, }, break, ;, }, }, }, }, }, if, (, !, reject, ), {, computeDerivatives, (]
[loop, =, false, ;, }, break, ;, }, }, }, }, }, if, (, !, reject, ), {, computeDerivatives, (]
[false, ;, }, break, ;, }, }, }, }, }, if, (, !, reject, ), {, computeDerivatives, (, stepStart, +]
[}, break, ;, }, }, }, }, }, if, (, !, reject, ), {, computeDerivatives, (, stepStart, +, stepSize, ,]
[;, }, }, }, }, }, if, (, !, reject, ), {, computeDerivatives, (, stepStart, +, stepSize, ,, y1, ,]
[(, !, reject, ), {, computeDerivatives, (, stepStart, +, stepSize, ,, y1, ,, yDot1, ), ;, }, double, hInt, =]
[(, stepStart, +, stepSize, ,, y1, ,, yDot1, ), ;, }, double, hInt, =, getMaxStep, (, ), ;, if, (]
[stepStart, +, stepSize, ,, y1, ,, yDot1, ), ;, }, double, hInt, =, getMaxStep, (, ), ;, if, (, !]
[;, }, double, hInt, =, getMaxStep, (, ), ;, if, (, !, reject, ), {, for, (, int, j, =]
[double, hInt, =, getMaxStep, (, ), ;, if, (, !, reject, ), {, for, (, int, j, =, 1, ;]
[double, hInt, =, getMaxStep, (, ), ;, if, (, !, reject, ), {, for, (, int, j, =, 1, ;]
[=, getMaxStep, (, ), ;, if, (, !, reject, ), {, for, (, int, j, =, 1, ;, j, <=]
[(, ), ;, if, (, !, reject, ), {, for, (, int, j, =, 1, ;, j, <=, k, ;]
[), ;, if, (, !, reject, ), {, for, (, int, j, =, 1, ;, j, <=, k, ;, ++]
[(, !, reject, ), {, for, (, int, j, =, 1, ;, j, <=, k, ;, ++, j, ), {]
[reject, ), {, for, (, int, j, =, 1, ;, j, <=, k, ;, ++, j, ), {, extrapolate, (]
[{, for, (, int, j, =, 1, ;, j, <=, k, ;, ++, j, ), {, extrapolate, (, 0, ,]
[(, int, j, =, 1, ;, j, <=, k, ;, ++, j, ), {, extrapolate, (, 0, ,, j, ,]
[j, =, 1, ;, j, <=, k, ;, ++, j, ), {, extrapolate, (, 0, ,, j, ,, diagonal, ,]
[j, =, 1, ;, j, <=, k, ;, ++, j, ), {, extrapolate, (, 0, ,, j, ,, diagonal, ,]
[1, ;, j, <=, k, ;, ++, j, ), {, extrapolate, (, 0, ,, j, ,, diagonal, ,, yMidDots, []
[{, extrapolate, (, 0, ,, j, ,, diagonal, ,, yMidDots, [, 0, ], ), ;, }, final, int, mu, =]
[{, extrapolate, (, 0, ,, j, ,, diagonal, ,, yMidDots, [, 0, ], ), ;, }, final, int, mu, =]
[{, extrapolate, (, 0, ,, j, ,, diagonal, ,, yMidDots, [, 0, ], ), ;, }, final, int, mu, =]
[{, extrapolate, (, 0, ,, j, ,, diagonal, ,, yMidDots, [, 0, ], ), ;, }, final, int, mu, =]
[(, 0, ,, j, ,, diagonal, ,, yMidDots, [, 0, ], ), ;, }, final, int, mu, =, 2, *]
[,, j, ,, diagonal, ,, yMidDots, [, 0, ], ), ;, }, final, int, mu, =, 2, *, k, -]
[,, diagonal, ,, yMidDots, [, 0, ], ), ;, }, final, int, mu, =, 2, *, k, -, mudif, +]
[), ;, }, final, int, mu, =, 2, *, k, -, mudif, +, 3, ;, for, (, int, l, =]
[}, final, int, mu, =, 2, *, k, -, mudif, +, 3, ;, for, (, int, l, =, 0, ;]
[}, final, int, mu, =, 2, *, k, -, mudif, +, 3, ;, for, (, int, l, =, 0, ;]
[int, mu, =, 2, *, k, -, mudif, +, 3, ;, for, (, int, l, =, 0, ;, l, <]
[=, 2, *, k, -, mudif, +, 3, ;, for, (, int, l, =, 0, ;, l, <, mu, ;]
[2, *, k, -, mudif, +, 3, ;, for, (, int, l, =, 0, ;, l, <, mu, ;, ++]
[;, for, (, int, l, =, 0, ;, l, <, mu, ;, ++, l, ), {, final, int, l2, =]
[;, for, (, int, l, =, 0, ;, l, <, mu, ;, ++, l, ), {, final, int, l2, =]
[(, int, l, =, 0, ;, l, <, mu, ;, ++, l, ), {, final, int, l2, =, l, /]
[;, l, <, mu, ;, ++, l, ), {, final, int, l2, =, l, /, 2, ;, double, factor, =]
[;, l, <, mu, ;, ++, l, ), {, final, int, l2, =, l, /, 2, ;, double, factor, =]
[;, ++, l, ), {, final, int, l2, =, l, /, 2, ;, double, factor, =, FastMath, ., pow, (]
[;, ++, l, ), {, final, int, l2, =, l, /, 2, ;, double, factor, =, FastMath, ., pow, (]
[l, ), {, final, int, l2, =, l, /, 2, ;, double, factor, =, FastMath, ., pow, (, 0.5, *]
[l, ), {, final, int, l2, =, l, /, 2, ;, double, factor, =, FastMath, ., pow, (, 0.5, *]
[{, final, int, l2, =, l, /, 2, ;, double, factor, =, FastMath, ., pow, (, 0.5, *, sequence, []
[l2, =, l, /, 2, ;, double, factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, l2, ], ,]
[double, factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, l2, ], ,, l, ), ;, int, middleIndex, =]
[double, factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, l2, ], ,, l, ), ;, int, middleIndex, =]
[double, factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, l2, ], ,, l, ), ;, int, middleIndex, =]
[double, factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, l2, ], ,, l, ), ;, int, middleIndex, =]
[=, FastMath, ., pow, (, 0.5, *, sequence, [, l2, ], ,, l, ), ;, int, middleIndex, =, fk, []
[0.5, *, sequence, [, l2, ], ,, l, ), ;, int, middleIndex, =, fk, [, l2, ], ., length, /]
[l, ), ;, int, middleIndex, =, fk, [, l2, ], ., length, /, 2, ;, for, (, int, i, =]
[;, int, middleIndex, =, fk, [, l2, ], ., length, /, 2, ;, for, (, int, i, =, 0, ;]
[;, int, middleIndex, =, fk, [, l2, ], ., length, /, 2, ;, for, (, int, i, =, 0, ;]
[middleIndex, =, fk, [, l2, ], ., length, /, 2, ;, for, (, int, i, =, 0, ;, i, <]
[middleIndex, =, fk, [, l2, ], ., length, /, 2, ;, for, (, int, i, =, 0, ;, i, <]
[l2, ], ., length, /, 2, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;]
[], ., length, /, 2, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++]
[/, 2, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[/, 2, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[/, 2, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, yMidDots, []
[;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, yMidDots, []
[(, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, yMidDots, [, l, +]
[=, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, yMidDots, [, l, +, 1, ], []
[i, <, y0, ., length, ;, ++, i, ), {, yMidDots, [, l, +, 1, ], [, i, ], =]
[i, <, y0, ., length, ;, ++, i, ), {, yMidDots, [, l, +, 1, ], [, i, ], =]
[y0, ., length, ;, ++, i, ), {, yMidDots, [, l, +, 1, ], [, i, ], =, factor, *]
[y0, ., length, ;, ++, i, ), {, yMidDots, [, l, +, 1, ], [, i, ], =, factor, *]
[y0, ., length, ;, ++, i, ), {, yMidDots, [, l, +, 1, ], [, i, ], =, factor, *]
[y0, ., length, ;, ++, i, ), {, yMidDots, [, l, +, 1, ], [, i, ], =, factor, *]
[length, ;, ++, i, ), {, yMidDots, [, l, +, 1, ], [, i, ], =, factor, *, fk, []
[i, ), {, yMidDots, [, l, +, 1, ], [, i, ], =, factor, *, fk, [, l2, ], []
[i, ), {, yMidDots, [, l, +, 1, ], [, i, ], =, factor, *, fk, [, l2, ], []
[{, yMidDots, [, l, +, 1, ], [, i, ], =, factor, *, fk, [, l2, ], [, middleIndex, +]
[l, +, 1, ], [, i, ], =, factor, *, fk, [, l2, ], [, middleIndex, +, l, ], []
[*, fk, [, l2, ], [, middleIndex, +, l, ], [, i, ], ;, }, for, (, int, j, =]
[[, l2, ], [, middleIndex, +, l, ], [, i, ], ;, }, for, (, int, j, =, 1, ;]
[[, l2, ], [, middleIndex, +, l, ], [, i, ], ;, }, for, (, int, j, =, 1, ;]
[], [, middleIndex, +, l, ], [, i, ], ;, }, for, (, int, j, =, 1, ;, j, <=]
[], [, middleIndex, +, l, ], [, i, ], ;, }, for, (, int, j, =, 1, ;, j, <=]
[middleIndex, +, l, ], [, i, ], ;, }, for, (, int, j, =, 1, ;, j, <=, k, -]
[l, ], [, i, ], ;, }, for, (, int, j, =, 1, ;, j, <=, k, -, l2, ;]
[], [, i, ], ;, }, for, (, int, j, =, 1, ;, j, <=, k, -, l2, ;, ++]
[], ;, }, for, (, int, j, =, 1, ;, j, <=, k, -, l2, ;, ++, j, ), {]
[}, for, (, int, j, =, 1, ;, j, <=, k, -, l2, ;, ++, j, ), {, factor, =]
[}, for, (, int, j, =, 1, ;, j, <=, k, -, l2, ;, ++, j, ), {, factor, =]
[j, =, 1, ;, j, <=, k, -, l2, ;, ++, j, ), {, factor, =, FastMath, ., pow, (]
[j, =, 1, ;, j, <=, k, -, l2, ;, ++, j, ), {, factor, =, FastMath, ., pow, (]
[1, ;, j, <=, k, -, l2, ;, ++, j, ), {, factor, =, FastMath, ., pow, (, 0.5, *]
[1, ;, j, <=, k, -, l2, ;, ++, j, ), {, factor, =, FastMath, ., pow, (, 0.5, *]
[j, <=, k, -, l2, ;, ++, j, ), {, factor, =, FastMath, ., pow, (, 0.5, *, sequence, []
[j, <=, k, -, l2, ;, ++, j, ), {, factor, =, FastMath, ., pow, (, 0.5, *, sequence, []
[k, -, l2, ;, ++, j, ), {, factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, j, +]
[;, ++, j, ), {, factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, j, +, l2, ], ,]
[), {, factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, j, +, l2, ], ,, l, ), ;]
[factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, j, +, l2, ], ,, l, ), ;, middleIndex, =]
[factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, j, +, l2, ], ,, l, ), ;, middleIndex, =]
[factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, j, +, l2, ], ,, l, ), ;, middleIndex, =]
[factor, =, FastMath, ., pow, (, 0.5, *, sequence, [, j, +, l2, ], ,, l, ), ;, middleIndex, =]
[FastMath, ., pow, (, 0.5, *, sequence, [, j, +, l2, ], ,, l, ), ;, middleIndex, =, fk, []
[FastMath, ., pow, (, 0.5, *, sequence, [, j, +, l2, ], ,, l, ), ;, middleIndex, =, fk, []
[pow, (, 0.5, *, sequence, [, j, +, l2, ], ,, l, ), ;, middleIndex, =, fk, [, l2, +]
[[, j, +, l2, ], ,, l, ), ;, middleIndex, =, fk, [, l2, +, j, ], ., length, /]
[), ;, middleIndex, =, fk, [, l2, +, j, ], ., length, /, 2, ;, for, (, int, i, =]
[middleIndex, =, fk, [, l2, +, j, ], ., length, /, 2, ;, for, (, int, i, =, 0, ;]
[middleIndex, =, fk, [, l2, +, j, ], ., length, /, 2, ;, for, (, int, i, =, 0, ;]
[fk, [, l2, +, j, ], ., length, /, 2, ;, for, (, int, i, =, 0, ;, i, <]
[fk, [, l2, +, j, ], ., length, /, 2, ;, for, (, int, i, =, 0, ;, i, <]
[j, ], ., length, /, 2, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;]
[], ., length, /, 2, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++]
[/, 2, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[/, 2, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[/, 2, ;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, diagonal, []
[;, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, diagonal, []
[(, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, diagonal, [, j, -]
[=, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, diagonal, [, j, -, 1, ], []
[i, <, y0, ., length, ;, ++, i, ), {, diagonal, [, j, -, 1, ], [, i, ], =]
[i, <, y0, ., length, ;, ++, i, ), {, diagonal, [, j, -, 1, ], [, i, ], =]
[y0, ., length, ;, ++, i, ), {, diagonal, [, j, -, 1, ], [, i, ], =, factor, *]
[y0, ., length, ;, ++, i, ), {, diagonal, [, j, -, 1, ], [, i, ], =, factor, *]
[y0, ., length, ;, ++, i, ), {, diagonal, [, j, -, 1, ], [, i, ], =, factor, *]
[y0, ., length, ;, ++, i, ), {, diagonal, [, j, -, 1, ], [, i, ], =, factor, *]
[length, ;, ++, i, ), {, diagonal, [, j, -, 1, ], [, i, ], =, factor, *, fk, []
[length, ;, ++, i, ), {, diagonal, [, j, -, 1, ], [, i, ], =, factor, *, fk, []
[++, i, ), {, diagonal, [, j, -, 1, ], [, i, ], =, factor, *, fk, [, l2, +]
[{, diagonal, [, j, -, 1, ], [, i, ], =, factor, *, fk, [, l2, +, j, ], []
[{, diagonal, [, j, -, 1, ], [, i, ], =, factor, *, fk, [, l2, +, j, ], []
[[, j, -, 1, ], [, i, ], =, factor, *, fk, [, l2, +, j, ], [, middleIndex, +]
[1, ], [, i, ], =, factor, *, fk, [, l2, +, j, ], [, middleIndex, +, l, ], []
[], =, factor, *, fk, [, l2, +, j, ], [, middleIndex, +, l, ], [, i, ], ;, }]
[factor, *, fk, [, l2, +, j, ], [, middleIndex, +, l, ], [, i, ], ;, }, extrapolate, (]
[fk, [, l2, +, j, ], [, middleIndex, +, l, ], [, i, ], ;, }, extrapolate, (, l2, ,]
[l2, +, j, ], [, middleIndex, +, l, ], [, i, ], ;, }, extrapolate, (, l2, ,, j, ,]
[j, ], [, middleIndex, +, l, ], [, i, ], ;, }, extrapolate, (, l2, ,, j, ,, diagonal, ,]
[j, ], [, middleIndex, +, l, ], [, i, ], ;, }, extrapolate, (, l2, ,, j, ,, diagonal, ,]
[[, middleIndex, +, l, ], [, i, ], ;, }, extrapolate, (, l2, ,, j, ,, diagonal, ,, yMidDots, []
[[, middleIndex, +, l, ], [, i, ], ;, }, extrapolate, (, l2, ,, j, ,, diagonal, ,, yMidDots, []
[+, l, ], [, i, ], ;, }, extrapolate, (, l2, ,, j, ,, diagonal, ,, yMidDots, [, l, +]
[l2, ,, j, ,, diagonal, ,, yMidDots, [, l, +, 1, ], ), ;, }, for, (, int, i, =]
[j, ,, diagonal, ,, yMidDots, [, l, +, 1, ], ), ;, }, for, (, int, i, =, 0, ;]
[j, ,, diagonal, ,, yMidDots, [, l, +, 1, ], ), ;, }, for, (, int, i, =, 0, ;]
[diagonal, ,, yMidDots, [, l, +, 1, ], ), ;, }, for, (, int, i, =, 0, ;, i, <]
[diagonal, ,, yMidDots, [, l, +, 1, ], ), ;, }, for, (, int, i, =, 0, ;, i, <]
[l, +, 1, ], ), ;, }, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;]
[+, 1, ], ), ;, }, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++]
[), ;, }, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[}, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, yMidDots, []
[}, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, yMidDots, []
[(, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, yMidDots, [, l, +]
[=, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, yMidDots, [, l, +, 1, ], []
[i, <, y0, ., length, ;, ++, i, ), {, yMidDots, [, l, +, 1, ], [, i, ], *=]
[), {, yMidDots, [, l, +, 1, ], [, i, ], *=, stepSize, ;, }, for, (, int, j, =]
[), {, yMidDots, [, l, +, 1, ], [, i, ], *=, stepSize, ;, }, for, (, int, j, =]
[{, yMidDots, [, l, +, 1, ], [, i, ], *=, stepSize, ;, }, for, (, int, j, =, (]
[{, yMidDots, [, l, +, 1, ], [, i, ], *=, stepSize, ;, }, for, (, int, j, =, (]
[[, l, +, 1, ], [, i, ], *=, stepSize, ;, }, for, (, int, j, =, (, l, +]
[1, ], [, i, ], *=, stepSize, ;, }, for, (, int, j, =, (, l, +, 1, ), /]
[[, i, ], *=, stepSize, ;, }, for, (, int, j, =, (, l, +, 1, ), /, 2, ;]
[[, i, ], *=, stepSize, ;, }, for, (, int, j, =, (, l, +, 1, ), /, 2, ;]
[], *=, stepSize, ;, }, for, (, int, j, =, (, l, +, 1, ), /, 2, ;, j, <=]
[stepSize, ;, }, for, (, int, j, =, (, l, +, 1, ), /, 2, ;, j, <=, k, ;]
[;, }, for, (, int, j, =, (, l, +, 1, ), /, 2, ;, j, <=, k, ;, ++]
[l, +, 1, ), /, 2, ;, j, <=, k, ;, ++, j, ), {, for, (, int, m, =]
[l, +, 1, ), /, 2, ;, j, <=, k, ;, ++, j, ), {, for, (, int, m, =]
[l, +, 1, ), /, 2, ;, j, <=, k, ;, ++, j, ), {, for, (, int, m, =]
[l, +, 1, ), /, 2, ;, j, <=, k, ;, ++, j, ), {, for, (, int, m, =]
[1, ), /, 2, ;, j, <=, k, ;, ++, j, ), {, for, (, int, m, =, fk, []
[j, <=, k, ;, ++, j, ), {, for, (, int, m, =, fk, [, j, ], ., length, -]
[k, ;, ++, j, ), {, for, (, int, m, =, fk, [, j, ], ., length, -, 1, ;]
[k, ;, ++, j, ), {, for, (, int, m, =, fk, [, j, ], ., length, -, 1, ;]
[++, j, ), {, for, (, int, m, =, fk, [, j, ], ., length, -, 1, ;, m, >=]
[++, j, ), {, for, (, int, m, =, fk, [, j, ], ., length, -, 1, ;, m, >=]
[), {, for, (, int, m, =, fk, [, j, ], ., length, -, 1, ;, m, >=, 2, *]
[{, for, (, int, m, =, fk, [, j, ], ., length, -, 1, ;, m, >=, 2, *, (]
[{, for, (, int, m, =, fk, [, j, ], ., length, -, 1, ;, m, >=, 2, *, (]
[(, int, m, =, fk, [, j, ], ., length, -, 1, ;, m, >=, 2, *, (, l, +]
[=, fk, [, j, ], ., length, -, 1, ;, m, >=, 2, *, (, l, +, 1, ), ;]
[fk, [, j, ], ., length, -, 1, ;, m, >=, 2, *, (, l, +, 1, ), ;, --]
[;, m, >=, 2, *, (, l, +, 1, ), ;, --, m, ), {, for, (, int, i, =]
[>=, 2, *, (, l, +, 1, ), ;, --, m, ), {, for, (, int, i, =, 0, ;]
[>=, 2, *, (, l, +, 1, ), ;, --, m, ), {, for, (, int, i, =, 0, ;]
[*, (, l, +, 1, ), ;, --, m, ), {, for, (, int, i, =, 0, ;, i, <]
[*, (, l, +, 1, ), ;, --, m, ), {, for, (, int, i, =, 0, ;, i, <]
[1, ), ;, --, m, ), {, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;]
[), ;, --, m, ), {, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++]
[m, ), {, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[m, ), {, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[m, ), {, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[m, ), {, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {]
[{, for, (, int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, fk, []
[int, i, =, 0, ;, i, <, y0, ., length, ;, ++, i, ), {, fk, [, j, ], []
[0, ;, i, <, y0, ., length, ;, ++, i, ), {, fk, [, j, ], [, m, ], []
[<, y0, ., length, ;, ++, i, ), {, fk, [, j, ], [, m, ], [, i, ], -=]
[<, y0, ., length, ;, ++, i, ), {, fk, [, j, ], [, m, ], [, i, ], -=]
[<, y0, ., length, ;, ++, i, ), {, fk, [, j, ], [, m, ], [, i, ], -=]
[<, y0, ., length, ;, ++, i, ), {, fk, [, j, ], [, m, ], [, i, ], -=]
[., length, ;, ++, i, ), {, fk, [, j, ], [, m, ], [, i, ], -=, fk, []
[++, i, ), {, fk, [, j, ], [, m, ], [, i, ], -=, fk, [, j, ], []
[++, i, ), {, fk, [, j, ], [, m, ], [, i, ], -=, fk, [, j, ], []
[), {, fk, [, j, ], [, m, ], [, i, ], -=, fk, [, j, ], [, m, -]
[[, j, ], [, m, ], [, i, ], -=, fk, [, j, ], [, m, -, 2, ], []
[-=, fk, [, j, ], [, m, -, 2, ], [, i, ], ;, }, }, }, }, if, (]
[-=, fk, [, j, ], [, m, -, 2, ], [, i, ], ;, }, }, }, }, if, (]
[[, j, ], [, m, -, 2, ], [, i, ], ;, }, }, }, }, if, (, mu, >=]
[], [, i, ], ;, }, }, }, }, if, (, mu, >=, 0, ), {, final, GraggBulirschStoerStepInterpolator, gbsInterpolator, =]
[], ;, }, }, }, }, if, (, mu, >=, 0, ), {, final, GraggBulirschStoerStepInterpolator, gbsInterpolator, =, (, GraggBulirschStoerStepInterpolator, )]
[}, }, }, }, if, (, mu, >=, 0, ), {, final, GraggBulirschStoerStepInterpolator, gbsInterpolator, =, (, GraggBulirschStoerStepInterpolator, ), interpolator, ;]
[}, }, }, }, if, (, mu, >=, 0, ), {, final, GraggBulirschStoerStepInterpolator, gbsInterpolator, =, (, GraggBulirschStoerStepInterpolator, ), interpolator, ;]
[if, (, mu, >=, 0, ), {, final, GraggBulirschStoerStepInterpolator, gbsInterpolator, =, (, GraggBulirschStoerStepInterpolator, ), interpolator, ;, gbsInterpolator, ., computeCoefficients, (]
[mu, >=, 0, ), {, final, GraggBulirschStoerStepInterpolator, gbsInterpolator, =, (, GraggBulirschStoerStepInterpolator, ), interpolator, ;, gbsInterpolator, ., computeCoefficients, (, mu, ,]
[final, GraggBulirschStoerStepInterpolator, gbsInterpolator, =, (, GraggBulirschStoerStepInterpolator, ), interpolator, ;, gbsInterpolator, ., computeCoefficients, (, mu, ,, stepSize, ), ;, if, (]
[interpolator, ;, gbsInterpolator, ., computeCoefficients, (, mu, ,, stepSize, ), ;, if, (, useInterpolationError, ), {, final, double, interpError, =]
[interpolator, ;, gbsInterpolator, ., computeCoefficients, (, mu, ,, stepSize, ), ;, if, (, useInterpolationError, ), {, final, double, interpError, =]
[computeCoefficients, (, mu, ,, stepSize, ), ;, if, (, useInterpolationError, ), {, final, double, interpError, =, gbsInterpolator, ., estimateError, (]
[,, stepSize, ), ;, if, (, useInterpolationError, ), {, final, double, interpError, =, gbsInterpolator, ., estimateError, (, scale, ), ;]
[), ;, if, (, useInterpolationError, ), {, final, double, interpError, =, gbsInterpolator, ., estimateError, (, scale, ), ;, hInt, =]
[), ;, if, (, useInterpolationError, ), {, final, double, interpError, =, gbsInterpolator, ., estimateError, (, scale, ), ;, hInt, =]
[useInterpolationError, ), {, final, double, interpError, =, gbsInterpolator, ., estimateError, (, scale, ), ;, hInt, =, FastMath, ., abs, (]
[useInterpolationError, ), {, final, double, interpError, =, gbsInterpolator, ., estimateError, (, scale, ), ;, hInt, =, FastMath, ., abs, (]
[{, final, double, interpError, =, gbsInterpolator, ., estimateError, (, scale, ), ;, hInt, =, FastMath, ., abs, (, stepSize, /]
[{, final, double, interpError, =, gbsInterpolator, ., estimateError, (, scale, ), ;, hInt, =, FastMath, ., abs, (, stepSize, /]
[=, gbsInterpolator, ., estimateError, (, scale, ), ;, hInt, =, FastMath, ., abs, (, stepSize, /, FastMath, ., max, (]
[=, gbsInterpolator, ., estimateError, (, scale, ), ;, hInt, =, FastMath, ., abs, (, stepSize, /, FastMath, ., max, (]
[(, scale, ), ;, hInt, =, FastMath, ., abs, (, stepSize, /, FastMath, ., max, (, FastMath, ., pow, (]
[), ;, hInt, =, FastMath, ., abs, (, stepSize, /, FastMath, ., max, (, FastMath, ., pow, (, interpError, ,]
[), ;, hInt, =, FastMath, ., abs, (, stepSize, /, FastMath, ., max, (, FastMath, ., pow, (, interpError, ,]
[hInt, =, FastMath, ., abs, (, stepSize, /, FastMath, ., max, (, FastMath, ., pow, (, interpError, ,, 1.0, /]
[=, FastMath, ., abs, (, stepSize, /, FastMath, ., max, (, FastMath, ., pow, (, interpError, ,, 1.0, /, (]
[=, FastMath, ., abs, (, stepSize, /, FastMath, ., max, (, FastMath, ., pow, (, interpError, ,, 1.0, /, (]
[., abs, (, stepSize, /, FastMath, ., max, (, FastMath, ., pow, (, interpError, ,, 1.0, /, (, mu, +]
[/, FastMath, ., max, (, FastMath, ., pow, (, interpError, ,, 1.0, /, (, mu, +, 4, ), ), ,]
[., pow, (, interpError, ,, 1.0, /, (, mu, +, 4, ), ), ,, 0.01, ), ), ;, if, (]
[., pow, (, interpError, ,, 1.0, /, (, mu, +, 4, ), ), ,, 0.01, ), ), ;, if, (]
[(, interpError, ,, 1.0, /, (, mu, +, 4, ), ), ,, 0.01, ), ), ;, if, (, interpError, >]
[1.0, /, (, mu, +, 4, ), ), ,, 0.01, ), ), ;, if, (, interpError, >, 10.0, ), {]
[(, mu, +, 4, ), ), ,, 0.01, ), ), ;, if, (, interpError, >, 10.0, ), {, hNew, =]
[+, 4, ), ), ,, 0.01, ), ), ;, if, (, interpError, >, 10.0, ), {, hNew, =, hInt, ;]
[), ), ,, 0.01, ), ), ;, if, (, interpError, >, 10.0, ), {, hNew, =, hInt, ;, reject, =]
[(, interpError, >, 10.0, ), {, hNew, =, hInt, ;, reject, =, true, ;, }, }, }, }, if, (]
[interpError, >, 10.0, ), {, hNew, =, hInt, ;, reject, =, true, ;, }, }, }, }, if, (, !]
[), {, hNew, =, hInt, ;, reject, =, true, ;, }, }, }, }, if, (, !, reject, ), {]
[), {, hNew, =, hInt, ;, reject, =, true, ;, }, }, }, }, if, (, !, reject, ), {]
[hInt, ;, reject, =, true, ;, }, }, }, }, if, (, !, reject, ), {, interpolator, ., storeTime, (]
[hInt, ;, reject, =, true, ;, }, }, }, }, if, (, !, reject, ), {, interpolator, ., storeTime, (]
[reject, =, true, ;, }, }, }, }, if, (, !, reject, ), {, interpolator, ., storeTime, (, stepStart, +]
[;, }, }, }, }, if, (, !, reject, ), {, interpolator, ., storeTime, (, stepStart, +, stepSize, ), ;]
[}, }, }, if, (, !, reject, ), {, interpolator, ., storeTime, (, stepStart, +, stepSize, ), ;, stepStart, =]
[}, if, (, !, reject, ), {, interpolator, ., storeTime, (, stepStart, +, stepSize, ), ;, stepStart, =, acceptStep, (]
[(, !, reject, ), {, interpolator, ., storeTime, (, stepStart, +, stepSize, ), ;, stepStart, =, acceptStep, (, interpolator, ,]
[reject, ), {, interpolator, ., storeTime, (, stepStart, +, stepSize, ), ;, stepStart, =, acceptStep, (, interpolator, ,, y1, ,]
[{, interpolator, ., storeTime, (, stepStart, +, stepSize, ), ;, stepStart, =, acceptStep, (, interpolator, ,, y1, ,, yDot1, ,]
[storeTime, (, stepStart, +, stepSize, ), ;, stepStart, =, acceptStep, (, interpolator, ,, y1, ,, yDot1, ,, t, ), ;]
[storeTime, (, stepStart, +, stepSize, ), ;, stepStart, =, acceptStep, (, interpolator, ,, y1, ,, yDot1, ,, t, ), ;]
[stepSize, ), ;, stepStart, =, acceptStep, (, interpolator, ,, y1, ,, yDot1, ,, t, ), ;, interpolator, ., storeTime, (]
[stepStart, =, acceptStep, (, interpolator, ,, y1, ,, yDot1, ,, t, ), ;, interpolator, ., storeTime, (, stepStart, ), ;]
[stepStart, =, acceptStep, (, interpolator, ,, y1, ,, yDot1, ,, t, ), ;, interpolator, ., storeTime, (, stepStart, ), ;]
[interpolator, ,, y1, ,, yDot1, ,, t, ), ;, interpolator, ., storeTime, (, stepStart, ), ;, System, ., arraycopy, (]
[y1, ,, yDot1, ,, t, ), ;, interpolator, ., storeTime, (, stepStart, ), ;, System, ., arraycopy, (, y1, ,]
[yDot1, ,, t, ), ;, interpolator, ., storeTime, (, stepStart, ), ;, System, ., arraycopy, (, y1, ,, 0, ,]
[t, ), ;, interpolator, ., storeTime, (, stepStart, ), ;, System, ., arraycopy, (, y1, ,, 0, ,, y, ,]
[;, interpolator, ., storeTime, (, stepStart, ), ;, System, ., arraycopy, (, y1, ,, 0, ,, y, ,, 0, ,]
[;, interpolator, ., storeTime, (, stepStart, ), ;, System, ., arraycopy, (, y1, ,, 0, ,, y, ,, 0, ,]
[stepStart, ), ;, System, ., arraycopy, (, y1, ,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;]
[stepStart, ), ;, System, ., arraycopy, (, y1, ,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;]
[., arraycopy, (, y1, ,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, System, ., arraycopy, (]
[(, y1, ,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, System, ., arraycopy, (, yDot1, ,]
[,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, System, ., arraycopy, (, yDot1, ,, 0, ,]
[,, y, ,, 0, ,, y0, ., length, ), ;, System, ., arraycopy, (, yDot1, ,, 0, ,, yDot0, ,]
[,, 0, ,, y0, ., length, ), ;, System, ., arraycopy, (, yDot1, ,, 0, ,, yDot0, ,, 0, ,]
[,, 0, ,, y0, ., length, ), ;, System, ., arraycopy, (, yDot1, ,, 0, ,, yDot0, ,, 0, ,]
[length, ), ;, System, ., arraycopy, (, yDot1, ,, 0, ,, yDot0, ,, 0, ,, y0, ., length, ), ;]
[;, System, ., arraycopy, (, yDot1, ,, 0, ,, yDot0, ,, 0, ,, y0, ., length, ), ;, firstStepAlreadyComputed, =]
[0, ,, yDot0, ,, 0, ,, y0, ., length, ), ;, firstStepAlreadyComputed, =, true, ;, int, optimalIter, ;, if, (]
[0, ,, yDot0, ,, 0, ,, y0, ., length, ), ;, firstStepAlreadyComputed, =, true, ;, int, optimalIter, ;, if, (]
[yDot0, ,, 0, ,, y0, ., length, ), ;, firstStepAlreadyComputed, =, true, ;, int, optimalIter, ;, if, (, k, ==]
[,, y0, ., length, ), ;, firstStepAlreadyComputed, =, true, ;, int, optimalIter, ;, if, (, k, ==, 1, ), {]
[., length, ), ;, firstStepAlreadyComputed, =, true, ;, int, optimalIter, ;, if, (, k, ==, 1, ), {, optimalIter, =]
[firstStepAlreadyComputed, =, true, ;, int, optimalIter, ;, if, (, k, ==, 1, ), {, optimalIter, =, 2, ;, if, (]
[;, int, optimalIter, ;, if, (, k, ==, 1, ), {, optimalIter, =, 2, ;, if, (, previousRejected, ), {]
[optimalIter, ;, if, (, k, ==, 1, ), {, optimalIter, =, 2, ;, if, (, previousRejected, ), {, optimalIter, =]
[), {, optimalIter, =, 2, ;, if, (, previousRejected, ), {, optimalIter, =, 1, ;, }, }, else, if, (]
[), {, optimalIter, =, 2, ;, if, (, previousRejected, ), {, optimalIter, =, 1, ;, }, }, else, if, (]
[optimalIter, =, 2, ;, if, (, previousRejected, ), {, optimalIter, =, 1, ;, }, }, else, if, (, k, <=]
[;, if, (, previousRejected, ), {, optimalIter, =, 1, ;, }, }, else, if, (, k, <=, targetIter, ), {]
[(, previousRejected, ), {, optimalIter, =, 1, ;, }, }, else, if, (, k, <=, targetIter, ), {, optimalIter, =]
[optimalIter, =, 1, ;, }, }, else, if, (, k, <=, targetIter, ), {, optimalIter, =, k, ;, if, (]
[optimalIter, =, 1, ;, }, }, else, if, (, k, <=, targetIter, ), {, optimalIter, =, k, ;, if, (]
[optimalIter, =, 1, ;, }, }, else, if, (, k, <=, targetIter, ), {, optimalIter, =, k, ;, if, (]
[1, ;, }, }, else, if, (, k, <=, targetIter, ), {, optimalIter, =, k, ;, if, (, costPerTimeUnit, []
[1, ;, }, }, else, if, (, k, <=, targetIter, ), {, optimalIter, =, k, ;, if, (, costPerTimeUnit, []
[}, }, else, if, (, k, <=, targetIter, ), {, optimalIter, =, k, ;, if, (, costPerTimeUnit, [, k, -]
[if, (, k, <=, targetIter, ), {, optimalIter, =, k, ;, if, (, costPerTimeUnit, [, k, -, 1, ], <]
[if, (, k, <=, targetIter, ), {, optimalIter, =, k, ;, if, (, costPerTimeUnit, [, k, -, 1, ], <]
[k, <=, targetIter, ), {, optimalIter, =, k, ;, if, (, costPerTimeUnit, [, k, -, 1, ], <, orderControl1, *]
[k, <=, targetIter, ), {, optimalIter, =, k, ;, if, (, costPerTimeUnit, [, k, -, 1, ], <, orderControl1, *]
[targetIter, ), {, optimalIter, =, k, ;, if, (, costPerTimeUnit, [, k, -, 1, ], <, orderControl1, *, costPerTimeUnit, []
[=, k, ;, if, (, costPerTimeUnit, [, k, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, k, ], ), {]
[;, if, (, costPerTimeUnit, [, k, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, k, ], ), {, optimalIter, =]
[;, if, (, costPerTimeUnit, [, k, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, k, ], ), {, optimalIter, =]
[(, costPerTimeUnit, [, k, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, k, ], ), {, optimalIter, =, k, -]
[], <, orderControl1, *, costPerTimeUnit, [, k, ], ), {, optimalIter, =, k, -, 1, ;, }, else, if, (]
[], <, orderControl1, *, costPerTimeUnit, [, k, ], ), {, optimalIter, =, k, -, 1, ;, }, else, if, (]
[], <, orderControl1, *, costPerTimeUnit, [, k, ], ), {, optimalIter, =, k, -, 1, ;, }, else, if, (]
[orderControl1, *, costPerTimeUnit, [, k, ], ), {, optimalIter, =, k, -, 1, ;, }, else, if, (, costPerTimeUnit, []
[[, k, ], ), {, optimalIter, =, k, -, 1, ;, }, else, if, (, costPerTimeUnit, [, k, ], <]
[[, k, ], ), {, optimalIter, =, k, -, 1, ;, }, else, if, (, costPerTimeUnit, [, k, ], <]
[], ), {, optimalIter, =, k, -, 1, ;, }, else, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *]
[], ), {, optimalIter, =, k, -, 1, ;, }, else, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *]
[{, optimalIter, =, k, -, 1, ;, }, else, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, []
[{, optimalIter, =, k, -, 1, ;, }, else, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, []
[=, k, -, 1, ;, }, else, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -]
[;, }, else, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), {]
[else, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), {, optimalIter, =]
[else, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), {, optimalIter, =]
[[, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), {, optimalIter, =, FastMath, ., min, (]
[[, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), {, optimalIter, =, FastMath, ., min, (]
[], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), {, optimalIter, =, FastMath, ., min, (, k, +]
[orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), {, optimalIter, =, FastMath, ., min, (, k, +, 1, ,]
[orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), {, optimalIter, =, FastMath, ., min, (, k, +, 1, ,]
[orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), {, optimalIter, =, FastMath, ., min, (, k, +, 1, ,]
[k, -, 1, ], ), {, optimalIter, =, FastMath, ., min, (, k, +, 1, ,, sequence, ., length, -]
[=, FastMath, ., min, (, k, +, 1, ,, sequence, ., length, -, 2, ), ;, }, }, else, {]
[., min, (, k, +, 1, ,, sequence, ., length, -, 2, ), ;, }, }, else, {, optimalIter, =]
[., min, (, k, +, 1, ,, sequence, ., length, -, 2, ), ;, }, }, else, {, optimalIter, =]
[(, k, +, 1, ,, sequence, ., length, -, 2, ), ;, }, }, else, {, optimalIter, =, k, -]
[,, sequence, ., length, -, 2, ), ;, }, }, else, {, optimalIter, =, k, -, 1, ;, if, (]
[,, sequence, ., length, -, 2, ), ;, }, }, else, {, optimalIter, =, k, -, 1, ;, if, (]
[sequence, ., length, -, 2, ), ;, }, }, else, {, optimalIter, =, k, -, 1, ;, if, (, (]
[sequence, ., length, -, 2, ), ;, }, }, else, {, optimalIter, =, k, -, 1, ;, if, (, (]
[length, -, 2, ), ;, }, }, else, {, optimalIter, =, k, -, 1, ;, if, (, (, k, >]
[), ;, }, }, else, {, optimalIter, =, k, -, 1, ;, if, (, (, k, >, 2, ), &&]
[;, }, }, else, {, optimalIter, =, k, -, 1, ;, if, (, (, k, >, 2, ), &&, (]
[;, }, }, else, {, optimalIter, =, k, -, 1, ;, if, (, (, k, >, 2, ), &&, (]
[;, }, }, else, {, optimalIter, =, k, -, 1, ;, if, (, (, k, >, 2, ), &&, (]
[}, else, {, optimalIter, =, k, -, 1, ;, if, (, (, k, >, 2, ), &&, (, costPerTimeUnit, []
[}, else, {, optimalIter, =, k, -, 1, ;, if, (, (, k, >, 2, ), &&, (, costPerTimeUnit, []
[{, optimalIter, =, k, -, 1, ;, if, (, (, k, >, 2, ), &&, (, costPerTimeUnit, [, k, -]
[k, -, 1, ;, if, (, (, k, >, 2, ), &&, (, costPerTimeUnit, [, k, -, 2, ], <]
[k, -, 1, ;, if, (, (, k, >, 2, ), &&, (, costPerTimeUnit, [, k, -, 2, ], <]
[1, ;, if, (, (, k, >, 2, ), &&, (, costPerTimeUnit, [, k, -, 2, ], <, orderControl1, *]
[1, ;, if, (, (, k, >, 2, ), &&, (, costPerTimeUnit, [, k, -, 2, ], <, orderControl1, *]
[if, (, (, k, >, 2, ), &&, (, costPerTimeUnit, [, k, -, 2, ], <, orderControl1, *, costPerTimeUnit, []
[if, (, (, k, >, 2, ), &&, (, costPerTimeUnit, [, k, -, 2, ], <, orderControl1, *, costPerTimeUnit, []
[(, k, >, 2, ), &&, (, costPerTimeUnit, [, k, -, 2, ], <, orderControl1, *, costPerTimeUnit, [, k, -]
[&&, (, costPerTimeUnit, [, k, -, 2, ], <, orderControl1, *, costPerTimeUnit, [, k, -, 1, ], ), ), {]
[costPerTimeUnit, [, k, -, 2, ], <, orderControl1, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, optimalIter, =]
[costPerTimeUnit, [, k, -, 2, ], <, orderControl1, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, optimalIter, =]
[k, -, 2, ], <, orderControl1, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, optimalIter, =, k, -]
[orderControl1, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, optimalIter, =, k, -, 2, ;, }, if, (]
[orderControl1, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, optimalIter, =, k, -, 2, ;, }, if, (]
[orderControl1, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, optimalIter, =, k, -, 2, ;, }, if, (]
[costPerTimeUnit, [, k, -, 1, ], ), ), {, optimalIter, =, k, -, 2, ;, }, if, (, costPerTimeUnit, []
[-, 1, ], ), ), {, optimalIter, =, k, -, 2, ;, }, if, (, costPerTimeUnit, [, k, ], <]
[-, 1, ], ), ), {, optimalIter, =, k, -, 2, ;, }, if, (, costPerTimeUnit, [, k, ], <]
[], ), ), {, optimalIter, =, k, -, 2, ;, }, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *]
[], ), ), {, optimalIter, =, k, -, 2, ;, }, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *]
[), {, optimalIter, =, k, -, 2, ;, }, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, []
[k, -, 2, ;, }, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, optimalIter, ], ), {]
[2, ;, }, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, optimalIter, ], ), {, optimalIter, =]
[2, ;, }, if, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, optimalIter, ], ), {, optimalIter, =]
[(, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, optimalIter, ], ), {, optimalIter, =, FastMath, ., min, (]
[[, k, ], <, orderControl2, *, costPerTimeUnit, [, optimalIter, ], ), {, optimalIter, =, FastMath, ., min, (, k, ,]
[[, k, ], <, orderControl2, *, costPerTimeUnit, [, optimalIter, ], ), {, optimalIter, =, FastMath, ., min, (, k, ,]
[[, k, ], <, orderControl2, *, costPerTimeUnit, [, optimalIter, ], ), {, optimalIter, =, FastMath, ., min, (, k, ,]
[orderControl2, *, costPerTimeUnit, [, optimalIter, ], ), {, optimalIter, =, FastMath, ., min, (, k, ,, sequence, ., length, -]
[{, optimalIter, =, FastMath, ., min, (, k, ,, sequence, ., length, -, 2, ), ;, }, }, if, (]
[FastMath, ., min, (, k, ,, sequence, ., length, -, 2, ), ;, }, }, if, (, previousRejected, ), {]
[min, (, k, ,, sequence, ., length, -, 2, ), ;, }, }, if, (, previousRejected, ), {, targetIter, =]
[min, (, k, ,, sequence, ., length, -, 2, ), ;, }, }, if, (, previousRejected, ), {, targetIter, =]
[sequence, ., length, -, 2, ), ;, }, }, if, (, previousRejected, ), {, targetIter, =, FastMath, ., min, (]
[length, -, 2, ), ;, }, }, if, (, previousRejected, ), {, targetIter, =, FastMath, ., min, (, optimalIter, ,]
[), ;, }, }, if, (, previousRejected, ), {, targetIter, =, FastMath, ., min, (, optimalIter, ,, k, ), ;]
[}, }, if, (, previousRejected, ), {, targetIter, =, FastMath, ., min, (, optimalIter, ,, k, ), ;, hNew, =]
[}, }, if, (, previousRejected, ), {, targetIter, =, FastMath, ., min, (, optimalIter, ,, k, ), ;, hNew, =]
[previousRejected, ), {, targetIter, =, FastMath, ., min, (, optimalIter, ,, k, ), ;, hNew, =, FastMath, ., min, (]
[previousRejected, ), {, targetIter, =, FastMath, ., min, (, optimalIter, ,, k, ), ;, hNew, =, FastMath, ., min, (]
[=, FastMath, ., min, (, optimalIter, ,, k, ), ;, hNew, =, FastMath, ., min, (, FastMath, ., abs, (]
[min, (, optimalIter, ,, k, ), ;, hNew, =, FastMath, ., min, (, FastMath, ., abs, (, stepSize, ), ,]
[min, (, optimalIter, ,, k, ), ;, hNew, =, FastMath, ., min, (, FastMath, ., abs, (, stepSize, ), ,]
[optimalIter, ,, k, ), ;, hNew, =, FastMath, ., min, (, FastMath, ., abs, (, stepSize, ), ,, optimalStep, []
[min, (, FastMath, ., abs, (, stepSize, ), ,, optimalStep, [, targetIter, ], ), ;, }, else, {, if, (]
[min, (, FastMath, ., abs, (, stepSize, ), ,, optimalStep, [, targetIter, ], ), ;, }, else, {, if, (]
[FastMath, ., abs, (, stepSize, ), ,, optimalStep, [, targetIter, ], ), ;, }, else, {, if, (, optimalIter, <=]
[(, stepSize, ), ,, optimalStep, [, targetIter, ], ), ;, }, else, {, if, (, optimalIter, <=, k, ), {]
[), ,, optimalStep, [, targetIter, ], ), ;, }, else, {, if, (, optimalIter, <=, k, ), {, hNew, =]
[), ,, optimalStep, [, targetIter, ], ), ;, }, else, {, if, (, optimalIter, <=, k, ), {, hNew, =]
[optimalStep, [, targetIter, ], ), ;, }, else, {, if, (, optimalIter, <=, k, ), {, hNew, =, optimalStep, []
[{, if, (, optimalIter, <=, k, ), {, hNew, =, optimalStep, [, optimalIter, ], ;, }, else, {, if, (]
[{, if, (, optimalIter, <=, k, ), {, hNew, =, optimalStep, [, optimalIter, ], ;, }, else, {, if, (]
[if, (, optimalIter, <=, k, ), {, hNew, =, optimalStep, [, optimalIter, ], ;, }, else, {, if, (, (]
[if, (, optimalIter, <=, k, ), {, hNew, =, optimalStep, [, optimalIter, ], ;, }, else, {, if, (, (]
[optimalIter, <=, k, ), {, hNew, =, optimalStep, [, optimalIter, ], ;, }, else, {, if, (, (, k, <]
[), {, hNew, =, optimalStep, [, optimalIter, ], ;, }, else, {, if, (, (, k, <, targetIter, ), &&]
[{, hNew, =, optimalStep, [, optimalIter, ], ;, }, else, {, if, (, (, k, <, targetIter, ), &&, (]
[{, hNew, =, optimalStep, [, optimalIter, ], ;, }, else, {, if, (, (, k, <, targetIter, ), &&, (]
[{, hNew, =, optimalStep, [, optimalIter, ], ;, }, else, {, if, (, (, k, <, targetIter, ), &&, (]
[=, optimalStep, [, optimalIter, ], ;, }, else, {, if, (, (, k, <, targetIter, ), &&, (, costPerTimeUnit, []
[optimalIter, ], ;, }, else, {, if, (, (, k, <, targetIter, ), &&, (, costPerTimeUnit, [, k, ], <]
[optimalIter, ], ;, }, else, {, if, (, (, k, <, targetIter, ), &&, (, costPerTimeUnit, [, k, ], <]
[;, }, else, {, if, (, (, k, <, targetIter, ), &&, (, costPerTimeUnit, [, k, ], <, orderControl2, *]
[;, }, else, {, if, (, (, k, <, targetIter, ), &&, (, costPerTimeUnit, [, k, ], <, orderControl2, *]
[else, {, if, (, (, k, <, targetIter, ), &&, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, []
[else, {, if, (, (, k, <, targetIter, ), &&, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, []
[if, (, (, k, <, targetIter, ), &&, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -]
[targetIter, ), &&, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), ), {]
[&&, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, hNew, =]
[costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, hNew, =, filterStep, (]
[costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, hNew, =, filterStep, (]
[costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, hNew, =, filterStep, (]
[costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, hNew, =, filterStep, (]
[k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, hNew, =, filterStep, (, optimalStep, []
[orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, hNew, =, filterStep, (, optimalStep, [, k, ], *]
[orderControl2, *, costPerTimeUnit, [, k, -, 1, ], ), ), {, hNew, =, filterStep, (, optimalStep, [, k, ], *]
[costPerTimeUnit, [, k, -, 1, ], ), ), {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, []
[costPerTimeUnit, [, k, -, 1, ], ), ), {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, []
[k, -, 1, ], ), ), {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, +]
[], ), ), {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, +, 1, ], /]
[], ), ), {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, +, 1, ], /]
[), {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, +, 1, ], /, costPerStep, []
[=, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, +, 1, ], /, costPerStep, [, k, ], ,]
[(, optimalStep, [, k, ], *, costPerStep, [, optimalIter, +, 1, ], /, costPerStep, [, k, ], ,, forward, ,]
[costPerStep, [, optimalIter, +, 1, ], /, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, else, {]
[optimalIter, +, 1, ], /, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, else, {, hNew, =]
[1, ], /, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, else, {, hNew, =, filterStep, (]
[1, ], /, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, else, {, hNew, =, filterStep, (]
[1, ], /, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, else, {, hNew, =, filterStep, (]
[1, ], /, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, else, {, hNew, =, filterStep, (]
[/, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, else, {, hNew, =, filterStep, (, optimalStep, []
[k, ], ,, forward, ,, false, ), ;, }, else, {, hNew, =, filterStep, (, optimalStep, [, k, ], *]
[k, ], ,, forward, ,, false, ), ;, }, else, {, hNew, =, filterStep, (, optimalStep, [, k, ], *]
[,, forward, ,, false, ), ;, }, else, {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, []
[false, ), ;, }, else, {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, ], /]
[false, ), ;, }, else, {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, ], /]
[;, }, else, {, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, ], /, costPerStep, []
[{, hNew, =, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, ], /, costPerStep, [, k, ], ,]
[=, filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, ], /, costPerStep, [, k, ], ,, forward, ,]
[k, ], *, costPerStep, [, optimalIter, ], /, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, }]
[*, costPerStep, [, optimalIter, ], /, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, }, targetIter, =]
[optimalIter, ], /, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, }, targetIter, =, optimalIter, ;, }]
[/, costPerStep, [, k, ], ,, forward, ,, false, ), ;, }, }, targetIter, =, optimalIter, ;, }, newStep, =]
[k, ], ,, forward, ,, false, ), ;, }, }, targetIter, =, optimalIter, ;, }, newStep, =, true, ;, }]
[,, forward, ,, false, ), ;, }, }, targetIter, =, optimalIter, ;, }, newStep, =, true, ;, }, hNew, =]
[,, forward, ,, false, ), ;, }, }, targetIter, =, optimalIter, ;, }, newStep, =, true, ;, }, hNew, =]
[), ;, }, }, targetIter, =, optimalIter, ;, }, newStep, =, true, ;, }, hNew, =, FastMath, ., min, (]
[}, }, targetIter, =, optimalIter, ;, }, newStep, =, true, ;, }, hNew, =, FastMath, ., min, (, hNew, ,]
[;, }, newStep, =, true, ;, }, hNew, =, FastMath, ., min, (, hNew, ,, hInt, ), ;, if, (]
[}, newStep, =, true, ;, }, hNew, =, FastMath, ., min, (, hNew, ,, hInt, ), ;, if, (, !]
[true, ;, }, hNew, =, FastMath, ., min, (, hNew, ,, hInt, ), ;, if, (, !, forward, ), {]
[}, hNew, =, FastMath, ., min, (, hNew, ,, hInt, ), ;, if, (, !, forward, ), {, hNew, =]
[hNew, =, FastMath, ., min, (, hNew, ,, hInt, ), ;, if, (, !, forward, ), {, hNew, =, -]
[., min, (, hNew, ,, hInt, ), ;, if, (, !, forward, ), {, hNew, =, -, hNew, ;, }]
[(, hNew, ,, hInt, ), ;, if, (, !, forward, ), {, hNew, =, -, hNew, ;, }, firstTime, =]
[), ;, if, (, !, forward, ), {, hNew, =, -, hNew, ;, }, firstTime, =, false, ;, if, (]
[(, !, forward, ), {, hNew, =, -, hNew, ;, }, firstTime, =, false, ;, if, (, reject, ), {]
[forward, ), {, hNew, =, -, hNew, ;, }, firstTime, =, false, ;, if, (, reject, ), {, isLastStep, =]
[{, hNew, =, -, hNew, ;, }, firstTime, =, false, ;, if, (, reject, ), {, isLastStep, =, false, ;]
[=, -, hNew, ;, }, firstTime, =, false, ;, if, (, reject, ), {, isLastStep, =, false, ;, previousRejected, =]
[firstTime, =, false, ;, if, (, reject, ), {, isLastStep, =, false, ;, previousRejected, =, true, ;, }, else, {]
[false, ;, if, (, reject, ), {, isLastStep, =, false, ;, previousRejected, =, true, ;, }, else, {, previousRejected, =]
[{, isLastStep, =, false, ;, previousRejected, =, true, ;, }, else, {, previousRejected, =, false, ;, }, }, while, (]
[isLastStep, =, false, ;, previousRejected, =, true, ;, }, else, {, previousRejected, =, false, ;, }, }, while, (, !]
[;, previousRejected, =, true, ;, }, else, {, previousRejected, =, false, ;, }, }, while, (, !, isLastStep, ), ;]
[;, previousRejected, =, true, ;, }, else, {, previousRejected, =, false, ;, }, }, while, (, !, isLastStep, ), ;]
[;, }, else, {, previousRejected, =, false, ;, }, }, while, (, !, isLastStep, ), ;, equations, ., setTime, (]
[{, previousRejected, =, false, ;, }, }, while, (, !, isLastStep, ), ;, equations, ., setTime, (, stepStart, ), ;]
[{, previousRejected, =, false, ;, }, }, while, (, !, isLastStep, ), ;, equations, ., setTime, (, stepStart, ), ;]
[;, }, }, while, (, !, isLastStep, ), ;, equations, ., setTime, (, stepStart, ), ;, equations, ., setCompleteState, (]
[while, (, !, isLastStep, ), ;, equations, ., setTime, (, stepStart, ), ;, equations, ., setCompleteState, (, y, ), ;]
