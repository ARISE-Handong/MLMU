[;, import, java, ., util, ., Set, ;, public, class, FunctionType, extends, PrototypeObjectType, {, private, static, final, long, serialVersionUID, =]
[;, private, PropAccess, propAccess, ;, private, JSType, typeOfThis, ;, private, Node, source, ;, private, List, <, ObjectType, >, implementedInterfaces, =]
[;, private, PropAccess, propAccess, ;, private, JSType, typeOfThis, ;, private, Node, source, ;, private, List, <, ObjectType, >, implementedInterfaces, =]
[private, List, <, ObjectType, >, implementedInterfaces, =, ImmutableList, ., of, (, ), ;, private, List, <, ObjectType, >, extendedInterfaces, =]
[private, List, <, ObjectType, >, implementedInterfaces, =, ImmutableList, ., of, (, ), ;, private, List, <, ObjectType, >, extendedInterfaces, =]
[arrowType, ,, JSType, typeOfThis, ,, ImmutableList, <, String, >, templateKeys, ,, boolean, isConstructor, ,, boolean, nativeType, ), {, super, (]
[JSType, typeOfThis, ,, ImmutableList, <, String, >, templateKeys, ,, boolean, isConstructor, ,, boolean, nativeType, ), {, super, (, registry, ,]
[,, ImmutableList, <, String, >, templateKeys, ,, boolean, isConstructor, ,, boolean, nativeType, ), {, super, (, registry, ,, name, ,]
[,, ImmutableList, <, String, >, templateKeys, ,, boolean, isConstructor, ,, boolean, nativeType, ), {, super, (, registry, ,, name, ,]
[>, templateKeys, ,, boolean, isConstructor, ,, boolean, nativeType, ), {, super, (, registry, ,, name, ,, registry, ., getNativeObjectType, (]
[>, templateKeys, ,, boolean, isConstructor, ,, boolean, nativeType, ), {, super, (, registry, ,, name, ,, registry, ., getNativeObjectType, (]
[,, boolean, nativeType, ), {, super, (, registry, ,, name, ,, registry, ., getNativeObjectType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,]
[nativeType, ), {, super, (, registry, ,, name, ,, registry, ., getNativeObjectType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, nativeType, ,]
[{, super, (, registry, ,, name, ,, registry, ., getNativeObjectType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, nativeType, ,, templateKeys, ,]
[registry, ,, name, ,, registry, ., getNativeObjectType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, nativeType, ,, templateKeys, ,, null, ), ;]
[name, ,, registry, ., getNativeObjectType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, nativeType, ,, templateKeys, ,, null, ), ;, setPrettyPrint, (]
[., getNativeObjectType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, nativeType, ,, templateKeys, ,, null, ), ;, setPrettyPrint, (, true, ), ;]
[., getNativeObjectType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, nativeType, ,, templateKeys, ,, null, ), ;, setPrettyPrint, (, true, ), ;]
[., FUNCTION_INSTANCE_TYPE, ), ,, nativeType, ,, templateKeys, ,, null, ), ;, setPrettyPrint, (, true, ), ;, Preconditions, ., checkArgument, (]
[., FUNCTION_INSTANCE_TYPE, ), ,, nativeType, ,, templateKeys, ,, null, ), ;, setPrettyPrint, (, true, ), ;, Preconditions, ., checkArgument, (]
[., FUNCTION_INSTANCE_TYPE, ), ,, nativeType, ,, templateKeys, ,, null, ), ;, setPrettyPrint, (, true, ), ;, Preconditions, ., checkArgument, (]
[), ,, nativeType, ,, templateKeys, ,, null, ), ;, setPrettyPrint, (, true, ), ;, Preconditions, ., checkArgument, (, source, ==]
[nativeType, ,, templateKeys, ,, null, ), ;, setPrettyPrint, (, true, ), ;, Preconditions, ., checkArgument, (, source, ==, null, ||]
[nativeType, ,, templateKeys, ,, null, ), ;, setPrettyPrint, (, true, ), ;, Preconditions, ., checkArgument, (, source, ==, null, ||]
[nativeType, ,, templateKeys, ,, null, ), ;, setPrettyPrint, (, true, ), ;, Preconditions, ., checkArgument, (, source, ==, null, ||]
[null, ), ;, setPrettyPrint, (, true, ), ;, Preconditions, ., checkArgument, (, source, ==, null, ||, Token, ., FUNCTION, ==]
[null, ), ;, setPrettyPrint, (, true, ), ;, Preconditions, ., checkArgument, (, source, ==, null, ||, Token, ., FUNCTION, ==]
[;, Preconditions, ., checkArgument, (, source, ==, null, ||, Token, ., FUNCTION, ==, source, ., getType, (, ), ), ;]
[;, Preconditions, ., checkArgument, (, source, ==, null, ||, Token, ., FUNCTION, ==, source, ., getType, (, ), ), ;]
[(, source, ==, null, ||, Token, ., FUNCTION, ==, source, ., getType, (, ), ), ;, Preconditions, ., checkNotNull, (]
[null, ||, Token, ., FUNCTION, ==, source, ., getType, (, ), ), ;, Preconditions, ., checkNotNull, (, arrowType, ), ;]
[null, ||, Token, ., FUNCTION, ==, source, ., getType, (, ), ), ;, Preconditions, ., checkNotNull, (, arrowType, ), ;]
[FUNCTION, ==, source, ., getType, (, ), ), ;, Preconditions, ., checkNotNull, (, arrowType, ), ;, this, ., source, =]
[getType, (, ), ), ;, Preconditions, ., checkNotNull, (, arrowType, ), ;, this, ., source, =, source, ;, if, (]
[), ;, Preconditions, ., checkNotNull, (, arrowType, ), ;, this, ., source, =, source, ;, if, (, isConstructor, ), {]
[), ;, Preconditions, ., checkNotNull, (, arrowType, ), ;, this, ., source, =, source, ;, if, (, isConstructor, ), {]
[checkNotNull, (, arrowType, ), ;, this, ., source, =, source, ;, if, (, isConstructor, ), {, this, ., kind, =]
[checkNotNull, (, arrowType, ), ;, this, ., source, =, source, ;, if, (, isConstructor, ), {, this, ., kind, =]
[;, this, ., source, =, source, ;, if, (, isConstructor, ), {, this, ., kind, =, Kind, ., CONSTRUCTOR, ;]
[;, this, ., source, =, source, ;, if, (, isConstructor, ), {, this, ., kind, =, Kind, ., CONSTRUCTOR, ;]
[=, source, ;, if, (, isConstructor, ), {, this, ., kind, =, Kind, ., CONSTRUCTOR, ;, this, ., propAccess, =]
[=, source, ;, if, (, isConstructor, ), {, this, ., kind, =, Kind, ., CONSTRUCTOR, ;, this, ., propAccess, =]
[(, isConstructor, ), {, this, ., kind, =, Kind, ., CONSTRUCTOR, ;, this, ., propAccess, =, PropAccess, ., ANY, ;]
[(, isConstructor, ), {, this, ., kind, =, Kind, ., CONSTRUCTOR, ;, this, ., propAccess, =, PropAccess, ., ANY, ;]
[this, ., kind, =, Kind, ., CONSTRUCTOR, ;, this, ., propAccess, =, PropAccess, ., ANY, ;, this, ., typeOfThis, =]
[this, ., kind, =, Kind, ., CONSTRUCTOR, ;, this, ., propAccess, =, PropAccess, ., ANY, ;, this, ., typeOfThis, =]
[this, ., kind, =, Kind, ., CONSTRUCTOR, ;, this, ., propAccess, =, PropAccess, ., ANY, ;, this, ., typeOfThis, =]
[kind, =, Kind, ., CONSTRUCTOR, ;, this, ., propAccess, =, PropAccess, ., ANY, ;, this, ., typeOfThis, =, typeOfThis, !=]
[Kind, ., CONSTRUCTOR, ;, this, ., propAccess, =, PropAccess, ., ANY, ;, this, ., typeOfThis, =, typeOfThis, !=, null, ?]
[CONSTRUCTOR, ;, this, ., propAccess, =, PropAccess, ., ANY, ;, this, ., typeOfThis, =, typeOfThis, !=, null, ?, typeOfThis, :]
[., propAccess, =, PropAccess, ., ANY, ;, this, ., typeOfThis, =, typeOfThis, !=, null, ?, typeOfThis, :, new, InstanceObjectType, (]
[=, PropAccess, ., ANY, ;, this, ., typeOfThis, =, typeOfThis, !=, null, ?, typeOfThis, :, new, InstanceObjectType, (, registry, ,]
[., ANY, ;, this, ., typeOfThis, =, typeOfThis, !=, null, ?, typeOfThis, :, new, InstanceObjectType, (, registry, ,, this, ,]
[;, this, ., typeOfThis, =, typeOfThis, !=, null, ?, typeOfThis, :, new, InstanceObjectType, (, registry, ,, this, ,, nativeType, ,]
[!=, null, ?, typeOfThis, :, new, InstanceObjectType, (, registry, ,, this, ,, nativeType, ,, null, ), ;, }, else, {]
[!=, null, ?, typeOfThis, :, new, InstanceObjectType, (, registry, ,, this, ,, nativeType, ,, null, ), ;, }, else, {]
[:, new, InstanceObjectType, (, registry, ,, this, ,, nativeType, ,, null, ), ;, }, else, {, this, ., kind, =]
[:, new, InstanceObjectType, (, registry, ,, this, ,, nativeType, ,, null, ), ;, }, else, {, this, ., kind, =]
[registry, ,, this, ,, nativeType, ,, null, ), ;, }, else, {, this, ., kind, =, Kind, ., ORDINARY, ;]
[registry, ,, this, ,, nativeType, ,, null, ), ;, }, else, {, this, ., kind, =, Kind, ., ORDINARY, ;]
[nativeType, ,, null, ), ;, }, else, {, this, ., kind, =, Kind, ., ORDINARY, ;, this, ., typeOfThis, =]
[nativeType, ,, null, ), ;, }, else, {, this, ., kind, =, Kind, ., ORDINARY, ;, this, ., typeOfThis, =]
[nativeType, ,, null, ), ;, }, else, {, this, ., kind, =, Kind, ., ORDINARY, ;, this, ., typeOfThis, =]
[null, ), ;, }, else, {, this, ., kind, =, Kind, ., ORDINARY, ;, this, ., typeOfThis, =, typeOfThis, !=]
[;, }, else, {, this, ., kind, =, Kind, ., ORDINARY, ;, this, ., typeOfThis, =, typeOfThis, !=, null, ?]
[else, {, this, ., kind, =, Kind, ., ORDINARY, ;, this, ., typeOfThis, =, typeOfThis, !=, null, ?, typeOfThis, :]
[else, {, this, ., kind, =, Kind, ., ORDINARY, ;, this, ., typeOfThis, =, typeOfThis, !=, null, ?, typeOfThis, :]
[kind, =, Kind, ., ORDINARY, ;, this, ., typeOfThis, =, typeOfThis, !=, null, ?, typeOfThis, :, registry, ., getNativeObjectType, (]
[kind, =, Kind, ., ORDINARY, ;, this, ., typeOfThis, =, typeOfThis, !=, null, ?, typeOfThis, :, registry, ., getNativeObjectType, (]
[this, ., typeOfThis, =, typeOfThis, !=, null, ?, typeOfThis, :, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }]
[this, ., typeOfThis, =, typeOfThis, !=, null, ?, typeOfThis, :, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }]
[typeOfThis, !=, null, ?, typeOfThis, :, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, this, ., call, =]
[call, =, arrowType, ;, }, private, FunctionType, (, JSTypeRegistry, registry, ,, String, name, ,, Node, source, ), {, super, (]
[arrowType, ;, }, private, FunctionType, (, JSTypeRegistry, registry, ,, String, name, ,, Node, source, ), {, super, (, registry, ,]
[}, private, FunctionType, (, JSTypeRegistry, registry, ,, String, name, ,, Node, source, ), {, super, (, registry, ,, name, ,]
[}, private, FunctionType, (, JSTypeRegistry, registry, ,, String, name, ,, Node, source, ), {, super, (, registry, ,, name, ,]
[JSTypeRegistry, registry, ,, String, name, ,, Node, source, ), {, super, (, registry, ,, name, ,, registry, ., getNativeObjectType, (]
[JSTypeRegistry, registry, ,, String, name, ,, Node, source, ), {, super, (, registry, ,, name, ,, registry, ., getNativeObjectType, (]
[Node, source, ), {, super, (, registry, ,, name, ,, registry, ., getNativeObjectType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ), ;]
[), {, super, (, registry, ,, name, ,, registry, ., getNativeObjectType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ), ;, setPrettyPrint, (]
[(, registry, ,, name, ,, registry, ., getNativeObjectType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ), ;, setPrettyPrint, (, true, ), ;]
[(, registry, ,, name, ,, registry, ., getNativeObjectType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ), ;, setPrettyPrint, (, true, ), ;]
[,, registry, ., getNativeObjectType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ), ;, setPrettyPrint, (, true, ), ;, Preconditions, ., checkArgument, (]
[,, registry, ., getNativeObjectType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ), ;, setPrettyPrint, (, true, ), ;, Preconditions, ., checkArgument, (]
[,, registry, ., getNativeObjectType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ), ;, setPrettyPrint, (, true, ), ;, Preconditions, ., checkArgument, (]
[., getNativeObjectType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ), ;, setPrettyPrint, (, true, ), ;, Preconditions, ., checkArgument, (, source, ==]
[(, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ), ;, setPrettyPrint, (, true, ), ;, Preconditions, ., checkArgument, (, source, ==, null, ||]
[(, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ), ;, setPrettyPrint, (, true, ), ;, Preconditions, ., checkArgument, (, source, ==, null, ||]
[(, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ), ;, setPrettyPrint, (, true, ), ;, Preconditions, ., checkArgument, (, source, ==, null, ||]
[), ), ;, setPrettyPrint, (, true, ), ;, Preconditions, ., checkArgument, (, source, ==, null, ||, Token, ., FUNCTION, ==]
[), ), ;, setPrettyPrint, (, true, ), ;, Preconditions, ., checkArgument, (, source, ==, null, ||, Token, ., FUNCTION, ==]
[;, Preconditions, ., checkArgument, (, source, ==, null, ||, Token, ., FUNCTION, ==, source, ., getType, (, ), ), ;]
[;, Preconditions, ., checkArgument, (, source, ==, null, ||, Token, ., FUNCTION, ==, source, ., getType, (, ), ), ;]
[(, source, ==, null, ||, Token, ., FUNCTION, ==, source, ., getType, (, ), ), ;, Preconditions, ., checkArgument, (]
[(, source, ==, null, ||, Token, ., FUNCTION, ==, source, ., getType, (, ), ), ;, Preconditions, ., checkArgument, (]
[==, null, ||, Token, ., FUNCTION, ==, source, ., getType, (, ), ), ;, Preconditions, ., checkArgument, (, name, !=]
[Token, ., FUNCTION, ==, source, ., getType, (, ), ), ;, Preconditions, ., checkArgument, (, name, !=, null, ), ;]
[Token, ., FUNCTION, ==, source, ., getType, (, ), ), ;, Preconditions, ., checkArgument, (, name, !=, null, ), ;]
[source, ., getType, (, ), ), ;, Preconditions, ., checkArgument, (, name, !=, null, ), ;, this, ., source, =]
[getType, (, ), ), ;, Preconditions, ., checkArgument, (, name, !=, null, ), ;, this, ., source, =, source, ;]
[getType, (, ), ), ;, Preconditions, ., checkArgument, (, name, !=, null, ), ;, this, ., source, =, source, ;]
[;, Preconditions, ., checkArgument, (, name, !=, null, ), ;, this, ., source, =, source, ;, this, ., call, =]
[checkArgument, (, name, !=, null, ), ;, this, ., source, =, source, ;, this, ., call, =, new, ArrowType, (]
[name, !=, null, ), ;, this, ., source, =, source, ;, this, ., call, =, new, ArrowType, (, registry, ,]
[), ;, this, ., source, =, source, ;, this, ., call, =, new, ArrowType, (, registry, ,, new, Node, (]
[), ;, this, ., source, =, source, ;, this, ., call, =, new, ArrowType, (, registry, ,, new, Node, (]
[=, source, ;, this, ., call, =, new, ArrowType, (, registry, ,, new, Node, (, Token, ., PARAM_LIST, ), ,]
[this, ., call, =, new, ArrowType, (, registry, ,, new, Node, (, Token, ., PARAM_LIST, ), ,, null, ), ;]
[this, ., call, =, new, ArrowType, (, registry, ,, new, Node, (, Token, ., PARAM_LIST, ), ,, null, ), ;]
[new, ArrowType, (, registry, ,, new, Node, (, Token, ., PARAM_LIST, ), ,, null, ), ;, this, ., kind, =]
[new, ArrowType, (, registry, ,, new, Node, (, Token, ., PARAM_LIST, ), ,, null, ), ;, this, ., kind, =]
[,, new, Node, (, Token, ., PARAM_LIST, ), ,, null, ), ;, this, ., kind, =, Kind, ., INTERFACE, ;]
[,, new, Node, (, Token, ., PARAM_LIST, ), ,, null, ), ;, this, ., kind, =, Kind, ., INTERFACE, ;]
[Token, ., PARAM_LIST, ), ,, null, ), ;, this, ., kind, =, Kind, ., INTERFACE, ;, this, ., typeOfThis, =]
[), ,, null, ), ;, this, ., kind, =, Kind, ., INTERFACE, ;, this, ., typeOfThis, =, new, InstanceObjectType, (]
[null, ), ;, this, ., kind, =, Kind, ., INTERFACE, ;, this, ., typeOfThis, =, new, InstanceObjectType, (, registry, ,]
[,, this, ), ;, }, static, FunctionType, forInterface, (, JSTypeRegistry, registry, ,, String, name, ,, Node, source, ), {, return]
[;, }, static, FunctionType, forInterface, (, JSTypeRegistry, registry, ,, String, name, ,, Node, source, ), {, return, new, FunctionType, (]
[static, FunctionType, forInterface, (, JSTypeRegistry, registry, ,, String, name, ,, Node, source, ), {, return, new, FunctionType, (, registry, ,]
[forInterface, (, JSTypeRegistry, registry, ,, String, name, ,, Node, source, ), {, return, new, FunctionType, (, registry, ,, name, ,]
[new, FunctionType, (, registry, ,, name, ,, source, ), ;, }, @, Override, public, boolean, isInstanceType, (, ), {, return]
[new, FunctionType, (, registry, ,, name, ,, source, ), ;, }, @, Override, public, boolean, isInstanceType, (, ), {, return]
[(, registry, ,, name, ,, source, ), ;, }, @, Override, public, boolean, isInstanceType, (, ), {, return, this, ==]
[(, registry, ,, name, ,, source, ), ;, }, @, Override, public, boolean, isInstanceType, (, ), {, return, this, ==]
[,, source, ), ;, }, @, Override, public, boolean, isInstanceType, (, ), {, return, this, ==, registry, ., getNativeType, (]
[return, this, ==, registry, ., getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ;, }, @, Override, public, boolean, isConstructor, (, ), {, return]
[return, this, ==, registry, ., getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ;, }, @, Override, public, boolean, isConstructor, (, ), {, return]
[==, registry, ., getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ;, }, @, Override, public, boolean, isConstructor, (, ), {, return, kind, ==]
[==, registry, ., getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ;, }, @, Override, public, boolean, isConstructor, (, ), {, return, kind, ==]
[(, ), {, return, kind, ==, Kind, ., CONSTRUCTOR, ;, }, @, Override, public, boolean, isInterface, (, ), {, return]
[(, ), {, return, kind, ==, Kind, ., CONSTRUCTOR, ;, }, @, Override, public, boolean, isInterface, (, ), {, return]
[{, return, kind, ==, Kind, ., CONSTRUCTOR, ;, }, @, Override, public, boolean, isInterface, (, ), {, return, kind, ==]
[{, return, kind, ==, Kind, ., CONSTRUCTOR, ;, }, @, Override, public, boolean, isInterface, (, ), {, return, kind, ==]
[(, ), {, return, kind, ==, Kind, ., INTERFACE, ;, }, @, Override, public, boolean, isOrdinaryFunction, (, ), {, return]
[(, ), {, return, kind, ==, Kind, ., INTERFACE, ;, }, @, Override, public, boolean, isOrdinaryFunction, (, ), {, return]
[{, return, kind, ==, Kind, ., INTERFACE, ;, }, @, Override, public, boolean, isOrdinaryFunction, (, ), {, return, kind, ==]
[{, return, kind, ==, Kind, ., INTERFACE, ;, }, @, Override, public, boolean, isOrdinaryFunction, (, ), {, return, kind, ==]
[isOrdinaryFunction, (, ), {, return, kind, ==, Kind, ., ORDINARY, ;, }, public, boolean, makesStructs, (, ), {, if, (]
[(, ), {, return, kind, ==, Kind, ., ORDINARY, ;, }, public, boolean, makesStructs, (, ), {, if, (, !]
[Kind, ., ORDINARY, ;, }, public, boolean, makesStructs, (, ), {, if, (, !, isConstructor, (, ), ), {, return]
[public, boolean, makesStructs, (, ), {, if, (, !, isConstructor, (, ), ), {, return, false, ;, }, if, (]
[public, boolean, makesStructs, (, ), {, if, (, !, isConstructor, (, ), ), {, return, false, ;, }, if, (]
[makesStructs, (, ), {, if, (, !, isConstructor, (, ), ), {, return, false, ;, }, if, (, propAccess, ==]
[makesStructs, (, ), {, if, (, !, isConstructor, (, ), ), {, return, false, ;, }, if, (, propAccess, ==]
[!, isConstructor, (, ), ), {, return, false, ;, }, if, (, propAccess, ==, PropAccess, ., STRUCT, ), {, return]
[return, false, ;, }, if, (, propAccess, ==, PropAccess, ., STRUCT, ), {, return, true, ;, }, FunctionType, superc, =]
[propAccess, ==, PropAccess, ., STRUCT, ), {, return, true, ;, }, FunctionType, superc, =, getSuperClassConstructor, (, ), ;, if, (]
[propAccess, ==, PropAccess, ., STRUCT, ), {, return, true, ;, }, FunctionType, superc, =, getSuperClassConstructor, (, ), ;, if, (]
[propAccess, ==, PropAccess, ., STRUCT, ), {, return, true, ;, }, FunctionType, superc, =, getSuperClassConstructor, (, ), ;, if, (]
[PropAccess, ., STRUCT, ), {, return, true, ;, }, FunctionType, superc, =, getSuperClassConstructor, (, ), ;, if, (, superc, !=]
[STRUCT, ), {, return, true, ;, }, FunctionType, superc, =, getSuperClassConstructor, (, ), ;, if, (, superc, !=, null, &&]
[STRUCT, ), {, return, true, ;, }, FunctionType, superc, =, getSuperClassConstructor, (, ), ;, if, (, superc, !=, null, &&]
[FunctionType, superc, =, getSuperClassConstructor, (, ), ;, if, (, superc, !=, null, &&, superc, ., makesStructs, (, ), ), {]
[), ;, if, (, superc, !=, null, &&, superc, ., makesStructs, (, ), ), {, setStruct, (, ), ;, return]
[superc, !=, null, &&, superc, ., makesStructs, (, ), ), {, setStruct, (, ), ;, return, true, ;, }, return]
[setStruct, (, ), ;, return, true, ;, }, return, false, ;, }, public, boolean, makesDicts, (, ), {, if, (]
[(, ), ;, return, true, ;, }, return, false, ;, }, public, boolean, makesDicts, (, ), {, if, (, !]
[}, return, false, ;, }, public, boolean, makesDicts, (, ), {, if, (, !, isConstructor, (, ), ), {, return]
[public, boolean, makesDicts, (, ), {, if, (, !, isConstructor, (, ), ), {, return, false, ;, }, if, (]
[public, boolean, makesDicts, (, ), {, if, (, !, isConstructor, (, ), ), {, return, false, ;, }, if, (]
[makesDicts, (, ), {, if, (, !, isConstructor, (, ), ), {, return, false, ;, }, if, (, propAccess, ==]
[makesDicts, (, ), {, if, (, !, isConstructor, (, ), ), {, return, false, ;, }, if, (, propAccess, ==]
[!, isConstructor, (, ), ), {, return, false, ;, }, if, (, propAccess, ==, PropAccess, ., DICT, ), {, return]
[return, false, ;, }, if, (, propAccess, ==, PropAccess, ., DICT, ), {, return, true, ;, }, FunctionType, superc, =]
[propAccess, ==, PropAccess, ., DICT, ), {, return, true, ;, }, FunctionType, superc, =, getSuperClassConstructor, (, ), ;, if, (]
[propAccess, ==, PropAccess, ., DICT, ), {, return, true, ;, }, FunctionType, superc, =, getSuperClassConstructor, (, ), ;, if, (]
[propAccess, ==, PropAccess, ., DICT, ), {, return, true, ;, }, FunctionType, superc, =, getSuperClassConstructor, (, ), ;, if, (]
[PropAccess, ., DICT, ), {, return, true, ;, }, FunctionType, superc, =, getSuperClassConstructor, (, ), ;, if, (, superc, !=]
[DICT, ), {, return, true, ;, }, FunctionType, superc, =, getSuperClassConstructor, (, ), ;, if, (, superc, !=, null, &&]
[DICT, ), {, return, true, ;, }, FunctionType, superc, =, getSuperClassConstructor, (, ), ;, if, (, superc, !=, null, &&]
[FunctionType, superc, =, getSuperClassConstructor, (, ), ;, if, (, superc, !=, null, &&, superc, ., makesDicts, (, ), ), {]
[), ;, if, (, superc, !=, null, &&, superc, ., makesDicts, (, ), ), {, setDict, (, ), ;, return]
[superc, !=, null, &&, superc, ., makesDicts, (, ), ), {, setDict, (, ), ;, return, true, ;, }, return]
[), {, setDict, (, ), ;, return, true, ;, }, return, false, ;, }, public, void, setStruct, (, ), {]
[setDict, (, ), ;, return, true, ;, }, return, false, ;, }, public, void, setStruct, (, ), {, propAccess, =]
[setDict, (, ), ;, return, true, ;, }, return, false, ;, }, public, void, setStruct, (, ), {, propAccess, =]
[}, public, void, setStruct, (, ), {, propAccess, =, PropAccess, ., STRUCT, ;, }, public, void, setDict, (, ), {]
[void, setStruct, (, ), {, propAccess, =, PropAccess, ., STRUCT, ;, }, public, void, setDict, (, ), {, propAccess, =]
[void, setStruct, (, ), {, propAccess, =, PropAccess, ., STRUCT, ;, }, public, void, setDict, (, ), {, propAccess, =]
[setDict, (, ), {, propAccess, =, PropAccess, ., DICT, ;, }, @, Override, public, FunctionType, toMaybeFunctionType, (, ), {, return]
[Override, public, FunctionType, toMaybeFunctionType, (, ), {, return, this, ;, }, @, Override, public, boolean, canBeCalled, (, ), {, return]
[@, Override, public, boolean, canBeCalled, (, ), {, return, true, ;, }, public, boolean, hasImplementedInterfaces, (, ), {, if, (]
[Override, public, boolean, canBeCalled, (, ), {, return, true, ;, }, public, boolean, hasImplementedInterfaces, (, ), {, if, (, !]
[Override, public, boolean, canBeCalled, (, ), {, return, true, ;, }, public, boolean, hasImplementedInterfaces, (, ), {, if, (, !]
[true, ;, }, public, boolean, hasImplementedInterfaces, (, ), {, if, (, !, implementedInterfaces, ., isEmpty, (, ), ), {, return]
[(, ), {, if, (, !, implementedInterfaces, ., isEmpty, (, ), ), {, return, true, ;, }, FunctionType, superCtor, =]
[(, ), {, if, (, !, implementedInterfaces, ., isEmpty, (, ), ), {, return, true, ;, }, FunctionType, superCtor, =]
[(, !, implementedInterfaces, ., isEmpty, (, ), ), {, return, true, ;, }, FunctionType, superCtor, =, isConstructor, (, ), ?]
[isEmpty, (, ), ), {, return, true, ;, }, FunctionType, superCtor, =, isConstructor, (, ), ?, getSuperClassConstructor, (, ), :]
[{, return, true, ;, }, FunctionType, superCtor, =, isConstructor, (, ), ?, getSuperClassConstructor, (, ), :, null, ;, if, (]
[{, return, true, ;, }, FunctionType, superCtor, =, isConstructor, (, ), ?, getSuperClassConstructor, (, ), :, null, ;, if, (]
[true, ;, }, FunctionType, superCtor, =, isConstructor, (, ), ?, getSuperClassConstructor, (, ), :, null, ;, if, (, superCtor, !=]
[superCtor, =, isConstructor, (, ), ?, getSuperClassConstructor, (, ), :, null, ;, if, (, superCtor, !=, null, ), {, return]
[superCtor, =, isConstructor, (, ), ?, getSuperClassConstructor, (, ), :, null, ;, if, (, superCtor, !=, null, ), {, return]
[), :, null, ;, if, (, superCtor, !=, null, ), {, return, superCtor, ., hasImplementedInterfaces, (, ), ;, }, return]
[(, ), ;, }, return, false, ;, }, public, Iterable, <, Node, >, getParameters, (, ), {, Node, n, =]
[;, }, public, Iterable, <, Node, >, getParameters, (, ), {, Node, n, =, getParametersNode, (, ), ;, if, (]
[;, }, public, Iterable, <, Node, >, getParameters, (, ), {, Node, n, =, getParametersNode, (, ), ;, if, (]
[public, Iterable, <, Node, >, getParameters, (, ), {, Node, n, =, getParametersNode, (, ), ;, if, (, n, !=]
[>, getParameters, (, ), {, Node, n, =, getParametersNode, (, ), ;, if, (, n, !=, null, ), {, return]
[>, getParameters, (, ), {, Node, n, =, getParametersNode, (, ), ;, if, (, n, !=, null, ), {, return]
[), ;, if, (, n, !=, null, ), {, return, n, ., children, (, ), ;, }, else, {, return]
[), ;, if, (, n, !=, null, ), {, return, n, ., children, (, ), ;, }, else, {, return]
[;, }, else, {, return, Collections, ., emptySet, (, ), ;, }, }, public, Node, getParametersNode, (, ), {, return]
[;, }, else, {, return, Collections, ., emptySet, (, ), ;, }, }, public, Node, getParametersNode, (, ), {, return]
[Node, getParametersNode, (, ), {, return, call, ., parameters, ;, }, public, int, getMinArguments, (, ), {, int, i, =]
[return, call, ., parameters, ;, }, public, int, getMinArguments, (, ), {, int, i, =, 0, ;, int, min, =]
[int, getMinArguments, (, ), {, int, i, =, 0, ;, int, min, =, 0, ;, for, (, Node, n, :]
[int, i, =, 0, ;, int, min, =, 0, ;, for, (, Node, n, :, getParameters, (, ), ), {]
[int, i, =, 0, ;, int, min, =, 0, ;, for, (, Node, n, :, getParameters, (, ), ), {]
[int, min, =, 0, ;, for, (, Node, n, :, getParameters, (, ), ), {, i, ++, ;, if, (]
[int, min, =, 0, ;, for, (, Node, n, :, getParameters, (, ), ), {, i, ++, ;, if, (]
[min, =, 0, ;, for, (, Node, n, :, getParameters, (, ), ), {, i, ++, ;, if, (, !]
[min, =, 0, ;, for, (, Node, n, :, getParameters, (, ), ), {, i, ++, ;, if, (, !]
[Node, n, :, getParameters, (, ), ), {, i, ++, ;, if, (, !, n, ., isOptionalArg, (, ), &&]
[n, :, getParameters, (, ), ), {, i, ++, ;, if, (, !, n, ., isOptionalArg, (, ), &&, !]
[n, :, getParameters, (, ), ), {, i, ++, ;, if, (, !, n, ., isOptionalArg, (, ), &&, !]
[i, ++, ;, if, (, !, n, ., isOptionalArg, (, ), &&, !, n, ., isVarArgs, (, ), ), {]
[;, if, (, !, n, ., isOptionalArg, (, ), &&, !, n, ., isVarArgs, (, ), ), {, min, =]
[., isOptionalArg, (, ), &&, !, n, ., isVarArgs, (, ), ), {, min, =, i, ;, }, }, return]
[{, min, =, i, ;, }, }, return, min, ;, }, public, int, getMaxArguments, (, ), {, Node, params, =]
[}, return, min, ;, }, public, int, getMaxArguments, (, ), {, Node, params, =, getParametersNode, (, ), ;, if, (]
[}, return, min, ;, }, public, int, getMaxArguments, (, ), {, Node, params, =, getParametersNode, (, ), ;, if, (]
[min, ;, }, public, int, getMaxArguments, (, ), {, Node, params, =, getParametersNode, (, ), ;, if, (, params, !=]
[(, ), {, Node, params, =, getParametersNode, (, ), ;, if, (, params, !=, null, ), {, Node, lastParam, =]
[(, ), {, Node, params, =, getParametersNode, (, ), ;, if, (, params, !=, null, ), {, Node, lastParam, =]
[), ;, if, (, params, !=, null, ), {, Node, lastParam, =, params, ., getLastChild, (, ), ;, if, (]
[), ;, if, (, params, !=, null, ), {, Node, lastParam, =, params, ., getLastChild, (, ), ;, if, (]
[), ;, if, (, params, !=, null, ), {, Node, lastParam, =, params, ., getLastChild, (, ), ;, if, (]
[if, (, params, !=, null, ), {, Node, lastParam, =, params, ., getLastChild, (, ), ;, if, (, lastParam, ==]
[params, !=, null, ), {, Node, lastParam, =, params, ., getLastChild, (, ), ;, if, (, lastParam, ==, null, ||]
[!=, null, ), {, Node, lastParam, =, params, ., getLastChild, (, ), ;, if, (, lastParam, ==, null, ||, !]
[!=, null, ), {, Node, lastParam, =, params, ., getLastChild, (, ), ;, if, (, lastParam, ==, null, ||, !]
[., getLastChild, (, ), ;, if, (, lastParam, ==, null, ||, !, lastParam, ., isVarArgs, (, ), ), {, return]
[., getLastChild, (, ), ;, if, (, lastParam, ==, null, ||, !, lastParam, ., isVarArgs, (, ), ), {, return]
[null, ||, !, lastParam, ., isVarArgs, (, ), ), {, return, params, ., getChildCount, (, ), ;, }, }, return]
[null, ||, !, lastParam, ., isVarArgs, (, ), ), {, return, params, ., getChildCount, (, ), ;, }, }, return]
[., getChildCount, (, ), ;, }, }, return, Integer, ., MAX_VALUE, ;, }, public, JSType, getReturnType, (, ), {, return]
[., getChildCount, (, ), ;, }, }, return, Integer, ., MAX_VALUE, ;, }, public, JSType, getReturnType, (, ), {, return]
[}, public, JSType, getReturnType, (, ), {, return, call, ., returnType, ;, }, public, boolean, isReturnTypeInferred, (, ), {, return]
[}, public, JSType, getReturnType, (, ), {, return, call, ., returnType, ;, }, public, boolean, isReturnTypeInferred, (, ), {, return]
[;, }, public, boolean, isReturnTypeInferred, (, ), {, return, call, ., returnTypeInferred, ;, }, ArrowType, getInternalArrowType, (, ), {, return]
[getInternalArrowType, (, ), {, return, call, ;, }, @, Override, public, Property, getSlot, (, String, name, ), {, if, (]
[getInternalArrowType, (, ), {, return, call, ;, }, @, Override, public, Property, getSlot, (, String, name, ), {, if, (]
[return, call, ;, }, @, Override, public, Property, getSlot, (, String, name, ), {, if, (, "prototype", ., equals, (]
[@, Override, public, Property, getSlot, (, String, name, ), {, if, (, "prototype", ., equals, (, name, ), ), {]
[(, String, name, ), {, if, (, "prototype", ., equals, (, name, ), ), {, getPrototype, (, ), ;, return]
[(, "prototype", ., equals, (, name, ), ), {, getPrototype, (, ), ;, return, prototypeSlot, ;, }, else, {, return]
[(, "prototype", ., equals, (, name, ), ), {, getPrototype, (, ), ;, return, prototypeSlot, ;, }, else, {, return]
[(, name, ), ), {, getPrototype, (, ), ;, return, prototypeSlot, ;, }, else, {, return, super, ., getSlot, (]
[getSlot, (, name, ), ;, }, }, @, Override, public, Set, <, String, >, getOwnPropertyNames, (, ), {, if, (]
[getSlot, (, name, ), ;, }, }, @, Override, public, Set, <, String, >, getOwnPropertyNames, (, ), {, if, (]
[name, ), ;, }, }, @, Override, public, Set, <, String, >, getOwnPropertyNames, (, ), {, if, (, prototypeSlot, ==]
[}, @, Override, public, Set, <, String, >, getOwnPropertyNames, (, ), {, if, (, prototypeSlot, ==, null, ), {, return]
[}, @, Override, public, Set, <, String, >, getOwnPropertyNames, (, ), {, if, (, prototypeSlot, ==, null, ), {, return]
[==, null, ), {, return, super, ., getOwnPropertyNames, (, ), ;, }, else, {, Set, <, String, >, names, =]
[==, null, ), {, return, super, ., getOwnPropertyNames, (, ), ;, }, else, {, Set, <, String, >, names, =]
[return, super, ., getOwnPropertyNames, (, ), ;, }, else, {, Set, <, String, >, names, =, Sets, ., newHashSet, (]
[getOwnPropertyNames, (, ), ;, }, else, {, Set, <, String, >, names, =, Sets, ., newHashSet, (, "prototype", ), ;]
[getOwnPropertyNames, (, ), ;, }, else, {, Set, <, String, >, names, =, Sets, ., newHashSet, (, "prototype", ), ;]
[}, else, {, Set, <, String, >, names, =, Sets, ., newHashSet, (, "prototype", ), ;, names, ., addAll, (]
[}, else, {, Set, <, String, >, names, =, Sets, ., newHashSet, (, "prototype", ), ;, names, ., addAll, (]
[=, Sets, ., newHashSet, (, "prototype", ), ;, names, ., addAll, (, super, ., getOwnPropertyNames, (, ), ), ;, return]
[super, ., getOwnPropertyNames, (, ), ), ;, return, names, ;, }, }, public, ObjectType, getPrototype, (, ), {, if, (]
[super, ., getOwnPropertyNames, (, ), ), ;, return, names, ;, }, }, public, ObjectType, getPrototype, (, ), {, if, (]
[getOwnPropertyNames, (, ), ), ;, return, names, ;, }, }, public, ObjectType, getPrototype, (, ), {, if, (, prototypeSlot, ==]
[names, ;, }, }, public, ObjectType, getPrototype, (, ), {, if, (, prototypeSlot, ==, null, ), {, String, refName, =]
[getPrototype, (, ), {, if, (, prototypeSlot, ==, null, ), {, String, refName, =, getReferenceName, (, ), ;, if, (]
[getPrototype, (, ), {, if, (, prototypeSlot, ==, null, ), {, String, refName, =, getReferenceName, (, ), ;, if, (]
[), {, if, (, prototypeSlot, ==, null, ), {, String, refName, =, getReferenceName, (, ), ;, if, (, refName, ==]
[(, prototypeSlot, ==, null, ), {, String, refName, =, getReferenceName, (, ), ;, if, (, refName, ==, null, ), {]
[==, null, ), {, String, refName, =, getReferenceName, (, ), ;, if, (, refName, ==, null, ), {, setPrototypeNoCheck, (]
[==, null, ), {, String, refName, =, getReferenceName, (, ), ;, if, (, refName, ==, null, ), {, setPrototypeNoCheck, (]
[String, refName, =, getReferenceName, (, ), ;, if, (, refName, ==, null, ), {, setPrototypeNoCheck, (, registry, ., getNativeObjectType, (]
[String, refName, =, getReferenceName, (, ), ;, if, (, refName, ==, null, ), {, setPrototypeNoCheck, (, registry, ., getNativeObjectType, (]
[), ;, if, (, refName, ==, null, ), {, setPrototypeNoCheck, (, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ,]
[null, ), {, setPrototypeNoCheck, (, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ,, null, ), ;, }, else, {]
[{, setPrototypeNoCheck, (, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ,, null, ), ;, }, else, {, setPrototype, (]
[registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ,, null, ), ;, }, else, {, setPrototype, (, new, PrototypeObjectType, (]
[getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ,, null, ), ;, }, else, {, setPrototype, (, new, PrototypeObjectType, (, registry, ,]
[getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ,, null, ), ;, }, else, {, setPrototype, (, new, PrototypeObjectType, (, registry, ,]
[UNKNOWN_TYPE, ), ,, null, ), ;, }, else, {, setPrototype, (, new, PrototypeObjectType, (, registry, ,, getReferenceName, (, ), +]
[,, null, ), ;, }, else, {, setPrototype, (, new, PrototypeObjectType, (, registry, ,, getReferenceName, (, ), +, ".prototype", ,]
[,, null, ), ;, }, else, {, setPrototype, (, new, PrototypeObjectType, (, registry, ,, getReferenceName, (, ), +, ".prototype", ,]
[}, else, {, setPrototype, (, new, PrototypeObjectType, (, registry, ,, getReferenceName, (, ), +, ".prototype", ,, registry, ., getNativeObjectType, (]
[setPrototype, (, new, PrototypeObjectType, (, registry, ,, getReferenceName, (, ), +, ".prototype", ,, registry, ., getNativeObjectType, (, OBJECT_TYPE, ), ,]
[(, registry, ,, getReferenceName, (, ), +, ".prototype", ,, registry, ., getNativeObjectType, (, OBJECT_TYPE, ), ,, isNativeObjectType, (, ), ,]
[,, getReferenceName, (, ), +, ".prototype", ,, registry, ., getNativeObjectType, (, OBJECT_TYPE, ), ,, isNativeObjectType, (, ), ,, null, ,]
[), +, ".prototype", ,, registry, ., getNativeObjectType, (, OBJECT_TYPE, ), ,, isNativeObjectType, (, ), ,, null, ,, null, ), ,]
[getNativeObjectType, (, OBJECT_TYPE, ), ,, isNativeObjectType, (, ), ,, null, ,, null, ), ,, null, ), ;, }, }, return]
[), ,, isNativeObjectType, (, ), ,, null, ,, null, ), ,, null, ), ;, }, }, return, (, ObjectType, )]
[), ,, isNativeObjectType, (, ), ,, null, ,, null, ), ,, null, ), ;, }, }, return, (, ObjectType, )]
[}, return, (, ObjectType, ), prototypeSlot, ., getType, (, ), ;, }, public, void, setPrototypeBasedOn, (, ObjectType, baseType, ), {]
[(, ObjectType, ), prototypeSlot, ., getType, (, ), ;, }, public, void, setPrototypeBasedOn, (, ObjectType, baseType, ), {, setPrototypeBasedOn, (]
[), prototypeSlot, ., getType, (, ), ;, }, public, void, setPrototypeBasedOn, (, ObjectType, baseType, ), {, setPrototypeBasedOn, (, baseType, ,]
[setPrototypeBasedOn, (, baseType, ,, null, ), ;, }, void, setPrototypeBasedOn, (, ObjectType, baseType, ,, Node, propertyNode, ), {, if, (]
[setPrototypeBasedOn, (, baseType, ,, null, ), ;, }, void, setPrototypeBasedOn, (, ObjectType, baseType, ,, Node, propertyNode, ), {, if, (]
[setPrototypeBasedOn, (, baseType, ,, null, ), ;, }, void, setPrototypeBasedOn, (, ObjectType, baseType, ,, Node, propertyNode, ), {, if, (]
[setPrototypeBasedOn, (, baseType, ,, null, ), ;, }, void, setPrototypeBasedOn, (, ObjectType, baseType, ,, Node, propertyNode, ), {, if, (]
[;, }, void, setPrototypeBasedOn, (, ObjectType, baseType, ,, Node, propertyNode, ), {, if, (, baseType, ., hasReferenceName, (, ), ||]
[(, ObjectType, baseType, ,, Node, propertyNode, ), {, if, (, baseType, ., hasReferenceName, (, ), ||, isNativeObjectType, (, ), ||]
[(, ObjectType, baseType, ,, Node, propertyNode, ), {, if, (, baseType, ., hasReferenceName, (, ), ||, isNativeObjectType, (, ), ||]
[{, if, (, baseType, ., hasReferenceName, (, ), ||, isNativeObjectType, (, ), ||, baseType, ., isFunctionPrototypeType, (, ), ), {]
[(, baseType, ., hasReferenceName, (, ), ||, isNativeObjectType, (, ), ||, baseType, ., isFunctionPrototypeType, (, ), ), {, baseType, =]
[hasReferenceName, (, ), ||, isNativeObjectType, (, ), ||, baseType, ., isFunctionPrototypeType, (, ), ), {, baseType, =, new, PrototypeObjectType, (]
[), ||, isNativeObjectType, (, ), ||, baseType, ., isFunctionPrototypeType, (, ), ), {, baseType, =, new, PrototypeObjectType, (, registry, ,]
[), ||, isNativeObjectType, (, ), ||, baseType, ., isFunctionPrototypeType, (, ), ), {, baseType, =, new, PrototypeObjectType, (, registry, ,]
[), ||, baseType, ., isFunctionPrototypeType, (, ), ), {, baseType, =, new, PrototypeObjectType, (, registry, ,, getReferenceName, (, ), +]
[baseType, ., isFunctionPrototypeType, (, ), ), {, baseType, =, new, PrototypeObjectType, (, registry, ,, getReferenceName, (, ), +, ".prototype", ,]
[), ), {, baseType, =, new, PrototypeObjectType, (, registry, ,, getReferenceName, (, ), +, ".prototype", ,, baseType, ), ;, }]
[{, baseType, =, new, PrototypeObjectType, (, registry, ,, getReferenceName, (, ), +, ".prototype", ,, baseType, ), ;, }, setPrototype, (]
[=, new, PrototypeObjectType, (, registry, ,, getReferenceName, (, ), +, ".prototype", ,, baseType, ), ;, }, setPrototype, (, baseType, ,]
[setPrototype, (, baseType, ,, propertyNode, ), ;, }, boolean, setPrototype, (, ObjectType, prototype, ,, Node, propertyNode, ), {, if, (]
[setPrototype, (, baseType, ,, propertyNode, ), ;, }, boolean, setPrototype, (, ObjectType, prototype, ,, Node, propertyNode, ), {, if, (]
[baseType, ,, propertyNode, ), ;, }, boolean, setPrototype, (, ObjectType, prototype, ,, Node, propertyNode, ), {, if, (, prototype, ==]
[;, }, boolean, setPrototype, (, ObjectType, prototype, ,, Node, propertyNode, ), {, if, (, prototype, ==, null, ), {, return]
[ObjectType, prototype, ,, Node, propertyNode, ), {, if, (, prototype, ==, null, ), {, return, false, ;, }, if, (]
[ObjectType, prototype, ,, Node, propertyNode, ), {, if, (, prototype, ==, null, ), {, return, false, ;, }, if, (]
[propertyNode, ), {, if, (, prototype, ==, null, ), {, return, false, ;, }, if, (, isConstructor, (, ), &&]
[propertyNode, ), {, if, (, prototype, ==, null, ), {, return, false, ;, }, if, (, isConstructor, (, ), &&]
[{, if, (, prototype, ==, null, ), {, return, false, ;, }, if, (, isConstructor, (, ), &&, prototype, ==]
[), {, return, false, ;, }, if, (, isConstructor, (, ), &&, prototype, ==, getInstanceType, (, ), ), {, return]
[;, }, if, (, isConstructor, (, ), &&, prototype, ==, getInstanceType, (, ), ), {, return, false, ;, }, return]
[if, (, isConstructor, (, ), &&, prototype, ==, getInstanceType, (, ), ), {, return, false, ;, }, return, setPrototypeNoCheck, (]
[isConstructor, (, ), &&, prototype, ==, getInstanceType, (, ), ), {, return, false, ;, }, return, setPrototypeNoCheck, (, prototype, ,]
[prototype, ,, propertyNode, ), ;, }, private, boolean, setPrototypeNoCheck, (, ObjectType, prototype, ,, Node, propertyNode, ), {, ObjectType, oldPrototype, =]
[prototype, ,, propertyNode, ), ;, }, private, boolean, setPrototypeNoCheck, (, ObjectType, prototype, ,, Node, propertyNode, ), {, ObjectType, oldPrototype, =]
[prototype, ,, propertyNode, ), ;, }, private, boolean, setPrototypeNoCheck, (, ObjectType, prototype, ,, Node, propertyNode, ), {, ObjectType, oldPrototype, =]
[propertyNode, ), ;, }, private, boolean, setPrototypeNoCheck, (, ObjectType, prototype, ,, Node, propertyNode, ), {, ObjectType, oldPrototype, =, prototypeSlot, ==]
[;, }, private, boolean, setPrototypeNoCheck, (, ObjectType, prototype, ,, Node, propertyNode, ), {, ObjectType, oldPrototype, =, prototypeSlot, ==, null, ?]
[private, boolean, setPrototypeNoCheck, (, ObjectType, prototype, ,, Node, propertyNode, ), {, ObjectType, oldPrototype, =, prototypeSlot, ==, null, ?, null, :]
[(, ObjectType, prototype, ,, Node, propertyNode, ), {, ObjectType, oldPrototype, =, prototypeSlot, ==, null, ?, null, :, (, ObjectType, )]
[(, ObjectType, prototype, ,, Node, propertyNode, ), {, ObjectType, oldPrototype, =, prototypeSlot, ==, null, ?, null, :, (, ObjectType, )]
[oldPrototype, =, prototypeSlot, ==, null, ?, null, :, (, ObjectType, ), prototypeSlot, ., getType, (, ), ;, boolean, replacedPrototype, =]
[oldPrototype, =, prototypeSlot, ==, null, ?, null, :, (, ObjectType, ), prototypeSlot, ., getType, (, ), ;, boolean, replacedPrototype, =]
[prototypeSlot, ==, null, ?, null, :, (, ObjectType, ), prototypeSlot, ., getType, (, ), ;, boolean, replacedPrototype, =, oldPrototype, !=]
[null, ?, null, :, (, ObjectType, ), prototypeSlot, ., getType, (, ), ;, boolean, replacedPrototype, =, oldPrototype, !=, null, ;]
[null, ?, null, :, (, ObjectType, ), prototypeSlot, ., getType, (, ), ;, boolean, replacedPrototype, =, oldPrototype, !=, null, ;]
[(, ObjectType, ), prototypeSlot, ., getType, (, ), ;, boolean, replacedPrototype, =, oldPrototype, !=, null, ;, this, ., prototypeSlot, =]
[prototypeSlot, ., getType, (, ), ;, boolean, replacedPrototype, =, oldPrototype, !=, null, ;, this, ., prototypeSlot, =, new, Property, (]
[getType, (, ), ;, boolean, replacedPrototype, =, oldPrototype, !=, null, ;, this, ., prototypeSlot, =, new, Property, (, "prototype", ,]
[), ;, boolean, replacedPrototype, =, oldPrototype, !=, null, ;, this, ., prototypeSlot, =, new, Property, (, "prototype", ,, prototype, ,]
[boolean, replacedPrototype, =, oldPrototype, !=, null, ;, this, ., prototypeSlot, =, new, Property, (, "prototype", ,, prototype, ,, true, ,]
[boolean, replacedPrototype, =, oldPrototype, !=, null, ;, this, ., prototypeSlot, =, new, Property, (, "prototype", ,, prototype, ,, true, ,]
[boolean, replacedPrototype, =, oldPrototype, !=, null, ;, this, ., prototypeSlot, =, new, Property, (, "prototype", ,, prototype, ,, true, ,]
[=, oldPrototype, !=, null, ;, this, ., prototypeSlot, =, new, Property, (, "prototype", ,, prototype, ,, true, ,, propertyNode, ==]
[!=, null, ;, this, ., prototypeSlot, =, new, Property, (, "prototype", ,, prototype, ,, true, ,, propertyNode, ==, null, ?]
[;, this, ., prototypeSlot, =, new, Property, (, "prototype", ,, prototype, ,, true, ,, propertyNode, ==, null, ?, source, :]
[prototypeSlot, =, new, Property, (, "prototype", ,, prototype, ,, true, ,, propertyNode, ==, null, ?, source, :, propertyNode, ), ;]
[prototypeSlot, =, new, Property, (, "prototype", ,, prototype, ,, true, ,, propertyNode, ==, null, ?, source, :, propertyNode, ), ;]
[(, "prototype", ,, prototype, ,, true, ,, propertyNode, ==, null, ?, source, :, propertyNode, ), ;, prototype, ., setOwnerFunction, (]
[true, ,, propertyNode, ==, null, ?, source, :, propertyNode, ), ;, prototype, ., setOwnerFunction, (, this, ), ;, if, (]
[true, ,, propertyNode, ==, null, ?, source, :, propertyNode, ), ;, prototype, ., setOwnerFunction, (, this, ), ;, if, (]
[propertyNode, ==, null, ?, source, :, propertyNode, ), ;, prototype, ., setOwnerFunction, (, this, ), ;, if, (, oldPrototype, !=]
[?, source, :, propertyNode, ), ;, prototype, ., setOwnerFunction, (, this, ), ;, if, (, oldPrototype, !=, null, ), {]
[?, source, :, propertyNode, ), ;, prototype, ., setOwnerFunction, (, this, ), ;, if, (, oldPrototype, !=, null, ), {]
[), ;, prototype, ., setOwnerFunction, (, this, ), ;, if, (, oldPrototype, !=, null, ), {, oldPrototype, ., setOwnerFunction, (]
[this, ), ;, if, (, oldPrototype, !=, null, ), {, oldPrototype, ., setOwnerFunction, (, null, ), ;, }, if, (]
[this, ), ;, if, (, oldPrototype, !=, null, ), {, oldPrototype, ., setOwnerFunction, (, null, ), ;, }, if, (]
[(, oldPrototype, !=, null, ), {, oldPrototype, ., setOwnerFunction, (, null, ), ;, }, if, (, isConstructor, (, ), ||]
[setOwnerFunction, (, null, ), ;, }, if, (, isConstructor, (, ), ||, isInterface, (, ), ), {, FunctionType, superClass, =]
[if, (, isConstructor, (, ), ||, isInterface, (, ), ), {, FunctionType, superClass, =, getSuperClassConstructor, (, ), ;, if, (]
[if, (, isConstructor, (, ), ||, isInterface, (, ), ), {, FunctionType, superClass, =, getSuperClassConstructor, (, ), ;, if, (]
[isConstructor, (, ), ||, isInterface, (, ), ), {, FunctionType, superClass, =, getSuperClassConstructor, (, ), ;, if, (, superClass, !=]
[||, isInterface, (, ), ), {, FunctionType, superClass, =, getSuperClassConstructor, (, ), ;, if, (, superClass, !=, null, ), {]
[||, isInterface, (, ), ), {, FunctionType, superClass, =, getSuperClassConstructor, (, ), ;, if, (, superClass, !=, null, ), {]
[), {, FunctionType, superClass, =, getSuperClassConstructor, (, ), ;, if, (, superClass, !=, null, ), {, superClass, ., addSubType, (]
[(, ), ;, if, (, superClass, !=, null, ), {, superClass, ., addSubType, (, this, ), ;, }, if, (]
[superClass, ., addSubType, (, this, ), ;, }, if, (, isInterface, (, ), ), {, for, (, ObjectType, interfaceType, :]
[}, if, (, isInterface, (, ), ), {, for, (, ObjectType, interfaceType, :, getExtendedInterfaces, (, ), ), {, if, (]
[}, if, (, isInterface, (, ), ), {, for, (, ObjectType, interfaceType, :, getExtendedInterfaces, (, ), ), {, if, (]
[}, if, (, isInterface, (, ), ), {, for, (, ObjectType, interfaceType, :, getExtendedInterfaces, (, ), ), {, if, (]
[), {, for, (, ObjectType, interfaceType, :, getExtendedInterfaces, (, ), ), {, if, (, interfaceType, ., getConstructor, (, ), !=]
[(, ObjectType, interfaceType, :, getExtendedInterfaces, (, ), ), {, if, (, interfaceType, ., getConstructor, (, ), !=, null, ), {]
[(, ObjectType, interfaceType, :, getExtendedInterfaces, (, ), ), {, if, (, interfaceType, ., getConstructor, (, ), !=, null, ), {]
[(, ObjectType, interfaceType, :, getExtendedInterfaces, (, ), ), {, if, (, interfaceType, ., getConstructor, (, ), !=, null, ), {]
[{, if, (, interfaceType, ., getConstructor, (, ), !=, null, ), {, interfaceType, ., getConstructor, (, ), ., addSubType, (]
[null, ), {, interfaceType, ., getConstructor, (, ), ., addSubType, (, this, ), ;, }, }, }, }, if, (]
[interfaceType, ., getConstructor, (, ), ., addSubType, (, this, ), ;, }, }, }, }, if, (, replacedPrototype, ), {]
[addSubType, (, this, ), ;, }, }, }, }, if, (, replacedPrototype, ), {, clearCachedValues, (, ), ;, }, return]
[}, return, true, ;, }, public, Iterable, <, ObjectType, >, getAllImplementedInterfaces, (, ), {, Set, <, ObjectType, >, interfaces, =]
[}, return, true, ;, }, public, Iterable, <, ObjectType, >, getAllImplementedInterfaces, (, ), {, Set, <, ObjectType, >, interfaces, =]
[(, ), {, Set, <, ObjectType, >, interfaces, =, Sets, ., newLinkedHashSet, (, ), ;, for, (, ObjectType, type, :]
[ObjectType, >, interfaces, =, Sets, ., newLinkedHashSet, (, ), ;, for, (, ObjectType, type, :, getImplementedInterfaces, (, ), ), {]
[interfaces, =, Sets, ., newLinkedHashSet, (, ), ;, for, (, ObjectType, type, :, getImplementedInterfaces, (, ), ), {, addRelatedInterfaces, (]
[Sets, ., newLinkedHashSet, (, ), ;, for, (, ObjectType, type, :, getImplementedInterfaces, (, ), ), {, addRelatedInterfaces, (, type, ,]
[;, for, (, ObjectType, type, :, getImplementedInterfaces, (, ), ), {, addRelatedInterfaces, (, type, ,, interfaces, ), ;, }, return]
[interfaces, ;, }, private, void, addRelatedInterfaces, (, ObjectType, instance, ,, Set, <, ObjectType, >, set, ), {, FunctionType, constructor, =]
[interfaces, ;, }, private, void, addRelatedInterfaces, (, ObjectType, instance, ,, Set, <, ObjectType, >, set, ), {, FunctionType, constructor, =]
[instance, ,, Set, <, ObjectType, >, set, ), {, FunctionType, constructor, =, instance, ., getConstructor, (, ), ;, if, (]
[instance, ,, Set, <, ObjectType, >, set, ), {, FunctionType, constructor, =, instance, ., getConstructor, (, ), ;, if, (]
[Set, <, ObjectType, >, set, ), {, FunctionType, constructor, =, instance, ., getConstructor, (, ), ;, if, (, constructor, !=]
[), {, FunctionType, constructor, =, instance, ., getConstructor, (, ), ;, if, (, constructor, !=, null, ), {, if, (]
[{, FunctionType, constructor, =, instance, ., getConstructor, (, ), ;, if, (, constructor, !=, null, ), {, if, (, !]
[{, FunctionType, constructor, =, instance, ., getConstructor, (, ), ;, if, (, constructor, !=, null, ), {, if, (, !]
[if, (, constructor, !=, null, ), {, if, (, !, constructor, ., isInterface, (, ), ), {, return, ;, }]
[if, (, constructor, !=, null, ), {, if, (, !, constructor, ., isInterface, (, ), ), {, return, ;, }]
[null, ), {, if, (, !, constructor, ., isInterface, (, ), ), {, return, ;, }, set, ., add, (]
[isInterface, (, ), ), {, return, ;, }, set, ., add, (, instance, ), ;, for, (, ObjectType, interfaceType, :]
[isInterface, (, ), ), {, return, ;, }, set, ., add, (, instance, ), ;, for, (, ObjectType, interfaceType, :]
[}, set, ., add, (, instance, ), ;, for, (, ObjectType, interfaceType, :, instance, ., getCtorExtendedInterfaces, (, ), ), {]
[., add, (, instance, ), ;, for, (, ObjectType, interfaceType, :, instance, ., getCtorExtendedInterfaces, (, ), ), {, addRelatedInterfaces, (]
[(, instance, ), ;, for, (, ObjectType, interfaceType, :, instance, ., getCtorExtendedInterfaces, (, ), ), {, addRelatedInterfaces, (, interfaceType, ,]
[interfaceType, ,, set, ), ;, }, }, }, public, Iterable, <, ObjectType, >, getImplementedInterfaces, (, ), {, FunctionType, superCtor, =]
[interfaceType, ,, set, ), ;, }, }, }, public, Iterable, <, ObjectType, >, getImplementedInterfaces, (, ), {, FunctionType, superCtor, =]
[;, }, }, }, public, Iterable, <, ObjectType, >, getImplementedInterfaces, (, ), {, FunctionType, superCtor, =, isConstructor, (, ), ?]
[public, Iterable, <, ObjectType, >, getImplementedInterfaces, (, ), {, FunctionType, superCtor, =, isConstructor, (, ), ?, getSuperClassConstructor, (, ), :]
[>, getImplementedInterfaces, (, ), {, FunctionType, superCtor, =, isConstructor, (, ), ?, getSuperClassConstructor, (, ), :, null, ;, if, (]
[>, getImplementedInterfaces, (, ), {, FunctionType, superCtor, =, isConstructor, (, ), ?, getSuperClassConstructor, (, ), :, null, ;, if, (]
[(, ), {, FunctionType, superCtor, =, isConstructor, (, ), ?, getSuperClassConstructor, (, ), :, null, ;, if, (, superCtor, ==]
[superCtor, =, isConstructor, (, ), ?, getSuperClassConstructor, (, ), :, null, ;, if, (, superCtor, ==, null, ), {, return]
[getSuperClassConstructor, (, ), :, null, ;, if, (, superCtor, ==, null, ), {, return, implementedInterfaces, ;, }, else, {, return]
[getSuperClassConstructor, (, ), :, null, ;, if, (, superCtor, ==, null, ), {, return, implementedInterfaces, ;, }, else, {, return]
[null, ;, if, (, superCtor, ==, null, ), {, return, implementedInterfaces, ;, }, else, {, return, Iterables, ., concat, (]
[if, (, superCtor, ==, null, ), {, return, implementedInterfaces, ;, }, else, {, return, Iterables, ., concat, (, implementedInterfaces, ,]
[if, (, superCtor, ==, null, ), {, return, implementedInterfaces, ;, }, else, {, return, Iterables, ., concat, (, implementedInterfaces, ,]
[,, superCtor, ., getImplementedInterfaces, (, ), ), ;, }, }, public, Iterable, <, ObjectType, >, getOwnImplementedInterfaces, (, ), {, return]
[(, ), {, return, implementedInterfaces, ;, }, public, void, setImplementedInterfaces, (, List, <, ObjectType, >, implementedInterfaces, ), {, if, (]
[(, List, <, ObjectType, >, implementedInterfaces, ), {, if, (, isConstructor, (, ), ), {, for, (, ObjectType, type, :]
[ObjectType, >, implementedInterfaces, ), {, if, (, isConstructor, (, ), ), {, for, (, ObjectType, type, :, implementedInterfaces, ), {]
[ObjectType, >, implementedInterfaces, ), {, if, (, isConstructor, (, ), ), {, for, (, ObjectType, type, :, implementedInterfaces, ), {]
[{, if, (, isConstructor, (, ), ), {, for, (, ObjectType, type, :, implementedInterfaces, ), {, registry, ., registerTypeImplementingInterface, (]
[(, isConstructor, (, ), ), {, for, (, ObjectType, type, :, implementedInterfaces, ), {, registry, ., registerTypeImplementingInterface, (, this, ,]
[), {, for, (, ObjectType, type, :, implementedInterfaces, ), {, registry, ., registerTypeImplementingInterface, (, this, ,, type, ), ;, }]
[), {, for, (, ObjectType, type, :, implementedInterfaces, ), {, registry, ., registerTypeImplementingInterface, (, this, ,, type, ), ;, }]
[ObjectType, type, :, implementedInterfaces, ), {, registry, ., registerTypeImplementingInterface, (, this, ,, type, ), ;, }, this, ., implementedInterfaces, =]
[ObjectType, type, :, implementedInterfaces, ), {, registry, ., registerTypeImplementingInterface, (, this, ,, type, ), ;, }, this, ., implementedInterfaces, =]
[), {, registry, ., registerTypeImplementingInterface, (, this, ,, type, ), ;, }, this, ., implementedInterfaces, =, ImmutableList, ., copyOf, (]
[,, type, ), ;, }, this, ., implementedInterfaces, =, ImmutableList, ., copyOf, (, implementedInterfaces, ), ;, }, else, {, throw]
[(, ), ;, }, }, public, Iterable, <, ObjectType, >, getAllExtendedInterfaces, (, ), {, Set, <, ObjectType, >, extendedInterfaces, =]
[(, ), ;, }, }, public, Iterable, <, ObjectType, >, getAllExtendedInterfaces, (, ), {, Set, <, ObjectType, >, extendedInterfaces, =]
[(, ), {, Set, <, ObjectType, >, extendedInterfaces, =, Sets, ., newLinkedHashSet, (, ), ;, for, (, ObjectType, interfaceType, :]
[ObjectType, >, extendedInterfaces, =, Sets, ., newLinkedHashSet, (, ), ;, for, (, ObjectType, interfaceType, :, getExtendedInterfaces, (, ), ), {]
[extendedInterfaces, =, Sets, ., newLinkedHashSet, (, ), ;, for, (, ObjectType, interfaceType, :, getExtendedInterfaces, (, ), ), {, addRelatedExtendedInterfaces, (]
[Sets, ., newLinkedHashSet, (, ), ;, for, (, ObjectType, interfaceType, :, getExtendedInterfaces, (, ), ), {, addRelatedExtendedInterfaces, (, interfaceType, ,]
[;, for, (, ObjectType, interfaceType, :, getExtendedInterfaces, (, ), ), {, addRelatedExtendedInterfaces, (, interfaceType, ,, extendedInterfaces, ), ;, }, return]
[extendedInterfaces, ;, }, private, void, addRelatedExtendedInterfaces, (, ObjectType, instance, ,, Set, <, ObjectType, >, set, ), {, FunctionType, constructor, =]
[extendedInterfaces, ;, }, private, void, addRelatedExtendedInterfaces, (, ObjectType, instance, ,, Set, <, ObjectType, >, set, ), {, FunctionType, constructor, =]
[instance, ,, Set, <, ObjectType, >, set, ), {, FunctionType, constructor, =, instance, ., getConstructor, (, ), ;, if, (]
[instance, ,, Set, <, ObjectType, >, set, ), {, FunctionType, constructor, =, instance, ., getConstructor, (, ), ;, if, (]
[Set, <, ObjectType, >, set, ), {, FunctionType, constructor, =, instance, ., getConstructor, (, ), ;, if, (, constructor, !=]
[>, set, ), {, FunctionType, constructor, =, instance, ., getConstructor, (, ), ;, if, (, constructor, !=, null, ), {]
[>, set, ), {, FunctionType, constructor, =, instance, ., getConstructor, (, ), ;, if, (, constructor, !=, null, ), {]
[FunctionType, constructor, =, instance, ., getConstructor, (, ), ;, if, (, constructor, !=, null, ), {, set, ., add, (]
[;, if, (, constructor, !=, null, ), {, set, ., add, (, instance, ), ;, for, (, ObjectType, interfaceType, :]
[;, if, (, constructor, !=, null, ), {, set, ., add, (, instance, ), ;, for, (, ObjectType, interfaceType, :]
[{, set, ., add, (, instance, ), ;, for, (, ObjectType, interfaceType, :, constructor, ., getExtendedInterfaces, (, ), ), {]
[., add, (, instance, ), ;, for, (, ObjectType, interfaceType, :, constructor, ., getExtendedInterfaces, (, ), ), {, addRelatedExtendedInterfaces, (]
[(, instance, ), ;, for, (, ObjectType, interfaceType, :, constructor, ., getExtendedInterfaces, (, ), ), {, addRelatedExtendedInterfaces, (, interfaceType, ,]
[addRelatedExtendedInterfaces, (, interfaceType, ,, set, ), ;, }, }, }, public, Iterable, <, ObjectType, >, getExtendedInterfaces, (, ), {, return]
[public, Iterable, <, ObjectType, >, getExtendedInterfaces, (, ), {, return, extendedInterfaces, ;, }, public, int, getExtendedInterfacesCount, (, ), {, return]
[public, Iterable, <, ObjectType, >, getExtendedInterfaces, (, ), {, return, extendedInterfaces, ;, }, public, int, getExtendedInterfacesCount, (, ), {, return]
[size, (, ), ;, }, public, void, setExtendedInterfaces, (, List, <, ObjectType, >, extendedInterfaces, ), throws, UnsupportedOperationException, {, if, (]
[public, void, setExtendedInterfaces, (, List, <, ObjectType, >, extendedInterfaces, ), throws, UnsupportedOperationException, {, if, (, isInterface, (, ), ), {]
[public, void, setExtendedInterfaces, (, List, <, ObjectType, >, extendedInterfaces, ), throws, UnsupportedOperationException, {, if, (, isInterface, (, ), ), {]
[List, <, ObjectType, >, extendedInterfaces, ), throws, UnsupportedOperationException, {, if, (, isInterface, (, ), ), {, this, ., extendedInterfaces, =]
[List, <, ObjectType, >, extendedInterfaces, ), throws, UnsupportedOperationException, {, if, (, isInterface, (, ), ), {, this, ., extendedInterfaces, =]
[extendedInterfaces, ), throws, UnsupportedOperationException, {, if, (, isInterface, (, ), ), {, this, ., extendedInterfaces, =, ImmutableList, ., copyOf, (]
[isInterface, (, ), ), {, this, ., extendedInterfaces, =, ImmutableList, ., copyOf, (, extendedInterfaces, ), ;, }, else, {, throw]
[throw, new, UnsupportedOperationException, (, ), ;, }, }, @, Override, public, JSType, getPropertyType, (, String, name, ), {, if, (]
[new, UnsupportedOperationException, (, ), ;, }, }, @, Override, public, JSType, getPropertyType, (, String, name, ), {, if, (, !]
[(, ), ;, }, }, @, Override, public, JSType, getPropertyType, (, String, name, ), {, if, (, !, hasOwnProperty, (]
[public, JSType, getPropertyType, (, String, name, ), {, if, (, !, hasOwnProperty, (, name, ), ), {, boolean, isCall, =]
[public, JSType, getPropertyType, (, String, name, ), {, if, (, !, hasOwnProperty, (, name, ), ), {, boolean, isCall, =]
[String, name, ), {, if, (, !, hasOwnProperty, (, name, ), ), {, boolean, isCall, =, "call", ., equals, (]
[!, hasOwnProperty, (, name, ), ), {, boolean, isCall, =, "call", ., equals, (, name, ), ;, boolean, isBind, =]
[!, hasOwnProperty, (, name, ), ), {, boolean, isCall, =, "call", ., equals, (, name, ), ;, boolean, isBind, =]
[), ), {, boolean, isCall, =, "call", ., equals, (, name, ), ;, boolean, isBind, =, "bind", ., equals, (]
[=, "call", ., equals, (, name, ), ;, boolean, isBind, =, "bind", ., equals, (, name, ), ;, if, (]
[=, "call", ., equals, (, name, ), ;, boolean, isBind, =, "bind", ., equals, (, name, ), ;, if, (]
[., equals, (, name, ), ;, boolean, isBind, =, "bind", ., equals, (, name, ), ;, if, (, isCall, ||]
[name, ), ;, boolean, isBind, =, "bind", ., equals, (, name, ), ;, if, (, isCall, ||, isBind, ), {]
[;, boolean, isBind, =, "bind", ., equals, (, name, ), ;, if, (, isCall, ||, isBind, ), {, defineDeclaredProperty, (]
[isBind, =, "bind", ., equals, (, name, ), ;, if, (, isCall, ||, isBind, ), {, defineDeclaredProperty, (, name, ,]
["bind", ., equals, (, name, ), ;, if, (, isCall, ||, isBind, ), {, defineDeclaredProperty, (, name, ,, getCallOrBindSignature, (]
[(, name, ), ;, if, (, isCall, ||, isBind, ), {, defineDeclaredProperty, (, name, ,, getCallOrBindSignature, (, isCall, ), ,]
[||, isBind, ), {, defineDeclaredProperty, (, name, ,, getCallOrBindSignature, (, isCall, ), ,, source, ), ;, }, else, if, (]
[||, isBind, ), {, defineDeclaredProperty, (, name, ,, getCallOrBindSignature, (, isCall, ), ,, source, ), ;, }, else, if, (]
[defineDeclaredProperty, (, name, ,, getCallOrBindSignature, (, isCall, ), ,, source, ), ;, }, else, if, (, "apply", ., equals, (]
[), ,, source, ), ;, }, else, if, (, "apply", ., equals, (, name, ), ), {, FunctionParamBuilder, builder, =]
[), ;, }, else, if, (, "apply", ., equals, (, name, ), ), {, FunctionParamBuilder, builder, =, new, FunctionParamBuilder, (]
[else, if, (, "apply", ., equals, (, name, ), ), {, FunctionParamBuilder, builder, =, new, FunctionParamBuilder, (, registry, ), ;]
[else, if, (, "apply", ., equals, (, name, ), ), {, FunctionParamBuilder, builder, =, new, FunctionParamBuilder, (, registry, ), ;]
[., equals, (, name, ), ), {, FunctionParamBuilder, builder, =, new, FunctionParamBuilder, (, registry, ), ;, builder, ., addOptionalParams, (]
[., equals, (, name, ), ), {, FunctionParamBuilder, builder, =, new, FunctionParamBuilder, (, registry, ), ;, builder, ., addOptionalParams, (]
[), ), {, FunctionParamBuilder, builder, =, new, FunctionParamBuilder, (, registry, ), ;, builder, ., addOptionalParams, (, registry, ., createNullableType, (]
[=, new, FunctionParamBuilder, (, registry, ), ;, builder, ., addOptionalParams, (, registry, ., createNullableType, (, getTypeOfThis, (, ), ), ,]
[=, new, FunctionParamBuilder, (, registry, ), ;, builder, ., addOptionalParams, (, registry, ., createNullableType, (, getTypeOfThis, (, ), ), ,]
[registry, ), ;, builder, ., addOptionalParams, (, registry, ., createNullableType, (, getTypeOfThis, (, ), ), ,, registry, ., createNullableType, (]
[registry, ), ;, builder, ., addOptionalParams, (, registry, ., createNullableType, (, getTypeOfThis, (, ), ), ,, registry, ., createNullableType, (]
[., addOptionalParams, (, registry, ., createNullableType, (, getTypeOfThis, (, ), ), ,, registry, ., createNullableType, (, registry, ., getNativeType, (]
[., addOptionalParams, (, registry, ., createNullableType, (, getTypeOfThis, (, ), ), ,, registry, ., createNullableType, (, registry, ., getNativeType, (]
[getTypeOfThis, (, ), ), ,, registry, ., createNullableType, (, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ), ;]
[), ), ,, registry, ., createNullableType, (, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ), ;, defineDeclaredProperty, (]
[,, registry, ., createNullableType, (, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ), ;, defineDeclaredProperty, (, name, ,]
[,, registry, ., createNullableType, (, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ), ;, defineDeclaredProperty, (, name, ,]
[,, registry, ., createNullableType, (, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ), ;, defineDeclaredProperty, (, name, ,]
[,, registry, ., createNullableType, (, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ), ;, defineDeclaredProperty, (, name, ,]
[,, registry, ., createNullableType, (, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ), ;, defineDeclaredProperty, (, name, ,]
[createNullableType, (, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ), ;, defineDeclaredProperty, (, name, ,, new, FunctionBuilder, (]
[(, JSTypeNative, ., OBJECT_TYPE, ), ), ), ;, defineDeclaredProperty, (, name, ,, new, FunctionBuilder, (, registry, ), ., withParams, (]
[), ), ;, defineDeclaredProperty, (, name, ,, new, FunctionBuilder, (, registry, ), ., withParams, (, builder, ), ., withReturnType, (]
[new, FunctionBuilder, (, registry, ), ., withParams, (, builder, ), ., withReturnType, (, getReturnType, (, ), ), ., withTemplateKeys, (]
[), ., withReturnType, (, getReturnType, (, ), ), ., withTemplateKeys, (, getTemplateKeys, (, ), ), ., build, (, ), ,]
[), ), ., withTemplateKeys, (, getTemplateKeys, (, ), ), ., build, (, ), ,, source, ), ;, }, }, return]
[), ), ., withTemplateKeys, (, getTemplateKeys, (, ), ), ., build, (, ), ,, source, ), ;, }, }, return]
[(, getTemplateKeys, (, ), ), ., build, (, ), ,, source, ), ;, }, }, return, super, ., getPropertyType, (]
[return, super, ., getPropertyType, (, name, ), ;, }, public, FunctionType, getBindReturnType, (, int, argsToBind, ), {, FunctionBuilder, builder, =]
[return, super, ., getPropertyType, (, name, ), ;, }, public, FunctionType, getBindReturnType, (, int, argsToBind, ), {, FunctionBuilder, builder, =]
[return, super, ., getPropertyType, (, name, ), ;, }, public, FunctionType, getBindReturnType, (, int, argsToBind, ), {, FunctionBuilder, builder, =]
[getPropertyType, (, name, ), ;, }, public, FunctionType, getBindReturnType, (, int, argsToBind, ), {, FunctionBuilder, builder, =, new, FunctionBuilder, (]
[}, public, FunctionType, getBindReturnType, (, int, argsToBind, ), {, FunctionBuilder, builder, =, new, FunctionBuilder, (, registry, ), ., withReturnType, (]
[), {, FunctionBuilder, builder, =, new, FunctionBuilder, (, registry, ), ., withReturnType, (, getReturnType, (, ), ), ., withTemplateKeys, (]
[(, registry, ), ., withReturnType, (, getReturnType, (, ), ), ., withTemplateKeys, (, getTemplateKeys, (, ), ), ;, if, (]
[(, registry, ), ., withReturnType, (, getReturnType, (, ), ), ., withTemplateKeys, (, getTemplateKeys, (, ), ), ;, if, (]
[), ., withReturnType, (, getReturnType, (, ), ), ., withTemplateKeys, (, getTemplateKeys, (, ), ), ;, if, (, argsToBind, >=]
[), ), ., withTemplateKeys, (, getTemplateKeys, (, ), ), ;, if, (, argsToBind, >=, 0, ), {, Node, origParams, =]
[(, ), ), ;, if, (, argsToBind, >=, 0, ), {, Node, origParams, =, getParametersNode, (, ), ;, if, (]
[(, ), ), ;, if, (, argsToBind, >=, 0, ), {, Node, origParams, =, getParametersNode, (, ), ;, if, (]
[), ;, if, (, argsToBind, >=, 0, ), {, Node, origParams, =, getParametersNode, (, ), ;, if, (, origParams, !=]
[0, ), {, Node, origParams, =, getParametersNode, (, ), ;, if, (, origParams, !=, null, ), {, Node, params, =]
[0, ), {, Node, origParams, =, getParametersNode, (, ), ;, if, (, origParams, !=, null, ), {, Node, params, =]
[(, origParams, !=, null, ), {, Node, params, =, origParams, ., cloneTree, (, ), ;, for, (, int, i, =]
[!=, null, ), {, Node, params, =, origParams, ., cloneTree, (, ), ;, for, (, int, i, =, 1, ;]
[!=, null, ), {, Node, params, =, origParams, ., cloneTree, (, ), ;, for, (, int, i, =, 1, ;]
[!=, null, ), {, Node, params, =, origParams, ., cloneTree, (, ), ;, for, (, int, i, =, 1, ;]
[), {, Node, params, =, origParams, ., cloneTree, (, ), ;, for, (, int, i, =, 1, ;, i, <]
[Node, params, =, origParams, ., cloneTree, (, ), ;, for, (, int, i, =, 1, ;, i, <, argsToBind, &&]
[Node, params, =, origParams, ., cloneTree, (, ), ;, for, (, int, i, =, 1, ;, i, <, argsToBind, &&]
[Node, params, =, origParams, ., cloneTree, (, ), ;, for, (, int, i, =, 1, ;, i, <, argsToBind, &&]
[(, ), ;, for, (, int, i, =, 1, ;, i, <, argsToBind, &&, params, ., getFirstChild, (, ), !=]
[;, for, (, int, i, =, 1, ;, i, <, argsToBind, &&, params, ., getFirstChild, (, ), !=, null, ;]
[;, for, (, int, i, =, 1, ;, i, <, argsToBind, &&, params, ., getFirstChild, (, ), !=, null, ;]
[1, ;, i, <, argsToBind, &&, params, ., getFirstChild, (, ), !=, null, ;, i, ++, ), {, if, (]
[1, ;, i, <, argsToBind, &&, params, ., getFirstChild, (, ), !=, null, ;, i, ++, ), {, if, (]
[1, ;, i, <, argsToBind, &&, params, ., getFirstChild, (, ), !=, null, ;, i, ++, ), {, if, (]
[i, ++, ), {, if, (, params, ., getFirstChild, (, ), ., isVarArgs, (, ), ), {, break, ;, }]
[i, ++, ), {, if, (, params, ., getFirstChild, (, ), ., isVarArgs, (, ), ), {, break, ;, }]
[., getFirstChild, (, ), ., isVarArgs, (, ), ), {, break, ;, }, params, ., removeFirstChild, (, ), ;, }]
[., getFirstChild, (, ), ., isVarArgs, (, ), ), {, break, ;, }, params, ., removeFirstChild, (, ), ;, }]
[., isVarArgs, (, ), ), {, break, ;, }, params, ., removeFirstChild, (, ), ;, }, builder, ., withParamsNode, (]
[break, ;, }, params, ., removeFirstChild, (, ), ;, }, builder, ., withParamsNode, (, params, ), ;, }, }, return]
[break, ;, }, params, ., removeFirstChild, (, ), ;, }, builder, ., withParamsNode, (, params, ), ;, }, }, return]
[}, return, builder, ., build, (, ), ;, }, private, FunctionType, getCallOrBindSignature, (, boolean, isCall, ), {, boolean, isBind, =]
[return, builder, ., build, (, ), ;, }, private, FunctionType, getCallOrBindSignature, (, boolean, isCall, ), {, boolean, isBind, =, !]
[), ;, }, private, FunctionType, getCallOrBindSignature, (, boolean, isCall, ), {, boolean, isBind, =, !, isCall, ;, FunctionBuilder, builder, =]
[), ;, }, private, FunctionType, getCallOrBindSignature, (, boolean, isCall, ), {, boolean, isBind, =, !, isCall, ;, FunctionBuilder, builder, =]
[), ;, }, private, FunctionType, getCallOrBindSignature, (, boolean, isCall, ), {, boolean, isBind, =, !, isCall, ;, FunctionBuilder, builder, =]
[private, FunctionType, getCallOrBindSignature, (, boolean, isCall, ), {, boolean, isBind, =, !, isCall, ;, FunctionBuilder, builder, =, new, FunctionBuilder, (]
[isCall, ), {, boolean, isBind, =, !, isCall, ;, FunctionBuilder, builder, =, new, FunctionBuilder, (, registry, ), ., withReturnType, (]
[isCall, ), {, boolean, isBind, =, !, isCall, ;, FunctionBuilder, builder, =, new, FunctionBuilder, (, registry, ), ., withReturnType, (]
[{, boolean, isBind, =, !, isCall, ;, FunctionBuilder, builder, =, new, FunctionBuilder, (, registry, ), ., withReturnType, (, isCall, ?]
[!, isCall, ;, FunctionBuilder, builder, =, new, FunctionBuilder, (, registry, ), ., withReturnType, (, isCall, ?, getReturnType, (, ), :]
[;, FunctionBuilder, builder, =, new, FunctionBuilder, (, registry, ), ., withReturnType, (, isCall, ?, getReturnType, (, ), :, getBindReturnType, (]
[FunctionBuilder, builder, =, new, FunctionBuilder, (, registry, ), ., withReturnType, (, isCall, ?, getReturnType, (, ), :, getBindReturnType, (, -]
[registry, ), ., withReturnType, (, isCall, ?, getReturnType, (, ), :, getBindReturnType, (, -, 1, ), ), ., withTemplateKeys, (]
[(, ), :, getBindReturnType, (, -, 1, ), ), ., withTemplateKeys, (, getTemplateKeys, (, ), ), ;, Node, origParams, =]
[1, ), ), ., withTemplateKeys, (, getTemplateKeys, (, ), ), ;, Node, origParams, =, getParametersNode, (, ), ;, if, (]
[1, ), ), ., withTemplateKeys, (, getTemplateKeys, (, ), ), ;, Node, origParams, =, getParametersNode, (, ), ;, if, (]
[), ., withTemplateKeys, (, getTemplateKeys, (, ), ), ;, Node, origParams, =, getParametersNode, (, ), ;, if, (, origParams, !=]
[), ), ;, Node, origParams, =, getParametersNode, (, ), ;, if, (, origParams, !=, null, ), {, Node, params, =]
[), ), ;, Node, origParams, =, getParametersNode, (, ), ;, if, (, origParams, !=, null, ), {, Node, params, =]
[;, if, (, origParams, !=, null, ), {, Node, params, =, origParams, ., cloneTree, (, ), ;, Node, thisTypeNode, =]
[;, if, (, origParams, !=, null, ), {, Node, params, =, origParams, ., cloneTree, (, ), ;, Node, thisTypeNode, =]
[!=, null, ), {, Node, params, =, origParams, ., cloneTree, (, ), ;, Node, thisTypeNode, =, Node, ., newString, (]
[!=, null, ), {, Node, params, =, origParams, ., cloneTree, (, ), ;, Node, thisTypeNode, =, Node, ., newString, (]
[Node, params, =, origParams, ., cloneTree, (, ), ;, Node, thisTypeNode, =, Node, ., newString, (, Token, ., NAME, ,]
[origParams, ., cloneTree, (, ), ;, Node, thisTypeNode, =, Node, ., newString, (, Token, ., NAME, ,, "thisType", ), ;]
[origParams, ., cloneTree, (, ), ;, Node, thisTypeNode, =, Node, ., newString, (, Token, ., NAME, ,, "thisType", ), ;]
[), ;, Node, thisTypeNode, =, Node, ., newString, (, Token, ., NAME, ,, "thisType", ), ;, thisTypeNode, ., setJSType, (]
[), ;, Node, thisTypeNode, =, Node, ., newString, (, Token, ., NAME, ,, "thisType", ), ;, thisTypeNode, ., setJSType, (]
[=, Node, ., newString, (, Token, ., NAME, ,, "thisType", ), ;, thisTypeNode, ., setJSType, (, registry, ., createOptionalNullableType, (]
[., NAME, ,, "thisType", ), ;, thisTypeNode, ., setJSType, (, registry, ., createOptionalNullableType, (, getTypeOfThis, (, ), ), ), ;]
[., NAME, ,, "thisType", ), ;, thisTypeNode, ., setJSType, (, registry, ., createOptionalNullableType, (, getTypeOfThis, (, ), ), ), ;]
[), ;, thisTypeNode, ., setJSType, (, registry, ., createOptionalNullableType, (, getTypeOfThis, (, ), ), ), ;, params, ., addChildToFront, (]
[(, registry, ., createOptionalNullableType, (, getTypeOfThis, (, ), ), ), ;, params, ., addChildToFront, (, thisTypeNode, ), ;, if, (]
[), ), ;, params, ., addChildToFront, (, thisTypeNode, ), ;, if, (, isBind, ), {, for, (, Node, current, =]
[), ), ;, params, ., addChildToFront, (, thisTypeNode, ), ;, if, (, isBind, ), {, for, (, Node, current, =]
[(, thisTypeNode, ), ;, if, (, isBind, ), {, for, (, Node, current, =, thisTypeNode, ., getNext, (, ), ;]
[(, thisTypeNode, ), ;, if, (, isBind, ), {, for, (, Node, current, =, thisTypeNode, ., getNext, (, ), ;]
[), ;, if, (, isBind, ), {, for, (, Node, current, =, thisTypeNode, ., getNext, (, ), ;, current, !=]
[if, (, isBind, ), {, for, (, Node, current, =, thisTypeNode, ., getNext, (, ), ;, current, !=, null, ;]
[isBind, ), {, for, (, Node, current, =, thisTypeNode, ., getNext, (, ), ;, current, !=, null, ;, current, =]
[isBind, ), {, for, (, Node, current, =, thisTypeNode, ., getNext, (, ), ;, current, !=, null, ;, current, =]
[=, thisTypeNode, ., getNext, (, ), ;, current, !=, null, ;, current, =, current, ., getNext, (, ), ), {]
[=, thisTypeNode, ., getNext, (, ), ;, current, !=, null, ;, current, =, current, ., getNext, (, ), ), {]
[(, ), ;, current, !=, null, ;, current, =, current, ., getNext, (, ), ), {, current, ., setOptionalArg, (]
[=, current, ., getNext, (, ), ), {, current, ., setOptionalArg, (, true, ), ;, }, }, else, if, (]
[), {, current, ., setOptionalArg, (, true, ), ;, }, }, else, if, (, isCall, ), {, Node, firstArg, =]
[), {, current, ., setOptionalArg, (, true, ), ;, }, }, else, if, (, isCall, ), {, Node, firstArg, =]
[;, }, }, else, if, (, isCall, ), {, Node, firstArg, =, thisTypeNode, ., getNext, (, ), ;, if, (]
[;, }, }, else, if, (, isCall, ), {, Node, firstArg, =, thisTypeNode, ., getNext, (, ), ;, if, (]
[;, }, }, else, if, (, isCall, ), {, Node, firstArg, =, thisTypeNode, ., getNext, (, ), ;, if, (]
[;, }, }, else, if, (, isCall, ), {, Node, firstArg, =, thisTypeNode, ., getNext, (, ), ;, if, (]
[}, else, if, (, isCall, ), {, Node, firstArg, =, thisTypeNode, ., getNext, (, ), ;, if, (, firstArg, ==]
[if, (, isCall, ), {, Node, firstArg, =, thisTypeNode, ., getNext, (, ), ;, if, (, firstArg, ==, null, ||]
[if, (, isCall, ), {, Node, firstArg, =, thisTypeNode, ., getNext, (, ), ;, if, (, firstArg, ==, null, ||]
[firstArg, =, thisTypeNode, ., getNext, (, ), ;, if, (, firstArg, ==, null, ||, firstArg, ., isOptionalArg, (, ), ||]
[firstArg, =, thisTypeNode, ., getNext, (, ), ;, if, (, firstArg, ==, null, ||, firstArg, ., isOptionalArg, (, ), ||]
[;, if, (, firstArg, ==, null, ||, firstArg, ., isOptionalArg, (, ), ||, firstArg, ., isVarArgs, (, ), ), {]
[;, if, (, firstArg, ==, null, ||, firstArg, ., isOptionalArg, (, ), ||, firstArg, ., isVarArgs, (, ), ), {]
[==, null, ||, firstArg, ., isOptionalArg, (, ), ||, firstArg, ., isVarArgs, (, ), ), {, thisTypeNode, ., setOptionalArg, (]
[isOptionalArg, (, ), ||, firstArg, ., isVarArgs, (, ), ), {, thisTypeNode, ., setOptionalArg, (, true, ), ;, }, }]
[isOptionalArg, (, ), ||, firstArg, ., isVarArgs, (, ), ), {, thisTypeNode, ., setOptionalArg, (, true, ), ;, }, }]
[firstArg, ., isVarArgs, (, ), ), {, thisTypeNode, ., setOptionalArg, (, true, ), ;, }, }, builder, ., withParamsNode, (]
[), {, thisTypeNode, ., setOptionalArg, (, true, ), ;, }, }, builder, ., withParamsNode, (, params, ), ;, }, return]
[), {, thisTypeNode, ., setOptionalArg, (, true, ), ;, }, }, builder, ., withParamsNode, (, params, ), ;, }, return]
[@, Override, boolean, defineProperty, (, String, name, ,, JSType, type, ,, boolean, inferred, ,, Node, propertyNode, ), {, if, (]
[@, Override, boolean, defineProperty, (, String, name, ,, JSType, type, ,, boolean, inferred, ,, Node, propertyNode, ), {, if, (]
[(, String, name, ,, JSType, type, ,, boolean, inferred, ,, Node, propertyNode, ), {, if, (, "prototype", ., equals, (]
[boolean, inferred, ,, Node, propertyNode, ), {, if, (, "prototype", ., equals, (, name, ), ), {, ObjectType, objType, =]
[boolean, inferred, ,, Node, propertyNode, ), {, if, (, "prototype", ., equals, (, name, ), ), {, ObjectType, objType, =]
[(, "prototype", ., equals, (, name, ), ), {, ObjectType, objType, =, type, ., toObjectType, (, ), ;, if, (]
[(, "prototype", ., equals, (, name, ), ), {, ObjectType, objType, =, type, ., toObjectType, (, ), ;, if, (]
[., equals, (, name, ), ), {, ObjectType, objType, =, type, ., toObjectType, (, ), ;, if, (, objType, !=]
[), {, ObjectType, objType, =, type, ., toObjectType, (, ), ;, if, (, objType, !=, null, ), {, if, (]
[), {, ObjectType, objType, =, type, ., toObjectType, (, ), ;, if, (, objType, !=, null, ), {, if, (]
[), {, ObjectType, objType, =, type, ., toObjectType, (, ), ;, if, (, objType, !=, null, ), {, if, (]
[ObjectType, objType, =, type, ., toObjectType, (, ), ;, if, (, objType, !=, null, ), {, if, (, prototypeSlot, !=]
[=, type, ., toObjectType, (, ), ;, if, (, objType, !=, null, ), {, if, (, prototypeSlot, !=, null, &&]
[=, type, ., toObjectType, (, ), ;, if, (, objType, !=, null, ), {, if, (, prototypeSlot, !=, null, &&]
[(, ), ;, if, (, objType, !=, null, ), {, if, (, prototypeSlot, !=, null, &&, objType, ., isEquivalentTo, (]
[(, ), ;, if, (, objType, !=, null, ), {, if, (, prototypeSlot, !=, null, &&, objType, ., isEquivalentTo, (]
[{, if, (, prototypeSlot, !=, null, &&, objType, ., isEquivalentTo, (, prototypeSlot, ., getType, (, ), ), ), {, return]
[prototypeSlot, !=, null, &&, objType, ., isEquivalentTo, (, prototypeSlot, ., getType, (, ), ), ), {, return, true, ;, }]
[null, &&, objType, ., isEquivalentTo, (, prototypeSlot, ., getType, (, ), ), ), {, return, true, ;, }, setPrototypeBasedOn, (]
[objType, ., isEquivalentTo, (, prototypeSlot, ., getType, (, ), ), ), {, return, true, ;, }, setPrototypeBasedOn, (, objType, ,]
[prototypeSlot, ., getType, (, ), ), ), {, return, true, ;, }, setPrototypeBasedOn, (, objType, ,, propertyNode, ), ;, return]
[), {, return, true, ;, }, setPrototypeBasedOn, (, objType, ,, propertyNode, ), ;, return, true, ;, }, else, {, return]
[}, setPrototypeBasedOn, (, objType, ,, propertyNode, ), ;, return, true, ;, }, else, {, return, false, ;, }, }, return]
[}, setPrototypeBasedOn, (, objType, ,, propertyNode, ), ;, return, true, ;, }, else, {, return, false, ;, }, }, return]
[,, propertyNode, ), ;, return, true, ;, }, else, {, return, false, ;, }, }, return, super, ., defineProperty, (]
[), ;, return, true, ;, }, else, {, return, false, ;, }, }, return, super, ., defineProperty, (, name, ,]
[return, true, ;, }, else, {, return, false, ;, }, }, return, super, ., defineProperty, (, name, ,, type, ,]
[;, }, else, {, return, false, ;, }, }, return, super, ., defineProperty, (, name, ,, type, ,, inferred, ,]
[name, ,, type, ,, inferred, ,, propertyNode, ), ;, }, FunctionType, supAndInfHelper, (, FunctionType, that, ,, boolean, leastSuper, ), {]
[name, ,, type, ,, inferred, ,, propertyNode, ), ;, }, FunctionType, supAndInfHelper, (, FunctionType, that, ,, boolean, leastSuper, ), {]
[inferred, ,, propertyNode, ), ;, }, FunctionType, supAndInfHelper, (, FunctionType, that, ,, boolean, leastSuper, ), {, Preconditions, ., checkNotNull, (]
[}, FunctionType, supAndInfHelper, (, FunctionType, that, ,, boolean, leastSuper, ), {, Preconditions, ., checkNotNull, (, that, ), ;, if, (]
[supAndInfHelper, (, FunctionType, that, ,, boolean, leastSuper, ), {, Preconditions, ., checkNotNull, (, that, ), ;, if, (, isEquivalentTo, (]
[boolean, leastSuper, ), {, Preconditions, ., checkNotNull, (, that, ), ;, if, (, isEquivalentTo, (, that, ), ), {, return]
[., checkNotNull, (, that, ), ;, if, (, isEquivalentTo, (, that, ), ), {, return, this, ;, }, if, (]
[., checkNotNull, (, that, ), ;, if, (, isEquivalentTo, (, that, ), ), {, return, this, ;, }, if, (]
[., checkNotNull, (, that, ), ;, if, (, isEquivalentTo, (, that, ), ), {, return, this, ;, }, if, (]
[., checkNotNull, (, that, ), ;, if, (, isEquivalentTo, (, that, ), ), {, return, this, ;, }, if, (]
[), ;, if, (, isEquivalentTo, (, that, ), ), {, return, this, ;, }, if, (, isOrdinaryFunction, (, ), &&]
[), ;, if, (, isEquivalentTo, (, that, ), ), {, return, this, ;, }, if, (, isOrdinaryFunction, (, ), &&]
[that, ), ), {, return, this, ;, }, if, (, isOrdinaryFunction, (, ), &&, that, ., isOrdinaryFunction, (, ), &&]
[), ), {, return, this, ;, }, if, (, isOrdinaryFunction, (, ), &&, that, ., isOrdinaryFunction, (, ), &&, !]
[), ), {, return, this, ;, }, if, (, isOrdinaryFunction, (, ), &&, that, ., isOrdinaryFunction, (, ), &&, !]
[), ), {, return, this, ;, }, if, (, isOrdinaryFunction, (, ), &&, that, ., isOrdinaryFunction, (, ), &&, !]
[(, isOrdinaryFunction, (, ), &&, that, ., isOrdinaryFunction, (, ), &&, !, this, ., call, ., hasUnknownParamsOrReturn, (, ), &&]
[isOrdinaryFunction, (, ), &&, that, ., isOrdinaryFunction, (, ), &&, !, this, ., call, ., hasUnknownParamsOrReturn, (, ), &&, !]
[isOrdinaryFunction, (, ), &&, that, ., isOrdinaryFunction, (, ), &&, !, this, ., call, ., hasUnknownParamsOrReturn, (, ), &&, !]
[isOrdinaryFunction, (, ), &&, that, ., isOrdinaryFunction, (, ), &&, !, this, ., call, ., hasUnknownParamsOrReturn, (, ), &&, !]
[., call, ., hasUnknownParamsOrReturn, (, ), &&, !, that, ., call, ., hasUnknownParamsOrReturn, (, ), ), {, boolean, isSubtypeOfThat, =]
[., hasUnknownParamsOrReturn, (, ), &&, !, that, ., call, ., hasUnknownParamsOrReturn, (, ), ), {, boolean, isSubtypeOfThat, =, isSubtype, (]
[that, ., call, ., hasUnknownParamsOrReturn, (, ), ), {, boolean, isSubtypeOfThat, =, isSubtype, (, that, ), ;, boolean, isSubtypeOfThis, =]
[that, ., call, ., hasUnknownParamsOrReturn, (, ), ), {, boolean, isSubtypeOfThat, =, isSubtype, (, that, ), ;, boolean, isSubtypeOfThis, =]
[hasUnknownParamsOrReturn, (, ), ), {, boolean, isSubtypeOfThat, =, isSubtype, (, that, ), ;, boolean, isSubtypeOfThis, =, that, ., isSubtype, (]
[boolean, isSubtypeOfThat, =, isSubtype, (, that, ), ;, boolean, isSubtypeOfThis, =, that, ., isSubtype, (, this, ), ;, if, (]
[boolean, isSubtypeOfThat, =, isSubtype, (, that, ), ;, boolean, isSubtypeOfThis, =, that, ., isSubtype, (, this, ), ;, if, (]
[=, isSubtype, (, that, ), ;, boolean, isSubtypeOfThis, =, that, ., isSubtype, (, this, ), ;, if, (, isSubtypeOfThat, &&]
[isSubtype, (, that, ), ;, boolean, isSubtypeOfThis, =, that, ., isSubtype, (, this, ), ;, if, (, isSubtypeOfThat, &&, !]
[;, boolean, isSubtypeOfThis, =, that, ., isSubtype, (, this, ), ;, if, (, isSubtypeOfThat, &&, !, isSubtypeOfThis, ), {, return]
[;, boolean, isSubtypeOfThis, =, that, ., isSubtype, (, this, ), ;, if, (, isSubtypeOfThat, &&, !, isSubtypeOfThis, ), {, return]
[isSubtypeOfThis, =, that, ., isSubtype, (, this, ), ;, if, (, isSubtypeOfThat, &&, !, isSubtypeOfThis, ), {, return, leastSuper, ?]
[that, ., isSubtype, (, this, ), ;, if, (, isSubtypeOfThat, &&, !, isSubtypeOfThis, ), {, return, leastSuper, ?, that, :]
[;, if, (, isSubtypeOfThat, &&, !, isSubtypeOfThis, ), {, return, leastSuper, ?, that, :, this, ;, }, else, if, (]
[;, if, (, isSubtypeOfThat, &&, !, isSubtypeOfThis, ), {, return, leastSuper, ?, that, :, this, ;, }, else, if, (]
[(, isSubtypeOfThat, &&, !, isSubtypeOfThis, ), {, return, leastSuper, ?, that, :, this, ;, }, else, if, (, isSubtypeOfThis, &&]
[isSubtypeOfThat, &&, !, isSubtypeOfThis, ), {, return, leastSuper, ?, that, :, this, ;, }, else, if, (, isSubtypeOfThis, &&, !]
[), {, return, leastSuper, ?, that, :, this, ;, }, else, if, (, isSubtypeOfThis, &&, !, isSubtypeOfThat, ), {, return]
[), {, return, leastSuper, ?, that, :, this, ;, }, else, if, (, isSubtypeOfThis, &&, !, isSubtypeOfThat, ), {, return]
[return, leastSuper, ?, that, :, this, ;, }, else, if, (, isSubtypeOfThis, &&, !, isSubtypeOfThat, ), {, return, leastSuper, ?]
[?, that, :, this, ;, }, else, if, (, isSubtypeOfThis, &&, !, isSubtypeOfThat, ), {, return, leastSuper, ?, this, :]
[else, if, (, isSubtypeOfThis, &&, !, isSubtypeOfThat, ), {, return, leastSuper, ?, this, :, that, ;, }, FunctionType, merged, =]
[(, isSubtypeOfThis, &&, !, isSubtypeOfThat, ), {, return, leastSuper, ?, this, :, that, ;, }, FunctionType, merged, =, tryMergeFunctionPiecewise, (]
[&&, !, isSubtypeOfThat, ), {, return, leastSuper, ?, this, :, that, ;, }, FunctionType, merged, =, tryMergeFunctionPiecewise, (, that, ,]
[return, leastSuper, ?, this, :, that, ;, }, FunctionType, merged, =, tryMergeFunctionPiecewise, (, that, ,, leastSuper, ), ;, if, (]
[return, leastSuper, ?, this, :, that, ;, }, FunctionType, merged, =, tryMergeFunctionPiecewise, (, that, ,, leastSuper, ), ;, if, (]
[?, this, :, that, ;, }, FunctionType, merged, =, tryMergeFunctionPiecewise, (, that, ,, leastSuper, ), ;, if, (, merged, !=]
[;, }, FunctionType, merged, =, tryMergeFunctionPiecewise, (, that, ,, leastSuper, ), ;, if, (, merged, !=, null, ), {, return]
[that, ,, leastSuper, ), ;, if, (, merged, !=, null, ), {, return, merged, ;, }, }, JSType, functionInstance, =]
[that, ,, leastSuper, ), ;, if, (, merged, !=, null, ), {, return, merged, ;, }, }, JSType, functionInstance, =]
[;, if, (, merged, !=, null, ), {, return, merged, ;, }, }, JSType, functionInstance, =, registry, ., getNativeType, (]
[;, if, (, merged, !=, null, ), {, return, merged, ;, }, }, JSType, functionInstance, =, registry, ., getNativeType, (]
[{, return, merged, ;, }, }, JSType, functionInstance, =, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ;, if, (]
[{, return, merged, ;, }, }, JSType, functionInstance, =, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ;, if, (]
[}, }, JSType, functionInstance, =, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ;, if, (, functionInstance, ., isEquivalentTo, (]
[registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ;, if, (, functionInstance, ., isEquivalentTo, (, that, ), ), {, return]
[registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ;, if, (, functionInstance, ., isEquivalentTo, (, that, ), ), {, return]
[getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ;, if, (, functionInstance, ., isEquivalentTo, (, that, ), ), {, return, leastSuper, ?]
[JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ;, if, (, functionInstance, ., isEquivalentTo, (, that, ), ), {, return, leastSuper, ?, that, :]
[(, functionInstance, ., isEquivalentTo, (, that, ), ), {, return, leastSuper, ?, that, :, this, ;, }, else, if, (]
[(, functionInstance, ., isEquivalentTo, (, that, ), ), {, return, leastSuper, ?, that, :, this, ;, }, else, if, (]
[(, that, ), ), {, return, leastSuper, ?, that, :, this, ;, }, else, if, (, functionInstance, ., isEquivalentTo, (]
[return, leastSuper, ?, that, :, this, ;, }, else, if, (, functionInstance, ., isEquivalentTo, (, this, ), ), {, return]
[return, leastSuper, ?, that, :, this, ;, }, else, if, (, functionInstance, ., isEquivalentTo, (, this, ), ), {, return]
[?, that, :, this, ;, }, else, if, (, functionInstance, ., isEquivalentTo, (, this, ), ), {, return, leastSuper, ?]
[:, this, ;, }, else, if, (, functionInstance, ., isEquivalentTo, (, this, ), ), {, return, leastSuper, ?, this, :]
[(, functionInstance, ., isEquivalentTo, (, this, ), ), {, return, leastSuper, ?, this, :, that, ;, }, FunctionType, greatestFn, =]
[(, functionInstance, ., isEquivalentTo, (, this, ), ), {, return, leastSuper, ?, this, :, that, ;, }, FunctionType, greatestFn, =]
[(, this, ), ), {, return, leastSuper, ?, this, :, that, ;, }, FunctionType, greatestFn, =, registry, ., getNativeFunctionType, (]
[(, this, ), ), {, return, leastSuper, ?, this, :, that, ;, }, FunctionType, greatestFn, =, registry, ., getNativeFunctionType, (]
[this, :, that, ;, }, FunctionType, greatestFn, =, registry, ., getNativeFunctionType, (, JSTypeNative, ., U2U_CONSTRUCTOR_TYPE, ), ;, FunctionType, leastFn, =]
[this, :, that, ;, }, FunctionType, greatestFn, =, registry, ., getNativeFunctionType, (, JSTypeNative, ., U2U_CONSTRUCTOR_TYPE, ), ;, FunctionType, leastFn, =]
[}, FunctionType, greatestFn, =, registry, ., getNativeFunctionType, (, JSTypeNative, ., U2U_CONSTRUCTOR_TYPE, ), ;, FunctionType, leastFn, =, registry, ., getNativeFunctionType, (]
[}, FunctionType, greatestFn, =, registry, ., getNativeFunctionType, (, JSTypeNative, ., U2U_CONSTRUCTOR_TYPE, ), ;, FunctionType, leastFn, =, registry, ., getNativeFunctionType, (]
[getNativeFunctionType, (, JSTypeNative, ., U2U_CONSTRUCTOR_TYPE, ), ;, FunctionType, leastFn, =, registry, ., getNativeFunctionType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ;, return]
[getNativeFunctionType, (, JSTypeNative, ., U2U_CONSTRUCTOR_TYPE, ), ;, FunctionType, leastFn, =, registry, ., getNativeFunctionType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ;, return]
[JSTypeNative, ., U2U_CONSTRUCTOR_TYPE, ), ;, FunctionType, leastFn, =, registry, ., getNativeFunctionType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ;, return, leastSuper, ?]
[U2U_CONSTRUCTOR_TYPE, ), ;, FunctionType, leastFn, =, registry, ., getNativeFunctionType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ;, return, leastSuper, ?, greatestFn, :]
[?, greatestFn, :, leastFn, ;, }, private, FunctionType, tryMergeFunctionPiecewise, (, FunctionType, other, ,, boolean, leastSuper, ), {, Node, newParamsNode, =]
[;, }, private, FunctionType, tryMergeFunctionPiecewise, (, FunctionType, other, ,, boolean, leastSuper, ), {, Node, newParamsNode, =, null, ;, if, (]
[;, }, private, FunctionType, tryMergeFunctionPiecewise, (, FunctionType, other, ,, boolean, leastSuper, ), {, Node, newParamsNode, =, null, ;, if, (]
[tryMergeFunctionPiecewise, (, FunctionType, other, ,, boolean, leastSuper, ), {, Node, newParamsNode, =, null, ;, if, (, call, ., hasEqualParameters, (]
[tryMergeFunctionPiecewise, (, FunctionType, other, ,, boolean, leastSuper, ), {, Node, newParamsNode, =, null, ;, if, (, call, ., hasEqualParameters, (]
[,, boolean, leastSuper, ), {, Node, newParamsNode, =, null, ;, if, (, call, ., hasEqualParameters, (, other, ., call, ,]
[,, boolean, leastSuper, ), {, Node, newParamsNode, =, null, ;, if, (, call, ., hasEqualParameters, (, other, ., call, ,]
[newParamsNode, =, null, ;, if, (, call, ., hasEqualParameters, (, other, ., call, ,, EquivalenceMethod, ., IDENTITY, ), ), {]
[null, ;, if, (, call, ., hasEqualParameters, (, other, ., call, ,, EquivalenceMethod, ., IDENTITY, ), ), {, newParamsNode, =]
[null, ;, if, (, call, ., hasEqualParameters, (, other, ., call, ,, EquivalenceMethod, ., IDENTITY, ), ), {, newParamsNode, =]
[other, ., call, ,, EquivalenceMethod, ., IDENTITY, ), ), {, newParamsNode, =, call, ., parameters, ;, }, else, {, return]
[IDENTITY, ), ), {, newParamsNode, =, call, ., parameters, ;, }, else, {, return, null, ;, }, JSType, newReturnType, =]
[IDENTITY, ), ), {, newParamsNode, =, call, ., parameters, ;, }, else, {, return, null, ;, }, JSType, newReturnType, =]
[), {, newParamsNode, =, call, ., parameters, ;, }, else, {, return, null, ;, }, JSType, newReturnType, =, leastSuper, ?]
[), {, newParamsNode, =, call, ., parameters, ;, }, else, {, return, null, ;, }, JSType, newReturnType, =, leastSuper, ?]
[), {, newParamsNode, =, call, ., parameters, ;, }, else, {, return, null, ;, }, JSType, newReturnType, =, leastSuper, ?]
[parameters, ;, }, else, {, return, null, ;, }, JSType, newReturnType, =, leastSuper, ?, call, ., returnType, ., getLeastSupertype, (]
[parameters, ;, }, else, {, return, null, ;, }, JSType, newReturnType, =, leastSuper, ?, call, ., returnType, ., getLeastSupertype, (]
[parameters, ;, }, else, {, return, null, ;, }, JSType, newReturnType, =, leastSuper, ?, call, ., returnType, ., getLeastSupertype, (]
[;, }, JSType, newReturnType, =, leastSuper, ?, call, ., returnType, ., getLeastSupertype, (, other, ., call, ., returnType, ), :]
[;, }, JSType, newReturnType, =, leastSuper, ?, call, ., returnType, ., getLeastSupertype, (, other, ., call, ., returnType, ), :]
[;, }, JSType, newReturnType, =, leastSuper, ?, call, ., returnType, ., getLeastSupertype, (, other, ., call, ., returnType, ), :]
[?, call, ., returnType, ., getLeastSupertype, (, other, ., call, ., returnType, ), :, call, ., returnType, ., getGreatestSubtype, (]
[?, call, ., returnType, ., getLeastSupertype, (, other, ., call, ., returnType, ), :, call, ., returnType, ., getGreatestSubtype, (]
[?, call, ., returnType, ., getLeastSupertype, (, other, ., call, ., returnType, ), :, call, ., returnType, ., getGreatestSubtype, (]
[., returnType, ), :, call, ., returnType, ., getGreatestSubtype, (, other, ., call, ., returnType, ), ;, JSType, newTypeOfThis, =]
[call, ., returnType, ., getGreatestSubtype, (, other, ., call, ., returnType, ), ;, JSType, newTypeOfThis, =, null, ;, if, (]
[returnType, ., getGreatestSubtype, (, other, ., call, ., returnType, ), ;, JSType, newTypeOfThis, =, null, ;, if, (, isEquivalent, (]
[getGreatestSubtype, (, other, ., call, ., returnType, ), ;, JSType, newTypeOfThis, =, null, ;, if, (, isEquivalent, (, typeOfThis, ,]
[getGreatestSubtype, (, other, ., call, ., returnType, ), ;, JSType, newTypeOfThis, =, null, ;, if, (, isEquivalent, (, typeOfThis, ,]
[returnType, ), ;, JSType, newTypeOfThis, =, null, ;, if, (, isEquivalent, (, typeOfThis, ,, other, ., typeOfThis, ), ), {]
[;, JSType, newTypeOfThis, =, null, ;, if, (, isEquivalent, (, typeOfThis, ,, other, ., typeOfThis, ), ), {, newTypeOfThis, =]
[isEquivalent, (, typeOfThis, ,, other, ., typeOfThis, ), ), {, newTypeOfThis, =, typeOfThis, ;, }, else, {, JSType, maybeNewTypeOfThis, =]
[isEquivalent, (, typeOfThis, ,, other, ., typeOfThis, ), ), {, newTypeOfThis, =, typeOfThis, ;, }, else, {, JSType, maybeNewTypeOfThis, =]
[typeOfThis, ,, other, ., typeOfThis, ), ), {, newTypeOfThis, =, typeOfThis, ;, }, else, {, JSType, maybeNewTypeOfThis, =, leastSuper, ?]
[typeOfThis, ,, other, ., typeOfThis, ), ), {, newTypeOfThis, =, typeOfThis, ;, }, else, {, JSType, maybeNewTypeOfThis, =, leastSuper, ?]
[typeOfThis, ), ), {, newTypeOfThis, =, typeOfThis, ;, }, else, {, JSType, maybeNewTypeOfThis, =, leastSuper, ?, typeOfThis, ., getLeastSupertype, (]
[typeOfThis, ), ), {, newTypeOfThis, =, typeOfThis, ;, }, else, {, JSType, maybeNewTypeOfThis, =, leastSuper, ?, typeOfThis, ., getLeastSupertype, (]
[=, typeOfThis, ;, }, else, {, JSType, maybeNewTypeOfThis, =, leastSuper, ?, typeOfThis, ., getLeastSupertype, (, other, ., typeOfThis, ), :]
[=, typeOfThis, ;, }, else, {, JSType, maybeNewTypeOfThis, =, leastSuper, ?, typeOfThis, ., getLeastSupertype, (, other, ., typeOfThis, ), :]
[else, {, JSType, maybeNewTypeOfThis, =, leastSuper, ?, typeOfThis, ., getLeastSupertype, (, other, ., typeOfThis, ), :, typeOfThis, ., getGreatestSubtype, (]
[else, {, JSType, maybeNewTypeOfThis, =, leastSuper, ?, typeOfThis, ., getLeastSupertype, (, other, ., typeOfThis, ), :, typeOfThis, ., getGreatestSubtype, (]
[leastSuper, ?, typeOfThis, ., getLeastSupertype, (, other, ., typeOfThis, ), :, typeOfThis, ., getGreatestSubtype, (, other, ., typeOfThis, ), ;]
[typeOfThis, ., getLeastSupertype, (, other, ., typeOfThis, ), :, typeOfThis, ., getGreatestSubtype, (, other, ., typeOfThis, ), ;, newTypeOfThis, =]
[typeOfThis, ), :, typeOfThis, ., getGreatestSubtype, (, other, ., typeOfThis, ), ;, newTypeOfThis, =, maybeNewTypeOfThis, ;, }, boolean, newReturnTypeInferred, =]
[typeOfThis, ), :, typeOfThis, ., getGreatestSubtype, (, other, ., typeOfThis, ), ;, newTypeOfThis, =, maybeNewTypeOfThis, ;, }, boolean, newReturnTypeInferred, =]
[typeOfThis, ), :, typeOfThis, ., getGreatestSubtype, (, other, ., typeOfThis, ), ;, newTypeOfThis, =, maybeNewTypeOfThis, ;, }, boolean, newReturnTypeInferred, =]
[., getGreatestSubtype, (, other, ., typeOfThis, ), ;, newTypeOfThis, =, maybeNewTypeOfThis, ;, }, boolean, newReturnTypeInferred, =, call, ., returnTypeInferred, ||]
[., getGreatestSubtype, (, other, ., typeOfThis, ), ;, newTypeOfThis, =, maybeNewTypeOfThis, ;, }, boolean, newReturnTypeInferred, =, call, ., returnTypeInferred, ||]
[., getGreatestSubtype, (, other, ., typeOfThis, ), ;, newTypeOfThis, =, maybeNewTypeOfThis, ;, }, boolean, newReturnTypeInferred, =, call, ., returnTypeInferred, ||]
[;, newTypeOfThis, =, maybeNewTypeOfThis, ;, }, boolean, newReturnTypeInferred, =, call, ., returnTypeInferred, ||, other, ., call, ., returnTypeInferred, ;, return]
[maybeNewTypeOfThis, ;, }, boolean, newReturnTypeInferred, =, call, ., returnTypeInferred, ||, other, ., call, ., returnTypeInferred, ;, return, new, FunctionType, (]
[}, boolean, newReturnTypeInferred, =, call, ., returnTypeInferred, ||, other, ., call, ., returnTypeInferred, ;, return, new, FunctionType, (, registry, ,]
[newReturnTypeInferred, =, call, ., returnTypeInferred, ||, other, ., call, ., returnTypeInferred, ;, return, new, FunctionType, (, registry, ,, null, ,]
[call, ., returnTypeInferred, ||, other, ., call, ., returnTypeInferred, ;, return, new, FunctionType, (, registry, ,, null, ,, null, ,]
[||, other, ., call, ., returnTypeInferred, ;, return, new, FunctionType, (, registry, ,, null, ,, null, ,, new, ArrowType, (]
[., call, ., returnTypeInferred, ;, return, new, FunctionType, (, registry, ,, null, ,, null, ,, new, ArrowType, (, registry, ,]
[., returnTypeInferred, ;, return, new, FunctionType, (, registry, ,, null, ,, null, ,, new, ArrowType, (, registry, ,, newParamsNode, ,]
[;, return, new, FunctionType, (, registry, ,, null, ,, null, ,, new, ArrowType, (, registry, ,, newParamsNode, ,, newReturnType, ,]
[FunctionType, (, registry, ,, null, ,, null, ,, new, ArrowType, (, registry, ,, newParamsNode, ,, newReturnType, ,, newReturnTypeInferred, ), ,]
[registry, ,, null, ,, null, ,, new, ArrowType, (, registry, ,, newParamsNode, ,, newReturnType, ,, newReturnTypeInferred, ), ,, newTypeOfThis, ,]
[null, ,, null, ,, new, ArrowType, (, registry, ,, newParamsNode, ,, newReturnType, ,, newReturnTypeInferred, ), ,, newTypeOfThis, ,, null, ,]
[null, ,, new, ArrowType, (, registry, ,, newParamsNode, ,, newReturnType, ,, newReturnTypeInferred, ), ,, newTypeOfThis, ,, null, ,, false, ,]
[,, newReturnTypeInferred, ), ,, newTypeOfThis, ,, null, ,, false, ,, false, ), ;, }, public, FunctionType, getSuperClassConstructor, (, ), {]
[,, newReturnTypeInferred, ), ,, newTypeOfThis, ,, null, ,, false, ,, false, ), ;, }, public, FunctionType, getSuperClassConstructor, (, ), {]
[newTypeOfThis, ,, null, ,, false, ,, false, ), ;, }, public, FunctionType, getSuperClassConstructor, (, ), {, Preconditions, ., checkArgument, (]
[newTypeOfThis, ,, null, ,, false, ,, false, ), ;, }, public, FunctionType, getSuperClassConstructor, (, ), {, Preconditions, ., checkArgument, (]
[false, ,, false, ), ;, }, public, FunctionType, getSuperClassConstructor, (, ), {, Preconditions, ., checkArgument, (, isConstructor, (, ), ||]
[getSuperClassConstructor, (, ), {, Preconditions, ., checkArgument, (, isConstructor, (, ), ||, isInterface, (, ), ), ;, ObjectType, maybeSuperInstanceType, =]
[getSuperClassConstructor, (, ), {, Preconditions, ., checkArgument, (, isConstructor, (, ), ||, isInterface, (, ), ), ;, ObjectType, maybeSuperInstanceType, =]
[), ||, isInterface, (, ), ), ;, ObjectType, maybeSuperInstanceType, =, getPrototype, (, ), ., getImplicitPrototype, (, ), ;, if, (]
[), ||, isInterface, (, ), ), ;, ObjectType, maybeSuperInstanceType, =, getPrototype, (, ), ., getImplicitPrototype, (, ), ;, if, (]
[isInterface, (, ), ), ;, ObjectType, maybeSuperInstanceType, =, getPrototype, (, ), ., getImplicitPrototype, (, ), ;, if, (, maybeSuperInstanceType, ==]
[;, ObjectType, maybeSuperInstanceType, =, getPrototype, (, ), ., getImplicitPrototype, (, ), ;, if, (, maybeSuperInstanceType, ==, null, ), {, return]
[getPrototype, (, ), ., getImplicitPrototype, (, ), ;, if, (, maybeSuperInstanceType, ==, null, ), {, return, null, ;, }, return]
[getPrototype, (, ), ., getImplicitPrototype, (, ), ;, if, (, maybeSuperInstanceType, ==, null, ), {, return, null, ;, }, return]
[getConstructor, (, ), ;, }, public, static, ObjectType, getTopDefiningInterface, (, ObjectType, type, ,, String, propertyName, ), {, ObjectType, foundType, =]
[}, public, static, ObjectType, getTopDefiningInterface, (, ObjectType, type, ,, String, propertyName, ), {, ObjectType, foundType, =, null, ;, if, (]
[}, public, static, ObjectType, getTopDefiningInterface, (, ObjectType, type, ,, String, propertyName, ), {, ObjectType, foundType, =, null, ;, if, (]
[getTopDefiningInterface, (, ObjectType, type, ,, String, propertyName, ), {, ObjectType, foundType, =, null, ;, if, (, type, ., hasProperty, (]
[,, String, propertyName, ), {, ObjectType, foundType, =, null, ;, if, (, type, ., hasProperty, (, propertyName, ), ), {]
[propertyName, ), {, ObjectType, foundType, =, null, ;, if, (, type, ., hasProperty, (, propertyName, ), ), {, foundType, =]
[if, (, type, ., hasProperty, (, propertyName, ), ), {, foundType, =, type, ;, }, for, (, ObjectType, interfaceType, :]
[if, (, type, ., hasProperty, (, propertyName, ), ), {, foundType, =, type, ;, }, for, (, ObjectType, interfaceType, :]
[{, foundType, =, type, ;, }, for, (, ObjectType, interfaceType, :, type, ., getCtorExtendedInterfaces, (, ), ), {, if, (]
[{, foundType, =, type, ;, }, for, (, ObjectType, interfaceType, :, type, ., getCtorExtendedInterfaces, (, ), ), {, if, (]
[;, }, for, (, ObjectType, interfaceType, :, type, ., getCtorExtendedInterfaces, (, ), ), {, if, (, interfaceType, ., hasProperty, (]
[ObjectType, interfaceType, :, type, ., getCtorExtendedInterfaces, (, ), ), {, if, (, interfaceType, ., hasProperty, (, propertyName, ), ), {]
[:, type, ., getCtorExtendedInterfaces, (, ), ), {, if, (, interfaceType, ., hasProperty, (, propertyName, ), ), {, foundType, =]
[., getCtorExtendedInterfaces, (, ), ), {, if, (, interfaceType, ., hasProperty, (, propertyName, ), ), {, foundType, =, getTopDefiningInterface, (]
[(, ), ), {, if, (, interfaceType, ., hasProperty, (, propertyName, ), ), {, foundType, =, getTopDefiningInterface, (, interfaceType, ,]
[interfaceType, ., hasProperty, (, propertyName, ), ), {, foundType, =, getTopDefiningInterface, (, interfaceType, ,, propertyName, ), ;, }, }, return]
[(, interfaceType, ,, propertyName, ), ;, }, }, return, foundType, ;, }, public, ObjectType, getTopMostDefiningType, (, String, propertyName, ), {]
[(, interfaceType, ,, propertyName, ), ;, }, }, return, foundType, ;, }, public, ObjectType, getTopMostDefiningType, (, String, propertyName, ), {]
[), ;, }, }, return, foundType, ;, }, public, ObjectType, getTopMostDefiningType, (, String, propertyName, ), {, Preconditions, ., checkState, (]
[), ;, }, }, return, foundType, ;, }, public, ObjectType, getTopMostDefiningType, (, String, propertyName, ), {, Preconditions, ., checkState, (]
[return, foundType, ;, }, public, ObjectType, getTopMostDefiningType, (, String, propertyName, ), {, Preconditions, ., checkState, (, isConstructor, (, ), ||]
[ObjectType, getTopMostDefiningType, (, String, propertyName, ), {, Preconditions, ., checkState, (, isConstructor, (, ), ||, isInterface, (, ), ), ;]
[ObjectType, getTopMostDefiningType, (, String, propertyName, ), {, Preconditions, ., checkState, (, isConstructor, (, ), ||, isInterface, (, ), ), ;]
[propertyName, ), {, Preconditions, ., checkState, (, isConstructor, (, ), ||, isInterface, (, ), ), ;, Preconditions, ., checkArgument, (]
[propertyName, ), {, Preconditions, ., checkState, (, isConstructor, (, ), ||, isInterface, (, ), ), ;, Preconditions, ., checkArgument, (]
[(, isConstructor, (, ), ||, isInterface, (, ), ), ;, Preconditions, ., checkArgument, (, getInstanceType, (, ), ., hasProperty, (]
[), ), ;, Preconditions, ., checkArgument, (, getInstanceType, (, ), ., hasProperty, (, propertyName, ), ), ;, FunctionType, ctor, =]
[., checkArgument, (, getInstanceType, (, ), ., hasProperty, (, propertyName, ), ), ;, FunctionType, ctor, =, this, ;, if, (]
[., hasProperty, (, propertyName, ), ), ;, FunctionType, ctor, =, this, ;, if, (, isInterface, (, ), ), {, return]
[(, propertyName, ), ), ;, FunctionType, ctor, =, this, ;, if, (, isInterface, (, ), ), {, return, getTopDefiningInterface, (]
[;, FunctionType, ctor, =, this, ;, if, (, isInterface, (, ), ), {, return, getTopDefiningInterface, (, getInstanceType, (, ), ,]
[(, isInterface, (, ), ), {, return, getTopDefiningInterface, (, getInstanceType, (, ), ,, propertyName, ), ;, }, ObjectType, topInstanceType, =]
[), {, return, getTopDefiningInterface, (, getInstanceType, (, ), ,, propertyName, ), ;, }, ObjectType, topInstanceType, =, null, ;, do, {]
[return, getTopDefiningInterface, (, getInstanceType, (, ), ,, propertyName, ), ;, }, ObjectType, topInstanceType, =, null, ;, do, {, topInstanceType, =]
[return, getTopDefiningInterface, (, getInstanceType, (, ), ,, propertyName, ), ;, }, ObjectType, topInstanceType, =, null, ;, do, {, topInstanceType, =]
[,, propertyName, ), ;, }, ObjectType, topInstanceType, =, null, ;, do, {, topInstanceType, =, ctor, ., getInstanceType, (, ), ;]
[), ;, }, ObjectType, topInstanceType, =, null, ;, do, {, topInstanceType, =, ctor, ., getInstanceType, (, ), ;, ctor, =]
[), ;, }, ObjectType, topInstanceType, =, null, ;, do, {, topInstanceType, =, ctor, ., getInstanceType, (, ), ;, ctor, =]
[{, topInstanceType, =, ctor, ., getInstanceType, (, ), ;, ctor, =, ctor, ., getSuperClassConstructor, (, ), ;, }, while, (]
[{, topInstanceType, =, ctor, ., getInstanceType, (, ), ;, ctor, =, ctor, ., getSuperClassConstructor, (, ), ;, }, while, (]
[{, topInstanceType, =, ctor, ., getInstanceType, (, ), ;, ctor, =, ctor, ., getSuperClassConstructor, (, ), ;, }, while, (]
[=, ctor, ., getInstanceType, (, ), ;, ctor, =, ctor, ., getSuperClassConstructor, (, ), ;, }, while, (, ctor, !=]
[., getInstanceType, (, ), ;, ctor, =, ctor, ., getSuperClassConstructor, (, ), ;, }, while, (, ctor, !=, null, &&]
[., getInstanceType, (, ), ;, ctor, =, ctor, ., getSuperClassConstructor, (, ), ;, }, while, (, ctor, !=, null, &&]
[., getInstanceType, (, ), ;, ctor, =, ctor, ., getSuperClassConstructor, (, ), ;, }, while, (, ctor, !=, null, &&]
[., getSuperClassConstructor, (, ), ;, }, while, (, ctor, !=, null, &&, ctor, ., getPrototype, (, ), ., hasProperty, (]
[}, while, (, ctor, !=, null, &&, ctor, ., getPrototype, (, ), ., hasProperty, (, propertyName, ), ), ;, return]
[propertyName, ), ), ;, return, topInstanceType, ;, }, boolean, checkFunctionEquivalenceHelper, (, FunctionType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (]
[}, boolean, checkFunctionEquivalenceHelper, (, FunctionType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (, isConstructor, (, ), ), {, if, (]
[}, boolean, checkFunctionEquivalenceHelper, (, FunctionType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (, isConstructor, (, ), ), {, if, (]
[eqMethod, ), {, if, (, isConstructor, (, ), ), {, if, (, that, ., isConstructor, (, ), ), {, return]
[eqMethod, ), {, if, (, isConstructor, (, ), ), {, if, (, that, ., isConstructor, (, ), ), {, return]
[{, if, (, isConstructor, (, ), ), {, if, (, that, ., isConstructor, (, ), ), {, return, this, ==]
[(, ), ), {, if, (, that, ., isConstructor, (, ), ), {, return, this, ==, that, ;, }, return]
[(, that, ., isConstructor, (, ), ), {, return, this, ==, that, ;, }, return, false, ;, }, if, (]
[{, return, this, ==, that, ;, }, return, false, ;, }, if, (, isInterface, (, ), ), {, if, (]
[{, return, this, ==, that, ;, }, return, false, ;, }, if, (, isInterface, (, ), ), {, if, (]
[false, ;, }, if, (, isInterface, (, ), ), {, if, (, that, ., isInterface, (, ), ), {, return]
[false, ;, }, if, (, isInterface, (, ), ), {, if, (, that, ., isInterface, (, ), ), {, return]
[(, ), ), {, if, (, that, ., isInterface, (, ), ), {, return, getReferenceName, (, ), ., equals, (]
[(, ), ), {, if, (, that, ., isInterface, (, ), ), {, return, getReferenceName, (, ), ., equals, (]
[(, ), ), {, return, getReferenceName, (, ), ., equals, (, that, ., getReferenceName, (, ), ), ;, }, return]
[getReferenceName, (, ), ., equals, (, that, ., getReferenceName, (, ), ), ;, }, return, false, ;, }, if, (]
[getReferenceName, (, ), ., equals, (, that, ., getReferenceName, (, ), ), ;, }, return, false, ;, }, if, (]
[getReferenceName, (, ), ), ;, }, return, false, ;, }, if, (, that, ., isInterface, (, ), ), {, return]
[;, }, return, false, ;, }, if, (, that, ., isInterface, (, ), ), {, return, false, ;, }, return]
[;, }, return, false, ;, }, if, (, that, ., isInterface, (, ), ), {, return, false, ;, }, return]
[;, }, return, false, ;, }, if, (, that, ., isInterface, (, ), ), {, return, false, ;, }, return]
[;, }, if, (, that, ., isInterface, (, ), ), {, return, false, ;, }, return, typeOfThis, ., checkEquivalenceHelper, (]
[;, }, if, (, that, ., isInterface, (, ), ), {, return, false, ;, }, return, typeOfThis, ., checkEquivalenceHelper, (]
[that, ., isInterface, (, ), ), {, return, false, ;, }, return, typeOfThis, ., checkEquivalenceHelper, (, that, ., typeOfThis, ,]
[(, ), ), {, return, false, ;, }, return, typeOfThis, ., checkEquivalenceHelper, (, that, ., typeOfThis, ,, eqMethod, ), &&]
[(, ), ), {, return, false, ;, }, return, typeOfThis, ., checkEquivalenceHelper, (, that, ., typeOfThis, ,, eqMethod, ), &&]
[return, false, ;, }, return, typeOfThis, ., checkEquivalenceHelper, (, that, ., typeOfThis, ,, eqMethod, ), &&, call, ., checkArrowEquivalenceHelper, (]
[return, false, ;, }, return, typeOfThis, ., checkEquivalenceHelper, (, that, ., typeOfThis, ,, eqMethod, ), &&, call, ., checkArrowEquivalenceHelper, (]
[return, typeOfThis, ., checkEquivalenceHelper, (, that, ., typeOfThis, ,, eqMethod, ), &&, call, ., checkArrowEquivalenceHelper, (, that, ., call, ,]
[., checkArrowEquivalenceHelper, (, that, ., call, ,, eqMethod, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[., checkArrowEquivalenceHelper, (, that, ., call, ,, eqMethod, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[., call, ,, eqMethod, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, isInterface, (, ), ?]
[., call, ,, eqMethod, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, isInterface, (, ), ?]
[Override, public, int, hashCode, (, ), {, return, isInterface, (, ), ?, getReferenceName, (, ), ., hashCode, (, ), :]
[Override, public, int, hashCode, (, ), {, return, isInterface, (, ), ?, getReferenceName, (, ), ., hashCode, (, ), :]
[hashCode, (, ), :, call, ., hashCode, (, ), ;, }, public, boolean, hasEqualCallType, (, FunctionType, otherType, ), {, return]
[hashCode, (, ), :, call, ., hashCode, (, ), ;, }, public, boolean, hasEqualCallType, (, FunctionType, otherType, ), {, return]
[hashCode, (, ), :, call, ., hashCode, (, ), ;, }, public, boolean, hasEqualCallType, (, FunctionType, otherType, ), {, return]
[hashCode, (, ), ;, }, public, boolean, hasEqualCallType, (, FunctionType, otherType, ), {, return, this, ., call, ., checkArrowEquivalenceHelper, (]
[hashCode, (, ), ;, }, public, boolean, hasEqualCallType, (, FunctionType, otherType, ), {, return, this, ., call, ., checkArrowEquivalenceHelper, (]
[}, public, boolean, hasEqualCallType, (, FunctionType, otherType, ), {, return, this, ., call, ., checkArrowEquivalenceHelper, (, otherType, ., call, ,]
[}, public, boolean, hasEqualCallType, (, FunctionType, otherType, ), {, return, this, ., call, ., checkArrowEquivalenceHelper, (, otherType, ., call, ,]
[., call, ,, EquivalenceMethod, ., IDENTITY, ), ;, }, @, Override, String, toStringHelper, (, boolean, forAnnotations, ), {, if, (]
[., call, ,, EquivalenceMethod, ., IDENTITY, ), ;, }, @, Override, String, toStringHelper, (, boolean, forAnnotations, ), {, if, (]
[call, ,, EquivalenceMethod, ., IDENTITY, ), ;, }, @, Override, String, toStringHelper, (, boolean, forAnnotations, ), {, if, (, !]
[IDENTITY, ), ;, }, @, Override, String, toStringHelper, (, boolean, forAnnotations, ), {, if, (, !, isPrettyPrint, (, ), ||]
[IDENTITY, ), ;, }, @, Override, String, toStringHelper, (, boolean, forAnnotations, ), {, if, (, !, isPrettyPrint, (, ), ||]
[;, }, @, Override, String, toStringHelper, (, boolean, forAnnotations, ), {, if, (, !, isPrettyPrint, (, ), ||, this, ==]
[;, }, @, Override, String, toStringHelper, (, boolean, forAnnotations, ), {, if, (, !, isPrettyPrint, (, ), ||, this, ==]
[String, toStringHelper, (, boolean, forAnnotations, ), {, if, (, !, isPrettyPrint, (, ), ||, this, ==, registry, ., getNativeType, (]
[String, toStringHelper, (, boolean, forAnnotations, ), {, if, (, !, isPrettyPrint, (, ), ||, this, ==, registry, ., getNativeType, (]
[if, (, !, isPrettyPrint, (, ), ||, this, ==, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ), {, return]
[isPrettyPrint, (, ), ||, this, ==, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ), {, return, "Function", ;, }]
[), ||, this, ==, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ), {, return, "Function", ;, }, setPrettyPrint, (]
[getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ), {, return, "Function", ;, }, setPrettyPrint, (, false, ), ;, StringBuilder, b, =]
[., FUNCTION_INSTANCE_TYPE, ), ), {, return, "Function", ;, }, setPrettyPrint, (, false, ), ;, StringBuilder, b, =, new, StringBuilder, (]
[), {, return, "Function", ;, }, setPrettyPrint, (, false, ), ;, StringBuilder, b, =, new, StringBuilder, (, 32, ), ;]
[), {, return, "Function", ;, }, setPrettyPrint, (, false, ), ;, StringBuilder, b, =, new, StringBuilder, (, 32, ), ;]
[;, }, setPrettyPrint, (, false, ), ;, StringBuilder, b, =, new, StringBuilder, (, 32, ), ;, b, ., append, (]
[;, StringBuilder, b, =, new, StringBuilder, (, 32, ), ;, b, ., append, (, "function (", ), ;, int, paramNum, =]
[;, StringBuilder, b, =, new, StringBuilder, (, 32, ), ;, b, ., append, (, "function (", ), ;, int, paramNum, =]
[;, StringBuilder, b, =, new, StringBuilder, (, 32, ), ;, b, ., append, (, "function (", ), ;, int, paramNum, =]
[., append, (, "function (", ), ;, int, paramNum, =, call, ., parameters, ., getChildCount, (, ), ;, boolean, hasKnownTypeOfThis, =]
[append, (, "function (", ), ;, int, paramNum, =, call, ., parameters, ., getChildCount, (, ), ;, boolean, hasKnownTypeOfThis, =, !]
[(, "function (", ), ;, int, paramNum, =, call, ., parameters, ., getChildCount, (, ), ;, boolean, hasKnownTypeOfThis, =, !, (]
[(, "function (", ), ;, int, paramNum, =, call, ., parameters, ., getChildCount, (, ), ;, boolean, hasKnownTypeOfThis, =, !, (]
[call, ., parameters, ., getChildCount, (, ), ;, boolean, hasKnownTypeOfThis, =, !, (, typeOfThis, instanceof, UnknownType, ), ;, if, (]
[(, ), ;, boolean, hasKnownTypeOfThis, =, !, (, typeOfThis, instanceof, UnknownType, ), ;, if, (, hasKnownTypeOfThis, ), {, if, (]
[=, !, (, typeOfThis, instanceof, UnknownType, ), ;, if, (, hasKnownTypeOfThis, ), {, if, (, isConstructor, (, ), ), {]
[=, !, (, typeOfThis, instanceof, UnknownType, ), ;, if, (, hasKnownTypeOfThis, ), {, if, (, isConstructor, (, ), ), {]
[instanceof, UnknownType, ), ;, if, (, hasKnownTypeOfThis, ), {, if, (, isConstructor, (, ), ), {, b, ., append, (]
[hasKnownTypeOfThis, ), {, if, (, isConstructor, (, ), ), {, b, ., append, (, "new:", ), ;, }, else, {]
[hasKnownTypeOfThis, ), {, if, (, isConstructor, (, ), ), {, b, ., append, (, "new:", ), ;, }, else, {]
[(, isConstructor, (, ), ), {, b, ., append, (, "new:", ), ;, }, else, {, b, ., append, (]
[), {, b, ., append, (, "new:", ), ;, }, else, {, b, ., append, (, "this:", ), ;, }]
[), {, b, ., append, (, "new:", ), ;, }, else, {, b, ., append, (, "this:", ), ;, }]
[append, (, "new:", ), ;, }, else, {, b, ., append, (, "this:", ), ;, }, b, ., append, (]
[append, (, "new:", ), ;, }, else, {, b, ., append, (, "this:", ), ;, }, b, ., append, (]
[;, }, else, {, b, ., append, (, "this:", ), ;, }, b, ., append, (, typeOfThis, ., toStringHelper, (]
[(, "this:", ), ;, }, b, ., append, (, typeOfThis, ., toStringHelper, (, forAnnotations, ), ), ;, }, if, (]
[(, "this:", ), ;, }, b, ., append, (, typeOfThis, ., toStringHelper, (, forAnnotations, ), ), ;, }, if, (]
[), ;, }, b, ., append, (, typeOfThis, ., toStringHelper, (, forAnnotations, ), ), ;, }, if, (, paramNum, >]
[append, (, typeOfThis, ., toStringHelper, (, forAnnotations, ), ), ;, }, if, (, paramNum, >, 0, ), {, if, (]
[., toStringHelper, (, forAnnotations, ), ), ;, }, if, (, paramNum, >, 0, ), {, if, (, hasKnownTypeOfThis, ), {]
[., toStringHelper, (, forAnnotations, ), ), ;, }, if, (, paramNum, >, 0, ), {, if, (, hasKnownTypeOfThis, ), {]
[), ), ;, }, if, (, paramNum, >, 0, ), {, if, (, hasKnownTypeOfThis, ), {, b, ., append, (]
[>, 0, ), {, if, (, hasKnownTypeOfThis, ), {, b, ., append, (, ", ", ), ;, }, Node, p, =]
[>, 0, ), {, if, (, hasKnownTypeOfThis, ), {, b, ., append, (, ", ", ), ;, }, Node, p, =]
[>, 0, ), {, if, (, hasKnownTypeOfThis, ), {, b, ., append, (, ", ", ), ;, }, Node, p, =]
[{, b, ., append, (, ", ", ), ;, }, Node, p, =, call, ., parameters, ., getFirstChild, (, ), ;]
[., append, (, ", ", ), ;, }, Node, p, =, call, ., parameters, ., getFirstChild, (, ), ;, appendArgString, (]
[(, ", ", ), ;, }, Node, p, =, call, ., parameters, ., getFirstChild, (, ), ;, appendArgString, (, b, ,]
[), ;, }, Node, p, =, call, ., parameters, ., getFirstChild, (, ), ;, appendArgString, (, b, ,, p, ,]
[Node, p, =, call, ., parameters, ., getFirstChild, (, ), ;, appendArgString, (, b, ,, p, ,, forAnnotations, ), ;]
[=, call, ., parameters, ., getFirstChild, (, ), ;, appendArgString, (, b, ,, p, ,, forAnnotations, ), ;, p, =]
[=, call, ., parameters, ., getFirstChild, (, ), ;, appendArgString, (, b, ,, p, ,, forAnnotations, ), ;, p, =]
[;, appendArgString, (, b, ,, p, ,, forAnnotations, ), ;, p, =, p, ., getNext, (, ), ;, while, (]
[;, appendArgString, (, b, ,, p, ,, forAnnotations, ), ;, p, =, p, ., getNext, (, ), ;, while, (]
[(, b, ,, p, ,, forAnnotations, ), ;, p, =, p, ., getNext, (, ), ;, while, (, p, !=]
[p, ,, forAnnotations, ), ;, p, =, p, ., getNext, (, ), ;, while, (, p, !=, null, ), {]
[p, ,, forAnnotations, ), ;, p, =, p, ., getNext, (, ), ;, while, (, p, !=, null, ), {]
[;, p, =, p, ., getNext, (, ), ;, while, (, p, !=, null, ), {, b, ., append, (]
[p, ., getNext, (, ), ;, while, (, p, !=, null, ), {, b, ., append, (, ", ", ), ;]
[getNext, (, ), ;, while, (, p, !=, null, ), {, b, ., append, (, ", ", ), ;, appendArgString, (]
[), ;, while, (, p, !=, null, ), {, b, ., append, (, ", ", ), ;, appendArgString, (, b, ,]
[while, (, p, !=, null, ), {, b, ., append, (, ", ", ), ;, appendArgString, (, b, ,, p, ,]
[!=, null, ), {, b, ., append, (, ", ", ), ;, appendArgString, (, b, ,, p, ,, forAnnotations, ), ;]
[), {, b, ., append, (, ", ", ), ;, appendArgString, (, b, ,, p, ,, forAnnotations, ), ;, p, =]
[), {, b, ., append, (, ", ", ), ;, appendArgString, (, b, ,, p, ,, forAnnotations, ), ;, p, =]
[;, appendArgString, (, b, ,, p, ,, forAnnotations, ), ;, p, =, p, ., getNext, (, ), ;, }, }]
[;, appendArgString, (, b, ,, p, ,, forAnnotations, ), ;, p, =, p, ., getNext, (, ), ;, }, }]
[,, p, ,, forAnnotations, ), ;, p, =, p, ., getNext, (, ), ;, }, }, b, ., append, (]
[forAnnotations, ), ;, p, =, p, ., getNext, (, ), ;, }, }, b, ., append, (, "): ", ), ;]
[forAnnotations, ), ;, p, =, p, ., getNext, (, ), ;, }, }, b, ., append, (, "): ", ), ;]
[=, p, ., getNext, (, ), ;, }, }, b, ., append, (, "): ", ), ;, b, ., append, (]
[=, p, ., getNext, (, ), ;, }, }, b, ., append, (, "): ", ), ;, b, ., append, (]
[=, p, ., getNext, (, ), ;, }, }, b, ., append, (, "): ", ), ;, b, ., append, (]
[;, }, }, b, ., append, (, "): ", ), ;, b, ., append, (, call, ., returnType, ., toStringHelper, (]
[., append, (, "): ", ), ;, b, ., append, (, call, ., returnType, ., toStringHelper, (, forAnnotations, ), ), ;]
[(, "): ", ), ;, b, ., append, (, call, ., returnType, ., toStringHelper, (, forAnnotations, ), ), ;, setPrettyPrint, (]
[b, ., append, (, call, ., returnType, ., toStringHelper, (, forAnnotations, ), ), ;, setPrettyPrint, (, true, ), ;, return]
[b, ., append, (, call, ., returnType, ., toStringHelper, (, forAnnotations, ), ), ;, setPrettyPrint, (, true, ), ;, return]
[(, ), ;, }, private, void, appendArgString, (, StringBuilder, b, ,, Node, p, ,, boolean, forAnnotations, ), {, if, (]
[(, ), ;, }, private, void, appendArgString, (, StringBuilder, b, ,, Node, p, ,, boolean, forAnnotations, ), {, if, (]
[(, StringBuilder, b, ,, Node, p, ,, boolean, forAnnotations, ), {, if, (, p, ., isVarArgs, (, ), ), {]
[b, ,, Node, p, ,, boolean, forAnnotations, ), {, if, (, p, ., isVarArgs, (, ), ), {, appendVarArgsString, (]
[Node, p, ,, boolean, forAnnotations, ), {, if, (, p, ., isVarArgs, (, ), ), {, appendVarArgsString, (, b, ,]
[Node, p, ,, boolean, forAnnotations, ), {, if, (, p, ., isVarArgs, (, ), ), {, appendVarArgsString, (, b, ,]
[{, if, (, p, ., isVarArgs, (, ), ), {, appendVarArgsString, (, b, ,, p, ., getJSType, (, ), ,]
[), ), {, appendVarArgsString, (, b, ,, p, ., getJSType, (, ), ,, forAnnotations, ), ;, }, else, if, (]
[), ), {, appendVarArgsString, (, b, ,, p, ., getJSType, (, ), ,, forAnnotations, ), ;, }, else, if, (]
[p, ., getJSType, (, ), ,, forAnnotations, ), ;, }, else, if, (, p, ., isOptionalArg, (, ), ), {]
[getJSType, (, ), ,, forAnnotations, ), ;, }, else, if, (, p, ., isOptionalArg, (, ), ), {, appendOptionalArgString, (]
[), ,, forAnnotations, ), ;, }, else, if, (, p, ., isOptionalArg, (, ), ), {, appendOptionalArgString, (, b, ,]
[), ,, forAnnotations, ), ;, }, else, if, (, p, ., isOptionalArg, (, ), ), {, appendOptionalArgString, (, b, ,]
[else, if, (, p, ., isOptionalArg, (, ), ), {, appendOptionalArgString, (, b, ,, p, ., getJSType, (, ), ,]
[(, ), ), {, appendOptionalArgString, (, b, ,, p, ., getJSType, (, ), ,, forAnnotations, ), ;, }, else, {]
[(, ), ), {, appendOptionalArgString, (, b, ,, p, ., getJSType, (, ), ,, forAnnotations, ), ;, }, else, {]
[appendOptionalArgString, (, b, ,, p, ., getJSType, (, ), ,, forAnnotations, ), ;, }, else, {, b, ., append, (]
[appendOptionalArgString, (, b, ,, p, ., getJSType, (, ), ,, forAnnotations, ), ;, }, else, {, b, ., append, (]
[appendOptionalArgString, (, b, ,, p, ., getJSType, (, ), ,, forAnnotations, ), ;, }, else, {, b, ., append, (]
[), ,, forAnnotations, ), ;, }, else, {, b, ., append, (, p, ., getJSType, (, ), ., toStringHelper, (]
[), ;, }, }, private, void, appendVarArgsString, (, StringBuilder, builder, ,, JSType, paramType, ,, boolean, forAnnotations, ), {, if, (]
[), ;, }, }, private, void, appendVarArgsString, (, StringBuilder, builder, ,, JSType, paramType, ,, boolean, forAnnotations, ), {, if, (]
[(, StringBuilder, builder, ,, JSType, paramType, ,, boolean, forAnnotations, ), {, if, (, paramType, ., isUnionType, (, ), ), {]
[builder, ,, JSType, paramType, ,, boolean, forAnnotations, ), {, if, (, paramType, ., isUnionType, (, ), ), {, paramType, =]
[builder, ,, JSType, paramType, ,, boolean, forAnnotations, ), {, if, (, paramType, ., isUnionType, (, ), ), {, paramType, =]
[builder, ,, JSType, paramType, ,, boolean, forAnnotations, ), {, if, (, paramType, ., isUnionType, (, ), ), {, paramType, =]
[{, if, (, paramType, ., isUnionType, (, ), ), {, paramType, =, paramType, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (]
[{, if, (, paramType, ., isUnionType, (, ), ), {, paramType, =, paramType, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (]
[., isUnionType, (, ), ), {, paramType, =, paramType, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (, registry, ., getNativeType, (]
[., isUnionType, (, ), ), {, paramType, =, paramType, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (, registry, ., getNativeType, (]
[=, paramType, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (, registry, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ), ;, }]
[=, paramType, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (, registry, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ), ;, }]
[=, paramType, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (, registry, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ), ;, }]
[=, paramType, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (, registry, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ), ;, }]
[(, ), ., getRestrictedUnion, (, registry, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ), ;, }, builder, ., append, (]
[registry, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ), ;, }, builder, ., append, (, "...[", ), ., append, (]
[registry, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ), ;, }, builder, ., append, (, "...[", ), ., append, (]
[JSTypeNative, ., VOID_TYPE, ), ), ;, }, builder, ., append, (, "...[", ), ., append, (, paramType, ., toStringHelper, (]
[}, builder, ., append, (, "...[", ), ., append, (, paramType, ., toStringHelper, (, forAnnotations, ), ), ., append, (]
["]", ), ;, }, private, void, appendOptionalArgString, (, StringBuilder, builder, ,, JSType, paramType, ,, boolean, forAnnotations, ), {, if, (]
["]", ), ;, }, private, void, appendOptionalArgString, (, StringBuilder, builder, ,, JSType, paramType, ,, boolean, forAnnotations, ), {, if, (]
[(, StringBuilder, builder, ,, JSType, paramType, ,, boolean, forAnnotations, ), {, if, (, paramType, ., isUnionType, (, ), ), {]
[builder, ,, JSType, paramType, ,, boolean, forAnnotations, ), {, if, (, paramType, ., isUnionType, (, ), ), {, paramType, =]
[builder, ,, JSType, paramType, ,, boolean, forAnnotations, ), {, if, (, paramType, ., isUnionType, (, ), ), {, paramType, =]
[builder, ,, JSType, paramType, ,, boolean, forAnnotations, ), {, if, (, paramType, ., isUnionType, (, ), ), {, paramType, =]
[{, if, (, paramType, ., isUnionType, (, ), ), {, paramType, =, paramType, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (]
[{, if, (, paramType, ., isUnionType, (, ), ), {, paramType, =, paramType, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (]
[., isUnionType, (, ), ), {, paramType, =, paramType, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (, registry, ., getNativeType, (]
[., isUnionType, (, ), ), {, paramType, =, paramType, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (, registry, ., getNativeType, (]
[=, paramType, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (, registry, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ), ;, }]
[=, paramType, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (, registry, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ), ;, }]
[=, paramType, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (, registry, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ), ;, }]
[(, ), ., getRestrictedUnion, (, registry, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ), ;, }, builder, ., append, (]
[(, ), ., getRestrictedUnion, (, registry, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ), ;, }, builder, ., append, (]
[(, registry, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ), ;, }, builder, ., append, (, paramType, ., toStringHelper, (]
[., VOID_TYPE, ), ), ;, }, builder, ., append, (, paramType, ., toStringHelper, (, forAnnotations, ), ), ., append, (]
[), ., append, (, "=", ), ;, }, @, Override, public, boolean, isSubtype, (, JSType, that, ), {, if, (]
[), ., append, (, "=", ), ;, }, @, Override, public, boolean, isSubtype, (, JSType, that, ), {, if, (]
["=", ), ;, }, @, Override, public, boolean, isSubtype, (, JSType, that, ), {, if, (, JSType, ., isSubtypeHelper, (]
[;, }, @, Override, public, boolean, isSubtype, (, JSType, that, ), {, if, (, JSType, ., isSubtypeHelper, (, this, ,]
[boolean, isSubtype, (, JSType, that, ), {, if, (, JSType, ., isSubtypeHelper, (, this, ,, that, ), ), {, return]
[), {, if, (, JSType, ., isSubtypeHelper, (, this, ,, that, ), ), {, return, true, ;, }, if, (]
[), {, if, (, JSType, ., isSubtypeHelper, (, this, ,, that, ), ), {, return, true, ;, }, if, (]
[that, ), ), {, return, true, ;, }, if, (, that, ., isFunctionType, (, ), ), {, FunctionType, other, =]
[that, ), ), {, return, true, ;, }, if, (, that, ., isFunctionType, (, ), ), {, FunctionType, other, =]
[if, (, that, ., isFunctionType, (, ), ), {, FunctionType, other, =, that, ., toMaybeFunctionType, (, ), ;, if, (]
[if, (, that, ., isFunctionType, (, ), ), {, FunctionType, other, =, that, ., toMaybeFunctionType, (, ), ;, if, (]
[{, FunctionType, other, =, that, ., toMaybeFunctionType, (, ), ;, if, (, other, ., isInterface, (, ), ), {, return]
[., toMaybeFunctionType, (, ), ;, if, (, other, ., isInterface, (, ), ), {, return, true, ;, }, if, (]
[(, other, ., isInterface, (, ), ), {, return, true, ;, }, if, (, isInterface, (, ), ), {, return]
[), {, return, true, ;, }, if, (, isInterface, (, ), ), {, return, false, ;, }, boolean, treatThisTypesAsCovariant, =]
[), {, return, true, ;, }, if, (, isInterface, (, ), ), {, return, false, ;, }, boolean, treatThisTypesAsCovariant, =]
[), {, return, true, ;, }, if, (, isInterface, (, ), ), {, return, false, ;, }, boolean, treatThisTypesAsCovariant, =]
[{, return, true, ;, }, if, (, isInterface, (, ), ), {, return, false, ;, }, boolean, treatThisTypesAsCovariant, =, (]
[{, return, true, ;, }, if, (, isInterface, (, ), ), {, return, false, ;, }, boolean, treatThisTypesAsCovariant, =, (]
[{, return, true, ;, }, if, (, isInterface, (, ), ), {, return, false, ;, }, boolean, treatThisTypesAsCovariant, =, (]
[{, return, true, ;, }, if, (, isInterface, (, ), ), {, return, false, ;, }, boolean, treatThisTypesAsCovariant, =, (]
[{, return, true, ;, }, if, (, isInterface, (, ), ), {, return, false, ;, }, boolean, treatThisTypesAsCovariant, =, (]
[{, return, true, ;, }, if, (, isInterface, (, ), ), {, return, false, ;, }, boolean, treatThisTypesAsCovariant, =, (]
[(, ), ), {, return, false, ;, }, boolean, treatThisTypesAsCovariant, =, (, other, ., typeOfThis, ., toObjectType, (, ), !=]
[), {, return, false, ;, }, boolean, treatThisTypesAsCovariant, =, (, other, ., typeOfThis, ., toObjectType, (, ), !=, null, &&]
[), {, return, false, ;, }, boolean, treatThisTypesAsCovariant, =, (, other, ., typeOfThis, ., toObjectType, (, ), !=, null, &&]
[), {, return, false, ;, }, boolean, treatThisTypesAsCovariant, =, (, other, ., typeOfThis, ., toObjectType, (, ), !=, null, &&]
[), {, return, false, ;, }, boolean, treatThisTypesAsCovariant, =, (, other, ., typeOfThis, ., toObjectType, (, ), !=, null, &&]
[), {, return, false, ;, }, boolean, treatThisTypesAsCovariant, =, (, other, ., typeOfThis, ., toObjectType, (, ), !=, null, &&]
[typeOfThis, ., toObjectType, (, ), !=, null, &&, other, ., typeOfThis, ., toObjectType, (, ), ., getConstructor, (, ), !=]
[toObjectType, (, ), !=, null, &&, other, ., typeOfThis, ., toObjectType, (, ), ., getConstructor, (, ), !=, null, &&]
[toObjectType, (, ), !=, null, &&, other, ., typeOfThis, ., toObjectType, (, ), ., getConstructor, (, ), !=, null, &&]
[toObjectType, (, ), !=, null, &&, other, ., typeOfThis, ., toObjectType, (, ), ., getConstructor, (, ), !=, null, &&]
[toObjectType, (, ), !=, null, &&, other, ., typeOfThis, ., toObjectType, (, ), ., getConstructor, (, ), !=, null, &&]
[toObjectType, (, ), !=, null, &&, other, ., typeOfThis, ., toObjectType, (, ), ., getConstructor, (, ), !=, null, &&]
[!=, null, &&, other, ., typeOfThis, ., toObjectType, (, ), ., getConstructor, (, ), ., isInterface, (, ), ), ||]
[!=, null, &&, other, ., typeOfThis, ., toObjectType, (, ), ., getConstructor, (, ), ., isInterface, (, ), ), ||]
[!=, null, &&, other, ., typeOfThis, ., toObjectType, (, ), ., getConstructor, (, ), ., isInterface, (, ), ), ||]
[., toObjectType, (, ), ., getConstructor, (, ), ., isInterface, (, ), ), ||, other, ., typeOfThis, ., isSubtype, (]
[., toObjectType, (, ), ., getConstructor, (, ), ., isInterface, (, ), ), ||, other, ., typeOfThis, ., isSubtype, (]
[getConstructor, (, ), ., isInterface, (, ), ), ||, other, ., typeOfThis, ., isSubtype, (, this, ., typeOfThis, ), ||]
[getConstructor, (, ), ., isInterface, (, ), ), ||, other, ., typeOfThis, ., isSubtype, (, this, ., typeOfThis, ), ||]
[getConstructor, (, ), ., isInterface, (, ), ), ||, other, ., typeOfThis, ., isSubtype, (, this, ., typeOfThis, ), ||]
[), ), ||, other, ., typeOfThis, ., isSubtype, (, this, ., typeOfThis, ), ||, this, ., typeOfThis, ., isSubtype, (]
[), ), ||, other, ., typeOfThis, ., isSubtype, (, this, ., typeOfThis, ), ||, this, ., typeOfThis, ., isSubtype, (]
[., isSubtype, (, this, ., typeOfThis, ), ||, this, ., typeOfThis, ., isSubtype, (, other, ., typeOfThis, ), ;, return]
[., isSubtype, (, this, ., typeOfThis, ), ||, this, ., typeOfThis, ., isSubtype, (, other, ., typeOfThis, ), ;, return]
[(, this, ., typeOfThis, ), ||, this, ., typeOfThis, ., isSubtype, (, other, ., typeOfThis, ), ;, return, treatThisTypesAsCovariant, &&]
[(, this, ., typeOfThis, ), ||, this, ., typeOfThis, ., isSubtype, (, other, ., typeOfThis, ), ;, return, treatThisTypesAsCovariant, &&]
[(, this, ., typeOfThis, ), ||, this, ., typeOfThis, ., isSubtype, (, other, ., typeOfThis, ), ;, return, treatThisTypesAsCovariant, &&]
[this, ., typeOfThis, ., isSubtype, (, other, ., typeOfThis, ), ;, return, treatThisTypesAsCovariant, &&, this, ., call, ., isSubtype, (]
[this, ., typeOfThis, ., isSubtype, (, other, ., typeOfThis, ), ;, return, treatThisTypesAsCovariant, &&, this, ., call, ., isSubtype, (]
[., typeOfThis, ), ;, return, treatThisTypesAsCovariant, &&, this, ., call, ., isSubtype, (, other, ., call, ), ;, }, return]
[., typeOfThis, ), ;, return, treatThisTypesAsCovariant, &&, this, ., call, ., isSubtype, (, other, ., call, ), ;, }, return]
[), ;, return, treatThisTypesAsCovariant, &&, this, ., call, ., isSubtype, (, other, ., call, ), ;, }, return, getNativeType, (]
[), ;, return, treatThisTypesAsCovariant, &&, this, ., call, ., isSubtype, (, other, ., call, ), ;, }, return, getNativeType, (]
[call, ., isSubtype, (, other, ., call, ), ;, }, return, getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ., isSubtype, (]
[), ;, }, @, Override, public, <, T, >, T, visit, (, Visitor, <, T, >, visitor, ), {, return]
[), ;, }, @, Override, public, <, T, >, T, visit, (, Visitor, <, T, >, visitor, ), {, return]
[Override, public, <, T, >, T, visit, (, Visitor, <, T, >, visitor, ), {, return, visitor, ., caseFunctionType, (]
[}, @, Override, <, T, >, T, visit, (, RelationshipVisitor, <, T, >, visitor, ,, JSType, that, ), {, return]
[}, @, Override, <, T, >, T, visit, (, RelationshipVisitor, <, T, >, visitor, ,, JSType, that, ), {, return]
[T, >, T, visit, (, RelationshipVisitor, <, T, >, visitor, ,, JSType, that, ), {, return, visitor, ., caseFunctionType, (]
[T, visit, (, RelationshipVisitor, <, T, >, visitor, ,, JSType, that, ), {, return, visitor, ., caseFunctionType, (, this, ,]
[that, ), {, return, visitor, ., caseFunctionType, (, this, ,, that, ), ;, }, public, ObjectType, getInstanceType, (, ), {]
[that, ), {, return, visitor, ., caseFunctionType, (, this, ,, that, ), ;, }, public, ObjectType, getInstanceType, (, ), {]
[visitor, ., caseFunctionType, (, this, ,, that, ), ;, }, public, ObjectType, getInstanceType, (, ), {, Preconditions, ., checkState, (]
[that, ), ;, }, public, ObjectType, getInstanceType, (, ), {, Preconditions, ., checkState, (, hasInstanceType, (, ), ), ;, return]
[that, ), ;, }, public, ObjectType, getInstanceType, (, ), {, Preconditions, ., checkState, (, hasInstanceType, (, ), ), ;, return]
[hasInstanceType, (, ), ), ;, return, typeOfThis, ., toObjectType, (, ), ;, }, void, setInstanceType, (, ObjectType, instanceType, ), {]
[), ), ;, return, typeOfThis, ., toObjectType, (, ), ;, }, void, setInstanceType, (, ObjectType, instanceType, ), {, typeOfThis, =]
[}, void, setInstanceType, (, ObjectType, instanceType, ), {, typeOfThis, =, instanceType, ;, }, public, boolean, hasInstanceType, (, ), {, return]
[}, void, setInstanceType, (, ObjectType, instanceType, ), {, typeOfThis, =, instanceType, ;, }, public, boolean, hasInstanceType, (, ), {, return]
[ObjectType, instanceType, ), {, typeOfThis, =, instanceType, ;, }, public, boolean, hasInstanceType, (, ), {, return, isConstructor, (, ), ||]
[{, return, isConstructor, (, ), ||, isInterface, (, ), ;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return]
[{, return, isConstructor, (, ), ||, isInterface, (, ), ;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return]
[{, return, isConstructor, (, ), ||, isInterface, (, ), ;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return]
[isInterface, (, ), ;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return, typeOfThis, ., isEmptyType, (, ), ?]
[isInterface, (, ), ;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return, typeOfThis, ., isEmptyType, (, ), ?]
[}, @, Override, public, JSType, getTypeOfThis, (, ), {, return, typeOfThis, ., isEmptyType, (, ), ?, registry, ., getNativeObjectType, (]
[}, @, Override, public, JSType, getTypeOfThis, (, ), {, return, typeOfThis, ., isEmptyType, (, ), ?, registry, ., getNativeObjectType, (]
[getTypeOfThis, (, ), {, return, typeOfThis, ., isEmptyType, (, ), ?, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), :]
[?, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), :, typeOfThis, ;, }, public, Node, getSource, (, ), {, return]
[public, Node, getSource, (, ), {, return, source, ;, }, public, void, setSource, (, Node, source, ), {, if, (]
[public, Node, getSource, (, ), {, return, source, ;, }, public, void, setSource, (, Node, source, ), {, if, (]
[getSource, (, ), {, return, source, ;, }, public, void, setSource, (, Node, source, ), {, if, (, prototypeSlot, !=]
[source, ;, }, public, void, setSource, (, Node, source, ), {, if, (, prototypeSlot, !=, null, ), {, if, (]
[source, ;, }, public, void, setSource, (, Node, source, ), {, if, (, prototypeSlot, !=, null, ), {, if, (]
[source, ;, }, public, void, setSource, (, Node, source, ), {, if, (, prototypeSlot, !=, null, ), {, if, (]
[}, public, void, setSource, (, Node, source, ), {, if, (, prototypeSlot, !=, null, ), {, if, (, source, ==]
[void, setSource, (, Node, source, ), {, if, (, prototypeSlot, !=, null, ), {, if, (, source, ==, null, ||]
[void, setSource, (, Node, source, ), {, if, (, prototypeSlot, !=, null, ), {, if, (, source, ==, null, ||]
[void, setSource, (, Node, source, ), {, if, (, prototypeSlot, !=, null, ), {, if, (, source, ==, null, ||]
[{, if, (, prototypeSlot, !=, null, ), {, if, (, source, ==, null, ||, prototypeSlot, ., getNode, (, ), ==]
[prototypeSlot, !=, null, ), {, if, (, source, ==, null, ||, prototypeSlot, ., getNode, (, ), ==, null, ), {]
[null, ), {, if, (, source, ==, null, ||, prototypeSlot, ., getNode, (, ), ==, null, ), {, prototypeSlot, =]
[if, (, source, ==, null, ||, prototypeSlot, ., getNode, (, ), ==, null, ), {, prototypeSlot, =, new, Property, (]
[if, (, source, ==, null, ||, prototypeSlot, ., getNode, (, ), ==, null, ), {, prototypeSlot, =, new, Property, (]
[prototypeSlot, ., getNode, (, ), ==, null, ), {, prototypeSlot, =, new, Property, (, prototypeSlot, ., getName, (, ), ,]
[prototypeSlot, ., getNode, (, ), ==, null, ), {, prototypeSlot, =, new, Property, (, prototypeSlot, ., getName, (, ), ,]
[null, ), {, prototypeSlot, =, new, Property, (, prototypeSlot, ., getName, (, ), ,, prototypeSlot, ., getType, (, ), ,]
[null, ), {, prototypeSlot, =, new, Property, (, prototypeSlot, ., getName, (, ), ,, prototypeSlot, ., getType, (, ), ,]
[Property, (, prototypeSlot, ., getName, (, ), ,, prototypeSlot, ., getType, (, ), ,, prototypeSlot, ., isTypeInferred, (, ), ,]
[(, ), ,, prototypeSlot, ., getType, (, ), ,, prototypeSlot, ., isTypeInferred, (, ), ,, source, ), ;, }, }]
[(, ), ,, prototypeSlot, ., getType, (, ), ,, prototypeSlot, ., isTypeInferred, (, ), ,, source, ), ;, }, }]
[., getType, (, ), ,, prototypeSlot, ., isTypeInferred, (, ), ,, source, ), ;, }, }, this, ., source, =]
[;, }, }, this, ., source, =, source, ;, }, private, void, addSubType, (, FunctionType, subType, ), {, if, (]
[;, }, }, this, ., source, =, source, ;, }, private, void, addSubType, (, FunctionType, subType, ), {, if, (]
[}, this, ., source, =, source, ;, }, private, void, addSubType, (, FunctionType, subType, ), {, if, (, subTypes, ==]
[source, =, source, ;, }, private, void, addSubType, (, FunctionType, subType, ), {, if, (, subTypes, ==, null, ), {]
[source, ;, }, private, void, addSubType, (, FunctionType, subType, ), {, if, (, subTypes, ==, null, ), {, subTypes, =]
[source, ;, }, private, void, addSubType, (, FunctionType, subType, ), {, if, (, subTypes, ==, null, ), {, subTypes, =]
[FunctionType, subType, ), {, if, (, subTypes, ==, null, ), {, subTypes, =, Lists, ., newArrayList, (, ), ;, }]
[FunctionType, subType, ), {, if, (, subTypes, ==, null, ), {, subTypes, =, Lists, ., newArrayList, (, ), ;, }]
[if, (, subTypes, ==, null, ), {, subTypes, =, Lists, ., newArrayList, (, ), ;, }, subTypes, ., add, (]
[(, ), ;, }, subTypes, ., add, (, subType, ), ;, }, @, Override, public, void, clearCachedValues, (, ), {]
[(, ), ;, }, subTypes, ., add, (, subType, ), ;, }, @, Override, public, void, clearCachedValues, (, ), {]
[subType, ), ;, }, @, Override, public, void, clearCachedValues, (, ), {, super, ., clearCachedValues, (, ), ;, if, (]
[subType, ), ;, }, @, Override, public, void, clearCachedValues, (, ), {, super, ., clearCachedValues, (, ), ;, if, (]
[;, }, @, Override, public, void, clearCachedValues, (, ), {, super, ., clearCachedValues, (, ), ;, if, (, subTypes, !=]
[), {, super, ., clearCachedValues, (, ), ;, if, (, subTypes, !=, null, ), {, for, (, FunctionType, subType, :]
[., clearCachedValues, (, ), ;, if, (, subTypes, !=, null, ), {, for, (, FunctionType, subType, :, subTypes, ), {]
[., clearCachedValues, (, ), ;, if, (, subTypes, !=, null, ), {, for, (, FunctionType, subType, :, subTypes, ), {]
[), {, for, (, FunctionType, subType, :, subTypes, ), {, subType, ., clearCachedValues, (, ), ;, }, }, if, (]
[{, for, (, FunctionType, subType, :, subTypes, ), {, subType, ., clearCachedValues, (, ), ;, }, }, if, (, !]
[), {, subType, ., clearCachedValues, (, ), ;, }, }, if, (, !, isNativeObjectType, (, ), ), {, if, (]
[(, ), ;, }, }, if, (, !, isNativeObjectType, (, ), ), {, if, (, hasInstanceType, (, ), ), {]
[(, ), ;, }, }, if, (, !, isNativeObjectType, (, ), ), {, if, (, hasInstanceType, (, ), ), {]
[), {, if, (, hasInstanceType, (, ), ), {, getInstanceType, (, ), ., clearCachedValues, (, ), ;, }, if, (]
[), {, if, (, hasInstanceType, (, ), ), {, getInstanceType, (, ), ., clearCachedValues, (, ), ;, }, if, (]
[if, (, hasInstanceType, (, ), ), {, getInstanceType, (, ), ., clearCachedValues, (, ), ;, }, if, (, prototypeSlot, !=]
[(, ), ), {, getInstanceType, (, ), ., clearCachedValues, (, ), ;, }, if, (, prototypeSlot, !=, null, ), {]
[(, ), ), {, getInstanceType, (, ), ., clearCachedValues, (, ), ;, }, if, (, prototypeSlot, !=, null, ), {]
[), ), {, getInstanceType, (, ), ., clearCachedValues, (, ), ;, }, if, (, prototypeSlot, !=, null, ), {, (]
[getInstanceType, (, ), ., clearCachedValues, (, ), ;, }, if, (, prototypeSlot, !=, null, ), {, (, (, ObjectType, )]
[getInstanceType, (, ), ., clearCachedValues, (, ), ;, }, if, (, prototypeSlot, !=, null, ), {, (, (, ObjectType, )]
[), ), ., clearCachedValues, (, ), ;, }, }, }, public, List, <, FunctionType, >, getSubTypes, (, ), {, return]
[<, FunctionType, >, getSubTypes, (, ), {, return, subTypes, ;, }, @, Override, public, boolean, hasCachedValues, (, ), {, return]
[<, FunctionType, >, getSubTypes, (, ), {, return, subTypes, ;, }, @, Override, public, boolean, hasCachedValues, (, ), {, return]
[<, FunctionType, >, getSubTypes, (, ), {, return, subTypes, ;, }, @, Override, public, boolean, hasCachedValues, (, ), {, return]
[>, getSubTypes, (, ), {, return, subTypes, ;, }, @, Override, public, boolean, hasCachedValues, (, ), {, return, prototypeSlot, !=]
[(, ), {, return, subTypes, ;, }, @, Override, public, boolean, hasCachedValues, (, ), {, return, prototypeSlot, !=, null, ||]
[(, ), {, return, subTypes, ;, }, @, Override, public, boolean, hasCachedValues, (, ), {, return, prototypeSlot, !=, null, ||]
[hasCachedValues, (, ), ;, }, @, Override, JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {]
[), ;, }, @, Override, JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, setResolvedTypeInternal, (]
[@, Override, JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, setResolvedTypeInternal, (, this, ), ;]
[JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, setResolvedTypeInternal, (, this, ), ;, call, =]
[ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, setResolvedTypeInternal, (, this, ), ;, call, =, (, ArrowType, )]
[,, StaticScope, <, JSType, >, scope, ), {, setResolvedTypeInternal, (, this, ), ;, call, =, (, ArrowType, ), safeResolve, (]
[<, JSType, >, scope, ), {, setResolvedTypeInternal, (, this, ), ;, call, =, (, ArrowType, ), safeResolve, (, call, ,]
[>, scope, ), {, setResolvedTypeInternal, (, this, ), ;, call, =, (, ArrowType, ), safeResolve, (, call, ,, t, ,]
[(, this, ), ;, call, =, (, ArrowType, ), safeResolve, (, call, ,, t, ,, scope, ), ;, if, (]
[(, this, ), ;, call, =, (, ArrowType, ), safeResolve, (, call, ,, t, ,, scope, ), ;, if, (]
[), ;, call, =, (, ArrowType, ), safeResolve, (, call, ,, t, ,, scope, ), ;, if, (, prototypeSlot, !=]
[=, (, ArrowType, ), safeResolve, (, call, ,, t, ,, scope, ), ;, if, (, prototypeSlot, !=, null, ), {]
[=, (, ArrowType, ), safeResolve, (, call, ,, t, ,, scope, ), ;, if, (, prototypeSlot, !=, null, ), {]
[safeResolve, (, call, ,, t, ,, scope, ), ;, if, (, prototypeSlot, !=, null, ), {, prototypeSlot, ., setType, (]
[call, ,, t, ,, scope, ), ;, if, (, prototypeSlot, !=, null, ), {, prototypeSlot, ., setType, (, safeResolve, (]
[call, ,, t, ,, scope, ), ;, if, (, prototypeSlot, !=, null, ), {, prototypeSlot, ., setType, (, safeResolve, (]
[;, if, (, prototypeSlot, !=, null, ), {, prototypeSlot, ., setType, (, safeResolve, (, prototypeSlot, ., getType, (, ), ,]
[(, prototypeSlot, !=, null, ), {, prototypeSlot, ., setType, (, safeResolve, (, prototypeSlot, ., getType, (, ), ,, t, ,]
[setType, (, safeResolve, (, prototypeSlot, ., getType, (, ), ,, t, ,, scope, ), ), ;, }, JSType, maybeTypeOfThis, =]
[safeResolve, (, prototypeSlot, ., getType, (, ), ,, t, ,, scope, ), ), ;, }, JSType, maybeTypeOfThis, =, safeResolve, (]
[prototypeSlot, ., getType, (, ), ,, t, ,, scope, ), ), ;, }, JSType, maybeTypeOfThis, =, safeResolve, (, typeOfThis, ,]
[getType, (, ), ,, t, ,, scope, ), ), ;, }, JSType, maybeTypeOfThis, =, safeResolve, (, typeOfThis, ,, t, ,]
[,, scope, ), ), ;, }, JSType, maybeTypeOfThis, =, safeResolve, (, typeOfThis, ,, t, ,, scope, ), ;, if, (]
[,, scope, ), ), ;, }, JSType, maybeTypeOfThis, =, safeResolve, (, typeOfThis, ,, t, ,, scope, ), ;, if, (]
[), ), ;, }, JSType, maybeTypeOfThis, =, safeResolve, (, typeOfThis, ,, t, ,, scope, ), ;, if, (, maybeTypeOfThis, !=]
[}, JSType, maybeTypeOfThis, =, safeResolve, (, typeOfThis, ,, t, ,, scope, ), ;, if, (, maybeTypeOfThis, !=, null, ), {]
[maybeTypeOfThis, =, safeResolve, (, typeOfThis, ,, t, ,, scope, ), ;, if, (, maybeTypeOfThis, !=, null, ), {, maybeTypeOfThis, =]
[maybeTypeOfThis, =, safeResolve, (, typeOfThis, ,, t, ,, scope, ), ;, if, (, maybeTypeOfThis, !=, null, ), {, maybeTypeOfThis, =]
[), ;, if, (, maybeTypeOfThis, !=, null, ), {, maybeTypeOfThis, =, maybeTypeOfThis, ., restrictByNotNullOrUndefined, (, ), ;, }, if, (]
[), ;, if, (, maybeTypeOfThis, !=, null, ), {, maybeTypeOfThis, =, maybeTypeOfThis, ., restrictByNotNullOrUndefined, (, ), ;, }, if, (]
[!=, null, ), {, maybeTypeOfThis, =, maybeTypeOfThis, ., restrictByNotNullOrUndefined, (, ), ;, }, if, (, maybeTypeOfThis, instanceof, ObjectType, ), {]
[), {, maybeTypeOfThis, =, maybeTypeOfThis, ., restrictByNotNullOrUndefined, (, ), ;, }, if, (, maybeTypeOfThis, instanceof, ObjectType, ), {, typeOfThis, =]
[restrictByNotNullOrUndefined, (, ), ;, }, if, (, maybeTypeOfThis, instanceof, ObjectType, ), {, typeOfThis, =, maybeTypeOfThis, ;, }, boolean, changed, =]
[), {, typeOfThis, =, maybeTypeOfThis, ;, }, boolean, changed, =, false, ;, ImmutableList, ., Builder, <, ObjectType, >, resolvedInterfaces, =]
[), {, typeOfThis, =, maybeTypeOfThis, ;, }, boolean, changed, =, false, ;, ImmutableList, ., Builder, <, ObjectType, >, resolvedInterfaces, =]
[;, ImmutableList, ., Builder, <, ObjectType, >, resolvedInterfaces, =, ImmutableList, ., builder, (, ), ;, for, (, ObjectType, iface, :]
[>, resolvedInterfaces, =, ImmutableList, ., builder, (, ), ;, for, (, ObjectType, iface, :, implementedInterfaces, ), {, ObjectType, resolvedIface, =]
[ImmutableList, ., builder, (, ), ;, for, (, ObjectType, iface, :, implementedInterfaces, ), {, ObjectType, resolvedIface, =, (, ObjectType, )]
[ImmutableList, ., builder, (, ), ;, for, (, ObjectType, iface, :, implementedInterfaces, ), {, ObjectType, resolvedIface, =, (, ObjectType, )]
[), ;, for, (, ObjectType, iface, :, implementedInterfaces, ), {, ObjectType, resolvedIface, =, (, ObjectType, ), iface, ., resolve, (]
[for, (, ObjectType, iface, :, implementedInterfaces, ), {, ObjectType, resolvedIface, =, (, ObjectType, ), iface, ., resolve, (, t, ,]
[iface, :, implementedInterfaces, ), {, ObjectType, resolvedIface, =, (, ObjectType, ), iface, ., resolve, (, t, ,, scope, ), ;]
[iface, :, implementedInterfaces, ), {, ObjectType, resolvedIface, =, (, ObjectType, ), iface, ., resolve, (, t, ,, scope, ), ;]
[{, ObjectType, resolvedIface, =, (, ObjectType, ), iface, ., resolve, (, t, ,, scope, ), ;, resolvedInterfaces, ., add, (]
[=, (, ObjectType, ), iface, ., resolve, (, t, ,, scope, ), ;, resolvedInterfaces, ., add, (, resolvedIface, ), ;]
[ObjectType, ), iface, ., resolve, (, t, ,, scope, ), ;, resolvedInterfaces, ., add, (, resolvedIface, ), ;, changed, |=]
[), iface, ., resolve, (, t, ,, scope, ), ;, resolvedInterfaces, ., add, (, resolvedIface, ), ;, changed, |=, (]
[), iface, ., resolve, (, t, ,, scope, ), ;, resolvedInterfaces, ., add, (, resolvedIface, ), ;, changed, |=, (]
[., resolve, (, t, ,, scope, ), ;, resolvedInterfaces, ., add, (, resolvedIface, ), ;, changed, |=, (, resolvedIface, !=]
[), ;, resolvedInterfaces, ., add, (, resolvedIface, ), ;, changed, |=, (, resolvedIface, !=, iface, ), ;, }, if, (]
[., add, (, resolvedIface, ), ;, changed, |=, (, resolvedIface, !=, iface, ), ;, }, if, (, changed, ), {]
[(, resolvedIface, ), ;, changed, |=, (, resolvedIface, !=, iface, ), ;, }, if, (, changed, ), {, implementedInterfaces, =]
[(, resolvedIface, ), ;, changed, |=, (, resolvedIface, !=, iface, ), ;, }, if, (, changed, ), {, implementedInterfaces, =]
[iface, ), ;, }, if, (, changed, ), {, implementedInterfaces, =, resolvedInterfaces, ., build, (, ), ;, }, if, (]
[iface, ), ;, }, if, (, changed, ), {, implementedInterfaces, =, resolvedInterfaces, ., build, (, ), ;, }, if, (]
[;, }, if, (, changed, ), {, implementedInterfaces, =, resolvedInterfaces, ., build, (, ), ;, }, if, (, subTypes, !=]
[=, resolvedInterfaces, ., build, (, ), ;, }, if, (, subTypes, !=, null, ), {, for, (, int, i, =]
[., build, (, ), ;, }, if, (, subTypes, !=, null, ), {, for, (, int, i, =, 0, ;]
[., build, (, ), ;, }, if, (, subTypes, !=, null, ), {, for, (, int, i, =, 0, ;]
[(, ), ;, }, if, (, subTypes, !=, null, ), {, for, (, int, i, =, 0, ;, i, <]
[(, ), ;, }, if, (, subTypes, !=, null, ), {, for, (, int, i, =, 0, ;, i, <]
[subTypes, !=, null, ), {, for, (, int, i, =, 0, ;, i, <, subTypes, ., size, (, ), ;]
[subTypes, !=, null, ), {, for, (, int, i, =, 0, ;, i, <, subTypes, ., size, (, ), ;]
[{, for, (, int, i, =, 0, ;, i, <, subTypes, ., size, (, ), ;, i, ++, ), {]
[{, for, (, int, i, =, 0, ;, i, <, subTypes, ., size, (, ), ;, i, ++, ), {]
[i, =, 0, ;, i, <, subTypes, ., size, (, ), ;, i, ++, ), {, subTypes, ., set, (]
[0, ;, i, <, subTypes, ., size, (, ), ;, i, ++, ), {, subTypes, ., set, (, i, ,]
[0, ;, i, <, subTypes, ., size, (, ), ;, i, ++, ), {, subTypes, ., set, (, i, ,]
[subTypes, ., size, (, ), ;, i, ++, ), {, subTypes, ., set, (, i, ,, JSType, ., toMaybeFunctionType, (]
[subTypes, ., size, (, ), ;, i, ++, ), {, subTypes, ., set, (, i, ,, JSType, ., toMaybeFunctionType, (]
[subTypes, ., size, (, ), ;, i, ++, ), {, subTypes, ., set, (, i, ,, JSType, ., toMaybeFunctionType, (]
[), ;, i, ++, ), {, subTypes, ., set, (, i, ,, JSType, ., toMaybeFunctionType, (, subTypes, ., get, (]
[{, subTypes, ., set, (, i, ,, JSType, ., toMaybeFunctionType, (, subTypes, ., get, (, i, ), ., resolve, (]
[., set, (, i, ,, JSType, ., toMaybeFunctionType, (, subTypes, ., get, (, i, ), ., resolve, (, t, ,]
[(, subTypes, ., get, (, i, ), ., resolve, (, t, ,, scope, ), ), ), ;, }, }, return]
[(, subTypes, ., get, (, i, ), ., resolve, (, t, ,, scope, ), ), ), ;, }, }, return]
[(, i, ), ., resolve, (, t, ,, scope, ), ), ), ;, }, }, return, super, ., resolveInternal, (]
[), ., resolve, (, t, ,, scope, ), ), ), ;, }, }, return, super, ., resolveInternal, (, t, ,]
[super, ., resolveInternal, (, t, ,, scope, ), ;, }, @, Override, public, String, toDebugHashCodeString, (, ), {, if, (]
[super, ., resolveInternal, (, t, ,, scope, ), ;, }, @, Override, public, String, toDebugHashCodeString, (, ), {, if, (]
[resolveInternal, (, t, ,, scope, ), ;, }, @, Override, public, String, toDebugHashCodeString, (, ), {, if, (, this, ==]
[resolveInternal, (, t, ,, scope, ), ;, }, @, Override, public, String, toDebugHashCodeString, (, ), {, if, (, this, ==]
[scope, ), ;, }, @, Override, public, String, toDebugHashCodeString, (, ), {, if, (, this, ==, registry, ., getNativeType, (]
[scope, ), ;, }, @, Override, public, String, toDebugHashCodeString, (, ), {, if, (, this, ==, registry, ., getNativeType, (]
[String, toDebugHashCodeString, (, ), {, if, (, this, ==, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ), {, return]
[String, toDebugHashCodeString, (, ), {, if, (, this, ==, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ), {, return]
[., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ), {, return, super, ., toDebugHashCodeString, (, ), ;, }, StringBuilder, b, =]
[JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ), {, return, super, ., toDebugHashCodeString, (, ), ;, }, StringBuilder, b, =, new, StringBuilder, (]
[), ), {, return, super, ., toDebugHashCodeString, (, ), ;, }, StringBuilder, b, =, new, StringBuilder, (, 32, ), ;]
[), ), {, return, super, ., toDebugHashCodeString, (, ), ;, }, StringBuilder, b, =, new, StringBuilder, (, 32, ), ;]
[super, ., toDebugHashCodeString, (, ), ;, }, StringBuilder, b, =, new, StringBuilder, (, 32, ), ;, b, ., append, (]
[}, StringBuilder, b, =, new, StringBuilder, (, 32, ), ;, b, ., append, (, "function (", ), ;, int, paramNum, =]
[}, StringBuilder, b, =, new, StringBuilder, (, 32, ), ;, b, ., append, (, "function (", ), ;, int, paramNum, =]
[}, StringBuilder, b, =, new, StringBuilder, (, 32, ), ;, b, ., append, (, "function (", ), ;, int, paramNum, =]
[., append, (, "function (", ), ;, int, paramNum, =, call, ., parameters, ., getChildCount, (, ), ;, boolean, hasKnownTypeOfThis, =]
[append, (, "function (", ), ;, int, paramNum, =, call, ., parameters, ., getChildCount, (, ), ;, boolean, hasKnownTypeOfThis, =, !]
[append, (, "function (", ), ;, int, paramNum, =, call, ., parameters, ., getChildCount, (, ), ;, boolean, hasKnownTypeOfThis, =, !]
[call, ., parameters, ., getChildCount, (, ), ;, boolean, hasKnownTypeOfThis, =, !, typeOfThis, ., isUnknownType, (, ), ;, if, (]
[., getChildCount, (, ), ;, boolean, hasKnownTypeOfThis, =, !, typeOfThis, ., isUnknownType, (, ), ;, if, (, hasKnownTypeOfThis, ), {]
[., getChildCount, (, ), ;, boolean, hasKnownTypeOfThis, =, !, typeOfThis, ., isUnknownType, (, ), ;, if, (, hasKnownTypeOfThis, ), {]
[;, boolean, hasKnownTypeOfThis, =, !, typeOfThis, ., isUnknownType, (, ), ;, if, (, hasKnownTypeOfThis, ), {, b, ., append, (]
[=, !, typeOfThis, ., isUnknownType, (, ), ;, if, (, hasKnownTypeOfThis, ), {, b, ., append, (, "this:", ), ;]
[=, !, typeOfThis, ., isUnknownType, (, ), ;, if, (, hasKnownTypeOfThis, ), {, b, ., append, (, "this:", ), ;]
[isUnknownType, (, ), ;, if, (, hasKnownTypeOfThis, ), {, b, ., append, (, "this:", ), ;, b, ., append, (]
[), ;, if, (, hasKnownTypeOfThis, ), {, b, ., append, (, "this:", ), ;, b, ., append, (, getDebugHashCodeStringOf, (]
[b, ., append, (, "this:", ), ;, b, ., append, (, getDebugHashCodeStringOf, (, typeOfThis, ), ), ;, }, if, (]
[b, ., append, (, "this:", ), ;, b, ., append, (, getDebugHashCodeStringOf, (, typeOfThis, ), ), ;, }, if, (]
[append, (, "this:", ), ;, b, ., append, (, getDebugHashCodeStringOf, (, typeOfThis, ), ), ;, }, if, (, paramNum, >]
[b, ., append, (, getDebugHashCodeStringOf, (, typeOfThis, ), ), ;, }, if, (, paramNum, >, 0, ), {, if, (]
[(, getDebugHashCodeStringOf, (, typeOfThis, ), ), ;, }, if, (, paramNum, >, 0, ), {, if, (, hasKnownTypeOfThis, ), {]
[(, getDebugHashCodeStringOf, (, typeOfThis, ), ), ;, }, if, (, paramNum, >, 0, ), {, if, (, hasKnownTypeOfThis, ), {]
[), ), ;, }, if, (, paramNum, >, 0, ), {, if, (, hasKnownTypeOfThis, ), {, b, ., append, (]
[>, 0, ), {, if, (, hasKnownTypeOfThis, ), {, b, ., append, (, ", ", ), ;, }, Node, p, =]
[>, 0, ), {, if, (, hasKnownTypeOfThis, ), {, b, ., append, (, ", ", ), ;, }, Node, p, =]
[>, 0, ), {, if, (, hasKnownTypeOfThis, ), {, b, ., append, (, ", ", ), ;, }, Node, p, =]
[{, b, ., append, (, ", ", ), ;, }, Node, p, =, call, ., parameters, ., getFirstChild, (, ), ;]
[{, b, ., append, (, ", ", ), ;, }, Node, p, =, call, ., parameters, ., getFirstChild, (, ), ;]
[(, ", ", ), ;, }, Node, p, =, call, ., parameters, ., getFirstChild, (, ), ;, b, ., append, (]
[), ;, }, Node, p, =, call, ., parameters, ., getFirstChild, (, ), ;, b, ., append, (, getDebugHashCodeStringOf, (]
[), ;, }, Node, p, =, call, ., parameters, ., getFirstChild, (, ), ;, b, ., append, (, getDebugHashCodeStringOf, (]
[parameters, ., getFirstChild, (, ), ;, b, ., append, (, getDebugHashCodeStringOf, (, p, ., getJSType, (, ), ), ), ;]
[getFirstChild, (, ), ;, b, ., append, (, getDebugHashCodeStringOf, (, p, ., getJSType, (, ), ), ), ;, p, =]
[getFirstChild, (, ), ;, b, ., append, (, getDebugHashCodeStringOf, (, p, ., getJSType, (, ), ), ), ;, p, =]
[getDebugHashCodeStringOf, (, p, ., getJSType, (, ), ), ), ;, p, =, p, ., getNext, (, ), ;, while, (]
[getDebugHashCodeStringOf, (, p, ., getJSType, (, ), ), ), ;, p, =, p, ., getNext, (, ), ;, while, (]
[p, ., getJSType, (, ), ), ), ;, p, =, p, ., getNext, (, ), ;, while, (, p, !=]
[(, ), ), ), ;, p, =, p, ., getNext, (, ), ;, while, (, p, !=, null, ), {]
[(, ), ), ), ;, p, =, p, ., getNext, (, ), ;, while, (, p, !=, null, ), {]
[;, p, =, p, ., getNext, (, ), ;, while, (, p, !=, null, ), {, b, ., append, (]
[p, ., getNext, (, ), ;, while, (, p, !=, null, ), {, b, ., append, (, ", ", ), ;]
[p, ., getNext, (, ), ;, while, (, p, !=, null, ), {, b, ., append, (, ", ", ), ;]
[), ;, while, (, p, !=, null, ), {, b, ., append, (, ", ", ), ;, b, ., append, (]
[while, (, p, !=, null, ), {, b, ., append, (, ", ", ), ;, b, ., append, (, getDebugHashCodeStringOf, (]
[while, (, p, !=, null, ), {, b, ., append, (, ", ", ), ;, b, ., append, (, getDebugHashCodeStringOf, (]
[., append, (, ", ", ), ;, b, ., append, (, getDebugHashCodeStringOf, (, p, ., getJSType, (, ), ), ), ;]
[(, ", ", ), ;, b, ., append, (, getDebugHashCodeStringOf, (, p, ., getJSType, (, ), ), ), ;, p, =]
[(, ", ", ), ;, b, ., append, (, getDebugHashCodeStringOf, (, p, ., getJSType, (, ), ), ), ;, p, =]
[getDebugHashCodeStringOf, (, p, ., getJSType, (, ), ), ), ;, p, =, p, ., getNext, (, ), ;, }, }]
[getDebugHashCodeStringOf, (, p, ., getJSType, (, ), ), ), ;, p, =, p, ., getNext, (, ), ;, }, }]
[getJSType, (, ), ), ), ;, p, =, p, ., getNext, (, ), ;, }, }, b, ., append, (]
[), ), ;, p, =, p, ., getNext, (, ), ;, }, }, b, ., append, (, ")", ), ;]
[), ), ;, p, =, p, ., getNext, (, ), ;, }, }, b, ., append, (, ")", ), ;]
[=, p, ., getNext, (, ), ;, }, }, b, ., append, (, ")", ), ;, b, ., append, (]
[getNext, (, ), ;, }, }, b, ., append, (, ")", ), ;, b, ., append, (, ": ", ), ;]
[getNext, (, ), ;, }, }, b, ., append, (, ")", ), ;, b, ., append, (, ": ", ), ;]
[}, }, b, ., append, (, ")", ), ;, b, ., append, (, ": ", ), ;, b, ., append, (]
[b, ., append, (, ")", ), ;, b, ., append, (, ": ", ), ;, b, ., append, (, getDebugHashCodeStringOf, (]
[b, ., append, (, ")", ), ;, b, ., append, (, ": ", ), ;, b, ., append, (, getDebugHashCodeStringOf, (]
[b, ., append, (, ": ", ), ;, b, ., append, (, getDebugHashCodeStringOf, (, call, ., returnType, ), ), ;, return]
[b, ., append, (, ": ", ), ;, b, ., append, (, getDebugHashCodeStringOf, (, call, ., returnType, ), ), ;, return]
[), ;, return, b, ., toString, (, ), ;, }, private, String, getDebugHashCodeStringOf, (, JSType, type, ), {, if, (]
[), ;, return, b, ., toString, (, ), ;, }, private, String, getDebugHashCodeStringOf, (, JSType, type, ), {, if, (]
[return, b, ., toString, (, ), ;, }, private, String, getDebugHashCodeStringOf, (, JSType, type, ), {, if, (, type, ==]
[(, ), ;, }, private, String, getDebugHashCodeStringOf, (, JSType, type, ), {, if, (, type, ==, this, ), {, return]
[getDebugHashCodeStringOf, (, JSType, type, ), {, if, (, type, ==, this, ), {, return, "me", ;, }, else, {, return]
[getDebugHashCodeStringOf, (, JSType, type, ), {, if, (, type, ==, this, ), {, return, "me", ;, }, else, {, return]
[else, {, return, type, ., toDebugHashCodeString, (, ), ;, }, }, public, FunctionType, cloneWithoutArrowType, (, ), {, FunctionType, result, =]
[type, ., toDebugHashCodeString, (, ), ;, }, }, public, FunctionType, cloneWithoutArrowType, (, ), {, FunctionType, result, =, new, FunctionType, (]
[toDebugHashCodeString, (, ), ;, }, }, public, FunctionType, cloneWithoutArrowType, (, ), {, FunctionType, result, =, new, FunctionType, (, registry, ,]
[}, }, public, FunctionType, cloneWithoutArrowType, (, ), {, FunctionType, result, =, new, FunctionType, (, registry, ,, getReferenceName, (, ), ,]
[public, FunctionType, cloneWithoutArrowType, (, ), {, FunctionType, result, =, new, FunctionType, (, registry, ,, getReferenceName, (, ), ,, source, ,]
[public, FunctionType, cloneWithoutArrowType, (, ), {, FunctionType, result, =, new, FunctionType, (, registry, ,, getReferenceName, (, ), ,, source, ,]
[), {, FunctionType, result, =, new, FunctionType, (, registry, ,, getReferenceName, (, ), ,, source, ,, registry, ., createArrowType, (]
[FunctionType, result, =, new, FunctionType, (, registry, ,, getReferenceName, (, ), ,, source, ,, registry, ., createArrowType, (, null, ,]
[new, FunctionType, (, registry, ,, getReferenceName, (, ), ,, source, ,, registry, ., createArrowType, (, null, ,, null, ), ,]
[,, getReferenceName, (, ), ,, source, ,, registry, ., createArrowType, (, null, ,, null, ), ,, getInstanceType, (, ), ,]
[(, ), ,, source, ,, registry, ., createArrowType, (, null, ,, null, ), ,, getInstanceType, (, ), ,, null, ,]
[,, source, ,, registry, ., createArrowType, (, null, ,, null, ), ,, getInstanceType, (, ), ,, null, ,, true, ,]
[registry, ., createArrowType, (, null, ,, null, ), ,, getInstanceType, (, ), ,, null, ,, true, ,, false, ), ;]
[registry, ., createArrowType, (, null, ,, null, ), ,, getInstanceType, (, ), ,, null, ,, true, ,, false, ), ;]
[null, ,, null, ), ,, getInstanceType, (, ), ,, null, ,, true, ,, false, ), ;, result, ., setPrototypeBasedOn, (]
[(, ), ,, null, ,, true, ,, false, ), ;, result, ., setPrototypeBasedOn, (, getInstanceType, (, ), ), ;, return]
[setPrototypeBasedOn, (, getInstanceType, (, ), ), ;, return, result, ;, }, @, Override, public, boolean, hasAnyTemplateTypesInternal, (, ), {, return]
[setPrototypeBasedOn, (, getInstanceType, (, ), ), ;, return, result, ;, }, @, Override, public, boolean, hasAnyTemplateTypesInternal, (, ), {, return]
[setPrototypeBasedOn, (, getInstanceType, (, ), ), ;, return, result, ;, }, @, Override, public, boolean, hasAnyTemplateTypesInternal, (, ), {, return]
[(, getInstanceType, (, ), ), ;, return, result, ;, }, @, Override, public, boolean, hasAnyTemplateTypesInternal, (, ), {, return, !]
[(, getInstanceType, (, ), ), ;, return, result, ;, }, @, Override, public, boolean, hasAnyTemplateTypesInternal, (, ), {, return, !]
[;, }, @, Override, public, boolean, hasAnyTemplateTypesInternal, (, ), {, return, !, getTemplateKeys, (, ), ., isEmpty, (, ), ||]
[;, }, @, Override, public, boolean, hasAnyTemplateTypesInternal, (, ), {, return, !, getTemplateKeys, (, ), ., isEmpty, (, ), ||]
[hasAnyTemplateTypesInternal, (, ), {, return, !, getTemplateKeys, (, ), ., isEmpty, (, ), ||, typeOfThis, ., hasAnyTemplateTypes, (, ), ||]
[hasAnyTemplateTypesInternal, (, ), {, return, !, getTemplateKeys, (, ), ., isEmpty, (, ), ||, typeOfThis, ., hasAnyTemplateTypes, (, ), ||]
