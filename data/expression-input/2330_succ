[=, graph, ;, }, public, abstract, int, color, (, ), ;, public, N, getPartitionSuperNode, (, N, node, ), {, Preconditions]
[., graph, =, graph, ;, }, public, abstract, int, color, (, ), ;, public, N, getPartitionSuperNode, (, N, node, )]
[;, }, public, abstract, int, color, (, ), ;, public, N, getPartitionSuperNode, (, N, node, ), {, Preconditions, ., checkNotNull]
[;, Color, color, =, graph, ., getNode, (, node, ), ., getAnnotation, (, ), ;, N, headNode, =, colorToNodeMap, []
[., checkNotNull, (, colorToNodeMap, ,, "No coloring founded. color() should be called first.", ), ;, Color, color, =, graph, ., getNode, (, node, ), ., getAnnotation, (]
[,, "No coloring founded. color() should be called first.", ), ;, Color, color, =, graph, ., getNode, (, node, ), ., getAnnotation, (, ), ;, N, headNode]
[), ;, Color, color, =, graph, ., getNode, (, node, ), ., getAnnotation, (, ), ;, N, headNode, =, colorToNodeMap]
[;, N, headNode, =, colorToNodeMap, [, color, ., value, ], ;, if, (, headNode, ==, null, ), {, colorToNodeMap, []
[., getAnnotation, (, ), ;, N, headNode, =, colorToNodeMap, [, color, ., value, ], ;, if, (, headNode, ==, null]
[., getNode, (, node, ), ., getAnnotation, (, ), ;, N, headNode, =, colorToNodeMap, [, color, ., value, ], ;]
[), ., getAnnotation, (, ), ;, N, headNode, =, colorToNodeMap, [, color, ., value, ], ;, if, (, headNode, ==]
[;, if, (, headNode, ==, null, ), {, colorToNodeMap, [, color, ., value, ], =, node, ;, return, node, ;]
[[, color, ., value, ], ;, if, (, headNode, ==, null, ), {, colorToNodeMap, [, color, ., value, ], =]
[], ;, if, (, headNode, ==, null, ), {, colorToNodeMap, [, color, ., value, ], =, node, ;, return, node]
[., value, ], ;, if, (, headNode, ==, null, ), {, colorToNodeMap, [, color, ., value, ], =, node, ;]
[), {, colorToNodeMap, [, color, ., value, ], =, node, ;, return, node, ;, }, else, {, return, headNode, ;]
[==, null, ), {, colorToNodeMap, [, color, ., value, ], =, node, ;, return, node, ;, }, else, {, return]
[), {, colorToNodeMap, [, color, ., value, ], =, node, ;, return, node, ;, }, else, {, return, headNode, ;]
[=, node, ;, return, node, ;, }, else, {, return, headNode, ;, }, }, public, AdjacencyGraph, <, N, ,, E]
[[, color, ., value, ], =, node, ;, return, node, ;, }, else, {, return, headNode, ;, }, }, public]
[], =, node, ;, return, node, ;, }, else, {, return, headNode, ;, }, }, public, AdjacencyGraph, <, N, ,]
[., value, ], =, node, ;, return, node, ;, }, else, {, return, headNode, ;, }, }, public, AdjacencyGraph, <]
[;, return, node, ;, }, else, {, return, headNode, ;, }, }, public, AdjacencyGraph, <, N, ,, E, >, getGraph]
[;, }, else, {, return, headNode, ;, }, }, public, AdjacencyGraph, <, N, ,, E, >, getGraph, (, ), {]
[;, }, }, public, AdjacencyGraph, <, N, ,, E, >, getGraph, (, ), {, return, graph, ;, }, public, static]
[;, }, public, static, class, Color, implements, Annotation, {, int, value, =, 0, ;, Color, (, int, value, ), {]
[;, Color, (, int, value, ), {, this, ., value, =, value, ;, }, @, Override, public, boolean, equals, (]
[=, value, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, !, (, other, instanceof]
[., value, =, value, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, !, (]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, !, (, other, instanceof, Color, )]
[), {, return, false, ;, }, else, {, return, value, ==, (, (, Color, ), other, ), ., value, ;]
[), {, return, false, ;, }, else, {, return, value, ==, (, (, Color, ), other, ), ., value, ;]
[), ), {, return, false, ;, }, else, {, return, value, ==, (, (, Color, ), other, ), ., value]
[instanceof, Color, ), ), {, return, false, ;, }, else, {, return, value, ==, (, (, Color, ), other, )]
[;, }, else, {, return, value, ==, (, (, Color, ), other, ), ., value, ;, }, }, @, Override]
[;, }, }, @, Override, public, int, hashCode, (, ), {, return, value, ;, }, }, public, static, class, GreedyGraphColoring]
[==, (, (, Color, ), other, ), ., value, ;, }, }, @, Override, public, int, hashCode, (, ), {]
[;, }, }, @, Override, public, int, hashCode, (, ), {, return, value, ;, }, }, public, static, class, GreedyGraphColoring]
[., value, ;, }, }, @, Override, public, int, hashCode, (, ), {, return, value, ;, }, }, public, static]
[), ., value, ;, }, }, @, Override, public, int, hashCode, (, ), {, return, value, ;, }, }, public]
[), ., value, ;, }, }, @, Override, public, int, hashCode, (, ), {, return, value, ;, }, }, public]
[;, }, }, public, static, class, GreedyGraphColoring, <, N, ,, E, >, extends, GraphColoring, <, N, ,, E, >, {]
[,, null, ), ;, }, public, GreedyGraphColoring, (, AdjacencyGraph, <, N, ,, E, >, graph, ,, Comparator, <, N, >]
[), ;, }, public, GreedyGraphColoring, (, AdjacencyGraph, <, N, ,, E, >, graph, ,, Comparator, <, N, >, tieBreaker, )]
[), ;, this, ., tieBreaker, =, tieBreaker, ;, }, @, Override, public, int, color, (, ), {, graph, ., clearNodeAnnotations]
[=, tieBreaker, ;, }, @, Override, public, int, color, (, ), {, graph, ., clearNodeAnnotations, (, ), ;, List, <]
[., tieBreaker, =, tieBreaker, ;, }, @, Override, public, int, color, (, ), {, graph, ., clearNodeAnnotations, (, ), ;]
[;, }, @, Override, public, int, color, (, ), {, graph, ., clearNodeAnnotations, (, ), ;, List, <, GraphNode, <]
[;, List, <, GraphNode, <, N, ,, E, >, >, worklist, =, Lists, ., newArrayList, (, graph, ., getNodes, (]
[., clearNodeAnnotations, (, ), ;, List, <, GraphNode, <, N, ,, E, >, >, worklist, =, Lists, ., newArrayList, (]
[;, Collections, ., sort, (, worklist, ,, new, Comparator, <, GraphNode, <, N, ,, E, >, >, (, ), {]
[., newArrayList, (, graph, ., getNodes, (, ), ), ;, Collections, ., sort, (, worklist, ,, new, Comparator, <, GraphNode]
[), ;, Collections, ., sort, (, worklist, ,, new, Comparator, <, GraphNode, <, N, ,, E, >, >, (, )]
[., getNodes, (, ), ), ;, Collections, ., sort, (, worklist, ,, new, Comparator, <, GraphNode, <, N, ,, E]
[;, int, count, =, 0, ;, do, {, Color, color, =, new, Color, (, count, ), ;, SubGraph, <, N]
[., sort, (, worklist, ,, new, Comparator, <, GraphNode, <, N, ,, E, >, >, (, ), {, @, Override]
[,, new, Comparator, <, GraphNode, <, N, ,, E, >, >, (, ), {, @, Override, public, int, compare, (]
[), ;, int, count, =, 0, ;, do, {, Color, color, =, new, Color, (, count, ), ;, SubGraph, <]
[;, return, result, ==, 0, &&, tieBreaker, !=, null, ?, tieBreaker, ., compare, (, o1, ., getValue, (, ), ,]
[-, graph, ., getWeight, (, o1, ., getValue, (, ), ), ;, return, result, ==, 0, &&, tieBreaker, !=, null]
[., getWeight, (, o2, ., getValue, (, ), ), -, graph, ., getWeight, (, o1, ., getValue, (, ), )]
[), -, graph, ., getWeight, (, o1, ., getValue, (, ), ), ;, return, result, ==, 0, &&, tieBreaker, !=]
[., getValue, (, ), ), -, graph, ., getWeight, (, o1, ., getValue, (, ), ), ;, return, result, ==]
[;, return, result, ==, 0, &&, tieBreaker, !=, null, ?, tieBreaker, ., compare, (, o1, ., getValue, (, ), ,]
[., getWeight, (, o1, ., getValue, (, ), ), ;, return, result, ==, 0, &&, tieBreaker, !=, null, ?, tieBreaker]
[), ;, return, result, ==, 0, &&, tieBreaker, !=, null, ?, tieBreaker, ., compare, (, o1, ., getValue, (, )]
[., getValue, (, ), ), ;, return, result, ==, 0, &&, tieBreaker, !=, null, ?, tieBreaker, ., compare, (, o1]
[;, }, }, ), ;, int, count, =, 0, ;, do, {, Color, color, =, new, Color, (, count, )]
[?, tieBreaker, ., compare, (, o1, ., getValue, (, ), ,, o2, ., getValue, (, ), ), :, result, ;]
[&&, tieBreaker, !=, null, ?, tieBreaker, ., compare, (, o1, ., getValue, (, ), ,, o2, ., getValue, (, )]
[==, 0, &&, tieBreaker, !=, null, ?, tieBreaker, ., compare, (, o1, ., getValue, (, ), ,, o2, ., getValue]
[&&, tieBreaker, !=, null, ?, tieBreaker, ., compare, (, o1, ., getValue, (, ), ,, o2, ., getValue, (, )]
[?, tieBreaker, ., compare, (, o1, ., getValue, (, ), ,, o2, ., getValue, (, ), ), :, result, ;]
[!=, null, ?, tieBreaker, ., compare, (, o1, ., getValue, (, ), ,, o2, ., getValue, (, ), ), :]
[?, tieBreaker, ., compare, (, o1, ., getValue, (, ), ,, o2, ., getValue, (, ), ), :, result, ;]
[:, result, ;, }, }, ), ;, int, count, =, 0, ;, do, {, Color, color, =, new, Color, (]
[., compare, (, o1, ., getValue, (, ), ,, o2, ., getValue, (, ), ), :, result, ;, }, }]
[,, o2, ., getValue, (, ), ), :, result, ;, }, }, ), ;, int, count, =, 0, ;, do]
[., getValue, (, ), ,, o2, ., getValue, (, ), ), :, result, ;, }, }, ), ;, int, count]
[), :, result, ;, }, }, ), ;, int, count, =, 0, ;, do, {, Color, color, =, new, Color]
[., getValue, (, ), ), :, result, ;, }, }, ), ;, int, count, =, 0, ;, do, {, Color]
[;, }, }, ), ;, int, count, =, 0, ;, do, {, Color, color, =, new, Color, (, count, )]
[;, do, {, Color, color, =, new, Color, (, count, ), ;, SubGraph, <, N, ,, E, >, subgraph, =]
[;, SubGraph, <, N, ,, E, >, subgraph, =, graph, ., newSubGraph, (, ), ;, for, (, Iterator, <, GraphNode]
[), ;, SubGraph, <, N, ,, E, >, subgraph, =, graph, ., newSubGraph, (, ), ;, for, (, Iterator, <]
[;, for, (, Iterator, <, GraphNode, <, N, ,, E, >, >, i, =, worklist, ., iterator, (, ), ;]
[., newSubGraph, (, ), ;, for, (, Iterator, <, GraphNode, <, N, ,, E, >, >, i, =, worklist, .]
[;, i, ., hasNext, (, ), ;, ), {, GraphNode, <, N, ,, E, >, node, =, i, ., next]
[., iterator, (, ), ;, i, ., hasNext, (, ), ;, ), {, GraphNode, <, N, ,, E, >, node]
[;, ), {, GraphNode, <, N, ,, E, >, node, =, i, ., next, (, ), ;, if, (, subgraph]
[., hasNext, (, ), ;, ), {, GraphNode, <, N, ,, E, >, node, =, i, ., next, (, )]
[;, if, (, subgraph, ., isIndependentOf, (, node, ., getValue, (, ), ), ), {, subgraph, ., addNode, (, node]
[., next, (, ), ;, if, (, subgraph, ., isIndependentOf, (, node, ., getValue, (, ), ), ), {, subgraph]
[), {, subgraph, ., addNode, (, node, ., getValue, (, ), ), ;, node, ., setAnnotation, (, color, ), ;]
[., isIndependentOf, (, node, ., getValue, (, ), ), ), {, subgraph, ., addNode, (, node, ., getValue, (, )]
[), ), {, subgraph, ., addNode, (, node, ., getValue, (, ), ), ;, node, ., setAnnotation, (, color, )]
[., getValue, (, ), ), ), {, subgraph, ., addNode, (, node, ., getValue, (, ), ), ;, node, .]
[;, node, ., setAnnotation, (, color, ), ;, i, ., remove, (, ), ;, }, }, count, ++, ;, }]
[., addNode, (, node, ., getValue, (, ), ), ;, node, ., setAnnotation, (, color, ), ;, i, ., remove]
[), ;, node, ., setAnnotation, (, color, ), ;, i, ., remove, (, ), ;, }, }, count, ++, ;]
[., getValue, (, ), ), ;, node, ., setAnnotation, (, color, ), ;, i, ., remove, (, ), ;, }]
[;, i, ., remove, (, ), ;, }, }, count, ++, ;, }, while, (, !, worklist, ., isEmpty, (]
[., setAnnotation, (, color, ), ;, i, ., remove, (, ), ;, }, }, count, ++, ;, }, while, (]
[), ;, i, ., remove, (, ), ;, }, }, count, ++, ;, }, while, (, !, worklist, ., isEmpty]
[;, }, }, count, ++, ;, }, while, (, !, worklist, ., isEmpty, (, ), ), ;, @, SuppressWarnings, (]
[., remove, (, ), ;, }, }, count, ++, ;, }, while, (, !, worklist, ., isEmpty, (, ), )]
[;, }, while, (, !, worklist, ., isEmpty, (, ), ), ;, @, SuppressWarnings, (, "unchecked", ), N, [, ]]
[++, ;, }, while, (, !, worklist, ., isEmpty, (, ), ), ;, @, SuppressWarnings, (, "unchecked", ), N, []
[), ;, @, SuppressWarnings, (, "unchecked", ), N, [, ], map, =, (, N, [, ], ), new, Object, []
[), ;, @, SuppressWarnings, (, "unchecked", ), N, [, ], map, =, (, N, [, ], ), new, Object, []
[., isEmpty, (, ), ), ;, @, SuppressWarnings, (, "unchecked", ), N, [, ], map, =, (, N, [, ]]
[N, [, ], map, =, (, N, [, ], ), new, Object, [, count, ], ;, colorToNodeMap, =, map, ;]
[), N, [, ], map, =, (, N, [, ], ), new, Object, [, count, ], ;, colorToNodeMap, =, map]
[;, colorToNodeMap, =, map, ;, return, count, ;, }, }, }]
[;, colorToNodeMap, =, map, ;, return, count, ;, }, }, }]
[], ;, colorToNodeMap, =, map, ;, return, count, ;, }, }, }]
[=, map, ;, return, count, ;, }, }, }]
[;, return, count, ;, }, }, }]
[;, }, }, }]
