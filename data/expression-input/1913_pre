[public, abstract, class, BaseAbstractUnivariateOptimizer, implements, UnivariateOptimizer, {, private, final, ConvergenceChecker, <, UnivariatePointValuePair, >, checker, ;, private, final, Incrementor, evaluations, =]
[searchMax, ;, private, double, searchStart, ;, private, UnivariateFunction, function, ;, protected, BaseAbstractUnivariateOptimizer, (, ConvergenceChecker, <, UnivariatePointValuePair, >, checker, ), {]
[searchMax, ;, private, double, searchStart, ;, private, UnivariateFunction, function, ;, protected, BaseAbstractUnivariateOptimizer, (, ConvergenceChecker, <, UnivariatePointValuePair, >, checker, ), {]
[searchStart, ;, private, UnivariateFunction, function, ;, protected, BaseAbstractUnivariateOptimizer, (, ConvergenceChecker, <, UnivariatePointValuePair, >, checker, ), {, this, ., checker, =]
[<, UnivariatePointValuePair, >, checker, ), {, this, ., checker, =, checker, ;, }, public, int, getMaxEvaluations, (, ), {, return]
[<, UnivariatePointValuePair, >, checker, ), {, this, ., checker, =, checker, ;, }, public, int, getMaxEvaluations, (, ), {, return]
[int, getMaxEvaluations, (, ), {, return, evaluations, ., getMaximalCount, (, ), ;, }, public, int, getEvaluations, (, ), {, return]
[int, getMaxEvaluations, (, ), {, return, evaluations, ., getMaximalCount, (, ), ;, }, public, int, getEvaluations, (, ), {, return]
[int, getEvaluations, (, ), {, return, evaluations, ., getCount, (, ), ;, }, public, GoalType, getGoalType, (, ), {, return]
[), ;, }, public, GoalType, getGoalType, (, ), {, return, goal, ;, }, public, double, getMin, (, ), {, return]
[goal, ;, }, public, double, getMin, (, ), {, return, searchMin, ;, }, public, double, getMax, (, ), {, return]
[searchMin, ;, }, public, double, getMax, (, ), {, return, searchMax, ;, }, public, double, getStartValue, (, ), {, return]
[public, double, getStartValue, (, ), {, return, searchStart, ;, }, protected, double, computeObjectiveValue, (, double, point, ), {, try, {]
[public, double, getStartValue, (, ), {, return, searchStart, ;, }, protected, double, computeObjectiveValue, (, double, point, ), {, try, {]
[double, point, ), {, try, {, evaluations, ., incrementCount, (, ), ;, }, catch, (, MaxCountExceededException, e, ), {, throw]
[{, try, {, evaluations, ., incrementCount, (, ), ;, }, catch, (, MaxCountExceededException, e, ), {, throw, new, TooManyEvaluationsException, (]
[{, try, {, evaluations, ., incrementCount, (, ), ;, }, catch, (, MaxCountExceededException, e, ), {, throw, new, TooManyEvaluationsException, (]
[}, catch, (, MaxCountExceededException, e, ), {, throw, new, TooManyEvaluationsException, (, e, ., getMax, (, ), ), ;, }, return]
[}, catch, (, MaxCountExceededException, e, ), {, throw, new, TooManyEvaluationsException, (, e, ., getMax, (, ), ), ;, }, return]
[e, ), {, throw, new, TooManyEvaluationsException, (, e, ., getMax, (, ), ), ;, }, return, function, ., value, (]
[maxEval, ,, UnivariateFunction, f, ,, GoalType, goalType, ,, double, min, ,, double, max, ,, double, startValue, ), {, if, (]
[maxEval, ,, UnivariateFunction, f, ,, GoalType, goalType, ,, double, min, ,, double, max, ,, double, startValue, ), {, if, (]
[UnivariateFunction, f, ,, GoalType, goalType, ,, double, min, ,, double, max, ,, double, startValue, ), {, if, (, f, ==]
[goalType, ,, double, min, ,, double, max, ,, double, startValue, ), {, if, (, f, ==, null, ), {, throw]
[double, startValue, ), {, if, (, f, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[double, startValue, ), {, if, (, f, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[), {, if, (, f, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, goalType, ==]
[f, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, goalType, ==, null, ), {, throw]
[new, NullArgumentException, (, ), ;, }, if, (, goalType, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }]
[(, ), ;, }, if, (, goalType, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, searchMin, =]
[;, }, if, (, goalType, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, searchMin, =, min, ;]
[if, (, goalType, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, searchMin, =, min, ;, searchMax, =]
[goalType, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, searchMin, =, min, ;, searchMax, =, max, ;]
[null, ), {, throw, new, NullArgumentException, (, ), ;, }, searchMin, =, min, ;, searchMax, =, max, ;, searchStart, =]
[{, throw, new, NullArgumentException, (, ), ;, }, searchMin, =, min, ;, searchMax, =, max, ;, searchStart, =, startValue, ;]
[new, NullArgumentException, (, ), ;, }, searchMin, =, min, ;, searchMax, =, max, ;, searchStart, =, startValue, ;, goal, =]
[(, ), ;, }, searchMin, =, min, ;, searchMax, =, max, ;, searchStart, =, startValue, ;, goal, =, goalType, ;]
[;, }, searchMin, =, min, ;, searchMax, =, max, ;, searchStart, =, startValue, ;, goal, =, goalType, ;, function, =]
[searchMin, =, min, ;, searchMax, =, max, ;, searchStart, =, startValue, ;, goal, =, goalType, ;, function, =, f, ;]
[searchMin, =, min, ;, searchMax, =, max, ;, searchStart, =, startValue, ;, goal, =, goalType, ;, function, =, f, ;]
[searchMax, =, max, ;, searchStart, =, startValue, ;, goal, =, goalType, ;, function, =, f, ;, evaluations, ., setMaximalCount, (]
[;, searchStart, =, startValue, ;, goal, =, goalType, ;, function, =, f, ;, evaluations, ., setMaximalCount, (, maxEval, ), ;]
[;, searchStart, =, startValue, ;, goal, =, goalType, ;, function, =, f, ;, evaluations, ., setMaximalCount, (, maxEval, ), ;]
[goalType, ;, function, =, f, ;, evaluations, ., setMaximalCount, (, maxEval, ), ;, evaluations, ., resetCount, (, ), ;, return]
[UnivariatePointValuePair, optimize, (, int, maxEval, ,, UnivariateFunction, f, ,, GoalType, goalType, ,, double, min, ,, double, max, ), {, return]
[(, int, maxEval, ,, UnivariateFunction, f, ,, GoalType, goalType, ,, double, min, ,, double, max, ), {, return, optimize, (]
[maxEval, ,, UnivariateFunction, f, ,, GoalType, goalType, ,, double, min, ,, double, max, ), {, return, optimize, (, maxEval, ,]
[UnivariateFunction, f, ,, GoalType, goalType, ,, double, min, ,, double, max, ), {, return, optimize, (, maxEval, ,, f, ,]
[,, GoalType, goalType, ,, double, min, ,, double, max, ), {, return, optimize, (, maxEval, ,, f, ,, goalType, ,]
[goalType, ,, double, min, ,, double, max, ), {, return, optimize, (, maxEval, ,, f, ,, goalType, ,, min, ,]
[double, min, ,, double, max, ), {, return, optimize, (, maxEval, ,, f, ,, goalType, ,, min, ,, max, ,]
[double, min, ,, double, max, ), {, return, optimize, (, maxEval, ,, f, ,, goalType, ,, min, ,, max, ,]
[,, double, max, ), {, return, optimize, (, maxEval, ,, f, ,, goalType, ,, min, ,, max, ,, min, +]
[,, double, max, ), {, return, optimize, (, maxEval, ,, f, ,, goalType, ,, min, ,, max, ,, min, +]
[max, ), {, return, optimize, (, maxEval, ,, f, ,, goalType, ,, min, ,, max, ,, min, +, 0.5, *]
[), {, return, optimize, (, maxEval, ,, f, ,, goalType, ,, min, ,, max, ,, min, +, 0.5, *, (]
[), {, return, optimize, (, maxEval, ,, f, ,, goalType, ,, min, ,, max, ,, min, +, 0.5, *, (]
[return, optimize, (, maxEval, ,, f, ,, goalType, ,, min, ,, max, ,, min, +, 0.5, *, (, max, -]
[0.5, *, (, max, -, min, ), ), ;, }, public, ConvergenceChecker, <, UnivariatePointValuePair, >, getConvergenceChecker, (, ), {, return]
