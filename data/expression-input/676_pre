[commons, ., math3, ., random, ., Well19937c, ;, public, class, ZipfDistribution, extends, AbstractIntegerDistribution, {, private, static, final, long, serialVersionUID, =]
[., math3, ., random, ., Well19937c, ;, public, class, ZipfDistribution, extends, AbstractIntegerDistribution, {, private, static, final, long, serialVersionUID, =, -]
[long, serialVersionUID, =, -, 140627372283420404L, ;, private, final, int, numberOfElements, ;, private, final, double, exponent, ;, private, double, numericalMean, =]
[long, serialVersionUID, =, -, 140627372283420404L, ;, private, final, int, numberOfElements, ;, private, final, double, exponent, ;, private, double, numericalMean, =]
[int, numberOfElements, ;, private, final, double, exponent, ;, private, double, numericalMean, =, Double, ., NaN, ;, private, boolean, numericalMeanIsCalculated, =]
[exponent, ;, private, double, numericalMean, =, Double, ., NaN, ;, private, boolean, numericalMeanIsCalculated, =, false, ;, private, double, numericalVariance, =]
[exponent, ;, private, double, numericalMean, =, Double, ., NaN, ;, private, boolean, numericalMeanIsCalculated, =, false, ;, private, double, numericalVariance, =]
[NaN, ;, private, boolean, numericalMeanIsCalculated, =, false, ;, private, double, numericalVariance, =, Double, ., NaN, ;, private, boolean, numericalVarianceIsCalculated, =]
[private, boolean, numericalVarianceIsCalculated, =, false, ;, public, ZipfDistribution, (, final, int, numberOfElements, ,, final, double, exponent, ), {, this, (]
[;, public, ZipfDistribution, (, final, int, numberOfElements, ,, final, double, exponent, ), {, this, (, new, Well19937c, (, ), ,]
[ZipfDistribution, (, final, int, numberOfElements, ,, final, double, exponent, ), {, this, (, new, Well19937c, (, ), ,, numberOfElements, ,]
[), ;, }, public, ZipfDistribution, (, RandomGenerator, rng, ,, int, numberOfElements, ,, double, exponent, ), throws, NotStrictlyPositiveException, {, super, (]
[(, RandomGenerator, rng, ,, int, numberOfElements, ,, double, exponent, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (]
[(, RandomGenerator, rng, ,, int, numberOfElements, ,, double, exponent, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (]
[rng, ,, int, numberOfElements, ,, double, exponent, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, numberOfElements, <=]
[,, double, exponent, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, numberOfElements, <=, 0, ), {, throw]
[), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, numberOfElements, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, numberOfElements, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[super, (, rng, ), ;, if, (, numberOfElements, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DIMENSION, ,]
[(, numberOfElements, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DIMENSION, ,, numberOfElements, ), ;, }, if, (]
[(, numberOfElements, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DIMENSION, ,, numberOfElements, ), ;, }, if, (]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DIMENSION, ,, numberOfElements, ), ;, }, if, (, exponent, <=]
[throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DIMENSION, ,, numberOfElements, ), ;, }, if, (, exponent, <=, 0, ), {, throw]
[(, LocalizedFormats, ., DIMENSION, ,, numberOfElements, ), ;, }, if, (, exponent, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[(, LocalizedFormats, ., DIMENSION, ,, numberOfElements, ), ;, }, if, (, exponent, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[,, numberOfElements, ), ;, }, if, (, exponent, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., EXPONENT, ,]
[}, if, (, exponent, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., EXPONENT, ,, exponent, ), ;, }]
[}, if, (, exponent, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., EXPONENT, ,, exponent, ), ;, }]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., EXPONENT, ,, exponent, ), ;, }, this, ., numberOfElements, =]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., EXPONENT, ,, exponent, ), ;, }, this, ., numberOfElements, =, numberOfElements, ;]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., EXPONENT, ,, exponent, ), ;, }, this, ., numberOfElements, =, numberOfElements, ;]
[NotStrictlyPositiveException, (, LocalizedFormats, ., EXPONENT, ,, exponent, ), ;, }, this, ., numberOfElements, =, numberOfElements, ;, this, ., exponent, =]
[this, ., numberOfElements, =, numberOfElements, ;, this, ., exponent, =, exponent, ;, }, public, int, getNumberOfElements, (, ), {, return]
[exponent, ;, }, public, int, getNumberOfElements, (, ), {, return, numberOfElements, ;, }, public, double, getExponent, (, ), {, return]
[double, getExponent, (, ), {, return, exponent, ;, }, public, double, probability, (, final, int, x, ), {, if, (]
[double, getExponent, (, ), {, return, exponent, ;, }, public, double, probability, (, final, int, x, ), {, if, (]
[double, getExponent, (, ), {, return, exponent, ;, }, public, double, probability, (, final, int, x, ), {, if, (]
[(, ), {, return, exponent, ;, }, public, double, probability, (, final, int, x, ), {, if, (, x, <=]
[{, return, exponent, ;, }, public, double, probability, (, final, int, x, ), {, if, (, x, <=, 0, ||]
[{, return, exponent, ;, }, public, double, probability, (, final, int, x, ), {, if, (, x, <=, 0, ||]
[exponent, ;, }, public, double, probability, (, final, int, x, ), {, if, (, x, <=, 0, ||, x, >]
[double, probability, (, final, int, x, ), {, if, (, x, <=, 0, ||, x, >, numberOfElements, ), {, return]
[int, x, ), {, if, (, x, <=, 0, ||, x, >, numberOfElements, ), {, return, 0.0, ;, }, return]
[int, x, ), {, if, (, x, <=, 0, ||, x, >, numberOfElements, ), {, return, 0.0, ;, }, return]
[x, ), {, if, (, x, <=, 0, ||, x, >, numberOfElements, ), {, return, 0.0, ;, }, return, (]
[x, ), {, if, (, x, <=, 0, ||, x, >, numberOfElements, ), {, return, 0.0, ;, }, return, (]
[{, if, (, x, <=, 0, ||, x, >, numberOfElements, ), {, return, 0.0, ;, }, return, (, 1.0, /]
[{, if, (, x, <=, 0, ||, x, >, numberOfElements, ), {, return, 0.0, ;, }, return, (, 1.0, /]
[<=, 0, ||, x, >, numberOfElements, ), {, return, 0.0, ;, }, return, (, 1.0, /, FastMath, ., pow, (]
[||, x, >, numberOfElements, ), {, return, 0.0, ;, }, return, (, 1.0, /, FastMath, ., pow, (, x, ,]
[), {, return, 0.0, ;, }, return, (, 1.0, /, FastMath, ., pow, (, x, ,, exponent, ), ), /]
[return, 0.0, ;, }, return, (, 1.0, /, FastMath, ., pow, (, x, ,, exponent, ), ), /, generalizedHarmonic, (]
[;, }, return, (, 1.0, /, FastMath, ., pow, (, x, ,, exponent, ), ), /, generalizedHarmonic, (, numberOfElements, ,]
[/, generalizedHarmonic, (, numberOfElements, ,, exponent, ), ;, }, public, double, cumulativeProbability, (, final, int, x, ), {, if, (]
[/, generalizedHarmonic, (, numberOfElements, ,, exponent, ), ;, }, public, double, cumulativeProbability, (, final, int, x, ), {, if, (]
[(, numberOfElements, ,, exponent, ), ;, }, public, double, cumulativeProbability, (, final, int, x, ), {, if, (, x, <=]
[), ;, }, public, double, cumulativeProbability, (, final, int, x, ), {, if, (, x, <=, 0, ), {, return]
[(, final, int, x, ), {, if, (, x, <=, 0, ), {, return, 0.0, ;, }, else, if, (]
[(, final, int, x, ), {, if, (, x, <=, 0, ), {, return, 0.0, ;, }, else, if, (]
[int, x, ), {, if, (, x, <=, 0, ), {, return, 0.0, ;, }, else, if, (, x, >=]
[if, (, x, <=, 0, ), {, return, 0.0, ;, }, else, if, (, x, >=, numberOfElements, ), {, return]
[0, ), {, return, 0.0, ;, }, else, if, (, x, >=, numberOfElements, ), {, return, 1.0, ;, }, return]
[0, ), {, return, 0.0, ;, }, else, if, (, x, >=, numberOfElements, ), {, return, 1.0, ;, }, return]
[{, return, 0.0, ;, }, else, if, (, x, >=, numberOfElements, ), {, return, 1.0, ;, }, return, generalizedHarmonic, (]
[0.0, ;, }, else, if, (, x, >=, numberOfElements, ), {, return, 1.0, ;, }, return, generalizedHarmonic, (, x, ,]
[else, if, (, x, >=, numberOfElements, ), {, return, 1.0, ;, }, return, generalizedHarmonic, (, x, ,, exponent, ), /]
[(, x, >=, numberOfElements, ), {, return, 1.0, ;, }, return, generalizedHarmonic, (, x, ,, exponent, ), /, generalizedHarmonic, (]
[>=, numberOfElements, ), {, return, 1.0, ;, }, return, generalizedHarmonic, (, x, ,, exponent, ), /, generalizedHarmonic, (, numberOfElements, ,]
[,, exponent, ), /, generalizedHarmonic, (, numberOfElements, ,, exponent, ), ;, }, public, double, getNumericalMean, (, ), {, if, (]
[exponent, ), /, generalizedHarmonic, (, numberOfElements, ,, exponent, ), ;, }, public, double, getNumericalMean, (, ), {, if, (, !]
[generalizedHarmonic, (, numberOfElements, ,, exponent, ), ;, }, public, double, getNumericalMean, (, ), {, if, (, !, numericalMeanIsCalculated, ), {]
[numberOfElements, ,, exponent, ), ;, }, public, double, getNumericalMean, (, ), {, if, (, !, numericalMeanIsCalculated, ), {, numericalMean, =]
[;, }, public, double, getNumericalMean, (, ), {, if, (, !, numericalMeanIsCalculated, ), {, numericalMean, =, calculateNumericalMean, (, ), ;]
[public, double, getNumericalMean, (, ), {, if, (, !, numericalMeanIsCalculated, ), {, numericalMean, =, calculateNumericalMean, (, ), ;, numericalMeanIsCalculated, =]
[), {, if, (, !, numericalMeanIsCalculated, ), {, numericalMean, =, calculateNumericalMean, (, ), ;, numericalMeanIsCalculated, =, true, ;, }, return]
[;, numericalMeanIsCalculated, =, true, ;, }, return, numericalMean, ;, }, protected, double, calculateNumericalMean, (, ), {, final, int, N, =]
[;, }, protected, double, calculateNumericalMean, (, ), {, final, int, N, =, getNumberOfElements, (, ), ;, final, double, s, =]
[final, int, N, =, getNumberOfElements, (, ), ;, final, double, s, =, getExponent, (, ), ;, final, double, Hs1, =]
[N, =, getNumberOfElements, (, ), ;, final, double, s, =, getExponent, (, ), ;, final, double, Hs1, =, generalizedHarmonic, (]
[getNumberOfElements, (, ), ;, final, double, s, =, getExponent, (, ), ;, final, double, Hs1, =, generalizedHarmonic, (, N, ,]
[getNumberOfElements, (, ), ;, final, double, s, =, getExponent, (, ), ;, final, double, Hs1, =, generalizedHarmonic, (, N, ,]
[), ;, final, double, s, =, getExponent, (, ), ;, final, double, Hs1, =, generalizedHarmonic, (, N, ,, s, -]
[(, ), ;, final, double, Hs1, =, generalizedHarmonic, (, N, ,, s, -, 1, ), ;, final, double, Hs, =]
[;, final, double, Hs1, =, generalizedHarmonic, (, N, ,, s, -, 1, ), ;, final, double, Hs, =, generalizedHarmonic, (]
[double, Hs1, =, generalizedHarmonic, (, N, ,, s, -, 1, ), ;, final, double, Hs, =, generalizedHarmonic, (, N, ,]
[(, N, ,, s, -, 1, ), ;, final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return]
[(, N, ,, s, -, 1, ), ;, final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return]
[,, s, -, 1, ), ;, final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return, Hs1, /]
[(, N, ,, s, ), ;, return, Hs1, /, Hs, ;, }, public, double, getNumericalVariance, (, ), {, if, (]
[N, ,, s, ), ;, return, Hs1, /, Hs, ;, }, public, double, getNumericalVariance, (, ), {, if, (, !]
[), ;, return, Hs1, /, Hs, ;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {]
[return, Hs1, /, Hs, ;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =]
[;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =, calculateNumericalVariance, (, ), ;]
[public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =, calculateNumericalVariance, (, ), ;, numericalVarianceIsCalculated, =]
[), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =, calculateNumericalVariance, (, ), ;, numericalVarianceIsCalculated, =, true, ;, }, return]
[;, numericalVarianceIsCalculated, =, true, ;, }, return, numericalVariance, ;, }, protected, double, calculateNumericalVariance, (, ), {, final, int, N, =]
[;, }, protected, double, calculateNumericalVariance, (, ), {, final, int, N, =, getNumberOfElements, (, ), ;, final, double, s, =]
[final, int, N, =, getNumberOfElements, (, ), ;, final, double, s, =, getExponent, (, ), ;, final, double, Hs2, =]
[N, =, getNumberOfElements, (, ), ;, final, double, s, =, getExponent, (, ), ;, final, double, Hs2, =, generalizedHarmonic, (]
[getNumberOfElements, (, ), ;, final, double, s, =, getExponent, (, ), ;, final, double, Hs2, =, generalizedHarmonic, (, N, ,]
[getNumberOfElements, (, ), ;, final, double, s, =, getExponent, (, ), ;, final, double, Hs2, =, generalizedHarmonic, (, N, ,]
[), ;, final, double, s, =, getExponent, (, ), ;, final, double, Hs2, =, generalizedHarmonic, (, N, ,, s, -]
[(, ), ;, final, double, Hs2, =, generalizedHarmonic, (, N, ,, s, -, 2, ), ;, final, double, Hs1, =]
[;, final, double, Hs2, =, generalizedHarmonic, (, N, ,, s, -, 2, ), ;, final, double, Hs1, =, generalizedHarmonic, (]
[double, Hs2, =, generalizedHarmonic, (, N, ,, s, -, 2, ), ;, final, double, Hs1, =, generalizedHarmonic, (, N, ,]
[double, Hs2, =, generalizedHarmonic, (, N, ,, s, -, 2, ), ;, final, double, Hs1, =, generalizedHarmonic, (, N, ,]
[=, generalizedHarmonic, (, N, ,, s, -, 2, ), ;, final, double, Hs1, =, generalizedHarmonic, (, N, ,, s, -]
[2, ), ;, final, double, Hs1, =, generalizedHarmonic, (, N, ,, s, -, 1, ), ;, final, double, Hs, =]
[;, final, double, Hs1, =, generalizedHarmonic, (, N, ,, s, -, 1, ), ;, final, double, Hs, =, generalizedHarmonic, (]
[double, Hs1, =, generalizedHarmonic, (, N, ,, s, -, 1, ), ;, final, double, Hs, =, generalizedHarmonic, (, N, ,]
[(, N, ,, s, -, 1, ), ;, final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return]
[(, N, ,, s, -, 1, ), ;, final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return]
[N, ,, s, -, 1, ), ;, final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return, (]
[N, ,, s, -, 1, ), ;, final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return, (]
[s, -, 1, ), ;, final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return, (, Hs2, /]
[), ;, final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return, (, Hs2, /, Hs, ), -]
[;, final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return, (, Hs2, /, Hs, ), -, (]
[;, final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return, (, Hs2, /, Hs, ), -, (]
[final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return, (, Hs2, /, Hs, ), -, (, (]
[final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return, (, Hs2, /, Hs, ), -, (, (]
[Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return, (, Hs2, /, Hs, ), -, (, (, Hs1, *]
[(, N, ,, s, ), ;, return, (, Hs2, /, Hs, ), -, (, (, Hs1, *, Hs1, ), /]
[N, ,, s, ), ;, return, (, Hs2, /, Hs, ), -, (, (, Hs1, *, Hs1, ), /, (]
[N, ,, s, ), ;, return, (, Hs2, /, Hs, ), -, (, (, Hs1, *, Hs1, ), /, (]
[s, ), ;, return, (, Hs2, /, Hs, ), -, (, (, Hs1, *, Hs1, ), /, (, Hs, *]
[), ), ;, }, private, double, generalizedHarmonic, (, final, int, n, ,, final, double, m, ), {, double, value, =]
[(, final, int, n, ,, final, double, m, ), {, double, value, =, 0, ;, for, (, int, k, =]
[int, n, ,, final, double, m, ), {, double, value, =, 0, ;, for, (, int, k, =, n, ;]
[int, n, ,, final, double, m, ), {, double, value, =, 0, ;, for, (, int, k, =, n, ;]
[,, final, double, m, ), {, double, value, =, 0, ;, for, (, int, k, =, n, ;, k, >]
[double, m, ), {, double, value, =, 0, ;, for, (, int, k, =, n, ;, k, >, 0, ;]
[m, ), {, double, value, =, 0, ;, for, (, int, k, =, n, ;, k, >, 0, ;, --]
[double, value, =, 0, ;, for, (, int, k, =, n, ;, k, >, 0, ;, --, k, ), {]
[=, 0, ;, for, (, int, k, =, n, ;, k, >, 0, ;, --, k, ), {, value, +=]
[=, 0, ;, for, (, int, k, =, n, ;, k, >, 0, ;, --, k, ), {, value, +=]
[;, for, (, int, k, =, n, ;, k, >, 0, ;, --, k, ), {, value, +=, 1.0, /]
[;, for, (, int, k, =, n, ;, k, >, 0, ;, --, k, ), {, value, +=, 1.0, /]
[k, =, n, ;, k, >, 0, ;, --, k, ), {, value, +=, 1.0, /, FastMath, ., pow, (]
[n, ;, k, >, 0, ;, --, k, ), {, value, +=, 1.0, /, FastMath, ., pow, (, k, ,]
[;, --, k, ), {, value, +=, 1.0, /, FastMath, ., pow, (, k, ,, m, ), ;, }, return]
[., pow, (, k, ,, m, ), ;, }, return, value, ;, }, public, int, getSupportLowerBound, (, ), {, return]
[value, ;, }, public, int, getSupportLowerBound, (, ), {, return, 1, ;, }, public, int, getSupportUpperBound, (, ), {, return]
[}, public, int, getSupportUpperBound, (, ), {, return, getNumberOfElements, (, ), ;, }, public, boolean, isSupportConnected, (, ), {, return]
