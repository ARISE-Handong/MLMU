[private, final, String, sourceFile, ;, private, final, boolean, doSanityChecks, ;, public, SourceInformationAnnotator, (, String, sourceFile, ,, boolean, doSanityChecks, ), {]
[private, final, String, sourceFile, ;, private, final, boolean, doSanityChecks, ;, public, SourceInformationAnnotator, (, String, sourceFile, ,, boolean, doSanityChecks, ), {]
[;, private, final, boolean, doSanityChecks, ;, public, SourceInformationAnnotator, (, String, sourceFile, ,, boolean, doSanityChecks, ), {, this, ., sourceFile, =]
[final, boolean, doSanityChecks, ;, public, SourceInformationAnnotator, (, String, sourceFile, ,, boolean, doSanityChecks, ), {, this, ., sourceFile, =, sourceFile, ;]
[final, boolean, doSanityChecks, ;, public, SourceInformationAnnotator, (, String, sourceFile, ,, boolean, doSanityChecks, ), {, this, ., sourceFile, =, sourceFile, ;]
[public, SourceInformationAnnotator, (, String, sourceFile, ,, boolean, doSanityChecks, ), {, this, ., sourceFile, =, sourceFile, ;, this, ., doSanityChecks, =]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[@, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, doSanityChecks, &&]
[@, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, doSanityChecks, &&]
[public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, doSanityChecks, &&, sourceFile, !=]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, doSanityChecks, &&, sourceFile, !=, null, ), {]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, doSanityChecks, &&, sourceFile, !=, null, ), {]
[Node, n, ,, Node, parent, ), {, if, (, doSanityChecks, &&, sourceFile, !=, null, ), {, Preconditions, ., checkState, (]
[Node, n, ,, Node, parent, ), {, if, (, doSanityChecks, &&, sourceFile, !=, null, ), {, Preconditions, ., checkState, (]
[parent, ), {, if, (, doSanityChecks, &&, sourceFile, !=, null, ), {, Preconditions, ., checkState, (, sourceFile, ., equals, (]
[parent, ), {, if, (, doSanityChecks, &&, sourceFile, !=, null, ), {, Preconditions, ., checkState, (, sourceFile, ., equals, (]
[{, Preconditions, ., checkState, (, sourceFile, ., equals, (, n, ., getSourceFileName, (, ), ), ), ;, }, switch, (]
[{, Preconditions, ., checkState, (, sourceFile, ., equals, (, n, ., getSourceFileName, (, ), ), ), ;, }, switch, (]
[(, n, ., getSourceFileName, (, ), ), ), ;, }, switch, (, n, ., getType, (, ), ), {, case]
[(, n, ., getSourceFileName, (, ), ), ), ;, }, switch, (, n, ., getType, (, ), ), {, case]
[), ;, }, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, propNode, =]
[), ;, }, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, propNode, =]
[., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, propNode, =, n, ., getLastChild, (, ), ;]
[(, ), ), {, case, Token, ., GETPROP, :, Node, propNode, =, n, ., getLastChild, (, ), ;, setOriginalName, (]
[), {, case, Token, ., GETPROP, :, Node, propNode, =, n, ., getLastChild, (, ), ;, setOriginalName, (, n, ,]
[), {, case, Token, ., GETPROP, :, Node, propNode, =, n, ., getLastChild, (, ), ;, setOriginalName, (, n, ,]
[n, ., getLastChild, (, ), ;, setOriginalName, (, n, ,, propNode, ., getString, (, ), ), ;, break, ;, case]
[n, ., getLastChild, (, ), ;, setOriginalName, (, n, ,, propNode, ., getString, (, ), ), ;, break, ;, case]
[(, n, ,, propNode, ., getString, (, ), ), ;, break, ;, case, Token, ., FUNCTION, :, String, functionName, =]
[(, n, ,, propNode, ., getString, (, ), ), ;, break, ;, case, Token, ., FUNCTION, :, String, functionName, =]
[., getString, (, ), ), ;, break, ;, case, Token, ., FUNCTION, :, String, functionName, =, NodeUtil, ., getNearestFunctionName, (]
[;, break, ;, case, Token, ., FUNCTION, :, String, functionName, =, NodeUtil, ., getNearestFunctionName, (, n, ), ;, if, (]
[;, break, ;, case, Token, ., FUNCTION, :, String, functionName, =, NodeUtil, ., getNearestFunctionName, (, n, ), ;, if, (]
[;, case, Token, ., FUNCTION, :, String, functionName, =, NodeUtil, ., getNearestFunctionName, (, n, ), ;, if, (, functionName, !=]
[., FUNCTION, :, String, functionName, =, NodeUtil, ., getNearestFunctionName, (, n, ), ;, if, (, functionName, !=, null, ), {]
[:, String, functionName, =, NodeUtil, ., getNearestFunctionName, (, n, ), ;, if, (, functionName, !=, null, ), {, setOriginalName, (]
[functionName, =, NodeUtil, ., getNearestFunctionName, (, n, ), ;, if, (, functionName, !=, null, ), {, setOriginalName, (, n, ,]
[), ;, if, (, functionName, !=, null, ), {, setOriginalName, (, n, ,, functionName, ), ;, }, break, ;, case]
[), ;, if, (, functionName, !=, null, ), {, setOriginalName, (, n, ,, functionName, ), ;, }, break, ;, case]
[functionName, !=, null, ), {, setOriginalName, (, n, ,, functionName, ), ;, }, break, ;, case, Token, ., NAME, :]
[null, ), {, setOriginalName, (, n, ,, functionName, ), ;, }, break, ;, case, Token, ., NAME, :, setOriginalName, (]
[{, setOriginalName, (, n, ,, functionName, ), ;, }, break, ;, case, Token, ., NAME, :, setOriginalName, (, n, ,]
[{, setOriginalName, (, n, ,, functionName, ), ;, }, break, ;, case, Token, ., NAME, :, setOriginalName, (, n, ,]
[;, case, Token, ., NAME, :, setOriginalName, (, n, ,, n, ., getString, (, ), ), ;, break, ;, case]
[;, case, Token, ., NAME, :, setOriginalName, (, n, ,, n, ., getString, (, ), ), ;, break, ;, case]
[,, n, ., getString, (, ), ), ;, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =]
[,, n, ., getString, (, ), ), ;, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =]
[), ;, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;]
[), ;, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;]
[break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=]
[case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;]
[., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (]
[getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, !]
[getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, !]
[;, key, =, key, ., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, ), ), {]
[=, key, ., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, ), ), {, setOriginalName, (]
[., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, ), ), {, setOriginalName, (, key, ,]
[., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, ), ), {, setOriginalName, (, key, ,]
[), ;, }, }, break, ;, }, }, void, setOriginalName, (, Node, n, ,, String, name, ), {, if, (]
[), ;, }, }, break, ;, }, }, void, setOriginalName, (, Node, n, ,, String, name, ), {, if, (]
[;, }, }, break, ;, }, }, void, setOriginalName, (, Node, n, ,, String, name, ), {, if, (, !]
[;, }, }, break, ;, }, }, void, setOriginalName, (, Node, n, ,, String, name, ), {, if, (, !]
[}, void, setOriginalName, (, Node, n, ,, String, name, ), {, if, (, !, name, ., isEmpty, (, ), &&]
[}, void, setOriginalName, (, Node, n, ,, String, name, ), {, if, (, !, name, ., isEmpty, (, ), &&]
[}, void, setOriginalName, (, Node, n, ,, String, name, ), {, if, (, !, name, ., isEmpty, (, ), &&]
[Node, n, ,, String, name, ), {, if, (, !, name, ., isEmpty, (, ), &&, n, ., getProp, (]
[Node, n, ,, String, name, ), {, if, (, !, name, ., isEmpty, (, ), &&, n, ., getProp, (]
[), {, if, (, !, name, ., isEmpty, (, ), &&, n, ., getProp, (, Node, ., ORIGINALNAME_PROP, ), ==]
[(, !, name, ., isEmpty, (, ), &&, n, ., getProp, (, Node, ., ORIGINALNAME_PROP, ), ==, null, ), {]
[(, !, name, ., isEmpty, (, ), &&, n, ., getProp, (, Node, ., ORIGINALNAME_PROP, ), ==, null, ), {]
[isEmpty, (, ), &&, n, ., getProp, (, Node, ., ORIGINALNAME_PROP, ), ==, null, ), {, n, ., putProp, (]
[isEmpty, (, ), &&, n, ., getProp, (, Node, ., ORIGINALNAME_PROP, ), ==, null, ), {, n, ., putProp, (]
[n, ., getProp, (, Node, ., ORIGINALNAME_PROP, ), ==, null, ), {, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,]
