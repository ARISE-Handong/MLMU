[;, public, static, final, Vector1D, ONE, =, new, Vector1D, (, 1.0, ), ;, public, static, final, Vector1D, NaN, =, new]
[), ;, public, static, final, Vector1D, ONE, =, new, Vector1D, (, 1.0, ), ;, public, static, final, Vector1D, NaN, =]
[;, public, static, final, Vector1D, NaN, =, new, Vector1D, (, Double, ., NaN, ), ;, public, static, final, Vector1D, POSITIVE_INFINITY]
[), ;, public, static, final, Vector1D, NaN, =, new, Vector1D, (, Double, ., NaN, ), ;, public, static, final, Vector1D]
[;, public, static, final, Vector1D, POSITIVE_INFINITY, =, new, Vector1D, (, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Vector1D, NEGATIVE_INFINITY]
[), ;, public, static, final, Vector1D, POSITIVE_INFINITY, =, new, Vector1D, (, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Vector1D]
[., NaN, ), ;, public, static, final, Vector1D, POSITIVE_INFINITY, =, new, Vector1D, (, Double, ., POSITIVE_INFINITY, ), ;, public, static]
[;, public, static, final, Vector1D, NEGATIVE_INFINITY, =, new, Vector1D, (, Double, ., NEGATIVE_INFINITY, ), ;, private, static, final, long, serialVersionUID]
[), ;, public, static, final, Vector1D, NEGATIVE_INFINITY, =, new, Vector1D, (, Double, ., NEGATIVE_INFINITY, ), ;, private, static, final, long]
[., POSITIVE_INFINITY, ), ;, public, static, final, Vector1D, NEGATIVE_INFINITY, =, new, Vector1D, (, Double, ., NEGATIVE_INFINITY, ), ;, private, static]
[;, private, static, final, long, serialVersionUID, =, 7556674948671647925L, ;, private, final, double, x, ;, public, Vector1D, (, double, x, )]
[), ;, private, static, final, long, serialVersionUID, =, 7556674948671647925L, ;, private, final, double, x, ;, public, Vector1D, (, double, x]
[., NEGATIVE_INFINITY, ), ;, private, static, final, long, serialVersionUID, =, 7556674948671647925L, ;, private, final, double, x, ;, public, Vector1D, (]
[;, private, final, double, x, ;, public, Vector1D, (, double, x, ), {, this, ., x, =, x, ;, }]
[=, x, ;, }, public, Vector1D, (, double, a, ,, Vector1D, u, ), {, this, ., x, =, a, *]
[., x, =, x, ;, }, public, Vector1D, (, double, a, ,, Vector1D, u, ), {, this, ., x, =]
[;, }, public, Vector1D, (, double, a, ,, Vector1D, u, ), {, this, ., x, =, a, *, u, .]
[=, a, *, u, ., x, ;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,]
[., x, =, a, *, u, ., x, ;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double]
[;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ), {, this, .]
[*, u, ., x, ;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2]
[;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ), {, this, .]
[., x, ;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ), {]
[=, a1, *, u1, ., x, +, a2, *, u2, ., x, ;, }, public, Vector1D, (, double, a1, ,]
[., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, ;, }, public, Vector1D, (, double]
[;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ,, double, a3, ,]
[+, a2, *, u2, ., x, ;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,]
[*, u1, ., x, +, a2, *, u2, ., x, ;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1]
[+, a2, *, u2, ., x, ;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,]
[., x, +, a2, *, u2, ., x, ;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double]
[;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ,, double, a3, ,]
[*, u2, ., x, ;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2]
[;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ,, double, a3, ,]
[., x, ;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ,, double]
[=, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, ;, }]
[., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x]
[;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ,, double, a3, ,]
[+, a3, *, u3, ., x, ;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,]
[+, a2, *, u2, ., x, +, a3, *, u3, ., x, ;, }, public, Vector1D, (, double, a1, ,]
[*, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, ;, }, public, Vector1D]
[+, a2, *, u2, ., x, +, a3, *, u3, ., x, ;, }, public, Vector1D, (, double, a1, ,]
[., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, ;, }, public, Vector1D, (, double]
[+, a3, *, u3, ., x, ;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,]
[*, u2, ., x, +, a3, *, u3, ., x, ;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1]
[+, a3, *, u3, ., x, ;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,]
[., x, +, a3, *, u3, ., x, ;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double]
[;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ,, double, a3, ,]
[*, u3, ., x, ;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2]
[;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ,, double, a3, ,]
[., x, ;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ,, double]
[=, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, +, a4]
[., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x]
[;, }, public, double, getX, (, ), {, return, x, ;, }, public, Space, getSpace, (, ), {, return, Euclidean1D]
[+, a4, *, u4, ., x, ;, }, public, double, getX, (, ), {, return, x, ;, }, public, Space]
[+, a3, *, u3, ., x, +, a4, *, u4, ., x, ;, }, public, double, getX, (, ), {]
[+, a2, *, u2, ., x, +, a3, *, u3, ., x, +, a4, *, u4, ., x, ;, }]
[*, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, +, a4, *, u4]
[+, a2, *, u2, ., x, +, a3, *, u3, ., x, +, a4, *, u4, ., x, ;, }]
[., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, +, a4, *, u4, ., x]
[+, a3, *, u3, ., x, +, a4, *, u4, ., x, ;, }, public, double, getX, (, ), {]
[*, u2, ., x, +, a3, *, u3, ., x, +, a4, *, u4, ., x, ;, }, public, double]
[+, a3, *, u3, ., x, +, a4, *, u4, ., x, ;, }, public, double, getX, (, ), {]
[., x, +, a3, *, u3, ., x, +, a4, *, u4, ., x, ;, }, public, double, getX, (]
[+, a4, *, u4, ., x, ;, }, public, double, getX, (, ), {, return, x, ;, }, public, Space]
[*, u3, ., x, +, a4, *, u4, ., x, ;, }, public, double, getX, (, ), {, return, x]
[+, a4, *, u4, ., x, ;, }, public, double, getX, (, ), {, return, x, ;, }, public, Space]
[., x, +, a4, *, u4, ., x, ;, }, public, double, getX, (, ), {, return, x, ;, }]
[;, }, public, double, getX, (, ), {, return, x, ;, }, public, Space, getSpace, (, ), {, return, Euclidean1D]
[*, u4, ., x, ;, }, public, double, getX, (, ), {, return, x, ;, }, public, Space, getSpace, (]
[;, }, public, double, getX, (, ), {, return, x, ;, }, public, Space, getSpace, (, ), {, return, Euclidean1D]
[., x, ;, }, public, double, getX, (, ), {, return, x, ;, }, public, Space, getSpace, (, ), {]
[;, }, public, Space, getSpace, (, ), {, return, Euclidean1D, ., getInstance, (, ), ;, }, public, Vector1D, getZero, (]
[;, }, public, Vector1D, getZero, (, ), {, return, ZERO, ;, }, public, double, getNorm1, (, ), {, return, FastMath]
[., getInstance, (, ), ;, }, public, Vector1D, getZero, (, ), {, return, ZERO, ;, }, public, double, getNorm1, (]
[;, }, public, double, getNorm1, (, ), {, return, FastMath, ., abs, (, x, ), ;, }, public, double, getNorm]
[;, }, public, double, getNorm, (, ), {, return, FastMath, ., abs, (, x, ), ;, }, public, double, getNormSq]
[., abs, (, x, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., abs, (, x, )]
[), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., abs, (, x, ), ;, }, public, double]
[;, }, public, double, getNormSq, (, ), {, return, x, *, x, ;, }, public, double, getNormInf, (, ), {]
[., abs, (, x, ), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, ;, }, public]
[), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, ;, }, public, double, getNormInf, (, )]
[;, }, public, double, getNormInf, (, ), {, return, FastMath, ., abs, (, x, ), ;, }, public, Vector1D, add]
[*, x, ;, }, public, double, getNormInf, (, ), {, return, FastMath, ., abs, (, x, ), ;, }, public]
[;, }, public, double, getNormInf, (, ), {, return, FastMath, ., abs, (, x, ), ;, }, public, Vector1D, add]
[;, }, public, Vector1D, add, (, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =, (, Vector1D, ), v]
[., abs, (, x, ), ;, }, public, Vector1D, add, (, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1]
[), ;, }, public, Vector1D, add, (, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =, (, Vector1D, )]
[;, return, new, Vector1D, (, x, +, v1, ., getX, (, ), ), ;, }, public, Vector1D, add, (, double]
[;, return, new, Vector1D, (, x, +, v1, ., getX, (, ), ), ;, }, public, Vector1D, add, (, double]
[;, }, public, Vector1D, add, (, double, factor, ,, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =, (]
[), ;, }, public, Vector1D, add, (, double, factor, ,, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =]
[+, v1, ., getX, (, ), ), ;, }, public, Vector1D, add, (, double, factor, ,, Vector, <, Euclidean1D, >]
[), ;, }, public, Vector1D, add, (, double, factor, ,, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =]
[., getX, (, ), ), ;, }, public, Vector1D, add, (, double, factor, ,, Vector, <, Euclidean1D, >, v, )]
[;, return, new, Vector1D, (, x, +, factor, *, v1, ., getX, (, ), ), ;, }, public, Vector1D, subtract]
[;, return, new, Vector1D, (, x, +, factor, *, v1, ., getX, (, ), ), ;, }, public, Vector1D, subtract]
[;, }, public, Vector1D, subtract, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, ), p]
[), ;, }, public, Vector1D, subtract, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, )]
[+, factor, *, v1, ., getX, (, ), ), ;, }, public, Vector1D, subtract, (, Vector, <, Euclidean1D, >, p]
[), ;, }, public, Vector1D, subtract, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, )]
[*, v1, ., getX, (, ), ), ;, }, public, Vector1D, subtract, (, Vector, <, Euclidean1D, >, p, ), {]
[), ;, }, public, Vector1D, subtract, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, )]
[., getX, (, ), ), ;, }, public, Vector1D, subtract, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3]
[;, return, new, Vector1D, (, x, -, p3, ., x, ), ;, }, public, Vector1D, subtract, (, double, factor, ,]
[;, return, new, Vector1D, (, x, -, p3, ., x, ), ;, }, public, Vector1D, subtract, (, double, factor, ,]
[;, }, public, Vector1D, subtract, (, double, factor, ,, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =, (]
[), ;, }, public, Vector1D, subtract, (, double, factor, ,, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =]
[-, p3, ., x, ), ;, }, public, Vector1D, subtract, (, double, factor, ,, Vector, <, Euclidean1D, >, v, )]
[), ;, }, public, Vector1D, subtract, (, double, factor, ,, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =]
[., x, ), ;, }, public, Vector1D, subtract, (, double, factor, ,, Vector, <, Euclidean1D, >, v, ), {, Vector1D]
[;, return, new, Vector1D, (, x, -, factor, *, v1, ., getX, (, ), ), ;, }, public, Vector1D, normalize]
[;, return, new, Vector1D, (, x, -, factor, *, v1, ., getX, (, ), ), ;, }, public, Vector1D, normalize]
[;, }, public, Vector1D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (, s]
[), ;, }, public, Vector1D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (]
[-, factor, *, v1, ., getX, (, ), ), ;, }, public, Vector1D, normalize, (, ), throws, MathArithmeticException, {, double]
[), ;, }, public, Vector1D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (]
[*, v1, ., getX, (, ), ), ;, }, public, Vector1D, normalize, (, ), throws, MathArithmeticException, {, double, s, =]
[), ;, }, public, Vector1D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (]
[., getX, (, ), ), ;, }, public, Vector1D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (]
[;, if, (, s, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (, 1, /, s, ), ;]
[==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (, 1, /, s]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (, 1, /, s, ), ;]
[;, }, return, scalarMultiply, (, 1, /, s, ), ;, }, public, Vector1D, negate, (, ), {, return, new, Vector1D]
[), ;, }, return, scalarMultiply, (, 1, /, s, ), ;, }, public, Vector1D, negate, (, ), {, return, new]
[., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (, 1, /, s, ), ;, }, public, Vector1D, negate, (, ), {]
[;, }, public, Vector1D, negate, (, ), {, return, new, Vector1D, (, -, x, ), ;, }, public, Vector1D, scalarMultiply]
[), ;, }, public, Vector1D, negate, (, ), {, return, new, Vector1D, (, -, x, ), ;, }, public, Vector1D]
[/, s, ), ;, }, public, Vector1D, negate, (, ), {, return, new, Vector1D, (, -, x, ), ;, }]
[), ;, }, public, Vector1D, negate, (, ), {, return, new, Vector1D, (, -, x, ), ;, }, public, Vector1D]
[;, }, public, Vector1D, scalarMultiply, (, double, a, ), {, return, new, Vector1D, (, a, *, x, ), ;, }]
[), ;, }, public, Vector1D, scalarMultiply, (, double, a, ), {, return, new, Vector1D, (, a, *, x, ), ;]
[), ;, }, public, Vector1D, scalarMultiply, (, double, a, ), {, return, new, Vector1D, (, a, *, x, ), ;]
[;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ;, }, public, boolean, isInfinite]
[), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ;, }, public, boolean]
[*, x, ), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ;, }]
[), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ;, }, public, boolean]
[;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, Double, ., isInfinite, (, x, )]
[., isNaN, (, x, ), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, Double]
[), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, Double, ., isInfinite, (, x]
[;, }, public, double, distance1, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, ), p]
[&&, Double, ., isInfinite, (, x, ), ;, }, public, double, distance1, (, Vector, <, Euclidean1D, >, p, ), {]
[&&, Double, ., isInfinite, (, x, ), ;, }, public, double, distance1, (, Vector, <, Euclidean1D, >, p, ), {]
[;, }, public, double, distance1, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, ), p]
[., isInfinite, (, x, ), ;, }, public, double, distance1, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3]
[), ;, }, public, double, distance1, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, )]
[;, final, double, dx, =, FastMath, ., abs, (, p3, ., x, -, x, ), ;, return, dx, ;, }]
[;, final, double, dx, =, FastMath, ., abs, (, p3, ., x, -, x, ), ;, return, dx, ;, }]
[;, return, dx, ;, }, public, double, distance, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (]
[., abs, (, p3, ., x, -, x, ), ;, return, dx, ;, }, public, double, distance, (, Vector, <]
[), ;, return, dx, ;, }, public, double, distance, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =]
[-, x, ), ;, return, dx, ;, }, public, double, distance, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D]
[., x, -, x, ), ;, return, dx, ;, }, public, double, distance, (, Vector, <, Euclidean1D, >, p, )]
[), ;, return, dx, ;, }, public, double, distance, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =]
[;, }, public, double, distance, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, ), p]
[;, final, double, dx, =, p3, ., x, -, x, ;, return, FastMath, ., abs, (, dx, ), ;, }]
[;, final, double, dx, =, p3, ., x, -, x, ;, return, FastMath, ., abs, (, dx, ), ;, }]
[;, return, FastMath, ., abs, (, dx, ), ;, }, public, double, distanceInf, (, Vector, <, Euclidean1D, >, p, )]
[-, x, ;, return, FastMath, ., abs, (, dx, ), ;, }, public, double, distanceInf, (, Vector, <, Euclidean1D, >]
[., x, -, x, ;, return, FastMath, ., abs, (, dx, ), ;, }, public, double, distanceInf, (, Vector, <]
[;, return, FastMath, ., abs, (, dx, ), ;, }, public, double, distanceInf, (, Vector, <, Euclidean1D, >, p, )]
[;, }, public, double, distanceInf, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, ), p]
[., abs, (, dx, ), ;, }, public, double, distanceInf, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3]
[), ;, }, public, double, distanceInf, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, )]
[;, final, double, dx, =, FastMath, ., abs, (, p3, ., x, -, x, ), ;, return, dx, ;, }]
[;, final, double, dx, =, FastMath, ., abs, (, p3, ., x, -, x, ), ;, return, dx, ;, }]
[;, return, dx, ;, }, public, double, distanceSq, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (]
[., abs, (, p3, ., x, -, x, ), ;, return, dx, ;, }, public, double, distanceSq, (, Vector, <]
[), ;, return, dx, ;, }, public, double, distanceSq, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =]
[-, x, ), ;, return, dx, ;, }, public, double, distanceSq, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D]
[., x, -, x, ), ;, return, dx, ;, }, public, double, distanceSq, (, Vector, <, Euclidean1D, >, p, )]
[), ;, return, dx, ;, }, public, double, distanceSq, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =]
[;, }, public, double, distanceSq, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, ), p]
[;, final, double, dx, =, p3, ., x, -, x, ;, return, dx, *, dx, ;, }, public, double, dotProduct]
[;, final, double, dx, =, p3, ., x, -, x, ;, return, dx, *, dx, ;, }, public, double, dotProduct]
[;, return, dx, *, dx, ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean1D, >, v, ), {, final]
[-, x, ;, return, dx, *, dx, ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean1D, >, v, )]
[., x, -, x, ;, return, dx, *, dx, ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean1D, >]
[;, return, dx, *, dx, ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean1D, >, v, ), {, final]
[;, }, public, double, dotProduct, (, final, Vector, <, Euclidean1D, >, v, ), {, final, Vector1D, v1, =, (, Vector1D]
[*, dx, ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean1D, >, v, ), {, final, Vector1D, v1, =]
[;, }, public, double, dotProduct, (, final, Vector, <, Euclidean1D, >, v, ), {, final, Vector1D, v1, =, (, Vector1D]
[;, return, x, *, v1, ., x, ;, }, public, static, double, distance, (, Vector1D, p1, ,, Vector1D, p2, )]
[;, return, x, *, v1, ., x, ;, }, public, static, double, distance, (, Vector1D, p1, ,, Vector1D, p2, )]
[;, }, public, static, double, distance, (, Vector1D, p1, ,, Vector1D, p2, ), {, return, p1, ., distance, (, p2]
[*, v1, ., x, ;, }, public, static, double, distance, (, Vector1D, p1, ,, Vector1D, p2, ), {, return, p1]
[;, }, public, static, double, distance, (, Vector1D, p1, ,, Vector1D, p2, ), {, return, p1, ., distance, (, p2]
[., x, ;, }, public, static, double, distance, (, Vector1D, p1, ,, Vector1D, p2, ), {, return, p1, ., distance]
[;, }, public, static, double, distanceInf, (, Vector1D, p1, ,, Vector1D, p2, ), {, return, p1, ., distanceInf, (, p2]
[., distance, (, p2, ), ;, }, public, static, double, distanceInf, (, Vector1D, p1, ,, Vector1D, p2, ), {, return]
[), ;, }, public, static, double, distanceInf, (, Vector1D, p1, ,, Vector1D, p2, ), {, return, p1, ., distanceInf, (]
[;, }, public, static, double, distanceSq, (, Vector1D, p1, ,, Vector1D, p2, ), {, return, p1, ., distanceSq, (, p2]
[., distanceInf, (, p2, ), ;, }, public, static, double, distanceSq, (, Vector1D, p1, ,, Vector1D, p2, ), {, return]
[), ;, }, public, static, double, distanceSq, (, Vector1D, p1, ,, Vector1D, p2, ), {, return, p1, ., distanceSq, (]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return]
[., distanceSq, (, p2, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this]
[), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {]
[), {, return, true, ;, }, if, (, other, instanceof, Vector1D, ), {, final, Vector1D, rhs, =, (, Vector1D, )]
[==, other, ), {, return, true, ;, }, if, (, other, instanceof, Vector1D, ), {, final, Vector1D, rhs, =, (]
[), {, return, true, ;, }, if, (, other, instanceof, Vector1D, ), {, final, Vector1D, rhs, =, (, Vector1D, )]
[;, }, if, (, other, instanceof, Vector1D, ), {, final, Vector1D, rhs, =, (, Vector1D, ), other, ;, if, (]
[), {, final, Vector1D, rhs, =, (, Vector1D, ), other, ;, if, (, rhs, ., isNaN, (, ), ), {]
[instanceof, Vector1D, ), {, final, Vector1D, rhs, =, (, Vector1D, ), other, ;, if, (, rhs, ., isNaN, (, )]
[;, if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return, x]
[;, if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return, x]
[), {, return, this, ., isNaN, (, ), ;, }, return, x, ==, rhs, ., x, ;, }, return, false]
[., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return, x, ==, rhs, ., x]
[;, }, return, x, ==, rhs, ., x, ;, }, return, false, ;, }, @, Override, public, int, hashCode, (]
[., isNaN, (, ), ;, }, return, x, ==, rhs, ., x, ;, }, return, false, ;, }, @, Override]
[;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), )]
[==, rhs, ., x, ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (]
[;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), )]
[., x, ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, (]
[;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 7785, ;]
[), {, return, 7785, ;, }, return, 997, *, MathUtils, ., hash, (, x, ), ;, }, @, Override, public]
[;, }, return, 997, *, MathUtils, ., hash, (, x, ), ;, }, @, Override, public, String, toString, (, )]
[;, }, @, Override, public, String, toString, (, ), {, return, Vector1DFormat, ., getInstance, (, ), ., format, (, this]
[*, MathUtils, ., hash, (, x, ), ;, }, @, Override, public, String, toString, (, ), {, return, Vector1DFormat, .]
[;, }, @, Override, public, String, toString, (, ), {, return, Vector1DFormat, ., getInstance, (, ), ., format, (, this]
[., hash, (, x, ), ;, }, @, Override, public, String, toString, (, ), {, return, Vector1DFormat, ., getInstance, (]
[), ;, }, @, Override, public, String, toString, (, ), {, return, Vector1DFormat, ., getInstance, (, ), ., format, (]
[;, }, public, String, toString, (, final, NumberFormat, format, ), {, return, new, Vector1DFormat, (, format, ), ., format, (]
[., format, (, this, ), ;, }, public, String, toString, (, final, NumberFormat, format, ), {, return, new, Vector1DFormat, (]
[., getInstance, (, ), ., format, (, this, ), ;, }, public, String, toString, (, final, NumberFormat, format, ), {]
[), ;, }, public, String, toString, (, final, NumberFormat, format, ), {, return, new, Vector1DFormat, (, format, ), ., format]
[;, }, }]
[., format, (, this, ), ;, }, }]
[), ., format, (, this, ), ;, }, }]
[), ;, }, }]
