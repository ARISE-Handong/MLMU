[FieldUtils, (, ), {, super, (, ), ;, }, public, static, int, safeNegate, (, int, value, ), {, if, (]
[FieldUtils, (, ), {, super, (, ), ;, }, public, static, int, safeNegate, (, int, value, ), {, if, (]
[), {, super, (, ), ;, }, public, static, int, safeNegate, (, int, value, ), {, if, (, value, ==]
[), {, super, (, ), ;, }, public, static, int, safeNegate, (, int, value, ), {, if, (, value, ==]
[}, public, static, int, safeNegate, (, int, value, ), {, if, (, value, ==, Integer, ., MIN_VALUE, ), {, throw]
[int, safeNegate, (, int, value, ), {, if, (, value, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (]
[), {, if, (, value, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "Integer.MIN_VALUE cannot be negated", ), ;, }, return]
[{, if, (, value, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "Integer.MIN_VALUE cannot be negated", ), ;, }, return, -]
[return, -, value, ;, }, public, static, int, safeAdd, (, int, val1, ,, int, val2, ), {, int, sum, =]
[return, -, value, ;, }, public, static, int, safeAdd, (, int, val1, ,, int, val2, ), {, int, sum, =]
[value, ;, }, public, static, int, safeAdd, (, int, val1, ,, int, val2, ), {, int, sum, =, val1, +]
[static, int, safeAdd, (, int, val1, ,, int, val2, ), {, int, sum, =, val1, +, val2, ;, if, (]
[static, int, safeAdd, (, int, val1, ,, int, val2, ), {, int, sum, =, val1, +, val2, ;, if, (]
[static, int, safeAdd, (, int, val1, ,, int, val2, ), {, int, sum, =, val1, +, val2, ;, if, (]
[int, safeAdd, (, int, val1, ,, int, val2, ), {, int, sum, =, val1, +, val2, ;, if, (, (]
[int, safeAdd, (, int, val1, ,, int, val2, ), {, int, sum, =, val1, +, val2, ;, if, (, (]
[(, int, val1, ,, int, val2, ), {, int, sum, =, val1, +, val2, ;, if, (, (, val1, ^]
[,, int, val2, ), {, int, sum, =, val1, +, val2, ;, if, (, (, val1, ^, sum, ), <]
[val2, ), {, int, sum, =, val1, +, val2, ;, if, (, (, val1, ^, sum, ), <, 0, &&]
[val2, ), {, int, sum, =, val1, +, val2, ;, if, (, (, val1, ^, sum, ), <, 0, &&]
[), {, int, sum, =, val1, +, val2, ;, if, (, (, val1, ^, sum, ), <, 0, &&, (]
[), {, int, sum, =, val1, +, val2, ;, if, (, (, val1, ^, sum, ), <, 0, &&, (]
[int, sum, =, val1, +, val2, ;, if, (, (, val1, ^, sum, ), <, 0, &&, (, val1, ^]
[val1, +, val2, ;, if, (, (, val1, ^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=]
[if, (, (, val1, ^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw]
[val1, ^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (]
[val1, ^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (]
[val1, ^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (]
[val1, ^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (]
[sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +]
[<, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +]
[&&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +]
[), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +, val2, ), ;, }, return]
[}, return, sum, ;, }, public, static, long, safeAdd, (, long, val1, ,, long, val2, ), {, long, sum, =]
[}, return, sum, ;, }, public, static, long, safeAdd, (, long, val1, ,, long, val2, ), {, long, sum, =]
[sum, ;, }, public, static, long, safeAdd, (, long, val1, ,, long, val2, ), {, long, sum, =, val1, +]
[static, long, safeAdd, (, long, val1, ,, long, val2, ), {, long, sum, =, val1, +, val2, ;, if, (]
[static, long, safeAdd, (, long, val1, ,, long, val2, ), {, long, sum, =, val1, +, val2, ;, if, (]
[static, long, safeAdd, (, long, val1, ,, long, val2, ), {, long, sum, =, val1, +, val2, ;, if, (]
[long, safeAdd, (, long, val1, ,, long, val2, ), {, long, sum, =, val1, +, val2, ;, if, (, (]
[long, safeAdd, (, long, val1, ,, long, val2, ), {, long, sum, =, val1, +, val2, ;, if, (, (]
[(, long, val1, ,, long, val2, ), {, long, sum, =, val1, +, val2, ;, if, (, (, val1, ^]
[,, long, val2, ), {, long, sum, =, val1, +, val2, ;, if, (, (, val1, ^, sum, ), <]
[val2, ), {, long, sum, =, val1, +, val2, ;, if, (, (, val1, ^, sum, ), <, 0, &&]
[val2, ), {, long, sum, =, val1, +, val2, ;, if, (, (, val1, ^, sum, ), <, 0, &&]
[), {, long, sum, =, val1, +, val2, ;, if, (, (, val1, ^, sum, ), <, 0, &&, (]
[), {, long, sum, =, val1, +, val2, ;, if, (, (, val1, ^, sum, ), <, 0, &&, (]
[long, sum, =, val1, +, val2, ;, if, (, (, val1, ^, sum, ), <, 0, &&, (, val1, ^]
[val1, +, val2, ;, if, (, (, val1, ^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=]
[if, (, (, val1, ^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw]
[val1, ^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (]
[val1, ^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (]
[val1, ^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (]
[val1, ^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (]
[sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +]
[<, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +]
[&&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +]
[), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +, val2, ), ;, }, return]
[}, return, sum, ;, }, public, static, long, safeSubtract, (, long, val1, ,, long, val2, ), {, long, diff, =]
[}, return, sum, ;, }, public, static, long, safeSubtract, (, long, val1, ,, long, val2, ), {, long, diff, =]
[sum, ;, }, public, static, long, safeSubtract, (, long, val1, ,, long, val2, ), {, long, diff, =, val1, -]
[static, long, safeSubtract, (, long, val1, ,, long, val2, ), {, long, diff, =, val1, -, val2, ;, if, (]
[static, long, safeSubtract, (, long, val1, ,, long, val2, ), {, long, diff, =, val1, -, val2, ;, if, (]
[static, long, safeSubtract, (, long, val1, ,, long, val2, ), {, long, diff, =, val1, -, val2, ;, if, (]
[long, safeSubtract, (, long, val1, ,, long, val2, ), {, long, diff, =, val1, -, val2, ;, if, (, (]
[long, safeSubtract, (, long, val1, ,, long, val2, ), {, long, diff, =, val1, -, val2, ;, if, (, (]
[(, long, val1, ,, long, val2, ), {, long, diff, =, val1, -, val2, ;, if, (, (, val1, ^]
[,, long, val2, ), {, long, diff, =, val1, -, val2, ;, if, (, (, val1, ^, diff, ), <]
[val2, ), {, long, diff, =, val1, -, val2, ;, if, (, (, val1, ^, diff, ), <, 0, &&]
[val2, ), {, long, diff, =, val1, -, val2, ;, if, (, (, val1, ^, diff, ), <, 0, &&]
[), {, long, diff, =, val1, -, val2, ;, if, (, (, val1, ^, diff, ), <, 0, &&, (]
[), {, long, diff, =, val1, -, val2, ;, if, (, (, val1, ^, diff, ), <, 0, &&, (]
[long, diff, =, val1, -, val2, ;, if, (, (, val1, ^, diff, ), <, 0, &&, (, val1, ^]
[val1, -, val2, ;, if, (, (, val1, ^, diff, ), <, 0, &&, (, val1, ^, val2, ), <]
[if, (, (, val1, ^, diff, ), <, 0, &&, (, val1, ^, val2, ), <, 0, ), {, throw]
[val1, ^, diff, ), <, 0, &&, (, val1, ^, val2, ), <, 0, ), {, throw, new, ArithmeticException, (]
[val1, ^, diff, ), <, 0, &&, (, val1, ^, val2, ), <, 0, ), {, throw, new, ArithmeticException, (]
[val1, ^, diff, ), <, 0, &&, (, val1, ^, val2, ), <, 0, ), {, throw, new, ArithmeticException, (]
[val1, ^, diff, ), <, 0, &&, (, val1, ^, val2, ), <, 0, ), {, throw, new, ArithmeticException, (]
[diff, ), <, 0, &&, (, val1, ^, val2, ), <, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +]
[<, 0, &&, (, val1, ^, val2, ), <, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +]
[&&, (, val1, ^, val2, ), <, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " - ", +]
[), <, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " - ", +, val2, ), ;, }, return]
[}, return, diff, ;, }, public, static, int, safeMultiply, (, int, val1, ,, int, val2, ), {, long, total, =]
[}, return, diff, ;, }, public, static, int, safeMultiply, (, int, val1, ,, int, val2, ), {, long, total, =]
[;, }, public, static, int, safeMultiply, (, int, val1, ,, int, val2, ), {, long, total, =, (, long, )]
[public, static, int, safeMultiply, (, int, val1, ,, int, val2, ), {, long, total, =, (, long, ), val1, *]
[safeMultiply, (, int, val1, ,, int, val2, ), {, long, total, =, (, long, ), val1, *, (, long, )]
[,, int, val2, ), {, long, total, =, (, long, ), val1, *, (, long, ), val2, ;, if, (]
[,, int, val2, ), {, long, total, =, (, long, ), val1, *, (, long, ), val2, ;, if, (]
[,, int, val2, ), {, long, total, =, (, long, ), val1, *, (, long, ), val2, ;, if, (]
[val2, ), {, long, total, =, (, long, ), val1, *, (, long, ), val2, ;, if, (, total, <]
[val2, ), {, long, total, =, (, long, ), val1, *, (, long, ), val2, ;, if, (, total, <]
[total, =, (, long, ), val1, *, (, long, ), val2, ;, if, (, total, <, Integer, ., MIN_VALUE, ||]
[total, =, (, long, ), val1, *, (, long, ), val2, ;, if, (, total, <, Integer, ., MIN_VALUE, ||]
[(, long, ), val1, *, (, long, ), val2, ;, if, (, total, <, Integer, ., MIN_VALUE, ||, total, >]
[(, long, ), val1, *, (, long, ), val2, ;, if, (, total, <, Integer, ., MIN_VALUE, ||, total, >]
[long, ), val2, ;, if, (, total, <, Integer, ., MIN_VALUE, ||, total, >, Integer, ., MAX_VALUE, ), {, throw]
[;, if, (, total, <, Integer, ., MIN_VALUE, ||, total, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (]
[;, if, (, total, <, Integer, ., MIN_VALUE, ||, total, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (]
[;, if, (, total, <, Integer, ., MIN_VALUE, ||, total, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (]
[;, if, (, total, <, Integer, ., MIN_VALUE, ||, total, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (]
[(, total, <, Integer, ., MIN_VALUE, ||, total, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "Multiplication overflows an int: ", +]
[<, Integer, ., MIN_VALUE, ||, total, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "Multiplication overflows an int: ", +, val1, +]
[., MIN_VALUE, ||, total, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "Multiplication overflows an int: ", +, val1, +, " * ", +]
[Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "Multiplication overflows an int: ", +, val1, +, " * ", +, val2, ), ;, }, return]
[), {, throw, new, ArithmeticException, (, "Multiplication overflows an int: ", +, val1, +, " * ", +, val2, ), ;, }, return, (, int, )]
[(, int, ), total, ;, }, public, static, long, safeMultiply, (, long, val1, ,, int, val2, ), {, switch, (]
[;, }, public, static, long, safeMultiply, (, long, val1, ,, int, val2, ), {, switch, (, val2, ), {, case]
[}, public, static, long, safeMultiply, (, long, val1, ,, int, val2, ), {, switch, (, val2, ), {, case, -]
[safeMultiply, (, long, val1, ,, int, val2, ), {, switch, (, val2, ), {, case, -, 1, :, if, (]
[safeMultiply, (, long, val1, ,, int, val2, ), {, switch, (, val2, ), {, case, -, 1, :, if, (]
[long, val1, ,, int, val2, ), {, switch, (, val2, ), {, case, -, 1, :, if, (, val1, ==]
[long, val1, ,, int, val2, ), {, switch, (, val2, ), {, case, -, 1, :, if, (, val1, ==]
[{, switch, (, val2, ), {, case, -, 1, :, if, (, val1, ==, Long, ., MIN_VALUE, ), {, throw]
[val2, ), {, case, -, 1, :, if, (, val1, ==, Long, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (]
[val2, ), {, case, -, 1, :, if, (, val1, ==, Long, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (]
[val2, ), {, case, -, 1, :, if, (, val1, ==, Long, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (]
[val2, ), {, case, -, 1, :, if, (, val1, ==, Long, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (]
[{, case, -, 1, :, if, (, val1, ==, Long, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +]
[-, 1, :, if, (, val1, ==, Long, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +]
[:, if, (, val1, ==, Long, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +]
[Long, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;, }, return]
[., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;, }, return, -]
[{, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;, }, return, -, val1, ;, case]
[ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;, }, return, -, val1, ;, case, 0, :, return]
[+, val1, +, " * ", +, val2, ), ;, }, return, -, val1, ;, case, 0, :, return, 0L, ;, case]
[" * ", +, val2, ), ;, }, return, -, val1, ;, case, 0, :, return, 0L, ;, case, 1, :, return]
[return, -, val1, ;, case, 0, :, return, 0L, ;, case, 1, :, return, val1, ;, }, long, total, =]
[return, -, val1, ;, case, 0, :, return, 0L, ;, case, 1, :, return, val1, ;, }, long, total, =]
[val1, ;, case, 0, :, return, 0L, ;, case, 1, :, return, val1, ;, }, long, total, =, val1, *]
[:, return, 0L, ;, case, 1, :, return, val1, ;, }, long, total, =, val1, *, val2, ;, if, (]
[:, return, 0L, ;, case, 1, :, return, val1, ;, }, long, total, =, val1, *, val2, ;, if, (]
[:, return, 0L, ;, case, 1, :, return, val1, ;, }, long, total, =, val1, *, val2, ;, if, (]
[0L, ;, case, 1, :, return, val1, ;, }, long, total, =, val1, *, val2, ;, if, (, total, /]
[case, 1, :, return, val1, ;, }, long, total, =, val1, *, val2, ;, if, (, total, /, val2, !=]
[val1, ;, }, long, total, =, val1, *, val2, ;, if, (, total, /, val2, !=, val1, ), {, throw]
[long, total, =, val1, *, val2, ;, if, (, total, /, val2, !=, val1, ), {, throw, new, ArithmeticException, (]
[long, total, =, val1, *, val2, ;, if, (, total, /, val2, !=, val1, ), {, throw, new, ArithmeticException, (]
[long, total, =, val1, *, val2, ;, if, (, total, /, val2, !=, val1, ), {, throw, new, ArithmeticException, (]
[long, total, =, val1, *, val2, ;, if, (, total, /, val2, !=, val1, ), {, throw, new, ArithmeticException, (]
[=, val1, *, val2, ;, if, (, total, /, val2, !=, val1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +]
[*, val2, ;, if, (, total, /, val2, !=, val1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +]
[;, if, (, total, /, val2, !=, val1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +]
[val2, !=, val1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;, }, return]
[;, }, return, total, ;, }, public, static, long, safeMultiply, (, long, val1, ,, long, val2, ), {, if, (]
[;, }, return, total, ;, }, public, static, long, safeMultiply, (, long, val1, ,, long, val2, ), {, if, (]
[return, total, ;, }, public, static, long, safeMultiply, (, long, val1, ,, long, val2, ), {, if, (, val2, ==]
[public, static, long, safeMultiply, (, long, val1, ,, long, val2, ), {, if, (, val2, ==, 1, ), {, return]
[long, val1, ,, long, val2, ), {, if, (, val2, ==, 1, ), {, return, val1, ;, }, if, (]
[long, val1, ,, long, val2, ), {, if, (, val2, ==, 1, ), {, return, val1, ;, }, if, (]
[,, long, val2, ), {, if, (, val2, ==, 1, ), {, return, val1, ;, }, if, (, val1, ==]
[{, if, (, val2, ==, 1, ), {, return, val1, ;, }, if, (, val1, ==, 1, ), {, return]
[1, ), {, return, val1, ;, }, if, (, val1, ==, 1, ), {, return, val2, ;, }, if, (]
[1, ), {, return, val1, ;, }, if, (, val1, ==, 1, ), {, return, val2, ;, }, if, (]
[1, ), {, return, val1, ;, }, if, (, val1, ==, 1, ), {, return, val2, ;, }, if, (]
[{, return, val1, ;, }, if, (, val1, ==, 1, ), {, return, val2, ;, }, if, (, val1, ==]
[val1, ;, }, if, (, val1, ==, 1, ), {, return, val2, ;, }, if, (, val1, ==, 0, ||]
[val1, ;, }, if, (, val1, ==, 1, ), {, return, val2, ;, }, if, (, val1, ==, 0, ||]
[}, if, (, val1, ==, 1, ), {, return, val2, ;, }, if, (, val1, ==, 0, ||, val2, ==]
[==, 1, ), {, return, val2, ;, }, if, (, val1, ==, 0, ||, val2, ==, 0, ), {, return]
[;, }, if, (, val1, ==, 0, ||, val2, ==, 0, ), {, return, 0, ;, }, long, total, =]
[;, }, if, (, val1, ==, 0, ||, val2, ==, 0, ), {, return, 0, ;, }, long, total, =]
[if, (, val1, ==, 0, ||, val2, ==, 0, ), {, return, 0, ;, }, long, total, =, val1, *]
[0, ||, val2, ==, 0, ), {, return, 0, ;, }, long, total, =, val1, *, val2, ;, if, (]
[0, ||, val2, ==, 0, ), {, return, 0, ;, }, long, total, =, val1, *, val2, ;, if, (]
[0, ||, val2, ==, 0, ), {, return, 0, ;, }, long, total, =, val1, *, val2, ;, if, (]
[0, ||, val2, ==, 0, ), {, return, 0, ;, }, long, total, =, val1, *, val2, ;, if, (]
[0, ||, val2, ==, 0, ), {, return, 0, ;, }, long, total, =, val1, *, val2, ;, if, (]
[val2, ==, 0, ), {, return, 0, ;, }, long, total, =, val1, *, val2, ;, if, (, total, /]
[0, ), {, return, 0, ;, }, long, total, =, val1, *, val2, ;, if, (, total, /, val2, !=]
[{, return, 0, ;, }, long, total, =, val1, *, val2, ;, if, (, total, /, val2, !=, val1, ||]
[{, return, 0, ;, }, long, total, =, val1, *, val2, ;, if, (, total, /, val2, !=, val1, ||]
[{, return, 0, ;, }, long, total, =, val1, *, val2, ;, if, (, total, /, val2, !=, val1, ||]
[0, ;, }, long, total, =, val1, *, val2, ;, if, (, total, /, val2, !=, val1, ||, val1, ==]
[0, ;, }, long, total, =, val1, *, val2, ;, if, (, total, /, val2, !=, val1, ||, val1, ==]
[total, =, val1, *, val2, ;, if, (, total, /, val2, !=, val1, ||, val1, ==, Long, ., MIN_VALUE, &&]
[total, =, val1, *, val2, ;, if, (, total, /, val2, !=, val1, ||, val1, ==, Long, ., MIN_VALUE, &&]
[val1, *, val2, ;, if, (, total, /, val2, !=, val1, ||, val1, ==, Long, ., MIN_VALUE, &&, val2, ==]
[*, val2, ;, if, (, total, /, val2, !=, val1, ||, val1, ==, Long, ., MIN_VALUE, &&, val2, ==, -]
[;, if, (, total, /, val2, !=, val1, ||, val1, ==, Long, ., MIN_VALUE, &&, val2, ==, -, 1, ||]
[;, if, (, total, /, val2, !=, val1, ||, val1, ==, Long, ., MIN_VALUE, &&, val2, ==, -, 1, ||]
[;, if, (, total, /, val2, !=, val1, ||, val1, ==, Long, ., MIN_VALUE, &&, val2, ==, -, 1, ||]
[(, total, /, val2, !=, val1, ||, val1, ==, Long, ., MIN_VALUE, &&, val2, ==, -, 1, ||, val2, ==]
[(, total, /, val2, !=, val1, ||, val1, ==, Long, ., MIN_VALUE, &&, val2, ==, -, 1, ||, val2, ==]
[!=, val1, ||, val1, ==, Long, ., MIN_VALUE, &&, val2, ==, -, 1, ||, val2, ==, Long, ., MIN_VALUE, &&]
[!=, val1, ||, val1, ==, Long, ., MIN_VALUE, &&, val2, ==, -, 1, ||, val2, ==, Long, ., MIN_VALUE, &&]
[||, val1, ==, Long, ., MIN_VALUE, &&, val2, ==, -, 1, ||, val2, ==, Long, ., MIN_VALUE, &&, val1, ==]
[val1, ==, Long, ., MIN_VALUE, &&, val2, ==, -, 1, ||, val2, ==, Long, ., MIN_VALUE, &&, val1, ==, -]
[MIN_VALUE, &&, val2, ==, -, 1, ||, val2, ==, Long, ., MIN_VALUE, &&, val1, ==, -, 1, ), {, throw]
[==, -, 1, ||, val2, ==, Long, ., MIN_VALUE, &&, val1, ==, -, 1, ), {, throw, new, ArithmeticException, (]
[==, -, 1, ||, val2, ==, Long, ., MIN_VALUE, &&, val1, ==, -, 1, ), {, throw, new, ArithmeticException, (]
[==, -, 1, ||, val2, ==, Long, ., MIN_VALUE, &&, val1, ==, -, 1, ), {, throw, new, ArithmeticException, (]
[==, -, 1, ||, val2, ==, Long, ., MIN_VALUE, &&, val1, ==, -, 1, ), {, throw, new, ArithmeticException, (]
[1, ||, val2, ==, Long, ., MIN_VALUE, &&, val1, ==, -, 1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +]
[val2, ==, Long, ., MIN_VALUE, &&, val1, ==, -, 1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +]
[Long, ., MIN_VALUE, &&, val1, ==, -, 1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +]
[==, -, 1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;, }, return]
[;, }, return, total, ;, }, public, static, long, safeDivide, (, long, dividend, ,, long, divisor, ), {, if, (]
[;, }, return, total, ;, }, public, static, long, safeDivide, (, long, dividend, ,, long, divisor, ), {, if, (]
[;, }, return, total, ;, }, public, static, long, safeDivide, (, long, dividend, ,, long, divisor, ), {, if, (]
[return, total, ;, }, public, static, long, safeDivide, (, long, dividend, ,, long, divisor, ), {, if, (, dividend, ==]
[return, total, ;, }, public, static, long, safeDivide, (, long, dividend, ,, long, divisor, ), {, if, (, dividend, ==]
[public, static, long, safeDivide, (, long, dividend, ,, long, divisor, ), {, if, (, dividend, ==, Long, ., MIN_VALUE, &&]
[public, static, long, safeDivide, (, long, dividend, ,, long, divisor, ), {, if, (, dividend, ==, Long, ., MIN_VALUE, &&]
[long, safeDivide, (, long, dividend, ,, long, divisor, ), {, if, (, dividend, ==, Long, ., MIN_VALUE, &&, divisor, ==]
[safeDivide, (, long, dividend, ,, long, divisor, ), {, if, (, dividend, ==, Long, ., MIN_VALUE, &&, divisor, ==, -]
[,, long, divisor, ), {, if, (, dividend, ==, Long, ., MIN_VALUE, &&, divisor, ==, -, 1L, ), {, throw]
[), {, if, (, dividend, ==, Long, ., MIN_VALUE, &&, divisor, ==, -, 1L, ), {, throw, new, ArithmeticException, (]
[), {, if, (, dividend, ==, Long, ., MIN_VALUE, &&, divisor, ==, -, 1L, ), {, throw, new, ArithmeticException, (]
[), {, if, (, dividend, ==, Long, ., MIN_VALUE, &&, divisor, ==, -, 1L, ), {, throw, new, ArithmeticException, (]
[), {, if, (, dividend, ==, Long, ., MIN_VALUE, &&, divisor, ==, -, 1L, ), {, throw, new, ArithmeticException, (]
[if, (, dividend, ==, Long, ., MIN_VALUE, &&, divisor, ==, -, 1L, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +]
[dividend, ==, Long, ., MIN_VALUE, &&, divisor, ==, -, 1L, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, dividend, +]
[Long, ., MIN_VALUE, &&, divisor, ==, -, 1L, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, dividend, +, " / ", +]
[==, -, 1L, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, dividend, +, " / ", +, divisor, ), ;, }, return]
[==, -, 1L, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, dividend, +, " / ", +, divisor, ), ;, }, return]
[1L, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, dividend, +, " / ", +, divisor, ), ;, }, return, dividend, /]
[), ;, }, return, dividend, /, divisor, ;, }, public, static, int, safeToInt, (, long, value, ), {, if, (]
[), ;, }, return, dividend, /, divisor, ;, }, public, static, int, safeToInt, (, long, value, ), {, if, (]
[), ;, }, return, dividend, /, divisor, ;, }, public, static, int, safeToInt, (, long, value, ), {, if, (]
[), ;, }, return, dividend, /, divisor, ;, }, public, static, int, safeToInt, (, long, value, ), {, if, (]
[dividend, /, divisor, ;, }, public, static, int, safeToInt, (, long, value, ), {, if, (, Integer, ., MIN_VALUE, <=]
[divisor, ;, }, public, static, int, safeToInt, (, long, value, ), {, if, (, Integer, ., MIN_VALUE, <=, value, &&]
[divisor, ;, }, public, static, int, safeToInt, (, long, value, ), {, if, (, Integer, ., MIN_VALUE, <=, value, &&]
[}, public, static, int, safeToInt, (, long, value, ), {, if, (, Integer, ., MIN_VALUE, <=, value, &&, value, <=]
[}, public, static, int, safeToInt, (, long, value, ), {, if, (, Integer, ., MIN_VALUE, <=, value, &&, value, <=]
[long, value, ), {, if, (, Integer, ., MIN_VALUE, <=, value, &&, value, <=, Integer, ., MAX_VALUE, ), {, return]
[{, if, (, Integer, ., MIN_VALUE, <=, value, &&, value, <=, Integer, ., MAX_VALUE, ), {, return, (, int, )]
[., MIN_VALUE, <=, value, &&, value, <=, Integer, ., MAX_VALUE, ), {, return, (, int, ), value, ;, }, throw]
[value, &&, value, <=, Integer, ., MAX_VALUE, ), {, return, (, int, ), value, ;, }, throw, new, ArithmeticException, (]
[value, &&, value, <=, Integer, ., MAX_VALUE, ), {, return, (, int, ), value, ;, }, throw, new, ArithmeticException, (]
[value, <=, Integer, ., MAX_VALUE, ), {, return, (, int, ), value, ;, }, throw, new, ArithmeticException, (, "Value cannot fit in an int: ", +]
[+, value, ), ;, }, public, static, int, safeMultiplyToInt, (, long, val1, ,, long, val2, ), {, long, val, =]
[+, value, ), ;, }, public, static, int, safeMultiplyToInt, (, long, val1, ,, long, val2, ), {, long, val, =]
[}, public, static, int, safeMultiplyToInt, (, long, val1, ,, long, val2, ), {, long, val, =, FieldUtils, ., safeMultiply, (]
[static, int, safeMultiplyToInt, (, long, val1, ,, long, val2, ), {, long, val, =, FieldUtils, ., safeMultiply, (, val1, ,]
[long, val1, ,, long, val2, ), {, long, val, =, FieldUtils, ., safeMultiply, (, val1, ,, val2, ), ;, return]
[long, val1, ,, long, val2, ), {, long, val, =, FieldUtils, ., safeMultiply, (, val1, ,, val2, ), ;, return]
[val2, ), {, long, val, =, FieldUtils, ., safeMultiply, (, val1, ,, val2, ), ;, return, FieldUtils, ., safeToInt, (]
[public, static, void, verifyValueBounds, (, DateTimeField, field, ,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (]
[public, static, void, verifyValueBounds, (, DateTimeField, field, ,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (]
[static, void, verifyValueBounds, (, DateTimeField, field, ,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (, (]
[static, void, verifyValueBounds, (, DateTimeField, field, ,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (, (]
[verifyValueBounds, (, DateTimeField, field, ,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (, (, value, <]
[field, ,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (, (, value, <, lowerBound, ), ||]
[,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (, (, value, <, lowerBound, ), ||, (]
[,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (, (, value, <, lowerBound, ), ||, (]
[value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (, (, value, <, lowerBound, ), ||, (, value, >]
[int, upperBound, ), {, if, (, (, value, <, lowerBound, ), ||, (, value, >, upperBound, ), ), {, throw]
[{, if, (, (, value, <, lowerBound, ), ||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (]
[{, if, (, (, value, <, lowerBound, ), ||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (]
[lowerBound, ), ||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, field, ., getType, (, ), ,]
[lowerBound, ), ||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, field, ., getType, (, ), ,]
[value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, field, ., getType, (, ), ,, Integer, ., valueOf, (]
[), ), {, throw, new, IllegalFieldValueException, (, field, ., getType, (, ), ,, Integer, ., valueOf, (, value, ), ,]
[), ), {, throw, new, IllegalFieldValueException, (, field, ., getType, (, ), ,, Integer, ., valueOf, (, value, ), ,]
[new, IllegalFieldValueException, (, field, ., getType, (, ), ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (]
[field, ., getType, (, ), ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound, ), ,]
[field, ., getType, (, ), ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound, ), ,]
[), ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound, ), ,, Integer, ., valueOf, (]
[public, static, void, verifyValueBounds, (, DateTimeFieldType, fieldType, ,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (]
[public, static, void, verifyValueBounds, (, DateTimeFieldType, fieldType, ,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (]
[static, void, verifyValueBounds, (, DateTimeFieldType, fieldType, ,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (, (]
[static, void, verifyValueBounds, (, DateTimeFieldType, fieldType, ,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (, (]
[verifyValueBounds, (, DateTimeFieldType, fieldType, ,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (, (, value, <]
[fieldType, ,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (, (, value, <, lowerBound, ), ||]
[,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (, (, value, <, lowerBound, ), ||, (]
[,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (, (, value, <, lowerBound, ), ||, (]
[value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (, (, value, <, lowerBound, ), ||, (, value, >]
[int, upperBound, ), {, if, (, (, value, <, lowerBound, ), ||, (, value, >, upperBound, ), ), {, throw]
[{, if, (, (, value, <, lowerBound, ), ||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (]
[(, (, value, <, lowerBound, ), ||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, fieldType, ,]
[(, (, value, <, lowerBound, ), ||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, fieldType, ,]
[lowerBound, ), ||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, fieldType, ,, Integer, ., valueOf, (]
[(, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, fieldType, ,, Integer, ., valueOf, (, value, ), ,]
[(, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, fieldType, ,, Integer, ., valueOf, (, value, ), ,]
[), ), {, throw, new, IllegalFieldValueException, (, fieldType, ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (]
[throw, new, IllegalFieldValueException, (, fieldType, ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound, ), ,]
[throw, new, IllegalFieldValueException, (, fieldType, ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound, ), ,]
[fieldType, ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound, ), ,, Integer, ., valueOf, (]
[public, static, void, verifyValueBounds, (, String, fieldName, ,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (]
[public, static, void, verifyValueBounds, (, String, fieldName, ,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (]
[static, void, verifyValueBounds, (, String, fieldName, ,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (, (]
[static, void, verifyValueBounds, (, String, fieldName, ,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (, (]
[verifyValueBounds, (, String, fieldName, ,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (, (, value, <]
[fieldName, ,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (, (, value, <, lowerBound, ), ||]
[,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (, (, value, <, lowerBound, ), ||, (]
[,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (, (, value, <, lowerBound, ), ||, (]
[value, ,, int, lowerBound, ,, int, upperBound, ), {, if, (, (, value, <, lowerBound, ), ||, (, value, >]
[int, upperBound, ), {, if, (, (, value, <, lowerBound, ), ||, (, value, >, upperBound, ), ), {, throw]
[{, if, (, (, value, <, lowerBound, ), ||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (]
[(, (, value, <, lowerBound, ), ||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, fieldName, ,]
[(, (, value, <, lowerBound, ), ||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, fieldName, ,]
[lowerBound, ), ||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, fieldName, ,, Integer, ., valueOf, (]
[(, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, fieldName, ,, Integer, ., valueOf, (, value, ), ,]
[(, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, fieldName, ,, Integer, ., valueOf, (, value, ), ,]
[), ), {, throw, new, IllegalFieldValueException, (, fieldName, ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (]
[throw, new, IllegalFieldValueException, (, fieldName, ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound, ), ,]
[throw, new, IllegalFieldValueException, (, fieldName, ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound, ), ,]
[fieldName, ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound, ), ,, Integer, ., valueOf, (]
[}, public, static, int, getWrappedValue, (, int, currentValue, ,, int, wrapValue, ,, int, minValue, ,, int, maxValue, ), {, return]
[static, int, getWrappedValue, (, int, currentValue, ,, int, wrapValue, ,, int, minValue, ,, int, maxValue, ), {, return, getWrappedValue, (]
[static, int, getWrappedValue, (, int, currentValue, ,, int, wrapValue, ,, int, minValue, ,, int, maxValue, ), {, return, getWrappedValue, (]
[getWrappedValue, (, int, currentValue, ,, int, wrapValue, ,, int, minValue, ,, int, maxValue, ), {, return, getWrappedValue, (, currentValue, +]
[int, currentValue, ,, int, wrapValue, ,, int, minValue, ,, int, maxValue, ), {, return, getWrappedValue, (, currentValue, +, wrapValue, ,]
[,, int, wrapValue, ,, int, minValue, ,, int, maxValue, ), {, return, getWrappedValue, (, currentValue, +, wrapValue, ,, minValue, ,]
[), ;, }, public, static, int, getWrappedValue, (, int, value, ,, int, minValue, ,, int, maxValue, ), {, if, (]
[), ;, }, public, static, int, getWrappedValue, (, int, value, ,, int, minValue, ,, int, maxValue, ), {, if, (]
[}, public, static, int, getWrappedValue, (, int, value, ,, int, minValue, ,, int, maxValue, ), {, if, (, minValue, >=]
[getWrappedValue, (, int, value, ,, int, minValue, ,, int, maxValue, ), {, if, (, minValue, >=, maxValue, ), {, throw]
[value, ,, int, minValue, ,, int, maxValue, ), {, if, (, minValue, >=, maxValue, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, minValue, >=, maxValue, ), {, throw, new, IllegalArgumentException, (, "MIN > MAX", ), ;, }, int, wrapRange, =]
[), {, if, (, minValue, >=, maxValue, ), {, throw, new, IllegalArgumentException, (, "MIN > MAX", ), ;, }, int, wrapRange, =]
[), {, if, (, minValue, >=, maxValue, ), {, throw, new, IllegalArgumentException, (, "MIN > MAX", ), ;, }, int, wrapRange, =]
[if, (, minValue, >=, maxValue, ), {, throw, new, IllegalArgumentException, (, "MIN > MAX", ), ;, }, int, wrapRange, =, maxValue, -]
[minValue, >=, maxValue, ), {, throw, new, IllegalArgumentException, (, "MIN > MAX", ), ;, }, int, wrapRange, =, maxValue, -, minValue, +]
[maxValue, ), {, throw, new, IllegalArgumentException, (, "MIN > MAX", ), ;, }, int, wrapRange, =, maxValue, -, minValue, +, 1, ;]
[{, throw, new, IllegalArgumentException, (, "MIN > MAX", ), ;, }, int, wrapRange, =, maxValue, -, minValue, +, 1, ;, value, -=]
[(, "MIN > MAX", ), ;, }, int, wrapRange, =, maxValue, -, minValue, +, 1, ;, value, -=, minValue, ;, if, (]
[(, "MIN > MAX", ), ;, }, int, wrapRange, =, maxValue, -, minValue, +, 1, ;, value, -=, minValue, ;, if, (]
[), ;, }, int, wrapRange, =, maxValue, -, minValue, +, 1, ;, value, -=, minValue, ;, if, (, value, >=]
[wrapRange, =, maxValue, -, minValue, +, 1, ;, value, -=, minValue, ;, if, (, value, >=, 0, ), {, return]
[wrapRange, =, maxValue, -, minValue, +, 1, ;, value, -=, minValue, ;, if, (, value, >=, 0, ), {, return]
[=, maxValue, -, minValue, +, 1, ;, value, -=, minValue, ;, if, (, value, >=, 0, ), {, return, (]
[=, maxValue, -, minValue, +, 1, ;, value, -=, minValue, ;, if, (, value, >=, 0, ), {, return, (]
[-, minValue, +, 1, ;, value, -=, minValue, ;, if, (, value, >=, 0, ), {, return, (, value, %]
[1, ;, value, -=, minValue, ;, if, (, value, >=, 0, ), {, return, (, value, %, wrapRange, ), +]
[if, (, value, >=, 0, ), {, return, (, value, %, wrapRange, ), +, minValue, ;, }, int, remByRange, =]
[if, (, value, >=, 0, ), {, return, (, value, %, wrapRange, ), +, minValue, ;, }, int, remByRange, =]
[(, value, >=, 0, ), {, return, (, value, %, wrapRange, ), +, minValue, ;, }, int, remByRange, =, (]
[value, >=, 0, ), {, return, (, value, %, wrapRange, ), +, minValue, ;, }, int, remByRange, =, (, -]
[), {, return, (, value, %, wrapRange, ), +, minValue, ;, }, int, remByRange, =, (, -, value, ), %]
[value, %, wrapRange, ), +, minValue, ;, }, int, remByRange, =, (, -, value, ), %, wrapRange, ;, if, (]
[value, %, wrapRange, ), +, minValue, ;, }, int, remByRange, =, (, -, value, ), %, wrapRange, ;, if, (]
[wrapRange, ), +, minValue, ;, }, int, remByRange, =, (, -, value, ), %, wrapRange, ;, if, (, remByRange, ==]
[;, }, int, remByRange, =, (, -, value, ), %, wrapRange, ;, if, (, remByRange, ==, 0, ), {, return]
[;, }, int, remByRange, =, (, -, value, ), %, wrapRange, ;, if, (, remByRange, ==, 0, ), {, return]
[int, remByRange, =, (, -, value, ), %, wrapRange, ;, if, (, remByRange, ==, 0, ), {, return, 0, +]
[-, value, ), %, wrapRange, ;, if, (, remByRange, ==, 0, ), {, return, 0, +, minValue, ;, }, return]
[-, value, ), %, wrapRange, ;, if, (, remByRange, ==, 0, ), {, return, 0, +, minValue, ;, }, return]
[value, ), %, wrapRange, ;, if, (, remByRange, ==, 0, ), {, return, 0, +, minValue, ;, }, return, (]
[value, ), %, wrapRange, ;, if, (, remByRange, ==, 0, ), {, return, 0, +, minValue, ;, }, return, (]
[%, wrapRange, ;, if, (, remByRange, ==, 0, ), {, return, 0, +, minValue, ;, }, return, (, wrapRange, -]
[if, (, remByRange, ==, 0, ), {, return, 0, +, minValue, ;, }, return, (, wrapRange, -, remByRange, ), +]
[remByRange, ), +, minValue, ;, }, public, static, boolean, equals, (, Object, object1, ,, Object, object2, ), {, if, (]
[remByRange, ), +, minValue, ;, }, public, static, boolean, equals, (, Object, object1, ,, Object, object2, ), {, if, (]
[+, minValue, ;, }, public, static, boolean, equals, (, Object, object1, ,, Object, object2, ), {, if, (, object1, ==]
[public, static, boolean, equals, (, Object, object1, ,, Object, object2, ), {, if, (, object1, ==, object2, ), {, return]
[Object, object1, ,, Object, object2, ), {, if, (, object1, ==, object2, ), {, return, true, ;, }, if, (]
[Object, object1, ,, Object, object2, ), {, if, (, object1, ==, object2, ), {, return, true, ;, }, if, (]
[Object, object1, ,, Object, object2, ), {, if, (, object1, ==, object2, ), {, return, true, ;, }, if, (]
[,, Object, object2, ), {, if, (, object1, ==, object2, ), {, return, true, ;, }, if, (, object1, ==]
[object2, ), {, if, (, object1, ==, object2, ), {, return, true, ;, }, if, (, object1, ==, null, ||]
[object2, ), {, if, (, object1, ==, object2, ), {, return, true, ;, }, if, (, object1, ==, null, ||]
[{, if, (, object1, ==, object2, ), {, return, true, ;, }, if, (, object1, ==, null, ||, object2, ==]
[==, object2, ), {, return, true, ;, }, if, (, object1, ==, null, ||, object2, ==, null, ), {, return]
[return, true, ;, }, if, (, object1, ==, null, ||, object2, ==, null, ), {, return, false, ;, }, return]
[return, true, ;, }, if, (, object1, ==, null, ||, object2, ==, null, ), {, return, false, ;, }, return]
[if, (, object1, ==, null, ||, object2, ==, null, ), {, return, false, ;, }, return, object1, ., equals, (]
