[class, Primes, {, private, Primes, (, ), {, }, public, static, boolean, isPrime, (, int, n, ), {, if, (]
[class, Primes, {, private, Primes, (, ), {, }, public, static, boolean, isPrime, (, int, n, ), {, if, (]
[{, private, Primes, (, ), {, }, public, static, boolean, isPrime, (, int, n, ), {, if, (, n, <]
[), {, }, public, static, boolean, isPrime, (, int, n, ), {, if, (, n, <, 2, ), {, return]
[int, n, ), {, if, (, n, <, 2, ), {, return, false, ;, }, for, (, int, p, :]
[int, n, ), {, if, (, n, <, 2, ), {, return, false, ;, }, for, (, int, p, :]
[<, 2, ), {, return, false, ;, }, for, (, int, p, :, SmallPrimes, ., PRIMES, ), {, if, (]
[<, 2, ), {, return, false, ;, }, for, (, int, p, :, SmallPrimes, ., PRIMES, ), {, if, (]
[), {, return, false, ;, }, for, (, int, p, :, SmallPrimes, ., PRIMES, ), {, if, (, 0, ==]
[{, return, false, ;, }, for, (, int, p, :, SmallPrimes, ., PRIMES, ), {, if, (, 0, ==, (]
[{, return, false, ;, }, for, (, int, p, :, SmallPrimes, ., PRIMES, ), {, if, (, 0, ==, (]
[false, ;, }, for, (, int, p, :, SmallPrimes, ., PRIMES, ), {, if, (, 0, ==, (, n, %]
[int, p, :, SmallPrimes, ., PRIMES, ), {, if, (, 0, ==, (, n, %, p, ), ), {, return]
[int, p, :, SmallPrimes, ., PRIMES, ), {, if, (, 0, ==, (, n, %, p, ), ), {, return]
[:, SmallPrimes, ., PRIMES, ), {, if, (, 0, ==, (, n, %, p, ), ), {, return, n, ==]
[{, if, (, 0, ==, (, n, %, p, ), ), {, return, n, ==, p, ;, }, }, return]
[{, if, (, 0, ==, (, n, %, p, ), ), {, return, n, ==, p, ;, }, }, return]
[==, (, n, %, p, ), ), {, return, n, ==, p, ;, }, }, return, SmallPrimes, ., millerRabinPrimeTest, (]
[return, SmallPrimes, ., millerRabinPrimeTest, (, n, ), ;, }, public, static, int, nextPrime, (, int, n, ), {, if, (]
[return, SmallPrimes, ., millerRabinPrimeTest, (, n, ), ;, }, public, static, int, nextPrime, (, int, n, ), {, if, (]
[., millerRabinPrimeTest, (, n, ), ;, }, public, static, int, nextPrime, (, int, n, ), {, if, (, n, <]
[), ;, }, public, static, int, nextPrime, (, int, n, ), {, if, (, n, <, 0, ), {, throw]
[public, static, int, nextPrime, (, int, n, ), {, if, (, n, <, 0, ), {, throw, new, MathIllegalArgumentException, (]
[public, static, int, nextPrime, (, int, n, ), {, if, (, n, <, 0, ), {, throw, new, MathIllegalArgumentException, (]
[(, int, n, ), {, if, (, n, <, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NUMBER_TOO_SMALL, ,]
[n, ), {, if, (, n, <, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NUMBER_TOO_SMALL, ,, n, ,]
[<, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NUMBER_TOO_SMALL, ,, n, ,, 0, ), ;, }, if, (]
[<, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NUMBER_TOO_SMALL, ,, n, ,, 0, ), ;, }, if, (]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NUMBER_TOO_SMALL, ,, n, ,, 0, ), ;, }, if, (, n, ==]
[MathIllegalArgumentException, (, LocalizedFormats, ., NUMBER_TOO_SMALL, ,, n, ,, 0, ), ;, }, if, (, n, ==, 2, ), {, return]
[., NUMBER_TOO_SMALL, ,, n, ,, 0, ), ;, }, if, (, n, ==, 2, ), {, return, 2, ;, }]
[,, n, ,, 0, ), ;, }, if, (, n, ==, 2, ), {, return, 2, ;, }, n, =]
[,, n, ,, 0, ), ;, }, if, (, n, ==, 2, ), {, return, 2, ;, }, n, =]
[,, 0, ), ;, }, if, (, n, ==, 2, ), {, return, 2, ;, }, n, =, n, |]
[}, if, (, n, ==, 2, ), {, return, 2, ;, }, n, =, n, |, 1, ;, if, (]
[}, if, (, n, ==, 2, ), {, return, 2, ;, }, n, =, n, |, 1, ;, if, (]
[(, n, ==, 2, ), {, return, 2, ;, }, n, =, n, |, 1, ;, if, (, n, ==]
[), {, return, 2, ;, }, n, =, n, |, 1, ;, if, (, n, ==, 1, ), {, return]
[}, n, =, n, |, 1, ;, if, (, n, ==, 1, ), {, return, 2, ;, }, if, (]
[=, n, |, 1, ;, if, (, n, ==, 1, ), {, return, 2, ;, }, if, (, isPrime, (]
[if, (, n, ==, 1, ), {, return, 2, ;, }, if, (, isPrime, (, n, ), ), {, return]
[return, 2, ;, }, if, (, isPrime, (, n, ), ), {, return, n, ;, }, final, int, rem, =]
[return, 2, ;, }, if, (, isPrime, (, n, ), ), {, return, n, ;, }, final, int, rem, =]
[;, }, if, (, isPrime, (, n, ), ), {, return, n, ;, }, final, int, rem, =, n, %]
[isPrime, (, n, ), ), {, return, n, ;, }, final, int, rem, =, n, %, 3, ;, if, (]
[isPrime, (, n, ), ), {, return, n, ;, }, final, int, rem, =, n, %, 3, ;, if, (]
[n, ), ), {, return, n, ;, }, final, int, rem, =, n, %, 3, ;, if, (, 0, ==]
[{, return, n, ;, }, final, int, rem, =, n, %, 3, ;, if, (, 0, ==, rem, ), {]
[n, ;, }, final, int, rem, =, n, %, 3, ;, if, (, 0, ==, rem, ), {, n, +=]
[=, n, %, 3, ;, if, (, 0, ==, rem, ), {, n, +=, 2, ;, }, else, if, (]
[=, n, %, 3, ;, if, (, 0, ==, rem, ), {, n, +=, 2, ;, }, else, if, (]
[%, 3, ;, if, (, 0, ==, rem, ), {, n, +=, 2, ;, }, else, if, (, 1, ==]
[if, (, 0, ==, rem, ), {, n, +=, 2, ;, }, else, if, (, 1, ==, rem, ), {]
[0, ==, rem, ), {, n, +=, 2, ;, }, else, if, (, 1, ==, rem, ), {, n, +=]
[n, +=, 2, ;, }, else, if, (, 1, ==, rem, ), {, n, +=, 4, ;, }, while, (]
[else, if, (, 1, ==, rem, ), {, n, +=, 4, ;, }, while, (, true, ), {, if, (]
[(, 1, ==, rem, ), {, n, +=, 4, ;, }, while, (, true, ), {, if, (, isPrime, (]
[{, n, +=, 4, ;, }, while, (, true, ), {, if, (, isPrime, (, n, ), ), {, return]
[4, ;, }, while, (, true, ), {, if, (, isPrime, (, n, ), ), {, return, n, ;, }]
[}, while, (, true, ), {, if, (, isPrime, (, n, ), ), {, return, n, ;, }, n, +=]
[), {, if, (, isPrime, (, n, ), ), {, return, n, ;, }, n, +=, 2, ;, if, (]
[if, (, isPrime, (, n, ), ), {, return, n, ;, }, n, +=, 2, ;, if, (, isPrime, (]
[), ), {, return, n, ;, }, n, +=, 2, ;, if, (, isPrime, (, n, ), ), {, return]
[return, n, ;, }, n, +=, 2, ;, if, (, isPrime, (, n, ), ), {, return, n, ;, }]
[;, }, n, +=, 2, ;, if, (, isPrime, (, n, ), ), {, return, n, ;, }, n, +=]
[n, +=, 4, ;, }, }, public, static, List, <, Integer, >, primeFactors, (, int, n, ), {, if, (]
[n, +=, 4, ;, }, }, public, static, List, <, Integer, >, primeFactors, (, int, n, ), {, if, (]
[4, ;, }, }, public, static, List, <, Integer, >, primeFactors, (, int, n, ), {, if, (, n, <]
[public, static, List, <, Integer, >, primeFactors, (, int, n, ), {, if, (, n, <, 2, ), {, throw]
[<, Integer, >, primeFactors, (, int, n, ), {, if, (, n, <, 2, ), {, throw, new, MathIllegalArgumentException, (]
[<, Integer, >, primeFactors, (, int, n, ), {, if, (, n, <, 2, ), {, throw, new, MathIllegalArgumentException, (]
[(, int, n, ), {, if, (, n, <, 2, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NUMBER_TOO_SMALL, ,]
[n, ), {, if, (, n, <, 2, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NUMBER_TOO_SMALL, ,, n, ,]
[n, <, 2, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NUMBER_TOO_SMALL, ,, n, ,, 2, ), ;, }, return]
[n, <, 2, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NUMBER_TOO_SMALL, ,, n, ,, 2, ), ;, }, return]
[{, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NUMBER_TOO_SMALL, ,, n, ,, 2, ), ;, }, return, SmallPrimes, ., trialDivision, (]
