[;, private, double, baseLog, =, Math, ., log, (, 10.0, ), ;, private, double, smallestValue, =, 1E-100, ;, private, NumberTickUnit]
[;, private, double, smallestValue, =, 1E-100, ;, private, NumberTickUnit, tickUnit, ;, private, NumberFormat, numberFormatOverride, ;, public, LogAxis, (, ), {]
[., log, (, 10.0, ), ;, private, double, smallestValue, =, 1E-100, ;, private, NumberTickUnit, tickUnit, ;, private, NumberFormat, numberFormatOverride, ;]
[), ;, private, double, smallestValue, =, 1E-100, ;, private, NumberTickUnit, tickUnit, ;, private, NumberFormat, numberFormatOverride, ;, public, LogAxis, (, )]
[;, private, NumberTickUnit, tickUnit, ;, private, NumberFormat, numberFormatOverride, ;, public, LogAxis, (, ), {, this, (, null, ), ;, }]
[), ;, }, public, LogAxis, (, String, label, ), {, super, (, label, ,, createLogTickUnits, (, Locale, ., getDefault, (]
[,, createLogTickUnits, (, Locale, ., getDefault, (, ), ), ), ;, setDefaultAutoRange, (, new, Range, (, 0.01, ,, 1.0, )]
[), ;, setDefaultAutoRange, (, new, Range, (, 0.01, ,, 1.0, ), ), ;, this, ., tickUnit, =, new, NumberTickUnit, (]
[), ), ;, setDefaultAutoRange, (, new, Range, (, 0.01, ,, 1.0, ), ), ;, this, ., tickUnit, =, new, NumberTickUnit]
[., getDefault, (, ), ), ), ;, setDefaultAutoRange, (, new, Range, (, 0.01, ,, 1.0, ), ), ;, this, .]
[;, this, ., tickUnit, =, new, NumberTickUnit, (, 1.0, ,, new, DecimalFormat, (, "0.#", ), ,, 9, ), ;, }]
[), ;, this, ., tickUnit, =, new, NumberTickUnit, (, 1.0, ,, new, DecimalFormat, (, "0.#", ), ,, 9, ), ;]
[,, 1.0, ), ), ;, this, ., tickUnit, =, new, NumberTickUnit, (, 1.0, ,, new, DecimalFormat, (, "0.#", ), ,]
[), ), ;, this, ., tickUnit, =, new, NumberTickUnit, (, 1.0, ,, new, DecimalFormat, (, "0.#", ), ,, 9, )]
[=, new, NumberTickUnit, (, 1.0, ,, new, DecimalFormat, (, "0.#", ), ,, 9, ), ;, }, public, double, getBase, (]
[., tickUnit, =, new, NumberTickUnit, (, 1.0, ,, new, DecimalFormat, (, "0.#", ), ,, 9, ), ;, }, public, double]
[;, }, public, double, getBase, (, ), {, return, this, ., base, ;, }, public, void, setBase, (, double, base]
[,, new, DecimalFormat, (, "0.#", ), ,, 9, ), ;, }, public, double, getBase, (, ), {, return, this, .]
[,, 9, ), ;, }, public, double, getBase, (, ), {, return, this, ., base, ;, }, public, void, setBase]
[), ,, 9, ), ;, }, public, double, getBase, (, ), {, return, this, ., base, ;, }, public, void]
[), ;, }, public, double, getBase, (, ), {, return, this, ., base, ;, }, public, void, setBase, (, double]
[;, }, public, void, setBase, (, double, base, ), {, if, (, base, <=, 1.0, ), {, throw, new, IllegalArgumentException]
[., base, ;, }, public, void, setBase, (, double, base, ), {, if, (, base, <=, 1.0, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Requires 'base' > 1.0.", ), ;, }, this, ., base, =, base, ;, this, ., baseLog, =]
[<=, 1.0, ), {, throw, new, IllegalArgumentException, (, "Requires 'base' > 1.0.", ), ;, }, this, ., base, =, base, ;, this, .]
[), {, throw, new, IllegalArgumentException, (, "Requires 'base' > 1.0.", ), ;, }, this, ., base, =, base, ;, this, ., baseLog, =]
[;, }, this, ., base, =, base, ;, this, ., baseLog, =, Math, ., log, (, base, ), ;, notifyListeners]
[), ;, }, this, ., base, =, base, ;, this, ., baseLog, =, Math, ., log, (, base, ), ;]
[=, base, ;, this, ., baseLog, =, Math, ., log, (, base, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this]
[., base, =, base, ;, this, ., baseLog, =, Math, ., log, (, base, ), ;, notifyListeners, (, new, AxisChangeEvent]
[;, this, ., baseLog, =, Math, ., log, (, base, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[=, Math, ., log, (, base, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double]
[., baseLog, =, Math, ., log, (, base, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getSmallestValue, (, ), {, return, this, .]
[., log, (, base, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getSmallestValue, (]
[), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getSmallestValue, (, ), {, return, this]
[;, }, public, double, getSmallestValue, (, ), {, return, this, ., smallestValue, ;, }, public, void, setSmallestValue, (, double, value]
[), ;, }, public, double, getSmallestValue, (, ), {, return, this, ., smallestValue, ;, }, public, void, setSmallestValue, (, double]
[), ), ;, }, public, double, getSmallestValue, (, ), {, return, this, ., smallestValue, ;, }, public, void, setSmallestValue, (]
[;, }, public, void, setSmallestValue, (, double, value, ), {, if, (, value, <=, 0.0, ), {, throw, new, IllegalArgumentException]
[., smallestValue, ;, }, public, void, setSmallestValue, (, double, value, ), {, if, (, value, <=, 0.0, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Requires 'value' > 0.0.", ), ;, }, this, ., smallestValue, =, value, ;, notifyListeners, (, new, AxisChangeEvent]
[<=, 0.0, ), {, throw, new, IllegalArgumentException, (, "Requires 'value' > 0.0.", ), ;, }, this, ., smallestValue, =, value, ;, notifyListeners, (]
[), {, throw, new, IllegalArgumentException, (, "Requires 'value' > 0.0.", ), ;, }, this, ., smallestValue, =, value, ;, notifyListeners, (, new, AxisChangeEvent]
[;, }, this, ., smallestValue, =, value, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, NumberTickUnit]
[), ;, }, this, ., smallestValue, =, value, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public]
[=, value, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, NumberTickUnit, getTickUnit, (, ), {, return]
[., smallestValue, =, value, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, NumberTickUnit, getTickUnit, (, )]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, NumberTickUnit, getTickUnit, (, ), {, return, this, .]
[;, }, public, NumberTickUnit, getTickUnit, (, ), {, return, this, ., tickUnit, ;, }, public, void, setTickUnit, (, NumberTickUnit, unit]
[), ;, }, public, NumberTickUnit, getTickUnit, (, ), {, return, this, ., tickUnit, ;, }, public, void, setTickUnit, (, NumberTickUnit]
[), ), ;, }, public, NumberTickUnit, getTickUnit, (, ), {, return, this, ., tickUnit, ;, }, public, void, setTickUnit, (]
[;, }, public, void, setTickUnit, (, NumberTickUnit, unit, ), {, setTickUnit, (, unit, ,, true, ,, true, ), ;, }]
[., tickUnit, ;, }, public, void, setTickUnit, (, NumberTickUnit, unit, ), {, setTickUnit, (, unit, ,, true, ,, true, )]
[;, }, public, void, setTickUnit, (, NumberTickUnit, unit, ,, boolean, notify, ,, boolean, turnOffAutoSelect, ), {, if, (, unit, ==]
[,, true, ,, true, ), ;, }, public, void, setTickUnit, (, NumberTickUnit, unit, ,, boolean, notify, ,, boolean, turnOffAutoSelect, )]
[,, true, ), ;, }, public, void, setTickUnit, (, NumberTickUnit, unit, ,, boolean, notify, ,, boolean, turnOffAutoSelect, ), {, if]
[), ;, }, public, void, setTickUnit, (, NumberTickUnit, unit, ,, boolean, notify, ,, boolean, turnOffAutoSelect, ), {, if, (, unit]
[), {, throw, new, IllegalArgumentException, (, "Null 'unit' argument.", ), ;, }, this, ., tickUnit, =, unit, ;, if, (, turnOffAutoSelect, )]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'unit' argument.", ), ;, }, this, ., tickUnit, =, unit, ;, if, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'unit' argument.", ), ;, }, this, ., tickUnit, =, unit, ;, if, (, turnOffAutoSelect, )]
[;, }, this, ., tickUnit, =, unit, ;, if, (, turnOffAutoSelect, ), {, setAutoTickUnitSelection, (, false, ,, false, ), ;]
[), ;, }, this, ., tickUnit, =, unit, ;, if, (, turnOffAutoSelect, ), {, setAutoTickUnitSelection, (, false, ,, false, )]
[=, unit, ;, if, (, turnOffAutoSelect, ), {, setAutoTickUnitSelection, (, false, ,, false, ), ;, }, if, (, notify, )]
[., tickUnit, =, unit, ;, if, (, turnOffAutoSelect, ), {, setAutoTickUnitSelection, (, false, ,, false, ), ;, }, if, (]
[;, if, (, turnOffAutoSelect, ), {, setAutoTickUnitSelection, (, false, ,, false, ), ;, }, if, (, notify, ), {, notifyListeners]
[), {, setAutoTickUnitSelection, (, false, ,, false, ), ;, }, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (]
[;, }, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public, NumberFormat]
[,, false, ), ;, }, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }]
[), ;, }, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public]
[), {, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public, NumberFormat, getNumberFormatOverride, (, ), {, return]
[;, }, }, public, NumberFormat, getNumberFormatOverride, (, ), {, return, this, ., numberFormatOverride, ;, }, public, void, setNumberFormatOverride, (, NumberFormat]
[), ;, }, }, public, NumberFormat, getNumberFormatOverride, (, ), {, return, this, ., numberFormatOverride, ;, }, public, void, setNumberFormatOverride, (]
[), ), ;, }, }, public, NumberFormat, getNumberFormatOverride, (, ), {, return, this, ., numberFormatOverride, ;, }, public, void, setNumberFormatOverride]
[;, }, public, void, setNumberFormatOverride, (, NumberFormat, formatter, ), {, this, ., numberFormatOverride, =, formatter, ;, notifyListeners, (, new, AxisChangeEvent]
[., numberFormatOverride, ;, }, public, void, setNumberFormatOverride, (, NumberFormat, formatter, ), {, this, ., numberFormatOverride, =, formatter, ;, notifyListeners, (]
[=, formatter, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, calculateLog, (, double, value, )]
[., numberFormatOverride, =, formatter, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, calculateLog, (, double]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, calculateLog, (, double, value, ), {, return]
[;, }, public, double, calculateLog, (, double, value, ), {, return, Math, ., log, (, value, ), /, this, .]
[), ;, }, public, double, calculateLog, (, double, value, ), {, return, Math, ., log, (, value, ), /, this]
[), ), ;, }, public, double, calculateLog, (, double, value, ), {, return, Math, ., log, (, value, ), /]
[;, }, public, double, calculateValue, (, double, log, ), {, return, Math, ., pow, (, this, ., base, ,, log]
[/, this, ., baseLog, ;, }, public, double, calculateValue, (, double, log, ), {, return, Math, ., pow, (, this]
[., log, (, value, ), /, this, ., baseLog, ;, }, public, double, calculateValue, (, double, log, ), {, return]
[), /, this, ., baseLog, ;, }, public, double, calculateValue, (, double, log, ), {, return, Math, ., pow, (]
[;, }, public, double, calculateValue, (, double, log, ), {, return, Math, ., pow, (, this, ., base, ,, log]
[., baseLog, ;, }, public, double, calculateValue, (, double, log, ), {, return, Math, ., pow, (, this, ., base]
[;, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, Range, range, =, getRange]
[., pow, (, this, ., base, ,, log, ), ;, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area]
[,, log, ), ;, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, Range]
[., base, ,, log, ), ;, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, )]
[), ;, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, Range, range, =]
[;, double, axisMin, =, calculateLog, (, range, ., getLowerBound, (, ), ), ;, double, axisMax, =, calculateLog, (, range, .]
[;, double, axisMax, =, calculateLog, (, range, ., getUpperBound, (, ), ), ;, double, min, =, 0.0, ;, double, max]
[), ;, double, axisMax, =, calculateLog, (, range, ., getUpperBound, (, ), ), ;, double, min, =, 0.0, ;, double]
[., getLowerBound, (, ), ), ;, double, axisMax, =, calculateLog, (, range, ., getUpperBound, (, ), ), ;, double, min]
[;, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), )]
[), ;, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, )]
[., getUpperBound, (, ), ), ;, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, .]
[;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, .]
[;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;, max]
[), {, min, =, area, ., getX, (, ), ;, max, =, area, ., getMaxX, (, ), ;, }, else]
[., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;, max, =, area, ., getMaxX]
[), ), {, min, =, area, ., getX, (, ), ;, max, =, area, ., getMaxX, (, ), ;, }]
[=, area, ., getX, (, ), ;, max, =, area, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge]
[;, max, =, area, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), )]
[., getX, (, ), ;, max, =, area, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight]
[=, area, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (, )]
[., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area]
[), {, min, =, area, ., getMaxY, (, ), ;, max, =, area, ., getY, (, ), ;, }, double]
[., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (, ), ;, max, =, area, ., getY]
[), ), {, min, =, area, ., getMaxY, (, ), ;, max, =, area, ., getY, (, ), ;, }]
[=, area, ., getMaxY, (, ), ;, max, =, area, ., getY, (, ), ;, }, double, log, =, 0.0]
[;, max, =, area, ., getY, (, ), ;, }, double, log, =, 0.0, ;, if, (, isInverted, (, )]
[., getMaxY, (, ), ;, max, =, area, ., getY, (, ), ;, }, double, log, =, 0.0, ;, if]
[=, area, ., getY, (, ), ;, }, double, log, =, 0.0, ;, if, (, isInverted, (, ), ), {]
[;, }, double, log, =, 0.0, ;, if, (, isInverted, (, ), ), {, log, =, axisMax, -, (, java2DValue]
[., getY, (, ), ;, }, double, log, =, 0.0, ;, if, (, isInverted, (, ), ), {, log, =]
[;, if, (, isInverted, (, ), ), {, log, =, axisMax, -, (, java2DValue, -, min, ), /, (, max]
[), {, log, =, axisMax, -, (, java2DValue, -, min, ), /, (, max, -, min, ), *, (, axisMax]
[=, axisMax, -, (, java2DValue, -, min, ), /, (, max, -, min, ), *, (, axisMax, -, axisMin, )]
[;, }, else, {, log, =, axisMin, +, (, java2DValue, -, min, ), /, (, max, -, min, ), *]
[-, (, java2DValue, -, min, ), /, (, max, -, min, ), *, (, axisMax, -, axisMin, ), ;, }]
[;, }, else, {, log, =, axisMin, +, (, java2DValue, -, min, ), /, (, max, -, min, ), *]
[*, (, axisMax, -, axisMin, ), ;, }, else, {, log, =, axisMin, +, (, java2DValue, -, min, ), /]
[/, (, max, -, min, ), *, (, axisMax, -, axisMin, ), ;, }, else, {, log, =, axisMin, +]
[), /, (, max, -, min, ), *, (, axisMax, -, axisMin, ), ;, }, else, {, log, =, axisMin]
[-, min, ), /, (, max, -, min, ), *, (, axisMax, -, axisMin, ), ;, }, else, {, log]
[), /, (, max, -, min, ), *, (, axisMax, -, axisMin, ), ;, }, else, {, log, =, axisMin]
[*, (, axisMax, -, axisMin, ), ;, }, else, {, log, =, axisMin, +, (, java2DValue, -, min, ), /]
[), *, (, axisMax, -, axisMin, ), ;, }, else, {, log, =, axisMin, +, (, java2DValue, -, min, )]
[-, min, ), *, (, axisMax, -, axisMin, ), ;, }, else, {, log, =, axisMin, +, (, java2DValue, -]
[), *, (, axisMax, -, axisMin, ), ;, }, else, {, log, =, axisMin, +, (, java2DValue, -, min, )]
[;, }, else, {, log, =, axisMin, +, (, java2DValue, -, min, ), /, (, max, -, min, ), *]
[), ;, }, else, {, log, =, axisMin, +, (, java2DValue, -, min, ), /, (, max, -, min, )]
[-, axisMin, ), ;, }, else, {, log, =, axisMin, +, (, java2DValue, -, min, ), /, (, max, -]
[), ;, }, else, {, log, =, axisMin, +, (, java2DValue, -, min, ), /, (, max, -, min, )]
[=, axisMin, +, (, java2DValue, -, min, ), /, (, max, -, min, ), *, (, axisMax, -, axisMin, )]
[;, }, return, calculateValue, (, log, ), ;, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge]
[+, (, java2DValue, -, min, ), /, (, max, -, min, ), *, (, axisMax, -, axisMin, ), ;, }]
[;, }, return, calculateValue, (, log, ), ;, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge]
[*, (, axisMax, -, axisMin, ), ;, }, return, calculateValue, (, log, ), ;, }, public, double, valueToJava2D, (, double]
[/, (, max, -, min, ), *, (, axisMax, -, axisMin, ), ;, }, return, calculateValue, (, log, ), ;]
[), /, (, max, -, min, ), *, (, axisMax, -, axisMin, ), ;, }, return, calculateValue, (, log, )]
[-, min, ), /, (, max, -, min, ), *, (, axisMax, -, axisMin, ), ;, }, return, calculateValue, (]
[), /, (, max, -, min, ), *, (, axisMax, -, axisMin, ), ;, }, return, calculateValue, (, log, )]
[*, (, axisMax, -, axisMin, ), ;, }, return, calculateValue, (, log, ), ;, }, public, double, valueToJava2D, (, double]
[), *, (, axisMax, -, axisMin, ), ;, }, return, calculateValue, (, log, ), ;, }, public, double, valueToJava2D, (]
[-, min, ), *, (, axisMax, -, axisMin, ), ;, }, return, calculateValue, (, log, ), ;, }, public, double]
[), *, (, axisMax, -, axisMin, ), ;, }, return, calculateValue, (, log, ), ;, }, public, double, valueToJava2D, (]
[;, }, return, calculateValue, (, log, ), ;, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge]
[), ;, }, return, calculateValue, (, log, ), ;, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, area, ,]
[-, axisMin, ), ;, }, return, calculateValue, (, log, ), ;, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D]
[), ;, }, return, calculateValue, (, log, ), ;, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, area, ,]
[;, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, Range, range, =, getRange]
[), ;, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, Range, range, =]
[;, double, axisMin, =, calculateLog, (, range, ., getLowerBound, (, ), ), ;, double, axisMax, =, calculateLog, (, range, .]
[;, double, axisMax, =, calculateLog, (, range, ., getUpperBound, (, ), ), ;, value, =, calculateLog, (, value, ), ;]
[), ;, double, axisMax, =, calculateLog, (, range, ., getUpperBound, (, ), ), ;, value, =, calculateLog, (, value, )]
[., getLowerBound, (, ), ), ;, double, axisMax, =, calculateLog, (, range, ., getUpperBound, (, ), ), ;, value, =]
[;, value, =, calculateLog, (, value, ), ;, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (]
[), ;, value, =, calculateLog, (, value, ), ;, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if]
[., getUpperBound, (, ), ), ;, value, =, calculateLog, (, value, ), ;, double, min, =, 0.0, ;, double, max]
[=, calculateLog, (, value, ), ;, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, .]
[;, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), )]
[), ;, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, )]
[;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, .]
[;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;, max]
[), {, min, =, area, ., getX, (, ), ;, max, =, area, ., getMaxX, (, ), ;, }, else]
[., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;, max, =, area, ., getMaxX]
[), ), {, min, =, area, ., getX, (, ), ;, max, =, area, ., getMaxX, (, ), ;, }]
[=, area, ., getX, (, ), ;, max, =, area, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge]
[;, max, =, area, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), )]
[., getX, (, ), ;, max, =, area, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight]
[=, area, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max, =, area, ., getMinY, (, )]
[., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max, =, area]
[), {, max, =, area, ., getMinY, (, ), ;, min, =, area, ., getMaxY, (, ), ;, }, if]
[., isLeftOrRight, (, edge, ), ), {, max, =, area, ., getMinY, (, ), ;, min, =, area, ., getMaxY]
[), ), {, max, =, area, ., getMinY, (, ), ;, min, =, area, ., getMaxY, (, ), ;, }]
[=, area, ., getMinY, (, ), ;, min, =, area, ., getMaxY, (, ), ;, }, if, (, isInverted, (]
[;, min, =, area, ., getMaxY, (, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -]
[., getMinY, (, ), ;, min, =, area, ., getMaxY, (, ), ;, }, if, (, isInverted, (, ), )]
[=, area, ., getMaxY, (, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (]
[;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, axisMin, ), /, (]
[., getMaxY, (, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -]
[), {, return, max, -, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (]
[;, }, else, {, return, min, +, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), )]
[-, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, )]
[;, }, else, {, return, min, +, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), )]
[*, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, axisMin, ), /]
[), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, axisMin, )]
[/, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +]
[), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ;, }, else, {, return, min]
[-, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ;, }, else, {]
[), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ;, }, else, {, return, min]
[), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, axisMin, )]
[), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, axisMin]
[-, axisMin, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value]
[), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, axisMin]
[;, }, else, {, return, min, +, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), )]
[), ;, }, else, {, return, min, +, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, )]
[-, min, ), ;, }, else, {, return, min, +, (, (, value, -, axisMin, ), /, (, axisMax, -]
[), ;, }, else, {, return, min, +, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, )]
[;, }, }, public, void, configure, (, ), {, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;]
[+, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, )]
[;, }, }, public, void, configure, (, ), {, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;]
[*, (, max, -, min, ), ;, }, }, public, void, configure, (, ), {, if, (, isAutoRange, (, )]
[), *, (, max, -, min, ), ;, }, }, public, void, configure, (, ), {, if, (, isAutoRange, (]
[/, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ;, }, }, public, void, configure, (]
[), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ;, }, }, public, void, configure]
[-, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ;, }, }, public]
[), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ;, }, }, public, void, configure]
[), *, (, max, -, min, ), ;, }, }, public, void, configure, (, ), {, if, (, isAutoRange, (]
[), ), *, (, max, -, min, ), ;, }, }, public, void, configure, (, ), {, if, (, isAutoRange]
[-, axisMin, ), ), *, (, max, -, min, ), ;, }, }, public, void, configure, (, ), {, if]
[), ), *, (, max, -, min, ), ;, }, }, public, void, configure, (, ), {, if, (, isAutoRange]
[;, }, }, public, void, configure, (, ), {, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;]
[), ;, }, }, public, void, configure, (, ), {, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, )]
[-, min, ), ;, }, }, public, void, configure, (, ), {, if, (, isAutoRange, (, ), ), {, autoAdjustRange]
[), ;, }, }, public, void, configure, (, ), {, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, )]
[), {, autoAdjustRange, (, ), ;, }, }, protected, void, autoAdjustRange, (, ), {, Plot, plot, =, getPlot, (, )]
[;, }, }, protected, void, autoAdjustRange, (, ), {, Plot, plot, =, getPlot, (, ), ;, if, (, plot, ==]
[;, if, (, plot, ==, null, ), {, return, ;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, ValueAxisPlot, vap]
[), {, return, ;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, ValueAxisPlot, vap, =, (, ValueAxisPlot, ), plot, ;]
[==, null, ), {, return, ;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, ValueAxisPlot, vap, =, (, ValueAxisPlot, )]
[), {, return, ;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, ValueAxisPlot, vap, =, (, ValueAxisPlot, ), plot, ;]
[), {, ValueAxisPlot, vap, =, (, ValueAxisPlot, ), plot, ;, Range, r, =, vap, ., getDataRange, (, this, ), ;]
[instanceof, ValueAxisPlot, ), {, ValueAxisPlot, vap, =, (, ValueAxisPlot, ), plot, ;, Range, r, =, vap, ., getDataRange, (, this]
[;, Range, r, =, vap, ., getDataRange, (, this, ), ;, if, (, r, ==, null, ), {, r, =]
[;, Range, r, =, vap, ., getDataRange, (, this, ), ;, if, (, r, ==, null, ), {, r, =]
[;, if, (, r, ==, null, ), {, r, =, getDefaultAutoRange, (, ), ;, }, double, upper, =, r, .]
[., getDataRange, (, this, ), ;, if, (, r, ==, null, ), {, r, =, getDefaultAutoRange, (, ), ;, }]
[), ;, if, (, r, ==, null, ), {, r, =, getDefaultAutoRange, (, ), ;, }, double, upper, =, r]
[), {, r, =, getDefaultAutoRange, (, ), ;, }, double, upper, =, r, ., getUpperBound, (, ), ;, double, lower]
[==, null, ), {, r, =, getDefaultAutoRange, (, ), ;, }, double, upper, =, r, ., getUpperBound, (, ), ;]
[), {, r, =, getDefaultAutoRange, (, ), ;, }, double, upper, =, r, ., getUpperBound, (, ), ;, double, lower]
[=, getDefaultAutoRange, (, ), ;, }, double, upper, =, r, ., getUpperBound, (, ), ;, double, lower, =, Math, .]
[;, }, double, upper, =, r, ., getUpperBound, (, ), ;, double, lower, =, Math, ., max, (, r, .]
[;, double, lower, =, Math, ., max, (, r, ., getLowerBound, (, ), ,, this, ., smallestValue, ), ;, double]
[., getUpperBound, (, ), ;, double, lower, =, Math, ., max, (, r, ., getLowerBound, (, ), ,, this, .]
[;, double, range, =, upper, -, lower, ;, double, fixedAutoRange, =, getFixedAutoRange, (, ), ;, if, (, fixedAutoRange, >, 0.0]
[., max, (, r, ., getLowerBound, (, ), ,, this, ., smallestValue, ), ;, double, range, =, upper, -, lower]
[,, this, ., smallestValue, ), ;, double, range, =, upper, -, lower, ;, double, fixedAutoRange, =, getFixedAutoRange, (, ), ;]
[., getLowerBound, (, ), ,, this, ., smallestValue, ), ;, double, range, =, upper, -, lower, ;, double, fixedAutoRange, =]
[), ;, double, range, =, upper, -, lower, ;, double, fixedAutoRange, =, getFixedAutoRange, (, ), ;, if, (, fixedAutoRange, >]
[., smallestValue, ), ;, double, range, =, upper, -, lower, ;, double, fixedAutoRange, =, getFixedAutoRange, (, ), ;, if, (]
[;, double, fixedAutoRange, =, getFixedAutoRange, (, ), ;, if, (, fixedAutoRange, >, 0.0, ), {, lower, =, Math, ., max]
[-, lower, ;, double, fixedAutoRange, =, getFixedAutoRange, (, ), ;, if, (, fixedAutoRange, >, 0.0, ), {, lower, =, Math]
[;, double, fixedAutoRange, =, getFixedAutoRange, (, ), ;, if, (, fixedAutoRange, >, 0.0, ), {, lower, =, Math, ., max]
[;, if, (, fixedAutoRange, >, 0.0, ), {, lower, =, Math, ., max, (, upper, -, fixedAutoRange, ,, this, .]
[), {, lower, =, Math, ., max, (, upper, -, fixedAutoRange, ,, this, ., smallestValue, ), ;, }, else, {]
[>, 0.0, ), {, lower, =, Math, ., max, (, upper, -, fixedAutoRange, ,, this, ., smallestValue, ), ;, }]
[), {, lower, =, Math, ., max, (, upper, -, fixedAutoRange, ,, this, ., smallestValue, ), ;, }, else, {]
[=, Math, ., max, (, upper, -, fixedAutoRange, ,, this, ., smallestValue, ), ;, }, else, {, double, minRange, =]
[;, }, else, {, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <, minRange, ), {, double, expand]
[., max, (, upper, -, fixedAutoRange, ,, this, ., smallestValue, ), ;, }, else, {, double, minRange, =, getAutoRangeMinimumSize, (]
[,, this, ., smallestValue, ), ;, }, else, {, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <]
[-, fixedAutoRange, ,, this, ., smallestValue, ), ;, }, else, {, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (]
[,, this, ., smallestValue, ), ;, }, else, {, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <]
[), ;, }, else, {, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <, minRange, ), {, double]
[., smallestValue, ), ;, }, else, {, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <, minRange, )]
[;, if, (, range, <, minRange, ), {, double, expand, =, (, minRange, -, range, ), /, 2, ;, upper]
[), {, double, expand, =, (, minRange, -, range, ), /, 2, ;, upper, =, upper, +, expand, ;, lower]
[<, minRange, ), {, double, expand, =, (, minRange, -, range, ), /, 2, ;, upper, =, upper, +, expand]
[), {, double, expand, =, (, minRange, -, range, ), /, 2, ;, upper, =, upper, +, expand, ;, lower]
[;, upper, =, upper, +, expand, ;, lower, =, lower, -, expand, ;, }, double, logUpper, =, calculateLog, (, upper]
[/, 2, ;, upper, =, upper, +, expand, ;, lower, =, lower, -, expand, ;, }, double, logUpper, =, calculateLog]
[), /, 2, ;, upper, =, upper, +, expand, ;, lower, =, lower, -, expand, ;, }, double, logUpper, =]
[-, range, ), /, 2, ;, upper, =, upper, +, expand, ;, lower, =, lower, -, expand, ;, }, double]
[), /, 2, ;, upper, =, upper, +, expand, ;, lower, =, lower, -, expand, ;, }, double, logUpper, =]
[;, upper, =, upper, +, expand, ;, lower, =, lower, -, expand, ;, }, double, logUpper, =, calculateLog, (, upper]
[=, upper, +, expand, ;, lower, =, lower, -, expand, ;, }, double, logUpper, =, calculateLog, (, upper, ), ;]
[;, lower, =, lower, -, expand, ;, }, double, logUpper, =, calculateLog, (, upper, ), ;, double, logLower, =, calculateLog]
[+, expand, ;, lower, =, lower, -, expand, ;, }, double, logUpper, =, calculateLog, (, upper, ), ;, double, logLower]
[;, lower, =, lower, -, expand, ;, }, double, logUpper, =, calculateLog, (, upper, ), ;, double, logLower, =, calculateLog]
[=, lower, -, expand, ;, }, double, logUpper, =, calculateLog, (, upper, ), ;, double, logLower, =, calculateLog, (, lower]
[;, }, double, logUpper, =, calculateLog, (, upper, ), ;, double, logLower, =, calculateLog, (, lower, ), ;, double, logRange]
[-, expand, ;, }, double, logUpper, =, calculateLog, (, upper, ), ;, double, logLower, =, calculateLog, (, lower, ), ;]
[;, }, double, logUpper, =, calculateLog, (, upper, ), ;, double, logLower, =, calculateLog, (, lower, ), ;, double, logRange]
[;, double, logLower, =, calculateLog, (, lower, ), ;, double, logRange, =, logUpper, -, logLower, ;, logUpper, =, logUpper, +]
[), ;, double, logLower, =, calculateLog, (, lower, ), ;, double, logRange, =, logUpper, -, logLower, ;, logUpper, =, logUpper]
[;, double, logRange, =, logUpper, -, logLower, ;, logUpper, =, logUpper, +, getUpperMargin, (, ), *, logRange, ;, logLower, =]
[), ;, double, logRange, =, logUpper, -, logLower, ;, logUpper, =, logUpper, +, getUpperMargin, (, ), *, logRange, ;, logLower]
[;, logUpper, =, logUpper, +, getUpperMargin, (, ), *, logRange, ;, logLower, =, logLower, -, getLowerMargin, (, ), *, logRange]
[-, logLower, ;, logUpper, =, logUpper, +, getUpperMargin, (, ), *, logRange, ;, logLower, =, logLower, -, getLowerMargin, (, )]
[;, logUpper, =, logUpper, +, getUpperMargin, (, ), *, logRange, ;, logLower, =, logLower, -, getLowerMargin, (, ), *, logRange]
[=, logUpper, +, getUpperMargin, (, ), *, logRange, ;, logLower, =, logLower, -, getLowerMargin, (, ), *, logRange, ;, upper]
[;, logLower, =, logLower, -, getLowerMargin, (, ), *, logRange, ;, upper, =, calculateValue, (, logUpper, ), ;, lower, =]
[+, getUpperMargin, (, ), *, logRange, ;, logLower, =, logLower, -, getLowerMargin, (, ), *, logRange, ;, upper, =, calculateValue]
[;, logLower, =, logLower, -, getLowerMargin, (, ), *, logRange, ;, upper, =, calculateValue, (, logUpper, ), ;, lower, =]
[*, logRange, ;, logLower, =, logLower, -, getLowerMargin, (, ), *, logRange, ;, upper, =, calculateValue, (, logUpper, ), ;]
[;, logLower, =, logLower, -, getLowerMargin, (, ), *, logRange, ;, upper, =, calculateValue, (, logUpper, ), ;, lower, =]
[=, logLower, -, getLowerMargin, (, ), *, logRange, ;, upper, =, calculateValue, (, logUpper, ), ;, lower, =, calculateValue, (]
[;, upper, =, calculateValue, (, logUpper, ), ;, lower, =, calculateValue, (, logLower, ), ;, }, setRange, (, new, Range]
[-, getLowerMargin, (, ), *, logRange, ;, upper, =, calculateValue, (, logUpper, ), ;, lower, =, calculateValue, (, logLower, )]
[;, upper, =, calculateValue, (, logUpper, ), ;, lower, =, calculateValue, (, logLower, ), ;, }, setRange, (, new, Range]
[*, logRange, ;, upper, =, calculateValue, (, logUpper, ), ;, lower, =, calculateValue, (, logLower, ), ;, }, setRange, (]
[;, upper, =, calculateValue, (, logUpper, ), ;, lower, =, calculateValue, (, logLower, ), ;, }, setRange, (, new, Range]
[=, calculateValue, (, logUpper, ), ;, lower, =, calculateValue, (, logLower, ), ;, }, setRange, (, new, Range, (, lower]
[;, lower, =, calculateValue, (, logLower, ), ;, }, setRange, (, new, Range, (, lower, ,, upper, ), ,, false]
[), ;, lower, =, calculateValue, (, logLower, ), ;, }, setRange, (, new, Range, (, lower, ,, upper, ), ,]
[=, calculateValue, (, logLower, ), ;, }, setRange, (, new, Range, (, lower, ,, upper, ), ,, false, ,, false]
[;, }, setRange, (, new, Range, (, lower, ,, upper, ), ,, false, ,, false, ), ;, }, }, public]
[), ;, }, setRange, (, new, Range, (, lower, ,, upper, ), ,, false, ,, false, ), ;, }, }]
[;, }, }, public, AxisState, draw, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge]
[,, false, ,, false, ), ;, }, }, public, AxisState, draw, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, plotArea]
[,, upper, ), ,, false, ,, false, ), ;, }, }, public, AxisState, draw, (, Graphics2D, g2, ,, double, cursor]
[), ,, false, ,, false, ), ;, }, }, public, AxisState, draw, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D]
[,, false, ), ;, }, }, public, AxisState, draw, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D]
[), ;, }, }, public, AxisState, draw, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,]
[;, if, (, !, isVisible, (, ), ), {, state, =, new, AxisState, (, cursor, ), ;, List, ticks, =]
[), {, state, =, new, AxisState, (, cursor, ), ;, List, ticks, =, refreshTicks, (, g2, ,, state, ,, dataArea]
[), {, state, =, new, AxisState, (, cursor, ), ;, List, ticks, =, refreshTicks, (, g2, ,, state, ,, dataArea]
[=, new, AxisState, (, cursor, ), ;, List, ticks, =, refreshTicks, (, g2, ,, state, ,, dataArea, ,, edge, )]
[;, List, ticks, =, refreshTicks, (, g2, ,, state, ,, dataArea, ,, edge, ), ;, state, ., setTicks, (, ticks]
[), ;, List, ticks, =, refreshTicks, (, g2, ,, state, ,, dataArea, ,, edge, ), ;, state, ., setTicks, (]
[;, state, ., setTicks, (, ticks, ), ;, return, state, ;, }, state, =, drawTickMarksAndLabels, (, g2, ,, cursor, ,]
[,, state, ,, dataArea, ,, edge, ), ;, state, ., setTicks, (, ticks, ), ;, return, state, ;, }, state]
[,, dataArea, ,, edge, ), ;, state, ., setTicks, (, ticks, ), ;, return, state, ;, }, state, =, drawTickMarksAndLabels]
[,, edge, ), ;, state, ., setTicks, (, ticks, ), ;, return, state, ;, }, state, =, drawTickMarksAndLabels, (, g2]
[), ;, state, ., setTicks, (, ticks, ), ;, return, state, ;, }, state, =, drawTickMarksAndLabels, (, g2, ,, cursor]
[;, return, state, ;, }, state, =, drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, plotState]
[., setTicks, (, ticks, ), ;, return, state, ;, }, state, =, drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,]
[), ;, return, state, ;, }, state, =, drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,]
[;, }, state, =, drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;, state]
[=, drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;, state, =, drawLabel, (]
[;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState]
[,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,]
[,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,]
[,, dataArea, ,, edge, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,]
[,, edge, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,]
[,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,]
[), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,]
[=, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;]
[;, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,, edge, ,, plotState, ), ;, return, state, ;, }, public, List]
[,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, createAndAddEntity, (, cursor, ,, state, ,]
[,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,]
[,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,, edge, ,]
[,, edge, ,, state, ,, plotState, ), ;, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,, edge, ,, plotState, )]
[,, state, ,, plotState, ), ;, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,, edge, ,, plotState, ), ;, return]
[,, plotState, ), ;, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,, edge, ,, plotState, ), ;, return, state, ;]
[), ;, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,, edge, ,, plotState, ), ;, return, state, ;, }, public]
[;, return, state, ;, }, public, List, refreshTicks, (, Graphics2D, g2, ,, AxisState, state, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge]
[,, state, ,, dataArea, ,, edge, ,, plotState, ), ;, return, state, ;, }, public, List, refreshTicks, (, Graphics2D, g2]
[,, dataArea, ,, edge, ,, plotState, ), ;, return, state, ;, }, public, List, refreshTicks, (, Graphics2D, g2, ,, AxisState]
[,, edge, ,, plotState, ), ;, return, state, ;, }, public, List, refreshTicks, (, Graphics2D, g2, ,, AxisState, state, ,]
[,, plotState, ), ;, return, state, ;, }, public, List, refreshTicks, (, Graphics2D, g2, ,, AxisState, state, ,, Rectangle2D, dataArea]
[), ;, return, state, ;, }, public, List, refreshTicks, (, Graphics2D, g2, ,, AxisState, state, ,, Rectangle2D, dataArea, ,, RectangleEdge]
[;, }, public, List, refreshTicks, (, Graphics2D, g2, ,, AxisState, state, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List]
[;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, result, =, refreshTicksHorizontal, (, g2, ,, dataArea, ,, edge]
[), {, result, =, refreshTicksHorizontal, (, g2, ,, dataArea, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight]
[., isTopOrBottom, (, edge, ), ), {, result, =, refreshTicksHorizontal, (, g2, ,, dataArea, ,, edge, ), ;, }, else]
[), ), {, result, =, refreshTicksHorizontal, (, g2, ,, dataArea, ,, edge, ), ;, }, else, if, (, RectangleEdge, .]
[=, refreshTicksHorizontal, (, g2, ,, dataArea, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, )]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, result, =, refreshTicksVertical, (, g2, ,, dataArea]
[,, dataArea, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, result, =]
[,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, result, =, refreshTicksVertical, (]
[), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, result, =, refreshTicksVertical, (, g2, ,]
[), {, result, =, refreshTicksVertical, (, g2, ,, dataArea, ,, edge, ), ;, }, return, result, ;, }, protected, List]
[., isLeftOrRight, (, edge, ), ), {, result, =, refreshTicksVertical, (, g2, ,, dataArea, ,, edge, ), ;, }, return]
[), ), {, result, =, refreshTicksVertical, (, g2, ,, dataArea, ,, edge, ), ;, }, return, result, ;, }, protected]
[=, refreshTicksVertical, (, g2, ,, dataArea, ,, edge, ), ;, }, return, result, ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D]
[;, }, return, result, ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {]
[,, dataArea, ,, edge, ), ;, }, return, result, ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea]
[,, edge, ), ;, }, return, result, ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge]
[), ;, }, return, result, ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, )]
[;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Range, range, =, getRange]
[;, List, ticks, =, new, ArrayList, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (]
[;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, TextAnchor, textAnchor, ;, if, (]
[;, g2, ., setFont, (, tickLabelFont, ), ;, TextAnchor, textAnchor, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[;, TextAnchor, textAnchor, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, textAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }]
[., setFont, (, tickLabelFont, ), ;, TextAnchor, textAnchor, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, textAnchor, =]
[), ;, TextAnchor, textAnchor, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, textAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;]
[), {, textAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, textAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, if, (]
[==, RectangleEdge, ., TOP, ), {, textAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, textAnchor, =, TextAnchor, ., TOP_CENTER]
[), {, textAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, textAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, if, (]
[., TOP, ), {, textAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, textAnchor, =, TextAnchor, ., TOP_CENTER, ;, }]
[=, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, textAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, if, (, isAutoTickUnitSelection, (, )]
[;, }, else, {, textAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (]
[., BOTTOM_CENTER, ;, }, else, {, textAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, if, (, isAutoTickUnitSelection, (, ), ), {]
[=, TextAnchor, ., TOP_CENTER, ;, }, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge]
[;, }, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, int]
[., TOP_CENTER, ;, }, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;]
[), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, int, minorTickCount, =, this, ., tickUnit, ., getMinorTickCount]
[;, }, int, minorTickCount, =, this, ., tickUnit, ., getMinorTickCount, (, ), ;, double, start, =, Math, ., floor, (]
[,, dataArea, ,, edge, ), ;, }, int, minorTickCount, =, this, ., tickUnit, ., getMinorTickCount, (, ), ;, double, start]
[,, edge, ), ;, }, int, minorTickCount, =, this, ., tickUnit, ., getMinorTickCount, (, ), ;, double, start, =, Math]
[), ;, }, int, minorTickCount, =, this, ., tickUnit, ., getMinorTickCount, (, ), ;, double, start, =, Math, ., floor]
[;, double, start, =, Math, ., floor, (, calculateLog, (, getLowerBound, (, ), ), ), ;, double, end, =, Math]
[., getMinorTickCount, (, ), ;, double, start, =, Math, ., floor, (, calculateLog, (, getLowerBound, (, ), ), ), ;]
[., tickUnit, ., getMinorTickCount, (, ), ;, double, start, =, Math, ., floor, (, calculateLog, (, getLowerBound, (, ), )]
[;, double, end, =, Math, ., ceil, (, calculateLog, (, getUpperBound, (, ), ), ), ;, double, current, =, start]
[., floor, (, calculateLog, (, getLowerBound, (, ), ), ), ;, double, end, =, Math, ., ceil, (, calculateLog, (]
[), ;, double, end, =, Math, ., ceil, (, calculateLog, (, getUpperBound, (, ), ), ), ;, double, current, =]
[), ), ;, double, end, =, Math, ., ceil, (, calculateLog, (, getUpperBound, (, ), ), ), ;, double, current]
[;, double, current, =, start, ;, while, (, current, <=, end, ), {, double, v, =, calculateValue, (, current, )]
[., ceil, (, calculateLog, (, getUpperBound, (, ), ), ), ;, double, current, =, start, ;, while, (, current, <=]
[), ;, double, current, =, start, ;, while, (, current, <=, end, ), {, double, v, =, calculateValue, (, current]
[), ), ;, double, current, =, start, ;, while, (, current, <=, end, ), {, double, v, =, calculateValue, (]
[;, while, (, current, <=, end, ), {, double, v, =, calculateValue, (, current, ), ;, if, (, range, .]
[), {, double, v, =, calculateValue, (, current, ), ;, if, (, range, ., contains, (, v, ), ), {]
[<=, end, ), {, double, v, =, calculateValue, (, current, ), ;, if, (, range, ., contains, (, v, )]
[), {, double, v, =, calculateValue, (, current, ), ;, if, (, range, ., contains, (, v, ), ), {]
[;, if, (, range, ., contains, (, v, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, .]
[), ;, if, (, range, ., contains, (, v, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType]
[), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MAJOR, ,, v, ,, createTickLabel, (, v, ), ,]
[., contains, (, v, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MAJOR, ,, v, ,]
[), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MAJOR, ,, v, ,, createTickLabel, (, v, )]
[;, }, double, next, =, Math, ., pow, (, this, ., base, ,, current, +, this, ., tickUnit, ., getSize]
[., add, (, new, NumberTick, (, TickType, ., MAJOR, ,, v, ,, createTickLabel, (, v, ), ,, textAnchor, ,, TextAnchor]
[), ;, }, double, next, =, Math, ., pow, (, this, ., base, ,, current, +, this, ., tickUnit, .]
[,, v, ,, createTickLabel, (, v, ), ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double]
[., MAJOR, ,, v, ,, createTickLabel, (, v, ), ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;]
[,, createTickLabel, (, v, ), ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double, next, =]
[,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (, this]
[), ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (]
[,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (, this, ., base]
[,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (, this, ., base, ,, current, +, this]
[., CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (, this, ., base, ,, current]
[), ), ;, }, double, next, =, Math, ., pow, (, this, ., base, ,, current, +, this, ., tickUnit]
[;, for, (, int, i, =, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =, v]
[., pow, (, this, ., base, ,, current, +, this, ., tickUnit, ., getSize, (, ), ), ;, for, (]
[,, current, +, this, ., tickUnit, ., getSize, (, ), ), ;, for, (, int, i, =, 1, ;, i]
[., base, ,, current, +, this, ., tickUnit, ., getSize, (, ), ), ;, for, (, int, i, =, 1]
[), ;, for, (, int, i, =, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =]
[+, this, ., tickUnit, ., getSize, (, ), ), ;, for, (, int, i, =, 1, ;, i, <, minorTickCount]
[), ;, for, (, int, i, =, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =]
[., getSize, (, ), ), ;, for, (, int, i, =, 1, ;, i, <, minorTickCount, ;, i, ++, )]
[., tickUnit, ., getSize, (, ), ), ;, for, (, int, i, =, 1, ;, i, <, minorTickCount, ;, i]
[;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +, i, *, (, (, next, -]
[;, i, ++, ), {, double, minorV, =, v, +, i, *, (, (, next, -, v, ), /, minorTickCount]
[<, minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +, i, *, (, (, next, -, v, )]
[;, i, ++, ), {, double, minorV, =, v, +, i, *, (, (, next, -, v, ), /, minorTickCount]
[), {, double, minorV, =, v, +, i, *, (, (, next, -, v, ), /, minorTickCount, ), ;, if]
[++, ), {, double, minorV, =, v, +, i, *, (, (, next, -, v, ), /, minorTickCount, ), ;]
[;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, .]
[+, i, *, (, (, next, -, v, ), /, minorTickCount, ), ;, if, (, range, ., contains, (, minorV]
[;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, .]
[*, (, (, next, -, v, ), /, minorTickCount, ), ;, if, (, range, ., contains, (, minorV, ), )]
[;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, .]
[), ;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType]
[/, minorTickCount, ), ;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick]
[), /, minorTickCount, ), ;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new]
[-, v, ), /, minorTickCount, ), ;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add]
[), /, minorTickCount, ), ;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new]
[), ;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType]
[), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,, "", ,, textAnchor, ,, TextAnchor]
[., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,]
[), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,, "", ,, textAnchor, ,]
[;, }, }, current, =, current, +, this, ., tickUnit, ., getSize, (, ), ;, }, return, ticks, ;, }]
[., add, (, new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,]
[), ;, }, }, current, =, current, +, this, ., tickUnit, ., getSize, (, ), ;, }, return, ticks, ;]
[,, minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }, current, =, current]
[., MINOR, ,, minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }, current]
[,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }, current, =, current, +, this]
[,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }, current, =, current, +, this, ., tickUnit]
[,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }, current, =, current, +, this, ., tickUnit, ., getSize]
[,, 0.0, ), ), ;, }, }, current, =, current, +, this, ., tickUnit, ., getSize, (, ), ;, }]
[., CENTER, ,, 0.0, ), ), ;, }, }, current, =, current, +, this, ., tickUnit, ., getSize, (, )]
[), ), ;, }, }, current, =, current, +, this, ., tickUnit, ., getSize, (, ), ;, }, return, ticks]
[=, current, +, this, ., tickUnit, ., getSize, (, ), ;, }, return, ticks, ;, }, protected, List, refreshTicksVertical, (]
[;, }, return, ticks, ;, }, protected, List, refreshTicksVertical, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {]
[+, this, ., tickUnit, ., getSize, (, ), ;, }, return, ticks, ;, }, protected, List, refreshTicksVertical, (, Graphics2D, g2]
[;, }, return, ticks, ;, }, protected, List, refreshTicksVertical, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {]
[., getSize, (, ), ;, }, return, ticks, ;, }, protected, List, refreshTicksVertical, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,]
[., tickUnit, ., getSize, (, ), ;, }, return, ticks, ;, }, protected, List, refreshTicksVertical, (, Graphics2D, g2, ,, Rectangle2D]
[;, }, protected, List, refreshTicksVertical, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Range, range, =, getRange]
[;, List, ticks, =, new, ArrayList, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (]
[;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, TextAnchor, textAnchor, ;, if, (]
[;, g2, ., setFont, (, tickLabelFont, ), ;, TextAnchor, textAnchor, ;, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[;, TextAnchor, textAnchor, ;, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, textAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }]
[., setFont, (, tickLabelFont, ), ;, TextAnchor, textAnchor, ;, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, textAnchor, =]
[), ;, TextAnchor, textAnchor, ;, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, textAnchor, =, TextAnchor, ., CENTER_LEFT, ;]
[), {, textAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, else, {, textAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, if, (]
[==, RectangleEdge, ., RIGHT, ), {, textAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, else, {, textAnchor, =, TextAnchor, ., CENTER_RIGHT]
[), {, textAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, else, {, textAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, if, (]
[., RIGHT, ), {, textAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, else, {, textAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }]
[=, TextAnchor, ., CENTER_LEFT, ;, }, else, {, textAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, if, (, isAutoTickUnitSelection, (, )]
[;, }, else, {, textAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (]
[., CENTER_LEFT, ;, }, else, {, textAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, if, (, isAutoTickUnitSelection, (, ), ), {]
[=, TextAnchor, ., CENTER_RIGHT, ;, }, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge]
[;, }, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, int]
[., CENTER_RIGHT, ;, }, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;]
[), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, int, minorTickCount, =, this, ., tickUnit, ., getMinorTickCount]
[;, }, int, minorTickCount, =, this, ., tickUnit, ., getMinorTickCount, (, ), ;, double, start, =, Math, ., floor, (]
[,, dataArea, ,, edge, ), ;, }, int, minorTickCount, =, this, ., tickUnit, ., getMinorTickCount, (, ), ;, double, start]
[,, edge, ), ;, }, int, minorTickCount, =, this, ., tickUnit, ., getMinorTickCount, (, ), ;, double, start, =, Math]
[), ;, }, int, minorTickCount, =, this, ., tickUnit, ., getMinorTickCount, (, ), ;, double, start, =, Math, ., floor]
[;, double, start, =, Math, ., floor, (, calculateLog, (, getLowerBound, (, ), ), ), ;, double, end, =, Math]
[., getMinorTickCount, (, ), ;, double, start, =, Math, ., floor, (, calculateLog, (, getLowerBound, (, ), ), ), ;]
[., tickUnit, ., getMinorTickCount, (, ), ;, double, start, =, Math, ., floor, (, calculateLog, (, getLowerBound, (, ), )]
[;, double, end, =, Math, ., ceil, (, calculateLog, (, getUpperBound, (, ), ), ), ;, double, current, =, start]
[., floor, (, calculateLog, (, getLowerBound, (, ), ), ), ;, double, end, =, Math, ., ceil, (, calculateLog, (]
[), ;, double, end, =, Math, ., ceil, (, calculateLog, (, getUpperBound, (, ), ), ), ;, double, current, =]
[), ), ;, double, end, =, Math, ., ceil, (, calculateLog, (, getUpperBound, (, ), ), ), ;, double, current]
[;, double, current, =, start, ;, while, (, current, <=, end, ), {, double, v, =, calculateValue, (, current, )]
[., ceil, (, calculateLog, (, getUpperBound, (, ), ), ), ;, double, current, =, start, ;, while, (, current, <=]
[), ;, double, current, =, start, ;, while, (, current, <=, end, ), {, double, v, =, calculateValue, (, current]
[), ), ;, double, current, =, start, ;, while, (, current, <=, end, ), {, double, v, =, calculateValue, (]
[;, while, (, current, <=, end, ), {, double, v, =, calculateValue, (, current, ), ;, if, (, range, .]
[), {, double, v, =, calculateValue, (, current, ), ;, if, (, range, ., contains, (, v, ), ), {]
[<=, end, ), {, double, v, =, calculateValue, (, current, ), ;, if, (, range, ., contains, (, v, )]
[), {, double, v, =, calculateValue, (, current, ), ;, if, (, range, ., contains, (, v, ), ), {]
[;, if, (, range, ., contains, (, v, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, .]
[), ;, if, (, range, ., contains, (, v, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType]
[), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MAJOR, ,, v, ,, createTickLabel, (, v, ), ,]
[., contains, (, v, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MAJOR, ,, v, ,]
[), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MAJOR, ,, v, ,, createTickLabel, (, v, )]
[;, }, double, next, =, Math, ., pow, (, this, ., base, ,, current, +, this, ., tickUnit, ., getSize]
[., add, (, new, NumberTick, (, TickType, ., MAJOR, ,, v, ,, createTickLabel, (, v, ), ,, textAnchor, ,, TextAnchor]
[), ;, }, double, next, =, Math, ., pow, (, this, ., base, ,, current, +, this, ., tickUnit, .]
[,, v, ,, createTickLabel, (, v, ), ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double]
[., MAJOR, ,, v, ,, createTickLabel, (, v, ), ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;]
[,, createTickLabel, (, v, ), ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double, next, =]
[,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (, this]
[), ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (]
[,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (, this, ., base]
[,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (, this, ., base, ,, current, +, this]
[., CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (, this, ., base, ,, current]
[), ), ;, }, double, next, =, Math, ., pow, (, this, ., base, ,, current, +, this, ., tickUnit]
[;, for, (, int, i, =, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =, v]
[., pow, (, this, ., base, ,, current, +, this, ., tickUnit, ., getSize, (, ), ), ;, for, (]
[,, current, +, this, ., tickUnit, ., getSize, (, ), ), ;, for, (, int, i, =, 1, ;, i]
[., base, ,, current, +, this, ., tickUnit, ., getSize, (, ), ), ;, for, (, int, i, =, 1]
[), ;, for, (, int, i, =, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =]
[+, this, ., tickUnit, ., getSize, (, ), ), ;, for, (, int, i, =, 1, ;, i, <, minorTickCount]
[), ;, for, (, int, i, =, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =]
[., getSize, (, ), ), ;, for, (, int, i, =, 1, ;, i, <, minorTickCount, ;, i, ++, )]
[., tickUnit, ., getSize, (, ), ), ;, for, (, int, i, =, 1, ;, i, <, minorTickCount, ;, i]
[;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +, i, *, (, (, next, -]
[;, i, ++, ), {, double, minorV, =, v, +, i, *, (, (, next, -, v, ), /, minorTickCount]
[<, minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +, i, *, (, (, next, -, v, )]
[;, i, ++, ), {, double, minorV, =, v, +, i, *, (, (, next, -, v, ), /, minorTickCount]
[), {, double, minorV, =, v, +, i, *, (, (, next, -, v, ), /, minorTickCount, ), ;, if]
[++, ), {, double, minorV, =, v, +, i, *, (, (, next, -, v, ), /, minorTickCount, ), ;]
[;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, .]
[+, i, *, (, (, next, -, v, ), /, minorTickCount, ), ;, if, (, range, ., contains, (, minorV]
[;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, .]
[*, (, (, next, -, v, ), /, minorTickCount, ), ;, if, (, range, ., contains, (, minorV, ), )]
[;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, .]
[), ;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType]
[/, minorTickCount, ), ;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick]
[), /, minorTickCount, ), ;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new]
[-, v, ), /, minorTickCount, ), ;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add]
[), /, minorTickCount, ), ;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new]
[), ;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType]
[), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,, "", ,, textAnchor, ,, TextAnchor]
[., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,]
[), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,, "", ,, textAnchor, ,]
[;, }, }, current, =, current, +, this, ., tickUnit, ., getSize, (, ), ;, }, return, ticks, ;, }]
[., add, (, new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,]
[), ;, }, }, current, =, current, +, this, ., tickUnit, ., getSize, (, ), ;, }, return, ticks, ;]
[,, minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }, current, =, current]
[., MINOR, ,, minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }, current]
[,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }, current, =, current, +, this]
[,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }, current, =, current, +, this, ., tickUnit]
[,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }, current, =, current, +, this, ., tickUnit, ., getSize]
[,, 0.0, ), ), ;, }, }, current, =, current, +, this, ., tickUnit, ., getSize, (, ), ;, }]
[., CENTER, ,, 0.0, ), ), ;, }, }, current, =, current, +, this, ., tickUnit, ., getSize, (, )]
[), ), ;, }, }, current, =, current, +, this, ., tickUnit, ., getSize, (, ), ;, }, return, ticks]
[=, current, +, this, ., tickUnit, ., getSize, (, ), ;, }, return, ticks, ;, }, protected, void, selectAutoTickUnit, (]
[;, }, return, ticks, ;, }, protected, void, selectAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {]
[+, this, ., tickUnit, ., getSize, (, ), ;, }, return, ticks, ;, }, protected, void, selectAutoTickUnit, (, Graphics2D, g2]
[;, }, return, ticks, ;, }, protected, void, selectAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {]
[., getSize, (, ), ;, }, return, ticks, ;, }, protected, void, selectAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,]
[., tickUnit, ., getSize, (, ), ;, }, return, ticks, ;, }, protected, void, selectAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D]
[;, }, protected, void, selectAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, if, (, RectangleEdge, .]
[), {, selectHorizontalAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge]
[., isTopOrBottom, (, edge, ), ), {, selectHorizontalAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, else, if, (]
[), ), {, selectHorizontalAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, selectVerticalAutoTickUnit, (, g2, ,, dataArea, ,, edge]
[,, dataArea, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, selectVerticalAutoTickUnit, (]
[,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, selectVerticalAutoTickUnit, (, g2, ,]
[), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, selectVerticalAutoTickUnit, (, g2, ,, dataArea, ,]
[), {, selectVerticalAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, }, protected, void, selectHorizontalAutoTickUnit, (, Graphics2D, g2, ,]
[., isLeftOrRight, (, edge, ), ), {, selectVerticalAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, }, protected, void]
[), ), {, selectVerticalAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, }, protected, void, selectHorizontalAutoTickUnit, (, Graphics2D, g2]
[;, }, }, protected, void, selectHorizontalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, double, tickLabelWidth, =]
[,, dataArea, ,, edge, ), ;, }, }, protected, void, selectHorizontalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge]
[,, edge, ), ;, }, }, protected, void, selectHorizontalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {]
[), ;, }, }, protected, void, selectHorizontalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, double, tickLabelWidth]
[;, TickUnitSource, tickUnits, =, getStandardTickUnits, (, ), ;, TickUnit, unit1, =, tickUnits, ., getCeilingTickUnit, (, getTickUnit, (, ), ), ;]
[,, getTickUnit, (, ), ), ;, TickUnitSource, tickUnits, =, getStandardTickUnits, (, ), ;, TickUnit, unit1, =, tickUnits, ., getCeilingTickUnit, (]
[), ;, TickUnitSource, tickUnits, =, getStandardTickUnits, (, ), ;, TickUnit, unit1, =, tickUnits, ., getCeilingTickUnit, (, getTickUnit, (, ), )]
[;, TickUnit, unit1, =, tickUnits, ., getCeilingTickUnit, (, getTickUnit, (, ), ), ;, double, unit1Width, =, exponentLengthToJava2D, (, unit1, .]
[;, double, unit1Width, =, exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, double, guess, =]
[., getCeilingTickUnit, (, getTickUnit, (, ), ), ;, double, unit1Width, =, exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,, dataArea]
[), ;, double, unit1Width, =, exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, double, guess]
[;, double, guess, =, (, tickLabelWidth, /, unit1Width, ), *, unit1, ., getSize, (, ), ;, NumberTickUnit, unit2, =, (]
[,, dataArea, ,, edge, ), ;, double, guess, =, (, tickLabelWidth, /, unit1Width, ), *, unit1, ., getSize, (, )]
[., getSize, (, ), ,, dataArea, ,, edge, ), ;, double, guess, =, (, tickLabelWidth, /, unit1Width, ), *, unit1]
[,, edge, ), ;, double, guess, =, (, tickLabelWidth, /, unit1Width, ), *, unit1, ., getSize, (, ), ;, NumberTickUnit]
[), ;, double, guess, =, (, tickLabelWidth, /, unit1Width, ), *, unit1, ., getSize, (, ), ;, NumberTickUnit, unit2, =]
[;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, ), ;, double, unit2Width, =, exponentLengthToJava2D, (, unit2]
[*, unit1, ., getSize, (, ), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, ), ;]
[), *, unit1, ., getSize, (, ), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, )]
[/, unit1Width, ), *, unit1, ., getSize, (, ), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (]
[), *, unit1, ., getSize, (, ), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, )]
[;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, ), ;, double, unit2Width, =, exponentLengthToJava2D, (, unit2]
[., getSize, (, ), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, ), ;, double, unit2Width]
[;, double, unit2Width, =, exponentLengthToJava2D, (, unit2, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, tickLabelWidth, =, estimateMaximumTickLabelWidth]
[;, double, unit2Width, =, exponentLengthToJava2D, (, unit2, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, tickLabelWidth, =, estimateMaximumTickLabelWidth]
[., getCeilingTickUnit, (, guess, ), ;, double, unit2Width, =, exponentLengthToJava2D, (, unit2, ., getSize, (, ), ,, dataArea, ,, edge]
[), ;, double, unit2Width, =, exponentLengthToJava2D, (, unit2, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, tickLabelWidth, =]
[;, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,, unit2, ), ;, if, (, tickLabelWidth, >, unit2Width, ), {, unit2, =, (]
[,, dataArea, ,, edge, ), ;, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,, unit2, ), ;, if, (, tickLabelWidth, >, unit2Width]
[., getSize, (, ), ,, dataArea, ,, edge, ), ;, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,, unit2, ), ;, if]
[,, edge, ), ;, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,, unit2, ), ;, if, (, tickLabelWidth, >, unit2Width, ), {]
[), ;, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,, unit2, ), ;, if, (, tickLabelWidth, >, unit2Width, ), {, unit2, =]
[=, estimateMaximumTickLabelWidth, (, g2, ,, unit2, ), ;, if, (, tickLabelWidth, >, unit2Width, ), {, unit2, =, (, NumberTickUnit, )]
[;, if, (, tickLabelWidth, >, unit2Width, ), {, unit2, =, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, ), ;]
[,, unit2, ), ;, if, (, tickLabelWidth, >, unit2Width, ), {, unit2, =, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (]
[), ;, if, (, tickLabelWidth, >, unit2Width, ), {, unit2, =, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, )]
[), {, unit2, =, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, ), ;, }, setTickUnit, (, unit2, ,, false]
[>, unit2Width, ), {, unit2, =, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, ), ;, }, setTickUnit, (, unit2]
[), {, unit2, =, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, ), ;, }, setTickUnit, (, unit2, ,, false]
[=, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, ), ;, }, setTickUnit, (, unit2, ,, false, ,, false, )]
[;, }, setTickUnit, (, unit2, ,, false, ,, false, ), ;, }, public, double, exponentLengthToJava2D, (, double, length, ,, Rectangle2D]
[;, }, setTickUnit, (, unit2, ,, false, ,, false, ), ;, }, public, double, exponentLengthToJava2D, (, double, length, ,, Rectangle2D]
[., getLargerTickUnit, (, unit2, ), ;, }, setTickUnit, (, unit2, ,, false, ,, false, ), ;, }, public, double, exponentLengthToJava2D]
[), ;, }, setTickUnit, (, unit2, ,, false, ,, false, ), ;, }, public, double, exponentLengthToJava2D, (, double, length, ,]
[;, }, public, double, exponentLengthToJava2D, (, double, length, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, one, =, valueToJava2D]
[,, false, ,, false, ), ;, }, public, double, exponentLengthToJava2D, (, double, length, ,, Rectangle2D, area, ,, RectangleEdge, edge, )]
[,, false, ), ;, }, public, double, exponentLengthToJava2D, (, double, length, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double]
[), ;, }, public, double, exponentLengthToJava2D, (, double, length, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, one, =]
[;, double, l, =, valueToJava2D, (, calculateValue, (, length, +, 1.0, ), ,, area, ,, edge, ), ;, return, Math]
[,, area, ,, edge, ), ;, double, l, =, valueToJava2D, (, calculateValue, (, length, +, 1.0, ), ,, area, ,]
[), ,, area, ,, edge, ), ;, double, l, =, valueToJava2D, (, calculateValue, (, length, +, 1.0, ), ,, area]
[,, edge, ), ;, double, l, =, valueToJava2D, (, calculateValue, (, length, +, 1.0, ), ,, area, ,, edge, )]
[), ;, double, l, =, valueToJava2D, (, calculateValue, (, length, +, 1.0, ), ,, area, ,, edge, ), ;, return]
[;, return, Math, ., abs, (, l, -, one, ), ;, }, protected, void, selectVerticalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D]
[,, area, ,, edge, ), ;, return, Math, ., abs, (, l, -, one, ), ;, }, protected, void, selectVerticalAutoTickUnit]
[), ,, area, ,, edge, ), ;, return, Math, ., abs, (, l, -, one, ), ;, }, protected, void]
[+, 1.0, ), ,, area, ,, edge, ), ;, return, Math, ., abs, (, l, -, one, ), ;, }]
[), ,, area, ,, edge, ), ;, return, Math, ., abs, (, l, -, one, ), ;, }, protected, void]
[,, edge, ), ;, return, Math, ., abs, (, l, -, one, ), ;, }, protected, void, selectVerticalAutoTickUnit, (, Graphics2D]
[), ;, return, Math, ., abs, (, l, -, one, ), ;, }, protected, void, selectVerticalAutoTickUnit, (, Graphics2D, g2, ,]
[;, }, protected, void, selectVerticalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, double, tickLabelHeight, =, estimateMaximumTickLabelHeight]
[., abs, (, l, -, one, ), ;, }, protected, void, selectVerticalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge]
[), ;, }, protected, void, selectVerticalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, double, tickLabelHeight, =]
[-, one, ), ;, }, protected, void, selectVerticalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, double]
[), ;, }, protected, void, selectVerticalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, double, tickLabelHeight, =]
[;, TickUnitSource, tickUnits, =, getStandardTickUnits, (, ), ;, TickUnit, unit1, =, tickUnits, ., getCeilingTickUnit, (, getTickUnit, (, ), ), ;]
[), ;, TickUnitSource, tickUnits, =, getStandardTickUnits, (, ), ;, TickUnit, unit1, =, tickUnits, ., getCeilingTickUnit, (, getTickUnit, (, ), )]
[;, TickUnit, unit1, =, tickUnits, ., getCeilingTickUnit, (, getTickUnit, (, ), ), ;, double, unitHeight, =, exponentLengthToJava2D, (, unit1, .]
[;, double, unitHeight, =, exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, double, guess, =]
[., getCeilingTickUnit, (, getTickUnit, (, ), ), ;, double, unitHeight, =, exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,, dataArea]
[), ;, double, unitHeight, =, exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, double, guess]
[;, double, guess, =, (, tickLabelHeight, /, unitHeight, ), *, unit1, ., getSize, (, ), ;, NumberTickUnit, unit2, =, (]
[,, dataArea, ,, edge, ), ;, double, guess, =, (, tickLabelHeight, /, unitHeight, ), *, unit1, ., getSize, (, )]
[., getSize, (, ), ,, dataArea, ,, edge, ), ;, double, guess, =, (, tickLabelHeight, /, unitHeight, ), *, unit1]
[,, edge, ), ;, double, guess, =, (, tickLabelHeight, /, unitHeight, ), *, unit1, ., getSize, (, ), ;, NumberTickUnit]
[), ;, double, guess, =, (, tickLabelHeight, /, unitHeight, ), *, unit1, ., getSize, (, ), ;, NumberTickUnit, unit2, =]
[;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, ), ;, double, unit2Height, =, exponentLengthToJava2D, (, unit2]
[*, unit1, ., getSize, (, ), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, ), ;]
[), *, unit1, ., getSize, (, ), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, )]
[/, unitHeight, ), *, unit1, ., getSize, (, ), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (]
[), *, unit1, ., getSize, (, ), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, )]
[;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, ), ;, double, unit2Height, =, exponentLengthToJava2D, (, unit2]
[., getSize, (, ), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, ), ;, double, unit2Height]
[;, double, unit2Height, =, exponentLengthToJava2D, (, unit2, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, tickLabelHeight, =, estimateMaximumTickLabelHeight]
[;, double, unit2Height, =, exponentLengthToJava2D, (, unit2, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, tickLabelHeight, =, estimateMaximumTickLabelHeight]
[., getCeilingTickUnit, (, guess, ), ;, double, unit2Height, =, exponentLengthToJava2D, (, unit2, ., getSize, (, ), ,, dataArea, ,, edge]
[), ;, double, unit2Height, =, exponentLengthToJava2D, (, unit2, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, tickLabelHeight, =]
[;, tickLabelHeight, =, estimateMaximumTickLabelHeight, (, g2, ), ;, if, (, tickLabelHeight, >, unit2Height, ), {, unit2, =, (, NumberTickUnit, )]
[,, dataArea, ,, edge, ), ;, tickLabelHeight, =, estimateMaximumTickLabelHeight, (, g2, ), ;, if, (, tickLabelHeight, >, unit2Height, ), {]
[., getSize, (, ), ,, dataArea, ,, edge, ), ;, tickLabelHeight, =, estimateMaximumTickLabelHeight, (, g2, ), ;, if, (, tickLabelHeight]
[,, edge, ), ;, tickLabelHeight, =, estimateMaximumTickLabelHeight, (, g2, ), ;, if, (, tickLabelHeight, >, unit2Height, ), {, unit2, =]
[), ;, tickLabelHeight, =, estimateMaximumTickLabelHeight, (, g2, ), ;, if, (, tickLabelHeight, >, unit2Height, ), {, unit2, =, (, NumberTickUnit]
[=, estimateMaximumTickLabelHeight, (, g2, ), ;, if, (, tickLabelHeight, >, unit2Height, ), {, unit2, =, (, NumberTickUnit, ), tickUnits, .]
[;, if, (, tickLabelHeight, >, unit2Height, ), {, unit2, =, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, ), ;]
[), ;, if, (, tickLabelHeight, >, unit2Height, ), {, unit2, =, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, )]
[), {, unit2, =, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, ), ;, }, setTickUnit, (, unit2, ,, false]
[>, unit2Height, ), {, unit2, =, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, ), ;, }, setTickUnit, (, unit2]
[), {, unit2, =, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, ), ;, }, setTickUnit, (, unit2, ,, false]
[=, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, ), ;, }, setTickUnit, (, unit2, ,, false, ,, false, )]
[;, }, setTickUnit, (, unit2, ,, false, ,, false, ), ;, }, protected, double, estimateMaximumTickLabelHeight, (, Graphics2D, g2, ), {]
[;, }, setTickUnit, (, unit2, ,, false, ,, false, ), ;, }, protected, double, estimateMaximumTickLabelHeight, (, Graphics2D, g2, ), {]
[., getLargerTickUnit, (, unit2, ), ;, }, setTickUnit, (, unit2, ,, false, ,, false, ), ;, }, protected, double, estimateMaximumTickLabelHeight]
[), ;, }, setTickUnit, (, unit2, ,, false, ,, false, ), ;, }, protected, double, estimateMaximumTickLabelHeight, (, Graphics2D, g2, )]
[;, }, protected, double, estimateMaximumTickLabelHeight, (, Graphics2D, g2, ), {, RectangleInsets, tickLabelInsets, =, getTickLabelInsets, (, ), ;, double, result, =]
[,, false, ,, false, ), ;, }, protected, double, estimateMaximumTickLabelHeight, (, Graphics2D, g2, ), {, RectangleInsets, tickLabelInsets, =, getTickLabelInsets, (]
[,, false, ), ;, }, protected, double, estimateMaximumTickLabelHeight, (, Graphics2D, g2, ), {, RectangleInsets, tickLabelInsets, =, getTickLabelInsets, (, ), ;]
[), ;, }, protected, double, estimateMaximumTickLabelHeight, (, Graphics2D, g2, ), {, RectangleInsets, tickLabelInsets, =, getTickLabelInsets, (, ), ;, double, result]
[;, double, result, =, tickLabelInsets, ., getTop, (, ), +, tickLabelInsets, ., getBottom, (, ), ;, Font, tickLabelFont, =, getTickLabelFont]
[;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, FontRenderContext, frc, =, g2, ., getFontRenderContext, (, ), ;, result, +=, tickLabelFont]
[+, tickLabelInsets, ., getBottom, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, FontRenderContext, frc, =, g2, ., getFontRenderContext]
[., getTop, (, ), +, tickLabelInsets, ., getBottom, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, FontRenderContext, frc]
[;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, FontRenderContext, frc, =, g2, ., getFontRenderContext, (, ), ;, result, +=, tickLabelFont]
[., getBottom, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, FontRenderContext, frc, =, g2, ., getFontRenderContext, (, )]
[;, FontRenderContext, frc, =, g2, ., getFontRenderContext, (, ), ;, result, +=, tickLabelFont, ., getLineMetrics, (, "123", ,, frc, )]
[;, result, +=, tickLabelFont, ., getLineMetrics, (, "123", ,, frc, ), ., getHeight, (, ), ;, return, result, ;, }]
[., getFontRenderContext, (, ), ;, result, +=, tickLabelFont, ., getLineMetrics, (, "123", ,, frc, ), ., getHeight, (, ), ;]
[+=, tickLabelFont, ., getLineMetrics, (, "123", ,, frc, ), ., getHeight, (, ), ;, return, result, ;, }, protected, double]
[;, return, result, ;, }, protected, double, estimateMaximumTickLabelWidth, (, Graphics2D, g2, ,, TickUnit, unit, ), {, RectangleInsets, tickLabelInsets, =, getTickLabelInsets]
[., getHeight, (, ), ;, return, result, ;, }, protected, double, estimateMaximumTickLabelWidth, (, Graphics2D, g2, ,, TickUnit, unit, ), {]
[., getLineMetrics, (, "123", ,, frc, ), ., getHeight, (, ), ;, return, result, ;, }, protected, double, estimateMaximumTickLabelWidth, (]
[,, frc, ), ., getHeight, (, ), ;, return, result, ;, }, protected, double, estimateMaximumTickLabelWidth, (, Graphics2D, g2, ,, TickUnit]
[), ., getHeight, (, ), ;, return, result, ;, }, protected, double, estimateMaximumTickLabelWidth, (, Graphics2D, g2, ,, TickUnit, unit, )]
[;, }, protected, double, estimateMaximumTickLabelWidth, (, Graphics2D, g2, ,, TickUnit, unit, ), {, RectangleInsets, tickLabelInsets, =, getTickLabelInsets, (, ), ;]
[;, double, result, =, tickLabelInsets, ., getLeft, (, ), +, tickLabelInsets, ., getRight, (, ), ;, if, (, isVerticalTickLabels, (]
[;, if, (, isVerticalTickLabels, (, ), ), {, FontRenderContext, frc, =, g2, ., getFontRenderContext, (, ), ;, LineMetrics, lm, =]
[+, tickLabelInsets, ., getRight, (, ), ;, if, (, isVerticalTickLabels, (, ), ), {, FontRenderContext, frc, =, g2, ., getFontRenderContext]
[., getLeft, (, ), +, tickLabelInsets, ., getRight, (, ), ;, if, (, isVerticalTickLabels, (, ), ), {, FontRenderContext, frc]
[;, if, (, isVerticalTickLabels, (, ), ), {, FontRenderContext, frc, =, g2, ., getFontRenderContext, (, ), ;, LineMetrics, lm, =]
[., getRight, (, ), ;, if, (, isVerticalTickLabels, (, ), ), {, FontRenderContext, frc, =, g2, ., getFontRenderContext, (, )]
[), {, FontRenderContext, frc, =, g2, ., getFontRenderContext, (, ), ;, LineMetrics, lm, =, getTickLabelFont, (, ), ., getLineMetrics, (]
[;, LineMetrics, lm, =, getTickLabelFont, (, ), ., getLineMetrics, (, "0", ,, frc, ), ;, result, +=, lm, ., getHeight]
[., getFontRenderContext, (, ), ;, LineMetrics, lm, =, getTickLabelFont, (, ), ., getLineMetrics, (, "0", ,, frc, ), ;, result]
[;, result, +=, lm, ., getHeight, (, ), ;, }, else, {, FontMetrics, fm, =, g2, ., getFontMetrics, (, getTickLabelFont]
[., getLineMetrics, (, "0", ,, frc, ), ;, result, +=, lm, ., getHeight, (, ), ;, }, else, {, FontMetrics]
[,, frc, ), ;, result, +=, lm, ., getHeight, (, ), ;, }, else, {, FontMetrics, fm, =, g2, .]
[), ;, result, +=, lm, ., getHeight, (, ), ;, }, else, {, FontMetrics, fm, =, g2, ., getFontMetrics, (]
[+=, lm, ., getHeight, (, ), ;, }, else, {, FontMetrics, fm, =, g2, ., getFontMetrics, (, getTickLabelFont, (, )]
[;, }, else, {, FontMetrics, fm, =, g2, ., getFontMetrics, (, getTickLabelFont, (, ), ), ;, Range, range, =, getRange]
[., getHeight, (, ), ;, }, else, {, FontMetrics, fm, =, g2, ., getFontMetrics, (, getTickLabelFont, (, ), ), ;]
[;, Range, range, =, getRange, (, ), ;, double, lower, =, range, ., getLowerBound, (, ), ;, double, upper, =]
[., getFontMetrics, (, getTickLabelFont, (, ), ), ;, Range, range, =, getRange, (, ), ;, double, lower, =, range, .]
[), ;, Range, range, =, getRange, (, ), ;, double, lower, =, range, ., getLowerBound, (, ), ;, double, upper]
[;, double, lower, =, range, ., getLowerBound, (, ), ;, double, upper, =, range, ., getUpperBound, (, ), ;, String]
[;, double, upper, =, range, ., getUpperBound, (, ), ;, String, lowerStr, =, "", ;, String, upperStr, =, "", ;]
[., getLowerBound, (, ), ;, double, upper, =, range, ., getUpperBound, (, ), ;, String, lowerStr, =, "", ;, String]
[;, String, lowerStr, =, "", ;, String, upperStr, =, "", ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (]
[., getUpperBound, (, ), ;, String, lowerStr, =, "", ;, String, upperStr, =, "", ;, NumberFormat, formatter, =, getNumberFormatOverride, (]
[;, String, upperStr, =, "", ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {]
[;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, lowerStr, =, formatter, ., format]
[;, if, (, formatter, !=, null, ), {, lowerStr, =, formatter, ., format, (, lower, ), ;, upperStr, =, formatter]
[), {, lowerStr, =, formatter, ., format, (, lower, ), ;, upperStr, =, formatter, ., format, (, upper, ), ;]
[!=, null, ), {, lowerStr, =, formatter, ., format, (, lower, ), ;, upperStr, =, formatter, ., format, (, upper]
[), {, lowerStr, =, formatter, ., format, (, lower, ), ;, upperStr, =, formatter, ., format, (, upper, ), ;]
[=, formatter, ., format, (, lower, ), ;, upperStr, =, formatter, ., format, (, upper, ), ;, }, else, {]
[;, upperStr, =, formatter, ., format, (, upper, ), ;, }, else, {, lowerStr, =, unit, ., valueToString, (, lower]
[., format, (, lower, ), ;, upperStr, =, formatter, ., format, (, upper, ), ;, }, else, {, lowerStr, =]
[), ;, upperStr, =, formatter, ., format, (, upper, ), ;, }, else, {, lowerStr, =, unit, ., valueToString, (]
[=, formatter, ., format, (, upper, ), ;, }, else, {, lowerStr, =, unit, ., valueToString, (, lower, ), ;]
[;, }, else, {, lowerStr, =, unit, ., valueToString, (, lower, ), ;, upperStr, =, unit, ., valueToString, (, upper]
[., format, (, upper, ), ;, }, else, {, lowerStr, =, unit, ., valueToString, (, lower, ), ;, upperStr, =]
[), ;, }, else, {, lowerStr, =, unit, ., valueToString, (, lower, ), ;, upperStr, =, unit, ., valueToString, (]
[=, unit, ., valueToString, (, lower, ), ;, upperStr, =, unit, ., valueToString, (, upper, ), ;, }, double, w1]
[;, upperStr, =, unit, ., valueToString, (, upper, ), ;, }, double, w1, =, fm, ., stringWidth, (, lowerStr, )]
[., valueToString, (, lower, ), ;, upperStr, =, unit, ., valueToString, (, upper, ), ;, }, double, w1, =, fm]
[), ;, upperStr, =, unit, ., valueToString, (, upper, ), ;, }, double, w1, =, fm, ., stringWidth, (, lowerStr]
[=, unit, ., valueToString, (, upper, ), ;, }, double, w1, =, fm, ., stringWidth, (, lowerStr, ), ;, double]
[;, }, double, w1, =, fm, ., stringWidth, (, lowerStr, ), ;, double, w2, =, fm, ., stringWidth, (, upperStr]
[., valueToString, (, upper, ), ;, }, double, w1, =, fm, ., stringWidth, (, lowerStr, ), ;, double, w2, =]
[), ;, }, double, w1, =, fm, ., stringWidth, (, lowerStr, ), ;, double, w2, =, fm, ., stringWidth, (]
[;, double, w2, =, fm, ., stringWidth, (, upperStr, ), ;, result, +=, Math, ., max, (, w1, ,, w2]
[., stringWidth, (, lowerStr, ), ;, double, w2, =, fm, ., stringWidth, (, upperStr, ), ;, result, +=, Math, .]
[), ;, double, w2, =, fm, ., stringWidth, (, upperStr, ), ;, result, +=, Math, ., max, (, w1, ,]
[;, result, +=, Math, ., max, (, w1, ,, w2, ), ;, }, return, result, ;, }, public, void, zoomRange]
[., stringWidth, (, upperStr, ), ;, result, +=, Math, ., max, (, w1, ,, w2, ), ;, }, return, result]
[), ;, result, +=, Math, ., max, (, w1, ,, w2, ), ;, }, return, result, ;, }, public, void]
[+=, Math, ., max, (, w1, ,, w2, ), ;, }, return, result, ;, }, public, void, zoomRange, (, double]
[;, }, return, result, ;, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {, Range, range, =]
[., max, (, w1, ,, w2, ), ;, }, return, result, ;, }, public, void, zoomRange, (, double, lowerPercent, ,]
[,, w2, ), ;, }, return, result, ;, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {]
[), ;, }, return, result, ;, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {, Range, range]
[;, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {, Range, range, =, getRange, (, ), ;]
[;, double, start, =, range, ., getLowerBound, (, ), ;, double, end, =, range, ., getUpperBound, (, ), ;, double]
[;, double, end, =, range, ., getUpperBound, (, ), ;, double, log1, =, calculateLog, (, start, ), ;, double, log2]
[., getLowerBound, (, ), ;, double, end, =, range, ., getUpperBound, (, ), ;, double, log1, =, calculateLog, (, start]
[;, double, log1, =, calculateLog, (, start, ), ;, double, log2, =, calculateLog, (, end, ), ;, double, length, =]
[., getUpperBound, (, ), ;, double, log1, =, calculateLog, (, start, ), ;, double, log2, =, calculateLog, (, end, )]
[;, double, log2, =, calculateLog, (, end, ), ;, double, length, =, log2, -, log1, ;, Range, adjusted, =, null]
[), ;, double, log2, =, calculateLog, (, end, ), ;, double, length, =, log2, -, log1, ;, Range, adjusted, =]
[;, double, length, =, log2, -, log1, ;, Range, adjusted, =, null, ;, if, (, isInverted, (, ), ), {]
[), ;, double, length, =, log2, -, log1, ;, Range, adjusted, =, null, ;, if, (, isInverted, (, ), )]
[;, Range, adjusted, =, null, ;, if, (, isInverted, (, ), ), {, double, logA, =, log1, +, length, *]
[-, log1, ;, Range, adjusted, =, null, ;, if, (, isInverted, (, ), ), {, double, logA, =, log1, +]
[;, Range, adjusted, =, null, ;, if, (, isInverted, (, ), ), {, double, logA, =, log1, +, length, *]
[;, if, (, isInverted, (, ), ), {, double, logA, =, log1, +, length, *, (, 1, -, upperPercent, )]
[), {, double, logA, =, log1, +, length, *, (, 1, -, upperPercent, ), ;, double, logB, =, log1, +]
[;, double, logB, =, log1, +, length, *, (, 1, -, lowerPercent, ), ;, adjusted, =, new, Range, (, calculateValue]
[+, length, *, (, 1, -, upperPercent, ), ;, double, logB, =, log1, +, length, *, (, 1, -, lowerPercent]
[;, double, logB, =, log1, +, length, *, (, 1, -, lowerPercent, ), ;, adjusted, =, new, Range, (, calculateValue]
[*, (, 1, -, upperPercent, ), ;, double, logB, =, log1, +, length, *, (, 1, -, lowerPercent, ), ;]
[;, double, logB, =, log1, +, length, *, (, 1, -, lowerPercent, ), ;, adjusted, =, new, Range, (, calculateValue]
[), ;, double, logB, =, log1, +, length, *, (, 1, -, lowerPercent, ), ;, adjusted, =, new, Range, (]
[-, upperPercent, ), ;, double, logB, =, log1, +, length, *, (, 1, -, lowerPercent, ), ;, adjusted, =, new]
[), ;, double, logB, =, log1, +, length, *, (, 1, -, lowerPercent, ), ;, adjusted, =, new, Range, (]
[;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (, logB, ), ), ;, }, else, {]
[+, length, *, (, 1, -, lowerPercent, ), ;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,, calculateValue]
[;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (, logB, ), ), ;, }, else, {]
[*, (, 1, -, lowerPercent, ), ;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (, logB]
[;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (, logB, ), ), ;, }, else, {]
[), ;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (, logB, ), ), ;, }, else]
[-, lowerPercent, ), ;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (, logB, ), ), ;]
[), ;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (, logB, ), ), ;, }, else]
[=, new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (, logB, ), ), ;, }, else, {, double, logA]
[;, }, else, {, double, logA, =, log1, +, length, *, lowerPercent, ;, double, logB, =, log1, +, length, *]
[,, calculateValue, (, logB, ), ), ;, }, else, {, double, logA, =, log1, +, length, *, lowerPercent, ;, double]
[), ,, calculateValue, (, logB, ), ), ;, }, else, {, double, logA, =, log1, +, length, *, lowerPercent, ;]
[), ;, }, else, {, double, logA, =, log1, +, length, *, lowerPercent, ;, double, logB, =, log1, +, length]
[), ), ;, }, else, {, double, logA, =, log1, +, length, *, lowerPercent, ;, double, logB, =, log1, +]
[;, double, logB, =, log1, +, length, *, upperPercent, ;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,]
[+, length, *, lowerPercent, ;, double, logB, =, log1, +, length, *, upperPercent, ;, adjusted, =, new, Range, (, calculateValue]
[;, double, logB, =, log1, +, length, *, upperPercent, ;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,]
[*, lowerPercent, ;, double, logB, =, log1, +, length, *, upperPercent, ;, adjusted, =, new, Range, (, calculateValue, (, logA]
[;, double, logB, =, log1, +, length, *, upperPercent, ;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,]
[;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (, logB, ), ), ;, }, setRange, (]
[+, length, *, upperPercent, ;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (, logB, ), )]
[;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (, logB, ), ), ;, }, setRange, (]
[*, upperPercent, ;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (, logB, ), ), ;, }]
[;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (, logB, ), ), ;, }, setRange, (]
[=, new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (, logB, ), ), ;, }, setRange, (, adjusted, )]
[;, }, setRange, (, adjusted, ), ;, }, public, void, pan, (, double, percent, ), {, Range, range, =, getRange]
[,, calculateValue, (, logB, ), ), ;, }, setRange, (, adjusted, ), ;, }, public, void, pan, (, double, percent]
[), ,, calculateValue, (, logB, ), ), ;, }, setRange, (, adjusted, ), ;, }, public, void, pan, (, double]
[), ;, }, setRange, (, adjusted, ), ;, }, public, void, pan, (, double, percent, ), {, Range, range, =]
[), ), ;, }, setRange, (, adjusted, ), ;, }, public, void, pan, (, double, percent, ), {, Range, range]
[;, }, public, void, pan, (, double, percent, ), {, Range, range, =, getRange, (, ), ;, double, lower, =]
[), ;, }, public, void, pan, (, double, percent, ), {, Range, range, =, getRange, (, ), ;, double, lower]
[;, double, lower, =, range, ., getLowerBound, (, ), ;, double, upper, =, range, ., getUpperBound, (, ), ;, double]
[;, double, upper, =, range, ., getUpperBound, (, ), ;, double, log1, =, calculateLog, (, lower, ), ;, double, log2]
[., getLowerBound, (, ), ;, double, upper, =, range, ., getUpperBound, (, ), ;, double, log1, =, calculateLog, (, lower]
[;, double, log1, =, calculateLog, (, lower, ), ;, double, log2, =, calculateLog, (, upper, ), ;, double, length, =]
[., getUpperBound, (, ), ;, double, log1, =, calculateLog, (, lower, ), ;, double, log2, =, calculateLog, (, upper, )]
[;, double, log2, =, calculateLog, (, upper, ), ;, double, length, =, log2, -, log1, ;, double, adj, =, length]
[), ;, double, log2, =, calculateLog, (, upper, ), ;, double, length, =, log2, -, log1, ;, double, adj, =]
[;, double, length, =, log2, -, log1, ;, double, adj, =, length, *, percent, ;, log1, =, log1, +, adj]
[), ;, double, length, =, log2, -, log1, ;, double, adj, =, length, *, percent, ;, log1, =, log1, +]
[;, double, adj, =, length, *, percent, ;, log1, =, log1, +, adj, ;, log2, =, log2, +, adj, ;]
[-, log1, ;, double, adj, =, length, *, percent, ;, log1, =, log1, +, adj, ;, log2, =, log2, +]
[;, double, adj, =, length, *, percent, ;, log1, =, log1, +, adj, ;, log2, =, log2, +, adj, ;]
[;, log1, =, log1, +, adj, ;, log2, =, log2, +, adj, ;, setRange, (, calculateValue, (, log1, ), ,]
[*, percent, ;, log1, =, log1, +, adj, ;, log2, =, log2, +, adj, ;, setRange, (, calculateValue, (, log1]
[;, log1, =, log1, +, adj, ;, log2, =, log2, +, adj, ;, setRange, (, calculateValue, (, log1, ), ,]
[=, log1, +, adj, ;, log2, =, log2, +, adj, ;, setRange, (, calculateValue, (, log1, ), ,, calculateValue, (]
[;, log2, =, log2, +, adj, ;, setRange, (, calculateValue, (, log1, ), ,, calculateValue, (, log2, ), ), ;]
[+, adj, ;, log2, =, log2, +, adj, ;, setRange, (, calculateValue, (, log1, ), ,, calculateValue, (, log2, )]
[;, log2, =, log2, +, adj, ;, setRange, (, calculateValue, (, log1, ), ,, calculateValue, (, log2, ), ), ;]
[=, log2, +, adj, ;, setRange, (, calculateValue, (, log1, ), ,, calculateValue, (, log2, ), ), ;, }, protected]
[;, setRange, (, calculateValue, (, log1, ), ,, calculateValue, (, log2, ), ), ;, }, protected, String, createTickLabel, (, double]
[+, adj, ;, setRange, (, calculateValue, (, log1, ), ,, calculateValue, (, log2, ), ), ;, }, protected, String, createTickLabel]
[;, setRange, (, calculateValue, (, log1, ), ,, calculateValue, (, log2, ), ), ;, }, protected, String, createTickLabel, (, double]
[;, }, protected, String, createTickLabel, (, double, value, ), {, if, (, this, ., numberFormatOverride, !=, null, ), {, return]
[,, calculateValue, (, log2, ), ), ;, }, protected, String, createTickLabel, (, double, value, ), {, if, (, this, .]
[), ,, calculateValue, (, log2, ), ), ;, }, protected, String, createTickLabel, (, double, value, ), {, if, (, this]
[), ;, }, protected, String, createTickLabel, (, double, value, ), {, if, (, this, ., numberFormatOverride, !=, null, ), {]
[), ), ;, }, protected, String, createTickLabel, (, double, value, ), {, if, (, this, ., numberFormatOverride, !=, null, )]
[), {, return, this, ., numberFormatOverride, ., format, (, value, ), ;, }, else, {, return, this, ., tickUnit, .]
[!=, null, ), {, return, this, ., numberFormatOverride, ., format, (, value, ), ;, }, else, {, return, this, .]
[., numberFormatOverride, !=, null, ), {, return, this, ., numberFormatOverride, ., format, (, value, ), ;, }, else, {, return]
[), {, return, this, ., numberFormatOverride, ., format, (, value, ), ;, }, else, {, return, this, ., tickUnit, .]
[;, }, else, {, return, this, ., tickUnit, ., valueToString, (, value, ), ;, }, }, public, boolean, equals, (]
[., format, (, value, ), ;, }, else, {, return, this, ., tickUnit, ., valueToString, (, value, ), ;, }]
[., numberFormatOverride, ., format, (, value, ), ;, }, else, {, return, this, ., tickUnit, ., valueToString, (, value, )]
[), ;, }, else, {, return, this, ., tickUnit, ., valueToString, (, value, ), ;, }, }, public, boolean, equals]
[;, }, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true]
[., valueToString, (, value, ), ;, }, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[., tickUnit, ., valueToString, (, value, ), ;, }, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[), ;, }, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, LogAxis, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, LogAxis, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, LogAxis, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, LogAxis, ), ), {, return, false, ;, }, LogAxis, that, =, (]
[), {, return, false, ;, }, LogAxis, that, =, (, LogAxis, ), obj, ;, if, (, this, ., base, !=]
[), {, return, false, ;, }, LogAxis, that, =, (, LogAxis, ), obj, ;, if, (, this, ., base, !=]
[), ), {, return, false, ;, }, LogAxis, that, =, (, LogAxis, ), obj, ;, if, (, this, ., base]
[instanceof, LogAxis, ), ), {, return, false, ;, }, LogAxis, that, =, (, LogAxis, ), obj, ;, if, (, this]
[;, }, LogAxis, that, =, (, LogAxis, ), obj, ;, if, (, this, ., base, !=, that, ., base, )]
[;, if, (, this, ., base, !=, that, ., base, ), {, return, false, ;, }, if, (, this, .]
[;, if, (, this, ., base, !=, that, ., base, ), {, return, false, ;, }, if, (, this, .]
[), {, return, false, ;, }, if, (, this, ., smallestValue, !=, that, ., smallestValue, ), {, return, false, ;]
[!=, that, ., base, ), {, return, false, ;, }, if, (, this, ., smallestValue, !=, that, ., smallestValue, )]
[., base, !=, that, ., base, ), {, return, false, ;, }, if, (, this, ., smallestValue, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., smallestValue, !=, that, ., smallestValue, ), {, return, false, ;]
[., base, ), {, return, false, ;, }, if, (, this, ., smallestValue, !=, that, ., smallestValue, ), {, return]
[;, }, if, (, this, ., smallestValue, !=, that, ., smallestValue, ), {, return, false, ;, }, return, super, .]
[), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, public, int, hashCode, (, )]
[!=, that, ., smallestValue, ), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, public]
[., smallestValue, !=, that, ., smallestValue, ), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;]
[), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, public, int, hashCode, (, )]
[., smallestValue, ), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, public, int, hashCode]
[;, }, return, super, ., equals, (, obj, ), ;, }, public, int, hashCode, (, ), {, int, result, =]
[;, }, public, int, hashCode, (, ), {, int, result, =, 193, ;, long, temp, =, Double, ., doubleToLongBits, (]
[., equals, (, obj, ), ;, }, public, int, hashCode, (, ), {, int, result, =, 193, ;, long, temp]
[), ;, }, public, int, hashCode, (, ), {, int, result, =, 193, ;, long, temp, =, Double, ., doubleToLongBits]
[;, long, temp, =, Double, ., doubleToLongBits, (, this, ., base, ), ;, result, =, 37, *, result, +, (]
[;, result, =, 37, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, )]
[., doubleToLongBits, (, this, ., base, ), ;, result, =, 37, *, result, +, (, int, ), (, temp, ^]
[), ;, result, =, 37, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32]
[., base, ), ;, result, =, 37, *, result, +, (, int, ), (, temp, ^, (, temp, >, >]
[=, 37, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;]
[;, temp, =, Double, ., doubleToLongBits, (, this, ., smallestValue, ), ;, result, =, 37, *, result, +, (, int]
[+, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, Double, .]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =]
[+, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, Double, .]
[;, temp, =, Double, ., doubleToLongBits, (, this, ., smallestValue, ), ;, result, =, 37, *, result, +, (, int]
[;, temp, =, Double, ., doubleToLongBits, (, this, ., smallestValue, ), ;, result, =, 37, *, result, +, (, int]
[), ;, temp, =, Double, ., doubleToLongBits, (, this, ., smallestValue, ), ;, result, =, 37, *, result, +, (]
[^, (, temp, >, >, >, 32, ), ), ;, temp, =, Double, ., doubleToLongBits, (, this, ., smallestValue, )]
[), ;, temp, =, Double, ., doubleToLongBits, (, this, ., smallestValue, ), ;, result, =, 37, *, result, +, (]
[), ), ;, temp, =, Double, ., doubleToLongBits, (, this, ., smallestValue, ), ;, result, =, 37, *, result, +]
[>, >, >, 32, ), ), ;, temp, =, Double, ., doubleToLongBits, (, this, ., smallestValue, ), ;, result, =]
[), ), ;, temp, =, Double, ., doubleToLongBits, (, this, ., smallestValue, ), ;, result, =, 37, *, result, +]
[=, Double, ., doubleToLongBits, (, this, ., smallestValue, ), ;, result, =, 37, *, result, +, (, int, ), (]
[;, result, =, 37, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, )]
[., doubleToLongBits, (, this, ., smallestValue, ), ;, result, =, 37, *, result, +, (, int, ), (, temp, ^]
[), ;, result, =, 37, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32]
[., smallestValue, ), ;, result, =, 37, *, result, +, (, int, ), (, temp, ^, (, temp, >, >]
[=, 37, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;]
[;, if, (, this, ., numberFormatOverride, !=, null, ), {, result, =, 37, *, result, +, this, ., numberFormatOverride, .]
[+, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, if, (, this, .]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, if, (]
[+, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, if, (, this, .]
[;, if, (, this, ., numberFormatOverride, !=, null, ), {, result, =, 37, *, result, +, this, ., numberFormatOverride, .]
[;, if, (, this, ., numberFormatOverride, !=, null, ), {, result, =, 37, *, result, +, this, ., numberFormatOverride, .]
[), ;, if, (, this, ., numberFormatOverride, !=, null, ), {, result, =, 37, *, result, +, this, ., numberFormatOverride]
[^, (, temp, >, >, >, 32, ), ), ;, if, (, this, ., numberFormatOverride, !=, null, ), {, result]
[), ;, if, (, this, ., numberFormatOverride, !=, null, ), {, result, =, 37, *, result, +, this, ., numberFormatOverride]
[), ), ;, if, (, this, ., numberFormatOverride, !=, null, ), {, result, =, 37, *, result, +, this, .]
[>, >, >, 32, ), ), ;, if, (, this, ., numberFormatOverride, !=, null, ), {, result, =, 37, *]
[), ), ;, if, (, this, ., numberFormatOverride, !=, null, ), {, result, =, 37, *, result, +, this, .]
[), {, result, =, 37, *, result, +, this, ., numberFormatOverride, ., hashCode, (, ), ;, }, result, =, 37]
[!=, null, ), {, result, =, 37, *, result, +, this, ., numberFormatOverride, ., hashCode, (, ), ;, }, result]
[., numberFormatOverride, !=, null, ), {, result, =, 37, *, result, +, this, ., numberFormatOverride, ., hashCode, (, ), ;]
[), {, result, =, 37, *, result, +, this, ., numberFormatOverride, ., hashCode, (, ), ;, }, result, =, 37]
[=, 37, *, result, +, this, ., numberFormatOverride, ., hashCode, (, ), ;, }, result, =, 37, *, result, +]
[;, }, result, =, 37, *, result, +, this, ., tickUnit, ., hashCode, (, ), ;, return, result, ;, }]
[+, this, ., numberFormatOverride, ., hashCode, (, ), ;, }, result, =, 37, *, result, +, this, ., tickUnit, .]
[*, result, +, this, ., numberFormatOverride, ., hashCode, (, ), ;, }, result, =, 37, *, result, +, this, .]
[+, this, ., numberFormatOverride, ., hashCode, (, ), ;, }, result, =, 37, *, result, +, this, ., tickUnit, .]
[;, }, result, =, 37, *, result, +, this, ., tickUnit, ., hashCode, (, ), ;, return, result, ;, }]
[., hashCode, (, ), ;, }, result, =, 37, *, result, +, this, ., tickUnit, ., hashCode, (, ), ;]
[., numberFormatOverride, ., hashCode, (, ), ;, }, result, =, 37, *, result, +, this, ., tickUnit, ., hashCode, (]
[=, 37, *, result, +, this, ., tickUnit, ., hashCode, (, ), ;, return, result, ;, }, public, static, TickUnitSource]
[;, return, result, ;, }, public, static, TickUnitSource, createLogTickUnits, (, Locale, locale, ), {, TickUnits, units, =, new, TickUnits, (]
[+, this, ., tickUnit, ., hashCode, (, ), ;, return, result, ;, }, public, static, TickUnitSource, createLogTickUnits, (, Locale, locale]
[*, result, +, this, ., tickUnit, ., hashCode, (, ), ;, return, result, ;, }, public, static, TickUnitSource, createLogTickUnits, (]
[+, this, ., tickUnit, ., hashCode, (, ), ;, return, result, ;, }, public, static, TickUnitSource, createLogTickUnits, (, Locale, locale]
[;, return, result, ;, }, public, static, TickUnitSource, createLogTickUnits, (, Locale, locale, ), {, TickUnits, units, =, new, TickUnits, (]
[., hashCode, (, ), ;, return, result, ;, }, public, static, TickUnitSource, createLogTickUnits, (, Locale, locale, ), {, TickUnits, units]
[., tickUnit, ., hashCode, (, ), ;, return, result, ;, }, public, static, TickUnitSource, createLogTickUnits, (, Locale, locale, ), {]
[;, }, public, static, TickUnitSource, createLogTickUnits, (, Locale, locale, ), {, TickUnits, units, =, new, TickUnits, (, ), ;, NumberFormat]
[;, NumberFormat, numberFormat, =, new, LogFormat, (, ), ;, units, ., add, (, new, NumberTickUnit, (, 0.05, ,, numberFormat, ,]
[;, units, ., add, (, new, NumberTickUnit, (, 0.05, ,, numberFormat, ,, 2, ), ), ;, units, ., add, (]
[;, units, ., add, (, new, NumberTickUnit, (, 0.1, ,, numberFormat, ,, 10, ), ), ;, units, ., add, (]
[., add, (, new, NumberTickUnit, (, 0.05, ,, numberFormat, ,, 2, ), ), ;, units, ., add, (, new, NumberTickUnit]
[), ;, units, ., add, (, new, NumberTickUnit, (, 0.1, ,, numberFormat, ,, 10, ), ), ;, units, ., add]
[,, numberFormat, ,, 2, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 0.1, ,, numberFormat, ,, 10, )]
[,, 2, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 0.1, ,, numberFormat, ,, 10, ), ), ;]
[), ), ;, units, ., add, (, new, NumberTickUnit, (, 0.1, ,, numberFormat, ,, 10, ), ), ;, units, .]
[;, units, ., add, (, new, NumberTickUnit, (, 0.2, ,, numberFormat, ,, 2, ), ), ;, units, ., add, (]
[., add, (, new, NumberTickUnit, (, 0.1, ,, numberFormat, ,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit]
[), ;, units, ., add, (, new, NumberTickUnit, (, 0.2, ,, numberFormat, ,, 2, ), ), ;, units, ., add]
[,, numberFormat, ,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 0.2, ,, numberFormat, ,, 2, )]
[,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 0.2, ,, numberFormat, ,, 2, ), ), ;]
[), ), ;, units, ., add, (, new, NumberTickUnit, (, 0.2, ,, numberFormat, ,, 2, ), ), ;, units, .]
[;, units, ., add, (, new, NumberTickUnit, (, 0.5, ,, numberFormat, ,, 5, ), ), ;, units, ., add, (]
[., add, (, new, NumberTickUnit, (, 0.2, ,, numberFormat, ,, 2, ), ), ;, units, ., add, (, new, NumberTickUnit]
[), ;, units, ., add, (, new, NumberTickUnit, (, 0.5, ,, numberFormat, ,, 5, ), ), ;, units, ., add]
[,, numberFormat, ,, 2, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 0.5, ,, numberFormat, ,, 5, )]
[,, 2, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 0.5, ,, numberFormat, ,, 5, ), ), ;]
[), ), ;, units, ., add, (, new, NumberTickUnit, (, 0.5, ,, numberFormat, ,, 5, ), ), ;, units, .]
[;, units, ., add, (, new, NumberTickUnit, (, 1, ,, numberFormat, ,, 10, ), ), ;, units, ., add, (]
[., add, (, new, NumberTickUnit, (, 0.5, ,, numberFormat, ,, 5, ), ), ;, units, ., add, (, new, NumberTickUnit]
[), ;, units, ., add, (, new, NumberTickUnit, (, 1, ,, numberFormat, ,, 10, ), ), ;, units, ., add]
[,, numberFormat, ,, 5, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 1, ,, numberFormat, ,, 10, )]
[,, 5, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 1, ,, numberFormat, ,, 10, ), ), ;]
[), ), ;, units, ., add, (, new, NumberTickUnit, (, 1, ,, numberFormat, ,, 10, ), ), ;, units, .]
[;, units, ., add, (, new, NumberTickUnit, (, 2, ,, numberFormat, ,, 10, ), ), ;, units, ., add, (]
[., add, (, new, NumberTickUnit, (, 1, ,, numberFormat, ,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit]
[), ;, units, ., add, (, new, NumberTickUnit, (, 2, ,, numberFormat, ,, 10, ), ), ;, units, ., add]
[,, numberFormat, ,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 2, ,, numberFormat, ,, 10, )]
[,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 2, ,, numberFormat, ,, 10, ), ), ;]
[), ), ;, units, ., add, (, new, NumberTickUnit, (, 2, ,, numberFormat, ,, 10, ), ), ;, units, .]
[;, units, ., add, (, new, NumberTickUnit, (, 3, ,, numberFormat, ,, 15, ), ), ;, units, ., add, (]
[., add, (, new, NumberTickUnit, (, 2, ,, numberFormat, ,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit]
[), ;, units, ., add, (, new, NumberTickUnit, (, 3, ,, numberFormat, ,, 15, ), ), ;, units, ., add]
[,, numberFormat, ,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 3, ,, numberFormat, ,, 15, )]
[,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 3, ,, numberFormat, ,, 15, ), ), ;]
[), ), ;, units, ., add, (, new, NumberTickUnit, (, 3, ,, numberFormat, ,, 15, ), ), ;, units, .]
[;, units, ., add, (, new, NumberTickUnit, (, 4, ,, numberFormat, ,, 20, ), ), ;, units, ., add, (]
[., add, (, new, NumberTickUnit, (, 3, ,, numberFormat, ,, 15, ), ), ;, units, ., add, (, new, NumberTickUnit]
[), ;, units, ., add, (, new, NumberTickUnit, (, 4, ,, numberFormat, ,, 20, ), ), ;, units, ., add]
[,, numberFormat, ,, 15, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 4, ,, numberFormat, ,, 20, )]
[,, 15, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 4, ,, numberFormat, ,, 20, ), ), ;]
[), ), ;, units, ., add, (, new, NumberTickUnit, (, 4, ,, numberFormat, ,, 20, ), ), ;, units, .]
[;, units, ., add, (, new, NumberTickUnit, (, 5, ,, numberFormat, ,, 25, ), ), ;, units, ., add, (]
[., add, (, new, NumberTickUnit, (, 4, ,, numberFormat, ,, 20, ), ), ;, units, ., add, (, new, NumberTickUnit]
[), ;, units, ., add, (, new, NumberTickUnit, (, 5, ,, numberFormat, ,, 25, ), ), ;, units, ., add]
[,, numberFormat, ,, 20, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 5, ,, numberFormat, ,, 25, )]
[,, 20, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 5, ,, numberFormat, ,, 25, ), ), ;]
[), ), ;, units, ., add, (, new, NumberTickUnit, (, 5, ,, numberFormat, ,, 25, ), ), ;, units, .]
[;, units, ., add, (, new, NumberTickUnit, (, 6, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit]
[., add, (, new, NumberTickUnit, (, 5, ,, numberFormat, ,, 25, ), ), ;, units, ., add, (, new, NumberTickUnit]
[), ;, units, ., add, (, new, NumberTickUnit, (, 6, ,, numberFormat, ), ), ;, units, ., add, (, new]
[,, numberFormat, ,, 25, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 6, ,, numberFormat, ), ), ;]
[,, 25, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 6, ,, numberFormat, ), ), ;, units, .]
[), ), ;, units, ., add, (, new, NumberTickUnit, (, 6, ,, numberFormat, ), ), ;, units, ., add, (]
[;, units, ., add, (, new, NumberTickUnit, (, 7, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit]
[., add, (, new, NumberTickUnit, (, 6, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 7]
[), ;, units, ., add, (, new, NumberTickUnit, (, 7, ,, numberFormat, ), ), ;, units, ., add, (, new]
[,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 7, ,, numberFormat, ), ), ;, units, .]
[), ), ;, units, ., add, (, new, NumberTickUnit, (, 7, ,, numberFormat, ), ), ;, units, ., add, (]
[;, units, ., add, (, new, NumberTickUnit, (, 8, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit]
[., add, (, new, NumberTickUnit, (, 7, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 8]
[), ;, units, ., add, (, new, NumberTickUnit, (, 8, ,, numberFormat, ), ), ;, units, ., add, (, new]
[,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 8, ,, numberFormat, ), ), ;, units, .]
[), ), ;, units, ., add, (, new, NumberTickUnit, (, 8, ,, numberFormat, ), ), ;, units, ., add, (]
[;, units, ., add, (, new, NumberTickUnit, (, 9, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit]
[., add, (, new, NumberTickUnit, (, 8, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 9]
[), ;, units, ., add, (, new, NumberTickUnit, (, 9, ,, numberFormat, ), ), ;, units, ., add, (, new]
[,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 9, ,, numberFormat, ), ), ;, units, .]
[), ), ;, units, ., add, (, new, NumberTickUnit, (, 9, ,, numberFormat, ), ), ;, units, ., add, (]
[;, units, ., add, (, new, NumberTickUnit, (, 10, ,, numberFormat, ), ), ;, return, units, ;, }, }]
[., add, (, new, NumberTickUnit, (, 9, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 10]
[), ;, units, ., add, (, new, NumberTickUnit, (, 10, ,, numberFormat, ), ), ;, return, units, ;, }, }]
[,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 10, ,, numberFormat, ), ), ;, return, units]
[), ), ;, units, ., add, (, new, NumberTickUnit, (, 10, ,, numberFormat, ), ), ;, return, units, ;, }]
[;, return, units, ;, }, }]
[., add, (, new, NumberTickUnit, (, 10, ,, numberFormat, ), ), ;, return, units, ;, }, }]
[), ;, return, units, ;, }, }]
[,, numberFormat, ), ), ;, return, units, ;, }, }]
[), ), ;, return, units, ;, }, }]
[;, }, }]
