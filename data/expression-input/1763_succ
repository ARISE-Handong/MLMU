[;, public, static, final, Paint, DEFAULT_GRID_BAND_PAINT, =, new, Color, (, 232, ,, 234, ,, 232, ,, 128, ), ;, public]
[;, public, static, final, Paint, DEFAULT_GRID_BAND_ALTERNATE_PAINT, =, new, Color, (, 0, ,, 0, ,, 0, ,, 0, ), ;, private]
[,, 234, ,, 232, ,, 128, ), ;, public, static, final, Paint, DEFAULT_GRID_BAND_ALTERNATE_PAINT, =, new, Color, (, 0, ,, 0]
[,, 232, ,, 128, ), ;, public, static, final, Paint, DEFAULT_GRID_BAND_ALTERNATE_PAINT, =, new, Color, (, 0, ,, 0, ,, 0]
[,, 128, ), ;, public, static, final, Paint, DEFAULT_GRID_BAND_ALTERNATE_PAINT, =, new, Color, (, 0, ,, 0, ,, 0, ,, 0]
[), ;, public, static, final, Paint, DEFAULT_GRID_BAND_ALTERNATE_PAINT, =, new, Color, (, 0, ,, 0, ,, 0, ,, 0, ), ;]
[;, private, List, symbols, ;, private, boolean, gridBandsVisible, ;, private, transient, Paint, gridBandPaint, ;, private, transient, Paint, gridBandAlternatePaint, ;, public]
[,, 0, ,, 0, ,, 0, ), ;, private, List, symbols, ;, private, boolean, gridBandsVisible, ;, private, transient, Paint, gridBandPaint]
[,, 0, ,, 0, ), ;, private, List, symbols, ;, private, boolean, gridBandsVisible, ;, private, transient, Paint, gridBandPaint, ;, private]
[,, 0, ), ;, private, List, symbols, ;, private, boolean, gridBandsVisible, ;, private, transient, Paint, gridBandPaint, ;, private, transient, Paint]
[), ;, private, List, symbols, ;, private, boolean, gridBandsVisible, ;, private, transient, Paint, gridBandPaint, ;, private, transient, Paint, gridBandAlternatePaint, ;]
[), ;, this, ., symbols, =, Arrays, ., asList, (, sv, ), ;, this, ., gridBandsVisible, =, true, ;, this]
[=, Arrays, ., asList, (, sv, ), ;, this, ., gridBandsVisible, =, true, ;, this, ., gridBandPaint, =, DEFAULT_GRID_BAND_PAINT, ;]
[., symbols, =, Arrays, ., asList, (, sv, ), ;, this, ., gridBandsVisible, =, true, ;, this, ., gridBandPaint, =]
[;, this, ., gridBandsVisible, =, true, ;, this, ., gridBandPaint, =, DEFAULT_GRID_BAND_PAINT, ;, this, ., gridBandAlternatePaint, =, DEFAULT_GRID_BAND_ALTERNATE_PAINT, ;, setAutoTickUnitSelection]
[., asList, (, sv, ), ;, this, ., gridBandsVisible, =, true, ;, this, ., gridBandPaint, =, DEFAULT_GRID_BAND_PAINT, ;, this, .]
[), ;, this, ., gridBandsVisible, =, true, ;, this, ., gridBandPaint, =, DEFAULT_GRID_BAND_PAINT, ;, this, ., gridBandAlternatePaint, =, DEFAULT_GRID_BAND_ALTERNATE_PAINT, ;]
[=, true, ;, this, ., gridBandPaint, =, DEFAULT_GRID_BAND_PAINT, ;, this, ., gridBandAlternatePaint, =, DEFAULT_GRID_BAND_ALTERNATE_PAINT, ;, setAutoTickUnitSelection, (, false, ,, false]
[., gridBandsVisible, =, true, ;, this, ., gridBandPaint, =, DEFAULT_GRID_BAND_PAINT, ;, this, ., gridBandAlternatePaint, =, DEFAULT_GRID_BAND_ALTERNATE_PAINT, ;, setAutoTickUnitSelection, (, false]
[;, this, ., gridBandPaint, =, DEFAULT_GRID_BAND_PAINT, ;, this, ., gridBandAlternatePaint, =, DEFAULT_GRID_BAND_ALTERNATE_PAINT, ;, setAutoTickUnitSelection, (, false, ,, false, ), ;]
[=, DEFAULT_GRID_BAND_PAINT, ;, this, ., gridBandAlternatePaint, =, DEFAULT_GRID_BAND_ALTERNATE_PAINT, ;, setAutoTickUnitSelection, (, false, ,, false, ), ;, setAutoRangeStickyZero, (, false, )]
[., gridBandPaint, =, DEFAULT_GRID_BAND_PAINT, ;, this, ., gridBandAlternatePaint, =, DEFAULT_GRID_BAND_ALTERNATE_PAINT, ;, setAutoTickUnitSelection, (, false, ,, false, ), ;, setAutoRangeStickyZero, (]
[;, this, ., gridBandAlternatePaint, =, DEFAULT_GRID_BAND_ALTERNATE_PAINT, ;, setAutoTickUnitSelection, (, false, ,, false, ), ;, setAutoRangeStickyZero, (, false, ), ;, }]
[=, DEFAULT_GRID_BAND_ALTERNATE_PAINT, ;, setAutoTickUnitSelection, (, false, ,, false, ), ;, setAutoRangeStickyZero, (, false, ), ;, }, public, String, [, ]]
[., gridBandAlternatePaint, =, DEFAULT_GRID_BAND_ALTERNATE_PAINT, ;, setAutoTickUnitSelection, (, false, ,, false, ), ;, setAutoRangeStickyZero, (, false, ), ;, }, public, String]
[;, setAutoTickUnitSelection, (, false, ,, false, ), ;, setAutoRangeStickyZero, (, false, ), ;, }, public, String, [, ], getSymbols, (]
[;, setAutoRangeStickyZero, (, false, ), ;, }, public, String, [, ], getSymbols, (, ), {, String, [, ], result, =]
[,, false, ), ;, setAutoRangeStickyZero, (, false, ), ;, }, public, String, [, ], getSymbols, (, ), {, String, []
[), ;, setAutoRangeStickyZero, (, false, ), ;, }, public, String, [, ], getSymbols, (, ), {, String, [, ], result]
[;, }, public, String, [, ], getSymbols, (, ), {, String, [, ], result, =, new, String, [, this, .]
[), ;, }, public, String, [, ], getSymbols, (, ), {, String, [, ], result, =, new, String, [, this]
[;, result, =, (, String, [, ], ), this, ., symbols, ., toArray, (, result, ), ;, return, result, ;]
[], ;, result, =, (, String, [, ], ), this, ., symbols, ., toArray, (, result, ), ;, return, result]
[., size, (, ), ], ;, result, =, (, String, [, ], ), this, ., symbols, ., toArray, (, result]
[., symbols, ., size, (, ), ], ;, result, =, (, String, [, ], ), this, ., symbols, ., toArray]
[=, (, String, [, ], ), this, ., symbols, ., toArray, (, result, ), ;, return, result, ;, }, public]
[;, return, result, ;, }, public, boolean, isGridBandsVisible, (, ), {, return, this, ., gridBandsVisible, ;, }, public, void, setGridBandsVisible]
[;, return, result, ;, }, public, boolean, isGridBandsVisible, (, ), {, return, this, ., gridBandsVisible, ;, }, public, void, setGridBandsVisible]
[., toArray, (, result, ), ;, return, result, ;, }, public, boolean, isGridBandsVisible, (, ), {, return, this, ., gridBandsVisible]
[., symbols, ., toArray, (, result, ), ;, return, result, ;, }, public, boolean, isGridBandsVisible, (, ), {, return, this]
[), ;, return, result, ;, }, public, boolean, isGridBandsVisible, (, ), {, return, this, ., gridBandsVisible, ;, }, public, void]
[;, }, public, boolean, isGridBandsVisible, (, ), {, return, this, ., gridBandsVisible, ;, }, public, void, setGridBandsVisible, (, boolean, flag]
[;, }, public, void, setGridBandsVisible, (, boolean, flag, ), {, if, (, this, ., gridBandsVisible, !=, flag, ), {, this]
[., gridBandsVisible, ;, }, public, void, setGridBandsVisible, (, boolean, flag, ), {, if, (, this, ., gridBandsVisible, !=, flag, )]
[), {, this, ., gridBandsVisible, =, flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public]
[!=, flag, ), {, this, ., gridBandsVisible, =, flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }]
[., gridBandsVisible, !=, flag, ), {, this, ., gridBandsVisible, =, flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[), {, this, ., gridBandsVisible, =, flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public]
[=, flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public, Paint, getGridBandPaint, (, ), {]
[., gridBandsVisible, =, flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public, Paint, getGridBandPaint, (]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public, Paint, getGridBandPaint, (, ), {, return, this]
[;, }, }, public, Paint, getGridBandPaint, (, ), {, return, this, ., gridBandPaint, ;, }, public, void, setGridBandPaint, (, Paint]
[), ;, }, }, public, Paint, getGridBandPaint, (, ), {, return, this, ., gridBandPaint, ;, }, public, void, setGridBandPaint, (]
[), ), ;, }, }, public, Paint, getGridBandPaint, (, ), {, return, this, ., gridBandPaint, ;, }, public, void, setGridBandPaint]
[;, }, public, void, setGridBandPaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException]
[., gridBandPaint, ;, }, public, void, setGridBandPaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., gridBandPaint, =, paint, ;, notifyListeners, (, new, AxisChangeEvent]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., gridBandPaint, =, paint, ;, notifyListeners, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., gridBandPaint, =, paint, ;, notifyListeners, (, new, AxisChangeEvent]
[;, }, this, ., gridBandPaint, =, paint, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Paint]
[), ;, }, this, ., gridBandPaint, =, paint, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public]
[=, paint, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Paint, getGridBandAlternatePaint, (, ), {, return]
[., gridBandPaint, =, paint, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Paint, getGridBandAlternatePaint, (, )]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Paint, getGridBandAlternatePaint, (, ), {, return, this, .]
[;, }, public, Paint, getGridBandAlternatePaint, (, ), {, return, this, ., gridBandAlternatePaint, ;, }, public, void, setGridBandAlternatePaint, (, Paint, paint]
[), ;, }, public, Paint, getGridBandAlternatePaint, (, ), {, return, this, ., gridBandAlternatePaint, ;, }, public, void, setGridBandAlternatePaint, (, Paint]
[), ), ;, }, public, Paint, getGridBandAlternatePaint, (, ), {, return, this, ., gridBandAlternatePaint, ;, }, public, void, setGridBandAlternatePaint, (]
[;, }, public, void, setGridBandAlternatePaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException]
[., gridBandAlternatePaint, ;, }, public, void, setGridBandAlternatePaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., gridBandAlternatePaint, =, paint, ;, notifyListeners, (, new, AxisChangeEvent]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., gridBandAlternatePaint, =, paint, ;, notifyListeners, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., gridBandAlternatePaint, =, paint, ;, notifyListeners, (, new, AxisChangeEvent]
[;, }, this, ., gridBandAlternatePaint, =, paint, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, protected, void]
[), ;, }, this, ., gridBandAlternatePaint, =, paint, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, protected]
[=, paint, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, protected, void, selectAutoTickUnit, (, Graphics2D, g2, ,]
[., gridBandAlternatePaint, =, paint, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, protected, void, selectAutoTickUnit, (, Graphics2D]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, protected, void, selectAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea]
[;, }, protected, void, selectAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, throw, new, UnsupportedOperationException, (]
[), ;, }, protected, void, selectAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, throw, new, UnsupportedOperationException]
[), ), ;, }, protected, void, selectAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, throw, new]
[;, }, public, AxisState, draw, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge]
[;, if, (, isVisible, (, ), ), {, info, =, super, ., draw, (, g2, ,, cursor, ,, plotArea, ,]
[), ;, if, (, isVisible, (, ), ), {, info, =, super, ., draw, (, g2, ,, cursor, ,, plotArea]
[), {, info, =, super, ., draw, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, plotState, )]
[=, super, ., draw, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;, }, if]
[;, }, if, (, this, ., gridBandsVisible, ), {, drawGridBands, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, info]
[., draw, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;, }, if, (, this]
[,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;, }, if, (, this, ., gridBandsVisible, ), {]
[,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;, }, if, (, this, ., gridBandsVisible, ), {, drawGridBands, (]
[,, dataArea, ,, edge, ,, plotState, ), ;, }, if, (, this, ., gridBandsVisible, ), {, drawGridBands, (, g2, ,]
[,, edge, ,, plotState, ), ;, }, if, (, this, ., gridBandsVisible, ), {, drawGridBands, (, g2, ,, plotArea, ,]
[,, plotState, ), ;, }, if, (, this, ., gridBandsVisible, ), {, drawGridBands, (, g2, ,, plotArea, ,, dataArea, ,]
[), ;, }, if, (, this, ., gridBandsVisible, ), {, drawGridBands, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,]
[), {, drawGridBands, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, info, ., getTicks, (, ), ), ;, }]
[., gridBandsVisible, ), {, drawGridBands, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, info, ., getTicks, (, ), )]
[;, }, return, info, ;, }, protected, void, drawGridBands, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge]
[,, plotArea, ,, dataArea, ,, edge, ,, info, ., getTicks, (, ), ), ;, }, return, info, ;, }, protected]
[,, dataArea, ,, edge, ,, info, ., getTicks, (, ), ), ;, }, return, info, ;, }, protected, void, drawGridBands]
[,, edge, ,, info, ., getTicks, (, ), ), ;, }, return, info, ;, }, protected, void, drawGridBands, (, Graphics2D]
[,, info, ., getTicks, (, ), ), ;, }, return, info, ;, }, protected, void, drawGridBands, (, Graphics2D, g2, ,]
[), ;, }, return, info, ;, }, protected, void, drawGridBands, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,]
[., getTicks, (, ), ), ;, }, return, info, ;, }, protected, void, drawGridBands, (, Graphics2D, g2, ,, Rectangle2D, plotArea]
[;, }, protected, void, drawGridBands, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, List, ticks]
[;, g2, ., clip, (, dataArea, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, drawGridBandsHorizontal, (]
[., getClip, (, ), ;, g2, ., clip, (, dataArea, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, )]
[;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, drawGridBandsHorizontal, (, g2, ,, plotArea, ,, dataArea, ,, true]
[., clip, (, dataArea, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, drawGridBandsHorizontal, (, g2, ,]
[), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, drawGridBandsHorizontal, (, g2, ,, plotArea, ,, dataArea, ,]
[), {, drawGridBandsHorizontal, (, g2, ,, plotArea, ,, dataArea, ,, true, ,, ticks, ), ;, }, else, if, (, RectangleEdge]
[., isTopOrBottom, (, edge, ), ), {, drawGridBandsHorizontal, (, g2, ,, plotArea, ,, dataArea, ,, true, ,, ticks, ), ;]
[), ), {, drawGridBandsHorizontal, (, g2, ,, plotArea, ,, dataArea, ,, true, ,, ticks, ), ;, }, else, if, (]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, drawGridBandsVertical, (, g2, ,, plotArea, ,, dataArea]
[,, plotArea, ,, dataArea, ,, true, ,, ticks, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, )]
[,, dataArea, ,, true, ,, ticks, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[,, true, ,, ticks, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, drawGridBandsVertical, (]
[,, ticks, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, drawGridBandsVertical, (, g2, ,]
[), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, drawGridBandsVertical, (, g2, ,, plotArea, ,]
[), {, drawGridBandsVertical, (, g2, ,, plotArea, ,, dataArea, ,, true, ,, ticks, ), ;, }, g2, ., setClip, (]
[., isLeftOrRight, (, edge, ), ), {, drawGridBandsVertical, (, g2, ,, plotArea, ,, dataArea, ,, true, ,, ticks, ), ;]
[), ), {, drawGridBandsVertical, (, g2, ,, plotArea, ,, dataArea, ,, true, ,, ticks, ), ;, }, g2, ., setClip]
[;, }, g2, ., setClip, (, savedClip, ), ;, }, protected, void, drawGridBandsHorizontal, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ,]
[,, plotArea, ,, dataArea, ,, true, ,, ticks, ), ;, }, g2, ., setClip, (, savedClip, ), ;, }, protected]
[,, dataArea, ,, true, ,, ticks, ), ;, }, g2, ., setClip, (, savedClip, ), ;, }, protected, void, drawGridBandsHorizontal]
[,, true, ,, ticks, ), ;, }, g2, ., setClip, (, savedClip, ), ;, }, protected, void, drawGridBandsHorizontal, (, Graphics2D]
[,, ticks, ), ;, }, g2, ., setClip, (, savedClip, ), ;, }, protected, void, drawGridBandsHorizontal, (, Graphics2D, g2, ,]
[), ;, }, g2, ., setClip, (, savedClip, ), ;, }, protected, void, drawGridBandsHorizontal, (, Graphics2D, g2, ,, Rectangle2D, plotArea]
[;, }, protected, void, drawGridBandsHorizontal, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, boolean, firstGridBandIsDark, ,, List, ticks]
[., setClip, (, savedClip, ), ;, }, protected, void, drawGridBandsHorizontal, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,]
[), ;, }, protected, void, drawGridBandsHorizontal, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, boolean, firstGridBandIsDark, ,, List]
[;, double, yy, =, dataArea, ., getY, (, ), ;, double, xx1, ,, xx2, ;, double, outlineStrokeWidth, ;, if, (]
[;, double, xx1, ,, xx2, ;, double, outlineStrokeWidth, ;, if, (, getPlot, (, ), ., getOutlineStroke, (, ), !=, null]
[., getY, (, ), ;, double, xx1, ,, xx2, ;, double, outlineStrokeWidth, ;, if, (, getPlot, (, ), ., getOutlineStroke]
[), {, outlineStrokeWidth, =, (, (, BasicStroke, ), getPlot, (, ), ., getOutlineStroke, (, ), ), ., getLineWidth, (, )]
[!=, null, ), {, outlineStrokeWidth, =, (, (, BasicStroke, ), getPlot, (, ), ., getOutlineStroke, (, ), ), ., getLineWidth]
[., getOutlineStroke, (, ), !=, null, ), {, outlineStrokeWidth, =, (, (, BasicStroke, ), getPlot, (, ), ., getOutlineStroke, (]
[), {, outlineStrokeWidth, =, (, (, BasicStroke, ), getPlot, (, ), ., getOutlineStroke, (, ), ), ., getLineWidth, (, )]
[=, (, (, BasicStroke, ), getPlot, (, ), ., getOutlineStroke, (, ), ), ., getLineWidth, (, ), ;, }, else]
[;, }, else, {, outlineStrokeWidth, =, 1d, ;, }, Iterator, iterator, =, ticks, ., iterator, (, ), ;, ValueTick, tick]
[., getLineWidth, (, ), ;, }, else, {, outlineStrokeWidth, =, 1d, ;, }, Iterator, iterator, =, ticks, ., iterator, (]
[), ., getLineWidth, (, ), ;, }, else, {, outlineStrokeWidth, =, 1d, ;, }, Iterator, iterator, =, ticks, ., iterator]
[), ., getLineWidth, (, ), ;, }, else, {, outlineStrokeWidth, =, 1d, ;, }, Iterator, iterator, =, ticks, ., iterator]
[., getOutlineStroke, (, ), ), ., getLineWidth, (, ), ;, }, else, {, outlineStrokeWidth, =, 1d, ;, }, Iterator, iterator]
[=, 1d, ;, }, Iterator, iterator, =, ticks, ., iterator, (, ), ;, ValueTick, tick, ;, Rectangle2D, band, ;, while]
[;, }, Iterator, iterator, =, ticks, ., iterator, (, ), ;, ValueTick, tick, ;, Rectangle2D, band, ;, while, (, iterator]
[;, ValueTick, tick, ;, Rectangle2D, band, ;, while, (, iterator, ., hasNext, (, ), ), {, tick, =, (, ValueTick]
[., iterator, (, ), ;, ValueTick, tick, ;, Rectangle2D, band, ;, while, (, iterator, ., hasNext, (, ), ), {]
[), {, tick, =, (, ValueTick, ), iterator, ., next, (, ), ;, xx1, =, valueToJava2D, (, tick, ., getValue]
[., hasNext, (, ), ), {, tick, =, (, ValueTick, ), iterator, ., next, (, ), ;, xx1, =, valueToJava2D]
[=, (, ValueTick, ), iterator, ., next, (, ), ;, xx1, =, valueToJava2D, (, tick, ., getValue, (, ), -]
[;, xx1, =, valueToJava2D, (, tick, ., getValue, (, ), -, 0.5d, ,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;]
[;, xx1, =, valueToJava2D, (, tick, ., getValue, (, ), -, 0.5d, ,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;]
[., next, (, ), ;, xx1, =, valueToJava2D, (, tick, ., getValue, (, ), -, 0.5d, ,, dataArea, ,, RectangleEdge]
[=, valueToJava2D, (, tick, ., getValue, (, ), -, 0.5d, ,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;, xx2, =]
[;, xx2, =, valueToJava2D, (, tick, ., getValue, (, ), +, 0.5d, ,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;]
[,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;, xx2, =, valueToJava2D, (, tick, ., getValue, (, ), +, 0.5d, ,]
[-, 0.5d, ,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;, xx2, =, valueToJava2D, (, tick, ., getValue, (, ), +]
[., getValue, (, ), -, 0.5d, ,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;, xx2, =, valueToJava2D, (, tick, .]
[,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;, xx2, =, valueToJava2D, (, tick, ., getValue, (, ), +, 0.5d, ,]
[,, RectangleEdge, ., BOTTOM, ), ;, xx2, =, valueToJava2D, (, tick, ., getValue, (, ), +, 0.5d, ,, dataArea, ,]
[), ;, xx2, =, valueToJava2D, (, tick, ., getValue, (, ), +, 0.5d, ,, dataArea, ,, RectangleEdge, ., BOTTOM, )]
[., BOTTOM, ), ;, xx2, =, valueToJava2D, (, tick, ., getValue, (, ), +, 0.5d, ,, dataArea, ,, RectangleEdge, .]
[=, valueToJava2D, (, tick, ., getValue, (, ), +, 0.5d, ,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;, if, (]
[;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (, this, ., gridBandPaint, ), ;, }, else, {, g2, .]
[,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (, this, ., gridBandPaint]
[+, 0.5d, ,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (, this]
[., getValue, (, ), +, 0.5d, ,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;, if, (, currentGridBandIsDark, ), {, g2]
[,, dataArea, ,, RectangleEdge, ., BOTTOM, ), ;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (, this, ., gridBandPaint]
[,, RectangleEdge, ., BOTTOM, ), ;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (, this, ., gridBandPaint, ), ;]
[), ;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (, this, ., gridBandPaint, ), ;, }, else, {, g2]
[., BOTTOM, ), ;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (, this, ., gridBandPaint, ), ;, }, else]
[), {, g2, ., setPaint, (, this, ., gridBandPaint, ), ;, }, else, {, g2, ., setPaint, (, this, .]
[;, }, else, {, g2, ., setPaint, (, this, ., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, ., Double]
[., setPaint, (, this, ., gridBandPaint, ), ;, }, else, {, g2, ., setPaint, (, this, ., gridBandAlternatePaint, ), ;]
[), ;, }, else, {, g2, ., setPaint, (, this, ., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, .]
[., gridBandPaint, ), ;, }, else, {, g2, ., setPaint, (, this, ., gridBandAlternatePaint, ), ;, }, band, =, new]
[;, }, band, =, new, Rectangle2D, ., Double, (, xx1, ,, yy, +, outlineStrokeWidth, ,, xx2, -, xx1, ,, dataArea]
[., setPaint, (, this, ., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, ., Double, (, xx1, ,, yy, +]
[), ;, }, band, =, new, Rectangle2D, ., Double, (, xx1, ,, yy, +, outlineStrokeWidth, ,, xx2, -, xx1, ,]
[., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, ., Double, (, xx1, ,, yy, +, outlineStrokeWidth, ,, xx2, -]
[=, new, Rectangle2D, ., Double, (, xx1, ,, yy, +, outlineStrokeWidth, ,, xx2, -, xx1, ,, dataArea, ., getMaxY, (]
[;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }, g2, ., setPaintMode, (, ), ;]
[,, yy, +, outlineStrokeWidth, ,, xx2, -, xx1, ,, dataArea, ., getMaxY, (, ), -, yy, -, outlineStrokeWidth, ), ;]
[,, xx2, -, xx1, ,, dataArea, ., getMaxY, (, ), -, yy, -, outlineStrokeWidth, ), ;, g2, ., fill, (]
[+, outlineStrokeWidth, ,, xx2, -, xx1, ,, dataArea, ., getMaxY, (, ), -, yy, -, outlineStrokeWidth, ), ;, g2, .]
[,, xx2, -, xx1, ,, dataArea, ., getMaxY, (, ), -, yy, -, outlineStrokeWidth, ), ;, g2, ., fill, (]
[,, dataArea, ., getMaxY, (, ), -, yy, -, outlineStrokeWidth, ), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark]
[-, xx1, ,, dataArea, ., getMaxY, (, ), -, yy, -, outlineStrokeWidth, ), ;, g2, ., fill, (, band, )]
[,, dataArea, ., getMaxY, (, ), -, yy, -, outlineStrokeWidth, ), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark]
[), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }, g2, ., setPaintMode, (, )]
[-, outlineStrokeWidth, ), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }, g2, ., setPaintMode]
[-, yy, -, outlineStrokeWidth, ), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }, g2]
[., getMaxY, (, ), -, yy, -, outlineStrokeWidth, ), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !]
[-, outlineStrokeWidth, ), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }, g2, ., setPaintMode]
[), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }, g2, ., setPaintMode, (, )]
[;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }, g2, ., setPaintMode, (, ), ;, }, protected, void, drawGridBandsVertical, (, Graphics2D, g2]
[., fill, (, band, ), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }, g2, ., setPaintMode, (, ), ;, }, protected]
[), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }, g2, ., setPaintMode, (, ), ;, }, protected, void, drawGridBandsVertical, (, Graphics2D]
[=, !, currentGridBandIsDark, ;, }, g2, ., setPaintMode, (, ), ;, }, protected, void, drawGridBandsVertical, (, Graphics2D, g2, ,, Rectangle2D]
[;, }, g2, ., setPaintMode, (, ), ;, }, protected, void, drawGridBandsVertical, (, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, Rectangle2D]
[;, }, g2, ., setPaintMode, (, ), ;, }, protected, void, drawGridBandsVertical, (, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, Rectangle2D]
[;, }, protected, void, drawGridBandsVertical, (, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, Rectangle2D, plotArea, ,, boolean, firstGridBandIsDark, ,, List, ticks]
[., setPaintMode, (, ), ;, }, protected, void, drawGridBandsVertical, (, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, Rectangle2D, plotArea, ,, boolean]
[;, double, xx, =, plotArea, ., getX, (, ), ;, double, yy1, ,, yy2, ;, double, outlineStrokeWidth, ;, Stroke, outlineStroke]
[;, double, yy1, ,, yy2, ;, double, outlineStrokeWidth, ;, Stroke, outlineStroke, =, getPlot, (, ), ., getOutlineStroke, (, ), ;]
[., getX, (, ), ;, double, yy1, ,, yy2, ;, double, outlineStrokeWidth, ;, Stroke, outlineStroke, =, getPlot, (, ), .]
[;, if, (, outlineStroke, !=, null, &&, outlineStroke, instanceof, BasicStroke, ), {, outlineStrokeWidth, =, (, (, BasicStroke, ), outlineStroke, )]
[., getOutlineStroke, (, ), ;, if, (, outlineStroke, !=, null, &&, outlineStroke, instanceof, BasicStroke, ), {, outlineStrokeWidth, =, (, (]
[), {, outlineStrokeWidth, =, (, (, BasicStroke, ), outlineStroke, ), ., getLineWidth, (, ), ;, }, else, {, outlineStrokeWidth, =]
[&&, outlineStroke, instanceof, BasicStroke, ), {, outlineStrokeWidth, =, (, (, BasicStroke, ), outlineStroke, ), ., getLineWidth, (, ), ;, }]
[!=, null, &&, outlineStroke, instanceof, BasicStroke, ), {, outlineStrokeWidth, =, (, (, BasicStroke, ), outlineStroke, ), ., getLineWidth, (, )]
[&&, outlineStroke, instanceof, BasicStroke, ), {, outlineStrokeWidth, =, (, (, BasicStroke, ), outlineStroke, ), ., getLineWidth, (, ), ;, }]
[), {, outlineStrokeWidth, =, (, (, BasicStroke, ), outlineStroke, ), ., getLineWidth, (, ), ;, }, else, {, outlineStrokeWidth, =]
[instanceof, BasicStroke, ), {, outlineStrokeWidth, =, (, (, BasicStroke, ), outlineStroke, ), ., getLineWidth, (, ), ;, }, else, {]
[=, (, (, BasicStroke, ), outlineStroke, ), ., getLineWidth, (, ), ;, }, else, {, outlineStrokeWidth, =, 1d, ;, }]
[;, }, else, {, outlineStrokeWidth, =, 1d, ;, }, Iterator, iterator, =, ticks, ., iterator, (, ), ;, ValueTick, tick]
[., getLineWidth, (, ), ;, }, else, {, outlineStrokeWidth, =, 1d, ;, }, Iterator, iterator, =, ticks, ., iterator, (]
[), ., getLineWidth, (, ), ;, }, else, {, outlineStrokeWidth, =, 1d, ;, }, Iterator, iterator, =, ticks, ., iterator]
[), ., getLineWidth, (, ), ;, }, else, {, outlineStrokeWidth, =, 1d, ;, }, Iterator, iterator, =, ticks, ., iterator]
[=, 1d, ;, }, Iterator, iterator, =, ticks, ., iterator, (, ), ;, ValueTick, tick, ;, Rectangle2D, band, ;, while]
[;, }, Iterator, iterator, =, ticks, ., iterator, (, ), ;, ValueTick, tick, ;, Rectangle2D, band, ;, while, (, iterator]
[;, ValueTick, tick, ;, Rectangle2D, band, ;, while, (, iterator, ., hasNext, (, ), ), {, tick, =, (, ValueTick]
[., iterator, (, ), ;, ValueTick, tick, ;, Rectangle2D, band, ;, while, (, iterator, ., hasNext, (, ), ), {]
[), {, tick, =, (, ValueTick, ), iterator, ., next, (, ), ;, yy1, =, valueToJava2D, (, tick, ., getValue]
[., hasNext, (, ), ), {, tick, =, (, ValueTick, ), iterator, ., next, (, ), ;, yy1, =, valueToJava2D]
[=, (, ValueTick, ), iterator, ., next, (, ), ;, yy1, =, valueToJava2D, (, tick, ., getValue, (, ), +]
[;, yy1, =, valueToJava2D, (, tick, ., getValue, (, ), +, 0.5d, ,, plotArea, ,, RectangleEdge, ., LEFT, ), ;]
[;, yy1, =, valueToJava2D, (, tick, ., getValue, (, ), +, 0.5d, ,, plotArea, ,, RectangleEdge, ., LEFT, ), ;]
[., next, (, ), ;, yy1, =, valueToJava2D, (, tick, ., getValue, (, ), +, 0.5d, ,, plotArea, ,, RectangleEdge]
[=, valueToJava2D, (, tick, ., getValue, (, ), +, 0.5d, ,, plotArea, ,, RectangleEdge, ., LEFT, ), ;, yy2, =]
[;, yy2, =, valueToJava2D, (, tick, ., getValue, (, ), -, 0.5d, ,, plotArea, ,, RectangleEdge, ., LEFT, ), ;]
[,, plotArea, ,, RectangleEdge, ., LEFT, ), ;, yy2, =, valueToJava2D, (, tick, ., getValue, (, ), -, 0.5d, ,]
[+, 0.5d, ,, plotArea, ,, RectangleEdge, ., LEFT, ), ;, yy2, =, valueToJava2D, (, tick, ., getValue, (, ), -]
[., getValue, (, ), +, 0.5d, ,, plotArea, ,, RectangleEdge, ., LEFT, ), ;, yy2, =, valueToJava2D, (, tick, .]
[,, plotArea, ,, RectangleEdge, ., LEFT, ), ;, yy2, =, valueToJava2D, (, tick, ., getValue, (, ), -, 0.5d, ,]
[,, RectangleEdge, ., LEFT, ), ;, yy2, =, valueToJava2D, (, tick, ., getValue, (, ), -, 0.5d, ,, plotArea, ,]
[), ;, yy2, =, valueToJava2D, (, tick, ., getValue, (, ), -, 0.5d, ,, plotArea, ,, RectangleEdge, ., LEFT, )]
[., LEFT, ), ;, yy2, =, valueToJava2D, (, tick, ., getValue, (, ), -, 0.5d, ,, plotArea, ,, RectangleEdge, .]
[=, valueToJava2D, (, tick, ., getValue, (, ), -, 0.5d, ,, plotArea, ,, RectangleEdge, ., LEFT, ), ;, if, (]
[;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (, this, ., gridBandPaint, ), ;, }, else, {, g2, .]
[,, plotArea, ,, RectangleEdge, ., LEFT, ), ;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (, this, ., gridBandPaint]
[-, 0.5d, ,, plotArea, ,, RectangleEdge, ., LEFT, ), ;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (, this]
[., getValue, (, ), -, 0.5d, ,, plotArea, ,, RectangleEdge, ., LEFT, ), ;, if, (, currentGridBandIsDark, ), {, g2]
[,, plotArea, ,, RectangleEdge, ., LEFT, ), ;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (, this, ., gridBandPaint]
[,, RectangleEdge, ., LEFT, ), ;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (, this, ., gridBandPaint, ), ;]
[), ;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (, this, ., gridBandPaint, ), ;, }, else, {, g2]
[., LEFT, ), ;, if, (, currentGridBandIsDark, ), {, g2, ., setPaint, (, this, ., gridBandPaint, ), ;, }, else]
[), {, g2, ., setPaint, (, this, ., gridBandPaint, ), ;, }, else, {, g2, ., setPaint, (, this, .]
[;, }, else, {, g2, ., setPaint, (, this, ., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, ., Double]
[., setPaint, (, this, ., gridBandPaint, ), ;, }, else, {, g2, ., setPaint, (, this, ., gridBandAlternatePaint, ), ;]
[), ;, }, else, {, g2, ., setPaint, (, this, ., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, .]
[., gridBandPaint, ), ;, }, else, {, g2, ., setPaint, (, this, ., gridBandAlternatePaint, ), ;, }, band, =, new]
[;, }, band, =, new, Rectangle2D, ., Double, (, xx, +, outlineStrokeWidth, ,, yy1, ,, plotArea, ., getMaxX, (, )]
[., setPaint, (, this, ., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, ., Double, (, xx, +, outlineStrokeWidth, ,]
[), ;, }, band, =, new, Rectangle2D, ., Double, (, xx, +, outlineStrokeWidth, ,, yy1, ,, plotArea, ., getMaxX, (]
[., gridBandAlternatePaint, ), ;, }, band, =, new, Rectangle2D, ., Double, (, xx, +, outlineStrokeWidth, ,, yy1, ,, plotArea, .]
[=, new, Rectangle2D, ., Double, (, xx, +, outlineStrokeWidth, ,, yy1, ,, plotArea, ., getMaxX, (, ), -, xx, -]
[;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }, g2, ., setPaintMode, (, ), ;]
[,, yy1, ,, plotArea, ., getMaxX, (, ), -, xx, -, outlineStrokeWidth, ,, yy2, -, yy1, ), ;, g2, .]
[+, outlineStrokeWidth, ,, yy1, ,, plotArea, ., getMaxX, (, ), -, xx, -, outlineStrokeWidth, ,, yy2, -, yy1, ), ;]
[,, yy1, ,, plotArea, ., getMaxX, (, ), -, xx, -, outlineStrokeWidth, ,, yy2, -, yy1, ), ;, g2, .]
[,, plotArea, ., getMaxX, (, ), -, xx, -, outlineStrokeWidth, ,, yy2, -, yy1, ), ;, g2, ., fill, (]
[,, yy2, -, yy1, ), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }, g2]
[-, outlineStrokeWidth, ,, yy2, -, yy1, ), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;]
[-, xx, -, outlineStrokeWidth, ,, yy2, -, yy1, ), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !]
[., getMaxX, (, ), -, xx, -, outlineStrokeWidth, ,, yy2, -, yy1, ), ;, g2, ., fill, (, band, )]
[-, outlineStrokeWidth, ,, yy2, -, yy1, ), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;]
[,, yy2, -, yy1, ), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }, g2]
[), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }, g2, ., setPaintMode, (, )]
[-, yy1, ), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }, g2, ., setPaintMode]
[), ;, g2, ., fill, (, band, ), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }, g2, ., setPaintMode, (, )]
[;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }, g2, ., setPaintMode, (, ), ;, }, protected, void, autoAdjustRange, (, ), {]
[., fill, (, band, ), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }, g2, ., setPaintMode, (, ), ;, }, protected]
[), ;, currentGridBandIsDark, =, !, currentGridBandIsDark, ;, }, g2, ., setPaintMode, (, ), ;, }, protected, void, autoAdjustRange, (, )]
[=, !, currentGridBandIsDark, ;, }, g2, ., setPaintMode, (, ), ;, }, protected, void, autoAdjustRange, (, ), {, Plot, plot]
[;, }, g2, ., setPaintMode, (, ), ;, }, protected, void, autoAdjustRange, (, ), {, Plot, plot, =, getPlot, (]
[;, }, g2, ., setPaintMode, (, ), ;, }, protected, void, autoAdjustRange, (, ), {, Plot, plot, =, getPlot, (]
[;, }, protected, void, autoAdjustRange, (, ), {, Plot, plot, =, getPlot, (, ), ;, if, (, plot, ==, null]
[., setPaintMode, (, ), ;, }, protected, void, autoAdjustRange, (, ), {, Plot, plot, =, getPlot, (, ), ;, if]
[;, if, (, plot, ==, null, ), {, return, ;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, double, upper]
[), {, return, ;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, double, upper, =, this, ., symbols, ., size]
[==, null, ), {, return, ;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, double, upper, =, this, ., symbols]
[), {, return, ;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, double, upper, =, this, ., symbols, ., size]
[), {, double, upper, =, this, ., symbols, ., size, (, ), -, 1, ;, double, lower, =, 0, ;]
[instanceof, ValueAxisPlot, ), {, double, upper, =, this, ., symbols, ., size, (, ), -, 1, ;, double, lower, =]
[;, double, lower, =, 0, ;, double, range, =, upper, -, lower, ;, double, minRange, =, getAutoRangeMinimumSize, (, ), ;]
[-, 1, ;, double, lower, =, 0, ;, double, range, =, upper, -, lower, ;, double, minRange, =, getAutoRangeMinimumSize, (]
[., size, (, ), -, 1, ;, double, lower, =, 0, ;, double, range, =, upper, -, lower, ;, double]
[., symbols, ., size, (, ), -, 1, ;, double, lower, =, 0, ;, double, range, =, upper, -, lower]
[;, double, lower, =, 0, ;, double, range, =, upper, -, lower, ;, double, minRange, =, getAutoRangeMinimumSize, (, ), ;]
[;, double, range, =, upper, -, lower, ;, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <, minRange]
[;, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <, minRange, ), {, upper, =, (, upper, +]
[-, lower, ;, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <, minRange, ), {, upper, =, (]
[;, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <, minRange, ), {, upper, =, (, upper, +]
[;, if, (, range, <, minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;]
[), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =, (, upper, +, lower]
[<, minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =, (, upper]
[), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =, (, upper, +, lower]
[=, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =, (, upper, +, lower, -, minRange, )]
[;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;, }, double, upperMargin, =, 0.5, ;, double]
[/, 2, ;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;, }, double, upperMargin, =, 0.5]
[), /, 2, ;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;, }, double, upperMargin, =]
[+, minRange, ), /, 2, ;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;, }, double]
[+, lower, +, minRange, ), /, 2, ;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;]
[+, minRange, ), /, 2, ;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;, }, double]
[), /, 2, ;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;, }, double, upperMargin, =]
[;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;, }, double, upperMargin, =, 0.5, ;, double]
[=, (, upper, +, lower, -, minRange, ), /, 2, ;, }, double, upperMargin, =, 0.5, ;, double, lowerMargin, =]
[;, }, double, upperMargin, =, 0.5, ;, double, lowerMargin, =, 0.5, ;, if, (, getAutoRangeIncludesZero, (, ), ), {, if]
[/, 2, ;, }, double, upperMargin, =, 0.5, ;, double, lowerMargin, =, 0.5, ;, if, (, getAutoRangeIncludesZero, (, ), )]
[), /, 2, ;, }, double, upperMargin, =, 0.5, ;, double, lowerMargin, =, 0.5, ;, if, (, getAutoRangeIncludesZero, (, )]
[-, minRange, ), /, 2, ;, }, double, upperMargin, =, 0.5, ;, double, lowerMargin, =, 0.5, ;, if, (, getAutoRangeIncludesZero]
[+, lower, -, minRange, ), /, 2, ;, }, double, upperMargin, =, 0.5, ;, double, lowerMargin, =, 0.5, ;, if]
[-, minRange, ), /, 2, ;, }, double, upperMargin, =, 0.5, ;, double, lowerMargin, =, 0.5, ;, if, (, getAutoRangeIncludesZero]
[), /, 2, ;, }, double, upperMargin, =, 0.5, ;, double, lowerMargin, =, 0.5, ;, if, (, getAutoRangeIncludesZero, (, )]
[;, }, double, upperMargin, =, 0.5, ;, double, lowerMargin, =, 0.5, ;, if, (, getAutoRangeIncludesZero, (, ), ), {, if]
[;, double, lowerMargin, =, 0.5, ;, if, (, getAutoRangeIncludesZero, (, ), ), {, if, (, getAutoRangeStickyZero, (, ), ), {]
[;, if, (, getAutoRangeIncludesZero, (, ), ), {, if, (, getAutoRangeStickyZero, (, ), ), {, if, (, upper, <=, 0.0]
[), {, if, (, getAutoRangeStickyZero, (, ), ), {, if, (, upper, <=, 0.0, ), {, upper, =, 0.0, ;]
[), {, if, (, upper, <=, 0.0, ), {, upper, =, 0.0, ;, }, else, {, upper, =, upper, +]
[), {, upper, =, 0.0, ;, }, else, {, upper, =, upper, +, upperMargin, ;, }, if, (, lower, >=]
[<=, 0.0, ), {, upper, =, 0.0, ;, }, else, {, upper, =, upper, +, upperMargin, ;, }, if, (]
[), {, upper, =, 0.0, ;, }, else, {, upper, =, upper, +, upperMargin, ;, }, if, (, lower, >=]
[=, 0.0, ;, }, else, {, upper, =, upper, +, upperMargin, ;, }, if, (, lower, >=, 0.0, ), {]
[;, }, else, {, upper, =, upper, +, upperMargin, ;, }, if, (, lower, >=, 0.0, ), {, lower, =]
[=, upper, +, upperMargin, ;, }, if, (, lower, >=, 0.0, ), {, lower, =, 0.0, ;, }, else, {]
[;, }, if, (, lower, >=, 0.0, ), {, lower, =, 0.0, ;, }, else, {, lower, =, lower, -]
[+, upperMargin, ;, }, if, (, lower, >=, 0.0, ), {, lower, =, 0.0, ;, }, else, {, lower, =]
[;, }, if, (, lower, >=, 0.0, ), {, lower, =, 0.0, ;, }, else, {, lower, =, lower, -]
[), {, lower, =, 0.0, ;, }, else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper]
[>=, 0.0, ), {, lower, =, 0.0, ;, }, else, {, lower, =, lower, -, lowerMargin, ;, }, }, else]
[), {, lower, =, 0.0, ;, }, else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper]
[=, 0.0, ;, }, else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper, =, Math, .]
[;, }, else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper, =, Math, ., max, (]
[=, lower, -, lowerMargin, ;, }, }, else, {, upper, =, Math, ., max, (, 0.0, ,, upper, +, upperMargin]
[;, }, }, else, {, upper, =, Math, ., max, (, 0.0, ,, upper, +, upperMargin, ), ;, lower, =]
[-, lowerMargin, ;, }, }, else, {, upper, =, Math, ., max, (, 0.0, ,, upper, +, upperMargin, ), ;]
[;, }, }, else, {, upper, =, Math, ., max, (, 0.0, ,, upper, +, upperMargin, ), ;, lower, =]
[=, Math, ., max, (, 0.0, ,, upper, +, upperMargin, ), ;, lower, =, Math, ., min, (, 0.0, ,]
[;, lower, =, Math, ., min, (, 0.0, ,, lower, -, lowerMargin, ), ;, }, }, else, {, if, (]
[., max, (, 0.0, ,, upper, +, upperMargin, ), ;, lower, =, Math, ., min, (, 0.0, ,, lower, -]
[,, upper, +, upperMargin, ), ;, lower, =, Math, ., min, (, 0.0, ,, lower, -, lowerMargin, ), ;, }]
[), ;, lower, =, Math, ., min, (, 0.0, ,, lower, -, lowerMargin, ), ;, }, }, else, {, if]
[+, upperMargin, ), ;, lower, =, Math, ., min, (, 0.0, ,, lower, -, lowerMargin, ), ;, }, }, else]
[), ;, lower, =, Math, ., min, (, 0.0, ,, lower, -, lowerMargin, ), ;, }, }, else, {, if]
[=, Math, ., min, (, 0.0, ,, lower, -, lowerMargin, ), ;, }, }, else, {, if, (, getAutoRangeStickyZero, (]
[;, }, }, else, {, if, (, getAutoRangeStickyZero, (, ), ), {, if, (, upper, <=, 0.0, ), {, upper]
[., min, (, 0.0, ,, lower, -, lowerMargin, ), ;, }, }, else, {, if, (, getAutoRangeStickyZero, (, ), )]
[,, lower, -, lowerMargin, ), ;, }, }, else, {, if, (, getAutoRangeStickyZero, (, ), ), {, if, (, upper]
[), ;, }, }, else, {, if, (, getAutoRangeStickyZero, (, ), ), {, if, (, upper, <=, 0.0, ), {]
[-, lowerMargin, ), ;, }, }, else, {, if, (, getAutoRangeStickyZero, (, ), ), {, if, (, upper, <=, 0.0]
[), ;, }, }, else, {, if, (, getAutoRangeStickyZero, (, ), ), {, if, (, upper, <=, 0.0, ), {]
[), {, if, (, upper, <=, 0.0, ), {, upper, =, Math, ., min, (, 0.0, ,, upper, +, upperMargin]
[), {, upper, =, Math, ., min, (, 0.0, ,, upper, +, upperMargin, ), ;, }, else, {, upper, =]
[<=, 0.0, ), {, upper, =, Math, ., min, (, 0.0, ,, upper, +, upperMargin, ), ;, }, else, {]
[), {, upper, =, Math, ., min, (, 0.0, ,, upper, +, upperMargin, ), ;, }, else, {, upper, =]
[=, Math, ., min, (, 0.0, ,, upper, +, upperMargin, ), ;, }, else, {, upper, =, upper, +, upperMargin]
[;, }, else, {, upper, =, upper, +, upperMargin, *, range, ;, }, if, (, lower, >=, 0.0, ), {]
[., min, (, 0.0, ,, upper, +, upperMargin, ), ;, }, else, {, upper, =, upper, +, upperMargin, *, range]
[,, upper, +, upperMargin, ), ;, }, else, {, upper, =, upper, +, upperMargin, *, range, ;, }, if, (]
[), ;, }, else, {, upper, =, upper, +, upperMargin, *, range, ;, }, if, (, lower, >=, 0.0, )]
[+, upperMargin, ), ;, }, else, {, upper, =, upper, +, upperMargin, *, range, ;, }, if, (, lower, >=]
[), ;, }, else, {, upper, =, upper, +, upperMargin, *, range, ;, }, if, (, lower, >=, 0.0, )]
[=, upper, +, upperMargin, *, range, ;, }, if, (, lower, >=, 0.0, ), {, lower, =, Math, ., max]
[;, }, if, (, lower, >=, 0.0, ), {, lower, =, Math, ., max, (, 0.0, ,, lower, -, lowerMargin]
[+, upperMargin, *, range, ;, }, if, (, lower, >=, 0.0, ), {, lower, =, Math, ., max, (, 0.0]
[;, }, if, (, lower, >=, 0.0, ), {, lower, =, Math, ., max, (, 0.0, ,, lower, -, lowerMargin]
[*, range, ;, }, if, (, lower, >=, 0.0, ), {, lower, =, Math, ., max, (, 0.0, ,, lower]
[;, }, if, (, lower, >=, 0.0, ), {, lower, =, Math, ., max, (, 0.0, ,, lower, -, lowerMargin]
[), {, lower, =, Math, ., max, (, 0.0, ,, lower, -, lowerMargin, ), ;, }, else, {, lower, =]
[>=, 0.0, ), {, lower, =, Math, ., max, (, 0.0, ,, lower, -, lowerMargin, ), ;, }, else, {]
[), {, lower, =, Math, ., max, (, 0.0, ,, lower, -, lowerMargin, ), ;, }, else, {, lower, =]
[=, Math, ., max, (, 0.0, ,, lower, -, lowerMargin, ), ;, }, else, {, lower, =, lower, -, lowerMargin]
[;, }, else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper, =, upper, +, upperMargin, ;]
[., max, (, 0.0, ,, lower, -, lowerMargin, ), ;, }, else, {, lower, =, lower, -, lowerMargin, ;, }]
[,, lower, -, lowerMargin, ), ;, }, else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper]
[), ;, }, else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper, =, upper, +, upperMargin]
[-, lowerMargin, ), ;, }, else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper, =, upper]
[), ;, }, else, {, lower, =, lower, -, lowerMargin, ;, }, }, else, {, upper, =, upper, +, upperMargin]
[=, lower, -, lowerMargin, ;, }, }, else, {, upper, =, upper, +, upperMargin, ;, lower, =, lower, -, lowerMargin]
[;, }, }, else, {, upper, =, upper, +, upperMargin, ;, lower, =, lower, -, lowerMargin, ;, }, }, setRange]
[-, lowerMargin, ;, }, }, else, {, upper, =, upper, +, upperMargin, ;, lower, =, lower, -, lowerMargin, ;, }]
[;, }, }, else, {, upper, =, upper, +, upperMargin, ;, lower, =, lower, -, lowerMargin, ;, }, }, setRange]
[=, upper, +, upperMargin, ;, lower, =, lower, -, lowerMargin, ;, }, }, setRange, (, new, Range, (, lower, ,]
[;, lower, =, lower, -, lowerMargin, ;, }, }, setRange, (, new, Range, (, lower, ,, upper, ), ,, false]
[+, upperMargin, ;, lower, =, lower, -, lowerMargin, ;, }, }, setRange, (, new, Range, (, lower, ,, upper, )]
[;, lower, =, lower, -, lowerMargin, ;, }, }, setRange, (, new, Range, (, lower, ,, upper, ), ,, false]
[=, lower, -, lowerMargin, ;, }, }, setRange, (, new, Range, (, lower, ,, upper, ), ,, false, ,, false]
[;, }, }, setRange, (, new, Range, (, lower, ,, upper, ), ,, false, ,, false, ), ;, }, }]
[-, lowerMargin, ;, }, }, setRange, (, new, Range, (, lower, ,, upper, ), ,, false, ,, false, ), ;]
[;, }, }, setRange, (, new, Range, (, lower, ,, upper, ), ,, false, ,, false, ), ;, }, }]
[;, }, }, public, List, refreshTicks, (, Graphics2D, g2, ,, AxisState, state, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {]
[,, false, ,, false, ), ;, }, }, public, List, refreshTicks, (, Graphics2D, g2, ,, AxisState, state, ,, Rectangle2D, dataArea]
[,, upper, ), ,, false, ,, false, ), ;, }, }, public, List, refreshTicks, (, Graphics2D, g2, ,, AxisState, state]
[), ,, false, ,, false, ), ;, }, }, public, List, refreshTicks, (, Graphics2D, g2, ,, AxisState, state, ,, Rectangle2D]
[,, false, ), ;, }, }, public, List, refreshTicks, (, Graphics2D, g2, ,, AxisState, state, ,, Rectangle2D, dataArea, ,, RectangleEdge]
[), ;, }, }, public, List, refreshTicks, (, Graphics2D, g2, ,, AxisState, state, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, )]
[;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, ticks, =, refreshTicksHorizontal, (, g2, ,, dataArea, ,, edge]
[), {, ticks, =, refreshTicksHorizontal, (, g2, ,, dataArea, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight]
[., isTopOrBottom, (, edge, ), ), {, ticks, =, refreshTicksHorizontal, (, g2, ,, dataArea, ,, edge, ), ;, }, else]
[), ), {, ticks, =, refreshTicksHorizontal, (, g2, ,, dataArea, ,, edge, ), ;, }, else, if, (, RectangleEdge, .]
[=, refreshTicksHorizontal, (, g2, ,, dataArea, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, )]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, ticks, =, refreshTicksVertical, (, g2, ,, dataArea]
[,, dataArea, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, ticks, =]
[,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, ticks, =, refreshTicksVertical, (]
[), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, ticks, =, refreshTicksVertical, (, g2, ,]
[), {, ticks, =, refreshTicksVertical, (, g2, ,, dataArea, ,, edge, ), ;, }, return, ticks, ;, }, protected, List]
[., isLeftOrRight, (, edge, ), ), {, ticks, =, refreshTicksVertical, (, g2, ,, dataArea, ,, edge, ), ;, }, return]
[), ), {, ticks, =, refreshTicksVertical, (, g2, ,, dataArea, ,, edge, ), ;, }, return, ticks, ;, }, protected]
[=, refreshTicksVertical, (, g2, ,, dataArea, ,, edge, ), ;, }, return, ticks, ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D]
[;, }, return, ticks, ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {]
[,, dataArea, ,, edge, ), ;, }, return, ticks, ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea]
[,, edge, ), ;, }, return, ticks, ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge]
[), ;, }, return, ticks, ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, )]
[;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, ticks, =, new]
[;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, double, size, =, getTickUnit, (]
[;, g2, ., setFont, (, tickLabelFont, ), ;, double, size, =, getTickUnit, (, ), ., getSize, (, ), ;, int]
[;, double, size, =, getTickUnit, (, ), ., getSize, (, ), ;, int, count, =, calculateVisibleTickCount, (, ), ;, double]
[., setFont, (, tickLabelFont, ), ;, double, size, =, getTickUnit, (, ), ., getSize, (, ), ;, int, count, =]
[), ;, double, size, =, getTickUnit, (, ), ., getSize, (, ), ;, int, count, =, calculateVisibleTickCount, (, ), ;]
[;, int, count, =, calculateVisibleTickCount, (, ), ;, double, lowestTickValue, =, calculateLowestVisibleTickValue, (, ), ;, double, previousDrawnTickLabelPos, =, 0.0, ;]
[., getSize, (, ), ;, int, count, =, calculateVisibleTickCount, (, ), ;, double, lowestTickValue, =, calculateLowestVisibleTickValue, (, ), ;, double]
[;, double, lowestTickValue, =, calculateLowestVisibleTickValue, (, ), ;, double, previousDrawnTickLabelPos, =, 0.0, ;, double, previousDrawnTickLabelLength, =, 0.0, ;, if, (]
[;, double, previousDrawnTickLabelPos, =, 0.0, ;, double, previousDrawnTickLabelLength, =, 0.0, ;, if, (, count, <=, ValueAxis, ., MAXIMUM_TICK_COUNT, ), {]
[;, double, previousDrawnTickLabelLength, =, 0.0, ;, if, (, count, <=, ValueAxis, ., MAXIMUM_TICK_COUNT, ), {, for, (, int, i, =]
[;, if, (, count, <=, ValueAxis, ., MAXIMUM_TICK_COUNT, ), {, for, (, int, i, =, 0, ;, i, <, count]
[), {, for, (, int, i, =, 0, ;, i, <, count, ;, i, ++, ), {, double, currentTickValue, =]
[<=, ValueAxis, ., MAXIMUM_TICK_COUNT, ), {, for, (, int, i, =, 0, ;, i, <, count, ;, i, ++, )]
[), {, for, (, int, i, =, 0, ;, i, <, count, ;, i, ++, ), {, double, currentTickValue, =]
[., MAXIMUM_TICK_COUNT, ), {, for, (, int, i, =, 0, ;, i, <, count, ;, i, ++, ), {, double]
[;, i, <, count, ;, i, ++, ), {, double, currentTickValue, =, lowestTickValue, +, (, i, *, size, ), ;]
[;, i, ++, ), {, double, currentTickValue, =, lowestTickValue, +, (, i, *, size, ), ;, double, xx, =, valueToJava2D]
[<, count, ;, i, ++, ), {, double, currentTickValue, =, lowestTickValue, +, (, i, *, size, ), ;, double, xx]
[;, i, ++, ), {, double, currentTickValue, =, lowestTickValue, +, (, i, *, size, ), ;, double, xx, =, valueToJava2D]
[), {, double, currentTickValue, =, lowestTickValue, +, (, i, *, size, ), ;, double, xx, =, valueToJava2D, (, currentTickValue, ,]
[++, ), {, double, currentTickValue, =, lowestTickValue, +, (, i, *, size, ), ;, double, xx, =, valueToJava2D, (, currentTickValue]
[;, double, xx, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride]
[+, (, i, *, size, ), ;, double, xx, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String]
[;, double, xx, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride]
[), ;, double, xx, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =]
[*, size, ), ;, double, xx, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat]
[), ;, double, xx, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =]
[;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, tickLabel, =]
[,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=]
[,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, )]
[), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, tickLabel]
[;, if, (, formatter, !=, null, ), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {]
[), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, valueToString, (, currentTickValue, )]
[!=, null, ), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, valueToString, (]
[), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, valueToString, (, currentTickValue, )]
[=, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, valueToString, (, currentTickValue, ), ;, }, Rectangle2D]
[;, }, else, {, tickLabel, =, valueToString, (, currentTickValue, ), ;, }, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, tickLabel]
[., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, valueToString, (, currentTickValue, ), ;, }, Rectangle2D, bounds, =]
[), ;, }, else, {, tickLabel, =, valueToString, (, currentTickValue, ), ;, }, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (]
[=, valueToString, (, currentTickValue, ), ;, }, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,, g2, ,, g2, .]
[;, }, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,, g2, ,, g2, ., getFontMetrics, (, ), ), ;]
[), ;, }, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,, g2, ,, g2, ., getFontMetrics, (, ), )]
[;, double, tickLabelLength, =, isVerticalTickLabels, (, ), ?, bounds, ., getHeight, (, ), :, bounds, ., getWidth, (, ), ;]
[., getTextBounds, (, tickLabel, ,, g2, ,, g2, ., getFontMetrics, (, ), ), ;, double, tickLabelLength, =, isVerticalTickLabels, (, )]
[,, g2, ,, g2, ., getFontMetrics, (, ), ), ;, double, tickLabelLength, =, isVerticalTickLabels, (, ), ?, bounds, ., getHeight]
[,, g2, ., getFontMetrics, (, ), ), ;, double, tickLabelLength, =, isVerticalTickLabels, (, ), ?, bounds, ., getHeight, (, )]
[), ;, double, tickLabelLength, =, isVerticalTickLabels, (, ), ?, bounds, ., getHeight, (, ), :, bounds, ., getWidth, (, )]
[., getFontMetrics, (, ), ), ;, double, tickLabelLength, =, isVerticalTickLabels, (, ), ?, bounds, ., getHeight, (, ), :, bounds]
[;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >, 0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength]
[?, bounds, ., getHeight, (, ), :, bounds, ., getWidth, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (]
[:, bounds, ., getWidth, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >, 0, ), {, double]
[., getHeight, (, ), :, bounds, ., getWidth, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >]
[;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >, 0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength]
[., getWidth, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >, 0, ), {, double, avgTickLabelLength, =]
[;, if, (, i, >, 0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if]
[), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if, (, Math, ., abs, (, xx]
[>, 0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if, (, Math, ., abs]
[), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if, (, Math, ., abs, (, xx]
[;, if, (, Math, ., abs, (, xx, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true, ;, }]
[/, 2.0, ;, if, (, Math, ., abs, (, xx, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true]
[), /, 2.0, ;, if, (, Math, ., abs, (, xx, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =]
[+, tickLabelLength, ), /, 2.0, ;, if, (, Math, ., abs, (, xx, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {]
[), /, 2.0, ;, if, (, Math, ., abs, (, xx, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =]
[;, if, (, Math, ., abs, (, xx, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true, ;, }]
[), {, tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;, }, else, {]
[<, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;, }]
[., abs, (, xx, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping]
[), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;]
[-, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =]
[), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;]
[), {, tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;, }, else, {]
[=, true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;, }, else, {, previousDrawnTickLabelPos, =, xx]
[;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;, }, else, {, previousDrawnTickLabelPos, =, xx, ;, previousDrawnTickLabelLength]
[), {, tickLabel, =, "", ;, }, else, {, previousDrawnTickLabelPos, =, xx, ;, previousDrawnTickLabelLength, =, tickLabelLength, ;, }, TextAnchor, anchor]
[=, "", ;, }, else, {, previousDrawnTickLabelPos, =, xx, ;, previousDrawnTickLabelLength, =, tickLabelLength, ;, }, TextAnchor, anchor, =, null, ;]
[;, }, else, {, previousDrawnTickLabelPos, =, xx, ;, previousDrawnTickLabelLength, =, tickLabelLength, ;, }, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor]
[=, xx, ;, previousDrawnTickLabelLength, =, tickLabelLength, ;, }, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle]
[;, previousDrawnTickLabelLength, =, tickLabelLength, ;, }, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0]
[=, tickLabelLength, ;, }, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if]
[;, }, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels]
[;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =]
[;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor]
[;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;]
[), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, .]
[=, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math, .]
[., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =]
[=, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /]
[;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else]
[., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;]
[), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -, Math, ., PI, /]
[==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -]
[), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -, Math, ., PI, /]
[., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -, Math, .]
[=, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }]
[;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge]
[/, 2.0, ;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, }, else, {, if]
[., PI, /, 2.0, ;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, }, else]
[;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge]
[=, -, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, )]
[;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;]
[/, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, .]
[/, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, .]
[., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =]
[;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;]
[), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =, TextAnchor]
[==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else]
[), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =, TextAnchor]
[., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor]
[=, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;]
[;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, rotationAnchor, =, TextAnchor, .]
[., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, rotationAnchor, =]
[=, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, rotationAnchor, =, TextAnchor, ., TOP_CENTER, ;]
[;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, rotationAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, }, Tick, tick]
[., BOTTOM_CENTER, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, rotationAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, }]
[=, TextAnchor, ., TOP_CENTER, ;, rotationAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, }, Tick, tick, =, new, NumberTick, (, new]
[;, rotationAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, )]
[., TOP_CENTER, ;, rotationAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (]
[=, TextAnchor, ., TOP_CENTER, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel]
[;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor]
[., TOP_CENTER, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor]
[;, ticks, ., add, (, tick, ), ;, }, }, return, ticks, ;, }, protected, List, refreshTicksVertical, (, Graphics2D, g2]
[,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, ticks, ., add, (, tick, ), ;, }, }, return]
[), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, ticks, ., add, (, tick, ), ;, }, }]
[,, anchor, ,, rotationAnchor, ,, angle, ), ;, ticks, ., add, (, tick, ), ;, }, }, return, ticks, ;]
[,, rotationAnchor, ,, angle, ), ;, ticks, ., add, (, tick, ), ;, }, }, return, ticks, ;, }, protected]
[,, angle, ), ;, ticks, ., add, (, tick, ), ;, }, }, return, ticks, ;, }, protected, List, refreshTicksVertical]
[), ;, ticks, ., add, (, tick, ), ;, }, }, return, ticks, ;, }, protected, List, refreshTicksVertical, (, Graphics2D]
[;, }, }, return, ticks, ;, }, protected, List, refreshTicksVertical, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, )]
[., add, (, tick, ), ;, }, }, return, ticks, ;, }, protected, List, refreshTicksVertical, (, Graphics2D, g2, ,, Rectangle2D]
[), ;, }, }, return, ticks, ;, }, protected, List, refreshTicksVertical, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge]
[;, }, protected, List, refreshTicksVertical, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, ticks, =, new]
[;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, double, size, =, getTickUnit, (]
[;, g2, ., setFont, (, tickLabelFont, ), ;, double, size, =, getTickUnit, (, ), ., getSize, (, ), ;, int]
[;, double, size, =, getTickUnit, (, ), ., getSize, (, ), ;, int, count, =, calculateVisibleTickCount, (, ), ;, double]
[., setFont, (, tickLabelFont, ), ;, double, size, =, getTickUnit, (, ), ., getSize, (, ), ;, int, count, =]
[), ;, double, size, =, getTickUnit, (, ), ., getSize, (, ), ;, int, count, =, calculateVisibleTickCount, (, ), ;]
[;, int, count, =, calculateVisibleTickCount, (, ), ;, double, lowestTickValue, =, calculateLowestVisibleTickValue, (, ), ;, double, previousDrawnTickLabelPos, =, 0.0, ;]
[., getSize, (, ), ;, int, count, =, calculateVisibleTickCount, (, ), ;, double, lowestTickValue, =, calculateLowestVisibleTickValue, (, ), ;, double]
[;, double, lowestTickValue, =, calculateLowestVisibleTickValue, (, ), ;, double, previousDrawnTickLabelPos, =, 0.0, ;, double, previousDrawnTickLabelLength, =, 0.0, ;, if, (]
[;, double, previousDrawnTickLabelPos, =, 0.0, ;, double, previousDrawnTickLabelLength, =, 0.0, ;, if, (, count, <=, ValueAxis, ., MAXIMUM_TICK_COUNT, ), {]
[;, double, previousDrawnTickLabelLength, =, 0.0, ;, if, (, count, <=, ValueAxis, ., MAXIMUM_TICK_COUNT, ), {, for, (, int, i, =]
[;, if, (, count, <=, ValueAxis, ., MAXIMUM_TICK_COUNT, ), {, for, (, int, i, =, 0, ;, i, <, count]
[), {, for, (, int, i, =, 0, ;, i, <, count, ;, i, ++, ), {, double, currentTickValue, =]
[<=, ValueAxis, ., MAXIMUM_TICK_COUNT, ), {, for, (, int, i, =, 0, ;, i, <, count, ;, i, ++, )]
[), {, for, (, int, i, =, 0, ;, i, <, count, ;, i, ++, ), {, double, currentTickValue, =]
[., MAXIMUM_TICK_COUNT, ), {, for, (, int, i, =, 0, ;, i, <, count, ;, i, ++, ), {, double]
[;, i, <, count, ;, i, ++, ), {, double, currentTickValue, =, lowestTickValue, +, (, i, *, size, ), ;]
[;, i, ++, ), {, double, currentTickValue, =, lowestTickValue, +, (, i, *, size, ), ;, double, yy, =, valueToJava2D]
[<, count, ;, i, ++, ), {, double, currentTickValue, =, lowestTickValue, +, (, i, *, size, ), ;, double, yy]
[;, i, ++, ), {, double, currentTickValue, =, lowestTickValue, +, (, i, *, size, ), ;, double, yy, =, valueToJava2D]
[), {, double, currentTickValue, =, lowestTickValue, +, (, i, *, size, ), ;, double, yy, =, valueToJava2D, (, currentTickValue, ,]
[++, ), {, double, currentTickValue, =, lowestTickValue, +, (, i, *, size, ), ;, double, yy, =, valueToJava2D, (, currentTickValue]
[;, double, yy, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride]
[+, (, i, *, size, ), ;, double, yy, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String]
[;, double, yy, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride]
[), ;, double, yy, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =]
[*, size, ), ;, double, yy, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat]
[), ;, double, yy, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =]
[;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, tickLabel, =]
[,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=]
[,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, )]
[), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, tickLabel]
[;, if, (, formatter, !=, null, ), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {]
[), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, valueToString, (, currentTickValue, )]
[!=, null, ), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, valueToString, (]
[), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, valueToString, (, currentTickValue, )]
[=, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, valueToString, (, currentTickValue, ), ;, }, Rectangle2D]
[;, }, else, {, tickLabel, =, valueToString, (, currentTickValue, ), ;, }, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, tickLabel]
[., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, valueToString, (, currentTickValue, ), ;, }, Rectangle2D, bounds, =]
[), ;, }, else, {, tickLabel, =, valueToString, (, currentTickValue, ), ;, }, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (]
[=, valueToString, (, currentTickValue, ), ;, }, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,, g2, ,, g2, .]
[;, }, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,, g2, ,, g2, ., getFontMetrics, (, ), ), ;]
[), ;, }, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, tickLabel, ,, g2, ,, g2, ., getFontMetrics, (, ), )]
[;, double, tickLabelLength, =, isVerticalTickLabels, (, ), ?, bounds, ., getWidth, (, ), :, bounds, ., getHeight, (, ), ;]
[., getTextBounds, (, tickLabel, ,, g2, ,, g2, ., getFontMetrics, (, ), ), ;, double, tickLabelLength, =, isVerticalTickLabels, (, )]
[,, g2, ,, g2, ., getFontMetrics, (, ), ), ;, double, tickLabelLength, =, isVerticalTickLabels, (, ), ?, bounds, ., getWidth]
[,, g2, ., getFontMetrics, (, ), ), ;, double, tickLabelLength, =, isVerticalTickLabels, (, ), ?, bounds, ., getWidth, (, )]
[), ;, double, tickLabelLength, =, isVerticalTickLabels, (, ), ?, bounds, ., getWidth, (, ), :, bounds, ., getHeight, (, )]
[., getFontMetrics, (, ), ), ;, double, tickLabelLength, =, isVerticalTickLabels, (, ), ?, bounds, ., getWidth, (, ), :, bounds]
[;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >, 0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength]
[?, bounds, ., getWidth, (, ), :, bounds, ., getHeight, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (]
[:, bounds, ., getHeight, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >, 0, ), {, double]
[., getWidth, (, ), :, bounds, ., getHeight, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >]
[;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >, 0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength]
[., getHeight, (, ), ;, boolean, tickLabelsOverlapping, =, false, ;, if, (, i, >, 0, ), {, double, avgTickLabelLength, =]
[;, if, (, i, >, 0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if]
[), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if, (, Math, ., abs, (, yy]
[>, 0, ), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if, (, Math, ., abs]
[), {, double, avgTickLabelLength, =, (, previousDrawnTickLabelLength, +, tickLabelLength, ), /, 2.0, ;, if, (, Math, ., abs, (, yy]
[;, if, (, Math, ., abs, (, yy, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true, ;, }]
[/, 2.0, ;, if, (, Math, ., abs, (, yy, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true]
[), /, 2.0, ;, if, (, Math, ., abs, (, yy, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =]
[+, tickLabelLength, ), /, 2.0, ;, if, (, Math, ., abs, (, yy, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {]
[), /, 2.0, ;, if, (, Math, ., abs, (, yy, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =]
[;, if, (, Math, ., abs, (, yy, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true, ;, }]
[), {, tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;, }, else, {]
[<, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;, }]
[., abs, (, yy, -, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping]
[), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;]
[-, previousDrawnTickLabelPos, ), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =]
[), <, avgTickLabelLength, ), {, tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;]
[), {, tickLabelsOverlapping, =, true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;, }, else, {]
[=, true, ;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;, }, else, {, previousDrawnTickLabelPos, =, yy]
[;, }, }, if, (, tickLabelsOverlapping, ), {, tickLabel, =, "", ;, }, else, {, previousDrawnTickLabelPos, =, yy, ;, previousDrawnTickLabelLength]
[), {, tickLabel, =, "", ;, }, else, {, previousDrawnTickLabelPos, =, yy, ;, previousDrawnTickLabelLength, =, tickLabelLength, ;, }, TextAnchor, anchor]
[=, "", ;, }, else, {, previousDrawnTickLabelPos, =, yy, ;, previousDrawnTickLabelLength, =, tickLabelLength, ;, }, TextAnchor, anchor, =, null, ;]
[;, }, else, {, previousDrawnTickLabelPos, =, yy, ;, previousDrawnTickLabelLength, =, tickLabelLength, ;, }, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor]
[=, yy, ;, previousDrawnTickLabelLength, =, tickLabelLength, ;, }, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle]
[;, previousDrawnTickLabelLength, =, tickLabelLength, ;, }, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0]
[=, tickLabelLength, ;, }, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if]
[;, }, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels]
[;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =]
[;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor]
[;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;]
[), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, edge, ==, RectangleEdge, .]
[=, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, angle, =, -, Math]
[., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, angle, =]
[=, TextAnchor, ., BOTTOM_CENTER, ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, angle, =, -, Math, ., PI]
[;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, angle, =, -, Math, ., PI, /, 2.0, ;, }]
[., BOTTOM_CENTER, ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, angle, =, -, Math, ., PI, /, 2.0]
[), {, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, Math, ., PI, /]
[==, RectangleEdge, ., LEFT, ), {, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, angle, =]
[), {, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, Math, ., PI, /]
[., LEFT, ), {, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, Math, .]
[=, -, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, Math, ., PI, /, 2.0, ;, }]
[;, }, else, {, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==]
[/, 2.0, ;, }, else, {, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (]
[/, 2.0, ;, }, else, {, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (]
[., PI, /, 2.0, ;, }, else, {, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {]
[;, }, else, {, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==]
[=, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;]
[/, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, .]
[., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =]
[;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;]
[), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor]
[==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else]
[), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor]
[., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor]
[=, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;]
[;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =, TextAnchor, .]
[., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =]
[=, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =, TextAnchor, ., CENTER_LEFT, ;]
[;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, }, Tick, tick]
[., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, }]
[=, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, }, Tick, tick, =, new, NumberTick, (, new]
[;, rotationAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, )]
[., CENTER_LEFT, ;, rotationAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (]
[=, TextAnchor, ., CENTER_LEFT, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel]
[;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor]
[., CENTER_LEFT, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor]
[;, ticks, ., add, (, tick, ), ;, }, }, return, ticks, ;, }, public, String, valueToString, (, double, value]
[,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, ticks, ., add, (, tick, ), ;, }, }, return]
[), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, ticks, ., add, (, tick, ), ;, }, }]
[,, anchor, ,, rotationAnchor, ,, angle, ), ;, ticks, ., add, (, tick, ), ;, }, }, return, ticks, ;]
[,, rotationAnchor, ,, angle, ), ;, ticks, ., add, (, tick, ), ;, }, }, return, ticks, ;, }, public]
[,, angle, ), ;, ticks, ., add, (, tick, ), ;, }, }, return, ticks, ;, }, public, String, valueToString]
[), ;, ticks, ., add, (, tick, ), ;, }, }, return, ticks, ;, }, public, String, valueToString, (, double]
[;, }, }, return, ticks, ;, }, public, String, valueToString, (, double, value, ), {, String, strToReturn, ;, try, {]
[., add, (, tick, ), ;, }, }, return, ticks, ;, }, public, String, valueToString, (, double, value, ), {]
[), ;, }, }, return, ticks, ;, }, public, String, valueToString, (, double, value, ), {, String, strToReturn, ;, try]
[;, }, public, String, valueToString, (, double, value, ), {, String, strToReturn, ;, try, {, strToReturn, =, (, String, )]
[=, (, String, ), this, ., symbols, ., get, (, (, int, ), value, ), ;, }, catch, (, IndexOutOfBoundsException]
[;, }, catch, (, IndexOutOfBoundsException, ex, ), {, strToReturn, =, "", ;, }, return, strToReturn, ;, }, public, boolean, equals]
[;, }, catch, (, IndexOutOfBoundsException, ex, ), {, strToReturn, =, "", ;, }, return, strToReturn, ;, }, public, boolean, equals]
[., get, (, (, int, ), value, ), ;, }, catch, (, IndexOutOfBoundsException, ex, ), {, strToReturn, =, "", ;]
[., symbols, ., get, (, (, int, ), value, ), ;, }, catch, (, IndexOutOfBoundsException, ex, ), {, strToReturn, =]
[), ;, }, catch, (, IndexOutOfBoundsException, ex, ), {, strToReturn, =, "", ;, }, return, strToReturn, ;, }, public, boolean]
[), ;, }, catch, (, IndexOutOfBoundsException, ex, ), {, strToReturn, =, "", ;, }, return, strToReturn, ;, }, public, boolean]
[=, "", ;, }, return, strToReturn, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[;, }, return, strToReturn, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, )]
[;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, SymbolAxis, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, SymbolAxis, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, SymbolAxis, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, SymbolAxis, ), ), {, return, false, ;, }, SymbolAxis, that, =, (]
[), {, return, false, ;, }, SymbolAxis, that, =, (, SymbolAxis, ), obj, ;, if, (, !, this, ., symbols]
[), {, return, false, ;, }, SymbolAxis, that, =, (, SymbolAxis, ), obj, ;, if, (, !, this, ., symbols]
[), ), {, return, false, ;, }, SymbolAxis, that, =, (, SymbolAxis, ), obj, ;, if, (, !, this, .]
[instanceof, SymbolAxis, ), ), {, return, false, ;, }, SymbolAxis, that, =, (, SymbolAxis, ), obj, ;, if, (, !]
[;, }, SymbolAxis, that, =, (, SymbolAxis, ), obj, ;, if, (, !, this, ., symbols, ., equals, (, that]
[;, if, (, !, this, ., symbols, ., equals, (, that, ., symbols, ), ), {, return, false, ;, }]
[;, if, (, !, this, ., symbols, ., equals, (, that, ., symbols, ), ), {, return, false, ;, }]
[), {, return, false, ;, }, if, (, this, ., gridBandsVisible, !=, that, ., gridBandsVisible, ), {, return, false, ;]
[), {, return, false, ;, }, if, (, this, ., gridBandsVisible, !=, that, ., gridBandsVisible, ), {, return, false, ;]
[., equals, (, that, ., symbols, ), ), {, return, false, ;, }, if, (, this, ., gridBandsVisible, !=, that]
[., symbols, ., equals, (, that, ., symbols, ), ), {, return, false, ;, }, if, (, this, ., gridBandsVisible]
[), ), {, return, false, ;, }, if, (, this, ., gridBandsVisible, !=, that, ., gridBandsVisible, ), {, return, false]
[., symbols, ), ), {, return, false, ;, }, if, (, this, ., gridBandsVisible, !=, that, ., gridBandsVisible, ), {]
[;, }, if, (, this, ., gridBandsVisible, !=, that, ., gridBandsVisible, ), {, return, false, ;, }, if, (, !]
[), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., gridBandPaint, ,, that, ., gridBandPaint]
[!=, that, ., gridBandsVisible, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., gridBandPaint]
[., gridBandsVisible, !=, that, ., gridBandsVisible, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this]
[), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., gridBandPaint, ,, that, ., gridBandPaint]
[., gridBandsVisible, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., gridBandPaint, ,, that]
[;, }, if, (, !, PaintUtilities, ., equal, (, this, ., gridBandPaint, ,, that, ., gridBandPaint, ), ), {, return]
[), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., gridBandAlternatePaint, ,, that, ., gridBandAlternatePaint]
[), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., gridBandAlternatePaint, ,, that, ., gridBandAlternatePaint]
[., equal, (, this, ., gridBandPaint, ,, that, ., gridBandPaint, ), ), {, return, false, ;, }, if, (, !]
[,, that, ., gridBandPaint, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, .]
[., gridBandPaint, ,, that, ., gridBandPaint, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., gridBandAlternatePaint, ,, that, .]
[., gridBandPaint, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., gridBandAlternatePaint, ,]
[;, }, if, (, !, PaintUtilities, ., equal, (, this, ., gridBandAlternatePaint, ,, that, ., gridBandAlternatePaint, ), ), {, return]
[), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, private, void, writeObject, (, ObjectOutputStream]
[), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, private, void, writeObject, (, ObjectOutputStream]
[., equal, (, this, ., gridBandAlternatePaint, ,, that, ., gridBandAlternatePaint, ), ), {, return, false, ;, }, return, super, .]
[,, that, ., gridBandAlternatePaint, ), ), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }]
[., gridBandAlternatePaint, ,, that, ., gridBandAlternatePaint, ), ), {, return, false, ;, }, return, super, ., equals, (, obj, )]
[), ), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, private, void, writeObject, (]
[., gridBandAlternatePaint, ), ), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, private, void]
[;, }, return, super, ., equals, (, obj, ), ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException]
[;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, .]
[., equals, (, obj, ), ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject]
[), ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities]
[;, SerialUtilities, ., writePaint, (, this, ., gridBandPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., gridBandAlternatePaint, ,]
[., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., gridBandPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (]
[;, SerialUtilities, ., writePaint, (, this, ., gridBandAlternatePaint, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, )]
[., writePaint, (, this, ., gridBandPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., gridBandAlternatePaint, ,, stream, )]
[,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., gridBandAlternatePaint, ,, stream, ), ;, }, private, void, readObject, (]
[., gridBandPaint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., gridBandAlternatePaint, ,, stream, ), ;, }, private, void]
[), ;, SerialUtilities, ., writePaint, (, this, ., gridBandAlternatePaint, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[., writePaint, (, this, ., gridBandAlternatePaint, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException]
[,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject]
[., gridBandAlternatePaint, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream]
[), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, )]
[;, this, ., gridBandPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., gridBandAlternatePaint, =, SerialUtilities, ., readPaint, (]
[., defaultReadObject, (, ), ;, this, ., gridBandPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., gridBandAlternatePaint, =]
[=, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., gridBandAlternatePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, }]
[., gridBandPaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., gridBandAlternatePaint, =, SerialUtilities, ., readPaint, (, stream, )]
[;, this, ., gridBandAlternatePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, }, }]
[., readPaint, (, stream, ), ;, this, ., gridBandAlternatePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, }, }]
[), ;, this, ., gridBandAlternatePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, }, }]
[=, SerialUtilities, ., readPaint, (, stream, ), ;, }, }]
[., gridBandAlternatePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, }, }]
[;, }, }]
[., readPaint, (, stream, ), ;, }, }]
[), ;, }, }]
