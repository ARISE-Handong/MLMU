[<, T, >, implements, ConcurrentInitializer, <, T, >, {, private, final, AtomicReference, <, AtomicSafeInitializer, <, T, >, >, factory, =]
[=, new, AtomicReference, <, AtomicSafeInitializer, <, T, >, >, (, ), ;, private, final, AtomicReference, <, T, >, reference, =]
[>, (, ), ;, @, Override, public, final, T, get, (, ), throws, ConcurrentException, {, T, result, ;, while, (]
[>, (, ), ;, @, Override, public, final, T, get, (, ), throws, ConcurrentException, {, T, result, ;, while, (]
[(, ), ;, @, Override, public, final, T, get, (, ), throws, ConcurrentException, {, T, result, ;, while, (, (]
[;, @, Override, public, final, T, get, (, ), throws, ConcurrentException, {, T, result, ;, while, (, (, result, =]
[;, @, Override, public, final, T, get, (, ), throws, ConcurrentException, {, T, result, ;, while, (, (, result, =]
[(, ), throws, ConcurrentException, {, T, result, ;, while, (, (, result, =, reference, ., get, (, ), ), ==]
[T, result, ;, while, (, (, result, =, reference, ., get, (, ), ), ==, null, ), {, if, (]
[T, result, ;, while, (, (, result, =, reference, ., get, (, ), ), ==, null, ), {, if, (]
[(, (, result, =, reference, ., get, (, ), ), ==, null, ), {, if, (, factory, ., compareAndSet, (]
[result, =, reference, ., get, (, ), ), ==, null, ), {, if, (, factory, ., compareAndSet, (, null, ,]
[get, (, ), ), ==, null, ), {, if, (, factory, ., compareAndSet, (, null, ,, this, ), ), {]
[get, (, ), ), ==, null, ), {, if, (, factory, ., compareAndSet, (, null, ,, this, ), ), {]
[==, null, ), {, if, (, factory, ., compareAndSet, (, null, ,, this, ), ), {, reference, ., set, (]
[compareAndSet, (, null, ,, this, ), ), {, reference, ., set, (, initialize, (, ), ), ;, }, }, return]
