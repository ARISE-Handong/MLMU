[java, ., util, ., Set, ;, class, ProcessDefines, implements, CompilerPass, {, private, static, final, Set, <, String, >, KNOWN_DEFINES, =]
[java, ., util, ., Set, ;, class, ProcessDefines, implements, CompilerPass, {, private, static, final, Set, <, String, >, KNOWN_DEFINES, =]
[Set, ;, class, ProcessDefines, implements, CompilerPass, {, private, static, final, Set, <, String, >, KNOWN_DEFINES, =, Sets, ., newHashSet, (]
[;, private, final, AbstractCompiler, compiler, ;, private, final, Map, <, String, ,, Node, >, dominantReplacements, ;, private, GlobalNamespace, namespace, =]
[final, Map, <, String, ,, Node, >, dominantReplacements, ;, private, GlobalNamespace, namespace, =, null, ;, static, final, DiagnosticType, UNKNOWN_DEFINE_WARNING, =]
[final, Map, <, String, ,, Node, >, dominantReplacements, ;, private, GlobalNamespace, namespace, =, null, ;, static, final, DiagnosticType, UNKNOWN_DEFINE_WARNING, =]
[,, Node, >, dominantReplacements, ;, private, GlobalNamespace, namespace, =, null, ;, static, final, DiagnosticType, UNKNOWN_DEFINE_WARNING, =, DiagnosticType, ., warning, (]
[>, dominantReplacements, ;, private, GlobalNamespace, namespace, =, null, ;, static, final, DiagnosticType, UNKNOWN_DEFINE_WARNING, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_DEFINE_WARNING", ,]
[;, static, final, DiagnosticType, UNKNOWN_DEFINE_WARNING, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_DEFINE_WARNING", ,, "unknown @define variable {0}", ), ;, static, final, DiagnosticType, INVALID_DEFINE_TYPE_ERROR, =]
[;, static, final, DiagnosticType, UNKNOWN_DEFINE_WARNING, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_DEFINE_WARNING", ,, "unknown @define variable {0}", ), ;, static, final, DiagnosticType, INVALID_DEFINE_TYPE_ERROR, =]
[UNKNOWN_DEFINE_WARNING, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_DEFINE_WARNING", ,, "unknown @define variable {0}", ), ;, static, final, DiagnosticType, INVALID_DEFINE_TYPE_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., warning, (, "JSC_UNKNOWN_DEFINE_WARNING", ,, "unknown @define variable {0}", ), ;, static, final, DiagnosticType, INVALID_DEFINE_TYPE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_DEFINE_TYPE_ERROR", ,]
[;, static, final, DiagnosticType, INVALID_DEFINE_TYPE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_DEFINE_TYPE_ERROR", ,, "@define tag only permits literal types", ), ;, static, final, DiagnosticType, INVALID_DEFINE_INIT_ERROR, =]
[;, static, final, DiagnosticType, INVALID_DEFINE_TYPE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_DEFINE_TYPE_ERROR", ,, "@define tag only permits literal types", ), ;, static, final, DiagnosticType, INVALID_DEFINE_INIT_ERROR, =]
[INVALID_DEFINE_TYPE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_DEFINE_TYPE_ERROR", ,, "@define tag only permits literal types", ), ;, static, final, DiagnosticType, INVALID_DEFINE_INIT_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_INVALID_DEFINE_TYPE_ERROR", ,, "@define tag only permits literal types", ), ;, static, final, DiagnosticType, INVALID_DEFINE_INIT_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_DEFINE_INIT_ERROR", ,]
[;, static, final, DiagnosticType, INVALID_DEFINE_INIT_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_DEFINE_INIT_ERROR", ,, "illegal initialization of @define variable {0}", ), ;, static, final, DiagnosticType, NON_GLOBAL_DEFINE_INIT_ERROR, =]
[;, static, final, DiagnosticType, INVALID_DEFINE_INIT_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_DEFINE_INIT_ERROR", ,, "illegal initialization of @define variable {0}", ), ;, static, final, DiagnosticType, NON_GLOBAL_DEFINE_INIT_ERROR, =]
[INVALID_DEFINE_INIT_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_DEFINE_INIT_ERROR", ,, "illegal initialization of @define variable {0}", ), ;, static, final, DiagnosticType, NON_GLOBAL_DEFINE_INIT_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_INVALID_DEFINE_INIT_ERROR", ,, "illegal initialization of @define variable {0}", ), ;, static, final, DiagnosticType, NON_GLOBAL_DEFINE_INIT_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_GLOBAL_DEFINE_INIT_ERROR", ,]
[;, static, final, DiagnosticType, NON_GLOBAL_DEFINE_INIT_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_GLOBAL_DEFINE_INIT_ERROR", ,, "@define variable {0} assignment must be global", ), ;, static, final, DiagnosticType, DEFINE_NOT_ASSIGNABLE_ERROR, =]
[;, static, final, DiagnosticType, NON_GLOBAL_DEFINE_INIT_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_GLOBAL_DEFINE_INIT_ERROR", ,, "@define variable {0} assignment must be global", ), ;, static, final, DiagnosticType, DEFINE_NOT_ASSIGNABLE_ERROR, =]
[NON_GLOBAL_DEFINE_INIT_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_GLOBAL_DEFINE_INIT_ERROR", ,, "@define variable {0} assignment must be global", ), ;, static, final, DiagnosticType, DEFINE_NOT_ASSIGNABLE_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_NON_GLOBAL_DEFINE_INIT_ERROR", ,, "@define variable {0} assignment must be global", ), ;, static, final, DiagnosticType, DEFINE_NOT_ASSIGNABLE_ERROR, =, DiagnosticType, ., error, (, "JSC_DEFINE_NOT_ASSIGNABLE_ERROR", ,]
[static, final, DiagnosticType, DEFINE_NOT_ASSIGNABLE_ERROR, =, DiagnosticType, ., error, (, "JSC_DEFINE_NOT_ASSIGNABLE_ERROR", ,, "@define variable {0} cannot be reassigned due to code at {1}.", ), ;, private, static, final, MessageFormat, REASON_DEFINE_NOT_ASSIGNABLE, =]
[DEFINE_NOT_ASSIGNABLE_ERROR, =, DiagnosticType, ., error, (, "JSC_DEFINE_NOT_ASSIGNABLE_ERROR", ,, "@define variable {0} cannot be reassigned due to code at {1}.", ), ;, private, static, final, MessageFormat, REASON_DEFINE_NOT_ASSIGNABLE, =, new, MessageFormat, (]
[new, MessageFormat, (, "line {0} of {1}", ), ;, ProcessDefines, (, AbstractCompiler, compiler, ,, Map, <, String, ,, Node, >, replacements, ), {]
[new, MessageFormat, (, "line {0} of {1}", ), ;, ProcessDefines, (, AbstractCompiler, compiler, ,, Map, <, String, ,, Node, >, replacements, ), {]
[), ;, ProcessDefines, (, AbstractCompiler, compiler, ,, Map, <, String, ,, Node, >, replacements, ), {, this, ., compiler, =]
[ProcessDefines, (, AbstractCompiler, compiler, ,, Map, <, String, ,, Node, >, replacements, ), {, this, ., compiler, =, compiler, ;]
[AbstractCompiler, compiler, ,, Map, <, String, ,, Node, >, replacements, ), {, this, ., compiler, =, compiler, ;, dominantReplacements, =]
[), {, this, ., compiler, =, compiler, ;, dominantReplacements, =, replacements, ;, }, ProcessDefines, injectNamespace, (, GlobalNamespace, namespace, ), {]
[), {, this, ., compiler, =, compiler, ;, dominantReplacements, =, replacements, ;, }, ProcessDefines, injectNamespace, (, GlobalNamespace, namespace, ), {]
[compiler, =, compiler, ;, dominantReplacements, =, replacements, ;, }, ProcessDefines, injectNamespace, (, GlobalNamespace, namespace, ), {, this, ., namespace, =]
[;, dominantReplacements, =, replacements, ;, }, ProcessDefines, injectNamespace, (, GlobalNamespace, namespace, ), {, this, ., namespace, =, namespace, ;, return]
[;, return, this, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (]
[;, return, this, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (]
[this, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, namespace, ==]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, namespace, ==, null, ), {]
[public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, namespace, ==, null, ), {, namespace, =]
[(, Node, externs, ,, Node, root, ), {, if, (, namespace, ==, null, ), {, namespace, =, new, GlobalNamespace, (]
[externs, ,, Node, root, ), {, if, (, namespace, ==, null, ), {, namespace, =, new, GlobalNamespace, (, compiler, ,]
[), {, if, (, namespace, ==, null, ), {, namespace, =, new, GlobalNamespace, (, compiler, ,, root, ), ;, }]
[if, (, namespace, ==, null, ), {, namespace, =, new, GlobalNamespace, (, compiler, ,, root, ), ;, }, overrideDefines, (]
[namespace, ==, null, ), {, namespace, =, new, GlobalNamespace, (, compiler, ,, root, ), ;, }, overrideDefines, (, collectDefines, (]
[null, ), {, namespace, =, new, GlobalNamespace, (, compiler, ,, root, ), ;, }, overrideDefines, (, collectDefines, (, root, ,]
[), ), ;, }, private, void, overrideDefines, (, Map, <, String, ,, DefineInfo, >, allDefines, ), {, boolean, changed, =]
[allDefines, ), {, boolean, changed, =, false, ;, for, (, Map, ., Entry, <, String, ,, DefineInfo, >, def, :]
[allDefines, ), {, boolean, changed, =, false, ;, for, (, Map, ., Entry, <, String, ,, DefineInfo, >, def, :]
[Map, ., Entry, <, String, ,, DefineInfo, >, def, :, allDefines, ., entrySet, (, ), ), {, String, defineName, =]
[Map, ., Entry, <, String, ,, DefineInfo, >, def, :, allDefines, ., entrySet, (, ), ), {, String, defineName, =]
[:, allDefines, ., entrySet, (, ), ), {, String, defineName, =, def, ., getKey, (, ), ;, DefineInfo, info, =]
[:, allDefines, ., entrySet, (, ), ), {, String, defineName, =, def, ., getKey, (, ), ;, DefineInfo, info, =]
[defineName, =, def, ., getKey, (, ), ;, DefineInfo, info, =, def, ., getValue, (, ), ;, Node, inputValue, =]
[defineName, =, def, ., getKey, (, ), ;, DefineInfo, info, =, def, ., getValue, (, ), ;, Node, inputValue, =]
[getKey, (, ), ;, DefineInfo, info, =, def, ., getValue, (, ), ;, Node, inputValue, =, dominantReplacements, ., get, (]
[=, def, ., getValue, (, ), ;, Node, inputValue, =, dominantReplacements, ., get, (, defineName, ), ;, Node, finalValue, =]
[=, def, ., getValue, (, ), ;, Node, inputValue, =, dominantReplacements, ., get, (, defineName, ), ;, Node, finalValue, =]
[=, def, ., getValue, (, ), ;, Node, inputValue, =, dominantReplacements, ., get, (, defineName, ), ;, Node, finalValue, =]
[., getValue, (, ), ;, Node, inputValue, =, dominantReplacements, ., get, (, defineName, ), ;, Node, finalValue, =, inputValue, !=]
[(, ), ;, Node, inputValue, =, dominantReplacements, ., get, (, defineName, ), ;, Node, finalValue, =, inputValue, !=, null, ?]
[;, Node, inputValue, =, dominantReplacements, ., get, (, defineName, ), ;, Node, finalValue, =, inputValue, !=, null, ?, inputValue, :]
[;, Node, inputValue, =, dominantReplacements, ., get, (, defineName, ), ;, Node, finalValue, =, inputValue, !=, null, ?, inputValue, :]
[defineName, ), ;, Node, finalValue, =, inputValue, !=, null, ?, inputValue, :, info, ., getLastValue, (, ), ;, if, (]
[defineName, ), ;, Node, finalValue, =, inputValue, !=, null, ?, inputValue, :, info, ., getLastValue, (, ), ;, if, (]
[;, Node, finalValue, =, inputValue, !=, null, ?, inputValue, :, info, ., getLastValue, (, ), ;, if, (, finalValue, !=]
[;, Node, finalValue, =, inputValue, !=, null, ?, inputValue, :, info, ., getLastValue, (, ), ;, if, (, finalValue, !=]
[!=, null, ?, inputValue, :, info, ., getLastValue, (, ), ;, if, (, finalValue, !=, info, ., initialValue, ), {]
[!=, null, ?, inputValue, :, info, ., getLastValue, (, ), ;, if, (, finalValue, !=, info, ., initialValue, ), {]
[!=, null, ?, inputValue, :, info, ., getLastValue, (, ), ;, if, (, finalValue, !=, info, ., initialValue, ), {]
[., getLastValue, (, ), ;, if, (, finalValue, !=, info, ., initialValue, ), {, info, ., initialValueParent, ., replaceChild, (]
[., getLastValue, (, ), ;, if, (, finalValue, !=, info, ., initialValue, ), {, info, ., initialValueParent, ., replaceChild, (]
[;, if, (, finalValue, !=, info, ., initialValue, ), {, info, ., initialValueParent, ., replaceChild, (, info, ., initialValue, ,]
[;, if, (, finalValue, !=, info, ., initialValue, ), {, info, ., initialValueParent, ., replaceChild, (, info, ., initialValue, ,]
[initialValue, ), {, info, ., initialValueParent, ., replaceChild, (, info, ., initialValue, ,, finalValue, ., cloneTree, (, ), ), ;]
[initialValue, ), {, info, ., initialValueParent, ., replaceChild, (, info, ., initialValue, ,, finalValue, ., cloneTree, (, ), ), ;]
[., initialValueParent, ., replaceChild, (, info, ., initialValue, ,, finalValue, ., cloneTree, (, ), ), ;, compiler, ., addToDebugLog, (]
[., initialValueParent, ., replaceChild, (, info, ., initialValue, ,, finalValue, ., cloneTree, (, ), ), ;, compiler, ., addToDebugLog, (]
[., replaceChild, (, info, ., initialValue, ,, finalValue, ., cloneTree, (, ), ), ;, compiler, ., addToDebugLog, (, "Overriding @define variable ", +]
[info, ., initialValue, ,, finalValue, ., cloneTree, (, ), ), ;, compiler, ., addToDebugLog, (, "Overriding @define variable ", +, defineName, ), ;]
[initialValue, ,, finalValue, ., cloneTree, (, ), ), ;, compiler, ., addToDebugLog, (, "Overriding @define variable ", +, defineName, ), ;, changed, =]
[initialValue, ,, finalValue, ., cloneTree, (, ), ), ;, compiler, ., addToDebugLog, (, "Overriding @define variable ", +, defineName, ), ;, changed, =]
[initialValue, ,, finalValue, ., cloneTree, (, ), ), ;, compiler, ., addToDebugLog, (, "Overriding @define variable ", +, defineName, ), ;, changed, =]
[finalValue, ., cloneTree, (, ), ), ;, compiler, ., addToDebugLog, (, "Overriding @define variable ", +, defineName, ), ;, changed, =, changed, ||]
[finalValue, ., cloneTree, (, ), ), ;, compiler, ., addToDebugLog, (, "Overriding @define variable ", +, defineName, ), ;, changed, =, changed, ||]
[finalValue, ., cloneTree, (, ), ), ;, compiler, ., addToDebugLog, (, "Overriding @define variable ", +, defineName, ), ;, changed, =, changed, ||]
[;, compiler, ., addToDebugLog, (, "Overriding @define variable ", +, defineName, ), ;, changed, =, changed, ||, finalValue, ., getType, (, ), !=]
[;, compiler, ., addToDebugLog, (, "Overriding @define variable ", +, defineName, ), ;, changed, =, changed, ||, finalValue, ., getType, (, ), !=]
[;, compiler, ., addToDebugLog, (, "Overriding @define variable ", +, defineName, ), ;, changed, =, changed, ||, finalValue, ., getType, (, ), !=]
[), ;, changed, =, changed, ||, finalValue, ., getType, (, ), !=, info, ., initialValue, ., getType, (, ), ||]
[;, changed, =, changed, ||, finalValue, ., getType, (, ), !=, info, ., initialValue, ., getType, (, ), ||, !]
[;, changed, =, changed, ||, finalValue, ., getType, (, ), !=, info, ., initialValue, ., getType, (, ), ||, !]
[||, finalValue, ., getType, (, ), !=, info, ., initialValue, ., getType, (, ), ||, !, finalValue, ., isEquivalentTo, (]
[||, finalValue, ., getType, (, ), !=, info, ., initialValue, ., getType, (, ), ||, !, finalValue, ., isEquivalentTo, (]
[initialValue, ., getType, (, ), ||, !, finalValue, ., isEquivalentTo, (, info, ., initialValue, ), ;, }, }, if, (]
[(, ), ||, !, finalValue, ., isEquivalentTo, (, info, ., initialValue, ), ;, }, }, if, (, changed, ), {]
[(, ), ||, !, finalValue, ., isEquivalentTo, (, info, ., initialValue, ), ;, }, }, if, (, changed, ), {]
[}, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, Set, <, String, >, unusedReplacements, =]
[}, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, Set, <, String, >, unusedReplacements, =]
[{, compiler, ., reportCodeChange, (, ), ;, }, Set, <, String, >, unusedReplacements, =, dominantReplacements, ., keySet, (, ), ;]
[{, compiler, ., reportCodeChange, (, ), ;, }, Set, <, String, >, unusedReplacements, =, dominantReplacements, ., keySet, (, ), ;]
[(, ), ;, }, Set, <, String, >, unusedReplacements, =, dominantReplacements, ., keySet, (, ), ;, unusedReplacements, ., removeAll, (]
[(, ), ;, }, Set, <, String, >, unusedReplacements, =, dominantReplacements, ., keySet, (, ), ;, unusedReplacements, ., removeAll, (]
[>, unusedReplacements, =, dominantReplacements, ., keySet, (, ), ;, unusedReplacements, ., removeAll, (, allDefines, ., keySet, (, ), ), ;]
[>, unusedReplacements, =, dominantReplacements, ., keySet, (, ), ;, unusedReplacements, ., removeAll, (, allDefines, ., keySet, (, ), ), ;]
[., keySet, (, ), ;, unusedReplacements, ., removeAll, (, allDefines, ., keySet, (, ), ), ;, unusedReplacements, ., removeAll, (]
[(, allDefines, ., keySet, (, ), ), ;, unusedReplacements, ., removeAll, (, KNOWN_DEFINES, ), ;, for, (, String, unknownDefine, :]
[keySet, (, ), ), ;, unusedReplacements, ., removeAll, (, KNOWN_DEFINES, ), ;, for, (, String, unknownDefine, :, unusedReplacements, ), {]
[keySet, (, ), ), ;, unusedReplacements, ., removeAll, (, KNOWN_DEFINES, ), ;, for, (, String, unknownDefine, :, unusedReplacements, ), {]
[;, unusedReplacements, ., removeAll, (, KNOWN_DEFINES, ), ;, for, (, String, unknownDefine, :, unusedReplacements, ), {, compiler, ., report, (]
[;, unusedReplacements, ., removeAll, (, KNOWN_DEFINES, ), ;, for, (, String, unknownDefine, :, unusedReplacements, ), {, compiler, ., report, (]
[(, KNOWN_DEFINES, ), ;, for, (, String, unknownDefine, :, unusedReplacements, ), {, compiler, ., report, (, JSError, ., make, (]
[), ;, for, (, String, unknownDefine, :, unusedReplacements, ), {, compiler, ., report, (, JSError, ., make, (, UNKNOWN_DEFINE_WARNING, ,]
[unknownDefine, ), ), ;, }, }, private, static, String, format, (, MessageFormat, format, ,, Object, ..., params, ), {, return]
[unknownDefine, ), ), ;, }, }, private, static, String, format, (, MessageFormat, format, ,, Object, ..., params, ), {, return]
[}, }, private, static, String, format, (, MessageFormat, format, ,, Object, ..., params, ), {, return, format, ., format, (]
[return, format, ., format, (, params, ), ;, }, private, boolean, isValidDefineType, (, JSTypeExpression, expression, ), {, JSType, type, =]
[return, format, ., format, (, params, ), ;, }, private, boolean, isValidDefineType, (, JSTypeExpression, expression, ), {, JSType, type, =]
[(, params, ), ;, }, private, boolean, isValidDefineType, (, JSTypeExpression, expression, ), {, JSType, type, =, expression, ., evaluate, (]
[), ;, }, private, boolean, isValidDefineType, (, JSTypeExpression, expression, ), {, JSType, type, =, expression, ., evaluate, (, null, ,]
[), ;, }, private, boolean, isValidDefineType, (, JSTypeExpression, expression, ), {, JSType, type, =, expression, ., evaluate, (, null, ,]
[expression, ), {, JSType, type, =, expression, ., evaluate, (, null, ,, compiler, ., getTypeRegistry, (, ), ), ;, return]
[expression, ), {, JSType, type, =, expression, ., evaluate, (, null, ,, compiler, ., getTypeRegistry, (, ), ), ;, return]
[), {, JSType, type, =, expression, ., evaluate, (, null, ,, compiler, ., getTypeRegistry, (, ), ), ;, return, !]
[), {, JSType, type, =, expression, ., evaluate, (, null, ,, compiler, ., getTypeRegistry, (, ), ), ;, return, !]
[., evaluate, (, null, ,, compiler, ., getTypeRegistry, (, ), ), ;, return, !, type, ., isUnknownType, (, ), &&]
[., evaluate, (, null, ,, compiler, ., getTypeRegistry, (, ), ), ;, return, !, type, ., isUnknownType, (, ), &&]
[,, compiler, ., getTypeRegistry, (, ), ), ;, return, !, type, ., isUnknownType, (, ), &&, type, ., isSubtype, (]
[,, compiler, ., getTypeRegistry, (, ), ), ;, return, !, type, ., isUnknownType, (, ), &&, type, ., isSubtype, (]
[,, compiler, ., getTypeRegistry, (, ), ), ;, return, !, type, ., isUnknownType, (, ), &&, type, ., isSubtype, (]
[return, !, type, ., isUnknownType, (, ), &&, type, ., isSubtype, (, compiler, ., getTypeRegistry, (, ), ., getNativeType, (]
[return, !, type, ., isUnknownType, (, ), &&, type, ., isSubtype, (, compiler, ., getTypeRegistry, (, ), ., getNativeType, (]
[<, String, ,, DefineInfo, >, collectDefines, (, Node, root, ,, GlobalNamespace, namespace, ), {, List, <, Name, >, allDefines, =]
[<, String, ,, DefineInfo, >, collectDefines, (, Node, root, ,, GlobalNamespace, namespace, ), {, List, <, Name, >, allDefines, =]
[namespace, ), {, List, <, Name, >, allDefines, =, Lists, ., newArrayList, (, ), ;, for, (, Name, name, :]
[namespace, ), {, List, <, Name, >, allDefines, =, Lists, ., newArrayList, (, ), ;, for, (, Name, name, :]
[namespace, ), {, List, <, Name, >, allDefines, =, Lists, ., newArrayList, (, ), ;, for, (, Name, name, :]
[;, for, (, Name, name, :, namespace, ., getNameIndex, (, ), ., values, (, ), ), {, Ref, decl, =]
[;, for, (, Name, name, :, namespace, ., getNameIndex, (, ), ., values, (, ), ), {, Ref, decl, =]
[getNameIndex, (, ), ., values, (, ), ), {, Ref, decl, =, name, ., getDeclaration, (, ), ;, if, (]
[getNameIndex, (, ), ., values, (, ), ), {, Ref, decl, =, name, ., getDeclaration, (, ), ;, if, (]
[getNameIndex, (, ), ., values, (, ), ), {, Ref, decl, =, name, ., getDeclaration, (, ), ;, if, (]
[getNameIndex, (, ), ., values, (, ), ), {, Ref, decl, =, name, ., getDeclaration, (, ), ;, if, (]
[values, (, ), ), {, Ref, decl, =, name, ., getDeclaration, (, ), ;, if, (, name, ., docInfo, !=]
[), ), {, Ref, decl, =, name, ., getDeclaration, (, ), ;, if, (, name, ., docInfo, !=, null, &&]
[), ), {, Ref, decl, =, name, ., getDeclaration, (, ), ;, if, (, name, ., docInfo, !=, null, &&]
[), ), {, Ref, decl, =, name, ., getDeclaration, (, ), ;, if, (, name, ., docInfo, !=, null, &&]
[;, if, (, name, ., docInfo, !=, null, &&, name, ., docInfo, ., isDefine, (, ), ), {, if, (]
[(, name, ., docInfo, !=, null, &&, name, ., docInfo, ., isDefine, (, ), ), {, if, (, isValidDefineType, (]
[(, name, ., docInfo, !=, null, &&, name, ., docInfo, ., isDefine, (, ), ), {, if, (, isValidDefineType, (]
[(, name, ., docInfo, !=, null, &&, name, ., docInfo, ., isDefine, (, ), ), {, if, (, isValidDefineType, (]
[., isDefine, (, ), ), {, if, (, isValidDefineType, (, name, ., docInfo, ., getType, (, ), ), ), {]
[., isDefine, (, ), ), {, if, (, isValidDefineType, (, name, ., docInfo, ., getType, (, ), ), ), {]
[), {, if, (, isValidDefineType, (, name, ., docInfo, ., getType, (, ), ), ), {, allDefines, ., add, (]
[., getType, (, ), ), ), {, allDefines, ., add, (, name, ), ;, }, else, {, JSError, error, =]
[., getType, (, ), ), ), {, allDefines, ., add, (, name, ), ;, }, else, {, JSError, error, =]
[), ), {, allDefines, ., add, (, name, ), ;, }, else, {, JSError, error, =, JSError, ., make, (]
[), ), {, allDefines, ., add, (, name, ), ;, }, else, {, JSError, error, =, JSError, ., make, (]
[(, name, ), ;, }, else, {, JSError, error, =, JSError, ., make, (, decl, ., getSourceName, (, ), ,]
[(, name, ), ;, }, else, {, JSError, error, =, JSError, ., make, (, decl, ., getSourceName, (, ), ,]
[}, else, {, JSError, error, =, JSError, ., make, (, decl, ., getSourceName, (, ), ,, decl, ., node, ,]
[JSError, error, =, JSError, ., make, (, decl, ., getSourceName, (, ), ,, decl, ., node, ,, INVALID_DEFINE_TYPE_ERROR, ), ;]
[JSError, error, =, JSError, ., make, (, decl, ., getSourceName, (, ), ,, decl, ., node, ,, INVALID_DEFINE_TYPE_ERROR, ), ;]
[., make, (, decl, ., getSourceName, (, ), ,, decl, ., node, ,, INVALID_DEFINE_TYPE_ERROR, ), ;, compiler, ., report, (]
[,, INVALID_DEFINE_TYPE_ERROR, ), ;, compiler, ., report, (, error, ), ;, }, }, else, {, for, (, Ref, ref, :]
[,, INVALID_DEFINE_TYPE_ERROR, ), ;, compiler, ., report, (, error, ), ;, }, }, else, {, for, (, Ref, ref, :]
[), ;, }, }, else, {, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, if, (]
[), ;, }, }, else, {, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, if, (]
[}, }, else, {, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, if, (, ref, ==]
[name, ., getRefs, (, ), ), {, if, (, ref, ==, decl, ), {, continue, ;, }, Node, n, =]
[name, ., getRefs, (, ), ), {, if, (, ref, ==, decl, ), {, continue, ;, }, Node, n, =]
[if, (, ref, ==, decl, ), {, continue, ;, }, Node, n, =, ref, ., node, ;, Node, parent, =]
[if, (, ref, ==, decl, ), {, continue, ;, }, Node, n, =, ref, ., node, ;, Node, parent, =]
[if, (, ref, ==, decl, ), {, continue, ;, }, Node, n, =, ref, ., node, ;, Node, parent, =]
[n, =, ref, ., node, ;, Node, parent, =, ref, ., node, ., getParent, (, ), ;, JSDocInfo, info, =]
[n, =, ref, ., node, ;, Node, parent, =, ref, ., node, ., getParent, (, ), ;, JSDocInfo, info, =]
[=, ref, ., node, ., getParent, (, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[=, ref, ., node, ., getParent, (, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[=, ref, ., node, ., getParent, (, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[=, ref, ., node, ., getParent, (, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[., node, ., getParent, (, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==]
[., getParent, (, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, &&]
[., getParent, (, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, &&]
[info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, &&, parent, ., isVar, (, ), &&]
[info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, &&, parent, ., isVar, (, ), &&]
[;, if, (, info, ==, null, &&, parent, ., isVar, (, ), &&, parent, ., hasOneChild, (, ), ), {]
[(, info, ==, null, &&, parent, ., isVar, (, ), &&, parent, ., hasOneChild, (, ), ), {, info, =]
[(, info, ==, null, &&, parent, ., isVar, (, ), &&, parent, ., hasOneChild, (, ), ), {, info, =]
[), &&, parent, ., hasOneChild, (, ), ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (]
[), &&, parent, ., hasOneChild, (, ), ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (]
[), &&, parent, ., hasOneChild, (, ), ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (]
[parent, ., hasOneChild, (, ), ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (, info, !=]
[hasOneChild, (, ), ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&]
[hasOneChild, (, ), ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&]
[parent, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&, info, ., isDefine, (, ), ), {]
[parent, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&, info, ., isDefine, (, ), ), {]
[), ;, }, if, (, info, !=, null, &&, info, ., isDefine, (, ), ), {, allDefines, ., add, (]
[(, ), ), {, allDefines, ., add, (, name, ), ;, break, ;, }, }, }, }, CollectDefines, pass, =]
[{, allDefines, ., add, (, name, ), ;, break, ;, }, }, }, }, CollectDefines, pass, =, new, CollectDefines, (]
[., add, (, name, ), ;, break, ;, }, }, }, }, CollectDefines, pass, =, new, CollectDefines, (, compiler, ,]
[name, ), ;, break, ;, }, }, }, }, CollectDefines, pass, =, new, CollectDefines, (, compiler, ,, allDefines, ), ;]
[name, ), ;, break, ;, }, }, }, }, CollectDefines, pass, =, new, CollectDefines, (, compiler, ,, allDefines, ), ;]
[;, }, }, }, }, CollectDefines, pass, =, new, CollectDefines, (, compiler, ,, allDefines, ), ;, NodeTraversal, ., traverse, (]
[}, }, }, CollectDefines, pass, =, new, CollectDefines, (, compiler, ,, allDefines, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[}, CollectDefines, pass, =, new, CollectDefines, (, compiler, ,, allDefines, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[new, CollectDefines, (, compiler, ,, allDefines, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, pass, ), ;, return]
[new, CollectDefines, (, compiler, ,, allDefines, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, pass, ), ;, return]
[String, ,, DefineInfo, >, allDefines, ;, private, final, Map, <, Node, ,, RefInfo, >, allRefInfo, ;, private, Node, lvalueToRemoveLater, =]
[private, final, Deque, <, Integer, >, assignAllowed, ;, CollectDefines, (, AbstractCompiler, compiler, ,, List, <, Name, >, listOfDefines, ), {]
[private, final, Deque, <, Integer, >, assignAllowed, ;, CollectDefines, (, AbstractCompiler, compiler, ,, List, <, Name, >, listOfDefines, ), {]
[Integer, >, assignAllowed, ;, CollectDefines, (, AbstractCompiler, compiler, ,, List, <, Name, >, listOfDefines, ), {, this, ., compiler, =]
[assignAllowed, ;, CollectDefines, (, AbstractCompiler, compiler, ,, List, <, Name, >, listOfDefines, ), {, this, ., compiler, =, compiler, ;]
[assignAllowed, ;, CollectDefines, (, AbstractCompiler, compiler, ,, List, <, Name, >, listOfDefines, ), {, this, ., compiler, =, compiler, ;]
[AbstractCompiler, compiler, ,, List, <, Name, >, listOfDefines, ), {, this, ., compiler, =, compiler, ;, this, ., allDefines, =]
[AbstractCompiler, compiler, ,, List, <, Name, >, listOfDefines, ), {, this, ., compiler, =, compiler, ;, this, ., allDefines, =]
[>, listOfDefines, ), {, this, ., compiler, =, compiler, ;, this, ., allDefines, =, Maps, ., newHashMap, (, ), ;]
[), {, this, ., compiler, =, compiler, ;, this, ., allDefines, =, Maps, ., newHashMap, (, ), ;, assignableDefines, =]
[), {, this, ., compiler, =, compiler, ;, this, ., allDefines, =, Maps, ., newHashMap, (, ), ;, assignableDefines, =]
[compiler, ;, this, ., allDefines, =, Maps, ., newHashMap, (, ), ;, assignableDefines, =, Maps, ., newHashMap, (, ), ;]
[this, ., allDefines, =, Maps, ., newHashMap, (, ), ;, assignableDefines, =, Maps, ., newHashMap, (, ), ;, assignAllowed, =]
[), ;, assignableDefines, =, Maps, ., newHashMap, (, ), ;, assignAllowed, =, new, ArrayDeque, <, Integer, >, (, ), ;]
[), ;, assignableDefines, =, Maps, ., newHashMap, (, ), ;, assignAllowed, =, new, ArrayDeque, <, Integer, >, (, ), ;]
[Maps, ., newHashMap, (, ), ;, assignAllowed, =, new, ArrayDeque, <, Integer, >, (, ), ;, assignAllowed, ., push, (]
[(, ), ;, assignAllowed, =, new, ArrayDeque, <, Integer, >, (, ), ;, assignAllowed, ., push, (, 1, ), ;]
[;, assignAllowed, =, new, ArrayDeque, <, Integer, >, (, ), ;, assignAllowed, ., push, (, 1, ), ;, allRefInfo, =]
[;, assignAllowed, =, new, ArrayDeque, <, Integer, >, (, ), ;, assignAllowed, ., push, (, 1, ), ;, allRefInfo, =]
[assignAllowed, ., push, (, 1, ), ;, allRefInfo, =, Maps, ., newHashMap, (, ), ;, for, (, Name, name, :]
[;, allRefInfo, =, Maps, ., newHashMap, (, ), ;, for, (, Name, name, :, listOfDefines, ), {, Ref, decl, =]
[;, allRefInfo, =, Maps, ., newHashMap, (, ), ;, for, (, Name, name, :, listOfDefines, ), {, Ref, decl, =]
[;, for, (, Name, name, :, listOfDefines, ), {, Ref, decl, =, name, ., getDeclaration, (, ), ;, if, (]
[;, for, (, Name, name, :, listOfDefines, ), {, Ref, decl, =, name, ., getDeclaration, (, ), ;, if, (]
[(, Name, name, :, listOfDefines, ), {, Ref, decl, =, name, ., getDeclaration, (, ), ;, if, (, decl, !=]
[:, listOfDefines, ), {, Ref, decl, =, name, ., getDeclaration, (, ), ;, if, (, decl, !=, null, ), {]
[:, listOfDefines, ), {, Ref, decl, =, name, ., getDeclaration, (, ), ;, if, (, decl, !=, null, ), {]
[Ref, decl, =, name, ., getDeclaration, (, ), ;, if, (, decl, !=, null, ), {, allRefInfo, ., put, (]
[Ref, decl, =, name, ., getDeclaration, (, ), ;, if, (, decl, !=, null, ), {, allRefInfo, ., put, (]
[., getDeclaration, (, ), ;, if, (, decl, !=, null, ), {, allRefInfo, ., put, (, decl, ., node, ,]
[), ;, if, (, decl, !=, null, ), {, allRefInfo, ., put, (, decl, ., node, ,, new, RefInfo, (]
[if, (, decl, !=, null, ), {, allRefInfo, ., put, (, decl, ., node, ,, new, RefInfo, (, decl, ,]
[(, decl, ., node, ,, new, RefInfo, (, decl, ,, name, ), ), ;, }, for, (, Ref, ref, :]
[(, decl, ., node, ,, new, RefInfo, (, decl, ,, name, ), ), ;, }, for, (, Ref, ref, :]
[,, name, ), ), ;, }, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, if, (]
[,, name, ), ), ;, }, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, if, (]
[), ), ;, }, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, if, (, ref, ==]
[:, name, ., getRefs, (, ), ), {, if, (, ref, ==, decl, ), {, continue, ;, }, if, (]
[:, name, ., getRefs, (, ), ), {, if, (, ref, ==, decl, ), {, continue, ;, }, if, (]
[:, name, ., getRefs, (, ), ), {, if, (, ref, ==, decl, ), {, continue, ;, }, if, (]
[:, name, ., getRefs, (, ), ), {, if, (, ref, ==, decl, ), {, continue, ;, }, if, (]
[), {, if, (, ref, ==, decl, ), {, continue, ;, }, if, (, ref, ., getTwin, (, ), ==]
[if, (, ref, ==, decl, ), {, continue, ;, }, if, (, ref, ., getTwin, (, ), ==, null, ||]
[(, ref, ==, decl, ), {, continue, ;, }, if, (, ref, ., getTwin, (, ), ==, null, ||, !]
[(, ref, ==, decl, ), {, continue, ;, }, if, (, ref, ., getTwin, (, ), ==, null, ||, !]
[(, ref, ==, decl, ), {, continue, ;, }, if, (, ref, ., getTwin, (, ), ==, null, ||, !]
[ref, ., getTwin, (, ), ==, null, ||, !, ref, ., getTwin, (, ), ., isSet, (, ), ), {]
[ref, ., getTwin, (, ), ==, null, ||, !, ref, ., getTwin, (, ), ., isSet, (, ), ), {]
[), ==, null, ||, !, ref, ., getTwin, (, ), ., isSet, (, ), ), {, allRefInfo, ., put, (]
[), ==, null, ||, !, ref, ., getTwin, (, ), ., isSet, (, ), ), {, allRefInfo, ., put, (]
[!, ref, ., getTwin, (, ), ., isSet, (, ), ), {, allRefInfo, ., put, (, ref, ., node, ,]
[getTwin, (, ), ., isSet, (, ), ), {, allRefInfo, ., put, (, ref, ., node, ,, new, RefInfo, (]
[), ., isSet, (, ), ), {, allRefInfo, ., put, (, ref, ., node, ,, new, RefInfo, (, ref, ,]
[,, name, ), ), ;, }, }, }, }, Map, <, String, ,, DefineInfo, >, getAllDefines, (, ), {, return]
[return, allDefines, ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {]
[;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, updateAssignAllowedStack, (]
[@, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, updateAssignAllowedStack, (, n, ,]
[shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, updateAssignAllowedStack, (, n, ,, true, ), ;, return]
[}, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, RefInfo, refInfo, =]
[}, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, RefInfo, refInfo, =]
[void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, RefInfo, refInfo, =, allRefInfo, ., get, (]
[,, Node, n, ,, Node, parent, ), {, RefInfo, refInfo, =, allRefInfo, ., get, (, n, ), ;, if, (]
[,, Node, n, ,, Node, parent, ), {, RefInfo, refInfo, =, allRefInfo, ., get, (, n, ), ;, if, (]
[n, ,, Node, parent, ), {, RefInfo, refInfo, =, allRefInfo, ., get, (, n, ), ;, if, (, refInfo, !=]
[RefInfo, refInfo, =, allRefInfo, ., get, (, n, ), ;, if, (, refInfo, !=, null, ), {, Ref, ref, =]
[RefInfo, refInfo, =, allRefInfo, ., get, (, n, ), ;, if, (, refInfo, !=, null, ), {, Ref, ref, =]
[n, ), ;, if, (, refInfo, !=, null, ), {, Ref, ref, =, refInfo, ., ref, ;, Name, name, =]
[n, ), ;, if, (, refInfo, !=, null, ), {, Ref, ref, =, refInfo, ., ref, ;, Name, name, =]
[null, ), {, Ref, ref, =, refInfo, ., ref, ;, Name, name, =, refInfo, ., name, ;, String, fullName, =]
[null, ), {, Ref, ref, =, refInfo, ., ref, ;, Name, name, =, refInfo, ., name, ;, String, fullName, =]
[ref, ;, Name, name, =, refInfo, ., name, ;, String, fullName, =, name, ., getFullName, (, ), ;, switch, (]
[ref, ;, Name, name, =, refInfo, ., name, ;, String, fullName, =, name, ., getFullName, (, ), ;, switch, (]
[., name, ;, String, fullName, =, name, ., getFullName, (, ), ;, switch, (, ref, ., type, ), {, case]
[String, fullName, =, name, ., getFullName, (, ), ;, switch, (, ref, ., type, ), {, case, SET_FROM_GLOBAL, :, case]
[getFullName, (, ), ;, switch, (, ref, ., type, ), {, case, SET_FROM_GLOBAL, :, case, SET_FROM_LOCAL, :, Node, valParent, =]
[), ;, switch, (, ref, ., type, ), {, case, SET_FROM_GLOBAL, :, case, SET_FROM_LOCAL, :, Node, valParent, =, getValueParent, (]
[type, ), {, case, SET_FROM_GLOBAL, :, case, SET_FROM_LOCAL, :, Node, valParent, =, getValueParent, (, ref, ), ;, Node, val, =]
[type, ), {, case, SET_FROM_GLOBAL, :, case, SET_FROM_LOCAL, :, Node, valParent, =, getValueParent, (, ref, ), ;, Node, val, =]
[:, Node, valParent, =, getValueParent, (, ref, ), ;, Node, val, =, valParent, ., getLastChild, (, ), ;, if, (]
[:, Node, valParent, =, getValueParent, (, ref, ), ;, Node, val, =, valParent, ., getLastChild, (, ), ;, if, (]
[:, Node, valParent, =, getValueParent, (, ref, ), ;, Node, val, =, valParent, ., getLastChild, (, ), ;, if, (]
[:, Node, valParent, =, getValueParent, (, ref, ), ;, Node, val, =, valParent, ., getLastChild, (, ), ;, if, (]
[ref, ), ;, Node, val, =, valParent, ., getLastChild, (, ), ;, if, (, valParent, ., isAssign, (, ), &&]
[ref, ), ;, Node, val, =, valParent, ., getLastChild, (, ), ;, if, (, valParent, ., isAssign, (, ), &&]
[valParent, ., getLastChild, (, ), ;, if, (, valParent, ., isAssign, (, ), &&, name, ., isSimpleName, (, ), &&]
[valParent, ., getLastChild, (, ), ;, if, (, valParent, ., isAssign, (, ), &&, name, ., isSimpleName, (, ), &&]
[valParent, ., getLastChild, (, ), ;, if, (, valParent, ., isAssign, (, ), &&, name, ., isSimpleName, (, ), &&]
[if, (, valParent, ., isAssign, (, ), &&, name, ., isSimpleName, (, ), &&, name, ., getDeclaration, (, ), ==]
[., isAssign, (, ), &&, name, ., isSimpleName, (, ), &&, name, ., getDeclaration, (, ), ==, ref, ), {]
[., isAssign, (, ), &&, name, ., isSimpleName, (, ), &&, name, ., getDeclaration, (, ), ==, ref, ), {]
[&&, name, ., isSimpleName, (, ), &&, name, ., getDeclaration, (, ), ==, ref, ), {, compiler, ., report, (]
[&&, name, ., isSimpleName, (, ), &&, name, ., getDeclaration, (, ), ==, ref, ), {, compiler, ., report, (]
[(, ), &&, name, ., getDeclaration, (, ), ==, ref, ), {, compiler, ., report, (, t, ., makeError, (]
[&&, name, ., getDeclaration, (, ), ==, ref, ), {, compiler, ., report, (, t, ., makeError, (, val, ,]
[., getDeclaration, (, ), ==, ref, ), {, compiler, ., report, (, t, ., makeError, (, val, ,, INVALID_DEFINE_INIT_ERROR, ,]
[compiler, ., report, (, t, ., makeError, (, val, ,, INVALID_DEFINE_INIT_ERROR, ,, fullName, ), ), ;, }, else, if, (]
[report, (, t, ., makeError, (, val, ,, INVALID_DEFINE_INIT_ERROR, ,, fullName, ), ), ;, }, else, if, (, processDefineAssignment, (]
[t, ., makeError, (, val, ,, INVALID_DEFINE_INIT_ERROR, ,, fullName, ), ), ;, }, else, if, (, processDefineAssignment, (, t, ,]
[makeError, (, val, ,, INVALID_DEFINE_INIT_ERROR, ,, fullName, ), ), ;, }, else, if, (, processDefineAssignment, (, t, ,, fullName, ,]
[val, ,, INVALID_DEFINE_INIT_ERROR, ,, fullName, ), ), ;, }, else, if, (, processDefineAssignment, (, t, ,, fullName, ,, val, ,]
[fullName, ), ), ;, }, else, if, (, processDefineAssignment, (, t, ,, fullName, ,, val, ,, valParent, ), ), {]
[fullName, ), ), ;, }, else, if, (, processDefineAssignment, (, t, ,, fullName, ,, val, ,, valParent, ), ), {]
[fullName, ), ), ;, }, else, if, (, processDefineAssignment, (, t, ,, fullName, ,, val, ,, valParent, ), ), {]
[if, (, processDefineAssignment, (, t, ,, fullName, ,, val, ,, valParent, ), ), {, refInfo, ., name, ., removeRef, (]
[(, t, ,, fullName, ,, val, ,, valParent, ), ), {, refInfo, ., name, ., removeRef, (, ref, ), ;]
[,, fullName, ,, val, ,, valParent, ), ), {, refInfo, ., name, ., removeRef, (, ref, ), ;, lvalueToRemoveLater, =]
[refInfo, ., name, ., removeRef, (, ref, ), ;, lvalueToRemoveLater, =, valParent, ;, }, break, ;, default, :, if, (]
[refInfo, ., name, ., removeRef, (, ref, ), ;, lvalueToRemoveLater, =, valParent, ;, }, break, ;, default, :, if, (]
[=, valParent, ;, }, break, ;, default, :, if, (, t, ., inGlobalScope, (, ), ), {, DefineInfo, info, =]
[=, valParent, ;, }, break, ;, default, :, if, (, t, ., inGlobalScope, (, ), ), {, DefineInfo, info, =]
[break, ;, default, :, if, (, t, ., inGlobalScope, (, ), ), {, DefineInfo, info, =, assignableDefines, ., get, (]
[(, t, ., inGlobalScope, (, ), ), {, DefineInfo, info, =, assignableDefines, ., get, (, fullName, ), ;, if, (]
[(, t, ., inGlobalScope, (, ), ), {, DefineInfo, info, =, assignableDefines, ., get, (, fullName, ), ;, if, (]
[., inGlobalScope, (, ), ), {, DefineInfo, info, =, assignableDefines, ., get, (, fullName, ), ;, if, (, info, !=]
[), ), {, DefineInfo, info, =, assignableDefines, ., get, (, fullName, ), ;, if, (, info, !=, null, ), {]
[{, DefineInfo, info, =, assignableDefines, ., get, (, fullName, ), ;, if, (, info, !=, null, ), {, setDefineInfoNotAssignable, (]
[info, =, assignableDefines, ., get, (, fullName, ), ;, if, (, info, !=, null, ), {, setDefineInfoNotAssignable, (, info, ,]
[., get, (, fullName, ), ;, if, (, info, !=, null, ), {, setDefineInfoNotAssignable, (, info, ,, t, ), ;]
[., get, (, fullName, ), ;, if, (, info, !=, null, ), {, setDefineInfoNotAssignable, (, info, ,, t, ), ;]
[), ;, if, (, info, !=, null, ), {, setDefineInfoNotAssignable, (, info, ,, t, ), ;, assignableDefines, ., remove, (]
[info, ,, t, ), ;, assignableDefines, ., remove, (, fullName, ), ;, }, }, break, ;, }, }, if, (]
[info, ,, t, ), ;, assignableDefines, ., remove, (, fullName, ), ;, }, }, break, ;, }, }, if, (]
[info, ,, t, ), ;, assignableDefines, ., remove, (, fullName, ), ;, }, }, break, ;, }, }, if, (]
[,, t, ), ;, assignableDefines, ., remove, (, fullName, ), ;, }, }, break, ;, }, }, if, (, !]
[,, t, ), ;, assignableDefines, ., remove, (, fullName, ), ;, }, }, break, ;, }, }, if, (, !]
[remove, (, fullName, ), ;, }, }, break, ;, }, }, if, (, !, t, ., inGlobalScope, (, ), &&]
[remove, (, fullName, ), ;, }, }, break, ;, }, }, if, (, !, t, ., inGlobalScope, (, ), &&]
[remove, (, fullName, ), ;, }, }, break, ;, }, }, if, (, !, t, ., inGlobalScope, (, ), &&]
[}, break, ;, }, }, if, (, !, t, ., inGlobalScope, (, ), &&, n, ., getJSDocInfo, (, ), !=]
[;, }, }, if, (, !, t, ., inGlobalScope, (, ), &&, n, ., getJSDocInfo, (, ), !=, null, &&]
[;, }, }, if, (, !, t, ., inGlobalScope, (, ), &&, n, ., getJSDocInfo, (, ), !=, null, &&]
[;, }, }, if, (, !, t, ., inGlobalScope, (, ), &&, n, ., getJSDocInfo, (, ), !=, null, &&]
[&&, n, ., getJSDocInfo, (, ), !=, null, &&, n, ., getJSDocInfo, (, ), ., isDefine, (, ), ), {]
[&&, n, ., getJSDocInfo, (, ), !=, null, &&, n, ., getJSDocInfo, (, ), ., isDefine, (, ), ), {]
[(, ), !=, null, &&, n, ., getJSDocInfo, (, ), ., isDefine, (, ), ), {, compiler, ., report, (]
[(, ), !=, null, &&, n, ., getJSDocInfo, (, ), ., isDefine, (, ), ), {, compiler, ., report, (]
[&&, n, ., getJSDocInfo, (, ), ., isDefine, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[., getJSDocInfo, (, ), ., isDefine, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[(, ), ., isDefine, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,]
[{, compiler, ., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, "", ), ), ;, }, if, (]
[{, compiler, ., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, "", ), ), ;, }, if, (]
[., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, "", ), ), ;, }, if, (, lvalueToRemoveLater, ==]
[t, ., makeError, (, n, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, "", ), ), ;, }, if, (, lvalueToRemoveLater, ==, n, ), {]
[makeError, (, n, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, "", ), ), ;, }, if, (, lvalueToRemoveLater, ==, n, ), {, lvalueToRemoveLater, =]
[NON_GLOBAL_DEFINE_INIT_ERROR, ,, "", ), ), ;, }, if, (, lvalueToRemoveLater, ==, n, ), {, lvalueToRemoveLater, =, null, ;, if, (]
[NON_GLOBAL_DEFINE_INIT_ERROR, ,, "", ), ), ;, }, if, (, lvalueToRemoveLater, ==, n, ), {, lvalueToRemoveLater, =, null, ;, if, (]
[==, n, ), {, lvalueToRemoveLater, =, null, ;, if, (, n, ., isAssign, (, ), ), {, Node, last, =]
[==, n, ), {, lvalueToRemoveLater, =, null, ;, if, (, n, ., isAssign, (, ), ), {, Node, last, =]
[null, ;, if, (, n, ., isAssign, (, ), ), {, Node, last, =, n, ., getLastChild, (, ), ;]
[null, ;, if, (, n, ., isAssign, (, ), ), {, Node, last, =, n, ., getLastChild, (, ), ;]
[n, ., isAssign, (, ), ), {, Node, last, =, n, ., getLastChild, (, ), ;, n, ., removeChild, (]
[(, ), ), {, Node, last, =, n, ., getLastChild, (, ), ;, n, ., removeChild, (, last, ), ;]
[(, ), ), {, Node, last, =, n, ., getLastChild, (, ), ;, n, ., removeChild, (, last, ), ;]
[Node, last, =, n, ., getLastChild, (, ), ;, n, ., removeChild, (, last, ), ;, parent, ., replaceChild, (]
[=, n, ., getLastChild, (, ), ;, n, ., removeChild, (, last, ), ;, parent, ., replaceChild, (, n, ,]
[;, n, ., removeChild, (, last, ), ;, parent, ., replaceChild, (, n, ,, last, ), ;, }, else, {]
[;, n, ., removeChild, (, last, ), ;, parent, ., replaceChild, (, n, ,, last, ), ;, }, else, {]
[(, last, ), ;, parent, ., replaceChild, (, n, ,, last, ), ;, }, else, {, Preconditions, ., checkState, (]
[(, last, ), ;, parent, ., replaceChild, (, n, ,, last, ), ;, }, else, {, Preconditions, ., checkState, (]
[(, n, ,, last, ), ;, }, else, {, Preconditions, ., checkState, (, n, ., isName, (, ), ), ;]
[(, n, ,, last, ), ;, }, else, {, Preconditions, ., checkState, (, n, ., isName, (, ), ), ;]
[), ;, }, else, {, Preconditions, ., checkState, (, n, ., isName, (, ), ), ;, n, ., removeChild, (]
[), ;, }, else, {, Preconditions, ., checkState, (, n, ., isName, (, ), ), ;, n, ., removeChild, (]
[(, n, ., isName, (, ), ), ;, n, ., removeChild, (, n, ., getFirstChild, (, ), ), ;, }]
[(, n, ., isName, (, ), ), ;, n, ., removeChild, (, n, ., getFirstChild, (, ), ), ;, }]
[., removeChild, (, n, ., getFirstChild, (, ), ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, if, (]
[., removeChild, (, n, ., getFirstChild, (, ), ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, if, (]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, if, (, n, ., isCall, (, ), ), {, if, (]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, if, (, n, ., isCall, (, ), ), {, if, (]
[., isCall, (, ), ), {, if, (, t, ., inGlobalScope, (, ), ), {, for, (, DefineInfo, info, :]
[., isCall, (, ), ), {, if, (, t, ., inGlobalScope, (, ), ), {, for, (, DefineInfo, info, :]
[(, t, ., inGlobalScope, (, ), ), {, for, (, DefineInfo, info, :, assignableDefines, ., values, (, ), ), {]
[., inGlobalScope, (, ), ), {, for, (, DefineInfo, info, :, assignableDefines, ., values, (, ), ), {, setDefineInfoNotAssignable, (]
[(, ), ), {, for, (, DefineInfo, info, :, assignableDefines, ., values, (, ), ), {, setDefineInfoNotAssignable, (, info, ,]
[for, (, DefineInfo, info, :, assignableDefines, ., values, (, ), ), {, setDefineInfoNotAssignable, (, info, ,, t, ), ;, }]
[for, (, DefineInfo, info, :, assignableDefines, ., values, (, ), ), {, setDefineInfoNotAssignable, (, info, ,, t, ), ;, }]
[(, ), ), {, setDefineInfoNotAssignable, (, info, ,, t, ), ;, }, assignableDefines, ., clear, (, ), ;, }, }]
[), {, setDefineInfoNotAssignable, (, info, ,, t, ), ;, }, assignableDefines, ., clear, (, ), ;, }, }, updateAssignAllowedStack, (]
[setDefineInfoNotAssignable, (, info, ,, t, ), ;, }, assignableDefines, ., clear, (, ), ;, }, }, updateAssignAllowedStack, (, n, ,]
[(, n, ,, false, ), ;, }, private, void, updateAssignAllowedStack, (, Node, n, ,, boolean, entering, ), {, switch, (]
[(, n, ,, false, ), ;, }, private, void, updateAssignAllowedStack, (, Node, n, ,, boolean, entering, ), {, switch, (]
[void, updateAssignAllowedStack, (, Node, n, ,, boolean, entering, ), {, switch, (, n, ., getType, (, ), ), {, case]
[void, updateAssignAllowedStack, (, Node, n, ,, boolean, entering, ), {, switch, (, n, ., getType, (, ), ), {, case]
[,, boolean, entering, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., CASE, :, case]
[,, boolean, entering, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., CASE, :, case]
[switch, (, n, ., getType, (, ), ), {, case, Token, ., CASE, :, case, Token, ., FOR, :, case]
[switch, (, n, ., getType, (, ), ), {, case, Token, ., CASE, :, case, Token, ., FOR, :, case]
[(, ), ), {, case, Token, ., CASE, :, case, Token, ., FOR, :, case, Token, ., FUNCTION, :, case]
[(, ), ), {, case, Token, ., CASE, :, case, Token, ., FOR, :, case, Token, ., FUNCTION, :, case]
[Token, ., CASE, :, case, Token, ., FOR, :, case, Token, ., FUNCTION, :, case, Token, ., HOOK, :, case]
[Token, ., CASE, :, case, Token, ., FOR, :, case, Token, ., FUNCTION, :, case, Token, ., HOOK, :, case]
[Token, ., FOR, :, case, Token, ., FUNCTION, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case]
[Token, ., FOR, :, case, Token, ., FUNCTION, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case]
[Token, ., FUNCTION, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case, Token, ., SWITCH, :, case]
[Token, ., FUNCTION, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case, Token, ., SWITCH, :, case]
[., HOOK, :, case, Token, ., IF, :, case, Token, ., SWITCH, :, case, Token, ., WHILE, :, if, (]
[case, Token, ., IF, :, case, Token, ., SWITCH, :, case, Token, ., WHILE, :, if, (, entering, ), {]
[case, Token, ., IF, :, case, Token, ., SWITCH, :, case, Token, ., WHILE, :, if, (, entering, ), {]
[:, case, Token, ., SWITCH, :, case, Token, ., WHILE, :, if, (, entering, ), {, assignAllowed, ., push, (]
[case, Token, ., WHILE, :, if, (, entering, ), {, assignAllowed, ., push, (, 0, ), ;, }, else, {]
[case, Token, ., WHILE, :, if, (, entering, ), {, assignAllowed, ., push, (, 0, ), ;, }, else, {]
[else, {, assignAllowed, ., remove, (, ), ;, }, break, ;, }, }, private, boolean, isAssignAllowed, (, ), {, return]
[else, {, assignAllowed, ., remove, (, ), ;, }, break, ;, }, }, private, boolean, isAssignAllowed, (, ), {, return]
[else, {, assignAllowed, ., remove, (, ), ;, }, break, ;, }, }, private, boolean, isAssignAllowed, (, ), {, return]
[), ;, }, break, ;, }, }, private, boolean, isAssignAllowed, (, ), {, return, assignAllowed, ., element, (, ), ==]
[}, private, boolean, processDefineAssignment, (, NodeTraversal, t, ,, String, name, ,, Node, value, ,, Node, valueParent, ), {, if, (]
[}, private, boolean, processDefineAssignment, (, NodeTraversal, t, ,, String, name, ,, Node, value, ,, Node, valueParent, ), {, if, (]
[}, private, boolean, processDefineAssignment, (, NodeTraversal, t, ,, String, name, ,, Node, value, ,, Node, valueParent, ), {, if, (]
[boolean, processDefineAssignment, (, NodeTraversal, t, ,, String, name, ,, Node, value, ,, Node, valueParent, ), {, if, (, value, ==]
[(, NodeTraversal, t, ,, String, name, ,, Node, value, ,, Node, valueParent, ), {, if, (, value, ==, null, ||]
[NodeTraversal, t, ,, String, name, ,, Node, value, ,, Node, valueParent, ), {, if, (, value, ==, null, ||, !]
[NodeTraversal, t, ,, String, name, ,, Node, value, ,, Node, valueParent, ), {, if, (, value, ==, null, ||, !]
[name, ,, Node, value, ,, Node, valueParent, ), {, if, (, value, ==, null, ||, !, NodeUtil, ., isValidDefineValue, (]
[Node, value, ,, Node, valueParent, ), {, if, (, value, ==, null, ||, !, NodeUtil, ., isValidDefineValue, (, value, ,]
[Node, value, ,, Node, valueParent, ), {, if, (, value, ==, null, ||, !, NodeUtil, ., isValidDefineValue, (, value, ,]
[(, value, ==, null, ||, !, NodeUtil, ., isValidDefineValue, (, value, ,, allDefines, ., keySet, (, ), ), ), {]
[(, value, ==, null, ||, !, NodeUtil, ., isValidDefineValue, (, value, ,, allDefines, ., keySet, (, ), ), ), {]
[||, !, NodeUtil, ., isValidDefineValue, (, value, ,, allDefines, ., keySet, (, ), ), ), {, compiler, ., report, (]
[||, !, NodeUtil, ., isValidDefineValue, (, value, ,, allDefines, ., keySet, (, ), ), ), {, compiler, ., report, (]
[isValidDefineValue, (, value, ,, allDefines, ., keySet, (, ), ), ), {, compiler, ., report, (, t, ., makeError, (]
[value, ,, allDefines, ., keySet, (, ), ), ), {, compiler, ., report, (, t, ., makeError, (, value, ,]
[allDefines, ., keySet, (, ), ), ), {, compiler, ., report, (, t, ., makeError, (, value, ,, INVALID_DEFINE_INIT_ERROR, ,]
[compiler, ., report, (, t, ., makeError, (, value, ,, INVALID_DEFINE_INIT_ERROR, ,, name, ), ), ;, }, else, if, (]
[., report, (, t, ., makeError, (, value, ,, INVALID_DEFINE_INIT_ERROR, ,, name, ), ), ;, }, else, if, (, !]
[makeError, (, value, ,, INVALID_DEFINE_INIT_ERROR, ,, name, ), ), ;, }, else, if, (, !, isAssignAllowed, (, ), ), {]
[makeError, (, value, ,, INVALID_DEFINE_INIT_ERROR, ,, name, ), ), ;, }, else, if, (, !, isAssignAllowed, (, ), ), {]
[INVALID_DEFINE_INIT_ERROR, ,, name, ), ), ;, }, else, if, (, !, isAssignAllowed, (, ), ), {, compiler, ., report, (]
[INVALID_DEFINE_INIT_ERROR, ,, name, ), ), ;, }, else, if, (, !, isAssignAllowed, (, ), ), {, compiler, ., report, (]
[), ;, }, else, if, (, !, isAssignAllowed, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[}, else, if, (, !, isAssignAllowed, (, ), ), {, compiler, ., report, (, t, ., makeError, (, valueParent, ,]
[if, (, !, isAssignAllowed, (, ), ), {, compiler, ., report, (, t, ., makeError, (, valueParent, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,]
[report, (, t, ., makeError, (, valueParent, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, name, ), ), ;, }, else, {, DefineInfo, info, =]
[report, (, t, ., makeError, (, valueParent, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, name, ), ), ;, }, else, {, DefineInfo, info, =]
[makeError, (, valueParent, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, name, ), ), ;, }, else, {, DefineInfo, info, =, allDefines, ., get, (]
[,, name, ), ), ;, }, else, {, DefineInfo, info, =, allDefines, ., get, (, name, ), ;, if, (]
[,, name, ), ), ;, }, else, {, DefineInfo, info, =, allDefines, ., get, (, name, ), ;, if, (]
[), ), ;, }, else, {, DefineInfo, info, =, allDefines, ., get, (, name, ), ;, if, (, info, ==]
[}, else, {, DefineInfo, info, =, allDefines, ., get, (, name, ), ;, if, (, info, ==, null, ), {]
[{, DefineInfo, info, =, allDefines, ., get, (, name, ), ;, if, (, info, ==, null, ), {, info, =]
[=, allDefines, ., get, (, name, ), ;, if, (, info, ==, null, ), {, info, =, new, DefineInfo, (]
[., get, (, name, ), ;, if, (, info, ==, null, ), {, info, =, new, DefineInfo, (, value, ,]
[name, ), ;, if, (, info, ==, null, ), {, info, =, new, DefineInfo, (, value, ,, valueParent, ), ;]
[name, ), ;, if, (, info, ==, null, ), {, info, =, new, DefineInfo, (, value, ,, valueParent, ), ;]
[(, info, ==, null, ), {, info, =, new, DefineInfo, (, value, ,, valueParent, ), ;, allDefines, ., put, (]
[==, null, ), {, info, =, new, DefineInfo, (, value, ,, valueParent, ), ;, allDefines, ., put, (, name, ,]
[{, info, =, new, DefineInfo, (, value, ,, valueParent, ), ;, allDefines, ., put, (, name, ,, info, ), ;]
[{, info, =, new, DefineInfo, (, value, ,, valueParent, ), ;, allDefines, ., put, (, name, ,, info, ), ;]
[DefineInfo, (, value, ,, valueParent, ), ;, allDefines, ., put, (, name, ,, info, ), ;, assignableDefines, ., put, (]
[value, ,, valueParent, ), ;, allDefines, ., put, (, name, ,, info, ), ;, assignableDefines, ., put, (, name, ,]
[put, (, name, ,, info, ), ;, assignableDefines, ., put, (, name, ,, info, ), ;, }, else, if, (]
[put, (, name, ,, info, ), ;, assignableDefines, ., put, (, name, ,, info, ), ;, }, else, if, (]
[info, ), ;, assignableDefines, ., put, (, name, ,, info, ), ;, }, else, if, (, info, ., recordAssignment, (]
[put, (, name, ,, info, ), ;, }, else, if, (, info, ., recordAssignment, (, value, ), ), {, return]
[), ;, }, else, if, (, info, ., recordAssignment, (, value, ), ), {, return, true, ;, }, else, {]
[), ;, }, else, if, (, info, ., recordAssignment, (, value, ), ), {, return, true, ;, }, else, {]
[if, (, info, ., recordAssignment, (, value, ), ), {, return, true, ;, }, else, {, compiler, ., report, (]
[if, (, info, ., recordAssignment, (, value, ), ), {, return, true, ;, }, else, {, compiler, ., report, (]
[recordAssignment, (, value, ), ), {, return, true, ;, }, else, {, compiler, ., report, (, t, ., makeError, (]
[value, ), ), {, return, true, ;, }, else, {, compiler, ., report, (, t, ., makeError, (, valueParent, ,]
[), {, return, true, ;, }, else, {, compiler, ., report, (, t, ., makeError, (, valueParent, ,, DEFINE_NOT_ASSIGNABLE_ERROR, ,]
[return, true, ;, }, else, {, compiler, ., report, (, t, ., makeError, (, valueParent, ,, DEFINE_NOT_ASSIGNABLE_ERROR, ,, name, ,]
[return, true, ;, }, else, {, compiler, ., report, (, t, ., makeError, (, valueParent, ,, DEFINE_NOT_ASSIGNABLE_ERROR, ,, name, ,]
[., makeError, (, valueParent, ,, DEFINE_NOT_ASSIGNABLE_ERROR, ,, name, ,, info, ., getReasonWhyNotAssignable, (, ), ), ), ;, }, }, return]
[), ), ), ;, }, }, return, false, ;, }, private, static, Node, getValueParent, (, Ref, ref, ), {, return]
[), ), ), ;, }, }, return, false, ;, }, private, static, Node, getValueParent, (, Ref, ref, ), {, return]
[), ), ), ;, }, }, return, false, ;, }, private, static, Node, getValueParent, (, Ref, ref, ), {, return]
[), ), ), ;, }, }, return, false, ;, }, private, static, Node, getValueParent, (, Ref, ref, ), {, return]
[), ), ), ;, }, }, return, false, ;, }, private, static, Node, getValueParent, (, Ref, ref, ), {, return]
[), ), ), ;, }, }, return, false, ;, }, private, static, Node, getValueParent, (, Ref, ref, ), {, return]
[;, }, private, static, Node, getValueParent, (, Ref, ref, ), {, return, ref, ., node, ., getParent, (, ), !=]
[private, static, Node, getValueParent, (, Ref, ref, ), {, return, ref, ., node, ., getParent, (, ), !=, null, &&]
[private, static, Node, getValueParent, (, Ref, ref, ), {, return, ref, ., node, ., getParent, (, ), !=, null, &&]
[private, static, Node, getValueParent, (, Ref, ref, ), {, return, ref, ., node, ., getParent, (, ), !=, null, &&]
[private, static, Node, getValueParent, (, Ref, ref, ), {, return, ref, ., node, ., getParent, (, ), !=, null, &&]
[node, ., getParent, (, ), !=, null, &&, ref, ., node, ., getParent, (, ), ., isVar, (, ), ?]
[node, ., getParent, (, ), !=, null, &&, ref, ., node, ., getParent, (, ), ., isVar, (, ), ?]
[), !=, null, &&, ref, ., node, ., getParent, (, ), ., isVar, (, ), ?, ref, ., node, :]
[), !=, null, &&, ref, ., node, ., getParent, (, ), ., isVar, (, ), ?, ref, ., node, :]
[), !=, null, &&, ref, ., node, ., getParent, (, ), ., isVar, (, ), ?, ref, ., node, :]
[ref, ., node, ., getParent, (, ), ;, }, private, void, setDefineInfoNotAssignable, (, DefineInfo, info, ,, NodeTraversal, t, ), {]
[ref, ., node, ., getParent, (, ), ;, }, private, void, setDefineInfoNotAssignable, (, DefineInfo, info, ,, NodeTraversal, t, ), {]
[getParent, (, ), ;, }, private, void, setDefineInfoNotAssignable, (, DefineInfo, info, ,, NodeTraversal, t, ), {, info, ., setNotAssignable, (]
[), ;, }, private, void, setDefineInfoNotAssignable, (, DefineInfo, info, ,, NodeTraversal, t, ), {, info, ., setNotAssignable, (, format, (]
[}, private, void, setDefineInfoNotAssignable, (, DefineInfo, info, ,, NodeTraversal, t, ), {, info, ., setNotAssignable, (, format, (, REASON_DEFINE_NOT_ASSIGNABLE, ,]
[}, private, void, setDefineInfoNotAssignable, (, DefineInfo, info, ,, NodeTraversal, t, ), {, info, ., setNotAssignable, (, format, (, REASON_DEFINE_NOT_ASSIGNABLE, ,]
[info, ,, NodeTraversal, t, ), {, info, ., setNotAssignable, (, format, (, REASON_DEFINE_NOT_ASSIGNABLE, ,, t, ., getLineNumber, (, ), ,]
[info, ,, NodeTraversal, t, ), {, info, ., setNotAssignable, (, format, (, REASON_DEFINE_NOT_ASSIGNABLE, ,, t, ., getLineNumber, (, ), ,]
[class, RefInfo, {, final, Ref, ref, ;, final, Name, name, ;, RefInfo, (, Ref, ref, ,, Name, name, ), {]
[class, RefInfo, {, final, Ref, ref, ;, final, Name, name, ;, RefInfo, (, Ref, ref, ,, Name, name, ), {]
[Ref, ref, ;, final, Name, name, ;, RefInfo, (, Ref, ref, ,, Name, name, ), {, this, ., ref, =]
[;, final, Name, name, ;, RefInfo, (, Ref, ref, ,, Name, name, ), {, this, ., ref, =, ref, ;]
[;, final, Name, name, ;, RefInfo, (, Ref, ref, ,, Name, name, ), {, this, ., ref, =, ref, ;]
[;, RefInfo, (, Ref, ref, ,, Name, name, ), {, this, ., ref, =, ref, ;, this, ., name, =]
[lastValue, ;, private, boolean, isAssignable, ;, private, String, reasonNotAssignable, ;, public, DefineInfo, (, Node, initialValue, ,, Node, initialValueParent, ), {]
[lastValue, ;, private, boolean, isAssignable, ;, private, String, reasonNotAssignable, ;, public, DefineInfo, (, Node, initialValue, ,, Node, initialValueParent, ), {]
[isAssignable, ;, private, String, reasonNotAssignable, ;, public, DefineInfo, (, Node, initialValue, ,, Node, initialValueParent, ), {, this, ., initialValueParent, =]
[private, String, reasonNotAssignable, ;, public, DefineInfo, (, Node, initialValue, ,, Node, initialValueParent, ), {, this, ., initialValueParent, =, initialValueParent, ;]
[private, String, reasonNotAssignable, ;, public, DefineInfo, (, Node, initialValue, ,, Node, initialValueParent, ), {, this, ., initialValueParent, =, initialValueParent, ;]
[public, DefineInfo, (, Node, initialValue, ,, Node, initialValueParent, ), {, this, ., initialValueParent, =, initialValueParent, ;, this, ., initialValue, =]
[(, Node, initialValue, ,, Node, initialValueParent, ), {, this, ., initialValueParent, =, initialValueParent, ;, this, ., initialValue, =, initialValue, ;]
[initialValue, ,, Node, initialValueParent, ), {, this, ., initialValueParent, =, initialValueParent, ;, this, ., initialValue, =, initialValue, ;, lastValue, =]
[Node, initialValueParent, ), {, this, ., initialValueParent, =, initialValueParent, ;, this, ., initialValue, =, initialValue, ;, lastValue, =, initialValue, ;]
[), {, this, ., initialValueParent, =, initialValueParent, ;, this, ., initialValue, =, initialValue, ;, lastValue, =, initialValue, ;, isAssignable, =]
[=, initialValue, ;, lastValue, =, initialValue, ;, isAssignable, =, true, ;, }, public, void, setNotAssignable, (, String, reason, ), {]
[;, lastValue, =, initialValue, ;, isAssignable, =, true, ;, }, public, void, setNotAssignable, (, String, reason, ), {, isAssignable, =]
[=, initialValue, ;, isAssignable, =, true, ;, }, public, void, setNotAssignable, (, String, reason, ), {, isAssignable, =, false, ;]
[;, isAssignable, =, true, ;, }, public, void, setNotAssignable, (, String, reason, ), {, isAssignable, =, false, ;, reasonNotAssignable, =]
[String, reason, ), {, isAssignable, =, false, ;, reasonNotAssignable, =, reason, ;, }, public, String, getReasonWhyNotAssignable, (, ), {, return]
[;, }, public, String, getReasonWhyNotAssignable, (, ), {, return, reasonNotAssignable, ;, }, public, boolean, recordAssignment, (, Node, value, ), {]
[public, String, getReasonWhyNotAssignable, (, ), {, return, reasonNotAssignable, ;, }, public, boolean, recordAssignment, (, Node, value, ), {, lastValue, =]
[(, ), {, return, reasonNotAssignable, ;, }, public, boolean, recordAssignment, (, Node, value, ), {, lastValue, =, value, ;, return]
[(, Node, value, ), {, lastValue, =, value, ;, return, isAssignable, ;, }, public, Node, getLastValue, (, ), {, return]
