[util, ., List, ;, public, class, TickUnits, implements, TickUnitSource, ,, Cloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[,, Serializable, {, private, static, final, long, serialVersionUID, =, 1134174035901467545L, ;, private, List, tickUnits, ;, public, TickUnits, (, ), {]
[,, Serializable, {, private, static, final, long, serialVersionUID, =, 1134174035901467545L, ;, private, List, tickUnits, ;, public, TickUnits, (, ), {]
[static, final, long, serialVersionUID, =, 1134174035901467545L, ;, private, List, tickUnits, ;, public, TickUnits, (, ), {, this, ., tickUnits, =]
[this, ., tickUnits, =, new, ArrayList, (, ), ;, }, public, void, add, (, TickUnit, unit, ), {, if, (]
[this, ., tickUnits, =, new, ArrayList, (, ), ;, }, public, void, add, (, TickUnit, unit, ), {, if, (]
[tickUnits, =, new, ArrayList, (, ), ;, }, public, void, add, (, TickUnit, unit, ), {, if, (, unit, ==]
[(, ), ;, }, public, void, add, (, TickUnit, unit, ), {, if, (, unit, ==, null, ), {, throw]
[}, public, void, add, (, TickUnit, unit, ), {, if, (, unit, ==, null, ), {, throw, new, NullPointerException, (]
[(, TickUnit, unit, ), {, if, (, unit, ==, null, ), {, throw, new, NullPointerException, (, "Null 'unit' argument.", ), ;, }]
[(, TickUnit, unit, ), {, if, (, unit, ==, null, ), {, throw, new, NullPointerException, (, "Null 'unit' argument.", ), ;, }]
[(, TickUnit, unit, ), {, if, (, unit, ==, null, ), {, throw, new, NullPointerException, (, "Null 'unit' argument.", ), ;, }]
[(, unit, ==, null, ), {, throw, new, NullPointerException, (, "Null 'unit' argument.", ), ;, }, this, ., tickUnits, ., add, (]
[null, ), {, throw, new, NullPointerException, (, "Null 'unit' argument.", ), ;, }, this, ., tickUnits, ., add, (, unit, ), ;]
[null, ), {, throw, new, NullPointerException, (, "Null 'unit' argument.", ), ;, }, this, ., tickUnits, ., add, (, unit, ), ;]
[new, NullPointerException, (, "Null 'unit' argument.", ), ;, }, this, ., tickUnits, ., add, (, unit, ), ;, Collections, ., sort, (]
[new, NullPointerException, (, "Null 'unit' argument.", ), ;, }, this, ., tickUnits, ., add, (, unit, ), ;, Collections, ., sort, (]
[unit, ), ;, Collections, ., sort, (, this, ., tickUnits, ), ;, }, public, int, size, (, ), {, return]
[unit, ), ;, Collections, ., sort, (, this, ., tickUnits, ), ;, }, public, int, size, (, ), {, return]
[unit, ), ;, Collections, ., sort, (, this, ., tickUnits, ), ;, }, public, int, size, (, ), {, return]
[{, return, this, ., tickUnits, ., size, (, ), ;, }, public, TickUnit, get, (, int, pos, ), {, return]
[., tickUnits, ., size, (, ), ;, }, public, TickUnit, get, (, int, pos, ), {, return, (, TickUnit, )]
[., tickUnits, ., size, (, ), ;, }, public, TickUnit, get, (, int, pos, ), {, return, (, TickUnit, )]
[., tickUnits, ., size, (, ), ;, }, public, TickUnit, get, (, int, pos, ), {, return, (, TickUnit, )]
[;, }, public, TickUnit, get, (, int, pos, ), {, return, (, TickUnit, ), this, ., tickUnits, ., get, (]
[., tickUnits, ., get, (, pos, ), ;, }, public, TickUnit, getLargerTickUnit, (, TickUnit, unit, ), {, int, index, =]
[., tickUnits, ., get, (, pos, ), ;, }, public, TickUnit, getLargerTickUnit, (, TickUnit, unit, ), {, int, index, =]
[(, pos, ), ;, }, public, TickUnit, getLargerTickUnit, (, TickUnit, unit, ), {, int, index, =, Collections, ., binarySearch, (]
[(, pos, ), ;, }, public, TickUnit, getLargerTickUnit, (, TickUnit, unit, ), {, int, index, =, Collections, ., binarySearch, (]
[}, public, TickUnit, getLargerTickUnit, (, TickUnit, unit, ), {, int, index, =, Collections, ., binarySearch, (, this, ., tickUnits, ,]
[TickUnit, unit, ), {, int, index, =, Collections, ., binarySearch, (, this, ., tickUnits, ,, unit, ), ;, if, (]
[TickUnit, unit, ), {, int, index, =, Collections, ., binarySearch, (, this, ., tickUnits, ,, unit, ), ;, if, (]
[), {, int, index, =, Collections, ., binarySearch, (, this, ., tickUnits, ,, unit, ), ;, if, (, index, >=]
[index, =, Collections, ., binarySearch, (, this, ., tickUnits, ,, unit, ), ;, if, (, index, >=, 0, ), {]
[Collections, ., binarySearch, (, this, ., tickUnits, ,, unit, ), ;, if, (, index, >=, 0, ), {, index, =]
[Collections, ., binarySearch, (, this, ., tickUnits, ,, unit, ), ;, if, (, index, >=, 0, ), {, index, =]
[binarySearch, (, this, ., tickUnits, ,, unit, ), ;, if, (, index, >=, 0, ), {, index, =, index, +]
[,, unit, ), ;, if, (, index, >=, 0, ), {, index, =, index, +, 1, ;, }, else, {]
[), ;, if, (, index, >=, 0, ), {, index, =, index, +, 1, ;, }, else, {, index, =]
[;, if, (, index, >=, 0, ), {, index, =, index, +, 1, ;, }, else, {, index, =, -]
[>=, 0, ), {, index, =, index, +, 1, ;, }, else, {, index, =, -, index, ;, }, return]
[{, index, =, index, +, 1, ;, }, else, {, index, =, -, index, ;, }, return, (, TickUnit, )]
[{, index, =, index, +, 1, ;, }, else, {, index, =, -, index, ;, }, return, (, TickUnit, )]
[{, index, =, index, +, 1, ;, }, else, {, index, =, -, index, ;, }, return, (, TickUnit, )]
[;, }, else, {, index, =, -, index, ;, }, return, (, TickUnit, ), this, ., tickUnits, ., get, (]
[;, }, else, {, index, =, -, index, ;, }, return, (, TickUnit, ), this, ., tickUnits, ., get, (]
[index, =, -, index, ;, }, return, (, TickUnit, ), this, ., tickUnits, ., get, (, Math, ., min, (]
[-, index, ;, }, return, (, TickUnit, ), this, ., tickUnits, ., get, (, Math, ., min, (, index, ,]
[-, index, ;, }, return, (, TickUnit, ), this, ., tickUnits, ., get, (, Math, ., min, (, index, ,]
[-, index, ;, }, return, (, TickUnit, ), this, ., tickUnits, ., get, (, Math, ., min, (, index, ,]
[-, index, ;, }, return, (, TickUnit, ), this, ., tickUnits, ., get, (, Math, ., min, (, index, ,]
[this, ., tickUnits, ., get, (, Math, ., min, (, index, ,, this, ., tickUnits, ., size, (, ), -]
[size, (, ), -, 1, ), ), ;, }, public, TickUnit, getCeilingTickUnit, (, TickUnit, unit, ), {, int, index, =]
[size, (, ), -, 1, ), ), ;, }, public, TickUnit, getCeilingTickUnit, (, TickUnit, unit, ), {, int, index, =]
[1, ), ), ;, }, public, TickUnit, getCeilingTickUnit, (, TickUnit, unit, ), {, int, index, =, Collections, ., binarySearch, (]
[1, ), ), ;, }, public, TickUnit, getCeilingTickUnit, (, TickUnit, unit, ), {, int, index, =, Collections, ., binarySearch, (]
[}, public, TickUnit, getCeilingTickUnit, (, TickUnit, unit, ), {, int, index, =, Collections, ., binarySearch, (, this, ., tickUnits, ,]
[TickUnit, unit, ), {, int, index, =, Collections, ., binarySearch, (, this, ., tickUnits, ,, unit, ), ;, if, (]
[TickUnit, unit, ), {, int, index, =, Collections, ., binarySearch, (, this, ., tickUnits, ,, unit, ), ;, if, (]
[), {, int, index, =, Collections, ., binarySearch, (, this, ., tickUnits, ,, unit, ), ;, if, (, index, >=]
[=, Collections, ., binarySearch, (, this, ., tickUnits, ,, unit, ), ;, if, (, index, >=, 0, ), {, return]
[binarySearch, (, this, ., tickUnits, ,, unit, ), ;, if, (, index, >=, 0, ), {, return, (, TickUnit, )]
[binarySearch, (, this, ., tickUnits, ,, unit, ), ;, if, (, index, >=, 0, ), {, return, (, TickUnit, )]
[binarySearch, (, this, ., tickUnits, ,, unit, ), ;, if, (, index, >=, 0, ), {, return, (, TickUnit, )]
[unit, ), ;, if, (, index, >=, 0, ), {, return, (, TickUnit, ), this, ., tickUnits, ., get, (]
[>=, 0, ), {, return, (, TickUnit, ), this, ., tickUnits, ., get, (, index, ), ;, }, else, {]
[), {, return, (, TickUnit, ), this, ., tickUnits, ., get, (, index, ), ;, }, else, {, index, =]
[{, return, (, TickUnit, ), this, ., tickUnits, ., get, (, index, ), ;, }, else, {, index, =, -]
[return, (, TickUnit, ), this, ., tickUnits, ., get, (, index, ), ;, }, else, {, index, =, -, (]
[return, (, TickUnit, ), this, ., tickUnits, ., get, (, index, ), ;, }, else, {, index, =, -, (]
[TickUnit, ), this, ., tickUnits, ., get, (, index, ), ;, }, else, {, index, =, -, (, index, +]
[tickUnits, ., get, (, index, ), ;, }, else, {, index, =, -, (, index, +, 1, ), ;, return]
[(, index, ), ;, }, else, {, index, =, -, (, index, +, 1, ), ;, return, (, TickUnit, )]
[(, index, ), ;, }, else, {, index, =, -, (, index, +, 1, ), ;, return, (, TickUnit, )]
[(, index, ), ;, }, else, {, index, =, -, (, index, +, 1, ), ;, return, (, TickUnit, )]
[{, index, =, -, (, index, +, 1, ), ;, return, (, TickUnit, ), this, ., tickUnits, ., get, (]
[{, index, =, -, (, index, +, 1, ), ;, return, (, TickUnit, ), this, ., tickUnits, ., get, (]
[(, index, +, 1, ), ;, return, (, TickUnit, ), this, ., tickUnits, ., get, (, Math, ., min, (]
[+, 1, ), ;, return, (, TickUnit, ), this, ., tickUnits, ., get, (, Math, ., min, (, index, ,]
[+, 1, ), ;, return, (, TickUnit, ), this, ., tickUnits, ., get, (, Math, ., min, (, index, ,]
[+, 1, ), ;, return, (, TickUnit, ), this, ., tickUnits, ., get, (, Math, ., min, (, index, ,]
[+, 1, ), ;, return, (, TickUnit, ), this, ., tickUnits, ., get, (, Math, ., min, (, index, ,]
[this, ., tickUnits, ., get, (, Math, ., min, (, index, ,, this, ., tickUnits, ., size, (, ), -]
[., size, (, ), -, 1, ), ), ;, }, }, public, TickUnit, getCeilingTickUnit, (, double, size, ), {, return]
[(, ), -, 1, ), ), ;, }, }, public, TickUnit, getCeilingTickUnit, (, double, size, ), {, return, getCeilingTickUnit, (]
[1, ), ), ;, }, }, public, TickUnit, getCeilingTickUnit, (, double, size, ), {, return, getCeilingTickUnit, (, new, NumberTickUnit, (]
[), ;, }, }, public, TickUnit, getCeilingTickUnit, (, double, size, ), {, return, getCeilingTickUnit, (, new, NumberTickUnit, (, size, ,]
[), ;, }, }, public, TickUnit, getCeilingTickUnit, (, double, size, ), {, return, getCeilingTickUnit, (, new, NumberTickUnit, (, size, ,]
[NumberFormat, ., getInstance, (, ), ), ), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, TickUnits, clone, =]
[(, ), ), ), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, TickUnits, clone, =, (, TickUnits, )]
[(, ), ), ), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, TickUnits, clone, =, (, TickUnits, )]
[public, Object, clone, (, ), throws, CloneNotSupportedException, {, TickUnits, clone, =, (, TickUnits, ), super, ., clone, (, ), ;]
[public, Object, clone, (, ), throws, CloneNotSupportedException, {, TickUnits, clone, =, (, TickUnits, ), super, ., clone, (, ), ;]
[), throws, CloneNotSupportedException, {, TickUnits, clone, =, (, TickUnits, ), super, ., clone, (, ), ;, clone, ., tickUnits, =]
[(, TickUnits, ), super, ., clone, (, ), ;, clone, ., tickUnits, =, new, java, ., util, ., ArrayList, (]
[(, TickUnits, ), super, ., clone, (, ), ;, clone, ., tickUnits, =, new, java, ., util, ., ArrayList, (]
[(, ), ;, clone, ., tickUnits, =, new, java, ., util, ., ArrayList, (, this, ., tickUnits, ), ;, return]
[(, this, ., tickUnits, ), ;, return, clone, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[(, this, ., tickUnits, ), ;, return, clone, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[., tickUnits, ), ;, return, clone, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[return, clone, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, TickUnits, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, TickUnits, ), ), {, return, false, ;, }, TickUnits, that, =]
[if, (, !, (, obj, instanceof, TickUnits, ), ), {, return, false, ;, }, TickUnits, that, =, (, TickUnits, )]
[(, obj, instanceof, TickUnits, ), ), {, return, false, ;, }, TickUnits, that, =, (, TickUnits, ), obj, ;, return]
[(, obj, instanceof, TickUnits, ), ), {, return, false, ;, }, TickUnits, that, =, (, TickUnits, ), obj, ;, return]
[(, obj, instanceof, TickUnits, ), ), {, return, false, ;, }, TickUnits, that, =, (, TickUnits, ), obj, ;, return]
[{, return, false, ;, }, TickUnits, that, =, (, TickUnits, ), obj, ;, return, that, ., tickUnits, ., equals, (]
[{, return, false, ;, }, TickUnits, that, =, (, TickUnits, ), obj, ;, return, that, ., tickUnits, ., equals, (]
