[=, new, NodesCleaner, (, ), ;, }, public, Region, <, S, >, buildConvex, (, final, Hyperplane, <, S, >, ...]
[;, }, public, Region, <, S, >, buildConvex, (, final, Hyperplane, <, S, >, ..., hyperplanes, ), {, if, (]
[), {, return, null, ;, }, final, Region, <, S, >, region, =, hyperplanes, [, 0, ], ., wholeSpace, (]
[||, (, hyperplanes, ., length, ==, 0, ), ), {, return, null, ;, }, final, Region, <, S, >, region]
[), ||, (, hyperplanes, ., length, ==, 0, ), ), {, return, null, ;, }, final, Region, <, S, >]
[==, null, ), ||, (, hyperplanes, ., length, ==, 0, ), ), {, return, null, ;, }, final, Region, <]
[), ||, (, hyperplanes, ., length, ==, 0, ), ), {, return, null, ;, }, final, Region, <, S, >]
[), {, return, null, ;, }, final, Region, <, S, >, region, =, hyperplanes, [, 0, ], ., wholeSpace, (]
[), ), {, return, null, ;, }, final, Region, <, S, >, region, =, hyperplanes, [, 0, ], ., wholeSpace]
[==, 0, ), ), {, return, null, ;, }, final, Region, <, S, >, region, =, hyperplanes, [, 0, ]]
[., length, ==, 0, ), ), {, return, null, ;, }, final, Region, <, S, >, region, =, hyperplanes, []
[), ), {, return, null, ;, }, final, Region, <, S, >, region, =, hyperplanes, [, 0, ], ., wholeSpace]
[;, }, final, Region, <, S, >, region, =, hyperplanes, [, 0, ], ., wholeSpace, (, ), ;, BSPTree, <]
[;, BSPTree, <, S, >, node, =, region, ., getTree, (, false, ), ;, node, ., setAttribute, (, Boolean, .]
[., wholeSpace, (, ), ;, BSPTree, <, S, >, node, =, region, ., getTree, (, false, ), ;, node, .]
[[, 0, ], ., wholeSpace, (, ), ;, BSPTree, <, S, >, node, =, region, ., getTree, (, false, )]
[], ., wholeSpace, (, ), ;, BSPTree, <, S, >, node, =, region, ., getTree, (, false, ), ;, node]
[;, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, for, (, final, Hyperplane, <, S, >, hyperplane, :, hyperplanes]
[., getTree, (, false, ), ;, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, for, (, final, Hyperplane, <]
[), ;, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, for, (, final, Hyperplane, <, S, >, hyperplane, :]
[;, for, (, final, Hyperplane, <, S, >, hyperplane, :, hyperplanes, ), {, if, (, node, ., insertCut, (, hyperplane]
[., setAttribute, (, Boolean, ., TRUE, ), ;, for, (, final, Hyperplane, <, S, >, hyperplane, :, hyperplanes, ), {]
[), ;, for, (, final, Hyperplane, <, S, >, hyperplane, :, hyperplanes, ), {, if, (, node, ., insertCut, (]
[., TRUE, ), ;, for, (, final, Hyperplane, <, S, >, hyperplane, :, hyperplanes, ), {, if, (, node, .]
[), {, if, (, node, ., insertCut, (, hyperplane, ), ), {, node, ., setAttribute, (, null, ), ;, node]
[), {, node, ., setAttribute, (, null, ), ;, node, ., getPlus, (, ), ., setAttribute, (, Boolean, ., FALSE]
[., insertCut, (, hyperplane, ), ), {, node, ., setAttribute, (, null, ), ;, node, ., getPlus, (, ), .]
[), ), {, node, ., setAttribute, (, null, ), ;, node, ., getPlus, (, ), ., setAttribute, (, Boolean, .]
[;, node, ., getPlus, (, ), ., setAttribute, (, Boolean, ., FALSE, ), ;, node, =, node, ., getMinus, (]
[., setAttribute, (, null, ), ;, node, ., getPlus, (, ), ., setAttribute, (, Boolean, ., FALSE, ), ;, node]
[), ;, node, ., getPlus, (, ), ., setAttribute, (, Boolean, ., FALSE, ), ;, node, =, node, ., getMinus]
[;, node, =, node, ., getMinus, (, ), ;, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, }, }]
[., setAttribute, (, Boolean, ., FALSE, ), ;, node, =, node, ., getMinus, (, ), ;, node, ., setAttribute, (]
[., getPlus, (, ), ., setAttribute, (, Boolean, ., FALSE, ), ;, node, =, node, ., getMinus, (, ), ;]
[), ;, node, =, node, ., getMinus, (, ), ;, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, }]
[., FALSE, ), ;, node, =, node, ., getMinus, (, ), ;, node, ., setAttribute, (, Boolean, ., TRUE, )]
[=, node, ., getMinus, (, ), ;, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, }, }, return, region]
[;, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, }, }, return, region, ;, }, public, Region, <, S]
[., getMinus, (, ), ;, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, }, }, return, region, ;, }]
[;, }, }, return, region, ;, }, public, Region, <, S, >, union, (, final, Region, <, S, >, region1]
[., setAttribute, (, Boolean, ., TRUE, ), ;, }, }, return, region, ;, }, public, Region, <, S, >, union]
[), ;, }, }, return, region, ;, }, public, Region, <, S, >, union, (, final, Region, <, S, >]
[., TRUE, ), ;, }, }, return, region, ;, }, public, Region, <, S, >, union, (, final, Region, <]
[;, }, public, Region, <, S, >, union, (, final, Region, <, S, >, region1, ,, final, Region, <, S]
[;, tree, ., visit, (, nodeCleaner, ), ;, return, region1, ., buildNew, (, tree, ), ;, }, public, Region, <]
[., merge, (, region2, ., getTree, (, false, ), ,, new, UnionMerger, (, ), ), ;, tree, ., visit, (]
[., getTree, (, false, ), ., merge, (, region2, ., getTree, (, false, ), ,, new, UnionMerger, (, ), )]
[), ., merge, (, region2, ., getTree, (, false, ), ,, new, UnionMerger, (, ), ), ;, tree, ., visit]
[,, new, UnionMerger, (, ), ), ;, tree, ., visit, (, nodeCleaner, ), ;, return, region1, ., buildNew, (, tree]
[., getTree, (, false, ), ,, new, UnionMerger, (, ), ), ;, tree, ., visit, (, nodeCleaner, ), ;, return]
[), ,, new, UnionMerger, (, ), ), ;, tree, ., visit, (, nodeCleaner, ), ;, return, region1, ., buildNew, (]
[), ;, tree, ., visit, (, nodeCleaner, ), ;, return, region1, ., buildNew, (, tree, ), ;, }, public, Region]
[;, return, region1, ., buildNew, (, tree, ), ;, }, public, Region, <, S, >, intersection, (, final, Region, <]
[., visit, (, nodeCleaner, ), ;, return, region1, ., buildNew, (, tree, ), ;, }, public, Region, <, S, >]
[), ;, return, region1, ., buildNew, (, tree, ), ;, }, public, Region, <, S, >, intersection, (, final, Region]
[;, }, public, Region, <, S, >, intersection, (, final, Region, <, S, >, region1, ,, final, Region, <, S]
[., buildNew, (, tree, ), ;, }, public, Region, <, S, >, intersection, (, final, Region, <, S, >, region1]
[), ;, }, public, Region, <, S, >, intersection, (, final, Region, <, S, >, region1, ,, final, Region, <]
[;, tree, ., visit, (, nodeCleaner, ), ;, return, region1, ., buildNew, (, tree, ), ;, }, public, Region, <]
[., merge, (, region2, ., getTree, (, false, ), ,, new, IntersectionMerger, (, ), ), ;, tree, ., visit, (]
[., getTree, (, false, ), ., merge, (, region2, ., getTree, (, false, ), ,, new, IntersectionMerger, (, ), )]
[), ., merge, (, region2, ., getTree, (, false, ), ,, new, IntersectionMerger, (, ), ), ;, tree, ., visit]
[,, new, IntersectionMerger, (, ), ), ;, tree, ., visit, (, nodeCleaner, ), ;, return, region1, ., buildNew, (, tree]
[., getTree, (, false, ), ,, new, IntersectionMerger, (, ), ), ;, tree, ., visit, (, nodeCleaner, ), ;, return]
[), ,, new, IntersectionMerger, (, ), ), ;, tree, ., visit, (, nodeCleaner, ), ;, return, region1, ., buildNew, (]
[), ;, tree, ., visit, (, nodeCleaner, ), ;, return, region1, ., buildNew, (, tree, ), ;, }, public, Region]
[;, return, region1, ., buildNew, (, tree, ), ;, }, public, Region, <, S, >, xor, (, final, Region, <]
[., visit, (, nodeCleaner, ), ;, return, region1, ., buildNew, (, tree, ), ;, }, public, Region, <, S, >]
[), ;, return, region1, ., buildNew, (, tree, ), ;, }, public, Region, <, S, >, xor, (, final, Region]
[;, }, public, Region, <, S, >, xor, (, final, Region, <, S, >, region1, ,, final, Region, <, S]
[., buildNew, (, tree, ), ;, }, public, Region, <, S, >, xor, (, final, Region, <, S, >, region1]
[), ;, }, public, Region, <, S, >, xor, (, final, Region, <, S, >, region1, ,, final, Region, <]
[;, tree, ., visit, (, nodeCleaner, ), ;, return, region1, ., buildNew, (, tree, ), ;, }, public, Region, <]
[., merge, (, region2, ., getTree, (, false, ), ,, new, XorMerger, (, ), ), ;, tree, ., visit, (]
[., getTree, (, false, ), ., merge, (, region2, ., getTree, (, false, ), ,, new, XorMerger, (, ), )]
[), ., merge, (, region2, ., getTree, (, false, ), ,, new, XorMerger, (, ), ), ;, tree, ., visit]
[,, new, XorMerger, (, ), ), ;, tree, ., visit, (, nodeCleaner, ), ;, return, region1, ., buildNew, (, tree]
[., getTree, (, false, ), ,, new, XorMerger, (, ), ), ;, tree, ., visit, (, nodeCleaner, ), ;, return]
[), ,, new, XorMerger, (, ), ), ;, tree, ., visit, (, nodeCleaner, ), ;, return, region1, ., buildNew, (]
[), ;, tree, ., visit, (, nodeCleaner, ), ;, return, region1, ., buildNew, (, tree, ), ;, }, public, Region]
[;, return, region1, ., buildNew, (, tree, ), ;, }, public, Region, <, S, >, difference, (, final, Region, <]
[., visit, (, nodeCleaner, ), ;, return, region1, ., buildNew, (, tree, ), ;, }, public, Region, <, S, >]
[), ;, return, region1, ., buildNew, (, tree, ), ;, }, public, Region, <, S, >, difference, (, final, Region]
[;, }, public, Region, <, S, >, difference, (, final, Region, <, S, >, region1, ,, final, Region, <, S]
[., buildNew, (, tree, ), ;, }, public, Region, <, S, >, difference, (, final, Region, <, S, >, region1]
[), ;, }, public, Region, <, S, >, difference, (, final, Region, <, S, >, region1, ,, final, Region, <]
[;, tree, ., visit, (, nodeCleaner, ), ;, return, region1, ., buildNew, (, tree, ), ;, }, public, Region, <]
[., merge, (, region2, ., getTree, (, false, ), ,, new, DifferenceMerger, (, ), ), ;, tree, ., visit, (]
[., getTree, (, false, ), ., merge, (, region2, ., getTree, (, false, ), ,, new, DifferenceMerger, (, ), )]
[), ., merge, (, region2, ., getTree, (, false, ), ,, new, DifferenceMerger, (, ), ), ;, tree, ., visit]
[,, new, DifferenceMerger, (, ), ), ;, tree, ., visit, (, nodeCleaner, ), ;, return, region1, ., buildNew, (, tree]
[., getTree, (, false, ), ,, new, DifferenceMerger, (, ), ), ;, tree, ., visit, (, nodeCleaner, ), ;, return]
[), ,, new, DifferenceMerger, (, ), ), ;, tree, ., visit, (, nodeCleaner, ), ;, return, region1, ., buildNew, (]
[), ;, tree, ., visit, (, nodeCleaner, ), ;, return, region1, ., buildNew, (, tree, ), ;, }, public, Region]
[;, return, region1, ., buildNew, (, tree, ), ;, }, public, Region, <, S, >, getComplement, (, final, Region, <]
[., visit, (, nodeCleaner, ), ;, return, region1, ., buildNew, (, tree, ), ;, }, public, Region, <, S, >]
[), ;, return, region1, ., buildNew, (, tree, ), ;, }, public, Region, <, S, >, getComplement, (, final, Region]
[;, }, public, Region, <, S, >, getComplement, (, final, Region, <, S, >, region, ), {, return, region, .]
[., buildNew, (, tree, ), ;, }, public, Region, <, S, >, getComplement, (, final, Region, <, S, >, region]
[), ;, }, public, Region, <, S, >, getComplement, (, final, Region, <, S, >, region, ), {, return, region]
[;, }, private, BSPTree, <, S, >, recurseComplement, (, final, BSPTree, <, S, >, node, ), {, if, (, node]
[., buildNew, (, recurseComplement, (, region, ., getTree, (, false, ), ), ), ;, }, private, BSPTree, <, S, >]
[), ;, }, private, BSPTree, <, S, >, recurseComplement, (, final, BSPTree, <, S, >, node, ), {, if, (]
[), ), ;, }, private, BSPTree, <, S, >, recurseComplement, (, final, BSPTree, <, S, >, node, ), {, if]
[., getTree, (, false, ), ), ), ;, }, private, BSPTree, <, S, >, recurseComplement, (, final, BSPTree, <, S]
[), ), ), ;, }, private, BSPTree, <, S, >, recurseComplement, (, final, BSPTree, <, S, >, node, ), {]
[), {, return, new, BSPTree, <, S, >, (, (, (, Boolean, ), node, ., getAttribute, (, ), ), ?]
[==, null, ), {, return, new, BSPTree, <, S, >, (, (, (, Boolean, ), node, ., getAttribute, (, )]
[., getCut, (, ), ==, null, ), {, return, new, BSPTree, <, S, >, (, (, (, Boolean, ), node]
[), {, return, new, BSPTree, <, S, >, (, (, (, Boolean, ), node, ., getAttribute, (, ), ), ?]
[;, }, @, SuppressWarnings, (, "unchecked", ), BoundaryAttribute, <, S, >, attribute, =, (, BoundaryAttribute, <, S, >, ), node]
[), ;, }, @, SuppressWarnings, (, "unchecked", ), BoundaryAttribute, <, S, >, attribute, =, (, BoundaryAttribute, <, S, >, )]
[?, Boolean, ., FALSE, :, Boolean, ., TRUE, ), ;, }, @, SuppressWarnings, (, "unchecked", ), BoundaryAttribute, <, S, >]
[), ?, Boolean, ., FALSE, :, Boolean, ., TRUE, ), ;, }, @, SuppressWarnings, (, "unchecked", ), BoundaryAttribute, <, S]
[), ?, Boolean, ., FALSE, :, Boolean, ., TRUE, ), ;, }, @, SuppressWarnings, (, "unchecked", ), BoundaryAttribute, <, S]
[., getAttribute, (, ), ), ?, Boolean, ., FALSE, :, Boolean, ., TRUE, ), ;, }, @, SuppressWarnings, (, "unchecked"]
[:, Boolean, ., TRUE, ), ;, }, @, SuppressWarnings, (, "unchecked", ), BoundaryAttribute, <, S, >, attribute, =, (, BoundaryAttribute]
[., FALSE, :, Boolean, ., TRUE, ), ;, }, @, SuppressWarnings, (, "unchecked", ), BoundaryAttribute, <, S, >, attribute, =]
[), ;, }, @, SuppressWarnings, (, "unchecked", ), BoundaryAttribute, <, S, >, attribute, =, (, BoundaryAttribute, <, S, >, )]
[., TRUE, ), ;, }, @, SuppressWarnings, (, "unchecked", ), BoundaryAttribute, <, S, >, attribute, =, (, BoundaryAttribute, <, S]
[BoundaryAttribute, <, S, >, attribute, =, (, BoundaryAttribute, <, S, >, ), node, ., getAttribute, (, ), ;, if, (]
[), BoundaryAttribute, <, S, >, attribute, =, (, BoundaryAttribute, <, S, >, ), node, ., getAttribute, (, ), ;, if]
[;, if, (, attribute, !=, null, ), {, final, SubHyperplane, <, S, >, plusOutside, =, (, attribute, ., getPlusInside, (]
[;, if, (, attribute, !=, null, ), {, final, SubHyperplane, <, S, >, plusOutside, =, (, attribute, ., getPlusInside, (]
[., getAttribute, (, ), ;, if, (, attribute, !=, null, ), {, final, SubHyperplane, <, S, >, plusOutside, =, (]
[), {, final, SubHyperplane, <, S, >, plusOutside, =, (, attribute, ., getPlusInside, (, ), ==, null, ), ?, null]
[!=, null, ), {, final, SubHyperplane, <, S, >, plusOutside, =, (, attribute, ., getPlusInside, (, ), ==, null, )]
[), {, final, SubHyperplane, <, S, >, plusOutside, =, (, attribute, ., getPlusInside, (, ), ==, null, ), ?, null]
[;, final, SubHyperplane, <, S, >, plusInside, =, (, attribute, ., getPlusOutside, (, ), ==, null, ), ?, null, :]
[?, null, :, attribute, ., getPlusInside, (, ), ., copySelf, (, ), ;, final, SubHyperplane, <, S, >, plusInside, =]
[), ?, null, :, attribute, ., getPlusInside, (, ), ., copySelf, (, ), ;, final, SubHyperplane, <, S, >, plusInside]
[==, null, ), ?, null, :, attribute, ., getPlusInside, (, ), ., copySelf, (, ), ;, final, SubHyperplane, <, S]
[., getPlusInside, (, ), ==, null, ), ?, null, :, attribute, ., getPlusInside, (, ), ., copySelf, (, ), ;]
[), ?, null, :, attribute, ., getPlusInside, (, ), ., copySelf, (, ), ;, final, SubHyperplane, <, S, >, plusInside]
[:, attribute, ., getPlusInside, (, ), ., copySelf, (, ), ;, final, SubHyperplane, <, S, >, plusInside, =, (, attribute]
[;, final, SubHyperplane, <, S, >, plusInside, =, (, attribute, ., getPlusOutside, (, ), ==, null, ), ?, null, :]
[., copySelf, (, ), ;, final, SubHyperplane, <, S, >, plusInside, =, (, attribute, ., getPlusOutside, (, ), ==, null]
[., getPlusInside, (, ), ., copySelf, (, ), ;, final, SubHyperplane, <, S, >, plusInside, =, (, attribute, ., getPlusOutside]
[;, attribute, =, new, BoundaryAttribute, <, S, >, (, plusOutside, ,, plusInside, ), ;, }, return, new, BSPTree, <, S]
[?, null, :, attribute, ., getPlusOutside, (, ), ., copySelf, (, ), ;, attribute, =, new, BoundaryAttribute, <, S, >]
[), ?, null, :, attribute, ., getPlusOutside, (, ), ., copySelf, (, ), ;, attribute, =, new, BoundaryAttribute, <, S]
[==, null, ), ?, null, :, attribute, ., getPlusOutside, (, ), ., copySelf, (, ), ;, attribute, =, new, BoundaryAttribute]
[., getPlusOutside, (, ), ==, null, ), ?, null, :, attribute, ., getPlusOutside, (, ), ., copySelf, (, ), ;]
[), ?, null, :, attribute, ., getPlusOutside, (, ), ., copySelf, (, ), ;, attribute, =, new, BoundaryAttribute, <, S]
[:, attribute, ., getPlusOutside, (, ), ., copySelf, (, ), ;, attribute, =, new, BoundaryAttribute, <, S, >, (, plusOutside]
[;, attribute, =, new, BoundaryAttribute, <, S, >, (, plusOutside, ,, plusInside, ), ;, }, return, new, BSPTree, <, S]
[., copySelf, (, ), ;, attribute, =, new, BoundaryAttribute, <, S, >, (, plusOutside, ,, plusInside, ), ;, }, return]
[., getPlusOutside, (, ), ., copySelf, (, ), ;, attribute, =, new, BoundaryAttribute, <, S, >, (, plusOutside, ,, plusInside]
[=, new, BoundaryAttribute, <, S, >, (, plusOutside, ,, plusInside, ), ;, }, return, new, BSPTree, <, S, >, (]
[;, }, return, new, BSPTree, <, S, >, (, node, ., getCut, (, ), ., copySelf, (, ), ,, recurseComplement]
[,, plusInside, ), ;, }, return, new, BSPTree, <, S, >, (, node, ., getCut, (, ), ., copySelf, (]
[), ;, }, return, new, BSPTree, <, S, >, (, node, ., getCut, (, ), ., copySelf, (, ), ,]
[;, }, private, class, UnionMerger, implements, BSPTree, ., LeafMerger, <, S, >, {, public, BSPTree, <, S, >, merge, (]
[,, recurseComplement, (, node, ., getPlus, (, ), ), ,, recurseComplement, (, node, ., getMinus, (, ), ), ,, attribute]
[., copySelf, (, ), ,, recurseComplement, (, node, ., getPlus, (, ), ), ,, recurseComplement, (, node, ., getMinus, (]
[., getCut, (, ), ., copySelf, (, ), ,, recurseComplement, (, node, ., getPlus, (, ), ), ,, recurseComplement, (]
[,, recurseComplement, (, node, ., getMinus, (, ), ), ,, attribute, ), ;, }, private, class, UnionMerger, implements, BSPTree, .]
[), ,, recurseComplement, (, node, ., getMinus, (, ), ), ,, attribute, ), ;, }, private, class, UnionMerger, implements, BSPTree]
[., getPlus, (, ), ), ,, recurseComplement, (, node, ., getMinus, (, ), ), ,, attribute, ), ;, }, private]
[,, attribute, ), ;, }, private, class, UnionMerger, implements, BSPTree, ., LeafMerger, <, S, >, {, public, BSPTree, <, S]
[), ,, attribute, ), ;, }, private, class, UnionMerger, implements, BSPTree, ., LeafMerger, <, S, >, {, public, BSPTree, <]
[., getMinus, (, ), ), ,, attribute, ), ;, }, private, class, UnionMerger, implements, BSPTree, ., LeafMerger, <, S, >]
[), ;, }, private, class, UnionMerger, implements, BSPTree, ., LeafMerger, <, S, >, {, public, BSPTree, <, S, >, merge]
[), {, leaf, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, leaf, ;, }, tree, ., insertInTree, (, parentTree]
[), {, leaf, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, leaf, ;, }, tree, ., insertInTree, (, parentTree]
[., getAttribute, (, ), ), {, leaf, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, leaf, ;, }, tree]
[;, return, leaf, ;, }, tree, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, tree, ;, }, }, private]
[., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, leaf, ;, }, tree, ., insertInTree, (, parentTree, ,, isPlusChild, )]
[,, isPlusChild, ), ;, return, leaf, ;, }, tree, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, tree, ;]
[), ;, return, leaf, ;, }, tree, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, tree, ;, }, }]
[;, }, tree, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, tree, ;, }, }, private, class, IntersectionMerger, implements]
[;, return, tree, ;, }, }, private, class, IntersectionMerger, implements, BSPTree, ., LeafMerger, <, S, >, {, public, BSPTree, <]
[., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, tree, ;, }, }, private, class, IntersectionMerger, implements, BSPTree, ., LeafMerger]
[,, isPlusChild, ), ;, return, tree, ;, }, }, private, class, IntersectionMerger, implements, BSPTree, ., LeafMerger, <, S, >, {]
[), ;, return, tree, ;, }, }, private, class, IntersectionMerger, implements, BSPTree, ., LeafMerger, <, S, >, {, public, BSPTree]
[;, }, }, private, class, IntersectionMerger, implements, BSPTree, ., LeafMerger, <, S, >, {, public, BSPTree, <, S, >, merge]
[), {, tree, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, tree, ;, }, leaf, ., insertInTree, (, parentTree]
[), {, tree, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, tree, ;, }, leaf, ., insertInTree, (, parentTree]
[., getAttribute, (, ), ), {, tree, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, tree, ;, }, leaf]
[;, return, tree, ;, }, leaf, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, leaf, ;, }, }, private]
[., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, tree, ;, }, leaf, ., insertInTree, (, parentTree, ,, isPlusChild, )]
[,, isPlusChild, ), ;, return, tree, ;, }, leaf, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, leaf, ;]
[), ;, return, tree, ;, }, leaf, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, leaf, ;, }, }]
[;, }, leaf, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, leaf, ;, }, }, private, class, XorMerger, implements]
[;, return, leaf, ;, }, }, private, class, XorMerger, implements, BSPTree, ., LeafMerger, <, S, >, {, public, BSPTree, <]
[., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, leaf, ;, }, }, private, class, XorMerger, implements, BSPTree, ., LeafMerger]
[,, isPlusChild, ), ;, return, leaf, ;, }, }, private, class, XorMerger, implements, BSPTree, ., LeafMerger, <, S, >, {]
[), ;, return, leaf, ;, }, }, private, class, XorMerger, implements, BSPTree, ., LeafMerger, <, S, >, {, public, BSPTree]
[;, }, }, private, class, XorMerger, implements, BSPTree, ., LeafMerger, <, S, >, {, public, BSPTree, <, S, >, merge]
[;, if, (, (, Boolean, ), leaf, ., getAttribute, (, ), ), {, t, =, recurseComplement, (, t, ), ;]
[), {, t, =, recurseComplement, (, t, ), ;, }, t, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return]
[), {, t, =, recurseComplement, (, t, ), ;, }, t, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return]
[., getAttribute, (, ), ), {, t, =, recurseComplement, (, t, ), ;, }, t, ., insertInTree, (, parentTree, ,]
[=, recurseComplement, (, t, ), ;, }, t, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, t, ;, }]
[;, }, t, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, t, ;, }, }, private, class, DifferenceMerger, implements]
[), ;, }, t, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, t, ;, }, }, private, class, DifferenceMerger]
[;, return, t, ;, }, }, private, class, DifferenceMerger, implements, BSPTree, ., LeafMerger, <, S, >, {, public, BSPTree, <]
[., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, t, ;, }, }, private, class, DifferenceMerger, implements, BSPTree, ., LeafMerger]
[,, isPlusChild, ), ;, return, t, ;, }, }, private, class, DifferenceMerger, implements, BSPTree, ., LeafMerger, <, S, >, {]
[), ;, return, t, ;, }, }, private, class, DifferenceMerger, implements, BSPTree, ., LeafMerger, <, S, >, {, public, BSPTree]
[;, }, }, private, class, DifferenceMerger, implements, BSPTree, ., LeafMerger, <, S, >, {, public, BSPTree, <, S, >, merge]
[), {, final, BSPTree, <, S, >, argTree, =, recurseComplement, (, leafFromInstance, ?, tree, :, leaf, ), ;, argTree, .]
[), {, final, BSPTree, <, S, >, argTree, =, recurseComplement, (, leafFromInstance, ?, tree, :, leaf, ), ;, argTree, .]
[., getAttribute, (, ), ), {, final, BSPTree, <, S, >, argTree, =, recurseComplement, (, leafFromInstance, ?, tree, :, leaf]
[;, argTree, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, argTree, ;, }, final, BSPTree, <, S, >, instanceTree]
[), ;, argTree, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, argTree, ;, }, final, BSPTree, <, S, >]
[?, tree, :, leaf, ), ;, argTree, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, argTree, ;, }, final]
[:, leaf, ), ;, argTree, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, argTree, ;, }, final, BSPTree, <]
[), ;, argTree, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, argTree, ;, }, final, BSPTree, <, S, >]
[;, return, argTree, ;, }, final, BSPTree, <, S, >, instanceTree, =, leafFromInstance, ?, leaf, :, tree, ;, instanceTree, .]
[., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, argTree, ;, }, final, BSPTree, <, S, >, instanceTree, =, leafFromInstance]
[,, isPlusChild, ), ;, return, argTree, ;, }, final, BSPTree, <, S, >, instanceTree, =, leafFromInstance, ?, leaf, :, tree]
[), ;, return, argTree, ;, }, final, BSPTree, <, S, >, instanceTree, =, leafFromInstance, ?, leaf, :, tree, ;, instanceTree]
[;, }, final, BSPTree, <, S, >, instanceTree, =, leafFromInstance, ?, leaf, :, tree, ;, instanceTree, ., insertInTree, (, parentTree]
[;, instanceTree, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, instanceTree, ;, }, }, private, class, NodesCleaner, implements, BSPTreeVisitor]
[?, leaf, :, tree, ;, instanceTree, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, instanceTree, ;, }, }, private]
[:, tree, ;, instanceTree, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, instanceTree, ;, }, }, private, class, NodesCleaner]
[;, instanceTree, ., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, instanceTree, ;, }, }, private, class, NodesCleaner, implements, BSPTreeVisitor]
[;, return, instanceTree, ;, }, }, private, class, NodesCleaner, implements, BSPTreeVisitor, <, S, >, {, public, Order, visitOrder, (, final]
[., insertInTree, (, parentTree, ,, isPlusChild, ), ;, return, instanceTree, ;, }, }, private, class, NodesCleaner, implements, BSPTreeVisitor, <, S]
[,, isPlusChild, ), ;, return, instanceTree, ;, }, }, private, class, NodesCleaner, implements, BSPTreeVisitor, <, S, >, {, public, Order]
[), ;, return, instanceTree, ;, }, }, private, class, NodesCleaner, implements, BSPTreeVisitor, <, S, >, {, public, Order, visitOrder, (]
[;, }, }, private, class, NodesCleaner, implements, BSPTreeVisitor, <, S, >, {, public, Order, visitOrder, (, final, BSPTree, <, S]
[;, }, public, void, visitInternalNode, (, final, BSPTree, <, S, >, node, ), {, node, ., setAttribute, (, null, )]
[., PLUS_SUB_MINUS, ;, }, public, void, visitInternalNode, (, final, BSPTree, <, S, >, node, ), {, node, ., setAttribute, (]
[;, }, public, void, visitLeafNode, (, final, BSPTree, <, S, >, node, ), {, }, }, }]
[., setAttribute, (, null, ), ;, }, public, void, visitLeafNode, (, final, BSPTree, <, S, >, node, ), {, }]
[), ;, }, public, void, visitLeafNode, (, final, BSPTree, <, S, >, node, ), {, }, }, }]
