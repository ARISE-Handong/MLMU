[javax, ., annotation, ., Nullable, ;, class, RuntimeTypeCheck, implements, CompilerPass, {, private, static, final, Comparator, <, JSType, >, ALPHA, =]
[<, JSType, >, (, ), {, @, Override, public, int, compare, (, JSType, t1, ,, JSType, t2, ), {, return]
[<, JSType, >, (, ), {, @, Override, public, int, compare, (, JSType, t1, ,, JSType, t2, ), {, return]
[>, (, ), {, @, Override, public, int, compare, (, JSType, t1, ,, JSType, t2, ), {, return, getName, (]
[Override, public, int, compare, (, JSType, t1, ,, JSType, t2, ), {, return, getName, (, t1, ), ., compareTo, (]
[int, compare, (, JSType, t1, ,, JSType, t2, ), {, return, getName, (, t1, ), ., compareTo, (, getName, (]
[., compareTo, (, getName, (, t2, ), ), ;, }, private, String, getName, (, JSType, type, ), {, if, (]
[., compareTo, (, getName, (, t2, ), ), ;, }, private, String, getName, (, JSType, type, ), {, if, (]
[;, }, private, String, getName, (, JSType, type, ), {, if, (, type, ., isInstanceType, (, ), ), {, return]
[;, }, private, String, getName, (, JSType, type, ), {, if, (, type, ., isInstanceType, (, ), ), {, return]
[}, private, String, getName, (, JSType, type, ), {, if, (, type, ., isInstanceType, (, ), ), {, return, (]
[getName, (, JSType, type, ), {, if, (, type, ., isInstanceType, (, ), ), {, return, (, (, ObjectType, )]
[(, ), ), {, return, (, (, ObjectType, ), type, ), ., getReferenceName, (, ), ;, }, else, if, (]
[(, ), ), {, return, (, (, ObjectType, ), type, ), ., getReferenceName, (, ), ;, }, else, if, (]
[(, ), ), {, return, (, (, ObjectType, ), type, ), ., getReferenceName, (, ), ;, }, else, if, (]
[(, ), ), {, return, (, (, ObjectType, ), type, ), ., getReferenceName, (, ), ;, }, else, if, (]
[(, ), ), {, return, (, (, ObjectType, ), type, ), ., getReferenceName, (, ), ;, }, else, if, (]
[(, ), ), {, return, (, (, ObjectType, ), type, ), ., getReferenceName, (, ), ;, }, else, if, (]
[(, ObjectType, ), type, ), ., getReferenceName, (, ), ;, }, else, if, (, type, ., isNullType, (, ), ||]
[(, ObjectType, ), type, ), ., getReferenceName, (, ), ;, }, else, if, (, type, ., isNullType, (, ), ||]
[getReferenceName, (, ), ;, }, else, if, (, type, ., isNullType, (, ), ||, type, ., isBooleanValueType, (, ), ||]
[getReferenceName, (, ), ;, }, else, if, (, type, ., isNullType, (, ), ||, type, ., isBooleanValueType, (, ), ||]
[if, (, type, ., isNullType, (, ), ||, type, ., isBooleanValueType, (, ), ||, type, ., isNumberValueType, (, ), ||]
[if, (, type, ., isNullType, (, ), ||, type, ., isBooleanValueType, (, ), ||, type, ., isNumberValueType, (, ), ||]
[), ||, type, ., isBooleanValueType, (, ), ||, type, ., isNumberValueType, (, ), ||, type, ., isStringValueType, (, ), ||]
[), ||, type, ., isBooleanValueType, (, ), ||, type, ., isNumberValueType, (, ), ||, type, ., isStringValueType, (, ), ||]
[type, ., isNumberValueType, (, ), ||, type, ., isStringValueType, (, ), ||, type, ., isVoidType, (, ), ), {, return]
[type, ., isNumberValueType, (, ), ||, type, ., isStringValueType, (, ), ||, type, ., isVoidType, (, ), ), {, return]
[), ||, type, ., isVoidType, (, ), ), {, return, type, ., toString, (, ), ;, }, else, {, return]
[final, AbstractCompiler, compiler, ;, private, final, String, logFunction, ;, RuntimeTypeCheck, (, AbstractCompiler, compiler, ,, @, Nullable, String, logFunction, ), {]
[final, AbstractCompiler, compiler, ;, private, final, String, logFunction, ;, RuntimeTypeCheck, (, AbstractCompiler, compiler, ,, @, Nullable, String, logFunction, ), {]
[private, final, String, logFunction, ;, RuntimeTypeCheck, (, AbstractCompiler, compiler, ,, @, Nullable, String, logFunction, ), {, this, ., compiler, =]
[String, logFunction, ;, RuntimeTypeCheck, (, AbstractCompiler, compiler, ,, @, Nullable, String, logFunction, ), {, this, ., compiler, =, compiler, ;]
[String, logFunction, ;, RuntimeTypeCheck, (, AbstractCompiler, compiler, ,, @, Nullable, String, logFunction, ), {, this, ., compiler, =, compiler, ;]
[(, AbstractCompiler, compiler, ,, @, Nullable, String, logFunction, ), {, this, ., compiler, =, compiler, ;, this, ., logFunction, =]
[this, ., logFunction, =, logFunction, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., logFunction, =, logFunction, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[logFunction, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, AddMarkers, (]
[,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, AddMarkers, (, compiler, ), ), ;]
[,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, AddMarkers, (, compiler, ), ), ;]
[{, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, AddMarkers, (, compiler, ), ), ;, NodeTraversal, ., traverse, (]
[., traverse, (, compiler, ,, root, ,, new, AddMarkers, (, compiler, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[(, compiler, ,, root, ,, new, AddMarkers, (, compiler, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[AddMarkers, (, compiler, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, AddChecks, (, ), ), ;]
[static, class, AddMarkers, extends, NodeTraversal, ., AbstractPostOrderCallback, {, private, final, AbstractCompiler, compiler, ;, private, AddMarkers, (, AbstractCompiler, compiler, ), {]
[static, class, AddMarkers, extends, NodeTraversal, ., AbstractPostOrderCallback, {, private, final, AbstractCompiler, compiler, ;, private, AddMarkers, (, AbstractCompiler, compiler, ), {]
[NodeTraversal, ., AbstractPostOrderCallback, {, private, final, AbstractCompiler, compiler, ;, private, AddMarkers, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isFunction, (, ), ), {]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isFunction, (, ), ), {, visitFunction, (]
[Node, n, ,, Node, parent, ), {, if, (, n, ., isFunction, (, ), ), {, visitFunction, (, t, ,]
[,, n, ), ;, }, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, ), {, FunctionType, funType, =]
[,, n, ), ;, }, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, ), {, FunctionType, funType, =]
[,, n, ), ;, }, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, ), {, FunctionType, funType, =]
[,, Node, n, ), {, FunctionType, funType, =, n, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, if, (]
[,, Node, n, ), {, FunctionType, funType, =, n, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, if, (]
[,, Node, n, ), {, FunctionType, funType, =, n, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, if, (]
[n, ), {, FunctionType, funType, =, n, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, if, (, funType, !=]
[{, FunctionType, funType, =, n, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, if, (, funType, !=, null, &&]
[FunctionType, funType, =, n, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, if, (, funType, !=, null, &&, !]
[FunctionType, funType, =, n, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, if, (, funType, !=, null, &&, !]
[if, (, funType, !=, null, &&, !, funType, ., isConstructor, (, ), ), {, return, ;, }, Node, nodeToInsertAfter, =]
[funType, !=, null, &&, !, funType, ., isConstructor, (, ), ), {, return, ;, }, Node, nodeToInsertAfter, =, findNodeToInsertAfter, (]
[&&, !, funType, ., isConstructor, (, ), ), {, return, ;, }, Node, nodeToInsertAfter, =, findNodeToInsertAfter, (, n, ), ;]
[funType, ., isConstructor, (, ), ), {, return, ;, }, Node, nodeToInsertAfter, =, findNodeToInsertAfter, (, n, ), ;, nodeToInsertAfter, =]
[isConstructor, (, ), ), {, return, ;, }, Node, nodeToInsertAfter, =, findNodeToInsertAfter, (, n, ), ;, nodeToInsertAfter, =, addMarker, (]
[), ), {, return, ;, }, Node, nodeToInsertAfter, =, findNodeToInsertAfter, (, n, ), ;, nodeToInsertAfter, =, addMarker, (, funType, ,]
[{, return, ;, }, Node, nodeToInsertAfter, =, findNodeToInsertAfter, (, n, ), ;, nodeToInsertAfter, =, addMarker, (, funType, ,, nodeToInsertAfter, ,]
[n, ), ;, nodeToInsertAfter, =, addMarker, (, funType, ,, nodeToInsertAfter, ,, null, ), ;, TreeSet, <, ObjectType, >, stuff, =]
[n, ), ;, nodeToInsertAfter, =, addMarker, (, funType, ,, nodeToInsertAfter, ,, null, ), ;, TreeSet, <, ObjectType, >, stuff, =]
[=, addMarker, (, funType, ,, nodeToInsertAfter, ,, null, ), ;, TreeSet, <, ObjectType, >, stuff, =, Sets, ., newTreeSet, (]
[funType, ,, nodeToInsertAfter, ,, null, ), ;, TreeSet, <, ObjectType, >, stuff, =, Sets, ., newTreeSet, (, ALPHA, ), ;]
[funType, ,, nodeToInsertAfter, ,, null, ), ;, TreeSet, <, ObjectType, >, stuff, =, Sets, ., newTreeSet, (, ALPHA, ), ;]
[null, ), ;, TreeSet, <, ObjectType, >, stuff, =, Sets, ., newTreeSet, (, ALPHA, ), ;, Iterables, ., addAll, (]
[;, TreeSet, <, ObjectType, >, stuff, =, Sets, ., newTreeSet, (, ALPHA, ), ;, Iterables, ., addAll, (, stuff, ,]
[;, TreeSet, <, ObjectType, >, stuff, =, Sets, ., newTreeSet, (, ALPHA, ), ;, Iterables, ., addAll, (, stuff, ,]
[), ;, Iterables, ., addAll, (, stuff, ,, funType, ., getAllImplementedInterfaces, (, ), ), ;, for, (, ObjectType, interfaceType, :]
[., addAll, (, stuff, ,, funType, ., getAllImplementedInterfaces, (, ), ), ;, for, (, ObjectType, interfaceType, :, stuff, ), {]
[(, stuff, ,, funType, ., getAllImplementedInterfaces, (, ), ), ;, for, (, ObjectType, interfaceType, :, stuff, ), {, nodeToInsertAfter, =]
[,, funType, ., getAllImplementedInterfaces, (, ), ), ;, for, (, ObjectType, interfaceType, :, stuff, ), {, nodeToInsertAfter, =, addMarker, (]
[., getAllImplementedInterfaces, (, ), ), ;, for, (, ObjectType, interfaceType, :, stuff, ), {, nodeToInsertAfter, =, addMarker, (, funType, ,]
[(, ), ), ;, for, (, ObjectType, interfaceType, :, stuff, ), {, nodeToInsertAfter, =, addMarker, (, funType, ,, nodeToInsertAfter, ,]
[}, }, private, Node, addMarker, (, FunctionType, funType, ,, Node, nodeToInsertAfter, ,, @, Nullable, ObjectType, interfaceType, ), {, if, (]
[}, }, private, Node, addMarker, (, FunctionType, funType, ,, Node, nodeToInsertAfter, ,, @, Nullable, ObjectType, interfaceType, ), {, if, (]
[}, }, private, Node, addMarker, (, FunctionType, funType, ,, Node, nodeToInsertAfter, ,, @, Nullable, ObjectType, interfaceType, ), {, if, (]
[FunctionType, funType, ,, Node, nodeToInsertAfter, ,, @, Nullable, ObjectType, interfaceType, ), {, if, (, funType, ., getSource, (, ), ==]
[nodeToInsertAfter, ,, @, Nullable, ObjectType, interfaceType, ), {, if, (, funType, ., getSource, (, ), ==, null, ), {, return]
[), {, if, (, funType, ., getSource, (, ), ==, null, ), {, return, nodeToInsertAfter, ;, }, String, className, =]
[), {, if, (, funType, ., getSource, (, ), ==, null, ), {, return, nodeToInsertAfter, ;, }, String, className, =]
[funType, ., getSource, (, ), ==, null, ), {, return, nodeToInsertAfter, ;, }, String, className, =, NodeUtil, ., getFunctionName, (]
[funType, ., getSource, (, ), ==, null, ), {, return, nodeToInsertAfter, ;, }, String, className, =, NodeUtil, ., getFunctionName, (]
[return, nodeToInsertAfter, ;, }, String, className, =, NodeUtil, ., getFunctionName, (, funType, ., getSource, (, ), ), ;, if, (]
[return, nodeToInsertAfter, ;, }, String, className, =, NodeUtil, ., getFunctionName, (, funType, ., getSource, (, ), ), ;, if, (]
[;, }, String, className, =, NodeUtil, ., getFunctionName, (, funType, ., getSource, (, ), ), ;, if, (, className, ==]
[=, NodeUtil, ., getFunctionName, (, funType, ., getSource, (, ), ), ;, if, (, className, ==, null, ), {, return]
[., getSource, (, ), ), ;, if, (, className, ==, null, ), {, return, nodeToInsertAfter, ;, }, Node, classNode, =]
[., getSource, (, ), ), ;, if, (, className, ==, null, ), {, return, nodeToInsertAfter, ;, }, Node, classNode, =]
[), ;, if, (, className, ==, null, ), {, return, nodeToInsertAfter, ;, }, Node, classNode, =, NodeUtil, ., newQualifiedNameNode, (]
[), ;, if, (, className, ==, null, ), {, return, nodeToInsertAfter, ;, }, Node, classNode, =, NodeUtil, ., newQualifiedNameNode, (]
[null, ), {, return, nodeToInsertAfter, ;, }, Node, classNode, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[}, Node, classNode, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, ), ;, Node, marker, =]
[}, Node, classNode, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, ), ;, Node, marker, =]
[NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, ), ;, Node, marker, =, IR, ., string, (]
[NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, ), ;, Node, marker, =, IR, ., string, (]
[NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, ), ;, Node, marker, =, IR, ., string, (]
[newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, ), ;, Node, marker, =, IR, ., string, (, interfaceType, ==]
[compiler, ., getCodingConvention, (, ), ,, className, ), ;, Node, marker, =, IR, ., string, (, interfaceType, ==, null, ?]
[compiler, ., getCodingConvention, (, ), ,, className, ), ;, Node, marker, =, IR, ., string, (, interfaceType, ==, null, ?]
[getCodingConvention, (, ), ,, className, ), ;, Node, marker, =, IR, ., string, (, interfaceType, ==, null, ?, "instance_of__", +]
[), ,, className, ), ;, Node, marker, =, IR, ., string, (, interfaceType, ==, null, ?, "instance_of__", +, className, :]
[), ,, className, ), ;, Node, marker, =, IR, ., string, (, interfaceType, ==, null, ?, "instance_of__", +, className, :]
[className, ), ;, Node, marker, =, IR, ., string, (, interfaceType, ==, null, ?, "instance_of__", +, className, :, "implements__", +]
[className, ), ;, Node, marker, =, IR, ., string, (, interfaceType, ==, null, ?, "instance_of__", +, className, :, "implements__", +]
[interfaceType, ==, null, ?, "instance_of__", +, className, :, "implements__", +, interfaceType, ., getReferenceName, (, ), ), ;, Node, assign, =]
[interfaceType, ==, null, ?, "instance_of__", +, className, :, "implements__", +, interfaceType, ., getReferenceName, (, ), ), ;, Node, assign, =]
["instance_of__", +, className, :, "implements__", +, interfaceType, ., getReferenceName, (, ), ), ;, Node, assign, =, IR, ., exprResult, (]
["instance_of__", +, className, :, "implements__", +, interfaceType, ., getReferenceName, (, ), ), ;, Node, assign, =, IR, ., exprResult, (]
["implements__", +, interfaceType, ., getReferenceName, (, ), ), ;, Node, assign, =, IR, ., exprResult, (, IR, ., assign, (]
["implements__", +, interfaceType, ., getReferenceName, (, ), ), ;, Node, assign, =, IR, ., exprResult, (, IR, ., assign, (]
[getReferenceName, (, ), ), ;, Node, assign, =, IR, ., exprResult, (, IR, ., assign, (, IR, ., getelem, (]
[getReferenceName, (, ), ), ;, Node, assign, =, IR, ., exprResult, (, IR, ., assign, (, IR, ., getelem, (]
[;, Node, assign, =, IR, ., exprResult, (, IR, ., assign, (, IR, ., getelem, (, IR, ., getprop, (]
[assign, =, IR, ., exprResult, (, IR, ., assign, (, IR, ., getelem, (, IR, ., getprop, (, classNode, ,]
[assign, =, IR, ., exprResult, (, IR, ., assign, (, IR, ., getelem, (, IR, ., getprop, (, classNode, ,]
[exprResult, (, IR, ., assign, (, IR, ., getelem, (, IR, ., getprop, (, classNode, ,, IR, ., string, (]
[assign, (, IR, ., getelem, (, IR, ., getprop, (, classNode, ,, IR, ., string, (, "prototype", ), ), ,]
[., getelem, (, IR, ., getprop, (, classNode, ,, IR, ., string, (, "prototype", ), ), ,, marker, ), ,]
[., getelem, (, IR, ., getprop, (, classNode, ,, IR, ., string, (, "prototype", ), ), ,, marker, ), ,]
[,, IR, ., string, (, "prototype", ), ), ,, marker, ), ,, IR, ., trueNode, (, ), ), ), ;]
[,, IR, ., string, (, "prototype", ), ), ,, marker, ), ,, IR, ., trueNode, (, ), ), ), ;]
[,, IR, ., string, (, "prototype", ), ), ,, marker, ), ,, IR, ., trueNode, (, ), ), ), ;]
[,, marker, ), ,, IR, ., trueNode, (, ), ), ), ;, nodeToInsertAfter, ., getParent, (, ), ., addChildAfter, (]
[), ,, IR, ., trueNode, (, ), ), ), ;, nodeToInsertAfter, ., getParent, (, ), ., addChildAfter, (, assign, ,]
[., trueNode, (, ), ), ), ;, nodeToInsertAfter, ., getParent, (, ), ., addChildAfter, (, assign, ,, nodeToInsertAfter, ), ;]
[., trueNode, (, ), ), ), ;, nodeToInsertAfter, ., getParent, (, ), ., addChildAfter, (, assign, ,, nodeToInsertAfter, ), ;]
[;, nodeToInsertAfter, ., getParent, (, ), ., addChildAfter, (, assign, ,, nodeToInsertAfter, ), ;, compiler, ., reportCodeChange, (, ), ;]
[., getParent, (, ), ., addChildAfter, (, assign, ,, nodeToInsertAfter, ), ;, compiler, ., reportCodeChange, (, ), ;, nodeToInsertAfter, =]
[), ., addChildAfter, (, assign, ,, nodeToInsertAfter, ), ;, compiler, ., reportCodeChange, (, ), ;, nodeToInsertAfter, =, assign, ;, return]
[;, nodeToInsertAfter, =, assign, ;, return, nodeToInsertAfter, ;, }, private, Node, findNodeToInsertAfter, (, Node, n, ), {, Node, nodeToInsertAfter, =]
[=, assign, ;, return, nodeToInsertAfter, ;, }, private, Node, findNodeToInsertAfter, (, Node, n, ), {, Node, nodeToInsertAfter, =, findEnclosingConstructorDeclaration, (]
[}, private, Node, findNodeToInsertAfter, (, Node, n, ), {, Node, nodeToInsertAfter, =, findEnclosingConstructorDeclaration, (, n, ), ;, Node, next, =]
[}, private, Node, findNodeToInsertAfter, (, Node, n, ), {, Node, nodeToInsertAfter, =, findEnclosingConstructorDeclaration, (, n, ), ;, Node, next, =]
[{, Node, nodeToInsertAfter, =, findEnclosingConstructorDeclaration, (, n, ), ;, Node, next, =, nodeToInsertAfter, ., getNext, (, ), ;, while, (]
[{, Node, nodeToInsertAfter, =, findEnclosingConstructorDeclaration, (, n, ), ;, Node, next, =, nodeToInsertAfter, ., getNext, (, ), ;, while, (]
[{, Node, nodeToInsertAfter, =, findEnclosingConstructorDeclaration, (, n, ), ;, Node, next, =, nodeToInsertAfter, ., getNext, (, ), ;, while, (]
[nodeToInsertAfter, =, findEnclosingConstructorDeclaration, (, n, ), ;, Node, next, =, nodeToInsertAfter, ., getNext, (, ), ;, while, (, next, !=]
[findEnclosingConstructorDeclaration, (, n, ), ;, Node, next, =, nodeToInsertAfter, ., getNext, (, ), ;, while, (, next, !=, null, &&]
[n, ), ;, Node, next, =, nodeToInsertAfter, ., getNext, (, ), ;, while, (, next, !=, null, &&, isClassDefiningCall, (]
[next, =, nodeToInsertAfter, ., getNext, (, ), ;, while, (, next, !=, null, &&, isClassDefiningCall, (, next, ), ), {]
[nodeToInsertAfter, ., getNext, (, ), ;, while, (, next, !=, null, &&, isClassDefiningCall, (, next, ), ), {, nodeToInsertAfter, =]
[getNext, (, ), ;, while, (, next, !=, null, &&, isClassDefiningCall, (, next, ), ), {, nodeToInsertAfter, =, next, ;]
[), ;, while, (, next, !=, null, &&, isClassDefiningCall, (, next, ), ), {, nodeToInsertAfter, =, next, ;, next, =]
[), ;, while, (, next, !=, null, &&, isClassDefiningCall, (, next, ), ), {, nodeToInsertAfter, =, next, ;, next, =]
[isClassDefiningCall, (, next, ), ), {, nodeToInsertAfter, =, next, ;, next, =, nodeToInsertAfter, ., getNext, (, ), ;, }, return]
[., getNext, (, ), ;, }, return, nodeToInsertAfter, ;, }, private, Node, findEnclosingConstructorDeclaration, (, Node, n, ), {, while, (]
[., getNext, (, ), ;, }, return, nodeToInsertAfter, ;, }, private, Node, findEnclosingConstructorDeclaration, (, Node, n, ), {, while, (]
[getNext, (, ), ;, }, return, nodeToInsertAfter, ;, }, private, Node, findEnclosingConstructorDeclaration, (, Node, n, ), {, while, (, !]
[getNext, (, ), ;, }, return, nodeToInsertAfter, ;, }, private, Node, findEnclosingConstructorDeclaration, (, Node, n, ), {, while, (, !]
[getNext, (, ), ;, }, return, nodeToInsertAfter, ;, }, private, Node, findEnclosingConstructorDeclaration, (, Node, n, ), {, while, (, !]
[Node, findEnclosingConstructorDeclaration, (, Node, n, ), {, while, (, !, n, ., getParent, (, ), ., isScript, (, ), &&]
[findEnclosingConstructorDeclaration, (, Node, n, ), {, while, (, !, n, ., getParent, (, ), ., isScript, (, ), &&, !]
[findEnclosingConstructorDeclaration, (, Node, n, ), {, while, (, !, n, ., getParent, (, ), ., isScript, (, ), &&, !]
[findEnclosingConstructorDeclaration, (, Node, n, ), {, while, (, !, n, ., getParent, (, ), ., isScript, (, ), &&, !]
[getParent, (, ), ., isScript, (, ), &&, !, n, ., getParent, (, ), ., isBlock, (, ), ), {]
[), ., isScript, (, ), &&, !, n, ., getParent, (, ), ., isBlock, (, ), ), {, n, =]
[), ., isScript, (, ), &&, !, n, ., getParent, (, ), ., isBlock, (, ), ), {, n, =]
[., getParent, (, ), ., isBlock, (, ), ), {, n, =, n, ., getParent, (, ), ;, }, return]
[n, ., getParent, (, ), ;, }, return, n, ;, }, private, boolean, isClassDefiningCall, (, Node, next, ), {, return]
[n, ., getParent, (, ), ;, }, return, n, ;, }, private, boolean, isClassDefiningCall, (, Node, next, ), {, return]
[n, ., getParent, (, ), ;, }, return, n, ;, }, private, boolean, isClassDefiningCall, (, Node, next, ), {, return]
[), ;, }, return, n, ;, }, private, boolean, isClassDefiningCall, (, Node, next, ), {, return, NodeUtil, ., isExprCall, (]
[return, n, ;, }, private, boolean, isClassDefiningCall, (, Node, next, ), {, return, NodeUtil, ., isExprCall, (, next, ), &&]
[return, n, ;, }, private, boolean, isClassDefiningCall, (, Node, next, ), {, return, NodeUtil, ., isExprCall, (, next, ), &&]
[return, n, ;, }, private, boolean, isClassDefiningCall, (, Node, next, ), {, return, NodeUtil, ., isExprCall, (, next, ), &&]
[return, n, ;, }, private, boolean, isClassDefiningCall, (, Node, next, ), {, return, NodeUtil, ., isExprCall, (, next, ), &&]
[Node, next, ), {, return, NodeUtil, ., isExprCall, (, next, ), &&, compiler, ., getCodingConvention, (, ), ., getClassesDefinedByCall, (]
[Node, next, ), {, return, NodeUtil, ., isExprCall, (, next, ), &&, compiler, ., getCodingConvention, (, ), ., getClassesDefinedByCall, (]
[isExprCall, (, next, ), &&, compiler, ., getCodingConvention, (, ), ., getClassesDefinedByCall, (, next, ., getFirstChild, (, ), ), !=]
[{, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[{, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isFunction, (, ), ), {]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isFunction, (, ), ), {, visitFunction, (]
[Node, n, ,, Node, parent, ), {, if, (, n, ., isFunction, (, ), ), {, visitFunction, (, t, ,]
[if, (, n, ., isFunction, (, ), ), {, visitFunction, (, t, ,, n, ), ;, }, else, if, (]
[if, (, n, ., isFunction, (, ), ), {, visitFunction, (, t, ,, n, ), ;, }, else, if, (]
[), {, visitFunction, (, t, ,, n, ), ;, }, else, if, (, n, ., isReturn, (, ), ), {]
[visitFunction, (, t, ,, n, ), ;, }, else, if, (, n, ., isReturn, (, ), ), {, visitReturn, (]
[t, ,, n, ), ;, }, else, if, (, n, ., isReturn, (, ), ), {, visitReturn, (, t, ,]
[,, n, ), ;, }, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, ), {, FunctionType, funType, =]
[,, n, ), ;, }, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, ), {, FunctionType, funType, =]
[}, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, ), {, FunctionType, funType, =, JSType, ., toMaybeFunctionType, (]
[}, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, ), {, FunctionType, funType, =, JSType, ., toMaybeFunctionType, (]
[n, ), {, FunctionType, funType, =, JSType, ., toMaybeFunctionType, (, n, ., getJSType, (, ), ), ;, Node, block, =]
[n, ), {, FunctionType, funType, =, JSType, ., toMaybeFunctionType, (, n, ., getJSType, (, ), ), ;, Node, block, =]
[(, n, ., getJSType, (, ), ), ;, Node, block, =, n, ., getLastChild, (, ), ;, Node, paramName, =]
[(, n, ., getJSType, (, ), ), ;, Node, block, =, n, ., getLastChild, (, ), ;, Node, paramName, =]
[(, n, ., getJSType, (, ), ), ;, Node, block, =, n, ., getLastChild, (, ), ;, Node, paramName, =]
[(, ), ), ;, Node, block, =, n, ., getLastChild, (, ), ;, Node, paramName, =, NodeUtil, ., getFunctionParameters, (]
[(, ), ;, Node, paramName, =, NodeUtil, ., getFunctionParameters, (, n, ), ., getFirstChild, (, ), ;, Node, insertionPoint, =]
[., getFunctionParameters, (, n, ), ., getFirstChild, (, ), ;, Node, insertionPoint, =, null, ;, for, (, Node, next, =]
[., getFunctionParameters, (, n, ), ., getFirstChild, (, ), ;, Node, insertionPoint, =, null, ;, for, (, Node, next, =]
[getFirstChild, (, ), ;, Node, insertionPoint, =, null, ;, for, (, Node, next, =, block, ., getFirstChild, (, ), ;]
[getFirstChild, (, ), ;, Node, insertionPoint, =, null, ;, for, (, Node, next, =, block, ., getFirstChild, (, ), ;]
[getFirstChild, (, ), ;, Node, insertionPoint, =, null, ;, for, (, Node, next, =, block, ., getFirstChild, (, ), ;]
[), ;, Node, insertionPoint, =, null, ;, for, (, Node, next, =, block, ., getFirstChild, (, ), ;, next, !=]
[Node, insertionPoint, =, null, ;, for, (, Node, next, =, block, ., getFirstChild, (, ), ;, next, !=, null, &&]
[Node, insertionPoint, =, null, ;, for, (, Node, next, =, block, ., getFirstChild, (, ), ;, next, !=, null, &&]
[;, for, (, Node, next, =, block, ., getFirstChild, (, ), ;, next, !=, null, &&, NodeUtil, ., isFunctionDeclaration, (]
[Node, next, =, block, ., getFirstChild, (, ), ;, next, !=, null, &&, NodeUtil, ., isFunctionDeclaration, (, next, ), ;]
[=, block, ., getFirstChild, (, ), ;, next, !=, null, &&, NodeUtil, ., isFunctionDeclaration, (, next, ), ;, next, =]
[=, block, ., getFirstChild, (, ), ;, next, !=, null, &&, NodeUtil, ., isFunctionDeclaration, (, next, ), ;, next, =]
[next, !=, null, &&, NodeUtil, ., isFunctionDeclaration, (, next, ), ;, next, =, next, ., getNext, (, ), ), {]
[null, &&, NodeUtil, ., isFunctionDeclaration, (, next, ), ;, next, =, next, ., getNext, (, ), ), {, insertionPoint, =]
[;, next, =, next, ., getNext, (, ), ), {, insertionPoint, =, next, ;, }, for, (, Node, paramType, :]
[;, next, =, next, ., getNext, (, ), ), {, insertionPoint, =, next, ;, }, for, (, Node, paramType, :]
[{, insertionPoint, =, next, ;, }, for, (, Node, paramType, :, funType, ., getParameters, (, ), ), {, if, (]
[{, insertionPoint, =, next, ;, }, for, (, Node, paramType, :, funType, ., getParameters, (, ), ), {, if, (]
[=, next, ;, }, for, (, Node, paramType, :, funType, ., getParameters, (, ), ), {, if, (, paramName, ==]
[funType, ., getParameters, (, ), ), {, if, (, paramName, ==, null, ), {, return, ;, }, Node, checkNode, =]
[getParameters, (, ), ), {, if, (, paramName, ==, null, ), {, return, ;, }, Node, checkNode, =, createCheckTypeCallNode, (]
[getParameters, (, ), ), {, if, (, paramName, ==, null, ), {, return, ;, }, Node, checkNode, =, createCheckTypeCallNode, (]
[(, paramName, ==, null, ), {, return, ;, }, Node, checkNode, =, createCheckTypeCallNode, (, paramType, ., getJSType, (, ), ,]
[(, paramName, ==, null, ), {, return, ;, }, Node, checkNode, =, createCheckTypeCallNode, (, paramType, ., getJSType, (, ), ,]
[Node, checkNode, =, createCheckTypeCallNode, (, paramType, ., getJSType, (, ), ,, paramName, ., cloneTree, (, ), ), ;, if, (]
[Node, checkNode, =, createCheckTypeCallNode, (, paramType, ., getJSType, (, ), ,, paramName, ., cloneTree, (, ), ), ;, if, (]
[=, createCheckTypeCallNode, (, paramType, ., getJSType, (, ), ,, paramName, ., cloneTree, (, ), ), ;, if, (, checkNode, ==]
[paramType, ., getJSType, (, ), ,, paramName, ., cloneTree, (, ), ), ;, if, (, checkNode, ==, null, ), {]
[getJSType, (, ), ,, paramName, ., cloneTree, (, ), ), ;, if, (, checkNode, ==, null, ), {, paramName, =]
[getJSType, (, ), ,, paramName, ., cloneTree, (, ), ), ;, if, (, checkNode, ==, null, ), {, paramName, =]
[), ;, if, (, checkNode, ==, null, ), {, paramName, =, paramName, ., getNext, (, ), ;, continue, ;, }]
[if, (, checkNode, ==, null, ), {, paramName, =, paramName, ., getNext, (, ), ;, continue, ;, }, checkNode, =]
[if, (, checkNode, ==, null, ), {, paramName, =, paramName, ., getNext, (, ), ;, continue, ;, }, checkNode, =]
[null, ), {, paramName, =, paramName, ., getNext, (, ), ;, continue, ;, }, checkNode, =, IR, ., exprResult, (]
[paramName, ., getNext, (, ), ;, continue, ;, }, checkNode, =, IR, ., exprResult, (, checkNode, ), ;, if, (]
[paramName, ., getNext, (, ), ;, continue, ;, }, checkNode, =, IR, ., exprResult, (, checkNode, ), ;, if, (]
[getNext, (, ), ;, continue, ;, }, checkNode, =, IR, ., exprResult, (, checkNode, ), ;, if, (, insertionPoint, ==]
[;, continue, ;, }, checkNode, =, IR, ., exprResult, (, checkNode, ), ;, if, (, insertionPoint, ==, null, ), {]
[;, continue, ;, }, checkNode, =, IR, ., exprResult, (, checkNode, ), ;, if, (, insertionPoint, ==, null, ), {]
[checkNode, =, IR, ., exprResult, (, checkNode, ), ;, if, (, insertionPoint, ==, null, ), {, block, ., addChildToFront, (]
[checkNode, ), ;, if, (, insertionPoint, ==, null, ), {, block, ., addChildToFront, (, checkNode, ), ;, }, else, {]
[checkNode, ), ;, if, (, insertionPoint, ==, null, ), {, block, ., addChildToFront, (, checkNode, ), ;, }, else, {]
[(, insertionPoint, ==, null, ), {, block, ., addChildToFront, (, checkNode, ), ;, }, else, {, block, ., addChildAfter, (]
[==, null, ), {, block, ., addChildToFront, (, checkNode, ), ;, }, else, {, block, ., addChildAfter, (, checkNode, ,]
[block, ., addChildToFront, (, checkNode, ), ;, }, else, {, block, ., addChildAfter, (, checkNode, ,, insertionPoint, ), ;, }]
[block, ., addChildToFront, (, checkNode, ), ;, }, else, {, block, ., addChildAfter, (, checkNode, ,, insertionPoint, ), ;, }]
[;, }, else, {, block, ., addChildAfter, (, checkNode, ,, insertionPoint, ), ;, }, compiler, ., reportCodeChange, (, ), ;]
[else, {, block, ., addChildAfter, (, checkNode, ,, insertionPoint, ), ;, }, compiler, ., reportCodeChange, (, ), ;, paramName, =]
[else, {, block, ., addChildAfter, (, checkNode, ,, insertionPoint, ), ;, }, compiler, ., reportCodeChange, (, ), ;, paramName, =]
[checkNode, ,, insertionPoint, ), ;, }, compiler, ., reportCodeChange, (, ), ;, paramName, =, paramName, ., getNext, (, ), ;]
[insertionPoint, ), ;, }, compiler, ., reportCodeChange, (, ), ;, paramName, =, paramName, ., getNext, (, ), ;, insertionPoint, =]
[insertionPoint, =, checkNode, ;, }, }, private, void, visitReturn, (, NodeTraversal, t, ,, Node, n, ), {, Node, function, =]
[insertionPoint, =, checkNode, ;, }, }, private, void, visitReturn, (, NodeTraversal, t, ,, Node, n, ), {, Node, function, =]
[(, NodeTraversal, t, ,, Node, n, ), {, Node, function, =, t, ., getEnclosingFunction, (, ), ;, FunctionType, funType, =]
[(, NodeTraversal, t, ,, Node, n, ), {, Node, function, =, t, ., getEnclosingFunction, (, ), ;, FunctionType, funType, =]
[(, NodeTraversal, t, ,, Node, n, ), {, Node, function, =, t, ., getEnclosingFunction, (, ), ;, FunctionType, funType, =]
[getEnclosingFunction, (, ), ;, FunctionType, funType, =, function, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, Node, retValue, =]
[getEnclosingFunction, (, ), ;, FunctionType, funType, =, function, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, Node, retValue, =]
[., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, Node, retValue, =, n, ., getFirstChild, (, ), ;, if, (]
[., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, Node, retValue, =, n, ., getFirstChild, (, ), ;, if, (]
[(, ), ., toMaybeFunctionType, (, ), ;, Node, retValue, =, n, ., getFirstChild, (, ), ;, if, (, retValue, ==]
[=, n, ., getFirstChild, (, ), ;, if, (, retValue, ==, null, ), {, return, ;, }, Node, checkNode, =]
[., getFirstChild, (, ), ;, if, (, retValue, ==, null, ), {, return, ;, }, Node, checkNode, =, createCheckTypeCallNode, (]
[., getFirstChild, (, ), ;, if, (, retValue, ==, null, ), {, return, ;, }, Node, checkNode, =, createCheckTypeCallNode, (]
[(, retValue, ==, null, ), {, return, ;, }, Node, checkNode, =, createCheckTypeCallNode, (, funType, ., getReturnType, (, ), ,]
[(, retValue, ==, null, ), {, return, ;, }, Node, checkNode, =, createCheckTypeCallNode, (, funType, ., getReturnType, (, ), ,]
[Node, checkNode, =, createCheckTypeCallNode, (, funType, ., getReturnType, (, ), ,, retValue, ., cloneTree, (, ), ), ;, if, (]
[Node, checkNode, =, createCheckTypeCallNode, (, funType, ., getReturnType, (, ), ,, retValue, ., cloneTree, (, ), ), ;, if, (]
[=, createCheckTypeCallNode, (, funType, ., getReturnType, (, ), ,, retValue, ., cloneTree, (, ), ), ;, if, (, checkNode, ==]
[(, ), ,, retValue, ., cloneTree, (, ), ), ;, if, (, checkNode, ==, null, ), {, return, ;, }]
[(, ), ,, retValue, ., cloneTree, (, ), ), ;, if, (, checkNode, ==, null, ), {, return, ;, }]
[., cloneTree, (, ), ), ;, if, (, checkNode, ==, null, ), {, return, ;, }, n, ., replaceChild, (]
[(, ), ), ;, if, (, checkNode, ==, null, ), {, return, ;, }, n, ., replaceChild, (, retValue, ,]
[;, if, (, checkNode, ==, null, ), {, return, ;, }, n, ., replaceChild, (, retValue, ,, checkNode, ), ;]
[;, if, (, checkNode, ==, null, ), {, return, ;, }, n, ., replaceChild, (, retValue, ,, checkNode, ), ;]
[., reportCodeChange, (, ), ;, }, private, Node, createCheckTypeCallNode, (, JSType, type, ,, Node, expr, ), {, Node, arrayNode, =]
[., reportCodeChange, (, ), ;, }, private, Node, createCheckTypeCallNode, (, JSType, type, ,, Node, expr, ), {, Node, arrayNode, =]
[expr, ), {, Node, arrayNode, =, IR, ., arraylit, (, ), ;, Collection, <, JSType, >, alternates, ;, if, (]
[expr, ), {, Node, arrayNode, =, IR, ., arraylit, (, ), ;, Collection, <, JSType, >, alternates, ;, if, (]
[., arraylit, (, ), ;, Collection, <, JSType, >, alternates, ;, if, (, type, ., isUnionType, (, ), ), {]
[(, ), ;, Collection, <, JSType, >, alternates, ;, if, (, type, ., isUnionType, (, ), ), {, alternates, =]
[(, ), ;, Collection, <, JSType, >, alternates, ;, if, (, type, ., isUnionType, (, ), ), {, alternates, =]
[<, JSType, >, alternates, ;, if, (, type, ., isUnionType, (, ), ), {, alternates, =, Sets, ., newTreeSet, (]
[alternates, ;, if, (, type, ., isUnionType, (, ), ), {, alternates, =, Sets, ., newTreeSet, (, ALPHA, ), ;]
[alternates, ;, if, (, type, ., isUnionType, (, ), ), {, alternates, =, Sets, ., newTreeSet, (, ALPHA, ), ;]
[type, ., isUnionType, (, ), ), {, alternates, =, Sets, ., newTreeSet, (, ALPHA, ), ;, Iterables, ., addAll, (]
[isUnionType, (, ), ), {, alternates, =, Sets, ., newTreeSet, (, ALPHA, ), ;, Iterables, ., addAll, (, alternates, ,]
[isUnionType, (, ), ), {, alternates, =, Sets, ., newTreeSet, (, ALPHA, ), ;, Iterables, ., addAll, (, alternates, ,]
[isUnionType, (, ), ), {, alternates, =, Sets, ., newTreeSet, (, ALPHA, ), ;, Iterables, ., addAll, (, alternates, ,]
[Iterables, ., addAll, (, alternates, ,, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), ;, }, else, {]
[addAll, (, alternates, ,, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), ;, }, else, {, alternates, =]
[addAll, (, alternates, ,, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), ;, }, else, {, alternates, =]
[type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), ;, }, else, {, alternates, =, ImmutableList, ., of, (]
[), ;, }, else, {, alternates, =, ImmutableList, ., of, (, type, ), ;, }, for, (, JSType, alternate, :]
[=, ImmutableList, ., of, (, type, ), ;, }, for, (, JSType, alternate, :, alternates, ), {, Node, checkerNode, =]
[., of, (, type, ), ;, }, for, (, JSType, alternate, :, alternates, ), {, Node, checkerNode, =, createCheckerNode, (]
[;, }, for, (, JSType, alternate, :, alternates, ), {, Node, checkerNode, =, createCheckerNode, (, alternate, ), ;, if, (]
[;, }, for, (, JSType, alternate, :, alternates, ), {, Node, checkerNode, =, createCheckerNode, (, alternate, ), ;, if, (]
[for, (, JSType, alternate, :, alternates, ), {, Node, checkerNode, =, createCheckerNode, (, alternate, ), ;, if, (, checkerNode, ==]
[:, alternates, ), {, Node, checkerNode, =, createCheckerNode, (, alternate, ), ;, if, (, checkerNode, ==, null, ), {, return]
[{, Node, checkerNode, =, createCheckerNode, (, alternate, ), ;, if, (, checkerNode, ==, null, ), {, return, null, ;, }]
[{, Node, checkerNode, =, createCheckerNode, (, alternate, ), ;, if, (, checkerNode, ==, null, ), {, return, null, ;, }]
[createCheckerNode, (, alternate, ), ;, if, (, checkerNode, ==, null, ), {, return, null, ;, }, arrayNode, ., addChildToBack, (]
[if, (, checkerNode, ==, null, ), {, return, null, ;, }, arrayNode, ., addChildToBack, (, checkerNode, ), ;, }, return]
[if, (, checkerNode, ==, null, ), {, return, null, ;, }, arrayNode, ., addChildToBack, (, checkerNode, ), ;, }, return]
[null, ), {, return, null, ;, }, arrayNode, ., addChildToBack, (, checkerNode, ), ;, }, return, IR, ., call, (]
[{, return, null, ;, }, arrayNode, ., addChildToBack, (, checkerNode, ), ;, }, return, IR, ., call, (, jsCode, (]
[;, }, arrayNode, ., addChildToBack, (, checkerNode, ), ;, }, return, IR, ., call, (, jsCode, (, "checkType", ), ,]
[arrayNode, ., addChildToBack, (, checkerNode, ), ;, }, return, IR, ., call, (, jsCode, (, "checkType", ), ,, expr, ,]
[(, "checkType", ), ,, expr, ,, arrayNode, ), ;, }, private, Node, createCheckerNode, (, JSType, type, ), {, if, (]
[(, "checkType", ), ,, expr, ,, arrayNode, ), ;, }, private, Node, createCheckerNode, (, JSType, type, ), {, if, (]
[;, }, private, Node, createCheckerNode, (, JSType, type, ), {, if, (, type, ., isNullType, (, ), ), {, return]
[private, Node, createCheckerNode, (, JSType, type, ), {, if, (, type, ., isNullType, (, ), ), {, return, jsCode, (]
[{, if, (, type, ., isNullType, (, ), ), {, return, jsCode, (, "nullChecker", ), ;, }, else, if, (]
[{, if, (, type, ., isNullType, (, ), ), {, return, jsCode, (, "nullChecker", ), ;, }, else, if, (]
[{, if, (, type, ., isNullType, (, ), ), {, return, jsCode, (, "nullChecker", ), ;, }, else, if, (]
[{, if, (, type, ., isNullType, (, ), ), {, return, jsCode, (, "nullChecker", ), ;, }, else, if, (]
[{, if, (, type, ., isNullType, (, ), ), {, return, jsCode, (, "nullChecker", ), ;, }, else, if, (]
[(, ), ), {, return, jsCode, (, "nullChecker", ), ;, }, else, if, (, type, ., isBooleanValueType, (, ), ||]
[(, ), ), {, return, jsCode, (, "nullChecker", ), ;, }, else, if, (, type, ., isBooleanValueType, (, ), ||]
[(, "nullChecker", ), ;, }, else, if, (, type, ., isBooleanValueType, (, ), ||, type, ., isNumberValueType, (, ), ||]
[(, "nullChecker", ), ;, }, else, if, (, type, ., isBooleanValueType, (, ), ||, type, ., isNumberValueType, (, ), ||]
[if, (, type, ., isBooleanValueType, (, ), ||, type, ., isNumberValueType, (, ), ||, type, ., isStringValueType, (, ), ||]
[if, (, type, ., isBooleanValueType, (, ), ||, type, ., isNumberValueType, (, ), ||, type, ., isStringValueType, (, ), ||]
[type, ., isNumberValueType, (, ), ||, type, ., isStringValueType, (, ), ||, type, ., isVoidType, (, ), ), {, return]
[type, ., isNumberValueType, (, ), ||, type, ., isStringValueType, (, ), ||, type, ., isVoidType, (, ), ), {, return]
[), ||, type, ., isStringValueType, (, ), ||, type, ., isVoidType, (, ), ), {, return, IR, ., call, (]
[type, ., isStringValueType, (, ), ||, type, ., isVoidType, (, ), ), {, return, IR, ., call, (, jsCode, (]
[(, ), ||, type, ., isVoidType, (, ), ), {, return, IR, ., call, (, jsCode, (, "valueChecker", ), ,]
[(, ), ||, type, ., isVoidType, (, ), ), {, return, IR, ., call, (, jsCode, (, "valueChecker", ), ,]
[., isVoidType, (, ), ), {, return, IR, ., call, (, jsCode, (, "valueChecker", ), ,, IR, ., string, (]
[., isVoidType, (, ), ), {, return, IR, ., call, (, jsCode, (, "valueChecker", ), ,, IR, ., string, (]
[(, "valueChecker", ), ,, IR, ., string, (, type, ., toString, (, ), ), ), ;, }, else, if, (]
[(, "valueChecker", ), ,, IR, ., string, (, type, ., toString, (, ), ), ), ;, }, else, if, (]
[toString, (, ), ), ), ;, }, else, if, (, type, ., isInstanceType, (, ), ), {, ObjectType, objType, =]
[), ), ;, }, else, if, (, type, ., isInstanceType, (, ), ), {, ObjectType, objType, =, (, ObjectType, )]
[if, (, type, ., isInstanceType, (, ), ), {, ObjectType, objType, =, (, ObjectType, ), type, ;, String, refName, =]
[if, (, type, ., isInstanceType, (, ), ), {, ObjectType, objType, =, (, ObjectType, ), type, ;, String, refName, =]
[ObjectType, objType, =, (, ObjectType, ), type, ;, String, refName, =, objType, ., getReferenceName, (, ), ;, StaticSourceFile, sourceFile, =]
[ObjectType, objType, =, (, ObjectType, ), type, ;, String, refName, =, objType, ., getReferenceName, (, ), ;, StaticSourceFile, sourceFile, =]
[ObjectType, ), type, ;, String, refName, =, objType, ., getReferenceName, (, ), ;, StaticSourceFile, sourceFile, =, NodeUtil, ., getSourceFile, (]
[ObjectType, ), type, ;, String, refName, =, objType, ., getReferenceName, (, ), ;, StaticSourceFile, sourceFile, =, NodeUtil, ., getSourceFile, (]
[ObjectType, ), type, ;, String, refName, =, objType, ., getReferenceName, (, ), ;, StaticSourceFile, sourceFile, =, NodeUtil, ., getSourceFile, (]
[StaticSourceFile, sourceFile, =, NodeUtil, ., getSourceFile, (, objType, ., getConstructor, (, ), ., getSource, (, ), ), ;, if, (]
[StaticSourceFile, sourceFile, =, NodeUtil, ., getSourceFile, (, objType, ., getConstructor, (, ), ., getSource, (, ), ), ;, if, (]
[StaticSourceFile, sourceFile, =, NodeUtil, ., getSourceFile, (, objType, ., getConstructor, (, ), ., getSource, (, ), ), ;, if, (]
[=, NodeUtil, ., getSourceFile, (, objType, ., getConstructor, (, ), ., getSource, (, ), ), ;, if, (, sourceFile, ==]
[., getSourceFile, (, objType, ., getConstructor, (, ), ., getSource, (, ), ), ;, if, (, sourceFile, ==, null, ||]
[., getSourceFile, (, objType, ., getConstructor, (, ), ., getSource, (, ), ), ;, if, (, sourceFile, ==, null, ||]
[., getSource, (, ), ), ;, if, (, sourceFile, ==, null, ||, sourceFile, ., isExtern, (, ), ), {, return]
[., getSource, (, ), ), ;, if, (, sourceFile, ==, null, ||, sourceFile, ., isExtern, (, ), ), {, return]
[), ;, if, (, sourceFile, ==, null, ||, sourceFile, ., isExtern, (, ), ), {, return, IR, ., call, (]
[if, (, sourceFile, ==, null, ||, sourceFile, ., isExtern, (, ), ), {, return, IR, ., call, (, jsCode, (]
[==, null, ||, sourceFile, ., isExtern, (, ), ), {, return, IR, ., call, (, jsCode, (, "externClassChecker", ), ,]
[==, null, ||, sourceFile, ., isExtern, (, ), ), {, return, IR, ., call, (, jsCode, (, "externClassChecker", ), ,]
[., isExtern, (, ), ), {, return, IR, ., call, (, jsCode, (, "externClassChecker", ), ,, IR, ., string, (]
[return, IR, ., call, (, jsCode, (, "externClassChecker", ), ,, IR, ., string, (, refName, ), ), ;, }, return]
[return, IR, ., call, (, jsCode, (, "externClassChecker", ), ,, IR, ., string, (, refName, ), ), ;, }, return]
[(, jsCode, (, "externClassChecker", ), ,, IR, ., string, (, refName, ), ), ;, }, return, IR, ., call, (]
[(, "externClassChecker", ), ,, IR, ., string, (, refName, ), ), ;, }, return, IR, ., call, (, jsCode, (]
[(, "externClassChecker", ), ,, IR, ., string, (, refName, ), ), ;, }, return, IR, ., call, (, jsCode, (]
[(, "externClassChecker", ), ,, IR, ., string, (, refName, ), ), ;, }, return, IR, ., call, (, jsCode, (]
[(, "externClassChecker", ), ,, IR, ., string, (, refName, ), ), ;, }, return, IR, ., call, (, jsCode, (]
[), ;, }, return, IR, ., call, (, jsCode, (, objType, ., getConstructor, (, ), ., isInterface, (, ), ?]
[}, return, IR, ., call, (, jsCode, (, objType, ., getConstructor, (, ), ., isInterface, (, ), ?, "interfaceChecker", :]
[., call, (, jsCode, (, objType, ., getConstructor, (, ), ., isInterface, (, ), ?, "interfaceChecker", :, "classChecker", ), ,]
[., call, (, jsCode, (, objType, ., getConstructor, (, ), ., isInterface, (, ), ?, "interfaceChecker", :, "classChecker", ), ,]
[(, objType, ., getConstructor, (, ), ., isInterface, (, ), ?, "interfaceChecker", :, "classChecker", ), ,, IR, ., string, (]
[(, ), ?, "interfaceChecker", :, "classChecker", ), ,, IR, ., string, (, refName, ), ), ;, }, else, {, return]
[), ;, }, else, {, return, null, ;, }, }, }, private, void, addBoilerplateCode, (, ), {, Node, newNode, =]
[), ;, }, else, {, return, null, ;, }, }, }, private, void, addBoilerplateCode, (, ), {, Node, newNode, =]
[{, return, null, ;, }, }, }, private, void, addBoilerplateCode, (, ), {, Node, newNode, =, compiler, ., ensureLibraryInjected, (]
[}, }, private, void, addBoilerplateCode, (, ), {, Node, newNode, =, compiler, ., ensureLibraryInjected, (, "runtime_type_check", ), ;, if, (]
[}, }, private, void, addBoilerplateCode, (, ), {, Node, newNode, =, compiler, ., ensureLibraryInjected, (, "runtime_type_check", ), ;, if, (]
[}, }, private, void, addBoilerplateCode, (, ), {, Node, newNode, =, compiler, ., ensureLibraryInjected, (, "runtime_type_check", ), ;, if, (]
[private, void, addBoilerplateCode, (, ), {, Node, newNode, =, compiler, ., ensureLibraryInjected, (, "runtime_type_check", ), ;, if, (, newNode, !=]
[addBoilerplateCode, (, ), {, Node, newNode, =, compiler, ., ensureLibraryInjected, (, "runtime_type_check", ), ;, if, (, newNode, !=, null, &&]
[addBoilerplateCode, (, ), {, Node, newNode, =, compiler, ., ensureLibraryInjected, (, "runtime_type_check", ), ;, if, (, newNode, !=, null, &&]
[), {, Node, newNode, =, compiler, ., ensureLibraryInjected, (, "runtime_type_check", ), ;, if, (, newNode, !=, null, &&, logFunction, !=]
[., ensureLibraryInjected, (, "runtime_type_check", ), ;, if, (, newNode, !=, null, &&, logFunction, !=, null, ), {, Node, logOverride, =]
[., ensureLibraryInjected, (, "runtime_type_check", ), ;, if, (, newNode, !=, null, &&, logFunction, !=, null, ), {, Node, logOverride, =]
[), ;, if, (, newNode, !=, null, &&, logFunction, !=, null, ), {, Node, logOverride, =, IR, ., exprResult, (]
[), ;, if, (, newNode, !=, null, &&, logFunction, !=, null, ), {, Node, logOverride, =, IR, ., exprResult, (]
[newNode, !=, null, &&, logFunction, !=, null, ), {, Node, logOverride, =, IR, ., exprResult, (, IR, ., assign, (]
[newNode, !=, null, &&, logFunction, !=, null, ), {, Node, logOverride, =, IR, ., exprResult, (, IR, ., assign, (]
[logFunction, !=, null, ), {, Node, logOverride, =, IR, ., exprResult, (, IR, ., assign, (, NodeUtil, ., newQualifiedNameNode, (]
[logFunction, !=, null, ), {, Node, logOverride, =, IR, ., exprResult, (, IR, ., assign, (, NodeUtil, ., newQualifiedNameNode, (]
[logOverride, =, IR, ., exprResult, (, IR, ., assign, (, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[., exprResult, (, IR, ., assign, (, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, "$jscomp.typecheck.log", ), ,]
[., exprResult, (, IR, ., assign, (, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, "$jscomp.typecheck.log", ), ,]
[., assign, (, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, "$jscomp.typecheck.log", ), ,, NodeUtil, ., newQualifiedNameNode, (]
[., assign, (, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, "$jscomp.typecheck.log", ), ,, NodeUtil, ., newQualifiedNameNode, (]
[(, compiler, ., getCodingConvention, (, ), ,, "$jscomp.typecheck.log", ), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[), ,, "$jscomp.typecheck.log", ), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, logFunction, ), ), ), ;]
[), ,, "$jscomp.typecheck.log", ), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, logFunction, ), ), ), ;]
[), ,, "$jscomp.typecheck.log", ), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, logFunction, ), ), ), ;]
[(, compiler, ., getCodingConvention, (, ), ,, logFunction, ), ), ), ;, newNode, ., getParent, (, ), ., addChildAfter, (]
[., getCodingConvention, (, ), ,, logFunction, ), ), ), ;, newNode, ., getParent, (, ), ., addChildAfter, (, logOverride, ,]
[), ,, logFunction, ), ), ), ;, newNode, ., getParent, (, ), ., addChildAfter, (, logOverride, ,, newNode, ), ;]
[), ,, logFunction, ), ), ), ;, newNode, ., getParent, (, ), ., addChildAfter, (, logOverride, ,, newNode, ), ;]
[newNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, jsCode, (, String, prop, ), {, return]
[newNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, jsCode, (, String, prop, ), {, return]
[., reportCodeChange, (, ), ;, }, }, private, Node, jsCode, (, String, prop, ), {, return, NodeUtil, ., newQualifiedNameNode, (]
[., reportCodeChange, (, ), ;, }, }, private, Node, jsCode, (, String, prop, ), {, return, NodeUtil, ., newQualifiedNameNode, (]
[}, private, Node, jsCode, (, String, prop, ), {, return, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[}, private, Node, jsCode, (, String, prop, ), {, return, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[Node, jsCode, (, String, prop, ), {, return, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, "$jscomp.typecheck.", +]
