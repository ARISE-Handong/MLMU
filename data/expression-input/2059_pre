[., exception, ., util, ., LocalizedFormats, ;, public, final, class, Quaternion, implements, Serializable, {, public, static, final, Quaternion, IDENTITY, =]
[util, ., LocalizedFormats, ;, public, final, class, Quaternion, implements, Serializable, {, public, static, final, Quaternion, IDENTITY, =, new, Quaternion, (]
[LocalizedFormats, ;, public, final, class, Quaternion, implements, Serializable, {, public, static, final, Quaternion, IDENTITY, =, new, Quaternion, (, 1, ,]
[public, final, class, Quaternion, implements, Serializable, {, public, static, final, Quaternion, IDENTITY, =, new, Quaternion, (, 1, ,, 0, ,]
[class, Quaternion, implements, Serializable, {, public, static, final, Quaternion, IDENTITY, =, new, Quaternion, (, 1, ,, 0, ,, 0, ,]
[IDENTITY, =, new, Quaternion, (, 1, ,, 0, ,, 0, ,, 0, ), ;, public, static, final, Quaternion, ZERO, =]
[Quaternion, (, 1, ,, 0, ,, 0, ,, 0, ), ;, public, static, final, Quaternion, ZERO, =, new, Quaternion, (]
[1, ,, 0, ,, 0, ,, 0, ), ;, public, static, final, Quaternion, ZERO, =, new, Quaternion, (, 0, ,]
[0, ,, 0, ,, 0, ), ;, public, static, final, Quaternion, ZERO, =, new, Quaternion, (, 0, ,, 0, ,]
[0, ,, 0, ), ;, public, static, final, Quaternion, ZERO, =, new, Quaternion, (, 0, ,, 0, ,, 0, ,]
[ZERO, =, new, Quaternion, (, 0, ,, 0, ,, 0, ,, 0, ), ;, public, static, final, Quaternion, I, =]
[Quaternion, (, 0, ,, 0, ,, 0, ,, 0, ), ;, public, static, final, Quaternion, I, =, new, Quaternion, (]
[0, ,, 0, ,, 0, ,, 0, ), ;, public, static, final, Quaternion, I, =, new, Quaternion, (, 0, ,]
[0, ,, 0, ,, 0, ), ;, public, static, final, Quaternion, I, =, new, Quaternion, (, 0, ,, 1, ,]
[0, ,, 0, ), ;, public, static, final, Quaternion, I, =, new, Quaternion, (, 0, ,, 1, ,, 0, ,]
[I, =, new, Quaternion, (, 0, ,, 1, ,, 0, ,, 0, ), ;, public, static, final, Quaternion, J, =]
[Quaternion, (, 0, ,, 1, ,, 0, ,, 0, ), ;, public, static, final, Quaternion, J, =, new, Quaternion, (]
[0, ,, 1, ,, 0, ,, 0, ), ;, public, static, final, Quaternion, J, =, new, Quaternion, (, 0, ,]
[1, ,, 0, ,, 0, ), ;, public, static, final, Quaternion, J, =, new, Quaternion, (, 0, ,, 0, ,]
[0, ,, 0, ), ;, public, static, final, Quaternion, J, =, new, Quaternion, (, 0, ,, 0, ,, 1, ,]
[J, =, new, Quaternion, (, 0, ,, 0, ,, 1, ,, 0, ), ;, public, static, final, Quaternion, K, =]
[Quaternion, (, 0, ,, 0, ,, 1, ,, 0, ), ;, public, static, final, Quaternion, K, =, new, Quaternion, (]
[0, ,, 0, ,, 1, ,, 0, ), ;, public, static, final, Quaternion, K, =, new, Quaternion, (, 0, ,]
[0, ,, 1, ,, 0, ), ;, public, static, final, Quaternion, K, =, new, Quaternion, (, 0, ,, 0, ,]
[1, ,, 0, ), ;, public, static, final, Quaternion, K, =, new, Quaternion, (, 0, ,, 0, ,, 0, ,]
[K, =, new, Quaternion, (, 0, ,, 0, ,, 0, ,, 1, ), ;, private, static, final, long, serialVersionUID, =]
[public, Quaternion, (, final, double, a, ,, final, double, b, ,, final, double, c, ,, final, double, d, ), {]
[public, Quaternion, (, final, double, a, ,, final, double, b, ,, final, double, c, ,, final, double, d, ), {]
[double, a, ,, final, double, b, ,, final, double, c, ,, final, double, d, ), {, this, ., q0, =]
[,, final, double, b, ,, final, double, c, ,, final, double, d, ), {, this, ., q0, =, a, ;]
[,, final, double, b, ,, final, double, c, ,, final, double, d, ), {, this, ., q0, =, a, ;]
[,, final, double, c, ,, final, double, d, ), {, this, ., q0, =, a, ;, this, ., q1, =]
[double, c, ,, final, double, d, ), {, this, ., q0, =, a, ;, this, ., q1, =, b, ;]
[double, c, ,, final, double, d, ), {, this, ., q0, =, a, ;, this, ., q1, =, b, ;]
[double, d, ), {, this, ., q0, =, a, ;, this, ., q1, =, b, ;, this, ., q2, =]
[), {, this, ., q0, =, a, ;, this, ., q1, =, b, ;, this, ., q2, =, c, ;]
[), {, this, ., q0, =, a, ;, this, ., q1, =, b, ;, this, ., q2, =, c, ;]
[q0, =, a, ;, this, ., q1, =, b, ;, this, ., q2, =, c, ;, this, ., q3, =]
[;, }, public, Quaternion, (, final, double, scalar, ,, final, double, [, ], v, ), throws, DimensionMismatchException, {, if, (]
[;, }, public, Quaternion, (, final, double, scalar, ,, final, double, [, ], v, ), throws, DimensionMismatchException, {, if, (]
[;, }, public, Quaternion, (, final, double, scalar, ,, final, double, [, ], v, ), throws, DimensionMismatchException, {, if, (]
[(, final, double, scalar, ,, final, double, [, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=]
[,, final, double, [, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=, 3, ), {, throw]
[[, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=, 3, ), {, throw, new, DimensionMismatchException, (]
[[, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=, 3, ), {, throw, new, DimensionMismatchException, (]
[throws, DimensionMismatchException, {, if, (, v, ., length, !=, 3, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,]
[(, v, ., length, !=, 3, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }]
[(, v, ., length, !=, 3, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }]
[!=, 3, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }, this, ., q0, =]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }, this, ., q0, =, scalar, ;]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }, this, ., q0, =, scalar, ;]
[DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }, this, ., q0, =, scalar, ;, this, ., q1, =]
[DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }, this, ., q0, =, scalar, ;, this, ., q1, =]
[v, ., length, ,, 3, ), ;, }, this, ., q0, =, scalar, ;, this, ., q1, =, v, []
[,, 3, ), ;, }, this, ., q0, =, scalar, ;, this, ., q1, =, v, [, 0, ], ;]
[,, 3, ), ;, }, this, ., q0, =, scalar, ;, this, ., q1, =, v, [, 0, ], ;]
[}, this, ., q0, =, scalar, ;, this, ., q1, =, v, [, 0, ], ;, this, ., q2, =]
[}, this, ., q0, =, scalar, ;, this, ., q1, =, v, [, 0, ], ;, this, ., q2, =]
[., q0, =, scalar, ;, this, ., q1, =, v, [, 0, ], ;, this, ., q2, =, v, []
[scalar, ;, this, ., q1, =, v, [, 0, ], ;, this, ., q2, =, v, [, 1, ], ;]
[scalar, ;, this, ., q1, =, v, [, 0, ], ;, this, ., q2, =, v, [, 1, ], ;]
[q1, =, v, [, 0, ], ;, this, ., q2, =, v, [, 1, ], ;, this, ., q3, =]
[q1, =, v, [, 0, ], ;, this, ., q2, =, v, [, 1, ], ;, this, ., q3, =]
[v, [, 0, ], ;, this, ., q2, =, v, [, 1, ], ;, this, ., q3, =, v, []
[q3, =, v, [, 2, ], ;, }, public, Quaternion, (, final, double, [, ], v, ), {, this, (]
[v, [, 2, ], ;, }, public, Quaternion, (, final, double, [, ], v, ), {, this, (, 0, ,]
[[, ], v, ), {, this, (, 0, ,, v, ), ;, }, public, Quaternion, getConjugate, (, ), {, return]
[), {, this, (, 0, ,, v, ), ;, }, public, Quaternion, getConjugate, (, ), {, return, new, Quaternion, (]
[this, (, 0, ,, v, ), ;, }, public, Quaternion, getConjugate, (, ), {, return, new, Quaternion, (, q0, ,]
[(, 0, ,, v, ), ;, }, public, Quaternion, getConjugate, (, ), {, return, new, Quaternion, (, q0, ,, -]
[,, v, ), ;, }, public, Quaternion, getConjugate, (, ), {, return, new, Quaternion, (, q0, ,, -, q1, ,]
[v, ), ;, }, public, Quaternion, getConjugate, (, ), {, return, new, Quaternion, (, q0, ,, -, q1, ,, -]
[;, }, public, Quaternion, getConjugate, (, ), {, return, new, Quaternion, (, q0, ,, -, q1, ,, -, q2, ,]
[}, public, Quaternion, getConjugate, (, ), {, return, new, Quaternion, (, q0, ,, -, q1, ,, -, q2, ,, -]
[;, }, public, static, Quaternion, multiply, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, final, double, q1a, =]
[;, }, public, static, Quaternion, multiply, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, final, double, q1a, =]
[,, final, Quaternion, q2, ), {, final, double, q1a, =, q1, ., getQ0, (, ), ;, final, double, q1b, =]
[,, final, Quaternion, q2, ), {, final, double, q1a, =, q1, ., getQ0, (, ), ;, final, double, q1b, =]
[q1, ., getQ0, (, ), ;, final, double, q1b, =, q1, ., getQ1, (, ), ;, final, double, q1c, =]
[q1, ., getQ0, (, ), ;, final, double, q1b, =, q1, ., getQ1, (, ), ;, final, double, q1c, =]
[q1, ., getQ1, (, ), ;, final, double, q1c, =, q1, ., getQ2, (, ), ;, final, double, q1d, =]
[q1, ., getQ1, (, ), ;, final, double, q1c, =, q1, ., getQ2, (, ), ;, final, double, q1d, =]
[q1, ., getQ2, (, ), ;, final, double, q1d, =, q1, ., getQ3, (, ), ;, final, double, q2a, =]
[q1, ., getQ2, (, ), ;, final, double, q1d, =, q1, ., getQ3, (, ), ;, final, double, q2a, =]
[q1, ., getQ3, (, ), ;, final, double, q2a, =, q2, ., getQ0, (, ), ;, final, double, q2b, =]
[q1, ., getQ3, (, ), ;, final, double, q2a, =, q2, ., getQ0, (, ), ;, final, double, q2b, =]
[q2, ., getQ0, (, ), ;, final, double, q2b, =, q2, ., getQ1, (, ), ;, final, double, q2c, =]
[q2, ., getQ0, (, ), ;, final, double, q2b, =, q2, ., getQ1, (, ), ;, final, double, q2c, =]
[q2, ., getQ1, (, ), ;, final, double, q2c, =, q2, ., getQ2, (, ), ;, final, double, q2d, =]
[q2, ., getQ1, (, ), ;, final, double, q2c, =, q2, ., getQ2, (, ), ;, final, double, q2d, =]
[q2, ., getQ2, (, ), ;, final, double, q2d, =, q2, ., getQ3, (, ), ;, final, double, w, =]
[q2, ., getQ2, (, ), ;, final, double, q2d, =, q2, ., getQ3, (, ), ;, final, double, w, =]
[q2, ., getQ2, (, ), ;, final, double, q2d, =, q2, ., getQ3, (, ), ;, final, double, w, =]
[q2, ., getQ2, (, ), ;, final, double, q2d, =, q2, ., getQ3, (, ), ;, final, double, w, =]
[q2, ., getQ2, (, ), ;, final, double, q2d, =, q2, ., getQ3, (, ), ;, final, double, w, =]
[getQ2, (, ), ;, final, double, q2d, =, q2, ., getQ3, (, ), ;, final, double, w, =, q1a, *]
[), ;, final, double, q2d, =, q2, ., getQ3, (, ), ;, final, double, w, =, q1a, *, q2a, -]
[), ;, final, double, q2d, =, q2, ., getQ3, (, ), ;, final, double, w, =, q1a, *, q2a, -]
[final, double, q2d, =, q2, ., getQ3, (, ), ;, final, double, w, =, q1a, *, q2a, -, q1b, *]
[q2d, =, q2, ., getQ3, (, ), ;, final, double, w, =, q1a, *, q2a, -, q1b, *, q2b, -]
[q2d, =, q2, ., getQ3, (, ), ;, final, double, w, =, q1a, *, q2a, -, q1b, *, q2b, -]
[q2, ., getQ3, (, ), ;, final, double, w, =, q1a, *, q2a, -, q1b, *, q2b, -, q1c, *]
[getQ3, (, ), ;, final, double, w, =, q1a, *, q2a, -, q1b, *, q2b, -, q1c, *, q2c, -]
[getQ3, (, ), ;, final, double, w, =, q1a, *, q2a, -, q1b, *, q2b, -, q1c, *, q2c, -]
[), ;, final, double, w, =, q1a, *, q2a, -, q1b, *, q2b, -, q1c, *, q2c, -, q1d, *]
[q1a, *, q2a, -, q1b, *, q2b, -, q1c, *, q2c, -, q1d, *, q2d, ;, final, double, x, =]
[q1a, *, q2a, -, q1b, *, q2b, -, q1c, *, q2c, -, q1d, *, q2d, ;, final, double, x, =]
[q1a, *, q2a, -, q1b, *, q2b, -, q1c, *, q2c, -, q1d, *, q2d, ;, final, double, x, =]
[q1a, *, q2a, -, q1b, *, q2b, -, q1c, *, q2c, -, q1d, *, q2d, ;, final, double, x, =]
[q1a, *, q2a, -, q1b, *, q2b, -, q1c, *, q2c, -, q1d, *, q2d, ;, final, double, x, =]
[q2a, -, q1b, *, q2b, -, q1c, *, q2c, -, q1d, *, q2d, ;, final, double, x, =, q1a, *]
[q1b, *, q2b, -, q1c, *, q2c, -, q1d, *, q2d, ;, final, double, x, =, q1a, *, q2b, +]
[q1b, *, q2b, -, q1c, *, q2c, -, q1d, *, q2d, ;, final, double, x, =, q1a, *, q2b, +]
[q2b, -, q1c, *, q2c, -, q1d, *, q2d, ;, final, double, x, =, q1a, *, q2b, +, q1b, *]
[q1c, *, q2c, -, q1d, *, q2d, ;, final, double, x, =, q1a, *, q2b, +, q1b, *, q2a, +]
[q1c, *, q2c, -, q1d, *, q2d, ;, final, double, x, =, q1a, *, q2b, +, q1b, *, q2a, +]
[q2c, -, q1d, *, q2d, ;, final, double, x, =, q1a, *, q2b, +, q1b, *, q2a, +, q1c, *]
[q1d, *, q2d, ;, final, double, x, =, q1a, *, q2b, +, q1b, *, q2a, +, q1c, *, q2d, -]
[q1d, *, q2d, ;, final, double, x, =, q1a, *, q2b, +, q1b, *, q2a, +, q1c, *, q2d, -]
[q2d, ;, final, double, x, =, q1a, *, q2b, +, q1b, *, q2a, +, q1c, *, q2d, -, q1d, *]
[q1a, *, q2b, +, q1b, *, q2a, +, q1c, *, q2d, -, q1d, *, q2c, ;, final, double, y, =]
[q1a, *, q2b, +, q1b, *, q2a, +, q1c, *, q2d, -, q1d, *, q2c, ;, final, double, y, =]
[q1a, *, q2b, +, q1b, *, q2a, +, q1c, *, q2d, -, q1d, *, q2c, ;, final, double, y, =]
[q1a, *, q2b, +, q1b, *, q2a, +, q1c, *, q2d, -, q1d, *, q2c, ;, final, double, y, =]
[q1a, *, q2b, +, q1b, *, q2a, +, q1c, *, q2d, -, q1d, *, q2c, ;, final, double, y, =]
[q2b, +, q1b, *, q2a, +, q1c, *, q2d, -, q1d, *, q2c, ;, final, double, y, =, q1a, *]
[q1b, *, q2a, +, q1c, *, q2d, -, q1d, *, q2c, ;, final, double, y, =, q1a, *, q2c, -]
[q1b, *, q2a, +, q1c, *, q2d, -, q1d, *, q2c, ;, final, double, y, =, q1a, *, q2c, -]
[q2a, +, q1c, *, q2d, -, q1d, *, q2c, ;, final, double, y, =, q1a, *, q2c, -, q1b, *]
[q1c, *, q2d, -, q1d, *, q2c, ;, final, double, y, =, q1a, *, q2c, -, q1b, *, q2d, +]
[q1c, *, q2d, -, q1d, *, q2c, ;, final, double, y, =, q1a, *, q2c, -, q1b, *, q2d, +]
[q2d, -, q1d, *, q2c, ;, final, double, y, =, q1a, *, q2c, -, q1b, *, q2d, +, q1c, *]
[q1d, *, q2c, ;, final, double, y, =, q1a, *, q2c, -, q1b, *, q2d, +, q1c, *, q2a, +]
[q1d, *, q2c, ;, final, double, y, =, q1a, *, q2c, -, q1b, *, q2d, +, q1c, *, q2a, +]
[q2c, ;, final, double, y, =, q1a, *, q2c, -, q1b, *, q2d, +, q1c, *, q2a, +, q1d, *]
[q1a, *, q2c, -, q1b, *, q2d, +, q1c, *, q2a, +, q1d, *, q2b, ;, final, double, z, =]
[q1a, *, q2c, -, q1b, *, q2d, +, q1c, *, q2a, +, q1d, *, q2b, ;, final, double, z, =]
[q1a, *, q2c, -, q1b, *, q2d, +, q1c, *, q2a, +, q1d, *, q2b, ;, final, double, z, =]
[q1a, *, q2c, -, q1b, *, q2d, +, q1c, *, q2a, +, q1d, *, q2b, ;, final, double, z, =]
[q1a, *, q2c, -, q1b, *, q2d, +, q1c, *, q2a, +, q1d, *, q2b, ;, final, double, z, =]
[q2c, -, q1b, *, q2d, +, q1c, *, q2a, +, q1d, *, q2b, ;, final, double, z, =, q1a, *]
[q1b, *, q2d, +, q1c, *, q2a, +, q1d, *, q2b, ;, final, double, z, =, q1a, *, q2d, +]
[q1b, *, q2d, +, q1c, *, q2a, +, q1d, *, q2b, ;, final, double, z, =, q1a, *, q2d, +]
[q2d, +, q1c, *, q2a, +, q1d, *, q2b, ;, final, double, z, =, q1a, *, q2d, +, q1b, *]
[q1c, *, q2a, +, q1d, *, q2b, ;, final, double, z, =, q1a, *, q2d, +, q1b, *, q2c, -]
[q1c, *, q2a, +, q1d, *, q2b, ;, final, double, z, =, q1a, *, q2d, +, q1b, *, q2c, -]
[q2a, +, q1d, *, q2b, ;, final, double, z, =, q1a, *, q2d, +, q1b, *, q2c, -, q1c, *]
[q1d, *, q2b, ;, final, double, z, =, q1a, *, q2d, +, q1b, *, q2c, -, q1c, *, q2b, +]
[q1d, *, q2b, ;, final, double, z, =, q1a, *, q2d, +, q1b, *, q2c, -, q1c, *, q2b, +]
[q2b, ;, final, double, z, =, q1a, *, q2d, +, q1b, *, q2c, -, q1c, *, q2b, +, q1d, *]
[double, z, =, q1a, *, q2d, +, q1b, *, q2c, -, q1c, *, q2b, +, q1d, *, q2a, ;, return]
[q1a, *, q2d, +, q1b, *, q2c, -, q1c, *, q2b, +, q1d, *, q2a, ;, return, new, Quaternion, (]
[q2d, +, q1b, *, q2c, -, q1c, *, q2b, +, q1d, *, q2a, ;, return, new, Quaternion, (, w, ,]
[q1b, *, q2c, -, q1c, *, q2b, +, q1d, *, q2a, ;, return, new, Quaternion, (, w, ,, x, ,]
[q2c, -, q1c, *, q2b, +, q1d, *, q2a, ;, return, new, Quaternion, (, w, ,, x, ,, y, ,]
[w, ,, x, ,, y, ,, z, ), ;, }, public, Quaternion, multiply, (, final, Quaternion, q, ), {, return]
[x, ,, y, ,, z, ), ;, }, public, Quaternion, multiply, (, final, Quaternion, q, ), {, return, multiply, (]
[y, ,, z, ), ;, }, public, Quaternion, multiply, (, final, Quaternion, q, ), {, return, multiply, (, this, ,]
[,, q, ), ;, }, public, static, Quaternion, add, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return]
[;, }, public, static, Quaternion, add, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return, new, Quaternion, (]
[;, }, public, static, Quaternion, add, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return, new, Quaternion, (]
[;, }, public, static, Quaternion, add, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return, new, Quaternion, (]
[(, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return, new, Quaternion, (, q1, ., getQ0, (, ), +]
[(, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return, new, Quaternion, (, q1, ., getQ0, (, ), +]
[Quaternion, q2, ), {, return, new, Quaternion, (, q1, ., getQ0, (, ), +, q2, ., getQ0, (, ), ,]
[Quaternion, q2, ), {, return, new, Quaternion, (, q1, ., getQ0, (, ), +, q2, ., getQ0, (, ), ,]
[Quaternion, q2, ), {, return, new, Quaternion, (, q1, ., getQ0, (, ), +, q2, ., getQ0, (, ), ,]
[Quaternion, (, q1, ., getQ0, (, ), +, q2, ., getQ0, (, ), ,, q1, ., getQ1, (, ), +]
[Quaternion, (, q1, ., getQ0, (, ), +, q2, ., getQ0, (, ), ,, q1, ., getQ1, (, ), +]
[), +, q2, ., getQ0, (, ), ,, q1, ., getQ1, (, ), +, q2, ., getQ1, (, ), ,]
[), +, q2, ., getQ0, (, ), ,, q1, ., getQ1, (, ), +, q2, ., getQ1, (, ), ,]
[), +, q2, ., getQ0, (, ), ,, q1, ., getQ1, (, ), +, q2, ., getQ1, (, ), ,]
[), ,, q1, ., getQ1, (, ), +, q2, ., getQ1, (, ), ,, q1, ., getQ2, (, ), +]
[), ,, q1, ., getQ1, (, ), +, q2, ., getQ1, (, ), ,, q1, ., getQ2, (, ), +]
[), +, q2, ., getQ1, (, ), ,, q1, ., getQ2, (, ), +, q2, ., getQ2, (, ), ,]
[), +, q2, ., getQ1, (, ), ,, q1, ., getQ2, (, ), +, q2, ., getQ2, (, ), ,]
[), +, q2, ., getQ1, (, ), ,, q1, ., getQ2, (, ), +, q2, ., getQ2, (, ), ,]
[), ,, q1, ., getQ2, (, ), +, q2, ., getQ2, (, ), ,, q1, ., getQ3, (, ), +]
[), ,, q1, ., getQ2, (, ), +, q2, ., getQ2, (, ), ,, q1, ., getQ3, (, ), +]
[), +, q2, ., getQ3, (, ), ), ;, }, public, Quaternion, add, (, final, Quaternion, q, ), {, return]
[q2, ., getQ3, (, ), ), ;, }, public, Quaternion, add, (, final, Quaternion, q, ), {, return, add, (]
[getQ3, (, ), ), ;, }, public, Quaternion, add, (, final, Quaternion, q, ), {, return, add, (, this, ,]
[,, q, ), ;, }, public, static, Quaternion, subtract, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return]
[;, }, public, static, Quaternion, subtract, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return, new, Quaternion, (]
[;, }, public, static, Quaternion, subtract, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return, new, Quaternion, (]
[;, }, public, static, Quaternion, subtract, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return, new, Quaternion, (]
[(, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return, new, Quaternion, (, q1, ., getQ0, (, ), -]
[(, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return, new, Quaternion, (, q1, ., getQ0, (, ), -]
[Quaternion, q2, ), {, return, new, Quaternion, (, q1, ., getQ0, (, ), -, q2, ., getQ0, (, ), ,]
[Quaternion, q2, ), {, return, new, Quaternion, (, q1, ., getQ0, (, ), -, q2, ., getQ0, (, ), ,]
[Quaternion, q2, ), {, return, new, Quaternion, (, q1, ., getQ0, (, ), -, q2, ., getQ0, (, ), ,]
[Quaternion, (, q1, ., getQ0, (, ), -, q2, ., getQ0, (, ), ,, q1, ., getQ1, (, ), -]
[Quaternion, (, q1, ., getQ0, (, ), -, q2, ., getQ0, (, ), ,, q1, ., getQ1, (, ), -]
[), -, q2, ., getQ0, (, ), ,, q1, ., getQ1, (, ), -, q2, ., getQ1, (, ), ,]
[), -, q2, ., getQ0, (, ), ,, q1, ., getQ1, (, ), -, q2, ., getQ1, (, ), ,]
[), -, q2, ., getQ0, (, ), ,, q1, ., getQ1, (, ), -, q2, ., getQ1, (, ), ,]
[), ,, q1, ., getQ1, (, ), -, q2, ., getQ1, (, ), ,, q1, ., getQ2, (, ), -]
[), ,, q1, ., getQ1, (, ), -, q2, ., getQ1, (, ), ,, q1, ., getQ2, (, ), -]
[), -, q2, ., getQ1, (, ), ,, q1, ., getQ2, (, ), -, q2, ., getQ2, (, ), ,]
[), -, q2, ., getQ1, (, ), ,, q1, ., getQ2, (, ), -, q2, ., getQ2, (, ), ,]
[), -, q2, ., getQ1, (, ), ,, q1, ., getQ2, (, ), -, q2, ., getQ2, (, ), ,]
[), ,, q1, ., getQ2, (, ), -, q2, ., getQ2, (, ), ,, q1, ., getQ3, (, ), -]
[), ,, q1, ., getQ2, (, ), -, q2, ., getQ2, (, ), ,, q1, ., getQ3, (, ), -]
[), -, q2, ., getQ3, (, ), ), ;, }, public, Quaternion, subtract, (, final, Quaternion, q, ), {, return]
[q2, ., getQ3, (, ), ), ;, }, public, Quaternion, subtract, (, final, Quaternion, q, ), {, return, subtract, (]
[getQ3, (, ), ), ;, }, public, Quaternion, subtract, (, final, Quaternion, q, ), {, return, subtract, (, this, ,]
[,, q, ), ;, }, public, static, double, dotProduct, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return]
[,, q, ), ;, }, public, static, double, dotProduct, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return]
[,, q, ), ;, }, public, static, double, dotProduct, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return]
[,, q, ), ;, }, public, static, double, dotProduct, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return]
[,, q, ), ;, }, public, static, double, dotProduct, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return]
[,, q, ), ;, }, public, static, double, dotProduct, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return]
[static, double, dotProduct, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return, q1, ., getQ0, (, ), *]
[static, double, dotProduct, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return, q1, ., getQ0, (, ), *]
[q1, ,, final, Quaternion, q2, ), {, return, q1, ., getQ0, (, ), *, q2, ., getQ0, (, ), +]
[q1, ,, final, Quaternion, q2, ), {, return, q1, ., getQ0, (, ), *, q2, ., getQ0, (, ), +]
[q1, ,, final, Quaternion, q2, ), {, return, q1, ., getQ0, (, ), *, q2, ., getQ0, (, ), +]
[{, return, q1, ., getQ0, (, ), *, q2, ., getQ0, (, ), +, q1, ., getQ1, (, ), *]
[{, return, q1, ., getQ0, (, ), *, q2, ., getQ0, (, ), +, q1, ., getQ1, (, ), *]
[), *, q2, ., getQ0, (, ), +, q1, ., getQ1, (, ), *, q2, ., getQ1, (, ), +]
[), *, q2, ., getQ0, (, ), +, q1, ., getQ1, (, ), *, q2, ., getQ1, (, ), +]
[), *, q2, ., getQ0, (, ), +, q1, ., getQ1, (, ), *, q2, ., getQ1, (, ), +]
[), +, q1, ., getQ1, (, ), *, q2, ., getQ1, (, ), +, q1, ., getQ2, (, ), *]
[), +, q1, ., getQ1, (, ), *, q2, ., getQ1, (, ), +, q1, ., getQ2, (, ), *]
[), *, q2, ., getQ1, (, ), +, q1, ., getQ2, (, ), *, q2, ., getQ2, (, ), +]
[), *, q2, ., getQ1, (, ), +, q1, ., getQ2, (, ), *, q2, ., getQ2, (, ), +]
[), *, q2, ., getQ1, (, ), +, q1, ., getQ2, (, ), *, q2, ., getQ2, (, ), +]
[), +, q1, ., getQ2, (, ), *, q2, ., getQ2, (, ), +, q1, ., getQ3, (, ), *]
[), +, q1, ., getQ2, (, ), *, q2, ., getQ2, (, ), +, q1, ., getQ3, (, ), *]
[(, ), *, q2, ., getQ3, (, ), ;, }, public, double, dotProduct, (, final, Quaternion, q, ), {, return]
[*, q2, ., getQ3, (, ), ;, }, public, double, dotProduct, (, final, Quaternion, q, ), {, return, dotProduct, (]
[., getQ3, (, ), ;, }, public, double, dotProduct, (, final, Quaternion, q, ), {, return, dotProduct, (, this, ,]
[Quaternion, q, ), {, return, dotProduct, (, this, ,, q, ), ;, }, public, double, getNorm, (, ), {, return]
[Quaternion, q, ), {, return, dotProduct, (, this, ,, q, ), ;, }, public, double, getNorm, (, ), {, return]
[return, dotProduct, (, this, ,, q, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (]
[return, dotProduct, (, this, ,, q, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (]
[return, dotProduct, (, this, ,, q, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (]
[return, dotProduct, (, this, ,, q, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (]
[return, dotProduct, (, this, ,, q, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (]
[(, this, ,, q, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, q0, *]
[,, q, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, q0, *, q0, +]
[,, q, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, q0, *, q0, +]
[), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, q0, *, q0, +, q1, *]
[}, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, q0, *, q0, +, q1, *, q1, +]
[}, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, q0, *, q0, +, q1, *, q1, +]
[double, getNorm, (, ), {, return, FastMath, ., sqrt, (, q0, *, q0, +, q1, *, q1, +, q2, *]
[(, ), {, return, FastMath, ., sqrt, (, q0, *, q0, +, q1, *, q1, +, q2, *, q2, +]
[(, ), {, return, FastMath, ., sqrt, (, q0, *, q0, +, q1, *, q1, +, q2, *, q2, +]
[{, return, FastMath, ., sqrt, (, q0, *, q0, +, q1, *, q1, +, q2, *, q2, +, q3, *]
[q2, *, q2, +, q3, *, q3, ), ;, }, public, Quaternion, normalize, (, ), {, final, double, norm, =]
[q3, ), ;, }, public, Quaternion, normalize, (, ), {, final, double, norm, =, getNorm, (, ), ;, if, (]
[q3, ), ;, }, public, Quaternion, normalize, (, ), {, final, double, norm, =, getNorm, (, ), ;, if, (]
[;, }, public, Quaternion, normalize, (, ), {, final, double, norm, =, getNorm, (, ), ;, if, (, norm, <]
[;, }, public, Quaternion, normalize, (, ), {, final, double, norm, =, getNorm, (, ), ;, if, (, norm, <]
[), {, final, double, norm, =, getNorm, (, ), ;, if, (, norm, <, Precision, ., SAFE_MIN, ), {, throw]
[double, norm, =, getNorm, (, ), ;, if, (, norm, <, Precision, ., SAFE_MIN, ), {, throw, new, ZeroException, (]
[double, norm, =, getNorm, (, ), ;, if, (, norm, <, Precision, ., SAFE_MIN, ), {, throw, new, ZeroException, (]
[(, ), ;, if, (, norm, <, Precision, ., SAFE_MIN, ), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,]
[norm, <, Precision, ., SAFE_MIN, ), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, norm, ), ;, }, return]
[., SAFE_MIN, ), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, norm, ), ;, }, return, new, Quaternion, (]
[., SAFE_MIN, ), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, norm, ), ;, }, return, new, Quaternion, (]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, norm, ), ;, }, return, new, Quaternion, (, q0, /]
[throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, norm, ), ;, }, return, new, Quaternion, (, q0, /, norm, ,]
[throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, norm, ), ;, }, return, new, Quaternion, (, q0, /, norm, ,]
[ZeroException, (, LocalizedFormats, ., NORM, ,, norm, ), ;, }, return, new, Quaternion, (, q0, /, norm, ,, q1, /]
[LocalizedFormats, ., NORM, ,, norm, ), ;, }, return, new, Quaternion, (, q0, /, norm, ,, q1, /, norm, ,]
[LocalizedFormats, ., NORM, ,, norm, ), ;, }, return, new, Quaternion, (, q0, /, norm, ,, q1, /, norm, ,]
[NORM, ,, norm, ), ;, }, return, new, Quaternion, (, q0, /, norm, ,, q1, /, norm, ,, q2, /]
[norm, ), ;, }, return, new, Quaternion, (, q0, /, norm, ,, q1, /, norm, ,, q2, /, norm, ,]
[norm, ), ;, }, return, new, Quaternion, (, q0, /, norm, ,, q1, /, norm, ,, q2, /, norm, ,]
[;, }, return, new, Quaternion, (, q0, /, norm, ,, q1, /, norm, ,, q2, /, norm, ,, q3, /]
[norm, ,, q3, /, norm, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[norm, ,, q3, /, norm, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[q3, /, norm, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return]
[boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (]
[boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (]
[this, ==, other, ), {, return, true, ;, }, if, (, other, instanceof, Quaternion, ), {, final, Quaternion, q, =]
[), {, return, true, ;, }, if, (, other, instanceof, Quaternion, ), {, final, Quaternion, q, =, (, Quaternion, )]
[true, ;, }, if, (, other, instanceof, Quaternion, ), {, final, Quaternion, q, =, (, Quaternion, ), other, ;, return]
[true, ;, }, if, (, other, instanceof, Quaternion, ), {, final, Quaternion, q, =, (, Quaternion, ), other, ;, return]
[true, ;, }, if, (, other, instanceof, Quaternion, ), {, final, Quaternion, q, =, (, Quaternion, ), other, ;, return]
[true, ;, }, if, (, other, instanceof, Quaternion, ), {, final, Quaternion, q, =, (, Quaternion, ), other, ;, return]
[true, ;, }, if, (, other, instanceof, Quaternion, ), {, final, Quaternion, q, =, (, Quaternion, ), other, ;, return]
[}, if, (, other, instanceof, Quaternion, ), {, final, Quaternion, q, =, (, Quaternion, ), other, ;, return, q0, ==]
[}, if, (, other, instanceof, Quaternion, ), {, final, Quaternion, q, =, (, Quaternion, ), other, ;, return, q0, ==]
[), {, final, Quaternion, q, =, (, Quaternion, ), other, ;, return, q0, ==, q, ., getQ0, (, ), &&]
[), {, final, Quaternion, q, =, (, Quaternion, ), other, ;, return, q0, ==, q, ., getQ0, (, ), &&]
[final, Quaternion, q, =, (, Quaternion, ), other, ;, return, q0, ==, q, ., getQ0, (, ), &&, q1, ==]
[final, Quaternion, q, =, (, Quaternion, ), other, ;, return, q0, ==, q, ., getQ0, (, ), &&, q1, ==]
[), other, ;, return, q0, ==, q, ., getQ0, (, ), &&, q1, ==, q, ., getQ1, (, ), &&]
[), other, ;, return, q0, ==, q, ., getQ0, (, ), &&, q1, ==, q, ., getQ1, (, ), &&]
[;, return, q0, ==, q, ., getQ0, (, ), &&, q1, ==, q, ., getQ1, (, ), &&, q2, ==]
[;, return, q0, ==, q, ., getQ0, (, ), &&, q1, ==, q, ., getQ1, (, ), &&, q2, ==]
[getQ0, (, ), &&, q1, ==, q, ., getQ1, (, ), &&, q2, ==, q, ., getQ2, (, ), &&]
[getQ0, (, ), &&, q1, ==, q, ., getQ1, (, ), &&, q2, ==, q, ., getQ2, (, ), &&]
[), &&, q1, ==, q, ., getQ1, (, ), &&, q2, ==, q, ., getQ2, (, ), &&, q3, ==]
[), &&, q1, ==, q, ., getQ1, (, ), &&, q2, ==, q, ., getQ2, (, ), &&, q3, ==]
[), &&, q2, ==, q, ., getQ2, (, ), &&, q3, ==, q, ., getQ3, (, ), ;, }, return]
[getQ3, (, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, int, result, =]
[;, }, @, Override, public, int, hashCode, (, ), {, int, result, =, 17, ;, for, (, double, comp, :]
[public, int, hashCode, (, ), {, int, result, =, 17, ;, for, (, double, comp, :, new, double, [, ]]
[int, hashCode, (, ), {, int, result, =, 17, ;, for, (, double, comp, :, new, double, [, ], {]
[(, ), {, int, result, =, 17, ;, for, (, double, comp, :, new, double, [, ], {, q0, ,]
[{, int, result, =, 17, ;, for, (, double, comp, :, new, double, [, ], {, q0, ,, q1, ,]
[result, =, 17, ;, for, (, double, comp, :, new, double, [, ], {, q0, ,, q1, ,, q2, ,]
[:, new, double, [, ], {, q0, ,, q1, ,, q2, ,, q3, }, ), {, final, int, c, =]
[:, new, double, [, ], {, q0, ,, q1, ,, q2, ,, q3, }, ), {, final, int, c, =]
[], {, q0, ,, q1, ,, q2, ,, q3, }, ), {, final, int, c, =, MathUtils, ., hash, (]
[,, q1, ,, q2, ,, q3, }, ), {, final, int, c, =, MathUtils, ., hash, (, comp, ), ;]
[,, q2, ,, q3, }, ), {, final, int, c, =, MathUtils, ., hash, (, comp, ), ;, result, =]
[,, q2, ,, q3, }, ), {, final, int, c, =, MathUtils, ., hash, (, comp, ), ;, result, =]
[,, q2, ,, q3, }, ), {, final, int, c, =, MathUtils, ., hash, (, comp, ), ;, result, =]
[,, q3, }, ), {, final, int, c, =, MathUtils, ., hash, (, comp, ), ;, result, =, 31, *]
[}, ), {, final, int, c, =, MathUtils, ., hash, (, comp, ), ;, result, =, 31, *, result, +]
[int, c, =, MathUtils, ., hash, (, comp, ), ;, result, =, 31, *, result, +, c, ;, }, return]
[;, }, return, result, ;, }, public, boolean, equals, (, final, Quaternion, q, ,, final, double, eps, ), {, return]
[;, }, return, result, ;, }, public, boolean, equals, (, final, Quaternion, q, ,, final, double, eps, ), {, return]
[;, }, return, result, ;, }, public, boolean, equals, (, final, Quaternion, q, ,, final, double, eps, ), {, return]
[;, }, return, result, ;, }, public, boolean, equals, (, final, Quaternion, q, ,, final, double, eps, ), {, return]
[;, }, return, result, ;, }, public, boolean, equals, (, final, Quaternion, q, ,, final, double, eps, ), {, return]
[;, }, public, boolean, equals, (, final, Quaternion, q, ,, final, double, eps, ), {, return, Precision, ., equals, (]
[public, boolean, equals, (, final, Quaternion, q, ,, final, double, eps, ), {, return, Precision, ., equals, (, q0, ,]
[public, boolean, equals, (, final, Quaternion, q, ,, final, double, eps, ), {, return, Precision, ., equals, (, q0, ,]
[q, ,, final, double, eps, ), {, return, Precision, ., equals, (, q0, ,, q, ., getQ0, (, ), ,]
[double, eps, ), {, return, Precision, ., equals, (, q0, ,, q, ., getQ0, (, ), ,, eps, ), &&]
[double, eps, ), {, return, Precision, ., equals, (, q0, ,, q, ., getQ0, (, ), ,, eps, ), &&]
[return, Precision, ., equals, (, q0, ,, q, ., getQ0, (, ), ,, eps, ), &&, Precision, ., equals, (]
[., equals, (, q0, ,, q, ., getQ0, (, ), ,, eps, ), &&, Precision, ., equals, (, q1, ,]
[., equals, (, q0, ,, q, ., getQ0, (, ), ,, eps, ), &&, Precision, ., equals, (, q1, ,]
[., getQ0, (, ), ,, eps, ), &&, Precision, ., equals, (, q1, ,, q, ., getQ1, (, ), ,]
[), ,, eps, ), &&, Precision, ., equals, (, q1, ,, q, ., getQ1, (, ), ,, eps, ), &&]
[), ,, eps, ), &&, Precision, ., equals, (, q1, ,, q, ., getQ1, (, ), ,, eps, ), &&]
[&&, Precision, ., equals, (, q1, ,, q, ., getQ1, (, ), ,, eps, ), &&, Precision, ., equals, (]
[., equals, (, q1, ,, q, ., getQ1, (, ), ,, eps, ), &&, Precision, ., equals, (, q2, ,]
[., equals, (, q1, ,, q, ., getQ1, (, ), ,, eps, ), &&, Precision, ., equals, (, q2, ,]
[., getQ1, (, ), ,, eps, ), &&, Precision, ., equals, (, q2, ,, q, ., getQ2, (, ), ,]
[), ,, eps, ), &&, Precision, ., equals, (, q2, ,, q, ., getQ2, (, ), ,, eps, ), &&]
[), ,, eps, ), &&, Precision, ., equals, (, q2, ,, q, ., getQ2, (, ), ,, eps, ), &&]
[&&, Precision, ., equals, (, q2, ,, q, ., getQ2, (, ), ,, eps, ), &&, Precision, ., equals, (]
[., equals, (, q2, ,, q, ., getQ2, (, ), ,, eps, ), &&, Precision, ., equals, (, q3, ,]
[., equals, (, q2, ,, q, ., getQ2, (, ), ,, eps, ), &&, Precision, ., equals, (, q3, ,]
[., getQ2, (, ), ,, eps, ), &&, Precision, ., equals, (, q3, ,, q, ., getQ3, (, ), ,]
[,, q, ., getQ3, (, ), ,, eps, ), ;, }, public, boolean, isUnitQuaternion, (, double, eps, ), {, return]
[,, q, ., getQ3, (, ), ,, eps, ), ;, }, public, boolean, isUnitQuaternion, (, double, eps, ), {, return]
[(, ), ,, eps, ), ;, }, public, boolean, isUnitQuaternion, (, double, eps, ), {, return, Precision, ., equals, (]
[), ;, }, public, boolean, isUnitQuaternion, (, double, eps, ), {, return, Precision, ., equals, (, getNorm, (, ), ,]
[}, public, boolean, isUnitQuaternion, (, double, eps, ), {, return, Precision, ., equals, (, getNorm, (, ), ,, 1d, ,]
[(, getNorm, (, ), ,, 1d, ,, eps, ), ;, }, public, boolean, isPureQuaternion, (, double, eps, ), {, return]
[(, getNorm, (, ), ,, 1d, ,, eps, ), ;, }, public, boolean, isPureQuaternion, (, double, eps, ), {, return]
[(, getNorm, (, ), ,, 1d, ,, eps, ), ;, }, public, boolean, isPureQuaternion, (, double, eps, ), {, return]
[,, 1d, ,, eps, ), ;, }, public, boolean, isPureQuaternion, (, double, eps, ), {, return, FastMath, ., abs, (]
[;, }, public, boolean, isPureQuaternion, (, double, eps, ), {, return, FastMath, ., abs, (, getQ0, (, ), ), <=]
[FastMath, ., abs, (, getQ0, (, ), ), <=, eps, ;, }, public, Quaternion, getPositivePolarForm, (, ), {, if, (]
[FastMath, ., abs, (, getQ0, (, ), ), <=, eps, ;, }, public, Quaternion, getPositivePolarForm, (, ), {, if, (]
[getQ0, (, ), ), <=, eps, ;, }, public, Quaternion, getPositivePolarForm, (, ), {, if, (, getQ0, (, ), <]
[}, public, Quaternion, getPositivePolarForm, (, ), {, if, (, getQ0, (, ), <, 0, ), {, final, Quaternion, unitQ, =]
[), {, if, (, getQ0, (, ), <, 0, ), {, final, Quaternion, unitQ, =, normalize, (, ), ;, return]
[(, getQ0, (, ), <, 0, ), {, final, Quaternion, unitQ, =, normalize, (, ), ;, return, new, Quaternion, (]
[getQ0, (, ), <, 0, ), {, final, Quaternion, unitQ, =, normalize, (, ), ;, return, new, Quaternion, (, -]
[getQ0, (, ), <, 0, ), {, final, Quaternion, unitQ, =, normalize, (, ), ;, return, new, Quaternion, (, -]
[{, final, Quaternion, unitQ, =, normalize, (, ), ;, return, new, Quaternion, (, -, unitQ, ., getQ0, (, ), ,]
[final, Quaternion, unitQ, =, normalize, (, ), ;, return, new, Quaternion, (, -, unitQ, ., getQ0, (, ), ,, -]
[final, Quaternion, unitQ, =, normalize, (, ), ;, return, new, Quaternion, (, -, unitQ, ., getQ0, (, ), ,, -]
[), ;, return, new, Quaternion, (, -, unitQ, ., getQ0, (, ), ,, -, unitQ, ., getQ1, (, ), ,]
[;, return, new, Quaternion, (, -, unitQ, ., getQ0, (, ), ,, -, unitQ, ., getQ1, (, ), ,, -]
[;, return, new, Quaternion, (, -, unitQ, ., getQ0, (, ), ,, -, unitQ, ., getQ1, (, ), ,, -]
[unitQ, ., getQ0, (, ), ,, -, unitQ, ., getQ1, (, ), ,, -, unitQ, ., getQ2, (, ), ,]
[., getQ0, (, ), ,, -, unitQ, ., getQ1, (, ), ,, -, unitQ, ., getQ2, (, ), ,, -]
[., getQ0, (, ), ,, -, unitQ, ., getQ1, (, ), ,, -, unitQ, ., getQ2, (, ), ,, -]
[,, -, unitQ, ., getQ2, (, ), ,, -, unitQ, ., getQ3, (, ), ), ;, }, else, {, return]
[,, -, unitQ, ., getQ2, (, ), ,, -, unitQ, ., getQ3, (, ), ), ;, }, else, {, return]
[{, return, this, ., normalize, (, ), ;, }, }, public, Quaternion, getInverse, (, ), {, final, double, squareNorm, =]
[{, return, this, ., normalize, (, ), ;, }, }, public, Quaternion, getInverse, (, ), {, final, double, squareNorm, =]
[{, return, this, ., normalize, (, ), ;, }, }, public, Quaternion, getInverse, (, ), {, final, double, squareNorm, =]
[{, return, this, ., normalize, (, ), ;, }, }, public, Quaternion, getInverse, (, ), {, final, double, squareNorm, =]
[{, return, this, ., normalize, (, ), ;, }, }, public, Quaternion, getInverse, (, ), {, final, double, squareNorm, =]
[this, ., normalize, (, ), ;, }, }, public, Quaternion, getInverse, (, ), {, final, double, squareNorm, =, q0, *]
[normalize, (, ), ;, }, }, public, Quaternion, getInverse, (, ), {, final, double, squareNorm, =, q0, *, q0, +]
[normalize, (, ), ;, }, }, public, Quaternion, getInverse, (, ), {, final, double, squareNorm, =, q0, *, q0, +]
[), ;, }, }, public, Quaternion, getInverse, (, ), {, final, double, squareNorm, =, q0, *, q0, +, q1, *]
[}, }, public, Quaternion, getInverse, (, ), {, final, double, squareNorm, =, q0, *, q0, +, q1, *, q1, +]
[}, }, public, Quaternion, getInverse, (, ), {, final, double, squareNorm, =, q0, *, q0, +, q1, *, q1, +]
[public, Quaternion, getInverse, (, ), {, final, double, squareNorm, =, q0, *, q0, +, q1, *, q1, +, q2, *]
[getInverse, (, ), {, final, double, squareNorm, =, q0, *, q0, +, q1, *, q1, +, q2, *, q2, +]
[getInverse, (, ), {, final, double, squareNorm, =, q0, *, q0, +, q1, *, q1, +, q2, *, q2, +]
[), {, final, double, squareNorm, =, q0, *, q0, +, q1, *, q1, +, q2, *, q2, +, q3, *]
[squareNorm, =, q0, *, q0, +, q1, *, q1, +, q2, *, q2, +, q3, *, q3, ;, if, (]
[squareNorm, =, q0, *, q0, +, q1, *, q1, +, q2, *, q2, +, q3, *, q3, ;, if, (]
[q0, *, q0, +, q1, *, q1, +, q2, *, q2, +, q3, *, q3, ;, if, (, squareNorm, <]
[q0, *, q0, +, q1, *, q1, +, q2, *, q2, +, q3, *, q3, ;, if, (, squareNorm, <]
[q1, +, q2, *, q2, +, q3, *, q3, ;, if, (, squareNorm, <, Precision, ., SAFE_MIN, ), {, throw]
[*, q2, +, q3, *, q3, ;, if, (, squareNorm, <, Precision, ., SAFE_MIN, ), {, throw, new, ZeroException, (]
[*, q2, +, q3, *, q3, ;, if, (, squareNorm, <, Precision, ., SAFE_MIN, ), {, throw, new, ZeroException, (]
[*, q3, ;, if, (, squareNorm, <, Precision, ., SAFE_MIN, ), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,]
[squareNorm, <, Precision, ., SAFE_MIN, ), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, squareNorm, ), ;, }, return]
[., SAFE_MIN, ), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, squareNorm, ), ;, }, return, new, Quaternion, (]
[., SAFE_MIN, ), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, squareNorm, ), ;, }, return, new, Quaternion, (]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, squareNorm, ), ;, }, return, new, Quaternion, (, q0, /]
[throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, squareNorm, ), ;, }, return, new, Quaternion, (, q0, /, squareNorm, ,]
[throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, squareNorm, ), ;, }, return, new, Quaternion, (, q0, /, squareNorm, ,]
[new, ZeroException, (, LocalizedFormats, ., NORM, ,, squareNorm, ), ;, }, return, new, Quaternion, (, q0, /, squareNorm, ,, -]
[(, LocalizedFormats, ., NORM, ,, squareNorm, ), ;, }, return, new, Quaternion, (, q0, /, squareNorm, ,, -, q1, /]
[., NORM, ,, squareNorm, ), ;, }, return, new, Quaternion, (, q0, /, squareNorm, ,, -, q1, /, squareNorm, ,]
[., NORM, ,, squareNorm, ), ;, }, return, new, Quaternion, (, q0, /, squareNorm, ,, -, q1, /, squareNorm, ,]
[NORM, ,, squareNorm, ), ;, }, return, new, Quaternion, (, q0, /, squareNorm, ,, -, q1, /, squareNorm, ,, -]
[squareNorm, ), ;, }, return, new, Quaternion, (, q0, /, squareNorm, ,, -, q1, /, squareNorm, ,, -, q2, /]
[;, }, return, new, Quaternion, (, q0, /, squareNorm, ,, -, q1, /, squareNorm, ,, -, q2, /, squareNorm, ,]
[;, }, return, new, Quaternion, (, q0, /, squareNorm, ,, -, q1, /, squareNorm, ,, -, q2, /, squareNorm, ,]
[}, return, new, Quaternion, (, q0, /, squareNorm, ,, -, q1, /, squareNorm, ,, -, q2, /, squareNorm, ,, -]
[new, Quaternion, (, q0, /, squareNorm, ,, -, q1, /, squareNorm, ,, -, q2, /, squareNorm, ,, -, q3, /]
[,, -, q2, /, squareNorm, ,, -, q3, /, squareNorm, ), ;, }, public, double, getQ0, (, ), {, return]
[), ;, }, public, double, getQ0, (, ), {, return, q0, ;, }, public, double, getQ1, (, ), {, return]
[q0, ;, }, public, double, getQ1, (, ), {, return, q1, ;, }, public, double, getQ2, (, ), {, return]
[q1, ;, }, public, double, getQ2, (, ), {, return, q2, ;, }, public, double, getQ3, (, ), {, return]
[q2, ;, }, public, double, getQ3, (, ), {, return, q3, ;, }, public, double, getScalarPart, (, ), {, return]
[double, getScalarPart, (, ), {, return, getQ0, (, ), ;, }, public, double, [, ], getVectorPart, (, ), {, return]
[{, return, getQ0, (, ), ;, }, public, double, [, ], getVectorPart, (, ), {, return, new, double, [, ]]
[return, getQ0, (, ), ;, }, public, double, [, ], getVectorPart, (, ), {, return, new, double, [, ], {]
[;, }, public, double, [, ], getVectorPart, (, ), {, return, new, double, [, ], {, getQ1, (, ), ,]
[[, ], getVectorPart, (, ), {, return, new, double, [, ], {, getQ1, (, ), ,, getQ2, (, ), ,]
[getQ2, (, ), ,, getQ3, (, ), }, ;, }, public, Quaternion, multiply, (, final, double, alpha, ), {, return]
[,, getQ3, (, ), }, ;, }, public, Quaternion, multiply, (, final, double, alpha, ), {, return, new, Quaternion, (]
[,, getQ3, (, ), }, ;, }, public, Quaternion, multiply, (, final, double, alpha, ), {, return, new, Quaternion, (]
[(, ), }, ;, }, public, Quaternion, multiply, (, final, double, alpha, ), {, return, new, Quaternion, (, alpha, *]
[}, ;, }, public, Quaternion, multiply, (, final, double, alpha, ), {, return, new, Quaternion, (, alpha, *, q0, ,]
[}, ;, }, public, Quaternion, multiply, (, final, double, alpha, ), {, return, new, Quaternion, (, alpha, *, q0, ,]
[}, public, Quaternion, multiply, (, final, double, alpha, ), {, return, new, Quaternion, (, alpha, *, q0, ,, alpha, *]
[Quaternion, multiply, (, final, double, alpha, ), {, return, new, Quaternion, (, alpha, *, q0, ,, alpha, *, q1, ,]
[Quaternion, multiply, (, final, double, alpha, ), {, return, new, Quaternion, (, alpha, *, q0, ,, alpha, *, q1, ,]
[(, final, double, alpha, ), {, return, new, Quaternion, (, alpha, *, q0, ,, alpha, *, q1, ,, alpha, *]
[double, alpha, ), {, return, new, Quaternion, (, alpha, *, q0, ,, alpha, *, q1, ,, alpha, *, q2, ,]
[double, alpha, ), {, return, new, Quaternion, (, alpha, *, q0, ,, alpha, *, q1, ,, alpha, *, q2, ,]
[), {, return, new, Quaternion, (, alpha, *, q0, ,, alpha, *, q1, ,, alpha, *, q2, ,, alpha, *]
[q2, ,, alpha, *, q3, ), ;, }, @, Override, public, String, toString, (, ), {, final, String, sp, =]
[;, }, @, Override, public, String, toString, (, ), {, final, String, sp, =, " ", ;, final, StringBuilder, s, =]
[String, toString, (, ), {, final, String, sp, =, " ", ;, final, StringBuilder, s, =, new, StringBuilder, (, ), ;]
[String, toString, (, ), {, final, String, sp, =, " ", ;, final, StringBuilder, s, =, new, StringBuilder, (, ), ;]
[String, toString, (, ), {, final, String, sp, =, " ", ;, final, StringBuilder, s, =, new, StringBuilder, (, ), ;]
[String, toString, (, ), {, final, String, sp, =, " ", ;, final, StringBuilder, s, =, new, StringBuilder, (, ), ;]
[String, toString, (, ), {, final, String, sp, =, " ", ;, final, StringBuilder, s, =, new, StringBuilder, (, ), ;]
[String, toString, (, ), {, final, String, sp, =, " ", ;, final, StringBuilder, s, =, new, StringBuilder, (, ), ;]
[String, toString, (, ), {, final, String, sp, =, " ", ;, final, StringBuilder, s, =, new, StringBuilder, (, ), ;]
[String, toString, (, ), {, final, String, sp, =, " ", ;, final, StringBuilder, s, =, new, StringBuilder, (, ), ;]
[String, toString, (, ), {, final, String, sp, =, " ", ;, final, StringBuilder, s, =, new, StringBuilder, (, ), ;]
[String, toString, (, ), {, final, String, sp, =, " ", ;, final, StringBuilder, s, =, new, StringBuilder, (, ), ;]
[{, final, String, sp, =, " ", ;, final, StringBuilder, s, =, new, StringBuilder, (, ), ;, s, ., append, (]
[" ", ;, final, StringBuilder, s, =, new, StringBuilder, (, ), ;, s, ., append, (, "[", ), ., append, (]
[=, new, StringBuilder, (, ), ;, s, ., append, (, "[", ), ., append, (, q0, ), ., append, (]
[;, s, ., append, (, "[", ), ., append, (, q0, ), ., append, (, sp, ), ., append, (]
["[", ), ., append, (, q0, ), ., append, (, sp, ), ., append, (, q1, ), ., append, (]
[q0, ), ., append, (, sp, ), ., append, (, q1, ), ., append, (, sp, ), ., append, (]
[sp, ), ., append, (, q1, ), ., append, (, sp, ), ., append, (, q2, ), ., append, (]
[q1, ), ., append, (, sp, ), ., append, (, q2, ), ., append, (, sp, ), ., append, (]
[sp, ), ., append, (, q2, ), ., append, (, sp, ), ., append, (, q3, ), ., append, (]
[(, q2, ), ., append, (, sp, ), ., append, (, q3, ), ., append, (, "]", ), ;, return]
[(, q2, ), ., append, (, sp, ), ., append, (, q3, ), ., append, (, "]", ), ;, return]
