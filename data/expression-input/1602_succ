[;, public, static, final, Vector2D, NaN, =, new, Vector2D, (, Double, ., NaN, ,, Double, ., NaN, ), ;, public]
[,, 0, ), ;, public, static, final, Vector2D, NaN, =, new, Vector2D, (, Double, ., NaN, ,, Double, ., NaN]
[), ;, public, static, final, Vector2D, NaN, =, new, Vector2D, (, Double, ., NaN, ,, Double, ., NaN, ), ;]
[;, public, static, final, Vector2D, POSITIVE_INFINITY, =, new, Vector2D, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, public]
[,, Double, ., NaN, ), ;, public, static, final, Vector2D, POSITIVE_INFINITY, =, new, Vector2D, (, Double, ., POSITIVE_INFINITY, ,, Double]
[., NaN, ,, Double, ., NaN, ), ;, public, static, final, Vector2D, POSITIVE_INFINITY, =, new, Vector2D, (, Double, ., POSITIVE_INFINITY]
[), ;, public, static, final, Vector2D, POSITIVE_INFINITY, =, new, Vector2D, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;]
[., NaN, ), ;, public, static, final, Vector2D, POSITIVE_INFINITY, =, new, Vector2D, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY]
[;, public, static, final, Vector2D, NEGATIVE_INFINITY, =, new, Vector2D, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ), ;, private]
[,, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Vector2D, NEGATIVE_INFINITY, =, new, Vector2D, (, Double, ., NEGATIVE_INFINITY, ,, Double]
[., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Vector2D, NEGATIVE_INFINITY, =, new, Vector2D, (, Double, ., NEGATIVE_INFINITY]
[), ;, public, static, final, Vector2D, NEGATIVE_INFINITY, =, new, Vector2D, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ), ;]
[., POSITIVE_INFINITY, ), ;, public, static, final, Vector2D, NEGATIVE_INFINITY, =, new, Vector2D, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY]
[;, private, static, final, long, serialVersionUID, =, 266938651998679754L, ;, private, final, double, x, ;, private, final, double, y, ;, public]
[,, Double, ., NEGATIVE_INFINITY, ), ;, private, static, final, long, serialVersionUID, =, 266938651998679754L, ;, private, final, double, x, ;, private]
[., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ), ;, private, static, final, long, serialVersionUID, =, 266938651998679754L, ;, private, final, double, x]
[), ;, private, static, final, long, serialVersionUID, =, 266938651998679754L, ;, private, final, double, x, ;, private, final, double, y, ;]
[., NEGATIVE_INFINITY, ), ;, private, static, final, long, serialVersionUID, =, 266938651998679754L, ;, private, final, double, x, ;, private, final, double]
[;, private, final, double, x, ;, private, final, double, y, ;, public, Vector2D, (, double, x, ,, double, y, )]
[=, x, ;, this, ., y, =, y, ;, }, public, Vector2D, (, double, [, ], v, ), throws, DimensionMismatchException]
[., x, =, x, ;, this, ., y, =, y, ;, }, public, Vector2D, (, double, [, ], v, )]
[;, this, ., y, =, y, ;, }, public, Vector2D, (, double, [, ], v, ), throws, DimensionMismatchException, {, if]
[=, y, ;, }, public, Vector2D, (, double, [, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length]
[., y, =, y, ;, }, public, Vector2D, (, double, [, ], v, ), throws, DimensionMismatchException, {, if, (, v]
[;, }, public, Vector2D, (, double, [, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=, 2]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 2, ), ;, }, this, ., x, =, v, []
[!=, 2, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 2, ), ;, }, this, ., x, =]
[., length, !=, 2, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 2, ), ;, }, this, .]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 2, ), ;, }, this, ., x, =, v, []
[;, }, this, ., x, =, v, [, 0, ], ;, this, ., y, =, v, [, 1, ], ;]
[,, 2, ), ;, }, this, ., x, =, v, [, 0, ], ;, this, ., y, =, v, []
[., length, ,, 2, ), ;, }, this, ., x, =, v, [, 0, ], ;, this, ., y, =]
[), ;, }, this, ., x, =, v, [, 0, ], ;, this, ., y, =, v, [, 1, ]]
[=, v, [, 0, ], ;, this, ., y, =, v, [, 1, ], ;, }, public, Vector2D, (, double]
[., x, =, v, [, 0, ], ;, this, ., y, =, v, [, 1, ], ;, }, public, Vector2D]
[;, this, ., y, =, v, [, 1, ], ;, }, public, Vector2D, (, double, a, ,, Vector2D, u, )]
[[, 0, ], ;, this, ., y, =, v, [, 1, ], ;, }, public, Vector2D, (, double, a, ,]
[], ;, this, ., y, =, v, [, 1, ], ;, }, public, Vector2D, (, double, a, ,, Vector2D, u]
[=, v, [, 1, ], ;, }, public, Vector2D, (, double, a, ,, Vector2D, u, ), {, this, ., x]
[., y, =, v, [, 1, ], ;, }, public, Vector2D, (, double, a, ,, Vector2D, u, ), {, this]
[;, }, public, Vector2D, (, double, a, ,, Vector2D, u, ), {, this, ., x, =, a, *, u, .]
[[, 1, ], ;, }, public, Vector2D, (, double, a, ,, Vector2D, u, ), {, this, ., x, =, a]
[], ;, }, public, Vector2D, (, double, a, ,, Vector2D, u, ), {, this, ., x, =, a, *, u]
[=, a, *, u, ., x, ;, this, ., y, =, a, *, u, ., y, ;, }, public, Vector2D]
[., x, =, a, *, u, ., x, ;, this, ., y, =, a, *, u, ., y, ;, }]
[;, this, ., y, =, a, *, u, ., y, ;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1]
[*, u, ., x, ;, this, ., y, =, a, *, u, ., y, ;, }, public, Vector2D, (, double]
[;, this, ., y, =, a, *, u, ., y, ;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1]
[., x, ;, this, ., y, =, a, *, u, ., y, ;, }, public, Vector2D, (, double, a1, ,]
[=, a, *, u, ., y, ;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,]
[., y, =, a, *, u, ., y, ;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double]
[;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ), {, this, .]
[*, u, ., y, ;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2]
[;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ), {, this, .]
[., y, ;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ), {]
[=, a1, *, u1, ., x, +, a2, *, u2, ., x, ;, this, ., y, =, a1, *, u1]
[., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, ;, this, ., y, =, a1]
[;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, ;, }, public, Vector2D]
[+, a2, *, u2, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2]
[*, u1, ., x, +, a2, *, u2, ., x, ;, this, ., y, =, a1, *, u1, ., y]
[+, a2, *, u2, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2]
[., x, +, a2, *, u2, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2]
[;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, ;, }, public, Vector2D]
[*, u2, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y]
[;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, ;, }, public, Vector2D]
[., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, ;, }]
[=, a1, *, u1, ., y, +, a2, *, u2, ., y, ;, }, public, Vector2D, (, double, a1, ,]
[., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, ;, }, public, Vector2D, (, double]
[;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ,, double, a3, ,]
[+, a2, *, u2, ., y, ;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,]
[*, u1, ., y, +, a2, *, u2, ., y, ;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1]
[+, a2, *, u2, ., y, ;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,]
[., y, +, a2, *, u2, ., y, ;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double]
[;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ,, double, a3, ,]
[*, u2, ., y, ;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2]
[;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ,, double, a3, ,]
[., y, ;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ,, double]
[=, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, ;, this]
[., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x]
[;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, +, a3, *, u3]
[+, a3, *, u3, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2]
[+, a2, *, u2, ., x, +, a3, *, u3, ., x, ;, this, ., y, =, a1, *, u1]
[*, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, ;, this, ., y]
[+, a2, *, u2, ., x, +, a3, *, u3, ., x, ;, this, ., y, =, a1, *, u1]
[., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, ;, this, ., y, =, a1]
[+, a3, *, u3, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2]
[*, u2, ., x, +, a3, *, u3, ., x, ;, this, ., y, =, a1, *, u1, ., y]
[+, a3, *, u3, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2]
[., x, +, a3, *, u3, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2]
[;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, +, a3, *, u3]
[*, u3, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y]
[;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, +, a3, *, u3]
[., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, +, a3]
[=, a1, *, u1, ., y, +, a2, *, u2, ., y, +, a3, *, u3, ., y, ;, }]
[., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, +, a3, *, u3, ., y]
[;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ,, double, a3, ,]
[+, a3, *, u3, ., y, ;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,]
[+, a2, *, u2, ., y, +, a3, *, u3, ., y, ;, }, public, Vector2D, (, double, a1, ,]
[*, u1, ., y, +, a2, *, u2, ., y, +, a3, *, u3, ., y, ;, }, public, Vector2D]
[+, a2, *, u2, ., y, +, a3, *, u3, ., y, ;, }, public, Vector2D, (, double, a1, ,]
[., y, +, a2, *, u2, ., y, +, a3, *, u3, ., y, ;, }, public, Vector2D, (, double]
[+, a3, *, u3, ., y, ;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,]
[*, u2, ., y, +, a3, *, u3, ., y, ;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1]
[+, a3, *, u3, ., y, ;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,]
[., y, +, a3, *, u3, ., y, ;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double]
[;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ,, double, a3, ,]
[*, u3, ., y, ;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2]
[;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ,, double, a3, ,]
[., y, ;, }, public, Vector2D, (, double, a1, ,, Vector2D, u1, ,, double, a2, ,, Vector2D, u2, ,, double]
[=, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, +, a4]
[., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x]
[;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, +, a3, *, u3]
[+, a4, *, u4, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2]
[+, a3, *, u3, ., x, +, a4, *, u4, ., x, ;, this, ., y, =, a1, *, u1]
[+, a2, *, u2, ., x, +, a3, *, u3, ., x, +, a4, *, u4, ., x, ;, this]
[*, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, +, a4, *, u4]
[+, a2, *, u2, ., x, +, a3, *, u3, ., x, +, a4, *, u4, ., x, ;, this]
[., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, +, a4, *, u4, ., x]
[+, a3, *, u3, ., x, +, a4, *, u4, ., x, ;, this, ., y, =, a1, *, u1]
[*, u2, ., x, +, a3, *, u3, ., x, +, a4, *, u4, ., x, ;, this, ., y]
[+, a3, *, u3, ., x, +, a4, *, u4, ., x, ;, this, ., y, =, a1, *, u1]
[., x, +, a3, *, u3, ., x, +, a4, *, u4, ., x, ;, this, ., y, =, a1]
[+, a4, *, u4, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2]
[*, u3, ., x, +, a4, *, u4, ., x, ;, this, ., y, =, a1, *, u1, ., y]
[+, a4, *, u4, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2]
[., x, +, a4, *, u4, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2]
[;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, +, a3, *, u3]
[*, u4, ., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y]
[;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, +, a3, *, u3]
[., x, ;, this, ., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, +, a3]
[=, a1, *, u1, ., y, +, a2, *, u2, ., y, +, a3, *, u3, ., y, +, a4]
[., y, =, a1, *, u1, ., y, +, a2, *, u2, ., y, +, a3, *, u3, ., y]
[;, }, public, double, getX, (, ), {, return, x, ;, }, public, double, getY, (, ), {, return, y]
[+, a4, *, u4, ., y, ;, }, public, double, getX, (, ), {, return, x, ;, }, public, double]
[+, a3, *, u3, ., y, +, a4, *, u4, ., y, ;, }, public, double, getX, (, ), {]
[+, a2, *, u2, ., y, +, a3, *, u3, ., y, +, a4, *, u4, ., y, ;, }]
[*, u1, ., y, +, a2, *, u2, ., y, +, a3, *, u3, ., y, +, a4, *, u4]
[+, a2, *, u2, ., y, +, a3, *, u3, ., y, +, a4, *, u4, ., y, ;, }]
[., y, +, a2, *, u2, ., y, +, a3, *, u3, ., y, +, a4, *, u4, ., y]
[+, a3, *, u3, ., y, +, a4, *, u4, ., y, ;, }, public, double, getX, (, ), {]
[*, u2, ., y, +, a3, *, u3, ., y, +, a4, *, u4, ., y, ;, }, public, double]
[+, a3, *, u3, ., y, +, a4, *, u4, ., y, ;, }, public, double, getX, (, ), {]
[., y, +, a3, *, u3, ., y, +, a4, *, u4, ., y, ;, }, public, double, getX, (]
[+, a4, *, u4, ., y, ;, }, public, double, getX, (, ), {, return, x, ;, }, public, double]
[*, u3, ., y, +, a4, *, u4, ., y, ;, }, public, double, getX, (, ), {, return, x]
[+, a4, *, u4, ., y, ;, }, public, double, getX, (, ), {, return, x, ;, }, public, double]
[., y, +, a4, *, u4, ., y, ;, }, public, double, getX, (, ), {, return, x, ;, }]
[;, }, public, double, getX, (, ), {, return, x, ;, }, public, double, getY, (, ), {, return, y]
[*, u4, ., y, ;, }, public, double, getX, (, ), {, return, x, ;, }, public, double, getY, (]
[;, }, public, double, getX, (, ), {, return, x, ;, }, public, double, getY, (, ), {, return, y]
[., y, ;, }, public, double, getX, (, ), {, return, x, ;, }, public, double, getY, (, ), {]
[;, }, public, double, getY, (, ), {, return, y, ;, }, public, double, [, ], toArray, (, ), {]
[;, }, public, double, [, ], toArray, (, ), {, return, new, double, [, ], {, x, ,, y, }]
[;, }, public, Space, getSpace, (, ), {, return, Euclidean2D, ., getInstance, (, ), ;, }, public, Vector2D, getZero, (]
[;, }, public, Space, getSpace, (, ), {, return, Euclidean2D, ., getInstance, (, ), ;, }, public, Vector2D, getZero, (]
[,, y, }, ;, }, public, Space, getSpace, (, ), {, return, Euclidean2D, ., getInstance, (, ), ;, }, public]
[}, ;, }, public, Space, getSpace, (, ), {, return, Euclidean2D, ., getInstance, (, ), ;, }, public, Vector2D, getZero]
[;, }, public, Vector2D, getZero, (, ), {, return, ZERO, ;, }, public, double, getNorm1, (, ), {, return, FastMath]
[., getInstance, (, ), ;, }, public, Vector2D, getZero, (, ), {, return, ZERO, ;, }, public, double, getNorm1, (]
[;, }, public, double, getNorm1, (, ), {, return, FastMath, ., abs, (, x, ), +, FastMath, ., abs, (]
[;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, x, *, x, +, y, *, y]
[+, FastMath, ., abs, (, y, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (]
[., abs, (, x, ), +, FastMath, ., abs, (, y, ), ;, }, public, double, getNorm, (, ), {]
[), +, FastMath, ., abs, (, y, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt]
[;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, x, *, x, +, y, *, y]
[., abs, (, y, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, x, *]
[), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, x, *, x, +, y, *]
[;, }, public, double, getNormSq, (, ), {, return, x, *, x, +, y, *, y, ;, }, public, double]
[., sqrt, (, x, *, x, +, y, *, y, ), ;, }, public, double, getNormSq, (, ), {, return]
[), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +, y, *, y, ;, }, public]
[+, y, *, y, ), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +, y, *]
[*, x, +, y, *, y, ), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +]
[+, y, *, y, ), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +, y, *]
[), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +, y, *, y, ;, }, public]
[*, y, ), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +, y, *, y, ;]
[), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +, y, *, y, ;, }, public]
[;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., abs, (, x, ), ,]
[+, y, *, y, ;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., abs]
[*, x, +, y, *, y, ;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (, FastMath]
[+, y, *, y, ;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., abs]
[;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., abs, (, x, ), ,]
[*, y, ;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., abs, (, x]
[;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., abs, (, x, ), ,]
[;, }, public, Vector2D, add, (, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =, (, Vector2D, ), v]
[., max, (, FastMath, ., abs, (, x, ), ,, FastMath, ., abs, (, y, ), ), ;, }, public]
[,, FastMath, ., abs, (, y, ), ), ;, }, public, Vector2D, add, (, Vector, <, Euclidean2D, >, v, )]
[., abs, (, x, ), ,, FastMath, ., abs, (, y, ), ), ;, }, public, Vector2D, add, (, Vector]
[), ,, FastMath, ., abs, (, y, ), ), ;, }, public, Vector2D, add, (, Vector, <, Euclidean2D, >, v]
[), ;, }, public, Vector2D, add, (, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =, (, Vector2D, )]
[., abs, (, y, ), ), ;, }, public, Vector2D, add, (, Vector, <, Euclidean2D, >, v, ), {, Vector2D]
[), ), ;, }, public, Vector2D, add, (, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =, (, Vector2D]
[;, return, new, Vector2D, (, x, +, v2, ., getX, (, ), ,, y, +, v2, ., getY, (, )]
[;, return, new, Vector2D, (, x, +, v2, ., getX, (, ), ,, y, +, v2, ., getY, (, )]
[;, }, public, Vector2D, add, (, double, factor, ,, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =, (]
[,, y, +, v2, ., getY, (, ), ), ;, }, public, Vector2D, add, (, double, factor, ,, Vector, <]
[+, v2, ., getX, (, ), ,, y, +, v2, ., getY, (, ), ), ;, }, public, Vector2D, add]
[,, y, +, v2, ., getY, (, ), ), ;, }, public, Vector2D, add, (, double, factor, ,, Vector, <]
[., getX, (, ), ,, y, +, v2, ., getY, (, ), ), ;, }, public, Vector2D, add, (, double]
[), ;, }, public, Vector2D, add, (, double, factor, ,, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =]
[+, v2, ., getY, (, ), ), ;, }, public, Vector2D, add, (, double, factor, ,, Vector, <, Euclidean2D, >]
[), ;, }, public, Vector2D, add, (, double, factor, ,, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =]
[., getY, (, ), ), ;, }, public, Vector2D, add, (, double, factor, ,, Vector, <, Euclidean2D, >, v, )]
[;, return, new, Vector2D, (, x, +, factor, *, v2, ., getX, (, ), ,, y, +, factor, *, v2]
[;, return, new, Vector2D, (, x, +, factor, *, v2, ., getX, (, ), ,, y, +, factor, *, v2]
[;, }, public, Vector2D, subtract, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p]
[,, y, +, factor, *, v2, ., getY, (, ), ), ;, }, public, Vector2D, subtract, (, Vector, <, Euclidean2D]
[+, factor, *, v2, ., getX, (, ), ,, y, +, factor, *, v2, ., getY, (, ), ), ;]
[,, y, +, factor, *, v2, ., getY, (, ), ), ;, }, public, Vector2D, subtract, (, Vector, <, Euclidean2D]
[*, v2, ., getX, (, ), ,, y, +, factor, *, v2, ., getY, (, ), ), ;, }, public]
[,, y, +, factor, *, v2, ., getY, (, ), ), ;, }, public, Vector2D, subtract, (, Vector, <, Euclidean2D]
[., getX, (, ), ,, y, +, factor, *, v2, ., getY, (, ), ), ;, }, public, Vector2D, subtract]
[), ;, }, public, Vector2D, subtract, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, )]
[+, factor, *, v2, ., getY, (, ), ), ;, }, public, Vector2D, subtract, (, Vector, <, Euclidean2D, >, p]
[), ;, }, public, Vector2D, subtract, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, )]
[*, v2, ., getY, (, ), ), ;, }, public, Vector2D, subtract, (, Vector, <, Euclidean2D, >, p, ), {]
[), ;, }, public, Vector2D, subtract, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, )]
[., getY, (, ), ), ;, }, public, Vector2D, subtract, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3]
[;, return, new, Vector2D, (, x, -, p3, ., x, ,, y, -, p3, ., y, ), ;, }, public]
[;, return, new, Vector2D, (, x, -, p3, ., x, ,, y, -, p3, ., y, ), ;, }, public]
[;, }, public, Vector2D, subtract, (, double, factor, ,, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =, (]
[,, y, -, p3, ., y, ), ;, }, public, Vector2D, subtract, (, double, factor, ,, Vector, <, Euclidean2D, >]
[-, p3, ., x, ,, y, -, p3, ., y, ), ;, }, public, Vector2D, subtract, (, double, factor, ,]
[,, y, -, p3, ., y, ), ;, }, public, Vector2D, subtract, (, double, factor, ,, Vector, <, Euclidean2D, >]
[., x, ,, y, -, p3, ., y, ), ;, }, public, Vector2D, subtract, (, double, factor, ,, Vector, <]
[), ;, }, public, Vector2D, subtract, (, double, factor, ,, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =]
[-, p3, ., y, ), ;, }, public, Vector2D, subtract, (, double, factor, ,, Vector, <, Euclidean2D, >, v, )]
[), ;, }, public, Vector2D, subtract, (, double, factor, ,, Vector, <, Euclidean2D, >, v, ), {, Vector2D, v2, =]
[., y, ), ;, }, public, Vector2D, subtract, (, double, factor, ,, Vector, <, Euclidean2D, >, v, ), {, Vector2D]
[;, return, new, Vector2D, (, x, -, factor, *, v2, ., getX, (, ), ,, y, -, factor, *, v2]
[;, return, new, Vector2D, (, x, -, factor, *, v2, ., getX, (, ), ,, y, -, factor, *, v2]
[;, }, public, Vector2D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (, s]
[,, y, -, factor, *, v2, ., getY, (, ), ), ;, }, public, Vector2D, normalize, (, ), throws, MathArithmeticException]
[-, factor, *, v2, ., getX, (, ), ,, y, -, factor, *, v2, ., getY, (, ), ), ;]
[,, y, -, factor, *, v2, ., getY, (, ), ), ;, }, public, Vector2D, normalize, (, ), throws, MathArithmeticException]
[*, v2, ., getX, (, ), ,, y, -, factor, *, v2, ., getY, (, ), ), ;, }, public]
[,, y, -, factor, *, v2, ., getY, (, ), ), ;, }, public, Vector2D, normalize, (, ), throws, MathArithmeticException]
[., getX, (, ), ,, y, -, factor, *, v2, ., getY, (, ), ), ;, }, public, Vector2D, normalize]
[), ;, }, public, Vector2D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (]
[-, factor, *, v2, ., getY, (, ), ), ;, }, public, Vector2D, normalize, (, ), throws, MathArithmeticException, {, double]
[), ;, }, public, Vector2D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (]
[*, v2, ., getY, (, ), ), ;, }, public, Vector2D, normalize, (, ), throws, MathArithmeticException, {, double, s, =]
[), ;, }, public, Vector2D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (]
[., getY, (, ), ), ;, }, public, Vector2D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (]
[;, if, (, s, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (, 1, /, s, ), ;]
[==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (, 1, /, s]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (, 1, /, s, ), ;]
[;, }, return, scalarMultiply, (, 1, /, s, ), ;, }, public, Vector2D, negate, (, ), {, return, new, Vector2D]
[), ;, }, return, scalarMultiply, (, 1, /, s, ), ;, }, public, Vector2D, negate, (, ), {, return, new]
[., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (, 1, /, s, ), ;, }, public, Vector2D, negate, (, ), {]
[;, }, public, Vector2D, negate, (, ), {, return, new, Vector2D, (, -, x, ,, -, y, ), ;, }]
[), ;, }, public, Vector2D, negate, (, ), {, return, new, Vector2D, (, -, x, ,, -, y, ), ;]
[/, s, ), ;, }, public, Vector2D, negate, (, ), {, return, new, Vector2D, (, -, x, ,, -, y]
[), ;, }, public, Vector2D, negate, (, ), {, return, new, Vector2D, (, -, x, ,, -, y, ), ;]
[;, }, public, Vector2D, scalarMultiply, (, double, a, ), {, return, new, Vector2D, (, a, *, x, ,, a, *]
[,, -, y, ), ;, }, public, Vector2D, scalarMultiply, (, double, a, ), {, return, new, Vector2D, (, a, *]
[,, -, y, ), ;, }, public, Vector2D, scalarMultiply, (, double, a, ), {, return, new, Vector2D, (, a, *]
[), ;, }, public, Vector2D, scalarMultiply, (, double, a, ), {, return, new, Vector2D, (, a, *, x, ,, a]
[), ;, }, public, Vector2D, scalarMultiply, (, double, a, ), {, return, new, Vector2D, (, a, *, x, ,, a]
[;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (]
[,, a, *, y, ), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, )]
[*, x, ,, a, *, y, ), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (]
[,, a, *, y, ), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, )]
[), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ||, Double, ., isNaN]
[*, y, ), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ||, Double]
[), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ||, Double, ., isNaN]
[;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, (, Double, ., isInfinite, (, x]
[||, Double, ., isNaN, (, y, ), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, )]
[., isNaN, (, x, ), ||, Double, ., isNaN, (, y, ), ;, }, public, boolean, isInfinite, (, ), {]
[), ||, Double, ., isNaN, (, y, ), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (]
[;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, (, Double, ., isInfinite, (, x]
[., isNaN, (, y, ), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, (]
[), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, (, Double, ., isInfinite, (]
[;, }, public, double, distance1, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p]
[&&, (, Double, ., isInfinite, (, x, ), ||, Double, ., isInfinite, (, y, ), ), ;, }, public, double]
[&&, (, Double, ., isInfinite, (, x, ), ||, Double, ., isInfinite, (, y, ), ), ;, }, public, double]
[;, }, public, double, distance1, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p]
[), ;, }, public, double, distance1, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, )]
[||, Double, ., isInfinite, (, y, ), ), ;, }, public, double, distance1, (, Vector, <, Euclidean2D, >, p, )]
[., isInfinite, (, x, ), ||, Double, ., isInfinite, (, y, ), ), ;, }, public, double, distance1, (, Vector]
[), ||, Double, ., isInfinite, (, y, ), ), ;, }, public, double, distance1, (, Vector, <, Euclidean2D, >, p]
[), ;, }, public, double, distance1, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, )]
[., isInfinite, (, y, ), ), ;, }, public, double, distance1, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D]
[), ), ;, }, public, double, distance1, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D]
[;, final, double, dx, =, FastMath, ., abs, (, p3, ., x, -, x, ), ;, final, double, dy, =]
[;, final, double, dx, =, FastMath, ., abs, (, p3, ., x, -, x, ), ;, final, double, dy, =]
[;, final, double, dy, =, FastMath, ., abs, (, p3, ., y, -, y, ), ;, return, dx, +, dy]
[., abs, (, p3, ., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (, p3, .]
[), ;, final, double, dy, =, FastMath, ., abs, (, p3, ., y, -, y, ), ;, return, dx, +]
[-, x, ), ;, final, double, dy, =, FastMath, ., abs, (, p3, ., y, -, y, ), ;, return]
[., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (, p3, ., y, -, y, )]
[), ;, final, double, dy, =, FastMath, ., abs, (, p3, ., y, -, y, ), ;, return, dx, +]
[;, return, dx, +, dy, ;, }, public, double, distance, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3]
[., abs, (, p3, ., y, -, y, ), ;, return, dx, +, dy, ;, }, public, double, distance, (]
[), ;, return, dx, +, dy, ;, }, public, double, distance, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D]
[-, y, ), ;, return, dx, +, dy, ;, }, public, double, distance, (, Vector, <, Euclidean2D, >, p, )]
[., y, -, y, ), ;, return, dx, +, dy, ;, }, public, double, distance, (, Vector, <, Euclidean2D, >]
[), ;, return, dx, +, dy, ;, }, public, double, distance, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D]
[;, }, public, double, distance, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p]
[+, dy, ;, }, public, double, distance, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D]
[;, }, public, double, distance, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p]
[;, final, double, dx, =, p3, ., x, -, x, ;, final, double, dy, =, p3, ., y, -, y]
[;, final, double, dx, =, p3, ., x, -, x, ;, final, double, dy, =, p3, ., y, -, y]
[;, final, double, dy, =, p3, ., y, -, y, ;, return, FastMath, ., sqrt, (, dx, *, dx, +]
[-, x, ;, final, double, dy, =, p3, ., y, -, y, ;, return, FastMath, ., sqrt, (, dx, *]
[., x, -, x, ;, final, double, dy, =, p3, ., y, -, y, ;, return, FastMath, ., sqrt, (]
[;, final, double, dy, =, p3, ., y, -, y, ;, return, FastMath, ., sqrt, (, dx, *, dx, +]
[;, return, FastMath, ., sqrt, (, dx, *, dx, +, dy, *, dy, ), ;, }, public, double, distanceInf, (]
[-, y, ;, return, FastMath, ., sqrt, (, dx, *, dx, +, dy, *, dy, ), ;, }, public, double]
[., y, -, y, ;, return, FastMath, ., sqrt, (, dx, *, dx, +, dy, *, dy, ), ;, }]
[;, return, FastMath, ., sqrt, (, dx, *, dx, +, dy, *, dy, ), ;, }, public, double, distanceInf, (]
[;, }, public, double, distanceInf, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p]
[., sqrt, (, dx, *, dx, +, dy, *, dy, ), ;, }, public, double, distanceInf, (, Vector, <, Euclidean2D]
[), ;, }, public, double, distanceInf, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, )]
[+, dy, *, dy, ), ;, }, public, double, distanceInf, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3]
[*, dx, +, dy, *, dy, ), ;, }, public, double, distanceInf, (, Vector, <, Euclidean2D, >, p, ), {]
[+, dy, *, dy, ), ;, }, public, double, distanceInf, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3]
[), ;, }, public, double, distanceInf, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, )]
[*, dy, ), ;, }, public, double, distanceInf, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (]
[), ;, }, public, double, distanceInf, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, )]
[;, final, double, dx, =, FastMath, ., abs, (, p3, ., x, -, x, ), ;, final, double, dy, =]
[;, final, double, dx, =, FastMath, ., abs, (, p3, ., x, -, x, ), ;, final, double, dy, =]
[;, final, double, dy, =, FastMath, ., abs, (, p3, ., y, -, y, ), ;, return, FastMath, ., max]
[., abs, (, p3, ., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (, p3, .]
[), ;, final, double, dy, =, FastMath, ., abs, (, p3, ., y, -, y, ), ;, return, FastMath, .]
[-, x, ), ;, final, double, dy, =, FastMath, ., abs, (, p3, ., y, -, y, ), ;, return]
[., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (, p3, ., y, -, y, )]
[), ;, final, double, dy, =, FastMath, ., abs, (, p3, ., y, -, y, ), ;, return, FastMath, .]
[;, return, FastMath, ., max, (, dx, ,, dy, ), ;, }, public, double, distanceSq, (, Vector, <, Euclidean2D, >]
[., abs, (, p3, ., y, -, y, ), ;, return, FastMath, ., max, (, dx, ,, dy, ), ;]
[), ;, return, FastMath, ., max, (, dx, ,, dy, ), ;, }, public, double, distanceSq, (, Vector, <, Euclidean2D]
[-, y, ), ;, return, FastMath, ., max, (, dx, ,, dy, ), ;, }, public, double, distanceSq, (, Vector]
[., y, -, y, ), ;, return, FastMath, ., max, (, dx, ,, dy, ), ;, }, public, double, distanceSq]
[), ;, return, FastMath, ., max, (, dx, ,, dy, ), ;, }, public, double, distanceSq, (, Vector, <, Euclidean2D]
[;, }, public, double, distanceSq, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, ), p]
[., max, (, dx, ,, dy, ), ;, }, public, double, distanceSq, (, Vector, <, Euclidean2D, >, p, ), {]
[,, dy, ), ;, }, public, double, distanceSq, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (]
[), ;, }, public, double, distanceSq, (, Vector, <, Euclidean2D, >, p, ), {, Vector2D, p3, =, (, Vector2D, )]
[;, final, double, dx, =, p3, ., x, -, x, ;, final, double, dy, =, p3, ., y, -, y]
[;, final, double, dx, =, p3, ., x, -, x, ;, final, double, dy, =, p3, ., y, -, y]
[;, final, double, dy, =, p3, ., y, -, y, ;, return, dx, *, dx, +, dy, *, dy, ;]
[-, x, ;, final, double, dy, =, p3, ., y, -, y, ;, return, dx, *, dx, +, dy, *]
[., x, -, x, ;, final, double, dy, =, p3, ., y, -, y, ;, return, dx, *, dx, +]
[;, final, double, dy, =, p3, ., y, -, y, ;, return, dx, *, dx, +, dy, *, dy, ;]
[;, return, dx, *, dx, +, dy, *, dy, ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean2D, >]
[-, y, ;, return, dx, *, dx, +, dy, *, dy, ;, }, public, double, dotProduct, (, final, Vector, <]
[., y, -, y, ;, return, dx, *, dx, +, dy, *, dy, ;, }, public, double, dotProduct, (, final]
[;, return, dx, *, dx, +, dy, *, dy, ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean2D, >]
[;, }, public, double, dotProduct, (, final, Vector, <, Euclidean2D, >, v, ), {, final, Vector2D, v2, =, (, Vector2D]
[+, dy, *, dy, ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean2D, >, v, ), {, final, Vector2D]
[*, dx, +, dy, *, dy, ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean2D, >, v, ), {]
[+, dy, *, dy, ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean2D, >, v, ), {, final, Vector2D]
[;, }, public, double, dotProduct, (, final, Vector, <, Euclidean2D, >, v, ), {, final, Vector2D, v2, =, (, Vector2D]
[*, dy, ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean2D, >, v, ), {, final, Vector2D, v2, =]
[;, }, public, double, dotProduct, (, final, Vector, <, Euclidean2D, >, v, ), {, final, Vector2D, v2, =, (, Vector2D]
[;, return, x, *, v2, ., x, +, y, *, v2, ., y, ;, }, public, static, double, distance, (]
[;, return, x, *, v2, ., x, +, y, *, v2, ., y, ;, }, public, static, double, distance, (]
[;, }, public, static, double, distance, (, Vector2D, p1, ,, Vector2D, p2, ), {, return, p1, ., distance, (, p2]
[+, y, *, v2, ., y, ;, }, public, static, double, distance, (, Vector2D, p1, ,, Vector2D, p2, ), {]
[*, v2, ., x, +, y, *, v2, ., y, ;, }, public, static, double, distance, (, Vector2D, p1, ,]
[+, y, *, v2, ., y, ;, }, public, static, double, distance, (, Vector2D, p1, ,, Vector2D, p2, ), {]
[., x, +, y, *, v2, ., y, ;, }, public, static, double, distance, (, Vector2D, p1, ,, Vector2D, p2]
[;, }, public, static, double, distance, (, Vector2D, p1, ,, Vector2D, p2, ), {, return, p1, ., distance, (, p2]
[*, v2, ., y, ;, }, public, static, double, distance, (, Vector2D, p1, ,, Vector2D, p2, ), {, return, p1]
[;, }, public, static, double, distance, (, Vector2D, p1, ,, Vector2D, p2, ), {, return, p1, ., distance, (, p2]
[., y, ;, }, public, static, double, distance, (, Vector2D, p1, ,, Vector2D, p2, ), {, return, p1, ., distance]
[;, }, public, static, double, distanceInf, (, Vector2D, p1, ,, Vector2D, p2, ), {, return, p1, ., distanceInf, (, p2]
[., distance, (, p2, ), ;, }, public, static, double, distanceInf, (, Vector2D, p1, ,, Vector2D, p2, ), {, return]
[), ;, }, public, static, double, distanceInf, (, Vector2D, p1, ,, Vector2D, p2, ), {, return, p1, ., distanceInf, (]
[;, }, public, static, double, distanceSq, (, Vector2D, p1, ,, Vector2D, p2, ), {, return, p1, ., distanceSq, (, p2]
[., distanceInf, (, p2, ), ;, }, public, static, double, distanceSq, (, Vector2D, p1, ,, Vector2D, p2, ), {, return]
[), ;, }, public, static, double, distanceSq, (, Vector2D, p1, ,, Vector2D, p2, ), {, return, p1, ., distanceSq, (]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return]
[., distanceSq, (, p2, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this]
[), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {]
[), {, return, true, ;, }, if, (, other, instanceof, Vector2D, ), {, final, Vector2D, rhs, =, (, Vector2D, )]
[==, other, ), {, return, true, ;, }, if, (, other, instanceof, Vector2D, ), {, final, Vector2D, rhs, =, (]
[), {, return, true, ;, }, if, (, other, instanceof, Vector2D, ), {, final, Vector2D, rhs, =, (, Vector2D, )]
[;, }, if, (, other, instanceof, Vector2D, ), {, final, Vector2D, rhs, =, (, Vector2D, ), other, ;, if, (]
[), {, final, Vector2D, rhs, =, (, Vector2D, ), other, ;, if, (, rhs, ., isNaN, (, ), ), {]
[instanceof, Vector2D, ), {, final, Vector2D, rhs, =, (, Vector2D, ), other, ;, if, (, rhs, ., isNaN, (, )]
[;, if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return, (]
[;, if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return, (]
[), {, return, this, ., isNaN, (, ), ;, }, return, (, x, ==, rhs, ., x, ), &&, (]
[., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return, (, x, ==, rhs, .]
[;, }, return, (, x, ==, rhs, ., x, ), &&, (, y, ==, rhs, ., y, ), ;, }]
[., isNaN, (, ), ;, }, return, (, x, ==, rhs, ., x, ), &&, (, y, ==, rhs, .]
[;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), )]
[&&, (, y, ==, rhs, ., y, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (]
[), &&, (, y, ==, rhs, ., y, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode]
[==, rhs, ., x, ), &&, (, y, ==, rhs, ., y, ), ;, }, return, false, ;, }, @]
[), &&, (, y, ==, rhs, ., y, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode]
[., x, ), &&, (, y, ==, rhs, ., y, ), ;, }, return, false, ;, }, @, Override, public]
[;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), )]
[), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, )]
[==, rhs, ., y, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if]
[), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, )]
[., y, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN]
[;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 542, ;]
[), {, return, 542, ;, }, return, 122, *, (, 76, *, MathUtils, ., hash, (, x, ), +, MathUtils]
[;, }, return, 122, *, (, 76, *, MathUtils, ., hash, (, x, ), +, MathUtils, ., hash, (, y]
[;, }, @, Override, public, String, toString, (, ), {, return, Vector2DFormat, ., getInstance, (, ), ., format, (, this]
[*, (, 76, *, MathUtils, ., hash, (, x, ), +, MathUtils, ., hash, (, y, ), ), ;, }]
[;, }, @, Override, public, String, toString, (, ), {, return, Vector2DFormat, ., getInstance, (, ), ., format, (, this]
[), ;, }, @, Override, public, String, toString, (, ), {, return, Vector2DFormat, ., getInstance, (, ), ., format, (]
[+, MathUtils, ., hash, (, y, ), ), ;, }, @, Override, public, String, toString, (, ), {, return, Vector2DFormat]
[*, MathUtils, ., hash, (, x, ), +, MathUtils, ., hash, (, y, ), ), ;, }, @, Override, public]
[+, MathUtils, ., hash, (, y, ), ), ;, }, @, Override, public, String, toString, (, ), {, return, Vector2DFormat]
[., hash, (, x, ), +, MathUtils, ., hash, (, y, ), ), ;, }, @, Override, public, String, toString]
[), +, MathUtils, ., hash, (, y, ), ), ;, }, @, Override, public, String, toString, (, ), {, return]
[), ;, }, @, Override, public, String, toString, (, ), {, return, Vector2DFormat, ., getInstance, (, ), ., format, (]
[., hash, (, y, ), ), ;, }, @, Override, public, String, toString, (, ), {, return, Vector2DFormat, ., getInstance]
[), ), ;, }, @, Override, public, String, toString, (, ), {, return, Vector2DFormat, ., getInstance, (, ), ., format]
[;, }, public, String, toString, (, final, NumberFormat, format, ), {, return, new, Vector2DFormat, (, format, ), ., format, (]
[., format, (, this, ), ;, }, public, String, toString, (, final, NumberFormat, format, ), {, return, new, Vector2DFormat, (]
[., getInstance, (, ), ., format, (, this, ), ;, }, public, String, toString, (, final, NumberFormat, format, ), {]
[), ;, }, public, String, toString, (, final, NumberFormat, format, ), {, return, new, Vector2DFormat, (, format, ), ., format]
[;, }, }]
[., format, (, this, ), ;, }, }]
[), ., format, (, this, ), ;, }, }]
[), ;, }, }]
