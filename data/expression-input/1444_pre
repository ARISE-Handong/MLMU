[;, class, IgnoreCajaProperties, implements, CompilerPass, {, final, AbstractCompiler, compiler, ;, int, counter, ;, public, IgnoreCajaProperties, (, AbstractCompiler, compiler, ), {]
[;, class, IgnoreCajaProperties, implements, CompilerPass, {, final, AbstractCompiler, compiler, ;, int, counter, ;, public, IgnoreCajaProperties, (, AbstractCompiler, compiler, ), {]
[CompilerPass, {, final, AbstractCompiler, compiler, ;, int, counter, ;, public, IgnoreCajaProperties, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[final, AbstractCompiler, compiler, ;, int, counter, ;, public, IgnoreCajaProperties, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[final, AbstractCompiler, compiler, ;, int, counter, ;, public, IgnoreCajaProperties, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[int, counter, ;, public, IgnoreCajaProperties, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., counter, =]
[this, ., counter, =, 0, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., counter, =, 0, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[0, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isFor, (, ), &&]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isFor, (, ), &&]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isFor, (, ), &&]
[n, ,, Node, parent, ), {, if, (, n, ., isFor, (, ), &&, n, ., getChildCount, (, ), ==]
[if, (, n, ., isFor, (, ), &&, n, ., getChildCount, (, ), ==, 3, ), {, Node, body, =]
[if, (, n, ., isFor, (, ), &&, n, ., getChildCount, (, ), ==, 3, ), {, Node, body, =]
[), &&, n, ., getChildCount, (, ), ==, 3, ), {, Node, body, =, n, ., getLastChild, (, ), ;]
[), &&, n, ., getChildCount, (, ), ==, 3, ), {, Node, body, =, n, ., getLastChild, (, ), ;]
[getChildCount, (, ), ==, 3, ), {, Node, body, =, n, ., getLastChild, (, ), ;, n, ., removeChild, (]
[{, Node, body, =, n, ., getLastChild, (, ), ;, n, ., removeChild, (, body, ), ;, Node, key, =]
[{, Node, body, =, n, ., getLastChild, (, ), ;, n, ., removeChild, (, body, ), ;, Node, key, =]
[getLastChild, (, ), ;, n, ., removeChild, (, body, ), ;, Node, key, =, n, ., getFirstChild, (, ), ;]
[getLastChild, (, ), ;, n, ., removeChild, (, body, ), ;, Node, key, =, n, ., getFirstChild, (, ), ;]
[n, ., removeChild, (, body, ), ;, Node, key, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (]
[;, Node, key, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, key, ), ;, Node, tmp, =]
[;, Node, key, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, key, ), ;, Node, tmp, =]
[n, ., getFirstChild, (, ), ;, n, ., removeChild, (, key, ), ;, Node, tmp, =, IR, ., name, (]
[n, ., getFirstChild, (, ), ;, n, ., removeChild, (, key, ), ;, Node, tmp, =, IR, ., name, (]
[getFirstChild, (, ), ;, n, ., removeChild, (, key, ), ;, Node, tmp, =, IR, ., name, (, "JSCompiler_IgnoreCajaProperties_", +]
[getFirstChild, (, ), ;, n, ., removeChild, (, key, ), ;, Node, tmp, =, IR, ., name, (, "JSCompiler_IgnoreCajaProperties_", +]
[n, ., removeChild, (, key, ), ;, Node, tmp, =, IR, ., name, (, "JSCompiler_IgnoreCajaProperties_", +, counter, ++, ), ;]
[n, ., removeChild, (, key, ), ;, Node, tmp, =, IR, ., name, (, "JSCompiler_IgnoreCajaProperties_", +, counter, ++, ), ;]
[key, ), ;, Node, tmp, =, IR, ., name, (, "JSCompiler_IgnoreCajaProperties_", +, counter, ++, ), ;, n, ., addChildToFront, (]
[key, ), ;, Node, tmp, =, IR, ., name, (, "JSCompiler_IgnoreCajaProperties_", +, counter, ++, ), ;, n, ., addChildToFront, (]
[tmp, =, IR, ., name, (, "JSCompiler_IgnoreCajaProperties_", +, counter, ++, ), ;, n, ., addChildToFront, (, IR, ., var, (]
[n, ., addChildToFront, (, IR, ., var, (, tmp, ), ), ;, Node, assignment, ;, Node, ifBody, ;, if, (]
[n, ., addChildToFront, (, IR, ., var, (, tmp, ), ), ;, Node, assignment, ;, Node, ifBody, ;, if, (]
[(, tmp, ), ), ;, Node, assignment, ;, Node, ifBody, ;, if, (, key, ., isVar, (, ), ), {]
[), ), ;, Node, assignment, ;, Node, ifBody, ;, if, (, key, ., isVar, (, ), ), {, ifBody, =]
[), ), ;, Node, assignment, ;, Node, ifBody, ;, if, (, key, ., isVar, (, ), ), {, ifBody, =]
[assignment, ;, Node, ifBody, ;, if, (, key, ., isVar, (, ), ), {, ifBody, =, IR, ., block, (]
[Node, ifBody, ;, if, (, key, ., isVar, (, ), ), {, ifBody, =, IR, ., block, (, key, ,]
[Node, ifBody, ;, if, (, key, ., isVar, (, ), ), {, ifBody, =, IR, ., block, (, key, ,]
[(, key, ., isVar, (, ), ), {, ifBody, =, IR, ., block, (, key, ,, IR, ., exprResult, (]
[(, key, ., isVar, (, ), ), {, ifBody, =, IR, ., block, (, key, ,, IR, ., exprResult, (]
[(, ), ), {, ifBody, =, IR, ., block, (, key, ,, IR, ., exprResult, (, IR, ., assign, (]
[(, ), ), {, ifBody, =, IR, ., block, (, key, ,, IR, ., exprResult, (, IR, ., assign, (]
[(, ), ), {, ifBody, =, IR, ., block, (, key, ,, IR, ., exprResult, (, IR, ., assign, (]
[key, ,, IR, ., exprResult, (, IR, ., assign, (, key, ., getFirstChild, (, ), ., cloneNode, (, ), ,]
[key, ,, IR, ., exprResult, (, IR, ., assign, (, key, ., getFirstChild, (, ), ., cloneNode, (, ), ,]
[assign, (, key, ., getFirstChild, (, ), ., cloneNode, (, ), ,, tmp, ., cloneTree, (, ), ), ), ,]
[), ., cloneNode, (, ), ,, tmp, ., cloneTree, (, ), ), ), ,, body, ), ;, }, else, {]
[cloneNode, (, ), ,, tmp, ., cloneTree, (, ), ), ), ,, body, ), ;, }, else, {, ifBody, =]
[cloneNode, (, ), ,, tmp, ., cloneTree, (, ), ), ), ,, body, ), ;, }, else, {, ifBody, =]
[tmp, ., cloneTree, (, ), ), ), ,, body, ), ;, }, else, {, ifBody, =, IR, ., block, (]
[tmp, ., cloneTree, (, ), ), ), ,, body, ), ;, }, else, {, ifBody, =, IR, ., block, (]
[), ), ), ,, body, ), ;, }, else, {, ifBody, =, IR, ., block, (, IR, ., exprResult, (]
[), ), ), ,, body, ), ;, }, else, {, ifBody, =, IR, ., block, (, IR, ., exprResult, (]
[body, ), ;, }, else, {, ifBody, =, IR, ., block, (, IR, ., exprResult, (, IR, ., assign, (]
[;, }, else, {, ifBody, =, IR, ., block, (, IR, ., exprResult, (, IR, ., assign, (, key, ,]
[;, }, else, {, ifBody, =, IR, ., block, (, IR, ., exprResult, (, IR, ., assign, (, key, ,]
[block, (, IR, ., exprResult, (, IR, ., assign, (, key, ,, tmp, ., cloneTree, (, ), ), ), ,]
[., assign, (, key, ,, tmp, ., cloneTree, (, ), ), ), ,, body, ), ;, }, Node, newBody, =]
[., assign, (, key, ,, tmp, ., cloneTree, (, ), ), ), ,, body, ), ;, }, Node, newBody, =]
[,, tmp, ., cloneTree, (, ), ), ), ,, body, ), ;, }, Node, newBody, =, IR, ., block, (]
[,, tmp, ., cloneTree, (, ), ), ), ,, body, ), ;, }, Node, newBody, =, IR, ., block, (]
[(, ), ), ), ,, body, ), ;, }, Node, newBody, =, IR, ., block, (, IR, ., ifNode, (]
[(, ), ), ), ,, body, ), ;, }, Node, newBody, =, IR, ., block, (, IR, ., ifNode, (]
[,, body, ), ;, }, Node, newBody, =, IR, ., block, (, IR, ., ifNode, (, IR, ., not, (]
[,, body, ), ;, }, Node, newBody, =, IR, ., block, (, IR, ., ifNode, (, IR, ., not, (]
[}, Node, newBody, =, IR, ., block, (, IR, ., ifNode, (, IR, ., not, (, IR, ., call, (]
[}, Node, newBody, =, IR, ., block, (, IR, ., ifNode, (, IR, ., not, (, IR, ., call, (]
[IR, ., block, (, IR, ., ifNode, (, IR, ., not, (, IR, ., call, (, IR, ., getprop, (]
[IR, ., block, (, IR, ., ifNode, (, IR, ., not, (, IR, ., call, (, IR, ., getprop, (]
[ifNode, (, IR, ., not, (, IR, ., call, (, IR, ., getprop, (, tmp, ., cloneTree, (, ), ,]
[ifNode, (, IR, ., not, (, IR, ., call, (, IR, ., getprop, (, tmp, ., cloneTree, (, ), ,]
[not, (, IR, ., call, (, IR, ., getprop, (, tmp, ., cloneTree, (, ), ,, IR, ., string, (]
[call, (, IR, ., getprop, (, tmp, ., cloneTree, (, ), ,, IR, ., string, (, "match", ), ), ,]
[call, (, IR, ., getprop, (, tmp, ., cloneTree, (, ), ,, IR, ., string, (, "match", ), ), ,]
[getprop, (, tmp, ., cloneTree, (, ), ,, IR, ., string, (, "match", ), ), ,, IR, ., regexp, (]
[getprop, (, tmp, ., cloneTree, (, ), ,, IR, ., string, (, "match", ), ), ,, IR, ., regexp, (]
[cloneTree, (, ), ,, IR, ., string, (, "match", ), ), ,, IR, ., regexp, (, IR, ., string, (]
[string, (, "match", ), ), ,, IR, ., regexp, (, IR, ., string, (, "___$", ), ), ), ), ,]
[), ,, IR, ., regexp, (, IR, ., string, (, "___$", ), ), ), ), ,, ifBody, ), ), ;]
[), ,, IR, ., regexp, (, IR, ., string, (, "___$", ), ), ), ), ,, ifBody, ), ), ;]
[regexp, (, IR, ., string, (, "___$", ), ), ), ), ,, ifBody, ), ), ;, n, ., addChildToBack, (]
[., string, (, "___$", ), ), ), ), ,, ifBody, ), ), ;, n, ., addChildToBack, (, newBody, ), ;]
[., string, (, "___$", ), ), ), ), ,, ifBody, ), ), ;, n, ., addChildToBack, (, newBody, ), ;]
