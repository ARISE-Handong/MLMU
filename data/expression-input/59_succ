[;, private, static, final, long, SGN_MASK, =, 0x8000000000000000L, ;, private, static, final, int, SGN_MASK_FLOAT, =, 0x80000000, ;, static, {, EPSILON]
[;, private, static, final, int, SGN_MASK_FLOAT, =, 0x80000000, ;, static, {, EPSILON, =, Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -]
[;, static, {, EPSILON, =, Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 53l, ), <<, 52, ), ;, SAFE_MIN, =]
[=, Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 53l, ), <<, 52, ), ;, SAFE_MIN, =, Double, ., longBitsToDouble, (]
[;, SAFE_MIN, =, Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 1022l, ), <<, 52, ), ;, }, private, Precision, (]
[., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 53l, ), <<, 52, ), ;, SAFE_MIN, =, Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET]
[), ;, SAFE_MIN, =, Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 1022l, ), <<, 52, ), ;, }, private, Precision]
[<<, 52, ), ;, SAFE_MIN, =, Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 1022l, ), <<, 52, ), ;, }]
[), <<, 52, ), ;, SAFE_MIN, =, Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 1022l, ), <<, 52, ), ;]
[-, 53l, ), <<, 52, ), ;, SAFE_MIN, =, Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 1022l, ), <<, 52]
[), <<, 52, ), ;, SAFE_MIN, =, Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 1022l, ), <<, 52, ), ;]
[), ;, SAFE_MIN, =, Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 1022l, ), <<, 52, ), ;, }, private, Precision]
[=, Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 1022l, ), <<, 52, ), ;, }, private, Precision, (, ), {]
[;, }, private, Precision, (, ), {, }, public, static, int, compareTo, (, double, x, ,, double, y, ,, double]
[., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 1022l, ), <<, 52, ), ;, }, private, Precision, (, ), {, }, public]
[), ;, }, private, Precision, (, ), {, }, public, static, int, compareTo, (, double, x, ,, double, y, ,]
[<<, 52, ), ;, }, private, Precision, (, ), {, }, public, static, int, compareTo, (, double, x, ,, double]
[), <<, 52, ), ;, }, private, Precision, (, ), {, }, public, static, int, compareTo, (, double, x, ,]
[-, 1022l, ), <<, 52, ), ;, }, private, Precision, (, ), {, }, public, static, int, compareTo, (, double]
[), <<, 52, ), ;, }, private, Precision, (, ), {, }, public, static, int, compareTo, (, double, x, ,]
[), ;, }, private, Precision, (, ), {, }, public, static, int, compareTo, (, double, x, ,, double, y, ,]
[), {, return, 0, ;, }, else, if, (, x, <, y, ), {, return, -, 1, ;, }, return]
[,, y, ,, eps, ), ), {, return, 0, ;, }, else, if, (, x, <, y, ), {, return]
[,, eps, ), ), {, return, 0, ;, }, else, if, (, x, <, y, ), {, return, -, 1]
[), ), {, return, 0, ;, }, else, if, (, x, <, y, ), {, return, -, 1, ;, }]
[;, }, else, if, (, x, <, y, ), {, return, -, 1, ;, }, return, 1, ;, }, public]
[), {, return, -, 1, ;, }, return, 1, ;, }, public, static, int, compareTo, (, final, double, x, ,]
[<, y, ), {, return, -, 1, ;, }, return, 1, ;, }, public, static, int, compareTo, (, final, double]
[), {, return, -, 1, ;, }, return, 1, ;, }, public, static, int, compareTo, (, final, double, x, ,]
[;, }, return, 1, ;, }, public, static, int, compareTo, (, final, double, x, ,, final, double, y, ,, final]
[;, }, return, 1, ;, }, public, static, int, compareTo, (, final, double, x, ,, final, double, y, ,, final]
[;, }, public, static, int, compareTo, (, final, double, x, ,, final, double, y, ,, final, int, maxUlps, ), {]
[), {, return, 0, ;, }, else, if, (, x, <, y, ), {, return, -, 1, ;, }, return]
[,, y, ,, maxUlps, ), ), {, return, 0, ;, }, else, if, (, x, <, y, ), {, return]
[,, maxUlps, ), ), {, return, 0, ;, }, else, if, (, x, <, y, ), {, return, -, 1]
[), ), {, return, 0, ;, }, else, if, (, x, <, y, ), {, return, -, 1, ;, }]
[;, }, else, if, (, x, <, y, ), {, return, -, 1, ;, }, return, 1, ;, }, public]
[), {, return, -, 1, ;, }, return, 1, ;, }, public, static, boolean, equals, (, float, x, ,, float]
[<, y, ), {, return, -, 1, ;, }, return, 1, ;, }, public, static, boolean, equals, (, float, x]
[), {, return, -, 1, ;, }, return, 1, ;, }, public, static, boolean, equals, (, float, x, ,, float]
[;, }, return, 1, ;, }, public, static, boolean, equals, (, float, x, ,, float, y, ), {, return, equals]
[;, }, return, 1, ;, }, public, static, boolean, equals, (, float, x, ,, float, y, ), {, return, equals]
[;, }, public, static, boolean, equals, (, float, x, ,, float, y, ), {, return, equals, (, x, ,, y]
[;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ), {, return, (, Float, ., isNaN, (]
[,, y, ,, 1, ), ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ), {, return]
[,, 1, ), ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ), {, return, (, Float]
[), ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ), {, return, (, Float, ., isNaN]
[;, }, public, static, boolean, equals, (, float, x, ,, float, y, ,, float, eps, ), {, return, equals, (]
[||, equals, (, x, ,, y, ,, 1, ), ;, }, public, static, boolean, equals, (, float, x, ,, float]
[), ||, equals, (, x, ,, y, ,, 1, ), ;, }, public, static, boolean, equals, (, float, x, ,]
[&&, Float, ., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,, 1, ), ;, }, public]
[., isNaN, (, x, ), &&, Float, ., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,]
[), &&, Float, ., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,, 1, ), ;, }]
[), ||, equals, (, x, ,, y, ,, 1, ), ;, }, public, static, boolean, equals, (, float, x, ,]
[., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,, 1, ), ;, }, public, static, boolean]
[), ), ||, equals, (, x, ,, y, ,, 1, ), ;, }, public, static, boolean, equals, (, float, x]
[;, }, public, static, boolean, equals, (, float, x, ,, float, y, ,, float, eps, ), {, return, equals, (]
[,, y, ,, 1, ), ;, }, public, static, boolean, equals, (, float, x, ,, float, y, ,, float, eps]
[,, 1, ), ;, }, public, static, boolean, equals, (, float, x, ,, float, y, ,, float, eps, ), {]
[), ;, }, public, static, boolean, equals, (, float, x, ,, float, y, ,, float, eps, ), {, return, equals]
[;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, float, eps, ), {, return, equalsIncludingNaN, (]
[||, FastMath, ., abs, (, y, -, x, ), <=, eps, ;, }, public, static, boolean, equalsIncludingNaN, (, float, x]
[,, y, ,, 1, ), ||, FastMath, ., abs, (, y, -, x, ), <=, eps, ;, }, public, static]
[,, 1, ), ||, FastMath, ., abs, (, y, -, x, ), <=, eps, ;, }, public, static, boolean, equalsIncludingNaN]
[), ||, FastMath, ., abs, (, y, -, x, ), <=, eps, ;, }, public, static, boolean, equalsIncludingNaN, (, float]
[;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, float, eps, ), {, return, equalsIncludingNaN, (]
[<=, eps, ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, float, eps, ), {, return]
[., abs, (, y, -, x, ), <=, eps, ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float]
[), <=, eps, ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, float, eps, ), {]
[-, x, ), <=, eps, ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, float, eps]
[), <=, eps, ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, float, eps, ), {]
[;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, float, eps, ), {, return, equalsIncludingNaN, (]
[;, }, public, static, boolean, equals, (, float, x, ,, float, y, ,, int, maxUlps, ), {, int, xInt, =]
[||, (, FastMath, ., abs, (, y, -, x, ), <=, eps, ), ;, }, public, static, boolean, equals, (]
[,, y, ), ||, (, FastMath, ., abs, (, y, -, x, ), <=, eps, ), ;, }, public, static]
[), ||, (, FastMath, ., abs, (, y, -, x, ), <=, eps, ), ;, }, public, static, boolean, equals]
[;, }, public, static, boolean, equals, (, float, x, ,, float, y, ,, int, maxUlps, ), {, int, xInt, =]
[), ;, }, public, static, boolean, equals, (, float, x, ,, float, y, ,, int, maxUlps, ), {, int, xInt]
[<=, eps, ), ;, }, public, static, boolean, equals, (, float, x, ,, float, y, ,, int, maxUlps, ), {]
[., abs, (, y, -, x, ), <=, eps, ), ;, }, public, static, boolean, equals, (, float, x, ,]
[), <=, eps, ), ;, }, public, static, boolean, equals, (, float, x, ,, float, y, ,, int, maxUlps, )]
[-, x, ), <=, eps, ), ;, }, public, static, boolean, equals, (, float, x, ,, float, y, ,, int]
[), <=, eps, ), ;, }, public, static, boolean, equals, (, float, x, ,, float, y, ,, int, maxUlps, )]
[), ;, }, public, static, boolean, equals, (, float, x, ,, float, y, ,, int, maxUlps, ), {, int, xInt]
[;, int, yInt, =, Float, ., floatToIntBits, (, y, ), ;, if, (, xInt, <, 0, ), {, xInt, =]
[., floatToIntBits, (, x, ), ;, int, yInt, =, Float, ., floatToIntBits, (, y, ), ;, if, (, xInt, <]
[), ;, int, yInt, =, Float, ., floatToIntBits, (, y, ), ;, if, (, xInt, <, 0, ), {, xInt]
[;, if, (, xInt, <, 0, ), {, xInt, =, SGN_MASK_FLOAT, -, xInt, ;, }, if, (, yInt, <, 0]
[., floatToIntBits, (, y, ), ;, if, (, xInt, <, 0, ), {, xInt, =, SGN_MASK_FLOAT, -, xInt, ;, }]
[), ;, if, (, xInt, <, 0, ), {, xInt, =, SGN_MASK_FLOAT, -, xInt, ;, }, if, (, yInt, <]
[), {, xInt, =, SGN_MASK_FLOAT, -, xInt, ;, }, if, (, yInt, <, 0, ), {, yInt, =, SGN_MASK_FLOAT, -]
[<, 0, ), {, xInt, =, SGN_MASK_FLOAT, -, xInt, ;, }, if, (, yInt, <, 0, ), {, yInt, =]
[), {, xInt, =, SGN_MASK_FLOAT, -, xInt, ;, }, if, (, yInt, <, 0, ), {, yInt, =, SGN_MASK_FLOAT, -]
[=, SGN_MASK_FLOAT, -, xInt, ;, }, if, (, yInt, <, 0, ), {, yInt, =, SGN_MASK_FLOAT, -, yInt, ;, }]
[;, }, if, (, yInt, <, 0, ), {, yInt, =, SGN_MASK_FLOAT, -, yInt, ;, }, final, boolean, isEqual, =]
[-, xInt, ;, }, if, (, yInt, <, 0, ), {, yInt, =, SGN_MASK_FLOAT, -, yInt, ;, }, final, boolean]
[;, }, if, (, yInt, <, 0, ), {, yInt, =, SGN_MASK_FLOAT, -, yInt, ;, }, final, boolean, isEqual, =]
[), {, yInt, =, SGN_MASK_FLOAT, -, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt]
[<, 0, ), {, yInt, =, SGN_MASK_FLOAT, -, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt]
[), {, yInt, =, SGN_MASK_FLOAT, -, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt]
[=, SGN_MASK_FLOAT, -, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps]
[;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return, isEqual, &&]
[-, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return]
[;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return, isEqual, &&]
[;, return, isEqual, &&, !, Float, ., isNaN, (, x, ), &&, !, Float, ., isNaN, (, y, ), ;]
[<=, maxUlps, ;, return, isEqual, &&, !, Float, ., isNaN, (, x, ), &&, !, Float, ., isNaN, (, y]
[., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return, isEqual, &&, !, Float, ., isNaN, (, x, )]
[), <=, maxUlps, ;, return, isEqual, &&, !, Float, ., isNaN, (, x, ), &&, !, Float, ., isNaN, (]
[-, yInt, ), <=, maxUlps, ;, return, isEqual, &&, !, Float, ., isNaN, (, x, ), &&, !, Float, .]
[), <=, maxUlps, ;, return, isEqual, &&, !, Float, ., isNaN, (, x, ), &&, !, Float, ., isNaN, (]
[;, return, isEqual, &&, !, Float, ., isNaN, (, x, ), &&, !, Float, ., isNaN, (, y, ), ;]
[;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, int, maxUlps, ), {, return, (, Float]
[&&, !, Float, ., isNaN, (, y, ), ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y]
[&&, !, Float, ., isNaN, (, x, ), &&, !, Float, ., isNaN, (, y, ), ;, }, public, static]
[&&, !, Float, ., isNaN, (, y, ), ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y]
[&&, !, Float, ., isNaN, (, y, ), ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y]
[., isNaN, (, x, ), &&, !, Float, ., isNaN, (, y, ), ;, }, public, static, boolean, equalsIncludingNaN, (]
[), &&, !, Float, ., isNaN, (, y, ), ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float]
[;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, int, maxUlps, ), {, return, (, Float]
[;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, int, maxUlps, ), {, return, (, Float]
[., isNaN, (, y, ), ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, int, maxUlps]
[), ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, int, maxUlps, ), {, return, (]
[;, }, public, static, boolean, equals, (, double, x, ,, double, y, ), {, return, equals, (, x, ,, y]
[||, equals, (, x, ,, y, ,, maxUlps, ), ;, }, public, static, boolean, equals, (, double, x, ,, double]
[), ||, equals, (, x, ,, y, ,, maxUlps, ), ;, }, public, static, boolean, equals, (, double, x, ,]
[&&, Float, ., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,, maxUlps, ), ;, }, public]
[., isNaN, (, x, ), &&, Float, ., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,]
[), &&, Float, ., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,, maxUlps, ), ;, }]
[), ||, equals, (, x, ,, y, ,, maxUlps, ), ;, }, public, static, boolean, equals, (, double, x, ,]
[., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,, maxUlps, ), ;, }, public, static, boolean]
[), ), ||, equals, (, x, ,, y, ,, maxUlps, ), ;, }, public, static, boolean, equals, (, double, x]
[;, }, public, static, boolean, equals, (, double, x, ,, double, y, ), {, return, equals, (, x, ,, y]
[,, y, ,, maxUlps, ), ;, }, public, static, boolean, equals, (, double, x, ,, double, y, ), {, return]
[,, maxUlps, ), ;, }, public, static, boolean, equals, (, double, x, ,, double, y, ), {, return, equals, (]
[), ;, }, public, static, boolean, equals, (, double, x, ,, double, y, ), {, return, equals, (, x, ,]
[;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ), {, return, (, Double, ., isNaN, (]
[,, y, ,, 1, ), ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ), {, return]
[,, 1, ), ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ), {, return, (, Double]
[), ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ), {, return, (, Double, ., isNaN]
[;, }, public, static, boolean, equals, (, double, x, ,, double, y, ,, double, eps, ), {, return, equals, (]
[||, equals, (, x, ,, y, ,, 1, ), ;, }, public, static, boolean, equals, (, double, x, ,, double]
[), ||, equals, (, x, ,, y, ,, 1, ), ;, }, public, static, boolean, equals, (, double, x, ,]
[&&, Double, ., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,, 1, ), ;, }, public]
[., isNaN, (, x, ), &&, Double, ., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,]
[), &&, Double, ., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,, 1, ), ;, }]
[), ||, equals, (, x, ,, y, ,, 1, ), ;, }, public, static, boolean, equals, (, double, x, ,]
[., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,, 1, ), ;, }, public, static, boolean]
[), ), ||, equals, (, x, ,, y, ,, 1, ), ;, }, public, static, boolean, equals, (, double, x]
[;, }, public, static, boolean, equals, (, double, x, ,, double, y, ,, double, eps, ), {, return, equals, (]
[,, y, ,, 1, ), ;, }, public, static, boolean, equals, (, double, x, ,, double, y, ,, double, eps]
[,, 1, ), ;, }, public, static, boolean, equals, (, double, x, ,, double, y, ,, double, eps, ), {]
[), ;, }, public, static, boolean, equals, (, double, x, ,, double, y, ,, double, eps, ), {, return, equals]
[;, }, public, static, boolean, equalsWithRelativeTolerance, (, double, x, ,, double, y, ,, double, eps, ), {, if, (, equals]
[||, FastMath, ., abs, (, y, -, x, ), <=, eps, ;, }, public, static, boolean, equalsWithRelativeTolerance, (, double, x]
[,, y, ,, 1, ), ||, FastMath, ., abs, (, y, -, x, ), <=, eps, ;, }, public, static]
[,, 1, ), ||, FastMath, ., abs, (, y, -, x, ), <=, eps, ;, }, public, static, boolean, equalsWithRelativeTolerance]
[), ||, FastMath, ., abs, (, y, -, x, ), <=, eps, ;, }, public, static, boolean, equalsWithRelativeTolerance, (, double]
[;, }, public, static, boolean, equalsWithRelativeTolerance, (, double, x, ,, double, y, ,, double, eps, ), {, if, (, equals]
[<=, eps, ;, }, public, static, boolean, equalsWithRelativeTolerance, (, double, x, ,, double, y, ,, double, eps, ), {, if]
[., abs, (, y, -, x, ), <=, eps, ;, }, public, static, boolean, equalsWithRelativeTolerance, (, double, x, ,, double]
[), <=, eps, ;, }, public, static, boolean, equalsWithRelativeTolerance, (, double, x, ,, double, y, ,, double, eps, ), {]
[-, x, ), <=, eps, ;, }, public, static, boolean, equalsWithRelativeTolerance, (, double, x, ,, double, y, ,, double, eps]
[), <=, eps, ;, }, public, static, boolean, equalsWithRelativeTolerance, (, double, x, ,, double, y, ,, double, eps, ), {]
[;, }, public, static, boolean, equalsWithRelativeTolerance, (, double, x, ,, double, y, ,, double, eps, ), {, if, (, equals]
[), {, return, true, ;, }, final, double, absoluteMax, =, FastMath, ., max, (, FastMath, ., abs, (, x, )]
[,, y, ,, 1, ), ), {, return, true, ;, }, final, double, absoluteMax, =, FastMath, ., max, (, FastMath]
[,, 1, ), ), {, return, true, ;, }, final, double, absoluteMax, =, FastMath, ., max, (, FastMath, ., abs]
[), ), {, return, true, ;, }, final, double, absoluteMax, =, FastMath, ., max, (, FastMath, ., abs, (, x]
[;, }, final, double, absoluteMax, =, FastMath, ., max, (, FastMath, ., abs, (, x, ), ,, FastMath, ., abs]
[;, final, double, relativeDifference, =, FastMath, ., abs, (, (, x, -, y, ), /, absoluteMax, ), ;, return, relativeDifference]
[., max, (, FastMath, ., abs, (, x, ), ,, FastMath, ., abs, (, y, ), ), ;, final, double]
[,, FastMath, ., abs, (, y, ), ), ;, final, double, relativeDifference, =, FastMath, ., abs, (, (, x, -]
[., abs, (, x, ), ,, FastMath, ., abs, (, y, ), ), ;, final, double, relativeDifference, =, FastMath, .]
[), ,, FastMath, ., abs, (, y, ), ), ;, final, double, relativeDifference, =, FastMath, ., abs, (, (, x]
[), ;, final, double, relativeDifference, =, FastMath, ., abs, (, (, x, -, y, ), /, absoluteMax, ), ;, return]
[., abs, (, y, ), ), ;, final, double, relativeDifference, =, FastMath, ., abs, (, (, x, -, y, )]
[), ), ;, final, double, relativeDifference, =, FastMath, ., abs, (, (, x, -, y, ), /, absoluteMax, ), ;]
[;, return, relativeDifference, <=, eps, ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ,, double, eps]
[., abs, (, (, x, -, y, ), /, absoluteMax, ), ;, return, relativeDifference, <=, eps, ;, }, public, static]
[), ;, return, relativeDifference, <=, eps, ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ,, double]
[/, absoluteMax, ), ;, return, relativeDifference, <=, eps, ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y]
[), /, absoluteMax, ), ;, return, relativeDifference, <=, eps, ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double]
[-, y, ), /, absoluteMax, ), ;, return, relativeDifference, <=, eps, ;, }, public, static, boolean, equalsIncludingNaN, (, double, x]
[), /, absoluteMax, ), ;, return, relativeDifference, <=, eps, ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double]
[), ;, return, relativeDifference, <=, eps, ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ,, double]
[;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ,, double, eps, ), {, return, equalsIncludingNaN, (]
[<=, eps, ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ,, double, eps, ), {, return]
[;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ,, double, eps, ), {, return, equalsIncludingNaN, (]
[;, }, public, static, boolean, equals, (, double, x, ,, double, y, ,, int, maxUlps, ), {, long, xInt, =]
[||, (, FastMath, ., abs, (, y, -, x, ), <=, eps, ), ;, }, public, static, boolean, equals, (]
[,, y, ), ||, (, FastMath, ., abs, (, y, -, x, ), <=, eps, ), ;, }, public, static]
[), ||, (, FastMath, ., abs, (, y, -, x, ), <=, eps, ), ;, }, public, static, boolean, equals]
[;, }, public, static, boolean, equals, (, double, x, ,, double, y, ,, int, maxUlps, ), {, long, xInt, =]
[), ;, }, public, static, boolean, equals, (, double, x, ,, double, y, ,, int, maxUlps, ), {, long, xInt]
[<=, eps, ), ;, }, public, static, boolean, equals, (, double, x, ,, double, y, ,, int, maxUlps, ), {]
[., abs, (, y, -, x, ), <=, eps, ), ;, }, public, static, boolean, equals, (, double, x, ,]
[), <=, eps, ), ;, }, public, static, boolean, equals, (, double, x, ,, double, y, ,, int, maxUlps, )]
[-, x, ), <=, eps, ), ;, }, public, static, boolean, equals, (, double, x, ,, double, y, ,, int]
[), <=, eps, ), ;, }, public, static, boolean, equals, (, double, x, ,, double, y, ,, int, maxUlps, )]
[), ;, }, public, static, boolean, equals, (, double, x, ,, double, y, ,, int, maxUlps, ), {, long, xInt]
[;, long, yInt, =, Double, ., doubleToLongBits, (, y, ), ;, if, (, xInt, <, 0, ), {, xInt, =]
[., doubleToLongBits, (, x, ), ;, long, yInt, =, Double, ., doubleToLongBits, (, y, ), ;, if, (, xInt, <]
[), ;, long, yInt, =, Double, ., doubleToLongBits, (, y, ), ;, if, (, xInt, <, 0, ), {, xInt]
[;, if, (, xInt, <, 0, ), {, xInt, =, SGN_MASK, -, xInt, ;, }, if, (, yInt, <, 0]
[., doubleToLongBits, (, y, ), ;, if, (, xInt, <, 0, ), {, xInt, =, SGN_MASK, -, xInt, ;, }]
[), ;, if, (, xInt, <, 0, ), {, xInt, =, SGN_MASK, -, xInt, ;, }, if, (, yInt, <]
[), {, xInt, =, SGN_MASK, -, xInt, ;, }, if, (, yInt, <, 0, ), {, yInt, =, SGN_MASK, -]
[<, 0, ), {, xInt, =, SGN_MASK, -, xInt, ;, }, if, (, yInt, <, 0, ), {, yInt, =]
[), {, xInt, =, SGN_MASK, -, xInt, ;, }, if, (, yInt, <, 0, ), {, yInt, =, SGN_MASK, -]
[=, SGN_MASK, -, xInt, ;, }, if, (, yInt, <, 0, ), {, yInt, =, SGN_MASK, -, yInt, ;, }]
[;, }, if, (, yInt, <, 0, ), {, yInt, =, SGN_MASK, -, yInt, ;, }, final, boolean, isEqual, =]
[-, xInt, ;, }, if, (, yInt, <, 0, ), {, yInt, =, SGN_MASK, -, yInt, ;, }, final, boolean]
[;, }, if, (, yInt, <, 0, ), {, yInt, =, SGN_MASK, -, yInt, ;, }, final, boolean, isEqual, =]
[), {, yInt, =, SGN_MASK, -, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt]
[<, 0, ), {, yInt, =, SGN_MASK, -, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt]
[), {, yInt, =, SGN_MASK, -, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt]
[=, SGN_MASK, -, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps]
[;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return, isEqual, &&]
[-, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return]
[;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return, isEqual, &&]
[;, return, isEqual, &&, !, Double, ., isNaN, (, x, ), &&, !, Double, ., isNaN, (, y, ), ;]
[<=, maxUlps, ;, return, isEqual, &&, !, Double, ., isNaN, (, x, ), &&, !, Double, ., isNaN, (, y]
[., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return, isEqual, &&, !, Double, ., isNaN, (, x, )]
[), <=, maxUlps, ;, return, isEqual, &&, !, Double, ., isNaN, (, x, ), &&, !, Double, ., isNaN, (]
[-, yInt, ), <=, maxUlps, ;, return, isEqual, &&, !, Double, ., isNaN, (, x, ), &&, !, Double, .]
[), <=, maxUlps, ;, return, isEqual, &&, !, Double, ., isNaN, (, x, ), &&, !, Double, ., isNaN, (]
[;, return, isEqual, &&, !, Double, ., isNaN, (, x, ), &&, !, Double, ., isNaN, (, y, ), ;]
[;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ,, int, maxUlps, ), {, return, (, Double]
[&&, !, Double, ., isNaN, (, y, ), ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y]
[&&, !, Double, ., isNaN, (, x, ), &&, !, Double, ., isNaN, (, y, ), ;, }, public, static]
[&&, !, Double, ., isNaN, (, y, ), ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y]
[&&, !, Double, ., isNaN, (, y, ), ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y]
[., isNaN, (, x, ), &&, !, Double, ., isNaN, (, y, ), ;, }, public, static, boolean, equalsIncludingNaN, (]
[), &&, !, Double, ., isNaN, (, y, ), ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double]
[;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ,, int, maxUlps, ), {, return, (, Double]
[;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ,, int, maxUlps, ), {, return, (, Double]
[., isNaN, (, y, ), ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ,, int, maxUlps]
[), ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ,, int, maxUlps, ), {, return, (]
[;, }, public, static, double, round, (, double, x, ,, int, scale, ), {, return, round, (, x, ,, scale]
[||, equals, (, x, ,, y, ,, maxUlps, ), ;, }, public, static, double, round, (, double, x, ,, int]
[), ||, equals, (, x, ,, y, ,, maxUlps, ), ;, }, public, static, double, round, (, double, x, ,]
[&&, Double, ., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,, maxUlps, ), ;, }, public]
[., isNaN, (, x, ), &&, Double, ., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,]
[), &&, Double, ., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,, maxUlps, ), ;, }]
[), ||, equals, (, x, ,, y, ,, maxUlps, ), ;, }, public, static, double, round, (, double, x, ,]
[., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,, maxUlps, ), ;, }, public, static, double]
[), ), ||, equals, (, x, ,, y, ,, maxUlps, ), ;, }, public, static, double, round, (, double, x]
[;, }, public, static, double, round, (, double, x, ,, int, scale, ), {, return, round, (, x, ,, scale]
[,, y, ,, maxUlps, ), ;, }, public, static, double, round, (, double, x, ,, int, scale, ), {, return]
[,, maxUlps, ), ;, }, public, static, double, round, (, double, x, ,, int, scale, ), {, return, round, (]
[), ;, }, public, static, double, round, (, double, x, ,, int, scale, ), {, return, round, (, x, ,]
[;, }, public, static, double, round, (, double, x, ,, int, scale, ,, int, roundingMethod, ), {, try, {, return]
[,, scale, ,, BigDecimal, ., ROUND_HALF_UP, ), ;, }, public, static, double, round, (, double, x, ,, int, scale, ,]
[,, BigDecimal, ., ROUND_HALF_UP, ), ;, }, public, static, double, round, (, double, x, ,, int, scale, ,, int, roundingMethod]
[), ;, }, public, static, double, round, (, double, x, ,, int, scale, ,, int, roundingMethod, ), {, try, {]
[., ROUND_HALF_UP, ), ;, }, public, static, double, round, (, double, x, ,, int, scale, ,, int, roundingMethod, ), {]
[;, }, catch, (, NumberFormatException, ex, ), {, if, (, Double, ., isInfinite, (, x, ), ), {, return, x]
[., doubleValue, (, ), ;, }, catch, (, NumberFormatException, ex, ), {, if, (, Double, ., isInfinite, (, x, )]
[), ., doubleValue, (, ), ;, }, catch, (, NumberFormatException, ex, ), {, if, (, Double, ., isInfinite, (, x]
[., setScale, (, scale, ,, roundingMethod, ), ), ., doubleValue, (, ), ;, }, catch, (, NumberFormatException, ex, ), {]
[), ., setScale, (, scale, ,, roundingMethod, ), ), ., doubleValue, (, ), ;, }, catch, (, NumberFormatException, ex, )]
[., toString, (, x, ), ), ., setScale, (, scale, ,, roundingMethod, ), ), ., doubleValue, (, ), ;, }]
[), ), ., setScale, (, scale, ,, roundingMethod, ), ), ., doubleValue, (, ), ;, }, catch, (, NumberFormatException, ex]
[,, roundingMethod, ), ), ., doubleValue, (, ), ;, }, catch, (, NumberFormatException, ex, ), {, if, (, Double, .]
[), ), ., doubleValue, (, ), ;, }, catch, (, NumberFormatException, ex, ), {, if, (, Double, ., isInfinite, (]
[), {, return, x, ;, }, else, {, return, Double, ., NaN, ;, }, }, }, public, static, float, round]
[., isInfinite, (, x, ), ), {, return, x, ;, }, else, {, return, Double, ., NaN, ;, }, }]
[), ), {, return, x, ;, }, else, {, return, Double, ., NaN, ;, }, }, }, public, static, float]
[;, }, else, {, return, Double, ., NaN, ;, }, }, }, public, static, float, round, (, float, x, ,]
[;, }, }, }, public, static, float, round, (, float, x, ,, int, scale, ), {, return, round, (, x]
[., NaN, ;, }, }, }, public, static, float, round, (, float, x, ,, int, scale, ), {, return, round]
[;, }, public, static, float, round, (, float, x, ,, int, scale, ,, int, roundingMethod, ), throws, MathArithmeticException, ,, MathIllegalArgumentException]
[,, scale, ,, BigDecimal, ., ROUND_HALF_UP, ), ;, }, public, static, float, round, (, float, x, ,, int, scale, ,]
[,, BigDecimal, ., ROUND_HALF_UP, ), ;, }, public, static, float, round, (, float, x, ,, int, scale, ,, int, roundingMethod]
[), ;, }, public, static, float, round, (, float, x, ,, int, scale, ,, int, roundingMethod, ), throws, MathArithmeticException, ,]
[., ROUND_HALF_UP, ), ;, }, public, static, float, round, (, float, x, ,, int, scale, ,, int, roundingMethod, ), throws]
[;, final, float, factor, =, (, float, ), FastMath, ., pow, (, 10.0f, ,, scale, ), *, sign, ;, return]
[., copySign, (, 1f, ,, x, ), ;, final, float, factor, =, (, float, ), FastMath, ., pow, (, 10.0f]
[,, x, ), ;, final, float, factor, =, (, float, ), FastMath, ., pow, (, 10.0f, ,, scale, ), *]
[), ;, final, float, factor, =, (, float, ), FastMath, ., pow, (, 10.0f, ,, scale, ), *, sign, ;]
[;, return, (, float, ), roundUnscaled, (, x, *, factor, ,, sign, ,, roundingMethod, ), /, factor, ;, }, private]
[*, sign, ;, return, (, float, ), roundUnscaled, (, x, *, factor, ,, sign, ,, roundingMethod, ), /, factor, ;]
[*, sign, ;, return, (, float, ), roundUnscaled, (, x, *, factor, ,, sign, ,, roundingMethod, ), /, factor, ;]
[., pow, (, 10.0f, ,, scale, ), *, sign, ;, return, (, float, ), roundUnscaled, (, x, *, factor, ,]
[,, scale, ), *, sign, ;, return, (, float, ), roundUnscaled, (, x, *, factor, ,, sign, ,, roundingMethod, )]
[), *, sign, ;, return, (, float, ), roundUnscaled, (, x, *, factor, ,, sign, ,, roundingMethod, ), /, factor]
[;, return, (, float, ), roundUnscaled, (, x, *, factor, ,, sign, ,, roundingMethod, ), /, factor, ;, }, private]
[;, }, private, static, double, roundUnscaled, (, double, unscaled, ,, double, sign, ,, int, roundingMethod, ), throws, MathArithmeticException, ,, MathIllegalArgumentException]
[/, factor, ;, }, private, static, double, roundUnscaled, (, double, unscaled, ,, double, sign, ,, int, roundingMethod, ), throws, MathArithmeticException]
[/, factor, ;, }, private, static, double, roundUnscaled, (, double, unscaled, ,, double, sign, ,, int, roundingMethod, ), throws, MathArithmeticException]
[,, sign, ,, roundingMethod, ), /, factor, ;, }, private, static, double, roundUnscaled, (, double, unscaled, ,, double, sign, ,]
[*, factor, ,, sign, ,, roundingMethod, ), /, factor, ;, }, private, static, double, roundUnscaled, (, double, unscaled, ,, double]
[,, sign, ,, roundingMethod, ), /, factor, ;, }, private, static, double, roundUnscaled, (, double, unscaled, ,, double, sign, ,]
[,, roundingMethod, ), /, factor, ;, }, private, static, double, roundUnscaled, (, double, unscaled, ,, double, sign, ,, int, roundingMethod]
[), /, factor, ;, }, private, static, double, roundUnscaled, (, double, unscaled, ,, double, sign, ,, int, roundingMethod, ), throws]
[;, }, private, static, double, roundUnscaled, (, double, unscaled, ,, double, sign, ,, int, roundingMethod, ), throws, MathArithmeticException, ,, MathIllegalArgumentException]
[), {, case, BigDecimal, ., ROUND_CEILING, :, if, (, sign, ==, -, 1, ), {, unscaled, =, FastMath, ., floor]
[:, if, (, sign, ==, -, 1, ), {, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled]
[., ROUND_CEILING, :, if, (, sign, ==, -, 1, ), {, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter]
[), {, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;]
[==, -, 1, ), {, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY]
[), {, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;]
[), {, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;]
[=, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, }, else, {]
[;, }, else, {, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, )]
[., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, }, else, {, unscaled, =]
[), ;, }, else, {, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY]
[., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, }, else, {, unscaled, =, FastMath, ., ceil, (]
[,, Double, ., NEGATIVE_INFINITY, ), ), ;, }, else, {, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (]
[), ), ;, }, else, {, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, .]
[., NEGATIVE_INFINITY, ), ), ;, }, else, {, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,]
[=, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, }, break, ;]
[;, }, break, ;, case, BigDecimal, ., ROUND_DOWN, :, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled]
[., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, }, break, ;, case, BigDecimal]
[), ;, }, break, ;, case, BigDecimal, ., ROUND_DOWN, :, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (]
[., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, }, break, ;, case, BigDecimal, ., ROUND_DOWN, :, unscaled]
[,, Double, ., POSITIVE_INFINITY, ), ), ;, }, break, ;, case, BigDecimal, ., ROUND_DOWN, :, unscaled, =, FastMath, ., floor]
[), ), ;, }, break, ;, case, BigDecimal, ., ROUND_DOWN, :, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter]
[., POSITIVE_INFINITY, ), ), ;, }, break, ;, case, BigDecimal, ., ROUND_DOWN, :, unscaled, =, FastMath, ., floor, (, FastMath]
[:, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, break]
[., ROUND_DOWN, :, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), )]
[=, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, break, ;, case]
[;, break, ;, case, BigDecimal, ., ROUND_FLOOR, :, if, (, sign, ==, -, 1, ), {, unscaled, =, FastMath, .]
[., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, break, ;, case, BigDecimal, .]
[), ;, break, ;, case, BigDecimal, ., ROUND_FLOOR, :, if, (, sign, ==, -, 1, ), {, unscaled, =, FastMath]
[., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, break, ;, case, BigDecimal, ., ROUND_FLOOR, :, if, (]
[,, Double, ., NEGATIVE_INFINITY, ), ), ;, break, ;, case, BigDecimal, ., ROUND_FLOOR, :, if, (, sign, ==, -, 1]
[), ), ;, break, ;, case, BigDecimal, ., ROUND_FLOOR, :, if, (, sign, ==, -, 1, ), {, unscaled, =]
[., NEGATIVE_INFINITY, ), ), ;, break, ;, case, BigDecimal, ., ROUND_FLOOR, :, if, (, sign, ==, -, 1, ), {]
[:, if, (, sign, ==, -, 1, ), {, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled]
[., ROUND_FLOOR, :, if, (, sign, ==, -, 1, ), {, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter]
[), {, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;]
[==, -, 1, ), {, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY]
[), {, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;]
[), {, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;]
[=, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, }, else, {]
[;, }, else, {, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, )]
[., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, }, else, {, unscaled, =]
[), ;, }, else, {, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY]
[., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, }, else, {, unscaled, =, FastMath, ., floor, (]
[,, Double, ., POSITIVE_INFINITY, ), ), ;, }, else, {, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (]
[), ), ;, }, else, {, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, .]
[., POSITIVE_INFINITY, ), ), ;, }, else, {, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,]
[=, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, }, break, ;]
[;, }, break, ;, case, BigDecimal, ., ROUND_HALF_DOWN, :, {, unscaled, =, FastMath, ., nextAfter, (, unscaled, ,, Double, .]
[., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, }, break, ;, case, BigDecimal]
[), ;, }, break, ;, case, BigDecimal, ., ROUND_HALF_DOWN, :, {, unscaled, =, FastMath, ., nextAfter, (, unscaled, ,, Double]
[., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, }, break, ;, case, BigDecimal, ., ROUND_HALF_DOWN, :, {]
[,, Double, ., NEGATIVE_INFINITY, ), ), ;, }, break, ;, case, BigDecimal, ., ROUND_HALF_DOWN, :, {, unscaled, =, FastMath, .]
[), ), ;, }, break, ;, case, BigDecimal, ., ROUND_HALF_DOWN, :, {, unscaled, =, FastMath, ., nextAfter, (, unscaled, ,]
[., NEGATIVE_INFINITY, ), ), ;, }, break, ;, case, BigDecimal, ., ROUND_HALF_DOWN, :, {, unscaled, =, FastMath, ., nextAfter, (]
[:, {, unscaled, =, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ;, double, fraction, =, unscaled, -]
[., ROUND_HALF_DOWN, :, {, unscaled, =, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ;, double, fraction, =]
[=, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ;, double, fraction, =, unscaled, -, FastMath, ., floor]
[;, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >, 0.5, ), {]
[., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ;, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled]
[,, Double, ., NEGATIVE_INFINITY, ), ;, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (]
[), ;, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >, 0.5, )]
[., NEGATIVE_INFINITY, ), ;, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >]
[;, if, (, fraction, >, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, {]
[-, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >, 0.5, ), {, unscaled, =, FastMath, ., ceil]
[;, if, (, fraction, >, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, {]
[., floor, (, unscaled, ), ;, if, (, fraction, >, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled]
[), ;, if, (, fraction, >, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else]
[), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, {, unscaled, =, FastMath, ., floor, (]
[>, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, {, unscaled, =, FastMath, .]
[), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, {, unscaled, =, FastMath, ., floor, (]
[=, FastMath, ., ceil, (, unscaled, ), ;, }, else, {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;]
[;, }, else, {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, break, ;, }, case, BigDecimal, .]
[., ceil, (, unscaled, ), ;, }, else, {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, break]
[), ;, }, else, {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, break, ;, }, case, BigDecimal]
[=, FastMath, ., floor, (, unscaled, ), ;, }, break, ;, }, case, BigDecimal, ., ROUND_HALF_EVEN, :, {, double, fraction]
[;, }, break, ;, }, case, BigDecimal, ., ROUND_HALF_EVEN, :, {, double, fraction, =, unscaled, -, FastMath, ., floor, (]
[., floor, (, unscaled, ), ;, }, break, ;, }, case, BigDecimal, ., ROUND_HALF_EVEN, :, {, double, fraction, =, unscaled]
[), ;, }, break, ;, }, case, BigDecimal, ., ROUND_HALF_EVEN, :, {, double, fraction, =, unscaled, -, FastMath, ., floor]
[:, {, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >, 0.5, )]
[., ROUND_HALF_EVEN, :, {, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >]
[;, if, (, fraction, >, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, if]
[-, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >, 0.5, ), {, unscaled, =, FastMath, ., ceil]
[;, if, (, fraction, >, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, if]
[., floor, (, unscaled, ), ;, if, (, fraction, >, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled]
[), ;, if, (, fraction, >, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else]
[), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, if, (, fraction, <, 0.5, ), {]
[>, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, if, (, fraction, <, 0.5]
[), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, if, (, fraction, <, 0.5, ), {]
[=, FastMath, ., ceil, (, unscaled, ), ;, }, else, if, (, fraction, <, 0.5, ), {, unscaled, =, FastMath]
[;, }, else, if, (, fraction, <, 0.5, ), {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }]
[., ceil, (, unscaled, ), ;, }, else, if, (, fraction, <, 0.5, ), {, unscaled, =, FastMath, ., floor]
[), ;, }, else, if, (, fraction, <, 0.5, ), {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;]
[), {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, else, {, if, (, FastMath, ., floor, (]
[<, 0.5, ), {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, else, {, if, (, FastMath, .]
[), {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, else, {, if, (, FastMath, ., floor, (]
[=, FastMath, ., floor, (, unscaled, ), ;, }, else, {, if, (, FastMath, ., floor, (, unscaled, ), /]
[;, }, else, {, if, (, FastMath, ., floor, (, unscaled, ), /, 2.0, ==, FastMath, ., floor, (, Math]
[., floor, (, unscaled, ), ;, }, else, {, if, (, FastMath, ., floor, (, unscaled, ), /, 2.0, ==]
[), ;, }, else, {, if, (, FastMath, ., floor, (, unscaled, ), /, 2.0, ==, FastMath, ., floor, (]
[), {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, else, {, unscaled, =, FastMath, ., ceil, (]
[==, FastMath, ., floor, (, Math, ., floor, (, unscaled, ), /, 2.0, ), ), {, unscaled, =, FastMath, .]
[/, 2.0, ==, FastMath, ., floor, (, Math, ., floor, (, unscaled, ), /, 2.0, ), ), {, unscaled, =]
[., floor, (, unscaled, ), /, 2.0, ==, FastMath, ., floor, (, Math, ., floor, (, unscaled, ), /, 2.0]
[), /, 2.0, ==, FastMath, ., floor, (, Math, ., floor, (, unscaled, ), /, 2.0, ), ), {, unscaled]
[==, FastMath, ., floor, (, Math, ., floor, (, unscaled, ), /, 2.0, ), ), {, unscaled, =, FastMath, .]
[), {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, else, {, unscaled, =, FastMath, ., ceil, (]
[., floor, (, Math, ., floor, (, unscaled, ), /, 2.0, ), ), {, unscaled, =, FastMath, ., floor, (]
[), ), {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, else, {, unscaled, =, FastMath, ., ceil]
[/, 2.0, ), ), {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, else, {, unscaled, =, FastMath]
[., floor, (, unscaled, ), /, 2.0, ), ), {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }]
[), /, 2.0, ), ), {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, else, {, unscaled, =]
[), ), {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, else, {, unscaled, =, FastMath, ., ceil]
[=, FastMath, ., floor, (, unscaled, ), ;, }, else, {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;]
[;, }, else, {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, }, break, ;, }, case, BigDecimal]
[., floor, (, unscaled, ), ;, }, else, {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, }]
[), ;, }, else, {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, }, break, ;, }, case]
[=, FastMath, ., ceil, (, unscaled, ), ;, }, }, break, ;, }, case, BigDecimal, ., ROUND_HALF_UP, :, {, unscaled]
[;, }, }, break, ;, }, case, BigDecimal, ., ROUND_HALF_UP, :, {, unscaled, =, FastMath, ., nextAfter, (, unscaled, ,]
[., ceil, (, unscaled, ), ;, }, }, break, ;, }, case, BigDecimal, ., ROUND_HALF_UP, :, {, unscaled, =, FastMath]
[), ;, }, }, break, ;, }, case, BigDecimal, ., ROUND_HALF_UP, :, {, unscaled, =, FastMath, ., nextAfter, (, unscaled]
[:, {, unscaled, =, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ;, double, fraction, =, unscaled, -]
[., ROUND_HALF_UP, :, {, unscaled, =, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ;, double, fraction, =]
[=, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ;, double, fraction, =, unscaled, -, FastMath, ., floor]
[;, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >=, 0.5, ), {]
[., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ;, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled]
[,, Double, ., POSITIVE_INFINITY, ), ;, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (]
[), ;, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >=, 0.5, )]
[., POSITIVE_INFINITY, ), ;, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >=]
[;, if, (, fraction, >=, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, {]
[-, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >=, 0.5, ), {, unscaled, =, FastMath, ., ceil]
[;, if, (, fraction, >=, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, {]
[., floor, (, unscaled, ), ;, if, (, fraction, >=, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled]
[), ;, if, (, fraction, >=, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else]
[), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, {, unscaled, =, FastMath, ., floor, (]
[>=, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, {, unscaled, =, FastMath, .]
[), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, {, unscaled, =, FastMath, ., floor, (]
[=, FastMath, ., ceil, (, unscaled, ), ;, }, else, {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;]
[;, }, else, {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, break, ;, }, case, BigDecimal, .]
[., ceil, (, unscaled, ), ;, }, else, {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, break]
[), ;, }, else, {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, break, ;, }, case, BigDecimal]
[=, FastMath, ., floor, (, unscaled, ), ;, }, break, ;, }, case, BigDecimal, ., ROUND_UNNECESSARY, :, if, (, unscaled]
[;, }, break, ;, }, case, BigDecimal, ., ROUND_UNNECESSARY, :, if, (, unscaled, !=, FastMath, ., floor, (, unscaled, )]
[., floor, (, unscaled, ), ;, }, break, ;, }, case, BigDecimal, ., ROUND_UNNECESSARY, :, if, (, unscaled, !=, FastMath]
[), ;, }, break, ;, }, case, BigDecimal, ., ROUND_UNNECESSARY, :, if, (, unscaled, !=, FastMath, ., floor, (, unscaled]
[:, if, (, unscaled, !=, FastMath, ., floor, (, unscaled, ), ), {, throw, new, MathArithmeticException, (, ), ;, }]
[., ROUND_UNNECESSARY, :, if, (, unscaled, !=, FastMath, ., floor, (, unscaled, ), ), {, throw, new, MathArithmeticException, (, )]
[), {, throw, new, MathArithmeticException, (, ), ;, }, break, ;, case, BigDecimal, ., ROUND_UP, :, unscaled, =, FastMath, .]
[!=, FastMath, ., floor, (, unscaled, ), ), {, throw, new, MathArithmeticException, (, ), ;, }, break, ;, case, BigDecimal]
[), {, throw, new, MathArithmeticException, (, ), ;, }, break, ;, case, BigDecimal, ., ROUND_UP, :, unscaled, =, FastMath, .]
[., floor, (, unscaled, ), ), {, throw, new, MathArithmeticException, (, ), ;, }, break, ;, case, BigDecimal, ., ROUND_UP]
[), ), {, throw, new, MathArithmeticException, (, ), ;, }, break, ;, case, BigDecimal, ., ROUND_UP, :, unscaled, =, FastMath]
[;, }, break, ;, case, BigDecimal, ., ROUND_UP, :, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled]
[:, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, break]
[., ROUND_UP, :, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), )]
[=, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, break, ;, default]
[;, break, ;, default, :, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INVALID_ROUNDING_METHOD, ,, roundingMethod, ,, "ROUND_CEILING", ,, BigDecimal, ., ROUND_CEILING]
[., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, break, ;, default, :, throw]
[), ;, break, ;, default, :, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INVALID_ROUNDING_METHOD, ,, roundingMethod, ,, "ROUND_CEILING", ,, BigDecimal, .]
[., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, break, ;, default, :, throw, new, MathIllegalArgumentException, (, LocalizedFormats]
[,, Double, ., POSITIVE_INFINITY, ), ), ;, break, ;, default, :, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INVALID_ROUNDING_METHOD, ,, roundingMethod]
[), ), ;, break, ;, default, :, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INVALID_ROUNDING_METHOD, ,, roundingMethod, ,, "ROUND_CEILING", ,, BigDecimal]
[., POSITIVE_INFINITY, ), ), ;, break, ;, default, :, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INVALID_ROUNDING_METHOD, ,, roundingMethod, ,, "ROUND_CEILING"]
[;, }, return, unscaled, ;, }, public, static, double, representableDelta, (, double, x, ,, double, originalDelta, ), {, return, x]
[,, roundingMethod, ,, "ROUND_CEILING", ,, BigDecimal, ., ROUND_CEILING, ,, "ROUND_DOWN", ,, BigDecimal, ., ROUND_DOWN, ,, "ROUND_FLOOR", ,, BigDecimal, ., ROUND_FLOOR]
[., INVALID_ROUNDING_METHOD, ,, roundingMethod, ,, "ROUND_CEILING", ,, BigDecimal, ., ROUND_CEILING, ,, "ROUND_DOWN", ,, BigDecimal, ., ROUND_DOWN, ,, "ROUND_FLOOR", ,, BigDecimal]
[,, "ROUND_CEILING", ,, BigDecimal, ., ROUND_CEILING, ,, "ROUND_DOWN", ,, BigDecimal, ., ROUND_DOWN, ,, "ROUND_FLOOR", ,, BigDecimal, ., ROUND_FLOOR, ,, "ROUND_HALF_DOWN"]
[,, BigDecimal, ., ROUND_CEILING, ,, "ROUND_DOWN", ,, BigDecimal, ., ROUND_DOWN, ,, "ROUND_FLOOR", ,, BigDecimal, ., ROUND_FLOOR, ,, "ROUND_HALF_DOWN", ,, BigDecimal]
[,, "ROUND_DOWN", ,, BigDecimal, ., ROUND_DOWN, ,, "ROUND_FLOOR", ,, BigDecimal, ., ROUND_FLOOR, ,, "ROUND_HALF_DOWN", ,, BigDecimal, ., ROUND_HALF_DOWN, ,, "ROUND_HALF_EVEN"]
[., ROUND_CEILING, ,, "ROUND_DOWN", ,, BigDecimal, ., ROUND_DOWN, ,, "ROUND_FLOOR", ,, BigDecimal, ., ROUND_FLOOR, ,, "ROUND_HALF_DOWN", ,, BigDecimal, ., ROUND_HALF_DOWN]
[,, BigDecimal, ., ROUND_DOWN, ,, "ROUND_FLOOR", ,, BigDecimal, ., ROUND_FLOOR, ,, "ROUND_HALF_DOWN", ,, BigDecimal, ., ROUND_HALF_DOWN, ,, "ROUND_HALF_EVEN", ,, BigDecimal]
[,, "ROUND_FLOOR", ,, BigDecimal, ., ROUND_FLOOR, ,, "ROUND_HALF_DOWN", ,, BigDecimal, ., ROUND_HALF_DOWN, ,, "ROUND_HALF_EVEN", ,, BigDecimal, ., ROUND_HALF_EVEN, ,, "ROUND_HALF_UP"]
[., ROUND_DOWN, ,, "ROUND_FLOOR", ,, BigDecimal, ., ROUND_FLOOR, ,, "ROUND_HALF_DOWN", ,, BigDecimal, ., ROUND_HALF_DOWN, ,, "ROUND_HALF_EVEN", ,, BigDecimal, ., ROUND_HALF_EVEN]
[,, BigDecimal, ., ROUND_FLOOR, ,, "ROUND_HALF_DOWN", ,, BigDecimal, ., ROUND_HALF_DOWN, ,, "ROUND_HALF_EVEN", ,, BigDecimal, ., ROUND_HALF_EVEN, ,, "ROUND_HALF_UP", ,, BigDecimal]
[,, "ROUND_HALF_DOWN", ,, BigDecimal, ., ROUND_HALF_DOWN, ,, "ROUND_HALF_EVEN", ,, BigDecimal, ., ROUND_HALF_EVEN, ,, "ROUND_HALF_UP", ,, BigDecimal, ., ROUND_HALF_UP, ,, "ROUND_UNNECESSARY"]
[., ROUND_FLOOR, ,, "ROUND_HALF_DOWN", ,, BigDecimal, ., ROUND_HALF_DOWN, ,, "ROUND_HALF_EVEN", ,, BigDecimal, ., ROUND_HALF_EVEN, ,, "ROUND_HALF_UP", ,, BigDecimal, ., ROUND_HALF_UP]
[,, BigDecimal, ., ROUND_HALF_DOWN, ,, "ROUND_HALF_EVEN", ,, BigDecimal, ., ROUND_HALF_EVEN, ,, "ROUND_HALF_UP", ,, BigDecimal, ., ROUND_HALF_UP, ,, "ROUND_UNNECESSARY", ,, BigDecimal]
[,, "ROUND_HALF_EVEN", ,, BigDecimal, ., ROUND_HALF_EVEN, ,, "ROUND_HALF_UP", ,, BigDecimal, ., ROUND_HALF_UP, ,, "ROUND_UNNECESSARY", ,, BigDecimal, ., ROUND_UNNECESSARY, ,, "ROUND_UP"]
[., ROUND_HALF_DOWN, ,, "ROUND_HALF_EVEN", ,, BigDecimal, ., ROUND_HALF_EVEN, ,, "ROUND_HALF_UP", ,, BigDecimal, ., ROUND_HALF_UP, ,, "ROUND_UNNECESSARY", ,, BigDecimal, ., ROUND_UNNECESSARY]
[,, BigDecimal, ., ROUND_HALF_EVEN, ,, "ROUND_HALF_UP", ,, BigDecimal, ., ROUND_HALF_UP, ,, "ROUND_UNNECESSARY", ,, BigDecimal, ., ROUND_UNNECESSARY, ,, "ROUND_UP", ,, BigDecimal]
[,, "ROUND_HALF_UP", ,, BigDecimal, ., ROUND_HALF_UP, ,, "ROUND_UNNECESSARY", ,, BigDecimal, ., ROUND_UNNECESSARY, ,, "ROUND_UP", ,, BigDecimal, ., ROUND_UP, ), ;]
[., ROUND_HALF_EVEN, ,, "ROUND_HALF_UP", ,, BigDecimal, ., ROUND_HALF_UP, ,, "ROUND_UNNECESSARY", ,, BigDecimal, ., ROUND_UNNECESSARY, ,, "ROUND_UP", ,, BigDecimal, ., ROUND_UP]
[,, BigDecimal, ., ROUND_HALF_UP, ,, "ROUND_UNNECESSARY", ,, BigDecimal, ., ROUND_UNNECESSARY, ,, "ROUND_UP", ,, BigDecimal, ., ROUND_UP, ), ;, }, return]
[,, "ROUND_UNNECESSARY", ,, BigDecimal, ., ROUND_UNNECESSARY, ,, "ROUND_UP", ,, BigDecimal, ., ROUND_UP, ), ;, }, return, unscaled, ;, }, public]
[., ROUND_HALF_UP, ,, "ROUND_UNNECESSARY", ,, BigDecimal, ., ROUND_UNNECESSARY, ,, "ROUND_UP", ,, BigDecimal, ., ROUND_UP, ), ;, }, return, unscaled, ;]
[,, BigDecimal, ., ROUND_UNNECESSARY, ,, "ROUND_UP", ,, BigDecimal, ., ROUND_UP, ), ;, }, return, unscaled, ;, }, public, static, double]
[,, "ROUND_UP", ,, BigDecimal, ., ROUND_UP, ), ;, }, return, unscaled, ;, }, public, static, double, representableDelta, (, double, x]
[., ROUND_UNNECESSARY, ,, "ROUND_UP", ,, BigDecimal, ., ROUND_UP, ), ;, }, return, unscaled, ;, }, public, static, double, representableDelta, (]
[,, BigDecimal, ., ROUND_UP, ), ;, }, return, unscaled, ;, }, public, static, double, representableDelta, (, double, x, ,, double]
[), ;, }, return, unscaled, ;, }, public, static, double, representableDelta, (, double, x, ,, double, originalDelta, ), {, return]
[., ROUND_UP, ), ;, }, return, unscaled, ;, }, public, static, double, representableDelta, (, double, x, ,, double, originalDelta, )]
[;, }, public, static, double, representableDelta, (, double, x, ,, double, originalDelta, ), {, return, x, +, originalDelta, -, x]
[;, }, }]
[-, x, ;, }, }]
[+, originalDelta, -, x, ;, }, }]
[-, x, ;, }, }]
[;, }, }]
