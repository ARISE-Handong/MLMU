[=, namer, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., namer, =, namer, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[), {, case, Token, ., FUNCTION, :, Node, functionNameNode, =, n, ., getFirstChild, (, ), ;, String, functionName, =, functionNameNode]
[., getType, (, ), ), {, case, Token, ., FUNCTION, :, Node, functionNameNode, =, n, ., getFirstChild, (, ), ;]
[:, Node, functionNameNode, =, n, ., getFirstChild, (, ), ;, String, functionName, =, functionNameNode, ., getString, (, ), ;, if]
[., FUNCTION, :, Node, functionNameNode, =, n, ., getFirstChild, (, ), ;, String, functionName, =, functionNameNode, ., getString, (, )]
[;, String, functionName, =, functionNameNode, ., getString, (, ), ;, if, (, functionName, ., length, (, ), ==, 0, )]
[., getFirstChild, (, ), ;, String, functionName, =, functionNameNode, ., getString, (, ), ;, if, (, functionName, ., length, (]
[;, if, (, functionName, ., length, (, ), ==, 0, ), {, if, (, parent, ., isAssign, (, ), )]
[., getString, (, ), ;, if, (, functionName, ., length, (, ), ==, 0, ), {, if, (, parent, .]
[), {, if, (, parent, ., isAssign, (, ), ), {, Node, lhs, =, parent, ., getFirstChild, (, ), ;]
[==, 0, ), {, if, (, parent, ., isAssign, (, ), ), {, Node, lhs, =, parent, ., getFirstChild, (]
[., length, (, ), ==, 0, ), {, if, (, parent, ., isAssign, (, ), ), {, Node, lhs, =]
[), {, if, (, parent, ., isAssign, (, ), ), {, Node, lhs, =, parent, ., getFirstChild, (, ), ;]
[), {, Node, lhs, =, parent, ., getFirstChild, (, ), ;, String, name, =, namer, ., getName, (, lhs, )]
[., isAssign, (, ), ), {, Node, lhs, =, parent, ., getFirstChild, (, ), ;, String, name, =, namer, .]
[;, String, name, =, namer, ., getName, (, lhs, ), ;, namer, ., setFunctionName, (, name, ,, n, ), ;]
[., getFirstChild, (, ), ;, String, name, =, namer, ., getName, (, lhs, ), ;, namer, ., setFunctionName, (, name]
[;, namer, ., setFunctionName, (, name, ,, n, ), ;, }, else, if, (, parent, ., isName, (, ), )]
[., getName, (, lhs, ), ;, namer, ., setFunctionName, (, name, ,, n, ), ;, }, else, if, (, parent]
[), ;, namer, ., setFunctionName, (, name, ,, n, ), ;, }, else, if, (, parent, ., isName, (, )]
[;, }, else, if, (, parent, ., isName, (, ), ), {, String, name, =, namer, ., getName, (, parent]
[., setFunctionName, (, name, ,, n, ), ;, }, else, if, (, parent, ., isName, (, ), ), {, String]
[,, n, ), ;, }, else, if, (, parent, ., isName, (, ), ), {, String, name, =, namer, .]
[), ;, }, else, if, (, parent, ., isName, (, ), ), {, String, name, =, namer, ., getName, (]
[), {, String, name, =, namer, ., getName, (, parent, ), ;, namer, ., setFunctionName, (, name, ,, n, )]
[., isName, (, ), ), {, String, name, =, namer, ., getName, (, parent, ), ;, namer, ., setFunctionName, (]
[;, namer, ., setFunctionName, (, name, ,, n, ), ;, }, }, break, ;, case, Token, ., ASSIGN, :, Node]
[., getName, (, parent, ), ;, namer, ., setFunctionName, (, name, ,, n, ), ;, }, }, break, ;, case]
[), ;, namer, ., setFunctionName, (, name, ,, n, ), ;, }, }, break, ;, case, Token, ., ASSIGN, :]
[;, }, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node]
[., setFunctionName, (, name, ,, n, ), ;, }, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =]
[,, n, ), ;, }, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (]
[), ;, }, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;]
[:, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if]
[., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, )]
[;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, rhs, ., isObjectLit, (, ), ), {, nameObjectLiteralMethods]
[., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, rhs, ., isObjectLit, (]
[;, if, (, rhs, ., isObjectLit, (, ), ), {, nameObjectLiteralMethods, (, rhs, ,, namer, ., getName, (, lhs, )]
[., getNext, (, ), ;, if, (, rhs, ., isObjectLit, (, ), ), {, nameObjectLiteralMethods, (, rhs, ,, namer, .]
[), {, nameObjectLiteralMethods, (, rhs, ,, namer, ., getName, (, lhs, ), ), ;, }, }, }, private, void, nameObjectLiteralMethods]
[., isObjectLit, (, ), ), {, nameObjectLiteralMethods, (, rhs, ,, namer, ., getName, (, lhs, ), ), ;, }, }]
[;, }, }, }, private, void, nameObjectLiteralMethods, (, Node, objectLiteral, ,, String, context, ), {, for, (, Node, keyNode, =]
[,, namer, ., getName, (, lhs, ), ), ;, }, }, }, private, void, nameObjectLiteralMethods, (, Node, objectLiteral, ,, String]
[), ;, }, }, }, private, void, nameObjectLiteralMethods, (, Node, objectLiteral, ,, String, context, ), {, for, (, Node, keyNode]
[., getName, (, lhs, ), ), ;, }, }, }, private, void, nameObjectLiteralMethods, (, Node, objectLiteral, ,, String, context, )]
[), ), ;, }, }, }, private, void, nameObjectLiteralMethods, (, Node, objectLiteral, ,, String, context, ), {, for, (, Node]
[;, keyNode, !=, null, ;, keyNode, =, keyNode, ., getNext, (, ), ), {, Node, valueNode, =, keyNode, ., getFirstChild]
[., getFirstChild, (, ), ;, keyNode, !=, null, ;, keyNode, =, keyNode, ., getNext, (, ), ), {, Node, valueNode]
[;, keyNode, =, keyNode, ., getNext, (, ), ), {, Node, valueNode, =, keyNode, ., getFirstChild, (, ), ;, if]
[!=, null, ;, keyNode, =, keyNode, ., getNext, (, ), ), {, Node, valueNode, =, keyNode, ., getFirstChild, (, )]
[;, keyNode, =, keyNode, ., getNext, (, ), ), {, Node, valueNode, =, keyNode, ., getFirstChild, (, ), ;, if]
[=, keyNode, ., getNext, (, ), ), {, Node, valueNode, =, keyNode, ., getFirstChild, (, ), ;, if, (, keyNode]
[), {, Node, valueNode, =, keyNode, ., getFirstChild, (, ), ;, if, (, keyNode, ., isStringKey, (, ), ), {]
[., getNext, (, ), ), {, Node, valueNode, =, keyNode, ., getFirstChild, (, ), ;, if, (, keyNode, ., isStringKey]
[;, if, (, keyNode, ., isStringKey, (, ), ), {, String, name, =, namer, ., getCombinedName, (, context, ,, namer]
[., getFirstChild, (, ), ;, if, (, keyNode, ., isStringKey, (, ), ), {, String, name, =, namer, ., getCombinedName]
[), {, String, name, =, namer, ., getCombinedName, (, context, ,, namer, ., getName, (, keyNode, ), ), ;, int]
[., isStringKey, (, ), ), {, String, name, =, namer, ., getCombinedName, (, context, ,, namer, ., getName, (, keyNode]
[;, int, type, =, valueNode, ., getType, (, ), ;, if, (, type, ==, Token, ., FUNCTION, ), {, Node]
[., getCombinedName, (, context, ,, namer, ., getName, (, keyNode, ), ), ;, int, type, =, valueNode, ., getType, (]
[,, namer, ., getName, (, keyNode, ), ), ;, int, type, =, valueNode, ., getType, (, ), ;, if, (]
[), ;, int, type, =, valueNode, ., getType, (, ), ;, if, (, type, ==, Token, ., FUNCTION, ), {]
[., getName, (, keyNode, ), ), ;, int, type, =, valueNode, ., getType, (, ), ;, if, (, type, ==]
[), ), ;, int, type, =, valueNode, ., getType, (, ), ;, if, (, type, ==, Token, ., FUNCTION, )]
[;, if, (, type, ==, Token, ., FUNCTION, ), {, Node, functionNameNode, =, valueNode, ., getFirstChild, (, ), ;, String]
[., getType, (, ), ;, if, (, type, ==, Token, ., FUNCTION, ), {, Node, functionNameNode, =, valueNode, ., getFirstChild]
[), {, Node, functionNameNode, =, valueNode, ., getFirstChild, (, ), ;, String, functionName, =, functionNameNode, ., getString, (, ), ;]
[==, Token, ., FUNCTION, ), {, Node, functionNameNode, =, valueNode, ., getFirstChild, (, ), ;, String, functionName, =, functionNameNode, .]
[), {, Node, functionNameNode, =, valueNode, ., getFirstChild, (, ), ;, String, functionName, =, functionNameNode, ., getString, (, ), ;]
[., FUNCTION, ), {, Node, functionNameNode, =, valueNode, ., getFirstChild, (, ), ;, String, functionName, =, functionNameNode, ., getString, (]
[;, String, functionName, =, functionNameNode, ., getString, (, ), ;, if, (, functionName, ., isEmpty, (, ), ), {, namer]
[., getFirstChild, (, ), ;, String, functionName, =, functionNameNode, ., getString, (, ), ;, if, (, functionName, ., isEmpty, (]
[;, if, (, functionName, ., isEmpty, (, ), ), {, namer, ., setFunctionName, (, name, ,, valueNode, ), ;, }]
[., getString, (, ), ;, if, (, functionName, ., isEmpty, (, ), ), {, namer, ., setFunctionName, (, name, ,]
[), {, namer, ., setFunctionName, (, name, ,, valueNode, ), ;, }, }, else, if, (, type, ==, Token, .]
[., isEmpty, (, ), ), {, namer, ., setFunctionName, (, name, ,, valueNode, ), ;, }, }, else, if, (]
[;, }, }, else, if, (, type, ==, Token, ., OBJECTLIT, ), {, nameObjectLiteralMethods, (, valueNode, ,, name, ), ;]
[., setFunctionName, (, name, ,, valueNode, ), ;, }, }, else, if, (, type, ==, Token, ., OBJECTLIT, ), {]
[,, valueNode, ), ;, }, }, else, if, (, type, ==, Token, ., OBJECTLIT, ), {, nameObjectLiteralMethods, (, valueNode, ,]
[), ;, }, }, else, if, (, type, ==, Token, ., OBJECTLIT, ), {, nameObjectLiteralMethods, (, valueNode, ,, name, )]
[), {, nameObjectLiteralMethods, (, valueNode, ,, name, ), ;, }, }, }, }, }]
[==, Token, ., OBJECTLIT, ), {, nameObjectLiteralMethods, (, valueNode, ,, name, ), ;, }, }, }, }, }]
[), {, nameObjectLiteralMethods, (, valueNode, ,, name, ), ;, }, }, }, }, }]
[., OBJECTLIT, ), {, nameObjectLiteralMethods, (, valueNode, ,, name, ), ;, }, }, }, }, }]
[;, }, }, }, }, }]
[,, name, ), ;, }, }, }, }, }]
[), ;, }, }, }, }, }]
