[), {, if, (, NodeUtil, ., isImmutableValue, (, subtree, ., getLastChild, (, ), ), &&, !, NodeUtil, ., isImmutableValue, (]
[||, NodeUtil, ., isRelationalOperation, (, subtree, ), ), {, if, (, NodeUtil, ., isImmutableValue, (, subtree, ., getLastChild, (, )]
[., isSymmetricOperation, (, subtree, ), ||, NodeUtil, ., isRelationalOperation, (, subtree, ), ), {, if, (, NodeUtil, ., isImmutableValue, (]
[), ||, NodeUtil, ., isRelationalOperation, (, subtree, ), ), {, if, (, NodeUtil, ., isImmutableValue, (, subtree, ., getLastChild, (]
[), {, if, (, NodeUtil, ., isImmutableValue, (, subtree, ., getLastChild, (, ), ), &&, !, NodeUtil, ., isImmutableValue, (]
[., isRelationalOperation, (, subtree, ), ), {, if, (, NodeUtil, ., isImmutableValue, (, subtree, ., getLastChild, (, ), ), &&]
[), ), {, if, (, NodeUtil, ., isImmutableValue, (, subtree, ., getLastChild, (, ), ), &&, !, NodeUtil, ., isImmutableValue]
[), {, if, (, NodeUtil, ., isRelationalOperation, (, subtree, ), ), {, int, inverseOperator, =, NodeUtil, ., getInverseOperator, (, subtree]
[&&, !, NodeUtil, ., isImmutableValue, (, subtree, ., getFirstChild, (, ), ), ), {, if, (, NodeUtil, ., isRelationalOperation, (]
[., isImmutableValue, (, subtree, ., getLastChild, (, ), ), &&, !, NodeUtil, ., isImmutableValue, (, subtree, ., getFirstChild, (, )]
[), &&, !, NodeUtil, ., isImmutableValue, (, subtree, ., getFirstChild, (, ), ), ), {, if, (, NodeUtil, ., isRelationalOperation]
[., getLastChild, (, ), ), &&, !, NodeUtil, ., isImmutableValue, (, subtree, ., getFirstChild, (, ), ), ), {, if]
[), {, if, (, NodeUtil, ., isRelationalOperation, (, subtree, ), ), {, int, inverseOperator, =, NodeUtil, ., getInverseOperator, (, subtree]
[), {, if, (, NodeUtil, ., isRelationalOperation, (, subtree, ), ), {, int, inverseOperator, =, NodeUtil, ., getInverseOperator, (, subtree]
[., isImmutableValue, (, subtree, ., getFirstChild, (, ), ), ), {, if, (, NodeUtil, ., isRelationalOperation, (, subtree, ), )]
[), ), {, if, (, NodeUtil, ., isRelationalOperation, (, subtree, ), ), {, int, inverseOperator, =, NodeUtil, ., getInverseOperator, (]
[., getFirstChild, (, ), ), ), {, if, (, NodeUtil, ., isRelationalOperation, (, subtree, ), ), {, int, inverseOperator, =]
[), {, int, inverseOperator, =, NodeUtil, ., getInverseOperator, (, subtree, ., getType, (, ), ), ;, subtree, ., setType, (]
[., isRelationalOperation, (, subtree, ), ), {, int, inverseOperator, =, NodeUtil, ., getInverseOperator, (, subtree, ., getType, (, ), )]
[), ), {, int, inverseOperator, =, NodeUtil, ., getInverseOperator, (, subtree, ., getType, (, ), ), ;, subtree, ., setType]
[;, subtree, ., setType, (, inverseOperator, ), ;, }, Node, firstNode, =, subtree, ., getFirstChild, (, ), ., detachFromParent, (]
[., getInverseOperator, (, subtree, ., getType, (, ), ), ;, subtree, ., setType, (, inverseOperator, ), ;, }, Node, firstNode]
[), ;, subtree, ., setType, (, inverseOperator, ), ;, }, Node, firstNode, =, subtree, ., getFirstChild, (, ), ., detachFromParent]
[., getType, (, ), ), ;, subtree, ., setType, (, inverseOperator, ), ;, }, Node, firstNode, =, subtree, ., getFirstChild]
[;, }, Node, firstNode, =, subtree, ., getFirstChild, (, ), ., detachFromParent, (, ), ;, Node, lastNode, =, subtree, .]
[., setType, (, inverseOperator, ), ;, }, Node, firstNode, =, subtree, ., getFirstChild, (, ), ., detachFromParent, (, ), ;]
[), ;, }, Node, firstNode, =, subtree, ., getFirstChild, (, ), ., detachFromParent, (, ), ;, Node, lastNode, =, subtree]
[;, Node, lastNode, =, subtree, ., getLastChild, (, ), ., detachFromParent, (, ), ;, subtree, ., addChildrenToFront, (, lastNode, )]
[., detachFromParent, (, ), ;, Node, lastNode, =, subtree, ., getLastChild, (, ), ., detachFromParent, (, ), ;, subtree, .]
[., getFirstChild, (, ), ., detachFromParent, (, ), ;, Node, lastNode, =, subtree, ., getLastChild, (, ), ., detachFromParent, (]
[;, subtree, ., addChildrenToFront, (, lastNode, ), ;, subtree, ., addChildrenToBack, (, firstNode, ), ;, reportCodeChange, (, ), ;, }]
[., detachFromParent, (, ), ;, subtree, ., addChildrenToFront, (, lastNode, ), ;, subtree, ., addChildrenToBack, (, firstNode, ), ;, reportCodeChange]
[., getLastChild, (, ), ., detachFromParent, (, ), ;, subtree, ., addChildrenToFront, (, lastNode, ), ;, subtree, ., addChildrenToBack, (]
[;, subtree, ., addChildrenToBack, (, firstNode, ), ;, reportCodeChange, (, ), ;, }, }, return, subtree, ;, }, }]
[., addChildrenToFront, (, lastNode, ), ;, subtree, ., addChildrenToBack, (, firstNode, ), ;, reportCodeChange, (, ), ;, }, }, return]
[), ;, subtree, ., addChildrenToBack, (, firstNode, ), ;, reportCodeChange, (, ), ;, }, }, return, subtree, ;, }, }]
[;, reportCodeChange, (, ), ;, }, }, return, subtree, ;, }, }]
[., addChildrenToBack, (, firstNode, ), ;, reportCodeChange, (, ), ;, }, }, return, subtree, ;, }, }]
[), ;, reportCodeChange, (, ), ;, }, }, return, subtree, ;, }, }]
[;, }, }, return, subtree, ;, }, }]
[;, }, }]
