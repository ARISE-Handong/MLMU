[;, private, final, Chronology, iChronology, ;, private, final, int, iSkip, ;, private, transient, int, iMinValue, ;, public, SkipUndoDateTimeField, (, Chronology]
[;, private, final, Chronology, iChronology, ;, private, final, int, iSkip, ;, private, transient, int, iMinValue, ;, public, SkipUndoDateTimeField, (, Chronology]
[,, field, ,, 0, ), ;, }, public, SkipUndoDateTimeField, (, Chronology, chronology, ,, DateTimeField, field, ,, int, skip, ), {]
[,, 0, ), ;, }, public, SkipUndoDateTimeField, (, Chronology, chronology, ,, DateTimeField, field, ,, int, skip, ), {, super, (]
[), ;, }, public, SkipUndoDateTimeField, (, Chronology, chronology, ,, DateTimeField, field, ,, int, skip, ), {, super, (, field, )]
[), ;, iChronology, =, chronology, ;, int, min, =, super, ., getMinimumValue, (, ), ;, if, (, min, <, skip]
[=, chronology, ;, int, min, =, super, ., getMinimumValue, (, ), ;, if, (, min, <, skip, ), {, iMinValue]
[;, int, min, =, super, ., getMinimumValue, (, ), ;, if, (, min, <, skip, ), {, iMinValue, =, min]
[;, if, (, min, <, skip, ), {, iMinValue, =, min, +, 1, ;, }, else, if, (, min, ==]
[., getMinimumValue, (, ), ;, if, (, min, <, skip, ), {, iMinValue, =, min, +, 1, ;, }, else]
[), {, iMinValue, =, min, +, 1, ;, }, else, if, (, min, ==, skip, +, 1, ), {, iMinValue]
[<, skip, ), {, iMinValue, =, min, +, 1, ;, }, else, if, (, min, ==, skip, +, 1, )]
[), {, iMinValue, =, min, +, 1, ;, }, else, if, (, min, ==, skip, +, 1, ), {, iMinValue]
[=, min, +, 1, ;, }, else, if, (, min, ==, skip, +, 1, ), {, iMinValue, =, skip, ;]
[;, }, else, if, (, min, ==, skip, +, 1, ), {, iMinValue, =, skip, ;, }, else, {, iMinValue]
[+, 1, ;, }, else, if, (, min, ==, skip, +, 1, ), {, iMinValue, =, skip, ;, }, else]
[;, }, else, if, (, min, ==, skip, +, 1, ), {, iMinValue, =, skip, ;, }, else, {, iMinValue]
[), {, iMinValue, =, skip, ;, }, else, {, iMinValue, =, min, ;, }, iSkip, =, skip, ;, }, public]
[==, skip, +, 1, ), {, iMinValue, =, skip, ;, }, else, {, iMinValue, =, min, ;, }, iSkip, =]
[), {, iMinValue, =, skip, ;, }, else, {, iMinValue, =, min, ;, }, iSkip, =, skip, ;, }, public]
[+, 1, ), {, iMinValue, =, skip, ;, }, else, {, iMinValue, =, min, ;, }, iSkip, =, skip, ;]
[), {, iMinValue, =, skip, ;, }, else, {, iMinValue, =, min, ;, }, iSkip, =, skip, ;, }, public]
[=, skip, ;, }, else, {, iMinValue, =, min, ;, }, iSkip, =, skip, ;, }, public, int, get, (]
[;, }, else, {, iMinValue, =, min, ;, }, iSkip, =, skip, ;, }, public, int, get, (, long, millis]
[=, min, ;, }, iSkip, =, skip, ;, }, public, int, get, (, long, millis, ), {, int, value, =]
[;, }, iSkip, =, skip, ;, }, public, int, get, (, long, millis, ), {, int, value, =, super, .]
[=, skip, ;, }, public, int, get, (, long, millis, ), {, int, value, =, super, ., get, (, millis]
[;, }, public, int, get, (, long, millis, ), {, int, value, =, super, ., get, (, millis, ), ;]
[;, if, (, value, <, iSkip, ), {, value, ++, ;, }, return, value, ;, }, public, long, set, (]
[., get, (, millis, ), ;, if, (, value, <, iSkip, ), {, value, ++, ;, }, return, value, ;]
[), ;, if, (, value, <, iSkip, ), {, value, ++, ;, }, return, value, ;, }, public, long, set]
[), {, value, ++, ;, }, return, value, ;, }, public, long, set, (, long, millis, ,, int, value, )]
[<, iSkip, ), {, value, ++, ;, }, return, value, ;, }, public, long, set, (, long, millis, ,, int]
[), {, value, ++, ;, }, return, value, ;, }, public, long, set, (, long, millis, ,, int, value, )]
[;, }, return, value, ;, }, public, long, set, (, long, millis, ,, int, value, ), {, FieldUtils, ., verifyValueBounds]
[++, ;, }, return, value, ;, }, public, long, set, (, long, millis, ,, int, value, ), {, FieldUtils, .]
[;, }, public, long, set, (, long, millis, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value]
[;, if, (, value, <=, iSkip, ), {, value, --, ;, }, return, super, ., set, (, millis, ,, value]
[., verifyValueBounds, (, this, ,, value, ,, iMinValue, ,, getMaximumValue, (, ), ), ;, if, (, value, <=, iSkip, )]
[,, value, ,, iMinValue, ,, getMaximumValue, (, ), ), ;, if, (, value, <=, iSkip, ), {, value, --, ;]
[,, iMinValue, ,, getMaximumValue, (, ), ), ;, if, (, value, <=, iSkip, ), {, value, --, ;, }, return]
[,, getMaximumValue, (, ), ), ;, if, (, value, <=, iSkip, ), {, value, --, ;, }, return, super, .]
[), ;, if, (, value, <=, iSkip, ), {, value, --, ;, }, return, super, ., set, (, millis, ,]
[), {, value, --, ;, }, return, super, ., set, (, millis, ,, value, ), ;, }, public, int, getMinimumValue]
[<=, iSkip, ), {, value, --, ;, }, return, super, ., set, (, millis, ,, value, ), ;, }, public]
[), {, value, --, ;, }, return, super, ., set, (, millis, ,, value, ), ;, }, public, int, getMinimumValue]
[;, }, return, super, ., set, (, millis, ,, value, ), ;, }, public, int, getMinimumValue, (, ), {, return]
[--, ;, }, return, super, ., set, (, millis, ,, value, ), ;, }, public, int, getMinimumValue, (, ), {]
[;, }, public, int, getMinimumValue, (, ), {, return, iMinValue, ;, }, private, Object, readResolve, (, ), {, return, getType]
[., set, (, millis, ,, value, ), ;, }, public, int, getMinimumValue, (, ), {, return, iMinValue, ;, }, private]
[,, value, ), ;, }, public, int, getMinimumValue, (, ), {, return, iMinValue, ;, }, private, Object, readResolve, (, )]
[), ;, }, public, int, getMinimumValue, (, ), {, return, iMinValue, ;, }, private, Object, readResolve, (, ), {, return]
[;, }, private, Object, readResolve, (, ), {, return, getType, (, ), ., getField, (, iChronology, ), ;, }, }]
[;, }, }]
[., getField, (, iChronology, ), ;, }, }]
[), ;, }, }]
