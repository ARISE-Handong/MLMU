[;, private, final, int, rows, ;, private, final, int, columns, ;, private, final, OpenIntToDoubleHashMap, entries, ;, public, OpenMapRealMatrix, (, int]
[;, private, final, int, rows, ;, private, final, int, columns, ;, private, final, OpenIntToDoubleHashMap, entries, ;, public, OpenMapRealMatrix, (, int]
[,, columnDimension, ), ;, long, lRow, =, rowDimension, ;, long, lCol, =, columnDimension, ;, if, (, lRow, *, lCol, >=]
[), ;, long, lRow, =, rowDimension, ;, long, lCol, =, columnDimension, ;, if, (, lRow, *, lCol, >=, Integer, .]
[;, long, lCol, =, columnDimension, ;, if, (, lRow, *, lCol, >=, Integer, ., MAX_VALUE, ), {, throw, new, NumberIsTooLargeException]
[;, if, (, lRow, *, lCol, >=, Integer, ., MAX_VALUE, ), {, throw, new, NumberIsTooLargeException, (, lRow, *, lCol, ,]
[), {, throw, new, NumberIsTooLargeException, (, lRow, *, lCol, ,, Integer, ., MAX_VALUE, ,, false, ), ;, }, this, .]
[>=, Integer, ., MAX_VALUE, ), {, throw, new, NumberIsTooLargeException, (, lRow, *, lCol, ,, Integer, ., MAX_VALUE, ,, false, )]
[*, lCol, >=, Integer, ., MAX_VALUE, ), {, throw, new, NumberIsTooLargeException, (, lRow, *, lCol, ,, Integer, ., MAX_VALUE, ,]
[>=, Integer, ., MAX_VALUE, ), {, throw, new, NumberIsTooLargeException, (, lRow, *, lCol, ,, Integer, ., MAX_VALUE, ,, false, )]
[), {, throw, new, NumberIsTooLargeException, (, lRow, *, lCol, ,, Integer, ., MAX_VALUE, ,, false, ), ;, }, this, .]
[., MAX_VALUE, ), {, throw, new, NumberIsTooLargeException, (, lRow, *, lCol, ,, Integer, ., MAX_VALUE, ,, false, ), ;, }]
[;, }, this, ., rows, =, rowDimension, ;, this, ., columns, =, columnDimension, ;, this, ., entries, =, new, OpenIntToDoubleHashMap]
[,, Integer, ., MAX_VALUE, ,, false, ), ;, }, this, ., rows, =, rowDimension, ;, this, ., columns, =, columnDimension]
[*, lCol, ,, Integer, ., MAX_VALUE, ,, false, ), ;, }, this, ., rows, =, rowDimension, ;, this, ., columns]
[,, Integer, ., MAX_VALUE, ,, false, ), ;, }, this, ., rows, =, rowDimension, ;, this, ., columns, =, columnDimension]
[,, false, ), ;, }, this, ., rows, =, rowDimension, ;, this, ., columns, =, columnDimension, ;, this, ., entries]
[., MAX_VALUE, ,, false, ), ;, }, this, ., rows, =, rowDimension, ;, this, ., columns, =, columnDimension, ;, this]
[), ;, }, this, ., rows, =, rowDimension, ;, this, ., columns, =, columnDimension, ;, this, ., entries, =, new]
[=, rowDimension, ;, this, ., columns, =, columnDimension, ;, this, ., entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, }]
[., rows, =, rowDimension, ;, this, ., columns, =, columnDimension, ;, this, ., entries, =, new, OpenIntToDoubleHashMap, (, 0.0, )]
[;, this, ., columns, =, columnDimension, ;, this, ., entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, }, public, OpenMapRealMatrix]
[=, columnDimension, ;, this, ., entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, }, public, OpenMapRealMatrix, (, OpenMapRealMatrix, matrix, )]
[., columns, =, columnDimension, ;, this, ., entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, }, public, OpenMapRealMatrix, (, OpenMapRealMatrix]
[;, this, ., entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, }, public, OpenMapRealMatrix, (, OpenMapRealMatrix, matrix, ), {, this]
[=, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, }, public, OpenMapRealMatrix, (, OpenMapRealMatrix, matrix, ), {, this, ., rows, =, matrix]
[., entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, }, public, OpenMapRealMatrix, (, OpenMapRealMatrix, matrix, ), {, this, ., rows]
[;, }, public, OpenMapRealMatrix, (, OpenMapRealMatrix, matrix, ), {, this, ., rows, =, matrix, ., rows, ;, this, ., columns]
[), ;, }, public, OpenMapRealMatrix, (, OpenMapRealMatrix, matrix, ), {, this, ., rows, =, matrix, ., rows, ;, this, .]
[=, matrix, ., rows, ;, this, ., columns, =, matrix, ., columns, ;, this, ., entries, =, new, OpenIntToDoubleHashMap, (]
[., rows, =, matrix, ., rows, ;, this, ., columns, =, matrix, ., columns, ;, this, ., entries, =, new]
[;, this, ., columns, =, matrix, ., columns, ;, this, ., entries, =, new, OpenIntToDoubleHashMap, (, matrix, ., entries, )]
[., rows, ;, this, ., columns, =, matrix, ., columns, ;, this, ., entries, =, new, OpenIntToDoubleHashMap, (, matrix, .]
[=, matrix, ., columns, ;, this, ., entries, =, new, OpenIntToDoubleHashMap, (, matrix, ., entries, ), ;, }, @, Override]
[., columns, =, matrix, ., columns, ;, this, ., entries, =, new, OpenIntToDoubleHashMap, (, matrix, ., entries, ), ;, }]
[;, this, ., entries, =, new, OpenIntToDoubleHashMap, (, matrix, ., entries, ), ;, }, @, Override, public, OpenMapRealMatrix, copy, (]
[., columns, ;, this, ., entries, =, new, OpenIntToDoubleHashMap, (, matrix, ., entries, ), ;, }, @, Override, public, OpenMapRealMatrix]
[=, new, OpenIntToDoubleHashMap, (, matrix, ., entries, ), ;, }, @, Override, public, OpenMapRealMatrix, copy, (, ), {, return, new]
[., entries, =, new, OpenIntToDoubleHashMap, (, matrix, ., entries, ), ;, }, @, Override, public, OpenMapRealMatrix, copy, (, ), {]
[;, }, @, Override, public, OpenMapRealMatrix, copy, (, ), {, return, new, OpenMapRealMatrix, (, this, ), ;, }, @, Override]
[), ;, }, @, Override, public, OpenMapRealMatrix, copy, (, ), {, return, new, OpenMapRealMatrix, (, this, ), ;, }, @]
[., entries, ), ;, }, @, Override, public, OpenMapRealMatrix, copy, (, ), {, return, new, OpenMapRealMatrix, (, this, ), ;]
[;, }, @, Override, public, OpenMapRealMatrix, createMatrix, (, int, rowDimension, ,, int, columnDimension, ), throws, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return]
[), ;, }, @, Override, public, OpenMapRealMatrix, createMatrix, (, int, rowDimension, ,, int, columnDimension, ), throws, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {]
[;, }, @, Override, public, int, getColumnDimension, (, ), {, return, columns, ;, }, public, OpenMapRealMatrix, add, (, OpenMapRealMatrix, m]
[,, columnDimension, ), ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, columns, ;, }, public, OpenMapRealMatrix, add]
[), ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, columns, ;, }, public, OpenMapRealMatrix, add, (, OpenMapRealMatrix]
[;, }, public, OpenMapRealMatrix, add, (, OpenMapRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,, m, )]
[;, final, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (, this, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, m, .]
[., checkAdditionCompatible, (, this, ,, m, ), ;, final, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (, this, ), ;, for, (]
[,, m, ), ;, final, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (, this, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator]
[), ;, final, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (, this, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, m]
[;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, m, ., entries, ., iterator, (, ), ;, iterator, ., hasNext, (]
[), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, m, ., entries, ., iterator, (, ), ;, iterator, ., hasNext]
[;, iterator, ., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final, int, row, =, iterator]
[., iterator, (, ), ;, iterator, ., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final]
[., entries, ., iterator, (, ), ;, iterator, ., hasNext, (, ), ;, ), {, iterator, ., advance, (, )]
[;, ), {, iterator, ., advance, (, ), ;, final, int, row, =, iterator, ., key, (, ), /, columns]
[., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final, int, row, =, iterator, ., key]
[;, final, int, row, =, iterator, ., key, (, ), /, columns, ;, final, int, col, =, iterator, ., key]
[., advance, (, ), ;, final, int, row, =, iterator, ., key, (, ), /, columns, ;, final, int, col]
[;, final, int, col, =, iterator, ., key, (, ), -, row, *, columns, ;, out, ., setEntry, (, row]
[/, columns, ;, final, int, col, =, iterator, ., key, (, ), -, row, *, columns, ;, out, ., setEntry]
[., key, (, ), /, columns, ;, final, int, col, =, iterator, ., key, (, ), -, row, *, columns]
[;, final, int, col, =, iterator, ., key, (, ), -, row, *, columns, ;, out, ., setEntry, (, row]
[;, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +, iterator, ., value, (]
[-, row, *, columns, ;, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +]
[., key, (, ), -, row, *, columns, ;, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row]
[;, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +, iterator, ., value, (]
[*, columns, ;, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +, iterator, .]
[;, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +, iterator, ., value, (]
[;, }, return, out, ;, }, @, Override, public, OpenMapRealMatrix, subtract, (, final, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {, try]
[., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +, iterator, ., value, (, ), )]
[,, col, ,, getEntry, (, row, ,, col, ), +, iterator, ., value, (, ), ), ;, }, return, out]
[,, getEntry, (, row, ,, col, ), +, iterator, ., value, (, ), ), ;, }, return, out, ;, }]
[), ;, }, return, out, ;, }, @, Override, public, OpenMapRealMatrix, subtract, (, final, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {]
[+, iterator, ., value, (, ), ), ;, }, return, out, ;, }, @, Override, public, OpenMapRealMatrix, subtract, (, final]
[,, col, ), +, iterator, ., value, (, ), ), ;, }, return, out, ;, }, @, Override, public, OpenMapRealMatrix]
[), +, iterator, ., value, (, ), ), ;, }, return, out, ;, }, @, Override, public, OpenMapRealMatrix, subtract, (]
[), ;, }, return, out, ;, }, @, Override, public, OpenMapRealMatrix, subtract, (, final, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {]
[., value, (, ), ), ;, }, return, out, ;, }, @, Override, public, OpenMapRealMatrix, subtract, (, final, RealMatrix, m]
[;, }, @, Override, public, OpenMapRealMatrix, subtract, (, final, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {, try, {, return, subtract, (]
[;, }, catch, (, ClassCastException, cce, ), {, return, (, OpenMapRealMatrix, ), super, ., subtract, (, m, ), ;, }]
[), ;, }, catch, (, ClassCastException, cce, ), {, return, (, OpenMapRealMatrix, ), super, ., subtract, (, m, ), ;]
[), ;, }, catch, (, ClassCastException, cce, ), {, return, (, OpenMapRealMatrix, ), super, ., subtract, (, m, ), ;]
[;, }, }, public, OpenMapRealMatrix, subtract, (, OpenMapRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,, m]
[;, }, }, public, OpenMapRealMatrix, subtract, (, OpenMapRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,, m]
[., subtract, (, m, ), ;, }, }, public, OpenMapRealMatrix, subtract, (, OpenMapRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, .]
[), ;, }, }, public, OpenMapRealMatrix, subtract, (, OpenMapRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,]
[;, final, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (, this, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, m, .]
[., checkAdditionCompatible, (, this, ,, m, ), ;, final, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (, this, ), ;, for, (]
[,, m, ), ;, final, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (, this, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator]
[), ;, final, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (, this, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, m]
[;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, m, ., entries, ., iterator, (, ), ;, iterator, ., hasNext, (]
[), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, m, ., entries, ., iterator, (, ), ;, iterator, ., hasNext]
[;, iterator, ., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final, int, row, =, iterator]
[., iterator, (, ), ;, iterator, ., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final]
[., entries, ., iterator, (, ), ;, iterator, ., hasNext, (, ), ;, ), {, iterator, ., advance, (, )]
[;, ), {, iterator, ., advance, (, ), ;, final, int, row, =, iterator, ., key, (, ), /, columns]
[., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final, int, row, =, iterator, ., key]
[;, final, int, row, =, iterator, ., key, (, ), /, columns, ;, final, int, col, =, iterator, ., key]
[., advance, (, ), ;, final, int, row, =, iterator, ., key, (, ), /, columns, ;, final, int, col]
[;, final, int, col, =, iterator, ., key, (, ), -, row, *, columns, ;, out, ., setEntry, (, row]
[/, columns, ;, final, int, col, =, iterator, ., key, (, ), -, row, *, columns, ;, out, ., setEntry]
[., key, (, ), /, columns, ;, final, int, col, =, iterator, ., key, (, ), -, row, *, columns]
[;, final, int, col, =, iterator, ., key, (, ), -, row, *, columns, ;, out, ., setEntry, (, row]
[;, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), -, iterator, ., value, (]
[-, row, *, columns, ;, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), -]
[., key, (, ), -, row, *, columns, ;, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row]
[;, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), -, iterator, ., value, (]
[*, columns, ;, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), -, iterator, .]
[;, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), -, iterator, ., value, (]
[;, }, return, out, ;, }, @, Override, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException]
[., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), -, iterator, ., value, (, ), )]
[,, col, ,, getEntry, (, row, ,, col, ), -, iterator, ., value, (, ), ), ;, }, return, out]
[,, getEntry, (, row, ,, col, ), -, iterator, ., value, (, ), ), ;, }, return, out, ;, }]
[), ;, }, return, out, ;, }, @, Override, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, ,]
[-, iterator, ., value, (, ), ), ;, }, return, out, ;, }, @, Override, public, RealMatrix, multiply, (, final]
[,, col, ), -, iterator, ., value, (, ), ), ;, }, return, out, ;, }, @, Override, public, RealMatrix]
[), -, iterator, ., value, (, ), ), ;, }, return, out, ;, }, @, Override, public, RealMatrix, multiply, (]
[), ;, }, return, out, ;, }, @, Override, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, ,]
[., value, (, ), ), ;, }, return, out, ;, }, @, Override, public, RealMatrix, multiply, (, final, RealMatrix, m]
[;, }, @, Override, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, try, {, return]
[;, }, catch, (, ClassCastException, cce, ), {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, outCols]
[), ;, }, catch, (, ClassCastException, cce, ), {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int]
[), ;, }, catch, (, ClassCastException, cce, ), {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int]
[;, final, int, outCols, =, m, ., getColumnDimension, (, ), ;, final, BlockRealMatrix, out, =, new, BlockRealMatrix, (, rows, ,]
[., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, outCols, =, m, ., getColumnDimension, (, ), ;, final, BlockRealMatrix]
[,, m, ), ;, final, int, outCols, =, m, ., getColumnDimension, (, ), ;, final, BlockRealMatrix, out, =, new, BlockRealMatrix]
[), ;, final, int, outCols, =, m, ., getColumnDimension, (, ), ;, final, BlockRealMatrix, out, =, new, BlockRealMatrix, (, rows]
[;, final, BlockRealMatrix, out, =, new, BlockRealMatrix, (, rows, ,, outCols, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =]
[., getColumnDimension, (, ), ;, final, BlockRealMatrix, out, =, new, BlockRealMatrix, (, rows, ,, outCols, ), ;, for, (, OpenIntToDoubleHashMap]
[;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, entries, ., iterator, (, ), ;, iterator, ., hasNext, (, ), ;]
[,, outCols, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, entries, ., iterator, (, ), ;, iterator, ., hasNext]
[), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, entries, ., iterator, (, ), ;, iterator, ., hasNext, (, )]
[;, iterator, ., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final, double, value, =, iterator]
[., iterator, (, ), ;, iterator, ., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final]
[;, ), {, iterator, ., advance, (, ), ;, final, double, value, =, iterator, ., value, (, ), ;, final]
[., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final, double, value, =, iterator, ., value]
[;, final, double, value, =, iterator, ., value, (, ), ;, final, int, key, =, iterator, ., key, (, )]
[., advance, (, ), ;, final, double, value, =, iterator, ., value, (, ), ;, final, int, key, =, iterator]
[;, final, int, key, =, iterator, ., key, (, ), ;, final, int, i, =, key, /, columns, ;, final]
[., value, (, ), ;, final, int, key, =, iterator, ., key, (, ), ;, final, int, i, =, key]
[;, final, int, i, =, key, /, columns, ;, final, int, k, =, key, %, columns, ;, for, (, int]
[., key, (, ), ;, final, int, i, =, key, /, columns, ;, final, int, k, =, key, %, columns]
[;, final, int, k, =, key, %, columns, ;, for, (, int, j, =, 0, ;, j, <, outCols, ;]
[/, columns, ;, final, int, k, =, key, %, columns, ;, for, (, int, j, =, 0, ;, j, <]
[;, final, int, k, =, key, %, columns, ;, for, (, int, j, =, 0, ;, j, <, outCols, ;]
[;, for, (, int, j, =, 0, ;, j, <, outCols, ;, ++, j, ), {, out, ., addToEntry, (]
[%, columns, ;, for, (, int, j, =, 0, ;, j, <, outCols, ;, ++, j, ), {, out, .]
[;, for, (, int, j, =, 0, ;, j, <, outCols, ;, ++, j, ), {, out, ., addToEntry, (]
[;, j, <, outCols, ;, ++, j, ), {, out, ., addToEntry, (, i, ,, j, ,, value, *, m]
[;, ++, j, ), {, out, ., addToEntry, (, i, ,, j, ,, value, *, m, ., getEntry, (, k]
[<, outCols, ;, ++, j, ), {, out, ., addToEntry, (, i, ,, j, ,, value, *, m, ., getEntry]
[;, ++, j, ), {, out, ., addToEntry, (, i, ,, j, ,, value, *, m, ., getEntry, (, k]
[), {, out, ., addToEntry, (, i, ,, j, ,, value, *, m, ., getEntry, (, k, ,, j, )]
[), {, out, ., addToEntry, (, i, ,, j, ,, value, *, m, ., getEntry, (, k, ,, j, )]
[;, }, }, return, out, ;, }, }, public, OpenMapRealMatrix, multiply, (, OpenMapRealMatrix, m, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {]
[., addToEntry, (, i, ,, j, ,, value, *, m, ., getEntry, (, k, ,, j, ), ), ;, }]
[,, j, ,, value, *, m, ., getEntry, (, k, ,, j, ), ), ;, }, }, return, out, ;]
[,, value, *, m, ., getEntry, (, k, ,, j, ), ), ;, }, }, return, out, ;, }, }]
[), ;, }, }, return, out, ;, }, }, public, OpenMapRealMatrix, multiply, (, OpenMapRealMatrix, m, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException]
[*, m, ., getEntry, (, k, ,, j, ), ), ;, }, }, return, out, ;, }, }, public, OpenMapRealMatrix]
[), ;, }, }, return, out, ;, }, }, public, OpenMapRealMatrix, multiply, (, OpenMapRealMatrix, m, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException]
[., getEntry, (, k, ,, j, ), ), ;, }, }, return, out, ;, }, }, public, OpenMapRealMatrix, multiply, (]
[,, j, ), ), ;, }, }, return, out, ;, }, }, public, OpenMapRealMatrix, multiply, (, OpenMapRealMatrix, m, ), throws]
[), ), ;, }, }, return, out, ;, }, }, public, OpenMapRealMatrix, multiply, (, OpenMapRealMatrix, m, ), throws, DimensionMismatchException, ,]
[;, }, }, public, OpenMapRealMatrix, multiply, (, OpenMapRealMatrix, m, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, MatrixUtils, ., checkMultiplicationCompatible, (, this]
[;, final, int, outCols, =, m, ., getColumnDimension, (, ), ;, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (, rows, ,, outCols]
[., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, outCols, =, m, ., getColumnDimension, (, ), ;, OpenMapRealMatrix, out]
[,, m, ), ;, final, int, outCols, =, m, ., getColumnDimension, (, ), ;, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (]
[), ;, final, int, outCols, =, m, ., getColumnDimension, (, ), ;, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (, rows, ,]
[;, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (, rows, ,, outCols, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, entries]
[., getColumnDimension, (, ), ;, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (, rows, ,, outCols, ), ;, for, (, OpenIntToDoubleHashMap, .]
[;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, entries, ., iterator, (, ), ;, iterator, ., hasNext, (, ), ;]
[,, outCols, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, entries, ., iterator, (, ), ;, iterator, ., hasNext]
[), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, entries, ., iterator, (, ), ;, iterator, ., hasNext, (, )]
[;, iterator, ., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final, double, value, =, iterator]
[., iterator, (, ), ;, iterator, ., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final]
[;, ), {, iterator, ., advance, (, ), ;, final, double, value, =, iterator, ., value, (, ), ;, final]
[., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final, double, value, =, iterator, ., value]
[;, final, double, value, =, iterator, ., value, (, ), ;, final, int, key, =, iterator, ., key, (, )]
[., advance, (, ), ;, final, double, value, =, iterator, ., value, (, ), ;, final, int, key, =, iterator]
[;, final, int, key, =, iterator, ., key, (, ), ;, final, int, i, =, key, /, columns, ;, final]
[., value, (, ), ;, final, int, key, =, iterator, ., key, (, ), ;, final, int, i, =, key]
[;, final, int, i, =, key, /, columns, ;, final, int, k, =, key, %, columns, ;, for, (, int]
[., key, (, ), ;, final, int, i, =, key, /, columns, ;, final, int, k, =, key, %, columns]
[;, final, int, k, =, key, %, columns, ;, for, (, int, j, =, 0, ;, j, <, outCols, ;]
[/, columns, ;, final, int, k, =, key, %, columns, ;, for, (, int, j, =, 0, ;, j, <]
[;, final, int, k, =, key, %, columns, ;, for, (, int, j, =, 0, ;, j, <, outCols, ;]
[;, for, (, int, j, =, 0, ;, j, <, outCols, ;, ++, j, ), {, final, int, rightKey, =]
[%, columns, ;, for, (, int, j, =, 0, ;, j, <, outCols, ;, ++, j, ), {, final, int]
[;, for, (, int, j, =, 0, ;, j, <, outCols, ;, ++, j, ), {, final, int, rightKey, =]
[;, j, <, outCols, ;, ++, j, ), {, final, int, rightKey, =, m, ., computeKey, (, k, ,, j]
[;, ++, j, ), {, final, int, rightKey, =, m, ., computeKey, (, k, ,, j, ), ;, if, (]
[<, outCols, ;, ++, j, ), {, final, int, rightKey, =, m, ., computeKey, (, k, ,, j, ), ;]
[;, ++, j, ), {, final, int, rightKey, =, m, ., computeKey, (, k, ,, j, ), ;, if, (]
[), {, final, int, rightKey, =, m, ., computeKey, (, k, ,, j, ), ;, if, (, m, ., entries]
[), {, final, int, rightKey, =, m, ., computeKey, (, k, ,, j, ), ;, if, (, m, ., entries]
[;, if, (, m, ., entries, ., containsKey, (, rightKey, ), ), {, final, int, outKey, =, out, ., computeKey]
[., computeKey, (, k, ,, j, ), ;, if, (, m, ., entries, ., containsKey, (, rightKey, ), ), {]
[,, j, ), ;, if, (, m, ., entries, ., containsKey, (, rightKey, ), ), {, final, int, outKey, =]
[), ;, if, (, m, ., entries, ., containsKey, (, rightKey, ), ), {, final, int, outKey, =, out, .]
[), {, final, int, outKey, =, out, ., computeKey, (, i, ,, j, ), ;, final, double, outValue, =, out]
[., containsKey, (, rightKey, ), ), {, final, int, outKey, =, out, ., computeKey, (, i, ,, j, ), ;]
[., entries, ., containsKey, (, rightKey, ), ), {, final, int, outKey, =, out, ., computeKey, (, i, ,, j]
[), ), {, final, int, outKey, =, out, ., computeKey, (, i, ,, j, ), ;, final, double, outValue, =]
[;, final, double, outValue, =, out, ., entries, ., get, (, outKey, ), +, value, *, m, ., entries, .]
[., computeKey, (, i, ,, j, ), ;, final, double, outValue, =, out, ., entries, ., get, (, outKey, )]
[,, j, ), ;, final, double, outValue, =, out, ., entries, ., get, (, outKey, ), +, value, *, m]
[), ;, final, double, outValue, =, out, ., entries, ., get, (, outKey, ), +, value, *, m, ., entries]
[;, if, (, outValue, ==, 0.0, ), {, out, ., entries, ., remove, (, outKey, ), ;, }, else, {]
[+, value, *, m, ., entries, ., get, (, rightKey, ), ;, if, (, outValue, ==, 0.0, ), {, out]
[., get, (, outKey, ), +, value, *, m, ., entries, ., get, (, rightKey, ), ;, if, (, outValue]
[., entries, ., get, (, outKey, ), +, value, *, m, ., entries, ., get, (, rightKey, ), ;, if]
[), +, value, *, m, ., entries, ., get, (, rightKey, ), ;, if, (, outValue, ==, 0.0, ), {]
[;, if, (, outValue, ==, 0.0, ), {, out, ., entries, ., remove, (, outKey, ), ;, }, else, {]
[*, m, ., entries, ., get, (, rightKey, ), ;, if, (, outValue, ==, 0.0, ), {, out, ., entries]
[;, if, (, outValue, ==, 0.0, ), {, out, ., entries, ., remove, (, outKey, ), ;, }, else, {]
[., get, (, rightKey, ), ;, if, (, outValue, ==, 0.0, ), {, out, ., entries, ., remove, (, outKey]
[., entries, ., get, (, rightKey, ), ;, if, (, outValue, ==, 0.0, ), {, out, ., entries, ., remove]
[), ;, if, (, outValue, ==, 0.0, ), {, out, ., entries, ., remove, (, outKey, ), ;, }, else]
[), {, out, ., entries, ., remove, (, outKey, ), ;, }, else, {, out, ., entries, ., put, (]
[==, 0.0, ), {, out, ., entries, ., remove, (, outKey, ), ;, }, else, {, out, ., entries, .]
[), {, out, ., entries, ., remove, (, outKey, ), ;, }, else, {, out, ., entries, ., put, (]
[;, }, else, {, out, ., entries, ., put, (, outKey, ,, outValue, ), ;, }, }, }, }, return]
[., remove, (, outKey, ), ;, }, else, {, out, ., entries, ., put, (, outKey, ,, outValue, ), ;]
[., entries, ., remove, (, outKey, ), ;, }, else, {, out, ., entries, ., put, (, outKey, ,, outValue]
[), ;, }, else, {, out, ., entries, ., put, (, outKey, ,, outValue, ), ;, }, }, }, }]
[;, }, }, }, }, return, out, ;, }, @, Override, public, double, getEntry, (, int, row, ,, int, column]
[., put, (, outKey, ,, outValue, ), ;, }, }, }, }, return, out, ;, }, @, Override, public, double]
[., entries, ., put, (, outKey, ,, outValue, ), ;, }, }, }, }, return, out, ;, }, @, Override]
[,, outValue, ), ;, }, }, }, }, return, out, ;, }, @, Override, public, double, getEntry, (, int, row]
[), ;, }, }, }, }, return, out, ;, }, @, Override, public, double, getEntry, (, int, row, ,, int]
[;, }, @, Override, public, double, getEntry, (, int, row, ,, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex]
[;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, return, entries, ., get, (, computeKey, (, row, ,, column]
[., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, return, entries, .]
[,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, return, entries, ., get, (, computeKey, (]
[), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, return, entries, ., get, (, computeKey, (, row, ,]
[;, return, entries, ., get, (, computeKey, (, row, ,, column, ), ), ;, }, @, Override, public, int, getRowDimension]
[., checkColumnIndex, (, this, ,, column, ), ;, return, entries, ., get, (, computeKey, (, row, ,, column, ), )]
[,, column, ), ;, return, entries, ., get, (, computeKey, (, row, ,, column, ), ), ;, }, @, Override]
[), ;, return, entries, ., get, (, computeKey, (, row, ,, column, ), ), ;, }, @, Override, public, int]
[;, }, @, Override, public, int, getRowDimension, (, ), {, return, rows, ;, }, @, Override, public, void, setEntry, (]
[., get, (, computeKey, (, row, ,, column, ), ), ;, }, @, Override, public, int, getRowDimension, (, ), {]
[), ;, }, @, Override, public, int, getRowDimension, (, ), {, return, rows, ;, }, @, Override, public, void, setEntry]
[,, column, ), ), ;, }, @, Override, public, int, getRowDimension, (, ), {, return, rows, ;, }, @, Override]
[), ), ;, }, @, Override, public, int, getRowDimension, (, ), {, return, rows, ;, }, @, Override, public, void]
[;, }, @, Override, public, void, setEntry, (, int, row, ,, int, column, ,, double, value, ), throws, OutOfRangeException, {]
[;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, if, (, value, ==, 0.0, ), {, entries, ., remove]
[., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, if, (, value]
[,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, if, (, value, ==, 0.0, ), {]
[), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, if, (, value, ==, 0.0, ), {, entries, .]
[;, if, (, value, ==, 0.0, ), {, entries, ., remove, (, computeKey, (, row, ,, column, ), ), ;]
[., checkColumnIndex, (, this, ,, column, ), ;, if, (, value, ==, 0.0, ), {, entries, ., remove, (, computeKey]
[,, column, ), ;, if, (, value, ==, 0.0, ), {, entries, ., remove, (, computeKey, (, row, ,, column]
[), ;, if, (, value, ==, 0.0, ), {, entries, ., remove, (, computeKey, (, row, ,, column, ), )]
[), {, entries, ., remove, (, computeKey, (, row, ,, column, ), ), ;, }, else, {, entries, ., put]
[==, 0.0, ), {, entries, ., remove, (, computeKey, (, row, ,, column, ), ), ;, }, else, {, entries]
[), {, entries, ., remove, (, computeKey, (, row, ,, column, ), ), ;, }, else, {, entries, ., put]
[;, }, else, {, entries, ., put, (, computeKey, (, row, ,, column, ), ,, value, ), ;, }, }]
[., remove, (, computeKey, (, row, ,, column, ), ), ;, }, else, {, entries, ., put, (, computeKey, (]
[), ;, }, else, {, entries, ., put, (, computeKey, (, row, ,, column, ), ,, value, ), ;, }]
[,, column, ), ), ;, }, else, {, entries, ., put, (, computeKey, (, row, ,, column, ), ,, value]
[), ), ;, }, else, {, entries, ., put, (, computeKey, (, row, ,, column, ), ,, value, ), ;]
[;, }, }, @, Override, public, void, addToEntry, (, int, row, ,, int, column, ,, double, increment, ), throws, OutOfRangeException]
[., put, (, computeKey, (, row, ,, column, ), ,, value, ), ;, }, }, @, Override, public, void, addToEntry]
[,, value, ), ;, }, }, @, Override, public, void, addToEntry, (, int, row, ,, int, column, ,, double, increment]
[,, column, ), ,, value, ), ;, }, }, @, Override, public, void, addToEntry, (, int, row, ,, int, column]
[), ,, value, ), ;, }, }, @, Override, public, void, addToEntry, (, int, row, ,, int, column, ,, double]
[), ;, }, }, @, Override, public, void, addToEntry, (, int, row, ,, int, column, ,, double, increment, ), throws]
[;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, )]
[., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, key]
[,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, key, =, computeKey, (, row]
[), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, key, =, computeKey, (, row, ,, column]
[;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, double, value, =, entries, ., get, (]
[., checkColumnIndex, (, this, ,, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final]
[,, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, double, value, =, entries]
[), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, double, value, =, entries, ., get]
[;, final, double, value, =, entries, ., get, (, key, ), +, increment, ;, if, (, value, ==, 0.0, )]
[,, column, ), ;, final, double, value, =, entries, ., get, (, key, ), +, increment, ;, if, (, value]
[), ;, final, double, value, =, entries, ., get, (, key, ), +, increment, ;, if, (, value, ==, 0.0]
[;, if, (, value, ==, 0.0, ), {, entries, ., remove, (, key, ), ;, }, else, {, entries, .]
[+, increment, ;, if, (, value, ==, 0.0, ), {, entries, ., remove, (, key, ), ;, }, else, {]
[., get, (, key, ), +, increment, ;, if, (, value, ==, 0.0, ), {, entries, ., remove, (, key]
[), +, increment, ;, if, (, value, ==, 0.0, ), {, entries, ., remove, (, key, ), ;, }, else]
[;, if, (, value, ==, 0.0, ), {, entries, ., remove, (, key, ), ;, }, else, {, entries, .]
[), {, entries, ., remove, (, key, ), ;, }, else, {, entries, ., put, (, key, ,, value, )]
[==, 0.0, ), {, entries, ., remove, (, key, ), ;, }, else, {, entries, ., put, (, key, ,]
[), {, entries, ., remove, (, key, ), ;, }, else, {, entries, ., put, (, key, ,, value, )]
[;, }, else, {, entries, ., put, (, key, ,, value, ), ;, }, }, @, Override, public, void, multiplyEntry]
[., remove, (, key, ), ;, }, else, {, entries, ., put, (, key, ,, value, ), ;, }, }]
[), ;, }, else, {, entries, ., put, (, key, ,, value, ), ;, }, }, @, Override, public, void]
[;, }, }, @, Override, public, void, multiplyEntry, (, int, row, ,, int, column, ,, double, factor, ), throws, OutOfRangeException]
[., put, (, key, ,, value, ), ;, }, }, @, Override, public, void, multiplyEntry, (, int, row, ,, int]
[,, value, ), ;, }, }, @, Override, public, void, multiplyEntry, (, int, row, ,, int, column, ,, double, factor]
[), ;, }, }, @, Override, public, void, multiplyEntry, (, int, row, ,, int, column, ,, double, factor, ), throws]
[;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, )]
[., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, key]
[,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, key, =, computeKey, (, row]
[), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, key, =, computeKey, (, row, ,, column]
[;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, double, value, =, entries, ., get, (]
[., checkColumnIndex, (, this, ,, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final]
[,, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, double, value, =, entries]
[), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, double, value, =, entries, ., get]
[;, final, double, value, =, entries, ., get, (, key, ), *, factor, ;, if, (, value, ==, 0.0, )]
[,, column, ), ;, final, double, value, =, entries, ., get, (, key, ), *, factor, ;, if, (, value]
[), ;, final, double, value, =, entries, ., get, (, key, ), *, factor, ;, if, (, value, ==, 0.0]
[;, if, (, value, ==, 0.0, ), {, entries, ., remove, (, key, ), ;, }, else, {, entries, .]
[*, factor, ;, if, (, value, ==, 0.0, ), {, entries, ., remove, (, key, ), ;, }, else, {]
[., get, (, key, ), *, factor, ;, if, (, value, ==, 0.0, ), {, entries, ., remove, (, key]
[), *, factor, ;, if, (, value, ==, 0.0, ), {, entries, ., remove, (, key, ), ;, }, else]
[;, if, (, value, ==, 0.0, ), {, entries, ., remove, (, key, ), ;, }, else, {, entries, .]
[), {, entries, ., remove, (, key, ), ;, }, else, {, entries, ., put, (, key, ,, value, )]
[==, 0.0, ), {, entries, ., remove, (, key, ), ;, }, else, {, entries, ., put, (, key, ,]
[), {, entries, ., remove, (, key, ), ;, }, else, {, entries, ., put, (, key, ,, value, )]
[;, }, else, {, entries, ., put, (, key, ,, value, ), ;, }, }, private, int, computeKey, (, int]
[., remove, (, key, ), ;, }, else, {, entries, ., put, (, key, ,, value, ), ;, }, }]
[), ;, }, else, {, entries, ., put, (, key, ,, value, ), ;, }, }, private, int, computeKey, (]
[;, }, }, private, int, computeKey, (, int, row, ,, int, column, ), {, return, row, *, columns, +, column]
[., put, (, key, ,, value, ), ;, }, }, private, int, computeKey, (, int, row, ,, int, column, )]
[,, value, ), ;, }, }, private, int, computeKey, (, int, row, ,, int, column, ), {, return, row, *]
[), ;, }, }, private, int, computeKey, (, int, row, ,, int, column, ), {, return, row, *, columns, +]
[;, }, }]
[+, column, ;, }, }]
[*, columns, +, column, ;, }, }]
[+, column, ;, }, }]
[;, }, }]
