[., Map, ;, import, java, ., util, ., Set, ;, class, CollapseProperties, implements, CompilerPass, {, static, final, DiagnosticType, UNSAFE_NAMESPACE_WARNING, =]
[., Map, ;, import, java, ., util, ., Set, ;, class, CollapseProperties, implements, CompilerPass, {, static, final, DiagnosticType, UNSAFE_NAMESPACE_WARNING, =]
[java, ., util, ., Set, ;, class, CollapseProperties, implements, CompilerPass, {, static, final, DiagnosticType, UNSAFE_NAMESPACE_WARNING, =, DiagnosticType, ., warning, (]
[util, ., Set, ;, class, CollapseProperties, implements, CompilerPass, {, static, final, DiagnosticType, UNSAFE_NAMESPACE_WARNING, =, DiagnosticType, ., warning, (, "JSC_UNSAFE_NAMESPACE", ,]
[{, static, final, DiagnosticType, UNSAFE_NAMESPACE_WARNING, =, DiagnosticType, ., warning, (, "JSC_UNSAFE_NAMESPACE", ,, "incomplete alias created for namespace {0}", ), ;, static, final, DiagnosticType, NAMESPACE_REDEFINED_WARNING, =]
[{, static, final, DiagnosticType, UNSAFE_NAMESPACE_WARNING, =, DiagnosticType, ., warning, (, "JSC_UNSAFE_NAMESPACE", ,, "incomplete alias created for namespace {0}", ), ;, static, final, DiagnosticType, NAMESPACE_REDEFINED_WARNING, =]
[UNSAFE_NAMESPACE_WARNING, =, DiagnosticType, ., warning, (, "JSC_UNSAFE_NAMESPACE", ,, "incomplete alias created for namespace {0}", ), ;, static, final, DiagnosticType, NAMESPACE_REDEFINED_WARNING, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_UNSAFE_NAMESPACE", ,, "incomplete alias created for namespace {0}", ), ;, static, final, DiagnosticType, NAMESPACE_REDEFINED_WARNING, =, DiagnosticType, ., warning, (, "JSC_NAMESPACE_REDEFINED", ,]
[;, static, final, DiagnosticType, NAMESPACE_REDEFINED_WARNING, =, DiagnosticType, ., warning, (, "JSC_NAMESPACE_REDEFINED", ,, "namespace {0} should not be redefined", ), ;, static, final, DiagnosticType, UNSAFE_THIS, =]
[;, static, final, DiagnosticType, NAMESPACE_REDEFINED_WARNING, =, DiagnosticType, ., warning, (, "JSC_NAMESPACE_REDEFINED", ,, "namespace {0} should not be redefined", ), ;, static, final, DiagnosticType, UNSAFE_THIS, =]
[NAMESPACE_REDEFINED_WARNING, =, DiagnosticType, ., warning, (, "JSC_NAMESPACE_REDEFINED", ,, "namespace {0} should not be redefined", ), ;, static, final, DiagnosticType, UNSAFE_THIS, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_NAMESPACE_REDEFINED", ,, "namespace {0} should not be redefined", ), ;, static, final, DiagnosticType, UNSAFE_THIS, =, DiagnosticType, ., warning, (, "JSC_UNSAFE_THIS", ,]
[boolean, collapsePropertiesOnExternTypes, ;, private, final, boolean, inlineAliases, ;, CollapseProperties, (, AbstractCompiler, compiler, ,, boolean, collapsePropertiesOnExternTypes, ,, boolean, inlineAliases, ), {]
[boolean, collapsePropertiesOnExternTypes, ;, private, final, boolean, inlineAliases, ;, CollapseProperties, (, AbstractCompiler, compiler, ,, boolean, collapsePropertiesOnExternTypes, ,, boolean, inlineAliases, ), {]
[final, boolean, inlineAliases, ;, CollapseProperties, (, AbstractCompiler, compiler, ,, boolean, collapsePropertiesOnExternTypes, ,, boolean, inlineAliases, ), {, this, ., compiler, =]
[inlineAliases, ;, CollapseProperties, (, AbstractCompiler, compiler, ,, boolean, collapsePropertiesOnExternTypes, ,, boolean, inlineAliases, ), {, this, ., compiler, =, compiler, ;]
[inlineAliases, ;, CollapseProperties, (, AbstractCompiler, compiler, ,, boolean, collapsePropertiesOnExternTypes, ,, boolean, inlineAliases, ), {, this, ., compiler, =, compiler, ;]
[AbstractCompiler, compiler, ,, boolean, collapsePropertiesOnExternTypes, ,, boolean, inlineAliases, ), {, this, ., compiler, =, compiler, ;, this, ., collapsePropertiesOnExternTypes, =]
[,, boolean, collapsePropertiesOnExternTypes, ,, boolean, inlineAliases, ), {, this, ., compiler, =, compiler, ;, this, ., collapsePropertiesOnExternTypes, =, collapsePropertiesOnExternTypes, ;]
[,, boolean, collapsePropertiesOnExternTypes, ,, boolean, inlineAliases, ), {, this, ., compiler, =, compiler, ;, this, ., collapsePropertiesOnExternTypes, =, collapsePropertiesOnExternTypes, ;]
[boolean, inlineAliases, ), {, this, ., compiler, =, compiler, ;, this, ., collapsePropertiesOnExternTypes, =, collapsePropertiesOnExternTypes, ;, this, ., inlineAliases, =]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, GlobalNamespace, namespace, ;, if, (]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, GlobalNamespace, namespace, ;, if, (, collapsePropertiesOnExternTypes, ), {]
[void, process, (, Node, externs, ,, Node, root, ), {, GlobalNamespace, namespace, ;, if, (, collapsePropertiesOnExternTypes, ), {, namespace, =]
[Node, externs, ,, Node, root, ), {, GlobalNamespace, namespace, ;, if, (, collapsePropertiesOnExternTypes, ), {, namespace, =, new, GlobalNamespace, (]
[,, Node, root, ), {, GlobalNamespace, namespace, ;, if, (, collapsePropertiesOnExternTypes, ), {, namespace, =, new, GlobalNamespace, (, compiler, ,]
[root, ), {, GlobalNamespace, namespace, ;, if, (, collapsePropertiesOnExternTypes, ), {, namespace, =, new, GlobalNamespace, (, compiler, ,, externs, ,]
[if, (, collapsePropertiesOnExternTypes, ), {, namespace, =, new, GlobalNamespace, (, compiler, ,, externs, ,, root, ), ;, }, else, {]
[collapsePropertiesOnExternTypes, ), {, namespace, =, new, GlobalNamespace, (, compiler, ,, externs, ,, root, ), ;, }, else, {, namespace, =]
[namespace, =, new, GlobalNamespace, (, compiler, ,, externs, ,, root, ), ;, }, else, {, namespace, =, new, GlobalNamespace, (]
[new, GlobalNamespace, (, compiler, ,, externs, ,, root, ), ;, }, else, {, namespace, =, new, GlobalNamespace, (, compiler, ,]
[,, root, ), ;, }, else, {, namespace, =, new, GlobalNamespace, (, compiler, ,, root, ), ;, }, if, (]
[;, }, else, {, namespace, =, new, GlobalNamespace, (, compiler, ,, root, ), ;, }, if, (, inlineAliases, ), {]
[else, {, namespace, =, new, GlobalNamespace, (, compiler, ,, root, ), ;, }, if, (, inlineAliases, ), {, inlineAliases, (]
[new, GlobalNamespace, (, compiler, ,, root, ), ;, }, if, (, inlineAliases, ), {, inlineAliases, (, namespace, ), ;, }]
[(, compiler, ,, root, ), ;, }, if, (, inlineAliases, ), {, inlineAliases, (, namespace, ), ;, }, nameMap, =]
[(, compiler, ,, root, ), ;, }, if, (, inlineAliases, ), {, inlineAliases, (, namespace, ), ;, }, nameMap, =]
[}, if, (, inlineAliases, ), {, inlineAliases, (, namespace, ), ;, }, nameMap, =, namespace, ., getNameIndex, (, ), ;]
[(, inlineAliases, ), {, inlineAliases, (, namespace, ), ;, }, nameMap, =, namespace, ., getNameIndex, (, ), ;, globalNames, =]
[(, inlineAliases, ), {, inlineAliases, (, namespace, ), ;, }, nameMap, =, namespace, ., getNameIndex, (, ), ;, globalNames, =]
[namespace, ), ;, }, nameMap, =, namespace, ., getNameIndex, (, ), ;, globalNames, =, namespace, ., getNameForest, (, ), ;]
[(, ), ;, globalNames, =, namespace, ., getNameForest, (, ), ;, checkNamespaces, (, ), ;, for, (, Name, n, :]
[globalNames, =, namespace, ., getNameForest, (, ), ;, checkNamespaces, (, ), ;, for, (, Name, n, :, globalNames, ), {]
[namespace, ., getNameForest, (, ), ;, checkNamespaces, (, ), ;, for, (, Name, n, :, globalNames, ), {, flattenReferencesToCollapsibleDescendantNames, (]
[getNameForest, (, ), ;, checkNamespaces, (, ), ;, for, (, Name, n, :, globalNames, ), {, flattenReferencesToCollapsibleDescendantNames, (, n, ,]
[getNameForest, (, ), ;, checkNamespaces, (, ), ;, for, (, Name, n, :, globalNames, ), {, flattenReferencesToCollapsibleDescendantNames, (, n, ,]
[globalNames, ), {, flattenReferencesToCollapsibleDescendantNames, (, n, ,, n, ., getBaseName, (, ), ), ;, }, for, (, Name, n, :]
[flattenReferencesToCollapsibleDescendantNames, (, n, ,, n, ., getBaseName, (, ), ), ;, }, for, (, Name, n, :, globalNames, ), {]
[n, ,, n, ., getBaseName, (, ), ), ;, }, for, (, Name, n, :, globalNames, ), {, collapseDeclarationOfNameAndDescendants, (]
[n, ., getBaseName, (, ), ), ;, }, for, (, Name, n, :, globalNames, ), {, collapseDeclarationOfNameAndDescendants, (, n, ,]
[n, ., getBaseName, (, ), ), ;, }, for, (, Name, n, :, globalNames, ), {, collapseDeclarationOfNameAndDescendants, (, n, ,]
[(, ), ), ;, }, }, private, void, inlineAliases, (, GlobalNamespace, namespace, ), {, Deque, <, Name, >, workList, =]
[private, void, inlineAliases, (, GlobalNamespace, namespace, ), {, Deque, <, Name, >, workList, =, new, ArrayDeque, <, Name, >, (]
[private, void, inlineAliases, (, GlobalNamespace, namespace, ), {, Deque, <, Name, >, workList, =, new, ArrayDeque, <, Name, >, (]
[<, Name, >, workList, =, new, ArrayDeque, <, Name, >, (, namespace, ., getNameForest, (, ), ), ;, while, (]
[Name, >, workList, =, new, ArrayDeque, <, Name, >, (, namespace, ., getNameForest, (, ), ), ;, while, (, !]
[Name, >, workList, =, new, ArrayDeque, <, Name, >, (, namespace, ., getNameForest, (, ), ), ;, while, (, !]
[namespace, ., getNameForest, (, ), ), ;, while, (, !, workList, ., isEmpty, (, ), ), {, Name, name, =]
[namespace, ., getNameForest, (, ), ), ;, while, (, !, workList, ., isEmpty, (, ), ), {, Name, name, =]
[(, !, workList, ., isEmpty, (, ), ), {, Name, name, =, workList, ., pop, (, ), ;, if, (]
[(, !, workList, ., isEmpty, (, ), ), {, Name, name, =, workList, ., pop, (, ), ;, if, (]
[(, !, workList, ., isEmpty, (, ), ), {, Name, name, =, workList, ., pop, (, ), ;, if, (]
[(, !, workList, ., isEmpty, (, ), ), {, Name, name, =, workList, ., pop, (, ), ;, if, (]
[isEmpty, (, ), ), {, Name, name, =, workList, ., pop, (, ), ;, if, (, name, ., type, ==]
[isEmpty, (, ), ), {, Name, name, =, workList, ., pop, (, ), ;, if, (, name, ., type, ==]
[isEmpty, (, ), ), {, Name, name, =, workList, ., pop, (, ), ;, if, (, name, ., type, ==]
[name, =, workList, ., pop, (, ), ;, if, (, name, ., type, ==, Name, ., Type, ., GET, ||]
[name, =, workList, ., pop, (, ), ;, if, (, name, ., type, ==, Name, ., Type, ., GET, ||]
[name, =, workList, ., pop, (, ), ;, if, (, name, ., type, ==, Name, ., Type, ., GET, ||]
[pop, (, ), ;, if, (, name, ., type, ==, Name, ., Type, ., GET, ||, name, ., type, ==]
[pop, (, ), ;, if, (, name, ., type, ==, Name, ., Type, ., GET, ||, name, ., type, ==]
[pop, (, ), ;, if, (, name, ., type, ==, Name, ., Type, ., GET, ||, name, ., type, ==]
[Type, ., GET, ||, name, ., type, ==, Name, ., Type, ., SET, ), {, continue, ;, }, if, (]
[Type, ., GET, ||, name, ., type, ==, Name, ., Type, ., SET, ), {, continue, ;, }, if, (]
[Type, ., GET, ||, name, ., type, ==, Name, ., Type, ., SET, ), {, continue, ;, }, if, (]
[Type, ., GET, ||, name, ., type, ==, Name, ., Type, ., SET, ), {, continue, ;, }, if, (]
[Type, ., GET, ||, name, ., type, ==, Name, ., Type, ., SET, ), {, continue, ;, }, if, (]
[name, ., type, ==, Name, ., Type, ., SET, ), {, continue, ;, }, if, (, name, ., globalSets, ==]
[type, ==, Name, ., Type, ., SET, ), {, continue, ;, }, if, (, name, ., globalSets, ==, 1, &&]
[type, ==, Name, ., Type, ., SET, ), {, continue, ;, }, if, (, name, ., globalSets, ==, 1, &&]
[type, ==, Name, ., Type, ., SET, ), {, continue, ;, }, if, (, name, ., globalSets, ==, 1, &&]
[Type, ., SET, ), {, continue, ;, }, if, (, name, ., globalSets, ==, 1, &&, name, ., localSets, ==]
[SET, ), {, continue, ;, }, if, (, name, ., globalSets, ==, 1, &&, name, ., localSets, ==, 0, &&]
[SET, ), {, continue, ;, }, if, (, name, ., globalSets, ==, 1, &&, name, ., localSets, ==, 0, &&]
[SET, ), {, continue, ;, }, if, (, name, ., globalSets, ==, 1, &&, name, ., localSets, ==, 0, &&]
[;, }, if, (, name, ., globalSets, ==, 1, &&, name, ., localSets, ==, 0, &&, name, ., aliasingGets, >]
[&&, name, ., localSets, ==, 0, &&, name, ., aliasingGets, >, 0, ), {, List, <, Ref, >, refs, =]
[&&, name, ., localSets, ==, 0, &&, name, ., aliasingGets, >, 0, ), {, List, <, Ref, >, refs, =]
[==, 0, &&, name, ., aliasingGets, >, 0, ), {, List, <, Ref, >, refs, =, Lists, ., newArrayList, (]
[==, 0, &&, name, ., aliasingGets, >, 0, ), {, List, <, Ref, >, refs, =, Lists, ., newArrayList, (]
[Ref, >, refs, =, Lists, ., newArrayList, (, name, ., getRefs, (, ), ), ;, for, (, Ref, ref, :]
[., newArrayList, (, name, ., getRefs, (, ), ), ;, for, (, Ref, ref, :, refs, ), {, if, (]
[., newArrayList, (, name, ., getRefs, (, ), ), ;, for, (, Ref, ref, :, refs, ), {, if, (]
[., newArrayList, (, name, ., getRefs, (, ), ), ;, for, (, Ref, ref, :, refs, ), {, if, (]
[., newArrayList, (, name, ., getRefs, (, ), ), ;, for, (, Ref, ref, :, refs, ), {, if, (]
[., getRefs, (, ), ), ;, for, (, Ref, ref, :, refs, ), {, if, (, ref, ., type, ==]
[., getRefs, (, ), ), ;, for, (, Ref, ref, :, refs, ), {, if, (, ref, ., type, ==]
[), ;, for, (, Ref, ref, :, refs, ), {, if, (, ref, ., type, ==, Type, ., ALIASING_GET, &&]
[), ;, for, (, Ref, ref, :, refs, ), {, if, (, ref, ., type, ==, Type, ., ALIASING_GET, &&]
[), ;, for, (, Ref, ref, :, refs, ), {, if, (, ref, ., type, ==, Type, ., ALIASING_GET, &&]
[(, ref, ., type, ==, Type, ., ALIASING_GET, &&, ref, ., scope, ., isLocal, (, ), ), {, if, (]
[., type, ==, Type, ., ALIASING_GET, &&, ref, ., scope, ., isLocal, (, ), ), {, if, (, inlineAliasIfPossible, (]
[==, Type, ., ALIASING_GET, &&, ref, ., scope, ., isLocal, (, ), ), {, if, (, inlineAliasIfPossible, (, ref, ,]
[&&, ref, ., scope, ., isLocal, (, ), ), {, if, (, inlineAliasIfPossible, (, ref, ,, namespace, ), ), {]
[&&, ref, ., scope, ., isLocal, (, ), ), {, if, (, inlineAliasIfPossible, (, ref, ,, namespace, ), ), {]
[., isLocal, (, ), ), {, if, (, inlineAliasIfPossible, (, ref, ,, namespace, ), ), {, name, ., removeRef, (]
[(, ref, ,, namespace, ), ), {, name, ., removeRef, (, ref, ), ;, }, }, }, }, if, (]
[(, ref, ,, namespace, ), ), {, name, ., removeRef, (, ref, ), ;, }, }, }, }, if, (]
[(, ref, ,, namespace, ), ), {, name, ., removeRef, (, ref, ), ;, }, }, }, }, if, (]
[ref, ,, namespace, ), ), {, name, ., removeRef, (, ref, ), ;, }, }, }, }, if, (, (]
[ref, ,, namespace, ), ), {, name, ., removeRef, (, ref, ), ;, }, }, }, }, if, (, (]
[ref, ,, namespace, ), ), {, name, ., removeRef, (, ref, ), ;, }, }, }, }, if, (, (]
[ref, ,, namespace, ), ), {, name, ., removeRef, (, ref, ), ;, }, }, }, }, if, (, (]
[), {, name, ., removeRef, (, ref, ), ;, }, }, }, }, if, (, (, name, ., type, ==]
[), {, name, ., removeRef, (, ref, ), ;, }, }, }, }, if, (, (, name, ., type, ==]
[), {, name, ., removeRef, (, ref, ), ;, }, }, }, }, if, (, (, name, ., type, ==]
[ref, ), ;, }, }, }, }, if, (, (, name, ., type, ==, Name, ., Type, ., OBJECTLIT, ||]
[ref, ), ;, }, }, }, }, if, (, (, name, ., type, ==, Name, ., Type, ., OBJECTLIT, ||]
[ref, ), ;, }, }, }, }, if, (, (, name, ., type, ==, Name, ., Type, ., OBJECTLIT, ||]
[}, }, }, if, (, (, name, ., type, ==, Name, ., Type, ., OBJECTLIT, ||, name, ., type, ==]
[}, }, }, if, (, (, name, ., type, ==, Name, ., Type, ., OBJECTLIT, ||, name, ., type, ==]
[}, }, }, if, (, (, name, ., type, ==, Name, ., Type, ., OBJECTLIT, ||, name, ., type, ==]
[., type, ==, Name, ., Type, ., OBJECTLIT, ||, name, ., type, ==, Name, ., Type, ., FUNCTION, ), &&]
[., type, ==, Name, ., Type, ., OBJECTLIT, ||, name, ., type, ==, Name, ., Type, ., FUNCTION, ), &&]
[., type, ==, Name, ., Type, ., OBJECTLIT, ||, name, ., type, ==, Name, ., Type, ., FUNCTION, ), &&]
[., Type, ., OBJECTLIT, ||, name, ., type, ==, Name, ., Type, ., FUNCTION, ), &&, name, ., aliasingGets, ==]
[., OBJECTLIT, ||, name, ., type, ==, Name, ., Type, ., FUNCTION, ), &&, name, ., aliasingGets, ==, 0, &&]
[., OBJECTLIT, ||, name, ., type, ==, Name, ., Type, ., FUNCTION, ), &&, name, ., aliasingGets, ==, 0, &&]
[., OBJECTLIT, ||, name, ., type, ==, Name, ., Type, ., FUNCTION, ), &&, name, ., aliasingGets, ==, 0, &&]
[., type, ==, Name, ., Type, ., FUNCTION, ), &&, name, ., aliasingGets, ==, 0, &&, name, ., props, !=]
[Name, ., Type, ., FUNCTION, ), &&, name, ., aliasingGets, ==, 0, &&, name, ., props, !=, null, ), {]
[Name, ., Type, ., FUNCTION, ), &&, name, ., aliasingGets, ==, 0, &&, name, ., props, !=, null, ), {]
[FUNCTION, ), &&, name, ., aliasingGets, ==, 0, &&, name, ., props, !=, null, ), {, workList, ., addAll, (]
[FUNCTION, ), &&, name, ., aliasingGets, ==, 0, &&, name, ., props, !=, null, ), {, workList, ., addAll, (]
[props, ), ;, }, }, }, private, boolean, inlineAliasIfPossible, (, Ref, alias, ,, GlobalNamespace, namespace, ), {, Node, aliasParent, =]
[props, ), ;, }, }, }, private, boolean, inlineAliasIfPossible, (, Ref, alias, ,, GlobalNamespace, namespace, ), {, Node, aliasParent, =]
[props, ), ;, }, }, }, private, boolean, inlineAliasIfPossible, (, Ref, alias, ,, GlobalNamespace, namespace, ), {, Node, aliasParent, =]
[Ref, alias, ,, GlobalNamespace, namespace, ), {, Node, aliasParent, =, alias, ., node, ., getParent, (, ), ;, if, (]
[Ref, alias, ,, GlobalNamespace, namespace, ), {, Node, aliasParent, =, alias, ., node, ., getParent, (, ), ;, if, (]
[alias, ., node, ., getParent, (, ), ;, if, (, aliasParent, ., isName, (, ), ), {, Scope, scope, =]
[alias, ., node, ., getParent, (, ), ;, if, (, aliasParent, ., isName, (, ), ), {, Scope, scope, =]
[;, if, (, aliasParent, ., isName, (, ), ), {, Scope, scope, =, alias, ., scope, ;, Var, aliasVar, =]
[;, if, (, aliasParent, ., isName, (, ), ), {, Scope, scope, =, alias, ., scope, ;, Var, aliasVar, =]
[., isName, (, ), ), {, Scope, scope, =, alias, ., scope, ;, Var, aliasVar, =, scope, ., getVar, (]
[., isName, (, ), ), {, Scope, scope, =, alias, ., scope, ;, Var, aliasVar, =, scope, ., getVar, (]
[., scope, ;, Var, aliasVar, =, scope, ., getVar, (, aliasParent, ., getString, (, ), ), ;, ReferenceCollectingCallback, collector, =]
[Var, aliasVar, =, scope, ., getVar, (, aliasParent, ., getString, (, ), ), ;, ReferenceCollectingCallback, collector, =, new, ReferenceCollectingCallback, (]
[=, scope, ., getVar, (, aliasParent, ., getString, (, ), ), ;, ReferenceCollectingCallback, collector, =, new, ReferenceCollectingCallback, (, compiler, ,]
[=, scope, ., getVar, (, aliasParent, ., getString, (, ), ), ;, ReferenceCollectingCallback, collector, =, new, ReferenceCollectingCallback, (, compiler, ,]
[(, aliasParent, ., getString, (, ), ), ;, ReferenceCollectingCallback, collector, =, new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ,]
[(, aliasParent, ., getString, (, ), ), ;, ReferenceCollectingCallback, collector, =, new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ,]
[;, ReferenceCollectingCallback, collector, =, new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ,, Predicates, ., <, Var, >, equalTo, (]
[new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ,, Predicates, ., <, Var, >, equalTo, (, aliasVar, ), ), ;]
[new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ,, Predicates, ., <, Var, >, equalTo, (, aliasVar, ), ), ;]
[ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ,, Predicates, ., <, Var, >, equalTo, (, aliasVar, ), ), ;, (]
[,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ,, Predicates, ., <, Var, >, equalTo, (, aliasVar, ), ), ;, (, new, NodeTraversal, (]
[., DO_NOTHING_BEHAVIOR, ,, Predicates, ., <, Var, >, equalTo, (, aliasVar, ), ), ;, (, new, NodeTraversal, (, compiler, ,]
[Var, >, equalTo, (, aliasVar, ), ), ;, (, new, NodeTraversal, (, compiler, ,, collector, ), ), ., traverseAtScope, (]
[), ;, (, new, NodeTraversal, (, compiler, ,, collector, ), ), ., traverseAtScope, (, scope, ), ;, ReferenceCollection, aliasRefs, =]
[), ;, (, new, NodeTraversal, (, compiler, ,, collector, ), ), ., traverseAtScope, (, scope, ), ;, ReferenceCollection, aliasRefs, =]
[NodeTraversal, (, compiler, ,, collector, ), ), ., traverseAtScope, (, scope, ), ;, ReferenceCollection, aliasRefs, =, collector, ., getReferences, (]
[), ), ., traverseAtScope, (, scope, ), ;, ReferenceCollection, aliasRefs, =, collector, ., getReferences, (, aliasVar, ), ;, if, (]
[), ), ., traverseAtScope, (, scope, ), ;, ReferenceCollection, aliasRefs, =, collector, ., getReferences, (, aliasVar, ), ;, if, (]
[), ), ., traverseAtScope, (, scope, ), ;, ReferenceCollection, aliasRefs, =, collector, ., getReferences, (, aliasVar, ), ;, if, (]
[), ), ., traverseAtScope, (, scope, ), ;, ReferenceCollection, aliasRefs, =, collector, ., getReferences, (, aliasVar, ), ;, if, (]
[), ;, ReferenceCollection, aliasRefs, =, collector, ., getReferences, (, aliasVar, ), ;, if, (, aliasRefs, ., isWellDefined, (, ), &&]
[), ;, ReferenceCollection, aliasRefs, =, collector, ., getReferences, (, aliasVar, ), ;, if, (, aliasRefs, ., isWellDefined, (, ), &&]
[., getReferences, (, aliasVar, ), ;, if, (, aliasRefs, ., isWellDefined, (, ), &&, aliasRefs, ., firstReferenceIsAssigningDeclaration, (, ), &&]
[., getReferences, (, aliasVar, ), ;, if, (, aliasRefs, ., isWellDefined, (, ), &&, aliasRefs, ., firstReferenceIsAssigningDeclaration, (, ), &&]
[isWellDefined, (, ), &&, aliasRefs, ., firstReferenceIsAssigningDeclaration, (, ), &&, aliasRefs, ., isAssignedOnceInLifetime, (, ), ), {, int, size, =]
[isWellDefined, (, ), &&, aliasRefs, ., firstReferenceIsAssigningDeclaration, (, ), &&, aliasRefs, ., isAssignedOnceInLifetime, (, ), ), {, int, size, =]
[isWellDefined, (, ), &&, aliasRefs, ., firstReferenceIsAssigningDeclaration, (, ), &&, aliasRefs, ., isAssignedOnceInLifetime, (, ), ), {, int, size, =]
[), ), {, int, size, =, aliasRefs, ., references, ., size, (, ), ;, Set, <, Node, >, newNodes, =]
[), ), {, int, size, =, aliasRefs, ., references, ., size, (, ), ;, Set, <, Node, >, newNodes, =]
[size, =, aliasRefs, ., references, ., size, (, ), ;, Set, <, Node, >, newNodes, =, Sets, ., newHashSetWithExpectedSize, (]
[size, =, aliasRefs, ., references, ., size, (, ), ;, Set, <, Node, >, newNodes, =, Sets, ., newHashSetWithExpectedSize, (]
[aliasRefs, ., references, ., size, (, ), ;, Set, <, Node, >, newNodes, =, Sets, ., newHashSetWithExpectedSize, (, size, -]
[Set, <, Node, >, newNodes, =, Sets, ., newHashSetWithExpectedSize, (, size, -, 1, ), ;, for, (, int, i, =]
[Node, >, newNodes, =, Sets, ., newHashSetWithExpectedSize, (, size, -, 1, ), ;, for, (, int, i, =, 1, ;]
[Node, >, newNodes, =, Sets, ., newHashSetWithExpectedSize, (, size, -, 1, ), ;, for, (, int, i, =, 1, ;]
[newNodes, =, Sets, ., newHashSetWithExpectedSize, (, size, -, 1, ), ;, for, (, int, i, =, 1, ;, i, <]
[Sets, ., newHashSetWithExpectedSize, (, size, -, 1, ), ;, for, (, int, i, =, 1, ;, i, <, size, ;]
[Sets, ., newHashSetWithExpectedSize, (, size, -, 1, ), ;, for, (, int, i, =, 1, ;, i, <, size, ;]
[for, (, int, i, =, 1, ;, i, <, size, ;, i, ++, ), {, ReferenceCollectingCallback, ., Reference, aliasRef, =]
[for, (, int, i, =, 1, ;, i, <, size, ;, i, ++, ), {, ReferenceCollectingCallback, ., Reference, aliasRef, =]
[for, (, int, i, =, 1, ;, i, <, size, ;, i, ++, ), {, ReferenceCollectingCallback, ., Reference, aliasRef, =]
[;, i, <, size, ;, i, ++, ), {, ReferenceCollectingCallback, ., Reference, aliasRef, =, aliasRefs, ., references, ., get, (]
[++, ), {, ReferenceCollectingCallback, ., Reference, aliasRef, =, aliasRefs, ., references, ., get, (, i, ), ;, Node, newNode, =]
[++, ), {, ReferenceCollectingCallback, ., Reference, aliasRef, =, aliasRefs, ., references, ., get, (, i, ), ;, Node, newNode, =]
[++, ), {, ReferenceCollectingCallback, ., Reference, aliasRef, =, aliasRefs, ., references, ., get, (, i, ), ;, Node, newNode, =]
[aliasRefs, ., references, ., get, (, i, ), ;, Node, newNode, =, alias, ., node, ., cloneTree, (, ), ;]
[aliasRefs, ., references, ., get, (, i, ), ;, Node, newNode, =, alias, ., node, ., cloneTree, (, ), ;]
[aliasRefs, ., references, ., get, (, i, ), ;, Node, newNode, =, alias, ., node, ., cloneTree, (, ), ;]
[;, Node, newNode, =, alias, ., node, ., cloneTree, (, ), ;, aliasRef, ., getParent, (, ), ., replaceChild, (]
[;, Node, newNode, =, alias, ., node, ., cloneTree, (, ), ;, aliasRef, ., getParent, (, ), ., replaceChild, (]
[node, ., cloneTree, (, ), ;, aliasRef, ., getParent, (, ), ., replaceChild, (, aliasRef, ., getNode, (, ), ,]
[(, ), ;, aliasRef, ., getParent, (, ), ., replaceChild, (, aliasRef, ., getNode, (, ), ,, newNode, ), ;]
[(, ), ;, aliasRef, ., getParent, (, ), ., replaceChild, (, aliasRef, ., getNode, (, ), ,, newNode, ), ;]
[., getParent, (, ), ., replaceChild, (, aliasRef, ., getNode, (, ), ,, newNode, ), ;, newNodes, ., add, (]
[., replaceChild, (, aliasRef, ., getNode, (, ), ,, newNode, ), ;, newNodes, ., add, (, newNode, ), ;, }]
[., replaceChild, (, aliasRef, ., getNode, (, ), ,, newNode, ), ;, newNodes, ., add, (, newNode, ), ;, }]
[., getNode, (, ), ,, newNode, ), ;, newNodes, ., add, (, newNode, ), ;, }, aliasParent, ., replaceChild, (]
[., getNode, (, ), ,, newNode, ), ;, newNodes, ., add, (, newNode, ), ;, }, aliasParent, ., replaceChild, (]
[,, newNode, ), ;, newNodes, ., add, (, newNode, ), ;, }, aliasParent, ., replaceChild, (, alias, ., node, ,]
[,, newNode, ), ;, newNodes, ., add, (, newNode, ), ;, }, aliasParent, ., replaceChild, (, alias, ., node, ,]
[(, newNode, ), ;, }, aliasParent, ., replaceChild, (, alias, ., node, ,, IR, ., nullNode, (, ), ), ;]
[(, newNode, ), ;, }, aliasParent, ., replaceChild, (, alias, ., node, ,, IR, ., nullNode, (, ), ), ;]
[., replaceChild, (, alias, ., node, ,, IR, ., nullNode, (, ), ), ;, compiler, ., reportCodeChange, (, ), ;]
[., replaceChild, (, alias, ., node, ,, IR, ., nullNode, (, ), ), ;, compiler, ., reportCodeChange, (, ), ;]
[., node, ,, IR, ., nullNode, (, ), ), ;, compiler, ., reportCodeChange, (, ), ;, namespace, ., scanNewNodes, (]
[., node, ,, IR, ., nullNode, (, ), ), ;, compiler, ., reportCodeChange, (, ), ;, namespace, ., scanNewNodes, (]
[., nullNode, (, ), ), ;, compiler, ., reportCodeChange, (, ), ;, namespace, ., scanNewNodes, (, alias, ., scope, ,]
[), ;, compiler, ., reportCodeChange, (, ), ;, namespace, ., scanNewNodes, (, alias, ., scope, ,, newNodes, ), ;, return]
[(, ), ;, namespace, ., scanNewNodes, (, alias, ., scope, ,, newNodes, ), ;, return, true, ;, }, }, return]
[return, true, ;, }, }, return, false, ;, }, private, void, checkNamespaces, (, ), {, for, (, Name, name, :]
[return, true, ;, }, }, return, false, ;, }, private, void, checkNamespaces, (, ), {, for, (, Name, name, :]
[private, void, checkNamespaces, (, ), {, for, (, Name, name, :, nameMap, ., values, (, ), ), {, if, (]
[private, void, checkNamespaces, (, ), {, for, (, Name, name, :, nameMap, ., values, (, ), ), {, if, (]
[private, void, checkNamespaces, (, ), {, for, (, Name, name, :, nameMap, ., values, (, ), ), {, if, (]
[for, (, Name, name, :, nameMap, ., values, (, ), ), {, if, (, name, ., isNamespace, (, ), &&]
[(, Name, name, :, nameMap, ., values, (, ), ), {, if, (, name, ., isNamespace, (, ), &&, (]
[(, Name, name, :, nameMap, ., values, (, ), ), {, if, (, name, ., isNamespace, (, ), &&, (]
[(, Name, name, :, nameMap, ., values, (, ), ), {, if, (, name, ., isNamespace, (, ), &&, (]
[(, Name, name, :, nameMap, ., values, (, ), ), {, if, (, name, ., isNamespace, (, ), &&, (]
[(, Name, name, :, nameMap, ., values, (, ), ), {, if, (, name, ., isNamespace, (, ), &&, (]
[nameMap, ., values, (, ), ), {, if, (, name, ., isNamespace, (, ), &&, (, name, ., aliasingGets, >]
[values, (, ), ), {, if, (, name, ., isNamespace, (, ), &&, (, name, ., aliasingGets, >, 0, ||]
[values, (, ), ), {, if, (, name, ., isNamespace, (, ), &&, (, name, ., aliasingGets, >, 0, ||]
[values, (, ), ), {, if, (, name, ., isNamespace, (, ), &&, (, name, ., aliasingGets, >, 0, ||]
[values, (, ), ), {, if, (, name, ., isNamespace, (, ), &&, (, name, ., aliasingGets, >, 0, ||]
[{, if, (, name, ., isNamespace, (, ), &&, (, name, ., aliasingGets, >, 0, ||, name, ., localSets, +]
[{, if, (, name, ., isNamespace, (, ), &&, (, name, ., aliasingGets, >, 0, ||, name, ., localSets, +]
[., isNamespace, (, ), &&, (, name, ., aliasingGets, >, 0, ||, name, ., localSets, +, name, ., globalSets, >]
[(, ), &&, (, name, ., aliasingGets, >, 0, ||, name, ., localSets, +, name, ., globalSets, >, 1, ||]
[(, ), &&, (, name, ., aliasingGets, >, 0, ||, name, ., localSets, +, name, ., globalSets, >, 1, ||]
[(, ), &&, (, name, ., aliasingGets, >, 0, ||, name, ., localSets, +, name, ., globalSets, >, 1, ||]
[name, ., aliasingGets, >, 0, ||, name, ., localSets, +, name, ., globalSets, >, 1, ||, name, ., deleteProps, >]
[., localSets, +, name, ., globalSets, >, 1, ||, name, ., deleteProps, >, 0, ), ), {, boolean, initialized, =]
[., localSets, +, name, ., globalSets, >, 1, ||, name, ., deleteProps, >, 0, ), ), {, boolean, initialized, =]
[., localSets, +, name, ., globalSets, >, 1, ||, name, ., deleteProps, >, 0, ), ), {, boolean, initialized, =]
[>, 1, ||, name, ., deleteProps, >, 0, ), ), {, boolean, initialized, =, name, ., getDeclaration, (, ), !=]
[0, ), ), {, boolean, initialized, =, name, ., getDeclaration, (, ), !=, null, ;, for, (, Ref, ref, :]
[0, ), ), {, boolean, initialized, =, name, ., getDeclaration, (, ), !=, null, ;, for, (, Ref, ref, :]
[getDeclaration, (, ), !=, null, ;, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, if, (]
[getDeclaration, (, ), !=, null, ;, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, if, (]
[), !=, null, ;, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, if, (, ref, ==]
[), !=, null, ;, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, if, (, ref, ==]
[(, ), ), {, if, (, ref, ==, name, ., getDeclaration, (, ), ), {, continue, ;, }, if, (]
[(, ), ), {, if, (, ref, ==, name, ., getDeclaration, (, ), ), {, continue, ;, }, if, (]
[(, ), ), {, if, (, ref, ==, name, ., getDeclaration, (, ), ), {, continue, ;, }, if, (]
[if, (, ref, ==, name, ., getDeclaration, (, ), ), {, continue, ;, }, if, (, ref, ., type, ==]
[if, (, ref, ==, name, ., getDeclaration, (, ), ), {, continue, ;, }, if, (, ref, ., type, ==]
[if, (, ref, ==, name, ., getDeclaration, (, ), ), {, continue, ;, }, if, (, ref, ., type, ==]
[), {, continue, ;, }, if, (, ref, ., type, ==, Ref, ., Type, ., DELETE_PROP, ), {, if, (]
[;, }, if, (, ref, ., type, ==, Ref, ., Type, ., DELETE_PROP, ), {, if, (, initialized, ), {]
[if, (, ref, ., type, ==, Ref, ., Type, ., DELETE_PROP, ), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (]
[ref, ., type, ==, Ref, ., Type, ., DELETE_PROP, ), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,]
[DELETE_PROP, ), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, }, else, if, (]
[DELETE_PROP, ), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, }, else, if, (]
[DELETE_PROP, ), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, }, else, if, (]
[DELETE_PROP, ), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, }, else, if, (]
[(, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, }, else, if, (, ref, ., type, ==]
[(, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, }, else, if, (, ref, ., type, ==]
[(, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, }, else, if, (, ref, ., type, ==]
[name, ,, ref, ), ;, }, }, else, if, (, ref, ., type, ==, Ref, ., Type, ., SET_FROM_GLOBAL, ||]
[name, ,, ref, ), ;, }, }, else, if, (, ref, ., type, ==, Ref, ., Type, ., SET_FROM_GLOBAL, ||]
[name, ,, ref, ), ;, }, }, else, if, (, ref, ., type, ==, Ref, ., Type, ., SET_FROM_GLOBAL, ||]
[;, }, }, else, if, (, ref, ., type, ==, Ref, ., Type, ., SET_FROM_GLOBAL, ||, ref, ., type, ==]
[;, }, }, else, if, (, ref, ., type, ==, Ref, ., Type, ., SET_FROM_GLOBAL, ||, ref, ., type, ==]
[;, }, }, else, if, (, ref, ., type, ==, Ref, ., Type, ., SET_FROM_GLOBAL, ||, ref, ., type, ==]
[==, Ref, ., Type, ., SET_FROM_GLOBAL, ||, ref, ., type, ==, Ref, ., Type, ., SET_FROM_LOCAL, ), {, if, (]
[Type, ., SET_FROM_GLOBAL, ||, ref, ., type, ==, Ref, ., Type, ., SET_FROM_LOCAL, ), {, if, (, initialized, ), {]
[SET_FROM_GLOBAL, ||, ref, ., type, ==, Ref, ., Type, ., SET_FROM_LOCAL, ), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (]
[ref, ., type, ==, Ref, ., Type, ., SET_FROM_LOCAL, ), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,]
[Ref, ., Type, ., SET_FROM_LOCAL, ), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }]
[Type, ., SET_FROM_LOCAL, ), {, if, (, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, initialized, =]
[(, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, initialized, =, true, ;, }, else, if, (]
[(, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, initialized, =, true, ;, }, else, if, (]
[(, initialized, ), {, warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, initialized, =, true, ;, }, else, if, (]
[warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, initialized, =, true, ;, }, else, if, (, ref, ., type, ==]
[warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, initialized, =, true, ;, }, else, if, (, ref, ., type, ==]
[warnAboutNamespaceRedefinition, (, name, ,, ref, ), ;, }, initialized, =, true, ;, }, else, if, (, ref, ., type, ==]
[}, initialized, =, true, ;, }, else, if, (, ref, ., type, ==, Ref, ., Type, ., ALIASING_GET, ), {]
[=, true, ;, }, else, if, (, ref, ., type, ==, Ref, ., Type, ., ALIASING_GET, ), {, warnAboutNamespaceAliasing, (]
[;, }, else, if, (, ref, ., type, ==, Ref, ., Type, ., ALIASING_GET, ), {, warnAboutNamespaceAliasing, (, name, ,]
[,, ref, ), ;, }, }, }, }, }, private, void, warnAboutNamespaceAliasing, (, Name, nameObj, ,, Ref, ref, ), {]
[,, ref, ), ;, }, }, }, }, }, private, void, warnAboutNamespaceAliasing, (, Name, nameObj, ,, Ref, ref, ), {]
[}, }, }, }, }, private, void, warnAboutNamespaceAliasing, (, Name, nameObj, ,, Ref, ref, ), {, compiler, ., report, (]
[}, }, }, }, }, private, void, warnAboutNamespaceAliasing, (, Name, nameObj, ,, Ref, ref, ), {, compiler, ., report, (]
[}, private, void, warnAboutNamespaceAliasing, (, Name, nameObj, ,, Ref, ref, ), {, compiler, ., report, (, JSError, ., make, (]
[}, private, void, warnAboutNamespaceAliasing, (, Name, nameObj, ,, Ref, ref, ), {, compiler, ., report, (, JSError, ., make, (]
[nameObj, ,, Ref, ref, ), {, compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,]
[nameObj, ,, Ref, ref, ), {, compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,]
[), {, compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,, ref, ., node, ,]
[compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,, ref, ., node, ,, UNSAFE_NAMESPACE_WARNING, ,]
[compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,, ref, ., node, ,, UNSAFE_NAMESPACE_WARNING, ,]
[nameObj, ., getFullName, (, ), ), ), ;, }, private, void, warnAboutNamespaceRedefinition, (, Name, nameObj, ,, Ref, ref, ), {]
[nameObj, ., getFullName, (, ), ), ), ;, }, private, void, warnAboutNamespaceRedefinition, (, Name, nameObj, ,, Ref, ref, ), {]
[), ), ), ;, }, private, void, warnAboutNamespaceRedefinition, (, Name, nameObj, ,, Ref, ref, ), {, compiler, ., report, (]
[), ), ), ;, }, private, void, warnAboutNamespaceRedefinition, (, Name, nameObj, ,, Ref, ref, ), {, compiler, ., report, (]
[}, private, void, warnAboutNamespaceRedefinition, (, Name, nameObj, ,, Ref, ref, ), {, compiler, ., report, (, JSError, ., make, (]
[}, private, void, warnAboutNamespaceRedefinition, (, Name, nameObj, ,, Ref, ref, ), {, compiler, ., report, (, JSError, ., make, (]
[nameObj, ,, Ref, ref, ), {, compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,]
[nameObj, ,, Ref, ref, ), {, compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,]
[), {, compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,, ref, ., node, ,]
[compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,, ref, ., node, ,, NAMESPACE_REDEFINED_WARNING, ,]
[compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,, ref, ., node, ,, NAMESPACE_REDEFINED_WARNING, ,]
[getFullName, (, ), ), ), ;, }, private, void, flattenReferencesToCollapsibleDescendantNames, (, Name, n, ,, String, alias, ), {, if, (]
[getFullName, (, ), ), ), ;, }, private, void, flattenReferencesToCollapsibleDescendantNames, (, Name, n, ,, String, alias, ), {, if, (]
[getFullName, (, ), ), ), ;, }, private, void, flattenReferencesToCollapsibleDescendantNames, (, Name, n, ,, String, alias, ), {, if, (]
[), ;, }, private, void, flattenReferencesToCollapsibleDescendantNames, (, Name, n, ,, String, alias, ), {, if, (, n, ., props, ==]
[,, String, alias, ), {, if, (, n, ., props, ==, null, ), return, ;, for, (, Name, p, :]
[,, String, alias, ), {, if, (, n, ., props, ==, null, ), return, ;, for, (, Name, p, :]
[., props, ==, null, ), return, ;, for, (, Name, p, :, n, ., props, ), {, String, propAlias, =]
[==, null, ), return, ;, for, (, Name, p, :, n, ., props, ), {, String, propAlias, =, appendPropForAlias, (]
[), return, ;, for, (, Name, p, :, n, ., props, ), {, String, propAlias, =, appendPropForAlias, (, alias, ,]
[), return, ;, for, (, Name, p, :, n, ., props, ), {, String, propAlias, =, appendPropForAlias, (, alias, ,]
[., props, ), {, String, propAlias, =, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ;, if, (]
[., props, ), {, String, propAlias, =, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ;, if, (]
[appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ;, if, (, p, ., canCollapse, (, ), ), {]
[alias, ,, p, ., getBaseName, (, ), ), ;, if, (, p, ., canCollapse, (, ), ), {, flattenReferencesTo, (]
[p, ., getBaseName, (, ), ), ;, if, (, p, ., canCollapse, (, ), ), {, flattenReferencesTo, (, p, ,]
[if, (, p, ., canCollapse, (, ), ), {, flattenReferencesTo, (, p, ,, propAlias, ), ;, }, else, if, (]
[if, (, p, ., canCollapse, (, ), ), {, flattenReferencesTo, (, p, ,, propAlias, ), ;, }, else, if, (]
[), {, flattenReferencesTo, (, p, ,, propAlias, ), ;, }, else, if, (, p, ., isSimpleStubDeclaration, (, ), ), {]
[flattenReferencesTo, (, p, ,, propAlias, ), ;, }, else, if, (, p, ., isSimpleStubDeclaration, (, ), ), {, flattenSimpleStubDeclaration, (]
[p, ,, propAlias, ), ;, }, else, if, (, p, ., isSimpleStubDeclaration, (, ), ), {, flattenSimpleStubDeclaration, (, p, ,]
[;, }, else, if, (, p, ., isSimpleStubDeclaration, (, ), ), {, flattenSimpleStubDeclaration, (, p, ,, propAlias, ), ;, }]
[else, if, (, p, ., isSimpleStubDeclaration, (, ), ), {, flattenSimpleStubDeclaration, (, p, ,, propAlias, ), ;, }, flattenReferencesToCollapsibleDescendantNames, (]
[(, p, ., isSimpleStubDeclaration, (, ), ), {, flattenSimpleStubDeclaration, (, p, ,, propAlias, ), ;, }, flattenReferencesToCollapsibleDescendantNames, (, p, ,]
[,, propAlias, ), ;, }, }, private, void, flattenSimpleStubDeclaration, (, Name, name, ,, String, alias, ), {, Ref, ref, =]
[,, propAlias, ), ;, }, }, private, void, flattenSimpleStubDeclaration, (, Name, name, ,, String, alias, ), {, Ref, ref, =]
[}, }, private, void, flattenSimpleStubDeclaration, (, Name, name, ,, String, alias, ), {, Ref, ref, =, Iterables, ., getOnlyElement, (]
[}, }, private, void, flattenSimpleStubDeclaration, (, Name, name, ,, String, alias, ), {, Ref, ref, =, Iterables, ., getOnlyElement, (]
[alias, ), {, Ref, ref, =, Iterables, ., getOnlyElement, (, name, ., getRefs, (, ), ), ;, Node, nameNode, =]
[alias, ), {, Ref, ref, =, Iterables, ., getOnlyElement, (, name, ., getRefs, (, ), ), ;, Node, nameNode, =]
[ref, =, Iterables, ., getOnlyElement, (, name, ., getRefs, (, ), ), ;, Node, nameNode, =, NodeUtil, ., newName, (]
[ref, =, Iterables, ., getOnlyElement, (, name, ., getRefs, (, ), ), ;, Node, nameNode, =, NodeUtil, ., newName, (]
[name, ., getRefs, (, ), ), ;, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,]
[getRefs, (, ), ), ;, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,]
[getRefs, (, ), ), ;, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,]
[;, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, ref, ., node, ,]
[;, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, ref, ., node, ,]
[getCodingConvention, (, ), ,, alias, ,, ref, ., node, ,, name, ., getFullName, (, ), ), ;, Node, varNode, =]
[getCodingConvention, (, ), ,, alias, ,, ref, ., node, ,, name, ., getFullName, (, ), ), ;, Node, varNode, =]
[getCodingConvention, (, ), ,, alias, ,, ref, ., node, ,, name, ., getFullName, (, ), ), ;, Node, varNode, =]
[alias, ,, ref, ., node, ,, name, ., getFullName, (, ), ), ;, Node, varNode, =, IR, ., var, (]
[,, name, ., getFullName, (, ), ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ., copyInformationFrom, (]
[getFullName, (, ), ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ., copyInformationFrom, (, nameNode, ), ;]
[getFullName, (, ), ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ., copyInformationFrom, (, nameNode, ), ;]
[;, Node, varNode, =, IR, ., var, (, nameNode, ), ., copyInformationFrom, (, nameNode, ), ;, Preconditions, ., checkState, (]
[;, Node, varNode, =, IR, ., var, (, nameNode, ), ., copyInformationFrom, (, nameNode, ), ;, Preconditions, ., checkState, (]
[;, Node, varNode, =, IR, ., var, (, nameNode, ), ., copyInformationFrom, (, nameNode, ), ;, Preconditions, ., checkState, (]
[;, Node, varNode, =, IR, ., var, (, nameNode, ), ., copyInformationFrom, (, nameNode, ), ;, Preconditions, ., checkState, (]
[Preconditions, ., checkState, (, ref, ., node, ., getParent, (, ), ., isExprResult, (, ), ), ;, Node, parent, =]
[Preconditions, ., checkState, (, ref, ., node, ., getParent, (, ), ., isExprResult, (, ), ), ;, Node, parent, =]
[Preconditions, ., checkState, (, ref, ., node, ., getParent, (, ), ., isExprResult, (, ), ), ;, Node, parent, =]
[., isExprResult, (, ), ), ;, Node, parent, =, ref, ., node, ., getParent, (, ), ;, Node, gramps, =]
[., isExprResult, (, ), ), ;, Node, parent, =, ref, ., node, ., getParent, (, ), ;, Node, gramps, =]
[Node, parent, =, ref, ., node, ., getParent, (, ), ;, Node, gramps, =, parent, ., getParent, (, ), ;]
[Node, parent, =, ref, ., node, ., getParent, (, ), ;, Node, gramps, =, parent, ., getParent, (, ), ;]
[., node, ., getParent, (, ), ;, Node, gramps, =, parent, ., getParent, (, ), ;, gramps, ., replaceChild, (]
[., getParent, (, ), ;, Node, gramps, =, parent, ., getParent, (, ), ;, gramps, ., replaceChild, (, parent, ,]
[), ;, Node, gramps, =, parent, ., getParent, (, ), ;, gramps, ., replaceChild, (, parent, ,, varNode, ), ;]
[), ;, Node, gramps, =, parent, ., getParent, (, ), ;, gramps, ., replaceChild, (, parent, ,, varNode, ), ;]
[., reportCodeChange, (, ), ;, }, private, void, flattenReferencesTo, (, Name, n, ,, String, alias, ), {, String, originalName, =]
[., reportCodeChange, (, ), ;, }, private, void, flattenReferencesTo, (, Name, n, ,, String, alias, ), {, String, originalName, =]
[n, ,, String, alias, ), {, String, originalName, =, n, ., getFullName, (, ), ;, for, (, Ref, r, :]
[n, ,, String, alias, ), {, String, originalName, =, n, ., getFullName, (, ), ;, for, (, Ref, r, :]
[n, ., getFullName, (, ), ;, for, (, Ref, r, :, n, ., getRefs, (, ), ), {, if, (]
[n, ., getFullName, (, ), ;, for, (, Ref, r, :, n, ., getRefs, (, ), ), {, if, (]
[getFullName, (, ), ;, for, (, Ref, r, :, n, ., getRefs, (, ), ), {, if, (, r, ==]
[getFullName, (, ), ;, for, (, Ref, r, :, n, ., getRefs, (, ), ), {, if, (, r, ==]
[), ), {, if, (, r, ==, n, ., getDeclaration, (, ), ), {, continue, ;, }, Node, rParent, =]
[), ), {, if, (, r, ==, n, ., getDeclaration, (, ), ), {, continue, ;, }, Node, rParent, =]
[), ), {, if, (, r, ==, n, ., getDeclaration, (, ), ), {, continue, ;, }, Node, rParent, =]
[(, ), ), {, continue, ;, }, Node, rParent, =, r, ., node, ., getParent, (, ), ;, if, (]
[(, ), ), {, continue, ;, }, Node, rParent, =, r, ., node, ., getParent, (, ), ;, if, (]
[), ), {, continue, ;, }, Node, rParent, =, r, ., node, ., getParent, (, ), ;, if, (, !]
[), ), {, continue, ;, }, Node, rParent, =, r, ., node, ., getParent, (, ), ;, if, (, !]
[;, }, Node, rParent, =, r, ., node, ., getParent, (, ), ;, if, (, !, NodeUtil, ., isObjectLitKey, (]
[;, }, Node, rParent, =, r, ., node, ., getParent, (, ), ;, if, (, !, NodeUtil, ., isObjectLitKey, (]
[=, r, ., node, ., getParent, (, ), ;, if, (, !, NodeUtil, ., isObjectLitKey, (, r, ., node, ,]
[node, ., getParent, (, ), ;, if, (, !, NodeUtil, ., isObjectLitKey, (, r, ., node, ,, rParent, ), &&]
[., getParent, (, ), ;, if, (, !, NodeUtil, ., isObjectLitKey, (, r, ., node, ,, rParent, ), &&, (]
[., getParent, (, ), ;, if, (, !, NodeUtil, ., isObjectLitKey, (, r, ., node, ,, rParent, ), &&, (]
[., getParent, (, ), ;, if, (, !, NodeUtil, ., isObjectLitKey, (, r, ., node, ,, rParent, ), &&, (]
[., getParent, (, ), ;, if, (, !, NodeUtil, ., isObjectLitKey, (, r, ., node, ,, rParent, ), &&, (]
[(, !, NodeUtil, ., isObjectLitKey, (, r, ., node, ,, rParent, ), &&, (, r, ., getTwin, (, ), ==]
[NodeUtil, ., isObjectLitKey, (, r, ., node, ,, rParent, ), &&, (, r, ., getTwin, (, ), ==, null, ||]
[NodeUtil, ., isObjectLitKey, (, r, ., node, ,, rParent, ), &&, (, r, ., getTwin, (, ), ==, null, ||]
[rParent, ), &&, (, r, ., getTwin, (, ), ==, null, ||, r, ., isSet, (, ), ), ), {]
[&&, (, r, ., getTwin, (, ), ==, null, ||, r, ., isSet, (, ), ), ), {, flattenNameRef, (]
[r, ., getTwin, (, ), ==, null, ||, r, ., isSet, (, ), ), ), {, flattenNameRef, (, alias, ,]
[r, ., getTwin, (, ), ==, null, ||, r, ., isSet, (, ), ), ), {, flattenNameRef, (, alias, ,]
[), ==, null, ||, r, ., isSet, (, ), ), ), {, flattenNameRef, (, alias, ,, r, ., node, ,]
[null, ||, r, ., isSet, (, ), ), ), {, flattenNameRef, (, alias, ,, r, ., node, ,, rParent, ,]
[), ), {, flattenNameRef, (, alias, ,, r, ., node, ,, rParent, ,, originalName, ), ;, }, }, if, (]
[), ), {, flattenNameRef, (, alias, ,, r, ., node, ,, rParent, ,, originalName, ), ;, }, }, if, (]
[), ), {, flattenNameRef, (, alias, ,, r, ., node, ,, rParent, ,, originalName, ), ;, }, }, if, (]
[(, alias, ,, r, ., node, ,, rParent, ,, originalName, ), ;, }, }, if, (, n, ., props, !=]
[,, originalName, ), ;, }, }, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :]
[,, originalName, ), ;, }, }, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :]
[}, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :, n, ., props, ), {]
[(, n, ., props, !=, null, ), {, for, (, Name, p, :, n, ., props, ), {, flattenPrefixes, (]
[., props, !=, null, ), {, for, (, Name, p, :, n, ., props, ), {, flattenPrefixes, (, alias, ,]
[!=, null, ), {, for, (, Name, p, :, n, ., props, ), {, flattenPrefixes, (, alias, ,, p, ,]
[}, }, }, private, void, flattenPrefixes, (, String, alias, ,, Name, n, ,, int, depth, ), {, String, originalName, =]
[}, }, }, private, void, flattenPrefixes, (, String, alias, ,, Name, n, ,, int, depth, ), {, String, originalName, =]
[,, Name, n, ,, int, depth, ), {, String, originalName, =, n, ., getFullName, (, ), ;, Ref, decl, =]
[,, Name, n, ,, int, depth, ), {, String, originalName, =, n, ., getFullName, (, ), ;, Ref, decl, =]
[String, originalName, =, n, ., getFullName, (, ), ;, Ref, decl, =, n, ., getDeclaration, (, ), ;, if, (]
[String, originalName, =, n, ., getFullName, (, ), ;, Ref, decl, =, n, ., getDeclaration, (, ), ;, if, (]
[String, originalName, =, n, ., getFullName, (, ), ;, Ref, decl, =, n, ., getDeclaration, (, ), ;, if, (]
[String, originalName, =, n, ., getFullName, (, ), ;, Ref, decl, =, n, ., getDeclaration, (, ), ;, if, (]
[=, n, ., getFullName, (, ), ;, Ref, decl, =, n, ., getDeclaration, (, ), ;, if, (, decl, !=]
[., getFullName, (, ), ;, Ref, decl, =, n, ., getDeclaration, (, ), ;, if, (, decl, !=, null, &&]
[., getFullName, (, ), ;, Ref, decl, =, n, ., getDeclaration, (, ), ;, if, (, decl, !=, null, &&]
[., getFullName, (, ), ;, Ref, decl, =, n, ., getDeclaration, (, ), ;, if, (, decl, !=, null, &&]
[;, Ref, decl, =, n, ., getDeclaration, (, ), ;, if, (, decl, !=, null, &&, decl, ., node, !=]
[decl, =, n, ., getDeclaration, (, ), ;, if, (, decl, !=, null, &&, decl, ., node, !=, null, &&]
[decl, =, n, ., getDeclaration, (, ), ;, if, (, decl, !=, null, &&, decl, ., node, !=, null, &&]
[decl, =, n, ., getDeclaration, (, ), ;, if, (, decl, !=, null, &&, decl, ., node, !=, null, &&]
[(, decl, !=, null, &&, decl, ., node, !=, null, &&, decl, ., node, ., isGetProp, (, ), ), {]
[!=, null, &&, decl, ., node, !=, null, &&, decl, ., node, ., isGetProp, (, ), ), {, flattenNameRefAtDepth, (]
[&&, decl, ., node, !=, null, &&, decl, ., node, ., isGetProp, (, ), ), {, flattenNameRefAtDepth, (, alias, ,]
[&&, decl, ., node, !=, null, &&, decl, ., node, ., isGetProp, (, ), ), {, flattenNameRefAtDepth, (, alias, ,]
[!=, null, &&, decl, ., node, ., isGetProp, (, ), ), {, flattenNameRefAtDepth, (, alias, ,, decl, ., node, ,]
[&&, decl, ., node, ., isGetProp, (, ), ), {, flattenNameRefAtDepth, (, alias, ,, decl, ., node, ,, depth, ,]
[{, flattenNameRefAtDepth, (, alias, ,, decl, ., node, ,, depth, ,, originalName, ), ;, }, for, (, Ref, r, :]
[{, flattenNameRefAtDepth, (, alias, ,, decl, ., node, ,, depth, ,, originalName, ), ;, }, for, (, Ref, r, :]
[depth, ,, originalName, ), ;, }, for, (, Ref, r, :, n, ., getRefs, (, ), ), {, if, (]
[depth, ,, originalName, ), ;, }, for, (, Ref, r, :, n, ., getRefs, (, ), ), {, if, (]
[originalName, ), ;, }, for, (, Ref, r, :, n, ., getRefs, (, ), ), {, if, (, r, ==]
[:, n, ., getRefs, (, ), ), {, if, (, r, ==, decl, ), {, continue, ;, }, if, (]
[:, n, ., getRefs, (, ), ), {, if, (, r, ==, decl, ), {, continue, ;, }, if, (]
[:, n, ., getRefs, (, ), ), {, if, (, r, ==, decl, ), {, continue, ;, }, if, (]
[:, n, ., getRefs, (, ), ), {, if, (, r, ==, decl, ), {, continue, ;, }, if, (]
[), {, if, (, r, ==, decl, ), {, continue, ;, }, if, (, r, ., getTwin, (, ), ==]
[if, (, r, ==, decl, ), {, continue, ;, }, if, (, r, ., getTwin, (, ), ==, null, ||]
[if, (, r, ==, decl, ), {, continue, ;, }, if, (, r, ., getTwin, (, ), ==, null, ||]
[continue, ;, }, if, (, r, ., getTwin, (, ), ==, null, ||, r, ., isSet, (, ), ), {]
[}, if, (, r, ., getTwin, (, ), ==, null, ||, r, ., isSet, (, ), ), {, flattenNameRefAtDepth, (]
[(, r, ., getTwin, (, ), ==, null, ||, r, ., isSet, (, ), ), {, flattenNameRefAtDepth, (, alias, ,]
[(, r, ., getTwin, (, ), ==, null, ||, r, ., isSet, (, ), ), {, flattenNameRefAtDepth, (, alias, ,]
[(, ), ==, null, ||, r, ., isSet, (, ), ), {, flattenNameRefAtDepth, (, alias, ,, r, ., node, ,]
[==, null, ||, r, ., isSet, (, ), ), {, flattenNameRefAtDepth, (, alias, ,, r, ., node, ,, depth, ,]
[), ), {, flattenNameRefAtDepth, (, alias, ,, r, ., node, ,, depth, ,, originalName, ), ;, }, }, if, (]
[), ), {, flattenNameRefAtDepth, (, alias, ,, r, ., node, ,, depth, ,, originalName, ), ;, }, }, if, (]
[), ), {, flattenNameRefAtDepth, (, alias, ,, r, ., node, ,, depth, ,, originalName, ), ;, }, }, if, (]
[(, alias, ,, r, ., node, ,, depth, ,, originalName, ), ;, }, }, if, (, n, ., props, !=]
[,, originalName, ), ;, }, }, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :]
[,, originalName, ), ;, }, }, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :]
[}, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :, n, ., props, ), {]
[(, n, ., props, !=, null, ), {, for, (, Name, p, :, n, ., props, ), {, flattenPrefixes, (]
[., props, !=, null, ), {, for, (, Name, p, :, n, ., props, ), {, flattenPrefixes, (, alias, ,]
[!=, null, ), {, for, (, Name, p, :, n, ., props, ), {, flattenPrefixes, (, alias, ,, p, ,]
[!=, null, ), {, for, (, Name, p, :, n, ., props, ), {, flattenPrefixes, (, alias, ,, p, ,]
[), {, for, (, Name, p, :, n, ., props, ), {, flattenPrefixes, (, alias, ,, p, ,, depth, +]
[private, void, flattenNameRefAtDepth, (, String, alias, ,, Node, n, ,, int, depth, ,, String, originalName, ), {, int, nType, =]
[private, void, flattenNameRefAtDepth, (, String, alias, ,, Node, n, ,, int, depth, ,, String, originalName, ), {, int, nType, =]
[,, int, depth, ,, String, originalName, ), {, int, nType, =, n, ., getType, (, ), ;, boolean, isQName, =]
[,, int, depth, ,, String, originalName, ), {, int, nType, =, n, ., getType, (, ), ;, boolean, isQName, =]
[,, int, depth, ,, String, originalName, ), {, int, nType, =, n, ., getType, (, ), ;, boolean, isQName, =]
[depth, ,, String, originalName, ), {, int, nType, =, n, ., getType, (, ), ;, boolean, isQName, =, nType, ==]
[depth, ,, String, originalName, ), {, int, nType, =, n, ., getType, (, ), ;, boolean, isQName, =, nType, ==]
[), {, int, nType, =, n, ., getType, (, ), ;, boolean, isQName, =, nType, ==, Token, ., NAME, ||]
[), {, int, nType, =, n, ., getType, (, ), ;, boolean, isQName, =, nType, ==, Token, ., NAME, ||]
[int, nType, =, n, ., getType, (, ), ;, boolean, isQName, =, nType, ==, Token, ., NAME, ||, nType, ==]
[int, nType, =, n, ., getType, (, ), ;, boolean, isQName, =, nType, ==, Token, ., NAME, ||, nType, ==]
[), ;, boolean, isQName, =, nType, ==, Token, ., NAME, ||, nType, ==, Token, ., GETPROP, ;, boolean, isObjKey, =]
[), ;, boolean, isQName, =, nType, ==, Token, ., NAME, ||, nType, ==, Token, ., GETPROP, ;, boolean, isObjKey, =]
[=, nType, ==, Token, ., NAME, ||, nType, ==, Token, ., GETPROP, ;, boolean, isObjKey, =, NodeUtil, ., isObjectLitKey, (]
[==, Token, ., NAME, ||, nType, ==, Token, ., GETPROP, ;, boolean, isObjKey, =, NodeUtil, ., isObjectLitKey, (, n, ,]
[==, Token, ., NAME, ||, nType, ==, Token, ., GETPROP, ;, boolean, isObjKey, =, NodeUtil, ., isObjectLitKey, (, n, ,]
[Token, ., GETPROP, ;, boolean, isObjKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, n, ., getParent, (, ), ), ;]
[Token, ., GETPROP, ;, boolean, isObjKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, n, ., getParent, (, ), ), ;]
[boolean, isObjKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, n, ., getParent, (, ), ), ;, Preconditions, ., checkState, (]
[boolean, isObjKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, n, ., getParent, (, ), ), ;, Preconditions, ., checkState, (]
[=, NodeUtil, ., isObjectLitKey, (, n, ,, n, ., getParent, (, ), ), ;, Preconditions, ., checkState, (, isObjKey, ||]
[n, ,, n, ., getParent, (, ), ), ;, Preconditions, ., checkState, (, isObjKey, ||, isQName, ), ;, if, (]
[;, Preconditions, ., checkState, (, isObjKey, ||, isQName, ), ;, if, (, isQName, ), {, for, (, int, i, =]
[., checkState, (, isObjKey, ||, isQName, ), ;, if, (, isQName, ), {, for, (, int, i, =, 1, ;]
[., checkState, (, isObjKey, ||, isQName, ), ;, if, (, isQName, ), {, for, (, int, i, =, 1, ;]
[., checkState, (, isObjKey, ||, isQName, ), ;, if, (, isQName, ), {, for, (, int, i, =, 1, ;]
[(, isObjKey, ||, isQName, ), ;, if, (, isQName, ), {, for, (, int, i, =, 1, ;, i, <]
[||, isQName, ), ;, if, (, isQName, ), {, for, (, int, i, =, 1, ;, i, <, depth, &&]
[||, isQName, ), ;, if, (, isQName, ), {, for, (, int, i, =, 1, ;, i, <, depth, &&]
[isQName, ), {, for, (, int, i, =, 1, ;, i, <, depth, &&, n, ., hasChildren, (, ), ;]
[isQName, ), {, for, (, int, i, =, 1, ;, i, <, depth, &&, n, ., hasChildren, (, ), ;]
[(, int, i, =, 1, ;, i, <, depth, &&, n, ., hasChildren, (, ), ;, i, ++, ), {]
[i, =, 1, ;, i, <, depth, &&, n, ., hasChildren, (, ), ;, i, ++, ), {, n, =]
[i, =, 1, ;, i, <, depth, &&, n, ., hasChildren, (, ), ;, i, ++, ), {, n, =]
[., hasChildren, (, ), ;, i, ++, ), {, n, =, n, ., getFirstChild, (, ), ;, }, if, (]
[., hasChildren, (, ), ;, i, ++, ), {, n, =, n, ., getFirstChild, (, ), ;, }, if, (]
[), {, n, =, n, ., getFirstChild, (, ), ;, }, if, (, n, ., hasChildren, (, ), ), {]
[n, =, n, ., getFirstChild, (, ), ;, }, if, (, n, ., hasChildren, (, ), ), {, flattenNameRef, (]
[n, ., getFirstChild, (, ), ;, }, if, (, n, ., hasChildren, (, ), ), {, flattenNameRef, (, alias, ,]
[n, ., getFirstChild, (, ), ;, }, if, (, n, ., hasChildren, (, ), ), {, flattenNameRef, (, alias, ,]
[}, if, (, n, ., hasChildren, (, ), ), {, flattenNameRef, (, alias, ,, n, ., getFirstChild, (, ), ,]
[(, n, ., hasChildren, (, ), ), {, flattenNameRef, (, alias, ,, n, ., getFirstChild, (, ), ,, n, ,]
[private, void, flattenNameRef, (, String, alias, ,, Node, n, ,, Node, parent, ,, String, originalName, ), {, Node, ref, =]
[private, void, flattenNameRef, (, String, alias, ,, Node, n, ,, Node, parent, ,, String, originalName, ), {, Node, ref, =]
[String, alias, ,, Node, n, ,, Node, parent, ,, String, originalName, ), {, Node, ref, =, NodeUtil, ., newName, (]
[String, alias, ,, Node, n, ,, Node, parent, ,, String, originalName, ), {, Node, ref, =, NodeUtil, ., newName, (]
[Node, parent, ,, String, originalName, ), {, Node, ref, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,]
[,, String, originalName, ), {, Node, ref, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,]
[originalName, ), {, Node, ref, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, n, ,]
[Node, ref, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, n, ,, originalName, ), ;]
[Node, ref, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, n, ,, originalName, ), ;]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, n, ,, originalName, ), ;, NodeUtil, ., copyNameAnnotations, (]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, n, ,, originalName, ), ;, NodeUtil, ., copyNameAnnotations, (]
[(, ), ,, alias, ,, n, ,, originalName, ), ;, NodeUtil, ., copyNameAnnotations, (, n, ., getLastChild, (, ), ,]
[n, ,, originalName, ), ;, NodeUtil, ., copyNameAnnotations, (, n, ., getLastChild, (, ), ,, ref, ), ;, if, (]
[n, ,, originalName, ), ;, NodeUtil, ., copyNameAnnotations, (, n, ., getLastChild, (, ), ,, ref, ), ;, if, (]
[n, ,, originalName, ), ;, NodeUtil, ., copyNameAnnotations, (, n, ., getLastChild, (, ), ,, ref, ), ;, if, (]
[., copyNameAnnotations, (, n, ., getLastChild, (, ), ,, ref, ), ;, if, (, parent, ., isCall, (, ), &&]
[., copyNameAnnotations, (, n, ., getLastChild, (, ), ,, ref, ), ;, if, (, parent, ., isCall, (, ), &&]
[(, n, ., getLastChild, (, ), ,, ref, ), ;, if, (, parent, ., isCall, (, ), &&, n, ==]
[(, n, ., getLastChild, (, ), ,, ref, ), ;, if, (, parent, ., isCall, (, ), &&, n, ==]
[ref, ), ;, if, (, parent, ., isCall, (, ), &&, n, ==, parent, ., getFirstChild, (, ), ), {]
[ref, ), ;, if, (, parent, ., isCall, (, ), &&, n, ==, parent, ., getFirstChild, (, ), ), {]
[(, parent, ., isCall, (, ), &&, n, ==, parent, ., getFirstChild, (, ), ), {, parent, ., putBooleanProp, (]
[(, parent, ., isCall, (, ), &&, n, ==, parent, ., getFirstChild, (, ), ), {, parent, ., putBooleanProp, (]
[(, ), &&, n, ==, parent, ., getFirstChild, (, ), ), {, parent, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[getFirstChild, (, ), ), {, parent, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, JSType, type, =]
[getFirstChild, (, ), ), {, parent, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, JSType, type, =]
[(, Node, ., FREE_CALL, ,, true, ), ;, }, JSType, type, =, n, ., getJSType, (, ), ;, if, (]
[(, Node, ., FREE_CALL, ,, true, ), ;, }, JSType, type, =, n, ., getJSType, (, ), ;, if, (]
[., FREE_CALL, ,, true, ), ;, }, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, !=]
[true, ), ;, }, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, !=, null, ), {]
[true, ), ;, }, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, !=, null, ), {]
[JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, !=, null, ), {, ref, ., setJSType, (]
[., getJSType, (, ), ;, if, (, type, !=, null, ), {, ref, ., setJSType, (, type, ), ;, }]
[., getJSType, (, ), ;, if, (, type, !=, null, ), {, ref, ., setJSType, (, type, ), ;, }]
[;, if, (, type, !=, null, ), {, ref, ., setJSType, (, type, ), ;, }, parent, ., replaceChild, (]
[(, type, !=, null, ), {, ref, ., setJSType, (, type, ), ;, }, parent, ., replaceChild, (, n, ,]
[null, ), {, ref, ., setJSType, (, type, ), ;, }, parent, ., replaceChild, (, n, ,, ref, ), ;]
[null, ), {, ref, ., setJSType, (, type, ), ;, }, parent, ., replaceChild, (, n, ,, ref, ), ;]
[., reportCodeChange, (, ), ;, }, private, void, collapseDeclarationOfNameAndDescendants, (, Name, n, ,, String, alias, ), {, boolean, canCollapseChildNames, =]
[., reportCodeChange, (, ), ;, }, private, void, collapseDeclarationOfNameAndDescendants, (, Name, n, ,, String, alias, ), {, boolean, canCollapseChildNames, =]
[collapseDeclarationOfNameAndDescendants, (, Name, n, ,, String, alias, ), {, boolean, canCollapseChildNames, =, n, ., canCollapseUnannotatedChildNames, (, ), ;, if, (]
[collapseDeclarationOfNameAndDescendants, (, Name, n, ,, String, alias, ), {, boolean, canCollapseChildNames, =, n, ., canCollapseUnannotatedChildNames, (, ), ;, if, (]
[), {, boolean, canCollapseChildNames, =, n, ., canCollapseUnannotatedChildNames, (, ), ;, if, (, n, ., canCollapse, (, ), ), {]
[boolean, canCollapseChildNames, =, n, ., canCollapseUnannotatedChildNames, (, ), ;, if, (, n, ., canCollapse, (, ), ), {, updateObjLitOrFunctionDeclaration, (]
[=, n, ., canCollapseUnannotatedChildNames, (, ), ;, if, (, n, ., canCollapse, (, ), ), {, updateObjLitOrFunctionDeclaration, (, n, ,]
[., canCollapseUnannotatedChildNames, (, ), ;, if, (, n, ., canCollapse, (, ), ), {, updateObjLitOrFunctionDeclaration, (, n, ,, alias, ,]
[(, n, ., canCollapse, (, ), ), {, updateObjLitOrFunctionDeclaration, (, n, ,, alias, ,, canCollapseChildNames, ), ;, }, if, (]
[(, n, ., canCollapse, (, ), ), {, updateObjLitOrFunctionDeclaration, (, n, ,, alias, ,, canCollapseChildNames, ), ;, }, if, (]
[(, n, ., canCollapse, (, ), ), {, updateObjLitOrFunctionDeclaration, (, n, ,, alias, ,, canCollapseChildNames, ), ;, }, if, (]
[(, ), ), {, updateObjLitOrFunctionDeclaration, (, n, ,, alias, ,, canCollapseChildNames, ), ;, }, if, (, n, ., props, !=]
[alias, ,, canCollapseChildNames, ), ;, }, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :]
[alias, ,, canCollapseChildNames, ), ;, }, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :]
[}, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :, n, ., props, ), {]
[(, n, ., props, !=, null, ), {, for, (, Name, p, :, n, ., props, ), {, collapseDeclarationOfNameAndDescendants, (]
[., props, !=, null, ), {, for, (, Name, p, :, n, ., props, ), {, collapseDeclarationOfNameAndDescendants, (, p, ,]
[!=, null, ), {, for, (, Name, p, :, n, ., props, ), {, collapseDeclarationOfNameAndDescendants, (, p, ,, appendPropForAlias, (]
[), {, for, (, Name, p, :, n, ., props, ), {, collapseDeclarationOfNameAndDescendants, (, p, ,, appendPropForAlias, (, alias, ,]
[), {, for, (, Name, p, :, n, ., props, ), {, collapseDeclarationOfNameAndDescendants, (, p, ,, appendPropForAlias, (, alias, ,]
[), {, collapseDeclarationOfNameAndDescendants, (, p, ,, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ), ;, if, (]
[), {, collapseDeclarationOfNameAndDescendants, (, p, ,, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ), ;, if, (]
[), {, collapseDeclarationOfNameAndDescendants, (, p, ,, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ), ;, if, (]
[), {, collapseDeclarationOfNameAndDescendants, (, p, ,, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ), ;, if, (]
[), {, collapseDeclarationOfNameAndDescendants, (, p, ,, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ), ;, if, (]
[), {, collapseDeclarationOfNameAndDescendants, (, p, ,, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ), ;, if, (]
[), {, collapseDeclarationOfNameAndDescendants, (, p, ,, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ), ;, if, (]
[{, collapseDeclarationOfNameAndDescendants, (, p, ,, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ), ;, if, (, !]
[{, collapseDeclarationOfNameAndDescendants, (, p, ,, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ), ;, if, (, !]
[,, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ), ;, if, (, !, p, ., inExterns, &&]
[(, alias, ,, p, ., getBaseName, (, ), ), ), ;, if, (, !, p, ., inExterns, &&, canCollapseChildNames, &&]
[(, alias, ,, p, ., getBaseName, (, ), ), ), ;, if, (, !, p, ., inExterns, &&, canCollapseChildNames, &&]
[(, alias, ,, p, ., getBaseName, (, ), ), ), ;, if, (, !, p, ., inExterns, &&, canCollapseChildNames, &&]
[(, ), ), ), ;, if, (, !, p, ., inExterns, &&, canCollapseChildNames, &&, p, ., getDeclaration, (, ), !=]
[), ), ;, if, (, !, p, ., inExterns, &&, canCollapseChildNames, &&, p, ., getDeclaration, (, ), !=, null, &&]
[), ), ;, if, (, !, p, ., inExterns, &&, canCollapseChildNames, &&, p, ., getDeclaration, (, ), !=, null, &&]
[p, ., inExterns, &&, canCollapseChildNames, &&, p, ., getDeclaration, (, ), !=, null, &&, p, ., canCollapse, (, ), &&]
[p, ., inExterns, &&, canCollapseChildNames, &&, p, ., getDeclaration, (, ), !=, null, &&, p, ., canCollapse, (, ), &&]
[p, ., inExterns, &&, canCollapseChildNames, &&, p, ., getDeclaration, (, ), !=, null, &&, p, ., canCollapse, (, ), &&]
[p, ., inExterns, &&, canCollapseChildNames, &&, p, ., getDeclaration, (, ), !=, null, &&, p, ., canCollapse, (, ), &&]
[getDeclaration, (, ), !=, null, &&, p, ., canCollapse, (, ), &&, p, ., getDeclaration, (, ), ., node, !=]
[), !=, null, &&, p, ., canCollapse, (, ), &&, p, ., getDeclaration, (, ), ., node, !=, null, &&]
[), !=, null, &&, p, ., canCollapse, (, ), &&, p, ., getDeclaration, (, ), ., node, !=, null, &&]
[), !=, null, &&, p, ., canCollapse, (, ), &&, p, ., getDeclaration, (, ), ., node, !=, null, &&]
[), !=, null, &&, p, ., canCollapse, (, ), &&, p, ., getDeclaration, (, ), ., node, !=, null, &&]
[), !=, null, &&, p, ., canCollapse, (, ), &&, p, ., getDeclaration, (, ), ., node, !=, null, &&]
[getDeclaration, (, ), ., node, !=, null, &&, p, ., getDeclaration, (, ), ., node, ., getParent, (, ), !=]
[), ., node, !=, null, &&, p, ., getDeclaration, (, ), ., node, ., getParent, (, ), !=, null, &&]
[), ., node, !=, null, &&, p, ., getDeclaration, (, ), ., node, ., getParent, (, ), !=, null, &&]
[), ., node, !=, null, &&, p, ., getDeclaration, (, ), ., node, ., getParent, (, ), !=, null, &&]
[), ., node, !=, null, &&, p, ., getDeclaration, (, ), ., node, ., getParent, (, ), !=, null, &&]
[), ., node, !=, null, &&, p, ., getDeclaration, (, ), ., node, ., getParent, (, ), !=, null, &&]
[!=, null, &&, p, ., getDeclaration, (, ), ., node, ., getParent, (, ), ., isAssign, (, ), ), {]
[&&, p, ., getDeclaration, (, ), ., node, ., getParent, (, ), ., isAssign, (, ), ), {, updateSimpleDeclaration, (]
[., getDeclaration, (, ), ., node, ., getParent, (, ), ., isAssign, (, ), ), {, updateSimpleDeclaration, (, appendPropForAlias, (]
[(, ), ., node, ., getParent, (, ), ., isAssign, (, ), ), {, updateSimpleDeclaration, (, appendPropForAlias, (, alias, ,]
[(, ), ., node, ., getParent, (, ), ., isAssign, (, ), ), {, updateSimpleDeclaration, (, appendPropForAlias, (, alias, ,]
[), ., isAssign, (, ), ), {, updateSimpleDeclaration, (, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ,]
[isAssign, (, ), ), {, updateSimpleDeclaration, (, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ,, p, ,]
[isAssign, (, ), ), {, updateSimpleDeclaration, (, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ,, p, ,]
[}, }, }, private, void, updateSimpleDeclaration, (, String, alias, ,, Name, refName, ,, Ref, ref, ), {, Node, rvalue, =]
[}, }, }, private, void, updateSimpleDeclaration, (, String, alias, ,, Name, refName, ,, Ref, ref, ), {, Node, rvalue, =]
[}, }, }, private, void, updateSimpleDeclaration, (, String, alias, ,, Name, refName, ,, Ref, ref, ), {, Node, rvalue, =]
[refName, ,, Ref, ref, ), {, Node, rvalue, =, ref, ., node, ., getNext, (, ), ;, Node, parent, =]
[refName, ,, Ref, ref, ), {, Node, rvalue, =, ref, ., node, ., getNext, (, ), ;, Node, parent, =]
[refName, ,, Ref, ref, ), {, Node, rvalue, =, ref, ., node, ., getNext, (, ), ;, Node, parent, =]
[node, ., getNext, (, ), ;, Node, parent, =, ref, ., node, ., getParent, (, ), ;, Node, gramps, =]
[node, ., getNext, (, ), ;, Node, parent, =, ref, ., node, ., getParent, (, ), ;, Node, gramps, =]
[ref, ., node, ., getParent, (, ), ;, Node, gramps, =, parent, ., getParent, (, ), ;, Node, greatGramps, =]
[ref, ., node, ., getParent, (, ), ;, Node, gramps, =, parent, ., getParent, (, ), ;, Node, greatGramps, =]
[gramps, =, parent, ., getParent, (, ), ;, Node, greatGramps, =, gramps, ., getParent, (, ), ;, Node, greatGreatGramps, =]
[gramps, =, parent, ., getParent, (, ), ;, Node, greatGramps, =, gramps, ., getParent, (, ), ;, Node, greatGreatGramps, =]
[Node, greatGramps, =, gramps, ., getParent, (, ), ;, Node, greatGreatGramps, =, greatGramps, ., getParent, (, ), ;, if, (]
[Node, greatGramps, =, gramps, ., getParent, (, ), ;, Node, greatGreatGramps, =, greatGramps, ., getParent, (, ), ;, if, (]
[Node, greatGramps, =, gramps, ., getParent, (, ), ;, Node, greatGreatGramps, =, greatGramps, ., getParent, (, ), ;, if, (]
[=, gramps, ., getParent, (, ), ;, Node, greatGreatGramps, =, greatGramps, ., getParent, (, ), ;, if, (, rvalue, !=]
[., getParent, (, ), ;, Node, greatGreatGramps, =, greatGramps, ., getParent, (, ), ;, if, (, rvalue, !=, null, &&]
[., getParent, (, ), ;, Node, greatGreatGramps, =, greatGramps, ., getParent, (, ), ;, if, (, rvalue, !=, null, &&]
[=, greatGramps, ., getParent, (, ), ;, if, (, rvalue, !=, null, &&, rvalue, ., isFunction, (, ), ), {]
[., getParent, (, ), ;, if, (, rvalue, !=, null, &&, rvalue, ., isFunction, (, ), ), {, checkForHosedThisReferences, (]
[(, ), ;, if, (, rvalue, !=, null, &&, rvalue, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, rvalue, ,]
[(, ), ;, if, (, rvalue, !=, null, &&, rvalue, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, rvalue, ,]
[(, rvalue, !=, null, &&, rvalue, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, rvalue, ,, refName, ., docInfo, ,]
[isFunction, (, ), ), {, checkForHosedThisReferences, (, rvalue, ,, refName, ., docInfo, ,, refName, ), ;, }, Node, nameNode, =]
[isFunction, (, ), ), {, checkForHosedThisReferences, (, rvalue, ,, refName, ., docInfo, ,, refName, ), ;, }, Node, nameNode, =]
[{, checkForHosedThisReferences, (, rvalue, ,, refName, ., docInfo, ,, refName, ), ;, }, Node, nameNode, =, NodeUtil, ., newName, (]
[{, checkForHosedThisReferences, (, rvalue, ,, refName, ., docInfo, ,, refName, ), ;, }, Node, nameNode, =, NodeUtil, ., newName, (]
[., docInfo, ,, refName, ), ;, }, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,]
[,, refName, ), ;, }, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,]
[,, refName, ), ;, }, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,]
[nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, gramps, ., getFirstChild, (, ), ,]
[nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, gramps, ., getFirstChild, (, ), ,]
[., getCodingConvention, (, ), ,, alias, ,, gramps, ., getFirstChild, (, ), ,, refName, ., getFullName, (, ), ), ;]
[., getCodingConvention, (, ), ,, alias, ,, gramps, ., getFirstChild, (, ), ,, refName, ., getFullName, (, ), ), ;]
[,, alias, ,, gramps, ., getFirstChild, (, ), ,, refName, ., getFullName, (, ), ), ;, NodeUtil, ., copyNameAnnotations, (]
[,, alias, ,, gramps, ., getFirstChild, (, ), ,, refName, ., getFullName, (, ), ), ;, NodeUtil, ., copyNameAnnotations, (]
[,, alias, ,, gramps, ., getFirstChild, (, ), ,, refName, ., getFullName, (, ), ), ;, NodeUtil, ., copyNameAnnotations, (]
[,, refName, ., getFullName, (, ), ), ;, NodeUtil, ., copyNameAnnotations, (, ref, ., node, ., getLastChild, (, ), ,]
[), ), ;, NodeUtil, ., copyNameAnnotations, (, ref, ., node, ., getLastChild, (, ), ,, nameNode, ), ;, if, (]
[), ), ;, NodeUtil, ., copyNameAnnotations, (, ref, ., node, ., getLastChild, (, ), ,, nameNode, ), ;, if, (]
[ref, ., node, ., getLastChild, (, ), ,, nameNode, ), ;, if, (, gramps, ., isExprResult, (, ), ), {]
[ref, ., node, ., getLastChild, (, ), ,, nameNode, ), ;, if, (, gramps, ., isExprResult, (, ), ), {]
[getLastChild, (, ), ,, nameNode, ), ;, if, (, gramps, ., isExprResult, (, ), ), {, parent, ., removeChild, (]
[,, nameNode, ), ;, if, (, gramps, ., isExprResult, (, ), ), {, parent, ., removeChild, (, rvalue, ), ;]
[,, nameNode, ), ;, if, (, gramps, ., isExprResult, (, ), ), {, parent, ., removeChild, (, rvalue, ), ;]
[if, (, gramps, ., isExprResult, (, ), ), {, parent, ., removeChild, (, rvalue, ), ;, nameNode, ., addChildToFront, (]
[), ), {, parent, ., removeChild, (, rvalue, ), ;, nameNode, ., addChildToFront, (, rvalue, ), ;, Node, varNode, =]
[), ), {, parent, ., removeChild, (, rvalue, ), ;, nameNode, ., addChildToFront, (, rvalue, ), ;, Node, varNode, =]
[., removeChild, (, rvalue, ), ;, nameNode, ., addChildToFront, (, rvalue, ), ;, Node, varNode, =, IR, ., var, (]
[rvalue, ), ;, nameNode, ., addChildToFront, (, rvalue, ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ;]
[rvalue, ), ;, nameNode, ., addChildToFront, (, rvalue, ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ;]
[., addChildToFront, (, rvalue, ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ;, greatGramps, ., replaceChild, (]
[(, rvalue, ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ;, greatGramps, ., replaceChild, (, gramps, ,]
[=, IR, ., var, (, nameNode, ), ;, greatGramps, ., replaceChild, (, gramps, ,, varNode, ), ;, }, else, {]
[=, IR, ., var, (, nameNode, ), ;, greatGramps, ., replaceChild, (, gramps, ,, varNode, ), ;, }, else, {]
[(, nameNode, ), ;, greatGramps, ., replaceChild, (, gramps, ,, varNode, ), ;, }, else, {, Preconditions, ., checkNotNull, (]
[(, nameNode, ), ;, greatGramps, ., replaceChild, (, gramps, ,, varNode, ), ;, }, else, {, Preconditions, ., checkNotNull, (]
[varNode, ), ;, }, else, {, Preconditions, ., checkNotNull, (, ref, ., getTwin, (, ), ), ;, Node, current, =]
[{, Preconditions, ., checkNotNull, (, ref, ., getTwin, (, ), ), ;, Node, current, =, gramps, ;, Node, currentParent, =]
[{, Preconditions, ., checkNotNull, (, ref, ., getTwin, (, ), ), ;, Node, current, =, gramps, ;, Node, currentParent, =]
[), ), ;, Node, current, =, gramps, ;, Node, currentParent, =, gramps, ., getParent, (, ), ;, for, (, ;]
[), ), ;, Node, current, =, gramps, ;, Node, currentParent, =, gramps, ., getParent, (, ), ;, for, (, ;]
[), ;, Node, current, =, gramps, ;, Node, currentParent, =, gramps, ., getParent, (, ), ;, for, (, ;, !]
[), ;, Node, current, =, gramps, ;, Node, currentParent, =, gramps, ., getParent, (, ), ;, for, (, ;, !]
[;, Node, currentParent, =, gramps, ., getParent, (, ), ;, for, (, ;, !, currentParent, ., isScript, (, ), &&]
[Node, currentParent, =, gramps, ., getParent, (, ), ;, for, (, ;, !, currentParent, ., isScript, (, ), &&, !]
[Node, currentParent, =, gramps, ., getParent, (, ), ;, for, (, ;, !, currentParent, ., isScript, (, ), &&, !]
[(, ), ;, for, (, ;, !, currentParent, ., isScript, (, ), &&, !, currentParent, ., isBlock, (, ), ;]
[;, for, (, ;, !, currentParent, ., isScript, (, ), &&, !, currentParent, ., isBlock, (, ), ;, current, =]
[(, ;, !, currentParent, ., isScript, (, ), &&, !, currentParent, ., isBlock, (, ), ;, current, =, currentParent, ,]
[!, currentParent, ., isScript, (, ), &&, !, currentParent, ., isBlock, (, ), ;, current, =, currentParent, ,, currentParent, =]
[!, currentParent, ., isScript, (, ), &&, !, currentParent, ., isBlock, (, ), ;, current, =, currentParent, ,, currentParent, =]
[(, ), ;, current, =, currentParent, ,, currentParent, =, currentParent, ., getParent, (, ), ), {, }, Node, stubVar, =]
[(, ), ;, current, =, currentParent, ,, currentParent, =, currentParent, ., getParent, (, ), ), {, }, Node, stubVar, =]
[(, ), ;, current, =, currentParent, ,, currentParent, =, currentParent, ., getParent, (, ), ), {, }, Node, stubVar, =]
[=, currentParent, ,, currentParent, =, currentParent, ., getParent, (, ), ), {, }, Node, stubVar, =, IR, ., var, (]
[=, currentParent, ,, currentParent, =, currentParent, ., getParent, (, ), ), {, }, Node, stubVar, =, IR, ., var, (]
[), ), {, }, Node, stubVar, =, IR, ., var, (, nameNode, ., cloneTree, (, ), ), ., copyInformationFrom, (]
[}, Node, stubVar, =, IR, ., var, (, nameNode, ., cloneTree, (, ), ), ., copyInformationFrom, (, nameNode, ), ;]
[}, Node, stubVar, =, IR, ., var, (, nameNode, ., cloneTree, (, ), ), ., copyInformationFrom, (, nameNode, ), ;]
[IR, ., var, (, nameNode, ., cloneTree, (, ), ), ., copyInformationFrom, (, nameNode, ), ;, currentParent, ., addChildBefore, (]
[var, (, nameNode, ., cloneTree, (, ), ), ., copyInformationFrom, (, nameNode, ), ;, currentParent, ., addChildBefore, (, stubVar, ,]
[., cloneTree, (, ), ), ., copyInformationFrom, (, nameNode, ), ;, currentParent, ., addChildBefore, (, stubVar, ,, current, ), ;]
[., cloneTree, (, ), ), ., copyInformationFrom, (, nameNode, ), ;, currentParent, ., addChildBefore, (, stubVar, ,, current, ), ;]
[), ., copyInformationFrom, (, nameNode, ), ;, currentParent, ., addChildBefore, (, stubVar, ,, current, ), ;, parent, ., replaceChild, (]
[), ., copyInformationFrom, (, nameNode, ), ;, currentParent, ., addChildBefore, (, stubVar, ,, current, ), ;, parent, ., replaceChild, (]
[nameNode, ), ;, currentParent, ., addChildBefore, (, stubVar, ,, current, ), ;, parent, ., replaceChild, (, ref, ., node, ,]
[., addChildBefore, (, stubVar, ,, current, ), ;, parent, ., replaceChild, (, ref, ., node, ,, nameNode, ), ;, }]
[., addChildBefore, (, stubVar, ,, current, ), ;, parent, ., replaceChild, (, ref, ., node, ,, nameNode, ), ;, }]
[), ;, }, private, void, updateObjLitOrFunctionDeclaration, (, Name, n, ,, String, alias, ,, boolean, canCollapseChildNames, ), {, Ref, decl, =]
[), ;, }, private, void, updateObjLitOrFunctionDeclaration, (, Name, n, ,, String, alias, ,, boolean, canCollapseChildNames, ), {, Ref, decl, =]
[n, ,, String, alias, ,, boolean, canCollapseChildNames, ), {, Ref, decl, =, n, ., getDeclaration, (, ), ;, if, (]
[n, ,, String, alias, ,, boolean, canCollapseChildNames, ), {, Ref, decl, =, n, ., getDeclaration, (, ), ;, if, (]
[String, alias, ,, boolean, canCollapseChildNames, ), {, Ref, decl, =, n, ., getDeclaration, (, ), ;, if, (, decl, ==]
[decl, =, n, ., getDeclaration, (, ), ;, if, (, decl, ==, null, ), {, return, ;, }, if, (]
[decl, =, n, ., getDeclaration, (, ), ;, if, (, decl, ==, null, ), {, return, ;, }, if, (]
[decl, =, n, ., getDeclaration, (, ), ;, if, (, decl, ==, null, ), {, return, ;, }, if, (]
[), ;, if, (, decl, ==, null, ), {, return, ;, }, if, (, decl, ., getTwin, (, ), !=]
[{, return, ;, }, if, (, decl, ., getTwin, (, ), !=, null, ), {, return, ;, }, switch, (]
[{, return, ;, }, if, (, decl, ., getTwin, (, ), !=, null, ), {, return, ;, }, switch, (]
[{, return, ;, }, if, (, decl, ., getTwin, (, ), !=, null, ), {, return, ;, }, switch, (]
[{, return, ;, }, if, (, decl, ., getTwin, (, ), !=, null, ), {, return, ;, }, switch, (]
[{, return, ;, }, switch, (, decl, ., node, ., getParent, (, ), ., getType, (, ), ), {, case]
[{, return, ;, }, switch, (, decl, ., node, ., getParent, (, ), ., getType, (, ), ), {, case]
[switch, (, decl, ., node, ., getParent, (, ), ., getType, (, ), ), {, case, Token, ., ASSIGN, :]
[decl, ., node, ., getParent, (, ), ., getType, (, ), ), {, case, Token, ., ASSIGN, :, updateObjLitOrFunctionDeclarationAtAssignNode, (]
[node, ., getParent, (, ), ., getType, (, ), ), {, case, Token, ., ASSIGN, :, updateObjLitOrFunctionDeclarationAtAssignNode, (, n, ,]
[getParent, (, ), ., getType, (, ), ), {, case, Token, ., ASSIGN, :, updateObjLitOrFunctionDeclarationAtAssignNode, (, n, ,, alias, ,]
[), ), {, case, Token, ., ASSIGN, :, updateObjLitOrFunctionDeclarationAtAssignNode, (, n, ,, alias, ,, canCollapseChildNames, ), ;, break, ;, case]
[), ), {, case, Token, ., ASSIGN, :, updateObjLitOrFunctionDeclarationAtAssignNode, (, n, ,, alias, ,, canCollapseChildNames, ), ;, break, ;, case]
[Token, ., ASSIGN, :, updateObjLitOrFunctionDeclarationAtAssignNode, (, n, ,, alias, ,, canCollapseChildNames, ), ;, break, ;, case, Token, ., VAR, :]
[ASSIGN, :, updateObjLitOrFunctionDeclarationAtAssignNode, (, n, ,, alias, ,, canCollapseChildNames, ), ;, break, ;, case, Token, ., VAR, :, updateObjLitOrFunctionDeclarationAtVarNode, (]
[updateObjLitOrFunctionDeclarationAtAssignNode, (, n, ,, alias, ,, canCollapseChildNames, ), ;, break, ;, case, Token, ., VAR, :, updateObjLitOrFunctionDeclarationAtVarNode, (, n, ,]
[canCollapseChildNames, ), ;, break, ;, case, Token, ., VAR, :, updateObjLitOrFunctionDeclarationAtVarNode, (, n, ,, canCollapseChildNames, ), ;, break, ;, case]
[canCollapseChildNames, ), ;, break, ;, case, Token, ., VAR, :, updateObjLitOrFunctionDeclarationAtVarNode, (, n, ,, canCollapseChildNames, ), ;, break, ;, case]
[;, case, Token, ., VAR, :, updateObjLitOrFunctionDeclarationAtVarNode, (, n, ,, canCollapseChildNames, ), ;, break, ;, case, Token, ., FUNCTION, :]
[Token, ., VAR, :, updateObjLitOrFunctionDeclarationAtVarNode, (, n, ,, canCollapseChildNames, ), ;, break, ;, case, Token, ., FUNCTION, :, updateFunctionDeclarationAtFunctionNode, (]
[VAR, :, updateObjLitOrFunctionDeclarationAtVarNode, (, n, ,, canCollapseChildNames, ), ;, break, ;, case, Token, ., FUNCTION, :, updateFunctionDeclarationAtFunctionNode, (, n, ,]
[;, }, }, private, void, updateObjLitOrFunctionDeclarationAtAssignNode, (, Name, n, ,, String, alias, ,, boolean, canCollapseChildNames, ), {, Ref, ref, =]
[;, }, }, private, void, updateObjLitOrFunctionDeclarationAtAssignNode, (, Name, n, ,, String, alias, ,, boolean, canCollapseChildNames, ), {, Ref, ref, =]
[,, String, alias, ,, boolean, canCollapseChildNames, ), {, Ref, ref, =, n, ., getDeclaration, (, ), ;, Node, rvalue, =]
[,, String, alias, ,, boolean, canCollapseChildNames, ), {, Ref, ref, =, n, ., getDeclaration, (, ), ;, Node, rvalue, =]
[,, String, alias, ,, boolean, canCollapseChildNames, ), {, Ref, ref, =, n, ., getDeclaration, (, ), ;, Node, rvalue, =]
[n, ., getDeclaration, (, ), ;, Node, rvalue, =, ref, ., node, ., getNext, (, ), ;, Node, varNode, =]
[(, ), ;, Node, rvalue, =, ref, ., node, ., getNext, (, ), ;, Node, varNode, =, new, Node, (]
[(, ), ;, Node, rvalue, =, ref, ., node, ., getNext, (, ), ;, Node, varNode, =, new, Node, (]
[node, ., getNext, (, ), ;, Node, varNode, =, new, Node, (, Token, ., VAR, ), ;, Node, varParent, =]
[node, ., getNext, (, ), ;, Node, varNode, =, new, Node, (, Token, ., VAR, ), ;, Node, varParent, =]
[node, ., getNext, (, ), ;, Node, varNode, =, new, Node, (, Token, ., VAR, ), ;, Node, varParent, =]
[Node, varNode, =, new, Node, (, Token, ., VAR, ), ;, Node, varParent, =, ref, ., node, ., getAncestor, (]
[Token, ., VAR, ), ;, Node, varParent, =, ref, ., node, ., getAncestor, (, 3, ), ;, Node, gramps, =]
[Token, ., VAR, ), ;, Node, varParent, =, ref, ., node, ., getAncestor, (, 3, ), ;, Node, gramps, =]
[Token, ., VAR, ), ;, Node, varParent, =, ref, ., node, ., getAncestor, (, 3, ), ;, Node, gramps, =]
[varParent, =, ref, ., node, ., getAncestor, (, 3, ), ;, Node, gramps, =, ref, ., node, ., getAncestor, (]
[getAncestor, (, 3, ), ;, Node, gramps, =, ref, ., node, ., getAncestor, (, 2, ), ;, boolean, isObjLit, =]
[getAncestor, (, 3, ), ;, Node, gramps, =, ref, ., node, ., getAncestor, (, 2, ), ;, boolean, isObjLit, =]
[., node, ., getAncestor, (, 2, ), ;, boolean, isObjLit, =, rvalue, ., isObjectLit, (, ), ;, boolean, insertedVarNode, =]
[(, 2, ), ;, boolean, isObjLit, =, rvalue, ., isObjectLit, (, ), ;, boolean, insertedVarNode, =, false, ;, if, (]
[(, 2, ), ;, boolean, isObjLit, =, rvalue, ., isObjectLit, (, ), ;, boolean, insertedVarNode, =, false, ;, if, (]
[), ;, boolean, isObjLit, =, rvalue, ., isObjectLit, (, ), ;, boolean, insertedVarNode, =, false, ;, if, (, isObjLit, &&]
[), ;, boolean, isObjLit, =, rvalue, ., isObjectLit, (, ), ;, boolean, insertedVarNode, =, false, ;, if, (, isObjLit, &&]
[isObjectLit, (, ), ;, boolean, insertedVarNode, =, false, ;, if, (, isObjLit, &&, n, ., canEliminate, (, ), ), {]
[isObjectLit, (, ), ;, boolean, insertedVarNode, =, false, ;, if, (, isObjLit, &&, n, ., canEliminate, (, ), ), {]
[boolean, insertedVarNode, =, false, ;, if, (, isObjLit, &&, n, ., canEliminate, (, ), ), {, varParent, ., replaceChild, (]
[=, false, ;, if, (, isObjLit, &&, n, ., canEliminate, (, ), ), {, varParent, ., replaceChild, (, gramps, ,]
[if, (, isObjLit, &&, n, ., canEliminate, (, ), ), {, varParent, ., replaceChild, (, gramps, ,, varNode, ), ;]
[if, (, isObjLit, &&, n, ., canEliminate, (, ), ), {, varParent, ., replaceChild, (, gramps, ,, varNode, ), ;]
[n, ., canEliminate, (, ), ), {, varParent, ., replaceChild, (, gramps, ,, varNode, ), ;, ref, ., node, =]
[canEliminate, (, ), ), {, varParent, ., replaceChild, (, gramps, ,, varNode, ), ;, ref, ., node, =, null, ;]
[), ), {, varParent, ., replaceChild, (, gramps, ,, varNode, ), ;, ref, ., node, =, null, ;, insertedVarNode, =]
[(, gramps, ,, varNode, ), ;, ref, ., node, =, null, ;, insertedVarNode, =, true, ;, }, else, if, (]
[gramps, ,, varNode, ), ;, ref, ., node, =, null, ;, insertedVarNode, =, true, ;, }, else, if, (, !]
[gramps, ,, varNode, ), ;, ref, ., node, =, null, ;, insertedVarNode, =, true, ;, }, else, if, (, !]
[null, ;, insertedVarNode, =, true, ;, }, else, if, (, !, n, ., isSimpleName, (, ), ), {, if, (]
[null, ;, insertedVarNode, =, true, ;, }, else, if, (, !, n, ., isSimpleName, (, ), ), {, if, (]
[else, if, (, !, n, ., isSimpleName, (, ), ), {, if, (, rvalue, ., isFunction, (, ), ), {]
[(, !, n, ., isSimpleName, (, ), ), {, if, (, rvalue, ., isFunction, (, ), ), {, checkForHosedThisReferences, (]
[n, ., isSimpleName, (, ), ), {, if, (, rvalue, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, rvalue, ,]
[n, ., isSimpleName, (, ), ), {, if, (, rvalue, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, rvalue, ,]
[), ), {, if, (, rvalue, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, rvalue, ,, n, ., docInfo, ,]
[(, rvalue, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, rvalue, ,, n, ., docInfo, ,, n, ), ;, }]
[(, rvalue, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, rvalue, ,, n, ., docInfo, ,, n, ), ;, }]
[(, rvalue, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, rvalue, ,, n, ., docInfo, ,, n, ), ;, }]
[(, rvalue, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, rvalue, ,, n, ., docInfo, ,, n, ), ;, }]
[rvalue, ,, n, ., docInfo, ,, n, ), ;, }, ref, ., node, ., getParent, (, ), ., removeChild, (]
[n, ), ;, }, ref, ., node, ., getParent, (, ), ., removeChild, (, rvalue, ), ;, Node, nameNode, =]
[n, ), ;, }, ref, ., node, ., getParent, (, ), ., removeChild, (, rvalue, ), ;, Node, nameNode, =]
[ref, ., node, ., getParent, (, ), ., removeChild, (, rvalue, ), ;, Node, nameNode, =, NodeUtil, ., newName, (]
[ref, ., node, ., getParent, (, ), ., removeChild, (, rvalue, ), ;, Node, nameNode, =, NodeUtil, ., newName, (]
[), ., removeChild, (, rvalue, ), ;, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,]
[removeChild, (, rvalue, ), ;, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,]
[removeChild, (, rvalue, ), ;, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,]
[removeChild, (, rvalue, ), ;, Node, nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,]
[nameNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, ref, ., node, ., getAncestor, (]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, ref, ., node, ., getAncestor, (, 2, ), ,]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, ref, ., node, ., getAncestor, (, 2, ), ,]
[,, ref, ., node, ., getAncestor, (, 2, ), ,, n, ., getFullName, (, ), ), ;, JSDocInfo, info, =]
[,, ref, ., node, ., getAncestor, (, 2, ), ,, n, ., getFullName, (, ), ), ;, JSDocInfo, info, =]
[,, ref, ., node, ., getAncestor, (, 2, ), ,, n, ., getFullName, (, ), ), ;, JSDocInfo, info, =]
[,, ref, ., node, ., getAncestor, (, 2, ), ,, n, ., getFullName, (, ), ), ;, JSDocInfo, info, =]
[), ), ;, JSDocInfo, info, =, ref, ., node, ., getParent, (, ), ., getJSDocInfo, (, ), ;, if, (]
[), ), ;, JSDocInfo, info, =, ref, ., node, ., getParent, (, ), ., getJSDocInfo, (, ), ;, if, (]
[), ), ;, JSDocInfo, info, =, ref, ., node, ., getParent, (, ), ., getJSDocInfo, (, ), ;, if, (]
[), ), ;, JSDocInfo, info, =, ref, ., node, ., getParent, (, ), ., getJSDocInfo, (, ), ;, if, (]
[), ), ;, JSDocInfo, info, =, ref, ., node, ., getParent, (, ), ., getJSDocInfo, (, ), ;, if, (]
[getParent, (, ), ., getJSDocInfo, (, ), ;, if, (, ref, ., node, ., getLastChild, (, ), ., getBooleanProp, (]
[getParent, (, ), ., getJSDocInfo, (, ), ;, if, (, ref, ., node, ., getLastChild, (, ), ., getBooleanProp, (]
[(, ), ;, if, (, ref, ., node, ., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ||]
[), ;, if, (, ref, ., node, ., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ||, (]
[), ;, if, (, ref, ., node, ., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ||, (]
[), ;, if, (, ref, ., node, ., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ||, (]
[if, (, ref, ., node, ., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ||, (, info, !=]
[ref, ., node, ., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ||, (, info, !=, null, &&]
[ref, ., node, ., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ||, (, info, !=, null, &&]
[getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ||, (, info, !=, null, &&, info, ., isConstant, (, ), ), ), {]
[getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ||, (, info, !=, null, &&, info, ., isConstant, (, ), ), ), {]
[IS_CONSTANT_NAME, ), ||, (, info, !=, null, &&, info, ., isConstant, (, ), ), ), {, nameNode, ., putBooleanProp, (]
[IS_CONSTANT_NAME, ), ||, (, info, !=, null, &&, info, ., isConstant, (, ), ), ), {, nameNode, ., putBooleanProp, (]
[info, !=, null, &&, info, ., isConstant, (, ), ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,]
[isConstant, (, ), ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (]
[isConstant, (, ), ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (]
[), ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (, info, !=]
[{, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (, info, !=, null, ), {]
[{, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (, info, !=, null, ), {]
[(, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (, info, !=, null, ), {, varNode, ., setJSDocInfo, (]
[,, true, ), ;, }, if, (, info, !=, null, ), {, varNode, ., setJSDocInfo, (, info, ), ;, }]
[,, true, ), ;, }, if, (, info, !=, null, ), {, varNode, ., setJSDocInfo, (, info, ), ;, }]
[}, if, (, info, !=, null, ), {, varNode, ., setJSDocInfo, (, info, ), ;, }, varNode, ., addChildToBack, (]
[info, !=, null, ), {, varNode, ., setJSDocInfo, (, info, ), ;, }, varNode, ., addChildToBack, (, nameNode, ), ;]
[info, !=, null, ), {, varNode, ., setJSDocInfo, (, info, ), ;, }, varNode, ., addChildToBack, (, nameNode, ), ;]
[{, varNode, ., setJSDocInfo, (, info, ), ;, }, varNode, ., addChildToBack, (, nameNode, ), ;, nameNode, ., addChildToFront, (]
[setJSDocInfo, (, info, ), ;, }, varNode, ., addChildToBack, (, nameNode, ), ;, nameNode, ., addChildToFront, (, rvalue, ), ;]
[setJSDocInfo, (, info, ), ;, }, varNode, ., addChildToBack, (, nameNode, ), ;, nameNode, ., addChildToFront, (, rvalue, ), ;]
[;, }, varNode, ., addChildToBack, (, nameNode, ), ;, nameNode, ., addChildToFront, (, rvalue, ), ;, varParent, ., replaceChild, (]
[varNode, ., addChildToBack, (, nameNode, ), ;, nameNode, ., addChildToFront, (, rvalue, ), ;, varParent, ., replaceChild, (, gramps, ,]
[(, nameNode, ), ;, nameNode, ., addChildToFront, (, rvalue, ), ;, varParent, ., replaceChild, (, gramps, ,, varNode, ), ;]
[(, nameNode, ), ;, nameNode, ., addChildToFront, (, rvalue, ), ;, varParent, ., replaceChild, (, gramps, ,, varNode, ), ;]
[nameNode, ., addChildToFront, (, rvalue, ), ;, varParent, ., replaceChild, (, gramps, ,, varNode, ), ;, ref, ., node, =]
[addChildToFront, (, rvalue, ), ;, varParent, ., replaceChild, (, gramps, ,, varNode, ), ;, ref, ., node, =, nameNode, ;]
[rvalue, ), ;, varParent, ., replaceChild, (, gramps, ,, varNode, ), ;, ref, ., node, =, nameNode, ;, insertedVarNode, =]
[replaceChild, (, gramps, ,, varNode, ), ;, ref, ., node, =, nameNode, ;, insertedVarNode, =, true, ;, }, if, (]
[), ;, ref, ., node, =, nameNode, ;, insertedVarNode, =, true, ;, }, if, (, canCollapseChildNames, ), {, if, (]
[., node, =, nameNode, ;, insertedVarNode, =, true, ;, }, if, (, canCollapseChildNames, ), {, if, (, isObjLit, ), {]
[=, nameNode, ;, insertedVarNode, =, true, ;, }, if, (, canCollapseChildNames, ), {, if, (, isObjLit, ), {, declareVarsForObjLitValues, (]
[;, insertedVarNode, =, true, ;, }, if, (, canCollapseChildNames, ), {, if, (, isObjLit, ), {, declareVarsForObjLitValues, (, n, ,]
[=, true, ;, }, if, (, canCollapseChildNames, ), {, if, (, isObjLit, ), {, declareVarsForObjLitValues, (, n, ,, alias, ,]
[;, }, if, (, canCollapseChildNames, ), {, if, (, isObjLit, ), {, declareVarsForObjLitValues, (, n, ,, alias, ,, rvalue, ,]
[if, (, canCollapseChildNames, ), {, if, (, isObjLit, ), {, declareVarsForObjLitValues, (, n, ,, alias, ,, rvalue, ,, varNode, ,]
[if, (, canCollapseChildNames, ), {, if, (, isObjLit, ), {, declareVarsForObjLitValues, (, n, ,, alias, ,, rvalue, ,, varNode, ,]
[{, if, (, isObjLit, ), {, declareVarsForObjLitValues, (, n, ,, alias, ,, rvalue, ,, varNode, ,, varParent, ., getChildBefore, (]
[isObjLit, ), {, declareVarsForObjLitValues, (, n, ,, alias, ,, rvalue, ,, varNode, ,, varParent, ., getChildBefore, (, varNode, ), ,]
[(, n, ,, alias, ,, rvalue, ,, varNode, ,, varParent, ., getChildBefore, (, varNode, ), ,, varParent, ), ;, }]
[,, alias, ,, rvalue, ,, varNode, ,, varParent, ., getChildBefore, (, varNode, ), ,, varParent, ), ;, }, addStubsForUndeclaredProperties, (]
[,, rvalue, ,, varNode, ,, varParent, ., getChildBefore, (, varNode, ), ,, varParent, ), ;, }, addStubsForUndeclaredProperties, (, n, ,]
[,, varNode, ,, varParent, ., getChildBefore, (, varNode, ), ,, varParent, ), ;, }, addStubsForUndeclaredProperties, (, n, ,, alias, ,]
[,, varParent, ., getChildBefore, (, varNode, ), ,, varParent, ), ;, }, addStubsForUndeclaredProperties, (, n, ,, alias, ,, varParent, ,]
[), ,, varParent, ), ;, }, addStubsForUndeclaredProperties, (, n, ,, alias, ,, varParent, ,, varNode, ), ;, }, if, (]
[}, addStubsForUndeclaredProperties, (, n, ,, alias, ,, varParent, ,, varNode, ), ;, }, if, (, insertedVarNode, ), {, if, (]
[addStubsForUndeclaredProperties, (, n, ,, alias, ,, varParent, ,, varNode, ), ;, }, if, (, insertedVarNode, ), {, if, (, !]
[addStubsForUndeclaredProperties, (, n, ,, alias, ,, varParent, ,, varNode, ), ;, }, if, (, insertedVarNode, ), {, if, (, !]
[,, varNode, ), ;, }, if, (, insertedVarNode, ), {, if, (, !, varNode, ., hasChildren, (, ), ), {]
[,, varNode, ), ;, }, if, (, insertedVarNode, ), {, if, (, !, varNode, ., hasChildren, (, ), ), {]
[}, if, (, insertedVarNode, ), {, if, (, !, varNode, ., hasChildren, (, ), ), {, varParent, ., removeChild, (]
[), {, if, (, !, varNode, ., hasChildren, (, ), ), {, varParent, ., removeChild, (, varNode, ), ;, }]
[), {, if, (, !, varNode, ., hasChildren, (, ), ), {, varParent, ., removeChild, (, varNode, ), ;, }]
[;, }, }, private, void, checkForHosedThisReferences, (, Node, function, ,, JSDocInfo, docInfo, ,, final, Name, name, ), {, if, (]
[;, }, }, private, void, checkForHosedThisReferences, (, Node, function, ,, JSDocInfo, docInfo, ,, final, Name, name, ), {, if, (]
[;, }, }, private, void, checkForHosedThisReferences, (, Node, function, ,, JSDocInfo, docInfo, ,, final, Name, name, ), {, if, (]
[}, private, void, checkForHosedThisReferences, (, Node, function, ,, JSDocInfo, docInfo, ,, final, Name, name, ), {, if, (, docInfo, ==]
[void, checkForHosedThisReferences, (, Node, function, ,, JSDocInfo, docInfo, ,, final, Name, name, ), {, if, (, docInfo, ==, null, ||]
[checkForHosedThisReferences, (, Node, function, ,, JSDocInfo, docInfo, ,, final, Name, name, ), {, if, (, docInfo, ==, null, ||, (]
[checkForHosedThisReferences, (, Node, function, ,, JSDocInfo, docInfo, ,, final, Name, name, ), {, if, (, docInfo, ==, null, ||, (]
[(, Node, function, ,, JSDocInfo, docInfo, ,, final, Name, name, ), {, if, (, docInfo, ==, null, ||, (, !]
[(, Node, function, ,, JSDocInfo, docInfo, ,, final, Name, name, ), {, if, (, docInfo, ==, null, ||, (, !]
[,, final, Name, name, ), {, if, (, docInfo, ==, null, ||, (, !, docInfo, ., isConstructor, (, ), &&]
[final, Name, name, ), {, if, (, docInfo, ==, null, ||, (, !, docInfo, ., isConstructor, (, ), &&, !]
[final, Name, name, ), {, if, (, docInfo, ==, null, ||, (, !, docInfo, ., isConstructor, (, ), &&, !]
[==, null, ||, (, !, docInfo, ., isConstructor, (, ), &&, !, docInfo, ., hasThisType, (, ), ), ), {]
[==, null, ||, (, !, docInfo, ., isConstructor, (, ), &&, !, docInfo, ., hasThisType, (, ), ), ), {]
[!, docInfo, ., isConstructor, (, ), &&, !, docInfo, ., hasThisType, (, ), ), ), {, NodeTraversal, ., traverse, (]
[., isConstructor, (, ), &&, !, docInfo, ., hasThisType, (, ), ), ), {, NodeTraversal, ., traverse, (, compiler, ,]
[., isConstructor, (, ), &&, !, docInfo, ., hasThisType, (, ), ), ), {, NodeTraversal, ., traverse, (, compiler, ,]
[docInfo, ., hasThisType, (, ), ), ), {, NodeTraversal, ., traverse, (, compiler, ,, function, ., getLastChild, (, ), ,]
[), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isThis, (, ), ), {]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isThis, (, ), ), {]
[Node, n, ,, Node, parent, ), {, if, (, n, ., isThis, (, ), ), {, compiler, ., report, (]
[Node, n, ,, Node, parent, ), {, if, (, n, ., isThis, (, ), ), {, compiler, ., report, (]
[parent, ), {, if, (, n, ., isThis, (, ), ), {, compiler, ., report, (, JSError, ., make, (]
[parent, ), {, if, (, n, ., isThis, (, ), ), {, compiler, ., report, (, JSError, ., make, (]
[parent, ), {, if, (, n, ., isThis, (, ), ), {, compiler, ., report, (, JSError, ., make, (]
[), {, compiler, ., report, (, JSError, ., make, (, name, ., getDeclaration, (, ), ., getSourceName, (, ), ,]
[compiler, ., report, (, JSError, ., make, (, name, ., getDeclaration, (, ), ., getSourceName, (, ), ,, n, ,]
[report, (, JSError, ., make, (, name, ., getDeclaration, (, ), ., getSourceName, (, ), ,, n, ,, UNSAFE_THIS, ,]
[report, (, JSError, ., make, (, name, ., getDeclaration, (, ), ., getSourceName, (, ), ,, n, ,, UNSAFE_THIS, ,]
[}, }, }, ), ;, }, }, private, void, updateObjLitOrFunctionDeclarationAtVarNode, (, Name, n, ,, boolean, canCollapseChildNames, ), {, if, (]
[}, }, ), ;, }, }, private, void, updateObjLitOrFunctionDeclarationAtVarNode, (, Name, n, ,, boolean, canCollapseChildNames, ), {, if, (, !]
[(, Name, n, ,, boolean, canCollapseChildNames, ), {, if, (, !, canCollapseChildNames, ), {, return, ;, }, Ref, ref, =]
[(, Name, n, ,, boolean, canCollapseChildNames, ), {, if, (, !, canCollapseChildNames, ), {, return, ;, }, Ref, ref, =]
[(, !, canCollapseChildNames, ), {, return, ;, }, Ref, ref, =, n, ., getDeclaration, (, ), ;, String, name, =]
[(, !, canCollapseChildNames, ), {, return, ;, }, Ref, ref, =, n, ., getDeclaration, (, ), ;, String, name, =]
[(, !, canCollapseChildNames, ), {, return, ;, }, Ref, ref, =, n, ., getDeclaration, (, ), ;, String, name, =]
[n, ., getDeclaration, (, ), ;, String, name, =, ref, ., node, ., getString, (, ), ;, Node, rvalue, =]
[n, ., getDeclaration, (, ), ;, String, name, =, ref, ., node, ., getString, (, ), ;, Node, rvalue, =]
[n, ., getDeclaration, (, ), ;, String, name, =, ref, ., node, ., getString, (, ), ;, Node, rvalue, =]
[node, ., getString, (, ), ;, Node, rvalue, =, ref, ., node, ., getFirstChild, (, ), ;, Node, varNode, =]
[node, ., getString, (, ), ;, Node, rvalue, =, ref, ., node, ., getFirstChild, (, ), ;, Node, varNode, =]
[node, ., getString, (, ), ;, Node, rvalue, =, ref, ., node, ., getFirstChild, (, ), ;, Node, varNode, =]
[node, ., getFirstChild, (, ), ;, Node, varNode, =, ref, ., node, ., getParent, (, ), ;, Node, gramps, =]
[node, ., getFirstChild, (, ), ;, Node, varNode, =, ref, ., node, ., getParent, (, ), ;, Node, gramps, =]
[ref, ., node, ., getParent, (, ), ;, Node, gramps, =, varNode, ., getParent, (, ), ;, boolean, isObjLit, =]
[ref, ., node, ., getParent, (, ), ;, Node, gramps, =, varNode, ., getParent, (, ), ;, boolean, isObjLit, =]
[gramps, =, varNode, ., getParent, (, ), ;, boolean, isObjLit, =, rvalue, ., isObjectLit, (, ), ;, int, numChanges, =]
[getParent, (, ), ;, boolean, isObjLit, =, rvalue, ., isObjectLit, (, ), ;, int, numChanges, =, 0, ;, if, (]
[;, boolean, isObjLit, =, rvalue, ., isObjectLit, (, ), ;, int, numChanges, =, 0, ;, if, (, isObjLit, ), {]
[isObjLit, =, rvalue, ., isObjectLit, (, ), ;, int, numChanges, =, 0, ;, if, (, isObjLit, ), {, numChanges, +=]
[rvalue, ., isObjectLit, (, ), ;, int, numChanges, =, 0, ;, if, (, isObjLit, ), {, numChanges, +=, declareVarsForObjLitValues, (]
[isObjectLit, (, ), ;, int, numChanges, =, 0, ;, if, (, isObjLit, ), {, numChanges, +=, declareVarsForObjLitValues, (, n, ,]
[), ;, int, numChanges, =, 0, ;, if, (, isObjLit, ), {, numChanges, +=, declareVarsForObjLitValues, (, n, ,, name, ,]
[int, numChanges, =, 0, ;, if, (, isObjLit, ), {, numChanges, +=, declareVarsForObjLitValues, (, n, ,, name, ,, rvalue, ,]
[=, 0, ;, if, (, isObjLit, ), {, numChanges, +=, declareVarsForObjLitValues, (, n, ,, name, ,, rvalue, ,, varNode, ,]
[=, 0, ;, if, (, isObjLit, ), {, numChanges, +=, declareVarsForObjLitValues, (, n, ,, name, ,, rvalue, ,, varNode, ,]
[(, isObjLit, ), {, numChanges, +=, declareVarsForObjLitValues, (, n, ,, name, ,, rvalue, ,, varNode, ,, gramps, ., getChildBefore, (]
[{, numChanges, +=, declareVarsForObjLitValues, (, n, ,, name, ,, rvalue, ,, varNode, ,, gramps, ., getChildBefore, (, varNode, ), ,]
[(, n, ,, name, ,, rvalue, ,, varNode, ,, gramps, ., getChildBefore, (, varNode, ), ,, gramps, ), ;, }]
[,, name, ,, rvalue, ,, varNode, ,, gramps, ., getChildBefore, (, varNode, ), ,, gramps, ), ;, }, numChanges, +=]
[,, rvalue, ,, varNode, ,, gramps, ., getChildBefore, (, varNode, ), ,, gramps, ), ;, }, numChanges, +=, addStubsForUndeclaredProperties, (]
[,, varNode, ,, gramps, ., getChildBefore, (, varNode, ), ,, gramps, ), ;, }, numChanges, +=, addStubsForUndeclaredProperties, (, n, ,]
[,, gramps, ., getChildBefore, (, varNode, ), ,, gramps, ), ;, }, numChanges, +=, addStubsForUndeclaredProperties, (, n, ,, name, ,]
[., getChildBefore, (, varNode, ), ,, gramps, ), ;, }, numChanges, +=, addStubsForUndeclaredProperties, (, n, ,, name, ,, gramps, ,]
[,, gramps, ), ;, }, numChanges, +=, addStubsForUndeclaredProperties, (, n, ,, name, ,, gramps, ,, varNode, ), ;, if, (]
[,, gramps, ), ;, }, numChanges, +=, addStubsForUndeclaredProperties, (, n, ,, name, ,, gramps, ,, varNode, ), ;, if, (]
[), ;, }, numChanges, +=, addStubsForUndeclaredProperties, (, n, ,, name, ,, gramps, ,, varNode, ), ;, if, (, isObjLit, &&]
[), ;, }, numChanges, +=, addStubsForUndeclaredProperties, (, n, ,, name, ,, gramps, ,, varNode, ), ;, if, (, isObjLit, &&]
[n, ,, name, ,, gramps, ,, varNode, ), ;, if, (, isObjLit, &&, n, ., canEliminate, (, ), ), {]
[n, ,, name, ,, gramps, ,, varNode, ), ;, if, (, isObjLit, &&, n, ., canEliminate, (, ), ), {]
[gramps, ,, varNode, ), ;, if, (, isObjLit, &&, n, ., canEliminate, (, ), ), {, varNode, ., removeChild, (]
[gramps, ,, varNode, ), ;, if, (, isObjLit, &&, n, ., canEliminate, (, ), ), {, varNode, ., removeChild, (]
[isObjLit, &&, n, ., canEliminate, (, ), ), {, varNode, ., removeChild, (, ref, ., node, ), ;, if, (]
[&&, n, ., canEliminate, (, ), ), {, varNode, ., removeChild, (, ref, ., node, ), ;, if, (, !]
[&&, n, ., canEliminate, (, ), ), {, varNode, ., removeChild, (, ref, ., node, ), ;, if, (, !]
[{, varNode, ., removeChild, (, ref, ., node, ), ;, if, (, !, varNode, ., hasChildren, (, ), ), {]
[{, varNode, ., removeChild, (, ref, ., node, ), ;, if, (, !, varNode, ., hasChildren, (, ), ), {]
[(, ref, ., node, ), ;, if, (, !, varNode, ., hasChildren, (, ), ), {, gramps, ., removeChild, (]
[), ;, if, (, !, varNode, ., hasChildren, (, ), ), {, gramps, ., removeChild, (, varNode, ), ;, }]
[), ;, if, (, !, varNode, ., hasChildren, (, ), ), {, gramps, ., removeChild, (, varNode, ), ;, }]
[(, !, varNode, ., hasChildren, (, ), ), {, gramps, ., removeChild, (, varNode, ), ;, }, numChanges, ++, ;]
[(, !, varNode, ., hasChildren, (, ), ), {, gramps, ., removeChild, (, varNode, ), ;, }, numChanges, ++, ;]
[hasChildren, (, ), ), {, gramps, ., removeChild, (, varNode, ), ;, }, numChanges, ++, ;, ref, ., node, =]
[gramps, ., removeChild, (, varNode, ), ;, }, numChanges, ++, ;, ref, ., node, =, null, ;, }, if, (]
[gramps, ., removeChild, (, varNode, ), ;, }, numChanges, ++, ;, ref, ., node, =, null, ;, }, if, (]
[removeChild, (, varNode, ), ;, }, numChanges, ++, ;, ref, ., node, =, null, ;, }, if, (, numChanges, >]
[), ;, }, numChanges, ++, ;, ref, ., node, =, null, ;, }, if, (, numChanges, >, 0, ), {]
[), ;, }, numChanges, ++, ;, ref, ., node, =, null, ;, }, if, (, numChanges, >, 0, ), {]
[., reportCodeChange, (, ), ;, }, }, private, void, updateFunctionDeclarationAtFunctionNode, (, Name, n, ,, boolean, canCollapseChildNames, ), {, if, (]
[reportCodeChange, (, ), ;, }, }, private, void, updateFunctionDeclarationAtFunctionNode, (, Name, n, ,, boolean, canCollapseChildNames, ), {, if, (, !]
[(, Name, n, ,, boolean, canCollapseChildNames, ), {, if, (, !, canCollapseChildNames, ), {, return, ;, }, Ref, ref, =]
[(, Name, n, ,, boolean, canCollapseChildNames, ), {, if, (, !, canCollapseChildNames, ), {, return, ;, }, Ref, ref, =]
[(, !, canCollapseChildNames, ), {, return, ;, }, Ref, ref, =, n, ., getDeclaration, (, ), ;, String, fnName, =]
[(, !, canCollapseChildNames, ), {, return, ;, }, Ref, ref, =, n, ., getDeclaration, (, ), ;, String, fnName, =]
[(, !, canCollapseChildNames, ), {, return, ;, }, Ref, ref, =, n, ., getDeclaration, (, ), ;, String, fnName, =]
[Ref, ref, =, n, ., getDeclaration, (, ), ;, String, fnName, =, ref, ., node, ., getString, (, ), ;]
[=, n, ., getDeclaration, (, ), ;, String, fnName, =, ref, ., node, ., getString, (, ), ;, addStubsForUndeclaredProperties, (]
[., getDeclaration, (, ), ;, String, fnName, =, ref, ., node, ., getString, (, ), ;, addStubsForUndeclaredProperties, (, n, ,]
[(, ), ;, String, fnName, =, ref, ., node, ., getString, (, ), ;, addStubsForUndeclaredProperties, (, n, ,, fnName, ,]
[(, ), ;, String, fnName, =, ref, ., node, ., getString, (, ), ;, addStubsForUndeclaredProperties, (, n, ,, fnName, ,]
[(, ), ;, String, fnName, =, ref, ., node, ., getString, (, ), ;, addStubsForUndeclaredProperties, (, n, ,, fnName, ,]
[ref, ., node, ., getString, (, ), ;, addStubsForUndeclaredProperties, (, n, ,, fnName, ,, ref, ., node, ., getAncestor, (]
[., getString, (, ), ;, addStubsForUndeclaredProperties, (, n, ,, fnName, ,, ref, ., node, ., getAncestor, (, 2, ), ,]
[., getString, (, ), ;, addStubsForUndeclaredProperties, (, n, ,, fnName, ,, ref, ., node, ., getAncestor, (, 2, ), ,]
[., getString, (, ), ;, addStubsForUndeclaredProperties, (, n, ,, fnName, ,, ref, ., node, ., getAncestor, (, 2, ), ,]
[,, String, alias, ,, Node, objlit, ,, Node, varNode, ,, Node, nameToAddAfter, ,, Node, varParent, ), {, int, numVars, =]
[objlit, ,, Node, varNode, ,, Node, nameToAddAfter, ,, Node, varParent, ), {, int, numVars, =, 0, ;, int, arbitraryNameCounter, =]
[Node, nameToAddAfter, ,, Node, varParent, ), {, int, numVars, =, 0, ;, int, arbitraryNameCounter, =, 0, ;, boolean, discardKeys, =]
[nameToAddAfter, ,, Node, varParent, ), {, int, numVars, =, 0, ;, int, arbitraryNameCounter, =, 0, ;, boolean, discardKeys, =, !]
[nameToAddAfter, ,, Node, varParent, ), {, int, numVars, =, 0, ;, int, arbitraryNameCounter, =, 0, ;, boolean, discardKeys, =, !]
[int, arbitraryNameCounter, =, 0, ;, boolean, discardKeys, =, !, objlitName, ., shouldKeepKeys, (, ), ;, for, (, Node, key, =]
[int, arbitraryNameCounter, =, 0, ;, boolean, discardKeys, =, !, objlitName, ., shouldKeepKeys, (, ), ;, for, (, Node, key, =]
[!, objlitName, ., shouldKeepKeys, (, ), ;, for, (, Node, key, =, objlit, ., getFirstChild, (, ), ,, nextKey, ;]
[!, objlitName, ., shouldKeepKeys, (, ), ;, for, (, Node, key, =, objlit, ., getFirstChild, (, ), ,, nextKey, ;]
[., shouldKeepKeys, (, ), ;, for, (, Node, key, =, objlit, ., getFirstChild, (, ), ,, nextKey, ;, key, !=]
[(, ), ;, for, (, Node, key, =, objlit, ., getFirstChild, (, ), ,, nextKey, ;, key, !=, null, ;]
[;, for, (, Node, key, =, objlit, ., getFirstChild, (, ), ,, nextKey, ;, key, !=, null, ;, key, =]
[objlit, ., getFirstChild, (, ), ,, nextKey, ;, key, !=, null, ;, key, =, nextKey, ), {, Node, value, =]
[objlit, ., getFirstChild, (, ), ,, nextKey, ;, key, !=, null, ;, key, =, nextKey, ), {, Node, value, =]
[nextKey, ;, key, !=, null, ;, key, =, nextKey, ), {, Node, value, =, key, ., getFirstChild, (, ), ;]
[key, !=, null, ;, key, =, nextKey, ), {, Node, value, =, key, ., getFirstChild, (, ), ;, nextKey, =]
[key, !=, null, ;, key, =, nextKey, ), {, Node, value, =, key, ., getFirstChild, (, ), ;, nextKey, =]
[{, Node, value, =, key, ., getFirstChild, (, ), ;, nextKey, =, key, ., getNext, (, ), ;, if, (]
[{, Node, value, =, key, ., getFirstChild, (, ), ;, nextKey, =, key, ., getNext, (, ), ;, if, (]
[{, Node, value, =, key, ., getFirstChild, (, ), ;, nextKey, =, key, ., getNext, (, ), ;, if, (]
[getFirstChild, (, ), ;, nextKey, =, key, ., getNext, (, ), ;, if, (, key, ., isGetterDef, (, ), ||]
[getFirstChild, (, ), ;, nextKey, =, key, ., getNext, (, ), ;, if, (, key, ., isGetterDef, (, ), ||]
[(, key, ., isGetterDef, (, ), ||, key, ., isSetterDef, (, ), ), {, continue, ;, }, boolean, isJsIdentifier, =]
[(, key, ., isGetterDef, (, ), ||, key, ., isSetterDef, (, ), ), {, continue, ;, }, boolean, isJsIdentifier, =]
[key, ., isGetterDef, (, ), ||, key, ., isSetterDef, (, ), ), {, continue, ;, }, boolean, isJsIdentifier, =, !]
[key, ., isGetterDef, (, ), ||, key, ., isSetterDef, (, ), ), {, continue, ;, }, boolean, isJsIdentifier, =, !]
[key, ., isSetterDef, (, ), ), {, continue, ;, }, boolean, isJsIdentifier, =, !, key, ., isNumber, (, ), &&]
[key, ., isSetterDef, (, ), ), {, continue, ;, }, boolean, isJsIdentifier, =, !, key, ., isNumber, (, ), &&]
[), ), {, continue, ;, }, boolean, isJsIdentifier, =, !, key, ., isNumber, (, ), &&, TokenStream, ., isJSIdentifier, (]
[), ), {, continue, ;, }, boolean, isJsIdentifier, =, !, key, ., isNumber, (, ), &&, TokenStream, ., isJSIdentifier, (]
[key, ., isNumber, (, ), &&, TokenStream, ., isJSIdentifier, (, key, ., getString, (, ), ), ;, String, propName, =]
[key, ., isNumber, (, ), &&, TokenStream, ., isJSIdentifier, (, key, ., getString, (, ), ), ;, String, propName, =]
[isNumber, (, ), &&, TokenStream, ., isJSIdentifier, (, key, ., getString, (, ), ), ;, String, propName, =, isJsIdentifier, ?]
[isNumber, (, ), &&, TokenStream, ., isJSIdentifier, (, key, ., getString, (, ), ), ;, String, propName, =, isJsIdentifier, ?]
[isJSIdentifier, (, key, ., getString, (, ), ), ;, String, propName, =, isJsIdentifier, ?, key, ., getString, (, ), :]
[isJSIdentifier, (, key, ., getString, (, ), ), ;, String, propName, =, isJsIdentifier, ?, key, ., getString, (, ), :]
[getString, (, ), ), ;, String, propName, =, isJsIdentifier, ?, key, ., getString, (, ), :, String, ., valueOf, (]
[(, ), ), ;, String, propName, =, isJsIdentifier, ?, key, ., getString, (, ), :, String, ., valueOf, (, ++]
[=, isJsIdentifier, ?, key, ., getString, (, ), :, String, ., valueOf, (, ++, arbitraryNameCounter, ), ;, String, qName, =]
[=, isJsIdentifier, ?, key, ., getString, (, ), :, String, ., valueOf, (, ++, arbitraryNameCounter, ), ;, String, qName, =]
[=, isJsIdentifier, ?, key, ., getString, (, ), :, String, ., valueOf, (, ++, arbitraryNameCounter, ), ;, String, qName, =]
[=, isJsIdentifier, ?, key, ., getString, (, ), :, String, ., valueOf, (, ++, arbitraryNameCounter, ), ;, String, qName, =]
[(, ), :, String, ., valueOf, (, ++, arbitraryNameCounter, ), ;, String, qName, =, objlitName, ., getFullName, (, ), +]
[:, String, ., valueOf, (, ++, arbitraryNameCounter, ), ;, String, qName, =, objlitName, ., getFullName, (, ), +, '.', +]
[++, arbitraryNameCounter, ), ;, String, qName, =, objlitName, ., getFullName, (, ), +, '.', +, propName, ;, Name, p, =]
[++, arbitraryNameCounter, ), ;, String, qName, =, objlitName, ., getFullName, (, ), +, '.', +, propName, ;, Name, p, =]
[String, qName, =, objlitName, ., getFullName, (, ), +, '.', +, propName, ;, Name, p, =, nameMap, ., get, (]
[getFullName, (, ), +, '.', +, propName, ;, Name, p, =, nameMap, ., get, (, qName, ), ;, if, (]
[getFullName, (, ), +, '.', +, propName, ;, Name, p, =, nameMap, ., get, (, qName, ), ;, if, (]
[getFullName, (, ), +, '.', +, propName, ;, Name, p, =, nameMap, ., get, (, qName, ), ;, if, (]
[), +, '.', +, propName, ;, Name, p, =, nameMap, ., get, (, qName, ), ;, if, (, p, !=]
['.', +, propName, ;, Name, p, =, nameMap, ., get, (, qName, ), ;, if, (, p, !=, null, &&]
[+, propName, ;, Name, p, =, nameMap, ., get, (, qName, ), ;, if, (, p, !=, null, &&, !]
[+, propName, ;, Name, p, =, nameMap, ., get, (, qName, ), ;, if, (, p, !=, null, &&, !]
[if, (, p, !=, null, &&, !, p, ., canCollapse, (, ), ), {, continue, ;, }, String, propAlias, =]
[p, !=, null, &&, !, p, ., canCollapse, (, ), ), {, continue, ;, }, String, propAlias, =, appendPropForAlias, (]
[null, &&, !, p, ., canCollapse, (, ), ), {, continue, ;, }, String, propAlias, =, appendPropForAlias, (, alias, ,]
[(, ), ), {, continue, ;, }, String, propAlias, =, appendPropForAlias, (, alias, ,, propName, ), ;, Node, refNode, =]
[continue, ;, }, String, propAlias, =, appendPropForAlias, (, alias, ,, propName, ), ;, Node, refNode, =, null, ;, if, (]
[String, propAlias, =, appendPropForAlias, (, alias, ,, propName, ), ;, Node, refNode, =, null, ;, if, (, discardKeys, ), {]
[String, propAlias, =, appendPropForAlias, (, alias, ,, propName, ), ;, Node, refNode, =, null, ;, if, (, discardKeys, ), {]
[(, alias, ,, propName, ), ;, Node, refNode, =, null, ;, if, (, discardKeys, ), {, objlit, ., removeChild, (]
[propName, ), ;, Node, refNode, =, null, ;, if, (, discardKeys, ), {, objlit, ., removeChild, (, key, ), ;]
[propName, ), ;, Node, refNode, =, null, ;, if, (, discardKeys, ), {, objlit, ., removeChild, (, key, ), ;]
[(, discardKeys, ), {, objlit, ., removeChild, (, key, ), ;, value, ., detachFromParent, (, ), ;, }, else, {]
[), {, objlit, ., removeChild, (, key, ), ;, value, ., detachFromParent, (, ), ;, }, else, {, refNode, =]
[), {, objlit, ., removeChild, (, key, ), ;, value, ., detachFromParent, (, ), ;, }, else, {, refNode, =]
[removeChild, (, key, ), ;, value, ., detachFromParent, (, ), ;, }, else, {, refNode, =, IR, ., name, (]
[value, ., detachFromParent, (, ), ;, }, else, {, refNode, =, IR, ., name, (, propAlias, ), ;, if, (]
[value, ., detachFromParent, (, ), ;, }, else, {, refNode, =, IR, ., name, (, propAlias, ), ;, if, (]
[), ;, }, else, {, refNode, =, IR, ., name, (, propAlias, ), ;, if, (, key, ., getBooleanProp, (]
[), ;, }, else, {, refNode, =, IR, ., name, (, propAlias, ), ;, if, (, key, ., getBooleanProp, (]
[=, IR, ., name, (, propAlias, ), ;, if, (, key, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {]
[=, IR, ., name, (, propAlias, ), ;, if, (, key, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {]
[(, propAlias, ), ;, if, (, key, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, refNode, ., putBooleanProp, (]
[(, propAlias, ), ;, if, (, key, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, refNode, ., putBooleanProp, (]
[if, (, key, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, refNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,]
[getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, refNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }]
[getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, refNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }]
[IS_CONSTANT_NAME, ), ), {, refNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, key, ., replaceChild, (]
[), {, refNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, key, ., replaceChild, (, value, ,]
[., IS_CONSTANT_NAME, ,, true, ), ;, }, key, ., replaceChild, (, value, ,, refNode, ), ;, }, Node, nameNode, =]
[., IS_CONSTANT_NAME, ,, true, ), ;, }, key, ., replaceChild, (, value, ,, refNode, ), ;, }, Node, nameNode, =]
[), ;, }, key, ., replaceChild, (, value, ,, refNode, ), ;, }, Node, nameNode, =, IR, ., name, (]
[key, ., replaceChild, (, value, ,, refNode, ), ;, }, Node, nameNode, =, IR, ., name, (, propAlias, ), ;]
[key, ., replaceChild, (, value, ,, refNode, ), ;, }, Node, nameNode, =, IR, ., name, (, propAlias, ), ;]
[value, ,, refNode, ), ;, }, Node, nameNode, =, IR, ., name, (, propAlias, ), ;, nameNode, ., addChildToFront, (]
[}, Node, nameNode, =, IR, ., name, (, propAlias, ), ;, nameNode, ., addChildToFront, (, value, ), ;, if, (]
[}, Node, nameNode, =, IR, ., name, (, propAlias, ), ;, nameNode, ., addChildToFront, (, value, ), ;, if, (]
[IR, ., name, (, propAlias, ), ;, nameNode, ., addChildToFront, (, value, ), ;, if, (, key, ., getBooleanProp, (]
[IR, ., name, (, propAlias, ), ;, nameNode, ., addChildToFront, (, value, ), ;, if, (, key, ., getBooleanProp, (]
[;, nameNode, ., addChildToFront, (, value, ), ;, if, (, key, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {]
[;, nameNode, ., addChildToFront, (, value, ), ;, if, (, key, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {]
[(, value, ), ;, if, (, key, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, nameNode, ., putBooleanProp, (]
[(, value, ), ;, if, (, key, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, nameNode, ., putBooleanProp, (]
[if, (, key, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,]
[., IS_CONSTANT_NAME, ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, Node, newVar, =]
[., IS_CONSTANT_NAME, ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, Node, newVar, =]
[., IS_CONSTANT_NAME, ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, Node, newVar, =]
[{, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, Node, newVar, =, IR, ., var, (]
[Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, Node, newVar, =, IR, ., var, (, nameNode, ), ., copyInformationFromForTree, (]
[), ;, }, Node, newVar, =, IR, ., var, (, nameNode, ), ., copyInformationFromForTree, (, key, ), ;, if, (]
[), ;, }, Node, newVar, =, IR, ., var, (, nameNode, ), ., copyInformationFromForTree, (, key, ), ;, if, (]
[}, Node, newVar, =, IR, ., var, (, nameNode, ), ., copyInformationFromForTree, (, key, ), ;, if, (, nameToAddAfter, !=]
[=, IR, ., var, (, nameNode, ), ., copyInformationFromForTree, (, key, ), ;, if, (, nameToAddAfter, !=, null, ), {]
[=, IR, ., var, (, nameNode, ), ., copyInformationFromForTree, (, key, ), ;, if, (, nameToAddAfter, !=, null, ), {]
[(, nameNode, ), ., copyInformationFromForTree, (, key, ), ;, if, (, nameToAddAfter, !=, null, ), {, varParent, ., addChildAfter, (]
[), ., copyInformationFromForTree, (, key, ), ;, if, (, nameToAddAfter, !=, null, ), {, varParent, ., addChildAfter, (, newVar, ,]
[;, if, (, nameToAddAfter, !=, null, ), {, varParent, ., addChildAfter, (, newVar, ,, nameToAddAfter, ), ;, }, else, {]
[;, if, (, nameToAddAfter, !=, null, ), {, varParent, ., addChildAfter, (, newVar, ,, nameToAddAfter, ), ;, }, else, {]
[!=, null, ), {, varParent, ., addChildAfter, (, newVar, ,, nameToAddAfter, ), ;, }, else, {, varParent, ., addChildBefore, (]
[), {, varParent, ., addChildAfter, (, newVar, ,, nameToAddAfter, ), ;, }, else, {, varParent, ., addChildBefore, (, newVar, ,]
[addChildAfter, (, newVar, ,, nameToAddAfter, ), ;, }, else, {, varParent, ., addChildBefore, (, newVar, ,, varNode, ), ;, }]
[addChildAfter, (, newVar, ,, nameToAddAfter, ), ;, }, else, {, varParent, ., addChildBefore, (, newVar, ,, varNode, ), ;, }]
[;, }, else, {, varParent, ., addChildBefore, (, newVar, ,, varNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;]
[else, {, varParent, ., addChildBefore, (, newVar, ,, varNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;, nameToAddAfter, =]
[addChildBefore, (, newVar, ,, varNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;, nameToAddAfter, =, newVar, ;, if, (]
[addChildBefore, (, newVar, ,, varNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;, nameToAddAfter, =, newVar, ;, if, (]
[newVar, ,, varNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;, nameToAddAfter, =, newVar, ;, if, (, isJsIdentifier, &&]
[newVar, ,, varNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;, nameToAddAfter, =, newVar, ;, if, (, isJsIdentifier, &&]
[varNode, ), ;, }, compiler, ., reportCodeChange, (, ), ;, nameToAddAfter, =, newVar, ;, if, (, isJsIdentifier, &&, p, !=]
[., reportCodeChange, (, ), ;, nameToAddAfter, =, newVar, ;, if, (, isJsIdentifier, &&, p, !=, null, ), {, if, (]
[reportCodeChange, (, ), ;, nameToAddAfter, =, newVar, ;, if, (, isJsIdentifier, &&, p, !=, null, ), {, if, (, !]
[newVar, ;, if, (, isJsIdentifier, &&, p, !=, null, ), {, if, (, !, discardKeys, ), {, Ref, newAlias, =]
[newVar, ;, if, (, isJsIdentifier, &&, p, !=, null, ), {, if, (, !, discardKeys, ), {, Ref, newAlias, =]
[newVar, ;, if, (, isJsIdentifier, &&, p, !=, null, ), {, if, (, !, discardKeys, ), {, Ref, newAlias, =]
[null, ), {, if, (, !, discardKeys, ), {, Ref, newAlias, =, p, ., getDeclaration, (, ), ., cloneAndReclassify, (]
[null, ), {, if, (, !, discardKeys, ), {, Ref, newAlias, =, p, ., getDeclaration, (, ), ., cloneAndReclassify, (]
[null, ), {, if, (, !, discardKeys, ), {, Ref, newAlias, =, p, ., getDeclaration, (, ), ., cloneAndReclassify, (]
[), {, Ref, newAlias, =, p, ., getDeclaration, (, ), ., cloneAndReclassify, (, Ref, ., Type, ., ALIASING_GET, ), ;]
[), {, Ref, newAlias, =, p, ., getDeclaration, (, ), ., cloneAndReclassify, (, Ref, ., Type, ., ALIASING_GET, ), ;]
[=, p, ., getDeclaration, (, ), ., cloneAndReclassify, (, Ref, ., Type, ., ALIASING_GET, ), ;, newAlias, ., node, =]
[., getDeclaration, (, ), ., cloneAndReclassify, (, Ref, ., Type, ., ALIASING_GET, ), ;, newAlias, ., node, =, refNode, ;]
[., getDeclaration, (, ), ., cloneAndReclassify, (, Ref, ., Type, ., ALIASING_GET, ), ;, newAlias, ., node, =, refNode, ;]
[., cloneAndReclassify, (, Ref, ., Type, ., ALIASING_GET, ), ;, newAlias, ., node, =, refNode, ;, p, ., addRef, (]
[., Type, ., ALIASING_GET, ), ;, newAlias, ., node, =, refNode, ;, p, ., addRef, (, newAlias, ), ;, }]
[., Type, ., ALIASING_GET, ), ;, newAlias, ., node, =, refNode, ;, p, ., addRef, (, newAlias, ), ;, }]
[., Type, ., ALIASING_GET, ), ;, newAlias, ., node, =, refNode, ;, p, ., addRef, (, newAlias, ), ;, }]
[node, =, refNode, ;, p, ., addRef, (, newAlias, ), ;, }, p, ., getDeclaration, (, ), ., node, =]
[p, ., addRef, (, newAlias, ), ;, }, p, ., getDeclaration, (, ), ., node, =, nameNode, ;, if, (]
[p, ., addRef, (, newAlias, ), ;, }, p, ., getDeclaration, (, ), ., node, =, nameNode, ;, if, (]
[}, p, ., getDeclaration, (, ), ., node, =, nameNode, ;, if, (, value, ., isFunction, (, ), ), {]
[., getDeclaration, (, ), ., node, =, nameNode, ;, if, (, value, ., isFunction, (, ), ), {, checkForHosedThisReferences, (]
[(, ), ., node, =, nameNode, ;, if, (, value, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, value, ,]
[(, ), ., node, =, nameNode, ;, if, (, value, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, value, ,]
[;, if, (, value, ., isFunction, (, ), ), {, checkForHosedThisReferences, (, value, ,, value, ., getJSDocInfo, (, ), ,]
[isFunction, (, ), ), {, checkForHosedThisReferences, (, value, ,, value, ., getJSDocInfo, (, ), ,, p, ), ;, }, }]
[isFunction, (, ), ), {, checkForHosedThisReferences, (, value, ,, value, ., getJSDocInfo, (, ), ,, p, ), ;, }, }]
[checkForHosedThisReferences, (, value, ,, value, ., getJSDocInfo, (, ), ,, p, ), ;, }, }, numVars, ++, ;, }, return]
[numVars, ;, }, private, int, addStubsForUndeclaredProperties, (, Name, n, ,, String, alias, ,, Node, parent, ,, Node, addAfter, ), {]
[numVars, ;, }, private, int, addStubsForUndeclaredProperties, (, Name, n, ,, String, alias, ,, Node, parent, ,, Node, addAfter, ), {]
[int, addStubsForUndeclaredProperties, (, Name, n, ,, String, alias, ,, Node, parent, ,, Node, addAfter, ), {, Preconditions, ., checkState, (]
[int, addStubsForUndeclaredProperties, (, Name, n, ,, String, alias, ,, Node, parent, ,, Node, addAfter, ), {, Preconditions, ., checkState, (]
[alias, ,, Node, parent, ,, Node, addAfter, ), {, Preconditions, ., checkState, (, n, ., canCollapseUnannotatedChildNames, (, ), ), ;]
[alias, ,, Node, parent, ,, Node, addAfter, ), {, Preconditions, ., checkState, (, n, ., canCollapseUnannotatedChildNames, (, ), ), ;]
[,, Node, addAfter, ), {, Preconditions, ., checkState, (, n, ., canCollapseUnannotatedChildNames, (, ), ), ;, Preconditions, ., checkArgument, (]
[,, Node, addAfter, ), {, Preconditions, ., checkState, (, n, ., canCollapseUnannotatedChildNames, (, ), ), ;, Preconditions, ., checkArgument, (]
[{, Preconditions, ., checkState, (, n, ., canCollapseUnannotatedChildNames, (, ), ), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isStatementBlock, (]
[(, n, ., canCollapseUnannotatedChildNames, (, ), ), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isStatementBlock, (, parent, ), ), ;]
[(, n, ., canCollapseUnannotatedChildNames, (, ), ), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isStatementBlock, (, parent, ), ), ;]
[(, ), ), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isStatementBlock, (, parent, ), ), ;, Preconditions, ., checkNotNull, (]
[checkArgument, (, NodeUtil, ., isStatementBlock, (, parent, ), ), ;, Preconditions, ., checkNotNull, (, addAfter, ), ;, int, numStubs, =]
[isStatementBlock, (, parent, ), ), ;, Preconditions, ., checkNotNull, (, addAfter, ), ;, int, numStubs, =, 0, ;, if, (]
[isStatementBlock, (, parent, ), ), ;, Preconditions, ., checkNotNull, (, addAfter, ), ;, int, numStubs, =, 0, ;, if, (]
[isStatementBlock, (, parent, ), ), ;, Preconditions, ., checkNotNull, (, addAfter, ), ;, int, numStubs, =, 0, ;, if, (]
[), ;, Preconditions, ., checkNotNull, (, addAfter, ), ;, int, numStubs, =, 0, ;, if, (, n, ., props, !=]
[;, int, numStubs, =, 0, ;, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :]
[;, int, numStubs, =, 0, ;, if, (, n, ., props, !=, null, ), {, for, (, Name, p, :]
[(, n, ., props, !=, null, ), {, for, (, Name, p, :, n, ., props, ), {, if, (]
[(, n, ., props, !=, null, ), {, for, (, Name, p, :, n, ., props, ), {, if, (]
[Name, p, :, n, ., props, ), {, if, (, p, ., needsToBeStubbed, (, ), ), {, String, propAlias, =]
[:, n, ., props, ), {, if, (, p, ., needsToBeStubbed, (, ), ), {, String, propAlias, =, appendPropForAlias, (]
[., props, ), {, if, (, p, ., needsToBeStubbed, (, ), ), {, String, propAlias, =, appendPropForAlias, (, alias, ,]
[., props, ), {, if, (, p, ., needsToBeStubbed, (, ), ), {, String, propAlias, =, appendPropForAlias, (, alias, ,]
[), ), {, String, propAlias, =, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ;, Node, nameNode, =]
[), ), {, String, propAlias, =, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ;, Node, nameNode, =]
[propAlias, =, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ;, Node, nameNode, =, IR, ., name, (]
[p, ., getBaseName, (, ), ), ;, Node, nameNode, =, IR, ., name, (, propAlias, ), ;, Node, newVar, =]
[p, ., getBaseName, (, ), ), ;, Node, nameNode, =, IR, ., name, (, propAlias, ), ;, Node, newVar, =]
[p, ., getBaseName, (, ), ), ;, Node, nameNode, =, IR, ., name, (, propAlias, ), ;, Node, newVar, =]
[), ), ;, Node, nameNode, =, IR, ., name, (, propAlias, ), ;, Node, newVar, =, IR, ., var, (]
[=, IR, ., name, (, propAlias, ), ;, Node, newVar, =, IR, ., var, (, nameNode, ), ., copyInformationFromForTree, (]
[name, (, propAlias, ), ;, Node, newVar, =, IR, ., var, (, nameNode, ), ., copyInformationFromForTree, (, addAfter, ), ;]
[name, (, propAlias, ), ;, Node, newVar, =, IR, ., var, (, nameNode, ), ., copyInformationFromForTree, (, addAfter, ), ;]
[;, Node, newVar, =, IR, ., var, (, nameNode, ), ., copyInformationFromForTree, (, addAfter, ), ;, parent, ., addChildAfter, (]
[newVar, =, IR, ., var, (, nameNode, ), ., copyInformationFromForTree, (, addAfter, ), ;, parent, ., addChildAfter, (, newVar, ,]
[., var, (, nameNode, ), ., copyInformationFromForTree, (, addAfter, ), ;, parent, ., addChildAfter, (, newVar, ,, addAfter, ), ;]
[(, nameNode, ), ., copyInformationFromForTree, (, addAfter, ), ;, parent, ., addChildAfter, (, newVar, ,, addAfter, ), ;, addAfter, =]
[), ., copyInformationFromForTree, (, addAfter, ), ;, parent, ., addChildAfter, (, newVar, ,, addAfter, ), ;, addAfter, =, newVar, ;]
[), ., copyInformationFromForTree, (, addAfter, ), ;, parent, ., addChildAfter, (, newVar, ,, addAfter, ), ;, addAfter, =, newVar, ;]
[(, addAfter, ), ;, parent, ., addChildAfter, (, newVar, ,, addAfter, ), ;, addAfter, =, newVar, ;, numStubs, ++, ;]
[(, addAfter, ), ;, parent, ., addChildAfter, (, newVar, ,, addAfter, ), ;, addAfter, =, newVar, ;, numStubs, ++, ;]
[newVar, ,, addAfter, ), ;, addAfter, =, newVar, ;, numStubs, ++, ;, compiler, ., reportCodeChange, (, ), ;, if, (]
[newVar, ,, addAfter, ), ;, addAfter, =, newVar, ;, numStubs, ++, ;, compiler, ., reportCodeChange, (, ), ;, if, (]
[newVar, ,, addAfter, ), ;, addAfter, =, newVar, ;, numStubs, ++, ;, compiler, ., reportCodeChange, (, ), ;, if, (]
[newVar, ,, addAfter, ), ;, addAfter, =, newVar, ;, numStubs, ++, ;, compiler, ., reportCodeChange, (, ), ;, if, (]
[newVar, ,, addAfter, ), ;, addAfter, =, newVar, ;, numStubs, ++, ;, compiler, ., reportCodeChange, (, ), ;, if, (]
[newVar, ,, addAfter, ), ;, addAfter, =, newVar, ;, numStubs, ++, ;, compiler, ., reportCodeChange, (, ), ;, if, (]
[;, numStubs, ++, ;, compiler, ., reportCodeChange, (, ), ;, if, (, p, ., getRefs, (, ), ., get, (]
[(, p, ., getRefs, (, ), ., get, (, 0, ), ., node, ., getLastChild, (, ), ., getBooleanProp, (]
[(, p, ., getRefs, (, ), ., get, (, 0, ), ., node, ., getLastChild, (, ), ., getBooleanProp, (]
[., get, (, 0, ), ., node, ., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {]
[., get, (, 0, ), ., node, ., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {]
[), ., node, ., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, nameNode, ., putBooleanProp, (]
[), ., node, ., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, nameNode, ., putBooleanProp, (]
[getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,]
[IS_CONSTANT_NAME, ), ), {, nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, }, }, }, return]
[}, }, return, numStubs, ;, }, private, static, String, appendPropForAlias, (, String, root, ,, String, prop, ), {, if, (]
[}, }, return, numStubs, ;, }, private, static, String, appendPropForAlias, (, String, root, ,, String, prop, ), {, if, (]
[}, }, return, numStubs, ;, }, private, static, String, appendPropForAlias, (, String, root, ,, String, prop, ), {, if, (]
[;, }, private, static, String, appendPropForAlias, (, String, root, ,, String, prop, ), {, if, (, prop, ., indexOf, (]
[static, String, appendPropForAlias, (, String, root, ,, String, prop, ), {, if, (, prop, ., indexOf, (, '$', ), !=]
[String, appendPropForAlias, (, String, root, ,, String, prop, ), {, if, (, prop, ., indexOf, (, '$', ), !=, -]
[String, root, ,, String, prop, ), {, if, (, prop, ., indexOf, (, '$', ), !=, -, 1, ), {]
[,, String, prop, ), {, if, (, prop, ., indexOf, (, '$', ), !=, -, 1, ), {, prop, =]
[,, String, prop, ), {, if, (, prop, ., indexOf, (, '$', ), !=, -, 1, ), {, prop, =]
[{, if, (, prop, ., indexOf, (, '$', ), !=, -, 1, ), {, prop, =, prop, ., replace, (]
[(, prop, ., indexOf, (, '$', ), !=, -, 1, ), {, prop, =, prop, ., replace, (, "$", ,]
['$', ), !=, -, 1, ), {, prop, =, prop, ., replace, (, "$", ,, "$0", ), ;, }, return]
['$', ), !=, -, 1, ), {, prop, =, prop, ., replace, (, "$", ,, "$0", ), ;, }, return]
['$', ), !=, -, 1, ), {, prop, =, prop, ., replace, (, "$", ,, "$0", ), ;, }, return]
[!=, -, 1, ), {, prop, =, prop, ., replace, (, "$", ,, "$0", ), ;, }, return, root, +]
[1, ), {, prop, =, prop, ., replace, (, "$", ,, "$0", ), ;, }, return, root, +, '$', +]
