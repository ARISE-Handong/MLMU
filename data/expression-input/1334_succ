[;, InlineSimpleMethods, (, AbstractCompiler, compiler, ), {, super, (, compiler, ), ;, }, private, class, InlineTrivialAccessors, extends, InvocationsCallback, {, @]
[., getLogger, (, InlineSimpleMethods, ., class, ., getName, (, ), ), ;, InlineSimpleMethods, (, AbstractCompiler, compiler, ), {, super, (]
[), ;, InlineSimpleMethods, (, AbstractCompiler, compiler, ), {, super, (, compiler, ), ;, }, private, class, InlineTrivialAccessors, extends, InvocationsCallback, {]
[., getName, (, ), ), ;, InlineSimpleMethods, (, AbstractCompiler, compiler, ), {, super, (, compiler, ), ;, }, private, class]
[), ;, }, private, class, InlineTrivialAccessors, extends, InvocationsCallback, {, @, Override, void, visit, (, NodeTraversal, t, ,, Node, callNode, ,]
[), {, return, ;, }, Collection, <, Node, >, definitions, =, methodDefinitions, ., get, (, callName, ), ;, if, (]
[||, nonMethodProperties, ., contains, (, callName, ), ), {, return, ;, }, Collection, <, Node, >, definitions, =, methodDefinitions, .]
[., contains, (, callName, ), ||, nonMethodProperties, ., contains, (, callName, ), ), {, return, ;, }, Collection, <, Node]
[), ||, nonMethodProperties, ., contains, (, callName, ), ), {, return, ;, }, Collection, <, Node, >, definitions, =, methodDefinitions]
[), {, return, ;, }, Collection, <, Node, >, definitions, =, methodDefinitions, ., get, (, callName, ), ;, if, (]
[., contains, (, callName, ), ), {, return, ;, }, Collection, <, Node, >, definitions, =, methodDefinitions, ., get, (]
[), ), {, return, ;, }, Collection, <, Node, >, definitions, =, methodDefinitions, ., get, (, callName, ), ;, if]
[;, if, (, definitions, ==, null, ||, definitions, ., size, (, ), ==, 0, ), {, return, ;, }, Node]
[., get, (, callName, ), ;, if, (, definitions, ==, null, ||, definitions, ., size, (, ), ==, 0, )]
[), ;, if, (, definitions, ==, null, ||, definitions, ., size, (, ), ==, 0, ), {, return, ;, }]
[), {, return, ;, }, Node, firstDefinition, =, definitions, ., iterator, (, ), ., next, (, ), ;, if, (]
[||, definitions, ., size, (, ), ==, 0, ), {, return, ;, }, Node, firstDefinition, =, definitions, ., iterator, (]
[==, null, ||, definitions, ., size, (, ), ==, 0, ), {, return, ;, }, Node, firstDefinition, =, definitions, .]
[||, definitions, ., size, (, ), ==, 0, ), {, return, ;, }, Node, firstDefinition, =, definitions, ., iterator, (]
[), {, return, ;, }, Node, firstDefinition, =, definitions, ., iterator, (, ), ., next, (, ), ;, if, (]
[==, 0, ), {, return, ;, }, Node, firstDefinition, =, definitions, ., iterator, (, ), ., next, (, ), ;]
[., size, (, ), ==, 0, ), {, return, ;, }, Node, firstDefinition, =, definitions, ., iterator, (, ), .]
[), {, return, ;, }, Node, firstDefinition, =, definitions, ., iterator, (, ), ., next, (, ), ;, if, (]
[;, if, (, definitions, ., size, (, ), ==, 1, ||, allDefinitionsEquivalent, (, definitions, ), ), {, if, (, !]
[., next, (, ), ;, if, (, definitions, ., size, (, ), ==, 1, ||, allDefinitionsEquivalent, (, definitions, ), )]
[., iterator, (, ), ., next, (, ), ;, if, (, definitions, ., size, (, ), ==, 1, ||, allDefinitionsEquivalent]
[), {, if, (, !, argsMayHaveSideEffects, (, callNode, ), ), {, Node, returned, =, returnedExpression, (, firstDefinition, ), ;, if]
[||, allDefinitionsEquivalent, (, definitions, ), ), {, if, (, !, argsMayHaveSideEffects, (, callNode, ), ), {, Node, returned, =, returnedExpression]
[==, 1, ||, allDefinitionsEquivalent, (, definitions, ), ), {, if, (, !, argsMayHaveSideEffects, (, callNode, ), ), {, Node, returned]
[., size, (, ), ==, 1, ||, allDefinitionsEquivalent, (, definitions, ), ), {, if, (, !, argsMayHaveSideEffects, (, callNode, )]
[||, allDefinitionsEquivalent, (, definitions, ), ), {, if, (, !, argsMayHaveSideEffects, (, callNode, ), ), {, Node, returned, =, returnedExpression]
[), {, if, (, !, argsMayHaveSideEffects, (, callNode, ), ), {, Node, returned, =, returnedExpression, (, firstDefinition, ), ;, if]
[), ), {, if, (, !, argsMayHaveSideEffects, (, callNode, ), ), {, Node, returned, =, returnedExpression, (, firstDefinition, ), ;]
[), {, Node, returned, =, returnedExpression, (, firstDefinition, ), ;, if, (, returned, !=, null, ), {, if, (, isPropertyTree]
[), {, Node, returned, =, returnedExpression, (, firstDefinition, ), ;, if, (, returned, !=, null, ), {, if, (, isPropertyTree]
[), ), {, Node, returned, =, returnedExpression, (, firstDefinition, ), ;, if, (, returned, !=, null, ), {, if, (]
[;, if, (, returned, !=, null, ), {, if, (, isPropertyTree, (, returned, ), ), {, logger, ., fine, (]
[), ;, if, (, returned, !=, null, ), {, if, (, isPropertyTree, (, returned, ), ), {, logger, ., fine]
[), {, if, (, isPropertyTree, (, returned, ), ), {, logger, ., fine, (, "Inlining property accessor: ", +, callName, ), ;, inlinePropertyReturn]
[!=, null, ), {, if, (, isPropertyTree, (, returned, ), ), {, logger, ., fine, (, "Inlining property accessor: ", +, callName, )]
[), {, if, (, isPropertyTree, (, returned, ), ), {, logger, ., fine, (, "Inlining property accessor: ", +, callName, ), ;, inlinePropertyReturn]
[), {, logger, ., fine, (, "Inlining property accessor: ", +, callName, ), ;, inlinePropertyReturn, (, parent, ,, callNode, ,, returned, ), ;]
[), ), {, logger, ., fine, (, "Inlining property accessor: ", +, callName, ), ;, inlinePropertyReturn, (, parent, ,, callNode, ,, returned, )]
[;, inlinePropertyReturn, (, parent, ,, callNode, ,, returned, ), ;, }, else, if, (, NodeUtil, ., isLiteralValue, (, returned, ,]
[., fine, (, "Inlining property accessor: ", +, callName, ), ;, inlinePropertyReturn, (, parent, ,, callNode, ,, returned, ), ;, }, else, if]
[), ;, inlinePropertyReturn, (, parent, ,, callNode, ,, returned, ), ;, }, else, if, (, NodeUtil, ., isLiteralValue, (, returned]
[+, callName, ), ;, inlinePropertyReturn, (, parent, ,, callNode, ,, returned, ), ;, }, else, if, (, NodeUtil, ., isLiteralValue]
[), ;, inlinePropertyReturn, (, parent, ,, callNode, ,, returned, ), ;, }, else, if, (, NodeUtil, ., isLiteralValue, (, returned]
[;, }, else, if, (, NodeUtil, ., isLiteralValue, (, returned, ,, false, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, callNode]
[,, callNode, ,, returned, ), ;, }, else, if, (, NodeUtil, ., isLiteralValue, (, returned, ,, false, ), &&, !]
[,, returned, ), ;, }, else, if, (, NodeUtil, ., isLiteralValue, (, returned, ,, false, ), &&, !, NodeUtil, .]
[), ;, }, else, if, (, NodeUtil, ., isLiteralValue, (, returned, ,, false, ), &&, !, NodeUtil, ., mayHaveSideEffects, (]
[), {, logger, ., fine, (, "Inlining constant accessor: ", +, callName, ), ;, inlineConstReturn, (, parent, ,, callNode, ,, returned, ), ;]
[&&, !, NodeUtil, ., mayHaveSideEffects, (, callNode, ., getFirstChild, (, ), ,, compiler, ), ), {, logger, ., fine, (]
[., isLiteralValue, (, returned, ,, false, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, callNode, ., getFirstChild, (, ), ,, compiler]
[,, false, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, callNode, ., getFirstChild, (, ), ,, compiler, ), ), {, logger]
[), &&, !, NodeUtil, ., mayHaveSideEffects, (, callNode, ., getFirstChild, (, ), ,, compiler, ), ), {, logger, ., fine]
[), {, logger, ., fine, (, "Inlining constant accessor: ", +, callName, ), ;, inlineConstReturn, (, parent, ,, callNode, ,, returned, ), ;]
[), {, logger, ., fine, (, "Inlining constant accessor: ", +, callName, ), ;, inlineConstReturn, (, parent, ,, callNode, ,, returned, ), ;]
[., mayHaveSideEffects, (, callNode, ., getFirstChild, (, ), ,, compiler, ), ), {, logger, ., fine, (, "Inlining constant accessor: ", +, callName]
[,, compiler, ), ), {, logger, ., fine, (, "Inlining constant accessor: ", +, callName, ), ;, inlineConstReturn, (, parent, ,, callNode, ,]
[., getFirstChild, (, ), ,, compiler, ), ), {, logger, ., fine, (, "Inlining constant accessor: ", +, callName, ), ;, inlineConstReturn, (]
[), ), {, logger, ., fine, (, "Inlining constant accessor: ", +, callName, ), ;, inlineConstReturn, (, parent, ,, callNode, ,, returned, )]
[;, inlineConstReturn, (, parent, ,, callNode, ,, returned, ), ;, }, }, else, if, (, isEmptyMethod, (, firstDefinition, ), &&]
[., fine, (, "Inlining constant accessor: ", +, callName, ), ;, inlineConstReturn, (, parent, ,, callNode, ,, returned, ), ;, }, }, else]
[), ;, inlineConstReturn, (, parent, ,, callNode, ,, returned, ), ;, }, }, else, if, (, isEmptyMethod, (, firstDefinition, )]
[+, callName, ), ;, inlineConstReturn, (, parent, ,, callNode, ,, returned, ), ;, }, }, else, if, (, isEmptyMethod, (]
[), ;, inlineConstReturn, (, parent, ,, callNode, ,, returned, ), ;, }, }, else, if, (, isEmptyMethod, (, firstDefinition, )]
[;, }, }, else, if, (, isEmptyMethod, (, firstDefinition, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, callNode, ., getFirstChild, (]
[,, callNode, ,, returned, ), ;, }, }, else, if, (, isEmptyMethod, (, firstDefinition, ), &&, !, NodeUtil, ., mayHaveSideEffects]
[,, returned, ), ;, }, }, else, if, (, isEmptyMethod, (, firstDefinition, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, callNode]
[), ;, }, }, else, if, (, isEmptyMethod, (, firstDefinition, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, callNode, ., getFirstChild]
[), {, logger, ., fine, (, "Inlining empty method: ", +, callName, ), ;, inlineEmptyMethod, (, t, ,, parent, ,, callNode, ), ;]
[&&, !, NodeUtil, ., mayHaveSideEffects, (, callNode, ., getFirstChild, (, ), ,, compiler, ), ), {, logger, ., fine, (]
[), &&, !, NodeUtil, ., mayHaveSideEffects, (, callNode, ., getFirstChild, (, ), ,, compiler, ), ), {, logger, ., fine]
[), {, logger, ., fine, (, "Inlining empty method: ", +, callName, ), ;, inlineEmptyMethod, (, t, ,, parent, ,, callNode, ), ;]
[), {, logger, ., fine, (, "Inlining empty method: ", +, callName, ), ;, inlineEmptyMethod, (, t, ,, parent, ,, callNode, ), ;]
[., mayHaveSideEffects, (, callNode, ., getFirstChild, (, ), ,, compiler, ), ), {, logger, ., fine, (, "Inlining empty method: ", +, callName]
[,, compiler, ), ), {, logger, ., fine, (, "Inlining empty method: ", +, callName, ), ;, inlineEmptyMethod, (, t, ,, parent, ,]
[., getFirstChild, (, ), ,, compiler, ), ), {, logger, ., fine, (, "Inlining empty method: ", +, callName, ), ;, inlineEmptyMethod, (]
[), ), {, logger, ., fine, (, "Inlining empty method: ", +, callName, ), ;, inlineEmptyMethod, (, t, ,, parent, ,, callNode, )]
[;, inlineEmptyMethod, (, t, ,, parent, ,, callNode, ), ;, }, }, }, else, {, logger, ., fine, (, "Method '"]
[., fine, (, "Inlining empty method: ", +, callName, ), ;, inlineEmptyMethod, (, t, ,, parent, ,, callNode, ), ;, }, }, }]
[), ;, inlineEmptyMethod, (, t, ,, parent, ,, callNode, ), ;, }, }, }, else, {, logger, ., fine, (]
[+, callName, ), ;, inlineEmptyMethod, (, t, ,, parent, ,, callNode, ), ;, }, }, }, else, {, logger, .]
[), ;, inlineEmptyMethod, (, t, ,, parent, ,, callNode, ), ;, }, }, }, else, {, logger, ., fine, (]
[;, }, }, }, else, {, logger, ., fine, (, "Method '", +, callName, +, "' has conflicting definitions.", ), ;, }, }, }]
[,, parent, ,, callNode, ), ;, }, }, }, else, {, logger, ., fine, (, "Method '", +, callName, +, "' has conflicting definitions."]
[,, callNode, ), ;, }, }, }, else, {, logger, ., fine, (, "Method '", +, callName, +, "' has conflicting definitions.", ), ;]
[), ;, }, }, }, else, {, logger, ., fine, (, "Method '", +, callName, +, "' has conflicting definitions.", ), ;, }, }]
[;, }, }, }, @, Override, Callback, getActingCallback, (, ), {, return, new, InlineTrivialAccessors, (, ), ;, }, private, static]
[., fine, (, "Method '", +, callName, +, "' has conflicting definitions.", ), ;, }, }, }, @, Override, Callback, getActingCallback, (, ), {]
[), ;, }, }, }, @, Override, Callback, getActingCallback, (, ), {, return, new, InlineTrivialAccessors, (, ), ;, }, private]
[+, "' has conflicting definitions.", ), ;, }, }, }, @, Override, Callback, getActingCallback, (, ), {, return, new, InlineTrivialAccessors, (, ), ;]
[+, callName, +, "' has conflicting definitions.", ), ;, }, }, }, @, Override, Callback, getActingCallback, (, ), {, return, new, InlineTrivialAccessors, (]
[+, "' has conflicting definitions.", ), ;, }, }, }, @, Override, Callback, getActingCallback, (, ), {, return, new, InlineTrivialAccessors, (, ), ;]
[), ;, }, }, }, @, Override, Callback, getActingCallback, (, ), {, return, new, InlineTrivialAccessors, (, ), ;, }, private]
[;, }, private, static, boolean, isPropertyTree, (, Node, expectedGetprop, ), {, if, (, !, expectedGetprop, ., isGetProp, (, ), )]
[), {, return, false, ;, }, Node, leftChild, =, expectedGetprop, ., getFirstChild, (, ), ;, if, (, !, leftChild, .]
[), {, return, false, ;, }, Node, leftChild, =, expectedGetprop, ., getFirstChild, (, ), ;, if, (, !, leftChild, .]
[., isGetProp, (, ), ), {, return, false, ;, }, Node, leftChild, =, expectedGetprop, ., getFirstChild, (, ), ;, if]
[;, }, Node, leftChild, =, expectedGetprop, ., getFirstChild, (, ), ;, if, (, !, leftChild, ., isThis, (, ), &&]
[;, if, (, !, leftChild, ., isThis, (, ), &&, !, isPropertyTree, (, leftChild, ), ), {, return, false, ;]
[., getFirstChild, (, ), ;, if, (, !, leftChild, ., isThis, (, ), &&, !, isPropertyTree, (, leftChild, ), )]
[), {, return, false, ;, }, Node, retVal, =, leftChild, ., getNext, (, ), ;, if, (, NodeUtil, ., getStringValue]
[&&, !, isPropertyTree, (, leftChild, ), ), {, return, false, ;, }, Node, retVal, =, leftChild, ., getNext, (, )]
[&&, !, isPropertyTree, (, leftChild, ), ), {, return, false, ;, }, Node, retVal, =, leftChild, ., getNext, (, )]
[., isThis, (, ), &&, !, isPropertyTree, (, leftChild, ), ), {, return, false, ;, }, Node, retVal, =, leftChild]
[), {, return, false, ;, }, Node, retVal, =, leftChild, ., getNext, (, ), ;, if, (, NodeUtil, ., getStringValue]
[), {, return, false, ;, }, Node, retVal, =, leftChild, ., getNext, (, ), ;, if, (, NodeUtil, ., getStringValue]
[), ), {, return, false, ;, }, Node, retVal, =, leftChild, ., getNext, (, ), ;, if, (, NodeUtil, .]
[;, }, Node, retVal, =, leftChild, ., getNext, (, ), ;, if, (, NodeUtil, ., getStringValue, (, retVal, ), ==]
[;, if, (, NodeUtil, ., getStringValue, (, retVal, ), ==, null, ), {, return, false, ;, }, return, true, ;]
[., getNext, (, ), ;, if, (, NodeUtil, ., getStringValue, (, retVal, ), ==, null, ), {, return, false, ;]
[), {, return, false, ;, }, return, true, ;, }, private, static, void, replaceThis, (, Node, expectedGetprop, ,, Node, replacement]
[==, null, ), {, return, false, ;, }, return, true, ;, }, private, static, void, replaceThis, (, Node, expectedGetprop, ,]
[., getStringValue, (, retVal, ), ==, null, ), {, return, false, ;, }, return, true, ;, }, private, static, void]
[), ==, null, ), {, return, false, ;, }, return, true, ;, }, private, static, void, replaceThis, (, Node, expectedGetprop]
[), {, return, false, ;, }, return, true, ;, }, private, static, void, replaceThis, (, Node, expectedGetprop, ,, Node, replacement]
[;, }, return, true, ;, }, private, static, void, replaceThis, (, Node, expectedGetprop, ,, Node, replacement, ), {, Node, leftChild]
[;, }, private, static, void, replaceThis, (, Node, expectedGetprop, ,, Node, replacement, ), {, Node, leftChild, =, expectedGetprop, ., getFirstChild]
[;, if, (, leftChild, ., isThis, (, ), ), {, expectedGetprop, ., replaceChild, (, leftChild, ,, replacement, ), ;, }]
[., getFirstChild, (, ), ;, if, (, leftChild, ., isThis, (, ), ), {, expectedGetprop, ., replaceChild, (, leftChild, ,]
[), {, expectedGetprop, ., replaceChild, (, leftChild, ,, replacement, ), ;, }, else, {, replaceThis, (, leftChild, ,, replacement, )]
[., isThis, (, ), ), {, expectedGetprop, ., replaceChild, (, leftChild, ,, replacement, ), ;, }, else, {, replaceThis, (]
[;, }, else, {, replaceThis, (, leftChild, ,, replacement, ), ;, }, }, private, static, Node, returnedExpression, (, Node, fn]
[., replaceChild, (, leftChild, ,, replacement, ), ;, }, else, {, replaceThis, (, leftChild, ,, replacement, ), ;, }, }]
[,, replacement, ), ;, }, else, {, replaceThis, (, leftChild, ,, replacement, ), ;, }, }, private, static, Node, returnedExpression]
[), ;, }, else, {, replaceThis, (, leftChild, ,, replacement, ), ;, }, }, private, static, Node, returnedExpression, (, Node]
[;, }, }, private, static, Node, returnedExpression, (, Node, fn, ), {, Node, expectedBlock, =, getMethodBlock, (, fn, ), ;]
[,, replacement, ), ;, }, }, private, static, Node, returnedExpression, (, Node, fn, ), {, Node, expectedBlock, =, getMethodBlock, (]
[), ;, }, }, private, static, Node, returnedExpression, (, Node, fn, ), {, Node, expectedBlock, =, getMethodBlock, (, fn, )]
[;, if, (, !, expectedBlock, ., hasOneChild, (, ), ), {, return, null, ;, }, Node, expectedReturn, =, expectedBlock, .]
[), ;, if, (, !, expectedBlock, ., hasOneChild, (, ), ), {, return, null, ;, }, Node, expectedReturn, =, expectedBlock]
[), {, return, null, ;, }, Node, expectedReturn, =, expectedBlock, ., getFirstChild, (, ), ;, if, (, !, expectedReturn, .]
[), {, return, null, ;, }, Node, expectedReturn, =, expectedBlock, ., getFirstChild, (, ), ;, if, (, !, expectedReturn, .]
[., hasOneChild, (, ), ), {, return, null, ;, }, Node, expectedReturn, =, expectedBlock, ., getFirstChild, (, ), ;, if]
[;, }, Node, expectedReturn, =, expectedBlock, ., getFirstChild, (, ), ;, if, (, !, expectedReturn, ., isReturn, (, ), )]
[;, if, (, !, expectedReturn, ., isReturn, (, ), ), {, return, null, ;, }, if, (, !, expectedReturn, .]
[., getFirstChild, (, ), ;, if, (, !, expectedReturn, ., isReturn, (, ), ), {, return, null, ;, }, if]
[), {, return, null, ;, }, if, (, !, expectedReturn, ., hasOneChild, (, ), ), {, return, null, ;, }]
[), {, return, null, ;, }, if, (, !, expectedReturn, ., hasOneChild, (, ), ), {, return, null, ;, }]
[., isReturn, (, ), ), {, return, null, ;, }, if, (, !, expectedReturn, ., hasOneChild, (, ), ), {]
[;, }, if, (, !, expectedReturn, ., hasOneChild, (, ), ), {, return, null, ;, }, return, expectedReturn, ., getLastChild]
[), {, return, null, ;, }, return, expectedReturn, ., getLastChild, (, ), ;, }, private, static, boolean, isEmptyMethod, (, Node]
[), {, return, null, ;, }, return, expectedReturn, ., getLastChild, (, ), ;, }, private, static, boolean, isEmptyMethod, (, Node]
[., hasOneChild, (, ), ), {, return, null, ;, }, return, expectedReturn, ., getLastChild, (, ), ;, }, private, static]
[;, }, return, expectedReturn, ., getLastChild, (, ), ;, }, private, static, boolean, isEmptyMethod, (, Node, fn, ), {, Node]
[;, }, private, static, boolean, isEmptyMethod, (, Node, fn, ), {, Node, expectedBlock, =, getMethodBlock, (, fn, ), ;, return]
[., getLastChild, (, ), ;, }, private, static, boolean, isEmptyMethod, (, Node, fn, ), {, Node, expectedBlock, =, getMethodBlock, (]
[;, return, expectedBlock, ==, null, ?, false, :, NodeUtil, ., isEmptyBlock, (, expectedBlock, ), ;, }, private, static, Node, getMethodBlock]
[), ;, return, expectedBlock, ==, null, ?, false, :, NodeUtil, ., isEmptyBlock, (, expectedBlock, ), ;, }, private, static, Node]
[;, }, private, static, Node, getMethodBlock, (, Node, fn, ), {, if, (, fn, ., getChildCount, (, ), !=, 3]
[?, false, :, NodeUtil, ., isEmptyBlock, (, expectedBlock, ), ;, }, private, static, Node, getMethodBlock, (, Node, fn, ), {]
[==, null, ?, false, :, NodeUtil, ., isEmptyBlock, (, expectedBlock, ), ;, }, private, static, Node, getMethodBlock, (, Node, fn]
[?, false, :, NodeUtil, ., isEmptyBlock, (, expectedBlock, ), ;, }, private, static, Node, getMethodBlock, (, Node, fn, ), {]
[:, NodeUtil, ., isEmptyBlock, (, expectedBlock, ), ;, }, private, static, Node, getMethodBlock, (, Node, fn, ), {, if, (]
[;, }, private, static, Node, getMethodBlock, (, Node, fn, ), {, if, (, fn, ., getChildCount, (, ), !=, 3]
[., isEmptyBlock, (, expectedBlock, ), ;, }, private, static, Node, getMethodBlock, (, Node, fn, ), {, if, (, fn, .]
[), ;, }, private, static, Node, getMethodBlock, (, Node, fn, ), {, if, (, fn, ., getChildCount, (, ), !=]
[), {, return, null, ;, }, Node, expectedBlock, =, fn, ., getLastChild, (, ), ;, return, expectedBlock, ., isBlock, (]
[!=, 3, ), {, return, null, ;, }, Node, expectedBlock, =, fn, ., getLastChild, (, ), ;, return, expectedBlock, .]
[., getChildCount, (, ), !=, 3, ), {, return, null, ;, }, Node, expectedBlock, =, fn, ., getLastChild, (, )]
[), {, return, null, ;, }, Node, expectedBlock, =, fn, ., getLastChild, (, ), ;, return, expectedBlock, ., isBlock, (]
[;, }, Node, expectedBlock, =, fn, ., getLastChild, (, ), ;, return, expectedBlock, ., isBlock, (, ), ?, expectedBlock, :]
[;, return, expectedBlock, ., isBlock, (, ), ?, expectedBlock, :, null, ;, }, private, boolean, allDefinitionsEquivalent, (, Collection, <, Node]
[., getLastChild, (, ), ;, return, expectedBlock, ., isBlock, (, ), ?, expectedBlock, :, null, ;, }, private, boolean, allDefinitionsEquivalent]
[;, }, private, boolean, allDefinitionsEquivalent, (, Collection, <, Node, >, definitions, ), {, List, <, Node, >, list, =, Lists]
[?, expectedBlock, :, null, ;, }, private, boolean, allDefinitionsEquivalent, (, Collection, <, Node, >, definitions, ), {, List, <, Node]
[., isBlock, (, ), ?, expectedBlock, :, null, ;, }, private, boolean, allDefinitionsEquivalent, (, Collection, <, Node, >, definitions, )]
[:, null, ;, }, private, boolean, allDefinitionsEquivalent, (, Collection, <, Node, >, definitions, ), {, List, <, Node, >, list]
[;, }, private, boolean, allDefinitionsEquivalent, (, Collection, <, Node, >, definitions, ), {, List, <, Node, >, list, =, Lists]
[;, list, ., addAll, (, definitions, ), ;, Node, node0, =, list, ., get, (, 0, ), ;, for, (]
[., newArrayList, (, ), ;, list, ., addAll, (, definitions, ), ;, Node, node0, =, list, ., get, (, 0]
[;, Node, node0, =, list, ., get, (, 0, ), ;, for, (, int, i, =, 1, ;, i, <]
[., addAll, (, definitions, ), ;, Node, node0, =, list, ., get, (, 0, ), ;, for, (, int, i]
[), ;, Node, node0, =, list, ., get, (, 0, ), ;, for, (, int, i, =, 1, ;, i]
[;, for, (, int, i, =, 1, ;, i, <, list, ., size, (, ), ;, i, ++, ), {]
[., get, (, 0, ), ;, for, (, int, i, =, 1, ;, i, <, list, ., size, (, )]
[), ;, for, (, int, i, =, 1, ;, i, <, list, ., size, (, ), ;, i, ++, )]
[;, i, <, list, ., size, (, ), ;, i, ++, ), {, if, (, !, compiler, ., areNodesEqualForInlining, (]
[;, i, ++, ), {, if, (, !, compiler, ., areNodesEqualForInlining, (, list, ., get, (, i, ), ,, node0]
[<, list, ., size, (, ), ;, i, ++, ), {, if, (, !, compiler, ., areNodesEqualForInlining, (, list, .]
[;, i, ++, ), {, if, (, !, compiler, ., areNodesEqualForInlining, (, list, ., get, (, i, ), ,, node0]
[., size, (, ), ;, i, ++, ), {, if, (, !, compiler, ., areNodesEqualForInlining, (, list, ., get, (]
[), {, if, (, !, compiler, ., areNodesEqualForInlining, (, list, ., get, (, i, ), ,, node0, ), ), {]
[++, ), {, if, (, !, compiler, ., areNodesEqualForInlining, (, list, ., get, (, i, ), ,, node0, ), )]
[), {, return, false, ;, }, }, return, true, ;, }, private, void, inlinePropertyReturn, (, Node, parent, ,, Node, call]
[), {, return, false, ;, }, }, return, true, ;, }, private, void, inlinePropertyReturn, (, Node, parent, ,, Node, call]
[., areNodesEqualForInlining, (, list, ., get, (, i, ), ,, node0, ), ), {, return, false, ;, }, }, return]
[,, node0, ), ), {, return, false, ;, }, }, return, true, ;, }, private, void, inlinePropertyReturn, (, Node, parent]
[., get, (, i, ), ,, node0, ), ), {, return, false, ;, }, }, return, true, ;, }, private]
[), ,, node0, ), ), {, return, false, ;, }, }, return, true, ;, }, private, void, inlinePropertyReturn, (, Node]
[), ), {, return, false, ;, }, }, return, true, ;, }, private, void, inlinePropertyReturn, (, Node, parent, ,, Node]
[;, }, }, return, true, ;, }, private, void, inlinePropertyReturn, (, Node, parent, ,, Node, call, ,, Node, returnedValue, )]
[;, }, private, void, inlinePropertyReturn, (, Node, parent, ,, Node, call, ,, Node, returnedValue, ), {, Node, getProp, =, returnedValue]
[;, replaceThis, (, getProp, ,, call, ., getFirstChild, (, ), ., removeFirstChild, (, ), ), ;, parent, ., replaceChild, (]
[., cloneTree, (, ), ;, replaceThis, (, getProp, ,, call, ., getFirstChild, (, ), ., removeFirstChild, (, ), ), ;]
[;, parent, ., replaceChild, (, call, ,, getProp, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, inlineConstReturn]
[,, call, ., getFirstChild, (, ), ., removeFirstChild, (, ), ), ;, parent, ., replaceChild, (, call, ,, getProp, )]
[), ;, parent, ., replaceChild, (, call, ,, getProp, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void]
[., removeFirstChild, (, ), ), ;, parent, ., replaceChild, (, call, ,, getProp, ), ;, compiler, ., reportCodeChange, (, )]
[., getFirstChild, (, ), ., removeFirstChild, (, ), ), ;, parent, ., replaceChild, (, call, ,, getProp, ), ;, compiler]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, void, inlineConstReturn, (, Node, parent, ,, Node, call, ,, Node, returnedValue]
[., replaceChild, (, call, ,, getProp, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, inlineConstReturn, (, Node]
[,, getProp, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, inlineConstReturn, (, Node, parent, ,, Node, call]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, inlineConstReturn, (, Node, parent, ,, Node, call, ,, Node]
[;, }, private, void, inlineConstReturn, (, Node, parent, ,, Node, call, ,, Node, returnedValue, ), {, Node, retValue, =, returnedValue]
[., reportCodeChange, (, ), ;, }, private, void, inlineConstReturn, (, Node, parent, ,, Node, call, ,, Node, returnedValue, ), {]
[;, parent, ., replaceChild, (, call, ,, retValue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, inlineEmptyMethod]
[., cloneTree, (, ), ;, parent, ., replaceChild, (, call, ,, retValue, ), ;, compiler, ., reportCodeChange, (, ), ;]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, void, inlineEmptyMethod, (, NodeTraversal, t, ,, Node, parent, ,, Node, call]
[., replaceChild, (, call, ,, retValue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, inlineEmptyMethod, (, NodeTraversal]
[,, retValue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, inlineEmptyMethod, (, NodeTraversal, t, ,, Node, parent]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, inlineEmptyMethod, (, NodeTraversal, t, ,, Node, parent, ,, Node]
[;, }, private, void, inlineEmptyMethod, (, NodeTraversal, t, ,, Node, parent, ,, Node, call, ), {, if, (, NodeUtil, .]
[., reportCodeChange, (, ), ;, }, private, void, inlineEmptyMethod, (, NodeTraversal, t, ,, Node, parent, ,, Node, call, ), {]
[), {, parent, ., getParent, (, ), ., replaceChild, (, parent, ,, IR, ., empty, (, ), ), ;, }]
[., isExprCall, (, parent, ), ), {, parent, ., getParent, (, ), ., replaceChild, (, parent, ,, IR, ., empty]
[), ), {, parent, ., getParent, (, ), ., replaceChild, (, parent, ,, IR, ., empty, (, ), ), ;]
[;, }, else, {, Node, srcLocation, =, call, ;, parent, ., replaceChild, (, call, ,, NodeUtil, ., newUndefinedNode, (, srcLocation]
[., replaceChild, (, parent, ,, IR, ., empty, (, ), ), ;, }, else, {, Node, srcLocation, =, call, ;]
[., getParent, (, ), ., replaceChild, (, parent, ,, IR, ., empty, (, ), ), ;, }, else, {, Node]
[,, IR, ., empty, (, ), ), ;, }, else, {, Node, srcLocation, =, call, ;, parent, ., replaceChild, (]
[), ;, }, else, {, Node, srcLocation, =, call, ;, parent, ., replaceChild, (, call, ,, NodeUtil, ., newUndefinedNode, (]
[., empty, (, ), ), ;, }, else, {, Node, srcLocation, =, call, ;, parent, ., replaceChild, (, call, ,]
[;, parent, ., replaceChild, (, call, ,, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ), ;, }, compiler, ., reportCodeChange, (]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, private, boolean, argsMayHaveSideEffects, (, Node, call, ), {, for, (, Node]
[., replaceChild, (, call, ,, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ), ;, }, compiler, ., reportCodeChange, (, ), ;]
[,, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, private, boolean, argsMayHaveSideEffects]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, private, boolean, argsMayHaveSideEffects, (, Node, call, ), {, for, (]
[., newUndefinedNode, (, srcLocation, ), ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, private, boolean, argsMayHaveSideEffects, (, Node]
[), ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, private, boolean, argsMayHaveSideEffects, (, Node, call, ), {, for]
[;, }, private, boolean, argsMayHaveSideEffects, (, Node, call, ), {, for, (, Node, currentChild, =, call, ., getFirstChild, (, )]
[., reportCodeChange, (, ), ;, }, private, boolean, argsMayHaveSideEffects, (, Node, call, ), {, for, (, Node, currentChild, =, call]
[;, currentChild, !=, null, ;, currentChild, =, currentChild, ., getNext, (, ), ), {, if, (, NodeUtil, ., mayHaveSideEffects, (]
[., getNext, (, ), ;, currentChild, !=, null, ;, currentChild, =, currentChild, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ., getNext, (, ), ;, currentChild, !=, null, ;, currentChild, =, currentChild, ., getNext, (, )]
[;, currentChild, =, currentChild, ., getNext, (, ), ), {, if, (, NodeUtil, ., mayHaveSideEffects, (, currentChild, ,, compiler, )]
[!=, null, ;, currentChild, =, currentChild, ., getNext, (, ), ), {, if, (, NodeUtil, ., mayHaveSideEffects, (, currentChild, ,]
[;, currentChild, =, currentChild, ., getNext, (, ), ), {, if, (, NodeUtil, ., mayHaveSideEffects, (, currentChild, ,, compiler, )]
[=, currentChild, ., getNext, (, ), ), {, if, (, NodeUtil, ., mayHaveSideEffects, (, currentChild, ,, compiler, ), ), {]
[), {, if, (, NodeUtil, ., mayHaveSideEffects, (, currentChild, ,, compiler, ), ), {, return, true, ;, }, }, return]
[., getNext, (, ), ), {, if, (, NodeUtil, ., mayHaveSideEffects, (, currentChild, ,, compiler, ), ), {, return, true]
[), {, return, true, ;, }, }, return, false, ;, }, static, final, MethodCompilerPass, ., SignatureStore, DUMMY_SIGNATURE_STORE, =, new, MethodCompilerPass]
[., mayHaveSideEffects, (, currentChild, ,, compiler, ), ), {, return, true, ;, }, }, return, false, ;, }, static, final]
[,, compiler, ), ), {, return, true, ;, }, }, return, false, ;, }, static, final, MethodCompilerPass, ., SignatureStore, DUMMY_SIGNATURE_STORE]
[), ), {, return, true, ;, }, }, return, false, ;, }, static, final, MethodCompilerPass, ., SignatureStore, DUMMY_SIGNATURE_STORE, =, new]
[;, }, }, return, false, ;, }, static, final, MethodCompilerPass, ., SignatureStore, DUMMY_SIGNATURE_STORE, =, new, MethodCompilerPass, ., SignatureStore, (, )]
[;, }, static, final, MethodCompilerPass, ., SignatureStore, DUMMY_SIGNATURE_STORE, =, new, MethodCompilerPass, ., SignatureStore, (, ), {, @, Override, public, void]
[;, @, Override, SignatureStore, getSignatureStore, (, ), {, return, DUMMY_SIGNATURE_STORE, ;, }, }]
[;, }, }]
