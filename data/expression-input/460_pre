[class, SymbolTable, implements, StaticSymbolTable, <, SymbolTable, ., Symbol, ,, SymbolTable, ., Reference, >, {, private, static, final, Logger, logger, =]
[class, SymbolTable, implements, StaticSymbolTable, <, SymbolTable, ., Symbol, ,, SymbolTable, ., Reference, >, {, private, static, final, Logger, logger, =]
[<, SymbolTable, ., Symbol, ,, SymbolTable, ., Reference, >, {, private, static, final, Logger, logger, =, Logger, ., getLogger, (]
[<, SymbolTable, ., Symbol, ,, SymbolTable, ., Reference, >, {, private, static, final, Logger, logger, =, Logger, ., getLogger, (]
[=, Logger, ., getLogger, (, SymbolTable, ., class, ., getName, (, ), ), ;, public, static, final, String, GLOBAL_THIS, =]
[public, static, final, String, GLOBAL_THIS, =, "*global*", ;, private, final, Table, <, Node, ,, String, ,, Symbol, >, symbols, =]
[public, static, final, String, GLOBAL_THIS, =, "*global*", ;, private, final, Table, <, Node, ,, String, ,, Symbol, >, symbols, =]
[Symbol, >, symbols, =, HashBasedTable, ., create, (, ), ;, private, final, Map, <, Node, ,, SymbolScope, >, scopes, =]
[Symbol, >, symbols, =, HashBasedTable, ., create, (, ), ;, private, final, Map, <, Node, ,, SymbolScope, >, scopes, =]
[Node, ,, SymbolScope, >, scopes, =, Maps, ., newLinkedHashMap, (, ), ;, private, final, List, <, JSDocInfo, >, docInfos, =]
[Node, ,, SymbolScope, >, scopes, =, Maps, ., newLinkedHashMap, (, ), ;, private, final, List, <, JSDocInfo, >, docInfos, =]
[), ;, private, final, List, <, JSDocInfo, >, docInfos, =, Lists, ., newArrayList, (, ), ;, private, SymbolScope, globalScope, =]
[(, ), ;, private, SymbolScope, globalScope, =, null, ;, private, final, JSTypeRegistry, registry, ;, SymbolTable, (, JSTypeRegistry, registry, ), {]
[(, ), ;, private, SymbolScope, globalScope, =, null, ;, private, final, JSTypeRegistry, registry, ;, SymbolTable, (, JSTypeRegistry, registry, ), {]
[SymbolScope, globalScope, =, null, ;, private, final, JSTypeRegistry, registry, ;, SymbolTable, (, JSTypeRegistry, registry, ), {, this, ., registry, =]
[., registry, =, registry, ;, }, @, Override, public, Iterable, <, Reference, >, getReferences, (, Symbol, symbol, ), {, return]
[., registry, =, registry, ;, }, @, Override, public, Iterable, <, Reference, >, getReferences, (, Symbol, symbol, ), {, return]
[;, }, @, Override, public, Iterable, <, Reference, >, getReferences, (, Symbol, symbol, ), {, return, Collections, ., unmodifiableCollection, (]
[;, }, @, Override, public, Iterable, <, Reference, >, getReferences, (, Symbol, symbol, ), {, return, Collections, ., unmodifiableCollection, (]
[;, }, @, Override, public, Iterable, <, Reference, >, getReferences, (, Symbol, symbol, ), {, return, Collections, ., unmodifiableCollection, (]
[references, ., values, (, ), ), ;, }, public, List, <, Reference, >, getReferenceList, (, Symbol, symbol, ), {, return]
[references, ., values, (, ), ), ;, }, public, List, <, Reference, >, getReferenceList, (, Symbol, symbol, ), {, return]
[), ), ;, }, public, List, <, Reference, >, getReferenceList, (, Symbol, symbol, ), {, return, ImmutableList, ., copyOf, (]
[), ), ;, }, public, List, <, Reference, >, getReferenceList, (, Symbol, symbol, ), {, return, ImmutableList, ., copyOf, (]
[), ), ;, }, public, List, <, Reference, >, getReferenceList, (, Symbol, symbol, ), {, return, ImmutableList, ., copyOf, (]
[references, ., values, (, ), ), ;, }, @, Override, public, Iterable, <, Symbol, >, getAllSymbols, (, ), {, return]
[references, ., values, (, ), ), ;, }, @, Override, public, Iterable, <, Symbol, >, getAllSymbols, (, ), {, return]
[), ), ;, }, @, Override, public, Iterable, <, Symbol, >, getAllSymbols, (, ), {, return, Collections, ., unmodifiableCollection, (]
[), ), ;, }, @, Override, public, Iterable, <, Symbol, >, getAllSymbols, (, ), {, return, Collections, ., unmodifiableCollection, (]
[(, ), ), ;, }, public, List, <, Symbol, >, getAllSymbolsSorted, (, ), {, List, <, Symbol, >, sortedSymbols, =]
[(, ), ), ;, }, public, List, <, Symbol, >, getAllSymbolsSorted, (, ), {, List, <, Symbol, >, sortedSymbols, =]
[}, public, List, <, Symbol, >, getAllSymbolsSorted, (, ), {, List, <, Symbol, >, sortedSymbols, =, Lists, ., newArrayList, (]
[}, public, List, <, Symbol, >, getAllSymbolsSorted, (, ), {, List, <, Symbol, >, sortedSymbols, =, Lists, ., newArrayList, (]
[(, ), {, List, <, Symbol, >, sortedSymbols, =, Lists, ., newArrayList, (, symbols, ., values, (, ), ), ;]
[(, ), {, List, <, Symbol, >, sortedSymbols, =, Lists, ., newArrayList, (, symbols, ., values, (, ), ), ;]
[<, Symbol, >, sortedSymbols, =, Lists, ., newArrayList, (, symbols, ., values, (, ), ), ;, Collections, ., sort, (]
[>, sortedSymbols, =, Lists, ., newArrayList, (, symbols, ., values, (, ), ), ;, Collections, ., sort, (, sortedSymbols, ,]
[(, symbols, ., values, (, ), ), ;, Collections, ., sort, (, sortedSymbols, ,, getNaturalSymbolOrdering, (, ), ), ;, return]
[,, getNaturalSymbolOrdering, (, ), ), ;, return, sortedSymbols, ;, }, public, Ordering, <, Symbol, >, getNaturalSymbolOrdering, (, ), {, return]
[>, getNaturalSymbolOrdering, (, ), {, return, SYMBOL_ORDERING, ;, }, @, Override, public, SymbolScope, getScope, (, Symbol, slot, ), {, return]
[>, getNaturalSymbolOrdering, (, ), {, return, SYMBOL_ORDERING, ;, }, @, Override, public, SymbolScope, getScope, (, Symbol, slot, ), {, return]
[Symbol, slot, ), {, return, slot, ., scope, ;, }, public, Collection, <, JSDocInfo, >, getAllJSDocInfo, (, ), {, return]
[Symbol, slot, ), {, return, slot, ., scope, ;, }, public, Collection, <, JSDocInfo, >, getAllJSDocInfo, (, ), {, return]
[return, slot, ., scope, ;, }, public, Collection, <, JSDocInfo, >, getAllJSDocInfo, (, ), {, return, Collections, ., unmodifiableList, (]
[(, docInfos, ), ;, }, public, Symbol, declareInferredSymbol, (, SymbolScope, scope, ,, String, name, ,, Node, declNode, ), {, return]
[), ;, }, public, Symbol, declareInferredSymbol, (, SymbolScope, scope, ,, String, name, ,, Node, declNode, ), {, return, declareSymbol, (]
[}, public, Symbol, declareInferredSymbol, (, SymbolScope, scope, ,, String, name, ,, Node, declNode, ), {, return, declareSymbol, (, name, ,]
[Symbol, declareInferredSymbol, (, SymbolScope, scope, ,, String, name, ,, Node, declNode, ), {, return, declareSymbol, (, name, ,, null, ,]
[(, SymbolScope, scope, ,, String, name, ,, Node, declNode, ), {, return, declareSymbol, (, name, ,, null, ,, true, ,]
[scope, ,, String, name, ,, Node, declNode, ), {, return, declareSymbol, (, name, ,, null, ,, true, ,, scope, ,]
[String, name, ,, Node, declNode, ), {, return, declareSymbol, (, name, ,, null, ,, true, ,, scope, ,, declNode, ,]
[,, scope, ,, declNode, ,, null, ), ;, }, public, SymbolScope, getEnclosingScope, (, Node, n, ), {, Node, current, =]
[,, scope, ,, declNode, ,, null, ), ;, }, public, SymbolScope, getEnclosingScope, (, Node, n, ), {, Node, current, =]
[}, public, SymbolScope, getEnclosingScope, (, Node, n, ), {, Node, current, =, n, ., getParent, (, ), ;, if, (]
[}, public, SymbolScope, getEnclosingScope, (, Node, n, ), {, Node, current, =, n, ., getParent, (, ), ;, if, (]
[}, public, SymbolScope, getEnclosingScope, (, Node, n, ), {, Node, current, =, n, ., getParent, (, ), ;, if, (]
[n, ), {, Node, current, =, n, ., getParent, (, ), ;, if, (, n, ., isName, (, ), &&]
[n, ), {, Node, current, =, n, ., getParent, (, ), ;, if, (, n, ., isName, (, ), &&]
[n, ), {, Node, current, =, n, ., getParent, (, ), ;, if, (, n, ., isName, (, ), &&]
[;, if, (, n, ., isName, (, ), &&, n, ., getParent, (, ), ., isFunction, (, ), ), {]
[(, n, ., isName, (, ), &&, n, ., getParent, (, ), ., isFunction, (, ), ), {, current, =]
[(, n, ., isName, (, ), &&, n, ., getParent, (, ), ., isFunction, (, ), ), {, current, =]
[(, ), ., isFunction, (, ), ), {, current, =, current, ., getParent, (, ), ;, }, for, (, ;]
[(, ), ., isFunction, (, ), ), {, current, =, current, ., getParent, (, ), ;, }, for, (, ;]
[., isFunction, (, ), ), {, current, =, current, ., getParent, (, ), ;, }, for, (, ;, current, !=]
[(, ), ), {, current, =, current, ., getParent, (, ), ;, }, for, (, ;, current, !=, null, ;]
[), {, current, =, current, ., getParent, (, ), ;, }, for, (, ;, current, !=, null, ;, current, =]
[), {, current, =, current, ., getParent, (, ), ;, }, for, (, ;, current, !=, null, ;, current, =]
[;, }, for, (, ;, current, !=, null, ;, current, =, current, ., getParent, (, ), ), {, if, (]
[;, }, for, (, ;, current, !=, null, ;, current, =, current, ., getParent, (, ), ), {, if, (]
[;, current, !=, null, ;, current, =, current, ., getParent, (, ), ), {, if, (, scopes, ., containsKey, (]
[current, =, current, ., getParent, (, ), ), {, if, (, scopes, ., containsKey, (, current, ), ), {, return]
[current, =, current, ., getParent, (, ), ), {, if, (, scopes, ., containsKey, (, current, ), ), {, return]
[getParent, (, ), ), {, if, (, scopes, ., containsKey, (, current, ), ), {, return, scopes, ., get, (]
[(, scopes, ., containsKey, (, current, ), ), {, return, scopes, ., get, (, current, ), ;, }, }, return]
[}, }, return, null, ;, }, public, Symbol, getParameterInFunction, (, Symbol, sym, ,, String, paramName, ), {, SymbolScope, scope, =]
[return, null, ;, }, public, Symbol, getParameterInFunction, (, Symbol, sym, ,, String, paramName, ), {, SymbolScope, scope, =, getScopeInFunction, (]
[Symbol, getParameterInFunction, (, Symbol, sym, ,, String, paramName, ), {, SymbolScope, scope, =, getScopeInFunction, (, sym, ), ;, if, (]
[Symbol, getParameterInFunction, (, Symbol, sym, ,, String, paramName, ), {, SymbolScope, scope, =, getScopeInFunction, (, sym, ), ;, if, (]
[(, Symbol, sym, ,, String, paramName, ), {, SymbolScope, scope, =, getScopeInFunction, (, sym, ), ;, if, (, scope, !=]
[), {, SymbolScope, scope, =, getScopeInFunction, (, sym, ), ;, if, (, scope, !=, null, ), {, Symbol, param, =]
[), {, SymbolScope, scope, =, getScopeInFunction, (, sym, ), ;, if, (, scope, !=, null, ), {, Symbol, param, =]
[=, getScopeInFunction, (, sym, ), ;, if, (, scope, !=, null, ), {, Symbol, param, =, scope, ., getSlot, (]
[;, if, (, scope, !=, null, ), {, Symbol, param, =, scope, ., getSlot, (, paramName, ), ;, if, (]
[;, if, (, scope, !=, null, ), {, Symbol, param, =, scope, ., getSlot, (, paramName, ), ;, if, (]
[;, if, (, scope, !=, null, ), {, Symbol, param, =, scope, ., getSlot, (, paramName, ), ;, if, (]
[(, scope, !=, null, ), {, Symbol, param, =, scope, ., getSlot, (, paramName, ), ;, if, (, param, !=]
[!=, null, ), {, Symbol, param, =, scope, ., getSlot, (, paramName, ), ;, if, (, param, !=, null, &&]
[!=, null, ), {, Symbol, param, =, scope, ., getSlot, (, paramName, ), ;, if, (, param, !=, null, &&]
[!=, null, ), {, Symbol, param, =, scope, ., getSlot, (, paramName, ), ;, if, (, param, !=, null, &&]
[Symbol, param, =, scope, ., getSlot, (, paramName, ), ;, if, (, param, !=, null, &&, param, ., scope, ==]
[., getSlot, (, paramName, ), ;, if, (, param, !=, null, &&, param, ., scope, ==, scope, ), {, return]
[;, if, (, param, !=, null, &&, param, ., scope, ==, scope, ), {, return, param, ;, }, }, return]
[return, param, ;, }, }, return, null, ;, }, private, SymbolScope, getScopeInFunction, (, Symbol, sym, ), {, FunctionType, type, =]
[return, param, ;, }, }, return, null, ;, }, private, SymbolScope, getScopeInFunction, (, Symbol, sym, ), {, FunctionType, type, =]
[}, private, SymbolScope, getScopeInFunction, (, Symbol, sym, ), {, FunctionType, type, =, sym, ., getFunctionType, (, ), ;, if, (]
[}, private, SymbolScope, getScopeInFunction, (, Symbol, sym, ), {, FunctionType, type, =, sym, ., getFunctionType, (, ), ;, if, (]
[SymbolScope, getScopeInFunction, (, Symbol, sym, ), {, FunctionType, type, =, sym, ., getFunctionType, (, ), ;, if, (, type, ==]
[sym, ), {, FunctionType, type, =, sym, ., getFunctionType, (, ), ;, if, (, type, ==, null, ), {, return]
[sym, ., getFunctionType, (, ), ;, if, (, type, ==, null, ), {, return, null, ;, }, Node, functionNode, =]
[sym, ., getFunctionType, (, ), ;, if, (, type, ==, null, ), {, return, null, ;, }, Node, functionNode, =]
[type, ==, null, ), {, return, null, ;, }, Node, functionNode, =, type, ., getSource, (, ), ;, if, (]
[type, ==, null, ), {, return, null, ;, }, Node, functionNode, =, type, ., getSource, (, ), ;, if, (]
[null, ), {, return, null, ;, }, Node, functionNode, =, type, ., getSource, (, ), ;, if, (, functionNode, ==]
[null, ;, }, Node, functionNode, =, type, ., getSource, (, ), ;, if, (, functionNode, ==, null, ), {, return]
[functionNode, =, type, ., getSource, (, ), ;, if, (, functionNode, ==, null, ), {, return, null, ;, }, return]
[functionNode, =, type, ., getSource, (, ), ;, if, (, functionNode, ==, null, ), {, return, null, ;, }, return]
[getSource, (, ), ;, if, (, functionNode, ==, null, ), {, return, null, ;, }, return, scopes, ., get, (]
[}, return, scopes, ., get, (, functionNode, ), ;, }, public, Symbol, getSymbolForScope, (, SymbolScope, scope, ), {, if, (]
[}, return, scopes, ., get, (, functionNode, ), ;, }, public, Symbol, getSymbolForScope, (, SymbolScope, scope, ), {, if, (]
[}, return, scopes, ., get, (, functionNode, ), ;, }, public, Symbol, getSymbolForScope, (, SymbolScope, scope, ), {, if, (]
[functionNode, ), ;, }, public, Symbol, getSymbolForScope, (, SymbolScope, scope, ), {, if, (, scope, ., getSymbolForScope, (, ), ==]
[}, public, Symbol, getSymbolForScope, (, SymbolScope, scope, ), {, if, (, scope, ., getSymbolForScope, (, ), ==, null, ), {]
[}, public, Symbol, getSymbolForScope, (, SymbolScope, scope, ), {, if, (, scope, ., getSymbolForScope, (, ), ==, null, ), {]
[(, SymbolScope, scope, ), {, if, (, scope, ., getSymbolForScope, (, ), ==, null, ), {, scope, ., setSymbolForScope, (]
[scope, ), {, if, (, scope, ., getSymbolForScope, (, ), ==, null, ), {, scope, ., setSymbolForScope, (, findSymbolForScope, (]
[., getSymbolForScope, (, ), ==, null, ), {, scope, ., setSymbolForScope, (, findSymbolForScope, (, scope, ), ), ;, }, return]
[., getSymbolForScope, (, ), ==, null, ), {, scope, ., setSymbolForScope, (, findSymbolForScope, (, scope, ), ), ;, }, return]
[}, return, scope, ., getSymbolForScope, (, ), ;, }, private, Symbol, findSymbolForScope, (, SymbolScope, scope, ), {, Node, rootNode, =]
[}, return, scope, ., getSymbolForScope, (, ), ;, }, private, Symbol, findSymbolForScope, (, SymbolScope, scope, ), {, Node, rootNode, =]
[}, private, Symbol, findSymbolForScope, (, SymbolScope, scope, ), {, Node, rootNode, =, scope, ., getRootNode, (, ), ;, if, (]
[}, private, Symbol, findSymbolForScope, (, SymbolScope, scope, ), {, Node, rootNode, =, scope, ., getRootNode, (, ), ;, if, (]
[}, private, Symbol, findSymbolForScope, (, SymbolScope, scope, ), {, Node, rootNode, =, scope, ., getRootNode, (, ), ;, if, (]
[scope, ), {, Node, rootNode, =, scope, ., getRootNode, (, ), ;, if, (, rootNode, ., getParent, (, ), ==]
[rootNode, =, scope, ., getRootNode, (, ), ;, if, (, rootNode, ., getParent, (, ), ==, null, ), {, return]
[rootNode, =, scope, ., getRootNode, (, ), ;, if, (, rootNode, ., getParent, (, ), ==, null, ), {, return]
[getRootNode, (, ), ;, if, (, rootNode, ., getParent, (, ), ==, null, ), {, return, globalScope, ., getSlot, (]
[rootNode, ., getParent, (, ), ==, null, ), {, return, globalScope, ., getSlot, (, GLOBAL_THIS, ), ;, }, if, (]
[., getParent, (, ), ==, null, ), {, return, globalScope, ., getSlot, (, GLOBAL_THIS, ), ;, }, if, (, !]
[., getParent, (, ), ==, null, ), {, return, globalScope, ., getSlot, (, GLOBAL_THIS, ), ;, }, if, (, !]
[return, globalScope, ., getSlot, (, GLOBAL_THIS, ), ;, }, if, (, !, rootNode, ., isFunction, (, ), ), {, return]
[), ;, }, if, (, !, rootNode, ., isFunction, (, ), ), {, return, null, ;, }, String, name, =]
[), ;, }, if, (, !, rootNode, ., isFunction, (, ), ), {, return, null, ;, }, String, name, =]
[(, !, rootNode, ., isFunction, (, ), ), {, return, null, ;, }, String, name, =, NodeUtil, ., getBestLValueName, (]
[(, !, rootNode, ., isFunction, (, ), ), {, return, null, ;, }, String, name, =, NodeUtil, ., getBestLValueName, (]
[isFunction, (, ), ), {, return, null, ;, }, String, name, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (]
[return, null, ;, }, String, name, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rootNode, ), ), ;, return]
[return, null, ;, }, String, name, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rootNode, ), ), ;, return]
[return, null, ;, }, String, name, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rootNode, ), ), ;, return]
[;, }, String, name, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rootNode, ), ), ;, return, name, ==]
[String, name, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rootNode, ), ), ;, return, name, ==, null, ?]
[=, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rootNode, ), ), ;, return, name, ==, null, ?, null, :]
[=, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rootNode, ), ), ;, return, name, ==, null, ?, null, :]
[=, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rootNode, ), ), ;, return, name, ==, null, ?, null, :]
[(, rootNode, ), ), ;, return, name, ==, null, ?, null, :, scope, ., getParentScope, (, ), ., getQualifiedSlot, (]
[), ., getQualifiedSlot, (, name, ), ;, }, public, Iterable, <, Symbol, >, getAllSymbolsForTypeOf, (, Symbol, sym, ), {, return]
[getQualifiedSlot, (, name, ), ;, }, public, Iterable, <, Symbol, >, getAllSymbolsForTypeOf, (, Symbol, sym, ), {, return, getAllSymbolsForType, (]
[getQualifiedSlot, (, name, ), ;, }, public, Iterable, <, Symbol, >, getAllSymbolsForTypeOf, (, Symbol, sym, ), {, return, getAllSymbolsForType, (]
[), {, return, getAllSymbolsForType, (, sym, ., getType, (, ), ), ;, }, public, SymbolScope, getGlobalScope, (, ), {, return]
[;, }, public, SymbolScope, getGlobalScope, (, ), {, return, globalScope, ;, }, public, Symbol, getSymbolDeclaredBy, (, FunctionType, fn, ), {]
[;, }, public, SymbolScope, getGlobalScope, (, ), {, return, globalScope, ;, }, public, Symbol, getSymbolDeclaredBy, (, FunctionType, fn, ), {]
[getGlobalScope, (, ), {, return, globalScope, ;, }, public, Symbol, getSymbolDeclaredBy, (, FunctionType, fn, ), {, Preconditions, ., checkState, (]
[getGlobalScope, (, ), {, return, globalScope, ;, }, public, Symbol, getSymbolDeclaredBy, (, FunctionType, fn, ), {, Preconditions, ., checkState, (]
[getGlobalScope, (, ), {, return, globalScope, ;, }, public, Symbol, getSymbolDeclaredBy, (, FunctionType, fn, ), {, Preconditions, ., checkState, (]
[;, }, public, Symbol, getSymbolDeclaredBy, (, FunctionType, fn, ), {, Preconditions, ., checkState, (, fn, ., isConstructor, (, ), ||]
[;, }, public, Symbol, getSymbolDeclaredBy, (, FunctionType, fn, ), {, Preconditions, ., checkState, (, fn, ., isConstructor, (, ), ||]
[Preconditions, ., checkState, (, fn, ., isConstructor, (, ), ||, fn, ., isInterface, (, ), ), ;, ObjectType, instanceType, =]
[Preconditions, ., checkState, (, fn, ., isConstructor, (, ), ||, fn, ., isInterface, (, ), ), ;, ObjectType, instanceType, =]
[(, ), ||, fn, ., isInterface, (, ), ), ;, ObjectType, instanceType, =, fn, ., getInstanceType, (, ), ;, return]
[||, fn, ., isInterface, (, ), ), ;, ObjectType, instanceType, =, fn, ., getInstanceType, (, ), ;, return, getSymbolForName, (]
[||, fn, ., isInterface, (, ), ), ;, ObjectType, instanceType, =, fn, ., getInstanceType, (, ), ;, return, getSymbolForName, (]
[), ;, ObjectType, instanceType, =, fn, ., getInstanceType, (, ), ;, return, getSymbolForName, (, fn, ., getSource, (, ), ,]
[), ;, ObjectType, instanceType, =, fn, ., getInstanceType, (, ), ;, return, getSymbolForName, (, fn, ., getSource, (, ), ,]
[(, ), ,, instanceType, ., getReferenceName, (, ), ), ;, }, public, Symbol, getSymbolDeclaredBy, (, EnumType, enumType, ), {, return]
[,, instanceType, ., getReferenceName, (, ), ), ;, }, public, Symbol, getSymbolDeclaredBy, (, EnumType, enumType, ), {, return, getSymbolForName, (]
[., getReferenceName, (, ), ), ;, }, public, Symbol, getSymbolDeclaredBy, (, EnumType, enumType, ), {, return, getSymbolForName, (, null, ,]
[., getReferenceName, (, ), ), ;, }, public, Symbol, getSymbolDeclaredBy, (, EnumType, enumType, ), {, return, getSymbolForName, (, null, ,]
[., getReferenceName, (, ), ), ;, }, public, Symbol, getSymbolDeclaredBy, (, EnumType, enumType, ), {, return, getSymbolForName, (, null, ,]
[(, ), ., getReferenceName, (, ), ), ;, }, public, Symbol, getSymbolForInstancesOf, (, Symbol, sym, ), {, FunctionType, fn, =]
[(, ), ., getReferenceName, (, ), ), ;, }, public, Symbol, getSymbolForInstancesOf, (, Symbol, sym, ), {, FunctionType, fn, =]
[}, public, Symbol, getSymbolForInstancesOf, (, Symbol, sym, ), {, FunctionType, fn, =, sym, ., getFunctionType, (, ), ;, if, (]
[}, public, Symbol, getSymbolForInstancesOf, (, Symbol, sym, ), {, FunctionType, fn, =, sym, ., getFunctionType, (, ), ;, if, (]
[}, public, Symbol, getSymbolForInstancesOf, (, Symbol, sym, ), {, FunctionType, fn, =, sym, ., getFunctionType, (, ), ;, if, (]
[Symbol, getSymbolForInstancesOf, (, Symbol, sym, ), {, FunctionType, fn, =, sym, ., getFunctionType, (, ), ;, if, (, fn, !=]
[(, Symbol, sym, ), {, FunctionType, fn, =, sym, ., getFunctionType, (, ), ;, if, (, fn, !=, null, &&]
[(, Symbol, sym, ), {, FunctionType, fn, =, sym, ., getFunctionType, (, ), ;, if, (, fn, !=, null, &&]
[sym, ., getFunctionType, (, ), ;, if, (, fn, !=, null, &&, fn, ., isNominalConstructor, (, ), ), {, return]
[getFunctionType, (, ), ;, if, (, fn, !=, null, &&, fn, ., isNominalConstructor, (, ), ), {, return, getSymbolForInstancesOf, (]
[(, fn, !=, null, &&, fn, ., isNominalConstructor, (, ), ), {, return, getSymbolForInstancesOf, (, fn, ), ;, }, return]
[{, return, getSymbolForInstancesOf, (, fn, ), ;, }, return, null, ;, }, public, Symbol, getSymbolForInstancesOf, (, FunctionType, fn, ), {]
[{, return, getSymbolForInstancesOf, (, fn, ), ;, }, return, null, ;, }, public, Symbol, getSymbolForInstancesOf, (, FunctionType, fn, ), {]
[fn, ), ;, }, return, null, ;, }, public, Symbol, getSymbolForInstancesOf, (, FunctionType, fn, ), {, Preconditions, ., checkState, (]
[fn, ), ;, }, return, null, ;, }, public, Symbol, getSymbolForInstancesOf, (, FunctionType, fn, ), {, Preconditions, ., checkState, (]
[fn, ), ;, }, return, null, ;, }, public, Symbol, getSymbolForInstancesOf, (, FunctionType, fn, ), {, Preconditions, ., checkState, (]
[;, }, public, Symbol, getSymbolForInstancesOf, (, FunctionType, fn, ), {, Preconditions, ., checkState, (, fn, ., isConstructor, (, ), ||]
[;, }, public, Symbol, getSymbolForInstancesOf, (, FunctionType, fn, ), {, Preconditions, ., checkState, (, fn, ., isConstructor, (, ), ||]
[Preconditions, ., checkState, (, fn, ., isConstructor, (, ), ||, fn, ., isInterface, (, ), ), ;, ObjectType, pType, =]
[Preconditions, ., checkState, (, fn, ., isConstructor, (, ), ||, fn, ., isInterface, (, ), ), ;, ObjectType, pType, =]
[(, ), ||, fn, ., isInterface, (, ), ), ;, ObjectType, pType, =, fn, ., getPrototype, (, ), ;, return]
[||, fn, ., isInterface, (, ), ), ;, ObjectType, pType, =, fn, ., getPrototype, (, ), ;, return, getSymbolForName, (]
[||, fn, ., isInterface, (, ), ), ;, ObjectType, pType, =, fn, ., getPrototype, (, ), ;, return, getSymbolForName, (]
[), ;, ObjectType, pType, =, fn, ., getPrototype, (, ), ;, return, getSymbolForName, (, fn, ., getSource, (, ), ,]
[), ;, ObjectType, pType, =, fn, ., getPrototype, (, ), ;, return, getSymbolForName, (, fn, ., getSource, (, ), ,]
[., getReferenceName, (, ), ), ;, }, private, Symbol, getSymbolForName, (, Node, source, ,, String, name, ), {, if, (]
[., getReferenceName, (, ), ), ;, }, private, Symbol, getSymbolForName, (, Node, source, ,, String, name, ), {, if, (]
[., getReferenceName, (, ), ), ;, }, private, Symbol, getSymbolForName, (, Node, source, ,, String, name, ), {, if, (]
[(, ), ), ;, }, private, Symbol, getSymbolForName, (, Node, source, ,, String, name, ), {, if, (, name, ==]
[), ;, }, private, Symbol, getSymbolForName, (, Node, source, ,, String, name, ), {, if, (, name, ==, null, ||]
[), ;, }, private, Symbol, getSymbolForName, (, Node, source, ,, String, name, ), {, if, (, name, ==, null, ||]
[}, private, Symbol, getSymbolForName, (, Node, source, ,, String, name, ), {, if, (, name, ==, null, ||, globalScope, ==]
[(, Node, source, ,, String, name, ), {, if, (, name, ==, null, ||, globalScope, ==, null, ), {, return]
[), {, if, (, name, ==, null, ||, globalScope, ==, null, ), {, return, null, ;, }, SymbolScope, scope, =]
[), {, if, (, name, ==, null, ||, globalScope, ==, null, ), {, return, null, ;, }, SymbolScope, scope, =]
[), {, if, (, name, ==, null, ||, globalScope, ==, null, ), {, return, null, ;, }, SymbolScope, scope, =]
[if, (, name, ==, null, ||, globalScope, ==, null, ), {, return, null, ;, }, SymbolScope, scope, =, source, ==]
[name, ==, null, ||, globalScope, ==, null, ), {, return, null, ;, }, SymbolScope, scope, =, source, ==, null, ?]
[null, ||, globalScope, ==, null, ), {, return, null, ;, }, SymbolScope, scope, =, source, ==, null, ?, globalScope, :]
[globalScope, ==, null, ), {, return, null, ;, }, SymbolScope, scope, =, source, ==, null, ?, globalScope, :, getEnclosingScope, (]
[{, return, null, ;, }, SymbolScope, scope, =, source, ==, null, ?, globalScope, :, getEnclosingScope, (, source, ), ;, return]
[{, return, null, ;, }, SymbolScope, scope, =, source, ==, null, ?, globalScope, :, getEnclosingScope, (, source, ), ;, return]
[{, return, null, ;, }, SymbolScope, scope, =, source, ==, null, ?, globalScope, :, getEnclosingScope, (, source, ), ;, return]
[null, ;, }, SymbolScope, scope, =, source, ==, null, ?, globalScope, :, getEnclosingScope, (, source, ), ;, return, scope, ==]
[}, SymbolScope, scope, =, source, ==, null, ?, globalScope, :, getEnclosingScope, (, source, ), ;, return, scope, ==, null, ?]
[scope, =, source, ==, null, ?, globalScope, :, getEnclosingScope, (, source, ), ;, return, scope, ==, null, ?, null, :]
[scope, =, source, ==, null, ?, globalScope, :, getEnclosingScope, (, source, ), ;, return, scope, ==, null, ?, null, :]
[null, ?, globalScope, :, getEnclosingScope, (, source, ), ;, return, scope, ==, null, ?, null, :, scope, ., getQualifiedSlot, (]
[., getQualifiedSlot, (, name, ), ;, }, public, List, <, Symbol, >, getAllSymbolsForType, (, JSType, type, ), {, if, (]
[., getQualifiedSlot, (, name, ), ;, }, public, List, <, Symbol, >, getAllSymbolsForType, (, JSType, type, ), {, if, (]
[(, name, ), ;, }, public, List, <, Symbol, >, getAllSymbolsForType, (, JSType, type, ), {, if, (, type, ==]
[}, public, List, <, Symbol, >, getAllSymbolsForType, (, JSType, type, ), {, if, (, type, ==, null, ), {, return]
[}, public, List, <, Symbol, >, getAllSymbolsForType, (, JSType, type, ), {, if, (, type, ==, null, ), {, return]
[), {, if, (, type, ==, null, ), {, return, ImmutableList, ., of, (, ), ;, }, UnionType, unionType, =]
[), {, if, (, type, ==, null, ), {, return, ImmutableList, ., of, (, ), ;, }, UnionType, unionType, =]
[{, return, ImmutableList, ., of, (, ), ;, }, UnionType, unionType, =, type, ., toMaybeUnionType, (, ), ;, if, (]
[{, return, ImmutableList, ., of, (, ), ;, }, UnionType, unionType, =, type, ., toMaybeUnionType, (, ), ;, if, (]
[ImmutableList, ., of, (, ), ;, }, UnionType, unionType, =, type, ., toMaybeUnionType, (, ), ;, if, (, unionType, !=]
[=, type, ., toMaybeUnionType, (, ), ;, if, (, unionType, !=, null, ), {, List, <, Symbol, >, result, =]
[=, type, ., toMaybeUnionType, (, ), ;, if, (, unionType, !=, null, ), {, List, <, Symbol, >, result, =]
[(, ), ;, if, (, unionType, !=, null, ), {, List, <, Symbol, >, result, =, Lists, ., newArrayListWithExpectedSize, (]
[), {, List, <, Symbol, >, result, =, Lists, ., newArrayListWithExpectedSize, (, 2, ), ;, for, (, JSType, alt, :]
[), {, List, <, Symbol, >, result, =, Lists, ., newArrayListWithExpectedSize, (, 2, ), ;, for, (, JSType, alt, :]
[newArrayListWithExpectedSize, (, 2, ), ;, for, (, JSType, alt, :, unionType, ., getAlternates, (, ), ), {, Symbol, altSym, =]
[2, ), ;, for, (, JSType, alt, :, unionType, ., getAlternates, (, ), ), {, Symbol, altSym, =, getSymbolForTypeHelper, (]
[;, for, (, JSType, alt, :, unionType, ., getAlternates, (, ), ), {, Symbol, altSym, =, getSymbolForTypeHelper, (, alt, ,]
[:, unionType, ., getAlternates, (, ), ), {, Symbol, altSym, =, getSymbolForTypeHelper, (, alt, ,, true, ), ;, if, (]
[:, unionType, ., getAlternates, (, ), ), {, Symbol, altSym, =, getSymbolForTypeHelper, (, alt, ,, true, ), ;, if, (]
[., getAlternates, (, ), ), {, Symbol, altSym, =, getSymbolForTypeHelper, (, alt, ,, true, ), ;, if, (, altSym, !=]
[), ), {, Symbol, altSym, =, getSymbolForTypeHelper, (, alt, ,, true, ), ;, if, (, altSym, !=, null, ), {]
[), ), {, Symbol, altSym, =, getSymbolForTypeHelper, (, alt, ,, true, ), ;, if, (, altSym, !=, null, ), {]
[altSym, =, getSymbolForTypeHelper, (, alt, ,, true, ), ;, if, (, altSym, !=, null, ), {, result, ., add, (]
[true, ), ;, if, (, altSym, !=, null, ), {, result, ., add, (, altSym, ), ;, }, }, return]
[!=, null, ), {, result, ., add, (, altSym, ), ;, }, }, return, result, ;, }, Symbol, result, =]
[), {, result, ., add, (, altSym, ), ;, }, }, return, result, ;, }, Symbol, result, =, getSymbolForTypeHelper, (]
[result, ., add, (, altSym, ), ;, }, }, return, result, ;, }, Symbol, result, =, getSymbolForTypeHelper, (, type, ,]
[altSym, ), ;, }, }, return, result, ;, }, Symbol, result, =, getSymbolForTypeHelper, (, type, ,, true, ), ;, return]
[altSym, ), ;, }, }, return, result, ;, }, Symbol, result, =, getSymbolForTypeHelper, (, type, ,, true, ), ;, return]
[altSym, ), ;, }, }, return, result, ;, }, Symbol, result, =, getSymbolForTypeHelper, (, type, ,, true, ), ;, return]
[;, }, }, return, result, ;, }, Symbol, result, =, getSymbolForTypeHelper, (, type, ,, true, ), ;, return, result, ==]
[}, return, result, ;, }, Symbol, result, =, getSymbolForTypeHelper, (, type, ,, true, ), ;, return, result, ==, null, ?]
[}, return, result, ;, }, Symbol, result, =, getSymbolForTypeHelper, (, type, ,, true, ), ;, return, result, ==, null, ?]
[(, type, ,, true, ), ;, return, result, ==, null, ?, ImmutableList, ., <, Symbol, >, of, (, ), :]
[(, type, ,, true, ), ;, return, result, ==, null, ?, ImmutableList, ., <, Symbol, >, of, (, ), :]
[), ;, return, result, ==, null, ?, ImmutableList, ., <, Symbol, >, of, (, ), :, ImmutableList, ., of, (]
[., of, (, result, ), ;, }, private, Symbol, getSymbolForTypeHelper, (, JSType, type, ,, boolean, linkToCtor, ), {, if, (]
[., of, (, result, ), ;, }, private, Symbol, getSymbolForTypeHelper, (, JSType, type, ,, boolean, linkToCtor, ), {, if, (]
[(, result, ), ;, }, private, Symbol, getSymbolForTypeHelper, (, JSType, type, ,, boolean, linkToCtor, ), {, if, (, type, ==]
[}, private, Symbol, getSymbolForTypeHelper, (, JSType, type, ,, boolean, linkToCtor, ), {, if, (, type, ==, null, ), {, return]
[JSType, type, ,, boolean, linkToCtor, ), {, if, (, type, ==, null, ), {, return, null, ;, }, if, (]
[JSType, type, ,, boolean, linkToCtor, ), {, if, (, type, ==, null, ), {, return, null, ;, }, if, (]
[(, type, ==, null, ), {, return, null, ;, }, if, (, type, ., isGlobalThisType, (, ), ), {, return]
[(, type, ==, null, ), {, return, null, ;, }, if, (, type, ., isGlobalThisType, (, ), ), {, return]
[), {, return, null, ;, }, if, (, type, ., isGlobalThisType, (, ), ), {, return, globalScope, ., getSlot, (]
[(, type, ., isGlobalThisType, (, ), ), {, return, globalScope, ., getSlot, (, GLOBAL_THIS, ), ;, }, else, if, (]
[(, type, ., isGlobalThisType, (, ), ), {, return, globalScope, ., getSlot, (, GLOBAL_THIS, ), ;, }, else, if, (]
[return, globalScope, ., getSlot, (, GLOBAL_THIS, ), ;, }, else, if, (, type, ., isNominalConstructor, (, ), ), {, return]
[return, globalScope, ., getSlot, (, GLOBAL_THIS, ), ;, }, else, if, (, type, ., isNominalConstructor, (, ), ), {, return]
[., getSlot, (, GLOBAL_THIS, ), ;, }, else, if, (, type, ., isNominalConstructor, (, ), ), {, return, linkToCtor, ?]
[., getSlot, (, GLOBAL_THIS, ), ;, }, else, if, (, type, ., isNominalConstructor, (, ), ), {, return, linkToCtor, ?]
[), ;, }, else, if, (, type, ., isNominalConstructor, (, ), ), {, return, linkToCtor, ?, globalScope, ., getSlot, (]
[else, if, (, type, ., isNominalConstructor, (, ), ), {, return, linkToCtor, ?, globalScope, ., getSlot, (, "Function", ), :]
[(, type, ., isNominalConstructor, (, ), ), {, return, linkToCtor, ?, globalScope, ., getSlot, (, "Function", ), :, getSymbolDeclaredBy, (]
[(, type, ., isNominalConstructor, (, ), ), {, return, linkToCtor, ?, globalScope, ., getSlot, (, "Function", ), :, getSymbolDeclaredBy, (]
[globalScope, ., getSlot, (, "Function", ), :, getSymbolDeclaredBy, (, type, ., toMaybeFunctionType, (, ), ), ;, }, else, if, (]
[globalScope, ., getSlot, (, "Function", ), :, getSymbolDeclaredBy, (, type, ., toMaybeFunctionType, (, ), ), ;, }, else, if, (]
[., toMaybeFunctionType, (, ), ), ;, }, else, if, (, type, ., isFunctionPrototypeType, (, ), ), {, FunctionType, ownerFn, =]
[., toMaybeFunctionType, (, ), ), ;, }, else, if, (, type, ., isFunctionPrototypeType, (, ), ), {, FunctionType, ownerFn, =]
[toMaybeFunctionType, (, ), ), ;, }, else, if, (, type, ., isFunctionPrototypeType, (, ), ), {, FunctionType, ownerFn, =, (]
[), ;, }, else, if, (, type, ., isFunctionPrototypeType, (, ), ), {, FunctionType, ownerFn, =, (, (, ObjectType, )]
[(, ), ), {, FunctionType, ownerFn, =, (, (, ObjectType, ), type, ), ., getOwnerFunction, (, ), ;, if, (]
[(, ), ), {, FunctionType, ownerFn, =, (, (, ObjectType, ), type, ), ., getOwnerFunction, (, ), ;, if, (]
[), ), {, FunctionType, ownerFn, =, (, (, ObjectType, ), type, ), ., getOwnerFunction, (, ), ;, if, (, !]
[), ), {, FunctionType, ownerFn, =, (, (, ObjectType, ), type, ), ., getOwnerFunction, (, ), ;, if, (, !]
[(, (, ObjectType, ), type, ), ., getOwnerFunction, (, ), ;, if, (, !, ownerFn, ., isConstructor, (, ), &&]
[(, ObjectType, ), type, ), ., getOwnerFunction, (, ), ;, if, (, !, ownerFn, ., isConstructor, (, ), &&, !]
[(, ObjectType, ), type, ), ., getOwnerFunction, (, ), ;, if, (, !, ownerFn, ., isConstructor, (, ), &&, !]
[), ;, if, (, !, ownerFn, ., isConstructor, (, ), &&, !, ownerFn, ., isInterface, (, ), ), {, return]
[!, ownerFn, ., isConstructor, (, ), &&, !, ownerFn, ., isInterface, (, ), ), {, return, null, ;, }, return]
[!, ownerFn, ., isConstructor, (, ), &&, !, ownerFn, ., isInterface, (, ), ), {, return, null, ;, }, return]
[., isConstructor, (, ), &&, !, ownerFn, ., isInterface, (, ), ), {, return, null, ;, }, return, linkToCtor, ?]
[(, ), &&, !, ownerFn, ., isInterface, (, ), ), {, return, null, ;, }, return, linkToCtor, ?, getSymbolDeclaredBy, (]
[!, ownerFn, ., isInterface, (, ), ), {, return, null, ;, }, return, linkToCtor, ?, getSymbolDeclaredBy, (, ownerFn, ), :]
[., isInterface, (, ), ), {, return, null, ;, }, return, linkToCtor, ?, getSymbolDeclaredBy, (, ownerFn, ), :, getSymbolForInstancesOf, (]
[null, ;, }, return, linkToCtor, ?, getSymbolDeclaredBy, (, ownerFn, ), :, getSymbolForInstancesOf, (, ownerFn, ), ;, }, else, if, (]
[null, ;, }, return, linkToCtor, ?, getSymbolDeclaredBy, (, ownerFn, ), :, getSymbolForInstancesOf, (, ownerFn, ), ;, }, else, if, (]
[:, getSymbolForInstancesOf, (, ownerFn, ), ;, }, else, if, (, type, ., isInstanceType, (, ), ), {, FunctionType, ownerFn, =]
[:, getSymbolForInstancesOf, (, ownerFn, ), ;, }, else, if, (, type, ., isInstanceType, (, ), ), {, FunctionType, ownerFn, =]
[getSymbolForInstancesOf, (, ownerFn, ), ;, }, else, if, (, type, ., isInstanceType, (, ), ), {, FunctionType, ownerFn, =, (]
[), ;, }, else, if, (, type, ., isInstanceType, (, ), ), {, FunctionType, ownerFn, =, (, (, ObjectType, )]
[isInstanceType, (, ), ), {, FunctionType, ownerFn, =, (, (, ObjectType, ), type, ), ., getConstructor, (, ), ;, return]
[isInstanceType, (, ), ), {, FunctionType, ownerFn, =, (, (, ObjectType, ), type, ), ., getConstructor, (, ), ;, return]
[), ), {, FunctionType, ownerFn, =, (, (, ObjectType, ), type, ), ., getConstructor, (, ), ;, return, linkToCtor, ?]
[{, FunctionType, ownerFn, =, (, (, ObjectType, ), type, ), ., getConstructor, (, ), ;, return, linkToCtor, ?, getSymbolDeclaredBy, (]
[=, (, (, ObjectType, ), type, ), ., getConstructor, (, ), ;, return, linkToCtor, ?, getSymbolDeclaredBy, (, ownerFn, ), :]
[(, ObjectType, ), type, ), ., getConstructor, (, ), ;, return, linkToCtor, ?, getSymbolDeclaredBy, (, ownerFn, ), :, getSymbolForInstancesOf, (]
[(, ), ;, return, linkToCtor, ?, getSymbolDeclaredBy, (, ownerFn, ), :, getSymbolForInstancesOf, (, ownerFn, ), ;, }, else, if, (]
[(, ), ;, return, linkToCtor, ?, getSymbolDeclaredBy, (, ownerFn, ), :, getSymbolForInstancesOf, (, ownerFn, ), ;, }, else, if, (]
[ownerFn, ), :, getSymbolForInstancesOf, (, ownerFn, ), ;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return]
[ownerFn, ), :, getSymbolForInstancesOf, (, ownerFn, ), ;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return]
[:, getSymbolForInstancesOf, (, ownerFn, ), ;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return, linkToCtor, ?]
[:, getSymbolForInstancesOf, (, ownerFn, ), ;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return, linkToCtor, ?]
[), ;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return, linkToCtor, ?, globalScope, ., getSlot, (]
[else, if, (, type, ., isFunctionType, (, ), ), {, return, linkToCtor, ?, globalScope, ., getSlot, (, "Function", ), :]
[else, if, (, type, ., isFunctionType, (, ), ), {, return, linkToCtor, ?, globalScope, ., getSlot, (, "Function", ), :]
[., isFunctionType, (, ), ), {, return, linkToCtor, ?, globalScope, ., getSlot, (, "Function", ), :, globalScope, ., getQualifiedSlot, (]
[linkToCtor, ?, globalScope, ., getSlot, (, "Function", ), :, globalScope, ., getQualifiedSlot, (, "Function.prototype", ), ;, }, else, if, (]
[linkToCtor, ?, globalScope, ., getSlot, (, "Function", ), :, globalScope, ., getQualifiedSlot, (, "Function.prototype", ), ;, }, else, if, (]
[linkToCtor, ?, globalScope, ., getSlot, (, "Function", ), :, globalScope, ., getQualifiedSlot, (, "Function.prototype", ), ;, }, else, if, (]
["Function", ), :, globalScope, ., getQualifiedSlot, (, "Function.prototype", ), ;, }, else, if, (, type, ., autoboxesTo, (, ), !=]
[., getQualifiedSlot, (, "Function.prototype", ), ;, }, else, if, (, type, ., autoboxesTo, (, ), !=, null, ), {, return]
[(, "Function.prototype", ), ;, }, else, if, (, type, ., autoboxesTo, (, ), !=, null, ), {, return, getSymbolForTypeHelper, (]
[(, "Function.prototype", ), ;, }, else, if, (, type, ., autoboxesTo, (, ), !=, null, ), {, return, getSymbolForTypeHelper, (]
[if, (, type, ., autoboxesTo, (, ), !=, null, ), {, return, getSymbolForTypeHelper, (, type, ., autoboxesTo, (, ), ,]
[!=, null, ), {, return, getSymbolForTypeHelper, (, type, ., autoboxesTo, (, ), ,, linkToCtor, ), ;, }, else, {, return]
[linkToCtor, ), ;, }, else, {, return, null, ;, }, }, public, String, toDebugString, (, ), {, StringBuilder, builder, =]
[}, public, String, toDebugString, (, ), {, StringBuilder, builder, =, new, StringBuilder, (, ), ;, for, (, Symbol, symbol, :]
[), {, StringBuilder, builder, =, new, StringBuilder, (, ), ;, for, (, Symbol, symbol, :, getAllSymbols, (, ), ), {]
[StringBuilder, builder, =, new, StringBuilder, (, ), ;, for, (, Symbol, symbol, :, getAllSymbols, (, ), ), {, toDebugString, (]
[=, new, StringBuilder, (, ), ;, for, (, Symbol, symbol, :, getAllSymbols, (, ), ), {, toDebugString, (, builder, ,]
[;, for, (, Symbol, symbol, :, getAllSymbols, (, ), ), {, toDebugString, (, builder, ,, symbol, ), ;, }, return]
[;, for, (, Symbol, symbol, :, getAllSymbols, (, ), ), {, toDebugString, (, builder, ,, symbol, ), ;, }, return]
[., toString, (, ), ;, }, private, void, toDebugString, (, StringBuilder, builder, ,, Symbol, symbol, ), {, SymbolScope, scope, =]
[., toString, (, ), ;, }, private, void, toDebugString, (, StringBuilder, builder, ,, Symbol, symbol, ), {, SymbolScope, scope, =]
[private, void, toDebugString, (, StringBuilder, builder, ,, Symbol, symbol, ), {, SymbolScope, scope, =, symbol, ., scope, ;, if, (]
[private, void, toDebugString, (, StringBuilder, builder, ,, Symbol, symbol, ), {, SymbolScope, scope, =, symbol, ., scope, ;, if, (]
[Symbol, symbol, ), {, SymbolScope, scope, =, symbol, ., scope, ;, if, (, scope, ., isGlobalScope, (, ), ), {]
[Symbol, symbol, ), {, SymbolScope, scope, =, symbol, ., scope, ;, if, (, scope, ., isGlobalScope, (, ), ), {]
[SymbolScope, scope, =, symbol, ., scope, ;, if, (, scope, ., isGlobalScope, (, ), ), {, builder, ., append, (]
[SymbolScope, scope, =, symbol, ., scope, ;, if, (, scope, ., isGlobalScope, (, ), ), {, builder, ., append, (]
[., scope, ;, if, (, scope, ., isGlobalScope, (, ), ), {, builder, ., append, (, String, ., format, (]
[;, if, (, scope, ., isGlobalScope, (, ), ), {, builder, ., append, (, String, ., format, (, "'%s' : in global scope:\n", ,]
[;, if, (, scope, ., isGlobalScope, (, ), ), {, builder, ., append, (, String, ., format, (, "'%s' : in global scope:\n", ,]
[append, (, String, ., format, (, "'%s' : in global scope:\n", ,, symbol, ., getName, (, ), ), ), ;, }, else, if, (]
[append, (, String, ., format, (, "'%s' : in global scope:\n", ,, symbol, ., getName, (, ), ), ), ;, }, else, if, (]
[append, (, String, ., format, (, "'%s' : in global scope:\n", ,, symbol, ., getName, (, ), ), ), ;, }, else, if, (]
["'%s' : in global scope:\n", ,, symbol, ., getName, (, ), ), ), ;, }, else, if, (, scope, ., getRootNode, (, ), !=]
[., getName, (, ), ), ), ;, }, else, if, (, scope, ., getRootNode, (, ), !=, null, ), {]
[., getName, (, ), ), ), ;, }, else, if, (, scope, ., getRootNode, (, ), !=, null, ), {]
[), ), ;, }, else, if, (, scope, ., getRootNode, (, ), !=, null, ), {, builder, ., append, (]
[), ), ;, }, else, if, (, scope, ., getRootNode, (, ), !=, null, ), {, builder, ., append, (]
[else, if, (, scope, ., getRootNode, (, ), !=, null, ), {, builder, ., append, (, String, ., format, (]
[(, scope, ., getRootNode, (, ), !=, null, ), {, builder, ., append, (, String, ., format, (, "'%s' : in scope %s:%d\n", ,]
[(, scope, ., getRootNode, (, ), !=, null, ), {, builder, ., append, (, String, ., format, (, "'%s' : in scope %s:%d\n", ,]
[!=, null, ), {, builder, ., append, (, String, ., format, (, "'%s' : in scope %s:%d\n", ,, symbol, ., getName, (, ), ,]
[!=, null, ), {, builder, ., append, (, String, ., format, (, "'%s' : in scope %s:%d\n", ,, symbol, ., getName, (, ), ,]
[!=, null, ), {, builder, ., append, (, String, ., format, (, "'%s' : in scope %s:%d\n", ,, symbol, ., getName, (, ), ,]
[format, (, "'%s' : in scope %s:%d\n", ,, symbol, ., getName, (, ), ,, scope, ., getRootNode, (, ), ., getSourceFileName, (, ), ,]
[format, (, "'%s' : in scope %s:%d\n", ,, symbol, ., getName, (, ), ,, scope, ., getRootNode, (, ), ., getSourceFileName, (, ), ,]
[format, (, "'%s' : in scope %s:%d\n", ,, symbol, ., getName, (, ), ,, scope, ., getRootNode, (, ), ., getSourceFileName, (, ), ,]
[getSourceFileName, (, ), ,, scope, ., getRootNode, (, ), ., getLineno, (, ), ), ), ;, }, else, if, (]
[getSourceFileName, (, ), ,, scope, ., getRootNode, (, ), ., getLineno, (, ), ), ), ;, }, else, if, (]
[getSourceFileName, (, ), ,, scope, ., getRootNode, (, ), ., getLineno, (, ), ), ), ;, }, else, if, (]
[getRootNode, (, ), ., getLineno, (, ), ), ), ;, }, else, if, (, scope, ., getSymbolForScope, (, ), !=]
[., getLineno, (, ), ), ), ;, }, else, if, (, scope, ., getSymbolForScope, (, ), !=, null, ), {]
[., getLineno, (, ), ), ), ;, }, else, if, (, scope, ., getSymbolForScope, (, ), !=, null, ), {]
[), ), ;, }, else, if, (, scope, ., getSymbolForScope, (, ), !=, null, ), {, builder, ., append, (]
[), ), ;, }, else, if, (, scope, ., getSymbolForScope, (, ), !=, null, ), {, builder, ., append, (]
[else, if, (, scope, ., getSymbolForScope, (, ), !=, null, ), {, builder, ., append, (, String, ., format, (]
[(, scope, ., getSymbolForScope, (, ), !=, null, ), {, builder, ., append, (, String, ., format, (, "'%s' : in scope %s\n", ,]
[(, scope, ., getSymbolForScope, (, ), !=, null, ), {, builder, ., append, (, String, ., format, (, "'%s' : in scope %s\n", ,]
[!=, null, ), {, builder, ., append, (, String, ., format, (, "'%s' : in scope %s\n", ,, symbol, ., getName, (, ), ,]
[!=, null, ), {, builder, ., append, (, String, ., format, (, "'%s' : in scope %s\n", ,, symbol, ., getName, (, ), ,]
[!=, null, ), {, builder, ., append, (, String, ., format, (, "'%s' : in scope %s\n", ,, symbol, ., getName, (, ), ,]
[., getName, (, ), ,, scope, ., getSymbolForScope, (, ), ., getName, (, ), ), ), ;, }, else, {]
[., getName, (, ), ,, scope, ., getSymbolForScope, (, ), ., getName, (, ), ), ), ;, }, else, {]
[,, scope, ., getSymbolForScope, (, ), ., getName, (, ), ), ), ;, }, else, {, builder, ., append, (]
[,, scope, ., getSymbolForScope, (, ), ., getName, (, ), ), ), ;, }, else, {, builder, ., append, (]
[(, ), ., getName, (, ), ), ), ;, }, else, {, builder, ., append, (, String, ., format, (]
[., getName, (, ), ), ), ;, }, else, {, builder, ., append, (, String, ., format, (, "'%s' : in unknown scope\n", ,]
[., getName, (, ), ), ), ;, }, else, {, builder, ., append, (, String, ., format, (, "'%s' : in unknown scope\n", ,]
[append, (, String, ., format, (, "'%s' : in unknown scope\n", ,, symbol, ., getName, (, ), ), ), ;, }, int, refCount, =]
[,, symbol, ., getName, (, ), ), ), ;, }, int, refCount, =, 0, ;, for, (, Reference, ref, :]
[., getName, (, ), ), ), ;, }, int, refCount, =, 0, ;, for, (, Reference, ref, :, getReferences, (]
[), ), ;, }, int, refCount, =, 0, ;, for, (, Reference, ref, :, getReferences, (, symbol, ), ), {]
[), ), ;, }, int, refCount, =, 0, ;, for, (, Reference, ref, :, getReferences, (, symbol, ), ), {]
[int, refCount, =, 0, ;, for, (, Reference, ref, :, getReferences, (, symbol, ), ), {, builder, ., append, (]
[int, refCount, =, 0, ;, for, (, Reference, ref, :, getReferences, (, symbol, ), ), {, builder, ., append, (]
[;, for, (, Reference, ref, :, getReferences, (, symbol, ), ), {, builder, ., append, (, String, ., format, (]
[(, Reference, ref, :, getReferences, (, symbol, ), ), {, builder, ., append, (, String, ., format, (, "  Ref %d: %s:%d\n", ,]
[ref, :, getReferences, (, symbol, ), ), {, builder, ., append, (, String, ., format, (, "  Ref %d: %s:%d\n", ,, refCount, ,]
[ref, :, getReferences, (, symbol, ), ), {, builder, ., append, (, String, ., format, (, "  Ref %d: %s:%d\n", ,, refCount, ,]
[ref, :, getReferences, (, symbol, ), ), {, builder, ., append, (, String, ., format, (, "  Ref %d: %s:%d\n", ,, refCount, ,]
[append, (, String, ., format, (, "  Ref %d: %s:%d\n", ,, refCount, ,, ref, ., getNode, (, ), ., getSourceFileName, (, ), ,]
[append, (, String, ., format, (, "  Ref %d: %s:%d\n", ,, refCount, ,, ref, ., getNode, (, ), ., getSourceFileName, (, ), ,]
[append, (, String, ., format, (, "  Ref %d: %s:%d\n", ,, refCount, ,, ref, ., getNode, (, ), ., getSourceFileName, (, ), ,]
[getNode, (, ), ., getSourceFileName, (, ), ,, ref, ., getNode, (, ), ., getLineno, (, ), ), ), ;]
[getNode, (, ), ., getSourceFileName, (, ), ,, ref, ., getNode, (, ), ., getLineno, (, ), ), ), ;]
[StaticScope, <, JSType, >, >, void, addScopes, (, Collection, <, S, >, scopes, ), {, for, (, S, scope, :]
[>, >, void, addScopes, (, Collection, <, S, >, scopes, ), {, for, (, S, scope, :, scopes, ), {]
[void, addScopes, (, Collection, <, S, >, scopes, ), {, for, (, S, scope, :, scopes, ), {, createScopeFrom, (]
[createScopeFrom, (, scope, ), ;, }, }, void, findScopes, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {]
[createScopeFrom, (, scope, ), ;, }, }, void, findScopes, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {]
[;, }, }, void, findScopes, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (]
[}, void, findScopes, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,]
[}, void, findScopes, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,]
[AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (]
[,, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,]
[,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,]
[root, ), ,, new, NodeTraversal, ., AbstractScopedCallback, (, ), {, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {]
[,, new, NodeTraversal, ., AbstractScopedCallback, (, ), {, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, createScopeFrom, (]
[,, new, NodeTraversal, ., AbstractScopedCallback, (, ), {, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, createScopeFrom, (]
[,, Node, p, ), {, }, }, ), ;, }, public, Collection, <, SymbolScope, >, getAllScopes, (, ), {, return]
[,, Node, p, ), {, }, }, ), ;, }, public, Collection, <, SymbolScope, >, getAllScopes, (, ), {, return]
[{, }, }, ), ;, }, public, Collection, <, SymbolScope, >, getAllScopes, (, ), {, return, Collections, ., unmodifiableCollection, (]
[{, }, }, ), ;, }, public, Collection, <, SymbolScope, >, getAllScopes, (, ), {, return, Collections, ., unmodifiableCollection, (]
[scopes, ., values, (, ), ), ;, }, public, void, addAnonymousFunctions, (, ), {, TreeSet, <, SymbolScope, >, scopes, =]
[scopes, ., values, (, ), ), ;, }, public, void, addAnonymousFunctions, (, ), {, TreeSet, <, SymbolScope, >, scopes, =]
[), ), ;, }, public, void, addAnonymousFunctions, (, ), {, TreeSet, <, SymbolScope, >, scopes, =, Sets, ., newTreeSet, (]
[), {, TreeSet, <, SymbolScope, >, scopes, =, Sets, ., newTreeSet, (, LEXICAL_SCOPE_ORDERING, ), ;, for, (, SymbolScope, scope, :]
[=, Sets, ., newTreeSet, (, LEXICAL_SCOPE_ORDERING, ), ;, for, (, SymbolScope, scope, :, getAllScopes, (, ), ), {, if, (]
[=, Sets, ., newTreeSet, (, LEXICAL_SCOPE_ORDERING, ), ;, for, (, SymbolScope, scope, :, getAllScopes, (, ), ), {, if, (]
[;, for, (, SymbolScope, scope, :, getAllScopes, (, ), ), {, if, (, scope, ., isLexicalScope, (, ), ), {]
[;, for, (, SymbolScope, scope, :, getAllScopes, (, ), ), {, if, (, scope, ., isLexicalScope, (, ), ), {]
[scope, :, getAllScopes, (, ), ), {, if, (, scope, ., isLexicalScope, (, ), ), {, scopes, ., add, (]
[., isLexicalScope, (, ), ), {, scopes, ., add, (, scope, ), ;, }, }, for, (, SymbolScope, scope, :]
[), ), {, scopes, ., add, (, scope, ), ;, }, }, for, (, SymbolScope, scope, :, scopes, ), {]
[{, scopes, ., add, (, scope, ), ;, }, }, for, (, SymbolScope, scope, :, scopes, ), {, addAnonymousFunctionsInScope, (]
[), {, addAnonymousFunctionsInScope, (, scope, ), ;, }, }, private, void, addAnonymousFunctionsInScope, (, SymbolScope, scope, ), {, Symbol, sym, =]
[addAnonymousFunctionsInScope, (, scope, ), ;, }, }, private, void, addAnonymousFunctionsInScope, (, SymbolScope, scope, ), {, Symbol, sym, =, getSymbolForScope, (]
[}, }, private, void, addAnonymousFunctionsInScope, (, SymbolScope, scope, ), {, Symbol, sym, =, getSymbolForScope, (, scope, ), ;, if, (]
[}, }, private, void, addAnonymousFunctionsInScope, (, SymbolScope, scope, ), {, Symbol, sym, =, getSymbolForScope, (, scope, ), ;, if, (]
[private, void, addAnonymousFunctionsInScope, (, SymbolScope, scope, ), {, Symbol, sym, =, getSymbolForScope, (, scope, ), ;, if, (, sym, ==]
[scope, ), {, Symbol, sym, =, getSymbolForScope, (, scope, ), ;, if, (, sym, ==, null, ), {, if, (]
[scope, ), {, Symbol, sym, =, getSymbolForScope, (, scope, ), ;, if, (, sym, ==, null, ), {, if, (]
[scope, ), {, Symbol, sym, =, getSymbolForScope, (, scope, ), ;, if, (, sym, ==, null, ), {, if, (]
[scope, ), {, Symbol, sym, =, getSymbolForScope, (, scope, ), ;, if, (, sym, ==, null, ), {, if, (]
[scope, ), {, Symbol, sym, =, getSymbolForScope, (, scope, ), ;, if, (, sym, ==, null, ), {, if, (]
[scope, ), {, Symbol, sym, =, getSymbolForScope, (, scope, ), ;, if, (, sym, ==, null, ), {, if, (]
[getSymbolForScope, (, scope, ), ;, if, (, sym, ==, null, ), {, if, (, scope, ., isLexicalScope, (, ), &&]
[(, scope, ), ;, if, (, sym, ==, null, ), {, if, (, scope, ., isLexicalScope, (, ), &&, !]
[(, scope, ), ;, if, (, sym, ==, null, ), {, if, (, scope, ., isLexicalScope, (, ), &&, !]
[sym, ==, null, ), {, if, (, scope, ., isLexicalScope, (, ), &&, !, scope, ., isGlobalScope, (, ), &&]
[sym, ==, null, ), {, if, (, scope, ., isLexicalScope, (, ), &&, !, scope, ., isGlobalScope, (, ), &&]
[sym, ==, null, ), {, if, (, scope, ., isLexicalScope, (, ), &&, !, scope, ., isGlobalScope, (, ), &&]
[(, scope, ., isLexicalScope, (, ), &&, !, scope, ., isGlobalScope, (, ), &&, scope, ., getRootNode, (, ), !=]
[., isLexicalScope, (, ), &&, !, scope, ., isGlobalScope, (, ), &&, scope, ., getRootNode, (, ), !=, null, &&]
[isLexicalScope, (, ), &&, !, scope, ., isGlobalScope, (, ), &&, scope, ., getRootNode, (, ), !=, null, &&, !]
[isLexicalScope, (, ), &&, !, scope, ., isGlobalScope, (, ), &&, scope, ., getRootNode, (, ), !=, null, &&, !]
[isLexicalScope, (, ), &&, !, scope, ., isGlobalScope, (, ), &&, scope, ., getRootNode, (, ), !=, null, &&, !]
[&&, scope, ., getRootNode, (, ), !=, null, &&, !, scope, ., getRootNode, (, ), ., isFromExterns, (, ), &&]
[&&, scope, ., getRootNode, (, ), !=, null, &&, !, scope, ., getRootNode, (, ), ., isFromExterns, (, ), &&]
[&&, scope, ., getRootNode, (, ), !=, null, &&, !, scope, ., getRootNode, (, ), ., isFromExterns, (, ), &&]
[!=, null, &&, !, scope, ., getRootNode, (, ), ., isFromExterns, (, ), &&, scope, ., getParentScope, (, ), !=]
[getRootNode, (, ), ., isFromExterns, (, ), &&, scope, ., getParentScope, (, ), !=, null, ), {, SymbolScope, parent, =]
[getRootNode, (, ), ., isFromExterns, (, ), &&, scope, ., getParentScope, (, ), !=, null, ), {, SymbolScope, parent, =]
[., getParentScope, (, ), !=, null, ), {, SymbolScope, parent, =, scope, ., getParentScope, (, ), ;, int, count, =]
[., getParentScope, (, ), !=, null, ), {, SymbolScope, parent, =, scope, ., getParentScope, (, ), ;, int, count, =]
[., getParentScope, (, ), !=, null, ), {, SymbolScope, parent, =, scope, ., getParentScope, (, ), ;, int, count, =]
[SymbolScope, parent, =, scope, ., getParentScope, (, ), ;, int, count, =, parent, ., innerAnonFunctionsWithNames, ++, ;, String, innerName, =]
[SymbolScope, parent, =, scope, ., getParentScope, (, ), ;, int, count, =, parent, ., innerAnonFunctionsWithNames, ++, ;, String, innerName, =]
[=, scope, ., getParentScope, (, ), ;, int, count, =, parent, ., innerAnonFunctionsWithNames, ++, ;, String, innerName, =, "function%", +]
[., getParentScope, (, ), ;, int, count, =, parent, ., innerAnonFunctionsWithNames, ++, ;, String, innerName, =, "function%", +, count, ;]
[., getParentScope, (, ), ;, int, count, =, parent, ., innerAnonFunctionsWithNames, ++, ;, String, innerName, =, "function%", +, count, ;]
[;, int, count, =, parent, ., innerAnonFunctionsWithNames, ++, ;, String, innerName, =, "function%", +, count, ;, scope, ., setSymbolForScope, (]
[count, =, parent, ., innerAnonFunctionsWithNames, ++, ;, String, innerName, =, "function%", +, count, ;, scope, ., setSymbolForScope, (, declareInferredSymbol, (]
[parent, ., innerAnonFunctionsWithNames, ++, ;, String, innerName, =, "function%", +, count, ;, scope, ., setSymbolForScope, (, declareInferredSymbol, (, parent, ,]
[innerAnonFunctionsWithNames, ++, ;, String, innerName, =, "function%", +, count, ;, scope, ., setSymbolForScope, (, declareInferredSymbol, (, parent, ,, innerName, ,]
[innerAnonFunctionsWithNames, ++, ;, String, innerName, =, "function%", +, count, ;, scope, ., setSymbolForScope, (, declareInferredSymbol, (, parent, ,, innerName, ,]
[JSType, >, >, void, addSymbolsFrom, (, StaticSymbolTable, <, S, ,, R, >, otherSymbolTable, ), {, for, (, S, otherSymbol, :]
[JSType, >, >, void, addSymbolsFrom, (, StaticSymbolTable, <, S, ,, R, >, otherSymbolTable, ), {, for, (, S, otherSymbol, :]
[R, >, otherSymbolTable, ), {, for, (, S, otherSymbol, :, otherSymbolTable, ., getAllSymbols, (, ), ), {, String, name, =]
[R, >, otherSymbolTable, ), {, for, (, S, otherSymbol, :, otherSymbolTable, ., getAllSymbols, (, ), ), {, String, name, =]
[:, otherSymbolTable, ., getAllSymbols, (, ), ), {, String, name, =, otherSymbol, ., getName, (, ), ;, SymbolScope, myScope, =]
[., getAllSymbols, (, ), ), {, String, name, =, otherSymbol, ., getName, (, ), ;, SymbolScope, myScope, =, createScopeFrom, (]
[., getAllSymbols, (, ), ), {, String, name, =, otherSymbol, ., getName, (, ), ;, SymbolScope, myScope, =, createScopeFrom, (]
[), {, String, name, =, otherSymbol, ., getName, (, ), ;, SymbolScope, myScope, =, createScopeFrom, (, otherSymbolTable, ., getScope, (]
[;, SymbolScope, myScope, =, createScopeFrom, (, otherSymbolTable, ., getScope, (, otherSymbol, ), ), ;, StaticReference, <, JSType, >, decl, =]
[myScope, =, createScopeFrom, (, otherSymbolTable, ., getScope, (, otherSymbol, ), ), ;, StaticReference, <, JSType, >, decl, =, findBestDeclToAdd, (]
[createScopeFrom, (, otherSymbolTable, ., getScope, (, otherSymbol, ), ), ;, StaticReference, <, JSType, >, decl, =, findBestDeclToAdd, (, otherSymbolTable, ,]
[otherSymbol, ), ), ;, StaticReference, <, JSType, >, decl, =, findBestDeclToAdd, (, otherSymbolTable, ,, otherSymbol, ), ;, Symbol, mySymbol, =]
[StaticReference, <, JSType, >, decl, =, findBestDeclToAdd, (, otherSymbolTable, ,, otherSymbol, ), ;, Symbol, mySymbol, =, null, ;, if, (]
[StaticReference, <, JSType, >, decl, =, findBestDeclToAdd, (, otherSymbolTable, ,, otherSymbol, ), ;, Symbol, mySymbol, =, null, ;, if, (]
[JSType, >, decl, =, findBestDeclToAdd, (, otherSymbolTable, ,, otherSymbol, ), ;, Symbol, mySymbol, =, null, ;, if, (, decl, !=]
[otherSymbolTable, ,, otherSymbol, ), ;, Symbol, mySymbol, =, null, ;, if, (, decl, !=, null, ), {, Node, declNode, =]
[otherSymbolTable, ,, otherSymbol, ), ;, Symbol, mySymbol, =, null, ;, if, (, decl, !=, null, ), {, Node, declNode, =]
[mySymbol, =, null, ;, if, (, decl, !=, null, ), {, Node, declNode, =, decl, ., getNode, (, ), ;]
[null, ;, if, (, decl, !=, null, ), {, Node, declNode, =, decl, ., getNode, (, ), ;, mySymbol, =]
[if, (, decl, !=, null, ), {, Node, declNode, =, decl, ., getNode, (, ), ;, mySymbol, =, isAnySymbolDeclared, (]
[decl, !=, null, ), {, Node, declNode, =, decl, ., getNode, (, ), ;, mySymbol, =, isAnySymbolDeclared, (, name, ,]
[null, ), {, Node, declNode, =, decl, ., getNode, (, ), ;, mySymbol, =, isAnySymbolDeclared, (, name, ,, declNode, ,]
[=, decl, ., getNode, (, ), ;, mySymbol, =, isAnySymbolDeclared, (, name, ,, declNode, ,, myScope, ), ;, if, (]
[=, decl, ., getNode, (, ), ;, mySymbol, =, isAnySymbolDeclared, (, name, ,, declNode, ,, myScope, ), ;, if, (]
[., getNode, (, ), ;, mySymbol, =, isAnySymbolDeclared, (, name, ,, declNode, ,, myScope, ), ;, if, (, mySymbol, ==]
[), ;, mySymbol, =, isAnySymbolDeclared, (, name, ,, declNode, ,, myScope, ), ;, if, (, mySymbol, ==, null, ), {]
[mySymbol, =, isAnySymbolDeclared, (, name, ,, declNode, ,, myScope, ), ;, if, (, mySymbol, ==, null, ), {, mySymbol, =]
[isAnySymbolDeclared, (, name, ,, declNode, ,, myScope, ), ;, if, (, mySymbol, ==, null, ), {, mySymbol, =, copySymbolTo, (]
[name, ,, declNode, ,, myScope, ), ;, if, (, mySymbol, ==, null, ), {, mySymbol, =, copySymbolTo, (, otherSymbol, ,]
[declNode, ,, myScope, ), ;, if, (, mySymbol, ==, null, ), {, mySymbol, =, copySymbolTo, (, otherSymbol, ,, declNode, ,]
[mySymbol, ==, null, ), {, mySymbol, =, copySymbolTo, (, otherSymbol, ,, declNode, ,, myScope, ), ;, }, }, else, {]
[null, ), {, mySymbol, =, copySymbolTo, (, otherSymbol, ,, declNode, ,, myScope, ), ;, }, }, else, {, mySymbol, =]
[null, ), {, mySymbol, =, copySymbolTo, (, otherSymbol, ,, declNode, ,, myScope, ), ;, }, }, else, {, mySymbol, =]
[=, copySymbolTo, (, otherSymbol, ,, declNode, ,, myScope, ), ;, }, }, else, {, mySymbol, =, myScope, ., getOwnSlot, (]
[,, myScope, ), ;, }, }, else, {, mySymbol, =, myScope, ., getOwnSlot, (, name, ), ;, }, if, (]
[,, myScope, ), ;, }, }, else, {, mySymbol, =, myScope, ., getOwnSlot, (, name, ), ;, }, if, (]
[), ;, }, }, else, {, mySymbol, =, myScope, ., getOwnSlot, (, name, ), ;, }, if, (, mySymbol, !=]
[myScope, ., getOwnSlot, (, name, ), ;, }, if, (, mySymbol, !=, null, ), {, for, (, R, otherRef, :]
[myScope, ., getOwnSlot, (, name, ), ;, }, if, (, mySymbol, !=, null, ), {, for, (, R, otherRef, :]
[name, ), ;, }, if, (, mySymbol, !=, null, ), {, for, (, R, otherRef, :, otherSymbolTable, ., getReferences, (]
[mySymbol, !=, null, ), {, for, (, R, otherRef, :, otherSymbolTable, ., getReferences, (, otherSymbol, ), ), {, if, (]
[null, ), {, for, (, R, otherRef, :, otherSymbolTable, ., getReferences, (, otherSymbol, ), ), {, if, (, isGoodRefToAdd, (]
[(, R, otherRef, :, otherSymbolTable, ., getReferences, (, otherSymbol, ), ), {, if, (, isGoodRefToAdd, (, otherRef, ), ), {]
[(, R, otherRef, :, otherSymbolTable, ., getReferences, (, otherSymbol, ), ), {, if, (, isGoodRefToAdd, (, otherRef, ), ), {]
[otherSymbolTable, ., getReferences, (, otherSymbol, ), ), {, if, (, isGoodRefToAdd, (, otherRef, ), ), {, mySymbol, ., defineReferenceAt, (]
[otherSymbolTable, ., getReferences, (, otherSymbol, ), ), {, if, (, isGoodRefToAdd, (, otherRef, ), ), {, mySymbol, ., defineReferenceAt, (]
[}, }, }, private, Symbol, isAnySymbolDeclared, (, String, name, ,, Node, declNode, ,, SymbolScope, scope, ), {, Symbol, sym, =]
[}, }, }, private, Symbol, isAnySymbolDeclared, (, String, name, ,, Node, declNode, ,, SymbolScope, scope, ), {, Symbol, sym, =]
[Symbol, isAnySymbolDeclared, (, String, name, ,, Node, declNode, ,, SymbolScope, scope, ), {, Symbol, sym, =, symbols, ., get, (]
[(, String, name, ,, Node, declNode, ,, SymbolScope, scope, ), {, Symbol, sym, =, symbols, ., get, (, declNode, ,]
[declNode, ,, SymbolScope, scope, ), {, Symbol, sym, =, symbols, ., get, (, declNode, ,, name, ), ;, if, (]
[declNode, ,, SymbolScope, scope, ), {, Symbol, sym, =, symbols, ., get, (, declNode, ,, name, ), ;, if, (]
[SymbolScope, scope, ), {, Symbol, sym, =, symbols, ., get, (, declNode, ,, name, ), ;, if, (, sym, ==]
[Symbol, sym, =, symbols, ., get, (, declNode, ,, name, ), ;, if, (, sym, ==, null, ), {, return]
[Symbol, sym, =, symbols, ., get, (, declNode, ,, name, ), ;, if, (, sym, ==, null, ), {, return]
[Symbol, sym, =, symbols, ., get, (, declNode, ,, name, ), ;, if, (, sym, ==, null, ), {, return]
[(, declNode, ,, name, ), ;, if, (, sym, ==, null, ), {, return, scope, ., ownSymbols, ., get, (]
[;, if, (, sym, ==, null, ), {, return, scope, ., ownSymbols, ., get, (, name, ), ;, }, return]
[findBestDeclToAdd, (, StaticSymbolTable, <, S, ,, R, >, otherSymbolTable, ,, S, slot, ), {, StaticReference, <, JSType, >, decl, =]
[findBestDeclToAdd, (, StaticSymbolTable, <, S, ,, R, >, otherSymbolTable, ,, S, slot, ), {, StaticReference, <, JSType, >, decl, =]
[otherSymbolTable, ,, S, slot, ), {, StaticReference, <, JSType, >, decl, =, slot, ., getDeclaration, (, ), ;, if, (]
[S, slot, ), {, StaticReference, <, JSType, >, decl, =, slot, ., getDeclaration, (, ), ;, if, (, isGoodRefToAdd, (]
[<, JSType, >, decl, =, slot, ., getDeclaration, (, ), ;, if, (, isGoodRefToAdd, (, decl, ), ), {, return]
[(, ), ;, if, (, isGoodRefToAdd, (, decl, ), ), {, return, decl, ;, }, for, (, R, ref, :]
[(, ), ;, if, (, isGoodRefToAdd, (, decl, ), ), {, return, decl, ;, }, for, (, R, ref, :]
[(, isGoodRefToAdd, (, decl, ), ), {, return, decl, ;, }, for, (, R, ref, :, otherSymbolTable, ., getReferences, (]
[{, return, decl, ;, }, for, (, R, ref, :, otherSymbolTable, ., getReferences, (, slot, ), ), {, if, (]
[decl, ;, }, for, (, R, ref, :, otherSymbolTable, ., getReferences, (, slot, ), ), {, if, (, isGoodRefToAdd, (]
[R, ref, :, otherSymbolTable, ., getReferences, (, slot, ), ), {, if, (, isGoodRefToAdd, (, ref, ), ), {, return]
[getReferences, (, slot, ), ), {, if, (, isGoodRefToAdd, (, ref, ), ), {, return, ref, ;, }, }, return]
[}, }, return, null, ;, }, private, boolean, isGoodRefToAdd, (, @, Nullable, StaticReference, <, JSType, >, ref, ), {, return]
[}, }, return, null, ;, }, private, boolean, isGoodRefToAdd, (, @, Nullable, StaticReference, <, JSType, >, ref, ), {, return]
[}, }, return, null, ;, }, private, boolean, isGoodRefToAdd, (, @, Nullable, StaticReference, <, JSType, >, ref, ), {, return]
[}, }, return, null, ;, }, private, boolean, isGoodRefToAdd, (, @, Nullable, StaticReference, <, JSType, >, ref, ), {, return]
[}, }, return, null, ;, }, private, boolean, isGoodRefToAdd, (, @, Nullable, StaticReference, <, JSType, >, ref, ), {, return]
[return, null, ;, }, private, boolean, isGoodRefToAdd, (, @, Nullable, StaticReference, <, JSType, >, ref, ), {, return, ref, !=]
[;, }, private, boolean, isGoodRefToAdd, (, @, Nullable, StaticReference, <, JSType, >, ref, ), {, return, ref, !=, null, &&]
[;, }, private, boolean, isGoodRefToAdd, (, @, Nullable, StaticReference, <, JSType, >, ref, ), {, return, ref, !=, null, &&]
[;, }, private, boolean, isGoodRefToAdd, (, @, Nullable, StaticReference, <, JSType, >, ref, ), {, return, ref, !=, null, &&]
[@, Nullable, StaticReference, <, JSType, >, ref, ), {, return, ref, !=, null, &&, ref, ., getNode, (, ), !=]
[StaticReference, <, JSType, >, ref, ), {, return, ref, !=, null, &&, ref, ., getNode, (, ), !=, null, &&]
[StaticReference, <, JSType, >, ref, ), {, return, ref, !=, null, &&, ref, ., getNode, (, ), !=, null, &&]
[StaticReference, <, JSType, >, ref, ), {, return, ref, !=, null, &&, ref, ., getNode, (, ), !=, null, &&]
[StaticReference, <, JSType, >, ref, ), {, return, ref, !=, null, &&, ref, ., getNode, (, ), !=, null, &&]
[null, &&, ref, ., getNode, (, ), !=, null, &&, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), !=]
[ref, ., getNode, (, ), !=, null, &&, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), !=, null, &&]
[., getNode, (, ), !=, null, &&, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), !=, null, &&, !]
[., getNode, (, ), !=, null, &&, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), !=, null, &&, !]
[., getNode, (, ), !=, null, &&, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), !=, null, &&, !]
[&&, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), !=, null, &&, !, Compiler, ., SYNTHETIC_EXTERNS, ., equals, (]
[&&, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), !=, null, &&, !, Compiler, ., SYNTHETIC_EXTERNS, ., equals, (]
[&&, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), !=, null, &&, !, Compiler, ., SYNTHETIC_EXTERNS, ., equals, (]
[&&, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), !=, null, &&, !, Compiler, ., SYNTHETIC_EXTERNS, ., equals, (]
[(, ), ), ;, }, private, Symbol, copySymbolTo, (, StaticSlot, <, JSType, >, sym, ,, SymbolScope, scope, ), {, return]
[), ;, }, private, Symbol, copySymbolTo, (, StaticSlot, <, JSType, >, sym, ,, SymbolScope, scope, ), {, return, copySymbolTo, (]
[}, private, Symbol, copySymbolTo, (, StaticSlot, <, JSType, >, sym, ,, SymbolScope, scope, ), {, return, copySymbolTo, (, sym, ,]
[}, private, Symbol, copySymbolTo, (, StaticSlot, <, JSType, >, sym, ,, SymbolScope, scope, ), {, return, copySymbolTo, (, sym, ,]
[}, private, Symbol, copySymbolTo, (, StaticSlot, <, JSType, >, sym, ,, SymbolScope, scope, ), {, return, copySymbolTo, (, sym, ,]
[,, SymbolScope, scope, ), {, return, copySymbolTo, (, sym, ,, sym, ., getDeclaration, (, ), ., getNode, (, ), ,]
[), ;, }, private, Symbol, copySymbolTo, (, StaticSlot, <, JSType, >, sym, ,, Node, declNode, ,, SymbolScope, scope, ), {]
[), ;, }, private, Symbol, copySymbolTo, (, StaticSlot, <, JSType, >, sym, ,, Node, declNode, ,, SymbolScope, scope, ), {]
[Symbol, copySymbolTo, (, StaticSlot, <, JSType, >, sym, ,, Node, declNode, ,, SymbolScope, scope, ), {, Preconditions, ., checkNotNull, (]
[<, JSType, >, sym, ,, Node, declNode, ,, SymbolScope, scope, ), {, Preconditions, ., checkNotNull, (, declNode, ), ;, return]
[>, sym, ,, Node, declNode, ,, SymbolScope, scope, ), {, Preconditions, ., checkNotNull, (, declNode, ), ;, return, declareSymbol, (]
[>, sym, ,, Node, declNode, ,, SymbolScope, scope, ), {, Preconditions, ., checkNotNull, (, declNode, ), ;, return, declareSymbol, (]
[SymbolScope, scope, ), {, Preconditions, ., checkNotNull, (, declNode, ), ;, return, declareSymbol, (, sym, ., getName, (, ), ,]
[SymbolScope, scope, ), {, Preconditions, ., checkNotNull, (, declNode, ), ;, return, declareSymbol, (, sym, ., getName, (, ), ,]
[checkNotNull, (, declNode, ), ;, return, declareSymbol, (, sym, ., getName, (, ), ,, sym, ., getType, (, ), ,]
[checkNotNull, (, declNode, ), ;, return, declareSymbol, (, sym, ., getName, (, ), ,, sym, ., getType, (, ), ,]
[declareSymbol, (, sym, ., getName, (, ), ,, sym, ., getType, (, ), ,, sym, ., isTypeInferred, (, ), ,]
[sym, ., getName, (, ), ,, sym, ., getType, (, ), ,, sym, ., isTypeInferred, (, ), ,, scope, ,]
[getName, (, ), ,, sym, ., getType, (, ), ,, sym, ., isTypeInferred, (, ), ,, scope, ,, declNode, ,]
[getName, (, ), ,, sym, ., getType, (, ), ,, sym, ., isTypeInferred, (, ), ,, scope, ,, declNode, ,]
[(, String, name, ,, JSType, type, ,, boolean, inferred, ,, SymbolScope, scope, ,, Node, declNode, ), {, Symbol, symbol, =]
[,, JSType, type, ,, boolean, inferred, ,, SymbolScope, scope, ,, Node, declNode, ), {, Symbol, symbol, =, new, Symbol, (]
[type, ,, boolean, inferred, ,, SymbolScope, scope, ,, Node, declNode, ), {, Symbol, symbol, =, new, Symbol, (, name, ,]
[boolean, inferred, ,, SymbolScope, scope, ,, Node, declNode, ), {, Symbol, symbol, =, new, Symbol, (, name, ,, type, ,]
[,, SymbolScope, scope, ,, Node, declNode, ), {, Symbol, symbol, =, new, Symbol, (, name, ,, type, ,, inferred, ,]
[), {, Symbol, symbol, =, new, Symbol, (, name, ,, type, ,, inferred, ,, scope, ), ;, Symbol, replacedSymbol, =]
[), {, Symbol, symbol, =, new, Symbol, (, name, ,, type, ,, inferred, ,, scope, ), ;, Symbol, replacedSymbol, =]
[=, new, Symbol, (, name, ,, type, ,, inferred, ,, scope, ), ;, Symbol, replacedSymbol, =, symbols, ., put, (]
[Symbol, (, name, ,, type, ,, inferred, ,, scope, ), ;, Symbol, replacedSymbol, =, symbols, ., put, (, declNode, ,]
[name, ,, type, ,, inferred, ,, scope, ), ;, Symbol, replacedSymbol, =, symbols, ., put, (, declNode, ,, name, ,]
[,, inferred, ,, scope, ), ;, Symbol, replacedSymbol, =, symbols, ., put, (, declNode, ,, name, ,, symbol, ), ;]
[,, inferred, ,, scope, ), ;, Symbol, replacedSymbol, =, symbols, ., put, (, declNode, ,, name, ,, symbol, ), ;]
[), ;, Symbol, replacedSymbol, =, symbols, ., put, (, declNode, ,, name, ,, symbol, ), ;, Preconditions, ., checkState, (]
[), ;, Symbol, replacedSymbol, =, symbols, ., put, (, declNode, ,, name, ,, symbol, ), ;, Preconditions, ., checkState, (]
[Symbol, replacedSymbol, =, symbols, ., put, (, declNode, ,, name, ,, symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol, ==]
[=, symbols, ., put, (, declNode, ,, name, ,, symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,]
[., put, (, declNode, ,, name, ,, symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in global index. Type %s", ,]
[(, declNode, ,, name, ,, symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in global index. Type %s", ,, name, ,]
[name, ,, symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in global index. Type %s", ,, name, ,, type, ), ;]
[symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in global index. Type %s", ,, name, ,, type, ), ;, replacedSymbol, =]
[symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in global index. Type %s", ,, name, ,, type, ), ;, replacedSymbol, =]
[symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in global index. Type %s", ,, name, ,, type, ), ;, replacedSymbol, =]
[(, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in global index. Type %s", ,, name, ,, type, ), ;, replacedSymbol, =, scope, ., ownSymbols, ., put, (]
[==, null, ,, "Found duplicate symbol %s in global index. Type %s", ,, name, ,, type, ), ;, replacedSymbol, =, scope, ., ownSymbols, ., put, (, name, ,]
["Found duplicate symbol %s in global index. Type %s", ,, name, ,, type, ), ;, replacedSymbol, =, scope, ., ownSymbols, ., put, (, name, ,, symbol, ), ;]
["Found duplicate symbol %s in global index. Type %s", ,, name, ,, type, ), ;, replacedSymbol, =, scope, ., ownSymbols, ., put, (, name, ,, symbol, ), ;]
[type, ), ;, replacedSymbol, =, scope, ., ownSymbols, ., put, (, name, ,, symbol, ), ;, Preconditions, ., checkState, (]
[type, ), ;, replacedSymbol, =, scope, ., ownSymbols, ., put, (, name, ,, symbol, ), ;, Preconditions, ., checkState, (]
[;, replacedSymbol, =, scope, ., ownSymbols, ., put, (, name, ,, symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol, ==]
[=, scope, ., ownSymbols, ., put, (, name, ,, symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,]
[., ownSymbols, ., put, (, name, ,, symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in its scope. Type %s", ,]
[., put, (, name, ,, symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in its scope. Type %s", ,, name, ,]
[,, symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in its scope. Type %s", ,, name, ,, type, ), ;, return]
[,, JSType, type, ,, boolean, inferred, ,, SymbolScope, scope, ,, Node, declNode, ,, JSDocInfo, info, ), {, Symbol, symbol, =]
[type, ,, boolean, inferred, ,, SymbolScope, scope, ,, Node, declNode, ,, JSDocInfo, info, ), {, Symbol, symbol, =, addSymbol, (]
[boolean, inferred, ,, SymbolScope, scope, ,, Node, declNode, ,, JSDocInfo, info, ), {, Symbol, symbol, =, addSymbol, (, name, ,]
[,, SymbolScope, scope, ,, Node, declNode, ,, JSDocInfo, info, ), {, Symbol, symbol, =, addSymbol, (, name, ,, type, ,]
[scope, ,, Node, declNode, ,, JSDocInfo, info, ), {, Symbol, symbol, =, addSymbol, (, name, ,, type, ,, inferred, ,]
[Node, declNode, ,, JSDocInfo, info, ), {, Symbol, symbol, =, addSymbol, (, name, ,, type, ,, inferred, ,, scope, ,]
[JSDocInfo, info, ), {, Symbol, symbol, =, addSymbol, (, name, ,, type, ,, inferred, ,, scope, ,, declNode, ), ;]
[JSDocInfo, info, ), {, Symbol, symbol, =, addSymbol, (, name, ,, type, ,, inferred, ,, scope, ,, declNode, ), ;]
[Symbol, symbol, =, addSymbol, (, name, ,, type, ,, inferred, ,, scope, ,, declNode, ), ;, symbol, ., setJSDocInfo, (]
[addSymbol, (, name, ,, type, ,, inferred, ,, scope, ,, declNode, ), ;, symbol, ., setJSDocInfo, (, info, ), ;]
[addSymbol, (, name, ,, type, ,, inferred, ,, scope, ,, declNode, ), ;, symbol, ., setJSDocInfo, (, info, ), ;]
[type, ,, inferred, ,, scope, ,, declNode, ), ;, symbol, ., setJSDocInfo, (, info, ), ;, symbol, ., setDeclaration, (]
[type, ,, inferred, ,, scope, ,, declNode, ), ;, symbol, ., setJSDocInfo, (, info, ), ;, symbol, ., setDeclaration, (]
[scope, ,, declNode, ), ;, symbol, ., setJSDocInfo, (, info, ), ;, symbol, ., setDeclaration, (, symbol, ., defineReferenceAt, (]
[symbol, ., setJSDocInfo, (, info, ), ;, symbol, ., setDeclaration, (, symbol, ., defineReferenceAt, (, declNode, ), ), ;, return]
[(, declNode, ), ), ;, return, symbol, ;, }, private, void, removeSymbol, (, Symbol, s, ), {, SymbolScope, scope, =]
[), ), ;, return, symbol, ;, }, private, void, removeSymbol, (, Symbol, s, ), {, SymbolScope, scope, =, getScope, (]
[;, }, private, void, removeSymbol, (, Symbol, s, ), {, SymbolScope, scope, =, getScope, (, s, ), ;, if, (]
[;, }, private, void, removeSymbol, (, Symbol, s, ), {, SymbolScope, scope, =, getScope, (, s, ), ;, if, (]
[;, }, private, void, removeSymbol, (, Symbol, s, ), {, SymbolScope, scope, =, getScope, (, s, ), ;, if, (]
[;, }, private, void, removeSymbol, (, Symbol, s, ), {, SymbolScope, scope, =, getScope, (, s, ), ;, if, (]
[Symbol, s, ), {, SymbolScope, scope, =, getScope, (, s, ), ;, if, (, scope, ., ownSymbols, ., remove, (]
[Symbol, s, ), {, SymbolScope, scope, =, getScope, (, s, ), ;, if, (, scope, ., ownSymbols, ., remove, (]
[getScope, (, s, ), ;, if, (, scope, ., ownSymbols, ., remove, (, s, ., getName, (, ), ), !=]
[;, if, (, scope, ., ownSymbols, ., remove, (, s, ., getName, (, ), ), !=, s, ), {, throw]
[scope, ., ownSymbols, ., remove, (, s, ., getName, (, ), ), !=, s, ), {, throw, new, IllegalStateException, (]
[scope, ., ownSymbols, ., remove, (, s, ., getName, (, ), ), !=, s, ), {, throw, new, IllegalStateException, (]
[ownSymbols, ., remove, (, s, ., getName, (, ), ), !=, s, ), {, throw, new, IllegalStateException, (, "Symbol not found in scope ", +]
[getName, (, ), ), !=, s, ), {, throw, new, IllegalStateException, (, "Symbol not found in scope ", +, s, ), ;, }, if, (]
[getName, (, ), ), !=, s, ), {, throw, new, IllegalStateException, (, "Symbol not found in scope ", +, s, ), ;, }, if, (]
[getName, (, ), ), !=, s, ), {, throw, new, IllegalStateException, (, "Symbol not found in scope ", +, s, ), ;, }, if, (]
[!=, s, ), {, throw, new, IllegalStateException, (, "Symbol not found in scope ", +, s, ), ;, }, if, (, symbols, ., remove, (]
[!=, s, ), {, throw, new, IllegalStateException, (, "Symbol not found in scope ", +, s, ), ;, }, if, (, symbols, ., remove, (]
[!=, s, ), {, throw, new, IllegalStateException, (, "Symbol not found in scope ", +, s, ), ;, }, if, (, symbols, ., remove, (]
[s, ), ;, }, if, (, symbols, ., remove, (, s, ., getDeclaration, (, ), ., getNode, (, ), ,]
[s, ), ;, }, if, (, symbols, ., remove, (, s, ., getDeclaration, (, ), ., getNode, (, ), ,]
[., remove, (, s, ., getDeclaration, (, ), ., getNode, (, ), ,, s, ., getName, (, ), ), !=]
[., getDeclaration, (, ), ., getNode, (, ), ,, s, ., getName, (, ), ), !=, s, ), {, throw]
[), ., getNode, (, ), ,, s, ., getName, (, ), ), !=, s, ), {, throw, new, IllegalStateException, (]
[), ., getNode, (, ), ,, s, ., getName, (, ), ), !=, s, ), {, throw, new, IllegalStateException, (]
[getNode, (, ), ,, s, ., getName, (, ), ), !=, s, ), {, throw, new, IllegalStateException, (, "Symbol not found in table ", +]
[new, IllegalStateException, (, "Symbol not found in table ", +, s, ), ;, }, }, void, fillNamespaceReferences, (, ), {, for, (, Symbol, symbol, :]
[}, }, void, fillNamespaceReferences, (, ), {, for, (, Symbol, symbol, :, getAllSymbolsSorted, (, ), ), {, String, qName, =]
[}, }, void, fillNamespaceReferences, (, ), {, for, (, Symbol, symbol, :, getAllSymbolsSorted, (, ), ), {, String, qName, =]
[Symbol, symbol, :, getAllSymbolsSorted, (, ), ), {, String, qName, =, symbol, ., getName, (, ), ;, int, rootIndex, =]
[Symbol, symbol, :, getAllSymbolsSorted, (, ), ), {, String, qName, =, symbol, ., getName, (, ), ;, int, rootIndex, =]
[(, ), ), {, String, qName, =, symbol, ., getName, (, ), ;, int, rootIndex, =, qName, ., indexOf, (]
[qName, =, symbol, ., getName, (, ), ;, int, rootIndex, =, qName, ., indexOf, (, '.', ), ;, if, (]
[qName, =, symbol, ., getName, (, ), ;, int, rootIndex, =, qName, ., indexOf, (, '.', ), ;, if, (]
[symbol, ., getName, (, ), ;, int, rootIndex, =, qName, ., indexOf, (, '.', ), ;, if, (, rootIndex, ==]
[., getName, (, ), ;, int, rootIndex, =, qName, ., indexOf, (, '.', ), ;, if, (, rootIndex, ==, -]
[., indexOf, (, '.', ), ;, if, (, rootIndex, ==, -, 1, ), {, continue, ;, }, Symbol, root, =]
[., indexOf, (, '.', ), ;, if, (, rootIndex, ==, -, 1, ), {, continue, ;, }, Symbol, root, =]
[., indexOf, (, '.', ), ;, if, (, rootIndex, ==, -, 1, ), {, continue, ;, }, Symbol, root, =]
[if, (, rootIndex, ==, -, 1, ), {, continue, ;, }, Symbol, root, =, symbol, ., scope, ., getQualifiedSlot, (]
[if, (, rootIndex, ==, -, 1, ), {, continue, ;, }, Symbol, root, =, symbol, ., scope, ., getQualifiedSlot, (]
[-, 1, ), {, continue, ;, }, Symbol, root, =, symbol, ., scope, ., getQualifiedSlot, (, qName, ., substring, (]
[), {, continue, ;, }, Symbol, root, =, symbol, ., scope, ., getQualifiedSlot, (, qName, ., substring, (, 0, ,]
[root, =, symbol, ., scope, ., getQualifiedSlot, (, qName, ., substring, (, 0, ,, rootIndex, ), ), ;, if, (]
[root, =, symbol, ., scope, ., getQualifiedSlot, (, qName, ., substring, (, 0, ,, rootIndex, ), ), ;, if, (]
[symbol, ., scope, ., getQualifiedSlot, (, qName, ., substring, (, 0, ,, rootIndex, ), ), ;, if, (, root, ==]
[,, rootIndex, ), ), ;, if, (, root, ==, null, ), {, continue, ;, }, for, (, Reference, ref, :]
[), ), ;, if, (, root, ==, null, ), {, continue, ;, }, for, (, Reference, ref, :, getReferences, (]
[null, ), {, continue, ;, }, for, (, Reference, ref, :, getReferences, (, symbol, ), ), {, Node, currentNode, =]
[null, ), {, continue, ;, }, for, (, Reference, ref, :, getReferences, (, symbol, ), ), {, Node, currentNode, =]
[Reference, ref, :, getReferences, (, symbol, ), ), {, Node, currentNode, =, ref, ., getNode, (, ), ;, if, (]
[ref, :, getReferences, (, symbol, ), ), {, Node, currentNode, =, ref, ., getNode, (, ), ;, if, (, !]
[ref, :, getReferences, (, symbol, ), ), {, Node, currentNode, =, ref, ., getNode, (, ), ;, if, (, !]
[., getNode, (, ), ;, if, (, !, currentNode, ., isQualifiedName, (, ), ), {, continue, ;, }, while, (]
[., getNode, (, ), ;, if, (, !, currentNode, ., isQualifiedName, (, ), ), {, continue, ;, }, while, (]
[!, currentNode, ., isQualifiedName, (, ), ), {, continue, ;, }, while, (, currentNode, ., isGetProp, (, ), ), {]
[., isQualifiedName, (, ), ), {, continue, ;, }, while, (, currentNode, ., isGetProp, (, ), ), {, currentNode, =]
[., isQualifiedName, (, ), ), {, continue, ;, }, while, (, currentNode, ., isGetProp, (, ), ), {, currentNode, =]
[while, (, currentNode, ., isGetProp, (, ), ), {, currentNode, =, currentNode, ., getFirstChild, (, ), ;, String, name, =]
[while, (, currentNode, ., isGetProp, (, ), ), {, currentNode, =, currentNode, ., getFirstChild, (, ), ;, String, name, =]
[{, currentNode, =, currentNode, ., getFirstChild, (, ), ;, String, name, =, currentNode, ., getQualifiedName, (, ), ;, if, (]
[{, currentNode, =, currentNode, ., getFirstChild, (, ), ;, String, name, =, currentNode, ., getQualifiedName, (, ), ;, if, (]
[=, currentNode, ., getFirstChild, (, ), ;, String, name, =, currentNode, ., getQualifiedName, (, ), ;, if, (, name, !=]
[;, String, name, =, currentNode, ., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, Symbol, namespace, =]
[name, =, currentNode, ., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, Symbol, namespace, =, isAnySymbolDeclared, (]
[currentNode, ., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, Symbol, namespace, =, isAnySymbolDeclared, (, name, ,]
[getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, Symbol, namespace, =, isAnySymbolDeclared, (, name, ,, currentNode, ,]
[getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, Symbol, namespace, =, isAnySymbolDeclared, (, name, ,, currentNode, ,]
[!=, null, ), {, Symbol, namespace, =, isAnySymbolDeclared, (, name, ,, currentNode, ,, root, ., scope, ), ;, if, (]
[!=, null, ), {, Symbol, namespace, =, isAnySymbolDeclared, (, name, ,, currentNode, ,, root, ., scope, ), ;, if, (]
[), {, Symbol, namespace, =, isAnySymbolDeclared, (, name, ,, currentNode, ,, root, ., scope, ), ;, if, (, namespace, ==]
[namespace, =, isAnySymbolDeclared, (, name, ,, currentNode, ,, root, ., scope, ), ;, if, (, namespace, ==, null, ), {]
[isAnySymbolDeclared, (, name, ,, currentNode, ,, root, ., scope, ), ;, if, (, namespace, ==, null, ), {, namespace, =]
[isAnySymbolDeclared, (, name, ,, currentNode, ,, root, ., scope, ), ;, if, (, namespace, ==, null, ), {, namespace, =]
[isAnySymbolDeclared, (, name, ,, currentNode, ,, root, ., scope, ), ;, if, (, namespace, ==, null, ), {, namespace, =]
[root, ., scope, ), ;, if, (, namespace, ==, null, ), {, namespace, =, root, ., scope, ., getQualifiedSlot, (]
[(, namespace, ==, null, ), {, namespace, =, root, ., scope, ., getQualifiedSlot, (, name, ), ;, }, if, (]
[(, namespace, ==, null, ), {, namespace, =, root, ., scope, ., getQualifiedSlot, (, name, ), ;, }, if, (]
[(, namespace, ==, null, ), {, namespace, =, root, ., scope, ., getQualifiedSlot, (, name, ), ;, }, if, (]
[==, null, ), {, namespace, =, root, ., scope, ., getQualifiedSlot, (, name, ), ;, }, if, (, namespace, ==]
[), {, namespace, =, root, ., scope, ., getQualifiedSlot, (, name, ), ;, }, if, (, namespace, ==, null, &&]
[), {, namespace, =, root, ., scope, ., getQualifiedSlot, (, name, ), ;, }, if, (, namespace, ==, null, &&]
[), {, namespace, =, root, ., scope, ., getQualifiedSlot, (, name, ), ;, }, if, (, namespace, ==, null, &&]
[(, name, ), ;, }, if, (, namespace, ==, null, &&, root, ., scope, ., isGlobalScope, (, ), ), {]
[), ;, }, if, (, namespace, ==, null, &&, root, ., scope, ., isGlobalScope, (, ), ), {, namespace, =]
[}, if, (, namespace, ==, null, &&, root, ., scope, ., isGlobalScope, (, ), ), {, namespace, =, declareSymbol, (]
[(, namespace, ==, null, &&, root, ., scope, ., isGlobalScope, (, ), ), {, namespace, =, declareSymbol, (, name, ,]
[(, namespace, ==, null, &&, root, ., scope, ., isGlobalScope, (, ), ), {, namespace, =, declareSymbol, (, name, ,]
[&&, root, ., scope, ., isGlobalScope, (, ), ), {, namespace, =, declareSymbol, (, name, ,, registry, ., getNativeType, (]
[&&, root, ., scope, ., isGlobalScope, (, ), ), {, namespace, =, declareSymbol, (, name, ,, registry, ., getNativeType, (]
[isGlobalScope, (, ), ), {, namespace, =, declareSymbol, (, name, ,, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ,]
[), ), {, namespace, =, declareSymbol, (, name, ,, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ,, true, ,]
[), ), {, namespace, =, declareSymbol, (, name, ,, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ,, true, ,]
[=, declareSymbol, (, name, ,, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ,, true, ,, root, ., scope, ,]
[(, name, ,, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ,, true, ,, root, ., scope, ,, currentNode, ,]
[(, JSTypeNative, ., UNKNOWN_TYPE, ), ,, true, ,, root, ., scope, ,, currentNode, ,, null, ), ;, }, if, (]
[(, JSTypeNative, ., UNKNOWN_TYPE, ), ,, true, ,, root, ., scope, ,, currentNode, ,, null, ), ;, }, if, (]
[., UNKNOWN_TYPE, ), ,, true, ,, root, ., scope, ,, currentNode, ,, null, ), ;, }, if, (, namespace, !=]
[,, true, ,, root, ., scope, ,, currentNode, ,, null, ), ;, }, if, (, namespace, !=, null, ), {]
[,, true, ,, root, ., scope, ,, currentNode, ,, null, ), ;, }, if, (, namespace, !=, null, ), {]
[., scope, ,, currentNode, ,, null, ), ;, }, if, (, namespace, !=, null, ), {, namespace, ., defineReferenceAt, (]
[currentNode, ), ;, }, }, }, }, }, }, void, fillPropertyScopes, (, ), {, List, <, Symbol, >, types, =]
[currentNode, ), ;, }, }, }, }, }, }, void, fillPropertyScopes, (, ), {, List, <, Symbol, >, types, =]
[(, ), {, List, <, Symbol, >, types, =, Lists, ., newArrayList, (, ), ;, for, (, Symbol, sym, :]
[types, =, Lists, ., newArrayList, (, ), ;, for, (, Symbol, sym, :, getAllSymbols, (, ), ), {, if, (]
[Lists, ., newArrayList, (, ), ;, for, (, Symbol, sym, :, getAllSymbols, (, ), ), {, if, (, needsPropertyScope, (]
[), ;, for, (, Symbol, sym, :, getAllSymbols, (, ), ), {, if, (, needsPropertyScope, (, sym, ), ), {]
[), ;, for, (, Symbol, sym, :, getAllSymbols, (, ), ), {, if, (, needsPropertyScope, (, sym, ), ), {]
[Symbol, sym, :, getAllSymbols, (, ), ), {, if, (, needsPropertyScope, (, sym, ), ), {, types, ., add, (]
[), ), {, if, (, needsPropertyScope, (, sym, ), ), {, types, ., add, (, sym, ), ;, }, }]
[), ), {, if, (, needsPropertyScope, (, sym, ), ), {, types, ., add, (, sym, ), ;, }, }]
[(, needsPropertyScope, (, sym, ), ), {, types, ., add, (, sym, ), ;, }, }, Collections, ., sort, (]
[(, sym, ), ), {, types, ., add, (, sym, ), ;, }, }, Collections, ., sort, (, types, ,]
[(, sym, ), ), {, types, ., add, (, sym, ), ;, }, }, Collections, ., sort, (, types, ,]
[{, types, ., add, (, sym, ), ;, }, }, Collections, ., sort, (, types, ,, Collections, ., reverseOrder, (]
[., sort, (, types, ,, Collections, ., reverseOrder, (, getNaturalSymbolOrdering, (, ), ), ), ;, for, (, Symbol, s, :]
[types, ,, Collections, ., reverseOrder, (, getNaturalSymbolOrdering, (, ), ), ), ;, for, (, Symbol, s, :, types, ), {]
[Collections, ., reverseOrder, (, getNaturalSymbolOrdering, (, ), ), ), ;, for, (, Symbol, s, :, types, ), {, createPropertyScopeFor, (]
[getNaturalSymbolOrdering, (, ), ), ), ;, for, (, Symbol, s, :, types, ), {, createPropertyScopeFor, (, s, ), ;, }]
[s, ), ;, }, pruneOrphanedNames, (, ), ;, }, private, boolean, needsPropertyScope, (, Symbol, sym, ), {, ObjectType, type, =]
[s, ), ;, }, pruneOrphanedNames, (, ), ;, }, private, boolean, needsPropertyScope, (, Symbol, sym, ), {, ObjectType, type, =]
[pruneOrphanedNames, (, ), ;, }, private, boolean, needsPropertyScope, (, Symbol, sym, ), {, ObjectType, type, =, ObjectType, ., cast, (]
[pruneOrphanedNames, (, ), ;, }, private, boolean, needsPropertyScope, (, Symbol, sym, ), {, ObjectType, type, =, ObjectType, ., cast, (]
[Symbol, sym, ), {, ObjectType, type, =, ObjectType, ., cast, (, sym, ., getType, (, ), ), ;, if, (]
[Symbol, sym, ), {, ObjectType, type, =, ObjectType, ., cast, (, sym, ., getType, (, ), ), ;, if, (]
[), {, ObjectType, type, =, ObjectType, ., cast, (, sym, ., getType, (, ), ), ;, if, (, type, ==]
[=, ObjectType, ., cast, (, sym, ., getType, (, ), ), ;, if, (, type, ==, null, ), {, return]
[sym, ., getType, (, ), ), ;, if, (, type, ==, null, ), {, return, false, ;, }, if, (]
[sym, ., getType, (, ), ), ;, if, (, type, ==, null, ), {, return, false, ;, }, if, (]
[sym, ., getType, (, ), ), ;, if, (, type, ==, null, ), {, return, false, ;, }, if, (]
[;, if, (, type, ==, null, ), {, return, false, ;, }, if, (, type, ., getReferenceName, (, ), ==]
[==, null, ), {, return, false, ;, }, if, (, type, ., getReferenceName, (, ), ==, null, ), {, return]
[false, ;, }, if, (, type, ., getReferenceName, (, ), ==, null, ), {, return, true, ;, }, if, (]
[false, ;, }, if, (, type, ., getReferenceName, (, ), ==, null, ), {, return, true, ;, }, if, (]
[false, ;, }, if, (, type, ., getReferenceName, (, ), ==, null, ), {, return, true, ;, }, if, (]
[(, ), ==, null, ), {, return, true, ;, }, if, (, sym, ., getName, (, ), ., equals, (]
[(, ), ==, null, ), {, return, true, ;, }, if, (, sym, ., getName, (, ), ., equals, (]
[}, if, (, sym, ., getName, (, ), ., equals, (, type, ., getReferenceName, (, ), ), ), {, return]
[getName, (, ), ., equals, (, type, ., getReferenceName, (, ), ), ), {, return, true, ;, }, if, (]
[getName, (, ), ., equals, (, type, ., getReferenceName, (, ), ), ), {, return, true, ;, }, if, (]
[getName, (, ), ., equals, (, type, ., getReferenceName, (, ), ), ), {, return, true, ;, }, if, (]
[type, ., getReferenceName, (, ), ), ), {, return, true, ;, }, if, (, type, ., isEnumType, (, ), &&]
[type, ., getReferenceName, (, ), ), ), {, return, true, ;, }, if, (, type, ., isEnumType, (, ), &&]
[type, ., getReferenceName, (, ), ), ), {, return, true, ;, }, if, (, type, ., isEnumType, (, ), &&]
[return, true, ;, }, if, (, type, ., isEnumType, (, ), &&, sym, ., getName, (, ), ., equals, (]
[return, true, ;, }, if, (, type, ., isEnumType, (, ), &&, sym, ., getName, (, ), ., equals, (]
[return, true, ;, }, if, (, type, ., isEnumType, (, ), &&, sym, ., getName, (, ), ., equals, (]
[return, true, ;, }, if, (, type, ., isEnumType, (, ), &&, sym, ., getName, (, ), ., equals, (]
[., equals, (, type, ., toMaybeEnumType, (, ), ., getElementsType, (, ), ., getReferenceName, (, ), ), ), {, return]
[., toMaybeEnumType, (, ), ., getElementsType, (, ), ., getReferenceName, (, ), ), ), {, return, true, ;, }, return]
[return, true, ;, }, return, false, ;, }, void, pruneOrphanedNames, (, ), {, nextSymbol, :, for, (, Symbol, s, :]
[}, void, pruneOrphanedNames, (, ), {, nextSymbol, :, for, (, Symbol, s, :, getAllSymbolsSorted, (, ), ), {, if, (]
[}, void, pruneOrphanedNames, (, ), {, nextSymbol, :, for, (, Symbol, s, :, getAllSymbolsSorted, (, ), ), {, if, (]
[getAllSymbolsSorted, (, ), ), {, if, (, s, ., isProperty, (, ), ), {, continue, ;, }, String, currentName, =]
[getAllSymbolsSorted, (, ), ), {, if, (, s, ., isProperty, (, ), ), {, continue, ;, }, String, currentName, =]
[isProperty, (, ), ), {, continue, ;, }, String, currentName, =, s, ., getName, (, ), ;, int, dot, =]
[(, ), ), {, continue, ;, }, String, currentName, =, s, ., getName, (, ), ;, int, dot, =, -]
[continue, ;, }, String, currentName, =, s, ., getName, (, ), ;, int, dot, =, -, 1, ;, while, (]
[continue, ;, }, String, currentName, =, s, ., getName, (, ), ;, int, dot, =, -, 1, ;, while, (]
[;, }, String, currentName, =, s, ., getName, (, ), ;, int, dot, =, -, 1, ;, while, (, -]
[String, currentName, =, s, ., getName, (, ), ;, int, dot, =, -, 1, ;, while, (, -, 1, !=]
[currentName, =, s, ., getName, (, ), ;, int, dot, =, -, 1, ;, while, (, -, 1, !=, (]
[s, ., getName, (, ), ;, int, dot, =, -, 1, ;, while, (, -, 1, !=, (, dot, =]
[s, ., getName, (, ), ;, int, dot, =, -, 1, ;, while, (, -, 1, !=, (, dot, =]
[), ;, int, dot, =, -, 1, ;, while, (, -, 1, !=, (, dot, =, currentName, ., lastIndexOf, (]
[-, 1, ;, while, (, -, 1, !=, (, dot, =, currentName, ., lastIndexOf, (, '.', ), ), ), {]
[;, while, (, -, 1, !=, (, dot, =, currentName, ., lastIndexOf, (, '.', ), ), ), {, currentName, =]
[;, while, (, -, 1, !=, (, dot, =, currentName, ., lastIndexOf, (, '.', ), ), ), {, currentName, =]
[1, !=, (, dot, =, currentName, ., lastIndexOf, (, '.', ), ), ), {, currentName, =, currentName, ., substring, (]
[(, dot, =, currentName, ., lastIndexOf, (, '.', ), ), ), {, currentName, =, currentName, ., substring, (, 0, ,]
[(, '.', ), ), ), {, currentName, =, currentName, ., substring, (, 0, ,, dot, ), ;, Symbol, owner, =]
[(, '.', ), ), ), {, currentName, =, currentName, ., substring, (, 0, ,, dot, ), ;, Symbol, owner, =]
[(, '.', ), ), ), {, currentName, =, currentName, ., substring, (, 0, ,, dot, ), ;, Symbol, owner, =]
[currentName, =, currentName, ., substring, (, 0, ,, dot, ), ;, Symbol, owner, =, s, ., scope, ., getQualifiedSlot, (]
[(, 0, ,, dot, ), ;, Symbol, owner, =, s, ., scope, ., getQualifiedSlot, (, currentName, ), ;, if, (]
[(, 0, ,, dot, ), ;, Symbol, owner, =, s, ., scope, ., getQualifiedSlot, (, currentName, ), ;, if, (]
[(, 0, ,, dot, ), ;, Symbol, owner, =, s, ., scope, ., getQualifiedSlot, (, currentName, ), ;, if, (]
[(, 0, ,, dot, ), ;, Symbol, owner, =, s, ., scope, ., getQualifiedSlot, (, currentName, ), ;, if, (]
[,, dot, ), ;, Symbol, owner, =, s, ., scope, ., getQualifiedSlot, (, currentName, ), ;, if, (, owner, !=]
[), ;, Symbol, owner, =, s, ., scope, ., getQualifiedSlot, (, currentName, ), ;, if, (, owner, !=, null, &&]
[), ;, Symbol, owner, =, s, ., scope, ., getQualifiedSlot, (, currentName, ), ;, if, (, owner, !=, null, &&]
[), ;, Symbol, owner, =, s, ., scope, ., getQualifiedSlot, (, currentName, ), ;, if, (, owner, !=, null, &&]
[., scope, ., getQualifiedSlot, (, currentName, ), ;, if, (, owner, !=, null, &&, owner, ., getType, (, ), !=]
[., getQualifiedSlot, (, currentName, ), ;, if, (, owner, !=, null, &&, owner, ., getType, (, ), !=, null, &&]
[getQualifiedSlot, (, currentName, ), ;, if, (, owner, !=, null, &&, owner, ., getType, (, ), !=, null, &&, (]
[getQualifiedSlot, (, currentName, ), ;, if, (, owner, !=, null, &&, owner, ., getType, (, ), !=, null, &&, (]
[getQualifiedSlot, (, currentName, ), ;, if, (, owner, !=, null, &&, owner, ., getType, (, ), !=, null, &&, (]
[getQualifiedSlot, (, currentName, ), ;, if, (, owner, !=, null, &&, owner, ., getType, (, ), !=, null, &&, (]
[getQualifiedSlot, (, currentName, ), ;, if, (, owner, !=, null, &&, owner, ., getType, (, ), !=, null, &&, (]
[&&, owner, ., getType, (, ), !=, null, &&, (, owner, ., getType, (, ), ., isNominalConstructor, (, ), ||]
[&&, owner, ., getType, (, ), !=, null, &&, (, owner, ., getType, (, ), ., isNominalConstructor, (, ), ||]
[&&, owner, ., getType, (, ), !=, null, &&, (, owner, ., getType, (, ), ., isNominalConstructor, (, ), ||]
[owner, ., getType, (, ), ., isNominalConstructor, (, ), ||, owner, ., getType, (, ), ., isFunctionPrototypeType, (, ), ||]
[owner, ., getType, (, ), ., isNominalConstructor, (, ), ||, owner, ., getType, (, ), ., isFunctionPrototypeType, (, ), ||]
[owner, ., getType, (, ), ., isNominalConstructor, (, ), ||, owner, ., getType, (, ), ., isFunctionPrototypeType, (, ), ||]
[getType, (, ), ., isFunctionPrototypeType, (, ), ||, owner, ., getType, (, ), ., isEnumType, (, ), ), ), {]
[), ., isFunctionPrototypeType, (, ), ||, owner, ., getType, (, ), ., isEnumType, (, ), ), ), {, removeSymbol, (]
[continue, nextSymbol, ;, }, }, }, }, void, fillPropertySymbols, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {]
[continue, nextSymbol, ;, }, }, }, }, void, fillPropertySymbols, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {]
[nextSymbol, ;, }, }, }, }, void, fillPropertySymbols, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {, (]
[}, }, }, void, fillPropertySymbols, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {, (, new, PropertyRefCollector, (]
[AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {, (, new, PropertyRefCollector, (, compiler, ), ), ., process, (]
[,, Node, externs, ,, Node, root, ), {, (, new, PropertyRefCollector, (, compiler, ), ), ., process, (, externs, ,]
[(, externs, ,, root, ), ;, }, void, fillJSDocInfo, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {]
[(, externs, ,, root, ), ;, }, void, fillJSDocInfo, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {]
[), ;, }, void, fillJSDocInfo, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (]
[}, void, fillJSDocInfo, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,]
[}, void, fillJSDocInfo, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,]
[AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (]
[,, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,]
[,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,]
[), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, new, JSDocInfoCollector, (]
[), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, new, JSDocInfoCollector, (]
[,, root, ), ,, new, JSDocInfoCollector, (, compiler, ., getTypeRegistry, (, ), ), ), ;, for, (, Symbol, sym, :]
[., getTypeRegistry, (, ), ), ), ;, for, (, Symbol, sym, :, getAllSymbolsSorted, (, ), ), {, JSDocInfo, info, =]
[., getTypeRegistry, (, ), ), ), ;, for, (, Symbol, sym, :, getAllSymbolsSorted, (, ), ), {, JSDocInfo, info, =]
[(, Symbol, sym, :, getAllSymbolsSorted, (, ), ), {, JSDocInfo, info, =, sym, ., getJSDocInfo, (, ), ;, if, (]
[(, Symbol, sym, :, getAllSymbolsSorted, (, ), ), {, JSDocInfo, info, =, sym, ., getJSDocInfo, (, ), ;, if, (]
[sym, :, getAllSymbolsSorted, (, ), ), {, JSDocInfo, info, =, sym, ., getJSDocInfo, (, ), ;, if, (, info, ==]
[., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, continue, ;, }, for, (, Marker, marker, :]
[., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, continue, ;, }, for, (, Marker, marker, :]
[;, }, for, (, Marker, marker, :, info, ., getMarkers, (, ), ), {, SourcePosition, <, Node, >, pos, =]
[;, }, for, (, Marker, marker, :, info, ., getMarkers, (, ), ), {, SourcePosition, <, Node, >, pos, =]
[., getMarkers, (, ), ), {, SourcePosition, <, Node, >, pos, =, marker, ., getNameNode, (, ), ;, if, (]
[., getMarkers, (, ), ), {, SourcePosition, <, Node, >, pos, =, marker, ., getNameNode, (, ), ;, if, (]
[(, ), ), {, SourcePosition, <, Node, >, pos, =, marker, ., getNameNode, (, ), ;, if, (, pos, ==]
[=, marker, ., getNameNode, (, ), ;, if, (, pos, ==, null, ), {, continue, ;, }, Node, paramNode, =]
[=, marker, ., getNameNode, (, ), ;, if, (, pos, ==, null, ), {, continue, ;, }, Node, paramNode, =]
[pos, ==, null, ), {, continue, ;, }, Node, paramNode, =, pos, ., getItem, (, ), ;, String, name, =]
[pos, ==, null, ), {, continue, ;, }, Node, paramNode, =, pos, ., getItem, (, ), ;, String, name, =]
[paramNode, =, pos, ., getItem, (, ), ;, String, name, =, paramNode, ., getString, (, ), ;, Symbol, param, =]
[pos, ., getItem, (, ), ;, String, name, =, paramNode, ., getString, (, ), ;, Symbol, param, =, getParameterInFunction, (]
[getItem, (, ), ;, String, name, =, paramNode, ., getString, (, ), ;, Symbol, param, =, getParameterInFunction, (, sym, ,]
[name, =, paramNode, ., getString, (, ), ;, Symbol, param, =, getParameterInFunction, (, sym, ,, name, ), ;, if, (]
[name, =, paramNode, ., getString, (, ), ;, Symbol, param, =, getParameterInFunction, (, sym, ,, name, ), ;, if, (]
[paramNode, ., getString, (, ), ;, Symbol, param, =, getParameterInFunction, (, sym, ,, name, ), ;, if, (, param, ==]
[getParameterInFunction, (, sym, ,, name, ), ;, if, (, param, ==, null, ), {, SourcePosition, <, Node, >, typePos, =]
[getParameterInFunction, (, sym, ,, name, ), ;, if, (, param, ==, null, ), {, SourcePosition, <, Node, >, typePos, =]
[param, ==, null, ), {, SourcePosition, <, Node, >, typePos, =, marker, ., getType, (, ), ;, JSType, type, =]
[{, SourcePosition, <, Node, >, typePos, =, marker, ., getType, (, ), ;, JSType, type, =, null, ;, if, (]
[{, SourcePosition, <, Node, >, typePos, =, marker, ., getType, (, ), ;, JSType, type, =, null, ;, if, (]
[<, Node, >, typePos, =, marker, ., getType, (, ), ;, JSType, type, =, null, ;, if, (, typePos, !=]
[typePos, =, marker, ., getType, (, ), ;, JSType, type, =, null, ;, if, (, typePos, !=, null, ), {]
[marker, ., getType, (, ), ;, JSType, type, =, null, ;, if, (, typePos, !=, null, ), {, type, =]
[marker, ., getType, (, ), ;, JSType, type, =, null, ;, if, (, typePos, !=, null, ), {, type, =]
[marker, ., getType, (, ), ;, JSType, type, =, null, ;, if, (, typePos, !=, null, ), {, type, =]
[typePos, !=, null, ), {, type, =, typePos, ., getItem, (, ), ., getJSType, (, ), ;, }, if, (]
[typePos, !=, null, ), {, type, =, typePos, ., getItem, (, ), ., getJSType, (, ), ;, }, if, (]
[typePos, !=, null, ), {, type, =, typePos, ., getItem, (, ), ., getJSType, (, ), ;, }, if, (]
[{, type, =, typePos, ., getItem, (, ), ., getJSType, (, ), ;, }, if, (, sym, ., docScope, ==]
[typePos, ., getItem, (, ), ., getJSType, (, ), ;, }, if, (, sym, ., docScope, ==, null, ), {]
[typePos, ., getItem, (, ), ., getJSType, (, ), ;, }, if, (, sym, ., docScope, ==, null, ), {]
[), ., getJSType, (, ), ;, }, if, (, sym, ., docScope, ==, null, ), {, sym, ., docScope, =]
[(, ), ;, }, if, (, sym, ., docScope, ==, null, ), {, sym, ., docScope, =, new, SymbolScope, (]
[;, }, if, (, sym, ., docScope, ==, null, ), {, sym, ., docScope, =, new, SymbolScope, (, null, ,]
[if, (, sym, ., docScope, ==, null, ), {, sym, ., docScope, =, new, SymbolScope, (, null, ,, null, ,]
[sym, ., docScope, ==, null, ), {, sym, ., docScope, =, new, SymbolScope, (, null, ,, null, ,, null, ,]
[sym, ., docScope, =, new, SymbolScope, (, null, ,, null, ,, null, ,, sym, ), ;, }, Symbol, existingSymbol, =]
[docScope, =, new, SymbolScope, (, null, ,, null, ,, null, ,, sym, ), ;, }, Symbol, existingSymbol, =, isAnySymbolDeclared, (]
[new, SymbolScope, (, null, ,, null, ,, null, ,, sym, ), ;, }, Symbol, existingSymbol, =, isAnySymbolDeclared, (, name, ,]
[(, null, ,, null, ,, null, ,, sym, ), ;, }, Symbol, existingSymbol, =, isAnySymbolDeclared, (, name, ,, paramNode, ,]
[(, null, ,, null, ,, null, ,, sym, ), ;, }, Symbol, existingSymbol, =, isAnySymbolDeclared, (, name, ,, paramNode, ,]
[sym, ), ;, }, Symbol, existingSymbol, =, isAnySymbolDeclared, (, name, ,, paramNode, ,, sym, ., docScope, ), ;, if, (]
[sym, ), ;, }, Symbol, existingSymbol, =, isAnySymbolDeclared, (, name, ,, paramNode, ,, sym, ., docScope, ), ;, if, (]
[;, }, Symbol, existingSymbol, =, isAnySymbolDeclared, (, name, ,, paramNode, ,, sym, ., docScope, ), ;, if, (, existingSymbol, ==]
[existingSymbol, =, isAnySymbolDeclared, (, name, ,, paramNode, ,, sym, ., docScope, ), ;, if, (, existingSymbol, ==, null, ), {]
[isAnySymbolDeclared, (, name, ,, paramNode, ,, sym, ., docScope, ), ;, if, (, existingSymbol, ==, null, ), {, declareSymbol, (]
[name, ,, paramNode, ,, sym, ., docScope, ), ;, if, (, existingSymbol, ==, null, ), {, declareSymbol, (, name, ,]
[paramNode, ,, sym, ., docScope, ), ;, if, (, existingSymbol, ==, null, ), {, declareSymbol, (, name, ,, type, ,]
[paramNode, ,, sym, ., docScope, ), ;, if, (, existingSymbol, ==, null, ), {, declareSymbol, (, name, ,, type, ,]
[sym, ., docScope, ), ;, if, (, existingSymbol, ==, null, ), {, declareSymbol, (, name, ,, type, ,, type, ==]
[docScope, ), ;, if, (, existingSymbol, ==, null, ), {, declareSymbol, (, name, ,, type, ,, type, ==, null, ,]
[docScope, ), ;, if, (, existingSymbol, ==, null, ), {, declareSymbol, (, name, ,, type, ,, type, ==, null, ,]
[(, existingSymbol, ==, null, ), {, declareSymbol, (, name, ,, type, ,, type, ==, null, ,, sym, ., docScope, ,]
[==, null, ), {, declareSymbol, (, name, ,, type, ,, type, ==, null, ,, sym, ., docScope, ,, paramNode, ,]
[,, type, ,, type, ==, null, ,, sym, ., docScope, ,, paramNode, ,, null, ), ;, }, }, else, {]
[,, type, ,, type, ==, null, ,, sym, ., docScope, ,, paramNode, ,, null, ), ;, }, }, else, {]
[==, null, ,, sym, ., docScope, ,, paramNode, ,, null, ), ;, }, }, else, {, param, ., defineReferenceAt, (]
[., defineReferenceAt, (, paramNode, ), ;, }, }, }, }, private, void, createPropertyScopeFor, (, Symbol, s, ), {, if, (]
[., defineReferenceAt, (, paramNode, ), ;, }, }, }, }, private, void, createPropertyScopeFor, (, Symbol, s, ), {, if, (]
[., defineReferenceAt, (, paramNode, ), ;, }, }, }, }, private, void, createPropertyScopeFor, (, Symbol, s, ), {, if, (]
[), ;, }, }, }, }, private, void, createPropertyScopeFor, (, Symbol, s, ), {, if, (, s, ., propertyScope, !=]
[(, Symbol, s, ), {, if, (, s, ., propertyScope, !=, null, ), {, return, ;, }, SymbolScope, parentPropertyScope, =]
[if, (, s, ., propertyScope, !=, null, ), {, return, ;, }, SymbolScope, parentPropertyScope, =, null, ;, ObjectType, type, =]
[if, (, s, ., propertyScope, !=, null, ), {, return, ;, }, SymbolScope, parentPropertyScope, =, null, ;, ObjectType, type, =]
[if, (, s, ., propertyScope, !=, null, ), {, return, ;, }, SymbolScope, parentPropertyScope, =, null, ;, ObjectType, type, =]
[if, (, s, ., propertyScope, !=, null, ), {, return, ;, }, SymbolScope, parentPropertyScope, =, null, ;, ObjectType, type, =]
[null, ), {, return, ;, }, SymbolScope, parentPropertyScope, =, null, ;, ObjectType, type, =, s, ., getType, (, ), ==]
[{, return, ;, }, SymbolScope, parentPropertyScope, =, null, ;, ObjectType, type, =, s, ., getType, (, ), ==, null, ?]
[;, }, SymbolScope, parentPropertyScope, =, null, ;, ObjectType, type, =, s, ., getType, (, ), ==, null, ?, null, :]
[;, }, SymbolScope, parentPropertyScope, =, null, ;, ObjectType, type, =, s, ., getType, (, ), ==, null, ?, null, :]
[;, }, SymbolScope, parentPropertyScope, =, null, ;, ObjectType, type, =, s, ., getType, (, ), ==, null, ?, null, :]
[getType, (, ), ==, null, ?, null, :, s, ., getType, (, ), ., toObjectType, (, ), ;, if, (]
[getType, (, ), ==, null, ?, null, :, s, ., getType, (, ), ., toObjectType, (, ), ;, if, (]
[), ==, null, ?, null, :, s, ., getType, (, ), ., toObjectType, (, ), ;, if, (, type, ==]
[(, ), ., toObjectType, (, ), ;, if, (, type, ==, null, ), {, return, ;, }, ObjectType, proto, =]
[(, ), ., toObjectType, (, ), ;, if, (, type, ==, null, ), {, return, ;, }, ObjectType, proto, =]
[(, type, ==, null, ), {, return, ;, }, ObjectType, proto, =, type, ., getParentScope, (, ), ;, if, (]
[(, type, ==, null, ), {, return, ;, }, ObjectType, proto, =, type, ., getParentScope, (, ), ;, if, (]
[(, type, ==, null, ), {, return, ;, }, ObjectType, proto, =, type, ., getParentScope, (, ), ;, if, (]
[(, type, ==, null, ), {, return, ;, }, ObjectType, proto, =, type, ., getParentScope, (, ), ;, if, (]
[==, null, ), {, return, ;, }, ObjectType, proto, =, type, ., getParentScope, (, ), ;, if, (, proto, !=]
[), {, return, ;, }, ObjectType, proto, =, type, ., getParentScope, (, ), ;, if, (, proto, !=, null, &&]
[), {, return, ;, }, ObjectType, proto, =, type, ., getParentScope, (, ), ;, if, (, proto, !=, null, &&]
[return, ;, }, ObjectType, proto, =, type, ., getParentScope, (, ), ;, if, (, proto, !=, null, &&, proto, !=]
[}, ObjectType, proto, =, type, ., getParentScope, (, ), ;, if, (, proto, !=, null, &&, proto, !=, type, &&]
[}, ObjectType, proto, =, type, ., getParentScope, (, ), ;, if, (, proto, !=, null, &&, proto, !=, type, &&]
[}, ObjectType, proto, =, type, ., getParentScope, (, ), ;, if, (, proto, !=, null, &&, proto, !=, type, &&]
[getParentScope, (, ), ;, if, (, proto, !=, null, &&, proto, !=, type, &&, proto, ., getConstructor, (, ), !=]
[proto, !=, null, &&, proto, !=, type, &&, proto, ., getConstructor, (, ), !=, null, ), {, Symbol, parentSymbol, =]
[null, &&, proto, !=, type, &&, proto, ., getConstructor, (, ), !=, null, ), {, Symbol, parentSymbol, =, getSymbolForInstancesOf, (]
[null, &&, proto, !=, type, &&, proto, ., getConstructor, (, ), !=, null, ), {, Symbol, parentSymbol, =, getSymbolForInstancesOf, (]
[(, ), !=, null, ), {, Symbol, parentSymbol, =, getSymbolForInstancesOf, (, proto, ., getConstructor, (, ), ), ;, if, (]
[(, ), !=, null, ), {, Symbol, parentSymbol, =, getSymbolForInstancesOf, (, proto, ., getConstructor, (, ), ), ;, if, (]
[!=, null, ), {, Symbol, parentSymbol, =, getSymbolForInstancesOf, (, proto, ., getConstructor, (, ), ), ;, if, (, parentSymbol, !=]
[{, Symbol, parentSymbol, =, getSymbolForInstancesOf, (, proto, ., getConstructor, (, ), ), ;, if, (, parentSymbol, !=, null, ), {]
[parentSymbol, =, getSymbolForInstancesOf, (, proto, ., getConstructor, (, ), ), ;, if, (, parentSymbol, !=, null, ), {, createPropertyScopeFor, (]
[(, proto, ., getConstructor, (, ), ), ;, if, (, parentSymbol, !=, null, ), {, createPropertyScopeFor, (, parentSymbol, ), ;]
[., getConstructor, (, ), ), ;, if, (, parentSymbol, !=, null, ), {, createPropertyScopeFor, (, parentSymbol, ), ;, parentPropertyScope, =]
[., getConstructor, (, ), ), ;, if, (, parentSymbol, !=, null, ), {, createPropertyScopeFor, (, parentSymbol, ), ;, parentPropertyScope, =]
[), {, createPropertyScopeFor, (, parentSymbol, ), ;, parentPropertyScope, =, parentSymbol, ., getPropertyScope, (, ), ;, }, }, ObjectType, instanceType, =]
[=, parentSymbol, ., getPropertyScope, (, ), ;, }, }, ObjectType, instanceType, =, type, ;, Iterable, <, String, >, propNames, =]
[=, parentSymbol, ., getPropertyScope, (, ), ;, }, }, ObjectType, instanceType, =, type, ;, Iterable, <, String, >, propNames, =]
[}, ObjectType, instanceType, =, type, ;, Iterable, <, String, >, propNames, =, type, ., getOwnPropertyNames, (, ), ;, if, (]
[}, ObjectType, instanceType, =, type, ;, Iterable, <, String, >, propNames, =, type, ., getOwnPropertyNames, (, ), ;, if, (]
[<, String, >, propNames, =, type, ., getOwnPropertyNames, (, ), ;, if, (, instanceType, ., isFunctionPrototypeType, (, ), ), {]
[>, propNames, =, type, ., getOwnPropertyNames, (, ), ;, if, (, instanceType, ., isFunctionPrototypeType, (, ), ), {, instanceType, =]
[>, propNames, =, type, ., getOwnPropertyNames, (, ), ;, if, (, instanceType, ., isFunctionPrototypeType, (, ), ), {, instanceType, =]
[>, propNames, =, type, ., getOwnPropertyNames, (, ), ;, if, (, instanceType, ., isFunctionPrototypeType, (, ), ), {, instanceType, =]
[), {, instanceType, =, instanceType, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ;, Set, <, String, >, set, =]
[), {, instanceType, =, instanceType, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ;, Set, <, String, >, set, =]
[instanceType, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ;, Set, <, String, >, set, =, Sets, ., newHashSet, (]
[(, ), ., getInstanceType, (, ), ;, Set, <, String, >, set, =, Sets, ., newHashSet, (, propNames, ), ;]
[(, ), ., getInstanceType, (, ), ;, Set, <, String, >, set, =, Sets, ., newHashSet, (, propNames, ), ;]
[(, ), ;, Set, <, String, >, set, =, Sets, ., newHashSet, (, propNames, ), ;, Iterables, ., addAll, (]
[;, Set, <, String, >, set, =, Sets, ., newHashSet, (, propNames, ), ;, Iterables, ., addAll, (, set, ,]
[;, Set, <, String, >, set, =, Sets, ., newHashSet, (, propNames, ), ;, Iterables, ., addAll, (, set, ,]
[Sets, ., newHashSet, (, propNames, ), ;, Iterables, ., addAll, (, set, ,, instanceType, ., getOwnPropertyNames, (, ), ), ;]
[newHashSet, (, propNames, ), ;, Iterables, ., addAll, (, set, ,, instanceType, ., getOwnPropertyNames, (, ), ), ;, propNames, =]
[), ;, Iterables, ., addAll, (, set, ,, instanceType, ., getOwnPropertyNames, (, ), ), ;, propNames, =, set, ;, }]
[), ;, Iterables, ., addAll, (, set, ,, instanceType, ., getOwnPropertyNames, (, ), ), ;, propNames, =, set, ;, }]
[addAll, (, set, ,, instanceType, ., getOwnPropertyNames, (, ), ), ;, propNames, =, set, ;, }, s, ., setPropertyScope, (]
[,, instanceType, ., getOwnPropertyNames, (, ), ), ;, propNames, =, set, ;, }, s, ., setPropertyScope, (, new, SymbolScope, (]
[., getOwnPropertyNames, (, ), ), ;, propNames, =, set, ;, }, s, ., setPropertyScope, (, new, SymbolScope, (, null, ,]
[(, ), ), ;, propNames, =, set, ;, }, s, ., setPropertyScope, (, new, SymbolScope, (, null, ,, parentPropertyScope, ,]
[), ;, propNames, =, set, ;, }, s, ., setPropertyScope, (, new, SymbolScope, (, null, ,, parentPropertyScope, ,, type, ,]
[setPropertyScope, (, new, SymbolScope, (, null, ,, parentPropertyScope, ,, type, ,, s, ), ), ;, for, (, String, propName, :]
[type, ,, s, ), ), ;, for, (, String, propName, :, propNames, ), {, StaticSlot, <, JSType, >, newProp, =]
[type, ,, s, ), ), ;, for, (, String, propName, :, propNames, ), {, StaticSlot, <, JSType, >, newProp, =]
[), ;, for, (, String, propName, :, propNames, ), {, StaticSlot, <, JSType, >, newProp, =, instanceType, ., getSlot, (]
[propName, :, propNames, ), {, StaticSlot, <, JSType, >, newProp, =, instanceType, ., getSlot, (, propName, ), ;, if, (]
[propName, :, propNames, ), {, StaticSlot, <, JSType, >, newProp, =, instanceType, ., getSlot, (, propName, ), ;, if, (]
[propName, :, propNames, ), {, StaticSlot, <, JSType, >, newProp, =, instanceType, ., getSlot, (, propName, ), ;, if, (]
[<, JSType, >, newProp, =, instanceType, ., getSlot, (, propName, ), ;, if, (, newProp, ., getDeclaration, (, ), ==]
[propName, ), ;, if, (, newProp, ., getDeclaration, (, ), ==, null, ), {, continue, ;, }, Symbol, oldProp, =]
[propName, ), ;, if, (, newProp, ., getDeclaration, (, ), ==, null, ), {, continue, ;, }, Symbol, oldProp, =]
[(, newProp, ., getDeclaration, (, ), ==, null, ), {, continue, ;, }, Symbol, oldProp, =, symbols, ., get, (]
[(, newProp, ., getDeclaration, (, ), ==, null, ), {, continue, ;, }, Symbol, oldProp, =, symbols, ., get, (]
[(, newProp, ., getDeclaration, (, ), ==, null, ), {, continue, ;, }, Symbol, oldProp, =, symbols, ., get, (]
[continue, ;, }, Symbol, oldProp, =, symbols, ., get, (, newProp, ., getDeclaration, (, ), ., getNode, (, ), ,]
[continue, ;, }, Symbol, oldProp, =, symbols, ., get, (, newProp, ., getDeclaration, (, ), ., getNode, (, ), ,]
[continue, ;, }, Symbol, oldProp, =, symbols, ., get, (, newProp, ., getDeclaration, (, ), ., getNode, (, ), ,]
[continue, ;, }, Symbol, oldProp, =, symbols, ., get, (, newProp, ., getDeclaration, (, ), ., getNode, (, ), ,]
[symbols, ., get, (, newProp, ., getDeclaration, (, ), ., getNode, (, ), ,, s, ., getName, (, ), +]
[get, (, newProp, ., getDeclaration, (, ), ., getNode, (, ), ,, s, ., getName, (, ), +, ".", +]
[(, ), ., getNode, (, ), ,, s, ., getName, (, ), +, ".", +, propName, ), ;, if, (]
[(, ), ., getNode, (, ), ,, s, ., getName, (, ), +, ".", +, propName, ), ;, if, (]
[., getNode, (, ), ,, s, ., getName, (, ), +, ".", +, propName, ), ;, if, (, oldProp, !=]
[), ,, s, ., getName, (, ), +, ".", +, propName, ), ;, if, (, oldProp, !=, null, ), {]
[s, ., getName, (, ), +, ".", +, propName, ), ;, if, (, oldProp, !=, null, ), {, removeSymbol, (]
[".", +, propName, ), ;, if, (, oldProp, !=, null, ), {, removeSymbol, (, oldProp, ), ;, }, if, (]
[".", +, propName, ), ;, if, (, oldProp, !=, null, ), {, removeSymbol, (, oldProp, ), ;, }, if, (]
[".", +, propName, ), ;, if, (, oldProp, !=, null, ), {, removeSymbol, (, oldProp, ), ;, }, if, (]
[;, if, (, oldProp, !=, null, ), {, removeSymbol, (, oldProp, ), ;, }, if, (, symbols, ., get, (]
[;, if, (, oldProp, !=, null, ), {, removeSymbol, (, oldProp, ), ;, }, if, (, symbols, ., get, (]
[;, if, (, oldProp, !=, null, ), {, removeSymbol, (, oldProp, ), ;, }, if, (, symbols, ., get, (]
[oldProp, ), ;, }, if, (, symbols, ., get, (, newProp, ., getDeclaration, (, ), ., getNode, (, ), ,]
[oldProp, ), ;, }, if, (, symbols, ., get, (, newProp, ., getDeclaration, (, ), ., getNode, (, ), ,]
[., get, (, newProp, ., getDeclaration, (, ), ., getNode, (, ), ,, newProp, ., getName, (, ), ), !=]
[newProp, ., getDeclaration, (, ), ., getNode, (, ), ,, newProp, ., getName, (, ), ), !=, null, ), {]
[newProp, ., getDeclaration, (, ), ., getNode, (, ), ,, newProp, ., getName, (, ), ), !=, null, ), {]
[), ., getNode, (, ), ,, newProp, ., getName, (, ), ), !=, null, ), {, logger, ., warning, (]
[), ., getNode, (, ), ,, newProp, ., getName, (, ), ), !=, null, ), {, logger, ., warning, (]
[getNode, (, ), ,, newProp, ., getName, (, ), ), !=, null, ), {, logger, ., warning, (, "Found duplicate symbol ", +]
[), !=, null, ), {, logger, ., warning, (, "Found duplicate symbol ", +, newProp, ), ;, continue, ;, }, Symbol, newSym, =]
[null, ), {, logger, ., warning, (, "Found duplicate symbol ", +, newProp, ), ;, continue, ;, }, Symbol, newSym, =, copySymbolTo, (]
[{, logger, ., warning, (, "Found duplicate symbol ", +, newProp, ), ;, continue, ;, }, Symbol, newSym, =, copySymbolTo, (, newProp, ,]
[{, logger, ., warning, (, "Found duplicate symbol ", +, newProp, ), ;, continue, ;, }, Symbol, newSym, =, copySymbolTo, (, newProp, ,]
[newProp, ), ;, continue, ;, }, Symbol, newSym, =, copySymbolTo, (, newProp, ,, s, ., propertyScope, ), ;, if, (]
[newProp, ), ;, continue, ;, }, Symbol, newSym, =, copySymbolTo, (, newProp, ,, s, ., propertyScope, ), ;, if, (]
[;, continue, ;, }, Symbol, newSym, =, copySymbolTo, (, newProp, ,, s, ., propertyScope, ), ;, if, (, oldProp, !=]
[newSym, =, copySymbolTo, (, newProp, ,, s, ., propertyScope, ), ;, if, (, oldProp, !=, null, ), {, if, (]
[newSym, =, copySymbolTo, (, newProp, ,, s, ., propertyScope, ), ;, if, (, oldProp, !=, null, ), {, if, (]
[newSym, =, copySymbolTo, (, newProp, ,, s, ., propertyScope, ), ;, if, (, oldProp, !=, null, ), {, if, (]
[s, ., propertyScope, ), ;, if, (, oldProp, !=, null, ), {, if, (, newSym, ., getJSDocInfo, (, ), ==]
[), ;, if, (, oldProp, !=, null, ), {, if, (, newSym, ., getJSDocInfo, (, ), ==, null, ), {]
[), ;, if, (, oldProp, !=, null, ), {, if, (, newSym, ., getJSDocInfo, (, ), ==, null, ), {]
[oldProp, !=, null, ), {, if, (, newSym, ., getJSDocInfo, (, ), ==, null, ), {, newSym, ., setJSDocInfo, (]
[oldProp, !=, null, ), {, if, (, newSym, ., getJSDocInfo, (, ), ==, null, ), {, newSym, ., setJSDocInfo, (]
[., getJSDocInfo, (, ), ==, null, ), {, newSym, ., setJSDocInfo, (, oldProp, ., getJSDocInfo, (, ), ), ;, }]
[., getJSDocInfo, (, ), ==, null, ), {, newSym, ., setJSDocInfo, (, oldProp, ., getJSDocInfo, (, ), ), ;, }]
[==, null, ), {, newSym, ., setJSDocInfo, (, oldProp, ., getJSDocInfo, (, ), ), ;, }, newSym, ., setPropertyScope, (]
[==, null, ), {, newSym, ., setJSDocInfo, (, oldProp, ., getJSDocInfo, (, ), ), ;, }, newSym, ., setPropertyScope, (]
[getJSDocInfo, (, ), ), ;, }, newSym, ., setPropertyScope, (, oldProp, ., propertyScope, ), ;, for, (, Reference, ref, :]
[getJSDocInfo, (, ), ), ;, }, newSym, ., setPropertyScope, (, oldProp, ., propertyScope, ), ;, for, (, Reference, ref, :]
[getJSDocInfo, (, ), ), ;, }, newSym, ., setPropertyScope, (, oldProp, ., propertyScope, ), ;, for, (, Reference, ref, :]
[(, oldProp, ., propertyScope, ), ;, for, (, Reference, ref, :, oldProp, ., references, ., values, (, ), ), {]
[(, oldProp, ., propertyScope, ), ;, for, (, Reference, ref, :, oldProp, ., references, ., values, (, ), ), {]
[), ;, for, (, Reference, ref, :, oldProp, ., references, ., values, (, ), ), {, newSym, ., defineReferenceAt, (]
[), ;, for, (, Reference, ref, :, oldProp, ., references, ., values, (, ), ), {, newSym, ., defineReferenceAt, (]
[), ), ;, }, }, }, }, void, fillThisReferences, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {]
[), ), ;, }, }, }, }, void, fillThisReferences, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {]
[), ;, }, }, }, }, void, fillThisReferences, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {, (]
[}, }, }, void, fillThisReferences, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {, (, new, ThisRefCollector, (]
[AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {, (, new, ThisRefCollector, (, compiler, ), ), ., process, (]
[,, Node, externs, ,, Node, root, ), {, (, new, ThisRefCollector, (, compiler, ), ), ., process, (, externs, ,]
[externs, ,, root, ), ;, }, private, SymbolScope, createScopeFrom, (, StaticScope, <, JSType, >, otherScope, ), {, Node, otherScopeRoot, =]
[externs, ,, root, ), ;, }, private, SymbolScope, createScopeFrom, (, StaticScope, <, JSType, >, otherScope, ), {, Node, otherScopeRoot, =]
[(, StaticScope, <, JSType, >, otherScope, ), {, Node, otherScopeRoot, =, otherScope, ., getRootNode, (, ), ;, SymbolScope, myScope, =]
[(, StaticScope, <, JSType, >, otherScope, ), {, Node, otherScopeRoot, =, otherScope, ., getRootNode, (, ), ;, SymbolScope, myScope, =]
[>, otherScope, ), {, Node, otherScopeRoot, =, otherScope, ., getRootNode, (, ), ;, SymbolScope, myScope, =, scopes, ., get, (]
[otherScopeRoot, =, otherScope, ., getRootNode, (, ), ;, SymbolScope, myScope, =, scopes, ., get, (, otherScopeRoot, ), ;, if, (]
[otherScopeRoot, =, otherScope, ., getRootNode, (, ), ;, SymbolScope, myScope, =, scopes, ., get, (, otherScopeRoot, ), ;, if, (]
[otherScope, ., getRootNode, (, ), ;, SymbolScope, myScope, =, scopes, ., get, (, otherScopeRoot, ), ;, if, (, myScope, ==]
[scopes, ., get, (, otherScopeRoot, ), ;, if, (, myScope, ==, null, ), {, StaticScope, <, JSType, >, otherScopeParent, =]
[scopes, ., get, (, otherScopeRoot, ), ;, if, (, myScope, ==, null, ), {, StaticScope, <, JSType, >, otherScopeParent, =]
[(, myScope, ==, null, ), {, StaticScope, <, JSType, >, otherScopeParent, =, otherScope, ., getParentScope, (, ), ;, if, (]
[(, myScope, ==, null, ), {, StaticScope, <, JSType, >, otherScopeParent, =, otherScope, ., getParentScope, (, ), ;, if, (]
[==, null, ), {, StaticScope, <, JSType, >, otherScopeParent, =, otherScope, ., getParentScope, (, ), ;, if, (, otherScopeParent, ==]
[{, StaticScope, <, JSType, >, otherScopeParent, =, otherScope, ., getParentScope, (, ), ;, if, (, otherScopeParent, ==, null, ), {]
[{, StaticScope, <, JSType, >, otherScopeParent, =, otherScope, ., getParentScope, (, ), ;, if, (, otherScopeParent, ==, null, ), {]
[>, otherScopeParent, =, otherScope, ., getParentScope, (, ), ;, if, (, otherScopeParent, ==, null, ), {, Preconditions, ., checkState, (]
[>, otherScopeParent, =, otherScope, ., getParentScope, (, ), ;, if, (, otherScopeParent, ==, null, ), {, Preconditions, ., checkState, (]
[=, otherScope, ., getParentScope, (, ), ;, if, (, otherScopeParent, ==, null, ), {, Preconditions, ., checkState, (, globalScope, ==]
[., getParentScope, (, ), ;, if, (, otherScopeParent, ==, null, ), {, Preconditions, ., checkState, (, globalScope, ==, null, ,]
[;, if, (, otherScopeParent, ==, null, ), {, Preconditions, ., checkState, (, globalScope, ==, null, ,, "Global scopes found at different roots", ), ;, }]
[(, otherScopeParent, ==, null, ), {, Preconditions, ., checkState, (, globalScope, ==, null, ,, "Global scopes found at different roots", ), ;, }, myScope, =]
[null, ), {, Preconditions, ., checkState, (, globalScope, ==, null, ,, "Global scopes found at different roots", ), ;, }, myScope, =, new, SymbolScope, (]
[{, Preconditions, ., checkState, (, globalScope, ==, null, ,, "Global scopes found at different roots", ), ;, }, myScope, =, new, SymbolScope, (, otherScopeRoot, ,]
[{, Preconditions, ., checkState, (, globalScope, ==, null, ,, "Global scopes found at different roots", ), ;, }, myScope, =, new, SymbolScope, (, otherScopeRoot, ,]
[{, Preconditions, ., checkState, (, globalScope, ==, null, ,, "Global scopes found at different roots", ), ;, }, myScope, =, new, SymbolScope, (, otherScopeRoot, ,]
[., checkState, (, globalScope, ==, null, ,, "Global scopes found at different roots", ), ;, }, myScope, =, new, SymbolScope, (, otherScopeRoot, ,, otherScopeParent, ==]
[(, globalScope, ==, null, ,, "Global scopes found at different roots", ), ;, }, myScope, =, new, SymbolScope, (, otherScopeRoot, ,, otherScopeParent, ==, null, ?]
[==, null, ,, "Global scopes found at different roots", ), ;, }, myScope, =, new, SymbolScope, (, otherScopeRoot, ,, otherScopeParent, ==, null, ?, null, :]
[,, "Global scopes found at different roots", ), ;, }, myScope, =, new, SymbolScope, (, otherScopeRoot, ,, otherScopeParent, ==, null, ?, null, :, createScopeFrom, (]
[;, }, myScope, =, new, SymbolScope, (, otherScopeRoot, ,, otherScopeParent, ==, null, ?, null, :, createScopeFrom, (, otherScopeParent, ), ,]
[;, }, myScope, =, new, SymbolScope, (, otherScopeRoot, ,, otherScopeParent, ==, null, ?, null, :, createScopeFrom, (, otherScopeParent, ), ,]
[(, otherScopeRoot, ,, otherScopeParent, ==, null, ?, null, :, createScopeFrom, (, otherScopeParent, ), ,, otherScope, ., getTypeOfThis, (, ), ,]
[otherScopeParent, ==, null, ?, null, :, createScopeFrom, (, otherScopeParent, ), ,, otherScope, ., getTypeOfThis, (, ), ,, null, ), ;]
[otherScopeParent, ==, null, ?, null, :, createScopeFrom, (, otherScopeParent, ), ,, otherScope, ., getTypeOfThis, (, ), ,, null, ), ;]
[null, :, createScopeFrom, (, otherScopeParent, ), ,, otherScope, ., getTypeOfThis, (, ), ,, null, ), ;, scopes, ., put, (]
[createScopeFrom, (, otherScopeParent, ), ,, otherScope, ., getTypeOfThis, (, ), ,, null, ), ;, scopes, ., put, (, otherScopeRoot, ,]
[otherScope, ., getTypeOfThis, (, ), ,, null, ), ;, scopes, ., put, (, otherScopeRoot, ,, myScope, ), ;, if, (]
[otherScope, ., getTypeOfThis, (, ), ,, null, ), ;, scopes, ., put, (, otherScopeRoot, ,, myScope, ), ;, if, (]
[), ;, scopes, ., put, (, otherScopeRoot, ,, myScope, ), ;, if, (, myScope, ., isGlobalScope, (, ), ), {]
[scopes, ., put, (, otherScopeRoot, ,, myScope, ), ;, if, (, myScope, ., isGlobalScope, (, ), ), {, globalScope, =]
[,, myScope, ), ;, if, (, myScope, ., isGlobalScope, (, ), ), {, globalScope, =, myScope, ;, }, }, return]
[;, }, public, static, final, class, Symbol, extends, SimpleSlot, {, private, final, Map, <, Node, ,, Reference, >, references, =]
[;, }, public, static, final, class, Symbol, extends, SimpleSlot, {, private, final, Map, <, Node, ,, Reference, >, references, =]
[,, Reference, >, references, =, Maps, ., newLinkedHashMap, (, ), ;, private, final, SymbolScope, scope, ;, private, SymbolScope, propertyScope, =]
[., newLinkedHashMap, (, ), ;, private, final, SymbolScope, scope, ;, private, SymbolScope, propertyScope, =, null, ;, private, Reference, declaration, =]
[final, SymbolScope, scope, ;, private, SymbolScope, propertyScope, =, null, ;, private, Reference, declaration, =, null, ;, private, JSDocInfo, docInfo, =]
[propertyScope, =, null, ;, private, Reference, declaration, =, null, ;, private, JSDocInfo, docInfo, =, null, ;, private, SymbolScope, docScope, =]
[=, null, ;, Symbol, (, String, name, ,, JSType, type, ,, boolean, inferred, ,, SymbolScope, scope, ), {, super, (]
[;, Symbol, (, String, name, ,, JSType, type, ,, boolean, inferred, ,, SymbolScope, scope, ), {, super, (, name, ,]
[(, String, name, ,, JSType, type, ,, boolean, inferred, ,, SymbolScope, scope, ), {, super, (, name, ,, type, ,]
[,, JSType, type, ,, boolean, inferred, ,, SymbolScope, scope, ), {, super, (, name, ,, type, ,, inferred, ), ;]
[,, JSType, type, ,, boolean, inferred, ,, SymbolScope, scope, ), {, super, (, name, ,, type, ,, inferred, ), ;]
[boolean, inferred, ,, SymbolScope, scope, ), {, super, (, name, ,, type, ,, inferred, ), ;, this, ., scope, =]
[,, inferred, ), ;, this, ., scope, =, scope, ;, }, @, Override, public, Reference, getDeclaration, (, ), {, return]
[}, @, Override, public, Reference, getDeclaration, (, ), {, return, declaration, ;, }, public, FunctionType, getFunctionType, (, ), {, return]
[}, @, Override, public, Reference, getDeclaration, (, ), {, return, declaration, ;, }, public, FunctionType, getFunctionType, (, ), {, return]
[Reference, getDeclaration, (, ), {, return, declaration, ;, }, public, FunctionType, getFunctionType, (, ), {, return, JSType, ., toMaybeFunctionType, (]
[., toMaybeFunctionType, (, getType, (, ), ), ;, }, public, Reference, defineReferenceAt, (, Node, n, ), {, Reference, result, =]
[., toMaybeFunctionType, (, getType, (, ), ), ;, }, public, Reference, defineReferenceAt, (, Node, n, ), {, Reference, result, =]
[(, ), ), ;, }, public, Reference, defineReferenceAt, (, Node, n, ), {, Reference, result, =, references, ., get, (]
[public, Reference, defineReferenceAt, (, Node, n, ), {, Reference, result, =, references, ., get, (, n, ), ;, if, (]
[public, Reference, defineReferenceAt, (, Node, n, ), {, Reference, result, =, references, ., get, (, n, ), ;, if, (]
[defineReferenceAt, (, Node, n, ), {, Reference, result, =, references, ., get, (, n, ), ;, if, (, result, ==]
[n, ), {, Reference, result, =, references, ., get, (, n, ), ;, if, (, result, ==, null, ), {]
[{, Reference, result, =, references, ., get, (, n, ), ;, if, (, result, ==, null, ), {, result, =]
[=, references, ., get, (, n, ), ;, if, (, result, ==, null, ), {, result, =, new, Reference, (]
[., get, (, n, ), ;, if, (, result, ==, null, ), {, result, =, new, Reference, (, this, ,]
[n, ), ;, if, (, result, ==, null, ), {, result, =, new, Reference, (, this, ,, n, ), ;]
[n, ), ;, if, (, result, ==, null, ), {, result, =, new, Reference, (, this, ,, n, ), ;]
[(, result, ==, null, ), {, result, =, new, Reference, (, this, ,, n, ), ;, references, ., put, (]
[==, null, ), {, result, =, new, Reference, (, this, ,, n, ), ;, references, ., put, (, n, ,]
[=, new, Reference, (, this, ,, n, ), ;, references, ., put, (, n, ,, result, ), ;, }, return]
[., put, (, n, ,, result, ), ;, }, return, result, ;, }, void, setDeclaration, (, Reference, ref, ), {]
[., put, (, n, ,, result, ), ;, }, return, result, ;, }, void, setDeclaration, (, Reference, ref, ), {]
[,, result, ), ;, }, return, result, ;, }, void, setDeclaration, (, Reference, ref, ), {, Preconditions, ., checkState, (]
[,, result, ), ;, }, return, result, ;, }, void, setDeclaration, (, Reference, ref, ), {, Preconditions, ., checkState, (]
[,, result, ), ;, }, return, result, ;, }, void, setDeclaration, (, Reference, ref, ), {, Preconditions, ., checkState, (]
[}, return, result, ;, }, void, setDeclaration, (, Reference, ref, ), {, Preconditions, ., checkState, (, this, ., declaration, ==]
[;, }, void, setDeclaration, (, Reference, ref, ), {, Preconditions, ., checkState, (, this, ., declaration, ==, null, ), ;]
[;, }, void, setDeclaration, (, Reference, ref, ), {, Preconditions, ., checkState, (, this, ., declaration, ==, null, ), ;]
[(, Reference, ref, ), {, Preconditions, ., checkState, (, this, ., declaration, ==, null, ), ;, this, ., declaration, =]
[., declaration, ==, null, ), ;, this, ., declaration, =, ref, ;, }, public, boolean, inGlobalScope, (, ), {, return]
[., declaration, ==, null, ), ;, this, ., declaration, =, ref, ;, }, public, boolean, inGlobalScope, (, ), {, return]
[(, ), {, return, scope, ., isGlobalScope, (, ), ;, }, public, boolean, inExterns, (, ), {, Node, n, =]
[., isGlobalScope, (, ), ;, }, public, boolean, inExterns, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, return]
[., isGlobalScope, (, ), ;, }, public, boolean, inExterns, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, return]
[., isGlobalScope, (, ), ;, }, public, boolean, inExterns, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, return]
[(, ), ;, }, public, boolean, inExterns, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, return, n, ==]
[;, }, public, boolean, inExterns, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, return, n, ==, null, ?]
[public, boolean, inExterns, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, return, n, ==, null, ?, false, :]
[public, boolean, inExterns, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, return, n, ==, null, ?, false, :]
[n, ==, null, ?, false, :, n, ., isFromExterns, (, ), ;, }, public, Node, getDeclarationNode, (, ), {, return]
[n, ==, null, ?, false, :, n, ., isFromExterns, (, ), ;, }, public, Node, getDeclarationNode, (, ), {, return]
[n, ==, null, ?, false, :, n, ., isFromExterns, (, ), ;, }, public, Node, getDeclarationNode, (, ), {, return]
[null, ?, false, :, n, ., isFromExterns, (, ), ;, }, public, Node, getDeclarationNode, (, ), {, return, declaration, ==]
[false, :, n, ., isFromExterns, (, ), ;, }, public, Node, getDeclarationNode, (, ), {, return, declaration, ==, null, ?]
[n, ., isFromExterns, (, ), ;, }, public, Node, getDeclarationNode, (, ), {, return, declaration, ==, null, ?, null, :]
[n, ., isFromExterns, (, ), ;, }, public, Node, getDeclarationNode, (, ), {, return, declaration, ==, null, ?, null, :]
[null, ?, null, :, declaration, ., getNode, (, ), ;, }, public, String, getSourceFileName, (, ), {, Node, n, =]
[., getNode, (, ), ;, }, public, String, getSourceFileName, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, return]
[., getNode, (, ), ;, }, public, String, getSourceFileName, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, return]
[., getNode, (, ), ;, }, public, String, getSourceFileName, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, return]
[(, ), ;, }, public, String, getSourceFileName, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, return, n, ==]
[;, }, public, String, getSourceFileName, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, return, n, ==, null, ?]
[public, String, getSourceFileName, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, return, n, ==, null, ?, null, :]
[public, String, getSourceFileName, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, return, n, ==, null, ?, null, :]
[n, ==, null, ?, null, :, n, ., getSourceFileName, (, ), ;, }, public, SymbolScope, getPropertyScope, (, ), {, return]
[), ;, }, public, SymbolScope, getPropertyScope, (, ), {, return, propertyScope, ;, }, void, setPropertyScope, (, SymbolScope, scope, ), {]
[), ;, }, public, SymbolScope, getPropertyScope, (, ), {, return, propertyScope, ;, }, void, setPropertyScope, (, SymbolScope, scope, ), {]
[SymbolScope, getPropertyScope, (, ), {, return, propertyScope, ;, }, void, setPropertyScope, (, SymbolScope, scope, ), {, this, ., propertyScope, =]
[{, return, propertyScope, ;, }, void, setPropertyScope, (, SymbolScope, scope, ), {, this, ., propertyScope, =, scope, ;, if, (]
[{, return, propertyScope, ;, }, void, setPropertyScope, (, SymbolScope, scope, ), {, this, ., propertyScope, =, scope, ;, if, (]
[propertyScope, ;, }, void, setPropertyScope, (, SymbolScope, scope, ), {, this, ., propertyScope, =, scope, ;, if, (, scope, !=]
[void, setPropertyScope, (, SymbolScope, scope, ), {, this, ., propertyScope, =, scope, ;, if, (, scope, !=, null, ), {]
[void, setPropertyScope, (, SymbolScope, scope, ), {, this, ., propertyScope, =, scope, ;, if, (, scope, !=, null, ), {]
[void, setPropertyScope, (, SymbolScope, scope, ), {, this, ., propertyScope, =, scope, ;, if, (, scope, !=, null, ), {]
[{, this, ., propertyScope, =, scope, ;, if, (, scope, !=, null, ), {, this, ., propertyScope, ., setSymbolForScope, (]
[this, ., propertyScope, ., setSymbolForScope, (, this, ), ;, }, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return]
[}, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, docInfo, ;, }, void, setJSDocInfo, (, JSDocInfo, info, ), {]
[}, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, docInfo, ;, }, void, setJSDocInfo, (, JSDocInfo, info, ), {]
[JSDocInfo, getJSDocInfo, (, ), {, return, docInfo, ;, }, void, setJSDocInfo, (, JSDocInfo, info, ), {, this, ., docInfo, =]
[setJSDocInfo, (, JSDocInfo, info, ), {, this, ., docInfo, =, info, ;, }, public, boolean, isProperty, (, ), {, return]
[setJSDocInfo, (, JSDocInfo, info, ), {, this, ., docInfo, =, info, ;, }, public, boolean, isProperty, (, ), {, return]
[boolean, isProperty, (, ), {, return, scope, ., isPropertyScope, (, ), ;, }, public, boolean, isLexicalVariable, (, ), {, return]
[boolean, isProperty, (, ), {, return, scope, ., isPropertyScope, (, ), ;, }, public, boolean, isLexicalVariable, (, ), {, return]
[boolean, isLexicalVariable, (, ), {, return, scope, ., isLexicalScope, (, ), ;, }, public, boolean, isDocOnlyParameter, (, ), {, return]
[boolean, isLexicalVariable, (, ), {, return, scope, ., isLexicalScope, (, ), ;, }, public, boolean, isDocOnlyParameter, (, ), {, return]
[{, return, scope, ., isDocScope, (, ), ;, }, @, Override, public, String, toString, (, ), {, Node, n, =]
[;, }, @, Override, public, String, toString, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, int, lineNo, =]
[;, }, @, Override, public, String, toString, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, int, lineNo, =]
[;, }, @, Override, public, String, toString, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, int, lineNo, =]
[@, Override, public, String, toString, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, int, lineNo, =, n, ==]
[public, String, toString, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, int, lineNo, =, n, ==, null, ?]
[String, toString, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, int, lineNo, =, n, ==, null, ?, -]
[(, ), {, Node, n, =, getDeclarationNode, (, ), ;, int, lineNo, =, n, ==, null, ?, -, 1, :]
[(, ), {, Node, n, =, getDeclarationNode, (, ), ;, int, lineNo, =, n, ==, null, ?, -, 1, :]
[(, ), ;, int, lineNo, =, n, ==, null, ?, -, 1, :, n, ., getLineno, (, ), ;, return]
[(, ), ;, int, lineNo, =, n, ==, null, ?, -, 1, :, n, ., getLineno, (, ), ;, return]
[(, ), ;, int, lineNo, =, n, ==, null, ?, -, 1, :, n, ., getLineno, (, ), ;, return]
[(, ), ;, int, lineNo, =, n, ==, null, ?, -, 1, :, n, ., getLineno, (, ), ;, return]
[(, ), ;, int, lineNo, =, n, ==, null, ?, -, 1, :, n, ., getLineno, (, ), ;, return]
[lineNo, =, n, ==, null, ?, -, 1, :, n, ., getLineno, (, ), ;, return, getName, (, ), +]
[n, ==, null, ?, -, 1, :, n, ., getLineno, (, ), ;, return, getName, (, ), +, "@", +]
[-, 1, :, n, ., getLineno, (, ), ;, return, getName, (, ), +, "@", +, getSourceFileName, (, ), +]
[:, n, ., getLineno, (, ), ;, return, getName, (, ), +, "@", +, getSourceFileName, (, ), +, ":", +]
[final, class, Reference, extends, SimpleReference, <, Symbol, >, {, Reference, (, Symbol, symbol, ,, Node, node, ), {, super, (]
[Reference, extends, SimpleReference, <, Symbol, >, {, Reference, (, Symbol, symbol, ,, Node, node, ), {, super, (, symbol, ,]
[private, final, SymbolScope, parent, ;, private, final, JSType, typeOfThis, ;, private, final, Map, <, String, ,, Symbol, >, ownSymbols, =]
[private, final, SymbolScope, parent, ;, private, final, JSType, typeOfThis, ;, private, final, Map, <, String, ,, Symbol, >, ownSymbols, =]
[,, Symbol, >, ownSymbols, =, Maps, ., newLinkedHashMap, (, ), ;, private, final, int, scopeDepth, ;, private, int, innerAnonFunctionsWithNames, =]
[Symbol, mySymbol, ;, SymbolScope, (, Node, rootNode, ,, @, Nullable, SymbolScope, parent, ,, JSType, typeOfThis, ,, Symbol, mySymbol, ), {]
[Symbol, mySymbol, ;, SymbolScope, (, Node, rootNode, ,, @, Nullable, SymbolScope, parent, ,, JSType, typeOfThis, ,, Symbol, mySymbol, ), {]
[(, Node, rootNode, ,, @, Nullable, SymbolScope, parent, ,, JSType, typeOfThis, ,, Symbol, mySymbol, ), {, this, ., rootNode, =]
[rootNode, ,, @, Nullable, SymbolScope, parent, ,, JSType, typeOfThis, ,, Symbol, mySymbol, ), {, this, ., rootNode, =, rootNode, ;]
[rootNode, ,, @, Nullable, SymbolScope, parent, ,, JSType, typeOfThis, ,, Symbol, mySymbol, ), {, this, ., rootNode, =, rootNode, ;]
[SymbolScope, parent, ,, JSType, typeOfThis, ,, Symbol, mySymbol, ), {, this, ., rootNode, =, rootNode, ;, this, ., parent, =]
[,, JSType, typeOfThis, ,, Symbol, mySymbol, ), {, this, ., rootNode, =, rootNode, ;, this, ., parent, =, parent, ;]
[,, JSType, typeOfThis, ,, Symbol, mySymbol, ), {, this, ., rootNode, =, rootNode, ;, this, ., parent, =, parent, ;]
[Symbol, mySymbol, ), {, this, ., rootNode, =, rootNode, ;, this, ., parent, =, parent, ;, this, ., typeOfThis, =]
[), {, this, ., rootNode, =, rootNode, ;, this, ., parent, =, parent, ;, this, ., typeOfThis, =, typeOfThis, ;]
[), {, this, ., rootNode, =, rootNode, ;, this, ., parent, =, parent, ;, this, ., typeOfThis, =, typeOfThis, ;]
[rootNode, =, rootNode, ;, this, ., parent, =, parent, ;, this, ., typeOfThis, =, typeOfThis, ;, this, ., scopeDepth, =]
[rootNode, =, rootNode, ;, this, ., parent, =, parent, ;, this, ., typeOfThis, =, typeOfThis, ;, this, ., scopeDepth, =]
[rootNode, =, rootNode, ;, this, ., parent, =, parent, ;, this, ., typeOfThis, =, typeOfThis, ;, this, ., scopeDepth, =]
[rootNode, ;, this, ., parent, =, parent, ;, this, ., typeOfThis, =, typeOfThis, ;, this, ., scopeDepth, =, parent, ==]
[this, ., parent, =, parent, ;, this, ., typeOfThis, =, typeOfThis, ;, this, ., scopeDepth, =, parent, ==, null, ?]
[parent, =, parent, ;, this, ., typeOfThis, =, typeOfThis, ;, this, ., scopeDepth, =, parent, ==, null, ?, 0, :]
[=, parent, ;, this, ., typeOfThis, =, typeOfThis, ;, this, ., scopeDepth, =, parent, ==, null, ?, 0, :, (]
[=, parent, ;, this, ., typeOfThis, =, typeOfThis, ;, this, ., scopeDepth, =, parent, ==, null, ?, 0, :, (]
[=, parent, ;, this, ., typeOfThis, =, typeOfThis, ;, this, ., scopeDepth, =, parent, ==, null, ?, 0, :, (]
[=, typeOfThis, ;, this, ., scopeDepth, =, parent, ==, null, ?, 0, :, (, parent, ., getScopeDepth, (, ), +]
[this, ., scopeDepth, =, parent, ==, null, ?, 0, :, (, parent, ., getScopeDepth, (, ), +, 1, ), ;]
[this, ., scopeDepth, =, parent, ==, null, ?, 0, :, (, parent, ., getScopeDepth, (, ), +, 1, ), ;]
[parent, ==, null, ?, 0, :, (, parent, ., getScopeDepth, (, ), +, 1, ), ;, this, ., mySymbol, =]
[getScopeDepth, (, ), +, 1, ), ;, this, ., mySymbol, =, mySymbol, ;, }, Symbol, getSymbolForScope, (, ), {, return]
[=, mySymbol, ;, }, Symbol, getSymbolForScope, (, ), {, return, mySymbol, ;, }, void, setSymbolForScope, (, Symbol, sym, ), {]
[=, mySymbol, ;, }, Symbol, getSymbolForScope, (, ), {, return, mySymbol, ;, }, void, setSymbolForScope, (, Symbol, sym, ), {]
[Symbol, getSymbolForScope, (, ), {, return, mySymbol, ;, }, void, setSymbolForScope, (, Symbol, sym, ), {, this, ., mySymbol, =]
[Symbol, sym, ), {, this, ., mySymbol, =, sym, ;, }, public, int, getIndexOfSymbol, (, Symbol, sym, ), {, return]
[Symbol, sym, ), {, this, ., mySymbol, =, sym, ;, }, public, int, getIndexOfSymbol, (, Symbol, sym, ), {, return]
[this, ., mySymbol, =, sym, ;, }, public, int, getIndexOfSymbol, (, Symbol, sym, ), {, return, Iterables, ., indexOf, (]
[this, ., mySymbol, =, sym, ;, }, public, int, getIndexOfSymbol, (, Symbol, sym, ), {, return, Iterables, ., indexOf, (]
[}, public, int, getIndexOfSymbol, (, Symbol, sym, ), {, return, Iterables, ., indexOf, (, ownSymbols, ., values, (, ), ,]
[}, public, int, getIndexOfSymbol, (, Symbol, sym, ), {, return, Iterables, ., indexOf, (, ownSymbols, ., values, (, ), ,]
[(, Symbol, sym, ), {, return, Iterables, ., indexOf, (, ownSymbols, ., values, (, ), ,, Predicates, ., equalTo, (]
[), ,, Predicates, ., equalTo, (, sym, ), ), ;, }, @, Override, public, Node, getRootNode, (, ), {, return]
[Override, public, Node, getRootNode, (, ), {, return, rootNode, ;, }, @, Override, public, SymbolScope, getParentScope, (, ), {, return]
[SymbolScope, getParentScope, (, ), {, return, parent, ;, }, public, Symbol, getQualifiedSlot, (, String, name, ), {, Symbol, fullyNamedSym, =]
[(, ), {, return, parent, ;, }, public, Symbol, getQualifiedSlot, (, String, name, ), {, Symbol, fullyNamedSym, =, getSlot, (]
[;, }, public, Symbol, getQualifiedSlot, (, String, name, ), {, Symbol, fullyNamedSym, =, getSlot, (, name, ), ;, if, (]
[;, }, public, Symbol, getQualifiedSlot, (, String, name, ), {, Symbol, fullyNamedSym, =, getSlot, (, name, ), ;, if, (]
[public, Symbol, getQualifiedSlot, (, String, name, ), {, Symbol, fullyNamedSym, =, getSlot, (, name, ), ;, if, (, fullyNamedSym, !=]
[String, name, ), {, Symbol, fullyNamedSym, =, getSlot, (, name, ), ;, if, (, fullyNamedSym, !=, null, ), {, return]
[=, getSlot, (, name, ), ;, if, (, fullyNamedSym, !=, null, ), {, return, fullyNamedSym, ;, }, int, dot, =]
[=, getSlot, (, name, ), ;, if, (, fullyNamedSym, !=, null, ), {, return, fullyNamedSym, ;, }, int, dot, =]
[), ;, if, (, fullyNamedSym, !=, null, ), {, return, fullyNamedSym, ;, }, int, dot, =, name, ., lastIndexOf, (]
[!=, null, ), {, return, fullyNamedSym, ;, }, int, dot, =, name, ., lastIndexOf, (, ".", ), ;, if, (]
[!=, null, ), {, return, fullyNamedSym, ;, }, int, dot, =, name, ., lastIndexOf, (, ".", ), ;, if, (]
[), {, return, fullyNamedSym, ;, }, int, dot, =, name, ., lastIndexOf, (, ".", ), ;, if, (, dot, !=]
[{, return, fullyNamedSym, ;, }, int, dot, =, name, ., lastIndexOf, (, ".", ), ;, if, (, dot, !=, -]
[dot, =, name, ., lastIndexOf, (, ".", ), ;, if, (, dot, !=, -, 1, ), {, Symbol, owner, =]
[name, ., lastIndexOf, (, ".", ), ;, if, (, dot, !=, -, 1, ), {, Symbol, owner, =, getQualifiedSlot, (]
[name, ., lastIndexOf, (, ".", ), ;, if, (, dot, !=, -, 1, ), {, Symbol, owner, =, getQualifiedSlot, (]
[".", ), ;, if, (, dot, !=, -, 1, ), {, Symbol, owner, =, getQualifiedSlot, (, name, ., substring, (]
[;, if, (, dot, !=, -, 1, ), {, Symbol, owner, =, getQualifiedSlot, (, name, ., substring, (, 0, ,]
[1, ), {, Symbol, owner, =, getQualifiedSlot, (, name, ., substring, (, 0, ,, dot, ), ), ;, if, (]
[1, ), {, Symbol, owner, =, getQualifiedSlot, (, name, ., substring, (, 0, ,, dot, ), ), ;, if, (]
[1, ), {, Symbol, owner, =, getQualifiedSlot, (, name, ., substring, (, 0, ,, dot, ), ), ;, if, (]
[{, Symbol, owner, =, getQualifiedSlot, (, name, ., substring, (, 0, ,, dot, ), ), ;, if, (, owner, !=]
[owner, =, getQualifiedSlot, (, name, ., substring, (, 0, ,, dot, ), ), ;, if, (, owner, !=, null, &&]
[owner, =, getQualifiedSlot, (, name, ., substring, (, 0, ,, dot, ), ), ;, if, (, owner, !=, null, &&]
[owner, =, getQualifiedSlot, (, name, ., substring, (, 0, ,, dot, ), ), ;, if, (, owner, !=, null, &&]
[substring, (, 0, ,, dot, ), ), ;, if, (, owner, !=, null, &&, owner, ., getPropertyScope, (, ), !=]
[dot, ), ), ;, if, (, owner, !=, null, &&, owner, ., getPropertyScope, (, ), !=, null, ), {, return]
[dot, ), ), ;, if, (, owner, !=, null, &&, owner, ., getPropertyScope, (, ), !=, null, ), {, return]
[dot, ), ), ;, if, (, owner, !=, null, &&, owner, ., getPropertyScope, (, ), !=, null, ), {, return]
[null, &&, owner, ., getPropertyScope, (, ), !=, null, ), {, return, owner, ., getPropertyScope, (, ), ., getSlot, (]
[null, &&, owner, ., getPropertyScope, (, ), !=, null, ), {, return, owner, ., getPropertyScope, (, ), ., getSlot, (]
[getPropertyScope, (, ), !=, null, ), {, return, owner, ., getPropertyScope, (, ), ., getSlot, (, name, ., substring, (]
[getPropertyScope, (, ), !=, null, ), {, return, owner, ., getPropertyScope, (, ), ., getSlot, (, name, ., substring, (]
[), !=, null, ), {, return, owner, ., getPropertyScope, (, ), ., getSlot, (, name, ., substring, (, dot, +]
[., getPropertyScope, (, ), ., getSlot, (, name, ., substring, (, dot, +, 1, ), ), ;, }, }, return]
[;, }, }, return, null, ;, }, @, Override, public, Symbol, getSlot, (, String, name, ), {, Symbol, own, =]
[}, return, null, ;, }, @, Override, public, Symbol, getSlot, (, String, name, ), {, Symbol, own, =, getOwnSlot, (]
[@, Override, public, Symbol, getSlot, (, String, name, ), {, Symbol, own, =, getOwnSlot, (, name, ), ;, if, (]
[@, Override, public, Symbol, getSlot, (, String, name, ), {, Symbol, own, =, getOwnSlot, (, name, ), ;, if, (]
[public, Symbol, getSlot, (, String, name, ), {, Symbol, own, =, getOwnSlot, (, name, ), ;, if, (, own, !=]
[String, name, ), {, Symbol, own, =, getOwnSlot, (, name, ), ;, if, (, own, !=, null, ), {, return]
[=, getOwnSlot, (, name, ), ;, if, (, own, !=, null, ), {, return, own, ;, }, Symbol, ancestor, =]
[=, getOwnSlot, (, name, ), ;, if, (, own, !=, null, ), {, return, own, ;, }, Symbol, ancestor, =]
[=, getOwnSlot, (, name, ), ;, if, (, own, !=, null, ), {, return, own, ;, }, Symbol, ancestor, =]
[(, name, ), ;, if, (, own, !=, null, ), {, return, own, ;, }, Symbol, ancestor, =, parent, ==]
[), ;, if, (, own, !=, null, ), {, return, own, ;, }, Symbol, ancestor, =, parent, ==, null, ?]
[if, (, own, !=, null, ), {, return, own, ;, }, Symbol, ancestor, =, parent, ==, null, ?, null, :]
[if, (, own, !=, null, ), {, return, own, ;, }, Symbol, ancestor, =, parent, ==, null, ?, null, :]
[null, ), {, return, own, ;, }, Symbol, ancestor, =, parent, ==, null, ?, null, :, parent, ., getSlot, (]
[;, }, Symbol, ancestor, =, parent, ==, null, ?, null, :, parent, ., getSlot, (, name, ), ;, if, (]
[;, }, Symbol, ancestor, =, parent, ==, null, ?, null, :, parent, ., getSlot, (, name, ), ;, if, (]
[Symbol, ancestor, =, parent, ==, null, ?, null, :, parent, ., getSlot, (, name, ), ;, if, (, ancestor, !=]
[==, null, ?, null, :, parent, ., getSlot, (, name, ), ;, if, (, ancestor, !=, null, ), {, return]
[:, parent, ., getSlot, (, name, ), ;, if, (, ancestor, !=, null, ), {, return, ancestor, ;, }, return]
[{, return, ancestor, ;, }, return, null, ;, }, @, Override, public, Symbol, getOwnSlot, (, String, name, ), {, return]
[{, return, ancestor, ;, }, return, null, ;, }, @, Override, public, Symbol, getOwnSlot, (, String, name, ), {, return]
[}, return, null, ;, }, @, Override, public, Symbol, getOwnSlot, (, String, name, ), {, return, ownSymbols, ., get, (]
[), {, return, ownSymbols, ., get, (, name, ), ;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return]
[}, @, Override, public, JSType, getTypeOfThis, (, ), {, return, typeOfThis, ;, }, public, boolean, isGlobalScope, (, ), {, return]
[}, @, Override, public, JSType, getTypeOfThis, (, ), {, return, typeOfThis, ;, }, public, boolean, isGlobalScope, (, ), {, return]
[}, @, Override, public, JSType, getTypeOfThis, (, ), {, return, typeOfThis, ;, }, public, boolean, isGlobalScope, (, ), {, return]
[JSType, getTypeOfThis, (, ), {, return, typeOfThis, ;, }, public, boolean, isGlobalScope, (, ), {, return, getParentScope, (, ), ==]
[(, ), {, return, typeOfThis, ;, }, public, boolean, isGlobalScope, (, ), {, return, getParentScope, (, ), ==, null, &&]
[(, ), {, return, typeOfThis, ;, }, public, boolean, isGlobalScope, (, ), {, return, getParentScope, (, ), ==, null, &&]
[typeOfThis, ;, }, public, boolean, isGlobalScope, (, ), {, return, getParentScope, (, ), ==, null, &&, getRootNode, (, ), !=]
[getParentScope, (, ), ==, null, &&, getRootNode, (, ), !=, null, ;, }, public, boolean, isDocScope, (, ), {, return]
[getParentScope, (, ), ==, null, &&, getRootNode, (, ), !=, null, ;, }, public, boolean, isDocScope, (, ), {, return]
[getParentScope, (, ), ==, null, &&, getRootNode, (, ), !=, null, ;, }, public, boolean, isDocScope, (, ), {, return]
[getParentScope, (, ), ==, null, &&, getRootNode, (, ), !=, null, ;, }, public, boolean, isDocScope, (, ), {, return]
[null, &&, getRootNode, (, ), !=, null, ;, }, public, boolean, isDocScope, (, ), {, return, getRootNode, (, ), ==]
[getRootNode, (, ), !=, null, ;, }, public, boolean, isDocScope, (, ), {, return, getRootNode, (, ), ==, null, &&]
[getRootNode, (, ), !=, null, ;, }, public, boolean, isDocScope, (, ), {, return, getRootNode, (, ), ==, null, &&]
[), !=, null, ;, }, public, boolean, isDocScope, (, ), {, return, getRootNode, (, ), ==, null, &&, mySymbol, !=]
[null, ;, }, public, boolean, isDocScope, (, ), {, return, getRootNode, (, ), ==, null, &&, mySymbol, !=, null, &&]
[null, ;, }, public, boolean, isDocScope, (, ), {, return, getRootNode, (, ), ==, null, &&, mySymbol, !=, null, &&]
[null, ;, }, public, boolean, isDocScope, (, ), {, return, getRootNode, (, ), ==, null, &&, mySymbol, !=, null, &&]
[boolean, isDocScope, (, ), {, return, getRootNode, (, ), ==, null, &&, mySymbol, !=, null, &&, mySymbol, ., docScope, ==]
[null, &&, mySymbol, !=, null, &&, mySymbol, ., docScope, ==, this, ;, }, public, boolean, isPropertyScope, (, ), {, return]
[null, &&, mySymbol, !=, null, &&, mySymbol, ., docScope, ==, this, ;, }, public, boolean, isPropertyScope, (, ), {, return]
[null, &&, mySymbol, !=, null, &&, mySymbol, ., docScope, ==, this, ;, }, public, boolean, isPropertyScope, (, ), {, return]
[null, &&, mySymbol, ., docScope, ==, this, ;, }, public, boolean, isPropertyScope, (, ), {, return, getRootNode, (, ), ==]
[mySymbol, ., docScope, ==, this, ;, }, public, boolean, isPropertyScope, (, ), {, return, getRootNode, (, ), ==, null, &&]
[., docScope, ==, this, ;, }, public, boolean, isPropertyScope, (, ), {, return, getRootNode, (, ), ==, null, &&, !]
[return, getRootNode, (, ), ==, null, &&, !, isDocScope, (, ), ;, }, public, boolean, isLexicalScope, (, ), {, return]
[return, getRootNode, (, ), ==, null, &&, !, isDocScope, (, ), ;, }, public, boolean, isLexicalScope, (, ), {, return]
[==, null, &&, !, isDocScope, (, ), ;, }, public, boolean, isLexicalScope, (, ), {, return, getRootNode, (, ), !=]
[boolean, isLexicalScope, (, ), {, return, getRootNode, (, ), !=, null, ;, }, public, int, getScopeDepth, (, ), {, return]
[int, getScopeDepth, (, ), {, return, scopeDepth, ;, }, @, Override, public, String, toString, (, ), {, Node, n, =]
[scopeDepth, ;, }, @, Override, public, String, toString, (, ), {, Node, n, =, getRootNode, (, ), ;, if, (]
[scopeDepth, ;, }, @, Override, public, String, toString, (, ), {, Node, n, =, getRootNode, (, ), ;, if, (]
[}, @, Override, public, String, toString, (, ), {, Node, n, =, getRootNode, (, ), ;, if, (, n, !=]
[String, toString, (, ), {, Node, n, =, getRootNode, (, ), ;, if, (, n, !=, null, ), {, return]
[String, toString, (, ), {, Node, n, =, getRootNode, (, ), ;, if, (, n, !=, null, ), {, return]
[String, toString, (, ), {, Node, n, =, getRootNode, (, ), ;, if, (, n, !=, null, ), {, return]
[String, toString, (, ), {, Node, n, =, getRootNode, (, ), ;, if, (, n, !=, null, ), {, return]
[(, ), {, Node, n, =, getRootNode, (, ), ;, if, (, n, !=, null, ), {, return, "Scope@", +]
[(, ), {, Node, n, =, getRootNode, (, ), ;, if, (, n, !=, null, ), {, return, "Scope@", +]
[getRootNode, (, ), ;, if, (, n, !=, null, ), {, return, "Scope@", +, n, ., getSourceFileName, (, ), +]
[), ;, if, (, n, !=, null, ), {, return, "Scope@", +, n, ., getSourceFileName, (, ), +, ":", +]
[), ;, if, (, n, !=, null, ), {, return, "Scope@", +, n, ., getSourceFileName, (, ), +, ":", +]
["Scope@", +, n, ., getSourceFileName, (, ), +, ":", +, n, ., getLineno, (, ), ;, }, else, {, return]
["Scope@", +, n, ., getSourceFileName, (, ), +, ":", +, n, ., getLineno, (, ), ;, }, else, {, return]
[n, ., getSourceFileName, (, ), +, ":", +, n, ., getLineno, (, ), ;, }, else, {, return, "PropertyScope@", +]
[class, PropertyRefCollector, extends, NodeTraversal, ., AbstractPostOrderCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, PropertyRefCollector, (, AbstractCompiler, compiler, ), {]
[class, PropertyRefCollector, extends, NodeTraversal, ., AbstractPostOrderCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, PropertyRefCollector, (, AbstractCompiler, compiler, ), {]
[., AbstractPostOrderCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, PropertyRefCollector, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,]
[void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (]
[(, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,]
[,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,]
[this, ), ;, }, private, boolean, maybeDefineReference, (, Node, n, ,, String, propName, ,, Symbol, ownerSymbol, ), {, if, (]
[this, ), ;, }, private, boolean, maybeDefineReference, (, Node, n, ,, String, propName, ,, Symbol, ownerSymbol, ), {, if, (]
[this, ), ;, }, private, boolean, maybeDefineReference, (, Node, n, ,, String, propName, ,, Symbol, ownerSymbol, ), {, if, (]
[;, }, private, boolean, maybeDefineReference, (, Node, n, ,, String, propName, ,, Symbol, ownerSymbol, ), {, if, (, ownerSymbol, !=]
[private, boolean, maybeDefineReference, (, Node, n, ,, String, propName, ,, Symbol, ownerSymbol, ), {, if, (, ownerSymbol, !=, null, &&]
[private, boolean, maybeDefineReference, (, Node, n, ,, String, propName, ,, Symbol, ownerSymbol, ), {, if, (, ownerSymbol, !=, null, &&]
[private, boolean, maybeDefineReference, (, Node, n, ,, String, propName, ,, Symbol, ownerSymbol, ), {, if, (, ownerSymbol, !=, null, &&]
[,, String, propName, ,, Symbol, ownerSymbol, ), {, if, (, ownerSymbol, !=, null, &&, ownerSymbol, ., getPropertyScope, (, ), !=]
[), {, if, (, ownerSymbol, !=, null, &&, ownerSymbol, ., getPropertyScope, (, ), !=, null, ), {, Symbol, prop, =]
[), {, if, (, ownerSymbol, !=, null, &&, ownerSymbol, ., getPropertyScope, (, ), !=, null, ), {, Symbol, prop, =]
[), {, if, (, ownerSymbol, !=, null, &&, ownerSymbol, ., getPropertyScope, (, ), !=, null, ), {, Symbol, prop, =]
[ownerSymbol, ., getPropertyScope, (, ), !=, null, ), {, Symbol, prop, =, ownerSymbol, ., getPropertyScope, (, ), ., getSlot, (]
[!=, null, ), {, Symbol, prop, =, ownerSymbol, ., getPropertyScope, (, ), ., getSlot, (, propName, ), ;, if, (]
[!=, null, ), {, Symbol, prop, =, ownerSymbol, ., getPropertyScope, (, ), ., getSlot, (, propName, ), ;, if, (]
[), {, Symbol, prop, =, ownerSymbol, ., getPropertyScope, (, ), ., getSlot, (, propName, ), ;, if, (, prop, !=]
[prop, =, ownerSymbol, ., getPropertyScope, (, ), ., getSlot, (, propName, ), ;, if, (, prop, !=, null, ), {]
[prop, =, ownerSymbol, ., getPropertyScope, (, ), ., getSlot, (, propName, ), ;, if, (, prop, !=, null, ), {]
[getPropertyScope, (, ), ., getSlot, (, propName, ), ;, if, (, prop, !=, null, ), {, prop, ., defineReferenceAt, (]
[getSlot, (, propName, ), ;, if, (, prop, !=, null, ), {, prop, ., defineReferenceAt, (, n, ), ;, return]
[if, (, prop, !=, null, ), {, prop, ., defineReferenceAt, (, n, ), ;, return, true, ;, }, }, return]
[;, }, }, return, false, ;, }, private, boolean, tryDefineLexicalQualifiedNameRef, (, String, name, ,, Node, n, ), {, if, (]
[;, }, }, return, false, ;, }, private, boolean, tryDefineLexicalQualifiedNameRef, (, String, name, ,, Node, n, ), {, if, (]
[}, return, false, ;, }, private, boolean, tryDefineLexicalQualifiedNameRef, (, String, name, ,, Node, n, ), {, if, (, name, !=]
[boolean, tryDefineLexicalQualifiedNameRef, (, String, name, ,, Node, n, ), {, if, (, name, !=, null, ), {, Symbol, lexicalSym, =]
[boolean, tryDefineLexicalQualifiedNameRef, (, String, name, ,, Node, n, ), {, if, (, name, !=, null, ), {, Symbol, lexicalSym, =]
[(, String, name, ,, Node, n, ), {, if, (, name, !=, null, ), {, Symbol, lexicalSym, =, getEnclosingScope, (]
[n, ), {, if, (, name, !=, null, ), {, Symbol, lexicalSym, =, getEnclosingScope, (, n, ), ., getQualifiedSlot, (]
[name, !=, null, ), {, Symbol, lexicalSym, =, getEnclosingScope, (, n, ), ., getQualifiedSlot, (, name, ), ;, if, (]
[name, !=, null, ), {, Symbol, lexicalSym, =, getEnclosingScope, (, n, ), ., getQualifiedSlot, (, name, ), ;, if, (]
[null, ), {, Symbol, lexicalSym, =, getEnclosingScope, (, n, ), ., getQualifiedSlot, (, name, ), ;, if, (, lexicalSym, !=]
[Symbol, lexicalSym, =, getEnclosingScope, (, n, ), ., getQualifiedSlot, (, name, ), ;, if, (, lexicalSym, !=, null, ), {]
[Symbol, lexicalSym, =, getEnclosingScope, (, n, ), ., getQualifiedSlot, (, name, ), ;, if, (, lexicalSym, !=, null, ), {]
[(, n, ), ., getQualifiedSlot, (, name, ), ;, if, (, lexicalSym, !=, null, ), {, lexicalSym, ., defineReferenceAt, (]
[getQualifiedSlot, (, name, ), ;, if, (, lexicalSym, !=, null, ), {, lexicalSym, ., defineReferenceAt, (, n, ), ;, return]
[if, (, lexicalSym, !=, null, ), {, lexicalSym, ., defineReferenceAt, (, n, ), ;, return, true, ;, }, }, return]
[;, }, }, return, false, ;, }, private, void, tryRemoveLexicalQualifiedNameRef, (, String, name, ,, Node, n, ), {, if, (]
[;, }, }, return, false, ;, }, private, void, tryRemoveLexicalQualifiedNameRef, (, String, name, ,, Node, n, ), {, if, (]
[}, return, false, ;, }, private, void, tryRemoveLexicalQualifiedNameRef, (, String, name, ,, Node, n, ), {, if, (, name, !=]
[void, tryRemoveLexicalQualifiedNameRef, (, String, name, ,, Node, n, ), {, if, (, name, !=, null, ), {, Symbol, lexicalSym, =]
[void, tryRemoveLexicalQualifiedNameRef, (, String, name, ,, Node, n, ), {, if, (, name, !=, null, ), {, Symbol, lexicalSym, =]
[(, String, name, ,, Node, n, ), {, if, (, name, !=, null, ), {, Symbol, lexicalSym, =, getEnclosingScope, (]
[n, ), {, if, (, name, !=, null, ), {, Symbol, lexicalSym, =, getEnclosingScope, (, n, ), ., getQualifiedSlot, (]
[name, !=, null, ), {, Symbol, lexicalSym, =, getEnclosingScope, (, n, ), ., getQualifiedSlot, (, name, ), ;, if, (]
[name, !=, null, ), {, Symbol, lexicalSym, =, getEnclosingScope, (, n, ), ., getQualifiedSlot, (, name, ), ;, if, (]
[name, !=, null, ), {, Symbol, lexicalSym, =, getEnclosingScope, (, n, ), ., getQualifiedSlot, (, name, ), ;, if, (]
[name, !=, null, ), {, Symbol, lexicalSym, =, getEnclosingScope, (, n, ), ., getQualifiedSlot, (, name, ), ;, if, (]
[null, ), {, Symbol, lexicalSym, =, getEnclosingScope, (, n, ), ., getQualifiedSlot, (, name, ), ;, if, (, lexicalSym, !=]
[{, Symbol, lexicalSym, =, getEnclosingScope, (, n, ), ., getQualifiedSlot, (, name, ), ;, if, (, lexicalSym, !=, null, &&]
[{, Symbol, lexicalSym, =, getEnclosingScope, (, n, ), ., getQualifiedSlot, (, name, ), ;, if, (, lexicalSym, !=, null, &&]
[n, ), ., getQualifiedSlot, (, name, ), ;, if, (, lexicalSym, !=, null, &&, lexicalSym, ., isLexicalVariable, (, ), &&]
[n, ), ., getQualifiedSlot, (, name, ), ;, if, (, lexicalSym, !=, null, &&, lexicalSym, ., isLexicalVariable, (, ), &&]
[n, ), ., getQualifiedSlot, (, name, ), ;, if, (, lexicalSym, !=, null, &&, lexicalSym, ., isLexicalVariable, (, ), &&]
[n, ), ., getQualifiedSlot, (, name, ), ;, if, (, lexicalSym, !=, null, &&, lexicalSym, ., isLexicalVariable, (, ), &&]
[lexicalSym, !=, null, &&, lexicalSym, ., isLexicalVariable, (, ), &&, lexicalSym, ., getDeclaration, (, ), ., getNode, (, ), ==]
[&&, lexicalSym, ., isLexicalVariable, (, ), &&, lexicalSym, ., getDeclaration, (, ), ., getNode, (, ), ==, n, ), {]
[., isLexicalVariable, (, ), &&, lexicalSym, ., getDeclaration, (, ), ., getNode, (, ), ==, n, ), {, removeSymbol, (]
[;, }, }, }, private, boolean, maybeDefineTypedReference, (, Node, n, ,, String, propName, ,, JSType, owner, ), {, if, (]
[;, }, }, }, private, boolean, maybeDefineTypedReference, (, Node, n, ,, String, propName, ,, JSType, owner, ), {, if, (]
[,, String, propName, ,, JSType, owner, ), {, if, (, owner, ., isGlobalThisType, (, ), ), {, Symbol, sym, =]
[,, String, propName, ,, JSType, owner, ), {, if, (, owner, ., isGlobalThisType, (, ), ), {, Symbol, sym, =]
[JSType, owner, ), {, if, (, owner, ., isGlobalThisType, (, ), ), {, Symbol, sym, =, globalScope, ., getSlot, (]
[(, owner, ., isGlobalThisType, (, ), ), {, Symbol, sym, =, globalScope, ., getSlot, (, propName, ), ;, if, (]
[(, owner, ., isGlobalThisType, (, ), ), {, Symbol, sym, =, globalScope, ., getSlot, (, propName, ), ;, if, (]
[., isGlobalThisType, (, ), ), {, Symbol, sym, =, globalScope, ., getSlot, (, propName, ), ;, if, (, sym, !=]
[), ), {, Symbol, sym, =, globalScope, ., getSlot, (, propName, ), ;, if, (, sym, !=, null, ), {]
[), ), {, Symbol, sym, =, globalScope, ., getSlot, (, propName, ), ;, if, (, sym, !=, null, ), {]
[sym, =, globalScope, ., getSlot, (, propName, ), ;, if, (, sym, !=, null, ), {, sym, ., defineReferenceAt, (]
[getSlot, (, propName, ), ;, if, (, sym, !=, null, ), {, sym, ., defineReferenceAt, (, n, ), ;, return]
[sym, !=, null, ), {, sym, ., defineReferenceAt, (, n, ), ;, return, true, ;, }, }, else, if, (]
[sym, !=, null, ), {, sym, ., defineReferenceAt, (, n, ), ;, return, true, ;, }, }, else, if, (]
[(, n, ), ;, return, true, ;, }, }, else, if, (, owner, ., isNominalConstructor, (, ), ), {, return]
[), ;, return, true, ;, }, }, else, if, (, owner, ., isNominalConstructor, (, ), ), {, return, maybeDefineReference, (]
[return, true, ;, }, }, else, if, (, owner, ., isNominalConstructor, (, ), ), {, return, maybeDefineReference, (, n, ,]
[;, }, }, else, if, (, owner, ., isNominalConstructor, (, ), ), {, return, maybeDefineReference, (, n, ,, propName, ,]
[}, else, if, (, owner, ., isNominalConstructor, (, ), ), {, return, maybeDefineReference, (, n, ,, propName, ,, getSymbolDeclaredBy, (]
[}, else, if, (, owner, ., isNominalConstructor, (, ), ), {, return, maybeDefineReference, (, n, ,, propName, ,, getSymbolDeclaredBy, (]
[maybeDefineReference, (, n, ,, propName, ,, getSymbolDeclaredBy, (, owner, ., toMaybeFunctionType, (, ), ), ), ;, }, else, if, (]
[maybeDefineReference, (, n, ,, propName, ,, getSymbolDeclaredBy, (, owner, ., toMaybeFunctionType, (, ), ), ), ;, }, else, if, (]
[owner, ., toMaybeFunctionType, (, ), ), ), ;, }, else, if, (, owner, ., isEnumType, (, ), ), {, return]
[toMaybeFunctionType, (, ), ), ), ;, }, else, if, (, owner, ., isEnumType, (, ), ), {, return, maybeDefineReference, (]
[), ), ), ;, }, else, if, (, owner, ., isEnumType, (, ), ), {, return, maybeDefineReference, (, n, ,]
[), ;, }, else, if, (, owner, ., isEnumType, (, ), ), {, return, maybeDefineReference, (, n, ,, propName, ,]
[}, else, if, (, owner, ., isEnumType, (, ), ), {, return, maybeDefineReference, (, n, ,, propName, ,, getSymbolDeclaredBy, (]
[}, else, if, (, owner, ., isEnumType, (, ), ), {, return, maybeDefineReference, (, n, ,, propName, ,, getSymbolDeclaredBy, (]
[n, ,, propName, ,, getSymbolDeclaredBy, (, owner, ., toMaybeEnumType, (, ), ), ), ;, }, else, {, boolean, defined, =]
[., toMaybeEnumType, (, ), ), ), ;, }, else, {, boolean, defined, =, false, ;, for, (, Symbol, ctor, :]
[(, ), ), ), ;, }, else, {, boolean, defined, =, false, ;, for, (, Symbol, ctor, :, getAllSymbolsForType, (]
[else, {, boolean, defined, =, false, ;, for, (, Symbol, ctor, :, getAllSymbolsForType, (, owner, ), ), {, if, (]
[boolean, defined, =, false, ;, for, (, Symbol, ctor, :, getAllSymbolsForType, (, owner, ), ), {, if, (, maybeDefineReference, (]
[=, false, ;, for, (, Symbol, ctor, :, getAllSymbolsForType, (, owner, ), ), {, if, (, maybeDefineReference, (, n, ,]
[;, for, (, Symbol, ctor, :, getAllSymbolsForType, (, owner, ), ), {, if, (, maybeDefineReference, (, n, ,, propName, ,]
[(, Symbol, ctor, :, getAllSymbolsForType, (, owner, ), ), {, if, (, maybeDefineReference, (, n, ,, propName, ,, getSymbolForInstancesOf, (]
[(, owner, ), ), {, if, (, maybeDefineReference, (, n, ,, propName, ,, getSymbolForInstancesOf, (, ctor, ), ), ), {]
[), ), {, if, (, maybeDefineReference, (, n, ,, propName, ,, getSymbolForInstancesOf, (, ctor, ), ), ), {, defined, =]
[maybeDefineReference, (, n, ,, propName, ,, getSymbolForInstancesOf, (, ctor, ), ), ), {, defined, =, true, ;, }, }, return]
[propName, ,, getSymbolForInstancesOf, (, ctor, ), ), ), {, defined, =, true, ;, }, }, return, defined, ;, }, return]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {, JSType, owner, =]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {, JSType, owner, =]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {, JSType, owner, =]
[isGetProp, (, ), ), {, JSType, owner, =, n, ., getFirstChild, (, ), ., getJSType, (, ), ;, if, (]
[isGetProp, (, ), ), {, JSType, owner, =, n, ., getFirstChild, (, ), ., getJSType, (, ), ;, if, (]
[), ), {, JSType, owner, =, n, ., getFirstChild, (, ), ., getJSType, (, ), ;, if, (, owner, !=]
[n, ., getFirstChild, (, ), ., getJSType, (, ), ;, if, (, owner, !=, null, ), {, boolean, defined, =]
[getFirstChild, (, ), ., getJSType, (, ), ;, if, (, owner, !=, null, ), {, boolean, defined, =, maybeDefineTypedReference, (]
[), ., getJSType, (, ), ;, if, (, owner, !=, null, ), {, boolean, defined, =, maybeDefineTypedReference, (, n, ,]
[), ., getJSType, (, ), ;, if, (, owner, !=, null, ), {, boolean, defined, =, maybeDefineTypedReference, (, n, ,]
[), ., getJSType, (, ), ;, if, (, owner, !=, null, ), {, boolean, defined, =, maybeDefineTypedReference, (, n, ,]
[null, ), {, boolean, defined, =, maybeDefineTypedReference, (, n, ,, n, ., getLastChild, (, ), ., getString, (, ), ,]
[=, maybeDefineTypedReference, (, n, ,, n, ., getLastChild, (, ), ., getString, (, ), ,, owner, ), ;, if, (]
[n, ,, n, ., getLastChild, (, ), ., getString, (, ), ,, owner, ), ;, if, (, defined, ), {]
[n, ., getLastChild, (, ), ., getString, (, ), ,, owner, ), ;, if, (, defined, ), {, tryRemoveLexicalQualifiedNameRef, (]
[n, ., getLastChild, (, ), ., getString, (, ), ,, owner, ), ;, if, (, defined, ), {, tryRemoveLexicalQualifiedNameRef, (]
[getString, (, ), ,, owner, ), ;, if, (, defined, ), {, tryRemoveLexicalQualifiedNameRef, (, n, ., getQualifiedName, (, ), ,]
[if, (, defined, ), {, tryRemoveLexicalQualifiedNameRef, (, n, ., getQualifiedName, (, ), ,, n, ), ;, return, ;, }, }]
[defined, ), {, tryRemoveLexicalQualifiedNameRef, (, n, ., getQualifiedName, (, ), ,, n, ), ;, return, ;, }, }, tryDefineLexicalQualifiedNameRef, (]
[defined, ), {, tryRemoveLexicalQualifiedNameRef, (, n, ., getQualifiedName, (, ), ,, n, ), ;, return, ;, }, }, tryDefineLexicalQualifiedNameRef, (]
[., getQualifiedName, (, ), ,, n, ), ;, return, ;, }, }, tryDefineLexicalQualifiedNameRef, (, n, ., getQualifiedName, (, ), ,]
[;, return, ;, }, }, tryDefineLexicalQualifiedNameRef, (, n, ., getQualifiedName, (, ), ,, n, ), ;, }, else, if, (]
[;, return, ;, }, }, tryDefineLexicalQualifiedNameRef, (, n, ., getQualifiedName, (, ), ,, n, ), ;, }, else, if, (]
[(, ), ,, n, ), ;, }, else, if, (, n, ., isStringKey, (, ), ), {, JSType, owner, =]
[(, ), ,, n, ), ;, }, else, if, (, n, ., isStringKey, (, ), ), {, JSType, owner, =]
[if, (, n, ., isStringKey, (, ), ), {, JSType, owner, =, parent, ., getJSType, (, ), ;, if, (]
[if, (, n, ., isStringKey, (, ), ), {, JSType, owner, =, parent, ., getJSType, (, ), ;, if, (]
[n, ., isStringKey, (, ), ), {, JSType, owner, =, parent, ., getJSType, (, ), ;, if, (, owner, !=]
[{, JSType, owner, =, parent, ., getJSType, (, ), ;, if, (, owner, !=, null, ), {, boolean, defined, =]
[owner, =, parent, ., getJSType, (, ), ;, if, (, owner, !=, null, ), {, boolean, defined, =, maybeDefineTypedReference, (]
[parent, ., getJSType, (, ), ;, if, (, owner, !=, null, ), {, boolean, defined, =, maybeDefineTypedReference, (, n, ,]
[parent, ., getJSType, (, ), ;, if, (, owner, !=, null, ), {, boolean, defined, =, maybeDefineTypedReference, (, n, ,]
[if, (, owner, !=, null, ), {, boolean, defined, =, maybeDefineTypedReference, (, n, ,, n, ., getString, (, ), ,]
[), {, boolean, defined, =, maybeDefineTypedReference, (, n, ,, n, ., getString, (, ), ,, owner, ), ;, if, (]
[defined, =, maybeDefineTypedReference, (, n, ,, n, ., getString, (, ), ,, owner, ), ;, if, (, defined, ), {]
[maybeDefineTypedReference, (, n, ,, n, ., getString, (, ), ,, owner, ), ;, if, (, defined, ), {, tryRemoveLexicalQualifiedNameRef, (]
[maybeDefineTypedReference, (, n, ,, n, ., getString, (, ), ,, owner, ), ;, if, (, defined, ), {, tryRemoveLexicalQualifiedNameRef, (]
[n, ., getString, (, ), ,, owner, ), ;, if, (, defined, ), {, tryRemoveLexicalQualifiedNameRef, (, NodeUtil, ., getBestLValueName, (]
[(, ), ,, owner, ), ;, if, (, defined, ), {, tryRemoveLexicalQualifiedNameRef, (, NodeUtil, ., getBestLValueName, (, n, ), ,]
[(, defined, ), {, tryRemoveLexicalQualifiedNameRef, (, NodeUtil, ., getBestLValueName, (, n, ), ,, n, ), ;, return, ;, }, }]
[), {, tryRemoveLexicalQualifiedNameRef, (, NodeUtil, ., getBestLValueName, (, n, ), ,, n, ), ;, return, ;, }, }, tryDefineLexicalQualifiedNameRef, (]
[), {, tryRemoveLexicalQualifiedNameRef, (, NodeUtil, ., getBestLValueName, (, n, ), ,, n, ), ;, return, ;, }, }, tryDefineLexicalQualifiedNameRef, (]
[NodeUtil, ., getBestLValueName, (, n, ), ,, n, ), ;, return, ;, }, }, tryDefineLexicalQualifiedNameRef, (, NodeUtil, ., getBestLValueName, (]
[(, n, ), ,, n, ), ;, return, ;, }, }, tryDefineLexicalQualifiedNameRef, (, NodeUtil, ., getBestLValueName, (, n, ), ,]
[extends, NodeTraversal, ., AbstractScopedCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, final, List, <, Symbol, >, thisStack, =]
[extends, NodeTraversal, ., AbstractScopedCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, final, List, <, Symbol, >, thisStack, =]
[private, final, List, <, Symbol, >, thisStack, =, Lists, ., newArrayList, (, ), ;, ThisRefCollector, (, AbstractCompiler, compiler, ), {]
[private, final, List, <, Symbol, >, thisStack, =, Lists, ., newArrayList, (, ), ;, ThisRefCollector, (, AbstractCompiler, compiler, ), {]
[Symbol, >, thisStack, =, Lists, ., newArrayList, (, ), ;, ThisRefCollector, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,]
[void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (]
[(, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,]
[,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,]
[root, ), ,, this, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Symbol, symbol, =]
[), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Symbol, symbol, =, null, ;, if, (]
[), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Symbol, symbol, =, null, ;, if, (]
[t, ), {, Symbol, symbol, =, null, ;, if, (, t, ., inGlobalScope, (, ), ), {, Node, firstInputRoot, =]
[t, ), {, Symbol, symbol, =, null, ;, if, (, t, ., inGlobalScope, (, ), ), {, Node, firstInputRoot, =]
[t, ), {, Symbol, symbol, =, null, ;, if, (, t, ., inGlobalScope, (, ), ), {, Node, firstInputRoot, =]
[t, ), {, Symbol, symbol, =, null, ;, if, (, t, ., inGlobalScope, (, ), ), {, Node, firstInputRoot, =]
[{, Node, firstInputRoot, =, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ., getFirstChild, (, ), ;, if, (]
[{, Node, firstInputRoot, =, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ., getFirstChild, (, ), ;, if, (]
[firstInputRoot, =, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ., getFirstChild, (, ), ;, if, (, firstInputRoot, !=]
[., getScopeRoot, (, ), ., getLastChild, (, ), ., getFirstChild, (, ), ;, if, (, firstInputRoot, !=, null, ), {]
[(, ), ., getLastChild, (, ), ., getFirstChild, (, ), ;, if, (, firstInputRoot, !=, null, ), {, symbol, =]
[., getLastChild, (, ), ., getFirstChild, (, ), ;, if, (, firstInputRoot, !=, null, ), {, symbol, =, addSymbol, (]
[(, ), ., getFirstChild, (, ), ;, if, (, firstInputRoot, !=, null, ), {, symbol, =, addSymbol, (, GLOBAL_THIS, ,]
[(, ), ., getFirstChild, (, ), ;, if, (, firstInputRoot, !=, null, ), {, symbol, =, addSymbol, (, GLOBAL_THIS, ,]
[(, ), ;, if, (, firstInputRoot, !=, null, ), {, symbol, =, addSymbol, (, GLOBAL_THIS, ,, registry, ., getNativeType, (]
[(, ), ;, if, (, firstInputRoot, !=, null, ), {, symbol, =, addSymbol, (, GLOBAL_THIS, ,, registry, ., getNativeType, (]
[firstInputRoot, !=, null, ), {, symbol, =, addSymbol, (, GLOBAL_THIS, ,, registry, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,]
[null, ), {, symbol, =, addSymbol, (, GLOBAL_THIS, ,, registry, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, false, ,]
[{, symbol, =, addSymbol, (, GLOBAL_THIS, ,, registry, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, false, ,, globalScope, ,]
[addSymbol, (, GLOBAL_THIS, ,, registry, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, false, ,, globalScope, ,, firstInputRoot, ), ;]
[addSymbol, (, GLOBAL_THIS, ,, registry, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, false, ,, globalScope, ,, firstInputRoot, ), ;]
[registry, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, false, ,, globalScope, ,, firstInputRoot, ), ;, symbol, ., setDeclaration, (]
[(, JSTypeNative, ., GLOBAL_THIS, ), ,, false, ,, globalScope, ,, firstInputRoot, ), ;, symbol, ., setDeclaration, (, new, Reference, (]
[., GLOBAL_THIS, ), ,, false, ,, globalScope, ,, firstInputRoot, ), ;, symbol, ., setDeclaration, (, new, Reference, (, symbol, ,]
[symbol, ., setDeclaration, (, new, Reference, (, symbol, ,, firstInputRoot, ), ), ;, }, }, else, {, SymbolScope, scope, =]
[symbol, ., setDeclaration, (, new, Reference, (, symbol, ,, firstInputRoot, ), ), ;, }, }, else, {, SymbolScope, scope, =]
[new, Reference, (, symbol, ,, firstInputRoot, ), ), ;, }, }, else, {, SymbolScope, scope, =, scopes, ., get, (]
[new, Reference, (, symbol, ,, firstInputRoot, ), ), ;, }, }, else, {, SymbolScope, scope, =, scopes, ., get, (]
[), ;, }, }, else, {, SymbolScope, scope, =, scopes, ., get, (, t, ., getScopeRoot, (, ), ), ;]
[), ;, }, }, else, {, SymbolScope, scope, =, scopes, ., get, (, t, ., getScopeRoot, (, ), ), ;]
[else, {, SymbolScope, scope, =, scopes, ., get, (, t, ., getScopeRoot, (, ), ), ;, Preconditions, ., checkNotNull, (]
[., get, (, t, ., getScopeRoot, (, ), ), ;, Preconditions, ., checkNotNull, (, scope, ), ;, Symbol, scopeSymbol, =]
[(, t, ., getScopeRoot, (, ), ), ;, Preconditions, ., checkNotNull, (, scope, ), ;, Symbol, scopeSymbol, =, getSymbolForScope, (]
[), ), ;, Preconditions, ., checkNotNull, (, scope, ), ;, Symbol, scopeSymbol, =, getSymbolForScope, (, scope, ), ;, if, (]
[), ), ;, Preconditions, ., checkNotNull, (, scope, ), ;, Symbol, scopeSymbol, =, getSymbolForScope, (, scope, ), ;, if, (]
[;, Preconditions, ., checkNotNull, (, scope, ), ;, Symbol, scopeSymbol, =, getSymbolForScope, (, scope, ), ;, if, (, scopeSymbol, !=]
[), ;, Symbol, scopeSymbol, =, getSymbolForScope, (, scope, ), ;, if, (, scopeSymbol, !=, null, ), {, SymbolScope, propScope, =]
[), ;, Symbol, scopeSymbol, =, getSymbolForScope, (, scope, ), ;, if, (, scopeSymbol, !=, null, ), {, SymbolScope, propScope, =]
[), ;, if, (, scopeSymbol, !=, null, ), {, SymbolScope, propScope, =, scopeSymbol, ., getPropertyScope, (, ), ;, if, (]
[), ;, if, (, scopeSymbol, !=, null, ), {, SymbolScope, propScope, =, scopeSymbol, ., getPropertyScope, (, ), ;, if, (]
[if, (, scopeSymbol, !=, null, ), {, SymbolScope, propScope, =, scopeSymbol, ., getPropertyScope, (, ), ;, if, (, propScope, !=]
[!=, null, ), {, SymbolScope, propScope, =, scopeSymbol, ., getPropertyScope, (, ), ;, if, (, propScope, !=, null, ), {]
[), {, SymbolScope, propScope, =, scopeSymbol, ., getPropertyScope, (, ), ;, if, (, propScope, !=, null, ), {, symbol, =]
[), {, SymbolScope, propScope, =, scopeSymbol, ., getPropertyScope, (, ), ;, if, (, propScope, !=, null, ), {, symbol, =]
[=, scopeSymbol, ., getPropertyScope, (, ), ;, if, (, propScope, !=, null, ), {, symbol, =, propScope, ., getOwnSlot, (]
[), ;, if, (, propScope, !=, null, ), {, symbol, =, propScope, ., getOwnSlot, (, "this", ), ;, if, (]
[), ;, if, (, propScope, !=, null, ), {, symbol, =, propScope, ., getOwnSlot, (, "this", ), ;, if, (]
[if, (, propScope, !=, null, ), {, symbol, =, propScope, ., getOwnSlot, (, "this", ), ;, if, (, symbol, ==]
[{, symbol, =, propScope, ., getOwnSlot, (, "this", ), ;, if, (, symbol, ==, null, ), {, JSType, rootType, =]
[{, symbol, =, propScope, ., getOwnSlot, (, "this", ), ;, if, (, symbol, ==, null, ), {, JSType, rootType, =]
[{, symbol, =, propScope, ., getOwnSlot, (, "this", ), ;, if, (, symbol, ==, null, ), {, JSType, rootType, =]
[==, null, ), {, JSType, rootType, =, t, ., getScopeRoot, (, ), ., getJSType, (, ), ;, FunctionType, fnType, =]
[==, null, ), {, JSType, rootType, =, t, ., getScopeRoot, (, ), ., getJSType, (, ), ;, FunctionType, fnType, =]
[==, null, ), {, JSType, rootType, =, t, ., getScopeRoot, (, ), ., getJSType, (, ), ;, FunctionType, fnType, =]
[), {, JSType, rootType, =, t, ., getScopeRoot, (, ), ., getJSType, (, ), ;, FunctionType, fnType, =, rootType, ==]
[JSType, rootType, =, t, ., getScopeRoot, (, ), ., getJSType, (, ), ;, FunctionType, fnType, =, rootType, ==, null, ?]
[=, t, ., getScopeRoot, (, ), ., getJSType, (, ), ;, FunctionType, fnType, =, rootType, ==, null, ?, null, :]
[=, t, ., getScopeRoot, (, ), ., getJSType, (, ), ;, FunctionType, fnType, =, rootType, ==, null, ?, null, :]
[), ;, FunctionType, fnType, =, rootType, ==, null, ?, null, :, rootType, ., toMaybeFunctionType, (, ), ;, JSType, type, =]
[), ;, FunctionType, fnType, =, rootType, ==, null, ?, null, :, rootType, ., toMaybeFunctionType, (, ), ;, JSType, type, =]
[), ;, FunctionType, fnType, =, rootType, ==, null, ?, null, :, rootType, ., toMaybeFunctionType, (, ), ;, JSType, type, =]
[FunctionType, fnType, =, rootType, ==, null, ?, null, :, rootType, ., toMaybeFunctionType, (, ), ;, JSType, type, =, fnType, ==]
[=, rootType, ==, null, ?, null, :, rootType, ., toMaybeFunctionType, (, ), ;, JSType, type, =, fnType, ==, null, ?]
[==, null, ?, null, :, rootType, ., toMaybeFunctionType, (, ), ;, JSType, type, =, fnType, ==, null, ?, null, :]
[==, null, ?, null, :, rootType, ., toMaybeFunctionType, (, ), ;, JSType, type, =, fnType, ==, null, ?, null, :]
[., toMaybeFunctionType, (, ), ;, JSType, type, =, fnType, ==, null, ?, null, :, fnType, ., getTypeOfThis, (, ), ;]
[(, ), ;, JSType, type, =, fnType, ==, null, ?, null, :, fnType, ., getTypeOfThis, (, ), ;, symbol, =]
[;, JSType, type, =, fnType, ==, null, ?, null, :, fnType, ., getTypeOfThis, (, ), ;, symbol, =, addSymbol, (]
[type, =, fnType, ==, null, ?, null, :, fnType, ., getTypeOfThis, (, ), ;, symbol, =, addSymbol, (, "this", ,]
[fnType, ==, null, ?, null, :, fnType, ., getTypeOfThis, (, ), ;, symbol, =, addSymbol, (, "this", ,, type, ,]
[null, ?, null, :, fnType, ., getTypeOfThis, (, ), ;, symbol, =, addSymbol, (, "this", ,, type, ,, false, ,]
[null, :, fnType, ., getTypeOfThis, (, ), ;, symbol, =, addSymbol, (, "this", ,, type, ,, false, ,, scope, ,]
[null, :, fnType, ., getTypeOfThis, (, ), ;, symbol, =, addSymbol, (, "this", ,, type, ,, false, ,, scope, ,]
[(, "this", ,, type, ,, false, ,, scope, ,, t, ., getScopeRoot, (, ), ), ;, }, }, }, }]
[(, "this", ,, type, ,, false, ,, scope, ,, t, ., getScopeRoot, (, ), ), ;, }, }, }, }]
[,, false, ,, scope, ,, t, ., getScopeRoot, (, ), ), ;, }, }, }, }, thisStack, ., add, (]
[}, }, thisStack, ., add, (, symbol, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {]
[}, }, thisStack, ., add, (, symbol, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {]
[add, (, symbol, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, thisStack, ., remove, (]
[add, (, symbol, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, thisStack, ., remove, (]
[add, (, symbol, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, thisStack, ., remove, (]
[@, Override, public, void, exitScope, (, NodeTraversal, t, ), {, thisStack, ., remove, (, thisStack, ., size, (, ), -]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[}, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[}, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[Node, parent, ), {, if, (, !, n, ., isThis, (, ), ), {, return, ;, }, Symbol, symbol, =]
[Node, parent, ), {, if, (, !, n, ., isThis, (, ), ), {, return, ;, }, Symbol, symbol, =]
[if, (, !, n, ., isThis, (, ), ), {, return, ;, }, Symbol, symbol, =, thisStack, ., get, (]
[if, (, !, n, ., isThis, (, ), ), {, return, ;, }, Symbol, symbol, =, thisStack, ., get, (]
[if, (, !, n, ., isThis, (, ), ), {, return, ;, }, Symbol, symbol, =, thisStack, ., get, (]
[(, ), ), {, return, ;, }, Symbol, symbol, =, thisStack, ., get, (, thisStack, ., size, (, ), -]
[;, }, Symbol, symbol, =, thisStack, ., get, (, thisStack, ., size, (, ), -, 1, ), ;, if, (]
[;, }, Symbol, symbol, =, thisStack, ., get, (, thisStack, ., size, (, ), -, 1, ), ;, if, (]
[Symbol, symbol, =, thisStack, ., get, (, thisStack, ., size, (, ), -, 1, ), ;, if, (, symbol, !=]
[(, thisStack, ., size, (, ), -, 1, ), ;, if, (, symbol, !=, null, ), {, Reference, ref, =]
[(, thisStack, ., size, (, ), -, 1, ), ;, if, (, symbol, !=, null, ), {, Reference, ref, =]
[(, ), -, 1, ), ;, if, (, symbol, !=, null, ), {, Reference, ref, =, symbol, ., defineReferenceAt, (]
[;, if, (, symbol, !=, null, ), {, Reference, ref, =, symbol, ., defineReferenceAt, (, n, ), ;, if, (]
[;, if, (, symbol, !=, null, ), {, Reference, ref, =, symbol, ., defineReferenceAt, (, n, ), ;, if, (]
[;, if, (, symbol, !=, null, ), {, Reference, ref, =, symbol, ., defineReferenceAt, (, n, ), ;, if, (]
[), {, Reference, ref, =, symbol, ., defineReferenceAt, (, n, ), ;, if, (, symbol, ., getDeclaration, (, ), ==]
[ref, =, symbol, ., defineReferenceAt, (, n, ), ;, if, (, symbol, ., getDeclaration, (, ), ==, null, ), {]
[ref, =, symbol, ., defineReferenceAt, (, n, ), ;, if, (, symbol, ., getDeclaration, (, ), ==, null, ), {]
[defineReferenceAt, (, n, ), ;, if, (, symbol, ., getDeclaration, (, ), ==, null, ), {, symbol, ., setDeclaration, (]
[private, class, JSDocInfoCollector, extends, NodeTraversal, ., AbstractPostOrderCallback, {, private, final, JSTypeRegistry, typeRegistry, ;, private, JSDocInfoCollector, (, JSTypeRegistry, registry, ), {]
[private, class, JSDocInfoCollector, extends, NodeTraversal, ., AbstractPostOrderCallback, {, private, final, JSTypeRegistry, typeRegistry, ;, private, JSDocInfoCollector, (, JSTypeRegistry, registry, ), {]
[NodeTraversal, ., AbstractPostOrderCallback, {, private, final, JSTypeRegistry, typeRegistry, ;, private, JSDocInfoCollector, (, JSTypeRegistry, registry, ), {, this, ., typeRegistry, =]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., getJSDocInfo, (, ), !=]
[n, ,, Node, parent, ), {, if, (, n, ., getJSDocInfo, (, ), !=, null, ), {, JSDocInfo, info, =]
[n, ,, Node, parent, ), {, if, (, n, ., getJSDocInfo, (, ), !=, null, ), {, JSDocInfo, info, =]
[if, (, n, ., getJSDocInfo, (, ), !=, null, ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;]
[if, (, n, ., getJSDocInfo, (, ), !=, null, ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;]
[getJSDocInfo, (, ), !=, null, ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, docInfos, ., add, (]
[info, =, n, ., getJSDocInfo, (, ), ;, docInfos, ., add, (, info, ), ;, for, (, Node, typeAst, :]
[info, =, n, ., getJSDocInfo, (, ), ;, docInfos, ., add, (, info, ), ;, for, (, Node, typeAst, :]
[add, (, info, ), ;, for, (, Node, typeAst, :, info, ., getTypeNodes, (, ), ), {, SymbolScope, scope, =]
[add, (, info, ), ;, for, (, Node, typeAst, :, info, ., getTypeNodes, (, ), ), {, SymbolScope, scope, =]
[;, for, (, Node, typeAst, :, info, ., getTypeNodes, (, ), ), {, SymbolScope, scope, =, scopes, ., get, (]
[;, for, (, Node, typeAst, :, info, ., getTypeNodes, (, ), ), {, SymbolScope, scope, =, scopes, ., get, (]
[., getTypeNodes, (, ), ), {, SymbolScope, scope, =, scopes, ., get, (, t, ., getScopeRoot, (, ), ), ;]
[(, ), ), {, SymbolScope, scope, =, scopes, ., get, (, t, ., getScopeRoot, (, ), ), ;, visitTypeNode, (]
[(, ), ), {, SymbolScope, scope, =, scopes, ., get, (, t, ., getScopeRoot, (, ), ), ;, visitTypeNode, (]
[(, ), ), {, SymbolScope, scope, =, scopes, ., get, (, t, ., getScopeRoot, (, ), ), ;, visitTypeNode, (]
[), {, SymbolScope, scope, =, scopes, ., get, (, t, ., getScopeRoot, (, ), ), ;, visitTypeNode, (, scope, ==]
[SymbolScope, scope, =, scopes, ., get, (, t, ., getScopeRoot, (, ), ), ;, visitTypeNode, (, scope, ==, null, ?]
[=, scopes, ., get, (, t, ., getScopeRoot, (, ), ), ;, visitTypeNode, (, scope, ==, null, ?, globalScope, :]
[., get, (, t, ., getScopeRoot, (, ), ), ;, visitTypeNode, (, scope, ==, null, ?, globalScope, :, scope, ,]
[,, typeAst, ), ;, }, }, }, public, void, visitTypeNode, (, SymbolScope, scope, ,, Node, n, ), {, if, (]
[,, typeAst, ), ;, }, }, }, public, void, visitTypeNode, (, SymbolScope, scope, ,, Node, n, ), {, if, (]
[(, SymbolScope, scope, ,, Node, n, ), {, if, (, n, ., isString, (, ), ), {, Symbol, symbol, =]
[(, SymbolScope, scope, ,, Node, n, ), {, if, (, n, ., isString, (, ), ), {, Symbol, symbol, =]
[Node, n, ), {, if, (, n, ., isString, (, ), ), {, Symbol, symbol, =, scope, ., getSlot, (]
[Node, n, ), {, if, (, n, ., isString, (, ), ), {, Symbol, symbol, =, scope, ., getSlot, (]
[(, ), ), {, Symbol, symbol, =, scope, ., getSlot, (, n, ., getString, (, ), ), ;, if, (]
[(, ), ), {, Symbol, symbol, =, scope, ., getSlot, (, n, ., getString, (, ), ), ;, if, (]
[), {, Symbol, symbol, =, scope, ., getSlot, (, n, ., getString, (, ), ), ;, if, (, symbol, ==]
[., getSlot, (, n, ., getString, (, ), ), ;, if, (, symbol, ==, null, ), {, JSType, type, =]
[., getSlot, (, n, ., getString, (, ), ), ;, if, (, symbol, ==, null, ), {, JSType, type, =]
[., getString, (, ), ), ;, if, (, symbol, ==, null, ), {, JSType, type, =, typeRegistry, ., getType, (]
[., getString, (, ), ), ;, if, (, symbol, ==, null, ), {, JSType, type, =, typeRegistry, ., getType, (]
[null, ), {, JSType, type, =, typeRegistry, ., getType, (, n, ., getString, (, ), ), ;, JSType, autobox, =]
[null, ), {, JSType, type, =, typeRegistry, ., getType, (, n, ., getString, (, ), ), ;, JSType, autobox, =]
[null, ), {, JSType, type, =, typeRegistry, ., getType, (, n, ., getString, (, ), ), ;, JSType, autobox, =]
[{, JSType, type, =, typeRegistry, ., getType, (, n, ., getString, (, ), ), ;, JSType, autobox, =, type, ==]
[type, =, typeRegistry, ., getType, (, n, ., getString, (, ), ), ;, JSType, autobox, =, type, ==, null, ?]
[typeRegistry, ., getType, (, n, ., getString, (, ), ), ;, JSType, autobox, =, type, ==, null, ?, null, :]
[typeRegistry, ., getType, (, n, ., getString, (, ), ), ;, JSType, autobox, =, type, ==, null, ?, null, :]
[getString, (, ), ), ;, JSType, autobox, =, type, ==, null, ?, null, :, type, ., autoboxesTo, (, ), ;]
[), ), ;, JSType, autobox, =, type, ==, null, ?, null, :, type, ., autoboxesTo, (, ), ;, symbol, =]
[), ), ;, JSType, autobox, =, type, ==, null, ?, null, :, type, ., autoboxesTo, (, ), ;, symbol, =]
[), ), ;, JSType, autobox, =, type, ==, null, ?, null, :, type, ., autoboxesTo, (, ), ;, symbol, =]
[;, JSType, autobox, =, type, ==, null, ?, null, :, type, ., autoboxesTo, (, ), ;, symbol, =, autobox, ==]
[autobox, =, type, ==, null, ?, null, :, type, ., autoboxesTo, (, ), ;, symbol, =, autobox, ==, null, ?]
[type, ==, null, ?, null, :, type, ., autoboxesTo, (, ), ;, symbol, =, autobox, ==, null, ?, null, :]
[null, ?, null, :, type, ., autoboxesTo, (, ), ;, symbol, =, autobox, ==, null, ?, null, :, getSymbolForTypeHelper, (]
[null, :, type, ., autoboxesTo, (, ), ;, symbol, =, autobox, ==, null, ?, null, :, getSymbolForTypeHelper, (, autobox, ,]
[), ;, symbol, =, autobox, ==, null, ?, null, :, getSymbolForTypeHelper, (, autobox, ,, true, ), ;, }, if, (]
[), ;, symbol, =, autobox, ==, null, ?, null, :, getSymbolForTypeHelper, (, autobox, ,, true, ), ;, }, if, (]
[symbol, =, autobox, ==, null, ?, null, :, getSymbolForTypeHelper, (, autobox, ,, true, ), ;, }, if, (, symbol, !=]
[==, null, ?, null, :, getSymbolForTypeHelper, (, autobox, ,, true, ), ;, }, if, (, symbol, !=, null, ), {]
[==, null, ?, null, :, getSymbolForTypeHelper, (, autobox, ,, true, ), ;, }, if, (, symbol, !=, null, ), {]
[:, getSymbolForTypeHelper, (, autobox, ,, true, ), ;, }, if, (, symbol, !=, null, ), {, symbol, ., defineReferenceAt, (]
[(, symbol, !=, null, ), {, symbol, ., defineReferenceAt, (, n, ), ;, }, }, for, (, Node, child, =]
[(, symbol, !=, null, ), {, symbol, ., defineReferenceAt, (, n, ), ;, }, }, for, (, Node, child, =]
[symbol, ., defineReferenceAt, (, n, ), ;, }, }, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[symbol, ., defineReferenceAt, (, n, ), ;, }, }, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[defineReferenceAt, (, n, ), ;, }, }, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=]
[n, ), ;, }, }, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;]
[;, }, }, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[;, }, }, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[=, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, visitTypeNode, (]
[(, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, visitTypeNode, (, scope, ,]
[), {, visitTypeNode, (, scope, ,, child, ), ;, }, }, }, private, final, Ordering, <, String, >, SOURCE_NAME_ORDERING, =]
[), {, visitTypeNode, (, scope, ,, child, ), ;, }, }, }, private, final, Ordering, <, String, >, SOURCE_NAME_ORDERING, =]
[), {, visitTypeNode, (, scope, ,, child, ), ;, }, }, }, private, final, Ordering, <, String, >, SOURCE_NAME_ORDERING, =]
[SOURCE_NAME_ORDERING, =, Ordering, ., natural, (, ), ., nullsFirst, (, ), ;, private, final, Ordering, <, Node, >, NODE_ORDERING, =]
[>, (, ), {, @, Override, public, int, compare, (, Node, a, ,, Node, b, ), {, int, result, =]
[>, (, ), {, @, Override, public, int, compare, (, Node, a, ,, Node, b, ), {, int, result, =]
[@, Override, public, int, compare, (, Node, a, ,, Node, b, ), {, int, result, =, SOURCE_NAME_ORDERING, ., compare, (]
[@, Override, public, int, compare, (, Node, a, ,, Node, b, ), {, int, result, =, SOURCE_NAME_ORDERING, ., compare, (]
[Node, a, ,, Node, b, ), {, int, result, =, SOURCE_NAME_ORDERING, ., compare, (, a, ., getSourceFileName, (, ), ,]
[Node, a, ,, Node, b, ), {, int, result, =, SOURCE_NAME_ORDERING, ., compare, (, a, ., getSourceFileName, (, ), ,]
[=, SOURCE_NAME_ORDERING, ., compare, (, a, ., getSourceFileName, (, ), ,, b, ., getSourceFileName, (, ), ), ;, if, (]
[=, SOURCE_NAME_ORDERING, ., compare, (, a, ., getSourceFileName, (, ), ,, b, ., getSourceFileName, (, ), ), ;, if, (]
[., compare, (, a, ., getSourceFileName, (, ), ,, b, ., getSourceFileName, (, ), ), ;, if, (, result, !=]
[., getSourceFileName, (, ), ,, b, ., getSourceFileName, (, ), ), ;, if, (, result, !=, 0, ), {, return]
[,, b, ., getSourceFileName, (, ), ), ;, if, (, result, !=, 0, ), {, return, result, ;, }, return]
[,, b, ., getSourceFileName, (, ), ), ;, if, (, result, !=, 0, ), {, return, result, ;, }, return]
[,, b, ., getSourceFileName, (, ), ), ;, if, (, result, !=, 0, ), {, return, result, ;, }, return]
[), ;, if, (, result, !=, 0, ), {, return, result, ;, }, return, a, ., getSourcePosition, (, ), -]
[), ;, if, (, result, !=, 0, ), {, return, result, ;, }, return, a, ., getSourcePosition, (, ), -]
[(, ), -, b, ., getSourcePosition, (, ), ;, }, }, ;, private, final, Ordering, <, SymbolScope, >, LEXICAL_SCOPE_ORDERING, =]
[Ordering, <, SymbolScope, >, (, ), {, @, Override, public, int, compare, (, SymbolScope, a, ,, SymbolScope, b, ), {]
[Ordering, <, SymbolScope, >, (, ), {, @, Override, public, int, compare, (, SymbolScope, a, ,, SymbolScope, b, ), {]
[(, ), {, @, Override, public, int, compare, (, SymbolScope, a, ,, SymbolScope, b, ), {, Preconditions, ., checkState, (]
[(, ), {, @, Override, public, int, compare, (, SymbolScope, a, ,, SymbolScope, b, ), {, Preconditions, ., checkState, (]
[(, ), {, @, Override, public, int, compare, (, SymbolScope, a, ,, SymbolScope, b, ), {, Preconditions, ., checkState, (]
[int, compare, (, SymbolScope, a, ,, SymbolScope, b, ), {, Preconditions, ., checkState, (, a, ., isLexicalScope, (, ), &&]
[int, compare, (, SymbolScope, a, ,, SymbolScope, b, ), {, Preconditions, ., checkState, (, a, ., isLexicalScope, (, ), &&]
[SymbolScope, b, ), {, Preconditions, ., checkState, (, a, ., isLexicalScope, (, ), &&, b, ., isLexicalScope, (, ), ,]
[Preconditions, ., checkState, (, a, ., isLexicalScope, (, ), &&, b, ., isLexicalScope, (, ), ,, "We can only sort lexical scopes", ), ;, return]
[Preconditions, ., checkState, (, a, ., isLexicalScope, (, ), &&, b, ., isLexicalScope, (, ), ,, "We can only sort lexical scopes", ), ;, return]
[a, ., isLexicalScope, (, ), &&, b, ., isLexicalScope, (, ), ,, "We can only sort lexical scopes", ), ;, return, NODE_ORDERING, ., compare, (]
[a, ., isLexicalScope, (, ), &&, b, ., isLexicalScope, (, ), ,, "We can only sort lexical scopes", ), ;, return, NODE_ORDERING, ., compare, (]
[b, ., isLexicalScope, (, ), ,, "We can only sort lexical scopes", ), ;, return, NODE_ORDERING, ., compare, (, a, ., getRootNode, (, ), ,]
[b, ., isLexicalScope, (, ), ,, "We can only sort lexical scopes", ), ;, return, NODE_ORDERING, ., compare, (, a, ., getRootNode, (, ), ,]
[), ,, b, ., getRootNode, (, ), ), ;, }, }, ;, private, final, Ordering, <, Symbol, >, SYMBOL_ORDERING, =]
[>, (, ), {, @, Override, public, int, compare, (, Symbol, a, ,, Symbol, b, ), {, SymbolScope, scopeA, =]
[), {, @, Override, public, int, compare, (, Symbol, a, ,, Symbol, b, ), {, SymbolScope, scopeA, =, getScope, (]
[compare, (, Symbol, a, ,, Symbol, b, ), {, SymbolScope, scopeA, =, getScope, (, a, ), ;, SymbolScope, scopeB, =]
[Symbol, a, ,, Symbol, b, ), {, SymbolScope, scopeA, =, getScope, (, a, ), ;, SymbolScope, scopeB, =, getScope, (]
[{, SymbolScope, scopeA, =, getScope, (, a, ), ;, SymbolScope, scopeB, =, getScope, (, b, ), ;, int, result, =]
[{, SymbolScope, scopeA, =, getScope, (, a, ), ;, SymbolScope, scopeB, =, getScope, (, b, ), ;, int, result, =]
[scopeA, =, getScope, (, a, ), ;, SymbolScope, scopeB, =, getScope, (, b, ), ;, int, result, =, getLexicalScopeDepth, (]
[(, a, ), ;, SymbolScope, scopeB, =, getScope, (, b, ), ;, int, result, =, getLexicalScopeDepth, (, scopeA, ), -]
[), ;, SymbolScope, scopeB, =, getScope, (, b, ), ;, int, result, =, getLexicalScopeDepth, (, scopeA, ), -, getLexicalScopeDepth, (]
[getScope, (, b, ), ;, int, result, =, getLexicalScopeDepth, (, scopeA, ), -, getLexicalScopeDepth, (, scopeB, ), ;, if, (]
[getScope, (, b, ), ;, int, result, =, getLexicalScopeDepth, (, scopeA, ), -, getLexicalScopeDepth, (, scopeB, ), ;, if, (]
[b, ), ;, int, result, =, getLexicalScopeDepth, (, scopeA, ), -, getLexicalScopeDepth, (, scopeB, ), ;, if, (, result, !=]
[result, =, getLexicalScopeDepth, (, scopeA, ), -, getLexicalScopeDepth, (, scopeB, ), ;, if, (, result, !=, 0, ), {, return]
[scopeA, ), -, getLexicalScopeDepth, (, scopeB, ), ;, if, (, result, !=, 0, ), {, return, result, ;, }, return]
[scopeA, ), -, getLexicalScopeDepth, (, scopeB, ), ;, if, (, result, !=, 0, ), {, return, result, ;, }, return]
[scopeA, ), -, getLexicalScopeDepth, (, scopeB, ), ;, if, (, result, !=, 0, ), {, return, result, ;, }, return]
[if, (, result, !=, 0, ), {, return, result, ;, }, return, a, ., getName, (, ), ., compareTo, (]
[if, (, result, !=, 0, ), {, return, result, ;, }, return, a, ., getName, (, ), ., compareTo, (]
[b, ., getName, (, ), ), ;, }, }, ;, private, int, getLexicalScopeDepth, (, SymbolScope, scope, ), {, if, (]
[b, ., getName, (, ), ), ;, }, }, ;, private, int, getLexicalScopeDepth, (, SymbolScope, scope, ), {, if, (]
[b, ., getName, (, ), ), ;, }, }, ;, private, int, getLexicalScopeDepth, (, SymbolScope, scope, ), {, if, (]
[;, }, }, ;, private, int, getLexicalScopeDepth, (, SymbolScope, scope, ), {, if, (, scope, ., isLexicalScope, (, ), ||]
[;, }, }, ;, private, int, getLexicalScopeDepth, (, SymbolScope, scope, ), {, if, (, scope, ., isLexicalScope, (, ), ||]
[SymbolScope, scope, ), {, if, (, scope, ., isLexicalScope, (, ), ||, scope, ., isDocScope, (, ), ), {, return]
[SymbolScope, scope, ), {, if, (, scope, ., isLexicalScope, (, ), ||, scope, ., isDocScope, (, ), ), {, return]
[(, ), ||, scope, ., isDocScope, (, ), ), {, return, scope, ., getScopeDepth, (, ), ;, }, else, {]
[(, ), ||, scope, ., isDocScope, (, ), ), {, return, scope, ., getScopeDepth, (, ), ;, }, else, {]
[., isDocScope, (, ), ), {, return, scope, ., getScopeDepth, (, ), ;, }, else, {, Preconditions, ., checkState, (]
[., isDocScope, (, ), ), {, return, scope, ., getScopeDepth, (, ), ;, }, else, {, Preconditions, ., checkState, (]
[(, ), ;, }, else, {, Preconditions, ., checkState, (, scope, ., isPropertyScope, (, ), ), ;, Symbol, sym, =]
[(, ), ;, }, else, {, Preconditions, ., checkState, (, scope, ., isPropertyScope, (, ), ), ;, Symbol, sym, =]
[Preconditions, ., checkState, (, scope, ., isPropertyScope, (, ), ), ;, Symbol, sym, =, scope, ., getSymbolForScope, (, ), ;]
[Preconditions, ., checkState, (, scope, ., isPropertyScope, (, ), ), ;, Symbol, sym, =, scope, ., getSymbolForScope, (, ), ;]
[scope, ., isPropertyScope, (, ), ), ;, Symbol, sym, =, scope, ., getSymbolForScope, (, ), ;, Preconditions, ., checkNotNull, (]
[), ), ;, Symbol, sym, =, scope, ., getSymbolForScope, (, ), ;, Preconditions, ., checkNotNull, (, sym, ), ;, return]
[), ), ;, Symbol, sym, =, scope, ., getSymbolForScope, (, ), ;, Preconditions, ., checkNotNull, (, sym, ), ;, return]
[;, Symbol, sym, =, scope, ., getSymbolForScope, (, ), ;, Preconditions, ., checkNotNull, (, sym, ), ;, return, getLexicalScopeDepth, (]
[sym, =, scope, ., getSymbolForScope, (, ), ;, Preconditions, ., checkNotNull, (, sym, ), ;, return, getLexicalScopeDepth, (, getScope, (]
[getSymbolForScope, (, ), ;, Preconditions, ., checkNotNull, (, sym, ), ;, return, getLexicalScopeDepth, (, getScope, (, sym, ), ), +]
