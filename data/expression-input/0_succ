[), {, String, pattern, =, subtree, ., getFirstChild, (, ), ., getString, (, ), ;, String, flags, =, subtree, .]
[., isRegExp, (, ), ), {, String, pattern, =, subtree, ., getFirstChild, (, ), ., getString, (, ), ;, String]
[;, String, flags, =, subtree, ., getChildCount, (, ), ==, 2, ?, subtree, ., getLastChild, (, ), ., getString, (]
[., getString, (, ), ;, String, flags, =, subtree, ., getChildCount, (, ), ==, 2, ?, subtree, ., getLastChild, (]
[., getFirstChild, (, ), ., getString, (, ), ;, String, flags, =, subtree, ., getChildCount, (, ), ==, 2, ?]
[;, RegExpTree, regexTree, ;, try, {, regexTree, =, RegExpTree, ., parseRegExp, (, pattern, ,, flags, ), ;, }, catch, (]
[?, subtree, ., getLastChild, (, ), ., getString, (, ), :, "", ;, RegExpTree, regexTree, ;, try, {, regexTree, =]
[==, 2, ?, subtree, ., getLastChild, (, ), ., getString, (, ), :, "", ;, RegExpTree, regexTree, ;, try, {]
[., getChildCount, (, ), ==, 2, ?, subtree, ., getLastChild, (, ), ., getString, (, ), :, "", ;, RegExpTree]
[?, subtree, ., getLastChild, (, ), ., getString, (, ), :, "", ;, RegExpTree, regexTree, ;, try, {, regexTree, =]
[:, "", ;, RegExpTree, regexTree, ;, try, {, regexTree, =, RegExpTree, ., parseRegExp, (, pattern, ,, flags, ), ;, }]
[., getString, (, ), :, "", ;, RegExpTree, regexTree, ;, try, {, regexTree, =, RegExpTree, ., parseRegExp, (, pattern, ,]
[., getLastChild, (, ), ., getString, (, ), :, "", ;, RegExpTree, regexTree, ;, try, {, regexTree, =, RegExpTree, .]
[;, RegExpTree, regexTree, ;, try, {, regexTree, =, RegExpTree, ., parseRegExp, (, pattern, ,, flags, ), ;, }, catch, (]
[=, RegExpTree, ., parseRegExp, (, pattern, ,, flags, ), ;, }, catch, (, IllegalArgumentException, ex, ), {, return, subtree, ;]
[;, }, catch, (, IllegalArgumentException, ex, ), {, return, subtree, ;, }, regexTree, =, regexTree, ., simplify, (, flags, )]
[., parseRegExp, (, pattern, ,, flags, ), ;, }, catch, (, IllegalArgumentException, ex, ), {, return, subtree, ;, }, regexTree]
[,, flags, ), ;, }, catch, (, IllegalArgumentException, ex, ), {, return, subtree, ;, }, regexTree, =, regexTree, ., simplify]
[), ;, }, catch, (, IllegalArgumentException, ex, ), {, return, subtree, ;, }, regexTree, =, regexTree, ., simplify, (, flags]
[;, }, regexTree, =, regexTree, ., simplify, (, flags, ), ;, String, literal, =, regexTree, ., toString, (, ), ;]
[=, regexTree, ., simplify, (, flags, ), ;, String, literal, =, regexTree, ., toString, (, ), ;, String, newPattern, =]
[;, String, literal, =, regexTree, ., toString, (, ), ;, String, newPattern, =, literal, ., substring, (, 1, ,, literal]
[., simplify, (, flags, ), ;, String, literal, =, regexTree, ., toString, (, ), ;, String, newPattern, =, literal, .]
[), ;, String, literal, =, regexTree, ., toString, (, ), ;, String, newPattern, =, literal, ., substring, (, 1, ,]
[;, String, newPattern, =, literal, ., substring, (, 1, ,, literal, ., length, (, ), -, 1, ), ;, String]
[., toString, (, ), ;, String, newPattern, =, literal, ., substring, (, 1, ,, literal, ., length, (, ), -]
[;, String, newFlags, =, (, (, flags, ., contains, (, "g", ), &&, (, !, RegExpTree, ., matchesWholeInput, (, regexTree]
[., substring, (, 1, ,, literal, ., length, (, ), -, 1, ), ;, String, newFlags, =, (, (, flags]
[,, literal, ., length, (, ), -, 1, ), ;, String, newFlags, =, (, (, flags, ., contains, (, "g"]
[), ;, String, newFlags, =, (, (, flags, ., contains, (, "g", ), &&, (, !, RegExpTree, ., matchesWholeInput, (]
[-, 1, ), ;, String, newFlags, =, (, (, flags, ., contains, (, "g", ), &&, (, !, RegExpTree, .]
[., length, (, ), -, 1, ), ;, String, newFlags, =, (, (, flags, ., contains, (, "g", ), &&]
[), ;, String, newFlags, =, (, (, flags, ., contains, (, "g", ), &&, (, !, RegExpTree, ., matchesWholeInput, (]
[;, if, (, !, (, newPattern, ., equals, (, pattern, ), &&, newFlags, ., equals, (, flags, ), ), )]
[), ;, if, (, !, (, newPattern, ., equals, (, pattern, ), &&, newFlags, ., equals, (, flags, ), )]
[+, (, flags, ., contains, (, "m", ), &&, regexTree, ., containsAnchor, (, ), ?, "m", :, "", ), )]
[+, (, flags, ., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, ), ?, "i", :, "", ), +]
[), +, (, flags, ., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, ), ?, "i", :, "", )]
[?, "g", :, "", ), +, (, flags, ., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, ), ?]
[&&, (, !, RegExpTree, ., matchesWholeInput, (, regexTree, ,, flags, ), ||, regexTree, ., hasCapturingGroup, (, ), ), ?, "g"]
[., contains, (, "g", ), &&, (, !, RegExpTree, ., matchesWholeInput, (, regexTree, ,, flags, ), ||, regexTree, ., hasCapturingGroup]
[), &&, (, !, RegExpTree, ., matchesWholeInput, (, regexTree, ,, flags, ), ||, regexTree, ., hasCapturingGroup, (, ), ), ?]
[?, "g", :, "", ), +, (, flags, ., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, ), ?]
[), ?, "g", :, "", ), +, (, flags, ., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, )]
[||, regexTree, ., hasCapturingGroup, (, ), ), ?, "g", :, "", ), +, (, flags, ., contains, (, "i", )]
[||, regexTree, ., hasCapturingGroup, (, ), ), ?, "g", :, "", ), +, (, flags, ., contains, (, "i", )]
[., matchesWholeInput, (, regexTree, ,, flags, ), ||, regexTree, ., hasCapturingGroup, (, ), ), ?, "g", :, "", ), +]
[,, flags, ), ||, regexTree, ., hasCapturingGroup, (, ), ), ?, "g", :, "", ), +, (, flags, ., contains]
[), ||, regexTree, ., hasCapturingGroup, (, ), ), ?, "g", :, "", ), +, (, flags, ., contains, (, "i"]
[), ?, "g", :, "", ), +, (, flags, ., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, )]
[., hasCapturingGroup, (, ), ), ?, "g", :, "", ), +, (, flags, ., contains, (, "i", ), &&, regexTree]
[:, "", ), +, (, flags, ., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, ), ?, "i", :]
[), +, (, flags, ., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, ), ?, "i", :, "", )]
[+, (, flags, ., contains, (, "m", ), &&, regexTree, ., containsAnchor, (, ), ?, "m", :, "", ), )]
[), +, (, flags, ., contains, (, "m", ), &&, regexTree, ., containsAnchor, (, ), ?, "m", :, "", )]
[?, "i", :, "", ), +, (, flags, ., contains, (, "m", ), &&, regexTree, ., containsAnchor, (, ), ?]
[&&, regexTree, ., isCaseSensitive, (, ), ?, "i", :, "", ), +, (, flags, ., contains, (, "m", ), &&]
[., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, ), ?, "i", :, "", ), +, (, flags, .]
[), &&, regexTree, ., isCaseSensitive, (, ), ?, "i", :, "", ), +, (, flags, ., contains, (, "m", )]
[?, "i", :, "", ), +, (, flags, ., contains, (, "m", ), &&, regexTree, ., containsAnchor, (, ), ?]
[., isCaseSensitive, (, ), ?, "i", :, "", ), +, (, flags, ., contains, (, "m", ), &&, regexTree, .]
[:, "", ), +, (, flags, ., contains, (, "m", ), &&, regexTree, ., containsAnchor, (, ), ?, "m", :]
[), +, (, flags, ., contains, (, "m", ), &&, regexTree, ., containsAnchor, (, ), ?, "m", :, "", )]
[), ;, if, (, !, (, newPattern, ., equals, (, pattern, ), &&, newFlags, ., equals, (, flags, ), )]
[), ), ;, if, (, !, (, newPattern, ., equals, (, pattern, ), &&, newFlags, ., equals, (, flags, )]
[?, "m", :, "", ), ), ;, if, (, !, (, newPattern, ., equals, (, pattern, ), &&, newFlags, .]
[&&, regexTree, ., containsAnchor, (, ), ?, "m", :, "", ), ), ;, if, (, !, (, newPattern, ., equals]
[., contains, (, "m", ), &&, regexTree, ., containsAnchor, (, ), ?, "m", :, "", ), ), ;, if, (]
[), &&, regexTree, ., containsAnchor, (, ), ?, "m", :, "", ), ), ;, if, (, !, (, newPattern, .]
[?, "m", :, "", ), ), ;, if, (, !, (, newPattern, ., equals, (, pattern, ), &&, newFlags, .]
[., containsAnchor, (, ), ?, "m", :, "", ), ), ;, if, (, !, (, newPattern, ., equals, (, pattern]
[:, "", ), ), ;, if, (, !, (, newPattern, ., equals, (, pattern, ), &&, newFlags, ., equals, (]
[), ), ;, if, (, !, (, newPattern, ., equals, (, pattern, ), &&, newFlags, ., equals, (, flags, )]
[), {, subtree, ., getFirstChild, (, ), ., setString, (, newPattern, ), ;, if, (, !, "", ., equals, (]
[), {, subtree, ., getFirstChild, (, ), ., setString, (, newPattern, ), ;, if, (, !, "", ., equals, (]
[), ), {, subtree, ., getFirstChild, (, ), ., setString, (, newPattern, ), ;, if, (, !, "", ., equals]
[&&, newFlags, ., equals, (, flags, ), ), ), {, subtree, ., getFirstChild, (, ), ., setString, (, newPattern, )]
[., equals, (, pattern, ), &&, newFlags, ., equals, (, flags, ), ), ), {, subtree, ., getFirstChild, (, )]
[), &&, newFlags, ., equals, (, flags, ), ), ), {, subtree, ., getFirstChild, (, ), ., setString, (, newPattern]
[), ), {, subtree, ., getFirstChild, (, ), ., setString, (, newPattern, ), ;, if, (, !, "", ., equals]
[., equals, (, flags, ), ), ), {, subtree, ., getFirstChild, (, ), ., setString, (, newPattern, ), ;, if]
[), ), ), {, subtree, ., getFirstChild, (, ), ., setString, (, newPattern, ), ;, if, (, !, "", .]
[;, if, (, !, "", ., equals, (, newFlags, ), ), {, subtree, ., getLastChild, (, ), ., setString, (]
[., setString, (, newPattern, ), ;, if, (, !, "", ., equals, (, newFlags, ), ), {, subtree, ., getLastChild]
[., getFirstChild, (, ), ., setString, (, newPattern, ), ;, if, (, !, "", ., equals, (, newFlags, ), )]
[), ;, if, (, !, "", ., equals, (, newFlags, ), ), {, subtree, ., getLastChild, (, ), ., setString]
[), {, subtree, ., getLastChild, (, ), ., setString, (, newFlags, ), ;, }, else, if, (, subtree, ., getChildCount]
[), {, subtree, ., getLastChild, (, ), ., setString, (, newFlags, ), ;, }, else, if, (, subtree, ., getChildCount]
[., equals, (, newFlags, ), ), {, subtree, ., getLastChild, (, ), ., setString, (, newFlags, ), ;, }, else]
[), ), {, subtree, ., getLastChild, (, ), ., setString, (, newFlags, ), ;, }, else, if, (, subtree, .]
[;, }, else, if, (, subtree, ., getChildCount, (, ), ==, 2, ), {, subtree, ., getLastChild, (, ), .]
[., setString, (, newFlags, ), ;, }, else, if, (, subtree, ., getChildCount, (, ), ==, 2, ), {, subtree]
[., getLastChild, (, ), ., setString, (, newFlags, ), ;, }, else, if, (, subtree, ., getChildCount, (, ), ==]
[), ;, }, else, if, (, subtree, ., getChildCount, (, ), ==, 2, ), {, subtree, ., getLastChild, (, )]
[), {, subtree, ., getLastChild, (, ), ., detachFromParent, (, ), ;, }, reportCodeChange, (, ), ;, }, }, return]
[==, 2, ), {, subtree, ., getLastChild, (, ), ., detachFromParent, (, ), ;, }, reportCodeChange, (, ), ;, }]
[., getChildCount, (, ), ==, 2, ), {, subtree, ., getLastChild, (, ), ., detachFromParent, (, ), ;, }, reportCodeChange]
[), {, subtree, ., getLastChild, (, ), ., detachFromParent, (, ), ;, }, reportCodeChange, (, ), ;, }, }, return]
[;, }, reportCodeChange, (, ), ;, }, }, return, subtree, ;, }, }]
[., detachFromParent, (, ), ;, }, reportCodeChange, (, ), ;, }, }, return, subtree, ;, }, }]
[., getLastChild, (, ), ., detachFromParent, (, ), ;, }, reportCodeChange, (, ), ;, }, }, return, subtree, ;, }]
[;, }, }, return, subtree, ;, }, }]
[;, }, }]
