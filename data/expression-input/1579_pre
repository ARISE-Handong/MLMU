[<, Scope, ., Var, ,, Scope, ., Var, >, {, private, final, Map, <, String, ,, Var, >, vars, =]
[rootNode, ;, private, final, boolean, isBottom, ;, private, Var, arguments, ;, private, static, final, Predicate, <, Var, >, DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES, =]
[=, new, Predicate, <, Var, >, (, ), {, @, Override, public, boolean, apply, (, Var, var, ), {, return]
[=, new, Predicate, <, Var, >, (, ), {, @, Override, public, boolean, apply, (, Var, var, ), {, return]
[=, new, Predicate, <, Var, >, (, ), {, @, Override, public, boolean, apply, (, Var, var, ), {, return]
[=, new, Predicate, <, Var, >, (, ), {, @, Override, public, boolean, apply, (, Var, var, ), {, return]
[=, new, Predicate, <, Var, >, (, ), {, @, Override, public, boolean, apply, (, Var, var, ), {, return]
[=, new, Predicate, <, Var, >, (, ), {, @, Override, public, boolean, apply, (, Var, var, ), {, return]
[(, ), {, @, Override, public, boolean, apply, (, Var, var, ), {, return, var, ., getParentNode, (, ), !=]
[{, @, Override, public, boolean, apply, (, Var, var, ), {, return, var, ., getParentNode, (, ), !=, null, &&]
[{, @, Override, public, boolean, apply, (, Var, var, ), {, return, var, ., getParentNode, (, ), !=, null, &&]
[{, @, Override, public, boolean, apply, (, Var, var, ), {, return, var, ., getParentNode, (, ), !=, null, &&]
[(, Var, var, ), {, return, var, ., getParentNode, (, ), !=, null, &&, var, ., getType, (, ), ==]
[var, ), {, return, var, ., getParentNode, (, ), !=, null, &&, var, ., getType, (, ), ==, null, &&]
[var, ), {, return, var, ., getParentNode, (, ), !=, null, &&, var, ., getType, (, ), ==, null, &&]
[var, ), {, return, var, ., getParentNode, (, ), !=, null, &&, var, ., getType, (, ), ==, null, &&]
[null, &&, var, ., getType, (, ), ==, null, &&, var, ., getParentNode, (, ), ., isVar, (, ), &&]
[&&, var, ., getType, (, ), ==, null, &&, var, ., getParentNode, (, ), ., isVar, (, ), &&, !]
[&&, var, ., getType, (, ), ==, null, &&, var, ., getParentNode, (, ), ., isVar, (, ), &&, !]
[final, boolean, typeInferred, ;, final, CompilerInput, input, ;, final, int, index, ;, final, Scope, scope, ;, private, boolean, markedEscaped, =]
[input, ;, final, int, index, ;, final, Scope, scope, ;, private, boolean, markedEscaped, =, false, ;, private, boolean, markedAssignedExactlyOnce, =]
[,, String, name, ,, Node, nameNode, ,, JSType, type, ,, Scope, scope, ,, int, index, ,, CompilerInput, input, ), {]
[,, String, name, ,, Node, nameNode, ,, JSType, type, ,, Scope, scope, ,, int, index, ,, CompilerInput, input, ), {]
[Node, nameNode, ,, JSType, type, ,, Scope, scope, ,, int, index, ,, CompilerInput, input, ), {, this, ., name, =]
[,, JSType, type, ,, Scope, scope, ,, int, index, ,, CompilerInput, input, ), {, this, ., name, =, name, ;]
[,, JSType, type, ,, Scope, scope, ,, int, index, ,, CompilerInput, input, ), {, this, ., name, =, name, ;]
[Scope, scope, ,, int, index, ,, CompilerInput, input, ), {, this, ., name, =, name, ;, this, ., nameNode, =]
[,, int, index, ,, CompilerInput, input, ), {, this, ., name, =, name, ;, this, ., nameNode, =, nameNode, ;]
[,, int, index, ,, CompilerInput, input, ), {, this, ., name, =, name, ;, this, ., nameNode, =, nameNode, ;]
[CompilerInput, input, ), {, this, ., name, =, name, ;, this, ., nameNode, =, nameNode, ;, this, ., type, =]
[), {, this, ., name, =, name, ;, this, ., nameNode, =, nameNode, ;, this, ., type, =, type, ;]
[), {, this, ., name, =, name, ;, this, ., nameNode, =, nameNode, ;, this, ., type, =, type, ;]
[name, =, name, ;, this, ., nameNode, =, nameNode, ;, this, ., type, =, type, ;, this, ., scope, =]
[name, ;, this, ., nameNode, =, nameNode, ;, this, ., type, =, type, ;, this, ., scope, =, scope, ;]
[name, ;, this, ., nameNode, =, nameNode, ;, this, ., type, =, type, ;, this, ., scope, =, scope, ;]
[nameNode, =, nameNode, ;, this, ., type, =, type, ;, this, ., scope, =, scope, ;, this, ., index, =]
[nameNode, ;, this, ., type, =, type, ;, this, ., scope, =, scope, ;, this, ., index, =, index, ;]
[nameNode, ;, this, ., type, =, type, ;, this, ., scope, =, scope, ;, this, ., index, =, index, ;]
[type, =, type, ;, this, ., scope, =, scope, ;, this, ., index, =, index, ;, this, ., input, =]
[type, ;, this, ., scope, =, scope, ;, this, ., index, =, index, ;, this, ., input, =, input, ;]
[type, ;, this, ., scope, =, scope, ;, this, ., index, =, index, ;, this, ., input, =, input, ;]
[scope, =, scope, ;, this, ., index, =, index, ;, this, ., input, =, input, ;, this, ., typeInferred, =]
[input, =, input, ;, this, ., typeInferred, =, inferred, ;, }, @, Override, public, String, getName, (, ), {, return]
[Override, public, String, getName, (, ), {, return, name, ;, }, @, Override, public, Node, getNode, (, ), {, return]
[;, }, @, Override, public, Node, getNode, (, ), {, return, nameNode, ;, }, CompilerInput, getInput, (, ), {, return]
[;, }, CompilerInput, getInput, (, ), {, return, input, ;, }, @, Override, public, StaticSourceFile, getSourceFile, (, ), {, return]
[;, }, CompilerInput, getInput, (, ), {, return, input, ;, }, @, Override, public, StaticSourceFile, getSourceFile, (, ), {, return]
[(, ), {, return, nameNode, ., getStaticSourceFile, (, ), ;, }, @, Override, public, Var, getSymbol, (, ), {, return]
[Override, public, Var, getSymbol, (, ), {, return, this, ;, }, @, Override, public, Var, getDeclaration, (, ), {, return]
[Override, public, Var, getSymbol, (, ), {, return, this, ;, }, @, Override, public, Var, getDeclaration, (, ), {, return]
[Override, public, Var, getSymbol, (, ), {, return, this, ;, }, @, Override, public, Var, getDeclaration, (, ), {, return]
[Var, getSymbol, (, ), {, return, this, ;, }, @, Override, public, Var, getDeclaration, (, ), {, return, nameNode, ==]
[(, ), {, return, this, ;, }, @, Override, public, Var, getDeclaration, (, ), {, return, nameNode, ==, null, ?]
[{, return, this, ;, }, @, Override, public, Var, getDeclaration, (, ), {, return, nameNode, ==, null, ?, null, :]
[(, ), {, return, nameNode, ==, null, ?, null, :, this, ;, }, public, Node, getParentNode, (, ), {, return]
[(, ), {, return, nameNode, ==, null, ?, null, :, this, ;, }, public, Node, getParentNode, (, ), {, return]
[(, ), {, return, nameNode, ==, null, ?, null, :, this, ;, }, public, Node, getParentNode, (, ), {, return]
[{, return, nameNode, ==, null, ?, null, :, this, ;, }, public, Node, getParentNode, (, ), {, return, nameNode, ==]
[nameNode, ==, null, ?, null, :, this, ;, }, public, Node, getParentNode, (, ), {, return, nameNode, ==, null, ?]
[null, ?, null, :, this, ;, }, public, Node, getParentNode, (, ), {, return, nameNode, ==, null, ?, null, :]
[null, ?, null, :, this, ;, }, public, Node, getParentNode, (, ), {, return, nameNode, ==, null, ?, null, :]
[nameNode, ==, null, ?, null, :, nameNode, ., getParent, (, ), ;, }, public, boolean, isBleedingFunction, (, ), {, return]
[nameNode, ==, null, ?, null, :, nameNode, ., getParent, (, ), ;, }, public, boolean, isBleedingFunction, (, ), {, return]
[null, :, nameNode, ., getParent, (, ), ;, }, public, boolean, isBleedingFunction, (, ), {, return, NodeUtil, ., isFunctionExpression, (]
[(, ), {, return, NodeUtil, ., isFunctionExpression, (, getParentNode, (, ), ), ;, }, Scope, getScope, (, ), {, return]
[), ), ;, }, Scope, getScope, (, ), {, return, scope, ;, }, public, boolean, isGlobal, (, ), {, return]
[), ), ;, }, Scope, getScope, (, ), {, return, scope, ;, }, public, boolean, isGlobal, (, ), {, return]
[boolean, isGlobal, (, ), {, return, scope, ., isGlobal, (, ), ;, }, public, boolean, isLocal, (, ), {, return]
[boolean, isGlobal, (, ), {, return, scope, ., isGlobal, (, ), ;, }, public, boolean, isLocal, (, ), {, return]
[public, boolean, isLocal, (, ), {, return, scope, ., isLocal, (, ), ;, }, boolean, isExtern, (, ), {, return]
[public, boolean, isLocal, (, ), {, return, scope, ., isLocal, (, ), ;, }, boolean, isExtern, (, ), {, return]
[public, boolean, isLocal, (, ), {, return, scope, ., isLocal, (, ), ;, }, boolean, isExtern, (, ), {, return]
[isLocal, (, ), {, return, scope, ., isLocal, (, ), ;, }, boolean, isExtern, (, ), {, return, input, ==]
[), {, return, scope, ., isLocal, (, ), ;, }, boolean, isExtern, (, ), {, return, input, ==, null, ||]
[), {, return, scope, ., isLocal, (, ), ;, }, boolean, isExtern, (, ), {, return, input, ==, null, ||]
[{, return, input, ==, null, ||, input, ., isExtern, (, ), ;, }, public, boolean, isConst, (, ), {, return]
[{, return, input, ==, null, ||, input, ., isExtern, (, ), ;, }, public, boolean, isConst, (, ), {, return]
[{, return, input, ==, null, ||, input, ., isExtern, (, ), ;, }, public, boolean, isConst, (, ), {, return]
[input, ==, null, ||, input, ., isExtern, (, ), ;, }, public, boolean, isConst, (, ), {, return, nameNode, !=]
[null, ||, input, ., isExtern, (, ), ;, }, public, boolean, isConst, (, ), {, return, nameNode, !=, null, &&]
[null, ||, input, ., isExtern, (, ), ;, }, public, boolean, isConst, (, ), {, return, nameNode, !=, null, &&]
[isExtern, (, ), ;, }, public, boolean, isConst, (, ), {, return, nameNode, !=, null, &&, NodeUtil, ., isConstantName, (]
[!=, null, &&, NodeUtil, ., isConstantName, (, nameNode, ), ;, }, public, boolean, isDefine, (, ), {, JSDocInfo, info, =]
[isConstantName, (, nameNode, ), ;, }, public, boolean, isDefine, (, ), {, JSDocInfo, info, =, getJSDocInfo, (, ), ;, return]
[isConstantName, (, nameNode, ), ;, }, public, boolean, isDefine, (, ), {, JSDocInfo, info, =, getJSDocInfo, (, ), ;, return]
[isConstantName, (, nameNode, ), ;, }, public, boolean, isDefine, (, ), {, JSDocInfo, info, =, getJSDocInfo, (, ), ;, return]
[nameNode, ), ;, }, public, boolean, isDefine, (, ), {, JSDocInfo, info, =, getJSDocInfo, (, ), ;, return, info, !=]
[;, }, public, boolean, isDefine, (, ), {, JSDocInfo, info, =, getJSDocInfo, (, ), ;, return, info, !=, null, &&]
[;, }, public, boolean, isDefine, (, ), {, JSDocInfo, info, =, getJSDocInfo, (, ), ;, return, info, !=, null, &&]
[;, return, info, !=, null, &&, info, ., isDefine, (, ), ;, }, public, Node, getInitialValue, (, ), {, return]
[;, return, info, !=, null, &&, info, ., isDefine, (, ), ;, }, public, Node, getInitialValue, (, ), {, return]
[null, &&, info, ., isDefine, (, ), ;, }, public, Node, getInitialValue, (, ), {, return, NodeUtil, ., getRValueOfLValue, (]
[), {, return, NodeUtil, ., getRValueOfLValue, (, nameNode, ), ;, }, @, Override, public, JSType, getType, (, ), {, return]
[}, @, Override, public, JSType, getType, (, ), {, return, type, ;, }, public, Node, getNameNode, (, ), {, return]
[}, public, Node, getNameNode, (, ), {, return, nameNode, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return]
[}, public, Node, getNameNode, (, ), {, return, nameNode, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return]
[}, public, Node, getNameNode, (, ), {, return, nameNode, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return]
[Node, getNameNode, (, ), {, return, nameNode, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, nameNode, ==]
[(, ), {, return, nameNode, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, nameNode, ==, null, ?]
[{, return, nameNode, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, nameNode, ==, null, ?, null, :]
[{, return, nameNode, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, nameNode, ==, null, ?, null, :]
[}, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, nameNode, ==, null, ?, null, :, NodeUtil, ., getBestJSDocInfo, (]
[==, null, ?, null, :, NodeUtil, ., getBestJSDocInfo, (, nameNode, ), ;, }, void, setType, (, JSType, type, ), {]
[==, null, ?, null, :, NodeUtil, ., getBestJSDocInfo, (, nameNode, ), ;, }, void, setType, (, JSType, type, ), {]
[:, NodeUtil, ., getBestJSDocInfo, (, nameNode, ), ;, }, void, setType, (, JSType, type, ), {, Preconditions, ., checkState, (]
[nameNode, ), ;, }, void, setType, (, JSType, type, ), {, Preconditions, ., checkState, (, isTypeInferred, (, ), ), ;]
[nameNode, ), ;, }, void, setType, (, JSType, type, ), {, Preconditions, ., checkState, (, isTypeInferred, (, ), ), ;]
[void, setType, (, JSType, type, ), {, Preconditions, ., checkState, (, isTypeInferred, (, ), ), ;, this, ., type, =]
[(, ), ), ;, this, ., type, =, type, ;, }, void, resolveType, (, ErrorReporter, errorReporter, ), {, if, (]
[(, ), ), ;, this, ., type, =, type, ;, }, void, resolveType, (, ErrorReporter, errorReporter, ), {, if, (]
[), ;, this, ., type, =, type, ;, }, void, resolveType, (, ErrorReporter, errorReporter, ), {, if, (, type, !=]
[., type, =, type, ;, }, void, resolveType, (, ErrorReporter, errorReporter, ), {, if, (, type, !=, null, ), {]
[=, type, ;, }, void, resolveType, (, ErrorReporter, errorReporter, ), {, if, (, type, !=, null, ), {, type, =]
[=, type, ;, }, void, resolveType, (, ErrorReporter, errorReporter, ), {, if, (, type, !=, null, ), {, type, =]
[void, resolveType, (, ErrorReporter, errorReporter, ), {, if, (, type, !=, null, ), {, type, =, type, ., resolve, (]
[(, ErrorReporter, errorReporter, ), {, if, (, type, !=, null, ), {, type, =, type, ., resolve, (, errorReporter, ,]
[type, ., resolve, (, errorReporter, ,, scope, ), ;, }, }, @, Override, public, boolean, isTypeInferred, (, ), {, return]
[@, Override, public, boolean, isTypeInferred, (, ), {, return, typeInferred, ;, }, public, String, getInputName, (, ), {, if, (]
[@, Override, public, boolean, isTypeInferred, (, ), {, return, typeInferred, ;, }, public, String, getInputName, (, ), {, if, (]
[public, boolean, isTypeInferred, (, ), {, return, typeInferred, ;, }, public, String, getInputName, (, ), {, if, (, input, ==]
[(, ), {, return, typeInferred, ;, }, public, String, getInputName, (, ), {, if, (, input, ==, null, ), return]
[typeInferred, ;, }, public, String, getInputName, (, ), {, if, (, input, ==, null, ), return, "<non-file>", ;, else, return]
[typeInferred, ;, }, public, String, getInputName, (, ), {, if, (, input, ==, null, ), return, "<non-file>", ;, else, return]
["<non-file>", ;, else, return, input, ., getName, (, ), ;, }, public, boolean, isNoShadow, (, ), {, JSDocInfo, info, =]
[., getName, (, ), ;, }, public, boolean, isNoShadow, (, ), {, JSDocInfo, info, =, getJSDocInfo, (, ), ;, return]
[., getName, (, ), ;, }, public, boolean, isNoShadow, (, ), {, JSDocInfo, info, =, getJSDocInfo, (, ), ;, return]
[., getName, (, ), ;, }, public, boolean, isNoShadow, (, ), {, JSDocInfo, info, =, getJSDocInfo, (, ), ;, return]
[(, ), ;, }, public, boolean, isNoShadow, (, ), {, JSDocInfo, info, =, getJSDocInfo, (, ), ;, return, info, !=]
[;, }, public, boolean, isNoShadow, (, ), {, JSDocInfo, info, =, getJSDocInfo, (, ), ;, return, info, !=, null, &&]
[;, }, public, boolean, isNoShadow, (, ), {, JSDocInfo, info, =, getJSDocInfo, (, ), ;, return, info, !=, null, &&]
[&&, info, ., isNoShadow, (, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[info, ., isNoShadow, (, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, !]
[., isNoShadow, (, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, !, (]
[., isNoShadow, (, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, !, (]
[Override, public, boolean, equals, (, Object, other, ), {, if, (, !, (, other, instanceof, Var, ), ), {, return]
[other, ), {, if, (, !, (, other, instanceof, Var, ), ), {, return, false, ;, }, Var, otherVar, =]
[if, (, !, (, other, instanceof, Var, ), ), {, return, false, ;, }, Var, otherVar, =, (, Var, )]
[(, other, instanceof, Var, ), ), {, return, false, ;, }, Var, otherVar, =, (, Var, ), other, ;, return]
[(, other, instanceof, Var, ), ), {, return, false, ;, }, Var, otherVar, =, (, Var, ), other, ;, return]
[(, other, instanceof, Var, ), ), {, return, false, ;, }, Var, otherVar, =, (, Var, ), other, ;, return]
[), ), {, return, false, ;, }, Var, otherVar, =, (, Var, ), other, ;, return, otherVar, ., nameNode, ==]
[), other, ;, return, otherVar, ., nameNode, ==, nameNode, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[), other, ;, return, otherVar, ., nameNode, ==, nameNode, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, ), {, return, nameNode, ., hashCode, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[(, ), {, return, nameNode, ., hashCode, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[(, ), {, return, nameNode, ., hashCode, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[(, ), {, return, nameNode, ., hashCode, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[(, ), {, return, nameNode, ., hashCode, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[{, return, nameNode, ., hashCode, (, ), ;, }, @, Override, public, String, toString, (, ), {, return, "Scope.Var ", +]
[nameNode, ., hashCode, (, ), ;, }, @, Override, public, String, toString, (, ), {, return, "Scope.Var ", +, name, +]
[hashCode, (, ), ;, }, @, Override, public, String, toString, (, ), {, return, "Scope.Var ", +, name, +, "{", +]
[), ;, }, @, Override, public, String, toString, (, ), {, return, "Scope.Var ", +, name, +, "{", +, type, +]
[(, ), {, return, "Scope.Var ", +, name, +, "{", +, type, +, "}", ;, }, void, markEscaped, (, ), {]
[{, return, "Scope.Var ", +, name, +, "{", +, type, +, "}", ;, }, void, markEscaped, (, ), {, markedEscaped, =]
[+, "}", ;, }, void, markEscaped, (, ), {, markedEscaped, =, true, ;, }, boolean, isMarkedEscaped, (, ), {, return]
[{, markedEscaped, =, true, ;, }, boolean, isMarkedEscaped, (, ), {, return, markedEscaped, ;, }, void, markAssignedExactlyOnce, (, ), {]
[=, true, ;, }, boolean, isMarkedEscaped, (, ), {, return, markedEscaped, ;, }, void, markAssignedExactlyOnce, (, ), {, markedAssignedExactlyOnce, =]
[return, markedEscaped, ;, }, void, markAssignedExactlyOnce, (, ), {, markedAssignedExactlyOnce, =, true, ;, }, boolean, isMarkedAssignedExactlyOnce, (, ), {, return]
[return, markedAssignedExactlyOnce, ;, }, }, public, static, class, Arguments, extends, Var, {, Arguments, (, Scope, scope, ), {, super, (]
[;, }, }, public, static, class, Arguments, extends, Var, {, Arguments, (, Scope, scope, ), {, super, (, false, ,]
[}, public, static, class, Arguments, extends, Var, {, Arguments, (, Scope, scope, ), {, super, (, false, ,, "arguments", ,]
[static, class, Arguments, extends, Var, {, Arguments, (, Scope, scope, ), {, super, (, false, ,, "arguments", ,, null, ,]
[Arguments, extends, Var, {, Arguments, (, Scope, scope, ), {, super, (, false, ,, "arguments", ,, null, ,, null, ,]
[Var, {, Arguments, (, Scope, scope, ), {, super, (, false, ,, "arguments", ,, null, ,, null, ,, scope, ,]
[{, Arguments, (, Scope, scope, ), {, super, (, false, ,, "arguments", ,, null, ,, null, ,, scope, ,, -]
[(, Scope, scope, ), {, super, (, false, ,, "arguments", ,, null, ,, null, ,, scope, ,, -, 1, ,]
[,, -, 1, ,, null, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[-, 1, ,, null, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, !]
[1, ,, null, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, !, (]
[1, ,, null, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, !, (]
[Override, public, boolean, equals, (, Object, other, ), {, if, (, !, (, other, instanceof, Arguments, ), ), {, return]
[other, ), {, if, (, !, (, other, instanceof, Arguments, ), ), {, return, false, ;, }, Arguments, otherVar, =]
[if, (, !, (, other, instanceof, Arguments, ), ), {, return, false, ;, }, Arguments, otherVar, =, (, Arguments, )]
[(, other, instanceof, Arguments, ), ), {, return, false, ;, }, Arguments, otherVar, =, (, Arguments, ), other, ;, return]
[(, other, instanceof, Arguments, ), ), {, return, false, ;, }, Arguments, otherVar, =, (, Arguments, ), other, ;, return]
[(, other, instanceof, Arguments, ), ), {, return, false, ;, }, Arguments, otherVar, =, (, Arguments, ), other, ;, return]
[(, other, instanceof, Arguments, ), ), {, return, false, ;, }, Arguments, otherVar, =, (, Arguments, ), other, ;, return]
[false, ;, }, Arguments, otherVar, =, (, Arguments, ), other, ;, return, otherVar, ., scope, ., getRootNode, (, ), ==]
[false, ;, }, Arguments, otherVar, =, (, Arguments, ), other, ;, return, otherVar, ., scope, ., getRootNode, (, ), ==]
[getRootNode, (, ), ==, scope, ., getRootNode, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[getRootNode, (, ), ==, scope, ., getRootNode, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[scope, ., getRootNode, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, System, ., identityHashCode, (]
[{, return, System, ., identityHashCode, (, this, ), ;, }, }, Scope, (, Scope, parent, ,, Node, rootNode, ), {]
[{, return, System, ., identityHashCode, (, this, ), ;, }, }, Scope, (, Scope, parent, ,, Node, rootNode, ), {]
[identityHashCode, (, this, ), ;, }, }, Scope, (, Scope, parent, ,, Node, rootNode, ), {, Preconditions, ., checkNotNull, (]
[), ;, }, }, Scope, (, Scope, parent, ,, Node, rootNode, ), {, Preconditions, ., checkNotNull, (, parent, ), ;]
[), ;, }, }, Scope, (, Scope, parent, ,, Node, rootNode, ), {, Preconditions, ., checkNotNull, (, parent, ), ;]
[Scope, (, Scope, parent, ,, Node, rootNode, ), {, Preconditions, ., checkNotNull, (, parent, ), ;, Preconditions, ., checkArgument, (]
[Scope, (, Scope, parent, ,, Node, rootNode, ), {, Preconditions, ., checkNotNull, (, parent, ), ;, Preconditions, ., checkArgument, (]
[Scope, parent, ,, Node, rootNode, ), {, Preconditions, ., checkNotNull, (, parent, ), ;, Preconditions, ., checkArgument, (, rootNode, !=]
[Scope, parent, ,, Node, rootNode, ), {, Preconditions, ., checkNotNull, (, parent, ), ;, Preconditions, ., checkArgument, (, rootNode, !=]
[), {, Preconditions, ., checkNotNull, (, parent, ), ;, Preconditions, ., checkArgument, (, rootNode, !=, parent, ., rootNode, ), ;]
[), {, Preconditions, ., checkNotNull, (, parent, ), ;, Preconditions, ., checkArgument, (, rootNode, !=, parent, ., rootNode, ), ;]
[checkNotNull, (, parent, ), ;, Preconditions, ., checkArgument, (, rootNode, !=, parent, ., rootNode, ), ;, this, ., parent, =]
[parent, ), ;, Preconditions, ., checkArgument, (, rootNode, !=, parent, ., rootNode, ), ;, this, ., parent, =, parent, ;]
[parent, ), ;, Preconditions, ., checkArgument, (, rootNode, !=, parent, ., rootNode, ), ;, this, ., parent, =, parent, ;]
[., checkArgument, (, rootNode, !=, parent, ., rootNode, ), ;, this, ., parent, =, parent, ;, this, ., rootNode, =]
[(, rootNode, !=, parent, ., rootNode, ), ;, this, ., parent, =, parent, ;, this, ., rootNode, =, rootNode, ;]
[(, rootNode, !=, parent, ., rootNode, ), ;, this, ., parent, =, parent, ;, this, ., rootNode, =, rootNode, ;]
[., rootNode, ), ;, this, ., parent, =, parent, ;, this, ., rootNode, =, rootNode, ;, this, ., isBottom, =]
[), ;, this, ., parent, =, parent, ;, this, ., rootNode, =, rootNode, ;, this, ., isBottom, =, false, ;]
[), ;, this, ., parent, =, parent, ;, this, ., rootNode, =, rootNode, ;, this, ., isBottom, =, false, ;]
[parent, =, parent, ;, this, ., rootNode, =, rootNode, ;, this, ., isBottom, =, false, ;, this, ., depth, =]
[parent, =, parent, ;, this, ., rootNode, =, rootNode, ;, this, ., isBottom, =, false, ;, this, ., depth, =]
[parent, =, parent, ;, this, ., rootNode, =, rootNode, ;, this, ., isBottom, =, false, ;, this, ., depth, =]
[this, ., rootNode, =, rootNode, ;, this, ., isBottom, =, false, ;, this, ., depth, =, parent, ., depth, +]
[., depth, =, parent, ., depth, +, 1, ;, }, private, Scope, (, Node, rootNode, ,, boolean, isBottom, ), {]
[., depth, =, parent, ., depth, +, 1, ;, }, private, Scope, (, Node, rootNode, ,, boolean, isBottom, ), {]
[., depth, +, 1, ;, }, private, Scope, (, Node, rootNode, ,, boolean, isBottom, ), {, this, ., parent, =]
[+, 1, ;, }, private, Scope, (, Node, rootNode, ,, boolean, isBottom, ), {, this, ., parent, =, null, ;]
[+, 1, ;, }, private, Scope, (, Node, rootNode, ,, boolean, isBottom, ), {, this, ., parent, =, null, ;]
[private, Scope, (, Node, rootNode, ,, boolean, isBottom, ), {, this, ., parent, =, null, ;, this, ., rootNode, =]
[(, Node, rootNode, ,, boolean, isBottom, ), {, this, ., parent, =, null, ;, this, ., rootNode, =, rootNode, ;]
[(, Node, rootNode, ,, boolean, isBottom, ), {, this, ., parent, =, null, ;, this, ., rootNode, =, rootNode, ;]
[boolean, isBottom, ), {, this, ., parent, =, null, ;, this, ., rootNode, =, rootNode, ;, this, ., isBottom, =]
[), {, this, ., parent, =, null, ;, this, ., rootNode, =, rootNode, ;, this, ., isBottom, =, isBottom, ;]
[), {, this, ., parent, =, null, ;, this, ., rootNode, =, rootNode, ;, this, ., isBottom, =, isBottom, ;]
[parent, =, null, ;, this, ., rootNode, =, rootNode, ;, this, ., isBottom, =, isBottom, ;, this, ., depth, =]
[isBottom, =, isBottom, ;, this, ., depth, =, 0, ;, }, static, Scope, createGlobalScope, (, Node, rootNode, ), {, return]
[;, this, ., depth, =, 0, ;, }, static, Scope, createGlobalScope, (, Node, rootNode, ), {, return, new, Scope, (]
[., depth, =, 0, ;, }, static, Scope, createGlobalScope, (, Node, rootNode, ), {, return, new, Scope, (, rootNode, ,]
[{, return, new, Scope, (, rootNode, ,, false, ), ;, }, static, Scope, createLatticeBottom, (, Node, rootNode, ), {, return]
[Scope, (, rootNode, ,, false, ), ;, }, static, Scope, createLatticeBottom, (, Node, rootNode, ), {, return, new, Scope, (]
[rootNode, ,, false, ), ;, }, static, Scope, createLatticeBottom, (, Node, rootNode, ), {, return, new, Scope, (, rootNode, ,]
[Node, rootNode, ), {, return, new, Scope, (, rootNode, ,, true, ), ;, }, int, getDepth, (, ), {, return]
[,, true, ), ;, }, int, getDepth, (, ), {, return, depth, ;, }, boolean, isBottom, (, ), {, return]
[;, }, boolean, isBottom, (, ), {, return, isBottom, ;, }, @, Override, public, Node, getRootNode, (, ), {, return]
[}, @, Override, public, Node, getRootNode, (, ), {, return, rootNode, ;, }, public, Scope, getParent, (, ), {, return]
[;, }, public, Scope, getParent, (, ), {, return, parent, ;, }, Scope, getGlobalScope, (, ), {, Scope, result, =]
[getParent, (, ), {, return, parent, ;, }, Scope, getGlobalScope, (, ), {, Scope, result, =, this, ;, while, (]
[getParent, (, ), {, return, parent, ;, }, Scope, getGlobalScope, (, ), {, Scope, result, =, this, ;, while, (]
[getParent, (, ), {, return, parent, ;, }, Scope, getGlobalScope, (, ), {, Scope, result, =, this, ;, while, (]
[;, }, Scope, getGlobalScope, (, ), {, Scope, result, =, this, ;, while, (, result, ., getParent, (, ), !=]
[getGlobalScope, (, ), {, Scope, result, =, this, ;, while, (, result, ., getParent, (, ), !=, null, ), {]
[), {, Scope, result, =, this, ;, while, (, result, ., getParent, (, ), !=, null, ), {, result, =]
[), {, Scope, result, =, this, ;, while, (, result, ., getParent, (, ), !=, null, ), {, result, =]
[(, result, ., getParent, (, ), !=, null, ), {, result, =, result, ., getParent, (, ), ;, }, return]
[(, ), ;, }, return, result, ;, }, @, Override, public, StaticScope, <, JSType, >, getParentScope, (, ), {, return]
[JSType, >, getParentScope, (, ), {, return, parent, ;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, if, (]
[return, parent, ;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, if, (, isGlobal, (, ), ), {, return]
[return, parent, ;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, if, (, isGlobal, (, ), ), {, return]
[@, Override, public, JSType, getTypeOfThis, (, ), {, if, (, isGlobal, (, ), ), {, return, ObjectType, ., cast, (]
[@, Override, public, JSType, getTypeOfThis, (, ), {, if, (, isGlobal, (, ), ), {, return, ObjectType, ., cast, (]
[if, (, isGlobal, (, ), ), {, return, ObjectType, ., cast, (, rootNode, ., getJSType, (, ), ), ;, }]
[if, (, isGlobal, (, ), ), {, return, ObjectType, ., cast, (, rootNode, ., getJSType, (, ), ), ;, }]
[), ), {, return, ObjectType, ., cast, (, rootNode, ., getJSType, (, ), ), ;, }, Preconditions, ., checkState, (]
[), ), {, return, ObjectType, ., cast, (, rootNode, ., getJSType, (, ), ), ;, }, Preconditions, ., checkState, (]
[getJSType, (, ), ), ;, }, Preconditions, ., checkState, (, rootNode, ., isFunction, (, ), ), ;, JSType, nodeType, =]
[getJSType, (, ), ), ;, }, Preconditions, ., checkState, (, rootNode, ., isFunction, (, ), ), ;, JSType, nodeType, =]
[checkState, (, rootNode, ., isFunction, (, ), ), ;, JSType, nodeType, =, rootNode, ., getJSType, (, ), ;, if, (]
[checkState, (, rootNode, ., isFunction, (, ), ), ;, JSType, nodeType, =, rootNode, ., getJSType, (, ), ;, if, (]
[checkState, (, rootNode, ., isFunction, (, ), ), ;, JSType, nodeType, =, rootNode, ., getJSType, (, ), ;, if, (]
[rootNode, ., isFunction, (, ), ), ;, JSType, nodeType, =, rootNode, ., getJSType, (, ), ;, if, (, nodeType, !=]
[isFunction, (, ), ), ;, JSType, nodeType, =, rootNode, ., getJSType, (, ), ;, if, (, nodeType, !=, null, &&]
[isFunction, (, ), ), ;, JSType, nodeType, =, rootNode, ., getJSType, (, ), ;, if, (, nodeType, !=, null, &&]
[rootNode, ., getJSType, (, ), ;, if, (, nodeType, !=, null, &&, nodeType, ., isFunctionType, (, ), ), {, return]
[rootNode, ., getJSType, (, ), ;, if, (, nodeType, !=, null, &&, nodeType, ., isFunctionType, (, ), ), {, return]
[rootNode, ., getJSType, (, ), ;, if, (, nodeType, !=, null, &&, nodeType, ., isFunctionType, (, ), ), {, return]
[isFunctionType, (, ), ), {, return, nodeType, ., toMaybeFunctionType, (, ), ., getTypeOfThis, (, ), ;, }, else, {, return]
[isFunctionType, (, ), ), {, return, nodeType, ., toMaybeFunctionType, (, ), ., getTypeOfThis, (, ), ;, }, else, {, return]
[;, }, }, Var, declare, (, String, name, ,, Node, nameNode, ,, JSType, type, ,, CompilerInput, input, ), {, return]
[}, Var, declare, (, String, name, ,, Node, nameNode, ,, JSType, type, ,, CompilerInput, input, ), {, return, declare, (]
[declare, (, String, name, ,, Node, nameNode, ,, JSType, type, ,, CompilerInput, input, ), {, return, declare, (, name, ,]
[String, name, ,, Node, nameNode, ,, JSType, type, ,, CompilerInput, input, ), {, return, declare, (, name, ,, nameNode, ,]
[,, Node, nameNode, ,, JSType, type, ,, CompilerInput, input, ), {, return, declare, (, name, ,, nameNode, ,, type, ,]
[nameNode, ,, JSType, type, ,, CompilerInput, input, ), {, return, declare, (, name, ,, nameNode, ,, type, ,, input, ,]
[}, Var, declare, (, String, name, ,, Node, nameNode, ,, JSType, type, ,, CompilerInput, input, ,, boolean, inferred, ), {]
[}, Var, declare, (, String, name, ,, Node, nameNode, ,, JSType, type, ,, CompilerInput, input, ,, boolean, inferred, ), {]
[String, name, ,, Node, nameNode, ,, JSType, type, ,, CompilerInput, input, ,, boolean, inferred, ), {, Preconditions, ., checkState, (]
[String, name, ,, Node, nameNode, ,, JSType, type, ,, CompilerInput, input, ,, boolean, inferred, ), {, Preconditions, ., checkState, (]
[String, name, ,, Node, nameNode, ,, JSType, type, ,, CompilerInput, input, ,, boolean, inferred, ), {, Preconditions, ., checkState, (]
[,, Node, nameNode, ,, JSType, type, ,, CompilerInput, input, ,, boolean, inferred, ), {, Preconditions, ., checkState, (, name, !=]
[nameNode, ,, JSType, type, ,, CompilerInput, input, ,, boolean, inferred, ), {, Preconditions, ., checkState, (, name, !=, null, &&]
[nameNode, ,, JSType, type, ,, CompilerInput, input, ,, boolean, inferred, ), {, Preconditions, ., checkState, (, name, !=, null, &&]
[nameNode, ,, JSType, type, ,, CompilerInput, input, ,, boolean, inferred, ), {, Preconditions, ., checkState, (, name, !=, null, &&]
[input, ,, boolean, inferred, ), {, Preconditions, ., checkState, (, name, !=, null, &&, name, ., length, (, ), >]
[inferred, ), {, Preconditions, ., checkState, (, name, !=, null, &&, name, ., length, (, ), >, 0, ), ;]
[inferred, ), {, Preconditions, ., checkState, (, name, !=, null, &&, name, ., length, (, ), >, 0, ), ;]
[., checkState, (, name, !=, null, &&, name, ., length, (, ), >, 0, ), ;, Preconditions, ., checkState, (]
[., checkState, (, name, !=, null, &&, name, ., length, (, ), >, 0, ), ;, Preconditions, ., checkState, (]
[., checkState, (, name, !=, null, &&, name, ., length, (, ), >, 0, ), ;, Preconditions, ., checkState, (]
[!=, null, &&, name, ., length, (, ), >, 0, ), ;, Preconditions, ., checkState, (, vars, ., get, (]
[name, ., length, (, ), >, 0, ), ;, Preconditions, ., checkState, (, vars, ., get, (, name, ), ==]
[0, ), ;, Preconditions, ., checkState, (, vars, ., get, (, name, ), ==, null, ), ;, Var, var, =]
[Preconditions, ., checkState, (, vars, ., get, (, name, ), ==, null, ), ;, Var, var, =, new, Var, (]
[checkState, (, vars, ., get, (, name, ), ==, null, ), ;, Var, var, =, new, Var, (, inferred, ,]
[vars, ., get, (, name, ), ==, null, ), ;, Var, var, =, new, Var, (, inferred, ,, name, ,]
[get, (, name, ), ==, null, ), ;, Var, var, =, new, Var, (, inferred, ,, name, ,, nameNode, ,]
[name, ), ==, null, ), ;, Var, var, =, new, Var, (, inferred, ,, name, ,, nameNode, ,, type, ,]
[==, null, ), ;, Var, var, =, new, Var, (, inferred, ,, name, ,, nameNode, ,, type, ,, this, ,]
[==, null, ), ;, Var, var, =, new, Var, (, inferred, ,, name, ,, nameNode, ,, type, ,, this, ,]
[=, new, Var, (, inferred, ,, name, ,, nameNode, ,, type, ,, this, ,, vars, ., size, (, ), ,]
[(, inferred, ,, name, ,, nameNode, ,, type, ,, this, ,, vars, ., size, (, ), ,, input, ), ;]
[(, inferred, ,, name, ,, nameNode, ,, type, ,, this, ,, vars, ., size, (, ), ,, input, ), ;]
[,, nameNode, ,, type, ,, this, ,, vars, ., size, (, ), ,, input, ), ;, vars, ., put, (]
[,, type, ,, this, ,, vars, ., size, (, ), ,, input, ), ;, vars, ., put, (, name, ,]
[,, vars, ., size, (, ), ,, input, ), ;, vars, ., put, (, name, ,, var, ), ;, return]
[vars, ., put, (, name, ,, var, ), ;, return, var, ;, }, void, undeclare, (, Var, var, ), {]
[vars, ., put, (, name, ,, var, ), ;, return, var, ;, }, void, undeclare, (, Var, var, ), {]
[name, ,, var, ), ;, return, var, ;, }, void, undeclare, (, Var, var, ), {, Preconditions, ., checkState, (]
[name, ,, var, ), ;, return, var, ;, }, void, undeclare, (, Var, var, ), {, Preconditions, ., checkState, (]
[name, ,, var, ), ;, return, var, ;, }, void, undeclare, (, Var, var, ), {, Preconditions, ., checkState, (]
[;, return, var, ;, }, void, undeclare, (, Var, var, ), {, Preconditions, ., checkState, (, var, ., scope, ==]
[;, }, void, undeclare, (, Var, var, ), {, Preconditions, ., checkState, (, var, ., scope, ==, this, ), ;]
[;, }, void, undeclare, (, Var, var, ), {, Preconditions, ., checkState, (, var, ., scope, ==, this, ), ;]
[(, Var, var, ), {, Preconditions, ., checkState, (, var, ., scope, ==, this, ), ;, Preconditions, ., checkState, (]
[(, Var, var, ), {, Preconditions, ., checkState, (, var, ., scope, ==, this, ), ;, Preconditions, ., checkState, (]
[(, Var, var, ), {, Preconditions, ., checkState, (, var, ., scope, ==, this, ), ;, Preconditions, ., checkState, (]
[{, Preconditions, ., checkState, (, var, ., scope, ==, this, ), ;, Preconditions, ., checkState, (, vars, ., get, (]
[{, Preconditions, ., checkState, (, var, ., scope, ==, this, ), ;, Preconditions, ., checkState, (, vars, ., get, (]
[var, ., scope, ==, this, ), ;, Preconditions, ., checkState, (, vars, ., get, (, var, ., name, ), ==]
[==, this, ), ;, Preconditions, ., checkState, (, vars, ., get, (, var, ., name, ), ==, var, ), ;]
[==, this, ), ;, Preconditions, ., checkState, (, vars, ., get, (, var, ., name, ), ==, var, ), ;]
[Preconditions, ., checkState, (, vars, ., get, (, var, ., name, ), ==, var, ), ;, vars, ., remove, (]
[Preconditions, ., checkState, (, vars, ., get, (, var, ., name, ), ==, var, ), ;, vars, ., remove, (]
[., remove, (, var, ., name, ), ;, }, @, Override, public, Var, getSlot, (, String, name, ), {, return]
[(, var, ., name, ), ;, }, @, Override, public, Var, getSlot, (, String, name, ), {, return, getVar, (]
[), {, return, getVar, (, name, ), ;, }, @, Override, public, Var, getOwnSlot, (, String, name, ), {, return]
[), {, return, getVar, (, name, ), ;, }, @, Override, public, Var, getOwnSlot, (, String, name, ), {, return]
[(, name, ), ;, }, @, Override, public, Var, getOwnSlot, (, String, name, ), {, return, vars, ., get, (]
[return, vars, ., get, (, name, ), ;, }, public, Var, getVar, (, String, name, ), {, Var, var, =]
[return, vars, ., get, (, name, ), ;, }, public, Var, getVar, (, String, name, ), {, Var, var, =]
[(, name, ), ;, }, public, Var, getVar, (, String, name, ), {, Var, var, =, vars, ., get, (]
[public, Var, getVar, (, String, name, ), {, Var, var, =, vars, ., get, (, name, ), ;, if, (]
[public, Var, getVar, (, String, name, ), {, Var, var, =, vars, ., get, (, name, ), ;, if, (]
[getVar, (, String, name, ), {, Var, var, =, vars, ., get, (, name, ), ;, if, (, var, !=]
[), {, Var, var, =, vars, ., get, (, name, ), ;, if, (, var, !=, null, ), {, return]
[., get, (, name, ), ;, if, (, var, !=, null, ), {, return, var, ;, }, else, if, (]
[., get, (, name, ), ;, if, (, var, !=, null, ), {, return, var, ;, }, else, if, (]
[(, name, ), ;, if, (, var, !=, null, ), {, return, var, ;, }, else, if, (, parent, !=]
[if, (, var, !=, null, ), {, return, var, ;, }, else, if, (, parent, !=, null, ), {, return]
[if, (, var, !=, null, ), {, return, var, ;, }, else, if, (, parent, !=, null, ), {, return]
[null, ), {, return, var, ;, }, else, if, (, parent, !=, null, ), {, return, parent, ., getVar, (]
[else, if, (, parent, !=, null, ), {, return, parent, ., getVar, (, name, ), ;, }, else, {, return]
[(, name, ), ;, }, else, {, return, null, ;, }, }, public, Var, getArgumentsVar, (, ), {, if, (]
[(, name, ), ;, }, else, {, return, null, ;, }, }, public, Var, getArgumentsVar, (, ), {, if, (]
[), ;, }, else, {, return, null, ;, }, }, public, Var, getArgumentsVar, (, ), {, if, (, arguments, ==]
[else, {, return, null, ;, }, }, public, Var, getArgumentsVar, (, ), {, if, (, arguments, ==, null, ), {]
[return, null, ;, }, }, public, Var, getArgumentsVar, (, ), {, if, (, arguments, ==, null, ), {, arguments, =]
[}, }, public, Var, getArgumentsVar, (, ), {, if, (, arguments, ==, null, ), {, arguments, =, new, Arguments, (]
[(, ), {, if, (, arguments, ==, null, ), {, arguments, =, new, Arguments, (, this, ), ;, }, return]
[;, }, return, arguments, ;, }, public, boolean, isDeclared, (, String, name, ,, boolean, recurse, ), {, Scope, scope, =]
[;, }, public, boolean, isDeclared, (, String, name, ,, boolean, recurse, ), {, Scope, scope, =, this, ;, if, (]
[;, }, public, boolean, isDeclared, (, String, name, ,, boolean, recurse, ), {, Scope, scope, =, this, ;, if, (]
[;, }, public, boolean, isDeclared, (, String, name, ,, boolean, recurse, ), {, Scope, scope, =, this, ;, if, (]
[String, name, ,, boolean, recurse, ), {, Scope, scope, =, this, ;, if, (, scope, ., vars, ., containsKey, (]
[recurse, ), {, Scope, scope, =, this, ;, if, (, scope, ., vars, ., containsKey, (, name, ), ), return]
[scope, =, this, ;, if, (, scope, ., vars, ., containsKey, (, name, ), ), return, true, ;, if, (]
[scope, =, this, ;, if, (, scope, ., vars, ., containsKey, (, name, ), ), return, true, ;, if, (]
[scope, =, this, ;, if, (, scope, ., vars, ., containsKey, (, name, ), ), return, true, ;, if, (]
[scope, =, this, ;, if, (, scope, ., vars, ., containsKey, (, name, ), ), return, true, ;, if, (]
[if, (, scope, ., vars, ., containsKey, (, name, ), ), return, true, ;, if, (, scope, ., parent, !=]
[scope, ., vars, ., containsKey, (, name, ), ), return, true, ;, if, (, scope, ., parent, !=, null, &&]
[containsKey, (, name, ), ), return, true, ;, if, (, scope, ., parent, !=, null, &&, recurse, ), {, return]
[containsKey, (, name, ), ), return, true, ;, if, (, scope, ., parent, !=, null, &&, recurse, ), {, return]
[containsKey, (, name, ), ), return, true, ;, if, (, scope, ., parent, !=, null, &&, recurse, ), {, return]
[true, ;, if, (, scope, ., parent, !=, null, &&, recurse, ), {, return, scope, ., parent, ., isDeclared, (]
[if, (, scope, ., parent, !=, null, &&, recurse, ), {, return, scope, ., parent, ., isDeclared, (, name, ,]
[!=, null, &&, recurse, ), {, return, scope, ., parent, ., isDeclared, (, name, ,, recurse, ), ;, }, return]
[name, ,, recurse, ), ;, }, return, false, ;, }, public, Iterator, <, Var, >, getVars, (, ), {, return]
[name, ,, recurse, ), ;, }, return, false, ;, }, public, Iterator, <, Var, >, getVars, (, ), {, return]
[name, ,, recurse, ), ;, }, return, false, ;, }, public, Iterator, <, Var, >, getVars, (, ), {, return]
[vars, ., values, (, ), ., iterator, (, ), ;, }, Iterable, <, Var, >, getVarIterable, (, ), {, return]
[vars, ., values, (, ), ., iterator, (, ), ;, }, Iterable, <, Var, >, getVarIterable, (, ), {, return]
[., values, (, ), ;, }, @, Override, public, Iterable, <, Var, >, getReferences, (, Var, var, ), {, return]
[., values, (, ), ;, }, @, Override, public, Iterable, <, Var, >, getReferences, (, Var, var, ), {, return]
[;, }, @, Override, public, Iterable, <, Var, >, getReferences, (, Var, var, ), {, return, ImmutableList, ., of, (]
[of, (, var, ), ;, }, @, Override, public, StaticScope, <, JSType, >, getScope, (, Var, var, ), {, return]
[of, (, var, ), ;, }, @, Override, public, StaticScope, <, JSType, >, getScope, (, Var, var, ), {, return]
[), {, return, var, ., scope, ;, }, @, Override, public, Iterable, <, Var, >, getAllSymbols, (, ), {, return]
[), {, return, var, ., scope, ;, }, @, Override, public, Iterable, <, Var, >, getAllSymbols, (, ), {, return]
[., scope, ;, }, @, Override, public, Iterable, <, Var, >, getAllSymbols, (, ), {, return, Collections, ., unmodifiableCollection, (]
[., scope, ;, }, @, Override, public, Iterable, <, Var, >, getAllSymbols, (, ), {, return, Collections, ., unmodifiableCollection, (]
[return, Collections, ., unmodifiableCollection, (, vars, ., values, (, ), ), ;, }, public, int, getVarCount, (, ), {, return]
[return, Collections, ., unmodifiableCollection, (, vars, ., values, (, ), ), ;, }, public, int, getVarCount, (, ), {, return]
[int, getVarCount, (, ), {, return, vars, ., size, (, ), ;, }, public, boolean, isGlobal, (, ), {, return]
[int, getVarCount, (, ), {, return, vars, ., size, (, ), ;, }, public, boolean, isGlobal, (, ), {, return]
[(, ), {, return, vars, ., size, (, ), ;, }, public, boolean, isGlobal, (, ), {, return, parent, ==]
[}, public, boolean, isGlobal, (, ), {, return, parent, ==, null, ;, }, public, boolean, isLocal, (, ), {, return]
[public, boolean, isGlobal, (, ), {, return, parent, ==, null, ;, }, public, boolean, isLocal, (, ), {, return, !]
[(, ), {, return, !, isGlobal, (, ), ;, }, public, Iterator, <, Var, >, getDeclarativelyUnboundVarsWithoutTypes, (, ), {, return]
[(, ), {, return, !, isGlobal, (, ), ;, }, public, Iterator, <, Var, >, getDeclarativelyUnboundVarsWithoutTypes, (, ), {, return]
[!, isGlobal, (, ), ;, }, public, Iterator, <, Var, >, getDeclarativelyUnboundVarsWithoutTypes, (, ), {, return, Iterators, ., filter, (]
[;, }, public, Iterator, <, Var, >, getDeclarativelyUnboundVarsWithoutTypes, (, ), {, return, Iterators, ., filter, (, getVars, (, ), ,]
