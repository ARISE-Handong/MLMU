[), ;, }, public, StorelessBivariateCovariance, (, final, boolean, biasCorrection, ), {, meanX, =, meanY, =, 0.0, ;, n, =, 0]
[=, meanY, =, 0.0, ;, n, =, 0, ;, covarianceNumerator, =, 0.0, ;, biasCorrected, =, biasCorrection, ;, }, public, void]
[=, 0.0, ;, n, =, 0, ;, covarianceNumerator, =, 0.0, ;, biasCorrected, =, biasCorrection, ;, }, public, void, increment, (]
[;, n, =, 0, ;, covarianceNumerator, =, 0.0, ;, biasCorrected, =, biasCorrection, ;, }, public, void, increment, (, final, double]
[=, 0, ;, covarianceNumerator, =, 0.0, ;, biasCorrected, =, biasCorrection, ;, }, public, void, increment, (, final, double, x, ,]
[;, covarianceNumerator, =, 0.0, ;, biasCorrected, =, biasCorrection, ;, }, public, void, increment, (, final, double, x, ,, final, double]
[=, 0.0, ;, biasCorrected, =, biasCorrection, ;, }, public, void, increment, (, final, double, x, ,, final, double, y, )]
[;, biasCorrected, =, biasCorrection, ;, }, public, void, increment, (, final, double, x, ,, final, double, y, ), {, n]
[=, biasCorrection, ;, }, public, void, increment, (, final, double, x, ,, final, double, y, ), {, n, ++, ;]
[;, }, public, void, increment, (, final, double, x, ,, final, double, y, ), {, n, ++, ;, final, double]
[;, final, double, deltaX, =, x, -, meanX, ;, final, double, deltaY, =, y, -, meanY, ;, meanX, +=, deltaX]
[++, ;, final, double, deltaX, =, x, -, meanX, ;, final, double, deltaY, =, y, -, meanY, ;, meanX, +=]
[;, final, double, deltaY, =, y, -, meanY, ;, meanX, +=, deltaX, /, n, ;, meanY, +=, deltaY, /, n]
[-, meanX, ;, final, double, deltaY, =, y, -, meanY, ;, meanX, +=, deltaX, /, n, ;, meanY, +=, deltaY]
[;, final, double, deltaY, =, y, -, meanY, ;, meanX, +=, deltaX, /, n, ;, meanY, +=, deltaY, /, n]
[;, meanX, +=, deltaX, /, n, ;, meanY, +=, deltaY, /, n, ;, covarianceNumerator, +=, (, (, n, -, 1.0]
[-, meanY, ;, meanX, +=, deltaX, /, n, ;, meanY, +=, deltaY, /, n, ;, covarianceNumerator, +=, (, (, n]
[;, meanX, +=, deltaX, /, n, ;, meanY, +=, deltaY, /, n, ;, covarianceNumerator, +=, (, (, n, -, 1.0]
[+=, deltaX, /, n, ;, meanY, +=, deltaY, /, n, ;, covarianceNumerator, +=, (, (, n, -, 1.0, ), /]
[;, meanY, +=, deltaY, /, n, ;, covarianceNumerator, +=, (, (, n, -, 1.0, ), /, n, ), *, deltaX]
[/, n, ;, meanY, +=, deltaY, /, n, ;, covarianceNumerator, +=, (, (, n, -, 1.0, ), /, n, )]
[;, meanY, +=, deltaY, /, n, ;, covarianceNumerator, +=, (, (, n, -, 1.0, ), /, n, ), *, deltaX]
[+=, deltaY, /, n, ;, covarianceNumerator, +=, (, (, n, -, 1.0, ), /, n, ), *, deltaX, *, deltaY]
[;, covarianceNumerator, +=, (, (, n, -, 1.0, ), /, n, ), *, deltaX, *, deltaY, ;, }, public, void]
[/, n, ;, covarianceNumerator, +=, (, (, n, -, 1.0, ), /, n, ), *, deltaX, *, deltaY, ;, }]
[;, covarianceNumerator, +=, (, (, n, -, 1.0, ), /, n, ), *, deltaX, *, deltaY, ;, }, public, void]
[+=, (, (, n, -, 1.0, ), /, n, ), *, deltaX, *, deltaY, ;, }, public, void, append, (]
[;, }, public, void, append, (, StorelessBivariateCovariance, cov, ), {, double, oldN, =, n, ;, n, +=, cov, ., n]
[*, deltaY, ;, }, public, void, append, (, StorelessBivariateCovariance, cov, ), {, double, oldN, =, n, ;, n, +=, cov]
[*, deltaX, *, deltaY, ;, }, public, void, append, (, StorelessBivariateCovariance, cov, ), {, double, oldN, =, n, ;, n]
[), *, deltaX, *, deltaY, ;, }, public, void, append, (, StorelessBivariateCovariance, cov, ), {, double, oldN, =, n, ;]
[/, n, ), *, deltaX, *, deltaY, ;, }, public, void, append, (, StorelessBivariateCovariance, cov, ), {, double, oldN, =]
[), /, n, ), *, deltaX, *, deltaY, ;, }, public, void, append, (, StorelessBivariateCovariance, cov, ), {, double, oldN]
[-, 1.0, ), /, n, ), *, deltaX, *, deltaY, ;, }, public, void, append, (, StorelessBivariateCovariance, cov, ), {]
[), /, n, ), *, deltaX, *, deltaY, ;, }, public, void, append, (, StorelessBivariateCovariance, cov, ), {, double, oldN]
[), *, deltaX, *, deltaY, ;, }, public, void, append, (, StorelessBivariateCovariance, cov, ), {, double, oldN, =, n, ;]
[*, deltaY, ;, }, public, void, append, (, StorelessBivariateCovariance, cov, ), {, double, oldN, =, n, ;, n, +=, cov]
[;, }, public, void, append, (, StorelessBivariateCovariance, cov, ), {, double, oldN, =, n, ;, n, +=, cov, ., n]
[;, n, +=, cov, ., n, ;, final, double, deltaX, =, cov, ., meanX, -, meanX, ;, final, double, deltaY]
[+=, cov, ., n, ;, final, double, deltaX, =, cov, ., meanX, -, meanX, ;, final, double, deltaY, =, cov]
[;, final, double, deltaX, =, cov, ., meanX, -, meanX, ;, final, double, deltaY, =, cov, ., meanY, -, meanY]
[., n, ;, final, double, deltaX, =, cov, ., meanX, -, meanX, ;, final, double, deltaY, =, cov, ., meanY]
[;, final, double, deltaY, =, cov, ., meanY, -, meanY, ;, meanX, +=, deltaX, *, cov, ., n, /, n]
[-, meanX, ;, final, double, deltaY, =, cov, ., meanY, -, meanY, ;, meanX, +=, deltaX, *, cov, ., n]
[., meanX, -, meanX, ;, final, double, deltaY, =, cov, ., meanY, -, meanY, ;, meanX, +=, deltaX, *, cov]
[;, final, double, deltaY, =, cov, ., meanY, -, meanY, ;, meanX, +=, deltaX, *, cov, ., n, /, n]
[;, meanX, +=, deltaX, *, cov, ., n, /, n, ;, meanY, +=, deltaY, *, cov, ., n, /, n]
[-, meanY, ;, meanX, +=, deltaX, *, cov, ., n, /, n, ;, meanY, +=, deltaY, *, cov, ., n]
[., meanY, -, meanY, ;, meanX, +=, deltaX, *, cov, ., n, /, n, ;, meanY, +=, deltaY, *, cov]
[;, meanX, +=, deltaX, *, cov, ., n, /, n, ;, meanY, +=, deltaY, *, cov, ., n, /, n]
[+=, deltaX, *, cov, ., n, /, n, ;, meanY, +=, deltaY, *, cov, ., n, /, n, ;, covarianceNumerator]
[;, meanY, +=, deltaY, *, cov, ., n, /, n, ;, covarianceNumerator, +=, cov, ., covarianceNumerator, +, oldN, *, cov]
[/, n, ;, meanY, +=, deltaY, *, cov, ., n, /, n, ;, covarianceNumerator, +=, cov, ., covarianceNumerator, +, oldN]
[*, cov, ., n, /, n, ;, meanY, +=, deltaY, *, cov, ., n, /, n, ;, covarianceNumerator, +=, cov]
[/, n, ;, meanY, +=, deltaY, *, cov, ., n, /, n, ;, covarianceNumerator, +=, cov, ., covarianceNumerator, +, oldN]
[., n, /, n, ;, meanY, +=, deltaY, *, cov, ., n, /, n, ;, covarianceNumerator, +=, cov, ., covarianceNumerator]
[;, meanY, +=, deltaY, *, cov, ., n, /, n, ;, covarianceNumerator, +=, cov, ., covarianceNumerator, +, oldN, *, cov]
[+=, deltaY, *, cov, ., n, /, n, ;, covarianceNumerator, +=, cov, ., covarianceNumerator, +, oldN, *, cov, ., n]
[;, covarianceNumerator, +=, cov, ., covarianceNumerator, +, oldN, *, cov, ., n, /, n, *, deltaX, *, deltaY, ;, }]
[/, n, ;, covarianceNumerator, +=, cov, ., covarianceNumerator, +, oldN, *, cov, ., n, /, n, *, deltaX, *, deltaY]
[*, cov, ., n, /, n, ;, covarianceNumerator, +=, cov, ., covarianceNumerator, +, oldN, *, cov, ., n, /, n]
[/, n, ;, covarianceNumerator, +=, cov, ., covarianceNumerator, +, oldN, *, cov, ., n, /, n, *, deltaX, *, deltaY]
[., n, /, n, ;, covarianceNumerator, +=, cov, ., covarianceNumerator, +, oldN, *, cov, ., n, /, n, *, deltaX]
[;, covarianceNumerator, +=, cov, ., covarianceNumerator, +, oldN, *, cov, ., n, /, n, *, deltaX, *, deltaY, ;, }]
[+=, cov, ., covarianceNumerator, +, oldN, *, cov, ., n, /, n, *, deltaX, *, deltaY, ;, }, public, double]
[;, }, public, double, getN, (, ), {, return, n, ;, }, public, double, getResult, (, ), throws, NumberIsTooSmallException, {]
[+, oldN, *, cov, ., n, /, n, *, deltaX, *, deltaY, ;, }, public, double, getN, (, ), {]
[., covarianceNumerator, +, oldN, *, cov, ., n, /, n, *, deltaX, *, deltaY, ;, }, public, double, getN, (]
[;, }, public, double, getN, (, ), {, return, n, ;, }, public, double, getResult, (, ), throws, NumberIsTooSmallException, {]
[*, deltaY, ;, }, public, double, getN, (, ), {, return, n, ;, }, public, double, getResult, (, ), throws]
[*, deltaX, *, deltaY, ;, }, public, double, getN, (, ), {, return, n, ;, }, public, double, getResult, (]
[/, n, *, deltaX, *, deltaY, ;, }, public, double, getN, (, ), {, return, n, ;, }, public, double]
[*, cov, ., n, /, n, *, deltaX, *, deltaY, ;, }, public, double, getN, (, ), {, return, n]
[/, n, *, deltaX, *, deltaY, ;, }, public, double, getN, (, ), {, return, n, ;, }, public, double]
[., n, /, n, *, deltaX, *, deltaY, ;, }, public, double, getN, (, ), {, return, n, ;, }]
[*, deltaX, *, deltaY, ;, }, public, double, getN, (, ), {, return, n, ;, }, public, double, getResult, (]
[*, deltaY, ;, }, public, double, getN, (, ), {, return, n, ;, }, public, double, getResult, (, ), throws]
[;, }, public, double, getN, (, ), {, return, n, ;, }, public, double, getResult, (, ), throws, NumberIsTooSmallException, {]
[;, }, public, double, getResult, (, ), throws, NumberIsTooSmallException, {, if, (, n, <, 2, ), {, throw, new, NumberIsTooSmallException]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INSUFFICIENT_DIMENSION, ,, n, ,, 2, ,, true, ), ;, }, if, (]
[<, 2, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INSUFFICIENT_DIMENSION, ,, n, ,, 2, ,, true, ), ;, }]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INSUFFICIENT_DIMENSION, ,, n, ,, 2, ,, true, ), ;, }, if, (]
[;, }, if, (, biasCorrected, ), {, return, covarianceNumerator, /, (, n, -, 1d, ), ;, }, else, {, return]
[,, n, ,, 2, ,, true, ), ;, }, if, (, biasCorrected, ), {, return, covarianceNumerator, /, (, n, -]
[., INSUFFICIENT_DIMENSION, ,, n, ,, 2, ,, true, ), ;, }, if, (, biasCorrected, ), {, return, covarianceNumerator, /, (]
[,, 2, ,, true, ), ;, }, if, (, biasCorrected, ), {, return, covarianceNumerator, /, (, n, -, 1d, )]
[,, true, ), ;, }, if, (, biasCorrected, ), {, return, covarianceNumerator, /, (, n, -, 1d, ), ;, }]
[), ;, }, if, (, biasCorrected, ), {, return, covarianceNumerator, /, (, n, -, 1d, ), ;, }, else, {]
[), {, return, covarianceNumerator, /, (, n, -, 1d, ), ;, }, else, {, return, covarianceNumerator, /, n, ;, }]
[;, }, else, {, return, covarianceNumerator, /, n, ;, }, }, }]
[/, (, n, -, 1d, ), ;, }, else, {, return, covarianceNumerator, /, n, ;, }, }, }]
[;, }, else, {, return, covarianceNumerator, /, n, ;, }, }, }]
[), ;, }, else, {, return, covarianceNumerator, /, n, ;, }, }, }]
[-, 1d, ), ;, }, else, {, return, covarianceNumerator, /, n, ;, }, }, }]
[), ;, }, else, {, return, covarianceNumerator, /, n, ;, }, }, }]
[;, }, }, }]
[/, n, ;, }, }, }]
[;, }, }, }]
