[., joda, ., time, ., IllegalFieldValueException, ;, public, final, class, SkipDateTimeField, extends, DelegatedDateTimeField, {, private, static, final, long, serialVersionUID, =]
[joda, ., time, ., IllegalFieldValueException, ;, public, final, class, SkipDateTimeField, extends, DelegatedDateTimeField, {, private, static, final, long, serialVersionUID, =, -]
[int, iSkip, ;, private, transient, int, iMinValue, ;, public, SkipDateTimeField, (, Chronology, chronology, ,, DateTimeField, field, ), {, this, (]
[;, private, transient, int, iMinValue, ;, public, SkipDateTimeField, (, Chronology, chronology, ,, DateTimeField, field, ), {, this, (, chronology, ,]
[transient, int, iMinValue, ;, public, SkipDateTimeField, (, Chronology, chronology, ,, DateTimeField, field, ), {, this, (, chronology, ,, field, ,]
[,, 0, ), ;, }, public, SkipDateTimeField, (, Chronology, chronology, ,, DateTimeField, field, ,, int, skip, ), {, super, (]
[;, }, public, SkipDateTimeField, (, Chronology, chronology, ,, DateTimeField, field, ,, int, skip, ), {, super, (, field, ), ;]
[public, SkipDateTimeField, (, Chronology, chronology, ,, DateTimeField, field, ,, int, skip, ), {, super, (, field, ), ;, iChronology, =]
[,, DateTimeField, field, ,, int, skip, ), {, super, (, field, ), ;, iChronology, =, chronology, ;, int, min, =]
[,, DateTimeField, field, ,, int, skip, ), {, super, (, field, ), ;, iChronology, =, chronology, ;, int, min, =]
[super, (, field, ), ;, iChronology, =, chronology, ;, int, min, =, super, ., getMinimumValue, (, ), ;, if, (]
[super, (, field, ), ;, iChronology, =, chronology, ;, int, min, =, super, ., getMinimumValue, (, ), ;, if, (]
[field, ), ;, iChronology, =, chronology, ;, int, min, =, super, ., getMinimumValue, (, ), ;, if, (, min, <]
[iChronology, =, chronology, ;, int, min, =, super, ., getMinimumValue, (, ), ;, if, (, min, <, skip, ), {]
[chronology, ;, int, min, =, super, ., getMinimumValue, (, ), ;, if, (, min, <, skip, ), {, iMinValue, =]
[chronology, ;, int, min, =, super, ., getMinimumValue, (, ), ;, if, (, min, <, skip, ), {, iMinValue, =]
[int, min, =, super, ., getMinimumValue, (, ), ;, if, (, min, <, skip, ), {, iMinValue, =, min, -]
[(, ), ;, if, (, min, <, skip, ), {, iMinValue, =, min, -, 1, ;, }, else, if, (]
[(, ), ;, if, (, min, <, skip, ), {, iMinValue, =, min, -, 1, ;, }, else, if, (]
[;, if, (, min, <, skip, ), {, iMinValue, =, min, -, 1, ;, }, else, if, (, min, ==]
[min, <, skip, ), {, iMinValue, =, min, -, 1, ;, }, else, if, (, min, ==, skip, ), {]
[skip, ), {, iMinValue, =, min, -, 1, ;, }, else, if, (, min, ==, skip, ), {, iMinValue, =]
[skip, ), {, iMinValue, =, min, -, 1, ;, }, else, if, (, min, ==, skip, ), {, iMinValue, =]
[{, iMinValue, =, min, -, 1, ;, }, else, if, (, min, ==, skip, ), {, iMinValue, =, skip, +]
[1, ;, }, else, if, (, min, ==, skip, ), {, iMinValue, =, skip, +, 1, ;, }, else, {]
[}, else, if, (, min, ==, skip, ), {, iMinValue, =, skip, +, 1, ;, }, else, {, iMinValue, =]
[(, min, ==, skip, ), {, iMinValue, =, skip, +, 1, ;, }, else, {, iMinValue, =, min, ;, }]
[==, skip, ), {, iMinValue, =, skip, +, 1, ;, }, else, {, iMinValue, =, min, ;, }, iSkip, =]
[=, min, ;, }, iSkip, =, skip, ;, }, public, int, get, (, long, millis, ), {, int, value, =]
[=, min, ;, }, iSkip, =, skip, ;, }, public, int, get, (, long, millis, ), {, int, value, =]
[iSkip, =, skip, ;, }, public, int, get, (, long, millis, ), {, int, value, =, super, ., get, (]
[public, int, get, (, long, millis, ), {, int, value, =, super, ., get, (, millis, ), ;, if, (]
[public, int, get, (, long, millis, ), {, int, value, =, super, ., get, (, millis, ), ;, if, (]
[get, (, long, millis, ), {, int, value, =, super, ., get, (, millis, ), ;, if, (, value, <=]
[millis, ), {, int, value, =, super, ., get, (, millis, ), ;, if, (, value, <=, iSkip, ), {]
[millis, ), {, int, value, =, super, ., get, (, millis, ), ;, if, (, value, <=, iSkip, ), {]
[=, super, ., get, (, millis, ), ;, if, (, value, <=, iSkip, ), {, value, --, ;, }, return]
[{, value, --, ;, }, return, value, ;, }, public, long, set, (, long, millis, ,, int, value, ), {]
[{, value, --, ;, }, return, value, ;, }, public, long, set, (, long, millis, ,, int, value, ), {]
[}, return, value, ;, }, public, long, set, (, long, millis, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (]
[value, ;, }, public, long, set, (, long, millis, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,]
[}, public, long, set, (, long, millis, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,]
[long, set, (, long, millis, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, iMinValue, ,]
[value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, iMinValue, ,, getMaximumValue, (, ), ), ;, if, (]
[value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, iMinValue, ,, getMaximumValue, (, ), ), ;, if, (]
[{, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, iMinValue, ,, getMaximumValue, (, ), ), ;, if, (, value, <=]
[this, ,, value, ,, iMinValue, ,, getMaximumValue, (, ), ), ;, if, (, value, <=, iSkip, ), {, if, (]
[this, ,, value, ,, iMinValue, ,, getMaximumValue, (, ), ), ;, if, (, value, <=, iSkip, ), {, if, (]
[value, ,, iMinValue, ,, getMaximumValue, (, ), ), ;, if, (, value, <=, iSkip, ), {, if, (, value, ==]
[getMaximumValue, (, ), ), ;, if, (, value, <=, iSkip, ), {, if, (, value, ==, iSkip, ), {, throw]
[), ;, if, (, value, <=, iSkip, ), {, if, (, value, ==, iSkip, ), {, throw, new, IllegalFieldValueException, (]
[), ;, if, (, value, <=, iSkip, ), {, if, (, value, ==, iSkip, ), {, throw, new, IllegalFieldValueException, (]
[iSkip, ), {, if, (, value, ==, iSkip, ), {, throw, new, IllegalFieldValueException, (, DateTimeFieldType, ., year, (, ), ,]
[iSkip, ), {, if, (, value, ==, iSkip, ), {, throw, new, IllegalFieldValueException, (, DateTimeFieldType, ., year, (, ), ,]
[(, value, ==, iSkip, ), {, throw, new, IllegalFieldValueException, (, DateTimeFieldType, ., year, (, ), ,, Integer, ., valueOf, (]
[iSkip, ), {, throw, new, IllegalFieldValueException, (, DateTimeFieldType, ., year, (, ), ,, Integer, ., valueOf, (, value, ), ,]
[{, throw, new, IllegalFieldValueException, (, DateTimeFieldType, ., year, (, ), ,, Integer, ., valueOf, (, value, ), ,, null, ,]
[(, DateTimeFieldType, ., year, (, ), ,, Integer, ., valueOf, (, value, ), ,, null, ,, null, ), ;, }]
[(, DateTimeFieldType, ., year, (, ), ,, Integer, ., valueOf, (, value, ), ,, null, ,, null, ), ;, }]
[), ,, Integer, ., valueOf, (, value, ), ,, null, ,, null, ), ;, }, value, ++, ;, }, return]
[), ,, Integer, ., valueOf, (, value, ), ,, null, ,, null, ), ;, }, value, ++, ;, }, return]
[valueOf, (, value, ), ,, null, ,, null, ), ;, }, value, ++, ;, }, return, super, ., set, (]
[value, ), ,, null, ,, null, ), ;, }, value, ++, ;, }, return, super, ., set, (, millis, ,]
[;, }, return, super, ., set, (, millis, ,, value, ), ;, }, public, int, getMinimumValue, (, ), {, return]
[), ;, }, public, int, getMinimumValue, (, ), {, return, iMinValue, ;, }, private, Object, readResolve, (, ), {, return]
[), ;, }, public, int, getMinimumValue, (, ), {, return, iMinValue, ;, }, private, Object, readResolve, (, ), {, return]
[(, ), {, return, iMinValue, ;, }, private, Object, readResolve, (, ), {, return, getType, (, ), ., getField, (]
