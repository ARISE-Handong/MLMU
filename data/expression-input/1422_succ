[;, private, final, AbstractCompiler, compiler, ;, private, final, CheckLevel, level, ;, private, static, final, Predicate, <, Node, >, IS_RETURN, =]
[., warning, (, "JSC_MISSING_RETURN_STATEMENT", ,, "Missing return statement. Function expected to return {0}.", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, CheckLevel, level, ;, private, static]
[,, "Missing return statement. Function expected to return {0}.", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, CheckLevel, level, ;, private, static, final, Predicate, <, Node]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, CheckLevel, level, ;, private, static, final, Predicate, <, Node, >, IS_RETURN]
[;, private, static, final, Predicate, <, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, >, GOES_THROUGH_TRUE_CONDITION_PREDICATE, =, new, Predicate, <]
[;, }, }, ;, private, static, final, Predicate, <, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, >, GOES_THROUGH_TRUE_CONDITION_PREDICATE, =]
[&&, input, ., isReturn, (, ), ;, }, }, ;, private, static, final, Predicate, <, DiGraphEdge, <, Node, ,, ControlFlowGraph]
[!=, null, &&, input, ., isReturn, (, ), ;, }, }, ;, private, static, final, Predicate, <, DiGraphEdge, <, Node]
[&&, input, ., isReturn, (, ), ;, }, }, ;, private, static, final, Predicate, <, DiGraphEdge, <, Node, ,, ControlFlowGraph]
[;, }, }, ;, private, static, final, Predicate, <, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, >, GOES_THROUGH_TRUE_CONDITION_PREDICATE, =]
[., isReturn, (, ), ;, }, }, ;, private, static, final, Predicate, <, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch]
[;, CheckMissingReturn, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =, compiler, ;, this, ., level, =]
[;, if, (, branch, ==, Branch, ., ON_EX, ), {, return, false, ;, }, else, if, (, branch, ., isConditional]
[., getValue, (, ), ;, if, (, branch, ==, Branch, ., ON_EX, ), {, return, false, ;, }, else, if]
[), {, return, false, ;, }, else, if, (, branch, ., isConditional, (, ), ), {, Node, condition, =, NodeUtil]
[==, Branch, ., ON_EX, ), {, return, false, ;, }, else, if, (, branch, ., isConditional, (, ), ), {]
[), {, return, false, ;, }, else, if, (, branch, ., isConditional, (, ), ), {, Node, condition, =, NodeUtil]
[., ON_EX, ), {, return, false, ;, }, else, if, (, branch, ., isConditional, (, ), ), {, Node, condition]
[;, }, else, if, (, branch, ., isConditional, (, ), ), {, Node, condition, =, NodeUtil, ., getConditionExpression, (, input]
[), {, Node, condition, =, NodeUtil, ., getConditionExpression, (, input, ., getSource, (, ), ., getValue, (, ), ), ;]
[., isConditional, (, ), ), {, Node, condition, =, NodeUtil, ., getConditionExpression, (, input, ., getSource, (, ), ., getValue]
[;, if, (, condition, !=, null, ), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (]
[., getConditionExpression, (, input, ., getSource, (, ), ., getValue, (, ), ), ;, if, (, condition, !=, null, )]
[), ;, if, (, condition, !=, null, ), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if]
[., getValue, (, ), ), ;, if, (, condition, !=, null, ), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (]
[., getSource, (, ), ., getValue, (, ), ), ;, if, (, condition, !=, null, ), {, TernaryValue, val, =]
[), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, )]
[!=, null, ), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (, val, !=, TernaryValue, .]
[), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, )]
[;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return, val, ., toBoolean, (, true, ), ==, (, Branch]
[., getImpureBooleanValue, (, condition, ), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return, val, ., toBoolean, (]
[), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return, val, ., toBoolean, (, true, ), ==, (]
[), {, return, val, ., toBoolean, (, true, ), ==, (, Branch, ., ON_TRUE, ==, branch, ), ;, }, }]
[!=, TernaryValue, ., UNKNOWN, ), {, return, val, ., toBoolean, (, true, ), ==, (, Branch, ., ON_TRUE, ==, branch]
[), {, return, val, ., toBoolean, (, true, ), ==, (, Branch, ., ON_TRUE, ==, branch, ), ;, }, }]
[., UNKNOWN, ), {, return, val, ., toBoolean, (, true, ), ==, (, Branch, ., ON_TRUE, ==, branch, ), ;]
[;, }, }, }, return, true, ;, }, }, ;, CheckMissingReturn, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this]
[==, (, Branch, ., ON_TRUE, ==, branch, ), ;, }, }, }, return, true, ;, }, }, ;, CheckMissingReturn, (]
[., toBoolean, (, true, ), ==, (, Branch, ., ON_TRUE, ==, branch, ), ;, }, }, }, return, true, ;]
[), ==, (, Branch, ., ON_TRUE, ==, branch, ), ;, }, }, }, return, true, ;, }, }, ;, CheckMissingReturn]
[;, }, }, }, return, true, ;, }, }, ;, CheckMissingReturn, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this]
[), ;, }, }, }, return, true, ;, }, }, ;, CheckMissingReturn, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {]
[==, branch, ), ;, }, }, }, return, true, ;, }, }, ;, CheckMissingReturn, (, AbstractCompiler, compiler, ,, CheckLevel, level]
[., ON_TRUE, ==, branch, ), ;, }, }, }, return, true, ;, }, }, ;, CheckMissingReturn, (, AbstractCompiler, compiler, ,]
[), ;, }, }, }, return, true, ;, }, }, ;, CheckMissingReturn, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {]
[;, }, }, ;, CheckMissingReturn, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =, compiler, ;, this]
[=, compiler, ;, this, ., level, =, level, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {]
[., compiler, =, compiler, ;, this, ., level, =, level, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t]
[;, this, ., level, =, level, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, JSType, returnType]
[=, level, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, JSType, returnType, =, explicitReturnExpected, (, t]
[., level, =, level, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, JSType, returnType, =, explicitReturnExpected]
[;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, JSType, returnType, =, explicitReturnExpected, (, t, ., getScopeRoot]
[;, if, (, returnType, ==, null, ), {, return, ;, }, if, (, fastAllPathsReturnCheck, (, t, ., getControlFlowGraph, (, )]
[), ;, if, (, returnType, ==, null, ), {, return, ;, }, if, (, fastAllPathsReturnCheck, (, t, ., getControlFlowGraph, (]
[., getScopeRoot, (, ), ), ;, if, (, returnType, ==, null, ), {, return, ;, }, if, (, fastAllPathsReturnCheck, (]
[), {, return, ;, }, if, (, fastAllPathsReturnCheck, (, t, ., getControlFlowGraph, (, ), ), ), {, return, ;, }]
[==, null, ), {, return, ;, }, if, (, fastAllPathsReturnCheck, (, t, ., getControlFlowGraph, (, ), ), ), {, return]
[), {, return, ;, }, if, (, fastAllPathsReturnCheck, (, t, ., getControlFlowGraph, (, ), ), ), {, return, ;, }]
[), {, return, ;, }, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, test, =, new, CheckPathsBetweenNodes, <, Node, ,]
[), ), {, return, ;, }, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, test, =, new, CheckPathsBetweenNodes, <, Node]
[., getControlFlowGraph, (, ), ), ), {, return, ;, }, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, test, =]
[;, if, (, !, test, ., allPathsSatisfyPredicate, (, ), ), {, compiler, ., report, (, t, ., makeError, (, t]
[,, t, ., getControlFlowGraph, (, ), ., getEntry, (, ), ,, t, ., getControlFlowGraph, (, ), ., getImplicitReturn, (, )]
[., getControlFlowGraph, (, ), ,, t, ., getControlFlowGraph, (, ), ., getEntry, (, ), ,, t, ., getControlFlowGraph, (, )]
[,, t, ., getControlFlowGraph, (, ), ., getImplicitReturn, (, ), ,, IS_RETURN, ,, GOES_THROUGH_TRUE_CONDITION_PREDICATE, ), ;, if, (, !, test]
[., getEntry, (, ), ,, t, ., getControlFlowGraph, (, ), ., getImplicitReturn, (, ), ,, IS_RETURN, ,, GOES_THROUGH_TRUE_CONDITION_PREDICATE, ), ;]
[., getControlFlowGraph, (, ), ., getEntry, (, ), ,, t, ., getControlFlowGraph, (, ), ., getImplicitReturn, (, ), ,, IS_RETURN]
[,, IS_RETURN, ,, GOES_THROUGH_TRUE_CONDITION_PREDICATE, ), ;, if, (, !, test, ., allPathsSatisfyPredicate, (, ), ), {, compiler, ., report, (]
[., getImplicitReturn, (, ), ,, IS_RETURN, ,, GOES_THROUGH_TRUE_CONDITION_PREDICATE, ), ;, if, (, !, test, ., allPathsSatisfyPredicate, (, ), ), {]
[., getControlFlowGraph, (, ), ., getImplicitReturn, (, ), ,, IS_RETURN, ,, GOES_THROUGH_TRUE_CONDITION_PREDICATE, ), ;, if, (, !, test, ., allPathsSatisfyPredicate]
[,, GOES_THROUGH_TRUE_CONDITION_PREDICATE, ), ;, if, (, !, test, ., allPathsSatisfyPredicate, (, ), ), {, compiler, ., report, (, t, .]
[), ;, if, (, !, test, ., allPathsSatisfyPredicate, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[), {, compiler, ., report, (, t, ., makeError, (, t, ., getScopeRoot, (, ), ,, level, ,, MISSING_RETURN_STATEMENT, ,]
[), {, compiler, ., report, (, t, ., makeError, (, t, ., getScopeRoot, (, ), ,, level, ,, MISSING_RETURN_STATEMENT, ,]
[., allPathsSatisfyPredicate, (, ), ), {, compiler, ., report, (, t, ., makeError, (, t, ., getScopeRoot, (, ), ,]
[;, }, }, private, static, boolean, fastAllPathsReturnCheck, (, ControlFlowGraph, <, Node, >, cfg, ), {, for, (, DiGraphEdge, <, Node]
[., report, (, t, ., makeError, (, t, ., getScopeRoot, (, ), ,, level, ,, MISSING_RETURN_STATEMENT, ,, returnType, ., toString]
[), ;, }, }, private, static, boolean, fastAllPathsReturnCheck, (, ControlFlowGraph, <, Node, >, cfg, ), {, for, (, DiGraphEdge, <]
[., makeError, (, t, ., getScopeRoot, (, ), ,, level, ,, MISSING_RETURN_STATEMENT, ,, returnType, ., toString, (, ), ), )]
[,, level, ,, MISSING_RETURN_STATEMENT, ,, returnType, ., toString, (, ), ), ), ;, }, }, private, static, boolean, fastAllPathsReturnCheck, (]
[., getScopeRoot, (, ), ,, level, ,, MISSING_RETURN_STATEMENT, ,, returnType, ., toString, (, ), ), ), ;, }, }, private]
[,, MISSING_RETURN_STATEMENT, ,, returnType, ., toString, (, ), ), ), ;, }, }, private, static, boolean, fastAllPathsReturnCheck, (, ControlFlowGraph, <]
[,, returnType, ., toString, (, ), ), ), ;, }, }, private, static, boolean, fastAllPathsReturnCheck, (, ControlFlowGraph, <, Node, >]
[), ), ;, }, }, private, static, boolean, fastAllPathsReturnCheck, (, ControlFlowGraph, <, Node, >, cfg, ), {, for, (, DiGraphEdge]
[., toString, (, ), ), ), ;, }, }, private, static, boolean, fastAllPathsReturnCheck, (, ControlFlowGraph, <, Node, >, cfg, )]
[), {, if, (, !, s, ., getSource, (, ), ., getValue, (, ), ., isReturn, (, ), ), {]
[., getInEdges, (, ), ), {, if, (, !, s, ., getSource, (, ), ., getValue, (, ), ., isReturn]
[., getImplicitReturn, (, ), ., getInEdges, (, ), ), {, if, (, !, s, ., getSource, (, ), ., getValue]
[), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, )]
[), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, )]
[., isReturn, (, ), ), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, void, exitScope]
[., getValue, (, ), ., isReturn, (, ), ), {, return, false, ;, }, }, return, true, ;, }, @]
[., getSource, (, ), ., getValue, (, ), ., isReturn, (, ), ), {, return, false, ;, }, }, return]
[;, }, }, return, true, ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @, Override]
[;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, }, private]
[;, if, (, scopeType, ==, null, ), {, return, null, ;, }, if, (, isEmptyFunction, (, scope, ), ), {]
[., toMaybeFunctionType, (, scope, ., getJSType, (, ), ), ;, if, (, scopeType, ==, null, ), {, return, null, ;]
[), ;, if, (, scopeType, ==, null, ), {, return, null, ;, }, if, (, isEmptyFunction, (, scope, ), )]
[., getJSType, (, ), ), ;, if, (, scopeType, ==, null, ), {, return, null, ;, }, if, (, isEmptyFunction]
[), {, return, null, ;, }, if, (, isEmptyFunction, (, scope, ), ), {, return, null, ;, }, JSType, returnType]
[==, null, ), {, return, null, ;, }, if, (, isEmptyFunction, (, scope, ), ), {, return, null, ;, }]
[), {, return, null, ;, }, if, (, isEmptyFunction, (, scope, ), ), {, return, null, ;, }, JSType, returnType]
[;, }, if, (, isEmptyFunction, (, scope, ), ), {, return, null, ;, }, JSType, returnType, =, scopeType, ., getReturnType]
[), {, return, null, ;, }, JSType, returnType, =, scopeType, ., getReturnType, (, ), ;, if, (, returnType, ==, null]
[), ), {, return, null, ;, }, JSType, returnType, =, scopeType, ., getReturnType, (, ), ;, if, (, returnType, ==]
[;, }, JSType, returnType, =, scopeType, ., getReturnType, (, ), ;, if, (, returnType, ==, null, ), {, return, null]
[;, if, (, returnType, ==, null, ), {, return, null, ;, }, if, (, !, isVoidOrUnknown, (, returnType, ), )]
[., getReturnType, (, ), ;, if, (, returnType, ==, null, ), {, return, null, ;, }, if, (, !, isVoidOrUnknown]
[), {, return, null, ;, }, if, (, !, isVoidOrUnknown, (, returnType, ), ), {, return, returnType, ;, }, return]
[==, null, ), {, return, null, ;, }, if, (, !, isVoidOrUnknown, (, returnType, ), ), {, return, returnType, ;]
[), {, return, null, ;, }, if, (, !, isVoidOrUnknown, (, returnType, ), ), {, return, returnType, ;, }, return]
[;, }, if, (, !, isVoidOrUnknown, (, returnType, ), ), {, return, returnType, ;, }, return, null, ;, }, private]
[), {, return, returnType, ;, }, return, null, ;, }, private, static, boolean, isEmptyFunction, (, Node, function, ), {, return]
[), {, return, returnType, ;, }, return, null, ;, }, private, static, boolean, isEmptyFunction, (, Node, function, ), {, return]
[), ), {, return, returnType, ;, }, return, null, ;, }, private, static, boolean, isEmptyFunction, (, Node, function, ), {]
[;, }, return, null, ;, }, private, static, boolean, isEmptyFunction, (, Node, function, ), {, return, function, ., getChildCount, (]
[;, }, private, static, boolean, isEmptyFunction, (, Node, function, ), {, return, function, ., getChildCount, (, ), ==, 3, &&]
[;, }, private, boolean, isVoidOrUnknown, (, JSType, returnType, ), {, final, JSType, voidType, =, compiler, ., getTypeRegistry, (, ), .]
[&&, !, function, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ., hasChildren, (, ), ;]
[==, 3, &&, !, function, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ., hasChildren, (]
[., getChildCount, (, ), ==, 3, &&, !, function, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (]
[&&, !, function, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ., hasChildren, (, ), ;]
[;, }, private, boolean, isVoidOrUnknown, (, JSType, returnType, ), {, final, JSType, voidType, =, compiler, ., getTypeRegistry, (, ), .]
[;, }, private, boolean, isVoidOrUnknown, (, JSType, returnType, ), {, final, JSType, voidType, =, compiler, ., getTypeRegistry, (, ), .]
[., hasChildren, (, ), ;, }, private, boolean, isVoidOrUnknown, (, JSType, returnType, ), {, final, JSType, voidType, =, compiler, .]
[., getNext, (, ), ., hasChildren, (, ), ;, }, private, boolean, isVoidOrUnknown, (, JSType, returnType, ), {, final, JSType]
[., getNext, (, ), ., getNext, (, ), ., hasChildren, (, ), ;, }, private, boolean, isVoidOrUnknown, (, JSType, returnType]
[., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ., hasChildren, (, ), ;, }, private, boolean]
[;, return, voidType, ., isSubtype, (, returnType, ), ;, }, }]
[., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ;, return, voidType, ., isSubtype, (, returnType, ), ;, }, }]
[., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ;, return, voidType, ., isSubtype, (, returnType, ), ;]
[), ;, return, voidType, ., isSubtype, (, returnType, ), ;, }, }]
[., VOID_TYPE, ), ;, return, voidType, ., isSubtype, (, returnType, ), ;, }, }]
[;, }, }]
[., isSubtype, (, returnType, ), ;, }, }]
[), ;, }, }]
