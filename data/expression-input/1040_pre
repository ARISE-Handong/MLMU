[AccessibilityChanger, ;, public, class, ConstructorInstantiator, implements, Instantiator, {, private, final, Object, outerClassInstance, ;, public, ConstructorInstantiator, (, Object, outerClassInstance, ), {]
[AccessibilityChanger, ;, public, class, ConstructorInstantiator, implements, Instantiator, {, private, final, Object, outerClassInstance, ;, public, ConstructorInstantiator, (, Object, outerClassInstance, ), {]
[ConstructorInstantiator, implements, Instantiator, {, private, final, Object, outerClassInstance, ;, public, ConstructorInstantiator, (, Object, outerClassInstance, ), {, this, ., outerClassInstance, =]
[=, outerClassInstance, ;, }, public, <, T, >, T, newInstance, (, Class, <, T, >, cls, ), {, if, (]
[=, outerClassInstance, ;, }, public, <, T, >, T, newInstance, (, Class, <, T, >, cls, ), {, if, (]
[;, }, public, <, T, >, T, newInstance, (, Class, <, T, >, cls, ), {, if, (, outerClassInstance, ==]
[T, >, T, newInstance, (, Class, <, T, >, cls, ), {, if, (, outerClassInstance, ==, null, ), {, return]
[T, newInstance, (, Class, <, T, >, cls, ), {, if, (, outerClassInstance, ==, null, ), {, return, noArgConstructor, (]
[T, >, cls, ), {, if, (, outerClassInstance, ==, null, ), {, return, noArgConstructor, (, cls, ), ;, }, return]
[cls, ), {, if, (, outerClassInstance, ==, null, ), {, return, noArgConstructor, (, cls, ), ;, }, return, withParams, (]
[{, if, (, outerClassInstance, ==, null, ), {, return, noArgConstructor, (, cls, ), ;, }, return, withParams, (, cls, ,]
[<, T, >, cls, ,, Object, ..., params, ), {, try, {, for, (, Constructor, <, ?, >, constructor, :]
[<, T, >, cls, ,, Object, ..., params, ), {, try, {, for, (, Constructor, <, ?, >, constructor, :]
[<, ?, >, constructor, :, cls, ., getDeclaredConstructors, (, ), ), {, Class, <, ?, >, [, ], types, =]
[<, ?, >, constructor, :, cls, ., getDeclaredConstructors, (, ), ), {, Class, <, ?, >, [, ], types, =]
[(, ), ), {, Class, <, ?, >, [, ], types, =, constructor, ., getParameterTypes, (, ), ;, if, (]
[), {, Class, <, ?, >, [, ], types, =, constructor, ., getParameterTypes, (, ), ;, if, (, paramsMatch, (]
[Class, <, ?, >, [, ], types, =, constructor, ., getParameterTypes, (, ), ;, if, (, paramsMatch, (, types, ,]
[], types, =, constructor, ., getParameterTypes, (, ), ;, if, (, paramsMatch, (, types, ,, params, ), ), {, return]
[=, constructor, ., getParameterTypes, (, ), ;, if, (, paramsMatch, (, types, ,, params, ), ), {, return, invokeConstructor, (]
[., getParameterTypes, (, ), ;, if, (, paramsMatch, (, types, ,, params, ), ), {, return, invokeConstructor, (, constructor, ,]
[), {, return, invokeConstructor, (, constructor, ,, params, ), ;, }, }, }, catch, (, Exception, e, ), {, throw]
[return, invokeConstructor, (, constructor, ,, params, ), ;, }, }, }, catch, (, Exception, e, ), {, throw, paramsException, (]
[(, constructor, ,, params, ), ;, }, }, }, catch, (, Exception, e, ), {, throw, paramsException, (, cls, ,]
[;, }, }, }, catch, (, Exception, e, ), {, throw, paramsException, (, cls, ,, e, ), ;, }, throw]
[}, }, catch, (, Exception, e, ), {, throw, paramsException, (, cls, ,, e, ), ;, }, throw, paramsException, (]
[catch, (, Exception, e, ), {, throw, paramsException, (, cls, ,, e, ), ;, }, throw, paramsException, (, cls, ,]
[), {, throw, paramsException, (, cls, ,, e, ), ;, }, throw, paramsException, (, cls, ,, null, ), ;, }]
[paramsException, (, cls, ,, e, ), ;, }, throw, paramsException, (, cls, ,, null, ), ;, }, @, SuppressWarnings, (]
[throws, java, ., lang, ., InstantiationException, ,, IllegalAccessException, ,, java, ., lang, ., reflect, ., InvocationTargetException, {, AccessibilityChanger, accessibility, =]
[InstantiationException, ,, IllegalAccessException, ,, java, ., lang, ., reflect, ., InvocationTargetException, {, AccessibilityChanger, accessibility, =, new, AccessibilityChanger, (, ), ;]
[InstantiationException, ,, IllegalAccessException, ,, java, ., lang, ., reflect, ., InvocationTargetException, {, AccessibilityChanger, accessibility, =, new, AccessibilityChanger, (, ), ;]
[java, ., lang, ., reflect, ., InvocationTargetException, {, AccessibilityChanger, accessibility, =, new, AccessibilityChanger, (, ), ;, accessibility, ., enableAccess, (]
[reflect, ., InvocationTargetException, {, AccessibilityChanger, accessibility, =, new, AccessibilityChanger, (, ), ;, accessibility, ., enableAccess, (, constructor, ), ;, return]
[{, AccessibilityChanger, accessibility, =, new, AccessibilityChanger, (, ), ;, accessibility, ., enableAccess, (, constructor, ), ;, return, (, T, )]
[{, AccessibilityChanger, accessibility, =, new, AccessibilityChanger, (, ), ;, accessibility, ., enableAccess, (, constructor, ), ;, return, (, T, )]
[new, AccessibilityChanger, (, ), ;, accessibility, ., enableAccess, (, constructor, ), ;, return, (, T, ), constructor, ., newInstance, (]
[}, private, static, <, T, >, InstantiationException, paramsException, (, Class, <, T, >, cls, ,, Exception, e, ), {, return]
[<, T, >, InstantiationException, paramsException, (, Class, <, T, >, cls, ,, Exception, e, ), {, return, new, InstantiationException, (]
[>, InstantiationException, paramsException, (, Class, <, T, >, cls, ,, Exception, e, ), {, return, new, InstantiationException, (, join, (]
[>, InstantiationException, paramsException, (, Class, <, T, >, cls, ,, Exception, e, ), {, return, new, InstantiationException, (, join, (]
[>, InstantiationException, paramsException, (, Class, <, T, >, cls, ,, Exception, e, ), {, return, new, InstantiationException, (, join, (]
[paramsException, (, Class, <, T, >, cls, ,, Exception, e, ), {, return, new, InstantiationException, (, join, (, "Unable to create instance of '", +]
[paramsException, (, Class, <, T, >, cls, ,, Exception, e, ), {, return, new, InstantiationException, (, join, (, "Unable to create instance of '", +]
[cls, ,, Exception, e, ), {, return, new, InstantiationException, (, join, (, "Unable to create instance of '", +, cls, ., getSimpleName, (, ), +]
[Exception, e, ), {, return, new, InstantiationException, (, join, (, "Unable to create instance of '", +, cls, ., getSimpleName, (, ), +, "'.", ,]
[{, return, new, InstantiationException, (, join, (, "Unable to create instance of '", +, cls, ., getSimpleName, (, ), +, "'.", ,, "Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.", ), ,]
[static, boolean, paramsMatch, (, Class, <, ?, >, [, ], types, ,, Object, [, ], params, ), {, if, (]
[static, boolean, paramsMatch, (, Class, <, ?, >, [, ], types, ,, Object, [, ], params, ), {, if, (]
[static, boolean, paramsMatch, (, Class, <, ?, >, [, ], types, ,, Object, [, ], params, ), {, if, (]
[Class, <, ?, >, [, ], types, ,, Object, [, ], params, ), {, if, (, params, ., length, !=]
[Class, <, ?, >, [, ], types, ,, Object, [, ], params, ), {, if, (, params, ., length, !=]
[types, ,, Object, [, ], params, ), {, if, (, params, ., length, !=, types, ., length, ), {, return]
[if, (, params, ., length, !=, types, ., length, ), {, return, false, ;, }, for, (, int, i, =]
[params, ., length, !=, types, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;]
[params, ., length, !=, types, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;]
[length, !=, types, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <]
[length, !=, types, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <]
[length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, params, ., length, ;]
[length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, params, ., length, ;]
[}, for, (, int, i, =, 0, ;, i, <, params, ., length, ;, i, ++, ), {, if, (]
[for, (, int, i, =, 0, ;, i, <, params, ., length, ;, i, ++, ), {, if, (, !]
[for, (, int, i, =, 0, ;, i, <, params, ., length, ;, i, ++, ), {, if, (, !]
[for, (, int, i, =, 0, ;, i, <, params, ., length, ;, i, ++, ), {, if, (, !]
[int, i, =, 0, ;, i, <, params, ., length, ;, i, ++, ), {, if, (, !, types, []
[i, <, params, ., length, ;, i, ++, ), {, if, (, !, types, [, i, ], ., isInstance, (]
[i, <, params, ., length, ;, i, ++, ), {, if, (, !, types, [, i, ], ., isInstance, (]
[params, ., length, ;, i, ++, ), {, if, (, !, types, [, i, ], ., isInstance, (, params, []
[), {, if, (, !, types, [, i, ], ., isInstance, (, params, [, i, ], ), ), {, return]
[types, [, i, ], ., isInstance, (, params, [, i, ], ), ), {, return, false, ;, }, }, return]
[;, }, private, static, <, T, >, T, noArgConstructor, (, Class, <, T, >, cls, ), {, try, {, return]
[private, static, <, T, >, T, noArgConstructor, (, Class, <, T, >, cls, ), {, try, {, return, invokeConstructor, (]
[private, static, <, T, >, T, noArgConstructor, (, Class, <, T, >, cls, ), {, try, {, return, invokeConstructor, (]
[try, {, return, invokeConstructor, (, cls, ., getDeclaredConstructor, (, ), ), ;, }, catch, (, Throwable, t, ), {, throw]
[invokeConstructor, (, cls, ., getDeclaredConstructor, (, ), ), ;, }, catch, (, Throwable, t, ), {, throw, new, InstantiationException, (]
[cls, ., getDeclaredConstructor, (, ), ), ;, }, catch, (, Throwable, t, ), {, throw, new, InstantiationException, (, join, (]
[cls, ., getDeclaredConstructor, (, ), ), ;, }, catch, (, Throwable, t, ), {, throw, new, InstantiationException, (, join, (]
[cls, ., getDeclaredConstructor, (, ), ), ;, }, catch, (, Throwable, t, ), {, throw, new, InstantiationException, (, join, (]
[getDeclaredConstructor, (, ), ), ;, }, catch, (, Throwable, t, ), {, throw, new, InstantiationException, (, join, (, "Unable to create instance of '", +]
[getDeclaredConstructor, (, ), ), ;, }, catch, (, Throwable, t, ), {, throw, new, InstantiationException, (, join, (, "Unable to create instance of '", +]
[catch, (, Throwable, t, ), {, throw, new, InstantiationException, (, join, (, "Unable to create instance of '", +, cls, ., getSimpleName, (, ), +]
[Throwable, t, ), {, throw, new, InstantiationException, (, join, (, "Unable to create instance of '", +, cls, ., getSimpleName, (, ), +, "'.", ,]
[{, throw, new, InstantiationException, (, join, (, "Unable to create instance of '", +, cls, ., getSimpleName, (, ), +, "'.", ,, "Please ensure it has 0-arg constructor which invokes cleanly.", ), ,]
