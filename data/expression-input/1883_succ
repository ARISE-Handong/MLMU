[;, public, static, final, double, DEFAULT_RELATIVE_ACCURACY, =, 1.0e-6, ;, public, static, final, int, DEFAULT_MIN_ITERATIONS_COUNT, =, 3, ;, public, static, final]
[;, public, static, final, int, DEFAULT_MIN_ITERATIONS_COUNT, =, 3, ;, public, static, final, int, DEFAULT_MAX_ITERATIONS_COUNT, =, Integer, ., MAX_VALUE, ;, protected]
[;, public, static, final, int, DEFAULT_MAX_ITERATIONS_COUNT, =, Integer, ., MAX_VALUE, ;, protected, final, Incrementor, iterations, ;, private, final, double, absoluteAccuracy]
[;, protected, final, Incrementor, iterations, ;, private, final, double, absoluteAccuracy, ;, private, final, double, relativeAccuracy, ;, private, final, int, minimalIterationCount]
[., MAX_VALUE, ;, protected, final, Incrementor, iterations, ;, private, final, double, absoluteAccuracy, ;, private, final, double, relativeAccuracy, ;, private, final]
[=, relativeAccuracy, ;, this, ., absoluteAccuracy, =, absoluteAccuracy, ;, if, (, minimalIterationCount, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[., relativeAccuracy, =, relativeAccuracy, ;, this, ., absoluteAccuracy, =, absoluteAccuracy, ;, if, (, minimalIterationCount, <=, 0, ), {, throw, new]
[;, this, ., absoluteAccuracy, =, absoluteAccuracy, ;, if, (, minimalIterationCount, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, minimalIterationCount, )]
[=, absoluteAccuracy, ;, if, (, minimalIterationCount, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, minimalIterationCount, ), ;, }, if, (]
[., absoluteAccuracy, =, absoluteAccuracy, ;, if, (, minimalIterationCount, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, minimalIterationCount, ), ;, }]
[;, if, (, minimalIterationCount, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, minimalIterationCount, ), ;, }, if, (, maximalIterationCount, <=]
[), {, throw, new, NotStrictlyPositiveException, (, minimalIterationCount, ), ;, }, if, (, maximalIterationCount, <=, minimalIterationCount, ), {, throw, new, NumberIsTooSmallException]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, minimalIterationCount, ), ;, }, if, (, maximalIterationCount, <=, minimalIterationCount, ), {, throw]
[), {, throw, new, NotStrictlyPositiveException, (, minimalIterationCount, ), ;, }, if, (, maximalIterationCount, <=, minimalIterationCount, ), {, throw, new, NumberIsTooSmallException]
[;, }, if, (, maximalIterationCount, <=, minimalIterationCount, ), {, throw, new, NumberIsTooSmallException, (, maximalIterationCount, ,, minimalIterationCount, ,, false, ), ;]
[), ;, }, if, (, maximalIterationCount, <=, minimalIterationCount, ), {, throw, new, NumberIsTooSmallException, (, maximalIterationCount, ,, minimalIterationCount, ,, false, )]
[), {, throw, new, NumberIsTooSmallException, (, maximalIterationCount, ,, minimalIterationCount, ,, false, ), ;, }, this, ., minimalIterationCount, =, minimalIterationCount, ;]
[<=, minimalIterationCount, ), {, throw, new, NumberIsTooSmallException, (, maximalIterationCount, ,, minimalIterationCount, ,, false, ), ;, }, this, ., minimalIterationCount, =]
[), {, throw, new, NumberIsTooSmallException, (, maximalIterationCount, ,, minimalIterationCount, ,, false, ), ;, }, this, ., minimalIterationCount, =, minimalIterationCount, ;]
[;, }, this, ., minimalIterationCount, =, minimalIterationCount, ;, this, ., iterations, =, new, Incrementor, (, ), ;, iterations, ., setMaximalCount]
[,, minimalIterationCount, ,, false, ), ;, }, this, ., minimalIterationCount, =, minimalIterationCount, ;, this, ., iterations, =, new, Incrementor, (]
[,, false, ), ;, }, this, ., minimalIterationCount, =, minimalIterationCount, ;, this, ., iterations, =, new, Incrementor, (, ), ;]
[), ;, }, this, ., minimalIterationCount, =, minimalIterationCount, ;, this, ., iterations, =, new, Incrementor, (, ), ;, iterations, .]
[=, minimalIterationCount, ;, this, ., iterations, =, new, Incrementor, (, ), ;, iterations, ., setMaximalCount, (, maximalIterationCount, ), ;, evaluations]
[., minimalIterationCount, =, minimalIterationCount, ;, this, ., iterations, =, new, Incrementor, (, ), ;, iterations, ., setMaximalCount, (, maximalIterationCount, )]
[;, this, ., iterations, =, new, Incrementor, (, ), ;, iterations, ., setMaximalCount, (, maximalIterationCount, ), ;, evaluations, =, new]
[=, new, Incrementor, (, ), ;, iterations, ., setMaximalCount, (, maximalIterationCount, ), ;, evaluations, =, new, Incrementor, (, ), ;]
[., iterations, =, new, Incrementor, (, ), ;, iterations, ., setMaximalCount, (, maximalIterationCount, ), ;, evaluations, =, new, Incrementor, (]
[;, iterations, ., setMaximalCount, (, maximalIterationCount, ), ;, evaluations, =, new, Incrementor, (, ), ;, }, protected, BaseAbstractUnivariateIntegrator, (, final]
[;, evaluations, =, new, Incrementor, (, ), ;, }, protected, BaseAbstractUnivariateIntegrator, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, )]
[., setMaximalCount, (, maximalIterationCount, ), ;, evaluations, =, new, Incrementor, (, ), ;, }, protected, BaseAbstractUnivariateIntegrator, (, final, double, relativeAccuracy]
[), ;, evaluations, =, new, Incrementor, (, ), ;, }, protected, BaseAbstractUnivariateIntegrator, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy]
[=, new, Incrementor, (, ), ;, }, protected, BaseAbstractUnivariateIntegrator, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ), {, this]
[;, }, protected, BaseAbstractUnivariateIntegrator, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ), {, this, (, relativeAccuracy, ,, absoluteAccuracy, ,]
[,, absoluteAccuracy, ,, DEFAULT_MIN_ITERATIONS_COUNT, ,, DEFAULT_MAX_ITERATIONS_COUNT, ), ;, }, protected, BaseAbstractUnivariateIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, )]
[,, DEFAULT_MIN_ITERATIONS_COUNT, ,, DEFAULT_MAX_ITERATIONS_COUNT, ), ;, }, protected, BaseAbstractUnivariateIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException]
[,, DEFAULT_MAX_ITERATIONS_COUNT, ), ;, }, protected, BaseAbstractUnivariateIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException]
[), ;, }, protected, BaseAbstractUnivariateIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, {, this]
[,, DEFAULT_ABSOLUTE_ACCURACY, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, }, public, double, getRelativeAccuracy, (, ), {, return, relativeAccuracy, ;, }, public]
[,, minimalIterationCount, ,, maximalIterationCount, ), ;, }, public, double, getRelativeAccuracy, (, ), {, return, relativeAccuracy, ;, }, public, double, getAbsoluteAccuracy]
[,, maximalIterationCount, ), ;, }, public, double, getRelativeAccuracy, (, ), {, return, relativeAccuracy, ;, }, public, double, getAbsoluteAccuracy, (, )]
[), ;, }, public, double, getRelativeAccuracy, (, ), {, return, relativeAccuracy, ;, }, public, double, getAbsoluteAccuracy, (, ), {, return]
[;, }, public, double, getAbsoluteAccuracy, (, ), {, return, absoluteAccuracy, ;, }, public, int, getMinimalIterationCount, (, ), {, return, minimalIterationCount]
[;, }, public, int, getMinimalIterationCount, (, ), {, return, minimalIterationCount, ;, }, public, int, getMaximalIterationCount, (, ), {, return, iterations]
[;, }, public, int, getMaximalIterationCount, (, ), {, return, iterations, ., getMaximalCount, (, ), ;, }, public, int, getEvaluations, (]
[;, }, public, int, getEvaluations, (, ), {, return, evaluations, ., getCount, (, ), ;, }, public, int, getIterations, (]
[., getMaximalCount, (, ), ;, }, public, int, getEvaluations, (, ), {, return, evaluations, ., getCount, (, ), ;, }]
[;, }, public, int, getIterations, (, ), {, return, iterations, ., getCount, (, ), ;, }, protected, double, getMin, (]
[., getCount, (, ), ;, }, public, int, getIterations, (, ), {, return, iterations, ., getCount, (, ), ;, }]
[;, }, protected, double, getMin, (, ), {, return, min, ;, }, protected, double, getMax, (, ), {, return, max]
[., getCount, (, ), ;, }, protected, double, getMin, (, ), {, return, min, ;, }, protected, double, getMax, (]
[;, }, protected, double, getMax, (, ), {, return, max, ;, }, protected, double, computeObjectiveValue, (, final, double, point, )]
[;, }, protected, double, computeObjectiveValue, (, final, double, point, ), throws, TooManyEvaluationsException, {, try, {, evaluations, ., incrementCount, (, )]
[;, }, catch, (, MaxCountExceededException, e, ), {, throw, new, TooManyEvaluationsException, (, e, ., getMax, (, ), ), ;, }]
[., incrementCount, (, ), ;, }, catch, (, MaxCountExceededException, e, ), {, throw, new, TooManyEvaluationsException, (, e, ., getMax, (]
[;, }, return, function, ., value, (, point, ), ;, }, protected, void, setup, (, final, int, maxEval, ,, final]
[), ;, }, return, function, ., value, (, point, ), ;, }, protected, void, setup, (, final, int, maxEval, ,]
[., getMax, (, ), ), ;, }, return, function, ., value, (, point, ), ;, }, protected, void, setup, (]
[;, }, protected, void, setup, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,, final, double, lower, ,, final, double]
[., value, (, point, ), ;, }, protected, void, setup, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,, final]
[), ;, }, protected, void, setup, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,, final, double, lower, ,, final]
[;, UnivariateSolverUtils, ., verifyInterval, (, lower, ,, upper, ), ;, min, =, lower, ;, max, =, upper, ;, function, =]
[., checkNotNull, (, f, ), ;, UnivariateSolverUtils, ., verifyInterval, (, lower, ,, upper, ), ;, min, =, lower, ;, max]
[), ;, UnivariateSolverUtils, ., verifyInterval, (, lower, ,, upper, ), ;, min, =, lower, ;, max, =, upper, ;, function]
[;, min, =, lower, ;, max, =, upper, ;, function, =, f, ;, evaluations, ., setMaximalCount, (, maxEval, ), ;]
[., verifyInterval, (, lower, ,, upper, ), ;, min, =, lower, ;, max, =, upper, ;, function, =, f, ;]
[,, upper, ), ;, min, =, lower, ;, max, =, upper, ;, function, =, f, ;, evaluations, ., setMaximalCount, (]
[), ;, min, =, lower, ;, max, =, upper, ;, function, =, f, ;, evaluations, ., setMaximalCount, (, maxEval, )]
[=, lower, ;, max, =, upper, ;, function, =, f, ;, evaluations, ., setMaximalCount, (, maxEval, ), ;, evaluations, .]
[;, max, =, upper, ;, function, =, f, ;, evaluations, ., setMaximalCount, (, maxEval, ), ;, evaluations, ., resetCount, (]
[=, upper, ;, function, =, f, ;, evaluations, ., setMaximalCount, (, maxEval, ), ;, evaluations, ., resetCount, (, ), ;]
[;, function, =, f, ;, evaluations, ., setMaximalCount, (, maxEval, ), ;, evaluations, ., resetCount, (, ), ;, iterations, .]
[=, f, ;, evaluations, ., setMaximalCount, (, maxEval, ), ;, evaluations, ., resetCount, (, ), ;, iterations, ., resetCount, (]
[;, evaluations, ., setMaximalCount, (, maxEval, ), ;, evaluations, ., resetCount, (, ), ;, iterations, ., resetCount, (, ), ;]
[;, evaluations, ., resetCount, (, ), ;, iterations, ., resetCount, (, ), ;, }, public, double, integrate, (, final, int]
[., setMaximalCount, (, maxEval, ), ;, evaluations, ., resetCount, (, ), ;, iterations, ., resetCount, (, ), ;, }, public]
[), ;, evaluations, ., resetCount, (, ), ;, iterations, ., resetCount, (, ), ;, }, public, double, integrate, (, final]
[;, iterations, ., resetCount, (, ), ;, }, public, double, integrate, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,]
[., resetCount, (, ), ;, iterations, ., resetCount, (, ), ;, }, public, double, integrate, (, final, int, maxEval, ,]
[;, }, public, double, integrate, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,, final, double, lower, ,, final, double]
[., resetCount, (, ), ;, }, public, double, integrate, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,, final, double]
[;, return, doIntegrate, (, ), ;, }, protected, abstract, double, doIntegrate, (, ), throws, TooManyEvaluationsException, ,, MaxCountExceededException, ;, }]
[,, f, ,, lower, ,, upper, ), ;, return, doIntegrate, (, ), ;, }, protected, abstract, double, doIntegrate, (, )]
[,, lower, ,, upper, ), ;, return, doIntegrate, (, ), ;, }, protected, abstract, double, doIntegrate, (, ), throws, TooManyEvaluationsException]
[,, upper, ), ;, return, doIntegrate, (, ), ;, }, protected, abstract, double, doIntegrate, (, ), throws, TooManyEvaluationsException, ,, MaxCountExceededException]
[), ;, return, doIntegrate, (, ), ;, }, protected, abstract, double, doIntegrate, (, ), throws, TooManyEvaluationsException, ,, MaxCountExceededException, ;, }]
[;, }, protected, abstract, double, doIntegrate, (, ), throws, TooManyEvaluationsException, ,, MaxCountExceededException, ;, }]
