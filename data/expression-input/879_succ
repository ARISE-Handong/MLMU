[,, parameters, ), ;, }, public, JacobianMatrices, (, final, MainStateJacobianProvider, jode, ,, final, String, ..., parameters, ), {, this, .]
[,, hY, ), ,, parameters, ), ;, }, public, JacobianMatrices, (, final, MainStateJacobianProvider, jode, ,, final, String, ..., parameters, )]
[), ,, parameters, ), ;, }, public, JacobianMatrices, (, final, MainStateJacobianProvider, jode, ,, final, String, ..., parameters, ), {, this]
[), ;, }, public, JacobianMatrices, (, final, MainStateJacobianProvider, jode, ,, final, String, ..., parameters, ), {, this, ., efode, =]
[=, null, ;, this, ., index, =, -, 1, ;, this, ., jode, =, jode, ;, this, ., pode, =]
[., efode, =, null, ;, this, ., index, =, -, 1, ;, this, ., jode, =, jode, ;, this, .]
[;, this, ., index, =, -, 1, ;, this, ., jode, =, jode, ;, this, ., pode, =, null, ;]
[=, -, 1, ;, this, ., jode, =, jode, ;, this, ., pode, =, null, ;, this, ., stateDim, =]
[., index, =, -, 1, ;, this, ., jode, =, jode, ;, this, ., pode, =, null, ;, this, .]
[;, this, ., jode, =, jode, ;, this, ., pode, =, null, ;, this, ., stateDim, =, jode, ., getDimension]
[;, this, ., jode, =, jode, ;, this, ., pode, =, null, ;, this, ., stateDim, =, jode, ., getDimension]
[=, jode, ;, this, ., pode, =, null, ;, this, ., stateDim, =, jode, ., getDimension, (, ), ;, if]
[., jode, =, jode, ;, this, ., pode, =, null, ;, this, ., stateDim, =, jode, ., getDimension, (, )]
[;, this, ., pode, =, null, ;, this, ., stateDim, =, jode, ., getDimension, (, ), ;, if, (, parameters]
[=, null, ;, this, ., stateDim, =, jode, ., getDimension, (, ), ;, if, (, parameters, ==, null, ), {]
[., pode, =, null, ;, this, ., stateDim, =, jode, ., getDimension, (, ), ;, if, (, parameters, ==, null]
[;, this, ., stateDim, =, jode, ., getDimension, (, ), ;, if, (, parameters, ==, null, ), {, selectedParameters, =]
[=, jode, ., getDimension, (, ), ;, if, (, parameters, ==, null, ), {, selectedParameters, =, null, ;, paramDim, =]
[., stateDim, =, jode, ., getDimension, (, ), ;, if, (, parameters, ==, null, ), {, selectedParameters, =, null, ;]
[;, if, (, parameters, ==, null, ), {, selectedParameters, =, null, ;, paramDim, =, 0, ;, }, else, {, this]
[., getDimension, (, ), ;, if, (, parameters, ==, null, ), {, selectedParameters, =, null, ;, paramDim, =, 0, ;]
[), {, selectedParameters, =, null, ;, paramDim, =, 0, ;, }, else, {, this, ., selectedParameters, =, new, ParameterConfiguration, []
[==, null, ), {, selectedParameters, =, null, ;, paramDim, =, 0, ;, }, else, {, this, ., selectedParameters, =, new]
[), {, selectedParameters, =, null, ;, paramDim, =, 0, ;, }, else, {, this, ., selectedParameters, =, new, ParameterConfiguration, []
[=, null, ;, paramDim, =, 0, ;, }, else, {, this, ., selectedParameters, =, new, ParameterConfiguration, [, parameters, ., length]
[;, paramDim, =, 0, ;, }, else, {, this, ., selectedParameters, =, new, ParameterConfiguration, [, parameters, ., length, ], ;]
[=, 0, ;, }, else, {, this, ., selectedParameters, =, new, ParameterConfiguration, [, parameters, ., length, ], ;, for, (]
[;, }, else, {, this, ., selectedParameters, =, new, ParameterConfiguration, [, parameters, ., length, ], ;, for, (, int, i]
[=, new, ParameterConfiguration, [, parameters, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, .]
[., selectedParameters, =, new, ParameterConfiguration, [, parameters, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, parameters, ., length, ;, ++, i, ), {, selectedParameters, []
[], ;, for, (, int, i, =, 0, ;, i, <, parameters, ., length, ;, ++, i, ), {, selectedParameters]
[., length, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ., length, ;, ++, i, )]
[;, i, <, parameters, ., length, ;, ++, i, ), {, selectedParameters, [, i, ], =, new, ParameterConfiguration, (, parameters]
[;, ++, i, ), {, selectedParameters, [, i, ], =, new, ParameterConfiguration, (, parameters, [, i, ], ,, Double, .]
[<, parameters, ., length, ;, ++, i, ), {, selectedParameters, [, i, ], =, new, ParameterConfiguration, (, parameters, [, i]
[;, ++, i, ), {, selectedParameters, [, i, ], =, new, ParameterConfiguration, (, parameters, [, i, ], ,, Double, .]
[., length, ;, ++, i, ), {, selectedParameters, [, i, ], =, new, ParameterConfiguration, (, parameters, [, i, ], ,]
[), {, selectedParameters, [, i, ], =, new, ParameterConfiguration, (, parameters, [, i, ], ,, Double, ., NaN, ), ;]
[), {, selectedParameters, [, i, ], =, new, ParameterConfiguration, (, parameters, [, i, ], ,, Double, ., NaN, ), ;]
[=, new, ParameterConfiguration, (, parameters, [, i, ], ,, Double, ., NaN, ), ;, }, paramDim, =, parameters, ., length]
[[, i, ], =, new, ParameterConfiguration, (, parameters, [, i, ], ,, Double, ., NaN, ), ;, }, paramDim, =]
[], =, new, ParameterConfiguration, (, parameters, [, i, ], ,, Double, ., NaN, ), ;, }, paramDim, =, parameters, .]
[;, }, paramDim, =, parameters, ., length, ;, }, this, ., dirtyParameter, =, false, ;, this, ., jacobianProviders, =, new]
[,, Double, ., NaN, ), ;, }, paramDim, =, parameters, ., length, ;, }, this, ., dirtyParameter, =, false, ;]
[[, i, ], ,, Double, ., NaN, ), ;, }, paramDim, =, parameters, ., length, ;, }, this, ., dirtyParameter]
[], ,, Double, ., NaN, ), ;, }, paramDim, =, parameters, ., length, ;, }, this, ., dirtyParameter, =, false]
[), ;, }, paramDim, =, parameters, ., length, ;, }, this, ., dirtyParameter, =, false, ;, this, ., jacobianProviders, =]
[., NaN, ), ;, }, paramDim, =, parameters, ., length, ;, }, this, ., dirtyParameter, =, false, ;, this, .]
[=, parameters, ., length, ;, }, this, ., dirtyParameter, =, false, ;, this, ., jacobianProviders, =, new, ArrayList, <, ParameterJacobianProvider]
[;, }, this, ., dirtyParameter, =, false, ;, this, ., jacobianProviders, =, new, ArrayList, <, ParameterJacobianProvider, >, (, ), ;]
[., length, ;, }, this, ., dirtyParameter, =, false, ;, this, ., jacobianProviders, =, new, ArrayList, <, ParameterJacobianProvider, >, (]
[=, false, ;, this, ., jacobianProviders, =, new, ArrayList, <, ParameterJacobianProvider, >, (, ), ;, matricesData, =, new, double, []
[., dirtyParameter, =, false, ;, this, ., jacobianProviders, =, new, ArrayList, <, ParameterJacobianProvider, >, (, ), ;, matricesData, =, new]
[;, this, ., jacobianProviders, =, new, ArrayList, <, ParameterJacobianProvider, >, (, ), ;, matricesData, =, new, double, [, (, stateDim]
[=, new, ArrayList, <, ParameterJacobianProvider, >, (, ), ;, matricesData, =, new, double, [, (, stateDim, +, paramDim, ), *]
[., jacobianProviders, =, new, ArrayList, <, ParameterJacobianProvider, >, (, ), ;, matricesData, =, new, double, [, (, stateDim, +, paramDim]
[;, matricesData, =, new, double, [, (, stateDim, +, paramDim, ), *, stateDim, ], ;, for, (, int, i, =]
[=, new, double, [, (, stateDim, +, paramDim, ), *, stateDim, ], ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, matricesData, [, i, *]
[], ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, matricesData, [, i]
[*, stateDim, ], ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, matricesData]
[), *, stateDim, ], ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {]
[+, paramDim, ), *, stateDim, ], ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++, i]
[), *, stateDim, ], ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, matricesData, [, i]
[;, i, <, stateDim, ;, ++, i, ), {, matricesData, [, i, *, (, stateDim, +, 1, ), ], =]
[;, ++, i, ), {, matricesData, [, i, *, (, stateDim, +, 1, ), ], =, 1.0, ;, }, }]
[<, stateDim, ;, ++, i, ), {, matricesData, [, i, *, (, stateDim, +, 1, ), ], =, 1.0, ;]
[;, ++, i, ), {, matricesData, [, i, *, (, stateDim, +, 1, ), ], =, 1.0, ;, }, }]
[), {, matricesData, [, i, *, (, stateDim, +, 1, ), ], =, 1.0, ;, }, }, public, void, registerVariationalEquations]
[), {, matricesData, [, i, *, (, stateDim, +, 1, ), ], =, 1.0, ;, }, }, public, void, registerVariationalEquations]
[=, 1.0, ;, }, }, public, void, registerVariationalEquations, (, final, ExpandableStatefulODE, expandable, ), throws, DimensionMismatchException, ,, MismatchedEquations, {, final, FirstOrderDifferentialEquations]
[[, i, *, (, stateDim, +, 1, ), ], =, 1.0, ;, }, }, public, void, registerVariationalEquations, (, final, ExpandableStatefulODE]
[], =, 1.0, ;, }, }, public, void, registerVariationalEquations, (, final, ExpandableStatefulODE, expandable, ), throws, DimensionMismatchException, ,, MismatchedEquations, {, final]
[*, (, stateDim, +, 1, ), ], =, 1.0, ;, }, }, public, void, registerVariationalEquations, (, final, ExpandableStatefulODE, expandable, )]
[], =, 1.0, ;, }, }, public, void, registerVariationalEquations, (, final, ExpandableStatefulODE, expandable, ), throws, DimensionMismatchException, ,, MismatchedEquations, {, final]
[), ], =, 1.0, ;, }, }, public, void, registerVariationalEquations, (, final, ExpandableStatefulODE, expandable, ), throws, DimensionMismatchException, ,, MismatchedEquations, {]
[+, 1, ), ], =, 1.0, ;, }, }, public, void, registerVariationalEquations, (, final, ExpandableStatefulODE, expandable, ), throws, DimensionMismatchException, ,]
[), ], =, 1.0, ;, }, }, public, void, registerVariationalEquations, (, final, ExpandableStatefulODE, expandable, ), throws, DimensionMismatchException, ,, MismatchedEquations, {]
[;, }, }, public, void, registerVariationalEquations, (, final, ExpandableStatefulODE, expandable, ), throws, DimensionMismatchException, ,, MismatchedEquations, {, final, FirstOrderDifferentialEquations, ode, =]
[;, if, (, expandable, ., getPrimary, (, ), !=, ode, ), {, throw, new, MismatchedEquations, (, ), ;, }, efode]
[?, (, (, MainStateJacobianWrapper, ), jode, ), ., ode, :, jode, ;, if, (, expandable, ., getPrimary, (, ), !=]
[), ?, (, (, MainStateJacobianWrapper, ), jode, ), ., ode, :, jode, ;, if, (, expandable, ., getPrimary, (, )]
[instanceof, MainStateJacobianWrapper, ), ?, (, (, MainStateJacobianWrapper, ), jode, ), ., ode, :, jode, ;, if, (, expandable, ., getPrimary]
[:, jode, ;, if, (, expandable, ., getPrimary, (, ), !=, ode, ), {, throw, new, MismatchedEquations, (, ), ;]
[., ode, :, jode, ;, if, (, expandable, ., getPrimary, (, ), !=, ode, ), {, throw, new, MismatchedEquations, (]
[), ., ode, :, jode, ;, if, (, expandable, ., getPrimary, (, ), !=, ode, ), {, throw, new, MismatchedEquations]
[), ., ode, :, jode, ;, if, (, expandable, ., getPrimary, (, ), !=, ode, ), {, throw, new, MismatchedEquations]
[;, if, (, expandable, ., getPrimary, (, ), !=, ode, ), {, throw, new, MismatchedEquations, (, ), ;, }, efode]
[), {, throw, new, MismatchedEquations, (, ), ;, }, efode, =, expandable, ;, index, =, efode, ., addSecondaryEquations, (, new]
[!=, ode, ), {, throw, new, MismatchedEquations, (, ), ;, }, efode, =, expandable, ;, index, =, efode, ., addSecondaryEquations]
[., getPrimary, (, ), !=, ode, ), {, throw, new, MismatchedEquations, (, ), ;, }, efode, =, expandable, ;, index]
[), {, throw, new, MismatchedEquations, (, ), ;, }, efode, =, expandable, ;, index, =, efode, ., addSecondaryEquations, (, new]
[;, }, efode, =, expandable, ;, index, =, efode, ., addSecondaryEquations, (, new, JacobiansSecondaryEquations, (, ), ), ;, efode, .]
[=, expandable, ;, index, =, efode, ., addSecondaryEquations, (, new, JacobiansSecondaryEquations, (, ), ), ;, efode, ., setSecondaryState, (, index]
[;, index, =, efode, ., addSecondaryEquations, (, new, JacobiansSecondaryEquations, (, ), ), ;, efode, ., setSecondaryState, (, index, ,, matricesData]
[=, efode, ., addSecondaryEquations, (, new, JacobiansSecondaryEquations, (, ), ), ;, efode, ., setSecondaryState, (, index, ,, matricesData, ), ;]
[;, efode, ., setSecondaryState, (, index, ,, matricesData, ), ;, }, public, void, addParameterJacobianProvider, (, final, ParameterJacobianProvider, provider, ), {]
[., addSecondaryEquations, (, new, JacobiansSecondaryEquations, (, ), ), ;, efode, ., setSecondaryState, (, index, ,, matricesData, ), ;, }, public]
[), ;, efode, ., setSecondaryState, (, index, ,, matricesData, ), ;, }, public, void, addParameterJacobianProvider, (, final, ParameterJacobianProvider, provider, )]
[;, }, public, void, addParameterJacobianProvider, (, final, ParameterJacobianProvider, provider, ), {, jacobianProviders, ., add, (, provider, ), ;, }, public]
[., setSecondaryState, (, index, ,, matricesData, ), ;, }, public, void, addParameterJacobianProvider, (, final, ParameterJacobianProvider, provider, ), {, jacobianProviders, .]
[,, matricesData, ), ;, }, public, void, addParameterJacobianProvider, (, final, ParameterJacobianProvider, provider, ), {, jacobianProviders, ., add, (, provider, )]
[), ;, }, public, void, addParameterJacobianProvider, (, final, ParameterJacobianProvider, provider, ), {, jacobianProviders, ., add, (, provider, ), ;, }]
[;, }, public, void, setParameterizedODE, (, final, ParameterizedODE, parameterizedOde, ), {, this, ., pode, =, parameterizedOde, ;, dirtyParameter, =, true]
[., add, (, provider, ), ;, }, public, void, setParameterizedODE, (, final, ParameterizedODE, parameterizedOde, ), {, this, ., pode, =]
[), ;, }, public, void, setParameterizedODE, (, final, ParameterizedODE, parameterizedOde, ), {, this, ., pode, =, parameterizedOde, ;, dirtyParameter, =]
[=, parameterizedOde, ;, dirtyParameter, =, true, ;, }, public, void, setParameterStep, (, final, String, parameter, ,, final, double, hP, )]
[., pode, =, parameterizedOde, ;, dirtyParameter, =, true, ;, }, public, void, setParameterStep, (, final, String, parameter, ,, final, double]
[;, dirtyParameter, =, true, ;, }, public, void, setParameterStep, (, final, String, parameter, ,, final, double, hP, ), throws, UnknownParameterException]
[=, true, ;, }, public, void, setParameterStep, (, final, String, parameter, ,, final, double, hP, ), throws, UnknownParameterException, {, for]
[;, }, public, void, setParameterStep, (, final, String, parameter, ,, final, double, hP, ), throws, UnknownParameterException, {, for, (, ParameterConfiguration]
[), {, if, (, parameter, ., equals, (, param, ., getParameterName, (, ), ), ), {, param, ., setHP, (]
[), {, param, ., setHP, (, hP, ), ;, dirtyParameter, =, true, ;, return, ;, }, }, throw, new, UnknownParameterException]
[., equals, (, param, ., getParameterName, (, ), ), ), {, param, ., setHP, (, hP, ), ;, dirtyParameter, =]
[), ), {, param, ., setHP, (, hP, ), ;, dirtyParameter, =, true, ;, return, ;, }, }, throw, new]
[., getParameterName, (, ), ), ), {, param, ., setHP, (, hP, ), ;, dirtyParameter, =, true, ;, return, ;]
[;, dirtyParameter, =, true, ;, return, ;, }, }, throw, new, UnknownParameterException, (, parameter, ), ;, }, public, void, setInitialMainStateJacobian]
[., setHP, (, hP, ), ;, dirtyParameter, =, true, ;, return, ;, }, }, throw, new, UnknownParameterException, (, parameter, )]
[), ;, dirtyParameter, =, true, ;, return, ;, }, }, throw, new, UnknownParameterException, (, parameter, ), ;, }, public, void]
[=, true, ;, return, ;, }, }, throw, new, UnknownParameterException, (, parameter, ), ;, }, public, void, setInitialMainStateJacobian, (, final]
[;, return, ;, }, }, throw, new, UnknownParameterException, (, parameter, ), ;, }, public, void, setInitialMainStateJacobian, (, final, double, []
[;, }, public, void, setInitialMainStateJacobian, (, final, double, [, ], [, ], dYdY0, ), throws, DimensionMismatchException, {, checkDimension, (, stateDim]
[), ;, }, public, void, setInitialMainStateJacobian, (, final, double, [, ], [, ], dYdY0, ), throws, DimensionMismatchException, {, checkDimension, (]
[;, checkDimension, (, stateDim, ,, dYdY0, [, 0, ], ), ;, int, i, =, 0, ;, for, (, final, double]
[,, dYdY0, ), ;, checkDimension, (, stateDim, ,, dYdY0, [, 0, ], ), ;, int, i, =, 0, ;, for]
[), ;, checkDimension, (, stateDim, ,, dYdY0, [, 0, ], ), ;, int, i, =, 0, ;, for, (, final]
[;, int, i, =, 0, ;, for, (, final, double, [, ], row, :, dYdY0, ), {, System, ., arraycopy]
[,, dYdY0, [, 0, ], ), ;, int, i, =, 0, ;, for, (, final, double, [, ], row, :]
[), ;, int, i, =, 0, ;, for, (, final, double, [, ], row, :, dYdY0, ), {, System, .]
[[, 0, ], ), ;, int, i, =, 0, ;, for, (, final, double, [, ], row, :, dYdY0, )]
[], ), ;, int, i, =, 0, ;, for, (, final, double, [, ], row, :, dYdY0, ), {, System]
[;, for, (, final, double, [, ], row, :, dYdY0, ), {, System, ., arraycopy, (, row, ,, 0, ,]
[), {, System, ., arraycopy, (, row, ,, 0, ,, matricesData, ,, i, ,, stateDim, ), ;, i, +=, stateDim]
[;, i, +=, stateDim, ;, }, if, (, efode, !=, null, ), {, efode, ., setSecondaryState, (, index, ,, matricesData]
[., arraycopy, (, row, ,, 0, ,, matricesData, ,, i, ,, stateDim, ), ;, i, +=, stateDim, ;, }, if]
[,, 0, ,, matricesData, ,, i, ,, stateDim, ), ;, i, +=, stateDim, ;, }, if, (, efode, !=, null]
[,, matricesData, ,, i, ,, stateDim, ), ;, i, +=, stateDim, ;, }, if, (, efode, !=, null, ), {]
[,, i, ,, stateDim, ), ;, i, +=, stateDim, ;, }, if, (, efode, !=, null, ), {, efode, .]
[,, stateDim, ), ;, i, +=, stateDim, ;, }, if, (, efode, !=, null, ), {, efode, ., setSecondaryState, (]
[), ;, i, +=, stateDim, ;, }, if, (, efode, !=, null, ), {, efode, ., setSecondaryState, (, index, ,]
[+=, stateDim, ;, }, if, (, efode, !=, null, ), {, efode, ., setSecondaryState, (, index, ,, matricesData, ), ;]
[;, }, if, (, efode, !=, null, ), {, efode, ., setSecondaryState, (, index, ,, matricesData, ), ;, }, }]
[), {, efode, ., setSecondaryState, (, index, ,, matricesData, ), ;, }, }, public, void, setInitialParameterJacobian, (, final, String, pName]
[!=, null, ), {, efode, ., setSecondaryState, (, index, ,, matricesData, ), ;, }, }, public, void, setInitialParameterJacobian, (, final]
[), {, efode, ., setSecondaryState, (, index, ,, matricesData, ), ;, }, }, public, void, setInitialParameterJacobian, (, final, String, pName]
[;, }, }, public, void, setInitialParameterJacobian, (, final, String, pName, ,, final, double, [, ], dYdP, ), throws, UnknownParameterException, ,]
[., setSecondaryState, (, index, ,, matricesData, ), ;, }, }, public, void, setInitialParameterJacobian, (, final, String, pName, ,, final, double]
[,, matricesData, ), ;, }, }, public, void, setInitialParameterJacobian, (, final, String, pName, ,, final, double, [, ], dYdP, )]
[), ;, }, }, public, void, setInitialParameterJacobian, (, final, String, pName, ,, final, double, [, ], dYdP, ), throws, UnknownParameterException]
[;, int, i, =, stateDim, *, stateDim, ;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (, pName, .]
[,, dYdP, ), ;, int, i, =, stateDim, *, stateDim, ;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if]
[), ;, int, i, =, stateDim, *, stateDim, ;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (, pName]
[;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (, pName, ., equals, (, param, ., getParameterName, (, )]
[*, stateDim, ;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (, pName, ., equals, (, param, ., getParameterName]
[;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (, pName, ., equals, (, param, ., getParameterName, (, )]
[), {, if, (, pName, ., equals, (, param, ., getParameterName, (, ), ), ), {, System, ., arraycopy, (]
[), {, System, ., arraycopy, (, dYdP, ,, 0, ,, matricesData, ,, i, ,, stateDim, ), ;, if, (, efode]
[., equals, (, param, ., getParameterName, (, ), ), ), {, System, ., arraycopy, (, dYdP, ,, 0, ,, matricesData]
[), ), {, System, ., arraycopy, (, dYdP, ,, 0, ,, matricesData, ,, i, ,, stateDim, ), ;, if, (]
[., getParameterName, (, ), ), ), {, System, ., arraycopy, (, dYdP, ,, 0, ,, matricesData, ,, i, ,, stateDim]
[;, if, (, efode, !=, null, ), {, efode, ., setSecondaryState, (, index, ,, matricesData, ), ;, }, return, ;]
[., arraycopy, (, dYdP, ,, 0, ,, matricesData, ,, i, ,, stateDim, ), ;, if, (, efode, !=, null, )]
[,, 0, ,, matricesData, ,, i, ,, stateDim, ), ;, if, (, efode, !=, null, ), {, efode, ., setSecondaryState]
[,, matricesData, ,, i, ,, stateDim, ), ;, if, (, efode, !=, null, ), {, efode, ., setSecondaryState, (, index]
[,, i, ,, stateDim, ), ;, if, (, efode, !=, null, ), {, efode, ., setSecondaryState, (, index, ,, matricesData]
[,, stateDim, ), ;, if, (, efode, !=, null, ), {, efode, ., setSecondaryState, (, index, ,, matricesData, ), ;]
[), ;, if, (, efode, !=, null, ), {, efode, ., setSecondaryState, (, index, ,, matricesData, ), ;, }, return]
[), {, efode, ., setSecondaryState, (, index, ,, matricesData, ), ;, }, return, ;, }, i, +=, stateDim, ;, }]
[!=, null, ), {, efode, ., setSecondaryState, (, index, ,, matricesData, ), ;, }, return, ;, }, i, +=, stateDim]
[), {, efode, ., setSecondaryState, (, index, ,, matricesData, ), ;, }, return, ;, }, i, +=, stateDim, ;, }]
[;, }, return, ;, }, i, +=, stateDim, ;, }, throw, new, UnknownParameterException, (, pName, ), ;, }, public, void]
[., setSecondaryState, (, index, ,, matricesData, ), ;, }, return, ;, }, i, +=, stateDim, ;, }, throw, new, UnknownParameterException]
[,, matricesData, ), ;, }, return, ;, }, i, +=, stateDim, ;, }, throw, new, UnknownParameterException, (, pName, ), ;]
[), ;, }, return, ;, }, i, +=, stateDim, ;, }, throw, new, UnknownParameterException, (, pName, ), ;, }, public]
[+=, stateDim, ;, }, throw, new, UnknownParameterException, (, pName, ), ;, }, public, void, getCurrentMainSetJacobian, (, final, double, [, ]]
[;, }, throw, new, UnknownParameterException, (, pName, ), ;, }, public, void, getCurrentMainSetJacobian, (, final, double, [, ], [, ]]
[;, }, public, void, getCurrentMainSetJacobian, (, final, double, [, ], [, ], dYdY0, ), {, double, [, ], p, =]
[), ;, }, public, void, getCurrentMainSetJacobian, (, final, double, [, ], [, ], dYdY0, ), {, double, [, ], p]
[;, int, j, =, 0, ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, i, ++, )]
[., getSecondaryState, (, index, ), ;, int, j, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, int, j, =, 0, ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, i, ++]
[;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, i, ++, ), {, System, ., arraycopy, (]
[;, i, <, stateDim, ;, i, ++, ), {, System, ., arraycopy, (, p, ,, j, ,, dYdY0, [, i]
[;, i, ++, ), {, System, ., arraycopy, (, p, ,, j, ,, dYdY0, [, i, ], ,, 0, ,]
[<, stateDim, ;, i, ++, ), {, System, ., arraycopy, (, p, ,, j, ,, dYdY0, [, i, ], ,]
[;, i, ++, ), {, System, ., arraycopy, (, p, ,, j, ,, dYdY0, [, i, ], ,, 0, ,]
[), {, System, ., arraycopy, (, p, ,, j, ,, dYdY0, [, i, ], ,, 0, ,, stateDim, ), ;]
[++, ), {, System, ., arraycopy, (, p, ,, j, ,, dYdY0, [, i, ], ,, 0, ,, stateDim, )]
[;, j, +=, stateDim, ;, }, }, public, void, getCurrentParameterJacobian, (, String, pName, ,, final, double, [, ], dYdP, )]
[., arraycopy, (, p, ,, j, ,, dYdY0, [, i, ], ,, 0, ,, stateDim, ), ;, j, +=, stateDim]
[,, j, ,, dYdY0, [, i, ], ,, 0, ,, stateDim, ), ;, j, +=, stateDim, ;, }, }, public]
[,, dYdY0, [, i, ], ,, 0, ,, stateDim, ), ;, j, +=, stateDim, ;, }, }, public, void, getCurrentParameterJacobian]
[,, 0, ,, stateDim, ), ;, j, +=, stateDim, ;, }, }, public, void, getCurrentParameterJacobian, (, String, pName, ,, final]
[[, i, ], ,, 0, ,, stateDim, ), ;, j, +=, stateDim, ;, }, }, public, void, getCurrentParameterJacobian, (, String]
[], ,, 0, ,, stateDim, ), ;, j, +=, stateDim, ;, }, }, public, void, getCurrentParameterJacobian, (, String, pName, ,]
[,, stateDim, ), ;, j, +=, stateDim, ;, }, }, public, void, getCurrentParameterJacobian, (, String, pName, ,, final, double, []
[), ;, j, +=, stateDim, ;, }, }, public, void, getCurrentParameterJacobian, (, String, pName, ,, final, double, [, ], dYdP]
[+=, stateDim, ;, }, }, public, void, getCurrentParameterJacobian, (, String, pName, ,, final, double, [, ], dYdP, ), {, double]
[;, }, }, public, void, getCurrentParameterJacobian, (, String, pName, ,, final, double, [, ], dYdP, ), {, double, [, ]]
[;, int, i, =, stateDim, *, stateDim, ;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (, param, .]
[., getSecondaryState, (, index, ), ;, int, i, =, stateDim, *, stateDim, ;, for, (, ParameterConfiguration, param, :, selectedParameters, )]
[), ;, int, i, =, stateDim, *, stateDim, ;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (, param]
[;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (, param, ., getParameterName, (, ), ., equals, (, pName]
[*, stateDim, ;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (, param, ., getParameterName, (, ), ., equals]
[;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (, param, ., getParameterName, (, ), ., equals, (, pName]
[), {, if, (, param, ., getParameterName, (, ), ., equals, (, pName, ), ), {, System, ., arraycopy, (]
[), {, System, ., arraycopy, (, p, ,, i, ,, dYdP, ,, 0, ,, stateDim, ), ;, return, ;, }]
[., equals, (, pName, ), ), {, System, ., arraycopy, (, p, ,, i, ,, dYdP, ,, 0, ,, stateDim]
[., getParameterName, (, ), ., equals, (, pName, ), ), {, System, ., arraycopy, (, p, ,, i, ,, dYdP]
[), ), {, System, ., arraycopy, (, p, ,, i, ,, dYdP, ,, 0, ,, stateDim, ), ;, return, ;]
[;, return, ;, }, i, +=, stateDim, ;, }, }, private, void, checkDimension, (, final, int, expected, ,, final, Object]
[., arraycopy, (, p, ,, i, ,, dYdP, ,, 0, ,, stateDim, ), ;, return, ;, }, i, +=, stateDim]
[,, i, ,, dYdP, ,, 0, ,, stateDim, ), ;, return, ;, }, i, +=, stateDim, ;, }, }, private]
[,, dYdP, ,, 0, ,, stateDim, ), ;, return, ;, }, i, +=, stateDim, ;, }, }, private, void, checkDimension]
[,, 0, ,, stateDim, ), ;, return, ;, }, i, +=, stateDim, ;, }, }, private, void, checkDimension, (, final]
[,, stateDim, ), ;, return, ;, }, i, +=, stateDim, ;, }, }, private, void, checkDimension, (, final, int, expected]
[), ;, return, ;, }, i, +=, stateDim, ;, }, }, private, void, checkDimension, (, final, int, expected, ,, final]
[+=, stateDim, ;, }, }, private, void, checkDimension, (, final, int, expected, ,, final, Object, array, ), throws, DimensionMismatchException, {]
[;, }, }, private, void, checkDimension, (, final, int, expected, ,, final, Object, array, ), throws, DimensionMismatchException, {, int, arrayDimension]
[;, if, (, arrayDimension, !=, expected, ), {, throw, new, DimensionMismatchException, (, arrayDimension, ,, expected, ), ;, }, }, private]
[?, 0, :, Array, ., getLength, (, array, ), ;, if, (, arrayDimension, !=, expected, ), {, throw, new, DimensionMismatchException]
[), ?, 0, :, Array, ., getLength, (, array, ), ;, if, (, arrayDimension, !=, expected, ), {, throw, new]
[==, null, ), ?, 0, :, Array, ., getLength, (, array, ), ;, if, (, arrayDimension, !=, expected, ), {]
[), ?, 0, :, Array, ., getLength, (, array, ), ;, if, (, arrayDimension, !=, expected, ), {, throw, new]
[:, Array, ., getLength, (, array, ), ;, if, (, arrayDimension, !=, expected, ), {, throw, new, DimensionMismatchException, (, arrayDimension]
[;, if, (, arrayDimension, !=, expected, ), {, throw, new, DimensionMismatchException, (, arrayDimension, ,, expected, ), ;, }, }, private]
[., getLength, (, array, ), ;, if, (, arrayDimension, !=, expected, ), {, throw, new, DimensionMismatchException, (, arrayDimension, ,, expected]
[), ;, if, (, arrayDimension, !=, expected, ), {, throw, new, DimensionMismatchException, (, arrayDimension, ,, expected, ), ;, }, }]
[), {, throw, new, DimensionMismatchException, (, arrayDimension, ,, expected, ), ;, }, }, private, class, JacobiansSecondaryEquations, implements, SecondaryEquations, {, public]
[!=, expected, ), {, throw, new, DimensionMismatchException, (, arrayDimension, ,, expected, ), ;, }, }, private, class, JacobiansSecondaryEquations, implements, SecondaryEquations]
[), {, throw, new, DimensionMismatchException, (, arrayDimension, ,, expected, ), ;, }, }, private, class, JacobiansSecondaryEquations, implements, SecondaryEquations, {, public]
[;, }, }, private, class, JacobiansSecondaryEquations, implements, SecondaryEquations, {, public, int, getDimension, (, ), {, return, stateDim, *, (, stateDim]
[,, expected, ), ;, }, }, private, class, JacobiansSecondaryEquations, implements, SecondaryEquations, {, public, int, getDimension, (, ), {, return, stateDim]
[), ;, }, }, private, class, JacobiansSecondaryEquations, implements, SecondaryEquations, {, public, int, getDimension, (, ), {, return, stateDim, *, (]
[;, }, public, void, computeDerivatives, (, final, double, t, ,, final, double, [, ], y, ,, final, double, [, ]]
[*, (, stateDim, +, paramDim, ), ;, }, public, void, computeDerivatives, (, final, double, t, ,, final, double, [, ]]
[;, }, public, void, computeDerivatives, (, final, double, t, ,, final, double, [, ], y, ,, final, double, [, ]]
[), ;, }, public, void, computeDerivatives, (, final, double, t, ,, final, double, [, ], y, ,, final, double, []
[+, paramDim, ), ;, }, public, void, computeDerivatives, (, final, double, t, ,, final, double, [, ], y, ,, final]
[), ;, }, public, void, computeDerivatives, (, final, double, t, ,, final, double, [, ], y, ,, final, double, []
[), {, jacobianProviders, ., add, (, new, ParameterJacobianWrapper, (, jode, ,, pode, ,, selectedParameters, ), ), ;, dirtyParameter, =, false]
[&&, (, paramDim, !=, 0, ), ), {, jacobianProviders, ., add, (, new, ParameterJacobianWrapper, (, jode, ,, pode, ,, selectedParameters]
[), {, jacobianProviders, ., add, (, new, ParameterJacobianWrapper, (, jode, ,, pode, ,, selectedParameters, ), ), ;, dirtyParameter, =, false]
[), ), {, jacobianProviders, ., add, (, new, ParameterJacobianWrapper, (, jode, ,, pode, ,, selectedParameters, ), ), ;, dirtyParameter, =]
[!=, 0, ), ), {, jacobianProviders, ., add, (, new, ParameterJacobianWrapper, (, jode, ,, pode, ,, selectedParameters, ), ), ;]
[), ), {, jacobianProviders, ., add, (, new, ParameterJacobianWrapper, (, jode, ,, pode, ,, selectedParameters, ), ), ;, dirtyParameter, =]
[;, dirtyParameter, =, false, ;, }, double, [, ], [, ], dFdY, =, new, double, [, stateDim, ], [, stateDim]
[., add, (, new, ParameterJacobianWrapper, (, jode, ,, pode, ,, selectedParameters, ), ), ;, dirtyParameter, =, false, ;, }, double]
[), ;, dirtyParameter, =, false, ;, }, double, [, ], [, ], dFdY, =, new, double, [, stateDim, ], []
[,, pode, ,, selectedParameters, ), ), ;, dirtyParameter, =, false, ;, }, double, [, ], [, ], dFdY, =, new]
[,, selectedParameters, ), ), ;, dirtyParameter, =, false, ;, }, double, [, ], [, ], dFdY, =, new, double, []
[), ), ;, dirtyParameter, =, false, ;, }, double, [, ], [, ], dFdY, =, new, double, [, stateDim, ]]
[=, false, ;, }, double, [, ], [, ], dFdY, =, new, double, [, stateDim, ], [, stateDim, ], ;]
[;, }, double, [, ], [, ], dFdY, =, new, double, [, stateDim, ], [, stateDim, ], ;, jode, .]
[;, jode, ., computeMainStateJacobian, (, t, ,, y, ,, yDot, ,, dFdY, ), ;, for, (, int, i, =, 0]
[], [, stateDim, ], ;, jode, ., computeMainStateJacobian, (, t, ,, y, ,, yDot, ,, dFdY, ), ;, for, (]
[], ;, jode, ., computeMainStateJacobian, (, t, ,, y, ,, yDot, ,, dFdY, ), ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, final, double, [, ]]
[., computeMainStateJacobian, (, t, ,, y, ,, yDot, ,, dFdY, ), ;, for, (, int, i, =, 0, ;, i]
[,, y, ,, yDot, ,, dFdY, ), ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++]
[,, yDot, ,, dFdY, ), ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, )]
[,, dFdY, ), ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, final]
[), ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, final, double, []
[;, i, <, stateDim, ;, ++, i, ), {, final, double, [, ], dFdYi, =, dFdY, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], dFdYi, =, dFdY, [, i, ], ;, for, (, int, j]
[<, stateDim, ;, ++, i, ), {, final, double, [, ], dFdYi, =, dFdY, [, i, ], ;, for, (]
[;, ++, i, ), {, final, double, [, ], dFdYi, =, dFdY, [, i, ], ;, for, (, int, j]
[), {, final, double, [, ], dFdYi, =, dFdY, [, i, ], ;, for, (, int, j, =, 0, ;]
[), {, final, double, [, ], dFdYi, =, dFdY, [, i, ], ;, for, (, int, j, =, 0, ;]
[;, for, (, int, j, =, 0, ;, j, <, stateDim, ;, ++, j, ), {, double, s, =, 0]
[[, i, ], ;, for, (, int, j, =, 0, ;, j, <, stateDim, ;, ++, j, ), {, double]
[], ;, for, (, int, j, =, 0, ;, j, <, stateDim, ;, ++, j, ), {, double, s, =]
[;, j, <, stateDim, ;, ++, j, ), {, double, s, =, 0, ;, final, int, startIndex, =, j, ;]
[;, ++, j, ), {, double, s, =, 0, ;, final, int, startIndex, =, j, ;, int, zIndex, =, startIndex]
[<, stateDim, ;, ++, j, ), {, double, s, =, 0, ;, final, int, startIndex, =, j, ;, int, zIndex]
[;, ++, j, ), {, double, s, =, 0, ;, final, int, startIndex, =, j, ;, int, zIndex, =, startIndex]
[), {, double, s, =, 0, ;, final, int, startIndex, =, j, ;, int, zIndex, =, startIndex, ;, for, (]
[), {, double, s, =, 0, ;, final, int, startIndex, =, j, ;, int, zIndex, =, startIndex, ;, for, (]
[;, final, int, startIndex, =, j, ;, int, zIndex, =, startIndex, ;, for, (, int, l, =, 0, ;, l]
[;, int, zIndex, =, startIndex, ;, for, (, int, l, =, 0, ;, l, <, stateDim, ;, ++, l, )]
[;, for, (, int, l, =, 0, ;, l, <, stateDim, ;, ++, l, ), {, s, +=, dFdYi, []
[;, l, <, stateDim, ;, ++, l, ), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ]]
[;, ++, l, ), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, +=, stateDim]
[<, stateDim, ;, ++, l, ), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex]
[;, ++, l, ), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, +=, stateDim]
[), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, +=, stateDim, ;, }, zDot]
[), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, +=, stateDim, ;, }, zDot]
[+=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, +=, stateDim, ;, }, zDot, [, startIndex, +]
[;, zIndex, +=, stateDim, ;, }, zDot, [, startIndex, +, i, *, stateDim, ], =, s, ;, }, }, if]
[*, z, [, zIndex, ], ;, zIndex, +=, stateDim, ;, }, zDot, [, startIndex, +, i, *, stateDim, ], =]
[[, l, ], *, z, [, zIndex, ], ;, zIndex, +=, stateDim, ;, }, zDot, [, startIndex, +, i, *]
[], *, z, [, zIndex, ], ;, zIndex, +=, stateDim, ;, }, zDot, [, startIndex, +, i, *, stateDim, ]]
[;, zIndex, +=, stateDim, ;, }, zDot, [, startIndex, +, i, *, stateDim, ], =, s, ;, }, }, if]
[[, zIndex, ], ;, zIndex, +=, stateDim, ;, }, zDot, [, startIndex, +, i, *, stateDim, ], =, s, ;]
[], ;, zIndex, +=, stateDim, ;, }, zDot, [, startIndex, +, i, *, stateDim, ], =, s, ;, }, }]
[+=, stateDim, ;, }, zDot, [, startIndex, +, i, *, stateDim, ], =, s, ;, }, }, if, (, paramDim]
[;, }, zDot, [, startIndex, +, i, *, stateDim, ], =, s, ;, }, }, if, (, paramDim, !=, 0]
[=, s, ;, }, }, if, (, paramDim, !=, 0, ), {, double, [, ], dFdP, =, new, double, []
[[, startIndex, +, i, *, stateDim, ], =, s, ;, }, }, if, (, paramDim, !=, 0, ), {, double]
[], =, s, ;, }, }, if, (, paramDim, !=, 0, ), {, double, [, ], dFdP, =, new, double]
[+, i, *, stateDim, ], =, s, ;, }, }, if, (, paramDim, !=, 0, ), {, double, [, ]]
[], =, s, ;, }, }, if, (, paramDim, !=, 0, ), {, double, [, ], dFdP, =, new, double]
[*, stateDim, ], =, s, ;, }, }, if, (, paramDim, !=, 0, ), {, double, [, ], dFdP, =]
[], =, s, ;, }, }, if, (, paramDim, !=, 0, ), {, double, [, ], dFdP, =, new, double]
[;, }, }, if, (, paramDim, !=, 0, ), {, double, [, ], dFdP, =, new, double, [, stateDim, ]]
[), {, double, [, ], dFdP, =, new, double, [, stateDim, ], ;, int, startIndex, =, stateDim, *, stateDim, ;]
[!=, 0, ), {, double, [, ], dFdP, =, new, double, [, stateDim, ], ;, int, startIndex, =, stateDim, *]
[), {, double, [, ], dFdP, =, new, double, [, stateDim, ], ;, int, startIndex, =, stateDim, *, stateDim, ;]
[;, int, startIndex, =, stateDim, *, stateDim, ;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, boolean, found, =, false]
[], ;, int, startIndex, =, stateDim, *, stateDim, ;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, boolean, found, =]
[;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, boolean, found, =, false, ;, for, (, int, k, =, 0]
[*, stateDim, ;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, boolean, found, =, false, ;, for, (, int, k]
[;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, boolean, found, =, false, ;, for, (, int, k, =, 0]
[), {, boolean, found, =, false, ;, for, (, int, k, =, 0, ;, (, !, found, ), &&, (]
[;, for, (, int, k, =, 0, ;, (, !, found, ), &&, (, k, <, jacobianProviders, ., size, (]
[;, (, !, found, ), &&, (, k, <, jacobianProviders, ., size, (, ), ), ;, ++, k, ), {]
[;, ++, k, ), {, final, ParameterJacobianProvider, provider, =, jacobianProviders, ., get, (, k, ), ;, if, (, provider, .]
[&&, (, k, <, jacobianProviders, ., size, (, ), ), ;, ++, k, ), {, final, ParameterJacobianProvider, provider, =, jacobianProviders]
[), &&, (, k, <, jacobianProviders, ., size, (, ), ), ;, ++, k, ), {, final, ParameterJacobianProvider, provider, =]
[), &&, (, k, <, jacobianProviders, ., size, (, ), ), ;, ++, k, ), {, final, ParameterJacobianProvider, provider, =]
[;, ++, k, ), {, final, ParameterJacobianProvider, provider, =, jacobianProviders, ., get, (, k, ), ;, if, (, provider, .]
[), ;, ++, k, ), {, final, ParameterJacobianProvider, provider, =, jacobianProviders, ., get, (, k, ), ;, if, (, provider]
[<, jacobianProviders, ., size, (, ), ), ;, ++, k, ), {, final, ParameterJacobianProvider, provider, =, jacobianProviders, ., get, (]
[), ;, ++, k, ), {, final, ParameterJacobianProvider, provider, =, jacobianProviders, ., get, (, k, ), ;, if, (, provider]
[., size, (, ), ), ;, ++, k, ), {, final, ParameterJacobianProvider, provider, =, jacobianProviders, ., get, (, k, )]
[), {, final, ParameterJacobianProvider, provider, =, jacobianProviders, ., get, (, k, ), ;, if, (, provider, ., isSupported, (, param]
[), {, final, ParameterJacobianProvider, provider, =, jacobianProviders, ., get, (, k, ), ;, if, (, provider, ., isSupported, (, param]
[;, if, (, provider, ., isSupported, (, param, ., getParameterName, (, ), ), ), {, provider, ., computeParameterJacobian, (, t]
[., get, (, k, ), ;, if, (, provider, ., isSupported, (, param, ., getParameterName, (, ), ), ), {]
[), ;, if, (, provider, ., isSupported, (, param, ., getParameterName, (, ), ), ), {, provider, ., computeParameterJacobian, (]
[), {, provider, ., computeParameterJacobian, (, t, ,, y, ,, yDot, ,, param, ., getParameterName, (, ), ,, dFdP, )]
[., isSupported, (, param, ., getParameterName, (, ), ), ), {, provider, ., computeParameterJacobian, (, t, ,, y, ,, yDot]
[), ), {, provider, ., computeParameterJacobian, (, t, ,, y, ,, yDot, ,, param, ., getParameterName, (, ), ,, dFdP]
[., getParameterName, (, ), ), ), {, provider, ., computeParameterJacobian, (, t, ,, y, ,, yDot, ,, param, ., getParameterName]
[;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, final, double, [, ]]
[., computeParameterJacobian, (, t, ,, y, ,, yDot, ,, param, ., getParameterName, (, ), ,, dFdP, ), ;, for, (]
[,, y, ,, yDot, ,, param, ., getParameterName, (, ), ,, dFdP, ), ;, for, (, int, i, =, 0]
[,, yDot, ,, param, ., getParameterName, (, ), ,, dFdP, ), ;, for, (, int, i, =, 0, ;, i]
[,, param, ., getParameterName, (, ), ,, dFdP, ), ;, for, (, int, i, =, 0, ;, i, <, stateDim]
[,, dFdP, ), ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, final]
[., getParameterName, (, ), ,, dFdP, ), ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++]
[), ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, final, double, []
[;, i, <, stateDim, ;, ++, i, ), {, final, double, [, ], dFdYi, =, dFdY, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], dFdYi, =, dFdY, [, i, ], ;, int, zIndex, =, startIndex]
[<, stateDim, ;, ++, i, ), {, final, double, [, ], dFdYi, =, dFdY, [, i, ], ;, int, zIndex]
[;, ++, i, ), {, final, double, [, ], dFdYi, =, dFdY, [, i, ], ;, int, zIndex, =, startIndex]
[), {, final, double, [, ], dFdYi, =, dFdY, [, i, ], ;, int, zIndex, =, startIndex, ;, double, s]
[), {, final, double, [, ], dFdYi, =, dFdY, [, i, ], ;, int, zIndex, =, startIndex, ;, double, s]
[;, int, zIndex, =, startIndex, ;, double, s, =, dFdP, [, i, ], ;, for, (, int, l, =, 0]
[[, i, ], ;, int, zIndex, =, startIndex, ;, double, s, =, dFdP, [, i, ], ;, for, (, int]
[], ;, int, zIndex, =, startIndex, ;, double, s, =, dFdP, [, i, ], ;, for, (, int, l, =]
[;, double, s, =, dFdP, [, i, ], ;, for, (, int, l, =, 0, ;, l, <, stateDim, ;]
[;, for, (, int, l, =, 0, ;, l, <, stateDim, ;, ++, l, ), {, s, +=, dFdYi, []
[[, i, ], ;, for, (, int, l, =, 0, ;, l, <, stateDim, ;, ++, l, ), {, s]
[], ;, for, (, int, l, =, 0, ;, l, <, stateDim, ;, ++, l, ), {, s, +=, dFdYi]
[;, l, <, stateDim, ;, ++, l, ), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ]]
[;, ++, l, ), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, ++, ;]
[<, stateDim, ;, ++, l, ), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex]
[;, ++, l, ), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, ++, ;]
[), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, ++, ;, }, zDot, []
[), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, ++, ;, }, zDot, []
[+=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, ++, ;, }, zDot, [, startIndex, +, i]
[;, zIndex, ++, ;, }, zDot, [, startIndex, +, i, ], =, s, ;, }, found, =, true, ;, }]
[*, z, [, zIndex, ], ;, zIndex, ++, ;, }, zDot, [, startIndex, +, i, ], =, s, ;, }]
[[, l, ], *, z, [, zIndex, ], ;, zIndex, ++, ;, }, zDot, [, startIndex, +, i, ], =]
[], *, z, [, zIndex, ], ;, zIndex, ++, ;, }, zDot, [, startIndex, +, i, ], =, s, ;]
[;, zIndex, ++, ;, }, zDot, [, startIndex, +, i, ], =, s, ;, }, found, =, true, ;, }]
[[, zIndex, ], ;, zIndex, ++, ;, }, zDot, [, startIndex, +, i, ], =, s, ;, }, found, =]
[], ;, zIndex, ++, ;, }, zDot, [, startIndex, +, i, ], =, s, ;, }, found, =, true, ;]
[;, }, zDot, [, startIndex, +, i, ], =, s, ;, }, found, =, true, ;, }, }, if, (]
[++, ;, }, zDot, [, startIndex, +, i, ], =, s, ;, }, found, =, true, ;, }, }, if]
[=, s, ;, }, found, =, true, ;, }, }, if, (, !, found, ), {, Arrays, ., fill, (]
[[, startIndex, +, i, ], =, s, ;, }, found, =, true, ;, }, }, if, (, !, found, )]
[], =, s, ;, }, found, =, true, ;, }, }, if, (, !, found, ), {, Arrays, ., fill]
[+, i, ], =, s, ;, }, found, =, true, ;, }, }, if, (, !, found, ), {, Arrays]
[], =, s, ;, }, found, =, true, ;, }, }, if, (, !, found, ), {, Arrays, ., fill]
[;, }, found, =, true, ;, }, }, if, (, !, found, ), {, Arrays, ., fill, (, zDot, ,]
[=, true, ;, }, }, if, (, !, found, ), {, Arrays, ., fill, (, zDot, ,, startIndex, ,, startIndex]
[;, }, }, if, (, !, found, ), {, Arrays, ., fill, (, zDot, ,, startIndex, ,, startIndex, +, stateDim]
[), {, Arrays, ., fill, (, zDot, ,, startIndex, ,, startIndex, +, stateDim, ,, 0.0, ), ;, }, startIndex, +=]
[), {, Arrays, ., fill, (, zDot, ,, startIndex, ,, startIndex, +, stateDim, ,, 0.0, ), ;, }, startIndex, +=]
[;, }, startIndex, +=, stateDim, ;, }, }, }, }, private, static, class, MainStateJacobianWrapper, implements, MainStateJacobianProvider, {, private, final, FirstOrderDifferentialEquations]
[., fill, (, zDot, ,, startIndex, ,, startIndex, +, stateDim, ,, 0.0, ), ;, }, startIndex, +=, stateDim, ;, }]
[,, startIndex, ,, startIndex, +, stateDim, ,, 0.0, ), ;, }, startIndex, +=, stateDim, ;, }, }, }, }, private]
[,, startIndex, +, stateDim, ,, 0.0, ), ;, }, startIndex, +=, stateDim, ;, }, }, }, }, private, static, class]
[,, 0.0, ), ;, }, startIndex, +=, stateDim, ;, }, }, }, }, private, static, class, MainStateJacobianWrapper, implements, MainStateJacobianProvider, {]
[+, stateDim, ,, 0.0, ), ;, }, startIndex, +=, stateDim, ;, }, }, }, }, private, static, class, MainStateJacobianWrapper, implements]
[,, 0.0, ), ;, }, startIndex, +=, stateDim, ;, }, }, }, }, private, static, class, MainStateJacobianWrapper, implements, MainStateJacobianProvider, {]
[), ;, }, startIndex, +=, stateDim, ;, }, }, }, }, private, static, class, MainStateJacobianWrapper, implements, MainStateJacobianProvider, {, private, final]
[+=, stateDim, ;, }, }, }, }, private, static, class, MainStateJacobianWrapper, implements, MainStateJacobianProvider, {, private, final, FirstOrderDifferentialEquations, ode, ;, private]
[;, }, }, }, }, private, static, class, MainStateJacobianWrapper, implements, MainStateJacobianProvider, {, private, final, FirstOrderDifferentialEquations, ode, ;, private, final, double]
[=, ode, ;, this, ., hY, =, hY, ., clone, (, ), ;, if, (, hY, ., length, !=, ode]
[., ode, =, ode, ;, this, ., hY, =, hY, ., clone, (, ), ;, if, (, hY, ., length]
[;, this, ., hY, =, hY, ., clone, (, ), ;, if, (, hY, ., length, !=, ode, ., getDimension]
[=, hY, ., clone, (, ), ;, if, (, hY, ., length, !=, ode, ., getDimension, (, ), ), {]
[., hY, =, hY, ., clone, (, ), ;, if, (, hY, ., length, !=, ode, ., getDimension, (, )]
[;, if, (, hY, ., length, !=, ode, ., getDimension, (, ), ), {, throw, new, DimensionMismatchException, (, ode, .]
[., clone, (, ), ;, if, (, hY, ., length, !=, ode, ., getDimension, (, ), ), {, throw, new]
[), {, throw, new, DimensionMismatchException, (, ode, ., getDimension, (, ), ,, hY, ., length, ), ;, }, }, public]
[!=, ode, ., getDimension, (, ), ), {, throw, new, DimensionMismatchException, (, ode, ., getDimension, (, ), ,, hY, .]
[., length, !=, ode, ., getDimension, (, ), ), {, throw, new, DimensionMismatchException, (, ode, ., getDimension, (, ), ,]
[), {, throw, new, DimensionMismatchException, (, ode, ., getDimension, (, ), ,, hY, ., length, ), ;, }, }, public]
[., getDimension, (, ), ), {, throw, new, DimensionMismatchException, (, ode, ., getDimension, (, ), ,, hY, ., length, )]
[;, }, }, public, int, getDimension, (, ), {, return, ode, ., getDimension, (, ), ;, }, public, void, computeDerivatives]
[,, hY, ., length, ), ;, }, }, public, int, getDimension, (, ), {, return, ode, ., getDimension, (, )]
[., getDimension, (, ), ,, hY, ., length, ), ;, }, }, public, int, getDimension, (, ), {, return, ode]
[), ;, }, }, public, int, getDimension, (, ), {, return, ode, ., getDimension, (, ), ;, }, public, void]
[., length, ), ;, }, }, public, int, getDimension, (, ), {, return, ode, ., getDimension, (, ), ;, }]
[;, }, public, void, computeDerivatives, (, double, t, ,, double, [, ], y, ,, double, [, ], yDot, ), throws]
[., getDimension, (, ), ;, }, public, void, computeDerivatives, (, double, t, ,, double, [, ], y, ,, double, []
[;, }, public, void, computeMainStateJacobian, (, double, t, ,, double, [, ], y, ,, double, [, ], yDot, ,, double]
[., computeDerivatives, (, t, ,, y, ,, yDot, ), ;, }, public, void, computeMainStateJacobian, (, double, t, ,, double, []
[,, y, ,, yDot, ), ;, }, public, void, computeMainStateJacobian, (, double, t, ,, double, [, ], y, ,, double]
[,, yDot, ), ;, }, public, void, computeMainStateJacobian, (, double, t, ,, double, [, ], y, ,, double, [, ]]
[), ;, }, public, void, computeMainStateJacobian, (, double, t, ,, double, [, ], y, ,, double, [, ], yDot, ,]
[;, final, double, [, ], tmpDot, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;]
[., getDimension, (, ), ;, final, double, [, ], tmpDot, =, new, double, [, n, ], ;, for, (, int]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, final, double, savedYj, =]
[], ;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, final, double, savedYj]
[;, j, <, n, ;, ++, j, ), {, final, double, savedYj, =, y, [, j, ], ;, y, []
[;, ++, j, ), {, final, double, savedYj, =, y, [, j, ], ;, y, [, j, ], +=, hY]
[<, n, ;, ++, j, ), {, final, double, savedYj, =, y, [, j, ], ;, y, [, j, ]]
[;, ++, j, ), {, final, double, savedYj, =, y, [, j, ], ;, y, [, j, ], +=, hY]
[), {, final, double, savedYj, =, y, [, j, ], ;, y, [, j, ], +=, hY, [, j, ]]
[), {, final, double, savedYj, =, y, [, j, ], ;, y, [, j, ], +=, hY, [, j, ]]
[;, y, [, j, ], +=, hY, [, j, ], ;, ode, ., computeDerivatives, (, t, ,, y, ,, tmpDot]
[[, j, ], ;, y, [, j, ], +=, hY, [, j, ], ;, ode, ., computeDerivatives, (, t, ,]
[], ;, y, [, j, ], +=, hY, [, j, ], ;, ode, ., computeDerivatives, (, t, ,, y, ,]
[+=, hY, [, j, ], ;, ode, ., computeDerivatives, (, t, ,, y, ,, tmpDot, ), ;, for, (, int]
[[, j, ], +=, hY, [, j, ], ;, ode, ., computeDerivatives, (, t, ,, y, ,, tmpDot, ), ;]
[], +=, hY, [, j, ], ;, ode, ., computeDerivatives, (, t, ,, y, ,, tmpDot, ), ;, for, (]
[;, ode, ., computeDerivatives, (, t, ,, y, ,, tmpDot, ), ;, for, (, int, i, =, 0, ;, i]
[[, j, ], ;, ode, ., computeDerivatives, (, t, ,, y, ,, tmpDot, ), ;, for, (, int, i, =]
[], ;, ode, ., computeDerivatives, (, t, ,, y, ,, tmpDot, ), ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, dFdY, [, i, ]]
[., computeDerivatives, (, t, ,, y, ,, tmpDot, ), ;, for, (, int, i, =, 0, ;, i, <, n]
[,, y, ,, tmpDot, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, )]
[,, tmpDot, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, dFdY]
[), ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, dFdY, [, i]
[;, i, <, n, ;, ++, i, ), {, dFdY, [, i, ], [, j, ], =, (, tmpDot, []
[;, ++, i, ), {, dFdY, [, i, ], [, j, ], =, (, tmpDot, [, i, ], -, yDot]
[<, n, ;, ++, i, ), {, dFdY, [, i, ], [, j, ], =, (, tmpDot, [, i, ]]
[;, ++, i, ), {, dFdY, [, i, ], [, j, ], =, (, tmpDot, [, i, ], -, yDot]
[), {, dFdY, [, i, ], [, j, ], =, (, tmpDot, [, i, ], -, yDot, [, i, ]]
[), {, dFdY, [, i, ], [, j, ], =, (, tmpDot, [, i, ], -, yDot, [, i, ]]
[=, (, tmpDot, [, i, ], -, yDot, [, i, ], ), /, hY, [, j, ], ;, }, y]
[[, j, ], =, (, tmpDot, [, i, ], -, yDot, [, i, ], ), /, hY, [, j, ]]
[[, i, ], [, j, ], =, (, tmpDot, [, i, ], -, yDot, [, i, ], ), /, hY]
[], [, j, ], =, (, tmpDot, [, i, ], -, yDot, [, i, ], ), /, hY, [, j]
[], =, (, tmpDot, [, i, ], -, yDot, [, i, ], ), /, hY, [, j, ], ;, }]
[;, }, y, [, j, ], =, savedYj, ;, }, }, }, public, static, class, MismatchedEquations, extends, MathIllegalArgumentException, {, private]
[/, hY, [, j, ], ;, }, y, [, j, ], =, savedYj, ;, }, }, }, public, static, class]
[), /, hY, [, j, ], ;, }, y, [, j, ], =, savedYj, ;, }, }, }, public, static]
[-, yDot, [, i, ], ), /, hY, [, j, ], ;, }, y, [, j, ], =, savedYj, ;]
[[, i, ], -, yDot, [, i, ], ), /, hY, [, j, ], ;, }, y, [, j, ]]
[], -, yDot, [, i, ], ), /, hY, [, j, ], ;, }, y, [, j, ], =, savedYj]
[), /, hY, [, j, ], ;, }, y, [, j, ], =, savedYj, ;, }, }, }, public, static]
[[, i, ], ), /, hY, [, j, ], ;, }, y, [, j, ], =, savedYj, ;, }, }]
[], ), /, hY, [, j, ], ;, }, y, [, j, ], =, savedYj, ;, }, }, }, public]
[;, }, y, [, j, ], =, savedYj, ;, }, }, }, public, static, class, MismatchedEquations, extends, MathIllegalArgumentException, {, private]
[[, j, ], ;, }, y, [, j, ], =, savedYj, ;, }, }, }, public, static, class, MismatchedEquations, extends]
[], ;, }, y, [, j, ], =, savedYj, ;, }, }, }, public, static, class, MismatchedEquations, extends, MathIllegalArgumentException, {]
[=, savedYj, ;, }, }, }, public, static, class, MismatchedEquations, extends, MathIllegalArgumentException, {, private, static, final, long, serialVersionUID, =, 20120902L]
[[, j, ], =, savedYj, ;, }, }, }, public, static, class, MismatchedEquations, extends, MathIllegalArgumentException, {, private, static, final, long]
[], =, savedYj, ;, }, }, }, public, static, class, MismatchedEquations, extends, MathIllegalArgumentException, {, private, static, final, long, serialVersionUID, =]
[;, }, }, }, public, static, class, MismatchedEquations, extends, MathIllegalArgumentException, {, private, static, final, long, serialVersionUID, =, 20120902L, ;, public]
[;, public, MismatchedEquations, (, ), {, super, (, LocalizedFormats, ., UNMATCHED_ODE_IN_EXPANDED_SET, ), ;, }, }, }]
[), ;, }, }, }]
[., UNMATCHED_ODE_IN_EXPANDED_SET, ), ;, }, }, }]
