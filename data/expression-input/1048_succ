[;, private, final, AbstractCompiler, compiler, ;, private, final, ReverseAbstractInterpreter, reverseInterpreter, ;, private, Scope, topScope, ;, private, MemoizedScopeCreator, scopeCreator, ;, private]
[., warning, (, "JSC_INTERNAL_ERROR_DATAFLOW", ,, "non-monotonic data-flow analysis", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, ReverseAbstractInterpreter, reverseInterpreter, ;, private, Scope]
[,, "non-monotonic data-flow analysis", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, ReverseAbstractInterpreter, reverseInterpreter, ;, private, Scope, topScope, ;, private, MemoizedScopeCreator]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, ReverseAbstractInterpreter, reverseInterpreter, ;, private, Scope, topScope, ;, private, MemoizedScopeCreator, scopeCreator, ;]
[=, compiler, ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., topScope, =, topScope, ;, this, ., scopeCreator, =, scopeCreator]
[., compiler, =, compiler, ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., topScope, =, topScope, ;, this, ., scopeCreator]
[;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., topScope, =, topScope, ;, this, ., scopeCreator, =, scopeCreator, ;, assertionFunctionsMap]
[=, reverseInterpreter, ;, this, ., topScope, =, topScope, ;, this, ., scopeCreator, =, scopeCreator, ;, assertionFunctionsMap, =, Maps, ., newHashMap]
[., reverseInterpreter, =, reverseInterpreter, ;, this, ., topScope, =, topScope, ;, this, ., scopeCreator, =, scopeCreator, ;, assertionFunctionsMap, =, Maps]
[;, this, ., topScope, =, topScope, ;, this, ., scopeCreator, =, scopeCreator, ;, assertionFunctionsMap, =, Maps, ., newHashMap, (, )]
[=, topScope, ;, this, ., scopeCreator, =, scopeCreator, ;, assertionFunctionsMap, =, Maps, ., newHashMap, (, ), ;, for, (, AssertionFunctionSpec]
[., topScope, =, topScope, ;, this, ., scopeCreator, =, scopeCreator, ;, assertionFunctionsMap, =, Maps, ., newHashMap, (, ), ;, for]
[;, this, ., scopeCreator, =, scopeCreator, ;, assertionFunctionsMap, =, Maps, ., newHashMap, (, ), ;, for, (, AssertionFunctionSpec, assertionFucntion, :]
[=, scopeCreator, ;, assertionFunctionsMap, =, Maps, ., newHashMap, (, ), ;, for, (, AssertionFunctionSpec, assertionFucntion, :, compiler, ., getCodingConvention, (]
[., scopeCreator, =, scopeCreator, ;, assertionFunctionsMap, =, Maps, ., newHashMap, (, ), ;, for, (, AssertionFunctionSpec, assertionFucntion, :, compiler, .]
[;, assertionFunctionsMap, =, Maps, ., newHashMap, (, ), ;, for, (, AssertionFunctionSpec, assertionFucntion, :, compiler, ., getCodingConvention, (, ), .]
[=, Maps, ., newHashMap, (, ), ;, for, (, AssertionFunctionSpec, assertionFucntion, :, compiler, ., getCodingConvention, (, ), ., getAssertionFunctions, (]
[;, for, (, AssertionFunctionSpec, assertionFucntion, :, compiler, ., getCodingConvention, (, ), ., getAssertionFunctions, (, ), ), {, assertionFunctionsMap, ., put]
[., newHashMap, (, ), ;, for, (, AssertionFunctionSpec, assertionFucntion, :, compiler, ., getCodingConvention, (, ), ., getAssertionFunctions, (, ), )]
[), {, assertionFunctionsMap, ., put, (, assertionFucntion, ., getFunctionName, (, ), ,, assertionFucntion, ), ;, }, }, @, Override, public]
[., getAssertionFunctions, (, ), ), {, assertionFunctionsMap, ., put, (, assertionFucntion, ., getFunctionName, (, ), ,, assertionFucntion, ), ;, }]
[., getCodingConvention, (, ), ., getAssertionFunctions, (, ), ), {, assertionFunctionsMap, ., put, (, assertionFucntion, ., getFunctionName, (, ), ,]
[;, }, }, @, Override, public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {, Node, externsAndJs, =, jsRoot]
[., put, (, assertionFucntion, ., getFunctionName, (, ), ,, assertionFucntion, ), ;, }, }, @, Override, public, void, process, (]
[,, assertionFucntion, ), ;, }, }, @, Override, public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {, Node]
[., getFunctionName, (, ), ,, assertionFucntion, ), ;, }, }, @, Override, public, void, process, (, Node, externsRoot, ,, Node]
[), ;, }, }, @, Override, public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {, Node, externsAndJs, =]
[;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (, externsRoot, ==, null, ||, externsAndJs, .]
[., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (, externsRoot, ==]
[;, Preconditions, ., checkState, (, externsRoot, ==, null, ||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;, inferAllScopes, (, externsAndJs]
[., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (, externsRoot, ==, null, ||, externsAndJs, ., hasChild, (]
[), ;, Preconditions, ., checkState, (, externsRoot, ==, null, ||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;, inferAllScopes, (]
[!=, null, ), ;, Preconditions, ., checkState, (, externsRoot, ==, null, ||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;]
[), ;, Preconditions, ., checkState, (, externsRoot, ==, null, ||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;, inferAllScopes, (]
[;, inferAllScopes, (, externsAndJs, ), ;, }, void, inferAllScopes, (, Node, node, ), {, (, new, NodeTraversal, (, compiler, ,]
[., checkState, (, externsRoot, ==, null, ||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;, inferAllScopes, (, externsAndJs, ), ;]
[), ;, inferAllScopes, (, externsAndJs, ), ;, }, void, inferAllScopes, (, Node, node, ), {, (, new, NodeTraversal, (, compiler]
[||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;, inferAllScopes, (, externsAndJs, ), ;, }, void, inferAllScopes, (, Node, node]
[==, null, ||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;, inferAllScopes, (, externsAndJs, ), ;, }, void, inferAllScopes, (]
[||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;, inferAllScopes, (, externsAndJs, ), ;, }, void, inferAllScopes, (, Node, node]
[), ;, inferAllScopes, (, externsAndJs, ), ;, }, void, inferAllScopes, (, Node, node, ), {, (, new, NodeTraversal, (, compiler]
[., hasChild, (, externsRoot, ), ), ;, inferAllScopes, (, externsAndJs, ), ;, }, void, inferAllScopes, (, Node, node, ), {]
[), ), ;, inferAllScopes, (, externsAndJs, ), ;, }, void, inferAllScopes, (, Node, node, ), {, (, new, NodeTraversal, (]
[;, }, void, inferAllScopes, (, Node, node, ), {, (, new, NodeTraversal, (, compiler, ,, new, FirstScopeBuildingCallback, (, ), ,]
[), ;, }, void, inferAllScopes, (, Node, node, ), {, (, new, NodeTraversal, (, compiler, ,, new, FirstScopeBuildingCallback, (, )]
[;, (, new, NodeTraversal, (, compiler, ,, new, SecondScopeBuildingCallback, (, ), ,, scopeCreator, ), ), ., traverseWithScope, (, node, ,]
[., traverseWithScope, (, node, ,, topScope, ), ;, (, new, NodeTraversal, (, compiler, ,, new, SecondScopeBuildingCallback, (, ), ,, scopeCreator]
[), ., traverseWithScope, (, node, ,, topScope, ), ;, (, new, NodeTraversal, (, compiler, ,, new, SecondScopeBuildingCallback, (, ), ,]
[,, new, FirstScopeBuildingCallback, (, ), ,, scopeCreator, ), ), ., traverseWithScope, (, node, ,, topScope, ), ;, (, new, NodeTraversal]
[,, scopeCreator, ), ), ., traverseWithScope, (, node, ,, topScope, ), ;, (, new, NodeTraversal, (, compiler, ,, new, SecondScopeBuildingCallback]
[), ), ., traverseWithScope, (, node, ,, topScope, ), ;, (, new, NodeTraversal, (, compiler, ,, new, SecondScopeBuildingCallback, (, )]
[,, topScope, ), ;, (, new, NodeTraversal, (, compiler, ,, new, SecondScopeBuildingCallback, (, ), ,, scopeCreator, ), ), ., traverseWithScope]
[), ;, (, new, NodeTraversal, (, compiler, ,, new, SecondScopeBuildingCallback, (, ), ,, scopeCreator, ), ), ., traverseWithScope, (, node]
[;, }, void, inferScope, (, Node, n, ,, Scope, scope, ), {, TypeInference, typeInference, =, new, TypeInference, (, compiler, ,]
[., traverseWithScope, (, node, ,, topScope, ), ;, }, void, inferScope, (, Node, n, ,, Scope, scope, ), {, TypeInference]
[), ., traverseWithScope, (, node, ,, topScope, ), ;, }, void, inferScope, (, Node, n, ,, Scope, scope, ), {]
[,, new, SecondScopeBuildingCallback, (, ), ,, scopeCreator, ), ), ., traverseWithScope, (, node, ,, topScope, ), ;, }, void, inferScope]
[,, scopeCreator, ), ), ., traverseWithScope, (, node, ,, topScope, ), ;, }, void, inferScope, (, Node, n, ,, Scope]
[), ), ., traverseWithScope, (, node, ,, topScope, ), ;, }, void, inferScope, (, Node, n, ,, Scope, scope, )]
[,, topScope, ), ;, }, void, inferScope, (, Node, n, ,, Scope, scope, ), {, TypeInference, typeInference, =, new, TypeInference]
[), ;, }, void, inferScope, (, Node, n, ,, Scope, scope, ), {, TypeInference, typeInference, =, new, TypeInference, (, compiler]
[;, try, {, typeInference, ., analyze, (, ), ;, compiler, ., getTypeRegistry, (, ), ., resolveTypesInScope, (, scope, ), ;]
[,, computeCfg, (, n, ), ,, reverseInterpreter, ,, scope, ,, assertionFunctionsMap, ), ;, try, {, typeInference, ., analyze, (, )]
[,, reverseInterpreter, ,, scope, ,, assertionFunctionsMap, ), ;, try, {, typeInference, ., analyze, (, ), ;, compiler, ., getTypeRegistry, (]
[), ,, reverseInterpreter, ,, scope, ,, assertionFunctionsMap, ), ;, try, {, typeInference, ., analyze, (, ), ;, compiler, ., getTypeRegistry]
[,, scope, ,, assertionFunctionsMap, ), ;, try, {, typeInference, ., analyze, (, ), ;, compiler, ., getTypeRegistry, (, ), .]
[,, assertionFunctionsMap, ), ;, try, {, typeInference, ., analyze, (, ), ;, compiler, ., getTypeRegistry, (, ), ., resolveTypesInScope, (]
[), ;, try, {, typeInference, ., analyze, (, ), ;, compiler, ., getTypeRegistry, (, ), ., resolveTypesInScope, (, scope, )]
[;, compiler, ., getTypeRegistry, (, ), ., resolveTypesInScope, (, scope, ), ;, }, catch, (, DataFlowAnalysis, ., MaxIterationsExceededException, e, )]
[., analyze, (, ), ;, compiler, ., getTypeRegistry, (, ), ., resolveTypesInScope, (, scope, ), ;, }, catch, (, DataFlowAnalysis]
[;, }, catch, (, DataFlowAnalysis, ., MaxIterationsExceededException, e, ), {, compiler, ., report, (, JSError, ., make, (, n, .]
[., resolveTypesInScope, (, scope, ), ;, }, catch, (, DataFlowAnalysis, ., MaxIterationsExceededException, e, ), {, compiler, ., report, (, JSError]
[., getTypeRegistry, (, ), ., resolveTypesInScope, (, scope, ), ;, }, catch, (, DataFlowAnalysis, ., MaxIterationsExceededException, e, ), {, compiler]
[), ;, }, catch, (, DataFlowAnalysis, ., MaxIterationsExceededException, e, ), {, compiler, ., report, (, JSError, ., make, (, n]
[;, }, }, private, class, FirstScopeBuildingCallback, extends, AbstractScopedCallback, {, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, t]
[., report, (, JSError, ., make, (, n, ., getSourceFileName, (, ), ,, n, ,, DATAFLOW_ERROR, ), ), ;, }]
[), ;, }, }, private, class, FirstScopeBuildingCallback, extends, AbstractScopedCallback, {, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {]
[., make, (, n, ., getSourceFileName, (, ), ,, n, ,, DATAFLOW_ERROR, ), ), ;, }, }, private, class, FirstScopeBuildingCallback]
[,, n, ,, DATAFLOW_ERROR, ), ), ;, }, }, private, class, FirstScopeBuildingCallback, extends, AbstractScopedCallback, {, @, Override, public, void, enterScope]
[., getSourceFileName, (, ), ,, n, ,, DATAFLOW_ERROR, ), ), ;, }, }, private, class, FirstScopeBuildingCallback, extends, AbstractScopedCallback, {, @]
[,, DATAFLOW_ERROR, ), ), ;, }, }, private, class, FirstScopeBuildingCallback, extends, AbstractScopedCallback, {, @, Override, public, void, enterScope, (, NodeTraversal]
[), ), ;, }, }, private, class, FirstScopeBuildingCallback, extends, AbstractScopedCallback, {, @, Override, public, void, enterScope, (, NodeTraversal, t, )]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, }, }]
[., getScope, (, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, }, }]
[,, t, ., getScope, (, ), ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[., getCurrentNode, (, ), ,, t, ., getScope, (, ), ), ;, }, @, Override, public, void, visit, (, NodeTraversal]
[), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, }]
[., getScope, (, ), ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node]
[;, cfa, ., process, (, null, ,, n, ), ;, return, cfa, ., getCfg, (, ), ;, }, }]
[,, false, ,, false, ), ;, cfa, ., process, (, null, ,, n, ), ;, return, cfa, ., getCfg, (]
[,, false, ), ;, cfa, ., process, (, null, ,, n, ), ;, return, cfa, ., getCfg, (, ), ;]
[), ;, cfa, ., process, (, null, ,, n, ), ;, return, cfa, ., getCfg, (, ), ;, }, }]
[;, return, cfa, ., getCfg, (, ), ;, }, }]
[., process, (, null, ,, n, ), ;, return, cfa, ., getCfg, (, ), ;, }, }]
[,, n, ), ;, return, cfa, ., getCfg, (, ), ;, }, }]
[), ;, return, cfa, ., getCfg, (, ), ;, }, }]
[;, }, }]
[., getCfg, (, ), ;, }, }]
