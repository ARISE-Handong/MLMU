[;, JsDocTokenStream, (, String, sourceString, ), {, this, (, sourceString, ,, 0, ), ;, }, JsDocTokenStream, (, String, sourceString, ,]
[;, JsDocTokenStream, (, String, sourceString, ), {, this, (, sourceString, ,, 0, ), ;, }, JsDocTokenStream, (, String, sourceString, ,]
[,, 0, ), ;, }, JsDocTokenStream, (, String, sourceString, ,, int, lineno, ), {, this, (, sourceString, ,, lineno, ,]
[), ;, }, JsDocTokenStream, (, String, sourceString, ,, int, lineno, ), {, this, (, sourceString, ,, lineno, ,, 0, )]
[,, lineno, ,, 0, ), ;, }, JsDocTokenStream, (, String, sourceString, ,, int, lineno, ,, int, initCharno, ), {, Preconditions]
[,, 0, ), ;, }, JsDocTokenStream, (, String, sourceString, ,, int, lineno, ,, int, initCharno, ), {, Preconditions, ., checkNotNull]
[), ;, }, JsDocTokenStream, (, String, sourceString, ,, int, lineno, ,, int, initCharno, ), {, Preconditions, ., checkNotNull, (, sourceString]
[;, this, ., lineno, =, lineno, ;, this, ., sourceString, =, sourceString, ;, this, ., sourceEnd, =, sourceString, ., length]
[., checkNotNull, (, sourceString, ), ;, this, ., lineno, =, lineno, ;, this, ., sourceString, =, sourceString, ;, this, .]
[), ;, this, ., lineno, =, lineno, ;, this, ., sourceString, =, sourceString, ;, this, ., sourceEnd, =, sourceString, .]
[=, lineno, ;, this, ., sourceString, =, sourceString, ;, this, ., sourceEnd, =, sourceString, ., length, (, ), ;, this]
[., lineno, =, lineno, ;, this, ., sourceString, =, sourceString, ;, this, ., sourceEnd, =, sourceString, ., length, (, )]
[;, this, ., sourceString, =, sourceString, ;, this, ., sourceEnd, =, sourceString, ., length, (, ), ;, this, ., sourceCursor]
[=, sourceString, ;, this, ., sourceEnd, =, sourceString, ., length, (, ), ;, this, ., sourceCursor, =, this, ., cursor]
[., sourceString, =, sourceString, ;, this, ., sourceEnd, =, sourceString, ., length, (, ), ;, this, ., sourceCursor, =, this]
[;, this, ., sourceEnd, =, sourceString, ., length, (, ), ;, this, ., sourceCursor, =, this, ., cursor, =, 0]
[=, sourceString, ., length, (, ), ;, this, ., sourceCursor, =, this, ., cursor, =, 0, ;, this, ., initLineno]
[., sourceEnd, =, sourceString, ., length, (, ), ;, this, ., sourceCursor, =, this, ., cursor, =, 0, ;, this]
[;, this, ., sourceCursor, =, this, ., cursor, =, 0, ;, this, ., initLineno, =, lineno, ;, this, ., initCharno]
[., length, (, ), ;, this, ., sourceCursor, =, this, ., cursor, =, 0, ;, this, ., initLineno, =, lineno]
[=, this, ., cursor, =, 0, ;, this, ., initLineno, =, lineno, ;, this, ., initCharno, =, initCharno, ;, }]
[., sourceCursor, =, this, ., cursor, =, 0, ;, this, ., initLineno, =, lineno, ;, this, ., initCharno, =, initCharno]
[=, 0, ;, this, ., initLineno, =, lineno, ;, this, ., initCharno, =, initCharno, ;, }, @, SuppressWarnings, (, "fallthrough"]
[., cursor, =, 0, ;, this, ., initLineno, =, lineno, ;, this, ., initCharno, =, initCharno, ;, }, @, SuppressWarnings]
[;, this, ., initLineno, =, lineno, ;, this, ., initCharno, =, initCharno, ;, }, @, SuppressWarnings, (, "fallthrough", ), final]
[=, lineno, ;, this, ., initCharno, =, initCharno, ;, }, @, SuppressWarnings, (, "fallthrough", ), final, JsDocToken, getJsDocToken, (, )]
[., initLineno, =, lineno, ;, this, ., initCharno, =, initCharno, ;, }, @, SuppressWarnings, (, "fallthrough", ), final, JsDocToken, getJsDocToken]
[;, this, ., initCharno, =, initCharno, ;, }, @, SuppressWarnings, (, "fallthrough", ), final, JsDocToken, getJsDocToken, (, ), {, int]
[=, initCharno, ;, }, @, SuppressWarnings, (, "fallthrough", ), final, JsDocToken, getJsDocToken, (, ), {, int, c, ;, stringBufferTop, =]
[., initCharno, =, initCharno, ;, }, @, SuppressWarnings, (, "fallthrough", ), final, JsDocToken, getJsDocToken, (, ), {, int, c, ;]
[;, }, @, SuppressWarnings, (, "fallthrough", ), final, JsDocToken, getJsDocToken, (, ), {, int, c, ;, stringBufferTop, =, 0, ;]
[final, JsDocToken, getJsDocToken, (, ), {, int, c, ;, stringBufferTop, =, 0, ;, for, (, ;, ;, ), {, for]
[), final, JsDocToken, getJsDocToken, (, ), {, int, c, ;, stringBufferTop, =, 0, ;, for, (, ;, ;, ), {]
[=, 0, ;, for, (, ;, ;, ), {, for, (, ;, ;, ), {, charno, =, -, 1, ;]
[;, for, (, ;, ;, ), {, for, (, ;, ;, ), {, charno, =, -, 1, ;, c, =]
[=, -, 1, ;, c, =, getChar, (, ), ;, if, (, c, ==, EOF_CHAR, ), {, return, JsDocToken, .]
[;, c, =, getChar, (, ), ;, if, (, c, ==, EOF_CHAR, ), {, return, JsDocToken, ., EOF, ;, }]
[;, c, =, getChar, (, ), ;, if, (, c, ==, EOF_CHAR, ), {, return, JsDocToken, ., EOF, ;, }]
[=, getChar, (, ), ;, if, (, c, ==, EOF_CHAR, ), {, return, JsDocToken, ., EOF, ;, }, else, if]
[;, if, (, c, ==, EOF_CHAR, ), {, return, JsDocToken, ., EOF, ;, }, else, if, (, c, ==, '\n']
[), {, return, JsDocToken, ., EOF, ;, }, else, if, (, c, ==, '\n', ), {, return, JsDocToken, ., EOL]
[==, EOF_CHAR, ), {, return, JsDocToken, ., EOF, ;, }, else, if, (, c, ==, '\n', ), {, return, JsDocToken]
[), {, return, JsDocToken, ., EOF, ;, }, else, if, (, c, ==, '\n', ), {, return, JsDocToken, ., EOL]
[;, }, else, if, (, c, ==, '\n', ), {, return, JsDocToken, ., EOL, ;, }, else, if, (, !]
[., EOF, ;, }, else, if, (, c, ==, '\n', ), {, return, JsDocToken, ., EOL, ;, }, else, if]
[), {, return, JsDocToken, ., EOL, ;, }, else, if, (, !, isJSSpace, (, c, ), ), {, break, ;]
[==, '\n', ), {, return, JsDocToken, ., EOL, ;, }, else, if, (, !, isJSSpace, (, c, ), ), {]
[), {, return, JsDocToken, ., EOL, ;, }, else, if, (, !, isJSSpace, (, c, ), ), {, break, ;]
[;, }, else, if, (, !, isJSSpace, (, c, ), ), {, break, ;, }, }, switch, (, c, )]
[., EOL, ;, }, else, if, (, !, isJSSpace, (, c, ), ), {, break, ;, }, }, switch, (]
[), {, break, ;, }, }, switch, (, c, ), {, case, '@', :, do, {, c, =, getChar, (]
[), {, break, ;, }, }, switch, (, c, ), {, case, '@', :, do, {, c, =, getChar, (]
[), ), {, break, ;, }, }, switch, (, c, ), {, case, '@', :, do, {, c, =, getChar]
[), {, case, '@', :, do, {, c, =, getChar, (, ), ;, if, (, isAlpha, (, c, ), )]
[:, do, {, c, =, getChar, (, ), ;, if, (, isAlpha, (, c, ), ), {, addToString, (, c]
[=, getChar, (, ), ;, if, (, isAlpha, (, c, ), ), {, addToString, (, c, ), ;, }, else]
[;, if, (, isAlpha, (, c, ), ), {, addToString, (, c, ), ;, }, else, {, ungetChar, (, c]
[), {, addToString, (, c, ), ;, }, else, {, ungetChar, (, c, ), ;, this, ., string, =, getStringFromBuffer]
[), ), {, addToString, (, c, ), ;, }, else, {, ungetChar, (, c, ), ;, this, ., string, =]
[;, }, else, {, ungetChar, (, c, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0]
[), ;, }, else, {, ungetChar, (, c, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =]
[;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., ANNOTATION, ;, }, }]
[), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., ANNOTATION, ;, }]
[=, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., ANNOTATION, ;, }, }, while, (, true, )]
[., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., ANNOTATION, ;, }, }, while, (]
[;, stringBufferTop, =, 0, ;, return, JsDocToken, ., ANNOTATION, ;, }, }, while, (, true, ), ;, case, '*', :]
[=, 0, ;, return, JsDocToken, ., ANNOTATION, ;, }, }, while, (, true, ), ;, case, '*', :, if, (]
[;, return, JsDocToken, ., ANNOTATION, ;, }, }, while, (, true, ), ;, case, '*', :, if, (, matchChar, (]
[;, }, }, while, (, true, ), ;, case, '*', :, if, (, matchChar, (, '/', ), ), {, return]
[., ANNOTATION, ;, }, }, while, (, true, ), ;, case, '*', :, if, (, matchChar, (, '/', ), )]
[), ;, case, '*', :, if, (, matchChar, (, '/', ), ), {, return, JsDocToken, ., EOC, ;, }, else]
[:, if, (, matchChar, (, '/', ), ), {, return, JsDocToken, ., EOC, ;, }, else, {, return, JsDocToken, .]
[), {, return, JsDocToken, ., EOC, ;, }, else, {, return, JsDocToken, ., STAR, ;, }, case, ',', :, return]
[), ), {, return, JsDocToken, ., EOC, ;, }, else, {, return, JsDocToken, ., STAR, ;, }, case, ',', :]
[;, }, else, {, return, JsDocToken, ., STAR, ;, }, case, ',', :, return, JsDocToken, ., COMMA, ;, case, '>']
[., EOC, ;, }, else, {, return, JsDocToken, ., STAR, ;, }, case, ',', :, return, JsDocToken, ., COMMA, ;]
[;, }, case, ',', :, return, JsDocToken, ., COMMA, ;, case, '>', :, return, JsDocToken, ., GT, ;, case, '(']
[., STAR, ;, }, case, ',', :, return, JsDocToken, ., COMMA, ;, case, '>', :, return, JsDocToken, ., GT, ;]
[:, return, JsDocToken, ., COMMA, ;, case, '>', :, return, JsDocToken, ., GT, ;, case, '(', :, return, JsDocToken, .]
[;, case, '>', :, return, JsDocToken, ., GT, ;, case, '(', :, return, JsDocToken, ., LP, ;, case, ')', :]
[., COMMA, ;, case, '>', :, return, JsDocToken, ., GT, ;, case, '(', :, return, JsDocToken, ., LP, ;, case]
[:, return, JsDocToken, ., GT, ;, case, '(', :, return, JsDocToken, ., LP, ;, case, ')', :, return, JsDocToken, .]
[;, case, '(', :, return, JsDocToken, ., LP, ;, case, ')', :, return, JsDocToken, ., RP, ;, case, '{', :]
[., GT, ;, case, '(', :, return, JsDocToken, ., LP, ;, case, ')', :, return, JsDocToken, ., RP, ;, case]
[:, return, JsDocToken, ., LP, ;, case, ')', :, return, JsDocToken, ., RP, ;, case, '{', :, return, JsDocToken, .]
[;, case, ')', :, return, JsDocToken, ., RP, ;, case, '{', :, return, JsDocToken, ., LC, ;, case, '}', :]
[., LP, ;, case, ')', :, return, JsDocToken, ., RP, ;, case, '{', :, return, JsDocToken, ., LC, ;, case]
[:, return, JsDocToken, ., RP, ;, case, '{', :, return, JsDocToken, ., LC, ;, case, '}', :, return, JsDocToken, .]
[;, case, '{', :, return, JsDocToken, ., LC, ;, case, '}', :, return, JsDocToken, ., RC, ;, case, '[', :]
[., RP, ;, case, '{', :, return, JsDocToken, ., LC, ;, case, '}', :, return, JsDocToken, ., RC, ;, case]
[:, return, JsDocToken, ., LC, ;, case, '}', :, return, JsDocToken, ., RC, ;, case, '[', :, return, JsDocToken, .]
[;, case, '}', :, return, JsDocToken, ., RC, ;, case, '[', :, return, JsDocToken, ., LB, ;, case, ']', :]
[., LC, ;, case, '}', :, return, JsDocToken, ., RC, ;, case, '[', :, return, JsDocToken, ., LB, ;, case]
[:, return, JsDocToken, ., RC, ;, case, '[', :, return, JsDocToken, ., LB, ;, case, ']', :, return, JsDocToken, .]
[;, case, '[', :, return, JsDocToken, ., LB, ;, case, ']', :, return, JsDocToken, ., RB, ;, case, '?', :]
[., RC, ;, case, '[', :, return, JsDocToken, ., LB, ;, case, ']', :, return, JsDocToken, ., RB, ;, case]
[:, return, JsDocToken, ., LB, ;, case, ']', :, return, JsDocToken, ., RB, ;, case, '?', :, return, JsDocToken, .]
[;, case, ']', :, return, JsDocToken, ., RB, ;, case, '?', :, return, JsDocToken, ., QMARK, ;, case, '!', :]
[., LB, ;, case, ']', :, return, JsDocToken, ., RB, ;, case, '?', :, return, JsDocToken, ., QMARK, ;, case]
[:, return, JsDocToken, ., RB, ;, case, '?', :, return, JsDocToken, ., QMARK, ;, case, '!', :, return, JsDocToken, .]
[;, case, '?', :, return, JsDocToken, ., QMARK, ;, case, '!', :, return, JsDocToken, ., BANG, ;, case, ':', :]
[., RB, ;, case, '?', :, return, JsDocToken, ., QMARK, ;, case, '!', :, return, JsDocToken, ., BANG, ;, case]
[:, return, JsDocToken, ., QMARK, ;, case, '!', :, return, JsDocToken, ., BANG, ;, case, ':', :, return, JsDocToken, .]
[;, case, '!', :, return, JsDocToken, ., BANG, ;, case, ':', :, return, JsDocToken, ., COLON, ;, case, '=', :]
[., QMARK, ;, case, '!', :, return, JsDocToken, ., BANG, ;, case, ':', :, return, JsDocToken, ., COLON, ;, case]
[:, return, JsDocToken, ., BANG, ;, case, ':', :, return, JsDocToken, ., COLON, ;, case, '=', :, return, JsDocToken, .]
[;, case, ':', :, return, JsDocToken, ., COLON, ;, case, '=', :, return, JsDocToken, ., EQUALS, ;, case, '|', :]
[., BANG, ;, case, ':', :, return, JsDocToken, ., COLON, ;, case, '=', :, return, JsDocToken, ., EQUALS, ;, case]
[:, return, JsDocToken, ., COLON, ;, case, '=', :, return, JsDocToken, ., EQUALS, ;, case, '|', :, matchChar, (, '|']
[;, case, '=', :, return, JsDocToken, ., EQUALS, ;, case, '|', :, matchChar, (, '|', ), ;, return, JsDocToken, .]
[., COLON, ;, case, '=', :, return, JsDocToken, ., EQUALS, ;, case, '|', :, matchChar, (, '|', ), ;, return]
[:, return, JsDocToken, ., EQUALS, ;, case, '|', :, matchChar, (, '|', ), ;, return, JsDocToken, ., PIPE, ;, case]
[;, case, '|', :, matchChar, (, '|', ), ;, return, JsDocToken, ., PIPE, ;, case, '.', :, c, =, getChar]
[., EQUALS, ;, case, '|', :, matchChar, (, '|', ), ;, return, JsDocToken, ., PIPE, ;, case, '.', :, c]
[:, matchChar, (, '|', ), ;, return, JsDocToken, ., PIPE, ;, case, '.', :, c, =, getChar, (, ), ;]
[;, return, JsDocToken, ., PIPE, ;, case, '.', :, c, =, getChar, (, ), ;, if, (, c, ==, '<']
[), ;, return, JsDocToken, ., PIPE, ;, case, '.', :, c, =, getChar, (, ), ;, if, (, c, ==]
[;, case, '.', :, c, =, getChar, (, ), ;, if, (, c, ==, '<', ), {, return, JsDocToken, .]
[., PIPE, ;, case, '.', :, c, =, getChar, (, ), ;, if, (, c, ==, '<', ), {, return]
[:, c, =, getChar, (, ), ;, if, (, c, ==, '<', ), {, return, JsDocToken, ., LT, ;, }]
[=, getChar, (, ), ;, if, (, c, ==, '<', ), {, return, JsDocToken, ., LT, ;, }, else, {]
[;, if, (, c, ==, '<', ), {, return, JsDocToken, ., LT, ;, }, else, {, if, (, c, ==]
[), {, return, JsDocToken, ., LT, ;, }, else, {, if, (, c, ==, '.', ), {, c, =, getChar]
[==, '<', ), {, return, JsDocToken, ., LT, ;, }, else, {, if, (, c, ==, '.', ), {, c]
[), {, return, JsDocToken, ., LT, ;, }, else, {, if, (, c, ==, '.', ), {, c, =, getChar]
[;, }, else, {, if, (, c, ==, '.', ), {, c, =, getChar, (, ), ;, if, (, c]
[., LT, ;, }, else, {, if, (, c, ==, '.', ), {, c, =, getChar, (, ), ;, if]
[), {, c, =, getChar, (, ), ;, if, (, c, ==, '.', ), {, return, JsDocToken, ., ELLIPSIS, ;]
[==, '.', ), {, c, =, getChar, (, ), ;, if, (, c, ==, '.', ), {, return, JsDocToken, .]
[), {, c, =, getChar, (, ), ;, if, (, c, ==, '.', ), {, return, JsDocToken, ., ELLIPSIS, ;]
[=, getChar, (, ), ;, if, (, c, ==, '.', ), {, return, JsDocToken, ., ELLIPSIS, ;, }, else, {]
[;, if, (, c, ==, '.', ), {, return, JsDocToken, ., ELLIPSIS, ;, }, else, {, addToString, (, '.', )]
[), {, return, JsDocToken, ., ELLIPSIS, ;, }, else, {, addToString, (, '.', ), ;, }, }, ungetBuffer, [, ungetCursor]
[==, '.', ), {, return, JsDocToken, ., ELLIPSIS, ;, }, else, {, addToString, (, '.', ), ;, }, }, ungetBuffer]
[), {, return, JsDocToken, ., ELLIPSIS, ;, }, else, {, addToString, (, '.', ), ;, }, }, ungetBuffer, [, ungetCursor]
[;, }, else, {, addToString, (, '.', ), ;, }, }, ungetBuffer, [, ungetCursor, ++, ], =, c, ;, c]
[., ELLIPSIS, ;, }, else, {, addToString, (, '.', ), ;, }, }, ungetBuffer, [, ungetCursor, ++, ], =, c]
[;, }, }, ungetBuffer, [, ungetCursor, ++, ], =, c, ;, c, =, '.', ;, }, default, :, {, int]
[), ;, }, }, ungetBuffer, [, ungetCursor, ++, ], =, c, ;, c, =, '.', ;, }, default, :, {]
[=, c, ;, c, =, '.', ;, }, default, :, {, int, c1, =, c, ;, addToString, (, c, )]
[[, ungetCursor, ++, ], =, c, ;, c, =, '.', ;, }, default, :, {, int, c1, =, c, ;]
[], =, c, ;, c, =, '.', ;, }, default, :, {, int, c1, =, c, ;, addToString, (, c]
[++, ], =, c, ;, c, =, '.', ;, }, default, :, {, int, c1, =, c, ;, addToString, (]
[;, c, =, '.', ;, }, default, :, {, int, c1, =, c, ;, addToString, (, c, ), ;, int]
[=, '.', ;, }, default, :, {, int, c1, =, c, ;, addToString, (, c, ), ;, int, c2, =]
[;, }, default, :, {, int, c1, =, c, ;, addToString, (, c, ), ;, int, c2, =, getChar, (]
[;, addToString, (, c, ), ;, int, c2, =, getChar, (, ), ;, if, (, !, isJSDocString, (, c2, )]
[;, int, c2, =, getChar, (, ), ;, if, (, !, isJSDocString, (, c2, ), ), {, ungetChar, (, c2]
[), ;, int, c2, =, getChar, (, ), ;, if, (, !, isJSDocString, (, c2, ), ), {, ungetChar, (]
[;, if, (, !, isJSDocString, (, c2, ), ), {, ungetChar, (, c2, ), ;, this, ., string, =, getStringFromBuffer]
[), {, ungetChar, (, c2, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return]
[), {, ungetChar, (, c2, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return]
[), ), {, ungetChar, (, c2, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;]
[;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }, else]
[), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }]
[=, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }, else, {, do, {, c1]
[., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }, else, {, do]
[;, stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }, else, {, do, {, c1, =, c2, ;, c2]
[=, 0, ;, return, JsDocToken, ., STRING, ;, }, else, {, do, {, c1, =, c2, ;, c2, =, getChar]
[;, return, JsDocToken, ., STRING, ;, }, else, {, do, {, c1, =, c2, ;, c2, =, getChar, (, )]
[;, }, else, {, do, {, c1, =, c2, ;, c2, =, getChar, (, ), ;, if, (, c1, ==]
[., STRING, ;, }, else, {, do, {, c1, =, c2, ;, c2, =, getChar, (, ), ;, if, (]
[=, c2, ;, c2, =, getChar, (, ), ;, if, (, c1, ==, '.', &&, c2, ==, '<', ), {]
[;, c2, =, getChar, (, ), ;, if, (, c1, ==, '.', &&, c2, ==, '<', ), {, ungetChar, (]
[=, getChar, (, ), ;, if, (, c1, ==, '.', &&, c2, ==, '<', ), {, ungetChar, (, c2, )]
[;, if, (, c1, ==, '.', &&, c2, ==, '<', ), {, ungetChar, (, c2, ), ;, ungetChar, (, c1]
[), {, ungetChar, (, c2, ), ;, ungetChar, (, c1, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;]
[&&, c2, ==, '<', ), {, ungetChar, (, c2, ), ;, ungetChar, (, c1, ), ;, this, ., string, =]
[==, '.', &&, c2, ==, '<', ), {, ungetChar, (, c2, ), ;, ungetChar, (, c1, ), ;, this, .]
[&&, c2, ==, '<', ), {, ungetChar, (, c2, ), ;, ungetChar, (, c1, ), ;, this, ., string, =]
[), {, ungetChar, (, c2, ), ;, ungetChar, (, c1, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;]
[==, '<', ), {, ungetChar, (, c2, ), ;, ungetChar, (, c1, ), ;, this, ., string, =, getStringFromBuffer, (]
[), {, ungetChar, (, c2, ), ;, ungetChar, (, c1, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;]
[;, ungetChar, (, c1, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken]
[), ;, ungetChar, (, c1, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return]
[;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }, else]
[), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }]
[=, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }, else, {, if, (, isJSDocString]
[., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }, else, {, if]
[;, stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }, else, {, if, (, isJSDocString, (, c2, ), )]
[=, 0, ;, return, JsDocToken, ., STRING, ;, }, else, {, if, (, isJSDocString, (, c2, ), ), {, addToString]
[;, return, JsDocToken, ., STRING, ;, }, else, {, if, (, isJSDocString, (, c2, ), ), {, addToString, (, c1]
[;, }, else, {, if, (, isJSDocString, (, c2, ), ), {, addToString, (, c1, ), ;, }, else, {]
[., STRING, ;, }, else, {, if, (, isJSDocString, (, c2, ), ), {, addToString, (, c1, ), ;, }]
[), {, addToString, (, c1, ), ;, }, else, {, ungetChar, (, c2, ), ;, addToString, (, c1, ), ;]
[), ), {, addToString, (, c1, ), ;, }, else, {, ungetChar, (, c2, ), ;, addToString, (, c1, )]
[;, }, else, {, ungetChar, (, c2, ), ;, addToString, (, c1, ), ;, this, ., string, =, getStringFromBuffer, (]
[), ;, }, else, {, ungetChar, (, c2, ), ;, addToString, (, c1, ), ;, this, ., string, =, getStringFromBuffer]
[;, addToString, (, c1, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken]
[), ;, addToString, (, c1, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return]
[;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }, }]
[), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }]
[=, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }, }, }, while, (, true]
[., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }, }, }, while]
[;, stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }, }, }, while, (, true, ), ;, }, }]
[=, 0, ;, return, JsDocToken, ., STRING, ;, }, }, }, while, (, true, ), ;, }, }, }, }]
[;, return, JsDocToken, ., STRING, ;, }, }, }, while, (, true, ), ;, }, }, }, }, }, @]
[;, }, }, }, while, (, true, ), ;, }, }, }, }, }, @, SuppressWarnings, (, "fallthrough", ), String]
[., STRING, ;, }, }, }, while, (, true, ), ;, }, }, }, }, }, @, SuppressWarnings, (, "fallthrough"]
[), ;, }, }, }, }, }, @, SuppressWarnings, (, "fallthrough", ), String, getRemainingJSDocLine, (, ), {, int, c, ;]
[String, getRemainingJSDocLine, (, ), {, int, c, ;, for, (, ;, ;, ), {, c, =, getChar, (, ), ;]
[), String, getRemainingJSDocLine, (, ), {, int, c, ;, for, (, ;, ;, ), {, c, =, getChar, (, )]
[=, getChar, (, ), ;, switch, (, c, ), {, case, '*', :, if, (, peekChar, (, ), !=, '/']
[;, switch, (, c, ), {, case, '*', :, if, (, peekChar, (, ), !=, '/', ), {, addToString, (]
[), {, case, '*', :, if, (, peekChar, (, ), !=, '/', ), {, addToString, (, c, ), ;, break]
[:, if, (, peekChar, (, ), !=, '/', ), {, addToString, (, c, ), ;, break, ;, }, case, EOF_CHAR]
[), {, addToString, (, c, ), ;, break, ;, }, case, EOF_CHAR, :, case, '\n', :, ungetChar, (, c, )]
[!=, '/', ), {, addToString, (, c, ), ;, break, ;, }, case, EOF_CHAR, :, case, '\n', :, ungetChar, (]
[), {, addToString, (, c, ), ;, break, ;, }, case, EOF_CHAR, :, case, '\n', :, ungetChar, (, c, )]
[;, break, ;, }, case, EOF_CHAR, :, case, '\n', :, ungetChar, (, c, ), ;, this, ., string, =, getStringFromBuffer]
[), ;, break, ;, }, case, EOF_CHAR, :, case, '\n', :, ungetChar, (, c, ), ;, this, ., string, =]
[:, case, '\n', :, ungetChar, (, c, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0]
[:, ungetChar, (, c, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, this]
[;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, this, ., string, ;, default, :]
[), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, this, ., string, ;, default]
[=, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, this, ., string, ;, default, :, addToString, (, c, )]
[., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, this, ., string, ;, default, :, addToString, (]
[;, stringBufferTop, =, 0, ;, return, this, ., string, ;, default, :, addToString, (, c, ), ;, break, ;, }]
[=, 0, ;, return, this, ., string, ;, default, :, addToString, (, c, ), ;, break, ;, }, }, }]
[;, return, this, ., string, ;, default, :, addToString, (, c, ), ;, break, ;, }, }, }, final, int]
[;, default, :, addToString, (, c, ), ;, break, ;, }, }, }, final, int, getLineno, (, ), {, return]
[., string, ;, default, :, addToString, (, c, ), ;, break, ;, }, }, }, final, int, getLineno, (, )]
[;, break, ;, }, }, }, final, int, getLineno, (, ), {, return, lineno, ;, }, final, int, getCharno, (]
[), ;, break, ;, }, }, }, final, int, getLineno, (, ), {, return, lineno, ;, }, final, int, getCharno]
[;, }, final, int, getCharno, (, ), {, return, lineno, ==, initLineno, ?, initCharno, +, charno, :, charno, ;, }]
[;, }, final, String, getString, (, ), {, return, string, ;, }, final, boolean, eof, (, ), {, return, hitEOF]
[?, initCharno, +, charno, :, charno, ;, }, final, String, getString, (, ), {, return, string, ;, }, final, boolean]
[==, initLineno, ?, initCharno, +, charno, :, charno, ;, }, final, String, getString, (, ), {, return, string, ;, }]
[?, initCharno, +, charno, :, charno, ;, }, final, String, getString, (, ), {, return, string, ;, }, final, boolean]
[:, charno, ;, }, final, String, getString, (, ), {, return, string, ;, }, final, boolean, eof, (, ), {]
[+, charno, :, charno, ;, }, final, String, getString, (, ), {, return, string, ;, }, final, boolean, eof, (]
[:, charno, ;, }, final, String, getString, (, ), {, return, string, ;, }, final, boolean, eof, (, ), {]
[;, }, final, String, getString, (, ), {, return, string, ;, }, final, boolean, eof, (, ), {, return, hitEOF]
[;, }, final, boolean, eof, (, ), {, return, hitEOF, ;, }, private, String, getStringFromBuffer, (, ), {, tokenEnd, =]
[;, }, private, String, getStringFromBuffer, (, ), {, tokenEnd, =, cursor, ;, return, new, String, (, stringBuffer, ,, 0, ,]
[=, cursor, ;, return, new, String, (, stringBuffer, ,, 0, ,, stringBufferTop, ), ;, }, private, void, addToString, (, int]
[;, return, new, String, (, stringBuffer, ,, 0, ,, stringBufferTop, ), ;, }, private, void, addToString, (, int, c, )]
[;, }, private, void, addToString, (, int, c, ), {, int, N, =, stringBufferTop, ;, if, (, N, ==, stringBuffer]
[,, 0, ,, stringBufferTop, ), ;, }, private, void, addToString, (, int, c, ), {, int, N, =, stringBufferTop, ;]
[,, stringBufferTop, ), ;, }, private, void, addToString, (, int, c, ), {, int, N, =, stringBufferTop, ;, if, (]
[), ;, }, private, void, addToString, (, int, c, ), {, int, N, =, stringBufferTop, ;, if, (, N, ==]
[;, if, (, N, ==, stringBuffer, ., length, ), {, char, [, ], tmp, =, new, char, [, stringBuffer, .]
[), {, char, [, ], tmp, =, new, char, [, stringBuffer, ., length, *, 2, ], ;, System, ., arraycopy]
[==, stringBuffer, ., length, ), {, char, [, ], tmp, =, new, char, [, stringBuffer, ., length, *, 2, ]]
[), {, char, [, ], tmp, =, new, char, [, stringBuffer, ., length, *, 2, ], ;, System, ., arraycopy]
[., length, ), {, char, [, ], tmp, =, new, char, [, stringBuffer, ., length, *, 2, ], ;, System]
[;, System, ., arraycopy, (, stringBuffer, ,, 0, ,, tmp, ,, 0, ,, N, ), ;, stringBuffer, =, tmp, ;]
[], ;, System, ., arraycopy, (, stringBuffer, ,, 0, ,, tmp, ,, 0, ,, N, ), ;, stringBuffer, =, tmp]
[*, 2, ], ;, System, ., arraycopy, (, stringBuffer, ,, 0, ,, tmp, ,, 0, ,, N, ), ;, stringBuffer]
[., length, *, 2, ], ;, System, ., arraycopy, (, stringBuffer, ,, 0, ,, tmp, ,, 0, ,, N, )]
[], ;, System, ., arraycopy, (, stringBuffer, ,, 0, ,, tmp, ,, 0, ,, N, ), ;, stringBuffer, =, tmp]
[;, stringBuffer, =, tmp, ;, }, stringBuffer, [, N, ], =, (, char, ), c, ;, stringBufferTop, =, N, +]
[., arraycopy, (, stringBuffer, ,, 0, ,, tmp, ,, 0, ,, N, ), ;, stringBuffer, =, tmp, ;, }, stringBuffer]
[,, 0, ,, tmp, ,, 0, ,, N, ), ;, stringBuffer, =, tmp, ;, }, stringBuffer, [, N, ], =]
[,, tmp, ,, 0, ,, N, ), ;, stringBuffer, =, tmp, ;, }, stringBuffer, [, N, ], =, (, char]
[,, 0, ,, N, ), ;, stringBuffer, =, tmp, ;, }, stringBuffer, [, N, ], =, (, char, ), c]
[,, N, ), ;, stringBuffer, =, tmp, ;, }, stringBuffer, [, N, ], =, (, char, ), c, ;, stringBufferTop]
[), ;, stringBuffer, =, tmp, ;, }, stringBuffer, [, N, ], =, (, char, ), c, ;, stringBufferTop, =, N]
[=, tmp, ;, }, stringBuffer, [, N, ], =, (, char, ), c, ;, stringBufferTop, =, N, +, 1, ;]
[;, }, stringBuffer, [, N, ], =, (, char, ), c, ;, stringBufferTop, =, N, +, 1, ;, }, void]
[=, (, char, ), c, ;, stringBufferTop, =, N, +, 1, ;, }, void, ungetChar, (, int, c, ), {]
[[, N, ], =, (, char, ), c, ;, stringBufferTop, =, N, +, 1, ;, }, void, ungetChar, (, int]
[], =, (, char, ), c, ;, stringBufferTop, =, N, +, 1, ;, }, void, ungetChar, (, int, c, )]
[;, stringBufferTop, =, N, +, 1, ;, }, void, ungetChar, (, int, c, ), {, assert, (, !, (, ungetCursor]
[;, stringBufferTop, =, N, +, 1, ;, }, void, ungetChar, (, int, c, ), {, assert, (, !, (, ungetCursor]
[=, N, +, 1, ;, }, void, ungetChar, (, int, c, ), {, assert, (, !, (, ungetCursor, !=, 0]
[;, }, void, ungetChar, (, int, c, ), {, assert, (, !, (, ungetCursor, !=, 0, &&, ungetBuffer, [, ungetCursor]
[+, 1, ;, }, void, ungetChar, (, int, c, ), {, assert, (, !, (, ungetCursor, !=, 0, &&, ungetBuffer]
[;, }, void, ungetChar, (, int, c, ), {, assert, (, !, (, ungetCursor, !=, 0, &&, ungetBuffer, [, ungetCursor]
[;, ungetBuffer, [, ungetCursor, ++, ], =, c, ;, cursor, --, ;, }, private, boolean, matchChar, (, int, test, )]
[), ;, ungetBuffer, [, ungetCursor, ++, ], =, c, ;, cursor, --, ;, }, private, boolean, matchChar, (, int, test]
[), ;, ungetBuffer, [, ungetCursor, ++, ], =, c, ;, cursor, --, ;, }, private, boolean, matchChar, (, int, test]
[), ), ;, ungetBuffer, [, ungetCursor, ++, ], =, c, ;, cursor, --, ;, }, private, boolean, matchChar, (, int]
[&&, ungetBuffer, [, ungetCursor, -, 1, ], ==, '\n', ), ), ;, ungetBuffer, [, ungetCursor, ++, ], =, c, ;]
[!=, 0, &&, ungetBuffer, [, ungetCursor, -, 1, ], ==, '\n', ), ), ;, ungetBuffer, [, ungetCursor, ++, ], =]
[&&, ungetBuffer, [, ungetCursor, -, 1, ], ==, '\n', ), ), ;, ungetBuffer, [, ungetCursor, ++, ], =, c, ;]
[), ), ;, ungetBuffer, [, ungetCursor, ++, ], =, c, ;, cursor, --, ;, }, private, boolean, matchChar, (, int]
[==, '\n', ), ), ;, ungetBuffer, [, ungetCursor, ++, ], =, c, ;, cursor, --, ;, }, private, boolean, matchChar]
[[, ungetCursor, -, 1, ], ==, '\n', ), ), ;, ungetBuffer, [, ungetCursor, ++, ], =, c, ;, cursor, --]
[], ==, '\n', ), ), ;, ungetBuffer, [, ungetCursor, ++, ], =, c, ;, cursor, --, ;, }, private, boolean]
[-, 1, ], ==, '\n', ), ), ;, ungetBuffer, [, ungetCursor, ++, ], =, c, ;, cursor, --, ;, }]
[], ==, '\n', ), ), ;, ungetBuffer, [, ungetCursor, ++, ], =, c, ;, cursor, --, ;, }, private, boolean]
[), ), ;, ungetBuffer, [, ungetCursor, ++, ], =, c, ;, cursor, --, ;, }, private, boolean, matchChar, (, int]
[=, c, ;, cursor, --, ;, }, private, boolean, matchChar, (, int, test, ), {, int, c, =, getCharIgnoreLineEnd, (]
[[, ungetCursor, ++, ], =, c, ;, cursor, --, ;, }, private, boolean, matchChar, (, int, test, ), {, int]
[], =, c, ;, cursor, --, ;, }, private, boolean, matchChar, (, int, test, ), {, int, c, =, getCharIgnoreLineEnd]
[++, ], =, c, ;, cursor, --, ;, }, private, boolean, matchChar, (, int, test, ), {, int, c, =]
[;, cursor, --, ;, }, private, boolean, matchChar, (, int, test, ), {, int, c, =, getCharIgnoreLineEnd, (, ), ;]
[;, }, private, boolean, matchChar, (, int, test, ), {, int, c, =, getCharIgnoreLineEnd, (, ), ;, if, (, c]
[--, ;, }, private, boolean, matchChar, (, int, test, ), {, int, c, =, getCharIgnoreLineEnd, (, ), ;, if, (]
[;, if, (, c, ==, test, ), {, tokenEnd, =, cursor, ;, return, true, ;, }, else, {, ungetCharIgnoreLineEnd, (]
[), {, tokenEnd, =, cursor, ;, return, true, ;, }, else, {, ungetCharIgnoreLineEnd, (, c, ), ;, return, false, ;]
[==, test, ), {, tokenEnd, =, cursor, ;, return, true, ;, }, else, {, ungetCharIgnoreLineEnd, (, c, ), ;, return]
[), {, tokenEnd, =, cursor, ;, return, true, ;, }, else, {, ungetCharIgnoreLineEnd, (, c, ), ;, return, false, ;]
[=, cursor, ;, return, true, ;, }, else, {, ungetCharIgnoreLineEnd, (, c, ), ;, return, false, ;, }, }, private]
[;, return, true, ;, }, else, {, ungetCharIgnoreLineEnd, (, c, ), ;, return, false, ;, }, }, private, static, boolean]
[;, }, else, {, ungetCharIgnoreLineEnd, (, c, ), ;, return, false, ;, }, }, private, static, boolean, isAlpha, (, int]
[;, return, false, ;, }, }, private, static, boolean, isAlpha, (, int, c, ), {, if, (, c, <=, 'Z']
[), ;, return, false, ;, }, }, private, static, boolean, isAlpha, (, int, c, ), {, if, (, c, <=]
[;, }, }, private, static, boolean, isAlpha, (, int, c, ), {, if, (, c, <=, 'Z', ), {, return]
[), {, return, 'A', <=, c, ;, }, else, {, return, 'a', <=, c, &&, c, <=, 'z', ;, }]
[<=, 'Z', ), {, return, 'A', <=, c, ;, }, else, {, return, 'a', <=, c, &&, c, <=, 'z']
[), {, return, 'A', <=, c, ;, }, else, {, return, 'a', <=, c, &&, c, <=, 'z', ;, }]
[;, }, else, {, return, 'a', <=, c, &&, c, <=, 'z', ;, }, }, private, boolean, isJSDocString, (, int]
[<=, c, ;, }, else, {, return, 'a', <=, c, &&, c, <=, 'z', ;, }, }, private, boolean, isJSDocString]
[;, }, else, {, return, 'a', <=, c, &&, c, <=, 'z', ;, }, }, private, boolean, isJSDocString, (, int]
[;, }, }, private, boolean, isJSDocString, (, int, c, ), {, switch, (, c, ), {, case, '@', :, case]
[&&, c, <=, 'z', ;, }, }, private, boolean, isJSDocString, (, int, c, ), {, switch, (, c, ), {]
[<=, c, &&, c, <=, 'z', ;, }, }, private, boolean, isJSDocString, (, int, c, ), {, switch, (, c]
[&&, c, <=, 'z', ;, }, }, private, boolean, isJSDocString, (, int, c, ), {, switch, (, c, ), {]
[;, }, }, private, boolean, isJSDocString, (, int, c, ), {, switch, (, c, ), {, case, '@', :, case]
[<=, 'z', ;, }, }, private, boolean, isJSDocString, (, int, c, ), {, switch, (, c, ), {, case, '@']
[;, }, }, private, boolean, isJSDocString, (, int, c, ), {, switch, (, c, ), {, case, '@', :, case]
[), {, case, '@', :, case, '*', :, case, ',', :, case, '>', :, case, ':', :, case, '(', :]
[:, case, '*', :, case, ',', :, case, '>', :, case, ':', :, case, '(', :, case, ')', :, case]
[:, case, ',', :, case, '>', :, case, ':', :, case, '(', :, case, ')', :, case, '{', :, case]
[:, case, '>', :, case, ':', :, case, '(', :, case, ')', :, case, '{', :, case, '}', :, case]
[:, case, ':', :, case, '(', :, case, ')', :, case, '{', :, case, '}', :, case, '[', :, case]
[:, case, '(', :, case, ')', :, case, '{', :, case, '}', :, case, '[', :, case, ']', :, case]
[:, case, ')', :, case, '{', :, case, '}', :, case, '[', :, case, ']', :, case, '?', :, case]
[:, case, '{', :, case, '}', :, case, '[', :, case, ']', :, case, '?', :, case, '!', :, case]
[:, case, '}', :, case, '[', :, case, ']', :, case, '?', :, case, '!', :, case, '|', :, case]
[:, case, '[', :, case, ']', :, case, '?', :, case, '!', :, case, '|', :, case, '=', :, case]
[:, case, ']', :, case, '?', :, case, '!', :, case, '|', :, case, '=', :, case, EOF_CHAR, :, case]
[:, case, '?', :, case, '!', :, case, '|', :, case, '=', :, case, EOF_CHAR, :, case, '\n', :, return]
[:, case, '!', :, case, '|', :, case, '=', :, case, EOF_CHAR, :, case, '\n', :, return, false, ;, default]
[:, case, '|', :, case, '=', :, case, EOF_CHAR, :, case, '\n', :, return, false, ;, default, :, return, !]
[:, case, '=', :, case, EOF_CHAR, :, case, '\n', :, return, false, ;, default, :, return, !, isJSSpace, (, c]
[:, case, EOF_CHAR, :, case, '\n', :, return, false, ;, default, :, return, !, isJSSpace, (, c, ), ;, }]
[:, case, '\n', :, return, false, ;, default, :, return, !, isJSSpace, (, c, ), ;, }, }, static, boolean]
[:, return, false, ;, default, :, return, !, isJSSpace, (, c, ), ;, }, }, static, boolean, isJSSpace, (, int]
[;, default, :, return, !, isJSSpace, (, c, ), ;, }, }, static, boolean, isJSSpace, (, int, c, ), {]
[;, }, }, static, boolean, isJSSpace, (, int, c, ), {, if, (, c, <=, 127, ), {, return, c]
[;, }, }, static, boolean, isJSSpace, (, int, c, ), {, if, (, c, <=, 127, ), {, return, c]
[), ;, }, }, static, boolean, isJSSpace, (, int, c, ), {, if, (, c, <=, 127, ), {, return]
[), {, return, c, ==, 0x20, ||, c, ==, 0x9, ||, c, ==, 0xC, ||, c, ==, 0xB, ;, }]
[<=, 127, ), {, return, c, ==, 0x20, ||, c, ==, 0x9, ||, c, ==, 0xC, ||, c, ==, 0xB]
[), {, return, c, ==, 0x20, ||, c, ==, 0x9, ||, c, ==, 0xC, ||, c, ==, 0xB, ;, }]
[;, }, else, {, return, c, ==, 0xA0, ||, Character, ., getType, (, (, char, ), c, ), ==, Character]
[||, c, ==, 0xB, ;, }, else, {, return, c, ==, 0xA0, ||, Character, ., getType, (, (, char, )]
[||, c, ==, 0xC, ||, c, ==, 0xB, ;, }, else, {, return, c, ==, 0xA0, ||, Character, ., getType]
[||, c, ==, 0x9, ||, c, ==, 0xC, ||, c, ==, 0xB, ;, }, else, {, return, c, ==, 0xA0]
[==, 0x20, ||, c, ==, 0x9, ||, c, ==, 0xC, ||, c, ==, 0xB, ;, }, else, {, return, c]
[||, c, ==, 0x9, ||, c, ==, 0xC, ||, c, ==, 0xB, ;, }, else, {, return, c, ==, 0xA0]
[||, c, ==, 0xC, ||, c, ==, 0xB, ;, }, else, {, return, c, ==, 0xA0, ||, Character, ., getType]
[==, 0x9, ||, c, ==, 0xC, ||, c, ==, 0xB, ;, }, else, {, return, c, ==, 0xA0, ||, Character]
[||, c, ==, 0xC, ||, c, ==, 0xB, ;, }, else, {, return, c, ==, 0xA0, ||, Character, ., getType]
[||, c, ==, 0xB, ;, }, else, {, return, c, ==, 0xA0, ||, Character, ., getType, (, (, char, )]
[==, 0xC, ||, c, ==, 0xB, ;, }, else, {, return, c, ==, 0xA0, ||, Character, ., getType, (, (]
[||, c, ==, 0xB, ;, }, else, {, return, c, ==, 0xA0, ||, Character, ., getType, (, (, char, )]
[;, }, else, {, return, c, ==, 0xA0, ||, Character, ., getType, (, (, char, ), c, ), ==, Character]
[==, 0xB, ;, }, else, {, return, c, ==, 0xA0, ||, Character, ., getType, (, (, char, ), c, )]
[;, }, else, {, return, c, ==, 0xA0, ||, Character, ., getType, (, (, char, ), c, ), ==, Character]
[;, }, }, private, static, boolean, isJSFormatChar, (, int, c, ), {, return, c, >, 127, &&, Character, ., getType]
[||, Character, ., getType, (, (, char, ), c, ), ==, Character, ., SPACE_SEPARATOR, ;, }, }, private, static, boolean]
[==, 0xA0, ||, Character, ., getType, (, (, char, ), c, ), ==, Character, ., SPACE_SEPARATOR, ;, }, }, private]
[||, Character, ., getType, (, (, char, ), c, ), ==, Character, ., SPACE_SEPARATOR, ;, }, }, private, static, boolean]
[;, }, }, private, static, boolean, isJSFormatChar, (, int, c, ), {, return, c, >, 127, &&, Character, ., getType]
[==, Character, ., SPACE_SEPARATOR, ;, }, }, private, static, boolean, isJSFormatChar, (, int, c, ), {, return, c, >, 127]
[., getType, (, (, char, ), c, ), ==, Character, ., SPACE_SEPARATOR, ;, }, }, private, static, boolean, isJSFormatChar, (]
[), ==, Character, ., SPACE_SEPARATOR, ;, }, }, private, static, boolean, isJSFormatChar, (, int, c, ), {, return, c, >]
[), ==, Character, ., SPACE_SEPARATOR, ;, }, }, private, static, boolean, isJSFormatChar, (, int, c, ), {, return, c, >]
[;, }, }, private, static, boolean, isJSFormatChar, (, int, c, ), {, return, c, >, 127, &&, Character, ., getType]
[., SPACE_SEPARATOR, ;, }, }, private, static, boolean, isJSFormatChar, (, int, c, ), {, return, c, >, 127, &&, Character]
[;, }, void, update, (, ), {, charno, =, getOffset, (, ), ;, }, private, int, peekChar, (, ), {]
[&&, Character, ., getType, (, (, char, ), c, ), ==, Character, ., FORMAT, ;, }, void, update, (, )]
[>, 127, &&, Character, ., getType, (, (, char, ), c, ), ==, Character, ., FORMAT, ;, }, void, update]
[&&, Character, ., getType, (, (, char, ), c, ), ==, Character, ., FORMAT, ;, }, void, update, (, )]
[;, }, void, update, (, ), {, charno, =, getOffset, (, ), ;, }, private, int, peekChar, (, ), {]
[==, Character, ., FORMAT, ;, }, void, update, (, ), {, charno, =, getOffset, (, ), ;, }, private, int]
[., getType, (, (, char, ), c, ), ==, Character, ., FORMAT, ;, }, void, update, (, ), {, charno]
[), ==, Character, ., FORMAT, ;, }, void, update, (, ), {, charno, =, getOffset, (, ), ;, }, private]
[), ==, Character, ., FORMAT, ;, }, void, update, (, ), {, charno, =, getOffset, (, ), ;, }, private]
[;, }, void, update, (, ), {, charno, =, getOffset, (, ), ;, }, private, int, peekChar, (, ), {]
[., FORMAT, ;, }, void, update, (, ), {, charno, =, getOffset, (, ), ;, }, private, int, peekChar, (]
[=, getOffset, (, ), ;, }, private, int, peekChar, (, ), {, int, c, =, getChar, (, ), ;, ungetChar]
[;, }, private, int, peekChar, (, ), {, int, c, =, getChar, (, ), ;, ungetChar, (, c, ), ;]
[;, ungetChar, (, c, ), ;, return, c, ;, }, protected, int, getChar, (, ), {, if, (, ungetCursor, !=]
[;, return, c, ;, }, protected, int, getChar, (, ), {, if, (, ungetCursor, !=, 0, ), {, cursor, ++]
[), ;, return, c, ;, }, protected, int, getChar, (, ), {, if, (, ungetCursor, !=, 0, ), {, cursor]
[;, }, protected, int, getChar, (, ), {, if, (, ungetCursor, !=, 0, ), {, cursor, ++, ;, --, ungetCursor]
[), {, cursor, ++, ;, --, ungetCursor, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (]
[!=, 0, ), {, cursor, ++, ;, --, ungetCursor, ;, if, (, charno, ==, -, 1, ), {, charno, =]
[), {, cursor, ++, ;, --, ungetCursor, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (]
[;, --, ungetCursor, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return]
[++, ;, --, ungetCursor, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }]
[;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, ungetBuffer, [, ungetCursor]
[;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, ungetBuffer, [, ungetCursor]
[), {, charno, =, getOffset, (, ), ;, }, return, ungetBuffer, [, ungetCursor, ], ;, }, for, (, ;, ;]
[==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, ungetBuffer, [, ungetCursor, ], ;, }, for]
[), {, charno, =, getOffset, (, ), ;, }, return, ungetBuffer, [, ungetCursor, ], ;, }, for, (, ;, ;]
[), {, charno, =, getOffset, (, ), ;, }, return, ungetBuffer, [, ungetCursor, ], ;, }, for, (, ;, ;]
[=, getOffset, (, ), ;, }, return, ungetBuffer, [, ungetCursor, ], ;, }, for, (, ;, ;, ), {, int]
[;, }, return, ungetBuffer, [, ungetCursor, ], ;, }, for, (, ;, ;, ), {, int, c, ;, if, (]
[;, }, for, (, ;, ;, ), {, int, c, ;, if, (, sourceCursor, ==, sourceEnd, ), {, hitEOF, =]
[[, ungetCursor, ], ;, }, for, (, ;, ;, ), {, int, c, ;, if, (, sourceCursor, ==, sourceEnd, )]
[], ;, }, for, (, ;, ;, ), {, int, c, ;, if, (, sourceCursor, ==, sourceEnd, ), {, hitEOF]
[), {, hitEOF, =, true, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;]
[==, sourceEnd, ), {, hitEOF, =, true, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (]
[), {, hitEOF, =, true, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;]
[=, true, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR]
[;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }]
[), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =, sourceString, .]
[==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }, cursor, ++, ;, c]
[), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =, sourceString, .]
[), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =, sourceString, .]
[=, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =, sourceString, ., charAt, (, sourceCursor]
[;, }, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if]
[;, }, cursor, ++, ;, c, =, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (, lineEndChar, >=, 0]
[;, c, =, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (, lineEndChar, >=, 0, ), {, if, (]
[++, ;, c, =, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (, lineEndChar, >=, 0, ), {, if]
[=, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (, lineEndChar, >=, 0, ), {, if, (, lineEndChar, ==]
[;, if, (, lineEndChar, >=, 0, ), {, if, (, lineEndChar, ==, '\r', &&, c, ==, '\n', ), {, lineEndChar]
[., charAt, (, sourceCursor, ++, ), ;, if, (, lineEndChar, >=, 0, ), {, if, (, lineEndChar, ==, '\r', &&]
[), ;, if, (, lineEndChar, >=, 0, ), {, if, (, lineEndChar, ==, '\r', &&, c, ==, '\n', ), {]
[++, ), ;, if, (, lineEndChar, >=, 0, ), {, if, (, lineEndChar, ==, '\r', &&, c, ==, '\n', )]
[), {, if, (, lineEndChar, ==, '\r', &&, c, ==, '\n', ), {, lineEndChar, =, '\n', ;, continue, ;, }]
[>=, 0, ), {, if, (, lineEndChar, ==, '\r', &&, c, ==, '\n', ), {, lineEndChar, =, '\n', ;, continue]
[), {, if, (, lineEndChar, ==, '\r', &&, c, ==, '\n', ), {, lineEndChar, =, '\n', ;, continue, ;, }]
[), {, lineEndChar, =, '\n', ;, continue, ;, }, lineEndChar, =, -, 1, ;, lineStart, =, sourceCursor, -, 1, ;]
[&&, c, ==, '\n', ), {, lineEndChar, =, '\n', ;, continue, ;, }, lineEndChar, =, -, 1, ;, lineStart, =]
[==, '\r', &&, c, ==, '\n', ), {, lineEndChar, =, '\n', ;, continue, ;, }, lineEndChar, =, -, 1, ;]
[&&, c, ==, '\n', ), {, lineEndChar, =, '\n', ;, continue, ;, }, lineEndChar, =, -, 1, ;, lineStart, =]
[), {, lineEndChar, =, '\n', ;, continue, ;, }, lineEndChar, =, -, 1, ;, lineStart, =, sourceCursor, -, 1, ;]
[==, '\n', ), {, lineEndChar, =, '\n', ;, continue, ;, }, lineEndChar, =, -, 1, ;, lineStart, =, sourceCursor, -]
[), {, lineEndChar, =, '\n', ;, continue, ;, }, lineEndChar, =, -, 1, ;, lineStart, =, sourceCursor, -, 1, ;]
[=, '\n', ;, continue, ;, }, lineEndChar, =, -, 1, ;, lineStart, =, sourceCursor, -, 1, ;, lineno, ++, ;]
[;, continue, ;, }, lineEndChar, =, -, 1, ;, lineStart, =, sourceCursor, -, 1, ;, lineno, ++, ;, }, if]
[=, -, 1, ;, lineStart, =, sourceCursor, -, 1, ;, lineno, ++, ;, }, if, (, c, <=, 127, )]
[;, lineStart, =, sourceCursor, -, 1, ;, lineno, ++, ;, }, if, (, c, <=, 127, ), {, if, (]
[;, lineStart, =, sourceCursor, -, 1, ;, lineno, ++, ;, }, if, (, c, <=, 127, ), {, if, (]
[=, sourceCursor, -, 1, ;, lineno, ++, ;, }, if, (, c, <=, 127, ), {, if, (, c, ==]
[;, lineno, ++, ;, }, if, (, c, <=, 127, ), {, if, (, c, ==, '\n', ||, c, ==]
[-, 1, ;, lineno, ++, ;, }, if, (, c, <=, 127, ), {, if, (, c, ==, '\n', ||]
[;, lineno, ++, ;, }, if, (, c, <=, 127, ), {, if, (, c, ==, '\n', ||, c, ==]
[;, }, if, (, c, <=, 127, ), {, if, (, c, ==, '\n', ||, c, ==, '\r', ), {]
[++, ;, }, if, (, c, <=, 127, ), {, if, (, c, ==, '\n', ||, c, ==, '\r', )]
[), {, if, (, c, ==, '\n', ||, c, ==, '\r', ), {, lineEndChar, =, c, ;, c, =, '\n']
[<=, 127, ), {, if, (, c, ==, '\n', ||, c, ==, '\r', ), {, lineEndChar, =, c, ;, c]
[), {, if, (, c, ==, '\n', ||, c, ==, '\r', ), {, lineEndChar, =, c, ;, c, =, '\n']
[), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, else, {, if, (, isJSFormatChar, (, c, )]
[||, c, ==, '\r', ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, else, {, if, (]
[==, '\n', ||, c, ==, '\r', ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, else, {]
[||, c, ==, '\r', ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, else, {, if, (]
[), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, else, {, if, (, isJSFormatChar, (, c, )]
[==, '\r', ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, else, {, if, (, isJSFormatChar, (]
[), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, else, {, if, (, isJSFormatChar, (, c, )]
[=, c, ;, c, =, '\n', ;, }, }, else, {, if, (, isJSFormatChar, (, c, ), ), {, continue]
[;, c, =, '\n', ;, }, }, else, {, if, (, isJSFormatChar, (, c, ), ), {, continue, ;, }]
[=, '\n', ;, }, }, else, {, if, (, isJSFormatChar, (, c, ), ), {, continue, ;, }, if, (]
[;, }, }, else, {, if, (, isJSFormatChar, (, c, ), ), {, continue, ;, }, if, (, ScriptRuntime, .]
[), {, continue, ;, }, if, (, ScriptRuntime, ., isJSLineTerminator, (, c, ), ), {, lineEndChar, =, c, ;, c]
[), ), {, continue, ;, }, if, (, ScriptRuntime, ., isJSLineTerminator, (, c, ), ), {, lineEndChar, =, c, ;]
[), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, if, (, charno, ==, -, 1, ), {]
[., isJSLineTerminator, (, c, ), ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, if, (, charno]
[), ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, if, (, charno, ==, -, 1, )]
[=, c, ;, c, =, '\n', ;, }, }, if, (, charno, ==, -, 1, ), {, charno, =, getOffset]
[;, c, =, '\n', ;, }, }, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, )]
[=, '\n', ;, }, }, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }]
[;, }, }, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, c]
[), {, charno, =, getOffset, (, ), ;, }, return, c, ;, }, }, private, int, getCharIgnoreLineEnd, (, ), {]
[==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, c, ;, }, }, private, int, getCharIgnoreLineEnd]
[), {, charno, =, getOffset, (, ), ;, }, return, c, ;, }, }, private, int, getCharIgnoreLineEnd, (, ), {]
[), {, charno, =, getOffset, (, ), ;, }, return, c, ;, }, }, private, int, getCharIgnoreLineEnd, (, ), {]
[=, getOffset, (, ), ;, }, return, c, ;, }, }, private, int, getCharIgnoreLineEnd, (, ), {, if, (, ungetCursor]
[;, }, return, c, ;, }, }, private, int, getCharIgnoreLineEnd, (, ), {, if, (, ungetCursor, !=, 0, ), {]
[;, }, }, private, int, getCharIgnoreLineEnd, (, ), {, if, (, ungetCursor, !=, 0, ), {, cursor, ++, ;, --]
[), {, cursor, ++, ;, --, ungetCursor, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (]
[!=, 0, ), {, cursor, ++, ;, --, ungetCursor, ;, if, (, charno, ==, -, 1, ), {, charno, =]
[), {, cursor, ++, ;, --, ungetCursor, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (]
[;, --, ungetCursor, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return]
[++, ;, --, ungetCursor, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }]
[;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, ungetBuffer, [, ungetCursor]
[;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, ungetBuffer, [, ungetCursor]
[), {, charno, =, getOffset, (, ), ;, }, return, ungetBuffer, [, ungetCursor, ], ;, }, for, (, ;, ;]
[==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, ungetBuffer, [, ungetCursor, ], ;, }, for]
[), {, charno, =, getOffset, (, ), ;, }, return, ungetBuffer, [, ungetCursor, ], ;, }, for, (, ;, ;]
[), {, charno, =, getOffset, (, ), ;, }, return, ungetBuffer, [, ungetCursor, ], ;, }, for, (, ;, ;]
[=, getOffset, (, ), ;, }, return, ungetBuffer, [, ungetCursor, ], ;, }, for, (, ;, ;, ), {, int]
[;, }, return, ungetBuffer, [, ungetCursor, ], ;, }, for, (, ;, ;, ), {, int, c, ;, if, (]
[;, }, for, (, ;, ;, ), {, int, c, ;, if, (, sourceCursor, ==, sourceEnd, ), {, hitEOF, =]
[[, ungetCursor, ], ;, }, for, (, ;, ;, ), {, int, c, ;, if, (, sourceCursor, ==, sourceEnd, )]
[], ;, }, for, (, ;, ;, ), {, int, c, ;, if, (, sourceCursor, ==, sourceEnd, ), {, hitEOF]
[), {, hitEOF, =, true, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;]
[==, sourceEnd, ), {, hitEOF, =, true, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (]
[), {, hitEOF, =, true, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;]
[=, true, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR]
[;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }]
[), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =, sourceString, .]
[==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }, cursor, ++, ;, c]
[), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =, sourceString, .]
[), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =, sourceString, .]
[=, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =, sourceString, ., charAt, (, sourceCursor]
[;, }, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if]
[;, }, cursor, ++, ;, c, =, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (, c, <=, 127]
[;, c, =, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (, c, <=, 127, ), {, if, (]
[++, ;, c, =, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (, c, <=, 127, ), {, if]
[=, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (, c, <=, 127, ), {, if, (, c, ==]
[;, if, (, c, <=, 127, ), {, if, (, c, ==, '\n', ||, c, ==, '\r', ), {, lineEndChar]
[., charAt, (, sourceCursor, ++, ), ;, if, (, c, <=, 127, ), {, if, (, c, ==, '\n', ||]
[), ;, if, (, c, <=, 127, ), {, if, (, c, ==, '\n', ||, c, ==, '\r', ), {]
[++, ), ;, if, (, c, <=, 127, ), {, if, (, c, ==, '\n', ||, c, ==, '\r', )]
[), {, if, (, c, ==, '\n', ||, c, ==, '\r', ), {, lineEndChar, =, c, ;, c, =, '\n']
[<=, 127, ), {, if, (, c, ==, '\n', ||, c, ==, '\r', ), {, lineEndChar, =, c, ;, c]
[), {, if, (, c, ==, '\n', ||, c, ==, '\r', ), {, lineEndChar, =, c, ;, c, =, '\n']
[), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, else, {, if, (, isJSFormatChar, (, c, )]
[||, c, ==, '\r', ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, else, {, if, (]
[==, '\n', ||, c, ==, '\r', ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, else, {]
[||, c, ==, '\r', ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, else, {, if, (]
[), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, else, {, if, (, isJSFormatChar, (, c, )]
[==, '\r', ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, else, {, if, (, isJSFormatChar, (]
[), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, else, {, if, (, isJSFormatChar, (, c, )]
[=, c, ;, c, =, '\n', ;, }, }, else, {, if, (, isJSFormatChar, (, c, ), ), {, continue]
[;, c, =, '\n', ;, }, }, else, {, if, (, isJSFormatChar, (, c, ), ), {, continue, ;, }]
[=, '\n', ;, }, }, else, {, if, (, isJSFormatChar, (, c, ), ), {, continue, ;, }, if, (]
[;, }, }, else, {, if, (, isJSFormatChar, (, c, ), ), {, continue, ;, }, if, (, ScriptRuntime, .]
[), {, continue, ;, }, if, (, ScriptRuntime, ., isJSLineTerminator, (, c, ), ), {, lineEndChar, =, c, ;, c]
[), ), {, continue, ;, }, if, (, ScriptRuntime, ., isJSLineTerminator, (, c, ), ), {, lineEndChar, =, c, ;]
[), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, if, (, charno, ==, -, 1, ), {]
[., isJSLineTerminator, (, c, ), ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, if, (, charno]
[), ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, if, (, charno, ==, -, 1, )]
[=, c, ;, c, =, '\n', ;, }, }, if, (, charno, ==, -, 1, ), {, charno, =, getOffset]
[;, c, =, '\n', ;, }, }, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, )]
[=, '\n', ;, }, }, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }]
[;, }, }, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, c]
[), {, charno, =, getOffset, (, ), ;, }, return, c, ;, }, }, private, void, ungetCharIgnoreLineEnd, (, int, c]
[==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, c, ;, }, }, private, void, ungetCharIgnoreLineEnd]
[), {, charno, =, getOffset, (, ), ;, }, return, c, ;, }, }, private, void, ungetCharIgnoreLineEnd, (, int, c]
[), {, charno, =, getOffset, (, ), ;, }, return, c, ;, }, }, private, void, ungetCharIgnoreLineEnd, (, int, c]
[=, getOffset, (, ), ;, }, return, c, ;, }, }, private, void, ungetCharIgnoreLineEnd, (, int, c, ), {, ungetBuffer]
[;, }, return, c, ;, }, }, private, void, ungetCharIgnoreLineEnd, (, int, c, ), {, ungetBuffer, [, ungetCursor, ++, ]]
[;, }, }, private, void, ungetCharIgnoreLineEnd, (, int, c, ), {, ungetBuffer, [, ungetCursor, ++, ], =, c, ;, cursor]
[=, c, ;, cursor, --, ;, }, final, int, getOffset, (, ), {, return, sourceCursor, -, lineStart, -, ungetCursor, -]
[[, ungetCursor, ++, ], =, c, ;, cursor, --, ;, }, final, int, getOffset, (, ), {, return, sourceCursor, -]
[], =, c, ;, cursor, --, ;, }, final, int, getOffset, (, ), {, return, sourceCursor, -, lineStart, -, ungetCursor]
[++, ], =, c, ;, cursor, --, ;, }, final, int, getOffset, (, ), {, return, sourceCursor, -, lineStart, -]
[;, cursor, --, ;, }, final, int, getOffset, (, ), {, return, sourceCursor, -, lineStart, -, ungetCursor, -, 1, ;]
[;, }, final, int, getOffset, (, ), {, return, sourceCursor, -, lineStart, -, ungetCursor, -, 1, ;, }, private, String]
[--, ;, }, final, int, getOffset, (, ), {, return, sourceCursor, -, lineStart, -, ungetCursor, -, 1, ;, }, private]
[;, }, private, String, string, =, "", ;, private, char, [, ], stringBuffer, =, new, char, [, 128, ], ;]
[-, 1, ;, }, private, String, string, =, "", ;, private, char, [, ], stringBuffer, =, new, char, [, 128]
[-, ungetCursor, -, 1, ;, }, private, String, string, =, "", ;, private, char, [, ], stringBuffer, =, new, char]
[-, lineStart, -, ungetCursor, -, 1, ;, }, private, String, string, =, "", ;, private, char, [, ], stringBuffer, =]
[-, ungetCursor, -, 1, ;, }, private, String, string, =, "", ;, private, char, [, ], stringBuffer, =, new, char]
[-, 1, ;, }, private, String, string, =, "", ;, private, char, [, ], stringBuffer, =, new, char, [, 128]
[;, }, private, String, string, =, "", ;, private, char, [, ], stringBuffer, =, new, char, [, 128, ], ;]
[;, private, char, [, ], stringBuffer, =, new, char, [, 128, ], ;, private, int, stringBufferTop, ;, private, final, int]
[;, private, int, stringBufferTop, ;, private, final, int, [, ], ungetBuffer, =, new, int, [, 3, ], ;, private, int]
[], ;, private, int, stringBufferTop, ;, private, final, int, [, ], ungetBuffer, =, new, int, [, 3, ], ;, private]
[;, private, int, ungetCursor, ;, private, boolean, hitEOF, =, false, ;, private, int, lineStart, =, 0, ;, private, int, lineEndChar]
[], ;, private, int, ungetCursor, ;, private, boolean, hitEOF, =, false, ;, private, int, lineStart, =, 0, ;, private, int]
[;, private, int, lineStart, =, 0, ;, private, int, lineEndChar, =, -, 1, ;, int, lineno, ;, private, int, charno]
[;, private, int, lineEndChar, =, -, 1, ;, int, lineno, ;, private, int, charno, =, -, 1, ;, private, int]
[;, int, lineno, ;, private, int, charno, =, -, 1, ;, private, int, initCharno, ;, private, int, initLineno, ;, private]
[;, int, lineno, ;, private, int, charno, =, -, 1, ;, private, int, initCharno, ;, private, int, initLineno, ;, private]
[;, private, int, initCharno, ;, private, int, initLineno, ;, private, String, sourceString, ;, private, int, sourceEnd, ;, int, sourceCursor, ;]
[;, private, int, initCharno, ;, private, int, initLineno, ;, private, String, sourceString, ;, private, int, sourceEnd, ;, int, sourceCursor, ;]
