[import, java, ., util, ., Set, ;, abstract, class, MethodCompilerPass, implements, CompilerPass, {, final, Set, <, String, >, externMethods, =]
[import, java, ., util, ., Set, ;, abstract, class, MethodCompilerPass, implements, CompilerPass, {, final, Set, <, String, >, externMethods, =]
[final, Set, <, String, >, externMethods, =, Sets, ., newHashSet, (, ), ;, final, Set, <, String, >, externMethodsWithoutSignatures, =]
[final, Set, <, String, >, externMethods, =, Sets, ., newHashSet, (, ), ;, final, Set, <, String, >, externMethodsWithoutSignatures, =]
[final, Set, <, String, >, externMethodsWithoutSignatures, =, Sets, ., newHashSet, (, ), ;, final, Set, <, String, >, nonMethodProperties, =]
[final, Set, <, String, >, externMethodsWithoutSignatures, =, Sets, ., newHashSet, (, ), ;, final, Set, <, String, >, nonMethodProperties, =]
[<, String, >, nonMethodProperties, =, Sets, ., newHashSet, (, ), ;, final, Multimap, <, String, ,, Node, >, methodDefinitions, =]
[<, String, >, nonMethodProperties, =, Sets, ., newHashSet, (, ), ;, final, Multimap, <, String, ,, Node, >, methodDefinitions, =]
[,, String, sourceFile, ), ;, public, void, removeSignature, (, String, functionName, ), ;, }, MethodCompilerPass, (, AbstractCompiler, compiler, ), {]
[,, String, sourceFile, ), ;, public, void, removeSignature, (, String, functionName, ), ;, }, MethodCompilerPass, (, AbstractCompiler, compiler, ), {]
[;, public, void, removeSignature, (, String, functionName, ), ;, }, MethodCompilerPass, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, externMethods, ., clear, (, ), ;]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, externMethods, ., clear, (, ), ;]
[(, Node, externs, ,, Node, root, ), {, externMethods, ., clear, (, ), ;, externMethodsWithoutSignatures, ., clear, (, ), ;]
[(, Node, externs, ,, Node, root, ), {, externMethods, ., clear, (, ), ;, externMethodsWithoutSignatures, ., clear, (, ), ;]
[externMethods, ., clear, (, ), ;, externMethodsWithoutSignatures, ., clear, (, ), ;, getSignatureStore, (, ), ., reset, (, ), ;]
[externMethods, ., clear, (, ), ;, externMethodsWithoutSignatures, ., clear, (, ), ;, getSignatureStore, (, ), ., reset, (, ), ;]
[clear, (, ), ;, getSignatureStore, (, ), ., reset, (, ), ;, methodDefinitions, ., clear, (, ), ;, if, (]
[clear, (, ), ;, getSignatureStore, (, ), ., reset, (, ), ;, methodDefinitions, ., clear, (, ), ;, if, (]
[), ;, getSignatureStore, (, ), ., reset, (, ), ;, methodDefinitions, ., clear, (, ), ;, if, (, externs, !=]
[(, ), ., reset, (, ), ;, methodDefinitions, ., clear, (, ), ;, if, (, externs, !=, null, ), {]
[(, ), ., reset, (, ), ;, methodDefinitions, ., clear, (, ), ;, if, (, externs, !=, null, ), {]
[(, ), ;, methodDefinitions, ., clear, (, ), ;, if, (, externs, !=, null, ), {, NodeTraversal, ., traverse, (]
[;, methodDefinitions, ., clear, (, ), ;, if, (, externs, !=, null, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[., clear, (, ), ;, if, (, externs, !=, null, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,]
[., traverse, (, compiler, ,, externs, ,, new, GetExternMethods, (, ), ), ;, }, List, <, Node, >, externsAndJs, =]
[., traverse, (, compiler, ,, externs, ,, new, GetExternMethods, (, ), ), ;, }, List, <, Node, >, externsAndJs, =]
[,, externs, ,, new, GetExternMethods, (, ), ), ;, }, List, <, Node, >, externsAndJs, =, Lists, ., newArrayList, (]
[,, new, GetExternMethods, (, ), ), ;, }, List, <, Node, >, externsAndJs, =, Lists, ., newArrayList, (, externs, ,]
[(, ), ), ;, }, List, <, Node, >, externsAndJs, =, Lists, ., newArrayList, (, externs, ,, root, ), ;]
[(, ), ), ;, }, List, <, Node, >, externsAndJs, =, Lists, ., newArrayList, (, externs, ,, root, ), ;]
[}, List, <, Node, >, externsAndJs, =, Lists, ., newArrayList, (, externs, ,, root, ), ;, NodeTraversal, ., traverseRoots, (]
[<, Node, >, externsAndJs, =, Lists, ., newArrayList, (, externs, ,, root, ), ;, NodeTraversal, ., traverseRoots, (, compiler, ,]
[<, Node, >, externsAndJs, =, Lists, ., newArrayList, (, externs, ,, root, ), ;, NodeTraversal, ., traverseRoots, (, compiler, ,]
[=, Lists, ., newArrayList, (, externs, ,, root, ), ;, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (]
[., newArrayList, (, externs, ,, root, ), ;, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,]
[externs, ,, root, ), ;, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,]
[., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, new, GatherSignatures, (, ), ), ;]
[., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, new, GatherSignatures, (, ), ), ;]
[,, Lists, ., newArrayList, (, externs, ,, root, ), ,, new, GatherSignatures, (, ), ), ;, NodeTraversal, ., traverseRoots, (]
[., newArrayList, (, externs, ,, root, ), ,, new, GatherSignatures, (, ), ), ;, NodeTraversal, ., traverseRoots, (, compiler, ,]
[(, externs, ,, root, ), ,, new, GatherSignatures, (, ), ), ;, NodeTraversal, ., traverseRoots, (, compiler, ,, externsAndJs, ,]
[getSignatureStore, (, ), ;, private, void, addPossibleSignature, (, String, name, ,, Node, node, ,, NodeTraversal, t, ), {, if, (]
[getSignatureStore, (, ), ;, private, void, addPossibleSignature, (, String, name, ,, Node, node, ,, NodeTraversal, t, ), {, if, (]
[(, String, name, ,, Node, node, ,, NodeTraversal, t, ), {, if, (, node, ., isFunction, (, ), ), {]
[name, ,, Node, node, ,, NodeTraversal, t, ), {, if, (, node, ., isFunction, (, ), ), {, addSignature, (]
[Node, node, ,, NodeTraversal, t, ), {, if, (, node, ., isFunction, (, ), ), {, addSignature, (, name, ,]
[,, NodeTraversal, t, ), {, if, (, node, ., isFunction, (, ), ), {, addSignature, (, name, ,, node, ,]
[,, NodeTraversal, t, ), {, if, (, node, ., isFunction, (, ), ), {, addSignature, (, name, ,, node, ,]
[(, ), ), {, addSignature, (, name, ,, node, ,, t, ., getSourceName, (, ), ), ;, }, else, {]
[(, ), ), {, addSignature, (, name, ,, node, ,, t, ., getSourceName, (, ), ), ;, }, else, {]
[addSignature, (, name, ,, node, ,, t, ., getSourceName, (, ), ), ;, }, else, {, nonMethodProperties, ., add, (]
[), ;, }, }, private, void, addSignature, (, String, name, ,, Node, function, ,, String, fnSourceName, ), {, if, (]
[), ;, }, }, private, void, addSignature, (, String, name, ,, Node, function, ,, String, fnSourceName, ), {, if, (]
[private, void, addSignature, (, String, name, ,, Node, function, ,, String, fnSourceName, ), {, if, (, externMethodsWithoutSignatures, ., contains, (]
[Node, function, ,, String, fnSourceName, ), {, if, (, externMethodsWithoutSignatures, ., contains, (, name, ), ), {, return, ;, }]
[Node, function, ,, String, fnSourceName, ), {, if, (, externMethodsWithoutSignatures, ., contains, (, name, ), ), {, return, ;, }]
[{, if, (, externMethodsWithoutSignatures, ., contains, (, name, ), ), {, return, ;, }, getSignatureStore, (, ), ., addSignature, (]
[(, externMethodsWithoutSignatures, ., contains, (, name, ), ), {, return, ;, }, getSignatureStore, (, ), ., addSignature, (, name, ,]
[., contains, (, name, ), ), {, return, ;, }, getSignatureStore, (, ), ., addSignature, (, name, ,, function, ,]
[name, ), ), {, return, ;, }, getSignatureStore, (, ), ., addSignature, (, name, ,, function, ,, fnSourceName, ), ;]
[name, ), ), {, return, ;, }, getSignatureStore, (, ), ., addSignature, (, name, ,, function, ,, fnSourceName, ), ;]
[return, ;, }, getSignatureStore, (, ), ., addSignature, (, name, ,, function, ,, fnSourceName, ), ;, methodDefinitions, ., put, (]
[}, getSignatureStore, (, ), ., addSignature, (, name, ,, function, ,, fnSourceName, ), ;, methodDefinitions, ., put, (, name, ,]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case]
[,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case]
[., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, {, Node, dest, =]
[., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, {, Node, dest, =]
[., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, {, Node, dest, =]
[Token, ., GETELEM, :, {, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[., GETELEM, :, {, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, !]
[., GETELEM, :, {, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, !]
[getNext, (, ), ;, if, (, !, dest, ., isString, (, ), ), {, return, ;, }, String, name, =]
[getNext, (, ), ;, if, (, !, dest, ., isString, (, ), ), {, return, ;, }, String, name, =]
[., isString, (, ), ), {, return, ;, }, String, name, =, dest, ., getString, (, ), ;, if, (]
[., isString, (, ), ), {, return, ;, }, String, name, =, dest, ., getString, (, ), ;, if, (]
[., isString, (, ), ), {, return, ;, }, String, name, =, dest, ., getString, (, ), ;, if, (]
[., isString, (, ), ), {, return, ;, }, String, name, =, dest, ., getString, (, ), ;, if, (]
[return, ;, }, String, name, =, dest, ., getString, (, ), ;, if, (, parent, ., isAssign, (, ), &&]
[return, ;, }, String, name, =, dest, ., getString, (, ), ;, if, (, parent, ., isAssign, (, ), &&]
[return, ;, }, String, name, =, dest, ., getString, (, ), ;, if, (, parent, ., isAssign, (, ), &&]
[dest, ., getString, (, ), ;, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==]
[getString, (, ), ;, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, &&]
[getString, (, ), ;, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, &&]
[getString, (, ), ;, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, &&]
[&&, parent, ., getFirstChild, (, ), ==, n, &&, n, ., getNext, (, ), ., isFunction, (, ), ), {]
[., getFirstChild, (, ), ==, n, &&, n, ., getNext, (, ), ., isFunction, (, ), ), {, addSignature, (]
[(, ), ==, n, &&, n, ., getNext, (, ), ., isFunction, (, ), ), {, addSignature, (, name, ,]
[(, ), ==, n, &&, n, ., getNext, (, ), ., isFunction, (, ), ), {, addSignature, (, name, ,]
[., getNext, (, ), ., isFunction, (, ), ), {, addSignature, (, name, ,, n, ., getNext, (, ), ,]
[., getNext, (, ), ., isFunction, (, ), ), {, addSignature, (, name, ,, n, ., getNext, (, ), ,]
[addSignature, (, name, ,, n, ., getNext, (, ), ,, t, ., getSourceName, (, ), ), ;, }, else, {]
[addSignature, (, name, ,, n, ., getNext, (, ), ,, t, ., getSourceName, (, ), ), ;, }, else, {]
[getNext, (, ), ,, t, ., getSourceName, (, ), ), ;, }, else, {, getSignatureStore, (, ), ., removeSignature, (]
[,, t, ., getSourceName, (, ), ), ;, }, else, {, getSignatureStore, (, ), ., removeSignature, (, name, ), ;]
[,, t, ., getSourceName, (, ), ), ;, }, else, {, getSignatureStore, (, ), ., removeSignature, (, name, ), ;]
[(, ), ), ;, }, else, {, getSignatureStore, (, ), ., removeSignature, (, name, ), ;, externMethodsWithoutSignatures, ., add, (]
[}, else, {, getSignatureStore, (, ), ., removeSignature, (, name, ), ;, externMethodsWithoutSignatures, ., add, (, name, ), ;, }]
[}, else, {, getSignatureStore, (, ), ., removeSignature, (, name, ), ;, externMethodsWithoutSignatures, ., add, (, name, ), ;, }]
[(, ), ., removeSignature, (, name, ), ;, externMethodsWithoutSignatures, ., add, (, name, ), ;, }, externMethods, ., add, (]
[;, externMethodsWithoutSignatures, ., add, (, name, ), ;, }, externMethods, ., add, (, name, ), ;, }, break, ;, case]
[;, externMethodsWithoutSignatures, ., add, (, name, ), ;, }, externMethods, ., add, (, name, ), ;, }, break, ;, case]
[., add, (, name, ), ;, }, break, ;, case, Token, ., OBJECTLIT, :, {, for, (, Node, key, =]
[., add, (, name, ), ;, }, break, ;, case, Token, ., OBJECTLIT, :, {, for, (, Node, key, =]
[}, break, ;, case, Token, ., OBJECTLIT, :, {, for, (, Node, key, =, n, ., getFirstChild, (, ), ;]
[}, break, ;, case, Token, ., OBJECTLIT, :, {, for, (, Node, key, =, n, ., getFirstChild, (, ), ;]
[;, case, Token, ., OBJECTLIT, :, {, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=]
[Token, ., OBJECTLIT, :, {, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;]
[OBJECTLIT, :, {, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[OBJECTLIT, :, {, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, Node, value, =]
[getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, Node, value, =]
[=, key, ., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, String, name, =]
[=, key, ., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, String, name, =]
[Node, value, =, key, ., getFirstChild, (, ), ;, String, name, =, key, ., getString, (, ), ;, if, (]
[Node, value, =, key, ., getFirstChild, (, ), ;, String, name, =, key, ., getString, (, ), ;, if, (]
[Node, value, =, key, ., getFirstChild, (, ), ;, String, name, =, key, ., getString, (, ), ;, if, (]
[(, ), ;, String, name, =, key, ., getString, (, ), ;, if, (, key, ., isStringKey, (, ), &&]
[(, ), ;, String, name, =, key, ., getString, (, ), ;, if, (, key, ., isStringKey, (, ), &&]
[., getString, (, ), ;, if, (, key, ., isStringKey, (, ), &&, value, ., isFunction, (, ), ), {]
[(, ), ;, if, (, key, ., isStringKey, (, ), &&, value, ., isFunction, (, ), ), {, addSignature, (]
[;, if, (, key, ., isStringKey, (, ), &&, value, ., isFunction, (, ), ), {, addSignature, (, name, ,]
[(, key, ., isStringKey, (, ), &&, value, ., isFunction, (, ), ), {, addSignature, (, name, ,, value, ,]
[(, key, ., isStringKey, (, ), &&, value, ., isFunction, (, ), ), {, addSignature, (, name, ,, value, ,]
[(, ), ), {, addSignature, (, name, ,, value, ,, t, ., getSourceName, (, ), ), ;, }, else, {]
[(, ), ), {, addSignature, (, name, ,, value, ,, t, ., getSourceName, (, ), ), ;, }, else, {]
[name, ,, value, ,, t, ., getSourceName, (, ), ), ;, }, else, {, getSignatureStore, (, ), ., removeSignature, (]
[,, t, ., getSourceName, (, ), ), ;, }, else, {, getSignatureStore, (, ), ., removeSignature, (, name, ), ;]
[,, t, ., getSourceName, (, ), ), ;, }, else, {, getSignatureStore, (, ), ., removeSignature, (, name, ), ;]
[(, ), ), ;, }, else, {, getSignatureStore, (, ), ., removeSignature, (, name, ), ;, externMethodsWithoutSignatures, ., add, (]
[}, else, {, getSignatureStore, (, ), ., removeSignature, (, name, ), ;, externMethodsWithoutSignatures, ., add, (, name, ), ;, }]
[}, else, {, getSignatureStore, (, ), ., removeSignature, (, name, ), ;, externMethodsWithoutSignatures, ., add, (, name, ), ;, }]
[(, ), ., removeSignature, (, name, ), ;, externMethodsWithoutSignatures, ., add, (, name, ), ;, }, externMethods, ., add, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case]
[,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case]
[n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =]
[n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =]
[n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =]
[case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {, if, (]
[., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {, if, (]
[., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {, if, (]
[;, if, (, dest, ., isString, (, ), ), {, if, (, dest, ., getString, (, ), ., equals, (]
[., isString, (, ), ), {, if, (, dest, ., getString, (, ), ., equals, (, "prototype", ), ), {]
[(, ), ), {, if, (, dest, ., getString, (, ), ., equals, (, "prototype", ), ), {, processPrototypeParent, (]
[), {, if, (, dest, ., getString, (, ), ., equals, (, "prototype", ), ), {, processPrototypeParent, (, t, ,]
[), ., equals, (, "prototype", ), ), {, processPrototypeParent, (, t, ,, parent, ), ;, }, else, {, if, (]
[), ., equals, (, "prototype", ), ), {, processPrototypeParent, (, t, ,, parent, ), ;, }, else, {, if, (]
[), ., equals, (, "prototype", ), ), {, processPrototypeParent, (, t, ,, parent, ), ;, }, else, {, if, (]
[), {, processPrototypeParent, (, t, ,, parent, ), ;, }, else, {, if, (, parent, ., isAssign, (, ), &&]
[), {, processPrototypeParent, (, t, ,, parent, ), ;, }, else, {, if, (, parent, ., isAssign, (, ), &&]
[), {, processPrototypeParent, (, t, ,, parent, ), ;, }, else, {, if, (, parent, ., isAssign, (, ), &&]
[parent, ), ;, }, else, {, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==]
[}, else, {, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {]
[{, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, addPossibleSignature, (]
[{, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, addPossibleSignature, (]
[(, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, addPossibleSignature, (, dest, ., getString, (, ), ,]
[(, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, addPossibleSignature, (, dest, ., getString, (, ), ,]
[(, ), ==, n, ), {, addPossibleSignature, (, dest, ., getString, (, ), ,, n, ., getNext, (, ), ,]
[., getString, (, ), ,, n, ., getNext, (, ), ,, t, ), ;, }, }, }, break, ;, case]
[., getString, (, ), ,, n, ., getNext, (, ), ,, t, ), ;, }, }, }, break, ;, case]
[), ,, t, ), ;, }, }, }, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =]
[), ,, t, ), ;, }, }, }, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =]
[}, }, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;]
[}, }, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;]
[break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=]
[case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;]
[., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, switch, (]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, switch, (]
[;, key, =, key, ., getNext, (, ), ), {, switch, (, key, ., getType, (, ), ), {, case]
[;, key, =, key, ., getNext, (, ), ), {, switch, (, key, ., getType, (, ), ), {, case]
[., getNext, (, ), ), {, switch, (, key, ., getType, (, ), ), {, case, Token, ., STRING_KEY, :]
[(, ), ), {, switch, (, key, ., getType, (, ), ), {, case, Token, ., STRING_KEY, :, addPossibleSignature, (]
[(, ), ), {, switch, (, key, ., getType, (, ), ), {, case, Token, ., STRING_KEY, :, addPossibleSignature, (]
[key, ., getType, (, ), ), {, case, Token, ., STRING_KEY, :, addPossibleSignature, (, key, ., getString, (, ), ,]
[key, ., getType, (, ), ), {, case, Token, ., STRING_KEY, :, addPossibleSignature, (, key, ., getString, (, ), ,]
[{, case, Token, ., STRING_KEY, :, addPossibleSignature, (, key, ., getString, (, ), ,, key, ., getFirstChild, (, ), ,]
[addPossibleSignature, (, key, ., getString, (, ), ,, key, ., getFirstChild, (, ), ,, t, ), ;, break, ;, case]
[addPossibleSignature, (, key, ., getString, (, ), ,, key, ., getFirstChild, (, ), ,, t, ), ;, break, ;, case]
[(, ), ,, key, ., getFirstChild, (, ), ,, t, ), ;, break, ;, case, Token, ., SETTER_DEF, :, case]
[(, ), ,, key, ., getFirstChild, (, ), ,, t, ), ;, break, ;, case, Token, ., SETTER_DEF, :, case]
[., getFirstChild, (, ), ,, t, ), ;, break, ;, case, Token, ., SETTER_DEF, :, case, Token, ., GETTER_DEF, :]
[., getFirstChild, (, ), ,, t, ), ;, break, ;, case, Token, ., SETTER_DEF, :, case, Token, ., GETTER_DEF, :]
[,, t, ), ;, break, ;, case, Token, ., SETTER_DEF, :, case, Token, ., GETTER_DEF, :, nonMethodProperties, ., add, (]
[,, t, ), ;, break, ;, case, Token, ., SETTER_DEF, :, case, Token, ., GETTER_DEF, :, nonMethodProperties, ., add, (]
[Token, ., GETTER_DEF, :, nonMethodProperties, ., add, (, key, ., getString, (, ), ), ;, break, ;, default, :, throw]
[:, nonMethodProperties, ., add, (, key, ., getString, (, ), ), ;, break, ;, default, :, throw, new, IllegalStateException, (]
[:, nonMethodProperties, ., add, (, key, ., getString, (, ), ), ;, break, ;, default, :, throw, new, IllegalStateException, (]
[., add, (, key, ., getString, (, ), ), ;, break, ;, default, :, throw, new, IllegalStateException, (, "unexpect OBJECTLIT key: ", +]
[;, }, }, break, ;, }, }, private, void, processPrototypeParent, (, NodeTraversal, t, ,, Node, n, ), {, switch, (]
[;, }, }, break, ;, }, }, private, void, processPrototypeParent, (, NodeTraversal, t, ,, Node, n, ), {, switch, (]
[void, processPrototypeParent, (, NodeTraversal, t, ,, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[void, processPrototypeParent, (, NodeTraversal, t, ,, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[,, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case]
[,, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case]
[n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =]
[n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =]
[n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =]
[Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, Node, parent, =]
[Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, Node, parent, =]
[Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, Node, parent, =]
[., getNext, (, ), ;, Node, parent, =, n, ., getParent, (, ), ., getParent, (, ), ;, if, (]
[., getNext, (, ), ;, Node, parent, =, n, ., getParent, (, ), ., getParent, (, ), ;, if, (]
[., getNext, (, ), ;, Node, parent, =, n, ., getParent, (, ), ., getParent, (, ), ;, if, (]
[parent, =, n, ., getParent, (, ), ., getParent, (, ), ;, if, (, dest, ., isString, (, ), &&]
[parent, =, n, ., getParent, (, ), ., getParent, (, ), ;, if, (, dest, ., isString, (, ), &&]
[), ;, if, (, dest, ., isString, (, ), &&, parent, ., isAssign, (, ), ), {, Node, assignee, =]
[), ;, if, (, dest, ., isString, (, ), &&, parent, ., isAssign, (, ), ), {, Node, assignee, =]
[), ;, if, (, dest, ., isString, (, ), &&, parent, ., isAssign, (, ), ), {, Node, assignee, =]
[parent, ., isAssign, (, ), ), {, Node, assignee, =, parent, ., getFirstChild, (, ), ., getNext, (, ), ;]
[isAssign, (, ), ), {, Node, assignee, =, parent, ., getFirstChild, (, ), ., getNext, (, ), ;, addPossibleSignature, (]
[isAssign, (, ), ), {, Node, assignee, =, parent, ., getFirstChild, (, ), ., getNext, (, ), ;, addPossibleSignature, (]
[assignee, =, parent, ., getFirstChild, (, ), ., getNext, (, ), ;, addPossibleSignature, (, dest, ., getString, (, ), ,]
[parent, ., getFirstChild, (, ), ., getNext, (, ), ;, addPossibleSignature, (, dest, ., getString, (, ), ,, assignee, ,]
