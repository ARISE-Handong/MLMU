[., Set, ;, import, javax, ., annotation, ., Nullable, ;, class, ReplaceCssNames, implements, CompilerPass, {, static, final, String, GET_CSS_NAME_FUNCTION, =]
[., Nullable, ;, class, ReplaceCssNames, implements, CompilerPass, {, static, final, String, GET_CSS_NAME_FUNCTION, =, "goog.getCssName", ;, static, final, DiagnosticType, INVALID_NUM_ARGUMENTS_ERROR, =]
[., Nullable, ;, class, ReplaceCssNames, implements, CompilerPass, {, static, final, String, GET_CSS_NAME_FUNCTION, =, "goog.getCssName", ;, static, final, DiagnosticType, INVALID_NUM_ARGUMENTS_ERROR, =]
[ReplaceCssNames, implements, CompilerPass, {, static, final, String, GET_CSS_NAME_FUNCTION, =, "goog.getCssName", ;, static, final, DiagnosticType, INVALID_NUM_ARGUMENTS_ERROR, =, DiagnosticType, ., error, (]
[CompilerPass, {, static, final, String, GET_CSS_NAME_FUNCTION, =, "goog.getCssName", ;, static, final, DiagnosticType, INVALID_NUM_ARGUMENTS_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_NUM_ARGS", ,]
[;, static, final, DiagnosticType, INVALID_NUM_ARGUMENTS_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_NUM_ARGS", ,, "goog.getCssName called with \"{0}\" arguments, expected 1 or 2.", ), ;, static, final, DiagnosticType, STRING_LITERAL_EXPECTED_ERROR, =]
[;, static, final, DiagnosticType, INVALID_NUM_ARGUMENTS_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_NUM_ARGS", ,, "goog.getCssName called with \"{0}\" arguments, expected 1 or 2.", ), ;, static, final, DiagnosticType, STRING_LITERAL_EXPECTED_ERROR, =]
[INVALID_NUM_ARGUMENTS_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_NUM_ARGS", ,, "goog.getCssName called with \"{0}\" arguments, expected 1 or 2.", ), ;, static, final, DiagnosticType, STRING_LITERAL_EXPECTED_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_GETCSSNAME_NUM_ARGS", ,, "goog.getCssName called with \"{0}\" arguments, expected 1 or 2.", ), ;, static, final, DiagnosticType, STRING_LITERAL_EXPECTED_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", ,]
[DiagnosticType, ., error, (, "JSC_GETCSSNAME_NUM_ARGS", ,, "goog.getCssName called with \"{0}\" arguments, expected 1 or 2.", ), ;, static, final, DiagnosticType, STRING_LITERAL_EXPECTED_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", ,]
[error, (, "JSC_GETCSSNAME_NUM_ARGS", ,, "goog.getCssName called with \"{0}\" arguments, expected 1 or 2.", ), ;, static, final, DiagnosticType, STRING_LITERAL_EXPECTED_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", ,, "goog.getCssName called with invalid argument, string literal ", +]
[final, DiagnosticType, STRING_LITERAL_EXPECTED_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", ,, "goog.getCssName called with invalid argument, string literal ", +, "expected.  Was \"{0}\".", ), ;, static, final, DiagnosticType, UNEXPECTED_STRING_LITERAL_ERROR, =]
[final, DiagnosticType, STRING_LITERAL_EXPECTED_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", ,, "goog.getCssName called with invalid argument, string literal ", +, "expected.  Was \"{0}\".", ), ;, static, final, DiagnosticType, UNEXPECTED_STRING_LITERAL_ERROR, =]
[DiagnosticType, ., error, (, "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", ,, "goog.getCssName called with invalid argument, string literal ", +, "expected.  Was \"{0}\".", ), ;, static, final, DiagnosticType, UNEXPECTED_STRING_LITERAL_ERROR, =, DiagnosticType, ., error, (]
[error, (, "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", ,, "goog.getCssName called with invalid argument, string literal ", +, "expected.  Was \"{0}\".", ), ;, static, final, DiagnosticType, UNEXPECTED_STRING_LITERAL_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", ,]
[error, (, "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", ,, "goog.getCssName called with invalid argument, string literal ", +, "expected.  Was \"{0}\".", ), ;, static, final, DiagnosticType, UNEXPECTED_STRING_LITERAL_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", ,]
[error, (, "JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", ,, "goog.getCssName called with invalid argument, string literal ", +, "expected.  Was \"{0}\".", ), ;, static, final, DiagnosticType, UNEXPECTED_STRING_LITERAL_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", ,]
["JSC_GETCSSNAME_STRING_LITERAL_EXPECTED", ,, "goog.getCssName called with invalid argument, string literal ", +, "expected.  Was \"{0}\".", ), ;, static, final, DiagnosticType, UNEXPECTED_STRING_LITERAL_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", ,, "goog.getCssName called with invalid arguments, string literal ", +]
["goog.getCssName called with invalid argument, string literal ", +, "expected.  Was \"{0}\".", ), ;, static, final, DiagnosticType, UNEXPECTED_STRING_LITERAL_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", ,, "goog.getCssName called with invalid arguments, string literal ", +, "passed as first of two arguments.  Did you mean ", +]
[UNEXPECTED_STRING_LITERAL_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", ,, "goog.getCssName called with invalid arguments, string literal ", +, "passed as first of two arguments.  Did you mean ", +, "goog.getCssName(\"{0}-{1}\")?", ), ;, static, final, DiagnosticType, UNKNOWN_SYMBOL_WARNING, =]
[UNEXPECTED_STRING_LITERAL_ERROR, =, DiagnosticType, ., error, (, "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", ,, "goog.getCssName called with invalid arguments, string literal ", +, "passed as first of two arguments.  Did you mean ", +, "goog.getCssName(\"{0}-{1}\")?", ), ;, static, final, DiagnosticType, UNKNOWN_SYMBOL_WARNING, =]
[error, (, "JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", ,, "goog.getCssName called with invalid arguments, string literal ", +, "passed as first of two arguments.  Did you mean ", +, "goog.getCssName(\"{0}-{1}\")?", ), ;, static, final, DiagnosticType, UNKNOWN_SYMBOL_WARNING, =, DiagnosticType, ., warning, (]
["JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", ,, "goog.getCssName called with invalid arguments, string literal ", +, "passed as first of two arguments.  Did you mean ", +, "goog.getCssName(\"{0}-{1}\")?", ), ;, static, final, DiagnosticType, UNKNOWN_SYMBOL_WARNING, =, DiagnosticType, ., warning, (, "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", ,]
["JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL", ,, "goog.getCssName called with invalid arguments, string literal ", +, "passed as first of two arguments.  Did you mean ", +, "goog.getCssName(\"{0}-{1}\")?", ), ;, static, final, DiagnosticType, UNKNOWN_SYMBOL_WARNING, =, DiagnosticType, ., warning, (, "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", ,]
["goog.getCssName called with invalid arguments, string literal ", +, "passed as first of two arguments.  Did you mean ", +, "goog.getCssName(\"{0}-{1}\")?", ), ;, static, final, DiagnosticType, UNKNOWN_SYMBOL_WARNING, =, DiagnosticType, ., warning, (, "JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL", ,, "goog.getCssName called with unrecognized symbol \"{0}\" in class ", +]
[,, @, Nullable, Map, <, String, ,, Integer, >, cssNames, ,, @, Nullable, Set, <, String, >, whitelist, ), {]
[,, @, Nullable, Map, <, String, ,, Integer, >, cssNames, ,, @, Nullable, Set, <, String, >, whitelist, ), {]
[<, String, ,, Integer, >, cssNames, ,, @, Nullable, Set, <, String, >, whitelist, ), {, this, ., compiler, =]
[,, Integer, >, cssNames, ,, @, Nullable, Set, <, String, >, whitelist, ), {, this, ., compiler, =, compiler, ;]
[,, Integer, >, cssNames, ,, @, Nullable, Set, <, String, >, whitelist, ), {, this, ., compiler, =, compiler, ;]
[,, @, Nullable, Set, <, String, >, whitelist, ), {, this, ., compiler, =, compiler, ;, this, ., cssNames, =]
[Nullable, Set, <, String, >, whitelist, ), {, this, ., compiler, =, compiler, ;, this, ., cssNames, =, cssNames, ;]
[Nullable, Set, <, String, >, whitelist, ), {, this, ., compiler, =, compiler, ;, this, ., cssNames, =, cssNames, ;]
[>, whitelist, ), {, this, ., compiler, =, compiler, ;, this, ., cssNames, =, cssNames, ;, this, ., whitelist, =]
[), {, this, ., compiler, =, compiler, ;, this, ., cssNames, =, cssNames, ;, this, ., whitelist, =, whitelist, ;]
[), {, this, ., compiler, =, compiler, ;, this, ., cssNames, =, cssNames, ;, this, ., whitelist, =, whitelist, ;]
[compiler, =, compiler, ;, this, ., cssNames, =, cssNames, ;, this, ., whitelist, =, whitelist, ;, this, ., nativeStringType, =]
[compiler, =, compiler, ;, this, ., cssNames, =, cssNames, ;, this, ., whitelist, =, whitelist, ;, this, ., nativeStringType, =]
[compiler, =, compiler, ;, this, ., cssNames, =, cssNames, ;, this, ., whitelist, =, whitelist, ;, this, ., nativeStringType, =]
[cssNames, ;, this, ., whitelist, =, whitelist, ;, this, ., nativeStringType, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (]
[., getNativeType, (, STRING_TYPE, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[(, STRING_TYPE, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, symbolMap, =]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, symbolMap, =, getCssRenamingMap, (, ), ;]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, symbolMap, =, getCssRenamingMap, (, ), ;]
[void, process, (, Node, externs, ,, Node, root, ), {, symbolMap, =, getCssRenamingMap, (, ), ;, NodeTraversal, ., traverse, (]
[(, Node, externs, ,, Node, root, ), {, symbolMap, =, getCssRenamingMap, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[externs, ,, Node, root, ), {, symbolMap, =, getCssRenamingMap, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[compiler, ,, root, ,, new, Traversal, (, ), ), ;, }, @, VisibleForTesting, protected, CssRenamingMap, getCssRenamingMap, (, ), {, return]
[compiler, ,, root, ,, new, Traversal, (, ), ), ;, }, @, VisibleForTesting, protected, CssRenamingMap, getCssRenamingMap, (, ), {, return]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isCall, (, ), &&]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isCall, (, ), &&]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isCall, (, ), &&, GET_CSS_NAME_FUNCTION, ., equals, (]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isCall, (, ), &&, GET_CSS_NAME_FUNCTION, ., equals, (]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isCall, (, ), &&, GET_CSS_NAME_FUNCTION, ., equals, (]
[&&, GET_CSS_NAME_FUNCTION, ., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), ), {, int, count, =]
[&&, GET_CSS_NAME_FUNCTION, ., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), ), {, int, count, =]
[), ., getQualifiedName, (, ), ), ), {, int, count, =, n, ., getChildCount, (, ), ;, Node, first, =]
[), ., getQualifiedName, (, ), ), ), {, int, count, =, n, ., getChildCount, (, ), ;, Node, first, =]
[), ., getQualifiedName, (, ), ), ), {, int, count, =, n, ., getChildCount, (, ), ;, Node, first, =]
[., getChildCount, (, ), ;, Node, first, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, switch, (]
[;, Node, first, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, switch, (, count, ), {, case]
[n, ., getFirstChild, (, ), ., getNext, (, ), ;, switch, (, count, ), {, case, 2, :, if, (]
[n, ., getFirstChild, (, ), ., getNext, (, ), ;, switch, (, count, ), {, case, 2, :, if, (]
[(, ), ;, switch, (, count, ), {, case, 2, :, if, (, first, ., isString, (, ), ), {]
[;, switch, (, count, ), {, case, 2, :, if, (, first, ., isString, (, ), ), {, processStringNode, (]
[(, count, ), {, case, 2, :, if, (, first, ., isString, (, ), ), {, processStringNode, (, t, ,]
[{, case, 2, :, if, (, first, ., isString, (, ), ), {, processStringNode, (, t, ,, first, ), ;]
[{, case, 2, :, if, (, first, ., isString, (, ), ), {, processStringNode, (, t, ,, first, ), ;]
[if, (, first, ., isString, (, ), ), {, processStringNode, (, t, ,, first, ), ;, n, ., removeChild, (]
[., isString, (, ), ), {, processStringNode, (, t, ,, first, ), ;, n, ., removeChild, (, first, ), ;]
[., isString, (, ), ), {, processStringNode, (, t, ,, first, ), ;, n, ., removeChild, (, first, ), ;]
[), {, processStringNode, (, t, ,, first, ), ;, n, ., removeChild, (, first, ), ;, parent, ., replaceChild, (]
[processStringNode, (, t, ,, first, ), ;, n, ., removeChild, (, first, ), ;, parent, ., replaceChild, (, n, ,]
[,, first, ), ;, n, ., removeChild, (, first, ), ;, parent, ., replaceChild, (, n, ,, first, ), ;]
[,, first, ), ;, n, ., removeChild, (, first, ), ;, parent, ., replaceChild, (, n, ,, first, ), ;]
[), ;, parent, ., replaceChild, (, n, ,, first, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {]
[), ;, parent, ., replaceChild, (, n, ,, first, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {]
[replaceChild, (, n, ,, first, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, compiler, ., report, (]
[replaceChild, (, n, ,, first, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, compiler, ., report, (]
[first, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, compiler, ., report, (, t, ., makeError, (]
[;, compiler, ., reportCodeChange, (, ), ;, }, else, {, compiler, ., report, (, t, ., makeError, (, n, ,]
[., reportCodeChange, (, ), ;, }, else, {, compiler, ., report, (, t, ., makeError, (, n, ,, STRING_LITERAL_EXPECTED_ERROR, ,]
[., reportCodeChange, (, ), ;, }, else, {, compiler, ., report, (, t, ., makeError, (, n, ,, STRING_LITERAL_EXPECTED_ERROR, ,]
[;, }, else, {, compiler, ., report, (, t, ., makeError, (, n, ,, STRING_LITERAL_EXPECTED_ERROR, ,, Token, ., name, (]
[;, }, else, {, compiler, ., report, (, t, ., makeError, (, n, ,, STRING_LITERAL_EXPECTED_ERROR, ,, Token, ., name, (]
[,, STRING_LITERAL_EXPECTED_ERROR, ,, Token, ., name, (, first, ., getType, (, ), ), ), ), ;, }, break, ;, case]
[name, (, first, ., getType, (, ), ), ), ), ;, }, break, ;, case, 3, :, Node, second, =]
[name, (, first, ., getType, (, ), ), ), ), ;, }, break, ;, case, 3, :, Node, second, =]
[), ), ;, }, break, ;, case, 3, :, Node, second, =, first, ., getNext, (, ), ;, if, (]
[), ;, }, break, ;, case, 3, :, Node, second, =, first, ., getNext, (, ), ;, if, (, !]
[), ;, }, break, ;, case, 3, :, Node, second, =, first, ., getNext, (, ), ;, if, (, !]
[:, Node, second, =, first, ., getNext, (, ), ;, if, (, !, second, ., isString, (, ), ), {]
[:, Node, second, =, first, ., getNext, (, ), ;, if, (, !, second, ., isString, (, ), ), {]
[first, ., getNext, (, ), ;, if, (, !, second, ., isString, (, ), ), {, compiler, ., report, (]
[first, ., getNext, (, ), ;, if, (, !, second, ., isString, (, ), ), {, compiler, ., report, (]
[), ;, if, (, !, second, ., isString, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[if, (, !, second, ., isString, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[!, second, ., isString, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, STRING_LITERAL_EXPECTED_ERROR, ,]
[!, second, ., isString, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, STRING_LITERAL_EXPECTED_ERROR, ,]
[(, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, STRING_LITERAL_EXPECTED_ERROR, ,, Token, ., name, (]
[(, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, STRING_LITERAL_EXPECTED_ERROR, ,, Token, ., name, (]
[,, STRING_LITERAL_EXPECTED_ERROR, ,, Token, ., name, (, second, ., getType, (, ), ), ), ), ;, }, else, if, (]
[,, STRING_LITERAL_EXPECTED_ERROR, ,, Token, ., name, (, second, ., getType, (, ), ), ), ), ;, }, else, if, (]
[second, ., getType, (, ), ), ), ), ;, }, else, if, (, first, ., isString, (, ), ), {]
[second, ., getType, (, ), ), ), ), ;, }, else, if, (, first, ., isString, (, ), ), {]
[), ), ), ), ;, }, else, if, (, first, ., isString, (, ), ), {, compiler, ., report, (]
[), ), ), ), ;, }, else, if, (, first, ., isString, (, ), ), {, compiler, ., report, (]
[;, }, else, if, (, first, ., isString, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[else, if, (, first, ., isString, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[(, first, ., isString, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNEXPECTED_STRING_LITERAL_ERROR, ,]
[(, first, ., isString, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNEXPECTED_STRING_LITERAL_ERROR, ,]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNEXPECTED_STRING_LITERAL_ERROR, ,, first, ., getString, (, ), ,]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNEXPECTED_STRING_LITERAL_ERROR, ,, first, ., getString, (, ), ,]
[,, UNEXPECTED_STRING_LITERAL_ERROR, ,, first, ., getString, (, ), ,, second, ., getString, (, ), ), ), ;, }, else, {]
[,, first, ., getString, (, ), ,, second, ., getString, (, ), ), ), ;, }, else, {, processStringNode, (]
[., getString, (, ), ,, second, ., getString, (, ), ), ), ;, }, else, {, processStringNode, (, t, ,]
[), ,, second, ., getString, (, ), ), ), ;, }, else, {, processStringNode, (, t, ,, second, ), ;]
[), ,, second, ., getString, (, ), ), ), ;, }, else, {, processStringNode, (, t, ,, second, ), ;]
[getString, (, ), ), ), ;, }, else, {, processStringNode, (, t, ,, second, ), ;, n, ., removeChild, (]
[}, else, {, processStringNode, (, t, ,, second, ), ;, n, ., removeChild, (, first, ), ;, Node, replacement, =]
[}, else, {, processStringNode, (, t, ,, second, ), ;, n, ., removeChild, (, first, ), ;, Node, replacement, =]
[}, else, {, processStringNode, (, t, ,, second, ), ;, n, ., removeChild, (, first, ), ;, Node, replacement, =]
[(, t, ,, second, ), ;, n, ., removeChild, (, first, ), ;, Node, replacement, =, IR, ., add, (]
[,, second, ), ;, n, ., removeChild, (, first, ), ;, Node, replacement, =, IR, ., add, (, first, ,]
[,, second, ), ;, n, ., removeChild, (, first, ), ;, Node, replacement, =, IR, ., add, (, first, ,]
[,, second, ), ;, n, ., removeChild, (, first, ), ;, Node, replacement, =, IR, ., add, (, first, ,]
[n, ., removeChild, (, first, ), ;, Node, replacement, =, IR, ., add, (, first, ,, IR, ., string, (]
[n, ., removeChild, (, first, ), ;, Node, replacement, =, IR, ., add, (, first, ,, IR, ., string, (]
[removeChild, (, first, ), ;, Node, replacement, =, IR, ., add, (, first, ,, IR, ., string, (, "-", +]
[removeChild, (, first, ), ;, Node, replacement, =, IR, ., add, (, first, ,, IR, ., string, (, "-", +]
[., add, (, first, ,, IR, ., string, (, "-", +, second, ., getString, (, ), ), ., copyInformationFrom, (]
[., string, (, "-", +, second, ., getString, (, ), ), ., copyInformationFrom, (, second, ), ), ., copyInformationFrom, (]
["-", +, second, ., getString, (, ), ), ., copyInformationFrom, (, second, ), ), ., copyInformationFrom, (, n, ), ;]
["-", +, second, ., getString, (, ), ), ., copyInformationFrom, (, second, ), ), ., copyInformationFrom, (, n, ), ;]
[getString, (, ), ), ., copyInformationFrom, (, second, ), ), ., copyInformationFrom, (, n, ), ;, replacement, ., setJSType, (]
[), ., copyInformationFrom, (, second, ), ), ., copyInformationFrom, (, n, ), ;, replacement, ., setJSType, (, nativeStringType, ), ;]
[), ., copyInformationFrom, (, second, ), ), ., copyInformationFrom, (, n, ), ;, replacement, ., setJSType, (, nativeStringType, ), ;]
[second, ), ), ., copyInformationFrom, (, n, ), ;, replacement, ., setJSType, (, nativeStringType, ), ;, parent, ., replaceChild, (]
[), ., copyInformationFrom, (, n, ), ;, replacement, ., setJSType, (, nativeStringType, ), ;, parent, ., replaceChild, (, n, ,]
[(, n, ), ;, replacement, ., setJSType, (, nativeStringType, ), ;, parent, ., replaceChild, (, n, ,, replacement, ), ;]
[(, n, ), ;, replacement, ., setJSType, (, nativeStringType, ), ;, parent, ., replaceChild, (, n, ,, replacement, ), ;]
[parent, ., replaceChild, (, n, ,, replacement, ), ;, compiler, ., reportCodeChange, (, ), ;, }, break, ;, default, :]
[parent, ., replaceChild, (, n, ,, replacement, ), ;, compiler, ., reportCodeChange, (, ), ;, }, break, ;, default, :]
[n, ,, replacement, ), ;, compiler, ., reportCodeChange, (, ), ;, }, break, ;, default, :, compiler, ., report, (]
[n, ,, replacement, ), ;, compiler, ., reportCodeChange, (, ), ;, }, break, ;, default, :, compiler, ., report, (]
[;, compiler, ., reportCodeChange, (, ), ;, }, break, ;, default, :, compiler, ., report, (, t, ., makeError, (]
[., reportCodeChange, (, ), ;, }, break, ;, default, :, compiler, ., report, (, t, ., makeError, (, n, ,]
[(, ), ;, }, break, ;, default, :, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_NUM_ARGUMENTS_ERROR, ,]
[(, ), ;, }, break, ;, default, :, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_NUM_ARGUMENTS_ERROR, ,]
[break, ;, default, :, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_NUM_ARGUMENTS_ERROR, ,, String, ., valueOf, (]
[), ), ;, }, }, }, private, void, processStringNode, (, NodeTraversal, t, ,, Node, n, ), {, String, name, =]
[), ), ;, }, }, }, private, void, processStringNode, (, NodeTraversal, t, ,, Node, n, ), {, String, name, =]
[processStringNode, (, NodeTraversal, t, ,, Node, n, ), {, String, name, =, n, ., getString, (, ), ;, if, (]
[processStringNode, (, NodeTraversal, t, ,, Node, n, ), {, String, name, =, n, ., getString, (, ), ;, if, (]
[processStringNode, (, NodeTraversal, t, ,, Node, n, ), {, String, name, =, n, ., getString, (, ), ;, if, (]
[NodeTraversal, t, ,, Node, n, ), {, String, name, =, n, ., getString, (, ), ;, if, (, whitelist, !=]
[,, Node, n, ), {, String, name, =, n, ., getString, (, ), ;, if, (, whitelist, !=, null, &&]
[,, Node, n, ), {, String, name, =, n, ., getString, (, ), ;, if, (, whitelist, !=, null, &&]
[{, String, name, =, n, ., getString, (, ), ;, if, (, whitelist, !=, null, &&, whitelist, ., contains, (]
[whitelist, !=, null, &&, whitelist, ., contains, (, name, ), ), {, return, ;, }, String, [, ], parts, =]
[whitelist, !=, null, &&, whitelist, ., contains, (, name, ), ), {, return, ;, }, String, [, ], parts, =]
[whitelist, ., contains, (, name, ), ), {, return, ;, }, String, [, ], parts, =, name, ., split, (]
[), ), {, return, ;, }, String, [, ], parts, =, name, ., split, (, "-", ), ;, if, (]
[), ), {, return, ;, }, String, [, ], parts, =, name, ., split, (, "-", ), ;, if, (]
[{, return, ;, }, String, [, ], parts, =, name, ., split, (, "-", ), ;, if, (, symbolMap, !=]
[], parts, =, name, ., split, (, "-", ), ;, if, (, symbolMap, !=, null, ), {, String, replacement, =]
[., split, (, "-", ), ;, if, (, symbolMap, !=, null, ), {, String, replacement, =, null, ;, switch, (]
[., split, (, "-", ), ;, if, (, symbolMap, !=, null, ), {, String, replacement, =, null, ;, switch, (]
[symbolMap, !=, null, ), {, String, replacement, =, null, ;, switch, (, symbolMap, ., getStyle, (, ), ), {, case]
[null, ), {, String, replacement, =, null, ;, switch, (, symbolMap, ., getStyle, (, ), ), {, case, BY_WHOLE, :]
[{, String, replacement, =, null, ;, switch, (, symbolMap, ., getStyle, (, ), ), {, case, BY_WHOLE, :, replacement, =]
[{, String, replacement, =, null, ;, switch, (, symbolMap, ., getStyle, (, ), ), {, case, BY_WHOLE, :, replacement, =]
[null, ;, switch, (, symbolMap, ., getStyle, (, ), ), {, case, BY_WHOLE, :, replacement, =, symbolMap, ., get, (]
[., getStyle, (, ), ), {, case, BY_WHOLE, :, replacement, =, symbolMap, ., get, (, name, ), ;, if, (]
[., getStyle, (, ), ), {, case, BY_WHOLE, :, replacement, =, symbolMap, ., get, (, name, ), ;, if, (]
[(, ), ), {, case, BY_WHOLE, :, replacement, =, symbolMap, ., get, (, name, ), ;, if, (, replacement, ==]
[{, case, BY_WHOLE, :, replacement, =, symbolMap, ., get, (, name, ), ;, if, (, replacement, ==, null, ), {]
[{, case, BY_WHOLE, :, replacement, =, symbolMap, ., get, (, name, ), ;, if, (, replacement, ==, null, ), {]
[replacement, =, symbolMap, ., get, (, name, ), ;, if, (, replacement, ==, null, ), {, compiler, ., report, (]
[replacement, =, symbolMap, ., get, (, name, ), ;, if, (, replacement, ==, null, ), {, compiler, ., report, (]
[get, (, name, ), ;, if, (, replacement, ==, null, ), {, compiler, ., report, (, t, ., makeError, (]
[name, ), ;, if, (, replacement, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[;, if, (, replacement, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,]
[(, replacement, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,, name, ,]
[t, ., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,, name, ,, name, ), ), ;, return, ;, }, break, ;, case]
[,, name, ,, name, ), ), ;, return, ;, }, break, ;, case, BY_PART, :, String, [, ], replaced, =]
[name, ), ), ;, return, ;, }, break, ;, case, BY_PART, :, String, [, ], replaced, =, new, String, []
[name, ), ), ;, return, ;, }, break, ;, case, BY_PART, :, String, [, ], replaced, =, new, String, []
[BY_PART, :, String, [, ], replaced, =, new, String, [, parts, ., length, ], ;, for, (, int, i, =]
[String, [, ], replaced, =, new, String, [, parts, ., length, ], ;, for, (, int, i, =, 0, ;]
[String, [, ], replaced, =, new, String, [, parts, ., length, ], ;, for, (, int, i, =, 0, ;]
[], replaced, =, new, String, [, parts, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[], replaced, =, new, String, [, parts, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[String, [, parts, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, parts, ., length, ;]
[String, [, parts, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, parts, ., length, ;]
[for, (, int, i, =, 0, ;, i, <, parts, ., length, ;, i, ++, ), {, String, part, =]
[for, (, int, i, =, 0, ;, i, <, parts, ., length, ;, i, ++, ), {, String, part, =]
[=, 0, ;, i, <, parts, ., length, ;, i, ++, ), {, String, part, =, symbolMap, ., get, (]
[=, 0, ;, i, <, parts, ., length, ;, i, ++, ), {, String, part, =, symbolMap, ., get, (]
[;, i, <, parts, ., length, ;, i, ++, ), {, String, part, =, symbolMap, ., get, (, parts, []
[;, i, ++, ), {, String, part, =, symbolMap, ., get, (, parts, [, i, ], ), ;, if, (]
[;, i, ++, ), {, String, part, =, symbolMap, ., get, (, parts, [, i, ], ), ;, if, (]
[++, ), {, String, part, =, symbolMap, ., get, (, parts, [, i, ], ), ;, if, (, part, ==]
[String, part, =, symbolMap, ., get, (, parts, [, i, ], ), ;, if, (, part, ==, null, ), {]
[String, part, =, symbolMap, ., get, (, parts, [, i, ], ), ;, if, (, part, ==, null, ), {]
[., get, (, parts, [, i, ], ), ;, if, (, part, ==, null, ), {, compiler, ., report, (]
[., get, (, parts, [, i, ], ), ;, if, (, part, ==, null, ), {, compiler, ., report, (]
[[, i, ], ), ;, if, (, part, ==, null, ), {, compiler, ., report, (, t, ., makeError, (]
[], ), ;, if, (, part, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[;, if, (, part, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,]
[;, if, (, part, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,]
[(, part, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,, parts, []
[null, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,, parts, [, i, ], ,]
[t, ., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,, parts, [, i, ], ,, name, ), ), ;, return, ;, }]
[t, ., makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,, parts, [, i, ], ,, name, ), ), ;, return, ;, }]
[makeError, (, n, ,, UNKNOWN_SYMBOL_WARNING, ,, parts, [, i, ], ,, name, ), ), ;, return, ;, }, replaced, []
[,, UNKNOWN_SYMBOL_WARNING, ,, parts, [, i, ], ,, name, ), ), ;, return, ;, }, replaced, [, i, ], =]
[parts, [, i, ], ,, name, ), ), ;, return, ;, }, replaced, [, i, ], =, part, ;, }]
[i, ], ,, name, ), ), ;, return, ;, }, replaced, [, i, ], =, part, ;, }, replacement, =]
[i, ], ,, name, ), ), ;, return, ;, }, replaced, [, i, ], =, part, ;, }, replacement, =]
[i, ], ,, name, ), ), ;, return, ;, }, replaced, [, i, ], =, part, ;, }, replacement, =]
[), ), ;, return, ;, }, replaced, [, i, ], =, part, ;, }, replacement, =, Joiner, ., on, (]
[}, replaced, [, i, ], =, part, ;, }, replacement, =, Joiner, ., on, (, "-", ), ., join, (]
[}, replacement, =, Joiner, ., on, (, "-", ), ., join, (, replaced, ), ;, break, ;, default, :, throw]
[Joiner, ., on, (, "-", ), ., join, (, replaced, ), ;, break, ;, default, :, throw, new, IllegalStateException, (]
[Joiner, ., on, (, "-", ), ., join, (, replaced, ), ;, break, ;, default, :, throw, new, IllegalStateException, (]
[on, (, "-", ), ., join, (, replaced, ), ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unknown replacement style: ", +]
[on, (, "-", ), ., join, (, replaced, ), ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unknown replacement style: ", +]
[), ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unknown replacement style: ", +, symbolMap, ., getStyle, (, ), ), ;, }]
[), ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unknown replacement style: ", +, symbolMap, ., getStyle, (, ), ), ;, }]
[default, :, throw, new, IllegalStateException, (, "Unknown replacement style: ", +, symbolMap, ., getStyle, (, ), ), ;, }, n, ., setString, (]
["Unknown replacement style: ", +, symbolMap, ., getStyle, (, ), ), ;, }, n, ., setString, (, replacement, ), ;, }, if, (]
["Unknown replacement style: ", +, symbolMap, ., getStyle, (, ), ), ;, }, n, ., setString, (, replacement, ), ;, }, if, (]
[symbolMap, ., getStyle, (, ), ), ;, }, n, ., setString, (, replacement, ), ;, }, if, (, cssNames, !=]
[n, ., setString, (, replacement, ), ;, }, if, (, cssNames, !=, null, ), {, for, (, int, i, =]
[setString, (, replacement, ), ;, }, if, (, cssNames, !=, null, ), {, for, (, int, i, =, 0, ;]
[setString, (, replacement, ), ;, }, if, (, cssNames, !=, null, ), {, for, (, int, i, =, 0, ;]
[replacement, ), ;, }, if, (, cssNames, !=, null, ), {, for, (, int, i, =, 0, ;, i, <]
[replacement, ), ;, }, if, (, cssNames, !=, null, ), {, for, (, int, i, =, 0, ;, i, <]
[if, (, cssNames, !=, null, ), {, for, (, int, i, =, 0, ;, i, <, parts, ., length, ;]
[if, (, cssNames, !=, null, ), {, for, (, int, i, =, 0, ;, i, <, parts, ., length, ;]
[for, (, int, i, =, 0, ;, i, <, parts, ., length, ;, i, ++, ), {, Integer, count, =]
[for, (, int, i, =, 0, ;, i, <, parts, ., length, ;, i, ++, ), {, Integer, count, =]
[=, 0, ;, i, <, parts, ., length, ;, i, ++, ), {, Integer, count, =, cssNames, ., get, (]
[=, 0, ;, i, <, parts, ., length, ;, i, ++, ), {, Integer, count, =, cssNames, ., get, (]
[;, i, <, parts, ., length, ;, i, ++, ), {, Integer, count, =, cssNames, ., get, (, parts, []
[;, i, ++, ), {, Integer, count, =, cssNames, ., get, (, parts, [, i, ], ), ;, if, (]
[;, i, ++, ), {, Integer, count, =, cssNames, ., get, (, parts, [, i, ], ), ;, if, (]
[++, ), {, Integer, count, =, cssNames, ., get, (, parts, [, i, ], ), ;, if, (, count, ==]
[Integer, count, =, cssNames, ., get, (, parts, [, i, ], ), ;, if, (, count, ==, null, ), {]
[=, cssNames, ., get, (, parts, [, i, ], ), ;, if, (, count, ==, null, ), {, count, =]
[=, cssNames, ., get, (, parts, [, i, ], ), ;, if, (, count, ==, null, ), {, count, =]
[(, parts, [, i, ], ), ;, if, (, count, ==, null, ), {, count, =, Integer, ., valueOf, (]
[], ), ;, if, (, count, ==, null, ), {, count, =, Integer, ., valueOf, (, 0, ), ;, }]
[], ), ;, if, (, count, ==, null, ), {, count, =, Integer, ., valueOf, (, 0, ), ;, }]
[(, count, ==, null, ), {, count, =, Integer, ., valueOf, (, 0, ), ;, }, cssNames, ., put, (]
[(, count, ==, null, ), {, count, =, Integer, ., valueOf, (, 0, ), ;, }, cssNames, ., put, (]
[==, null, ), {, count, =, Integer, ., valueOf, (, 0, ), ;, }, cssNames, ., put, (, parts, []
[{, count, =, Integer, ., valueOf, (, 0, ), ;, }, cssNames, ., put, (, parts, [, i, ], ,]
[{, count, =, Integer, ., valueOf, (, 0, ), ;, }, cssNames, ., put, (, parts, [, i, ], ,]
[{, count, =, Integer, ., valueOf, (, 0, ), ;, }, cssNames, ., put, (, parts, [, i, ], ,]
[(, 0, ), ;, }, cssNames, ., put, (, parts, [, i, ], ,, count, ., intValue, (, ), +]
