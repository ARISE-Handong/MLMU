[., google, ., javascript, ., rhino, ., head, ., ScriptRuntime, ;, class, JsDocTokenStream, {, private, final, static, int, EOF_CHAR, =]
[google, ., javascript, ., rhino, ., head, ., ScriptRuntime, ;, class, JsDocTokenStream, {, private, final, static, int, EOF_CHAR, =, -]
[class, JsDocTokenStream, {, private, final, static, int, EOF_CHAR, =, -, 1, ;, JsDocTokenStream, (, String, sourceString, ), {, this, (]
[{, private, final, static, int, EOF_CHAR, =, -, 1, ;, JsDocTokenStream, (, String, sourceString, ), {, this, (, sourceString, ,]
[{, this, (, sourceString, ,, 0, ), ;, }, JsDocTokenStream, (, String, sourceString, ,, int, lineno, ), {, this, (]
[(, sourceString, ,, 0, ), ;, }, JsDocTokenStream, (, String, sourceString, ,, int, lineno, ), {, this, (, sourceString, ,]
[,, 0, ), ;, }, JsDocTokenStream, (, String, sourceString, ,, int, lineno, ), {, this, (, sourceString, ,, lineno, ,]
[sourceString, ,, lineno, ,, 0, ), ;, }, JsDocTokenStream, (, String, sourceString, ,, int, lineno, ,, int, initCharno, ), {]
[sourceString, ,, lineno, ,, 0, ), ;, }, JsDocTokenStream, (, String, sourceString, ,, int, lineno, ,, int, initCharno, ), {]
[0, ), ;, }, JsDocTokenStream, (, String, sourceString, ,, int, lineno, ,, int, initCharno, ), {, Preconditions, ., checkNotNull, (]
[}, JsDocTokenStream, (, String, sourceString, ,, int, lineno, ,, int, initCharno, ), {, Preconditions, ., checkNotNull, (, sourceString, ), ;]
[}, JsDocTokenStream, (, String, sourceString, ,, int, lineno, ,, int, initCharno, ), {, Preconditions, ., checkNotNull, (, sourceString, ), ;]
[sourceString, ,, int, lineno, ,, int, initCharno, ), {, Preconditions, ., checkNotNull, (, sourceString, ), ;, this, ., lineno, =]
[int, lineno, ,, int, initCharno, ), {, Preconditions, ., checkNotNull, (, sourceString, ), ;, this, ., lineno, =, lineno, ;]
[int, lineno, ,, int, initCharno, ), {, Preconditions, ., checkNotNull, (, sourceString, ), ;, this, ., lineno, =, lineno, ;]
[initCharno, ), {, Preconditions, ., checkNotNull, (, sourceString, ), ;, this, ., lineno, =, lineno, ;, this, ., sourceString, =]
[{, Preconditions, ., checkNotNull, (, sourceString, ), ;, this, ., lineno, =, lineno, ;, this, ., sourceString, =, sourceString, ;]
[{, Preconditions, ., checkNotNull, (, sourceString, ), ;, this, ., lineno, =, lineno, ;, this, ., sourceString, =, sourceString, ;]
[(, sourceString, ), ;, this, ., lineno, =, lineno, ;, this, ., sourceString, =, sourceString, ;, this, ., sourceEnd, =]
[(, sourceString, ), ;, this, ., lineno, =, lineno, ;, this, ., sourceString, =, sourceString, ;, this, ., sourceEnd, =]
[lineno, =, lineno, ;, this, ., sourceString, =, sourceString, ;, this, ., sourceEnd, =, sourceString, ., length, (, ), ;]
[lineno, =, lineno, ;, this, ., sourceString, =, sourceString, ;, this, ., sourceEnd, =, sourceString, ., length, (, ), ;]
[this, ., sourceString, =, sourceString, ;, this, ., sourceEnd, =, sourceString, ., length, (, ), ;, this, ., sourceCursor, =]
[this, ., sourceString, =, sourceString, ;, this, ., sourceEnd, =, sourceString, ., length, (, ), ;, this, ., sourceCursor, =]
[sourceString, ;, this, ., sourceEnd, =, sourceString, ., length, (, ), ;, this, ., sourceCursor, =, this, ., cursor, =]
[this, ., sourceEnd, =, sourceString, ., length, (, ), ;, this, ., sourceCursor, =, this, ., cursor, =, 0, ;]
[this, ., sourceEnd, =, sourceString, ., length, (, ), ;, this, ., sourceCursor, =, this, ., cursor, =, 0, ;]
[sourceString, ., length, (, ), ;, this, ., sourceCursor, =, this, ., cursor, =, 0, ;, this, ., initLineno, =]
[length, (, ), ;, this, ., sourceCursor, =, this, ., cursor, =, 0, ;, this, ., initLineno, =, lineno, ;]
[length, (, ), ;, this, ., sourceCursor, =, this, ., cursor, =, 0, ;, this, ., initLineno, =, lineno, ;]
[this, ., sourceCursor, =, this, ., cursor, =, 0, ;, this, ., initLineno, =, lineno, ;, this, ., initCharno, =]
[=, this, ., cursor, =, 0, ;, this, ., initLineno, =, lineno, ;, this, ., initCharno, =, initCharno, ;, }]
[cursor, =, 0, ;, this, ., initLineno, =, lineno, ;, this, ., initCharno, =, initCharno, ;, }, @, SuppressWarnings, (]
[., initCharno, =, initCharno, ;, }, @, SuppressWarnings, (, "fallthrough", ), final, JsDocToken, getJsDocToken, (, ), {, int, c, ;]
[=, initCharno, ;, }, @, SuppressWarnings, (, "fallthrough", ), final, JsDocToken, getJsDocToken, (, ), {, int, c, ;, stringBufferTop, =]
[{, int, c, ;, stringBufferTop, =, 0, ;, for, (, ;, ;, ), {, for, (, ;, ;, ), {]
[c, ;, stringBufferTop, =, 0, ;, for, (, ;, ;, ), {, for, (, ;, ;, ), {, charno, =]
[;, stringBufferTop, =, 0, ;, for, (, ;, ;, ), {, for, (, ;, ;, ), {, charno, =, -]
[=, 0, ;, for, (, ;, ;, ), {, for, (, ;, ;, ), {, charno, =, -, 1, ;]
[;, for, (, ;, ;, ), {, for, (, ;, ;, ), {, charno, =, -, 1, ;, c, =]
[{, for, (, ;, ;, ), {, charno, =, -, 1, ;, c, =, getChar, (, ), ;, if, (]
[{, for, (, ;, ;, ), {, charno, =, -, 1, ;, c, =, getChar, (, ), ;, if, (]
[(, ;, ;, ), {, charno, =, -, 1, ;, c, =, getChar, (, ), ;, if, (, c, ==]
[{, charno, =, -, 1, ;, c, =, getChar, (, ), ;, if, (, c, ==, EOF_CHAR, ), {, return]
[{, charno, =, -, 1, ;, c, =, getChar, (, ), ;, if, (, c, ==, EOF_CHAR, ), {, return]
[getChar, (, ), ;, if, (, c, ==, EOF_CHAR, ), {, return, JsDocToken, ., EOF, ;, }, else, if, (]
[getChar, (, ), ;, if, (, c, ==, EOF_CHAR, ), {, return, JsDocToken, ., EOF, ;, }, else, if, (]
[), ;, if, (, c, ==, EOF_CHAR, ), {, return, JsDocToken, ., EOF, ;, }, else, if, (, c, ==]
[c, ==, EOF_CHAR, ), {, return, JsDocToken, ., EOF, ;, }, else, if, (, c, ==, '\n', ), {, return]
[c, ==, EOF_CHAR, ), {, return, JsDocToken, ., EOF, ;, }, else, if, (, c, ==, '\n', ), {, return]
[EOF, ;, }, else, if, (, c, ==, '\n', ), {, return, JsDocToken, ., EOL, ;, }, else, if, (]
[;, }, else, if, (, c, ==, '\n', ), {, return, JsDocToken, ., EOL, ;, }, else, if, (, !]
[else, if, (, c, ==, '\n', ), {, return, JsDocToken, ., EOL, ;, }, else, if, (, !, isJSSpace, (]
[., EOL, ;, }, else, if, (, !, isJSSpace, (, c, ), ), {, break, ;, }, }, switch, (]
[else, if, (, !, isJSSpace, (, c, ), ), {, break, ;, }, }, switch, (, c, ), {, case]
[isJSSpace, (, c, ), ), {, break, ;, }, }, switch, (, c, ), {, case, '@', :, do, {]
[c, ), ), {, break, ;, }, }, switch, (, c, ), {, case, '@', :, do, {, c, =]
[}, }, switch, (, c, ), {, case, '@', :, do, {, c, =, getChar, (, ), ;, if, (]
[switch, (, c, ), {, case, '@', :, do, {, c, =, getChar, (, ), ;, if, (, isAlpha, (]
[{, case, '@', :, do, {, c, =, getChar, (, ), ;, if, (, isAlpha, (, c, ), ), {]
['@', :, do, {, c, =, getChar, (, ), ;, if, (, isAlpha, (, c, ), ), {, addToString, (]
[getChar, (, ), ;, if, (, isAlpha, (, c, ), ), {, addToString, (, c, ), ;, }, else, {]
[), ;, if, (, isAlpha, (, c, ), ), {, addToString, (, c, ), ;, }, else, {, ungetChar, (]
[(, isAlpha, (, c, ), ), {, addToString, (, c, ), ;, }, else, {, ungetChar, (, c, ), ;]
[(, isAlpha, (, c, ), ), {, addToString, (, c, ), ;, }, else, {, ungetChar, (, c, ), ;]
[), ), {, addToString, (, c, ), ;, }, else, {, ungetChar, (, c, ), ;, this, ., string, =]
[(, c, ), ;, }, else, {, ungetChar, (, c, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;]
[), ;, }, else, {, ungetChar, (, c, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =]
[else, {, ungetChar, (, c, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return]
[else, {, ungetChar, (, c, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return]
[., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., ANNOTATION, ;, }, }, while, (]
[(, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., ANNOTATION, ;, }, }, while, (, true, ), ;, case]
[=, 0, ;, return, JsDocToken, ., ANNOTATION, ;, }, }, while, (, true, ), ;, case, '*', :, if, (]
[;, return, JsDocToken, ., ANNOTATION, ;, }, }, while, (, true, ), ;, case, '*', :, if, (, matchChar, (]
[;, }, }, while, (, true, ), ;, case, '*', :, if, (, matchChar, (, '/', ), ), {, return]
[;, }, }, while, (, true, ), ;, case, '*', :, if, (, matchChar, (, '/', ), ), {, return]
[case, '*', :, if, (, matchChar, (, '/', ), ), {, return, JsDocToken, ., EOC, ;, }, else, {, return]
[case, '*', :, if, (, matchChar, (, '/', ), ), {, return, JsDocToken, ., EOC, ;, }, else, {, return]
[(, '/', ), ), {, return, JsDocToken, ., EOC, ;, }, else, {, return, JsDocToken, ., STAR, ;, }, case]
[), {, return, JsDocToken, ., EOC, ;, }, else, {, return, JsDocToken, ., STAR, ;, }, case, ',', :, return]
[), {, return, JsDocToken, ., EOC, ;, }, else, {, return, JsDocToken, ., STAR, ;, }, case, ',', :, return]
[EOC, ;, }, else, {, return, JsDocToken, ., STAR, ;, }, case, ',', :, return, JsDocToken, ., COMMA, ;, case]
[else, {, return, JsDocToken, ., STAR, ;, }, case, ',', :, return, JsDocToken, ., COMMA, ;, case, '>', :, return]
[else, {, return, JsDocToken, ., STAR, ;, }, case, ',', :, return, JsDocToken, ., COMMA, ;, case, '>', :, return]
[STAR, ;, }, case, ',', :, return, JsDocToken, ., COMMA, ;, case, '>', :, return, JsDocToken, ., GT, ;, case]
[case, ',', :, return, JsDocToken, ., COMMA, ;, case, '>', :, return, JsDocToken, ., GT, ;, case, '(', :, return]
[case, ',', :, return, JsDocToken, ., COMMA, ;, case, '>', :, return, JsDocToken, ., GT, ;, case, '(', :, return]
[., COMMA, ;, case, '>', :, return, JsDocToken, ., GT, ;, case, '(', :, return, JsDocToken, ., LP, ;, case]
[case, '>', :, return, JsDocToken, ., GT, ;, case, '(', :, return, JsDocToken, ., LP, ;, case, ')', :, return]
[case, '>', :, return, JsDocToken, ., GT, ;, case, '(', :, return, JsDocToken, ., LP, ;, case, ')', :, return]
[., GT, ;, case, '(', :, return, JsDocToken, ., LP, ;, case, ')', :, return, JsDocToken, ., RP, ;, case]
[case, '(', :, return, JsDocToken, ., LP, ;, case, ')', :, return, JsDocToken, ., RP, ;, case, '{', :, return]
[case, '(', :, return, JsDocToken, ., LP, ;, case, ')', :, return, JsDocToken, ., RP, ;, case, '{', :, return]
[., LP, ;, case, ')', :, return, JsDocToken, ., RP, ;, case, '{', :, return, JsDocToken, ., LC, ;, case]
[case, ')', :, return, JsDocToken, ., RP, ;, case, '{', :, return, JsDocToken, ., LC, ;, case, '}', :, return]
[case, ')', :, return, JsDocToken, ., RP, ;, case, '{', :, return, JsDocToken, ., LC, ;, case, '}', :, return]
[., RP, ;, case, '{', :, return, JsDocToken, ., LC, ;, case, '}', :, return, JsDocToken, ., RC, ;, case]
[case, '{', :, return, JsDocToken, ., LC, ;, case, '}', :, return, JsDocToken, ., RC, ;, case, '[', :, return]
[case, '{', :, return, JsDocToken, ., LC, ;, case, '}', :, return, JsDocToken, ., RC, ;, case, '[', :, return]
[., LC, ;, case, '}', :, return, JsDocToken, ., RC, ;, case, '[', :, return, JsDocToken, ., LB, ;, case]
[case, '}', :, return, JsDocToken, ., RC, ;, case, '[', :, return, JsDocToken, ., LB, ;, case, ']', :, return]
[case, '}', :, return, JsDocToken, ., RC, ;, case, '[', :, return, JsDocToken, ., LB, ;, case, ']', :, return]
[., RC, ;, case, '[', :, return, JsDocToken, ., LB, ;, case, ']', :, return, JsDocToken, ., RB, ;, case]
[case, '[', :, return, JsDocToken, ., LB, ;, case, ']', :, return, JsDocToken, ., RB, ;, case, '?', :, return]
[case, '[', :, return, JsDocToken, ., LB, ;, case, ']', :, return, JsDocToken, ., RB, ;, case, '?', :, return]
[., LB, ;, case, ']', :, return, JsDocToken, ., RB, ;, case, '?', :, return, JsDocToken, ., QMARK, ;, case]
[case, ']', :, return, JsDocToken, ., RB, ;, case, '?', :, return, JsDocToken, ., QMARK, ;, case, '!', :, return]
[case, ']', :, return, JsDocToken, ., RB, ;, case, '?', :, return, JsDocToken, ., QMARK, ;, case, '!', :, return]
[., RB, ;, case, '?', :, return, JsDocToken, ., QMARK, ;, case, '!', :, return, JsDocToken, ., BANG, ;, case]
[case, '?', :, return, JsDocToken, ., QMARK, ;, case, '!', :, return, JsDocToken, ., BANG, ;, case, ':', :, return]
[case, '?', :, return, JsDocToken, ., QMARK, ;, case, '!', :, return, JsDocToken, ., BANG, ;, case, ':', :, return]
[., QMARK, ;, case, '!', :, return, JsDocToken, ., BANG, ;, case, ':', :, return, JsDocToken, ., COLON, ;, case]
[case, '!', :, return, JsDocToken, ., BANG, ;, case, ':', :, return, JsDocToken, ., COLON, ;, case, '=', :, return]
[case, '!', :, return, JsDocToken, ., BANG, ;, case, ':', :, return, JsDocToken, ., COLON, ;, case, '=', :, return]
[., BANG, ;, case, ':', :, return, JsDocToken, ., COLON, ;, case, '=', :, return, JsDocToken, ., EQUALS, ;, case]
[;, case, ':', :, return, JsDocToken, ., COLON, ;, case, '=', :, return, JsDocToken, ., EQUALS, ;, case, '|', :]
[':', :, return, JsDocToken, ., COLON, ;, case, '=', :, return, JsDocToken, ., EQUALS, ;, case, '|', :, matchChar, (]
[., COLON, ;, case, '=', :, return, JsDocToken, ., EQUALS, ;, case, '|', :, matchChar, (, '|', ), ;, return]
[., COLON, ;, case, '=', :, return, JsDocToken, ., EQUALS, ;, case, '|', :, matchChar, (, '|', ), ;, return]
[:, return, JsDocToken, ., EQUALS, ;, case, '|', :, matchChar, (, '|', ), ;, return, JsDocToken, ., PIPE, ;, case]
[JsDocToken, ., EQUALS, ;, case, '|', :, matchChar, (, '|', ), ;, return, JsDocToken, ., PIPE, ;, case, '.', :]
[EQUALS, ;, case, '|', :, matchChar, (, '|', ), ;, return, JsDocToken, ., PIPE, ;, case, '.', :, c, =]
[(, '|', ), ;, return, JsDocToken, ., PIPE, ;, case, '.', :, c, =, getChar, (, ), ;, if, (]
[(, '|', ), ;, return, JsDocToken, ., PIPE, ;, case, '.', :, c, =, getChar, (, ), ;, if, (]
[), ;, return, JsDocToken, ., PIPE, ;, case, '.', :, c, =, getChar, (, ), ;, if, (, c, ==]
[., PIPE, ;, case, '.', :, c, =, getChar, (, ), ;, if, (, c, ==, '<', ), {, return]
[., PIPE, ;, case, '.', :, c, =, getChar, (, ), ;, if, (, c, ==, '<', ), {, return]
[(, ), ;, if, (, c, ==, '<', ), {, return, JsDocToken, ., LT, ;, }, else, {, if, (]
[(, ), ;, if, (, c, ==, '<', ), {, return, JsDocToken, ., LT, ;, }, else, {, if, (]
[;, if, (, c, ==, '<', ), {, return, JsDocToken, ., LT, ;, }, else, {, if, (, c, ==]
[c, ==, '<', ), {, return, JsDocToken, ., LT, ;, }, else, {, if, (, c, ==, '.', ), {]
['<', ), {, return, JsDocToken, ., LT, ;, }, else, {, if, (, c, ==, '.', ), {, c, =]
[LT, ;, }, else, {, if, (, c, ==, '.', ), {, c, =, getChar, (, ), ;, if, (]
[LT, ;, }, else, {, if, (, c, ==, '.', ), {, c, =, getChar, (, ), ;, if, (]
[}, else, {, if, (, c, ==, '.', ), {, c, =, getChar, (, ), ;, if, (, c, ==]
[(, c, ==, '.', ), {, c, =, getChar, (, ), ;, if, (, c, ==, '.', ), {, return]
[(, c, ==, '.', ), {, c, =, getChar, (, ), ;, if, (, c, ==, '.', ), {, return]
[=, getChar, (, ), ;, if, (, c, ==, '.', ), {, return, JsDocToken, ., ELLIPSIS, ;, }, else, {]
[(, ), ;, if, (, c, ==, '.', ), {, return, JsDocToken, ., ELLIPSIS, ;, }, else, {, addToString, (]
[c, ==, '.', ), {, return, JsDocToken, ., ELLIPSIS, ;, }, else, {, addToString, (, '.', ), ;, }, }]
[c, ==, '.', ), {, return, JsDocToken, ., ELLIPSIS, ;, }, else, {, addToString, (, '.', ), ;, }, }]
['.', ), {, return, JsDocToken, ., ELLIPSIS, ;, }, else, {, addToString, (, '.', ), ;, }, }, ungetBuffer, []
['.', ), {, return, JsDocToken, ., ELLIPSIS, ;, }, else, {, addToString, (, '.', ), ;, }, }, ungetBuffer, []
[JsDocToken, ., ELLIPSIS, ;, }, else, {, addToString, (, '.', ), ;, }, }, ungetBuffer, [, ungetCursor, ++, ], =]
[ELLIPSIS, ;, }, else, {, addToString, (, '.', ), ;, }, }, ungetBuffer, [, ungetCursor, ++, ], =, c, ;]
[}, else, {, addToString, (, '.', ), ;, }, }, ungetBuffer, [, ungetCursor, ++, ], =, c, ;, c, =]
[}, ungetBuffer, [, ungetCursor, ++, ], =, c, ;, c, =, '.', ;, }, default, :, {, int, c1, =]
[[, ungetCursor, ++, ], =, c, ;, c, =, '.', ;, }, default, :, {, int, c1, =, c, ;]
[++, ], =, c, ;, c, =, '.', ;, }, default, :, {, int, c1, =, c, ;, addToString, (]
[=, '.', ;, }, default, :, {, int, c1, =, c, ;, addToString, (, c, ), ;, int, c2, =]
[{, int, c1, =, c, ;, addToString, (, c, ), ;, int, c2, =, getChar, (, ), ;, if, (]
[int, c1, =, c, ;, addToString, (, c, ), ;, int, c2, =, getChar, (, ), ;, if, (, !]
[=, c, ;, addToString, (, c, ), ;, int, c2, =, getChar, (, ), ;, if, (, !, isJSDocString, (]
[(, c, ), ;, int, c2, =, getChar, (, ), ;, if, (, !, isJSDocString, (, c2, ), ), {]
[), ;, int, c2, =, getChar, (, ), ;, if, (, !, isJSDocString, (, c2, ), ), {, ungetChar, (]
[c2, =, getChar, (, ), ;, if, (, !, isJSDocString, (, c2, ), ), {, ungetChar, (, c2, ), ;]
[c2, =, getChar, (, ), ;, if, (, !, isJSDocString, (, c2, ), ), {, ungetChar, (, c2, ), ;]
[), ;, if, (, !, isJSDocString, (, c2, ), ), {, ungetChar, (, c2, ), ;, this, ., string, =]
[!, isJSDocString, (, c2, ), ), {, ungetChar, (, c2, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;]
[(, c2, ), ), {, ungetChar, (, c2, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =]
[), {, ungetChar, (, c2, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return]
[), {, ungetChar, (, c2, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return]
[string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }, else, {, do, {]
[getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }, else, {, do, {, c1, =]
[), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }, else, {, do, {, c1, =, c2, ;]
[stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }, else, {, do, {, c1, =, c2, ;, c2, =]
[., STRING, ;, }, else, {, do, {, c1, =, c2, ;, c2, =, getChar, (, ), ;, if, (]
[., STRING, ;, }, else, {, do, {, c1, =, c2, ;, c2, =, getChar, (, ), ;, if, (]
[., STRING, ;, }, else, {, do, {, c1, =, c2, ;, c2, =, getChar, (, ), ;, if, (]
[;, }, else, {, do, {, c1, =, c2, ;, c2, =, getChar, (, ), ;, if, (, c1, ==]
[else, {, do, {, c1, =, c2, ;, c2, =, getChar, (, ), ;, if, (, c1, ==, '.', &&]
[else, {, do, {, c1, =, c2, ;, c2, =, getChar, (, ), ;, if, (, c1, ==, '.', &&]
[do, {, c1, =, c2, ;, c2, =, getChar, (, ), ;, if, (, c1, ==, '.', &&, c2, ==]
[=, c2, ;, c2, =, getChar, (, ), ;, if, (, c1, ==, '.', &&, c2, ==, '<', ), {]
[;, c2, =, getChar, (, ), ;, if, (, c1, ==, '.', &&, c2, ==, '<', ), {, ungetChar, (]
[getChar, (, ), ;, if, (, c1, ==, '.', &&, c2, ==, '<', ), {, ungetChar, (, c2, ), ;]
[), ;, if, (, c1, ==, '.', &&, c2, ==, '<', ), {, ungetChar, (, c2, ), ;, ungetChar, (]
[(, c1, ==, '.', &&, c2, ==, '<', ), {, ungetChar, (, c2, ), ;, ungetChar, (, c1, ), ;]
[(, c1, ==, '.', &&, c2, ==, '<', ), {, ungetChar, (, c2, ), ;, ungetChar, (, c1, ), ;]
[&&, c2, ==, '<', ), {, ungetChar, (, c2, ), ;, ungetChar, (, c1, ), ;, this, ., string, =]
[), {, ungetChar, (, c2, ), ;, ungetChar, (, c1, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;]
[ungetChar, (, c2, ), ;, ungetChar, (, c1, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =]
[), ;, ungetChar, (, c1, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return]
[), ;, ungetChar, (, c1, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return]
[string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }, else, {, if, (]
[getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }, else, {, if, (, isJSDocString, (]
[stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }, else, {, if, (, isJSDocString, (, c2, ), ), {]
[0, ;, return, JsDocToken, ., STRING, ;, }, else, {, if, (, isJSDocString, (, c2, ), ), {, addToString, (]
[;, }, else, {, if, (, isJSDocString, (, c2, ), ), {, addToString, (, c1, ), ;, }, else, {]
[else, {, if, (, isJSDocString, (, c2, ), ), {, addToString, (, c1, ), ;, }, else, {, ungetChar, (]
[(, isJSDocString, (, c2, ), ), {, addToString, (, c1, ), ;, }, else, {, ungetChar, (, c2, ), ;]
[(, c2, ), ), {, addToString, (, c1, ), ;, }, else, {, ungetChar, (, c2, ), ;, addToString, (]
[), {, addToString, (, c1, ), ;, }, else, {, ungetChar, (, c2, ), ;, addToString, (, c1, ), ;]
[), {, addToString, (, c1, ), ;, }, else, {, ungetChar, (, c2, ), ;, addToString, (, c1, ), ;]
[c1, ), ;, }, else, {, ungetChar, (, c2, ), ;, addToString, (, c1, ), ;, this, ., string, =]
[else, {, ungetChar, (, c2, ), ;, addToString, (, c1, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;]
[ungetChar, (, c2, ), ;, addToString, (, c1, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =]
[), ;, addToString, (, c1, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return]
[), ;, addToString, (, c1, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return]
[string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, JsDocToken, ., STRING, ;, }, }, }, while, (]
[0, ;, return, JsDocToken, ., STRING, ;, }, }, }, while, (, true, ), ;, }, }, }, }, }]
[JsDocToken, ., STRING, ;, }, }, }, while, (, true, ), ;, }, }, }, }, }, @, SuppressWarnings, (]
[}, @, SuppressWarnings, (, "fallthrough", ), String, getRemainingJSDocLine, (, ), {, int, c, ;, for, (, ;, ;, ), {]
[SuppressWarnings, (, "fallthrough", ), String, getRemainingJSDocLine, (, ), {, int, c, ;, for, (, ;, ;, ), {, c, =]
[(, ), {, int, c, ;, for, (, ;, ;, ), {, c, =, getChar, (, ), ;, switch, (]
[c, ;, for, (, ;, ;, ), {, c, =, getChar, (, ), ;, switch, (, c, ), {, case]
[;, ;, ), {, c, =, getChar, (, ), ;, switch, (, c, ), {, case, '*', :, if, (]
[;, ;, ), {, c, =, getChar, (, ), ;, switch, (, c, ), {, case, '*', :, if, (]
[c, =, getChar, (, ), ;, switch, (, c, ), {, case, '*', :, if, (, peekChar, (, ), !=]
[(, ), ;, switch, (, c, ), {, case, '*', :, if, (, peekChar, (, ), !=, '/', ), {]
[;, switch, (, c, ), {, case, '*', :, if, (, peekChar, (, ), !=, '/', ), {, addToString, (]
['*', :, if, (, peekChar, (, ), !=, '/', ), {, addToString, (, c, ), ;, break, ;, }, case]
[(, peekChar, (, ), !=, '/', ), {, addToString, (, c, ), ;, break, ;, }, case, EOF_CHAR, :, case]
[(, ), !=, '/', ), {, addToString, (, c, ), ;, break, ;, }, case, EOF_CHAR, :, case, '\n', :]
[!=, '/', ), {, addToString, (, c, ), ;, break, ;, }, case, EOF_CHAR, :, case, '\n', :, ungetChar, (]
[{, addToString, (, c, ), ;, break, ;, }, case, EOF_CHAR, :, case, '\n', :, ungetChar, (, c, ), ;]
[{, addToString, (, c, ), ;, break, ;, }, case, EOF_CHAR, :, case, '\n', :, ungetChar, (, c, ), ;]
[), ;, break, ;, }, case, EOF_CHAR, :, case, '\n', :, ungetChar, (, c, ), ;, this, ., string, =]
[}, case, EOF_CHAR, :, case, '\n', :, ungetChar, (, c, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;]
[EOF_CHAR, :, case, '\n', :, ungetChar, (, c, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =]
['\n', :, ungetChar, (, c, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return]
['\n', :, ungetChar, (, c, ), ;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return]
[;, this, ., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, this, ., string, ;, default, :]
[., string, =, getStringFromBuffer, (, ), ;, stringBufferTop, =, 0, ;, return, this, ., string, ;, default, :, addToString, (]
[;, default, :, addToString, (, c, ), ;, break, ;, }, }, }, final, int, getLineno, (, ), {, return]
[}, }, }, final, int, getLineno, (, ), {, return, lineno, ;, }, final, int, getCharno, (, ), {, return]
[}, }, }, final, int, getLineno, (, ), {, return, lineno, ;, }, final, int, getCharno, (, ), {, return]
[}, }, }, final, int, getLineno, (, ), {, return, lineno, ;, }, final, int, getCharno, (, ), {, return]
[}, final, int, getLineno, (, ), {, return, lineno, ;, }, final, int, getCharno, (, ), {, return, lineno, ==]
[int, getLineno, (, ), {, return, lineno, ;, }, final, int, getCharno, (, ), {, return, lineno, ==, initLineno, ?]
[int, getLineno, (, ), {, return, lineno, ;, }, final, int, getCharno, (, ), {, return, lineno, ==, initLineno, ?]
[(, ), {, return, lineno, ;, }, final, int, getCharno, (, ), {, return, lineno, ==, initLineno, ?, initCharno, +]
[{, return, lineno, ;, }, final, int, getCharno, (, ), {, return, lineno, ==, initLineno, ?, initCharno, +, charno, :]
[{, return, lineno, ==, initLineno, ?, initCharno, +, charno, :, charno, ;, }, final, String, getString, (, ), {, return]
[charno, ;, }, final, String, getString, (, ), {, return, string, ;, }, final, boolean, eof, (, ), {, return]
[return, string, ;, }, final, boolean, eof, (, ), {, return, hitEOF, ;, }, private, String, getStringFromBuffer, (, ), {]
[;, }, final, boolean, eof, (, ), {, return, hitEOF, ;, }, private, String, getStringFromBuffer, (, ), {, tokenEnd, =]
[boolean, eof, (, ), {, return, hitEOF, ;, }, private, String, getStringFromBuffer, (, ), {, tokenEnd, =, cursor, ;, return]
[), {, return, hitEOF, ;, }, private, String, getStringFromBuffer, (, ), {, tokenEnd, =, cursor, ;, return, new, String, (]
[return, hitEOF, ;, }, private, String, getStringFromBuffer, (, ), {, tokenEnd, =, cursor, ;, return, new, String, (, stringBuffer, ,]
[;, }, private, String, getStringFromBuffer, (, ), {, tokenEnd, =, cursor, ;, return, new, String, (, stringBuffer, ,, 0, ,]
[(, stringBuffer, ,, 0, ,, stringBufferTop, ), ;, }, private, void, addToString, (, int, c, ), {, int, N, =]
[,, stringBufferTop, ), ;, }, private, void, addToString, (, int, c, ), {, int, N, =, stringBufferTop, ;, if, (]
[,, stringBufferTop, ), ;, }, private, void, addToString, (, int, c, ), {, int, N, =, stringBufferTop, ;, if, (]
[), ;, }, private, void, addToString, (, int, c, ), {, int, N, =, stringBufferTop, ;, if, (, N, ==]
[), ;, }, private, void, addToString, (, int, c, ), {, int, N, =, stringBufferTop, ;, if, (, N, ==]
[{, int, N, =, stringBufferTop, ;, if, (, N, ==, stringBuffer, ., length, ), {, char, [, ], tmp, =]
[=, stringBufferTop, ;, if, (, N, ==, stringBuffer, ., length, ), {, char, [, ], tmp, =, new, char, []
[=, stringBufferTop, ;, if, (, N, ==, stringBuffer, ., length, ), {, char, [, ], tmp, =, new, char, []
[=, stringBufferTop, ;, if, (, N, ==, stringBuffer, ., length, ), {, char, [, ], tmp, =, new, char, []
[(, N, ==, stringBuffer, ., length, ), {, char, [, ], tmp, =, new, char, [, stringBuffer, ., length, *]
[stringBuffer, ., length, ), {, char, [, ], tmp, =, new, char, [, stringBuffer, ., length, *, 2, ], ;]
[stringBuffer, ., length, ), {, char, [, ], tmp, =, new, char, [, stringBuffer, ., length, *, 2, ], ;]
[{, char, [, ], tmp, =, new, char, [, stringBuffer, ., length, *, 2, ], ;, System, ., arraycopy, (]
[[, ], tmp, =, new, char, [, stringBuffer, ., length, *, 2, ], ;, System, ., arraycopy, (, stringBuffer, ,]
[tmp, =, new, char, [, stringBuffer, ., length, *, 2, ], ;, System, ., arraycopy, (, stringBuffer, ,, 0, ,]
[new, char, [, stringBuffer, ., length, *, 2, ], ;, System, ., arraycopy, (, stringBuffer, ,, 0, ,, tmp, ,]
[[, stringBuffer, ., length, *, 2, ], ;, System, ., arraycopy, (, stringBuffer, ,, 0, ,, tmp, ,, 0, ,]
[length, *, 2, ], ;, System, ., arraycopy, (, stringBuffer, ,, 0, ,, tmp, ,, 0, ,, N, ), ;]
[2, ], ;, System, ., arraycopy, (, stringBuffer, ,, 0, ,, tmp, ,, 0, ,, N, ), ;, stringBuffer, =]
[System, ., arraycopy, (, stringBuffer, ,, 0, ,, tmp, ,, 0, ,, N, ), ;, stringBuffer, =, tmp, ;, }]
[System, ., arraycopy, (, stringBuffer, ,, 0, ,, tmp, ,, 0, ,, N, ), ;, stringBuffer, =, tmp, ;, }]
[arraycopy, (, stringBuffer, ,, 0, ,, tmp, ,, 0, ,, N, ), ;, stringBuffer, =, tmp, ;, }, stringBuffer, []
[,, 0, ,, tmp, ,, 0, ,, N, ), ;, stringBuffer, =, tmp, ;, }, stringBuffer, [, N, ], =]
[tmp, ,, 0, ,, N, ), ;, stringBuffer, =, tmp, ;, }, stringBuffer, [, N, ], =, (, char, )]
[0, ,, N, ), ;, stringBuffer, =, tmp, ;, }, stringBuffer, [, N, ], =, (, char, ), c, ;]
[N, ), ;, stringBuffer, =, tmp, ;, }, stringBuffer, [, N, ], =, (, char, ), c, ;, stringBufferTop, =]
[N, ), ;, stringBuffer, =, tmp, ;, }, stringBuffer, [, N, ], =, (, char, ), c, ;, stringBufferTop, =]
[;, stringBuffer, =, tmp, ;, }, stringBuffer, [, N, ], =, (, char, ), c, ;, stringBufferTop, =, N, +]
[(, char, ), c, ;, stringBufferTop, =, N, +, 1, ;, }, void, ungetChar, (, int, c, ), {, assert]
[char, ), c, ;, stringBufferTop, =, N, +, 1, ;, }, void, ungetChar, (, int, c, ), {, assert, (]
[), c, ;, stringBufferTop, =, N, +, 1, ;, }, void, ungetChar, (, int, c, ), {, assert, (, !]
[c, ;, stringBufferTop, =, N, +, 1, ;, }, void, ungetChar, (, int, c, ), {, assert, (, !, (]
[c, ;, stringBufferTop, =, N, +, 1, ;, }, void, ungetChar, (, int, c, ), {, assert, (, !, (]
[c, ;, stringBufferTop, =, N, +, 1, ;, }, void, ungetChar, (, int, c, ), {, assert, (, !, (]
[stringBufferTop, =, N, +, 1, ;, }, void, ungetChar, (, int, c, ), {, assert, (, !, (, ungetCursor, !=]
[N, +, 1, ;, }, void, ungetChar, (, int, c, ), {, assert, (, !, (, ungetCursor, !=, 0, &&]
[N, +, 1, ;, }, void, ungetChar, (, int, c, ), {, assert, (, !, (, ungetCursor, !=, 0, &&]
[N, +, 1, ;, }, void, ungetChar, (, int, c, ), {, assert, (, !, (, ungetCursor, !=, 0, &&]
[1, ;, }, void, ungetChar, (, int, c, ), {, assert, (, !, (, ungetCursor, !=, 0, &&, ungetBuffer, []
[1, ;, }, void, ungetChar, (, int, c, ), {, assert, (, !, (, ungetCursor, !=, 0, &&, ungetBuffer, []
[}, void, ungetChar, (, int, c, ), {, assert, (, !, (, ungetCursor, !=, 0, &&, ungetBuffer, [, ungetCursor, -]
[(, int, c, ), {, assert, (, !, (, ungetCursor, !=, 0, &&, ungetBuffer, [, ungetCursor, -, 1, ], ==]
[{, assert, (, !, (, ungetCursor, !=, 0, &&, ungetBuffer, [, ungetCursor, -, 1, ], ==, '\n', ), ), ;]
[{, assert, (, !, (, ungetCursor, !=, 0, &&, ungetBuffer, [, ungetCursor, -, 1, ], ==, '\n', ), ), ;]
[(, !, (, ungetCursor, !=, 0, &&, ungetBuffer, [, ungetCursor, -, 1, ], ==, '\n', ), ), ;, ungetBuffer, []
[(, !, (, ungetCursor, !=, 0, &&, ungetBuffer, [, ungetCursor, -, 1, ], ==, '\n', ), ), ;, ungetBuffer, []
[!=, 0, &&, ungetBuffer, [, ungetCursor, -, 1, ], ==, '\n', ), ), ;, ungetBuffer, [, ungetCursor, ++, ], =]
[&&, ungetBuffer, [, ungetCursor, -, 1, ], ==, '\n', ), ), ;, ungetBuffer, [, ungetCursor, ++, ], =, c, ;]
[&&, ungetBuffer, [, ungetCursor, -, 1, ], ==, '\n', ), ), ;, ungetBuffer, [, ungetCursor, ++, ], =, c, ;]
[++, ], =, c, ;, cursor, --, ;, }, private, boolean, matchChar, (, int, test, ), {, int, c, =]
[--, ;, }, private, boolean, matchChar, (, int, test, ), {, int, c, =, getCharIgnoreLineEnd, (, ), ;, if, (]
[--, ;, }, private, boolean, matchChar, (, int, test, ), {, int, c, =, getCharIgnoreLineEnd, (, ), ;, if, (]
[}, private, boolean, matchChar, (, int, test, ), {, int, c, =, getCharIgnoreLineEnd, (, ), ;, if, (, c, ==]
[matchChar, (, int, test, ), {, int, c, =, getCharIgnoreLineEnd, (, ), ;, if, (, c, ==, test, ), {]
[int, test, ), {, int, c, =, getCharIgnoreLineEnd, (, ), ;, if, (, c, ==, test, ), {, tokenEnd, =]
[{, int, c, =, getCharIgnoreLineEnd, (, ), ;, if, (, c, ==, test, ), {, tokenEnd, =, cursor, ;, return]
[(, ), ;, if, (, c, ==, test, ), {, tokenEnd, =, cursor, ;, return, true, ;, }, else, {]
[;, if, (, c, ==, test, ), {, tokenEnd, =, cursor, ;, return, true, ;, }, else, {, ungetCharIgnoreLineEnd, (]
[==, test, ), {, tokenEnd, =, cursor, ;, return, true, ;, }, else, {, ungetCharIgnoreLineEnd, (, c, ), ;, return]
[(, c, ), ;, return, false, ;, }, }, private, static, boolean, isAlpha, (, int, c, ), {, if, (]
[(, c, ), ;, return, false, ;, }, }, private, static, boolean, isAlpha, (, int, c, ), {, if, (]
[), ;, return, false, ;, }, }, private, static, boolean, isAlpha, (, int, c, ), {, if, (, c, <=]
[;, }, }, private, static, boolean, isAlpha, (, int, c, ), {, if, (, c, <=, 'Z', ), {, return]
[;, }, }, private, static, boolean, isAlpha, (, int, c, ), {, if, (, c, <=, 'Z', ), {, return]
[}, private, static, boolean, isAlpha, (, int, c, ), {, if, (, c, <=, 'Z', ), {, return, 'A', <=]
[int, c, ), {, if, (, c, <=, 'Z', ), {, return, 'A', <=, c, ;, }, else, {, return]
[int, c, ), {, if, (, c, <=, 'Z', ), {, return, 'A', <=, c, ;, }, else, {, return]
[int, c, ), {, if, (, c, <=, 'Z', ), {, return, 'A', <=, c, ;, }, else, {, return]
[), {, if, (, c, <=, 'Z', ), {, return, 'A', <=, c, ;, }, else, {, return, 'a', <=]
[if, (, c, <=, 'Z', ), {, return, 'A', <=, c, ;, }, else, {, return, 'a', <=, c, &&]
[if, (, c, <=, 'Z', ), {, return, 'A', <=, c, ;, }, else, {, return, 'a', <=, c, &&]
[c, <=, 'Z', ), {, return, 'A', <=, c, ;, }, else, {, return, 'a', <=, c, &&, c, <=]
['a', <=, c, &&, c, <=, 'z', ;, }, }, private, boolean, isJSDocString, (, int, c, ), {, switch, (]
[c, <=, 'z', ;, }, }, private, boolean, isJSDocString, (, int, c, ), {, switch, (, c, ), {, case]
[;, }, }, private, boolean, isJSDocString, (, int, c, ), {, switch, (, c, ), {, case, '@', :, case]
[private, boolean, isJSDocString, (, int, c, ), {, switch, (, c, ), {, case, '@', :, case, '*', :, case]
[(, int, c, ), {, switch, (, c, ), {, case, '@', :, case, '*', :, case, ',', :, case]
[), {, switch, (, c, ), {, case, '@', :, case, '*', :, case, ',', :, case, '>', :, case]
[(, c, ), {, case, '@', :, case, '*', :, case, ',', :, case, '>', :, case, ':', :, case]
[{, case, '@', :, case, '*', :, case, ',', :, case, '>', :, case, ':', :, case, '(', :, case]
[:, case, '*', :, case, ',', :, case, '>', :, case, ':', :, case, '(', :, case, ')', :, case]
[:, case, ',', :, case, '>', :, case, ':', :, case, '(', :, case, ')', :, case, '{', :, case]
[:, case, '>', :, case, ':', :, case, '(', :, case, ')', :, case, '{', :, case, '}', :, case]
[:, case, ':', :, case, '(', :, case, ')', :, case, '{', :, case, '}', :, case, '[', :, case]
[:, case, '(', :, case, ')', :, case, '{', :, case, '}', :, case, '[', :, case, ']', :, case]
[:, case, ')', :, case, '{', :, case, '}', :, case, '[', :, case, ']', :, case, '?', :, case]
[:, case, '{', :, case, '}', :, case, '[', :, case, ']', :, case, '?', :, case, '!', :, case]
[:, case, '}', :, case, '[', :, case, ']', :, case, '?', :, case, '!', :, case, '|', :, case]
[:, case, '[', :, case, ']', :, case, '?', :, case, '!', :, case, '|', :, case, '=', :, case]
[:, case, ']', :, case, '?', :, case, '!', :, case, '|', :, case, '=', :, case, EOF_CHAR, :, case]
[:, case, '?', :, case, '!', :, case, '|', :, case, '=', :, case, EOF_CHAR, :, case, '\n', :, return]
['!', :, case, '|', :, case, '=', :, case, EOF_CHAR, :, case, '\n', :, return, false, ;, default, :, return]
[:, case, '|', :, case, '=', :, case, EOF_CHAR, :, case, '\n', :, return, false, ;, default, :, return, !]
['|', :, case, '=', :, case, EOF_CHAR, :, case, '\n', :, return, false, ;, default, :, return, !, isJSSpace, (]
[:, return, !, isJSSpace, (, c, ), ;, }, }, static, boolean, isJSSpace, (, int, c, ), {, if, (]
[:, return, !, isJSSpace, (, c, ), ;, }, }, static, boolean, isJSSpace, (, int, c, ), {, if, (]
[!, isJSSpace, (, c, ), ;, }, }, static, boolean, isJSSpace, (, int, c, ), {, if, (, c, <=]
[), ;, }, }, static, boolean, isJSSpace, (, int, c, ), {, if, (, c, <=, 127, ), {, return]
[), ;, }, }, static, boolean, isJSSpace, (, int, c, ), {, if, (, c, <=, 127, ), {, return]
[), ;, }, }, static, boolean, isJSSpace, (, int, c, ), {, if, (, c, <=, 127, ), {, return]
[), ;, }, }, static, boolean, isJSSpace, (, int, c, ), {, if, (, c, <=, 127, ), {, return]
[), ;, }, }, static, boolean, isJSSpace, (, int, c, ), {, if, (, c, <=, 127, ), {, return]
[}, }, static, boolean, isJSSpace, (, int, c, ), {, if, (, c, <=, 127, ), {, return, c, ==]
[static, boolean, isJSSpace, (, int, c, ), {, if, (, c, <=, 127, ), {, return, c, ==, 0x20, ||]
[static, boolean, isJSSpace, (, int, c, ), {, if, (, c, <=, 127, ), {, return, c, ==, 0x20, ||]
[isJSSpace, (, int, c, ), {, if, (, c, <=, 127, ), {, return, c, ==, 0x20, ||, c, ==]
[int, c, ), {, if, (, c, <=, 127, ), {, return, c, ==, 0x20, ||, c, ==, 0x9, ||]
[int, c, ), {, if, (, c, <=, 127, ), {, return, c, ==, 0x20, ||, c, ==, 0x9, ||]
[), {, if, (, c, <=, 127, ), {, return, c, ==, 0x20, ||, c, ==, 0x9, ||, c, ==]
[if, (, c, <=, 127, ), {, return, c, ==, 0x20, ||, c, ==, 0x9, ||, c, ==, 0xC, ||]
[if, (, c, <=, 127, ), {, return, c, ==, 0x20, ||, c, ==, 0x9, ||, c, ==, 0xC, ||]
[c, <=, 127, ), {, return, c, ==, 0x20, ||, c, ==, 0x9, ||, c, ==, 0xC, ||, c, ==]
[c, ==, 0x20, ||, c, ==, 0x9, ||, c, ==, 0xC, ||, c, ==, 0xB, ;, }, else, {, return]
[c, ==, 0x20, ||, c, ==, 0x9, ||, c, ==, 0xC, ||, c, ==, 0xB, ;, }, else, {, return]
[c, ==, 0x20, ||, c, ==, 0x9, ||, c, ==, 0xC, ||, c, ==, 0xB, ;, }, else, {, return]
[0x20, ||, c, ==, 0x9, ||, c, ==, 0xC, ||, c, ==, 0xB, ;, }, else, {, return, c, ==]
[c, ==, 0x9, ||, c, ==, 0xC, ||, c, ==, 0xB, ;, }, else, {, return, c, ==, 0xA0, ||]
[c, ==, 0x9, ||, c, ==, 0xC, ||, c, ==, 0xB, ;, }, else, {, return, c, ==, 0xA0, ||]
[c, ==, 0x9, ||, c, ==, 0xC, ||, c, ==, 0xB, ;, }, else, {, return, c, ==, 0xA0, ||]
[c, ==, 0xC, ||, c, ==, 0xB, ;, }, else, {, return, c, ==, 0xA0, ||, Character, ., getType, (]
[||, c, ==, 0xB, ;, }, else, {, return, c, ==, 0xA0, ||, Character, ., getType, (, (, char, )]
[0xB, ;, }, else, {, return, c, ==, 0xA0, ||, Character, ., getType, (, (, char, ), c, ), ==]
[0xB, ;, }, else, {, return, c, ==, 0xA0, ||, Character, ., getType, (, (, char, ), c, ), ==]
[), c, ), ==, Character, ., SPACE_SEPARATOR, ;, }, }, private, static, boolean, isJSFormatChar, (, int, c, ), {, return]
[), c, ), ==, Character, ., SPACE_SEPARATOR, ;, }, }, private, static, boolean, isJSFormatChar, (, int, c, ), {, return]
[), c, ), ==, Character, ., SPACE_SEPARATOR, ;, }, }, private, static, boolean, isJSFormatChar, (, int, c, ), {, return]
[), ==, Character, ., SPACE_SEPARATOR, ;, }, }, private, static, boolean, isJSFormatChar, (, int, c, ), {, return, c, >]
[Character, ., SPACE_SEPARATOR, ;, }, }, private, static, boolean, isJSFormatChar, (, int, c, ), {, return, c, >, 127, &&]
[Character, ., SPACE_SEPARATOR, ;, }, }, private, static, boolean, isJSFormatChar, (, int, c, ), {, return, c, >, 127, &&]
[Character, ., SPACE_SEPARATOR, ;, }, }, private, static, boolean, isJSFormatChar, (, int, c, ), {, return, c, >, 127, &&]
[}, }, private, static, boolean, isJSFormatChar, (, int, c, ), {, return, c, >, 127, &&, Character, ., getType, (]
[static, boolean, isJSFormatChar, (, int, c, ), {, return, c, >, 127, &&, Character, ., getType, (, (, char, )]
[(, int, c, ), {, return, c, >, 127, &&, Character, ., getType, (, (, char, ), c, ), ==]
[(, int, c, ), {, return, c, >, 127, &&, Character, ., getType, (, (, char, ), c, ), ==]
[Character, ., getType, (, (, char, ), c, ), ==, Character, ., FORMAT, ;, }, void, update, (, ), {]
[getType, (, (, char, ), c, ), ==, Character, ., FORMAT, ;, }, void, update, (, ), {, charno, =]
[update, (, ), {, charno, =, getOffset, (, ), ;, }, private, int, peekChar, (, ), {, int, c, =]
[charno, =, getOffset, (, ), ;, }, private, int, peekChar, (, ), {, int, c, =, getChar, (, ), ;]
[getOffset, (, ), ;, }, private, int, peekChar, (, ), {, int, c, =, getChar, (, ), ;, ungetChar, (]
[}, private, int, peekChar, (, ), {, int, c, =, getChar, (, ), ;, ungetChar, (, c, ), ;, return]
[(, ), ;, ungetChar, (, c, ), ;, return, c, ;, }, protected, int, getChar, (, ), {, if, (]
[(, ), ;, ungetChar, (, c, ), ;, return, c, ;, }, protected, int, getChar, (, ), {, if, (]
[;, ungetChar, (, c, ), ;, return, c, ;, }, protected, int, getChar, (, ), {, if, (, ungetCursor, !=]
[c, ), ;, return, c, ;, }, protected, int, getChar, (, ), {, if, (, ungetCursor, !=, 0, ), {]
[c, ), ;, return, c, ;, }, protected, int, getChar, (, ), {, if, (, ungetCursor, !=, 0, ), {]
[return, c, ;, }, protected, int, getChar, (, ), {, if, (, ungetCursor, !=, 0, ), {, cursor, ++, ;]
[c, ;, }, protected, int, getChar, (, ), {, if, (, ungetCursor, !=, 0, ), {, cursor, ++, ;, --]
[int, getChar, (, ), {, if, (, ungetCursor, !=, 0, ), {, cursor, ++, ;, --, ungetCursor, ;, if, (]
[int, getChar, (, ), {, if, (, ungetCursor, !=, 0, ), {, cursor, ++, ;, --, ungetCursor, ;, if, (]
[(, ), {, if, (, ungetCursor, !=, 0, ), {, cursor, ++, ;, --, ungetCursor, ;, if, (, charno, ==]
[), {, if, (, ungetCursor, !=, 0, ), {, cursor, ++, ;, --, ungetCursor, ;, if, (, charno, ==, -]
[(, ungetCursor, !=, 0, ), {, cursor, ++, ;, --, ungetCursor, ;, if, (, charno, ==, -, 1, ), {]
[!=, 0, ), {, cursor, ++, ;, --, ungetCursor, ;, if, (, charno, ==, -, 1, ), {, charno, =]
[;, --, ungetCursor, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return]
[;, --, ungetCursor, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return]
[ungetCursor, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, ungetBuffer, []
[;, }, return, ungetBuffer, [, ungetCursor, ], ;, }, for, (, ;, ;, ), {, int, c, ;, if, (]
[;, }, return, ungetBuffer, [, ungetCursor, ], ;, }, for, (, ;, ;, ), {, int, c, ;, if, (]
[return, ungetBuffer, [, ungetCursor, ], ;, }, for, (, ;, ;, ), {, int, c, ;, if, (, sourceCursor, ==]
[ungetCursor, ], ;, }, for, (, ;, ;, ), {, int, c, ;, if, (, sourceCursor, ==, sourceEnd, ), {]
[;, }, for, (, ;, ;, ), {, int, c, ;, if, (, sourceCursor, ==, sourceEnd, ), {, hitEOF, =]
[;, ;, ), {, int, c, ;, if, (, sourceCursor, ==, sourceEnd, ), {, hitEOF, =, true, ;, if, (]
[;, ;, ), {, int, c, ;, if, (, sourceCursor, ==, sourceEnd, ), {, hitEOF, =, true, ;, if, (]
[), {, int, c, ;, if, (, sourceCursor, ==, sourceEnd, ), {, hitEOF, =, true, ;, if, (, charno, ==]
[{, int, c, ;, if, (, sourceCursor, ==, sourceEnd, ), {, hitEOF, =, true, ;, if, (, charno, ==, -]
[;, if, (, sourceCursor, ==, sourceEnd, ), {, hitEOF, =, true, ;, if, (, charno, ==, -, 1, ), {]
[(, sourceCursor, ==, sourceEnd, ), {, hitEOF, =, true, ;, if, (, charno, ==, -, 1, ), {, charno, =]
[hitEOF, =, true, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return]
[;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }]
[;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }]
[charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }, cursor, ++, ;]
[-, 1, ), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =]
[-, 1, ), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =]
[charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =, sourceString, ., charAt, (]
[charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =, sourceString, ., charAt, (]
[}, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (]
[}, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (]
[EOF_CHAR, ;, }, cursor, ++, ;, c, =, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (, lineEndChar, >=]
[;, c, =, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (, lineEndChar, >=, 0, ), {, if, (]
[;, c, =, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (, lineEndChar, >=, 0, ), {, if, (]
[;, c, =, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (, lineEndChar, >=, 0, ), {, if, (]
[=, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (, lineEndChar, >=, 0, ), {, if, (, lineEndChar, ==]
[., charAt, (, sourceCursor, ++, ), ;, if, (, lineEndChar, >=, 0, ), {, if, (, lineEndChar, ==, '\r', &&]
[., charAt, (, sourceCursor, ++, ), ;, if, (, lineEndChar, >=, 0, ), {, if, (, lineEndChar, ==, '\r', &&]
[(, sourceCursor, ++, ), ;, if, (, lineEndChar, >=, 0, ), {, if, (, lineEndChar, ==, '\r', &&, c, ==]
[), ;, if, (, lineEndChar, >=, 0, ), {, if, (, lineEndChar, ==, '\r', &&, c, ==, '\n', ), {]
[if, (, lineEndChar, >=, 0, ), {, if, (, lineEndChar, ==, '\r', &&, c, ==, '\n', ), {, lineEndChar, =]
[), {, if, (, lineEndChar, ==, '\r', &&, c, ==, '\n', ), {, lineEndChar, =, '\n', ;, continue, ;, }]
[if, (, lineEndChar, ==, '\r', &&, c, ==, '\n', ), {, lineEndChar, =, '\n', ;, continue, ;, }, lineEndChar, =]
[(, lineEndChar, ==, '\r', &&, c, ==, '\n', ), {, lineEndChar, =, '\n', ;, continue, ;, }, lineEndChar, =, -]
[==, '\r', &&, c, ==, '\n', ), {, lineEndChar, =, '\n', ;, continue, ;, }, lineEndChar, =, -, 1, ;]
[&&, c, ==, '\n', ), {, lineEndChar, =, '\n', ;, continue, ;, }, lineEndChar, =, -, 1, ;, lineStart, =]
[&&, c, ==, '\n', ), {, lineEndChar, =, '\n', ;, continue, ;, }, lineEndChar, =, -, 1, ;, lineStart, =]
[==, '\n', ), {, lineEndChar, =, '\n', ;, continue, ;, }, lineEndChar, =, -, 1, ;, lineStart, =, sourceCursor, -]
[), {, lineEndChar, =, '\n', ;, continue, ;, }, lineEndChar, =, -, 1, ;, lineStart, =, sourceCursor, -, 1, ;]
[), {, lineEndChar, =, '\n', ;, continue, ;, }, lineEndChar, =, -, 1, ;, lineStart, =, sourceCursor, -, 1, ;]
[continue, ;, }, lineEndChar, =, -, 1, ;, lineStart, =, sourceCursor, -, 1, ;, lineno, ++, ;, }, if, (]
[continue, ;, }, lineEndChar, =, -, 1, ;, lineStart, =, sourceCursor, -, 1, ;, lineno, ++, ;, }, if, (]
[}, lineEndChar, =, -, 1, ;, lineStart, =, sourceCursor, -, 1, ;, lineno, ++, ;, }, if, (, c, <=]
[;, lineStart, =, sourceCursor, -, 1, ;, lineno, ++, ;, }, if, (, c, <=, 127, ), {, if, (]
[;, lineStart, =, sourceCursor, -, 1, ;, lineno, ++, ;, }, if, (, c, <=, 127, ), {, if, (]
[;, lineStart, =, sourceCursor, -, 1, ;, lineno, ++, ;, }, if, (, c, <=, 127, ), {, if, (]
[=, sourceCursor, -, 1, ;, lineno, ++, ;, }, if, (, c, <=, 127, ), {, if, (, c, ==]
[-, 1, ;, lineno, ++, ;, }, if, (, c, <=, 127, ), {, if, (, c, ==, '\n', ||]
[-, 1, ;, lineno, ++, ;, }, if, (, c, <=, 127, ), {, if, (, c, ==, '\n', ||]
[;, lineno, ++, ;, }, if, (, c, <=, 127, ), {, if, (, c, ==, '\n', ||, c, ==]
[;, }, if, (, c, <=, 127, ), {, if, (, c, ==, '\n', ||, c, ==, '\r', ), {]
[if, (, c, <=, 127, ), {, if, (, c, ==, '\n', ||, c, ==, '\r', ), {, lineEndChar, =]
[c, <=, 127, ), {, if, (, c, ==, '\n', ||, c, ==, '\r', ), {, lineEndChar, =, c, ;]
[127, ), {, if, (, c, ==, '\n', ||, c, ==, '\r', ), {, lineEndChar, =, c, ;, c, =]
[||, c, ==, '\r', ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, else, {, if, (]
[==, '\r', ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, else, {, if, (, isJSFormatChar, (]
[=, '\n', ;, }, }, else, {, if, (, isJSFormatChar, (, c, ), ), {, continue, ;, }, if, (]
[=, '\n', ;, }, }, else, {, if, (, isJSFormatChar, (, c, ), ), {, continue, ;, }, if, (]
[}, else, {, if, (, isJSFormatChar, (, c, ), ), {, continue, ;, }, if, (, ScriptRuntime, ., isJSLineTerminator, (]
[(, isJSFormatChar, (, c, ), ), {, continue, ;, }, if, (, ScriptRuntime, ., isJSLineTerminator, (, c, ), ), {]
[(, c, ), ), {, continue, ;, }, if, (, ScriptRuntime, ., isJSLineTerminator, (, c, ), ), {, lineEndChar, =]
[), ), {, continue, ;, }, if, (, ScriptRuntime, ., isJSLineTerminator, (, c, ), ), {, lineEndChar, =, c, ;]
[{, continue, ;, }, if, (, ScriptRuntime, ., isJSLineTerminator, (, c, ), ), {, lineEndChar, =, c, ;, c, =]
[ScriptRuntime, ., isJSLineTerminator, (, c, ), ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, if, (]
[ScriptRuntime, ., isJSLineTerminator, (, c, ), ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, if, (]
[isJSLineTerminator, (, c, ), ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, if, (, charno, ==]
[(, c, ), ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, if, (, charno, ==, -]
[), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, if, (, charno, ==, -, 1, ), {]
[lineEndChar, =, c, ;, c, =, '\n', ;, }, }, if, (, charno, ==, -, 1, ), {, charno, =]
['\n', ;, }, }, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return]
[charno, =, getOffset, (, ), ;, }, return, c, ;, }, }, private, int, getCharIgnoreLineEnd, (, ), {, if, (]
[charno, =, getOffset, (, ), ;, }, return, c, ;, }, }, private, int, getCharIgnoreLineEnd, (, ), {, if, (]
[getOffset, (, ), ;, }, return, c, ;, }, }, private, int, getCharIgnoreLineEnd, (, ), {, if, (, ungetCursor, !=]
[;, }, return, c, ;, }, }, private, int, getCharIgnoreLineEnd, (, ), {, if, (, ungetCursor, !=, 0, ), {]
[;, }, return, c, ;, }, }, private, int, getCharIgnoreLineEnd, (, ), {, if, (, ungetCursor, !=, 0, ), {]
[c, ;, }, }, private, int, getCharIgnoreLineEnd, (, ), {, if, (, ungetCursor, !=, 0, ), {, cursor, ++, ;]
[;, }, }, private, int, getCharIgnoreLineEnd, (, ), {, if, (, ungetCursor, !=, 0, ), {, cursor, ++, ;, --]
[int, getCharIgnoreLineEnd, (, ), {, if, (, ungetCursor, !=, 0, ), {, cursor, ++, ;, --, ungetCursor, ;, if, (]
[int, getCharIgnoreLineEnd, (, ), {, if, (, ungetCursor, !=, 0, ), {, cursor, ++, ;, --, ungetCursor, ;, if, (]
[(, ), {, if, (, ungetCursor, !=, 0, ), {, cursor, ++, ;, --, ungetCursor, ;, if, (, charno, ==]
[), {, if, (, ungetCursor, !=, 0, ), {, cursor, ++, ;, --, ungetCursor, ;, if, (, charno, ==, -]
[(, ungetCursor, !=, 0, ), {, cursor, ++, ;, --, ungetCursor, ;, if, (, charno, ==, -, 1, ), {]
[!=, 0, ), {, cursor, ++, ;, --, ungetCursor, ;, if, (, charno, ==, -, 1, ), {, charno, =]
[;, --, ungetCursor, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return]
[;, --, ungetCursor, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return]
[ungetCursor, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, ungetBuffer, []
[;, }, return, ungetBuffer, [, ungetCursor, ], ;, }, for, (, ;, ;, ), {, int, c, ;, if, (]
[;, }, return, ungetBuffer, [, ungetCursor, ], ;, }, for, (, ;, ;, ), {, int, c, ;, if, (]
[return, ungetBuffer, [, ungetCursor, ], ;, }, for, (, ;, ;, ), {, int, c, ;, if, (, sourceCursor, ==]
[ungetCursor, ], ;, }, for, (, ;, ;, ), {, int, c, ;, if, (, sourceCursor, ==, sourceEnd, ), {]
[;, }, for, (, ;, ;, ), {, int, c, ;, if, (, sourceCursor, ==, sourceEnd, ), {, hitEOF, =]
[;, ;, ), {, int, c, ;, if, (, sourceCursor, ==, sourceEnd, ), {, hitEOF, =, true, ;, if, (]
[;, ;, ), {, int, c, ;, if, (, sourceCursor, ==, sourceEnd, ), {, hitEOF, =, true, ;, if, (]
[), {, int, c, ;, if, (, sourceCursor, ==, sourceEnd, ), {, hitEOF, =, true, ;, if, (, charno, ==]
[{, int, c, ;, if, (, sourceCursor, ==, sourceEnd, ), {, hitEOF, =, true, ;, if, (, charno, ==, -]
[;, if, (, sourceCursor, ==, sourceEnd, ), {, hitEOF, =, true, ;, if, (, charno, ==, -, 1, ), {]
[(, sourceCursor, ==, sourceEnd, ), {, hitEOF, =, true, ;, if, (, charno, ==, -, 1, ), {, charno, =]
[hitEOF, =, true, ;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return]
[;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }]
[;, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }]
[charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }, cursor, ++, ;]
[-, 1, ), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =]
[-, 1, ), {, charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =]
[charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =, sourceString, ., charAt, (]
[charno, =, getOffset, (, ), ;, }, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =, sourceString, ., charAt, (]
[}, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (]
[}, return, EOF_CHAR, ;, }, cursor, ++, ;, c, =, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (]
[EOF_CHAR, ;, }, cursor, ++, ;, c, =, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (, c, <=]
[;, c, =, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (, c, <=, 127, ), {, if, (]
[;, c, =, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (, c, <=, 127, ), {, if, (]
[;, c, =, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (, c, <=, 127, ), {, if, (]
[=, sourceString, ., charAt, (, sourceCursor, ++, ), ;, if, (, c, <=, 127, ), {, if, (, c, ==]
[., charAt, (, sourceCursor, ++, ), ;, if, (, c, <=, 127, ), {, if, (, c, ==, '\n', ||]
[., charAt, (, sourceCursor, ++, ), ;, if, (, c, <=, 127, ), {, if, (, c, ==, '\n', ||]
[(, sourceCursor, ++, ), ;, if, (, c, <=, 127, ), {, if, (, c, ==, '\n', ||, c, ==]
[), ;, if, (, c, <=, 127, ), {, if, (, c, ==, '\n', ||, c, ==, '\r', ), {]
[if, (, c, <=, 127, ), {, if, (, c, ==, '\n', ||, c, ==, '\r', ), {, lineEndChar, =]
[c, <=, 127, ), {, if, (, c, ==, '\n', ||, c, ==, '\r', ), {, lineEndChar, =, c, ;]
[127, ), {, if, (, c, ==, '\n', ||, c, ==, '\r', ), {, lineEndChar, =, c, ;, c, =]
[||, c, ==, '\r', ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, else, {, if, (]
[==, '\r', ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, else, {, if, (, isJSFormatChar, (]
[=, '\n', ;, }, }, else, {, if, (, isJSFormatChar, (, c, ), ), {, continue, ;, }, if, (]
[=, '\n', ;, }, }, else, {, if, (, isJSFormatChar, (, c, ), ), {, continue, ;, }, if, (]
[}, else, {, if, (, isJSFormatChar, (, c, ), ), {, continue, ;, }, if, (, ScriptRuntime, ., isJSLineTerminator, (]
[(, isJSFormatChar, (, c, ), ), {, continue, ;, }, if, (, ScriptRuntime, ., isJSLineTerminator, (, c, ), ), {]
[(, c, ), ), {, continue, ;, }, if, (, ScriptRuntime, ., isJSLineTerminator, (, c, ), ), {, lineEndChar, =]
[), ), {, continue, ;, }, if, (, ScriptRuntime, ., isJSLineTerminator, (, c, ), ), {, lineEndChar, =, c, ;]
[{, continue, ;, }, if, (, ScriptRuntime, ., isJSLineTerminator, (, c, ), ), {, lineEndChar, =, c, ;, c, =]
[ScriptRuntime, ., isJSLineTerminator, (, c, ), ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, if, (]
[ScriptRuntime, ., isJSLineTerminator, (, c, ), ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, if, (]
[isJSLineTerminator, (, c, ), ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, if, (, charno, ==]
[(, c, ), ), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, if, (, charno, ==, -]
[), {, lineEndChar, =, c, ;, c, =, '\n', ;, }, }, if, (, charno, ==, -, 1, ), {]
[lineEndChar, =, c, ;, c, =, '\n', ;, }, }, if, (, charno, ==, -, 1, ), {, charno, =]
['\n', ;, }, }, if, (, charno, ==, -, 1, ), {, charno, =, getOffset, (, ), ;, }, return]
[charno, =, getOffset, (, ), ;, }, return, c, ;, }, }, private, void, ungetCharIgnoreLineEnd, (, int, c, ), {]
[charno, =, getOffset, (, ), ;, }, return, c, ;, }, }, private, void, ungetCharIgnoreLineEnd, (, int, c, ), {]
[getOffset, (, ), ;, }, return, c, ;, }, }, private, void, ungetCharIgnoreLineEnd, (, int, c, ), {, ungetBuffer, []
[getOffset, (, ), ;, }, return, c, ;, }, }, private, void, ungetCharIgnoreLineEnd, (, int, c, ), {, ungetBuffer, []
[}, return, c, ;, }, }, private, void, ungetCharIgnoreLineEnd, (, int, c, ), {, ungetBuffer, [, ungetCursor, ++, ], =]
[c, ;, }, }, private, void, ungetCharIgnoreLineEnd, (, int, c, ), {, ungetBuffer, [, ungetCursor, ++, ], =, c, ;]
[c, ;, }, }, private, void, ungetCharIgnoreLineEnd, (, int, c, ), {, ungetBuffer, [, ungetCursor, ++, ], =, c, ;]
[{, ungetBuffer, [, ungetCursor, ++, ], =, c, ;, cursor, --, ;, }, final, int, getOffset, (, ), {, return]
[{, ungetBuffer, [, ungetCursor, ++, ], =, c, ;, cursor, --, ;, }, final, int, getOffset, (, ), {, return]
[{, ungetBuffer, [, ungetCursor, ++, ], =, c, ;, cursor, --, ;, }, final, int, getOffset, (, ), {, return]
[{, ungetBuffer, [, ungetCursor, ++, ], =, c, ;, cursor, --, ;, }, final, int, getOffset, (, ), {, return]
[[, ungetCursor, ++, ], =, c, ;, cursor, --, ;, }, final, int, getOffset, (, ), {, return, sourceCursor, -]
[++, ], =, c, ;, cursor, --, ;, }, final, int, getOffset, (, ), {, return, sourceCursor, -, lineStart, -]
[=, c, ;, cursor, --, ;, }, final, int, getOffset, (, ), {, return, sourceCursor, -, lineStart, -, ungetCursor, -]
[final, int, getOffset, (, ), {, return, sourceCursor, -, lineStart, -, ungetCursor, -, 1, ;, }, private, String, string, =]
[-, lineStart, -, ungetCursor, -, 1, ;, }, private, String, string, =, "", ;, private, char, [, ], stringBuffer, =]
[ungetCursor, -, 1, ;, }, private, String, string, =, "", ;, private, char, [, ], stringBuffer, =, new, char, []
[], stringBuffer, =, new, char, [, 128, ], ;, private, int, stringBufferTop, ;, private, final, int, [, ], ungetBuffer, =]
[new, char, [, 128, ], ;, private, int, stringBufferTop, ;, private, final, int, [, ], ungetBuffer, =, new, int, []
[final, int, [, ], ungetBuffer, =, new, int, [, 3, ], ;, private, int, ungetCursor, ;, private, boolean, hitEOF, =]
[new, int, [, 3, ], ;, private, int, ungetCursor, ;, private, boolean, hitEOF, =, false, ;, private, int, lineStart, =]
[private, int, ungetCursor, ;, private, boolean, hitEOF, =, false, ;, private, int, lineStart, =, 0, ;, private, int, lineEndChar, =]
[int, ungetCursor, ;, private, boolean, hitEOF, =, false, ;, private, int, lineStart, =, 0, ;, private, int, lineEndChar, =, -]
[private, int, lineStart, =, 0, ;, private, int, lineEndChar, =, -, 1, ;, int, lineno, ;, private, int, charno, =]
[int, lineStart, =, 0, ;, private, int, lineEndChar, =, -, 1, ;, int, lineno, ;, private, int, charno, =, -]
