[class, RandomGeneratorFactory, {, private, RandomGeneratorFactory, (, ), {, }, public, static, RandomGenerator, createRandomGenerator, (, final, Random, rng, ), {, return]
[(, final, Random, rng, ), {, return, new, RandomGenerator, (, ), {, public, void, setSeed, (, int, seed, ), {]
[(, final, Random, rng, ), {, return, new, RandomGenerator, (, ), {, public, void, setSeed, (, int, seed, ), {]
[), {, return, new, RandomGenerator, (, ), {, public, void, setSeed, (, int, seed, ), {, rng, ., setSeed, (]
[new, RandomGenerator, (, ), {, public, void, setSeed, (, int, seed, ), {, rng, ., setSeed, (, (, long, )]
[., setSeed, (, (, long, ), seed, ), ;, }, public, void, setSeed, (, int, [, ], seed, ), {]
[., setSeed, (, (, long, ), seed, ), ;, }, public, void, setSeed, (, int, [, ], seed, ), {]
[long, ), seed, ), ;, }, public, void, setSeed, (, int, [, ], seed, ), {, rng, ., setSeed, (]
[seed, ), ;, }, public, void, setSeed, (, int, [, ], seed, ), {, rng, ., setSeed, (, convertToLong, (]
[{, rng, ., setSeed, (, convertToLong, (, seed, ), ), ;, }, public, void, setSeed, (, long, seed, ), {]
[{, rng, ., setSeed, (, convertToLong, (, seed, ), ), ;, }, public, void, setSeed, (, long, seed, ), {]
[(, convertToLong, (, seed, ), ), ;, }, public, void, setSeed, (, long, seed, ), {, rng, ., setSeed, (]
[), {, rng, ., setSeed, (, seed, ), ;, }, public, void, nextBytes, (, byte, [, ], bytes, ), {]
[), {, rng, ., setSeed, (, seed, ), ;, }, public, void, nextBytes, (, byte, [, ], bytes, ), {]
[setSeed, (, seed, ), ;, }, public, void, nextBytes, (, byte, [, ], bytes, ), {, rng, ., nextBytes, (]
[[, ], bytes, ), {, rng, ., nextBytes, (, bytes, ), ;, }, public, int, nextInt, (, ), {, return]
[[, ], bytes, ), {, rng, ., nextBytes, (, bytes, ), ;, }, public, int, nextInt, (, ), {, return]
[), {, return, rng, ., nextInt, (, ), ;, }, public, int, nextInt, (, int, n, ), {, if, (]
[), {, return, rng, ., nextInt, (, ), ;, }, public, int, nextInt, (, int, n, ), {, if, (]
[return, rng, ., nextInt, (, ), ;, }, public, int, nextInt, (, int, n, ), {, if, (, n, <=]
[(, ), ;, }, public, int, nextInt, (, int, n, ), {, if, (, n, <=, 0, ), {, throw]
[}, public, int, nextInt, (, int, n, ), {, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[int, n, ), {, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, return]
[int, n, ), {, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, return]
[if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, return, rng, ., nextInt, (]
[n, ), ;, }, return, rng, ., nextInt, (, n, ), ;, }, public, long, nextLong, (, ), {, return]
[n, ), ;, }, return, rng, ., nextInt, (, n, ), ;, }, public, long, nextLong, (, ), {, return]
[long, nextLong, (, ), {, return, rng, ., nextLong, (, ), ;, }, public, boolean, nextBoolean, (, ), {, return]
[long, nextLong, (, ), {, return, rng, ., nextLong, (, ), ;, }, public, boolean, nextBoolean, (, ), {, return]
[boolean, nextBoolean, (, ), {, return, rng, ., nextBoolean, (, ), ;, }, public, float, nextFloat, (, ), {, return]
[boolean, nextBoolean, (, ), {, return, rng, ., nextBoolean, (, ), ;, }, public, float, nextFloat, (, ), {, return]
[float, nextFloat, (, ), {, return, rng, ., nextFloat, (, ), ;, }, public, double, nextDouble, (, ), {, return]
[float, nextFloat, (, ), {, return, rng, ., nextFloat, (, ), ;, }, public, double, nextDouble, (, ), {, return]
[double, nextDouble, (, ), {, return, rng, ., nextDouble, (, ), ;, }, public, double, nextGaussian, (, ), {, return]
[double, nextDouble, (, ), {, return, rng, ., nextDouble, (, ), ;, }, public, double, nextGaussian, (, ), {, return]
[;, }, }, ;, }, public, static, long, convertToLong, (, int, [, ], seed, ), {, final, long, prime, =]
[public, static, long, convertToLong, (, int, [, ], seed, ), {, final, long, prime, =, 4294967291l, ;, long, combined, =]
[], seed, ), {, final, long, prime, =, 4294967291l, ;, long, combined, =, 0l, ;, for, (, int, s, :]
[{, final, long, prime, =, 4294967291l, ;, long, combined, =, 0l, ;, for, (, int, s, :, seed, ), {]
[long, prime, =, 4294967291l, ;, long, combined, =, 0l, ;, for, (, int, s, :, seed, ), {, combined, =]
[long, prime, =, 4294967291l, ;, long, combined, =, 0l, ;, for, (, int, s, :, seed, ), {, combined, =]
[long, prime, =, 4294967291l, ;, long, combined, =, 0l, ;, for, (, int, s, :, seed, ), {, combined, =]
[=, 4294967291l, ;, long, combined, =, 0l, ;, for, (, int, s, :, seed, ), {, combined, =, combined, *]
[;, long, combined, =, 0l, ;, for, (, int, s, :, seed, ), {, combined, =, combined, *, prime, +]
[0l, ;, for, (, int, s, :, seed, ), {, combined, =, combined, *, prime, +, s, ;, }, return]
