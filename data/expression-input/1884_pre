[charset, ., CharsetEncoder, ;, import, java, ., util, ., Map, ;, class, CodeGenerator, {, private, static, final, String, LT_ESCAPED, =]
[., Map, ;, class, CodeGenerator, {, private, static, final, String, LT_ESCAPED, =, "\\x3c", ;, private, static, final, String, GT_ESCAPED, =]
["\\x3c", ;, private, static, final, String, GT_ESCAPED, =, "\\x3e", ;, private, final, Map, <, String, ,, String, >, ESCAPED_JS_STRINGS, =]
["\\x3c", ;, private, static, final, String, GT_ESCAPED, =, "\\x3e", ;, private, final, Map, <, String, ,, String, >, ESCAPED_JS_STRINGS, =]
[String, ,, String, >, ESCAPED_JS_STRINGS, =, Maps, ., newHashMap, (, ), ;, private, static, final, char, [, ], HEX_CHARS, =]
[,, String, >, ESCAPED_JS_STRINGS, =, Maps, ., newHashMap, (, ), ;, private, static, final, char, [, ], HEX_CHARS, =, {]
[>, ESCAPED_JS_STRINGS, =, Maps, ., newHashMap, (, ), ;, private, static, final, char, [, ], HEX_CHARS, =, {, '0', ,]
[=, Maps, ., newHashMap, (, ), ;, private, static, final, char, [, ], HEX_CHARS, =, {, '0', ,, '1', ,]
[., newHashMap, (, ), ;, private, static, final, char, [, ], HEX_CHARS, =, {, '0', ,, '1', ,, '2', ,]
[(, ), ;, private, static, final, char, [, ], HEX_CHARS, =, {, '0', ,, '1', ,, '2', ,, '3', ,]
[;, private, static, final, char, [, ], HEX_CHARS, =, {, '0', ,, '1', ,, '2', ,, '3', ,, '4', ,]
[static, final, char, [, ], HEX_CHARS, =, {, '0', ,, '1', ,, '2', ,, '3', ,, '4', ,, '5', ,]
[char, [, ], HEX_CHARS, =, {, '0', ,, '1', ,, '2', ,, '3', ,, '4', ,, '5', ,, '6', ,]
[], HEX_CHARS, =, {, '0', ,, '1', ,, '2', ,, '3', ,, '4', ,, '5', ,, '6', ,, '7', ,]
[=, {, '0', ,, '1', ,, '2', ,, '3', ,, '4', ,, '5', ,, '6', ,, '7', ,, '8', ,]
['0', ,, '1', ,, '2', ,, '3', ,, '4', ,, '5', ,, '6', ,, '7', ,, '8', ,, '9', ,]
['1', ,, '2', ,, '3', ,, '4', ,, '5', ,, '6', ,, '7', ,, '8', ,, '9', ,, 'a', ,]
['2', ,, '3', ,, '4', ,, '5', ,, '6', ,, '7', ,, '8', ,, '9', ,, 'a', ,, 'b', ,]
['3', ,, '4', ,, '5', ,, '6', ,, '7', ,, '8', ,, '9', ,, 'a', ,, 'b', ,, 'c', ,]
['4', ,, '5', ,, '6', ,, '7', ,, '8', ,, '9', ,, 'a', ,, 'b', ,, 'c', ,, 'd', ,]
['5', ,, '6', ,, '7', ,, '8', ,, '9', ,, 'a', ,, 'b', ,, 'c', ,, 'd', ,, 'e', ,]
[CharsetEncoder, outputCharsetEncoder, ;, private, final, boolean, preferSingleQuotes, ;, private, final, boolean, trustedStrings, ;, private, CodeGenerator, (, CodeConsumer, consumer, ), {]
[;, private, final, boolean, preferSingleQuotes, ;, private, final, boolean, trustedStrings, ;, private, CodeGenerator, (, CodeConsumer, consumer, ), {, cc, =]
[final, boolean, preferSingleQuotes, ;, private, final, boolean, trustedStrings, ;, private, CodeGenerator, (, CodeConsumer, consumer, ), {, cc, =, consumer, ;]
[preferSingleQuotes, ;, private, final, boolean, trustedStrings, ;, private, CodeGenerator, (, CodeConsumer, consumer, ), {, cc, =, consumer, ;, outputCharsetEncoder, =]
[private, final, boolean, trustedStrings, ;, private, CodeGenerator, (, CodeConsumer, consumer, ), {, cc, =, consumer, ;, outputCharsetEncoder, =, null, ;]
[boolean, trustedStrings, ;, private, CodeGenerator, (, CodeConsumer, consumer, ), {, cc, =, consumer, ;, outputCharsetEncoder, =, null, ;, preferSingleQuotes, =]
[;, private, CodeGenerator, (, CodeConsumer, consumer, ), {, cc, =, consumer, ;, outputCharsetEncoder, =, null, ;, preferSingleQuotes, =, false, ;]
[CodeGenerator, (, CodeConsumer, consumer, ), {, cc, =, consumer, ;, outputCharsetEncoder, =, null, ;, preferSingleQuotes, =, false, ;, trustedStrings, =]
[null, ;, preferSingleQuotes, =, false, ;, trustedStrings, =, true, ;, }, static, CodeGenerator, forCostEstimation, (, CodeConsumer, consumer, ), {, return]
[=, false, ;, trustedStrings, =, true, ;, }, static, CodeGenerator, forCostEstimation, (, CodeConsumer, consumer, ), {, return, new, CodeGenerator, (]
[consumer, ), {, return, new, CodeGenerator, (, consumer, ), ;, }, CodeGenerator, (, CodeConsumer, consumer, ,, CompilerOptions, options, ), {]
[{, return, new, CodeGenerator, (, consumer, ), ;, }, CodeGenerator, (, CodeConsumer, consumer, ,, CompilerOptions, options, ), {, cc, =]
[consumer, ), ;, }, CodeGenerator, (, CodeConsumer, consumer, ,, CompilerOptions, options, ), {, cc, =, consumer, ;, Charset, outputCharset, =]
[consumer, ), ;, }, CodeGenerator, (, CodeConsumer, consumer, ,, CompilerOptions, options, ), {, cc, =, consumer, ;, Charset, outputCharset, =]
[,, CompilerOptions, options, ), {, cc, =, consumer, ;, Charset, outputCharset, =, options, ., getOutputCharset, (, ), ;, if, (]
[,, CompilerOptions, options, ), {, cc, =, consumer, ;, Charset, outputCharset, =, options, ., getOutputCharset, (, ), ;, if, (]
[,, CompilerOptions, options, ), {, cc, =, consumer, ;, Charset, outputCharset, =, options, ., getOutputCharset, (, ), ;, if, (]
[options, ), {, cc, =, consumer, ;, Charset, outputCharset, =, options, ., getOutputCharset, (, ), ;, if, (, outputCharset, ==]
[{, cc, =, consumer, ;, Charset, outputCharset, =, options, ., getOutputCharset, (, ), ;, if, (, outputCharset, ==, null, ||]
[{, cc, =, consumer, ;, Charset, outputCharset, =, options, ., getOutputCharset, (, ), ;, if, (, outputCharset, ==, null, ||]
[=, consumer, ;, Charset, outputCharset, =, options, ., getOutputCharset, (, ), ;, if, (, outputCharset, ==, null, ||, outputCharset, ==]
[=, consumer, ;, Charset, outputCharset, =, options, ., getOutputCharset, (, ), ;, if, (, outputCharset, ==, null, ||, outputCharset, ==]
[=, options, ., getOutputCharset, (, ), ;, if, (, outputCharset, ==, null, ||, outputCharset, ==, Charsets, ., US_ASCII, ), {]
[=, options, ., getOutputCharset, (, ), ;, if, (, outputCharset, ==, null, ||, outputCharset, ==, Charsets, ., US_ASCII, ), {]
[(, ), ;, if, (, outputCharset, ==, null, ||, outputCharset, ==, Charsets, ., US_ASCII, ), {, this, ., outputCharsetEncoder, =]
[outputCharset, ==, null, ||, outputCharset, ==, Charsets, ., US_ASCII, ), {, this, ., outputCharsetEncoder, =, null, ;, }, else, {]
[outputCharset, ==, null, ||, outputCharset, ==, Charsets, ., US_ASCII, ), {, this, ., outputCharsetEncoder, =, null, ;, }, else, {]
[outputCharset, ==, Charsets, ., US_ASCII, ), {, this, ., outputCharsetEncoder, =, null, ;, }, else, {, this, ., outputCharsetEncoder, =]
[outputCharset, ==, Charsets, ., US_ASCII, ), {, this, ., outputCharsetEncoder, =, null, ;, }, else, {, this, ., outputCharsetEncoder, =]
[this, ., outputCharsetEncoder, =, null, ;, }, else, {, this, ., outputCharsetEncoder, =, outputCharset, ., newEncoder, (, ), ;, }]
[this, ., outputCharsetEncoder, =, null, ;, }, else, {, this, ., outputCharsetEncoder, =, outputCharset, ., newEncoder, (, ), ;, }]
[null, ;, }, else, {, this, ., outputCharsetEncoder, =, outputCharset, ., newEncoder, (, ), ;, }, this, ., preferSingleQuotes, =]
[null, ;, }, else, {, this, ., outputCharsetEncoder, =, outputCharset, ., newEncoder, (, ), ;, }, this, ., preferSingleQuotes, =]
[{, this, ., outputCharsetEncoder, =, outputCharset, ., newEncoder, (, ), ;, }, this, ., preferSingleQuotes, =, options, ., preferSingleQuotes, ;]
[{, this, ., outputCharsetEncoder, =, outputCharset, ., newEncoder, (, ), ;, }, this, ., preferSingleQuotes, =, options, ., preferSingleQuotes, ;]
[=, outputCharset, ., newEncoder, (, ), ;, }, this, ., preferSingleQuotes, =, options, ., preferSingleQuotes, ;, this, ., trustedStrings, =]
[=, outputCharset, ., newEncoder, (, ), ;, }, this, ., preferSingleQuotes, =, options, ., preferSingleQuotes, ;, this, ., trustedStrings, =]
[=, options, ., preferSingleQuotes, ;, this, ., trustedStrings, =, options, ., trustedStrings, ;, }, public, void, tagAsStrict, (, ), {]
[., preferSingleQuotes, ;, this, ., trustedStrings, =, options, ., trustedStrings, ;, }, public, void, tagAsStrict, (, ), {, add, (]
[}, public, void, tagAsStrict, (, ), {, add, (, "'use strict';", ), ;, }, void, add, (, String, str, ), {]
[}, public, void, tagAsStrict, (, ), {, add, (, "'use strict';", ), ;, }, void, add, (, String, str, ), {]
[(, ), {, add, (, "'use strict';", ), ;, }, void, add, (, String, str, ), {, cc, ., add, (]
[String, str, ), {, cc, ., add, (, str, ), ;, }, private, void, addIdentifier, (, String, identifier, ), {]
[String, str, ), {, cc, ., add, (, str, ), ;, }, private, void, addIdentifier, (, String, identifier, ), {]
[cc, ., add, (, str, ), ;, }, private, void, addIdentifier, (, String, identifier, ), {, cc, ., addIdentifier, (]
[add, (, str, ), ;, }, private, void, addIdentifier, (, String, identifier, ), {, cc, ., addIdentifier, (, identifierEscape, (]
[), {, cc, ., addIdentifier, (, identifierEscape, (, identifier, ), ), ;, }, void, add, (, Node, n, ), {]
[cc, ., addIdentifier, (, identifierEscape, (, identifier, ), ), ;, }, void, add, (, Node, n, ), {, add, (]
[addIdentifier, (, identifierEscape, (, identifier, ), ), ;, }, void, add, (, Node, n, ), {, add, (, n, ,]
[addIdentifier, (, identifierEscape, (, identifier, ), ), ;, }, void, add, (, Node, n, ), {, add, (, n, ,]
[n, ,, Context, ., OTHER, ), ;, }, void, add, (, Node, n, ,, Context, context, ), {, if, (]
[,, Context, ., OTHER, ), ;, }, void, add, (, Node, n, ,, Context, context, ), {, if, (, !]
[,, Context, ., OTHER, ), ;, }, void, add, (, Node, n, ,, Context, context, ), {, if, (, !]
[Context, context, ), {, if, (, !, cc, ., continueProcessing, (, ), ), {, return, ;, }, int, type, =]
[Context, context, ), {, if, (, !, cc, ., continueProcessing, (, ), ), {, return, ;, }, int, type, =]
[continueProcessing, (, ), ), {, return, ;, }, int, type, =, n, ., getType, (, ), ;, String, opstr, =]
[continueProcessing, (, ), ), {, return, ;, }, int, type, =, n, ., getType, (, ), ;, String, opstr, =]
[{, return, ;, }, int, type, =, n, ., getType, (, ), ;, String, opstr, =, NodeUtil, ., opToStr, (]
[=, n, ., getType, (, ), ;, String, opstr, =, NodeUtil, ., opToStr, (, type, ), ;, int, childCount, =]
[=, n, ., getType, (, ), ;, String, opstr, =, NodeUtil, ., opToStr, (, type, ), ;, int, childCount, =]
[=, NodeUtil, ., opToStr, (, type, ), ;, int, childCount, =, n, ., getChildCount, (, ), ;, Node, first, =]
[=, NodeUtil, ., opToStr, (, type, ), ;, int, childCount, =, n, ., getChildCount, (, ), ;, Node, first, =]
[childCount, =, n, ., getChildCount, (, ), ;, Node, first, =, n, ., getFirstChild, (, ), ;, Node, last, =]
[childCount, =, n, ., getChildCount, (, ), ;, Node, first, =, n, ., getFirstChild, (, ), ;, Node, last, =]
[Node, first, =, n, ., getFirstChild, (, ), ;, Node, last, =, n, ., getLastChild, (, ), ;, if, (]
[Node, first, =, n, ., getFirstChild, (, ), ;, Node, last, =, n, ., getLastChild, (, ), ;, if, (]
[Node, first, =, n, ., getFirstChild, (, ), ;, Node, last, =, n, ., getLastChild, (, ), ;, if, (]
[=, n, ., getFirstChild, (, ), ;, Node, last, =, n, ., getLastChild, (, ), ;, if, (, opstr, !=]
[., getFirstChild, (, ), ;, Node, last, =, n, ., getLastChild, (, ), ;, if, (, opstr, !=, null, &&]
[., getFirstChild, (, ), ;, Node, last, =, n, ., getLastChild, (, ), ;, if, (, opstr, !=, null, &&]
[(, ), ;, Node, last, =, n, ., getLastChild, (, ), ;, if, (, opstr, !=, null, &&, first, !=]
[Node, last, =, n, ., getLastChild, (, ), ;, if, (, opstr, !=, null, &&, first, !=, last, ), {]
[Node, last, =, n, ., getLastChild, (, ), ;, if, (, opstr, !=, null, &&, first, !=, last, ), {]
[., getLastChild, (, ), ;, if, (, opstr, !=, null, &&, first, !=, last, ), {, Preconditions, ., checkState, (]
[., getLastChild, (, ), ;, if, (, opstr, !=, null, &&, first, !=, last, ), {, Preconditions, ., checkState, (]
[(, ), ;, if, (, opstr, !=, null, &&, first, !=, last, ), {, Preconditions, ., checkState, (, childCount, ==]
[;, if, (, opstr, !=, null, &&, first, !=, last, ), {, Preconditions, ., checkState, (, childCount, ==, 2, ,]
[(, opstr, !=, null, &&, first, !=, last, ), {, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad binary operator \"%s\": expected 2 arguments but got %s", ,]
[!=, null, &&, first, !=, last, ), {, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad binary operator \"%s\": expected 2 arguments but got %s", ,, opstr, ,]
[), {, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad binary operator \"%s\": expected 2 arguments but got %s", ,, opstr, ,, childCount, ), ;, int, p, =]
[), {, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad binary operator \"%s\": expected 2 arguments but got %s", ,, opstr, ,, childCount, ), ;, int, p, =]
[checkState, (, childCount, ==, 2, ,, "Bad binary operator \"%s\": expected 2 arguments but got %s", ,, opstr, ,, childCount, ), ;, int, p, =, NodeUtil, ., precedence, (]
["Bad binary operator \"%s\": expected 2 arguments but got %s", ,, opstr, ,, childCount, ), ;, int, p, =, NodeUtil, ., precedence, (, type, ), ;, Context, rhsContext, =]
[opstr, ,, childCount, ), ;, int, p, =, NodeUtil, ., precedence, (, type, ), ;, Context, rhsContext, =, getContextForNoInOperator, (]
[int, p, =, NodeUtil, ., precedence, (, type, ), ;, Context, rhsContext, =, getContextForNoInOperator, (, context, ), ;, if, (]
[int, p, =, NodeUtil, ., precedence, (, type, ), ;, Context, rhsContext, =, getContextForNoInOperator, (, context, ), ;, if, (]
[int, p, =, NodeUtil, ., precedence, (, type, ), ;, Context, rhsContext, =, getContextForNoInOperator, (, context, ), ;, if, (]
[int, p, =, NodeUtil, ., precedence, (, type, ), ;, Context, rhsContext, =, getContextForNoInOperator, (, context, ), ;, if, (]
[(, type, ), ;, Context, rhsContext, =, getContextForNoInOperator, (, context, ), ;, if, (, last, ., getType, (, ), ==]
[), ;, Context, rhsContext, =, getContextForNoInOperator, (, context, ), ;, if, (, last, ., getType, (, ), ==, type, &&]
[), ;, Context, rhsContext, =, getContextForNoInOperator, (, context, ), ;, if, (, last, ., getType, (, ), ==, type, &&]
[=, getContextForNoInOperator, (, context, ), ;, if, (, last, ., getType, (, ), ==, type, &&, NodeUtil, ., isAssociative, (]
[), ;, if, (, last, ., getType, (, ), ==, type, &&, NodeUtil, ., isAssociative, (, type, ), ), {]
[if, (, last, ., getType, (, ), ==, type, &&, NodeUtil, ., isAssociative, (, type, ), ), {, addExpr, (]
[last, ., getType, (, ), ==, type, &&, NodeUtil, ., isAssociative, (, type, ), ), {, addExpr, (, first, ,]
[getType, (, ), ==, type, &&, NodeUtil, ., isAssociative, (, type, ), ), {, addExpr, (, first, ,, p, ,]
[==, type, &&, NodeUtil, ., isAssociative, (, type, ), ), {, addExpr, (, first, ,, p, ,, context, ), ;]
[==, type, &&, NodeUtil, ., isAssociative, (, type, ), ), {, addExpr, (, first, ,, p, ,, context, ), ;]
[., isAssociative, (, type, ), ), {, addExpr, (, first, ,, p, ,, context, ), ;, cc, ., addOp, (]
[(, type, ), ), {, addExpr, (, first, ,, p, ,, context, ), ;, cc, ., addOp, (, opstr, ,]
[), {, addExpr, (, first, ,, p, ,, context, ), ;, cc, ., addOp, (, opstr, ,, true, ), ;]
[addExpr, (, first, ,, p, ,, context, ), ;, cc, ., addOp, (, opstr, ,, true, ), ;, addExpr, (]
[first, ,, p, ,, context, ), ;, cc, ., addOp, (, opstr, ,, true, ), ;, addExpr, (, last, ,]
[p, ,, context, ), ;, cc, ., addOp, (, opstr, ,, true, ), ;, addExpr, (, last, ,, p, ,]
[addOp, (, opstr, ,, true, ), ;, addExpr, (, last, ,, p, ,, rhsContext, ), ;, }, else, if, (]
[addOp, (, opstr, ,, true, ), ;, addExpr, (, last, ,, p, ,, rhsContext, ), ;, }, else, if, (]
[addOp, (, opstr, ,, true, ), ;, addExpr, (, last, ,, p, ,, rhsContext, ), ;, }, else, if, (]
[true, ), ;, addExpr, (, last, ,, p, ,, rhsContext, ), ;, }, else, if, (, NodeUtil, ., isAssignmentOp, (]
[addExpr, (, last, ,, p, ,, rhsContext, ), ;, }, else, if, (, NodeUtil, ., isAssignmentOp, (, n, ), &&]
[addExpr, (, last, ,, p, ,, rhsContext, ), ;, }, else, if, (, NodeUtil, ., isAssignmentOp, (, n, ), &&]
[p, ,, rhsContext, ), ;, }, else, if, (, NodeUtil, ., isAssignmentOp, (, n, ), &&, NodeUtil, ., isAssignmentOp, (]
[;, }, else, if, (, NodeUtil, ., isAssignmentOp, (, n, ), &&, NodeUtil, ., isAssignmentOp, (, last, ), ), {]
[else, if, (, NodeUtil, ., isAssignmentOp, (, n, ), &&, NodeUtil, ., isAssignmentOp, (, last, ), ), {, addExpr, (]
[(, NodeUtil, ., isAssignmentOp, (, n, ), &&, NodeUtil, ., isAssignmentOp, (, last, ), ), {, addExpr, (, first, ,]
[., isAssignmentOp, (, n, ), &&, NodeUtil, ., isAssignmentOp, (, last, ), ), {, addExpr, (, first, ,, p, ,]
[n, ), &&, NodeUtil, ., isAssignmentOp, (, last, ), ), {, addExpr, (, first, ,, p, ,, context, ), ;]
[n, ), &&, NodeUtil, ., isAssignmentOp, (, last, ), ), {, addExpr, (, first, ,, p, ,, context, ), ;]
[., isAssignmentOp, (, last, ), ), {, addExpr, (, first, ,, p, ,, context, ), ;, cc, ., addOp, (]
[(, last, ), ), {, addExpr, (, first, ,, p, ,, context, ), ;, cc, ., addOp, (, opstr, ,]
[), {, addExpr, (, first, ,, p, ,, context, ), ;, cc, ., addOp, (, opstr, ,, true, ), ;]
[addExpr, (, first, ,, p, ,, context, ), ;, cc, ., addOp, (, opstr, ,, true, ), ;, addExpr, (]
[first, ,, p, ,, context, ), ;, cc, ., addOp, (, opstr, ,, true, ), ;, addExpr, (, last, ,]
[p, ,, context, ), ;, cc, ., addOp, (, opstr, ,, true, ), ;, addExpr, (, last, ,, p, ,]
[., addOp, (, opstr, ,, true, ), ;, addExpr, (, last, ,, p, ,, rhsContext, ), ;, }, else, {]
[(, opstr, ,, true, ), ;, addExpr, (, last, ,, p, ,, rhsContext, ), ;, }, else, {, unrollBinaryOperator, (]
[,, true, ), ;, addExpr, (, last, ,, p, ,, rhsContext, ), ;, }, else, {, unrollBinaryOperator, (, n, ,]
[), ;, addExpr, (, last, ,, p, ,, rhsContext, ), ;, }, else, {, unrollBinaryOperator, (, n, ,, type, ,]
[addExpr, (, last, ,, p, ,, rhsContext, ), ;, }, else, {, unrollBinaryOperator, (, n, ,, type, ,, opstr, ,]
[last, ,, p, ,, rhsContext, ), ;, }, else, {, unrollBinaryOperator, (, n, ,, type, ,, opstr, ,, context, ,]
[p, ,, rhsContext, ), ;, }, else, {, unrollBinaryOperator, (, n, ,, type, ,, opstr, ,, context, ,, rhsContext, ,]
[rhsContext, ), ;, }, else, {, unrollBinaryOperator, (, n, ,, type, ,, opstr, ,, context, ,, rhsContext, ,, p, ,]
[rhsContext, ), ;, }, else, {, unrollBinaryOperator, (, n, ,, type, ,, opstr, ,, context, ,, rhsContext, ,, p, ,]
[;, }, else, {, unrollBinaryOperator, (, n, ,, type, ,, opstr, ,, context, ,, rhsContext, ,, p, ,, p, +]
[,, type, ,, opstr, ,, context, ,, rhsContext, ,, p, ,, p, +, 1, ), ;, }, return, ;, }]
[,, type, ,, opstr, ,, context, ,, rhsContext, ,, p, ,, p, +, 1, ), ;, }, return, ;, }]
[,, context, ,, rhsContext, ,, p, ,, p, +, 1, ), ;, }, return, ;, }, cc, ., startSourceMapping, (]
[p, ,, p, +, 1, ), ;, }, return, ;, }, cc, ., startSourceMapping, (, n, ), ;, switch, (]
[1, ), ;, }, return, ;, }, cc, ., startSourceMapping, (, n, ), ;, switch, (, type, ), {, case]
[1, ), ;, }, return, ;, }, cc, ., startSourceMapping, (, n, ), ;, switch, (, type, ), {, case]
[;, }, cc, ., startSourceMapping, (, n, ), ;, switch, (, type, ), {, case, Token, ., TRY, :, {]
[;, }, cc, ., startSourceMapping, (, n, ), ;, switch, (, type, ), {, case, Token, ., TRY, :, {]
[startSourceMapping, (, n, ), ;, switch, (, type, ), {, case, Token, ., TRY, :, {, Preconditions, ., checkState, (]
[startSourceMapping, (, n, ), ;, switch, (, type, ), {, case, Token, ., TRY, :, {, Preconditions, ., checkState, (]
[startSourceMapping, (, n, ), ;, switch, (, type, ), {, case, Token, ., TRY, :, {, Preconditions, ., checkState, (]
[startSourceMapping, (, n, ), ;, switch, (, type, ), {, case, Token, ., TRY, :, {, Preconditions, ., checkState, (]
[case, Token, ., TRY, :, {, Preconditions, ., checkState, (, first, ., getNext, (, ), ., isBlock, (, ), &&]
[Token, ., TRY, :, {, Preconditions, ., checkState, (, first, ., getNext, (, ), ., isBlock, (, ), &&, !]
[Token, ., TRY, :, {, Preconditions, ., checkState, (, first, ., getNext, (, ), ., isBlock, (, ), &&, !]
[Token, ., TRY, :, {, Preconditions, ., checkState, (, first, ., getNext, (, ), ., isBlock, (, ), &&, !]
[getNext, (, ), ., isBlock, (, ), &&, !, first, ., getNext, (, ), ., hasMoreThanOneChild, (, ), ), ;]
[getNext, (, ), ., isBlock, (, ), &&, !, first, ., getNext, (, ), ., hasMoreThanOneChild, (, ), ), ;]
[isBlock, (, ), &&, !, first, ., getNext, (, ), ., hasMoreThanOneChild, (, ), ), ;, Preconditions, ., checkState, (]
[isBlock, (, ), &&, !, first, ., getNext, (, ), ., hasMoreThanOneChild, (, ), ), ;, Preconditions, ., checkState, (]
[isBlock, (, ), &&, !, first, ., getNext, (, ), ., hasMoreThanOneChild, (, ), ), ;, Preconditions, ., checkState, (]
[), &&, !, first, ., getNext, (, ), ., hasMoreThanOneChild, (, ), ), ;, Preconditions, ., checkState, (, childCount, >=]
[!, first, ., getNext, (, ), ., hasMoreThanOneChild, (, ), ), ;, Preconditions, ., checkState, (, childCount, >=, 2, &&]
[!, first, ., getNext, (, ), ., hasMoreThanOneChild, (, ), ), ;, Preconditions, ., checkState, (, childCount, >=, 2, &&]
[., getNext, (, ), ., hasMoreThanOneChild, (, ), ), ;, Preconditions, ., checkState, (, childCount, >=, 2, &&, childCount, <=]
[), ., hasMoreThanOneChild, (, ), ), ;, Preconditions, ., checkState, (, childCount, >=, 2, &&, childCount, <=, 3, ), ;]
[hasMoreThanOneChild, (, ), ), ;, Preconditions, ., checkState, (, childCount, >=, 2, &&, childCount, <=, 3, ), ;, add, (]
[), ;, Preconditions, ., checkState, (, childCount, >=, 2, &&, childCount, <=, 3, ), ;, add, (, "try", ), ;]
[Preconditions, ., checkState, (, childCount, >=, 2, &&, childCount, <=, 3, ), ;, add, (, "try", ), ;, add, (]
[checkState, (, childCount, >=, 2, &&, childCount, <=, 3, ), ;, add, (, "try", ), ;, add, (, first, ,]
[checkState, (, childCount, >=, 2, &&, childCount, <=, 3, ), ;, add, (, "try", ), ;, add, (, first, ,]
[3, ), ;, add, (, "try", ), ;, add, (, first, ,, Context, ., PRESERVE_BLOCK, ), ;, Node, catchblock, =]
[3, ), ;, add, (, "try", ), ;, add, (, first, ,, Context, ., PRESERVE_BLOCK, ), ;, Node, catchblock, =]
[3, ), ;, add, (, "try", ), ;, add, (, first, ,, Context, ., PRESERVE_BLOCK, ), ;, Node, catchblock, =]
[Context, ., PRESERVE_BLOCK, ), ;, Node, catchblock, =, first, ., getNext, (, ), ., getFirstChild, (, ), ;, if, (]
[Context, ., PRESERVE_BLOCK, ), ;, Node, catchblock, =, first, ., getNext, (, ), ., getFirstChild, (, ), ;, if, (]
[PRESERVE_BLOCK, ), ;, Node, catchblock, =, first, ., getNext, (, ), ., getFirstChild, (, ), ;, if, (, catchblock, !=]
[Node, catchblock, =, first, ., getNext, (, ), ., getFirstChild, (, ), ;, if, (, catchblock, !=, null, ), {]
[=, first, ., getNext, (, ), ., getFirstChild, (, ), ;, if, (, catchblock, !=, null, ), {, add, (]
[., getFirstChild, (, ), ;, if, (, catchblock, !=, null, ), {, add, (, catchblock, ), ;, }, if, (]
[., getFirstChild, (, ), ;, if, (, catchblock, !=, null, ), {, add, (, catchblock, ), ;, }, if, (]
[(, ), ;, if, (, catchblock, !=, null, ), {, add, (, catchblock, ), ;, }, if, (, childCount, ==]
[if, (, catchblock, !=, null, ), {, add, (, catchblock, ), ;, }, if, (, childCount, ==, 3, ), {]
[catchblock, !=, null, ), {, add, (, catchblock, ), ;, }, if, (, childCount, ==, 3, ), {, add, (]
[), {, add, (, catchblock, ), ;, }, if, (, childCount, ==, 3, ), {, add, (, "finally", ), ;]
[add, (, catchblock, ), ;, }, if, (, childCount, ==, 3, ), {, add, (, "finally", ), ;, add, (]
[catchblock, ), ;, }, if, (, childCount, ==, 3, ), {, add, (, "finally", ), ;, add, (, last, ,]
[catchblock, ), ;, }, if, (, childCount, ==, 3, ), {, add, (, "finally", ), ;, add, (, last, ,]
[{, add, (, "finally", ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, }, break, ;, }, case]
[{, add, (, "finally", ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, }, break, ;, }, case]
[), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, }, break, ;, }, case, Token, ., CATCH, :]
[), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, }, break, ;, }, case, Token, ., CATCH, :]
[last, ,, Context, ., PRESERVE_BLOCK, ), ;, }, break, ;, }, case, Token, ., CATCH, :, Preconditions, ., checkState, (]
[last, ,, Context, ., PRESERVE_BLOCK, ), ;, }, break, ;, }, case, Token, ., CATCH, :, Preconditions, ., checkState, (]
[Context, ., PRESERVE_BLOCK, ), ;, }, break, ;, }, case, Token, ., CATCH, :, Preconditions, ., checkState, (, childCount, ==]
[), ;, }, break, ;, }, case, Token, ., CATCH, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;]
[}, break, ;, }, case, Token, ., CATCH, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (]
[}, case, Token, ., CATCH, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "catch(", ), ;]
[Token, ., CATCH, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "catch(", ), ;, add, (]
[:, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "catch(", ), ;, add, (, first, ), ;]
[., checkState, (, childCount, ==, 2, ), ;, add, (, "catch(", ), ;, add, (, first, ), ;, add, (]
[childCount, ==, 2, ), ;, add, (, "catch(", ), ;, add, (, first, ), ;, add, (, ")", ), ;]
[2, ), ;, add, (, "catch(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, add, (]
[;, add, (, "catch(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, add, (, last, ,]
[;, add, (, "catch(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, add, (, last, ,]
[first, ), ;, add, (, ")", ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, break, ;, case]
[first, ), ;, add, (, ")", ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, break, ;, case]
[(, ")", ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, break, ;, case, Token, ., THROW, :]
[(, ")", ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, break, ;, case, Token, ., THROW, :]
[add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, break, ;, case, Token, ., THROW, :, Preconditions, ., checkState, (]
[add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, break, ;, case, Token, ., THROW, :, Preconditions, ., checkState, (]
[last, ,, Context, ., PRESERVE_BLOCK, ), ;, break, ;, case, Token, ., THROW, :, Preconditions, ., checkState, (, childCount, ==]
[., PRESERVE_BLOCK, ), ;, break, ;, case, Token, ., THROW, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;]
[), ;, break, ;, case, Token, ., THROW, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (]
[;, case, Token, ., THROW, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, "throw", ), ;]
[Token, ., THROW, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, "throw", ), ;, add, (]
[:, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, "throw", ), ;, add, (, first, ), ;]
[:, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, "throw", ), ;, add, (, first, ), ;]
[(, childCount, ==, 1, ), ;, add, (, "throw", ), ;, add, (, first, ), ;, cc, ., endStatement, (]
[add, (, "throw", ), ;, add, (, first, ), ;, cc, ., endStatement, (, true, ), ;, break, ;, case]
[add, (, "throw", ), ;, add, (, first, ), ;, cc, ., endStatement, (, true, ), ;, break, ;, case]
[;, add, (, first, ), ;, cc, ., endStatement, (, true, ), ;, break, ;, case, Token, ., RETURN, :]
[(, first, ), ;, cc, ., endStatement, (, true, ), ;, break, ;, case, Token, ., RETURN, :, add, (]
[., endStatement, (, true, ), ;, break, ;, case, Token, ., RETURN, :, add, (, "return", ), ;, if, (]
[., endStatement, (, true, ), ;, break, ;, case, Token, ., RETURN, :, add, (, "return", ), ;, if, (]
[(, true, ), ;, break, ;, case, Token, ., RETURN, :, add, (, "return", ), ;, if, (, childCount, ==]
[;, break, ;, case, Token, ., RETURN, :, add, (, "return", ), ;, if, (, childCount, ==, 1, ), {]
[;, case, Token, ., RETURN, :, add, (, "return", ), ;, if, (, childCount, ==, 1, ), {, add, (]
[add, (, "return", ), ;, if, (, childCount, ==, 1, ), {, add, (, first, ), ;, }, else, {]
[add, (, "return", ), ;, if, (, childCount, ==, 1, ), {, add, (, first, ), ;, }, else, {]
[;, if, (, childCount, ==, 1, ), {, add, (, first, ), ;, }, else, {, Preconditions, ., checkState, (]
[;, if, (, childCount, ==, 1, ), {, add, (, first, ), ;, }, else, {, Preconditions, ., checkState, (]
[(, childCount, ==, 1, ), {, add, (, first, ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==]
[), {, add, (, first, ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, }]
[), {, add, (, first, ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, }]
[{, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, }, cc, ., endStatement, (, ), ;, break, ;, case]
[{, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, }, cc, ., endStatement, (, ), ;, break, ;, case]
[==, 0, ), ;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., VAR, :, if, (]
[==, 0, ), ;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., VAR, :, if, (]
[), ;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., VAR, :, if, (, first, !=]
[cc, ., endStatement, (, ), ;, break, ;, case, Token, ., VAR, :, if, (, first, !=, null, ), {]
[endStatement, (, ), ;, break, ;, case, Token, ., VAR, :, if, (, first, !=, null, ), {, add, (]
[;, break, ;, case, Token, ., VAR, :, if, (, first, !=, null, ), {, add, (, "var ", ), ;]
[;, case, Token, ., VAR, :, if, (, first, !=, null, ), {, add, (, "var ", ), ;, addList, (]
[Token, ., VAR, :, if, (, first, !=, null, ), {, add, (, "var ", ), ;, addList, (, first, ,]
[VAR, :, if, (, first, !=, null, ), {, add, (, "var ", ), ;, addList, (, first, ,, false, ,]
[if, (, first, !=, null, ), {, add, (, "var ", ), ;, addList, (, first, ,, false, ,, getContextForNoInOperator, (]
[(, "var ", ), ;, addList, (, first, ,, false, ,, getContextForNoInOperator, (, context, ), ), ;, }, break, ;, case]
[(, "var ", ), ;, addList, (, first, ,, false, ,, getContextForNoInOperator, (, context, ), ), ;, }, break, ;, case]
[addList, (, first, ,, false, ,, getContextForNoInOperator, (, context, ), ), ;, }, break, ;, case, Token, ., LABEL_NAME, :]
[addList, (, first, ,, false, ,, getContextForNoInOperator, (, context, ), ), ;, }, break, ;, case, Token, ., LABEL_NAME, :]
[false, ,, getContextForNoInOperator, (, context, ), ), ;, }, break, ;, case, Token, ., LABEL_NAME, :, Preconditions, ., checkState, (]
[,, getContextForNoInOperator, (, context, ), ), ;, }, break, ;, case, Token, ., LABEL_NAME, :, Preconditions, ., checkState, (, !]
[,, getContextForNoInOperator, (, context, ), ), ;, }, break, ;, case, Token, ., LABEL_NAME, :, Preconditions, ., checkState, (, !]
[,, getContextForNoInOperator, (, context, ), ), ;, }, break, ;, case, Token, ., LABEL_NAME, :, Preconditions, ., checkState, (, !]
[Token, ., LABEL_NAME, :, Preconditions, ., checkState, (, !, n, ., getString, (, ), ., isEmpty, (, ), ), ;]
[LABEL_NAME, :, Preconditions, ., checkState, (, !, n, ., getString, (, ), ., isEmpty, (, ), ), ;, addIdentifier, (]
[LABEL_NAME, :, Preconditions, ., checkState, (, !, n, ., getString, (, ), ., isEmpty, (, ), ), ;, addIdentifier, (]
[(, ), ., isEmpty, (, ), ), ;, addIdentifier, (, n, ., getString, (, ), ), ;, break, ;, case]
[(, ), ., isEmpty, (, ), ), ;, addIdentifier, (, n, ., getString, (, ), ), ;, break, ;, case]
[), ;, addIdentifier, (, n, ., getString, (, ), ), ;, break, ;, case, Token, ., NAME, :, if, (]
[), ;, addIdentifier, (, n, ., getString, (, ), ), ;, break, ;, case, Token, ., NAME, :, if, (]
[), ;, addIdentifier, (, n, ., getString, (, ), ), ;, break, ;, case, Token, ., NAME, :, if, (]
[addIdentifier, (, n, ., getString, (, ), ), ;, break, ;, case, Token, ., NAME, :, if, (, first, ==]
[n, ., getString, (, ), ), ;, break, ;, case, Token, ., NAME, :, if, (, first, ==, null, ||]
[n, ., getString, (, ), ), ;, break, ;, case, Token, ., NAME, :, if, (, first, ==, null, ||]
[break, ;, case, Token, ., NAME, :, if, (, first, ==, null, ||, first, ., isEmpty, (, ), ), {]
[case, Token, ., NAME, :, if, (, first, ==, null, ||, first, ., isEmpty, (, ), ), {, addIdentifier, (]
[case, Token, ., NAME, :, if, (, first, ==, null, ||, first, ., isEmpty, (, ), ), {, addIdentifier, (]
[||, first, ., isEmpty, (, ), ), {, addIdentifier, (, n, ., getString, (, ), ), ;, }, else, {]
[||, first, ., isEmpty, (, ), ), {, addIdentifier, (, n, ., getString, (, ), ), ;, }, else, {]
[(, ), ), {, addIdentifier, (, n, ., getString, (, ), ), ;, }, else, {, Preconditions, ., checkState, (]
[(, ), ), {, addIdentifier, (, n, ., getString, (, ), ), ;, }, else, {, Preconditions, ., checkState, (]
[), {, addIdentifier, (, n, ., getString, (, ), ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==]
[(, n, ., getString, (, ), ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;]
[., getString, (, ), ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, addIdentifier, (]
[., getString, (, ), ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, addIdentifier, (]
[else, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, addIdentifier, (, n, ., getString, (, ), ), ;]
[else, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, addIdentifier, (, n, ., getString, (, ), ), ;]
[checkState, (, childCount, ==, 1, ), ;, addIdentifier, (, n, ., getString, (, ), ), ;, cc, ., addOp, (]
[childCount, ==, 1, ), ;, addIdentifier, (, n, ., getString, (, ), ), ;, cc, ., addOp, (, "=", ,]
[addIdentifier, (, n, ., getString, (, ), ), ;, cc, ., addOp, (, "=", ,, true, ), ;, if, (]
[addIdentifier, (, n, ., getString, (, ), ), ;, cc, ., addOp, (, "=", ,, true, ), ;, if, (]
[), ;, cc, ., addOp, (, "=", ,, true, ), ;, if, (, first, ., isComma, (, ), ), {]
[cc, ., addOp, (, "=", ,, true, ), ;, if, (, first, ., isComma, (, ), ), {, addExpr, (]
[addOp, (, "=", ,, true, ), ;, if, (, first, ., isComma, (, ), ), {, addExpr, (, first, ,]
[addOp, (, "=", ,, true, ), ;, if, (, first, ., isComma, (, ), ), {, addExpr, (, first, ,]
[true, ), ;, if, (, first, ., isComma, (, ), ), {, addExpr, (, first, ,, NodeUtil, ., precedence, (]
[true, ), ;, if, (, first, ., isComma, (, ), ), {, addExpr, (, first, ,, NodeUtil, ., precedence, (]
[first, ., isComma, (, ), ), {, addExpr, (, first, ,, NodeUtil, ., precedence, (, Token, ., ASSIGN, ), ,]
[first, ., isComma, (, ), ), {, addExpr, (, first, ,, NodeUtil, ., precedence, (, Token, ., ASSIGN, ), ,]
[(, first, ,, NodeUtil, ., precedence, (, Token, ., ASSIGN, ), ,, Context, ., OTHER, ), ;, }, else, {]
[,, NodeUtil, ., precedence, (, Token, ., ASSIGN, ), ,, Context, ., OTHER, ), ;, }, else, {, addExpr, (]
[., precedence, (, Token, ., ASSIGN, ), ,, Context, ., OTHER, ), ;, }, else, {, addExpr, (, first, ,]
[(, Token, ., ASSIGN, ), ,, Context, ., OTHER, ), ;, }, else, {, addExpr, (, first, ,, 0, ,]
[., ASSIGN, ), ,, Context, ., OTHER, ), ;, }, else, {, addExpr, (, first, ,, 0, ,, getContextForNoInOperator, (]
[}, else, {, addExpr, (, first, ,, 0, ,, getContextForNoInOperator, (, context, ), ), ;, }, }, break, ;, case]
[}, else, {, addExpr, (, first, ,, 0, ,, getContextForNoInOperator, (, context, ), ), ;, }, }, break, ;, case]
[(, first, ,, 0, ,, getContextForNoInOperator, (, context, ), ), ;, }, }, break, ;, case, Token, ., ARRAYLIT, :]
[,, 0, ,, getContextForNoInOperator, (, context, ), ), ;, }, }, break, ;, case, Token, ., ARRAYLIT, :, add, (]
[getContextForNoInOperator, (, context, ), ), ;, }, }, break, ;, case, Token, ., ARRAYLIT, :, add, (, "[", ), ;]
[context, ), ), ;, }, }, break, ;, case, Token, ., ARRAYLIT, :, add, (, "[", ), ;, addArrayList, (]
[;, }, }, break, ;, case, Token, ., ARRAYLIT, :, add, (, "[", ), ;, addArrayList, (, first, ), ;]
[}, break, ;, case, Token, ., ARRAYLIT, :, add, (, "[", ), ;, addArrayList, (, first, ), ;, add, (]
[ARRAYLIT, :, add, (, "[", ), ;, addArrayList, (, first, ), ;, add, (, "]", ), ;, break, ;, case]
[ARRAYLIT, :, add, (, "[", ), ;, addArrayList, (, first, ), ;, add, (, "]", ), ;, break, ;, case]
["[", ), ;, addArrayList, (, first, ), ;, add, (, "]", ), ;, break, ;, case, Token, ., PARAM_LIST, :]
[;, addArrayList, (, first, ), ;, add, (, "]", ), ;, break, ;, case, Token, ., PARAM_LIST, :, add, (]
[first, ), ;, add, (, "]", ), ;, break, ;, case, Token, ., PARAM_LIST, :, add, (, "(", ), ;]
[;, add, (, "]", ), ;, break, ;, case, Token, ., PARAM_LIST, :, add, (, "(", ), ;, addList, (]
["]", ), ;, break, ;, case, Token, ., PARAM_LIST, :, add, (, "(", ), ;, addList, (, first, ), ;]
[;, break, ;, case, Token, ., PARAM_LIST, :, add, (, "(", ), ;, addList, (, first, ), ;, add, (]
[PARAM_LIST, :, add, (, "(", ), ;, addList, (, first, ), ;, add, (, ")", ), ;, break, ;, case]
[PARAM_LIST, :, add, (, "(", ), ;, addList, (, first, ), ;, add, (, ")", ), ;, break, ;, case]
["(", ), ;, addList, (, first, ), ;, add, (, ")", ), ;, break, ;, case, Token, ., COMMA, :]
["(", ), ;, addList, (, first, ), ;, add, (, ")", ), ;, break, ;, case, Token, ., COMMA, :]
[(, first, ), ;, add, (, ")", ), ;, break, ;, case, Token, ., COMMA, :, Preconditions, ., checkState, (]
[(, first, ), ;, add, (, ")", ), ;, break, ;, case, Token, ., COMMA, :, Preconditions, ., checkState, (]
[), ;, add, (, ")", ), ;, break, ;, case, Token, ., COMMA, :, Preconditions, ., checkState, (, childCount, ==]
[(, ")", ), ;, break, ;, case, Token, ., COMMA, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;]
[), ;, break, ;, case, Token, ., COMMA, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, unrollBinaryOperator, (]
[break, ;, case, Token, ., COMMA, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, unrollBinaryOperator, (, n, ,]
[break, ;, case, Token, ., COMMA, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, unrollBinaryOperator, (, n, ,]
[., COMMA, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, unrollBinaryOperator, (, n, ,, Token, ., COMMA, ,]
[:, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, unrollBinaryOperator, (, n, ,, Token, ., COMMA, ,, ",", ,]
[., checkState, (, childCount, ==, 2, ), ;, unrollBinaryOperator, (, n, ,, Token, ., COMMA, ,, ",", ,, context, ,]
[., checkState, (, childCount, ==, 2, ), ;, unrollBinaryOperator, (, n, ,, Token, ., COMMA, ,, ",", ,, context, ,]
[==, 2, ), ;, unrollBinaryOperator, (, n, ,, Token, ., COMMA, ,, ",", ,, context, ,, Context, ., OTHER, ,]
[), ;, unrollBinaryOperator, (, n, ,, Token, ., COMMA, ,, ",", ,, context, ,, Context, ., OTHER, ,, 0, ,]
[Token, ., COMMA, ,, ",", ,, context, ,, Context, ., OTHER, ,, 0, ,, 0, ), ;, break, ;, case]
[Token, ., COMMA, ,, ",", ,, context, ,, Context, ., OTHER, ,, 0, ,, 0, ), ;, break, ;, case]
[",", ,, context, ,, Context, ., OTHER, ,, 0, ,, 0, ), ;, break, ;, case, Token, ., NUMBER, :]
[",", ,, context, ,, Context, ., OTHER, ,, 0, ,, 0, ), ;, break, ;, case, Token, ., NUMBER, :]
[Context, ., OTHER, ,, 0, ,, 0, ), ;, break, ;, case, Token, ., NUMBER, :, Preconditions, ., checkState, (]
[Context, ., OTHER, ,, 0, ,, 0, ), ;, break, ;, case, Token, ., NUMBER, :, Preconditions, ., checkState, (]
[OTHER, ,, 0, ,, 0, ), ;, break, ;, case, Token, ., NUMBER, :, Preconditions, ., checkState, (, childCount, ==]
[,, 0, ), ;, break, ;, case, Token, ., NUMBER, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;]
[,, 0, ), ;, break, ;, case, Token, ., NUMBER, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;]
[break, ;, case, Token, ., NUMBER, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addNumber, (]
[break, ;, case, Token, ., NUMBER, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addNumber, (]
[(, childCount, ==, 0, ), ;, cc, ., addNumber, (, n, ., getDouble, (, ), ), ;, break, ;, case]
[(, childCount, ==, 0, ), ;, cc, ., addNumber, (, n, ., getDouble, (, ), ), ;, break, ;, case]
[;, cc, ., addNumber, (, n, ., getDouble, (, ), ), ;, break, ;, case, Token, ., TYPEOF, :, case]
[;, cc, ., addNumber, (, n, ., getDouble, (, ), ), ;, break, ;, case, Token, ., TYPEOF, :, case]
[n, ., getDouble, (, ), ), ;, break, ;, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case]
[n, ., getDouble, (, ), ), ;, break, ;, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case]
[), ;, break, ;, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT, :, case]
[), ;, break, ;, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT, :, case]
[Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case]
[Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case]
[Token, ., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, {]
[Token, ., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, {]
[case, Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, {, Preconditions, ., checkState, (]
[case, Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, {, Preconditions, ., checkState, (]
[., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, {, Preconditions, ., checkState, (, childCount, ==]
[case, Token, ., BITNOT, :, case, Token, ., POS, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;]
[case, Token, ., BITNOT, :, case, Token, ., POS, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;]
[:, case, Token, ., POS, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, cc, ., addOp, (]
[:, case, Token, ., POS, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, cc, ., addOp, (]
[POS, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (]
[Preconditions, ., checkState, (, childCount, ==, 1, ), ;, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,]
[(, childCount, ==, 1, ), ;, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,, false, ), ;]
[==, 1, ), ;, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr, (]
[), ;, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr, (, first, ,]
[), ;, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr, (, first, ,]
[addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (]
[., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,]
[., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,]
[addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, Context, ., OTHER, ), ;, break, ;, }, case]
[addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, Context, ., OTHER, ), ;, break, ;, }, case]
[., precedence, (, type, ), ,, Context, ., OTHER, ), ;, break, ;, }, case, Token, ., NEG, :, {]
[., precedence, (, type, ), ,, Context, ., OTHER, ), ;, break, ;, }, case, Token, ., NEG, :, {]
[), ,, Context, ., OTHER, ), ;, break, ;, }, case, Token, ., NEG, :, {, Preconditions, ., checkState, (]
[), ,, Context, ., OTHER, ), ;, break, ;, }, case, Token, ., NEG, :, {, Preconditions, ., checkState, (]
[Context, ., OTHER, ), ;, break, ;, }, case, Token, ., NEG, :, {, Preconditions, ., checkState, (, childCount, ==]
[break, ;, }, case, Token, ., NEG, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, if, (]
[break, ;, }, case, Token, ., NEG, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, if, (]
[break, ;, }, case, Token, ., NEG, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, if, (]
[checkState, (, childCount, ==, 1, ), ;, if, (, n, ., getFirstChild, (, ), ., isNumber, (, ), ), {]
[checkState, (, childCount, ==, 1, ), ;, if, (, n, ., getFirstChild, (, ), ., isNumber, (, ), ), {]
[1, ), ;, if, (, n, ., getFirstChild, (, ), ., isNumber, (, ), ), {, cc, ., addNumber, (]
[), ;, if, (, n, ., getFirstChild, (, ), ., isNumber, (, ), ), {, cc, ., addNumber, (, -]
[), ;, if, (, n, ., getFirstChild, (, ), ., isNumber, (, ), ), {, cc, ., addNumber, (, -]
[), ;, if, (, n, ., getFirstChild, (, ), ., isNumber, (, ), ), {, cc, ., addNumber, (, -]
[{, cc, ., addNumber, (, -, n, ., getFirstChild, (, ), ., getDouble, (, ), ), ;, }, else, {]
[{, cc, ., addNumber, (, -, n, ., getFirstChild, (, ), ., getDouble, (, ), ), ;, }, else, {]
[(, -, n, ., getFirstChild, (, ), ., getDouble, (, ), ), ;, }, else, {, cc, ., addOp, (]
[(, -, n, ., getFirstChild, (, ), ., getDouble, (, ), ), ;, }, else, {, cc, ., addOp, (]
[getFirstChild, (, ), ., getDouble, (, ), ), ;, }, else, {, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (]
[., getDouble, (, ), ), ;, }, else, {, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,]
[), ), ;, }, else, {, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,, false, ), ;]
[;, }, else, {, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr, (]
[else, {, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr, (, first, ,]
[else, {, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr, (, first, ,]
[addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (]
[., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,]
[., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,]
[(, first, ,, NodeUtil, ., precedence, (, type, ), ,, Context, ., OTHER, ), ;, }, break, ;, }, case]
[(, first, ,, NodeUtil, ., precedence, (, type, ), ,, Context, ., OTHER, ), ;, }, break, ;, }, case]
[precedence, (, type, ), ,, Context, ., OTHER, ), ;, }, break, ;, }, case, Token, ., HOOK, :, {]
[precedence, (, type, ), ,, Context, ., OTHER, ), ;, }, break, ;, }, case, Token, ., HOOK, :, {]
[,, Context, ., OTHER, ), ;, }, break, ;, }, case, Token, ., HOOK, :, {, Preconditions, ., checkState, (]
[,, Context, ., OTHER, ), ;, }, break, ;, }, case, Token, ., HOOK, :, {, Preconditions, ., checkState, (]
[., OTHER, ), ;, }, break, ;, }, case, Token, ., HOOK, :, {, Preconditions, ., checkState, (, childCount, ==]
[;, }, case, Token, ., HOOK, :, {, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, int, p, =]
[;, }, case, Token, ., HOOK, :, {, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, int, p, =]
[., HOOK, :, {, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, int, p, =, NodeUtil, ., precedence, (]
[{, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, int, p, =, NodeUtil, ., precedence, (, type, ), ;]
[., checkState, (, childCount, ==, 3, ), ;, int, p, =, NodeUtil, ., precedence, (, type, ), ;, addExpr, (]
[(, childCount, ==, 3, ), ;, int, p, =, NodeUtil, ., precedence, (, type, ), ;, addExpr, (, first, ,]
[(, childCount, ==, 3, ), ;, int, p, =, NodeUtil, ., precedence, (, type, ), ;, addExpr, (, first, ,]
[==, 3, ), ;, int, p, =, NodeUtil, ., precedence, (, type, ), ;, addExpr, (, first, ,, p, +]
[), ;, int, p, =, NodeUtil, ., precedence, (, type, ), ;, addExpr, (, first, ,, p, +, 1, ,]
[p, =, NodeUtil, ., precedence, (, type, ), ;, addExpr, (, first, ,, p, +, 1, ,, context, ), ;]
[p, =, NodeUtil, ., precedence, (, type, ), ;, addExpr, (, first, ,, p, +, 1, ,, context, ), ;]
[precedence, (, type, ), ;, addExpr, (, first, ,, p, +, 1, ,, context, ), ;, cc, ., addOp, (]
[type, ), ;, addExpr, (, first, ,, p, +, 1, ,, context, ), ;, cc, ., addOp, (, "?", ,]
[addExpr, (, first, ,, p, +, 1, ,, context, ), ;, cc, ., addOp, (, "?", ,, true, ), ;]
[first, ,, p, +, 1, ,, context, ), ;, cc, ., addOp, (, "?", ,, true, ), ;, addExpr, (]
[first, ,, p, +, 1, ,, context, ), ;, cc, ., addOp, (, "?", ,, true, ), ;, addExpr, (]
[context, ), ;, cc, ., addOp, (, "?", ,, true, ), ;, addExpr, (, first, ., getNext, (, ), ,]
[;, cc, ., addOp, (, "?", ,, true, ), ;, addExpr, (, first, ., getNext, (, ), ,, 1, ,]
[;, cc, ., addOp, (, "?", ,, true, ), ;, addExpr, (, first, ., getNext, (, ), ,, 1, ,]
["?", ,, true, ), ;, addExpr, (, first, ., getNext, (, ), ,, 1, ,, Context, ., OTHER, ), ;]
["?", ,, true, ), ;, addExpr, (, first, ., getNext, (, ), ,, 1, ,, Context, ., OTHER, ), ;]
[;, addExpr, (, first, ., getNext, (, ), ,, 1, ,, Context, ., OTHER, ), ;, cc, ., addOp, (]
[(, first, ., getNext, (, ), ,, 1, ,, Context, ., OTHER, ), ;, cc, ., addOp, (, ":", ,]
[getNext, (, ), ,, 1, ,, Context, ., OTHER, ), ;, cc, ., addOp, (, ":", ,, true, ), ;]
[), ,, 1, ,, Context, ., OTHER, ), ;, cc, ., addOp, (, ":", ,, true, ), ;, addExpr, (]
[1, ,, Context, ., OTHER, ), ;, cc, ., addOp, (, ":", ,, true, ), ;, addExpr, (, last, ,]
[Context, ., OTHER, ), ;, cc, ., addOp, (, ":", ,, true, ), ;, addExpr, (, last, ,, 1, ,]
[Context, ., OTHER, ), ;, cc, ., addOp, (, ":", ,, true, ), ;, addExpr, (, last, ,, 1, ,]
[":", ,, true, ), ;, addExpr, (, last, ,, 1, ,, Context, ., OTHER, ), ;, break, ;, }, case]
[":", ,, true, ), ;, addExpr, (, last, ,, 1, ,, Context, ., OTHER, ), ;, break, ;, }, case]
[(, last, ,, 1, ,, Context, ., OTHER, ), ;, break, ;, }, case, Token, ., REGEXP, :, if, (]
[(, last, ,, 1, ,, Context, ., OTHER, ), ;, break, ;, }, case, Token, ., REGEXP, :, if, (]
[last, ,, 1, ,, Context, ., OTHER, ), ;, break, ;, }, case, Token, ., REGEXP, :, if, (, !]
[last, ,, 1, ,, Context, ., OTHER, ), ;, break, ;, }, case, Token, ., REGEXP, :, if, (, !]
[OTHER, ), ;, break, ;, }, case, Token, ., REGEXP, :, if, (, !, first, ., isString, (, ), ||]
[), ;, break, ;, }, case, Token, ., REGEXP, :, if, (, !, first, ., isString, (, ), ||, !]
[), ;, break, ;, }, case, Token, ., REGEXP, :, if, (, !, first, ., isString, (, ), ||, !]
[REGEXP, :, if, (, !, first, ., isString, (, ), ||, !, last, ., isString, (, ), ), {, throw]
[(, !, first, ., isString, (, ), ||, !, last, ., isString, (, ), ), {, throw, new, Error, (]
[||, !, last, ., isString, (, ), ), {, throw, new, Error, (, "Expected children to be strings", ), ;, }, String, regexp, =]
[last, ., isString, (, ), ), {, throw, new, Error, (, "Expected children to be strings", ), ;, }, String, regexp, =, regexpEscape, (]
[last, ., isString, (, ), ), {, throw, new, Error, (, "Expected children to be strings", ), ;, }, String, regexp, =, regexpEscape, (]
[{, throw, new, Error, (, "Expected children to be strings", ), ;, }, String, regexp, =, regexpEscape, (, first, ., getString, (, ), ,]
["Expected children to be strings", ), ;, }, String, regexp, =, regexpEscape, (, first, ., getString, (, ), ,, outputCharsetEncoder, ), ;, if, (]
["Expected children to be strings", ), ;, }, String, regexp, =, regexpEscape, (, first, ., getString, (, ), ,, outputCharsetEncoder, ), ;, if, (]
[;, }, String, regexp, =, regexpEscape, (, first, ., getString, (, ), ,, outputCharsetEncoder, ), ;, if, (, childCount, ==]
[regexp, =, regexpEscape, (, first, ., getString, (, ), ,, outputCharsetEncoder, ), ;, if, (, childCount, ==, 2, ), {]
[regexpEscape, (, first, ., getString, (, ), ,, outputCharsetEncoder, ), ;, if, (, childCount, ==, 2, ), {, add, (]
[regexpEscape, (, first, ., getString, (, ), ,, outputCharsetEncoder, ), ;, if, (, childCount, ==, 2, ), {, add, (]
[first, ., getString, (, ), ,, outputCharsetEncoder, ), ;, if, (, childCount, ==, 2, ), {, add, (, regexp, +]
[first, ., getString, (, ), ,, outputCharsetEncoder, ), ;, if, (, childCount, ==, 2, ), {, add, (, regexp, +]
[(, childCount, ==, 2, ), {, add, (, regexp, +, last, ., getString, (, ), ), ;, }, else, {]
[(, childCount, ==, 2, ), {, add, (, regexp, +, last, ., getString, (, ), ), ;, }, else, {]
[), {, add, (, regexp, +, last, ., getString, (, ), ), ;, }, else, {, Preconditions, ., checkState, (]
[), {, add, (, regexp, +, last, ., getString, (, ), ), ;, }, else, {, Preconditions, ., checkState, (]
[add, (, regexp, +, last, ., getString, (, ), ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==]
[+, last, ., getString, (, ), ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;]
[., getString, (, ), ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (]
[else, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, regexp, ), ;, }, break, ;, case]
[else, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, regexp, ), ;, }, break, ;, case]
[childCount, ==, 1, ), ;, add, (, regexp, ), ;, }, break, ;, case, Token, ., FUNCTION, :, if, (]
[childCount, ==, 1, ), ;, add, (, regexp, ), ;, }, break, ;, case, Token, ., FUNCTION, :, if, (]
[childCount, ==, 1, ), ;, add, (, regexp, ), ;, }, break, ;, case, Token, ., FUNCTION, :, if, (]
[(, regexp, ), ;, }, break, ;, case, Token, ., FUNCTION, :, if, (, n, ., getClass, (, ), !=]
[;, case, Token, ., FUNCTION, :, if, (, n, ., getClass, (, ), !=, Node, ., class, ), {, throw]
[., FUNCTION, :, if, (, n, ., getClass, (, ), !=, Node, ., class, ), {, throw, new, Error, (]
[(, n, ., getClass, (, ), !=, Node, ., class, ), {, throw, new, Error, (, "Unexpected Node subclass.", ), ;, }]
[(, n, ., getClass, (, ), !=, Node, ., class, ), {, throw, new, Error, (, "Unexpected Node subclass.", ), ;, }]
[(, ), !=, Node, ., class, ), {, throw, new, Error, (, "Unexpected Node subclass.", ), ;, }, Preconditions, ., checkState, (]
[(, ), !=, Node, ., class, ), {, throw, new, Error, (, "Unexpected Node subclass.", ), ;, }, Preconditions, ., checkState, (]
[!=, Node, ., class, ), {, throw, new, Error, (, "Unexpected Node subclass.", ), ;, }, Preconditions, ., checkState, (, childCount, ==]
[throw, new, Error, (, "Unexpected Node subclass.", ), ;, }, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, boolean, funcNeedsParens, =]
[new, Error, (, "Unexpected Node subclass.", ), ;, }, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, boolean, funcNeedsParens, =, (]
[new, Error, (, "Unexpected Node subclass.", ), ;, }, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, boolean, funcNeedsParens, =, (]
[(, "Unexpected Node subclass.", ), ;, }, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, boolean, funcNeedsParens, =, (, context, ==]
[(, "Unexpected Node subclass.", ), ;, }, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, boolean, funcNeedsParens, =, (, context, ==]
[checkState, (, childCount, ==, 3, ), ;, boolean, funcNeedsParens, =, (, context, ==, Context, ., START_OF_EXPR, ), ;, if, (]
[==, 3, ), ;, boolean, funcNeedsParens, =, (, context, ==, Context, ., START_OF_EXPR, ), ;, if, (, funcNeedsParens, ), {]
[), ;, boolean, funcNeedsParens, =, (, context, ==, Context, ., START_OF_EXPR, ), ;, if, (, funcNeedsParens, ), {, add, (]
[=, (, context, ==, Context, ., START_OF_EXPR, ), ;, if, (, funcNeedsParens, ), {, add, (, "(", ), ;, }]
[context, ==, Context, ., START_OF_EXPR, ), ;, if, (, funcNeedsParens, ), {, add, (, "(", ), ;, }, add, (]
[., START_OF_EXPR, ), ;, if, (, funcNeedsParens, ), {, add, (, "(", ), ;, }, add, (, "function", ), ;]
[), ;, if, (, funcNeedsParens, ), {, add, (, "(", ), ;, }, add, (, "function", ), ;, add, (]
[(, funcNeedsParens, ), {, add, (, "(", ), ;, }, add, (, "function", ), ;, add, (, first, ), ;]
[), {, add, (, "(", ), ;, }, add, (, "function", ), ;, add, (, first, ), ;, add, (]
[), {, add, (, "(", ), ;, }, add, (, "function", ), ;, add, (, first, ), ;, add, (]
[}, add, (, "function", ), ;, add, (, first, ), ;, add, (, first, ., getNext, (, ), ), ;]
[(, "function", ), ;, add, (, first, ), ;, add, (, first, ., getNext, (, ), ), ;, add, (]
[), ;, add, (, first, ), ;, add, (, first, ., getNext, (, ), ), ;, add, (, last, ,]
[), ;, add, (, first, ), ;, add, (, first, ., getNext, (, ), ), ;, add, (, last, ,]
[), ;, add, (, first, ., getNext, (, ), ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;]
[), ;, add, (, first, ., getNext, (, ), ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;]
[first, ., getNext, (, ), ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, cc, ., endFunction, (]
[first, ., getNext, (, ), ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, cc, ., endFunction, (]
[getNext, (, ), ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, cc, ., endFunction, (, context, ==]
[getNext, (, ), ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, cc, ., endFunction, (, context, ==]
[last, ,, Context, ., PRESERVE_BLOCK, ), ;, cc, ., endFunction, (, context, ==, Context, ., STATEMENT, ), ;, if, (]
[., PRESERVE_BLOCK, ), ;, cc, ., endFunction, (, context, ==, Context, ., STATEMENT, ), ;, if, (, funcNeedsParens, ), {]
[), ;, cc, ., endFunction, (, context, ==, Context, ., STATEMENT, ), ;, if, (, funcNeedsParens, ), {, add, (]
[==, Context, ., STATEMENT, ), ;, if, (, funcNeedsParens, ), {, add, (, ")", ), ;, }, break, ;, case]
[==, Context, ., STATEMENT, ), ;, if, (, funcNeedsParens, ), {, add, (, ")", ), ;, }, break, ;, case]
[;, if, (, funcNeedsParens, ), {, add, (, ")", ), ;, }, break, ;, case, Token, ., GETTER_DEF, :, case]
[;, if, (, funcNeedsParens, ), {, add, (, ")", ), ;, }, break, ;, case, Token, ., GETTER_DEF, :, case]
[), {, add, (, ")", ), ;, }, break, ;, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :]
[), {, add, (, ")", ), ;, }, break, ;, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :]
[")", ), ;, }, break, ;, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, Preconditions, ., checkState, (]
[")", ), ;, }, break, ;, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, Preconditions, ., checkState, (]
[")", ), ;, }, break, ;, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, Preconditions, ., checkState, (]
[case, Token, ., SETTER_DEF, :, Preconditions, ., checkState, (, n, ., getParent, (, ), ., isObjectLit, (, ), ), ;]
[case, Token, ., SETTER_DEF, :, Preconditions, ., checkState, (, n, ., getParent, (, ), ., isObjectLit, (, ), ), ;]
[:, Preconditions, ., checkState, (, n, ., getParent, (, ), ., isObjectLit, (, ), ), ;, Preconditions, ., checkState, (]
[:, Preconditions, ., checkState, (, n, ., getParent, (, ), ., isObjectLit, (, ), ), ;, Preconditions, ., checkState, (]
[., checkState, (, n, ., getParent, (, ), ., isObjectLit, (, ), ), ;, Preconditions, ., checkState, (, childCount, ==]
[n, ., getParent, (, ), ., isObjectLit, (, ), ), ;, Preconditions, ., checkState, (, childCount, ==, 1, ), ;]
[n, ., getParent, (, ), ., isObjectLit, (, ), ), ;, Preconditions, ., checkState, (, childCount, ==, 1, ), ;]
[), ., isObjectLit, (, ), ), ;, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, Preconditions, ., checkState, (]
[), ., isObjectLit, (, ), ), ;, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, Preconditions, ., checkState, (]
[Preconditions, ., checkState, (, childCount, ==, 1, ), ;, Preconditions, ., checkState, (, first, ., isFunction, (, ), ), ;]
[Preconditions, ., checkState, (, childCount, ==, 1, ), ;, Preconditions, ., checkState, (, first, ., isFunction, (, ), ), ;]
[childCount, ==, 1, ), ;, Preconditions, ., checkState, (, first, ., isFunction, (, ), ), ;, Preconditions, ., checkState, (]
[childCount, ==, 1, ), ;, Preconditions, ., checkState, (, first, ., isFunction, (, ), ), ;, Preconditions, ., checkState, (]
[childCount, ==, 1, ), ;, Preconditions, ., checkState, (, first, ., isFunction, (, ), ), ;, Preconditions, ., checkState, (]
[childCount, ==, 1, ), ;, Preconditions, ., checkState, (, first, ., isFunction, (, ), ), ;, Preconditions, ., checkState, (]
[., checkState, (, first, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, ), ), ;, if, (]
[., checkState, (, first, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, ), ), ;, if, (]
[(, first, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, ), ), ;, if, (, type, ==]
[(, first, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, ), ), ;, if, (, type, ==]
[), ., getString, (, ), ., isEmpty, (, ), ), ;, if, (, type, ==, Token, ., GETTER_DEF, ), {]
[), ., getString, (, ), ., isEmpty, (, ), ), ;, if, (, type, ==, Token, ., GETTER_DEF, ), {]
[), ., isEmpty, (, ), ), ;, if, (, type, ==, Token, ., GETTER_DEF, ), {, Preconditions, ., checkState, (]
[., isEmpty, (, ), ), ;, if, (, type, ==, Token, ., GETTER_DEF, ), {, Preconditions, ., checkState, (, !]
[., isEmpty, (, ), ), ;, if, (, type, ==, Token, ., GETTER_DEF, ), {, Preconditions, ., checkState, (, !]
[., isEmpty, (, ), ), ;, if, (, type, ==, Token, ., GETTER_DEF, ), {, Preconditions, ., checkState, (, !]
[), ;, if, (, type, ==, Token, ., GETTER_DEF, ), {, Preconditions, ., checkState, (, !, first, ., getChildAtIndex, (]
[GETTER_DEF, ), {, Preconditions, ., checkState, (, !, first, ., getChildAtIndex, (, 1, ), ., hasChildren, (, ), ), ;]
[{, Preconditions, ., checkState, (, !, first, ., getChildAtIndex, (, 1, ), ., hasChildren, (, ), ), ;, add, (]
[first, ., getChildAtIndex, (, 1, ), ., hasChildren, (, ), ), ;, add, (, "get ", ), ;, }, else, {]
[first, ., getChildAtIndex, (, 1, ), ., hasChildren, (, ), ), ;, add, (, "get ", ), ;, }, else, {]
[1, ), ., hasChildren, (, ), ), ;, add, (, "get ", ), ;, }, else, {, Preconditions, ., checkState, (]
[1, ), ., hasChildren, (, ), ), ;, add, (, "get ", ), ;, }, else, {, Preconditions, ., checkState, (]
[1, ), ., hasChildren, (, ), ), ;, add, (, "get ", ), ;, }, else, {, Preconditions, ., checkState, (]
[(, ), ), ;, add, (, "get ", ), ;, }, else, {, Preconditions, ., checkState, (, first, ., getChildAtIndex, (]
[;, }, else, {, Preconditions, ., checkState, (, first, ., getChildAtIndex, (, 1, ), ., hasOneChild, (, ), ), ;]
[else, {, Preconditions, ., checkState, (, first, ., getChildAtIndex, (, 1, ), ., hasOneChild, (, ), ), ;, add, (]
[., getChildAtIndex, (, 1, ), ., hasOneChild, (, ), ), ;, add, (, "set ", ), ;, }, String, name, =]
[., getChildAtIndex, (, 1, ), ., hasOneChild, (, ), ), ;, add, (, "set ", ), ;, }, String, name, =]
[), ;, add, (, "set ", ), ;, }, String, name, =, n, ., getString, (, ), ;, Node, fn, =]
[), ;, }, String, name, =, n, ., getString, (, ), ;, Node, fn, =, first, ;, Node, parameters, =]
[), ;, }, String, name, =, n, ., getString, (, ), ;, Node, fn, =, first, ;, Node, parameters, =]
[name, =, n, ., getString, (, ), ;, Node, fn, =, first, ;, Node, parameters, =, fn, ., getChildAtIndex, (]
[), ;, Node, fn, =, first, ;, Node, parameters, =, fn, ., getChildAtIndex, (, 1, ), ;, Node, body, =]
[), ;, Node, fn, =, first, ;, Node, parameters, =, fn, ., getChildAtIndex, (, 1, ), ;, Node, body, =]
[parameters, =, fn, ., getChildAtIndex, (, 1, ), ;, Node, body, =, fn, ., getLastChild, (, ), ;, if, (]
[parameters, =, fn, ., getChildAtIndex, (, 1, ), ;, Node, body, =, fn, ., getLastChild, (, ), ;, if, (]
[parameters, =, fn, ., getChildAtIndex, (, 1, ), ;, Node, body, =, fn, ., getLastChild, (, ), ;, if, (]
[=, fn, ., getChildAtIndex, (, 1, ), ;, Node, body, =, fn, ., getLastChild, (, ), ;, if, (, !]
[=, fn, ., getChildAtIndex, (, 1, ), ;, Node, body, =, fn, ., getLastChild, (, ), ;, if, (, !]
[), ;, Node, body, =, fn, ., getLastChild, (, ), ;, if, (, !, n, ., isQuotedString, (, ), &&]
[), ;, Node, body, =, fn, ., getLastChild, (, ), ;, if, (, !, n, ., isQuotedString, (, ), &&]
[=, fn, ., getLastChild, (, ), ;, if, (, !, n, ., isQuotedString, (, ), &&, TokenStream, ., isJSIdentifier, (]
[getLastChild, (, ), ;, if, (, !, n, ., isQuotedString, (, ), &&, TokenStream, ., isJSIdentifier, (, name, ), &&]
[getLastChild, (, ), ;, if, (, !, n, ., isQuotedString, (, ), &&, TokenStream, ., isJSIdentifier, (, name, ), &&]
[if, (, !, n, ., isQuotedString, (, ), &&, TokenStream, ., isJSIdentifier, (, name, ), &&, NodeUtil, ., isLatin, (]
[., isQuotedString, (, ), &&, TokenStream, ., isJSIdentifier, (, name, ), &&, NodeUtil, ., isLatin, (, name, ), ), {]
[(, ), &&, TokenStream, ., isJSIdentifier, (, name, ), &&, NodeUtil, ., isLatin, (, name, ), ), {, add, (]
[&&, NodeUtil, ., isLatin, (, name, ), ), {, add, (, name, ), ;, }, else, {, double, d, =]
[., isLatin, (, name, ), ), {, add, (, name, ), ;, }, else, {, double, d, =, getSimpleNumber, (]
[), {, add, (, name, ), ;, }, else, {, double, d, =, getSimpleNumber, (, name, ), ;, if, (]
[{, add, (, name, ), ;, }, else, {, double, d, =, getSimpleNumber, (, name, ), ;, if, (, !]
[{, add, (, name, ), ;, }, else, {, double, d, =, getSimpleNumber, (, name, ), ;, if, (, !]
[), ;, }, else, {, double, d, =, getSimpleNumber, (, name, ), ;, if, (, !, Double, ., isNaN, (]
[{, double, d, =, getSimpleNumber, (, name, ), ;, if, (, !, Double, ., isNaN, (, d, ), ), {]
[{, double, d, =, getSimpleNumber, (, name, ), ;, if, (, !, Double, ., isNaN, (, d, ), ), {]
[getSimpleNumber, (, name, ), ;, if, (, !, Double, ., isNaN, (, d, ), ), {, cc, ., addNumber, (]
[(, !, Double, ., isNaN, (, d, ), ), {, cc, ., addNumber, (, d, ), ;, }, else, {]
[Double, ., isNaN, (, d, ), ), {, cc, ., addNumber, (, d, ), ;, }, else, {, addJsString, (]
[), ), {, cc, ., addNumber, (, d, ), ;, }, else, {, addJsString, (, n, ), ;, }, }]
[{, cc, ., addNumber, (, d, ), ;, }, else, {, addJsString, (, n, ), ;, }, }, add, (]
[addNumber, (, d, ), ;, }, else, {, addJsString, (, n, ), ;, }, }, add, (, parameters, ), ;]
[d, ), ;, }, else, {, addJsString, (, n, ), ;, }, }, add, (, parameters, ), ;, add, (]
[;, }, else, {, addJsString, (, n, ), ;, }, }, add, (, parameters, ), ;, add, (, body, ,]
[;, }, else, {, addJsString, (, n, ), ;, }, }, add, (, parameters, ), ;, add, (, body, ,]
[;, }, }, add, (, parameters, ), ;, add, (, body, ,, Context, ., PRESERVE_BLOCK, ), ;, break, ;, case]
[;, }, }, add, (, parameters, ), ;, add, (, body, ,, Context, ., PRESERVE_BLOCK, ), ;, break, ;, case]
[parameters, ), ;, add, (, body, ,, Context, ., PRESERVE_BLOCK, ), ;, break, ;, case, Token, ., SCRIPT, :, case]
[parameters, ), ;, add, (, body, ,, Context, ., PRESERVE_BLOCK, ), ;, break, ;, case, Token, ., SCRIPT, :, case]
[Context, ., PRESERVE_BLOCK, ), ;, break, ;, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, {, if, (]
[Context, ., PRESERVE_BLOCK, ), ;, break, ;, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, {, if, (]
[Context, ., PRESERVE_BLOCK, ), ;, break, ;, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, {, if, (]
[;, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, {, if, (, n, ., getClass, (, ), !=]
[case, Token, ., BLOCK, :, {, if, (, n, ., getClass, (, ), !=, Node, ., class, ), {, throw]
[BLOCK, :, {, if, (, n, ., getClass, (, ), !=, Node, ., class, ), {, throw, new, Error, (]
[getClass, (, ), !=, Node, ., class, ), {, throw, new, Error, (, "Unexpected Node subclass.", ), ;, }, boolean, preserveBlock, =]
[getClass, (, ), !=, Node, ., class, ), {, throw, new, Error, (, "Unexpected Node subclass.", ), ;, }, boolean, preserveBlock, =]
[), !=, Node, ., class, ), {, throw, new, Error, (, "Unexpected Node subclass.", ), ;, }, boolean, preserveBlock, =, context, ==]
[), !=, Node, ., class, ), {, throw, new, Error, (, "Unexpected Node subclass.", ), ;, }, boolean, preserveBlock, =, context, ==]
[{, throw, new, Error, (, "Unexpected Node subclass.", ), ;, }, boolean, preserveBlock, =, context, ==, Context, ., PRESERVE_BLOCK, ;, if, (]
[Error, (, "Unexpected Node subclass.", ), ;, }, boolean, preserveBlock, =, context, ==, Context, ., PRESERVE_BLOCK, ;, if, (, preserveBlock, ), {]
[Error, (, "Unexpected Node subclass.", ), ;, }, boolean, preserveBlock, =, context, ==, Context, ., PRESERVE_BLOCK, ;, if, (, preserveBlock, ), {]
[==, Context, ., PRESERVE_BLOCK, ;, if, (, preserveBlock, ), {, cc, ., beginBlock, (, ), ;, }, boolean, preferLineBreaks, =]
[==, Context, ., PRESERVE_BLOCK, ;, if, (, preserveBlock, ), {, cc, ., beginBlock, (, ), ;, }, boolean, preferLineBreaks, =]
[==, Context, ., PRESERVE_BLOCK, ;, if, (, preserveBlock, ), {, cc, ., beginBlock, (, ), ;, }, boolean, preferLineBreaks, =]
[., PRESERVE_BLOCK, ;, if, (, preserveBlock, ), {, cc, ., beginBlock, (, ), ;, }, boolean, preferLineBreaks, =, type, ==]
[., PRESERVE_BLOCK, ;, if, (, preserveBlock, ), {, cc, ., beginBlock, (, ), ;, }, boolean, preferLineBreaks, =, type, ==]
[(, preserveBlock, ), {, cc, ., beginBlock, (, ), ;, }, boolean, preferLineBreaks, =, type, ==, Token, ., SCRIPT, ||]
[preserveBlock, ), {, cc, ., beginBlock, (, ), ;, }, boolean, preferLineBreaks, =, type, ==, Token, ., SCRIPT, ||, (]
[preserveBlock, ), {, cc, ., beginBlock, (, ), ;, }, boolean, preferLineBreaks, =, type, ==, Token, ., SCRIPT, ||, (]
[preserveBlock, ), {, cc, ., beginBlock, (, ), ;, }, boolean, preferLineBreaks, =, type, ==, Token, ., SCRIPT, ||, (]
[preserveBlock, ), {, cc, ., beginBlock, (, ), ;, }, boolean, preferLineBreaks, =, type, ==, Token, ., SCRIPT, ||, (]
[preserveBlock, ), {, cc, ., beginBlock, (, ), ;, }, boolean, preferLineBreaks, =, type, ==, Token, ., SCRIPT, ||, (]
[{, cc, ., beginBlock, (, ), ;, }, boolean, preferLineBreaks, =, type, ==, Token, ., SCRIPT, ||, (, type, ==]
[{, cc, ., beginBlock, (, ), ;, }, boolean, preferLineBreaks, =, type, ==, Token, ., SCRIPT, ||, (, type, ==]
[(, ), ;, }, boolean, preferLineBreaks, =, type, ==, Token, ., SCRIPT, ||, (, type, ==, Token, ., BLOCK, &&]
[), ;, }, boolean, preferLineBreaks, =, type, ==, Token, ., SCRIPT, ||, (, type, ==, Token, ., BLOCK, &&, !]
[}, boolean, preferLineBreaks, =, type, ==, Token, ., SCRIPT, ||, (, type, ==, Token, ., BLOCK, &&, !, preserveBlock, &&]
[}, boolean, preferLineBreaks, =, type, ==, Token, ., SCRIPT, ||, (, type, ==, Token, ., BLOCK, &&, !, preserveBlock, &&]
[}, boolean, preferLineBreaks, =, type, ==, Token, ., SCRIPT, ||, (, type, ==, Token, ., BLOCK, &&, !, preserveBlock, &&]
[Token, ., SCRIPT, ||, (, type, ==, Token, ., BLOCK, &&, !, preserveBlock, &&, n, ., getParent, (, ), !=]
[SCRIPT, ||, (, type, ==, Token, ., BLOCK, &&, !, preserveBlock, &&, n, ., getParent, (, ), !=, null, &&]
[SCRIPT, ||, (, type, ==, Token, ., BLOCK, &&, !, preserveBlock, &&, n, ., getParent, (, ), !=, null, &&]
[SCRIPT, ||, (, type, ==, Token, ., BLOCK, &&, !, preserveBlock, &&, n, ., getParent, (, ), !=, null, &&]
[), !=, null, &&, n, ., getParent, (, ), ., isScript, (, ), ), ;, for, (, Node, c, =]
[null, &&, n, ., getParent, (, ), ., isScript, (, ), ), ;, for, (, Node, c, =, first, ;]
[null, &&, n, ., getParent, (, ), ., isScript, (, ), ), ;, for, (, Node, c, =, first, ;]
[n, ., getParent, (, ), ., isScript, (, ), ), ;, for, (, Node, c, =, first, ;, c, !=]
[getParent, (, ), ., isScript, (, ), ), ;, for, (, Node, c, =, first, ;, c, !=, null, ;]
[), ., isScript, (, ), ), ;, for, (, Node, c, =, first, ;, c, !=, null, ;, c, =]
[), ., isScript, (, ), ), ;, for, (, Node, c, =, first, ;, c, !=, null, ;, c, =]
[for, (, Node, c, =, first, ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[Node, c, =, first, ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, add, (]
[=, first, ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, add, (, c, ,]
[=, first, ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, add, (, c, ,]
[c, =, c, ., getNext, (, ), ), {, add, (, c, ,, Context, ., STATEMENT, ), ;, if, (]
[c, =, c, ., getNext, (, ), ), {, add, (, c, ,, Context, ., STATEMENT, ), ;, if, (]
[), {, add, (, c, ,, Context, ., STATEMENT, ), ;, if, (, c, ., isVar, (, ), ), {]
[), {, add, (, c, ,, Context, ., STATEMENT, ), ;, if, (, c, ., isVar, (, ), ), {]
[), ;, if, (, c, ., isVar, (, ), ), {, cc, ., endStatement, (, ), ;, }, if, (]
[), ;, if, (, c, ., isVar, (, ), ), {, cc, ., endStatement, (, ), ;, }, if, (]
[(, ), ), {, cc, ., endStatement, (, ), ;, }, if, (, c, ., isFunction, (, ), ), {]
[(, ), ), {, cc, ., endStatement, (, ), ;, }, if, (, c, ., isFunction, (, ), ), {]
[;, }, if, (, c, ., isFunction, (, ), ), {, cc, ., maybeLineBreak, (, ), ;, }, if, (]
[(, c, ., isFunction, (, ), ), {, cc, ., maybeLineBreak, (, ), ;, }, if, (, preferLineBreaks, ), {]
[(, c, ., isFunction, (, ), ), {, cc, ., maybeLineBreak, (, ), ;, }, if, (, preferLineBreaks, ), {]
[maybeLineBreak, (, ), ;, }, if, (, preferLineBreaks, ), {, cc, ., notePreferredLineBreak, (, ), ;, }, }, if, (]
[;, }, if, (, preferLineBreaks, ), {, cc, ., notePreferredLineBreak, (, ), ;, }, }, if, (, preserveBlock, ), {]
[;, }, if, (, preferLineBreaks, ), {, cc, ., notePreferredLineBreak, (, ), ;, }, }, if, (, preserveBlock, ), {]
[preferLineBreaks, ), {, cc, ., notePreferredLineBreak, (, ), ;, }, }, if, (, preserveBlock, ), {, cc, ., endBlock, (]
[preferLineBreaks, ), {, cc, ., notePreferredLineBreak, (, ), ;, }, }, if, (, preserveBlock, ), {, cc, ., endBlock, (]
[., notePreferredLineBreak, (, ), ;, }, }, if, (, preserveBlock, ), {, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (]
[(, ), ;, }, }, if, (, preserveBlock, ), {, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,]
[(, ), ;, }, }, if, (, preserveBlock, ), {, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,]
[;, }, }, if, (, preserveBlock, ), {, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,, context, ==]
[;, }, }, if, (, preserveBlock, ), {, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,, context, ==]
[(, cc, ., breakAfterBlockFor, (, n, ,, context, ==, Context, ., STATEMENT, ), ), ;, }, break, ;, }, case]
[(, cc, ., breakAfterBlockFor, (, n, ,, context, ==, Context, ., STATEMENT, ), ), ;, }, break, ;, }, case]
[,, context, ==, Context, ., STATEMENT, ), ), ;, }, break, ;, }, case, Token, ., FOR, :, if, (]
[,, context, ==, Context, ., STATEMENT, ), ), ;, }, break, ;, }, case, Token, ., FOR, :, if, (]
[==, Context, ., STATEMENT, ), ), ;, }, break, ;, }, case, Token, ., FOR, :, if, (, childCount, ==]
[STATEMENT, ), ), ;, }, break, ;, }, case, Token, ., FOR, :, if, (, childCount, ==, 4, ), {]
[), ;, }, break, ;, }, case, Token, ., FOR, :, if, (, childCount, ==, 4, ), {, add, (]
[}, case, Token, ., FOR, :, if, (, childCount, ==, 4, ), {, add, (, "for(", ), ;, if, (]
[}, case, Token, ., FOR, :, if, (, childCount, ==, 4, ), {, add, (, "for(", ), ;, if, (]
[(, childCount, ==, 4, ), {, add, (, "for(", ), ;, if, (, first, ., isVar, (, ), ), {]
[==, 4, ), {, add, (, "for(", ), ;, if, (, first, ., isVar, (, ), ), {, add, (]
[), {, add, (, "for(", ), ;, if, (, first, ., isVar, (, ), ), {, add, (, first, ,]
[), {, add, (, "for(", ), ;, if, (, first, ., isVar, (, ), ), {, add, (, first, ,]
[(, first, ., isVar, (, ), ), {, add, (, first, ,, Context, ., IN_FOR_INIT_CLAUSE, ), ;, }, else, {]
[., isVar, (, ), ), {, add, (, first, ,, Context, ., IN_FOR_INIT_CLAUSE, ), ;, }, else, {, addExpr, (]
[(, ), ), {, add, (, first, ,, Context, ., IN_FOR_INIT_CLAUSE, ), ;, }, else, {, addExpr, (, first, ,]
[), {, add, (, first, ,, Context, ., IN_FOR_INIT_CLAUSE, ), ;, }, else, {, addExpr, (, first, ,, 0, ,]
[), {, add, (, first, ,, Context, ., IN_FOR_INIT_CLAUSE, ), ;, }, else, {, addExpr, (, first, ,, 0, ,]
[Context, ., IN_FOR_INIT_CLAUSE, ), ;, }, else, {, addExpr, (, first, ,, 0, ,, Context, ., IN_FOR_INIT_CLAUSE, ), ;, }]
[IN_FOR_INIT_CLAUSE, ), ;, }, else, {, addExpr, (, first, ,, 0, ,, Context, ., IN_FOR_INIT_CLAUSE, ), ;, }, add, (]
[}, else, {, addExpr, (, first, ,, 0, ,, Context, ., IN_FOR_INIT_CLAUSE, ), ;, }, add, (, ";", ), ;]
[{, addExpr, (, first, ,, 0, ,, Context, ., IN_FOR_INIT_CLAUSE, ), ;, }, add, (, ";", ), ;, add, (]
[{, addExpr, (, first, ,, 0, ,, Context, ., IN_FOR_INIT_CLAUSE, ), ;, }, add, (, ";", ), ;, add, (]
[Context, ., IN_FOR_INIT_CLAUSE, ), ;, }, add, (, ";", ), ;, add, (, first, ., getNext, (, ), ), ;]
[IN_FOR_INIT_CLAUSE, ), ;, }, add, (, ";", ), ;, add, (, first, ., getNext, (, ), ), ;, add, (]
[}, add, (, ";", ), ;, add, (, first, ., getNext, (, ), ), ;, add, (, ";", ), ;]
[(, ";", ), ;, add, (, first, ., getNext, (, ), ), ;, add, (, ";", ), ;, add, (]
[(, ";", ), ;, add, (, first, ., getNext, (, ), ), ;, add, (, ";", ), ;, add, (]
[(, ";", ), ;, add, (, first, ., getNext, (, ), ), ;, add, (, ";", ), ;, add, (]
[), ;, add, (, ";", ), ;, add, (, first, ., getNext, (, ), ., getNext, (, ), ), ;]
[add, (, ";", ), ;, add, (, first, ., getNext, (, ), ., getNext, (, ), ), ;, add, (]
[), ;, add, (, first, ., getNext, (, ), ., getNext, (, ), ), ;, add, (, ")", ), ;]
[add, (, first, ., getNext, (, ), ., getNext, (, ), ), ;, add, (, ")", ), ;, addNonEmptyStatement, (]
[first, ., getNext, (, ), ., getNext, (, ), ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,]
[getNext, (, ), ., getNext, (, ), ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (]
[., getNext, (, ), ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,]
[add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, else, {]
[add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, else, {]
[;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, else, {, Preconditions, ., checkState, (]
[;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, else, {, Preconditions, ., checkState, (]
[(, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==]
[getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 3, ), ;]
[context, ), ,, false, ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, add, (]
[false, ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, add, (, "for(", ), ;]
[;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, add, (, "for(", ), ;, add, (]
[{, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, add, (, "for(", ), ;, add, (, first, ), ;]
[., checkState, (, childCount, ==, 3, ), ;, add, (, "for(", ), ;, add, (, first, ), ;, add, (]
[childCount, ==, 3, ), ;, add, (, "for(", ), ;, add, (, first, ), ;, add, (, "in", ), ;]
[3, ), ;, add, (, "for(", ), ;, add, (, first, ), ;, add, (, "in", ), ;, add, (]
[3, ), ;, add, (, "for(", ), ;, add, (, first, ), ;, add, (, "in", ), ;, add, (]
[;, add, (, first, ), ;, add, (, "in", ), ;, add, (, first, ., getNext, (, ), ), ;]
[(, first, ), ;, add, (, "in", ), ;, add, (, first, ., getNext, (, ), ), ;, add, (]
[;, add, (, "in", ), ;, add, (, first, ., getNext, (, ), ), ;, add, (, ")", ), ;]
[(, "in", ), ;, add, (, first, ., getNext, (, ), ), ;, add, (, ")", ), ;, addNonEmptyStatement, (]
[), ;, add, (, first, ., getNext, (, ), ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,]
[add, (, first, ., getNext, (, ), ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (]
[., getNext, (, ), ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,]
[(, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, break, ;, case]
[(, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, break, ;, case]
[addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, break, ;, case, Token, ., DO, :]
[addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, break, ;, case, Token, ., DO, :]
[getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, break, ;, case, Token, ., DO, :, Preconditions, ., checkState, (]
[getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, break, ;, case, Token, ., DO, :, Preconditions, ., checkState, (]
[context, ), ,, false, ), ;, }, break, ;, case, Token, ., DO, :, Preconditions, ., checkState, (, childCount, ==]
[false, ), ;, }, break, ;, case, Token, ., DO, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;]
[;, }, break, ;, case, Token, ., DO, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (]
[;, case, Token, ., DO, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "do", ), ;]
[Token, ., DO, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "do", ), ;, addNonEmptyStatement, (]
[DO, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "do", ), ;, addNonEmptyStatement, (, first, ,]
[DO, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "do", ), ;, addNonEmptyStatement, (, first, ,]
[checkState, (, childCount, ==, 2, ), ;, add, (, "do", ), ;, addNonEmptyStatement, (, first, ,, Context, ., OTHER, ,]
[==, 2, ), ;, add, (, "do", ), ;, addNonEmptyStatement, (, first, ,, Context, ., OTHER, ,, false, ), ;]
[), ;, add, (, "do", ), ;, addNonEmptyStatement, (, first, ,, Context, ., OTHER, ,, false, ), ;, add, (]
[(, "do", ), ;, addNonEmptyStatement, (, first, ,, Context, ., OTHER, ,, false, ), ;, add, (, "while(", ), ;]
[), ;, addNonEmptyStatement, (, first, ,, Context, ., OTHER, ,, false, ), ;, add, (, "while(", ), ;, add, (]
[(, first, ,, Context, ., OTHER, ,, false, ), ;, add, (, "while(", ), ;, add, (, last, ), ;]
[,, Context, ., OTHER, ,, false, ), ;, add, (, "while(", ), ;, add, (, last, ), ;, add, (]
[OTHER, ,, false, ), ;, add, (, "while(", ), ;, add, (, last, ), ;, add, (, ")", ), ;]
[OTHER, ,, false, ), ;, add, (, "while(", ), ;, add, (, last, ), ;, add, (, ")", ), ;]
[;, add, (, last, ), ;, add, (, ")", ), ;, cc, ., endStatement, (, ), ;, break, ;, case]
[;, add, (, last, ), ;, add, (, ")", ), ;, cc, ., endStatement, (, ), ;, break, ;, case]
[), ;, add, (, ")", ), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., WHILE, :]
[), ;, add, (, ")", ), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., WHILE, :]
[")", ), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., WHILE, :, Preconditions, ., checkState, (]
[")", ), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., WHILE, :, Preconditions, ., checkState, (]
[;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., WHILE, :, Preconditions, ., checkState, (, childCount, ==]
[endStatement, (, ), ;, break, ;, case, Token, ., WHILE, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;]
[), ;, break, ;, case, Token, ., WHILE, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (]
[;, case, Token, ., WHILE, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "while(", ), ;]
[Token, ., WHILE, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "while(", ), ;, add, (]
[:, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "while(", ), ;, add, (, first, ), ;]
[., checkState, (, childCount, ==, 2, ), ;, add, (, "while(", ), ;, add, (, first, ), ;, add, (]
[childCount, ==, 2, ), ;, add, (, "while(", ), ;, add, (, first, ), ;, add, (, ")", ), ;]
[2, ), ;, add, (, "while(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, addNonEmptyStatement, (]
[;, add, (, "while(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,]
[(, "while(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (]
[;, add, (, first, ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,]
[add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, break, ;, case]
[add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, break, ;, case]
[;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, break, ;, case, Token, ., EMPTY, :]
[;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, break, ;, case, Token, ., EMPTY, :]
[,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, break, ;, case, Token, ., EMPTY, :, Preconditions, ., checkState, (]
[,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, break, ;, case, Token, ., EMPTY, :, Preconditions, ., checkState, (]
[(, context, ), ,, false, ), ;, break, ;, case, Token, ., EMPTY, :, Preconditions, ., checkState, (, childCount, ==]
[;, break, ;, case, Token, ., EMPTY, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, break, ;, case]
[;, break, ;, case, Token, ., EMPTY, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, break, ;, case]
[., EMPTY, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, break, ;, case, Token, ., GETPROP, :, {]
[., EMPTY, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, break, ;, case, Token, ., GETPROP, :, {]
[., checkState, (, childCount, ==, 0, ), ;, break, ;, case, Token, ., GETPROP, :, {, Preconditions, ., checkState, (]
[., checkState, (, childCount, ==, 0, ), ;, break, ;, case, Token, ., GETPROP, :, {, Preconditions, ., checkState, (]
[(, childCount, ==, 0, ), ;, break, ;, case, Token, ., GETPROP, :, {, Preconditions, ., checkState, (, childCount, ==]
[==, 0, ), ;, break, ;, case, Token, ., GETPROP, :, {, Preconditions, ., checkState, (, childCount, ==, 2, ,]
[), ;, break, ;, case, Token, ., GETPROP, :, {, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad GETPROP: expected 2 children, but got %s", ,]
[;, case, Token, ., GETPROP, :, {, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad GETPROP: expected 2 children, but got %s", ,, childCount, ), ;]
[;, case, Token, ., GETPROP, :, {, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad GETPROP: expected 2 children, but got %s", ,, childCount, ), ;]
[GETPROP, :, {, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad GETPROP: expected 2 children, but got %s", ,, childCount, ), ;, Preconditions, ., checkState, (]
[GETPROP, :, {, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad GETPROP: expected 2 children, but got %s", ,, childCount, ), ;, Preconditions, ., checkState, (]
[(, childCount, ==, 2, ,, "Bad GETPROP: expected 2 children, but got %s", ,, childCount, ), ;, Preconditions, ., checkState, (, last, ., isString, (, ), ,]
[,, childCount, ), ;, Preconditions, ., checkState, (, last, ., isString, (, ), ,, "Bad GETPROP: RHS should be STRING", ), ;, boolean, needsParens, =]
[childCount, ), ;, Preconditions, ., checkState, (, last, ., isString, (, ), ,, "Bad GETPROP: RHS should be STRING", ), ;, boolean, needsParens, =, (]
[childCount, ), ;, Preconditions, ., checkState, (, last, ., isString, (, ), ,, "Bad GETPROP: RHS should be STRING", ), ;, boolean, needsParens, =, (]
[isString, (, ), ,, "Bad GETPROP: RHS should be STRING", ), ;, boolean, needsParens, =, (, first, ., isNumber, (, ), ), ;, if, (]
[,, "Bad GETPROP: RHS should be STRING", ), ;, boolean, needsParens, =, (, first, ., isNumber, (, ), ), ;, if, (, needsParens, ), {]
[), ;, boolean, needsParens, =, (, first, ., isNumber, (, ), ), ;, if, (, needsParens, ), {, add, (]
[=, (, first, ., isNumber, (, ), ), ;, if, (, needsParens, ), {, add, (, "(", ), ;, }]
[first, ., isNumber, (, ), ), ;, if, (, needsParens, ), {, add, (, "(", ), ;, }, addExpr, (]
[isNumber, (, ), ), ;, if, (, needsParens, ), {, add, (, "(", ), ;, }, addExpr, (, first, ,]
[isNumber, (, ), ), ;, if, (, needsParens, ), {, add, (, "(", ), ;, }, addExpr, (, first, ,]
[;, if, (, needsParens, ), {, add, (, "(", ), ;, }, addExpr, (, first, ,, NodeUtil, ., precedence, (]
[needsParens, ), {, add, (, "(", ), ;, }, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,]
["(", ), ;, }, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, if, (]
[}, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, if, (, needsParens, ), {]
[(, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, if, (, needsParens, ), {, add, (]
[., precedence, (, type, ), ,, context, ), ;, if, (, needsParens, ), {, add, (, ")", ), ;, }]
[(, type, ), ,, context, ), ;, if, (, needsParens, ), {, add, (, ")", ), ;, }, add, (]
[,, context, ), ;, if, (, needsParens, ), {, add, (, ")", ), ;, }, add, (, ".", ), ;]
[), ;, if, (, needsParens, ), {, add, (, ")", ), ;, }, add, (, ".", ), ;, addIdentifier, (]
[), ;, if, (, needsParens, ), {, add, (, ")", ), ;, }, add, (, ".", ), ;, addIdentifier, (]
[;, }, add, (, ".", ), ;, addIdentifier, (, last, ., getString, (, ), ), ;, break, ;, }, case]
[;, }, add, (, ".", ), ;, addIdentifier, (, last, ., getString, (, ), ), ;, break, ;, }, case]
[".", ), ;, addIdentifier, (, last, ., getString, (, ), ), ;, break, ;, }, case, Token, ., GETELEM, :]
[".", ), ;, addIdentifier, (, last, ., getString, (, ), ), ;, break, ;, }, case, Token, ., GETELEM, :]
[(, last, ., getString, (, ), ), ;, break, ;, }, case, Token, ., GETELEM, :, Preconditions, ., checkState, (]
[(, last, ., getString, (, ), ), ;, break, ;, }, case, Token, ., GETELEM, :, Preconditions, ., checkState, (]
[., getString, (, ), ), ;, break, ;, }, case, Token, ., GETELEM, :, Preconditions, ., checkState, (, childCount, ==]
[(, ), ), ;, break, ;, }, case, Token, ., GETELEM, :, Preconditions, ., checkState, (, childCount, ==, 2, ,]
[), ;, break, ;, }, case, Token, ., GETELEM, :, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad GETELEM: expected 2 children but got %s", ,]
[;, }, case, Token, ., GETELEM, :, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad GETELEM: expected 2 children but got %s", ,, childCount, ), ;]
[case, Token, ., GETELEM, :, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad GETELEM: expected 2 children but got %s", ,, childCount, ), ;, addExpr, (]
[., GETELEM, :, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad GETELEM: expected 2 children but got %s", ,, childCount, ), ;, addExpr, (, first, ,]
[., GETELEM, :, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad GETELEM: expected 2 children but got %s", ,, childCount, ), ;, addExpr, (, first, ,]
[., checkState, (, childCount, ==, 2, ,, "Bad GETELEM: expected 2 children but got %s", ,, childCount, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (]
[childCount, ==, 2, ,, "Bad GETELEM: expected 2 children but got %s", ,, childCount, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,]
[,, "Bad GETELEM: expected 2 children but got %s", ,, childCount, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;]
[,, childCount, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, add, (]
[;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, add, (, "[", ), ;]
[(, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, add, (, "[", ), ;, add, (]
[(, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, add, (, "[", ), ;, add, (]
[type, ), ,, context, ), ;, add, (, "[", ), ;, add, (, first, ., getNext, (, ), ), ;]
[,, context, ), ;, add, (, "[", ), ;, add, (, first, ., getNext, (, ), ), ;, add, (]
["[", ), ;, add, (, first, ., getNext, (, ), ), ;, add, (, "]", ), ;, break, ;, case]
["[", ), ;, add, (, first, ., getNext, (, ), ), ;, add, (, "]", ), ;, break, ;, case]
[(, first, ., getNext, (, ), ), ;, add, (, "]", ), ;, break, ;, case, Token, ., WITH, :]
[(, first, ., getNext, (, ), ), ;, add, (, "]", ), ;, break, ;, case, Token, ., WITH, :]
[(, ), ), ;, add, (, "]", ), ;, break, ;, case, Token, ., WITH, :, Preconditions, ., checkState, (]
[(, ), ), ;, add, (, "]", ), ;, break, ;, case, Token, ., WITH, :, Preconditions, ., checkState, (]
[), ;, add, (, "]", ), ;, break, ;, case, Token, ., WITH, :, Preconditions, ., checkState, (, childCount, ==]
[(, "]", ), ;, break, ;, case, Token, ., WITH, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;]
[), ;, break, ;, case, Token, ., WITH, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (]
[;, case, Token, ., WITH, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "with(", ), ;]
[Token, ., WITH, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "with(", ), ;, add, (]
[:, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "with(", ), ;, add, (, first, ), ;]
[., checkState, (, childCount, ==, 2, ), ;, add, (, "with(", ), ;, add, (, first, ), ;, add, (]
[childCount, ==, 2, ), ;, add, (, "with(", ), ;, add, (, first, ), ;, add, (, ")", ), ;]
[2, ), ;, add, (, "with(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, addNonEmptyStatement, (]
[;, add, (, "with(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,]
[(, "with(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (]
[;, add, (, first, ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,]
[add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, break, ;, case]
[add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, break, ;, case]
[addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, break, ;, case, Token, ., INC, :, case]
[addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, break, ;, case, Token, ., INC, :, case]
[(, context, ), ,, false, ), ;, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, {]
[(, context, ), ,, false, ), ;, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, {]
[false, ), ;, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, {, Preconditions, ., checkState, (]
[false, ), ;, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, {, Preconditions, ., checkState, (]
[;, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, {, Preconditions, ., checkState, (, childCount, ==]
[INC, :, case, Token, ., DEC, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, String, o, =]
[INC, :, case, Token, ., DEC, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, String, o, =]
[INC, :, case, Token, ., DEC, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, String, o, =]
[case, Token, ., DEC, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, String, o, =, type, ==]
[case, Token, ., DEC, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, String, o, =, type, ==]
[:, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, String, o, =, type, ==, Token, ., INC, ?]
[Preconditions, ., checkState, (, childCount, ==, 1, ), ;, String, o, =, type, ==, Token, ., INC, ?, "++", :]
[==, 1, ), ;, String, o, =, type, ==, Token, ., INC, ?, "++", :, "--", ;, int, postProp, =]
[==, 1, ), ;, String, o, =, type, ==, Token, ., INC, ?, "++", :, "--", ;, int, postProp, =]
[String, o, =, type, ==, Token, ., INC, ?, "++", :, "--", ;, int, postProp, =, n, ., getIntProp, (]
[String, o, =, type, ==, Token, ., INC, ?, "++", :, "--", ;, int, postProp, =, n, ., getIntProp, (]
[INC, ?, "++", :, "--", ;, int, postProp, =, n, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ;, if, (]
[INC, ?, "++", :, "--", ;, int, postProp, =, n, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ;, if, (]
["++", :, "--", ;, int, postProp, =, n, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ;, if, (, postProp, !=]
[;, int, postProp, =, n, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ;, if, (, postProp, !=, 0, ), {]
[postProp, =, n, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ;, if, (, postProp, !=, 0, ), {, addExpr, (]
[n, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ;, if, (, postProp, !=, 0, ), {, addExpr, (, first, ,]
[n, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ;, if, (, postProp, !=, 0, ), {, addExpr, (, first, ,]
[Node, ., INCRDECR_PROP, ), ;, if, (, postProp, !=, 0, ), {, addExpr, (, first, ,, NodeUtil, ., precedence, (]
[), ;, if, (, postProp, !=, 0, ), {, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,]
[(, postProp, !=, 0, ), {, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;]
[(, postProp, !=, 0, ), {, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;]
[), {, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, cc, ., addOp, (]
[addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, cc, ., addOp, (, o, ,]
[precedence, (, type, ), ,, context, ), ;, cc, ., addOp, (, o, ,, false, ), ;, }, else, {]
[precedence, (, type, ), ,, context, ), ;, cc, ., addOp, (, o, ,, false, ), ;, }, else, {]
[,, context, ), ;, cc, ., addOp, (, o, ,, false, ), ;, }, else, {, cc, ., addOp, (]
[), ;, cc, ., addOp, (, o, ,, false, ), ;, }, else, {, cc, ., addOp, (, o, ,]
[., addOp, (, o, ,, false, ), ;, }, else, {, cc, ., addOp, (, o, ,, false, ), ;]
[(, o, ,, false, ), ;, }, else, {, cc, ., addOp, (, o, ,, false, ), ;, add, (]
[{, cc, ., addOp, (, o, ,, false, ), ;, add, (, first, ), ;, }, break, ;, }, case]
[{, cc, ., addOp, (, o, ,, false, ), ;, add, (, first, ), ;, }, break, ;, }, case]
[,, false, ), ;, add, (, first, ), ;, }, break, ;, }, case, Token, ., CALL, :, if, (]
[,, false, ), ;, add, (, first, ), ;, }, break, ;, }, case, Token, ., CALL, :, if, (]
[), ;, add, (, first, ), ;, }, break, ;, }, case, Token, ., CALL, :, if, (, isIndirectEval, (]
[(, first, ), ;, }, break, ;, }, case, Token, ., CALL, :, if, (, isIndirectEval, (, first, ), ||]
[(, first, ), ;, }, break, ;, }, case, Token, ., CALL, :, if, (, isIndirectEval, (, first, ), ||]
[(, first, ), ;, }, break, ;, }, case, Token, ., CALL, :, if, (, isIndirectEval, (, first, ), ||]
[}, break, ;, }, case, Token, ., CALL, :, if, (, isIndirectEval, (, first, ), ||, n, ., getBooleanProp, (]
[}, break, ;, }, case, Token, ., CALL, :, if, (, isIndirectEval, (, first, ), ||, n, ., getBooleanProp, (]
[Token, ., CALL, :, if, (, isIndirectEval, (, first, ), ||, n, ., getBooleanProp, (, Node, ., FREE_CALL, ), &&]
[Token, ., CALL, :, if, (, isIndirectEval, (, first, ), ||, n, ., getBooleanProp, (, Node, ., FREE_CALL, ), &&]
[if, (, isIndirectEval, (, first, ), ||, n, ., getBooleanProp, (, Node, ., FREE_CALL, ), &&, NodeUtil, ., isGet, (]
[first, ), ||, n, ., getBooleanProp, (, Node, ., FREE_CALL, ), &&, NodeUtil, ., isGet, (, first, ), ), {]
[||, n, ., getBooleanProp, (, Node, ., FREE_CALL, ), &&, NodeUtil, ., isGet, (, first, ), ), {, add, (]
[getBooleanProp, (, Node, ., FREE_CALL, ), &&, NodeUtil, ., isGet, (, first, ), ), {, add, (, "(0,", ), ;]
[Node, ., FREE_CALL, ), &&, NodeUtil, ., isGet, (, first, ), ), {, add, (, "(0,", ), ;, addExpr, (]
[FREE_CALL, ), &&, NodeUtil, ., isGet, (, first, ), ), {, add, (, "(0,", ), ;, addExpr, (, first, ,]
[FREE_CALL, ), &&, NodeUtil, ., isGet, (, first, ), ), {, add, (, "(0,", ), ;, addExpr, (, first, ,]
[., isGet, (, first, ), ), {, add, (, "(0,", ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (]
[., isGet, (, first, ), ), {, add, (, "(0,", ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (]
[), {, add, (, "(0,", ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, Token, ., COMMA, ), ,]
[), {, add, (, "(0,", ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, Token, ., COMMA, ), ,]
[), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, Token, ., COMMA, ), ,, Context, ., OTHER, ), ;]
[addExpr, (, first, ,, NodeUtil, ., precedence, (, Token, ., COMMA, ), ,, Context, ., OTHER, ), ;, add, (]
[precedence, (, Token, ., COMMA, ), ,, Context, ., OTHER, ), ;, add, (, ")", ), ;, }, else, {]
[Token, ., COMMA, ), ,, Context, ., OTHER, ), ;, add, (, ")", ), ;, }, else, {, addExpr, (]
[COMMA, ), ,, Context, ., OTHER, ), ;, add, (, ")", ), ;, }, else, {, addExpr, (, first, ,]
[COMMA, ), ,, Context, ., OTHER, ), ;, add, (, ")", ), ;, }, else, {, addExpr, (, first, ,]
[., OTHER, ), ;, add, (, ")", ), ;, }, else, {, addExpr, (, first, ,, NodeUtil, ., precedence, (]
[;, add, (, ")", ), ;, }, else, {, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,]
[), ;, }, else, {, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, }]
[}, else, {, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, }, add, (]
[addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, }, add, (, "(", ), ;]
[first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, }, add, (, "(", ), ;, addList, (]
[first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, }, add, (, "(", ), ;, addList, (]
[), ,, context, ), ;, }, add, (, "(", ), ;, addList, (, first, ., getNext, (, ), ), ;]
[context, ), ;, }, add, (, "(", ), ;, addList, (, first, ., getNext, (, ), ), ;, add, (]
["(", ), ;, addList, (, first, ., getNext, (, ), ), ;, add, (, ")", ), ;, break, ;, case]
["(", ), ;, addList, (, first, ., getNext, (, ), ), ;, add, (, ")", ), ;, break, ;, case]
[getNext, (, ), ), ;, add, (, ")", ), ;, break, ;, case, Token, ., IF, :, boolean, hasElse, =]
[getNext, (, ), ), ;, add, (, ")", ), ;, break, ;, case, Token, ., IF, :, boolean, hasElse, =]
[), ), ;, add, (, ")", ), ;, break, ;, case, Token, ., IF, :, boolean, hasElse, =, childCount, ==]
[")", ), ;, break, ;, case, Token, ., IF, :, boolean, hasElse, =, childCount, ==, 3, ;, boolean, ambiguousElseClause, =]
[")", ), ;, break, ;, case, Token, ., IF, :, boolean, hasElse, =, childCount, ==, 3, ;, boolean, ambiguousElseClause, =]
[")", ), ;, break, ;, case, Token, ., IF, :, boolean, hasElse, =, childCount, ==, 3, ;, boolean, ambiguousElseClause, =]
[;, break, ;, case, Token, ., IF, :, boolean, hasElse, =, childCount, ==, 3, ;, boolean, ambiguousElseClause, =, context, ==]
[;, break, ;, case, Token, ., IF, :, boolean, hasElse, =, childCount, ==, 3, ;, boolean, ambiguousElseClause, =, context, ==]
[Token, ., IF, :, boolean, hasElse, =, childCount, ==, 3, ;, boolean, ambiguousElseClause, =, context, ==, Context, ., BEFORE_DANGLING_ELSE, &&]
[., IF, :, boolean, hasElse, =, childCount, ==, 3, ;, boolean, ambiguousElseClause, =, context, ==, Context, ., BEFORE_DANGLING_ELSE, &&, !]
[hasElse, =, childCount, ==, 3, ;, boolean, ambiguousElseClause, =, context, ==, Context, ., BEFORE_DANGLING_ELSE, &&, !, hasElse, ;, if, (]
[==, 3, ;, boolean, ambiguousElseClause, =, context, ==, Context, ., BEFORE_DANGLING_ELSE, &&, !, hasElse, ;, if, (, ambiguousElseClause, ), {]
[==, 3, ;, boolean, ambiguousElseClause, =, context, ==, Context, ., BEFORE_DANGLING_ELSE, &&, !, hasElse, ;, if, (, ambiguousElseClause, ), {]
[==, Context, ., BEFORE_DANGLING_ELSE, &&, !, hasElse, ;, if, (, ambiguousElseClause, ), {, cc, ., beginBlock, (, ), ;, }]
[., BEFORE_DANGLING_ELSE, &&, !, hasElse, ;, if, (, ambiguousElseClause, ), {, cc, ., beginBlock, (, ), ;, }, add, (]
[!, hasElse, ;, if, (, ambiguousElseClause, ), {, cc, ., beginBlock, (, ), ;, }, add, (, "if(", ), ;]
[;, if, (, ambiguousElseClause, ), {, cc, ., beginBlock, (, ), ;, }, add, (, "if(", ), ;, add, (]
[ambiguousElseClause, ), {, cc, ., beginBlock, (, ), ;, }, add, (, "if(", ), ;, add, (, first, ), ;]
[{, cc, ., beginBlock, (, ), ;, }, add, (, "if(", ), ;, add, (, first, ), ;, add, (]
[), ;, }, add, (, "if(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, if, (]
[add, (, "if(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, if, (, hasElse, ), {]
["if(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, if, (, hasElse, ), {, addNonEmptyStatement, (]
["if(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, if, (, hasElse, ), {, addNonEmptyStatement, (]
[), ;, add, (, ")", ), ;, if, (, hasElse, ), {, addNonEmptyStatement, (, first, ., getNext, (, ), ,]
[), ;, add, (, ")", ), ;, if, (, hasElse, ), {, addNonEmptyStatement, (, first, ., getNext, (, ), ,]
[")", ), ;, if, (, hasElse, ), {, addNonEmptyStatement, (, first, ., getNext, (, ), ,, Context, ., BEFORE_DANGLING_ELSE, ,]
[if, (, hasElse, ), {, addNonEmptyStatement, (, first, ., getNext, (, ), ,, Context, ., BEFORE_DANGLING_ELSE, ,, false, ), ;]
[hasElse, ), {, addNonEmptyStatement, (, first, ., getNext, (, ), ,, Context, ., BEFORE_DANGLING_ELSE, ,, false, ), ;, add, (]
[addNonEmptyStatement, (, first, ., getNext, (, ), ,, Context, ., BEFORE_DANGLING_ELSE, ,, false, ), ;, add, (, "else", ), ;]
[first, ., getNext, (, ), ,, Context, ., BEFORE_DANGLING_ELSE, ,, false, ), ;, add, (, "else", ), ;, addNonEmptyStatement, (]
[getNext, (, ), ,, Context, ., BEFORE_DANGLING_ELSE, ,, false, ), ;, add, (, "else", ), ;, addNonEmptyStatement, (, last, ,]
[), ,, Context, ., BEFORE_DANGLING_ELSE, ,, false, ), ;, add, (, "else", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (]
[., BEFORE_DANGLING_ELSE, ,, false, ), ;, add, (, "else", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,]
[add, (, "else", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, else, {]
["else", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, else, {, addNonEmptyStatement, (]
["else", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, else, {, addNonEmptyStatement, (]
[,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, else, {, addNonEmptyStatement, (, first, ., getNext, (, ), ,]
[,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, else, {, addNonEmptyStatement, (, first, ., getNext, (, ), ,]
[), ,, false, ), ;, }, else, {, addNonEmptyStatement, (, first, ., getNext, (, ), ,, Context, ., OTHER, ,]
[), ;, }, else, {, addNonEmptyStatement, (, first, ., getNext, (, ), ,, Context, ., OTHER, ,, false, ), ;]
[), ;, }, else, {, addNonEmptyStatement, (, first, ., getNext, (, ), ,, Context, ., OTHER, ,, false, ), ;]
[{, addNonEmptyStatement, (, first, ., getNext, (, ), ,, Context, ., OTHER, ,, false, ), ;, Preconditions, ., checkState, (]
[{, addNonEmptyStatement, (, first, ., getNext, (, ), ,, Context, ., OTHER, ,, false, ), ;, Preconditions, ., checkState, (]
[(, first, ., getNext, (, ), ,, Context, ., OTHER, ,, false, ), ;, Preconditions, ., checkState, (, childCount, ==]
[,, Context, ., OTHER, ,, false, ), ;, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, }, if, (]
[OTHER, ,, false, ), ;, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, }, if, (, ambiguousElseClause, ), {]
[OTHER, ,, false, ), ;, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, }, if, (, ambiguousElseClause, ), {]
[==, 2, ), ;, }, if, (, ambiguousElseClause, ), {, cc, ., endBlock, (, ), ;, }, break, ;, case]
[==, 2, ), ;, }, if, (, ambiguousElseClause, ), {, cc, ., endBlock, (, ), ;, }, break, ;, case]
[}, if, (, ambiguousElseClause, ), {, cc, ., endBlock, (, ), ;, }, break, ;, case, Token, ., NULL, :]
[}, if, (, ambiguousElseClause, ), {, cc, ., endBlock, (, ), ;, }, break, ;, case, Token, ., NULL, :]
[), {, cc, ., endBlock, (, ), ;, }, break, ;, case, Token, ., NULL, :, Preconditions, ., checkState, (]
[), {, cc, ., endBlock, (, ), ;, }, break, ;, case, Token, ., NULL, :, Preconditions, ., checkState, (]
[cc, ., endBlock, (, ), ;, }, break, ;, case, Token, ., NULL, :, Preconditions, ., checkState, (, childCount, ==]
[(, ), ;, }, break, ;, case, Token, ., NULL, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;]
[(, ), ;, }, break, ;, case, Token, ., NULL, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;]
[break, ;, case, Token, ., NULL, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addConstant, (]
[:, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addConstant, (, "null", ), ;, break, ;, case]
[:, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addConstant, (, "null", ), ;, break, ;, case]
[(, childCount, ==, 0, ), ;, cc, ., addConstant, (, "null", ), ;, break, ;, case, Token, ., THIS, :]
[(, childCount, ==, 0, ), ;, cc, ., addConstant, (, "null", ), ;, break, ;, case, Token, ., THIS, :]
[), ;, cc, ., addConstant, (, "null", ), ;, break, ;, case, Token, ., THIS, :, Preconditions, ., checkState, (]
[), ;, cc, ., addConstant, (, "null", ), ;, break, ;, case, Token, ., THIS, :, Preconditions, ., checkState, (]
[cc, ., addConstant, (, "null", ), ;, break, ;, case, Token, ., THIS, :, Preconditions, ., checkState, (, childCount, ==]
[(, "null", ), ;, break, ;, case, Token, ., THIS, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;]
[), ;, break, ;, case, Token, ., THIS, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, add, (]
[., THIS, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, add, (, "this", ), ;, break, ;, case]
[., THIS, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, add, (, "this", ), ;, break, ;, case]
[., checkState, (, childCount, ==, 0, ), ;, add, (, "this", ), ;, break, ;, case, Token, ., FALSE, :]
[., checkState, (, childCount, ==, 0, ), ;, add, (, "this", ), ;, break, ;, case, Token, ., FALSE, :]
[==, 0, ), ;, add, (, "this", ), ;, break, ;, case, Token, ., FALSE, :, Preconditions, ., checkState, (]
[==, 0, ), ;, add, (, "this", ), ;, break, ;, case, Token, ., FALSE, :, Preconditions, ., checkState, (]
[), ;, add, (, "this", ), ;, break, ;, case, Token, ., FALSE, :, Preconditions, ., checkState, (, childCount, ==]
[(, "this", ), ;, break, ;, case, Token, ., FALSE, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;]
[(, "this", ), ;, break, ;, case, Token, ., FALSE, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;]
[break, ;, case, Token, ., FALSE, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addConstant, (]
[:, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addConstant, (, "false", ), ;, break, ;, case]
[:, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addConstant, (, "false", ), ;, break, ;, case]
[(, childCount, ==, 0, ), ;, cc, ., addConstant, (, "false", ), ;, break, ;, case, Token, ., TRUE, :]
[(, childCount, ==, 0, ), ;, cc, ., addConstant, (, "false", ), ;, break, ;, case, Token, ., TRUE, :]
[), ;, cc, ., addConstant, (, "false", ), ;, break, ;, case, Token, ., TRUE, :, Preconditions, ., checkState, (]
[), ;, cc, ., addConstant, (, "false", ), ;, break, ;, case, Token, ., TRUE, :, Preconditions, ., checkState, (]
[cc, ., addConstant, (, "false", ), ;, break, ;, case, Token, ., TRUE, :, Preconditions, ., checkState, (, childCount, ==]
[(, "false", ), ;, break, ;, case, Token, ., TRUE, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;]
[(, "false", ), ;, break, ;, case, Token, ., TRUE, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;]
[break, ;, case, Token, ., TRUE, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addConstant, (]
[:, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addConstant, (, "true", ), ;, break, ;, case]
[:, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addConstant, (, "true", ), ;, break, ;, case]
[(, childCount, ==, 0, ), ;, cc, ., addConstant, (, "true", ), ;, break, ;, case, Token, ., CONTINUE, :]
[(, childCount, ==, 0, ), ;, cc, ., addConstant, (, "true", ), ;, break, ;, case, Token, ., CONTINUE, :]
[), ;, cc, ., addConstant, (, "true", ), ;, break, ;, case, Token, ., CONTINUE, :, Preconditions, ., checkState, (]
[), ;, cc, ., addConstant, (, "true", ), ;, break, ;, case, Token, ., CONTINUE, :, Preconditions, ., checkState, (]
[cc, ., addConstant, (, "true", ), ;, break, ;, case, Token, ., CONTINUE, :, Preconditions, ., checkState, (, childCount, <=]
[(, "true", ), ;, break, ;, case, Token, ., CONTINUE, :, Preconditions, ., checkState, (, childCount, <=, 1, ), ;]
[), ;, break, ;, case, Token, ., CONTINUE, :, Preconditions, ., checkState, (, childCount, <=, 1, ), ;, add, (]
[Token, ., CONTINUE, :, Preconditions, ., checkState, (, childCount, <=, 1, ), ;, add, (, "continue", ), ;, if, (]
[Token, ., CONTINUE, :, Preconditions, ., checkState, (, childCount, <=, 1, ), ;, add, (, "continue", ), ;, if, (]
[CONTINUE, :, Preconditions, ., checkState, (, childCount, <=, 1, ), ;, add, (, "continue", ), ;, if, (, childCount, ==]
[(, childCount, <=, 1, ), ;, add, (, "continue", ), ;, if, (, childCount, ==, 1, ), {, if, (]
[childCount, <=, 1, ), ;, add, (, "continue", ), ;, if, (, childCount, ==, 1, ), {, if, (, !]
[childCount, <=, 1, ), ;, add, (, "continue", ), ;, if, (, childCount, ==, 1, ), {, if, (, !]
[), ;, if, (, childCount, ==, 1, ), {, if, (, !, first, ., isLabelName, (, ), ), {, throw]
[(, childCount, ==, 1, ), {, if, (, !, first, ., isLabelName, (, ), ), {, throw, new, Error, (]
[), {, if, (, !, first, ., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }]
[if, (, !, first, ., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (]
[first, ., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, " ", ), ;]
[isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, " ", ), ;, add, (]
[{, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, " ", ), ;, add, (, first, ), ;, }]
[{, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, " ", ), ;, add, (, first, ), ;, }]
[add, (, " ", ), ;, add, (, first, ), ;, }, cc, ., endStatement, (, ), ;, break, ;, case]
[add, (, " ", ), ;, add, (, first, ), ;, }, cc, ., endStatement, (, ), ;, break, ;, case]
[;, add, (, first, ), ;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., DEBUGGER, :]
[;, add, (, first, ), ;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., DEBUGGER, :]
[), ;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., DEBUGGER, :, Preconditions, ., checkState, (]
[), ;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., DEBUGGER, :, Preconditions, ., checkState, (]
[}, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., DEBUGGER, :, Preconditions, ., checkState, (, childCount, ==]
[endStatement, (, ), ;, break, ;, case, Token, ., DEBUGGER, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;]
[), ;, break, ;, case, Token, ., DEBUGGER, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, add, (]
[;, case, Token, ., DEBUGGER, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, add, (, "debugger", ), ;]
[;, case, Token, ., DEBUGGER, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, add, (, "debugger", ), ;]
[(, childCount, ==, 0, ), ;, add, (, "debugger", ), ;, cc, ., endStatement, (, ), ;, break, ;, case]
[(, childCount, ==, 0, ), ;, add, (, "debugger", ), ;, cc, ., endStatement, (, ), ;, break, ;, case]
[), ;, add, (, "debugger", ), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., BREAK, :]
[), ;, add, (, "debugger", ), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., BREAK, :]
["debugger", ), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., BREAK, :, Preconditions, ., checkState, (]
["debugger", ), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., BREAK, :, Preconditions, ., checkState, (]
[;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., BREAK, :, Preconditions, ., checkState, (, childCount, <=]
[endStatement, (, ), ;, break, ;, case, Token, ., BREAK, :, Preconditions, ., checkState, (, childCount, <=, 1, ), ;]
[), ;, break, ;, case, Token, ., BREAK, :, Preconditions, ., checkState, (, childCount, <=, 1, ), ;, add, (]
[Token, ., BREAK, :, Preconditions, ., checkState, (, childCount, <=, 1, ), ;, add, (, "break", ), ;, if, (]
[Token, ., BREAK, :, Preconditions, ., checkState, (, childCount, <=, 1, ), ;, add, (, "break", ), ;, if, (]
[BREAK, :, Preconditions, ., checkState, (, childCount, <=, 1, ), ;, add, (, "break", ), ;, if, (, childCount, ==]
[(, childCount, <=, 1, ), ;, add, (, "break", ), ;, if, (, childCount, ==, 1, ), {, if, (]
[childCount, <=, 1, ), ;, add, (, "break", ), ;, if, (, childCount, ==, 1, ), {, if, (, !]
[childCount, <=, 1, ), ;, add, (, "break", ), ;, if, (, childCount, ==, 1, ), {, if, (, !]
[), ;, if, (, childCount, ==, 1, ), {, if, (, !, first, ., isLabelName, (, ), ), {, throw]
[(, childCount, ==, 1, ), {, if, (, !, first, ., isLabelName, (, ), ), {, throw, new, Error, (]
[), {, if, (, !, first, ., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }]
[if, (, !, first, ., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (]
[first, ., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, " ", ), ;]
[isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, " ", ), ;, add, (]
[{, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, " ", ), ;, add, (, first, ), ;, }]
[{, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, " ", ), ;, add, (, first, ), ;, }]
[add, (, " ", ), ;, add, (, first, ), ;, }, cc, ., endStatement, (, ), ;, break, ;, case]
[add, (, " ", ), ;, add, (, first, ), ;, }, cc, ., endStatement, (, ), ;, break, ;, case]
[;, add, (, first, ), ;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., EXPR_RESULT, :]
[;, add, (, first, ), ;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., EXPR_RESULT, :]
[), ;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, Preconditions, ., checkState, (]
[), ;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, Preconditions, ., checkState, (]
[}, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, Preconditions, ., checkState, (, childCount, ==]
[endStatement, (, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;]
[), ;, break, ;, case, Token, ., EXPR_RESULT, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (]
[break, ;, case, Token, ., EXPR_RESULT, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, first, ,]
[break, ;, case, Token, ., EXPR_RESULT, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, first, ,]
[EXPR_RESULT, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, first, ,, Context, ., START_OF_EXPR, ), ;]
[EXPR_RESULT, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, first, ,, Context, ., START_OF_EXPR, ), ;]
[), ;, add, (, first, ,, Context, ., START_OF_EXPR, ), ;, cc, ., endStatement, (, ), ;, break, ;, case]
[), ;, add, (, first, ,, Context, ., START_OF_EXPR, ), ;, cc, ., endStatement, (, ), ;, break, ;, case]
[first, ,, Context, ., START_OF_EXPR, ), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., NEW, :]
[Context, ., START_OF_EXPR, ), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., NEW, :, add, (]
[., endStatement, (, ), ;, break, ;, case, Token, ., NEW, :, add, (, "new ", ), ;, int, precedence, =]
[., endStatement, (, ), ;, break, ;, case, Token, ., NEW, :, add, (, "new ", ), ;, int, precedence, =]
[;, break, ;, case, Token, ., NEW, :, add, (, "new ", ), ;, int, precedence, =, NodeUtil, ., precedence, (]
[., NEW, :, add, (, "new ", ), ;, int, precedence, =, NodeUtil, ., precedence, (, type, ), ;, if, (]
[., NEW, :, add, (, "new ", ), ;, int, precedence, =, NodeUtil, ., precedence, (, type, ), ;, if, (]
[(, "new ", ), ;, int, precedence, =, NodeUtil, ., precedence, (, type, ), ;, if, (, NodeUtil, ., containsType, (]
[), ;, int, precedence, =, NodeUtil, ., precedence, (, type, ), ;, if, (, NodeUtil, ., containsType, (, first, ,]
[), ;, int, precedence, =, NodeUtil, ., precedence, (, type, ), ;, if, (, NodeUtil, ., containsType, (, first, ,]
[=, NodeUtil, ., precedence, (, type, ), ;, if, (, NodeUtil, ., containsType, (, first, ,, Token, ., CALL, ,]
[=, NodeUtil, ., precedence, (, type, ), ;, if, (, NodeUtil, ., containsType, (, first, ,, Token, ., CALL, ,]
[), ;, if, (, NodeUtil, ., containsType, (, first, ,, Token, ., CALL, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ), {]
[if, (, NodeUtil, ., containsType, (, first, ,, Token, ., CALL, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ), {, precedence, =]
[if, (, NodeUtil, ., containsType, (, first, ,, Token, ., CALL, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ), {, precedence, =]
[if, (, NodeUtil, ., containsType, (, first, ,, Token, ., CALL, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ), {, precedence, =]
[containsType, (, first, ,, Token, ., CALL, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ), {, precedence, =, NodeUtil, ., precedence, (]
[containsType, (, first, ,, Token, ., CALL, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ), {, precedence, =, NodeUtil, ., precedence, (]
[,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ), {, precedence, =, NodeUtil, ., precedence, (, first, ., getType, (, ), ), +]
[MATCH_NOT_FUNCTION, ), ), {, precedence, =, NodeUtil, ., precedence, (, first, ., getType, (, ), ), +, 1, ;, }]
[), {, precedence, =, NodeUtil, ., precedence, (, first, ., getType, (, ), ), +, 1, ;, }, addExpr, (]
[precedence, =, NodeUtil, ., precedence, (, first, ., getType, (, ), ), +, 1, ;, }, addExpr, (, first, ,]
[NodeUtil, ., precedence, (, first, ., getType, (, ), ), +, 1, ;, }, addExpr, (, first, ,, precedence, ,]
[NodeUtil, ., precedence, (, first, ., getType, (, ), ), +, 1, ;, }, addExpr, (, first, ,, precedence, ,]
[), ), +, 1, ;, }, addExpr, (, first, ,, precedence, ,, Context, ., OTHER, ), ;, Node, next, =]
[), ), +, 1, ;, }, addExpr, (, first, ,, precedence, ,, Context, ., OTHER, ), ;, Node, next, =]
[first, ,, precedence, ,, Context, ., OTHER, ), ;, Node, next, =, first, ., getNext, (, ), ;, if, (]
[first, ,, precedence, ,, Context, ., OTHER, ), ;, Node, next, =, first, ., getNext, (, ), ;, if, (]
[precedence, ,, Context, ., OTHER, ), ;, Node, next, =, first, ., getNext, (, ), ;, if, (, next, !=]
[., OTHER, ), ;, Node, next, =, first, ., getNext, (, ), ;, if, (, next, !=, null, ), {]
[), ;, Node, next, =, first, ., getNext, (, ), ;, if, (, next, !=, null, ), {, add, (]
[next, =, first, ., getNext, (, ), ;, if, (, next, !=, null, ), {, add, (, "(", ), ;]
[first, ., getNext, (, ), ;, if, (, next, !=, null, ), {, add, (, "(", ), ;, addList, (]
[(, ), ;, if, (, next, !=, null, ), {, add, (, "(", ), ;, addList, (, next, ), ;]
[;, if, (, next, !=, null, ), {, add, (, "(", ), ;, addList, (, next, ), ;, add, (]
[{, add, (, "(", ), ;, addList, (, next, ), ;, add, (, ")", ), ;, }, break, ;, case]
[{, add, (, "(", ), ;, addList, (, next, ), ;, add, (, ")", ), ;, }, break, ;, case]
[), ;, addList, (, next, ), ;, add, (, ")", ), ;, }, break, ;, case, Token, ., STRING_KEY, :]
[), ;, addList, (, next, ), ;, add, (, ")", ), ;, }, break, ;, case, Token, ., STRING_KEY, :]
[next, ), ;, add, (, ")", ), ;, }, break, ;, case, Token, ., STRING_KEY, :, Preconditions, ., checkState, (]
[next, ), ;, add, (, ")", ), ;, }, break, ;, case, Token, ., STRING_KEY, :, Preconditions, ., checkState, (]
[;, add, (, ")", ), ;, }, break, ;, case, Token, ., STRING_KEY, :, Preconditions, ., checkState, (, childCount, ==]
[(, ")", ), ;, }, break, ;, case, Token, ., STRING_KEY, :, Preconditions, ., checkState, (, childCount, ==, 1, ,]
[;, }, break, ;, case, Token, ., STRING_KEY, :, Preconditions, ., checkState, (, childCount, ==, 1, ,, "Object lit key must have 1 child", ), ;]
[break, ;, case, Token, ., STRING_KEY, :, Preconditions, ., checkState, (, childCount, ==, 1, ,, "Object lit key must have 1 child", ), ;, addJsString, (]
[:, Preconditions, ., checkState, (, childCount, ==, 1, ,, "Object lit key must have 1 child", ), ;, addJsString, (, n, ), ;, break, ;, case]
[:, Preconditions, ., checkState, (, childCount, ==, 1, ,, "Object lit key must have 1 child", ), ;, addJsString, (, n, ), ;, break, ;, case]
[(, childCount, ==, 1, ,, "Object lit key must have 1 child", ), ;, addJsString, (, n, ), ;, break, ;, case, Token, ., STRING, :]
[(, childCount, ==, 1, ,, "Object lit key must have 1 child", ), ;, addJsString, (, n, ), ;, break, ;, case, Token, ., STRING, :]
[,, "Object lit key must have 1 child", ), ;, addJsString, (, n, ), ;, break, ;, case, Token, ., STRING, :, Preconditions, ., checkState, (]
[,, "Object lit key must have 1 child", ), ;, addJsString, (, n, ), ;, break, ;, case, Token, ., STRING, :, Preconditions, ., checkState, (]
[), ;, addJsString, (, n, ), ;, break, ;, case, Token, ., STRING, :, Preconditions, ., checkState, (, childCount, ==]
[addJsString, (, n, ), ;, break, ;, case, Token, ., STRING, :, Preconditions, ., checkState, (, childCount, ==, 0, ,]
[), ;, break, ;, case, Token, ., STRING, :, Preconditions, ., checkState, (, childCount, ==, 0, ,, "A string may not have children", ), ;]
[break, ;, case, Token, ., STRING, :, Preconditions, ., checkState, (, childCount, ==, 0, ,, "A string may not have children", ), ;, addJsString, (]
[:, Preconditions, ., checkState, (, childCount, ==, 0, ,, "A string may not have children", ), ;, addJsString, (, n, ), ;, break, ;, case]
[:, Preconditions, ., checkState, (, childCount, ==, 0, ,, "A string may not have children", ), ;, addJsString, (, n, ), ;, break, ;, case]
[(, childCount, ==, 0, ,, "A string may not have children", ), ;, addJsString, (, n, ), ;, break, ;, case, Token, ., DELPROP, :]
[(, childCount, ==, 0, ,, "A string may not have children", ), ;, addJsString, (, n, ), ;, break, ;, case, Token, ., DELPROP, :]
[,, "A string may not have children", ), ;, addJsString, (, n, ), ;, break, ;, case, Token, ., DELPROP, :, Preconditions, ., checkState, (]
[,, "A string may not have children", ), ;, addJsString, (, n, ), ;, break, ;, case, Token, ., DELPROP, :, Preconditions, ., checkState, (]
[), ;, addJsString, (, n, ), ;, break, ;, case, Token, ., DELPROP, :, Preconditions, ., checkState, (, childCount, ==]
[(, n, ), ;, break, ;, case, Token, ., DELPROP, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;]
[), ;, break, ;, case, Token, ., DELPROP, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (]
[;, case, Token, ., DELPROP, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, "delete ", ), ;]
[Token, ., DELPROP, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, "delete ", ), ;, add, (]
[checkState, (, childCount, ==, 1, ), ;, add, (, "delete ", ), ;, add, (, first, ), ;, break, ;, case]
[checkState, (, childCount, ==, 1, ), ;, add, (, "delete ", ), ;, add, (, first, ), ;, break, ;, case]
[(, "delete ", ), ;, add, (, first, ), ;, break, ;, case, Token, ., OBJECTLIT, :, {, boolean, needsParens, =]
["delete ", ), ;, add, (, first, ), ;, break, ;, case, Token, ., OBJECTLIT, :, {, boolean, needsParens, =, (]
["delete ", ), ;, add, (, first, ), ;, break, ;, case, Token, ., OBJECTLIT, :, {, boolean, needsParens, =, (]
[;, add, (, first, ), ;, break, ;, case, Token, ., OBJECTLIT, :, {, boolean, needsParens, =, (, context, ==]
[;, add, (, first, ), ;, break, ;, case, Token, ., OBJECTLIT, :, {, boolean, needsParens, =, (, context, ==]
[;, case, Token, ., OBJECTLIT, :, {, boolean, needsParens, =, (, context, ==, Context, ., START_OF_EXPR, ), ;, if, (]
[., OBJECTLIT, :, {, boolean, needsParens, =, (, context, ==, Context, ., START_OF_EXPR, ), ;, if, (, needsParens, ), {]
[:, {, boolean, needsParens, =, (, context, ==, Context, ., START_OF_EXPR, ), ;, if, (, needsParens, ), {, add, (]
[=, (, context, ==, Context, ., START_OF_EXPR, ), ;, if, (, needsParens, ), {, add, (, "(", ), ;, }]
[context, ==, Context, ., START_OF_EXPR, ), ;, if, (, needsParens, ), {, add, (, "(", ), ;, }, add, (]
[(, needsParens, ), {, add, (, "(", ), ;, }, add, (, "{", ), ;, for, (, Node, c, =]
[), {, add, (, "(", ), ;, }, add, (, "{", ), ;, for, (, Node, c, =, first, ;]
[), {, add, (, "(", ), ;, }, add, (, "{", ), ;, for, (, Node, c, =, first, ;]
[add, (, "(", ), ;, }, add, (, "{", ), ;, for, (, Node, c, =, first, ;, c, !=]
["(", ), ;, }, add, (, "{", ), ;, for, (, Node, c, =, first, ;, c, !=, null, ;]
[;, }, add, (, "{", ), ;, for, (, Node, c, =, first, ;, c, !=, null, ;, c, =]
[;, }, add, (, "{", ), ;, for, (, Node, c, =, first, ;, c, !=, null, ;, c, =]
[Node, c, =, first, ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[Node, c, =, first, ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[=, first, ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, c, !=]
[c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, c, !=, first, ), {]
[c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, c, !=, first, ), {]
[(, ), ), {, if, (, c, !=, first, ), {, cc, ., listSeparator, (, ), ;, }, if, (]
[(, ), ), {, if, (, c, !=, first, ), {, cc, ., listSeparator, (, ), ;, }, if, (]
[(, ), ), {, if, (, c, !=, first, ), {, cc, ., listSeparator, (, ), ;, }, if, (]
[c, !=, first, ), {, cc, ., listSeparator, (, ), ;, }, if, (, c, ., isGetterDef, (, ), ||]
[c, !=, first, ), {, cc, ., listSeparator, (, ), ;, }, if, (, c, ., isGetterDef, (, ), ||]
[listSeparator, (, ), ;, }, if, (, c, ., isGetterDef, (, ), ||, c, ., isSetterDef, (, ), ), {]
[), ;, }, if, (, c, ., isGetterDef, (, ), ||, c, ., isSetterDef, (, ), ), {, add, (]
[., isGetterDef, (, ), ||, c, ., isSetterDef, (, ), ), {, add, (, c, ), ;, }, else, {]
[., isGetterDef, (, ), ||, c, ., isSetterDef, (, ), ), {, add, (, c, ), ;, }, else, {]
[||, c, ., isSetterDef, (, ), ), {, add, (, c, ), ;, }, else, {, Preconditions, ., checkState, (]
[||, c, ., isSetterDef, (, ), ), {, add, (, c, ), ;, }, else, {, Preconditions, ., checkState, (]
[c, ), ;, }, else, {, Preconditions, ., checkState, (, c, ., isStringKey, (, ), ), ;, String, key, =]
[c, ), ;, }, else, {, Preconditions, ., checkState, (, c, ., isStringKey, (, ), ), ;, String, key, =]
[checkState, (, c, ., isStringKey, (, ), ), ;, String, key, =, c, ., getString, (, ), ;, if, (]
[checkState, (, c, ., isStringKey, (, ), ), ;, String, key, =, c, ., getString, (, ), ;, if, (]
[checkState, (, c, ., isStringKey, (, ), ), ;, String, key, =, c, ., getString, (, ), ;, if, (]
[checkState, (, c, ., isStringKey, (, ), ), ;, String, key, =, c, ., getString, (, ), ;, if, (]
[(, c, ., isStringKey, (, ), ), ;, String, key, =, c, ., getString, (, ), ;, if, (, !]
[(, c, ., isStringKey, (, ), ), ;, String, key, =, c, ., getString, (, ), ;, if, (, !]
[), ;, String, key, =, c, ., getString, (, ), ;, if, (, !, c, ., isQuotedString, (, ), &&]
[;, String, key, =, c, ., getString, (, ), ;, if, (, !, c, ., isQuotedString, (, ), &&, !]
[;, String, key, =, c, ., getString, (, ), ;, if, (, !, c, ., isQuotedString, (, ), &&, !]
[c, ., getString, (, ), ;, if, (, !, c, ., isQuotedString, (, ), &&, !, TokenStream, ., isKeyword, (]
[(, ), ;, if, (, !, c, ., isQuotedString, (, ), &&, !, TokenStream, ., isKeyword, (, key, ), &&]
[(, ), ;, if, (, !, c, ., isQuotedString, (, ), &&, !, TokenStream, ., isKeyword, (, key, ), &&]
[(, !, c, ., isQuotedString, (, ), &&, !, TokenStream, ., isKeyword, (, key, ), &&, TokenStream, ., isJSIdentifier, (]
[., isQuotedString, (, ), &&, !, TokenStream, ., isKeyword, (, key, ), &&, TokenStream, ., isJSIdentifier, (, key, ), &&]
[., isQuotedString, (, ), &&, !, TokenStream, ., isKeyword, (, key, ), &&, TokenStream, ., isJSIdentifier, (, key, ), &&]
[&&, !, TokenStream, ., isKeyword, (, key, ), &&, TokenStream, ., isJSIdentifier, (, key, ), &&, NodeUtil, ., isLatin, (]
[isKeyword, (, key, ), &&, TokenStream, ., isJSIdentifier, (, key, ), &&, NodeUtil, ., isLatin, (, key, ), ), {]
[key, ), &&, TokenStream, ., isJSIdentifier, (, key, ), &&, NodeUtil, ., isLatin, (, key, ), ), {, add, (]
[&&, NodeUtil, ., isLatin, (, key, ), ), {, add, (, key, ), ;, }, else, {, double, d, =]
[., isLatin, (, key, ), ), {, add, (, key, ), ;, }, else, {, double, d, =, getSimpleNumber, (]
[), {, add, (, key, ), ;, }, else, {, double, d, =, getSimpleNumber, (, key, ), ;, if, (]
[{, add, (, key, ), ;, }, else, {, double, d, =, getSimpleNumber, (, key, ), ;, if, (, !]
[{, add, (, key, ), ;, }, else, {, double, d, =, getSimpleNumber, (, key, ), ;, if, (, !]
[), ;, }, else, {, double, d, =, getSimpleNumber, (, key, ), ;, if, (, !, Double, ., isNaN, (]
[{, double, d, =, getSimpleNumber, (, key, ), ;, if, (, !, Double, ., isNaN, (, d, ), ), {]
[{, double, d, =, getSimpleNumber, (, key, ), ;, if, (, !, Double, ., isNaN, (, d, ), ), {]
[getSimpleNumber, (, key, ), ;, if, (, !, Double, ., isNaN, (, d, ), ), {, cc, ., addNumber, (]
[(, !, Double, ., isNaN, (, d, ), ), {, cc, ., addNumber, (, d, ), ;, }, else, {]
[Double, ., isNaN, (, d, ), ), {, cc, ., addNumber, (, d, ), ;, }, else, {, addExpr, (]
[isNaN, (, d, ), ), {, cc, ., addNumber, (, d, ), ;, }, else, {, addExpr, (, c, ,]
[d, ), ), {, cc, ., addNumber, (, d, ), ;, }, else, {, addExpr, (, c, ,, 1, ,]
[d, ), ), {, cc, ., addNumber, (, d, ), ;, }, else, {, addExpr, (, c, ,, 1, ,]
[(, d, ), ;, }, else, {, addExpr, (, c, ,, 1, ,, Context, ., OTHER, ), ;, }, }]
[), ;, }, else, {, addExpr, (, c, ,, 1, ,, Context, ., OTHER, ), ;, }, }, add, (]
[else, {, addExpr, (, c, ,, 1, ,, Context, ., OTHER, ), ;, }, }, add, (, ":", ), ;]
[addExpr, (, c, ,, 1, ,, Context, ., OTHER, ), ;, }, }, add, (, ":", ), ;, addExpr, (]
[addExpr, (, c, ,, 1, ,, Context, ., OTHER, ), ;, }, }, add, (, ":", ), ;, addExpr, (]
[Context, ., OTHER, ), ;, }, }, add, (, ":", ), ;, addExpr, (, c, ., getFirstChild, (, ), ,]
[OTHER, ), ;, }, }, add, (, ":", ), ;, addExpr, (, c, ., getFirstChild, (, ), ,, 1, ,]
[OTHER, ), ;, }, }, add, (, ":", ), ;, addExpr, (, c, ., getFirstChild, (, ), ,, 1, ,]
[":", ), ;, addExpr, (, c, ., getFirstChild, (, ), ,, 1, ,, Context, ., OTHER, ), ;, }, }]
[;, addExpr, (, c, ., getFirstChild, (, ), ,, 1, ,, Context, ., OTHER, ), ;, }, }, add, (]
[getFirstChild, (, ), ,, 1, ,, Context, ., OTHER, ), ;, }, }, add, (, "}", ), ;, if, (]
[,, 1, ,, Context, ., OTHER, ), ;, }, }, add, (, "}", ), ;, if, (, needsParens, ), {]
[,, Context, ., OTHER, ), ;, }, }, add, (, "}", ), ;, if, (, needsParens, ), {, add, (]
[add, (, "}", ), ;, if, (, needsParens, ), {, add, (, ")", ), ;, }, break, ;, }, case]
[add, (, "}", ), ;, if, (, needsParens, ), {, add, (, ")", ), ;, }, break, ;, }, case]
[;, if, (, needsParens, ), {, add, (, ")", ), ;, }, break, ;, }, case, Token, ., SWITCH, :]
[(, needsParens, ), {, add, (, ")", ), ;, }, break, ;, }, case, Token, ., SWITCH, :, add, (]
[{, add, (, ")", ), ;, }, break, ;, }, case, Token, ., SWITCH, :, add, (, "switch(", ), ;]
[(, ")", ), ;, }, break, ;, }, case, Token, ., SWITCH, :, add, (, "switch(", ), ;, add, (]
[;, }, break, ;, }, case, Token, ., SWITCH, :, add, (, "switch(", ), ;, add, (, first, ), ;]
[break, ;, }, case, Token, ., SWITCH, :, add, (, "switch(", ), ;, add, (, first, ), ;, add, (]
[case, Token, ., SWITCH, :, add, (, "switch(", ), ;, add, (, first, ), ;, add, (, ")", ), ;]
[case, Token, ., SWITCH, :, add, (, "switch(", ), ;, add, (, first, ), ;, add, (, ")", ), ;]
[(, "switch(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, cc, ., beginBlock, (, ), ;]
[), ;, add, (, first, ), ;, add, (, ")", ), ;, cc, ., beginBlock, (, ), ;, addAllSiblings, (]
[), ;, add, (, first, ), ;, add, (, ")", ), ;, cc, ., beginBlock, (, ), ;, addAllSiblings, (]
[add, (, ")", ), ;, cc, ., beginBlock, (, ), ;, addAllSiblings, (, first, ., getNext, (, ), ), ;]
[add, (, ")", ), ;, cc, ., beginBlock, (, ), ;, addAllSiblings, (, first, ., getNext, (, ), ), ;]
[;, cc, ., beginBlock, (, ), ;, addAllSiblings, (, first, ., getNext, (, ), ), ;, cc, ., endBlock, (]
[;, cc, ., beginBlock, (, ), ;, addAllSiblings, (, first, ., getNext, (, ), ), ;, cc, ., endBlock, (]
[., beginBlock, (, ), ;, addAllSiblings, (, first, ., getNext, (, ), ), ;, cc, ., endBlock, (, context, ==]
[., beginBlock, (, ), ;, addAllSiblings, (, first, ., getNext, (, ), ), ;, cc, ., endBlock, (, context, ==]
[., getNext, (, ), ), ;, cc, ., endBlock, (, context, ==, Context, ., STATEMENT, ), ;, break, ;, case]
[., getNext, (, ), ), ;, cc, ., endBlock, (, context, ==, Context, ., STATEMENT, ), ;, break, ;, case]
[), ;, cc, ., endBlock, (, context, ==, Context, ., STATEMENT, ), ;, break, ;, case, Token, ., CASE, :]
[), ;, cc, ., endBlock, (, context, ==, Context, ., STATEMENT, ), ;, break, ;, case, Token, ., CASE, :]
[endBlock, (, context, ==, Context, ., STATEMENT, ), ;, break, ;, case, Token, ., CASE, :, Preconditions, ., checkState, (]
[endBlock, (, context, ==, Context, ., STATEMENT, ), ;, break, ;, case, Token, ., CASE, :, Preconditions, ., checkState, (]
[context, ==, Context, ., STATEMENT, ), ;, break, ;, case, Token, ., CASE, :, Preconditions, ., checkState, (, childCount, ==]
[., STATEMENT, ), ;, break, ;, case, Token, ., CASE, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;]
[), ;, break, ;, case, Token, ., CASE, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (]
[;, case, Token, ., CASE, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "case ", ), ;]
[Token, ., CASE, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "case ", ), ;, add, (]
[:, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "case ", ), ;, add, (, first, ), ;]
[., checkState, (, childCount, ==, 2, ), ;, add, (, "case ", ), ;, add, (, first, ), ;, addCaseBody, (]
[), ;, add, (, "case ", ), ;, add, (, first, ), ;, addCaseBody, (, last, ), ;, break, ;, case]
[), ;, add, (, "case ", ), ;, add, (, first, ), ;, addCaseBody, (, last, ), ;, break, ;, case]
["case ", ), ;, add, (, first, ), ;, addCaseBody, (, last, ), ;, break, ;, case, Token, ., DEFAULT_CASE, :]
["case ", ), ;, add, (, first, ), ;, addCaseBody, (, last, ), ;, break, ;, case, Token, ., DEFAULT_CASE, :]
[(, first, ), ;, addCaseBody, (, last, ), ;, break, ;, case, Token, ., DEFAULT_CASE, :, Preconditions, ., checkState, (]
[(, first, ), ;, addCaseBody, (, last, ), ;, break, ;, case, Token, ., DEFAULT_CASE, :, Preconditions, ., checkState, (]
[), ;, addCaseBody, (, last, ), ;, break, ;, case, Token, ., DEFAULT_CASE, :, Preconditions, ., checkState, (, childCount, ==]
[(, last, ), ;, break, ;, case, Token, ., DEFAULT_CASE, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;]
[), ;, break, ;, case, Token, ., DEFAULT_CASE, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (]
[;, case, Token, ., DEFAULT_CASE, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, "default", ), ;]
[Token, ., DEFAULT_CASE, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, "default", ), ;, addCaseBody, (]
[checkState, (, childCount, ==, 1, ), ;, add, (, "default", ), ;, addCaseBody, (, first, ), ;, break, ;, case]
[checkState, (, childCount, ==, 1, ), ;, add, (, "default", ), ;, addCaseBody, (, first, ), ;, break, ;, case]
[1, ), ;, add, (, "default", ), ;, addCaseBody, (, first, ), ;, break, ;, case, Token, ., LABEL, :]
[1, ), ;, add, (, "default", ), ;, addCaseBody, (, first, ), ;, break, ;, case, Token, ., LABEL, :]
[(, "default", ), ;, addCaseBody, (, first, ), ;, break, ;, case, Token, ., LABEL, :, Preconditions, ., checkState, (]
[(, "default", ), ;, addCaseBody, (, first, ), ;, break, ;, case, Token, ., LABEL, :, Preconditions, ., checkState, (]
[), ;, addCaseBody, (, first, ), ;, break, ;, case, Token, ., LABEL, :, Preconditions, ., checkState, (, childCount, ==]
[), ;, break, ;, case, Token, ., LABEL, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, if, (]
[;, break, ;, case, Token, ., LABEL, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, if, (, !]
[;, break, ;, case, Token, ., LABEL, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, if, (, !]
[Preconditions, ., checkState, (, childCount, ==, 2, ), ;, if, (, !, first, ., isLabelName, (, ), ), {, throw]
[(, childCount, ==, 2, ), ;, if, (, !, first, ., isLabelName, (, ), ), {, throw, new, Error, (]
[), ;, if, (, !, first, ., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }]
[if, (, !, first, ., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (]
[first, ., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, first, ), ;]
[isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, first, ), ;, add, (]
[), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, first, ), ;, add, (, ":", ), ;]
[throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, first, ), ;, add, (, ":", ), ;, addNonEmptyStatement, (]
[Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, first, ), ;, add, (, ":", ), ;, addNonEmptyStatement, (, last, ,]
["Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, first, ), ;, add, (, ":", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (]
[}, add, (, first, ), ;, add, (, ":", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,]
[add, (, ":", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, true, ), ;, break, ;, case]
[add, (, ":", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, true, ), ;, break, ;, case]
[;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, true, ), ;, break, ;, case, Token, ., CAST, :]
[(, last, ,, getContextForNonEmptyExpression, (, context, ), ,, true, ), ;, break, ;, case, Token, ., CAST, :, add, (]
[getContextForNonEmptyExpression, (, context, ), ,, true, ), ;, break, ;, case, Token, ., CAST, :, add, (, "(", ), ;]
[context, ), ,, true, ), ;, break, ;, case, Token, ., CAST, :, add, (, "(", ), ;, add, (]
[true, ), ;, break, ;, case, Token, ., CAST, :, add, (, "(", ), ;, add, (, first, ), ;]
[;, break, ;, case, Token, ., CAST, :, add, (, "(", ), ;, add, (, first, ), ;, add, (]
[add, (, "(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, break, ;, default, :, throw]
[), ;, add, (, first, ), ;, add, (, ")", ), ;, break, ;, default, :, throw, new, Error, (]
[), ;, add, (, first, ), ;, add, (, ")", ), ;, break, ;, default, :, throw, new, Error, (]
[), ;, add, (, first, ), ;, add, (, ")", ), ;, break, ;, default, :, throw, new, Error, (]
[), ;, add, (, first, ), ;, add, (, ")", ), ;, break, ;, default, :, throw, new, Error, (]
[add, (, first, ), ;, add, (, ")", ), ;, break, ;, default, :, throw, new, Error, (, "Unknown type ", +]
[first, ), ;, add, (, ")", ), ;, break, ;, default, :, throw, new, Error, (, "Unknown type ", +, type, +]
[;, add, (, ")", ), ;, break, ;, default, :, throw, new, Error, (, "Unknown type ", +, type, +, "\n", +]
[;, add, (, ")", ), ;, break, ;, default, :, throw, new, Error, (, "Unknown type ", +, type, +, "\n", +]
[default, :, throw, new, Error, (, "Unknown type ", +, type, +, "\n", +, n, ., toStringTree, (, ), ), ;, }]
[default, :, throw, new, Error, (, "Unknown type ", +, type, +, "\n", +, n, ., toStringTree, (, ), ), ;, }]
[Error, (, "Unknown type ", +, type, +, "\n", +, n, ., toStringTree, (, ), ), ;, }, cc, ., endSourceMapping, (]
[,, String, opStr, ,, Context, context, ,, Context, rhsContext, ,, int, leftPrecedence, ,, int, rightPrecedence, ), {, Node, firstNonOperator, =]
[,, String, opStr, ,, Context, context, ,, Context, rhsContext, ,, int, leftPrecedence, ,, int, rightPrecedence, ), {, Node, firstNonOperator, =]
[rhsContext, ,, int, leftPrecedence, ,, int, rightPrecedence, ), {, Node, firstNonOperator, =, n, ., getFirstChild, (, ), ;, while, (]
[rhsContext, ,, int, leftPrecedence, ,, int, rightPrecedence, ), {, Node, firstNonOperator, =, n, ., getFirstChild, (, ), ;, while, (]
[rhsContext, ,, int, leftPrecedence, ,, int, rightPrecedence, ), {, Node, firstNonOperator, =, n, ., getFirstChild, (, ), ;, while, (]
[rightPrecedence, ), {, Node, firstNonOperator, =, n, ., getFirstChild, (, ), ;, while, (, firstNonOperator, ., getType, (, ), ==]
[Node, firstNonOperator, =, n, ., getFirstChild, (, ), ;, while, (, firstNonOperator, ., getType, (, ), ==, op, ), {]
[=, n, ., getFirstChild, (, ), ;, while, (, firstNonOperator, ., getType, (, ), ==, op, ), {, firstNonOperator, =]
[=, n, ., getFirstChild, (, ), ;, while, (, firstNonOperator, ., getType, (, ), ==, op, ), {, firstNonOperator, =]
[while, (, firstNonOperator, ., getType, (, ), ==, op, ), {, firstNonOperator, =, firstNonOperator, ., getFirstChild, (, ), ;, }]
[firstNonOperator, ., getType, (, ), ==, op, ), {, firstNonOperator, =, firstNonOperator, ., getFirstChild, (, ), ;, }, addExpr, (]
[getType, (, ), ==, op, ), {, firstNonOperator, =, firstNonOperator, ., getFirstChild, (, ), ;, }, addExpr, (, firstNonOperator, ,]
[), ==, op, ), {, firstNonOperator, =, firstNonOperator, ., getFirstChild, (, ), ;, }, addExpr, (, firstNonOperator, ,, leftPrecedence, ,]
[=, firstNonOperator, ., getFirstChild, (, ), ;, }, addExpr, (, firstNonOperator, ,, leftPrecedence, ,, context, ), ;, Node, current, =]
[(, ), ;, }, addExpr, (, firstNonOperator, ,, leftPrecedence, ,, context, ), ;, Node, current, =, firstNonOperator, ;, do, {]
[;, }, addExpr, (, firstNonOperator, ,, leftPrecedence, ,, context, ), ;, Node, current, =, firstNonOperator, ;, do, {, current, =]
[;, }, addExpr, (, firstNonOperator, ,, leftPrecedence, ,, context, ), ;, Node, current, =, firstNonOperator, ;, do, {, current, =]
[leftPrecedence, ,, context, ), ;, Node, current, =, firstNonOperator, ;, do, {, current, =, current, ., getParent, (, ), ;]
[leftPrecedence, ,, context, ), ;, Node, current, =, firstNonOperator, ;, do, {, current, =, current, ., getParent, (, ), ;]
[;, Node, current, =, firstNonOperator, ;, do, {, current, =, current, ., getParent, (, ), ;, cc, ., addOp, (]
[current, =, firstNonOperator, ;, do, {, current, =, current, ., getParent, (, ), ;, cc, ., addOp, (, opStr, ,]
[;, do, {, current, =, current, ., getParent, (, ), ;, cc, ., addOp, (, opStr, ,, true, ), ;]
[{, current, =, current, ., getParent, (, ), ;, cc, ., addOp, (, opStr, ,, true, ), ;, addExpr, (]
[{, current, =, current, ., getParent, (, ), ;, cc, ., addOp, (, opStr, ,, true, ), ;, addExpr, (]
[{, current, =, current, ., getParent, (, ), ;, cc, ., addOp, (, opStr, ,, true, ), ;, addExpr, (]
[., addOp, (, opStr, ,, true, ), ;, addExpr, (, current, ., getFirstChild, (, ), ., getNext, (, ), ,]
[(, opStr, ,, true, ), ;, addExpr, (, current, ., getFirstChild, (, ), ., getNext, (, ), ,, rightPrecedence, ,]
[addExpr, (, current, ., getFirstChild, (, ), ., getNext, (, ), ,, rightPrecedence, ,, rhsContext, ), ;, }, while, (]
[addExpr, (, current, ., getFirstChild, (, ), ., getNext, (, ), ,, rightPrecedence, ,, rhsContext, ), ;, }, while, (]
[current, ., getFirstChild, (, ), ., getNext, (, ), ,, rightPrecedence, ,, rhsContext, ), ;, }, while, (, current, !=]
[}, while, (, current, !=, n, ), ;, }, static, boolean, isSimpleNumber, (, String, s, ), {, int, len, =]
[}, while, (, current, !=, n, ), ;, }, static, boolean, isSimpleNumber, (, String, s, ), {, int, len, =]
[isSimpleNumber, (, String, s, ), {, int, len, =, s, ., length, (, ), ;, for, (, int, index, =]
[String, s, ), {, int, len, =, s, ., length, (, ), ;, for, (, int, index, =, 0, ;]
[String, s, ), {, int, len, =, s, ., length, (, ), ;, for, (, int, index, =, 0, ;]
[), {, int, len, =, s, ., length, (, ), ;, for, (, int, index, =, 0, ;, index, <]
[int, len, =, s, ., length, (, ), ;, for, (, int, index, =, 0, ;, index, <, len, ;]
[int, len, =, s, ., length, (, ), ;, for, (, int, index, =, 0, ;, index, <, len, ;]
[), ;, for, (, int, index, =, 0, ;, index, <, len, ;, index, ++, ), {, char, c, =]
[), ;, for, (, int, index, =, 0, ;, index, <, len, ;, index, ++, ), {, char, c, =]
[int, index, =, 0, ;, index, <, len, ;, index, ++, ), {, char, c, =, s, ., charAt, (]
[index, <, len, ;, index, ++, ), {, char, c, =, s, ., charAt, (, index, ), ;, if, (]
[index, <, len, ;, index, ++, ), {, char, c, =, s, ., charAt, (, index, ), ;, if, (]
[index, <, len, ;, index, ++, ), {, char, c, =, s, ., charAt, (, index, ), ;, if, (]
[len, ;, index, ++, ), {, char, c, =, s, ., charAt, (, index, ), ;, if, (, c, <]
[index, ++, ), {, char, c, =, s, ., charAt, (, index, ), ;, if, (, c, <, '0', ||]
[index, ++, ), {, char, c, =, s, ., charAt, (, index, ), ;, if, (, c, <, '0', ||]
[), {, char, c, =, s, ., charAt, (, index, ), ;, if, (, c, <, '0', ||, c, >]
[=, s, ., charAt, (, index, ), ;, if, (, c, <, '0', ||, c, >, '9', ), {, return]
[index, ), ;, if, (, c, <, '0', ||, c, >, '9', ), {, return, false, ;, }, }, return]
[index, ), ;, if, (, c, <, '0', ||, c, >, '9', ), {, return, false, ;, }, }, return]
[index, ), ;, if, (, c, <, '0', ||, c, >, '9', ), {, return, false, ;, }, }, return]
[;, if, (, c, <, '0', ||, c, >, '9', ), {, return, false, ;, }, }, return, len, >]
[(, c, <, '0', ||, c, >, '9', ), {, return, false, ;, }, }, return, len, >, 0, &&]
[(, c, <, '0', ||, c, >, '9', ), {, return, false, ;, }, }, return, len, >, 0, &&]
[(, c, <, '0', ||, c, >, '9', ), {, return, false, ;, }, }, return, len, >, 0, &&]
[||, c, >, '9', ), {, return, false, ;, }, }, return, len, >, 0, &&, s, ., charAt, (]
['9', ), {, return, false, ;, }, }, return, len, >, 0, &&, s, ., charAt, (, 0, ), !=]
[s, ., charAt, (, 0, ), !=, '0', ;, }, static, double, getSimpleNumber, (, String, s, ), {, if, (]
[charAt, (, 0, ), !=, '0', ;, }, static, double, getSimpleNumber, (, String, s, ), {, if, (, isSimpleNumber, (]
[double, getSimpleNumber, (, String, s, ), {, if, (, isSimpleNumber, (, s, ), ), {, try, {, long, l, =]
[double, getSimpleNumber, (, String, s, ), {, if, (, isSimpleNumber, (, s, ), ), {, try, {, long, l, =]
[s, ), {, if, (, isSimpleNumber, (, s, ), ), {, try, {, long, l, =, Long, ., parseLong, (]
[isSimpleNumber, (, s, ), ), {, try, {, long, l, =, Long, ., parseLong, (, s, ), ;, if, (]
[isSimpleNumber, (, s, ), ), {, try, {, long, l, =, Long, ., parseLong, (, s, ), ;, if, (]
[s, ), ), {, try, {, long, l, =, Long, ., parseLong, (, s, ), ;, if, (, l, <]
[s, ), ), {, try, {, long, l, =, Long, ., parseLong, (, s, ), ;, if, (, l, <]
[long, l, =, Long, ., parseLong, (, s, ), ;, if, (, l, <, NodeUtil, ., MAX_POSITIVE_INTEGER_NUMBER, ), {, return]
[<, NodeUtil, ., MAX_POSITIVE_INTEGER_NUMBER, ), {, return, l, ;, }, }, catch, (, NumberFormatException, e, ), {, }, }, return]
[<, NodeUtil, ., MAX_POSITIVE_INTEGER_NUMBER, ), {, return, l, ;, }, }, catch, (, NumberFormatException, e, ), {, }, }, return]
[e, ), {, }, }, return, Double, ., NaN, ;, }, private, boolean, isIndirectEval, (, Node, n, ), {, return]
[e, ), {, }, }, return, Double, ., NaN, ;, }, private, boolean, isIndirectEval, (, Node, n, ), {, return]
[e, ), {, }, }, return, Double, ., NaN, ;, }, private, boolean, isIndirectEval, (, Node, n, ), {, return]
[e, ), {, }, }, return, Double, ., NaN, ;, }, private, boolean, isIndirectEval, (, Node, n, ), {, return]
[Double, ., NaN, ;, }, private, boolean, isIndirectEval, (, Node, n, ), {, return, n, ., isName, (, ), &&]
[Double, ., NaN, ;, }, private, boolean, isIndirectEval, (, Node, n, ), {, return, n, ., isName, (, ), &&]
[}, private, boolean, isIndirectEval, (, Node, n, ), {, return, n, ., isName, (, ), &&, "eval", ., equals, (]
[}, private, boolean, isIndirectEval, (, Node, n, ), {, return, n, ., isName, (, ), &&, "eval", ., equals, (]
[), {, return, n, ., isName, (, ), &&, "eval", ., equals, (, n, ., getString, (, ), ), &&]
[{, return, n, ., isName, (, ), &&, "eval", ., equals, (, n, ., getString, (, ), ), &&, !]
[{, return, n, ., isName, (, ), &&, "eval", ., equals, (, n, ., getString, (, ), ), &&, !]
[isName, (, ), &&, "eval", ., equals, (, n, ., getString, (, ), ), &&, !, n, ., getBooleanProp, (]
[isName, (, ), &&, "eval", ., equals, (, n, ., getString, (, ), ), &&, !, n, ., getBooleanProp, (]
[), ;, }, private, void, addNonEmptyStatement, (, Node, n, ,, Context, context, ,, boolean, allowNonBlockChild, ), {, Node, nodeToProcess, =]
[void, addNonEmptyStatement, (, Node, n, ,, Context, context, ,, boolean, allowNonBlockChild, ), {, Node, nodeToProcess, =, n, ;, if, (]
[void, addNonEmptyStatement, (, Node, n, ,, Context, context, ,, boolean, allowNonBlockChild, ), {, Node, nodeToProcess, =, n, ;, if, (]
[addNonEmptyStatement, (, Node, n, ,, Context, context, ,, boolean, allowNonBlockChild, ), {, Node, nodeToProcess, =, n, ;, if, (, !]
[Node, n, ,, Context, context, ,, boolean, allowNonBlockChild, ), {, Node, nodeToProcess, =, n, ;, if, (, !, allowNonBlockChild, &&]
[n, ,, Context, context, ,, boolean, allowNonBlockChild, ), {, Node, nodeToProcess, =, n, ;, if, (, !, allowNonBlockChild, &&, !]
[n, ,, Context, context, ,, boolean, allowNonBlockChild, ), {, Node, nodeToProcess, =, n, ;, if, (, !, allowNonBlockChild, &&, !]
[{, Node, nodeToProcess, =, n, ;, if, (, !, allowNonBlockChild, &&, !, n, ., isBlock, (, ), ), {, throw]
[=, n, ;, if, (, !, allowNonBlockChild, &&, !, n, ., isBlock, (, ), ), {, throw, new, Error, (]
[allowNonBlockChild, &&, !, n, ., isBlock, (, ), ), {, throw, new, Error, (, "Missing BLOCK child.", ), ;, }, if, (]
[allowNonBlockChild, &&, !, n, ., isBlock, (, ), ), {, throw, new, Error, (, "Missing BLOCK child.", ), ;, }, if, (]
[throw, new, Error, (, "Missing BLOCK child.", ), ;, }, if, (, n, ., isBlock, (, ), ), {, int, count, =]
[Error, (, "Missing BLOCK child.", ), ;, }, if, (, n, ., isBlock, (, ), ), {, int, count, =, getNonEmptyChildCount, (]
["Missing BLOCK child.", ), ;, }, if, (, n, ., isBlock, (, ), ), {, int, count, =, getNonEmptyChildCount, (, n, ,]
[(, n, ., isBlock, (, ), ), {, int, count, =, getNonEmptyChildCount, (, n, ,, 2, ), ;, if, (]
[(, n, ., isBlock, (, ), ), {, int, count, =, getNonEmptyChildCount, (, n, ,, 2, ), ;, if, (]
[., isBlock, (, ), ), {, int, count, =, getNonEmptyChildCount, (, n, ,, 2, ), ;, if, (, count, ==]
[{, int, count, =, getNonEmptyChildCount, (, n, ,, 2, ), ;, if, (, count, ==, 0, ), {, if, (]
[{, int, count, =, getNonEmptyChildCount, (, n, ,, 2, ), ;, if, (, count, ==, 0, ), {, if, (]
[,, 2, ), ;, if, (, count, ==, 0, ), {, if, (, cc, ., shouldPreserveExtraBlocks, (, ), ), {]
[,, 2, ), ;, if, (, count, ==, 0, ), {, if, (, cc, ., shouldPreserveExtraBlocks, (, ), ), {]
[count, ==, 0, ), {, if, (, cc, ., shouldPreserveExtraBlocks, (, ), ), {, cc, ., beginBlock, (, ), ;]
[count, ==, 0, ), {, if, (, cc, ., shouldPreserveExtraBlocks, (, ), ), {, cc, ., beginBlock, (, ), ;]
[{, if, (, cc, ., shouldPreserveExtraBlocks, (, ), ), {, cc, ., beginBlock, (, ), ;, cc, ., endBlock, (]
[{, if, (, cc, ., shouldPreserveExtraBlocks, (, ), ), {, cc, ., beginBlock, (, ), ;, cc, ., endBlock, (]
[., shouldPreserveExtraBlocks, (, ), ), {, cc, ., beginBlock, (, ), ;, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (]
[(, ), ), {, cc, ., beginBlock, (, ), ;, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,]
[(, ), ), {, cc, ., beginBlock, (, ), ;, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,]
[), {, cc, ., beginBlock, (, ), ;, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,, context, ==]
[), {, cc, ., beginBlock, (, ), ;, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,, context, ==]
[., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,, context, ==, Context, ., STATEMENT, ), ), ;, }, else, {]
[., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,, context, ==, Context, ., STATEMENT, ), ), ;, }, else, {]
[., breakAfterBlockFor, (, n, ,, context, ==, Context, ., STATEMENT, ), ), ;, }, else, {, cc, ., endStatement, (]
[STATEMENT, ), ), ;, }, else, {, cc, ., endStatement, (, true, ), ;, }, return, ;, }, if, (]
[STATEMENT, ), ), ;, }, else, {, cc, ., endStatement, (, true, ), ;, }, return, ;, }, if, (]
[), ;, }, else, {, cc, ., endStatement, (, true, ), ;, }, return, ;, }, if, (, count, ==]
[., endStatement, (, true, ), ;, }, return, ;, }, if, (, count, ==, 1, ), {, Node, firstAndOnlyChild, =]
[(, true, ), ;, }, return, ;, }, if, (, count, ==, 1, ), {, Node, firstAndOnlyChild, =, getFirstNonEmptyChild, (]
[;, }, if, (, count, ==, 1, ), {, Node, firstAndOnlyChild, =, getFirstNonEmptyChild, (, n, ), ;, boolean, alwaysWrapInBlock, =]
[;, }, if, (, count, ==, 1, ), {, Node, firstAndOnlyChild, =, getFirstNonEmptyChild, (, n, ), ;, boolean, alwaysWrapInBlock, =]
[{, Node, firstAndOnlyChild, =, getFirstNonEmptyChild, (, n, ), ;, boolean, alwaysWrapInBlock, =, cc, ., shouldPreserveExtraBlocks, (, ), ;, if, (]
[{, Node, firstAndOnlyChild, =, getFirstNonEmptyChild, (, n, ), ;, boolean, alwaysWrapInBlock, =, cc, ., shouldPreserveExtraBlocks, (, ), ;, if, (]
[firstAndOnlyChild, =, getFirstNonEmptyChild, (, n, ), ;, boolean, alwaysWrapInBlock, =, cc, ., shouldPreserveExtraBlocks, (, ), ;, if, (, alwaysWrapInBlock, ||]
[getFirstNonEmptyChild, (, n, ), ;, boolean, alwaysWrapInBlock, =, cc, ., shouldPreserveExtraBlocks, (, ), ;, if, (, alwaysWrapInBlock, ||, isOneExactlyFunctionOrDo, (]
[;, boolean, alwaysWrapInBlock, =, cc, ., shouldPreserveExtraBlocks, (, ), ;, if, (, alwaysWrapInBlock, ||, isOneExactlyFunctionOrDo, (, firstAndOnlyChild, ), ), {]
[;, boolean, alwaysWrapInBlock, =, cc, ., shouldPreserveExtraBlocks, (, ), ;, if, (, alwaysWrapInBlock, ||, isOneExactlyFunctionOrDo, (, firstAndOnlyChild, ), ), {]
[shouldPreserveExtraBlocks, (, ), ;, if, (, alwaysWrapInBlock, ||, isOneExactlyFunctionOrDo, (, firstAndOnlyChild, ), ), {, cc, ., beginBlock, (, ), ;]
[), ;, if, (, alwaysWrapInBlock, ||, isOneExactlyFunctionOrDo, (, firstAndOnlyChild, ), ), {, cc, ., beginBlock, (, ), ;, add, (]
[if, (, alwaysWrapInBlock, ||, isOneExactlyFunctionOrDo, (, firstAndOnlyChild, ), ), {, cc, ., beginBlock, (, ), ;, add, (, firstAndOnlyChild, ,]
[if, (, alwaysWrapInBlock, ||, isOneExactlyFunctionOrDo, (, firstAndOnlyChild, ), ), {, cc, ., beginBlock, (, ), ;, add, (, firstAndOnlyChild, ,]
[(, firstAndOnlyChild, ), ), {, cc, ., beginBlock, (, ), ;, add, (, firstAndOnlyChild, ,, Context, ., STATEMENT, ), ;]
[(, firstAndOnlyChild, ), ), {, cc, ., beginBlock, (, ), ;, add, (, firstAndOnlyChild, ,, Context, ., STATEMENT, ), ;]
[., beginBlock, (, ), ;, add, (, firstAndOnlyChild, ,, Context, ., STATEMENT, ), ;, cc, ., maybeLineBreak, (, ), ;]
[., beginBlock, (, ), ;, add, (, firstAndOnlyChild, ,, Context, ., STATEMENT, ), ;, cc, ., maybeLineBreak, (, ), ;]
[;, add, (, firstAndOnlyChild, ,, Context, ., STATEMENT, ), ;, cc, ., maybeLineBreak, (, ), ;, cc, ., endBlock, (]
[;, add, (, firstAndOnlyChild, ,, Context, ., STATEMENT, ), ;, cc, ., maybeLineBreak, (, ), ;, cc, ., endBlock, (]
[,, Context, ., STATEMENT, ), ;, cc, ., maybeLineBreak, (, ), ;, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (]
[., STATEMENT, ), ;, cc, ., maybeLineBreak, (, ), ;, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,]
[., STATEMENT, ), ;, cc, ., maybeLineBreak, (, ), ;, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,]
[), ;, cc, ., maybeLineBreak, (, ), ;, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,, context, ==]
[), ;, cc, ., maybeLineBreak, (, ), ;, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,, context, ==]
[(, cc, ., breakAfterBlockFor, (, n, ,, context, ==, Context, ., STATEMENT, ), ), ;, return, ;, }, else, {]
[., breakAfterBlockFor, (, n, ,, context, ==, Context, ., STATEMENT, ), ), ;, return, ;, }, else, {, nodeToProcess, =]
[==, Context, ., STATEMENT, ), ), ;, return, ;, }, else, {, nodeToProcess, =, firstAndOnlyChild, ;, }, }, if, (]
[==, Context, ., STATEMENT, ), ), ;, return, ;, }, else, {, nodeToProcess, =, firstAndOnlyChild, ;, }, }, if, (]
[., STATEMENT, ), ), ;, return, ;, }, else, {, nodeToProcess, =, firstAndOnlyChild, ;, }, }, if, (, count, >]
[), ;, return, ;, }, else, {, nodeToProcess, =, firstAndOnlyChild, ;, }, }, if, (, count, >, 1, ), {]
[return, ;, }, else, {, nodeToProcess, =, firstAndOnlyChild, ;, }, }, if, (, count, >, 1, ), {, context, =]
[return, ;, }, else, {, nodeToProcess, =, firstAndOnlyChild, ;, }, }, if, (, count, >, 1, ), {, context, =]
[;, }, }, if, (, count, >, 1, ), {, context, =, Context, ., PRESERVE_BLOCK, ;, }, }, if, (]
[;, }, }, if, (, count, >, 1, ), {, context, =, Context, ., PRESERVE_BLOCK, ;, }, }, if, (]
[1, ), {, context, =, Context, ., PRESERVE_BLOCK, ;, }, }, if, (, nodeToProcess, ., isEmpty, (, ), ), {]
[1, ), {, context, =, Context, ., PRESERVE_BLOCK, ;, }, }, if, (, nodeToProcess, ., isEmpty, (, ), ), {]
[=, Context, ., PRESERVE_BLOCK, ;, }, }, if, (, nodeToProcess, ., isEmpty, (, ), ), {, cc, ., endStatement, (]
[}, if, (, nodeToProcess, ., isEmpty, (, ), ), {, cc, ., endStatement, (, true, ), ;, }, else, {]
[(, nodeToProcess, ., isEmpty, (, ), ), {, cc, ., endStatement, (, true, ), ;, }, else, {, add, (]
[., isEmpty, (, ), ), {, cc, ., endStatement, (, true, ), ;, }, else, {, add, (, nodeToProcess, ,]
[{, cc, ., endStatement, (, true, ), ;, }, else, {, add, (, nodeToProcess, ,, context, ), ;, if, (]
[{, cc, ., endStatement, (, true, ), ;, }, else, {, add, (, nodeToProcess, ,, context, ), ;, if, (]
[;, }, else, {, add, (, nodeToProcess, ,, context, ), ;, if, (, nodeToProcess, ., isVar, (, ), ), {]
[;, }, else, {, add, (, nodeToProcess, ,, context, ), ;, if, (, nodeToProcess, ., isVar, (, ), ), {]
[{, cc, ., endStatement, (, ), ;, }, }, }, private, boolean, isOneExactlyFunctionOrDo, (, Node, n, ), {, if, (]
[{, cc, ., endStatement, (, ), ;, }, }, }, private, boolean, isOneExactlyFunctionOrDo, (, Node, n, ), {, if, (]
[private, boolean, isOneExactlyFunctionOrDo, (, Node, n, ), {, if, (, n, ., isLabel, (, ), ), {, Node, labeledStatement, =]
[private, boolean, isOneExactlyFunctionOrDo, (, Node, n, ), {, if, (, n, ., isLabel, (, ), ), {, Node, labeledStatement, =]
[if, (, n, ., isLabel, (, ), ), {, Node, labeledStatement, =, n, ., getLastChild, (, ), ;, if, (]
[(, n, ., isLabel, (, ), ), {, Node, labeledStatement, =, n, ., getLastChild, (, ), ;, if, (, !]
[(, n, ., isLabel, (, ), ), {, Node, labeledStatement, =, n, ., getLastChild, (, ), ;, if, (, !]
[Node, labeledStatement, =, n, ., getLastChild, (, ), ;, if, (, !, labeledStatement, ., isBlock, (, ), ), {, return]
[=, n, ., getLastChild, (, ), ;, if, (, !, labeledStatement, ., isBlock, (, ), ), {, return, isOneExactlyFunctionOrDo, (]
[(, !, labeledStatement, ., isBlock, (, ), ), {, return, isOneExactlyFunctionOrDo, (, labeledStatement, ), ;, }, else, {, if, (]
[(, !, labeledStatement, ., isBlock, (, ), ), {, return, isOneExactlyFunctionOrDo, (, labeledStatement, ), ;, }, else, {, if, (]
[labeledStatement, ., isBlock, (, ), ), {, return, isOneExactlyFunctionOrDo, (, labeledStatement, ), ;, }, else, {, if, (, getNonEmptyChildCount, (]
[isBlock, (, ), ), {, return, isOneExactlyFunctionOrDo, (, labeledStatement, ), ;, }, else, {, if, (, getNonEmptyChildCount, (, n, ,]
[), {, return, isOneExactlyFunctionOrDo, (, labeledStatement, ), ;, }, else, {, if, (, getNonEmptyChildCount, (, n, ,, 2, ), ==]
[(, labeledStatement, ), ;, }, else, {, if, (, getNonEmptyChildCount, (, n, ,, 2, ), ==, 1, ), {, return]
[), ;, }, else, {, if, (, getNonEmptyChildCount, (, n, ,, 2, ), ==, 1, ), {, return, isOneExactlyFunctionOrDo, (]
[}, else, {, if, (, getNonEmptyChildCount, (, n, ,, 2, ), ==, 1, ), {, return, isOneExactlyFunctionOrDo, (, getFirstNonEmptyChild, (]
[,, 2, ), ==, 1, ), {, return, isOneExactlyFunctionOrDo, (, getFirstNonEmptyChild, (, n, ), ), ;, }, else, {, return]
[isOneExactlyFunctionOrDo, (, getFirstNonEmptyChild, (, n, ), ), ;, }, else, {, return, false, ;, }, }, }, else, {, return]
[(, getFirstNonEmptyChild, (, n, ), ), ;, }, else, {, return, false, ;, }, }, }, else, {, return, (]
[(, getFirstNonEmptyChild, (, n, ), ), ;, }, else, {, return, false, ;, }, }, }, else, {, return, (]
[(, getFirstNonEmptyChild, (, n, ), ), ;, }, else, {, return, false, ;, }, }, }, else, {, return, (]
[;, }, else, {, return, false, ;, }, }, }, else, {, return, (, n, ., isFunction, (, ), ||]
[;, }, else, {, return, false, ;, }, }, }, else, {, return, (, n, ., isFunction, (, ), ||]
[), ;, }, }, private, void, addExpr, (, Node, n, ,, int, minPrecedence, ,, Context, context, ), {, if, (]
[), ;, }, }, private, void, addExpr, (, Node, n, ,, int, minPrecedence, ,, Context, context, ), {, if, (]
[;, }, }, private, void, addExpr, (, Node, n, ,, int, minPrecedence, ,, Context, context, ), {, if, (, (]
[;, }, }, private, void, addExpr, (, Node, n, ,, int, minPrecedence, ,, Context, context, ), {, if, (, (]
[;, }, }, private, void, addExpr, (, Node, n, ,, int, minPrecedence, ,, Context, context, ), {, if, (, (]
[void, addExpr, (, Node, n, ,, int, minPrecedence, ,, Context, context, ), {, if, (, (, NodeUtil, ., precedence, (]
[void, addExpr, (, Node, n, ,, int, minPrecedence, ,, Context, context, ), {, if, (, (, NodeUtil, ., precedence, (]
[minPrecedence, ,, Context, context, ), {, if, (, (, NodeUtil, ., precedence, (, n, ., getType, (, ), ), <]
[context, ), {, if, (, (, NodeUtil, ., precedence, (, n, ., getType, (, ), ), <, minPrecedence, ), ||]
[), {, if, (, (, NodeUtil, ., precedence, (, n, ., getType, (, ), ), <, minPrecedence, ), ||, (]
[), {, if, (, (, NodeUtil, ., precedence, (, n, ., getType, (, ), ), <, minPrecedence, ), ||, (]
[{, if, (, (, NodeUtil, ., precedence, (, n, ., getType, (, ), ), <, minPrecedence, ), ||, (, (]
[{, if, (, (, NodeUtil, ., precedence, (, n, ., getType, (, ), ), <, minPrecedence, ), ||, (, (]
[(, (, NodeUtil, ., precedence, (, n, ., getType, (, ), ), <, minPrecedence, ), ||, (, (, context, ==]
[(, (, NodeUtil, ., precedence, (, n, ., getType, (, ), ), <, minPrecedence, ), ||, (, (, context, ==]
[(, n, ., getType, (, ), ), <, minPrecedence, ), ||, (, (, context, ==, Context, ., IN_FOR_INIT_CLAUSE, ), &&]
[(, n, ., getType, (, ), ), <, minPrecedence, ), ||, (, (, context, ==, Context, ., IN_FOR_INIT_CLAUSE, ), &&]
[minPrecedence, ), ||, (, (, context, ==, Context, ., IN_FOR_INIT_CLAUSE, ), &&, n, ., isIn, (, ), ), ), {]
[||, (, (, context, ==, Context, ., IN_FOR_INIT_CLAUSE, ), &&, n, ., isIn, (, ), ), ), {, add, (]
[context, ==, Context, ., IN_FOR_INIT_CLAUSE, ), &&, n, ., isIn, (, ), ), ), {, add, (, "(", ), ;]
[Context, ., IN_FOR_INIT_CLAUSE, ), &&, n, ., isIn, (, ), ), ), {, add, (, "(", ), ;, add, (]
[IN_FOR_INIT_CLAUSE, ), &&, n, ., isIn, (, ), ), ), {, add, (, "(", ), ;, add, (, n, ,]
[IN_FOR_INIT_CLAUSE, ), &&, n, ., isIn, (, ), ), ), {, add, (, "(", ), ;, add, (, n, ,]
[isIn, (, ), ), ), {, add, (, "(", ), ;, add, (, n, ,, Context, ., OTHER, ), ;]
[), ), ), {, add, (, "(", ), ;, add, (, n, ,, Context, ., OTHER, ), ;, add, (]
["(", ), ;, add, (, n, ,, Context, ., OTHER, ), ;, add, (, ")", ), ;, }, else, {]
[;, add, (, n, ,, Context, ., OTHER, ), ;, add, (, ")", ), ;, }, else, {, add, (]
[(, n, ,, Context, ., OTHER, ), ;, add, (, ")", ), ;, }, else, {, add, (, n, ,]
[;, }, else, {, add, (, n, ,, context, ), ;, }, }, void, addList, (, Node, firstInList, ), {]
[else, {, add, (, n, ,, context, ), ;, }, }, void, addList, (, Node, firstInList, ), {, addList, (]
[add, (, n, ,, context, ), ;, }, }, void, addList, (, Node, firstInList, ), {, addList, (, firstInList, ,]
[n, ,, context, ), ;, }, }, void, addList, (, Node, firstInList, ), {, addList, (, firstInList, ,, true, ,]
[n, ,, context, ), ;, }, }, void, addList, (, Node, firstInList, ), {, addList, (, firstInList, ,, true, ,]
[firstInList, ,, true, ,, Context, ., OTHER, ), ;, }, void, addList, (, Node, firstInList, ,, boolean, isArrayOrFunctionArgument, ), {]
[true, ,, Context, ., OTHER, ), ;, }, void, addList, (, Node, firstInList, ,, boolean, isArrayOrFunctionArgument, ), {, addList, (]
[Context, ., OTHER, ), ;, }, void, addList, (, Node, firstInList, ,, boolean, isArrayOrFunctionArgument, ), {, addList, (, firstInList, ,]
[OTHER, ), ;, }, void, addList, (, Node, firstInList, ,, boolean, isArrayOrFunctionArgument, ), {, addList, (, firstInList, ,, isArrayOrFunctionArgument, ,]
[OTHER, ), ;, }, void, addList, (, Node, firstInList, ,, boolean, isArrayOrFunctionArgument, ), {, addList, (, firstInList, ,, isArrayOrFunctionArgument, ,]
[;, }, void, addList, (, Node, firstInList, ,, boolean, isArrayOrFunctionArgument, ,, Context, lhsContext, ), {, for, (, Node, n, =]
[void, addList, (, Node, firstInList, ,, boolean, isArrayOrFunctionArgument, ,, Context, lhsContext, ), {, for, (, Node, n, =, firstInList, ;]
[void, addList, (, Node, firstInList, ,, boolean, isArrayOrFunctionArgument, ,, Context, lhsContext, ), {, for, (, Node, n, =, firstInList, ;]
[(, Node, firstInList, ,, boolean, isArrayOrFunctionArgument, ,, Context, lhsContext, ), {, for, (, Node, n, =, firstInList, ;, n, !=]
[firstInList, ,, boolean, isArrayOrFunctionArgument, ,, Context, lhsContext, ), {, for, (, Node, n, =, firstInList, ;, n, !=, null, ;]
[boolean, isArrayOrFunctionArgument, ,, Context, lhsContext, ), {, for, (, Node, n, =, firstInList, ;, n, !=, null, ;, n, =]
[boolean, isArrayOrFunctionArgument, ,, Context, lhsContext, ), {, for, (, Node, n, =, firstInList, ;, n, !=, null, ;, n, =]
[n, =, firstInList, ;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, boolean, isFirst, =]
[n, =, firstInList, ;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, boolean, isFirst, =]
[firstInList, ;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, boolean, isFirst, =, n, ==]
[null, ;, n, =, n, ., getNext, (, ), ), {, boolean, isFirst, =, n, ==, firstInList, ;, if, (]
[=, n, ., getNext, (, ), ), {, boolean, isFirst, =, n, ==, firstInList, ;, if, (, isFirst, ), {]
[., getNext, (, ), ), {, boolean, isFirst, =, n, ==, firstInList, ;, if, (, isFirst, ), {, addExpr, (]
[(, ), ), {, boolean, isFirst, =, n, ==, firstInList, ;, if, (, isFirst, ), {, addExpr, (, n, ,]
[(, ), ), {, boolean, isFirst, =, n, ==, firstInList, ;, if, (, isFirst, ), {, addExpr, (, n, ,]
[), {, boolean, isFirst, =, n, ==, firstInList, ;, if, (, isFirst, ), {, addExpr, (, n, ,, isArrayOrFunctionArgument, ?]
[boolean, isFirst, =, n, ==, firstInList, ;, if, (, isFirst, ), {, addExpr, (, n, ,, isArrayOrFunctionArgument, ?, 1, :]
[=, n, ==, firstInList, ;, if, (, isFirst, ), {, addExpr, (, n, ,, isArrayOrFunctionArgument, ?, 1, :, 0, ,]
[(, isFirst, ), {, addExpr, (, n, ,, isArrayOrFunctionArgument, ?, 1, :, 0, ,, lhsContext, ), ;, }, else, {]
[(, isFirst, ), {, addExpr, (, n, ,, isArrayOrFunctionArgument, ?, 1, :, 0, ,, lhsContext, ), ;, }, else, {]
[n, ,, isArrayOrFunctionArgument, ?, 1, :, 0, ,, lhsContext, ), ;, }, else, {, cc, ., listSeparator, (, ), ;]
[isArrayOrFunctionArgument, ?, 1, :, 0, ,, lhsContext, ), ;, }, else, {, cc, ., listSeparator, (, ), ;, addExpr, (]
[1, :, 0, ,, lhsContext, ), ;, }, else, {, cc, ., listSeparator, (, ), ;, addExpr, (, n, ,]
[1, :, 0, ,, lhsContext, ), ;, }, else, {, cc, ., listSeparator, (, ), ;, addExpr, (, n, ,]
[0, ,, lhsContext, ), ;, }, else, {, cc, ., listSeparator, (, ), ;, addExpr, (, n, ,, isArrayOrFunctionArgument, ?]
[lhsContext, ), ;, }, else, {, cc, ., listSeparator, (, ), ;, addExpr, (, n, ,, isArrayOrFunctionArgument, ?, 1, :]
[;, }, else, {, cc, ., listSeparator, (, ), ;, addExpr, (, n, ,, isArrayOrFunctionArgument, ?, 1, :, 0, ,]
[;, }, else, {, cc, ., listSeparator, (, ), ;, addExpr, (, n, ,, isArrayOrFunctionArgument, ?, 1, :, 0, ,]
[0, ,, Context, ., OTHER, ), ;, }, }, }, void, addArrayList, (, Node, firstInList, ), {, boolean, lastWasEmpty, =]
[}, }, }, void, addArrayList, (, Node, firstInList, ), {, boolean, lastWasEmpty, =, false, ;, for, (, Node, n, =]
[}, void, addArrayList, (, Node, firstInList, ), {, boolean, lastWasEmpty, =, false, ;, for, (, Node, n, =, firstInList, ;]
[}, void, addArrayList, (, Node, firstInList, ), {, boolean, lastWasEmpty, =, false, ;, for, (, Node, n, =, firstInList, ;]
[addArrayList, (, Node, firstInList, ), {, boolean, lastWasEmpty, =, false, ;, for, (, Node, n, =, firstInList, ;, n, !=]
[Node, firstInList, ), {, boolean, lastWasEmpty, =, false, ;, for, (, Node, n, =, firstInList, ;, n, !=, null, ;]
[), {, boolean, lastWasEmpty, =, false, ;, for, (, Node, n, =, firstInList, ;, n, !=, null, ;, n, =]
[), {, boolean, lastWasEmpty, =, false, ;, for, (, Node, n, =, firstInList, ;, n, !=, null, ;, n, =]
[Node, n, =, firstInList, ;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, if, (]
[Node, n, =, firstInList, ;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, if, (]
[=, firstInList, ;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, if, (, n, !=]
[n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, if, (, n, !=, firstInList, ), {]
[n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, if, (, n, !=, firstInList, ), {]
[., getNext, (, ), ), {, if, (, n, !=, firstInList, ), {, cc, ., listSeparator, (, ), ;, }]
[(, ), ), {, if, (, n, !=, firstInList, ), {, cc, ., listSeparator, (, ), ;, }, addExpr, (]
[), {, if, (, n, !=, firstInList, ), {, cc, ., listSeparator, (, ), ;, }, addExpr, (, n, ,]
[if, (, n, !=, firstInList, ), {, cc, ., listSeparator, (, ), ;, }, addExpr, (, n, ,, 1, ,]
[if, (, n, !=, firstInList, ), {, cc, ., listSeparator, (, ), ;, }, addExpr, (, n, ,, 1, ,]
[), {, cc, ., listSeparator, (, ), ;, }, addExpr, (, n, ,, 1, ,, Context, ., OTHER, ), ;]
[cc, ., listSeparator, (, ), ;, }, addExpr, (, n, ,, 1, ,, Context, ., OTHER, ), ;, lastWasEmpty, =]
[cc, ., listSeparator, (, ), ;, }, addExpr, (, n, ,, 1, ,, Context, ., OTHER, ), ;, lastWasEmpty, =]
[n, ,, 1, ,, Context, ., OTHER, ), ;, lastWasEmpty, =, n, ., isEmpty, (, ), ;, }, if, (]
[,, Context, ., OTHER, ), ;, lastWasEmpty, =, n, ., isEmpty, (, ), ;, }, if, (, lastWasEmpty, ), {]
[,, Context, ., OTHER, ), ;, lastWasEmpty, =, n, ., isEmpty, (, ), ;, }, if, (, lastWasEmpty, ), {]
[if, (, lastWasEmpty, ), {, cc, ., listSeparator, (, ), ;, }, }, void, addCaseBody, (, Node, caseBody, ), {]
[if, (, lastWasEmpty, ), {, cc, ., listSeparator, (, ), ;, }, }, void, addCaseBody, (, Node, caseBody, ), {]
[., listSeparator, (, ), ;, }, }, void, addCaseBody, (, Node, caseBody, ), {, cc, ., beginCaseBody, (, ), ;]
[(, ), ;, }, }, void, addCaseBody, (, Node, caseBody, ), {, cc, ., beginCaseBody, (, ), ;, add, (]
[}, }, void, addCaseBody, (, Node, caseBody, ), {, cc, ., beginCaseBody, (, ), ;, add, (, caseBody, ), ;]
[}, }, void, addCaseBody, (, Node, caseBody, ), {, cc, ., beginCaseBody, (, ), ;, add, (, caseBody, ), ;]
[;, cc, ., endCaseBody, (, ), ;, }, void, addAllSiblings, (, Node, n, ), {, for, (, Node, c, =]
[., endCaseBody, (, ), ;, }, void, addAllSiblings, (, Node, n, ), {, for, (, Node, c, =, n, ;]
[., endCaseBody, (, ), ;, }, void, addAllSiblings, (, Node, n, ), {, for, (, Node, c, =, n, ;]
[(, ), ;, }, void, addAllSiblings, (, Node, n, ), {, for, (, Node, c, =, n, ;, c, !=]
[;, }, void, addAllSiblings, (, Node, n, ), {, for, (, Node, c, =, n, ;, c, !=, null, ;]
[void, addAllSiblings, (, Node, n, ), {, for, (, Node, c, =, n, ;, c, !=, null, ;, c, =]
[void, addAllSiblings, (, Node, n, ), {, for, (, Node, c, =, n, ;, c, !=, null, ;, c, =]
[for, (, Node, c, =, n, ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[Node, c, =, n, ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, add, (]
[), {, add, (, c, ), ;, }, }, private, void, addJsString, (, Node, n, ), {, String, s, =]
[), {, add, (, c, ), ;, }, }, private, void, addJsString, (, Node, n, ), {, String, s, =]
[private, void, addJsString, (, Node, n, ), {, String, s, =, n, ., getString, (, ), ;, boolean, useSlashV, =]
[private, void, addJsString, (, Node, n, ), {, String, s, =, n, ., getString, (, ), ;, boolean, useSlashV, =]
[Node, n, ), {, String, s, =, n, ., getString, (, ), ;, boolean, useSlashV, =, n, ., getBooleanProp, (]
[Node, n, ), {, String, s, =, n, ., getString, (, ), ;, boolean, useSlashV, =, n, ., getBooleanProp, (]
[n, ., getString, (, ), ;, boolean, useSlashV, =, n, ., getBooleanProp, (, Node, ., SLASH_V, ), ;, if, (]
[(, ), ;, boolean, useSlashV, =, n, ., getBooleanProp, (, Node, ., SLASH_V, ), ;, if, (, useSlashV, ), {]
[;, boolean, useSlashV, =, n, ., getBooleanProp, (, Node, ., SLASH_V, ), ;, if, (, useSlashV, ), {, add, (]
[useSlashV, =, n, ., getBooleanProp, (, Node, ., SLASH_V, ), ;, if, (, useSlashV, ), {, add, (, jsString, (]
[useSlashV, =, n, ., getBooleanProp, (, Node, ., SLASH_V, ), ;, if, (, useSlashV, ), {, add, (, jsString, (]
[Node, ., SLASH_V, ), ;, if, (, useSlashV, ), {, add, (, jsString, (, n, ., getString, (, ), ,]
[add, (, jsString, (, n, ., getString, (, ), ,, useSlashV, ), ), ;, }, else, {, String, cached, =]
[add, (, jsString, (, n, ., getString, (, ), ,, useSlashV, ), ), ;, }, else, {, String, cached, =]
[n, ., getString, (, ), ,, useSlashV, ), ), ;, }, else, {, String, cached, =, ESCAPED_JS_STRINGS, ., get, (]
[,, useSlashV, ), ), ;, }, else, {, String, cached, =, ESCAPED_JS_STRINGS, ., get, (, s, ), ;, if, (]
[,, useSlashV, ), ), ;, }, else, {, String, cached, =, ESCAPED_JS_STRINGS, ., get, (, s, ), ;, if, (]
[), ), ;, }, else, {, String, cached, =, ESCAPED_JS_STRINGS, ., get, (, s, ), ;, if, (, cached, ==]
[}, else, {, String, cached, =, ESCAPED_JS_STRINGS, ., get, (, s, ), ;, if, (, cached, ==, null, ), {]
[{, String, cached, =, ESCAPED_JS_STRINGS, ., get, (, s, ), ;, if, (, cached, ==, null, ), {, cached, =]
[cached, =, ESCAPED_JS_STRINGS, ., get, (, s, ), ;, if, (, cached, ==, null, ), {, cached, =, jsString, (]
[cached, =, ESCAPED_JS_STRINGS, ., get, (, s, ), ;, if, (, cached, ==, null, ), {, cached, =, jsString, (]
[s, ), ;, if, (, cached, ==, null, ), {, cached, =, jsString, (, n, ., getString, (, ), ,]
[if, (, cached, ==, null, ), {, cached, =, jsString, (, n, ., getString, (, ), ,, useSlashV, ), ;]
[if, (, cached, ==, null, ), {, cached, =, jsString, (, n, ., getString, (, ), ,, useSlashV, ), ;]
[null, ), {, cached, =, jsString, (, n, ., getString, (, ), ,, useSlashV, ), ;, ESCAPED_JS_STRINGS, ., put, (]
[{, cached, =, jsString, (, n, ., getString, (, ), ,, useSlashV, ), ;, ESCAPED_JS_STRINGS, ., put, (, s, ,]
[(, n, ., getString, (, ), ,, useSlashV, ), ;, ESCAPED_JS_STRINGS, ., put, (, s, ,, cached, ), ;, }]
[., getString, (, ), ,, useSlashV, ), ;, ESCAPED_JS_STRINGS, ., put, (, s, ,, cached, ), ;, }, add, (]
[(, cached, ), ;, }, }, private, String, jsString, (, String, s, ,, boolean, useSlashV, ), {, int, singleq, =]
[}, }, private, String, jsString, (, String, s, ,, boolean, useSlashV, ), {, int, singleq, =, 0, ,, doubleq, =]
[s, ,, boolean, useSlashV, ), {, int, singleq, =, 0, ,, doubleq, =, 0, ;, for, (, int, i, =]
[boolean, useSlashV, ), {, int, singleq, =, 0, ,, doubleq, =, 0, ;, for, (, int, i, =, 0, ;]
[boolean, useSlashV, ), {, int, singleq, =, 0, ,, doubleq, =, 0, ;, for, (, int, i, =, 0, ;]
[), {, int, singleq, =, 0, ,, doubleq, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), {, int, singleq, =, 0, ,, doubleq, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[,, doubleq, =, 0, ;, for, (, int, i, =, 0, ;, i, <, s, ., length, (, ), ;]
[,, doubleq, =, 0, ;, for, (, int, i, =, 0, ;, i, <, s, ., length, (, ), ;]
[(, int, i, =, 0, ;, i, <, s, ., length, (, ), ;, i, ++, ), {, switch, (]
[(, int, i, =, 0, ;, i, <, s, ., length, (, ), ;, i, ++, ), {, switch, (]
[0, ;, i, <, s, ., length, (, ), ;, i, ++, ), {, switch, (, s, ., charAt, (]
[., length, (, ), ;, i, ++, ), {, switch, (, s, ., charAt, (, i, ), ), {, case]
[(, ), ;, i, ++, ), {, switch, (, s, ., charAt, (, i, ), ), {, case, '"', :]
[(, ), ;, i, ++, ), {, switch, (, s, ., charAt, (, i, ), ), {, case, '"', :]
[{, switch, (, s, ., charAt, (, i, ), ), {, case, '"', :, doubleq, ++, ;, break, ;, case]
[(, s, ., charAt, (, i, ), ), {, case, '"', :, doubleq, ++, ;, break, ;, case, '\'', :]
[(, s, ., charAt, (, i, ), ), {, case, '"', :, doubleq, ++, ;, break, ;, case, '\'', :]
[case, '\'', :, singleq, ++, ;, break, ;, }, }, String, doublequote, ,, singlequote, ;, char, quote, ;, if, (]
[case, '\'', :, singleq, ++, ;, break, ;, }, }, String, doublequote, ,, singlequote, ;, char, quote, ;, if, (]
[:, singleq, ++, ;, break, ;, }, }, String, doublequote, ,, singlequote, ;, char, quote, ;, if, (, preferSingleQuotes, ?]
[singleq, ++, ;, break, ;, }, }, String, doublequote, ,, singlequote, ;, char, quote, ;, if, (, preferSingleQuotes, ?, (]
[singleq, ++, ;, break, ;, }, }, String, doublequote, ,, singlequote, ;, char, quote, ;, if, (, preferSingleQuotes, ?, (]
[;, break, ;, }, }, String, doublequote, ,, singlequote, ;, char, quote, ;, if, (, preferSingleQuotes, ?, (, singleq, <=]
[}, }, String, doublequote, ,, singlequote, ;, char, quote, ;, if, (, preferSingleQuotes, ?, (, singleq, <=, doubleq, ), :]
[}, String, doublequote, ,, singlequote, ;, char, quote, ;, if, (, preferSingleQuotes, ?, (, singleq, <=, doubleq, ), :, (]
[}, String, doublequote, ,, singlequote, ;, char, quote, ;, if, (, preferSingleQuotes, ?, (, singleq, <=, doubleq, ), :, (]
[doublequote, ,, singlequote, ;, char, quote, ;, if, (, preferSingleQuotes, ?, (, singleq, <=, doubleq, ), :, (, singleq, <]
[char, quote, ;, if, (, preferSingleQuotes, ?, (, singleq, <=, doubleq, ), :, (, singleq, <, doubleq, ), ), {]
[;, if, (, preferSingleQuotes, ?, (, singleq, <=, doubleq, ), :, (, singleq, <, doubleq, ), ), {, quote, =]
[(, preferSingleQuotes, ?, (, singleq, <=, doubleq, ), :, (, singleq, <, doubleq, ), ), {, quote, =, '\'', ;]
[?, (, singleq, <=, doubleq, ), :, (, singleq, <, doubleq, ), ), {, quote, =, '\'', ;, doublequote, =]
[singleq, <=, doubleq, ), :, (, singleq, <, doubleq, ), ), {, quote, =, '\'', ;, doublequote, =, "\"", ;]
[doubleq, ), :, (, singleq, <, doubleq, ), ), {, quote, =, '\'', ;, doublequote, =, "\"", ;, singlequote, =]
[<, doubleq, ), ), {, quote, =, '\'', ;, doublequote, =, "\"", ;, singlequote, =, "\\\'", ;, }, else, {]
[), ), {, quote, =, '\'', ;, doublequote, =, "\"", ;, singlequote, =, "\\\'", ;, }, else, {, quote, =]
[{, quote, =, '\'', ;, doublequote, =, "\"", ;, singlequote, =, "\\\'", ;, }, else, {, quote, =, '\"', ;]
[=, '\'', ;, doublequote, =, "\"", ;, singlequote, =, "\\\'", ;, }, else, {, quote, =, '\"', ;, doublequote, =]
[;, doublequote, =, "\"", ;, singlequote, =, "\\\'", ;, }, else, {, quote, =, '\"', ;, doublequote, =, "\\\"", ;]
[=, "\"", ;, singlequote, =, "\\\'", ;, }, else, {, quote, =, '\"', ;, doublequote, =, "\\\"", ;, singlequote, =]
[=, "\\\'", ;, }, else, {, quote, =, '\"', ;, doublequote, =, "\\\"", ;, singlequote, =, "\'", ;, }, return]
[;, }, else, {, quote, =, '\"', ;, doublequote, =, "\\\"", ;, singlequote, =, "\'", ;, }, return, strEscape, (]
[else, {, quote, =, '\"', ;, doublequote, =, "\\\"", ;, singlequote, =, "\'", ;, }, return, strEscape, (, s, ,]
[quote, =, '\"', ;, doublequote, =, "\\\"", ;, singlequote, =, "\'", ;, }, return, strEscape, (, s, ,, quote, ,]
['\"', ;, doublequote, =, "\\\"", ;, singlequote, =, "\'", ;, }, return, strEscape, (, s, ,, quote, ,, doublequote, ,]
[doublequote, =, "\\\"", ;, singlequote, =, "\'", ;, }, return, strEscape, (, s, ,, quote, ,, doublequote, ,, singlequote, ,]
["\\\"", ;, singlequote, =, "\'", ;, }, return, strEscape, (, s, ,, quote, ,, doublequote, ,, singlequote, ,, "\\\\", ,]
[singlequote, =, "\'", ;, }, return, strEscape, (, s, ,, quote, ,, doublequote, ,, singlequote, ,, "\\\\", ,, outputCharsetEncoder, ,]
["\'", ;, }, return, strEscape, (, s, ,, quote, ,, doublequote, ,, singlequote, ,, "\\\\", ,, outputCharsetEncoder, ,, useSlashV, ,]
[,, outputCharsetEncoder, ,, useSlashV, ,, false, ), ;, }, String, regexpEscape, (, String, s, ,, CharsetEncoder, outputCharsetEncoder, ), {, return]
[,, useSlashV, ,, false, ), ;, }, String, regexpEscape, (, String, s, ,, CharsetEncoder, outputCharsetEncoder, ), {, return, strEscape, (]
[,, false, ), ;, }, String, regexpEscape, (, String, s, ,, CharsetEncoder, outputCharsetEncoder, ), {, return, strEscape, (, s, ,]
[), ;, }, String, regexpEscape, (, String, s, ,, CharsetEncoder, outputCharsetEncoder, ), {, return, strEscape, (, s, ,, '/', ,]
[}, String, regexpEscape, (, String, s, ,, CharsetEncoder, outputCharsetEncoder, ), {, return, strEscape, (, s, ,, '/', ,, "\"", ,]
[regexpEscape, (, String, s, ,, CharsetEncoder, outputCharsetEncoder, ), {, return, strEscape, (, s, ,, '/', ,, "\"", ,, "'", ,]
[String, s, ,, CharsetEncoder, outputCharsetEncoder, ), {, return, strEscape, (, s, ,, '/', ,, "\"", ,, "'", ,, "\\", ,]
[,, CharsetEncoder, outputCharsetEncoder, ), {, return, strEscape, (, s, ,, '/', ,, "\"", ,, "'", ,, "\\", ,, outputCharsetEncoder, ,]
[outputCharsetEncoder, ), {, return, strEscape, (, s, ,, '/', ,, "\"", ,, "'", ,, "\\", ,, outputCharsetEncoder, ,, false, ,]
["'", ,, "\\", ,, outputCharsetEncoder, ,, false, ,, true, ), ;, }, String, escapeToDoubleQuotedJsString, (, String, s, ), {, return]
["\\", ,, outputCharsetEncoder, ,, false, ,, true, ), ;, }, String, escapeToDoubleQuotedJsString, (, String, s, ), {, return, strEscape, (]
[outputCharsetEncoder, ,, false, ,, true, ), ;, }, String, escapeToDoubleQuotedJsString, (, String, s, ), {, return, strEscape, (, s, ,]
[false, ,, true, ), ;, }, String, escapeToDoubleQuotedJsString, (, String, s, ), {, return, strEscape, (, s, ,, '"', ,]
[true, ), ;, }, String, escapeToDoubleQuotedJsString, (, String, s, ), {, return, strEscape, (, s, ,, '"', ,, "\\\"", ,]
[;, }, String, escapeToDoubleQuotedJsString, (, String, s, ), {, return, strEscape, (, s, ,, '"', ,, "\\\"", ,, "\'", ,]
[String, escapeToDoubleQuotedJsString, (, String, s, ), {, return, strEscape, (, s, ,, '"', ,, "\\\"", ,, "\'", ,, "\\\\", ,]
[(, String, s, ), {, return, strEscape, (, s, ,, '"', ,, "\\\"", ,, "\'", ,, "\\\\", ,, null, ,]
[s, ), {, return, strEscape, (, s, ,, '"', ,, "\\\"", ,, "\'", ,, "\\\\", ,, null, ,, false, ,]
["\'", ,, "\\\\", ,, null, ,, false, ,, false, ), ;, }, String, regexpEscape, (, String, s, ), {, return]
["\\\\", ,, null, ,, false, ,, false, ), ;, }, String, regexpEscape, (, String, s, ), {, return, regexpEscape, (]
[null, ,, false, ,, false, ), ;, }, String, regexpEscape, (, String, s, ), {, return, regexpEscape, (, s, ,]
[,, String, singlequoteEscape, ,, String, backslashEscape, ,, CharsetEncoder, outputCharsetEncoder, ,, boolean, useSlashV, ,, boolean, isRegexp, ), {, StringBuilder, sb, =]
[,, String, backslashEscape, ,, CharsetEncoder, outputCharsetEncoder, ,, boolean, useSlashV, ,, boolean, isRegexp, ), {, StringBuilder, sb, =, new, StringBuilder, (]
[,, String, backslashEscape, ,, CharsetEncoder, outputCharsetEncoder, ,, boolean, useSlashV, ,, boolean, isRegexp, ), {, StringBuilder, sb, =, new, StringBuilder, (]
[,, String, backslashEscape, ,, CharsetEncoder, outputCharsetEncoder, ,, boolean, useSlashV, ,, boolean, isRegexp, ), {, StringBuilder, sb, =, new, StringBuilder, (]
[,, boolean, useSlashV, ,, boolean, isRegexp, ), {, StringBuilder, sb, =, new, StringBuilder, (, s, ., length, (, ), +]
[,, boolean, isRegexp, ), {, StringBuilder, sb, =, new, StringBuilder, (, s, ., length, (, ), +, 2, ), ;]
[,, boolean, isRegexp, ), {, StringBuilder, sb, =, new, StringBuilder, (, s, ., length, (, ), +, 2, ), ;]
[{, StringBuilder, sb, =, new, StringBuilder, (, s, ., length, (, ), +, 2, ), ;, sb, ., append, (]
[., length, (, ), +, 2, ), ;, sb, ., append, (, quote, ), ;, for, (, int, i, =]
[(, ), +, 2, ), ;, sb, ., append, (, quote, ), ;, for, (, int, i, =, 0, ;]
[(, ), +, 2, ), ;, sb, ., append, (, quote, ), ;, for, (, int, i, =, 0, ;]
[+, 2, ), ;, sb, ., append, (, quote, ), ;, for, (, int, i, =, 0, ;, i, <]
[+, 2, ), ;, sb, ., append, (, quote, ), ;, for, (, int, i, =, 0, ;, i, <]
[append, (, quote, ), ;, for, (, int, i, =, 0, ;, i, <, s, ., length, (, ), ;]
[append, (, quote, ), ;, for, (, int, i, =, 0, ;, i, <, s, ., length, (, ), ;]
[int, i, =, 0, ;, i, <, s, ., length, (, ), ;, i, ++, ), {, char, c, =]
[int, i, =, 0, ;, i, <, s, ., length, (, ), ;, i, ++, ), {, char, c, =]
[;, i, <, s, ., length, (, ), ;, i, ++, ), {, char, c, =, s, ., charAt, (]
[length, (, ), ;, i, ++, ), {, char, c, =, s, ., charAt, (, i, ), ;, switch, (]
[i, ++, ), {, char, c, =, s, ., charAt, (, i, ), ;, switch, (, c, ), {, case]
[), {, char, c, =, s, ., charAt, (, i, ), ;, switch, (, c, ), {, case, '\0', :]
[), {, char, c, =, s, ., charAt, (, i, ), ;, switch, (, c, ), {, case, '\0', :]
[=, s, ., charAt, (, i, ), ;, switch, (, c, ), {, case, '\0', :, sb, ., append, (]
[), ;, switch, (, c, ), {, case, '\0', :, sb, ., append, (, "\\x00", ), ;, break, ;, case]
[c, ), {, case, '\0', :, sb, ., append, (, "\\x00", ), ;, break, ;, case, '\u000B', :, if, (]
[case, '\0', :, sb, ., append, (, "\\x00", ), ;, break, ;, case, '\u000B', :, if, (, useSlashV, ), {]
[case, '\0', :, sb, ., append, (, "\\x00", ), ;, break, ;, case, '\u000B', :, if, (, useSlashV, ), {]
[., append, (, "\\x00", ), ;, break, ;, case, '\u000B', :, if, (, useSlashV, ), {, sb, ., append, (]
[break, ;, case, '\u000B', :, if, (, useSlashV, ), {, sb, ., append, (, "\\v", ), ;, }, else, {]
[break, ;, case, '\u000B', :, if, (, useSlashV, ), {, sb, ., append, (, "\\v", ), ;, }, else, {]
[:, if, (, useSlashV, ), {, sb, ., append, (, "\\v", ), ;, }, else, {, sb, ., append, (]
[., append, (, "\\v", ), ;, }, else, {, sb, ., append, (, "\\x0B", ), ;, }, break, ;, case]
[(, "\\v", ), ;, }, else, {, sb, ., append, (, "\\x0B", ), ;, }, break, ;, case, '\b', :]
[(, "\\v", ), ;, }, else, {, sb, ., append, (, "\\x0B", ), ;, }, break, ;, case, '\b', :]
[}, else, {, sb, ., append, (, "\\x0B", ), ;, }, break, ;, case, '\b', :, sb, ., append, (]
[(, "\\x0B", ), ;, }, break, ;, case, '\b', :, sb, ., append, (, "\\b", ), ;, break, ;, case]
[), ;, }, break, ;, case, '\b', :, sb, ., append, (, "\\b", ), ;, break, ;, case, '\f', :]
[), ;, }, break, ;, case, '\b', :, sb, ., append, (, "\\b", ), ;, break, ;, case, '\f', :]
[;, case, '\b', :, sb, ., append, (, "\\b", ), ;, break, ;, case, '\f', :, sb, ., append, (]
[append, (, "\\b", ), ;, break, ;, case, '\f', :, sb, ., append, (, "\\f", ), ;, break, ;, case]
["\\b", ), ;, break, ;, case, '\f', :, sb, ., append, (, "\\f", ), ;, break, ;, case, '\n', :]
["\\b", ), ;, break, ;, case, '\f', :, sb, ., append, (, "\\f", ), ;, break, ;, case, '\n', :]
[;, case, '\f', :, sb, ., append, (, "\\f", ), ;, break, ;, case, '\n', :, sb, ., append, (]
[append, (, "\\f", ), ;, break, ;, case, '\n', :, sb, ., append, (, "\\n", ), ;, break, ;, case]
["\\f", ), ;, break, ;, case, '\n', :, sb, ., append, (, "\\n", ), ;, break, ;, case, '\r', :]
["\\f", ), ;, break, ;, case, '\n', :, sb, ., append, (, "\\n", ), ;, break, ;, case, '\r', :]
[;, case, '\n', :, sb, ., append, (, "\\n", ), ;, break, ;, case, '\r', :, sb, ., append, (]
[append, (, "\\n", ), ;, break, ;, case, '\r', :, sb, ., append, (, "\\r", ), ;, break, ;, case]
["\\n", ), ;, break, ;, case, '\r', :, sb, ., append, (, "\\r", ), ;, break, ;, case, '\t', :]
["\\n", ), ;, break, ;, case, '\r', :, sb, ., append, (, "\\r", ), ;, break, ;, case, '\t', :]
[;, case, '\r', :, sb, ., append, (, "\\r", ), ;, break, ;, case, '\t', :, sb, ., append, (]
[append, (, "\\r", ), ;, break, ;, case, '\t', :, sb, ., append, (, "\\t", ), ;, break, ;, case]
["\\r", ), ;, break, ;, case, '\t', :, sb, ., append, (, "\\t", ), ;, break, ;, case, '\\', :]
["\\r", ), ;, break, ;, case, '\t', :, sb, ., append, (, "\\t", ), ;, break, ;, case, '\\', :]
[;, case, '\t', :, sb, ., append, (, "\\t", ), ;, break, ;, case, '\\', :, sb, ., append, (]
[append, (, "\\t", ), ;, break, ;, case, '\\', :, sb, ., append, (, backslashEscape, ), ;, break, ;, case]
["\\t", ), ;, break, ;, case, '\\', :, sb, ., append, (, backslashEscape, ), ;, break, ;, case, '\"', :]
["\\t", ), ;, break, ;, case, '\\', :, sb, ., append, (, backslashEscape, ), ;, break, ;, case, '\"', :]
[;, case, '\\', :, sb, ., append, (, backslashEscape, ), ;, break, ;, case, '\"', :, sb, ., append, (]
[append, (, backslashEscape, ), ;, break, ;, case, '\"', :, sb, ., append, (, doublequoteEscape, ), ;, break, ;, case]
[backslashEscape, ), ;, break, ;, case, '\"', :, sb, ., append, (, doublequoteEscape, ), ;, break, ;, case, '\'', :]
[backslashEscape, ), ;, break, ;, case, '\"', :, sb, ., append, (, doublequoteEscape, ), ;, break, ;, case, '\'', :]
[;, case, '\"', :, sb, ., append, (, doublequoteEscape, ), ;, break, ;, case, '\'', :, sb, ., append, (]
[append, (, doublequoteEscape, ), ;, break, ;, case, '\'', :, sb, ., append, (, singlequoteEscape, ), ;, break, ;, case]
[doublequoteEscape, ), ;, break, ;, case, '\'', :, sb, ., append, (, singlequoteEscape, ), ;, break, ;, case, '\u2028', :]
[doublequoteEscape, ), ;, break, ;, case, '\'', :, sb, ., append, (, singlequoteEscape, ), ;, break, ;, case, '\u2028', :]
[;, case, '\'', :, sb, ., append, (, singlequoteEscape, ), ;, break, ;, case, '\u2028', :, sb, ., append, (]
[append, (, singlequoteEscape, ), ;, break, ;, case, '\u2028', :, sb, ., append, (, "\\u2028", ), ;, break, ;, case]
[singlequoteEscape, ), ;, break, ;, case, '\u2028', :, sb, ., append, (, "\\u2028", ), ;, break, ;, case, '\u2029', :]
[singlequoteEscape, ), ;, break, ;, case, '\u2028', :, sb, ., append, (, "\\u2028", ), ;, break, ;, case, '\u2029', :]
[;, case, '\u2028', :, sb, ., append, (, "\\u2028", ), ;, break, ;, case, '\u2029', :, sb, ., append, (]
[append, (, "\\u2028", ), ;, break, ;, case, '\u2029', :, sb, ., append, (, "\\u2029", ), ;, break, ;, case]
[;, break, ;, case, '\u2029', :, sb, ., append, (, "\\u2029", ), ;, break, ;, case, '=', :, if, (]
[;, break, ;, case, '\u2029', :, sb, ., append, (, "\\u2029", ), ;, break, ;, case, '=', :, if, (]
[;, case, '\u2029', :, sb, ., append, (, "\\u2029", ), ;, break, ;, case, '=', :, if, (, trustedStrings, ||]
[:, sb, ., append, (, "\\u2029", ), ;, break, ;, case, '=', :, if, (, trustedStrings, ||, isRegexp, ), {]
[:, sb, ., append, (, "\\u2029", ), ;, break, ;, case, '=', :, if, (, trustedStrings, ||, isRegexp, ), {]
[(, "\\u2029", ), ;, break, ;, case, '=', :, if, (, trustedStrings, ||, isRegexp, ), {, sb, ., append, (]
[case, '=', :, if, (, trustedStrings, ||, isRegexp, ), {, sb, ., append, (, c, ), ;, }, else, {]
[case, '=', :, if, (, trustedStrings, ||, isRegexp, ), {, sb, ., append, (, c, ), ;, }, else, {]
[(, trustedStrings, ||, isRegexp, ), {, sb, ., append, (, c, ), ;, }, else, {, sb, ., append, (]
[., append, (, c, ), ;, }, else, {, sb, ., append, (, "\\x3d", ), ;, }, break, ;, case]
[), ;, }, else, {, sb, ., append, (, "\\x3d", ), ;, }, break, ;, case, '&', :, if, (]
[), ;, }, else, {, sb, ., append, (, "\\x3d", ), ;, }, break, ;, case, '&', :, if, (]
[}, else, {, sb, ., append, (, "\\x3d", ), ;, }, break, ;, case, '&', :, if, (, trustedStrings, ||]
[sb, ., append, (, "\\x3d", ), ;, }, break, ;, case, '&', :, if, (, trustedStrings, ||, isRegexp, ), {]
[sb, ., append, (, "\\x3d", ), ;, }, break, ;, case, '&', :, if, (, trustedStrings, ||, isRegexp, ), {]
["\\x3d", ), ;, }, break, ;, case, '&', :, if, (, trustedStrings, ||, isRegexp, ), {, sb, ., append, (]
[case, '&', :, if, (, trustedStrings, ||, isRegexp, ), {, sb, ., append, (, c, ), ;, }, else, {]
[case, '&', :, if, (, trustedStrings, ||, isRegexp, ), {, sb, ., append, (, c, ), ;, }, else, {]
[(, trustedStrings, ||, isRegexp, ), {, sb, ., append, (, c, ), ;, }, else, {, sb, ., append, (]
[., append, (, c, ), ;, }, else, {, sb, ., append, (, "\\x26", ), ;, }, break, ;, case]
[), ;, }, else, {, sb, ., append, (, "\\x26", ), ;, }, break, ;, case, '>', :, if, (]
[), ;, }, else, {, sb, ., append, (, "\\x26", ), ;, }, break, ;, case, '>', :, if, (]
[;, }, else, {, sb, ., append, (, "\\x26", ), ;, }, break, ;, case, '>', :, if, (, !]
[else, {, sb, ., append, (, "\\x26", ), ;, }, break, ;, case, '>', :, if, (, !, trustedStrings, &&]
[{, sb, ., append, (, "\\x26", ), ;, }, break, ;, case, '>', :, if, (, !, trustedStrings, &&, !]
[append, (, "\\x26", ), ;, }, break, ;, case, '>', :, if, (, !, trustedStrings, &&, !, isRegexp, ), {]
[append, (, "\\x26", ), ;, }, break, ;, case, '>', :, if, (, !, trustedStrings, &&, !, isRegexp, ), {]
[;, }, break, ;, case, '>', :, if, (, !, trustedStrings, &&, !, isRegexp, ), {, sb, ., append, (]
[(, !, trustedStrings, &&, !, isRegexp, ), {, sb, ., append, (, GT_ESCAPED, ), ;, break, ;, }, if, (]
[(, !, trustedStrings, &&, !, isRegexp, ), {, sb, ., append, (, GT_ESCAPED, ), ;, break, ;, }, if, (]
[(, !, trustedStrings, &&, !, isRegexp, ), {, sb, ., append, (, GT_ESCAPED, ), ;, break, ;, }, if, (]
[trustedStrings, &&, !, isRegexp, ), {, sb, ., append, (, GT_ESCAPED, ), ;, break, ;, }, if, (, i, >=]
[!, isRegexp, ), {, sb, ., append, (, GT_ESCAPED, ), ;, break, ;, }, if, (, i, >=, 2, &&]
[isRegexp, ), {, sb, ., append, (, GT_ESCAPED, ), ;, break, ;, }, if, (, i, >=, 2, &&, (]
[isRegexp, ), {, sb, ., append, (, GT_ESCAPED, ), ;, break, ;, }, if, (, i, >=, 2, &&, (]
[), {, sb, ., append, (, GT_ESCAPED, ), ;, break, ;, }, if, (, i, >=, 2, &&, (, (]
[), {, sb, ., append, (, GT_ESCAPED, ), ;, break, ;, }, if, (, i, >=, 2, &&, (, (]
[), {, sb, ., append, (, GT_ESCAPED, ), ;, break, ;, }, if, (, i, >=, 2, &&, (, (]
[), {, sb, ., append, (, GT_ESCAPED, ), ;, break, ;, }, if, (, i, >=, 2, &&, (, (]
[append, (, GT_ESCAPED, ), ;, break, ;, }, if, (, i, >=, 2, &&, (, (, s, ., charAt, (]
[append, (, GT_ESCAPED, ), ;, break, ;, }, if, (, i, >=, 2, &&, (, (, s, ., charAt, (]
[GT_ESCAPED, ), ;, break, ;, }, if, (, i, >=, 2, &&, (, (, s, ., charAt, (, i, -]
[break, ;, }, if, (, i, >=, 2, &&, (, (, s, ., charAt, (, i, -, 1, ), ==]
[}, if, (, i, >=, 2, &&, (, (, s, ., charAt, (, i, -, 1, ), ==, '-', &&]
[}, if, (, i, >=, 2, &&, (, (, s, ., charAt, (, i, -, 1, ), ==, '-', &&]
[}, if, (, i, >=, 2, &&, (, (, s, ., charAt, (, i, -, 1, ), ==, '-', &&]
[>=, 2, &&, (, (, s, ., charAt, (, i, -, 1, ), ==, '-', &&, s, ., charAt, (]
[>=, 2, &&, (, (, s, ., charAt, (, i, -, 1, ), ==, '-', &&, s, ., charAt, (]
[&&, (, (, s, ., charAt, (, i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -]
[s, ., charAt, (, i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -, 2, ), ==]
[(, i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||]
[i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (]
[i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (]
[i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (]
[i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (]
[==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (, s, ., charAt, (]
[==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (, s, ., charAt, (]
[&&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (, s, ., charAt, (, i, -]
[charAt, (, i, -, 2, ), ==, '-', ), ||, (, s, ., charAt, (, i, -, 1, ), ==]
[i, -, 2, ), ==, '-', ), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&]
[i, -, 2, ), ==, '-', ), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&]
[i, -, 2, ), ==, '-', ), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&]
[==, '-', ), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&, s, ., charAt, (]
[==, '-', ), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&, s, ., charAt, (]
[), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&, s, ., charAt, (, i, -]
[s, ., charAt, (, i, -, 1, ), ==, ']', &&, s, ., charAt, (, i, -, 2, ), ==]
[-, 1, ), ==, ']', &&, s, ., charAt, (, i, -, 2, ), ==, ']', ), ), ), {]
[-, 1, ), ==, ']', &&, s, ., charAt, (, i, -, 2, ), ==, ']', ), ), ), {]
[']', &&, s, ., charAt, (, i, -, 2, ), ==, ']', ), ), ), {, sb, ., append, (]
[i, -, 2, ), ==, ']', ), ), ), {, sb, ., append, (, GT_ESCAPED, ), ;, }, else, {]
[i, -, 2, ), ==, ']', ), ), ), {, sb, ., append, (, GT_ESCAPED, ), ;, }, else, {]
[==, ']', ), ), ), {, sb, ., append, (, GT_ESCAPED, ), ;, }, else, {, sb, ., append, (]
[., append, (, GT_ESCAPED, ), ;, }, else, {, sb, ., append, (, c, ), ;, }, break, ;, case]
[), ;, }, else, {, sb, ., append, (, c, ), ;, }, break, ;, case, '<', :, if, (]
[), ;, }, else, {, sb, ., append, (, c, ), ;, }, break, ;, case, '<', :, if, (]
[;, }, else, {, sb, ., append, (, c, ), ;, }, break, ;, case, '<', :, if, (, !]
[else, {, sb, ., append, (, c, ), ;, }, break, ;, case, '<', :, if, (, !, trustedStrings, &&]
[{, sb, ., append, (, c, ), ;, }, break, ;, case, '<', :, if, (, !, trustedStrings, &&, !]
[append, (, c, ), ;, }, break, ;, case, '<', :, if, (, !, trustedStrings, &&, !, isRegexp, ), {]
[append, (, c, ), ;, }, break, ;, case, '<', :, if, (, !, trustedStrings, &&, !, isRegexp, ), {]
[;, }, break, ;, case, '<', :, if, (, !, trustedStrings, &&, !, isRegexp, ), {, sb, ., append, (]
[trustedStrings, &&, !, isRegexp, ), {, sb, ., append, (, LT_ESCAPED, ), ;, break, ;, }, final, String, END_SCRIPT, =]
[sb, ., append, (, LT_ESCAPED, ), ;, break, ;, }, final, String, END_SCRIPT, =, "/script", ;, final, String, START_COMMENT, =]
[LT_ESCAPED, ), ;, break, ;, }, final, String, END_SCRIPT, =, "/script", ;, final, String, START_COMMENT, =, "!--", ;, if, (]
[LT_ESCAPED, ), ;, break, ;, }, final, String, END_SCRIPT, =, "/script", ;, final, String, START_COMMENT, =, "!--", ;, if, (]
[;, }, final, String, END_SCRIPT, =, "/script", ;, final, String, START_COMMENT, =, "!--", ;, if, (, s, ., regionMatches, (]
[final, String, END_SCRIPT, =, "/script", ;, final, String, START_COMMENT, =, "!--", ;, if, (, s, ., regionMatches, (, true, ,]
[final, String, END_SCRIPT, =, "/script", ;, final, String, START_COMMENT, =, "!--", ;, if, (, s, ., regionMatches, (, true, ,]
[END_SCRIPT, =, "/script", ;, final, String, START_COMMENT, =, "!--", ;, if, (, s, ., regionMatches, (, true, ,, i, +]
["/script", ;, final, String, START_COMMENT, =, "!--", ;, if, (, s, ., regionMatches, (, true, ,, i, +, 1, ,]
[final, String, START_COMMENT, =, "!--", ;, if, (, s, ., regionMatches, (, true, ,, i, +, 1, ,, END_SCRIPT, ,]
[START_COMMENT, =, "!--", ;, if, (, s, ., regionMatches, (, true, ,, i, +, 1, ,, END_SCRIPT, ,, 0, ,]
[START_COMMENT, =, "!--", ;, if, (, s, ., regionMatches, (, true, ,, i, +, 1, ,, END_SCRIPT, ,, 0, ,]
[regionMatches, (, true, ,, i, +, 1, ,, END_SCRIPT, ,, 0, ,, END_SCRIPT, ., length, (, ), ), ), {]
[regionMatches, (, true, ,, i, +, 1, ,, END_SCRIPT, ,, 0, ,, END_SCRIPT, ., length, (, ), ), ), {]
[i, +, 1, ,, END_SCRIPT, ,, 0, ,, END_SCRIPT, ., length, (, ), ), ), {, sb, ., append, (]
[,, END_SCRIPT, ., length, (, ), ), ), {, sb, ., append, (, LT_ESCAPED, ), ;, }, else, if, (]
[,, END_SCRIPT, ., length, (, ), ), ), {, sb, ., append, (, LT_ESCAPED, ), ;, }, else, if, (]
[(, ), ), ), {, sb, ., append, (, LT_ESCAPED, ), ;, }, else, if, (, s, ., regionMatches, (]
[), ), {, sb, ., append, (, LT_ESCAPED, ), ;, }, else, if, (, s, ., regionMatches, (, false, ,]
[), ), {, sb, ., append, (, LT_ESCAPED, ), ;, }, else, if, (, s, ., regionMatches, (, false, ,]
[{, sb, ., append, (, LT_ESCAPED, ), ;, }, else, if, (, s, ., regionMatches, (, false, ,, i, +]
[., append, (, LT_ESCAPED, ), ;, }, else, if, (, s, ., regionMatches, (, false, ,, i, +, 1, ,]
[(, LT_ESCAPED, ), ;, }, else, if, (, s, ., regionMatches, (, false, ,, i, +, 1, ,, START_COMMENT, ,]
[), ;, }, else, if, (, s, ., regionMatches, (, false, ,, i, +, 1, ,, START_COMMENT, ,, 0, ,]
[), ;, }, else, if, (, s, ., regionMatches, (, false, ,, i, +, 1, ,, START_COMMENT, ,, 0, ,]
[regionMatches, (, false, ,, i, +, 1, ,, START_COMMENT, ,, 0, ,, START_COMMENT, ., length, (, ), ), ), {]
[regionMatches, (, false, ,, i, +, 1, ,, START_COMMENT, ,, 0, ,, START_COMMENT, ., length, (, ), ), ), {]
[i, +, 1, ,, START_COMMENT, ,, 0, ,, START_COMMENT, ., length, (, ), ), ), {, sb, ., append, (]
[0, ,, START_COMMENT, ., length, (, ), ), ), {, sb, ., append, (, LT_ESCAPED, ), ;, }, else, {]
[0, ,, START_COMMENT, ., length, (, ), ), ), {, sb, ., append, (, LT_ESCAPED, ), ;, }, else, {]
[length, (, ), ), ), {, sb, ., append, (, LT_ESCAPED, ), ;, }, else, {, sb, ., append, (]
[LT_ESCAPED, ), ;, }, else, {, sb, ., append, (, c, ), ;, }, break, ;, default, :, if, (]
[LT_ESCAPED, ), ;, }, else, {, sb, ., append, (, c, ), ;, }, break, ;, default, :, if, (]
[;, }, else, {, sb, ., append, (, c, ), ;, }, break, ;, default, :, if, (, outputCharsetEncoder, !=]
[., append, (, c, ), ;, }, break, ;, default, :, if, (, outputCharsetEncoder, !=, null, ), {, if, (]
[., append, (, c, ), ;, }, break, ;, default, :, if, (, outputCharsetEncoder, !=, null, ), {, if, (]
[), ;, }, break, ;, default, :, if, (, outputCharsetEncoder, !=, null, ), {, if, (, outputCharsetEncoder, ., canEncode, (]
[;, default, :, if, (, outputCharsetEncoder, !=, null, ), {, if, (, outputCharsetEncoder, ., canEncode, (, c, ), ), {]
[;, default, :, if, (, outputCharsetEncoder, !=, null, ), {, if, (, outputCharsetEncoder, ., canEncode, (, c, ), ), {]
[(, outputCharsetEncoder, !=, null, ), {, if, (, outputCharsetEncoder, ., canEncode, (, c, ), ), {, sb, ., append, (]
[if, (, outputCharsetEncoder, ., canEncode, (, c, ), ), {, sb, ., append, (, c, ), ;, }, else, {]
[outputCharsetEncoder, ., canEncode, (, c, ), ), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (]
[canEncode, (, c, ), ), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,]
[(, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, else, {, if, (]
[(, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, else, {, if, (]
[(, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, else, {, if, (]
[), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, else, {, if, (, c, >]
[}, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, else, {, if, (, c, >, 0x1f, &&]
[}, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, else, {, if, (, c, >, 0x1f, &&]
[{, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, else, {, if, (, c, >, 0x1f, &&, c, <]
[sb, ,, c, ), ;, }, }, else, {, if, (, c, >, 0x1f, &&, c, <, 0x7f, ), {]
[sb, ,, c, ), ;, }, }, else, {, if, (, c, >, 0x1f, &&, c, <, 0x7f, ), {]
[;, }, }, else, {, if, (, c, >, 0x1f, &&, c, <, 0x7f, ), {, sb, ., append, (]
[(, c, >, 0x1f, &&, c, <, 0x7f, ), {, sb, ., append, (, c, ), ;, }, else, {]
[>, 0x1f, &&, c, <, 0x7f, ), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (]
[&&, c, <, 0x7f, ), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,]
[., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, }, }]
[., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, }, }]
[), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, }, }, sb, ., append, (]
[{, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, }, }, sb, ., append, (, quote, ), ;, return]
[{, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, }, }, sb, ., append, (, quote, ), ;, return]
[), ;, return, sb, ., toString, (, ), ;, }, static, String, identifierEscape, (, String, s, ), {, if, (]
[), ;, return, sb, ., toString, (, ), ;, }, static, String, identifierEscape, (, String, s, ), {, if, (]
[., toString, (, ), ;, }, static, String, identifierEscape, (, String, s, ), {, if, (, NodeUtil, ., isLatin, (]
[}, static, String, identifierEscape, (, String, s, ), {, if, (, NodeUtil, ., isLatin, (, s, ), ), {, return]
[s, ), {, if, (, NodeUtil, ., isLatin, (, s, ), ), {, return, s, ;, }, StringBuilder, sb, =]
[), ), {, return, s, ;, }, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, int, i, =]
[{, return, s, ;, }, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, int, i, =, 0, ;]
[{, return, s, ;, }, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, int, i, =, 0, ;]
[s, ;, }, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[s, ;, }, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[new, StringBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, s, ., length, (, ), ;]
[new, StringBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, s, ., length, (, ), ;]
[int, i, =, 0, ;, i, <, s, ., length, (, ), ;, i, ++, ), {, char, c, =]
[int, i, =, 0, ;, i, <, s, ., length, (, ), ;, i, ++, ), {, char, c, =]
[;, i, <, s, ., length, (, ), ;, i, ++, ), {, char, c, =, s, ., charAt, (]
[length, (, ), ;, i, ++, ), {, char, c, =, s, ., charAt, (, i, ), ;, if, (]
[length, (, ), ;, i, ++, ), {, char, c, =, s, ., charAt, (, i, ), ;, if, (]
[length, (, ), ;, i, ++, ), {, char, c, =, s, ., charAt, (, i, ), ;, if, (]
[), ;, i, ++, ), {, char, c, =, s, ., charAt, (, i, ), ;, if, (, c, >]
[i, ++, ), {, char, c, =, s, ., charAt, (, i, ), ;, if, (, c, >, 0x1F, &&]
[i, ++, ), {, char, c, =, s, ., charAt, (, i, ), ;, if, (, c, >, 0x1F, &&]
[), {, char, c, =, s, ., charAt, (, i, ), ;, if, (, c, >, 0x1F, &&, c, <]
[c, =, s, ., charAt, (, i, ), ;, if, (, c, >, 0x1F, &&, c, <, 0x7F, ), {]
[c, =, s, ., charAt, (, i, ), ;, if, (, c, >, 0x1F, &&, c, <, 0x7F, ), {]
[charAt, (, i, ), ;, if, (, c, >, 0x1F, &&, c, <, 0x7F, ), {, sb, ., append, (]
[(, c, >, 0x1F, &&, c, <, 0x7F, ), {, sb, ., append, (, c, ), ;, }, else, {]
[>, 0x1F, &&, c, <, 0x7F, ), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (]
[&&, c, <, 0x7F, ), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,]
[sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, return]
[sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, return]
[toString, (, ), ;, }, private, static, int, getNonEmptyChildCount, (, Node, n, ,, int, maxCount, ), {, int, i, =]
[private, static, int, getNonEmptyChildCount, (, Node, n, ,, int, maxCount, ), {, int, i, =, 0, ;, Node, c, =]
[private, static, int, getNonEmptyChildCount, (, Node, n, ,, int, maxCount, ), {, int, i, =, 0, ;, Node, c, =]
[maxCount, ), {, int, i, =, 0, ;, Node, c, =, n, ., getFirstChild, (, ), ;, for, (, ;]
[maxCount, ), {, int, i, =, 0, ;, Node, c, =, n, ., getFirstChild, (, ), ;, for, (, ;]
[maxCount, ), {, int, i, =, 0, ;, Node, c, =, n, ., getFirstChild, (, ), ;, for, (, ;]
[{, int, i, =, 0, ;, Node, c, =, n, ., getFirstChild, (, ), ;, for, (, ;, c, !=]
[i, =, 0, ;, Node, c, =, n, ., getFirstChild, (, ), ;, for, (, ;, c, !=, null, &&]
[i, =, 0, ;, Node, c, =, n, ., getFirstChild, (, ), ;, for, (, ;, c, !=, null, &&]
[0, ;, Node, c, =, n, ., getFirstChild, (, ), ;, for, (, ;, c, !=, null, &&, i, <]
[Node, c, =, n, ., getFirstChild, (, ), ;, for, (, ;, c, !=, null, &&, i, <, maxCount, ;]
[=, n, ., getFirstChild, (, ), ;, for, (, ;, c, !=, null, &&, i, <, maxCount, ;, c, =]
[=, n, ., getFirstChild, (, ), ;, for, (, ;, c, !=, null, &&, i, <, maxCount, ;, c, =]
[;, c, !=, null, &&, i, <, maxCount, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[;, c, !=, null, &&, i, <, maxCount, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[maxCount, ;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., isBlock, (, ), ), {]
[c, =, c, ., getNext, (, ), ), {, if, (, c, ., isBlock, (, ), ), {, i, +=]
[c, ., getNext, (, ), ), {, if, (, c, ., isBlock, (, ), ), {, i, +=, getNonEmptyChildCount, (]
[getNext, (, ), ), {, if, (, c, ., isBlock, (, ), ), {, i, +=, getNonEmptyChildCount, (, c, ,]
[getNext, (, ), ), {, if, (, c, ., isBlock, (, ), ), {, i, +=, getNonEmptyChildCount, (, c, ,]
[), ), {, if, (, c, ., isBlock, (, ), ), {, i, +=, getNonEmptyChildCount, (, c, ,, maxCount, -]
[isBlock, (, ), ), {, i, +=, getNonEmptyChildCount, (, c, ,, maxCount, -, i, ), ;, }, else, if, (]
[(, ), ), {, i, +=, getNonEmptyChildCount, (, c, ,, maxCount, -, i, ), ;, }, else, if, (, !]
[(, ), ), {, i, +=, getNonEmptyChildCount, (, c, ,, maxCount, -, i, ), ;, }, else, if, (, !]
[(, c, ,, maxCount, -, i, ), ;, }, else, if, (, !, c, ., isEmpty, (, ), ), {]
[(, c, ,, maxCount, -, i, ), ;, }, else, if, (, !, c, ., isEmpty, (, ), ), {]
[), ;, }, else, if, (, !, c, ., isEmpty, (, ), ), {, i, ++, ;, }, }, return]
[}, }, return, i, ;, }, private, static, Node, getFirstNonEmptyChild, (, Node, n, ), {, for, (, Node, c, =]
[}, }, return, i, ;, }, private, static, Node, getFirstNonEmptyChild, (, Node, n, ), {, for, (, Node, c, =]
[private, static, Node, getFirstNonEmptyChild, (, Node, n, ), {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[private, static, Node, getFirstNonEmptyChild, (, Node, n, ), {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[Node, getFirstNonEmptyChild, (, Node, n, ), {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[(, Node, n, ), {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[n, ), {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[n, ), {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[=, c, ., getNext, (, ), ), {, if, (, c, ., isBlock, (, ), ), {, Node, result, =]
[., getNext, (, ), ), {, if, (, c, ., isBlock, (, ), ), {, Node, result, =, getFirstNonEmptyChild, (]
[{, if, (, c, ., isBlock, (, ), ), {, Node, result, =, getFirstNonEmptyChild, (, c, ), ;, if, (]
[{, if, (, c, ., isBlock, (, ), ), {, Node, result, =, getFirstNonEmptyChild, (, c, ), ;, if, (]
[(, c, ., isBlock, (, ), ), {, Node, result, =, getFirstNonEmptyChild, (, c, ), ;, if, (, result, !=]
[(, ), ), {, Node, result, =, getFirstNonEmptyChild, (, c, ), ;, if, (, result, !=, null, ), {, return]
[getFirstNonEmptyChild, (, c, ), ;, if, (, result, !=, null, ), {, return, result, ;, }, }, else, if, (]
[(, c, ), ;, if, (, result, !=, null, ), {, return, result, ;, }, }, else, if, (, !]
[(, c, ), ;, if, (, result, !=, null, ), {, return, result, ;, }, }, else, if, (, !]
[null, ), {, return, result, ;, }, }, else, if, (, !, c, ., isEmpty, (, ), ), {, return]
[;, }, }, else, if, (, !, c, ., isEmpty, (, ), ), {, return, c, ;, }, }, return]
[,, BEFORE_DANGLING_ELSE, ,, START_OF_EXPR, ,, PRESERVE_BLOCK, ,, IN_FOR_INIT_CLAUSE, ,, OTHER, }, private, Context, getContextForNonEmptyExpression, (, Context, currentContext, ), {, return]
[,, BEFORE_DANGLING_ELSE, ,, START_OF_EXPR, ,, PRESERVE_BLOCK, ,, IN_FOR_INIT_CLAUSE, ,, OTHER, }, private, Context, getContextForNonEmptyExpression, (, Context, currentContext, ), {, return]
[,, BEFORE_DANGLING_ELSE, ,, START_OF_EXPR, ,, PRESERVE_BLOCK, ,, IN_FOR_INIT_CLAUSE, ,, OTHER, }, private, Context, getContextForNonEmptyExpression, (, Context, currentContext, ), {, return]
[,, START_OF_EXPR, ,, PRESERVE_BLOCK, ,, IN_FOR_INIT_CLAUSE, ,, OTHER, }, private, Context, getContextForNonEmptyExpression, (, Context, currentContext, ), {, return, currentContext, ==]
[,, START_OF_EXPR, ,, PRESERVE_BLOCK, ,, IN_FOR_INIT_CLAUSE, ,, OTHER, }, private, Context, getContextForNonEmptyExpression, (, Context, currentContext, ), {, return, currentContext, ==]
[,, IN_FOR_INIT_CLAUSE, ,, OTHER, }, private, Context, getContextForNonEmptyExpression, (, Context, currentContext, ), {, return, currentContext, ==, Context, ., BEFORE_DANGLING_ELSE, ?]
[,, IN_FOR_INIT_CLAUSE, ,, OTHER, }, private, Context, getContextForNonEmptyExpression, (, Context, currentContext, ), {, return, currentContext, ==, Context, ., BEFORE_DANGLING_ELSE, ?]
[}, private, Context, getContextForNonEmptyExpression, (, Context, currentContext, ), {, return, currentContext, ==, Context, ., BEFORE_DANGLING_ELSE, ?, Context, ., BEFORE_DANGLING_ELSE, :]
[}, private, Context, getContextForNonEmptyExpression, (, Context, currentContext, ), {, return, currentContext, ==, Context, ., BEFORE_DANGLING_ELSE, ?, Context, ., BEFORE_DANGLING_ELSE, :]
[BEFORE_DANGLING_ELSE, ?, Context, ., BEFORE_DANGLING_ELSE, :, Context, ., OTHER, ;, }, private, Context, getContextForNoInOperator, (, Context, context, ), {, return]
[?, Context, ., BEFORE_DANGLING_ELSE, :, Context, ., OTHER, ;, }, private, Context, getContextForNoInOperator, (, Context, context, ), {, return, (]
[?, Context, ., BEFORE_DANGLING_ELSE, :, Context, ., OTHER, ;, }, private, Context, getContextForNoInOperator, (, Context, context, ), {, return, (]
[?, Context, ., BEFORE_DANGLING_ELSE, :, Context, ., OTHER, ;, }, private, Context, getContextForNoInOperator, (, Context, context, ), {, return, (]
[., BEFORE_DANGLING_ELSE, :, Context, ., OTHER, ;, }, private, Context, getContextForNoInOperator, (, Context, context, ), {, return, (, context, ==]
[., BEFORE_DANGLING_ELSE, :, Context, ., OTHER, ;, }, private, Context, getContextForNoInOperator, (, Context, context, ), {, return, (, context, ==]
[., OTHER, ;, }, private, Context, getContextForNoInOperator, (, Context, context, ), {, return, (, context, ==, Context, ., IN_FOR_INIT_CLAUSE, ?]
[., OTHER, ;, }, private, Context, getContextForNoInOperator, (, Context, context, ), {, return, (, context, ==, Context, ., IN_FOR_INIT_CLAUSE, ?]
[private, Context, getContextForNoInOperator, (, Context, context, ), {, return, (, context, ==, Context, ., IN_FOR_INIT_CLAUSE, ?, Context, ., IN_FOR_INIT_CLAUSE, :]
[private, Context, getContextForNoInOperator, (, Context, context, ), {, return, (, context, ==, Context, ., IN_FOR_INIT_CLAUSE, ?, Context, ., IN_FOR_INIT_CLAUSE, :]
[Context, ., OTHER, ), ;, }, private, static, void, appendHexJavaScriptRepresentation, (, StringBuilder, sb, ,, char, c, ), {, try, {]
[OTHER, ), ;, }, private, static, void, appendHexJavaScriptRepresentation, (, StringBuilder, sb, ,, char, c, ), {, try, {, appendHexJavaScriptRepresentation, (]
[;, }, private, static, void, appendHexJavaScriptRepresentation, (, StringBuilder, sb, ,, char, c, ), {, try, {, appendHexJavaScriptRepresentation, (, c, ,]
[c, ), {, try, {, appendHexJavaScriptRepresentation, (, c, ,, sb, ), ;, }, catch, (, IOException, ex, ), {, throw]
[try, {, appendHexJavaScriptRepresentation, (, c, ,, sb, ), ;, }, catch, (, IOException, ex, ), {, throw, new, RuntimeException, (]
[), ;, }, }, private, static, void, appendHexJavaScriptRepresentation, (, int, codePoint, ,, Appendable, out, ), throws, IOException, {, if, (]
[), ;, }, }, private, static, void, appendHexJavaScriptRepresentation, (, int, codePoint, ,, Appendable, out, ), throws, IOException, {, if, (]
[private, static, void, appendHexJavaScriptRepresentation, (, int, codePoint, ,, Appendable, out, ), throws, IOException, {, if, (, Character, ., isSupplementaryCodePoint, (]
[out, ), throws, IOException, {, if, (, Character, ., isSupplementaryCodePoint, (, codePoint, ), ), {, char, [, ], surrogates, =]
[out, ), throws, IOException, {, if, (, Character, ., isSupplementaryCodePoint, (, codePoint, ), ), {, char, [, ], surrogates, =]
[{, if, (, Character, ., isSupplementaryCodePoint, (, codePoint, ), ), {, char, [, ], surrogates, =, Character, ., toChars, (]
[Character, ., isSupplementaryCodePoint, (, codePoint, ), ), {, char, [, ], surrogates, =, Character, ., toChars, (, codePoint, ), ;]
[isSupplementaryCodePoint, (, codePoint, ), ), {, char, [, ], surrogates, =, Character, ., toChars, (, codePoint, ), ;, appendHexJavaScriptRepresentation, (]
[isSupplementaryCodePoint, (, codePoint, ), ), {, char, [, ], surrogates, =, Character, ., toChars, (, codePoint, ), ;, appendHexJavaScriptRepresentation, (]
[codePoint, ), ), {, char, [, ], surrogates, =, Character, ., toChars, (, codePoint, ), ;, appendHexJavaScriptRepresentation, (, surrogates, []
[{, char, [, ], surrogates, =, Character, ., toChars, (, codePoint, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 0, ], ,]
[], surrogates, =, Character, ., toChars, (, codePoint, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 0, ], ,, out, ), ;]
[=, Character, ., toChars, (, codePoint, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 0, ], ,, out, ), ;, appendHexJavaScriptRepresentation, (]
[=, Character, ., toChars, (, codePoint, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 0, ], ,, out, ), ;, appendHexJavaScriptRepresentation, (]
[., toChars, (, codePoint, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 0, ], ,, out, ), ;, appendHexJavaScriptRepresentation, (, surrogates, []
[codePoint, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 0, ], ,, out, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 1, ], ,]
[[, 0, ], ,, out, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 1, ], ,, out, ), ;, return, ;, }]
[[, 0, ], ,, out, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 1, ], ,, out, ), ;, return, ;, }]
[[, 0, ], ,, out, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 1, ], ,, out, ), ;, return, ;, }]
[[, 0, ], ,, out, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 1, ], ,, out, ), ;, return, ;, }]
[[, 0, ], ,, out, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 1, ], ,, out, ), ;, return, ;, }]
[[, 0, ], ,, out, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 1, ], ,, out, ), ;, return, ;, }]
[out, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 1, ], ,, out, ), ;, return, ;, }, out, ., append, (]
[surrogates, [, 1, ], ,, out, ), ;, return, ;, }, out, ., append, (, "\\u", ), ., append, (]
[surrogates, [, 1, ], ,, out, ), ;, return, ;, }, out, ., append, (, "\\u", ), ., append, (]
[1, ], ,, out, ), ;, return, ;, }, out, ., append, (, "\\u", ), ., append, (, HEX_CHARS, []
[1, ], ,, out, ), ;, return, ;, }, out, ., append, (, "\\u", ), ., append, (, HEX_CHARS, []
[], ,, out, ), ;, return, ;, }, out, ., append, (, "\\u", ), ., append, (, HEX_CHARS, [, (]
[], ,, out, ), ;, return, ;, }, out, ., append, (, "\\u", ), ., append, (, HEX_CHARS, [, (]
[;, return, ;, }, out, ., append, (, "\\u", ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >]
[}, out, ., append, (, "\\u", ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &]
[), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &, 0xf, ], ), ., append, (]
[), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &, 0xf, ], ), ., append, (]
[append, (, HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &, 0xf, ], ), ., append, (, HEX_CHARS, []
[append, (, HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &, 0xf, ], ), ., append, (, HEX_CHARS, []
[(, HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (]
[(, HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (]
[codePoint, >, >, >, 12, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >]
[>, 12, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &]
[), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ], ), ., append, (]
[), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ], ), ., append, (]
[append, (, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ], ), ., append, (, HEX_CHARS, []
[append, (, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ], ), ., append, (, HEX_CHARS, []
[(, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (]
[(, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (]
[codePoint, >, >, >, 8, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >]
[>, 8, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &]
[), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &, 0xf, ], ), ., append, (]
[), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &, 0xf, ], ), ., append, (]
[append, (, HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &, 0xf, ], ), ., append, (, HEX_CHARS, []
[append, (, HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &, 0xf, ], ), ., append, (, HEX_CHARS, []
[HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, codePoint, &]
