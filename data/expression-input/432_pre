[java, ., util, ., Set, ;, public, class, CompilerInput, implements, SourceAst, ,, DependencyInfo, {, private, static, final, long, serialVersionUID, =]
[module, ;, final, private, InputId, id, ;, private, final, SourceAst, ast, ;, private, final, Set, <, String, >, provides, =]
[module, ;, final, private, InputId, id, ;, private, final, SourceAst, ast, ;, private, final, Set, <, String, >, provides, =]
[Set, <, String, >, provides, =, Sets, ., newHashSet, (, ), ;, private, final, Set, <, String, >, requires, =]
[Set, <, String, >, provides, =, Sets, ., newHashSet, (, ), ;, private, final, Set, <, String, >, requires, =]
[), ;, private, final, Set, <, String, >, requires, =, Sets, ., newHashSet, (, ), ;, private, boolean, generatedDependencyInfoFromSource, =]
[private, boolean, generatedDependencyInfoFromSource, =, false, ;, private, transient, AbstractCompiler, compiler, ;, public, CompilerInput, (, SourceAst, ast, ), {, this, (]
[generatedDependencyInfoFromSource, =, false, ;, private, transient, AbstractCompiler, compiler, ;, public, CompilerInput, (, SourceAst, ast, ), {, this, (, ast, ,]
[generatedDependencyInfoFromSource, =, false, ;, private, transient, AbstractCompiler, compiler, ;, public, CompilerInput, (, SourceAst, ast, ), {, this, (, ast, ,]
[generatedDependencyInfoFromSource, =, false, ;, private, transient, AbstractCompiler, compiler, ;, public, CompilerInput, (, SourceAst, ast, ), {, this, (, ast, ,]
[CompilerInput, (, SourceAst, ast, ), {, this, (, ast, ,, ast, ., getSourceFile, (, ), ., getName, (, ), ,]
[getName, (, ), ,, false, ), ;, }, public, CompilerInput, (, SourceAst, ast, ,, boolean, isExtern, ), {, this, (]
[), ,, false, ), ;, }, public, CompilerInput, (, SourceAst, ast, ,, boolean, isExtern, ), {, this, (, ast, ,]
[), ,, false, ), ;, }, public, CompilerInput, (, SourceAst, ast, ,, boolean, isExtern, ), {, this, (, ast, ,]
[public, CompilerInput, (, SourceAst, ast, ,, boolean, isExtern, ), {, this, (, ast, ,, ast, ., getInputId, (, ), ,]
[,, isExtern, ), ;, }, public, CompilerInput, (, SourceAst, ast, ,, String, inputId, ,, boolean, isExtern, ), {, this, (]
[), ;, }, public, CompilerInput, (, SourceAst, ast, ,, String, inputId, ,, boolean, isExtern, ), {, this, (, ast, ,]
[public, CompilerInput, (, SourceAst, ast, ,, String, inputId, ,, boolean, isExtern, ), {, this, (, ast, ,, new, InputId, (]
[SourceAst, ast, ,, String, inputId, ,, boolean, isExtern, ), {, this, (, ast, ,, new, InputId, (, inputId, ), ,]
[inputId, ), ,, isExtern, ), ;, }, public, CompilerInput, (, SourceAst, ast, ,, InputId, inputId, ,, boolean, isExtern, ), {]
[inputId, ), ,, isExtern, ), ;, }, public, CompilerInput, (, SourceAst, ast, ,, InputId, inputId, ,, boolean, isExtern, ), {]
[), ;, }, public, CompilerInput, (, SourceAst, ast, ,, InputId, inputId, ,, boolean, isExtern, ), {, this, ., ast, =]
[}, public, CompilerInput, (, SourceAst, ast, ,, InputId, inputId, ,, boolean, isExtern, ), {, this, ., ast, =, ast, ;]
[}, public, CompilerInput, (, SourceAst, ast, ,, InputId, inputId, ,, boolean, isExtern, ), {, this, ., ast, =, ast, ;]
[SourceAst, ast, ,, InputId, inputId, ,, boolean, isExtern, ), {, this, ., ast, =, ast, ;, this, ., id, =]
[inputId, ,, boolean, isExtern, ), {, this, ., ast, =, ast, ;, this, ., id, =, inputId, ;, if, (]
[inputId, ,, boolean, isExtern, ), {, this, ., ast, =, ast, ;, this, ., id, =, inputId, ;, if, (]
[inputId, ,, boolean, isExtern, ), {, this, ., ast, =, ast, ;, this, ., id, =, inputId, ;, if, (]
[boolean, isExtern, ), {, this, ., ast, =, ast, ;, this, ., id, =, inputId, ;, if, (, ast, !=]
[), {, this, ., ast, =, ast, ;, this, ., id, =, inputId, ;, if, (, ast, !=, null, &&]
[), {, this, ., ast, =, ast, ;, this, ., id, =, inputId, ;, if, (, ast, !=, null, &&]
[), {, this, ., ast, =, ast, ;, this, ., id, =, inputId, ;, if, (, ast, !=, null, &&]
[ast, ;, this, ., id, =, inputId, ;, if, (, ast, !=, null, &&, ast, ., getSourceFile, (, ), !=]
[., id, =, inputId, ;, if, (, ast, !=, null, &&, ast, ., getSourceFile, (, ), !=, null, ), {]
[., id, =, inputId, ;, if, (, ast, !=, null, &&, ast, ., getSourceFile, (, ), !=, null, ), {]
[., id, =, inputId, ;, if, (, ast, !=, null, &&, ast, ., getSourceFile, (, ), !=, null, ), {]
[!=, null, &&, ast, ., getSourceFile, (, ), !=, null, ), {, ast, ., getSourceFile, (, ), ., setIsExtern, (]
[getSourceFile, (, ), ., setIsExtern, (, isExtern, ), ;, }, }, public, CompilerInput, (, SourceFile, file, ), {, this, (]
[), ., setIsExtern, (, isExtern, ), ;, }, }, public, CompilerInput, (, SourceFile, file, ), {, this, (, file, ,]
[this, (, file, ,, false, ), ;, }, public, CompilerInput, (, SourceFile, file, ,, boolean, isExtern, ), {, this, (]
[,, false, ), ;, }, public, CompilerInput, (, SourceFile, file, ,, boolean, isExtern, ), {, this, (, new, JsAst, (]
[;, }, public, CompilerInput, (, SourceFile, file, ,, boolean, isExtern, ), {, this, (, new, JsAst, (, file, ), ,]
[(, new, JsAst, (, file, ), ,, isExtern, ), ;, }, @, Override, public, InputId, getInputId, (, ), {, return]
[Override, public, InputId, getInputId, (, ), {, return, id, ;, }, @, Override, public, String, getName, (, ), {, return]
[Override, public, InputId, getInputId, (, ), {, return, id, ;, }, @, Override, public, String, getName, (, ), {, return]
[String, getName, (, ), {, return, id, ., getIdName, (, ), ;, }, public, SourceAst, getAst, (, ), {, return]
[}, public, SourceAst, getAst, (, ), {, return, ast, ;, }, @, Override, public, String, getPathRelativeToClosureBase, (, ), {, throw]
[throw, new, UnsupportedOperationException, (, ), ;, }, @, Override, public, Node, getAstRoot, (, AbstractCompiler, compiler, ), {, Node, root, =]
[throw, new, UnsupportedOperationException, (, ), ;, }, @, Override, public, Node, getAstRoot, (, AbstractCompiler, compiler, ), {, Node, root, =]
[), ;, }, @, Override, public, Node, getAstRoot, (, AbstractCompiler, compiler, ), {, Node, root, =, ast, ., getAstRoot, (]
[public, Node, getAstRoot, (, AbstractCompiler, compiler, ), {, Node, root, =, ast, ., getAstRoot, (, compiler, ), ;, if, (]
[public, Node, getAstRoot, (, AbstractCompiler, compiler, ), {, Node, root, =, ast, ., getAstRoot, (, compiler, ), ;, if, (]
[getAstRoot, (, AbstractCompiler, compiler, ), {, Node, root, =, ast, ., getAstRoot, (, compiler, ), ;, if, (, root, !=]
[compiler, ), {, Node, root, =, ast, ., getAstRoot, (, compiler, ), ;, if, (, root, !=, null, ), {]
[compiler, ), {, Node, root, =, ast, ., getAstRoot, (, compiler, ), ;, if, (, root, !=, null, ), {]
[root, =, ast, ., getAstRoot, (, compiler, ), ;, if, (, root, !=, null, ), {, Preconditions, ., checkState, (]
[root, =, ast, ., getAstRoot, (, compiler, ), ;, if, (, root, !=, null, ), {, Preconditions, ., checkState, (]
[), ;, if, (, root, !=, null, ), {, Preconditions, ., checkState, (, root, ., isScript, (, ), ), ;]
[), ;, if, (, root, !=, null, ), {, Preconditions, ., checkState, (, root, ., isScript, (, ), ), ;]
[root, !=, null, ), {, Preconditions, ., checkState, (, root, ., isScript, (, ), ), ;, Preconditions, ., checkNotNull, (]
[root, !=, null, ), {, Preconditions, ., checkState, (, root, ., isScript, (, ), ), ;, Preconditions, ., checkNotNull, (]
[root, ., isScript, (, ), ), ;, Preconditions, ., checkNotNull, (, root, ., getInputId, (, ), ), ;, }, return]
[root, ., getInputId, (, ), ), ;, }, return, root, ;, }, @, Override, public, void, clearAst, (, ), {]
[root, ., getInputId, (, ), ), ;, }, return, root, ;, }, @, Override, public, void, clearAst, (, ), {]
[clearAst, (, ), {, ast, ., clearAst, (, ), ;, }, @, Override, public, SourceFile, getSourceFile, (, ), {, return]
[clearAst, (, ), {, ast, ., clearAst, (, ), ;, }, @, Override, public, SourceFile, getSourceFile, (, ), {, return]
[), {, return, ast, ., getSourceFile, (, ), ;, }, @, Override, public, void, setSourceFile, (, SourceFile, file, ), {]
[), {, return, ast, ., getSourceFile, (, ), ;, }, @, Override, public, void, setSourceFile, (, SourceFile, file, ), {]
[., getSourceFile, (, ), ;, }, @, Override, public, void, setSourceFile, (, SourceFile, file, ), {, ast, ., setSourceFile, (]
[(, SourceFile, file, ), {, ast, ., setSourceFile, (, file, ), ;, }, public, SourceAst, getSourceAst, (, ), {, return]
[;, }, public, SourceAst, getSourceAst, (, ), {, return, ast, ;, }, public, void, setCompiler, (, AbstractCompiler, compiler, ), {]
[;, }, public, SourceAst, getSourceAst, (, ), {, return, ast, ;, }, public, void, setCompiler, (, AbstractCompiler, compiler, ), {]
[getSourceAst, (, ), {, return, ast, ;, }, public, void, setCompiler, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[void, setCompiler, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, private, void, checkErrorManager, (, ), {]
[void, setCompiler, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, private, void, checkErrorManager, (, ), {]
[compiler, ), {, this, ., compiler, =, compiler, ;, }, private, void, checkErrorManager, (, ), {, Preconditions, ., checkNotNull, (]
[{, this, ., compiler, =, compiler, ;, }, private, void, checkErrorManager, (, ), {, Preconditions, ., checkNotNull, (, compiler, ,]
[{, this, ., compiler, =, compiler, ;, }, private, void, checkErrorManager, (, ), {, Preconditions, ., checkNotNull, (, compiler, ,]
[., compiler, =, compiler, ;, }, private, void, checkErrorManager, (, ), {, Preconditions, ., checkNotNull, (, compiler, ,, "Expected setCompiler to be called first: ", +]
[compiler, ;, }, private, void, checkErrorManager, (, ), {, Preconditions, ., checkNotNull, (, compiler, ,, "Expected setCompiler to be called first: ", +, this, ), ;]
[compiler, ;, }, private, void, checkErrorManager, (, ), {, Preconditions, ., checkNotNull, (, compiler, ,, "Expected setCompiler to be called first: ", +, this, ), ;]
[void, checkErrorManager, (, ), {, Preconditions, ., checkNotNull, (, compiler, ,, "Expected setCompiler to be called first: ", +, this, ), ;, Preconditions, ., checkNotNull, (]
[void, checkErrorManager, (, ), {, Preconditions, ., checkNotNull, (, compiler, ,, "Expected setCompiler to be called first: ", +, this, ), ;, Preconditions, ., checkNotNull, (]
[., checkNotNull, (, compiler, ,, "Expected setCompiler to be called first: ", +, this, ), ;, Preconditions, ., checkNotNull, (, compiler, ., getErrorManager, (, ), ,]
[., checkNotNull, (, compiler, ,, "Expected setCompiler to be called first: ", +, this, ), ;, Preconditions, ., checkNotNull, (, compiler, ., getErrorManager, (, ), ,]
[(, compiler, ,, "Expected setCompiler to be called first: ", +, this, ), ;, Preconditions, ., checkNotNull, (, compiler, ., getErrorManager, (, ), ,, "Expected compiler to call an error manager: ", +]
[(, ), ,, "Expected compiler to call an error manager: ", +, this, ), ;, }, @, Override, public, Collection, <, String, >, getRequires, (, ), {]
[), ;, }, @, Override, public, Collection, <, String, >, getRequires, (, ), {, checkErrorManager, (, ), ;, try, {]
[public, Collection, <, String, >, getRequires, (, ), {, checkErrorManager, (, ), ;, try, {, regenerateDependencyInfoIfNecessary, (, ), ;, return]
[public, Collection, <, String, >, getRequires, (, ), {, checkErrorManager, (, ), ;, try, {, regenerateDependencyInfoIfNecessary, (, ), ;, return]
[), {, checkErrorManager, (, ), ;, try, {, regenerateDependencyInfoIfNecessary, (, ), ;, return, Collections, ., <, String, >, unmodifiableSet, (]
[), ;, return, Collections, ., <, String, >, unmodifiableSet, (, requires, ), ;, }, catch, (, IOException, e, ), {]
[), ;, return, Collections, ., <, String, >, unmodifiableSet, (, requires, ), ;, }, catch, (, IOException, e, ), {]
[), ;, return, Collections, ., <, String, >, unmodifiableSet, (, requires, ), ;, }, catch, (, IOException, e, ), {]
[unmodifiableSet, (, requires, ), ;, }, catch, (, IOException, e, ), {, compiler, ., getErrorManager, (, ), ., report, (]
[unmodifiableSet, (, requires, ), ;, }, catch, (, IOException, e, ), {, compiler, ., getErrorManager, (, ), ., report, (]
[;, }, catch, (, IOException, e, ), {, compiler, ., getErrorManager, (, ), ., report, (, CheckLevel, ., ERROR, ,]
[;, }, catch, (, IOException, e, ), {, compiler, ., getErrorManager, (, ), ., report, (, CheckLevel, ., ERROR, ,]
[IOException, e, ), {, compiler, ., getErrorManager, (, ), ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (]
[IOException, e, ), {, compiler, ., getErrorManager, (, ), ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (]
[compiler, ., getErrorManager, (, ), ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,]
[(, CheckLevel, ., ERROR, ,, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, getName, (, ), ), ), ;, return]
[(, CheckLevel, ., ERROR, ,, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, getName, (, ), ), ), ;, return]
[<, String, >, of, (, ), ;, }, }, @, Override, public, Collection, <, String, >, getProvides, (, ), {]
[;, }, }, @, Override, public, Collection, <, String, >, getProvides, (, ), {, checkErrorManager, (, ), ;, try, {]
[public, Collection, <, String, >, getProvides, (, ), {, checkErrorManager, (, ), ;, try, {, regenerateDependencyInfoIfNecessary, (, ), ;, return]
[public, Collection, <, String, >, getProvides, (, ), {, checkErrorManager, (, ), ;, try, {, regenerateDependencyInfoIfNecessary, (, ), ;, return]
[), {, checkErrorManager, (, ), ;, try, {, regenerateDependencyInfoIfNecessary, (, ), ;, return, Collections, ., <, String, >, unmodifiableSet, (]
[), ;, return, Collections, ., <, String, >, unmodifiableSet, (, provides, ), ;, }, catch, (, IOException, e, ), {]
[), ;, return, Collections, ., <, String, >, unmodifiableSet, (, provides, ), ;, }, catch, (, IOException, e, ), {]
[), ;, return, Collections, ., <, String, >, unmodifiableSet, (, provides, ), ;, }, catch, (, IOException, e, ), {]
[unmodifiableSet, (, provides, ), ;, }, catch, (, IOException, e, ), {, compiler, ., getErrorManager, (, ), ., report, (]
[unmodifiableSet, (, provides, ), ;, }, catch, (, IOException, e, ), {, compiler, ., getErrorManager, (, ), ., report, (]
[;, }, catch, (, IOException, e, ), {, compiler, ., getErrorManager, (, ), ., report, (, CheckLevel, ., ERROR, ,]
[;, }, catch, (, IOException, e, ), {, compiler, ., getErrorManager, (, ), ., report, (, CheckLevel, ., ERROR, ,]
[IOException, e, ), {, compiler, ., getErrorManager, (, ), ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (]
[IOException, e, ), {, compiler, ., getErrorManager, (, ), ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (]
[compiler, ., getErrorManager, (, ), ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,]
[(, CheckLevel, ., ERROR, ,, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, getName, (, ), ), ), ;, return]
[(, CheckLevel, ., ERROR, ,, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, getName, (, ), ), ), ;, return]
[;, return, ImmutableList, ., <, String, >, of, (, ), ;, }, }, void, addProvide, (, String, provide, ), {]
[<, String, >, of, (, ), ;, }, }, void, addProvide, (, String, provide, ), {, getProvides, (, ), ;]
[<, String, >, of, (, ), ;, }, }, void, addProvide, (, String, provide, ), {, getProvides, (, ), ;]
[(, ), ;, }, }, void, addProvide, (, String, provide, ), {, getProvides, (, ), ;, provides, ., add, (]
[{, getProvides, (, ), ;, provides, ., add, (, provide, ), ;, }, void, addRequire, (, String, require, ), {]
[;, provides, ., add, (, provide, ), ;, }, void, addRequire, (, String, require, ), {, getRequires, (, ), ;]
[;, provides, ., add, (, provide, ), ;, }, void, addRequire, (, String, require, ), {, getRequires, (, ), ;]
[(, provide, ), ;, }, void, addRequire, (, String, require, ), {, getRequires, (, ), ;, requires, ., add, (]
[getRequires, (, ), ;, requires, ., add, (, require, ), ;, }, public, void, removeRequire, (, String, require, ), {]
[requires, ., add, (, require, ), ;, }, public, void, removeRequire, (, String, require, ), {, getRequires, (, ), ;]
[requires, ., add, (, require, ), ;, }, public, void, removeRequire, (, String, require, ), {, getRequires, (, ), ;]
[require, ), ;, }, public, void, removeRequire, (, String, require, ), {, getRequires, (, ), ;, requires, ., remove, (]
[), ;, requires, ., remove, (, require, ), ;, }, private, void, regenerateDependencyInfoIfNecessary, (, ), throws, IOException, {, if, (]
[;, requires, ., remove, (, require, ), ;, }, private, void, regenerateDependencyInfoIfNecessary, (, ), throws, IOException, {, if, (, !]
[requires, ., remove, (, require, ), ;, }, private, void, regenerateDependencyInfoIfNecessary, (, ), throws, IOException, {, if, (, !, (]
[requires, ., remove, (, require, ), ;, }, private, void, regenerateDependencyInfoIfNecessary, (, ), throws, IOException, {, if, (, !, (]
[;, }, private, void, regenerateDependencyInfoIfNecessary, (, ), throws, IOException, {, if, (, !, (, ast, instanceof, JsAst, ), ), {]
[;, }, private, void, regenerateDependencyInfoIfNecessary, (, ), throws, IOException, {, if, (, !, (, ast, instanceof, JsAst, ), ), {]
[regenerateDependencyInfoIfNecessary, (, ), throws, IOException, {, if, (, !, (, ast, instanceof, JsAst, ), ), {, Preconditions, ., checkNotNull, (]
[), throws, IOException, {, if, (, !, (, ast, instanceof, JsAst, ), ), {, Preconditions, ., checkNotNull, (, compiler, ,]
[!, (, ast, instanceof, JsAst, ), ), {, Preconditions, ., checkNotNull, (, compiler, ,, "Expected setCompiler to be called first", ), ;, DepsFinder, finder, =]
[Preconditions, ., checkNotNull, (, compiler, ,, "Expected setCompiler to be called first", ), ;, DepsFinder, finder, =, new, DepsFinder, (, ), ;, Node, root, =]
[checkNotNull, (, compiler, ,, "Expected setCompiler to be called first", ), ;, DepsFinder, finder, =, new, DepsFinder, (, ), ;, Node, root, =, getAstRoot, (]
[), ;, DepsFinder, finder, =, new, DepsFinder, (, ), ;, Node, root, =, getAstRoot, (, compiler, ), ;, if, (]
[), ;, DepsFinder, finder, =, new, DepsFinder, (, ), ;, Node, root, =, getAstRoot, (, compiler, ), ;, if, (]
[DepsFinder, finder, =, new, DepsFinder, (, ), ;, Node, root, =, getAstRoot, (, compiler, ), ;, if, (, root, ==]
[), ;, Node, root, =, getAstRoot, (, compiler, ), ;, if, (, root, ==, null, ), {, return, ;, }]
[), ;, Node, root, =, getAstRoot, (, compiler, ), ;, if, (, root, ==, null, ), {, return, ;, }]
[=, getAstRoot, (, compiler, ), ;, if, (, root, ==, null, ), {, return, ;, }, finder, ., visitTree, (]
[(, compiler, ), ;, if, (, root, ==, null, ), {, return, ;, }, finder, ., visitTree, (, getAstRoot, (]
[if, (, root, ==, null, ), {, return, ;, }, finder, ., visitTree, (, getAstRoot, (, compiler, ), ), ;]
[if, (, root, ==, null, ), {, return, ;, }, finder, ., visitTree, (, getAstRoot, (, compiler, ), ), ;]
[null, ), {, return, ;, }, finder, ., visitTree, (, getAstRoot, (, compiler, ), ), ;, provides, ., addAll, (]
[null, ), {, return, ;, }, finder, ., visitTree, (, getAstRoot, (, compiler, ), ), ;, provides, ., addAll, (]
[}, finder, ., visitTree, (, getAstRoot, (, compiler, ), ), ;, provides, ., addAll, (, finder, ., provides, ), ;]
[}, finder, ., visitTree, (, getAstRoot, (, compiler, ), ), ;, provides, ., addAll, (, finder, ., provides, ), ;]
[(, getAstRoot, (, compiler, ), ), ;, provides, ., addAll, (, finder, ., provides, ), ;, requires, ., addAll, (]
[(, getAstRoot, (, compiler, ), ), ;, provides, ., addAll, (, finder, ., provides, ), ;, requires, ., addAll, (]
[(, finder, ., provides, ), ;, requires, ., addAll, (, finder, ., requires, ), ;, }, else, {, if, (]
[finder, ., provides, ), ;, requires, ., addAll, (, finder, ., requires, ), ;, }, else, {, if, (, !]
[., addAll, (, finder, ., requires, ), ;, }, else, {, if, (, !, generatedDependencyInfoFromSource, ), {, DependencyInfo, info, =]
[., addAll, (, finder, ., requires, ), ;, }, else, {, if, (, !, generatedDependencyInfoFromSource, ), {, DependencyInfo, info, =]
[., addAll, (, finder, ., requires, ), ;, }, else, {, if, (, !, generatedDependencyInfoFromSource, ), {, DependencyInfo, info, =]
[addAll, (, finder, ., requires, ), ;, }, else, {, if, (, !, generatedDependencyInfoFromSource, ), {, DependencyInfo, info, =, (]
[., requires, ), ;, }, else, {, if, (, !, generatedDependencyInfoFromSource, ), {, DependencyInfo, info, =, (, new, JsFileParser, (]
[., requires, ), ;, }, else, {, if, (, !, generatedDependencyInfoFromSource, ), {, DependencyInfo, info, =, (, new, JsFileParser, (]
[generatedDependencyInfoFromSource, ), {, DependencyInfo, info, =, (, new, JsFileParser, (, compiler, ., getErrorManager, (, ), ), ), ., setIncludeGoogBase, (]
[=, (, new, JsFileParser, (, compiler, ., getErrorManager, (, ), ), ), ., setIncludeGoogBase, (, true, ), ., parseFile, (]
[(, compiler, ., getErrorManager, (, ), ), ), ., setIncludeGoogBase, (, true, ), ., parseFile, (, getName, (, ), ,]
[(, ), ), ), ., setIncludeGoogBase, (, true, ), ., parseFile, (, getName, (, ), ,, getName, (, ), ,]
[setIncludeGoogBase, (, true, ), ., parseFile, (, getName, (, ), ,, getName, (, ), ,, getCode, (, ), ), ;]
[setIncludeGoogBase, (, true, ), ., parseFile, (, getName, (, ), ,, getName, (, ), ,, getCode, (, ), ), ;]
[., parseFile, (, getName, (, ), ,, getName, (, ), ,, getCode, (, ), ), ;, provides, ., addAll, (]
[., parseFile, (, getName, (, ), ,, getName, (, ), ,, getCode, (, ), ), ;, provides, ., addAll, (]
[getName, (, ), ,, getCode, (, ), ), ;, provides, ., addAll, (, info, ., getProvides, (, ), ), ;]
[getName, (, ), ,, getCode, (, ), ), ;, provides, ., addAll, (, info, ., getProvides, (, ), ), ;]
[getCode, (, ), ), ;, provides, ., addAll, (, info, ., getProvides, (, ), ), ;, requires, ., addAll, (]
[getCode, (, ), ), ;, provides, ., addAll, (, info, ., getProvides, (, ), ), ;, requires, ., addAll, (]
[addAll, (, info, ., getProvides, (, ), ), ;, requires, ., addAll, (, info, ., getRequires, (, ), ), ;]
[info, ., getProvides, (, ), ), ;, requires, ., addAll, (, info, ., getRequires, (, ), ), ;, generatedDependencyInfoFromSource, =]
[generatedDependencyInfoFromSource, =, true, ;, }, }, }, private, static, class, DepsFinder, {, private, final, List, <, String, >, provides, =]
[generatedDependencyInfoFromSource, =, true, ;, }, }, }, private, static, class, DepsFinder, {, private, final, List, <, String, >, provides, =]
[List, <, String, >, provides, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, String, >, requires, =]
[List, <, String, >, provides, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, String, >, requires, =]
[;, private, final, List, <, String, >, requires, =, Lists, ., newArrayList, (, ), ;, private, final, CodingConvention, codingConvention, =]
[(, ), ;, private, final, CodingConvention, codingConvention, =, new, ClosureCodingConvention, (, ), ;, void, visitTree, (, Node, n, ), {]
[;, private, final, CodingConvention, codingConvention, =, new, ClosureCodingConvention, (, ), ;, void, visitTree, (, Node, n, ), {, visitSubtree, (]
[final, CodingConvention, codingConvention, =, new, ClosureCodingConvention, (, ), ;, void, visitTree, (, Node, n, ), {, visitSubtree, (, n, ,]
[visitSubtree, (, n, ,, null, ), ;, }, void, visitSubtree, (, Node, n, ,, Node, parent, ), {, if, (]
[visitSubtree, (, n, ,, null, ), ;, }, void, visitSubtree, (, Node, n, ,, Node, parent, ), {, if, (]
[(, Node, n, ,, Node, parent, ), {, if, (, n, ., isCall, (, ), ), {, String, require, =]
[(, Node, n, ,, Node, parent, ), {, if, (, n, ., isCall, (, ), ), {, String, require, =]
[Node, parent, ), {, if, (, n, ., isCall, (, ), ), {, String, require, =, codingConvention, ., extractClassNameIfRequire, (]
[), {, if, (, n, ., isCall, (, ), ), {, String, require, =, codingConvention, ., extractClassNameIfRequire, (, n, ,]
[., isCall, (, ), ), {, String, require, =, codingConvention, ., extractClassNameIfRequire, (, n, ,, parent, ), ;, if, (]
[., isCall, (, ), ), {, String, require, =, codingConvention, ., extractClassNameIfRequire, (, n, ,, parent, ), ;, if, (]
[(, ), ), {, String, require, =, codingConvention, ., extractClassNameIfRequire, (, n, ,, parent, ), ;, if, (, require, !=]
[{, String, require, =, codingConvention, ., extractClassNameIfRequire, (, n, ,, parent, ), ;, if, (, require, !=, null, ), {]
[{, String, require, =, codingConvention, ., extractClassNameIfRequire, (, n, ,, parent, ), ;, if, (, require, !=, null, ), {]
[codingConvention, ., extractClassNameIfRequire, (, n, ,, parent, ), ;, if, (, require, !=, null, ), {, requires, ., add, (]
[), ;, if, (, require, !=, null, ), {, requires, ., add, (, require, ), ;, }, String, provide, =]
[), ;, if, (, require, !=, null, ), {, requires, ., add, (, require, ), ;, }, String, provide, =]
[require, !=, null, ), {, requires, ., add, (, require, ), ;, }, String, provide, =, codingConvention, ., extractClassNameIfProvide, (]
[null, ), {, requires, ., add, (, require, ), ;, }, String, provide, =, codingConvention, ., extractClassNameIfProvide, (, n, ,]
[add, (, require, ), ;, }, String, provide, =, codingConvention, ., extractClassNameIfProvide, (, n, ,, parent, ), ;, if, (]
[add, (, require, ), ;, }, String, provide, =, codingConvention, ., extractClassNameIfProvide, (, n, ,, parent, ), ;, if, (]
[require, ), ;, }, String, provide, =, codingConvention, ., extractClassNameIfProvide, (, n, ,, parent, ), ;, if, (, provide, !=]
[}, String, provide, =, codingConvention, ., extractClassNameIfProvide, (, n, ,, parent, ), ;, if, (, provide, !=, null, ), {]
[}, String, provide, =, codingConvention, ., extractClassNameIfProvide, (, n, ,, parent, ), ;, if, (, provide, !=, null, ), {]
[codingConvention, ., extractClassNameIfProvide, (, n, ,, parent, ), ;, if, (, provide, !=, null, ), {, provides, ., add, (]
[(, provide, !=, null, ), {, provides, ., add, (, provide, ), ;, }, return, ;, }, else, if, (]
[(, provide, !=, null, ), {, provides, ., add, (, provide, ), ;, }, return, ;, }, else, if, (]
[(, provide, !=, null, ), {, provides, ., add, (, provide, ), ;, }, return, ;, }, else, if, (]
[(, provide, !=, null, ), {, provides, ., add, (, provide, ), ;, }, return, ;, }, else, if, (]
[!=, null, ), {, provides, ., add, (, provide, ), ;, }, return, ;, }, else, if, (, parent, !=]
[), {, provides, ., add, (, provide, ), ;, }, return, ;, }, else, if, (, parent, !=, null, &&]
[{, provides, ., add, (, provide, ), ;, }, return, ;, }, else, if, (, parent, !=, null, &&, !]
[{, provides, ., add, (, provide, ), ;, }, return, ;, }, else, if, (, parent, !=, null, &&, !]
[), ;, }, return, ;, }, else, if, (, parent, !=, null, &&, !, parent, ., isExprResult, (, ), &&]
[;, }, return, ;, }, else, if, (, parent, !=, null, &&, !, parent, ., isExprResult, (, ), &&, !]
[;, }, return, ;, }, else, if, (, parent, !=, null, &&, !, parent, ., isExprResult, (, ), &&, !]
[isExprResult, (, ), &&, !, parent, ., isScript, (, ), ), {, return, ;, }, for, (, Node, child, =]
[isExprResult, (, ), &&, !, parent, ., isScript, (, ), ), {, return, ;, }, for, (, Node, child, =]
[., isScript, (, ), ), {, return, ;, }, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[., isScript, (, ), ), {, return, ;, }, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[(, ), ), {, return, ;, }, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=]
[), {, return, ;, }, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;]
[return, ;, }, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[return, ;, }, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[=, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, visitSubtree, (]
[(, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, visitSubtree, (, child, ,]
[{, visitSubtree, (, child, ,, n, ), ;, }, }, }, public, String, getLine, (, int, lineNumber, ), {, return]
[{, visitSubtree, (, child, ,, n, ), ;, }, }, }, public, String, getLine, (, int, lineNumber, ), {, return]
[), ;, }, }, }, public, String, getLine, (, int, lineNumber, ), {, return, getSourceFile, (, ), ., getLine, (]
[return, getSourceFile, (, ), ., getLine, (, lineNumber, ), ;, }, public, Region, getRegion, (, int, lineNumber, ), {, return]
[return, getSourceFile, (, ), ., getLine, (, lineNumber, ), ;, }, public, Region, getRegion, (, int, lineNumber, ), {, return]
[(, lineNumber, ), ;, }, public, Region, getRegion, (, int, lineNumber, ), {, return, getSourceFile, (, ), ., getRegion, (]
[return, getSourceFile, (, ), ., getRegion, (, lineNumber, ), ;, }, public, String, getCode, (, ), throws, IOException, {, return]
[return, getSourceFile, (, ), ., getRegion, (, lineNumber, ), ;, }, public, String, getCode, (, ), throws, IOException, {, return]
[throws, IOException, {, return, getSourceFile, (, ), ., getCode, (, ), ;, }, public, JSModule, getModule, (, ), {, return]
[;, }, public, JSModule, getModule, (, ), {, return, module, ;, }, public, void, setModule, (, JSModule, module, ), {]
[;, }, public, JSModule, getModule, (, ), {, return, module, ;, }, public, void, setModule, (, JSModule, module, ), {]
[getModule, (, ), {, return, module, ;, }, public, void, setModule, (, JSModule, module, ), {, Preconditions, ., checkArgument, (]
[getModule, (, ), {, return, module, ;, }, public, void, setModule, (, JSModule, module, ), {, Preconditions, ., checkArgument, (]
[getModule, (, ), {, return, module, ;, }, public, void, setModule, (, JSModule, module, ), {, Preconditions, ., checkArgument, (]
[getModule, (, ), {, return, module, ;, }, public, void, setModule, (, JSModule, module, ), {, Preconditions, ., checkArgument, (]
[), {, return, module, ;, }, public, void, setModule, (, JSModule, module, ), {, Preconditions, ., checkArgument, (, module, ==]
[return, module, ;, }, public, void, setModule, (, JSModule, module, ), {, Preconditions, ., checkArgument, (, module, ==, null, ||]
[return, module, ;, }, public, void, setModule, (, JSModule, module, ), {, Preconditions, ., checkArgument, (, module, ==, null, ||]
[return, module, ;, }, public, void, setModule, (, JSModule, module, ), {, Preconditions, ., checkArgument, (, module, ==, null, ||]
[public, void, setModule, (, JSModule, module, ), {, Preconditions, ., checkArgument, (, module, ==, null, ||, this, ., module, ==]
[setModule, (, JSModule, module, ), {, Preconditions, ., checkArgument, (, module, ==, null, ||, this, ., module, ==, null, ||]
[setModule, (, JSModule, module, ), {, Preconditions, ., checkArgument, (, module, ==, null, ||, this, ., module, ==, null, ||]
[setModule, (, JSModule, module, ), {, Preconditions, ., checkArgument, (, module, ==, null, ||, this, ., module, ==, null, ||]
[), {, Preconditions, ., checkArgument, (, module, ==, null, ||, this, ., module, ==, null, ||, this, ., module, ==]
[., checkArgument, (, module, ==, null, ||, this, ., module, ==, null, ||, this, ., module, ==, module, ), ;]
[., checkArgument, (, module, ==, null, ||, this, ., module, ==, null, ||, this, ., module, ==, module, ), ;]
[==, null, ||, this, ., module, ==, null, ||, this, ., module, ==, module, ), ;, this, ., module, =]
[., module, ==, module, ), ;, this, ., module, =, module, ;, }, void, overrideModule, (, JSModule, module, ), {]
[., module, ==, module, ), ;, this, ., module, =, module, ;, }, void, overrideModule, (, JSModule, module, ), {]
[), ;, this, ., module, =, module, ;, }, void, overrideModule, (, JSModule, module, ), {, this, ., module, =]
[(, JSModule, module, ), {, this, ., module, =, module, ;, }, public, boolean, isExtern, (, ), {, if, (]
[(, JSModule, module, ), {, this, ., module, =, module, ;, }, public, boolean, isExtern, (, ), {, if, (]
[(, JSModule, module, ), {, this, ., module, =, module, ;, }, public, boolean, isExtern, (, ), {, if, (]
[module, ), {, this, ., module, =, module, ;, }, public, boolean, isExtern, (, ), {, if, (, ast, ==]
[{, this, ., module, =, module, ;, }, public, boolean, isExtern, (, ), {, if, (, ast, ==, null, ||]
[{, this, ., module, =, module, ;, }, public, boolean, isExtern, (, ), {, if, (, ast, ==, null, ||]
[{, this, ., module, =, module, ;, }, public, boolean, isExtern, (, ), {, if, (, ast, ==, null, ||]
[;, }, public, boolean, isExtern, (, ), {, if, (, ast, ==, null, ||, ast, ., getSourceFile, (, ), ==]
[isExtern, (, ), {, if, (, ast, ==, null, ||, ast, ., getSourceFile, (, ), ==, null, ), {, return]
[if, (, ast, ==, null, ||, ast, ., getSourceFile, (, ), ==, null, ), {, return, false, ;, }, return]
[if, (, ast, ==, null, ||, ast, ., getSourceFile, (, ), ==, null, ), {, return, false, ;, }, return]
[if, (, ast, ==, null, ||, ast, ., getSourceFile, (, ), ==, null, ), {, return, false, ;, }, return]
[ast, ., getSourceFile, (, ), ., isExtern, (, ), ;, }, void, setIsExtern, (, boolean, isExtern, ), {, if, (]
[ast, ., getSourceFile, (, ), ., isExtern, (, ), ;, }, void, setIsExtern, (, boolean, isExtern, ), {, if, (]
[ast, ., getSourceFile, (, ), ., isExtern, (, ), ;, }, void, setIsExtern, (, boolean, isExtern, ), {, if, (]
[getSourceFile, (, ), ., isExtern, (, ), ;, }, void, setIsExtern, (, boolean, isExtern, ), {, if, (, ast, ==]
[), ., isExtern, (, ), ;, }, void, setIsExtern, (, boolean, isExtern, ), {, if, (, ast, ==, null, ||]
[), ., isExtern, (, ), ;, }, void, setIsExtern, (, boolean, isExtern, ), {, if, (, ast, ==, null, ||]
[), ., isExtern, (, ), ;, }, void, setIsExtern, (, boolean, isExtern, ), {, if, (, ast, ==, null, ||]
[}, void, setIsExtern, (, boolean, isExtern, ), {, if, (, ast, ==, null, ||, ast, ., getSourceFile, (, ), ==]
[), {, if, (, ast, ==, null, ||, ast, ., getSourceFile, (, ), ==, null, ), {, return, ;, }]
[), {, if, (, ast, ==, null, ||, ast, ., getSourceFile, (, ), ==, null, ), {, return, ;, }]
[), {, if, (, ast, ==, null, ||, ast, ., getSourceFile, (, ), ==, null, ), {, return, ;, }]
[ast, ., getSourceFile, (, ), ==, null, ), {, return, ;, }, ast, ., getSourceFile, (, ), ., setIsExtern, (]
[., getSourceFile, (, ), ., setIsExtern, (, isExtern, ), ;, }, public, int, getLineOffset, (, int, lineno, ), {, return]
[., getSourceFile, (, ), ., setIsExtern, (, isExtern, ), ;, }, public, int, getLineOffset, (, int, lineno, ), {, return]
[., getSourceFile, (, ), ., setIsExtern, (, isExtern, ), ;, }, public, int, getLineOffset, (, int, lineno, ), {, return]
[), ;, }, public, int, getLineOffset, (, int, lineno, ), {, return, ast, ., getSourceFile, (, ), ., getLineOffset, (]
[return, ast, ., getSourceFile, (, ), ., getLineOffset, (, lineno, ), ;, }, public, int, getNumLines, (, ), {, return]
[return, ast, ., getSourceFile, (, ), ., getLineOffset, (, lineno, ), ;, }, public, int, getNumLines, (, ), {, return]
[return, ast, ., getSourceFile, (, ), ., getLineOffset, (, lineno, ), ;, }, public, int, getNumLines, (, ), {, return]
[ast, ., getSourceFile, (, ), ., getNumLines, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
