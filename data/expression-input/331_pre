[., Set, ;, import, java, ., util, ., Stack, ;, class, AnalyzePrototypeProperties, implements, CompilerPass, {, private, final, SymbolType, PROPERTY, =]
[., Set, ;, import, java, ., util, ., Stack, ;, class, AnalyzePrototypeProperties, implements, CompilerPass, {, private, final, SymbolType, PROPERTY, =]
[;, class, AnalyzePrototypeProperties, implements, CompilerPass, {, private, final, SymbolType, PROPERTY, =, SymbolType, ., PROPERTY, ;, private, final, SymbolType, VAR, =]
[;, class, AnalyzePrototypeProperties, implements, CompilerPass, {, private, final, SymbolType, PROPERTY, =, SymbolType, ., PROPERTY, ;, private, final, SymbolType, VAR, =]
[;, private, final, JSModuleGraph, moduleGraph, ;, private, final, JSModule, firstModule, ;, private, static, final, Set, <, String, >, IMPLICITLY_USED_PROPERTIES, =]
[;, private, final, JSModuleGraph, moduleGraph, ;, private, final, JSModule, firstModule, ;, private, static, final, Set, <, String, >, IMPLICITLY_USED_PROPERTIES, =]
[moduleGraph, ;, private, final, JSModule, firstModule, ;, private, static, final, Set, <, String, >, IMPLICITLY_USED_PROPERTIES, =, ImmutableSet, ., of, (]
[private, final, JSModule, firstModule, ;, private, static, final, Set, <, String, >, IMPLICITLY_USED_PROPERTIES, =, ImmutableSet, ., of, (, "length", ,]
[JSModule, firstModule, ;, private, static, final, Set, <, String, >, IMPLICITLY_USED_PROPERTIES, =, ImmutableSet, ., of, (, "length", ,, "toString", ,]
[., of, (, "length", ,, "toString", ,, "valueOf", ), ;, private, final, LinkedDirectedGraph, <, NameInfo, ,, JSModule, >, symbolGraph, =]
[., of, (, "length", ,, "toString", ,, "valueOf", ), ;, private, final, LinkedDirectedGraph, <, NameInfo, ,, JSModule, >, symbolGraph, =]
[final, LinkedDirectedGraph, <, NameInfo, ,, JSModule, >, symbolGraph, =, LinkedDirectedGraph, ., createWithoutAnnotations, (, ), ;, private, final, NameInfo, globalNode, =]
[NameInfo, ,, JSModule, >, symbolGraph, =, LinkedDirectedGraph, ., createWithoutAnnotations, (, ), ;, private, final, NameInfo, globalNode, =, new, NameInfo, (]
[createWithoutAnnotations, (, ), ;, private, final, NameInfo, globalNode, =, new, NameInfo, (, "[global]", ), ;, private, final, NameInfo, externNode, =]
[;, private, final, NameInfo, globalNode, =, new, NameInfo, (, "[global]", ), ;, private, final, NameInfo, externNode, =, new, NameInfo, (]
[(, "[global]", ), ;, private, final, NameInfo, externNode, =, new, NameInfo, (, "[extern]", ), ;, private, final, NameInfo, anonymousNode, =]
[;, private, final, NameInfo, externNode, =, new, NameInfo, (, "[extern]", ), ;, private, final, NameInfo, anonymousNode, =, new, NameInfo, (]
[final, NameInfo, anonymousNode, =, new, NameInfo, (, "[anonymous]", ), ;, private, final, Map, <, String, ,, NameInfo, >, propertyNameInfo, =]
[final, NameInfo, anonymousNode, =, new, NameInfo, (, "[anonymous]", ), ;, private, final, Map, <, String, ,, NameInfo, >, propertyNameInfo, =]
[NameInfo, >, propertyNameInfo, =, Maps, ., newHashMap, (, ), ;, private, final, Map, <, String, ,, NameInfo, >, varNameInfo, =]
[NameInfo, >, propertyNameInfo, =, Maps, ., newHashMap, (, ), ;, private, final, Map, <, String, ,, NameInfo, >, varNameInfo, =]
[., newHashMap, (, ), ;, AnalyzePrototypeProperties, (, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ,, boolean, canModifyExterns, ,, boolean, anchorUnusedVars, ), {]
[., newHashMap, (, ), ;, AnalyzePrototypeProperties, (, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ,, boolean, canModifyExterns, ,, boolean, anchorUnusedVars, ), {]
[;, AnalyzePrototypeProperties, (, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ,, boolean, canModifyExterns, ,, boolean, anchorUnusedVars, ), {, this, ., compiler, =]
[(, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ,, boolean, canModifyExterns, ,, boolean, anchorUnusedVars, ), {, this, ., compiler, =, compiler, ;]
[(, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ,, boolean, canModifyExterns, ,, boolean, anchorUnusedVars, ), {, this, ., compiler, =, compiler, ;]
[JSModuleGraph, moduleGraph, ,, boolean, canModifyExterns, ,, boolean, anchorUnusedVars, ), {, this, ., compiler, =, compiler, ;, this, ., moduleGraph, =]
[,, boolean, canModifyExterns, ,, boolean, anchorUnusedVars, ), {, this, ., compiler, =, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;]
[,, boolean, canModifyExterns, ,, boolean, anchorUnusedVars, ), {, this, ., compiler, =, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;]
[boolean, anchorUnusedVars, ), {, this, ., compiler, =, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, this, ., canModifyExterns, =]
[), {, this, ., compiler, =, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, this, ., canModifyExterns, =, canModifyExterns, ;]
[), {, this, ., compiler, =, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, this, ., canModifyExterns, =, canModifyExterns, ;]
[compiler, =, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, this, ., canModifyExterns, =, canModifyExterns, ;, this, ., anchorUnusedVars, =]
[this, ., moduleGraph, =, moduleGraph, ;, this, ., canModifyExterns, =, canModifyExterns, ;, this, ., anchorUnusedVars, =, anchorUnusedVars, ;, if, (]
[this, ., moduleGraph, =, moduleGraph, ;, this, ., canModifyExterns, =, canModifyExterns, ;, this, ., anchorUnusedVars, =, anchorUnusedVars, ;, if, (]
[moduleGraph, =, moduleGraph, ;, this, ., canModifyExterns, =, canModifyExterns, ;, this, ., anchorUnusedVars, =, anchorUnusedVars, ;, if, (, moduleGraph, !=]
[;, this, ., canModifyExterns, =, canModifyExterns, ;, this, ., anchorUnusedVars, =, anchorUnusedVars, ;, if, (, moduleGraph, !=, null, ), {]
[., canModifyExterns, =, canModifyExterns, ;, this, ., anchorUnusedVars, =, anchorUnusedVars, ;, if, (, moduleGraph, !=, null, ), {, firstModule, =]
[., canModifyExterns, =, canModifyExterns, ;, this, ., anchorUnusedVars, =, anchorUnusedVars, ;, if, (, moduleGraph, !=, null, ), {, firstModule, =]
[anchorUnusedVars, ;, if, (, moduleGraph, !=, null, ), {, firstModule, =, moduleGraph, ., getRootModule, (, ), ;, }, else, {]
[if, (, moduleGraph, !=, null, ), {, firstModule, =, moduleGraph, ., getRootModule, (, ), ;, }, else, {, firstModule, =]
[!=, null, ), {, firstModule, =, moduleGraph, ., getRootModule, (, ), ;, }, else, {, firstModule, =, null, ;, }]
[!=, null, ), {, firstModule, =, moduleGraph, ., getRootModule, (, ), ;, }, else, {, firstModule, =, null, ;, }]
[firstModule, =, moduleGraph, ., getRootModule, (, ), ;, }, else, {, firstModule, =, null, ;, }, globalNode, ., markReference, (]
[., getRootModule, (, ), ;, }, else, {, firstModule, =, null, ;, }, globalNode, ., markReference, (, null, ), ;]
[., getRootModule, (, ), ;, }, else, {, firstModule, =, null, ;, }, globalNode, ., markReference, (, null, ), ;]
[;, }, else, {, firstModule, =, null, ;, }, globalNode, ., markReference, (, null, ), ;, externNode, ., markReference, (]
[{, firstModule, =, null, ;, }, globalNode, ., markReference, (, null, ), ;, externNode, ., markReference, (, null, ), ;]
[{, firstModule, =, null, ;, }, globalNode, ., markReference, (, null, ), ;, externNode, ., markReference, (, null, ), ;]
[;, }, globalNode, ., markReference, (, null, ), ;, externNode, ., markReference, (, null, ), ;, symbolGraph, ., createNode, (]
[., markReference, (, null, ), ;, externNode, ., markReference, (, null, ), ;, symbolGraph, ., createNode, (, globalNode, ), ;]
[., markReference, (, null, ), ;, externNode, ., markReference, (, null, ), ;, symbolGraph, ., createNode, (, globalNode, ), ;]
[), ;, externNode, ., markReference, (, null, ), ;, symbolGraph, ., createNode, (, globalNode, ), ;, symbolGraph, ., createNode, (]
[;, symbolGraph, ., createNode, (, globalNode, ), ;, symbolGraph, ., createNode, (, externNode, ), ;, for, (, String, property, :]
[), ;, symbolGraph, ., createNode, (, externNode, ), ;, for, (, String, property, :, IMPLICITLY_USED_PROPERTIES, ), {, NameInfo, nameInfo, =]
[symbolGraph, ., createNode, (, externNode, ), ;, for, (, String, property, :, IMPLICITLY_USED_PROPERTIES, ), {, NameInfo, nameInfo, =, getNameInfoForName, (]
[createNode, (, externNode, ), ;, for, (, String, property, :, IMPLICITLY_USED_PROPERTIES, ), {, NameInfo, nameInfo, =, getNameInfoForName, (, property, ,]
[for, (, String, property, :, IMPLICITLY_USED_PROPERTIES, ), {, NameInfo, nameInfo, =, getNameInfoForName, (, property, ,, PROPERTY, ), ;, if, (]
[for, (, String, property, :, IMPLICITLY_USED_PROPERTIES, ), {, NameInfo, nameInfo, =, getNameInfoForName, (, property, ,, PROPERTY, ), ;, if, (]
[String, property, :, IMPLICITLY_USED_PROPERTIES, ), {, NameInfo, nameInfo, =, getNameInfoForName, (, property, ,, PROPERTY, ), ;, if, (, moduleGraph, ==]
[IMPLICITLY_USED_PROPERTIES, ), {, NameInfo, nameInfo, =, getNameInfoForName, (, property, ,, PROPERTY, ), ;, if, (, moduleGraph, ==, null, ), {]
[IMPLICITLY_USED_PROPERTIES, ), {, NameInfo, nameInfo, =, getNameInfoForName, (, property, ,, PROPERTY, ), ;, if, (, moduleGraph, ==, null, ), {]
[nameInfo, =, getNameInfoForName, (, property, ,, PROPERTY, ), ;, if, (, moduleGraph, ==, null, ), {, symbolGraph, ., connect, (]
[getNameInfoForName, (, property, ,, PROPERTY, ), ;, if, (, moduleGraph, ==, null, ), {, symbolGraph, ., connect, (, externNode, ,]
[property, ,, PROPERTY, ), ;, if, (, moduleGraph, ==, null, ), {, symbolGraph, ., connect, (, externNode, ,, null, ,]
[{, symbolGraph, ., connect, (, externNode, ,, null, ,, nameInfo, ), ;, }, else, {, for, (, JSModule, module, :]
[{, symbolGraph, ., connect, (, externNode, ,, null, ,, nameInfo, ), ;, }, else, {, for, (, JSModule, module, :]
[null, ,, nameInfo, ), ;, }, else, {, for, (, JSModule, module, :, moduleGraph, ., getAllModules, (, ), ), {]
[null, ,, nameInfo, ), ;, }, else, {, for, (, JSModule, module, :, moduleGraph, ., getAllModules, (, ), ), {]
[;, }, else, {, for, (, JSModule, module, :, moduleGraph, ., getAllModules, (, ), ), {, symbolGraph, ., connect, (]
[else, {, for, (, JSModule, module, :, moduleGraph, ., getAllModules, (, ), ), {, symbolGraph, ., connect, (, externNode, ,]
[for, (, JSModule, module, :, moduleGraph, ., getAllModules, (, ), ), {, symbolGraph, ., connect, (, externNode, ,, module, ,]
[;, }, }, }, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, if, (]
[}, }, }, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, if, (, !]
[}, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, if, (, !, canModifyExterns, ), {]
[}, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, if, (, !, canModifyExterns, ), {]
[void, process, (, Node, externRoot, ,, Node, root, ), {, if, (, !, canModifyExterns, ), {, NodeTraversal, ., traverse, (]
[(, Node, externRoot, ,, Node, root, ), {, if, (, !, canModifyExterns, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[externRoot, ,, Node, root, ), {, if, (, !, canModifyExterns, ), {, NodeTraversal, ., traverse, (, compiler, ,, externRoot, ,]
[(, !, canModifyExterns, ), {, NodeTraversal, ., traverse, (, compiler, ,, externRoot, ,, new, ProcessExternProperties, (, ), ), ;, }]
[(, !, canModifyExterns, ), {, NodeTraversal, ., traverse, (, compiler, ,, externRoot, ,, new, ProcessExternProperties, (, ), ), ;, }]
[{, NodeTraversal, ., traverse, (, compiler, ,, externRoot, ,, new, ProcessExternProperties, (, ), ), ;, }, NodeTraversal, ., traverse, (]
[., traverse, (, compiler, ,, externRoot, ,, new, ProcessExternProperties, (, ), ), ;, }, NodeTraversal, ., traverse, (, compiler, ,]
[(, compiler, ,, externRoot, ,, new, ProcessExternProperties, (, ), ), ;, }, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), ), ;, FixedPointGraphTraversal, <, NameInfo, ,, JSModule, >, t, =]
[traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), ), ;, FixedPointGraphTraversal, <, NameInfo, ,, JSModule, >, t, =]
[root, ,, new, ProcessProperties, (, ), ), ;, FixedPointGraphTraversal, <, NameInfo, ,, JSModule, >, t, =, FixedPointGraphTraversal, ., newTraversal, (]
[), ;, FixedPointGraphTraversal, <, NameInfo, ,, JSModule, >, t, =, FixedPointGraphTraversal, ., newTraversal, (, new, PropagateReferences, (, ), ), ;]
[), ;, FixedPointGraphTraversal, <, NameInfo, ,, JSModule, >, t, =, FixedPointGraphTraversal, ., newTraversal, (, new, PropagateReferences, (, ), ), ;]
[NameInfo, ,, JSModule, >, t, =, FixedPointGraphTraversal, ., newTraversal, (, new, PropagateReferences, (, ), ), ;, t, ., computeFixedPoint, (]
[JSModule, >, t, =, FixedPointGraphTraversal, ., newTraversal, (, new, PropagateReferences, (, ), ), ;, t, ., computeFixedPoint, (, symbolGraph, ,]
[JSModule, >, t, =, FixedPointGraphTraversal, ., newTraversal, (, new, PropagateReferences, (, ), ), ;, t, ., computeFixedPoint, (, symbolGraph, ,]
[FixedPointGraphTraversal, ., newTraversal, (, new, PropagateReferences, (, ), ), ;, t, ., computeFixedPoint, (, symbolGraph, ,, Sets, ., newHashSet, (]
[newTraversal, (, new, PropagateReferences, (, ), ), ;, t, ., computeFixedPoint, (, symbolGraph, ,, Sets, ., newHashSet, (, externNode, ,]
[globalNode, ), ), ;, }, public, Collection, <, NameInfo, >, getAllNameInfo, (, ), {, List, <, NameInfo, >, result, =]
[globalNode, ), ), ;, }, public, Collection, <, NameInfo, >, getAllNameInfo, (, ), {, List, <, NameInfo, >, result, =]
[}, public, Collection, <, NameInfo, >, getAllNameInfo, (, ), {, List, <, NameInfo, >, result, =, Lists, ., newArrayList, (]
[}, public, Collection, <, NameInfo, >, getAllNameInfo, (, ), {, List, <, NameInfo, >, result, =, Lists, ., newArrayList, (]
[(, ), {, List, <, NameInfo, >, result, =, Lists, ., newArrayList, (, propertyNameInfo, ., values, (, ), ), ;]
[(, ), {, List, <, NameInfo, >, result, =, Lists, ., newArrayList, (, propertyNameInfo, ., values, (, ), ), ;]
[<, NameInfo, >, result, =, Lists, ., newArrayList, (, propertyNameInfo, ., values, (, ), ), ;, result, ., addAll, (]
[<, NameInfo, >, result, =, Lists, ., newArrayList, (, propertyNameInfo, ., values, (, ), ), ;, result, ., addAll, (]
[(, propertyNameInfo, ., values, (, ), ), ;, result, ., addAll, (, varNameInfo, ., values, (, ), ), ;, return]
[}, private, NameInfo, getNameInfoForName, (, String, name, ,, SymbolType, type, ), {, Map, <, String, ,, NameInfo, >, map, =]
[}, private, NameInfo, getNameInfoForName, (, String, name, ,, SymbolType, type, ), {, Map, <, String, ,, NameInfo, >, map, =]
[}, private, NameInfo, getNameInfoForName, (, String, name, ,, SymbolType, type, ), {, Map, <, String, ,, NameInfo, >, map, =]
[NameInfo, getNameInfoForName, (, String, name, ,, SymbolType, type, ), {, Map, <, String, ,, NameInfo, >, map, =, type, ==]
[(, String, name, ,, SymbolType, type, ), {, Map, <, String, ,, NameInfo, >, map, =, type, ==, PROPERTY, ?]
[name, ,, SymbolType, type, ), {, Map, <, String, ,, NameInfo, >, map, =, type, ==, PROPERTY, ?, propertyNameInfo, :]
[), {, Map, <, String, ,, NameInfo, >, map, =, type, ==, PROPERTY, ?, propertyNameInfo, :, varNameInfo, ;, if, (]
[), {, Map, <, String, ,, NameInfo, >, map, =, type, ==, PROPERTY, ?, propertyNameInfo, :, varNameInfo, ;, if, (]
[String, ,, NameInfo, >, map, =, type, ==, PROPERTY, ?, propertyNameInfo, :, varNameInfo, ;, if, (, map, ., containsKey, (]
[=, type, ==, PROPERTY, ?, propertyNameInfo, :, varNameInfo, ;, if, (, map, ., containsKey, (, name, ), ), {, return]
[=, type, ==, PROPERTY, ?, propertyNameInfo, :, varNameInfo, ;, if, (, map, ., containsKey, (, name, ), ), {, return]
[?, propertyNameInfo, :, varNameInfo, ;, if, (, map, ., containsKey, (, name, ), ), {, return, map, ., get, (]
[containsKey, (, name, ), ), {, return, map, ., get, (, name, ), ;, }, else, {, NameInfo, nameInfo, =]
[), ), {, return, map, ., get, (, name, ), ;, }, else, {, NameInfo, nameInfo, =, new, NameInfo, (]
[return, map, ., get, (, name, ), ;, }, else, {, NameInfo, nameInfo, =, new, NameInfo, (, name, ), ;]
[return, map, ., get, (, name, ), ;, }, else, {, NameInfo, nameInfo, =, new, NameInfo, (, name, ), ;]
[(, name, ), ;, }, else, {, NameInfo, nameInfo, =, new, NameInfo, (, name, ), ;, map, ., put, (]
[), ;, }, else, {, NameInfo, nameInfo, =, new, NameInfo, (, name, ), ;, map, ., put, (, name, ,]
[else, {, NameInfo, nameInfo, =, new, NameInfo, (, name, ), ;, map, ., put, (, name, ,, nameInfo, ), ;]
[else, {, NameInfo, nameInfo, =, new, NameInfo, (, name, ), ;, map, ., put, (, name, ,, nameInfo, ), ;]
[=, new, NameInfo, (, name, ), ;, map, ., put, (, name, ,, nameInfo, ), ;, symbolGraph, ., createNode, (]
[name, ), ;, map, ., put, (, name, ,, nameInfo, ), ;, symbolGraph, ., createNode, (, nameInfo, ), ;, return]
[return, nameInfo, ;, }, }, private, class, ProcessProperties, implements, NodeTraversal, ., ScopedCallback, {, private, Stack, <, NameContext, >, symbolStack, =]
[Stack, <, NameContext, >, (, ), ;, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, n, =]
[Stack, <, NameContext, >, (, ), ;, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, n, =]
[Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, n, =, t, ., getCurrentNode, (, ), ;, if, (]
[Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, n, =, t, ., getCurrentNode, (, ), ;, if, (]
[n, =, t, ., getCurrentNode, (, ), ;, if, (, n, ., isFunction, (, ), ), {, String, propName, =]
[t, ., getCurrentNode, (, ), ;, if, (, n, ., isFunction, (, ), ), {, String, propName, =, getPrototypePropertyNameFromRValue, (]
[;, if, (, n, ., isFunction, (, ), ), {, String, propName, =, getPrototypePropertyNameFromRValue, (, n, ), ;, if, (]
[;, if, (, n, ., isFunction, (, ), ), {, String, propName, =, getPrototypePropertyNameFromRValue, (, n, ), ;, if, (]
[(, n, ., isFunction, (, ), ), {, String, propName, =, getPrototypePropertyNameFromRValue, (, n, ), ;, if, (, propName, !=]
[isFunction, (, ), ), {, String, propName, =, getPrototypePropertyNameFromRValue, (, n, ), ;, if, (, propName, !=, null, ), {]
[isFunction, (, ), ), {, String, propName, =, getPrototypePropertyNameFromRValue, (, n, ), ;, if, (, propName, !=, null, ), {]
[{, String, propName, =, getPrototypePropertyNameFromRValue, (, n, ), ;, if, (, propName, !=, null, ), {, symbolStack, ., push, (]
[=, getPrototypePropertyNameFromRValue, (, n, ), ;, if, (, propName, !=, null, ), {, symbolStack, ., push, (, new, NameContext, (]
[(, n, ), ;, if, (, propName, !=, null, ), {, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (]
[), ;, if, (, propName, !=, null, ), {, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, propName, ,]
[(, propName, !=, null, ), {, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, propName, ,, PROPERTY, ), ,]
[(, propName, !=, null, ), {, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, propName, ,, PROPERTY, ), ,]
[(, getNameInfoForName, (, propName, ,, PROPERTY, ), ,, t, ., getScope, (, ), ), ), ;, }, else, if, (]
[(, propName, ,, PROPERTY, ), ,, t, ., getScope, (, ), ), ), ;, }, else, if, (, isGlobalFunctionDeclaration, (]
[,, PROPERTY, ), ,, t, ., getScope, (, ), ), ), ;, }, else, if, (, isGlobalFunctionDeclaration, (, t, ,]
[(, ), ), ), ;, }, else, if, (, isGlobalFunctionDeclaration, (, t, ,, n, ), ), {, Node, parent, =]
[(, ), ), ), ;, }, else, if, (, isGlobalFunctionDeclaration, (, t, ,, n, ), ), {, Node, parent, =]
[isGlobalFunctionDeclaration, (, t, ,, n, ), ), {, Node, parent, =, n, ., getParent, (, ), ;, String, name, =]
[isGlobalFunctionDeclaration, (, t, ,, n, ), ), {, Node, parent, =, n, ., getParent, (, ), ;, String, name, =]
[isGlobalFunctionDeclaration, (, t, ,, n, ), ), {, Node, parent, =, n, ., getParent, (, ), ;, String, name, =]
[), {, Node, parent, =, n, ., getParent, (, ), ;, String, name, =, parent, ., isName, (, ), ?]
[), {, Node, parent, =, n, ., getParent, (, ), ;, String, name, =, parent, ., isName, (, ), ?]
[., getParent, (, ), ;, String, name, =, parent, ., isName, (, ), ?, parent, ., getString, (, ), :]
[., getParent, (, ), ;, String, name, =, parent, ., isName, (, ), ?, parent, ., getString, (, ), :]
[., getParent, (, ), ;, String, name, =, parent, ., isName, (, ), ?, parent, ., getString, (, ), :]
[isName, (, ), ?, parent, ., getString, (, ), :, n, ., getFirstChild, (, ), ., getString, (, ), ;]
[isName, (, ), ?, parent, ., getString, (, ), :, n, ., getFirstChild, (, ), ., getString, (, ), ;]
[parent, ., getString, (, ), :, n, ., getFirstChild, (, ), ., getString, (, ), ;, symbolStack, ., push, (]
[(, ), :, n, ., getFirstChild, (, ), ., getString, (, ), ;, symbolStack, ., push, (, new, NameContext, (]
[:, n, ., getFirstChild, (, ), ., getString, (, ), ;, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (]
[., getFirstChild, (, ), ., getString, (, ), ;, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, name, ,]
[), ., getString, (, ), ;, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, name, ,, VAR, ), ,]
[), ., getString, (, ), ;, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, name, ,, VAR, ), ,]
[NameContext, (, getNameInfoForName, (, name, ,, VAR, ), ,, t, ., getScope, (, ), ), ), ;, }, else, {]
[NameContext, (, getNameInfoForName, (, name, ,, VAR, ), ,, t, ., getScope, (, ), ), ), ;, }, else, {]
[name, ,, VAR, ), ,, t, ., getScope, (, ), ), ), ;, }, else, {, symbolStack, ., push, (]
[), ,, t, ., getScope, (, ), ), ), ;, }, else, {, symbolStack, ., push, (, new, NameContext, (]
[t, ., getScope, (, ), ), ), ;, }, else, {, symbolStack, ., push, (, new, NameContext, (, anonymousNode, ,]
[t, ., getScope, (, ), ), ), ;, }, else, {, symbolStack, ., push, (, new, NameContext, (, anonymousNode, ,]
[., push, (, new, NameContext, (, anonymousNode, ,, t, ., getScope, (, ), ), ), ;, }, }, else, {]
[., push, (, new, NameContext, (, anonymousNode, ,, t, ., getScope, (, ), ), ), ;, }, }, else, {]
[NameContext, (, anonymousNode, ,, t, ., getScope, (, ), ), ), ;, }, }, else, {, Preconditions, ., checkState, (]
[NameContext, (, anonymousNode, ,, t, ., getScope, (, ), ), ), ;, }, }, else, {, Preconditions, ., checkState, (]
[(, ), ), ), ;, }, }, else, {, Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;]
[(, ), ), ), ;, }, }, else, {, Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;]
[;, }, }, else, {, Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;, symbolStack, ., push, (]
[else, {, Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;, symbolStack, ., push, (, new, NameContext, (]
[Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;, symbolStack, ., push, (, new, NameContext, (, globalNode, ,]
[Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;, symbolStack, ., push, (, new, NameContext, (, globalNode, ,]
[t, ., getScope, (, ), ), ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {]
[t, ., getScope, (, ), ), ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {]
[}, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, String, propName, =]
[Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, String, propName, =, processNonFunctionPrototypeAssign, (]
[boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, String, propName, =, processNonFunctionPrototypeAssign, (, n, ,]
[,, Node, n, ,, Node, parent, ), {, String, propName, =, processNonFunctionPrototypeAssign, (, n, ,, parent, ), ;, if, (]
[,, Node, n, ,, Node, parent, ), {, String, propName, =, processNonFunctionPrototypeAssign, (, n, ,, parent, ), ;, if, (]
[n, ,, Node, parent, ), {, String, propName, =, processNonFunctionPrototypeAssign, (, n, ,, parent, ), ;, if, (, propName, !=]
[parent, ), {, String, propName, =, processNonFunctionPrototypeAssign, (, n, ,, parent, ), ;, if, (, propName, !=, null, ), {]
[parent, ), {, String, propName, =, processNonFunctionPrototypeAssign, (, n, ,, parent, ), ;, if, (, propName, !=, null, ), {]
[propName, =, processNonFunctionPrototypeAssign, (, n, ,, parent, ), ;, if, (, propName, !=, null, ), {, symbolStack, ., push, (]
[(, n, ,, parent, ), ;, if, (, propName, !=, null, ), {, symbolStack, ., push, (, new, NameContext, (]
[,, parent, ), ;, if, (, propName, !=, null, ), {, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (]
[), ;, if, (, propName, !=, null, ), {, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, propName, ,]
[(, propName, !=, null, ), {, symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, propName, ,, PROPERTY, ), ,]
[symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, propName, ,, PROPERTY, ), ,, null, ), ), ;, }, return]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {, String, propName, =]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {, String, propName, =]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {, String, propName, =]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {, String, propName, =]
[{, String, propName, =, n, ., getFirstChild, (, ), ., getNext, (, ), ., getString, (, ), ;, if, (]
[{, String, propName, =, n, ., getFirstChild, (, ), ., getNext, (, ), ., getString, (, ), ;, if, (]
[., getNext, (, ), ., getString, (, ), ;, if, (, n, ., isQualifiedName, (, ), ), {, if, (]
[., getNext, (, ), ., getString, (, ), ;, if, (, n, ., isQualifiedName, (, ), ), {, if, (]
[., getString, (, ), ;, if, (, n, ., isQualifiedName, (, ), ), {, if, (, propName, ., equals, (]
[(, n, ., isQualifiedName, (, ), ), {, if, (, propName, ., equals, (, "prototype", ), ), {, if, (]
[., isQualifiedName, (, ), ), {, if, (, propName, ., equals, (, "prototype", ), ), {, if, (, processPrototypeRef, (]
[(, ), ), {, if, (, propName, ., equals, (, "prototype", ), ), {, if, (, processPrototypeRef, (, t, ,]
[), ), {, if, (, processPrototypeRef, (, t, ,, n, ), ), {, return, ;, }, }, else, if, (]
[), ), {, if, (, processPrototypeRef, (, t, ,, n, ), ), {, return, ;, }, }, else, if, (]
[), ), {, if, (, processPrototypeRef, (, t, ,, n, ), ), {, return, ;, }, }, else, if, (]
[,, n, ), ), {, return, ;, }, }, else, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (]
[{, return, ;, }, }, else, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, propName, ), ), {]
[;, }, }, else, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, propName, ), ), {, addGlobalUseOfSymbol, (]
[}, else, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, propName, ), ), {, addGlobalUseOfSymbol, (, propName, ,]
[}, else, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, propName, ), ), {, addGlobalUseOfSymbol, (, propName, ,]
[getCodingConvention, (, ), ., isExported, (, propName, ), ), {, addGlobalUseOfSymbol, (, propName, ,, t, ., getModule, (, ), ,]
[addGlobalUseOfSymbol, (, propName, ,, t, ., getModule, (, ), ,, PROPERTY, ), ;, return, ;, }, else, {, if, (]
[addGlobalUseOfSymbol, (, propName, ,, t, ., getModule, (, ), ,, PROPERTY, ), ;, return, ;, }, else, {, if, (]
[addGlobalUseOfSymbol, (, propName, ,, t, ., getModule, (, ), ,, PROPERTY, ), ;, return, ;, }, else, {, if, (]
[addGlobalUseOfSymbol, (, propName, ,, t, ., getModule, (, ), ,, PROPERTY, ), ;, return, ;, }, else, {, if, (]
[PROPERTY, ), ;, return, ;, }, else, {, if, (, n, ., getParent, (, ), ., isAssign, (, ), &&]
[PROPERTY, ), ;, return, ;, }, else, {, if, (, n, ., getParent, (, ), ., isAssign, (, ), &&]
[PROPERTY, ), ;, return, ;, }, else, {, if, (, n, ., getParent, (, ), ., isAssign, (, ), &&]
[else, {, if, (, n, ., getParent, (, ), ., isAssign, (, ), &&, n, ., getNext, (, ), !=]
[getParent, (, ), ., isAssign, (, ), &&, n, ., getNext, (, ), !=, null, ), {, String, rValueName, =]
[), ., isAssign, (, ), &&, n, ., getNext, (, ), !=, null, ), {, String, rValueName, =, getPrototypePropertyNameFromRValue, (]
[&&, n, ., getNext, (, ), !=, null, ), {, String, rValueName, =, getPrototypePropertyNameFromRValue, (, n, ), ;, if, (]
[&&, n, ., getNext, (, ), !=, null, ), {, String, rValueName, =, getPrototypePropertyNameFromRValue, (, n, ), ;, if, (]
[., getNext, (, ), !=, null, ), {, String, rValueName, =, getPrototypePropertyNameFromRValue, (, n, ), ;, if, (, rValueName, !=]
[rValueName, =, getPrototypePropertyNameFromRValue, (, n, ), ;, if, (, rValueName, !=, null, ), {, return, ;, }, }, }, }]
[getPrototypePropertyNameFromRValue, (, n, ), ;, if, (, rValueName, !=, null, ), {, return, ;, }, }, }, }, addSymbolUse, (]
[n, ), ;, if, (, rValueName, !=, null, ), {, return, ;, }, }, }, }, addSymbolUse, (, propName, ,]
[n, ), ;, if, (, rValueName, !=, null, ), {, return, ;, }, }, }, }, addSymbolUse, (, propName, ,]
[!=, null, ), {, return, ;, }, }, }, }, addSymbolUse, (, propName, ,, t, ., getModule, (, ), ,]
[}, }, }, addSymbolUse, (, propName, ,, t, ., getModule, (, ), ,, PROPERTY, ), ;, }, else, if, (]
[}, }, }, addSymbolUse, (, propName, ,, t, ., getModule, (, ), ,, PROPERTY, ), ;, }, else, if, (]
[(, ), ,, PROPERTY, ), ;, }, else, if, (, n, ., isObjectLit, (, ), ), {, String, lValueName, =]
[(, ), ,, PROPERTY, ), ;, }, else, if, (, n, ., isObjectLit, (, ), ), {, String, lValueName, =]
[), ;, }, else, if, (, n, ., isObjectLit, (, ), ), {, String, lValueName, =, NodeUtil, ., getBestLValueName, (]
[), ;, }, else, if, (, n, ., isObjectLit, (, ), ), {, String, lValueName, =, NodeUtil, ., getBestLValueName, (]
[if, (, n, ., isObjectLit, (, ), ), {, String, lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (]
[), ), {, String, lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, n, ), ), ;, if, (]
[), ), {, String, lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, n, ), ), ;, if, (]
[), ), {, String, lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, n, ), ), ;, if, (]
[{, String, lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, n, ), ), ;, if, (, lValueName, !=]
[lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, n, ), ), ;, if, (, lValueName, !=, null, &&]
[lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, n, ), ), ;, if, (, lValueName, !=, null, &&]
[getBestLValueName, (, NodeUtil, ., getBestLValue, (, n, ), ), ;, if, (, lValueName, !=, null, &&, lValueName, ., endsWith, (]
[lValueName, !=, null, &&, lValueName, ., endsWith, (, ".prototype", ), ), {, return, ;, }, for, (, Node, propNameNode, =]
[lValueName, !=, null, &&, lValueName, ., endsWith, (, ".prototype", ), ), {, return, ;, }, for, (, Node, propNameNode, =]
[endsWith, (, ".prototype", ), ), {, return, ;, }, for, (, Node, propNameNode, =, n, ., getFirstChild, (, ), ;]
[endsWith, (, ".prototype", ), ), {, return, ;, }, for, (, Node, propNameNode, =, n, ., getFirstChild, (, ), ;]
[".prototype", ), ), {, return, ;, }, for, (, Node, propNameNode, =, n, ., getFirstChild, (, ), ;, propNameNode, !=]
[), {, return, ;, }, for, (, Node, propNameNode, =, n, ., getFirstChild, (, ), ;, propNameNode, !=, null, ;]
[return, ;, }, for, (, Node, propNameNode, =, n, ., getFirstChild, (, ), ;, propNameNode, !=, null, ;, propNameNode, =]
[return, ;, }, for, (, Node, propNameNode, =, n, ., getFirstChild, (, ), ;, propNameNode, !=, null, ;, propNameNode, =]
[., getFirstChild, (, ), ;, propNameNode, !=, null, ;, propNameNode, =, propNameNode, ., getNext, (, ), ), {, if, (]
[getFirstChild, (, ), ;, propNameNode, !=, null, ;, propNameNode, =, propNameNode, ., getNext, (, ), ), {, if, (, !]
[getFirstChild, (, ), ;, propNameNode, !=, null, ;, propNameNode, =, propNameNode, ., getNext, (, ), ), {, if, (, !]
[;, propNameNode, =, propNameNode, ., getNext, (, ), ), {, if, (, !, propNameNode, ., isQuotedString, (, ), ), {]
[=, propNameNode, ., getNext, (, ), ), {, if, (, !, propNameNode, ., isQuotedString, (, ), ), {, addSymbolUse, (]
[=, propNameNode, ., getNext, (, ), ), {, if, (, !, propNameNode, ., isQuotedString, (, ), ), {, addSymbolUse, (]
[), {, if, (, !, propNameNode, ., isQuotedString, (, ), ), {, addSymbolUse, (, propNameNode, ., getString, (, ), ,]
[), {, if, (, !, propNameNode, ., isQuotedString, (, ), ), {, addSymbolUse, (, propNameNode, ., getString, (, ), ,]
[., isQuotedString, (, ), ), {, addSymbolUse, (, propNameNode, ., getString, (, ), ,, t, ., getModule, (, ), ,]
[., getString, (, ), ,, t, ., getModule, (, ), ,, PROPERTY, ), ;, }, }, }, else, if, (]
[., getString, (, ), ,, t, ., getModule, (, ), ,, PROPERTY, ), ;, }, }, }, else, if, (]
[,, PROPERTY, ), ;, }, }, }, else, if, (, n, ., isName, (, ), ), {, String, name, =]
[,, PROPERTY, ), ;, }, }, }, else, if, (, n, ., isName, (, ), ), {, String, name, =]
[(, n, ., isName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, Var, var, =]
[(, n, ., isName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, Var, var, =]
[(, n, ., isName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, Var, var, =]
[String, name, =, n, ., getString, (, ), ;, Var, var, =, t, ., getScope, (, ), ., getVar, (]
[getString, (, ), ;, Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[getString, (, ), ;, Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[), ;, Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, !=]
[t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, !=, null, ), {, if, (]
[t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, !=, null, ), {, if, (]
[), ;, if, (, var, !=, null, ), {, if, (, var, ., isGlobal, (, ), ), {, if, (]
[), ;, if, (, var, !=, null, ), {, if, (, var, ., isGlobal, (, ), ), {, if, (]
[), ;, if, (, var, !=, null, ), {, if, (, var, ., isGlobal, (, ), ), {, if, (]
[), ;, if, (, var, !=, null, ), {, if, (, var, ., isGlobal, (, ), ), {, if, (]
[null, ), {, if, (, var, ., isGlobal, (, ), ), {, if, (, var, ., getInitialValue, (, ), !=]
[{, if, (, var, ., isGlobal, (, ), ), {, if, (, var, ., getInitialValue, (, ), !=, null, &&]
[{, if, (, var, ., isGlobal, (, ), ), {, if, (, var, ., getInitialValue, (, ), !=, null, &&]
[{, if, (, var, ., isGlobal, (, ), ), {, if, (, var, ., getInitialValue, (, ), !=, null, &&]
[., getInitialValue, (, ), !=, null, &&, var, ., getInitialValue, (, ), ., isFunction, (, ), ), {, if, (]
[., getInitialValue, (, ), !=, null, &&, var, ., getInitialValue, (, ), ., isFunction, (, ), ), {, if, (]
[getInitialValue, (, ), ., isFunction, (, ), ), {, if, (, t, ., inGlobalScope, (, ), ), {, if, (]
[(, ), ., isFunction, (, ), ), {, if, (, t, ., inGlobalScope, (, ), ), {, if, (, !]
[., isFunction, (, ), ), {, if, (, t, ., inGlobalScope, (, ), ), {, if, (, !, processGlobalFunctionDeclaration, (]
[(, ), ), {, if, (, t, ., inGlobalScope, (, ), ), {, if, (, !, processGlobalFunctionDeclaration, (, t, ,]
[), {, if, (, t, ., inGlobalScope, (, ), ), {, if, (, !, processGlobalFunctionDeclaration, (, t, ,, n, ,]
[t, ., inGlobalScope, (, ), ), {, if, (, !, processGlobalFunctionDeclaration, (, t, ,, n, ,, var, ), ), {]
[inGlobalScope, (, ), ), {, if, (, !, processGlobalFunctionDeclaration, (, t, ,, n, ,, var, ), ), {, addGlobalUseOfSymbol, (]
[), ), {, if, (, !, processGlobalFunctionDeclaration, (, t, ,, n, ,, var, ), ), {, addGlobalUseOfSymbol, (, name, ,]
[), ), {, if, (, !, processGlobalFunctionDeclaration, (, t, ,, n, ,, var, ), ), {, addGlobalUseOfSymbol, (, name, ,]
[processGlobalFunctionDeclaration, (, t, ,, n, ,, var, ), ), {, addGlobalUseOfSymbol, (, name, ,, t, ., getModule, (, ), ,]
[), ), {, addGlobalUseOfSymbol, (, name, ,, t, ., getModule, (, ), ,, VAR, ), ;, }, }, else, {]
[{, addGlobalUseOfSymbol, (, name, ,, t, ., getModule, (, ), ,, VAR, ), ;, }, }, else, {, addSymbolUse, (]
[(, name, ,, t, ., getModule, (, ), ,, VAR, ), ;, }, }, else, {, addSymbolUse, (, name, ,]
[(, name, ,, t, ., getModule, (, ), ,, VAR, ), ;, }, }, else, {, addSymbolUse, (, name, ,]
[(, ), ,, VAR, ), ;, }, }, else, {, addSymbolUse, (, name, ,, t, ., getModule, (, ), ,]
[{, addSymbolUse, (, name, ,, t, ., getModule, (, ), ,, VAR, ), ;, }, }, }, else, if, (]
[{, addSymbolUse, (, name, ,, t, ., getModule, (, ), ,, VAR, ), ;, }, }, }, else, if, (]
[{, addSymbolUse, (, name, ,, t, ., getModule, (, ), ,, VAR, ), ;, }, }, }, else, if, (]
[., getModule, (, ), ,, VAR, ), ;, }, }, }, else, if, (, var, ., getScope, (, ), !=]
[., getModule, (, ), ,, VAR, ), ;, }, }, }, else, if, (, var, ., getScope, (, ), !=]
[if, (, var, ., getScope, (, ), !=, t, ., getScope, (, ), ), {, for, (, int, i, =]
[if, (, var, ., getScope, (, ), !=, t, ., getScope, (, ), ), {, for, (, int, i, =]
[if, (, var, ., getScope, (, ), !=, t, ., getScope, (, ), ), {, for, (, int, i, =]
[), !=, t, ., getScope, (, ), ), {, for, (, int, i, =, symbolStack, ., size, (, ), -]
[t, ., getScope, (, ), ), {, for, (, int, i, =, symbolStack, ., size, (, ), -, 1, ;]
[t, ., getScope, (, ), ), {, for, (, int, i, =, symbolStack, ., size, (, ), -, 1, ;]
[getScope, (, ), ), {, for, (, int, i, =, symbolStack, ., size, (, ), -, 1, ;, i, >=]
[), ), {, for, (, int, i, =, symbolStack, ., size, (, ), -, 1, ;, i, >=, 0, ;]
[), ), {, for, (, int, i, =, symbolStack, ., size, (, ), -, 1, ;, i, >=, 0, ;]
[=, symbolStack, ., size, (, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, NameContext, context, =]
[=, symbolStack, ., size, (, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, NameContext, context, =]
[(, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, NameContext, context, =, symbolStack, ., get, (]
[i, >=, 0, ;, i, --, ), {, NameContext, context, =, symbolStack, ., get, (, i, ), ;, if, (]
[i, >=, 0, ;, i, --, ), {, NameContext, context, =, symbolStack, ., get, (, i, ), ;, if, (]
[i, >=, 0, ;, i, --, ), {, NameContext, context, =, symbolStack, ., get, (, i, ), ;, if, (]
[i, --, ), {, NameContext, context, =, symbolStack, ., get, (, i, ), ;, if, (, context, ., scope, ==]
[i, --, ), {, NameContext, context, =, symbolStack, ., get, (, i, ), ;, if, (, context, ., scope, ==]
[(, i, ), ;, if, (, context, ., scope, ==, var, ., getScope, (, ), ), {, break, ;, }]
[(, i, ), ;, if, (, context, ., scope, ==, var, ., getScope, (, ), ), {, break, ;, }]
[(, i, ), ;, if, (, context, ., scope, ==, var, ., getScope, (, ), ), {, break, ;, }]
[context, ., scope, ==, var, ., getScope, (, ), ), {, break, ;, }, context, ., name, ., readClosureVariables, =]
[), ), {, break, ;, }, context, ., name, ., readClosureVariables, =, true, ;, }, }, }, }, if, (]
[), ), {, break, ;, }, context, ., name, ., readClosureVariables, =, true, ;, }, }, }, }, if, (]
[{, break, ;, }, context, ., name, ., readClosureVariables, =, true, ;, }, }, }, }, if, (, processNonFunctionPrototypeAssign, (]
[;, }, context, ., name, ., readClosureVariables, =, true, ;, }, }, }, }, if, (, processNonFunctionPrototypeAssign, (, n, ,]
[., name, ., readClosureVariables, =, true, ;, }, }, }, }, if, (, processNonFunctionPrototypeAssign, (, n, ,, parent, ), !=]
[readClosureVariables, =, true, ;, }, }, }, }, if, (, processNonFunctionPrototypeAssign, (, n, ,, parent, ), !=, null, ), {]
[readClosureVariables, =, true, ;, }, }, }, }, if, (, processNonFunctionPrototypeAssign, (, n, ,, parent, ), !=, null, ), {]
[;, }, }, private, void, addSymbolUse, (, String, name, ,, JSModule, module, ,, SymbolType, type, ), {, NameInfo, info, =]
[}, private, void, addSymbolUse, (, String, name, ,, JSModule, module, ,, SymbolType, type, ), {, NameInfo, info, =, getNameInfoForName, (]
[void, addSymbolUse, (, String, name, ,, JSModule, module, ,, SymbolType, type, ), {, NameInfo, info, =, getNameInfoForName, (, name, ,]
[JSModule, module, ,, SymbolType, type, ), {, NameInfo, info, =, getNameInfoForName, (, name, ,, type, ), ;, NameInfo, def, =]
[NameInfo, info, =, getNameInfoForName, (, name, ,, type, ), ;, NameInfo, def, =, null, ;, for, (, int, i, =]
[NameInfo, info, =, getNameInfoForName, (, name, ,, type, ), ;, NameInfo, def, =, null, ;, for, (, int, i, =]
[NameInfo, info, =, getNameInfoForName, (, name, ,, type, ), ;, NameInfo, def, =, null, ;, for, (, int, i, =]
[,, type, ), ;, NameInfo, def, =, null, ;, for, (, int, i, =, symbolStack, ., size, (, ), -]
[), ;, NameInfo, def, =, null, ;, for, (, int, i, =, symbolStack, ., size, (, ), -, 1, ;]
[), ;, NameInfo, def, =, null, ;, for, (, int, i, =, symbolStack, ., size, (, ), -, 1, ;]
[NameInfo, def, =, null, ;, for, (, int, i, =, symbolStack, ., size, (, ), -, 1, ;, i, >=]
[=, null, ;, for, (, int, i, =, symbolStack, ., size, (, ), -, 1, ;, i, >=, 0, ;]
[=, null, ;, for, (, int, i, =, symbolStack, ., size, (, ), -, 1, ;, i, >=, 0, ;]
[(, int, i, =, symbolStack, ., size, (, ), -, 1, ;, i, >=, 0, ;, i, --, ), {]
[i, =, symbolStack, ., size, (, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, def, =]
[i, =, symbolStack, ., size, (, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, def, =]
[i, =, symbolStack, ., size, (, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, def, =]
[size, (, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, def, =, symbolStack, ., get, (]
[>=, 0, ;, i, --, ), {, def, =, symbolStack, ., get, (, i, ), ., name, ;, if, (]
[>=, 0, ;, i, --, ), {, def, =, symbolStack, ., get, (, i, ), ., name, ;, if, (]
[;, i, --, ), {, def, =, symbolStack, ., get, (, i, ), ., name, ;, if, (, def, !=]
[get, (, i, ), ., name, ;, if, (, def, !=, anonymousNode, ), {, break, ;, }, }, if, (]
[(, i, ), ., name, ;, if, (, def, !=, anonymousNode, ), {, break, ;, }, }, if, (, !]
[(, i, ), ., name, ;, if, (, def, !=, anonymousNode, ), {, break, ;, }, }, if, (, !]
[name, ;, if, (, def, !=, anonymousNode, ), {, break, ;, }, }, if, (, !, def, ., equals, (]
[def, !=, anonymousNode, ), {, break, ;, }, }, if, (, !, def, ., equals, (, info, ), ), {]
[def, !=, anonymousNode, ), {, break, ;, }, }, if, (, !, def, ., equals, (, info, ), ), {]
[{, break, ;, }, }, if, (, !, def, ., equals, (, info, ), ), {, symbolGraph, ., connect, (]
[;, }, }, if, (, !, def, ., equals, (, info, ), ), {, symbolGraph, ., connect, (, def, ,]
[}, if, (, !, def, ., equals, (, info, ), ), {, symbolGraph, ., connect, (, def, ,, module, ,]
[module, ,, info, ), ;, }, }, private, String, processNonFunctionPrototypeAssign, (, Node, n, ,, Node, parent, ), {, if, (]
[module, ,, info, ), ;, }, }, private, String, processNonFunctionPrototypeAssign, (, Node, n, ,, Node, parent, ), {, if, (]
[info, ), ;, }, }, private, String, processNonFunctionPrototypeAssign, (, Node, n, ,, Node, parent, ), {, if, (, isAssignRValue, (]
[;, }, }, private, String, processNonFunctionPrototypeAssign, (, Node, n, ,, Node, parent, ), {, if, (, isAssignRValue, (, n, ,]
[private, String, processNonFunctionPrototypeAssign, (, Node, n, ,, Node, parent, ), {, if, (, isAssignRValue, (, n, ,, parent, ), &&]
[String, processNonFunctionPrototypeAssign, (, Node, n, ,, Node, parent, ), {, if, (, isAssignRValue, (, n, ,, parent, ), &&, !]
[String, processNonFunctionPrototypeAssign, (, Node, n, ,, Node, parent, ), {, if, (, isAssignRValue, (, n, ,, parent, ), &&, !]
[), {, if, (, isAssignRValue, (, n, ,, parent, ), &&, !, n, ., isFunction, (, ), ), {, return]
[if, (, isAssignRValue, (, n, ,, parent, ), &&, !, n, ., isFunction, (, ), ), {, return, getPrototypePropertyNameFromRValue, (]
[,, parent, ), &&, !, n, ., isFunction, (, ), ), {, return, getPrototypePropertyNameFromRValue, (, n, ), ;, }, return]
[;, }, return, null, ;, }, private, boolean, isGlobalFunctionDeclaration, (, NodeTraversal, t, ,, Node, n, ), {, Scope, s, =]
[;, }, return, null, ;, }, private, boolean, isGlobalFunctionDeclaration, (, NodeTraversal, t, ,, Node, n, ), {, Scope, s, =]
[isGlobalFunctionDeclaration, (, NodeTraversal, t, ,, Node, n, ), {, Scope, s, =, t, ., getScope, (, ), ;, if, (]
[(, NodeTraversal, t, ,, Node, n, ), {, Scope, s, =, t, ., getScope, (, ), ;, if, (, !]
[NodeTraversal, t, ,, Node, n, ), {, Scope, s, =, t, ., getScope, (, ), ;, if, (, !, (]
[NodeTraversal, t, ,, Node, n, ), {, Scope, s, =, t, ., getScope, (, ), ;, if, (, !, (]
[NodeTraversal, t, ,, Node, n, ), {, Scope, s, =, t, ., getScope, (, ), ;, if, (, !, (]
[{, Scope, s, =, t, ., getScope, (, ), ;, if, (, !, (, s, ., isGlobal, (, ), ||]
[{, Scope, s, =, t, ., getScope, (, ), ;, if, (, !, (, s, ., isGlobal, (, ), ||]
[{, Scope, s, =, t, ., getScope, (, ), ;, if, (, !, (, s, ., isGlobal, (, ), ||]
[{, Scope, s, =, t, ., getScope, (, ), ;, if, (, !, (, s, ., isGlobal, (, ), ||]
[getScope, (, ), ;, if, (, !, (, s, ., isGlobal, (, ), ||, s, ., getDepth, (, ), ==]
[), ;, if, (, !, (, s, ., isGlobal, (, ), ||, s, ., getDepth, (, ), ==, 1, &&]
[), ;, if, (, !, (, s, ., isGlobal, (, ), ||, s, ., getDepth, (, ), ==, 1, &&]
[), ;, if, (, !, (, s, ., isGlobal, (, ), ||, s, ., getDepth, (, ), ==, 1, &&]
[s, ., isGlobal, (, ), ||, s, ., getDepth, (, ), ==, 1, &&, s, ., getRootNode, (, ), ==]
[||, s, ., getDepth, (, ), ==, 1, &&, s, ., getRootNode, (, ), ==, n, ), ), {, return]
[(, ), ==, 1, &&, s, ., getRootNode, (, ), ==, n, ), ), {, return, false, ;, }, return]
[(, ), ==, 1, &&, s, ., getRootNode, (, ), ==, n, ), ), {, return, false, ;, }, return]
[(, ), ==, 1, &&, s, ., getRootNode, (, ), ==, n, ), ), {, return, false, ;, }, return]
[&&, s, ., getRootNode, (, ), ==, n, ), ), {, return, false, ;, }, return, NodeUtil, ., isFunctionDeclaration, (]
[getRootNode, (, ), ==, n, ), ), {, return, false, ;, }, return, NodeUtil, ., isFunctionDeclaration, (, n, ), ||]
[getRootNode, (, ), ==, n, ), ), {, return, false, ;, }, return, NodeUtil, ., isFunctionDeclaration, (, n, ), ||]
[getRootNode, (, ), ==, n, ), ), {, return, false, ;, }, return, NodeUtil, ., isFunctionDeclaration, (, n, ), ||]
[), {, return, false, ;, }, return, NodeUtil, ., isFunctionDeclaration, (, n, ), ||, n, ., isFunction, (, ), &&]
[), {, return, false, ;, }, return, NodeUtil, ., isFunctionDeclaration, (, n, ), ||, n, ., isFunction, (, ), &&]
[), {, return, false, ;, }, return, NodeUtil, ., isFunctionDeclaration, (, n, ), ||, n, ., isFunction, (, ), &&]
[(, ), ., isName, (, ), ;, }, private, boolean, isAssignRValue, (, Node, n, ,, Node, parent, ), {, return]
[(, ), ., isName, (, ), ;, }, private, boolean, isAssignRValue, (, Node, n, ,, Node, parent, ), {, return]
[(, ), ., isName, (, ), ;, }, private, boolean, isAssignRValue, (, Node, n, ,, Node, parent, ), {, return]
[(, ), ., isName, (, ), ;, }, private, boolean, isAssignRValue, (, Node, n, ,, Node, parent, ), {, return]
[., isName, (, ), ;, }, private, boolean, isAssignRValue, (, Node, n, ,, Node, parent, ), {, return, parent, !=]
[(, ), ;, }, private, boolean, isAssignRValue, (, Node, n, ,, Node, parent, ), {, return, parent, !=, null, &&]
[(, ), ;, }, private, boolean, isAssignRValue, (, Node, n, ,, Node, parent, ), {, return, parent, !=, null, &&]
[isAssignRValue, (, Node, n, ,, Node, parent, ), {, return, parent, !=, null, &&, parent, ., isAssign, (, ), &&]
[isAssignRValue, (, Node, n, ,, Node, parent, ), {, return, parent, !=, null, &&, parent, ., isAssign, (, ), &&]
[isAssignRValue, (, Node, n, ,, Node, parent, ), {, return, parent, !=, null, &&, parent, ., isAssign, (, ), &&]
[parent, ), {, return, parent, !=, null, &&, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), !=]
[parent, ., getFirstChild, (, ), !=, n, ;, }, private, String, getPrototypePropertyNameFromRValue, (, Node, rValue, ), {, Node, lValue, =]
[parent, ., getFirstChild, (, ), !=, n, ;, }, private, String, getPrototypePropertyNameFromRValue, (, Node, rValue, ), {, Node, lValue, =]
[), !=, n, ;, }, private, String, getPrototypePropertyNameFromRValue, (, Node, rValue, ), {, Node, lValue, =, NodeUtil, ., getBestLValue, (]
[private, String, getPrototypePropertyNameFromRValue, (, Node, rValue, ), {, Node, lValue, =, NodeUtil, ., getBestLValue, (, rValue, ), ;, if, (]
[private, String, getPrototypePropertyNameFromRValue, (, Node, rValue, ), {, Node, lValue, =, NodeUtil, ., getBestLValue, (, rValue, ), ;, if, (]
[private, String, getPrototypePropertyNameFromRValue, (, Node, rValue, ), {, Node, lValue, =, NodeUtil, ., getBestLValue, (, rValue, ), ;, if, (]
[private, String, getPrototypePropertyNameFromRValue, (, Node, rValue, ), {, Node, lValue, =, NodeUtil, ., getBestLValue, (, rValue, ), ;, if, (]
[private, String, getPrototypePropertyNameFromRValue, (, Node, rValue, ), {, Node, lValue, =, NodeUtil, ., getBestLValue, (, rValue, ), ;, if, (]
[getPrototypePropertyNameFromRValue, (, Node, rValue, ), {, Node, lValue, =, NodeUtil, ., getBestLValue, (, rValue, ), ;, if, (, lValue, ==]
[Node, rValue, ), {, Node, lValue, =, NodeUtil, ., getBestLValue, (, rValue, ), ;, if, (, lValue, ==, null, ||]
[Node, rValue, ), {, Node, lValue, =, NodeUtil, ., getBestLValue, (, rValue, ), ;, if, (, lValue, ==, null, ||]
[Node, rValue, ), {, Node, lValue, =, NodeUtil, ., getBestLValue, (, rValue, ), ;, if, (, lValue, ==, null, ||]
[=, NodeUtil, ., getBestLValue, (, rValue, ), ;, if, (, lValue, ==, null, ||, lValue, ., getParent, (, ), ==]
[., getBestLValue, (, rValue, ), ;, if, (, lValue, ==, null, ||, lValue, ., getParent, (, ), ==, null, ||]
[., getBestLValue, (, rValue, ), ;, if, (, lValue, ==, null, ||, lValue, ., getParent, (, ), ==, null, ||]
[., getBestLValue, (, rValue, ), ;, if, (, lValue, ==, null, ||, lValue, ., getParent, (, ), ==, null, ||]
[., getBestLValue, (, rValue, ), ;, if, (, lValue, ==, null, ||, lValue, ., getParent, (, ), ==, null, ||]
[null, ||, lValue, ., getParent, (, ), ==, null, ||, lValue, ., getParent, (, ), ., getParent, (, ), ==]
[lValue, ., getParent, (, ), ==, null, ||, lValue, ., getParent, (, ), ., getParent, (, ), ==, null, ||]
[., getParent, (, ), ==, null, ||, lValue, ., getParent, (, ), ., getParent, (, ), ==, null, ||, !]
[getParent, (, ), ==, null, ||, lValue, ., getParent, (, ), ., getParent, (, ), ==, null, ||, !, (]
[getParent, (, ), ==, null, ||, lValue, ., getParent, (, ), ., getParent, (, ), ==, null, ||, !, (]
[getParent, (, ), ==, null, ||, lValue, ., getParent, (, ), ., getParent, (, ), ==, null, ||, !, (]
[null, ||, lValue, ., getParent, (, ), ., getParent, (, ), ==, null, ||, !, (, NodeUtil, ., isObjectLitKey, (]
[lValue, ., getParent, (, ), ., getParent, (, ), ==, null, ||, !, (, NodeUtil, ., isObjectLitKey, (, lValue, ,]
[lValue, ., getParent, (, ), ., getParent, (, ), ==, null, ||, !, (, NodeUtil, ., isObjectLitKey, (, lValue, ,]
[(, ), ==, null, ||, !, (, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ||]
[(, ), ==, null, ||, !, (, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ||]
[||, !, (, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ||, NodeUtil, ., isExprAssign, (]
[||, !, (, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ||, NodeUtil, ., isExprAssign, (]
[||, !, (, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ||, NodeUtil, ., isExprAssign, (]
[), ||, NodeUtil, ., isExprAssign, (, lValue, ., getParent, (, ), ., getParent, (, ), ), ), ), {, return]
[lValue, ., getParent, (, ), ., getParent, (, ), ), ), ), {, return, null, ;, }, String, lValueName, =]
[lValue, ., getParent, (, ), ., getParent, (, ), ), ), ), {, return, null, ;, }, String, lValueName, =]
[), ., getParent, (, ), ), ), ), {, return, null, ;, }, String, lValueName, =, NodeUtil, ., getBestLValueName, (]
[), ., getParent, (, ), ), ), ), {, return, null, ;, }, String, lValueName, =, NodeUtil, ., getBestLValueName, (]
[), ), ), ), {, return, null, ;, }, String, lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (]
[null, ;, }, String, lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rValue, ), ), ;, if, (]
[null, ;, }, String, lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rValue, ), ), ;, if, (]
[}, String, lValueName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rValue, ), ), ;, if, (, lValueName, ==]
[NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rValue, ), ), ;, if, (, lValueName, ==, null, ), {, return]
[getBestLValue, (, rValue, ), ), ;, if, (, lValueName, ==, null, ), {, return, null, ;, }, int, lastDot, =]
[getBestLValue, (, rValue, ), ), ;, if, (, lValueName, ==, null, ), {, return, null, ;, }, int, lastDot, =]
[), ;, if, (, lValueName, ==, null, ), {, return, null, ;, }, int, lastDot, =, lValueName, ., lastIndexOf, (]
[==, null, ), {, return, null, ;, }, int, lastDot, =, lValueName, ., lastIndexOf, (, '.', ), ;, if, (]
[==, null, ), {, return, null, ;, }, int, lastDot, =, lValueName, ., lastIndexOf, (, '.', ), ;, if, (]
[), {, return, null, ;, }, int, lastDot, =, lValueName, ., lastIndexOf, (, '.', ), ;, if, (, lastDot, ==]
[{, return, null, ;, }, int, lastDot, =, lValueName, ., lastIndexOf, (, '.', ), ;, if, (, lastDot, ==, -]
[}, int, lastDot, =, lValueName, ., lastIndexOf, (, '.', ), ;, if, (, lastDot, ==, -, 1, ), {, return]
[lastIndexOf, (, '.', ), ;, if, (, lastDot, ==, -, 1, ), {, return, null, ;, }, String, firstPart, =]
[lastIndexOf, (, '.', ), ;, if, (, lastDot, ==, -, 1, ), {, return, null, ;, }, String, firstPart, =]
[;, if, (, lastDot, ==, -, 1, ), {, return, null, ;, }, String, firstPart, =, lValueName, ., substring, (]
[(, lastDot, ==, -, 1, ), {, return, null, ;, }, String, firstPart, =, lValueName, ., substring, (, 0, ,]
[), {, return, null, ;, }, String, firstPart, =, lValueName, ., substring, (, 0, ,, lastDot, ), ;, if, (]
[{, return, null, ;, }, String, firstPart, =, lValueName, ., substring, (, 0, ,, lastDot, ), ;, if, (, !]
[{, return, null, ;, }, String, firstPart, =, lValueName, ., substring, (, 0, ,, lastDot, ), ;, if, (, !]
[}, String, firstPart, =, lValueName, ., substring, (, 0, ,, lastDot, ), ;, if, (, !, firstPart, ., endsWith, (]
[., substring, (, 0, ,, lastDot, ), ;, if, (, !, firstPart, ., endsWith, (, ".prototype", ), ), {, return]
[,, lastDot, ), ;, if, (, !, firstPart, ., endsWith, (, ".prototype", ), ), {, return, null, ;, }, return]
[,, lastDot, ), ;, if, (, !, firstPart, ., endsWith, (, ".prototype", ), ), {, return, null, ;, }, return]
[if, (, !, firstPart, ., endsWith, (, ".prototype", ), ), {, return, null, ;, }, return, lValueName, ., substring, (]
[if, (, !, firstPart, ., endsWith, (, ".prototype", ), ), {, return, null, ;, }, return, lValueName, ., substring, (]
[!, firstPart, ., endsWith, (, ".prototype", ), ), {, return, null, ;, }, return, lValueName, ., substring, (, lastDot, +]
[), ;, }, private, boolean, processGlobalFunctionDeclaration, (, NodeTraversal, t, ,, Node, nameNode, ,, Var, v, ), {, Node, firstChild, =]
[), ;, }, private, boolean, processGlobalFunctionDeclaration, (, NodeTraversal, t, ,, Node, nameNode, ,, Var, v, ), {, Node, firstChild, =]
[,, Node, nameNode, ,, Var, v, ), {, Node, firstChild, =, nameNode, ., getFirstChild, (, ), ;, Node, parent, =]
[,, Node, nameNode, ,, Var, v, ), {, Node, firstChild, =, nameNode, ., getFirstChild, (, ), ;, Node, parent, =]
[Node, firstChild, =, nameNode, ., getFirstChild, (, ), ;, Node, parent, =, nameNode, ., getParent, (, ), ;, if, (]
[Node, firstChild, =, nameNode, ., getFirstChild, (, ), ;, Node, parent, =, nameNode, ., getParent, (, ), ;, if, (]
[=, nameNode, ., getFirstChild, (, ), ;, Node, parent, =, nameNode, ., getParent, (, ), ;, if, (, isGlobalFunctionDeclaration, (]
[., getFirstChild, (, ), ;, Node, parent, =, nameNode, ., getParent, (, ), ;, if, (, isGlobalFunctionDeclaration, (, t, ,]
[), ;, Node, parent, =, nameNode, ., getParent, (, ), ;, if, (, isGlobalFunctionDeclaration, (, t, ,, parent, ), ||]
[), ;, Node, parent, =, nameNode, ., getParent, (, ), ;, if, (, isGlobalFunctionDeclaration, (, t, ,, parent, ), ||]
[), ;, Node, parent, =, nameNode, ., getParent, (, ), ;, if, (, isGlobalFunctionDeclaration, (, t, ,, parent, ), ||]
[Node, parent, =, nameNode, ., getParent, (, ), ;, if, (, isGlobalFunctionDeclaration, (, t, ,, parent, ), ||, firstChild, !=]
[=, nameNode, ., getParent, (, ), ;, if, (, isGlobalFunctionDeclaration, (, t, ,, parent, ), ||, firstChild, !=, null, &&]
[., getParent, (, ), ;, if, (, isGlobalFunctionDeclaration, (, t, ,, parent, ), ||, firstChild, !=, null, &&, isGlobalFunctionDeclaration, (]
[(, ), ;, if, (, isGlobalFunctionDeclaration, (, t, ,, parent, ), ||, firstChild, !=, null, &&, isGlobalFunctionDeclaration, (, t, ,]
[t, ,, parent, ), ||, firstChild, !=, null, &&, isGlobalFunctionDeclaration, (, t, ,, firstChild, ), ), {, String, name, =]
[t, ,, parent, ), ||, firstChild, !=, null, &&, isGlobalFunctionDeclaration, (, t, ,, firstChild, ), ), {, String, name, =]
[!=, null, &&, isGlobalFunctionDeclaration, (, t, ,, firstChild, ), ), {, String, name, =, nameNode, ., getString, (, ), ;]
[!=, null, &&, isGlobalFunctionDeclaration, (, t, ,, firstChild, ), ), {, String, name, =, nameNode, ., getString, (, ), ;]
[!=, null, &&, isGlobalFunctionDeclaration, (, t, ,, firstChild, ), ), {, String, name, =, nameNode, ., getString, (, ), ;]
[&&, isGlobalFunctionDeclaration, (, t, ,, firstChild, ), ), {, String, name, =, nameNode, ., getString, (, ), ;, getNameInfoForName, (]
[(, t, ,, firstChild, ), ), {, String, name, =, nameNode, ., getString, (, ), ;, getNameInfoForName, (, name, ,]
[=, nameNode, ., getString, (, ), ;, getNameInfoForName, (, name, ,, VAR, ), ., getDeclarations, (, ), ., add, (]
[getString, (, ), ;, getNameInfoForName, (, name, ,, VAR, ), ., getDeclarations, (, ), ., add, (, new, GlobalFunction, (]
[), ;, getNameInfoForName, (, name, ,, VAR, ), ., getDeclarations, (, ), ., add, (, new, GlobalFunction, (, nameNode, ,]
[getNameInfoForName, (, name, ,, VAR, ), ., getDeclarations, (, ), ., add, (, new, GlobalFunction, (, nameNode, ,, v, ,]
[getNameInfoForName, (, name, ,, VAR, ), ., getDeclarations, (, ), ., add, (, new, GlobalFunction, (, nameNode, ,, v, ,]
[., add, (, new, GlobalFunction, (, nameNode, ,, v, ,, t, ., getModule, (, ), ), ), ;, if, (]
[., add, (, new, GlobalFunction, (, nameNode, ,, v, ,, t, ., getModule, (, ), ), ), ;, if, (]
[., add, (, new, GlobalFunction, (, nameNode, ,, v, ,, t, ., getModule, (, ), ), ), ;, if, (]
[., add, (, new, GlobalFunction, (, nameNode, ,, v, ,, t, ., getModule, (, ), ), ), ;, if, (]
[v, ,, t, ., getModule, (, ), ), ), ;, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (]
[., getModule, (, ), ), ), ;, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ||]
[), ), ), ;, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ||, anchorUnusedVars, ), {]
[), ;, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ||, anchorUnusedVars, ), {, addGlobalUseOfSymbol, (]
[if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ||, anchorUnusedVars, ), {, addGlobalUseOfSymbol, (, name, ,]
[if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ||, anchorUnusedVars, ), {, addGlobalUseOfSymbol, (, name, ,]
[), ., isExported, (, name, ), ||, anchorUnusedVars, ), {, addGlobalUseOfSymbol, (, name, ,, t, ., getModule, (, ), ,]
[), ||, anchorUnusedVars, ), {, addGlobalUseOfSymbol, (, name, ,, t, ., getModule, (, ), ,, VAR, ), ;, }, return]
[{, addGlobalUseOfSymbol, (, name, ,, t, ., getModule, (, ), ,, VAR, ), ;, }, return, true, ;, }, return]
[;, }, return, false, ;, }, private, boolean, processPrototypeRef, (, NodeTraversal, t, ,, Node, ref, ), {, Node, root, =]
[;, }, return, false, ;, }, private, boolean, processPrototypeRef, (, NodeTraversal, t, ,, Node, ref, ), {, Node, root, =]
[;, }, private, boolean, processPrototypeRef, (, NodeTraversal, t, ,, Node, ref, ), {, Node, root, =, NodeUtil, ., getRootOfQualifiedName, (]
[NodeTraversal, t, ,, Node, ref, ), {, Node, root, =, NodeUtil, ., getRootOfQualifiedName, (, ref, ), ;, Node, n, =]
[NodeTraversal, t, ,, Node, ref, ), {, Node, root, =, NodeUtil, ., getRootOfQualifiedName, (, ref, ), ;, Node, n, =]
[root, =, NodeUtil, ., getRootOfQualifiedName, (, ref, ), ;, Node, n, =, ref, ., getParent, (, ), ;, switch, (]
[root, =, NodeUtil, ., getRootOfQualifiedName, (, ref, ), ;, Node, n, =, ref, ., getParent, (, ), ;, switch, (]
[;, Node, n, =, ref, ., getParent, (, ), ;, switch, (, n, ., getType, (, ), ), {, case]
[;, Node, n, =, ref, ., getParent, (, ), ;, switch, (, n, ., getType, (, ), ), {, case]
[(, ), ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, dest, =]
[(, ), ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, dest, =]
[(, ), ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, dest, =]
[Token, ., GETPROP, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, Node, parent, =]
[Token, ., GETPROP, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, Node, parent, =]
[getFirstChild, (, ), ., getNext, (, ), ;, Node, parent, =, n, ., getParent, (, ), ;, Node, grandParent, =]
[getFirstChild, (, ), ., getNext, (, ), ;, Node, parent, =, n, ., getParent, (, ), ;, Node, grandParent, =]
[Node, parent, =, n, ., getParent, (, ), ;, Node, grandParent, =, parent, ., getParent, (, ), ;, if, (]
[Node, parent, =, n, ., getParent, (, ), ;, Node, grandParent, =, parent, ., getParent, (, ), ;, if, (]
[Node, parent, =, n, ., getParent, (, ), ;, Node, grandParent, =, parent, ., getParent, (, ), ;, if, (]
[Node, parent, =, n, ., getParent, (, ), ;, Node, grandParent, =, parent, ., getParent, (, ), ;, if, (]
[(, ), ;, Node, grandParent, =, parent, ., getParent, (, ), ;, if, (, dest, ., isString, (, ), &&]
[(, ), ;, Node, grandParent, =, parent, ., getParent, (, ), ;, if, (, dest, ., isString, (, ), &&]
[grandParent, =, parent, ., getParent, (, ), ;, if, (, dest, ., isString, (, ), &&, NodeUtil, ., isExprAssign, (]
[., getParent, (, ), ;, if, (, dest, ., isString, (, ), &&, NodeUtil, ., isExprAssign, (, grandParent, ), &&]
[., getParent, (, ), ;, if, (, dest, ., isString, (, ), &&, NodeUtil, ., isExprAssign, (, grandParent, ), &&]
[;, if, (, dest, ., isString, (, ), &&, NodeUtil, ., isExprAssign, (, grandParent, ), &&, NodeUtil, ., isVarOrSimpleAssignLhs, (]
[(, dest, ., isString, (, ), &&, NodeUtil, ., isExprAssign, (, grandParent, ), &&, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,]
[NodeUtil, ., isExprAssign, (, grandParent, ), &&, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, String, name, =]
[NodeUtil, ., isExprAssign, (, grandParent, ), &&, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, String, name, =]
[isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, String, name, =, dest, ., getString, (, ), ;, Property, prop, =]
[,, parent, ), ), {, String, name, =, dest, ., getString, (, ), ;, Property, prop, =, new, AssignmentProperty, (]
[), ), {, String, name, =, dest, ., getString, (, ), ;, Property, prop, =, new, AssignmentProperty, (, grandParent, ,]
[{, String, name, =, dest, ., getString, (, ), ;, Property, prop, =, new, AssignmentProperty, (, grandParent, ,, maybeGetVar, (]
[name, =, dest, ., getString, (, ), ;, Property, prop, =, new, AssignmentProperty, (, grandParent, ,, maybeGetVar, (, t, ,]
[., getString, (, ), ;, Property, prop, =, new, AssignmentProperty, (, grandParent, ,, maybeGetVar, (, t, ,, root, ), ,]
[., getString, (, ), ;, Property, prop, =, new, AssignmentProperty, (, grandParent, ,, maybeGetVar, (, t, ,, root, ), ,]
[=, new, AssignmentProperty, (, grandParent, ,, maybeGetVar, (, t, ,, root, ), ,, t, ., getModule, (, ), ), ;]
[=, new, AssignmentProperty, (, grandParent, ,, maybeGetVar, (, t, ,, root, ), ,, t, ., getModule, (, ), ), ;]
[=, new, AssignmentProperty, (, grandParent, ,, maybeGetVar, (, t, ,, root, ), ,, t, ., getModule, (, ), ), ;]
[AssignmentProperty, (, grandParent, ,, maybeGetVar, (, t, ,, root, ), ,, t, ., getModule, (, ), ), ;, getNameInfoForName, (]
[grandParent, ,, maybeGetVar, (, t, ,, root, ), ,, t, ., getModule, (, ), ), ;, getNameInfoForName, (, name, ,]
[t, ., getModule, (, ), ), ;, getNameInfoForName, (, name, ,, PROPERTY, ), ., getDeclarations, (, ), ., add, (]
[), ), ;, getNameInfoForName, (, name, ,, PROPERTY, ), ., getDeclarations, (, ), ., add, (, prop, ), ;, return]
[,, PROPERTY, ), ., getDeclarations, (, ), ., add, (, prop, ), ;, return, true, ;, }, break, ;, case]
[,, PROPERTY, ), ., getDeclarations, (, ), ., add, (, prop, ), ;, return, true, ;, }, break, ;, case]
[., add, (, prop, ), ;, return, true, ;, }, break, ;, case, Token, ., ASSIGN, :, Node, map, =]
[., add, (, prop, ), ;, return, true, ;, }, break, ;, case, Token, ., ASSIGN, :, Node, map, =]
[., add, (, prop, ), ;, return, true, ;, }, break, ;, case, Token, ., ASSIGN, :, Node, map, =]
[case, Token, ., ASSIGN, :, Node, map, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[case, Token, ., ASSIGN, :, Node, map, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[), ., getNext, (, ), ;, if, (, map, ., isObjectLit, (, ), ), {, for, (, Node, key, =]
[), ., getNext, (, ), ;, if, (, map, ., isObjectLit, (, ), ), {, for, (, Node, key, =]
[if, (, map, ., isObjectLit, (, ), ), {, for, (, Node, key, =, map, ., getFirstChild, (, ), ;]
[if, (, map, ., isObjectLit, (, ), ), {, for, (, Node, key, =, map, ., getFirstChild, (, ), ;]
[map, ., isObjectLit, (, ), ), {, for, (, Node, key, =, map, ., getFirstChild, (, ), ;, key, !=]
[isObjectLit, (, ), ), {, for, (, Node, key, =, map, ., getFirstChild, (, ), ;, key, !=, null, ;]
[), ), {, for, (, Node, key, =, map, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[), ), {, for, (, Node, key, =, map, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, String, name, =]
[getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, String, name, =]
[=, key, ., getNext, (, ), ), {, String, name, =, key, ., getString, (, ), ;, Property, prop, =]
[getNext, (, ), ), {, String, name, =, key, ., getString, (, ), ;, Property, prop, =, new, LiteralProperty, (]
[), ), {, String, name, =, key, ., getString, (, ), ;, Property, prop, =, new, LiteralProperty, (, key, ,]
[), ), {, String, name, =, key, ., getString, (, ), ;, Property, prop, =, new, LiteralProperty, (, key, ,]
[key, ., getString, (, ), ;, Property, prop, =, new, LiteralProperty, (, key, ,, key, ., getFirstChild, (, ), ,]
[getString, (, ), ;, Property, prop, =, new, LiteralProperty, (, key, ,, key, ., getFirstChild, (, ), ,, map, ,]
[), ;, Property, prop, =, new, LiteralProperty, (, key, ,, key, ., getFirstChild, (, ), ,, map, ,, n, ,]
[Property, prop, =, new, LiteralProperty, (, key, ,, key, ., getFirstChild, (, ), ,, map, ,, n, ,, maybeGetVar, (]
[=, new, LiteralProperty, (, key, ,, key, ., getFirstChild, (, ), ,, map, ,, n, ,, maybeGetVar, (, t, ,]
[(, key, ,, key, ., getFirstChild, (, ), ,, map, ,, n, ,, maybeGetVar, (, t, ,, root, ), ,]
[(, key, ,, key, ., getFirstChild, (, ), ,, map, ,, n, ,, maybeGetVar, (, t, ,, root, ), ,]
[), ,, map, ,, n, ,, maybeGetVar, (, t, ,, root, ), ,, t, ., getModule, (, ), ), ;]
[), ,, map, ,, n, ,, maybeGetVar, (, t, ,, root, ), ,, t, ., getModule, (, ), ), ;]
[), ,, map, ,, n, ,, maybeGetVar, (, t, ,, root, ), ,, t, ., getModule, (, ), ), ;]
[map, ,, n, ,, maybeGetVar, (, t, ,, root, ), ,, t, ., getModule, (, ), ), ;, getNameInfoForName, (]
[n, ,, maybeGetVar, (, t, ,, root, ), ,, t, ., getModule, (, ), ), ;, getNameInfoForName, (, name, ,]
[t, ., getModule, (, ), ), ;, getNameInfoForName, (, name, ,, PROPERTY, ), ., getDeclarations, (, ), ., add, (]
[), ;, getNameInfoForName, (, name, ,, PROPERTY, ), ., getDeclarations, (, ), ., add, (, prop, ), ;, }, return]
[), ., getDeclarations, (, ), ., add, (, prop, ), ;, }, return, true, ;, }, break, ;, }, return]
[}, break, ;, }, return, false, ;, }, private, Var, maybeGetVar, (, NodeTraversal, t, ,, Node, maybeName, ), {, return]
[}, break, ;, }, return, false, ;, }, private, Var, maybeGetVar, (, NodeTraversal, t, ,, Node, maybeName, ), {, return]
[}, break, ;, }, return, false, ;, }, private, Var, maybeGetVar, (, NodeTraversal, t, ,, Node, maybeName, ), {, return]
[;, }, private, Var, maybeGetVar, (, NodeTraversal, t, ,, Node, maybeName, ), {, return, maybeName, ., isName, (, ), ?]
[;, }, private, Var, maybeGetVar, (, NodeTraversal, t, ,, Node, maybeName, ), {, return, maybeName, ., isName, (, ), ?]
[;, }, private, Var, maybeGetVar, (, NodeTraversal, t, ,, Node, maybeName, ), {, return, maybeName, ., isName, (, ), ?]
[,, Node, maybeName, ), {, return, maybeName, ., isName, (, ), ?, t, ., getScope, (, ), ., getVar, (]
[,, Node, maybeName, ), {, return, maybeName, ., isName, (, ), ?, t, ., getScope, (, ), ., getVar, (]
[., isName, (, ), ?, t, ., getScope, (, ), ., getVar, (, maybeName, ., getString, (, ), ), :]
[), ), :, null, ;, }, private, void, addGlobalUseOfSymbol, (, String, name, ,, JSModule, module, ,, SymbolType, type, ), {]
[), ), :, null, ;, }, private, void, addGlobalUseOfSymbol, (, String, name, ,, JSModule, module, ,, SymbolType, type, ), {]
[;, }, private, void, addGlobalUseOfSymbol, (, String, name, ,, JSModule, module, ,, SymbolType, type, ), {, symbolGraph, ., connect, (]
[private, void, addGlobalUseOfSymbol, (, String, name, ,, JSModule, module, ,, SymbolType, type, ), {, symbolGraph, ., connect, (, globalNode, ,]
[addGlobalUseOfSymbol, (, String, name, ,, JSModule, module, ,, SymbolType, type, ), {, symbolGraph, ., connect, (, globalNode, ,, module, ,]
[String, name, ,, JSModule, module, ,, SymbolType, type, ), {, symbolGraph, ., connect, (, globalNode, ,, module, ,, getNameInfoForName, (]
[,, JSModule, module, ,, SymbolType, type, ), {, symbolGraph, ., connect, (, globalNode, ,, module, ,, getNameInfoForName, (, name, ,]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {]
[Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {, symbolGraph, ., connect, (]
[,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {, symbolGraph, ., connect, (, externNode, ,]
[parent, ), {, if, (, n, ., isGetProp, (, ), ), {, symbolGraph, ., connect, (, externNode, ,, firstModule, ,]
[{, if, (, n, ., isGetProp, (, ), ), {, symbolGraph, ., connect, (, externNode, ,, firstModule, ,, getNameInfoForName, (]
[{, if, (, n, ., isGetProp, (, ), ), {, symbolGraph, ., connect, (, externNode, ,, firstModule, ,, getNameInfoForName, (]
[{, if, (, n, ., isGetProp, (, ), ), {, symbolGraph, ., connect, (, externNode, ,, firstModule, ,, getNameInfoForName, (]
[symbolGraph, ., connect, (, externNode, ,, firstModule, ,, getNameInfoForName, (, n, ., getLastChild, (, ), ., getString, (, ), ,]
[>, {, @, Override, public, boolean, traverseEdge, (, NameInfo, start, ,, JSModule, edge, ,, NameInfo, dest, ), {, if, (]
[>, {, @, Override, public, boolean, traverseEdge, (, NameInfo, start, ,, JSModule, edge, ,, NameInfo, dest, ), {, if, (]
[,, JSModule, edge, ,, NameInfo, dest, ), {, if, (, start, ., isReferenced, (, ), ), {, JSModule, startModule, =]
[,, JSModule, edge, ,, NameInfo, dest, ), {, if, (, start, ., isReferenced, (, ), ), {, JSModule, startModule, =]
[if, (, start, ., isReferenced, (, ), ), {, JSModule, startModule, =, start, ., getDeepestCommonModuleRef, (, ), ;, if, (]
[if, (, start, ., isReferenced, (, ), ), {, JSModule, startModule, =, start, ., getDeepestCommonModuleRef, (, ), ;, if, (]
[if, (, start, ., isReferenced, (, ), ), {, JSModule, startModule, =, start, ., getDeepestCommonModuleRef, (, ), ;, if, (]
[start, ., isReferenced, (, ), ), {, JSModule, startModule, =, start, ., getDeepestCommonModuleRef, (, ), ;, if, (, startModule, !=]
[isReferenced, (, ), ), {, JSModule, startModule, =, start, ., getDeepestCommonModuleRef, (, ), ;, if, (, startModule, !=, null, &&]
[isReferenced, (, ), ), {, JSModule, startModule, =, start, ., getDeepestCommonModuleRef, (, ), ;, if, (, startModule, !=, null, &&]
[{, JSModule, startModule, =, start, ., getDeepestCommonModuleRef, (, ), ;, if, (, startModule, !=, null, &&, moduleGraph, ., dependsOn, (]
[startModule, =, start, ., getDeepestCommonModuleRef, (, ), ;, if, (, startModule, !=, null, &&, moduleGraph, ., dependsOn, (, startModule, ,]
[(, ), ;, if, (, startModule, !=, null, &&, moduleGraph, ., dependsOn, (, startModule, ,, edge, ), ), {, return]
[(, ), ;, if, (, startModule, !=, null, &&, moduleGraph, ., dependsOn, (, startModule, ,, edge, ), ), {, return]
[(, startModule, !=, null, &&, moduleGraph, ., dependsOn, (, startModule, ,, edge, ), ), {, return, dest, ., markReference, (]
[dependsOn, (, startModule, ,, edge, ), ), {, return, dest, ., markReference, (, startModule, ), ;, }, else, {, return]
[dependsOn, (, startModule, ,, edge, ), ), {, return, dest, ., markReference, (, startModule, ), ;, }, else, {, return]
[edge, ), ), {, return, dest, ., markReference, (, startModule, ), ;, }, else, {, return, dest, ., markReference, (]
[., markReference, (, startModule, ), ;, }, else, {, return, dest, ., markReference, (, edge, ), ;, }, }, return]
[private, final, JSModule, module, ;, GlobalFunction, (, Node, nameNode, ,, Var, var, ,, JSModule, module, ), {, Node, parent, =]
[private, final, JSModule, module, ;, GlobalFunction, (, Node, nameNode, ,, Var, var, ,, JSModule, module, ), {, Node, parent, =]
[(, Node, nameNode, ,, Var, var, ,, JSModule, module, ), {, Node, parent, =, nameNode, ., getParent, (, ), ;]
[(, Node, nameNode, ,, Var, var, ,, JSModule, module, ), {, Node, parent, =, nameNode, ., getParent, (, ), ;]
[Var, var, ,, JSModule, module, ), {, Node, parent, =, nameNode, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[Var, var, ,, JSModule, module, ), {, Node, parent, =, nameNode, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[Var, var, ,, JSModule, module, ), {, Node, parent, =, nameNode, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[{, Node, parent, =, nameNode, ., getParent, (, ), ;, Preconditions, ., checkState, (, parent, ., isVar, (, ), ||]
[{, Node, parent, =, nameNode, ., getParent, (, ), ;, Preconditions, ., checkState, (, parent, ., isVar, (, ), ||]
[nameNode, ., getParent, (, ), ;, Preconditions, ., checkState, (, parent, ., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (]
[), ;, Preconditions, ., checkState, (, parent, ., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent, ), ), ;]
[), ;, Preconditions, ., checkState, (, parent, ., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent, ), ), ;]
[checkState, (, parent, ., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent, ), ), ;, this, ., nameNode, =]
[parent, ., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent, ), ), ;, this, ., nameNode, =, nameNode, ;]
[parent, ., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent, ), ), ;, this, ., nameNode, =, nameNode, ;]
[), ||, NodeUtil, ., isFunctionDeclaration, (, parent, ), ), ;, this, ., nameNode, =, nameNode, ;, this, ., var, =]
[NodeUtil, ., isFunctionDeclaration, (, parent, ), ), ;, this, ., nameNode, =, nameNode, ;, this, ., var, =, var, ;]
[NodeUtil, ., isFunctionDeclaration, (, parent, ), ), ;, this, ., nameNode, =, nameNode, ;, this, ., var, =, var, ;]
[parent, ), ), ;, this, ., nameNode, =, nameNode, ;, this, ., var, =, var, ;, this, ., module, =]
[var, =, var, ;, this, ., module, =, module, ;, }, @, Override, public, Var, getRootVar, (, ), {, return]
[Var, getRootVar, (, ), {, return, var, ;, }, @, Override, public, void, remove, (, ), {, Node, parent, =]
[Var, getRootVar, (, ), {, return, var, ;, }, @, Override, public, void, remove, (, ), {, Node, parent, =]
[}, @, Override, public, void, remove, (, ), {, Node, parent, =, nameNode, ., getParent, (, ), ;, if, (]
[}, @, Override, public, void, remove, (, ), {, Node, parent, =, nameNode, ., getParent, (, ), ;, if, (]
[}, @, Override, public, void, remove, (, ), {, Node, parent, =, nameNode, ., getParent, (, ), ;, if, (]
[(, ), {, Node, parent, =, nameNode, ., getParent, (, ), ;, if, (, parent, ., isFunction, (, ), ||]
[(, ), {, Node, parent, =, nameNode, ., getParent, (, ), ;, if, (, parent, ., isFunction, (, ), ||]
[., getParent, (, ), ;, if, (, parent, ., isFunction, (, ), ||, parent, ., hasOneChild, (, ), ), {]
[., getParent, (, ), ;, if, (, parent, ., isFunction, (, ), ||, parent, ., hasOneChild, (, ), ), {]
[;, if, (, parent, ., isFunction, (, ), ||, parent, ., hasOneChild, (, ), ), {, NodeUtil, ., removeChild, (]
[;, if, (, parent, ., isFunction, (, ), ||, parent, ., hasOneChild, (, ), ), {, NodeUtil, ., removeChild, (]
[(, ), ||, parent, ., hasOneChild, (, ), ), {, NodeUtil, ., removeChild, (, parent, ., getParent, (, ), ,]
[(, ), ), {, NodeUtil, ., removeChild, (, parent, ., getParent, (, ), ,, parent, ), ;, }, else, {]
[(, ), ), {, NodeUtil, ., removeChild, (, parent, ., getParent, (, ), ,, parent, ), ;, }, else, {]
[NodeUtil, ., removeChild, (, parent, ., getParent, (, ), ,, parent, ), ;, }, else, {, Preconditions, ., checkState, (]
[NodeUtil, ., removeChild, (, parent, ., getParent, (, ), ,, parent, ), ;, }, else, {, Preconditions, ., checkState, (]
[(, ), ,, parent, ), ;, }, else, {, Preconditions, ., checkState, (, parent, ., isVar, (, ), ), ;]
[(, ), ,, parent, ), ;, }, else, {, Preconditions, ., checkState, (, parent, ., isVar, (, ), ), ;]
[), ;, }, else, {, Preconditions, ., checkState, (, parent, ., isVar, (, ), ), ;, parent, ., removeChild, (]
[), ;, parent, ., removeChild, (, nameNode, ), ;, }, }, @, Override, public, JSModule, getModule, (, ), {, return]
[Override, public, JSModule, getModule, (, ), {, return, module, ;, }, public, Node, getFunctionNode, (, ), {, Node, parent, =]
[Override, public, JSModule, getModule, (, ), {, return, module, ;, }, public, Node, getFunctionNode, (, ), {, Node, parent, =]
[module, ;, }, public, Node, getFunctionNode, (, ), {, Node, parent, =, nameNode, ., getParent, (, ), ;, if, (]
[module, ;, }, public, Node, getFunctionNode, (, ), {, Node, parent, =, nameNode, ., getParent, (, ), ;, if, (]
[{, Node, parent, =, nameNode, ., getParent, (, ), ;, if, (, parent, ., isFunction, (, ), ), {, return]
[getParent, (, ), ;, if, (, parent, ., isFunction, (, ), ), {, return, parent, ;, }, else, {, return]
[getParent, (, ), ;, if, (, parent, ., isFunction, (, ), ), {, return, parent, ;, }, else, {, return]
[if, (, parent, ., isFunction, (, ), ), {, return, parent, ;, }, else, {, return, nameNode, ., getChildAtIndex, (]
[Var, rootVar, ;, private, final, JSModule, module, ;, AssignmentProperty, (, Node, node, ,, Var, rootVar, ,, JSModule, module, ), {]
[Var, rootVar, ;, private, final, JSModule, module, ;, AssignmentProperty, (, Node, node, ,, Var, rootVar, ,, JSModule, module, ), {]
[final, JSModule, module, ;, AssignmentProperty, (, Node, node, ,, Var, rootVar, ,, JSModule, module, ), {, this, ., exprNode, =]
[module, ;, AssignmentProperty, (, Node, node, ,, Var, rootVar, ,, JSModule, module, ), {, this, ., exprNode, =, node, ;]
[module, ;, AssignmentProperty, (, Node, node, ,, Var, rootVar, ,, JSModule, module, ), {, this, ., exprNode, =, node, ;]
[Node, node, ,, Var, rootVar, ,, JSModule, module, ), {, this, ., exprNode, =, node, ;, this, ., rootVar, =]
[,, Var, rootVar, ,, JSModule, module, ), {, this, ., exprNode, =, node, ;, this, ., rootVar, =, rootVar, ;]
[,, Var, rootVar, ,, JSModule, module, ), {, this, ., exprNode, =, node, ;, this, ., rootVar, =, rootVar, ;]
[JSModule, module, ), {, this, ., exprNode, =, node, ;, this, ., rootVar, =, rootVar, ;, this, ., module, =]
[rootVar, =, rootVar, ;, this, ., module, =, module, ;, }, @, Override, public, Var, getRootVar, (, ), {, return]
[@, Override, public, Var, getRootVar, (, ), {, return, rootVar, ;, }, @, Override, public, void, remove, (, ), {]
[@, Override, public, Var, getRootVar, (, ), {, return, rootVar, ;, }, @, Override, public, void, remove, (, ), {]
[getRootVar, (, ), {, return, rootVar, ;, }, @, Override, public, void, remove, (, ), {, NodeUtil, ., removeChild, (]
[getRootVar, (, ), {, return, rootVar, ;, }, @, Override, public, void, remove, (, ), {, NodeUtil, ., removeChild, (]
[;, }, @, Override, public, void, remove, (, ), {, NodeUtil, ., removeChild, (, exprNode, ., getParent, (, ), ,]
[(, exprNode, ., getParent, (, ), ,, exprNode, ), ;, }, @, Override, public, Node, getPrototype, (, ), {, return]
[(, exprNode, ., getParent, (, ), ,, exprNode, ), ;, }, @, Override, public, Node, getPrototype, (, ), {, return]
[(, exprNode, ., getParent, (, ), ,, exprNode, ), ;, }, @, Override, public, Node, getPrototype, (, ), {, return]
[), ., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, @, Override, public, Node, getValue, (, ), {, return]
[), ., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, @, Override, public, Node, getValue, (, ), {, return]
[(, ), {, return, getAssignNode, (, ), ., getLastChild, (, ), ;, }, private, Node, getAssignNode, (, ), {, return]
[(, ), {, return, getAssignNode, (, ), ., getLastChild, (, ), ;, }, private, Node, getAssignNode, (, ), {, return]
[(, ), {, return, exprNode, ., getFirstChild, (, ), ;, }, @, Override, public, JSModule, getModule, (, ), {, return]
[(, Node, key, ,, Node, value, ,, Node, map, ,, Node, assign, ,, Var, rootVar, ,, JSModule, module, ), {]
[(, Node, key, ,, Node, value, ,, Node, map, ,, Node, assign, ,, Var, rootVar, ,, JSModule, module, ), {]
[Node, value, ,, Node, map, ,, Node, assign, ,, Var, rootVar, ,, JSModule, module, ), {, this, ., key, =]
[,, Node, map, ,, Node, assign, ,, Var, rootVar, ,, JSModule, module, ), {, this, ., key, =, key, ;]
[,, Node, map, ,, Node, assign, ,, Var, rootVar, ,, JSModule, module, ), {, this, ., key, =, key, ;]
[Node, assign, ,, Var, rootVar, ,, JSModule, module, ), {, this, ., key, =, key, ;, this, ., value, =]
[,, Var, rootVar, ,, JSModule, module, ), {, this, ., key, =, key, ;, this, ., value, =, value, ;]
[,, Var, rootVar, ,, JSModule, module, ), {, this, ., key, =, key, ;, this, ., value, =, value, ;]
[JSModule, module, ), {, this, ., key, =, key, ;, this, ., value, =, value, ;, this, ., map, =]
[), {, this, ., key, =, key, ;, this, ., value, =, value, ;, this, ., map, =, map, ;]
[), {, this, ., key, =, key, ;, this, ., value, =, value, ;, this, ., map, =, map, ;]
[key, =, key, ;, this, ., value, =, value, ;, this, ., map, =, map, ;, this, ., assign, =]
[key, ;, this, ., value, =, value, ;, this, ., map, =, map, ;, this, ., assign, =, assign, ;]
[key, ;, this, ., value, =, value, ;, this, ., map, =, map, ;, this, ., assign, =, assign, ;]
[value, =, value, ;, this, ., map, =, map, ;, this, ., assign, =, assign, ;, this, ., rootVar, =]
[value, ;, this, ., map, =, map, ;, this, ., assign, =, assign, ;, this, ., rootVar, =, rootVar, ;]
[value, ;, this, ., map, =, map, ;, this, ., assign, =, assign, ;, this, ., rootVar, =, rootVar, ;]
[map, =, map, ;, this, ., assign, =, assign, ;, this, ., rootVar, =, rootVar, ;, this, ., module, =]
[rootVar, =, rootVar, ;, this, ., module, =, module, ;, }, @, Override, public, Var, getRootVar, (, ), {, return]
[@, Override, public, Var, getRootVar, (, ), {, return, rootVar, ;, }, @, Override, public, void, remove, (, ), {]
[@, Override, public, Var, getRootVar, (, ), {, return, rootVar, ;, }, @, Override, public, void, remove, (, ), {]
[getRootVar, (, ), {, return, rootVar, ;, }, @, Override, public, void, remove, (, ), {, map, ., removeChild, (]
[(, ), {, map, ., removeChild, (, key, ), ;, }, @, Override, public, Node, getPrototype, (, ), {, return]
[(, ), {, map, ., removeChild, (, key, ), ;, }, @, Override, public, Node, getPrototype, (, ), {, return]
[(, ), {, return, assign, ., getFirstChild, (, ), ;, }, @, Override, public, Node, getValue, (, ), {, return]
[Override, public, Node, getValue, (, ), {, return, value, ;, }, @, Override, public, JSModule, getModule, (, ), {, return]
[class, NameContext, {, final, NameInfo, name, ;, final, Scope, scope, ;, NameContext, (, NameInfo, name, ,, Scope, scope, ), {]
[class, NameContext, {, final, NameInfo, name, ;, final, Scope, scope, ;, NameContext, (, NameInfo, name, ,, Scope, scope, ), {]
[NameInfo, name, ;, final, Scope, scope, ;, NameContext, (, NameInfo, name, ,, Scope, scope, ), {, this, ., name, =]
[;, final, Scope, scope, ;, NameContext, (, NameInfo, name, ,, Scope, scope, ), {, this, ., name, =, name, ;]
[;, final, Scope, scope, ;, NameContext, (, NameInfo, name, ,, Scope, scope, ), {, this, ., name, =, name, ;]
[;, NameContext, (, NameInfo, name, ,, Scope, scope, ), {, this, ., name, =, name, ;, this, ., scope, =]
[;, this, ., scope, =, scope, ;, }, }, class, NameInfo, {, final, String, name, ;, private, boolean, referenced, =]
[NameInfo, {, final, String, name, ;, private, boolean, referenced, =, false, ;, private, final, Deque, <, Symbol, >, declarations, =]
[private, final, Deque, <, Symbol, >, declarations, =, new, ArrayDeque, <, Symbol, >, (, ), ;, private, JSModule, deepestCommonModuleRef, =]
[declarations, =, new, ArrayDeque, <, Symbol, >, (, ), ;, private, JSModule, deepestCommonModuleRef, =, null, ;, private, boolean, readClosureVariables, =]
[), ;, private, JSModule, deepestCommonModuleRef, =, null, ;, private, boolean, readClosureVariables, =, false, ;, NameInfo, (, String, name, ), {]
[), ;, private, JSModule, deepestCommonModuleRef, =, null, ;, private, boolean, readClosureVariables, =, false, ;, NameInfo, (, String, name, ), {]
[deepestCommonModuleRef, =, null, ;, private, boolean, readClosureVariables, =, false, ;, NameInfo, (, String, name, ), {, this, ., name, =]
[String, name, ), {, this, ., name, =, name, ;, }, @, Override, public, String, toString, (, ), {, return]
[;, }, @, Override, public, String, toString, (, ), {, return, name, ;, }, boolean, isReferenced, (, ), {, return]
[{, return, name, ;, }, boolean, isReferenced, (, ), {, return, referenced, ;, }, boolean, readsClosureVariables, (, ), {, return]
[}, boolean, readsClosureVariables, (, ), {, return, readClosureVariables, ;, }, boolean, markReference, (, JSModule, module, ), {, boolean, hasChanged, =]
[), {, return, readClosureVariables, ;, }, boolean, markReference, (, JSModule, module, ), {, boolean, hasChanged, =, false, ;, if, (]
[{, return, readClosureVariables, ;, }, boolean, markReference, (, JSModule, module, ), {, boolean, hasChanged, =, false, ;, if, (, !]
[;, }, boolean, markReference, (, JSModule, module, ), {, boolean, hasChanged, =, false, ;, if, (, !, referenced, ), {]
[boolean, markReference, (, JSModule, module, ), {, boolean, hasChanged, =, false, ;, if, (, !, referenced, ), {, referenced, =]
[(, JSModule, module, ), {, boolean, hasChanged, =, false, ;, if, (, !, referenced, ), {, referenced, =, true, ;]
[module, ), {, boolean, hasChanged, =, false, ;, if, (, !, referenced, ), {, referenced, =, true, ;, hasChanged, =]
[=, false, ;, if, (, !, referenced, ), {, referenced, =, true, ;, hasChanged, =, true, ;, }, if, (]
[=, false, ;, if, (, !, referenced, ), {, referenced, =, true, ;, hasChanged, =, true, ;, }, if, (]
[;, if, (, !, referenced, ), {, referenced, =, true, ;, hasChanged, =, true, ;, }, if, (, moduleGraph, !=]
[{, referenced, =, true, ;, hasChanged, =, true, ;, }, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon, =]
[;, hasChanged, =, true, ;, }, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (]
[;, hasChanged, =, true, ;, }, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (]
[=, true, ;, }, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==]
[}, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==, null, ), {]
[(, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==, null, ), {, deepestCommonModuleRef, =]
[{, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==, null, ), {, deepestCommonModuleRef, =, module, ;, }, else, {]
[originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==, null, ), {, deepestCommonModuleRef, =, module, ;, }, else, {, deepestCommonModuleRef, =]
[originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==, null, ), {, deepestCommonModuleRef, =, module, ;, }, else, {, deepestCommonModuleRef, =]
[if, (, deepestCommonModuleRef, ==, null, ), {, deepestCommonModuleRef, =, module, ;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (]
[deepestCommonModuleRef, ==, null, ), {, deepestCommonModuleRef, =, module, ;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,]
[=, module, ;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;, }, if, (]
[=, module, ;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;, }, if, (]
[;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;, }, if, (, originalDeepestCommon, !=]
[{, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;, }, if, (, originalDeepestCommon, !=, deepestCommonModuleRef, ), {]
[=, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;, }, if, (, originalDeepestCommon, !=, deepestCommonModuleRef, ), {, hasChanged, =]
[deepestCommonModuleRef, ,, module, ), ;, }, if, (, originalDeepestCommon, !=, deepestCommonModuleRef, ), {, hasChanged, =, true, ;, }, }, return]
[!=, deepestCommonModuleRef, ), {, hasChanged, =, true, ;, }, }, return, hasChanged, ;, }, JSModule, getDeepestCommonModuleRef, (, ), {, return]
[;, }, JSModule, getDeepestCommonModuleRef, (, ), {, return, deepestCommonModuleRef, ;, }, Deque, <, Symbol, >, getDeclarations, (, ), {, return]
