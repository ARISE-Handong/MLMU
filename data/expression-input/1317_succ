[=, new, StrTokenizer, (, ), ;, CSV_TOKENIZER_PROTOTYPE, ., setDelimiterMatcher, (, StrMatcher, ., commaMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher]
[;, CSV_TOKENIZER_PROTOTYPE, ., setDelimiterMatcher, (, StrMatcher, ., commaMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (]
[;, CSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (]
[., setDelimiterMatcher, (, StrMatcher, ., commaMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), )]
[), ;, CSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (, StrMatcher, ., noneMatcher]
[., commaMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher]
[;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (]
[., setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), )]
[), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher]
[., doubleQuoteMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher]
[;, CSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (, false, ), ;, CSV_TOKENIZER_PROTOTYPE]
[., setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), )]
[), ;, CSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (, false, ), ;]
[., noneMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull]
[;, CSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (, false, ), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens, (, false, ), ;, TSV_TOKENIZER_PROTOTYPE, =, new, StrTokenizer, (]
[., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (, false, ), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens]
[), ;, CSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (, false, ), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens, (, false, ), ;, TSV_TOKENIZER_PROTOTYPE, =, new, StrTokenizer]
[., trimMatcher, (, ), ), ;, CSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (, false, ), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens, (, false, ), ;]
[;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens, (, false, ), ;, TSV_TOKENIZER_PROTOTYPE, =, new, StrTokenizer, (, ), ;, TSV_TOKENIZER_PROTOTYPE, ., setDelimiterMatcher, (, StrMatcher]
[., setEmptyTokenAsNull, (, false, ), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens, (, false, ), ;, TSV_TOKENIZER_PROTOTYPE, =, new, StrTokenizer, (, ), ;]
[), ;, CSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens, (, false, ), ;, TSV_TOKENIZER_PROTOTYPE, =, new, StrTokenizer, (, ), ;, TSV_TOKENIZER_PROTOTYPE, ., setDelimiterMatcher, (]
[;, TSV_TOKENIZER_PROTOTYPE, =, new, StrTokenizer, (, ), ;, TSV_TOKENIZER_PROTOTYPE, ., setDelimiterMatcher, (, StrMatcher, ., tabMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE]
[., setIgnoreEmptyTokens, (, false, ), ;, TSV_TOKENIZER_PROTOTYPE, =, new, StrTokenizer, (, ), ;, TSV_TOKENIZER_PROTOTYPE, ., setDelimiterMatcher, (, StrMatcher, ., tabMatcher]
[), ;, TSV_TOKENIZER_PROTOTYPE, =, new, StrTokenizer, (, ), ;, TSV_TOKENIZER_PROTOTYPE, ., setDelimiterMatcher, (, StrMatcher, ., tabMatcher, (, ), ), ;]
[=, new, StrTokenizer, (, ), ;, TSV_TOKENIZER_PROTOTYPE, ., setDelimiterMatcher, (, StrMatcher, ., tabMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher]
[;, TSV_TOKENIZER_PROTOTYPE, ., setDelimiterMatcher, (, StrMatcher, ., tabMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (]
[;, TSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (]
[., setDelimiterMatcher, (, StrMatcher, ., tabMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), )]
[), ;, TSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (, StrMatcher, ., noneMatcher]
[., tabMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher]
[;, TSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (]
[., setQuoteMatcher, (, StrMatcher, ., doubleQuoteMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), )]
[), ;, TSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher]
[., doubleQuoteMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher]
[;, TSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (, false, ), ;, TSV_TOKENIZER_PROTOTYPE]
[., setIgnoredMatcher, (, StrMatcher, ., noneMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), )]
[), ;, TSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (, false, ), ;]
[., noneMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull]
[;, TSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (, false, ), ;, TSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens, (, false, ), ;, }, private, char, chars, []
[., setTrimmerMatcher, (, StrMatcher, ., trimMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (, false, ), ;, TSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens]
[), ;, TSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (, false, ), ;, TSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens, (, false, ), ;, }, private, char, chars]
[., trimMatcher, (, ), ), ;, TSV_TOKENIZER_PROTOTYPE, ., setEmptyTokenAsNull, (, false, ), ;, TSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens, (, false, ), ;]
[;, TSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens, (, false, ), ;, }, private, char, chars, [, ], ;, private, String, tokens, [, ]]
[., setEmptyTokenAsNull, (, false, ), ;, TSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens, (, false, ), ;, }, private, char, chars, [, ], ;]
[), ;, TSV_TOKENIZER_PROTOTYPE, ., setIgnoreEmptyTokens, (, false, ), ;, }, private, char, chars, [, ], ;, private, String, tokens, []
[;, }, private, char, chars, [, ], ;, private, String, tokens, [, ], ;, private, int, tokenPos, ;, private, StrMatcher]
[., setIgnoreEmptyTokens, (, false, ), ;, }, private, char, chars, [, ], ;, private, String, tokens, [, ], ;, private]
[), ;, }, private, char, chars, [, ], ;, private, String, tokens, [, ], ;, private, int, tokenPos, ;, private]
[;, private, StrMatcher, quoteMatcher, =, StrMatcher, ., noneMatcher, (, ), ;, private, StrMatcher, ignoredMatcher, =, StrMatcher, ., noneMatcher, (, )]
[., splitMatcher, (, ), ;, private, StrMatcher, quoteMatcher, =, StrMatcher, ., noneMatcher, (, ), ;, private, StrMatcher, ignoredMatcher, =, StrMatcher]
[;, private, StrMatcher, ignoredMatcher, =, StrMatcher, ., noneMatcher, (, ), ;, private, StrMatcher, trimmerMatcher, =, StrMatcher, ., noneMatcher, (, )]
[., noneMatcher, (, ), ;, private, StrMatcher, ignoredMatcher, =, StrMatcher, ., noneMatcher, (, ), ;, private, StrMatcher, trimmerMatcher, =, StrMatcher]
[;, private, StrMatcher, trimmerMatcher, =, StrMatcher, ., noneMatcher, (, ), ;, private, boolean, emptyAsNull, =, false, ;, private, boolean, ignoreEmptyTokens]
[., noneMatcher, (, ), ;, private, StrMatcher, trimmerMatcher, =, StrMatcher, ., noneMatcher, (, ), ;, private, boolean, emptyAsNull, =, false]
[;, private, boolean, emptyAsNull, =, false, ;, private, boolean, ignoreEmptyTokens, =, true, ;, private, static, StrTokenizer, getCSVClone, (, ), {]
[., noneMatcher, (, ), ;, private, boolean, emptyAsNull, =, false, ;, private, boolean, ignoreEmptyTokens, =, true, ;, private, static, StrTokenizer]
[;, private, boolean, ignoreEmptyTokens, =, true, ;, private, static, StrTokenizer, getCSVClone, (, ), {, return, (, StrTokenizer, ), CSV_TOKENIZER_PROTOTYPE, .]
[;, private, static, StrTokenizer, getCSVClone, (, ), {, return, (, StrTokenizer, ), CSV_TOKENIZER_PROTOTYPE, ., clone, (, ), ;, }, public]
[;, }, public, static, StrTokenizer, getCSVInstance, (, ), {, return, getCSVClone, (, ), ;, }, public, static, StrTokenizer, getCSVInstance, (]
[;, }, public, static, StrTokenizer, getCSVInstance, (, ), {, return, getCSVClone, (, ), ;, }, public, static, StrTokenizer, getCSVInstance, (]
[., clone, (, ), ;, }, public, static, StrTokenizer, getCSVInstance, (, ), {, return, getCSVClone, (, ), ;, }, public]
[;, }, public, static, StrTokenizer, getCSVInstance, (, final, String, input, ), {, final, StrTokenizer, tok, =, getCSVClone, (, ), ;]
[;, tok, ., reset, (, input, ), ;, return, tok, ;, }, public, static, StrTokenizer, getCSVInstance, (, final, char, []
[;, return, tok, ;, }, public, static, StrTokenizer, getCSVInstance, (, final, char, [, ], input, ), {, final, StrTokenizer, tok]
[., reset, (, input, ), ;, return, tok, ;, }, public, static, StrTokenizer, getCSVInstance, (, final, char, [, ], input]
[), ;, return, tok, ;, }, public, static, StrTokenizer, getCSVInstance, (, final, char, [, ], input, ), {, final, StrTokenizer]
[;, }, public, static, StrTokenizer, getCSVInstance, (, final, char, [, ], input, ), {, final, StrTokenizer, tok, =, getCSVClone, (]
[;, tok, ., reset, (, input, ), ;, return, tok, ;, }, private, static, StrTokenizer, getTSVClone, (, ), {, return]
[;, return, tok, ;, }, private, static, StrTokenizer, getTSVClone, (, ), {, return, (, StrTokenizer, ), TSV_TOKENIZER_PROTOTYPE, ., clone, (]
[., reset, (, input, ), ;, return, tok, ;, }, private, static, StrTokenizer, getTSVClone, (, ), {, return, (, StrTokenizer]
[), ;, return, tok, ;, }, private, static, StrTokenizer, getTSVClone, (, ), {, return, (, StrTokenizer, ), TSV_TOKENIZER_PROTOTYPE, ., clone]
[;, }, private, static, StrTokenizer, getTSVClone, (, ), {, return, (, StrTokenizer, ), TSV_TOKENIZER_PROTOTYPE, ., clone, (, ), ;, }]
[;, }, public, static, StrTokenizer, getTSVInstance, (, ), {, return, getTSVClone, (, ), ;, }, public, static, StrTokenizer, getTSVInstance, (]
[;, }, public, static, StrTokenizer, getTSVInstance, (, ), {, return, getTSVClone, (, ), ;, }, public, static, StrTokenizer, getTSVInstance, (]
[., clone, (, ), ;, }, public, static, StrTokenizer, getTSVInstance, (, ), {, return, getTSVClone, (, ), ;, }, public]
[;, }, public, static, StrTokenizer, getTSVInstance, (, final, String, input, ), {, final, StrTokenizer, tok, =, getTSVClone, (, ), ;]
[;, tok, ., reset, (, input, ), ;, return, tok, ;, }, public, static, StrTokenizer, getTSVInstance, (, final, char, []
[;, return, tok, ;, }, public, static, StrTokenizer, getTSVInstance, (, final, char, [, ], input, ), {, final, StrTokenizer, tok]
[., reset, (, input, ), ;, return, tok, ;, }, public, static, StrTokenizer, getTSVInstance, (, final, char, [, ], input]
[), ;, return, tok, ;, }, public, static, StrTokenizer, getTSVInstance, (, final, char, [, ], input, ), {, final, StrTokenizer]
[;, }, public, static, StrTokenizer, getTSVInstance, (, final, char, [, ], input, ), {, final, StrTokenizer, tok, =, getTSVClone, (]
[;, tok, ., reset, (, input, ), ;, return, tok, ;, }, public, StrTokenizer, (, ), {, super, (, )]
[;, return, tok, ;, }, public, StrTokenizer, (, ), {, super, (, ), ;, this, ., chars, =, null, ;]
[., reset, (, input, ), ;, return, tok, ;, }, public, StrTokenizer, (, ), {, super, (, ), ;, this]
[), ;, return, tok, ;, }, public, StrTokenizer, (, ), {, super, (, ), ;, this, ., chars, =, null]
[;, }, public, StrTokenizer, (, ), {, super, (, ), ;, this, ., chars, =, null, ;, }, public, StrTokenizer]
[=, null, ;, }, public, StrTokenizer, (, final, String, input, ), {, super, (, ), ;, if, (, input, !=]
[., chars, =, null, ;, }, public, StrTokenizer, (, final, String, input, ), {, super, (, ), ;, if, (]
[;, }, public, StrTokenizer, (, final, String, input, ), {, super, (, ), ;, if, (, input, !=, null, )]
[), {, chars, =, input, ., toCharArray, (, ), ;, }, else, {, chars, =, null, ;, }, }, public]
[!=, null, ), {, chars, =, input, ., toCharArray, (, ), ;, }, else, {, chars, =, null, ;, }]
[), {, chars, =, input, ., toCharArray, (, ), ;, }, else, {, chars, =, null, ;, }, }, public]
[=, input, ., toCharArray, (, ), ;, }, else, {, chars, =, null, ;, }, }, public, StrTokenizer, (, final]
[;, }, else, {, chars, =, null, ;, }, }, public, StrTokenizer, (, final, String, input, ,, final, char, delim]
[., toCharArray, (, ), ;, }, else, {, chars, =, null, ;, }, }, public, StrTokenizer, (, final, String, input]
[=, null, ;, }, }, public, StrTokenizer, (, final, String, input, ,, final, char, delim, ), {, this, (, input]
[;, }, }, public, StrTokenizer, (, final, String, input, ,, final, char, delim, ), {, this, (, input, ), ;]
[), ;, setDelimiterChar, (, delim, ), ;, }, public, StrTokenizer, (, final, String, input, ,, final, String, delim, ), {]
[;, }, public, StrTokenizer, (, final, String, input, ,, final, String, delim, ), {, this, (, input, ), ;, setDelimiterString]
[), ;, }, public, StrTokenizer, (, final, String, input, ,, final, String, delim, ), {, this, (, input, ), ;]
[), ;, setDelimiterString, (, delim, ), ;, }, public, StrTokenizer, (, final, String, input, ,, final, StrMatcher, delim, ), {]
[;, }, public, StrTokenizer, (, final, String, input, ,, final, StrMatcher, delim, ), {, this, (, input, ), ;, setDelimiterMatcher]
[), ;, }, public, StrTokenizer, (, final, String, input, ,, final, StrMatcher, delim, ), {, this, (, input, ), ;]
[), ;, setDelimiterMatcher, (, delim, ), ;, }, public, StrTokenizer, (, final, String, input, ,, final, char, delim, ,, final]
[;, }, public, StrTokenizer, (, final, String, input, ,, final, char, delim, ,, final, char, quote, ), {, this, (]
[), ;, }, public, StrTokenizer, (, final, String, input, ,, final, char, delim, ,, final, char, quote, ), {, this]
[,, delim, ), ;, setQuoteChar, (, quote, ), ;, }, public, StrTokenizer, (, final, String, input, ,, final, StrMatcher, delim]
[), ;, setQuoteChar, (, quote, ), ;, }, public, StrTokenizer, (, final, String, input, ,, final, StrMatcher, delim, ,, final]
[;, }, public, StrTokenizer, (, final, String, input, ,, final, StrMatcher, delim, ,, final, StrMatcher, quote, ), {, this, (]
[), ;, }, public, StrTokenizer, (, final, String, input, ,, final, StrMatcher, delim, ,, final, StrMatcher, quote, ), {, this]
[,, delim, ), ;, setQuoteMatcher, (, quote, ), ;, }, public, StrTokenizer, (, final, char, [, ], input, ), {]
[), ;, setQuoteMatcher, (, quote, ), ;, }, public, StrTokenizer, (, final, char, [, ], input, ), {, super, (]
[;, }, public, StrTokenizer, (, final, char, [, ], input, ), {, super, (, ), ;, this, ., chars, =]
[), ;, }, public, StrTokenizer, (, final, char, [, ], input, ), {, super, (, ), ;, this, ., chars]
[=, ArrayUtils, ., clone, (, input, ), ;, }, public, StrTokenizer, (, final, char, [, ], input, ,, final, char]
[., chars, =, ArrayUtils, ., clone, (, input, ), ;, }, public, StrTokenizer, (, final, char, [, ], input, ,]
[;, }, public, StrTokenizer, (, final, char, [, ], input, ,, final, char, delim, ), {, this, (, input, )]
[., clone, (, input, ), ;, }, public, StrTokenizer, (, final, char, [, ], input, ,, final, char, delim, )]
[), ;, }, public, StrTokenizer, (, final, char, [, ], input, ,, final, char, delim, ), {, this, (, input]
[), ;, setDelimiterChar, (, delim, ), ;, }, public, StrTokenizer, (, final, char, [, ], input, ,, final, String, delim]
[;, }, public, StrTokenizer, (, final, char, [, ], input, ,, final, String, delim, ), {, this, (, input, )]
[), ;, }, public, StrTokenizer, (, final, char, [, ], input, ,, final, String, delim, ), {, this, (, input]
[), ;, setDelimiterString, (, delim, ), ;, }, public, StrTokenizer, (, final, char, [, ], input, ,, final, StrMatcher, delim]
[;, }, public, StrTokenizer, (, final, char, [, ], input, ,, final, StrMatcher, delim, ), {, this, (, input, )]
[), ;, }, public, StrTokenizer, (, final, char, [, ], input, ,, final, StrMatcher, delim, ), {, this, (, input]
[), ;, setDelimiterMatcher, (, delim, ), ;, }, public, StrTokenizer, (, final, char, [, ], input, ,, final, char, delim]
[;, }, public, StrTokenizer, (, final, char, [, ], input, ,, final, char, delim, ,, final, char, quote, ), {]
[), ;, }, public, StrTokenizer, (, final, char, [, ], input, ,, final, char, delim, ,, final, char, quote, )]
[,, delim, ), ;, setQuoteChar, (, quote, ), ;, }, public, StrTokenizer, (, final, char, [, ], input, ,, final]
[), ;, setQuoteChar, (, quote, ), ;, }, public, StrTokenizer, (, final, char, [, ], input, ,, final, StrMatcher, delim]
[;, }, public, StrTokenizer, (, final, char, [, ], input, ,, final, StrMatcher, delim, ,, final, StrMatcher, quote, ), {]
[), ;, }, public, StrTokenizer, (, final, char, [, ], input, ,, final, StrMatcher, delim, ,, final, StrMatcher, quote, )]
[,, delim, ), ;, setQuoteMatcher, (, quote, ), ;, }, public, int, size, (, ), {, checkTokenized, (, ), ;]
[), ;, setQuoteMatcher, (, quote, ), ;, }, public, int, size, (, ), {, checkTokenized, (, ), ;, return, tokens]
[;, }, public, int, size, (, ), {, checkTokenized, (, ), ;, return, tokens, ., length, ;, }, public, String]
[), ;, }, public, int, size, (, ), {, checkTokenized, (, ), ;, return, tokens, ., length, ;, }, public]
[;, return, tokens, ., length, ;, }, public, String, nextToken, (, ), {, if, (, hasNext, (, ), ), {]
[;, }, public, String, nextToken, (, ), {, if, (, hasNext, (, ), ), {, return, tokens, [, tokenPos, ++]
[., length, ;, }, public, String, nextToken, (, ), {, if, (, hasNext, (, ), ), {, return, tokens, []
[), {, return, tokens, [, tokenPos, ++, ], ;, }, return, null, ;, }, public, String, previousToken, (, ), {]
[;, }, return, null, ;, }, public, String, previousToken, (, ), {, if, (, hasPrevious, (, ), ), {, return]
[[, tokenPos, ++, ], ;, }, return, null, ;, }, public, String, previousToken, (, ), {, if, (, hasPrevious, (]
[], ;, }, return, null, ;, }, public, String, previousToken, (, ), {, if, (, hasPrevious, (, ), ), {]
[++, ], ;, }, return, null, ;, }, public, String, previousToken, (, ), {, if, (, hasPrevious, (, ), )]
[;, }, public, String, previousToken, (, ), {, if, (, hasPrevious, (, ), ), {, return, tokens, [, --, tokenPos]
[), {, return, tokens, [, --, tokenPos, ], ;, }, return, null, ;, }, public, String, [, ], getTokenArray, (]
[;, }, return, null, ;, }, public, String, [, ], getTokenArray, (, ), {, checkTokenized, (, ), ;, return, tokens]
[[, --, tokenPos, ], ;, }, return, null, ;, }, public, String, [, ], getTokenArray, (, ), {, checkTokenized, (]
[], ;, }, return, null, ;, }, public, String, [, ], getTokenArray, (, ), {, checkTokenized, (, ), ;, return]
[], ;, }, return, null, ;, }, public, String, [, ], getTokenArray, (, ), {, checkTokenized, (, ), ;, return]
[;, }, public, String, [, ], getTokenArray, (, ), {, checkTokenized, (, ), ;, return, tokens, ., clone, (, )]
[;, return, tokens, ., clone, (, ), ;, }, public, List, <, String, >, getTokenList, (, ), {, checkTokenized, (]
[;, }, public, List, <, String, >, getTokenList, (, ), {, checkTokenized, (, ), ;, final, List, <, String, >]
[., clone, (, ), ;, }, public, List, <, String, >, getTokenList, (, ), {, checkTokenized, (, ), ;, final]
[;, final, List, <, String, >, list, =, new, ArrayList, <, String, >, (, tokens, ., length, ), ;, for]
[;, for, (, final, String, element, :, tokens, ), {, list, ., add, (, element, ), ;, }, return, list]
[), ;, for, (, final, String, element, :, tokens, ), {, list, ., add, (, element, ), ;, }, return]
[., length, ), ;, for, (, final, String, element, :, tokens, ), {, list, ., add, (, element, ), ;]
[), {, list, ., add, (, element, ), ;, }, return, list, ;, }, public, StrTokenizer, reset, (, ), {]
[;, }, return, list, ;, }, public, StrTokenizer, reset, (, ), {, tokenPos, =, 0, ;, tokens, =, null, ;]
[., add, (, element, ), ;, }, return, list, ;, }, public, StrTokenizer, reset, (, ), {, tokenPos, =, 0]
[), ;, }, return, list, ;, }, public, StrTokenizer, reset, (, ), {, tokenPos, =, 0, ;, tokens, =, null]
[;, }, public, StrTokenizer, reset, (, ), {, tokenPos, =, 0, ;, tokens, =, null, ;, return, this, ;, }]
[=, 0, ;, tokens, =, null, ;, return, this, ;, }, public, StrTokenizer, reset, (, final, String, input, ), {]
[;, tokens, =, null, ;, return, this, ;, }, public, StrTokenizer, reset, (, final, String, input, ), {, reset, (]
[=, null, ;, return, this, ;, }, public, StrTokenizer, reset, (, final, String, input, ), {, reset, (, ), ;]
[;, return, this, ;, }, public, StrTokenizer, reset, (, final, String, input, ), {, reset, (, ), ;, if, (]
[;, }, public, StrTokenizer, reset, (, final, String, input, ), {, reset, (, ), ;, if, (, input, !=, null]
[;, if, (, input, !=, null, ), {, this, ., chars, =, input, ., toCharArray, (, ), ;, }, else]
[), {, this, ., chars, =, input, ., toCharArray, (, ), ;, }, else, {, this, ., chars, =, null]
[!=, null, ), {, this, ., chars, =, input, ., toCharArray, (, ), ;, }, else, {, this, ., chars]
[), {, this, ., chars, =, input, ., toCharArray, (, ), ;, }, else, {, this, ., chars, =, null]
[=, input, ., toCharArray, (, ), ;, }, else, {, this, ., chars, =, null, ;, }, return, this, ;]
[., chars, =, input, ., toCharArray, (, ), ;, }, else, {, this, ., chars, =, null, ;, }, return]
[;, }, else, {, this, ., chars, =, null, ;, }, return, this, ;, }, public, StrTokenizer, reset, (, final]
[., toCharArray, (, ), ;, }, else, {, this, ., chars, =, null, ;, }, return, this, ;, }, public]
[=, null, ;, }, return, this, ;, }, public, StrTokenizer, reset, (, final, char, [, ], input, ), {, reset]
[., chars, =, null, ;, }, return, this, ;, }, public, StrTokenizer, reset, (, final, char, [, ], input, )]
[;, }, return, this, ;, }, public, StrTokenizer, reset, (, final, char, [, ], input, ), {, reset, (, )]
[;, }, public, StrTokenizer, reset, (, final, char, [, ], input, ), {, reset, (, ), ;, this, ., chars]
[;, this, ., chars, =, ArrayUtils, ., clone, (, input, ), ;, return, this, ;, }, @, Override, public, boolean]
[=, ArrayUtils, ., clone, (, input, ), ;, return, this, ;, }, @, Override, public, boolean, hasNext, (, ), {]
[., chars, =, ArrayUtils, ., clone, (, input, ), ;, return, this, ;, }, @, Override, public, boolean, hasNext, (]
[;, return, this, ;, }, @, Override, public, boolean, hasNext, (, ), {, checkTokenized, (, ), ;, return, tokenPos, <]
[., clone, (, input, ), ;, return, this, ;, }, @, Override, public, boolean, hasNext, (, ), {, checkTokenized, (]
[), ;, return, this, ;, }, @, Override, public, boolean, hasNext, (, ), {, checkTokenized, (, ), ;, return, tokenPos]
[;, }, @, Override, public, boolean, hasNext, (, ), {, checkTokenized, (, ), ;, return, tokenPos, <, tokens, ., length]
[;, return, tokenPos, <, tokens, ., length, ;, }, @, Override, public, String, next, (, ), {, if, (, hasNext]
[;, }, @, Override, public, String, next, (, ), {, if, (, hasNext, (, ), ), {, return, tokens, []
[<, tokens, ., length, ;, }, @, Override, public, String, next, (, ), {, if, (, hasNext, (, ), )]
[;, }, @, Override, public, String, next, (, ), {, if, (, hasNext, (, ), ), {, return, tokens, []
[., length, ;, }, @, Override, public, String, next, (, ), {, if, (, hasNext, (, ), ), {, return]
[), {, return, tokens, [, tokenPos, ++, ], ;, }, throw, new, NoSuchElementException, (, ), ;, }, @, Override, public]
[;, }, throw, new, NoSuchElementException, (, ), ;, }, @, Override, public, int, nextIndex, (, ), {, return, tokenPos, ;]
[[, tokenPos, ++, ], ;, }, throw, new, NoSuchElementException, (, ), ;, }, @, Override, public, int, nextIndex, (, )]
[], ;, }, throw, new, NoSuchElementException, (, ), ;, }, @, Override, public, int, nextIndex, (, ), {, return, tokenPos]
[++, ], ;, }, throw, new, NoSuchElementException, (, ), ;, }, @, Override, public, int, nextIndex, (, ), {, return]
[;, }, @, Override, public, int, nextIndex, (, ), {, return, tokenPos, ;, }, @, Override, public, boolean, hasPrevious, (]
[;, }, @, Override, public, boolean, hasPrevious, (, ), {, checkTokenized, (, ), ;, return, tokenPos, >, 0, ;, }]
[;, return, tokenPos, >, 0, ;, }, @, Override, public, String, previous, (, ), {, if, (, hasPrevious, (, )]
[;, }, @, Override, public, String, previous, (, ), {, if, (, hasPrevious, (, ), ), {, return, tokens, []
[>, 0, ;, }, @, Override, public, String, previous, (, ), {, if, (, hasPrevious, (, ), ), {, return]
[;, }, @, Override, public, String, previous, (, ), {, if, (, hasPrevious, (, ), ), {, return, tokens, []
[), {, return, tokens, [, --, tokenPos, ], ;, }, throw, new, NoSuchElementException, (, ), ;, }, @, Override, public]
[;, }, throw, new, NoSuchElementException, (, ), ;, }, @, Override, public, int, previousIndex, (, ), {, return, tokenPos, -]
[[, --, tokenPos, ], ;, }, throw, new, NoSuchElementException, (, ), ;, }, @, Override, public, int, previousIndex, (, )]
[], ;, }, throw, new, NoSuchElementException, (, ), ;, }, @, Override, public, int, previousIndex, (, ), {, return, tokenPos]
[], ;, }, throw, new, NoSuchElementException, (, ), ;, }, @, Override, public, int, previousIndex, (, ), {, return, tokenPos]
[;, }, @, Override, public, int, previousIndex, (, ), {, return, tokenPos, -, 1, ;, }, @, Override, public, void]
[;, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, "remove() is unsupported", ), ;, }, @, Override]
[-, 1, ;, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, "remove() is unsupported", ), ;, }]
[;, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, "remove() is unsupported", ), ;, }, @, Override]
[;, }, @, Override, public, void, set, (, final, String, obj, ), {, throw, new, UnsupportedOperationException, (, "set() is unsupported", ), ;]
[), ;, }, @, Override, public, void, set, (, final, String, obj, ), {, throw, new, UnsupportedOperationException, (, "set() is unsupported", )]
[;, }, @, Override, public, void, add, (, final, String, obj, ), {, throw, new, UnsupportedOperationException, (, "add() is unsupported", ), ;]
[), ;, }, @, Override, public, void, add, (, final, String, obj, ), {, throw, new, UnsupportedOperationException, (, "add() is unsupported", )]
[;, }, private, void, checkTokenized, (, ), {, if, (, tokens, ==, null, ), {, if, (, chars, ==, null]
[), ;, }, private, void, checkTokenized, (, ), {, if, (, tokens, ==, null, ), {, if, (, chars, ==]
[), {, if, (, chars, ==, null, ), {, final, List, <, String, >, split, =, tokenize, (, null, ,]
[==, null, ), {, if, (, chars, ==, null, ), {, final, List, <, String, >, split, =, tokenize, (]
[), {, if, (, chars, ==, null, ), {, final, List, <, String, >, split, =, tokenize, (, null, ,]
[), {, final, List, <, String, >, split, =, tokenize, (, null, ,, 0, ,, 0, ), ;, tokens, =]
[==, null, ), {, final, List, <, String, >, split, =, tokenize, (, null, ,, 0, ,, 0, ), ;]
[), {, final, List, <, String, >, split, =, tokenize, (, null, ,, 0, ,, 0, ), ;, tokens, =]
[;, tokens, =, split, ., toArray, (, new, String, [, split, ., size, (, ), ], ), ;, }, else]
[,, 0, ,, 0, ), ;, tokens, =, split, ., toArray, (, new, String, [, split, ., size, (, )]
[,, 0, ), ;, tokens, =, split, ., toArray, (, new, String, [, split, ., size, (, ), ], )]
[), ;, tokens, =, split, ., toArray, (, new, String, [, split, ., size, (, ), ], ), ;, }]
[=, split, ., toArray, (, new, String, [, split, ., size, (, ), ], ), ;, }, else, {, final]
[;, }, else, {, final, List, <, String, >, split, =, tokenize, (, chars, ,, 0, ,, chars, ., length]
[., toArray, (, new, String, [, split, ., size, (, ), ], ), ;, }, else, {, final, List, <]
[), ;, }, else, {, final, List, <, String, >, split, =, tokenize, (, chars, ,, 0, ,, chars, .]
[], ), ;, }, else, {, final, List, <, String, >, split, =, tokenize, (, chars, ,, 0, ,, chars]
[., size, (, ), ], ), ;, }, else, {, final, List, <, String, >, split, =, tokenize, (, chars]
[;, tokens, =, split, ., toArray, (, new, String, [, split, ., size, (, ), ], ), ;, }, }]
[,, 0, ,, chars, ., length, ), ;, tokens, =, split, ., toArray, (, new, String, [, split, ., size]
[,, chars, ., length, ), ;, tokens, =, split, ., toArray, (, new, String, [, split, ., size, (, )]
[), ;, tokens, =, split, ., toArray, (, new, String, [, split, ., size, (, ), ], ), ;, }]
[., length, ), ;, tokens, =, split, ., toArray, (, new, String, [, split, ., size, (, ), ], )]
[=, split, ., toArray, (, new, String, [, split, ., size, (, ), ], ), ;, }, }, }, protected]
[;, }, }, }, protected, List, <, String, >, tokenize, (, final, char, [, ], chars, ,, final, int, offset]
[., toArray, (, new, String, [, split, ., size, (, ), ], ), ;, }, }, }, protected, List, <]
[), ;, }, }, }, protected, List, <, String, >, tokenize, (, final, char, [, ], chars, ,, final, int]
[], ), ;, }, }, }, protected, List, <, String, >, tokenize, (, final, char, [, ], chars, ,, final]
[., size, (, ), ], ), ;, }, }, }, protected, List, <, String, >, tokenize, (, final, char, []
[), {, return, Collections, ., emptyList, (, ), ;, }, final, StrBuilder, buf, =, new, StrBuilder, (, ), ;, final]
[||, count, ==, 0, ), {, return, Collections, ., emptyList, (, ), ;, }, final, StrBuilder, buf, =, new, StrBuilder]
[==, null, ||, count, ==, 0, ), {, return, Collections, ., emptyList, (, ), ;, }, final, StrBuilder, buf, =]
[||, count, ==, 0, ), {, return, Collections, ., emptyList, (, ), ;, }, final, StrBuilder, buf, =, new, StrBuilder]
[), {, return, Collections, ., emptyList, (, ), ;, }, final, StrBuilder, buf, =, new, StrBuilder, (, ), ;, final]
[==, 0, ), {, return, Collections, ., emptyList, (, ), ;, }, final, StrBuilder, buf, =, new, StrBuilder, (, )]
[), {, return, Collections, ., emptyList, (, ), ;, }, final, StrBuilder, buf, =, new, StrBuilder, (, ), ;, final]
[;, }, final, StrBuilder, buf, =, new, StrBuilder, (, ), ;, final, List, <, String, >, tokens, =, new, ArrayList]
[., emptyList, (, ), ;, }, final, StrBuilder, buf, =, new, StrBuilder, (, ), ;, final, List, <, String, >]
[;, final, List, <, String, >, tokens, =, new, ArrayList, <, String, >, (, ), ;, int, pos, =, offset]
[;, int, pos, =, offset, ;, while, (, pos, >=, 0, &&, pos, <, count, ), {, pos, =, readNextToken]
[;, while, (, pos, >=, 0, &&, pos, <, count, ), {, pos, =, readNextToken, (, chars, ,, pos, ,]
[), {, pos, =, readNextToken, (, chars, ,, pos, ,, count, ,, buf, ,, tokens, ), ;, if, (, pos]
[&&, pos, <, count, ), {, pos, =, readNextToken, (, chars, ,, pos, ,, count, ,, buf, ,, tokens, )]
[>=, 0, &&, pos, <, count, ), {, pos, =, readNextToken, (, chars, ,, pos, ,, count, ,, buf, ,]
[&&, pos, <, count, ), {, pos, =, readNextToken, (, chars, ,, pos, ,, count, ,, buf, ,, tokens, )]
[), {, pos, =, readNextToken, (, chars, ,, pos, ,, count, ,, buf, ,, tokens, ), ;, if, (, pos]
[<, count, ), {, pos, =, readNextToken, (, chars, ,, pos, ,, count, ,, buf, ,, tokens, ), ;, if]
[), {, pos, =, readNextToken, (, chars, ,, pos, ,, count, ,, buf, ,, tokens, ), ;, if, (, pos]
[=, readNextToken, (, chars, ,, pos, ,, count, ,, buf, ,, tokens, ), ;, if, (, pos, >=, count, )]
[;, if, (, pos, >=, count, ), {, addToken, (, tokens, ,, "", ), ;, }, }, return, tokens, ;]
[,, pos, ,, count, ,, buf, ,, tokens, ), ;, if, (, pos, >=, count, ), {, addToken, (, tokens]
[,, count, ,, buf, ,, tokens, ), ;, if, (, pos, >=, count, ), {, addToken, (, tokens, ,, ""]
[,, buf, ,, tokens, ), ;, if, (, pos, >=, count, ), {, addToken, (, tokens, ,, "", ), ;]
[,, tokens, ), ;, if, (, pos, >=, count, ), {, addToken, (, tokens, ,, "", ), ;, }, }]
[), ;, if, (, pos, >=, count, ), {, addToken, (, tokens, ,, "", ), ;, }, }, return, tokens]
[), {, addToken, (, tokens, ,, "", ), ;, }, }, return, tokens, ;, }, private, void, addToken, (, final]
[>=, count, ), {, addToken, (, tokens, ,, "", ), ;, }, }, return, tokens, ;, }, private, void, addToken]
[), {, addToken, (, tokens, ,, "", ), ;, }, }, return, tokens, ;, }, private, void, addToken, (, final]
[;, }, }, return, tokens, ;, }, private, void, addToken, (, final, List, <, String, >, list, ,, String, tok]
[,, "", ), ;, }, }, return, tokens, ;, }, private, void, addToken, (, final, List, <, String, >, list]
[), ;, }, }, return, tokens, ;, }, private, void, addToken, (, final, List, <, String, >, list, ,, String]
[;, }, private, void, addToken, (, final, List, <, String, >, list, ,, String, tok, ), {, if, (, StringUtils]
[), {, if, (, isIgnoreEmptyTokens, (, ), ), {, return, ;, }, if, (, isEmptyTokenAsNull, (, ), ), {, tok]
[., isEmpty, (, tok, ), ), {, if, (, isIgnoreEmptyTokens, (, ), ), {, return, ;, }, if, (, isEmptyTokenAsNull]
[), ), {, if, (, isIgnoreEmptyTokens, (, ), ), {, return, ;, }, if, (, isEmptyTokenAsNull, (, ), ), {]
[), {, return, ;, }, if, (, isEmptyTokenAsNull, (, ), ), {, tok, =, null, ;, }, }, list, .]
[), {, tok, =, null, ;, }, }, list, ., add, (, tok, ), ;, }, private, int, readNextToken, (]
[=, null, ;, }, }, list, ., add, (, tok, ), ;, }, private, int, readNextToken, (, final, char, []
[;, }, }, list, ., add, (, tok, ), ;, }, private, int, readNextToken, (, final, char, [, ], chars]
[;, }, private, int, readNextToken, (, final, char, [, ], chars, ,, int, start, ,, final, int, len, ,, final]
[., add, (, tok, ), ;, }, private, int, readNextToken, (, final, char, [, ], chars, ,, int, start, ,]
[), ;, }, private, int, readNextToken, (, final, char, [, ], chars, ,, int, start, ,, final, int, len, ,]
[), {, final, int, removeLen, =, Math, ., max, (, getIgnoredMatcher, (, ), ., isMatch, (, chars, ,, start, ,]
[<, len, ), {, final, int, removeLen, =, Math, ., max, (, getIgnoredMatcher, (, ), ., isMatch, (, chars, ,]
[), {, final, int, removeLen, =, Math, ., max, (, getIgnoredMatcher, (, ), ., isMatch, (, chars, ,, start, ,]
[;, if, (, removeLen, ==, 0, ||, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len]
[., max, (, getIgnoredMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ,, getTrimmerMatcher, (]
[,, getTrimmerMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ), ;, if, (, removeLen]
[., isMatch, (, chars, ,, start, ,, start, ,, len, ), ,, getTrimmerMatcher, (, ), ., isMatch, (, chars, ,]
[,, start, ,, start, ,, len, ), ,, getTrimmerMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,]
[,, start, ,, len, ), ,, getTrimmerMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, )]
[,, len, ), ,, getTrimmerMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ), ;]
[), ,, getTrimmerMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), ), ;, if, (]
[), ;, if, (, removeLen, ==, 0, ||, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,]
[., isMatch, (, chars, ,, start, ,, start, ,, len, ), ), ;, if, (, removeLen, ==, 0, ||, getDelimiterMatcher]
[,, start, ,, start, ,, len, ), ), ;, if, (, removeLen, ==, 0, ||, getDelimiterMatcher, (, ), ., isMatch]
[,, start, ,, len, ), ), ;, if, (, removeLen, ==, 0, ||, getDelimiterMatcher, (, ), ., isMatch, (, chars]
[,, len, ), ), ;, if, (, removeLen, ==, 0, ||, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start]
[), ), ;, if, (, removeLen, ==, 0, ||, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start]
[), {, break, ;, }, start, +=, removeLen, ;, }, if, (, start, >=, len, ), {, addToken, (, tokens]
[||, getQuoteMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), >, 0, ), {, break]
[||, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), >, 0, ||, getQuoteMatcher, (]
[==, 0, ||, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), >, 0, ||]
[||, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), >, 0, ||, getQuoteMatcher, (]
[||, getQuoteMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), >, 0, ), {, break]
[>, 0, ||, getQuoteMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), >, 0, )]
[., isMatch, (, chars, ,, start, ,, start, ,, len, ), >, 0, ||, getQuoteMatcher, (, ), ., isMatch, (]
[,, start, ,, start, ,, len, ), >, 0, ||, getQuoteMatcher, (, ), ., isMatch, (, chars, ,, start, ,]
[,, start, ,, len, ), >, 0, ||, getQuoteMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,]
[,, len, ), >, 0, ||, getQuoteMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, )]
[), >, 0, ||, getQuoteMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), >, 0]
[||, getQuoteMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, ), >, 0, ), {, break]
[), {, break, ;, }, start, +=, removeLen, ;, }, if, (, start, >=, len, ), {, addToken, (, tokens]
[>, 0, ), {, break, ;, }, start, +=, removeLen, ;, }, if, (, start, >=, len, ), {, addToken]
[., isMatch, (, chars, ,, start, ,, start, ,, len, ), >, 0, ), {, break, ;, }, start, +=]
[,, start, ,, start, ,, len, ), >, 0, ), {, break, ;, }, start, +=, removeLen, ;, }, if]
[,, start, ,, len, ), >, 0, ), {, break, ;, }, start, +=, removeLen, ;, }, if, (, start]
[,, len, ), >, 0, ), {, break, ;, }, start, +=, removeLen, ;, }, if, (, start, >=, len]
[), >, 0, ), {, break, ;, }, start, +=, removeLen, ;, }, if, (, start, >=, len, ), {]
[), {, break, ;, }, start, +=, removeLen, ;, }, if, (, start, >=, len, ), {, addToken, (, tokens]
[+=, removeLen, ;, }, if, (, start, >=, len, ), {, addToken, (, tokens, ,, "", ), ;, return, -]
[;, }, if, (, start, >=, len, ), {, addToken, (, tokens, ,, "", ), ;, return, -, 1, ;]
[), {, addToken, (, tokens, ,, "", ), ;, return, -, 1, ;, }, final, int, delimLen, =, getDelimiterMatcher, (]
[>=, len, ), {, addToken, (, tokens, ,, "", ), ;, return, -, 1, ;, }, final, int, delimLen, =]
[), {, addToken, (, tokens, ,, "", ), ;, return, -, 1, ;, }, final, int, delimLen, =, getDelimiterMatcher, (]
[;, return, -, 1, ;, }, final, int, delimLen, =, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start, ,]
[,, "", ), ;, return, -, 1, ;, }, final, int, delimLen, =, getDelimiterMatcher, (, ), ., isMatch, (, chars]
[), ;, return, -, 1, ;, }, final, int, delimLen, =, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start]
[;, }, final, int, delimLen, =, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, )]
[;, }, final, int, delimLen, =, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, )]
[;, if, (, delimLen, >, 0, ), {, addToken, (, tokens, ,, "", ), ;, return, start, +, delimLen, ;]
[., isMatch, (, chars, ,, start, ,, start, ,, len, ), ;, if, (, delimLen, >, 0, ), {, addToken]
[,, start, ,, start, ,, len, ), ;, if, (, delimLen, >, 0, ), {, addToken, (, tokens, ,, ""]
[,, start, ,, len, ), ;, if, (, delimLen, >, 0, ), {, addToken, (, tokens, ,, "", ), ;]
[,, len, ), ;, if, (, delimLen, >, 0, ), {, addToken, (, tokens, ,, "", ), ;, return, start]
[), ;, if, (, delimLen, >, 0, ), {, addToken, (, tokens, ,, "", ), ;, return, start, +, delimLen]
[), {, addToken, (, tokens, ,, "", ), ;, return, start, +, delimLen, ;, }, final, int, quoteLen, =, getQuoteMatcher]
[>, 0, ), {, addToken, (, tokens, ,, "", ), ;, return, start, +, delimLen, ;, }, final, int, quoteLen]
[), {, addToken, (, tokens, ,, "", ), ;, return, start, +, delimLen, ;, }, final, int, quoteLen, =, getQuoteMatcher]
[;, return, start, +, delimLen, ;, }, final, int, quoteLen, =, getQuoteMatcher, (, ), ., isMatch, (, chars, ,, start]
[,, "", ), ;, return, start, +, delimLen, ;, }, final, int, quoteLen, =, getQuoteMatcher, (, ), ., isMatch, (]
[), ;, return, start, +, delimLen, ;, }, final, int, quoteLen, =, getQuoteMatcher, (, ), ., isMatch, (, chars, ,]
[;, }, final, int, quoteLen, =, getQuoteMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, )]
[+, delimLen, ;, }, final, int, quoteLen, =, getQuoteMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,]
[;, }, final, int, quoteLen, =, getQuoteMatcher, (, ), ., isMatch, (, chars, ,, start, ,, start, ,, len, )]
[;, if, (, quoteLen, >, 0, ), {, return, readWithQuotes, (, chars, ,, start, +, quoteLen, ,, len, ,, workArea]
[., isMatch, (, chars, ,, start, ,, start, ,, len, ), ;, if, (, quoteLen, >, 0, ), {, return]
[,, start, ,, start, ,, len, ), ;, if, (, quoteLen, >, 0, ), {, return, readWithQuotes, (, chars, ,]
[,, start, ,, len, ), ;, if, (, quoteLen, >, 0, ), {, return, readWithQuotes, (, chars, ,, start, +]
[,, len, ), ;, if, (, quoteLen, >, 0, ), {, return, readWithQuotes, (, chars, ,, start, +, quoteLen, ,]
[), ;, if, (, quoteLen, >, 0, ), {, return, readWithQuotes, (, chars, ,, start, +, quoteLen, ,, len, ,]
[), {, return, readWithQuotes, (, chars, ,, start, +, quoteLen, ,, len, ,, workArea, ,, tokens, ,, start, ,, quoteLen]
[>, 0, ), {, return, readWithQuotes, (, chars, ,, start, +, quoteLen, ,, len, ,, workArea, ,, tokens, ,, start]
[), {, return, readWithQuotes, (, chars, ,, start, +, quoteLen, ,, len, ,, workArea, ,, tokens, ,, start, ,, quoteLen]
[;, }, return, readWithQuotes, (, chars, ,, start, ,, len, ,, workArea, ,, tokens, ,, 0, ,, 0, ), ;]
[,, start, +, quoteLen, ,, len, ,, workArea, ,, tokens, ,, start, ,, quoteLen, ), ;, }, return, readWithQuotes, (]
[,, len, ,, workArea, ,, tokens, ,, start, ,, quoteLen, ), ;, }, return, readWithQuotes, (, chars, ,, start, ,]
[+, quoteLen, ,, len, ,, workArea, ,, tokens, ,, start, ,, quoteLen, ), ;, }, return, readWithQuotes, (, chars, ,]
[,, len, ,, workArea, ,, tokens, ,, start, ,, quoteLen, ), ;, }, return, readWithQuotes, (, chars, ,, start, ,]
[,, workArea, ,, tokens, ,, start, ,, quoteLen, ), ;, }, return, readWithQuotes, (, chars, ,, start, ,, len, ,]
[,, tokens, ,, start, ,, quoteLen, ), ;, }, return, readWithQuotes, (, chars, ,, start, ,, len, ,, workArea, ,]
[,, start, ,, quoteLen, ), ;, }, return, readWithQuotes, (, chars, ,, start, ,, len, ,, workArea, ,, tokens, ,]
[,, quoteLen, ), ;, }, return, readWithQuotes, (, chars, ,, start, ,, len, ,, workArea, ,, tokens, ,, 0, ,]
[), ;, }, return, readWithQuotes, (, chars, ,, start, ,, len, ,, workArea, ,, tokens, ,, 0, ,, 0, )]
[;, }, private, int, readWithQuotes, (, final, char, [, ], chars, ,, final, int, start, ,, final, int, len, ,]
[,, start, ,, len, ,, workArea, ,, tokens, ,, 0, ,, 0, ), ;, }, private, int, readWithQuotes, (, final]
[,, len, ,, workArea, ,, tokens, ,, 0, ,, 0, ), ;, }, private, int, readWithQuotes, (, final, char, []
[,, workArea, ,, tokens, ,, 0, ,, 0, ), ;, }, private, int, readWithQuotes, (, final, char, [, ], chars]
[,, tokens, ,, 0, ,, 0, ), ;, }, private, int, readWithQuotes, (, final, char, [, ], chars, ,, final]
[,, 0, ,, 0, ), ;, }, private, int, readWithQuotes, (, final, char, [, ], chars, ,, final, int, start]
[,, 0, ), ;, }, private, int, readWithQuotes, (, final, char, [, ], chars, ,, final, int, start, ,, final]
[), ;, }, private, int, readWithQuotes, (, final, char, [, ], chars, ,, final, int, start, ,, final, int, len]
[;, int, pos, =, start, ;, boolean, quoting, =, quoteLen, >, 0, ;, int, trimStart, =, 0, ;, while, (]
[., clear, (, ), ;, int, pos, =, start, ;, boolean, quoting, =, quoteLen, >, 0, ;, int, trimStart, =]
[;, boolean, quoting, =, quoteLen, >, 0, ;, int, trimStart, =, 0, ;, while, (, pos, <, len, ), {]
[;, int, trimStart, =, 0, ;, while, (, pos, <, len, ), {, if, (, quoting, ), {, if, (]
[>, 0, ;, int, trimStart, =, 0, ;, while, (, pos, <, len, ), {, if, (, quoting, ), {]
[;, int, trimStart, =, 0, ;, while, (, pos, <, len, ), {, if, (, quoting, ), {, if, (]
[;, while, (, pos, <, len, ), {, if, (, quoting, ), {, if, (, isQuote, (, chars, ,, pos]
[), {, if, (, quoting, ), {, if, (, isQuote, (, chars, ,, pos, ,, len, ,, quoteStart, ,, quoteLen]
[<, len, ), {, if, (, quoting, ), {, if, (, isQuote, (, chars, ,, pos, ,, len, ,, quoteStart]
[), {, if, (, quoting, ), {, if, (, isQuote, (, chars, ,, pos, ,, len, ,, quoteStart, ,, quoteLen]
[), {, if, (, isQuote, (, chars, ,, pos, ,, len, ,, quoteStart, ,, quoteLen, ), ), {, if, (]
[), {, if, (, isQuote, (, chars, ,, pos, +, quoteLen, ,, len, ,, quoteStart, ,, quoteLen, ), ), {]
[,, pos, ,, len, ,, quoteStart, ,, quoteLen, ), ), {, if, (, isQuote, (, chars, ,, pos, +, quoteLen]
[,, len, ,, quoteStart, ,, quoteLen, ), ), {, if, (, isQuote, (, chars, ,, pos, +, quoteLen, ,, len]
[,, quoteStart, ,, quoteLen, ), ), {, if, (, isQuote, (, chars, ,, pos, +, quoteLen, ,, len, ,, quoteStart]
[,, quoteLen, ), ), {, if, (, isQuote, (, chars, ,, pos, +, quoteLen, ,, len, ,, quoteStart, ,, quoteLen]
[), ), {, if, (, isQuote, (, chars, ,, pos, +, quoteLen, ,, len, ,, quoteStart, ,, quoteLen, ), )]
[), {, workArea, ., append, (, chars, ,, pos, ,, quoteLen, ), ;, pos, +=, quoteLen, *, 2, ;, trimStart]
[,, pos, +, quoteLen, ,, len, ,, quoteStart, ,, quoteLen, ), ), {, workArea, ., append, (, chars, ,, pos]
[,, len, ,, quoteStart, ,, quoteLen, ), ), {, workArea, ., append, (, chars, ,, pos, ,, quoteLen, ), ;]
[+, quoteLen, ,, len, ,, quoteStart, ,, quoteLen, ), ), {, workArea, ., append, (, chars, ,, pos, ,, quoteLen]
[,, len, ,, quoteStart, ,, quoteLen, ), ), {, workArea, ., append, (, chars, ,, pos, ,, quoteLen, ), ;]
[,, quoteStart, ,, quoteLen, ), ), {, workArea, ., append, (, chars, ,, pos, ,, quoteLen, ), ;, pos, +=]
[,, quoteLen, ), ), {, workArea, ., append, (, chars, ,, pos, ,, quoteLen, ), ;, pos, +=, quoteLen, *]
[), ), {, workArea, ., append, (, chars, ,, pos, ,, quoteLen, ), ;, pos, +=, quoteLen, *, 2, ;]
[;, pos, +=, quoteLen, *, 2, ;, trimStart, =, workArea, ., size, (, ), ;, continue, ;, }, quoting, =]
[., append, (, chars, ,, pos, ,, quoteLen, ), ;, pos, +=, quoteLen, *, 2, ;, trimStart, =, workArea, .]
[,, pos, ,, quoteLen, ), ;, pos, +=, quoteLen, *, 2, ;, trimStart, =, workArea, ., size, (, ), ;]
[,, quoteLen, ), ;, pos, +=, quoteLen, *, 2, ;, trimStart, =, workArea, ., size, (, ), ;, continue, ;]
[), ;, pos, +=, quoteLen, *, 2, ;, trimStart, =, workArea, ., size, (, ), ;, continue, ;, }, quoting]
[+=, quoteLen, *, 2, ;, trimStart, =, workArea, ., size, (, ), ;, continue, ;, }, quoting, =, false, ;]
[;, trimStart, =, workArea, ., size, (, ), ;, continue, ;, }, quoting, =, false, ;, pos, +=, quoteLen, ;]
[*, 2, ;, trimStart, =, workArea, ., size, (, ), ;, continue, ;, }, quoting, =, false, ;, pos, +=]
[;, trimStart, =, workArea, ., size, (, ), ;, continue, ;, }, quoting, =, false, ;, pos, +=, quoteLen, ;]
[=, workArea, ., size, (, ), ;, continue, ;, }, quoting, =, false, ;, pos, +=, quoteLen, ;, continue, ;]
[;, continue, ;, }, quoting, =, false, ;, pos, +=, quoteLen, ;, continue, ;, }, workArea, ., append, (, chars]
[., size, (, ), ;, continue, ;, }, quoting, =, false, ;, pos, +=, quoteLen, ;, continue, ;, }, workArea]
[=, false, ;, pos, +=, quoteLen, ;, continue, ;, }, workArea, ., append, (, chars, [, pos, ++, ], )]
[;, pos, +=, quoteLen, ;, continue, ;, }, workArea, ., append, (, chars, [, pos, ++, ], ), ;, trimStart]
[+=, quoteLen, ;, continue, ;, }, workArea, ., append, (, chars, [, pos, ++, ], ), ;, trimStart, =, workArea]
[;, continue, ;, }, workArea, ., append, (, chars, [, pos, ++, ], ), ;, trimStart, =, workArea, ., size]
[;, trimStart, =, workArea, ., size, (, ), ;, }, else, {, final, int, delimLen, =, getDelimiterMatcher, (, ), .]
[., append, (, chars, [, pos, ++, ], ), ;, trimStart, =, workArea, ., size, (, ), ;, }, else]
[), ;, trimStart, =, workArea, ., size, (, ), ;, }, else, {, final, int, delimLen, =, getDelimiterMatcher, (, )]
[[, pos, ++, ], ), ;, trimStart, =, workArea, ., size, (, ), ;, }, else, {, final, int, delimLen]
[], ), ;, trimStart, =, workArea, ., size, (, ), ;, }, else, {, final, int, delimLen, =, getDelimiterMatcher, (]
[++, ], ), ;, trimStart, =, workArea, ., size, (, ), ;, }, else, {, final, int, delimLen, =, getDelimiterMatcher]
[=, workArea, ., size, (, ), ;, }, else, {, final, int, delimLen, =, getDelimiterMatcher, (, ), ., isMatch, (]
[;, }, else, {, final, int, delimLen, =, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,, pos, ,, start, ,]
[., size, (, ), ;, }, else, {, final, int, delimLen, =, getDelimiterMatcher, (, ), ., isMatch, (, chars, ,]
[;, if, (, delimLen, >, 0, ), {, addToken, (, tokens, ,, workArea, ., substring, (, 0, ,, trimStart, )]
[., isMatch, (, chars, ,, pos, ,, start, ,, len, ), ;, if, (, delimLen, >, 0, ), {, addToken]
[,, pos, ,, start, ,, len, ), ;, if, (, delimLen, >, 0, ), {, addToken, (, tokens, ,, workArea]
[,, start, ,, len, ), ;, if, (, delimLen, >, 0, ), {, addToken, (, tokens, ,, workArea, ., substring]
[,, len, ), ;, if, (, delimLen, >, 0, ), {, addToken, (, tokens, ,, workArea, ., substring, (, 0]
[), ;, if, (, delimLen, >, 0, ), {, addToken, (, tokens, ,, workArea, ., substring, (, 0, ,, trimStart]
[), {, addToken, (, tokens, ,, workArea, ., substring, (, 0, ,, trimStart, ), ), ;, return, pos, +, delimLen]
[>, 0, ), {, addToken, (, tokens, ,, workArea, ., substring, (, 0, ,, trimStart, ), ), ;, return, pos]
[), {, addToken, (, tokens, ,, workArea, ., substring, (, 0, ,, trimStart, ), ), ;, return, pos, +, delimLen]
[;, return, pos, +, delimLen, ;, }, if, (, quoteLen, >, 0, &&, isQuote, (, chars, ,, pos, ,, len]
[,, workArea, ., substring, (, 0, ,, trimStart, ), ), ;, return, pos, +, delimLen, ;, }, if, (, quoteLen]
[), ;, return, pos, +, delimLen, ;, }, if, (, quoteLen, >, 0, &&, isQuote, (, chars, ,, pos, ,]
[., substring, (, 0, ,, trimStart, ), ), ;, return, pos, +, delimLen, ;, }, if, (, quoteLen, >, 0]
[,, trimStart, ), ), ;, return, pos, +, delimLen, ;, }, if, (, quoteLen, >, 0, &&, isQuote, (, chars]
[), ), ;, return, pos, +, delimLen, ;, }, if, (, quoteLen, >, 0, &&, isQuote, (, chars, ,, pos]
[;, }, if, (, quoteLen, >, 0, &&, isQuote, (, chars, ,, pos, ,, len, ,, quoteStart, ,, quoteLen, )]
[+, delimLen, ;, }, if, (, quoteLen, >, 0, &&, isQuote, (, chars, ,, pos, ,, len, ,, quoteStart, ,]
[;, }, if, (, quoteLen, >, 0, &&, isQuote, (, chars, ,, pos, ,, len, ,, quoteStart, ,, quoteLen, )]
[), {, quoting, =, true, ;, pos, +=, quoteLen, ;, continue, ;, }, final, int, ignoredLen, =, getIgnoredMatcher, (, )]
[&&, isQuote, (, chars, ,, pos, ,, len, ,, quoteStart, ,, quoteLen, ), ), {, quoting, =, true, ;, pos]
[>, 0, &&, isQuote, (, chars, ,, pos, ,, len, ,, quoteStart, ,, quoteLen, ), ), {, quoting, =, true]
[&&, isQuote, (, chars, ,, pos, ,, len, ,, quoteStart, ,, quoteLen, ), ), {, quoting, =, true, ;, pos]
[), {, quoting, =, true, ;, pos, +=, quoteLen, ;, continue, ;, }, final, int, ignoredLen, =, getIgnoredMatcher, (, )]
[,, pos, ,, len, ,, quoteStart, ,, quoteLen, ), ), {, quoting, =, true, ;, pos, +=, quoteLen, ;, continue]
[,, len, ,, quoteStart, ,, quoteLen, ), ), {, quoting, =, true, ;, pos, +=, quoteLen, ;, continue, ;, }]
[,, quoteStart, ,, quoteLen, ), ), {, quoting, =, true, ;, pos, +=, quoteLen, ;, continue, ;, }, final, int]
[,, quoteLen, ), ), {, quoting, =, true, ;, pos, +=, quoteLen, ;, continue, ;, }, final, int, ignoredLen, =]
[), ), {, quoting, =, true, ;, pos, +=, quoteLen, ;, continue, ;, }, final, int, ignoredLen, =, getIgnoredMatcher, (]
[=, true, ;, pos, +=, quoteLen, ;, continue, ;, }, final, int, ignoredLen, =, getIgnoredMatcher, (, ), ., isMatch, (]
[;, pos, +=, quoteLen, ;, continue, ;, }, final, int, ignoredLen, =, getIgnoredMatcher, (, ), ., isMatch, (, chars, ,]
[+=, quoteLen, ;, continue, ;, }, final, int, ignoredLen, =, getIgnoredMatcher, (, ), ., isMatch, (, chars, ,, pos, ,]
[;, continue, ;, }, final, int, ignoredLen, =, getIgnoredMatcher, (, ), ., isMatch, (, chars, ,, pos, ,, start, ,]
[;, if, (, ignoredLen, >, 0, ), {, pos, +=, ignoredLen, ;, continue, ;, }, final, int, trimmedLen, =, getTrimmerMatcher]
[., isMatch, (, chars, ,, pos, ,, start, ,, len, ), ;, if, (, ignoredLen, >, 0, ), {, pos]
[,, pos, ,, start, ,, len, ), ;, if, (, ignoredLen, >, 0, ), {, pos, +=, ignoredLen, ;, continue]
[,, start, ,, len, ), ;, if, (, ignoredLen, >, 0, ), {, pos, +=, ignoredLen, ;, continue, ;, }]
[,, len, ), ;, if, (, ignoredLen, >, 0, ), {, pos, +=, ignoredLen, ;, continue, ;, }, final, int]
[), ;, if, (, ignoredLen, >, 0, ), {, pos, +=, ignoredLen, ;, continue, ;, }, final, int, trimmedLen, =]
[), {, pos, +=, ignoredLen, ;, continue, ;, }, final, int, trimmedLen, =, getTrimmerMatcher, (, ), ., isMatch, (, chars]
[>, 0, ), {, pos, +=, ignoredLen, ;, continue, ;, }, final, int, trimmedLen, =, getTrimmerMatcher, (, ), ., isMatch]
[), {, pos, +=, ignoredLen, ;, continue, ;, }, final, int, trimmedLen, =, getTrimmerMatcher, (, ), ., isMatch, (, chars]
[+=, ignoredLen, ;, continue, ;, }, final, int, trimmedLen, =, getTrimmerMatcher, (, ), ., isMatch, (, chars, ,, pos, ,]
[;, continue, ;, }, final, int, trimmedLen, =, getTrimmerMatcher, (, ), ., isMatch, (, chars, ,, pos, ,, start, ,]
[;, if, (, trimmedLen, >, 0, ), {, workArea, ., append, (, chars, ,, pos, ,, trimmedLen, ), ;, pos]
[., isMatch, (, chars, ,, pos, ,, start, ,, len, ), ;, if, (, trimmedLen, >, 0, ), {, workArea]
[,, pos, ,, start, ,, len, ), ;, if, (, trimmedLen, >, 0, ), {, workArea, ., append, (, chars]
[,, start, ,, len, ), ;, if, (, trimmedLen, >, 0, ), {, workArea, ., append, (, chars, ,, pos]
[,, len, ), ;, if, (, trimmedLen, >, 0, ), {, workArea, ., append, (, chars, ,, pos, ,, trimmedLen]
[), ;, if, (, trimmedLen, >, 0, ), {, workArea, ., append, (, chars, ,, pos, ,, trimmedLen, ), ;]
[), {, workArea, ., append, (, chars, ,, pos, ,, trimmedLen, ), ;, pos, +=, trimmedLen, ;, continue, ;, }]
[>, 0, ), {, workArea, ., append, (, chars, ,, pos, ,, trimmedLen, ), ;, pos, +=, trimmedLen, ;, continue]
[), {, workArea, ., append, (, chars, ,, pos, ,, trimmedLen, ), ;, pos, +=, trimmedLen, ;, continue, ;, }]
[;, pos, +=, trimmedLen, ;, continue, ;, }, workArea, ., append, (, chars, [, pos, ++, ], ), ;, trimStart]
[., append, (, chars, ,, pos, ,, trimmedLen, ), ;, pos, +=, trimmedLen, ;, continue, ;, }, workArea, ., append]
[,, pos, ,, trimmedLen, ), ;, pos, +=, trimmedLen, ;, continue, ;, }, workArea, ., append, (, chars, [, pos]
[,, trimmedLen, ), ;, pos, +=, trimmedLen, ;, continue, ;, }, workArea, ., append, (, chars, [, pos, ++, ]]
[), ;, pos, +=, trimmedLen, ;, continue, ;, }, workArea, ., append, (, chars, [, pos, ++, ], ), ;]
[+=, trimmedLen, ;, continue, ;, }, workArea, ., append, (, chars, [, pos, ++, ], ), ;, trimStart, =, workArea]
[;, continue, ;, }, workArea, ., append, (, chars, [, pos, ++, ], ), ;, trimStart, =, workArea, ., size]
[;, trimStart, =, workArea, ., size, (, ), ;, }, }, addToken, (, tokens, ,, workArea, ., substring, (, 0]
[., append, (, chars, [, pos, ++, ], ), ;, trimStart, =, workArea, ., size, (, ), ;, }, }]
[), ;, trimStart, =, workArea, ., size, (, ), ;, }, }, addToken, (, tokens, ,, workArea, ., substring, (]
[[, pos, ++, ], ), ;, trimStart, =, workArea, ., size, (, ), ;, }, }, addToken, (, tokens, ,]
[], ), ;, trimStart, =, workArea, ., size, (, ), ;, }, }, addToken, (, tokens, ,, workArea, ., substring]
[++, ], ), ;, trimStart, =, workArea, ., size, (, ), ;, }, }, addToken, (, tokens, ,, workArea, .]
[=, workArea, ., size, (, ), ;, }, }, addToken, (, tokens, ,, workArea, ., substring, (, 0, ,, trimStart]
[;, }, }, addToken, (, tokens, ,, workArea, ., substring, (, 0, ,, trimStart, ), ), ;, return, -, 1]
[., size, (, ), ;, }, }, addToken, (, tokens, ,, workArea, ., substring, (, 0, ,, trimStart, ), )]
[;, return, -, 1, ;, }, private, boolean, isQuote, (, final, char, [, ], chars, ,, final, int, pos, ,]
[,, workArea, ., substring, (, 0, ,, trimStart, ), ), ;, return, -, 1, ;, }, private, boolean, isQuote, (]
[), ;, return, -, 1, ;, }, private, boolean, isQuote, (, final, char, [, ], chars, ,, final, int, pos]
[., substring, (, 0, ,, trimStart, ), ), ;, return, -, 1, ;, }, private, boolean, isQuote, (, final, char]
[,, trimStart, ), ), ;, return, -, 1, ;, }, private, boolean, isQuote, (, final, char, [, ], chars, ,]
[), ), ;, return, -, 1, ;, }, private, boolean, isQuote, (, final, char, [, ], chars, ,, final, int]
[;, }, private, boolean, isQuote, (, final, char, [, ], chars, ,, final, int, pos, ,, final, int, len, ,]
[;, }, private, boolean, isQuote, (, final, char, [, ], chars, ,, final, int, pos, ,, final, int, len, ,]
[;, i, <, quoteLen, ;, i, ++, ), {, if, (, pos, +, i, >=, len, ||, chars, [, pos]
[;, i, ++, ), {, if, (, pos, +, i, >=, len, ||, chars, [, pos, +, i, ], !=]
[<, quoteLen, ;, i, ++, ), {, if, (, pos, +, i, >=, len, ||, chars, [, pos, +, i]
[;, i, ++, ), {, if, (, pos, +, i, >=, len, ||, chars, [, pos, +, i, ], !=]
[), {, if, (, pos, +, i, >=, len, ||, chars, [, pos, +, i, ], !=, chars, [, quoteStart]
[++, ), {, if, (, pos, +, i, >=, len, ||, chars, [, pos, +, i, ], !=, chars, []
[), {, return, false, ;, }, }, return, true, ;, }, public, StrMatcher, getDelimiterMatcher, (, ), {, return, this, .]
[||, chars, [, pos, +, i, ], !=, chars, [, quoteStart, +, i, ], ), {, return, false, ;, }]
[>=, len, ||, chars, [, pos, +, i, ], !=, chars, [, quoteStart, +, i, ], ), {, return, false]
[+, i, >=, len, ||, chars, [, pos, +, i, ], !=, chars, [, quoteStart, +, i, ], ), {]
[>=, len, ||, chars, [, pos, +, i, ], !=, chars, [, quoteStart, +, i, ], ), {, return, false]
[||, chars, [, pos, +, i, ], !=, chars, [, quoteStart, +, i, ], ), {, return, false, ;, }]
[), {, return, false, ;, }, }, return, true, ;, }, public, StrMatcher, getDelimiterMatcher, (, ), {, return, this, .]
[!=, chars, [, quoteStart, +, i, ], ), {, return, false, ;, }, }, return, true, ;, }, public, StrMatcher]
[[, pos, +, i, ], !=, chars, [, quoteStart, +, i, ], ), {, return, false, ;, }, }, return]
[], !=, chars, [, quoteStart, +, i, ], ), {, return, false, ;, }, }, return, true, ;, }, public]
[+, i, ], !=, chars, [, quoteStart, +, i, ], ), {, return, false, ;, }, }, return, true, ;]
[], !=, chars, [, quoteStart, +, i, ], ), {, return, false, ;, }, }, return, true, ;, }, public]
[), {, return, false, ;, }, }, return, true, ;, }, public, StrMatcher, getDelimiterMatcher, (, ), {, return, this, .]
[[, quoteStart, +, i, ], ), {, return, false, ;, }, }, return, true, ;, }, public, StrMatcher, getDelimiterMatcher, (]
[], ), {, return, false, ;, }, }, return, true, ;, }, public, StrMatcher, getDelimiterMatcher, (, ), {, return, this]
[+, i, ], ), {, return, false, ;, }, }, return, true, ;, }, public, StrMatcher, getDelimiterMatcher, (, ), {]
[], ), {, return, false, ;, }, }, return, true, ;, }, public, StrMatcher, getDelimiterMatcher, (, ), {, return, this]
[;, }, }, return, true, ;, }, public, StrMatcher, getDelimiterMatcher, (, ), {, return, this, ., delimMatcher, ;, }, public]
[;, }, public, StrMatcher, getDelimiterMatcher, (, ), {, return, this, ., delimMatcher, ;, }, public, StrTokenizer, setDelimiterMatcher, (, final, StrMatcher]
[;, }, public, StrTokenizer, setDelimiterMatcher, (, final, StrMatcher, delim, ), {, if, (, delim, ==, null, ), {, this, .]
[., delimMatcher, ;, }, public, StrTokenizer, setDelimiterMatcher, (, final, StrMatcher, delim, ), {, if, (, delim, ==, null, ), {]
[), {, this, ., delimMatcher, =, StrMatcher, ., noneMatcher, (, ), ;, }, else, {, this, ., delimMatcher, =, delim]
[==, null, ), {, this, ., delimMatcher, =, StrMatcher, ., noneMatcher, (, ), ;, }, else, {, this, ., delimMatcher]
[), {, this, ., delimMatcher, =, StrMatcher, ., noneMatcher, (, ), ;, }, else, {, this, ., delimMatcher, =, delim]
[=, StrMatcher, ., noneMatcher, (, ), ;, }, else, {, this, ., delimMatcher, =, delim, ;, }, return, this, ;]
[., delimMatcher, =, StrMatcher, ., noneMatcher, (, ), ;, }, else, {, this, ., delimMatcher, =, delim, ;, }, return]
[;, }, else, {, this, ., delimMatcher, =, delim, ;, }, return, this, ;, }, public, StrTokenizer, setDelimiterChar, (, final]
[., noneMatcher, (, ), ;, }, else, {, this, ., delimMatcher, =, delim, ;, }, return, this, ;, }, public]
[=, delim, ;, }, return, this, ;, }, public, StrTokenizer, setDelimiterChar, (, final, char, delim, ), {, return, setDelimiterMatcher, (]
[., delimMatcher, =, delim, ;, }, return, this, ;, }, public, StrTokenizer, setDelimiterChar, (, final, char, delim, ), {, return]
[;, }, return, this, ;, }, public, StrTokenizer, setDelimiterChar, (, final, char, delim, ), {, return, setDelimiterMatcher, (, StrMatcher, .]
[;, }, public, StrTokenizer, setDelimiterChar, (, final, char, delim, ), {, return, setDelimiterMatcher, (, StrMatcher, ., charMatcher, (, delim, )]
[;, }, public, StrTokenizer, setDelimiterString, (, final, String, delim, ), {, return, setDelimiterMatcher, (, StrMatcher, ., stringMatcher, (, delim, )]
[), ;, }, public, StrTokenizer, setDelimiterString, (, final, String, delim, ), {, return, setDelimiterMatcher, (, StrMatcher, ., stringMatcher, (, delim]
[., charMatcher, (, delim, ), ), ;, }, public, StrTokenizer, setDelimiterString, (, final, String, delim, ), {, return, setDelimiterMatcher, (]
[), ), ;, }, public, StrTokenizer, setDelimiterString, (, final, String, delim, ), {, return, setDelimiterMatcher, (, StrMatcher, ., stringMatcher, (]
[;, }, public, StrMatcher, getQuoteMatcher, (, ), {, return, quoteMatcher, ;, }, public, StrTokenizer, setQuoteMatcher, (, final, StrMatcher, quote, )]
[), ;, }, public, StrMatcher, getQuoteMatcher, (, ), {, return, quoteMatcher, ;, }, public, StrTokenizer, setQuoteMatcher, (, final, StrMatcher, quote]
[., stringMatcher, (, delim, ), ), ;, }, public, StrMatcher, getQuoteMatcher, (, ), {, return, quoteMatcher, ;, }, public, StrTokenizer]
[), ), ;, }, public, StrMatcher, getQuoteMatcher, (, ), {, return, quoteMatcher, ;, }, public, StrTokenizer, setQuoteMatcher, (, final, StrMatcher]
[;, }, public, StrTokenizer, setQuoteMatcher, (, final, StrMatcher, quote, ), {, if, (, quote, !=, null, ), {, this, .]
[), {, this, ., quoteMatcher, =, quote, ;, }, return, this, ;, }, public, StrTokenizer, setQuoteChar, (, final, char, quote]
[!=, null, ), {, this, ., quoteMatcher, =, quote, ;, }, return, this, ;, }, public, StrTokenizer, setQuoteChar, (, final]
[), {, this, ., quoteMatcher, =, quote, ;, }, return, this, ;, }, public, StrTokenizer, setQuoteChar, (, final, char, quote]
[=, quote, ;, }, return, this, ;, }, public, StrTokenizer, setQuoteChar, (, final, char, quote, ), {, return, setQuoteMatcher, (]
[., quoteMatcher, =, quote, ;, }, return, this, ;, }, public, StrTokenizer, setQuoteChar, (, final, char, quote, ), {, return]
[;, }, return, this, ;, }, public, StrTokenizer, setQuoteChar, (, final, char, quote, ), {, return, setQuoteMatcher, (, StrMatcher, .]
[;, }, public, StrTokenizer, setQuoteChar, (, final, char, quote, ), {, return, setQuoteMatcher, (, StrMatcher, ., charMatcher, (, quote, )]
[;, }, public, StrMatcher, getIgnoredMatcher, (, ), {, return, ignoredMatcher, ;, }, public, StrTokenizer, setIgnoredMatcher, (, final, StrMatcher, ignored, )]
[), ;, }, public, StrMatcher, getIgnoredMatcher, (, ), {, return, ignoredMatcher, ;, }, public, StrTokenizer, setIgnoredMatcher, (, final, StrMatcher, ignored]
[., charMatcher, (, quote, ), ), ;, }, public, StrMatcher, getIgnoredMatcher, (, ), {, return, ignoredMatcher, ;, }, public, StrTokenizer]
[), ), ;, }, public, StrMatcher, getIgnoredMatcher, (, ), {, return, ignoredMatcher, ;, }, public, StrTokenizer, setIgnoredMatcher, (, final, StrMatcher]
[;, }, public, StrTokenizer, setIgnoredMatcher, (, final, StrMatcher, ignored, ), {, if, (, ignored, !=, null, ), {, this, .]
[), {, this, ., ignoredMatcher, =, ignored, ;, }, return, this, ;, }, public, StrTokenizer, setIgnoredChar, (, final, char, ignored]
[!=, null, ), {, this, ., ignoredMatcher, =, ignored, ;, }, return, this, ;, }, public, StrTokenizer, setIgnoredChar, (, final]
[), {, this, ., ignoredMatcher, =, ignored, ;, }, return, this, ;, }, public, StrTokenizer, setIgnoredChar, (, final, char, ignored]
[=, ignored, ;, }, return, this, ;, }, public, StrTokenizer, setIgnoredChar, (, final, char, ignored, ), {, return, setIgnoredMatcher, (]
[., ignoredMatcher, =, ignored, ;, }, return, this, ;, }, public, StrTokenizer, setIgnoredChar, (, final, char, ignored, ), {, return]
[;, }, return, this, ;, }, public, StrTokenizer, setIgnoredChar, (, final, char, ignored, ), {, return, setIgnoredMatcher, (, StrMatcher, .]
[;, }, public, StrTokenizer, setIgnoredChar, (, final, char, ignored, ), {, return, setIgnoredMatcher, (, StrMatcher, ., charMatcher, (, ignored, )]
[;, }, public, StrMatcher, getTrimmerMatcher, (, ), {, return, trimmerMatcher, ;, }, public, StrTokenizer, setTrimmerMatcher, (, final, StrMatcher, trimmer, )]
[), ;, }, public, StrMatcher, getTrimmerMatcher, (, ), {, return, trimmerMatcher, ;, }, public, StrTokenizer, setTrimmerMatcher, (, final, StrMatcher, trimmer]
[., charMatcher, (, ignored, ), ), ;, }, public, StrMatcher, getTrimmerMatcher, (, ), {, return, trimmerMatcher, ;, }, public, StrTokenizer]
[), ), ;, }, public, StrMatcher, getTrimmerMatcher, (, ), {, return, trimmerMatcher, ;, }, public, StrTokenizer, setTrimmerMatcher, (, final, StrMatcher]
[;, }, public, StrTokenizer, setTrimmerMatcher, (, final, StrMatcher, trimmer, ), {, if, (, trimmer, !=, null, ), {, this, .]
[), {, this, ., trimmerMatcher, =, trimmer, ;, }, return, this, ;, }, public, boolean, isEmptyTokenAsNull, (, ), {, return]
[!=, null, ), {, this, ., trimmerMatcher, =, trimmer, ;, }, return, this, ;, }, public, boolean, isEmptyTokenAsNull, (, )]
[), {, this, ., trimmerMatcher, =, trimmer, ;, }, return, this, ;, }, public, boolean, isEmptyTokenAsNull, (, ), {, return]
[=, trimmer, ;, }, return, this, ;, }, public, boolean, isEmptyTokenAsNull, (, ), {, return, this, ., emptyAsNull, ;, }]
[., trimmerMatcher, =, trimmer, ;, }, return, this, ;, }, public, boolean, isEmptyTokenAsNull, (, ), {, return, this, ., emptyAsNull]
[;, }, return, this, ;, }, public, boolean, isEmptyTokenAsNull, (, ), {, return, this, ., emptyAsNull, ;, }, public, StrTokenizer]
[;, }, public, boolean, isEmptyTokenAsNull, (, ), {, return, this, ., emptyAsNull, ;, }, public, StrTokenizer, setEmptyTokenAsNull, (, final, boolean]
[;, }, public, StrTokenizer, setEmptyTokenAsNull, (, final, boolean, emptyAsNull, ), {, this, ., emptyAsNull, =, emptyAsNull, ;, return, this, ;]
[., emptyAsNull, ;, }, public, StrTokenizer, setEmptyTokenAsNull, (, final, boolean, emptyAsNull, ), {, this, ., emptyAsNull, =, emptyAsNull, ;, return]
[=, emptyAsNull, ;, return, this, ;, }, public, boolean, isIgnoreEmptyTokens, (, ), {, return, ignoreEmptyTokens, ;, }, public, StrTokenizer, setIgnoreEmptyTokens]
[., emptyAsNull, =, emptyAsNull, ;, return, this, ;, }, public, boolean, isIgnoreEmptyTokens, (, ), {, return, ignoreEmptyTokens, ;, }, public]
[;, return, this, ;, }, public, boolean, isIgnoreEmptyTokens, (, ), {, return, ignoreEmptyTokens, ;, }, public, StrTokenizer, setIgnoreEmptyTokens, (, final]
[;, }, public, boolean, isIgnoreEmptyTokens, (, ), {, return, ignoreEmptyTokens, ;, }, public, StrTokenizer, setIgnoreEmptyTokens, (, final, boolean, ignoreEmptyTokens, )]
[;, }, public, StrTokenizer, setIgnoreEmptyTokens, (, final, boolean, ignoreEmptyTokens, ), {, this, ., ignoreEmptyTokens, =, ignoreEmptyTokens, ;, return, this, ;]
[=, ignoreEmptyTokens, ;, return, this, ;, }, public, String, getContent, (, ), {, if, (, chars, ==, null, ), {]
[., ignoreEmptyTokens, =, ignoreEmptyTokens, ;, return, this, ;, }, public, String, getContent, (, ), {, if, (, chars, ==, null]
[;, return, this, ;, }, public, String, getContent, (, ), {, if, (, chars, ==, null, ), {, return, null]
[;, }, public, String, getContent, (, ), {, if, (, chars, ==, null, ), {, return, null, ;, }, return]
[), {, return, null, ;, }, return, new, String, (, chars, ), ;, }, @, Override, public, Object, clone, (]
[==, null, ), {, return, null, ;, }, return, new, String, (, chars, ), ;, }, @, Override, public, Object]
[), {, return, null, ;, }, return, new, String, (, chars, ), ;, }, @, Override, public, Object, clone, (]
[;, }, return, new, String, (, chars, ), ;, }, @, Override, public, Object, clone, (, ), {, try, {]
[;, }, @, Override, public, Object, clone, (, ), {, try, {, return, cloneReset, (, ), ;, }, catch, (]
[), ;, }, @, Override, public, Object, clone, (, ), {, try, {, return, cloneReset, (, ), ;, }, catch]
[;, }, catch, (, final, CloneNotSupportedException, ex, ), {, return, null, ;, }, }, Object, cloneReset, (, ), throws, CloneNotSupportedException]
[;, }, }, Object, cloneReset, (, ), throws, CloneNotSupportedException, {, final, StrTokenizer, cloned, =, (, StrTokenizer, ), super, ., clone]
[;, if, (, cloned, ., chars, !=, null, ), {, cloned, ., chars, =, cloned, ., chars, ., clone, (]
[;, if, (, cloned, ., chars, !=, null, ), {, cloned, ., chars, =, cloned, ., chars, ., clone, (]
[., clone, (, ), ;, if, (, cloned, ., chars, !=, null, ), {, cloned, ., chars, =, cloned, .]
[), {, cloned, ., chars, =, cloned, ., chars, ., clone, (, ), ;, }, cloned, ., reset, (, )]
[!=, null, ), {, cloned, ., chars, =, cloned, ., chars, ., clone, (, ), ;, }, cloned, ., reset]
[., chars, !=, null, ), {, cloned, ., chars, =, cloned, ., chars, ., clone, (, ), ;, }, cloned]
[), {, cloned, ., chars, =, cloned, ., chars, ., clone, (, ), ;, }, cloned, ., reset, (, )]
[=, cloned, ., chars, ., clone, (, ), ;, }, cloned, ., reset, (, ), ;, return, cloned, ;, }]
[., chars, =, cloned, ., chars, ., clone, (, ), ;, }, cloned, ., reset, (, ), ;, return, cloned]
[;, }, cloned, ., reset, (, ), ;, return, cloned, ;, }, @, Override, public, String, toString, (, ), {]
[., clone, (, ), ;, }, cloned, ., reset, (, ), ;, return, cloned, ;, }, @, Override, public, String]
[., chars, ., clone, (, ), ;, }, cloned, ., reset, (, ), ;, return, cloned, ;, }, @, Override]
[;, return, cloned, ;, }, @, Override, public, String, toString, (, ), {, if, (, tokens, ==, null, ), {]
[., reset, (, ), ;, return, cloned, ;, }, @, Override, public, String, toString, (, ), {, if, (, tokens]
[;, }, @, Override, public, String, toString, (, ), {, if, (, tokens, ==, null, ), {, return, "StrTokenizer[not tokenized yet]", ;]
[), {, return, "StrTokenizer[not tokenized yet]", ;, }, return, "StrTokenizer", +, getTokenList, (, ), ;, }, }]
[==, null, ), {, return, "StrTokenizer[not tokenized yet]", ;, }, return, "StrTokenizer", +, getTokenList, (, ), ;, }, }]
[), {, return, "StrTokenizer[not tokenized yet]", ;, }, return, "StrTokenizer", +, getTokenList, (, ), ;, }, }]
[;, }, return, "StrTokenizer", +, getTokenList, (, ), ;, }, }]
[;, }, }]
[+, getTokenList, (, ), ;, }, }]
[;, }, }]
