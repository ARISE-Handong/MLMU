[;, private, static, final, long, serialVersionUID, =, 20130424, ;, private, final, double, scale, ;, private, final, double, shape, ;, private]
[;, private, final, double, scale, ;, private, final, double, shape, ;, private, final, double, solverAbsoluteAccuracy, ;, public, ParetoDistribution, (, )]
[,, 1, ), ;, }, public, ParetoDistribution, (, double, scale, ,, double, shape, ), throws, NotStrictlyPositiveException, {, this, (, scale]
[), ;, }, public, ParetoDistribution, (, double, scale, ,, double, shape, ), throws, NotStrictlyPositiveException, {, this, (, scale, ,, shape]
[,, shape, ,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, ParetoDistribution, (, double, scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws]
[,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, ParetoDistribution, (, double, scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {]
[), ;, }, public, ParetoDistribution, (, double, scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (]
[,, scale, ,, shape, ,, inverseCumAccuracy, ), ;, }, public, ParetoDistribution, (, RandomGenerator, rng, ,, double, scale, ,, double, shape]
[,, shape, ,, inverseCumAccuracy, ), ;, }, public, ParetoDistribution, (, RandomGenerator, rng, ,, double, scale, ,, double, shape, ,, double]
[,, inverseCumAccuracy, ), ;, }, public, ParetoDistribution, (, RandomGenerator, rng, ,, double, scale, ,, double, shape, ,, double, inverseCumAccuracy, )]
[), ;, }, public, ParetoDistribution, (, RandomGenerator, rng, ,, double, scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException]
[), ;, if, (, scale, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, if, (, shape, <=, 0, )]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, if, (, shape, <=]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, if, (, shape, <=, 0, )]
[;, }, if, (, shape, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;]
[,, scale, ), ;, }, if, (, shape, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,]
[., SCALE, ,, scale, ), ;, }, if, (, shape, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, .]
[), ;, }, if, (, shape, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, )]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, this, ., scale, =, scale, ;]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, this, ., scale, =]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, this, ., scale, =, scale, ;]
[;, }, this, ., scale, =, scale, ;, this, ., shape, =, shape, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;]
[,, shape, ), ;, }, this, ., scale, =, scale, ;, this, ., shape, =, shape, ;, this, ., solverAbsoluteAccuracy]
[., SHAPE, ,, shape, ), ;, }, this, ., scale, =, scale, ;, this, ., shape, =, shape, ;, this]
[), ;, }, this, ., scale, =, scale, ;, this, ., shape, =, shape, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy]
[=, scale, ;, this, ., shape, =, shape, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getScale, (]
[., scale, =, scale, ;, this, ., shape, =, shape, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double]
[;, this, ., shape, =, shape, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getScale, (, ), {]
[=, shape, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getScale, (, ), {, return, scale, ;, }]
[., shape, =, shape, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getScale, (, ), {, return, scale]
[;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getScale, (, ), {, return, scale, ;, }, public, double]
[=, inverseCumAccuracy, ;, }, public, double, getScale, (, ), {, return, scale, ;, }, public, double, getShape, (, ), {]
[., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getScale, (, ), {, return, scale, ;, }, public, double, getShape, (]
[;, }, public, double, getScale, (, ), {, return, scale, ;, }, public, double, getShape, (, ), {, return, shape]
[;, }, public, double, getShape, (, ), {, return, shape, ;, }, public, double, density, (, double, x, ), {]
[;, }, public, double, density, (, double, x, ), {, if, (, x, <, scale, ), {, return, 0, ;]
[), {, return, 0, ;, }, return, FastMath, ., pow, (, scale, ,, shape, ), /, FastMath, ., pow, (]
[<, scale, ), {, return, 0, ;, }, return, FastMath, ., pow, (, scale, ,, shape, ), /, FastMath, .]
[), {, return, 0, ;, }, return, FastMath, ., pow, (, scale, ,, shape, ), /, FastMath, ., pow, (]
[;, }, return, FastMath, ., pow, (, scale, ,, shape, ), /, FastMath, ., pow, (, x, ,, shape, +]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, scale, ), {, return, 0, ;]
[*, shape, ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, scale, ), {, return]
[/, FastMath, ., pow, (, x, ,, shape, +, 1, ), *, shape, ;, }, public, double, cumulativeProbability, (, double]
[., pow, (, scale, ,, shape, ), /, FastMath, ., pow, (, x, ,, shape, +, 1, ), *, shape]
[,, shape, ), /, FastMath, ., pow, (, x, ,, shape, +, 1, ), *, shape, ;, }, public, double]
[), /, FastMath, ., pow, (, x, ,, shape, +, 1, ), *, shape, ;, }, public, double, cumulativeProbability, (]
[*, shape, ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, scale, ), {, return]
[., pow, (, x, ,, shape, +, 1, ), *, shape, ;, }, public, double, cumulativeProbability, (, double, x, )]
[,, shape, +, 1, ), *, shape, ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x]
[), *, shape, ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, scale, ), {]
[+, 1, ), *, shape, ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, scale]
[), *, shape, ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, scale, ), {]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, scale, ), {, return, 0, ;]
[), {, return, 0, ;, }, return, 1, -, FastMath, ., pow, (, scale, /, x, ,, shape, ), ;]
[<=, scale, ), {, return, 0, ;, }, return, 1, -, FastMath, ., pow, (, scale, /, x, ,, shape]
[), {, return, 0, ;, }, return, 1, -, FastMath, ., pow, (, scale, /, x, ,, shape, ), ;]
[;, }, return, 1, -, FastMath, ., pow, (, scale, /, x, ,, shape, ), ;, }, @, Override, @]
[;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return]
[-, FastMath, ., pow, (, scale, /, x, ,, shape, ), ;, }, @, Override, @, Deprecated, public, double, cumulativeProbability]
[;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return]
[., pow, (, scale, /, x, ,, shape, ), ;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double]
[,, shape, ), ;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws]
[/, x, ,, shape, ), ;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1]
[,, shape, ), ;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws]
[), ;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {]
[;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {]
[,, x1, ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean]
[), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, )]
[;, }, public, double, getNumericalMean, (, ), {, if, (, shape, <=, 1, ), {, return, Double, ., POSITIVE_INFINITY, ;]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, shape, *, scale, /, (, shape, -, 1, ), ;, }]
[<=, 1, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, shape, *, scale, /, (, shape, -, 1, )]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, shape, *, scale, /, (, shape, -, 1, ), ;, }]
[;, }, return, shape, *, scale, /, (, shape, -, 1, ), ;, }, public, double, getNumericalVariance, (, ), {]
[., POSITIVE_INFINITY, ;, }, return, shape, *, scale, /, (, shape, -, 1, ), ;, }, public, double, getNumericalVariance, (]
[;, }, public, double, getNumericalVariance, (, ), {, if, (, shape, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;]
[/, (, shape, -, 1, ), ;, }, public, double, getNumericalVariance, (, ), {, if, (, shape, <=, 2, )]
[*, scale, /, (, shape, -, 1, ), ;, }, public, double, getNumericalVariance, (, ), {, if, (, shape, <=]
[/, (, shape, -, 1, ), ;, }, public, double, getNumericalVariance, (, ), {, if, (, shape, <=, 2, )]
[;, }, public, double, getNumericalVariance, (, ), {, if, (, shape, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;]
[), ;, }, public, double, getNumericalVariance, (, ), {, if, (, shape, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY]
[-, 1, ), ;, }, public, double, getNumericalVariance, (, ), {, if, (, shape, <=, 2, ), {, return, Double]
[), ;, }, public, double, getNumericalVariance, (, ), {, if, (, shape, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, double, s, =, shape, -, 1, ;, return, scale, *, scale, *]
[<=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, double, s, =, shape, -, 1, ;, return, scale, *]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, double, s, =, shape, -, 1, ;, return, scale, *, scale, *]
[;, }, double, s, =, shape, -, 1, ;, return, scale, *, scale, *, shape, /, (, s, *, s]
[., POSITIVE_INFINITY, ;, }, double, s, =, shape, -, 1, ;, return, scale, *, scale, *, shape, /, (, s]
[;, return, scale, *, scale, *, shape, /, (, s, *, s, ), /, (, shape, -, 2, ), ;]
[-, 1, ;, return, scale, *, scale, *, shape, /, (, s, *, s, ), /, (, shape, -, 2]
[;, return, scale, *, scale, *, shape, /, (, s, *, s, ), /, (, shape, -, 2, ), ;]
[;, }, public, double, getSupportLowerBound, (, ), {, return, scale, ;, }, public, double, getSupportUpperBound, (, ), {, return, Double]
[/, (, shape, -, 2, ), ;, }, public, double, getSupportLowerBound, (, ), {, return, scale, ;, }, public, double]
[/, (, s, *, s, ), /, (, shape, -, 2, ), ;, }, public, double, getSupportLowerBound, (, ), {]
[*, shape, /, (, s, *, s, ), /, (, shape, -, 2, ), ;, }, public, double, getSupportLowerBound, (]
[*, scale, *, shape, /, (, s, *, s, ), /, (, shape, -, 2, ), ;, }, public, double]
[*, shape, /, (, s, *, s, ), /, (, shape, -, 2, ), ;, }, public, double, getSupportLowerBound, (]
[/, (, s, *, s, ), /, (, shape, -, 2, ), ;, }, public, double, getSupportLowerBound, (, ), {]
[/, (, shape, -, 2, ), ;, }, public, double, getSupportLowerBound, (, ), {, return, scale, ;, }, public, double]
[), /, (, shape, -, 2, ), ;, }, public, double, getSupportLowerBound, (, ), {, return, scale, ;, }, public]
[*, s, ), /, (, shape, -, 2, ), ;, }, public, double, getSupportLowerBound, (, ), {, return, scale, ;]
[), /, (, shape, -, 2, ), ;, }, public, double, getSupportLowerBound, (, ), {, return, scale, ;, }, public]
[;, }, public, double, getSupportLowerBound, (, ), {, return, scale, ;, }, public, double, getSupportUpperBound, (, ), {, return, Double]
[), ;, }, public, double, getSupportLowerBound, (, ), {, return, scale, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[-, 2, ), ;, }, public, double, getSupportLowerBound, (, ), {, return, scale, ;, }, public, double, getSupportUpperBound, (, )]
[), ;, }, public, double, getSupportLowerBound, (, ), {, return, scale, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[;, }, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {]
[;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false]
[., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {]
[;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportConnected, (, ), {, return, true]
[;, }, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, double, sample, (, ), {]
[;, }, @, Override, public, double, sample, (, ), {, final, double, n, =, random, ., nextDouble, (, ), ;]
[;, return, scale, /, FastMath, ., pow, (, n, ,, 1, /, shape, ), ;, }, }]
[., nextDouble, (, ), ;, return, scale, /, FastMath, ., pow, (, n, ,, 1, /, shape, ), ;, }]
[;, }, }]
[/, FastMath, ., pow, (, n, ,, 1, /, shape, ), ;, }, }]
[;, }, }]
[., pow, (, n, ,, 1, /, shape, ), ;, }, }]
[,, 1, /, shape, ), ;, }, }]
[), ;, }, }]
[/, shape, ), ;, }, }]
[), ;, }, }]
