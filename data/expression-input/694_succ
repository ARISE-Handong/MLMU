[;, Preconditions, ., checkArgument, (, root, ., getType, (, ), ==, Token, ., BLOCK, ||, root, ., getType, (, )]
[., checkNotNull, (, root, ), ;, Preconditions, ., checkArgument, (, root, ., getType, (, ), ==, Token, ., BLOCK, ||]
[), ;, Preconditions, ., checkArgument, (, root, ., getType, (, ), ==, Token, ., BLOCK, ||, root, ., getType, (]
[;, JsonML, rootElement, =, new, JsonML, (, TagType, ., BlockStmt, ), ;, if, (, root, ., getType, (, ), ==]
[., checkArgument, (, root, ., getType, (, ), ==, Token, ., BLOCK, ||, root, ., getType, (, ), ==, Token]
[), ;, JsonML, rootElement, =, new, JsonML, (, TagType, ., BlockStmt, ), ;, if, (, root, ., getType, (, )]
[||, root, ., getType, (, ), ==, Token, ., SCRIPT, ), ;, JsonML, rootElement, =, new, JsonML, (, TagType, .]
[==, Token, ., BLOCK, ||, root, ., getType, (, ), ==, Token, ., SCRIPT, ), ;, JsonML, rootElement, =, new]
[., getType, (, ), ==, Token, ., BLOCK, ||, root, ., getType, (, ), ==, Token, ., SCRIPT, ), ;]
[||, root, ., getType, (, ), ==, Token, ., SCRIPT, ), ;, JsonML, rootElement, =, new, JsonML, (, TagType, .]
[., BLOCK, ||, root, ., getType, (, ), ==, Token, ., SCRIPT, ), ;, JsonML, rootElement, =, new, JsonML, (]
[), ;, JsonML, rootElement, =, new, JsonML, (, TagType, ., BlockStmt, ), ;, if, (, root, ., getType, (, )]
[==, Token, ., SCRIPT, ), ;, JsonML, rootElement, =, new, JsonML, (, TagType, ., BlockStmt, ), ;, if, (, root]
[., getType, (, ), ==, Token, ., SCRIPT, ), ;, JsonML, rootElement, =, new, JsonML, (, TagType, ., BlockStmt, )]
[), ;, JsonML, rootElement, =, new, JsonML, (, TagType, ., BlockStmt, ), ;, if, (, root, ., getType, (, )]
[., SCRIPT, ), ;, JsonML, rootElement, =, new, JsonML, (, TagType, ., BlockStmt, ), ;, if, (, root, ., getType]
[;, if, (, root, ., getType, (, ), ==, Token, ., SCRIPT, ), {, processNode, (, root, ,, rootElement, )]
[), ;, if, (, root, ., getType, (, ), ==, Token, ., SCRIPT, ), {, processNode, (, root, ,, rootElement]
[., BlockStmt, ), ;, if, (, root, ., getType, (, ), ==, Token, ., SCRIPT, ), {, processNode, (, root]
[), {, processNode, (, root, ,, rootElement, ), ;, return, rootElement, ., getChild, (, 0, ), ;, }, else, {]
[==, Token, ., SCRIPT, ), {, processNode, (, root, ,, rootElement, ), ;, return, rootElement, ., getChild, (, 0, )]
[., getType, (, ), ==, Token, ., SCRIPT, ), {, processNode, (, root, ,, rootElement, ), ;, return, rootElement, .]
[), {, processNode, (, root, ,, rootElement, ), ;, return, rootElement, ., getChild, (, 0, ), ;, }, else, {]
[., SCRIPT, ), {, processNode, (, root, ,, rootElement, ), ;, return, rootElement, ., getChild, (, 0, ), ;, }]
[;, return, rootElement, ., getChild, (, 0, ), ;, }, else, {, Node, child, =, root, ., getFirstChild, (, )]
[,, rootElement, ), ;, return, rootElement, ., getChild, (, 0, ), ;, }, else, {, Node, child, =, root, .]
[), ;, return, rootElement, ., getChild, (, 0, ), ;, }, else, {, Node, child, =, root, ., getFirstChild, (]
[;, }, else, {, Node, child, =, root, ., getFirstChild, (, ), ;, while, (, child, !=, null, ), {]
[., getChild, (, 0, ), ;, }, else, {, Node, child, =, root, ., getFirstChild, (, ), ;, while, (]
[), ;, }, else, {, Node, child, =, root, ., getFirstChild, (, ), ;, while, (, child, !=, null, )]
[;, while, (, child, !=, null, ), {, processNode, (, child, ,, rootElement, ), ;, child, =, child, ., getNext]
[., getFirstChild, (, ), ;, while, (, child, !=, null, ), {, processNode, (, child, ,, rootElement, ), ;, child]
[), {, processNode, (, child, ,, rootElement, ), ;, child, =, child, ., getNext, (, ), ;, }, return, rootElement]
[!=, null, ), {, processNode, (, child, ,, rootElement, ), ;, child, =, child, ., getNext, (, ), ;, }]
[), {, processNode, (, child, ,, rootElement, ), ;, child, =, child, ., getNext, (, ), ;, }, return, rootElement]
[;, child, =, child, ., getNext, (, ), ;, }, return, rootElement, ., getChild, (, 0, ), ;, }, }]
[,, rootElement, ), ;, child, =, child, ., getNext, (, ), ;, }, return, rootElement, ., getChild, (, 0, )]
[), ;, child, =, child, ., getNext, (, ), ;, }, return, rootElement, ., getChild, (, 0, ), ;, }]
[=, child, ., getNext, (, ), ;, }, return, rootElement, ., getChild, (, 0, ), ;, }, }, private, void]
[;, }, return, rootElement, ., getChild, (, 0, ), ;, }, }, private, void, processNode, (, Node, node, ,, JsonML]
[., getNext, (, ), ;, }, return, rootElement, ., getChild, (, 0, ), ;, }, }, private, void, processNode, (]
[;, }, }, private, void, processNode, (, Node, node, ,, JsonML, currentParent, ), {, switch, (, node, ., getType, (]
[., getChild, (, 0, ), ;, }, }, private, void, processNode, (, Node, node, ,, JsonML, currentParent, ), {, switch]
[), ;, }, }, private, void, processNode, (, Node, node, ,, JsonML, currentParent, ), {, switch, (, node, ., getType]
[), {, case, Token, ., RETURN, :, processReturn, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., BITOR]
[., getType, (, ), ), {, case, Token, ., RETURN, :, processReturn, (, node, ,, currentParent, ), ;, break, ;]
[:, processReturn, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., BITOR, :, processBinaryExpr, (, node, ,, currentParent]
[., RETURN, :, processReturn, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., BITOR, :, processBinaryExpr, (, node]
[;, break, ;, case, Token, ., BITOR, :, processBinaryExpr, (, node, ,, currentParent, ,, "|", ), ;, break, ;, case]
[,, currentParent, ), ;, break, ;, case, Token, ., BITOR, :, processBinaryExpr, (, node, ,, currentParent, ,, "|", ), ;]
[), ;, break, ;, case, Token, ., BITOR, :, processBinaryExpr, (, node, ,, currentParent, ,, "|", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, "|", ), ;, break, ;, case, Token, ., BITXOR, :, processBinaryExpr, (, node]
[., BITOR, :, processBinaryExpr, (, node, ,, currentParent, ,, "|", ), ;, break, ;, case, Token, ., BITXOR, :, processBinaryExpr]
[;, break, ;, case, Token, ., BITXOR, :, processBinaryExpr, (, node, ,, currentParent, ,, "^", ), ;, break, ;, case]
[,, currentParent, ,, "|", ), ;, break, ;, case, Token, ., BITXOR, :, processBinaryExpr, (, node, ,, currentParent, ,, "^"]
[,, "|", ), ;, break, ;, case, Token, ., BITXOR, :, processBinaryExpr, (, node, ,, currentParent, ,, "^", ), ;]
[), ;, break, ;, case, Token, ., BITXOR, :, processBinaryExpr, (, node, ,, currentParent, ,, "^", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, "^", ), ;, break, ;, case, Token, ., BITAND, :, processBinaryExpr, (, node]
[., BITXOR, :, processBinaryExpr, (, node, ,, currentParent, ,, "^", ), ;, break, ;, case, Token, ., BITAND, :, processBinaryExpr]
[;, break, ;, case, Token, ., BITAND, :, processBinaryExpr, (, node, ,, currentParent, ,, "&", ), ;, break, ;, case]
[,, currentParent, ,, "^", ), ;, break, ;, case, Token, ., BITAND, :, processBinaryExpr, (, node, ,, currentParent, ,, "&"]
[,, "^", ), ;, break, ;, case, Token, ., BITAND, :, processBinaryExpr, (, node, ,, currentParent, ,, "&", ), ;]
[), ;, break, ;, case, Token, ., BITAND, :, processBinaryExpr, (, node, ,, currentParent, ,, "&", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, "&", ), ;, break, ;, case, Token, ., EQ, :, processBinaryExpr, (, node]
[., BITAND, :, processBinaryExpr, (, node, ,, currentParent, ,, "&", ), ;, break, ;, case, Token, ., EQ, :, processBinaryExpr]
[;, break, ;, case, Token, ., EQ, :, processBinaryExpr, (, node, ,, currentParent, ,, "==", ), ;, break, ;, case]
[,, currentParent, ,, "&", ), ;, break, ;, case, Token, ., EQ, :, processBinaryExpr, (, node, ,, currentParent, ,, "=="]
[,, "&", ), ;, break, ;, case, Token, ., EQ, :, processBinaryExpr, (, node, ,, currentParent, ,, "==", ), ;]
[), ;, break, ;, case, Token, ., EQ, :, processBinaryExpr, (, node, ,, currentParent, ,, "==", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, "==", ), ;, break, ;, case, Token, ., NE, :, processBinaryExpr, (, node]
[., EQ, :, processBinaryExpr, (, node, ,, currentParent, ,, "==", ), ;, break, ;, case, Token, ., NE, :, processBinaryExpr]
[;, break, ;, case, Token, ., NE, :, processBinaryExpr, (, node, ,, currentParent, ,, "!=", ), ;, break, ;, case]
[,, currentParent, ,, "==", ), ;, break, ;, case, Token, ., NE, :, processBinaryExpr, (, node, ,, currentParent, ,, "!="]
[,, "==", ), ;, break, ;, case, Token, ., NE, :, processBinaryExpr, (, node, ,, currentParent, ,, "!=", ), ;]
[), ;, break, ;, case, Token, ., NE, :, processBinaryExpr, (, node, ,, currentParent, ,, "!=", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, "!=", ), ;, break, ;, case, Token, ., LT, :, processBinaryExpr, (, node]
[., NE, :, processBinaryExpr, (, node, ,, currentParent, ,, "!=", ), ;, break, ;, case, Token, ., LT, :, processBinaryExpr]
[;, break, ;, case, Token, ., LT, :, processBinaryExpr, (, node, ,, currentParent, ,, "<", ), ;, break, ;, case]
[,, currentParent, ,, "!=", ), ;, break, ;, case, Token, ., LT, :, processBinaryExpr, (, node, ,, currentParent, ,, "<"]
[,, "!=", ), ;, break, ;, case, Token, ., LT, :, processBinaryExpr, (, node, ,, currentParent, ,, "<", ), ;]
[), ;, break, ;, case, Token, ., LT, :, processBinaryExpr, (, node, ,, currentParent, ,, "<", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, "<", ), ;, break, ;, case, Token, ., LE, :, processBinaryExpr, (, node]
[., LT, :, processBinaryExpr, (, node, ,, currentParent, ,, "<", ), ;, break, ;, case, Token, ., LE, :, processBinaryExpr]
[;, break, ;, case, Token, ., LE, :, processBinaryExpr, (, node, ,, currentParent, ,, "<=", ), ;, break, ;, case]
[,, currentParent, ,, "<", ), ;, break, ;, case, Token, ., LE, :, processBinaryExpr, (, node, ,, currentParent, ,, "<="]
[,, "<", ), ;, break, ;, case, Token, ., LE, :, processBinaryExpr, (, node, ,, currentParent, ,, "<=", ), ;]
[), ;, break, ;, case, Token, ., LE, :, processBinaryExpr, (, node, ,, currentParent, ,, "<=", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, "<=", ), ;, break, ;, case, Token, ., GT, :, processBinaryExpr, (, node]
[., LE, :, processBinaryExpr, (, node, ,, currentParent, ,, "<=", ), ;, break, ;, case, Token, ., GT, :, processBinaryExpr]
[;, break, ;, case, Token, ., GT, :, processBinaryExpr, (, node, ,, currentParent, ,, ">", ), ;, break, ;, case]
[,, currentParent, ,, "<=", ), ;, break, ;, case, Token, ., GT, :, processBinaryExpr, (, node, ,, currentParent, ,, ">"]
[,, "<=", ), ;, break, ;, case, Token, ., GT, :, processBinaryExpr, (, node, ,, currentParent, ,, ">", ), ;]
[), ;, break, ;, case, Token, ., GT, :, processBinaryExpr, (, node, ,, currentParent, ,, ">", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, ">", ), ;, break, ;, case, Token, ., GE, :, processBinaryExpr, (, node]
[., GT, :, processBinaryExpr, (, node, ,, currentParent, ,, ">", ), ;, break, ;, case, Token, ., GE, :, processBinaryExpr]
[;, break, ;, case, Token, ., GE, :, processBinaryExpr, (, node, ,, currentParent, ,, ">=", ), ;, break, ;, case]
[,, currentParent, ,, ">", ), ;, break, ;, case, Token, ., GE, :, processBinaryExpr, (, node, ,, currentParent, ,, ">="]
[,, ">", ), ;, break, ;, case, Token, ., GE, :, processBinaryExpr, (, node, ,, currentParent, ,, ">=", ), ;]
[), ;, break, ;, case, Token, ., GE, :, processBinaryExpr, (, node, ,, currentParent, ,, ">=", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, ">=", ), ;, break, ;, case, Token, ., LSH, :, processBinaryExpr, (, node]
[., GE, :, processBinaryExpr, (, node, ,, currentParent, ,, ">=", ), ;, break, ;, case, Token, ., LSH, :, processBinaryExpr]
[;, break, ;, case, Token, ., LSH, :, processBinaryExpr, (, node, ,, currentParent, ,, "<<", ), ;, break, ;, case]
[,, currentParent, ,, ">=", ), ;, break, ;, case, Token, ., LSH, :, processBinaryExpr, (, node, ,, currentParent, ,, "<<"]
[,, ">=", ), ;, break, ;, case, Token, ., LSH, :, processBinaryExpr, (, node, ,, currentParent, ,, "<<", ), ;]
[), ;, break, ;, case, Token, ., LSH, :, processBinaryExpr, (, node, ,, currentParent, ,, "<<", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, "<<", ), ;, break, ;, case, Token, ., RSH, :, processBinaryExpr, (, node]
[., LSH, :, processBinaryExpr, (, node, ,, currentParent, ,, "<<", ), ;, break, ;, case, Token, ., RSH, :, processBinaryExpr]
[;, break, ;, case, Token, ., RSH, :, processBinaryExpr, (, node, ,, currentParent, ,, ">>", ), ;, break, ;, case]
[,, currentParent, ,, "<<", ), ;, break, ;, case, Token, ., RSH, :, processBinaryExpr, (, node, ,, currentParent, ,, ">>"]
[,, "<<", ), ;, break, ;, case, Token, ., RSH, :, processBinaryExpr, (, node, ,, currentParent, ,, ">>", ), ;]
[), ;, break, ;, case, Token, ., RSH, :, processBinaryExpr, (, node, ,, currentParent, ,, ">>", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, ">>", ), ;, break, ;, case, Token, ., URSH, :, processBinaryExpr, (, node]
[., RSH, :, processBinaryExpr, (, node, ,, currentParent, ,, ">>", ), ;, break, ;, case, Token, ., URSH, :, processBinaryExpr]
[;, break, ;, case, Token, ., URSH, :, processBinaryExpr, (, node, ,, currentParent, ,, ">>>", ), ;, break, ;, case]
[,, currentParent, ,, ">>", ), ;, break, ;, case, Token, ., URSH, :, processBinaryExpr, (, node, ,, currentParent, ,, ">>>"]
[,, ">>", ), ;, break, ;, case, Token, ., URSH, :, processBinaryExpr, (, node, ,, currentParent, ,, ">>>", ), ;]
[), ;, break, ;, case, Token, ., URSH, :, processBinaryExpr, (, node, ,, currentParent, ,, ">>>", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, ">>>", ), ;, break, ;, case, Token, ., ADD, :, processBinaryExpr, (, node]
[., URSH, :, processBinaryExpr, (, node, ,, currentParent, ,, ">>>", ), ;, break, ;, case, Token, ., ADD, :, processBinaryExpr]
[;, break, ;, case, Token, ., ADD, :, processBinaryExpr, (, node, ,, currentParent, ,, "+", ), ;, break, ;, case]
[,, currentParent, ,, ">>>", ), ;, break, ;, case, Token, ., ADD, :, processBinaryExpr, (, node, ,, currentParent, ,, "+"]
[,, ">>>", ), ;, break, ;, case, Token, ., ADD, :, processBinaryExpr, (, node, ,, currentParent, ,, "+", ), ;]
[), ;, break, ;, case, Token, ., ADD, :, processBinaryExpr, (, node, ,, currentParent, ,, "+", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, "+", ), ;, break, ;, case, Token, ., SUB, :, processBinaryExpr, (, node]
[., ADD, :, processBinaryExpr, (, node, ,, currentParent, ,, "+", ), ;, break, ;, case, Token, ., SUB, :, processBinaryExpr]
[;, break, ;, case, Token, ., SUB, :, processBinaryExpr, (, node, ,, currentParent, ,, "-", ), ;, break, ;, case]
[,, currentParent, ,, "+", ), ;, break, ;, case, Token, ., SUB, :, processBinaryExpr, (, node, ,, currentParent, ,, "-"]
[,, "+", ), ;, break, ;, case, Token, ., SUB, :, processBinaryExpr, (, node, ,, currentParent, ,, "-", ), ;]
[), ;, break, ;, case, Token, ., SUB, :, processBinaryExpr, (, node, ,, currentParent, ,, "-", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, "-", ), ;, break, ;, case, Token, ., MUL, :, processBinaryExpr, (, node]
[., SUB, :, processBinaryExpr, (, node, ,, currentParent, ,, "-", ), ;, break, ;, case, Token, ., MUL, :, processBinaryExpr]
[;, break, ;, case, Token, ., MUL, :, processBinaryExpr, (, node, ,, currentParent, ,, "*", ), ;, break, ;, case]
[,, currentParent, ,, "-", ), ;, break, ;, case, Token, ., MUL, :, processBinaryExpr, (, node, ,, currentParent, ,, "*"]
[,, "-", ), ;, break, ;, case, Token, ., MUL, :, processBinaryExpr, (, node, ,, currentParent, ,, "*", ), ;]
[), ;, break, ;, case, Token, ., MUL, :, processBinaryExpr, (, node, ,, currentParent, ,, "*", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, "*", ), ;, break, ;, case, Token, ., DIV, :, processBinaryExpr, (, node]
[., MUL, :, processBinaryExpr, (, node, ,, currentParent, ,, "*", ), ;, break, ;, case, Token, ., DIV, :, processBinaryExpr]
[;, break, ;, case, Token, ., DIV, :, processBinaryExpr, (, node, ,, currentParent, ,, "/", ), ;, break, ;, case]
[,, currentParent, ,, "*", ), ;, break, ;, case, Token, ., DIV, :, processBinaryExpr, (, node, ,, currentParent, ,, "/"]
[,, "*", ), ;, break, ;, case, Token, ., DIV, :, processBinaryExpr, (, node, ,, currentParent, ,, "/", ), ;]
[), ;, break, ;, case, Token, ., DIV, :, processBinaryExpr, (, node, ,, currentParent, ,, "/", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, "/", ), ;, break, ;, case, Token, ., MOD, :, processBinaryExpr, (, node]
[., DIV, :, processBinaryExpr, (, node, ,, currentParent, ,, "/", ), ;, break, ;, case, Token, ., MOD, :, processBinaryExpr]
[;, break, ;, case, Token, ., MOD, :, processBinaryExpr, (, node, ,, currentParent, ,, "%", ), ;, break, ;, case]
[,, currentParent, ,, "/", ), ;, break, ;, case, Token, ., MOD, :, processBinaryExpr, (, node, ,, currentParent, ,, "%"]
[,, "/", ), ;, break, ;, case, Token, ., MOD, :, processBinaryExpr, (, node, ,, currentParent, ,, "%", ), ;]
[), ;, break, ;, case, Token, ., MOD, :, processBinaryExpr, (, node, ,, currentParent, ,, "%", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, "%", ), ;, break, ;, case, Token, ., NOT, :, processUnaryExpr, (, node]
[., MOD, :, processBinaryExpr, (, node, ,, currentParent, ,, "%", ), ;, break, ;, case, Token, ., NOT, :, processUnaryExpr]
[;, break, ;, case, Token, ., NOT, :, processUnaryExpr, (, node, ,, currentParent, ,, "!", ), ;, break, ;, case]
[,, currentParent, ,, "%", ), ;, break, ;, case, Token, ., NOT, :, processUnaryExpr, (, node, ,, currentParent, ,, "!"]
[,, "%", ), ;, break, ;, case, Token, ., NOT, :, processUnaryExpr, (, node, ,, currentParent, ,, "!", ), ;]
[), ;, break, ;, case, Token, ., NOT, :, processUnaryExpr, (, node, ,, currentParent, ,, "!", ), ;, break, ;]
[:, processUnaryExpr, (, node, ,, currentParent, ,, "!", ), ;, break, ;, case, Token, ., BITNOT, :, processUnaryExpr, (, node]
[., NOT, :, processUnaryExpr, (, node, ,, currentParent, ,, "!", ), ;, break, ;, case, Token, ., BITNOT, :, processUnaryExpr]
[;, break, ;, case, Token, ., BITNOT, :, processUnaryExpr, (, node, ,, currentParent, ,, "~", ), ;, break, ;, case]
[,, currentParent, ,, "!", ), ;, break, ;, case, Token, ., BITNOT, :, processUnaryExpr, (, node, ,, currentParent, ,, "~"]
[,, "!", ), ;, break, ;, case, Token, ., BITNOT, :, processUnaryExpr, (, node, ,, currentParent, ,, "~", ), ;]
[), ;, break, ;, case, Token, ., BITNOT, :, processUnaryExpr, (, node, ,, currentParent, ,, "~", ), ;, break, ;]
[:, processUnaryExpr, (, node, ,, currentParent, ,, "~", ), ;, break, ;, case, Token, ., POS, :, processUnaryExpr, (, node]
[., BITNOT, :, processUnaryExpr, (, node, ,, currentParent, ,, "~", ), ;, break, ;, case, Token, ., POS, :, processUnaryExpr]
[;, break, ;, case, Token, ., POS, :, processUnaryExpr, (, node, ,, currentParent, ,, "+", ), ;, break, ;, case]
[,, currentParent, ,, "~", ), ;, break, ;, case, Token, ., POS, :, processUnaryExpr, (, node, ,, currentParent, ,, "+"]
[,, "~", ), ;, break, ;, case, Token, ., POS, :, processUnaryExpr, (, node, ,, currentParent, ,, "+", ), ;]
[), ;, break, ;, case, Token, ., POS, :, processUnaryExpr, (, node, ,, currentParent, ,, "+", ), ;, break, ;]
[:, processUnaryExpr, (, node, ,, currentParent, ,, "+", ), ;, break, ;, case, Token, ., NEG, :, processUnaryExpr, (, node]
[., POS, :, processUnaryExpr, (, node, ,, currentParent, ,, "+", ), ;, break, ;, case, Token, ., NEG, :, processUnaryExpr]
[;, break, ;, case, Token, ., NEG, :, processUnaryExpr, (, node, ,, currentParent, ,, "-", ), ;, break, ;, case]
[,, currentParent, ,, "+", ), ;, break, ;, case, Token, ., NEG, :, processUnaryExpr, (, node, ,, currentParent, ,, "-"]
[,, "+", ), ;, break, ;, case, Token, ., NEG, :, processUnaryExpr, (, node, ,, currentParent, ,, "-", ), ;]
[), ;, break, ;, case, Token, ., NEG, :, processUnaryExpr, (, node, ,, currentParent, ,, "-", ), ;, break, ;]
[:, processUnaryExpr, (, node, ,, currentParent, ,, "-", ), ;, break, ;, case, Token, ., NEW, :, processNew, (, node]
[., NEG, :, processUnaryExpr, (, node, ,, currentParent, ,, "-", ), ;, break, ;, case, Token, ., NEW, :, processNew]
[;, break, ;, case, Token, ., NEW, :, processNew, (, node, ,, currentParent, ,, TagType, ., NewExpr, ), ;, break]
[,, currentParent, ,, "-", ), ;, break, ;, case, Token, ., NEW, :, processNew, (, node, ,, currentParent, ,, TagType]
[,, "-", ), ;, break, ;, case, Token, ., NEW, :, processNew, (, node, ,, currentParent, ,, TagType, ., NewExpr]
[), ;, break, ;, case, Token, ., NEW, :, processNew, (, node, ,, currentParent, ,, TagType, ., NewExpr, ), ;]
[:, processNew, (, node, ,, currentParent, ,, TagType, ., NewExpr, ), ;, break, ;, case, Token, ., DELPROP, :, processOneArgExpr]
[., NEW, :, processNew, (, node, ,, currentParent, ,, TagType, ., NewExpr, ), ;, break, ;, case, Token, ., DELPROP]
[;, break, ;, case, Token, ., DELPROP, :, processOneArgExpr, (, node, ,, currentParent, ,, TagType, ., DeleteExpr, ), ;, break]
[,, currentParent, ,, TagType, ., NewExpr, ), ;, break, ;, case, Token, ., DELPROP, :, processOneArgExpr, (, node, ,, currentParent]
[,, TagType, ., NewExpr, ), ;, break, ;, case, Token, ., DELPROP, :, processOneArgExpr, (, node, ,, currentParent, ,, TagType]
[), ;, break, ;, case, Token, ., DELPROP, :, processOneArgExpr, (, node, ,, currentParent, ,, TagType, ., DeleteExpr, ), ;]
[., NewExpr, ), ;, break, ;, case, Token, ., DELPROP, :, processOneArgExpr, (, node, ,, currentParent, ,, TagType, ., DeleteExpr]
[:, processOneArgExpr, (, node, ,, currentParent, ,, TagType, ., DeleteExpr, ), ;, break, ;, case, Token, ., TYPEOF, :, processOneArgExpr]
[., DELPROP, :, processOneArgExpr, (, node, ,, currentParent, ,, TagType, ., DeleteExpr, ), ;, break, ;, case, Token, ., TYPEOF]
[;, break, ;, case, Token, ., TYPEOF, :, processOneArgExpr, (, node, ,, currentParent, ,, TagType, ., TypeofExpr, ), ;, break]
[,, currentParent, ,, TagType, ., DeleteExpr, ), ;, break, ;, case, Token, ., TYPEOF, :, processOneArgExpr, (, node, ,, currentParent]
[,, TagType, ., DeleteExpr, ), ;, break, ;, case, Token, ., TYPEOF, :, processOneArgExpr, (, node, ,, currentParent, ,, TagType]
[), ;, break, ;, case, Token, ., TYPEOF, :, processOneArgExpr, (, node, ,, currentParent, ,, TagType, ., TypeofExpr, ), ;]
[., DeleteExpr, ), ;, break, ;, case, Token, ., TYPEOF, :, processOneArgExpr, (, node, ,, currentParent, ,, TagType, ., TypeofExpr]
[:, processOneArgExpr, (, node, ,, currentParent, ,, TagType, ., TypeofExpr, ), ;, break, ;, case, Token, ., GETPROP, :, processMemberExpr]
[., TYPEOF, :, processOneArgExpr, (, node, ,, currentParent, ,, TagType, ., TypeofExpr, ), ;, break, ;, case, Token, ., GETPROP]
[;, break, ;, case, Token, ., GETPROP, :, processMemberExpr, (, node, ,, currentParent, ,, ".", ), ;, break, ;, case]
[,, currentParent, ,, TagType, ., TypeofExpr, ), ;, break, ;, case, Token, ., GETPROP, :, processMemberExpr, (, node, ,, currentParent]
[,, TagType, ., TypeofExpr, ), ;, break, ;, case, Token, ., GETPROP, :, processMemberExpr, (, node, ,, currentParent, ,, "."]
[), ;, break, ;, case, Token, ., GETPROP, :, processMemberExpr, (, node, ,, currentParent, ,, ".", ), ;, break, ;]
[., TypeofExpr, ), ;, break, ;, case, Token, ., GETPROP, :, processMemberExpr, (, node, ,, currentParent, ,, ".", ), ;]
[:, processMemberExpr, (, node, ,, currentParent, ,, ".", ), ;, break, ;, case, Token, ., GETELEM, :, processMemberExpr, (, node]
[., GETPROP, :, processMemberExpr, (, node, ,, currentParent, ,, ".", ), ;, break, ;, case, Token, ., GETELEM, :, processMemberExpr]
[;, break, ;, case, Token, ., GETELEM, :, processMemberExpr, (, node, ,, currentParent, ,, "[]", ), ;, break, ;, case]
[,, currentParent, ,, ".", ), ;, break, ;, case, Token, ., GETELEM, :, processMemberExpr, (, node, ,, currentParent, ,, "[]"]
[,, ".", ), ;, break, ;, case, Token, ., GETELEM, :, processMemberExpr, (, node, ,, currentParent, ,, "[]", ), ;]
[), ;, break, ;, case, Token, ., GETELEM, :, processMemberExpr, (, node, ,, currentParent, ,, "[]", ), ;, break, ;]
[:, processMemberExpr, (, node, ,, currentParent, ,, "[]", ), ;, break, ;, case, Token, ., CALL, :, processCall, (, node]
[., GETELEM, :, processMemberExpr, (, node, ,, currentParent, ,, "[]", ), ;, break, ;, case, Token, ., CALL, :, processCall]
[;, break, ;, case, Token, ., CALL, :, processCall, (, node, ,, currentParent, ), ;, break, ;, case, Token, .]
[,, currentParent, ,, "[]", ), ;, break, ;, case, Token, ., CALL, :, processCall, (, node, ,, currentParent, ), ;]
[,, "[]", ), ;, break, ;, case, Token, ., CALL, :, processCall, (, node, ,, currentParent, ), ;, break, ;]
[), ;, break, ;, case, Token, ., CALL, :, processCall, (, node, ,, currentParent, ), ;, break, ;, case, Token]
[:, processCall, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., NAME, :, processName, (, node, ,, currentParent]
[., CALL, :, processCall, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., NAME, :, processName, (, node]
[;, break, ;, case, Token, ., NAME, :, processName, (, node, ,, currentParent, ), ;, break, ;, case, Token, .]
[,, currentParent, ), ;, break, ;, case, Token, ., NAME, :, processName, (, node, ,, currentParent, ), ;, break, ;]
[), ;, break, ;, case, Token, ., NAME, :, processName, (, node, ,, currentParent, ), ;, break, ;, case, Token]
[:, processName, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., NUMBER, :, case, Token, ., STRING, :]
[., NAME, :, processName, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., NUMBER, :, case, Token, .]
[;, break, ;, case, Token, ., NUMBER, :, case, Token, ., STRING, :, case, Token, ., NULL, :, case, Token]
[,, currentParent, ), ;, break, ;, case, Token, ., NUMBER, :, case, Token, ., STRING, :, case, Token, ., NULL]
[), ;, break, ;, case, Token, ., NUMBER, :, case, Token, ., STRING, :, case, Token, ., NULL, :, case]
[:, case, Token, ., STRING, :, case, Token, ., NULL, :, case, Token, ., FALSE, :, case, Token, ., TRUE]
[., NUMBER, :, case, Token, ., STRING, :, case, Token, ., NULL, :, case, Token, ., FALSE, :, case, Token]
[:, case, Token, ., NULL, :, case, Token, ., FALSE, :, case, Token, ., TRUE, :, processLiteral, (, node, ,]
[., STRING, :, case, Token, ., NULL, :, case, Token, ., FALSE, :, case, Token, ., TRUE, :, processLiteral, (]
[:, case, Token, ., FALSE, :, case, Token, ., TRUE, :, processLiteral, (, node, ,, currentParent, ), ;, break, ;]
[., NULL, :, case, Token, ., FALSE, :, case, Token, ., TRUE, :, processLiteral, (, node, ,, currentParent, ), ;]
[:, case, Token, ., TRUE, :, processLiteral, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., THIS, :]
[., FALSE, :, case, Token, ., TRUE, :, processLiteral, (, node, ,, currentParent, ), ;, break, ;, case, Token, .]
[:, processLiteral, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., THIS, :, processThis, (, node, ,, currentParent]
[., TRUE, :, processLiteral, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., THIS, :, processThis, (, node]
[;, break, ;, case, Token, ., THIS, :, processThis, (, node, ,, currentParent, ), ;, break, ;, case, Token, .]
[,, currentParent, ), ;, break, ;, case, Token, ., THIS, :, processThis, (, node, ,, currentParent, ), ;, break, ;]
[), ;, break, ;, case, Token, ., THIS, :, processThis, (, node, ,, currentParent, ), ;, break, ;, case, Token]
[:, processThis, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., SHEQ, :, processBinaryExpr, (, node, ,, currentParent]
[., THIS, :, processThis, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., SHEQ, :, processBinaryExpr, (, node]
[;, break, ;, case, Token, ., SHEQ, :, processBinaryExpr, (, node, ,, currentParent, ,, "===", ), ;, break, ;, case]
[,, currentParent, ), ;, break, ;, case, Token, ., SHEQ, :, processBinaryExpr, (, node, ,, currentParent, ,, "===", ), ;]
[), ;, break, ;, case, Token, ., SHEQ, :, processBinaryExpr, (, node, ,, currentParent, ,, "===", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, "===", ), ;, break, ;, case, Token, ., SHNE, :, processBinaryExpr, (, node]
[., SHEQ, :, processBinaryExpr, (, node, ,, currentParent, ,, "===", ), ;, break, ;, case, Token, ., SHNE, :, processBinaryExpr]
[;, break, ;, case, Token, ., SHNE, :, processBinaryExpr, (, node, ,, currentParent, ,, "!==", ), ;, break, ;, case]
[,, currentParent, ,, "===", ), ;, break, ;, case, Token, ., SHNE, :, processBinaryExpr, (, node, ,, currentParent, ,, "!=="]
[,, "===", ), ;, break, ;, case, Token, ., SHNE, :, processBinaryExpr, (, node, ,, currentParent, ,, "!==", ), ;]
[), ;, break, ;, case, Token, ., SHNE, :, processBinaryExpr, (, node, ,, currentParent, ,, "!==", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, "!==", ), ;, break, ;, case, Token, ., REGEXP, :, processRegExp, (, node]
[., SHNE, :, processBinaryExpr, (, node, ,, currentParent, ,, "!==", ), ;, break, ;, case, Token, ., REGEXP, :, processRegExp]
[;, break, ;, case, Token, ., REGEXP, :, processRegExp, (, node, ,, currentParent, ), ;, break, ;, case, Token, .]
[,, currentParent, ,, "!==", ), ;, break, ;, case, Token, ., REGEXP, :, processRegExp, (, node, ,, currentParent, ), ;]
[,, "!==", ), ;, break, ;, case, Token, ., REGEXP, :, processRegExp, (, node, ,, currentParent, ), ;, break, ;]
[), ;, break, ;, case, Token, ., REGEXP, :, processRegExp, (, node, ,, currentParent, ), ;, break, ;, case, Token]
[:, processRegExp, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., THROW, :, processThrow, (, node, ,, currentParent]
[., REGEXP, :, processRegExp, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., THROW, :, processThrow, (, node]
[;, break, ;, case, Token, ., THROW, :, processThrow, (, node, ,, currentParent, ), ;, break, ;, case, Token, .]
[,, currentParent, ), ;, break, ;, case, Token, ., THROW, :, processThrow, (, node, ,, currentParent, ), ;, break, ;]
[), ;, break, ;, case, Token, ., THROW, :, processThrow, (, node, ,, currentParent, ), ;, break, ;, case, Token]
[:, processThrow, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., IN, :, processBinaryExpr, (, node, ,, currentParent]
[., THROW, :, processThrow, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., IN, :, processBinaryExpr, (, node]
[;, break, ;, case, Token, ., IN, :, processBinaryExpr, (, node, ,, currentParent, ,, "in", ), ;, break, ;, case]
[,, currentParent, ), ;, break, ;, case, Token, ., IN, :, processBinaryExpr, (, node, ,, currentParent, ,, "in", ), ;]
[), ;, break, ;, case, Token, ., IN, :, processBinaryExpr, (, node, ,, currentParent, ,, "in", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, "in", ), ;, break, ;, case, Token, ., INSTANCEOF, :, processBinaryExpr, (, node]
[., IN, :, processBinaryExpr, (, node, ,, currentParent, ,, "in", ), ;, break, ;, case, Token, ., INSTANCEOF, :, processBinaryExpr]
[;, break, ;, case, Token, ., INSTANCEOF, :, processBinaryExpr, (, node, ,, currentParent, ,, "instanceof", ), ;, break, ;, case]
[,, currentParent, ,, "in", ), ;, break, ;, case, Token, ., INSTANCEOF, :, processBinaryExpr, (, node, ,, currentParent, ,, "instanceof"]
[,, "in", ), ;, break, ;, case, Token, ., INSTANCEOF, :, processBinaryExpr, (, node, ,, currentParent, ,, "instanceof", ), ;]
[), ;, break, ;, case, Token, ., INSTANCEOF, :, processBinaryExpr, (, node, ,, currentParent, ,, "instanceof", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, "instanceof", ), ;, break, ;, case, Token, ., ARRAYLIT, :, processArrayLiteral, (, node]
[., INSTANCEOF, :, processBinaryExpr, (, node, ,, currentParent, ,, "instanceof", ), ;, break, ;, case, Token, ., ARRAYLIT, :, processArrayLiteral]
[;, break, ;, case, Token, ., ARRAYLIT, :, processArrayLiteral, (, node, ,, currentParent, ), ;, break, ;, case, Token, .]
[,, currentParent, ,, "instanceof", ), ;, break, ;, case, Token, ., ARRAYLIT, :, processArrayLiteral, (, node, ,, currentParent, ), ;]
[,, "instanceof", ), ;, break, ;, case, Token, ., ARRAYLIT, :, processArrayLiteral, (, node, ,, currentParent, ), ;, break, ;]
[), ;, break, ;, case, Token, ., ARRAYLIT, :, processArrayLiteral, (, node, ,, currentParent, ), ;, break, ;, case, Token]
[:, processArrayLiteral, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., OBJECTLIT, :, processObjectLiteral, (, node, ,, currentParent]
[., ARRAYLIT, :, processArrayLiteral, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., OBJECTLIT, :, processObjectLiteral, (, node]
[;, break, ;, case, Token, ., OBJECTLIT, :, processObjectLiteral, (, node, ,, currentParent, ), ;, break, ;, case, Token, .]
[,, currentParent, ), ;, break, ;, case, Token, ., OBJECTLIT, :, processObjectLiteral, (, node, ,, currentParent, ), ;, break, ;]
[), ;, break, ;, case, Token, ., OBJECTLIT, :, processObjectLiteral, (, node, ,, currentParent, ), ;, break, ;, case, Token]
[:, processObjectLiteral, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., TRY, :, processTry, (, node, ,, currentParent]
[., OBJECTLIT, :, processObjectLiteral, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., TRY, :, processTry, (, node]
[;, break, ;, case, Token, ., TRY, :, processTry, (, node, ,, currentParent, ), ;, break, ;, case, Token, .]
[,, currentParent, ), ;, break, ;, case, Token, ., TRY, :, processTry, (, node, ,, currentParent, ), ;, break, ;]
[), ;, break, ;, case, Token, ., TRY, :, processTry, (, node, ,, currentParent, ), ;, break, ;, case, Token]
[:, processTry, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., COMMA, :, processBinaryExpr, (, node, ,, currentParent]
[., TRY, :, processTry, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., COMMA, :, processBinaryExpr, (, node]
[;, break, ;, case, Token, ., COMMA, :, processBinaryExpr, (, node, ,, currentParent, ,, ",", ), ;, break, ;, case]
[,, currentParent, ), ;, break, ;, case, Token, ., COMMA, :, processBinaryExpr, (, node, ,, currentParent, ,, ",", ), ;]
[), ;, break, ;, case, Token, ., COMMA, :, processBinaryExpr, (, node, ,, currentParent, ,, ",", ), ;, break, ;]
[:, processBinaryExpr, (, node, ,, currentParent, ,, ",", ), ;, break, ;, case, Token, ., ASSIGN, :, processAssignExpr, (, node]
[., COMMA, :, processBinaryExpr, (, node, ,, currentParent, ,, ",", ), ;, break, ;, case, Token, ., ASSIGN, :, processAssignExpr]
[;, break, ;, case, Token, ., ASSIGN, :, processAssignExpr, (, node, ,, currentParent, ,, "=", ), ;, break, ;, case]
[,, currentParent, ,, ",", ), ;, break, ;, case, Token, ., ASSIGN, :, processAssignExpr, (, node, ,, currentParent, ,, "="]
[,, ",", ), ;, break, ;, case, Token, ., ASSIGN, :, processAssignExpr, (, node, ,, currentParent, ,, "=", ), ;]
[), ;, break, ;, case, Token, ., ASSIGN, :, processAssignExpr, (, node, ,, currentParent, ,, "=", ), ;, break, ;]
[:, processAssignExpr, (, node, ,, currentParent, ,, "=", ), ;, break, ;, case, Token, ., ASSIGN_BITOR, :, processAssignExpr, (, node]
[., ASSIGN, :, processAssignExpr, (, node, ,, currentParent, ,, "=", ), ;, break, ;, case, Token, ., ASSIGN_BITOR, :, processAssignExpr]
[;, break, ;, case, Token, ., ASSIGN_BITOR, :, processAssignExpr, (, node, ,, currentParent, ,, "|=", ), ;, break, ;, case]
[,, currentParent, ,, "=", ), ;, break, ;, case, Token, ., ASSIGN_BITOR, :, processAssignExpr, (, node, ,, currentParent, ,, "|="]
[,, "=", ), ;, break, ;, case, Token, ., ASSIGN_BITOR, :, processAssignExpr, (, node, ,, currentParent, ,, "|=", ), ;]
[), ;, break, ;, case, Token, ., ASSIGN_BITOR, :, processAssignExpr, (, node, ,, currentParent, ,, "|=", ), ;, break, ;]
[:, processAssignExpr, (, node, ,, currentParent, ,, "|=", ), ;, break, ;, case, Token, ., ASSIGN_BITXOR, :, processAssignExpr, (, node]
[., ASSIGN_BITOR, :, processAssignExpr, (, node, ,, currentParent, ,, "|=", ), ;, break, ;, case, Token, ., ASSIGN_BITXOR, :, processAssignExpr]
[;, break, ;, case, Token, ., ASSIGN_BITXOR, :, processAssignExpr, (, node, ,, currentParent, ,, "^=", ), ;, break, ;, case]
[,, currentParent, ,, "|=", ), ;, break, ;, case, Token, ., ASSIGN_BITXOR, :, processAssignExpr, (, node, ,, currentParent, ,, "^="]
[,, "|=", ), ;, break, ;, case, Token, ., ASSIGN_BITXOR, :, processAssignExpr, (, node, ,, currentParent, ,, "^=", ), ;]
[), ;, break, ;, case, Token, ., ASSIGN_BITXOR, :, processAssignExpr, (, node, ,, currentParent, ,, "^=", ), ;, break, ;]
[:, processAssignExpr, (, node, ,, currentParent, ,, "^=", ), ;, break, ;, case, Token, ., ASSIGN_BITAND, :, processAssignExpr, (, node]
[., ASSIGN_BITXOR, :, processAssignExpr, (, node, ,, currentParent, ,, "^=", ), ;, break, ;, case, Token, ., ASSIGN_BITAND, :, processAssignExpr]
[;, break, ;, case, Token, ., ASSIGN_BITAND, :, processAssignExpr, (, node, ,, currentParent, ,, "&=", ), ;, break, ;, case]
[,, currentParent, ,, "^=", ), ;, break, ;, case, Token, ., ASSIGN_BITAND, :, processAssignExpr, (, node, ,, currentParent, ,, "&="]
[,, "^=", ), ;, break, ;, case, Token, ., ASSIGN_BITAND, :, processAssignExpr, (, node, ,, currentParent, ,, "&=", ), ;]
[), ;, break, ;, case, Token, ., ASSIGN_BITAND, :, processAssignExpr, (, node, ,, currentParent, ,, "&=", ), ;, break, ;]
[:, processAssignExpr, (, node, ,, currentParent, ,, "&=", ), ;, break, ;, case, Token, ., ASSIGN_LSH, :, processAssignExpr, (, node]
[., ASSIGN_BITAND, :, processAssignExpr, (, node, ,, currentParent, ,, "&=", ), ;, break, ;, case, Token, ., ASSIGN_LSH, :, processAssignExpr]
[;, break, ;, case, Token, ., ASSIGN_LSH, :, processAssignExpr, (, node, ,, currentParent, ,, "<<=", ), ;, break, ;, case]
[,, currentParent, ,, "&=", ), ;, break, ;, case, Token, ., ASSIGN_LSH, :, processAssignExpr, (, node, ,, currentParent, ,, "<<="]
[,, "&=", ), ;, break, ;, case, Token, ., ASSIGN_LSH, :, processAssignExpr, (, node, ,, currentParent, ,, "<<=", ), ;]
[), ;, break, ;, case, Token, ., ASSIGN_LSH, :, processAssignExpr, (, node, ,, currentParent, ,, "<<=", ), ;, break, ;]
[:, processAssignExpr, (, node, ,, currentParent, ,, "<<=", ), ;, break, ;, case, Token, ., ASSIGN_RSH, :, processAssignExpr, (, node]
[., ASSIGN_LSH, :, processAssignExpr, (, node, ,, currentParent, ,, "<<=", ), ;, break, ;, case, Token, ., ASSIGN_RSH, :, processAssignExpr]
[;, break, ;, case, Token, ., ASSIGN_RSH, :, processAssignExpr, (, node, ,, currentParent, ,, ">>=", ), ;, break, ;, case]
[,, currentParent, ,, "<<=", ), ;, break, ;, case, Token, ., ASSIGN_RSH, :, processAssignExpr, (, node, ,, currentParent, ,, ">>="]
[,, "<<=", ), ;, break, ;, case, Token, ., ASSIGN_RSH, :, processAssignExpr, (, node, ,, currentParent, ,, ">>=", ), ;]
[), ;, break, ;, case, Token, ., ASSIGN_RSH, :, processAssignExpr, (, node, ,, currentParent, ,, ">>=", ), ;, break, ;]
[:, processAssignExpr, (, node, ,, currentParent, ,, ">>=", ), ;, break, ;, case, Token, ., ASSIGN_URSH, :, processAssignExpr, (, node]
[., ASSIGN_RSH, :, processAssignExpr, (, node, ,, currentParent, ,, ">>=", ), ;, break, ;, case, Token, ., ASSIGN_URSH, :, processAssignExpr]
[;, break, ;, case, Token, ., ASSIGN_URSH, :, processAssignExpr, (, node, ,, currentParent, ,, ">>>=", ), ;, break, ;, case]
[,, currentParent, ,, ">>=", ), ;, break, ;, case, Token, ., ASSIGN_URSH, :, processAssignExpr, (, node, ,, currentParent, ,, ">>>="]
[,, ">>=", ), ;, break, ;, case, Token, ., ASSIGN_URSH, :, processAssignExpr, (, node, ,, currentParent, ,, ">>>=", ), ;]
[), ;, break, ;, case, Token, ., ASSIGN_URSH, :, processAssignExpr, (, node, ,, currentParent, ,, ">>>=", ), ;, break, ;]
[:, processAssignExpr, (, node, ,, currentParent, ,, ">>>=", ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, processAssignExpr, (, node]
[., ASSIGN_URSH, :, processAssignExpr, (, node, ,, currentParent, ,, ">>>=", ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, processAssignExpr]
[;, break, ;, case, Token, ., ASSIGN_ADD, :, processAssignExpr, (, node, ,, currentParent, ,, "+=", ), ;, break, ;, case]
[,, currentParent, ,, ">>>=", ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, processAssignExpr, (, node, ,, currentParent, ,, "+="]
[,, ">>>=", ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, processAssignExpr, (, node, ,, currentParent, ,, "+=", ), ;]
[), ;, break, ;, case, Token, ., ASSIGN_ADD, :, processAssignExpr, (, node, ,, currentParent, ,, "+=", ), ;, break, ;]
[:, processAssignExpr, (, node, ,, currentParent, ,, "+=", ), ;, break, ;, case, Token, ., ASSIGN_SUB, :, processAssignExpr, (, node]
[., ASSIGN_ADD, :, processAssignExpr, (, node, ,, currentParent, ,, "+=", ), ;, break, ;, case, Token, ., ASSIGN_SUB, :, processAssignExpr]
[;, break, ;, case, Token, ., ASSIGN_SUB, :, processAssignExpr, (, node, ,, currentParent, ,, "-=", ), ;, break, ;, case]
[,, currentParent, ,, "+=", ), ;, break, ;, case, Token, ., ASSIGN_SUB, :, processAssignExpr, (, node, ,, currentParent, ,, "-="]
[,, "+=", ), ;, break, ;, case, Token, ., ASSIGN_SUB, :, processAssignExpr, (, node, ,, currentParent, ,, "-=", ), ;]
[), ;, break, ;, case, Token, ., ASSIGN_SUB, :, processAssignExpr, (, node, ,, currentParent, ,, "-=", ), ;, break, ;]
[:, processAssignExpr, (, node, ,, currentParent, ,, "-=", ), ;, break, ;, case, Token, ., ASSIGN_MUL, :, processAssignExpr, (, node]
[., ASSIGN_SUB, :, processAssignExpr, (, node, ,, currentParent, ,, "-=", ), ;, break, ;, case, Token, ., ASSIGN_MUL, :, processAssignExpr]
[;, break, ;, case, Token, ., ASSIGN_MUL, :, processAssignExpr, (, node, ,, currentParent, ,, "*=", ), ;, break, ;, case]
[,, currentParent, ,, "-=", ), ;, break, ;, case, Token, ., ASSIGN_MUL, :, processAssignExpr, (, node, ,, currentParent, ,, "*="]
[,, "-=", ), ;, break, ;, case, Token, ., ASSIGN_MUL, :, processAssignExpr, (, node, ,, currentParent, ,, "*=", ), ;]
[), ;, break, ;, case, Token, ., ASSIGN_MUL, :, processAssignExpr, (, node, ,, currentParent, ,, "*=", ), ;, break, ;]
[:, processAssignExpr, (, node, ,, currentParent, ,, "*=", ), ;, break, ;, case, Token, ., ASSIGN_DIV, :, processAssignExpr, (, node]
[., ASSIGN_MUL, :, processAssignExpr, (, node, ,, currentParent, ,, "*=", ), ;, break, ;, case, Token, ., ASSIGN_DIV, :, processAssignExpr]
[;, break, ;, case, Token, ., ASSIGN_DIV, :, processAssignExpr, (, node, ,, currentParent, ,, "/=", ), ;, break, ;, case]
[,, currentParent, ,, "*=", ), ;, break, ;, case, Token, ., ASSIGN_DIV, :, processAssignExpr, (, node, ,, currentParent, ,, "/="]
[,, "*=", ), ;, break, ;, case, Token, ., ASSIGN_DIV, :, processAssignExpr, (, node, ,, currentParent, ,, "/=", ), ;]
[), ;, break, ;, case, Token, ., ASSIGN_DIV, :, processAssignExpr, (, node, ,, currentParent, ,, "/=", ), ;, break, ;]
[:, processAssignExpr, (, node, ,, currentParent, ,, "/=", ), ;, break, ;, case, Token, ., ASSIGN_MOD, :, processAssignExpr, (, node]
[., ASSIGN_DIV, :, processAssignExpr, (, node, ,, currentParent, ,, "/=", ), ;, break, ;, case, Token, ., ASSIGN_MOD, :, processAssignExpr]
[;, break, ;, case, Token, ., ASSIGN_MOD, :, processAssignExpr, (, node, ,, currentParent, ,, "%=", ), ;, break, ;, case]
[,, currentParent, ,, "/=", ), ;, break, ;, case, Token, ., ASSIGN_MOD, :, processAssignExpr, (, node, ,, currentParent, ,, "%="]
[,, "/=", ), ;, break, ;, case, Token, ., ASSIGN_MOD, :, processAssignExpr, (, node, ,, currentParent, ,, "%=", ), ;]
[), ;, break, ;, case, Token, ., ASSIGN_MOD, :, processAssignExpr, (, node, ,, currentParent, ,, "%=", ), ;, break, ;]
[:, processAssignExpr, (, node, ,, currentParent, ,, "%=", ), ;, break, ;, case, Token, ., HOOK, :, processHook, (, node]
[., ASSIGN_MOD, :, processAssignExpr, (, node, ,, currentParent, ,, "%=", ), ;, break, ;, case, Token, ., HOOK, :, processHook]
[;, break, ;, case, Token, ., HOOK, :, processHook, (, node, ,, currentParent, ), ;, break, ;, case, Token, .]
[,, currentParent, ,, "%=", ), ;, break, ;, case, Token, ., HOOK, :, processHook, (, node, ,, currentParent, ), ;]
[,, "%=", ), ;, break, ;, case, Token, ., HOOK, :, processHook, (, node, ,, currentParent, ), ;, break, ;]
[), ;, break, ;, case, Token, ., HOOK, :, processHook, (, node, ,, currentParent, ), ;, break, ;, case, Token]
[:, processHook, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., OR, :, processLogicalExpr, (, node, ,, currentParent]
[., HOOK, :, processHook, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., OR, :, processLogicalExpr, (, node]
[;, break, ;, case, Token, ., OR, :, processLogicalExpr, (, node, ,, currentParent, ,, "||", ), ;, break, ;, case]
[,, currentParent, ), ;, break, ;, case, Token, ., OR, :, processLogicalExpr, (, node, ,, currentParent, ,, "||", ), ;]
[), ;, break, ;, case, Token, ., OR, :, processLogicalExpr, (, node, ,, currentParent, ,, "||", ), ;, break, ;]
[:, processLogicalExpr, (, node, ,, currentParent, ,, "||", ), ;, break, ;, case, Token, ., AND, :, processLogicalExpr, (, node]
[., OR, :, processLogicalExpr, (, node, ,, currentParent, ,, "||", ), ;, break, ;, case, Token, ., AND, :, processLogicalExpr]
[;, break, ;, case, Token, ., AND, :, processLogicalExpr, (, node, ,, currentParent, ,, "&&", ), ;, break, ;, case]
[,, currentParent, ,, "||", ), ;, break, ;, case, Token, ., AND, :, processLogicalExpr, (, node, ,, currentParent, ,, "&&"]
[,, "||", ), ;, break, ;, case, Token, ., AND, :, processLogicalExpr, (, node, ,, currentParent, ,, "&&", ), ;]
[), ;, break, ;, case, Token, ., AND, :, processLogicalExpr, (, node, ,, currentParent, ,, "&&", ), ;, break, ;]
[:, processLogicalExpr, (, node, ,, currentParent, ,, "&&", ), ;, break, ;, case, Token, ., INC, :, processIncrDecrExpr, (, node]
[., AND, :, processLogicalExpr, (, node, ,, currentParent, ,, "&&", ), ;, break, ;, case, Token, ., INC, :, processIncrDecrExpr]
[;, break, ;, case, Token, ., INC, :, processIncrDecrExpr, (, node, ,, currentParent, ,, "++", ), ;, break, ;, case]
[,, currentParent, ,, "&&", ), ;, break, ;, case, Token, ., INC, :, processIncrDecrExpr, (, node, ,, currentParent, ,, "++"]
[,, "&&", ), ;, break, ;, case, Token, ., INC, :, processIncrDecrExpr, (, node, ,, currentParent, ,, "++", ), ;]
[), ;, break, ;, case, Token, ., INC, :, processIncrDecrExpr, (, node, ,, currentParent, ,, "++", ), ;, break, ;]
[:, processIncrDecrExpr, (, node, ,, currentParent, ,, "++", ), ;, break, ;, case, Token, ., DEC, :, processIncrDecrExpr, (, node]
[., INC, :, processIncrDecrExpr, (, node, ,, currentParent, ,, "++", ), ;, break, ;, case, Token, ., DEC, :, processIncrDecrExpr]
[;, break, ;, case, Token, ., DEC, :, processIncrDecrExpr, (, node, ,, currentParent, ,, "--", ), ;, break, ;, case]
[,, currentParent, ,, "++", ), ;, break, ;, case, Token, ., DEC, :, processIncrDecrExpr, (, node, ,, currentParent, ,, "--"]
[,, "++", ), ;, break, ;, case, Token, ., DEC, :, processIncrDecrExpr, (, node, ,, currentParent, ,, "--", ), ;]
[), ;, break, ;, case, Token, ., DEC, :, processIncrDecrExpr, (, node, ,, currentParent, ,, "--", ), ;, break, ;]
[:, processIncrDecrExpr, (, node, ,, currentParent, ,, "--", ), ;, break, ;, case, Token, ., FUNCTION, :, processFunction, (, node]
[., DEC, :, processIncrDecrExpr, (, node, ,, currentParent, ,, "--", ), ;, break, ;, case, Token, ., FUNCTION, :, processFunction]
[;, break, ;, case, Token, ., FUNCTION, :, processFunction, (, node, ,, currentParent, ), ;, break, ;, case, Token, .]
[,, currentParent, ,, "--", ), ;, break, ;, case, Token, ., FUNCTION, :, processFunction, (, node, ,, currentParent, ), ;]
[,, "--", ), ;, break, ;, case, Token, ., FUNCTION, :, processFunction, (, node, ,, currentParent, ), ;, break, ;]
[), ;, break, ;, case, Token, ., FUNCTION, :, processFunction, (, node, ,, currentParent, ), ;, break, ;, case, Token]
[:, processFunction, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., IF, :, processIf, (, node, ,, currentParent]
[., FUNCTION, :, processFunction, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., IF, :, processIf, (, node]
[;, break, ;, case, Token, ., IF, :, processIf, (, node, ,, currentParent, ), ;, break, ;, case, Token, .]
[,, currentParent, ), ;, break, ;, case, Token, ., IF, :, processIf, (, node, ,, currentParent, ), ;, break, ;]
[), ;, break, ;, case, Token, ., IF, :, processIf, (, node, ,, currentParent, ), ;, break, ;, case, Token]
[:, processIf, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., SWITCH, :, processSwitch, (, node, ,, currentParent]
[., IF, :, processIf, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., SWITCH, :, processSwitch, (, node]
[;, break, ;, case, Token, ., SWITCH, :, processSwitch, (, node, ,, currentParent, ), ;, break, ;, case, Token, .]
[,, currentParent, ), ;, break, ;, case, Token, ., SWITCH, :, processSwitch, (, node, ,, currentParent, ), ;, break, ;]
[), ;, break, ;, case, Token, ., SWITCH, :, processSwitch, (, node, ,, currentParent, ), ;, break, ;, case, Token]
[:, processSwitch, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., CASE, :, processCase, (, node, ,, currentParent]
[., SWITCH, :, processSwitch, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., CASE, :, processCase, (, node]
[;, break, ;, case, Token, ., CASE, :, processCase, (, node, ,, currentParent, ,, TagType, ., Case, ), ;, break]
[,, currentParent, ), ;, break, ;, case, Token, ., CASE, :, processCase, (, node, ,, currentParent, ,, TagType, ., Case]
[), ;, break, ;, case, Token, ., CASE, :, processCase, (, node, ,, currentParent, ,, TagType, ., Case, ), ;]
[:, processCase, (, node, ,, currentParent, ,, TagType, ., Case, ), ;, break, ;, case, Token, ., DEFAULT_CASE, :, processCase]
[., CASE, :, processCase, (, node, ,, currentParent, ,, TagType, ., Case, ), ;, break, ;, case, Token, ., DEFAULT_CASE]
[;, break, ;, case, Token, ., DEFAULT_CASE, :, processCase, (, node, ,, currentParent, ,, TagType, ., DefaultCase, ), ;, break]
[,, currentParent, ,, TagType, ., Case, ), ;, break, ;, case, Token, ., DEFAULT_CASE, :, processCase, (, node, ,, currentParent]
[,, TagType, ., Case, ), ;, break, ;, case, Token, ., DEFAULT_CASE, :, processCase, (, node, ,, currentParent, ,, TagType]
[), ;, break, ;, case, Token, ., DEFAULT_CASE, :, processCase, (, node, ,, currentParent, ,, TagType, ., DefaultCase, ), ;]
[., Case, ), ;, break, ;, case, Token, ., DEFAULT_CASE, :, processCase, (, node, ,, currentParent, ,, TagType, ., DefaultCase]
[:, processCase, (, node, ,, currentParent, ,, TagType, ., DefaultCase, ), ;, break, ;, case, Token, ., WHILE, :, processLoop]
[., DEFAULT_CASE, :, processCase, (, node, ,, currentParent, ,, TagType, ., DefaultCase, ), ;, break, ;, case, Token, ., WHILE]
[;, break, ;, case, Token, ., WHILE, :, processLoop, (, node, ,, currentParent, ,, TagType, ., WhileStmt, ), ;, break]
[,, currentParent, ,, TagType, ., DefaultCase, ), ;, break, ;, case, Token, ., WHILE, :, processLoop, (, node, ,, currentParent]
[,, TagType, ., DefaultCase, ), ;, break, ;, case, Token, ., WHILE, :, processLoop, (, node, ,, currentParent, ,, TagType]
[), ;, break, ;, case, Token, ., WHILE, :, processLoop, (, node, ,, currentParent, ,, TagType, ., WhileStmt, ), ;]
[., DefaultCase, ), ;, break, ;, case, Token, ., WHILE, :, processLoop, (, node, ,, currentParent, ,, TagType, ., WhileStmt]
[:, processLoop, (, node, ,, currentParent, ,, TagType, ., WhileStmt, ), ;, break, ;, case, Token, ., DO, :, processLoop]
[., WHILE, :, processLoop, (, node, ,, currentParent, ,, TagType, ., WhileStmt, ), ;, break, ;, case, Token, ., DO]
[;, break, ;, case, Token, ., DO, :, processLoop, (, node, ,, currentParent, ,, TagType, ., DoWhileStmt, ), ;, break]
[,, currentParent, ,, TagType, ., WhileStmt, ), ;, break, ;, case, Token, ., DO, :, processLoop, (, node, ,, currentParent]
[,, TagType, ., WhileStmt, ), ;, break, ;, case, Token, ., DO, :, processLoop, (, node, ,, currentParent, ,, TagType]
[), ;, break, ;, case, Token, ., DO, :, processLoop, (, node, ,, currentParent, ,, TagType, ., DoWhileStmt, ), ;]
[., WhileStmt, ), ;, break, ;, case, Token, ., DO, :, processLoop, (, node, ,, currentParent, ,, TagType, ., DoWhileStmt]
[:, processLoop, (, node, ,, currentParent, ,, TagType, ., DoWhileStmt, ), ;, break, ;, case, Token, ., FOR, :, processForLoop]
[., DO, :, processLoop, (, node, ,, currentParent, ,, TagType, ., DoWhileStmt, ), ;, break, ;, case, Token, ., FOR]
[;, break, ;, case, Token, ., FOR, :, processForLoop, (, node, ,, currentParent, ), ;, break, ;, case, Token, .]
[,, currentParent, ,, TagType, ., DoWhileStmt, ), ;, break, ;, case, Token, ., FOR, :, processForLoop, (, node, ,, currentParent]
[,, TagType, ., DoWhileStmt, ), ;, break, ;, case, Token, ., FOR, :, processForLoop, (, node, ,, currentParent, ), ;]
[), ;, break, ;, case, Token, ., FOR, :, processForLoop, (, node, ,, currentParent, ), ;, break, ;, case, Token]
[., DoWhileStmt, ), ;, break, ;, case, Token, ., FOR, :, processForLoop, (, node, ,, currentParent, ), ;, break, ;]
[:, processForLoop, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., BREAK, :, processJmp, (, node, ,, currentParent]
[., FOR, :, processForLoop, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., BREAK, :, processJmp, (, node]
[;, break, ;, case, Token, ., BREAK, :, processJmp, (, node, ,, currentParent, ,, TagType, ., BreakStmt, ), ;, break]
[,, currentParent, ), ;, break, ;, case, Token, ., BREAK, :, processJmp, (, node, ,, currentParent, ,, TagType, ., BreakStmt]
[), ;, break, ;, case, Token, ., BREAK, :, processJmp, (, node, ,, currentParent, ,, TagType, ., BreakStmt, ), ;]
[:, processJmp, (, node, ,, currentParent, ,, TagType, ., BreakStmt, ), ;, break, ;, case, Token, ., CONTINUE, :, processJmp]
[., BREAK, :, processJmp, (, node, ,, currentParent, ,, TagType, ., BreakStmt, ), ;, break, ;, case, Token, ., CONTINUE]
[;, break, ;, case, Token, ., CONTINUE, :, processJmp, (, node, ,, currentParent, ,, TagType, ., ContinueStmt, ), ;, break]
[,, currentParent, ,, TagType, ., BreakStmt, ), ;, break, ;, case, Token, ., CONTINUE, :, processJmp, (, node, ,, currentParent]
[,, TagType, ., BreakStmt, ), ;, break, ;, case, Token, ., CONTINUE, :, processJmp, (, node, ,, currentParent, ,, TagType]
[), ;, break, ;, case, Token, ., CONTINUE, :, processJmp, (, node, ,, currentParent, ,, TagType, ., ContinueStmt, ), ;]
[., BreakStmt, ), ;, break, ;, case, Token, ., CONTINUE, :, processJmp, (, node, ,, currentParent, ,, TagType, ., ContinueStmt]
[:, processJmp, (, node, ,, currentParent, ,, TagType, ., ContinueStmt, ), ;, break, ;, case, Token, ., VAR, :, processVar]
[., CONTINUE, :, processJmp, (, node, ,, currentParent, ,, TagType, ., ContinueStmt, ), ;, break, ;, case, Token, ., VAR]
[;, break, ;, case, Token, ., VAR, :, processVar, (, node, ,, currentParent, ), ;, break, ;, case, Token, .]
[,, currentParent, ,, TagType, ., ContinueStmt, ), ;, break, ;, case, Token, ., VAR, :, processVar, (, node, ,, currentParent]
[,, TagType, ., ContinueStmt, ), ;, break, ;, case, Token, ., VAR, :, processVar, (, node, ,, currentParent, ), ;]
[), ;, break, ;, case, Token, ., VAR, :, processVar, (, node, ,, currentParent, ), ;, break, ;, case, Token]
[., ContinueStmt, ), ;, break, ;, case, Token, ., VAR, :, processVar, (, node, ,, currentParent, ), ;, break, ;]
[:, processVar, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., WITH, :, processWith, (, node, ,, currentParent]
[., VAR, :, processVar, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., WITH, :, processWith, (, node]
[;, break, ;, case, Token, ., WITH, :, processWith, (, node, ,, currentParent, ), ;, break, ;, case, Token, .]
[,, currentParent, ), ;, break, ;, case, Token, ., WITH, :, processWith, (, node, ,, currentParent, ), ;, break, ;]
[), ;, break, ;, case, Token, ., WITH, :, processWith, (, node, ,, currentParent, ), ;, break, ;, case, Token]
[:, processWith, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., CATCH, :, processCatch, (, node, ,, currentParent]
[., WITH, :, processWith, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., CATCH, :, processCatch, (, node]
[;, break, ;, case, Token, ., CATCH, :, processCatch, (, node, ,, currentParent, ), ;, break, ;, case, Token, .]
[,, currentParent, ), ;, break, ;, case, Token, ., CATCH, :, processCatch, (, node, ,, currentParent, ), ;, break, ;]
[), ;, break, ;, case, Token, ., CATCH, :, processCatch, (, node, ,, currentParent, ), ;, break, ;, case, Token]
[:, processCatch, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., VOID, :, processUnaryExpr, (, node, ,, currentParent]
[., CATCH, :, processCatch, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., VOID, :, processUnaryExpr, (, node]
[;, break, ;, case, Token, ., VOID, :, processUnaryExpr, (, node, ,, currentParent, ,, "void", ), ;, break, ;, case]
[,, currentParent, ), ;, break, ;, case, Token, ., VOID, :, processUnaryExpr, (, node, ,, currentParent, ,, "void", ), ;]
[), ;, break, ;, case, Token, ., VOID, :, processUnaryExpr, (, node, ,, currentParent, ,, "void", ), ;, break, ;]
[:, processUnaryExpr, (, node, ,, currentParent, ,, "void", ), ;, break, ;, case, Token, ., EMPTY, :, processEmpty, (, node]
[., VOID, :, processUnaryExpr, (, node, ,, currentParent, ,, "void", ), ;, break, ;, case, Token, ., EMPTY, :, processEmpty]
[;, break, ;, case, Token, ., EMPTY, :, processEmpty, (, node, ,, currentParent, ), ;, break, ;, case, Token, .]
[,, currentParent, ,, "void", ), ;, break, ;, case, Token, ., EMPTY, :, processEmpty, (, node, ,, currentParent, ), ;]
[,, "void", ), ;, break, ;, case, Token, ., EMPTY, :, processEmpty, (, node, ,, currentParent, ), ;, break, ;]
[), ;, break, ;, case, Token, ., EMPTY, :, processEmpty, (, node, ,, currentParent, ), ;, break, ;, case, Token]
[:, processEmpty, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., BLOCK, :, processBlock, (, node, ,, currentParent]
[., EMPTY, :, processEmpty, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., BLOCK, :, processBlock, (, node]
[;, break, ;, case, Token, ., BLOCK, :, processBlock, (, node, ,, currentParent, ), ;, break, ;, case, Token, .]
[,, currentParent, ), ;, break, ;, case, Token, ., BLOCK, :, processBlock, (, node, ,, currentParent, ), ;, break, ;]
[), ;, break, ;, case, Token, ., BLOCK, :, processBlock, (, node, ,, currentParent, ), ;, break, ;, case, Token]
[:, processBlock, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., LABEL, :, processLabel, (, node, ,, currentParent]
[., BLOCK, :, processBlock, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., LABEL, :, processLabel, (, node]
[;, break, ;, case, Token, ., LABEL, :, processLabel, (, node, ,, currentParent, ), ;, break, ;, case, Token, .]
[,, currentParent, ), ;, break, ;, case, Token, ., LABEL, :, processLabel, (, node, ,, currentParent, ), ;, break, ;]
[), ;, break, ;, case, Token, ., LABEL, :, processLabel, (, node, ,, currentParent, ), ;, break, ;, case, Token]
[:, processLabel, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, processExprResult, (, node, ,, currentParent]
[., LABEL, :, processLabel, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, processExprResult, (, node]
[;, break, ;, case, Token, ., EXPR_RESULT, :, processExprResult, (, node, ,, currentParent, ), ;, break, ;, case, Token, .]
[,, currentParent, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, processExprResult, (, node, ,, currentParent, ), ;, break, ;]
[), ;, break, ;, case, Token, ., EXPR_RESULT, :, processExprResult, (, node, ,, currentParent, ), ;, break, ;, case, Token]
[:, processExprResult, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., SCRIPT, :, processScript, (, node, ,, currentParent]
[., EXPR_RESULT, :, processExprResult, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., SCRIPT, :, processScript, (, node]
[;, break, ;, case, Token, ., SCRIPT, :, processScript, (, node, ,, currentParent, ), ;, break, ;, }, }, private]
[,, currentParent, ), ;, break, ;, case, Token, ., SCRIPT, :, processScript, (, node, ,, currentParent, ), ;, break, ;]
[), ;, break, ;, case, Token, ., SCRIPT, :, processScript, (, node, ,, currentParent, ), ;, break, ;, }, }]
[:, processScript, (, node, ,, currentParent, ), ;, break, ;, }, }, private, void, processAssignExpr, (, Node, node, ,, JsonML]
[., SCRIPT, :, processScript, (, node, ,, currentParent, ), ;, break, ;, }, }, private, void, processAssignExpr, (, Node, node]
[;, break, ;, }, }, private, void, processAssignExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, processTwoArgExpr]
[,, currentParent, ), ;, break, ;, }, }, private, void, processAssignExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op]
[), ;, break, ;, }, }, private, void, processAssignExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {]
[;, }, private, void, processArrayLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType]
[,, currentParent, ,, TagType, ., AssignExpr, ,, op, ), ;, }, private, void, processArrayLiteral, (, Node, node, ,, JsonML, currentParent]
[,, TagType, ., AssignExpr, ,, op, ), ;, }, private, void, processArrayLiteral, (, Node, node, ,, JsonML, currentParent, ), {]
[,, op, ), ;, }, private, void, processArrayLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new]
[., AssignExpr, ,, op, ), ;, }, private, void, processArrayLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element]
[), ;, }, private, void, processArrayLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[;, currentParent, ., appendChild, (, element, ), ;, Iterator, <, Node, >, it, =, node, ., children, (, ), .]
[), ;, currentParent, ., appendChild, (, element, ), ;, Iterator, <, Node, >, it, =, node, ., children, (, )]
[., ArrayExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, Iterator, <, Node, >, it, =, node, ., children]
[;, Iterator, <, Node, >, it, =, node, ., children, (, ), ., iterator, (, ), ;, while, (, it]
[., appendChild, (, element, ), ;, Iterator, <, Node, >, it, =, node, ., children, (, ), ., iterator, (]
[), ;, Iterator, <, Node, >, it, =, node, ., children, (, ), ., iterator, (, ), ;, while, (]
[;, while, (, it, ., hasNext, (, ), ), {, processNode, (, it, ., next, (, ), ,, element, )]
[., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, processNode, (, it, ., next, (]
[., children, (, ), ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, processNode, (]
[), {, processNode, (, it, ., next, (, ), ,, element, ), ;, }, }, private, void, processBinaryExpr, (, Node]
[., hasNext, (, ), ), {, processNode, (, it, ., next, (, ), ,, element, ), ;, }, }, private]
[;, }, }, private, void, processBinaryExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, processTwoArgExpr, (, node]
[,, element, ), ;, }, }, private, void, processBinaryExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {]
[., next, (, ), ,, element, ), ;, }, }, private, void, processBinaryExpr, (, Node, node, ,, JsonML, currentParent, ,]
[), ;, }, }, private, void, processBinaryExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, processTwoArgExpr, (]
[;, }, private, void, processBlock, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType]
[,, currentParent, ,, TagType, ., BinaryExpr, ,, op, ), ;, }, private, void, processBlock, (, Node, node, ,, JsonML, currentParent]
[,, TagType, ., BinaryExpr, ,, op, ), ;, }, private, void, processBlock, (, Node, node, ,, JsonML, currentParent, ), {]
[,, op, ), ;, }, private, void, processBlock, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new]
[., BinaryExpr, ,, op, ), ;, }, private, void, processBlock, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element]
[), ;, }, private, void, processBlock, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[;, if, (, currentParent, !=, null, ), {, currentParent, ., appendChild, (, element, ), ;, }, processDirectives, (, node, ,]
[), ;, if, (, currentParent, !=, null, ), {, currentParent, ., appendChild, (, element, ), ;, }, processDirectives, (, node]
[., BlockStmt, ), ;, if, (, currentParent, !=, null, ), {, currentParent, ., appendChild, (, element, ), ;, }, processDirectives]
[), {, currentParent, ., appendChild, (, element, ), ;, }, processDirectives, (, node, ,, element, ), ;, for, (, Node]
[!=, null, ), {, currentParent, ., appendChild, (, element, ), ;, }, processDirectives, (, node, ,, element, ), ;, for]
[), {, currentParent, ., appendChild, (, element, ), ;, }, processDirectives, (, node, ,, element, ), ;, for, (, Node]
[;, }, processDirectives, (, node, ,, element, ), ;, for, (, Node, child, :, node, ., children, (, ), )]
[., appendChild, (, element, ), ;, }, processDirectives, (, node, ,, element, ), ;, for, (, Node, child, :, node]
[), ;, }, processDirectives, (, node, ,, element, ), ;, for, (, Node, child, :, node, ., children, (, )]
[;, for, (, Node, child, :, node, ., children, (, ), ), {, processNode, (, child, ,, element, ), ;]
[,, element, ), ;, for, (, Node, child, :, node, ., children, (, ), ), {, processNode, (, child, ,]
[), ;, for, (, Node, child, :, node, ., children, (, ), ), {, processNode, (, child, ,, element, )]
[), {, processNode, (, child, ,, element, ), ;, }, }, private, void, processCall, (, Node, node, ,, JsonML, currentParent]
[., children, (, ), ), {, processNode, (, child, ,, element, ), ;, }, }, private, void, processCall, (, Node]
[;, }, }, private, void, processCall, (, Node, node, ,, JsonML, currentParent, ), {, Iterator, <, Node, >, it, =]
[,, element, ), ;, }, }, private, void, processCall, (, Node, node, ,, JsonML, currentParent, ), {, Iterator, <, Node]
[), ;, }, }, private, void, processCall, (, Node, node, ,, JsonML, currentParent, ), {, Iterator, <, Node, >, it]
[;, Node, child, =, it, ., next, (, ), ;, JsonML, element, ;, switch, (, child, ., getType, (, )]
[., iterator, (, ), ;, Node, child, =, it, ., next, (, ), ;, JsonML, element, ;, switch, (, child]
[., children, (, ), ., iterator, (, ), ;, Node, child, =, it, ., next, (, ), ;, JsonML, element]
[;, JsonML, element, ;, switch, (, child, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token]
[., next, (, ), ;, JsonML, element, ;, switch, (, child, ., getType, (, ), ), {, case, Token, .]
[), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, element, =, new, JsonML, (, TagType, ., InvokeExpr]
[., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, element, =, new, JsonML]
[:, case, Token, ., GETELEM, :, element, =, new, JsonML, (, TagType, ., InvokeExpr, ), ;, element, ., setAttribute, (]
[., GETPROP, :, case, Token, ., GETELEM, :, element, =, new, JsonML, (, TagType, ., InvokeExpr, ), ;, element, .]
[:, element, =, new, JsonML, (, TagType, ., InvokeExpr, ), ;, element, ., setAttribute, (, TagAttr, ., OP, ,, child]
[., GETELEM, :, element, =, new, JsonML, (, TagType, ., InvokeExpr, ), ;, element, ., setAttribute, (, TagAttr, ., OP]
[=, new, JsonML, (, TagType, ., InvokeExpr, ), ;, element, ., setAttribute, (, TagAttr, ., OP, ,, child, ., getType]
[;, element, ., setAttribute, (, TagAttr, ., OP, ,, child, ., getType, (, ), ==, Token, ., GETPROP, ?, "."]
[), ;, element, ., setAttribute, (, TagAttr, ., OP, ,, child, ., getType, (, ), ==, Token, ., GETPROP, ?]
[., InvokeExpr, ), ;, element, ., setAttribute, (, TagAttr, ., OP, ,, child, ., getType, (, ), ==, Token, .]
[;, currentParent, ., appendChild, (, element, ), ;, Node, grandchild, =, child, ., getFirstChild, (, ), ;, processNode, (, grandchild]
[., setAttribute, (, TagAttr, ., OP, ,, child, ., getType, (, ), ==, Token, ., GETPROP, ?, ".", :, "[]"]
[,, child, ., getType, (, ), ==, Token, ., GETPROP, ?, ".", :, "[]", ), ;, currentParent, ., appendChild, (]
[., OP, ,, child, ., getType, (, ), ==, Token, ., GETPROP, ?, ".", :, "[]", ), ;, currentParent, .]
[), ;, currentParent, ., appendChild, (, element, ), ;, Node, grandchild, =, child, ., getFirstChild, (, ), ;, processNode, (]
[?, ".", :, "[]", ), ;, currentParent, ., appendChild, (, element, ), ;, Node, grandchild, =, child, ., getFirstChild, (]
[==, Token, ., GETPROP, ?, ".", :, "[]", ), ;, currentParent, ., appendChild, (, element, ), ;, Node, grandchild, =]
[., getType, (, ), ==, Token, ., GETPROP, ?, ".", :, "[]", ), ;, currentParent, ., appendChild, (, element, )]
[?, ".", :, "[]", ), ;, currentParent, ., appendChild, (, element, ), ;, Node, grandchild, =, child, ., getFirstChild, (]
[., GETPROP, ?, ".", :, "[]", ), ;, currentParent, ., appendChild, (, element, ), ;, Node, grandchild, =, child, .]
[:, "[]", ), ;, currentParent, ., appendChild, (, element, ), ;, Node, grandchild, =, child, ., getFirstChild, (, ), ;]
[), ;, currentParent, ., appendChild, (, element, ), ;, Node, grandchild, =, child, ., getFirstChild, (, ), ;, processNode, (]
[;, Node, grandchild, =, child, ., getFirstChild, (, ), ;, processNode, (, grandchild, ,, element, ), ;, processNode, (, grandchild]
[., appendChild, (, element, ), ;, Node, grandchild, =, child, ., getFirstChild, (, ), ;, processNode, (, grandchild, ,, element]
[), ;, Node, grandchild, =, child, ., getFirstChild, (, ), ;, processNode, (, grandchild, ,, element, ), ;, processNode, (]
[;, processNode, (, grandchild, ,, element, ), ;, processNode, (, grandchild, ., getNext, (, ), ,, element, ), ;, break]
[., getFirstChild, (, ), ;, processNode, (, grandchild, ,, element, ), ;, processNode, (, grandchild, ., getNext, (, ), ,]
[;, processNode, (, grandchild, ., getNext, (, ), ,, element, ), ;, break, ;, case, Token, ., NAME, :, if]
[,, element, ), ;, processNode, (, grandchild, ., getNext, (, ), ,, element, ), ;, break, ;, case, Token, .]
[), ;, processNode, (, grandchild, ., getNext, (, ), ,, element, ), ;, break, ;, case, Token, ., NAME, :]
[;, break, ;, case, Token, ., NAME, :, if, (, child, ., getString, (, ), ., equals, (, "eval", )]
[,, element, ), ;, break, ;, case, Token, ., NAME, :, if, (, child, ., getString, (, ), ., equals]
[., getNext, (, ), ,, element, ), ;, break, ;, case, Token, ., NAME, :, if, (, child, ., getString]
[), ;, break, ;, case, Token, ., NAME, :, if, (, child, ., getString, (, ), ., equals, (, "eval"]
[:, if, (, child, ., getString, (, ), ., equals, (, "eval", ), ), {, element, =, new, JsonML, (]
[., NAME, :, if, (, child, ., getString, (, ), ., equals, (, "eval", ), ), {, element, =, new]
[), {, element, =, new, JsonML, (, TagType, ., EvalExpr, ), ;, }, else, {, element, =, new, JsonML, (]
[., equals, (, "eval", ), ), {, element, =, new, JsonML, (, TagType, ., EvalExpr, ), ;, }, else, {]
[., getString, (, ), ., equals, (, "eval", ), ), {, element, =, new, JsonML, (, TagType, ., EvalExpr, )]
[), ), {, element, =, new, JsonML, (, TagType, ., EvalExpr, ), ;, }, else, {, element, =, new, JsonML]
[=, new, JsonML, (, TagType, ., EvalExpr, ), ;, }, else, {, element, =, new, JsonML, (, TagType, ., IdExpr]
[;, }, else, {, element, =, new, JsonML, (, TagType, ., IdExpr, ), ;, element, ., setAttribute, (, TagAttr, .]
[), ;, }, else, {, element, =, new, JsonML, (, TagType, ., IdExpr, ), ;, element, ., setAttribute, (, TagAttr]
[., EvalExpr, ), ;, }, else, {, element, =, new, JsonML, (, TagType, ., IdExpr, ), ;, element, ., setAttribute]
[=, new, JsonML, (, TagType, ., IdExpr, ), ;, element, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString]
[;, element, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, element, =, new, JsonML]
[), ;, element, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, element, =, new]
[., IdExpr, ), ;, element, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, element]
[;, element, =, new, JsonML, (, TagType, ., CallExpr, ,, element, ), ;, }, currentParent, ., appendChild, (, element, )]
[., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, element, =, new, JsonML, (, TagType]
[,, child, ., getString, (, ), ), ;, element, =, new, JsonML, (, TagType, ., CallExpr, ,, element, ), ;]
[., NAME, ,, child, ., getString, (, ), ), ;, element, =, new, JsonML, (, TagType, ., CallExpr, ,, element]
[), ;, element, =, new, JsonML, (, TagType, ., CallExpr, ,, element, ), ;, }, currentParent, ., appendChild, (, element]
[., getString, (, ), ), ;, element, =, new, JsonML, (, TagType, ., CallExpr, ,, element, ), ;, }, currentParent]
[=, new, JsonML, (, TagType, ., CallExpr, ,, element, ), ;, }, currentParent, ., appendChild, (, element, ), ;, break]
[;, }, currentParent, ., appendChild, (, element, ), ;, break, ;, default, :, element, =, new, JsonML, (, TagType, .]
[,, element, ), ;, }, currentParent, ., appendChild, (, element, ), ;, break, ;, default, :, element, =, new, JsonML]
[., CallExpr, ,, element, ), ;, }, currentParent, ., appendChild, (, element, ), ;, break, ;, default, :, element, =]
[), ;, }, currentParent, ., appendChild, (, element, ), ;, break, ;, default, :, element, =, new, JsonML, (, TagType]
[;, break, ;, default, :, element, =, new, JsonML, (, TagType, ., CallExpr, ), ;, currentParent, ., appendChild, (, element]
[., appendChild, (, element, ), ;, break, ;, default, :, element, =, new, JsonML, (, TagType, ., CallExpr, ), ;]
[), ;, break, ;, default, :, element, =, new, JsonML, (, TagType, ., CallExpr, ), ;, currentParent, ., appendChild, (]
[=, new, JsonML, (, TagType, ., CallExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, processNode, (, child, ,]
[;, currentParent, ., appendChild, (, element, ), ;, processNode, (, child, ,, element, ), ;, break, ;, }, while, (]
[), ;, currentParent, ., appendChild, (, element, ), ;, processNode, (, child, ,, element, ), ;, break, ;, }, while]
[., CallExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, processNode, (, child, ,, element, ), ;, break, ;]
[;, processNode, (, child, ,, element, ), ;, break, ;, }, while, (, it, ., hasNext, (, ), ), {]
[., appendChild, (, element, ), ;, processNode, (, child, ,, element, ), ;, break, ;, }, while, (, it, .]
[), ;, processNode, (, child, ,, element, ), ;, break, ;, }, while, (, it, ., hasNext, (, ), )]
[;, break, ;, }, while, (, it, ., hasNext, (, ), ), {, processNode, (, it, ., next, (, )]
[,, element, ), ;, break, ;, }, while, (, it, ., hasNext, (, ), ), {, processNode, (, it, .]
[), ;, break, ;, }, while, (, it, ., hasNext, (, ), ), {, processNode, (, it, ., next, (]
[), {, processNode, (, it, ., next, (, ), ,, element, ), ;, }, }, private, void, processCase, (, Node]
[., hasNext, (, ), ), {, processNode, (, it, ., next, (, ), ,, element, ), ;, }, }, private]
[;, }, }, private, void, processCase, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =]
[,, element, ), ;, }, }, private, void, processCase, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {]
[., next, (, ), ,, element, ), ;, }, }, private, void, processCase, (, Node, node, ,, JsonML, currentParent, ,]
[), ;, }, }, private, void, processCase, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element]
[;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, if, (, type]
[), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, if, (]
[;, Node, child, =, node, ., getFirstChild, (, ), ;, if, (, type, ==, TagType, ., Case, ), {, processNode]
[., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, if, (, type, ==, TagType]
[), ;, Node, child, =, node, ., getFirstChild, (, ), ;, if, (, type, ==, TagType, ., Case, ), {]
[;, if, (, type, ==, TagType, ., Case, ), {, processNode, (, child, ,, element, ), ;, child, =, child]
[., getFirstChild, (, ), ;, if, (, type, ==, TagType, ., Case, ), {, processNode, (, child, ,, element, )]
[), {, processNode, (, child, ,, element, ), ;, child, =, child, ., getNext, (, ), ;, }, Preconditions, .]
[==, TagType, ., Case, ), {, processNode, (, child, ,, element, ), ;, child, =, child, ., getNext, (, )]
[), {, processNode, (, child, ,, element, ), ;, child, =, child, ., getNext, (, ), ;, }, Preconditions, .]
[., Case, ), {, processNode, (, child, ,, element, ), ;, child, =, child, ., getNext, (, ), ;, }]
[;, child, =, child, ., getNext, (, ), ;, }, Preconditions, ., checkNotNull, (, child, ), ;, Preconditions, ., checkState]
[,, element, ), ;, child, =, child, ., getNext, (, ), ;, }, Preconditions, ., checkNotNull, (, child, ), ;]
[), ;, child, =, child, ., getNext, (, ), ;, }, Preconditions, ., checkNotNull, (, child, ), ;, Preconditions, .]
[=, child, ., getNext, (, ), ;, }, Preconditions, ., checkNotNull, (, child, ), ;, Preconditions, ., checkState, (, child]
[;, }, Preconditions, ., checkNotNull, (, child, ), ;, Preconditions, ., checkState, (, child, ., getType, (, ), ==, Token]
[., getNext, (, ), ;, }, Preconditions, ., checkNotNull, (, child, ), ;, Preconditions, ., checkState, (, child, ., getType]
[;, Preconditions, ., checkState, (, child, ., getType, (, ), ==, Token, ., BLOCK, ), ;, child, =, child, .]
[., checkNotNull, (, child, ), ;, Preconditions, ., checkState, (, child, ., getType, (, ), ==, Token, ., BLOCK, )]
[), ;, Preconditions, ., checkState, (, child, ., getType, (, ), ==, Token, ., BLOCK, ), ;, child, =, child]
[;, child, =, child, ., getFirstChild, (, ), ;, while, (, child, !=, null, ), {, processNode, (, child, ,]
[., checkState, (, child, ., getType, (, ), ==, Token, ., BLOCK, ), ;, child, =, child, ., getFirstChild, (]
[), ;, child, =, child, ., getFirstChild, (, ), ;, while, (, child, !=, null, ), {, processNode, (, child]
[==, Token, ., BLOCK, ), ;, child, =, child, ., getFirstChild, (, ), ;, while, (, child, !=, null, )]
[., getType, (, ), ==, Token, ., BLOCK, ), ;, child, =, child, ., getFirstChild, (, ), ;, while, (]
[), ;, child, =, child, ., getFirstChild, (, ), ;, while, (, child, !=, null, ), {, processNode, (, child]
[., BLOCK, ), ;, child, =, child, ., getFirstChild, (, ), ;, while, (, child, !=, null, ), {, processNode]
[=, child, ., getFirstChild, (, ), ;, while, (, child, !=, null, ), {, processNode, (, child, ,, element, )]
[;, while, (, child, !=, null, ), {, processNode, (, child, ,, element, ), ;, child, =, child, ., getNext]
[., getFirstChild, (, ), ;, while, (, child, !=, null, ), {, processNode, (, child, ,, element, ), ;, child]
[), {, processNode, (, child, ,, element, ), ;, child, =, child, ., getNext, (, ), ;, }, }, private]
[!=, null, ), {, processNode, (, child, ,, element, ), ;, child, =, child, ., getNext, (, ), ;, }]
[), {, processNode, (, child, ,, element, ), ;, child, =, child, ., getNext, (, ), ;, }, }, private]
[;, child, =, child, ., getNext, (, ), ;, }, }, private, void, processCatch, (, Node, node, ,, JsonML, currentParent]
[,, element, ), ;, child, =, child, ., getNext, (, ), ;, }, }, private, void, processCatch, (, Node, node]
[), ;, child, =, child, ., getNext, (, ), ;, }, }, private, void, processCatch, (, Node, node, ,, JsonML]
[=, child, ., getNext, (, ), ;, }, }, private, void, processCatch, (, Node, node, ,, JsonML, currentParent, ), {]
[;, }, }, private, void, processCatch, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[., getNext, (, ), ;, }, }, private, void, processCatch, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element]
[;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, JsonML, patt, =]
[), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, JsonML, patt]
[., CatchClause, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;]
[;, Node, child, =, node, ., getFirstChild, (, ), ;, JsonML, patt, =, new, JsonML, (, TagType, ., IdPatt, )]
[., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, JsonML, patt, =, new, JsonML]
[), ;, Node, child, =, node, ., getFirstChild, (, ), ;, JsonML, patt, =, new, JsonML, (, TagType, ., IdPatt]
[;, JsonML, patt, =, new, JsonML, (, TagType, ., IdPatt, ), ;, patt, ., setAttribute, (, TagAttr, ., NAME, ,]
[., getFirstChild, (, ), ;, JsonML, patt, =, new, JsonML, (, TagType, ., IdPatt, ), ;, patt, ., setAttribute, (]
[;, patt, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, element, ., appendChild, (]
[), ;, patt, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, element, ., appendChild]
[., IdPatt, ), ;, patt, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, element]
[;, element, ., appendChild, (, patt, ), ;, child, =, child, ., getNext, (, ), ;, processNode, (, child, ,]
[., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, element, ., appendChild, (, patt, )]
[,, child, ., getString, (, ), ), ;, element, ., appendChild, (, patt, ), ;, child, =, child, ., getNext]
[., NAME, ,, child, ., getString, (, ), ), ;, element, ., appendChild, (, patt, ), ;, child, =, child]
[), ;, element, ., appendChild, (, patt, ), ;, child, =, child, ., getNext, (, ), ;, processNode, (, child]
[., getString, (, ), ), ;, element, ., appendChild, (, patt, ), ;, child, =, child, ., getNext, (, )]
[;, child, =, child, ., getNext, (, ), ;, processNode, (, child, ,, element, ), ;, }, private, void, processEmpty]
[., appendChild, (, patt, ), ;, child, =, child, ., getNext, (, ), ;, processNode, (, child, ,, element, )]
[), ;, child, =, child, ., getNext, (, ), ;, processNode, (, child, ,, element, ), ;, }, private, void]
[=, child, ., getNext, (, ), ;, processNode, (, child, ,, element, ), ;, }, private, void, processEmpty, (, Node]
[;, processNode, (, child, ,, element, ), ;, }, private, void, processEmpty, (, Node, node, ,, JsonML, currentParent, ), {]
[., getNext, (, ), ;, processNode, (, child, ,, element, ), ;, }, private, void, processEmpty, (, Node, node, ,]
[;, }, private, void, processEmpty, (, Node, node, ,, JsonML, currentParent, ), {, if, (, currentParent, ., getType, (, )]
[,, element, ), ;, }, private, void, processEmpty, (, Node, node, ,, JsonML, currentParent, ), {, if, (, currentParent, .]
[), ;, }, private, void, processEmpty, (, Node, node, ,, JsonML, currentParent, ), {, if, (, currentParent, ., getType, (]
[), {, currentParent, ., appendChild, (, new, JsonML, (, TagType, ., Empty, ), ), ;, }, else, {, currentParent, .]
[==, TagType, ., ArrayExpr, ), {, currentParent, ., appendChild, (, new, JsonML, (, TagType, ., Empty, ), ), ;, }]
[., getType, (, ), ==, TagType, ., ArrayExpr, ), {, currentParent, ., appendChild, (, new, JsonML, (, TagType, ., Empty]
[), {, currentParent, ., appendChild, (, new, JsonML, (, TagType, ., Empty, ), ), ;, }, else, {, currentParent, .]
[., ArrayExpr, ), {, currentParent, ., appendChild, (, new, JsonML, (, TagType, ., Empty, ), ), ;, }, else, {]
[;, }, else, {, currentParent, ., appendChild, (, new, JsonML, (, TagType, ., EmptyStmt, ), ), ;, }, }, private]
[., appendChild, (, new, JsonML, (, TagType, ., Empty, ), ), ;, }, else, {, currentParent, ., appendChild, (, new]
[), ;, }, else, {, currentParent, ., appendChild, (, new, JsonML, (, TagType, ., EmptyStmt, ), ), ;, }, }]
[), ), ;, }, else, {, currentParent, ., appendChild, (, new, JsonML, (, TagType, ., EmptyStmt, ), ), ;, }]
[., Empty, ), ), ;, }, else, {, currentParent, ., appendChild, (, new, JsonML, (, TagType, ., EmptyStmt, ), )]
[;, }, }, private, void, processExprResult, (, Node, node, ,, JsonML, currentParent, ), {, processNode, (, node, ., getFirstChild, (]
[., appendChild, (, new, JsonML, (, TagType, ., EmptyStmt, ), ), ;, }, }, private, void, processExprResult, (, Node, node]
[), ;, }, }, private, void, processExprResult, (, Node, node, ,, JsonML, currentParent, ), {, processNode, (, node, ., getFirstChild]
[), ), ;, }, }, private, void, processExprResult, (, Node, node, ,, JsonML, currentParent, ), {, processNode, (, node, .]
[., EmptyStmt, ), ), ;, }, }, private, void, processExprResult, (, Node, node, ,, JsonML, currentParent, ), {, processNode, (]
[;, }, private, void, processForLoop, (, Node, node, ,, JsonML, currentParent, ), {, if, (, NodeUtil, ., isForIn, (, node]
[,, currentParent, ), ;, }, private, void, processForLoop, (, Node, node, ,, JsonML, currentParent, ), {, if, (, NodeUtil, .]
[., getFirstChild, (, ), ,, currentParent, ), ;, }, private, void, processForLoop, (, Node, node, ,, JsonML, currentParent, ), {]
[), ;, }, private, void, processForLoop, (, Node, node, ,, JsonML, currentParent, ), {, if, (, NodeUtil, ., isForIn, (]
[), {, processLoop, (, node, ,, currentParent, ,, TagType, ., ForInStmt, ), ;, }, else, {, processLoop, (, node, ,]
[., isForIn, (, node, ), ), {, processLoop, (, node, ,, currentParent, ,, TagType, ., ForInStmt, ), ;, }, else]
[), ), {, processLoop, (, node, ,, currentParent, ,, TagType, ., ForInStmt, ), ;, }, else, {, processLoop, (, node]
[;, }, else, {, processLoop, (, node, ,, currentParent, ,, TagType, ., ForStmt, ), ;, }, }, private, void, processFunction]
[,, currentParent, ,, TagType, ., ForInStmt, ), ;, }, else, {, processLoop, (, node, ,, currentParent, ,, TagType, ., ForStmt]
[,, TagType, ., ForInStmt, ), ;, }, else, {, processLoop, (, node, ,, currentParent, ,, TagType, ., ForStmt, ), ;]
[), ;, }, else, {, processLoop, (, node, ,, currentParent, ,, TagType, ., ForStmt, ), ;, }, }, private, void]
[., ForInStmt, ), ;, }, else, {, processLoop, (, node, ,, currentParent, ,, TagType, ., ForStmt, ), ;, }, }]
[;, }, }, private, void, processFunction, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, ;, if, (, NodeUtil]
[,, currentParent, ,, TagType, ., ForStmt, ), ;, }, }, private, void, processFunction, (, Node, node, ,, JsonML, currentParent, )]
[,, TagType, ., ForStmt, ), ;, }, }, private, void, processFunction, (, Node, node, ,, JsonML, currentParent, ), {, JsonML]
[), ;, }, }, private, void, processFunction, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, ;, if, (]
[., ForStmt, ), ;, }, }, private, void, processFunction, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, ;]
[), {, element, =, new, JsonML, (, TagType, ., FunctionDecl, ), ;, }, else, {, element, =, new, JsonML, (]
[., isFunctionDeclaration, (, node, ), ), {, element, =, new, JsonML, (, TagType, ., FunctionDecl, ), ;, }, else, {]
[), ), {, element, =, new, JsonML, (, TagType, ., FunctionDecl, ), ;, }, else, {, element, =, new, JsonML]
[=, new, JsonML, (, TagType, ., FunctionDecl, ), ;, }, else, {, element, =, new, JsonML, (, TagType, ., FunctionExpr]
[;, }, else, {, element, =, new, JsonML, (, TagType, ., FunctionExpr, ), ;, }, currentParent, ., appendChild, (, element]
[), ;, }, else, {, element, =, new, JsonML, (, TagType, ., FunctionExpr, ), ;, }, currentParent, ., appendChild, (]
[., FunctionDecl, ), ;, }, else, {, element, =, new, JsonML, (, TagType, ., FunctionExpr, ), ;, }, currentParent, .]
[=, new, JsonML, (, TagType, ., FunctionExpr, ), ;, }, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[;, }, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, String, name]
[), ;, }, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, String]
[., FunctionExpr, ), ;, }, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, )]
[;, Node, child, =, node, ., getFirstChild, (, ), ;, String, name, =, child, ., getString, (, ), ;, if]
[., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, String, name, =, child, .]
[), ;, Node, child, =, node, ., getFirstChild, (, ), ;, String, name, =, child, ., getString, (, ), ;]
[;, String, name, =, child, ., getString, (, ), ;, if, (, !, name, ., equals, (, "", ), )]
[., getFirstChild, (, ), ;, String, name, =, child, ., getString, (, ), ;, if, (, !, name, ., equals]
[;, if, (, !, name, ., equals, (, "", ), ), {, JsonML, nameElement, =, new, JsonML, (, TagType, .]
[., getString, (, ), ;, if, (, !, name, ., equals, (, "", ), ), {, JsonML, nameElement, =, new]
[), {, JsonML, nameElement, =, new, JsonML, (, TagType, ., IdPatt, ), ;, nameElement, ., setAttribute, (, TagAttr, ., NAME]
[), {, JsonML, nameElement, =, new, JsonML, (, TagType, ., IdPatt, ), ;, nameElement, ., setAttribute, (, TagAttr, ., NAME]
[., equals, (, "", ), ), {, JsonML, nameElement, =, new, JsonML, (, TagType, ., IdPatt, ), ;, nameElement, .]
[), ), {, JsonML, nameElement, =, new, JsonML, (, TagType, ., IdPatt, ), ;, nameElement, ., setAttribute, (, TagAttr, .]
[;, nameElement, ., setAttribute, (, TagAttr, ., NAME, ,, name, ), ;, element, ., appendChild, (, nameElement, ), ;, }]
[), ;, nameElement, ., setAttribute, (, TagAttr, ., NAME, ,, name, ), ;, element, ., appendChild, (, nameElement, ), ;]
[., IdPatt, ), ;, nameElement, ., setAttribute, (, TagAttr, ., NAME, ,, name, ), ;, element, ., appendChild, (, nameElement]
[;, element, ., appendChild, (, nameElement, ), ;, }, else, {, element, ., appendChild, (, new, JsonML, (, TagType, .]
[., setAttribute, (, TagAttr, ., NAME, ,, name, ), ;, element, ., appendChild, (, nameElement, ), ;, }, else, {]
[,, name, ), ;, element, ., appendChild, (, nameElement, ), ;, }, else, {, element, ., appendChild, (, new, JsonML]
[., NAME, ,, name, ), ;, element, ., appendChild, (, nameElement, ), ;, }, else, {, element, ., appendChild, (]
[), ;, element, ., appendChild, (, nameElement, ), ;, }, else, {, element, ., appendChild, (, new, JsonML, (, TagType]
[;, }, else, {, element, ., appendChild, (, new, JsonML, (, TagType, ., Empty, ), ), ;, }, child, =]
[., appendChild, (, nameElement, ), ;, }, else, {, element, ., appendChild, (, new, JsonML, (, TagType, ., Empty, )]
[), ;, }, else, {, element, ., appendChild, (, new, JsonML, (, TagType, ., Empty, ), ), ;, }, child]
[;, }, child, =, child, ., getNext, (, ), ;, JsonML, params, =, new, JsonML, (, TagType, ., ParamDecl, )]
[., appendChild, (, new, JsonML, (, TagType, ., Empty, ), ), ;, }, child, =, child, ., getNext, (, )]
[), ;, }, child, =, child, ., getNext, (, ), ;, JsonML, params, =, new, JsonML, (, TagType, ., ParamDecl]
[), ), ;, }, child, =, child, ., getNext, (, ), ;, JsonML, params, =, new, JsonML, (, TagType, .]
[., Empty, ), ), ;, }, child, =, child, ., getNext, (, ), ;, JsonML, params, =, new, JsonML, (]
[=, child, ., getNext, (, ), ;, JsonML, params, =, new, JsonML, (, TagType, ., ParamDecl, ), ;, element, .]
[;, JsonML, params, =, new, JsonML, (, TagType, ., ParamDecl, ), ;, element, ., appendChild, (, params, ), ;, Iterator]
[., getNext, (, ), ;, JsonML, params, =, new, JsonML, (, TagType, ., ParamDecl, ), ;, element, ., appendChild, (]
[;, element, ., appendChild, (, params, ), ;, Iterator, <, Node, >, it, =, child, ., children, (, ), .]
[), ;, element, ., appendChild, (, params, ), ;, Iterator, <, Node, >, it, =, child, ., children, (, )]
[., ParamDecl, ), ;, element, ., appendChild, (, params, ), ;, Iterator, <, Node, >, it, =, child, ., children]
[;, Iterator, <, Node, >, it, =, child, ., children, (, ), ., iterator, (, ), ;, while, (, it]
[., appendChild, (, params, ), ;, Iterator, <, Node, >, it, =, child, ., children, (, ), ., iterator, (]
[), ;, Iterator, <, Node, >, it, =, child, ., children, (, ), ., iterator, (, ), ;, while, (]
[;, while, (, it, ., hasNext, (, ), ), {, JsonML, param, =, new, JsonML, (, TagType, ., IdPatt, )]
[., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, JsonML, param, =, new, JsonML, (]
[., children, (, ), ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, JsonML, param]
[), {, JsonML, param, =, new, JsonML, (, TagType, ., IdPatt, ), ;, Node, nameNode, =, it, ., next, (]
[., hasNext, (, ), ), {, JsonML, param, =, new, JsonML, (, TagType, ., IdPatt, ), ;, Node, nameNode, =]
[;, Node, nameNode, =, it, ., next, (, ), ;, param, ., setAttribute, (, TagAttr, ., NAME, ,, nameNode, .]
[), ;, Node, nameNode, =, it, ., next, (, ), ;, param, ., setAttribute, (, TagAttr, ., NAME, ,, nameNode]
[., IdPatt, ), ;, Node, nameNode, =, it, ., next, (, ), ;, param, ., setAttribute, (, TagAttr, ., NAME]
[;, param, ., setAttribute, (, TagAttr, ., NAME, ,, nameNode, ., getString, (, ), ), ;, params, ., appendChild, (]
[., next, (, ), ;, param, ., setAttribute, (, TagAttr, ., NAME, ,, nameNode, ., getString, (, ), ), ;]
[;, params, ., appendChild, (, param, ), ;, }, child, =, child, ., getNext, (, ), ;, processDirectives, (, child]
[., setAttribute, (, TagAttr, ., NAME, ,, nameNode, ., getString, (, ), ), ;, params, ., appendChild, (, param, )]
[,, nameNode, ., getString, (, ), ), ;, params, ., appendChild, (, param, ), ;, }, child, =, child, .]
[., NAME, ,, nameNode, ., getString, (, ), ), ;, params, ., appendChild, (, param, ), ;, }, child, =]
[), ;, params, ., appendChild, (, param, ), ;, }, child, =, child, ., getNext, (, ), ;, processDirectives, (]
[., getString, (, ), ), ;, params, ., appendChild, (, param, ), ;, }, child, =, child, ., getNext, (]
[;, }, child, =, child, ., getNext, (, ), ;, processDirectives, (, child, ,, element, ), ;, it, =, child]
[., appendChild, (, param, ), ;, }, child, =, child, ., getNext, (, ), ;, processDirectives, (, child, ,, element]
[), ;, }, child, =, child, ., getNext, (, ), ;, processDirectives, (, child, ,, element, ), ;, it, =]
[=, child, ., getNext, (, ), ;, processDirectives, (, child, ,, element, ), ;, it, =, child, ., children, (]
[;, processDirectives, (, child, ,, element, ), ;, it, =, child, ., children, (, ), ., iterator, (, ), ;]
[., getNext, (, ), ;, processDirectives, (, child, ,, element, ), ;, it, =, child, ., children, (, ), .]
[;, it, =, child, ., children, (, ), ., iterator, (, ), ;, while, (, it, ., hasNext, (, )]
[,, element, ), ;, it, =, child, ., children, (, ), ., iterator, (, ), ;, while, (, it, .]
[), ;, it, =, child, ., children, (, ), ., iterator, (, ), ;, while, (, it, ., hasNext, (]
[=, child, ., children, (, ), ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {]
[;, while, (, it, ., hasNext, (, ), ), {, processNode, (, it, ., next, (, ), ,, element, )]
[., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, processNode, (, it, ., next, (]
[., children, (, ), ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, processNode, (]
[), {, processNode, (, it, ., next, (, ), ,, element, ), ;, }, }, private, void, processHook, (, Node]
[., hasNext, (, ), ), {, processNode, (, it, ., next, (, ), ,, element, ), ;, }, }, private]
[;, }, }, private, void, processHook, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[,, element, ), ;, }, }, private, void, processHook, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =]
[., next, (, ), ,, element, ), ;, }, }, private, void, processHook, (, Node, node, ,, JsonML, currentParent, )]
[), ;, }, }, private, void, processHook, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML]
[;, currentParent, ., appendChild, (, element, ), ;, processChildren, (, node, ,, element, ), ;, }, private, void, processIf, (]
[), ;, currentParent, ., appendChild, (, element, ), ;, processChildren, (, node, ,, element, ), ;, }, private, void, processIf]
[., ConditionalExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, processChildren, (, node, ,, element, ), ;, }, private]
[;, processChildren, (, node, ,, element, ), ;, }, private, void, processIf, (, Node, node, ,, JsonML, currentParent, ), {]
[., appendChild, (, element, ), ;, processChildren, (, node, ,, element, ), ;, }, private, void, processIf, (, Node, node]
[), ;, processChildren, (, node, ,, element, ), ;, }, private, void, processIf, (, Node, node, ,, JsonML, currentParent, )]
[;, }, private, void, processIf, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType]
[,, element, ), ;, }, private, void, processIf, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new]
[), ;, }, private, void, processIf, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[;, currentParent, ., appendChild, (, element, ), ;, Iterator, <, Node, >, it, =, node, ., children, (, ), .]
[), ;, currentParent, ., appendChild, (, element, ), ;, Iterator, <, Node, >, it, =, node, ., children, (, )]
[., IfStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, Iterator, <, Node, >, it, =, node, ., children]
[;, Iterator, <, Node, >, it, =, node, ., children, (, ), ., iterator, (, ), ;, while, (, it]
[., appendChild, (, element, ), ;, Iterator, <, Node, >, it, =, node, ., children, (, ), ., iterator, (]
[), ;, Iterator, <, Node, >, it, =, node, ., children, (, ), ., iterator, (, ), ;, while, (]
[;, while, (, it, ., hasNext, (, ), ), {, processNode, (, it, ., next, (, ), ,, element, )]
[., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, processNode, (, it, ., next, (]
[., children, (, ), ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, processNode, (]
[), {, processNode, (, it, ., next, (, ), ,, element, ), ;, }, int, childCount, =, node, ., getChildCount]
[., hasNext, (, ), ), {, processNode, (, it, ., next, (, ), ,, element, ), ;, }, int, childCount]
[;, }, int, childCount, =, node, ., getChildCount, (, ), ;, Preconditions, ., checkState, (, childCount, >=, 2, ), ;]
[,, element, ), ;, }, int, childCount, =, node, ., getChildCount, (, ), ;, Preconditions, ., checkState, (, childCount, >=]
[., next, (, ), ,, element, ), ;, }, int, childCount, =, node, ., getChildCount, (, ), ;, Preconditions, .]
[), ;, }, int, childCount, =, node, ., getChildCount, (, ), ;, Preconditions, ., checkState, (, childCount, >=, 2, )]
[;, Preconditions, ., checkState, (, childCount, >=, 2, ), ;, if, (, childCount, <, 3, ), {, element, ., appendChild]
[., getChildCount, (, ), ;, Preconditions, ., checkState, (, childCount, >=, 2, ), ;, if, (, childCount, <, 3, )]
[;, if, (, childCount, <, 3, ), {, element, ., appendChild, (, new, JsonML, (, TagType, ., EmptyStmt, ), )]
[., checkState, (, childCount, >=, 2, ), ;, if, (, childCount, <, 3, ), {, element, ., appendChild, (, new]
[), ;, if, (, childCount, <, 3, ), {, element, ., appendChild, (, new, JsonML, (, TagType, ., EmptyStmt, )]
[>=, 2, ), ;, if, (, childCount, <, 3, ), {, element, ., appendChild, (, new, JsonML, (, TagType, .]
[), ;, if, (, childCount, <, 3, ), {, element, ., appendChild, (, new, JsonML, (, TagType, ., EmptyStmt, )]
[), {, element, ., appendChild, (, new, JsonML, (, TagType, ., EmptyStmt, ), ), ;, }, }, private, void, processIncrDecrExpr]
[<, 3, ), {, element, ., appendChild, (, new, JsonML, (, TagType, ., EmptyStmt, ), ), ;, }, }, private]
[), {, element, ., appendChild, (, new, JsonML, (, TagType, ., EmptyStmt, ), ), ;, }, }, private, void, processIncrDecrExpr]
[;, }, }, private, void, processIncrDecrExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML, element, =]
[., appendChild, (, new, JsonML, (, TagType, ., EmptyStmt, ), ), ;, }, }, private, void, processIncrDecrExpr, (, Node, node]
[), ;, }, }, private, void, processIncrDecrExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML, element]
[), ), ;, }, }, private, void, processIncrDecrExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML]
[., EmptyStmt, ), ), ;, }, }, private, void, processIncrDecrExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, )]
[;, currentParent, ., appendChild, (, element, ), ;, if, (, op, ., equals, (, "++", ), ), {, element, .]
[), ;, currentParent, ., appendChild, (, element, ), ;, if, (, op, ., equals, (, "++", ), ), {, element]
[., CountExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, if, (, op, ., equals, (, "++", ), )]
[;, if, (, op, ., equals, (, "++", ), ), {, element, ., setAttribute, (, TagAttr, ., OP, ,, "++"]
[., appendChild, (, element, ), ;, if, (, op, ., equals, (, "++", ), ), {, element, ., setAttribute, (]
[), ;, if, (, op, ., equals, (, "++", ), ), {, element, ., setAttribute, (, TagAttr, ., OP, ,]
[), {, element, ., setAttribute, (, TagAttr, ., OP, ,, "++", ), ;, }, else, {, element, ., setAttribute, (]
[., equals, (, "++", ), ), {, element, ., setAttribute, (, TagAttr, ., OP, ,, "++", ), ;, }, else]
[), ), {, element, ., setAttribute, (, TagAttr, ., OP, ,, "++", ), ;, }, else, {, element, ., setAttribute]
[;, }, else, {, element, ., setAttribute, (, TagAttr, ., OP, ,, "--", ), ;, }, if, (, node, .]
[., setAttribute, (, TagAttr, ., OP, ,, "++", ), ;, }, else, {, element, ., setAttribute, (, TagAttr, ., OP]
[,, "++", ), ;, }, else, {, element, ., setAttribute, (, TagAttr, ., OP, ,, "--", ), ;, }, if]
[., OP, ,, "++", ), ;, }, else, {, element, ., setAttribute, (, TagAttr, ., OP, ,, "--", ), ;]
[), ;, }, else, {, element, ., setAttribute, (, TagAttr, ., OP, ,, "--", ), ;, }, if, (, node]
[;, }, if, (, node, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ==, 1, ), {, element, ., setAttribute, (]
[., setAttribute, (, TagAttr, ., OP, ,, "--", ), ;, }, if, (, node, ., getIntProp, (, Node, ., INCRDECR_PROP]
[,, "--", ), ;, }, if, (, node, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ==, 1, ), {, element]
[., OP, ,, "--", ), ;, }, if, (, node, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ==, 1, )]
[), ;, }, if, (, node, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ==, 1, ), {, element, ., setAttribute]
[), {, element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,, false, ), ;, }, else, {, element, ., setAttribute, (]
[==, 1, ), {, element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,, false, ), ;, }, else, {, element, .]
[., getIntProp, (, Node, ., INCRDECR_PROP, ), ==, 1, ), {, element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,, false]
[), ==, 1, ), {, element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,, false, ), ;, }, else, {, element]
[., INCRDECR_PROP, ), ==, 1, ), {, element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,, false, ), ;, }, else]
[), {, element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,, false, ), ;, }, else, {, element, ., setAttribute, (]
[;, }, else, {, element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,, true, ), ;, }, processNode, (, node, .]
[., setAttribute, (, TagAttr, ., IS_PREFIX, ,, false, ), ;, }, else, {, element, ., setAttribute, (, TagAttr, ., IS_PREFIX]
[,, false, ), ;, }, else, {, element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,, true, ), ;, }, processNode]
[., IS_PREFIX, ,, false, ), ;, }, else, {, element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,, true, ), ;]
[), ;, }, else, {, element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,, true, ), ;, }, processNode, (, node]
[;, }, processNode, (, node, ., getFirstChild, (, ), ,, element, ), ;, }, private, void, processJmp, (, Node, node]
[., setAttribute, (, TagAttr, ., IS_PREFIX, ,, true, ), ;, }, processNode, (, node, ., getFirstChild, (, ), ,, element]
[,, true, ), ;, }, processNode, (, node, ., getFirstChild, (, ), ,, element, ), ;, }, private, void, processJmp]
[., IS_PREFIX, ,, true, ), ;, }, processNode, (, node, ., getFirstChild, (, ), ,, element, ), ;, }, private]
[), ;, }, processNode, (, node, ., getFirstChild, (, ), ,, element, ), ;, }, private, void, processJmp, (, Node]
[;, }, private, void, processJmp, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new]
[,, element, ), ;, }, private, void, processJmp, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML]
[., getFirstChild, (, ), ,, element, ), ;, }, private, void, processJmp, (, Node, node, ,, JsonML, currentParent, ,, TagType]
[), ;, }, private, void, processJmp, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =]
[;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, if, (, child]
[), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, if, (]
[;, Node, child, =, node, ., getFirstChild, (, ), ;, if, (, child, !=, null, ), {, element, ., setAttribute]
[., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, if, (, child, !=, null]
[), ;, Node, child, =, node, ., getFirstChild, (, ), ;, if, (, child, !=, null, ), {, element, .]
[;, if, (, child, !=, null, ), {, element, ., setAttribute, (, TagAttr, ., LABEL, ,, child, ., getString, (]
[., getFirstChild, (, ), ;, if, (, child, !=, null, ), {, element, ., setAttribute, (, TagAttr, ., LABEL, ,]
[), {, element, ., setAttribute, (, TagAttr, ., LABEL, ,, child, ., getString, (, ), ), ;, }, }, private]
[!=, null, ), {, element, ., setAttribute, (, TagAttr, ., LABEL, ,, child, ., getString, (, ), ), ;, }]
[), {, element, ., setAttribute, (, TagAttr, ., LABEL, ,, child, ., getString, (, ), ), ;, }, }, private]
[;, }, }, private, void, processLabel, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[., setAttribute, (, TagAttr, ., LABEL, ,, child, ., getString, (, ), ), ;, }, }, private, void, processLabel, (]
[,, child, ., getString, (, ), ), ;, }, }, private, void, processLabel, (, Node, node, ,, JsonML, currentParent, )]
[., LABEL, ,, child, ., getString, (, ), ), ;, }, }, private, void, processLabel, (, Node, node, ,, JsonML]
[), ;, }, }, private, void, processLabel, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML]
[., getString, (, ), ), ;, }, }, private, void, processLabel, (, Node, node, ,, JsonML, currentParent, ), {, JsonML]
[;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, element, ., setAttribute]
[), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, element, .]
[., LabelledStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;]
[;, Node, child, =, node, ., getFirstChild, (, ), ;, element, ., setAttribute, (, TagAttr, ., LABEL, ,, child, .]
[., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, element, ., setAttribute, (, TagAttr]
[), ;, Node, child, =, node, ., getFirstChild, (, ), ;, element, ., setAttribute, (, TagAttr, ., LABEL, ,, child]
[;, element, ., setAttribute, (, TagAttr, ., LABEL, ,, child, ., getString, (, ), ), ;, child, =, child, .]
[., getFirstChild, (, ), ;, element, ., setAttribute, (, TagAttr, ., LABEL, ,, child, ., getString, (, ), ), ;]
[;, child, =, child, ., getNext, (, ), ;, processNode, (, child, ,, element, ), ;, }, private, void, processLiteral]
[., setAttribute, (, TagAttr, ., LABEL, ,, child, ., getString, (, ), ), ;, child, =, child, ., getNext, (]
[,, child, ., getString, (, ), ), ;, child, =, child, ., getNext, (, ), ;, processNode, (, child, ,]
[., LABEL, ,, child, ., getString, (, ), ), ;, child, =, child, ., getNext, (, ), ;, processNode, (]
[), ;, child, =, child, ., getNext, (, ), ;, processNode, (, child, ,, element, ), ;, }, private, void]
[., getString, (, ), ), ;, child, =, child, ., getNext, (, ), ;, processNode, (, child, ,, element, )]
[=, child, ., getNext, (, ), ;, processNode, (, child, ,, element, ), ;, }, private, void, processLiteral, (, Node]
[;, processNode, (, child, ,, element, ), ;, }, private, void, processLiteral, (, Node, node, ,, JsonML, currentParent, ), {]
[., getNext, (, ), ;, processNode, (, child, ,, element, ), ;, }, private, void, processLiteral, (, Node, node, ,]
[;, }, private, void, processLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType]
[,, element, ), ;, }, private, void, processLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new]
[), ;, }, private, void, processLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[;, switch, (, node, ., getType, (, ), ), {, case, Token, ., NUMBER, :, element, ., setAttribute, (, TagAttr]
[), ;, switch, (, node, ., getType, (, ), ), {, case, Token, ., NUMBER, :, element, ., setAttribute, (]
[., LiteralExpr, ), ;, switch, (, node, ., getType, (, ), ), {, case, Token, ., NUMBER, :, element, .]
[), {, case, Token, ., NUMBER, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "number", ), ;, element, .]
[., getType, (, ), ), {, case, Token, ., NUMBER, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "number"]
[:, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "number", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,]
[., NUMBER, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "number", ), ;, element, ., setAttribute, (, TagAttr, .]
[;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, node, ., getDouble, (, ), ), ;, break, ;, case, Token]
[., setAttribute, (, TagAttr, ., TYPE, ,, "number", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, node, .]
[,, "number", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, node, ., getDouble, (, ), ), ;, break]
[., TYPE, ,, "number", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, node, ., getDouble, (, ), )]
[), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, node, ., getDouble, (, ), ), ;, break, ;, case]
[;, break, ;, case, Token, ., STRING, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "string", ), ;, element]
[., setAttribute, (, TagAttr, ., VALUE, ,, node, ., getDouble, (, ), ), ;, break, ;, case, Token, ., STRING]
[,, node, ., getDouble, (, ), ), ;, break, ;, case, Token, ., STRING, :, element, ., setAttribute, (, TagAttr]
[., VALUE, ,, node, ., getDouble, (, ), ), ;, break, ;, case, Token, ., STRING, :, element, ., setAttribute]
[), ;, break, ;, case, Token, ., STRING, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "string", ), ;]
[., getDouble, (, ), ), ;, break, ;, case, Token, ., STRING, :, element, ., setAttribute, (, TagAttr, ., TYPE]
[:, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "string", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,]
[., STRING, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "string", ), ;, element, ., setAttribute, (, TagAttr, .]
[;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, node, ., getString, (, ), ), ;, break, ;, case, Token]
[., setAttribute, (, TagAttr, ., TYPE, ,, "string", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, node, .]
[,, "string", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, node, ., getString, (, ), ), ;, break]
[., TYPE, ,, "string", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, node, ., getString, (, ), )]
[), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, node, ., getString, (, ), ), ;, break, ;, case]
[;, break, ;, case, Token, ., NULL, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "null", ), ;, element]
[., setAttribute, (, TagAttr, ., VALUE, ,, node, ., getString, (, ), ), ;, break, ;, case, Token, ., NULL]
[,, node, ., getString, (, ), ), ;, break, ;, case, Token, ., NULL, :, element, ., setAttribute, (, TagAttr]
[., VALUE, ,, node, ., getString, (, ), ), ;, break, ;, case, Token, ., NULL, :, element, ., setAttribute]
[), ;, break, ;, case, Token, ., NULL, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "null", ), ;]
[., getString, (, ), ), ;, break, ;, case, Token, ., NULL, :, element, ., setAttribute, (, TagAttr, ., TYPE]
[:, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "null", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,]
[., NULL, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "null", ), ;, element, ., setAttribute, (, TagAttr, .]
[;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, null, ), ;, break, ;, case, Token, ., TRUE, :, element]
[., setAttribute, (, TagAttr, ., TYPE, ,, "null", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, null, )]
[,, "null", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, null, ), ;, break, ;, case, Token, .]
[., TYPE, ,, "null", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, null, ), ;, break, ;, case]
[), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, null, ), ;, break, ;, case, Token, ., TRUE, :]
[;, break, ;, case, Token, ., TRUE, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", ), ;, element]
[., setAttribute, (, TagAttr, ., VALUE, ,, null, ), ;, break, ;, case, Token, ., TRUE, :, element, ., setAttribute]
[,, null, ), ;, break, ;, case, Token, ., TRUE, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean"]
[., VALUE, ,, null, ), ;, break, ;, case, Token, ., TRUE, :, element, ., setAttribute, (, TagAttr, ., TYPE]
[), ;, break, ;, case, Token, ., TRUE, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", ), ;]
[:, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,]
[., TRUE, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", ), ;, element, ., setAttribute, (, TagAttr, .]
[;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, true, ), ;, break, ;, case, Token, ., FALSE, :, element]
[., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, true, )]
[,, "boolean", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, true, ), ;, break, ;, case, Token, .]
[., TYPE, ,, "boolean", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, true, ), ;, break, ;, case]
[), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, true, ), ;, break, ;, case, Token, ., FALSE, :]
[;, break, ;, case, Token, ., FALSE, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", ), ;, element]
[., setAttribute, (, TagAttr, ., VALUE, ,, true, ), ;, break, ;, case, Token, ., FALSE, :, element, ., setAttribute]
[,, true, ), ;, break, ;, case, Token, ., FALSE, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean"]
[., VALUE, ,, true, ), ;, break, ;, case, Token, ., FALSE, :, element, ., setAttribute, (, TagAttr, ., TYPE]
[), ;, break, ;, case, Token, ., FALSE, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", ), ;]
[:, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,]
[., FALSE, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", ), ;, element, ., setAttribute, (, TagAttr, .]
[;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, false, ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, false, )]
[,, "boolean", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, false, ), ;, break, ;, default, :, throw]
[., TYPE, ,, "boolean", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, false, ), ;, break, ;, default]
[), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, false, ), ;, break, ;, default, :, throw, new, IllegalArgumentException]
[;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Illegal type of node.", ), ;, }, currentParent, ., appendChild, (, element, ), ;]
[., setAttribute, (, TagAttr, ., VALUE, ,, false, ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Illegal type of node.", )]
[,, false, ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Illegal type of node.", ), ;, }, currentParent, ., appendChild, (]
[., VALUE, ,, false, ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Illegal type of node.", ), ;, }, currentParent, .]
[), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Illegal type of node.", ), ;, }, currentParent, ., appendChild, (, element, )]
[;, }, currentParent, ., appendChild, (, element, ), ;, }, private, void, processLogicalExpr, (, Node, node, ,, JsonML, currentParent, ,]
[), ;, }, currentParent, ., appendChild, (, element, ), ;, }, private, void, processLogicalExpr, (, Node, node, ,, JsonML, currentParent]
[;, }, private, void, processLogicalExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, if, (, op, .]
[., appendChild, (, element, ), ;, }, private, void, processLogicalExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, )]
[), ;, }, private, void, processLogicalExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, if, (, op]
[), {, processTwoArgExpr, (, node, ,, currentParent, ,, TagType, ., LogicalOrExpr, ), ;, }, else, if, (, op, ., endsWith]
[., equals, (, "||", ), ), {, processTwoArgExpr, (, node, ,, currentParent, ,, TagType, ., LogicalOrExpr, ), ;, }, else]
[), ), {, processTwoArgExpr, (, node, ,, currentParent, ,, TagType, ., LogicalOrExpr, ), ;, }, else, if, (, op, .]
[;, }, else, if, (, op, ., endsWith, (, "&&", ), ), {, processTwoArgExpr, (, node, ,, currentParent, ,, TagType]
[,, currentParent, ,, TagType, ., LogicalOrExpr, ), ;, }, else, if, (, op, ., endsWith, (, "&&", ), ), {]
[,, TagType, ., LogicalOrExpr, ), ;, }, else, if, (, op, ., endsWith, (, "&&", ), ), {, processTwoArgExpr, (]
[), ;, }, else, if, (, op, ., endsWith, (, "&&", ), ), {, processTwoArgExpr, (, node, ,, currentParent, ,]
[., LogicalOrExpr, ), ;, }, else, if, (, op, ., endsWith, (, "&&", ), ), {, processTwoArgExpr, (, node, ,]
[), {, processTwoArgExpr, (, node, ,, currentParent, ,, TagType, ., LogicalAndExpr, ), ;, }, else, {, throw, new, IllegalArgumentException, (]
[., endsWith, (, "&&", ), ), {, processTwoArgExpr, (, node, ,, currentParent, ,, TagType, ., LogicalAndExpr, ), ;, }, else]
[), ), {, processTwoArgExpr, (, node, ,, currentParent, ,, TagType, ., LogicalAndExpr, ), ;, }, else, {, throw, new, IllegalArgumentException]
[;, }, else, {, throw, new, IllegalArgumentException, (, "Unsupported value of op argument.", ), ;, }, }, private, void, processLoop, (, Node, node, ,]
[,, currentParent, ,, TagType, ., LogicalAndExpr, ), ;, }, else, {, throw, new, IllegalArgumentException, (, "Unsupported value of op argument.", ), ;, }, }]
[,, TagType, ., LogicalAndExpr, ), ;, }, else, {, throw, new, IllegalArgumentException, (, "Unsupported value of op argument.", ), ;, }, }, private, void]
[), ;, }, else, {, throw, new, IllegalArgumentException, (, "Unsupported value of op argument.", ), ;, }, }, private, void, processLoop, (, Node, node]
[., LogicalAndExpr, ), ;, }, else, {, throw, new, IllegalArgumentException, (, "Unsupported value of op argument.", ), ;, }, }, private, void, processLoop, (]
[;, }, }, private, void, processLoop, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =]
[), ;, }, }, private, void, processLoop, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element]
[;, currentParent, ., appendChild, (, element, ), ;, processChildren, (, node, ,, element, ), ;, }, private, void, processMemberExpr, (]
[), ;, currentParent, ., appendChild, (, element, ), ;, processChildren, (, node, ,, element, ), ;, }, private, void, processMemberExpr]
[;, processChildren, (, node, ,, element, ), ;, }, private, void, processMemberExpr, (, Node, node, ,, JsonML, currentParent, ,, String]
[., appendChild, (, element, ), ;, processChildren, (, node, ,, element, ), ;, }, private, void, processMemberExpr, (, Node, node]
[), ;, processChildren, (, node, ,, element, ), ;, }, private, void, processMemberExpr, (, Node, node, ,, JsonML, currentParent, ,]
[;, }, private, void, processMemberExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML, element, =, new]
[,, element, ), ;, }, private, void, processMemberExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML]
[), ;, }, private, void, processMemberExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML, element, =]
[;, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, currentParent, ., appendChild, (, element, ), ;, Node]
[), ;, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, currentParent, ., appendChild, (, element, ), ;]
[., MemberExpr, ), ;, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, currentParent, ., appendChild, (, element]
[;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child]
[., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[,, op, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;]
[., OP, ,, op, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (]
[), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (]
[;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, processNode, (, child]
[., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element]
[), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, processNode, (]
[;, processNode, (, child, ,, element, ), ;, processNode, (, child, ., getNext, (, ), ,, element, ), ;, }]
[., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, processNode, (, child, ., getNext, (, ), ,]
[;, processNode, (, child, ., getNext, (, ), ,, element, ), ;, }, private, void, processName, (, Node, node, ,]
[,, element, ), ;, processNode, (, child, ., getNext, (, ), ,, element, ), ;, }, private, void, processName, (]
[), ;, processNode, (, child, ., getNext, (, ), ,, element, ), ;, }, private, void, processName, (, Node, node]
[;, }, private, void, processName, (, Node, node, ,, JsonML, currentParent, ), {, Preconditions, ., checkState, (, !, node, .]
[,, element, ), ;, }, private, void, processName, (, Node, node, ,, JsonML, currentParent, ), {, Preconditions, ., checkState, (]
[., getNext, (, ), ,, element, ), ;, }, private, void, processName, (, Node, node, ,, JsonML, currentParent, ), {]
[), ;, }, private, void, processName, (, Node, node, ,, JsonML, currentParent, ), {, Preconditions, ., checkState, (, !, node]
[;, JsonML, element, =, new, JsonML, (, TagType, ., IdExpr, ), ;, element, ., setAttribute, (, TagAttr, ., NAME, ,]
[., checkState, (, !, node, ., hasChildren, (, ), ), ;, JsonML, element, =, new, JsonML, (, TagType, ., IdExpr]
[), ;, JsonML, element, =, new, JsonML, (, TagType, ., IdExpr, ), ;, element, ., setAttribute, (, TagAttr, ., NAME]
[), ;, JsonML, element, =, new, JsonML, (, TagType, ., IdExpr, ), ;, element, ., setAttribute, (, TagAttr, ., NAME]
[., hasChildren, (, ), ), ;, JsonML, element, =, new, JsonML, (, TagType, ., IdExpr, ), ;, element, ., setAttribute]
[;, element, ., setAttribute, (, TagAttr, ., NAME, ,, node, ., getString, (, ), ), ;, currentParent, ., appendChild, (]
[), ;, element, ., setAttribute, (, TagAttr, ., NAME, ,, node, ., getString, (, ), ), ;, currentParent, ., appendChild]
[., IdExpr, ), ;, element, ., setAttribute, (, TagAttr, ., NAME, ,, node, ., getString, (, ), ), ;, currentParent]
[;, currentParent, ., appendChild, (, element, ), ;, }, private, void, processNew, (, Node, node, ,, JsonML, currentParent, ,, TagType]
[., setAttribute, (, TagAttr, ., NAME, ,, node, ., getString, (, ), ), ;, currentParent, ., appendChild, (, element, )]
[,, node, ., getString, (, ), ), ;, currentParent, ., appendChild, (, element, ), ;, }, private, void, processNew, (]
[., NAME, ,, node, ., getString, (, ), ), ;, currentParent, ., appendChild, (, element, ), ;, }, private, void]
[), ;, currentParent, ., appendChild, (, element, ), ;, }, private, void, processNew, (, Node, node, ,, JsonML, currentParent, ,]
[., getString, (, ), ), ;, currentParent, ., appendChild, (, element, ), ;, }, private, void, processNew, (, Node, node]
[;, }, private, void, processNew, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new]
[., appendChild, (, element, ), ;, }, private, void, processNew, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, )]
[), ;, }, private, void, processNew, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =]
[;, currentParent, ., appendChild, (, element, ), ;, processChildren, (, node, ,, element, ), ;, }, private, void, processObjectLiteral, (]
[), ;, currentParent, ., appendChild, (, element, ), ;, processChildren, (, node, ,, element, ), ;, }, private, void, processObjectLiteral]
[;, processChildren, (, node, ,, element, ), ;, }, private, void, processObjectLiteral, (, Node, node, ,, JsonML, currentParent, ), {]
[., appendChild, (, element, ), ;, processChildren, (, node, ,, element, ), ;, }, private, void, processObjectLiteral, (, Node, node]
[), ;, processChildren, (, node, ,, element, ), ;, }, private, void, processObjectLiteral, (, Node, node, ,, JsonML, currentParent, )]
[;, }, private, void, processObjectLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType]
[,, element, ), ;, }, private, void, processObjectLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new]
[), ;, }, private, void, processObjectLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[;, currentParent, ., appendChild, (, element, ), ;, for, (, Node, key, :, node, ., children, (, ), ), {]
[), ;, currentParent, ., appendChild, (, element, ), ;, for, (, Node, key, :, node, ., children, (, ), )]
[., ObjectExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, for, (, Node, key, :, node, ., children, (]
[;, for, (, Node, key, :, node, ., children, (, ), ), {, Node, value, =, key, ., getFirstChild, (]
[., appendChild, (, element, ), ;, for, (, Node, key, :, node, ., children, (, ), ), {, Node, value]
[), ;, for, (, Node, key, :, node, ., children, (, ), ), {, Node, value, =, key, ., getFirstChild]
[), {, Node, value, =, key, ., getFirstChild, (, ), ;, JsonML, item, ;, Object, name, ;, switch, (, key]
[., children, (, ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, JsonML, item, ;, Object, name]
[;, JsonML, item, ;, Object, name, ;, switch, (, key, ., getType, (, ), ), {, case, Token, ., STRING_KEY]
[., getFirstChild, (, ), ;, JsonML, item, ;, Object, name, ;, switch, (, key, ., getType, (, ), ), {]
[), {, case, Token, ., STRING_KEY, :, item, =, new, JsonML, (, TagType, ., DataProp, ), ;, name, =, key]
[., getType, (, ), ), {, case, Token, ., STRING_KEY, :, item, =, new, JsonML, (, TagType, ., DataProp, )]
[:, item, =, new, JsonML, (, TagType, ., DataProp, ), ;, name, =, key, ., getString, (, ), ;, break]
[., STRING_KEY, :, item, =, new, JsonML, (, TagType, ., DataProp, ), ;, name, =, key, ., getString, (, )]
[=, new, JsonML, (, TagType, ., DataProp, ), ;, name, =, key, ., getString, (, ), ;, break, ;, case]
[;, name, =, key, ., getString, (, ), ;, break, ;, case, Token, ., GETTER_DEF, :, item, =, new, JsonML]
[), ;, name, =, key, ., getString, (, ), ;, break, ;, case, Token, ., GETTER_DEF, :, item, =, new]
[., DataProp, ), ;, name, =, key, ., getString, (, ), ;, break, ;, case, Token, ., GETTER_DEF, :, item]
[=, key, ., getString, (, ), ;, break, ;, case, Token, ., GETTER_DEF, :, item, =, new, JsonML, (, TagType]
[;, break, ;, case, Token, ., GETTER_DEF, :, item, =, new, JsonML, (, TagType, ., GetterProp, ), ;, name, =]
[., getString, (, ), ;, break, ;, case, Token, ., GETTER_DEF, :, item, =, new, JsonML, (, TagType, ., GetterProp]
[:, item, =, new, JsonML, (, TagType, ., GetterProp, ), ;, name, =, key, ., getString, (, ), ;, break]
[., GETTER_DEF, :, item, =, new, JsonML, (, TagType, ., GetterProp, ), ;, name, =, key, ., getString, (, )]
[=, new, JsonML, (, TagType, ., GetterProp, ), ;, name, =, key, ., getString, (, ), ;, break, ;, case]
[;, name, =, key, ., getString, (, ), ;, break, ;, case, Token, ., SETTER_DEF, :, item, =, new, JsonML]
[), ;, name, =, key, ., getString, (, ), ;, break, ;, case, Token, ., SETTER_DEF, :, item, =, new]
[., GetterProp, ), ;, name, =, key, ., getString, (, ), ;, break, ;, case, Token, ., SETTER_DEF, :, item]
[=, key, ., getString, (, ), ;, break, ;, case, Token, ., SETTER_DEF, :, item, =, new, JsonML, (, TagType]
[;, break, ;, case, Token, ., SETTER_DEF, :, item, =, new, JsonML, (, TagType, ., SetterProp, ), ;, name, =]
[., getString, (, ), ;, break, ;, case, Token, ., SETTER_DEF, :, item, =, new, JsonML, (, TagType, ., SetterProp]
[:, item, =, new, JsonML, (, TagType, ., SetterProp, ), ;, name, =, key, ., getString, (, ), ;, break]
[., SETTER_DEF, :, item, =, new, JsonML, (, TagType, ., SetterProp, ), ;, name, =, key, ., getString, (, )]
[=, new, JsonML, (, TagType, ., SetterProp, ), ;, name, =, key, ., getString, (, ), ;, break, ;, default]
[;, name, =, key, ., getString, (, ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Illegal type of node.", ), ;]
[), ;, name, =, key, ., getString, (, ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Illegal type of node.", )]
[., SetterProp, ), ;, name, =, key, ., getString, (, ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[=, key, ., getString, (, ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Illegal type of node.", ), ;, }, item]
[;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Illegal type of node.", ), ;, }, item, ., setAttribute, (, TagAttr, ., NAME]
[., getString, (, ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Illegal type of node.", ), ;, }, item, ., setAttribute]
[;, }, item, ., setAttribute, (, TagAttr, ., NAME, ,, name, ), ;, processNode, (, value, ,, item, ), ;]
[), ;, }, item, ., setAttribute, (, TagAttr, ., NAME, ,, name, ), ;, processNode, (, value, ,, item, )]
[;, processNode, (, value, ,, item, ), ;, element, ., appendChild, (, item, ), ;, }, }, private, void, processRegExp]
[., setAttribute, (, TagAttr, ., NAME, ,, name, ), ;, processNode, (, value, ,, item, ), ;, element, ., appendChild]
[,, name, ), ;, processNode, (, value, ,, item, ), ;, element, ., appendChild, (, item, ), ;, }, }]
[., NAME, ,, name, ), ;, processNode, (, value, ,, item, ), ;, element, ., appendChild, (, item, ), ;]
[), ;, processNode, (, value, ,, item, ), ;, element, ., appendChild, (, item, ), ;, }, }, private, void]
[;, element, ., appendChild, (, item, ), ;, }, }, private, void, processRegExp, (, Node, node, ,, JsonML, currentParent, )]
[,, item, ), ;, element, ., appendChild, (, item, ), ;, }, }, private, void, processRegExp, (, Node, node, ,]
[), ;, element, ., appendChild, (, item, ), ;, }, }, private, void, processRegExp, (, Node, node, ,, JsonML, currentParent]
[;, }, }, private, void, processRegExp, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[., appendChild, (, item, ), ;, }, }, private, void, processRegExp, (, Node, node, ,, JsonML, currentParent, ), {, JsonML]
[), ;, }, }, private, void, processRegExp, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML]
[;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, element, ., setAttribute]
[), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, element, .]
[., RegExpExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;]
[;, Node, child, =, node, ., getFirstChild, (, ), ;, element, ., setAttribute, (, TagAttr, ., BODY, ,, child, .]
[., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, element, ., setAttribute, (, TagAttr]
[), ;, Node, child, =, node, ., getFirstChild, (, ), ;, element, ., setAttribute, (, TagAttr, ., BODY, ,, child]
[;, element, ., setAttribute, (, TagAttr, ., BODY, ,, child, ., getString, (, ), ), ;, String, flags, =, ""]
[., getFirstChild, (, ), ;, element, ., setAttribute, (, TagAttr, ., BODY, ,, child, ., getString, (, ), ), ;]
[;, String, flags, =, "", ;, child, =, child, ., getNext, (, ), ;, if, (, child, !=, null, )]
[., setAttribute, (, TagAttr, ., BODY, ,, child, ., getString, (, ), ), ;, String, flags, =, "", ;, child]
[,, child, ., getString, (, ), ), ;, String, flags, =, "", ;, child, =, child, ., getNext, (, )]
[., BODY, ,, child, ., getString, (, ), ), ;, String, flags, =, "", ;, child, =, child, ., getNext]
[), ;, String, flags, =, "", ;, child, =, child, ., getNext, (, ), ;, if, (, child, !=, null]
[., getString, (, ), ), ;, String, flags, =, "", ;, child, =, child, ., getNext, (, ), ;, if]
[;, child, =, child, ., getNext, (, ), ;, if, (, child, !=, null, ), {, flags, =, child, .]
[=, child, ., getNext, (, ), ;, if, (, child, !=, null, ), {, flags, =, child, ., getString, (]
[;, if, (, child, !=, null, ), {, flags, =, child, ., getString, (, ), ;, }, element, ., setAttribute]
[., getNext, (, ), ;, if, (, child, !=, null, ), {, flags, =, child, ., getString, (, ), ;]
[), {, flags, =, child, ., getString, (, ), ;, }, element, ., setAttribute, (, TagAttr, ., FLAGS, ,, flags]
[!=, null, ), {, flags, =, child, ., getString, (, ), ;, }, element, ., setAttribute, (, TagAttr, ., FLAGS]
[), {, flags, =, child, ., getString, (, ), ;, }, element, ., setAttribute, (, TagAttr, ., FLAGS, ,, flags]
[=, child, ., getString, (, ), ;, }, element, ., setAttribute, (, TagAttr, ., FLAGS, ,, flags, ), ;, }]
[;, }, element, ., setAttribute, (, TagAttr, ., FLAGS, ,, flags, ), ;, }, private, void, processSwitch, (, Node, node]
[., getString, (, ), ;, }, element, ., setAttribute, (, TagAttr, ., FLAGS, ,, flags, ), ;, }, private, void]
[;, }, private, void, processSwitch, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType]
[., setAttribute, (, TagAttr, ., FLAGS, ,, flags, ), ;, }, private, void, processSwitch, (, Node, node, ,, JsonML, currentParent]
[,, flags, ), ;, }, private, void, processSwitch, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new]
[., FLAGS, ,, flags, ), ;, }, private, void, processSwitch, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element]
[), ;, }, private, void, processSwitch, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child]
[), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (]
[., SwitchStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;]
[;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, for, (, Node]
[., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element]
[), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, for, (]
[;, processNode, (, child, ,, element, ), ;, for, (, Node, c, =, child, ., getNext, (, ), ;, c]
[., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, for, (, Node, c, =, child, ., getNext]
[;, for, (, Node, c, =, child, ., getNext, (, ), ;, c, !=, null, ;, c, =, c, .]
[,, element, ), ;, for, (, Node, c, =, child, ., getNext, (, ), ;, c, !=, null, ;, c]
[), ;, for, (, Node, c, =, child, ., getNext, (, ), ;, c, !=, null, ;, c, =, c]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, processNode, (, c, ,, element, )]
[., getNext, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, processNode, (]
[;, c, =, c, ., getNext, (, ), ), {, processNode, (, c, ,, element, ), ;, }, }, private]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, processNode, (, c, ,, element, ), ;, }]
[;, c, =, c, ., getNext, (, ), ), {, processNode, (, c, ,, element, ), ;, }, }, private]
[=, c, ., getNext, (, ), ), {, processNode, (, c, ,, element, ), ;, }, }, private, void, processThis]
[), {, processNode, (, c, ,, element, ), ;, }, }, private, void, processThis, (, Node, node, ,, JsonML, currentParent]
[., getNext, (, ), ), {, processNode, (, c, ,, element, ), ;, }, }, private, void, processThis, (, Node]
[;, }, }, private, void, processThis, (, Node, node, ,, JsonML, currentParent, ), {, currentParent, ., appendChild, (, new, JsonML]
[,, element, ), ;, }, }, private, void, processThis, (, Node, node, ,, JsonML, currentParent, ), {, currentParent, ., appendChild]
[), ;, }, }, private, void, processThis, (, Node, node, ,, JsonML, currentParent, ), {, currentParent, ., appendChild, (, new]
[;, }, private, void, processThrow, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType]
[., appendChild, (, new, JsonML, (, TagType, ., ThisExpr, ), ), ;, }, private, void, processThrow, (, Node, node, ,]
[), ;, }, private, void, processThrow, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[), ), ;, }, private, void, processThrow, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML]
[., ThisExpr, ), ), ;, }, private, void, processThrow, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =]
[;, currentParent, ., appendChild, (, element, ), ;, processNode, (, node, ., getFirstChild, (, ), ,, element, ), ;, }]
[), ;, currentParent, ., appendChild, (, element, ), ;, processNode, (, node, ., getFirstChild, (, ), ,, element, ), ;]
[., ThrowStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, processNode, (, node, ., getFirstChild, (, ), ,, element]
[;, processNode, (, node, ., getFirstChild, (, ), ,, element, ), ;, }, private, void, processTry, (, Node, node, ,]
[., appendChild, (, element, ), ;, processNode, (, node, ., getFirstChild, (, ), ,, element, ), ;, }, private, void]
[), ;, processNode, (, node, ., getFirstChild, (, ), ,, element, ), ;, }, private, void, processTry, (, Node, node]
[;, }, private, void, processTry, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType]
[,, element, ), ;, }, private, void, processTry, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new]
[., getFirstChild, (, ), ,, element, ), ;, }, private, void, processTry, (, Node, node, ,, JsonML, currentParent, ), {]
[), ;, }, private, void, processTry, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child]
[), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (]
[., TryStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;]
[;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, child, =, child]
[., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element]
[), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, child, =]
[;, processNode, (, child, ,, element, ), ;, child, =, child, ., getNext, (, ), ;, if, (, child, .]
[., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, child, =, child, ., getNext, (, ), ;]
[;, child, =, child, ., getNext, (, ), ;, if, (, child, ., hasChildren, (, ), ), {, processNode, (]
[,, element, ), ;, child, =, child, ., getNext, (, ), ;, if, (, child, ., hasChildren, (, ), )]
[), ;, child, =, child, ., getNext, (, ), ;, if, (, child, ., hasChildren, (, ), ), {, processNode]
[=, child, ., getNext, (, ), ;, if, (, child, ., hasChildren, (, ), ), {, processNode, (, child, .]
[;, if, (, child, ., hasChildren, (, ), ), {, processNode, (, child, ., getFirstChild, (, ), ,, element, )]
[., getNext, (, ), ;, if, (, child, ., hasChildren, (, ), ), {, processNode, (, child, ., getFirstChild, (]
[), {, processNode, (, child, ., getFirstChild, (, ), ,, element, ), ;, }, else, {, element, ., appendChild, (]
[., hasChildren, (, ), ), {, processNode, (, child, ., getFirstChild, (, ), ,, element, ), ;, }, else, {]
[;, }, else, {, element, ., appendChild, (, new, JsonML, (, TagType, ., Empty, ), ), ;, }, child, =]
[,, element, ), ;, }, else, {, element, ., appendChild, (, new, JsonML, (, TagType, ., Empty, ), ), ;]
[., getFirstChild, (, ), ,, element, ), ;, }, else, {, element, ., appendChild, (, new, JsonML, (, TagType, .]
[), ;, }, else, {, element, ., appendChild, (, new, JsonML, (, TagType, ., Empty, ), ), ;, }, child]
[;, }, child, =, child, ., getNext, (, ), ;, if, (, child, !=, null, ), {, processNode, (, child]
[., appendChild, (, new, JsonML, (, TagType, ., Empty, ), ), ;, }, child, =, child, ., getNext, (, )]
[), ;, }, child, =, child, ., getNext, (, ), ;, if, (, child, !=, null, ), {, processNode, (]
[), ), ;, }, child, =, child, ., getNext, (, ), ;, if, (, child, !=, null, ), {, processNode]
[., Empty, ), ), ;, }, child, =, child, ., getNext, (, ), ;, if, (, child, !=, null, )]
[=, child, ., getNext, (, ), ;, if, (, child, !=, null, ), {, processNode, (, child, ,, element, )]
[;, if, (, child, !=, null, ), {, processNode, (, child, ,, element, ), ;, }, }, private, void, processTwoArgExpr]
[., getNext, (, ), ;, if, (, child, !=, null, ), {, processNode, (, child, ,, element, ), ;, }]
[), {, processNode, (, child, ,, element, ), ;, }, }, private, void, processTwoArgExpr, (, Node, node, ,, JsonML, currentParent]
[!=, null, ), {, processNode, (, child, ,, element, ), ;, }, }, private, void, processTwoArgExpr, (, Node, node, ,]
[), {, processNode, (, child, ,, element, ), ;, }, }, private, void, processTwoArgExpr, (, Node, node, ,, JsonML, currentParent]
[;, }, }, private, void, processTwoArgExpr, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, processTwoArgExpr, (, node]
[,, element, ), ;, }, }, private, void, processTwoArgExpr, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {]
[), ;, }, }, private, void, processTwoArgExpr, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, processTwoArgExpr, (]
[;, }, private, void, processTwoArgExpr, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ,, String, op, ), {, JsonML]
[,, currentParent, ,, type, ,, null, ), ;, }, private, void, processTwoArgExpr, (, Node, node, ,, JsonML, currentParent, ,, TagType]
[,, type, ,, null, ), ;, }, private, void, processTwoArgExpr, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ,]
[,, null, ), ;, }, private, void, processTwoArgExpr, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ,, String, op]
[), ;, }, private, void, processTwoArgExpr, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ,, String, op, ), {]
[;, if, (, op, !=, null, ), {, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, }]
[), ;, if, (, op, !=, null, ), {, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;]
[), {, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, }, currentParent, ., appendChild, (, element, )]
[!=, null, ), {, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, }, currentParent, ., appendChild, (]
[), {, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, }, currentParent, ., appendChild, (, element, )]
[;, }, currentParent, ., appendChild, (, element, ), ;, Preconditions, ., checkState, (, node, ., getChildCount, (, ), ==, 2]
[., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, }, currentParent, ., appendChild, (, element, ), ;, Preconditions, .]
[,, op, ), ;, }, currentParent, ., appendChild, (, element, ), ;, Preconditions, ., checkState, (, node, ., getChildCount, (]
[., OP, ,, op, ), ;, }, currentParent, ., appendChild, (, element, ), ;, Preconditions, ., checkState, (, node, .]
[), ;, }, currentParent, ., appendChild, (, element, ), ;, Preconditions, ., checkState, (, node, ., getChildCount, (, ), ==]
[;, Preconditions, ., checkState, (, node, ., getChildCount, (, ), ==, 2, ), ;, Node, child, =, node, ., getFirstChild]
[., appendChild, (, element, ), ;, Preconditions, ., checkState, (, node, ., getChildCount, (, ), ==, 2, ), ;, Node]
[), ;, Preconditions, ., checkState, (, node, ., getChildCount, (, ), ==, 2, ), ;, Node, child, =, node, .]
[;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, processNode, (, child]
[., checkState, (, node, ., getChildCount, (, ), ==, 2, ), ;, Node, child, =, node, ., getFirstChild, (, )]
[), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, processNode, (]
[==, 2, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;]
[., getChildCount, (, ), ==, 2, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child]
[), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, processNode, (]
[;, processNode, (, child, ,, element, ), ;, processNode, (, child, ., getNext, (, ), ,, element, ), ;, }]
[., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, processNode, (, child, ., getNext, (, ), ,]
[;, processNode, (, child, ., getNext, (, ), ,, element, ), ;, }, private, void, processUnaryExpr, (, Node, node, ,]
[,, element, ), ;, processNode, (, child, ., getNext, (, ), ,, element, ), ;, }, private, void, processUnaryExpr, (]
[), ;, processNode, (, child, ., getNext, (, ), ,, element, ), ;, }, private, void, processUnaryExpr, (, Node, node]
[;, }, private, void, processUnaryExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML, element, =, new]
[,, element, ), ;, }, private, void, processUnaryExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML]
[., getNext, (, ), ,, element, ), ;, }, private, void, processUnaryExpr, (, Node, node, ,, JsonML, currentParent, ,, String]
[), ;, }, private, void, processUnaryExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML, element, =]
[;, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, currentParent, ., appendChild, (, element, ), ;, processNode]
[), ;, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, currentParent, ., appendChild, (, element, ), ;]
[., UnaryExpr, ), ;, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, currentParent, ., appendChild, (, element]
[;, currentParent, ., appendChild, (, element, ), ;, processNode, (, node, ., getFirstChild, (, ), ,, element, ), ;, }]
[., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, currentParent, ., appendChild, (, element, ), ;, processNode, (, node]
[,, op, ), ;, currentParent, ., appendChild, (, element, ), ;, processNode, (, node, ., getFirstChild, (, ), ,, element]
[., OP, ,, op, ), ;, currentParent, ., appendChild, (, element, ), ;, processNode, (, node, ., getFirstChild, (, )]
[), ;, currentParent, ., appendChild, (, element, ), ;, processNode, (, node, ., getFirstChild, (, ), ,, element, ), ;]
[;, processNode, (, node, ., getFirstChild, (, ), ,, element, ), ;, }, private, void, processVar, (, Node, node, ,]
[., appendChild, (, element, ), ;, processNode, (, node, ., getFirstChild, (, ), ,, element, ), ;, }, private, void]
[), ;, processNode, (, node, ., getFirstChild, (, ), ,, element, ), ;, }, private, void, processVar, (, Node, node]
[;, }, private, void, processVar, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType]
[,, element, ), ;, }, private, void, processVar, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new]
[., getFirstChild, (, ), ,, element, ), ;, }, private, void, processVar, (, Node, node, ,, JsonML, currentParent, ), {]
[), ;, }, private, void, processVar, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[;, currentParent, ., appendChild, (, element, ), ;, Iterator, <, Node, >, it, =, node, ., children, (, ), .]
[), ;, currentParent, ., appendChild, (, element, ), ;, Iterator, <, Node, >, it, =, node, ., children, (, )]
[., VarDecl, ), ;, currentParent, ., appendChild, (, element, ), ;, Iterator, <, Node, >, it, =, node, ., children]
[;, Iterator, <, Node, >, it, =, node, ., children, (, ), ., iterator, (, ), ;, while, (, it]
[., appendChild, (, element, ), ;, Iterator, <, Node, >, it, =, node, ., children, (, ), ., iterator, (]
[), ;, Iterator, <, Node, >, it, =, node, ., children, (, ), ., iterator, (, ), ;, while, (]
[;, while, (, it, ., hasNext, (, ), ), {, Node, child, =, it, ., next, (, ), ;, JsonML]
[., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, Node, child, =, it, ., next]
[., children, (, ), ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, Node, child]
[), {, Node, child, =, it, ., next, (, ), ;, JsonML, id, =, new, JsonML, (, TagType, ., IdPatt]
[., hasNext, (, ), ), {, Node, child, =, it, ., next, (, ), ;, JsonML, id, =, new, JsonML]
[;, JsonML, id, =, new, JsonML, (, TagType, ., IdPatt, ), ;, id, ., setAttribute, (, TagAttr, ., NAME, ,]
[., next, (, ), ;, JsonML, id, =, new, JsonML, (, TagType, ., IdPatt, ), ;, id, ., setAttribute, (]
[;, id, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, if, (, child, .]
[), ;, id, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, if, (, child]
[., IdPatt, ), ;, id, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, if]
[;, if, (, child, ., hasChildren, (, ), ), {, JsonML, patt, =, new, JsonML, (, TagType, ., InitPatt, )]
[., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, if, (, child, ., hasChildren, (]
[,, child, ., getString, (, ), ), ;, if, (, child, ., hasChildren, (, ), ), {, JsonML, patt, =]
[., NAME, ,, child, ., getString, (, ), ), ;, if, (, child, ., hasChildren, (, ), ), {, JsonML]
[), ;, if, (, child, ., hasChildren, (, ), ), {, JsonML, patt, =, new, JsonML, (, TagType, ., InitPatt]
[., getString, (, ), ), ;, if, (, child, ., hasChildren, (, ), ), {, JsonML, patt, =, new, JsonML]
[), {, JsonML, patt, =, new, JsonML, (, TagType, ., InitPatt, ), ;, element, ., appendChild, (, patt, ), ;]
[., hasChildren, (, ), ), {, JsonML, patt, =, new, JsonML, (, TagType, ., InitPatt, ), ;, element, ., appendChild]
[;, element, ., appendChild, (, patt, ), ;, patt, ., appendChild, (, id, ), ;, processNode, (, child, ., getFirstChild]
[), ;, element, ., appendChild, (, patt, ), ;, patt, ., appendChild, (, id, ), ;, processNode, (, child, .]
[., InitPatt, ), ;, element, ., appendChild, (, patt, ), ;, patt, ., appendChild, (, id, ), ;, processNode, (]
[;, patt, ., appendChild, (, id, ), ;, processNode, (, child, ., getFirstChild, (, ), ,, patt, ), ;, }]
[., appendChild, (, patt, ), ;, patt, ., appendChild, (, id, ), ;, processNode, (, child, ., getFirstChild, (, )]
[), ;, patt, ., appendChild, (, id, ), ;, processNode, (, child, ., getFirstChild, (, ), ,, patt, ), ;]
[;, processNode, (, child, ., getFirstChild, (, ), ,, patt, ), ;, }, else, {, element, ., appendChild, (, id]
[., appendChild, (, id, ), ;, processNode, (, child, ., getFirstChild, (, ), ,, patt, ), ;, }, else, {]
[), ;, processNode, (, child, ., getFirstChild, (, ), ,, patt, ), ;, }, else, {, element, ., appendChild, (]
[;, }, else, {, element, ., appendChild, (, id, ), ;, }, }, }, private, void, processReturn, (, Node, currentNode]
[,, patt, ), ;, }, else, {, element, ., appendChild, (, id, ), ;, }, }, }, private, void, processReturn]
[., getFirstChild, (, ), ,, patt, ), ;, }, else, {, element, ., appendChild, (, id, ), ;, }, }]
[), ;, }, else, {, element, ., appendChild, (, id, ), ;, }, }, }, private, void, processReturn, (, Node]
[;, }, }, }, private, void, processReturn, (, Node, currentNode, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML]
[., appendChild, (, id, ), ;, }, }, }, private, void, processReturn, (, Node, currentNode, ,, JsonML, currentParent, ), {]
[), ;, }, }, }, private, void, processReturn, (, Node, currentNode, ,, JsonML, currentParent, ), {, JsonML, element, =, new]
[;, currentParent, ., appendChild, (, element, ), ;, if, (, currentNode, ., hasChildren, (, ), ), {, processNode, (, currentNode]
[), ;, currentParent, ., appendChild, (, element, ), ;, if, (, currentNode, ., hasChildren, (, ), ), {, processNode, (]
[., ReturnStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, if, (, currentNode, ., hasChildren, (, ), ), {]
[;, if, (, currentNode, ., hasChildren, (, ), ), {, processNode, (, currentNode, ., getFirstChild, (, ), ,, element, )]
[., appendChild, (, element, ), ;, if, (, currentNode, ., hasChildren, (, ), ), {, processNode, (, currentNode, ., getFirstChild]
[), ;, if, (, currentNode, ., hasChildren, (, ), ), {, processNode, (, currentNode, ., getFirstChild, (, ), ,, element]
[), {, processNode, (, currentNode, ., getFirstChild, (, ), ,, element, ), ;, }, }, private, void, processScript, (, Node]
[., hasChildren, (, ), ), {, processNode, (, currentNode, ., getFirstChild, (, ), ,, element, ), ;, }, }, private]
[;, }, }, private, void, processScript, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[,, element, ), ;, }, }, private, void, processScript, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =]
[., getFirstChild, (, ), ,, element, ), ;, }, }, private, void, processScript, (, Node, node, ,, JsonML, currentParent, )]
[), ;, }, }, private, void, processScript, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML]
[;, currentParent, ., appendChild, (, element, ), ;, processDirectives, (, node, ,, element, ), ;, processChildren, (, node, ,, element]
[), ;, currentParent, ., appendChild, (, element, ), ;, processDirectives, (, node, ,, element, ), ;, processChildren, (, node, ,]
[., Program, ), ;, currentParent, ., appendChild, (, element, ), ;, processDirectives, (, node, ,, element, ), ;, processChildren, (]
[;, processDirectives, (, node, ,, element, ), ;, processChildren, (, node, ,, element, ), ;, }, private, void, processWith, (]
[., appendChild, (, element, ), ;, processDirectives, (, node, ,, element, ), ;, processChildren, (, node, ,, element, ), ;]
[), ;, processDirectives, (, node, ,, element, ), ;, processChildren, (, node, ,, element, ), ;, }, private, void, processWith]
[;, processChildren, (, node, ,, element, ), ;, }, private, void, processWith, (, Node, node, ,, JsonML, currentParent, ), {]
[,, element, ), ;, processChildren, (, node, ,, element, ), ;, }, private, void, processWith, (, Node, node, ,, JsonML]
[), ;, processChildren, (, node, ,, element, ), ;, }, private, void, processWith, (, Node, node, ,, JsonML, currentParent, )]
[;, }, private, void, processWith, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType]
[,, element, ), ;, }, private, void, processWith, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new]
[), ;, }, private, void, processWith, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child]
[), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (]
[., WithStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;]
[;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, child, =, child]
[., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element]
[), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, child, =]
[;, processNode, (, child, ,, element, ), ;, child, =, child, ., getNext, (, ), ;, processNode, (, child, ,]
[., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, child, =, child, ., getNext, (, ), ;]
[;, child, =, child, ., getNext, (, ), ;, processNode, (, child, ,, element, ), ;, }, private, void, processChildren]
[,, element, ), ;, child, =, child, ., getNext, (, ), ;, processNode, (, child, ,, element, ), ;, }]
[), ;, child, =, child, ., getNext, (, ), ;, processNode, (, child, ,, element, ), ;, }, private, void]
[=, child, ., getNext, (, ), ;, processNode, (, child, ,, element, ), ;, }, private, void, processChildren, (, Node]
[;, processNode, (, child, ,, element, ), ;, }, private, void, processChildren, (, Node, node, ,, JsonML, currentParent, ), {]
[., getNext, (, ), ;, processNode, (, child, ,, element, ), ;, }, private, void, processChildren, (, Node, node, ,]
[;, }, private, void, processChildren, (, Node, node, ,, JsonML, currentParent, ), {, for, (, Node, child, :, node, .]
[,, element, ), ;, }, private, void, processChildren, (, Node, node, ,, JsonML, currentParent, ), {, for, (, Node, child]
[), ;, }, private, void, processChildren, (, Node, node, ,, JsonML, currentParent, ), {, for, (, Node, child, :, node]
[), {, processNode, (, child, ,, currentParent, ), ;, }, }, private, void, processDirectives, (, Node, node, ,, JsonML, currentParent]
[., children, (, ), ), {, processNode, (, child, ,, currentParent, ), ;, }, }, private, void, processDirectives, (, Node]
[;, }, }, private, void, processDirectives, (, Node, node, ,, JsonML, currentParent, ), {, Set, <, String, >, directives, =]
[,, currentParent, ), ;, }, }, private, void, processDirectives, (, Node, node, ,, JsonML, currentParent, ), {, Set, <, String]
[), ;, }, }, private, void, processDirectives, (, Node, node, ,, JsonML, currentParent, ), {, Set, <, String, >, directives]
[;, if, (, directives, ==, null, ), {, return, ;, }, for, (, String, directive, :, directives, ), {, JsonML]
[., getDirectives, (, ), ;, if, (, directives, ==, null, ), {, return, ;, }, for, (, String, directive, :]
[), {, return, ;, }, for, (, String, directive, :, directives, ), {, JsonML, element, =, new, JsonML, (, TagType]
[==, null, ), {, return, ;, }, for, (, String, directive, :, directives, ), {, JsonML, element, =, new, JsonML]
[), {, return, ;, }, for, (, String, directive, :, directives, ), {, JsonML, element, =, new, JsonML, (, TagType]
[), {, JsonML, element, =, new, JsonML, (, TagType, ., PrologueDecl, ), ;, element, ., setAttribute, (, TagAttr, ., DIRECTIVE]
[;, element, ., setAttribute, (, TagAttr, ., DIRECTIVE, ,, directive, ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,]
[), ;, element, ., setAttribute, (, TagAttr, ., DIRECTIVE, ,, directive, ), ;, element, ., setAttribute, (, TagAttr, ., VALUE]
[., PrologueDecl, ), ;, element, ., setAttribute, (, TagAttr, ., DIRECTIVE, ,, directive, ), ;, element, ., setAttribute, (, TagAttr]
[;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, directive, ), ;, currentParent, ., appendChild, (, element, ), ;, }]
[., setAttribute, (, TagAttr, ., DIRECTIVE, ,, directive, ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, directive, )]
[,, directive, ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, directive, ), ;, currentParent, ., appendChild, (, element]
[., DIRECTIVE, ,, directive, ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, directive, ), ;, currentParent, ., appendChild]
[), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, directive, ), ;, currentParent, ., appendChild, (, element, ), ;]
[;, currentParent, ., appendChild, (, element, ), ;, }, }, private, void, processOneArgExpr, (, Node, node, ,, JsonML, currentParent, ,]
[., setAttribute, (, TagAttr, ., VALUE, ,, directive, ), ;, currentParent, ., appendChild, (, element, ), ;, }, }, private]
[,, directive, ), ;, currentParent, ., appendChild, (, element, ), ;, }, }, private, void, processOneArgExpr, (, Node, node, ,]
[., VALUE, ,, directive, ), ;, currentParent, ., appendChild, (, element, ), ;, }, }, private, void, processOneArgExpr, (, Node]
[), ;, currentParent, ., appendChild, (, element, ), ;, }, }, private, void, processOneArgExpr, (, Node, node, ,, JsonML, currentParent]
[;, }, }, private, void, processOneArgExpr, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =]
[., appendChild, (, element, ), ;, }, }, private, void, processOneArgExpr, (, Node, node, ,, JsonML, currentParent, ,, TagType, type]
[), ;, }, }, private, void, processOneArgExpr, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element]
[;, currentParent, ., appendChild, (, element, ), ;, processNode, (, node, ., getFirstChild, (, ), ,, element, ), ;, }]
[), ;, currentParent, ., appendChild, (, element, ), ;, processNode, (, node, ., getFirstChild, (, ), ,, element, ), ;]
[;, processNode, (, node, ., getFirstChild, (, ), ,, element, ), ;, }, }]
[., appendChild, (, element, ), ;, processNode, (, node, ., getFirstChild, (, ), ,, element, ), ;, }, }]
[), ;, processNode, (, node, ., getFirstChild, (, ), ,, element, ), ;, }, }]
[;, }, }]
[,, element, ), ;, }, }]
[., getFirstChild, (, ), ,, element, ), ;, }, }]
[), ;, }, }]
