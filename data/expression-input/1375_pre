[totalEvaluations, ;, private, int, starts, ;, private, RandomVectorGenerator, generator, ;, private, OptimizationData, [, ], optimData, ;, private, int, maxEvalIndex, =]
[;, private, int, starts, ;, private, RandomVectorGenerator, generator, ;, private, OptimizationData, [, ], optimData, ;, private, int, maxEvalIndex, =, -]
[RandomVectorGenerator, generator, ;, private, OptimizationData, [, ], optimData, ;, private, int, maxEvalIndex, =, -, 1, ;, private, int, initialGuessIndex, =]
[generator, ;, private, OptimizationData, [, ], optimData, ;, private, int, maxEvalIndex, =, -, 1, ;, private, int, initialGuessIndex, =, -]
[BaseMultiStartMultivariateOptimizer, (, final, BaseMultivariateOptimizer, <, PAIR, >, optimizer, ,, final, int, starts, ,, final, RandomVectorGenerator, generator, ), {, super, (]
[BaseMultiStartMultivariateOptimizer, (, final, BaseMultivariateOptimizer, <, PAIR, >, optimizer, ,, final, int, starts, ,, final, RandomVectorGenerator, generator, ), {, super, (]
[final, int, starts, ,, final, RandomVectorGenerator, generator, ), {, super, (, optimizer, ., getConvergenceChecker, (, ), ), ;, if, (]
[final, int, starts, ,, final, RandomVectorGenerator, generator, ), {, super, (, optimizer, ., getConvergenceChecker, (, ), ), ;, if, (]
[starts, ,, final, RandomVectorGenerator, generator, ), {, super, (, optimizer, ., getConvergenceChecker, (, ), ), ;, if, (, starts, <]
[generator, ), {, super, (, optimizer, ., getConvergenceChecker, (, ), ), ;, if, (, starts, <, 1, ), {, throw]
[super, (, optimizer, ., getConvergenceChecker, (, ), ), ;, if, (, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (]
[getConvergenceChecker, (, ), ), ;, if, (, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }]
[getConvergenceChecker, (, ), ), ;, if, (, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }]
[;, if, (, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =]
[(, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =, optimizer, ;]
[(, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =, optimizer, ;]
[), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =, optimizer, ;, this, ., starts, =]
[throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =, optimizer, ;, this, ., starts, =, starts, ;]
[throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =, optimizer, ;, this, ., starts, =, starts, ;]
[starts, ), ;, }, this, ., optimizer, =, optimizer, ;, this, ., starts, =, starts, ;, this, ., generator, =]
[starts, =, starts, ;, this, ., generator, =, generator, ;, }, @, Override, public, int, getEvaluations, (, ), {, return]
[public, abstract, PAIR, [, ], getOptima, (, ), ;, @, Override, public, PAIR, optimize, (, OptimizationData, ..., optData, ), {]
[PAIR, [, ], getOptima, (, ), ;, @, Override, public, PAIR, optimize, (, OptimizationData, ..., optData, ), {, optimData, =]
[getOptima, (, ), ;, @, Override, public, PAIR, optimize, (, OptimizationData, ..., optData, ), {, optimData, =, optData, ;, return]
[getOptima, (, ), ;, @, Override, public, PAIR, optimize, (, OptimizationData, ..., optData, ), {, optimData, =, optData, ;, return]
[@, Override, public, PAIR, optimize, (, OptimizationData, ..., optData, ), {, optimData, =, optData, ;, return, super, ., optimize, (]
[., optimize, (, optData, ), ;, }, @, Override, protected, PAIR, doOptimize, (, ), {, for, (, int, i, =]
[(, optData, ), ;, }, @, Override, protected, PAIR, doOptimize, (, ), {, for, (, int, i, =, 0, ;]
[(, optData, ), ;, }, @, Override, protected, PAIR, doOptimize, (, ), {, for, (, int, i, =, 0, ;]
[), ;, }, @, Override, protected, PAIR, doOptimize, (, ), {, for, (, int, i, =, 0, ;, i, <]
[), ;, }, @, Override, protected, PAIR, doOptimize, (, ), {, for, (, int, i, =, 0, ;, i, <]
[Override, protected, PAIR, doOptimize, (, ), {, for, (, int, i, =, 0, ;, i, <, optimData, ., length, ;]
[Override, protected, PAIR, doOptimize, (, ), {, for, (, int, i, =, 0, ;, i, <, optimData, ., length, ;]
[{, for, (, int, i, =, 0, ;, i, <, optimData, ., length, ;, i, ++, ), {, if, (]
[{, for, (, int, i, =, 0, ;, i, <, optimData, ., length, ;, i, ++, ), {, if, (]
[{, for, (, int, i, =, 0, ;, i, <, optimData, ., length, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, optimData, ., length, ;, i, ++, ), {, if, (, optimData, []
[i, <, optimData, ., length, ;, i, ++, ), {, if, (, optimData, [, i, ], instanceof, MaxEval, ), {]
[i, <, optimData, ., length, ;, i, ++, ), {, if, (, optimData, [, i, ], instanceof, MaxEval, ), {]
[optimData, ., length, ;, i, ++, ), {, if, (, optimData, [, i, ], instanceof, MaxEval, ), {, optimData, []
[;, i, ++, ), {, if, (, optimData, [, i, ], instanceof, MaxEval, ), {, optimData, [, i, ], =]
[++, ), {, if, (, optimData, [, i, ], instanceof, MaxEval, ), {, optimData, [, i, ], =, null, ;]
[{, if, (, optimData, [, i, ], instanceof, MaxEval, ), {, optimData, [, i, ], =, null, ;, maxEvalIndex, =]
[i, ], instanceof, MaxEval, ), {, optimData, [, i, ], =, null, ;, maxEvalIndex, =, i, ;, }, if, (]
[i, ], instanceof, MaxEval, ), {, optimData, [, i, ], =, null, ;, maxEvalIndex, =, i, ;, }, if, (]
[i, ], instanceof, MaxEval, ), {, optimData, [, i, ], =, null, ;, maxEvalIndex, =, i, ;, }, if, (]
[instanceof, MaxEval, ), {, optimData, [, i, ], =, null, ;, maxEvalIndex, =, i, ;, }, if, (, optimData, []
[i, ], =, null, ;, maxEvalIndex, =, i, ;, }, if, (, optimData, [, i, ], instanceof, InitialGuess, ), {]
[i, ], =, null, ;, maxEvalIndex, =, i, ;, }, if, (, optimData, [, i, ], instanceof, InitialGuess, ), {]
[=, null, ;, maxEvalIndex, =, i, ;, }, if, (, optimData, [, i, ], instanceof, InitialGuess, ), {, optimData, []
[maxEvalIndex, =, i, ;, }, if, (, optimData, [, i, ], instanceof, InitialGuess, ), {, optimData, [, i, ], =]
[i, ;, }, if, (, optimData, [, i, ], instanceof, InitialGuess, ), {, optimData, [, i, ], =, null, ;]
[}, if, (, optimData, [, i, ], instanceof, InitialGuess, ), {, optimData, [, i, ], =, null, ;, initialGuessIndex, =]
[InitialGuess, ), {, optimData, [, i, ], =, null, ;, initialGuessIndex, =, i, ;, continue, ;, }, }, if, (]
[InitialGuess, ), {, optimData, [, i, ], =, null, ;, initialGuessIndex, =, i, ;, continue, ;, }, }, if, (]
[{, optimData, [, i, ], =, null, ;, initialGuessIndex, =, i, ;, continue, ;, }, }, if, (, maxEvalIndex, ==]
[optimData, [, i, ], =, null, ;, initialGuessIndex, =, i, ;, continue, ;, }, }, if, (, maxEvalIndex, ==, -]
[=, null, ;, initialGuessIndex, =, i, ;, continue, ;, }, }, if, (, maxEvalIndex, ==, -, 1, ), {, throw]
[;, }, }, if, (, maxEvalIndex, ==, -, 1, ), {, throw, new, MathIllegalStateException, (, ), ;, }, if, (]
[;, }, }, if, (, maxEvalIndex, ==, -, 1, ), {, throw, new, MathIllegalStateException, (, ), ;, }, if, (]
[}, if, (, maxEvalIndex, ==, -, 1, ), {, throw, new, MathIllegalStateException, (, ), ;, }, if, (, initialGuessIndex, ==]
[if, (, maxEvalIndex, ==, -, 1, ), {, throw, new, MathIllegalStateException, (, ), ;, }, if, (, initialGuessIndex, ==, -]
[-, 1, ), {, throw, new, MathIllegalStateException, (, ), ;, }, if, (, initialGuessIndex, ==, -, 1, ), {, throw]
[;, }, if, (, initialGuessIndex, ==, -, 1, ), {, throw, new, MathIllegalStateException, (, ), ;, }, RuntimeException, lastException, =]
[if, (, initialGuessIndex, ==, -, 1, ), {, throw, new, MathIllegalStateException, (, ), ;, }, RuntimeException, lastException, =, null, ;]
[initialGuessIndex, ==, -, 1, ), {, throw, new, MathIllegalStateException, (, ), ;, }, RuntimeException, lastException, =, null, ;, totalEvaluations, =]
[-, 1, ), {, throw, new, MathIllegalStateException, (, ), ;, }, RuntimeException, lastException, =, null, ;, totalEvaluations, =, 0, ;]
[), ;, }, RuntimeException, lastException, =, null, ;, totalEvaluations, =, 0, ;, clear, (, ), ;, final, int, maxEval, =]
[0, ;, clear, (, ), ;, final, int, maxEval, =, getMaxEvaluations, (, ), ;, final, double, [, ], min, =]
[getMaxEvaluations, (, ), ;, final, double, [, ], min, =, getLowerBound, (, ), ;, final, double, [, ], max, =]
[getLowerBound, (, ), ;, final, double, [, ], max, =, getUpperBound, (, ), ;, final, double, [, ], startPoint, =]
[=, getUpperBound, (, ), ;, final, double, [, ], startPoint, =, getStartPoint, (, ), ;, for, (, int, i, =]
[(, ), ;, final, double, [, ], startPoint, =, getStartPoint, (, ), ;, for, (, int, i, =, 0, ;]
[(, ), ;, final, double, [, ], startPoint, =, getStartPoint, (, ), ;, for, (, int, i, =, 0, ;]
[;, final, double, [, ], startPoint, =, getStartPoint, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[double, [, ], startPoint, =, getStartPoint, (, ), ;, for, (, int, i, =, 0, ;, i, <, starts, ;]
[double, [, ], startPoint, =, getStartPoint, (, ), ;, for, (, int, i, =, 0, ;, i, <, starts, ;]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, starts, ;, i, ++, ), {, try, {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, starts, ;, i, ++, ), {, try, {]
[;, for, (, int, i, =, 0, ;, i, <, starts, ;, i, ++, ), {, try, {, optimData, []
[int, i, =, 0, ;, i, <, starts, ;, i, ++, ), {, try, {, optimData, [, maxEvalIndex, ], =]
[0, ;, i, <, starts, ;, i, ++, ), {, try, {, optimData, [, maxEvalIndex, ], =, new, MaxEval, (]
[0, ;, i, <, starts, ;, i, ++, ), {, try, {, optimData, [, maxEvalIndex, ], =, new, MaxEval, (]
[i, <, starts, ;, i, ++, ), {, try, {, optimData, [, maxEvalIndex, ], =, new, MaxEval, (, maxEval, -]
[try, {, optimData, [, maxEvalIndex, ], =, new, MaxEval, (, maxEval, -, totalEvaluations, ), ;, double, [, ], s, =]
[maxEvalIndex, ], =, new, MaxEval, (, maxEval, -, totalEvaluations, ), ;, double, [, ], s, =, null, ;, if, (]
[maxEvalIndex, ], =, new, MaxEval, (, maxEval, -, totalEvaluations, ), ;, double, [, ], s, =, null, ;, if, (]
[=, new, MaxEval, (, maxEval, -, totalEvaluations, ), ;, double, [, ], s, =, null, ;, if, (, i, ==]
[(, maxEval, -, totalEvaluations, ), ;, double, [, ], s, =, null, ;, if, (, i, ==, 0, ), {]
[-, totalEvaluations, ), ;, double, [, ], s, =, null, ;, if, (, i, ==, 0, ), {, s, =]
[=, null, ;, if, (, i, ==, 0, ), {, s, =, startPoint, ;, }, else, {, int, attempts, =]
[(, i, ==, 0, ), {, s, =, startPoint, ;, }, else, {, int, attempts, =, 0, ;, while, (]
[(, i, ==, 0, ), {, s, =, startPoint, ;, }, else, {, int, attempts, =, 0, ;, while, (]
[==, 0, ), {, s, =, startPoint, ;, }, else, {, int, attempts, =, 0, ;, while, (, s, ==]
[=, startPoint, ;, }, else, {, int, attempts, =, 0, ;, while, (, s, ==, null, ), {, if, (]
[=, startPoint, ;, }, else, {, int, attempts, =, 0, ;, while, (, s, ==, null, ), {, if, (]
[=, startPoint, ;, }, else, {, int, attempts, =, 0, ;, while, (, s, ==, null, ), {, if, (]
[}, else, {, int, attempts, =, 0, ;, while, (, s, ==, null, ), {, if, (, attempts, ++, >=]
[0, ;, while, (, s, ==, null, ), {, if, (, attempts, ++, >=, getMaxEvaluations, (, ), ), {, throw]
[(, s, ==, null, ), {, if, (, attempts, ++, >=, getMaxEvaluations, (, ), ), {, throw, new, TooManyEvaluationsException, (]
[if, (, attempts, ++, >=, getMaxEvaluations, (, ), ), {, throw, new, TooManyEvaluationsException, (, getMaxEvaluations, (, ), ), ;, }]
[attempts, ++, >=, getMaxEvaluations, (, ), ), {, throw, new, TooManyEvaluationsException, (, getMaxEvaluations, (, ), ), ;, }, s, =]
[attempts, ++, >=, getMaxEvaluations, (, ), ), {, throw, new, TooManyEvaluationsException, (, getMaxEvaluations, (, ), ), ;, }, s, =]
[(, getMaxEvaluations, (, ), ), ;, }, s, =, generator, ., nextVector, (, ), ;, for, (, int, k, =]
[(, ), ), ;, }, s, =, generator, ., nextVector, (, ), ;, for, (, int, k, =, 0, ;]
[(, ), ), ;, }, s, =, generator, ., nextVector, (, ), ;, for, (, int, k, =, 0, ;]
[(, ), ), ;, }, s, =, generator, ., nextVector, (, ), ;, for, (, int, k, =, 0, ;]
[), ;, }, s, =, generator, ., nextVector, (, ), ;, for, (, int, k, =, 0, ;, s, !=]
[}, s, =, generator, ., nextVector, (, ), ;, for, (, int, k, =, 0, ;, s, !=, null, &&]
[}, s, =, generator, ., nextVector, (, ), ;, for, (, int, k, =, 0, ;, s, !=, null, &&]
[=, generator, ., nextVector, (, ), ;, for, (, int, k, =, 0, ;, s, !=, null, &&, k, <]
[=, generator, ., nextVector, (, ), ;, for, (, int, k, =, 0, ;, s, !=, null, &&, k, <]
[(, ), ;, for, (, int, k, =, 0, ;, s, !=, null, &&, k, <, s, ., length, ;]
[), ;, for, (, int, k, =, 0, ;, s, !=, null, &&, k, <, s, ., length, ;, ++]
[k, =, 0, ;, s, !=, null, &&, k, <, s, ., length, ;, ++, k, ), {, if, (]
[k, =, 0, ;, s, !=, null, &&, k, <, s, ., length, ;, ++, k, ), {, if, (]
[=, 0, ;, s, !=, null, &&, k, <, s, ., length, ;, ++, k, ), {, if, (, (]
[=, 0, ;, s, !=, null, &&, k, <, s, ., length, ;, ++, k, ), {, if, (, (]
[=, 0, ;, s, !=, null, &&, k, <, s, ., length, ;, ++, k, ), {, if, (, (]
[;, s, !=, null, &&, k, <, s, ., length, ;, ++, k, ), {, if, (, (, min, !=]
[!=, null, &&, k, <, s, ., length, ;, ++, k, ), {, if, (, (, min, !=, null, &&]
[!=, null, &&, k, <, s, ., length, ;, ++, k, ), {, if, (, (, min, !=, null, &&]
[!=, null, &&, k, <, s, ., length, ;, ++, k, ), {, if, (, (, min, !=, null, &&]
[&&, k, <, s, ., length, ;, ++, k, ), {, if, (, (, min, !=, null, &&, s, []
[s, ., length, ;, ++, k, ), {, if, (, (, min, !=, null, &&, s, [, k, ], <]
[s, ., length, ;, ++, k, ), {, if, (, (, min, !=, null, &&, s, [, k, ], <]
[length, ;, ++, k, ), {, if, (, (, min, !=, null, &&, s, [, k, ], <, min, []
[), {, if, (, (, min, !=, null, &&, s, [, k, ], <, min, [, k, ], ), ||]
[{, if, (, (, min, !=, null, &&, s, [, k, ], <, min, [, k, ], ), ||, (]
[{, if, (, (, min, !=, null, &&, s, [, k, ], <, min, [, k, ], ), ||, (]
[{, if, (, (, min, !=, null, &&, s, [, k, ], <, min, [, k, ], ), ||, (]
[(, (, min, !=, null, &&, s, [, k, ], <, min, [, k, ], ), ||, (, max, !=]
[min, !=, null, &&, s, [, k, ], <, min, [, k, ], ), ||, (, max, !=, null, &&]
[min, !=, null, &&, s, [, k, ], <, min, [, k, ], ), ||, (, max, !=, null, &&]
[min, !=, null, &&, s, [, k, ], <, min, [, k, ], ), ||, (, max, !=, null, &&]
[null, &&, s, [, k, ], <, min, [, k, ], ), ||, (, max, !=, null, &&, s, []
[[, k, ], <, min, [, k, ], ), ||, (, max, !=, null, &&, s, [, k, ], >]
[[, k, ], <, min, [, k, ], ), ||, (, max, !=, null, &&, s, [, k, ], >]
[], <, min, [, k, ], ), ||, (, max, !=, null, &&, s, [, k, ], >, max, []
[], ), ||, (, max, !=, null, &&, s, [, k, ], >, max, [, k, ], ), ), {]
[||, (, max, !=, null, &&, s, [, k, ], >, max, [, k, ], ), ), {, s, =]
[s, [, k, ], >, max, [, k, ], ), ), {, s, =, null, ;, }, }, }, }]
[s, [, k, ], >, max, [, k, ], ), ), {, s, =, null, ;, }, }, }, }]
[k, ], >, max, [, k, ], ), ), {, s, =, null, ;, }, }, }, }, optimData, []
[max, [, k, ], ), ), {, s, =, null, ;, }, }, }, }, optimData, [, initialGuessIndex, ], =]
[], ), ), {, s, =, null, ;, }, }, }, }, optimData, [, initialGuessIndex, ], =, new, InitialGuess, (]
[;, }, }, }, }, optimData, [, initialGuessIndex, ], =, new, InitialGuess, (, s, ), ;, final, PAIR, result, =]
[;, }, }, }, }, optimData, [, initialGuessIndex, ], =, new, InitialGuess, (, s, ), ;, final, PAIR, result, =]
[}, optimData, [, initialGuessIndex, ], =, new, InitialGuess, (, s, ), ;, final, PAIR, result, =, optimizer, ., optimize, (]
[initialGuessIndex, ], =, new, InitialGuess, (, s, ), ;, final, PAIR, result, =, optimizer, ., optimize, (, optimData, ), ;]
[=, new, InitialGuess, (, s, ), ;, final, PAIR, result, =, optimizer, ., optimize, (, optimData, ), ;, store, (]
[=, optimizer, ., optimize, (, optimData, ), ;, store, (, result, ), ;, }, catch, (, RuntimeException, mue, ), {]
[., optimize, (, optimData, ), ;, store, (, result, ), ;, }, catch, (, RuntimeException, mue, ), {, lastException, =]
[optimData, ), ;, store, (, result, ), ;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, }]
[;, store, (, result, ), ;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, }, totalEvaluations, +=]
[;, store, (, result, ), ;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, }, totalEvaluations, +=]
[lastException, =, mue, ;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, final, PAIR, [, ], optima, =]
[+=, optimizer, ., getEvaluations, (, ), ;, }, final, PAIR, [, ], optima, =, getOptima, (, ), ;, if, (]
[+=, optimizer, ., getEvaluations, (, ), ;, }, final, PAIR, [, ], optima, =, getOptima, (, ), ;, if, (]
[+=, optimizer, ., getEvaluations, (, ), ;, }, final, PAIR, [, ], optima, =, getOptima, (, ), ;, if, (]
[(, ), ;, }, final, PAIR, [, ], optima, =, getOptima, (, ), ;, if, (, optima, ., length, ==]
[final, PAIR, [, ], optima, =, getOptima, (, ), ;, if, (, optima, ., length, ==, 0, ), {, throw]
[optima, =, getOptima, (, ), ;, if, (, optima, ., length, ==, 0, ), {, throw, lastException, ;, }, return]
[optima, =, getOptima, (, ), ;, if, (, optima, ., length, ==, 0, ), {, throw, lastException, ;, }, return]
[getOptima, (, ), ;, if, (, optima, ., length, ==, 0, ), {, throw, lastException, ;, }, return, optima, []
