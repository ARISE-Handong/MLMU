[Pair, <, Double, [, ], ,, Double, [, ], >, computeRule, (, int, numberOfPoints, ), throws, DimensionMismatchException, {, if, (]
[Pair, <, Double, [, ], ,, Double, [, ], >, computeRule, (, int, numberOfPoints, ), throws, DimensionMismatchException, {, if, (]
[Double, [, ], ,, Double, [, ], >, computeRule, (, int, numberOfPoints, ), throws, DimensionMismatchException, {, if, (, numberOfPoints, ==]
[Double, [, ], >, computeRule, (, int, numberOfPoints, ), throws, DimensionMismatchException, {, if, (, numberOfPoints, ==, 1, ), {, return]
[if, (, numberOfPoints, ==, 1, ), {, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (]
[1, ), {, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (, new, Double, [, ]]
[), {, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (, new, Double, [, ], {]
[new, Pair, <, Double, [, ], ,, Double, [, ], >, (, new, Double, [, ], {, 0d, }, ,]
[[, ], ,, Double, [, ], >, (, new, Double, [, ], {, 0d, }, ,, new, Double, [, ]]
[], ,, Double, [, ], >, (, new, Double, [, ], {, 0d, }, ,, new, Double, [, ], {]
[{, 0d, }, ,, new, Double, [, ], {, 2d, }, ), ;, }, final, Double, [, ], previousPoints, =]
[{, 0d, }, ,, new, Double, [, ], {, 2d, }, ), ;, }, final, Double, [, ], previousPoints, =]
[}, ,, new, Double, [, ], {, 2d, }, ), ;, }, final, Double, [, ], previousPoints, =, getRuleInternal, (]
[}, ,, new, Double, [, ], {, 2d, }, ), ;, }, final, Double, [, ], previousPoints, =, getRuleInternal, (]
[new, Double, [, ], {, 2d, }, ), ;, }, final, Double, [, ], previousPoints, =, getRuleInternal, (, numberOfPoints, -]
[], previousPoints, =, getRuleInternal, (, numberOfPoints, -, 1, ), ., getFirst, (, ), ;, final, Double, [, ], points, =]
[getRuleInternal, (, numberOfPoints, -, 1, ), ., getFirst, (, ), ;, final, Double, [, ], points, =, new, Double, []
[), ;, final, Double, [, ], points, =, new, Double, [, numberOfPoints, ], ;, final, Double, [, ], weights, =]
[Double, [, ], points, =, new, Double, [, numberOfPoints, ], ;, final, Double, [, ], weights, =, new, Double, []
[[, numberOfPoints, ], ;, final, Double, [, ], weights, =, new, Double, [, numberOfPoints, ], ;, final, int, iMax, =]
[[, numberOfPoints, ], ;, final, Double, [, ], weights, =, new, Double, [, numberOfPoints, ], ;, final, int, iMax, =]
[], ;, final, Double, [, ], weights, =, new, Double, [, numberOfPoints, ], ;, final, int, iMax, =, numberOfPoints, /]
[=, new, Double, [, numberOfPoints, ], ;, final, int, iMax, =, numberOfPoints, /, 2, ;, for, (, int, i, =]
[Double, [, numberOfPoints, ], ;, final, int, iMax, =, numberOfPoints, /, 2, ;, for, (, int, i, =, 0, ;]
[Double, [, numberOfPoints, ], ;, final, int, iMax, =, numberOfPoints, /, 2, ;, for, (, int, i, =, 0, ;]
[numberOfPoints, ], ;, final, int, iMax, =, numberOfPoints, /, 2, ;, for, (, int, i, =, 0, ;, i, <]
[;, final, int, iMax, =, numberOfPoints, /, 2, ;, for, (, int, i, =, 0, ;, i, <, iMax, ;]
[;, final, int, iMax, =, numberOfPoints, /, 2, ;, for, (, int, i, =, 0, ;, i, <, iMax, ;]
[2, ;, for, (, int, i, =, 0, ;, i, <, iMax, ;, i, ++, ), {, double, a, =]
[2, ;, for, (, int, i, =, 0, ;, i, <, iMax, ;, i, ++, ), {, double, a, =]
[;, for, (, int, i, =, 0, ;, i, <, iMax, ;, i, ++, ), {, double, a, =, (]
[;, for, (, int, i, =, 0, ;, i, <, iMax, ;, i, ++, ), {, double, a, =, (]
[(, int, i, =, 0, ;, i, <, iMax, ;, i, ++, ), {, double, a, =, (, i, ==]
[=, 0, ;, i, <, iMax, ;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?]
[0, ;, i, <, iMax, ;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -]
[i, <, iMax, ;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -, 1, :]
[i, <, iMax, ;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -, 1, :]
[i, <, iMax, ;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -, 1, :]
[iMax, ;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -, 1, :, previousPoints, []
[iMax, ;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -, 1, :, previousPoints, []
[i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -, 1, :, previousPoints, [, i, -]
[0, ), ?, -, 1, :, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =]
[0, ), ?, -, 1, :, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =]
[), ?, -, 1, :, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (]
[), ?, -, 1, :, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (]
[-, 1, :, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==]
[previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, ), ?]
[i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, ), ?, 1, :]
[i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, ), ?, 1, :]
[i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, ), ?, 1, :]
[1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, ), ?, 1, :, previousPoints, []
[(, iMax, ==, 1, ), ?, 1, :, previousPoints, [, i, ], ., doubleValue, (, ), ;, double, pma, =]
[?, 1, :, previousPoints, [, i, ], ., doubleValue, (, ), ;, double, pma, =, 1, ;, double, pa, =]
[i, ], ., doubleValue, (, ), ;, double, pma, =, 1, ;, double, pa, =, a, ;, double, pmb, =]
[), ;, double, pma, =, 1, ;, double, pa, =, a, ;, double, pmb, =, 1, ;, double, pb, =]
[double, pa, =, a, ;, double, pmb, =, 1, ;, double, pb, =, b, ;, for, (, int, j, =]
[=, a, ;, double, pmb, =, 1, ;, double, pb, =, b, ;, for, (, int, j, =, 1, ;]
[=, a, ;, double, pmb, =, 1, ;, double, pb, =, b, ;, for, (, int, j, =, 1, ;]
[;, double, pmb, =, 1, ;, double, pb, =, b, ;, for, (, int, j, =, 1, ;, j, <]
[pmb, =, 1, ;, double, pb, =, b, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;]
[pmb, =, 1, ;, double, pb, =, b, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;]
[;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, int, two_j_p_1, =]
[;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, int, two_j_p_1, =]
[;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, int, two_j_p_1, =]
[(, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, int, two_j_p_1, =, 2, *]
[j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, int, two_j_p_1, =, 2, *, j, +]
[numberOfPoints, ;, j, ++, ), {, final, int, two_j_p_1, =, 2, *, j, +, 1, ;, final, int, j_p_1, =]
[numberOfPoints, ;, j, ++, ), {, final, int, two_j_p_1, =, 2, *, j, +, 1, ;, final, int, j_p_1, =]
[j, ++, ), {, final, int, two_j_p_1, =, 2, *, j, +, 1, ;, final, int, j_p_1, =, j, +]
[two_j_p_1, =, 2, *, j, +, 1, ;, final, int, j_p_1, =, j, +, 1, ;, final, double, ppa, =]
[two_j_p_1, =, 2, *, j, +, 1, ;, final, int, j_p_1, =, j, +, 1, ;, final, double, ppa, =]
[=, 2, *, j, +, 1, ;, final, int, j_p_1, =, j, +, 1, ;, final, double, ppa, =, (]
[=, 2, *, j, +, 1, ;, final, int, j_p_1, =, j, +, 1, ;, final, double, ppa, =, (]
[=, 2, *, j, +, 1, ;, final, int, j_p_1, =, j, +, 1, ;, final, double, ppa, =, (]
[=, 2, *, j, +, 1, ;, final, int, j_p_1, =, j, +, 1, ;, final, double, ppa, =, (]
[*, j, +, 1, ;, final, int, j_p_1, =, j, +, 1, ;, final, double, ppa, =, (, two_j_p_1, *]
[+, 1, ;, final, int, j_p_1, =, j, +, 1, ;, final, double, ppa, =, (, two_j_p_1, *, a, *]
[;, final, int, j_p_1, =, j, +, 1, ;, final, double, ppa, =, (, two_j_p_1, *, a, *, pa, -]
[;, final, int, j_p_1, =, j, +, 1, ;, final, double, ppa, =, (, two_j_p_1, *, a, *, pa, -]
[int, j_p_1, =, j, +, 1, ;, final, double, ppa, =, (, two_j_p_1, *, a, *, pa, -, j, *]
[j, +, 1, ;, final, double, ppa, =, (, two_j_p_1, *, a, *, pa, -, j, *, pma, ), /]
[ppa, =, (, two_j_p_1, *, a, *, pa, -, j, *, pma, ), /, j_p_1, ;, final, double, ppb, =]
[ppa, =, (, two_j_p_1, *, a, *, pa, -, j, *, pma, ), /, j_p_1, ;, final, double, ppb, =]
[=, (, two_j_p_1, *, a, *, pa, -, j, *, pma, ), /, j_p_1, ;, final, double, ppb, =, (]
[=, (, two_j_p_1, *, a, *, pa, -, j, *, pma, ), /, j_p_1, ;, final, double, ppb, =, (]
[=, (, two_j_p_1, *, a, *, pa, -, j, *, pma, ), /, j_p_1, ;, final, double, ppb, =, (]
[=, (, two_j_p_1, *, a, *, pa, -, j, *, pma, ), /, j_p_1, ;, final, double, ppb, =, (]
[two_j_p_1, *, a, *, pa, -, j, *, pma, ), /, j_p_1, ;, final, double, ppb, =, (, two_j_p_1, *]
[a, *, pa, -, j, *, pma, ), /, j_p_1, ;, final, double, ppb, =, (, two_j_p_1, *, b, *]
[pa, -, j, *, pma, ), /, j_p_1, ;, final, double, ppb, =, (, two_j_p_1, *, b, *, pb, -]
[pa, -, j, *, pma, ), /, j_p_1, ;, final, double, ppb, =, (, two_j_p_1, *, b, *, pb, -]
[j, *, pma, ), /, j_p_1, ;, final, double, ppb, =, (, two_j_p_1, *, b, *, pb, -, j, *]
[), /, j_p_1, ;, final, double, ppb, =, (, two_j_p_1, *, b, *, pb, -, j, *, pmb, ), /]
[j_p_1, ;, final, double, ppb, =, (, two_j_p_1, *, b, *, pb, -, j, *, pmb, ), /, j_p_1, ;]
[final, double, ppb, =, (, two_j_p_1, *, b, *, pb, -, j, *, pmb, ), /, j_p_1, ;, pma, =]
[ppb, =, (, two_j_p_1, *, b, *, pb, -, j, *, pmb, ), /, j_p_1, ;, pma, =, pa, ;]
[(, two_j_p_1, *, b, *, pb, -, j, *, pmb, ), /, j_p_1, ;, pma, =, pa, ;, pa, =]
[*, b, *, pb, -, j, *, pmb, ), /, j_p_1, ;, pma, =, pa, ;, pa, =, ppa, ;]
[*, pb, -, j, *, pmb, ), /, j_p_1, ;, pma, =, pa, ;, pa, =, ppa, ;, pmb, =]
[-, j, *, pmb, ), /, j_p_1, ;, pma, =, pa, ;, pa, =, ppa, ;, pmb, =, pb, ;]
[*, pmb, ), /, j_p_1, ;, pma, =, pa, ;, pa, =, ppa, ;, pmb, =, pb, ;, pb, =]
[pma, =, pa, ;, pa, =, ppa, ;, pmb, =, pb, ;, pb, =, ppb, ;, }, double, c, =]
[pma, =, pa, ;, pa, =, ppa, ;, pmb, =, pb, ;, pb, =, ppb, ;, }, double, c, =]
[pa, ;, pa, =, ppa, ;, pmb, =, pb, ;, pb, =, ppb, ;, }, double, c, =, 0.5, *]
[;, pa, =, ppa, ;, pmb, =, pb, ;, pb, =, ppb, ;, }, double, c, =, 0.5, *, (]
[;, pa, =, ppa, ;, pmb, =, pb, ;, pb, =, ppb, ;, }, double, c, =, 0.5, *, (]
[=, ppa, ;, pmb, =, pb, ;, pb, =, ppb, ;, }, double, c, =, 0.5, *, (, a, +]
[;, pb, =, ppb, ;, }, double, c, =, 0.5, *, (, a, +, b, ), ;, double, pmc, =]
[}, double, c, =, 0.5, *, (, a, +, b, ), ;, double, pmc, =, 1, ;, double, pc, =]
[*, (, a, +, b, ), ;, double, pmc, =, 1, ;, double, pc, =, c, ;, boolean, done, =]
[b, ), ;, double, pmc, =, 1, ;, double, pc, =, c, ;, boolean, done, =, false, ;, while, (]
[), ;, double, pmc, =, 1, ;, double, pc, =, c, ;, boolean, done, =, false, ;, while, (, !]
[pmc, =, 1, ;, double, pc, =, c, ;, boolean, done, =, false, ;, while, (, !, done, ), {]
[1, ;, double, pc, =, c, ;, boolean, done, =, false, ;, while, (, !, done, ), {, done, =]
[1, ;, double, pc, =, c, ;, boolean, done, =, false, ;, while, (, !, done, ), {, done, =]
[1, ;, double, pc, =, c, ;, boolean, done, =, false, ;, while, (, !, done, ), {, done, =]
[double, pc, =, c, ;, boolean, done, =, false, ;, while, (, !, done, ), {, done, =, b, -]
[=, c, ;, boolean, done, =, false, ;, while, (, !, done, ), {, done, =, b, -, a, <=]
[=, c, ;, boolean, done, =, false, ;, while, (, !, done, ), {, done, =, b, -, a, <=]
[done, =, false, ;, while, (, !, done, ), {, done, =, b, -, a, <=, Math, ., ulp, (]
[;, while, (, !, done, ), {, done, =, b, -, a, <=, Math, ., ulp, (, c, ), ;]
[(, !, done, ), {, done, =, b, -, a, <=, Math, ., ulp, (, c, ), ;, pmc, =]
[done, ), {, done, =, b, -, a, <=, Math, ., ulp, (, c, ), ;, pmc, =, 1, ;]
[{, done, =, b, -, a, <=, Math, ., ulp, (, c, ), ;, pmc, =, 1, ;, pc, =]
[Math, ., ulp, (, c, ), ;, pmc, =, 1, ;, pc, =, c, ;, for, (, int, j, =]
[ulp, (, c, ), ;, pmc, =, 1, ;, pc, =, c, ;, for, (, int, j, =, 1, ;]
[ulp, (, c, ), ;, pmc, =, 1, ;, pc, =, c, ;, for, (, int, j, =, 1, ;]
[c, ), ;, pmc, =, 1, ;, pc, =, c, ;, for, (, int, j, =, 1, ;, j, <]
[;, pmc, =, 1, ;, pc, =, c, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;]
[;, pmc, =, 1, ;, pc, =, c, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;]
[;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, ppc, =]
[;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, ppc, =]
[for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, ppc, =, (]
[for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, ppc, =, (]
[for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, ppc, =, (]
[for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, ppc, =, (]
[(, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, ppc, =, (, (]
[(, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, ppc, =, (, (]
[(, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, ppc, =, (, (]
[j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, ppc, =, (, (, 2, *]
[1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, ppc, =, (, (, 2, *, j, +]
[<, numberOfPoints, ;, j, ++, ), {, final, double, ppc, =, (, (, 2, *, j, +, 1, ), *]
[;, j, ++, ), {, final, double, ppc, =, (, (, 2, *, j, +, 1, ), *, c, *]
[++, ), {, final, double, ppc, =, (, (, 2, *, j, +, 1, ), *, c, *, pc, -]
[++, ), {, final, double, ppc, =, (, (, 2, *, j, +, 1, ), *, c, *, pc, -]
[{, final, double, ppc, =, (, (, 2, *, j, +, 1, ), *, c, *, pc, -, j, *]
[ppc, =, (, (, 2, *, j, +, 1, ), *, c, *, pc, -, j, *, pmc, ), /]
[=, (, (, 2, *, j, +, 1, ), *, c, *, pc, -, j, *, pmc, ), /, (]
[=, (, (, 2, *, j, +, 1, ), *, c, *, pc, -, j, *, pmc, ), /, (]
[(, 2, *, j, +, 1, ), *, c, *, pc, -, j, *, pmc, ), /, (, j, +]
[j, +, 1, ), *, c, *, pc, -, j, *, pmc, ), /, (, j, +, 1, ), ;]
[1, ), *, c, *, pc, -, j, *, pmc, ), /, (, j, +, 1, ), ;, pmc, =]
[*, c, *, pc, -, j, *, pmc, ), /, (, j, +, 1, ), ;, pmc, =, pc, ;]
[*, pc, -, j, *, pmc, ), /, (, j, +, 1, ), ;, pmc, =, pc, ;, pc, =]
[pmc, ), /, (, j, +, 1, ), ;, pmc, =, pc, ;, pc, =, ppc, ;, }, if, (]
[), /, (, j, +, 1, ), ;, pmc, =, pc, ;, pc, =, ppc, ;, }, if, (, !]
[1, ), ;, pmc, =, pc, ;, pc, =, ppc, ;, }, if, (, !, done, ), {, if, (]
[1, ), ;, pmc, =, pc, ;, pc, =, ppc, ;, }, if, (, !, done, ), {, if, (]
[1, ), ;, pmc, =, pc, ;, pc, =, ppc, ;, }, if, (, !, done, ), {, if, (]
[;, pmc, =, pc, ;, pc, =, ppc, ;, }, if, (, !, done, ), {, if, (, pa, *]
[=, pc, ;, pc, =, ppc, ;, }, if, (, !, done, ), {, if, (, pa, *, pc, <=]
[pc, =, ppc, ;, }, if, (, !, done, ), {, if, (, pa, *, pc, <=, 0, ), {]
[ppc, ;, }, if, (, !, done, ), {, if, (, pa, *, pc, <=, 0, ), {, b, =]
[}, if, (, !, done, ), {, if, (, pa, *, pc, <=, 0, ), {, b, =, c, ;]
[(, !, done, ), {, if, (, pa, *, pc, <=, 0, ), {, b, =, c, ;, pmb, =]
[done, ), {, if, (, pa, *, pc, <=, 0, ), {, b, =, c, ;, pmb, =, pmc, ;]
[{, if, (, pa, *, pc, <=, 0, ), {, b, =, c, ;, pmb, =, pmc, ;, pb, =]
[pc, <=, 0, ), {, b, =, c, ;, pmb, =, pmc, ;, pb, =, pc, ;, }, else, {]
[0, ), {, b, =, c, ;, pmb, =, pmc, ;, pb, =, pc, ;, }, else, {, a, =]
[{, b, =, c, ;, pmb, =, pmc, ;, pb, =, pc, ;, }, else, {, a, =, c, ;]
[=, c, ;, pmb, =, pmc, ;, pb, =, pc, ;, }, else, {, a, =, c, ;, pma, =]
[;, pmb, =, pmc, ;, pb, =, pc, ;, }, else, {, a, =, c, ;, pma, =, pmc, ;]
[=, pmc, ;, pb, =, pc, ;, }, else, {, a, =, c, ;, pma, =, pmc, ;, pa, =]
[pb, =, pc, ;, }, else, {, a, =, c, ;, pma, =, pmc, ;, pa, =, pc, ;, }]
[pc, ;, }, else, {, a, =, c, ;, pma, =, pmc, ;, pa, =, pc, ;, }, c, =]
[pc, ;, }, else, {, a, =, c, ;, pma, =, pmc, ;, pa, =, pc, ;, }, c, =]
[}, else, {, a, =, c, ;, pma, =, pmc, ;, pa, =, pc, ;, }, c, =, 0.5, *]
[else, {, a, =, c, ;, pma, =, pmc, ;, pa, =, pc, ;, }, c, =, 0.5, *, (]
[else, {, a, =, c, ;, pma, =, pmc, ;, pa, =, pc, ;, }, c, =, 0.5, *, (]
[a, =, c, ;, pma, =, pmc, ;, pa, =, pc, ;, }, c, =, 0.5, *, (, a, +]
[=, pc, ;, }, c, =, 0.5, *, (, a, +, b, ), ;, }, }, final, double, d, =]
[=, pc, ;, }, c, =, 0.5, *, (, a, +, b, ), ;, }, }, final, double, d, =]
[;, }, c, =, 0.5, *, (, a, +, b, ), ;, }, }, final, double, d, =, numberOfPoints, *]
[}, c, =, 0.5, *, (, a, +, b, ), ;, }, }, final, double, d, =, numberOfPoints, *, (]
[}, c, =, 0.5, *, (, a, +, b, ), ;, }, }, final, double, d, =, numberOfPoints, *, (]
[=, 0.5, *, (, a, +, b, ), ;, }, }, final, double, d, =, numberOfPoints, *, (, pmc, -]
[=, 0.5, *, (, a, +, b, ), ;, }, }, final, double, d, =, numberOfPoints, *, (, pmc, -]
[*, (, a, +, b, ), ;, }, }, final, double, d, =, numberOfPoints, *, (, pmc, -, c, *]
[}, }, final, double, d, =, numberOfPoints, *, (, pmc, -, c, *, pc, ), ;, final, double, w, =]
[}, }, final, double, d, =, numberOfPoints, *, (, pmc, -, c, *, pc, ), ;, final, double, w, =]
[}, }, final, double, d, =, numberOfPoints, *, (, pmc, -, c, *, pc, ), ;, final, double, w, =]
[final, double, d, =, numberOfPoints, *, (, pmc, -, c, *, pc, ), ;, final, double, w, =, 2, *]
[double, d, =, numberOfPoints, *, (, pmc, -, c, *, pc, ), ;, final, double, w, =, 2, *, (]
[double, d, =, numberOfPoints, *, (, pmc, -, c, *, pc, ), ;, final, double, w, =, 2, *, (]
[=, numberOfPoints, *, (, pmc, -, c, *, pc, ), ;, final, double, w, =, 2, *, (, 1, -]
[=, numberOfPoints, *, (, pmc, -, c, *, pc, ), ;, final, double, w, =, 2, *, (, 1, -]
[*, (, pmc, -, c, *, pc, ), ;, final, double, w, =, 2, *, (, 1, -, c, *]
[-, c, *, pc, ), ;, final, double, w, =, 2, *, (, 1, -, c, *, c, ), /]
[c, *, pc, ), ;, final, double, w, =, 2, *, (, 1, -, c, *, c, ), /, (]
[c, *, pc, ), ;, final, double, w, =, 2, *, (, 1, -, c, *, c, ), /, (]
[pc, ), ;, final, double, w, =, 2, *, (, 1, -, c, *, c, ), /, (, d, *]
[final, double, w, =, 2, *, (, 1, -, c, *, c, ), /, (, d, *, d, ), ;]
[final, double, w, =, 2, *, (, 1, -, c, *, c, ), /, (, d, *, d, ), ;]
[w, =, 2, *, (, 1, -, c, *, c, ), /, (, d, *, d, ), ;, points, []
[*, (, 1, -, c, *, c, ), /, (, d, *, d, ), ;, points, [, i, ], =]
[1, -, c, *, c, ), /, (, d, *, d, ), ;, points, [, i, ], =, c, ;]
[1, -, c, *, c, ), /, (, d, *, d, ), ;, points, [, i, ], =, c, ;]
[c, *, c, ), /, (, d, *, d, ), ;, points, [, i, ], =, c, ;, weights, []
[), /, (, d, *, d, ), ;, points, [, i, ], =, c, ;, weights, [, i, ], =]
[), ;, points, [, i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =]
[), ;, points, [, i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =]
[), ;, points, [, i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =]
[points, [, i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =, numberOfPoints, -]
[i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =, numberOfPoints, -, i, -]
[=, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =, numberOfPoints, -, i, -, 1, ;]
[=, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =, numberOfPoints, -, i, -, 1, ;]
[;, weights, [, i, ], =, w, ;, final, int, idx, =, numberOfPoints, -, i, -, 1, ;, points, []
[i, ], =, w, ;, final, int, idx, =, numberOfPoints, -, i, -, 1, ;, points, [, idx, ], =]
[], =, w, ;, final, int, idx, =, numberOfPoints, -, i, -, 1, ;, points, [, idx, ], =, -]
[w, ;, final, int, idx, =, numberOfPoints, -, i, -, 1, ;, points, [, idx, ], =, -, c, ;]
[w, ;, final, int, idx, =, numberOfPoints, -, i, -, 1, ;, points, [, idx, ], =, -, c, ;]
[final, int, idx, =, numberOfPoints, -, i, -, 1, ;, points, [, idx, ], =, -, c, ;, weights, []
[=, numberOfPoints, -, i, -, 1, ;, points, [, idx, ], =, -, c, ;, weights, [, idx, ], =]
[1, ;, points, [, idx, ], =, -, c, ;, weights, [, idx, ], =, w, ;, }, if, (]
[1, ;, points, [, idx, ], =, -, c, ;, weights, [, idx, ], =, w, ;, }, if, (]
[1, ;, points, [, idx, ], =, -, c, ;, weights, [, idx, ], =, w, ;, }, if, (]
[points, [, idx, ], =, -, c, ;, weights, [, idx, ], =, w, ;, }, if, (, numberOfPoints, %]
[idx, ], =, -, c, ;, weights, [, idx, ], =, w, ;, }, if, (, numberOfPoints, %, 2, !=]
[weights, [, idx, ], =, w, ;, }, if, (, numberOfPoints, %, 2, !=, 0, ), {, double, pmc, =]
[}, if, (, numberOfPoints, %, 2, !=, 0, ), {, double, pmc, =, 1, ;, for, (, int, j, =]
[(, numberOfPoints, %, 2, !=, 0, ), {, double, pmc, =, 1, ;, for, (, int, j, =, 1, ;]
[(, numberOfPoints, %, 2, !=, 0, ), {, double, pmc, =, 1, ;, for, (, int, j, =, 1, ;]
[%, 2, !=, 0, ), {, double, pmc, =, 1, ;, for, (, int, j, =, 1, ;, j, <]
[!=, 0, ), {, double, pmc, =, 1, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;]
[), {, double, pmc, =, 1, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, +=]
[pmc, =, 1, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, +=, 2, ), {]
[1, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, +=, 2, ), {, pmc, =]
[1, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, +=, 2, ), {, pmc, =]
[1, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, +=, 2, ), {, pmc, =]
[;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, +=, 2, ), {, pmc, =, -]
[(, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, +=, 2, ), {, pmc, =, -, j, *]
[j, =, 1, ;, j, <, numberOfPoints, ;, j, +=, 2, ), {, pmc, =, -, j, *, pmc, /]
[=, 1, ;, j, <, numberOfPoints, ;, j, +=, 2, ), {, pmc, =, -, j, *, pmc, /, (]
[=, 1, ;, j, <, numberOfPoints, ;, j, +=, 2, ), {, pmc, =, -, j, *, pmc, /, (]
[;, j, <, numberOfPoints, ;, j, +=, 2, ), {, pmc, =, -, j, *, pmc, /, (, j, +]
[), {, pmc, =, -, j, *, pmc, /, (, j, +, 1, ), ;, }, final, double, d, =]
[), {, pmc, =, -, j, *, pmc, /, (, j, +, 1, ), ;, }, final, double, d, =]
[pmc, =, -, j, *, pmc, /, (, j, +, 1, ), ;, }, final, double, d, =, numberOfPoints, *]
[/, (, j, +, 1, ), ;, }, final, double, d, =, numberOfPoints, *, pmc, ;, final, double, w, =]
[/, (, j, +, 1, ), ;, }, final, double, d, =, numberOfPoints, *, pmc, ;, final, double, w, =]
[j, +, 1, ), ;, }, final, double, d, =, numberOfPoints, *, pmc, ;, final, double, w, =, 2, /]
[+, 1, ), ;, }, final, double, d, =, numberOfPoints, *, pmc, ;, final, double, w, =, 2, /, (]
[+, 1, ), ;, }, final, double, d, =, numberOfPoints, *, pmc, ;, final, double, w, =, 2, /, (]
[), ;, }, final, double, d, =, numberOfPoints, *, pmc, ;, final, double, w, =, 2, /, (, d, *]
[final, double, d, =, numberOfPoints, *, pmc, ;, final, double, w, =, 2, /, (, d, *, d, ), ;]
[final, double, d, =, numberOfPoints, *, pmc, ;, final, double, w, =, 2, /, (, d, *, d, ), ;]
[d, =, numberOfPoints, *, pmc, ;, final, double, w, =, 2, /, (, d, *, d, ), ;, points, []
[*, pmc, ;, final, double, w, =, 2, /, (, d, *, d, ), ;, points, [, iMax, ], =]
[;, final, double, w, =, 2, /, (, d, *, d, ), ;, points, [, iMax, ], =, 0d, ;]
[;, final, double, w, =, 2, /, (, d, *, d, ), ;, points, [, iMax, ], =, 0d, ;]
[double, w, =, 2, /, (, d, *, d, ), ;, points, [, iMax, ], =, 0d, ;, weights, []
[2, /, (, d, *, d, ), ;, points, [, iMax, ], =, 0d, ;, weights, [, iMax, ], =]
[*, d, ), ;, points, [, iMax, ], =, 0d, ;, weights, [, iMax, ], =, w, ;, }, return]
[[, iMax, ], =, w, ;, }, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (]
[], =, w, ;, }, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (, points, ,]
