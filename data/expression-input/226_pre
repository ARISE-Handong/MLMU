[Token, ;, import, java, ., util, ., LinkedHashMap, ;, public, class, FindExportableNodes, extends, AbstractPostOrderCallback, {, static, final, DiagnosticType, NON_GLOBAL_ERROR, =]
[Token, ;, import, java, ., util, ., LinkedHashMap, ;, public, class, FindExportableNodes, extends, AbstractPostOrderCallback, {, static, final, DiagnosticType, NON_GLOBAL_ERROR, =]
[., util, ., LinkedHashMap, ;, public, class, FindExportableNodes, extends, AbstractPostOrderCallback, {, static, final, DiagnosticType, NON_GLOBAL_ERROR, =, DiagnosticType, ., error, (]
[., LinkedHashMap, ;, public, class, FindExportableNodes, extends, AbstractPostOrderCallback, {, static, final, DiagnosticType, NON_GLOBAL_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_GLOBAL_ERROR", ,]
[., LinkedHashMap, ;, public, class, FindExportableNodes, extends, AbstractPostOrderCallback, {, static, final, DiagnosticType, NON_GLOBAL_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_GLOBAL_ERROR", ,]
[;, public, class, FindExportableNodes, extends, AbstractPostOrderCallback, {, static, final, DiagnosticType, NON_GLOBAL_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_GLOBAL_ERROR", ,, "@export only applies to symbols/properties defined in the ", +]
[LinkedHashMap, <, String, ,, GenerateNodeContext, >, exports, ;, private, final, AbstractCompiler, compiler, ;, public, FindExportableNodes, (, AbstractCompiler, compiler, ), {]
[LinkedHashMap, <, String, ,, GenerateNodeContext, >, exports, ;, private, final, AbstractCompiler, compiler, ;, public, FindExportableNodes, (, AbstractCompiler, compiler, ), {]
[GenerateNodeContext, >, exports, ;, private, final, AbstractCompiler, compiler, ;, public, FindExportableNodes, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[exports, ;, private, final, AbstractCompiler, compiler, ;, public, FindExportableNodes, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[exports, ;, private, final, AbstractCompiler, compiler, ;, public, FindExportableNodes, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[AbstractCompiler, compiler, ;, public, FindExportableNodes, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., exports, =]
[AbstractCompiler, compiler, ;, public, FindExportableNodes, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., exports, =]
[}, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, JSDocInfo, docInfo, =]
[}, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, JSDocInfo, docInfo, =]
[t, ,, Node, n, ,, Node, parent, ), {, JSDocInfo, docInfo, =, n, ., getJSDocInfo, (, ), ;, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, JSDocInfo, docInfo, =, n, ., getJSDocInfo, (, ), ;, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, JSDocInfo, docInfo, =, n, ., getJSDocInfo, (, ), ;, if, (]
[Node, n, ,, Node, parent, ), {, JSDocInfo, docInfo, =, n, ., getJSDocInfo, (, ), ;, if, (, docInfo, !=]
[,, Node, parent, ), {, JSDocInfo, docInfo, =, n, ., getJSDocInfo, (, ), ;, if, (, docInfo, !=, null, &&]
[,, Node, parent, ), {, JSDocInfo, docInfo, =, n, ., getJSDocInfo, (, ), ;, if, (, docInfo, !=, null, &&]
[getJSDocInfo, (, ), ;, if, (, docInfo, !=, null, &&, docInfo, ., isExport, (, ), ), {, String, export, =]
[(, docInfo, !=, null, &&, docInfo, ., isExport, (, ), ), {, String, export, =, null, ;, GenerateNodeContext, context, =]
[&&, docInfo, ., isExport, (, ), ), {, String, export, =, null, ;, GenerateNodeContext, context, =, null, ;, switch, (]
[&&, docInfo, ., isExport, (, ), ), {, String, export, =, null, ;, GenerateNodeContext, context, =, null, ;, switch, (]
[String, export, =, null, ;, GenerateNodeContext, context, =, null, ;, switch, (, n, ., getType, (, ), ), {, case]
[String, export, =, null, ;, GenerateNodeContext, context, =, null, ;, switch, (, n, ., getType, (, ), ), {, case]
[context, =, null, ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, if, (]
[context, =, null, ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, if, (]
[., getType, (, ), ), {, case, Token, ., FUNCTION, :, if, (, parent, ., isScript, (, ), ), {]
[(, ), ), {, case, Token, ., FUNCTION, :, if, (, parent, ., isScript, (, ), ), {, export, =]
[(, ), ), {, case, Token, ., FUNCTION, :, if, (, parent, ., isScript, (, ), ), {, export, =]
[case, Token, ., FUNCTION, :, if, (, parent, ., isScript, (, ), ), {, export, =, NodeUtil, ., getFunctionName, (]
[FUNCTION, :, if, (, parent, ., isScript, (, ), ), {, export, =, NodeUtil, ., getFunctionName, (, n, ), ;]
[if, (, parent, ., isScript, (, ), ), {, export, =, NodeUtil, ., getFunctionName, (, n, ), ;, context, =]
[., isScript, (, ), ), {, export, =, NodeUtil, ., getFunctionName, (, n, ), ;, context, =, new, GenerateNodeContext, (]
[(, ), ), {, export, =, NodeUtil, ., getFunctionName, (, n, ), ;, context, =, new, GenerateNodeContext, (, n, ,]
[), {, export, =, NodeUtil, ., getFunctionName, (, n, ), ;, context, =, new, GenerateNodeContext, (, n, ,, parent, ,]
[(, n, ), ;, context, =, new, GenerateNodeContext, (, n, ,, parent, ,, n, ), ;, }, break, ;, case]
[(, n, ), ;, context, =, new, GenerateNodeContext, (, n, ,, parent, ,, n, ), ;, }, break, ;, case]
[GenerateNodeContext, (, n, ,, parent, ,, n, ), ;, }, break, ;, case, Token, ., ASSIGN, :, Node, grandparent, =]
[GenerateNodeContext, (, n, ,, parent, ,, n, ), ;, }, break, ;, case, Token, ., ASSIGN, :, Node, grandparent, =]
[;, }, break, ;, case, Token, ., ASSIGN, :, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (]
[;, }, break, ;, case, Token, ., ASSIGN, :, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (]
[;, }, break, ;, case, Token, ., ASSIGN, :, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (]
[;, }, break, ;, case, Token, ., ASSIGN, :, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (]
[;, }, break, ;, case, Token, ., ASSIGN, :, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (]
[break, ;, case, Token, ., ASSIGN, :, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (, grandparent, !=]
[case, Token, ., ASSIGN, :, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (, grandparent, !=, null, &&]
[case, Token, ., ASSIGN, :, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (, grandparent, !=, null, &&]
[grandparent, =, parent, ., getParent, (, ), ;, if, (, grandparent, !=, null, &&, grandparent, ., isScript, (, ), &&]
[grandparent, =, parent, ., getParent, (, ), ;, if, (, grandparent, !=, null, &&, grandparent, ., isScript, (, ), &&]
[), ;, if, (, grandparent, !=, null, &&, grandparent, ., isScript, (, ), &&, parent, ., isExprResult, (, ), &&]
[;, if, (, grandparent, !=, null, &&, grandparent, ., isScript, (, ), &&, parent, ., isExprResult, (, ), &&, !]
[;, if, (, grandparent, !=, null, &&, grandparent, ., isScript, (, ), &&, parent, ., isExprResult, (, ), &&, !]
[;, if, (, grandparent, !=, null, &&, grandparent, ., isScript, (, ), &&, parent, ., isExprResult, (, ), &&, !]
[), &&, parent, ., isExprResult, (, ), &&, !, n, ., getLastChild, (, ), ., isAssign, (, ), ), {]
[parent, ., isExprResult, (, ), &&, !, n, ., getLastChild, (, ), ., isAssign, (, ), ), {, export, =]
[parent, ., isExprResult, (, ), &&, !, n, ., getLastChild, (, ), ., isAssign, (, ), ), {, export, =]
[parent, ., isExprResult, (, ), &&, !, n, ., getLastChild, (, ), ., isAssign, (, ), ), {, export, =]
[(, ), ., isAssign, (, ), ), {, export, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;]
[., isAssign, (, ), ), {, export, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, context, =]
[), ), {, export, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, context, =, new, GenerateNodeContext, (]
[{, export, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, context, =, new, GenerateNodeContext, (, n, ,]
[=, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, context, =, new, GenerateNodeContext, (, n, ,, grandparent, ,]
[getQualifiedName, (, ), ;, context, =, new, GenerateNodeContext, (, n, ,, grandparent, ,, parent, ), ;, }, break, ;, case]
[getQualifiedName, (, ), ;, context, =, new, GenerateNodeContext, (, n, ,, grandparent, ,, parent, ), ;, }, break, ;, case]
[new, GenerateNodeContext, (, n, ,, grandparent, ,, parent, ), ;, }, break, ;, case, Token, ., VAR, :, if, (]
[new, GenerateNodeContext, (, n, ,, grandparent, ,, parent, ), ;, }, break, ;, case, Token, ., VAR, :, if, (]
[;, }, break, ;, case, Token, ., VAR, :, if, (, parent, ., isScript, (, ), ), {, if, (]
[;, }, break, ;, case, Token, ., VAR, :, if, (, parent, ., isScript, (, ), ), {, if, (]
[;, }, break, ;, case, Token, ., VAR, :, if, (, parent, ., isScript, (, ), ), {, if, (]
[;, }, break, ;, case, Token, ., VAR, :, if, (, parent, ., isScript, (, ), ), {, if, (]
[(, parent, ., isScript, (, ), ), {, if, (, n, ., getFirstChild, (, ), ., hasChildren, (, ), &&]
[parent, ., isScript, (, ), ), {, if, (, n, ., getFirstChild, (, ), ., hasChildren, (, ), &&, !]
[parent, ., isScript, (, ), ), {, if, (, n, ., getFirstChild, (, ), ., hasChildren, (, ), &&, !]
[parent, ., isScript, (, ), ), {, if, (, n, ., getFirstChild, (, ), ., hasChildren, (, ), &&, !]
[parent, ., isScript, (, ), ), {, if, (, n, ., getFirstChild, (, ), ., hasChildren, (, ), &&, !]
[hasChildren, (, ), &&, !, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ., isAssign, (, ), ), {]
[), &&, !, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ., isAssign, (, ), ), {, export, =]
[), &&, !, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ., isAssign, (, ), ), {, export, =]
[), &&, !, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ., isAssign, (, ), ), {, export, =]
[(, ), ., isAssign, (, ), ), {, export, =, n, ., getFirstChild, (, ), ., getString, (, ), ;]
[., isAssign, (, ), ), {, export, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, context, =]
[), ), {, export, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, context, =, new, GenerateNodeContext, (]
[{, export, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, context, =, new, GenerateNodeContext, (, n, ,]
[=, n, ., getFirstChild, (, ), ., getString, (, ), ;, context, =, new, GenerateNodeContext, (, n, ,, parent, ,]
[(, ), ;, context, =, new, GenerateNodeContext, (, n, ,, parent, ,, n, ), ;, }, }, }, if, (]
[(, ), ;, context, =, new, GenerateNodeContext, (, n, ,, parent, ,, n, ), ;, }, }, }, if, (]
[;, context, =, new, GenerateNodeContext, (, n, ,, parent, ,, n, ), ;, }, }, }, if, (, export, !=]
[new, GenerateNodeContext, (, n, ,, parent, ,, n, ), ;, }, }, }, if, (, export, !=, null, ), {]
[new, GenerateNodeContext, (, n, ,, parent, ,, n, ), ;, }, }, }, if, (, export, !=, null, ), {]
[,, parent, ,, n, ), ;, }, }, }, if, (, export, !=, null, ), {, exports, ., put, (]
[,, n, ), ;, }, }, }, if, (, export, !=, null, ), {, exports, ., put, (, export, ,]
[}, if, (, export, !=, null, ), {, exports, ., put, (, export, ,, context, ), ;, }, else, {]
[}, if, (, export, !=, null, ), {, exports, ., put, (, export, ,, context, ), ;, }, else, {]
[!=, null, ), {, exports, ., put, (, export, ,, context, ), ;, }, else, {, compiler, ., report, (]
[!=, null, ), {, exports, ., put, (, export, ,, context, ), ;, }, else, {, compiler, ., report, (]
[exports, ., put, (, export, ,, context, ), ;, }, else, {, compiler, ., report, (, t, ., makeError, (]
[put, (, export, ,, context, ), ;, }, else, {, compiler, ., report, (, t, ., makeError, (, n, ,]
[,, NON_GLOBAL_ERROR, ), ), ;, }, }, }, public, LinkedHashMap, <, String, ,, GenerateNodeContext, >, getExports, (, ), {, return]
[contextNode, ;, private, final, Node, node, ;, public, GenerateNodeContext, (, Node, node, ,, Node, scriptNode, ,, Node, contextNode, ), {]
[contextNode, ;, private, final, Node, node, ;, public, GenerateNodeContext, (, Node, node, ,, Node, scriptNode, ,, Node, contextNode, ), {]
[Node, node, ;, public, GenerateNodeContext, (, Node, node, ,, Node, scriptNode, ,, Node, contextNode, ), {, this, ., node, =]
[;, public, GenerateNodeContext, (, Node, node, ,, Node, scriptNode, ,, Node, contextNode, ), {, this, ., node, =, node, ;]
[;, public, GenerateNodeContext, (, Node, node, ,, Node, scriptNode, ,, Node, contextNode, ), {, this, ., node, =, node, ;]
[Node, node, ,, Node, scriptNode, ,, Node, contextNode, ), {, this, ., node, =, node, ;, this, ., scriptNode, =]
[,, Node, scriptNode, ,, Node, contextNode, ), {, this, ., node, =, node, ;, this, ., scriptNode, =, scriptNode, ;]
[,, Node, scriptNode, ,, Node, contextNode, ), {, this, ., node, =, node, ;, this, ., scriptNode, =, scriptNode, ;]
[Node, contextNode, ), {, this, ., node, =, node, ;, this, ., scriptNode, =, scriptNode, ;, this, ., contextNode, =]
[this, ., scriptNode, =, scriptNode, ;, this, ., contextNode, =, contextNode, ;, }, public, Node, getNode, (, ), {, return]
[contextNode, ;, }, public, Node, getNode, (, ), {, return, node, ;, }, public, Node, getScriptNode, (, ), {, return]
[node, ;, }, public, Node, getScriptNode, (, ), {, return, scriptNode, ;, }, public, Node, getContextNode, (, ), {, return]
