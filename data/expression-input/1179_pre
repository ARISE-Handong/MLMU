[commons, ., math3, ., util, ., FastMath, ;, public, class, SimpsonIntegrator, extends, BaseAbstractUnivariateIntegrator, {, public, static, final, int, SIMPSON_MAX_ITERATIONS_COUNT, =]
[double, absoluteAccuracy, ,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (]
[,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,]
[int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,]
[,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,]
[throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (]
[throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (]
[,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >]
[{, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, SIMPSON_MAX_ITERATIONS_COUNT, ), {, throw]
[relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, SIMPSON_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (]
[absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, SIMPSON_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,]
[minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, SIMPSON_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, SIMPSON_MAX_ITERATIONS_COUNT, ,]
[public, SimpsonIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (]
[(, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, minimalIterationCount, ,]
[final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (]
[final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (]
[maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >]
[,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, SIMPSON_MAX_ITERATIONS_COUNT, ), {, throw]
[NumberIsTooLargeException, {, super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, SIMPSON_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (]
[super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, SIMPSON_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,]
[minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, SIMPSON_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, SIMPSON_MAX_ITERATIONS_COUNT, ,]
[throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, SIMPSON_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, SimpsonIntegrator, (, ), {, super, (]
[NumberIsTooLargeException, (, maximalIterationCount, ,, SIMPSON_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, SimpsonIntegrator, (, ), {, super, (, DEFAULT_MIN_ITERATIONS_COUNT, ,]
[,, SIMPSON_MAX_ITERATIONS_COUNT, ), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, TooManyEvaluationsException, ,, MaxCountExceededException, {, TrapezoidIntegrator, qtrap, =]
[protected, double, doIntegrate, (, ), throws, TooManyEvaluationsException, ,, MaxCountExceededException, {, TrapezoidIntegrator, qtrap, =, new, TrapezoidIntegrator, (, ), ;, if, (]
[protected, double, doIntegrate, (, ), throws, TooManyEvaluationsException, ,, MaxCountExceededException, {, TrapezoidIntegrator, qtrap, =, new, TrapezoidIntegrator, (, ), ;, if, (]
[), throws, TooManyEvaluationsException, ,, MaxCountExceededException, {, TrapezoidIntegrator, qtrap, =, new, TrapezoidIntegrator, (, ), ;, if, (, getMinimalIterationCount, (, ), ==]
[MaxCountExceededException, {, TrapezoidIntegrator, qtrap, =, new, TrapezoidIntegrator, (, ), ;, if, (, getMinimalIterationCount, (, ), ==, 1, ), {, return]
[MaxCountExceededException, {, TrapezoidIntegrator, qtrap, =, new, TrapezoidIntegrator, (, ), ;, if, (, getMinimalIterationCount, (, ), ==, 1, ), {, return]
[{, TrapezoidIntegrator, qtrap, =, new, TrapezoidIntegrator, (, ), ;, if, (, getMinimalIterationCount, (, ), ==, 1, ), {, return, (]
[{, TrapezoidIntegrator, qtrap, =, new, TrapezoidIntegrator, (, ), ;, if, (, getMinimalIterationCount, (, ), ==, 1, ), {, return, (]
[{, TrapezoidIntegrator, qtrap, =, new, TrapezoidIntegrator, (, ), ;, if, (, getMinimalIterationCount, (, ), ==, 1, ), {, return, (]
[qtrap, =, new, TrapezoidIntegrator, (, ), ;, if, (, getMinimalIterationCount, (, ), ==, 1, ), {, return, (, 4, *]
[qtrap, =, new, TrapezoidIntegrator, (, ), ;, if, (, getMinimalIterationCount, (, ), ==, 1, ), {, return, (, 4, *]
[(, ), ;, if, (, getMinimalIterationCount, (, ), ==, 1, ), {, return, (, 4, *, qtrap, ., stage, (]
[;, if, (, getMinimalIterationCount, (, ), ==, 1, ), {, return, (, 4, *, qtrap, ., stage, (, this, ,]
[getMinimalIterationCount, (, ), ==, 1, ), {, return, (, 4, *, qtrap, ., stage, (, this, ,, 1, ), -]
[getMinimalIterationCount, (, ), ==, 1, ), {, return, (, 4, *, qtrap, ., stage, (, this, ,, 1, ), -]
[1, ), {, return, (, 4, *, qtrap, ., stage, (, this, ,, 1, ), -, qtrap, ., stage, (]
[{, return, (, 4, *, qtrap, ., stage, (, this, ,, 1, ), -, qtrap, ., stage, (, this, ,]
[*, qtrap, ., stage, (, this, ,, 1, ), -, qtrap, ., stage, (, this, ,, 0, ), ), /]
[,, 1, ), -, qtrap, ., stage, (, this, ,, 0, ), ), /, 3.0, ;, }, double, olds, =]
[., stage, (, this, ,, 0, ), ), /, 3.0, ;, }, double, olds, =, 0, ;, double, oldt, =]
[., stage, (, this, ,, 0, ), ), /, 3.0, ;, }, double, olds, =, 0, ;, double, oldt, =]
[,, 0, ), ), /, 3.0, ;, }, double, olds, =, 0, ;, double, oldt, =, qtrap, ., stage, (]
[), ), /, 3.0, ;, }, double, olds, =, 0, ;, double, oldt, =, qtrap, ., stage, (, this, ,]
[}, double, olds, =, 0, ;, double, oldt, =, qtrap, ., stage, (, this, ,, 0, ), ;, while, (]
[oldt, =, qtrap, ., stage, (, this, ,, 0, ), ;, while, (, true, ), {, final, double, t, =]
[oldt, =, qtrap, ., stage, (, this, ,, 0, ), ;, while, (, true, ), {, final, double, t, =]
[stage, (, this, ,, 0, ), ;, while, (, true, ), {, final, double, t, =, qtrap, ., stage, (]
[this, ,, 0, ), ;, while, (, true, ), {, final, double, t, =, qtrap, ., stage, (, this, ,]
[this, ,, 0, ), ;, while, (, true, ), {, final, double, t, =, qtrap, ., stage, (, this, ,]
[true, ), {, final, double, t, =, qtrap, ., stage, (, this, ,, iterations, ., getCount, (, ), ), ;]
[true, ), {, final, double, t, =, qtrap, ., stage, (, this, ,, iterations, ., getCount, (, ), ), ;]
[(, this, ,, iterations, ., getCount, (, ), ), ;, iterations, ., incrementCount, (, ), ;, final, double, s, =]
[(, this, ,, iterations, ., getCount, (, ), ), ;, iterations, ., incrementCount, (, ), ;, final, double, s, =]
[this, ,, iterations, ., getCount, (, ), ), ;, iterations, ., incrementCount, (, ), ;, final, double, s, =, (]
[this, ,, iterations, ., getCount, (, ), ), ;, iterations, ., incrementCount, (, ), ;, final, double, s, =, (]
[this, ,, iterations, ., getCount, (, ), ), ;, iterations, ., incrementCount, (, ), ;, final, double, s, =, (]
[iterations, ., getCount, (, ), ), ;, iterations, ., incrementCount, (, ), ;, final, double, s, =, (, 4, *]
[getCount, (, ), ), ;, iterations, ., incrementCount, (, ), ;, final, double, s, =, (, 4, *, t, -]
[), ;, iterations, ., incrementCount, (, ), ;, final, double, s, =, (, 4, *, t, -, oldt, ), /]
[incrementCount, (, ), ;, final, double, s, =, (, 4, *, t, -, oldt, ), /, 3.0, ;, if, (]
[incrementCount, (, ), ;, final, double, s, =, (, 4, *, t, -, oldt, ), /, 3.0, ;, if, (]
[incrementCount, (, ), ;, final, double, s, =, (, 4, *, t, -, oldt, ), /, 3.0, ;, if, (]
[s, =, (, 4, *, t, -, oldt, ), /, 3.0, ;, if, (, iterations, ., getCount, (, ), >=]
[/, 3.0, ;, if, (, iterations, ., getCount, (, ), >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =]
[/, 3.0, ;, if, (, iterations, ., getCount, (, ), >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =]
[(, iterations, ., getCount, (, ), >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (]
[(, iterations, ., getCount, (, ), >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (]
[., getCount, (, ), >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (, s, -]
[), ), {, final, double, delta, =, FastMath, ., abs, (, s, -, olds, ), ;, final, double, rLimit, =]
[), ), {, final, double, delta, =, FastMath, ., abs, (, s, -, olds, ), ;, final, double, rLimit, =]
[), ), {, final, double, delta, =, FastMath, ., abs, (, s, -, olds, ), ;, final, double, rLimit, =]
[double, delta, =, FastMath, ., abs, (, s, -, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *]
[delta, =, FastMath, ., abs, (, s, -, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (]
[delta, =, FastMath, ., abs, (, s, -, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (]
[delta, =, FastMath, ., abs, (, s, -, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (]
[abs, (, s, -, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (]
[-, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, olds, ), +]
[-, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, olds, ), +]
[final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, olds, ), +, FastMath, ., abs, (]
[getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, olds, ), +, FastMath, ., abs, (, s, ), ), *]
[(, FastMath, ., abs, (, olds, ), +, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (]
[(, FastMath, ., abs, (, olds, ), +, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (]
[FastMath, ., abs, (, olds, ), +, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (, (]
[FastMath, ., abs, (, olds, ), +, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (, (]
[abs, (, olds, ), +, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (, (, delta, <=]
[), +, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||]
[+, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (]
[+, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (]
[., abs, (, s, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=]
[0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return]
[(, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, s, ;, }, }]
[<=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, s, ;, }, }, olds, =]
[), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, s, ;, }, }, olds, =, s, ;]
[(, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, s, ;, }, }, olds, =, s, ;, oldt, =]
