[private, static, final, long, serialVersionUID, =, 5004523158306266035L, ;, final, long, iUnitMillis, ;, private, final, DurationField, iUnitField, ;, public, PreciseDurationDateTimeField, (]
[), private, static, final, long, serialVersionUID, =, 5004523158306266035L, ;, final, long, iUnitMillis, ;, private, final, DurationField, iUnitField, ;, public, PreciseDurationDateTimeField]
[;, final, long, iUnitMillis, ;, private, final, DurationField, iUnitField, ;, public, PreciseDurationDateTimeField, (, DateTimeFieldType, type, ,, DurationField, unit, ), {]
[), ;, if, (, !, unit, ., isPrecise, (, ), ), {, throw, new, IllegalArgumentException, (, "Unit duration field must be precise", ), ;, }]
[), {, throw, new, IllegalArgumentException, (, "Unit duration field must be precise", ), ;, }, iUnitMillis, =, unit, ., getUnitMillis, (, ), ;, if, (]
[), {, throw, new, IllegalArgumentException, (, "Unit duration field must be precise", ), ;, }, iUnitMillis, =, unit, ., getUnitMillis, (, ), ;, if, (]
[., isPrecise, (, ), ), {, throw, new, IllegalArgumentException, (, "Unit duration field must be precise", ), ;, }, iUnitMillis, =, unit, ., getUnitMillis, (]
[;, }, iUnitMillis, =, unit, ., getUnitMillis, (, ), ;, if, (, iUnitMillis, <, 1, ), {, throw, new, IllegalArgumentException]
[), ;, }, iUnitMillis, =, unit, ., getUnitMillis, (, ), ;, if, (, iUnitMillis, <, 1, ), {, throw, new]
[=, unit, ., getUnitMillis, (, ), ;, if, (, iUnitMillis, <, 1, ), {, throw, new, IllegalArgumentException, (, "The unit milliseconds must be at least 1", )]
[;, if, (, iUnitMillis, <, 1, ), {, throw, new, IllegalArgumentException, (, "The unit milliseconds must be at least 1", ), ;, }, iUnitField, =, unit, ;]
[., getUnitMillis, (, ), ;, if, (, iUnitMillis, <, 1, ), {, throw, new, IllegalArgumentException, (, "The unit milliseconds must be at least 1", ), ;, }]
[), {, throw, new, IllegalArgumentException, (, "The unit milliseconds must be at least 1", ), ;, }, iUnitField, =, unit, ;, }, public, boolean, isLenient, (, )]
[<, 1, ), {, throw, new, IllegalArgumentException, (, "The unit milliseconds must be at least 1", ), ;, }, iUnitField, =, unit, ;, }, public, boolean, isLenient]
[), {, throw, new, IllegalArgumentException, (, "The unit milliseconds must be at least 1", ), ;, }, iUnitField, =, unit, ;, }, public, boolean, isLenient, (, )]
[;, }, iUnitField, =, unit, ;, }, public, boolean, isLenient, (, ), {, return, false, ;, }, public, long, set]
[), ;, }, iUnitField, =, unit, ;, }, public, boolean, isLenient, (, ), {, return, false, ;, }, public, long]
[=, unit, ;, }, public, boolean, isLenient, (, ), {, return, false, ;, }, public, long, set, (, long, instant]
[;, }, public, boolean, isLenient, (, ), {, return, false, ;, }, public, long, set, (, long, instant, ,, int]
[;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value]
[;, return, instant, +, (, value, -, get, (, instant, ), ), *, iUnitMillis, ;, }, public, long, roundFloor, (]
[., verifyValueBounds, (, this, ,, value, ,, getMinimumValue, (, ), ,, getMaximumValueForSet, (, instant, ,, value, ), ), ;, return]
[,, value, ,, getMinimumValue, (, ), ,, getMaximumValueForSet, (, instant, ,, value, ), ), ;, return, instant, +, (, value]
[,, getMinimumValue, (, ), ,, getMaximumValueForSet, (, instant, ,, value, ), ), ;, return, instant, +, (, value, -, get]
[,, getMaximumValueForSet, (, instant, ,, value, ), ), ;, return, instant, +, (, value, -, get, (, instant, ), )]
[), ;, return, instant, +, (, value, -, get, (, instant, ), ), *, iUnitMillis, ;, }, public, long, roundFloor]
[,, value, ), ), ;, return, instant, +, (, value, -, get, (, instant, ), ), *, iUnitMillis, ;, }]
[), ), ;, return, instant, +, (, value, -, get, (, instant, ), ), *, iUnitMillis, ;, }, public, long]
[;, }, public, long, roundFloor, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return, instant, -]
[+, (, value, -, get, (, instant, ), ), *, iUnitMillis, ;, }, public, long, roundFloor, (, long, instant, )]
[;, }, public, long, roundFloor, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return, instant, -]
[*, iUnitMillis, ;, }, public, long, roundFloor, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return]
[), *, iUnitMillis, ;, }, public, long, roundFloor, (, long, instant, ), {, if, (, instant, >=, 0, ), {]
[-, get, (, instant, ), ), *, iUnitMillis, ;, }, public, long, roundFloor, (, long, instant, ), {, if, (]
[), *, iUnitMillis, ;, }, public, long, roundFloor, (, long, instant, ), {, if, (, instant, >=, 0, ), {]
[), ), *, iUnitMillis, ;, }, public, long, roundFloor, (, long, instant, ), {, if, (, instant, >=, 0, )]
[;, }, public, long, roundFloor, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return, instant, -]
[), {, return, instant, -, instant, %, iUnitMillis, ;, }, else, {, instant, +=, 1, ;, return, instant, -, instant]
[>=, 0, ), {, return, instant, -, instant, %, iUnitMillis, ;, }, else, {, instant, +=, 1, ;, return, instant]
[), {, return, instant, -, instant, %, iUnitMillis, ;, }, else, {, instant, +=, 1, ;, return, instant, -, instant]
[;, }, else, {, instant, +=, 1, ;, return, instant, -, instant, %, iUnitMillis, -, iUnitMillis, ;, }, }, public]
[-, instant, %, iUnitMillis, ;, }, else, {, instant, +=, 1, ;, return, instant, -, instant, %, iUnitMillis, -, iUnitMillis]
[;, }, else, {, instant, +=, 1, ;, return, instant, -, instant, %, iUnitMillis, -, iUnitMillis, ;, }, }, public]
[%, iUnitMillis, ;, }, else, {, instant, +=, 1, ;, return, instant, -, instant, %, iUnitMillis, -, iUnitMillis, ;, }]
[;, }, else, {, instant, +=, 1, ;, return, instant, -, instant, %, iUnitMillis, -, iUnitMillis, ;, }, }, public]
[+=, 1, ;, return, instant, -, instant, %, iUnitMillis, -, iUnitMillis, ;, }, }, public, long, roundCeiling, (, long, instant]
[;, return, instant, -, instant, %, iUnitMillis, -, iUnitMillis, ;, }, }, public, long, roundCeiling, (, long, instant, ), {]
[;, }, }, public, long, roundCeiling, (, long, instant, ), {, if, (, instant, >, 0, ), {, instant, -=]
[-, iUnitMillis, ;, }, }, public, long, roundCeiling, (, long, instant, ), {, if, (, instant, >, 0, ), {]
[-, instant, %, iUnitMillis, -, iUnitMillis, ;, }, }, public, long, roundCeiling, (, long, instant, ), {, if, (, instant]
[-, iUnitMillis, ;, }, }, public, long, roundCeiling, (, long, instant, ), {, if, (, instant, >, 0, ), {]
[%, iUnitMillis, -, iUnitMillis, ;, }, }, public, long, roundCeiling, (, long, instant, ), {, if, (, instant, >, 0]
[-, iUnitMillis, ;, }, }, public, long, roundCeiling, (, long, instant, ), {, if, (, instant, >, 0, ), {]
[;, }, }, public, long, roundCeiling, (, long, instant, ), {, if, (, instant, >, 0, ), {, instant, -=]
[), {, instant, -=, 1, ;, return, instant, -, instant, %, iUnitMillis, +, iUnitMillis, ;, }, else, {, return, instant]
[>, 0, ), {, instant, -=, 1, ;, return, instant, -, instant, %, iUnitMillis, +, iUnitMillis, ;, }, else, {]
[), {, instant, -=, 1, ;, return, instant, -, instant, %, iUnitMillis, +, iUnitMillis, ;, }, else, {, return, instant]
[-=, 1, ;, return, instant, -, instant, %, iUnitMillis, +, iUnitMillis, ;, }, else, {, return, instant, -, instant, %]
[;, return, instant, -, instant, %, iUnitMillis, +, iUnitMillis, ;, }, else, {, return, instant, -, instant, %, iUnitMillis, ;]
[;, }, else, {, return, instant, -, instant, %, iUnitMillis, ;, }, }, public, long, remainder, (, long, instant, )]
[+, iUnitMillis, ;, }, else, {, return, instant, -, instant, %, iUnitMillis, ;, }, }, public, long, remainder, (, long]
[-, instant, %, iUnitMillis, +, iUnitMillis, ;, }, else, {, return, instant, -, instant, %, iUnitMillis, ;, }, }, public]
[+, iUnitMillis, ;, }, else, {, return, instant, -, instant, %, iUnitMillis, ;, }, }, public, long, remainder, (, long]
[%, iUnitMillis, +, iUnitMillis, ;, }, else, {, return, instant, -, instant, %, iUnitMillis, ;, }, }, public, long, remainder]
[+, iUnitMillis, ;, }, else, {, return, instant, -, instant, %, iUnitMillis, ;, }, }, public, long, remainder, (, long]
[;, }, else, {, return, instant, -, instant, %, iUnitMillis, ;, }, }, public, long, remainder, (, long, instant, )]
[;, }, }, public, long, remainder, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return, instant]
[-, instant, %, iUnitMillis, ;, }, }, public, long, remainder, (, long, instant, ), {, if, (, instant, >=, 0]
[;, }, }, public, long, remainder, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return, instant]
[%, iUnitMillis, ;, }, }, public, long, remainder, (, long, instant, ), {, if, (, instant, >=, 0, ), {]
[;, }, }, public, long, remainder, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return, instant]
[), {, return, instant, %, iUnitMillis, ;, }, else, {, return, (, instant, +, 1, ), %, iUnitMillis, +, iUnitMillis]
[>=, 0, ), {, return, instant, %, iUnitMillis, ;, }, else, {, return, (, instant, +, 1, ), %, iUnitMillis]
[), {, return, instant, %, iUnitMillis, ;, }, else, {, return, (, instant, +, 1, ), %, iUnitMillis, +, iUnitMillis]
[;, }, else, {, return, (, instant, +, 1, ), %, iUnitMillis, +, iUnitMillis, -, 1, ;, }, }, public]
[%, iUnitMillis, ;, }, else, {, return, (, instant, +, 1, ), %, iUnitMillis, +, iUnitMillis, -, 1, ;, }]
[;, }, else, {, return, (, instant, +, 1, ), %, iUnitMillis, +, iUnitMillis, -, 1, ;, }, }, public]
[;, }, }, public, DurationField, getDurationField, (, ), {, return, iUnitField, ;, }, public, int, getMinimumValue, (, ), {, return]
[-, 1, ;, }, }, public, DurationField, getDurationField, (, ), {, return, iUnitField, ;, }, public, int, getMinimumValue, (, )]
[+, iUnitMillis, -, 1, ;, }, }, public, DurationField, getDurationField, (, ), {, return, iUnitField, ;, }, public, int, getMinimumValue]
[%, iUnitMillis, +, iUnitMillis, -, 1, ;, }, }, public, DurationField, getDurationField, (, ), {, return, iUnitField, ;, }, public]
[), %, iUnitMillis, +, iUnitMillis, -, 1, ;, }, }, public, DurationField, getDurationField, (, ), {, return, iUnitField, ;, }]
[+, 1, ), %, iUnitMillis, +, iUnitMillis, -, 1, ;, }, }, public, DurationField, getDurationField, (, ), {, return, iUnitField]
[), %, iUnitMillis, +, iUnitMillis, -, 1, ;, }, }, public, DurationField, getDurationField, (, ), {, return, iUnitField, ;, }]
[+, iUnitMillis, -, 1, ;, }, }, public, DurationField, getDurationField, (, ), {, return, iUnitField, ;, }, public, int, getMinimumValue]
[-, 1, ;, }, }, public, DurationField, getDurationField, (, ), {, return, iUnitField, ;, }, public, int, getMinimumValue, (, )]
[;, }, }, public, DurationField, getDurationField, (, ), {, return, iUnitField, ;, }, public, int, getMinimumValue, (, ), {, return]
[;, }, public, int, getMinimumValue, (, ), {, return, 0, ;, }, public, final, long, getUnitMillis, (, ), {, return]
[;, }, public, final, long, getUnitMillis, (, ), {, return, iUnitMillis, ;, }, protected, int, getMaximumValueForSet, (, long, instant, ,]
[;, }, protected, int, getMaximumValueForSet, (, long, instant, ,, int, value, ), {, return, getMaximumValue, (, instant, ), ;, }]
[;, }, }]
[), ;, }, }]
