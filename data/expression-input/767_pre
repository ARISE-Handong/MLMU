[DiGraph, <, N, ,, E, >, graph, ;, public, GraphPruner, (, DiGraph, <, N, ,, E, >, graph, ), {]
[DiGraph, <, N, ,, E, >, graph, ;, public, GraphPruner, (, DiGraph, <, N, ,, E, >, graph, ), {]
[E, >, graph, ;, public, GraphPruner, (, DiGraph, <, N, ,, E, >, graph, ), {, this, ., graph, =]
[,, E, >, prune, (, Predicate, <, N, >, keep, ), {, LinkedDirectedGraph, <, N, ,, E, >, workGraph, =]
[>, prune, (, Predicate, <, N, >, keep, ), {, LinkedDirectedGraph, <, N, ,, E, >, workGraph, =, cloneGraph, (]
[,, E, >, workGraph, =, cloneGraph, (, graph, ), ;, for, (, DiGraphNode, <, N, ,, E, >, node, :]
[,, E, >, workGraph, =, cloneGraph, (, graph, ), ;, for, (, DiGraphNode, <, N, ,, E, >, node, :]
[>, node, :, workGraph, ., getDirectedGraphNodes, (, ), ), {, for, (, DiGraphEdge, <, N, ,, E, >, inEdge, :]
[>, node, :, workGraph, ., getDirectedGraphNodes, (, ), ), {, for, (, DiGraphEdge, <, N, ,, E, >, inEdge, :]
[>, inEdge, :, node, ., getInEdges, (, ), ), {, for, (, DiGraphEdge, <, N, ,, E, >, outEdge, :]
[>, inEdge, :, node, ., getInEdges, (, ), ), {, for, (, DiGraphEdge, <, N, ,, E, >, outEdge, :]
[for, (, DiGraphEdge, <, N, ,, E, >, outEdge, :, node, ., getOutEdges, (, ), ), {, N, source, =]
[for, (, DiGraphEdge, <, N, ,, E, >, outEdge, :, node, ., getOutEdges, (, ), ), {, N, source, =]
[for, (, DiGraphEdge, <, N, ,, E, >, outEdge, :, node, ., getOutEdges, (, ), ), {, N, source, =]
[(, ), ), {, N, source, =, inEdge, ., getSource, (, ), ., getValue, (, ), ;, N, dest, =]
[(, ), ), {, N, source, =, inEdge, ., getSource, (, ), ., getValue, (, ), ;, N, dest, =]
[(, ), ), {, N, source, =, inEdge, ., getSource, (, ), ., getValue, (, ), ;, N, dest, =]
[., getValue, (, ), ;, N, dest, =, outEdge, ., getDestination, (, ), ., getValue, (, ), ;, if, (]
[getValue, (, ), ;, N, dest, =, outEdge, ., getDestination, (, ), ., getValue, (, ), ;, if, (, !]
[getValue, (, ), ;, N, dest, =, outEdge, ., getDestination, (, ), ., getValue, (, ), ;, if, (, !]
[N, dest, =, outEdge, ., getDestination, (, ), ., getValue, (, ), ;, if, (, !, workGraph, ., isConnectedInDirection, (]
[=, outEdge, ., getDestination, (, ), ., getValue, (, ), ;, if, (, !, workGraph, ., isConnectedInDirection, (, source, ,]
[(, ), ., getValue, (, ), ;, if, (, !, workGraph, ., isConnectedInDirection, (, source, ,, dest, ), ), {]
[(, ), ., getValue, (, ), ;, if, (, !, workGraph, ., isConnectedInDirection, (, source, ,, dest, ), ), {]
[(, ), ;, if, (, !, workGraph, ., isConnectedInDirection, (, source, ,, dest, ), ), {, workGraph, ., connect, (]
[;, if, (, !, workGraph, ., isConnectedInDirection, (, source, ,, dest, ), ), {, workGraph, ., connect, (, source, ,]
[;, if, (, !, workGraph, ., isConnectedInDirection, (, source, ,, dest, ), ), {, workGraph, ., connect, (, source, ,]
[isConnectedInDirection, (, source, ,, dest, ), ), {, workGraph, ., connect, (, source, ,, outEdge, ., getValue, (, ), ,]
[., getValue, (, ), ,, dest, ), ;, }, }, }, }, LinkedDirectedGraph, <, N, ,, E, >, resultGraph, =]
[., getValue, (, ), ,, dest, ), ;, }, }, }, }, LinkedDirectedGraph, <, N, ,, E, >, resultGraph, =]
[E, >, resultGraph, =, LinkedDirectedGraph, ., create, (, ), ;, for, (, DiGraphNode, <, N, ,, E, >, node, :]
[E, >, resultGraph, =, LinkedDirectedGraph, ., create, (, ), ;, for, (, DiGraphNode, <, N, ,, E, >, node, :]
[;, for, (, DiGraphNode, <, N, ,, E, >, node, :, workGraph, ., getDirectedGraphNodes, (, ), ), {, if, (]
[;, for, (, DiGraphNode, <, N, ,, E, >, node, :, workGraph, ., getDirectedGraphNodes, (, ), ), {, if, (]
[<, N, ,, E, >, node, :, workGraph, ., getDirectedGraphNodes, (, ), ), {, if, (, keep, ., apply, (]
[<, N, ,, E, >, node, :, workGraph, ., getDirectedGraphNodes, (, ), ), {, if, (, keep, ., apply, (]
[., getDirectedGraphNodes, (, ), ), {, if, (, keep, ., apply, (, node, ., getValue, (, ), ), ), {]
[., getDirectedGraphNodes, (, ), ), {, if, (, keep, ., apply, (, node, ., getValue, (, ), ), ), {]
[), {, if, (, keep, ., apply, (, node, ., getValue, (, ), ), ), {, resultGraph, ., createNode, (]
[), {, if, (, keep, ., apply, (, node, ., getValue, (, ), ), ), {, resultGraph, ., createNode, (]
[., createNode, (, node, ., getValue, (, ), ), ;, for, (, DiGraphEdge, <, N, ,, E, >, outEdge, :]
[., createNode, (, node, ., getValue, (, ), ), ;, for, (, DiGraphEdge, <, N, ,, E, >, outEdge, :]
[for, (, DiGraphEdge, <, N, ,, E, >, outEdge, :, node, ., getOutEdges, (, ), ), {, N, source, =]
[for, (, DiGraphEdge, <, N, ,, E, >, outEdge, :, node, ., getOutEdges, (, ), ), {, N, source, =]
[:, node, ., getOutEdges, (, ), ), {, N, source, =, node, ., getValue, (, ), ;, N, dest, =]
[:, node, ., getOutEdges, (, ), ), {, N, source, =, node, ., getValue, (, ), ;, N, dest, =]
[:, node, ., getOutEdges, (, ), ), {, N, source, =, node, ., getValue, (, ), ;, N, dest, =]
[., getValue, (, ), ;, N, dest, =, outEdge, ., getDestination, (, ), ., getValue, (, ), ;, if, (]
[., getValue, (, ), ;, N, dest, =, outEdge, ., getDestination, (, ), ., getValue, (, ), ;, if, (]
[;, N, dest, =, outEdge, ., getDestination, (, ), ., getValue, (, ), ;, if, (, keep, ., apply, (]
[outEdge, ., getDestination, (, ), ., getValue, (, ), ;, if, (, keep, ., apply, (, dest, ), ), {]
[outEdge, ., getDestination, (, ), ., getValue, (, ), ;, if, (, keep, ., apply, (, dest, ), ), {]
[), ., getValue, (, ), ;, if, (, keep, ., apply, (, dest, ), ), {, resultGraph, ., createNode, (]
[;, if, (, keep, ., apply, (, dest, ), ), {, resultGraph, ., createNode, (, dest, ), ;, if, (]
[;, if, (, keep, ., apply, (, dest, ), ), {, resultGraph, ., createNode, (, dest, ), ;, if, (]
[;, if, (, keep, ., apply, (, dest, ), ), {, resultGraph, ., createNode, (, dest, ), ;, if, (]
[(, keep, ., apply, (, dest, ), ), {, resultGraph, ., createNode, (, dest, ), ;, if, (, source, !=]
[., apply, (, dest, ), ), {, resultGraph, ., createNode, (, dest, ), ;, if, (, source, !=, dest, &&]
[apply, (, dest, ), ), {, resultGraph, ., createNode, (, dest, ), ;, if, (, source, !=, dest, &&, !]
[apply, (, dest, ), ), {, resultGraph, ., createNode, (, dest, ), ;, if, (, source, !=, dest, &&, !]
[), {, resultGraph, ., createNode, (, dest, ), ;, if, (, source, !=, dest, &&, !, resultGraph, ., isConnectedInDirection, (]
[resultGraph, ., createNode, (, dest, ), ;, if, (, source, !=, dest, &&, !, resultGraph, ., isConnectedInDirection, (, source, ,]
[dest, ), ;, if, (, source, !=, dest, &&, !, resultGraph, ., isConnectedInDirection, (, source, ,, dest, ), ), {]
[dest, ), ;, if, (, source, !=, dest, &&, !, resultGraph, ., isConnectedInDirection, (, source, ,, dest, ), ), {]
[(, source, !=, dest, &&, !, resultGraph, ., isConnectedInDirection, (, source, ,, dest, ), ), {, resultGraph, ., connect, (]
[!=, dest, &&, !, resultGraph, ., isConnectedInDirection, (, source, ,, dest, ), ), {, resultGraph, ., connect, (, source, ,]
[!=, dest, &&, !, resultGraph, ., isConnectedInDirection, (, source, ,, dest, ), ), {, resultGraph, ., connect, (, source, ,]
[isConnectedInDirection, (, source, ,, dest, ), ), {, resultGraph, ., connect, (, source, ,, outEdge, ., getValue, (, ), ,]
[., connect, (, source, ,, outEdge, ., getValue, (, ), ,, dest, ), ;, }, }, }, }, }, return]
[>, cloneGraph, (, DiGraph, <, N, ,, E, >, graph, ), {, LinkedDirectedGraph, <, N, ,, E, >, newGraph, =]
[>, cloneGraph, (, DiGraph, <, N, ,, E, >, graph, ), {, LinkedDirectedGraph, <, N, ,, E, >, newGraph, =]
[E, >, newGraph, =, LinkedDirectedGraph, ., create, (, ), ;, for, (, DiGraphNode, <, N, ,, E, >, node, :]
[E, >, newGraph, =, LinkedDirectedGraph, ., create, (, ), ;, for, (, DiGraphNode, <, N, ,, E, >, node, :]
[(, ), ;, for, (, DiGraphNode, <, N, ,, E, >, node, :, graph, ., getDirectedGraphNodes, (, ), ), {]
[(, ), ;, for, (, DiGraphNode, <, N, ,, E, >, node, :, graph, ., getDirectedGraphNodes, (, ), ), {]
[(, DiGraphNode, <, N, ,, E, >, node, :, graph, ., getDirectedGraphNodes, (, ), ), {, newGraph, ., createNode, (]
[(, DiGraphNode, <, N, ,, E, >, node, :, graph, ., getDirectedGraphNodes, (, ), ), {, newGraph, ., createNode, (]
[., createNode, (, node, ., getValue, (, ), ), ;, for, (, DiGraphEdge, <, N, ,, E, >, outEdge, :]
[., createNode, (, node, ., getValue, (, ), ), ;, for, (, DiGraphEdge, <, N, ,, E, >, outEdge, :]
[for, (, DiGraphEdge, <, N, ,, E, >, outEdge, :, node, ., getOutEdges, (, ), ), {, N, dest, =]
[for, (, DiGraphEdge, <, N, ,, E, >, outEdge, :, node, ., getOutEdges, (, ), ), {, N, dest, =]
[for, (, DiGraphEdge, <, N, ,, E, >, outEdge, :, node, ., getOutEdges, (, ), ), {, N, dest, =]
[node, ., getOutEdges, (, ), ), {, N, dest, =, outEdge, ., getDestination, (, ), ., getValue, (, ), ;]
[node, ., getOutEdges, (, ), ), {, N, dest, =, outEdge, ., getDestination, (, ), ., getValue, (, ), ;]
[), ), {, N, dest, =, outEdge, ., getDestination, (, ), ., getValue, (, ), ;, newGraph, ., createNode, (]
[N, dest, =, outEdge, ., getDestination, (, ), ., getValue, (, ), ;, newGraph, ., createNode, (, dest, ), ;]
[N, dest, =, outEdge, ., getDestination, (, ), ., getValue, (, ), ;, newGraph, ., createNode, (, dest, ), ;]
[., getDestination, (, ), ., getValue, (, ), ;, newGraph, ., createNode, (, dest, ), ;, newGraph, ., connect, (]
[., getDestination, (, ), ., getValue, (, ), ;, newGraph, ., createNode, (, dest, ), ;, newGraph, ., connect, (]
[(, ), ;, newGraph, ., createNode, (, dest, ), ;, newGraph, ., connect, (, node, ., getValue, (, ), ,]
[(, ), ;, newGraph, ., createNode, (, dest, ), ;, newGraph, ., connect, (, node, ., getValue, (, ), ,]
[(, dest, ), ;, newGraph, ., connect, (, node, ., getValue, (, ), ,, outEdge, ., getValue, (, ), ,]
[connect, (, node, ., getValue, (, ), ,, outEdge, ., getValue, (, ), ,, dest, ), ;, }, }, return]
