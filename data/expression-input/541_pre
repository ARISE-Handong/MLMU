[oldName, ;, String, newName, ;, int, prototypeCount, ;, int, objLitCount, ;, int, refCount, ;, Property, (, String, name, ), {]
[oldName, ;, String, newName, ;, int, prototypeCount, ;, int, objLitCount, ;, int, refCount, ;, Property, (, String, name, ), {]
[;, int, prototypeCount, ;, int, objLitCount, ;, int, refCount, ;, Property, (, String, name, ), {, this, ., oldName, =]
[prototypeCount, ;, int, objLitCount, ;, int, refCount, ;, Property, (, String, name, ), {, this, ., oldName, =, name, ;]
[prototypeCount, ;, int, objLitCount, ;, int, refCount, ;, Property, (, String, name, ), {, this, ., oldName, =, name, ;]
[;, int, refCount, ;, Property, (, String, name, ), {, this, ., oldName, =, name, ;, this, ., newName, =]
[refCount, ;, Property, (, String, name, ), {, this, ., oldName, =, name, ;, this, ., newName, =, null, ;]
[refCount, ;, Property, (, String, name, ), {, this, ., oldName, =, name, ;, this, ., newName, =, null, ;]
[String, name, ), {, this, ., oldName, =, name, ;, this, ., newName, =, null, ;, this, ., prototypeCount, =]
[), {, this, ., oldName, =, name, ;, this, ., newName, =, null, ;, this, ., prototypeCount, =, 0, ;]
[), {, this, ., oldName, =, name, ;, this, ., newName, =, null, ;, this, ., prototypeCount, =, 0, ;]
[oldName, =, name, ;, this, ., newName, =, null, ;, this, ., prototypeCount, =, 0, ;, this, ., objLitCount, =]
[name, ;, this, ., newName, =, null, ;, this, ., prototypeCount, =, 0, ;, this, ., objLitCount, =, 0, ;]
[name, ;, this, ., newName, =, null, ;, this, ., prototypeCount, =, 0, ;, this, ., objLitCount, =, 0, ;]
[newName, =, null, ;, this, ., prototypeCount, =, 0, ;, this, ., objLitCount, =, 0, ;, this, ., refCount, =]
[;, this, ., objLitCount, =, 0, ;, this, ., refCount, =, 0, ;, }, int, count, (, ), {, return]
[;, this, ., objLitCount, =, 0, ;, this, ., refCount, =, 0, ;, }, int, count, (, ), {, return]
[;, this, ., objLitCount, =, 0, ;, this, ., refCount, =, 0, ;, }, int, count, (, ), {, return]
[., objLitCount, =, 0, ;, this, ., refCount, =, 0, ;, }, int, count, (, ), {, return, prototypeCount, +]
[=, 0, ;, this, ., refCount, =, 0, ;, }, int, count, (, ), {, return, prototypeCount, +, objLitCount, +]
[int, count, (, ), {, return, prototypeCount, +, objLitCount, +, refCount, ;, }, boolean, canRename, (, ), {, if, (]
[int, count, (, ), {, return, prototypeCount, +, objLitCount, +, refCount, ;, }, boolean, canRename, (, ), {, if, (]
[int, count, (, ), {, return, prototypeCount, +, objLitCount, +, refCount, ;, }, boolean, canRename, (, ), {, if, (]
[int, count, (, ), {, return, prototypeCount, +, objLitCount, +, refCount, ;, }, boolean, canRename, (, ), {, if, (]
[{, return, prototypeCount, +, objLitCount, +, refCount, ;, }, boolean, canRename, (, ), {, if, (, this, ., prototypeCount, >]
[prototypeCount, +, objLitCount, +, refCount, ;, }, boolean, canRename, (, ), {, if, (, this, ., prototypeCount, >, 0, &&]
[prototypeCount, +, objLitCount, +, refCount, ;, }, boolean, canRename, (, ), {, if, (, this, ., prototypeCount, >, 0, &&]
[prototypeCount, +, objLitCount, +, refCount, ;, }, boolean, canRename, (, ), {, if, (, this, ., prototypeCount, >, 0, &&]
[refCount, ;, }, boolean, canRename, (, ), {, if, (, this, ., prototypeCount, >, 0, &&, this, ., objLitCount, ==]
[canRename, (, ), {, if, (, this, ., prototypeCount, >, 0, &&, this, ., objLitCount, ==, 0, ), {, return]
[., prototypeCount, >, 0, &&, this, ., objLitCount, ==, 0, ), {, return, canRenamePrototypeProperty, (, ), ;, }, if, (]
[., prototypeCount, >, 0, &&, this, ., objLitCount, ==, 0, ), {, return, canRenamePrototypeProperty, (, ), ;, }, if, (]
[., prototypeCount, >, 0, &&, this, ., objLitCount, ==, 0, ), {, return, canRenamePrototypeProperty, (, ), ;, }, if, (]
[., prototypeCount, >, 0, &&, this, ., objLitCount, ==, 0, ), {, return, canRenamePrototypeProperty, (, ), ;, }, if, (]
[&&, this, ., objLitCount, ==, 0, ), {, return, canRenamePrototypeProperty, (, ), ;, }, if, (, this, ., objLitCount, >]
[., objLitCount, ==, 0, ), {, return, canRenamePrototypeProperty, (, ), ;, }, if, (, this, ., objLitCount, >, 0, &&]
[., objLitCount, ==, 0, ), {, return, canRenamePrototypeProperty, (, ), ;, }, if, (, this, ., objLitCount, >, 0, &&]
[., objLitCount, ==, 0, ), {, return, canRenamePrototypeProperty, (, ), ;, }, if, (, this, ., objLitCount, >, 0, &&]
[), {, return, canRenamePrototypeProperty, (, ), ;, }, if, (, this, ., objLitCount, >, 0, &&, this, ., prototypeCount, ==]
[(, ), ;, }, if, (, this, ., objLitCount, >, 0, &&, this, ., prototypeCount, ==, 0, ), {, return]
[this, ., objLitCount, >, 0, &&, this, ., prototypeCount, ==, 0, ), {, return, canRenameObjLitProperty, (, ), ;, }, return]
[this, ., objLitCount, >, 0, &&, this, ., prototypeCount, ==, 0, ), {, return, canRenameObjLitProperty, (, ), ;, }, return]
[0, &&, this, ., prototypeCount, ==, 0, ), {, return, canRenameObjLitProperty, (, ), ;, }, return, canRenamePrototypeProperty, (, ), &&]
[;, }, return, canRenamePrototypeProperty, (, ), &&, canRenameObjLitProperty, (, ), ;, }, private, boolean, canRenamePrototypeProperty, (, ), {, if, (]
[;, }, return, canRenamePrototypeProperty, (, ), &&, canRenameObjLitProperty, (, ), ;, }, private, boolean, canRenamePrototypeProperty, (, ), {, if, (]
[;, }, return, canRenamePrototypeProperty, (, ), &&, canRenameObjLitProperty, (, ), ;, }, private, boolean, canRenamePrototypeProperty, (, ), {, if, (]
[(, ), ;, }, private, boolean, canRenamePrototypeProperty, (, ), {, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (]
[boolean, canRenamePrototypeProperty, (, ), {, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, oldName, ), ), {, return]
[if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, oldName, ), ), {, return, false, ;, }, if, (]
[if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, oldName, ), ), {, return, false, ;, }, if, (]
[if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, oldName, ), ), {, return, false, ;, }, if, (]
[isExported, (, oldName, ), ), {, return, false, ;, }, if, (, compiler, ., getCodingConvention, (, ), ., isPrivate, (]
[{, return, false, ;, }, if, (, compiler, ., getCodingConvention, (, ), ., isPrivate, (, oldName, ), ), {, return]
[if, (, compiler, ., getCodingConvention, (, ), ., isPrivate, (, oldName, ), ), {, return, true, ;, }, if, (]
[getCodingConvention, (, ), ., isPrivate, (, oldName, ), ), {, return, true, ;, }, if, (, aggressiveRenaming, ), {, return]
[), {, return, true, ;, }, if, (, aggressiveRenaming, ), {, return, true, ;, }, for, (, int, i, =]
[;, }, if, (, aggressiveRenaming, ), {, return, true, ;, }, for, (, int, i, =, 0, ,, n, =]
[;, }, if, (, aggressiveRenaming, ), {, return, true, ;, }, for, (, int, i, =, 0, ,, n, =]
[{, return, true, ;, }, for, (, int, i, =, 0, ,, n, =, oldName, ., length, (, ), ;]
[{, return, true, ;, }, for, (, int, i, =, 0, ,, n, =, oldName, ., length, (, ), ;]
[true, ;, }, for, (, int, i, =, 0, ,, n, =, oldName, ., length, (, ), ;, i, <]
[}, for, (, int, i, =, 0, ,, n, =, oldName, ., length, (, ), ;, i, <, n, ;]
[}, for, (, int, i, =, 0, ,, n, =, oldName, ., length, (, ), ;, i, <, n, ;]
[,, n, =, oldName, ., length, (, ), ;, i, <, n, ;, i, ++, ), {, char, ch, =]
[,, n, =, oldName, ., length, (, ), ;, i, <, n, ;, i, ++, ), {, char, ch, =]
[., length, (, ), ;, i, <, n, ;, i, ++, ), {, char, ch, =, oldName, ., charAt, (]
[i, <, n, ;, i, ++, ), {, char, ch, =, oldName, ., charAt, (, i, ), ;, if, (]
[i, <, n, ;, i, ++, ), {, char, ch, =, oldName, ., charAt, (, i, ), ;, if, (]
[i, <, n, ;, i, ++, ), {, char, ch, =, oldName, ., charAt, (, i, ), ;, if, (]
[i, ++, ), {, char, ch, =, oldName, ., charAt, (, i, ), ;, if, (, Character, ., isUpperCase, (]
[{, char, ch, =, oldName, ., charAt, (, i, ), ;, if, (, Character, ., isUpperCase, (, ch, ), ||]
[char, ch, =, oldName, ., charAt, (, i, ), ;, if, (, Character, ., isUpperCase, (, ch, ), ||, !]
[char, ch, =, oldName, ., charAt, (, i, ), ;, if, (, Character, ., isUpperCase, (, ch, ), ||, !]
[., charAt, (, i, ), ;, if, (, Character, ., isUpperCase, (, ch, ), ||, !, Character, ., isLetter, (]
[;, if, (, Character, ., isUpperCase, (, ch, ), ||, !, Character, ., isLetter, (, ch, ), ), {, return]
[isUpperCase, (, ch, ), ||, !, Character, ., isLetter, (, ch, ), ), {, return, true, ;, }, }, return]
[), ), {, return, true, ;, }, }, return, false, ;, }, private, boolean, canRenameObjLitProperty, (, ), {, if, (]
[), ), {, return, true, ;, }, }, return, false, ;, }, private, boolean, canRenameObjLitProperty, (, ), {, if, (]
[), ), {, return, true, ;, }, }, return, false, ;, }, private, boolean, canRenameObjLitProperty, (, ), {, if, (]
[return, false, ;, }, private, boolean, canRenameObjLitProperty, (, ), {, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (]
[boolean, canRenameObjLitProperty, (, ), {, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, oldName, ), ), {, return]
[if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, oldName, ), ), {, return, false, ;, }, if, (]
[if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, oldName, ), ), {, return, false, ;, }, if, (]
[if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, oldName, ), ), {, return, false, ;, }, if, (]
[isExported, (, oldName, ), ), {, return, false, ;, }, if, (, compiler, ., getCodingConvention, (, ), ., isPrivate, (]
[{, return, false, ;, }, if, (, compiler, ., getCodingConvention, (, ), ., isPrivate, (, oldName, ), ), {, return]
[}, if, (, compiler, ., getCodingConvention, (, ), ., isPrivate, (, oldName, ), ), {, return, true, ;, }, return]
[), {, return, true, ;, }, return, false, ;, }, }, private, static, final, Comparator, <, Property, >, FREQUENCY_COMPARATOR, =]
[>, (, ), {, @, Override, public, int, compare, (, Property, a1, ,, Property, a2, ), {, int, n1, =]
[>, (, ), {, @, Override, public, int, compare, (, Property, a1, ,, Property, a2, ), {, int, n1, =]
[(, Property, a1, ,, Property, a2, ), {, int, n1, =, a1, ., count, (, ), ;, int, n2, =]
[(, Property, a1, ,, Property, a2, ), {, int, n1, =, a1, ., count, (, ), ;, int, n2, =]
[int, n1, =, a1, ., count, (, ), ;, int, n2, =, a2, ., count, (, ), ;, if, (]
[int, n1, =, a1, ., count, (, ), ;, int, n2, =, a2, ., count, (, ), ;, if, (]
[=, a1, ., count, (, ), ;, int, n2, =, a2, ., count, (, ), ;, if, (, n1, !=]
[(, ), ;, int, n2, =, a2, ., count, (, ), ;, if, (, n1, !=, n2, ), {, return]
[(, ), ;, int, n2, =, a2, ., count, (, ), ;, if, (, n1, !=, n2, ), {, return]
[;, int, n2, =, a2, ., count, (, ), ;, if, (, n1, !=, n2, ), {, return, n2, -]
[a2, ., count, (, ), ;, if, (, n1, !=, n2, ), {, return, n2, -, n1, ;, }, return]
[a2, ., count, (, ), ;, if, (, n1, !=, n2, ), {, return, n2, -, n1, ;, }, return]
[a2, ., count, (, ), ;, if, (, n1, !=, n2, ), {, return, n2, -, n1, ;, }, return]
[if, (, n1, !=, n2, ), {, return, n2, -, n1, ;, }, return, a1, ., oldName, ., compareTo, (]
[if, (, n1, !=, n2, ), {, return, n2, -, n1, ;, }, return, a1, ., oldName, ., compareTo, (]
[oldName, ., compareTo, (, a2, ., oldName, ), ;, }, }, ;, private, final, Set, <, Node, >, stringNodes, =]
[stringNodes, =, new, HashSet, <, Node, >, (, ), ;, private, final, Map, <, String, ,, Property, >, properties, =]
[properties, =, new, HashMap, <, String, ,, Property, >, (, ), ;, private, final, Set, <, String, >, reservedNames, =]
[,, Property, >, (, ), ;, private, final, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (]
[,, Property, >, (, ), ;, private, final, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (]
[), ;, private, final, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (, Arrays, ., asList, (]
[private, final, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (, Arrays, ., asList, (, "indexOf", ,]
[Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (, Arrays, ., asList, (, "indexOf", ,, "lastIndexOf", ,]
[String, >, reservedNames, =, new, HashSet, <, String, >, (, Arrays, ., asList, (, "indexOf", ,, "lastIndexOf", ,, "toString", ,]
[asList, (, "indexOf", ,, "lastIndexOf", ,, "toString", ,, "valueOf", ), ), ;, private, final, Set, <, Node, >, prototypeObjLits, =]
[(, AbstractCompiler, compiler, ,, boolean, aggressiveRenaming, ,, @, Nullable, char, [, ], reservedCharacters, ,, @, Nullable, VariableMap, prevUsedRenameMap, ), {]
[(, AbstractCompiler, compiler, ,, boolean, aggressiveRenaming, ,, @, Nullable, char, [, ], reservedCharacters, ,, @, Nullable, VariableMap, prevUsedRenameMap, ), {]
[boolean, aggressiveRenaming, ,, @, Nullable, char, [, ], reservedCharacters, ,, @, Nullable, VariableMap, prevUsedRenameMap, ), {, this, ., compiler, =]
[,, @, Nullable, char, [, ], reservedCharacters, ,, @, Nullable, VariableMap, prevUsedRenameMap, ), {, this, ., compiler, =, compiler, ;]
[,, @, Nullable, char, [, ], reservedCharacters, ,, @, Nullable, VariableMap, prevUsedRenameMap, ), {, this, ., compiler, =, compiler, ;]
[[, ], reservedCharacters, ,, @, Nullable, VariableMap, prevUsedRenameMap, ), {, this, ., compiler, =, compiler, ;, this, ., aggressiveRenaming, =]
[reservedCharacters, ,, @, Nullable, VariableMap, prevUsedRenameMap, ), {, this, ., compiler, =, compiler, ;, this, ., aggressiveRenaming, =, aggressiveRenaming, ;]
[reservedCharacters, ,, @, Nullable, VariableMap, prevUsedRenameMap, ), {, this, ., compiler, =, compiler, ;, this, ., aggressiveRenaming, =, aggressiveRenaming, ;]
[VariableMap, prevUsedRenameMap, ), {, this, ., compiler, =, compiler, ;, this, ., aggressiveRenaming, =, aggressiveRenaming, ;, this, ., reservedCharacters, =]
[), {, this, ., compiler, =, compiler, ;, this, ., aggressiveRenaming, =, aggressiveRenaming, ;, this, ., reservedCharacters, =, reservedCharacters, ;]
[), {, this, ., compiler, =, compiler, ;, this, ., aggressiveRenaming, =, aggressiveRenaming, ;, this, ., reservedCharacters, =, reservedCharacters, ;]
[compiler, =, compiler, ;, this, ., aggressiveRenaming, =, aggressiveRenaming, ;, this, ., reservedCharacters, =, reservedCharacters, ;, this, ., prevUsedRenameMap, =]
[this, ., prevUsedRenameMap, =, prevUsedRenameMap, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., prevUsedRenameMap, =, prevUsedRenameMap, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[prevUsedRenameMap, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[prevUsedRenameMap, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[prevUsedRenameMap, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[,, Node, root, ), {, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;]
[,, Node, root, ), {, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;]
[{, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (]
[., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[(, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,]
[., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExternedProperties, (, ), ), ;]
[., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExternedProperties, (, ), ), ;]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExternedProperties, (, ), ), ;, NodeTraversal, ., traverse, (]
[NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExternedProperties, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[traverse, (, compiler, ,, externs, ,, new, ProcessExternedProperties, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), ), ;, SortedSet, <, Property, >, propsByFrequency, =]
[root, ,, new, ProcessProperties, (, ), ), ;, SortedSet, <, Property, >, propsByFrequency, =, new, TreeSet, <, Property, >, (]
[>, (, FREQUENCY_COMPARATOR, ), ;, for, (, Iterator, <, Map, ., Entry, <, String, ,, Property, >, >, it, =]
[>, (, FREQUENCY_COMPARATOR, ), ;, for, (, Iterator, <, Map, ., Entry, <, String, ,, Property, >, >, it, =]
[>, (, FREQUENCY_COMPARATOR, ), ;, for, (, Iterator, <, Map, ., Entry, <, String, ,, Property, >, >, it, =]
[., Entry, <, String, ,, Property, >, >, it, =, properties, ., entrySet, (, ), ., iterator, (, ), ;]
[., Entry, <, String, ,, Property, >, >, it, =, properties, ., entrySet, (, ), ., iterator, (, ), ;]
[., entrySet, (, ), ., iterator, (, ), ;, it, ., hasNext, (, ), ;, ), {, Property, a, =]
[., entrySet, (, ), ., iterator, (, ), ;, it, ., hasNext, (, ), ;, ), {, Property, a, =]
[., entrySet, (, ), ., iterator, (, ), ;, it, ., hasNext, (, ), ;, ), {, Property, a, =]
[(, ), ;, ), {, Property, a, =, it, ., next, (, ), ., getValue, (, ), ;, if, (]
[(, ), ;, ), {, Property, a, =, it, ., next, (, ), ., getValue, (, ), ;, if, (]
[(, ), ;, ), {, Property, a, =, it, ., next, (, ), ., getValue, (, ), ;, if, (]
[a, =, it, ., next, (, ), ., getValue, (, ), ;, if, (, a, ., canRename, (, ), &&]
[=, it, ., next, (, ), ., getValue, (, ), ;, if, (, a, ., canRename, (, ), &&, !]
[=, it, ., next, (, ), ., getValue, (, ), ;, if, (, a, ., canRename, (, ), &&, !]
[(, ), ., getValue, (, ), ;, if, (, a, ., canRename, (, ), &&, !, reservedNames, ., contains, (]
[(, ), ., getValue, (, ), ;, if, (, a, ., canRename, (, ), &&, !, reservedNames, ., contains, (]
[;, if, (, a, ., canRename, (, ), &&, !, reservedNames, ., contains, (, a, ., oldName, ), ), {]
[;, if, (, a, ., canRename, (, ), &&, !, reservedNames, ., contains, (, a, ., oldName, ), ), {]
[., canRename, (, ), &&, !, reservedNames, ., contains, (, a, ., oldName, ), ), {, propsByFrequency, ., add, (]
[reservedNames, ., contains, (, a, ., oldName, ), ), {, propsByFrequency, ., add, (, a, ), ;, }, else, {]
[reservedNames, ., contains, (, a, ., oldName, ), ), {, propsByFrequency, ., add, (, a, ), ;, }, else, {]
[oldName, ), ), {, propsByFrequency, ., add, (, a, ), ;, }, else, {, it, ., remove, (, ), ;]
[oldName, ), ), {, propsByFrequency, ., add, (, a, ), ;, }, else, {, it, ., remove, (, ), ;]
[propsByFrequency, ., add, (, a, ), ;, }, else, {, it, ., remove, (, ), ;, reservedNames, ., add, (]
[propsByFrequency, ., add, (, a, ), ;, }, else, {, it, ., remove, (, ), ;, reservedNames, ., add, (]
[{, it, ., remove, (, ), ;, reservedNames, ., add, (, a, ., oldName, ), ;, }, }, if, (]
[{, it, ., remove, (, ), ;, reservedNames, ., add, (, a, ., oldName, ), ;, }, }, if, (]
[., remove, (, ), ;, reservedNames, ., add, (, a, ., oldName, ), ;, }, }, if, (, prevUsedRenameMap, !=]
[), ;, reservedNames, ., add, (, a, ., oldName, ), ;, }, }, if, (, prevUsedRenameMap, !=, null, ), {]
[reservedNames, ., add, (, a, ., oldName, ), ;, }, }, if, (, prevUsedRenameMap, !=, null, ), {, reusePrototypeNames, (]
[), ;, }, }, if, (, prevUsedRenameMap, !=, null, ), {, reusePrototypeNames, (, propsByFrequency, ), ;, }, NameGenerator, nameGen, =]
[}, if, (, prevUsedRenameMap, !=, null, ), {, reusePrototypeNames, (, propsByFrequency, ), ;, }, NameGenerator, nameGen, =, new, NameGenerator, (]
[(, prevUsedRenameMap, !=, null, ), {, reusePrototypeNames, (, propsByFrequency, ), ;, }, NameGenerator, nameGen, =, new, NameGenerator, (, reservedNames, ,]
[!=, null, ), {, reusePrototypeNames, (, propsByFrequency, ), ;, }, NameGenerator, nameGen, =, new, NameGenerator, (, reservedNames, ,, "", ,]
[propsByFrequency, ), ;, }, NameGenerator, nameGen, =, new, NameGenerator, (, reservedNames, ,, "", ,, reservedCharacters, ), ;, StringBuilder, debug, =]
[reservedNames, ,, "", ,, reservedCharacters, ), ;, StringBuilder, debug, =, new, StringBuilder, (, ), ;, for, (, Property, a, :]
[), ;, StringBuilder, debug, =, new, StringBuilder, (, ), ;, for, (, Property, a, :, propsByFrequency, ), {, if, (]
[), ;, StringBuilder, debug, =, new, StringBuilder, (, ), ;, for, (, Property, a, :, propsByFrequency, ), {, if, (]
[), ;, StringBuilder, debug, =, new, StringBuilder, (, ), ;, for, (, Property, a, :, propsByFrequency, ), {, if, (]
[=, new, StringBuilder, (, ), ;, for, (, Property, a, :, propsByFrequency, ), {, if, (, a, ., newName, ==]
[(, ), ;, for, (, Property, a, :, propsByFrequency, ), {, if, (, a, ., newName, ==, null, ), {]
[(, ), ;, for, (, Property, a, :, propsByFrequency, ), {, if, (, a, ., newName, ==, null, ), {]
[(, Property, a, :, propsByFrequency, ), {, if, (, a, ., newName, ==, null, ), {, a, ., newName, =]
[(, Property, a, :, propsByFrequency, ), {, if, (, a, ., newName, ==, null, ), {, a, ., newName, =]
[{, if, (, a, ., newName, ==, null, ), {, a, ., newName, =, nameGen, ., generateNextName, (, ), ;]
[{, if, (, a, ., newName, ==, null, ), {, a, ., newName, =, nameGen, ., generateNextName, (, ), ;]
[., newName, ==, null, ), {, a, ., newName, =, nameGen, ., generateNextName, (, ), ;, reservedNames, ., add, (]
[., newName, ==, null, ), {, a, ., newName, =, nameGen, ., generateNextName, (, ), ;, reservedNames, ., add, (]
[a, ., newName, =, nameGen, ., generateNextName, (, ), ;, reservedNames, ., add, (, a, ., newName, ), ;, }]
[a, ., newName, =, nameGen, ., generateNextName, (, ), ;, reservedNames, ., add, (, a, ., newName, ), ;, }]
[a, ., newName, =, nameGen, ., generateNextName, (, ), ;, reservedNames, ., add, (, a, ., newName, ), ;, }]
[a, ., newName, =, nameGen, ., generateNextName, (, ), ;, reservedNames, ., add, (, a, ., newName, ), ;, }]
[a, ., newName, =, nameGen, ., generateNextName, (, ), ;, reservedNames, ., add, (, a, ., newName, ), ;, }]
[nameGen, ., generateNextName, (, ), ;, reservedNames, ., add, (, a, ., newName, ), ;, }, debug, ., append, (]
[nameGen, ., generateNextName, (, ), ;, reservedNames, ., add, (, a, ., newName, ), ;, }, debug, ., append, (]
[., add, (, a, ., newName, ), ;, }, debug, ., append, (, a, ., oldName, ), ., append, (]
[newName, ), ;, }, debug, ., append, (, a, ., oldName, ), ., append, (, " => ", ), ., append, (]
[newName, ), ;, }, debug, ., append, (, a, ., oldName, ), ., append, (, " => ", ), ., append, (]
[(, a, ., oldName, ), ., append, (, " => ", ), ., append, (, a, ., newName, ), ., append, (]
[), ., append, (, " => ", ), ., append, (, a, ., newName, ), ., append, (, '\n', ), ;, }]
[), ., append, (, " => ", ), ., append, (, a, ., newName, ), ., append, (, '\n', ), ;, }]
[" => ", ), ., append, (, a, ., newName, ), ., append, (, '\n', ), ;, }, compiler, ., addToDebugLog, (]
[" => ", ), ., append, (, a, ., newName, ), ., append, (, '\n', ), ;, }, compiler, ., addToDebugLog, (]
[., append, (, a, ., newName, ), ., append, (, '\n', ), ;, }, compiler, ., addToDebugLog, (, "JS property assignments:\n", +]
[), ., append, (, '\n', ), ;, }, compiler, ., addToDebugLog, (, "JS property assignments:\n", +, debug, ), ;, boolean, changed, =]
[}, compiler, ., addToDebugLog, (, "JS property assignments:\n", +, debug, ), ;, boolean, changed, =, false, ;, for, (, Node, n, :]
[+, debug, ), ;, boolean, changed, =, false, ;, for, (, Node, n, :, stringNodes, ), {, String, oldName, =]
[+, debug, ), ;, boolean, changed, =, false, ;, for, (, Node, n, :, stringNodes, ), {, String, oldName, =]
[for, (, Node, n, :, stringNodes, ), {, String, oldName, =, n, ., getString, (, ), ;, Property, a, =]
[for, (, Node, n, :, stringNodes, ), {, String, oldName, =, n, ., getString, (, ), ;, Property, a, =]
[:, stringNodes, ), {, String, oldName, =, n, ., getString, (, ), ;, Property, a, =, properties, ., get, (]
[oldName, =, n, ., getString, (, ), ;, Property, a, =, properties, ., get, (, oldName, ), ;, if, (]
[oldName, =, n, ., getString, (, ), ;, Property, a, =, properties, ., get, (, oldName, ), ;, if, (]
[oldName, =, n, ., getString, (, ), ;, Property, a, =, properties, ., get, (, oldName, ), ;, if, (]
[n, ., getString, (, ), ;, Property, a, =, properties, ., get, (, oldName, ), ;, if, (, a, !=]
[getString, (, ), ;, Property, a, =, properties, ., get, (, oldName, ), ;, if, (, a, !=, null, &&]
[getString, (, ), ;, Property, a, =, properties, ., get, (, oldName, ), ;, if, (, a, !=, null, &&]
[getString, (, ), ;, Property, a, =, properties, ., get, (, oldName, ), ;, if, (, a, !=, null, &&]
[Property, a, =, properties, ., get, (, oldName, ), ;, if, (, a, !=, null, &&, a, ., newName, !=]
[properties, ., get, (, oldName, ), ;, if, (, a, !=, null, &&, a, ., newName, !=, null, ), {]
[properties, ., get, (, oldName, ), ;, if, (, a, !=, null, &&, a, ., newName, !=, null, ), {]
[oldName, ), ;, if, (, a, !=, null, &&, a, ., newName, !=, null, ), {, n, ., setString, (]
[oldName, ), ;, if, (, a, !=, null, &&, a, ., newName, !=, null, ), {, n, ., setString, (]
[a, !=, null, &&, a, ., newName, !=, null, ), {, n, ., setString, (, a, ., newName, ), ;]
[null, &&, a, ., newName, !=, null, ), {, n, ., setString, (, a, ., newName, ), ;, changed, =]
[null, &&, a, ., newName, !=, null, ), {, n, ., setString, (, a, ., newName, ), ;, changed, =]
[a, ., newName, !=, null, ), {, n, ., setString, (, a, ., newName, ), ;, changed, =, changed, ||]
[., newName, !=, null, ), {, n, ., setString, (, a, ., newName, ), ;, changed, =, changed, ||, !]
[., newName, !=, null, ), {, n, ., setString, (, a, ., newName, ), ;, changed, =, changed, ||, !]
[., newName, !=, null, ), {, n, ., setString, (, a, ., newName, ), ;, changed, =, changed, ||, !]
[n, ., setString, (, a, ., newName, ), ;, changed, =, changed, ||, !, a, ., newName, ., equals, (]
[), ;, changed, =, changed, ||, !, a, ., newName, ., equals, (, oldName, ), ;, }, }, if, (]
[=, changed, ||, !, a, ., newName, ., equals, (, oldName, ), ;, }, }, if, (, changed, ), {]
[=, changed, ||, !, a, ., newName, ., equals, (, oldName, ), ;, }, }, if, (, changed, ), {]
[., equals, (, oldName, ), ;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }]
[., equals, (, oldName, ), ;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }]
[), ;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, ., setLifeCycleStage, (]
[), ;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, ., setLifeCycleStage, (]
[NORMALIZED_OBFUSCATED, ), ;, }, private, void, reusePrototypeNames, (, Set, <, Property, >, properties, ), {, for, (, Property, prop, :]
[reusePrototypeNames, (, Set, <, Property, >, properties, ), {, for, (, Property, prop, :, properties, ), {, String, prevName, =]
[reusePrototypeNames, (, Set, <, Property, >, properties, ), {, for, (, Property, prop, :, properties, ), {, String, prevName, =]
[Property, >, properties, ), {, for, (, Property, prop, :, properties, ), {, String, prevName, =, prevUsedRenameMap, ., lookupNewName, (]
[Property, >, properties, ), {, for, (, Property, prop, :, properties, ), {, String, prevName, =, prevUsedRenameMap, ., lookupNewName, (]
[Property, prop, :, properties, ), {, String, prevName, =, prevUsedRenameMap, ., lookupNewName, (, prop, ., oldName, ), ;, if, (]
[Property, prop, :, properties, ), {, String, prevName, =, prevUsedRenameMap, ., lookupNewName, (, prop, ., oldName, ), ;, if, (]
[:, properties, ), {, String, prevName, =, prevUsedRenameMap, ., lookupNewName, (, prop, ., oldName, ), ;, if, (, prevName, !=]
[prevName, =, prevUsedRenameMap, ., lookupNewName, (, prop, ., oldName, ), ;, if, (, prevName, !=, null, ), {, if, (]
[prevName, =, prevUsedRenameMap, ., lookupNewName, (, prop, ., oldName, ), ;, if, (, prevName, !=, null, ), {, if, (]
[lookupNewName, (, prop, ., oldName, ), ;, if, (, prevName, !=, null, ), {, if, (, reservedNames, ., contains, (]
[if, (, prevName, !=, null, ), {, if, (, reservedNames, ., contains, (, prevName, ), ), {, continue, ;, }]
[if, (, prevName, !=, null, ), {, if, (, reservedNames, ., contains, (, prevName, ), ), {, continue, ;, }]
[null, ), {, if, (, reservedNames, ., contains, (, prevName, ), ), {, continue, ;, }, prop, ., newName, =]
[{, if, (, reservedNames, ., contains, (, prevName, ), ), {, continue, ;, }, prop, ., newName, =, prevName, ;]
[{, if, (, reservedNames, ., contains, (, prevName, ), ), {, continue, ;, }, prop, ., newName, =, prevName, ;]
[., contains, (, prevName, ), ), {, continue, ;, }, prop, ., newName, =, prevName, ;, reservedNames, ., add, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case]
[,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case]
[n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =]
[n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =]
[n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =]
[case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[=, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {]
[=, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {]
[(, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {, reservedNames, ., add, (]
[(, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {, reservedNames, ., add, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case]
[,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case]
[n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =]
[n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =]
[n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =]
[case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {, String, s, =]
[getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {, String, s, =]
[if, (, dest, ., isString, (, ), ), {, String, s, =, dest, ., getString, (, ), ;, if, (]
[if, (, dest, ., isString, (, ), ), {, String, s, =, dest, ., getString, (, ), ;, if, (]
[isString, (, ), ), {, String, s, =, dest, ., getString, (, ), ;, if, (, s, ., equals, (]
[{, String, s, =, dest, ., getString, (, ), ;, if, (, s, ., equals, (, "prototype", ), ), {]
[s, =, dest, ., getString, (, ), ;, if, (, s, ., equals, (, "prototype", ), ), {, processPrototypeParent, (]
[dest, ., getString, (, ), ;, if, (, s, ., equals, (, "prototype", ), ), {, processPrototypeParent, (, parent, ,]
[dest, ., getString, (, ), ;, if, (, s, ., equals, (, "prototype", ), ), {, processPrototypeParent, (, parent, ,]
[equals, (, "prototype", ), ), {, processPrototypeParent, (, parent, ,, t, ., getInput, (, ), ), ;, }, else, {]
["prototype", ), ), {, processPrototypeParent, (, parent, ,, t, ., getInput, (, ), ), ;, }, else, {, markPropertyAccessCandidate, (]
[), {, processPrototypeParent, (, parent, ,, t, ., getInput, (, ), ), ;, }, else, {, markPropertyAccessCandidate, (, dest, ,]
[), {, processPrototypeParent, (, parent, ,, t, ., getInput, (, ), ), ;, }, else, {, markPropertyAccessCandidate, (, dest, ,]
[;, }, else, {, markPropertyAccessCandidate, (, dest, ,, t, ., getInput, (, ), ), ;, }, }, break, ;, case]
[;, }, else, {, markPropertyAccessCandidate, (, dest, ,, t, ., getInput, (, ), ), ;, }, }, break, ;, case]
[dest, ,, t, ., getInput, (, ), ), ;, }, }, break, ;, case, Token, ., OBJECTLIT, :, if, (]
[,, t, ., getInput, (, ), ), ;, }, }, break, ;, case, Token, ., OBJECTLIT, :, if, (, !]
[,, t, ., getInput, (, ), ), ;, }, }, break, ;, case, Token, ., OBJECTLIT, :, if, (, !]
[(, ), ), ;, }, }, break, ;, case, Token, ., OBJECTLIT, :, if, (, !, prototypeObjLits, ., contains, (]
[Token, ., OBJECTLIT, :, if, (, !, prototypeObjLits, ., contains, (, n, ), ), {, for, (, Node, child, =]
[Token, ., OBJECTLIT, :, if, (, !, prototypeObjLits, ., contains, (, n, ), ), {, for, (, Node, child, =]
[!, prototypeObjLits, ., contains, (, n, ), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[!, prototypeObjLits, ., contains, (, n, ), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[., contains, (, n, ), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=]
[(, n, ), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;]
[), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, TokenStream, ., isJSIdentifier, (]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, TokenStream, ., isJSIdentifier, (]
[., getNext, (, ), ), {, if, (, TokenStream, ., isJSIdentifier, (, child, ., getString, (, ), ), ), {]
[(, ), ), {, if, (, TokenStream, ., isJSIdentifier, (, child, ., getString, (, ), ), ), {, markObjLitPropertyCandidate, (]
[), {, if, (, TokenStream, ., isJSIdentifier, (, child, ., getString, (, ), ), ), {, markObjLitPropertyCandidate, (, child, ,]
[), {, if, (, TokenStream, ., isJSIdentifier, (, child, ., getString, (, ), ), ), {, markObjLitPropertyCandidate, (, child, ,]
[}, }, }, break, ;, }, }, private, void, processPrototypeParent, (, Node, n, ,, CompilerInput, input, ), {, switch, (]
[}, }, }, break, ;, }, }, private, void, processPrototypeParent, (, Node, n, ,, CompilerInput, input, ), {, switch, (]
[void, processPrototypeParent, (, Node, n, ,, CompilerInput, input, ), {, switch, (, n, ., getType, (, ), ), {, case]
[void, processPrototypeParent, (, Node, n, ,, CompilerInput, input, ), {, switch, (, n, ., getType, (, ), ), {, case]
[,, CompilerInput, input, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case]
[,, CompilerInput, input, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case]
[n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =]
[n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =]
[n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =]
[case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[=, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {]
[., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {, markPrototypePropertyCandidate, (]
[(, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {, markPrototypePropertyCandidate, (, dest, ,]
[if, (, dest, ., isString, (, ), ), {, markPrototypePropertyCandidate, (, dest, ,, input, ), ;, }, break, ;, case]
[if, (, dest, ., isString, (, ), ), {, markPrototypePropertyCandidate, (, dest, ,, input, ), ;, }, break, ;, case]
[(, ), ), {, markPrototypePropertyCandidate, (, dest, ,, input, ), ;, }, break, ;, case, Token, ., ASSIGN, :, case]
[(, ), ), {, markPrototypePropertyCandidate, (, dest, ,, input, ), ;, }, break, ;, case, Token, ., ASSIGN, :, case]
[), ;, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., CALL, :, Node, map, ;, if, (]
[), ;, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., CALL, :, Node, map, ;, if, (]
[., ASSIGN, :, case, Token, ., CALL, :, Node, map, ;, if, (, n, ., isAssign, (, ), ), {]
[:, case, Token, ., CALL, :, Node, map, ;, if, (, n, ., isAssign, (, ), ), {, map, =]
[:, case, Token, ., CALL, :, Node, map, ;, if, (, n, ., isAssign, (, ), ), {, map, =]
[:, case, Token, ., CALL, :, Node, map, ;, if, (, n, ., isAssign, (, ), ), {, map, =]
[isAssign, (, ), ), {, map, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, }, else, {]
[), ), {, map, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, }, else, {, map, =]
[), ), {, map, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, }, else, {, map, =]
[), ., getNext, (, ), ;, }, else, {, map, =, n, ., getLastChild, (, ), ;, }, if, (]
[), ., getNext, (, ), ;, }, else, {, map, =, n, ., getLastChild, (, ), ;, }, if, (]
[else, {, map, =, n, ., getLastChild, (, ), ;, }, if, (, map, ., isObjectLit, (, ), ), {]
[else, {, map, =, n, ., getLastChild, (, ), ;, }, if, (, map, ., isObjectLit, (, ), ), {]
[n, ., getLastChild, (, ), ;, }, if, (, map, ., isObjectLit, (, ), ), {, prototypeObjLits, ., add, (]
[(, map, ., isObjectLit, (, ), ), {, prototypeObjLits, ., add, (, map, ), ;, for, (, Node, key, =]
[(, map, ., isObjectLit, (, ), ), {, prototypeObjLits, ., add, (, map, ), ;, for, (, Node, key, =]
[), {, prototypeObjLits, ., add, (, map, ), ;, for, (, Node, key, =, map, ., getFirstChild, (, ), ;]
[), {, prototypeObjLits, ., add, (, map, ), ;, for, (, Node, key, =, map, ., getFirstChild, (, ), ;]
[prototypeObjLits, ., add, (, map, ), ;, for, (, Node, key, =, map, ., getFirstChild, (, ), ;, key, !=]
[add, (, map, ), ;, for, (, Node, key, =, map, ., getFirstChild, (, ), ;, key, !=, null, ;]
[map, ), ;, for, (, Node, key, =, map, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[map, ), ;, for, (, Node, key, =, map, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (]
[;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, TokenStream, ., isJSIdentifier, (]
[;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, TokenStream, ., isJSIdentifier, (]
[., getNext, (, ), ), {, if, (, TokenStream, ., isJSIdentifier, (, key, ., getString, (, ), ), ), {]
[(, ), ), {, if, (, TokenStream, ., isJSIdentifier, (, key, ., getString, (, ), ), ), {, markPrototypePropertyCandidate, (]
[), {, if, (, TokenStream, ., isJSIdentifier, (, key, ., getString, (, ), ), ), {, markPrototypePropertyCandidate, (, key, ,]
[), ;, }, }, }, break, ;, }, }, private, void, markPrototypePropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {]
[), ;, }, }, }, break, ;, }, }, private, void, markPrototypePropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {]
[}, break, ;, }, }, private, void, markPrototypePropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (]
[}, }, private, void, markPrototypePropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (, n, ), ;]
[}, }, private, void, markPrototypePropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (, n, ), ;]
[}, }, private, void, markPrototypePropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (, n, ), ;]
[private, void, markPrototypePropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (, n, ), ;, getProperty, (]
[private, void, markPrototypePropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (, n, ), ;, getProperty, (]
[getString, (, ), ), ., prototypeCount, ++, ;, }, private, void, markObjLitPropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {]
[getString, (, ), ), ., prototypeCount, ++, ;, }, private, void, markObjLitPropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {]
[., prototypeCount, ++, ;, }, private, void, markObjLitPropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (]
[;, }, private, void, markObjLitPropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (, n, ), ;]
[;, }, private, void, markObjLitPropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (, n, ), ;]
[;, }, private, void, markObjLitPropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (, n, ), ;]
[private, void, markObjLitPropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (, n, ), ;, getProperty, (]
[private, void, markObjLitPropertyCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (, n, ), ;, getProperty, (]
[getString, (, ), ), ., objLitCount, ++, ;, }, private, void, markPropertyAccessCandidate, (, Node, n, ,, CompilerInput, input, ), {]
[getString, (, ), ), ., objLitCount, ++, ;, }, private, void, markPropertyAccessCandidate, (, Node, n, ,, CompilerInput, input, ), {]
[., objLitCount, ++, ;, }, private, void, markPropertyAccessCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (]
[;, }, private, void, markPropertyAccessCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (, n, ), ;]
[;, }, private, void, markPropertyAccessCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (, n, ), ;]
[;, }, private, void, markPropertyAccessCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (, n, ), ;]
[private, void, markPropertyAccessCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (, n, ), ;, getProperty, (]
[private, void, markPropertyAccessCandidate, (, Node, n, ,, CompilerInput, input, ), {, stringNodes, ., add, (, n, ), ;, getProperty, (]
[getString, (, ), ), ., refCount, ++, ;, }, private, Property, getProperty, (, String, name, ), {, Property, prop, =]
[getString, (, ), ), ., refCount, ++, ;, }, private, Property, getProperty, (, String, name, ), {, Property, prop, =]
[., refCount, ++, ;, }, private, Property, getProperty, (, String, name, ), {, Property, prop, =, properties, ., get, (]
[private, Property, getProperty, (, String, name, ), {, Property, prop, =, properties, ., get, (, name, ), ;, if, (]
[private, Property, getProperty, (, String, name, ), {, Property, prop, =, properties, ., get, (, name, ), ;, if, (]
[getProperty, (, String, name, ), {, Property, prop, =, properties, ., get, (, name, ), ;, if, (, prop, ==]
[name, ), {, Property, prop, =, properties, ., get, (, name, ), ;, if, (, prop, ==, null, ), {]
[{, Property, prop, =, properties, ., get, (, name, ), ;, if, (, prop, ==, null, ), {, prop, =]
[=, properties, ., get, (, name, ), ;, if, (, prop, ==, null, ), {, prop, =, new, Property, (]
[get, (, name, ), ;, if, (, prop, ==, null, ), {, prop, =, new, Property, (, name, ), ;]
[get, (, name, ), ;, if, (, prop, ==, null, ), {, prop, =, new, Property, (, name, ), ;]
[;, if, (, prop, ==, null, ), {, prop, =, new, Property, (, name, ), ;, properties, ., put, (]
[(, prop, ==, null, ), {, prop, =, new, Property, (, name, ), ;, properties, ., put, (, name, ,]
[{, prop, =, new, Property, (, name, ), ;, properties, ., put, (, name, ,, prop, ), ;, }, return]
[return, prop, ;, }, }, VariableMap, getPropertyMap, (, ), {, ImmutableMap, ., Builder, <, String, ,, String, >, map, =]
[return, prop, ;, }, }, VariableMap, getPropertyMap, (, ), {, ImmutableMap, ., Builder, <, String, ,, String, >, map, =]
[., Builder, <, String, ,, String, >, map, =, ImmutableMap, ., builder, (, ), ;, for, (, Property, p, :]
[., Builder, <, String, ,, String, >, map, =, ImmutableMap, ., builder, (, ), ;, for, (, Property, p, :]
[ImmutableMap, ., builder, (, ), ;, for, (, Property, p, :, properties, ., values, (, ), ), {, if, (]
[ImmutableMap, ., builder, (, ), ;, for, (, Property, p, :, properties, ., values, (, ), ), {, if, (]
[ImmutableMap, ., builder, (, ), ;, for, (, Property, p, :, properties, ., values, (, ), ), {, if, (]
[), ;, for, (, Property, p, :, properties, ., values, (, ), ), {, if, (, p, ., newName, !=]
[(, Property, p, :, properties, ., values, (, ), ), {, if, (, p, ., newName, !=, null, ), {]
[(, Property, p, :, properties, ., values, (, ), ), {, if, (, p, ., newName, !=, null, ), {]
[properties, ., values, (, ), ), {, if, (, p, ., newName, !=, null, ), {, map, ., put, (]
[properties, ., values, (, ), ), {, if, (, p, ., newName, !=, null, ), {, map, ., put, (]
[), ), {, if, (, p, ., newName, !=, null, ), {, map, ., put, (, p, ., oldName, ,]
[), ), {, if, (, p, ., newName, !=, null, ), {, map, ., put, (, p, ., oldName, ,]
[!=, null, ), {, map, ., put, (, p, ., oldName, ,, p, ., newName, ), ;, }, }, return]
[{, map, ., put, (, p, ., oldName, ,, p, ., newName, ), ;, }, }, return, new, VariableMap, (]
[{, map, ., put, (, p, ., oldName, ,, p, ., newName, ), ;, }, }, return, new, VariableMap, (]
