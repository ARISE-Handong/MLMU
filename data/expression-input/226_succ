[;, private, final, LinkedHashMap, <, String, ,, GenerateNodeContext, >, exports, ;, private, final, AbstractCompiler, compiler, ;, public, FindExportableNodes, (, AbstractCompiler]
[., error, (, "JSC_NON_GLOBAL_ERROR", ,, "@export only applies to symbols/properties defined in the ", +, "global scope.", ), ;, private, final, LinkedHashMap, <, String, ,, GenerateNodeContext, >, exports, ;]
[,, "@export only applies to symbols/properties defined in the ", +, "global scope.", ), ;, private, final, LinkedHashMap, <, String, ,, GenerateNodeContext, >, exports, ;, private, final, AbstractCompiler, compiler]
[), ;, private, final, LinkedHashMap, <, String, ,, GenerateNodeContext, >, exports, ;, private, final, AbstractCompiler, compiler, ;, public, FindExportableNodes, (]
[+, "global scope.", ), ;, private, final, LinkedHashMap, <, String, ,, GenerateNodeContext, >, exports, ;, private, final, AbstractCompiler, compiler, ;, public]
[), ;, private, final, LinkedHashMap, <, String, ,, GenerateNodeContext, >, exports, ;, private, final, AbstractCompiler, compiler, ;, public, FindExportableNodes, (]
[=, compiler, ;, this, ., exports, =, Maps, ., newLinkedHashMap, (, ), ;, }, @, Override, public, void, visit, (]
[., compiler, =, compiler, ;, this, ., exports, =, Maps, ., newLinkedHashMap, (, ), ;, }, @, Override, public, void]
[;, this, ., exports, =, Maps, ., newLinkedHashMap, (, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t]
[=, Maps, ., newLinkedHashMap, (, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[., exports, =, Maps, ., newLinkedHashMap, (, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, JSDocInfo, docInfo]
[., newLinkedHashMap, (, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, if, (, docInfo, !=, null, &&, docInfo, ., isExport, (, ), ), {, String, export, =, null, ;, GenerateNodeContext]
[., getJSDocInfo, (, ), ;, if, (, docInfo, !=, null, &&, docInfo, ., isExport, (, ), ), {, String, export]
[), {, String, export, =, null, ;, GenerateNodeContext, context, =, null, ;, switch, (, n, ., getType, (, ), )]
[&&, docInfo, ., isExport, (, ), ), {, String, export, =, null, ;, GenerateNodeContext, context, =, null, ;, switch, (]
[!=, null, &&, docInfo, ., isExport, (, ), ), {, String, export, =, null, ;, GenerateNodeContext, context, =, null, ;]
[&&, docInfo, ., isExport, (, ), ), {, String, export, =, null, ;, GenerateNodeContext, context, =, null, ;, switch, (]
[), {, String, export, =, null, ;, GenerateNodeContext, context, =, null, ;, switch, (, n, ., getType, (, ), )]
[., isExport, (, ), ), {, String, export, =, null, ;, GenerateNodeContext, context, =, null, ;, switch, (, n, .]
[;, GenerateNodeContext, context, =, null, ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., FUNCTION, :]
[;, switch, (, n, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, if, (, parent, ., isScript]
[), {, case, Token, ., FUNCTION, :, if, (, parent, ., isScript, (, ), ), {, export, =, NodeUtil, .]
[., getType, (, ), ), {, case, Token, ., FUNCTION, :, if, (, parent, ., isScript, (, ), ), {]
[:, if, (, parent, ., isScript, (, ), ), {, export, =, NodeUtil, ., getFunctionName, (, n, ), ;, context]
[., FUNCTION, :, if, (, parent, ., isScript, (, ), ), {, export, =, NodeUtil, ., getFunctionName, (, n, )]
[), {, export, =, NodeUtil, ., getFunctionName, (, n, ), ;, context, =, new, GenerateNodeContext, (, n, ,, parent, ,]
[., isScript, (, ), ), {, export, =, NodeUtil, ., getFunctionName, (, n, ), ;, context, =, new, GenerateNodeContext, (]
[=, NodeUtil, ., getFunctionName, (, n, ), ;, context, =, new, GenerateNodeContext, (, n, ,, parent, ,, n, ), ;]
[;, context, =, new, GenerateNodeContext, (, n, ,, parent, ,, n, ), ;, }, break, ;, case, Token, ., ASSIGN]
[., getFunctionName, (, n, ), ;, context, =, new, GenerateNodeContext, (, n, ,, parent, ,, n, ), ;, }, break]
[), ;, context, =, new, GenerateNodeContext, (, n, ,, parent, ,, n, ), ;, }, break, ;, case, Token, .]
[=, new, GenerateNodeContext, (, n, ,, parent, ,, n, ), ;, }, break, ;, case, Token, ., ASSIGN, :, Node]
[;, }, break, ;, case, Token, ., ASSIGN, :, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (]
[,, parent, ,, n, ), ;, }, break, ;, case, Token, ., ASSIGN, :, Node, grandparent, =, parent, ., getParent]
[,, n, ), ;, }, break, ;, case, Token, ., ASSIGN, :, Node, grandparent, =, parent, ., getParent, (, )]
[), ;, }, break, ;, case, Token, ., ASSIGN, :, Node, grandparent, =, parent, ., getParent, (, ), ;, if]
[:, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (, grandparent, !=, null, &&, grandparent, ., isScript, (]
[., ASSIGN, :, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (, grandparent, !=, null, &&, grandparent, .]
[;, if, (, grandparent, !=, null, &&, grandparent, ., isScript, (, ), &&, parent, ., isExprResult, (, ), &&, !]
[., getParent, (, ), ;, if, (, grandparent, !=, null, &&, grandparent, ., isScript, (, ), &&, parent, ., isExprResult]
[), {, export, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, context, =, new, GenerateNodeContext, (, n]
[&&, !, n, ., getLastChild, (, ), ., isAssign, (, ), ), {, export, =, n, ., getFirstChild, (, )]
[&&, parent, ., isExprResult, (, ), &&, !, n, ., getLastChild, (, ), ., isAssign, (, ), ), {, export]
[&&, grandparent, ., isScript, (, ), &&, parent, ., isExprResult, (, ), &&, !, n, ., getLastChild, (, ), .]
[!=, null, &&, grandparent, ., isScript, (, ), &&, parent, ., isExprResult, (, ), &&, !, n, ., getLastChild, (]
[&&, grandparent, ., isScript, (, ), &&, parent, ., isExprResult, (, ), &&, !, n, ., getLastChild, (, ), .]
[&&, parent, ., isExprResult, (, ), &&, !, n, ., getLastChild, (, ), ., isAssign, (, ), ), {, export]
[., isScript, (, ), &&, parent, ., isExprResult, (, ), &&, !, n, ., getLastChild, (, ), ., isAssign, (]
[&&, !, n, ., getLastChild, (, ), ., isAssign, (, ), ), {, export, =, n, ., getFirstChild, (, )]
[., isExprResult, (, ), &&, !, n, ., getLastChild, (, ), ., isAssign, (, ), ), {, export, =, n]
[), {, export, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, context, =, new, GenerateNodeContext, (, n]
[), {, export, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, context, =, new, GenerateNodeContext, (, n]
[., isAssign, (, ), ), {, export, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, context, =]
[., getLastChild, (, ), ., isAssign, (, ), ), {, export, =, n, ., getFirstChild, (, ), ., getQualifiedName, (]
[=, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, context, =, new, GenerateNodeContext, (, n, ,, grandparent, ,]
[;, context, =, new, GenerateNodeContext, (, n, ,, grandparent, ,, parent, ), ;, }, break, ;, case, Token, ., VAR]
[., getQualifiedName, (, ), ;, context, =, new, GenerateNodeContext, (, n, ,, grandparent, ,, parent, ), ;, }, break, ;]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ;, context, =, new, GenerateNodeContext, (, n, ,, grandparent, ,, parent, )]
[=, new, GenerateNodeContext, (, n, ,, grandparent, ,, parent, ), ;, }, break, ;, case, Token, ., VAR, :, if]
[;, }, break, ;, case, Token, ., VAR, :, if, (, parent, ., isScript, (, ), ), {, if, (]
[,, grandparent, ,, parent, ), ;, }, break, ;, case, Token, ., VAR, :, if, (, parent, ., isScript, (]
[,, parent, ), ;, }, break, ;, case, Token, ., VAR, :, if, (, parent, ., isScript, (, ), )]
[), ;, }, break, ;, case, Token, ., VAR, :, if, (, parent, ., isScript, (, ), ), {, if]
[:, if, (, parent, ., isScript, (, ), ), {, if, (, n, ., getFirstChild, (, ), ., hasChildren, (]
[., VAR, :, if, (, parent, ., isScript, (, ), ), {, if, (, n, ., getFirstChild, (, ), .]
[), {, if, (, n, ., getFirstChild, (, ), ., hasChildren, (, ), &&, !, n, ., getFirstChild, (, )]
[., isScript, (, ), ), {, if, (, n, ., getFirstChild, (, ), ., hasChildren, (, ), &&, !, n]
[), {, export, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, context, =, new, GenerateNodeContext, (, n]
[&&, !, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ., isAssign, (, ), ), {, export, =, n]
[., hasChildren, (, ), &&, !, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ., isAssign, (, ), )]
[., getFirstChild, (, ), ., hasChildren, (, ), &&, !, n, ., getFirstChild, (, ), ., getFirstChild, (, ), .]
[), {, export, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, context, =, new, GenerateNodeContext, (, n]
[), {, export, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, context, =, new, GenerateNodeContext, (, n]
[., isAssign, (, ), ), {, export, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, context, =]
[., getFirstChild, (, ), ., isAssign, (, ), ), {, export, =, n, ., getFirstChild, (, ), ., getString, (]
[., getFirstChild, (, ), ., getFirstChild, (, ), ., isAssign, (, ), ), {, export, =, n, ., getFirstChild, (]
[=, n, ., getFirstChild, (, ), ., getString, (, ), ;, context, =, new, GenerateNodeContext, (, n, ,, parent, ,]
[;, context, =, new, GenerateNodeContext, (, n, ,, parent, ,, n, ), ;, }, }, }, if, (, export, !=]
[., getString, (, ), ;, context, =, new, GenerateNodeContext, (, n, ,, parent, ,, n, ), ;, }, }, }]
[., getFirstChild, (, ), ., getString, (, ), ;, context, =, new, GenerateNodeContext, (, n, ,, parent, ,, n, )]
[=, new, GenerateNodeContext, (, n, ,, parent, ,, n, ), ;, }, }, }, if, (, export, !=, null, )]
[;, }, }, }, if, (, export, !=, null, ), {, exports, ., put, (, export, ,, context, ), ;]
[,, parent, ,, n, ), ;, }, }, }, if, (, export, !=, null, ), {, exports, ., put, (]
[,, n, ), ;, }, }, }, if, (, export, !=, null, ), {, exports, ., put, (, export, ,]
[), ;, }, }, }, if, (, export, !=, null, ), {, exports, ., put, (, export, ,, context, )]
[), {, exports, ., put, (, export, ,, context, ), ;, }, else, {, compiler, ., report, (, t, .]
[!=, null, ), {, exports, ., put, (, export, ,, context, ), ;, }, else, {, compiler, ., report, (]
[), {, exports, ., put, (, export, ,, context, ), ;, }, else, {, compiler, ., report, (, t, .]
[;, }, else, {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_ERROR, ), ), ;, }, }]
[., put, (, export, ,, context, ), ;, }, else, {, compiler, ., report, (, t, ., makeError, (, n]
[,, context, ), ;, }, else, {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_ERROR, ), )]
[), ;, }, else, {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_ERROR, ), ), ;, }]
[;, }, }, }, public, LinkedHashMap, <, String, ,, GenerateNodeContext, >, getExports, (, ), {, return, exports, ;, }, public]
[., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_ERROR, ), ), ;, }, }, }, public, LinkedHashMap, <, String]
[), ;, }, }, }, public, LinkedHashMap, <, String, ,, GenerateNodeContext, >, getExports, (, ), {, return, exports, ;, }]
[., makeError, (, n, ,, NON_GLOBAL_ERROR, ), ), ;, }, }, }, public, LinkedHashMap, <, String, ,, GenerateNodeContext, >, getExports]
[,, NON_GLOBAL_ERROR, ), ), ;, }, }, }, public, LinkedHashMap, <, String, ,, GenerateNodeContext, >, getExports, (, ), {, return]
[), ), ;, }, }, }, public, LinkedHashMap, <, String, ,, GenerateNodeContext, >, getExports, (, ), {, return, exports, ;]
[;, }, public, static, class, GenerateNodeContext, {, private, final, Node, scriptNode, ;, private, final, Node, contextNode, ;, private, final, Node]
[=, node, ;, this, ., scriptNode, =, scriptNode, ;, this, ., contextNode, =, contextNode, ;, }, public, Node, getNode, (]
[., node, =, node, ;, this, ., scriptNode, =, scriptNode, ;, this, ., contextNode, =, contextNode, ;, }, public, Node]
[;, this, ., scriptNode, =, scriptNode, ;, this, ., contextNode, =, contextNode, ;, }, public, Node, getNode, (, ), {]
[=, scriptNode, ;, this, ., contextNode, =, contextNode, ;, }, public, Node, getNode, (, ), {, return, node, ;, }]
[., scriptNode, =, scriptNode, ;, this, ., contextNode, =, contextNode, ;, }, public, Node, getNode, (, ), {, return, node]
[;, this, ., contextNode, =, contextNode, ;, }, public, Node, getNode, (, ), {, return, node, ;, }, public, Node]
[=, contextNode, ;, }, public, Node, getNode, (, ), {, return, node, ;, }, public, Node, getScriptNode, (, ), {]
[., contextNode, =, contextNode, ;, }, public, Node, getNode, (, ), {, return, node, ;, }, public, Node, getScriptNode, (]
[;, }, public, Node, getNode, (, ), {, return, node, ;, }, public, Node, getScriptNode, (, ), {, return, scriptNode]
[;, }, public, Node, getScriptNode, (, ), {, return, scriptNode, ;, }, public, Node, getContextNode, (, ), {, return, contextNode]
[;, }, public, Node, getContextNode, (, ), {, return, contextNode, ;, }, }, }]
[;, }, }, }]
