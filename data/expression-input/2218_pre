[., Map, ;, import, java, ., util, ., Set, ;, class, ReplaceIdGenerators, implements, CompilerPass, {, static, final, DiagnosticType, NON_GLOBAL_ID_GENERATOR_CALL, =]
[., Map, ;, import, java, ., util, ., Set, ;, class, ReplaceIdGenerators, implements, CompilerPass, {, static, final, DiagnosticType, NON_GLOBAL_ID_GENERATOR_CALL, =]
[java, ., util, ., Set, ;, class, ReplaceIdGenerators, implements, CompilerPass, {, static, final, DiagnosticType, NON_GLOBAL_ID_GENERATOR_CALL, =, DiagnosticType, ., error, (]
[util, ., Set, ;, class, ReplaceIdGenerators, implements, CompilerPass, {, static, final, DiagnosticType, NON_GLOBAL_ID_GENERATOR_CALL, =, DiagnosticType, ., error, (, "JSC_NON_GLOBAL_ID_GENERATOR_CALL", ,]
[{, static, final, DiagnosticType, NON_GLOBAL_ID_GENERATOR_CALL, =, DiagnosticType, ., error, (, "JSC_NON_GLOBAL_ID_GENERATOR_CALL", ,, "Id generator call must be in the global scope", ), ;, static, final, DiagnosticType, CONDITIONAL_ID_GENERATOR_CALL, =]
[{, static, final, DiagnosticType, NON_GLOBAL_ID_GENERATOR_CALL, =, DiagnosticType, ., error, (, "JSC_NON_GLOBAL_ID_GENERATOR_CALL", ,, "Id generator call must be in the global scope", ), ;, static, final, DiagnosticType, CONDITIONAL_ID_GENERATOR_CALL, =]
[NON_GLOBAL_ID_GENERATOR_CALL, =, DiagnosticType, ., error, (, "JSC_NON_GLOBAL_ID_GENERATOR_CALL", ,, "Id generator call must be in the global scope", ), ;, static, final, DiagnosticType, CONDITIONAL_ID_GENERATOR_CALL, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_NON_GLOBAL_ID_GENERATOR_CALL", ,, "Id generator call must be in the global scope", ), ;, static, final, DiagnosticType, CONDITIONAL_ID_GENERATOR_CALL, =, DiagnosticType, ., error, (, "JSC_CONDITIONAL_ID_GENERATOR_CALL", ,]
[;, static, final, DiagnosticType, CONDITIONAL_ID_GENERATOR_CALL, =, DiagnosticType, ., error, (, "JSC_CONDITIONAL_ID_GENERATOR_CALL", ,, "Id generator call must be unconditional", ), ;, static, final, DiagnosticType, CONFLICTING_GENERATOR_TYPE, =]
[;, static, final, DiagnosticType, CONDITIONAL_ID_GENERATOR_CALL, =, DiagnosticType, ., error, (, "JSC_CONDITIONAL_ID_GENERATOR_CALL", ,, "Id generator call must be unconditional", ), ;, static, final, DiagnosticType, CONFLICTING_GENERATOR_TYPE, =]
[CONDITIONAL_ID_GENERATOR_CALL, =, DiagnosticType, ., error, (, "JSC_CONDITIONAL_ID_GENERATOR_CALL", ,, "Id generator call must be unconditional", ), ;, static, final, DiagnosticType, CONFLICTING_GENERATOR_TYPE, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_CONDITIONAL_ID_GENERATOR_CALL", ,, "Id generator call must be unconditional", ), ;, static, final, DiagnosticType, CONFLICTING_GENERATOR_TYPE, =, DiagnosticType, ., error, (, "JSC_CONFLICTING_ID_GENERATOR_TYPE", ,]
[;, static, final, DiagnosticType, CONFLICTING_GENERATOR_TYPE, =, DiagnosticType, ., error, (, "JSC_CONFLICTING_ID_GENERATOR_TYPE", ,, "Id generator can only be one of consistent, inconsistent, or stable.", ), ;, static, final, DiagnosticType, INVALID_GENERATOR_ID_MAPPING, =]
[;, static, final, DiagnosticType, CONFLICTING_GENERATOR_TYPE, =, DiagnosticType, ., error, (, "JSC_CONFLICTING_ID_GENERATOR_TYPE", ,, "Id generator can only be one of consistent, inconsistent, or stable.", ), ;, static, final, DiagnosticType, INVALID_GENERATOR_ID_MAPPING, =]
[CONFLICTING_GENERATOR_TYPE, =, DiagnosticType, ., error, (, "JSC_CONFLICTING_ID_GENERATOR_TYPE", ,, "Id generator can only be one of consistent, inconsistent, or stable.", ), ;, static, final, DiagnosticType, INVALID_GENERATOR_ID_MAPPING, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_CONFLICTING_ID_GENERATOR_TYPE", ,, "Id generator can only be one of consistent, inconsistent, or stable.", ), ;, static, final, DiagnosticType, INVALID_GENERATOR_ID_MAPPING, =, DiagnosticType, ., error, (, "JSC_INVALID_GENERATOR_ID_MAPPING", ,]
[;, public, ReplaceIdGenerators, (, AbstractCompiler, compiler, ,, Set, <, String, >, idGens, ,, boolean, generatePseudoNames, ,, String, previousMapSerialized, ), {]
[;, public, ReplaceIdGenerators, (, AbstractCompiler, compiler, ,, Set, <, String, >, idGens, ,, boolean, generatePseudoNames, ,, String, previousMapSerialized, ), {]
[AbstractCompiler, compiler, ,, Set, <, String, >, idGens, ,, boolean, generatePseudoNames, ,, String, previousMapSerialized, ), {, this, ., compiler, =]
[,, Set, <, String, >, idGens, ,, boolean, generatePseudoNames, ,, String, previousMapSerialized, ), {, this, ., compiler, =, compiler, ;]
[,, Set, <, String, >, idGens, ,, boolean, generatePseudoNames, ,, String, previousMapSerialized, ), {, this, ., compiler, =, compiler, ;]
[>, idGens, ,, boolean, generatePseudoNames, ,, String, previousMapSerialized, ), {, this, ., compiler, =, compiler, ;, this, ., generatePseudoNames, =]
[,, boolean, generatePseudoNames, ,, String, previousMapSerialized, ), {, this, ., compiler, =, compiler, ;, this, ., generatePseudoNames, =, generatePseudoNames, ;]
[generatePseudoNames, ,, String, previousMapSerialized, ), {, this, ., compiler, =, compiler, ;, this, ., generatePseudoNames, =, generatePseudoNames, ;, nameGenerators, =]
[generatePseudoNames, ,, String, previousMapSerialized, ), {, this, ., compiler, =, compiler, ;, this, ., generatePseudoNames, =, generatePseudoNames, ;, nameGenerators, =]
[this, ., compiler, =, compiler, ;, this, ., generatePseudoNames, =, generatePseudoNames, ;, nameGenerators, =, Maps, ., newLinkedHashMap, (, ), ;]
[compiler, =, compiler, ;, this, ., generatePseudoNames, =, generatePseudoNames, ;, nameGenerators, =, Maps, ., newLinkedHashMap, (, ), ;, idGeneratorMaps, =]
[compiler, =, compiler, ;, this, ., generatePseudoNames, =, generatePseudoNames, ;, nameGenerators, =, Maps, ., newLinkedHashMap, (, ), ;, idGeneratorMaps, =]
[generatePseudoNames, =, generatePseudoNames, ;, nameGenerators, =, Maps, ., newLinkedHashMap, (, ), ;, idGeneratorMaps, =, Maps, ., newLinkedHashMap, (, ), ;]
[generatePseudoNames, ;, nameGenerators, =, Maps, ., newLinkedHashMap, (, ), ;, idGeneratorMaps, =, Maps, ., newLinkedHashMap, (, ), ;, consistNameMap, =]
[generatePseudoNames, ;, nameGenerators, =, Maps, ., newLinkedHashMap, (, ), ;, idGeneratorMaps, =, Maps, ., newLinkedHashMap, (, ), ;, consistNameMap, =]
[=, Maps, ., newLinkedHashMap, (, ), ;, Map, <, String, ,, BiMap, <, String, ,, String, >, >, previousMap, ;]
[., newLinkedHashMap, (, ), ;, Map, <, String, ,, BiMap, <, String, ,, String, >, >, previousMap, ;, previousMap, =]
[(, ), ;, Map, <, String, ,, BiMap, <, String, ,, String, >, >, previousMap, ;, previousMap, =, parsePreviousResults, (]
[Map, <, String, ,, BiMap, <, String, ,, String, >, >, previousMap, ;, previousMap, =, parsePreviousResults, (, previousMapSerialized, ), ;]
[Map, <, String, ,, BiMap, <, String, ,, String, >, >, previousMap, ;, previousMap, =, parsePreviousResults, (, previousMapSerialized, ), ;]
[BiMap, <, String, ,, String, >, >, previousMap, ;, previousMap, =, parsePreviousResults, (, previousMapSerialized, ), ;, this, ., previousMap, =]
[String, >, >, previousMap, ;, previousMap, =, parsePreviousResults, (, previousMapSerialized, ), ;, this, ., previousMap, =, previousMap, ;, if, (]
[String, >, >, previousMap, ;, previousMap, =, parsePreviousResults, (, previousMapSerialized, ), ;, this, ., previousMap, =, previousMap, ;, if, (]
[>, previousMap, ;, previousMap, =, parsePreviousResults, (, previousMapSerialized, ), ;, this, ., previousMap, =, previousMap, ;, if, (, idGens, !=]
[), ;, this, ., previousMap, =, previousMap, ;, if, (, idGens, !=, null, ), {, for, (, String, gen, :]
[., previousMap, =, previousMap, ;, if, (, idGens, !=, null, ), {, for, (, String, gen, :, idGens, ), {]
[., previousMap, =, previousMap, ;, if, (, idGens, !=, null, ), {, for, (, String, gen, :, idGens, ), {]
[;, if, (, idGens, !=, null, ), {, for, (, String, gen, :, idGens, ), {, nameGenerators, ., put, (]
[(, idGens, !=, null, ), {, for, (, String, gen, :, idGens, ), {, nameGenerators, ., put, (, gen, ,]
[!=, null, ), {, for, (, String, gen, :, idGens, ), {, nameGenerators, ., put, (, gen, ,, createNameSupplier, (]
[!=, null, ), {, for, (, String, gen, :, idGens, ), {, nameGenerators, ., put, (, gen, ,, createNameSupplier, (]
[for, (, String, gen, :, idGens, ), {, nameGenerators, ., put, (, gen, ,, createNameSupplier, (, RenameStrategy, ., INCONSISTENT, ,]
[for, (, String, gen, :, idGens, ), {, nameGenerators, ., put, (, gen, ,, createNameSupplier, (, RenameStrategy, ., INCONSISTENT, ,]
[:, idGens, ), {, nameGenerators, ., put, (, gen, ,, createNameSupplier, (, RenameStrategy, ., INCONSISTENT, ,, previousMap, ., get, (]
[., put, (, gen, ,, createNameSupplier, (, RenameStrategy, ., INCONSISTENT, ,, previousMap, ., get, (, gen, ), ), ), ;]
[., put, (, gen, ,, createNameSupplier, (, RenameStrategy, ., INCONSISTENT, ,, previousMap, ., get, (, gen, ), ), ), ;]
[,, createNameSupplier, (, RenameStrategy, ., INCONSISTENT, ,, previousMap, ., get, (, gen, ), ), ), ;, idGeneratorMaps, ., put, (]
[(, RenameStrategy, ., INCONSISTENT, ,, previousMap, ., get, (, gen, ), ), ), ;, idGeneratorMaps, ., put, (, gen, ,]
[(, RenameStrategy, ., INCONSISTENT, ,, previousMap, ., get, (, gen, ), ), ), ;, idGeneratorMaps, ., put, (, gen, ,]
[;, private, RenameStrategy, renameStrategy, ;, public, ObfuscatedNameSuppier, (, RenameStrategy, renameStrategy, ,, BiMap, <, String, ,, String, >, previousMappings, ), {]
[;, private, RenameStrategy, renameStrategy, ;, public, ObfuscatedNameSuppier, (, RenameStrategy, renameStrategy, ,, BiMap, <, String, ,, String, >, previousMappings, ), {]
[;, public, ObfuscatedNameSuppier, (, RenameStrategy, renameStrategy, ,, BiMap, <, String, ,, String, >, previousMappings, ), {, this, ., previousMappings, =]
[;, public, ObfuscatedNameSuppier, (, RenameStrategy, renameStrategy, ,, BiMap, <, String, ,, String, >, previousMappings, ), {, this, ., previousMappings, =]
[,, BiMap, <, String, ,, String, >, previousMappings, ), {, this, ., previousMappings, =, previousMappings, ., inverse, (, ), ;]
[,, BiMap, <, String, ,, String, >, previousMappings, ), {, this, ., previousMappings, =, previousMappings, ., inverse, (, ), ;]
[,, String, >, previousMappings, ), {, this, ., previousMappings, =, previousMappings, ., inverse, (, ), ;, this, ., generator, =]
[previousMappings, ), {, this, ., previousMappings, =, previousMappings, ., inverse, (, ), ;, this, ., generator, =, new, NameGenerator, (]
[previousMappings, ), {, this, ., previousMappings, =, previousMappings, ., inverse, (, ), ;, this, ., generator, =, new, NameGenerator, (]
[=, previousMappings, ., inverse, (, ), ;, this, ., generator, =, new, NameGenerator, (, previousMappings, ., keySet, (, ), ,]
[., inverse, (, ), ;, this, ., generator, =, new, NameGenerator, (, previousMappings, ., keySet, (, ), ,, "", ,]
[), ;, this, ., generator, =, new, NameGenerator, (, previousMappings, ., keySet, (, ), ,, "", ,, null, ), ;]
[), ;, this, ., generator, =, new, NameGenerator, (, previousMappings, ., keySet, (, ), ,, "", ,, null, ), ;]
[generator, =, new, NameGenerator, (, previousMappings, ., keySet, (, ), ,, "", ,, null, ), ;, this, ., renameStrategy, =]
[=, renameStrategy, ;, }, @, Override, public, String, getName, (, String, id, ,, String, name, ), {, String, newName, =]
[=, renameStrategy, ;, }, @, Override, public, String, getName, (, String, id, ,, String, name, ), {, String, newName, =]
[@, Override, public, String, getName, (, String, id, ,, String, name, ), {, String, newName, =, previousMappings, ., get, (]
[(, String, id, ,, String, name, ), {, String, newName, =, previousMappings, ., get, (, id, ), ;, if, (]
[(, String, id, ,, String, name, ), {, String, newName, =, previousMappings, ., get, (, id, ), ;, if, (]
[id, ,, String, name, ), {, String, newName, =, previousMappings, ., get, (, id, ), ;, if, (, newName, ==]
[name, ), {, String, newName, =, previousMappings, ., get, (, id, ), ;, if, (, newName, ==, null, ), {]
[{, String, newName, =, previousMappings, ., get, (, id, ), ;, if, (, newName, ==, null, ), {, newName, =]
[{, String, newName, =, previousMappings, ., get, (, id, ), ;, if, (, newName, ==, null, ), {, newName, =]
[id, ), ;, if, (, newName, ==, null, ), {, newName, =, generator, ., generateNextName, (, ), ;, }, return]
[generator, ., generateNextName, (, ), ;, }, return, newName, ;, }, @, Override, public, RenameStrategy, getRenameStrategy, (, ), {, return]
[getRenameStrategy, (, ), {, return, renameStrategy, ;, }, }, private, static, class, PseudoNameSuppier, implements, NameSupplier, {, private, int, counter, =]
[implements, NameSupplier, {, private, int, counter, =, 0, ;, private, RenameStrategy, renameStrategy, ;, public, PseudoNameSuppier, (, RenameStrategy, renameStrategy, ), {]
[implements, NameSupplier, {, private, int, counter, =, 0, ;, private, RenameStrategy, renameStrategy, ;, public, PseudoNameSuppier, (, RenameStrategy, renameStrategy, ), {]
[int, counter, =, 0, ;, private, RenameStrategy, renameStrategy, ;, public, PseudoNameSuppier, (, RenameStrategy, renameStrategy, ), {, this, ., renameStrategy, =]
[renameStrategy, =, renameStrategy, ;, }, @, Override, public, String, getName, (, String, id, ,, String, name, ), {, if, (]
[renameStrategy, =, renameStrategy, ;, }, @, Override, public, String, getName, (, String, id, ,, String, name, ), {, if, (]
[renameStrategy, ;, }, @, Override, public, String, getName, (, String, id, ,, String, name, ), {, if, (, renameStrategy, ==]
[renameStrategy, ;, }, @, Override, public, String, getName, (, String, id, ,, String, name, ), {, if, (, renameStrategy, ==]
[String, getName, (, String, id, ,, String, name, ), {, if, (, renameStrategy, ==, RenameStrategy, ., INCONSISTENT, ), {, return]
[String, getName, (, String, id, ,, String, name, ), {, if, (, renameStrategy, ==, RenameStrategy, ., INCONSISTENT, ), {, return]
[String, getName, (, String, id, ,, String, name, ), {, if, (, renameStrategy, ==, RenameStrategy, ., INCONSISTENT, ), {, return]
[(, String, id, ,, String, name, ), {, if, (, renameStrategy, ==, RenameStrategy, ., INCONSISTENT, ), {, return, name, +]
[id, ,, String, name, ), {, if, (, renameStrategy, ==, RenameStrategy, ., INCONSISTENT, ), {, return, name, +, "$", +]
[id, ,, String, name, ), {, if, (, renameStrategy, ==, RenameStrategy, ., INCONSISTENT, ), {, return, name, +, "$", +]
[{, if, (, renameStrategy, ==, RenameStrategy, ., INCONSISTENT, ), {, return, name, +, "$", +, counter, ++, ;, }, return]
[{, if, (, renameStrategy, ==, RenameStrategy, ., INCONSISTENT, ), {, return, name, +, "$", +, counter, ++, ;, }, return]
[(, renameStrategy, ==, RenameStrategy, ., INCONSISTENT, ), {, return, name, +, "$", +, counter, ++, ;, }, return, name, +]
[+, counter, ++, ;, }, return, name, +, "$0", ;, }, @, Override, public, RenameStrategy, getRenameStrategy, (, ), {, return]
[static, class, StableNameSupplier, implements, NameSupplier, {, @, Override, public, String, getName, (, String, id, ,, String, name, ), {, return]
[static, class, StableNameSupplier, implements, NameSupplier, {, @, Override, public, String, getName, (, String, id, ,, String, name, ), {, return]
[NameSupplier, {, @, Override, public, String, getName, (, String, id, ,, String, name, ), {, return, Base64, ., base64EncodeInt, (]
[NameSupplier, {, @, Override, public, String, getName, (, String, id, ,, String, name, ), {, return, Base64, ., base64EncodeInt, (]
[., base64EncodeInt, (, name, ., hashCode, (, ), ), ;, }, @, Override, public, RenameStrategy, getRenameStrategy, (, ), {, return]
[., base64EncodeInt, (, name, ., hashCode, (, ), ), ;, }, @, Override, public, RenameStrategy, getRenameStrategy, (, ), {, return]
[STABLE, ;, }, }, private, NameSupplier, createNameSupplier, (, RenameStrategy, renameStrategy, ,, BiMap, <, String, ,, String, >, previousMappings, ), {]
[}, }, private, NameSupplier, createNameSupplier, (, RenameStrategy, renameStrategy, ,, BiMap, <, String, ,, String, >, previousMappings, ), {, previousMappings, =]
[}, }, private, NameSupplier, createNameSupplier, (, RenameStrategy, renameStrategy, ,, BiMap, <, String, ,, String, >, previousMappings, ), {, previousMappings, =]
[}, }, private, NameSupplier, createNameSupplier, (, RenameStrategy, renameStrategy, ,, BiMap, <, String, ,, String, >, previousMappings, ), {, previousMappings, =]
[private, NameSupplier, createNameSupplier, (, RenameStrategy, renameStrategy, ,, BiMap, <, String, ,, String, >, previousMappings, ), {, previousMappings, =, previousMappings, !=]
[createNameSupplier, (, RenameStrategy, renameStrategy, ,, BiMap, <, String, ,, String, >, previousMappings, ), {, previousMappings, =, previousMappings, !=, null, ?]
[RenameStrategy, renameStrategy, ,, BiMap, <, String, ,, String, >, previousMappings, ), {, previousMappings, =, previousMappings, !=, null, ?, previousMappings, :]
[RenameStrategy, renameStrategy, ,, BiMap, <, String, ,, String, >, previousMappings, ), {, previousMappings, =, previousMappings, !=, null, ?, previousMappings, :]
[=, previousMappings, !=, null, ?, previousMappings, :, ImmutableBiMap, ., <, String, ,, String, >, of, (, ), ;, if, (]
[=, previousMappings, !=, null, ?, previousMappings, :, ImmutableBiMap, ., <, String, ,, String, >, of, (, ), ;, if, (]
[!=, null, ?, previousMappings, :, ImmutableBiMap, ., <, String, ,, String, >, of, (, ), ;, if, (, renameStrategy, ==]
[!=, null, ?, previousMappings, :, ImmutableBiMap, ., <, String, ,, String, >, of, (, ), ;, if, (, renameStrategy, ==]
[., <, String, ,, String, >, of, (, ), ;, if, (, renameStrategy, ==, RenameStrategy, ., STABLE, ), {, return]
[;, if, (, renameStrategy, ==, RenameStrategy, ., STABLE, ), {, return, new, StableNameSupplier, (, ), ;, }, else, if, (]
[==, RenameStrategy, ., STABLE, ), {, return, new, StableNameSupplier, (, ), ;, }, else, if, (, generatePseudoNames, ), {, return]
[STABLE, ), {, return, new, StableNameSupplier, (, ), ;, }, else, if, (, generatePseudoNames, ), {, return, new, PseudoNameSuppier, (]
[), ;, }, else, if, (, generatePseudoNames, ), {, return, new, PseudoNameSuppier, (, renameStrategy, ), ;, }, else, {, return]
[else, if, (, generatePseudoNames, ), {, return, new, PseudoNameSuppier, (, renameStrategy, ), ;, }, else, {, return, new, ObfuscatedNameSuppier, (]
[(, generatePseudoNames, ), {, return, new, PseudoNameSuppier, (, renameStrategy, ), ;, }, else, {, return, new, ObfuscatedNameSuppier, (, renameStrategy, ,]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, JSDocInfo, doc, =]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, JSDocInfo, doc, =]
[t, ,, Node, n, ,, Node, parent, ), {, JSDocInfo, doc, =, n, ., getJSDocInfo, (, ), ;, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, JSDocInfo, doc, =, n, ., getJSDocInfo, (, ), ;, if, (]
[Node, n, ,, Node, parent, ), {, JSDocInfo, doc, =, n, ., getJSDocInfo, (, ), ;, if, (, doc, ==]
[=, n, ., getJSDocInfo, (, ), ;, if, (, doc, ==, null, ), {, return, ;, }, int, numGeneratorAnnotations, =]
[=, n, ., getJSDocInfo, (, ), ;, if, (, doc, ==, null, ), {, return, ;, }, int, numGeneratorAnnotations, =]
[=, n, ., getJSDocInfo, (, ), ;, if, (, doc, ==, null, ), {, return, ;, }, int, numGeneratorAnnotations, =]
[n, ., getJSDocInfo, (, ), ;, if, (, doc, ==, null, ), {, return, ;, }, int, numGeneratorAnnotations, =, (]
[n, ., getJSDocInfo, (, ), ;, if, (, doc, ==, null, ), {, return, ;, }, int, numGeneratorAnnotations, =, (]
[n, ., getJSDocInfo, (, ), ;, if, (, doc, ==, null, ), {, return, ;, }, int, numGeneratorAnnotations, =, (]
[if, (, doc, ==, null, ), {, return, ;, }, int, numGeneratorAnnotations, =, (, doc, ., isConsistentIdGenerator, (, ), ?]
[doc, ==, null, ), {, return, ;, }, int, numGeneratorAnnotations, =, (, doc, ., isConsistentIdGenerator, (, ), ?, 1, :]
[), {, return, ;, }, int, numGeneratorAnnotations, =, (, doc, ., isConsistentIdGenerator, (, ), ?, 1, :, 0, ), +]
[{, return, ;, }, int, numGeneratorAnnotations, =, (, doc, ., isConsistentIdGenerator, (, ), ?, 1, :, 0, ), +, (]
[{, return, ;, }, int, numGeneratorAnnotations, =, (, doc, ., isConsistentIdGenerator, (, ), ?, 1, :, 0, ), +, (]
[{, return, ;, }, int, numGeneratorAnnotations, =, (, doc, ., isConsistentIdGenerator, (, ), ?, 1, :, 0, ), +, (]
[=, (, doc, ., isConsistentIdGenerator, (, ), ?, 1, :, 0, ), +, (, doc, ., isIdGenerator, (, ), ?]
[doc, ., isConsistentIdGenerator, (, ), ?, 1, :, 0, ), +, (, doc, ., isIdGenerator, (, ), ?, 1, :]
[(, ), ?, 1, :, 0, ), +, (, doc, ., isIdGenerator, (, ), ?, 1, :, 0, ), +]
[), ?, 1, :, 0, ), +, (, doc, ., isIdGenerator, (, ), ?, 1, :, 0, ), +, (]
[), ?, 1, :, 0, ), +, (, doc, ., isIdGenerator, (, ), ?, 1, :, 0, ), +, (]
[), ?, 1, :, 0, ), +, (, doc, ., isIdGenerator, (, ), ?, 1, :, 0, ), +, (]
[+, (, doc, ., isIdGenerator, (, ), ?, 1, :, 0, ), +, (, doc, ., isStableIdGenerator, (, ), ?]
[doc, ., isIdGenerator, (, ), ?, 1, :, 0, ), +, (, doc, ., isStableIdGenerator, (, ), ?, 1, :]
[?, 1, :, 0, ), +, (, doc, ., isStableIdGenerator, (, ), ?, 1, :, 0, ), ;, if, (]
[?, 1, :, 0, ), +, (, doc, ., isStableIdGenerator, (, ), ?, 1, :, 0, ), ;, if, (]
[:, 0, ), +, (, doc, ., isStableIdGenerator, (, ), ?, 1, :, 0, ), ;, if, (, numGeneratorAnnotations, ==]
[), ?, 1, :, 0, ), ;, if, (, numGeneratorAnnotations, ==, 0, ), {, return, ;, }, else, if, (]
[), ?, 1, :, 0, ), ;, if, (, numGeneratorAnnotations, ==, 0, ), {, return, ;, }, else, if, (]
[1, :, 0, ), ;, if, (, numGeneratorAnnotations, ==, 0, ), {, return, ;, }, else, if, (, numGeneratorAnnotations, >]
[), ;, if, (, numGeneratorAnnotations, ==, 0, ), {, return, ;, }, else, if, (, numGeneratorAnnotations, >, 1, ), {]
[), ;, if, (, numGeneratorAnnotations, ==, 0, ), {, return, ;, }, else, if, (, numGeneratorAnnotations, >, 1, ), {]
[numGeneratorAnnotations, ==, 0, ), {, return, ;, }, else, if, (, numGeneratorAnnotations, >, 1, ), {, compiler, ., report, (]
[numGeneratorAnnotations, ==, 0, ), {, return, ;, }, else, if, (, numGeneratorAnnotations, >, 1, ), {, compiler, ., report, (]
[{, return, ;, }, else, if, (, numGeneratorAnnotations, >, 1, ), {, compiler, ., report, (, t, ., makeError, (]
[;, }, else, if, (, numGeneratorAnnotations, >, 1, ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_GENERATOR_TYPE, ), ), ;, }, String, name, =]
[report, (, t, ., makeError, (, n, ,, CONFLICTING_GENERATOR_TYPE, ), ), ;, }, String, name, =, null, ;, if, (]
[report, (, t, ., makeError, (, n, ,, CONFLICTING_GENERATOR_TYPE, ), ), ;, }, String, name, =, null, ;, if, (]
[,, CONFLICTING_GENERATOR_TYPE, ), ), ;, }, String, name, =, null, ;, if, (, n, ., isAssign, (, ), ), {]
[), ), ;, }, String, name, =, null, ;, if, (, n, ., isAssign, (, ), ), {, name, =]
[), ), ;, }, String, name, =, null, ;, if, (, n, ., isAssign, (, ), ), {, name, =]
[), ), ;, }, String, name, =, null, ;, if, (, n, ., isAssign, (, ), ), {, name, =]
[(, ), ), {, name, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, else, if, (]
[(, ), ), {, name, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, else, if, (]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, else, if, (, n, ., isVar, (, ), ), {]
[(, ), ., getQualifiedName, (, ), ;, }, else, if, (, n, ., isVar, (, ), ), {, name, =]
[(, ), ., getQualifiedName, (, ), ;, }, else, if, (, n, ., isVar, (, ), ), {, name, =]
[(, ), ., getQualifiedName, (, ), ;, }, else, if, (, n, ., isVar, (, ), ), {, name, =]
[(, ), ), {, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, }, else, if, (]
[(, ), ), {, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, }, else, if, (]
[., getFirstChild, (, ), ., getString, (, ), ;, }, else, if, (, n, ., isFunction, (, ), ), {]
[(, ), ., getString, (, ), ;, }, else, if, (, n, ., isFunction, (, ), ), {, name, =]
[(, ), ., getString, (, ), ;, }, else, if, (, n, ., isFunction, (, ), ), {, name, =]
[(, ), ., getString, (, ), ;, }, else, if, (, n, ., isFunction, (, ), ), {, name, =]
[., isFunction, (, ), ), {, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[., isFunction, (, ), ), {, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[., getString, (, ), ;, if, (, name, ., isEmpty, (, ), ), {, return, ;, }, }, if, (]
[., getString, (, ), ;, if, (, name, ., isEmpty, (, ), ), {, return, ;, }, }, if, (]
[name, ., isEmpty, (, ), ), {, return, ;, }, }, if, (, doc, ., isConsistentIdGenerator, (, ), ), {]
[name, ., isEmpty, (, ), ), {, return, ;, }, }, if, (, doc, ., isConsistentIdGenerator, (, ), ), {]
[), ), {, return, ;, }, }, if, (, doc, ., isConsistentIdGenerator, (, ), ), {, consistNameMap, ., put, (]
[{, return, ;, }, }, if, (, doc, ., isConsistentIdGenerator, (, ), ), {, consistNameMap, ., put, (, name, ,]
[{, return, ;, }, }, if, (, doc, ., isConsistentIdGenerator, (, ), ), {, consistNameMap, ., put, (, name, ,]
[), {, consistNameMap, ., put, (, name, ,, Maps, ., <, String, ,, String, >, newLinkedHashMap, (, ), ), ;]
[), {, consistNameMap, ., put, (, name, ,, Maps, ., <, String, ,, String, >, newLinkedHashMap, (, ), ), ;]
[put, (, name, ,, Maps, ., <, String, ,, String, >, newLinkedHashMap, (, ), ), ;, nameGenerators, ., put, (]
[name, ,, Maps, ., <, String, ,, String, >, newLinkedHashMap, (, ), ), ;, nameGenerators, ., put, (, name, ,]
[Maps, ., <, String, ,, String, >, newLinkedHashMap, (, ), ), ;, nameGenerators, ., put, (, name, ,, createNameSupplier, (]
[Maps, ., <, String, ,, String, >, newLinkedHashMap, (, ), ), ;, nameGenerators, ., put, (, name, ,, createNameSupplier, (]
[,, String, >, newLinkedHashMap, (, ), ), ;, nameGenerators, ., put, (, name, ,, createNameSupplier, (, RenameStrategy, ., CONSISTENT, ,]
[,, String, >, newLinkedHashMap, (, ), ), ;, nameGenerators, ., put, (, name, ,, createNameSupplier, (, RenameStrategy, ., CONSISTENT, ,]
[(, ), ), ;, nameGenerators, ., put, (, name, ,, createNameSupplier, (, RenameStrategy, ., CONSISTENT, ,, previousMap, ., get, (]
[,, createNameSupplier, (, RenameStrategy, ., CONSISTENT, ,, previousMap, ., get, (, name, ), ), ), ;, }, else, if, (]
[,, createNameSupplier, (, RenameStrategy, ., CONSISTENT, ,, previousMap, ., get, (, name, ), ), ), ;, }, else, if, (]
[previousMap, ., get, (, name, ), ), ), ;, }, else, if, (, doc, ., isStableIdGenerator, (, ), ), {]
[previousMap, ., get, (, name, ), ), ), ;, }, else, if, (, doc, ., isStableIdGenerator, (, ), ), {]
[name, ), ), ), ;, }, else, if, (, doc, ., isStableIdGenerator, (, ), ), {, nameGenerators, ., put, (]
[), ), ;, }, else, if, (, doc, ., isStableIdGenerator, (, ), ), {, nameGenerators, ., put, (, name, ,]
[;, }, else, if, (, doc, ., isStableIdGenerator, (, ), ), {, nameGenerators, ., put, (, name, ,, createNameSupplier, (]
[;, }, else, if, (, doc, ., isStableIdGenerator, (, ), ), {, nameGenerators, ., put, (, name, ,, createNameSupplier, (]
[(, doc, ., isStableIdGenerator, (, ), ), {, nameGenerators, ., put, (, name, ,, createNameSupplier, (, RenameStrategy, ., STABLE, ,]
[(, doc, ., isStableIdGenerator, (, ), ), {, nameGenerators, ., put, (, name, ,, createNameSupplier, (, RenameStrategy, ., STABLE, ,]
[(, ), ), {, nameGenerators, ., put, (, name, ,, createNameSupplier, (, RenameStrategy, ., STABLE, ,, previousMap, ., get, (]
[name, ,, createNameSupplier, (, RenameStrategy, ., STABLE, ,, previousMap, ., get, (, name, ), ), ), ;, }, else, {]
[name, ,, createNameSupplier, (, RenameStrategy, ., STABLE, ,, previousMap, ., get, (, name, ), ), ), ;, }, else, {]
[RenameStrategy, ., STABLE, ,, previousMap, ., get, (, name, ), ), ), ;, }, else, {, nameGenerators, ., put, (]
[STABLE, ,, previousMap, ., get, (, name, ), ), ), ;, }, else, {, nameGenerators, ., put, (, name, ,]
[previousMap, ., get, (, name, ), ), ), ;, }, else, {, nameGenerators, ., put, (, name, ,, createNameSupplier, (]
[previousMap, ., get, (, name, ), ), ), ;, }, else, {, nameGenerators, ., put, (, name, ,, createNameSupplier, (]
[name, ), ), ), ;, }, else, {, nameGenerators, ., put, (, name, ,, createNameSupplier, (, RenameStrategy, ., INCONSISTENT, ,]
[name, ), ), ), ;, }, else, {, nameGenerators, ., put, (, name, ,, createNameSupplier, (, RenameStrategy, ., INCONSISTENT, ,]
[;, }, else, {, nameGenerators, ., put, (, name, ,, createNameSupplier, (, RenameStrategy, ., INCONSISTENT, ,, previousMap, ., get, (]
[put, (, name, ,, createNameSupplier, (, RenameStrategy, ., INCONSISTENT, ,, previousMap, ., get, (, name, ), ), ), ;, }]
[put, (, name, ,, createNameSupplier, (, RenameStrategy, ., INCONSISTENT, ,, previousMap, ., get, (, name, ), ), ), ;, }]
[createNameSupplier, (, RenameStrategy, ., INCONSISTENT, ,, previousMap, ., get, (, name, ), ), ), ;, }, idGeneratorMaps, ., put, (]
[RenameStrategy, ., INCONSISTENT, ,, previousMap, ., get, (, name, ), ), ), ;, }, idGeneratorMaps, ., put, (, name, ,]
[RenameStrategy, ., INCONSISTENT, ,, previousMap, ., get, (, name, ), ), ), ;, }, idGeneratorMaps, ., put, (, name, ,]
[newLinkedHashMap, (, ), ), ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[newLinkedHashMap, (, ), ), ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GatherGenerators, (, ), ), ;, if, (]
[root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GatherGenerators, (, ), ), ;, if, (, !]
[root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GatherGenerators, (, ), ), ;, if, (, !]
[compiler, ,, root, ,, new, GatherGenerators, (, ), ), ;, if, (, !, nameGenerators, ., isEmpty, (, ), ), {]
[compiler, ,, root, ,, new, GatherGenerators, (, ), ), ;, if, (, !, nameGenerators, ., isEmpty, (, ), ), {]
[new, GatherGenerators, (, ), ), ;, if, (, !, nameGenerators, ., isEmpty, (, ), ), {, NodeTraversal, ., traverse, (]
[(, ), ), ;, if, (, !, nameGenerators, ., isEmpty, (, ), ), {, NodeTraversal, ., traverse, (, compiler, ,]
[), ;, if, (, !, nameGenerators, ., isEmpty, (, ), ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[Node, parent, ), {, if, (, !, n, ., isCall, (, ), ), {, return, ;, }, String, callName, =]
[Node, parent, ), {, if, (, !, n, ., isCall, (, ), ), {, return, ;, }, String, callName, =]
[Node, parent, ), {, if, (, !, n, ., isCall, (, ), ), {, return, ;, }, String, callName, =]
[{, return, ;, }, String, callName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, NameSupplier, nameGenerator, =]
[{, return, ;, }, String, callName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, NameSupplier, nameGenerator, =]
[String, callName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, NameSupplier, nameGenerator, =, nameGenerators, ., get, (]
[getFirstChild, (, ), ., getQualifiedName, (, ), ;, NameSupplier, nameGenerator, =, nameGenerators, ., get, (, callName, ), ;, if, (]
[getFirstChild, (, ), ., getQualifiedName, (, ), ;, NameSupplier, nameGenerator, =, nameGenerators, ., get, (, callName, ), ;, if, (]
[), ., getQualifiedName, (, ), ;, NameSupplier, nameGenerator, =, nameGenerators, ., get, (, callName, ), ;, if, (, nameGenerator, ==]
[=, nameGenerators, ., get, (, callName, ), ;, if, (, nameGenerator, ==, null, ), {, return, ;, }, if, (]
[=, nameGenerators, ., get, (, callName, ), ;, if, (, nameGenerator, ==, null, ), {, return, ;, }, if, (]
[nameGenerators, ., get, (, callName, ), ;, if, (, nameGenerator, ==, null, ), {, return, ;, }, if, (, !]
[nameGenerators, ., get, (, callName, ), ;, if, (, nameGenerator, ==, null, ), {, return, ;, }, if, (, !]
[;, if, (, nameGenerator, ==, null, ), {, return, ;, }, if, (, !, t, ., inGlobalScope, (, ), &&]
[;, if, (, nameGenerator, ==, null, ), {, return, ;, }, if, (, !, t, ., inGlobalScope, (, ), &&]
[;, if, (, nameGenerator, ==, null, ), {, return, ;, }, if, (, !, t, ., inGlobalScope, (, ), &&]
[), {, return, ;, }, if, (, !, t, ., inGlobalScope, (, ), &&, nameGenerator, ., getRenameStrategy, (, ), ==]
[), {, return, ;, }, if, (, !, t, ., inGlobalScope, (, ), &&, nameGenerator, ., getRenameStrategy, (, ), ==]
[if, (, !, t, ., inGlobalScope, (, ), &&, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., INCONSISTENT, ), {]
[if, (, !, t, ., inGlobalScope, (, ), &&, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., INCONSISTENT, ), {]
[., inGlobalScope, (, ), &&, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., INCONSISTENT, ), {, compiler, ., report, (]
[., inGlobalScope, (, ), &&, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., INCONSISTENT, ), {, compiler, ., report, (]
[&&, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., INCONSISTENT, ), {, compiler, ., report, (, t, ., makeError, (]
[., getRenameStrategy, (, ), ==, RenameStrategy, ., INCONSISTENT, ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[{, compiler, ., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_ID_GENERATOR_CALL, ), ), ;, return, ;, }, if, (]
[{, compiler, ., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_ID_GENERATOR_CALL, ), ), ;, return, ;, }, if, (]
[{, compiler, ., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_ID_GENERATOR_CALL, ), ), ;, return, ;, }, if, (]
[., makeError, (, n, ,, NON_GLOBAL_ID_GENERATOR_CALL, ), ), ;, return, ;, }, if, (, nameGenerator, ., getRenameStrategy, (, ), ==]
[., makeError, (, n, ,, NON_GLOBAL_ID_GENERATOR_CALL, ), ), ;, return, ;, }, if, (, nameGenerator, ., getRenameStrategy, (, ), ==]
[;, }, if, (, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., INCONSISTENT, ), {, for, (, Node, ancestor, :]
[;, }, if, (, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., INCONSISTENT, ), {, for, (, Node, ancestor, :]
[==, RenameStrategy, ., INCONSISTENT, ), {, for, (, Node, ancestor, :, n, ., getAncestors, (, ), ), {, if, (]
[==, RenameStrategy, ., INCONSISTENT, ), {, for, (, Node, ancestor, :, n, ., getAncestors, (, ), ), {, if, (]
[), {, for, (, Node, ancestor, :, n, ., getAncestors, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (]
[Node, ancestor, :, n, ., getAncestors, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (, ancestor, ), ), {]
[Node, ancestor, :, n, ., getAncestors, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (, ancestor, ), ), {]
[., getAncestors, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (, ancestor, ), ), {, compiler, ., report, (]
[., getAncestors, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (, ancestor, ), ), {, compiler, ., report, (]
[), {, if, (, NodeUtil, ., isControlStructure, (, ancestor, ), ), {, compiler, ., report, (, t, ., makeError, (]
[if, (, NodeUtil, ., isControlStructure, (, ancestor, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[report, (, t, ., makeError, (, n, ,, CONDITIONAL_ID_GENERATOR_CALL, ), ), ;, return, ;, }, }, }, Node, id, =]
[report, (, t, ., makeError, (, n, ,, CONDITIONAL_ID_GENERATOR_CALL, ), ), ;, return, ;, }, }, }, Node, id, =]
[report, (, t, ., makeError, (, n, ,, CONDITIONAL_ID_GENERATOR_CALL, ), ), ;, return, ;, }, }, }, Node, id, =]
[return, ;, }, }, }, Node, id, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[;, }, }, }, Node, id, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, !]
[;, }, }, }, Node, id, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, !]
[(, !, id, ., isString, (, ), ), {, return, ;, }, Map, <, String, ,, String, >, idGeneratorMap, =]
[(, !, id, ., isString, (, ), ), {, return, ;, }, Map, <, String, ,, String, >, idGeneratorMap, =]
[isString, (, ), ), {, return, ;, }, Map, <, String, ,, String, >, idGeneratorMap, =, idGeneratorMaps, ., get, (]
[;, }, Map, <, String, ,, String, >, idGeneratorMap, =, idGeneratorMaps, ., get, (, callName, ), ;, String, rename, =]
[,, String, >, idGeneratorMap, =, idGeneratorMaps, ., get, (, callName, ), ;, String, rename, =, null, ;, String, name, =]
[,, String, >, idGeneratorMap, =, idGeneratorMaps, ., get, (, callName, ), ;, String, rename, =, null, ;, String, name, =]
[callName, ), ;, String, rename, =, null, ;, String, name, =, id, ., getString, (, ), ;, String, instanceId, =]
[;, String, rename, =, null, ;, String, name, =, id, ., getString, (, ), ;, String, instanceId, =, getIdForGeneratorNode, (]
[;, String, rename, =, null, ;, String, name, =, id, ., getString, (, ), ;, String, instanceId, =, getIdForGeneratorNode, (]
[;, String, rename, =, null, ;, String, name, =, id, ., getString, (, ), ;, String, instanceId, =, getIdForGeneratorNode, (]
[String, name, =, id, ., getString, (, ), ;, String, instanceId, =, getIdForGeneratorNode, (, nameGenerator, ., getRenameStrategy, (, ), ==]
[String, name, =, id, ., getString, (, ), ;, String, instanceId, =, getIdForGeneratorNode, (, nameGenerator, ., getRenameStrategy, (, ), ==]
[., getString, (, ), ;, String, instanceId, =, getIdForGeneratorNode, (, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., CONSISTENT, ,]
[String, instanceId, =, getIdForGeneratorNode, (, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., CONSISTENT, ,, id, ), ;, if, (]
[String, instanceId, =, getIdForGeneratorNode, (, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., CONSISTENT, ,, id, ), ;, if, (]
[String, instanceId, =, getIdForGeneratorNode, (, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., CONSISTENT, ,, id, ), ;, if, (]
[., getRenameStrategy, (, ), ==, RenameStrategy, ., CONSISTENT, ,, id, ), ;, if, (, nameGenerator, ., getRenameStrategy, (, ), ==]
[., getRenameStrategy, (, ), ==, RenameStrategy, ., CONSISTENT, ,, id, ), ;, if, (, nameGenerator, ., getRenameStrategy, (, ), ==]
[(, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., CONSISTENT, ), {, Map, <, String, ,, String, >, entry, =]
[(, nameGenerator, ., getRenameStrategy, (, ), ==, RenameStrategy, ., CONSISTENT, ), {, Map, <, String, ,, String, >, entry, =]
[(, ), ==, RenameStrategy, ., CONSISTENT, ), {, Map, <, String, ,, String, >, entry, =, consistNameMap, ., get, (]
[RenameStrategy, ., CONSISTENT, ), {, Map, <, String, ,, String, >, entry, =, consistNameMap, ., get, (, callName, ), ;]
[CONSISTENT, ), {, Map, <, String, ,, String, >, entry, =, consistNameMap, ., get, (, callName, ), ;, rename, =]
[CONSISTENT, ), {, Map, <, String, ,, String, >, entry, =, consistNameMap, ., get, (, callName, ), ;, rename, =]
[<, String, ,, String, >, entry, =, consistNameMap, ., get, (, callName, ), ;, rename, =, entry, ., get, (]
[entry, =, consistNameMap, ., get, (, callName, ), ;, rename, =, entry, ., get, (, instanceId, ), ;, if, (]
[entry, =, consistNameMap, ., get, (, callName, ), ;, rename, =, entry, ., get, (, instanceId, ), ;, if, (]
[consistNameMap, ., get, (, callName, ), ;, rename, =, entry, ., get, (, instanceId, ), ;, if, (, rename, ==]
[(, callName, ), ;, rename, =, entry, ., get, (, instanceId, ), ;, if, (, rename, ==, null, ), {]
[), ;, rename, =, entry, ., get, (, instanceId, ), ;, if, (, rename, ==, null, ), {, rename, =]
[), ;, rename, =, entry, ., get, (, instanceId, ), ;, if, (, rename, ==, null, ), {, rename, =]
[entry, ., get, (, instanceId, ), ;, if, (, rename, ==, null, ), {, rename, =, nameGenerator, ., getName, (]
[get, (, instanceId, ), ;, if, (, rename, ==, null, ), {, rename, =, nameGenerator, ., getName, (, instanceId, ,]
[), ;, if, (, rename, ==, null, ), {, rename, =, nameGenerator, ., getName, (, instanceId, ,, name, ), ;]
[), ;, if, (, rename, ==, null, ), {, rename, =, nameGenerator, ., getName, (, instanceId, ,, name, ), ;]
[rename, ==, null, ), {, rename, =, nameGenerator, ., getName, (, instanceId, ,, name, ), ;, entry, ., put, (]
[null, ), {, rename, =, nameGenerator, ., getName, (, instanceId, ,, name, ), ;, entry, ., put, (, instanceId, ,]
[getName, (, instanceId, ,, name, ), ;, entry, ., put, (, instanceId, ,, rename, ), ;, }, }, else, {]
[instanceId, ,, name, ), ;, entry, ., put, (, instanceId, ,, rename, ), ;, }, }, else, {, rename, =]
[instanceId, ,, name, ), ;, entry, ., put, (, instanceId, ,, rename, ), ;, }, }, else, {, rename, =]
[;, entry, ., put, (, instanceId, ,, rename, ), ;, }, }, else, {, rename, =, nameGenerator, ., getName, (]
[., put, (, instanceId, ,, rename, ), ;, }, }, else, {, rename, =, nameGenerator, ., getName, (, instanceId, ,]
[,, rename, ), ;, }, }, else, {, rename, =, nameGenerator, ., getName, (, instanceId, ,, name, ), ;, }]
[,, rename, ), ;, }, }, else, {, rename, =, nameGenerator, ., getName, (, instanceId, ,, name, ), ;, }]
[}, }, else, {, rename, =, nameGenerator, ., getName, (, instanceId, ,, name, ), ;, }, parent, ., replaceChild, (]
[else, {, rename, =, nameGenerator, ., getName, (, instanceId, ,, name, ), ;, }, parent, ., replaceChild, (, n, ,]
[else, {, rename, =, nameGenerator, ., getName, (, instanceId, ,, name, ), ;, }, parent, ., replaceChild, (, n, ,]
[nameGenerator, ., getName, (, instanceId, ,, name, ), ;, }, parent, ., replaceChild, (, n, ,, IR, ., string, (]
[instanceId, ,, name, ), ;, }, parent, ., replaceChild, (, n, ,, IR, ., string, (, rename, ), ), ;]
[instanceId, ,, name, ), ;, }, parent, ., replaceChild, (, n, ,, IR, ., string, (, rename, ), ), ;]
[;, }, parent, ., replaceChild, (, n, ,, IR, ., string, (, rename, ), ), ;, idGeneratorMap, ., put, (]
[parent, ., replaceChild, (, n, ,, IR, ., string, (, rename, ), ), ;, idGeneratorMap, ., put, (, rename, ,]
[(, n, ,, IR, ., string, (, rename, ), ), ;, idGeneratorMap, ., put, (, rename, ,, instanceId, ), ;]
[(, n, ,, IR, ., string, (, rename, ), ), ;, idGeneratorMap, ., put, (, rename, ,, instanceId, ), ;]
[instanceId, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, public, String, getSerializedIdMappings, (, ), {, StringBuilder, sb, =]
[(, ), ;, for, (, Map, ., Entry, <, String, ,, Map, <, String, ,, String, >, >, replacements, :]
[(, ), ;, for, (, Map, ., Entry, <, String, ,, Map, <, String, ,, String, >, >, replacements, :]
[String, ,, Map, <, String, ,, String, >, >, replacements, :, idGeneratorMaps, ., entrySet, (, ), ), {, if, (]
[,, Map, <, String, ,, String, >, >, replacements, :, idGeneratorMaps, ., entrySet, (, ), ), {, if, (, !]
[,, Map, <, String, ,, String, >, >, replacements, :, idGeneratorMaps, ., entrySet, (, ), ), {, if, (, !]
[,, Map, <, String, ,, String, >, >, replacements, :, idGeneratorMaps, ., entrySet, (, ), ), {, if, (, !]
[., entrySet, (, ), ), {, if, (, !, replacements, ., getValue, (, ), ., isEmpty, (, ), ), {]
[., entrySet, (, ), ), {, if, (, !, replacements, ., getValue, (, ), ., isEmpty, (, ), ), {]
[), {, if, (, !, replacements, ., getValue, (, ), ., isEmpty, (, ), ), {, sb, ., append, (]
[(, !, replacements, ., getValue, (, ), ., isEmpty, (, ), ), {, sb, ., append, (, "[", ), ;]
[(, !, replacements, ., getValue, (, ), ., isEmpty, (, ), ), {, sb, ., append, (, "[", ), ;]
[getValue, (, ), ., isEmpty, (, ), ), {, sb, ., append, (, "[", ), ;, sb, ., append, (]
[getValue, (, ), ., isEmpty, (, ), ), {, sb, ., append, (, "[", ), ;, sb, ., append, (]
[), {, sb, ., append, (, "[", ), ;, sb, ., append, (, replacements, ., getKey, (, ), ), ;]
[), {, sb, ., append, (, "[", ), ;, sb, ., append, (, replacements, ., getKey, (, ), ), ;]
[append, (, "[", ), ;, sb, ., append, (, replacements, ., getKey, (, ), ), ;, sb, ., append, (]
[;, sb, ., append, (, "]\n\n", ), ;, for, (, Map, ., Entry, <, String, ,, String, >, replacement, :]
[;, sb, ., append, (, "]\n\n", ), ;, for, (, Map, ., Entry, <, String, ,, String, >, replacement, :]
[;, sb, ., append, (, "]\n\n", ), ;, for, (, Map, ., Entry, <, String, ,, String, >, replacement, :]
[., Entry, <, String, ,, String, >, replacement, :, replacements, ., getValue, (, ), ., entrySet, (, ), ), {]
[., Entry, <, String, ,, String, >, replacement, :, replacements, ., getValue, (, ), ., entrySet, (, ), ), {]
[,, String, >, replacement, :, replacements, ., getValue, (, ), ., entrySet, (, ), ), {, sb, ., append, (]
[,, String, >, replacement, :, replacements, ., getValue, (, ), ., entrySet, (, ), ), {, sb, ., append, (]
[getValue, (, ), ., entrySet, (, ), ), {, sb, ., append, (, replacement, ., getKey, (, ), ), ;]
[getValue, (, ), ., entrySet, (, ), ), {, sb, ., append, (, replacement, ., getKey, (, ), ), ;]
[entrySet, (, ), ), {, sb, ., append, (, replacement, ., getKey, (, ), ), ;, sb, ., append, (]
[), {, sb, ., append, (, replacement, ., getKey, (, ), ), ;, sb, ., append, (, ':', ), ;]
[), {, sb, ., append, (, replacement, ., getKey, (, ), ), ;, sb, ., append, (, ':', ), ;]
[append, (, replacement, ., getKey, (, ), ), ;, sb, ., append, (, ':', ), ;, sb, ., append, (]
[append, (, replacement, ., getKey, (, ), ), ;, sb, ., append, (, ':', ), ;, sb, ., append, (]
[), ;, sb, ., append, (, ':', ), ;, sb, ., append, (, replacement, ., getValue, (, ), ), ;]
[), ;, sb, ., append, (, ':', ), ;, sb, ., append, (, replacement, ., getValue, (, ), ), ;]
[append, (, ':', ), ;, sb, ., append, (, replacement, ., getValue, (, ), ), ;, sb, ., append, (]
[;, sb, ., append, (, replacement, ., getValue, (, ), ), ;, sb, ., append, (, "\n", ), ;, }]
[;, sb, ., append, (, replacement, ., getValue, (, ), ), ;, sb, ., append, (, "\n", ), ;, }]
[(, replacement, ., getValue, (, ), ), ;, sb, ., append, (, "\n", ), ;, }, sb, ., append, (]
[), ;, sb, ., append, (, "\n", ), ;, }, sb, ., append, (, "\n", ), ;, }, }, return]
[), ;, sb, ., append, (, "\n", ), ;, }, sb, ., append, (, "\n", ), ;, }, }, return]
[private, Map, <, String, ,, BiMap, <, String, ,, String, >, >, parsePreviousResults, (, String, serializedMap, ), {, if, (]
[private, Map, <, String, ,, BiMap, <, String, ,, String, >, >, parsePreviousResults, (, String, serializedMap, ), {, if, (]
[private, Map, <, String, ,, BiMap, <, String, ,, String, >, >, parsePreviousResults, (, String, serializedMap, ), {, if, (]
[<, String, ,, BiMap, <, String, ,, String, >, >, parsePreviousResults, (, String, serializedMap, ), {, if, (, serializedMap, ==]
[,, BiMap, <, String, ,, String, >, >, parsePreviousResults, (, String, serializedMap, ), {, if, (, serializedMap, ==, null, ||]
[,, BiMap, <, String, ,, String, >, >, parsePreviousResults, (, String, serializedMap, ), {, if, (, serializedMap, ==, null, ||]
[parsePreviousResults, (, String, serializedMap, ), {, if, (, serializedMap, ==, null, ||, serializedMap, ., isEmpty, (, ), ), {, return]
[parsePreviousResults, (, String, serializedMap, ), {, if, (, serializedMap, ==, null, ||, serializedMap, ., isEmpty, (, ), ), {, return]
[Collections, ., emptyMap, (, ), ;, }, Map, <, String, ,, BiMap, <, String, ,, String, >, >, resultMap, =]
[Collections, ., emptyMap, (, ), ;, }, Map, <, String, ,, BiMap, <, String, ,, String, >, >, resultMap, =]
[String, ,, BiMap, <, String, ,, String, >, >, resultMap, =, Maps, ., newHashMap, (, ), ;, BufferedReader, reader, =]
[<, String, ,, String, >, >, resultMap, =, Maps, ., newHashMap, (, ), ;, BufferedReader, reader, =, new, BufferedReader, (]
[String, >, >, resultMap, =, Maps, ., newHashMap, (, ), ;, BufferedReader, reader, =, new, BufferedReader, (, new, StringReader, (]
[reader, =, new, BufferedReader, (, new, StringReader, (, serializedMap, ), ), ;, BiMap, <, String, ,, String, >, currentSectionMap, =]
[serializedMap, ), ), ;, BiMap, <, String, ,, String, >, currentSectionMap, =, null, ;, String, line, ;, int, lineIndex, =]
[String, ,, String, >, currentSectionMap, =, null, ;, String, line, ;, int, lineIndex, =, 0, ;, try, {, while, (]
[String, ,, String, >, currentSectionMap, =, null, ;, String, line, ;, int, lineIndex, =, 0, ;, try, {, while, (]
[,, String, >, currentSectionMap, =, null, ;, String, line, ;, int, lineIndex, =, 0, ;, try, {, while, (, (]
[>, currentSectionMap, =, null, ;, String, line, ;, int, lineIndex, =, 0, ;, try, {, while, (, (, line, =]
[>, currentSectionMap, =, null, ;, String, line, ;, int, lineIndex, =, 0, ;, try, {, while, (, (, line, =]
[;, int, lineIndex, =, 0, ;, try, {, while, (, (, line, =, reader, ., readLine, (, ), ), !=]
[=, 0, ;, try, {, while, (, (, line, =, reader, ., readLine, (, ), ), !=, null, ), {]
[=, 0, ;, try, {, while, (, (, line, =, reader, ., readLine, (, ), ), !=, null, ), {]
[while, (, (, line, =, reader, ., readLine, (, ), ), !=, null, ), {, lineIndex, ++, ;, if, (]
[while, (, (, line, =, reader, ., readLine, (, ), ), !=, null, ), {, lineIndex, ++, ;, if, (]
[null, ), {, lineIndex, ++, ;, if, (, line, ., isEmpty, (, ), ), {, continue, ;, }, if, (]
[null, ), {, lineIndex, ++, ;, if, (, line, ., isEmpty, (, ), ), {, continue, ;, }, if, (]
[null, ), {, lineIndex, ++, ;, if, (, line, ., isEmpty, (, ), ), {, continue, ;, }, if, (]
[++, ;, if, (, line, ., isEmpty, (, ), ), {, continue, ;, }, if, (, line, ., charAt, (]
[(, line, ., isEmpty, (, ), ), {, continue, ;, }, if, (, line, ., charAt, (, 0, ), ==]
[), {, continue, ;, }, if, (, line, ., charAt, (, 0, ), ==, '[', ), {, String, currentSection, =]
[), {, continue, ;, }, if, (, line, ., charAt, (, 0, ), ==, '[', ), {, String, currentSection, =]
[}, if, (, line, ., charAt, (, 0, ), ==, '[', ), {, String, currentSection, =, line, ., substring, (]
[(, line, ., charAt, (, 0, ), ==, '[', ), {, String, currentSection, =, line, ., substring, (, 1, ,]
[(, line, ., charAt, (, 0, ), ==, '[', ), {, String, currentSection, =, line, ., substring, (, 1, ,]
[(, line, ., charAt, (, 0, ), ==, '[', ), {, String, currentSection, =, line, ., substring, (, 1, ,]
[), ==, '[', ), {, String, currentSection, =, line, ., substring, (, 1, ,, line, ., length, (, ), -]
[), {, String, currentSection, =, line, ., substring, (, 1, ,, line, ., length, (, ), -, 1, ), ;]
[String, currentSection, =, line, ., substring, (, 1, ,, line, ., length, (, ), -, 1, ), ;, currentSectionMap, =]
[String, currentSection, =, line, ., substring, (, 1, ,, line, ., length, (, ), -, 1, ), ;, currentSectionMap, =]
[., substring, (, 1, ,, line, ., length, (, ), -, 1, ), ;, currentSectionMap, =, resultMap, ., get, (]
[line, ., length, (, ), -, 1, ), ;, currentSectionMap, =, resultMap, ., get, (, currentSection, ), ;, if, (]
[line, ., length, (, ), -, 1, ), ;, currentSectionMap, =, resultMap, ., get, (, currentSection, ), ;, if, (]
[length, (, ), -, 1, ), ;, currentSectionMap, =, resultMap, ., get, (, currentSection, ), ;, if, (, currentSectionMap, ==]
[-, 1, ), ;, currentSectionMap, =, resultMap, ., get, (, currentSection, ), ;, if, (, currentSectionMap, ==, null, ), {]
[), ;, currentSectionMap, =, resultMap, ., get, (, currentSection, ), ;, if, (, currentSectionMap, ==, null, ), {, currentSectionMap, =]
[), ;, currentSectionMap, =, resultMap, ., get, (, currentSection, ), ;, if, (, currentSectionMap, ==, null, ), {, currentSectionMap, =]
[get, (, currentSection, ), ;, if, (, currentSectionMap, ==, null, ), {, currentSectionMap, =, HashBiMap, ., create, (, ), ;]
[get, (, currentSection, ), ;, if, (, currentSectionMap, ==, null, ), {, currentSectionMap, =, HashBiMap, ., create, (, ), ;]
[;, if, (, currentSectionMap, ==, null, ), {, currentSectionMap, =, HashBiMap, ., create, (, ), ;, resultMap, ., put, (]
[(, currentSectionMap, ==, null, ), {, currentSectionMap, =, HashBiMap, ., create, (, ), ;, resultMap, ., put, (, currentSection, ,]
[currentSectionMap, =, HashBiMap, ., create, (, ), ;, resultMap, ., put, (, currentSection, ,, currentSectionMap, ), ;, }, else, {]
[HashBiMap, ., create, (, ), ;, resultMap, ., put, (, currentSection, ,, currentSectionMap, ), ;, }, else, {, reportInvalidLine, (]
[create, (, ), ;, resultMap, ., put, (, currentSection, ,, currentSectionMap, ), ;, }, else, {, reportInvalidLine, (, line, ,]
[resultMap, ., put, (, currentSection, ,, currentSectionMap, ), ;, }, else, {, reportInvalidLine, (, line, ,, lineIndex, ), ;, return]
[resultMap, ., put, (, currentSection, ,, currentSectionMap, ), ;, }, else, {, reportInvalidLine, (, line, ,, lineIndex, ), ;, return]
[(, line, ,, lineIndex, ), ;, return, Collections, ., emptyMap, (, ), ;, }, }, else, {, int, split, =]
[(, line, ,, lineIndex, ), ;, return, Collections, ., emptyMap, (, ), ;, }, }, else, {, int, split, =]
[), ;, return, Collections, ., emptyMap, (, ), ;, }, }, else, {, int, split, =, line, ., indexOf, (]
[emptyMap, (, ), ;, }, }, else, {, int, split, =, line, ., indexOf, (, ':', ), ;, if, (]
[emptyMap, (, ), ;, }, }, else, {, int, split, =, line, ., indexOf, (, ':', ), ;, if, (]
[), ;, }, }, else, {, int, split, =, line, ., indexOf, (, ':', ), ;, if, (, split, !=]
[;, }, }, else, {, int, split, =, line, ., indexOf, (, ':', ), ;, if, (, split, !=, -]
[split, =, line, ., indexOf, (, ':', ), ;, if, (, split, !=, -, 1, ), {, String, name, =]
[split, =, line, ., indexOf, (, ':', ), ;, if, (, split, !=, -, 1, ), {, String, name, =]
[indexOf, (, ':', ), ;, if, (, split, !=, -, 1, ), {, String, name, =, line, ., substring, (]
[':', ), ;, if, (, split, !=, -, 1, ), {, String, name, =, line, ., substring, (, 0, ,]
[!=, -, 1, ), {, String, name, =, line, ., substring, (, 0, ,, split, ), ;, String, location, =]
[!=, -, 1, ), {, String, name, =, line, ., substring, (, 0, ,, split, ), ;, String, location, =]
[{, String, name, =, line, ., substring, (, 0, ,, split, ), ;, String, location, =, line, ., substring, (]
[{, String, name, =, line, ., substring, (, 0, ,, split, ), ;, String, location, =, line, ., substring, (]
[name, =, line, ., substring, (, 0, ,, split, ), ;, String, location, =, line, ., substring, (, split, +]
[line, ., substring, (, 0, ,, split, ), ;, String, location, =, line, ., substring, (, split, +, 1, ,]
[line, ., substring, (, 0, ,, split, ), ;, String, location, =, line, ., substring, (, split, +, 1, ,]
[), ;, String, location, =, line, ., substring, (, split, +, 1, ,, line, ., length, (, ), ), ;]
[), ;, String, location, =, line, ., substring, (, split, +, 1, ,, line, ., length, (, ), ), ;]
[=, line, ., substring, (, split, +, 1, ,, line, ., length, (, ), ), ;, currentSectionMap, ., put, (]
[., substring, (, split, +, 1, ,, line, ., length, (, ), ), ;, currentSectionMap, ., put, (, name, ,]
[,, line, ., length, (, ), ), ;, currentSectionMap, ., put, (, name, ,, location, ), ;, }, else, {]
[., length, (, ), ), ;, currentSectionMap, ., put, (, name, ,, location, ), ;, }, else, {, reportInvalidLine, (]
[(, ), ), ;, currentSectionMap, ., put, (, name, ,, location, ), ;, }, else, {, reportInvalidLine, (, line, ,]
[currentSectionMap, ., put, (, name, ,, location, ), ;, }, else, {, reportInvalidLine, (, line, ,, lineIndex, ), ;, return]
[currentSectionMap, ., put, (, name, ,, location, ), ;, }, else, {, reportInvalidLine, (, line, ,, lineIndex, ), ;, return]
[lineIndex, ), ;, return, Collections, ., emptyMap, (, ), ;, }, }, }, }, catch, (, IOException, e, ), {]
[lineIndex, ), ;, return, Collections, ., emptyMap, (, ), ;, }, }, }, }, catch, (, IOException, e, ), {]
[Collections, ., emptyMap, (, ), ;, }, }, }, }, catch, (, IOException, e, ), {, JSError, ., make, (]
[emptyMap, (, ), ;, }, }, }, }, catch, (, IOException, e, ), {, JSError, ., make, (, INVALID_GENERATOR_ID_MAPPING, ,]
[emptyMap, (, ), ;, }, }, }, }, catch, (, IOException, e, ), {, JSError, ., make, (, INVALID_GENERATOR_ID_MAPPING, ,]
[(, IOException, e, ), {, JSError, ., make, (, INVALID_GENERATOR_ID_MAPPING, ,, e, ., getMessage, (, ), ), ;, }, return]
[(, ), ), ;, }, return, resultMap, ;, }, private, void, reportInvalidLine, (, String, line, ,, int, lineIndex, ), {]
[(, ), ), ;, }, return, resultMap, ;, }, private, void, reportInvalidLine, (, String, line, ,, int, lineIndex, ), {]
[}, return, resultMap, ;, }, private, void, reportInvalidLine, (, String, line, ,, int, lineIndex, ), {, JSError, ., make, (]
[resultMap, ;, }, private, void, reportInvalidLine, (, String, line, ,, int, lineIndex, ), {, JSError, ., make, (, INVALID_GENERATOR_ID_MAPPING, ,]
[resultMap, ;, }, private, void, reportInvalidLine, (, String, line, ,, int, lineIndex, ), {, JSError, ., make, (, INVALID_GENERATOR_ID_MAPPING, ,]
[resultMap, ;, }, private, void, reportInvalidLine, (, String, line, ,, int, lineIndex, ), {, JSError, ., make, (, INVALID_GENERATOR_ID_MAPPING, ,]
[resultMap, ;, }, private, void, reportInvalidLine, (, String, line, ,, int, lineIndex, ), {, JSError, ., make, (, INVALID_GENERATOR_ID_MAPPING, ,]
[}, private, void, reportInvalidLine, (, String, line, ,, int, lineIndex, ), {, JSError, ., make, (, INVALID_GENERATOR_ID_MAPPING, ,, "line(", +]
[void, reportInvalidLine, (, String, line, ,, int, lineIndex, ), {, JSError, ., make, (, INVALID_GENERATOR_ID_MAPPING, ,, "line(", +, line, +]
[(, String, line, ,, int, lineIndex, ), {, JSError, ., make, (, INVALID_GENERATOR_ID_MAPPING, ,, "line(", +, line, +, "): ", +]
["line(", +, line, +, "): ", +, lineIndex, ), ;, }, String, getIdForGeneratorNode, (, boolean, consistent, ,, Node, n, ), {]
["line(", +, line, +, "): ", +, lineIndex, ), ;, }, String, getIdForGeneratorNode, (, boolean, consistent, ,, Node, n, ), {]
["): ", +, lineIndex, ), ;, }, String, getIdForGeneratorNode, (, boolean, consistent, ,, Node, n, ), {, Preconditions, ., checkState, (]
["): ", +, lineIndex, ), ;, }, String, getIdForGeneratorNode, (, boolean, consistent, ,, Node, n, ), {, Preconditions, ., checkState, (]
[boolean, consistent, ,, Node, n, ), {, Preconditions, ., checkState, (, n, ., isString, (, ), ), ;, if, (]
[n, ), {, Preconditions, ., checkState, (, n, ., isString, (, ), ), ;, if, (, consistent, ), {, return]
[n, ), {, Preconditions, ., checkState, (, n, ., isString, (, ), ), ;, if, (, consistent, ), {, return]
[(, ), ), ;, if, (, consistent, ), {, return, n, ., getString, (, ), ;, }, else, {, return]
[(, ), ), ;, if, (, consistent, ), {, return, n, ., getString, (, ), ;, }, else, {, return]
[(, ), ), ;, if, (, consistent, ), {, return, n, ., getString, (, ), ;, }, else, {, return]
[(, ), ), ;, if, (, consistent, ), {, return, n, ., getString, (, ), ;, }, else, {, return]
[(, ), ), ;, if, (, consistent, ), {, return, n, ., getString, (, ), ;, }, else, {, return]
[(, ), ), ;, if, (, consistent, ), {, return, n, ., getString, (, ), ;, }, else, {, return]
[consistent, ), {, return, n, ., getString, (, ), ;, }, else, {, return, n, ., getSourceFileName, (, ), +]
[{, return, n, ., getString, (, ), ;, }, else, {, return, n, ., getSourceFileName, (, ), +, ':', +]
[{, return, n, ., getString, (, ), ;, }, else, {, return, n, ., getSourceFileName, (, ), +, ':', +]
[), ;, }, else, {, return, n, ., getSourceFileName, (, ), +, ':', +, n, ., getLineno, (, ), +]
[}, else, {, return, n, ., getSourceFileName, (, ), +, ':', +, n, ., getLineno, (, ), +, ":", +]
[}, else, {, return, n, ., getSourceFileName, (, ), +, ':', +, n, ., getLineno, (, ), +, ":", +]
