[java, ., util, ., Arrays, ;, public, class, SerializableMethod, implements, Serializable, ,, MockitoMethod, {, private, static, final, long, serialVersionUID, =]
[], exceptionTypes, ;, private, final, boolean, isVarArgs, ;, private, final, boolean, isAbstract, ;, public, SerializableMethod, (, Method, method, ), {]
[;, private, final, boolean, isVarArgs, ;, private, final, boolean, isAbstract, ;, public, SerializableMethod, (, Method, method, ), {, declaringClass, =]
[;, private, final, boolean, isVarArgs, ;, private, final, boolean, isAbstract, ;, public, SerializableMethod, (, Method, method, ), {, declaringClass, =]
[private, final, boolean, isAbstract, ;, public, SerializableMethod, (, Method, method, ), {, declaringClass, =, method, ., getDeclaringClass, (, ), ;]
[boolean, isAbstract, ;, public, SerializableMethod, (, Method, method, ), {, declaringClass, =, method, ., getDeclaringClass, (, ), ;, methodName, =]
[boolean, isAbstract, ;, public, SerializableMethod, (, Method, method, ), {, declaringClass, =, method, ., getDeclaringClass, (, ), ;, methodName, =]
[Method, method, ), {, declaringClass, =, method, ., getDeclaringClass, (, ), ;, methodName, =, method, ., getName, (, ), ;]
[), {, declaringClass, =, method, ., getDeclaringClass, (, ), ;, methodName, =, method, ., getName, (, ), ;, parameterTypes, =]
[), {, declaringClass, =, method, ., getDeclaringClass, (, ), ;, methodName, =, method, ., getName, (, ), ;, parameterTypes, =]
[getDeclaringClass, (, ), ;, methodName, =, method, ., getName, (, ), ;, parameterTypes, =, method, ., getParameterTypes, (, ), ;]
[), ;, methodName, =, method, ., getName, (, ), ;, parameterTypes, =, method, ., getParameterTypes, (, ), ;, returnType, =]
[), ;, methodName, =, method, ., getName, (, ), ;, parameterTypes, =, method, ., getParameterTypes, (, ), ;, returnType, =]
[getName, (, ), ;, parameterTypes, =, method, ., getParameterTypes, (, ), ;, returnType, =, method, ., getReturnType, (, ), ;]
[), ;, parameterTypes, =, method, ., getParameterTypes, (, ), ;, returnType, =, method, ., getReturnType, (, ), ;, exceptionTypes, =]
[), ;, parameterTypes, =, method, ., getParameterTypes, (, ), ;, returnType, =, method, ., getReturnType, (, ), ;, exceptionTypes, =]
[getParameterTypes, (, ), ;, returnType, =, method, ., getReturnType, (, ), ;, exceptionTypes, =, method, ., getExceptionTypes, (, ), ;]
[), ;, returnType, =, method, ., getReturnType, (, ), ;, exceptionTypes, =, method, ., getExceptionTypes, (, ), ;, isVarArgs, =]
[), ;, returnType, =, method, ., getReturnType, (, ), ;, exceptionTypes, =, method, ., getExceptionTypes, (, ), ;, isVarArgs, =]
[getReturnType, (, ), ;, exceptionTypes, =, method, ., getExceptionTypes, (, ), ;, isVarArgs, =, method, ., isVarArgs, (, ), ;]
[), ;, exceptionTypes, =, method, ., getExceptionTypes, (, ), ;, isVarArgs, =, method, ., isVarArgs, (, ), ;, isAbstract, =]
[), ;, exceptionTypes, =, method, ., getExceptionTypes, (, ), ;, isVarArgs, =, method, ., isVarArgs, (, ), ;, isAbstract, =]
[;, exceptionTypes, =, method, ., getExceptionTypes, (, ), ;, isVarArgs, =, method, ., isVarArgs, (, ), ;, isAbstract, =, (]
[;, exceptionTypes, =, method, ., getExceptionTypes, (, ), ;, isVarArgs, =, method, ., isVarArgs, (, ), ;, isAbstract, =, (]
[;, exceptionTypes, =, method, ., getExceptionTypes, (, ), ;, isVarArgs, =, method, ., isVarArgs, (, ), ;, isAbstract, =, (]
[(, ), ;, isVarArgs, =, method, ., isVarArgs, (, ), ;, isAbstract, =, (, method, ., getModifiers, (, ), &]
[(, ), ;, isVarArgs, =, method, ., isVarArgs, (, ), ;, isAbstract, =, (, method, ., getModifiers, (, ), &]
[method, ., isVarArgs, (, ), ;, isAbstract, =, (, method, ., getModifiers, (, ), &, Modifier, ., ABSTRACT, ), !=]
[., getModifiers, (, ), &, Modifier, ., ABSTRACT, ), !=, 0, ;, }, public, String, getName, (, ), {, return]
[public, String, getName, (, ), {, return, methodName, ;, }, public, Class, <, ?, >, getReturnType, (, ), {, return]
[getReturnType, (, ), {, return, returnType, ;, }, public, Class, <, ?, >, [, ], getParameterTypes, (, ), {, return]
[getParameterTypes, (, ), {, return, parameterTypes, ;, }, public, Class, <, ?, >, [, ], getExceptionTypes, (, ), {, return]
[<, ?, >, [, ], getExceptionTypes, (, ), {, return, exceptionTypes, ;, }, public, boolean, isVarArgs, (, ), {, return]
[exceptionTypes, ;, }, public, boolean, isVarArgs, (, ), {, return, isVarArgs, ;, }, public, boolean, isAbstract, (, ), {, return]
[}, public, boolean, isAbstract, (, ), {, return, isAbstract, ;, }, public, Method, getJavaMethod, (, ), {, try, {, return]
[}, public, boolean, isAbstract, (, ), {, return, isAbstract, ;, }, public, Method, getJavaMethod, (, ), {, try, {, return]
[(, ), {, return, isAbstract, ;, }, public, Method, getJavaMethod, (, ), {, try, {, return, declaringClass, ., getDeclaredMethod, (]
[{, return, isAbstract, ;, }, public, Method, getJavaMethod, (, ), {, try, {, return, declaringClass, ., getDeclaredMethod, (, methodName, ,]
[return, declaringClass, ., getDeclaredMethod, (, methodName, ,, parameterTypes, ), ;, }, catch, (, SecurityException, e, ), {, String, message, =]
[return, declaringClass, ., getDeclaredMethod, (, methodName, ,, parameterTypes, ), ;, }, catch, (, SecurityException, e, ), {, String, message, =]
[(, methodName, ,, parameterTypes, ), ;, }, catch, (, SecurityException, e, ), {, String, message, =, String, ., format, (]
[(, methodName, ,, parameterTypes, ), ;, }, catch, (, SecurityException, e, ), {, String, message, =, String, ., format, (]
[,, parameterTypes, ), ;, }, catch, (, SecurityException, e, ), {, String, message, =, String, ., format, (, "The method %1$s.%2$s is probably private or protected and cannot be mocked.\n", +]
[), ;, }, catch, (, SecurityException, e, ), {, String, message, =, String, ., format, (, "The method %1$s.%2$s is probably private or protected and cannot be mocked.\n", +, "Please report this as a defect with an example of how to reproduce it.", ,]
[}, catch, (, SecurityException, e, ), {, String, message, =, String, ., format, (, "The method %1$s.%2$s is probably private or protected and cannot be mocked.\n", +, "Please report this as a defect with an example of how to reproduce it.", ,, declaringClass, ,]
[e, ), {, String, message, =, String, ., format, (, "The method %1$s.%2$s is probably private or protected and cannot be mocked.\n", +, "Please report this as a defect with an example of how to reproduce it.", ,, declaringClass, ,, methodName, ), ;, throw]
[String, message, =, String, ., format, (, "The method %1$s.%2$s is probably private or protected and cannot be mocked.\n", +, "Please report this as a defect with an example of how to reproduce it.", ,, declaringClass, ,, methodName, ), ;, throw, new, MockitoException, (]
[=, String, ., format, (, "The method %1$s.%2$s is probably private or protected and cannot be mocked.\n", +, "Please report this as a defect with an example of how to reproduce it.", ,, declaringClass, ,, methodName, ), ;, throw, new, MockitoException, (, message, ,]
[;, throw, new, MockitoException, (, message, ,, e, ), ;, }, catch, (, NoSuchMethodException, e, ), {, String, message, =]
[;, throw, new, MockitoException, (, message, ,, e, ), ;, }, catch, (, NoSuchMethodException, e, ), {, String, message, =]
[(, message, ,, e, ), ;, }, catch, (, NoSuchMethodException, e, ), {, String, message, =, String, ., format, (]
[(, message, ,, e, ), ;, }, catch, (, NoSuchMethodException, e, ), {, String, message, =, String, ., format, (]
[,, e, ), ;, }, catch, (, NoSuchMethodException, e, ), {, String, message, =, String, ., format, (, "The method %1$s.%2$s does not exists and you should not get to this point.\n", +]
[), ;, }, catch, (, NoSuchMethodException, e, ), {, String, message, =, String, ., format, (, "The method %1$s.%2$s does not exists and you should not get to this point.\n", +, "Please report this as a defect with an example of how to reproduce it.", ,]
[}, catch, (, NoSuchMethodException, e, ), {, String, message, =, String, ., format, (, "The method %1$s.%2$s does not exists and you should not get to this point.\n", +, "Please report this as a defect with an example of how to reproduce it.", ,, declaringClass, ,]
[e, ), {, String, message, =, String, ., format, (, "The method %1$s.%2$s does not exists and you should not get to this point.\n", +, "Please report this as a defect with an example of how to reproduce it.", ,, declaringClass, ,, methodName, ), ;, throw]
[String, message, =, String, ., format, (, "The method %1$s.%2$s does not exists and you should not get to this point.\n", +, "Please report this as a defect with an example of how to reproduce it.", ,, declaringClass, ,, methodName, ), ;, throw, new, MockitoException, (]
[=, String, ., format, (, "The method %1$s.%2$s does not exists and you should not get to this point.\n", +, "Please report this as a defect with an example of how to reproduce it.", ,, declaringClass, ,, methodName, ), ;, throw, new, MockitoException, (, message, ,]
[throw, new, MockitoException, (, message, ,, e, ), ;, }, }, @, Override, public, int, hashCode, (, ), {, return]
[hashCode, (, ), {, return, 1, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (]
[hashCode, (, ), {, return, 1, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (]
[), {, return, 1, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==]
[1, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, ), return]
[Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, ), return, true, ;, if, (]
[Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, ), return, true, ;, if, (]
[boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, ), return, true, ;, if, (, obj, ==]
[Object, obj, ), {, if, (, this, ==, obj, ), return, true, ;, if, (, obj, ==, null, ), return]
[if, (, this, ==, obj, ), return, true, ;, if, (, obj, ==, null, ), return, false, ;, if, (]
[if, (, this, ==, obj, ), return, true, ;, if, (, obj, ==, null, ), return, false, ;, if, (]
[obj, ), return, true, ;, if, (, obj, ==, null, ), return, false, ;, if, (, getClass, (, ), !=]
[obj, ), return, true, ;, if, (, obj, ==, null, ), return, false, ;, if, (, getClass, (, ), !=]
[obj, ==, null, ), return, false, ;, if, (, getClass, (, ), !=, obj, ., getClass, (, ), ), return]
[false, ;, if, (, getClass, (, ), !=, obj, ., getClass, (, ), ), return, false, ;, SerializableMethod, other, =]
[(, getClass, (, ), !=, obj, ., getClass, (, ), ), return, false, ;, SerializableMethod, other, =, (, SerializableMethod, )]
[!=, obj, ., getClass, (, ), ), return, false, ;, SerializableMethod, other, =, (, SerializableMethod, ), obj, ;, if, (]
[!=, obj, ., getClass, (, ), ), return, false, ;, SerializableMethod, other, =, (, SerializableMethod, ), obj, ;, if, (]
[., getClass, (, ), ), return, false, ;, SerializableMethod, other, =, (, SerializableMethod, ), obj, ;, if, (, declaringClass, ==]
[return, false, ;, SerializableMethod, other, =, (, SerializableMethod, ), obj, ;, if, (, declaringClass, ==, null, ), {, if, (]
[return, false, ;, SerializableMethod, other, =, (, SerializableMethod, ), obj, ;, if, (, declaringClass, ==, null, ), {, if, (]
[return, false, ;, SerializableMethod, other, =, (, SerializableMethod, ), obj, ;, if, (, declaringClass, ==, null, ), {, if, (]
[other, =, (, SerializableMethod, ), obj, ;, if, (, declaringClass, ==, null, ), {, if, (, other, ., declaringClass, !=]
[SerializableMethod, ), obj, ;, if, (, declaringClass, ==, null, ), {, if, (, other, ., declaringClass, !=, null, ), return]
[declaringClass, ==, null, ), {, if, (, other, ., declaringClass, !=, null, ), return, false, ;, }, else, if, (]
[==, null, ), {, if, (, other, ., declaringClass, !=, null, ), return, false, ;, }, else, if, (, !]
[==, null, ), {, if, (, other, ., declaringClass, !=, null, ), return, false, ;, }, else, if, (, !]
[if, (, other, ., declaringClass, !=, null, ), return, false, ;, }, else, if, (, !, declaringClass, ., equals, (]
[if, (, other, ., declaringClass, !=, null, ), return, false, ;, }, else, if, (, !, declaringClass, ., equals, (]
[null, ), return, false, ;, }, else, if, (, !, declaringClass, ., equals, (, other, ., declaringClass, ), ), return]
[;, }, else, if, (, !, declaringClass, ., equals, (, other, ., declaringClass, ), ), return, false, ;, if, (]
[;, }, else, if, (, !, declaringClass, ., equals, (, other, ., declaringClass, ), ), return, false, ;, if, (]
[else, if, (, !, declaringClass, ., equals, (, other, ., declaringClass, ), ), return, false, ;, if, (, methodName, ==]
[., equals, (, other, ., declaringClass, ), ), return, false, ;, if, (, methodName, ==, null, ), {, if, (]
[., equals, (, other, ., declaringClass, ), ), return, false, ;, if, (, methodName, ==, null, ), {, if, (]
[., equals, (, other, ., declaringClass, ), ), return, false, ;, if, (, methodName, ==, null, ), {, if, (]
[., declaringClass, ), ), return, false, ;, if, (, methodName, ==, null, ), {, if, (, other, ., methodName, !=]
[), return, false, ;, if, (, methodName, ==, null, ), {, if, (, other, ., methodName, !=, null, ), return]
[methodName, ==, null, ), {, if, (, other, ., methodName, !=, null, ), return, false, ;, }, else, if, (]
[==, null, ), {, if, (, other, ., methodName, !=, null, ), return, false, ;, }, else, if, (, !]
[==, null, ), {, if, (, other, ., methodName, !=, null, ), return, false, ;, }, else, if, (, !]
[if, (, other, ., methodName, !=, null, ), return, false, ;, }, else, if, (, !, methodName, ., equals, (]
[if, (, other, ., methodName, !=, null, ), return, false, ;, }, else, if, (, !, methodName, ., equals, (]
[null, ), return, false, ;, }, else, if, (, !, methodName, ., equals, (, other, ., methodName, ), ), return]
[;, }, else, if, (, !, methodName, ., equals, (, other, ., methodName, ), ), return, false, ;, if, (]
[}, else, if, (, !, methodName, ., equals, (, other, ., methodName, ), ), return, false, ;, if, (, !]
[}, else, if, (, !, methodName, ., equals, (, other, ., methodName, ), ), return, false, ;, if, (, !]
[!, methodName, ., equals, (, other, ., methodName, ), ), return, false, ;, if, (, !, Arrays, ., equals, (]
[., equals, (, other, ., methodName, ), ), return, false, ;, if, (, !, Arrays, ., equals, (, parameterTypes, ,]
[., equals, (, other, ., methodName, ), ), return, false, ;, if, (, !, Arrays, ., equals, (, parameterTypes, ,]
[), ), return, false, ;, if, (, !, Arrays, ., equals, (, parameterTypes, ,, other, ., parameterTypes, ), ), return]
[;, if, (, !, Arrays, ., equals, (, parameterTypes, ,, other, ., parameterTypes, ), ), return, false, ;, if, (]
[;, if, (, !, Arrays, ., equals, (, parameterTypes, ,, other, ., parameterTypes, ), ), return, false, ;, if, (]
[(, !, Arrays, ., equals, (, parameterTypes, ,, other, ., parameterTypes, ), ), return, false, ;, if, (, returnType, ==]
[(, parameterTypes, ,, other, ., parameterTypes, ), ), return, false, ;, if, (, returnType, ==, null, ), {, if, (]
[(, parameterTypes, ,, other, ., parameterTypes, ), ), return, false, ;, if, (, returnType, ==, null, ), {, if, (]
[(, parameterTypes, ,, other, ., parameterTypes, ), ), return, false, ;, if, (, returnType, ==, null, ), {, if, (]
[., parameterTypes, ), ), return, false, ;, if, (, returnType, ==, null, ), {, if, (, other, ., returnType, !=]
[), return, false, ;, if, (, returnType, ==, null, ), {, if, (, other, ., returnType, !=, null, ), return]
[returnType, ==, null, ), {, if, (, other, ., returnType, !=, null, ), return, false, ;, }, else, if, (]
[==, null, ), {, if, (, other, ., returnType, !=, null, ), return, false, ;, }, else, if, (, !]
[==, null, ), {, if, (, other, ., returnType, !=, null, ), return, false, ;, }, else, if, (, !]
[if, (, other, ., returnType, !=, null, ), return, false, ;, }, else, if, (, !, returnType, ., equals, (]
[if, (, other, ., returnType, !=, null, ), return, false, ;, }, else, if, (, !, returnType, ., equals, (]
[null, ), return, false, ;, }, else, if, (, !, returnType, ., equals, (, other, ., returnType, ), ), return]
[false, ;, }, else, if, (, !, returnType, ., equals, (, other, ., returnType, ), ), return, false, ;, return]
