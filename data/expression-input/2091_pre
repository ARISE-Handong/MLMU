[public, abstract, class, BaseAbstractMultivariateOptimizer, <, FUNC, extends, MultivariateFunction, >, implements, BaseMultivariateOptimizer, <, FUNC, >, {, protected, final, Incrementor, evaluations, =]
[;, private, double, [, ], upperBound, ;, private, MultivariateFunction, function, ;, @, Deprecated, protected, BaseAbstractMultivariateOptimizer, (, ), {, this, (]
[{, this, (, new, SimpleValueChecker, (, ), ), ;, }, protected, BaseAbstractMultivariateOptimizer, (, ConvergenceChecker, <, PointValuePair, >, checker, ), {]
[{, this, (, new, SimpleValueChecker, (, ), ), ;, }, protected, BaseAbstractMultivariateOptimizer, (, ConvergenceChecker, <, PointValuePair, >, checker, ), {]
[SimpleValueChecker, (, ), ), ;, }, protected, BaseAbstractMultivariateOptimizer, (, ConvergenceChecker, <, PointValuePair, >, checker, ), {, this, ., checker, =]
[<, PointValuePair, >, checker, ), {, this, ., checker, =, checker, ;, }, public, int, getMaxEvaluations, (, ), {, return]
[<, PointValuePair, >, checker, ), {, this, ., checker, =, checker, ;, }, public, int, getMaxEvaluations, (, ), {, return]
[int, getMaxEvaluations, (, ), {, return, evaluations, ., getMaximalCount, (, ), ;, }, public, int, getEvaluations, (, ), {, return]
[int, getMaxEvaluations, (, ), {, return, evaluations, ., getMaximalCount, (, ), ;, }, public, int, getEvaluations, (, ), {, return]
[), {, return, evaluations, ., getCount, (, ), ;, }, public, ConvergenceChecker, <, PointValuePair, >, getConvergenceChecker, (, ), {, return]
[getConvergenceChecker, (, ), {, return, checker, ;, }, protected, double, computeObjectiveValue, (, double, [, ], point, ), {, try, {]
[getConvergenceChecker, (, ), {, return, checker, ;, }, protected, double, computeObjectiveValue, (, double, [, ], point, ), {, try, {]
[], point, ), {, try, {, evaluations, ., incrementCount, (, ), ;, }, catch, (, MaxCountExceededException, e, ), {, throw]
[{, try, {, evaluations, ., incrementCount, (, ), ;, }, catch, (, MaxCountExceededException, e, ), {, throw, new, TooManyEvaluationsException, (]
[{, try, {, evaluations, ., incrementCount, (, ), ;, }, catch, (, MaxCountExceededException, e, ), {, throw, new, TooManyEvaluationsException, (]
[}, catch, (, MaxCountExceededException, e, ), {, throw, new, TooManyEvaluationsException, (, e, ., getMax, (, ), ), ;, }, return]
[}, catch, (, MaxCountExceededException, e, ), {, throw, new, TooManyEvaluationsException, (, e, ., getMax, (, ), ), ;, }, return]
[e, ), {, throw, new, TooManyEvaluationsException, (, e, ., getMax, (, ), ), ;, }, return, function, ., value, (]
[public, PointValuePair, optimize, (, int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, double, [, ], startPoint, ), {, return]
[optimize, (, int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, double, [, ], startPoint, ), {, return, optimizeInternal, (]
[int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, double, [, ], startPoint, ), {, return, optimizeInternal, (, maxEval, ,]
[,, FUNC, f, ,, GoalType, goalType, ,, double, [, ], startPoint, ), {, return, optimizeInternal, (, maxEval, ,, f, ,]
[f, ,, GoalType, goalType, ,, double, [, ], startPoint, ), {, return, optimizeInternal, (, maxEval, ,, f, ,, goalType, ,]
[goalType, ,, double, [, ], startPoint, ), {, return, optimizeInternal, (, maxEval, ,, f, ,, goalType, ,, new, InitialGuess, (]
[}, public, PointValuePair, optimize, (, int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, OptimizationData, ..., optData, ), {, return]
[PointValuePair, optimize, (, int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, OptimizationData, ..., optData, ), {, return, optimizeInternal, (]
[(, int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, OptimizationData, ..., optData, ), {, return, optimizeInternal, (, maxEval, ,]
[maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, OptimizationData, ..., optData, ), {, return, optimizeInternal, (, maxEval, ,, f, ,]
[FUNC, f, ,, GoalType, goalType, ,, OptimizationData, ..., optData, ), {, return, optimizeInternal, (, maxEval, ,, f, ,, goalType, ,]
[protected, PointValuePair, optimizeInternal, (, int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, double, [, ], startPoint, ), {, return]
[optimizeInternal, (, int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, double, [, ], startPoint, ), {, return, optimizeInternal, (]
[int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, double, [, ], startPoint, ), {, return, optimizeInternal, (, maxEval, ,]
[,, FUNC, f, ,, GoalType, goalType, ,, double, [, ], startPoint, ), {, return, optimizeInternal, (, maxEval, ,, f, ,]
[f, ,, GoalType, goalType, ,, double, [, ], startPoint, ), {, return, optimizeInternal, (, maxEval, ,, f, ,, goalType, ,]
[goalType, ,, double, [, ], startPoint, ), {, return, optimizeInternal, (, maxEval, ,, f, ,, goalType, ,, new, InitialGuess, (]
[protected, PointValuePair, optimizeInternal, (, int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, OptimizationData, ..., optData, ), throws, TooManyEvaluationsException, {]
[protected, PointValuePair, optimizeInternal, (, int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, OptimizationData, ..., optData, ), throws, TooManyEvaluationsException, {]
[int, maxEval, ,, FUNC, f, ,, GoalType, goalType, ,, OptimizationData, ..., optData, ), throws, TooManyEvaluationsException, {, evaluations, ., setMaximalCount, (]
[FUNC, f, ,, GoalType, goalType, ,, OptimizationData, ..., optData, ), throws, TooManyEvaluationsException, {, evaluations, ., setMaximalCount, (, maxEval, ), ;]
[FUNC, f, ,, GoalType, goalType, ,, OptimizationData, ..., optData, ), throws, TooManyEvaluationsException, {, evaluations, ., setMaximalCount, (, maxEval, ), ;]
[OptimizationData, ..., optData, ), throws, TooManyEvaluationsException, {, evaluations, ., setMaximalCount, (, maxEval, ), ;, evaluations, ., resetCount, (, ), ;]
[optData, ), throws, TooManyEvaluationsException, {, evaluations, ., setMaximalCount, (, maxEval, ), ;, evaluations, ., resetCount, (, ), ;, function, =]
[throws, TooManyEvaluationsException, {, evaluations, ., setMaximalCount, (, maxEval, ), ;, evaluations, ., resetCount, (, ), ;, function, =, f, ;]
[{, evaluations, ., setMaximalCount, (, maxEval, ), ;, evaluations, ., resetCount, (, ), ;, function, =, f, ;, goal, =]
[., setMaximalCount, (, maxEval, ), ;, evaluations, ., resetCount, (, ), ;, function, =, f, ;, goal, =, goalType, ;]
[(, maxEval, ), ;, evaluations, ., resetCount, (, ), ;, function, =, f, ;, goal, =, goalType, ;, parseOptimizationData, (]
[;, evaluations, ., resetCount, (, ), ;, function, =, f, ;, goal, =, goalType, ;, parseOptimizationData, (, optData, ), ;]
[), ;, function, =, f, ;, goal, =, goalType, ;, parseOptimizationData, (, optData, ), ;, checkParameters, (, ), ;, return]
[return, doOptimize, (, ), ;, }, private, void, parseOptimizationData, (, OptimizationData, ..., optData, ), {, for, (, OptimizationData, data, :]
[}, private, void, parseOptimizationData, (, OptimizationData, ..., optData, ), {, for, (, OptimizationData, data, :, optData, ), {, if, (]
[}, private, void, parseOptimizationData, (, OptimizationData, ..., optData, ), {, for, (, OptimizationData, data, :, optData, ), {, if, (]
[OptimizationData, ..., optData, ), {, for, (, OptimizationData, data, :, optData, ), {, if, (, data, instanceof, InitialGuess, ), {]
[optData, ), {, for, (, OptimizationData, data, :, optData, ), {, if, (, data, instanceof, InitialGuess, ), {, start, =]
[optData, ), {, for, (, OptimizationData, data, :, optData, ), {, if, (, data, instanceof, InitialGuess, ), {, start, =]
[), {, for, (, OptimizationData, data, :, optData, ), {, if, (, data, instanceof, InitialGuess, ), {, start, =, (]
[(, OptimizationData, data, :, optData, ), {, if, (, data, instanceof, InitialGuess, ), {, start, =, (, (, InitialGuess, )]
[), {, start, =, (, (, InitialGuess, ), data, ), ., getInitialGuess, (, ), ;, continue, ;, }, if, (]
[), {, start, =, (, (, InitialGuess, ), data, ), ., getInitialGuess, (, ), ;, continue, ;, }, if, (]
[), ., getInitialGuess, (, ), ;, continue, ;, }, if, (, data, instanceof, SimpleBounds, ), {, final, SimpleBounds, bounds, =]
[(, ), ;, continue, ;, }, if, (, data, instanceof, SimpleBounds, ), {, final, SimpleBounds, bounds, =, (, SimpleBounds, )]
[;, continue, ;, }, if, (, data, instanceof, SimpleBounds, ), {, final, SimpleBounds, bounds, =, (, SimpleBounds, ), data, ;]
[;, }, if, (, data, instanceof, SimpleBounds, ), {, final, SimpleBounds, bounds, =, (, SimpleBounds, ), data, ;, lowerBound, =]
[;, }, if, (, data, instanceof, SimpleBounds, ), {, final, SimpleBounds, bounds, =, (, SimpleBounds, ), data, ;, lowerBound, =]
[SimpleBounds, ), {, final, SimpleBounds, bounds, =, (, SimpleBounds, ), data, ;, lowerBound, =, bounds, ., getLower, (, ), ;]
[{, final, SimpleBounds, bounds, =, (, SimpleBounds, ), data, ;, lowerBound, =, bounds, ., getLower, (, ), ;, upperBound, =]
[{, final, SimpleBounds, bounds, =, (, SimpleBounds, ), data, ;, lowerBound, =, bounds, ., getLower, (, ), ;, upperBound, =]
[upperBound, =, bounds, ., getUpper, (, ), ;, continue, ;, }, }, }, public, GoalType, getGoalType, (, ), {, return]
[}, public, GoalType, getGoalType, (, ), {, return, goal, ;, }, public, double, [, ], getStartPoint, (, ), {, return]
[}, public, GoalType, getGoalType, (, ), {, return, goal, ;, }, public, double, [, ], getStartPoint, (, ), {, return]
[}, public, GoalType, getGoalType, (, ), {, return, goal, ;, }, public, double, [, ], getStartPoint, (, ), {, return]
[GoalType, getGoalType, (, ), {, return, goal, ;, }, public, double, [, ], getStartPoint, (, ), {, return, start, ==]
[(, ), {, return, goal, ;, }, public, double, [, ], getStartPoint, (, ), {, return, start, ==, null, ?]
[{, return, goal, ;, }, public, double, [, ], getStartPoint, (, ), {, return, start, ==, null, ?, null, :]
[{, return, goal, ;, }, public, double, [, ], getStartPoint, (, ), {, return, start, ==, null, ?, null, :]
[null, ?, null, :, start, ., clone, (, ), ;, }, public, double, [, ], getLowerBound, (, ), {, return]
[null, ?, null, :, start, ., clone, (, ), ;, }, public, double, [, ], getLowerBound, (, ), {, return]
[null, ?, null, :, start, ., clone, (, ), ;, }, public, double, [, ], getLowerBound, (, ), {, return]
[null, :, start, ., clone, (, ), ;, }, public, double, [, ], getLowerBound, (, ), {, return, lowerBound, ==]
[start, ., clone, (, ), ;, }, public, double, [, ], getLowerBound, (, ), {, return, lowerBound, ==, null, ?]
[clone, (, ), ;, }, public, double, [, ], getLowerBound, (, ), {, return, lowerBound, ==, null, ?, null, :]
[clone, (, ), ;, }, public, double, [, ], getLowerBound, (, ), {, return, lowerBound, ==, null, ?, null, :]
[null, ?, null, :, lowerBound, ., clone, (, ), ;, }, public, double, [, ], getUpperBound, (, ), {, return]
[null, ?, null, :, lowerBound, ., clone, (, ), ;, }, public, double, [, ], getUpperBound, (, ), {, return]
[null, ?, null, :, lowerBound, ., clone, (, ), ;, }, public, double, [, ], getUpperBound, (, ), {, return]
[null, :, lowerBound, ., clone, (, ), ;, }, public, double, [, ], getUpperBound, (, ), {, return, upperBound, ==]
[lowerBound, ., clone, (, ), ;, }, public, double, [, ], getUpperBound, (, ), {, return, upperBound, ==, null, ?]
[clone, (, ), ;, }, public, double, [, ], getUpperBound, (, ), {, return, upperBound, ==, null, ?, null, :]
[clone, (, ), ;, }, public, double, [, ], getUpperBound, (, ), {, return, upperBound, ==, null, ?, null, :]
[clone, (, ), ;, }, protected, abstract, PointValuePair, doOptimize, (, ), ;, private, void, checkParameters, (, ), {, if, (]
[clone, (, ), ;, }, protected, abstract, PointValuePair, doOptimize, (, ), ;, private, void, checkParameters, (, ), {, if, (]
[), ;, }, protected, abstract, PointValuePair, doOptimize, (, ), ;, private, void, checkParameters, (, ), {, if, (, start, !=]
[(, ), ;, private, void, checkParameters, (, ), {, if, (, start, !=, null, ), {, final, int, dim, =]
[(, ), ;, private, void, checkParameters, (, ), {, if, (, start, !=, null, ), {, final, int, dim, =]
[(, ), {, if, (, start, !=, null, ), {, final, int, dim, =, start, ., length, ;, if, (]
[(, ), {, if, (, start, !=, null, ), {, final, int, dim, =, start, ., length, ;, if, (]
[{, if, (, start, !=, null, ), {, final, int, dim, =, start, ., length, ;, if, (, lowerBound, !=]
[null, ), {, final, int, dim, =, start, ., length, ;, if, (, lowerBound, !=, null, ), {, if, (]
[null, ), {, final, int, dim, =, start, ., length, ;, if, (, lowerBound, !=, null, ), {, if, (]
[null, ), {, final, int, dim, =, start, ., length, ;, if, (, lowerBound, !=, null, ), {, if, (]
[int, dim, =, start, ., length, ;, if, (, lowerBound, !=, null, ), {, if, (, lowerBound, ., length, !=]
[., length, ;, if, (, lowerBound, !=, null, ), {, if, (, lowerBound, ., length, !=, dim, ), {, throw]
[if, (, lowerBound, !=, null, ), {, if, (, lowerBound, ., length, !=, dim, ), {, throw, new, DimensionMismatchException, (]
[if, (, lowerBound, !=, null, ), {, if, (, lowerBound, ., length, !=, dim, ), {, throw, new, DimensionMismatchException, (]
[null, ), {, if, (, lowerBound, ., length, !=, dim, ), {, throw, new, DimensionMismatchException, (, lowerBound, ., length, ,]
[dim, ), {, throw, new, DimensionMismatchException, (, lowerBound, ., length, ,, dim, ), ;, }, for, (, int, i, =]
[{, throw, new, DimensionMismatchException, (, lowerBound, ., length, ,, dim, ), ;, }, for, (, int, i, =, 0, ;]
[{, throw, new, DimensionMismatchException, (, lowerBound, ., length, ,, dim, ), ;, }, for, (, int, i, =, 0, ;]
[new, DimensionMismatchException, (, lowerBound, ., length, ,, dim, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[(, lowerBound, ., length, ,, dim, ), ;, }, for, (, int, i, =, 0, ;, i, <, dim, ;]
[(, lowerBound, ., length, ,, dim, ), ;, }, for, (, int, i, =, 0, ;, i, <, dim, ;]
[}, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, final, double, v, =]
[}, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, final, double, v, =]
[(, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, final, double, v, =, start, []
[<, dim, ;, i, ++, ), {, final, double, v, =, start, [, i, ], ;, final, double, lo, =]
[<, dim, ;, i, ++, ), {, final, double, v, =, start, [, i, ], ;, final, double, lo, =]
[;, i, ++, ), {, final, double, v, =, start, [, i, ], ;, final, double, lo, =, lowerBound, []
[final, double, v, =, start, [, i, ], ;, final, double, lo, =, lowerBound, [, i, ], ;, if, (]
[final, double, v, =, start, [, i, ], ;, final, double, lo, =, lowerBound, [, i, ], ;, if, (]
[v, =, start, [, i, ], ;, final, double, lo, =, lowerBound, [, i, ], ;, if, (, v, <]
[i, ], ;, final, double, lo, =, lowerBound, [, i, ], ;, if, (, v, <, lo, ), {, throw]
[final, double, lo, =, lowerBound, [, i, ], ;, if, (, v, <, lo, ), {, throw, new, NumberIsTooSmallException, (]
[lo, =, lowerBound, [, i, ], ;, if, (, v, <, lo, ), {, throw, new, NumberIsTooSmallException, (, v, ,]
[lowerBound, [, i, ], ;, if, (, v, <, lo, ), {, throw, new, NumberIsTooSmallException, (, v, ,, lo, ,]
[<, lo, ), {, throw, new, NumberIsTooSmallException, (, v, ,, lo, ,, true, ), ;, }, }, }, if, (]
[<, lo, ), {, throw, new, NumberIsTooSmallException, (, v, ,, lo, ,, true, ), ;, }, }, }, if, (]
[), {, throw, new, NumberIsTooSmallException, (, v, ,, lo, ,, true, ), ;, }, }, }, if, (, upperBound, !=]
[(, v, ,, lo, ,, true, ), ;, }, }, }, if, (, upperBound, !=, null, ), {, if, (]
[(, v, ,, lo, ,, true, ), ;, }, }, }, if, (, upperBound, !=, null, ), {, if, (]
[(, v, ,, lo, ,, true, ), ;, }, }, }, if, (, upperBound, !=, null, ), {, if, (]
[,, true, ), ;, }, }, }, if, (, upperBound, !=, null, ), {, if, (, upperBound, ., length, !=]
[}, }, }, if, (, upperBound, !=, null, ), {, if, (, upperBound, ., length, !=, dim, ), {, throw]
[if, (, upperBound, !=, null, ), {, if, (, upperBound, ., length, !=, dim, ), {, throw, new, DimensionMismatchException, (]
[if, (, upperBound, !=, null, ), {, if, (, upperBound, ., length, !=, dim, ), {, throw, new, DimensionMismatchException, (]
[null, ), {, if, (, upperBound, ., length, !=, dim, ), {, throw, new, DimensionMismatchException, (, upperBound, ., length, ,]
[dim, ), {, throw, new, DimensionMismatchException, (, upperBound, ., length, ,, dim, ), ;, }, for, (, int, i, =]
[{, throw, new, DimensionMismatchException, (, upperBound, ., length, ,, dim, ), ;, }, for, (, int, i, =, 0, ;]
[{, throw, new, DimensionMismatchException, (, upperBound, ., length, ,, dim, ), ;, }, for, (, int, i, =, 0, ;]
[new, DimensionMismatchException, (, upperBound, ., length, ,, dim, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[(, upperBound, ., length, ,, dim, ), ;, }, for, (, int, i, =, 0, ;, i, <, dim, ;]
[(, upperBound, ., length, ,, dim, ), ;, }, for, (, int, i, =, 0, ;, i, <, dim, ;]
[}, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, final, double, v, =]
[}, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, final, double, v, =]
[(, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, final, double, v, =, start, []
[<, dim, ;, i, ++, ), {, final, double, v, =, start, [, i, ], ;, final, double, hi, =]
[<, dim, ;, i, ++, ), {, final, double, v, =, start, [, i, ], ;, final, double, hi, =]
[;, i, ++, ), {, final, double, v, =, start, [, i, ], ;, final, double, hi, =, upperBound, []
[final, double, v, =, start, [, i, ], ;, final, double, hi, =, upperBound, [, i, ], ;, if, (]
[final, double, v, =, start, [, i, ], ;, final, double, hi, =, upperBound, [, i, ], ;, if, (]
[v, =, start, [, i, ], ;, final, double, hi, =, upperBound, [, i, ], ;, if, (, v, >]
[i, ], ;, final, double, hi, =, upperBound, [, i, ], ;, if, (, v, >, hi, ), {, throw]
[final, double, hi, =, upperBound, [, i, ], ;, if, (, v, >, hi, ), {, throw, new, NumberIsTooLargeException, (]
[hi, =, upperBound, [, i, ], ;, if, (, v, >, hi, ), {, throw, new, NumberIsTooLargeException, (, v, ,]
[upperBound, [, i, ], ;, if, (, v, >, hi, ), {, throw, new, NumberIsTooLargeException, (, v, ,, hi, ,]
[>, hi, ), {, throw, new, NumberIsTooLargeException, (, v, ,, hi, ,, true, ), ;, }, }, }, if, (]
[>, hi, ), {, throw, new, NumberIsTooLargeException, (, v, ,, hi, ,, true, ), ;, }, }, }, if, (]
[), {, throw, new, NumberIsTooLargeException, (, v, ,, hi, ,, true, ), ;, }, }, }, if, (, lowerBound, ==]
[new, NumberIsTooLargeException, (, v, ,, hi, ,, true, ), ;, }, }, }, if, (, lowerBound, ==, null, ), {]
[(, v, ,, hi, ,, true, ), ;, }, }, }, if, (, lowerBound, ==, null, ), {, lowerBound, =]
[hi, ,, true, ), ;, }, }, }, if, (, lowerBound, ==, null, ), {, lowerBound, =, new, double, []
[if, (, lowerBound, ==, null, ), {, lowerBound, =, new, double, [, dim, ], ;, for, (, int, i, =]
[lowerBound, ==, null, ), {, lowerBound, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;]
[lowerBound, ==, null, ), {, lowerBound, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;]
[null, ), {, lowerBound, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <]
[{, lowerBound, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[{, lowerBound, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, lowerBound, []
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, lowerBound, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, lowerBound, [, i, ], =]
[<, dim, ;, i, ++, ), {, lowerBound, [, i, ], =, Double, ., NEGATIVE_INFINITY, ;, }, }, if, (]
[<, dim, ;, i, ++, ), {, lowerBound, [, i, ], =, Double, ., NEGATIVE_INFINITY, ;, }, }, if, (]
[;, i, ++, ), {, lowerBound, [, i, ], =, Double, ., NEGATIVE_INFINITY, ;, }, }, if, (, upperBound, ==]
[), {, lowerBound, [, i, ], =, Double, ., NEGATIVE_INFINITY, ;, }, }, if, (, upperBound, ==, null, ), {]
[lowerBound, [, i, ], =, Double, ., NEGATIVE_INFINITY, ;, }, }, if, (, upperBound, ==, null, ), {, upperBound, =]
[], =, Double, ., NEGATIVE_INFINITY, ;, }, }, if, (, upperBound, ==, null, ), {, upperBound, =, new, double, []
[if, (, upperBound, ==, null, ), {, upperBound, =, new, double, [, dim, ], ;, for, (, int, i, =]
[upperBound, ==, null, ), {, upperBound, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;]
[upperBound, ==, null, ), {, upperBound, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;]
[null, ), {, upperBound, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <]
[{, upperBound, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[{, upperBound, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, upperBound, []
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, upperBound, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, upperBound, [, i, ], =]
