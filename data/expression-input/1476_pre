[commons, ., math3, ., util, ., Precision, ;, public, class, BrentSolver, extends, AbstractUnivariateSolver, {, private, static, final, double, DEFAULT_ABSOLUTE_ACCURACY, =]
[class, BrentSolver, extends, AbstractUnivariateSolver, {, private, static, final, double, DEFAULT_ABSOLUTE_ACCURACY, =, 1e-6, ;, public, BrentSolver, (, ), {, this, (]
[public, BrentSolver, (, ), {, this, (, DEFAULT_ABSOLUTE_ACCURACY, ), ;, }, public, BrentSolver, (, double, absoluteAccuracy, ), {, super, (]
[), {, super, (, absoluteAccuracy, ), ;, }, public, BrentSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ), {, super, (]
[super, (, absoluteAccuracy, ), ;, }, public, BrentSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ), {, super, (, relativeAccuracy, ,]
[,, absoluteAccuracy, ), ;, }, public, BrentSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ,, double, functionValueAccuracy, ), {, super, (]
[), ;, }, public, BrentSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ,, double, functionValueAccuracy, ), {, super, (, relativeAccuracy, ,]
[}, public, BrentSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ,, double, functionValueAccuracy, ), {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,]
[), ;, }, @, Override, protected, double, doSolve, (, ), throws, NoBracketingException, ,, TooManyEvaluationsException, ,, NumberIsTooLargeException, {, double, min, =]
[doSolve, (, ), throws, NoBracketingException, ,, TooManyEvaluationsException, ,, NumberIsTooLargeException, {, double, min, =, getMin, (, ), ;, double, max, =]
[NumberIsTooLargeException, {, double, min, =, getMin, (, ), ;, double, max, =, getMax, (, ), ;, final, double, initial, =]
[;, double, max, =, getMax, (, ), ;, final, double, initial, =, getStartValue, (, ), ;, final, double, functionValueAccuracy, =]
[getMax, (, ), ;, final, double, initial, =, getStartValue, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;]
[), ;, final, double, initial, =, getStartValue, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, verifySequence, (]
[final, double, initial, =, getStartValue, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, verifySequence, (, min, ,]
[initial, =, getStartValue, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, verifySequence, (, min, ,, initial, ,]
[final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, verifySequence, (, min, ,, initial, ,, max, ), ;, double, yInitial, =]
[functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, verifySequence, (, min, ,, initial, ,, max, ), ;, double, yInitial, =, computeObjectiveValue, (]
[;, verifySequence, (, min, ,, initial, ,, max, ), ;, double, yInitial, =, computeObjectiveValue, (, initial, ), ;, if, (]
[;, verifySequence, (, min, ,, initial, ,, max, ), ;, double, yInitial, =, computeObjectiveValue, (, initial, ), ;, if, (]
[;, verifySequence, (, min, ,, initial, ,, max, ), ;, double, yInitial, =, computeObjectiveValue, (, initial, ), ;, if, (]
[,, initial, ,, max, ), ;, double, yInitial, =, computeObjectiveValue, (, initial, ), ;, if, (, FastMath, ., abs, (]
[max, ), ;, double, yInitial, =, computeObjectiveValue, (, initial, ), ;, if, (, FastMath, ., abs, (, yInitial, ), <=]
[yInitial, =, computeObjectiveValue, (, initial, ), ;, if, (, FastMath, ., abs, (, yInitial, ), <=, functionValueAccuracy, ), {, return]
[;, if, (, FastMath, ., abs, (, yInitial, ), <=, functionValueAccuracy, ), {, return, initial, ;, }, double, yMin, =]
[(, FastMath, ., abs, (, yInitial, ), <=, functionValueAccuracy, ), {, return, initial, ;, }, double, yMin, =, computeObjectiveValue, (]
[yInitial, ), <=, functionValueAccuracy, ), {, return, initial, ;, }, double, yMin, =, computeObjectiveValue, (, min, ), ;, if, (]
[yInitial, ), <=, functionValueAccuracy, ), {, return, initial, ;, }, double, yMin, =, computeObjectiveValue, (, min, ), ;, if, (]
[yInitial, ), <=, functionValueAccuracy, ), {, return, initial, ;, }, double, yMin, =, computeObjectiveValue, (, min, ), ;, if, (]
[), {, return, initial, ;, }, double, yMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath, ., abs, (]
[initial, ;, }, double, yMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath, ., abs, (, yMin, ), <=]
[yMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath, ., abs, (, yMin, ), <=, functionValueAccuracy, ), {, return]
[), ;, if, (, FastMath, ., abs, (, yMin, ), <=, functionValueAccuracy, ), {, return, min, ;, }, if, (]
[), ;, if, (, FastMath, ., abs, (, yMin, ), <=, functionValueAccuracy, ), {, return, min, ;, }, if, (]
[), ;, if, (, FastMath, ., abs, (, yMin, ), <=, functionValueAccuracy, ), {, return, min, ;, }, if, (]
[if, (, FastMath, ., abs, (, yMin, ), <=, functionValueAccuracy, ), {, return, min, ;, }, if, (, yInitial, *]
[FastMath, ., abs, (, yMin, ), <=, functionValueAccuracy, ), {, return, min, ;, }, if, (, yInitial, *, yMin, <]
[yMin, ), <=, functionValueAccuracy, ), {, return, min, ;, }, if, (, yInitial, *, yMin, <, 0, ), {, return]
[<=, functionValueAccuracy, ), {, return, min, ;, }, if, (, yInitial, *, yMin, <, 0, ), {, return, brent, (]
[), {, return, min, ;, }, if, (, yInitial, *, yMin, <, 0, ), {, return, brent, (, min, ,]
[return, min, ;, }, if, (, yInitial, *, yMin, <, 0, ), {, return, brent, (, min, ,, initial, ,]
[;, }, if, (, yInitial, *, yMin, <, 0, ), {, return, brent, (, min, ,, initial, ,, yMin, ,]
[<, 0, ), {, return, brent, (, min, ,, initial, ,, yMin, ,, yInitial, ), ;, }, double, yMax, =]
[), {, return, brent, (, min, ,, initial, ,, yMin, ,, yInitial, ), ;, }, double, yMax, =, computeObjectiveValue, (]
[min, ,, initial, ,, yMin, ,, yInitial, ), ;, }, double, yMax, =, computeObjectiveValue, (, max, ), ;, if, (]
[min, ,, initial, ,, yMin, ,, yInitial, ), ;, }, double, yMax, =, computeObjectiveValue, (, max, ), ;, if, (]
[min, ,, initial, ,, yMin, ,, yInitial, ), ;, }, double, yMax, =, computeObjectiveValue, (, max, ), ;, if, (]
[yMin, ,, yInitial, ), ;, }, double, yMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath, ., abs, (]
[), ;, }, double, yMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath, ., abs, (, yMax, ), <=]
[yMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath, ., abs, (, yMax, ), <=, functionValueAccuracy, ), {, return]
[), ;, if, (, FastMath, ., abs, (, yMax, ), <=, functionValueAccuracy, ), {, return, max, ;, }, if, (]
[), ;, if, (, FastMath, ., abs, (, yMax, ), <=, functionValueAccuracy, ), {, return, max, ;, }, if, (]
[), ;, if, (, FastMath, ., abs, (, yMax, ), <=, functionValueAccuracy, ), {, return, max, ;, }, if, (]
[if, (, FastMath, ., abs, (, yMax, ), <=, functionValueAccuracy, ), {, return, max, ;, }, if, (, yInitial, *]
[FastMath, ., abs, (, yMax, ), <=, functionValueAccuracy, ), {, return, max, ;, }, if, (, yInitial, *, yMax, <]
[yMax, ), <=, functionValueAccuracy, ), {, return, max, ;, }, if, (, yInitial, *, yMax, <, 0, ), {, return]
[<=, functionValueAccuracy, ), {, return, max, ;, }, if, (, yInitial, *, yMax, <, 0, ), {, return, brent, (]
[), {, return, max, ;, }, if, (, yInitial, *, yMax, <, 0, ), {, return, brent, (, initial, ,]
[return, max, ;, }, if, (, yInitial, *, yMax, <, 0, ), {, return, brent, (, initial, ,, max, ,]
[;, }, if, (, yInitial, *, yMax, <, 0, ), {, return, brent, (, initial, ,, max, ,, yInitial, ,]
[*, yMax, <, 0, ), {, return, brent, (, initial, ,, max, ,, yInitial, ,, yMax, ), ;, }, throw]
[0, ), {, return, brent, (, initial, ,, max, ,, yInitial, ,, yMax, ), ;, }, throw, new, NoBracketingException, (]
[{, return, brent, (, initial, ,, max, ,, yInitial, ,, yMax, ), ;, }, throw, new, NoBracketingException, (, min, ,]
[brent, (, initial, ,, max, ,, yInitial, ,, yMax, ), ;, }, throw, new, NoBracketingException, (, min, ,, max, ,]
[initial, ,, max, ,, yInitial, ,, yMax, ), ;, }, throw, new, NoBracketingException, (, min, ,, max, ,, yMin, ,]
[private, double, brent, (, double, lo, ,, double, hi, ,, double, fLo, ,, double, fHi, ), {, double, a, =]
[lo, ,, double, hi, ,, double, fLo, ,, double, fHi, ), {, double, a, =, lo, ;, double, fa, =]
[double, fLo, ,, double, fHi, ), {, double, a, =, lo, ;, double, fa, =, fLo, ;, double, b, =]
[), {, double, a, =, lo, ;, double, fa, =, fLo, ;, double, b, =, hi, ;, double, fb, =]
[lo, ;, double, fa, =, fLo, ;, double, b, =, hi, ;, double, fb, =, fHi, ;, double, c, =]
[fLo, ;, double, b, =, hi, ;, double, fb, =, fHi, ;, double, c, =, a, ;, double, fc, =]
[hi, ;, double, fb, =, fHi, ;, double, c, =, a, ;, double, fc, =, fa, ;, double, d, =]
[hi, ;, double, fb, =, fHi, ;, double, c, =, a, ;, double, fc, =, fa, ;, double, d, =]
[double, fb, =, fHi, ;, double, c, =, a, ;, double, fc, =, fa, ;, double, d, =, b, -]
[double, c, =, a, ;, double, fc, =, fa, ;, double, d, =, b, -, a, ;, double, e, =]
[fc, =, fa, ;, double, d, =, b, -, a, ;, double, e, =, d, ;, final, double, t, =]
[-, a, ;, double, e, =, d, ;, final, double, t, =, getAbsoluteAccuracy, (, ), ;, final, double, eps, =]
[d, ;, final, double, t, =, getAbsoluteAccuracy, (, ), ;, final, double, eps, =, getRelativeAccuracy, (, ), ;, while, (]
[=, getAbsoluteAccuracy, (, ), ;, final, double, eps, =, getRelativeAccuracy, (, ), ;, while, (, true, ), {, if, (]
[=, getAbsoluteAccuracy, (, ), ;, final, double, eps, =, getRelativeAccuracy, (, ), ;, while, (, true, ), {, if, (]
[=, getAbsoluteAccuracy, (, ), ;, final, double, eps, =, getRelativeAccuracy, (, ), ;, while, (, true, ), {, if, (]
[;, final, double, eps, =, getRelativeAccuracy, (, ), ;, while, (, true, ), {, if, (, FastMath, ., abs, (]
[eps, =, getRelativeAccuracy, (, ), ;, while, (, true, ), {, if, (, FastMath, ., abs, (, fc, ), <]
[eps, =, getRelativeAccuracy, (, ), ;, while, (, true, ), {, if, (, FastMath, ., abs, (, fc, ), <]
[), ;, while, (, true, ), {, if, (, FastMath, ., abs, (, fc, ), <, FastMath, ., abs, (]
[true, ), {, if, (, FastMath, ., abs, (, fc, ), <, FastMath, ., abs, (, fb, ), ), {]
[{, if, (, FastMath, ., abs, (, fc, ), <, FastMath, ., abs, (, fb, ), ), {, a, =]
[(, FastMath, ., abs, (, fc, ), <, FastMath, ., abs, (, fb, ), ), {, a, =, b, ;]
[., abs, (, fc, ), <, FastMath, ., abs, (, fb, ), ), {, a, =, b, ;, b, =]
[(, fc, ), <, FastMath, ., abs, (, fb, ), ), {, a, =, b, ;, b, =, c, ;]
[), <, FastMath, ., abs, (, fb, ), ), {, a, =, b, ;, b, =, c, ;, c, =]
[FastMath, ., abs, (, fb, ), ), {, a, =, b, ;, b, =, c, ;, c, =, a, ;]
[abs, (, fb, ), ), {, a, =, b, ;, b, =, c, ;, c, =, a, ;, fa, =]
[fb, ), ), {, a, =, b, ;, b, =, c, ;, c, =, a, ;, fa, =, fb, ;]
[), {, a, =, b, ;, b, =, c, ;, c, =, a, ;, fa, =, fb, ;, fb, =]
[a, =, b, ;, b, =, c, ;, c, =, a, ;, fa, =, fb, ;, fb, =, fc, ;]
[b, ;, b, =, c, ;, c, =, a, ;, fa, =, fb, ;, fb, =, fc, ;, fc, =]
[=, a, ;, fa, =, fb, ;, fb, =, fc, ;, fc, =, fa, ;, }, final, double, tol, =]
[=, a, ;, fa, =, fb, ;, fb, =, fc, ;, fc, =, fa, ;, }, final, double, tol, =]
[=, a, ;, fa, =, fb, ;, fb, =, fc, ;, fc, =, fa, ;, }, final, double, tol, =]
[=, a, ;, fa, =, fb, ;, fb, =, fc, ;, fc, =, fa, ;, }, final, double, tol, =]
[;, fa, =, fb, ;, fb, =, fc, ;, fc, =, fa, ;, }, final, double, tol, =, 2, *]
[=, fb, ;, fb, =, fc, ;, fc, =, fa, ;, }, final, double, tol, =, 2, *, eps, *]
[=, fb, ;, fb, =, fc, ;, fc, =, fa, ;, }, final, double, tol, =, 2, *, eps, *]
[=, fc, ;, fc, =, fa, ;, }, final, double, tol, =, 2, *, eps, *, FastMath, ., abs, (]
[fc, =, fa, ;, }, final, double, tol, =, 2, *, eps, *, FastMath, ., abs, (, b, ), +]
[double, tol, =, 2, *, eps, *, FastMath, ., abs, (, b, ), +, t, ;, final, double, m, =]
[double, tol, =, 2, *, eps, *, FastMath, ., abs, (, b, ), +, t, ;, final, double, m, =]
[=, 2, *, eps, *, FastMath, ., abs, (, b, ), +, t, ;, final, double, m, =, 0.5, *]
[2, *, eps, *, FastMath, ., abs, (, b, ), +, t, ;, final, double, m, =, 0.5, *, (]
[2, *, eps, *, FastMath, ., abs, (, b, ), +, t, ;, final, double, m, =, 0.5, *, (]
[eps, *, FastMath, ., abs, (, b, ), +, t, ;, final, double, m, =, 0.5, *, (, c, -]
[(, b, ), +, t, ;, final, double, m, =, 0.5, *, (, c, -, b, ), ;, if, (]
[(, b, ), +, t, ;, final, double, m, =, 0.5, *, (, c, -, b, ), ;, if, (]
[(, b, ), +, t, ;, final, double, m, =, 0.5, *, (, c, -, b, ), ;, if, (]
[(, b, ), +, t, ;, final, double, m, =, 0.5, *, (, c, -, b, ), ;, if, (]
[t, ;, final, double, m, =, 0.5, *, (, c, -, b, ), ;, if, (, FastMath, ., abs, (]
[double, m, =, 0.5, *, (, c, -, b, ), ;, if, (, FastMath, ., abs, (, m, ), <=]
[=, 0.5, *, (, c, -, b, ), ;, if, (, FastMath, ., abs, (, m, ), <=, tol, ||]
[=, 0.5, *, (, c, -, b, ), ;, if, (, FastMath, ., abs, (, m, ), <=, tol, ||]
[c, -, b, ), ;, if, (, FastMath, ., abs, (, m, ), <=, tol, ||, Precision, ., equals, (]
[b, ), ;, if, (, FastMath, ., abs, (, m, ), <=, tol, ||, Precision, ., equals, (, fb, ,]
[FastMath, ., abs, (, m, ), <=, tol, ||, Precision, ., equals, (, fb, ,, 0, ), ), {, return]
[), <=, tol, ||, Precision, ., equals, (, fb, ,, 0, ), ), {, return, b, ;, }, if, (]
[), <=, tol, ||, Precision, ., equals, (, fb, ,, 0, ), ), {, return, b, ;, }, if, (]
[), <=, tol, ||, Precision, ., equals, (, fb, ,, 0, ), ), {, return, b, ;, }, if, (]
[), <=, tol, ||, Precision, ., equals, (, fb, ,, 0, ), ), {, return, b, ;, }, if, (]
[Precision, ., equals, (, fb, ,, 0, ), ), {, return, b, ;, }, if, (, FastMath, ., abs, (]
[(, fb, ,, 0, ), ), {, return, b, ;, }, if, (, FastMath, ., abs, (, e, ), <]
[,, 0, ), ), {, return, b, ;, }, if, (, FastMath, ., abs, (, e, ), <, tol, ||]
[,, 0, ), ), {, return, b, ;, }, if, (, FastMath, ., abs, (, e, ), <, tol, ||]
[,, 0, ), ), {, return, b, ;, }, if, (, FastMath, ., abs, (, e, ), <, tol, ||]
[{, return, b, ;, }, if, (, FastMath, ., abs, (, e, ), <, tol, ||, FastMath, ., abs, (]
[;, }, if, (, FastMath, ., abs, (, e, ), <, tol, ||, FastMath, ., abs, (, fa, ), <=]
[;, }, if, (, FastMath, ., abs, (, e, ), <, tol, ||, FastMath, ., abs, (, fa, ), <=]
[FastMath, ., abs, (, e, ), <, tol, ||, FastMath, ., abs, (, fa, ), <=, FastMath, ., abs, (]
[e, ), <, tol, ||, FastMath, ., abs, (, fa, ), <=, FastMath, ., abs, (, fb, ), ), {]
[<, tol, ||, FastMath, ., abs, (, fa, ), <=, FastMath, ., abs, (, fb, ), ), {, d, =]
[||, FastMath, ., abs, (, fa, ), <=, FastMath, ., abs, (, fb, ), ), {, d, =, m, ;]
[., abs, (, fa, ), <=, FastMath, ., abs, (, fb, ), ), {, d, =, m, ;, e, =]
[abs, (, fb, ), ), {, d, =, m, ;, e, =, d, ;, }, else, {, double, s, =]
[abs, (, fb, ), ), {, d, =, m, ;, e, =, d, ;, }, else, {, double, s, =]
[fb, ), ), {, d, =, m, ;, e, =, d, ;, }, else, {, double, s, =, fb, /]
[d, ;, }, else, {, double, s, =, fb, /, fa, ;, double, p, ;, double, q, ;, if, (]
[d, ;, }, else, {, double, s, =, fb, /, fa, ;, double, p, ;, double, q, ;, if, (]
[}, else, {, double, s, =, fb, /, fa, ;, double, p, ;, double, q, ;, if, (, a, ==]
[double, s, =, fb, /, fa, ;, double, p, ;, double, q, ;, if, (, a, ==, c, ), {]
[=, fb, /, fa, ;, double, p, ;, double, q, ;, if, (, a, ==, c, ), {, p, =]
[=, fb, /, fa, ;, double, p, ;, double, q, ;, if, (, a, ==, c, ), {, p, =]
[=, fb, /, fa, ;, double, p, ;, double, q, ;, if, (, a, ==, c, ), {, p, =]
[/, fa, ;, double, p, ;, double, q, ;, if, (, a, ==, c, ), {, p, =, 2, *]
[;, double, p, ;, double, q, ;, if, (, a, ==, c, ), {, p, =, 2, *, m, *]
[p, ;, double, q, ;, if, (, a, ==, c, ), {, p, =, 2, *, m, *, s, ;]
[double, q, ;, if, (, a, ==, c, ), {, p, =, 2, *, m, *, s, ;, q, =]
[double, q, ;, if, (, a, ==, c, ), {, p, =, 2, *, m, *, s, ;, q, =]
[;, if, (, a, ==, c, ), {, p, =, 2, *, m, *, s, ;, q, =, 1, -]
[c, ), {, p, =, 2, *, m, *, s, ;, q, =, 1, -, s, ;, }, else, {]
[{, p, =, 2, *, m, *, s, ;, q, =, 1, -, s, ;, }, else, {, q, =]
[{, p, =, 2, *, m, *, s, ;, q, =, 1, -, s, ;, }, else, {, q, =]
[=, 2, *, m, *, s, ;, q, =, 1, -, s, ;, }, else, {, q, =, fa, /]
[;, q, =, 1, -, s, ;, }, else, {, q, =, fa, /, fc, ;, final, double, r, =]
[;, q, =, 1, -, s, ;, }, else, {, q, =, fa, /, fc, ;, final, double, r, =]
[=, 1, -, s, ;, }, else, {, q, =, fa, /, fc, ;, final, double, r, =, fb, /]
[-, s, ;, }, else, {, q, =, fa, /, fc, ;, final, double, r, =, fb, /, fc, ;]
[;, }, else, {, q, =, fa, /, fc, ;, final, double, r, =, fb, /, fc, ;, p, =]
[;, }, else, {, q, =, fa, /, fc, ;, final, double, r, =, fb, /, fc, ;, p, =]
[else, {, q, =, fa, /, fc, ;, final, double, r, =, fb, /, fc, ;, p, =, s, *]
[{, q, =, fa, /, fc, ;, final, double, r, =, fb, /, fc, ;, p, =, s, *, (]
[{, q, =, fa, /, fc, ;, final, double, r, =, fb, /, fc, ;, p, =, s, *, (]
[{, q, =, fa, /, fc, ;, final, double, r, =, fb, /, fc, ;, p, =, s, *, (]
[{, q, =, fa, /, fc, ;, final, double, r, =, fb, /, fc, ;, p, =, s, *, (]
[{, q, =, fa, /, fc, ;, final, double, r, =, fb, /, fc, ;, p, =, s, *, (]
[=, fa, /, fc, ;, final, double, r, =, fb, /, fc, ;, p, =, s, *, (, 2, *]
[/, fc, ;, final, double, r, =, fb, /, fc, ;, p, =, s, *, (, 2, *, m, *]
[;, final, double, r, =, fb, /, fc, ;, p, =, s, *, (, 2, *, m, *, q, *]
[final, double, r, =, fb, /, fc, ;, p, =, s, *, (, 2, *, m, *, q, *, (]
[final, double, r, =, fb, /, fc, ;, p, =, s, *, (, 2, *, m, *, q, *, (]
[r, =, fb, /, fc, ;, p, =, s, *, (, 2, *, m, *, q, *, (, q, -]
[/, fc, ;, p, =, s, *, (, 2, *, m, *, q, *, (, q, -, r, ), -]
[/, fc, ;, p, =, s, *, (, 2, *, m, *, q, *, (, q, -, r, ), -]
[fc, ;, p, =, s, *, (, 2, *, m, *, q, *, (, q, -, r, ), -, (]
[fc, ;, p, =, s, *, (, 2, *, m, *, q, *, (, q, -, r, ), -, (]
[p, =, s, *, (, 2, *, m, *, q, *, (, q, -, r, ), -, (, b, -]
[*, (, 2, *, m, *, q, *, (, q, -, r, ), -, (, b, -, a, ), *]
[(, 2, *, m, *, q, *, (, q, -, r, ), -, (, b, -, a, ), *, (]
[(, 2, *, m, *, q, *, (, q, -, r, ), -, (, b, -, a, ), *, (]
[*, m, *, q, *, (, q, -, r, ), -, (, b, -, a, ), *, (, r, -]
[*, (, q, -, r, ), -, (, b, -, a, ), *, (, r, -, 1, ), ), ;]
[q, -, r, ), -, (, b, -, a, ), *, (, r, -, 1, ), ), ;, q, =]
[q, -, r, ), -, (, b, -, a, ), *, (, r, -, 1, ), ), ;, q, =]
[q, -, r, ), -, (, b, -, a, ), *, (, r, -, 1, ), ), ;, q, =]
[-, r, ), -, (, b, -, a, ), *, (, r, -, 1, ), ), ;, q, =, (]
[-, r, ), -, (, b, -, a, ), *, (, r, -, 1, ), ), ;, q, =, (]
[), -, (, b, -, a, ), *, (, r, -, 1, ), ), ;, q, =, (, q, -]
[b, -, a, ), *, (, r, -, 1, ), ), ;, q, =, (, q, -, 1, ), *]
[-, a, ), *, (, r, -, 1, ), ), ;, q, =, (, q, -, 1, ), *, (]
[-, a, ), *, (, r, -, 1, ), ), ;, q, =, (, q, -, 1, ), *, (]
[), *, (, r, -, 1, ), ), ;, q, =, (, q, -, 1, ), *, (, r, -]
[r, -, 1, ), ), ;, q, =, (, q, -, 1, ), *, (, r, -, 1, ), *]
[-, 1, ), ), ;, q, =, (, q, -, 1, ), *, (, r, -, 1, ), *, (]
[-, 1, ), ), ;, q, =, (, q, -, 1, ), *, (, r, -, 1, ), *, (]
[), ), ;, q, =, (, q, -, 1, ), *, (, r, -, 1, ), *, (, s, -]
[q, -, 1, ), *, (, r, -, 1, ), *, (, s, -, 1, ), ;, }, if, (]
[q, -, 1, ), *, (, r, -, 1, ), *, (, s, -, 1, ), ;, }, if, (]
[1, ), *, (, r, -, 1, ), *, (, s, -, 1, ), ;, }, if, (, p, >]
[(, r, -, 1, ), *, (, s, -, 1, ), ;, }, if, (, p, >, 0, ), {]
[-, 1, ), *, (, s, -, 1, ), ;, }, if, (, p, >, 0, ), {, q, =]
[1, ), *, (, s, -, 1, ), ;, }, if, (, p, >, 0, ), {, q, =, -]
[-, 1, ), ;, }, if, (, p, >, 0, ), {, q, =, -, q, ;, }, else, {]
[), ;, }, if, (, p, >, 0, ), {, q, =, -, q, ;, }, else, {, p, =]
[;, }, if, (, p, >, 0, ), {, q, =, -, q, ;, }, else, {, p, =, -]
[(, p, >, 0, ), {, q, =, -, q, ;, }, else, {, p, =, -, p, ;, }]
[>, 0, ), {, q, =, -, q, ;, }, else, {, p, =, -, p, ;, }, s, =]
[), {, q, =, -, q, ;, }, else, {, p, =, -, p, ;, }, s, =, e, ;]
[q, =, -, q, ;, }, else, {, p, =, -, p, ;, }, s, =, e, ;, e, =]
[;, }, else, {, p, =, -, p, ;, }, s, =, e, ;, e, =, d, ;, if, (]
[;, }, else, {, p, =, -, p, ;, }, s, =, e, ;, e, =, d, ;, if, (]
[;, }, else, {, p, =, -, p, ;, }, s, =, e, ;, e, =, d, ;, if, (]
[else, {, p, =, -, p, ;, }, s, =, e, ;, e, =, d, ;, if, (, p, >=]
[else, {, p, =, -, p, ;, }, s, =, e, ;, e, =, d, ;, if, (, p, >=]
[else, {, p, =, -, p, ;, }, s, =, e, ;, e, =, d, ;, if, (, p, >=]
[else, {, p, =, -, p, ;, }, s, =, e, ;, e, =, d, ;, if, (, p, >=]
[p, =, -, p, ;, }, s, =, e, ;, e, =, d, ;, if, (, p, >=, 1.5, *]
[-, p, ;, }, s, =, e, ;, e, =, d, ;, if, (, p, >=, 1.5, *, m, *]
[;, }, s, =, e, ;, e, =, d, ;, if, (, p, >=, 1.5, *, m, *, q, -]
[;, }, s, =, e, ;, e, =, d, ;, if, (, p, >=, 1.5, *, m, *, q, -]
[e, ;, e, =, d, ;, if, (, p, >=, 1.5, *, m, *, q, -, FastMath, ., abs, (]
[e, ;, e, =, d, ;, if, (, p, >=, 1.5, *, m, *, q, -, FastMath, ., abs, (]
[e, =, d, ;, if, (, p, >=, 1.5, *, m, *, q, -, FastMath, ., abs, (, tol, *]
[;, if, (, p, >=, 1.5, *, m, *, q, -, FastMath, ., abs, (, tol, *, q, ), ||]
[;, if, (, p, >=, 1.5, *, m, *, q, -, FastMath, ., abs, (, tol, *, q, ), ||]
[(, p, >=, 1.5, *, m, *, q, -, FastMath, ., abs, (, tol, *, q, ), ||, p, >=]
[(, p, >=, 1.5, *, m, *, q, -, FastMath, ., abs, (, tol, *, q, ), ||, p, >=]
[*, m, *, q, -, FastMath, ., abs, (, tol, *, q, ), ||, p, >=, FastMath, ., abs, (]
[*, m, *, q, -, FastMath, ., abs, (, tol, *, q, ), ||, p, >=, FastMath, ., abs, (]
[*, m, *, q, -, FastMath, ., abs, (, tol, *, q, ), ||, p, >=, FastMath, ., abs, (]
[*, q, -, FastMath, ., abs, (, tol, *, q, ), ||, p, >=, FastMath, ., abs, (, 0.5, *]
[-, FastMath, ., abs, (, tol, *, q, ), ||, p, >=, FastMath, ., abs, (, 0.5, *, s, *]
[(, tol, *, q, ), ||, p, >=, FastMath, ., abs, (, 0.5, *, s, *, q, ), ), {]
[*, q, ), ||, p, >=, FastMath, ., abs, (, 0.5, *, s, *, q, ), ), {, d, =]
[), ||, p, >=, FastMath, ., abs, (, 0.5, *, s, *, q, ), ), {, d, =, m, ;]
[p, >=, FastMath, ., abs, (, 0.5, *, s, *, q, ), ), {, d, =, m, ;, e, =]
[(, 0.5, *, s, *, q, ), ), {, d, =, m, ;, e, =, d, ;, }, else, {]
[*, s, *, q, ), ), {, d, =, m, ;, e, =, d, ;, }, else, {, d, =]
[*, s, *, q, ), ), {, d, =, m, ;, e, =, d, ;, }, else, {, d, =]
[*, q, ), ), {, d, =, m, ;, e, =, d, ;, }, else, {, d, =, p, /]
[{, d, =, m, ;, e, =, d, ;, }, else, {, d, =, p, /, q, ;, }, }]
[=, m, ;, e, =, d, ;, }, else, {, d, =, p, /, q, ;, }, }, a, =]
[;, e, =, d, ;, }, else, {, d, =, p, /, q, ;, }, }, a, =, b, ;]
[=, d, ;, }, else, {, d, =, p, /, q, ;, }, }, a, =, b, ;, fa, =]
[else, {, d, =, p, /, q, ;, }, }, a, =, b, ;, fa, =, fb, ;, if, (]
[else, {, d, =, p, /, q, ;, }, }, a, =, b, ;, fa, =, fb, ;, if, (]
[else, {, d, =, p, /, q, ;, }, }, a, =, b, ;, fa, =, fb, ;, if, (]
[p, /, q, ;, }, }, a, =, b, ;, fa, =, fb, ;, if, (, FastMath, ., abs, (]
[;, }, }, a, =, b, ;, fa, =, fb, ;, if, (, FastMath, ., abs, (, d, ), >]
[a, =, b, ;, fa, =, fb, ;, if, (, FastMath, ., abs, (, d, ), >, tol, ), {]
[b, ;, fa, =, fb, ;, if, (, FastMath, ., abs, (, d, ), >, tol, ), {, b, +=]
[if, (, FastMath, ., abs, (, d, ), >, tol, ), {, b, +=, d, ;, }, else, if, (]
[if, (, FastMath, ., abs, (, d, ), >, tol, ), {, b, +=, d, ;, }, else, if, (]
[FastMath, ., abs, (, d, ), >, tol, ), {, b, +=, d, ;, }, else, if, (, m, >]
[(, d, ), >, tol, ), {, b, +=, d, ;, }, else, if, (, m, >, 0, ), {]
[), >, tol, ), {, b, +=, d, ;, }, else, if, (, m, >, 0, ), {, b, +=]
[b, +=, d, ;, }, else, if, (, m, >, 0, ), {, b, +=, tol, ;, }, else, {]
[d, ;, }, else, if, (, m, >, 0, ), {, b, +=, tol, ;, }, else, {, b, -=]
[else, if, (, m, >, 0, ), {, b, +=, tol, ;, }, else, {, b, -=, tol, ;, }]
[(, m, >, 0, ), {, b, +=, tol, ;, }, else, {, b, -=, tol, ;, }, fb, =]
[>, 0, ), {, b, +=, tol, ;, }, else, {, b, -=, tol, ;, }, fb, =, computeObjectiveValue, (]
[+=, tol, ;, }, else, {, b, -=, tol, ;, }, fb, =, computeObjectiveValue, (, b, ), ;, if, (]
[+=, tol, ;, }, else, {, b, -=, tol, ;, }, fb, =, computeObjectiveValue, (, b, ), ;, if, (]
[tol, ;, }, else, {, b, -=, tol, ;, }, fb, =, computeObjectiveValue, (, b, ), ;, if, (, (]
[tol, ;, }, else, {, b, -=, tol, ;, }, fb, =, computeObjectiveValue, (, b, ), ;, if, (, (]
[tol, ;, }, else, {, b, -=, tol, ;, }, fb, =, computeObjectiveValue, (, b, ), ;, if, (, (]
[}, else, {, b, -=, tol, ;, }, fb, =, computeObjectiveValue, (, b, ), ;, if, (, (, fb, >]
[{, b, -=, tol, ;, }, fb, =, computeObjectiveValue, (, b, ), ;, if, (, (, fb, >, 0, &&]
[{, b, -=, tol, ;, }, fb, =, computeObjectiveValue, (, b, ), ;, if, (, (, fb, >, 0, &&]
[-=, tol, ;, }, fb, =, computeObjectiveValue, (, b, ), ;, if, (, (, fb, >, 0, &&, fc, >]
[}, fb, =, computeObjectiveValue, (, b, ), ;, if, (, (, fb, >, 0, &&, fc, >, 0, ), ||]
[fb, =, computeObjectiveValue, (, b, ), ;, if, (, (, fb, >, 0, &&, fc, >, 0, ), ||, (]
[fb, =, computeObjectiveValue, (, b, ), ;, if, (, (, fb, >, 0, &&, fc, >, 0, ), ||, (]
[fb, =, computeObjectiveValue, (, b, ), ;, if, (, (, fb, >, 0, &&, fc, >, 0, ), ||, (]
[computeObjectiveValue, (, b, ), ;, if, (, (, fb, >, 0, &&, fc, >, 0, ), ||, (, fb, <=]
[b, ), ;, if, (, (, fb, >, 0, &&, fc, >, 0, ), ||, (, fb, <=, 0, &&]
[b, ), ;, if, (, (, fb, >, 0, &&, fc, >, 0, ), ||, (, fb, <=, 0, &&]
[;, if, (, (, fb, >, 0, &&, fc, >, 0, ), ||, (, fb, <=, 0, &&, fc, <=]
[fb, >, 0, &&, fc, >, 0, ), ||, (, fb, <=, 0, &&, fc, <=, 0, ), ), {]
[0, &&, fc, >, 0, ), ||, (, fb, <=, 0, &&, fc, <=, 0, ), ), {, c, =]
[fc, >, 0, ), ||, (, fb, <=, 0, &&, fc, <=, 0, ), ), {, c, =, a, ;]
[0, ), ||, (, fb, <=, 0, &&, fc, <=, 0, ), ), {, c, =, a, ;, fc, =]
[||, (, fb, <=, 0, &&, fc, <=, 0, ), ), {, c, =, a, ;, fc, =, fa, ;]
[fb, <=, 0, &&, fc, <=, 0, ), ), {, c, =, a, ;, fc, =, fa, ;, d, =]
[fb, <=, 0, &&, fc, <=, 0, ), ), {, c, =, a, ;, fc, =, fa, ;, d, =]
[0, &&, fc, <=, 0, ), ), {, c, =, a, ;, fc, =, fa, ;, d, =, b, -]
[fc, <=, 0, ), ), {, c, =, a, ;, fc, =, fa, ;, d, =, b, -, a, ;]
[0, ), ), {, c, =, a, ;, fc, =, fa, ;, d, =, b, -, a, ;, e, =]
