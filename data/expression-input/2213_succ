[;, private, Deque, <, Renamer, >, nameStack, =, new, ArrayDeque, <, Renamer, >, (, ), ;, private, final, Renamer, rootRenamer]
[;, private, final, Renamer, rootRenamer, ;, MakeDeclaredNamesUnique, (, ), {, this, (, new, ContextualRenamer, (, ), ), ;, }, MakeDeclaredNamesUnique]
[), ;, }, MakeDeclaredNamesUnique, (, Renamer, renamer, ), {, this, ., rootRenamer, =, renamer, ;, }, static, CompilerPass, getContextualRenameInverter, (]
[=, renamer, ;, }, static, CompilerPass, getContextualRenameInverter, (, AbstractCompiler, compiler, ), {, return, new, ContextualRenameInverter, (, compiler, ), ;, }]
[., rootRenamer, =, renamer, ;, }, static, CompilerPass, getContextualRenameInverter, (, AbstractCompiler, compiler, ), {, return, new, ContextualRenameInverter, (, compiler, )]
[;, }, static, CompilerPass, getContextualRenameInverter, (, AbstractCompiler, compiler, ), {, return, new, ContextualRenameInverter, (, compiler, ), ;, }, @, Override]
[;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, declarationRoot, =, t, ., getScopeRoot, (, )]
[), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, declarationRoot, =, t, ., getScopeRoot, (]
[;, Renamer, renamer, ;, if, (, nameStack, ., isEmpty, (, ), ), {, Preconditions, ., checkState, (, !, declarationRoot, .]
[., getScopeRoot, (, ), ;, Renamer, renamer, ;, if, (, nameStack, ., isEmpty, (, ), ), {, Preconditions, ., checkState]
[), {, Preconditions, ., checkState, (, !, declarationRoot, ., isFunction, (, ), ||, !, (, rootRenamer, instanceof, ContextualRenamer, ), )]
[., isEmpty, (, ), ), {, Preconditions, ., checkState, (, !, declarationRoot, ., isFunction, (, ), ||, !, (, rootRenamer]
[;, Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;, renamer, =, rootRenamer, ;, }, else, {, renamer]
[., checkState, (, !, declarationRoot, ., isFunction, (, ), ||, !, (, rootRenamer, instanceof, ContextualRenamer, ), ), ;, Preconditions, .]
[), ;, Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;, renamer, =, rootRenamer, ;, }, else, {]
[||, !, (, rootRenamer, instanceof, ContextualRenamer, ), ), ;, Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;]
[||, !, (, rootRenamer, instanceof, ContextualRenamer, ), ), ;, Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;]
[., isFunction, (, ), ||, !, (, rootRenamer, instanceof, ContextualRenamer, ), ), ;, Preconditions, ., checkState, (, t, ., inGlobalScope]
[), ;, Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;, renamer, =, rootRenamer, ;, }, else, {]
[), ;, Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;, renamer, =, rootRenamer, ;, }, else, {]
[), ), ;, Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;, renamer, =, rootRenamer, ;, }, else]
[instanceof, ContextualRenamer, ), ), ;, Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), ), ;, renamer, =, rootRenamer, ;]
[;, renamer, =, rootRenamer, ;, }, else, {, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, ), ;]
[., checkState, (, t, ., inGlobalScope, (, ), ), ;, renamer, =, rootRenamer, ;, }, else, {, renamer, =, nameStack]
[), ;, renamer, =, rootRenamer, ;, }, else, {, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, )]
[., inGlobalScope, (, ), ), ;, renamer, =, rootRenamer, ;, }, else, {, renamer, =, nameStack, ., peek, (, )]
[=, rootRenamer, ;, }, else, {, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, ), ;, }, if]
[;, }, else, {, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, ), ;, }, if, (, !]
[=, nameStack, ., peek, (, ), ., forChildScope, (, ), ;, }, if, (, !, declarationRoot, ., isFunction, (, )]
[;, }, if, (, !, declarationRoot, ., isFunction, (, ), ), {, findDeclaredNames, (, declarationRoot, ,, null, ,, renamer, )]
[., forChildScope, (, ), ;, }, if, (, !, declarationRoot, ., isFunction, (, ), ), {, findDeclaredNames, (, declarationRoot, ,]
[., peek, (, ), ., forChildScope, (, ), ;, }, if, (, !, declarationRoot, ., isFunction, (, ), ), {]
[), {, findDeclaredNames, (, declarationRoot, ,, null, ,, renamer, ), ;, }, nameStack, ., push, (, renamer, ), ;, }]
[), {, findDeclaredNames, (, declarationRoot, ,, null, ,, renamer, ), ;, }, nameStack, ., push, (, renamer, ), ;, }]
[., isFunction, (, ), ), {, findDeclaredNames, (, declarationRoot, ,, null, ,, renamer, ), ;, }, nameStack, ., push, (]
[;, }, nameStack, ., push, (, renamer, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {]
[,, null, ,, renamer, ), ;, }, nameStack, ., push, (, renamer, ), ;, }, @, Override, public, void, exitScope]
[,, renamer, ), ;, }, nameStack, ., push, (, renamer, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal]
[), ;, }, nameStack, ., push, (, renamer, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, )]
[;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, !, t, ., inGlobalScope, (, )]
[., push, (, renamer, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, !]
[), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, !, t, ., inGlobalScope, (]
[), {, nameStack, ., pop, (, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node]
[), {, nameStack, ., pop, (, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node]
[., inGlobalScope, (, ), ), {, nameStack, ., pop, (, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (]
[;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch]
[., pop, (, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node]
[), {, case, Token, ., FUNCTION, :, {, Renamer, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, )]
[., getType, (, ), ), {, case, Token, ., FUNCTION, :, {, Renamer, renamer, =, nameStack, ., peek, (, )]
[:, {, Renamer, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, ), ;, String, name, =, n, .]
[., FUNCTION, :, {, Renamer, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, ), ;, String, name, =]
[;, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (, name, !=, null, &&]
[., forChildScope, (, ), ;, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[., peek, (, ), ., forChildScope, (, ), ;, String, name, =, n, ., getFirstChild, (, ), ., getString, (]
[;, if, (, name, !=, null, &&, !, name, ., isEmpty, (, ), &&, parent, !=, null, &&, !, NodeUtil]
[., getString, (, ), ;, if, (, name, !=, null, &&, !, name, ., isEmpty, (, ), &&, parent, !=]
[., getFirstChild, (, ), ., getString, (, ), ;, if, (, name, !=, null, &&, !, name, ., isEmpty, (]
[), {, renamer, ., addDeclaredName, (, name, ), ;, }, nameStack, ., push, (, renamer, ), ;, }, break, ;]
[&&, !, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, renamer, ., addDeclaredName, (, name, ), ;, }, nameStack, .]
[&&, parent, !=, null, &&, !, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, renamer, ., addDeclaredName, (, name, )]
[&&, !, name, ., isEmpty, (, ), &&, parent, !=, null, &&, !, NodeUtil, ., isFunctionDeclaration, (, n, ), )]
[!=, null, &&, !, name, ., isEmpty, (, ), &&, parent, !=, null, &&, !, NodeUtil, ., isFunctionDeclaration, (, n]
[&&, !, name, ., isEmpty, (, ), &&, parent, !=, null, &&, !, NodeUtil, ., isFunctionDeclaration, (, n, ), )]
[&&, parent, !=, null, &&, !, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, renamer, ., addDeclaredName, (, name, )]
[&&, parent, !=, null, &&, !, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, renamer, ., addDeclaredName, (, name, )]
[., isEmpty, (, ), &&, parent, !=, null, &&, !, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, renamer, .]
[&&, !, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, renamer, ., addDeclaredName, (, name, ), ;, }, nameStack, .]
[!=, null, &&, !, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, renamer, ., addDeclaredName, (, name, ), ;, }]
[&&, !, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, renamer, ., addDeclaredName, (, name, ), ;, }, nameStack, .]
[), {, renamer, ., addDeclaredName, (, name, ), ;, }, nameStack, ., push, (, renamer, ), ;, }, break, ;]
[), {, renamer, ., addDeclaredName, (, name, ), ;, }, nameStack, ., push, (, renamer, ), ;, }, break, ;]
[., isFunctionDeclaration, (, n, ), ), {, renamer, ., addDeclaredName, (, name, ), ;, }, nameStack, ., push, (, renamer]
[), ), {, renamer, ., addDeclaredName, (, name, ), ;, }, nameStack, ., push, (, renamer, ), ;, }, break]
[;, }, nameStack, ., push, (, renamer, ), ;, }, break, ;, case, Token, ., PARAM_LIST, :, {, Renamer, renamer]
[., addDeclaredName, (, name, ), ;, }, nameStack, ., push, (, renamer, ), ;, }, break, ;, case, Token, .]
[), ;, }, nameStack, ., push, (, renamer, ), ;, }, break, ;, case, Token, ., PARAM_LIST, :, {, Renamer]
[;, }, break, ;, case, Token, ., PARAM_LIST, :, {, Renamer, renamer, =, nameStack, ., peek, (, ), ., forChildScope]
[., push, (, renamer, ), ;, }, break, ;, case, Token, ., PARAM_LIST, :, {, Renamer, renamer, =, nameStack, .]
[), ;, }, break, ;, case, Token, ., PARAM_LIST, :, {, Renamer, renamer, =, nameStack, ., peek, (, ), .]
[:, {, Renamer, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, ), ;, for, (, Node, c, =]
[., PARAM_LIST, :, {, Renamer, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, ), ;, for, (, Node]
[;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, .]
[., forChildScope, (, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[., peek, (, ), ., forChildScope, (, ), ;, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, String, name, =, c, ., getString]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, String, name]
[;, c, =, c, ., getNext, (, ), ), {, String, name, =, c, ., getString, (, ), ;, renamer]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, String, name, =, c, ., getString, (, )]
[;, c, =, c, ., getNext, (, ), ), {, String, name, =, c, ., getString, (, ), ;, renamer]
[=, c, ., getNext, (, ), ), {, String, name, =, c, ., getString, (, ), ;, renamer, ., addDeclaredName]
[), {, String, name, =, c, ., getString, (, ), ;, renamer, ., addDeclaredName, (, name, ), ;, }, Node]
[., getNext, (, ), ), {, String, name, =, c, ., getString, (, ), ;, renamer, ., addDeclaredName, (, name]
[;, renamer, ., addDeclaredName, (, name, ), ;, }, Node, functionBody, =, n, ., getNext, (, ), ;, findDeclaredNames, (]
[., getString, (, ), ;, renamer, ., addDeclaredName, (, name, ), ;, }, Node, functionBody, =, n, ., getNext, (]
[;, }, Node, functionBody, =, n, ., getNext, (, ), ;, findDeclaredNames, (, functionBody, ,, null, ,, renamer, ), ;]
[., addDeclaredName, (, name, ), ;, }, Node, functionBody, =, n, ., getNext, (, ), ;, findDeclaredNames, (, functionBody, ,]
[), ;, }, Node, functionBody, =, n, ., getNext, (, ), ;, findDeclaredNames, (, functionBody, ,, null, ,, renamer, )]
[;, findDeclaredNames, (, functionBody, ,, null, ,, renamer, ), ;, nameStack, ., push, (, renamer, ), ;, }, break, ;]
[., getNext, (, ), ;, findDeclaredNames, (, functionBody, ,, null, ,, renamer, ), ;, nameStack, ., push, (, renamer, )]
[;, nameStack, ., push, (, renamer, ), ;, }, break, ;, case, Token, ., CATCH, :, {, Renamer, renamer, =]
[,, null, ,, renamer, ), ;, nameStack, ., push, (, renamer, ), ;, }, break, ;, case, Token, ., CATCH]
[,, renamer, ), ;, nameStack, ., push, (, renamer, ), ;, }, break, ;, case, Token, ., CATCH, :, {]
[), ;, nameStack, ., push, (, renamer, ), ;, }, break, ;, case, Token, ., CATCH, :, {, Renamer, renamer]
[;, }, break, ;, case, Token, ., CATCH, :, {, Renamer, renamer, =, nameStack, ., peek, (, ), ., forChildScope]
[., push, (, renamer, ), ;, }, break, ;, case, Token, ., CATCH, :, {, Renamer, renamer, =, nameStack, .]
[), ;, }, break, ;, case, Token, ., CATCH, :, {, Renamer, renamer, =, nameStack, ., peek, (, ), .]
[:, {, Renamer, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, ), ;, String, name, =, n, .]
[., CATCH, :, {, Renamer, renamer, =, nameStack, ., peek, (, ), ., forChildScope, (, ), ;, String, name, =]
[;, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, renamer, ., addDeclaredName, (, name, )]
[., forChildScope, (, ), ;, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, renamer, .]
[., peek, (, ), ., forChildScope, (, ), ;, String, name, =, n, ., getFirstChild, (, ), ., getString, (]
[;, renamer, ., addDeclaredName, (, name, ), ;, nameStack, ., push, (, renamer, ), ;, }, break, ;, }, return]
[., getString, (, ), ;, renamer, ., addDeclaredName, (, name, ), ;, nameStack, ., push, (, renamer, ), ;, }]
[., getFirstChild, (, ), ., getString, (, ), ;, renamer, ., addDeclaredName, (, name, ), ;, nameStack, ., push, (]
[;, nameStack, ., push, (, renamer, ), ;, }, break, ;, }, return, true, ;, }, @, Override, public, void]
[., addDeclaredName, (, name, ), ;, nameStack, ., push, (, renamer, ), ;, }, break, ;, }, return, true, ;]
[), ;, nameStack, ., push, (, renamer, ), ;, }, break, ;, }, return, true, ;, }, @, Override, public]
[;, }, break, ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[., push, (, renamer, ), ;, }, break, ;, }, return, true, ;, }, @, Override, public, void, visit, (]
[), ;, }, break, ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[), {, case, Token, ., NAME, :, String, newName, =, getReplacementName, (, n, ., getString, (, ), ), ;, if]
[., getType, (, ), ), {, case, Token, ., NAME, :, String, newName, =, getReplacementName, (, n, ., getString, (]
[:, String, newName, =, getReplacementName, (, n, ., getString, (, ), ), ;, if, (, newName, !=, null, ), {]
[., NAME, :, String, newName, =, getReplacementName, (, n, ., getString, (, ), ), ;, if, (, newName, !=, null]
[;, if, (, newName, !=, null, ), {, Renamer, renamer, =, nameStack, ., peek, (, ), ;, if, (, renamer]
[), ;, if, (, newName, !=, null, ), {, Renamer, renamer, =, nameStack, ., peek, (, ), ;, if, (]
[., getString, (, ), ), ;, if, (, newName, !=, null, ), {, Renamer, renamer, =, nameStack, ., peek, (]
[), {, Renamer, renamer, =, nameStack, ., peek, (, ), ;, if, (, renamer, ., stripConstIfReplaced, (, ), ), {]
[!=, null, ), {, Renamer, renamer, =, nameStack, ., peek, (, ), ;, if, (, renamer, ., stripConstIfReplaced, (, )]
[), {, Renamer, renamer, =, nameStack, ., peek, (, ), ;, if, (, renamer, ., stripConstIfReplaced, (, ), ), {]
[;, if, (, renamer, ., stripConstIfReplaced, (, ), ), {, n, ., removeProp, (, Node, ., IS_CONSTANT_NAME, ), ;, }]
[., peek, (, ), ;, if, (, renamer, ., stripConstIfReplaced, (, ), ), {, n, ., removeProp, (, Node, .]
[), {, n, ., removeProp, (, Node, ., IS_CONSTANT_NAME, ), ;, }, n, ., setString, (, newName, ), ;, t]
[., stripConstIfReplaced, (, ), ), {, n, ., removeProp, (, Node, ., IS_CONSTANT_NAME, ), ;, }, n, ., setString, (]
[;, }, n, ., setString, (, newName, ), ;, t, ., getCompiler, (, ), ., reportCodeChange, (, ), ;, }]
[., removeProp, (, Node, ., IS_CONSTANT_NAME, ), ;, }, n, ., setString, (, newName, ), ;, t, ., getCompiler, (]
[), ;, }, n, ., setString, (, newName, ), ;, t, ., getCompiler, (, ), ., reportCodeChange, (, ), ;]
[., IS_CONSTANT_NAME, ), ;, }, n, ., setString, (, newName, ), ;, t, ., getCompiler, (, ), ., reportCodeChange, (]
[;, t, ., getCompiler, (, ), ., reportCodeChange, (, ), ;, }, break, ;, case, Token, ., FUNCTION, :, nameStack]
[., setString, (, newName, ), ;, t, ., getCompiler, (, ), ., reportCodeChange, (, ), ;, }, break, ;, case]
[), ;, t, ., getCompiler, (, ), ., reportCodeChange, (, ), ;, }, break, ;, case, Token, ., FUNCTION, :]
[;, }, break, ;, case, Token, ., FUNCTION, :, nameStack, ., pop, (, ), ;, nameStack, ., pop, (, )]
[., reportCodeChange, (, ), ;, }, break, ;, case, Token, ., FUNCTION, :, nameStack, ., pop, (, ), ;, nameStack]
[., getCompiler, (, ), ., reportCodeChange, (, ), ;, }, break, ;, case, Token, ., FUNCTION, :, nameStack, ., pop]
[:, nameStack, ., pop, (, ), ;, nameStack, ., pop, (, ), ;, break, ;, case, Token, ., PARAM_LIST, :]
[., FUNCTION, :, nameStack, ., pop, (, ), ;, nameStack, ., pop, (, ), ;, break, ;, case, Token, .]
[;, nameStack, ., pop, (, ), ;, break, ;, case, Token, ., PARAM_LIST, :, break, ;, case, Token, ., CATCH]
[., pop, (, ), ;, nameStack, ., pop, (, ), ;, break, ;, case, Token, ., PARAM_LIST, :, break, ;]
[;, break, ;, case, Token, ., PARAM_LIST, :, break, ;, case, Token, ., CATCH, :, nameStack, ., pop, (, )]
[., pop, (, ), ;, break, ;, case, Token, ., PARAM_LIST, :, break, ;, case, Token, ., CATCH, :, nameStack]
[:, break, ;, case, Token, ., CATCH, :, nameStack, ., pop, (, ), ;, break, ;, }, }, private, String]
[., PARAM_LIST, :, break, ;, case, Token, ., CATCH, :, nameStack, ., pop, (, ), ;, break, ;, }, }]
[:, nameStack, ., pop, (, ), ;, break, ;, }, }, private, String, getReplacementName, (, String, oldName, ), {, for]
[., CATCH, :, nameStack, ., pop, (, ), ;, break, ;, }, }, private, String, getReplacementName, (, String, oldName, )]
[;, break, ;, }, }, private, String, getReplacementName, (, String, oldName, ), {, for, (, Renamer, names, :, nameStack, )]
[., pop, (, ), ;, break, ;, }, }, private, String, getReplacementName, (, String, oldName, ), {, for, (, Renamer]
[), {, String, newName, =, names, ., getReplacementName, (, oldName, ), ;, if, (, newName, !=, null, ), {, return]
[;, if, (, newName, !=, null, ), {, return, newName, ;, }, }, return, null, ;, }, private, void, findDeclaredNames]
[., getReplacementName, (, oldName, ), ;, if, (, newName, !=, null, ), {, return, newName, ;, }, }, return, null]
[), ;, if, (, newName, !=, null, ), {, return, newName, ;, }, }, return, null, ;, }, private, void]
[), {, return, newName, ;, }, }, return, null, ;, }, private, void, findDeclaredNames, (, Node, n, ,, Node, parent]
[!=, null, ), {, return, newName, ;, }, }, return, null, ;, }, private, void, findDeclaredNames, (, Node, n, ,]
[), {, return, newName, ;, }, }, return, null, ;, }, private, void, findDeclaredNames, (, Node, n, ,, Node, parent]
[;, }, }, return, null, ;, }, private, void, findDeclaredNames, (, Node, n, ,, Node, parent, ,, Renamer, renamer, )]
[;, }, private, void, findDeclaredNames, (, Node, n, ,, Node, parent, ,, Renamer, renamer, ), {, if, (, parent, ==]
[), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, renamer, ., addDeclaredName, (, n, ., getString, (]
[||, n, ==, parent, ., getFirstChild, (, ), ), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {]
[||, !, parent, ., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, ), ), {, if, (, NodeUtil]
[==, null, ||, !, parent, ., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, ), ), {, if]
[||, !, parent, ., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, ), ), {, if, (, NodeUtil]
[||, n, ==, parent, ., getFirstChild, (, ), ), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {]
[||, n, ==, parent, ., getFirstChild, (, ), ), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {]
[., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, ), ), {, if, (, NodeUtil, ., isVarDeclaration, (]
[), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, renamer, ., addDeclaredName, (, n, ., getString, (]
[==, parent, ., getFirstChild, (, ), ), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, renamer, .]
[), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, renamer, ., addDeclaredName, (, n, ., getString, (]
[., getFirstChild, (, ), ), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, renamer, ., addDeclaredName, (]
[), {, renamer, ., addDeclaredName, (, n, ., getString, (, ), ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration]
[., isVarDeclaration, (, n, ), ), {, renamer, ., addDeclaredName, (, n, ., getString, (, ), ), ;, }, else]
[), ), {, renamer, ., addDeclaredName, (, n, ., getString, (, ), ), ;, }, else, if, (, NodeUtil, .]
[;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =, n, ., getFirstChild, (]
[., addDeclaredName, (, n, ., getString, (, ), ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, )]
[), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =, n, ., getFirstChild]
[., getString, (, ), ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, nameNode]
[), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, renamer, ., addDeclaredName, (, nameNode, ., getString, (, )]
[., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, renamer, ., addDeclaredName, (]
[), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, renamer, ., addDeclaredName, (, nameNode, ., getString, (]
[;, renamer, ., addDeclaredName, (, nameNode, ., getString, (, ), ), ;, }, for, (, Node, c, =, n, .]
[., getFirstChild, (, ), ;, renamer, ., addDeclaredName, (, nameNode, ., getString, (, ), ), ;, }, for, (, Node]
[;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c]
[., addDeclaredName, (, nameNode, ., getString, (, ), ), ;, }, for, (, Node, c, =, n, ., getFirstChild, (]
[), ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[., getString, (, ), ), ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, findDeclaredNames, (, c, ,, n, ,]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, findDeclaredNames, (]
[;, c, =, c, ., getNext, (, ), ), {, findDeclaredNames, (, c, ,, n, ,, renamer, ), ;, }]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, findDeclaredNames, (, c, ,, n, ,, renamer, )]
[;, c, =, c, ., getNext, (, ), ), {, findDeclaredNames, (, c, ,, n, ,, renamer, ), ;, }]
[=, c, ., getNext, (, ), ), {, findDeclaredNames, (, c, ,, n, ,, renamer, ), ;, }, }, }]
[), {, findDeclaredNames, (, c, ,, n, ,, renamer, ), ;, }, }, }, interface, Renamer, {, void, addDeclaredName, (]
[., getNext, (, ), ), {, findDeclaredNames, (, c, ,, n, ,, renamer, ), ;, }, }, }, interface, Renamer]
[;, }, }, }, interface, Renamer, {, void, addDeclaredName, (, String, name, ), ;, String, getReplacementName, (, String, oldName, )]
[,, n, ,, renamer, ), ;, }, }, }, interface, Renamer, {, void, addDeclaredName, (, String, name, ), ;, String]
[,, renamer, ), ;, }, }, }, interface, Renamer, {, void, addDeclaredName, (, String, name, ), ;, String, getReplacementName, (]
[), ;, }, }, }, interface, Renamer, {, void, addDeclaredName, (, String, name, ), ;, String, getReplacementName, (, String, oldName]
[;, private, Deque, <, Set, <, String, >, >, referenceStack, =, new, ArrayDeque, <, Set, <, String, >, >, (]
[., of, (, ), ;, private, Deque, <, Set, <, String, >, >, referenceStack, =, new, ArrayDeque, <, Set, <]
[;, private, Map, <, String, ,, List, <, Node, >, >, nameMap, =, Maps, ., newHashMap, (, ), ;, private]
[;, private, ContextualRenameInverter, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, @, Override, public, void, process]
[., newHashMap, (, ), ;, private, ContextualRenameInverter, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, @]
[=, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, js, ), {, NodeTraversal, ., traverse]
[., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, js, ), {, NodeTraversal]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, js, ), {, NodeTraversal, ., traverse, (, compiler]
[;, }, public, static, String, getOrginalName, (, String, name, ), {, int, index, =, indexOfSeparator, (, name, ), ;, return]
[., traverse, (, compiler, ,, js, ,, this, ), ;, }, public, static, String, getOrginalName, (, String, name, ), {]
[,, js, ,, this, ), ;, }, public, static, String, getOrginalName, (, String, name, ), {, int, index, =, indexOfSeparator]
[,, this, ), ;, }, public, static, String, getOrginalName, (, String, name, ), {, int, index, =, indexOfSeparator, (, name]
[), ;, }, public, static, String, getOrginalName, (, String, name, ), {, int, index, =, indexOfSeparator, (, name, ), ;]
[;, return, (, index, ==, -, 1, ), ?, name, :, name, ., substring, (, 0, ,, index, ), ;]
[), ;, return, (, index, ==, -, 1, ), ?, name, :, name, ., substring, (, 0, ,, index, )]
[;, }, private, static, int, indexOfSeparator, (, String, name, ), {, return, name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, )]
[?, name, :, name, ., substring, (, 0, ,, index, ), ;, }, private, static, int, indexOfSeparator, (, String, name]
[), ?, name, :, name, ., substring, (, 0, ,, index, ), ;, }, private, static, int, indexOfSeparator, (, String]
[==, -, 1, ), ?, name, :, name, ., substring, (, 0, ,, index, ), ;, }, private, static, int]
[), ?, name, :, name, ., substring, (, 0, ,, index, ), ;, }, private, static, int, indexOfSeparator, (, String]
[), ?, name, :, name, ., substring, (, 0, ,, index, ), ;, }, private, static, int, indexOfSeparator, (, String]
[:, name, ., substring, (, 0, ,, index, ), ;, }, private, static, int, indexOfSeparator, (, String, name, ), {]
[;, }, private, static, int, indexOfSeparator, (, String, name, ), {, return, name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, )]
[., substring, (, 0, ,, index, ), ;, }, private, static, int, indexOfSeparator, (, String, name, ), {, return, name]
[,, index, ), ;, }, private, static, int, indexOfSeparator, (, String, name, ), {, return, name, ., lastIndexOf, (, ContextualRenamer]
[), ;, }, private, static, int, indexOfSeparator, (, String, name, ), {, return, name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR]
[;, }, private, boolean, containsSeparator, (, String, name, ), {, return, name, ., indexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), !=]
[., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ;, }, private, boolean, containsSeparator, (, String, name, ), {, return, name, .]
[), ;, }, private, boolean, containsSeparator, (, String, name, ), {, return, name, ., indexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, )]
[., UNIQUE_ID_SEPARATOR, ), ;, }, private, boolean, containsSeparator, (, String, name, ), {, return, name, ., indexOf, (, ContextualRenamer, .]
[;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), )]
[!=, -, 1, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, t, ., inGlobalScope]
[., indexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), !=, -, 1, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t]
[), !=, -, 1, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, t, .]
[., UNIQUE_ID_SEPARATOR, ), !=, -, 1, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (]
[;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), )]
[;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), )]
[), {, return, ;, }, referenceStack, ., push, (, referencedNames, ), ;, referencedNames, =, Sets, ., newHashSet, (, ), ;]
[., inGlobalScope, (, ), ), {, return, ;, }, referenceStack, ., push, (, referencedNames, ), ;, referencedNames, =, Sets, .]
[;, referencedNames, =, Sets, ., newHashSet, (, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {]
[., push, (, referencedNames, ), ;, referencedNames, =, Sets, ., newHashSet, (, ), ;, }, @, Override, public, void, exitScope]
[), ;, referencedNames, =, Sets, ., newHashSet, (, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, )]
[=, Sets, ., newHashSet, (, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (]
[;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), )]
[., newHashSet, (, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, t, .]
[), {, return, ;, }, for, (, Iterator, <, Var, >, it, =, t, ., getScope, (, ), ., getVars]
[., inGlobalScope, (, ), ), {, return, ;, }, for, (, Iterator, <, Var, >, it, =, t, ., getScope]
[;, it, ., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, handleScopeVar, (]
[., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (]
[., getScope, (, ), ., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =]
[;, ), {, Var, v, =, it, ., next, (, ), ;, handleScopeVar, (, v, ), ;, }, Set, <]
[., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, handleScopeVar, (, v, )]
[;, handleScopeVar, (, v, ), ;, }, Set, <, String, >, current, =, referencedNames, ;, referencedNames, =, referenceStack, ., pop]
[., next, (, ), ;, handleScopeVar, (, v, ), ;, }, Set, <, String, >, current, =, referencedNames, ;, referencedNames]
[;, }, Set, <, String, >, current, =, referencedNames, ;, referencedNames, =, referenceStack, ., pop, (, ), ;, if, (]
[), ;, }, Set, <, String, >, current, =, referencedNames, ;, referencedNames, =, referenceStack, ., pop, (, ), ;, if]
[;, referencedNames, =, referenceStack, ., pop, (, ), ;, if, (, !, referenceStack, ., isEmpty, (, ), ), {, referencedNames]
[=, referenceStack, ., pop, (, ), ;, if, (, !, referenceStack, ., isEmpty, (, ), ), {, referencedNames, ., addAll]
[;, if, (, !, referenceStack, ., isEmpty, (, ), ), {, referencedNames, ., addAll, (, current, ), ;, }, }]
[., pop, (, ), ;, if, (, !, referenceStack, ., isEmpty, (, ), ), {, referencedNames, ., addAll, (, current]
[), {, referencedNames, ., addAll, (, current, ), ;, }, }, void, handleScopeVar, (, Var, v, ), {, String, name]
[), {, referencedNames, ., addAll, (, current, ), ;, }, }, void, handleScopeVar, (, Var, v, ), {, String, name]
[., isEmpty, (, ), ), {, referencedNames, ., addAll, (, current, ), ;, }, }, void, handleScopeVar, (, Var, v]
[;, }, }, void, handleScopeVar, (, Var, v, ), {, String, name, =, v, ., getName, (, ), ;, if]
[., addAll, (, current, ), ;, }, }, void, handleScopeVar, (, Var, v, ), {, String, name, =, v, .]
[), ;, }, }, void, handleScopeVar, (, Var, v, ), {, String, name, =, v, ., getName, (, ), ;]
[;, if, (, containsSeparator, (, name, ), &&, !, getOrginalName, (, name, ), ., isEmpty, (, ), ), {, String]
[., getName, (, ), ;, if, (, containsSeparator, (, name, ), &&, !, getOrginalName, (, name, ), ., isEmpty, (]
[), {, String, newName, =, findReplacementName, (, name, ), ;, referencedNames, ., remove, (, name, ), ;, referencedNames, ., add]
[&&, !, getOrginalName, (, name, ), ., isEmpty, (, ), ), {, String, newName, =, findReplacementName, (, name, ), ;]
[), &&, !, getOrginalName, (, name, ), ., isEmpty, (, ), ), {, String, newName, =, findReplacementName, (, name, )]
[), {, String, newName, =, findReplacementName, (, name, ), ;, referencedNames, ., remove, (, name, ), ;, referencedNames, ., add]
[), {, String, newName, =, findReplacementName, (, name, ), ;, referencedNames, ., remove, (, name, ), ;, referencedNames, ., add]
[., isEmpty, (, ), ), {, String, newName, =, findReplacementName, (, name, ), ;, referencedNames, ., remove, (, name, )]
[), ., isEmpty, (, ), ), {, String, newName, =, findReplacementName, (, name, ), ;, referencedNames, ., remove, (, name]
[;, referencedNames, ., remove, (, name, ), ;, referencedNames, ., add, (, newName, ), ;, List, <, Node, >, references]
[), ;, referencedNames, ., remove, (, name, ), ;, referencedNames, ., add, (, newName, ), ;, List, <, Node, >]
[;, referencedNames, ., add, (, newName, ), ;, List, <, Node, >, references, =, nameMap, ., get, (, name, )]
[., remove, (, name, ), ;, referencedNames, ., add, (, newName, ), ;, List, <, Node, >, references, =, nameMap]
[), ;, referencedNames, ., add, (, newName, ), ;, List, <, Node, >, references, =, nameMap, ., get, (, name]
[;, List, <, Node, >, references, =, nameMap, ., get, (, name, ), ;, Preconditions, ., checkState, (, references, !=]
[., add, (, newName, ), ;, List, <, Node, >, references, =, nameMap, ., get, (, name, ), ;, Preconditions]
[), ;, List, <, Node, >, references, =, nameMap, ., get, (, name, ), ;, Preconditions, ., checkState, (, references]
[;, Preconditions, ., checkState, (, references, !=, null, ), ;, for, (, Node, n, :, references, ), {, Preconditions, .]
[., get, (, name, ), ;, Preconditions, ., checkState, (, references, !=, null, ), ;, for, (, Node, n, :]
[), ;, Preconditions, ., checkState, (, references, !=, null, ), ;, for, (, Node, n, :, references, ), {, Preconditions]
[;, for, (, Node, n, :, references, ), {, Preconditions, ., checkState, (, n, ., isName, (, ), ), ;]
[., checkState, (, references, !=, null, ), ;, for, (, Node, n, :, references, ), {, Preconditions, ., checkState, (]
[), ;, for, (, Node, n, :, references, ), {, Preconditions, ., checkState, (, n, ., isName, (, ), )]
[!=, null, ), ;, for, (, Node, n, :, references, ), {, Preconditions, ., checkState, (, n, ., isName, (]
[), ;, for, (, Node, n, :, references, ), {, Preconditions, ., checkState, (, n, ., isName, (, ), )]
[), {, Preconditions, ., checkState, (, n, ., isName, (, ), ), ;, n, ., setString, (, newName, ), ;]
[;, n, ., setString, (, newName, ), ;, }, compiler, ., reportCodeChange, (, ), ;, nameMap, ., remove, (, name]
[., checkState, (, n, ., isName, (, ), ), ;, n, ., setString, (, newName, ), ;, }, compiler, .]
[), ;, n, ., setString, (, newName, ), ;, }, compiler, ., reportCodeChange, (, ), ;, nameMap, ., remove, (]
[., isName, (, ), ), ;, n, ., setString, (, newName, ), ;, }, compiler, ., reportCodeChange, (, ), ;]
[;, }, compiler, ., reportCodeChange, (, ), ;, nameMap, ., remove, (, name, ), ;, }, }, private, String, findReplacementName]
[., setString, (, newName, ), ;, }, compiler, ., reportCodeChange, (, ), ;, nameMap, ., remove, (, name, ), ;]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, nameMap, ., remove, (, name, ), ;, }, }, private, String]
[;, nameMap, ., remove, (, name, ), ;, }, }, private, String, findReplacementName, (, String, name, ), {, String, original]
[., reportCodeChange, (, ), ;, nameMap, ., remove, (, name, ), ;, }, }, private, String, findReplacementName, (, String, name]
[;, }, }, private, String, findReplacementName, (, String, name, ), {, String, original, =, getOrginalName, (, name, ), ;, String]
[., remove, (, name, ), ;, }, }, private, String, findReplacementName, (, String, name, ), {, String, original, =, getOrginalName]
[), ;, }, }, private, String, findReplacementName, (, String, name, ), {, String, original, =, getOrginalName, (, name, ), ;]
[;, String, newName, =, original, ;, int, i, =, 0, ;, while, (, !, isValidName, (, newName, ), ), {]
[), ;, String, newName, =, original, ;, int, i, =, 0, ;, while, (, !, isValidName, (, newName, ), )]
[;, int, i, =, 0, ;, while, (, !, isValidName, (, newName, ), ), {, newName, =, original, +, ContextualRenamer]
[;, while, (, !, isValidName, (, newName, ), ), {, newName, =, original, +, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, +, String, .]
[), {, newName, =, original, +, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, +, String, ., valueOf, (, i, ++, ), ;, }, return]
[), {, newName, =, original, +, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, +, String, ., valueOf, (, i, ++, ), ;, }, return]
[), ), {, newName, =, original, +, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, +, String, ., valueOf, (, i, ++, ), ;, }]
[=, original, +, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, +, String, ., valueOf, (, i, ++, ), ;, }, return, newName, ;, }]
[;, }, return, newName, ;, }, private, boolean, isValidName, (, String, name, ), {, if, (, TokenStream, ., isJSIdentifier, (]
[+, String, ., valueOf, (, i, ++, ), ;, }, return, newName, ;, }, private, boolean, isValidName, (, String, name]
[+, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, +, String, ., valueOf, (, i, ++, ), ;, }, return, newName, ;, }, private, boolean]
[+, String, ., valueOf, (, i, ++, ), ;, }, return, newName, ;, }, private, boolean, isValidName, (, String, name]
[., UNIQUE_ID_SEPARATOR, +, String, ., valueOf, (, i, ++, ), ;, }, return, newName, ;, }, private, boolean, isValidName, (]
[;, }, return, newName, ;, }, private, boolean, isValidName, (, String, name, ), {, if, (, TokenStream, ., isJSIdentifier, (]
[., valueOf, (, i, ++, ), ;, }, return, newName, ;, }, private, boolean, isValidName, (, String, name, ), {]
[), ;, }, return, newName, ;, }, private, boolean, isValidName, (, String, name, ), {, if, (, TokenStream, ., isJSIdentifier]
[++, ), ;, }, return, newName, ;, }, private, boolean, isValidName, (, String, name, ), {, if, (, TokenStream, .]
[;, }, private, boolean, isValidName, (, String, name, ), {, if, (, TokenStream, ., isJSIdentifier, (, name, ), &&, !]
[), {, return, true, ;, }, return, false, ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node]
[&&, !, name, ., equals, (, ARGUMENTS, ), ), {, return, true, ;, }, return, false, ;, }, @, Override]
[&&, !, referencedNames, ., contains, (, name, ), &&, !, name, ., equals, (, ARGUMENTS, ), ), {, return, true]
[., isJSIdentifier, (, name, ), &&, !, referencedNames, ., contains, (, name, ), &&, !, name, ., equals, (, ARGUMENTS]
[), &&, !, referencedNames, ., contains, (, name, ), &&, !, name, ., equals, (, ARGUMENTS, ), ), {, return]
[&&, !, name, ., equals, (, ARGUMENTS, ), ), {, return, true, ;, }, return, false, ;, }, @, Override]
[&&, !, name, ., equals, (, ARGUMENTS, ), ), {, return, true, ;, }, return, false, ;, }, @, Override]
[., contains, (, name, ), &&, !, name, ., equals, (, ARGUMENTS, ), ), {, return, true, ;, }, return]
[), &&, !, name, ., equals, (, ARGUMENTS, ), ), {, return, true, ;, }, return, false, ;, }, @]
[), {, return, true, ;, }, return, false, ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node]
[), {, return, true, ;, }, return, false, ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node]
[., equals, (, ARGUMENTS, ), ), {, return, true, ;, }, return, false, ;, }, @, Override, public, boolean, shouldTraverse]
[), ), {, return, true, ;, }, return, false, ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,]
[;, }, return, false, ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return, true]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, node, ,, Node, parent, ), {, if, (]
[), {, return, ;, }, if, (, NodeUtil, ., isReferenceName, (, node, ), ), {, String, name, =, node, .]
[., inGlobalScope, (, ), ), {, return, ;, }, if, (, NodeUtil, ., isReferenceName, (, node, ), ), {, String]
[), {, String, name, =, node, ., getString, (, ), ;, referencedNames, ., add, (, name, ), ;, if, (]
[., isReferenceName, (, node, ), ), {, String, name, =, node, ., getString, (, ), ;, referencedNames, ., add, (]
[), ), {, String, name, =, node, ., getString, (, ), ;, referencedNames, ., add, (, name, ), ;, if]
[;, referencedNames, ., add, (, name, ), ;, if, (, containsSeparator, (, name, ), ), {, addCandidateNameReference, (, name, ,]
[., getString, (, ), ;, referencedNames, ., add, (, name, ), ;, if, (, containsSeparator, (, name, ), ), {]
[;, if, (, containsSeparator, (, name, ), ), {, addCandidateNameReference, (, name, ,, node, ), ;, }, }, }, private]
[., add, (, name, ), ;, if, (, containsSeparator, (, name, ), ), {, addCandidateNameReference, (, name, ,, node, )]
[), ;, if, (, containsSeparator, (, name, ), ), {, addCandidateNameReference, (, name, ,, node, ), ;, }, }, }]
[), {, addCandidateNameReference, (, name, ,, node, ), ;, }, }, }, private, void, addCandidateNameReference, (, String, name, ,, Node]
[), ), {, addCandidateNameReference, (, name, ,, node, ), ;, }, }, }, private, void, addCandidateNameReference, (, String, name, ,]
[;, }, }, }, private, void, addCandidateNameReference, (, String, name, ,, Node, n, ), {, List, <, Node, >, nodes]
[,, node, ), ;, }, }, }, private, void, addCandidateNameReference, (, String, name, ,, Node, n, ), {, List, <]
[), ;, }, }, }, private, void, addCandidateNameReference, (, String, name, ,, Node, n, ), {, List, <, Node, >]
[;, if, (, null, ==, nodes, ), {, nodes, =, Lists, ., newLinkedList, (, ), ;, nameMap, ., put, (]
[., get, (, name, ), ;, if, (, null, ==, nodes, ), {, nodes, =, Lists, ., newLinkedList, (, )]
[), ;, if, (, null, ==, nodes, ), {, nodes, =, Lists, ., newLinkedList, (, ), ;, nameMap, ., put]
[), {, nodes, =, Lists, ., newLinkedList, (, ), ;, nameMap, ., put, (, name, ,, nodes, ), ;, }]
[==, nodes, ), {, nodes, =, Lists, ., newLinkedList, (, ), ;, nameMap, ., put, (, name, ,, nodes, )]
[), {, nodes, =, Lists, ., newLinkedList, (, ), ;, nameMap, ., put, (, name, ,, nodes, ), ;, }]
[=, Lists, ., newLinkedList, (, ), ;, nameMap, ., put, (, name, ,, nodes, ), ;, }, nodes, ., add]
[;, nameMap, ., put, (, name, ,, nodes, ), ;, }, nodes, ., add, (, n, ), ;, }, }]
[., newLinkedList, (, ), ;, nameMap, ., put, (, name, ,, nodes, ), ;, }, nodes, ., add, (, n]
[;, }, nodes, ., add, (, n, ), ;, }, }, static, class, ContextualRenamer, implements, Renamer, {, private, final, Multiset]
[., put, (, name, ,, nodes, ), ;, }, nodes, ., add, (, n, ), ;, }, }, static, class]
[,, nodes, ), ;, }, nodes, ., add, (, n, ), ;, }, }, static, class, ContextualRenamer, implements, Renamer, {]
[), ;, }, nodes, ., add, (, n, ), ;, }, }, static, class, ContextualRenamer, implements, Renamer, {, private, final]
[;, }, }, static, class, ContextualRenamer, implements, Renamer, {, private, final, Multiset, <, String, >, nameUsage, ;, private, final, Map]
[., add, (, n, ), ;, }, }, static, class, ContextualRenamer, implements, Renamer, {, private, final, Multiset, <, String, >]
[), ;, }, }, static, class, ContextualRenamer, implements, Renamer, {, private, final, Multiset, <, String, >, nameUsage, ;, private, final]
[;, private, final, boolean, global, ;, final, static, String, UNIQUE_ID_SEPARATOR, =, "$$", ;, ContextualRenamer, (, ), {, this, ., global]
[., newHashMap, (, ), ;, private, final, boolean, global, ;, final, static, String, UNIQUE_ID_SEPARATOR, =, "$$", ;, ContextualRenamer, (, )]
[;, ContextualRenamer, (, ), {, this, ., global, =, true, ;, nameUsage, =, HashMultiset, ., create, (, ), ;, }]
[=, true, ;, nameUsage, =, HashMultiset, ., create, (, ), ;, }, private, ContextualRenamer, (, Multiset, <, String, >, nameUsage]
[., global, =, true, ;, nameUsage, =, HashMultiset, ., create, (, ), ;, }, private, ContextualRenamer, (, Multiset, <, String]
[;, nameUsage, =, HashMultiset, ., create, (, ), ;, }, private, ContextualRenamer, (, Multiset, <, String, >, nameUsage, ), {]
[=, HashMultiset, ., create, (, ), ;, }, private, ContextualRenamer, (, Multiset, <, String, >, nameUsage, ), {, this, .]
[;, }, private, ContextualRenamer, (, Multiset, <, String, >, nameUsage, ), {, this, ., global, =, false, ;, this, .]
[., create, (, ), ;, }, private, ContextualRenamer, (, Multiset, <, String, >, nameUsage, ), {, this, ., global, =]
[=, false, ;, this, ., nameUsage, =, nameUsage, ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new]
[., global, =, false, ;, this, ., nameUsage, =, nameUsage, ;, }, @, Override, public, Renamer, forChildScope, (, ), {]
[;, this, ., nameUsage, =, nameUsage, ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, ContextualRenamer, (]
[=, nameUsage, ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, ContextualRenamer, (, nameUsage, ), ;, }]
[., nameUsage, =, nameUsage, ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, ContextualRenamer, (, nameUsage, )]
[;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, ContextualRenamer, (, nameUsage, ), ;, }, @, Override]
[;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {, if, (, !, name, ., equals, (, ARGUMENTS]
[), ;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {, if, (, !, name, ., equals, (]
[), {, if, (, global, ), {, reserveName, (, name, ), ;, }, else, {, if, (, !, declarations, .]
[), {, if, (, global, ), {, reserveName, (, name, ), ;, }, else, {, if, (, !, declarations, .]
[., equals, (, ARGUMENTS, ), ), {, if, (, global, ), {, reserveName, (, name, ), ;, }, else, {]
[), ), {, if, (, global, ), {, reserveName, (, name, ), ;, }, else, {, if, (, !, declarations]
[), {, reserveName, (, name, ), ;, }, else, {, if, (, !, declarations, ., containsKey, (, name, ), )]
[;, }, else, {, if, (, !, declarations, ., containsKey, (, name, ), ), {, int, id, =, incrementNameCount, (]
[), ;, }, else, {, if, (, !, declarations, ., containsKey, (, name, ), ), {, int, id, =, incrementNameCount]
[), {, int, id, =, incrementNameCount, (, name, ), ;, String, newName, =, null, ;, if, (, id, !=, 0]
[), {, int, id, =, incrementNameCount, (, name, ), ;, String, newName, =, null, ;, if, (, id, !=, 0]
[., containsKey, (, name, ), ), {, int, id, =, incrementNameCount, (, name, ), ;, String, newName, =, null, ;]
[), ), {, int, id, =, incrementNameCount, (, name, ), ;, String, newName, =, null, ;, if, (, id, !=]
[;, String, newName, =, null, ;, if, (, id, !=, 0, ), {, newName, =, getUniqueName, (, name, ,, id]
[), ;, String, newName, =, null, ;, if, (, id, !=, 0, ), {, newName, =, getUniqueName, (, name, ,]
[;, if, (, id, !=, 0, ), {, newName, =, getUniqueName, (, name, ,, id, ), ;, }, declarations, .]
[), {, newName, =, getUniqueName, (, name, ,, id, ), ;, }, declarations, ., put, (, name, ,, newName, )]
[!=, 0, ), {, newName, =, getUniqueName, (, name, ,, id, ), ;, }, declarations, ., put, (, name, ,]
[), {, newName, =, getUniqueName, (, name, ,, id, ), ;, }, declarations, ., put, (, name, ,, newName, )]
[=, getUniqueName, (, name, ,, id, ), ;, }, declarations, ., put, (, name, ,, newName, ), ;, }, }]
[;, }, declarations, ., put, (, name, ,, newName, ), ;, }, }, }, }, @, Override, public, String, getReplacementName]
[,, id, ), ;, }, declarations, ., put, (, name, ,, newName, ), ;, }, }, }, }, @, Override]
[), ;, }, declarations, ., put, (, name, ,, newName, ), ;, }, }, }, }, @, Override, public, String]
[;, }, }, }, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return, declarations, ., get, (]
[., put, (, name, ,, newName, ), ;, }, }, }, }, @, Override, public, String, getReplacementName, (, String, oldName]
[,, newName, ), ;, }, }, }, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return, declarations]
[), ;, }, }, }, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return, declarations, ., get]
[;, }, private, String, getUniqueName, (, String, name, ,, int, id, ), {, return, name, +, UNIQUE_ID_SEPARATOR, +, id, ;]
[., get, (, oldName, ), ;, }, private, String, getUniqueName, (, String, name, ,, int, id, ), {, return, name]
[), ;, }, private, String, getUniqueName, (, String, name, ,, int, id, ), {, return, name, +, UNIQUE_ID_SEPARATOR, +, id]
[;, }, private, void, reserveName, (, String, name, ), {, nameUsage, ., setCount, (, name, ,, 0, ,, 1, )]
[+, id, ;, }, private, void, reserveName, (, String, name, ), {, nameUsage, ., setCount, (, name, ,, 0, ,]
[+, UNIQUE_ID_SEPARATOR, +, id, ;, }, private, void, reserveName, (, String, name, ), {, nameUsage, ., setCount, (, name, ,]
[+, id, ;, }, private, void, reserveName, (, String, name, ), {, nameUsage, ., setCount, (, name, ,, 0, ,]
[;, }, private, void, reserveName, (, String, name, ), {, nameUsage, ., setCount, (, name, ,, 0, ,, 1, )]
[;, }, private, int, incrementNameCount, (, String, name, ), {, return, nameUsage, ., add, (, name, ,, 1, ), ;]
[., setCount, (, name, ,, 0, ,, 1, ), ;, }, private, int, incrementNameCount, (, String, name, ), {, return]
[,, 0, ,, 1, ), ;, }, private, int, incrementNameCount, (, String, name, ), {, return, nameUsage, ., add, (]
[,, 1, ), ;, }, private, int, incrementNameCount, (, String, name, ), {, return, nameUsage, ., add, (, name, ,]
[), ;, }, private, int, incrementNameCount, (, String, name, ), {, return, nameUsage, ., add, (, name, ,, 1, )]
[;, }, @, Override, public, boolean, stripConstIfReplaced, (, ), {, return, false, ;, }, }, static, class, InlineRenamer, implements, Renamer]
[., add, (, name, ,, 1, ), ;, }, @, Override, public, boolean, stripConstIfReplaced, (, ), {, return, false, ;]
[,, 1, ), ;, }, @, Override, public, boolean, stripConstIfReplaced, (, ), {, return, false, ;, }, }, static, class]
[), ;, }, @, Override, public, boolean, stripConstIfReplaced, (, ), {, return, false, ;, }, }, static, class, InlineRenamer, implements]
[;, }, }, static, class, InlineRenamer, implements, Renamer, {, private, final, Map, <, String, ,, String, >, declarations, =, Maps]
[;, private, final, Supplier, <, String, >, uniqueIdSupplier, ;, private, final, String, idPrefix, ;, private, final, boolean, removeConstness, ;, InlineRenamer]
[., newHashMap, (, ), ;, private, final, Supplier, <, String, >, uniqueIdSupplier, ;, private, final, String, idPrefix, ;, private, final]
[=, uniqueIdSupplier, ;, Preconditions, ., checkArgument, (, !, idPrefix, ., isEmpty, (, ), ), ;, this, ., idPrefix, =, idPrefix]
[., uniqueIdSupplier, =, uniqueIdSupplier, ;, Preconditions, ., checkArgument, (, !, idPrefix, ., isEmpty, (, ), ), ;, this, ., idPrefix]
[;, Preconditions, ., checkArgument, (, !, idPrefix, ., isEmpty, (, ), ), ;, this, ., idPrefix, =, idPrefix, ;, this]
[;, this, ., idPrefix, =, idPrefix, ;, this, ., removeConstness, =, removeConstness, ;, }, @, Override, public, void, addDeclaredName, (]
[., checkArgument, (, !, idPrefix, ., isEmpty, (, ), ), ;, this, ., idPrefix, =, idPrefix, ;, this, ., removeConstness]
[), ;, this, ., idPrefix, =, idPrefix, ;, this, ., removeConstness, =, removeConstness, ;, }, @, Override, public, void, addDeclaredName]
[), ;, this, ., idPrefix, =, idPrefix, ;, this, ., removeConstness, =, removeConstness, ;, }, @, Override, public, void, addDeclaredName]
[., isEmpty, (, ), ), ;, this, ., idPrefix, =, idPrefix, ;, this, ., removeConstness, =, removeConstness, ;, }, @]
[=, idPrefix, ;, this, ., removeConstness, =, removeConstness, ;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {]
[., idPrefix, =, idPrefix, ;, this, ., removeConstness, =, removeConstness, ;, }, @, Override, public, void, addDeclaredName, (, String, name]
[;, this, ., removeConstness, =, removeConstness, ;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {, Preconditions, .]
[=, removeConstness, ;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {, Preconditions, ., checkState, (, !, name]
[., removeConstness, =, removeConstness, ;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {, Preconditions, ., checkState, (]
[;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {, Preconditions, ., checkState, (, !, name, ., equals]
[;, if, (, !, declarations, ., containsKey, (, name, ), ), {, declarations, ., put, (, name, ,, getUniqueName, (]
[., checkState, (, !, name, ., equals, (, ARGUMENTS, ), ), ;, if, (, !, declarations, ., containsKey, (, name]
[), ;, if, (, !, declarations, ., containsKey, (, name, ), ), {, declarations, ., put, (, name, ,, getUniqueName]
[), ;, if, (, !, declarations, ., containsKey, (, name, ), ), {, declarations, ., put, (, name, ,, getUniqueName]
[., equals, (, ARGUMENTS, ), ), ;, if, (, !, declarations, ., containsKey, (, name, ), ), {, declarations, .]
[), ), ;, if, (, !, declarations, ., containsKey, (, name, ), ), {, declarations, ., put, (, name, ,]
[), {, declarations, ., put, (, name, ,, getUniqueName, (, name, ), ), ;, }, }, private, String, getUniqueName, (]
[), {, declarations, ., put, (, name, ,, getUniqueName, (, name, ), ), ;, }, }, private, String, getUniqueName, (]
[., containsKey, (, name, ), ), {, declarations, ., put, (, name, ,, getUniqueName, (, name, ), ), ;, }]
[), ), {, declarations, ., put, (, name, ,, getUniqueName, (, name, ), ), ;, }, }, private, String, getUniqueName]
[;, }, }, private, String, getUniqueName, (, String, name, ), {, if, (, name, ., isEmpty, (, ), ), {]
[., put, (, name, ,, getUniqueName, (, name, ), ), ;, }, }, private, String, getUniqueName, (, String, name, )]
[,, getUniqueName, (, name, ), ), ;, }, }, private, String, getUniqueName, (, String, name, ), {, if, (, name]
[), ;, }, }, private, String, getUniqueName, (, String, name, ), {, if, (, name, ., isEmpty, (, ), )]
[), ), ;, }, }, private, String, getUniqueName, (, String, name, ), {, if, (, name, ., isEmpty, (, )]
[), {, return, name, ;, }, if, (, name, ., indexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), !=, -, 1, )]
[., isEmpty, (, ), ), {, return, name, ;, }, if, (, name, ., indexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, )]
[;, }, if, (, name, ., indexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), !=, -, 1, ), {, name, =, name]
[), {, name, =, name, ., substring, (, 0, ,, name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ), ;]
[!=, -, 1, ), {, name, =, name, ., substring, (, 0, ,, name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR]
[., indexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), !=, -, 1, ), {, name, =, name, ., substring, (, 0, ,]
[), !=, -, 1, ), {, name, =, name, ., substring, (, 0, ,, name, ., lastIndexOf, (, ContextualRenamer, .]
[., UNIQUE_ID_SEPARATOR, ), !=, -, 1, ), {, name, =, name, ., substring, (, 0, ,, name, ., lastIndexOf, (]
[), {, name, =, name, ., substring, (, 0, ,, name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ), ;]
[), {, name, =, name, ., substring, (, 0, ,, name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ), ;]
[=, name, ., substring, (, 0, ,, name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ), ;, }, return, name]
[;, }, return, name, +, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, +, idPrefix, +, uniqueIdSupplier, ., get, (, ), ;, }, @, Override]
[., substring, (, 0, ,, name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ), ;, }, return, name, +, ContextualRenamer]
[,, name, ., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ), ;, }, return, name, +, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, +, idPrefix]
[), ;, }, return, name, +, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, +, idPrefix, +, uniqueIdSupplier, ., get, (, ), ;, }, @]
[., lastIndexOf, (, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, ), ), ;, }, return, name, +, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, +, idPrefix, +, uniqueIdSupplier]
[), ), ;, }, return, name, +, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, +, idPrefix, +, uniqueIdSupplier, ., get, (, ), ;, }]
[., UNIQUE_ID_SEPARATOR, ), ), ;, }, return, name, +, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, +, idPrefix, +, uniqueIdSupplier, ., get, (, )]
[;, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return, declarations, ., get, (, oldName, ), ;]
[+, uniqueIdSupplier, ., get, (, ), ;, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return, declarations]
[+, idPrefix, +, uniqueIdSupplier, ., get, (, ), ;, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {]
[+, ContextualRenamer, ., UNIQUE_ID_SEPARATOR, +, idPrefix, +, uniqueIdSupplier, ., get, (, ), ;, }, @, Override, public, String, getReplacementName, (]
[+, idPrefix, +, uniqueIdSupplier, ., get, (, ), ;, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {]
[., UNIQUE_ID_SEPARATOR, +, idPrefix, +, uniqueIdSupplier, ., get, (, ), ;, }, @, Override, public, String, getReplacementName, (, String, oldName]
[+, uniqueIdSupplier, ., get, (, ), ;, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return, declarations]
[;, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return, declarations, ., get, (, oldName, ), ;]
[., get, (, ), ;, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return, declarations, ., get]
[;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, InlineRenamer, (, uniqueIdSupplier, ,, idPrefix, ,, removeConstness, )]
[., get, (, oldName, ), ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, InlineRenamer, (, uniqueIdSupplier]
[), ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, InlineRenamer, (, uniqueIdSupplier, ,, idPrefix, ,, removeConstness]
[;, }, @, Override, public, boolean, stripConstIfReplaced, (, ), {, return, removeConstness, ;, }, }, static, class, BoilerplateRenamer, extends, ContextualRenamer]
[,, idPrefix, ,, removeConstness, ), ;, }, @, Override, public, boolean, stripConstIfReplaced, (, ), {, return, removeConstness, ;, }, }]
[,, removeConstness, ), ;, }, @, Override, public, boolean, stripConstIfReplaced, (, ), {, return, removeConstness, ;, }, }, static, class]
[), ;, }, @, Override, public, boolean, stripConstIfReplaced, (, ), {, return, removeConstness, ;, }, }, static, class, BoilerplateRenamer, extends]
[;, }, }, static, class, BoilerplateRenamer, extends, ContextualRenamer, {, private, final, Supplier, <, String, >, uniqueIdSupplier, ;, private, final, String]
[=, uniqueIdSupplier, ;, this, ., idPrefix, =, idPrefix, ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new]
[., uniqueIdSupplier, =, uniqueIdSupplier, ;, this, ., idPrefix, =, idPrefix, ;, }, @, Override, public, Renamer, forChildScope, (, ), {]
[;, this, ., idPrefix, =, idPrefix, ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, InlineRenamer, (]
[=, idPrefix, ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, InlineRenamer, (, uniqueIdSupplier, ,, idPrefix, ,]
[., idPrefix, =, idPrefix, ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, InlineRenamer, (, uniqueIdSupplier, ,]
[;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, InlineRenamer, (, uniqueIdSupplier, ,, idPrefix, ,, false, )]
[;, }, }, static, class, WhitelistedRenamer, implements, Renamer, {, private, Renamer, delegate, ;, private, Set, <, String, >, whitelist, ;]
[,, idPrefix, ,, false, ), ;, }, }, static, class, WhitelistedRenamer, implements, Renamer, {, private, Renamer, delegate, ;, private, Set]
[,, false, ), ;, }, }, static, class, WhitelistedRenamer, implements, Renamer, {, private, Renamer, delegate, ;, private, Set, <, String]
[), ;, }, }, static, class, WhitelistedRenamer, implements, Renamer, {, private, Renamer, delegate, ;, private, Set, <, String, >, whitelist]
[=, delegate, ;, this, ., whitelist, =, whitelist, ;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {]
[., delegate, =, delegate, ;, this, ., whitelist, =, whitelist, ;, }, @, Override, public, void, addDeclaredName, (, String, name]
[;, this, ., whitelist, =, whitelist, ;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {, if, (]
[=, whitelist, ;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {, if, (, whitelist, ., contains, (]
[., whitelist, =, whitelist, ;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {, if, (, whitelist, .]
[;, }, @, Override, public, void, addDeclaredName, (, String, name, ), {, if, (, whitelist, ., contains, (, name, )]
[), {, delegate, ., addDeclaredName, (, name, ), ;, }, }, @, Override, public, String, getReplacementName, (, String, oldName, )]
[., contains, (, name, ), ), {, delegate, ., addDeclaredName, (, name, ), ;, }, }, @, Override, public, String]
[), ), {, delegate, ., addDeclaredName, (, name, ), ;, }, }, @, Override, public, String, getReplacementName, (, String, oldName]
[;, }, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return, whitelist, ., contains, (, oldName, )]
[., addDeclaredName, (, name, ), ;, }, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return, whitelist]
[), ;, }, }, @, Override, public, String, getReplacementName, (, String, oldName, ), {, return, whitelist, ., contains, (, oldName]
[;, }, @, Override, public, boolean, stripConstIfReplaced, (, ), {, return, delegate, ., stripConstIfReplaced, (, ), ;, }, @, Override]
[?, delegate, ., getReplacementName, (, oldName, ), :, null, ;, }, @, Override, public, boolean, stripConstIfReplaced, (, ), {, return]
[., contains, (, oldName, ), ?, delegate, ., getReplacementName, (, oldName, ), :, null, ;, }, @, Override, public, boolean]
[), ?, delegate, ., getReplacementName, (, oldName, ), :, null, ;, }, @, Override, public, boolean, stripConstIfReplaced, (, ), {]
[:, null, ;, }, @, Override, public, boolean, stripConstIfReplaced, (, ), {, return, delegate, ., stripConstIfReplaced, (, ), ;, }]
[., getReplacementName, (, oldName, ), :, null, ;, }, @, Override, public, boolean, stripConstIfReplaced, (, ), {, return, delegate, .]
[), :, null, ;, }, @, Override, public, boolean, stripConstIfReplaced, (, ), {, return, delegate, ., stripConstIfReplaced, (, ), ;]
[;, }, @, Override, public, boolean, stripConstIfReplaced, (, ), {, return, delegate, ., stripConstIfReplaced, (, ), ;, }, @, Override]
[;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, WhitelistedRenamer, (, delegate, ., forChildScope, (, ), ,]
[., stripConstIfReplaced, (, ), ;, }, @, Override, public, Renamer, forChildScope, (, ), {, return, new, WhitelistedRenamer, (, delegate, .]
[;, }, }, }]
[,, whitelist, ), ;, }, }, }]
[., forChildScope, (, ), ,, whitelist, ), ;, }, }, }]
[), ;, }, }, }]
