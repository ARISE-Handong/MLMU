[;, private, static, final, long, START_1972, =, 2L, *, 365L, *, 86400L, *, 1000L, ;, private, volatile, int, iPeriod, ;]
[;, private, volatile, int, iPeriod, ;, protected, static, int, between, (, ReadableInstant, start, ,, ReadableInstant, end, ,, DurationFieldType, field, )]
[*, 1000L, ;, private, volatile, int, iPeriod, ;, protected, static, int, between, (, ReadableInstant, start, ,, ReadableInstant, end, ,, DurationFieldType]
[*, 86400L, *, 1000L, ;, private, volatile, int, iPeriod, ;, protected, static, int, between, (, ReadableInstant, start, ,, ReadableInstant, end]
[*, 365L, *, 86400L, *, 1000L, ;, private, volatile, int, iPeriod, ;, protected, static, int, between, (, ReadableInstant, start, ,]
[*, 86400L, *, 1000L, ;, private, volatile, int, iPeriod, ;, protected, static, int, between, (, ReadableInstant, start, ,, ReadableInstant, end]
[*, 1000L, ;, private, volatile, int, iPeriod, ;, protected, static, int, between, (, ReadableInstant, start, ,, ReadableInstant, end, ,, DurationFieldType]
[;, private, volatile, int, iPeriod, ;, protected, static, int, between, (, ReadableInstant, start, ,, ReadableInstant, end, ,, DurationFieldType, field, )]
[), {, throw, new, IllegalArgumentException, (, "ReadableInstant objects must not be null", ), ;, }, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, start, ), ;]
[||, end, ==, null, ), {, throw, new, IllegalArgumentException, (, "ReadableInstant objects must not be null", ), ;, }, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology]
[==, null, ||, end, ==, null, ), {, throw, new, IllegalArgumentException, (, "ReadableInstant objects must not be null", ), ;, }, Chronology, chrono, =, DateTimeUtils]
[||, end, ==, null, ), {, throw, new, IllegalArgumentException, (, "ReadableInstant objects must not be null", ), ;, }, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology]
[), {, throw, new, IllegalArgumentException, (, "ReadableInstant objects must not be null", ), ;, }, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, start, ), ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "ReadableInstant objects must not be null", ), ;, }, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, start]
[), {, throw, new, IllegalArgumentException, (, "ReadableInstant objects must not be null", ), ;, }, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, start, ), ;]
[;, }, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, start, ), ;, int, amount, =, field, ., getField, (, chrono]
[), ;, }, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, start, ), ;, int, amount, =, field, ., getField, (]
[;, int, amount, =, field, ., getField, (, chrono, ), ., getDifference, (, end, ., getMillis, (, ), ,, start]
[., getInstantChronology, (, start, ), ;, int, amount, =, field, ., getField, (, chrono, ), ., getDifference, (, end, .]
[), ;, int, amount, =, field, ., getField, (, chrono, ), ., getDifference, (, end, ., getMillis, (, ), ,]
[;, return, amount, ;, }, protected, static, int, between, (, ReadablePartial, start, ,, ReadablePartial, end, ,, ReadablePeriod, zeroInstance, ), {]
[., getDifference, (, end, ., getMillis, (, ), ,, start, ., getMillis, (, ), ), ;, return, amount, ;, }]
[., getField, (, chrono, ), ., getDifference, (, end, ., getMillis, (, ), ,, start, ., getMillis, (, ), )]
[), ., getDifference, (, end, ., getMillis, (, ), ,, start, ., getMillis, (, ), ), ;, return, amount, ;]
[,, start, ., getMillis, (, ), ), ;, return, amount, ;, }, protected, static, int, between, (, ReadablePartial, start, ,]
[., getMillis, (, ), ,, start, ., getMillis, (, ), ), ;, return, amount, ;, }, protected, static, int, between]
[), ;, return, amount, ;, }, protected, static, int, between, (, ReadablePartial, start, ,, ReadablePartial, end, ,, ReadablePeriod, zeroInstance, )]
[., getMillis, (, ), ), ;, return, amount, ;, }, protected, static, int, between, (, ReadablePartial, start, ,, ReadablePartial, end]
[;, }, protected, static, int, between, (, ReadablePartial, start, ,, ReadablePartial, end, ,, ReadablePeriod, zeroInstance, ), {, if, (, start]
[), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must not be null", ), ;, }, if, (, start, ., size, (, ), !=, end, .]
[||, end, ==, null, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must not be null", ), ;, }, if, (, start, ., size, (]
[==, null, ||, end, ==, null, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must not be null", ), ;, }, if, (, start, .]
[||, end, ==, null, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must not be null", ), ;, }, if, (, start, ., size, (]
[), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must not be null", ), ;, }, if, (, start, ., size, (, ), !=, end, .]
[==, null, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must not be null", ), ;, }, if, (, start, ., size, (, ), !=]
[), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must not be null", ), ;, }, if, (, start, ., size, (, ), !=, end, .]
[;, }, if, (, start, ., size, (, ), !=, end, ., size, (, ), ), {, throw, new, IllegalArgumentException]
[), ;, }, if, (, start, ., size, (, ), !=, end, ., size, (, ), ), {, throw, new]
[), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, for, (, int, i, =, 0, ,, isize, =, start]
[!=, end, ., size, (, ), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, for, (, int, i]
[., size, (, ), !=, end, ., size, (, ), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }]
[), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, for, (, int, i, =, 0, ,, isize, =, start]
[., size, (, ), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, for, (, int, i, =, 0]
[;, }, for, (, int, i, =, 0, ,, isize, =, start, ., size, (, ), ;, i, <, isize]
[), ;, }, for, (, int, i, =, 0, ,, isize, =, start, ., size, (, ), ;, i, <]
[,, isize, =, start, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, if, (, start]
[;, i, <, isize, ;, i, ++, ), {, if, (, start, ., getFieldType, (, i, ), !=, end, .]
[., size, (, ), ;, i, <, isize, ;, i, ++, ), {, if, (, start, ., getFieldType, (, i]
[;, i, ++, ), {, if, (, start, ., getFieldType, (, i, ), !=, end, ., getFieldType, (, i, )]
[<, isize, ;, i, ++, ), {, if, (, start, ., getFieldType, (, i, ), !=, end, ., getFieldType, (]
[;, i, ++, ), {, if, (, start, ., getFieldType, (, i, ), !=, end, ., getFieldType, (, i, )]
[), {, if, (, start, ., getFieldType, (, i, ), !=, end, ., getFieldType, (, i, ), ), {, throw]
[++, ), {, if, (, start, ., getFieldType, (, i, ), !=, end, ., getFieldType, (, i, ), ), {]
[), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, }, if, (, DateTimeUtils, ., isContiguous, (, start, ), ==]
[!=, end, ., getFieldType, (, i, ), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, }, if, (]
[., getFieldType, (, i, ), !=, end, ., getFieldType, (, i, ), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", )]
[), !=, end, ., getFieldType, (, i, ), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, }, if]
[), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, }, if, (, DateTimeUtils, ., isContiguous, (, start, ), ==]
[., getFieldType, (, i, ), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, }, if, (, DateTimeUtils, .]
[), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, }, if, (, DateTimeUtils, ., isContiguous, (, start, )]
[;, }, }, if, (, DateTimeUtils, ., isContiguous, (, start, ), ==, false, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must be contiguous"]
[), ;, }, }, if, (, DateTimeUtils, ., isContiguous, (, start, ), ==, false, ), {, throw, new, IllegalArgumentException, (]
[), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must be contiguous", ), ;, }, Chronology, chrono, =, DateTimeUtils, ., getChronology, (, start, ., getChronology]
[==, false, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must be contiguous", ), ;, }, Chronology, chrono, =, DateTimeUtils, ., getChronology, (, start]
[., isContiguous, (, start, ), ==, false, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must be contiguous", ), ;, }, Chronology, chrono, =]
[), ==, false, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must be contiguous", ), ;, }, Chronology, chrono, =, DateTimeUtils, ., getChronology, (]
[), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must be contiguous", ), ;, }, Chronology, chrono, =, DateTimeUtils, ., getChronology, (, start, ., getChronology]
[;, }, Chronology, chrono, =, DateTimeUtils, ., getChronology, (, start, ., getChronology, (, ), ), ., withUTC, (, ), ;]
[), ;, }, Chronology, chrono, =, DateTimeUtils, ., getChronology, (, start, ., getChronology, (, ), ), ., withUTC, (, )]
[;, int, [, ], values, =, chrono, ., get, (, zeroInstance, ,, chrono, ., set, (, start, ,, START_1972, )]
[., withUTC, (, ), ;, int, [, ], values, =, chrono, ., get, (, zeroInstance, ,, chrono, ., set, (]
[., getChronology, (, start, ., getChronology, (, ), ), ., withUTC, (, ), ;, int, [, ], values, =, chrono]
[), ., withUTC, (, ), ;, int, [, ], values, =, chrono, ., get, (, zeroInstance, ,, chrono, ., set]
[., getChronology, (, ), ), ., withUTC, (, ), ;, int, [, ], values, =, chrono, ., get, (, zeroInstance]
[;, return, values, [, 0, ], ;, }, protected, static, int, standardPeriodIn, (, ReadablePeriod, period, ,, long, millisPerUnit, ), {]
[., get, (, zeroInstance, ,, chrono, ., set, (, start, ,, START_1972, ), ,, chrono, ., set, (, end, ,]
[,, chrono, ., set, (, start, ,, START_1972, ), ,, chrono, ., set, (, end, ,, START_1972, ), ), ;]
[,, chrono, ., set, (, end, ,, START_1972, ), ), ;, return, values, [, 0, ], ;, }, protected, static]
[., set, (, start, ,, START_1972, ), ,, chrono, ., set, (, end, ,, START_1972, ), ), ;, return, values]
[,, START_1972, ), ,, chrono, ., set, (, end, ,, START_1972, ), ), ;, return, values, [, 0, ], ;]
[), ,, chrono, ., set, (, end, ,, START_1972, ), ), ;, return, values, [, 0, ], ;, }, protected]
[), ;, return, values, [, 0, ], ;, }, protected, static, int, standardPeriodIn, (, ReadablePeriod, period, ,, long, millisPerUnit, )]
[., set, (, end, ,, START_1972, ), ), ;, return, values, [, 0, ], ;, }, protected, static, int, standardPeriodIn]
[,, START_1972, ), ), ;, return, values, [, 0, ], ;, }, protected, static, int, standardPeriodIn, (, ReadablePeriod, period, ,]
[), ), ;, return, values, [, 0, ], ;, }, protected, static, int, standardPeriodIn, (, ReadablePeriod, period, ,, long, millisPerUnit]
[;, }, protected, static, int, standardPeriodIn, (, ReadablePeriod, period, ,, long, millisPerUnit, ), {, if, (, period, ==, null, )]
[[, 0, ], ;, }, protected, static, int, standardPeriodIn, (, ReadablePeriod, period, ,, long, millisPerUnit, ), {, if, (, period]
[], ;, }, protected, static, int, standardPeriodIn, (, ReadablePeriod, period, ,, long, millisPerUnit, ), {, if, (, period, ==, null]
[), {, return, 0, ;, }, Chronology, iso, =, ISOChronology, ., getInstanceUTC, (, ), ;, long, duration, =, 0L, ;]
[==, null, ), {, return, 0, ;, }, Chronology, iso, =, ISOChronology, ., getInstanceUTC, (, ), ;, long, duration, =]
[), {, return, 0, ;, }, Chronology, iso, =, ISOChronology, ., getInstanceUTC, (, ), ;, long, duration, =, 0L, ;]
[;, }, Chronology, iso, =, ISOChronology, ., getInstanceUTC, (, ), ;, long, duration, =, 0L, ;, for, (, int, i]
[;, long, duration, =, 0L, ;, for, (, int, i, =, 0, ;, i, <, period, ., size, (, )]
[., getInstanceUTC, (, ), ;, long, duration, =, 0L, ;, for, (, int, i, =, 0, ;, i, <, period]
[;, for, (, int, i, =, 0, ;, i, <, period, ., size, (, ), ;, i, ++, ), {]
[;, i, <, period, ., size, (, ), ;, i, ++, ), {, int, value, =, period, ., getValue, (]
[;, i, ++, ), {, int, value, =, period, ., getValue, (, i, ), ;, if, (, value, !=, 0]
[<, period, ., size, (, ), ;, i, ++, ), {, int, value, =, period, ., getValue, (, i, )]
[;, i, ++, ), {, int, value, =, period, ., getValue, (, i, ), ;, if, (, value, !=, 0]
[., size, (, ), ;, i, ++, ), {, int, value, =, period, ., getValue, (, i, ), ;, if]
[), {, int, value, =, period, ., getValue, (, i, ), ;, if, (, value, !=, 0, ), {, DurationField]
[++, ), {, int, value, =, period, ., getValue, (, i, ), ;, if, (, value, !=, 0, ), {]
[;, if, (, value, !=, 0, ), {, DurationField, field, =, period, ., getFieldType, (, i, ), ., getField, (]
[., getValue, (, i, ), ;, if, (, value, !=, 0, ), {, DurationField, field, =, period, ., getFieldType, (]
[), ;, if, (, value, !=, 0, ), {, DurationField, field, =, period, ., getFieldType, (, i, ), ., getField]
[), {, DurationField, field, =, period, ., getFieldType, (, i, ), ., getField, (, iso, ), ;, if, (, field]
[!=, 0, ), {, DurationField, field, =, period, ., getFieldType, (, i, ), ., getField, (, iso, ), ;, if]
[), {, DurationField, field, =, period, ., getFieldType, (, i, ), ., getField, (, iso, ), ;, if, (, field]
[;, if, (, field, ., isPrecise, (, ), ==, false, ), {, throw, new, IllegalArgumentException, (, "Cannot convert period to duration as ", +, field, .]
[., getField, (, iso, ), ;, if, (, field, ., isPrecise, (, ), ==, false, ), {, throw, new, IllegalArgumentException]
[., getFieldType, (, i, ), ., getField, (, iso, ), ;, if, (, field, ., isPrecise, (, ), ==, false]
[), ., getField, (, iso, ), ;, if, (, field, ., isPrecise, (, ), ==, false, ), {, throw, new]
[), ;, if, (, field, ., isPrecise, (, ), ==, false, ), {, throw, new, IllegalArgumentException, (, "Cannot convert period to duration as ", +, field]
[), {, throw, new, IllegalArgumentException, (, "Cannot convert period to duration as ", +, field, ., getName, (, ), +, " is not precise in the period ", +, period, ), ;, }]
[==, false, ), {, throw, new, IllegalArgumentException, (, "Cannot convert period to duration as ", +, field, ., getName, (, ), +, " is not precise in the period ", +, period, )]
[., isPrecise, (, ), ==, false, ), {, throw, new, IllegalArgumentException, (, "Cannot convert period to duration as ", +, field, ., getName, (, ), +]
[), {, throw, new, IllegalArgumentException, (, "Cannot convert period to duration as ", +, field, ., getName, (, ), +, " is not precise in the period ", +, period, ), ;, }]
[;, }, duration, =, FieldUtils, ., safeAdd, (, duration, ,, FieldUtils, ., safeMultiply, (, field, ., getUnitMillis, (, ), ,]
[), ;, }, duration, =, FieldUtils, ., safeAdd, (, duration, ,, FieldUtils, ., safeMultiply, (, field, ., getUnitMillis, (, )]
[+, period, ), ;, }, duration, =, FieldUtils, ., safeAdd, (, duration, ,, FieldUtils, ., safeMultiply, (, field, ., getUnitMillis]
[+, " is not precise in the period ", +, period, ), ;, }, duration, =, FieldUtils, ., safeAdd, (, duration, ,, FieldUtils, ., safeMultiply, (, field]
[+, field, ., getName, (, ), +, " is not precise in the period ", +, period, ), ;, }, duration, =, FieldUtils, ., safeAdd, (, duration]
[+, " is not precise in the period ", +, period, ), ;, }, duration, =, FieldUtils, ., safeAdd, (, duration, ,, FieldUtils, ., safeMultiply, (, field]
[., getName, (, ), +, " is not precise in the period ", +, period, ), ;, }, duration, =, FieldUtils, ., safeAdd, (, duration, ,, FieldUtils]
[+, period, ), ;, }, duration, =, FieldUtils, ., safeAdd, (, duration, ,, FieldUtils, ., safeMultiply, (, field, ., getUnitMillis]
[), ;, }, duration, =, FieldUtils, ., safeAdd, (, duration, ,, FieldUtils, ., safeMultiply, (, field, ., getUnitMillis, (, )]
[=, FieldUtils, ., safeAdd, (, duration, ,, FieldUtils, ., safeMultiply, (, field, ., getUnitMillis, (, ), ,, value, ), )]
[;, }, }, return, FieldUtils, ., safeToInt, (, duration, /, millisPerUnit, ), ;, }, protected, BaseSingleFieldPeriod, (, int, period, )]
[., safeAdd, (, duration, ,, FieldUtils, ., safeMultiply, (, field, ., getUnitMillis, (, ), ,, value, ), ), ;, }]
[,, FieldUtils, ., safeMultiply, (, field, ., getUnitMillis, (, ), ,, value, ), ), ;, }, }, return, FieldUtils, .]
[), ;, }, }, return, FieldUtils, ., safeToInt, (, duration, /, millisPerUnit, ), ;, }, protected, BaseSingleFieldPeriod, (, int, period]
[., safeMultiply, (, field, ., getUnitMillis, (, ), ,, value, ), ), ;, }, }, return, FieldUtils, ., safeToInt, (]
[,, value, ), ), ;, }, }, return, FieldUtils, ., safeToInt, (, duration, /, millisPerUnit, ), ;, }, protected, BaseSingleFieldPeriod]
[., getUnitMillis, (, ), ,, value, ), ), ;, }, }, return, FieldUtils, ., safeToInt, (, duration, /, millisPerUnit, )]
[), ), ;, }, }, return, FieldUtils, ., safeToInt, (, duration, /, millisPerUnit, ), ;, }, protected, BaseSingleFieldPeriod, (, int]
[;, }, protected, BaseSingleFieldPeriod, (, int, period, ), {, super, (, ), ;, iPeriod, =, period, ;, }, protected, int]
[., safeToInt, (, duration, /, millisPerUnit, ), ;, }, protected, BaseSingleFieldPeriod, (, int, period, ), {, super, (, ), ;]
[), ;, }, protected, BaseSingleFieldPeriod, (, int, period, ), {, super, (, ), ;, iPeriod, =, period, ;, }, protected]
[/, millisPerUnit, ), ;, }, protected, BaseSingleFieldPeriod, (, int, period, ), {, super, (, ), ;, iPeriod, =, period, ;]
[), ;, }, protected, BaseSingleFieldPeriod, (, int, period, ), {, super, (, ), ;, iPeriod, =, period, ;, }, protected]
[=, period, ;, }, protected, int, getValue, (, ), {, return, iPeriod, ;, }, protected, void, setValue, (, int, value]
[;, }, protected, int, getValue, (, ), {, return, iPeriod, ;, }, protected, void, setValue, (, int, value, ), {]
[;, }, protected, void, setValue, (, int, value, ), {, iPeriod, =, value, ;, }, public, abstract, DurationFieldType, getFieldType, (]
[=, value, ;, }, public, abstract, DurationFieldType, getFieldType, (, ), ;, public, abstract, PeriodType, getPeriodType, (, ), ;, public, int]
[;, }, public, abstract, DurationFieldType, getFieldType, (, ), ;, public, abstract, PeriodType, getPeriodType, (, ), ;, public, int, size, (]
[;, }, public, DurationFieldType, getFieldType, (, int, index, ), {, if, (, index, !=, 0, ), {, throw, new, IndexOutOfBoundsException]
[), {, throw, new, IndexOutOfBoundsException, (, String, ., valueOf, (, index, ), ), ;, }, return, getFieldType, (, ), ;]
[!=, 0, ), {, throw, new, IndexOutOfBoundsException, (, String, ., valueOf, (, index, ), ), ;, }, return, getFieldType, (]
[), {, throw, new, IndexOutOfBoundsException, (, String, ., valueOf, (, index, ), ), ;, }, return, getFieldType, (, ), ;]
[;, }, return, getFieldType, (, ), ;, }, public, int, getValue, (, int, index, ), {, if, (, index, !=]
[), ;, }, return, getFieldType, (, ), ;, }, public, int, getValue, (, int, index, ), {, if, (, index]
[., valueOf, (, index, ), ), ;, }, return, getFieldType, (, ), ;, }, public, int, getValue, (, int, index]
[), ), ;, }, return, getFieldType, (, ), ;, }, public, int, getValue, (, int, index, ), {, if, (]
[;, }, public, int, getValue, (, int, index, ), {, if, (, index, !=, 0, ), {, throw, new, IndexOutOfBoundsException]
[), {, throw, new, IndexOutOfBoundsException, (, String, ., valueOf, (, index, ), ), ;, }, return, getValue, (, ), ;]
[!=, 0, ), {, throw, new, IndexOutOfBoundsException, (, String, ., valueOf, (, index, ), ), ;, }, return, getValue, (]
[), {, throw, new, IndexOutOfBoundsException, (, String, ., valueOf, (, index, ), ), ;, }, return, getValue, (, ), ;]
[;, }, return, getValue, (, ), ;, }, public, int, get, (, DurationFieldType, type, ), {, if, (, type, ==]
[), ;, }, return, getValue, (, ), ;, }, public, int, get, (, DurationFieldType, type, ), {, if, (, type]
[., valueOf, (, index, ), ), ;, }, return, getValue, (, ), ;, }, public, int, get, (, DurationFieldType, type]
[), ), ;, }, return, getValue, (, ), ;, }, public, int, get, (, DurationFieldType, type, ), {, if, (]
[;, }, public, int, get, (, DurationFieldType, type, ), {, if, (, type, ==, getFieldType, (, ), ), {, return]
[), {, return, getValue, (, ), ;, }, return, 0, ;, }, public, boolean, isSupported, (, DurationFieldType, type, ), {]
[==, getFieldType, (, ), ), {, return, getValue, (, ), ;, }, return, 0, ;, }, public, boolean, isSupported, (]
[), {, return, getValue, (, ), ;, }, return, 0, ;, }, public, boolean, isSupported, (, DurationFieldType, type, ), {]
[;, }, return, 0, ;, }, public, boolean, isSupported, (, DurationFieldType, type, ), {, return, (, type, ==, getFieldType, (]
[;, }, public, boolean, isSupported, (, DurationFieldType, type, ), {, return, (, type, ==, getFieldType, (, ), ), ;, }]
[;, }, public, Period, toPeriod, (, ), {, return, Period, ., ZERO, ., withFields, (, this, ), ;, }, public]
[), ;, }, public, Period, toPeriod, (, ), {, return, Period, ., ZERO, ., withFields, (, this, ), ;, }]
[==, getFieldType, (, ), ), ;, }, public, Period, toPeriod, (, ), {, return, Period, ., ZERO, ., withFields, (]
[), ;, }, public, Period, toPeriod, (, ), {, return, Period, ., ZERO, ., withFields, (, this, ), ;, }]
[;, }, public, MutablePeriod, toMutablePeriod, (, ), {, MutablePeriod, period, =, new, MutablePeriod, (, ), ;, period, ., add, (]
[., withFields, (, this, ), ;, }, public, MutablePeriod, toMutablePeriod, (, ), {, MutablePeriod, period, =, new, MutablePeriod, (, )]
[., ZERO, ., withFields, (, this, ), ;, }, public, MutablePeriod, toMutablePeriod, (, ), {, MutablePeriod, period, =, new, MutablePeriod]
[), ;, }, public, MutablePeriod, toMutablePeriod, (, ), {, MutablePeriod, period, =, new, MutablePeriod, (, ), ;, period, ., add]
[;, period, ., add, (, this, ), ;, return, period, ;, }, public, boolean, equals, (, Object, period, ), {]
[;, return, period, ;, }, public, boolean, equals, (, Object, period, ), {, if, (, this, ==, period, ), {]
[., add, (, this, ), ;, return, period, ;, }, public, boolean, equals, (, Object, period, ), {, if, (]
[), ;, return, period, ;, }, public, boolean, equals, (, Object, period, ), {, if, (, this, ==, period, )]
[;, }, public, boolean, equals, (, Object, period, ), {, if, (, this, ==, period, ), {, return, true, ;]
[), {, return, true, ;, }, if, (, period, instanceof, ReadablePeriod, ==, false, ), {, return, false, ;, }, ReadablePeriod]
[==, period, ), {, return, true, ;, }, if, (, period, instanceof, ReadablePeriod, ==, false, ), {, return, false, ;]
[), {, return, true, ;, }, if, (, period, instanceof, ReadablePeriod, ==, false, ), {, return, false, ;, }, ReadablePeriod]
[;, }, if, (, period, instanceof, ReadablePeriod, ==, false, ), {, return, false, ;, }, ReadablePeriod, other, =, (, ReadablePeriod]
[), {, return, false, ;, }, ReadablePeriod, other, =, (, ReadablePeriod, ), period, ;, return, (, other, ., getPeriodType, (]
[==, false, ), {, return, false, ;, }, ReadablePeriod, other, =, (, ReadablePeriod, ), period, ;, return, (, other, .]
[instanceof, ReadablePeriod, ==, false, ), {, return, false, ;, }, ReadablePeriod, other, =, (, ReadablePeriod, ), period, ;, return, (]
[), {, return, false, ;, }, ReadablePeriod, other, =, (, ReadablePeriod, ), period, ;, return, (, other, ., getPeriodType, (]
[;, }, ReadablePeriod, other, =, (, ReadablePeriod, ), period, ;, return, (, other, ., getPeriodType, (, ), ==, getPeriodType, (]
[;, return, (, other, ., getPeriodType, (, ), ==, getPeriodType, (, ), &&, other, ., getValue, (, 0, ), ==]
[;, return, (, other, ., getPeriodType, (, ), ==, getPeriodType, (, ), &&, other, ., getValue, (, 0, ), ==]
[;, }, public, int, hashCode, (, ), {, int, total, =, 17, ;, total, =, 27, *, total, +, getValue]
[), ;, }, public, int, hashCode, (, ), {, int, total, =, 17, ;, total, =, 27, *, total, +]
[&&, other, ., getValue, (, 0, ), ==, getValue, (, ), ), ;, }, public, int, hashCode, (, ), {]
[==, getPeriodType, (, ), &&, other, ., getValue, (, 0, ), ==, getValue, (, ), ), ;, }, public, int]
[., getPeriodType, (, ), ==, getPeriodType, (, ), &&, other, ., getValue, (, 0, ), ==, getValue, (, ), )]
[&&, other, ., getValue, (, 0, ), ==, getValue, (, ), ), ;, }, public, int, hashCode, (, ), {]
[), ;, }, public, int, hashCode, (, ), {, int, total, =, 17, ;, total, =, 27, *, total, +]
[==, getValue, (, ), ), ;, }, public, int, hashCode, (, ), {, int, total, =, 17, ;, total, =]
[., getValue, (, 0, ), ==, getValue, (, ), ), ;, }, public, int, hashCode, (, ), {, int, total]
[), ==, getValue, (, ), ), ;, }, public, int, hashCode, (, ), {, int, total, =, 17, ;, total]
[), ;, }, public, int, hashCode, (, ), {, int, total, =, 17, ;, total, =, 27, *, total, +]
[;, total, =, 27, *, total, +, getValue, (, ), ;, total, =, 27, *, total, +, getFieldType, (, )]
[=, 27, *, total, +, getValue, (, ), ;, total, =, 27, *, total, +, getFieldType, (, ), ., hashCode]
[;, total, =, 27, *, total, +, getFieldType, (, ), ., hashCode, (, ), ;, return, total, ;, }, public]
[+, getValue, (, ), ;, total, =, 27, *, total, +, getFieldType, (, ), ., hashCode, (, ), ;, return]
[*, total, +, getValue, (, ), ;, total, =, 27, *, total, +, getFieldType, (, ), ., hashCode, (, )]
[+, getValue, (, ), ;, total, =, 27, *, total, +, getFieldType, (, ), ., hashCode, (, ), ;, return]
[;, total, =, 27, *, total, +, getFieldType, (, ), ., hashCode, (, ), ;, return, total, ;, }, public]
[=, 27, *, total, +, getFieldType, (, ), ., hashCode, (, ), ;, return, total, ;, }, public, int, compareTo]
[;, return, total, ;, }, public, int, compareTo, (, BaseSingleFieldPeriod, other, ), {, if, (, other, ., getClass, (, )]
[+, getFieldType, (, ), ., hashCode, (, ), ;, return, total, ;, }, public, int, compareTo, (, BaseSingleFieldPeriod, other, )]
[*, total, +, getFieldType, (, ), ., hashCode, (, ), ;, return, total, ;, }, public, int, compareTo, (, BaseSingleFieldPeriod]
[+, getFieldType, (, ), ., hashCode, (, ), ;, return, total, ;, }, public, int, compareTo, (, BaseSingleFieldPeriod, other, )]
[;, return, total, ;, }, public, int, compareTo, (, BaseSingleFieldPeriod, other, ), {, if, (, other, ., getClass, (, )]
[., hashCode, (, ), ;, return, total, ;, }, public, int, compareTo, (, BaseSingleFieldPeriod, other, ), {, if, (, other]
[;, }, public, int, compareTo, (, BaseSingleFieldPeriod, other, ), {, if, (, other, ., getClass, (, ), !=, getClass, (]
[), {, throw, new, ClassCastException, (, getClass, (, ), +, " cannot be compared to ", +, other, ., getClass, (, ), ), ;, }]
[!=, getClass, (, ), ), {, throw, new, ClassCastException, (, getClass, (, ), +, " cannot be compared to ", +, other, ., getClass, (]
[., getClass, (, ), !=, getClass, (, ), ), {, throw, new, ClassCastException, (, getClass, (, ), +, " cannot be compared to ", +]
[), {, throw, new, ClassCastException, (, getClass, (, ), +, " cannot be compared to ", +, other, ., getClass, (, ), ), ;, }]
[;, }, int, otherValue, =, other, ., getValue, (, ), ;, int, thisValue, =, getValue, (, ), ;, if, (]
[), ;, }, int, otherValue, =, other, ., getValue, (, ), ;, int, thisValue, =, getValue, (, ), ;, if]
[+, other, ., getClass, (, ), ), ;, }, int, otherValue, =, other, ., getValue, (, ), ;, int, thisValue]
[+, " cannot be compared to ", +, other, ., getClass, (, ), ), ;, }, int, otherValue, =, other, ., getValue, (, ), ;]
[+, other, ., getClass, (, ), ), ;, }, int, otherValue, =, other, ., getValue, (, ), ;, int, thisValue]
[), ;, }, int, otherValue, =, other, ., getValue, (, ), ;, int, thisValue, =, getValue, (, ), ;, if]
[., getClass, (, ), ), ;, }, int, otherValue, =, other, ., getValue, (, ), ;, int, thisValue, =, getValue]
[;, int, thisValue, =, getValue, (, ), ;, if, (, thisValue, >, otherValue, ), {, return, 1, ;, }, if]
[., getValue, (, ), ;, int, thisValue, =, getValue, (, ), ;, if, (, thisValue, >, otherValue, ), {, return]
[;, if, (, thisValue, >, otherValue, ), {, return, 1, ;, }, if, (, thisValue, <, otherValue, ), {, return]
[), {, return, 1, ;, }, if, (, thisValue, <, otherValue, ), {, return, -, 1, ;, }, return, 0]
[>, otherValue, ), {, return, 1, ;, }, if, (, thisValue, <, otherValue, ), {, return, -, 1, ;, }]
[), {, return, 1, ;, }, if, (, thisValue, <, otherValue, ), {, return, -, 1, ;, }, return, 0]
[;, }, if, (, thisValue, <, otherValue, ), {, return, -, 1, ;, }, return, 0, ;, }, }]
[), {, return, -, 1, ;, }, return, 0, ;, }, }]
[<, otherValue, ), {, return, -, 1, ;, }, return, 0, ;, }, }]
[), {, return, -, 1, ;, }, return, 0, ;, }, }]
[;, }, return, 0, ;, }, }]
[;, }, return, 0, ;, }, }]
[;, }, }]
