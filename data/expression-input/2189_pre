[super, (, ), ;, }, public, static, String, wrap, (, final, String, str, ,, final, int, wrapLength, ), {, return]
[), ;, }, public, static, String, wrap, (, final, String, str, ,, final, int, wrapLength, ), {, return, wrap, (]
[}, public, static, String, wrap, (, final, String, str, ,, final, int, wrapLength, ), {, return, wrap, (, str, ,]
[static, String, wrap, (, final, String, str, ,, final, int, wrapLength, ), {, return, wrap, (, str, ,, wrapLength, ,]
[wrap, (, final, String, str, ,, final, int, wrapLength, ), {, return, wrap, (, str, ,, wrapLength, ,, null, ,]
[String, wrap, (, final, String, str, ,, int, wrapLength, ,, String, newLineStr, ,, final, boolean, wrapLongWords, ), {, if, (]
[String, wrap, (, final, String, str, ,, int, wrapLength, ,, String, newLineStr, ,, final, boolean, wrapLongWords, ), {, if, (]
[(, final, String, str, ,, int, wrapLength, ,, String, newLineStr, ,, final, boolean, wrapLongWords, ), {, if, (, str, ==]
[,, int, wrapLength, ,, String, newLineStr, ,, final, boolean, wrapLongWords, ), {, if, (, str, ==, null, ), {, return]
[newLineStr, ,, final, boolean, wrapLongWords, ), {, if, (, str, ==, null, ), {, return, null, ;, }, if, (]
[newLineStr, ,, final, boolean, wrapLongWords, ), {, if, (, str, ==, null, ), {, return, null, ;, }, if, (]
[final, boolean, wrapLongWords, ), {, if, (, str, ==, null, ), {, return, null, ;, }, if, (, newLineStr, ==]
[), {, if, (, str, ==, null, ), {, return, null, ;, }, if, (, newLineStr, ==, null, ), {]
[if, (, str, ==, null, ), {, return, null, ;, }, if, (, newLineStr, ==, null, ), {, newLineStr, =]
[if, (, str, ==, null, ), {, return, null, ;, }, if, (, newLineStr, ==, null, ), {, newLineStr, =]
[return, null, ;, }, if, (, newLineStr, ==, null, ), {, newLineStr, =, SystemUtils, ., LINE_SEPARATOR, ;, }, if, (]
[return, null, ;, }, if, (, newLineStr, ==, null, ), {, newLineStr, =, SystemUtils, ., LINE_SEPARATOR, ;, }, if, (]
[;, }, if, (, newLineStr, ==, null, ), {, newLineStr, =, SystemUtils, ., LINE_SEPARATOR, ;, }, if, (, wrapLength, <]
[(, newLineStr, ==, null, ), {, newLineStr, =, SystemUtils, ., LINE_SEPARATOR, ;, }, if, (, wrapLength, <, 1, ), {]
[==, null, ), {, newLineStr, =, SystemUtils, ., LINE_SEPARATOR, ;, }, if, (, wrapLength, <, 1, ), {, wrapLength, =]
[., LINE_SEPARATOR, ;, }, if, (, wrapLength, <, 1, ), {, wrapLength, =, 1, ;, }, final, int, inputLineLength, =]
[., LINE_SEPARATOR, ;, }, if, (, wrapLength, <, 1, ), {, wrapLength, =, 1, ;, }, final, int, inputLineLength, =]
[), {, wrapLength, =, 1, ;, }, final, int, inputLineLength, =, str, ., length, (, ), ;, int, offset, =]
[}, final, int, inputLineLength, =, str, ., length, (, ), ;, int, offset, =, 0, ;, final, StringBuilder, wrappedLine, =]
[inputLineLength, =, str, ., length, (, ), ;, int, offset, =, 0, ;, final, StringBuilder, wrappedLine, =, new, StringBuilder, (]
[inputLineLength, =, str, ., length, (, ), ;, int, offset, =, 0, ;, final, StringBuilder, wrappedLine, =, new, StringBuilder, (]
[str, ., length, (, ), ;, int, offset, =, 0, ;, final, StringBuilder, wrappedLine, =, new, StringBuilder, (, inputLineLength, +]
[;, int, offset, =, 0, ;, final, StringBuilder, wrappedLine, =, new, StringBuilder, (, inputLineLength, +, 32, ), ;, while, (]
[;, int, offset, =, 0, ;, final, StringBuilder, wrappedLine, =, new, StringBuilder, (, inputLineLength, +, 32, ), ;, while, (]
[;, int, offset, =, 0, ;, final, StringBuilder, wrappedLine, =, new, StringBuilder, (, inputLineLength, +, 32, ), ;, while, (]
[offset, =, 0, ;, final, StringBuilder, wrappedLine, =, new, StringBuilder, (, inputLineLength, +, 32, ), ;, while, (, inputLineLength, -]
[0, ;, final, StringBuilder, wrappedLine, =, new, StringBuilder, (, inputLineLength, +, 32, ), ;, while, (, inputLineLength, -, offset, >]
[=, new, StringBuilder, (, inputLineLength, +, 32, ), ;, while, (, inputLineLength, -, offset, >, wrapLength, ), {, if, (]
[=, new, StringBuilder, (, inputLineLength, +, 32, ), ;, while, (, inputLineLength, -, offset, >, wrapLength, ), {, if, (]
[=, new, StringBuilder, (, inputLineLength, +, 32, ), ;, while, (, inputLineLength, -, offset, >, wrapLength, ), {, if, (]
[inputLineLength, +, 32, ), ;, while, (, inputLineLength, -, offset, >, wrapLength, ), {, if, (, str, ., charAt, (]
[), ;, while, (, inputLineLength, -, offset, >, wrapLength, ), {, if, (, str, ., charAt, (, offset, ), ==]
[(, inputLineLength, -, offset, >, wrapLength, ), {, if, (, str, ., charAt, (, offset, ), ==, ' ', ), {]
[(, inputLineLength, -, offset, >, wrapLength, ), {, if, (, str, ., charAt, (, offset, ), ==, ' ', ), {]
[(, str, ., charAt, (, offset, ), ==, ' ', ), {, offset, ++, ;, continue, ;, }, int, spaceToWrapAt, =]
[(, str, ., charAt, (, offset, ), ==, ' ', ), {, offset, ++, ;, continue, ;, }, int, spaceToWrapAt, =]
[(, offset, ), ==, ' ', ), {, offset, ++, ;, continue, ;, }, int, spaceToWrapAt, =, str, ., lastIndexOf, (]
[), ==, ' ', ), {, offset, ++, ;, continue, ;, }, int, spaceToWrapAt, =, str, ., lastIndexOf, (, ' ', ,]
[), ==, ' ', ), {, offset, ++, ;, continue, ;, }, int, spaceToWrapAt, =, str, ., lastIndexOf, (, ' ', ,]
[' ', ), {, offset, ++, ;, continue, ;, }, int, spaceToWrapAt, =, str, ., lastIndexOf, (, ' ', ,, wrapLength, +]
[;, continue, ;, }, int, spaceToWrapAt, =, str, ., lastIndexOf, (, ' ', ,, wrapLength, +, offset, ), ;, if, (]
[;, continue, ;, }, int, spaceToWrapAt, =, str, ., lastIndexOf, (, ' ', ,, wrapLength, +, offset, ), ;, if, (]
[;, }, int, spaceToWrapAt, =, str, ., lastIndexOf, (, ' ', ,, wrapLength, +, offset, ), ;, if, (, spaceToWrapAt, >=]
[spaceToWrapAt, =, str, ., lastIndexOf, (, ' ', ,, wrapLength, +, offset, ), ;, if, (, spaceToWrapAt, >=, offset, ), {]
[spaceToWrapAt, =, str, ., lastIndexOf, (, ' ', ,, wrapLength, +, offset, ), ;, if, (, spaceToWrapAt, >=, offset, ), {]
[lastIndexOf, (, ' ', ,, wrapLength, +, offset, ), ;, if, (, spaceToWrapAt, >=, offset, ), {, wrappedLine, ., append, (]
[lastIndexOf, (, ' ', ,, wrapLength, +, offset, ), ;, if, (, spaceToWrapAt, >=, offset, ), {, wrappedLine, ., append, (]
[wrapLength, +, offset, ), ;, if, (, spaceToWrapAt, >=, offset, ), {, wrappedLine, ., append, (, str, ., substring, (]
[offset, ), ;, if, (, spaceToWrapAt, >=, offset, ), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,]
[(, spaceToWrapAt, >=, offset, ), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, spaceToWrapAt, ), ), ;]
[(, spaceToWrapAt, >=, offset, ), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, spaceToWrapAt, ), ), ;]
[), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, spaceToWrapAt, ), ), ;, wrappedLine, ., append, (]
[., append, (, str, ., substring, (, offset, ,, spaceToWrapAt, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;]
[(, str, ., substring, (, offset, ,, spaceToWrapAt, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, =]
[(, str, ., substring, (, offset, ,, spaceToWrapAt, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, =]
[., substring, (, offset, ,, spaceToWrapAt, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, =, spaceToWrapAt, +]
[), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {, if, (]
[., append, (, newLineStr, ), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {, if, (, wrapLongWords, ), {]
[., append, (, newLineStr, ), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {, if, (, wrapLongWords, ), {]
[), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {, if, (, wrapLongWords, ), {, wrappedLine, ., append, (]
[), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {, if, (, wrapLongWords, ), {, wrappedLine, ., append, (]
[spaceToWrapAt, +, 1, ;, }, else, {, if, (, wrapLongWords, ), {, wrappedLine, ., append, (, str, ., substring, (]
[1, ;, }, else, {, if, (, wrapLongWords, ), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,]
[1, ;, }, else, {, if, (, wrapLongWords, ), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,]
[}, else, {, if, (, wrapLongWords, ), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, wrapLength, +]
[(, wrapLongWords, ), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, wrapLength, +, offset, ), ), ;]
[(, wrapLongWords, ), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, wrapLength, +, offset, ), ), ;]
[wrappedLine, ., append, (, str, ., substring, (, offset, ,, wrapLength, +, offset, ), ), ;, wrappedLine, ., append, (]
[(, str, ., substring, (, offset, ,, wrapLength, +, offset, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;]
[., substring, (, offset, ,, wrapLength, +, offset, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, +=]
[wrapLength, +, offset, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, +=, wrapLength, ;, }, else, {]
[offset, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, +=, wrapLength, ;, }, else, {, spaceToWrapAt, =]
[offset, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, +=, wrapLength, ;, }, else, {, spaceToWrapAt, =]
[wrappedLine, ., append, (, newLineStr, ), ;, offset, +=, wrapLength, ;, }, else, {, spaceToWrapAt, =, str, ., indexOf, (]
[append, (, newLineStr, ), ;, offset, +=, wrapLength, ;, }, else, {, spaceToWrapAt, =, str, ., indexOf, (, ' ', ,]
[append, (, newLineStr, ), ;, offset, +=, wrapLength, ;, }, else, {, spaceToWrapAt, =, str, ., indexOf, (, ' ', ,]
[newLineStr, ), ;, offset, +=, wrapLength, ;, }, else, {, spaceToWrapAt, =, str, ., indexOf, (, ' ', ,, wrapLength, +]
[wrapLength, ;, }, else, {, spaceToWrapAt, =, str, ., indexOf, (, ' ', ,, wrapLength, +, offset, ), ;, if, (]
[wrapLength, ;, }, else, {, spaceToWrapAt, =, str, ., indexOf, (, ' ', ,, wrapLength, +, offset, ), ;, if, (]
[}, else, {, spaceToWrapAt, =, str, ., indexOf, (, ' ', ,, wrapLength, +, offset, ), ;, if, (, spaceToWrapAt, >=]
[spaceToWrapAt, =, str, ., indexOf, (, ' ', ,, wrapLength, +, offset, ), ;, if, (, spaceToWrapAt, >=, 0, ), {]
[spaceToWrapAt, =, str, ., indexOf, (, ' ', ,, wrapLength, +, offset, ), ;, if, (, spaceToWrapAt, >=, 0, ), {]
[indexOf, (, ' ', ,, wrapLength, +, offset, ), ;, if, (, spaceToWrapAt, >=, 0, ), {, wrappedLine, ., append, (]
[indexOf, (, ' ', ,, wrapLength, +, offset, ), ;, if, (, spaceToWrapAt, >=, 0, ), {, wrappedLine, ., append, (]
[wrapLength, +, offset, ), ;, if, (, spaceToWrapAt, >=, 0, ), {, wrappedLine, ., append, (, str, ., substring, (]
[offset, ), ;, if, (, spaceToWrapAt, >=, 0, ), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,]
[(, spaceToWrapAt, >=, 0, ), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, spaceToWrapAt, ), ), ;]
[(, spaceToWrapAt, >=, 0, ), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, spaceToWrapAt, ), ), ;]
[), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, spaceToWrapAt, ), ), ;, wrappedLine, ., append, (]
[., append, (, str, ., substring, (, offset, ,, spaceToWrapAt, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;]
[(, str, ., substring, (, offset, ,, spaceToWrapAt, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, =]
[(, str, ., substring, (, offset, ,, spaceToWrapAt, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, =]
[., substring, (, offset, ,, spaceToWrapAt, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, =, spaceToWrapAt, +]
[spaceToWrapAt, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {]
[spaceToWrapAt, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {]
[wrappedLine, ., append, (, newLineStr, ), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {, wrappedLine, ., append, (]
[wrappedLine, ., append, (, newLineStr, ), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {, wrappedLine, ., append, (]
[newLineStr, ), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {, wrappedLine, ., append, (, str, ., substring, (]
[=, spaceToWrapAt, +, 1, ;, }, else, {, wrappedLine, ., append, (, str, ., substring, (, offset, ), ), ;]
[+, 1, ;, }, else, {, wrappedLine, ., append, (, str, ., substring, (, offset, ), ), ;, offset, =]
[wrappedLine, ., append, (, str, ., substring, (, offset, ), ), ;, offset, =, inputLineLength, ;, }, }, }, }]
[wrappedLine, ., append, (, str, ., substring, (, offset, ), ), ;, offset, =, inputLineLength, ;, }, }, }, }]
[str, ., substring, (, offset, ), ), ;, offset, =, inputLineLength, ;, }, }, }, }, wrappedLine, ., append, (]
[str, ., substring, (, offset, ), ), ;, offset, =, inputLineLength, ;, }, }, }, }, wrappedLine, ., append, (]
[offset, ), ), ;, offset, =, inputLineLength, ;, }, }, }, }, wrappedLine, ., append, (, str, ., substring, (]
[=, inputLineLength, ;, }, }, }, }, wrappedLine, ., append, (, str, ., substring, (, offset, ), ), ;, return]
[=, inputLineLength, ;, }, }, }, }, wrappedLine, ., append, (, str, ., substring, (, offset, ), ), ;, return]
[;, return, wrappedLine, ., toString, (, ), ;, }, public, static, String, capitalize, (, final, String, str, ), {, return]
[wrappedLine, ., toString, (, ), ;, }, public, static, String, capitalize, (, final, String, str, ), {, return, capitalize, (]
[toString, (, ), ;, }, public, static, String, capitalize, (, final, String, str, ), {, return, capitalize, (, str, ,]
[}, public, static, String, capitalize, (, final, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =]
[}, public, static, String, capitalize, (, final, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =]
[}, public, static, String, capitalize, (, final, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =]
[static, String, capitalize, (, final, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =, delimiters, ==]
[capitalize, (, final, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =, delimiters, ==, null, ?]
[(, final, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =, delimiters, ==, null, ?, -]
[String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =, delimiters, ==, null, ?, -, 1, :]
[String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =, delimiters, ==, null, ?, -, 1, :]
[delimiters, ), {, final, int, delimLen, =, delimiters, ==, null, ?, -, 1, :, delimiters, ., length, ;, if, (]
[delimiters, ), {, final, int, delimLen, =, delimiters, ==, null, ?, -, 1, :, delimiters, ., length, ;, if, (]
[delimiters, ), {, final, int, delimLen, =, delimiters, ==, null, ?, -, 1, :, delimiters, ., length, ;, if, (]
[int, delimLen, =, delimiters, ==, null, ?, -, 1, :, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (]
[delimiters, ==, null, ?, -, 1, :, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||]
[delimiters, ==, null, ?, -, 1, :, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||]
[null, ?, -, 1, :, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==]
[:, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return]
[isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return, str, ;, }, final, char, [, ], buffer, =]
[isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return, str, ;, }, final, char, [, ], buffer, =]
[{, return, str, ;, }, final, char, [, ], buffer, =, str, ., toCharArray, (, ), ;, boolean, capitalizeNext, =]
[[, ], buffer, =, str, ., toCharArray, (, ), ;, boolean, capitalizeNext, =, true, ;, for, (, int, i, =]
[buffer, =, str, ., toCharArray, (, ), ;, boolean, capitalizeNext, =, true, ;, for, (, int, i, =, 0, ;]
[buffer, =, str, ., toCharArray, (, ), ;, boolean, capitalizeNext, =, true, ;, for, (, int, i, =, 0, ;]
[str, ., toCharArray, (, ), ;, boolean, capitalizeNext, =, true, ;, for, (, int, i, =, 0, ;, i, <]
[str, ., toCharArray, (, ), ;, boolean, capitalizeNext, =, true, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, boolean, capitalizeNext, =, true, ;, for, (, int, i, =, 0, ;, i, <, buffer, ., length, ;]
[), ;, boolean, capitalizeNext, =, true, ;, for, (, int, i, =, 0, ;, i, <, buffer, ., length, ;]
[(, int, i, =, 0, ;, i, <, buffer, ., length, ;, i, ++, ), {, final, char, ch, =]
[(, int, i, =, 0, ;, i, <, buffer, ., length, ;, i, ++, ), {, final, char, ch, =]
[i, =, 0, ;, i, <, buffer, ., length, ;, i, ++, ), {, final, char, ch, =, buffer, []
[<, buffer, ., length, ;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (]
[., length, ;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (, isDelimiter, (]
[;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (, isDelimiter, (, ch, ,]
[{, final, char, ch, =, buffer, [, i, ], ;, if, (, isDelimiter, (, ch, ,, delimiters, ), ), {]
[char, ch, =, buffer, [, i, ], ;, if, (, isDelimiter, (, ch, ,, delimiters, ), ), {, capitalizeNext, =]
[], ;, if, (, isDelimiter, (, ch, ,, delimiters, ), ), {, capitalizeNext, =, true, ;, }, else, if, (]
[(, isDelimiter, (, ch, ,, delimiters, ), ), {, capitalizeNext, =, true, ;, }, else, if, (, capitalizeNext, ), {]
[(, isDelimiter, (, ch, ,, delimiters, ), ), {, capitalizeNext, =, true, ;, }, else, if, (, capitalizeNext, ), {]
[(, ch, ,, delimiters, ), ), {, capitalizeNext, =, true, ;, }, else, if, (, capitalizeNext, ), {, buffer, []
[delimiters, ), ), {, capitalizeNext, =, true, ;, }, else, if, (, capitalizeNext, ), {, buffer, [, i, ], =]
[delimiters, ), ), {, capitalizeNext, =, true, ;, }, else, if, (, capitalizeNext, ), {, buffer, [, i, ], =]
[capitalizeNext, =, true, ;, }, else, if, (, capitalizeNext, ), {, buffer, [, i, ], =, Character, ., toTitleCase, (]
[;, }, else, if, (, capitalizeNext, ), {, buffer, [, i, ], =, Character, ., toTitleCase, (, ch, ), ;]
[else, if, (, capitalizeNext, ), {, buffer, [, i, ], =, Character, ., toTitleCase, (, ch, ), ;, capitalizeNext, =]
[{, buffer, [, i, ], =, Character, ., toTitleCase, (, ch, ), ;, capitalizeNext, =, false, ;, }, }, return]
[i, ], =, Character, ., toTitleCase, (, ch, ), ;, capitalizeNext, =, false, ;, }, }, return, new, String, (]
[}, return, new, String, (, buffer, ), ;, }, public, static, String, capitalizeFully, (, final, String, str, ), {, return]
[new, String, (, buffer, ), ;, }, public, static, String, capitalizeFully, (, final, String, str, ), {, return, capitalizeFully, (]
[(, buffer, ), ;, }, public, static, String, capitalizeFully, (, final, String, str, ), {, return, capitalizeFully, (, str, ,]
[;, }, public, static, String, capitalizeFully, (, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =]
[;, }, public, static, String, capitalizeFully, (, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =]
[;, }, public, static, String, capitalizeFully, (, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =]
[public, static, String, capitalizeFully, (, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =, delimiters, ==]
[String, capitalizeFully, (, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =, delimiters, ==, null, ?]
[capitalizeFully, (, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =, delimiters, ==, null, ?, -]
[String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =, delimiters, ==, null, ?, -, 1, :]
[String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =, delimiters, ==, null, ?, -, 1, :]
[delimiters, ), {, final, int, delimLen, =, delimiters, ==, null, ?, -, 1, :, delimiters, ., length, ;, if, (]
[delimiters, ), {, final, int, delimLen, =, delimiters, ==, null, ?, -, 1, :, delimiters, ., length, ;, if, (]
[delimiters, ), {, final, int, delimLen, =, delimiters, ==, null, ?, -, 1, :, delimiters, ., length, ;, if, (]
[int, delimLen, =, delimiters, ==, null, ?, -, 1, :, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (]
[delimiters, ==, null, ?, -, 1, :, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||]
[delimiters, ==, null, ?, -, 1, :, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||]
[null, ?, -, 1, :, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==]
[:, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return]
[length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return, str, ;, }]
[if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return, str, ;, }, str, =]
[if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return, str, ;, }, str, =]
[), ||, delimLen, ==, 0, ), {, return, str, ;, }, str, =, str, ., toLowerCase, (, ), ;, return]
[delimLen, ==, 0, ), {, return, str, ;, }, str, =, str, ., toLowerCase, (, ), ;, return, capitalize, (]
[0, ), {, return, str, ;, }, str, =, str, ., toLowerCase, (, ), ;, return, capitalize, (, str, ,]
[return, capitalize, (, str, ,, delimiters, ), ;, }, public, static, String, uncapitalize, (, final, String, str, ), {, return]
[(, str, ,, delimiters, ), ;, }, public, static, String, uncapitalize, (, final, String, str, ), {, return, uncapitalize, (]
[,, delimiters, ), ;, }, public, static, String, uncapitalize, (, final, String, str, ), {, return, uncapitalize, (, str, ,]
[}, public, static, String, uncapitalize, (, final, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =]
[}, public, static, String, uncapitalize, (, final, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =]
[}, public, static, String, uncapitalize, (, final, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =]
[static, String, uncapitalize, (, final, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =, delimiters, ==]
[uncapitalize, (, final, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =, delimiters, ==, null, ?]
[(, final, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =, delimiters, ==, null, ?, -]
[String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =, delimiters, ==, null, ?, -, 1, :]
[String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =, delimiters, ==, null, ?, -, 1, :]
[delimiters, ), {, final, int, delimLen, =, delimiters, ==, null, ?, -, 1, :, delimiters, ., length, ;, if, (]
[delimiters, ), {, final, int, delimLen, =, delimiters, ==, null, ?, -, 1, :, delimiters, ., length, ;, if, (]
[delimiters, ), {, final, int, delimLen, =, delimiters, ==, null, ?, -, 1, :, delimiters, ., length, ;, if, (]
[int, delimLen, =, delimiters, ==, null, ?, -, 1, :, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (]
[delimiters, ==, null, ?, -, 1, :, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||]
[delimiters, ==, null, ?, -, 1, :, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||]
[null, ?, -, 1, :, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==]
[:, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return]
[isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return, str, ;, }, final, char, [, ], buffer, =]
[isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return, str, ;, }, final, char, [, ], buffer, =]
[{, return, str, ;, }, final, char, [, ], buffer, =, str, ., toCharArray, (, ), ;, boolean, uncapitalizeNext, =]
[[, ], buffer, =, str, ., toCharArray, (, ), ;, boolean, uncapitalizeNext, =, true, ;, for, (, int, i, =]
[buffer, =, str, ., toCharArray, (, ), ;, boolean, uncapitalizeNext, =, true, ;, for, (, int, i, =, 0, ;]
[buffer, =, str, ., toCharArray, (, ), ;, boolean, uncapitalizeNext, =, true, ;, for, (, int, i, =, 0, ;]
[str, ., toCharArray, (, ), ;, boolean, uncapitalizeNext, =, true, ;, for, (, int, i, =, 0, ;, i, <]
[str, ., toCharArray, (, ), ;, boolean, uncapitalizeNext, =, true, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, boolean, uncapitalizeNext, =, true, ;, for, (, int, i, =, 0, ;, i, <, buffer, ., length, ;]
[), ;, boolean, uncapitalizeNext, =, true, ;, for, (, int, i, =, 0, ;, i, <, buffer, ., length, ;]
[(, int, i, =, 0, ;, i, <, buffer, ., length, ;, i, ++, ), {, final, char, ch, =]
[(, int, i, =, 0, ;, i, <, buffer, ., length, ;, i, ++, ), {, final, char, ch, =]
[i, =, 0, ;, i, <, buffer, ., length, ;, i, ++, ), {, final, char, ch, =, buffer, []
[<, buffer, ., length, ;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (]
[., length, ;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (, isDelimiter, (]
[;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (, isDelimiter, (, ch, ,]
[{, final, char, ch, =, buffer, [, i, ], ;, if, (, isDelimiter, (, ch, ,, delimiters, ), ), {]
[char, ch, =, buffer, [, i, ], ;, if, (, isDelimiter, (, ch, ,, delimiters, ), ), {, uncapitalizeNext, =]
[], ;, if, (, isDelimiter, (, ch, ,, delimiters, ), ), {, uncapitalizeNext, =, true, ;, }, else, if, (]
[(, isDelimiter, (, ch, ,, delimiters, ), ), {, uncapitalizeNext, =, true, ;, }, else, if, (, uncapitalizeNext, ), {]
[(, isDelimiter, (, ch, ,, delimiters, ), ), {, uncapitalizeNext, =, true, ;, }, else, if, (, uncapitalizeNext, ), {]
[(, ch, ,, delimiters, ), ), {, uncapitalizeNext, =, true, ;, }, else, if, (, uncapitalizeNext, ), {, buffer, []
[delimiters, ), ), {, uncapitalizeNext, =, true, ;, }, else, if, (, uncapitalizeNext, ), {, buffer, [, i, ], =]
[delimiters, ), ), {, uncapitalizeNext, =, true, ;, }, else, if, (, uncapitalizeNext, ), {, buffer, [, i, ], =]
[uncapitalizeNext, =, true, ;, }, else, if, (, uncapitalizeNext, ), {, buffer, [, i, ], =, Character, ., toLowerCase, (]
[;, }, else, if, (, uncapitalizeNext, ), {, buffer, [, i, ], =, Character, ., toLowerCase, (, ch, ), ;]
[else, if, (, uncapitalizeNext, ), {, buffer, [, i, ], =, Character, ., toLowerCase, (, ch, ), ;, uncapitalizeNext, =]
[{, buffer, [, i, ], =, Character, ., toLowerCase, (, ch, ), ;, uncapitalizeNext, =, false, ;, }, }, return]
[i, ], =, Character, ., toLowerCase, (, ch, ), ;, uncapitalizeNext, =, false, ;, }, }, return, new, String, (]
[return, new, String, (, buffer, ), ;, }, public, static, String, swapCase, (, final, String, str, ), {, if, (]
[return, new, String, (, buffer, ), ;, }, public, static, String, swapCase, (, final, String, str, ), {, if, (]
[buffer, ), ;, }, public, static, String, swapCase, (, final, String, str, ), {, if, (, StringUtils, ., isEmpty, (]
[static, String, swapCase, (, final, String, str, ), {, if, (, StringUtils, ., isEmpty, (, str, ), ), {, return]
[if, (, StringUtils, ., isEmpty, (, str, ), ), {, return, str, ;, }, final, char, [, ], buffer, =]
[if, (, StringUtils, ., isEmpty, (, str, ), ), {, return, str, ;, }, final, char, [, ], buffer, =]
[{, return, str, ;, }, final, char, [, ], buffer, =, str, ., toCharArray, (, ), ;, boolean, whitespace, =]
[[, ], buffer, =, str, ., toCharArray, (, ), ;, boolean, whitespace, =, true, ;, for, (, int, i, =]
[buffer, =, str, ., toCharArray, (, ), ;, boolean, whitespace, =, true, ;, for, (, int, i, =, 0, ;]
[buffer, =, str, ., toCharArray, (, ), ;, boolean, whitespace, =, true, ;, for, (, int, i, =, 0, ;]
[str, ., toCharArray, (, ), ;, boolean, whitespace, =, true, ;, for, (, int, i, =, 0, ;, i, <]
[str, ., toCharArray, (, ), ;, boolean, whitespace, =, true, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, boolean, whitespace, =, true, ;, for, (, int, i, =, 0, ;, i, <, buffer, ., length, ;]
[), ;, boolean, whitespace, =, true, ;, for, (, int, i, =, 0, ;, i, <, buffer, ., length, ;]
[(, int, i, =, 0, ;, i, <, buffer, ., length, ;, i, ++, ), {, final, char, ch, =]
[(, int, i, =, 0, ;, i, <, buffer, ., length, ;, i, ++, ), {, final, char, ch, =]
[i, =, 0, ;, i, <, buffer, ., length, ;, i, ++, ), {, final, char, ch, =, buffer, []
[<, buffer, ., length, ;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (]
[<, buffer, ., length, ;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (]
[;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (, Character, ., isUpperCase, (]
[{, final, char, ch, =, buffer, [, i, ], ;, if, (, Character, ., isUpperCase, (, ch, ), ), {]
[{, final, char, ch, =, buffer, [, i, ], ;, if, (, Character, ., isUpperCase, (, ch, ), ), {]
[char, ch, =, buffer, [, i, ], ;, if, (, Character, ., isUpperCase, (, ch, ), ), {, buffer, []
[buffer, [, i, ], ;, if, (, Character, ., isUpperCase, (, ch, ), ), {, buffer, [, i, ], =]
[buffer, [, i, ], ;, if, (, Character, ., isUpperCase, (, ch, ), ), {, buffer, [, i, ], =]
[;, if, (, Character, ., isUpperCase, (, ch, ), ), {, buffer, [, i, ], =, Character, ., toLowerCase, (]
[Character, ., isUpperCase, (, ch, ), ), {, buffer, [, i, ], =, Character, ., toLowerCase, (, ch, ), ;]
[isUpperCase, (, ch, ), ), {, buffer, [, i, ], =, Character, ., toLowerCase, (, ch, ), ;, whitespace, =]
[buffer, [, i, ], =, Character, ., toLowerCase, (, ch, ), ;, whitespace, =, false, ;, }, else, if, (]
[buffer, [, i, ], =, Character, ., toLowerCase, (, ch, ), ;, whitespace, =, false, ;, }, else, if, (]
[=, Character, ., toLowerCase, (, ch, ), ;, whitespace, =, false, ;, }, else, if, (, Character, ., isTitleCase, (]
[(, ch, ), ;, whitespace, =, false, ;, }, else, if, (, Character, ., isTitleCase, (, ch, ), ), {]
[(, ch, ), ;, whitespace, =, false, ;, }, else, if, (, Character, ., isTitleCase, (, ch, ), ), {]
[), ;, whitespace, =, false, ;, }, else, if, (, Character, ., isTitleCase, (, ch, ), ), {, buffer, []
[=, false, ;, }, else, if, (, Character, ., isTitleCase, (, ch, ), ), {, buffer, [, i, ], =]
[=, false, ;, }, else, if, (, Character, ., isTitleCase, (, ch, ), ), {, buffer, [, i, ], =]
[else, if, (, Character, ., isTitleCase, (, ch, ), ), {, buffer, [, i, ], =, Character, ., toLowerCase, (]
[Character, ., isTitleCase, (, ch, ), ), {, buffer, [, i, ], =, Character, ., toLowerCase, (, ch, ), ;]
[isTitleCase, (, ch, ), ), {, buffer, [, i, ], =, Character, ., toLowerCase, (, ch, ), ;, whitespace, =]
[buffer, [, i, ], =, Character, ., toLowerCase, (, ch, ), ;, whitespace, =, false, ;, }, else, if, (]
[buffer, [, i, ], =, Character, ., toLowerCase, (, ch, ), ;, whitespace, =, false, ;, }, else, if, (]
[=, Character, ., toLowerCase, (, ch, ), ;, whitespace, =, false, ;, }, else, if, (, Character, ., isLowerCase, (]
[), ;, whitespace, =, false, ;, }, else, if, (, Character, ., isLowerCase, (, ch, ), ), {, if, (]
[=, false, ;, }, else, if, (, Character, ., isLowerCase, (, ch, ), ), {, if, (, whitespace, ), {]
[=, false, ;, }, else, if, (, Character, ., isLowerCase, (, ch, ), ), {, if, (, whitespace, ), {]
[;, }, else, if, (, Character, ., isLowerCase, (, ch, ), ), {, if, (, whitespace, ), {, buffer, []
[if, (, Character, ., isLowerCase, (, ch, ), ), {, if, (, whitespace, ), {, buffer, [, i, ], =]
[if, (, Character, ., isLowerCase, (, ch, ), ), {, if, (, whitespace, ), {, buffer, [, i, ], =]
[isLowerCase, (, ch, ), ), {, if, (, whitespace, ), {, buffer, [, i, ], =, Character, ., toTitleCase, (]
[), ), {, if, (, whitespace, ), {, buffer, [, i, ], =, Character, ., toTitleCase, (, ch, ), ;]
[{, if, (, whitespace, ), {, buffer, [, i, ], =, Character, ., toTitleCase, (, ch, ), ;, whitespace, =]
[{, buffer, [, i, ], =, Character, ., toTitleCase, (, ch, ), ;, whitespace, =, false, ;, }, else, {]
[{, buffer, [, i, ], =, Character, ., toTitleCase, (, ch, ), ;, whitespace, =, false, ;, }, else, {]
[[, i, ], =, Character, ., toTitleCase, (, ch, ), ;, whitespace, =, false, ;, }, else, {, buffer, []
[=, Character, ., toTitleCase, (, ch, ), ;, whitespace, =, false, ;, }, else, {, buffer, [, i, ], =]
[=, Character, ., toTitleCase, (, ch, ), ;, whitespace, =, false, ;, }, else, {, buffer, [, i, ], =]
[(, ch, ), ;, whitespace, =, false, ;, }, else, {, buffer, [, i, ], =, Character, ., toUpperCase, (]
[;, }, else, {, buffer, [, i, ], =, Character, ., toUpperCase, (, ch, ), ;, }, }, else, {]
[else, {, buffer, [, i, ], =, Character, ., toUpperCase, (, ch, ), ;, }, }, else, {, whitespace, =]
[else, {, buffer, [, i, ], =, Character, ., toUpperCase, (, ch, ), ;, }, }, else, {, whitespace, =]
[i, ], =, Character, ., toUpperCase, (, ch, ), ;, }, }, else, {, whitespace, =, Character, ., isWhitespace, (]
[(, ch, ), ;, }, }, else, {, whitespace, =, Character, ., isWhitespace, (, ch, ), ;, }, }, return]
[;, }, }, else, {, whitespace, =, Character, ., isWhitespace, (, ch, ), ;, }, }, return, new, String, (]
[}, return, new, String, (, buffer, ), ;, }, public, static, String, initials, (, final, String, str, ), {, return]
[new, String, (, buffer, ), ;, }, public, static, String, initials, (, final, String, str, ), {, return, initials, (]
[(, buffer, ), ;, }, public, static, String, initials, (, final, String, str, ), {, return, initials, (, str, ,]
[), ;, }, public, static, String, initials, (, final, String, str, ,, final, char, ..., delimiters, ), {, if, (]
[), ;, }, public, static, String, initials, (, final, String, str, ,, final, char, ..., delimiters, ), {, if, (]
[static, String, initials, (, final, String, str, ,, final, char, ..., delimiters, ), {, if, (, StringUtils, ., isEmpty, (]
[String, str, ,, final, char, ..., delimiters, ), {, if, (, StringUtils, ., isEmpty, (, str, ), ), {, return]
[..., delimiters, ), {, if, (, StringUtils, ., isEmpty, (, str, ), ), {, return, str, ;, }, if, (]
[..., delimiters, ), {, if, (, StringUtils, ., isEmpty, (, str, ), ), {, return, str, ;, }, if, (]
[..., delimiters, ), {, if, (, StringUtils, ., isEmpty, (, str, ), ), {, return, str, ;, }, if, (]
[), {, if, (, StringUtils, ., isEmpty, (, str, ), ), {, return, str, ;, }, if, (, delimiters, !=]
[if, (, StringUtils, ., isEmpty, (, str, ), ), {, return, str, ;, }, if, (, delimiters, !=, null, &&]
[if, (, StringUtils, ., isEmpty, (, str, ), ), {, return, str, ;, }, if, (, delimiters, !=, null, &&]
[if, (, StringUtils, ., isEmpty, (, str, ), ), {, return, str, ;, }, if, (, delimiters, !=, null, &&]
[isEmpty, (, str, ), ), {, return, str, ;, }, if, (, delimiters, !=, null, &&, delimiters, ., length, ==]
[), {, return, str, ;, }, if, (, delimiters, !=, null, &&, delimiters, ., length, ==, 0, ), {, return]
[(, delimiters, !=, null, &&, delimiters, ., length, ==, 0, ), {, return, "", ;, }, final, int, strLen, =]
[(, delimiters, !=, null, &&, delimiters, ., length, ==, 0, ), {, return, "", ;, }, final, int, strLen, =]
[return, "", ;, }, final, int, strLen, =, str, ., length, (, ), ;, final, char, [, ], buf, =]
[}, final, int, strLen, =, str, ., length, (, ), ;, final, char, [, ], buf, =, new, char, []
[}, final, int, strLen, =, str, ., length, (, ), ;, final, char, [, ], buf, =, new, char, []
[}, final, int, strLen, =, str, ., length, (, ), ;, final, char, [, ], buf, =, new, char, []
[int, strLen, =, str, ., length, (, ), ;, final, char, [, ], buf, =, new, char, [, strLen, /]
[=, str, ., length, (, ), ;, final, char, [, ], buf, =, new, char, [, strLen, /, 2, +]
[;, final, char, [, ], buf, =, new, char, [, strLen, /, 2, +, 1, ], ;, int, count, =]
[buf, =, new, char, [, strLen, /, 2, +, 1, ], ;, int, count, =, 0, ;, boolean, lastWasGap, =]
[2, +, 1, ], ;, int, count, =, 0, ;, boolean, lastWasGap, =, true, ;, for, (, int, i, =]
[1, ], ;, int, count, =, 0, ;, boolean, lastWasGap, =, true, ;, for, (, int, i, =, 0, ;]
[1, ], ;, int, count, =, 0, ;, boolean, lastWasGap, =, true, ;, for, (, int, i, =, 0, ;]
[;, int, count, =, 0, ;, boolean, lastWasGap, =, true, ;, for, (, int, i, =, 0, ;, i, <]
[count, =, 0, ;, boolean, lastWasGap, =, true, ;, for, (, int, i, =, 0, ;, i, <, strLen, ;]
[count, =, 0, ;, boolean, lastWasGap, =, true, ;, for, (, int, i, =, 0, ;, i, <, strLen, ;]
[;, for, (, int, i, =, 0, ;, i, <, strLen, ;, i, ++, ), {, final, char, ch, =]
[;, for, (, int, i, =, 0, ;, i, <, strLen, ;, i, ++, ), {, final, char, ch, =]
[i, =, 0, ;, i, <, strLen, ;, i, ++, ), {, final, char, ch, =, str, ., charAt, (]
[<, strLen, ;, i, ++, ), {, final, char, ch, =, str, ., charAt, (, i, ), ;, if, (]
[;, i, ++, ), {, final, char, ch, =, str, ., charAt, (, i, ), ;, if, (, isDelimiter, (]
[++, ), {, final, char, ch, =, str, ., charAt, (, i, ), ;, if, (, isDelimiter, (, ch, ,]
[char, ch, =, str, ., charAt, (, i, ), ;, if, (, isDelimiter, (, ch, ,, delimiters, ), ), {]
[=, str, ., charAt, (, i, ), ;, if, (, isDelimiter, (, ch, ,, delimiters, ), ), {, lastWasGap, =]
[), ;, if, (, isDelimiter, (, ch, ,, delimiters, ), ), {, lastWasGap, =, true, ;, }, else, if, (]
[(, isDelimiter, (, ch, ,, delimiters, ), ), {, lastWasGap, =, true, ;, }, else, if, (, lastWasGap, ), {]
[(, isDelimiter, (, ch, ,, delimiters, ), ), {, lastWasGap, =, true, ;, }, else, if, (, lastWasGap, ), {]
[(, ch, ,, delimiters, ), ), {, lastWasGap, =, true, ;, }, else, if, (, lastWasGap, ), {, buf, []
[(, ch, ,, delimiters, ), ), {, lastWasGap, =, true, ;, }, else, if, (, lastWasGap, ), {, buf, []
[), ), {, lastWasGap, =, true, ;, }, else, if, (, lastWasGap, ), {, buf, [, count, ++, ], =]
[{, lastWasGap, =, true, ;, }, else, if, (, lastWasGap, ), {, buf, [, count, ++, ], =, ch, ;]
[=, true, ;, }, else, if, (, lastWasGap, ), {, buf, [, count, ++, ], =, ch, ;, lastWasGap, =]
[buf, [, count, ++, ], =, ch, ;, lastWasGap, =, false, ;, }, else, {, continue, ;, }, }, return]
[++, ], =, ch, ;, lastWasGap, =, false, ;, }, else, {, continue, ;, }, }, return, new, String, (]
[=, ch, ;, lastWasGap, =, false, ;, }, else, {, continue, ;, }, }, return, new, String, (, buf, ,]
[;, lastWasGap, =, false, ;, }, else, {, continue, ;, }, }, return, new, String, (, buf, ,, 0, ,]
[;, }, private, static, boolean, isDelimiter, (, final, char, ch, ,, final, char, [, ], delimiters, ), {, if, (]
[;, }, private, static, boolean, isDelimiter, (, final, char, ch, ,, final, char, [, ], delimiters, ), {, if, (]
[private, static, boolean, isDelimiter, (, final, char, ch, ,, final, char, [, ], delimiters, ), {, if, (, delimiters, ==]
[(, final, char, ch, ,, final, char, [, ], delimiters, ), {, if, (, delimiters, ==, null, ), {, return]
[(, final, char, ch, ,, final, char, [, ], delimiters, ), {, if, (, delimiters, ==, null, ), {, return]
[,, final, char, [, ], delimiters, ), {, if, (, delimiters, ==, null, ), {, return, Character, ., isWhitespace, (]
[delimiters, ==, null, ), {, return, Character, ., isWhitespace, (, ch, ), ;, }, for, (, final, char, delimiter, :]
[return, Character, ., isWhitespace, (, ch, ), ;, }, for, (, final, char, delimiter, :, delimiters, ), {, if, (]
[return, Character, ., isWhitespace, (, ch, ), ;, }, for, (, final, char, delimiter, :, delimiters, ), {, if, (]
[., isWhitespace, (, ch, ), ;, }, for, (, final, char, delimiter, :, delimiters, ), {, if, (, ch, ==]
[), ;, }, for, (, final, char, delimiter, :, delimiters, ), {, if, (, ch, ==, delimiter, ), {, return]
[final, char, delimiter, :, delimiters, ), {, if, (, ch, ==, delimiter, ), {, return, true, ;, }, }, return]
