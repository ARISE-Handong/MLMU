[., util, ., TreeSet, ;, final, class, ExternExportsPass, extends, NodeTraversal, ., AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE, =]
[., util, ., TreeSet, ;, final, class, ExternExportsPass, extends, NodeTraversal, ., AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE, =]
[;, final, class, ExternExportsPass, extends, NodeTraversal, ., AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE, =, DiagnosticType, ., warning, (]
[class, ExternExportsPass, extends, NodeTraversal, ., AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE, =, DiagnosticType, ., warning, (, "JSC_EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE", ,]
[{, static, final, DiagnosticType, EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE, =, DiagnosticType, ., warning, (, "JSC_EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE", ,, "Unable to determine type of parameter {0} for exported function {1}", ), ;, static, final, DiagnosticType, EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE, =]
[{, static, final, DiagnosticType, EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE, =, DiagnosticType, ., warning, (, "JSC_EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE", ,, "Unable to determine type of parameter {0} for exported function {1}", ), ;, static, final, DiagnosticType, EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE, =]
[EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE, =, DiagnosticType, ., warning, (, "JSC_EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE", ,, "Unable to determine type of parameter {0} for exported function {1}", ), ;, static, final, DiagnosticType, EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE", ,, "Unable to determine type of parameter {0} for exported function {1}", ), ;, static, final, DiagnosticType, EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE, =, DiagnosticType, ., warning, (, "JSC_EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE", ,]
[{, protected, final, String, symbolName, ;, protected, final, Node, value, ;, Export, (, String, symbolName, ,, Node, value, ), {]
[{, protected, final, String, symbolName, ;, protected, final, Node, value, ;, Export, (, String, symbolName, ,, Node, value, ), {]
[symbolName, ;, protected, final, Node, value, ;, Export, (, String, symbolName, ,, Node, value, ), {, this, ., symbolName, =]
[protected, final, Node, value, ;, Export, (, String, symbolName, ,, Node, value, ), {, this, ., symbolName, =, symbolName, ;]
[protected, final, Node, value, ;, Export, (, String, symbolName, ,, Node, value, ), {, this, ., symbolName, =, symbolName, ;]
[;, Export, (, String, symbolName, ,, Node, value, ), {, this, ., symbolName, =, symbolName, ;, this, ., value, =]
[), {, this, ., symbolName, =, symbolName, ;, this, ., value, =, value, ;, }, void, generateExterns, (, ), {]
[this, ., symbolName, =, symbolName, ;, this, ., value, =, value, ;, }, void, generateExterns, (, ), {, appendExtern, (]
[symbolName, ;, this, ., value, =, value, ;, }, void, generateExterns, (, ), {, appendExtern, (, getExportedPath, (, ), ,]
[this, ., value, =, value, ;, }, void, generateExterns, (, ), {, appendExtern, (, getExportedPath, (, ), ,, getValue, (]
[getExportedPath, (, ), ;, void, appendExtern, (, String, path, ,, Node, valueToExport, ), {, List, <, String, >, pathPrefixes, =]
[), ;, void, appendExtern, (, String, path, ,, Node, valueToExport, ), {, List, <, String, >, pathPrefixes, =, computePathPrefixes, (]
[Node, valueToExport, ), {, List, <, String, >, pathPrefixes, =, computePathPrefixes, (, path, ), ;, for, (, int, i, =]
[), {, List, <, String, >, pathPrefixes, =, computePathPrefixes, (, path, ), ;, for, (, int, i, =, 0, ;]
[), {, List, <, String, >, pathPrefixes, =, computePathPrefixes, (, path, ), ;, for, (, int, i, =, 0, ;]
[List, <, String, >, pathPrefixes, =, computePathPrefixes, (, path, ), ;, for, (, int, i, =, 0, ;, i, <]
[List, <, String, >, pathPrefixes, =, computePathPrefixes, (, path, ), ;, for, (, int, i, =, 0, ;, i, <]
[computePathPrefixes, (, path, ), ;, for, (, int, i, =, 0, ;, i, <, pathPrefixes, ., size, (, ), ;]
[(, path, ), ;, for, (, int, i, =, 0, ;, i, <, pathPrefixes, ., size, (, ), ;, ++]
[int, i, =, 0, ;, i, <, pathPrefixes, ., size, (, ), ;, ++, i, ), {, String, pathPrefix, =]
[int, i, =, 0, ;, i, <, pathPrefixes, ., size, (, ), ;, ++, i, ), {, String, pathPrefix, =]
[;, i, <, pathPrefixes, ., size, (, ), ;, ++, i, ), {, String, pathPrefix, =, pathPrefixes, ., get, (]
[(, ), ;, ++, i, ), {, String, pathPrefix, =, pathPrefixes, ., get, (, i, ), ;, boolean, isCompletePathPrefix, =]
[), ;, ++, i, ), {, String, pathPrefix, =, pathPrefixes, ., get, (, i, ), ;, boolean, isCompletePathPrefix, =, (]
[), ;, ++, i, ), {, String, pathPrefix, =, pathPrefixes, ., get, (, i, ), ;, boolean, isCompletePathPrefix, =, (]
[++, i, ), {, String, pathPrefix, =, pathPrefixes, ., get, (, i, ), ;, boolean, isCompletePathPrefix, =, (, i, ==]
[++, i, ), {, String, pathPrefix, =, pathPrefixes, ., get, (, i, ), ;, boolean, isCompletePathPrefix, =, (, i, ==]
[++, i, ), {, String, pathPrefix, =, pathPrefixes, ., get, (, i, ), ;, boolean, isCompletePathPrefix, =, (, i, ==]
[=, pathPrefixes, ., get, (, i, ), ;, boolean, isCompletePathPrefix, =, (, i, ==, pathPrefixes, ., size, (, ), -]
[), ;, boolean, isCompletePathPrefix, =, (, i, ==, pathPrefixes, ., size, (, ), -, 1, ), ;, boolean, skipPathPrefix, =]
[), ;, boolean, isCompletePathPrefix, =, (, i, ==, pathPrefixes, ., size, (, ), -, 1, ), ;, boolean, skipPathPrefix, =]
[), ;, boolean, isCompletePathPrefix, =, (, i, ==, pathPrefixes, ., size, (, ), -, 1, ), ;, boolean, skipPathPrefix, =]
[=, (, i, ==, pathPrefixes, ., size, (, ), -, 1, ), ;, boolean, skipPathPrefix, =, pathPrefix, ., endsWith, (]
[==, pathPrefixes, ., size, (, ), -, 1, ), ;, boolean, skipPathPrefix, =, pathPrefix, ., endsWith, (, ".prototype", ), ||]
[pathPrefixes, ., size, (, ), -, 1, ), ;, boolean, skipPathPrefix, =, pathPrefix, ., endsWith, (, ".prototype", ), ||, (]
[pathPrefixes, ., size, (, ), -, 1, ), ;, boolean, skipPathPrefix, =, pathPrefix, ., endsWith, (, ".prototype", ), ||, (]
[pathPrefixes, ., size, (, ), -, 1, ), ;, boolean, skipPathPrefix, =, pathPrefix, ., endsWith, (, ".prototype", ), ||, (]
[), -, 1, ), ;, boolean, skipPathPrefix, =, pathPrefix, ., endsWith, (, ".prototype", ), ||, (, alreadyExportedPaths, ., contains, (]
[), ;, boolean, skipPathPrefix, =, pathPrefix, ., endsWith, (, ".prototype", ), ||, (, alreadyExportedPaths, ., contains, (, pathPrefix, ), &&]
[;, boolean, skipPathPrefix, =, pathPrefix, ., endsWith, (, ".prototype", ), ||, (, alreadyExportedPaths, ., contains, (, pathPrefix, ), &&, !]
[., endsWith, (, ".prototype", ), ||, (, alreadyExportedPaths, ., contains, (, pathPrefix, ), &&, !, isCompletePathPrefix, ), ;, if, (]
[endsWith, (, ".prototype", ), ||, (, alreadyExportedPaths, ., contains, (, pathPrefix, ), &&, !, isCompletePathPrefix, ), ;, if, (, !]
[contains, (, pathPrefix, ), &&, !, isCompletePathPrefix, ), ;, if, (, !, skipPathPrefix, ), {, Node, initializer, ;, if, (]
[contains, (, pathPrefix, ), &&, !, isCompletePathPrefix, ), ;, if, (, !, skipPathPrefix, ), {, Node, initializer, ;, if, (]
[pathPrefix, ), &&, !, isCompletePathPrefix, ), ;, if, (, !, skipPathPrefix, ), {, Node, initializer, ;, if, (, isCompletePathPrefix, &&]
[pathPrefix, ), &&, !, isCompletePathPrefix, ), ;, if, (, !, skipPathPrefix, ), {, Node, initializer, ;, if, (, isCompletePathPrefix, &&]
[&&, !, isCompletePathPrefix, ), ;, if, (, !, skipPathPrefix, ), {, Node, initializer, ;, if, (, isCompletePathPrefix, &&, valueToExport, !=]
[if, (, !, skipPathPrefix, ), {, Node, initializer, ;, if, (, isCompletePathPrefix, &&, valueToExport, !=, null, ), {, if, (]
[if, (, !, skipPathPrefix, ), {, Node, initializer, ;, if, (, isCompletePathPrefix, &&, valueToExport, !=, null, ), {, if, (]
[initializer, ;, if, (, isCompletePathPrefix, &&, valueToExport, !=, null, ), {, if, (, valueToExport, ., isFunction, (, ), ), {]
[if, (, isCompletePathPrefix, &&, valueToExport, !=, null, ), {, if, (, valueToExport, ., isFunction, (, ), ), {, initializer, =]
[isCompletePathPrefix, &&, valueToExport, !=, null, ), {, if, (, valueToExport, ., isFunction, (, ), ), {, initializer, =, createExternFunction, (]
[{, if, (, valueToExport, ., isFunction, (, ), ), {, initializer, =, createExternFunction, (, valueToExport, ), ;, }, else, {]
[{, if, (, valueToExport, ., isFunction, (, ), ), {, initializer, =, createExternFunction, (, valueToExport, ), ;, }, else, {]
[., isFunction, (, ), ), {, initializer, =, createExternFunction, (, valueToExport, ), ;, }, else, {, Preconditions, ., checkState, (]
[., isFunction, (, ), ), {, initializer, =, createExternFunction, (, valueToExport, ), ;, }, else, {, Preconditions, ., checkState, (]
[=, createExternFunction, (, valueToExport, ), ;, }, else, {, Preconditions, ., checkState, (, valueToExport, ., isObjectLit, (, ), ), ;]
[(, valueToExport, ), ;, }, else, {, Preconditions, ., checkState, (, valueToExport, ., isObjectLit, (, ), ), ;, initializer, =]
[), ;, }, else, {, Preconditions, ., checkState, (, valueToExport, ., isObjectLit, (, ), ), ;, initializer, =, createExternObjectLit, (]
[checkState, (, valueToExport, ., isObjectLit, (, ), ), ;, initializer, =, createExternObjectLit, (, valueToExport, ), ;, }, }, else, {]
[valueToExport, ., isObjectLit, (, ), ), ;, initializer, =, createExternObjectLit, (, valueToExport, ), ;, }, }, else, {, initializer, =]
[valueToExport, ., isObjectLit, (, ), ), ;, initializer, =, createExternObjectLit, (, valueToExport, ), ;, }, }, else, {, initializer, =]
[initializer, =, createExternObjectLit, (, valueToExport, ), ;, }, }, else, {, initializer, =, IR, ., empty, (, ), ;, }]
[createExternObjectLit, (, valueToExport, ), ;, }, }, else, {, initializer, =, IR, ., empty, (, ), ;, }, appendPathDefinition, (]
[valueToExport, ), ;, }, }, else, {, initializer, =, IR, ., empty, (, ), ;, }, appendPathDefinition, (, pathPrefix, ,]
[}, }, }, private, List, <, String, >, computePathPrefixes, (, String, path, ), {, List, <, String, >, pieces, =]
[}, }, }, private, List, <, String, >, computePathPrefixes, (, String, path, ), {, List, <, String, >, pieces, =]
[List, <, String, >, computePathPrefixes, (, String, path, ), {, List, <, String, >, pieces, =, Lists, ., newArrayList, (]
[List, <, String, >, computePathPrefixes, (, String, path, ), {, List, <, String, >, pieces, =, Lists, ., newArrayList, (]
[computePathPrefixes, (, String, path, ), {, List, <, String, >, pieces, =, Lists, ., newArrayList, (, path, ., split, (]
[pieces, =, Lists, ., newArrayList, (, path, ., split, (, "\\.", ), ), ;, List, <, String, >, pathPrefixes, =]
[pieces, =, Lists, ., newArrayList, (, path, ., split, (, "\\.", ), ), ;, List, <, String, >, pathPrefixes, =]
[), ), ;, List, <, String, >, pathPrefixes, =, Lists, ., newArrayList, (, ), ;, for, (, int, i, =]
[;, List, <, String, >, pathPrefixes, =, Lists, ., newArrayList, (, ), ;, for, (, int, i, =, 0, ;]
[;, List, <, String, >, pathPrefixes, =, Lists, ., newArrayList, (, ), ;, for, (, int, i, =, 0, ;]
[<, String, >, pathPrefixes, =, Lists, ., newArrayList, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[<, String, >, pathPrefixes, =, Lists, ., newArrayList, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[., newArrayList, (, ), ;, for, (, int, i, =, 0, ;, i, <, pieces, ., size, (, ), ;]
[., newArrayList, (, ), ;, for, (, int, i, =, 0, ;, i, <, pieces, ., size, (, ), ;]
[;, for, (, int, i, =, 0, ;, i, <, pieces, ., size, (, ), ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, pieces, ., size, (, ), ;, i, ++, ), {]
[i, =, 0, ;, i, <, pieces, ., size, (, ), ;, i, ++, ), {, pathPrefixes, ., add, (]
[i, =, 0, ;, i, <, pieces, ., size, (, ), ;, i, ++, ), {, pathPrefixes, ., add, (]
[i, =, 0, ;, i, <, pieces, ., size, (, ), ;, i, ++, ), {, pathPrefixes, ., add, (]
[i, <, pieces, ., size, (, ), ;, i, ++, ), {, pathPrefixes, ., add, (, Joiner, ., on, (]
[(, ), ;, i, ++, ), {, pathPrefixes, ., add, (, Joiner, ., on, (, ".", ), ., join, (]
[(, ), ;, i, ++, ), {, pathPrefixes, ., add, (, Joiner, ., on, (, ".", ), ., join, (]
[++, ), {, pathPrefixes, ., add, (, Joiner, ., on, (, ".", ), ., join, (, Iterables, ., limit, (]
[{, pathPrefixes, ., add, (, Joiner, ., on, (, ".", ), ., join, (, Iterables, ., limit, (, pieces, ,]
[{, pathPrefixes, ., add, (, Joiner, ., on, (, ".", ), ., join, (, Iterables, ., limit, (, pieces, ,]
[., add, (, Joiner, ., on, (, ".", ), ., join, (, Iterables, ., limit, (, pieces, ,, i, +]
[".", ), ., join, (, Iterables, ., limit, (, pieces, ,, i, +, 1, ), ), ), ;, }, return]
[return, pathPrefixes, ;, }, private, void, appendPathDefinition, (, String, path, ,, Node, initializer, ), {, Node, pathDefinition, ;, if, (]
[pathPrefixes, ;, }, private, void, appendPathDefinition, (, String, path, ,, Node, initializer, ), {, Node, pathDefinition, ;, if, (, !]
[pathPrefixes, ;, }, private, void, appendPathDefinition, (, String, path, ,, Node, initializer, ), {, Node, pathDefinition, ;, if, (, !]
[void, appendPathDefinition, (, String, path, ,, Node, initializer, ), {, Node, pathDefinition, ;, if, (, !, path, ., contains, (]
[Node, initializer, ), {, Node, pathDefinition, ;, if, (, !, path, ., contains, (, ".", ), ), {, if, (]
[Node, initializer, ), {, Node, pathDefinition, ;, if, (, !, path, ., contains, (, ".", ), ), {, if, (]
[if, (, !, path, ., contains, (, ".", ), ), {, if, (, initializer, ., isEmpty, (, ), ), {]
[!, path, ., contains, (, ".", ), ), {, if, (, initializer, ., isEmpty, (, ), ), {, pathDefinition, =]
[!, path, ., contains, (, ".", ), ), {, if, (, initializer, ., isEmpty, (, ), ), {, pathDefinition, =]
[(, ".", ), ), {, if, (, initializer, ., isEmpty, (, ), ), {, pathDefinition, =, IR, ., var, (]
[(, ".", ), ), {, if, (, initializer, ., isEmpty, (, ), ), {, pathDefinition, =, IR, ., var, (]
[{, if, (, initializer, ., isEmpty, (, ), ), {, pathDefinition, =, IR, ., var, (, IR, ., name, (]
[), ), {, pathDefinition, =, IR, ., var, (, IR, ., name, (, path, ), ), ;, }, else, {]
[{, pathDefinition, =, IR, ., var, (, IR, ., name, (, path, ), ), ;, }, else, {, pathDefinition, =]
[{, pathDefinition, =, IR, ., var, (, IR, ., name, (, path, ), ), ;, }, else, {, pathDefinition, =]
[., var, (, IR, ., name, (, path, ), ), ;, }, else, {, pathDefinition, =, NodeUtil, ., newVarNode, (]
[(, IR, ., name, (, path, ), ), ;, }, else, {, pathDefinition, =, NodeUtil, ., newVarNode, (, path, ,]
[else, {, pathDefinition, =, NodeUtil, ., newVarNode, (, path, ,, initializer, ), ;, }, }, else, {, Node, qualifiedPath, =]
[else, {, pathDefinition, =, NodeUtil, ., newVarNode, (, path, ,, initializer, ), ;, }, }, else, {, Node, qualifiedPath, =]
[NodeUtil, ., newVarNode, (, path, ,, initializer, ), ;, }, }, else, {, Node, qualifiedPath, =, NodeUtil, ., newQualifiedNameNode, (]
[NodeUtil, ., newVarNode, (, path, ,, initializer, ), ;, }, }, else, {, Node, qualifiedPath, =, NodeUtil, ., newQualifiedNameNode, (]
[initializer, ), ;, }, }, else, {, Node, qualifiedPath, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[else, {, Node, qualifiedPath, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, path, ), ;, if, (]
[else, {, Node, qualifiedPath, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, path, ), ;, if, (]
[newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, path, ), ;, if, (, initializer, ., isEmpty, (, ), ), {]
[compiler, ., getCodingConvention, (, ), ,, path, ), ;, if, (, initializer, ., isEmpty, (, ), ), {, pathDefinition, =]
[compiler, ., getCodingConvention, (, ), ,, path, ), ;, if, (, initializer, ., isEmpty, (, ), ), {, pathDefinition, =]
[), ,, path, ), ;, if, (, initializer, ., isEmpty, (, ), ), {, pathDefinition, =, NodeUtil, ., newExpr, (]
[(, initializer, ., isEmpty, (, ), ), {, pathDefinition, =, NodeUtil, ., newExpr, (, qualifiedPath, ), ;, }, else, {]
[., isEmpty, (, ), ), {, pathDefinition, =, NodeUtil, ., newExpr, (, qualifiedPath, ), ;, }, else, {, pathDefinition, =]
[., isEmpty, (, ), ), {, pathDefinition, =, NodeUtil, ., newExpr, (, qualifiedPath, ), ;, }, else, {, pathDefinition, =]
[), {, pathDefinition, =, NodeUtil, ., newExpr, (, qualifiedPath, ), ;, }, else, {, pathDefinition, =, NodeUtil, ., newExpr, (]
[), {, pathDefinition, =, NodeUtil, ., newExpr, (, qualifiedPath, ), ;, }, else, {, pathDefinition, =, NodeUtil, ., newExpr, (]
[NodeUtil, ., newExpr, (, qualifiedPath, ), ;, }, else, {, pathDefinition, =, NodeUtil, ., newExpr, (, IR, ., assign, (]
[newExpr, (, qualifiedPath, ), ;, }, else, {, pathDefinition, =, NodeUtil, ., newExpr, (, IR, ., assign, (, qualifiedPath, ,]
[else, {, pathDefinition, =, NodeUtil, ., newExpr, (, IR, ., assign, (, qualifiedPath, ,, initializer, ), ), ;, }, }]
[else, {, pathDefinition, =, NodeUtil, ., newExpr, (, IR, ., assign, (, qualifiedPath, ,, initializer, ), ), ;, }, }]
[NodeUtil, ., newExpr, (, IR, ., assign, (, qualifiedPath, ,, initializer, ), ), ;, }, }, externsRoot, ., addChildToBack, (]
[(, IR, ., assign, (, qualifiedPath, ,, initializer, ), ), ;, }, }, externsRoot, ., addChildToBack, (, pathDefinition, ), ;]
[(, IR, ., assign, (, qualifiedPath, ,, initializer, ), ), ;, }, }, externsRoot, ., addChildToBack, (, pathDefinition, ), ;]
[(, qualifiedPath, ,, initializer, ), ), ;, }, }, externsRoot, ., addChildToBack, (, pathDefinition, ), ;, alreadyExportedPaths, ., add, (]
[;, alreadyExportedPaths, ., add, (, path, ), ;, }, private, Node, createExternFunction, (, Node, exportedFunction, ), {, Node, paramList, =]
[;, alreadyExportedPaths, ., add, (, path, ), ;, }, private, Node, createExternFunction, (, Node, exportedFunction, ), {, Node, paramList, =]
[;, alreadyExportedPaths, ., add, (, path, ), ;, }, private, Node, createExternFunction, (, Node, exportedFunction, ), {, Node, paramList, =]
[(, path, ), ;, }, private, Node, createExternFunction, (, Node, exportedFunction, ), {, Node, paramList, =, NodeUtil, ., getFunctionParameters, (]
[exportedFunction, ), {, Node, paramList, =, NodeUtil, ., getFunctionParameters, (, exportedFunction, ), ., cloneTree, (, ), ;, Node, externFunction, =]
[exportedFunction, ), {, Node, paramList, =, NodeUtil, ., getFunctionParameters, (, exportedFunction, ), ., cloneTree, (, ), ;, Node, externFunction, =]
[paramList, =, NodeUtil, ., getFunctionParameters, (, exportedFunction, ), ., cloneTree, (, ), ;, Node, externFunction, =, IR, ., function, (]
[paramList, =, NodeUtil, ., getFunctionParameters, (, exportedFunction, ), ., cloneTree, (, ), ;, Node, externFunction, =, IR, ., function, (]
[getFunctionParameters, (, exportedFunction, ), ., cloneTree, (, ), ;, Node, externFunction, =, IR, ., function, (, IR, ., name, (]
[), ., cloneTree, (, ), ;, Node, externFunction, =, IR, ., function, (, IR, ., name, (, "", ), ,]
[cloneTree, (, ), ;, Node, externFunction, =, IR, ., function, (, IR, ., name, (, "", ), ,, paramList, ,]
[cloneTree, (, ), ;, Node, externFunction, =, IR, ., function, (, IR, ., name, (, "", ), ,, paramList, ,]
[IR, ., function, (, IR, ., name, (, "", ), ,, paramList, ,, IR, ., block, (, ), ), ;]
[function, (, IR, ., name, (, "", ), ,, paramList, ,, IR, ., block, (, ), ), ;, checkForFunctionsWithUnknownTypes, (]
[., name, (, "", ), ,, paramList, ,, IR, ., block, (, ), ), ;, checkForFunctionsWithUnknownTypes, (, exportedFunction, ), ;]
[., name, (, "", ), ,, paramList, ,, IR, ., block, (, ), ), ;, checkForFunctionsWithUnknownTypes, (, exportedFunction, ), ;]
[), ,, paramList, ,, IR, ., block, (, ), ), ;, checkForFunctionsWithUnknownTypes, (, exportedFunction, ), ;, externFunction, ., setJSType, (]
[), ,, paramList, ,, IR, ., block, (, ), ), ;, checkForFunctionsWithUnknownTypes, (, exportedFunction, ), ;, externFunction, ., setJSType, (]
[), ), ;, checkForFunctionsWithUnknownTypes, (, exportedFunction, ), ;, externFunction, ., setJSType, (, exportedFunction, ., getJSType, (, ), ), ;, return]
[getJSType, (, ), ), ;, return, externFunction, ;, }, private, Node, createExternObjectLit, (, Node, exportedObjectLit, ), {, Node, lit, =]
[getJSType, (, ), ), ;, return, externFunction, ;, }, private, Node, createExternObjectLit, (, Node, exportedObjectLit, ), {, Node, lit, =]
[externFunction, ;, }, private, Node, createExternObjectLit, (, Node, exportedObjectLit, ), {, Node, lit, =, IR, ., objectlit, (, ), ;]
[externFunction, ;, }, private, Node, createExternObjectLit, (, Node, exportedObjectLit, ), {, Node, lit, =, IR, ., objectlit, (, ), ;]
[Node, createExternObjectLit, (, Node, exportedObjectLit, ), {, Node, lit, =, IR, ., objectlit, (, ), ;, lit, ., setJSType, (]
[Node, createExternObjectLit, (, Node, exportedObjectLit, ), {, Node, lit, =, IR, ., objectlit, (, ), ;, lit, ., setJSType, (]
[Node, lit, =, IR, ., objectlit, (, ), ;, lit, ., setJSType, (, exportedObjectLit, ., getJSType, (, ), ), ;]
[Node, lit, =, IR, ., objectlit, (, ), ;, lit, ., setJSType, (, exportedObjectLit, ., getJSType, (, ), ), ;]
[., objectlit, (, ), ;, lit, ., setJSType, (, exportedObjectLit, ., getJSType, (, ), ), ;, lit, ., setJSDocInfo, (]
[exportedObjectLit, ., getJSType, (, ), ), ;, lit, ., setJSDocInfo, (, new, JSDocInfo, (, ), ), ;, int, index, =]
[lit, ., setJSDocInfo, (, new, JSDocInfo, (, ), ), ;, int, index, =, 1, ;, for, (, Node, child, =]
[lit, ., setJSDocInfo, (, new, JSDocInfo, (, ), ), ;, int, index, =, 1, ;, for, (, Node, child, =]
[(, ), ), ;, int, index, =, 1, ;, for, (, Node, child, =, exportedObjectLit, ., getFirstChild, (, ), ;]
[(, ), ), ;, int, index, =, 1, ;, for, (, Node, child, =, exportedObjectLit, ., getFirstChild, (, ), ;]
[), ;, int, index, =, 1, ;, for, (, Node, child, =, exportedObjectLit, ., getFirstChild, (, ), ;, child, !=]
[int, index, =, 1, ;, for, (, Node, child, =, exportedObjectLit, ., getFirstChild, (, ), ;, child, !=, null, ;]
[=, 1, ;, for, (, Node, child, =, exportedObjectLit, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[=, 1, ;, for, (, Node, child, =, exportedObjectLit, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[null, ;, child, =, child, ., getNext, (, ), ), {, if, (, child, ., isStringKey, (, ), ), {]
[null, ;, child, =, child, ., getNext, (, ), ), {, if, (, child, ., isStringKey, (, ), ), {]
[child, ., getNext, (, ), ), {, if, (, child, ., isStringKey, (, ), ), {, lit, ., addChildToBack, (]
[child, ., getNext, (, ), ), {, if, (, child, ., isStringKey, (, ), ), {, lit, ., addChildToBack, (]
[), ), {, if, (, child, ., isStringKey, (, ), ), {, lit, ., addChildToBack, (, IR, ., propdef, (]
[), ), {, if, (, child, ., isStringKey, (, ), ), {, lit, ., addChildToBack, (, IR, ., propdef, (]
[(, child, ., isStringKey, (, ), ), {, lit, ., addChildToBack, (, IR, ., propdef, (, IR, ., stringKey, (]
[(, child, ., isStringKey, (, ), ), {, lit, ., addChildToBack, (, IR, ., propdef, (, IR, ., stringKey, (]
[{, lit, ., addChildToBack, (, IR, ., propdef, (, IR, ., stringKey, (, child, ., getString, (, ), ), ,]
[{, lit, ., addChildToBack, (, IR, ., propdef, (, IR, ., stringKey, (, child, ., getString, (, ), ), ,]
[(, IR, ., propdef, (, IR, ., stringKey, (, child, ., getString, (, ), ), ,, IR, ., number, (]
[(, IR, ., propdef, (, IR, ., stringKey, (, child, ., getString, (, ), ), ,, IR, ., number, (]
[child, ., getString, (, ), ), ,, IR, ., number, (, index, ++, ), ), ), ;, }, }, return]
[index, ++, ), ), ), ;, }, }, return, lit, ;, }, private, void, checkForFunctionsWithUnknownTypes, (, Node, function, ), {]
[index, ++, ), ), ), ;, }, }, return, lit, ;, }, private, void, checkForFunctionsWithUnknownTypes, (, Node, function, ), {]
[), ;, }, }, return, lit, ;, }, private, void, checkForFunctionsWithUnknownTypes, (, Node, function, ), {, Preconditions, ., checkArgument, (]
[), ;, }, }, return, lit, ;, }, private, void, checkForFunctionsWithUnknownTypes, (, Node, function, ), {, Preconditions, ., checkArgument, (]
[checkForFunctionsWithUnknownTypes, (, Node, function, ), {, Preconditions, ., checkArgument, (, function, ., isFunction, (, ), ), ;, FunctionType, functionType, =]
[checkForFunctionsWithUnknownTypes, (, Node, function, ), {, Preconditions, ., checkArgument, (, function, ., isFunction, (, ), ), ;, FunctionType, functionType, =]
[), {, Preconditions, ., checkArgument, (, function, ., isFunction, (, ), ), ;, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (]
[), {, Preconditions, ., checkArgument, (, function, ., isFunction, (, ), ), ;, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (]
[(, ), ), ;, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, function, ., getJSType, (, ), ), ;, if, (]
[(, ), ), ;, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, function, ., getJSType, (, ), ), ;, if, (]
[), ;, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, function, ., getJSType, (, ), ), ;, if, (, functionType, ==]
[function, ., getJSType, (, ), ), ;, if, (, functionType, ==, null, ), {, return, ;, }, JSDocInfo, functionJSDocInfo, =]
[function, ., getJSType, (, ), ), ;, if, (, functionType, ==, null, ), {, return, ;, }, JSDocInfo, functionJSDocInfo, =]
[functionType, ==, null, ), {, return, ;, }, JSDocInfo, functionJSDocInfo, =, functionType, ., getJSDocInfo, (, ), ;, JSType, returnType, =]
[functionType, ==, null, ), {, return, ;, }, JSDocInfo, functionJSDocInfo, =, functionType, ., getJSDocInfo, (, ), ;, JSType, returnType, =]
[JSDocInfo, functionJSDocInfo, =, functionType, ., getJSDocInfo, (, ), ;, JSType, returnType, =, functionType, ., getReturnType, (, ), ;, if, (]
[JSDocInfo, functionJSDocInfo, =, functionType, ., getJSDocInfo, (, ), ;, JSType, returnType, =, functionType, ., getReturnType, (, ), ;, if, (]
[functionJSDocInfo, =, functionType, ., getJSDocInfo, (, ), ;, JSType, returnType, =, functionType, ., getReturnType, (, ), ;, if, (, !]
[functionJSDocInfo, =, functionType, ., getJSDocInfo, (, ), ;, JSType, returnType, =, functionType, ., getReturnType, (, ), ;, if, (, !]
[), ;, JSType, returnType, =, functionType, ., getReturnType, (, ), ;, if, (, !, functionType, ., isConstructor, (, ), &&]
[;, JSType, returnType, =, functionType, ., getReturnType, (, ), ;, if, (, !, functionType, ., isConstructor, (, ), &&, (]
[;, JSType, returnType, =, functionType, ., getReturnType, (, ), ;, if, (, !, functionType, ., isConstructor, (, ), &&, (]
[;, JSType, returnType, =, functionType, ., getReturnType, (, ), ;, if, (, !, functionType, ., isConstructor, (, ), &&, (]
[returnType, =, functionType, ., getReturnType, (, ), ;, if, (, !, functionType, ., isConstructor, (, ), &&, (, returnType, ==]
[functionType, ., getReturnType, (, ), ;, if, (, !, functionType, ., isConstructor, (, ), &&, (, returnType, ==, null, ||]
[functionType, ., getReturnType, (, ), ;, if, (, !, functionType, ., isConstructor, (, ), &&, (, returnType, ==, null, ||]
[!, functionType, ., isConstructor, (, ), &&, (, returnType, ==, null, ||, returnType, ., isUnknownType, (, ), ), ), {]
[., isConstructor, (, ), &&, (, returnType, ==, null, ||, returnType, ., isUnknownType, (, ), ), ), {, reportUnknownReturnType, (]
[==, null, ||, returnType, ., isUnknownType, (, ), ), ), {, reportUnknownReturnType, (, function, ), ;, }, Node, astParameterIterator, =]
[==, null, ||, returnType, ., isUnknownType, (, ), ), ), {, reportUnknownReturnType, (, function, ), ;, }, Node, astParameterIterator, =]
[==, null, ||, returnType, ., isUnknownType, (, ), ), ), {, reportUnknownReturnType, (, function, ), ;, }, Node, astParameterIterator, =]
[., isUnknownType, (, ), ), ), {, reportUnknownReturnType, (, function, ), ;, }, Node, astParameterIterator, =, NodeUtil, ., getFunctionParameters, (]
[), ;, }, Node, astParameterIterator, =, NodeUtil, ., getFunctionParameters, (, function, ), ., getFirstChild, (, ), ;, Node, typeParameterIterator, =]
[), ;, }, Node, astParameterIterator, =, NodeUtil, ., getFunctionParameters, (, function, ), ., getFirstChild, (, ), ;, Node, typeParameterIterator, =]
[), ;, }, Node, astParameterIterator, =, NodeUtil, ., getFunctionParameters, (, function, ), ., getFirstChild, (, ), ;, Node, typeParameterIterator, =]
[., getFirstChild, (, ), ;, Node, typeParameterIterator, =, functionType, ., getParametersNode, (, ), ., getFirstChild, (, ), ;, while, (]
[., getFirstChild, (, ), ;, Node, typeParameterIterator, =, functionType, ., getParametersNode, (, ), ., getFirstChild, (, ), ;, while, (]
[(, ), ;, Node, typeParameterIterator, =, functionType, ., getParametersNode, (, ), ., getFirstChild, (, ), ;, while, (, astParameterIterator, !=]
[functionType, ., getParametersNode, (, ), ., getFirstChild, (, ), ;, while, (, astParameterIterator, !=, null, ), {, JSType, parameterType, =]
[functionType, ., getParametersNode, (, ), ., getFirstChild, (, ), ;, while, (, astParameterIterator, !=, null, ), {, JSType, parameterType, =]
[), ;, while, (, astParameterIterator, !=, null, ), {, JSType, parameterType, =, typeParameterIterator, ., getJSType, (, ), ;, if, (]
[), ;, while, (, astParameterIterator, !=, null, ), {, JSType, parameterType, =, typeParameterIterator, ., getJSType, (, ), ;, if, (]
[), ;, while, (, astParameterIterator, !=, null, ), {, JSType, parameterType, =, typeParameterIterator, ., getJSType, (, ), ;, if, (]
[while, (, astParameterIterator, !=, null, ), {, JSType, parameterType, =, typeParameterIterator, ., getJSType, (, ), ;, if, (, parameterType, ==]
[astParameterIterator, !=, null, ), {, JSType, parameterType, =, typeParameterIterator, ., getJSType, (, ), ;, if, (, parameterType, ==, null, ||]
[astParameterIterator, !=, null, ), {, JSType, parameterType, =, typeParameterIterator, ., getJSType, (, ), ;, if, (, parameterType, ==, null, ||]
[=, typeParameterIterator, ., getJSType, (, ), ;, if, (, parameterType, ==, null, ||, parameterType, ., isUnknownType, (, ), ), {]
[., getJSType, (, ), ;, if, (, parameterType, ==, null, ||, parameterType, ., isUnknownType, (, ), ), {, reportUnknownParameterType, (]
[(, ), ;, if, (, parameterType, ==, null, ||, parameterType, ., isUnknownType, (, ), ), {, reportUnknownParameterType, (, function, ,]
[(, parameterType, ==, null, ||, parameterType, ., isUnknownType, (, ), ), {, reportUnknownParameterType, (, function, ,, astParameterIterator, ), ;, }]
[==, null, ||, parameterType, ., isUnknownType, (, ), ), {, reportUnknownParameterType, (, function, ,, astParameterIterator, ), ;, }, astParameterIterator, =]
[==, null, ||, parameterType, ., isUnknownType, (, ), ), {, reportUnknownParameterType, (, function, ,, astParameterIterator, ), ;, }, astParameterIterator, =]
[(, ), ), {, reportUnknownParameterType, (, function, ,, astParameterIterator, ), ;, }, astParameterIterator, =, astParameterIterator, ., getNext, (, ), ;]
[), {, reportUnknownParameterType, (, function, ,, astParameterIterator, ), ;, }, astParameterIterator, =, astParameterIterator, ., getNext, (, ), ;, typeParameterIterator, =]
[), {, reportUnknownParameterType, (, function, ,, astParameterIterator, ), ;, }, astParameterIterator, =, astParameterIterator, ., getNext, (, ), ;, typeParameterIterator, =]
[=, typeParameterIterator, ., getNext, (, ), ;, }, }, private, void, reportUnknownParameterType, (, Node, function, ,, Node, parameter, ), {]
[=, typeParameterIterator, ., getNext, (, ), ;, }, }, private, void, reportUnknownParameterType, (, Node, function, ,, Node, parameter, ), {]
[(, ), ;, }, }, private, void, reportUnknownParameterType, (, Node, function, ,, Node, parameter, ), {, compiler, ., report, (]
[(, ), ;, }, }, private, void, reportUnknownParameterType, (, Node, function, ,, Node, parameter, ), {, compiler, ., report, (]
[}, private, void, reportUnknownParameterType, (, Node, function, ,, Node, parameter, ), {, compiler, ., report, (, JSError, ., make, (]
[}, private, void, reportUnknownParameterType, (, Node, function, ,, Node, parameter, ), {, compiler, ., report, (, JSError, ., make, (]
[(, Node, function, ,, Node, parameter, ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (]
[,, Node, parameter, ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, function, ), ,]
[parameter, ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, function, ), ,, parameter, ,]
[parameter, ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, function, ), ,, parameter, ,]
[., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, function, ), ,, parameter, ,, CheckLevel, ., WARNING, ,]
[(, JSError, ., make, (, NodeUtil, ., getSourceName, (, function, ), ,, parameter, ,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE, ,]
[(, JSError, ., make, (, NodeUtil, ., getSourceName, (, function, ), ,, parameter, ,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE, ,]
[(, NodeUtil, ., getSourceName, (, function, ), ,, parameter, ,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE, ,, NodeUtil, ., getFunctionName, (]
[getSourceName, (, function, ), ,, parameter, ,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE, ,, NodeUtil, ., getFunctionName, (, function, ), ,]
[getSourceName, (, function, ), ,, parameter, ,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE, ,, NodeUtil, ., getFunctionName, (, function, ), ,]
[function, ), ,, parameter, ., getString, (, ), ), ), ;, }, private, void, reportUnknownReturnType, (, Node, function, ), {]
[function, ), ,, parameter, ., getString, (, ), ), ), ;, }, private, void, reportUnknownReturnType, (, Node, function, ), {]
[., getString, (, ), ), ), ;, }, private, void, reportUnknownReturnType, (, Node, function, ), {, compiler, ., report, (]
[., getString, (, ), ), ), ;, }, private, void, reportUnknownReturnType, (, Node, function, ), {, compiler, ., report, (]
[), ), ;, }, private, void, reportUnknownReturnType, (, Node, function, ), {, compiler, ., report, (, JSError, ., make, (]
[), ), ;, }, private, void, reportUnknownReturnType, (, Node, function, ), {, compiler, ., report, (, JSError, ., make, (]
[private, void, reportUnknownReturnType, (, Node, function, ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (]
[(, Node, function, ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, function, ), ,]
[function, ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, function, ), ,, function, ,]
[function, ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, function, ), ,, function, ,]
[., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, function, ), ,, function, ,, CheckLevel, ., WARNING, ,]
[(, JSError, ., make, (, NodeUtil, ., getSourceName, (, function, ), ,, function, ,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE, ,]
[(, JSError, ., make, (, NodeUtil, ., getSourceName, (, function, ), ,, function, ,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE, ,]
[(, NodeUtil, ., getSourceName, (, function, ), ,, function, ,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE, ,, NodeUtil, ., getFunctionName, (]
[., getFunctionName, (, function, ), ), ), ;, }, protected, Node, getValue, (, Node, qualifiedNameNode, ), {, String, qualifiedName, =]
[., getFunctionName, (, function, ), ), ), ;, }, protected, Node, getValue, (, Node, qualifiedNameNode, ), {, String, qualifiedName, =]
[}, protected, Node, getValue, (, Node, qualifiedNameNode, ), {, String, qualifiedName, =, value, ., getQualifiedName, (, ), ;, if, (]
[}, protected, Node, getValue, (, Node, qualifiedNameNode, ), {, String, qualifiedName, =, value, ., getQualifiedName, (, ), ;, if, (]
[Node, getValue, (, Node, qualifiedNameNode, ), {, String, qualifiedName, =, value, ., getQualifiedName, (, ), ;, if, (, qualifiedName, ==]
[qualifiedNameNode, ), {, String, qualifiedName, =, value, ., getQualifiedName, (, ), ;, if, (, qualifiedName, ==, null, ), {, return]
[value, ., getQualifiedName, (, ), ;, if, (, qualifiedName, ==, null, ), {, return, null, ;, }, Node, definitionParent, =]
[value, ., getQualifiedName, (, ), ;, if, (, qualifiedName, ==, null, ), {, return, null, ;, }, Node, definitionParent, =]
[), ;, if, (, qualifiedName, ==, null, ), {, return, null, ;, }, Node, definitionParent, =, definitionMap, ., get, (]
[==, null, ), {, return, null, ;, }, Node, definitionParent, =, definitionMap, ., get, (, qualifiedName, ), ;, if, (]
[==, null, ), {, return, null, ;, }, Node, definitionParent, =, definitionMap, ., get, (, qualifiedName, ), ;, if, (]
[), {, return, null, ;, }, Node, definitionParent, =, definitionMap, ., get, (, qualifiedName, ), ;, if, (, definitionParent, ==]
[;, }, Node, definitionParent, =, definitionMap, ., get, (, qualifiedName, ), ;, if, (, definitionParent, ==, null, ), {, return]
[(, qualifiedName, ), ;, if, (, definitionParent, ==, null, ), {, return, null, ;, }, Node, definition, ;, switch, (]
[(, qualifiedName, ), ;, if, (, definitionParent, ==, null, ), {, return, null, ;, }, Node, definition, ;, switch, (]
[null, ), {, return, null, ;, }, Node, definition, ;, switch, (, definitionParent, ., getType, (, ), ), {, case]
[null, ), {, return, null, ;, }, Node, definition, ;, switch, (, definitionParent, ., getType, (, ), ), {, case]
[null, ;, }, Node, definition, ;, switch, (, definitionParent, ., getType, (, ), ), {, case, Token, ., ASSIGN, :]
[}, Node, definition, ;, switch, (, definitionParent, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, definition, =]
[}, Node, definition, ;, switch, (, definitionParent, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, definition, =]
[(, ), ), {, case, Token, ., ASSIGN, :, definition, =, definitionParent, ., getLastChild, (, ), ;, break, ;, case]
[(, ), ), {, case, Token, ., ASSIGN, :, definition, =, definitionParent, ., getLastChild, (, ), ;, break, ;, case]
[case, Token, ., ASSIGN, :, definition, =, definitionParent, ., getLastChild, (, ), ;, break, ;, case, Token, ., VAR, :]
[., ASSIGN, :, definition, =, definitionParent, ., getLastChild, (, ), ;, break, ;, case, Token, ., VAR, :, definition, =]
[., ASSIGN, :, definition, =, definitionParent, ., getLastChild, (, ), ;, break, ;, case, Token, ., VAR, :, definition, =]
[., ASSIGN, :, definition, =, definitionParent, ., getLastChild, (, ), ;, break, ;, case, Token, ., VAR, :, definition, =]
[., VAR, :, definition, =, definitionParent, ., getLastChild, (, ), ., getLastChild, (, ), ;, break, ;, default, :, return]
[definitionParent, ., getLastChild, (, ), ., getLastChild, (, ), ;, break, ;, default, :, return, null, ;, }, if, (]
[definitionParent, ., getLastChild, (, ), ., getLastChild, (, ), ;, break, ;, default, :, return, null, ;, }, if, (]
[., getLastChild, (, ), ., getLastChild, (, ), ;, break, ;, default, :, return, null, ;, }, if, (, !]
[., getLastChild, (, ), ., getLastChild, (, ), ;, break, ;, default, :, return, null, ;, }, if, (, !]
[(, ), ;, break, ;, default, :, return, null, ;, }, if, (, !, definition, ., isFunction, (, ), &&]
[), ;, break, ;, default, :, return, null, ;, }, if, (, !, definition, ., isFunction, (, ), &&, !]
[), ;, break, ;, default, :, return, null, ;, }, if, (, !, definition, ., isFunction, (, ), &&, !]
[;, }, if, (, !, definition, ., isFunction, (, ), &&, !, definition, ., isObjectLit, (, ), ), {, return]
[!, definition, ., isFunction, (, ), &&, !, definition, ., isObjectLit, (, ), ), {, return, null, ;, }, return]
[}, }, private, class, SymbolExport, extends, Export, {, public, SymbolExport, (, String, symbolName, ,, Node, value, ), {, super, (]
[private, class, SymbolExport, extends, Export, {, public, SymbolExport, (, String, symbolName, ,, Node, value, ), {, super, (, symbolName, ,]
[public, SymbolExport, (, String, symbolName, ,, Node, value, ), {, super, (, symbolName, ,, value, ), ;, String, qualifiedName, =]
[public, SymbolExport, (, String, symbolName, ,, Node, value, ), {, super, (, symbolName, ,, value, ), ;, String, qualifiedName, =]
[), {, super, (, symbolName, ,, value, ), ;, String, qualifiedName, =, value, ., getQualifiedName, (, ), ;, if, (]
[), {, super, (, symbolName, ,, value, ), ;, String, qualifiedName, =, value, ., getQualifiedName, (, ), ;, if, (]
[super, (, symbolName, ,, value, ), ;, String, qualifiedName, =, value, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=]
[,, value, ), ;, String, qualifiedName, =, value, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {]
[,, value, ), ;, String, qualifiedName, =, value, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {]
[String, qualifiedName, =, value, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {, mappedPaths, ., put, (]
[=, value, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {, mappedPaths, ., put, (, qualifiedName, ,]
[{, mappedPaths, ., put, (, qualifiedName, ,, symbolName, ), ;, }, }, @, Override, String, getExportedPath, (, ), {, return]
[private, final, String, exportPath, ;, public, PropertyExport, (, String, exportPath, ,, String, symbolName, ,, Node, value, ), {, super, (]
[String, exportPath, ;, public, PropertyExport, (, String, exportPath, ,, String, symbolName, ,, Node, value, ), {, super, (, symbolName, ,]
[public, PropertyExport, (, String, exportPath, ,, String, symbolName, ,, Node, value, ), {, super, (, symbolName, ,, value, ), ;]
[public, PropertyExport, (, String, exportPath, ,, String, symbolName, ,, Node, value, ), {, super, (, symbolName, ,, value, ), ;]
[exportPath, ,, String, symbolName, ,, Node, value, ), {, super, (, symbolName, ,, value, ), ;, this, ., exportPath, =]
[this, ., exportPath, =, exportPath, ;, }, @, Override, String, getExportedPath, (, ), {, List, <, String, >, pieces, =]
[this, ., exportPath, =, exportPath, ;, }, @, Override, String, getExportedPath, (, ), {, List, <, String, >, pieces, =]
[exportPath, ;, }, @, Override, String, getExportedPath, (, ), {, List, <, String, >, pieces, =, Lists, ., newArrayList, (]
[exportPath, ;, }, @, Override, String, getExportedPath, (, ), {, List, <, String, >, pieces, =, Lists, ., newArrayList, (]
[Override, String, getExportedPath, (, ), {, List, <, String, >, pieces, =, Lists, ., newArrayList, (, exportPath, ., split, (]
[>, pieces, =, Lists, ., newArrayList, (, exportPath, ., split, (, "\\.", ), ), ;, for, (, int, i, =]
[>, pieces, =, Lists, ., newArrayList, (, exportPath, ., split, (, "\\.", ), ), ;, for, (, int, i, =]
[(, exportPath, ., split, (, "\\.", ), ), ;, for, (, int, i, =, pieces, ., size, (, ), ;]
[(, exportPath, ., split, (, "\\.", ), ), ;, for, (, int, i, =, pieces, ., size, (, ), ;]
[., split, (, "\\.", ), ), ;, for, (, int, i, =, pieces, ., size, (, ), ;, i, >]
[(, "\\.", ), ), ;, for, (, int, i, =, pieces, ., size, (, ), ;, i, >, 0, ;]
[(, "\\.", ), ), ;, for, (, int, i, =, pieces, ., size, (, ), ;, i, >, 0, ;]
[int, i, =, pieces, ., size, (, ), ;, i, >, 0, ;, i, --, ), {, String, cPath, =]
[int, i, =, pieces, ., size, (, ), ;, i, >, 0, ;, i, --, ), {, String, cPath, =]
[int, i, =, pieces, ., size, (, ), ;, i, >, 0, ;, i, --, ), {, String, cPath, =]
[., size, (, ), ;, i, >, 0, ;, i, --, ), {, String, cPath, =, Joiner, ., on, (]
[i, >, 0, ;, i, --, ), {, String, cPath, =, Joiner, ., on, (, ".", ), ., join, (]
[i, >, 0, ;, i, --, ), {, String, cPath, =, Joiner, ., on, (, ".", ), ., join, (]
[i, --, ), {, String, cPath, =, Joiner, ., on, (, ".", ), ., join, (, Iterables, ., limit, (]
[), {, String, cPath, =, Joiner, ., on, (, ".", ), ., join, (, Iterables, ., limit, (, pieces, ,]
[., on, (, ".", ), ., join, (, Iterables, ., limit, (, pieces, ,, i, ), ), ;, if, (]
[., on, (, ".", ), ., join, (, Iterables, ., limit, (, pieces, ,, i, ), ), ;, if, (]
[), ., join, (, Iterables, ., limit, (, pieces, ,, i, ), ), ;, if, (, mappedPaths, ., containsKey, (]
[(, pieces, ,, i, ), ), ;, if, (, mappedPaths, ., containsKey, (, cPath, ), ), {, String, newPath, =]
[(, pieces, ,, i, ), ), ;, if, (, mappedPaths, ., containsKey, (, cPath, ), ), {, String, newPath, =]
[), ), ;, if, (, mappedPaths, ., containsKey, (, cPath, ), ), {, String, newPath, =, mappedPaths, ., get, (]
[mappedPaths, ., containsKey, (, cPath, ), ), {, String, newPath, =, mappedPaths, ., get, (, cPath, ), ;, if, (]
[mappedPaths, ., containsKey, (, cPath, ), ), {, String, newPath, =, mappedPaths, ., get, (, cPath, ), ;, if, (]
[containsKey, (, cPath, ), ), {, String, newPath, =, mappedPaths, ., get, (, cPath, ), ;, if, (, i, <]
[containsKey, (, cPath, ), ), {, String, newPath, =, mappedPaths, ., get, (, cPath, ), ;, if, (, i, <]
[newPath, =, mappedPaths, ., get, (, cPath, ), ;, if, (, i, <, pieces, ., size, (, ), ), {]
[mappedPaths, ., get, (, cPath, ), ;, if, (, i, <, pieces, ., size, (, ), ), {, newPath, +=]
[mappedPaths, ., get, (, cPath, ), ;, if, (, i, <, pieces, ., size, (, ), ), {, newPath, +=]
[get, (, cPath, ), ;, if, (, i, <, pieces, ., size, (, ), ), {, newPath, +=, ".", +]
[get, (, cPath, ), ;, if, (, i, <, pieces, ., size, (, ), ), {, newPath, +=, ".", +]
[get, (, cPath, ), ;, if, (, i, <, pieces, ., size, (, ), ), {, newPath, +=, ".", +]
[;, if, (, i, <, pieces, ., size, (, ), ), {, newPath, +=, ".", +, Joiner, ., on, (]
[pieces, ., size, (, ), ), {, newPath, +=, ".", +, Joiner, ., on, (, ".", ), ., join, (]
[pieces, ., size, (, ), ), {, newPath, +=, ".", +, Joiner, ., on, (, ".", ), ., join, (]
[), ), {, newPath, +=, ".", +, Joiner, ., on, (, ".", ), ., join, (, Iterables, ., skip, (]
[{, newPath, +=, ".", +, Joiner, ., on, (, ".", ), ., join, (, Iterables, ., skip, (, pieces, ,]
[., on, (, ".", ), ., join, (, Iterables, ., skip, (, pieces, ,, i, ), ), ;, }, return]
[., on, (, ".", ), ., join, (, Iterables, ., skip, (, pieces, ,, i, ), ), ;, }, return]
[., on, (, ".", ), ., join, (, Iterables, ., skip, (, pieces, ,, i, ), ), ;, }, return]
[(, ".", ), ., join, (, Iterables, ., skip, (, pieces, ,, i, ), ), ;, }, return, newPath, +]
[), ., join, (, Iterables, ., skip, (, pieces, ,, i, ), ), ;, }, return, newPath, +, ".", +]
[., skip, (, pieces, ,, i, ), ), ;, }, return, newPath, +, ".", +, symbolName, ;, }, }, return]
[., skip, (, pieces, ,, i, ), ), ;, }, return, newPath, +, ".", +, symbolName, ;, }, }, return]
[., skip, (, pieces, ,, i, ), ), ;, }, return, newPath, +, ".", +, symbolName, ;, }, }, return]
[(, pieces, ,, i, ), ), ;, }, return, newPath, +, ".", +, symbolName, ;, }, }, return, exportPath, +]
[,, i, ), ), ;, }, return, newPath, +, ".", +, symbolName, ;, }, }, return, exportPath, +, ".", +]
[+, symbolName, ;, }, }, return, exportPath, +, ".", +, symbolName, ;, }, }, ExternExportsPass, (, AbstractCompiler, compiler, ), {]
[+, symbolName, ;, }, }, return, exportPath, +, ".", +, symbolName, ;, }, }, ExternExportsPass, (, AbstractCompiler, compiler, ), {]
[}, return, exportPath, +, ".", +, symbolName, ;, }, }, ExternExportsPass, (, AbstractCompiler, compiler, ), {, this, ., exports, =]
[}, return, exportPath, +, ".", +, symbolName, ;, }, }, ExternExportsPass, (, AbstractCompiler, compiler, ), {, this, ., exports, =]
[symbolName, ;, }, }, ExternExportsPass, (, AbstractCompiler, compiler, ), {, this, ., exports, =, Lists, ., newArrayList, (, ), ;]
[symbolName, ;, }, }, ExternExportsPass, (, AbstractCompiler, compiler, ), {, this, ., exports, =, Lists, ., newArrayList, (, ), ;]
[ExternExportsPass, (, AbstractCompiler, compiler, ), {, this, ., exports, =, Lists, ., newArrayList, (, ), ;, this, ., compiler, =]
[AbstractCompiler, compiler, ), {, this, ., exports, =, Lists, ., newArrayList, (, ), ;, this, ., compiler, =, compiler, ;]
[AbstractCompiler, compiler, ), {, this, ., exports, =, Lists, ., newArrayList, (, ), ;, this, ., compiler, =, compiler, ;]
[this, ., exports, =, Lists, ., newArrayList, (, ), ;, this, ., compiler, =, compiler, ;, this, ., definitionMap, =]
[this, ., exports, =, Lists, ., newArrayList, (, ), ;, this, ., compiler, =, compiler, ;, this, ., definitionMap, =]
[newArrayList, (, ), ;, this, ., compiler, =, compiler, ;, this, ., definitionMap, =, Maps, ., newHashMap, (, ), ;]
[newArrayList, (, ), ;, this, ., compiler, =, compiler, ;, this, ., definitionMap, =, Maps, ., newHashMap, (, ), ;]
[this, ., compiler, =, compiler, ;, this, ., definitionMap, =, Maps, ., newHashMap, (, ), ;, this, ., externsRoot, =]
[this, ., compiler, =, compiler, ;, this, ., definitionMap, =, Maps, ., newHashMap, (, ), ;, this, ., externsRoot, =]
[this, ., definitionMap, =, Maps, ., newHashMap, (, ), ;, this, ., externsRoot, =, IR, ., block, (, ), ;]
[this, ., definitionMap, =, Maps, ., newHashMap, (, ), ;, this, ., externsRoot, =, IR, ., block, (, ), ;]
[this, ., definitionMap, =, Maps, ., newHashMap, (, ), ;, this, ., externsRoot, =, IR, ., block, (, ), ;]
[newHashMap, (, ), ;, this, ., externsRoot, =, IR, ., block, (, ), ;, this, ., externsRoot, ., setIsSyntheticBlock, (]
[;, this, ., externsRoot, =, IR, ., block, (, ), ;, this, ., externsRoot, ., setIsSyntheticBlock, (, true, ), ;]
[;, this, ., externsRoot, =, IR, ., block, (, ), ;, this, ., externsRoot, ., setIsSyntheticBlock, (, true, ), ;]
[=, IR, ., block, (, ), ;, this, ., externsRoot, ., setIsSyntheticBlock, (, true, ), ;, this, ., alreadyExportedPaths, =]
[=, IR, ., block, (, ), ;, this, ., externsRoot, ., setIsSyntheticBlock, (, true, ), ;, this, ., alreadyExportedPaths, =]
[;, this, ., externsRoot, ., setIsSyntheticBlock, (, true, ), ;, this, ., alreadyExportedPaths, =, Sets, ., newHashSet, (, ), ;]
[;, this, ., externsRoot, ., setIsSyntheticBlock, (, true, ), ;, this, ., alreadyExportedPaths, =, Sets, ., newHashSet, (, ), ;]
[., setIsSyntheticBlock, (, true, ), ;, this, ., alreadyExportedPaths, =, Sets, ., newHashSet, (, ), ;, this, ., mappedPaths, =]
[., setIsSyntheticBlock, (, true, ), ;, this, ., alreadyExportedPaths, =, Sets, ., newHashSet, (, ), ;, this, ., mappedPaths, =]
[this, ., alreadyExportedPaths, =, Sets, ., newHashSet, (, ), ;, this, ., mappedPaths, =, Maps, ., newHashMap, (, ), ;]
[., mappedPaths, =, Maps, ., newHashMap, (, ), ;, initExportMethods, (, ), ;, }, private, void, initExportMethods, (, ), {]
[=, Maps, ., newHashMap, (, ), ;, initExportMethods, (, ), ;, }, private, void, initExportMethods, (, ), {, exportSymbolFunctionNames, =]
[=, Maps, ., newHashMap, (, ), ;, initExportMethods, (, ), ;, }, private, void, initExportMethods, (, ), {, exportSymbolFunctionNames, =]
[;, initExportMethods, (, ), ;, }, private, void, initExportMethods, (, ), {, exportSymbolFunctionNames, =, Lists, ., newArrayList, (, ), ;]
[(, ), ;, }, private, void, initExportMethods, (, ), {, exportSymbolFunctionNames, =, Lists, ., newArrayList, (, ), ;, exportPropertyFunctionNames, =]
[(, ), ;, }, private, void, initExportMethods, (, ), {, exportSymbolFunctionNames, =, Lists, ., newArrayList, (, ), ;, exportPropertyFunctionNames, =]
[{, exportSymbolFunctionNames, =, Lists, ., newArrayList, (, ), ;, exportPropertyFunctionNames, =, Lists, ., newArrayList, (, ), ;, CodingConvention, convention, =]
[{, exportSymbolFunctionNames, =, Lists, ., newArrayList, (, ), ;, exportPropertyFunctionNames, =, Lists, ., newArrayList, (, ), ;, CodingConvention, convention, =]
[(, ), ;, exportPropertyFunctionNames, =, Lists, ., newArrayList, (, ), ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;]
[(, ), ;, exportPropertyFunctionNames, =, Lists, ., newArrayList, (, ), ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;]
[=, Lists, ., newArrayList, (, ), ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, exportSymbolFunctionNames, ., add, (]
[=, Lists, ., newArrayList, (, ), ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, exportSymbolFunctionNames, ., add, (]
[CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, exportSymbolFunctionNames, ., add, (, convention, ., getExportSymbolFunction, (, ), ), ;]
[CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, exportSymbolFunctionNames, ., add, (, convention, ., getExportSymbolFunction, (, ), ), ;]
[., getCodingConvention, (, ), ;, exportSymbolFunctionNames, ., add, (, convention, ., getExportSymbolFunction, (, ), ), ;, exportPropertyFunctionNames, ., add, (]
[., getCodingConvention, (, ), ;, exportSymbolFunctionNames, ., add, (, convention, ., getExportSymbolFunction, (, ), ), ;, exportPropertyFunctionNames, ., add, (]
[add, (, convention, ., getExportSymbolFunction, (, ), ), ;, exportPropertyFunctionNames, ., add, (, convention, ., getExportPropertyFunction, (, ), ), ;]
[add, (, convention, ., getExportSymbolFunction, (, ), ), ;, exportPropertyFunctionNames, ., add, (, convention, ., getExportPropertyFunction, (, ), ), ;]
[getExportSymbolFunction, (, ), ), ;, exportPropertyFunctionNames, ., add, (, convention, ., getExportPropertyFunction, (, ), ), ;, exportSymbolFunctionNames, ., add, (]
[), ;, exportPropertyFunctionNames, ., add, (, convention, ., getExportPropertyFunction, (, ), ), ;, exportSymbolFunctionNames, ., add, (, "google_exportSymbol", ), ;]
[), ;, exportPropertyFunctionNames, ., add, (, convention, ., getExportPropertyFunction, (, ), ), ;, exportSymbolFunctionNames, ., add, (, "google_exportSymbol", ), ;]
[add, (, convention, ., getExportPropertyFunction, (, ), ), ;, exportSymbolFunctionNames, ., add, (, "google_exportSymbol", ), ;, exportPropertyFunctionNames, ., add, (]
[., add, (, "google_exportProperty", ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[., add, (, "google_exportProperty", ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
["google_exportProperty", ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, new, NodeTraversal, (]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, new, NodeTraversal, (, compiler, ,]
[void, process, (, Node, externs, ,, Node, root, ), {, new, NodeTraversal, (, compiler, ,, this, ), ., traverse, (]
[{, new, NodeTraversal, (, compiler, ,, this, ), ., traverse, (, root, ), ;, Set, <, Export, >, sorted, =]
[this, ), ., traverse, (, root, ), ;, Set, <, Export, >, sorted, =, new, TreeSet, <, Export, >, (]
[<, Export, >, (, ), {, @, Override, public, int, compare, (, Export, e1, ,, Export, e2, ), {, return]
[<, Export, >, (, ), {, @, Override, public, int, compare, (, Export, e1, ,, Export, e2, ), {, return]
[<, Export, >, (, ), {, @, Override, public, int, compare, (, Export, e1, ,, Export, e2, ), {, return]
[public, int, compare, (, Export, e1, ,, Export, e2, ), {, return, e1, ., getExportedPath, (, ), ., compareTo, (]
[public, int, compare, (, Export, e1, ,, Export, e2, ), {, return, e1, ., getExportedPath, (, ), ., compareTo, (]
[return, e1, ., getExportedPath, (, ), ., compareTo, (, e2, ., getExportedPath, (, ), ), ;, }, }, ), ;]
[return, e1, ., getExportedPath, (, ), ., compareTo, (, e2, ., getExportedPath, (, ), ), ;, }, }, ), ;]
[(, ), ., compareTo, (, e2, ., getExportedPath, (, ), ), ;, }, }, ), ;, sorted, ., addAll, (]
[(, ), ), ;, }, }, ), ;, sorted, ., addAll, (, exports, ), ;, for, (, Export, export, :]
[;, }, }, ), ;, sorted, ., addAll, (, exports, ), ;, for, (, Export, export, :, sorted, ), {]
[;, }, }, ), ;, sorted, ., addAll, (, exports, ), ;, for, (, Export, export, :, sorted, ), {]
[{, export, ., generateExterns, (, ), ;, }, }, public, String, getGeneratedExterns, (, ), {, CodePrinter, ., Builder, builder, =]
[{, export, ., generateExterns, (, ), ;, }, }, public, String, getGeneratedExterns, (, ), {, CodePrinter, ., Builder, builder, =]
[{, export, ., generateExterns, (, ), ;, }, }, public, String, getGeneratedExterns, (, ), {, CodePrinter, ., Builder, builder, =]
[), ;, }, }, public, String, getGeneratedExterns, (, ), {, CodePrinter, ., Builder, builder, =, new, CodePrinter, ., Builder, (]
[String, getGeneratedExterns, (, ), {, CodePrinter, ., Builder, builder, =, new, CodePrinter, ., Builder, (, externsRoot, ), ., setPrettyPrint, (]
[CodePrinter, ., Builder, builder, =, new, CodePrinter, ., Builder, (, externsRoot, ), ., setPrettyPrint, (, true, ), ., setOutputTypes, (]
[=, new, CodePrinter, ., Builder, (, externsRoot, ), ., setPrettyPrint, (, true, ), ., setOutputTypes, (, true, ), ;, return]
[=, new, CodePrinter, ., Builder, (, externsRoot, ), ., setPrettyPrint, (, true, ), ., setOutputTypes, (, true, ), ;, return]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, case]
[,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, case]
[n, ., getType, (, ), ), {, case, Token, ., NAME, :, case, Token, ., GETPROP, :, String, name, =]
[n, ., getType, (, ), ), {, case, Token, ., NAME, :, case, Token, ., GETPROP, :, String, name, =]
[Token, ., NAME, :, case, Token, ., GETPROP, :, String, name, =, n, ., getQualifiedName, (, ), ;, if, (]
[Token, ., NAME, :, case, Token, ., GETPROP, :, String, name, =, n, ., getQualifiedName, (, ), ;, if, (]
[NAME, :, case, Token, ., GETPROP, :, String, name, =, n, ., getQualifiedName, (, ), ;, if, (, name, ==]
[name, =, n, ., getQualifiedName, (, ), ;, if, (, name, ==, null, ), {, return, ;, }, if, (]
[name, =, n, ., getQualifiedName, (, ), ;, if, (, name, ==, null, ), {, return, ;, }, if, (]
[name, =, n, ., getQualifiedName, (, ), ;, if, (, name, ==, null, ), {, return, ;, }, if, (]
[), ;, if, (, name, ==, null, ), {, return, ;, }, if, (, parent, ., isAssign, (, ), ||]
[), ;, if, (, name, ==, null, ), {, return, ;, }, if, (, parent, ., isAssign, (, ), ||]
[), {, return, ;, }, if, (, parent, ., isAssign, (, ), ||, parent, ., isVar, (, ), ), {]
[), {, return, ;, }, if, (, parent, ., isAssign, (, ), ||, parent, ., isVar, (, ), ), {]
[}, if, (, parent, ., isAssign, (, ), ||, parent, ., isVar, (, ), ), {, definitionMap, ., put, (]
[(, parent, ., isAssign, (, ), ||, parent, ., isVar, (, ), ), {, definitionMap, ., put, (, name, ,]
[||, parent, ., isVar, (, ), ), {, definitionMap, ., put, (, name, ,, parent, ), ;, }, if, (]
[parent, ., isVar, (, ), ), {, definitionMap, ., put, (, name, ,, parent, ), ;, }, if, (, !]
[parent, ., isVar, (, ), ), {, definitionMap, ., put, (, name, ,, parent, ), ;, }, if, (, !]
[,, parent, ), ;, }, if, (, !, parent, ., isCall, (, ), ), {, return, ;, }, if, (]
[,, parent, ), ;, }, if, (, !, parent, ., isCall, (, ), ), {, return, ;, }, if, (]
[}, if, (, !, parent, ., isCall, (, ), ), {, return, ;, }, if, (, exportPropertyFunctionNames, ., contains, (]
[parent, ., isCall, (, ), ), {, return, ;, }, if, (, exportPropertyFunctionNames, ., contains, (, name, ), ), {]
[isCall, (, ), ), {, return, ;, }, if, (, exportPropertyFunctionNames, ., contains, (, name, ), ), {, handlePropertyExport, (]
[;, }, if, (, exportPropertyFunctionNames, ., contains, (, name, ), ), {, handlePropertyExport, (, parent, ), ;, }, if, (]
[;, }, if, (, exportPropertyFunctionNames, ., contains, (, name, ), ), {, handlePropertyExport, (, parent, ), ;, }, if, (]
[exportPropertyFunctionNames, ., contains, (, name, ), ), {, handlePropertyExport, (, parent, ), ;, }, if, (, exportSymbolFunctionNames, ., contains, (]
[name, ), ), {, handlePropertyExport, (, parent, ), ;, }, if, (, exportSymbolFunctionNames, ., contains, (, name, ), ), {]
[), {, handlePropertyExport, (, parent, ), ;, }, if, (, exportSymbolFunctionNames, ., contains, (, name, ), ), {, handleSymbolExport, (]
[), {, handleSymbolExport, (, parent, ), ;, }, }, }, private, void, handleSymbolExport, (, Node, parent, ), {, if, (]
[), {, handleSymbolExport, (, parent, ), ;, }, }, }, private, void, handleSymbolExport, (, Node, parent, ), {, if, (]
[), {, handleSymbolExport, (, parent, ), ;, }, }, }, private, void, handleSymbolExport, (, Node, parent, ), {, if, (]
[;, }, }, }, private, void, handleSymbolExport, (, Node, parent, ), {, if, (, parent, ., getChildCount, (, ), !=]
[parent, ), {, if, (, parent, ., getChildCount, (, ), !=, 3, ), {, return, ;, }, Node, thisNode, =]
[parent, ), {, if, (, parent, ., getChildCount, (, ), !=, 3, ), {, return, ;, }, Node, thisNode, =]
[), !=, 3, ), {, return, ;, }, Node, thisNode, =, parent, ., getFirstChild, (, ), ;, Node, nameArg, =]
[), !=, 3, ), {, return, ;, }, Node, thisNode, =, parent, ., getFirstChild, (, ), ;, Node, nameArg, =]
[thisNode, =, parent, ., getFirstChild, (, ), ;, Node, nameArg, =, thisNode, ., getNext, (, ), ;, Node, valueArg, =]
[thisNode, =, parent, ., getFirstChild, (, ), ;, Node, nameArg, =, thisNode, ., getNext, (, ), ;, Node, valueArg, =]
[Node, nameArg, =, thisNode, ., getNext, (, ), ;, Node, valueArg, =, nameArg, ., getNext, (, ), ;, if, (]
[nameArg, =, thisNode, ., getNext, (, ), ;, Node, valueArg, =, nameArg, ., getNext, (, ), ;, if, (, !]
[nameArg, =, thisNode, ., getNext, (, ), ;, Node, valueArg, =, nameArg, ., getNext, (, ), ;, if, (, !]
[=, nameArg, ., getNext, (, ), ;, if, (, !, nameArg, ., isString, (, ), ), {, return, ;, }]
[=, nameArg, ., getNext, (, ), ;, if, (, !, nameArg, ., isString, (, ), ), {, return, ;, }]
[=, nameArg, ., getNext, (, ), ;, if, (, !, nameArg, ., isString, (, ), ), {, return, ;, }]
[;, if, (, !, nameArg, ., isString, (, ), ), {, return, ;, }, this, ., exports, ., add, (]
[!, nameArg, ., isString, (, ), ), {, return, ;, }, this, ., exports, ., add, (, new, SymbolExport, (]
[!, nameArg, ., isString, (, ), ), {, return, ;, }, this, ., exports, ., add, (, new, SymbolExport, (]
[), {, return, ;, }, this, ., exports, ., add, (, new, SymbolExport, (, nameArg, ., getString, (, ), ,]
[., getString, (, ), ,, valueArg, ), ), ;, }, private, void, handlePropertyExport, (, Node, parent, ), {, if, (]
[., getString, (, ), ,, valueArg, ), ), ;, }, private, void, handlePropertyExport, (, Node, parent, ), {, if, (]
[., getString, (, ), ,, valueArg, ), ), ;, }, private, void, handlePropertyExport, (, Node, parent, ), {, if, (]
[), ), ;, }, private, void, handlePropertyExport, (, Node, parent, ), {, if, (, parent, ., getChildCount, (, ), !=]
[parent, ), {, if, (, parent, ., getChildCount, (, ), !=, 4, ), {, return, ;, }, Node, thisNode, =]
[parent, ), {, if, (, parent, ., getChildCount, (, ), !=, 4, ), {, return, ;, }, Node, thisNode, =]
[), !=, 4, ), {, return, ;, }, Node, thisNode, =, parent, ., getFirstChild, (, ), ;, Node, objectArg, =]
[), !=, 4, ), {, return, ;, }, Node, thisNode, =, parent, ., getFirstChild, (, ), ;, Node, objectArg, =]
[thisNode, =, parent, ., getFirstChild, (, ), ;, Node, objectArg, =, thisNode, ., getNext, (, ), ;, Node, nameArg, =]
[thisNode, =, parent, ., getFirstChild, (, ), ;, Node, objectArg, =, thisNode, ., getNext, (, ), ;, Node, nameArg, =]
[objectArg, =, thisNode, ., getNext, (, ), ;, Node, nameArg, =, objectArg, ., getNext, (, ), ;, Node, valueArg, =]
[objectArg, =, thisNode, ., getNext, (, ), ;, Node, nameArg, =, objectArg, ., getNext, (, ), ;, Node, valueArg, =]
[Node, nameArg, =, objectArg, ., getNext, (, ), ;, Node, valueArg, =, nameArg, ., getNext, (, ), ;, if, (]
[nameArg, =, objectArg, ., getNext, (, ), ;, Node, valueArg, =, nameArg, ., getNext, (, ), ;, if, (, !]
[nameArg, =, objectArg, ., getNext, (, ), ;, Node, valueArg, =, nameArg, ., getNext, (, ), ;, if, (, !]
[., getNext, (, ), ;, if, (, !, objectArg, ., isQualifiedName, (, ), ), {, return, ;, }, if, (]
[getNext, (, ), ;, if, (, !, objectArg, ., isQualifiedName, (, ), ), {, return, ;, }, if, (, !]
[getNext, (, ), ;, if, (, !, objectArg, ., isQualifiedName, (, ), ), {, return, ;, }, if, (, !]
[(, ), ), {, return, ;, }, if, (, !, nameArg, ., isString, (, ), ), {, return, ;, }]
[(, ), ), {, return, ;, }, if, (, !, nameArg, ., isString, (, ), ), {, return, ;, }]
[(, ), ), {, return, ;, }, if, (, !, nameArg, ., isString, (, ), ), {, return, ;, }]
[}, if, (, !, nameArg, ., isString, (, ), ), {, return, ;, }, this, ., exports, ., add, (]
[!, nameArg, ., isString, (, ), ), {, return, ;, }, this, ., exports, ., add, (, new, PropertyExport, (]
[!, nameArg, ., isString, (, ), ), {, return, ;, }, this, ., exports, ., add, (, new, PropertyExport, (]
[), {, return, ;, }, this, ., exports, ., add, (, new, PropertyExport, (, objectArg, ., getQualifiedName, (, ), ,]
[), {, return, ;, }, this, ., exports, ., add, (, new, PropertyExport, (, objectArg, ., getQualifiedName, (, ), ,]
[., exports, ., add, (, new, PropertyExport, (, objectArg, ., getQualifiedName, (, ), ,, nameArg, ., getString, (, ), ,]
