[java, ., io, ., Serializable, ;, public, class, HistogramBin, implements, Cloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[private, double, startBoundary, ;, private, double, endBoundary, ;, public, HistogramBin, (, double, startBoundary, ,, double, endBoundary, ), {, if, (]
[private, double, startBoundary, ;, private, double, endBoundary, ;, public, HistogramBin, (, double, startBoundary, ,, double, endBoundary, ), {, if, (]
[startBoundary, ;, private, double, endBoundary, ;, public, HistogramBin, (, double, startBoundary, ,, double, endBoundary, ), {, if, (, startBoundary, >]
[endBoundary, ;, public, HistogramBin, (, double, startBoundary, ,, double, endBoundary, ), {, if, (, startBoundary, >, endBoundary, ), {, throw]
[HistogramBin, (, double, startBoundary, ,, double, endBoundary, ), {, if, (, startBoundary, >, endBoundary, ), {, throw, new, IllegalArgumentException, (]
[,, double, endBoundary, ), {, if, (, startBoundary, >, endBoundary, ), {, throw, new, IllegalArgumentException, (, "HistogramBin():  startBoundary > endBoundary.", ), ;, }]
[,, double, endBoundary, ), {, if, (, startBoundary, >, endBoundary, ), {, throw, new, IllegalArgumentException, (, "HistogramBin():  startBoundary > endBoundary.", ), ;, }]
[{, if, (, startBoundary, >, endBoundary, ), {, throw, new, IllegalArgumentException, (, "HistogramBin():  startBoundary > endBoundary.", ), ;, }, this, ., count, =]
[(, startBoundary, >, endBoundary, ), {, throw, new, IllegalArgumentException, (, "HistogramBin():  startBoundary > endBoundary.", ), ;, }, this, ., count, =, 0, ;]
[(, startBoundary, >, endBoundary, ), {, throw, new, IllegalArgumentException, (, "HistogramBin():  startBoundary > endBoundary.", ), ;, }, this, ., count, =, 0, ;]
[), {, throw, new, IllegalArgumentException, (, "HistogramBin():  startBoundary > endBoundary.", ), ;, }, this, ., count, =, 0, ;, this, ., startBoundary, =]
[throw, new, IllegalArgumentException, (, "HistogramBin():  startBoundary > endBoundary.", ), ;, }, this, ., count, =, 0, ;, this, ., startBoundary, =, startBoundary, ;]
[throw, new, IllegalArgumentException, (, "HistogramBin():  startBoundary > endBoundary.", ), ;, }, this, ., count, =, 0, ;, this, ., startBoundary, =, startBoundary, ;]
["HistogramBin():  startBoundary > endBoundary.", ), ;, }, this, ., count, =, 0, ;, this, ., startBoundary, =, startBoundary, ;, this, ., endBoundary, =]
[this, ., startBoundary, =, startBoundary, ;, this, ., endBoundary, =, endBoundary, ;, }, public, int, getCount, (, ), {, return]
[this, ., startBoundary, =, startBoundary, ;, this, ., endBoundary, =, endBoundary, ;, }, public, int, getCount, (, ), {, return]
[;, }, public, int, getCount, (, ), {, return, this, ., count, ;, }, public, void, incrementCount, (, ), {]
[;, }, public, int, getCount, (, ), {, return, this, ., count, ;, }, public, void, incrementCount, (, ), {]
[;, }, public, int, getCount, (, ), {, return, this, ., count, ;, }, public, void, incrementCount, (, ), {]
[}, public, void, incrementCount, (, ), {, this, ., count, ++, ;, }, public, double, getStartBoundary, (, ), {, return]
[}, public, void, incrementCount, (, ), {, this, ., count, ++, ;, }, public, double, getStartBoundary, (, ), {, return]
[}, public, double, getStartBoundary, (, ), {, return, this, ., startBoundary, ;, }, public, double, getEndBoundary, (, ), {, return]
[}, public, double, getStartBoundary, (, ), {, return, this, ., startBoundary, ;, }, public, double, getEndBoundary, (, ), {, return]
[}, public, double, getEndBoundary, (, ), {, return, this, ., endBoundary, ;, }, public, double, getBinWidth, (, ), {, return]
[}, public, double, getEndBoundary, (, ), {, return, this, ., endBoundary, ;, }, public, double, getBinWidth, (, ), {, return]
[}, public, double, getEndBoundary, (, ), {, return, this, ., endBoundary, ;, }, public, double, getBinWidth, (, ), {, return]
[(, ), {, return, this, ., endBoundary, ;, }, public, double, getBinWidth, (, ), {, return, this, ., endBoundary, -]
[(, ), {, return, this, ., endBoundary, ;, }, public, double, getBinWidth, (, ), {, return, this, ., endBoundary, -]
[return, this, ., endBoundary, -, this, ., startBoundary, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[return, this, ., endBoundary, -, this, ., startBoundary, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[., endBoundary, -, this, ., startBoundary, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[., startBoundary, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, null, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, null, ), {, return, false, ;, }, if, (]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, null, ), {, return, false, ;, }, if, (]
[(, Object, obj, ), {, if, (, obj, ==, null, ), {, return, false, ;, }, if, (, obj, ==]
[{, if, (, obj, ==, null, ), {, return, false, ;, }, if, (, obj, ==, this, ), {, return]
[null, ), {, return, false, ;, }, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[null, ), {, return, false, ;, }, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[(, obj, ==, this, ), {, return, true, ;, }, if, (, obj, instanceof, HistogramBin, ), {, HistogramBin, bin, =]
[this, ), {, return, true, ;, }, if, (, obj, instanceof, HistogramBin, ), {, HistogramBin, bin, =, (, HistogramBin, )]
[;, }, if, (, obj, instanceof, HistogramBin, ), {, HistogramBin, bin, =, (, HistogramBin, ), obj, ;, boolean, b0, =]
[;, }, if, (, obj, instanceof, HistogramBin, ), {, HistogramBin, bin, =, (, HistogramBin, ), obj, ;, boolean, b0, =]
[;, }, if, (, obj, instanceof, HistogramBin, ), {, HistogramBin, bin, =, (, HistogramBin, ), obj, ;, boolean, b0, =]
[obj, instanceof, HistogramBin, ), {, HistogramBin, bin, =, (, HistogramBin, ), obj, ;, boolean, b0, =, bin, ., startBoundary, ==]
[obj, instanceof, HistogramBin, ), {, HistogramBin, bin, =, (, HistogramBin, ), obj, ;, boolean, b0, =, bin, ., startBoundary, ==]
[=, (, HistogramBin, ), obj, ;, boolean, b0, =, bin, ., startBoundary, ==, this, ., startBoundary, ;, boolean, b1, =]
[=, (, HistogramBin, ), obj, ;, boolean, b0, =, bin, ., startBoundary, ==, this, ., startBoundary, ;, boolean, b1, =]
[=, (, HistogramBin, ), obj, ;, boolean, b0, =, bin, ., startBoundary, ==, this, ., startBoundary, ;, boolean, b1, =]
[obj, ;, boolean, b0, =, bin, ., startBoundary, ==, this, ., startBoundary, ;, boolean, b1, =, bin, ., endBoundary, ==]
[obj, ;, boolean, b0, =, bin, ., startBoundary, ==, this, ., startBoundary, ;, boolean, b1, =, bin, ., endBoundary, ==]
[startBoundary, ==, this, ., startBoundary, ;, boolean, b1, =, bin, ., endBoundary, ==, this, ., endBoundary, ;, boolean, b2, =]
[startBoundary, ==, this, ., startBoundary, ;, boolean, b1, =, bin, ., endBoundary, ==, this, ., endBoundary, ;, boolean, b2, =]
[startBoundary, ==, this, ., startBoundary, ;, boolean, b1, =, bin, ., endBoundary, ==, this, ., endBoundary, ;, boolean, b2, =]
[startBoundary, ;, boolean, b1, =, bin, ., endBoundary, ==, this, ., endBoundary, ;, boolean, b2, =, bin, ., count, ==]
[startBoundary, ;, boolean, b1, =, bin, ., endBoundary, ==, this, ., endBoundary, ;, boolean, b2, =, bin, ., count, ==]
[bin, ., endBoundary, ==, this, ., endBoundary, ;, boolean, b2, =, bin, ., count, ==, this, ., count, ;, return]
[bin, ., endBoundary, ==, this, ., endBoundary, ;, boolean, b2, =, bin, ., count, ==, this, ., count, ;, return]
[bin, ., endBoundary, ==, this, ., endBoundary, ;, boolean, b2, =, bin, ., count, ==, this, ., count, ;, return]
[endBoundary, ==, this, ., endBoundary, ;, boolean, b2, =, bin, ., count, ==, this, ., count, ;, return, b0, &&]
[this, ., endBoundary, ;, boolean, b2, =, bin, ., count, ==, this, ., count, ;, return, b0, &&, b1, &&]
[boolean, b2, =, bin, ., count, ==, this, ., count, ;, return, b0, &&, b1, &&, b2, ;, }, return]
[b0, &&, b1, &&, b2, ;, }, return, false, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return]
[b0, &&, b1, &&, b2, ;, }, return, false, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return]
