[import, java, ., util, ., *, ;, class, FunctionNames, implements, CompilerPass, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[serialVersionUID, =, 1L, ;, private, final, transient, AbstractCompiler, compiler, ;, private, final, Map, <, Node, ,, FunctionRecord, >, functionMap, =]
[serialVersionUID, =, 1L, ;, private, final, transient, AbstractCompiler, compiler, ;, private, final, Map, <, Node, ,, FunctionRecord, >, functionMap, =]
[functionMap, =, Maps, ., newLinkedHashMap, (, ), ;, private, final, transient, FunctionListExtractor, functionListExtractor, ;, FunctionNames, (, AbstractCompiler, compiler, ), {]
[functionMap, =, Maps, ., newLinkedHashMap, (, ), ;, private, final, transient, FunctionListExtractor, functionListExtractor, ;, FunctionNames, (, AbstractCompiler, compiler, ), {]
[newLinkedHashMap, (, ), ;, private, final, transient, FunctionListExtractor, functionListExtractor, ;, FunctionNames, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[), ;, private, final, transient, FunctionListExtractor, functionListExtractor, ;, FunctionNames, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[), ;, private, final, transient, FunctionListExtractor, functionListExtractor, ;, FunctionNames, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[transient, FunctionListExtractor, functionListExtractor, ;, FunctionNames, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., functionListExtractor, =]
[;, FunctionNames, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., functionListExtractor, =, new, FunctionListExtractor, (]
[new, FunctionListExtractor, (, functionMap, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[new, FunctionListExtractor, (, functionMap, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, functionListExtractor, ), ;, FunctionExpressionNamer, namer, =]
[root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, functionListExtractor, ), ;, FunctionExpressionNamer, namer, =, new, FunctionExpressionNamer, (]
[(, compiler, ,, root, ,, functionListExtractor, ), ;, FunctionExpressionNamer, namer, =, new, FunctionExpressionNamer, (, functionMap, ), ;, AnonymousFunctionNamingCallback, namingCallback, =]
[root, ,, functionListExtractor, ), ;, FunctionExpressionNamer, namer, =, new, FunctionExpressionNamer, (, functionMap, ), ;, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (]
[), ;, FunctionExpressionNamer, namer, =, new, FunctionExpressionNamer, (, functionMap, ), ;, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (, namer, ), ;]
[), ;, FunctionExpressionNamer, namer, =, new, FunctionExpressionNamer, (, functionMap, ), ;, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (, namer, ), ;]
[=, new, FunctionExpressionNamer, (, functionMap, ), ;, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (, namer, ), ;, NodeTraversal, ., traverse, (]
[FunctionExpressionNamer, (, functionMap, ), ;, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (, namer, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[functionMap, ), ;, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (, namer, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[traverse, (, compiler, ,, root, ,, namingCallback, ), ;, }, public, Iterable, <, Node, >, getFunctionNodeList, (, ), {, return]
[traverse, (, compiler, ,, root, ,, namingCallback, ), ;, }, public, Iterable, <, Node, >, getFunctionNodeList, (, ), {, return]
[{, return, functionMap, ., keySet, (, ), ;, }, public, int, getFunctionId, (, Node, f, ), {, FunctionRecord, record, =]
[{, return, functionMap, ., keySet, (, ), ;, }, public, int, getFunctionId, (, Node, f, ), {, FunctionRecord, record, =]
[keySet, (, ), ;, }, public, int, getFunctionId, (, Node, f, ), {, FunctionRecord, record, =, functionMap, ., get, (]
[public, int, getFunctionId, (, Node, f, ), {, FunctionRecord, record, =, functionMap, ., get, (, f, ), ;, if, (]
[public, int, getFunctionId, (, Node, f, ), {, FunctionRecord, record, =, functionMap, ., get, (, f, ), ;, if, (]
[getFunctionId, (, Node, f, ), {, FunctionRecord, record, =, functionMap, ., get, (, f, ), ;, if, (, record, !=]
[), {, FunctionRecord, record, =, functionMap, ., get, (, f, ), ;, if, (, record, !=, null, ), {, return]
[), {, FunctionRecord, record, =, functionMap, ., get, (, f, ), ;, if, (, record, !=, null, ), {, return]
[(, f, ), ;, if, (, record, !=, null, ), {, return, record, ., id, ;, }, else, {, return]
[f, ), ;, if, (, record, !=, null, ), {, return, record, ., id, ;, }, else, {, return, -]
[}, else, {, return, -, 1, ;, }, }, public, String, getFunctionName, (, Node, f, ), {, FunctionRecord, record, =]
[}, else, {, return, -, 1, ;, }, }, public, String, getFunctionName, (, Node, f, ), {, FunctionRecord, record, =]
[-, 1, ;, }, }, public, String, getFunctionName, (, Node, f, ), {, FunctionRecord, record, =, functionMap, ., get, (]
[public, String, getFunctionName, (, Node, f, ), {, FunctionRecord, record, =, functionMap, ., get, (, f, ), ;, if, (]
[public, String, getFunctionName, (, Node, f, ), {, FunctionRecord, record, =, functionMap, ., get, (, f, ), ;, if, (]
[getFunctionName, (, Node, f, ), {, FunctionRecord, record, =, functionMap, ., get, (, f, ), ;, if, (, record, ==]
[), {, FunctionRecord, record, =, functionMap, ., get, (, f, ), ;, if, (, record, ==, null, ), {, return]
[., get, (, f, ), ;, if, (, record, ==, null, ), {, return, null, ;, }, String, str, =]
[., get, (, f, ), ;, if, (, record, ==, null, ), {, return, null, ;, }, String, str, =]
[if, (, record, ==, null, ), {, return, null, ;, }, String, str, =, record, ., name, ;, if, (]
[if, (, record, ==, null, ), {, return, null, ;, }, String, str, =, record, ., name, ;, if, (]
[return, null, ;, }, String, str, =, record, ., name, ;, if, (, str, ., isEmpty, (, ), ), {]
[;, }, String, str, =, record, ., name, ;, if, (, str, ., isEmpty, (, ), ), {, str, =]
[., name, ;, if, (, str, ., isEmpty, (, ), ), {, str, =, "<anonymous>", ;, }, Node, parent, =]
[., name, ;, if, (, str, ., isEmpty, (, ), ), {, str, =, "<anonymous>", ;, }, Node, parent, =]
[., isEmpty, (, ), ), {, str, =, "<anonymous>", ;, }, Node, parent, =, record, ., parent, ;, if, (]
[., isEmpty, (, ), ), {, str, =, "<anonymous>", ;, }, Node, parent, =, record, ., parent, ;, if, (]
[(, ), ), {, str, =, "<anonymous>", ;, }, Node, parent, =, record, ., parent, ;, if, (, parent, !=]
[{, str, =, "<anonymous>", ;, }, Node, parent, =, record, ., parent, ;, if, (, parent, !=, null, ), {]
[=, "<anonymous>", ;, }, Node, parent, =, record, ., parent, ;, if, (, parent, !=, null, ), {, str, =]
[=, "<anonymous>", ;, }, Node, parent, =, record, ., parent, ;, if, (, parent, !=, null, ), {, str, =]
[=, "<anonymous>", ;, }, Node, parent, =, record, ., parent, ;, if, (, parent, !=, null, ), {, str, =]
[;, }, Node, parent, =, record, ., parent, ;, if, (, parent, !=, null, ), {, str, =, getFunctionName, (]
[parent, =, record, ., parent, ;, if, (, parent, !=, null, ), {, str, =, getFunctionName, (, parent, ), +]
[record, ., parent, ;, if, (, parent, !=, null, ), {, str, =, getFunctionName, (, parent, ), +, "::", +]
[;, if, (, parent, !=, null, ), {, str, =, getFunctionName, (, parent, ), +, "::", +, str, ;, }]
[(, parent, !=, null, ), {, str, =, getFunctionName, (, parent, ), +, "::", +, str, ;, }, str, =]
[(, parent, !=, null, ), {, str, =, getFunctionName, (, parent, ), +, "::", +, str, ;, }, str, =]
[), {, str, =, getFunctionName, (, parent, ), +, "::", +, str, ;, }, str, =, str, ., replaceAll, (]
[str, =, getFunctionName, (, parent, ), +, "::", +, str, ;, }, str, =, str, ., replaceAll, (, "::this\\.", ,]
[(, parent, ), +, "::", +, str, ;, }, str, =, str, ., replaceAll, (, "::this\\.", ,, ".", ), ;]
[), +, "::", +, str, ;, }, str, =, str, ., replaceAll, (, "::this\\.", ,, ".", ), ;, str, =]
[), +, "::", +, str, ;, }, str, =, str, ., replaceAll, (, "::this\\.", ,, ".", ), ;, str, =]
[str, ;, }, str, =, str, ., replaceAll, (, "::this\\.", ,, ".", ), ;, str, =, str, ., replaceAll, (]
[}, str, =, str, ., replaceAll, (, "::this\\.", ,, ".", ), ;, str, =, str, ., replaceAll, (, "\\.\\.", ,]
[str, ., replaceAll, (, "::this\\.", ,, ".", ), ;, str, =, str, ., replaceAll, (, "\\.\\.", ,, ".", ), ;]
[replaceAll, (, "::this\\.", ,, ".", ), ;, str, =, str, ., replaceAll, (, "\\.\\.", ,, ".", ), ;, str, =]
[replaceAll, (, "::this\\.", ,, ".", ), ;, str, =, str, ., replaceAll, (, "\\.\\.", ,, ".", ), ;, str, =]
[".", ), ;, str, =, str, ., replaceAll, (, "\\.\\.", ,, ".", ), ;, str, =, str, ., replaceFirst, (]
[;, str, =, str, ., replaceAll, (, "\\.\\.", ,, ".", ), ;, str, =, str, ., replaceFirst, (, "^(<anonymous>::)*", ,]
[., replaceAll, (, "\\.\\.", ,, ".", ), ;, str, =, str, ., replaceFirst, (, "^(<anonymous>::)*", ,, "", ), ;, return]
["", ), ;, return, str, ;, }, private, static, class, FunctionRecord, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[final, Node, parent, ;, public, String, name, ;, FunctionRecord, (, int, id, ,, Node, parent, ,, String, name, ), {]
[final, Node, parent, ;, public, String, name, ;, FunctionRecord, (, int, id, ,, Node, parent, ,, String, name, ), {]
[public, String, name, ;, FunctionRecord, (, int, id, ,, Node, parent, ,, String, name, ), {, this, ., id, =]
[name, ;, FunctionRecord, (, int, id, ,, Node, parent, ,, String, name, ), {, this, ., id, =, id, ;]
[name, ;, FunctionRecord, (, int, id, ,, Node, parent, ,, String, name, ), {, this, ., id, =, id, ;]
[int, id, ,, Node, parent, ,, String, name, ), {, this, ., id, =, id, ;, this, ., parent, =]
[,, Node, parent, ,, String, name, ), {, this, ., id, =, id, ;, this, ., parent, =, parent, ;]
[,, Node, parent, ,, String, name, ), {, this, ., id, =, id, ;, this, ., parent, =, parent, ;]
[String, name, ), {, this, ., id, =, id, ;, this, ., parent, =, parent, ;, this, ., name, =]
[static, class, FunctionListExtractor, extends, AbstractPostOrderCallback, {, private, final, Map, <, Node, ,, FunctionRecord, >, functionMap, ;, private, int, nextId, =]
[>, functionMap, ;, private, int, nextId, =, 0, ;, FunctionListExtractor, (, Map, <, Node, ,, FunctionRecord, >, functionMap, ), {]
[>, functionMap, ;, private, int, nextId, =, 0, ;, FunctionListExtractor, (, Map, <, Node, ,, FunctionRecord, >, functionMap, ), {]
[int, nextId, =, 0, ;, FunctionListExtractor, (, Map, <, Node, ,, FunctionRecord, >, functionMap, ), {, this, ., functionMap, =]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isFunction, (, ), ), {, Node, functionNameNode, =]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isFunction, (, ), ), {, Node, functionNameNode, =]
[(, n, ., isFunction, (, ), ), {, Node, functionNameNode, =, n, ., getFirstChild, (, ), ;, String, functionName, =]
[(, n, ., isFunction, (, ), ), {, Node, functionNameNode, =, n, ., getFirstChild, (, ), ;, String, functionName, =]
[functionNameNode, =, n, ., getFirstChild, (, ), ;, String, functionName, =, functionNameNode, ., getString, (, ), ;, Node, enclosingFunction, =]
[functionNameNode, =, n, ., getFirstChild, (, ), ;, String, functionName, =, functionNameNode, ., getString, (, ), ;, Node, enclosingFunction, =]
[), ;, String, functionName, =, functionNameNode, ., getString, (, ), ;, Node, enclosingFunction, =, t, ., getEnclosingFunction, (, ), ;]
[), ;, String, functionName, =, functionNameNode, ., getString, (, ), ;, Node, enclosingFunction, =, t, ., getEnclosingFunction, (, ), ;]
[=, functionNameNode, ., getString, (, ), ;, Node, enclosingFunction, =, t, ., getEnclosingFunction, (, ), ;, functionMap, ., put, (]
[., getString, (, ), ;, Node, enclosingFunction, =, t, ., getEnclosingFunction, (, ), ;, functionMap, ., put, (, n, ,]
[), ;, Node, enclosingFunction, =, t, ., getEnclosingFunction, (, ), ;, functionMap, ., put, (, n, ,, new, FunctionRecord, (]
[Node, enclosingFunction, =, t, ., getEnclosingFunction, (, ), ;, functionMap, ., put, (, n, ,, new, FunctionRecord, (, nextId, ,]
[=, t, ., getEnclosingFunction, (, ), ;, functionMap, ., put, (, n, ,, new, FunctionRecord, (, nextId, ,, enclosingFunction, ,]
[(, ), ;, functionMap, ., put, (, n, ,, new, FunctionRecord, (, nextId, ,, enclosingFunction, ,, functionName, ), ), ;]
[(, ), ;, functionMap, ., put, (, n, ,, new, FunctionRecord, (, nextId, ,, enclosingFunction, ,, functionName, ), ), ;]
[++, ;, }, }, }, private, static, class, FunctionExpressionNamer, implements, AnonymousFunctionNamingCallback, ., FunctionNamer, {, private, static, final, char, DELIMITER, =]
[FunctionExpressionNamer, implements, AnonymousFunctionNamingCallback, ., FunctionNamer, {, private, static, final, char, DELIMITER, =, '.', ;, private, static, final, NodeNameExtractor, extractor, =]
[., FunctionNamer, {, private, static, final, char, DELIMITER, =, '.', ;, private, static, final, NodeNameExtractor, extractor, =, new, NodeNameExtractor, (]
[final, Map, <, Node, ,, FunctionRecord, >, functionMap, ;, FunctionExpressionNamer, (, Map, <, Node, ,, FunctionRecord, >, functionMap, ), {]
[final, Map, <, Node, ,, FunctionRecord, >, functionMap, ;, FunctionExpressionNamer, (, Map, <, Node, ,, FunctionRecord, >, functionMap, ), {]
[,, FunctionRecord, >, functionMap, ;, FunctionExpressionNamer, (, Map, <, Node, ,, FunctionRecord, >, functionMap, ), {, this, ., functionMap, =]
[{, this, ., functionMap, =, functionMap, ;, }, @, Override, public, final, String, getName, (, Node, node, ), {, return]
[{, this, ., functionMap, =, functionMap, ;, }, @, Override, public, final, String, getName, (, Node, node, ), {, return]
[=, functionMap, ;, }, @, Override, public, final, String, getName, (, Node, node, ), {, return, extractor, ., getName, (]
[), ;, }, @, Override, public, final, void, setFunctionName, (, String, name, ,, Node, fnNode, ), {, FunctionRecord, record, =]
[), ;, }, @, Override, public, final, void, setFunctionName, (, String, name, ,, Node, fnNode, ), {, FunctionRecord, record, =]
[Override, public, final, void, setFunctionName, (, String, name, ,, Node, fnNode, ), {, FunctionRecord, record, =, functionMap, ., get, (]
[setFunctionName, (, String, name, ,, Node, fnNode, ), {, FunctionRecord, record, =, functionMap, ., get, (, fnNode, ), ;, assert]
[(, String, name, ,, Node, fnNode, ), {, FunctionRecord, record, =, functionMap, ., get, (, fnNode, ), ;, assert, (]
[(, String, name, ,, Node, fnNode, ), {, FunctionRecord, record, =, functionMap, ., get, (, fnNode, ), ;, assert, (]
[name, ,, Node, fnNode, ), {, FunctionRecord, record, =, functionMap, ., get, (, fnNode, ), ;, assert, (, record, !=]
[), {, FunctionRecord, record, =, functionMap, ., get, (, fnNode, ), ;, assert, (, record, !=, null, ), ;, assert]
[{, FunctionRecord, record, =, functionMap, ., get, (, fnNode, ), ;, assert, (, record, !=, null, ), ;, assert, (]
[{, FunctionRecord, record, =, functionMap, ., get, (, fnNode, ), ;, assert, (, record, !=, null, ), ;, assert, (]
[{, FunctionRecord, record, =, functionMap, ., get, (, fnNode, ), ;, assert, (, record, !=, null, ), ;, assert, (]
[), ;, assert, (, record, !=, null, ), ;, assert, (, record, ., name, ., isEmpty, (, ), ), ;]
[), ;, assert, (, record, !=, null, ), ;, assert, (, record, ., name, ., isEmpty, (, ), ), ;]
[record, !=, null, ), ;, assert, (, record, ., name, ., isEmpty, (, ), ), ;, record, ., name, =]
[name, =, name, ;, }, @, Override, public, final, String, getCombinedName, (, String, lhs, ,, String, rhs, ), {, return]
[name, =, name, ;, }, @, Override, public, final, String, getCombinedName, (, String, lhs, ,, String, rhs, ), {, return]
[name, =, name, ;, }, @, Override, public, final, String, getCombinedName, (, String, lhs, ,, String, rhs, ), {, return]
[name, ;, }, @, Override, public, final, String, getCombinedName, (, String, lhs, ,, String, rhs, ), {, return, lhs, +]
[}, @, Override, public, final, String, getCombinedName, (, String, lhs, ,, String, rhs, ), {, return, lhs, +, DELIMITER, +]
