[commons, ., math3, ., util, ., MathUtils, ;, public, class, ProperFractionFormat, extends, FractionFormat, {, private, static, final, long, serialVersionUID, =]
[{, private, static, final, long, serialVersionUID, =, 760934726031766749L, ;, private, NumberFormat, wholeFormat, ;, public, ProperFractionFormat, (, ), {, this, (]
[(, ), {, this, (, getDefaultNumberFormat, (, ), ), ;, }, public, ProperFractionFormat, (, NumberFormat, format, ), {, this, (]
[{, this, (, getDefaultNumberFormat, (, ), ), ;, }, public, ProperFractionFormat, (, NumberFormat, format, ), {, this, (, format, ,]
[getDefaultNumberFormat, (, ), ), ;, }, public, ProperFractionFormat, (, NumberFormat, format, ), {, this, (, format, ,, (, NumberFormat, )]
[getDefaultNumberFormat, (, ), ), ;, }, public, ProperFractionFormat, (, NumberFormat, format, ), {, this, (, format, ,, (, NumberFormat, )]
[public, ProperFractionFormat, (, NumberFormat, format, ), {, this, (, format, ,, (, NumberFormat, ), format, ., clone, (, ), ,]
[NumberFormat, format, ), {, this, (, format, ,, (, NumberFormat, ), format, ., clone, (, ), ,, (, NumberFormat, )]
[NumberFormat, format, ), {, this, (, format, ,, (, NumberFormat, ), format, ., clone, (, ), ,, (, NumberFormat, )]
[(, ), ), ;, }, public, ProperFractionFormat, (, NumberFormat, wholeFormat, ,, NumberFormat, numeratorFormat, ,, NumberFormat, denominatorFormat, ), {, super, (]
[), ;, }, public, ProperFractionFormat, (, NumberFormat, wholeFormat, ,, NumberFormat, numeratorFormat, ,, NumberFormat, denominatorFormat, ), {, super, (, numeratorFormat, ,]
[public, ProperFractionFormat, (, NumberFormat, wholeFormat, ,, NumberFormat, numeratorFormat, ,, NumberFormat, denominatorFormat, ), {, super, (, numeratorFormat, ,, denominatorFormat, ), ;]
[(, NumberFormat, wholeFormat, ,, NumberFormat, numeratorFormat, ,, NumberFormat, denominatorFormat, ), {, super, (, numeratorFormat, ,, denominatorFormat, ), ;, setWholeFormat, (]
[wholeFormat, ), ;, }, @, Override, public, StringBuffer, format, (, Fraction, fraction, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {]
[wholeFormat, ), ;, }, @, Override, public, StringBuffer, format, (, Fraction, fraction, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {]
[@, Override, public, StringBuffer, format, (, Fraction, fraction, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, pos, ., setBeginIndex, (]
[StringBuffer, format, (, Fraction, fraction, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, pos, ., setBeginIndex, (, 0, ), ;]
[StringBuffer, format, (, Fraction, fraction, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, pos, ., setBeginIndex, (, 0, ), ;]
[fraction, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, pos, ., setBeginIndex, (, 0, ), ;, pos, ., setEndIndex, (]
[pos, ), {, pos, ., setBeginIndex, (, 0, ), ;, pos, ., setEndIndex, (, 0, ), ;, int, num, =]
[pos, ), {, pos, ., setBeginIndex, (, 0, ), ;, pos, ., setEndIndex, (, 0, ), ;, int, num, =]
[;, pos, ., setEndIndex, (, 0, ), ;, int, num, =, fraction, ., getNumerator, (, ), ;, int, den, =]
[;, pos, ., setEndIndex, (, 0, ), ;, int, num, =, fraction, ., getNumerator, (, ), ;, int, den, =]
[num, =, fraction, ., getNumerator, (, ), ;, int, den, =, fraction, ., getDenominator, (, ), ;, int, whole, =]
[num, =, fraction, ., getNumerator, (, ), ;, int, den, =, fraction, ., getDenominator, (, ), ;, int, whole, =]
[fraction, ., getNumerator, (, ), ;, int, den, =, fraction, ., getDenominator, (, ), ;, int, whole, =, num, /]
[getNumerator, (, ), ;, int, den, =, fraction, ., getDenominator, (, ), ;, int, whole, =, num, /, den, ;]
[), ;, int, den, =, fraction, ., getDenominator, (, ), ;, int, whole, =, num, /, den, ;, num, =]
[), ;, int, den, =, fraction, ., getDenominator, (, ), ;, int, whole, =, num, /, den, ;, num, =]
[int, den, =, fraction, ., getDenominator, (, ), ;, int, whole, =, num, /, den, ;, num, =, num, %]
[., getDenominator, (, ), ;, int, whole, =, num, /, den, ;, num, =, num, %, den, ;, if, (]
[., getDenominator, (, ), ;, int, whole, =, num, /, den, ;, num, =, num, %, den, ;, if, (]
[(, ), ;, int, whole, =, num, /, den, ;, num, =, num, %, den, ;, if, (, whole, !=]
[int, whole, =, num, /, den, ;, num, =, num, %, den, ;, if, (, whole, !=, 0, ), {]
[int, whole, =, num, /, den, ;, num, =, num, %, den, ;, if, (, whole, !=, 0, ), {]
[;, num, =, num, %, den, ;, if, (, whole, !=, 0, ), {, getWholeFormat, (, ), ., format, (]
[=, num, %, den, ;, if, (, whole, !=, 0, ), {, getWholeFormat, (, ), ., format, (, whole, ,]
[%, den, ;, if, (, whole, !=, 0, ), {, getWholeFormat, (, ), ., format, (, whole, ,, toAppendTo, ,]
[if, (, whole, !=, 0, ), {, getWholeFormat, (, ), ., format, (, whole, ,, toAppendTo, ,, pos, ), ;]
[if, (, whole, !=, 0, ), {, getWholeFormat, (, ), ., format, (, whole, ,, toAppendTo, ,, pos, ), ;]
[0, ), {, getWholeFormat, (, ), ., format, (, whole, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (]
[getWholeFormat, (, ), ., format, (, whole, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, ' ', ), ;]
[), ., format, (, whole, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, ' ', ), ;, num, =]
[), ., format, (, whole, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, ' ', ), ;, num, =]
[whole, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, ' ', ), ;, num, =, Math, ., abs, (]
[pos, ), ;, toAppendTo, ., append, (, ' ', ), ;, num, =, Math, ., abs, (, num, ), ;, }]
[pos, ), ;, toAppendTo, ., append, (, ' ', ), ;, num, =, Math, ., abs, (, num, ), ;, }]
[(, ' ', ), ;, num, =, Math, ., abs, (, num, ), ;, }, getNumeratorFormat, (, ), ., format, (]
[), ;, num, =, Math, ., abs, (, num, ), ;, }, getNumeratorFormat, (, ), ., format, (, num, ,]
[num, =, Math, ., abs, (, num, ), ;, }, getNumeratorFormat, (, ), ., format, (, num, ,, toAppendTo, ,]
[., abs, (, num, ), ;, }, getNumeratorFormat, (, ), ., format, (, num, ,, toAppendTo, ,, pos, ), ;]
[., abs, (, num, ), ;, }, getNumeratorFormat, (, ), ., format, (, num, ,, toAppendTo, ,, pos, ), ;]
[), ;, }, getNumeratorFormat, (, ), ., format, (, num, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (]
[getNumeratorFormat, (, ), ., format, (, num, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;]
[getNumeratorFormat, (, ), ., format, (, num, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;]
[num, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (]
[toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, den, ,]
[pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, den, ,, toAppendTo, ,]
[., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, den, ,, toAppendTo, ,, pos, ), ;, return]
[format, (, den, ,, toAppendTo, ,, pos, ), ;, return, toAppendTo, ;, }, public, NumberFormat, getWholeFormat, (, ), {, return]
[return, wholeFormat, ;, }, @, Override, public, Fraction, parse, (, String, source, ,, ParsePosition, pos, ), {, Fraction, ret, =]
[return, wholeFormat, ;, }, @, Override, public, Fraction, parse, (, String, source, ,, ParsePosition, pos, ), {, Fraction, ret, =]
[@, Override, public, Fraction, parse, (, String, source, ,, ParsePosition, pos, ), {, Fraction, ret, =, super, ., parse, (]
[public, Fraction, parse, (, String, source, ,, ParsePosition, pos, ), {, Fraction, ret, =, super, ., parse, (, source, ,]
[source, ,, ParsePosition, pos, ), {, Fraction, ret, =, super, ., parse, (, source, ,, pos, ), ;, if, (]
[source, ,, ParsePosition, pos, ), {, Fraction, ret, =, super, ., parse, (, source, ,, pos, ), ;, if, (]
[ParsePosition, pos, ), {, Fraction, ret, =, super, ., parse, (, source, ,, pos, ), ;, if, (, ret, !=]
[Fraction, ret, =, super, ., parse, (, source, ,, pos, ), ;, if, (, ret, !=, null, ), {, return]
[(, source, ,, pos, ), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, int, initialIndex, =]
[(, source, ,, pos, ), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, int, initialIndex, =]
[if, (, ret, !=, null, ), {, return, ret, ;, }, int, initialIndex, =, pos, ., getIndex, (, ), ;]
[ret, !=, null, ), {, return, ret, ;, }, int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (]
[null, ), {, return, ret, ;, }, int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,]
[}, int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, whole, =]
[}, int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, whole, =]
[getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, whole, =, getWholeFormat, (, ), ., parse, (]
[), ;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, whole, =, getWholeFormat, (, ), ., parse, (, source, ,]
[,, pos, ), ;, Number, whole, =, getWholeFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (]
[,, pos, ), ;, Number, whole, =, getWholeFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (]
[), ;, Number, whole, =, getWholeFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, whole, ==]
[whole, =, getWholeFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, whole, ==, null, ), {]
[whole, =, getWholeFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, whole, ==, null, ), {]
[), ., parse, (, source, ,, pos, ), ;, if, (, whole, ==, null, ), {, pos, ., setIndex, (]
[source, ,, pos, ), ;, if, (, whole, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return]
[), ;, if, (, whole, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }]
[if, (, whole, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (]
[whole, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,]
[., setIndex, (, initialIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, num, =]
[., setIndex, (, initialIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, num, =]
[return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, num, =, getNumeratorFormat, (, ), ., parse, (]
[;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, num, =, getNumeratorFormat, (, ), ., parse, (, source, ,]
[,, pos, ), ;, Number, num, =, getNumeratorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (]
[,, pos, ), ;, Number, num, =, getNumeratorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (]
[), ;, Number, num, =, getNumeratorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, num, ==]
[num, =, getNumeratorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, num, ==, null, ), {]
[num, =, getNumeratorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, num, ==, null, ), {]
[), ., parse, (, source, ,, pos, ), ;, if, (, num, ==, null, ), {, pos, ., setIndex, (]
[source, ,, pos, ), ;, if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return]
[if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (]
[if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (]
[if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (]
[{, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, num, ., intValue, (, ), <]
[setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, num, ., intValue, (, ), <, 0, ), {]
[setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, num, ., intValue, (, ), <, 0, ), {]
[;, return, null, ;, }, if, (, num, ., intValue, (, ), <, 0, ), {, pos, ., setIndex, (]
[}, if, (, num, ., intValue, (, ), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return]
[(, ), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, int, startIndex, =]
[(, ), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, int, startIndex, =]
[(, initialIndex, ), ;, return, null, ;, }, int, startIndex, =, pos, ., getIndex, (, ), ;, char, c, =]
[), ;, return, null, ;, }, int, startIndex, =, pos, ., getIndex, (, ), ;, char, c, =, parseNextCharacter, (]
[return, null, ;, }, int, startIndex, =, pos, ., getIndex, (, ), ;, char, c, =, parseNextCharacter, (, source, ,]
[startIndex, =, pos, ., getIndex, (, ), ;, char, c, =, parseNextCharacter, (, source, ,, pos, ), ;, switch, (]
[getIndex, (, ), ;, char, c, =, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, ), {, case]
[;, char, c, =, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, ), {, case, 0, :, return]
[=, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, ), {, case, 0, :, return, new, Fraction, (]
[=, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, ), {, case, 0, :, return, new, Fraction, (]
[), ;, switch, (, c, ), {, case, 0, :, return, new, Fraction, (, num, ., intValue, (, ), ,]
[c, ), {, case, 0, :, return, new, Fraction, (, num, ., intValue, (, ), ,, 1, ), ;, case]
[return, new, Fraction, (, num, ., intValue, (, ), ,, 1, ), ;, case, '/', :, break, ;, default, :]
[return, new, Fraction, (, num, ., intValue, (, ), ,, 1, ), ;, case, '/', :, break, ;, default, :]
[num, ., intValue, (, ), ,, 1, ), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (]
[(, ), ,, 1, ), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;]
[(, ), ,, 1, ), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;]
[), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (]
[:, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return]
[default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }]
[pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (]
[setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,]
[., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, den, =]
[., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, den, =]
[return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, den, =, getDenominatorFormat, (, ), ., parse, (]
[;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, den, =, getDenominatorFormat, (, ), ., parse, (, source, ,]
[,, pos, ), ;, Number, den, =, getDenominatorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (]
[,, pos, ), ;, Number, den, =, getDenominatorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (]
[), ;, Number, den, =, getDenominatorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, den, ==]
[den, =, getDenominatorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, den, ==, null, ), {]
[den, =, getDenominatorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, den, ==, null, ), {]
[), ., parse, (, source, ,, pos, ), ;, if, (, den, ==, null, ), {, pos, ., setIndex, (]
[source, ,, pos, ), ;, if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return]
[if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (]
[if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (]
[if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (]
[{, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, den, ., intValue, (, ), <]
[setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, den, ., intValue, (, ), <, 0, ), {]
[setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, den, ., intValue, (, ), <, 0, ), {]
[;, return, null, ;, }, if, (, den, ., intValue, (, ), <, 0, ), {, pos, ., setIndex, (]
[}, if, (, den, ., intValue, (, ), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return]
[(, ), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, int, w, =]
[(, ), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, int, w, =]
[(, initialIndex, ), ;, return, null, ;, }, int, w, =, whole, ., intValue, (, ), ;, int, n, =]
[(, initialIndex, ), ;, return, null, ;, }, int, w, =, whole, ., intValue, (, ), ;, int, n, =]
[w, =, whole, ., intValue, (, ), ;, int, n, =, num, ., intValue, (, ), ;, int, d, =]
[w, =, whole, ., intValue, (, ), ;, int, n, =, num, ., intValue, (, ), ;, int, d, =]
[;, int, n, =, num, ., intValue, (, ), ;, int, d, =, den, ., intValue, (, ), ;, return]
[=, num, ., intValue, (, ), ;, int, d, =, den, ., intValue, (, ), ;, return, new, Fraction, (]
[=, num, ., intValue, (, ), ;, int, d, =, den, ., intValue, (, ), ;, return, new, Fraction, (]
[num, ., intValue, (, ), ;, int, d, =, den, ., intValue, (, ), ;, return, new, Fraction, (, (]
[num, ., intValue, (, ), ;, int, d, =, den, ., intValue, (, ), ;, return, new, Fraction, (, (]
[., intValue, (, ), ;, int, d, =, den, ., intValue, (, ), ;, return, new, Fraction, (, (, (]
[., intValue, (, ), ;, int, d, =, den, ., intValue, (, ), ;, return, new, Fraction, (, (, (]
[., intValue, (, ), ;, int, d, =, den, ., intValue, (, ), ;, return, new, Fraction, (, (, (]
[;, int, d, =, den, ., intValue, (, ), ;, return, new, Fraction, (, (, (, Math, ., abs, (]
[=, den, ., intValue, (, ), ;, return, new, Fraction, (, (, (, Math, ., abs, (, w, ), *]
[intValue, (, ), ;, return, new, Fraction, (, (, (, Math, ., abs, (, w, ), *, d, ), +]
[;, return, new, Fraction, (, (, (, Math, ., abs, (, w, ), *, d, ), +, n, ), *]
[;, return, new, Fraction, (, (, (, Math, ., abs, (, w, ), *, d, ), +, n, ), *]
[(, (, (, Math, ., abs, (, w, ), *, d, ), +, n, ), *, MathUtils, ., copySign, (]
[(, Math, ., abs, (, w, ), *, d, ), +, n, ), *, MathUtils, ., copySign, (, 1, ,]
[abs, (, w, ), *, d, ), +, n, ), *, MathUtils, ., copySign, (, 1, ,, w, ), ,]
[(, 1, ,, w, ), ,, d, ), ;, }, public, void, setWholeFormat, (, NumberFormat, format, ), {, if, (]
[(, 1, ,, w, ), ,, d, ), ;, }, public, void, setWholeFormat, (, NumberFormat, format, ), {, if, (]
[,, w, ), ,, d, ), ;, }, public, void, setWholeFormat, (, NumberFormat, format, ), {, if, (, format, ==]
[d, ), ;, }, public, void, setWholeFormat, (, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw]
[}, public, void, setWholeFormat, (, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw, new, NullArgumentException, (]
[}, public, void, setWholeFormat, (, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw, new, NullArgumentException, (]
[format, ), {, if, (, format, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., WHOLE_FORMAT, ), ;, }]
[format, ), {, if, (, format, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., WHOLE_FORMAT, ), ;, }]
[(, format, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., WHOLE_FORMAT, ), ;, }, this, ., wholeFormat, =]
