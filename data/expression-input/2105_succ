[;, callable, =, call, ;, }, public, CallableBackgroundInitializer, (, final, Callable, <, T, >, call, ,, final, ExecutorService, exec, )]
[), ;, callable, =, call, ;, }, public, CallableBackgroundInitializer, (, final, Callable, <, T, >, call, ,, final, ExecutorService, exec]
[=, call, ;, }, public, CallableBackgroundInitializer, (, final, Callable, <, T, >, call, ,, final, ExecutorService, exec, ), {, super]
[;, }, public, CallableBackgroundInitializer, (, final, Callable, <, T, >, call, ,, final, ExecutorService, exec, ), {, super, (, exec]
[), ;, checkCallable, (, call, ), ;, callable, =, call, ;, }, @, Override, protected, T, initialize, (, ), throws]
[;, callable, =, call, ;, }, @, Override, protected, T, initialize, (, ), throws, Exception, {, return, callable, ., call]
[), ;, callable, =, call, ;, }, @, Override, protected, T, initialize, (, ), throws, Exception, {, return, callable, .]
[=, call, ;, }, @, Override, protected, T, initialize, (, ), throws, Exception, {, return, callable, ., call, (, )]
[;, }, @, Override, protected, T, initialize, (, ), throws, Exception, {, return, callable, ., call, (, ), ;, }]
[;, }, private, void, checkCallable, (, final, Callable, <, T, >, call, ), {, if, (, call, ==, null, )]
[., call, (, ), ;, }, private, void, checkCallable, (, final, Callable, <, T, >, call, ), {, if, (]
[), {, throw, new, IllegalArgumentException, (, "Callable must not be null!", ), ;, }, }, }]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Callable must not be null!", ), ;, }, }, }]
[), {, throw, new, IllegalArgumentException, (, "Callable must not be null!", ), ;, }, }, }]
[;, }, }, }]
[), ;, }, }, }]
