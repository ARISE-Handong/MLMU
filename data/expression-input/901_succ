[=, Lists, ., newArrayList, (, ), ;, }, final, void, registerListener, (, ChangeListener, listener, ), {, listeners, ., add, (]
[;, }, final, void, registerListener, (, ChangeListener, listener, ), {, listeners, ., add, (, listener, ), ;, }, final, void]
[., newArrayList, (, ), ;, }, final, void, registerListener, (, ChangeListener, listener, ), {, listeners, ., add, (, listener, )]
[;, }, final, void, unregisterListener, (, ChangeListener, listener, ), {, listeners, ., remove, (, listener, ), ;, }, private, void]
[., add, (, listener, ), ;, }, final, void, unregisterListener, (, ChangeListener, listener, ), {, listeners, ., remove, (, listener]
[), ;, }, final, void, unregisterListener, (, ChangeListener, listener, ), {, listeners, ., remove, (, listener, ), ;, }, private]
[;, }, private, void, notifyOfRemoval, (, Node, node, ), {, for, (, ChangeListener, listener, :, listeners, ), {, listener, .]
[., remove, (, listener, ), ;, }, private, void, notifyOfRemoval, (, Node, node, ), {, for, (, ChangeListener, listener, :]
[), ;, }, private, void, notifyOfRemoval, (, Node, node, ), {, for, (, ChangeListener, listener, :, listeners, ), {, listener]
[), {, listener, ., nodeRemoved, (, node, ), ;, }, }, final, void, removeChild, (, Node, parent, ,, Node, node]
[;, }, }, final, void, removeChild, (, Node, parent, ,, Node, node, ), {, parent, ., removeChild, (, node, )]
[., nodeRemoved, (, node, ), ;, }, }, final, void, removeChild, (, Node, parent, ,, Node, node, ), {, parent]
[), ;, }, }, final, void, removeChild, (, Node, parent, ,, Node, node, ), {, parent, ., removeChild, (, node]
[;, notifyOfRemoval, (, node, ), ;, }, final, void, replaceWith, (, Node, parent, ,, Node, node, ,, Node, replacement, )]
[., removeChild, (, node, ), ;, notifyOfRemoval, (, node, ), ;, }, final, void, replaceWith, (, Node, parent, ,, Node]
[), ;, notifyOfRemoval, (, node, ), ;, }, final, void, replaceWith, (, Node, parent, ,, Node, node, ,, Node, replacement]
[;, }, final, void, replaceWith, (, Node, parent, ,, Node, node, ,, Node, replacement, ), {, replaceWith, (, parent, ,]
[), ;, }, final, void, replaceWith, (, Node, parent, ,, Node, node, ,, Node, replacement, ), {, replaceWith, (, parent]
[;, }, final, void, replaceWith, (, Node, parent, ,, Node, node, ,, List, <, Node, >, replacements, ), {, Preconditions]
[,, node, ,, Lists, ., newArrayList, (, replacement, ), ), ;, }, final, void, replaceWith, (, Node, parent, ,, Node]
[,, Lists, ., newArrayList, (, replacement, ), ), ;, }, final, void, replaceWith, (, Node, parent, ,, Node, node, ,]
[), ;, }, final, void, replaceWith, (, Node, parent, ,, Node, node, ,, List, <, Node, >, replacements, ), {]
[., newArrayList, (, replacement, ), ), ;, }, final, void, replaceWith, (, Node, parent, ,, Node, node, ,, List, <]
[), ), ;, }, final, void, replaceWith, (, Node, parent, ,, Node, node, ,, List, <, Node, >, replacements, )]
[;, int, size, =, replacements, ., size, (, ), ;, if, (, (, size, ==, 1, ), &&, node, .]
[., checkNotNull, (, replacements, ,, "\"replacements\" is null.", ), ;, int, size, =, replacements, ., size, (, ), ;, if, (, (]
[,, "\"replacements\" is null.", ), ;, int, size, =, replacements, ., size, (, ), ;, if, (, (, size, ==, 1, )]
[), ;, int, size, =, replacements, ., size, (, ), ;, if, (, (, size, ==, 1, ), &&, node]
[;, if, (, (, size, ==, 1, ), &&, node, ., isEquivalentTo, (, replacements, ., get, (, 0, ), )]
[., size, (, ), ;, if, (, (, size, ==, 1, ), &&, node, ., isEquivalentTo, (, replacements, ., get]
[), {, return, ;, }, int, parentType, =, parent, ., getType, (, ), ;, Preconditions, ., checkState, (, size, ==]
[&&, node, ., isEquivalentTo, (, replacements, ., get, (, 0, ), ), ), {, return, ;, }, int, parentType, =]
[), &&, node, ., isEquivalentTo, (, replacements, ., get, (, 0, ), ), ), {, return, ;, }, int, parentType]
[==, 1, ), &&, node, ., isEquivalentTo, (, replacements, ., get, (, 0, ), ), ), {, return, ;, }]
[), &&, node, ., isEquivalentTo, (, replacements, ., get, (, 0, ), ), ), {, return, ;, }, int, parentType]
[), {, return, ;, }, int, parentType, =, parent, ., getType, (, ), ;, Preconditions, ., checkState, (, size, ==]
[., isEquivalentTo, (, replacements, ., get, (, 0, ), ), ), {, return, ;, }, int, parentType, =, parent, .]
[), ), {, return, ;, }, int, parentType, =, parent, ., getType, (, ), ;, Preconditions, ., checkState, (, size]
[., get, (, 0, ), ), ), {, return, ;, }, int, parentType, =, parent, ., getType, (, ), ;]
[), ), ), {, return, ;, }, int, parentType, =, parent, ., getType, (, ), ;, Preconditions, ., checkState, (]
[;, Preconditions, ., checkState, (, size, ==, 1, ||, parentType, ==, Token, ., BLOCK, ||, parentType, ==, Token, ., SCRIPT]
[., getType, (, ), ;, Preconditions, ., checkState, (, size, ==, 1, ||, parentType, ==, Token, ., BLOCK, ||, parentType]
[;, if, (, parentType, ==, Token, ., LABEL, &&, size, !=, 1, ), {, Node, block, =, IR, ., block]
[., checkState, (, size, ==, 1, ||, parentType, ==, Token, ., BLOCK, ||, parentType, ==, Token, ., SCRIPT, ||, parentType]
[), ;, if, (, parentType, ==, Token, ., LABEL, &&, size, !=, 1, ), {, Node, block, =, IR, .]
[||, parentType, ==, Token, ., LABEL, ), ;, if, (, parentType, ==, Token, ., LABEL, &&, size, !=, 1, )]
[||, parentType, ==, Token, ., SCRIPT, ||, parentType, ==, Token, ., LABEL, ), ;, if, (, parentType, ==, Token, .]
[||, parentType, ==, Token, ., BLOCK, ||, parentType, ==, Token, ., SCRIPT, ||, parentType, ==, Token, ., LABEL, ), ;]
[==, 1, ||, parentType, ==, Token, ., BLOCK, ||, parentType, ==, Token, ., SCRIPT, ||, parentType, ==, Token, ., LABEL]
[||, parentType, ==, Token, ., BLOCK, ||, parentType, ==, Token, ., SCRIPT, ||, parentType, ==, Token, ., LABEL, ), ;]
[||, parentType, ==, Token, ., SCRIPT, ||, parentType, ==, Token, ., LABEL, ), ;, if, (, parentType, ==, Token, .]
[==, Token, ., BLOCK, ||, parentType, ==, Token, ., SCRIPT, ||, parentType, ==, Token, ., LABEL, ), ;, if, (]
[||, parentType, ==, Token, ., SCRIPT, ||, parentType, ==, Token, ., LABEL, ), ;, if, (, parentType, ==, Token, .]
[., BLOCK, ||, parentType, ==, Token, ., SCRIPT, ||, parentType, ==, Token, ., LABEL, ), ;, if, (, parentType, ==]
[||, parentType, ==, Token, ., LABEL, ), ;, if, (, parentType, ==, Token, ., LABEL, &&, size, !=, 1, )]
[==, Token, ., SCRIPT, ||, parentType, ==, Token, ., LABEL, ), ;, if, (, parentType, ==, Token, ., LABEL, &&]
[||, parentType, ==, Token, ., LABEL, ), ;, if, (, parentType, ==, Token, ., LABEL, &&, size, !=, 1, )]
[., SCRIPT, ||, parentType, ==, Token, ., LABEL, ), ;, if, (, parentType, ==, Token, ., LABEL, &&, size, !=]
[), ;, if, (, parentType, ==, Token, ., LABEL, &&, size, !=, 1, ), {, Node, block, =, IR, .]
[==, Token, ., LABEL, ), ;, if, (, parentType, ==, Token, ., LABEL, &&, size, !=, 1, ), {, Node]
[), ;, if, (, parentType, ==, Token, ., LABEL, &&, size, !=, 1, ), {, Node, block, =, IR, .]
[., LABEL, ), ;, if, (, parentType, ==, Token, ., LABEL, &&, size, !=, 1, ), {, Node, block, =]
[), {, Node, block, =, IR, ., block, (, ), ;, for, (, Node, newChild, :, replacements, ), {, newChild]
[&&, size, !=, 1, ), {, Node, block, =, IR, ., block, (, ), ;, for, (, Node, newChild, :]
[==, Token, ., LABEL, &&, size, !=, 1, ), {, Node, block, =, IR, ., block, (, ), ;, for]
[&&, size, !=, 1, ), {, Node, block, =, IR, ., block, (, ), ;, for, (, Node, newChild, :]
[., LABEL, &&, size, !=, 1, ), {, Node, block, =, IR, ., block, (, ), ;, for, (, Node]
[), {, Node, block, =, IR, ., block, (, ), ;, for, (, Node, newChild, :, replacements, ), {, newChild]
[!=, 1, ), {, Node, block, =, IR, ., block, (, ), ;, for, (, Node, newChild, :, replacements, )]
[), {, Node, block, =, IR, ., block, (, ), ;, for, (, Node, newChild, :, replacements, ), {, newChild]
[;, for, (, Node, newChild, :, replacements, ), {, newChild, ., copyInformationFrom, (, node, ), ;, Node, oldParent, =, newChild]
[., block, (, ), ;, for, (, Node, newChild, :, replacements, ), {, newChild, ., copyInformationFrom, (, node, ), ;]
[), {, newChild, ., copyInformationFrom, (, node, ), ;, Node, oldParent, =, newChild, ., getParent, (, ), ;, block, .]
[;, Node, oldParent, =, newChild, ., getParent, (, ), ;, block, ., addChildToBack, (, newChild, ), ;, }, parent, .]
[., copyInformationFrom, (, node, ), ;, Node, oldParent, =, newChild, ., getParent, (, ), ;, block, ., addChildToBack, (, newChild]
[), ;, Node, oldParent, =, newChild, ., getParent, (, ), ;, block, ., addChildToBack, (, newChild, ), ;, }, parent]
[;, block, ., addChildToBack, (, newChild, ), ;, }, parent, ., replaceChild, (, node, ,, block, ), ;, }, else]
[., getParent, (, ), ;, block, ., addChildToBack, (, newChild, ), ;, }, parent, ., replaceChild, (, node, ,, block]
[;, }, parent, ., replaceChild, (, node, ,, block, ), ;, }, else, {, for, (, Node, newChild, :, replacements]
[., addChildToBack, (, newChild, ), ;, }, parent, ., replaceChild, (, node, ,, block, ), ;, }, else, {, for]
[), ;, }, parent, ., replaceChild, (, node, ,, block, ), ;, }, else, {, for, (, Node, newChild, :]
[;, }, else, {, for, (, Node, newChild, :, replacements, ), {, newChild, ., copyInformationFrom, (, node, ), ;, Node]
[., replaceChild, (, node, ,, block, ), ;, }, else, {, for, (, Node, newChild, :, replacements, ), {, newChild]
[,, block, ), ;, }, else, {, for, (, Node, newChild, :, replacements, ), {, newChild, ., copyInformationFrom, (, node]
[), ;, }, else, {, for, (, Node, newChild, :, replacements, ), {, newChild, ., copyInformationFrom, (, node, ), ;]
[), {, newChild, ., copyInformationFrom, (, node, ), ;, Node, oldParent, =, newChild, ., getParent, (, ), ;, parent, .]
[;, Node, oldParent, =, newChild, ., getParent, (, ), ;, parent, ., addChildBefore, (, newChild, ,, node, ), ;, }]
[., copyInformationFrom, (, node, ), ;, Node, oldParent, =, newChild, ., getParent, (, ), ;, parent, ., addChildBefore, (, newChild]
[), ;, Node, oldParent, =, newChild, ., getParent, (, ), ;, parent, ., addChildBefore, (, newChild, ,, node, ), ;]
[;, parent, ., addChildBefore, (, newChild, ,, node, ), ;, }, parent, ., removeChild, (, node, ), ;, }, notifyOfRemoval]
[., getParent, (, ), ;, parent, ., addChildBefore, (, newChild, ,, node, ), ;, }, parent, ., removeChild, (, node]
[;, }, parent, ., removeChild, (, node, ), ;, }, notifyOfRemoval, (, node, ), ;, }, }]
[., addChildBefore, (, newChild, ,, node, ), ;, }, parent, ., removeChild, (, node, ), ;, }, notifyOfRemoval, (, node]
[,, node, ), ;, }, parent, ., removeChild, (, node, ), ;, }, notifyOfRemoval, (, node, ), ;, }, }]
[), ;, }, parent, ., removeChild, (, node, ), ;, }, notifyOfRemoval, (, node, ), ;, }, }]
[;, }, notifyOfRemoval, (, node, ), ;, }, }]
[., removeChild, (, node, ), ;, }, notifyOfRemoval, (, node, ), ;, }, }]
[), ;, }, notifyOfRemoval, (, node, ), ;, }, }]
[;, }, }]
[), ;, }, }]
