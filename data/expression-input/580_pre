[reflect, ., Field, ;, import, static, java, ., lang, ., annotation, ., ElementType, ., FIELD, ;, public, class, MockitoAnnotations, {]
[;, import, static, java, ., lang, ., annotation, ., ElementType, ., FIELD, ;, public, class, MockitoAnnotations, {, @, Target, (]
[import, static, java, ., lang, ., annotation, ., ElementType, ., FIELD, ;, public, class, MockitoAnnotations, {, @, Target, (, {]
[., lang, ., annotation, ., ElementType, ., FIELD, ;, public, class, MockitoAnnotations, {, @, Target, (, {, FIELD, }, )]
[annotation, ., ElementType, ., FIELD, ;, public, class, MockitoAnnotations, {, @, Target, (, {, FIELD, }, ), @, Retention, (]
[annotation, ., ElementType, ., FIELD, ;, public, class, MockitoAnnotations, {, @, Target, (, {, FIELD, }, ), @, Retention, (]
[), @, Deprecated, public, @, interface, Mock, {, }, public, static, void, initMocks, (, Object, testClass, ), {, if, (]
[), @, Deprecated, public, @, interface, Mock, {, }, public, static, void, initMocks, (, Object, testClass, ), {, if, (]
[Deprecated, public, @, interface, Mock, {, }, public, static, void, initMocks, (, Object, testClass, ), {, if, (, testClass, ==]
[Mock, {, }, public, static, void, initMocks, (, Object, testClass, ), {, if, (, testClass, ==, null, ), {, throw]
[public, static, void, initMocks, (, Object, testClass, ), {, if, (, testClass, ==, null, ), {, throw, new, MockitoException, (]
[), {, if, (, testClass, ==, null, ), {, throw, new, MockitoException, (, "testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class", ), ;, }, AnnotationEngine, annotationEngine, =]
[), {, if, (, testClass, ==, null, ), {, throw, new, MockitoException, (, "testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class", ), ;, }, AnnotationEngine, annotationEngine, =]
[;, }, AnnotationEngine, annotationEngine, =, new, GlobalConfiguration, (, ), ., getAnnotationEngine, (, ), ;, Class, <, ?, >, clazz, =]
[;, }, AnnotationEngine, annotationEngine, =, new, GlobalConfiguration, (, ), ., getAnnotationEngine, (, ), ;, Class, <, ?, >, clazz, =]
[), ., getAnnotationEngine, (, ), ;, Class, <, ?, >, clazz, =, testClass, ., getClass, (, ), ;, if, (]
[), ., getAnnotationEngine, (, ), ;, Class, <, ?, >, clazz, =, testClass, ., getClass, (, ), ;, if, (]
[), ., getAnnotationEngine, (, ), ;, Class, <, ?, >, clazz, =, testClass, ., getClass, (, ), ;, if, (]
[Class, <, ?, >, clazz, =, testClass, ., getClass, (, ), ;, if, (, annotationEngine, ., getClass, (, ), !=]
[Class, <, ?, >, clazz, =, testClass, ., getClass, (, ), ;, if, (, annotationEngine, ., getClass, (, ), !=]
[Class, <, ?, >, clazz, =, testClass, ., getClass, (, ), ;, if, (, annotationEngine, ., getClass, (, ), !=]
[getClass, (, ), !=, new, DefaultMockitoConfiguration, (, ), ., getAnnotationEngine, (, ), ., getClass, (, ), ), {, while, (]
[getClass, (, ), !=, new, DefaultMockitoConfiguration, (, ), ., getAnnotationEngine, (, ), ., getClass, (, ), ), {, while, (]
[), !=, new, DefaultMockitoConfiguration, (, ), ., getAnnotationEngine, (, ), ., getClass, (, ), ), {, while, (, clazz, !=]
[), ., getAnnotationEngine, (, ), ., getClass, (, ), ), {, while, (, clazz, !=, Object, ., class, ), {]
[getAnnotationEngine, (, ), ., getClass, (, ), ), {, while, (, clazz, !=, Object, ., class, ), {, scanDeprecatedWay, (]
[), ., getClass, (, ), ), {, while, (, clazz, !=, Object, ., class, ), {, scanDeprecatedWay, (, annotationEngine, ,]
[getClass, (, ), ), {, while, (, clazz, !=, Object, ., class, ), {, scanDeprecatedWay, (, annotationEngine, ,, testClass, ,]
[), {, while, (, clazz, !=, Object, ., class, ), {, scanDeprecatedWay, (, annotationEngine, ,, testClass, ,, clazz, ), ;]
[while, (, clazz, !=, Object, ., class, ), {, scanDeprecatedWay, (, annotationEngine, ,, testClass, ,, clazz, ), ;, clazz, =]
[while, (, clazz, !=, Object, ., class, ), {, scanDeprecatedWay, (, annotationEngine, ,, testClass, ,, clazz, ), ;, clazz, =]
[{, scanDeprecatedWay, (, annotationEngine, ,, testClass, ,, clazz, ), ;, clazz, =, clazz, ., getSuperclass, (, ), ;, }, }]
[{, scanDeprecatedWay, (, annotationEngine, ,, testClass, ,, clazz, ), ;, clazz, =, clazz, ., getSuperclass, (, ), ;, }, }]
[,, testClass, ,, clazz, ), ;, clazz, =, clazz, ., getSuperclass, (, ), ;, }, }, annotationEngine, ., process, (]
[,, testClass, ,, clazz, ), ;, clazz, =, clazz, ., getSuperclass, (, ), ;, }, }, annotationEngine, ., process, (]
[clazz, =, clazz, ., getSuperclass, (, ), ;, }, }, annotationEngine, ., process, (, testClass, ., getClass, (, ), ,]
[scanDeprecatedWay, (, AnnotationEngine, annotationEngine, ,, Object, testClass, ,, Class, <, ?, >, clazz, ), {, Field, [, ], fields, =]
[scanDeprecatedWay, (, AnnotationEngine, annotationEngine, ,, Object, testClass, ,, Class, <, ?, >, clazz, ), {, Field, [, ], fields, =]
[>, clazz, ), {, Field, [, ], fields, =, clazz, ., getDeclaredFields, (, ), ;, for, (, Field, field, :]
[{, Field, [, ], fields, =, clazz, ., getDeclaredFields, (, ), ;, for, (, Field, field, :, fields, ), {]
[[, ], fields, =, clazz, ., getDeclaredFields, (, ), ;, for, (, Field, field, :, fields, ), {, processAnnotationDeprecatedWay, (]
[fields, =, clazz, ., getDeclaredFields, (, ), ;, for, (, Field, field, :, fields, ), {, processAnnotationDeprecatedWay, (, annotationEngine, ,]
[clazz, ., getDeclaredFields, (, ), ;, for, (, Field, field, :, fields, ), {, processAnnotationDeprecatedWay, (, annotationEngine, ,, testClass, ,]
[;, for, (, Field, field, :, fields, ), {, processAnnotationDeprecatedWay, (, annotationEngine, ,, testClass, ,, field, ), ;, }, }]
[Field, field, :, fields, ), {, processAnnotationDeprecatedWay, (, annotationEngine, ,, testClass, ,, field, ), ;, }, }, @, SuppressWarnings, (]
[(, "deprecation", ), static, void, processAnnotationDeprecatedWay, (, AnnotationEngine, annotationEngine, ,, Object, testClass, ,, Field, field, ), {, boolean, alreadyAssigned, =]
[AnnotationEngine, annotationEngine, ,, Object, testClass, ,, Field, field, ), {, boolean, alreadyAssigned, =, false, ;, for, (, Annotation, annotation, :]
[AnnotationEngine, annotationEngine, ,, Object, testClass, ,, Field, field, ), {, boolean, alreadyAssigned, =, false, ;, for, (, Annotation, annotation, :]
[boolean, alreadyAssigned, =, false, ;, for, (, Annotation, annotation, :, field, ., getAnnotations, (, ), ), {, Object, mock, =]
[boolean, alreadyAssigned, =, false, ;, for, (, Annotation, annotation, :, field, ., getAnnotations, (, ), ), {, Object, mock, =]
[;, for, (, Annotation, annotation, :, field, ., getAnnotations, (, ), ), {, Object, mock, =, annotationEngine, ., createMockFor, (]
[(, Annotation, annotation, :, field, ., getAnnotations, (, ), ), {, Object, mock, =, annotationEngine, ., createMockFor, (, annotation, ,]
[., getAnnotations, (, ), ), {, Object, mock, =, annotationEngine, ., createMockFor, (, annotation, ,, field, ), ;, if, (]
[., getAnnotations, (, ), ), {, Object, mock, =, annotationEngine, ., createMockFor, (, annotation, ,, field, ), ;, if, (]
[(, ), ), {, Object, mock, =, annotationEngine, ., createMockFor, (, annotation, ,, field, ), ;, if, (, mock, !=]
[{, Object, mock, =, annotationEngine, ., createMockFor, (, annotation, ,, field, ), ;, if, (, mock, !=, null, ), {]
[mock, =, annotationEngine, ., createMockFor, (, annotation, ,, field, ), ;, if, (, mock, !=, null, ), {, throwIfAlreadyAssigned, (]
[annotationEngine, ., createMockFor, (, annotation, ,, field, ), ;, if, (, mock, !=, null, ), {, throwIfAlreadyAssigned, (, field, ,]
[(, annotation, ,, field, ), ;, if, (, mock, !=, null, ), {, throwIfAlreadyAssigned, (, field, ,, alreadyAssigned, ), ;]
[,, field, ), ;, if, (, mock, !=, null, ), {, throwIfAlreadyAssigned, (, field, ,, alreadyAssigned, ), ;, alreadyAssigned, =]
[if, (, mock, !=, null, ), {, throwIfAlreadyAssigned, (, field, ,, alreadyAssigned, ), ;, alreadyAssigned, =, true, ;, try, {]
[if, (, mock, !=, null, ), {, throwIfAlreadyAssigned, (, field, ,, alreadyAssigned, ), ;, alreadyAssigned, =, true, ;, try, {]
[!=, null, ), {, throwIfAlreadyAssigned, (, field, ,, alreadyAssigned, ), ;, alreadyAssigned, =, true, ;, try, {, new, FieldSetter, (]
[), {, throwIfAlreadyAssigned, (, field, ,, alreadyAssigned, ), ;, alreadyAssigned, =, true, ;, try, {, new, FieldSetter, (, testClass, ,]
[,, alreadyAssigned, ), ;, alreadyAssigned, =, true, ;, try, {, new, FieldSetter, (, testClass, ,, field, ), ., set, (]
[FieldSetter, (, testClass, ,, field, ), ., set, (, mock, ), ;, }, catch, (, Exception, e, ), {, throw]
[,, field, ), ., set, (, mock, ), ;, }, catch, (, Exception, e, ), {, throw, new, MockitoException, (]
[,, field, ), ., set, (, mock, ), ;, }, catch, (, Exception, e, ), {, throw, new, MockitoException, (]
[,, field, ), ., set, (, mock, ), ;, }, catch, (, Exception, e, ), {, throw, new, MockitoException, (]
[,, field, ), ., set, (, mock, ), ;, }, catch, (, Exception, e, ), {, throw, new, MockitoException, (]
[), ., set, (, mock, ), ;, }, catch, (, Exception, e, ), {, throw, new, MockitoException, (, "Problems setting field ", +]
[), ., set, (, mock, ), ;, }, catch, (, Exception, e, ), {, throw, new, MockitoException, (, "Problems setting field ", +]
[;, }, catch, (, Exception, e, ), {, throw, new, MockitoException, (, "Problems setting field ", +, field, ., getName, (, ), +]
[catch, (, Exception, e, ), {, throw, new, MockitoException, (, "Problems setting field ", +, field, ., getName, (, ), +, " annotated with ", +]
[Exception, e, ), {, throw, new, MockitoException, (, "Problems setting field ", +, field, ., getName, (, ), +, " annotated with ", +, annotation, ,]
[e, ), ;, }, }, }, }, static, void, throwIfAlreadyAssigned, (, Field, field, ,, boolean, alreadyAssigned, ), {, if, (]
[}, }, }, }, static, void, throwIfAlreadyAssigned, (, Field, field, ,, boolean, alreadyAssigned, ), {, if, (, alreadyAssigned, ), {]
[}, }, }, }, static, void, throwIfAlreadyAssigned, (, Field, field, ,, boolean, alreadyAssigned, ), {, if, (, alreadyAssigned, ), {]
[(, Field, field, ,, boolean, alreadyAssigned, ), {, if, (, alreadyAssigned, ), {, new, Reporter, (, ), ., moreThanOneAnnotationNotAllowed, (]
[(, Field, field, ,, boolean, alreadyAssigned, ), {, if, (, alreadyAssigned, ), {, new, Reporter, (, ), ., moreThanOneAnnotationNotAllowed, (]
