[;, private, double, s, ;, public, TrapezoidIntegrator, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, int, minimalIterationCount, ,]
[,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, TRAPEZOID_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount]
[,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, TRAPEZOID_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, TRAPEZOID_MAX_ITERATIONS_COUNT]
[,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, TRAPEZOID_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, TRAPEZOID_MAX_ITERATIONS_COUNT, ,, false]
[), ;, if, (, maximalIterationCount, >, TRAPEZOID_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, TRAPEZOID_MAX_ITERATIONS_COUNT, ,, false, ), ;]
[), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, TRAPEZOID_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, TrapezoidIntegrator, (, final, int]
[>, TRAPEZOID_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, TRAPEZOID_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, TrapezoidIntegrator, (]
[), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, TRAPEZOID_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, TrapezoidIntegrator, (, final, int]
[;, }, }, public, TrapezoidIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException]
[,, TRAPEZOID_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, TrapezoidIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws]
[,, false, ), ;, }, }, public, TrapezoidIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,]
[), ;, }, }, public, TrapezoidIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,]
[,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, TRAPEZOID_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, TRAPEZOID_MAX_ITERATIONS_COUNT, ,, false]
[), ;, if, (, maximalIterationCount, >, TRAPEZOID_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, TRAPEZOID_MAX_ITERATIONS_COUNT, ,, false, ), ;]
[), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, TRAPEZOID_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, TrapezoidIntegrator, (, ), {]
[>, TRAPEZOID_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, TRAPEZOID_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, TrapezoidIntegrator, (]
[), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, TRAPEZOID_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, TrapezoidIntegrator, (, ), {]
[;, }, }, public, TrapezoidIntegrator, (, ), {, super, (, DEFAULT_MIN_ITERATIONS_COUNT, ,, TRAPEZOID_MAX_ITERATIONS_COUNT, ), ;, }, double, stage, (, final]
[,, TRAPEZOID_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, TrapezoidIntegrator, (, ), {, super, (, DEFAULT_MIN_ITERATIONS_COUNT, ,, TRAPEZOID_MAX_ITERATIONS_COUNT, ), ;]
[,, false, ), ;, }, }, public, TrapezoidIntegrator, (, ), {, super, (, DEFAULT_MIN_ITERATIONS_COUNT, ,, TRAPEZOID_MAX_ITERATIONS_COUNT, ), ;, }, double]
[), ;, }, }, public, TrapezoidIntegrator, (, ), {, super, (, DEFAULT_MIN_ITERATIONS_COUNT, ,, TRAPEZOID_MAX_ITERATIONS_COUNT, ), ;, }, double, stage, (]
[,, TRAPEZOID_MAX_ITERATIONS_COUNT, ), ;, }, double, stage, (, final, BaseAbstractUnivariateIntegrator, baseIntegrator, ,, final, int, n, ), throws, TooManyEvaluationsException, {, if]
[), ;, }, double, stage, (, final, BaseAbstractUnivariateIntegrator, baseIntegrator, ,, final, int, n, ), throws, TooManyEvaluationsException, {, if, (, n]
[), {, final, double, max, =, baseIntegrator, ., getMax, (, ), ;, final, double, min, =, baseIntegrator, ., getMin, (]
[==, 0, ), {, final, double, max, =, baseIntegrator, ., getMax, (, ), ;, final, double, min, =, baseIntegrator, .]
[), {, final, double, max, =, baseIntegrator, ., getMax, (, ), ;, final, double, min, =, baseIntegrator, ., getMin, (]
[;, final, double, min, =, baseIntegrator, ., getMin, (, ), ;, s, =, 0.5, *, (, max, -, min, )]
[., getMax, (, ), ;, final, double, min, =, baseIntegrator, ., getMin, (, ), ;, s, =, 0.5, *, (]
[;, s, =, 0.5, *, (, max, -, min, ), *, (, baseIntegrator, ., computeObjectiveValue, (, min, ), +, baseIntegrator]
[., getMin, (, ), ;, s, =, 0.5, *, (, max, -, min, ), *, (, baseIntegrator, ., computeObjectiveValue, (]
[=, 0.5, *, (, max, -, min, ), *, (, baseIntegrator, ., computeObjectiveValue, (, min, ), +, baseIntegrator, ., computeObjectiveValue]
[;, return, s, ;, }, else, {, final, long, np, =, 1L, <<, (, n, -, 1, ), ;, double]
[*, (, baseIntegrator, ., computeObjectiveValue, (, min, ), +, baseIntegrator, ., computeObjectiveValue, (, max, ), ), ;, return, s, ;]
[*, (, max, -, min, ), *, (, baseIntegrator, ., computeObjectiveValue, (, min, ), +, baseIntegrator, ., computeObjectiveValue, (, max]
[*, (, baseIntegrator, ., computeObjectiveValue, (, min, ), +, baseIntegrator, ., computeObjectiveValue, (, max, ), ), ;, return, s, ;]
[), *, (, baseIntegrator, ., computeObjectiveValue, (, min, ), +, baseIntegrator, ., computeObjectiveValue, (, max, ), ), ;, return, s]
[-, min, ), *, (, baseIntegrator, ., computeObjectiveValue, (, min, ), +, baseIntegrator, ., computeObjectiveValue, (, max, ), ), ;]
[), *, (, baseIntegrator, ., computeObjectiveValue, (, min, ), +, baseIntegrator, ., computeObjectiveValue, (, max, ), ), ;, return, s]
[;, return, s, ;, }, else, {, final, long, np, =, 1L, <<, (, n, -, 1, ), ;, double]
[), ;, return, s, ;, }, else, {, final, long, np, =, 1L, <<, (, n, -, 1, ), ;]
[+, baseIntegrator, ., computeObjectiveValue, (, max, ), ), ;, return, s, ;, }, else, {, final, long, np, =, 1L]
[., computeObjectiveValue, (, min, ), +, baseIntegrator, ., computeObjectiveValue, (, max, ), ), ;, return, s, ;, }, else, {]
[), +, baseIntegrator, ., computeObjectiveValue, (, max, ), ), ;, return, s, ;, }, else, {, final, long, np, =]
[), ;, return, s, ;, }, else, {, final, long, np, =, 1L, <<, (, n, -, 1, ), ;]
[., computeObjectiveValue, (, max, ), ), ;, return, s, ;, }, else, {, final, long, np, =, 1L, <<, (]
[), ), ;, return, s, ;, }, else, {, final, long, np, =, 1L, <<, (, n, -, 1, )]
[;, }, else, {, final, long, np, =, 1L, <<, (, n, -, 1, ), ;, double, sum, =, 0]
[;, double, sum, =, 0, ;, final, double, max, =, baseIntegrator, ., getMax, (, ), ;, final, double, min, =]
[<<, (, n, -, 1, ), ;, double, sum, =, 0, ;, final, double, max, =, baseIntegrator, ., getMax, (]
[;, double, sum, =, 0, ;, final, double, max, =, baseIntegrator, ., getMax, (, ), ;, final, double, min, =]
[), ;, double, sum, =, 0, ;, final, double, max, =, baseIntegrator, ., getMax, (, ), ;, final, double, min]
[-, 1, ), ;, double, sum, =, 0, ;, final, double, max, =, baseIntegrator, ., getMax, (, ), ;, final]
[), ;, double, sum, =, 0, ;, final, double, max, =, baseIntegrator, ., getMax, (, ), ;, final, double, min]
[;, final, double, max, =, baseIntegrator, ., getMax, (, ), ;, final, double, min, =, baseIntegrator, ., getMin, (, )]
[;, final, double, min, =, baseIntegrator, ., getMin, (, ), ;, final, double, spacing, =, (, max, -, min, )]
[., getMax, (, ), ;, final, double, min, =, baseIntegrator, ., getMin, (, ), ;, final, double, spacing, =, (]
[;, final, double, spacing, =, (, max, -, min, ), /, np, ;, double, x, =, min, +, 0.5, *]
[., getMin, (, ), ;, final, double, spacing, =, (, max, -, min, ), /, np, ;, double, x, =]
[;, double, x, =, min, +, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;, i, <, np]
[/, np, ;, double, x, =, min, +, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;, i]
[), /, np, ;, double, x, =, min, +, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;]
[-, min, ), /, np, ;, double, x, =, min, +, 0.5, *, spacing, ;, for, (, long, i, =]
[), /, np, ;, double, x, =, min, +, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;]
[;, double, x, =, min, +, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;, i, <, np]
[;, for, (, long, i, =, 0, ;, i, <, np, ;, i, ++, ), {, sum, +=, baseIntegrator, .]
[+, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;, i, <, np, ;, i, ++, ), {]
[;, for, (, long, i, =, 0, ;, i, <, np, ;, i, ++, ), {, sum, +=, baseIntegrator, .]
[*, spacing, ;, for, (, long, i, =, 0, ;, i, <, np, ;, i, ++, ), {, sum, +=]
[;, for, (, long, i, =, 0, ;, i, <, np, ;, i, ++, ), {, sum, +=, baseIntegrator, .]
[;, i, <, np, ;, i, ++, ), {, sum, +=, baseIntegrator, ., computeObjectiveValue, (, x, ), ;, x, +=]
[;, i, ++, ), {, sum, +=, baseIntegrator, ., computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, s]
[<, np, ;, i, ++, ), {, sum, +=, baseIntegrator, ., computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;]
[;, i, ++, ), {, sum, +=, baseIntegrator, ., computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, s]
[), {, sum, +=, baseIntegrator, ., computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, s, =, 0.5, *]
[++, ), {, sum, +=, baseIntegrator, ., computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, s, =, 0.5]
[+=, baseIntegrator, ., computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, s, =, 0.5, *, (, s, +]
[;, x, +=, spacing, ;, }, s, =, 0.5, *, (, s, +, sum, *, spacing, ), ;, return, s]
[., computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, s, =, 0.5, *, (, s, +, sum, *]
[), ;, x, +=, spacing, ;, }, s, =, 0.5, *, (, s, +, sum, *, spacing, ), ;, return]
[+=, spacing, ;, }, s, =, 0.5, *, (, s, +, sum, *, spacing, ), ;, return, s, ;, }]
[;, }, s, =, 0.5, *, (, s, +, sum, *, spacing, ), ;, return, s, ;, }, }, @]
[=, 0.5, *, (, s, +, sum, *, spacing, ), ;, return, s, ;, }, }, @, Override, protected, double]
[;, return, s, ;, }, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {]
[*, (, s, +, sum, *, spacing, ), ;, return, s, ;, }, }, @, Override, protected, double, doIntegrate, (]
[;, return, s, ;, }, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {]
[), ;, return, s, ;, }, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException]
[+, sum, *, spacing, ), ;, return, s, ;, }, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException]
[), ;, return, s, ;, }, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException]
[*, spacing, ), ;, return, s, ;, }, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException]
[), ;, return, s, ;, }, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException]
[;, }, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, double, oldt, =]
[;, iterations, ., incrementCount, (, ), ;, while, (, true, ), {, final, int, i, =, iterations, ., getCount, (]
[,, 0, ), ;, iterations, ., incrementCount, (, ), ;, while, (, true, ), {, final, int, i, =, iterations]
[), ;, iterations, ., incrementCount, (, ), ;, while, (, true, ), {, final, int, i, =, iterations, ., getCount]
[;, while, (, true, ), {, final, int, i, =, iterations, ., getCount, (, ), ;, final, double, t, =]
[., incrementCount, (, ), ;, while, (, true, ), {, final, int, i, =, iterations, ., getCount, (, ), ;]
[), {, final, int, i, =, iterations, ., getCount, (, ), ;, final, double, t, =, stage, (, this, ,]
[;, final, double, t, =, stage, (, this, ,, i, ), ;, if, (, i, >=, getMinimalIterationCount, (, ), )]
[., getCount, (, ), ;, final, double, t, =, stage, (, this, ,, i, ), ;, if, (, i, >=]
[;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (, t, -]
[,, i, ), ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs]
[), ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (, t]
[), {, final, double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy]
[>=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final]
[), {, final, double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy]
[;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +, FastMath, ., abs]
[., abs, (, t, -, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs]
[), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +, FastMath, .]
[-, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +]
[), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +, FastMath, .]
[;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, t]
[*, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {]
[*, (, FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if]
[*, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {]
[), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), )]
[+, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (]
[., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (, (, delta]
[), +, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||]
[), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), )]
[., abs, (, t, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=]
[), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), )]
[;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, t]
[), {, return, t, ;, }, }, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }, }, }]
[||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, t, ;, }, }, oldt, =, t, ;, iterations]
[), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, t, ;, }, }, oldt, =, t, ;]
[<=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, t, ;, }, }, oldt, =]
[), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, t, ;, }, }, oldt, =, t, ;]
[), {, return, t, ;, }, }, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }, }, }]
[), ), {, return, t, ;, }, }, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }, }]
[<=, getAbsoluteAccuracy, (, ), ), ), {, return, t, ;, }, }, oldt, =, t, ;, iterations, ., incrementCount, (]
[), ), {, return, t, ;, }, }, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }, }]
[;, }, }, oldt, =, t, ;, iterations, ., incrementCount, (, ), ;, }, }, }]
[=, t, ;, iterations, ., incrementCount, (, ), ;, }, }, }]
[;, iterations, ., incrementCount, (, ), ;, }, }, }]
[;, }, }, }]
[., incrementCount, (, ), ;, }, }, }]
