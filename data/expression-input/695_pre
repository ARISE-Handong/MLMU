[class, GatherRawExports, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, static, final, String, GLOBAL_THIS_NAMES, [, ], =]
[GatherRawExports, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, static, final, String, GLOBAL_THIS_NAMES, [, ], =, {]
[AbstractPostOrderCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, static, final, String, GLOBAL_THIS_NAMES, [, ], =, {, "window", ,]
[final, String, GLOBAL_THIS_NAMES, [, ], =, {, "window", ,, "top", }, ;, private, final, Set, <, String, >, exportedVariables, =]
[final, String, GLOBAL_THIS_NAMES, [, ], =, {, "window", ,, "top", }, ;, private, final, Set, <, String, >, exportedVariables, =]
[private, final, Set, <, String, >, exportedVariables, =, Sets, ., newHashSet, (, ), ;, GatherRawExports, (, AbstractCompiler, compiler, ), {]
[private, final, Set, <, String, >, exportedVariables, =, Sets, ., newHashSet, (, ), ;, GatherRawExports, (, AbstractCompiler, compiler, ), {]
[String, >, exportedVariables, =, Sets, ., newHashSet, (, ), ;, GatherRawExports, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[,, Node, root, ), {, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;]
[,, Node, root, ), {, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;]
[{, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (]
[., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[(, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[}, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, sibling, =]
[}, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, sibling, =]
[t, ,, Node, n, ,, Node, parent, ), {, Node, sibling, =, n, ., getNext, (, ), ;, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, Node, sibling, =, n, ., getNext, (, ), ;, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, Node, sibling, =, n, ., getNext, (, ), ;, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, Node, sibling, =, n, ., getNext, (, ), ;, if, (]
[Node, n, ,, Node, parent, ), {, Node, sibling, =, n, ., getNext, (, ), ;, if, (, sibling, !=]
[,, Node, parent, ), {, Node, sibling, =, n, ., getNext, (, ), ;, if, (, sibling, !=, null, &&]
[,, Node, parent, ), {, Node, sibling, =, n, ., getNext, (, ), ;, if, (, sibling, !=, null, &&]
[sibling, =, n, ., getNext, (, ), ;, if, (, sibling, !=, null, &&, sibling, ., isString, (, ), &&]
[sibling, =, n, ., getNext, (, ), ;, if, (, sibling, !=, null, &&, sibling, ., isString, (, ), &&]
[getNext, (, ), ;, if, (, sibling, !=, null, &&, sibling, ., isString, (, ), &&, NodeUtil, ., isGet, (]
[sibling, !=, null, &&, sibling, ., isString, (, ), &&, NodeUtil, ., isGet, (, parent, ), ), {, if, (]
[null, &&, sibling, ., isString, (, ), &&, NodeUtil, ., isGet, (, parent, ), ), {, if, (, isGlobalThisObject, (]
[sibling, ., isString, (, ), &&, NodeUtil, ., isGet, (, parent, ), ), {, if, (, isGlobalThisObject, (, t, ,]
[), &&, NodeUtil, ., isGet, (, parent, ), ), {, if, (, isGlobalThisObject, (, t, ,, n, ), ), {]
[), &&, NodeUtil, ., isGet, (, parent, ), ), {, if, (, isGlobalThisObject, (, t, ,, n, ), ), {]
[isGet, (, parent, ), ), {, if, (, isGlobalThisObject, (, t, ,, n, ), ), {, exportedVariables, ., add, (]
[isGet, (, parent, ), ), {, if, (, isGlobalThisObject, (, t, ,, n, ), ), {, exportedVariables, ., add, (]
[(, ), ), ;, }, }, }, private, boolean, isGlobalThisObject, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[(, ), ), ;, }, }, }, private, boolean, isGlobalThisObject, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[boolean, isGlobalThisObject, (, NodeTraversal, t, ,, Node, n, ), {, if, (, n, ., isThis, (, ), ), {, return]
[boolean, isGlobalThisObject, (, NodeTraversal, t, ,, Node, n, ), {, if, (, n, ., isThis, (, ), ), {, return]
[if, (, n, ., isThis, (, ), ), {, return, t, ., inGlobalScope, (, ), ;, }, else, if, (]
[if, (, n, ., isThis, (, ), ), {, return, t, ., inGlobalScope, (, ), ;, }, else, if, (]
[t, ., inGlobalScope, (, ), ;, }, else, if, (, n, ., isName, (, ), ), {, String, varName, =]
[t, ., inGlobalScope, (, ), ;, }, else, if, (, n, ., isName, (, ), ), {, String, varName, =]
[(, n, ., isName, (, ), ), {, String, varName, =, n, ., getString, (, ), ;, int, items, =]
[(, n, ., isName, (, ), ), {, String, varName, =, n, ., getString, (, ), ;, int, items, =]
[varName, =, n, ., getString, (, ), ;, int, items, =, GLOBAL_THIS_NAMES, ., length, ;, for, (, int, i, =]
[n, ., getString, (, ), ;, int, items, =, GLOBAL_THIS_NAMES, ., length, ;, for, (, int, i, =, 0, ;]
[n, ., getString, (, ), ;, int, items, =, GLOBAL_THIS_NAMES, ., length, ;, for, (, int, i, =, 0, ;]
[getString, (, ), ;, int, items, =, GLOBAL_THIS_NAMES, ., length, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, int, items, =, GLOBAL_THIS_NAMES, ., length, ;, for, (, int, i, =, 0, ;, i, <, items, ;]
[), ;, int, items, =, GLOBAL_THIS_NAMES, ., length, ;, for, (, int, i, =, 0, ;, i, <, items, ;]
[., length, ;, for, (, int, i, =, 0, ;, i, <, items, ;, i, ++, ), {, if, (]
[., length, ;, for, (, int, i, =, 0, ;, i, <, items, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, items, ;, i, ++, ), {, if, (, varName, ., equals, (]
[(, int, i, =, 0, ;, i, <, items, ;, i, ++, ), {, if, (, varName, ., equals, (]
[i, =, 0, ;, i, <, items, ;, i, ++, ), {, if, (, varName, ., equals, (, GLOBAL_THIS_NAMES, []
[items, ;, i, ++, ), {, if, (, varName, ., equals, (, GLOBAL_THIS_NAMES, [, i, ], ), ), {, return]
[if, (, varName, ., equals, (, GLOBAL_THIS_NAMES, [, i, ], ), ), {, return, true, ;, }, }, }, return]
[return, true, ;, }, }, }, return, false, ;, }, public, Set, <, String, >, getExportedVariableNames, (, ), {, return]
