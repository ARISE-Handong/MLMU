[;, private, final, transient, AbstractCompiler, compiler, ;, private, final, Map, <, Node, ,, FunctionRecord, >, functionMap, =, Maps, ., newLinkedHashMap]
[;, private, final, transient, FunctionListExtractor, functionListExtractor, ;, FunctionNames, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this]
[., newLinkedHashMap, (, ), ;, private, final, transient, FunctionListExtractor, functionListExtractor, ;, FunctionNames, (, AbstractCompiler, compiler, ), {, this, ., compiler]
[=, compiler, ;, this, ., functionListExtractor, =, new, FunctionListExtractor, (, functionMap, ), ;, }, @, Override, public, void, process, (]
[., compiler, =, compiler, ;, this, ., functionListExtractor, =, new, FunctionListExtractor, (, functionMap, ), ;, }, @, Override, public, void]
[;, this, ., functionListExtractor, =, new, FunctionListExtractor, (, functionMap, ), ;, }, @, Override, public, void, process, (, Node, externs]
[=, new, FunctionListExtractor, (, functionMap, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[., functionListExtractor, =, new, FunctionListExtractor, (, functionMap, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[;, FunctionExpressionNamer, namer, =, new, FunctionExpressionNamer, (, functionMap, ), ;, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (, namer, ), ;, NodeTraversal]
[., traverse, (, compiler, ,, root, ,, functionListExtractor, ), ;, FunctionExpressionNamer, namer, =, new, FunctionExpressionNamer, (, functionMap, ), ;, AnonymousFunctionNamingCallback]
[,, root, ,, functionListExtractor, ), ;, FunctionExpressionNamer, namer, =, new, FunctionExpressionNamer, (, functionMap, ), ;, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback]
[,, functionListExtractor, ), ;, FunctionExpressionNamer, namer, =, new, FunctionExpressionNamer, (, functionMap, ), ;, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (, namer]
[), ;, FunctionExpressionNamer, namer, =, new, FunctionExpressionNamer, (, functionMap, ), ;, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (, namer, ), ;]
[;, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (, namer, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, )]
[), ;, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (, namer, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, ), ;, }, public, Iterable, <, Node, >, getFunctionNodeList, (]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, ), ;, }, public, Iterable, <, Node, >, getFunctionNodeList]
[;, }, public, Iterable, <, Node, >, getFunctionNodeList, (, ), {, return, functionMap, ., keySet, (, ), ;, }, public]
[., traverse, (, compiler, ,, root, ,, namingCallback, ), ;, }, public, Iterable, <, Node, >, getFunctionNodeList, (, ), {]
[,, root, ,, namingCallback, ), ;, }, public, Iterable, <, Node, >, getFunctionNodeList, (, ), {, return, functionMap, ., keySet]
[,, namingCallback, ), ;, }, public, Iterable, <, Node, >, getFunctionNodeList, (, ), {, return, functionMap, ., keySet, (, )]
[), ;, }, public, Iterable, <, Node, >, getFunctionNodeList, (, ), {, return, functionMap, ., keySet, (, ), ;, }]
[;, }, public, int, getFunctionId, (, Node, f, ), {, FunctionRecord, record, =, functionMap, ., get, (, f, ), ;]
[., keySet, (, ), ;, }, public, int, getFunctionId, (, Node, f, ), {, FunctionRecord, record, =, functionMap, ., get]
[;, if, (, record, !=, null, ), {, return, record, ., id, ;, }, else, {, return, -, 1, ;]
[., get, (, f, ), ;, if, (, record, !=, null, ), {, return, record, ., id, ;, }, else]
[), ;, if, (, record, !=, null, ), {, return, record, ., id, ;, }, else, {, return, -, 1]
[), {, return, record, ., id, ;, }, else, {, return, -, 1, ;, }, }, public, String, getFunctionName, (]
[!=, null, ), {, return, record, ., id, ;, }, else, {, return, -, 1, ;, }, }, public, String]
[), {, return, record, ., id, ;, }, else, {, return, -, 1, ;, }, }, public, String, getFunctionName, (]
[;, }, else, {, return, -, 1, ;, }, }, public, String, getFunctionName, (, Node, f, ), {, FunctionRecord, record]
[., id, ;, }, else, {, return, -, 1, ;, }, }, public, String, getFunctionName, (, Node, f, ), {]
[;, }, }, public, String, getFunctionName, (, Node, f, ), {, FunctionRecord, record, =, functionMap, ., get, (, f, )]
[;, }, }, public, String, getFunctionName, (, Node, f, ), {, FunctionRecord, record, =, functionMap, ., get, (, f, )]
[;, if, (, record, ==, null, ), {, return, null, ;, }, String, str, =, record, ., name, ;, if]
[., get, (, f, ), ;, if, (, record, ==, null, ), {, return, null, ;, }, String, str, =]
[), ;, if, (, record, ==, null, ), {, return, null, ;, }, String, str, =, record, ., name, ;]
[), {, return, null, ;, }, String, str, =, record, ., name, ;, if, (, str, ., isEmpty, (, )]
[==, null, ), {, return, null, ;, }, String, str, =, record, ., name, ;, if, (, str, ., isEmpty]
[), {, return, null, ;, }, String, str, =, record, ., name, ;, if, (, str, ., isEmpty, (, )]
[;, }, String, str, =, record, ., name, ;, if, (, str, ., isEmpty, (, ), ), {, str, =]
[;, if, (, str, ., isEmpty, (, ), ), {, str, =, "<anonymous>", ;, }, Node, parent, =, record, .]
[., name, ;, if, (, str, ., isEmpty, (, ), ), {, str, =, "<anonymous>", ;, }, Node, parent, =]
[), {, str, =, "<anonymous>", ;, }, Node, parent, =, record, ., parent, ;, if, (, parent, !=, null, )]
[., isEmpty, (, ), ), {, str, =, "<anonymous>", ;, }, Node, parent, =, record, ., parent, ;, if, (]
[=, "<anonymous>", ;, }, Node, parent, =, record, ., parent, ;, if, (, parent, !=, null, ), {, str, =]
[;, }, Node, parent, =, record, ., parent, ;, if, (, parent, !=, null, ), {, str, =, getFunctionName, (]
[;, if, (, parent, !=, null, ), {, str, =, getFunctionName, (, parent, ), +, "::", +, str, ;, }]
[., parent, ;, if, (, parent, !=, null, ), {, str, =, getFunctionName, (, parent, ), +, "::", +, str]
[), {, str, =, getFunctionName, (, parent, ), +, "::", +, str, ;, }, str, =, str, ., replaceAll, (]
[!=, null, ), {, str, =, getFunctionName, (, parent, ), +, "::", +, str, ;, }, str, =, str, .]
[), {, str, =, getFunctionName, (, parent, ), +, "::", +, str, ;, }, str, =, str, ., replaceAll, (]
[=, getFunctionName, (, parent, ), +, "::", +, str, ;, }, str, =, str, ., replaceAll, (, "::this\\.", ,, "."]
[;, }, str, =, str, ., replaceAll, (, "::this\\.", ,, ".", ), ;, str, =, str, ., replaceAll, (, "\\.\\."]
[+, str, ;, }, str, =, str, ., replaceAll, (, "::this\\.", ,, ".", ), ;, str, =, str, ., replaceAll]
[+, "::", +, str, ;, }, str, =, str, ., replaceAll, (, "::this\\.", ,, ".", ), ;, str, =, str]
[), +, "::", +, str, ;, }, str, =, str, ., replaceAll, (, "::this\\.", ,, ".", ), ;, str, =]
[+, str, ;, }, str, =, str, ., replaceAll, (, "::this\\.", ,, ".", ), ;, str, =, str, ., replaceAll]
[;, }, str, =, str, ., replaceAll, (, "::this\\.", ,, ".", ), ;, str, =, str, ., replaceAll, (, "\\.\\."]
[=, str, ., replaceAll, (, "::this\\.", ,, ".", ), ;, str, =, str, ., replaceAll, (, "\\.\\.", ,, ".", )]
[;, str, =, str, ., replaceAll, (, "\\.\\.", ,, ".", ), ;, str, =, str, ., replaceFirst, (, "^(<anonymous>::)*", ,]
[., replaceAll, (, "::this\\.", ,, ".", ), ;, str, =, str, ., replaceAll, (, "\\.\\.", ,, ".", ), ;, str]
[,, ".", ), ;, str, =, str, ., replaceAll, (, "\\.\\.", ,, ".", ), ;, str, =, str, ., replaceFirst]
[), ;, str, =, str, ., replaceAll, (, "\\.\\.", ,, ".", ), ;, str, =, str, ., replaceFirst, (, "^(<anonymous>::)*"]
[=, str, ., replaceAll, (, "\\.\\.", ,, ".", ), ;, str, =, str, ., replaceFirst, (, "^(<anonymous>::)*", ,, "", )]
[;, str, =, str, ., replaceFirst, (, "^(<anonymous>::)*", ,, "", ), ;, return, str, ;, }, private, static, class, FunctionRecord]
[., replaceAll, (, "\\.\\.", ,, ".", ), ;, str, =, str, ., replaceFirst, (, "^(<anonymous>::)*", ,, "", ), ;, return]
[,, ".", ), ;, str, =, str, ., replaceFirst, (, "^(<anonymous>::)*", ,, "", ), ;, return, str, ;, }, private]
[), ;, str, =, str, ., replaceFirst, (, "^(<anonymous>::)*", ,, "", ), ;, return, str, ;, }, private, static, class]
[=, str, ., replaceFirst, (, "^(<anonymous>::)*", ,, "", ), ;, return, str, ;, }, private, static, class, FunctionRecord, implements, Serializable]
[;, return, str, ;, }, private, static, class, FunctionRecord, implements, Serializable, {, private, static, final, long, serialVersionUID, =, 1L, ;]
[., replaceFirst, (, "^(<anonymous>::)*", ,, "", ), ;, return, str, ;, }, private, static, class, FunctionRecord, implements, Serializable, {, private]
[,, "", ), ;, return, str, ;, }, private, static, class, FunctionRecord, implements, Serializable, {, private, static, final, long, serialVersionUID]
[), ;, return, str, ;, }, private, static, class, FunctionRecord, implements, Serializable, {, private, static, final, long, serialVersionUID, =, 1L]
[;, }, private, static, class, FunctionRecord, implements, Serializable, {, private, static, final, long, serialVersionUID, =, 1L, ;, public, final, int]
[;, public, final, int, id, ;, public, final, Node, parent, ;, public, String, name, ;, FunctionRecord, (, int, id, ,]
[=, id, ;, this, ., parent, =, parent, ;, this, ., name, =, name, ;, }, }, private, static, class]
[., id, =, id, ;, this, ., parent, =, parent, ;, this, ., name, =, name, ;, }, }, private]
[;, this, ., parent, =, parent, ;, this, ., name, =, name, ;, }, }, private, static, class, FunctionListExtractor, extends]
[=, parent, ;, this, ., name, =, name, ;, }, }, private, static, class, FunctionListExtractor, extends, AbstractPostOrderCallback, {, private, final]
[., parent, =, parent, ;, this, ., name, =, name, ;, }, }, private, static, class, FunctionListExtractor, extends, AbstractPostOrderCallback, {]
[;, this, ., name, =, name, ;, }, }, private, static, class, FunctionListExtractor, extends, AbstractPostOrderCallback, {, private, final, Map, <]
[=, name, ;, }, }, private, static, class, FunctionListExtractor, extends, AbstractPostOrderCallback, {, private, final, Map, <, Node, ,, FunctionRecord, >]
[., name, =, name, ;, }, }, private, static, class, FunctionListExtractor, extends, AbstractPostOrderCallback, {, private, final, Map, <, Node, ,]
[;, }, }, private, static, class, FunctionListExtractor, extends, AbstractPostOrderCallback, {, private, final, Map, <, Node, ,, FunctionRecord, >, functionMap, ;]
[;, FunctionListExtractor, (, Map, <, Node, ,, FunctionRecord, >, functionMap, ), {, this, ., functionMap, =, functionMap, ;, }, @]
[=, functionMap, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., functionMap, =, functionMap, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, Node, functionNameNode, =, n, ., getFirstChild, (, ), ;, String, functionName, =, functionNameNode, ., getString, (, ), ;]
[., isFunction, (, ), ), {, Node, functionNameNode, =, n, ., getFirstChild, (, ), ;, String, functionName, =, functionNameNode, .]
[;, String, functionName, =, functionNameNode, ., getString, (, ), ;, Node, enclosingFunction, =, t, ., getEnclosingFunction, (, ), ;, functionMap]
[., getFirstChild, (, ), ;, String, functionName, =, functionNameNode, ., getString, (, ), ;, Node, enclosingFunction, =, t, ., getEnclosingFunction]
[;, Node, enclosingFunction, =, t, ., getEnclosingFunction, (, ), ;, functionMap, ., put, (, n, ,, new, FunctionRecord, (, nextId]
[., getString, (, ), ;, Node, enclosingFunction, =, t, ., getEnclosingFunction, (, ), ;, functionMap, ., put, (, n, ,]
[;, functionMap, ., put, (, n, ,, new, FunctionRecord, (, nextId, ,, enclosingFunction, ,, functionName, ), ), ;, nextId, ++]
[., getEnclosingFunction, (, ), ;, functionMap, ., put, (, n, ,, new, FunctionRecord, (, nextId, ,, enclosingFunction, ,, functionName, )]
[;, nextId, ++, ;, }, }, }, private, static, class, FunctionExpressionNamer, implements, AnonymousFunctionNamingCallback, ., FunctionNamer, {, private, static, final, char]
[., put, (, n, ,, new, FunctionRecord, (, nextId, ,, enclosingFunction, ,, functionName, ), ), ;, nextId, ++, ;, }]
[,, new, FunctionRecord, (, nextId, ,, enclosingFunction, ,, functionName, ), ), ;, nextId, ++, ;, }, }, }, private, static]
[), ;, nextId, ++, ;, }, }, }, private, static, class, FunctionExpressionNamer, implements, AnonymousFunctionNamingCallback, ., FunctionNamer, {, private, static, final]
[,, enclosingFunction, ,, functionName, ), ), ;, nextId, ++, ;, }, }, }, private, static, class, FunctionExpressionNamer, implements, AnonymousFunctionNamingCallback, .]
[,, functionName, ), ), ;, nextId, ++, ;, }, }, }, private, static, class, FunctionExpressionNamer, implements, AnonymousFunctionNamingCallback, ., FunctionNamer, {]
[), ), ;, nextId, ++, ;, }, }, }, private, static, class, FunctionExpressionNamer, implements, AnonymousFunctionNamingCallback, ., FunctionNamer, {, private, static]
[;, }, }, }, private, static, class, FunctionExpressionNamer, implements, AnonymousFunctionNamingCallback, ., FunctionNamer, {, private, static, final, char, DELIMITER, =, '.']
[++, ;, }, }, }, private, static, class, FunctionExpressionNamer, implements, AnonymousFunctionNamingCallback, ., FunctionNamer, {, private, static, final, char, DELIMITER, =]
[;, private, static, final, NodeNameExtractor, extractor, =, new, NodeNameExtractor, (, DELIMITER, ), ;, private, final, Map, <, Node, ,, FunctionRecord]
[;, private, final, Map, <, Node, ,, FunctionRecord, >, functionMap, ;, FunctionExpressionNamer, (, Map, <, Node, ,, FunctionRecord, >, functionMap]
[), ;, private, final, Map, <, Node, ,, FunctionRecord, >, functionMap, ;, FunctionExpressionNamer, (, Map, <, Node, ,, FunctionRecord, >]
[=, functionMap, ;, }, @, Override, public, final, String, getName, (, Node, node, ), {, return, extractor, ., getName, (]
[., functionMap, =, functionMap, ;, }, @, Override, public, final, String, getName, (, Node, node, ), {, return, extractor, .]
[;, }, @, Override, public, final, String, getName, (, Node, node, ), {, return, extractor, ., getName, (, node, )]
[;, }, @, Override, public, final, void, setFunctionName, (, String, name, ,, Node, fnNode, ), {, FunctionRecord, record, =, functionMap]
[., getName, (, node, ), ;, }, @, Override, public, final, void, setFunctionName, (, String, name, ,, Node, fnNode, )]
[), ;, }, @, Override, public, final, void, setFunctionName, (, String, name, ,, Node, fnNode, ), {, FunctionRecord, record, =]
[;, assert, (, record, !=, null, ), ;, assert, (, record, ., name, ., isEmpty, (, ), ), ;, record]
[., get, (, fnNode, ), ;, assert, (, record, !=, null, ), ;, assert, (, record, ., name, ., isEmpty]
[), ;, assert, (, record, !=, null, ), ;, assert, (, record, ., name, ., isEmpty, (, ), ), ;]
[;, assert, (, record, ., name, ., isEmpty, (, ), ), ;, record, ., name, =, name, ;, }, @]
[), ;, assert, (, record, ., name, ., isEmpty, (, ), ), ;, record, ., name, =, name, ;, }]
[!=, null, ), ;, assert, (, record, ., name, ., isEmpty, (, ), ), ;, record, ., name, =, name]
[), ;, assert, (, record, ., name, ., isEmpty, (, ), ), ;, record, ., name, =, name, ;, }]
[;, record, ., name, =, name, ;, }, @, Override, public, final, String, getCombinedName, (, String, lhs, ,, String, rhs]
[), ;, record, ., name, =, name, ;, }, @, Override, public, final, String, getCombinedName, (, String, lhs, ,, String]
[., isEmpty, (, ), ), ;, record, ., name, =, name, ;, }, @, Override, public, final, String, getCombinedName, (]
[., name, ., isEmpty, (, ), ), ;, record, ., name, =, name, ;, }, @, Override, public, final, String]
[=, name, ;, }, @, Override, public, final, String, getCombinedName, (, String, lhs, ,, String, rhs, ), {, return, lhs]
[., name, =, name, ;, }, @, Override, public, final, String, getCombinedName, (, String, lhs, ,, String, rhs, ), {]
[;, }, @, Override, public, final, String, getCombinedName, (, String, lhs, ,, String, rhs, ), {, return, lhs, +, DELIMITER]
[;, }, }, }]
[+, rhs, ;, }, }, }]
[+, DELIMITER, +, rhs, ;, }, }, }]
[+, rhs, ;, }, }, }]
[;, }, }, }]
