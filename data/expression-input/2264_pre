[commons, ., math3, ., exception, ., NullArgumentException, ;, public, class, ProperBigFractionFormat, extends, BigFractionFormat, {, private, static, final, long, serialVersionUID, =]
[., math3, ., exception, ., NullArgumentException, ;, public, class, ProperBigFractionFormat, extends, BigFractionFormat, {, private, static, final, long, serialVersionUID, =, -]
[private, static, final, long, serialVersionUID, =, -, 6337346779577272307L, ;, private, NumberFormat, wholeFormat, ;, public, ProperBigFractionFormat, (, ), {, this, (]
[), {, this, (, getDefaultNumberFormat, (, ), ), ;, }, public, ProperBigFractionFormat, (, final, NumberFormat, format, ), {, this, (]
[this, (, getDefaultNumberFormat, (, ), ), ;, }, public, ProperBigFractionFormat, (, final, NumberFormat, format, ), {, this, (, format, ,]
[(, ), ), ;, }, public, ProperBigFractionFormat, (, final, NumberFormat, format, ), {, this, (, format, ,, (, NumberFormat, )]
[(, ), ), ;, }, public, ProperBigFractionFormat, (, final, NumberFormat, format, ), {, this, (, format, ,, (, NumberFormat, )]
[ProperBigFractionFormat, (, final, NumberFormat, format, ), {, this, (, format, ,, (, NumberFormat, ), format, ., clone, (, ), ,]
[NumberFormat, format, ), {, this, (, format, ,, (, NumberFormat, ), format, ., clone, (, ), ,, (, NumberFormat, )]
[NumberFormat, format, ), {, this, (, format, ,, (, NumberFormat, ), format, ., clone, (, ), ,, (, NumberFormat, )]
[;, }, public, ProperBigFractionFormat, (, final, NumberFormat, wholeFormat, ,, final, NumberFormat, numeratorFormat, ,, final, NumberFormat, denominatorFormat, ), {, super, (]
[public, ProperBigFractionFormat, (, final, NumberFormat, wholeFormat, ,, final, NumberFormat, numeratorFormat, ,, final, NumberFormat, denominatorFormat, ), {, super, (, numeratorFormat, ,]
[final, NumberFormat, wholeFormat, ,, final, NumberFormat, numeratorFormat, ,, final, NumberFormat, denominatorFormat, ), {, super, (, numeratorFormat, ,, denominatorFormat, ), ;]
[wholeFormat, ,, final, NumberFormat, numeratorFormat, ,, final, NumberFormat, denominatorFormat, ), {, super, (, numeratorFormat, ,, denominatorFormat, ), ;, setWholeFormat, (]
[}, @, Override, public, StringBuffer, format, (, final, BigFraction, fraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {]
[}, @, Override, public, StringBuffer, format, (, final, BigFraction, fraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {]
[StringBuffer, format, (, final, BigFraction, fraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {, pos, ., setBeginIndex, (]
[final, BigFraction, fraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {, pos, ., setBeginIndex, (, 0, ), ;]
[final, BigFraction, fraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {, pos, ., setBeginIndex, (, 0, ), ;]
[final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {, pos, ., setBeginIndex, (, 0, ), ;, pos, ., setEndIndex, (]
[pos, ), {, pos, ., setBeginIndex, (, 0, ), ;, pos, ., setEndIndex, (, 0, ), ;, BigInteger, num, =]
[pos, ), {, pos, ., setBeginIndex, (, 0, ), ;, pos, ., setEndIndex, (, 0, ), ;, BigInteger, num, =]
[;, pos, ., setEndIndex, (, 0, ), ;, BigInteger, num, =, fraction, ., getNumerator, (, ), ;, BigInteger, den, =]
[;, pos, ., setEndIndex, (, 0, ), ;, BigInteger, num, =, fraction, ., getNumerator, (, ), ;, BigInteger, den, =]
[num, =, fraction, ., getNumerator, (, ), ;, BigInteger, den, =, fraction, ., getDenominator, (, ), ;, BigInteger, whole, =]
[num, =, fraction, ., getNumerator, (, ), ;, BigInteger, den, =, fraction, ., getDenominator, (, ), ;, BigInteger, whole, =]
[getNumerator, (, ), ;, BigInteger, den, =, fraction, ., getDenominator, (, ), ;, BigInteger, whole, =, num, ., divide, (]
[;, BigInteger, den, =, fraction, ., getDenominator, (, ), ;, BigInteger, whole, =, num, ., divide, (, den, ), ;]
[den, =, fraction, ., getDenominator, (, ), ;, BigInteger, whole, =, num, ., divide, (, den, ), ;, num, =]
[den, =, fraction, ., getDenominator, (, ), ;, BigInteger, whole, =, num, ., divide, (, den, ), ;, num, =]
[getDenominator, (, ), ;, BigInteger, whole, =, num, ., divide, (, den, ), ;, num, =, num, ., remainder, (]
[whole, =, num, ., divide, (, den, ), ;, num, =, num, ., remainder, (, den, ), ;, if, (]
[=, num, ., divide, (, den, ), ;, num, =, num, ., remainder, (, den, ), ;, if, (, !]
[=, num, ., divide, (, den, ), ;, num, =, num, ., remainder, (, den, ), ;, if, (, !]
[=, num, ., divide, (, den, ), ;, num, =, num, ., remainder, (, den, ), ;, if, (, !]
[), ;, num, =, num, ., remainder, (, den, ), ;, if, (, !, BigInteger, ., ZERO, ., equals, (]
[num, ., remainder, (, den, ), ;, if, (, !, BigInteger, ., ZERO, ., equals, (, whole, ), ), {]
[num, ., remainder, (, den, ), ;, if, (, !, BigInteger, ., ZERO, ., equals, (, whole, ), ), {]
[;, if, (, !, BigInteger, ., ZERO, ., equals, (, whole, ), ), {, getWholeFormat, (, ), ., format, (]
[(, !, BigInteger, ., ZERO, ., equals, (, whole, ), ), {, getWholeFormat, (, ), ., format, (, whole, ,]
[BigInteger, ., ZERO, ., equals, (, whole, ), ), {, getWholeFormat, (, ), ., format, (, whole, ,, toAppendTo, ,]
[., equals, (, whole, ), ), {, getWholeFormat, (, ), ., format, (, whole, ,, toAppendTo, ,, pos, ), ;]
[., equals, (, whole, ), ), {, getWholeFormat, (, ), ., format, (, whole, ,, toAppendTo, ,, pos, ), ;]
[), ), {, getWholeFormat, (, ), ., format, (, whole, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (]
[), ., format, (, whole, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, ' ', ), ;, if, (]
[), ., format, (, whole, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, ' ', ), ;, if, (]
[), ., format, (, whole, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, ' ', ), ;, if, (]
[whole, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, ' ', ), ;, if, (, num, ., compareTo, (]
[whole, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, ' ', ), ;, if, (, num, ., compareTo, (]
[), ;, toAppendTo, ., append, (, ' ', ), ;, if, (, num, ., compareTo, (, BigInteger, ., ZERO, ), <]
[., append, (, ' ', ), ;, if, (, num, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {]
[(, ' ', ), ;, if, (, num, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {, num, =]
[(, ' ', ), ;, if, (, num, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {, num, =]
[compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {, num, =, num, ., negate, (, ), ;, }, }]
[compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {, num, =, num, ., negate, (, ), ;, }, }]
[<, 0, ), {, num, =, num, ., negate, (, ), ;, }, }, getNumeratorFormat, (, ), ., format, (]
[), {, num, =, num, ., negate, (, ), ;, }, }, getNumeratorFormat, (, ), ., format, (, num, ,]
[num, =, num, ., negate, (, ), ;, }, }, getNumeratorFormat, (, ), ., format, (, num, ,, toAppendTo, ,]
[., negate, (, ), ;, }, }, getNumeratorFormat, (, ), ., format, (, num, ,, toAppendTo, ,, pos, ), ;]
[., negate, (, ), ;, }, }, getNumeratorFormat, (, ), ., format, (, num, ,, toAppendTo, ,, pos, ), ;]
[;, }, }, getNumeratorFormat, (, ), ., format, (, num, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (]
[getNumeratorFormat, (, ), ., format, (, num, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;]
[getNumeratorFormat, (, ), ., format, (, num, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;]
[num, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (]
[toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, den, ,]
[pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, den, ,, toAppendTo, ,]
[., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, den, ,, toAppendTo, ,, pos, ), ;, return]
[format, (, den, ,, toAppendTo, ,, pos, ), ;, return, toAppendTo, ;, }, public, NumberFormat, getWholeFormat, (, ), {, return]
[;, }, @, Override, public, BigFraction, parse, (, final, String, source, ,, final, ParsePosition, pos, ), {, BigFraction, ret, =]
[;, }, @, Override, public, BigFraction, parse, (, final, String, source, ,, final, ParsePosition, pos, ), {, BigFraction, ret, =]
[public, BigFraction, parse, (, final, String, source, ,, final, ParsePosition, pos, ), {, BigFraction, ret, =, super, ., parse, (]
[parse, (, final, String, source, ,, final, ParsePosition, pos, ), {, BigFraction, ret, =, super, ., parse, (, source, ,]
[,, final, ParsePosition, pos, ), {, BigFraction, ret, =, super, ., parse, (, source, ,, pos, ), ;, if, (]
[,, final, ParsePosition, pos, ), {, BigFraction, ret, =, super, ., parse, (, source, ,, pos, ), ;, if, (]
[ParsePosition, pos, ), {, BigFraction, ret, =, super, ., parse, (, source, ,, pos, ), ;, if, (, ret, !=]
[BigFraction, ret, =, super, ., parse, (, source, ,, pos, ), ;, if, (, ret, !=, null, ), {, return]
[source, ,, pos, ), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, final, int, initialIndex, =]
[source, ,, pos, ), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, final, int, initialIndex, =]
[(, ret, !=, null, ), {, return, ret, ;, }, final, int, initialIndex, =, pos, ., getIndex, (, ), ;]
[!=, null, ), {, return, ret, ;, }, final, int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (]
[), {, return, ret, ;, }, final, int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,]
[final, int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, BigInteger, whole, =]
[initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, BigInteger, whole, =, parseNextBigInteger, (]
[pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, BigInteger, whole, =, parseNextBigInteger, (, source, ,]
[;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, BigInteger, whole, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (]
[;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, BigInteger, whole, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (]
[(, source, ,, pos, ), ;, BigInteger, whole, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, whole, ==]
[pos, ), ;, BigInteger, whole, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, whole, ==, null, ), {]
[pos, ), ;, BigInteger, whole, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, whole, ==, null, ), {]
[whole, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, whole, ==, null, ), {, pos, ., setIndex, (]
[source, ,, pos, ), ;, if, (, whole, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return]
[), ;, if, (, whole, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }]
[if, (, whole, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (]
[whole, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,]
[., setIndex, (, initialIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, BigInteger, num, =]
[(, initialIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, BigInteger, num, =, parseNextBigInteger, (]
[), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, BigInteger, num, =, parseNextBigInteger, (, source, ,]
[}, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, BigInteger, num, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (]
[}, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, BigInteger, num, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (]
[(, source, ,, pos, ), ;, BigInteger, num, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, num, ==]
[pos, ), ;, BigInteger, num, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, num, ==, null, ), {]
[pos, ), ;, BigInteger, num, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, num, ==, null, ), {]
[num, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, num, ==, null, ), {, pos, ., setIndex, (]
[source, ,, pos, ), ;, if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return]
[if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (]
[if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (]
[if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (]
[null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, num, ., compareTo, (]
[null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, num, ., compareTo, (]
[setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, num, ., compareTo, (, BigInteger, ., ZERO, ), <]
[), ;, return, null, ;, }, if, (, num, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {]
[), ;, return, null, ;, }, if, (, num, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {]
[;, }, if, (, num, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {, pos, ., setIndex, (]
[num, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return]
[), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, final, int, startIndex, =]
[), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, final, int, startIndex, =]
[), ;, return, null, ;, }, final, int, startIndex, =, pos, ., getIndex, (, ), ;, final, char, c, =]
[return, null, ;, }, final, int, startIndex, =, pos, ., getIndex, (, ), ;, final, char, c, =, parseNextCharacter, (]
[;, }, final, int, startIndex, =, pos, ., getIndex, (, ), ;, final, char, c, =, parseNextCharacter, (, source, ,]
[=, pos, ., getIndex, (, ), ;, final, char, c, =, parseNextCharacter, (, source, ,, pos, ), ;, switch, (]
[(, ), ;, final, char, c, =, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, ), {, case]
[final, char, c, =, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, ), {, case, 0, :, return]
[=, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, ), {, case, 0, :, return, new, BigFraction, (]
[,, pos, ), ;, switch, (, c, ), {, case, 0, :, return, new, BigFraction, (, num, ), ;, case]
[c, ), {, case, 0, :, return, new, BigFraction, (, num, ), ;, case, '/', :, break, ;, default, :]
[c, ), {, case, 0, :, return, new, BigFraction, (, num, ), ;, case, '/', :, break, ;, default, :]
[0, :, return, new, BigFraction, (, num, ), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (]
[new, BigFraction, (, num, ), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;]
[new, BigFraction, (, num, ), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;]
[), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (]
[:, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return]
[default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }]
[pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (]
[setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,]
[setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, den, =]
[startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, den, =, parseNextBigInteger, (]
[;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,]
[parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (]
[parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (]
[source, ,, pos, ), ;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, den, ==]
[), ;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, den, ==, null, ), {]
[), ;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, den, ==, null, ), {]
[den, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, den, ==, null, ), {, pos, ., setIndex, (]
[source, ,, pos, ), ;, if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return]
[if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (]
[if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (]
[if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (]
[null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, den, ., compareTo, (]
[null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, den, ., compareTo, (]
[setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, den, ., compareTo, (, BigInteger, ., ZERO, ), <]
[), ;, return, null, ;, }, if, (, den, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {]
[), ;, return, null, ;, }, if, (, den, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {]
[;, }, if, (, den, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {, pos, ., setIndex, (]
[den, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return]
[ZERO, ), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, boolean, wholeIsNeg, =]
[ZERO, ), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, boolean, wholeIsNeg, =]
[ZERO, ), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, boolean, wholeIsNeg, =]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, boolean, wholeIsNeg, =, whole, ., compareTo, (]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, boolean, wholeIsNeg, =, whole, ., compareTo, (]
[(, initialIndex, ), ;, return, null, ;, }, boolean, wholeIsNeg, =, whole, ., compareTo, (, BigInteger, ., ZERO, ), <]
[return, null, ;, }, boolean, wholeIsNeg, =, whole, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ;, if, (]
[}, boolean, wholeIsNeg, =, whole, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ;, if, (, wholeIsNeg, ), {]
[wholeIsNeg, =, whole, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ;, if, (, wholeIsNeg, ), {, whole, =]
[wholeIsNeg, =, whole, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ;, if, (, wholeIsNeg, ), {, whole, =]
[., ZERO, ), <, 0, ;, if, (, wholeIsNeg, ), {, whole, =, whole, ., negate, (, ), ;, }]
[), <, 0, ;, if, (, wholeIsNeg, ), {, whole, =, whole, ., negate, (, ), ;, }, num, =]
[), <, 0, ;, if, (, wholeIsNeg, ), {, whole, =, whole, ., negate, (, ), ;, }, num, =]
[), <, 0, ;, if, (, wholeIsNeg, ), {, whole, =, whole, ., negate, (, ), ;, }, num, =]
[if, (, wholeIsNeg, ), {, whole, =, whole, ., negate, (, ), ;, }, num, =, whole, ., multiply, (]
[whole, =, whole, ., negate, (, ), ;, }, num, =, whole, ., multiply, (, den, ), ., add, (]
[(, ), ;, }, num, =, whole, ., multiply, (, den, ), ., add, (, num, ), ;, if, (]
[}, num, =, whole, ., multiply, (, den, ), ., add, (, num, ), ;, if, (, wholeIsNeg, ), {]
[=, whole, ., multiply, (, den, ), ., add, (, num, ), ;, if, (, wholeIsNeg, ), {, num, =]
[=, whole, ., multiply, (, den, ), ., add, (, num, ), ;, if, (, wholeIsNeg, ), {, num, =]
[add, (, num, ), ;, if, (, wholeIsNeg, ), {, num, =, num, ., negate, (, ), ;, }, return]
[), ;, if, (, wholeIsNeg, ), {, num, =, num, ., negate, (, ), ;, }, return, new, BigFraction, (]
[if, (, wholeIsNeg, ), {, num, =, num, ., negate, (, ), ;, }, return, new, BigFraction, (, num, ,]
[new, BigFraction, (, num, ,, den, ), ;, }, public, void, setWholeFormat, (, final, NumberFormat, format, ), {, if, (]
[new, BigFraction, (, num, ,, den, ), ;, }, public, void, setWholeFormat, (, final, NumberFormat, format, ), {, if, (]
[(, num, ,, den, ), ;, }, public, void, setWholeFormat, (, final, NumberFormat, format, ), {, if, (, format, ==]
[), ;, }, public, void, setWholeFormat, (, final, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw]
[public, void, setWholeFormat, (, final, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw, new, NullArgumentException, (]
[public, void, setWholeFormat, (, final, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw, new, NullArgumentException, (]
[format, ), {, if, (, format, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., WHOLE_FORMAT, ), ;, }]
[format, ), {, if, (, format, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., WHOLE_FORMAT, ), ;, }]
[(, format, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., WHOLE_FORMAT, ), ;, }, this, ., wholeFormat, =]
