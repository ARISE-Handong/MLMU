[), {, case, Token, ., ADD, :, case, Token, ., AND, :, case, Token, ., BITAND, :, case, Token, .]
[., getType, (, ), ), {, case, Token, ., ADD, :, case, Token, ., AND, :, case, Token, ., BITAND]
[:, case, Token, ., AND, :, case, Token, ., BITAND, :, case, Token, ., BITOR, :, case, Token, ., BITXOR]
[., ADD, :, case, Token, ., AND, :, case, Token, ., BITAND, :, case, Token, ., BITOR, :, case, Token]
[:, case, Token, ., BITAND, :, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., COMMA]
[., AND, :, case, Token, ., BITAND, :, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token]
[:, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., COMMA, :, case, Token, ., DIV]
[., BITAND, :, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., COMMA, :, case, Token]
[:, case, Token, ., BITXOR, :, case, Token, ., COMMA, :, case, Token, ., DIV, :, case, Token, ., EQ]
[., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., COMMA, :, case, Token, ., DIV, :, case, Token]
[:, case, Token, ., COMMA, :, case, Token, ., DIV, :, case, Token, ., EQ, :, case, Token, ., GE]
[., BITXOR, :, case, Token, ., COMMA, :, case, Token, ., DIV, :, case, Token, ., EQ, :, case, Token]
[:, case, Token, ., DIV, :, case, Token, ., EQ, :, case, Token, ., GE, :, case, Token, ., GT]
[., COMMA, :, case, Token, ., DIV, :, case, Token, ., EQ, :, case, Token, ., GE, :, case, Token]
[:, case, Token, ., EQ, :, case, Token, ., GE, :, case, Token, ., GT, :, case, Token, ., IN]
[., DIV, :, case, Token, ., EQ, :, case, Token, ., GE, :, case, Token, ., GT, :, case, Token]
[:, case, Token, ., GE, :, case, Token, ., GT, :, case, Token, ., IN, :, case, Token, ., INSTANCEOF]
[., EQ, :, case, Token, ., GE, :, case, Token, ., GT, :, case, Token, ., IN, :, case, Token]
[:, case, Token, ., GT, :, case, Token, ., IN, :, case, Token, ., INSTANCEOF, :, case, Token, ., LE]
[., GE, :, case, Token, ., GT, :, case, Token, ., IN, :, case, Token, ., INSTANCEOF, :, case, Token]
[:, case, Token, ., IN, :, case, Token, ., INSTANCEOF, :, case, Token, ., LE, :, case, Token, ., LSH]
[., GT, :, case, Token, ., IN, :, case, Token, ., INSTANCEOF, :, case, Token, ., LE, :, case, Token]
[:, case, Token, ., INSTANCEOF, :, case, Token, ., LE, :, case, Token, ., LSH, :, case, Token, ., LT]
[., IN, :, case, Token, ., INSTANCEOF, :, case, Token, ., LE, :, case, Token, ., LSH, :, case, Token]
[:, case, Token, ., LE, :, case, Token, ., LSH, :, case, Token, ., LT, :, case, Token, ., MOD]
[., INSTANCEOF, :, case, Token, ., LE, :, case, Token, ., LSH, :, case, Token, ., LT, :, case, Token]
[:, case, Token, ., LSH, :, case, Token, ., LT, :, case, Token, ., MOD, :, case, Token, ., MUL]
[., LE, :, case, Token, ., LSH, :, case, Token, ., LT, :, case, Token, ., MOD, :, case, Token]
[:, case, Token, ., LT, :, case, Token, ., MOD, :, case, Token, ., MUL, :, case, Token, ., NE]
[., LSH, :, case, Token, ., LT, :, case, Token, ., MOD, :, case, Token, ., MUL, :, case, Token]
[:, case, Token, ., MOD, :, case, Token, ., MUL, :, case, Token, ., NE, :, case, Token, ., OR]
[., LT, :, case, Token, ., MOD, :, case, Token, ., MUL, :, case, Token, ., NE, :, case, Token]
[:, case, Token, ., MUL, :, case, Token, ., NE, :, case, Token, ., OR, :, case, Token, ., RSH]
[., MOD, :, case, Token, ., MUL, :, case, Token, ., NE, :, case, Token, ., OR, :, case, Token]
[:, case, Token, ., NE, :, case, Token, ., OR, :, case, Token, ., RSH, :, case, Token, ., SHEQ]
[., MUL, :, case, Token, ., NE, :, case, Token, ., OR, :, case, Token, ., RSH, :, case, Token]
[:, case, Token, ., OR, :, case, Token, ., RSH, :, case, Token, ., SHEQ, :, case, Token, ., SHNE]
[., NE, :, case, Token, ., OR, :, case, Token, ., RSH, :, case, Token, ., SHEQ, :, case, Token]
[:, case, Token, ., RSH, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., SUB]
[., OR, :, case, Token, ., RSH, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token]
[:, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., SUB, :, case, Token, ., URSH]
[., RSH, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., SUB, :, case, Token]
[:, case, Token, ., SHNE, :, case, Token, ., SUB, :, case, Token, ., URSH, :, return, processInfixExpression, (, (]
[., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., SUB, :, case, Token, ., URSH, :, return, processInfixExpression]
[:, case, Token, ., SUB, :, case, Token, ., URSH, :, return, processInfixExpression, (, (, InfixExpression, ), node, ), ;]
[., SHNE, :, case, Token, ., SUB, :, case, Token, ., URSH, :, return, processInfixExpression, (, (, InfixExpression, ), node]
[:, case, Token, ., URSH, :, return, processInfixExpression, (, (, InfixExpression, ), node, ), ;, case, Token, ., ARRAYLIT, :]
[., SUB, :, case, Token, ., URSH, :, return, processInfixExpression, (, (, InfixExpression, ), node, ), ;, case, Token, .]
[:, return, processInfixExpression, (, (, InfixExpression, ), node, ), ;, case, Token, ., ARRAYLIT, :, return, processArrayLiteral, (, (, ArrayLiteral]
[., URSH, :, return, processInfixExpression, (, (, InfixExpression, ), node, ), ;, case, Token, ., ARRAYLIT, :, return, processArrayLiteral, (]
[;, case, Token, ., ARRAYLIT, :, return, processArrayLiteral, (, (, ArrayLiteral, ), node, ), ;, case, Token, ., ASSIGN, :]
[), ;, case, Token, ., ARRAYLIT, :, return, processArrayLiteral, (, (, ArrayLiteral, ), node, ), ;, case, Token, ., ASSIGN]
[), ;, case, Token, ., ARRAYLIT, :, return, processArrayLiteral, (, (, ArrayLiteral, ), node, ), ;, case, Token, ., ASSIGN]
[:, return, processArrayLiteral, (, (, ArrayLiteral, ), node, ), ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_ADD, :]
[., ARRAYLIT, :, return, processArrayLiteral, (, (, ArrayLiteral, ), node, ), ;, case, Token, ., ASSIGN, :, case, Token, .]
[;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITOR]
[), ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_BITAND, :, case, Token, .]
[), ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_BITAND, :, case, Token, .]
[:, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR]
[., ASSIGN, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITOR, :, case, Token]
[:, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_DIV]
[., ASSIGN_ADD, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token]
[:, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_LSH]
[., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_DIV, :, case, Token]
[:, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_MOD]
[., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_LSH, :, case, Token]
[:, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL]
[., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_MOD, :, case, Token]
[:, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_RSH]
[., ASSIGN_DIV, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :, case, Token]
[:, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_SUB]
[., ASSIGN_LSH, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_RSH, :, case, Token]
[:, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_URSH]
[., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_SUB, :, case, Token]
[:, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_URSH, :, return, processAssignment, (, (]
[., ASSIGN_MUL, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_URSH, :, return, processAssignment]
[:, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_URSH, :, return, processAssignment, (, (, Assignment, ), node, ), ;]
[., ASSIGN_RSH, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_URSH, :, return, processAssignment, (, (, Assignment, ), node]
[:, case, Token, ., ASSIGN_URSH, :, return, processAssignment, (, (, Assignment, ), node, ), ;, case, Token, ., BITNOT, :]
[., ASSIGN_SUB, :, case, Token, ., ASSIGN_URSH, :, return, processAssignment, (, (, Assignment, ), node, ), ;, case, Token, .]
[:, return, processAssignment, (, (, Assignment, ), node, ), ;, case, Token, ., BITNOT, :, case, Token, ., DEC, :]
[., ASSIGN_URSH, :, return, processAssignment, (, (, Assignment, ), node, ), ;, case, Token, ., BITNOT, :, case, Token, .]
[;, case, Token, ., BITNOT, :, case, Token, ., DEC, :, case, Token, ., DELPROP, :, case, Token, ., INC]
[), ;, case, Token, ., BITNOT, :, case, Token, ., DEC, :, case, Token, ., DELPROP, :, case, Token, .]
[), ;, case, Token, ., BITNOT, :, case, Token, ., DEC, :, case, Token, ., DELPROP, :, case, Token, .]
[:, case, Token, ., DEC, :, case, Token, ., DELPROP, :, case, Token, ., INC, :, case, Token, ., NEG]
[., BITNOT, :, case, Token, ., DEC, :, case, Token, ., DELPROP, :, case, Token, ., INC, :, case, Token]
[:, case, Token, ., DELPROP, :, case, Token, ., INC, :, case, Token, ., NEG, :, case, Token, ., NOT]
[., DEC, :, case, Token, ., DELPROP, :, case, Token, ., INC, :, case, Token, ., NEG, :, case, Token]
[:, case, Token, ., INC, :, case, Token, ., NEG, :, case, Token, ., NOT, :, case, Token, ., POS]
[., DELPROP, :, case, Token, ., INC, :, case, Token, ., NEG, :, case, Token, ., NOT, :, case, Token]
[:, case, Token, ., NEG, :, case, Token, ., NOT, :, case, Token, ., POS, :, case, Token, ., TYPEOF]
[., INC, :, case, Token, ., NEG, :, case, Token, ., NOT, :, case, Token, ., POS, :, case, Token]
[:, case, Token, ., NOT, :, case, Token, ., POS, :, case, Token, ., TYPEOF, :, case, Token, ., VOID]
[., NEG, :, case, Token, ., NOT, :, case, Token, ., POS, :, case, Token, ., TYPEOF, :, case, Token]
[:, case, Token, ., POS, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, return, processUnaryExpression, (, (]
[., NOT, :, case, Token, ., POS, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, return, processUnaryExpression]
[:, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, return, processUnaryExpression, (, (, UnaryExpression, ), node, ), ;]
[., POS, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, return, processUnaryExpression, (, (, UnaryExpression, ), node]
[:, case, Token, ., VOID, :, return, processUnaryExpression, (, (, UnaryExpression, ), node, ), ;, case, Token, ., BLOCK, :]
[., TYPEOF, :, case, Token, ., VOID, :, return, processUnaryExpression, (, (, UnaryExpression, ), node, ), ;, case, Token, .]
[:, return, processUnaryExpression, (, (, UnaryExpression, ), node, ), ;, case, Token, ., BLOCK, :, if, (, node, instanceof, Block]
[., VOID, :, return, processUnaryExpression, (, (, UnaryExpression, ), node, ), ;, case, Token, ., BLOCK, :, if, (, node]
[;, case, Token, ., BLOCK, :, if, (, node, instanceof, Block, ), {, return, processBlock, (, (, Block, ), node]
[), ;, case, Token, ., BLOCK, :, if, (, node, instanceof, Block, ), {, return, processBlock, (, (, Block, )]
[), ;, case, Token, ., BLOCK, :, if, (, node, instanceof, Block, ), {, return, processBlock, (, (, Block, )]
[:, if, (, node, instanceof, Block, ), {, return, processBlock, (, (, Block, ), node, ), ;, }, else, if]
[., BLOCK, :, if, (, node, instanceof, Block, ), {, return, processBlock, (, (, Block, ), node, ), ;, }]
[), {, return, processBlock, (, (, Block, ), node, ), ;, }, else, if, (, node, instanceof, Scope, ), {]
[instanceof, Block, ), {, return, processBlock, (, (, Block, ), node, ), ;, }, else, if, (, node, instanceof, Scope]
[;, }, else, if, (, node, instanceof, Scope, ), {, return, processScope, (, (, Scope, ), node, ), ;, }]
[), ;, }, else, if, (, node, instanceof, Scope, ), {, return, processScope, (, (, Scope, ), node, ), ;]
[), ;, }, else, if, (, node, instanceof, Scope, ), {, return, processScope, (, (, Scope, ), node, ), ;]
[), {, return, processScope, (, (, Scope, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +]
[instanceof, Scope, ), {, return, processScope, (, (, Scope, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (]
[;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token, .]
[), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token]
[), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token]
[;, }, case, Token, ., BREAK, :, return, processBreakStatement, (, (, BreakStatement, ), node, ), ;, case, Token, ., CALL]
[), ;, }, case, Token, ., BREAK, :, return, processBreakStatement, (, (, BreakStatement, ), node, ), ;, case, Token, .]
[+, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., BREAK, :, return]
[+, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., BREAK]
[+, node, ., getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), )]
[+, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., BREAK]
[., getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }]
[+, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., BREAK, :, return]
[), ;, }, case, Token, ., BREAK, :, return, processBreakStatement, (, (, BreakStatement, ), node, ), ;, case, Token, .]
[., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., BREAK, :, return, processBreakStatement, (]
[), ), ;, }, case, Token, ., BREAK, :, return, processBreakStatement, (, (, BreakStatement, ), node, ), ;, case, Token]
[., getType, (, ), ), ), ;, }, case, Token, ., BREAK, :, return, processBreakStatement, (, (, BreakStatement, ), node]
[:, return, processBreakStatement, (, (, BreakStatement, ), node, ), ;, case, Token, ., CALL, :, return, processFunctionCall, (, (, FunctionCall]
[., BREAK, :, return, processBreakStatement, (, (, BreakStatement, ), node, ), ;, case, Token, ., CALL, :, return, processFunctionCall, (]
[;, case, Token, ., CALL, :, return, processFunctionCall, (, (, FunctionCall, ), node, ), ;, case, Token, ., CASE, :]
[), ;, case, Token, ., CALL, :, return, processFunctionCall, (, (, FunctionCall, ), node, ), ;, case, Token, ., CASE]
[), ;, case, Token, ., CALL, :, return, processFunctionCall, (, (, FunctionCall, ), node, ), ;, case, Token, ., CASE]
[:, return, processFunctionCall, (, (, FunctionCall, ), node, ), ;, case, Token, ., CASE, :, case, Token, ., DEFAULT, :]
[., CALL, :, return, processFunctionCall, (, (, FunctionCall, ), node, ), ;, case, Token, ., CASE, :, case, Token, .]
[;, case, Token, ., CASE, :, case, Token, ., DEFAULT, :, return, processSwitchCase, (, (, SwitchCase, ), node, ), ;]
[), ;, case, Token, ., CASE, :, case, Token, ., DEFAULT, :, return, processSwitchCase, (, (, SwitchCase, ), node, )]
[), ;, case, Token, ., CASE, :, case, Token, ., DEFAULT, :, return, processSwitchCase, (, (, SwitchCase, ), node, )]
[:, case, Token, ., DEFAULT, :, return, processSwitchCase, (, (, SwitchCase, ), node, ), ;, case, Token, ., CATCH, :]
[., CASE, :, case, Token, ., DEFAULT, :, return, processSwitchCase, (, (, SwitchCase, ), node, ), ;, case, Token, .]
[:, return, processSwitchCase, (, (, SwitchCase, ), node, ), ;, case, Token, ., CATCH, :, return, processCatchClause, (, (, CatchClause]
[., DEFAULT, :, return, processSwitchCase, (, (, SwitchCase, ), node, ), ;, case, Token, ., CATCH, :, return, processCatchClause, (]
[;, case, Token, ., CATCH, :, return, processCatchClause, (, (, CatchClause, ), node, ), ;, case, Token, ., COLON, :]
[), ;, case, Token, ., CATCH, :, return, processCatchClause, (, (, CatchClause, ), node, ), ;, case, Token, ., COLON]
[), ;, case, Token, ., CATCH, :, return, processCatchClause, (, (, CatchClause, ), node, ), ;, case, Token, ., COLON]
[:, return, processCatchClause, (, (, CatchClause, ), node, ), ;, case, Token, ., COLON, :, return, processObjectProperty, (, (, ObjectProperty]
[., CATCH, :, return, processCatchClause, (, (, CatchClause, ), node, ), ;, case, Token, ., COLON, :, return, processObjectProperty, (]
[;, case, Token, ., COLON, :, return, processObjectProperty, (, (, ObjectProperty, ), node, ), ;, case, Token, ., CONTINUE, :]
[), ;, case, Token, ., COLON, :, return, processObjectProperty, (, (, ObjectProperty, ), node, ), ;, case, Token, ., CONTINUE]
[), ;, case, Token, ., COLON, :, return, processObjectProperty, (, (, ObjectProperty, ), node, ), ;, case, Token, ., CONTINUE]
[:, return, processObjectProperty, (, (, ObjectProperty, ), node, ), ;, case, Token, ., CONTINUE, :, return, processContinueStatement, (, (, ContinueStatement]
[., COLON, :, return, processObjectProperty, (, (, ObjectProperty, ), node, ), ;, case, Token, ., CONTINUE, :, return, processContinueStatement, (]
[;, case, Token, ., CONTINUE, :, return, processContinueStatement, (, (, ContinueStatement, ), node, ), ;, case, Token, ., DO, :]
[), ;, case, Token, ., CONTINUE, :, return, processContinueStatement, (, (, ContinueStatement, ), node, ), ;, case, Token, ., DO]
[), ;, case, Token, ., CONTINUE, :, return, processContinueStatement, (, (, ContinueStatement, ), node, ), ;, case, Token, ., DO]
[:, return, processContinueStatement, (, (, ContinueStatement, ), node, ), ;, case, Token, ., DO, :, return, processDoLoop, (, (, DoLoop]
[., CONTINUE, :, return, processContinueStatement, (, (, ContinueStatement, ), node, ), ;, case, Token, ., DO, :, return, processDoLoop, (]
[;, case, Token, ., DO, :, return, processDoLoop, (, (, DoLoop, ), node, ), ;, case, Token, ., EMPTY, :]
[), ;, case, Token, ., DO, :, return, processDoLoop, (, (, DoLoop, ), node, ), ;, case, Token, ., EMPTY]
[), ;, case, Token, ., DO, :, return, processDoLoop, (, (, DoLoop, ), node, ), ;, case, Token, ., EMPTY]
[:, return, processDoLoop, (, (, DoLoop, ), node, ), ;, case, Token, ., EMPTY, :, return, (, node, instanceof, EmptyExpression]
[., DO, :, return, processDoLoop, (, (, DoLoop, ), node, ), ;, case, Token, ., EMPTY, :, return, (, node]
[;, case, Token, ., EMPTY, :, return, (, node, instanceof, EmptyExpression, ), ?, processEmptyExpression, (, (, EmptyExpression, ), node, )]
[), ;, case, Token, ., EMPTY, :, return, (, node, instanceof, EmptyExpression, ), ?, processEmptyExpression, (, (, EmptyExpression, ), node]
[), ;, case, Token, ., EMPTY, :, return, (, node, instanceof, EmptyExpression, ), ?, processEmptyExpression, (, (, EmptyExpression, ), node]
[:, return, (, node, instanceof, EmptyExpression, ), ?, processEmptyExpression, (, (, EmptyExpression, ), node, ), :, processEmptyStatement, (, (, EmptyStatement]
[., EMPTY, :, return, (, node, instanceof, EmptyExpression, ), ?, processEmptyExpression, (, (, EmptyExpression, ), node, ), :, processEmptyStatement, (]
[;, case, Token, ., EXPR_RESULT, :, case, Token, ., EXPR_VOID, :, if, (, node, instanceof, ExpressionStatement, ), {, return, processExpressionStatement]
[?, processEmptyExpression, (, (, EmptyExpression, ), node, ), :, processEmptyStatement, (, (, EmptyStatement, ), node, ), ;, case, Token, .]
[), ?, processEmptyExpression, (, (, EmptyExpression, ), node, ), :, processEmptyStatement, (, (, EmptyStatement, ), node, ), ;, case, Token]
[instanceof, EmptyExpression, ), ?, processEmptyExpression, (, (, EmptyExpression, ), node, ), :, processEmptyStatement, (, (, EmptyStatement, ), node, ), ;]
[:, processEmptyStatement, (, (, EmptyStatement, ), node, ), ;, case, Token, ., EXPR_RESULT, :, case, Token, ., EXPR_VOID, :, if]
[), :, processEmptyStatement, (, (, EmptyStatement, ), node, ), ;, case, Token, ., EXPR_RESULT, :, case, Token, ., EXPR_VOID, :]
[), :, processEmptyStatement, (, (, EmptyStatement, ), node, ), ;, case, Token, ., EXPR_RESULT, :, case, Token, ., EXPR_VOID, :]
[;, case, Token, ., EXPR_RESULT, :, case, Token, ., EXPR_VOID, :, if, (, node, instanceof, ExpressionStatement, ), {, return, processExpressionStatement]
[), ;, case, Token, ., EXPR_RESULT, :, case, Token, ., EXPR_VOID, :, if, (, node, instanceof, ExpressionStatement, ), {, return]
[), ;, case, Token, ., EXPR_RESULT, :, case, Token, ., EXPR_VOID, :, if, (, node, instanceof, ExpressionStatement, ), {, return]
[:, case, Token, ., EXPR_VOID, :, if, (, node, instanceof, ExpressionStatement, ), {, return, processExpressionStatement, (, (, ExpressionStatement, ), node]
[., EXPR_RESULT, :, case, Token, ., EXPR_VOID, :, if, (, node, instanceof, ExpressionStatement, ), {, return, processExpressionStatement, (, (, ExpressionStatement]
[:, if, (, node, instanceof, ExpressionStatement, ), {, return, processExpressionStatement, (, (, ExpressionStatement, ), node, ), ;, }, else, if]
[., EXPR_VOID, :, if, (, node, instanceof, ExpressionStatement, ), {, return, processExpressionStatement, (, (, ExpressionStatement, ), node, ), ;, }]
[), {, return, processExpressionStatement, (, (, ExpressionStatement, ), node, ), ;, }, else, if, (, node, instanceof, LabeledStatement, ), {]
[instanceof, ExpressionStatement, ), {, return, processExpressionStatement, (, (, ExpressionStatement, ), node, ), ;, }, else, if, (, node, instanceof, LabeledStatement]
[;, }, else, if, (, node, instanceof, LabeledStatement, ), {, return, processLabeledStatement, (, (, LabeledStatement, ), node, ), ;, }]
[), ;, }, else, if, (, node, instanceof, LabeledStatement, ), {, return, processLabeledStatement, (, (, LabeledStatement, ), node, ), ;]
[), ;, }, else, if, (, node, instanceof, LabeledStatement, ), {, return, processLabeledStatement, (, (, LabeledStatement, ), node, ), ;]
[), {, return, processLabeledStatement, (, (, LabeledStatement, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +]
[instanceof, LabeledStatement, ), {, return, processLabeledStatement, (, (, LabeledStatement, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (]
[;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token, .]
[), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token]
[), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token]
[;, }, case, Token, ., DEBUGGER, :, case, Token, ., FALSE, :, case, Token, ., NULL, :, case, Token, .]
[), ;, }, case, Token, ., DEBUGGER, :, case, Token, ., FALSE, :, case, Token, ., NULL, :, case, Token]
[+, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., DEBUGGER, :, case]
[+, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., DEBUGGER]
[+, node, ., getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), )]
[+, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., DEBUGGER]
[., getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }]
[+, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., DEBUGGER, :, case]
[), ;, }, case, Token, ., DEBUGGER, :, case, Token, ., FALSE, :, case, Token, ., NULL, :, case, Token]
[., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., DEBUGGER, :, case, Token, .]
[), ), ;, }, case, Token, ., DEBUGGER, :, case, Token, ., FALSE, :, case, Token, ., NULL, :, case]
[., getType, (, ), ), ), ;, }, case, Token, ., DEBUGGER, :, case, Token, ., FALSE, :, case, Token]
[:, case, Token, ., FALSE, :, case, Token, ., NULL, :, case, Token, ., THIS, :, case, Token, ., TRUE]
[., DEBUGGER, :, case, Token, ., FALSE, :, case, Token, ., NULL, :, case, Token, ., THIS, :, case, Token]
[:, case, Token, ., NULL, :, case, Token, ., THIS, :, case, Token, ., TRUE, :, return, processKeywordLiteral, (, (]
[., FALSE, :, case, Token, ., NULL, :, case, Token, ., THIS, :, case, Token, ., TRUE, :, return, processKeywordLiteral]
[:, case, Token, ., THIS, :, case, Token, ., TRUE, :, return, processKeywordLiteral, (, (, KeywordLiteral, ), node, ), ;]
[., NULL, :, case, Token, ., THIS, :, case, Token, ., TRUE, :, return, processKeywordLiteral, (, (, KeywordLiteral, ), node]
[:, case, Token, ., TRUE, :, return, processKeywordLiteral, (, (, KeywordLiteral, ), node, ), ;, case, Token, ., FOR, :]
[., THIS, :, case, Token, ., TRUE, :, return, processKeywordLiteral, (, (, KeywordLiteral, ), node, ), ;, case, Token, .]
[:, return, processKeywordLiteral, (, (, KeywordLiteral, ), node, ), ;, case, Token, ., FOR, :, if, (, node, instanceof, ForInLoop]
[., TRUE, :, return, processKeywordLiteral, (, (, KeywordLiteral, ), node, ), ;, case, Token, ., FOR, :, if, (, node]
[;, case, Token, ., FOR, :, if, (, node, instanceof, ForInLoop, ), {, return, processForInLoop, (, (, ForInLoop, ), node]
[), ;, case, Token, ., FOR, :, if, (, node, instanceof, ForInLoop, ), {, return, processForInLoop, (, (, ForInLoop, )]
[), ;, case, Token, ., FOR, :, if, (, node, instanceof, ForInLoop, ), {, return, processForInLoop, (, (, ForInLoop, )]
[:, if, (, node, instanceof, ForInLoop, ), {, return, processForInLoop, (, (, ForInLoop, ), node, ), ;, }, else, if]
[., FOR, :, if, (, node, instanceof, ForInLoop, ), {, return, processForInLoop, (, (, ForInLoop, ), node, ), ;, }]
[), {, return, processForInLoop, (, (, ForInLoop, ), node, ), ;, }, else, if, (, node, instanceof, ForLoop, ), {]
[instanceof, ForInLoop, ), {, return, processForInLoop, (, (, ForInLoop, ), node, ), ;, }, else, if, (, node, instanceof, ForLoop]
[;, }, else, if, (, node, instanceof, ForLoop, ), {, return, processForLoop, (, (, ForLoop, ), node, ), ;, }]
[), ;, }, else, if, (, node, instanceof, ForLoop, ), {, return, processForLoop, (, (, ForLoop, ), node, ), ;]
[), ;, }, else, if, (, node, instanceof, ForLoop, ), {, return, processForLoop, (, (, ForLoop, ), node, ), ;]
[), {, return, processForLoop, (, (, ForLoop, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +]
[instanceof, ForLoop, ), {, return, processForLoop, (, (, ForLoop, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (]
[;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token, .]
[), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token]
[), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token]
[;, }, case, Token, ., FUNCTION, :, return, processFunctionNode, (, (, FunctionNode, ), node, ), ;, case, Token, ., GETELEM]
[), ;, }, case, Token, ., FUNCTION, :, return, processFunctionNode, (, (, FunctionNode, ), node, ), ;, case, Token, .]
[+, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., FUNCTION, :, return]
[+, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., FUNCTION]
[+, node, ., getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), )]
[+, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., FUNCTION]
[., getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }]
[+, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., FUNCTION, :, return]
[), ;, }, case, Token, ., FUNCTION, :, return, processFunctionNode, (, (, FunctionNode, ), node, ), ;, case, Token, .]
[., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., FUNCTION, :, return, processFunctionNode, (]
[), ), ;, }, case, Token, ., FUNCTION, :, return, processFunctionNode, (, (, FunctionNode, ), node, ), ;, case, Token]
[., getType, (, ), ), ), ;, }, case, Token, ., FUNCTION, :, return, processFunctionNode, (, (, FunctionNode, ), node]
[:, return, processFunctionNode, (, (, FunctionNode, ), node, ), ;, case, Token, ., GETELEM, :, return, processElementGet, (, (, ElementGet]
[., FUNCTION, :, return, processFunctionNode, (, (, FunctionNode, ), node, ), ;, case, Token, ., GETELEM, :, return, processElementGet, (]
[;, case, Token, ., GETELEM, :, return, processElementGet, (, (, ElementGet, ), node, ), ;, case, Token, ., GETPROP, :]
[), ;, case, Token, ., GETELEM, :, return, processElementGet, (, (, ElementGet, ), node, ), ;, case, Token, ., GETPROP]
[), ;, case, Token, ., GETELEM, :, return, processElementGet, (, (, ElementGet, ), node, ), ;, case, Token, ., GETPROP]
[:, return, processElementGet, (, (, ElementGet, ), node, ), ;, case, Token, ., GETPROP, :, return, processPropertyGet, (, (, PropertyGet]
[., GETELEM, :, return, processElementGet, (, (, ElementGet, ), node, ), ;, case, Token, ., GETPROP, :, return, processPropertyGet, (]
[;, case, Token, ., GETPROP, :, return, processPropertyGet, (, (, PropertyGet, ), node, ), ;, case, Token, ., HOOK, :]
[), ;, case, Token, ., GETPROP, :, return, processPropertyGet, (, (, PropertyGet, ), node, ), ;, case, Token, ., HOOK]
[), ;, case, Token, ., GETPROP, :, return, processPropertyGet, (, (, PropertyGet, ), node, ), ;, case, Token, ., HOOK]
[:, return, processPropertyGet, (, (, PropertyGet, ), node, ), ;, case, Token, ., HOOK, :, return, processConditionalExpression, (, (, ConditionalExpression]
[., GETPROP, :, return, processPropertyGet, (, (, PropertyGet, ), node, ), ;, case, Token, ., HOOK, :, return, processConditionalExpression, (]
[;, case, Token, ., HOOK, :, return, processConditionalExpression, (, (, ConditionalExpression, ), node, ), ;, case, Token, ., IF, :]
[), ;, case, Token, ., HOOK, :, return, processConditionalExpression, (, (, ConditionalExpression, ), node, ), ;, case, Token, ., IF]
[), ;, case, Token, ., HOOK, :, return, processConditionalExpression, (, (, ConditionalExpression, ), node, ), ;, case, Token, ., IF]
[:, return, processConditionalExpression, (, (, ConditionalExpression, ), node, ), ;, case, Token, ., IF, :, return, processIfStatement, (, (, IfStatement]
[., HOOK, :, return, processConditionalExpression, (, (, ConditionalExpression, ), node, ), ;, case, Token, ., IF, :, return, processIfStatement, (]
[;, case, Token, ., IF, :, return, processIfStatement, (, (, IfStatement, ), node, ), ;, case, Token, ., LABEL, :]
[), ;, case, Token, ., IF, :, return, processIfStatement, (, (, IfStatement, ), node, ), ;, case, Token, ., LABEL]
[), ;, case, Token, ., IF, :, return, processIfStatement, (, (, IfStatement, ), node, ), ;, case, Token, ., LABEL]
[:, return, processIfStatement, (, (, IfStatement, ), node, ), ;, case, Token, ., LABEL, :, return, processLabel, (, (, Label]
[., IF, :, return, processIfStatement, (, (, IfStatement, ), node, ), ;, case, Token, ., LABEL, :, return, processLabel, (]
[;, case, Token, ., LABEL, :, return, processLabel, (, (, Label, ), node, ), ;, case, Token, ., LP, :]
[), ;, case, Token, ., LABEL, :, return, processLabel, (, (, Label, ), node, ), ;, case, Token, ., LP]
[), ;, case, Token, ., LABEL, :, return, processLabel, (, (, Label, ), node, ), ;, case, Token, ., LP]
[:, return, processLabel, (, (, Label, ), node, ), ;, case, Token, ., LP, :, return, processParenthesizedExpression, (, (, ParenthesizedExpression]
[., LABEL, :, return, processLabel, (, (, Label, ), node, ), ;, case, Token, ., LP, :, return, processParenthesizedExpression, (]
[;, case, Token, ., LP, :, return, processParenthesizedExpression, (, (, ParenthesizedExpression, ), node, ), ;, case, Token, ., NAME, :]
[), ;, case, Token, ., LP, :, return, processParenthesizedExpression, (, (, ParenthesizedExpression, ), node, ), ;, case, Token, ., NAME]
[), ;, case, Token, ., LP, :, return, processParenthesizedExpression, (, (, ParenthesizedExpression, ), node, ), ;, case, Token, ., NAME]
[:, return, processParenthesizedExpression, (, (, ParenthesizedExpression, ), node, ), ;, case, Token, ., NAME, :, return, processName, (, (, Name]
[., LP, :, return, processParenthesizedExpression, (, (, ParenthesizedExpression, ), node, ), ;, case, Token, ., NAME, :, return, processName, (]
[;, case, Token, ., NAME, :, return, processName, (, (, Name, ), node, ), ;, case, Token, ., NEW, :]
[), ;, case, Token, ., NAME, :, return, processName, (, (, Name, ), node, ), ;, case, Token, ., NEW]
[), ;, case, Token, ., NAME, :, return, processName, (, (, Name, ), node, ), ;, case, Token, ., NEW]
[:, return, processName, (, (, Name, ), node, ), ;, case, Token, ., NEW, :, return, processNewExpression, (, (, NewExpression]
[., NAME, :, return, processName, (, (, Name, ), node, ), ;, case, Token, ., NEW, :, return, processNewExpression, (]
[;, case, Token, ., NEW, :, return, processNewExpression, (, (, NewExpression, ), node, ), ;, case, Token, ., NUMBER, :]
[), ;, case, Token, ., NEW, :, return, processNewExpression, (, (, NewExpression, ), node, ), ;, case, Token, ., NUMBER]
[), ;, case, Token, ., NEW, :, return, processNewExpression, (, (, NewExpression, ), node, ), ;, case, Token, ., NUMBER]
[:, return, processNewExpression, (, (, NewExpression, ), node, ), ;, case, Token, ., NUMBER, :, return, processNumberLiteral, (, (, NumberLiteral]
[., NEW, :, return, processNewExpression, (, (, NewExpression, ), node, ), ;, case, Token, ., NUMBER, :, return, processNumberLiteral, (]
[;, case, Token, ., NUMBER, :, return, processNumberLiteral, (, (, NumberLiteral, ), node, ), ;, case, Token, ., OBJECTLIT, :]
[), ;, case, Token, ., NUMBER, :, return, processNumberLiteral, (, (, NumberLiteral, ), node, ), ;, case, Token, ., OBJECTLIT]
[), ;, case, Token, ., NUMBER, :, return, processNumberLiteral, (, (, NumberLiteral, ), node, ), ;, case, Token, ., OBJECTLIT]
[:, return, processNumberLiteral, (, (, NumberLiteral, ), node, ), ;, case, Token, ., OBJECTLIT, :, return, processObjectLiteral, (, (, ObjectLiteral]
[., NUMBER, :, return, processNumberLiteral, (, (, NumberLiteral, ), node, ), ;, case, Token, ., OBJECTLIT, :, return, processObjectLiteral, (]
[;, case, Token, ., OBJECTLIT, :, return, processObjectLiteral, (, (, ObjectLiteral, ), node, ), ;, case, Token, ., REGEXP, :]
[), ;, case, Token, ., OBJECTLIT, :, return, processObjectLiteral, (, (, ObjectLiteral, ), node, ), ;, case, Token, ., REGEXP]
[), ;, case, Token, ., OBJECTLIT, :, return, processObjectLiteral, (, (, ObjectLiteral, ), node, ), ;, case, Token, ., REGEXP]
[:, return, processObjectLiteral, (, (, ObjectLiteral, ), node, ), ;, case, Token, ., REGEXP, :, return, processRegExpLiteral, (, (, RegExpLiteral]
[., OBJECTLIT, :, return, processObjectLiteral, (, (, ObjectLiteral, ), node, ), ;, case, Token, ., REGEXP, :, return, processRegExpLiteral, (]
[;, case, Token, ., REGEXP, :, return, processRegExpLiteral, (, (, RegExpLiteral, ), node, ), ;, case, Token, ., RETURN, :]
[), ;, case, Token, ., REGEXP, :, return, processRegExpLiteral, (, (, RegExpLiteral, ), node, ), ;, case, Token, ., RETURN]
[), ;, case, Token, ., REGEXP, :, return, processRegExpLiteral, (, (, RegExpLiteral, ), node, ), ;, case, Token, ., RETURN]
[:, return, processRegExpLiteral, (, (, RegExpLiteral, ), node, ), ;, case, Token, ., RETURN, :, return, processReturnStatement, (, (, ReturnStatement]
[., REGEXP, :, return, processRegExpLiteral, (, (, RegExpLiteral, ), node, ), ;, case, Token, ., RETURN, :, return, processReturnStatement, (]
[;, case, Token, ., RETURN, :, return, processReturnStatement, (, (, ReturnStatement, ), node, ), ;, case, Token, ., SCRIPT, :]
[), ;, case, Token, ., RETURN, :, return, processReturnStatement, (, (, ReturnStatement, ), node, ), ;, case, Token, ., SCRIPT]
[), ;, case, Token, ., RETURN, :, return, processReturnStatement, (, (, ReturnStatement, ), node, ), ;, case, Token, ., SCRIPT]
[:, return, processReturnStatement, (, (, ReturnStatement, ), node, ), ;, case, Token, ., SCRIPT, :, return, processAstRoot, (, (, AstRoot]
[., RETURN, :, return, processReturnStatement, (, (, ReturnStatement, ), node, ), ;, case, Token, ., SCRIPT, :, return, processAstRoot, (]
[;, case, Token, ., SCRIPT, :, return, processAstRoot, (, (, AstRoot, ), node, ), ;, case, Token, ., STRING, :]
[), ;, case, Token, ., SCRIPT, :, return, processAstRoot, (, (, AstRoot, ), node, ), ;, case, Token, ., STRING]
[), ;, case, Token, ., SCRIPT, :, return, processAstRoot, (, (, AstRoot, ), node, ), ;, case, Token, ., STRING]
[:, return, processAstRoot, (, (, AstRoot, ), node, ), ;, case, Token, ., STRING, :, return, processStringLiteral, (, (, StringLiteral]
[., SCRIPT, :, return, processAstRoot, (, (, AstRoot, ), node, ), ;, case, Token, ., STRING, :, return, processStringLiteral, (]
[;, case, Token, ., STRING, :, return, processStringLiteral, (, (, StringLiteral, ), node, ), ;, case, Token, ., SWITCH, :]
[), ;, case, Token, ., STRING, :, return, processStringLiteral, (, (, StringLiteral, ), node, ), ;, case, Token, ., SWITCH]
[), ;, case, Token, ., STRING, :, return, processStringLiteral, (, (, StringLiteral, ), node, ), ;, case, Token, ., SWITCH]
[:, return, processStringLiteral, (, (, StringLiteral, ), node, ), ;, case, Token, ., SWITCH, :, return, processSwitchStatement, (, (, SwitchStatement]
[., STRING, :, return, processStringLiteral, (, (, StringLiteral, ), node, ), ;, case, Token, ., SWITCH, :, return, processSwitchStatement, (]
[;, case, Token, ., SWITCH, :, return, processSwitchStatement, (, (, SwitchStatement, ), node, ), ;, case, Token, ., THROW, :]
[), ;, case, Token, ., SWITCH, :, return, processSwitchStatement, (, (, SwitchStatement, ), node, ), ;, case, Token, ., THROW]
[), ;, case, Token, ., SWITCH, :, return, processSwitchStatement, (, (, SwitchStatement, ), node, ), ;, case, Token, ., THROW]
[:, return, processSwitchStatement, (, (, SwitchStatement, ), node, ), ;, case, Token, ., THROW, :, return, processThrowStatement, (, (, ThrowStatement]
[., SWITCH, :, return, processSwitchStatement, (, (, SwitchStatement, ), node, ), ;, case, Token, ., THROW, :, return, processThrowStatement, (]
[;, case, Token, ., THROW, :, return, processThrowStatement, (, (, ThrowStatement, ), node, ), ;, case, Token, ., TRY, :]
[), ;, case, Token, ., THROW, :, return, processThrowStatement, (, (, ThrowStatement, ), node, ), ;, case, Token, ., TRY]
[), ;, case, Token, ., THROW, :, return, processThrowStatement, (, (, ThrowStatement, ), node, ), ;, case, Token, ., TRY]
[:, return, processThrowStatement, (, (, ThrowStatement, ), node, ), ;, case, Token, ., TRY, :, return, processTryStatement, (, (, TryStatement]
[., THROW, :, return, processThrowStatement, (, (, ThrowStatement, ), node, ), ;, case, Token, ., TRY, :, return, processTryStatement, (]
[;, case, Token, ., TRY, :, return, processTryStatement, (, (, TryStatement, ), node, ), ;, case, Token, ., CONST, :]
[), ;, case, Token, ., TRY, :, return, processTryStatement, (, (, TryStatement, ), node, ), ;, case, Token, ., CONST]
[), ;, case, Token, ., TRY, :, return, processTryStatement, (, (, TryStatement, ), node, ), ;, case, Token, ., CONST]
[:, return, processTryStatement, (, (, TryStatement, ), node, ), ;, case, Token, ., CONST, :, case, Token, ., VAR, :]
[., TRY, :, return, processTryStatement, (, (, TryStatement, ), node, ), ;, case, Token, ., CONST, :, case, Token, .]
[;, case, Token, ., CONST, :, case, Token, ., VAR, :, if, (, node, instanceof, VariableDeclaration, ), {, return, processVariableDeclaration]
[), ;, case, Token, ., CONST, :, case, Token, ., VAR, :, if, (, node, instanceof, VariableDeclaration, ), {, return]
[), ;, case, Token, ., CONST, :, case, Token, ., VAR, :, if, (, node, instanceof, VariableDeclaration, ), {, return]
[:, case, Token, ., VAR, :, if, (, node, instanceof, VariableDeclaration, ), {, return, processVariableDeclaration, (, (, VariableDeclaration, ), node]
[., CONST, :, case, Token, ., VAR, :, if, (, node, instanceof, VariableDeclaration, ), {, return, processVariableDeclaration, (, (, VariableDeclaration]
[:, if, (, node, instanceof, VariableDeclaration, ), {, return, processVariableDeclaration, (, (, VariableDeclaration, ), node, ), ;, }, else, if]
[., VAR, :, if, (, node, instanceof, VariableDeclaration, ), {, return, processVariableDeclaration, (, (, VariableDeclaration, ), node, ), ;, }]
[), {, return, processVariableDeclaration, (, (, VariableDeclaration, ), node, ), ;, }, else, if, (, node, instanceof, VariableInitializer, ), {]
[instanceof, VariableDeclaration, ), {, return, processVariableDeclaration, (, (, VariableDeclaration, ), node, ), ;, }, else, if, (, node, instanceof, VariableInitializer]
[;, }, else, if, (, node, instanceof, VariableInitializer, ), {, return, processVariableInitializer, (, (, VariableInitializer, ), node, ), ;, }]
[), ;, }, else, if, (, node, instanceof, VariableInitializer, ), {, return, processVariableInitializer, (, (, VariableInitializer, ), node, ), ;]
[), ;, }, else, if, (, node, instanceof, VariableInitializer, ), {, return, processVariableInitializer, (, (, VariableInitializer, ), node, ), ;]
[), {, return, processVariableInitializer, (, (, VariableInitializer, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +]
[instanceof, VariableInitializer, ), {, return, processVariableInitializer, (, (, VariableInitializer, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (]
[;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token, .]
[), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token]
[), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token]
[;, }, case, Token, ., WHILE, :, return, processWhileLoop, (, (, WhileLoop, ), node, ), ;, case, Token, ., WITH]
[), ;, }, case, Token, ., WHILE, :, return, processWhileLoop, (, (, WhileLoop, ), node, ), ;, case, Token, .]
[+, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., WHILE, :, return]
[+, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., WHILE]
[+, node, ., getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), )]
[+, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., WHILE]
[., getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }]
[+, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., WHILE, :, return]
[), ;, }, case, Token, ., WHILE, :, return, processWhileLoop, (, (, WhileLoop, ), node, ), ;, case, Token, .]
[., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., WHILE, :, return, processWhileLoop, (]
[), ), ;, }, case, Token, ., WHILE, :, return, processWhileLoop, (, (, WhileLoop, ), node, ), ;, case, Token]
[., getType, (, ), ), ), ;, }, case, Token, ., WHILE, :, return, processWhileLoop, (, (, WhileLoop, ), node]
[:, return, processWhileLoop, (, (, WhileLoop, ), node, ), ;, case, Token, ., WITH, :, return, processWithStatement, (, (, WithStatement]
[., WHILE, :, return, processWhileLoop, (, (, WhileLoop, ), node, ), ;, case, Token, ., WITH, :, return, processWithStatement, (]
[;, case, Token, ., WITH, :, return, processWithStatement, (, (, WithStatement, ), node, ), ;, }, return, processIllegalToken, (, node]
[), ;, case, Token, ., WITH, :, return, processWithStatement, (, (, WithStatement, ), node, ), ;, }, return, processIllegalToken, (]
[), ;, case, Token, ., WITH, :, return, processWithStatement, (, (, WithStatement, ), node, ), ;, }, return, processIllegalToken, (]
[:, return, processWithStatement, (, (, WithStatement, ), node, ), ;, }, return, processIllegalToken, (, node, ), ;, }, }]
[., WITH, :, return, processWithStatement, (, (, WithStatement, ), node, ), ;, }, return, processIllegalToken, (, node, ), ;, }]
[;, }, return, processIllegalToken, (, node, ), ;, }, }]
[), ;, }, return, processIllegalToken, (, node, ), ;, }, }]
[), ;, }, return, processIllegalToken, (, node, ), ;, }, }]
[;, }, }]
[), ;, }, }]
