[math3, ., optimization, ., GoalType, ;, @, Deprecated, public, class, BrentOptimizer, extends, BaseAbstractUnivariateOptimizer, {, private, static, final, double, GOLDEN_SECTION, =]
[math3, ., optimization, ., GoalType, ;, @, Deprecated, public, class, BrentOptimizer, extends, BaseAbstractUnivariateOptimizer, {, private, static, final, double, GOLDEN_SECTION, =]
[optimization, ., GoalType, ;, @, Deprecated, public, class, BrentOptimizer, extends, BaseAbstractUnivariateOptimizer, {, private, static, final, double, GOLDEN_SECTION, =, 0.5, *]
[., GoalType, ;, @, Deprecated, public, class, BrentOptimizer, extends, BaseAbstractUnivariateOptimizer, {, private, static, final, double, GOLDEN_SECTION, =, 0.5, *, (]
[., GoalType, ;, @, Deprecated, public, class, BrentOptimizer, extends, BaseAbstractUnivariateOptimizer, {, private, static, final, double, GOLDEN_SECTION, =, 0.5, *, (]
[;, @, Deprecated, public, class, BrentOptimizer, extends, BaseAbstractUnivariateOptimizer, {, private, static, final, double, GOLDEN_SECTION, =, 0.5, *, (, 3, -]
[;, @, Deprecated, public, class, BrentOptimizer, extends, BaseAbstractUnivariateOptimizer, {, private, static, final, double, GOLDEN_SECTION, =, 0.5, *, (, 3, -]
[class, BrentOptimizer, extends, BaseAbstractUnivariateOptimizer, {, private, static, final, double, GOLDEN_SECTION, =, 0.5, *, (, 3, -, FastMath, ., sqrt, (]
[=, 0.5, *, (, 3, -, FastMath, ., sqrt, (, 5, ), ), ;, private, static, final, double, MIN_RELATIVE_TOLERANCE, =]
[=, 0.5, *, (, 3, -, FastMath, ., sqrt, (, 5, ), ), ;, private, static, final, double, MIN_RELATIVE_TOLERANCE, =]
[*, (, 3, -, FastMath, ., sqrt, (, 5, ), ), ;, private, static, final, double, MIN_RELATIVE_TOLERANCE, =, 2, *]
[*, (, 3, -, FastMath, ., sqrt, (, 5, ), ), ;, private, static, final, double, MIN_RELATIVE_TOLERANCE, =, 2, *]
[FastMath, ., sqrt, (, 5, ), ), ;, private, static, final, double, MIN_RELATIVE_TOLERANCE, =, 2, *, FastMath, ., ulp, (]
[absoluteThreshold, ;, public, BrentOptimizer, (, double, rel, ,, double, abs, ,, ConvergenceChecker, <, UnivariatePointValuePair, >, checker, ), {, super, (]
[double, rel, ,, double, abs, ,, ConvergenceChecker, <, UnivariatePointValuePair, >, checker, ), {, super, (, checker, ), ;, if, (]
[double, rel, ,, double, abs, ,, ConvergenceChecker, <, UnivariatePointValuePair, >, checker, ), {, super, (, checker, ), ;, if, (]
[,, double, abs, ,, ConvergenceChecker, <, UnivariatePointValuePair, >, checker, ), {, super, (, checker, ), ;, if, (, rel, <]
[ConvergenceChecker, <, UnivariatePointValuePair, >, checker, ), {, super, (, checker, ), ;, if, (, rel, <, MIN_RELATIVE_TOLERANCE, ), {, throw]
[>, checker, ), {, super, (, checker, ), ;, if, (, rel, <, MIN_RELATIVE_TOLERANCE, ), {, throw, new, NumberIsTooSmallException, (]
[), {, super, (, checker, ), ;, if, (, rel, <, MIN_RELATIVE_TOLERANCE, ), {, throw, new, NumberIsTooSmallException, (, rel, ,]
[super, (, checker, ), ;, if, (, rel, <, MIN_RELATIVE_TOLERANCE, ), {, throw, new, NumberIsTooSmallException, (, rel, ,, MIN_RELATIVE_TOLERANCE, ,]
[(, rel, <, MIN_RELATIVE_TOLERANCE, ), {, throw, new, NumberIsTooSmallException, (, rel, ,, MIN_RELATIVE_TOLERANCE, ,, true, ), ;, }, if, (]
[(, rel, <, MIN_RELATIVE_TOLERANCE, ), {, throw, new, NumberIsTooSmallException, (, rel, ,, MIN_RELATIVE_TOLERANCE, ,, true, ), ;, }, if, (]
[<, MIN_RELATIVE_TOLERANCE, ), {, throw, new, NumberIsTooSmallException, (, rel, ,, MIN_RELATIVE_TOLERANCE, ,, true, ), ;, }, if, (, abs, <=]
[throw, new, NumberIsTooSmallException, (, rel, ,, MIN_RELATIVE_TOLERANCE, ,, true, ), ;, }, if, (, abs, <=, 0, ), {, throw]
[(, rel, ,, MIN_RELATIVE_TOLERANCE, ,, true, ), ;, }, if, (, abs, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[,, true, ), ;, }, if, (, abs, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }]
[), ;, }, if, (, abs, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }, relativeThreshold, =]
[}, if, (, abs, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }, relativeThreshold, =, rel, ;]
[(, abs, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }, relativeThreshold, =, rel, ;, absoluteThreshold, =]
[=, rel, ;, absoluteThreshold, =, abs, ;, }, public, BrentOptimizer, (, double, rel, ,, double, abs, ), {, this, (]
[;, absoluteThreshold, =, abs, ;, }, public, BrentOptimizer, (, double, rel, ,, double, abs, ), {, this, (, rel, ,]
[=, abs, ;, }, public, BrentOptimizer, (, double, rel, ,, double, abs, ), {, this, (, rel, ,, abs, ,]
[rel, ,, abs, ,, null, ), ;, }, @, Override, protected, UnivariatePointValuePair, doOptimize, (, ), {, final, boolean, isMinim, =]
[rel, ,, abs, ,, null, ), ;, }, @, Override, protected, UnivariatePointValuePair, doOptimize, (, ), {, final, boolean, isMinim, =]
[null, ), ;, }, @, Override, protected, UnivariatePointValuePair, doOptimize, (, ), {, final, boolean, isMinim, =, getGoalType, (, ), ==]
[null, ), ;, }, @, Override, protected, UnivariatePointValuePair, doOptimize, (, ), {, final, boolean, isMinim, =, getGoalType, (, ), ==]
[doOptimize, (, ), {, final, boolean, isMinim, =, getGoalType, (, ), ==, GoalType, ., MINIMIZE, ;, final, double, lo, =]
[getGoalType, (, ), ==, GoalType, ., MINIMIZE, ;, final, double, lo, =, getMin, (, ), ;, final, double, mid, =]
[final, double, lo, =, getMin, (, ), ;, final, double, mid, =, getStartValue, (, ), ;, final, double, hi, =]
[=, getStartValue, (, ), ;, final, double, hi, =, getMax, (, ), ;, final, ConvergenceChecker, <, UnivariatePointValuePair, >, checker, =]
[;, final, ConvergenceChecker, <, UnivariatePointValuePair, >, checker, =, getConvergenceChecker, (, ), ;, double, a, ;, double, b, ;, if, (]
[;, final, ConvergenceChecker, <, UnivariatePointValuePair, >, checker, =, getConvergenceChecker, (, ), ;, double, a, ;, double, b, ;, if, (]
[ConvergenceChecker, <, UnivariatePointValuePair, >, checker, =, getConvergenceChecker, (, ), ;, double, a, ;, double, b, ;, if, (, lo, <]
[>, checker, =, getConvergenceChecker, (, ), ;, double, a, ;, double, b, ;, if, (, lo, <, hi, ), {]
[=, getConvergenceChecker, (, ), ;, double, a, ;, double, b, ;, if, (, lo, <, hi, ), {, a, =]
[(, ), ;, double, a, ;, double, b, ;, if, (, lo, <, hi, ), {, a, =, lo, ;]
[;, double, a, ;, double, b, ;, if, (, lo, <, hi, ), {, a, =, lo, ;, b, =]
[b, ;, if, (, lo, <, hi, ), {, a, =, lo, ;, b, =, hi, ;, }, else, {]
[if, (, lo, <, hi, ), {, a, =, lo, ;, b, =, hi, ;, }, else, {, a, =]
[lo, <, hi, ), {, a, =, lo, ;, b, =, hi, ;, }, else, {, a, =, hi, ;]
[hi, ), {, a, =, lo, ;, b, =, hi, ;, }, else, {, a, =, hi, ;, b, =]
[;, b, =, hi, ;, }, else, {, a, =, hi, ;, b, =, lo, ;, }, double, x, =]
[}, else, {, a, =, hi, ;, b, =, lo, ;, }, double, x, =, mid, ;, double, v, =]
[hi, ;, b, =, lo, ;, }, double, x, =, mid, ;, double, v, =, x, ;, double, w, =]
[;, }, double, x, =, mid, ;, double, v, =, x, ;, double, w, =, x, ;, double, d, =]
[mid, ;, double, v, =, x, ;, double, w, =, x, ;, double, d, =, 0, ;, double, e, =]
[x, ;, double, w, =, x, ;, double, d, =, 0, ;, double, e, =, 0, ;, double, fx, =]
[double, w, =, x, ;, double, d, =, 0, ;, double, e, =, 0, ;, double, fx, =, computeObjectiveValue, (]
[double, d, =, 0, ;, double, e, =, 0, ;, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (]
[d, =, 0, ;, double, e, =, 0, ;, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (, !]
[;, double, e, =, 0, ;, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (, !, isMinim, ), {]
[e, =, 0, ;, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (, !, isMinim, ), {, fx, =]
[=, 0, ;, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (, !, isMinim, ), {, fx, =, -]
[computeObjectiveValue, (, x, ), ;, if, (, !, isMinim, ), {, fx, =, -, fx, ;, }, double, fv, =]
[if, (, !, isMinim, ), {, fx, =, -, fx, ;, }, double, fv, =, fx, ;, double, fw, =]
[{, fx, =, -, fx, ;, }, double, fv, =, fx, ;, double, fw, =, fx, ;, UnivariatePointValuePair, previous, =]
[;, }, double, fv, =, fx, ;, double, fw, =, fx, ;, UnivariatePointValuePair, previous, =, null, ;, UnivariatePointValuePair, current, =]
[fv, =, fx, ;, double, fw, =, fx, ;, UnivariatePointValuePair, previous, =, null, ;, UnivariatePointValuePair, current, =, new, UnivariatePointValuePair, (]
[fx, ;, double, fw, =, fx, ;, UnivariatePointValuePair, previous, =, null, ;, UnivariatePointValuePair, current, =, new, UnivariatePointValuePair, (, x, ,]
[fx, ;, double, fw, =, fx, ;, UnivariatePointValuePair, previous, =, null, ;, UnivariatePointValuePair, current, =, new, UnivariatePointValuePair, (, x, ,]
[double, fw, =, fx, ;, UnivariatePointValuePair, previous, =, null, ;, UnivariatePointValuePair, current, =, new, UnivariatePointValuePair, (, x, ,, isMinim, ?]
[=, fx, ;, UnivariatePointValuePair, previous, =, null, ;, UnivariatePointValuePair, current, =, new, UnivariatePointValuePair, (, x, ,, isMinim, ?, fx, :]
[fx, ;, UnivariatePointValuePair, previous, =, null, ;, UnivariatePointValuePair, current, =, new, UnivariatePointValuePair, (, x, ,, isMinim, ?, fx, :, -]
[;, UnivariatePointValuePair, current, =, new, UnivariatePointValuePair, (, x, ,, isMinim, ?, fx, :, -, fx, ), ;, UnivariatePointValuePair, best, =]
[UnivariatePointValuePair, (, x, ,, isMinim, ?, fx, :, -, fx, ), ;, UnivariatePointValuePair, best, =, current, ;, int, iter, =]
[isMinim, ?, fx, :, -, fx, ), ;, UnivariatePointValuePair, best, =, current, ;, int, iter, =, 0, ;, while, (]
[;, UnivariatePointValuePair, best, =, current, ;, int, iter, =, 0, ;, while, (, true, ), {, final, double, m, =]
[;, UnivariatePointValuePair, best, =, current, ;, int, iter, =, 0, ;, while, (, true, ), {, final, double, m, =]
[best, =, current, ;, int, iter, =, 0, ;, while, (, true, ), {, final, double, m, =, 0.5, *]
[=, current, ;, int, iter, =, 0, ;, while, (, true, ), {, final, double, m, =, 0.5, *, (]
[=, current, ;, int, iter, =, 0, ;, while, (, true, ), {, final, double, m, =, 0.5, *, (]
[;, int, iter, =, 0, ;, while, (, true, ), {, final, double, m, =, 0.5, *, (, a, +]
[(, true, ), {, final, double, m, =, 0.5, *, (, a, +, b, ), ;, final, double, tol1, =]
[(, true, ), {, final, double, m, =, 0.5, *, (, a, +, b, ), ;, final, double, tol1, =]
[(, true, ), {, final, double, m, =, 0.5, *, (, a, +, b, ), ;, final, double, tol1, =]
[), {, final, double, m, =, 0.5, *, (, a, +, b, ), ;, final, double, tol1, =, relativeThreshold, *]
[), {, final, double, m, =, 0.5, *, (, a, +, b, ), ;, final, double, tol1, =, relativeThreshold, *]
[m, =, 0.5, *, (, a, +, b, ), ;, final, double, tol1, =, relativeThreshold, *, FastMath, ., abs, (]
[*, (, a, +, b, ), ;, final, double, tol1, =, relativeThreshold, *, FastMath, ., abs, (, x, ), +]
[;, final, double, tol1, =, relativeThreshold, *, FastMath, ., abs, (, x, ), +, absoluteThreshold, ;, final, double, tol2, =]
[;, final, double, tol1, =, relativeThreshold, *, FastMath, ., abs, (, x, ), +, absoluteThreshold, ;, final, double, tol2, =]
[double, tol1, =, relativeThreshold, *, FastMath, ., abs, (, x, ), +, absoluteThreshold, ;, final, double, tol2, =, 2, *]
[., abs, (, x, ), +, absoluteThreshold, ;, final, double, tol2, =, 2, *, tol1, ;, final, boolean, stop, =]
[., abs, (, x, ), +, absoluteThreshold, ;, final, double, tol2, =, 2, *, tol1, ;, final, boolean, stop, =]
[., abs, (, x, ), +, absoluteThreshold, ;, final, double, tol2, =, 2, *, tol1, ;, final, boolean, stop, =]
[), +, absoluteThreshold, ;, final, double, tol2, =, 2, *, tol1, ;, final, boolean, stop, =, FastMath, ., abs, (]
[), +, absoluteThreshold, ;, final, double, tol2, =, 2, *, tol1, ;, final, boolean, stop, =, FastMath, ., abs, (]
[absoluteThreshold, ;, final, double, tol2, =, 2, *, tol1, ;, final, boolean, stop, =, FastMath, ., abs, (, x, -]
[double, tol2, =, 2, *, tol1, ;, final, boolean, stop, =, FastMath, ., abs, (, x, -, m, ), <=]
[double, tol2, =, 2, *, tol1, ;, final, boolean, stop, =, FastMath, ., abs, (, x, -, m, ), <=]
[=, 2, *, tol1, ;, final, boolean, stop, =, FastMath, ., abs, (, x, -, m, ), <=, tol2, -]
[=, 2, *, tol1, ;, final, boolean, stop, =, FastMath, ., abs, (, x, -, m, ), <=, tol2, -]
[*, tol1, ;, final, boolean, stop, =, FastMath, ., abs, (, x, -, m, ), <=, tol2, -, 0.5, *]
[tol1, ;, final, boolean, stop, =, FastMath, ., abs, (, x, -, m, ), <=, tol2, -, 0.5, *, (]
[tol1, ;, final, boolean, stop, =, FastMath, ., abs, (, x, -, m, ), <=, tol2, -, 0.5, *, (]
[final, boolean, stop, =, FastMath, ., abs, (, x, -, m, ), <=, tol2, -, 0.5, *, (, b, -]
[., abs, (, x, -, m, ), <=, tol2, -, 0.5, *, (, b, -, a, ), ;, if, (]
[abs, (, x, -, m, ), <=, tol2, -, 0.5, *, (, b, -, a, ), ;, if, (, !]
[<=, tol2, -, 0.5, *, (, b, -, a, ), ;, if, (, !, stop, ), {, double, p, =]
[(, b, -, a, ), ;, if, (, !, stop, ), {, double, p, =, 0, ;, double, q, =]
[;, if, (, !, stop, ), {, double, p, =, 0, ;, double, q, =, 0, ;, double, r, =]
[), {, double, p, =, 0, ;, double, q, =, 0, ;, double, r, =, 0, ;, double, u, =]
[=, 0, ;, double, q, =, 0, ;, double, r, =, 0, ;, double, u, =, 0, ;, if, (]
[=, 0, ;, double, q, =, 0, ;, double, r, =, 0, ;, double, u, =, 0, ;, if, (]
[=, 0, ;, double, q, =, 0, ;, double, r, =, 0, ;, double, u, =, 0, ;, if, (]
[q, =, 0, ;, double, r, =, 0, ;, double, u, =, 0, ;, if, (, FastMath, ., abs, (]
[;, double, r, =, 0, ;, double, u, =, 0, ;, if, (, FastMath, ., abs, (, e, ), >]
[=, 0, ;, double, u, =, 0, ;, if, (, FastMath, ., abs, (, e, ), >, tol1, ), {]
[;, double, u, =, 0, ;, if, (, FastMath, ., abs, (, e, ), >, tol1, ), {, r, =]
[;, double, u, =, 0, ;, if, (, FastMath, ., abs, (, e, ), >, tol1, ), {, r, =]
[double, u, =, 0, ;, if, (, FastMath, ., abs, (, e, ), >, tol1, ), {, r, =, (]
[double, u, =, 0, ;, if, (, FastMath, ., abs, (, e, ), >, tol1, ), {, r, =, (]
[=, 0, ;, if, (, FastMath, ., abs, (, e, ), >, tol1, ), {, r, =, (, x, -]
[if, (, FastMath, ., abs, (, e, ), >, tol1, ), {, r, =, (, x, -, w, ), *]
[(, FastMath, ., abs, (, e, ), >, tol1, ), {, r, =, (, x, -, w, ), *, (]
[(, FastMath, ., abs, (, e, ), >, tol1, ), {, r, =, (, x, -, w, ), *, (]
[., abs, (, e, ), >, tol1, ), {, r, =, (, x, -, w, ), *, (, fx, -]
[e, ), >, tol1, ), {, r, =, (, x, -, w, ), *, (, fx, -, fv, ), ;]
[>, tol1, ), {, r, =, (, x, -, w, ), *, (, fx, -, fv, ), ;, q, =]
[>, tol1, ), {, r, =, (, x, -, w, ), *, (, fx, -, fv, ), ;, q, =]
[tol1, ), {, r, =, (, x, -, w, ), *, (, fx, -, fv, ), ;, q, =, (]
[tol1, ), {, r, =, (, x, -, w, ), *, (, fx, -, fv, ), ;, q, =, (]
[{, r, =, (, x, -, w, ), *, (, fx, -, fv, ), ;, q, =, (, x, -]
[(, x, -, w, ), *, (, fx, -, fv, ), ;, q, =, (, x, -, v, ), *]
[x, -, w, ), *, (, fx, -, fv, ), ;, q, =, (, x, -, v, ), *, (]
[x, -, w, ), *, (, fx, -, fv, ), ;, q, =, (, x, -, v, ), *, (]
[w, ), *, (, fx, -, fv, ), ;, q, =, (, x, -, v, ), *, (, fx, -]
[(, fx, -, fv, ), ;, q, =, (, x, -, v, ), *, (, fx, -, fw, ), ;]
[-, fv, ), ;, q, =, (, x, -, v, ), *, (, fx, -, fw, ), ;, p, =]
[-, fv, ), ;, q, =, (, x, -, v, ), *, (, fx, -, fw, ), ;, p, =]
[-, fv, ), ;, q, =, (, x, -, v, ), *, (, fx, -, fw, ), ;, p, =]
[fv, ), ;, q, =, (, x, -, v, ), *, (, fx, -, fw, ), ;, p, =, (]
[fv, ), ;, q, =, (, x, -, v, ), *, (, fx, -, fw, ), ;, p, =, (]
[;, q, =, (, x, -, v, ), *, (, fx, -, fw, ), ;, p, =, (, x, -]
[(, x, -, v, ), *, (, fx, -, fw, ), ;, p, =, (, x, -, v, ), *]
[-, v, ), *, (, fx, -, fw, ), ;, p, =, (, x, -, v, ), *, q, -]
[-, v, ), *, (, fx, -, fw, ), ;, p, =, (, x, -, v, ), *, q, -]
[v, ), *, (, fx, -, fw, ), ;, p, =, (, x, -, v, ), *, q, -, (]
[v, ), *, (, fx, -, fw, ), ;, p, =, (, x, -, v, ), *, q, -, (]
[*, (, fx, -, fw, ), ;, p, =, (, x, -, v, ), *, q, -, (, x, -]
[-, fw, ), ;, p, =, (, x, -, v, ), *, q, -, (, x, -, w, ), *]
[), ;, p, =, (, x, -, v, ), *, q, -, (, x, -, w, ), *, r, ;]
[p, =, (, x, -, v, ), *, q, -, (, x, -, w, ), *, r, ;, q, =]
[p, =, (, x, -, v, ), *, q, -, (, x, -, w, ), *, r, ;, q, =]
[(, x, -, v, ), *, q, -, (, x, -, w, ), *, r, ;, q, =, 2, *]
[x, -, v, ), *, q, -, (, x, -, w, ), *, r, ;, q, =, 2, *, (]
[x, -, v, ), *, q, -, (, x, -, w, ), *, r, ;, q, =, 2, *, (]
[v, ), *, q, -, (, x, -, w, ), *, r, ;, q, =, 2, *, (, q, -]
[(, x, -, w, ), *, r, ;, q, =, 2, *, (, q, -, r, ), ;, if, (]
[(, x, -, w, ), *, r, ;, q, =, 2, *, (, q, -, r, ), ;, if, (]
[-, w, ), *, r, ;, q, =, 2, *, (, q, -, r, ), ;, if, (, q, >]
[*, r, ;, q, =, 2, *, (, q, -, r, ), ;, if, (, q, >, 0, ), {]
[;, q, =, 2, *, (, q, -, r, ), ;, if, (, q, >, 0, ), {, p, =]
[q, =, 2, *, (, q, -, r, ), ;, if, (, q, >, 0, ), {, p, =, -]
[q, -, r, ), ;, if, (, q, >, 0, ), {, p, =, -, p, ;, }, else, {]
[r, ), ;, if, (, q, >, 0, ), {, p, =, -, p, ;, }, else, {, q, =]
[), ;, if, (, q, >, 0, ), {, p, =, -, p, ;, }, else, {, q, =, -]
[(, q, >, 0, ), {, p, =, -, p, ;, }, else, {, q, =, -, q, ;, }]
[>, 0, ), {, p, =, -, p, ;, }, else, {, q, =, -, q, ;, }, r, =]
[), {, p, =, -, p, ;, }, else, {, q, =, -, q, ;, }, r, =, e, ;]
[p, =, -, p, ;, }, else, {, q, =, -, q, ;, }, r, =, e, ;, e, =]
[;, }, else, {, q, =, -, q, ;, }, r, =, e, ;, e, =, d, ;, if, (]
[;, }, else, {, q, =, -, q, ;, }, r, =, e, ;, e, =, d, ;, if, (]
[;, }, else, {, q, =, -, q, ;, }, r, =, e, ;, e, =, d, ;, if, (]
[;, }, else, {, q, =, -, q, ;, }, r, =, e, ;, e, =, d, ;, if, (]
[else, {, q, =, -, q, ;, }, r, =, e, ;, e, =, d, ;, if, (, p, >]
[else, {, q, =, -, q, ;, }, r, =, e, ;, e, =, d, ;, if, (, p, >]
[q, =, -, q, ;, }, r, =, e, ;, e, =, d, ;, if, (, p, >, q, *]
[=, -, q, ;, }, r, =, e, ;, e, =, d, ;, if, (, p, >, q, *, (]
[=, -, q, ;, }, r, =, e, ;, e, =, d, ;, if, (, p, >, q, *, (]
[q, ;, }, r, =, e, ;, e, =, d, ;, if, (, p, >, q, *, (, a, -]
[r, =, e, ;, e, =, d, ;, if, (, p, >, q, *, (, a, -, x, ), &&]
[r, =, e, ;, e, =, d, ;, if, (, p, >, q, *, (, a, -, x, ), &&]
[e, ;, e, =, d, ;, if, (, p, >, q, *, (, a, -, x, ), &&, p, <]
[e, ;, e, =, d, ;, if, (, p, >, q, *, (, a, -, x, ), &&, p, <]
[e, =, d, ;, if, (, p, >, q, *, (, a, -, x, ), &&, p, <, q, *]
[=, d, ;, if, (, p, >, q, *, (, a, -, x, ), &&, p, <, q, *, (]
[=, d, ;, if, (, p, >, q, *, (, a, -, x, ), &&, p, <, q, *, (]
[;, if, (, p, >, q, *, (, a, -, x, ), &&, p, <, q, *, (, b, -]
[p, >, q, *, (, a, -, x, ), &&, p, <, q, *, (, b, -, x, ), &&]
[p, >, q, *, (, a, -, x, ), &&, p, <, q, *, (, b, -, x, ), &&]
[p, >, q, *, (, a, -, x, ), &&, p, <, q, *, (, b, -, x, ), &&]
[(, a, -, x, ), &&, p, <, q, *, (, b, -, x, ), &&, FastMath, ., abs, (]
[x, ), &&, p, <, q, *, (, b, -, x, ), &&, FastMath, ., abs, (, p, ), <]
[x, ), &&, p, <, q, *, (, b, -, x, ), &&, FastMath, ., abs, (, p, ), <]
[<, q, *, (, b, -, x, ), &&, FastMath, ., abs, (, p, ), <, FastMath, ., abs, (]
[<, q, *, (, b, -, x, ), &&, FastMath, ., abs, (, p, ), <, FastMath, ., abs, (]
[<, q, *, (, b, -, x, ), &&, FastMath, ., abs, (, p, ), <, FastMath, ., abs, (]
[*, (, b, -, x, ), &&, FastMath, ., abs, (, p, ), <, FastMath, ., abs, (, 0.5, *]
[b, -, x, ), &&, FastMath, ., abs, (, p, ), <, FastMath, ., abs, (, 0.5, *, q, *]
[&&, FastMath, ., abs, (, p, ), <, FastMath, ., abs, (, 0.5, *, q, *, r, ), ), {]
[., abs, (, p, ), <, FastMath, ., abs, (, 0.5, *, q, *, r, ), ), {, d, =]
[., abs, (, p, ), <, FastMath, ., abs, (, 0.5, *, q, *, r, ), ), {, d, =]
[(, p, ), <, FastMath, ., abs, (, 0.5, *, q, *, r, ), ), {, d, =, p, /]
[), <, FastMath, ., abs, (, 0.5, *, q, *, r, ), ), {, d, =, p, /, q, ;]
[FastMath, ., abs, (, 0.5, *, q, *, r, ), ), {, d, =, p, /, q, ;, u, =]
[FastMath, ., abs, (, 0.5, *, q, *, r, ), ), {, d, =, p, /, q, ;, u, =]
[abs, (, 0.5, *, q, *, r, ), ), {, d, =, p, /, q, ;, u, =, x, +]
[q, *, r, ), ), {, d, =, p, /, q, ;, u, =, x, +, d, ;, if, (]
[q, *, r, ), ), {, d, =, p, /, q, ;, u, =, x, +, d, ;, if, (]
[q, *, r, ), ), {, d, =, p, /, q, ;, u, =, x, +, d, ;, if, (]
[q, *, r, ), ), {, d, =, p, /, q, ;, u, =, x, +, d, ;, if, (]
[r, ), ), {, d, =, p, /, q, ;, u, =, x, +, d, ;, if, (, u, -]
[), {, d, =, p, /, q, ;, u, =, x, +, d, ;, if, (, u, -, a, <]
[d, =, p, /, q, ;, u, =, x, +, d, ;, if, (, u, -, a, <, tol2, ||]
[d, =, p, /, q, ;, u, =, x, +, d, ;, if, (, u, -, a, <, tol2, ||]
[d, =, p, /, q, ;, u, =, x, +, d, ;, if, (, u, -, a, <, tol2, ||]
[p, /, q, ;, u, =, x, +, d, ;, if, (, u, -, a, <, tol2, ||, b, -]
[q, ;, u, =, x, +, d, ;, if, (, u, -, a, <, tol2, ||, b, -, u, <]
[+, d, ;, if, (, u, -, a, <, tol2, ||, b, -, u, <, tol2, ), {, if, (]
[+, d, ;, if, (, u, -, a, <, tol2, ||, b, -, u, <, tol2, ), {, if, (]
[;, if, (, u, -, a, <, tol2, ||, b, -, u, <, tol2, ), {, if, (, x, <=]
[u, -, a, <, tol2, ||, b, -, u, <, tol2, ), {, if, (, x, <=, m, ), {]
[a, <, tol2, ||, b, -, u, <, tol2, ), {, if, (, x, <=, m, ), {, d, =]
[-, u, <, tol2, ), {, if, (, x, <=, m, ), {, d, =, tol1, ;, }, else, {]
[<, tol2, ), {, if, (, x, <=, m, ), {, d, =, tol1, ;, }, else, {, d, =]
[tol2, ), {, if, (, x, <=, m, ), {, d, =, tol1, ;, }, else, {, d, =, -]
[{, d, =, tol1, ;, }, else, {, d, =, -, tol1, ;, }, }, }, else, {, if, (]
[{, d, =, tol1, ;, }, else, {, d, =, -, tol1, ;, }, }, }, else, {, if, (]
[=, tol1, ;, }, else, {, d, =, -, tol1, ;, }, }, }, else, {, if, (, x, <]
[}, else, {, d, =, -, tol1, ;, }, }, }, else, {, if, (, x, <, m, ), {]
[{, d, =, -, tol1, ;, }, }, }, else, {, if, (, x, <, m, ), {, e, =]
[{, d, =, -, tol1, ;, }, }, }, else, {, if, (, x, <, m, ), {, e, =]
[=, -, tol1, ;, }, }, }, else, {, if, (, x, <, m, ), {, e, =, b, -]
[}, }, else, {, if, (, x, <, m, ), {, e, =, b, -, x, ;, }, else, {]
[else, {, if, (, x, <, m, ), {, e, =, b, -, x, ;, }, else, {, e, =]
[else, {, if, (, x, <, m, ), {, e, =, b, -, x, ;, }, else, {, e, =]
[if, (, x, <, m, ), {, e, =, b, -, x, ;, }, else, {, e, =, a, -]
[<, m, ), {, e, =, b, -, x, ;, }, else, {, e, =, a, -, x, ;, }]
[), {, e, =, b, -, x, ;, }, else, {, e, =, a, -, x, ;, }, d, =]
[), {, e, =, b, -, x, ;, }, else, {, e, =, a, -, x, ;, }, d, =]
[e, =, b, -, x, ;, }, else, {, e, =, a, -, x, ;, }, d, =, GOLDEN_SECTION, *]
[{, e, =, a, -, x, ;, }, d, =, GOLDEN_SECTION, *, e, ;, }, }, else, {, if, (]
[{, e, =, a, -, x, ;, }, d, =, GOLDEN_SECTION, *, e, ;, }, }, else, {, if, (]
[=, a, -, x, ;, }, d, =, GOLDEN_SECTION, *, e, ;, }, }, else, {, if, (, x, <]
[x, ;, }, d, =, GOLDEN_SECTION, *, e, ;, }, }, else, {, if, (, x, <, m, ), {]
[}, d, =, GOLDEN_SECTION, *, e, ;, }, }, else, {, if, (, x, <, m, ), {, e, =]
[}, d, =, GOLDEN_SECTION, *, e, ;, }, }, else, {, if, (, x, <, m, ), {, e, =]
[=, GOLDEN_SECTION, *, e, ;, }, }, else, {, if, (, x, <, m, ), {, e, =, b, -]
[}, }, else, {, if, (, x, <, m, ), {, e, =, b, -, x, ;, }, else, {]
[else, {, if, (, x, <, m, ), {, e, =, b, -, x, ;, }, else, {, e, =]
[else, {, if, (, x, <, m, ), {, e, =, b, -, x, ;, }, else, {, e, =]
[if, (, x, <, m, ), {, e, =, b, -, x, ;, }, else, {, e, =, a, -]
[<, m, ), {, e, =, b, -, x, ;, }, else, {, e, =, a, -, x, ;, }]
[), {, e, =, b, -, x, ;, }, else, {, e, =, a, -, x, ;, }, d, =]
[), {, e, =, b, -, x, ;, }, else, {, e, =, a, -, x, ;, }, d, =]
[e, =, b, -, x, ;, }, else, {, e, =, a, -, x, ;, }, d, =, GOLDEN_SECTION, *]
[;, }, else, {, e, =, a, -, x, ;, }, d, =, GOLDEN_SECTION, *, e, ;, }, if, (]
[;, }, else, {, e, =, a, -, x, ;, }, d, =, GOLDEN_SECTION, *, e, ;, }, if, (]
[;, }, else, {, e, =, a, -, x, ;, }, d, =, GOLDEN_SECTION, *, e, ;, }, if, (]
[e, =, a, -, x, ;, }, d, =, GOLDEN_SECTION, *, e, ;, }, if, (, FastMath, ., abs, (]
[-, x, ;, }, d, =, GOLDEN_SECTION, *, e, ;, }, if, (, FastMath, ., abs, (, d, ), <]
[=, GOLDEN_SECTION, *, e, ;, }, if, (, FastMath, ., abs, (, d, ), <, tol1, ), {, if, (]
[=, GOLDEN_SECTION, *, e, ;, }, if, (, FastMath, ., abs, (, d, ), <, tol1, ), {, if, (]
[*, e, ;, }, if, (, FastMath, ., abs, (, d, ), <, tol1, ), {, if, (, d, >=]
[}, if, (, FastMath, ., abs, (, d, ), <, tol1, ), {, if, (, d, >=, 0, ), {]
[(, FastMath, ., abs, (, d, ), <, tol1, ), {, if, (, d, >=, 0, ), {, u, =]
[(, FastMath, ., abs, (, d, ), <, tol1, ), {, if, (, d, >=, 0, ), {, u, =]
[., abs, (, d, ), <, tol1, ), {, if, (, d, >=, 0, ), {, u, =, x, +]
[<, tol1, ), {, if, (, d, >=, 0, ), {, u, =, x, +, tol1, ;, }, else, {]
[), {, if, (, d, >=, 0, ), {, u, =, x, +, tol1, ;, }, else, {, u, =]
[), {, if, (, d, >=, 0, ), {, u, =, x, +, tol1, ;, }, else, {, u, =]
[if, (, d, >=, 0, ), {, u, =, x, +, tol1, ;, }, else, {, u, =, x, -]
[{, u, =, x, +, tol1, ;, }, else, {, u, =, x, -, tol1, ;, }, }, else, {]
[=, x, +, tol1, ;, }, else, {, u, =, x, -, tol1, ;, }, }, else, {, u, =]
[=, x, +, tol1, ;, }, else, {, u, =, x, -, tol1, ;, }, }, else, {, u, =]
[+, tol1, ;, }, else, {, u, =, x, -, tol1, ;, }, }, else, {, u, =, x, +]
[u, =, x, -, tol1, ;, }, }, else, {, u, =, x, +, d, ;, }, double, fu, =]
[x, -, tol1, ;, }, }, else, {, u, =, x, +, d, ;, }, double, fu, =, computeObjectiveValue, (]
[}, else, {, u, =, x, +, d, ;, }, double, fu, =, computeObjectiveValue, (, u, ), ;, if, (]
[else, {, u, =, x, +, d, ;, }, double, fu, =, computeObjectiveValue, (, u, ), ;, if, (, !]
[=, x, +, d, ;, }, double, fu, =, computeObjectiveValue, (, u, ), ;, if, (, !, isMinim, ), {]
[+, d, ;, }, double, fu, =, computeObjectiveValue, (, u, ), ;, if, (, !, isMinim, ), {, fu, =]
[d, ;, }, double, fu, =, computeObjectiveValue, (, u, ), ;, if, (, !, isMinim, ), {, fu, =, -]
[double, fu, =, computeObjectiveValue, (, u, ), ;, if, (, !, isMinim, ), {, fu, =, -, fu, ;, }]
[=, computeObjectiveValue, (, u, ), ;, if, (, !, isMinim, ), {, fu, =, -, fu, ;, }, previous, =]
[(, u, ), ;, if, (, !, isMinim, ), {, fu, =, -, fu, ;, }, previous, =, current, ;]
[), ;, if, (, !, isMinim, ), {, fu, =, -, fu, ;, }, previous, =, current, ;, current, =]
[(, !, isMinim, ), {, fu, =, -, fu, ;, }, previous, =, current, ;, current, =, new, UnivariatePointValuePair, (]
[isMinim, ), {, fu, =, -, fu, ;, }, previous, =, current, ;, current, =, new, UnivariatePointValuePair, (, u, ,]
[isMinim, ), {, fu, =, -, fu, ;, }, previous, =, current, ;, current, =, new, UnivariatePointValuePair, (, u, ,]
[{, fu, =, -, fu, ;, }, previous, =, current, ;, current, =, new, UnivariatePointValuePair, (, u, ,, isMinim, ?]
[=, -, fu, ;, }, previous, =, current, ;, current, =, new, UnivariatePointValuePair, (, u, ,, isMinim, ?, fu, :]
[-, fu, ;, }, previous, =, current, ;, current, =, new, UnivariatePointValuePair, (, u, ,, isMinim, ?, fu, :, -]
[}, previous, =, current, ;, current, =, new, UnivariatePointValuePair, (, u, ,, isMinim, ?, fu, :, -, fu, ), ;]
[=, current, ;, current, =, new, UnivariatePointValuePair, (, u, ,, isMinim, ?, fu, :, -, fu, ), ;, best, =]
[;, current, =, new, UnivariatePointValuePair, (, u, ,, isMinim, ?, fu, :, -, fu, ), ;, best, =, best, (]
[=, new, UnivariatePointValuePair, (, u, ,, isMinim, ?, fu, :, -, fu, ), ;, best, =, best, (, best, ,]
[UnivariatePointValuePair, (, u, ,, isMinim, ?, fu, :, -, fu, ), ;, best, =, best, (, best, ,, best, (]
[u, ,, isMinim, ?, fu, :, -, fu, ), ;, best, =, best, (, best, ,, best, (, previous, ,]
[isMinim, ?, fu, :, -, fu, ), ;, best, =, best, (, best, ,, best, (, previous, ,, current, ,]
[:, -, fu, ), ;, best, =, best, (, best, ,, best, (, previous, ,, current, ,, isMinim, ), ,]
[best, =, best, (, best, ,, best, (, previous, ,, current, ,, isMinim, ), ,, isMinim, ), ;, if, (]
[best, =, best, (, best, ,, best, (, previous, ,, current, ,, isMinim, ), ,, isMinim, ), ;, if, (]
[best, =, best, (, best, ,, best, (, previous, ,, current, ,, isMinim, ), ,, isMinim, ), ;, if, (]
[best, (, best, ,, best, (, previous, ,, current, ,, isMinim, ), ,, isMinim, ), ;, if, (, checker, !=]
[best, ,, best, (, previous, ,, current, ,, isMinim, ), ,, isMinim, ), ;, if, (, checker, !=, null, &&]
[best, ,, best, (, previous, ,, current, ,, isMinim, ), ,, isMinim, ), ;, if, (, checker, !=, null, &&]
[previous, ,, current, ,, isMinim, ), ,, isMinim, ), ;, if, (, checker, !=, null, &&, checker, ., converged, (]
[current, ,, isMinim, ), ,, isMinim, ), ;, if, (, checker, !=, null, &&, checker, ., converged, (, iter, ,]
[isMinim, ), ,, isMinim, ), ;, if, (, checker, !=, null, &&, checker, ., converged, (, iter, ,, previous, ,]
[;, if, (, checker, !=, null, &&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, return]
[null, &&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, return, best, ;, }, if, (]
[null, &&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, return, best, ;, }, if, (]
[checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, return, best, ;, }, if, (, fu, <=]
[,, previous, ,, current, ), ), {, return, best, ;, }, if, (, fu, <=, fx, ), {, if, (]
[,, previous, ,, current, ), ), {, return, best, ;, }, if, (, fu, <=, fx, ), {, if, (]
[,, current, ), ), {, return, best, ;, }, if, (, fu, <=, fx, ), {, if, (, u, <]
[), {, return, best, ;, }, if, (, fu, <=, fx, ), {, if, (, u, <, x, ), {]
[return, best, ;, }, if, (, fu, <=, fx, ), {, if, (, u, <, x, ), {, b, =]
[(, fu, <=, fx, ), {, if, (, u, <, x, ), {, b, =, x, ;, }, else, {]
[<=, fx, ), {, if, (, u, <, x, ), {, b, =, x, ;, }, else, {, a, =]
[{, if, (, u, <, x, ), {, b, =, x, ;, }, else, {, a, =, x, ;, }]
[(, u, <, x, ), {, b, =, x, ;, }, else, {, a, =, x, ;, }, v, =]
[<, x, ), {, b, =, x, ;, }, else, {, a, =, x, ;, }, v, =, w, ;]
[), {, b, =, x, ;, }, else, {, a, =, x, ;, }, v, =, w, ;, fv, =]
[b, =, x, ;, }, else, {, a, =, x, ;, }, v, =, w, ;, fv, =, fw, ;]
[x, ;, }, else, {, a, =, x, ;, }, v, =, w, ;, fv, =, fw, ;, w, =]
[}, else, {, a, =, x, ;, }, v, =, w, ;, fv, =, fw, ;, w, =, x, ;]
[{, a, =, x, ;, }, v, =, w, ;, fv, =, fw, ;, w, =, x, ;, fw, =]
[=, x, ;, }, v, =, w, ;, fv, =, fw, ;, w, =, x, ;, fw, =, fx, ;]
[;, }, v, =, w, ;, fv, =, fw, ;, w, =, x, ;, fw, =, fx, ;, x, =]
[v, =, w, ;, fv, =, fw, ;, w, =, x, ;, fw, =, fx, ;, x, =, u, ;]
[w, ;, fv, =, fw, ;, w, =, x, ;, fw, =, fx, ;, x, =, u, ;, fx, =]
[=, x, ;, fw, =, fx, ;, x, =, u, ;, fx, =, fu, ;, }, else, {, if, (]
[=, x, ;, fw, =, fx, ;, x, =, u, ;, fx, =, fu, ;, }, else, {, if, (]
[;, fw, =, fx, ;, x, =, u, ;, fx, =, fu, ;, }, else, {, if, (, u, <]
[fx, ;, x, =, u, ;, fx, =, fu, ;, }, else, {, if, (, u, <, x, ), {]
[x, =, u, ;, fx, =, fu, ;, }, else, {, if, (, u, <, x, ), {, a, =]
[=, fu, ;, }, else, {, if, (, u, <, x, ), {, a, =, u, ;, }, else, {]
[;, }, else, {, if, (, u, <, x, ), {, a, =, u, ;, }, else, {, b, =]
[(, u, <, x, ), {, a, =, u, ;, }, else, {, b, =, u, ;, }, if, (]
[(, u, <, x, ), {, a, =, u, ;, }, else, {, b, =, u, ;, }, if, (]
[(, u, <, x, ), {, a, =, u, ;, }, else, {, b, =, u, ;, }, if, (]
[<, x, ), {, a, =, u, ;, }, else, {, b, =, u, ;, }, if, (, fu, <=]
[), {, a, =, u, ;, }, else, {, b, =, u, ;, }, if, (, fu, <=, fw, ||]
[), {, a, =, u, ;, }, else, {, b, =, u, ;, }, if, (, fu, <=, fw, ||]
[u, ;, }, else, {, b, =, u, ;, }, if, (, fu, <=, fw, ||, Precision, ., equals, (]
[}, else, {, b, =, u, ;, }, if, (, fu, <=, fw, ||, Precision, ., equals, (, w, ,]
[=, u, ;, }, if, (, fu, <=, fw, ||, Precision, ., equals, (, w, ,, x, ), ), {]
[;, }, if, (, fu, <=, fw, ||, Precision, ., equals, (, w, ,, x, ), ), {, v, =]
[if, (, fu, <=, fw, ||, Precision, ., equals, (, w, ,, x, ), ), {, v, =, w, ;]
[fu, <=, fw, ||, Precision, ., equals, (, w, ,, x, ), ), {, v, =, w, ;, fv, =]
[fw, ||, Precision, ., equals, (, w, ,, x, ), ), {, v, =, w, ;, fv, =, fw, ;]
[Precision, ., equals, (, w, ,, x, ), ), {, v, =, w, ;, fv, =, fw, ;, w, =]
[equals, (, w, ,, x, ), ), {, v, =, w, ;, fv, =, fw, ;, w, =, u, ;]
[w, ,, x, ), ), {, v, =, w, ;, fv, =, fw, ;, w, =, u, ;, fw, =]
[v, =, w, ;, fv, =, fw, ;, w, =, u, ;, fw, =, fu, ;, }, else, if, (]
[v, =, w, ;, fv, =, fw, ;, w, =, u, ;, fw, =, fu, ;, }, else, if, (]
[v, =, w, ;, fv, =, fw, ;, w, =, u, ;, fw, =, fu, ;, }, else, if, (]
[v, =, w, ;, fv, =, fw, ;, w, =, u, ;, fw, =, fu, ;, }, else, if, (]
[w, ;, fv, =, fw, ;, w, =, u, ;, fw, =, fu, ;, }, else, if, (, fu, <=]
[fv, =, fw, ;, w, =, u, ;, fw, =, fu, ;, }, else, if, (, fu, <=, fv, ||]
[fv, =, fw, ;, w, =, u, ;, fw, =, fu, ;, }, else, if, (, fu, <=, fv, ||]
[w, =, u, ;, fw, =, fu, ;, }, else, if, (, fu, <=, fv, ||, Precision, ., equals, (]
[u, ;, fw, =, fu, ;, }, else, if, (, fu, <=, fv, ||, Precision, ., equals, (, v, ,]
[=, fu, ;, }, else, if, (, fu, <=, fv, ||, Precision, ., equals, (, v, ,, x, ), ||]
[=, fu, ;, }, else, if, (, fu, <=, fv, ||, Precision, ., equals, (, v, ,, x, ), ||]
[else, if, (, fu, <=, fv, ||, Precision, ., equals, (, v, ,, x, ), ||, Precision, ., equals, (]
[(, fu, <=, fv, ||, Precision, ., equals, (, v, ,, x, ), ||, Precision, ., equals, (, v, ,]
[||, Precision, ., equals, (, v, ,, x, ), ||, Precision, ., equals, (, v, ,, w, ), ), {]
[., equals, (, v, ,, x, ), ||, Precision, ., equals, (, v, ,, w, ), ), {, v, =]
[(, v, ,, x, ), ||, Precision, ., equals, (, v, ,, w, ), ), {, v, =, u, ;]
[,, x, ), ||, Precision, ., equals, (, v, ,, w, ), ), {, v, =, u, ;, fv, =]
[v, ,, w, ), ), {, v, =, u, ;, fv, =, fu, ;, }, }, }, else, {, return]
[w, ), ), {, v, =, u, ;, fv, =, fu, ;, }, }, }, else, {, return, best, (]
[), {, v, =, u, ;, fv, =, fu, ;, }, }, }, else, {, return, best, (, best, ,]
[v, =, u, ;, fv, =, fu, ;, }, }, }, else, {, return, best, (, best, ,, best, (]
[u, ;, fv, =, fu, ;, }, }, }, else, {, return, best, (, best, ,, best, (, previous, ,]
[fv, =, fu, ;, }, }, }, else, {, return, best, (, best, ,, best, (, previous, ,, current, ,]
[;, }, }, }, else, {, return, best, (, best, ,, best, (, previous, ,, current, ,, isMinim, ), ,]
[else, {, return, best, (, best, ,, best, (, previous, ,, current, ,, isMinim, ), ,, isMinim, ), ;, }]
[{, return, best, (, best, ,, best, (, previous, ,, current, ,, isMinim, ), ,, isMinim, ), ;, }, ++]
[iter, ;, }, }, private, UnivariatePointValuePair, best, (, UnivariatePointValuePair, a, ,, UnivariatePointValuePair, b, ,, boolean, isMinim, ), {, if, (]
[iter, ;, }, }, private, UnivariatePointValuePair, best, (, UnivariatePointValuePair, a, ,, UnivariatePointValuePair, b, ,, boolean, isMinim, ), {, if, (]
[}, }, private, UnivariatePointValuePair, best, (, UnivariatePointValuePair, a, ,, UnivariatePointValuePair, b, ,, boolean, isMinim, ), {, if, (, a, ==]
[best, (, UnivariatePointValuePair, a, ,, UnivariatePointValuePair, b, ,, boolean, isMinim, ), {, if, (, a, ==, null, ), {, return]
[UnivariatePointValuePair, b, ,, boolean, isMinim, ), {, if, (, a, ==, null, ), {, return, b, ;, }, if, (]
[UnivariatePointValuePair, b, ,, boolean, isMinim, ), {, if, (, a, ==, null, ), {, return, b, ;, }, if, (]
[,, boolean, isMinim, ), {, if, (, a, ==, null, ), {, return, b, ;, }, if, (, b, ==]
[{, if, (, a, ==, null, ), {, return, b, ;, }, if, (, b, ==, null, ), {, return]
[null, ), {, return, b, ;, }, if, (, b, ==, null, ), {, return, a, ;, }, if, (]
[b, ;, }, if, (, b, ==, null, ), {, return, a, ;, }, if, (, isMinim, ), {, return]
[b, ;, }, if, (, b, ==, null, ), {, return, a, ;, }, if, (, isMinim, ), {, return]
[b, ;, }, if, (, b, ==, null, ), {, return, a, ;, }, if, (, isMinim, ), {, return]
[b, ;, }, if, (, b, ==, null, ), {, return, a, ;, }, if, (, isMinim, ), {, return]
[==, null, ), {, return, a, ;, }, if, (, isMinim, ), {, return, a, ., getValue, (, ), <=]
[==, null, ), {, return, a, ;, }, if, (, isMinim, ), {, return, a, ., getValue, (, ), <=]
[;, }, if, (, isMinim, ), {, return, a, ., getValue, (, ), <=, b, ., getValue, (, ), ?]
[if, (, isMinim, ), {, return, a, ., getValue, (, ), <=, b, ., getValue, (, ), ?, a, :]
[a, ., getValue, (, ), <=, b, ., getValue, (, ), ?, a, :, b, ;, }, else, {, return]
[a, ., getValue, (, ), <=, b, ., getValue, (, ), ?, a, :, b, ;, }, else, {, return]
[a, ., getValue, (, ), <=, b, ., getValue, (, ), ?, a, :, b, ;, }, else, {, return]
[a, ., getValue, (, ), <=, b, ., getValue, (, ), ?, a, :, b, ;, }, else, {, return]
[b, ., getValue, (, ), ?, a, :, b, ;, }, else, {, return, a, ., getValue, (, ), >=]
[b, ., getValue, (, ), ?, a, :, b, ;, }, else, {, return, a, ., getValue, (, ), >=]
[a, :, b, ;, }, else, {, return, a, ., getValue, (, ), >=, b, ., getValue, (, ), ?]
[b, ;, }, else, {, return, a, ., getValue, (, ), >=, b, ., getValue, (, ), ?, a, :]
