[S, >, minus, ;, private, BSPTree, <, S, >, parent, ;, private, Object, attribute, ;, public, BSPTree, (, ), {]
[minus, ;, private, BSPTree, <, S, >, parent, ;, private, Object, attribute, ;, public, BSPTree, (, ), {, cut, =]
[private, BSPTree, <, S, >, parent, ;, private, Object, attribute, ;, public, BSPTree, (, ), {, cut, =, null, ;]
[<, S, >, parent, ;, private, Object, attribute, ;, public, BSPTree, (, ), {, cut, =, null, ;, plus, =]
[>, parent, ;, private, Object, attribute, ;, public, BSPTree, (, ), {, cut, =, null, ;, plus, =, null, ;]
[;, private, Object, attribute, ;, public, BSPTree, (, ), {, cut, =, null, ;, plus, =, null, ;, minus, =]
[Object, attribute, ;, public, BSPTree, (, ), {, cut, =, null, ;, plus, =, null, ;, minus, =, null, ;]
[;, public, BSPTree, (, ), {, cut, =, null, ;, plus, =, null, ;, minus, =, null, ;, parent, =]
[BSPTree, (, ), {, cut, =, null, ;, plus, =, null, ;, minus, =, null, ;, parent, =, null, ;]
[), {, cut, =, null, ;, plus, =, null, ;, minus, =, null, ;, parent, =, null, ;, attribute, =]
[=, null, ;, parent, =, null, ;, attribute, =, null, ;, }, public, BSPTree, (, final, Object, attribute, ), {]
[;, parent, =, null, ;, attribute, =, null, ;, }, public, BSPTree, (, final, Object, attribute, ), {, cut, =]
[=, null, ;, attribute, =, null, ;, }, public, BSPTree, (, final, Object, attribute, ), {, cut, =, null, ;]
[;, attribute, =, null, ;, }, public, BSPTree, (, final, Object, attribute, ), {, cut, =, null, ;, plus, =]
[=, null, ;, }, public, BSPTree, (, final, Object, attribute, ), {, cut, =, null, ;, plus, =, null, ;]
[;, }, public, BSPTree, (, final, Object, attribute, ), {, cut, =, null, ;, plus, =, null, ;, minus, =]
[public, BSPTree, (, final, Object, attribute, ), {, cut, =, null, ;, plus, =, null, ;, minus, =, null, ;]
[(, final, Object, attribute, ), {, cut, =, null, ;, plus, =, null, ;, minus, =, null, ;, parent, =]
[Object, attribute, ), {, cut, =, null, ;, plus, =, null, ;, minus, =, null, ;, parent, =, null, ;]
[Object, attribute, ), {, cut, =, null, ;, plus, =, null, ;, minus, =, null, ;, parent, =, null, ;]
[cut, =, null, ;, plus, =, null, ;, minus, =, null, ;, parent, =, null, ;, this, ., attribute, =]
[,, final, BSPTree, <, S, >, plus, ,, final, BSPTree, <, S, >, minus, ,, final, Object, attribute, ), {]
[,, final, BSPTree, <, S, >, plus, ,, final, BSPTree, <, S, >, minus, ,, final, Object, attribute, ), {]
[S, >, plus, ,, final, BSPTree, <, S, >, minus, ,, final, Object, attribute, ), {, this, ., cut, =]
[plus, ,, final, BSPTree, <, S, >, minus, ,, final, Object, attribute, ), {, this, ., cut, =, cut, ;]
[plus, ,, final, BSPTree, <, S, >, minus, ,, final, Object, attribute, ), {, this, ., cut, =, cut, ;]
[<, S, >, minus, ,, final, Object, attribute, ), {, this, ., cut, =, cut, ;, this, ., plus, =]
[>, minus, ,, final, Object, attribute, ), {, this, ., cut, =, cut, ;, this, ., plus, =, plus, ;]
[>, minus, ,, final, Object, attribute, ), {, this, ., cut, =, cut, ;, this, ., plus, =, plus, ;]
[Object, attribute, ), {, this, ., cut, =, cut, ;, this, ., plus, =, plus, ;, this, ., minus, =]
[), {, this, ., cut, =, cut, ;, this, ., plus, =, plus, ;, this, ., minus, =, minus, ;]
[), {, this, ., cut, =, cut, ;, this, ., plus, =, plus, ;, this, ., minus, =, minus, ;]
[cut, =, cut, ;, this, ., plus, =, plus, ;, this, ., minus, =, minus, ;, this, ., parent, =]
[cut, ;, this, ., plus, =, plus, ;, this, ., minus, =, minus, ;, this, ., parent, =, null, ;]
[cut, ;, this, ., plus, =, plus, ;, this, ., minus, =, minus, ;, this, ., parent, =, null, ;]
[plus, =, plus, ;, this, ., minus, =, minus, ;, this, ., parent, =, null, ;, this, ., attribute, =]
[plus, ;, this, ., minus, =, minus, ;, this, ., parent, =, null, ;, this, ., attribute, =, attribute, ;]
[plus, ;, this, ., minus, =, minus, ;, this, ., parent, =, null, ;, this, ., attribute, =, attribute, ;]
[minus, =, minus, ;, this, ., parent, =, null, ;, this, ., attribute, =, attribute, ;, plus, ., parent, =]
[minus, ;, this, ., parent, =, null, ;, this, ., attribute, =, attribute, ;, plus, ., parent, =, this, ;]
[minus, ;, this, ., parent, =, null, ;, this, ., attribute, =, attribute, ;, plus, ., parent, =, this, ;]
[parent, =, null, ;, this, ., attribute, =, attribute, ;, plus, ., parent, =, this, ;, minus, ., parent, =]
[., parent, =, this, ;, }, public, boolean, insertCut, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (]
[., parent, =, this, ;, }, public, boolean, insertCut, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (]
[=, this, ;, }, public, boolean, insertCut, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=]
[}, public, boolean, insertCut, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=, null, ), {]
[}, public, boolean, insertCut, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=, null, ), {]
[(, final, Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=, null, ), {, plus, ., parent, =]
[Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=, null, ), {, plus, ., parent, =, null, ;]
[Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=, null, ), {, plus, ., parent, =, null, ;]
[hyperplane, ), {, if, (, cut, !=, null, ), {, plus, ., parent, =, null, ;, minus, ., parent, =]
[plus, ., parent, =, null, ;, minus, ., parent, =, null, ;, }, final, SubHyperplane, <, S, >, chopped, =]
[parent, =, null, ;, minus, ., parent, =, null, ;, }, final, SubHyperplane, <, S, >, chopped, =, fitToCell, (]
[parent, =, null, ;, minus, ., parent, =, null, ;, }, final, SubHyperplane, <, S, >, chopped, =, fitToCell, (]
[;, }, final, SubHyperplane, <, S, >, chopped, =, fitToCell, (, hyperplane, ., wholeHyperplane, (, ), ), ;, if, (]
[;, }, final, SubHyperplane, <, S, >, chopped, =, fitToCell, (, hyperplane, ., wholeHyperplane, (, ), ), ;, if, (]
[;, }, final, SubHyperplane, <, S, >, chopped, =, fitToCell, (, hyperplane, ., wholeHyperplane, (, ), ), ;, if, (]
[final, SubHyperplane, <, S, >, chopped, =, fitToCell, (, hyperplane, ., wholeHyperplane, (, ), ), ;, if, (, chopped, ==]
[<, S, >, chopped, =, fitToCell, (, hyperplane, ., wholeHyperplane, (, ), ), ;, if, (, chopped, ==, null, ||]
[<, S, >, chopped, =, fitToCell, (, hyperplane, ., wholeHyperplane, (, ), ), ;, if, (, chopped, ==, null, ||]
[hyperplane, ., wholeHyperplane, (, ), ), ;, if, (, chopped, ==, null, ||, chopped, ., isEmpty, (, ), ), {]
[wholeHyperplane, (, ), ), ;, if, (, chopped, ==, null, ||, chopped, ., isEmpty, (, ), ), {, cut, =]
[), ), ;, if, (, chopped, ==, null, ||, chopped, ., isEmpty, (, ), ), {, cut, =, null, ;]
[;, if, (, chopped, ==, null, ||, chopped, ., isEmpty, (, ), ), {, cut, =, null, ;, plus, =]
[(, chopped, ==, null, ||, chopped, ., isEmpty, (, ), ), {, cut, =, null, ;, plus, =, null, ;]
[==, null, ||, chopped, ., isEmpty, (, ), ), {, cut, =, null, ;, plus, =, null, ;, minus, =]
[chopped, ., isEmpty, (, ), ), {, cut, =, null, ;, plus, =, null, ;, minus, =, null, ;, return]
[(, ), ), {, cut, =, null, ;, plus, =, null, ;, minus, =, null, ;, return, false, ;, }]
[), {, cut, =, null, ;, plus, =, null, ;, minus, =, null, ;, return, false, ;, }, cut, =]
[cut, =, null, ;, plus, =, null, ;, minus, =, null, ;, return, false, ;, }, cut, =, chopped, ;]
[null, ;, plus, =, null, ;, minus, =, null, ;, return, false, ;, }, cut, =, chopped, ;, plus, =]
[null, ;, return, false, ;, }, cut, =, chopped, ;, plus, =, new, BSPTree, <, S, >, (, ), ;]
[null, ;, return, false, ;, }, cut, =, chopped, ;, plus, =, new, BSPTree, <, S, >, (, ), ;]
[;, }, cut, =, chopped, ;, plus, =, new, BSPTree, <, S, >, (, ), ;, plus, ., parent, =]
[cut, =, chopped, ;, plus, =, new, BSPTree, <, S, >, (, ), ;, plus, ., parent, =, this, ;]
[chopped, ;, plus, =, new, BSPTree, <, S, >, (, ), ;, plus, ., parent, =, this, ;, minus, =]
[>, (, ), ;, plus, ., parent, =, this, ;, minus, =, new, BSPTree, <, S, >, (, ), ;]
[>, (, ), ;, plus, ., parent, =, this, ;, minus, =, new, BSPTree, <, S, >, (, ), ;]
[plus, ., parent, =, this, ;, minus, =, new, BSPTree, <, S, >, (, ), ;, minus, ., parent, =]
[=, this, ;, minus, =, new, BSPTree, <, S, >, (, ), ;, minus, ., parent, =, this, ;, return]
[., parent, =, this, ;, return, true, ;, }, public, BSPTree, <, S, >, copySelf, (, ), {, if, (]
[., parent, =, this, ;, return, true, ;, }, public, BSPTree, <, S, >, copySelf, (, ), {, if, (]
[=, this, ;, return, true, ;, }, public, BSPTree, <, S, >, copySelf, (, ), {, if, (, cut, ==]
[true, ;, }, public, BSPTree, <, S, >, copySelf, (, ), {, if, (, cut, ==, null, ), {, return]
[S, >, copySelf, (, ), {, if, (, cut, ==, null, ), {, return, new, BSPTree, <, S, >, (]
[{, if, (, cut, ==, null, ), {, return, new, BSPTree, <, S, >, (, attribute, ), ;, }, return]
[), {, return, new, BSPTree, <, S, >, (, attribute, ), ;, }, return, new, BSPTree, <, S, >, (]
[), {, return, new, BSPTree, <, S, >, (, attribute, ), ;, }, return, new, BSPTree, <, S, >, (]
[S, >, (, attribute, ), ;, }, return, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,]
[S, >, (, attribute, ), ;, }, return, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,]
[}, return, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, plus, ., copySelf, (, ), ,]
[}, return, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, plus, ., copySelf, (, ), ,]
[>, (, cut, ., copySelf, (, ), ,, plus, ., copySelf, (, ), ,, minus, ., copySelf, (, ), ,]
[minus, ., copySelf, (, ), ,, attribute, ), ;, }, public, SubHyperplane, <, S, >, getCut, (, ), {, return]
[S, >, getCut, (, ), {, return, cut, ;, }, public, BSPTree, <, S, >, getPlus, (, ), {, return]
[S, >, getPlus, (, ), {, return, plus, ;, }, public, BSPTree, <, S, >, getMinus, (, ), {, return]
[S, >, getMinus, (, ), {, return, minus, ;, }, public, BSPTree, <, S, >, getParent, (, ), {, return]
[<, S, >, getParent, (, ), {, return, parent, ;, }, public, void, setAttribute, (, final, Object, attribute, ), {]
[<, S, >, getParent, (, ), {, return, parent, ;, }, public, void, setAttribute, (, final, Object, attribute, ), {]
[(, ), {, return, parent, ;, }, public, void, setAttribute, (, final, Object, attribute, ), {, this, ., attribute, =]
[(, final, Object, attribute, ), {, this, ., attribute, =, attribute, ;, }, public, Object, getAttribute, (, ), {, return]
[), {, return, attribute, ;, }, public, void, visit, (, final, BSPTreeVisitor, <, S, >, visitor, ), {, if, (]
[), {, return, attribute, ;, }, public, void, visit, (, final, BSPTreeVisitor, <, S, >, visitor, ), {, if, (]
[return, attribute, ;, }, public, void, visit, (, final, BSPTreeVisitor, <, S, >, visitor, ), {, if, (, cut, ==]
[}, public, void, visit, (, final, BSPTreeVisitor, <, S, >, visitor, ), {, if, (, cut, ==, null, ), {]
[}, public, void, visit, (, final, BSPTreeVisitor, <, S, >, visitor, ), {, if, (, cut, ==, null, ), {]
[(, final, BSPTreeVisitor, <, S, >, visitor, ), {, if, (, cut, ==, null, ), {, visitor, ., visitLeafNode, (]
[{, if, (, cut, ==, null, ), {, visitor, ., visitLeafNode, (, this, ), ;, }, else, {, switch, (]
[{, if, (, cut, ==, null, ), {, visitor, ., visitLeafNode, (, this, ), ;, }, else, {, switch, (]
[==, null, ), {, visitor, ., visitLeafNode, (, this, ), ;, }, else, {, switch, (, visitor, ., visitOrder, (]
[., visitLeafNode, (, this, ), ;, }, else, {, switch, (, visitor, ., visitOrder, (, this, ), ), {, case]
[(, this, ), ;, }, else, {, switch, (, visitor, ., visitOrder, (, this, ), ), {, case, PLUS_MINUS_SUB, :]
[(, this, ), ;, }, else, {, switch, (, visitor, ., visitOrder, (, this, ), ), {, case, PLUS_MINUS_SUB, :]
[}, else, {, switch, (, visitor, ., visitOrder, (, this, ), ), {, case, PLUS_MINUS_SUB, :, plus, ., visit, (]
[switch, (, visitor, ., visitOrder, (, this, ), ), {, case, PLUS_MINUS_SUB, :, plus, ., visit, (, visitor, ), ;]
[switch, (, visitor, ., visitOrder, (, this, ), ), {, case, PLUS_MINUS_SUB, :, plus, ., visit, (, visitor, ), ;]
[visitOrder, (, this, ), ), {, case, PLUS_MINUS_SUB, :, plus, ., visit, (, visitor, ), ;, minus, ., visit, (]
[), ), {, case, PLUS_MINUS_SUB, :, plus, ., visit, (, visitor, ), ;, minus, ., visit, (, visitor, ), ;]
[), ), {, case, PLUS_MINUS_SUB, :, plus, ., visit, (, visitor, ), ;, minus, ., visit, (, visitor, ), ;]
[PLUS_MINUS_SUB, :, plus, ., visit, (, visitor, ), ;, minus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (]
[visitor, ), ;, minus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case]
[;, minus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case, PLUS_SUB_MINUS, :]
[;, minus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case, PLUS_SUB_MINUS, :]
[(, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case, PLUS_SUB_MINUS, :, plus, ., visit, (]
[;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case, PLUS_SUB_MINUS, :, plus, ., visit, (, visitor, ), ;]
[;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case, PLUS_SUB_MINUS, :, plus, ., visit, (, visitor, ), ;]
[(, this, ), ;, break, ;, case, PLUS_SUB_MINUS, :, plus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (]
[;, break, ;, case, PLUS_SUB_MINUS, :, plus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;]
[;, break, ;, case, PLUS_SUB_MINUS, :, plus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;]
[PLUS_SUB_MINUS, :, plus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, minus, ., visit, (]
[visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, minus, ., visit, (, visitor, ), ;, break, ;, case]
[;, visitor, ., visitInternalNode, (, this, ), ;, minus, ., visit, (, visitor, ), ;, break, ;, case, MINUS_PLUS_SUB, :]
[;, visitor, ., visitInternalNode, (, this, ), ;, minus, ., visit, (, visitor, ), ;, break, ;, case, MINUS_PLUS_SUB, :]
[(, this, ), ;, minus, ., visit, (, visitor, ), ;, break, ;, case, MINUS_PLUS_SUB, :, minus, ., visit, (]
[;, minus, ., visit, (, visitor, ), ;, break, ;, case, MINUS_PLUS_SUB, :, minus, ., visit, (, visitor, ), ;]
[;, minus, ., visit, (, visitor, ), ;, break, ;, case, MINUS_PLUS_SUB, :, minus, ., visit, (, visitor, ), ;]
[(, visitor, ), ;, break, ;, case, MINUS_PLUS_SUB, :, minus, ., visit, (, visitor, ), ;, plus, ., visit, (]
[;, break, ;, case, MINUS_PLUS_SUB, :, minus, ., visit, (, visitor, ), ;, plus, ., visit, (, visitor, ), ;]
[;, break, ;, case, MINUS_PLUS_SUB, :, minus, ., visit, (, visitor, ), ;, plus, ., visit, (, visitor, ), ;]
[MINUS_PLUS_SUB, :, minus, ., visit, (, visitor, ), ;, plus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (]
[visitor, ), ;, plus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case]
[;, plus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case, MINUS_SUB_PLUS, :]
[;, plus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case, MINUS_SUB_PLUS, :]
[(, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case, MINUS_SUB_PLUS, :, minus, ., visit, (]
[;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case, MINUS_SUB_PLUS, :, minus, ., visit, (, visitor, ), ;]
[;, visitor, ., visitInternalNode, (, this, ), ;, break, ;, case, MINUS_SUB_PLUS, :, minus, ., visit, (, visitor, ), ;]
[(, this, ), ;, break, ;, case, MINUS_SUB_PLUS, :, minus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (]
[;, break, ;, case, MINUS_SUB_PLUS, :, minus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;]
[;, break, ;, case, MINUS_SUB_PLUS, :, minus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;]
[MINUS_SUB_PLUS, :, minus, ., visit, (, visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, plus, ., visit, (]
[visitor, ), ;, visitor, ., visitInternalNode, (, this, ), ;, plus, ., visit, (, visitor, ), ;, break, ;, case]
[;, visitor, ., visitInternalNode, (, this, ), ;, plus, ., visit, (, visitor, ), ;, break, ;, case, SUB_PLUS_MINUS, :]
[;, visitor, ., visitInternalNode, (, this, ), ;, plus, ., visit, (, visitor, ), ;, break, ;, case, SUB_PLUS_MINUS, :]
[(, this, ), ;, plus, ., visit, (, visitor, ), ;, break, ;, case, SUB_PLUS_MINUS, :, visitor, ., visitInternalNode, (]
[;, plus, ., visit, (, visitor, ), ;, break, ;, case, SUB_PLUS_MINUS, :, visitor, ., visitInternalNode, (, this, ), ;]
[;, plus, ., visit, (, visitor, ), ;, break, ;, case, SUB_PLUS_MINUS, :, visitor, ., visitInternalNode, (, this, ), ;]
[(, visitor, ), ;, break, ;, case, SUB_PLUS_MINUS, :, visitor, ., visitInternalNode, (, this, ), ;, plus, ., visit, (]
[;, break, ;, case, SUB_PLUS_MINUS, :, visitor, ., visitInternalNode, (, this, ), ;, plus, ., visit, (, visitor, ), ;]
[;, break, ;, case, SUB_PLUS_MINUS, :, visitor, ., visitInternalNode, (, this, ), ;, plus, ., visit, (, visitor, ), ;]
[SUB_PLUS_MINUS, :, visitor, ., visitInternalNode, (, this, ), ;, plus, ., visit, (, visitor, ), ;, minus, ., visit, (]
[this, ), ;, plus, ., visit, (, visitor, ), ;, minus, ., visit, (, visitor, ), ;, break, ;, case]
[;, plus, ., visit, (, visitor, ), ;, minus, ., visit, (, visitor, ), ;, break, ;, case, SUB_MINUS_PLUS, :]
[;, plus, ., visit, (, visitor, ), ;, minus, ., visit, (, visitor, ), ;, break, ;, case, SUB_MINUS_PLUS, :]
[(, visitor, ), ;, minus, ., visit, (, visitor, ), ;, break, ;, case, SUB_MINUS_PLUS, :, visitor, ., visitInternalNode, (]
[;, minus, ., visit, (, visitor, ), ;, break, ;, case, SUB_MINUS_PLUS, :, visitor, ., visitInternalNode, (, this, ), ;]
[;, minus, ., visit, (, visitor, ), ;, break, ;, case, SUB_MINUS_PLUS, :, visitor, ., visitInternalNode, (, this, ), ;]
[(, visitor, ), ;, break, ;, case, SUB_MINUS_PLUS, :, visitor, ., visitInternalNode, (, this, ), ;, minus, ., visit, (]
[;, break, ;, case, SUB_MINUS_PLUS, :, visitor, ., visitInternalNode, (, this, ), ;, minus, ., visit, (, visitor, ), ;]
[;, break, ;, case, SUB_MINUS_PLUS, :, visitor, ., visitInternalNode, (, this, ), ;, minus, ., visit, (, visitor, ), ;]
[SUB_MINUS_PLUS, :, visitor, ., visitInternalNode, (, this, ), ;, minus, ., visit, (, visitor, ), ;, plus, ., visit, (]
[;, minus, ., visit, (, visitor, ), ;, plus, ., visit, (, visitor, ), ;, break, ;, default, :, throw]
[SubHyperplane, <, S, >, fitToCell, (, final, SubHyperplane, <, S, >, sub, ), {, SubHyperplane, <, S, >, s, =]
[>, sub, ), {, SubHyperplane, <, S, >, s, =, sub, ;, for, (, BSPTree, <, S, >, tree, =]
[), {, SubHyperplane, <, S, >, s, =, sub, ;, for, (, BSPTree, <, S, >, tree, =, this, ;]
[), {, SubHyperplane, <, S, >, s, =, sub, ;, for, (, BSPTree, <, S, >, tree, =, this, ;]
[), {, SubHyperplane, <, S, >, s, =, sub, ;, for, (, BSPTree, <, S, >, tree, =, this, ;]
[S, >, s, =, sub, ;, for, (, BSPTree, <, S, >, tree, =, this, ;, tree, ., parent, !=]
[s, =, sub, ;, for, (, BSPTree, <, S, >, tree, =, this, ;, tree, ., parent, !=, null, ;]
[sub, ;, for, (, BSPTree, <, S, >, tree, =, this, ;, tree, ., parent, !=, null, ;, tree, =]
[sub, ;, for, (, BSPTree, <, S, >, tree, =, this, ;, tree, ., parent, !=, null, ;, tree, =]
[>, tree, =, this, ;, tree, ., parent, !=, null, ;, tree, =, tree, ., parent, ), {, if, (]
[>, tree, =, this, ;, tree, ., parent, !=, null, ;, tree, =, tree, ., parent, ), {, if, (]
[=, this, ;, tree, ., parent, !=, null, ;, tree, =, tree, ., parent, ), {, if, (, tree, ==]
[=, this, ;, tree, ., parent, !=, null, ;, tree, =, tree, ., parent, ), {, if, (, tree, ==]
[=, this, ;, tree, ., parent, !=, null, ;, tree, =, tree, ., parent, ), {, if, (, tree, ==]
[null, ;, tree, =, tree, ., parent, ), {, if, (, tree, ==, tree, ., parent, ., plus, ), {]
[tree, =, tree, ., parent, ), {, if, (, tree, ==, tree, ., parent, ., plus, ), {, s, =]
[tree, =, tree, ., parent, ), {, if, (, tree, ==, tree, ., parent, ., plus, ), {, s, =]
[tree, =, tree, ., parent, ), {, if, (, tree, ==, tree, ., parent, ., plus, ), {, s, =]
[parent, ), {, if, (, tree, ==, tree, ., parent, ., plus, ), {, s, =, s, ., split, (]
[parent, ), {, if, (, tree, ==, tree, ., parent, ., plus, ), {, s, =, s, ., split, (]
[parent, ), {, if, (, tree, ==, tree, ., parent, ., plus, ), {, s, =, s, ., split, (]
[parent, ), {, if, (, tree, ==, tree, ., parent, ., plus, ), {, s, =, s, ., split, (]
[split, (, tree, ., parent, ., cut, ., getHyperplane, (, ), ), ., getPlus, (, ), ;, }, else, {]
[tree, ., parent, ., cut, ., getHyperplane, (, ), ), ., getPlus, (, ), ;, }, else, {, s, =]
[tree, ., parent, ., cut, ., getHyperplane, (, ), ), ., getPlus, (, ), ;, }, else, {, s, =]
[tree, ., parent, ., cut, ., getHyperplane, (, ), ), ., getPlus, (, ), ;, }, else, {, s, =]
[cut, ., getHyperplane, (, ), ), ., getPlus, (, ), ;, }, else, {, s, =, s, ., split, (]
[cut, ., getHyperplane, (, ), ), ., getPlus, (, ), ;, }, else, {, s, =, s, ., split, (]
[cut, ., getHyperplane, (, ), ), ., getPlus, (, ), ;, }, else, {, s, =, s, ., split, (]
[cut, ., getHyperplane, (, ), ), ., getPlus, (, ), ;, }, else, {, s, =, s, ., split, (]
[split, (, tree, ., parent, ., cut, ., getHyperplane, (, ), ), ., getMinus, (, ), ;, }, }, return]
[s, ;, }, public, BSPTree, <, S, >, getCell, (, final, Vector, <, S, >, point, ), {, if, (]
[s, ;, }, public, BSPTree, <, S, >, getCell, (, final, Vector, <, S, >, point, ), {, if, (]
[}, public, BSPTree, <, S, >, getCell, (, final, Vector, <, S, >, point, ), {, if, (, cut, ==]
[S, >, getCell, (, final, Vector, <, S, >, point, ), {, if, (, cut, ==, null, ), {, return]
[S, >, point, ), {, if, (, cut, ==, null, ), {, return, this, ;, }, final, double, offset, =]
[S, >, point, ), {, if, (, cut, ==, null, ), {, return, this, ;, }, final, double, offset, =]
[S, >, point, ), {, if, (, cut, ==, null, ), {, return, this, ;, }, final, double, offset, =]
[==, null, ), {, return, this, ;, }, final, double, offset, =, cut, ., getHyperplane, (, ), ., getOffset, (]
[this, ;, }, final, double, offset, =, cut, ., getHyperplane, (, ), ., getOffset, (, point, ), ;, if, (]
[this, ;, }, final, double, offset, =, cut, ., getHyperplane, (, ), ., getOffset, (, point, ), ;, if, (]
[this, ;, }, final, double, offset, =, cut, ., getHyperplane, (, ), ., getOffset, (, point, ), ;, if, (]
[double, offset, =, cut, ., getHyperplane, (, ), ., getOffset, (, point, ), ;, if, (, FastMath, ., abs, (]
[cut, ., getHyperplane, (, ), ., getOffset, (, point, ), ;, if, (, FastMath, ., abs, (, offset, ), <]
[), ., getOffset, (, point, ), ;, if, (, FastMath, ., abs, (, offset, ), <, 1.0e-10, ), {, return]
[;, if, (, FastMath, ., abs, (, offset, ), <, 1.0e-10, ), {, return, this, ;, }, else, if, (]
[;, if, (, FastMath, ., abs, (, offset, ), <, 1.0e-10, ), {, return, this, ;, }, else, if, (]
[(, FastMath, ., abs, (, offset, ), <, 1.0e-10, ), {, return, this, ;, }, else, if, (, offset, <=]
[(, offset, ), <, 1.0e-10, ), {, return, this, ;, }, else, if, (, offset, <=, 0, ), {, return]
[(, offset, ), <, 1.0e-10, ), {, return, this, ;, }, else, if, (, offset, <=, 0, ), {, return]
[1.0e-10, ), {, return, this, ;, }, else, if, (, offset, <=, 0, ), {, return, minus, ., getCell, (]
[else, if, (, offset, <=, 0, ), {, return, minus, ., getCell, (, point, ), ;, }, else, {, return]
[else, if, (, offset, <=, 0, ), {, return, minus, ., getCell, (, point, ), ;, }, else, {, return]
[<=, 0, ), {, return, minus, ., getCell, (, point, ), ;, }, else, {, return, plus, ., getCell, (]
[else, {, return, plus, ., getCell, (, point, ), ;, }, }, private, void, condense, (, ), {, if, (]
[else, {, return, plus, ., getCell, (, point, ), ;, }, }, private, void, condense, (, ), {, if, (]
[else, {, return, plus, ., getCell, (, point, ), ;, }, }, private, void, condense, (, ), {, if, (]
[else, {, return, plus, ., getCell, (, point, ), ;, }, }, private, void, condense, (, ), {, if, (]
[{, return, plus, ., getCell, (, point, ), ;, }, }, private, void, condense, (, ), {, if, (, (]
[{, return, plus, ., getCell, (, point, ), ;, }, }, private, void, condense, (, ), {, if, (, (]
[plus, ., getCell, (, point, ), ;, }, }, private, void, condense, (, ), {, if, (, (, cut, !=]
[(, point, ), ;, }, }, private, void, condense, (, ), {, if, (, (, cut, !=, null, ), &&]
[point, ), ;, }, }, private, void, condense, (, ), {, if, (, (, cut, !=, null, ), &&, (]
[point, ), ;, }, }, private, void, condense, (, ), {, if, (, (, cut, !=, null, ), &&, (]
[point, ), ;, }, }, private, void, condense, (, ), {, if, (, (, cut, !=, null, ), &&, (]
[}, private, void, condense, (, ), {, if, (, (, cut, !=, null, ), &&, (, plus, ., cut, ==]
[condense, (, ), {, if, (, (, cut, !=, null, ), &&, (, plus, ., cut, ==, null, ), &&]
[(, ), {, if, (, (, cut, !=, null, ), &&, (, plus, ., cut, ==, null, ), &&, (]
[(, ), {, if, (, (, cut, !=, null, ), &&, (, plus, ., cut, ==, null, ), &&, (]
[(, ), {, if, (, (, cut, !=, null, ), &&, (, plus, ., cut, ==, null, ), &&, (]
[(, (, cut, !=, null, ), &&, (, plus, ., cut, ==, null, ), &&, (, minus, ., cut, ==]
[!=, null, ), &&, (, plus, ., cut, ==, null, ), &&, (, minus, ., cut, ==, null, ), &&]
[null, ), &&, (, plus, ., cut, ==, null, ), &&, (, minus, ., cut, ==, null, ), &&, (]
[null, ), &&, (, plus, ., cut, ==, null, ), &&, (, minus, ., cut, ==, null, ), &&, (]
[), &&, (, plus, ., cut, ==, null, ), &&, (, minus, ., cut, ==, null, ), &&, (, (]
[), &&, (, plus, ., cut, ==, null, ), &&, (, minus, ., cut, ==, null, ), &&, (, (]
[&&, (, plus, ., cut, ==, null, ), &&, (, minus, ., cut, ==, null, ), &&, (, (, (]
[&&, (, plus, ., cut, ==, null, ), &&, (, minus, ., cut, ==, null, ), &&, (, (, (]
[&&, (, plus, ., cut, ==, null, ), &&, (, minus, ., cut, ==, null, ), &&, (, (, (]
[cut, ==, null, ), &&, (, minus, ., cut, ==, null, ), &&, (, (, (, plus, ., attribute, ==]
[), &&, (, minus, ., cut, ==, null, ), &&, (, (, (, plus, ., attribute, ==, null, ), &&]
[&&, (, minus, ., cut, ==, null, ), &&, (, (, (, plus, ., attribute, ==, null, ), &&, (]
[&&, (, minus, ., cut, ==, null, ), &&, (, (, (, plus, ., attribute, ==, null, ), &&, (]
[&&, (, minus, ., cut, ==, null, ), &&, (, (, (, plus, ., attribute, ==, null, ), &&, (]
[cut, ==, null, ), &&, (, (, (, plus, ., attribute, ==, null, ), &&, (, minus, ., attribute, ==]
[&&, (, (, (, plus, ., attribute, ==, null, ), &&, (, minus, ., attribute, ==, null, ), ), ||]
[(, (, (, plus, ., attribute, ==, null, ), &&, (, minus, ., attribute, ==, null, ), ), ||, (]
[(, (, (, plus, ., attribute, ==, null, ), &&, (, minus, ., attribute, ==, null, ), ), ||, (]
[(, (, plus, ., attribute, ==, null, ), &&, (, minus, ., attribute, ==, null, ), ), ||, (, (]
[(, (, plus, ., attribute, ==, null, ), &&, (, minus, ., attribute, ==, null, ), ), ||, (, (]
[(, (, plus, ., attribute, ==, null, ), &&, (, minus, ., attribute, ==, null, ), ), ||, (, (]
[attribute, ==, null, ), &&, (, minus, ., attribute, ==, null, ), ), ||, (, (, plus, ., attribute, !=]
[), &&, (, minus, ., attribute, ==, null, ), ), ||, (, (, plus, ., attribute, !=, null, ), &&]
[), &&, (, minus, ., attribute, ==, null, ), ), ||, (, (, plus, ., attribute, !=, null, ), &&]
[), &&, (, minus, ., attribute, ==, null, ), ), ||, (, (, plus, ., attribute, !=, null, ), &&]
[==, null, ), ), ||, (, (, plus, ., attribute, !=, null, ), &&, plus, ., attribute, ., equals, (]
[==, null, ), ), ||, (, (, plus, ., attribute, !=, null, ), &&, plus, ., attribute, ., equals, (]
[., attribute, !=, null, ), &&, plus, ., attribute, ., equals, (, minus, ., attribute, ), ), ), ), {]
[!=, null, ), &&, plus, ., attribute, ., equals, (, minus, ., attribute, ), ), ), ), {, attribute, =]
[!=, null, ), &&, plus, ., attribute, ., equals, (, minus, ., attribute, ), ), ), ), {, attribute, =]
[null, ), &&, plus, ., attribute, ., equals, (, minus, ., attribute, ), ), ), ), {, attribute, =, (]
[null, ), &&, plus, ., attribute, ., equals, (, minus, ., attribute, ), ), ), ), {, attribute, =, (]
[null, ), &&, plus, ., attribute, ., equals, (, minus, ., attribute, ), ), ), ), {, attribute, =, (]
[., attribute, ., equals, (, minus, ., attribute, ), ), ), ), {, attribute, =, (, plus, ., attribute, ==]
[equals, (, minus, ., attribute, ), ), ), ), {, attribute, =, (, plus, ., attribute, ==, null, ), ?]
[equals, (, minus, ., attribute, ), ), ), ), {, attribute, =, (, plus, ., attribute, ==, null, ), ?]
[attribute, ), ), ), ), {, attribute, =, (, plus, ., attribute, ==, null, ), ?, minus, ., attribute, :]
[attribute, ), ), ), ), {, attribute, =, (, plus, ., attribute, ==, null, ), ?, minus, ., attribute, :]
[), {, attribute, =, (, plus, ., attribute, ==, null, ), ?, minus, ., attribute, :, plus, ., attribute, ;]
[attribute, =, (, plus, ., attribute, ==, null, ), ?, minus, ., attribute, :, plus, ., attribute, ;, cut, =]
[(, plus, ., attribute, ==, null, ), ?, minus, ., attribute, :, plus, ., attribute, ;, cut, =, null, ;]
[., attribute, ==, null, ), ?, minus, ., attribute, :, plus, ., attribute, ;, cut, =, null, ;, plus, =]
[==, null, ), ?, minus, ., attribute, :, plus, ., attribute, ;, cut, =, null, ;, plus, =, null, ;]
[), ?, minus, ., attribute, :, plus, ., attribute, ;, cut, =, null, ;, plus, =, null, ;, minus, =]
[S, >, merge, (, final, BSPTree, <, S, >, tree, ,, final, LeafMerger, <, S, >, leafMerger, ), {, return]
[merge, (, final, BSPTree, <, S, >, tree, ,, final, LeafMerger, <, S, >, leafMerger, ), {, return, merge, (]
[final, BSPTree, <, S, >, tree, ,, final, LeafMerger, <, S, >, leafMerger, ), {, return, merge, (, tree, ,]
[<, S, >, tree, ,, final, LeafMerger, <, S, >, leafMerger, ), {, return, merge, (, tree, ,, leafMerger, ,]
[>, tree, ,, final, LeafMerger, <, S, >, leafMerger, ), {, return, merge, (, tree, ,, leafMerger, ,, null, ,]
[LeafMerger, <, S, >, leafMerger, ,, final, BSPTree, <, S, >, parentTree, ,, final, boolean, isPlusChild, ), {, if, (]
[LeafMerger, <, S, >, leafMerger, ,, final, BSPTree, <, S, >, parentTree, ,, final, boolean, isPlusChild, ), {, if, (]
[S, >, leafMerger, ,, final, BSPTree, <, S, >, parentTree, ,, final, boolean, isPlusChild, ), {, if, (, cut, ==]
[final, BSPTree, <, S, >, parentTree, ,, final, boolean, isPlusChild, ), {, if, (, cut, ==, null, ), {, return]
[final, BSPTree, <, S, >, parentTree, ,, final, boolean, isPlusChild, ), {, if, (, cut, ==, null, ), {, return]
[>, parentTree, ,, final, boolean, isPlusChild, ), {, if, (, cut, ==, null, ), {, return, leafMerger, ., merge, (]
[,, final, boolean, isPlusChild, ), {, if, (, cut, ==, null, ), {, return, leafMerger, ., merge, (, this, ,]
[boolean, isPlusChild, ), {, if, (, cut, ==, null, ), {, return, leafMerger, ., merge, (, this, ,, tree, ,]
[), {, if, (, cut, ==, null, ), {, return, leafMerger, ., merge, (, this, ,, tree, ,, parentTree, ,]
[if, (, cut, ==, null, ), {, return, leafMerger, ., merge, (, this, ,, tree, ,, parentTree, ,, isPlusChild, ,]
[return, leafMerger, ., merge, (, this, ,, tree, ,, parentTree, ,, isPlusChild, ,, true, ), ;, }, else, if, (]
[return, leafMerger, ., merge, (, this, ,, tree, ,, parentTree, ,, isPlusChild, ,, true, ), ;, }, else, if, (]
[return, leafMerger, ., merge, (, this, ,, tree, ,, parentTree, ,, isPlusChild, ,, true, ), ;, }, else, if, (]
[(, this, ,, tree, ,, parentTree, ,, isPlusChild, ,, true, ), ;, }, else, if, (, tree, ., cut, ==]
[,, parentTree, ,, isPlusChild, ,, true, ), ;, }, else, if, (, tree, ., cut, ==, null, ), {, return]
[,, parentTree, ,, isPlusChild, ,, true, ), ;, }, else, if, (, tree, ., cut, ==, null, ), {, return]
[,, true, ), ;, }, else, if, (, tree, ., cut, ==, null, ), {, return, leafMerger, ., merge, (]
[), ;, }, else, if, (, tree, ., cut, ==, null, ), {, return, leafMerger, ., merge, (, tree, ,]
[}, else, if, (, tree, ., cut, ==, null, ), {, return, leafMerger, ., merge, (, tree, ,, this, ,]
[if, (, tree, ., cut, ==, null, ), {, return, leafMerger, ., merge, (, tree, ,, this, ,, parentTree, ,]
[tree, ., cut, ==, null, ), {, return, leafMerger, ., merge, (, tree, ,, this, ,, parentTree, ,, isPlusChild, ,]
[,, this, ,, parentTree, ,, isPlusChild, ,, false, ), ;, }, else, {, final, BSPTree, <, S, >, merged, =]
[,, this, ,, parentTree, ,, isPlusChild, ,, false, ), ;, }, else, {, final, BSPTree, <, S, >, merged, =]
[,, isPlusChild, ,, false, ), ;, }, else, {, final, BSPTree, <, S, >, merged, =, tree, ., split, (]
[;, }, else, {, final, BSPTree, <, S, >, merged, =, tree, ., split, (, cut, ), ;, if, (]
[;, }, else, {, final, BSPTree, <, S, >, merged, =, tree, ., split, (, cut, ), ;, if, (]
[else, {, final, BSPTree, <, S, >, merged, =, tree, ., split, (, cut, ), ;, if, (, parentTree, !=]
[BSPTree, <, S, >, merged, =, tree, ., split, (, cut, ), ;, if, (, parentTree, !=, null, ), {]
[BSPTree, <, S, >, merged, =, tree, ., split, (, cut, ), ;, if, (, parentTree, !=, null, ), {]
[merged, =, tree, ., split, (, cut, ), ;, if, (, parentTree, !=, null, ), {, merged, ., parent, =]
[split, (, cut, ), ;, if, (, parentTree, !=, null, ), {, merged, ., parent, =, parentTree, ;, if, (]
[), ;, if, (, parentTree, !=, null, ), {, merged, ., parent, =, parentTree, ;, if, (, isPlusChild, ), {]
[), ;, if, (, parentTree, !=, null, ), {, merged, ., parent, =, parentTree, ;, if, (, isPlusChild, ), {]
[parentTree, !=, null, ), {, merged, ., parent, =, parentTree, ;, if, (, isPlusChild, ), {, parentTree, ., plus, =]
[merged, ., parent, =, parentTree, ;, if, (, isPlusChild, ), {, parentTree, ., plus, =, merged, ;, }, else, {]
[merged, ., parent, =, parentTree, ;, if, (, isPlusChild, ), {, parentTree, ., plus, =, merged, ;, }, else, {]
[parentTree, ;, if, (, isPlusChild, ), {, parentTree, ., plus, =, merged, ;, }, else, {, parentTree, ., minus, =]
[isPlusChild, ), {, parentTree, ., plus, =, merged, ;, }, else, {, parentTree, ., minus, =, merged, ;, }, }]
[isPlusChild, ), {, parentTree, ., plus, =, merged, ;, }, else, {, parentTree, ., minus, =, merged, ;, }, }]
[., plus, =, merged, ;, }, else, {, parentTree, ., minus, =, merged, ;, }, }, plus, ., merge, (]
[., plus, =, merged, ;, }, else, {, parentTree, ., minus, =, merged, ;, }, }, plus, ., merge, (]
[;, }, else, {, parentTree, ., minus, =, merged, ;, }, }, plus, ., merge, (, merged, ., plus, ,]
[else, {, parentTree, ., minus, =, merged, ;, }, }, plus, ., merge, (, merged, ., plus, ,, leafMerger, ,]
[parentTree, ., minus, =, merged, ;, }, }, plus, ., merge, (, merged, ., plus, ,, leafMerger, ,, merged, ,]
[=, merged, ;, }, }, plus, ., merge, (, merged, ., plus, ,, leafMerger, ,, merged, ,, true, ), ;]
[=, merged, ;, }, }, plus, ., merge, (, merged, ., plus, ,, leafMerger, ,, merged, ,, true, ), ;]
[}, plus, ., merge, (, merged, ., plus, ,, leafMerger, ,, merged, ,, true, ), ;, minus, ., merge, (]
[}, plus, ., merge, (, merged, ., plus, ,, leafMerger, ,, merged, ,, true, ), ;, minus, ., merge, (]
[(, merged, ., plus, ,, leafMerger, ,, merged, ,, true, ), ;, minus, ., merge, (, merged, ., minus, ,]
[., plus, ,, leafMerger, ,, merged, ,, true, ), ;, minus, ., merge, (, merged, ., minus, ,, leafMerger, ,]
[,, leafMerger, ,, merged, ,, true, ), ;, minus, ., merge, (, merged, ., minus, ,, leafMerger, ,, merged, ,]
[merged, ,, true, ), ;, minus, ., merge, (, merged, ., minus, ,, leafMerger, ,, merged, ,, false, ), ;]
[merged, ,, true, ), ;, minus, ., merge, (, merged, ., minus, ,, leafMerger, ,, merged, ,, false, ), ;]
[(, merged, ., minus, ,, leafMerger, ,, merged, ,, false, ), ;, merged, ., condense, (, ), ;, if, (]
[(, merged, ., minus, ,, leafMerger, ,, merged, ,, false, ), ;, merged, ., condense, (, ), ;, if, (]
[(, merged, ., minus, ,, leafMerger, ,, merged, ,, false, ), ;, merged, ., condense, (, ), ;, if, (]
[,, leafMerger, ,, merged, ,, false, ), ;, merged, ., condense, (, ), ;, if, (, merged, ., cut, !=]
[merged, ,, false, ), ;, merged, ., condense, (, ), ;, if, (, merged, ., cut, !=, null, ), {]
[merged, ,, false, ), ;, merged, ., condense, (, ), ;, if, (, merged, ., cut, !=, null, ), {]
[;, merged, ., condense, (, ), ;, if, (, merged, ., cut, !=, null, ), {, merged, ., cut, =]
[;, merged, ., condense, (, ), ;, if, (, merged, ., cut, !=, null, ), {, merged, ., cut, =]
[(, ), ;, if, (, merged, ., cut, !=, null, ), {, merged, ., cut, =, merged, ., fitToCell, (]
[(, ), ;, if, (, merged, ., cut, !=, null, ), {, merged, ., cut, =, merged, ., fitToCell, (]
[(, ), ;, if, (, merged, ., cut, !=, null, ), {, merged, ., cut, =, merged, ., fitToCell, (]
[(, ), ;, if, (, merged, ., cut, !=, null, ), {, merged, ., cut, =, merged, ., fitToCell, (]
[=, merged, ., fitToCell, (, merged, ., cut, ., getHyperplane, (, ), ., wholeHyperplane, (, ), ), ;, }, return]
[), ;, }, public, BSPTree, <, S, >, split, (, final, SubHyperplane, <, S, >, sub, ), {, if, (]
[), ;, }, public, BSPTree, <, S, >, split, (, final, SubHyperplane, <, S, >, sub, ), {, if, (]
[}, public, BSPTree, <, S, >, split, (, final, SubHyperplane, <, S, >, sub, ), {, if, (, cut, ==]
[S, >, split, (, final, SubHyperplane, <, S, >, sub, ), {, if, (, cut, ==, null, ), {, return]
[<, S, >, sub, ), {, if, (, cut, ==, null, ), {, return, new, BSPTree, <, S, >, (]
[>, sub, ), {, if, (, cut, ==, null, ), {, return, new, BSPTree, <, S, >, (, sub, ,]
[if, (, cut, ==, null, ), {, return, new, BSPTree, <, S, >, (, sub, ,, copySelf, (, ), ,]
[{, return, new, BSPTree, <, S, >, (, sub, ,, copySelf, (, ), ,, new, BSPTree, <, S, >, (]
[BSPTree, <, S, >, (, sub, ,, copySelf, (, ), ,, new, BSPTree, <, S, >, (, attribute, ), ,]
[new, BSPTree, <, S, >, (, attribute, ), ,, null, ), ;, }, final, Hyperplane, <, S, >, cHyperplane, =]
[new, BSPTree, <, S, >, (, attribute, ), ,, null, ), ;, }, final, Hyperplane, <, S, >, cHyperplane, =]
[final, Hyperplane, <, S, >, cHyperplane, =, cut, ., getHyperplane, (, ), ;, final, Hyperplane, <, S, >, sHyperplane, =]
[final, Hyperplane, <, S, >, cHyperplane, =, cut, ., getHyperplane, (, ), ;, final, Hyperplane, <, S, >, sHyperplane, =]
[., getHyperplane, (, ), ;, final, Hyperplane, <, S, >, sHyperplane, =, sub, ., getHyperplane, (, ), ;, switch, (]
[., getHyperplane, (, ), ;, final, Hyperplane, <, S, >, sHyperplane, =, sub, ., getHyperplane, (, ), ;, switch, (]
[;, final, Hyperplane, <, S, >, sHyperplane, =, sub, ., getHyperplane, (, ), ;, switch, (, sub, ., side, (]
[>, sHyperplane, =, sub, ., getHyperplane, (, ), ;, switch, (, sub, ., side, (, cHyperplane, ), ), {, case]
[(, sub, ., side, (, cHyperplane, ), ), {, case, PLUS, :, {, final, BSPTree, <, S, >, split, =]
[(, sub, ., side, (, cHyperplane, ), ), {, case, PLUS, :, {, final, BSPTree, <, S, >, split, =]
[(, cHyperplane, ), ), {, case, PLUS, :, {, final, BSPTree, <, S, >, split, =, plus, ., split, (]
[case, PLUS, :, {, final, BSPTree, <, S, >, split, =, plus, ., split, (, sub, ), ;, if, (]
[case, PLUS, :, {, final, BSPTree, <, S, >, split, =, plus, ., split, (, sub, ), ;, if, (]
[case, PLUS, :, {, final, BSPTree, <, S, >, split, =, plus, ., split, (, sub, ), ;, if, (]
[final, BSPTree, <, S, >, split, =, plus, ., split, (, sub, ), ;, if, (, cut, ., side, (]
[S, >, split, =, plus, ., split, (, sub, ), ;, if, (, cut, ., side, (, sHyperplane, ), ==]
[S, >, split, =, plus, ., split, (, sub, ), ;, if, (, cut, ., side, (, sHyperplane, ), ==]
[., split, (, sub, ), ;, if, (, cut, ., side, (, sHyperplane, ), ==, Side, ., PLUS, ), {]
[., split, (, sub, ), ;, if, (, cut, ., side, (, sHyperplane, ), ==, Side, ., PLUS, ), {]
[), ;, if, (, cut, ., side, (, sHyperplane, ), ==, Side, ., PLUS, ), {, split, ., plus, =]
[side, (, sHyperplane, ), ==, Side, ., PLUS, ), {, split, ., plus, =, new, BSPTree, <, S, >, (]
[side, (, sHyperplane, ), ==, Side, ., PLUS, ), {, split, ., plus, =, new, BSPTree, <, S, >, (]
[., PLUS, ), {, split, ., plus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,]
[., PLUS, ), {, split, ., plus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,]
[split, ., plus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, split, ., plus, ,]
[split, ., plus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, split, ., plus, ,]
[<, S, >, (, cut, ., copySelf, (, ), ,, split, ., plus, ,, minus, ., copySelf, (, ), ,]
[(, cut, ., copySelf, (, ), ,, split, ., plus, ,, minus, ., copySelf, (, ), ,, attribute, ), ;]
[(, cut, ., copySelf, (, ), ,, split, ., plus, ,, minus, ., copySelf, (, ), ,, attribute, ), ;]
[(, cut, ., copySelf, (, ), ,, split, ., plus, ,, minus, ., copySelf, (, ), ,, attribute, ), ;]
[., plus, ,, minus, ., copySelf, (, ), ,, attribute, ), ;, split, ., plus, ., condense, (, ), ;]
[., plus, ,, minus, ., copySelf, (, ), ,, attribute, ), ;, split, ., plus, ., condense, (, ), ;]
[., plus, ,, minus, ., copySelf, (, ), ,, attribute, ), ;, split, ., plus, ., condense, (, ), ;]
[(, ), ,, attribute, ), ;, split, ., plus, ., condense, (, ), ;, split, ., plus, ., parent, =]
[;, split, ., plus, ., condense, (, ), ;, split, ., plus, ., parent, =, split, ;, }, else, {]
[;, split, ., plus, ., condense, (, ), ;, split, ., plus, ., parent, =, split, ;, }, else, {]
[., condense, (, ), ;, split, ., plus, ., parent, =, split, ;, }, else, {, split, ., minus, =]
[., plus, ., parent, =, split, ;, }, else, {, split, ., minus, =, new, BSPTree, <, S, >, (]
[., plus, ., parent, =, split, ;, }, else, {, split, ., minus, =, new, BSPTree, <, S, >, (]
[;, }, else, {, split, ., minus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,]
[;, }, else, {, split, ., minus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,]
[split, ., minus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, split, ., minus, ,]
[split, ., minus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, split, ., minus, ,]
[<, S, >, (, cut, ., copySelf, (, ), ,, split, ., minus, ,, minus, ., copySelf, (, ), ,]
[(, cut, ., copySelf, (, ), ,, split, ., minus, ,, minus, ., copySelf, (, ), ,, attribute, ), ;]
[(, cut, ., copySelf, (, ), ,, split, ., minus, ,, minus, ., copySelf, (, ), ,, attribute, ), ;]
[(, cut, ., copySelf, (, ), ,, split, ., minus, ,, minus, ., copySelf, (, ), ,, attribute, ), ;]
[., minus, ,, minus, ., copySelf, (, ), ,, attribute, ), ;, split, ., minus, ., condense, (, ), ;]
[., minus, ,, minus, ., copySelf, (, ), ,, attribute, ), ;, split, ., minus, ., condense, (, ), ;]
[., minus, ,, minus, ., copySelf, (, ), ,, attribute, ), ;, split, ., minus, ., condense, (, ), ;]
[(, ), ,, attribute, ), ;, split, ., minus, ., condense, (, ), ;, split, ., minus, ., parent, =]
[), ;, split, ., minus, ., condense, (, ), ;, split, ., minus, ., parent, =, split, ;, }, return]
[minus, ., condense, (, ), ;, split, ., minus, ., parent, =, split, ;, }, return, split, ;, }, case]
[parent, =, split, ;, }, return, split, ;, }, case, MINUS, :, {, final, BSPTree, <, S, >, split, =]
[parent, =, split, ;, }, return, split, ;, }, case, MINUS, :, {, final, BSPTree, <, S, >, split, =]
[}, return, split, ;, }, case, MINUS, :, {, final, BSPTree, <, S, >, split, =, minus, ., split, (]
[case, MINUS, :, {, final, BSPTree, <, S, >, split, =, minus, ., split, (, sub, ), ;, if, (]
[case, MINUS, :, {, final, BSPTree, <, S, >, split, =, minus, ., split, (, sub, ), ;, if, (]
[case, MINUS, :, {, final, BSPTree, <, S, >, split, =, minus, ., split, (, sub, ), ;, if, (]
[final, BSPTree, <, S, >, split, =, minus, ., split, (, sub, ), ;, if, (, cut, ., side, (]
[S, >, split, =, minus, ., split, (, sub, ), ;, if, (, cut, ., side, (, sHyperplane, ), ==]
[S, >, split, =, minus, ., split, (, sub, ), ;, if, (, cut, ., side, (, sHyperplane, ), ==]
[., split, (, sub, ), ;, if, (, cut, ., side, (, sHyperplane, ), ==, Side, ., PLUS, ), {]
[., split, (, sub, ), ;, if, (, cut, ., side, (, sHyperplane, ), ==, Side, ., PLUS, ), {]
[), ;, if, (, cut, ., side, (, sHyperplane, ), ==, Side, ., PLUS, ), {, split, ., plus, =]
[side, (, sHyperplane, ), ==, Side, ., PLUS, ), {, split, ., plus, =, new, BSPTree, <, S, >, (]
[side, (, sHyperplane, ), ==, Side, ., PLUS, ), {, split, ., plus, =, new, BSPTree, <, S, >, (]
[., PLUS, ), {, split, ., plus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,]
[., PLUS, ), {, split, ., plus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,]
[plus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, plus, ., copySelf, (, ), ,]
[plus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, plus, ., copySelf, (, ), ,]
[<, S, >, (, cut, ., copySelf, (, ), ,, plus, ., copySelf, (, ), ,, split, ., plus, ,]
[(, cut, ., copySelf, (, ), ,, plus, ., copySelf, (, ), ,, split, ., plus, ,, attribute, ), ;]
[(, cut, ., copySelf, (, ), ,, plus, ., copySelf, (, ), ,, split, ., plus, ,, attribute, ), ;]
[(, cut, ., copySelf, (, ), ,, plus, ., copySelf, (, ), ,, split, ., plus, ,, attribute, ), ;]
[., copySelf, (, ), ,, split, ., plus, ,, attribute, ), ;, split, ., plus, ., condense, (, ), ;]
[., copySelf, (, ), ,, split, ., plus, ,, attribute, ), ;, split, ., plus, ., condense, (, ), ;]
[., copySelf, (, ), ,, split, ., plus, ,, attribute, ), ;, split, ., plus, ., condense, (, ), ;]
[., plus, ,, attribute, ), ;, split, ., plus, ., condense, (, ), ;, split, ., plus, ., parent, =]
[;, split, ., plus, ., condense, (, ), ;, split, ., plus, ., parent, =, split, ;, }, else, {]
[;, split, ., plus, ., condense, (, ), ;, split, ., plus, ., parent, =, split, ;, }, else, {]
[., condense, (, ), ;, split, ., plus, ., parent, =, split, ;, }, else, {, split, ., minus, =]
[., plus, ., parent, =, split, ;, }, else, {, split, ., minus, =, new, BSPTree, <, S, >, (]
[., plus, ., parent, =, split, ;, }, else, {, split, ., minus, =, new, BSPTree, <, S, >, (]
[;, }, else, {, split, ., minus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,]
[;, }, else, {, split, ., minus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,]
[minus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, plus, ., copySelf, (, ), ,]
[minus, =, new, BSPTree, <, S, >, (, cut, ., copySelf, (, ), ,, plus, ., copySelf, (, ), ,]
[<, S, >, (, cut, ., copySelf, (, ), ,, plus, ., copySelf, (, ), ,, split, ., minus, ,]
[(, cut, ., copySelf, (, ), ,, plus, ., copySelf, (, ), ,, split, ., minus, ,, attribute, ), ;]
[(, cut, ., copySelf, (, ), ,, plus, ., copySelf, (, ), ,, split, ., minus, ,, attribute, ), ;]
[(, cut, ., copySelf, (, ), ,, plus, ., copySelf, (, ), ,, split, ., minus, ,, attribute, ), ;]
[., copySelf, (, ), ,, split, ., minus, ,, attribute, ), ;, split, ., minus, ., condense, (, ), ;]
[., copySelf, (, ), ,, split, ., minus, ,, attribute, ), ;, split, ., minus, ., condense, (, ), ;]
[., copySelf, (, ), ,, split, ., minus, ,, attribute, ), ;, split, ., minus, ., condense, (, ), ;]
[., minus, ,, attribute, ), ;, split, ., minus, ., condense, (, ), ;, split, ., minus, ., parent, =]
[), ;, split, ., minus, ., condense, (, ), ;, split, ., minus, ., parent, =, split, ;, }, return]
[minus, ., condense, (, ), ;, split, ., minus, ., parent, =, split, ;, }, return, split, ;, }, case]
[split, ;, }, return, split, ;, }, case, BOTH, :, {, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, cutParts, =]
[split, ;, }, return, split, ;, }, case, BOTH, :, {, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, cutParts, =]
[split, ;, }, case, BOTH, :, {, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, cutParts, =, cut, ., split, (]
[S, >, cutParts, =, cut, ., split, (, sHyperplane, ), ;, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, subParts, =]
[S, >, cutParts, =, cut, ., split, (, sHyperplane, ), ;, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, subParts, =]
[cut, ., split, (, sHyperplane, ), ;, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, subParts, =, sub, ., split, (]
[SplitSubHyperplane, <, S, >, subParts, =, sub, ., split, (, cHyperplane, ), ;, final, BSPTree, <, S, >, split, =]
[sub, ., split, (, cHyperplane, ), ;, final, BSPTree, <, S, >, split, =, new, BSPTree, <, S, >, (]
[split, (, cHyperplane, ), ;, final, BSPTree, <, S, >, split, =, new, BSPTree, <, S, >, (, sub, ,]
[split, (, cHyperplane, ), ;, final, BSPTree, <, S, >, split, =, new, BSPTree, <, S, >, (, sub, ,]
[;, final, BSPTree, <, S, >, split, =, new, BSPTree, <, S, >, (, sub, ,, plus, ., split, (]
[;, final, BSPTree, <, S, >, split, =, new, BSPTree, <, S, >, (, sub, ,, plus, ., split, (]
[=, new, BSPTree, <, S, >, (, sub, ,, plus, ., split, (, subParts, ., getPlus, (, ), ), ,]
[=, new, BSPTree, <, S, >, (, sub, ,, plus, ., split, (, subParts, ., getPlus, (, ), ), ,]
[S, >, (, sub, ,, plus, ., split, (, subParts, ., getPlus, (, ), ), ,, minus, ., split, (]
[S, >, (, sub, ,, plus, ., split, (, subParts, ., getPlus, (, ), ), ,, minus, ., split, (]
[split, (, subParts, ., getPlus, (, ), ), ,, minus, ., split, (, subParts, ., getMinus, (, ), ), ,]
[., getPlus, (, ), ), ,, minus, ., split, (, subParts, ., getMinus, (, ), ), ,, null, ), ;]
[., getPlus, (, ), ), ,, minus, ., split, (, subParts, ., getMinus, (, ), ), ,, null, ), ;]
[., getPlus, (, ), ), ,, minus, ., split, (, subParts, ., getMinus, (, ), ), ,, null, ), ;]
[minus, ., split, (, subParts, ., getMinus, (, ), ), ,, null, ), ;, split, ., plus, ., cut, =]
[minus, ., split, (, subParts, ., getMinus, (, ), ), ,, null, ), ;, split, ., plus, ., cut, =]
[getMinus, (, ), ), ,, null, ), ;, split, ., plus, ., cut, =, cutParts, ., getPlus, (, ), ;]
[getMinus, (, ), ), ,, null, ), ;, split, ., plus, ., cut, =, cutParts, ., getPlus, (, ), ;]
[getMinus, (, ), ), ,, null, ), ;, split, ., plus, ., cut, =, cutParts, ., getPlus, (, ), ;]
[), ;, split, ., plus, ., cut, =, cutParts, ., getPlus, (, ), ;, split, ., minus, ., cut, =]
[), ;, split, ., plus, ., cut, =, cutParts, ., getPlus, (, ), ;, split, ., minus, ., cut, =]
[;, split, ., minus, ., cut, =, cutParts, ., getMinus, (, ), ;, final, BSPTree, <, S, >, tmp, =]
[;, split, ., minus, ., cut, =, cutParts, ., getMinus, (, ), ;, final, BSPTree, <, S, >, tmp, =]
[;, split, ., minus, ., cut, =, cutParts, ., getMinus, (, ), ;, final, BSPTree, <, S, >, tmp, =]
[=, cutParts, ., getMinus, (, ), ;, final, BSPTree, <, S, >, tmp, =, split, ., plus, ., minus, ;]
[=, cutParts, ., getMinus, (, ), ;, final, BSPTree, <, S, >, tmp, =, split, ., plus, ., minus, ;]
[=, cutParts, ., getMinus, (, ), ;, final, BSPTree, <, S, >, tmp, =, split, ., plus, ., minus, ;]
[;, final, BSPTree, <, S, >, tmp, =, split, ., plus, ., minus, ;, split, ., plus, ., minus, =]
[;, final, BSPTree, <, S, >, tmp, =, split, ., plus, ., minus, ;, split, ., plus, ., minus, =]
[;, final, BSPTree, <, S, >, tmp, =, split, ., plus, ., minus, ;, split, ., plus, ., minus, =]
[tmp, =, split, ., plus, ., minus, ;, split, ., plus, ., minus, =, split, ., minus, ., plus, ;]
[tmp, =, split, ., plus, ., minus, ;, split, ., plus, ., minus, =, split, ., minus, ., plus, ;]
[tmp, =, split, ., plus, ., minus, ;, split, ., plus, ., minus, =, split, ., minus, ., plus, ;]
[tmp, =, split, ., plus, ., minus, ;, split, ., plus, ., minus, =, split, ., minus, ., plus, ;]
[split, ., plus, ., minus, =, split, ., minus, ., plus, ;, split, ., plus, ., minus, ., parent, =]
[split, ., plus, ., minus, =, split, ., minus, ., plus, ;, split, ., plus, ., minus, ., parent, =]
[minus, =, split, ., minus, ., plus, ;, split, ., plus, ., minus, ., parent, =, split, ., plus, ;]
[minus, =, split, ., minus, ., plus, ;, split, ., plus, ., minus, ., parent, =, split, ., plus, ;]
[minus, =, split, ., minus, ., plus, ;, split, ., plus, ., minus, ., parent, =, split, ., plus, ;]
[plus, ;, split, ., plus, ., minus, ., parent, =, split, ., plus, ;, split, ., minus, ., plus, =]
[split, ., plus, ., minus, ., parent, =, split, ., plus, ;, split, ., minus, ., plus, =, tmp, ;]
[split, ., plus, ., minus, ., parent, =, split, ., plus, ;, split, ., minus, ., plus, =, tmp, ;]
[split, ., plus, ., minus, ., parent, =, split, ., plus, ;, split, ., minus, ., plus, =, tmp, ;]
[split, ., plus, ., minus, ., parent, =, split, ., plus, ;, split, ., minus, ., plus, =, tmp, ;]
[split, ., plus, ;, split, ., minus, ., plus, =, tmp, ;, split, ., minus, ., plus, ., parent, =]
[split, ., plus, ;, split, ., minus, ., plus, =, tmp, ;, split, ., minus, ., plus, ., parent, =]
[split, ., minus, ., plus, =, tmp, ;, split, ., minus, ., plus, ., parent, =, split, ., minus, ;]
[split, ., minus, ., plus, =, tmp, ;, split, ., minus, ., plus, ., parent, =, split, ., minus, ;]
[split, ., minus, ., plus, =, tmp, ;, split, ., minus, ., plus, ., parent, =, split, ., minus, ;]
[split, ., minus, ., plus, ., parent, =, split, ., minus, ;, split, ., plus, ., condense, (, ), ;]
[split, ., minus, ., plus, ., parent, =, split, ., minus, ;, split, ., plus, ., condense, (, ), ;]
[split, ., minus, ., plus, ., parent, =, split, ., minus, ;, split, ., plus, ., condense, (, ), ;]
[., minus, ;, split, ., plus, ., condense, (, ), ;, split, ., minus, ., condense, (, ), ;, return]
[., condense, (, ), ;, split, ., minus, ., condense, (, ), ;, return, split, ;, }, default, :, return]
[., condense, (, ), ;, split, ., minus, ., condense, (, ), ;, return, split, ;, }, default, :, return]
[., condense, (, ), ;, split, ., minus, ., condense, (, ), ;, return, split, ;, }, default, :, return]
[;, split, ., minus, ., condense, (, ), ;, return, split, ;, }, default, :, return, cHyperplane, ., sameOrientationAs, (]
[minus, ., condense, (, ), ;, return, split, ;, }, default, :, return, cHyperplane, ., sameOrientationAs, (, sHyperplane, ), ?]
[return, split, ;, }, default, :, return, cHyperplane, ., sameOrientationAs, (, sHyperplane, ), ?, new, BSPTree, <, S, >, (]
[;, }, default, :, return, cHyperplane, ., sameOrientationAs, (, sHyperplane, ), ?, new, BSPTree, <, S, >, (, sub, ,]
[;, }, default, :, return, cHyperplane, ., sameOrientationAs, (, sHyperplane, ), ?, new, BSPTree, <, S, >, (, sub, ,]
[., sameOrientationAs, (, sHyperplane, ), ?, new, BSPTree, <, S, >, (, sub, ,, plus, ., copySelf, (, ), ,]
[., sameOrientationAs, (, sHyperplane, ), ?, new, BSPTree, <, S, >, (, sub, ,, plus, ., copySelf, (, ), ,]
[new, BSPTree, <, S, >, (, sub, ,, plus, ., copySelf, (, ), ,, minus, ., copySelf, (, ), ,]
[S, >, (, sub, ,, plus, ., copySelf, (, ), ,, minus, ., copySelf, (, ), ,, attribute, ), :]
[., copySelf, (, ), ,, minus, ., copySelf, (, ), ,, attribute, ), :, new, BSPTree, <, S, >, (]
[(, ), ,, minus, ., copySelf, (, ), ,, attribute, ), :, new, BSPTree, <, S, >, (, sub, ,]
[(, ), ,, minus, ., copySelf, (, ), ,, attribute, ), :, new, BSPTree, <, S, >, (, sub, ,]
[(, ), ,, attribute, ), :, new, BSPTree, <, S, >, (, sub, ,, minus, ., copySelf, (, ), ,]
[(, ), ,, attribute, ), :, new, BSPTree, <, S, >, (, sub, ,, minus, ., copySelf, (, ), ,]
[new, BSPTree, <, S, >, (, sub, ,, minus, ., copySelf, (, ), ,, plus, ., copySelf, (, ), ,]
[), ;, }, }, public, void, insertInTree, (, final, BSPTree, <, S, >, parentTree, ,, final, boolean, isPlusChild, ), {]
[}, }, public, void, insertInTree, (, final, BSPTree, <, S, >, parentTree, ,, final, boolean, isPlusChild, ), {, parent, =]
[insertInTree, (, final, BSPTree, <, S, >, parentTree, ,, final, boolean, isPlusChild, ), {, parent, =, parentTree, ;, if, (]
[insertInTree, (, final, BSPTree, <, S, >, parentTree, ,, final, boolean, isPlusChild, ), {, parent, =, parentTree, ;, if, (]
[final, BSPTree, <, S, >, parentTree, ,, final, boolean, isPlusChild, ), {, parent, =, parentTree, ;, if, (, parentTree, !=]
[parentTree, ,, final, boolean, isPlusChild, ), {, parent, =, parentTree, ;, if, (, parentTree, !=, null, ), {, if, (]
[boolean, isPlusChild, ), {, parent, =, parentTree, ;, if, (, parentTree, !=, null, ), {, if, (, isPlusChild, ), {]
[boolean, isPlusChild, ), {, parent, =, parentTree, ;, if, (, parentTree, !=, null, ), {, if, (, isPlusChild, ), {]
[parent, =, parentTree, ;, if, (, parentTree, !=, null, ), {, if, (, isPlusChild, ), {, parentTree, ., plus, =]
[(, parentTree, !=, null, ), {, if, (, isPlusChild, ), {, parentTree, ., plus, =, this, ;, }, else, {]
[(, parentTree, !=, null, ), {, if, (, isPlusChild, ), {, parentTree, ., plus, =, this, ;, }, else, {]
[), {, if, (, isPlusChild, ), {, parentTree, ., plus, =, this, ;, }, else, {, parentTree, ., minus, =]
[{, parentTree, ., plus, =, this, ;, }, else, {, parentTree, ., minus, =, this, ;, }, }, if, (]
[{, parentTree, ., plus, =, this, ;, }, else, {, parentTree, ., minus, =, this, ;, }, }, if, (]
[., plus, =, this, ;, }, else, {, parentTree, ., minus, =, this, ;, }, }, if, (, cut, !=]
[=, this, ;, }, }, if, (, cut, !=, null, ), {, for, (, BSPTree, <, S, >, tree, =]
[;, }, }, if, (, cut, !=, null, ), {, for, (, BSPTree, <, S, >, tree, =, this, ;]
[;, }, }, if, (, cut, !=, null, ), {, for, (, BSPTree, <, S, >, tree, =, this, ;]
[;, }, }, if, (, cut, !=, null, ), {, for, (, BSPTree, <, S, >, tree, =, this, ;]
[(, cut, !=, null, ), {, for, (, BSPTree, <, S, >, tree, =, this, ;, tree, ., parent, !=]
[!=, null, ), {, for, (, BSPTree, <, S, >, tree, =, this, ;, tree, ., parent, !=, null, ;]
[), {, for, (, BSPTree, <, S, >, tree, =, this, ;, tree, ., parent, !=, null, ;, tree, =]
[), {, for, (, BSPTree, <, S, >, tree, =, this, ;, tree, ., parent, !=, null, ;, tree, =]
[tree, ., parent, !=, null, ;, tree, =, tree, ., parent, ), {, final, Hyperplane, <, S, >, hyperplane, =]
[tree, ., parent, !=, null, ;, tree, =, tree, ., parent, ), {, final, Hyperplane, <, S, >, hyperplane, =]
[tree, ., parent, !=, null, ;, tree, =, tree, ., parent, ), {, final, Hyperplane, <, S, >, hyperplane, =]
[tree, ., parent, !=, null, ;, tree, =, tree, ., parent, ), {, final, Hyperplane, <, S, >, hyperplane, =]
[{, final, Hyperplane, <, S, >, hyperplane, =, tree, ., parent, ., cut, ., getHyperplane, (, ), ;, if, (]
[{, final, Hyperplane, <, S, >, hyperplane, =, tree, ., parent, ., cut, ., getHyperplane, (, ), ;, if, (]
[Hyperplane, <, S, >, hyperplane, =, tree, ., parent, ., cut, ., getHyperplane, (, ), ;, if, (, tree, ==]
[Hyperplane, <, S, >, hyperplane, =, tree, ., parent, ., cut, ., getHyperplane, (, ), ;, if, (, tree, ==]
[Hyperplane, <, S, >, hyperplane, =, tree, ., parent, ., cut, ., getHyperplane, (, ), ;, if, (, tree, ==]
[., parent, ., cut, ., getHyperplane, (, ), ;, if, (, tree, ==, tree, ., parent, ., plus, ), {]
[., cut, ., getHyperplane, (, ), ;, if, (, tree, ==, tree, ., parent, ., plus, ), {, cut, =]
[., cut, ., getHyperplane, (, ), ;, if, (, tree, ==, tree, ., parent, ., plus, ), {, cut, =]
[., cut, ., getHyperplane, (, ), ;, if, (, tree, ==, tree, ., parent, ., plus, ), {, cut, =]
[(, ), ;, if, (, tree, ==, tree, ., parent, ., plus, ), {, cut, =, cut, ., split, (]
[tree, ., parent, ., plus, ), {, cut, =, cut, ., split, (, hyperplane, ), ., getPlus, (, ), ;]
[tree, ., parent, ., plus, ), {, cut, =, cut, ., split, (, hyperplane, ), ., getPlus, (, ), ;]
[plus, ), {, cut, =, cut, ., split, (, hyperplane, ), ., getPlus, (, ), ;, plus, ., chopOffMinus, (]
[cut, =, cut, ., split, (, hyperplane, ), ., getPlus, (, ), ;, plus, ., chopOffMinus, (, hyperplane, ), ;]
[cut, =, cut, ., split, (, hyperplane, ), ., getPlus, (, ), ;, plus, ., chopOffMinus, (, hyperplane, ), ;]
[split, (, hyperplane, ), ., getPlus, (, ), ;, plus, ., chopOffMinus, (, hyperplane, ), ;, minus, ., chopOffMinus, (]
[(, ), ;, plus, ., chopOffMinus, (, hyperplane, ), ;, minus, ., chopOffMinus, (, hyperplane, ), ;, }, else, {]
[;, plus, ., chopOffMinus, (, hyperplane, ), ;, minus, ., chopOffMinus, (, hyperplane, ), ;, }, else, {, cut, =]
[;, plus, ., chopOffMinus, (, hyperplane, ), ;, minus, ., chopOffMinus, (, hyperplane, ), ;, }, else, {, cut, =]
[;, plus, ., chopOffMinus, (, hyperplane, ), ;, minus, ., chopOffMinus, (, hyperplane, ), ;, }, else, {, cut, =]
[(, hyperplane, ), ;, minus, ., chopOffMinus, (, hyperplane, ), ;, }, else, {, cut, =, cut, ., split, (]
[(, hyperplane, ), ;, }, else, {, cut, =, cut, ., split, (, hyperplane, ), ., getMinus, (, ), ;]
[(, hyperplane, ), ;, }, else, {, cut, =, cut, ., split, (, hyperplane, ), ., getMinus, (, ), ;]
[}, else, {, cut, =, cut, ., split, (, hyperplane, ), ., getMinus, (, ), ;, plus, ., chopOffPlus, (]
[cut, =, cut, ., split, (, hyperplane, ), ., getMinus, (, ), ;, plus, ., chopOffPlus, (, hyperplane, ), ;]
[cut, =, cut, ., split, (, hyperplane, ), ., getMinus, (, ), ;, plus, ., chopOffPlus, (, hyperplane, ), ;]
[split, (, hyperplane, ), ., getMinus, (, ), ;, plus, ., chopOffPlus, (, hyperplane, ), ;, minus, ., chopOffPlus, (]
[getMinus, (, ), ;, plus, ., chopOffPlus, (, hyperplane, ), ;, minus, ., chopOffPlus, (, hyperplane, ), ;, }, }]
[condense, (, ), ;, }, }, private, void, chopOffMinus, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (]
[condense, (, ), ;, }, }, private, void, chopOffMinus, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (]
[), ;, }, }, private, void, chopOffMinus, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=]
[}, private, void, chopOffMinus, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=, null, ), {]
[void, chopOffMinus, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=, null, ), {, cut, =]
[void, chopOffMinus, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=, null, ), {, cut, =]
[void, chopOffMinus, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=, null, ), {, cut, =]
[Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=, null, ), {, cut, =, cut, ., split, (]
[if, (, cut, !=, null, ), {, cut, =, cut, ., split, (, hyperplane, ), ., getPlus, (, ), ;]
[if, (, cut, !=, null, ), {, cut, =, cut, ., split, (, hyperplane, ), ., getPlus, (, ), ;]
[null, ), {, cut, =, cut, ., split, (, hyperplane, ), ., getPlus, (, ), ;, plus, ., chopOffMinus, (]
[cut, =, cut, ., split, (, hyperplane, ), ., getPlus, (, ), ;, plus, ., chopOffMinus, (, hyperplane, ), ;]
[cut, =, cut, ., split, (, hyperplane, ), ., getPlus, (, ), ;, plus, ., chopOffMinus, (, hyperplane, ), ;]
[split, (, hyperplane, ), ., getPlus, (, ), ;, plus, ., chopOffMinus, (, hyperplane, ), ;, minus, ., chopOffMinus, (]
[(, hyperplane, ), ;, }, }, private, void, chopOffPlus, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (]
[(, hyperplane, ), ;, }, }, private, void, chopOffPlus, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (]
[), ;, }, }, private, void, chopOffPlus, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=]
[}, private, void, chopOffPlus, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=, null, ), {]
[void, chopOffPlus, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=, null, ), {, cut, =]
[void, chopOffPlus, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=, null, ), {, cut, =]
[void, chopOffPlus, (, final, Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=, null, ), {, cut, =]
[Hyperplane, <, S, >, hyperplane, ), {, if, (, cut, !=, null, ), {, cut, =, cut, ., split, (]
[if, (, cut, !=, null, ), {, cut, =, cut, ., split, (, hyperplane, ), ., getMinus, (, ), ;]
[if, (, cut, !=, null, ), {, cut, =, cut, ., split, (, hyperplane, ), ., getMinus, (, ), ;]
[null, ), {, cut, =, cut, ., split, (, hyperplane, ), ., getMinus, (, ), ;, plus, ., chopOffPlus, (]
[cut, =, cut, ., split, (, hyperplane, ), ., getMinus, (, ), ;, plus, ., chopOffPlus, (, hyperplane, ), ;]
[cut, =, cut, ., split, (, hyperplane, ), ., getMinus, (, ), ;, plus, ., chopOffPlus, (, hyperplane, ), ;]
[split, (, hyperplane, ), ., getMinus, (, ), ;, plus, ., chopOffPlus, (, hyperplane, ), ;, minus, ., chopOffPlus, (]
