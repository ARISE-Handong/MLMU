[., mockito, ., exceptions, ., Reporter, ;, public, class, Timer, {, private, final, long, durationMillis, ;, private, long, startTime, =]
[mockito, ., exceptions, ., Reporter, ;, public, class, Timer, {, private, final, long, durationMillis, ;, private, long, startTime, =, -]
[{, private, final, long, durationMillis, ;, private, long, startTime, =, -, 1, ;, public, Timer, (, long, durationMillis, ), {]
[final, long, durationMillis, ;, private, long, startTime, =, -, 1, ;, public, Timer, (, long, durationMillis, ), {, validateInput, (]
[;, private, long, startTime, =, -, 1, ;, public, Timer, (, long, durationMillis, ), {, validateInput, (, durationMillis, ), ;]
[;, private, long, startTime, =, -, 1, ;, public, Timer, (, long, durationMillis, ), {, validateInput, (, durationMillis, ), ;]
[=, -, 1, ;, public, Timer, (, long, durationMillis, ), {, validateInput, (, durationMillis, ), ;, this, ., durationMillis, =]
[{, validateInput, (, durationMillis, ), ;, this, ., durationMillis, =, durationMillis, ;, }, public, boolean, isCounting, (, ), {, assert]
[{, validateInput, (, durationMillis, ), ;, this, ., durationMillis, =, durationMillis, ;, }, public, boolean, isCounting, (, ), {, assert]
[(, durationMillis, ), ;, this, ., durationMillis, =, durationMillis, ;, }, public, boolean, isCounting, (, ), {, assert, startTime, !=]
[durationMillis, ), ;, this, ., durationMillis, =, durationMillis, ;, }, public, boolean, isCounting, (, ), {, assert, startTime, !=, -]
[this, ., durationMillis, =, durationMillis, ;, }, public, boolean, isCounting, (, ), {, assert, startTime, !=, -, 1, ;, return]
[this, ., durationMillis, =, durationMillis, ;, }, public, boolean, isCounting, (, ), {, assert, startTime, !=, -, 1, ;, return]
[this, ., durationMillis, =, durationMillis, ;, }, public, boolean, isCounting, (, ), {, assert, startTime, !=, -, 1, ;, return]
[this, ., durationMillis, =, durationMillis, ;, }, public, boolean, isCounting, (, ), {, assert, startTime, !=, -, 1, ;, return]
[}, public, boolean, isCounting, (, ), {, assert, startTime, !=, -, 1, ;, return, System, ., currentTimeMillis, (, ), -]
[boolean, isCounting, (, ), {, assert, startTime, !=, -, 1, ;, return, System, ., currentTimeMillis, (, ), -, startTime, <=]
[1, ;, return, System, ., currentTimeMillis, (, ), -, startTime, <=, durationMillis, ;, }, public, void, start, (, ), {]
[return, System, ., currentTimeMillis, (, ), -, startTime, <=, durationMillis, ;, }, public, void, start, (, ), {, startTime, =]
[return, System, ., currentTimeMillis, (, ), -, startTime, <=, durationMillis, ;, }, public, void, start, (, ), {, startTime, =]
[{, startTime, =, System, ., currentTimeMillis, (, ), ;, }, private, void, validateInput, (, long, durationMillis, ), {, if, (]
[{, startTime, =, System, ., currentTimeMillis, (, ), ;, }, private, void, validateInput, (, long, durationMillis, ), {, if, (]
[=, System, ., currentTimeMillis, (, ), ;, }, private, void, validateInput, (, long, durationMillis, ), {, if, (, durationMillis, <]
[currentTimeMillis, (, ), ;, }, private, void, validateInput, (, long, durationMillis, ), {, if, (, durationMillis, <, 0, ), {]
[currentTimeMillis, (, ), ;, }, private, void, validateInput, (, long, durationMillis, ), {, if, (, durationMillis, <, 0, ), {]
[validateInput, (, long, durationMillis, ), {, if, (, durationMillis, <, 0, ), {, new, Reporter, (, ), ., cannotCreateTimerWithNegativeDurationTime, (]
[{, new, Reporter, (, ), ., cannotCreateTimerWithNegativeDurationTime, (, durationMillis, ), ;, }, }, public, long, duration, (, ), {, return]
