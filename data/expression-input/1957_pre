[import, java, ., util, ., logging, ., Logger, ;, class, RemoveUnusedPrototypeProperties, implements, SpecializationAwareCompilerPass, {, private, static, final, Logger, logger, =]
[import, java, ., util, ., logging, ., Logger, ;, class, RemoveUnusedPrototypeProperties, implements, SpecializationAwareCompilerPass, {, private, static, final, Logger, logger, =]
[., logging, ., Logger, ;, class, RemoveUnusedPrototypeProperties, implements, SpecializationAwareCompilerPass, {, private, static, final, Logger, logger, =, Logger, ., getLogger, (]
[., logging, ., Logger, ;, class, RemoveUnusedPrototypeProperties, implements, SpecializationAwareCompilerPass, {, private, static, final, Logger, logger, =, Logger, ., getLogger, (]
[anchorUnusedVars, ;, private, SpecializeModule, ., SpecializationState, specializationState, ;, RemoveUnusedPrototypeProperties, (, AbstractCompiler, compiler, ,, boolean, canModifyExterns, ,, boolean, anchorUnusedVars, ), {]
[anchorUnusedVars, ;, private, SpecializeModule, ., SpecializationState, specializationState, ;, RemoveUnusedPrototypeProperties, (, AbstractCompiler, compiler, ,, boolean, canModifyExterns, ,, boolean, anchorUnusedVars, ), {]
[., SpecializationState, specializationState, ;, RemoveUnusedPrototypeProperties, (, AbstractCompiler, compiler, ,, boolean, canModifyExterns, ,, boolean, anchorUnusedVars, ), {, this, ., compiler, =]
[specializationState, ;, RemoveUnusedPrototypeProperties, (, AbstractCompiler, compiler, ,, boolean, canModifyExterns, ,, boolean, anchorUnusedVars, ), {, this, ., compiler, =, compiler, ;]
[specializationState, ;, RemoveUnusedPrototypeProperties, (, AbstractCompiler, compiler, ,, boolean, canModifyExterns, ,, boolean, anchorUnusedVars, ), {, this, ., compiler, =, compiler, ;]
[AbstractCompiler, compiler, ,, boolean, canModifyExterns, ,, boolean, anchorUnusedVars, ), {, this, ., compiler, =, compiler, ;, this, ., canModifyExterns, =]
[,, boolean, canModifyExterns, ,, boolean, anchorUnusedVars, ), {, this, ., compiler, =, compiler, ;, this, ., canModifyExterns, =, canModifyExterns, ;]
[,, boolean, canModifyExterns, ,, boolean, anchorUnusedVars, ), {, this, ., compiler, =, compiler, ;, this, ., canModifyExterns, =, canModifyExterns, ;]
[boolean, anchorUnusedVars, ), {, this, ., compiler, =, compiler, ;, this, ., canModifyExterns, =, canModifyExterns, ;, this, ., anchorUnusedVars, =]
[;, this, ., anchorUnusedVars, =, anchorUnusedVars, ;, }, @, Override, public, void, enableSpecialization, (, SpecializeModule, ., SpecializationState, state, ), {]
[;, this, ., anchorUnusedVars, =, anchorUnusedVars, ;, }, @, Override, public, void, enableSpecialization, (, SpecializeModule, ., SpecializationState, state, ), {]
[=, anchorUnusedVars, ;, }, @, Override, public, void, enableSpecialization, (, SpecializeModule, ., SpecializationState, state, ), {, this, ., specializationState, =]
[=, state, ;, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, AnalyzePrototypeProperties, analyzer, =]
[}, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, AnalyzePrototypeProperties, analyzer, =, new, AnalyzePrototypeProperties, (]
[Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, AnalyzePrototypeProperties, analyzer, =, new, AnalyzePrototypeProperties, (, compiler, ,]
[void, process, (, Node, externRoot, ,, Node, root, ), {, AnalyzePrototypeProperties, analyzer, =, new, AnalyzePrototypeProperties, (, compiler, ,, null, ,]
[(, Node, externRoot, ,, Node, root, ), {, AnalyzePrototypeProperties, analyzer, =, new, AnalyzePrototypeProperties, (, compiler, ,, null, ,, canModifyExterns, ,]
[,, Node, root, ), {, AnalyzePrototypeProperties, analyzer, =, new, AnalyzePrototypeProperties, (, compiler, ,, null, ,, canModifyExterns, ,, anchorUnusedVars, ), ;]
[,, Node, root, ), {, AnalyzePrototypeProperties, analyzer, =, new, AnalyzePrototypeProperties, (, compiler, ,, null, ,, canModifyExterns, ,, anchorUnusedVars, ), ;]
[{, AnalyzePrototypeProperties, analyzer, =, new, AnalyzePrototypeProperties, (, compiler, ,, null, ,, canModifyExterns, ,, anchorUnusedVars, ), ;, analyzer, ., process, (]
[analyzer, =, new, AnalyzePrototypeProperties, (, compiler, ,, null, ,, canModifyExterns, ,, anchorUnusedVars, ), ;, analyzer, ., process, (, externRoot, ,]
[AnalyzePrototypeProperties, (, compiler, ,, null, ,, canModifyExterns, ,, anchorUnusedVars, ), ;, analyzer, ., process, (, externRoot, ,, root, ), ;]
[compiler, ,, null, ,, canModifyExterns, ,, anchorUnusedVars, ), ;, analyzer, ., process, (, externRoot, ,, root, ), ;, removeUnusedSymbols, (]
[compiler, ,, null, ,, canModifyExterns, ,, anchorUnusedVars, ), ;, analyzer, ., process, (, externRoot, ,, root, ), ;, removeUnusedSymbols, (]
[getAllNameInfo, (, ), ), ;, }, private, void, removeUnusedSymbols, (, Collection, <, NameInfo, >, allNameInfo, ), {, boolean, changed, =]
[void, removeUnusedSymbols, (, Collection, <, NameInfo, >, allNameInfo, ), {, boolean, changed, =, false, ;, for, (, NameInfo, nameInfo, :]
[NameInfo, >, allNameInfo, ), {, boolean, changed, =, false, ;, for, (, NameInfo, nameInfo, :, allNameInfo, ), {, if, (]
[>, allNameInfo, ), {, boolean, changed, =, false, ;, for, (, NameInfo, nameInfo, :, allNameInfo, ), {, if, (, !]
[>, allNameInfo, ), {, boolean, changed, =, false, ;, for, (, NameInfo, nameInfo, :, allNameInfo, ), {, if, (, !]
[nameInfo, :, allNameInfo, ), {, if, (, !, nameInfo, ., isReferenced, (, ), ), {, for, (, Symbol, declaration, :]
[nameInfo, :, allNameInfo, ), {, if, (, !, nameInfo, ., isReferenced, (, ), ), {, for, (, Symbol, declaration, :]
[isReferenced, (, ), ), {, for, (, Symbol, declaration, :, nameInfo, ., getDeclarations, (, ), ), {, boolean, canRemove, =]
[{, for, (, Symbol, declaration, :, nameInfo, ., getDeclarations, (, ), ), {, boolean, canRemove, =, false, ;, if, (]
[{, for, (, Symbol, declaration, :, nameInfo, ., getDeclarations, (, ), ), {, boolean, canRemove, =, false, ;, if, (]
[(, Symbol, declaration, :, nameInfo, ., getDeclarations, (, ), ), {, boolean, canRemove, =, false, ;, if, (, specializationState, ==]
[:, nameInfo, ., getDeclarations, (, ), ), {, boolean, canRemove, =, false, ;, if, (, specializationState, ==, null, ), {]
[., getDeclarations, (, ), ), {, boolean, canRemove, =, false, ;, if, (, specializationState, ==, null, ), {, canRemove, =]
[=, false, ;, if, (, specializationState, ==, null, ), {, canRemove, =, true, ;, }, else, {, Node, specializableFunction, =]
[;, if, (, specializationState, ==, null, ), {, canRemove, =, true, ;, }, else, {, Node, specializableFunction, =, getSpecializableFunctionFromSymbol, (]
[null, ), {, canRemove, =, true, ;, }, else, {, Node, specializableFunction, =, getSpecializableFunctionFromSymbol, (, declaration, ), ;, if, (]
[null, ), {, canRemove, =, true, ;, }, else, {, Node, specializableFunction, =, getSpecializableFunctionFromSymbol, (, declaration, ), ;, if, (]
[{, canRemove, =, true, ;, }, else, {, Node, specializableFunction, =, getSpecializableFunctionFromSymbol, (, declaration, ), ;, if, (, specializableFunction, !=]
[true, ;, }, else, {, Node, specializableFunction, =, getSpecializableFunctionFromSymbol, (, declaration, ), ;, if, (, specializableFunction, !=, null, ), {]
[true, ;, }, else, {, Node, specializableFunction, =, getSpecializableFunctionFromSymbol, (, declaration, ), ;, if, (, specializableFunction, !=, null, ), {]
[{, Node, specializableFunction, =, getSpecializableFunctionFromSymbol, (, declaration, ), ;, if, (, specializableFunction, !=, null, ), {, specializationState, ., reportRemovedFunction, (]
[specializableFunction, =, getSpecializableFunctionFromSymbol, (, declaration, ), ;, if, (, specializableFunction, !=, null, ), {, specializationState, ., reportRemovedFunction, (, specializableFunction, ,]
[(, declaration, ), ;, if, (, specializableFunction, !=, null, ), {, specializationState, ., reportRemovedFunction, (, specializableFunction, ,, null, ), ;]
[), ;, if, (, specializableFunction, !=, null, ), {, specializationState, ., reportRemovedFunction, (, specializableFunction, ,, null, ), ;, canRemove, =]
[null, ), {, specializationState, ., reportRemovedFunction, (, specializableFunction, ,, null, ), ;, canRemove, =, true, ;, }, }, if, (]
[specializationState, ., reportRemovedFunction, (, specializableFunction, ,, null, ), ;, canRemove, =, true, ;, }, }, if, (, canRemove, ), {]
[specializationState, ., reportRemovedFunction, (, specializableFunction, ,, null, ), ;, canRemove, =, true, ;, }, }, if, (, canRemove, ), {]
[null, ), ;, canRemove, =, true, ;, }, }, if, (, canRemove, ), {, declaration, ., remove, (, ), ;]
[;, canRemove, =, true, ;, }, }, if, (, canRemove, ), {, declaration, ., remove, (, ), ;, changed, =]
[;, }, }, if, (, canRemove, ), {, declaration, ., remove, (, ), ;, changed, =, true, ;, }, }]
[;, }, }, if, (, canRemove, ), {, declaration, ., remove, (, ), ;, changed, =, true, ;, }, }]
[(, canRemove, ), {, declaration, ., remove, (, ), ;, changed, =, true, ;, }, }, logger, ., fine, (]
[(, canRemove, ), {, declaration, ., remove, (, ), ;, changed, =, true, ;, }, }, logger, ., fine, (]
[), {, declaration, ., remove, (, ), ;, changed, =, true, ;, }, }, logger, ., fine, (, "Removed unused prototype property: ", +]
[), {, declaration, ., remove, (, ), ;, changed, =, true, ;, }, }, logger, ., fine, (, "Removed unused prototype property: ", +]
[=, true, ;, }, }, logger, ., fine, (, "Removed unused prototype property: ", +, nameInfo, ., name, ), ;, }, }, if, (]
[}, }, logger, ., fine, (, "Removed unused prototype property: ", +, nameInfo, ., name, ), ;, }, }, if, (, changed, ), {]
[}, }, logger, ., fine, (, "Removed unused prototype property: ", +, nameInfo, ., name, ), ;, }, }, if, (, changed, ), {]
[(, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, getSpecializableFunctionFromSymbol, (, Symbol, symbol, ), {]
[(, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, getSpecializableFunctionFromSymbol, (, Symbol, symbol, ), {]
[compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, getSpecializableFunctionFromSymbol, (, Symbol, symbol, ), {, Preconditions, ., checkNotNull, (]
[}, }, private, Node, getSpecializableFunctionFromSymbol, (, Symbol, symbol, ), {, Preconditions, ., checkNotNull, (, specializationState, ), ;, Node, specializableFunction, =]
[getSpecializableFunctionFromSymbol, (, Symbol, symbol, ), {, Preconditions, ., checkNotNull, (, specializationState, ), ;, Node, specializableFunction, =, null, ;, if, (]
[getSpecializableFunctionFromSymbol, (, Symbol, symbol, ), {, Preconditions, ., checkNotNull, (, specializationState, ), ;, Node, specializableFunction, =, null, ;, if, (]
[{, Preconditions, ., checkNotNull, (, specializationState, ), ;, Node, specializableFunction, =, null, ;, if, (, symbol, instanceof, GlobalFunction, ), {]
[., checkNotNull, (, specializationState, ), ;, Node, specializableFunction, =, null, ;, if, (, symbol, instanceof, GlobalFunction, ), {, specializableFunction, =]
[., checkNotNull, (, specializationState, ), ;, Node, specializableFunction, =, null, ;, if, (, symbol, instanceof, GlobalFunction, ), {, specializableFunction, =]
[checkNotNull, (, specializationState, ), ;, Node, specializableFunction, =, null, ;, if, (, symbol, instanceof, GlobalFunction, ), {, specializableFunction, =, (]
[), ;, Node, specializableFunction, =, null, ;, if, (, symbol, instanceof, GlobalFunction, ), {, specializableFunction, =, (, (, GlobalFunction, )]
[GlobalFunction, ), {, specializableFunction, =, (, (, GlobalFunction, ), symbol, ), ., getFunctionNode, (, ), ;, }, else, if, (]
[GlobalFunction, ), {, specializableFunction, =, (, (, GlobalFunction, ), symbol, ), ., getFunctionNode, (, ), ;, }, else, if, (]
[), symbol, ), ., getFunctionNode, (, ), ;, }, else, if, (, symbol, instanceof, AssignmentProperty, ), {, Node, propertyValue, =]
[), symbol, ), ., getFunctionNode, (, ), ;, }, else, if, (, symbol, instanceof, AssignmentProperty, ), {, Node, propertyValue, =]
[symbol, ), ., getFunctionNode, (, ), ;, }, else, if, (, symbol, instanceof, AssignmentProperty, ), {, Node, propertyValue, =, (]
[getFunctionNode, (, ), ;, }, else, if, (, symbol, instanceof, AssignmentProperty, ), {, Node, propertyValue, =, (, (, AssignmentProperty, )]
[instanceof, AssignmentProperty, ), {, Node, propertyValue, =, (, (, AssignmentProperty, ), symbol, ), ., getValue, (, ), ;, if, (]
[instanceof, AssignmentProperty, ), {, Node, propertyValue, =, (, (, AssignmentProperty, ), symbol, ), ., getValue, (, ), ;, if, (]
[(, (, AssignmentProperty, ), symbol, ), ., getValue, (, ), ;, if, (, propertyValue, ., isFunction, (, ), ), {]
[AssignmentProperty, ), symbol, ), ., getValue, (, ), ;, if, (, propertyValue, ., isFunction, (, ), ), {, specializableFunction, =]
[), ;, if, (, propertyValue, ., isFunction, (, ), ), {, specializableFunction, =, propertyValue, ;, }, }, else, if, (]
[), ;, if, (, propertyValue, ., isFunction, (, ), ), {, specializableFunction, =, propertyValue, ;, }, }, else, if, (]
[isFunction, (, ), ), {, specializableFunction, =, propertyValue, ;, }, }, else, if, (, symbol, instanceof, LiteralProperty, ), {, return]
[specializableFunction, =, propertyValue, ;, }, }, else, if, (, symbol, instanceof, LiteralProperty, ), {, return, null, ;, }, else, {]
[specializableFunction, =, propertyValue, ;, }, }, else, if, (, symbol, instanceof, LiteralProperty, ), {, return, null, ;, }, else, {]
[}, }, else, if, (, symbol, instanceof, LiteralProperty, ), {, return, null, ;, }, else, {, Preconditions, ., checkState, (]
[else, if, (, symbol, instanceof, LiteralProperty, ), {, return, null, ;, }, else, {, Preconditions, ., checkState, (, false, ,]
[), {, return, null, ;, }, else, {, Preconditions, ., checkState, (, false, ,, "Should be unreachable.", ), ;, }, if, (]
[), {, return, null, ;, }, else, {, Preconditions, ., checkState, (, false, ,, "Should be unreachable.", ), ;, }, if, (]
[), {, return, null, ;, }, else, {, Preconditions, ., checkState, (, false, ,, "Should be unreachable.", ), ;, }, if, (]
[return, null, ;, }, else, {, Preconditions, ., checkState, (, false, ,, "Should be unreachable.", ), ;, }, if, (, specializableFunction, !=]
[;, }, else, {, Preconditions, ., checkState, (, false, ,, "Should be unreachable.", ), ;, }, if, (, specializableFunction, !=, null, &&]
[;, }, else, {, Preconditions, ., checkState, (, false, ,, "Should be unreachable.", ), ;, }, if, (, specializableFunction, !=, null, &&]
[Preconditions, ., checkState, (, false, ,, "Should be unreachable.", ), ;, }, if, (, specializableFunction, !=, null, &&, specializationState, ., canFixupFunction, (]
[,, "Should be unreachable.", ), ;, }, if, (, specializableFunction, !=, null, &&, specializationState, ., canFixupFunction, (, specializableFunction, ), ), {, return]
[(, specializableFunction, !=, null, &&, specializationState, ., canFixupFunction, (, specializableFunction, ), ), {, return, specializableFunction, ;, }, else, {, return]
