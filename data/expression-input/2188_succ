[=, null, ;, }, protected, AbstractFieldMatrix, (, final, Field, <, T, >, field, ), {, this, ., field, =, field]
[;, }, protected, AbstractFieldMatrix, (, final, Field, <, T, >, field, ), {, this, ., field, =, field, ;, }]
[=, field, ;, }, protected, AbstractFieldMatrix, (, final, Field, <, T, >, field, ,, final, int, rowDimension, ,, final, int]
[., field, =, field, ;, }, protected, AbstractFieldMatrix, (, final, Field, <, T, >, field, ,, final, int, rowDimension, ,]
[;, }, protected, AbstractFieldMatrix, (, final, Field, <, T, >, field, ,, final, int, rowDimension, ,, final, int, columnDimension, )]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DIMENSION, ,, rowDimension, ), ;, }, if, (, columnDimension, <=, 0, )]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DIMENSION, ,, rowDimension, ), ;, }, if, (, columnDimension, <=]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DIMENSION, ,, rowDimension, ), ;, }, if, (, columnDimension, <=, 0, )]
[;, }, if, (, columnDimension, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DIMENSION, ,, columnDimension, ), ;]
[,, rowDimension, ), ;, }, if, (, columnDimension, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DIMENSION, ,]
[., DIMENSION, ,, rowDimension, ), ;, }, if, (, columnDimension, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, .]
[), ;, }, if, (, columnDimension, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DIMENSION, ,, columnDimension, )]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DIMENSION, ,, columnDimension, ), ;, }, this, ., field, =, field, ;]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DIMENSION, ,, columnDimension, ), ;, }, this, ., field, =]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DIMENSION, ,, columnDimension, ), ;, }, this, ., field, =, field, ;]
[;, }, this, ., field, =, field, ;, }, protected, static, <, T, extends, FieldElement, <, T, >, >, Field]
[,, columnDimension, ), ;, }, this, ., field, =, field, ;, }, protected, static, <, T, extends, FieldElement, <, T]
[., DIMENSION, ,, columnDimension, ), ;, }, this, ., field, =, field, ;, }, protected, static, <, T, extends, FieldElement]
[), ;, }, this, ., field, =, field, ;, }, protected, static, <, T, extends, FieldElement, <, T, >, >]
[=, field, ;, }, protected, static, <, T, extends, FieldElement, <, T, >, >, Field, <, T, >, extractField, (]
[., field, =, field, ;, }, protected, static, <, T, extends, FieldElement, <, T, >, >, Field, <, T, >]
[;, }, protected, static, <, T, extends, FieldElement, <, T, >, >, Field, <, T, >, extractField, (, final, T]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, d, ., length, ==, 0, ), {, throw, new]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, d, ., length, ==, 0, ), {]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, d, ., length, ==, 0, ), {, throw, new]
[;, }, if, (, d, ., length, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, if, (, d, [, 0, ], ., length]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, if, (, d, [, 0, ]]
[., length, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, if, (, d, []
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, if, (, d, [, 0, ], ., length]
[;, }, if, (, d, [, 0, ], ., length, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, .]
[), ;, }, if, (, d, [, 0, ], ., length, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats]
[., AT_LEAST_ONE_ROW, ), ;, }, if, (, d, [, 0, ], ., length, ==, 0, ), {, throw, new, NoDataException]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, return, d, [, 0, ], [, 0, ]]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, return, d, [, 0, ], []
[., length, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, return, d, [, 0]
[[, 0, ], ., length, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, return]
[], ., length, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, return, d, []
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, return, d, [, 0, ], [, 0, ]]
[;, }, return, d, [, 0, ], [, 0, ], ., getField, (, ), ;, }, protected, static, <, T]
[), ;, }, return, d, [, 0, ], [, 0, ], ., getField, (, ), ;, }, protected, static, <]
[., AT_LEAST_ONE_COLUMN, ), ;, }, return, d, [, 0, ], [, 0, ], ., getField, (, ), ;, }, protected]
[;, }, protected, static, <, T, extends, FieldElement, <, T, >, >, Field, <, T, >, extractField, (, final, T]
[., getField, (, ), ;, }, protected, static, <, T, extends, FieldElement, <, T, >, >, Field, <, T, >]
[[, 0, ], ., getField, (, ), ;, }, protected, static, <, T, extends, FieldElement, <, T, >, >, Field]
[[, 0, ], [, 0, ], ., getField, (, ), ;, }, protected, static, <, T, extends, FieldElement, <, T]
[], [, 0, ], ., getField, (, ), ;, }, protected, static, <, T, extends, FieldElement, <, T, >, >]
[], ., getField, (, ), ;, }, protected, static, <, T, extends, FieldElement, <, T, >, >, Field, <, T]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, return, d, [, 0, ], ., getField, (]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, return, d, [, 0, ], .]
[., length, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, return, d, [, 0]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, return, d, [, 0, ], ., getField, (]
[;, }, return, d, [, 0, ], ., getField, (, ), ;, }, @, Deprecated, protected, static, <, T, extends]
[), ;, }, return, d, [, 0, ], ., getField, (, ), ;, }, @, Deprecated, protected, static, <, T]
[., AT_LEAST_ONE_ROW, ), ;, }, return, d, [, 0, ], ., getField, (, ), ;, }, @, Deprecated, protected, static]
[;, }, @, Deprecated, protected, static, <, T, extends, FieldElement, <, T, >, >, T, [, ], [, ], buildArray]
[., getField, (, ), ;, }, @, Deprecated, protected, static, <, T, extends, FieldElement, <, T, >, >, T, []
[[, 0, ], ., getField, (, ), ;, }, @, Deprecated, protected, static, <, T, extends, FieldElement, <, T, >]
[], ., getField, (, ), ;, }, @, Deprecated, protected, static, <, T, extends, FieldElement, <, T, >, >, T]
[;, }, @, Deprecated, protected, static, <, T, extends, FieldElement, <, T, >, >, T, [, ], buildArray, (, final]
[., buildArray, (, field, ,, rows, ,, columns, ), ;, }, @, Deprecated, protected, static, <, T, extends, FieldElement, <]
[,, rows, ,, columns, ), ;, }, @, Deprecated, protected, static, <, T, extends, FieldElement, <, T, >, >, T]
[,, columns, ), ;, }, @, Deprecated, protected, static, <, T, extends, FieldElement, <, T, >, >, T, [, ]]
[), ;, }, @, Deprecated, protected, static, <, T, extends, FieldElement, <, T, >, >, T, [, ], buildArray, (]
[;, }, public, Field, <, T, >, getField, (, ), {, return, field, ;, }, public, abstract, FieldMatrix, <, T]
[., buildArray, (, field, ,, length, ), ;, }, public, Field, <, T, >, getField, (, ), {, return, field]
[,, length, ), ;, }, public, Field, <, T, >, getField, (, ), {, return, field, ;, }, public, abstract]
[), ;, }, public, Field, <, T, >, getField, (, ), {, return, field, ;, }, public, abstract, FieldMatrix, <]
[;, }, public, abstract, FieldMatrix, <, T, >, createMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException]
[;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, FieldMatrix, <]
[), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, FieldMatrix]
[;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, FieldMatrix, <, T, >, out, =, createMatrix, (, rowCount, ,]
[;, final, FieldMatrix, <, T, >, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =]
[;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col]
[,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for]
[), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int]
[;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[<, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry]
[), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry]
[;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), .]
[<, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), .]
[), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), ., add, (, m]
[), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), ., add, (, m]
[;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, subtract, (, final, FieldMatrix, <, T, >, m]
[., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), ., add, (, m, ., getEntry, (]
[,, col, ,, getEntry, (, row, ,, col, ), ., add, (, m, ., getEntry, (, row, ,, col, )]
[,, getEntry, (, row, ,, col, ), ., add, (, m, ., getEntry, (, row, ,, col, ), ), )]
[), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, subtract, (, final, FieldMatrix, <, T, >]
[., add, (, m, ., getEntry, (, row, ,, col, ), ), ), ;, }, }, return, out, ;, }]
[,, col, ), ., add, (, m, ., getEntry, (, row, ,, col, ), ), ), ;, }, }, return]
[), ., add, (, m, ., getEntry, (, row, ,, col, ), ), ), ;, }, }, return, out, ;]
[), ), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, subtract, (, final, FieldMatrix, <, T]
[., getEntry, (, row, ,, col, ), ), ), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T]
[,, col, ), ), ), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, subtract, (, final]
[), ), ), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, subtract, (, final, FieldMatrix, <]
[;, }, public, FieldMatrix, <, T, >, subtract, (, final, FieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {, checkSubtractionCompatible]
[;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, FieldMatrix, <]
[), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, FieldMatrix]
[;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, FieldMatrix, <, T, >, out, =, createMatrix, (, rowCount, ,]
[;, final, FieldMatrix, <, T, >, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =]
[;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col]
[,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for]
[), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int]
[;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[<, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry]
[), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry]
[;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), .]
[<, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), .]
[), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), ., subtract, (, m]
[), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), ., subtract, (, m]
[;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, scalarAdd, (, final, T, d, ), {, final]
[., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), ., subtract, (, m, ., getEntry, (]
[,, col, ,, getEntry, (, row, ,, col, ), ., subtract, (, m, ., getEntry, (, row, ,, col, )]
[,, getEntry, (, row, ,, col, ), ., subtract, (, m, ., getEntry, (, row, ,, col, ), ), )]
[), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, scalarAdd, (, final, T, d, ), {]
[., subtract, (, m, ., getEntry, (, row, ,, col, ), ), ), ;, }, }, return, out, ;, }]
[,, col, ), ., subtract, (, m, ., getEntry, (, row, ,, col, ), ), ), ;, }, }, return]
[), ., subtract, (, m, ., getEntry, (, row, ,, col, ), ), ), ;, }, }, return, out, ;]
[), ), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, scalarAdd, (, final, T, d, )]
[., getEntry, (, row, ,, col, ), ), ), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T]
[,, col, ), ), ), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, scalarAdd, (, final]
[), ), ), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, scalarAdd, (, final, T, d]
[;, }, public, FieldMatrix, <, T, >, scalarAdd, (, final, T, d, ), {, final, int, rowCount, =, getRowDimension, (]
[;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, FieldMatrix, <, T, >, out, =, createMatrix, (, rowCount, ,]
[;, final, FieldMatrix, <, T, >, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =]
[;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col]
[,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for]
[), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int]
[;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[<, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry]
[), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry]
[;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), .]
[<, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), .]
[), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), ., add, (, d]
[), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), ., add, (, d]
[;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, scalarMultiply, (, final, T, d, ), {, final]
[., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), ., add, (, d, ), ), ;]
[,, col, ,, getEntry, (, row, ,, col, ), ., add, (, d, ), ), ;, }, }, return, out]
[,, getEntry, (, row, ,, col, ), ., add, (, d, ), ), ;, }, }, return, out, ;, }]
[), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, scalarMultiply, (, final, T, d, ), {]
[., add, (, d, ), ), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, scalarMultiply, (]
[,, col, ), ., add, (, d, ), ), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T]
[), ., add, (, d, ), ), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, scalarMultiply]
[), ), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, scalarMultiply, (, final, T, d, )]
[;, }, public, FieldMatrix, <, T, >, scalarMultiply, (, final, T, d, ), {, final, int, rowCount, =, getRowDimension, (]
[;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, FieldMatrix, <, T, >, out, =, createMatrix, (, rowCount, ,]
[;, final, FieldMatrix, <, T, >, out, =, createMatrix, (, rowCount, ,, columnCount, ), ;, for, (, int, row, =]
[;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col]
[,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for]
[), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;, ++, row, ), {, for, (, int]
[;, row, <, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[<, rowCount, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {]
[), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry]
[), {, for, (, int, col, =, 0, ;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry]
[;, col, <, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), .]
[<, columnCount, ;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col]
[;, ++, col, ), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), .]
[), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), ., multiply, (, d]
[), {, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), ., multiply, (, d]
[;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, multiply, (, final, FieldMatrix, <, T, >, m]
[., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), ., multiply, (, d, ), ), ;]
[,, col, ,, getEntry, (, row, ,, col, ), ., multiply, (, d, ), ), ;, }, }, return, out]
[,, getEntry, (, row, ,, col, ), ., multiply, (, d, ), ), ;, }, }, return, out, ;, }]
[), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, multiply, (, final, FieldMatrix, <, T, >]
[., multiply, (, d, ), ), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, multiply, (]
[,, col, ), ., multiply, (, d, ), ), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T]
[), ., multiply, (, d, ), ), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, multiply]
[), ), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, multiply, (, final, FieldMatrix, <, T]
[;, }, public, FieldMatrix, <, T, >, multiply, (, final, FieldMatrix, <, T, >, m, ), throws, DimensionMismatchException, {, checkMultiplicationCompatible]
[;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, m, ., getColumnDimension, (, ), ;, final]
[), ;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, m, ., getColumnDimension, (, ), ;]
[;, final, int, nCols, =, m, ., getColumnDimension, (, ), ;, final, int, nSum, =, getColumnDimension, (, ), ;, final]
[;, final, int, nSum, =, getColumnDimension, (, ), ;, final, FieldMatrix, <, T, >, out, =, createMatrix, (, nRows, ,]
[., getColumnDimension, (, ), ;, final, int, nSum, =, getColumnDimension, (, ), ;, final, FieldMatrix, <, T, >, out, =]
[;, final, FieldMatrix, <, T, >, out, =, createMatrix, (, nRows, ,, nCols, ), ;, for, (, int, row, =]
[;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int, col]
[,, nCols, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for]
[), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int]
[;, row, <, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {]
[<, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {]
[), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, T, sum, =]
[), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, T, sum, =]
[;, col, <, nCols, ;, ++, col, ), {, T, sum, =, field, ., getZero, (, ), ;, for, (]
[;, ++, col, ), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0]
[<, nCols, ;, ++, col, ), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i]
[;, ++, col, ), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0]
[), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, nSum, ;, ++, i, ), {, sum, =, sum, .]
[., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, nSum, ;, ++, i, ), {]
[;, i, <, nSum, ;, ++, i, ), {, sum, =, sum, ., add, (, getEntry, (, row, ,, i]
[;, ++, i, ), {, sum, =, sum, ., add, (, getEntry, (, row, ,, i, ), ., multiply, (]
[<, nSum, ;, ++, i, ), {, sum, =, sum, ., add, (, getEntry, (, row, ,, i, ), .]
[;, ++, i, ), {, sum, =, sum, ., add, (, getEntry, (, row, ,, i, ), ., multiply, (]
[), {, sum, =, sum, ., add, (, getEntry, (, row, ,, i, ), ., multiply, (, m, ., getEntry]
[), {, sum, =, sum, ., add, (, getEntry, (, row, ,, i, ), ., multiply, (, m, ., getEntry]
[=, sum, ., add, (, getEntry, (, row, ,, i, ), ., multiply, (, m, ., getEntry, (, i, ,]
[;, }, out, ., setEntry, (, row, ,, col, ,, sum, ), ;, }, }, return, out, ;, }, public]
[., add, (, getEntry, (, row, ,, i, ), ., multiply, (, m, ., getEntry, (, i, ,, col, )]
[), ;, }, out, ., setEntry, (, row, ,, col, ,, sum, ), ;, }, }, return, out, ;, }]
[., multiply, (, m, ., getEntry, (, i, ,, col, ), ), ), ;, }, out, ., setEntry, (, row]
[,, i, ), ., multiply, (, m, ., getEntry, (, i, ,, col, ), ), ), ;, }, out, .]
[), ., multiply, (, m, ., getEntry, (, i, ,, col, ), ), ), ;, }, out, ., setEntry, (]
[), ), ;, }, out, ., setEntry, (, row, ,, col, ,, sum, ), ;, }, }, return, out, ;]
[., getEntry, (, i, ,, col, ), ), ), ;, }, out, ., setEntry, (, row, ,, col, ,, sum]
[,, col, ), ), ), ;, }, out, ., setEntry, (, row, ,, col, ,, sum, ), ;, }, }]
[), ), ), ;, }, out, ., setEntry, (, row, ,, col, ,, sum, ), ;, }, }, return, out]
[;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, preMultiply, (, final, FieldMatrix, <, T, >, m]
[., setEntry, (, row, ,, col, ,, sum, ), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T]
[,, col, ,, sum, ), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, preMultiply, (, final]
[,, sum, ), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, preMultiply, (, final, FieldMatrix, <]
[), ;, }, }, return, out, ;, }, public, FieldMatrix, <, T, >, preMultiply, (, final, FieldMatrix, <, T, >]
[;, }, public, FieldMatrix, <, T, >, preMultiply, (, final, FieldMatrix, <, T, >, m, ), throws, DimensionMismatchException, {, return]
[;, }, public, FieldMatrix, <, T, >, power, (, final, int, p, ), throws, NonSquareMatrixException, ,, NotPositiveException, {, if, (]
[., multiply, (, this, ), ;, }, public, FieldMatrix, <, T, >, power, (, final, int, p, ), throws, NonSquareMatrixException]
[), ;, }, public, FieldMatrix, <, T, >, power, (, final, int, p, ), throws, NonSquareMatrixException, ,, NotPositiveException, {, if]
[), {, throw, new, NotPositiveException, (, p, ), ;, }, if, (, !, isSquare, (, ), ), {, throw, new]
[<, 0, ), {, throw, new, NotPositiveException, (, p, ), ;, }, if, (, !, isSquare, (, ), ), {]
[), {, throw, new, NotPositiveException, (, p, ), ;, }, if, (, !, isSquare, (, ), ), {, throw, new]
[;, }, if, (, !, isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (, getRowDimension, (, ), ,, getColumnDimension, (]
[), ;, }, if, (, !, isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (, getRowDimension, (, ), ,, getColumnDimension]
[), {, throw, new, NonSquareMatrixException, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, }, if, (, p, ==]
[), {, throw, new, NonSquareMatrixException, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, }, if, (, p, ==]
[;, }, if, (, p, ==, 0, ), {, return, MatrixUtils, ., createFieldIdentityMatrix, (, this, ., getField, (, ), ,]
[,, getColumnDimension, (, ), ), ;, }, if, (, p, ==, 0, ), {, return, MatrixUtils, ., createFieldIdentityMatrix, (, this]
[), ;, }, if, (, p, ==, 0, ), {, return, MatrixUtils, ., createFieldIdentityMatrix, (, this, ., getField, (, )]
[), {, return, MatrixUtils, ., createFieldIdentityMatrix, (, this, ., getField, (, ), ,, this, ., getRowDimension, (, ), ), ;]
[==, 0, ), {, return, MatrixUtils, ., createFieldIdentityMatrix, (, this, ., getField, (, ), ,, this, ., getRowDimension, (, )]
[), {, return, MatrixUtils, ., createFieldIdentityMatrix, (, this, ., getField, (, ), ,, this, ., getRowDimension, (, ), ), ;]
[;, }, if, (, p, ==, 1, ), {, return, this, ., copy, (, ), ;, }, final, int, power]
[., createFieldIdentityMatrix, (, this, ., getField, (, ), ,, this, ., getRowDimension, (, ), ), ;, }, if, (, p]
[,, this, ., getRowDimension, (, ), ), ;, }, if, (, p, ==, 1, ), {, return, this, ., copy]
[., getField, (, ), ,, this, ., getRowDimension, (, ), ), ;, }, if, (, p, ==, 1, ), {]
[), ;, }, if, (, p, ==, 1, ), {, return, this, ., copy, (, ), ;, }, final, int]
[., getRowDimension, (, ), ), ;, }, if, (, p, ==, 1, ), {, return, this, ., copy, (, )]
[), {, return, this, ., copy, (, ), ;, }, final, int, power, =, p, -, 1, ;, final, char]
[==, 1, ), {, return, this, ., copy, (, ), ;, }, final, int, power, =, p, -, 1, ;]
[), {, return, this, ., copy, (, ), ;, }, final, int, power, =, p, -, 1, ;, final, char]
[;, }, final, int, power, =, p, -, 1, ;, final, char, [, ], binaryRepresentation, =, Integer, ., toBinaryString, (]
[., copy, (, ), ;, }, final, int, power, =, p, -, 1, ;, final, char, [, ], binaryRepresentation, =]
[;, final, char, [, ], binaryRepresentation, =, Integer, ., toBinaryString, (, power, ), ., toCharArray, (, ), ;, final, ArrayList]
[-, 1, ;, final, char, [, ], binaryRepresentation, =, Integer, ., toBinaryString, (, power, ), ., toCharArray, (, ), ;]
[;, final, char, [, ], binaryRepresentation, =, Integer, ., toBinaryString, (, power, ), ., toCharArray, (, ), ;, final, ArrayList]
[;, final, ArrayList, <, Integer, >, nonZeroPositions, =, new, ArrayList, <, Integer, >, (, ), ;, for, (, int, i]
[., toCharArray, (, ), ;, final, ArrayList, <, Integer, >, nonZeroPositions, =, new, ArrayList, <, Integer, >, (, ), ;]
[., toBinaryString, (, power, ), ., toCharArray, (, ), ;, final, ArrayList, <, Integer, >, nonZeroPositions, =, new, ArrayList, <]
[), ., toCharArray, (, ), ;, final, ArrayList, <, Integer, >, nonZeroPositions, =, new, ArrayList, <, Integer, >, (, )]
[;, for, (, int, i, =, 0, ;, i, <, binaryRepresentation, ., length, ;, ++, i, ), {, if, (]
[;, i, <, binaryRepresentation, ., length, ;, ++, i, ), {, if, (, binaryRepresentation, [, i, ], ==, '1', )]
[;, ++, i, ), {, if, (, binaryRepresentation, [, i, ], ==, '1', ), {, final, int, pos, =, binaryRepresentation]
[<, binaryRepresentation, ., length, ;, ++, i, ), {, if, (, binaryRepresentation, [, i, ], ==, '1', ), {, final]
[;, ++, i, ), {, if, (, binaryRepresentation, [, i, ], ==, '1', ), {, final, int, pos, =, binaryRepresentation]
[., length, ;, ++, i, ), {, if, (, binaryRepresentation, [, i, ], ==, '1', ), {, final, int, pos]
[), {, if, (, binaryRepresentation, [, i, ], ==, '1', ), {, final, int, pos, =, binaryRepresentation, ., length, -]
[), {, if, (, binaryRepresentation, [, i, ], ==, '1', ), {, final, int, pos, =, binaryRepresentation, ., length, -]
[), {, final, int, pos, =, binaryRepresentation, ., length, -, i, -, 1, ;, nonZeroPositions, ., add, (, pos, )]
[==, '1', ), {, final, int, pos, =, binaryRepresentation, ., length, -, i, -, 1, ;, nonZeroPositions, ., add, (]
[[, i, ], ==, '1', ), {, final, int, pos, =, binaryRepresentation, ., length, -, i, -, 1, ;, nonZeroPositions]
[], ==, '1', ), {, final, int, pos, =, binaryRepresentation, ., length, -, i, -, 1, ;, nonZeroPositions, ., add]
[), {, final, int, pos, =, binaryRepresentation, ., length, -, i, -, 1, ;, nonZeroPositions, ., add, (, pos, )]
[;, nonZeroPositions, ., add, (, pos, ), ;, }, }, ArrayList, <, FieldMatrix, <, T, >, >, results, =, new]
[-, 1, ;, nonZeroPositions, ., add, (, pos, ), ;, }, }, ArrayList, <, FieldMatrix, <, T, >, >, results]
[-, i, -, 1, ;, nonZeroPositions, ., add, (, pos, ), ;, }, }, ArrayList, <, FieldMatrix, <, T, >]
[., length, -, i, -, 1, ;, nonZeroPositions, ., add, (, pos, ), ;, }, }, ArrayList, <, FieldMatrix, <]
[-, 1, ;, nonZeroPositions, ., add, (, pos, ), ;, }, }, ArrayList, <, FieldMatrix, <, T, >, >, results]
[;, nonZeroPositions, ., add, (, pos, ), ;, }, }, ArrayList, <, FieldMatrix, <, T, >, >, results, =, new]
[;, }, }, ArrayList, <, FieldMatrix, <, T, >, >, results, =, new, ArrayList, <, FieldMatrix, <, T, >, >]
[., add, (, pos, ), ;, }, }, ArrayList, <, FieldMatrix, <, T, >, >, results, =, new, ArrayList, <]
[), ;, }, }, ArrayList, <, FieldMatrix, <, T, >, >, results, =, new, ArrayList, <, FieldMatrix, <, T, >]
[;, results, ., add, (, 0, ,, this, ., copy, (, ), ), ;, for, (, int, i, =, 1]
[), ;, results, ., add, (, 0, ,, this, ., copy, (, ), ), ;, for, (, int, i, =]
[., length, ), ;, results, ., add, (, 0, ,, this, ., copy, (, ), ), ;, for, (, int]
[;, for, (, int, i, =, 1, ;, i, <, binaryRepresentation, ., length, ;, ++, i, ), {, final, FieldMatrix]
[., add, (, 0, ,, this, ., copy, (, ), ), ;, for, (, int, i, =, 1, ;, i]
[,, this, ., copy, (, ), ), ;, for, (, int, i, =, 1, ;, i, <, binaryRepresentation, ., length]
[), ;, for, (, int, i, =, 1, ;, i, <, binaryRepresentation, ., length, ;, ++, i, ), {, final]
[., copy, (, ), ), ;, for, (, int, i, =, 1, ;, i, <, binaryRepresentation, ., length, ;, ++]
[;, i, <, binaryRepresentation, ., length, ;, ++, i, ), {, final, FieldMatrix, <, T, >, s, =, results, .]
[;, ++, i, ), {, final, FieldMatrix, <, T, >, s, =, results, ., get, (, i, -, 1, )]
[<, binaryRepresentation, ., length, ;, ++, i, ), {, final, FieldMatrix, <, T, >, s, =, results, ., get, (]
[;, ++, i, ), {, final, FieldMatrix, <, T, >, s, =, results, ., get, (, i, -, 1, )]
[., length, ;, ++, i, ), {, final, FieldMatrix, <, T, >, s, =, results, ., get, (, i, -]
[), {, final, FieldMatrix, <, T, >, s, =, results, ., get, (, i, -, 1, ), ;, final, FieldMatrix]
[), {, final, FieldMatrix, <, T, >, s, =, results, ., get, (, i, -, 1, ), ;, final, FieldMatrix]
[;, final, FieldMatrix, <, T, >, r, =, s, ., multiply, (, s, ), ;, results, ., add, (, i]
[., get, (, i, -, 1, ), ;, final, FieldMatrix, <, T, >, r, =, s, ., multiply, (, s]
[), ;, final, FieldMatrix, <, T, >, r, =, s, ., multiply, (, s, ), ;, results, ., add, (]
[-, 1, ), ;, final, FieldMatrix, <, T, >, r, =, s, ., multiply, (, s, ), ;, results, .]
[), ;, final, FieldMatrix, <, T, >, r, =, s, ., multiply, (, s, ), ;, results, ., add, (]
[;, results, ., add, (, i, ,, r, ), ;, }, FieldMatrix, <, T, >, result, =, this, ., copy]
[., multiply, (, s, ), ;, results, ., add, (, i, ,, r, ), ;, }, FieldMatrix, <, T, >]
[), ;, results, ., add, (, i, ,, r, ), ;, }, FieldMatrix, <, T, >, result, =, this, .]
[;, }, FieldMatrix, <, T, >, result, =, this, ., copy, (, ), ;, for, (, Integer, i, :, nonZeroPositions]
[., add, (, i, ,, r, ), ;, }, FieldMatrix, <, T, >, result, =, this, ., copy, (, )]
[,, r, ), ;, }, FieldMatrix, <, T, >, result, =, this, ., copy, (, ), ;, for, (, Integer]
[), ;, }, FieldMatrix, <, T, >, result, =, this, ., copy, (, ), ;, for, (, Integer, i, :]
[;, for, (, Integer, i, :, nonZeroPositions, ), {, result, =, result, ., multiply, (, results, ., get, (, i]
[., copy, (, ), ;, for, (, Integer, i, :, nonZeroPositions, ), {, result, =, result, ., multiply, (, results]
[), {, result, =, result, ., multiply, (, results, ., get, (, i, ), ), ;, }, return, result, ;]
[=, result, ., multiply, (, results, ., get, (, i, ), ), ;, }, return, result, ;, }, public, T]
[;, }, return, result, ;, }, public, T, [, ], [, ], getData, (, ), {, final, T, [, ]]
[., multiply, (, results, ., get, (, i, ), ), ;, }, return, result, ;, }, public, T, [, ]]
[), ;, }, return, result, ;, }, public, T, [, ], [, ], getData, (, ), {, final, T, []
[., get, (, i, ), ), ;, }, return, result, ;, }, public, T, [, ], [, ], getData, (]
[), ), ;, }, return, result, ;, }, public, T, [, ], [, ], getData, (, ), {, final, T]
[;, }, public, T, [, ], [, ], getData, (, ), {, final, T, [, ], [, ], data, =]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, T]
[., buildArray, (, field, ,, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, for, (, int, i, =, 0]
[,, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, data]
[,, getColumnDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final]
[;, i, <, data, ., length, ;, ++, i, ), {, final, T, [, ], dataI, =, data, [, i]
[;, ++, i, ), {, final, T, [, ], dataI, =, data, [, i, ], ;, for, (, int, j]
[<, data, ., length, ;, ++, i, ), {, final, T, [, ], dataI, =, data, [, i, ], ;]
[;, ++, i, ), {, final, T, [, ], dataI, =, data, [, i, ], ;, for, (, int, j]
[., length, ;, ++, i, ), {, final, T, [, ], dataI, =, data, [, i, ], ;, for, (]
[), {, final, T, [, ], dataI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[), {, final, T, [, ], dataI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[;, for, (, int, j, =, 0, ;, j, <, dataI, ., length, ;, ++, j, ), {, dataI, []
[[, i, ], ;, for, (, int, j, =, 0, ;, j, <, dataI, ., length, ;, ++, j, )]
[], ;, for, (, int, j, =, 0, ;, j, <, dataI, ., length, ;, ++, j, ), {, dataI]
[;, j, <, dataI, ., length, ;, ++, j, ), {, dataI, [, j, ], =, getEntry, (, i, ,]
[;, ++, j, ), {, dataI, [, j, ], =, getEntry, (, i, ,, j, ), ;, }, }, return]
[<, dataI, ., length, ;, ++, j, ), {, dataI, [, j, ], =, getEntry, (, i, ,, j, )]
[;, ++, j, ), {, dataI, [, j, ], =, getEntry, (, i, ,, j, ), ;, }, }, return]
[., length, ;, ++, j, ), {, dataI, [, j, ], =, getEntry, (, i, ,, j, ), ;, }]
[), {, dataI, [, j, ], =, getEntry, (, i, ,, j, ), ;, }, }, return, data, ;, }]
[), {, dataI, [, j, ], =, getEntry, (, i, ,, j, ), ;, }, }, return, data, ;, }]
[=, getEntry, (, i, ,, j, ), ;, }, }, return, data, ;, }, public, FieldMatrix, <, T, >, getSubMatrix]
[[, j, ], =, getEntry, (, i, ,, j, ), ;, }, }, return, data, ;, }, public, FieldMatrix, <]
[], =, getEntry, (, i, ,, j, ), ;, }, }, return, data, ;, }, public, FieldMatrix, <, T, >]
[;, }, }, return, data, ;, }, public, FieldMatrix, <, T, >, getSubMatrix, (, final, int, startRow, ,, final, int]
[,, j, ), ;, }, }, return, data, ;, }, public, FieldMatrix, <, T, >, getSubMatrix, (, final, int, startRow]
[), ;, }, }, return, data, ;, }, public, FieldMatrix, <, T, >, getSubMatrix, (, final, int, startRow, ,, final]
[;, }, public, FieldMatrix, <, T, >, getSubMatrix, (, final, int, startRow, ,, final, int, endRow, ,, final, int, startColumn]
[;, final, FieldMatrix, <, T, >, subMatrix, =, createMatrix, (, endRow, -, startRow, +, 1, ,, endColumn, -, startColumn, +]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, final, FieldMatrix, <, T, >, subMatrix, =, createMatrix, (, endRow, -, startRow]
[,, startColumn, ,, endColumn, ), ;, final, FieldMatrix, <, T, >, subMatrix, =, createMatrix, (, endRow, -, startRow, +, 1]
[,, endColumn, ), ;, final, FieldMatrix, <, T, >, subMatrix, =, createMatrix, (, endRow, -, startRow, +, 1, ,, endColumn]
[), ;, final, FieldMatrix, <, T, >, subMatrix, =, createMatrix, (, endRow, -, startRow, +, 1, ,, endColumn, -, startColumn]
[;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, for, (, int, j]
[,, endColumn, -, startColumn, +, 1, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++]
[+, 1, ,, endColumn, -, startColumn, +, 1, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow]
[-, startRow, +, 1, ,, endColumn, -, startColumn, +, 1, ), ;, for, (, int, i, =, startRow, ;, i]
[+, 1, ,, endColumn, -, startColumn, +, 1, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow]
[,, endColumn, -, startColumn, +, 1, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++]
[), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, for, (, int]
[+, 1, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, for]
[-, startColumn, +, 1, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, )]
[+, 1, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, for]
[), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, for, (, int]
[;, i, <=, endRow, ;, ++, i, ), {, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;]
[;, ++, i, ), {, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {]
[<=, endRow, ;, ++, i, ), {, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j]
[;, ++, i, ), {, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {]
[), {, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, subMatrix, ., setEntry]
[), {, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, subMatrix, ., setEntry]
[;, j, <=, endColumn, ;, ++, j, ), {, subMatrix, ., setEntry, (, i, -, startRow, ,, j, -, startColumn]
[;, ++, j, ), {, subMatrix, ., setEntry, (, i, -, startRow, ,, j, -, startColumn, ,, getEntry, (, i]
[<=, endColumn, ;, ++, j, ), {, subMatrix, ., setEntry, (, i, -, startRow, ,, j, -, startColumn, ,, getEntry]
[;, ++, j, ), {, subMatrix, ., setEntry, (, i, -, startRow, ,, j, -, startColumn, ,, getEntry, (, i]
[), {, subMatrix, ., setEntry, (, i, -, startRow, ,, j, -, startColumn, ,, getEntry, (, i, ,, j, )]
[), {, subMatrix, ., setEntry, (, i, -, startRow, ,, j, -, startColumn, ,, getEntry, (, i, ,, j, )]
[;, }, }, return, subMatrix, ;, }, public, FieldMatrix, <, T, >, getSubMatrix, (, final, int, [, ], selectedRows, ,]
[., setEntry, (, i, -, startRow, ,, j, -, startColumn, ,, getEntry, (, i, ,, j, ), ), ;, }]
[,, j, -, startColumn, ,, getEntry, (, i, ,, j, ), ), ;, }, }, return, subMatrix, ;, }, public]
[-, startRow, ,, j, -, startColumn, ,, getEntry, (, i, ,, j, ), ), ;, }, }, return, subMatrix, ;]
[,, j, -, startColumn, ,, getEntry, (, i, ,, j, ), ), ;, }, }, return, subMatrix, ;, }, public]
[,, getEntry, (, i, ,, j, ), ), ;, }, }, return, subMatrix, ;, }, public, FieldMatrix, <, T, >]
[-, startColumn, ,, getEntry, (, i, ,, j, ), ), ;, }, }, return, subMatrix, ;, }, public, FieldMatrix, <]
[,, getEntry, (, i, ,, j, ), ), ;, }, }, return, subMatrix, ;, }, public, FieldMatrix, <, T, >]
[), ;, }, }, return, subMatrix, ;, }, public, FieldMatrix, <, T, >, getSubMatrix, (, final, int, [, ], selectedRows]
[,, j, ), ), ;, }, }, return, subMatrix, ;, }, public, FieldMatrix, <, T, >, getSubMatrix, (, final, int]
[), ), ;, }, }, return, subMatrix, ;, }, public, FieldMatrix, <, T, >, getSubMatrix, (, final, int, [, ]]
[;, }, public, FieldMatrix, <, T, >, getSubMatrix, (, final, int, [, ], selectedRows, ,, final, int, [, ], selectedColumns]
[;, final, FieldMatrix, <, T, >, subMatrix, =, createMatrix, (, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, subMatrix]
[,, selectedColumns, ), ;, final, FieldMatrix, <, T, >, subMatrix, =, createMatrix, (, selectedRows, ., length, ,, selectedColumns, ., length]
[), ;, final, FieldMatrix, <, T, >, subMatrix, =, createMatrix, (, selectedRows, ., length, ,, selectedColumns, ., length, ), ;]
[;, subMatrix, ., walkInOptimizedOrder, (, new, DefaultFieldMatrixChangingVisitor, <, T, >, (, field, ., getZero, (, ), ), {, @, Override]
[,, selectedColumns, ., length, ), ;, subMatrix, ., walkInOptimizedOrder, (, new, DefaultFieldMatrixChangingVisitor, <, T, >, (, field, ., getZero, (]
[., length, ,, selectedColumns, ., length, ), ;, subMatrix, ., walkInOptimizedOrder, (, new, DefaultFieldMatrixChangingVisitor, <, T, >, (, field, .]
[), ;, subMatrix, ., walkInOptimizedOrder, (, new, DefaultFieldMatrixChangingVisitor, <, T, >, (, field, ., getZero, (, ), ), {, @]
[., length, ), ;, subMatrix, ., walkInOptimizedOrder, (, new, DefaultFieldMatrixChangingVisitor, <, T, >, (, field, ., getZero, (, ), )]
[;, return, subMatrix, ;, }, public, void, copySubMatrix, (, final, int, startRow, ,, final, int, endRow, ,, final, int, startColumn]
[., walkInOptimizedOrder, (, new, DefaultFieldMatrixChangingVisitor, <, T, >, (, field, ., getZero, (, ), ), {, @, Override, public, T]
[), ;, return, subMatrix, ;, }, public, void, copySubMatrix, (, final, int, startRow, ,, final, int, endRow, ,, final, int]
[), {, @, Override, public, T, visit, (, final, int, row, ,, final, int, column, ,, final, T, value, )]
[., getZero, (, ), ), {, @, Override, public, T, visit, (, final, int, row, ,, final, int, column, ,]
[;, }, }, ), ;, return, subMatrix, ;, }, public, void, copySubMatrix, (, final, int, startRow, ,, final, int, endRow]
[,, selectedColumns, [, column, ], ), ;, }, }, ), ;, return, subMatrix, ;, }, public, void, copySubMatrix, (, final]
[[, row, ], ,, selectedColumns, [, column, ], ), ;, }, }, ), ;, return, subMatrix, ;, }, public, void]
[], ,, selectedColumns, [, column, ], ), ;, }, }, ), ;, return, subMatrix, ;, }, public, void, copySubMatrix, (]
[), ;, }, }, ), ;, return, subMatrix, ;, }, public, void, copySubMatrix, (, final, int, startRow, ,, final, int]
[[, column, ], ), ;, }, }, ), ;, return, subMatrix, ;, }, public, void, copySubMatrix, (, final, int, startRow]
[], ), ;, }, }, ), ;, return, subMatrix, ;, }, public, void, copySubMatrix, (, final, int, startRow, ,, final]
[;, }, public, void, copySubMatrix, (, final, int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int]
[;, final, int, rowsCount, =, endRow, +, 1, -, startRow, ;, final, int, columnsCount, =, endColumn, +, 1, -, startColumn]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, final, int, rowsCount, =, endRow, +, 1, -, startRow, ;, final, int]
[,, startColumn, ,, endColumn, ), ;, final, int, rowsCount, =, endRow, +, 1, -, startRow, ;, final, int, columnsCount, =]
[,, endColumn, ), ;, final, int, rowsCount, =, endRow, +, 1, -, startRow, ;, final, int, columnsCount, =, endColumn, +]
[), ;, final, int, rowsCount, =, endRow, +, 1, -, startRow, ;, final, int, columnsCount, =, endColumn, +, 1, -]
[;, final, int, columnsCount, =, endColumn, +, 1, -, startColumn, ;, if, (, (, destination, ., length, <, rowsCount, )]
[-, startRow, ;, final, int, columnsCount, =, endColumn, +, 1, -, startColumn, ;, if, (, (, destination, ., length, <]
[+, 1, -, startRow, ;, final, int, columnsCount, =, endColumn, +, 1, -, startColumn, ;, if, (, (, destination, .]
[-, startRow, ;, final, int, columnsCount, =, endColumn, +, 1, -, startColumn, ;, if, (, (, destination, ., length, <]
[;, final, int, columnsCount, =, endColumn, +, 1, -, startColumn, ;, if, (, (, destination, ., length, <, rowsCount, )]
[;, if, (, (, destination, ., length, <, rowsCount, ), ||, (, destination, [, 0, ], ., length, <, columnsCount]
[-, startColumn, ;, if, (, (, destination, ., length, <, rowsCount, ), ||, (, destination, [, 0, ], ., length]
[+, 1, -, startColumn, ;, if, (, (, destination, ., length, <, rowsCount, ), ||, (, destination, [, 0, ]]
[-, startColumn, ;, if, (, (, destination, ., length, <, rowsCount, ), ||, (, destination, [, 0, ], ., length]
[;, if, (, (, destination, ., length, <, rowsCount, ), ||, (, destination, [, 0, ], ., length, <, columnsCount]
[), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,, rowsCount, ,, columnsCount]
[||, (, destination, [, 0, ], ., length, <, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length]
[), ||, (, destination, [, 0, ], ., length, <, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, .]
[<, rowsCount, ), ||, (, destination, [, 0, ], ., length, <, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (]
[., length, <, rowsCount, ), ||, (, destination, [, 0, ], ., length, <, columnsCount, ), ), {, throw, new]
[), ||, (, destination, [, 0, ], ., length, <, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, .]
[), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,, rowsCount, ,, columnsCount]
[), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,, rowsCount, ,]
[<, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,]
[., length, <, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], .]
[[, 0, ], ., length, <, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, []
[], ., length, <, columnsCount, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ]]
[), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,, rowsCount, ,]
[;, }, walkInOptimizedOrder, (, new, DefaultFieldMatrixPreservingVisitor, <, T, >, (, field, ., getZero, (, ), ), {, private, int, startRow]
[,, destination, [, 0, ], ., length, ,, rowsCount, ,, columnsCount, ), ;, }, walkInOptimizedOrder, (, new, DefaultFieldMatrixPreservingVisitor, <, T]
[., length, ,, destination, [, 0, ], ., length, ,, rowsCount, ,, columnsCount, ), ;, }, walkInOptimizedOrder, (, new, DefaultFieldMatrixPreservingVisitor]
[,, rowsCount, ,, columnsCount, ), ;, }, walkInOptimizedOrder, (, new, DefaultFieldMatrixPreservingVisitor, <, T, >, (, field, ., getZero, (, )]
[., length, ,, rowsCount, ,, columnsCount, ), ;, }, walkInOptimizedOrder, (, new, DefaultFieldMatrixPreservingVisitor, <, T, >, (, field, ., getZero]
[[, 0, ], ., length, ,, rowsCount, ,, columnsCount, ), ;, }, walkInOptimizedOrder, (, new, DefaultFieldMatrixPreservingVisitor, <, T, >, (]
[], ., length, ,, rowsCount, ,, columnsCount, ), ;, }, walkInOptimizedOrder, (, new, DefaultFieldMatrixPreservingVisitor, <, T, >, (, field, .]
[,, columnsCount, ), ;, }, walkInOptimizedOrder, (, new, DefaultFieldMatrixPreservingVisitor, <, T, >, (, field, ., getZero, (, ), ), {]
[), ;, }, walkInOptimizedOrder, (, new, DefaultFieldMatrixPreservingVisitor, <, T, >, (, field, ., getZero, (, ), ), {, private, int]
[;, }, public, void, copySubMatrix, (, int, [, ], selectedRows, ,, int, [, ], selectedColumns, ,, T, [, ], []
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, }, public, void, copySubMatrix, (, int, [, ], selectedRows, ,]
[), {, private, int, startRow, ;, private, int, startColumn, ;, @, Override, public, void, start, (, final, int, rows, ,]
[., getZero, (, ), ), {, private, int, startRow, ;, private, int, startColumn, ;, @, Override, public, void, start, (]
[=, startRow, ;, this, ., startColumn, =, startColumn, ;, }, @, Override, public, void, visit, (, final, int, row, ,]
[., startRow, =, startRow, ;, this, ., startColumn, =, startColumn, ;, }, @, Override, public, void, visit, (, final, int]
[;, this, ., startColumn, =, startColumn, ;, }, @, Override, public, void, visit, (, final, int, row, ,, final, int]
[=, startColumn, ;, }, @, Override, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, T]
[., startColumn, =, startColumn, ;, }, @, Override, public, void, visit, (, final, int, row, ,, final, int, column, ,]
[;, }, @, Override, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, T, value, )]
[=, value, ;, }, }, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, }, public, void, copySubMatrix, (]
[[, column, -, startColumn, ], =, value, ;, }, }, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[[, row, -, startRow, ], [, column, -, startColumn, ], =, value, ;, }, }, ,, startRow, ,, endRow, ,]
[], [, column, -, startColumn, ], =, value, ;, }, }, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, )]
[-, startRow, ], [, column, -, startColumn, ], =, value, ;, }, }, ,, startRow, ,, endRow, ,, startColumn, ,]
[], [, column, -, startColumn, ], =, value, ;, }, }, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, )]
[], =, value, ;, }, }, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, }, public, void, copySubMatrix]
[-, startColumn, ], =, value, ;, }, }, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, }, public]
[], =, value, ;, }, }, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, }, public, void, copySubMatrix]
[;, }, }, ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, }, public, void, copySubMatrix, (, int, []
[,, endRow, ,, startColumn, ,, endColumn, ), ;, }, public, void, copySubMatrix, (, int, [, ], selectedRows, ,, int, []
[,, startColumn, ,, endColumn, ), ;, }, public, void, copySubMatrix, (, int, [, ], selectedRows, ,, int, [, ], selectedColumns]
[,, endColumn, ), ;, }, public, void, copySubMatrix, (, int, [, ], selectedRows, ,, int, [, ], selectedColumns, ,, T]
[), ;, }, public, void, copySubMatrix, (, int, [, ], selectedRows, ,, int, [, ], selectedColumns, ,, T, [, ]]
[;, if, (, (, destination, ., length, <, selectedRows, ., length, ), ||, (, destination, [, 0, ], ., length]
[,, selectedColumns, ), ;, if, (, (, destination, ., length, <, selectedRows, ., length, ), ||, (, destination, [, 0]
[), ;, if, (, (, destination, ., length, <, selectedRows, ., length, ), ||, (, destination, [, 0, ], .]
[), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,, selectedRows, ., length]
[||, (, destination, [, 0, ], ., length, <, selectedColumns, ., length, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination]
[), ||, (, destination, [, 0, ], ., length, <, selectedColumns, ., length, ), ), {, throw, new, MatrixDimensionMismatchException, (]
[<, selectedRows, ., length, ), ||, (, destination, [, 0, ], ., length, <, selectedColumns, ., length, ), ), {]
[., length, <, selectedRows, ., length, ), ||, (, destination, [, 0, ], ., length, <, selectedColumns, ., length, )]
[), ||, (, destination, [, 0, ], ., length, <, selectedColumns, ., length, ), ), {, throw, new, MatrixDimensionMismatchException, (]
[., length, ), ||, (, destination, [, 0, ], ., length, <, selectedColumns, ., length, ), ), {, throw, new]
[), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,, selectedRows, ., length]
[), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,, selectedRows, .]
[<, selectedColumns, ., length, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], .]
[., length, <, selectedColumns, ., length, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0]
[[, 0, ], ., length, <, selectedColumns, ., length, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,]
[], ., length, <, selectedColumns, ., length, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, []
[), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,, selectedRows, .]
[., length, ), ), {, throw, new, MatrixDimensionMismatchException, (, destination, ., length, ,, destination, [, 0, ], ., length, ,]
[;, }, for, (, int, i, =, 0, ;, i, <, selectedRows, ., length, ;, i, ++, ), {, final]
[,, destination, [, 0, ], ., length, ,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (]
[., length, ,, destination, [, 0, ], ., length, ,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }]
[,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[., length, ,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, i, =, 0, ;]
[[, 0, ], ., length, ,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, i]
[], ., length, ,, selectedRows, ., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, i, =, 0]
[,, selectedColumns, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, selectedRows, ., length, ;]
[., length, ,, selectedColumns, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, selectedRows, .]
[), ;, }, for, (, int, i, =, 0, ;, i, <, selectedRows, ., length, ;, i, ++, ), {]
[., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, selectedRows, ., length, ;, i, ++]
[;, i, <, selectedRows, ., length, ;, i, ++, ), {, final, T, [, ], destinationI, =, destination, [, i]
[;, i, ++, ), {, final, T, [, ], destinationI, =, destination, [, i, ], ;, for, (, int, j]
[<, selectedRows, ., length, ;, i, ++, ), {, final, T, [, ], destinationI, =, destination, [, i, ], ;]
[;, i, ++, ), {, final, T, [, ], destinationI, =, destination, [, i, ], ;, for, (, int, j]
[., length, ;, i, ++, ), {, final, T, [, ], destinationI, =, destination, [, i, ], ;, for, (]
[), {, final, T, [, ], destinationI, =, destination, [, i, ], ;, for, (, int, j, =, 0, ;]
[++, ), {, final, T, [, ], destinationI, =, destination, [, i, ], ;, for, (, int, j, =, 0]
[;, for, (, int, j, =, 0, ;, j, <, selectedColumns, ., length, ;, j, ++, ), {, destinationI, []
[[, i, ], ;, for, (, int, j, =, 0, ;, j, <, selectedColumns, ., length, ;, j, ++, )]
[], ;, for, (, int, j, =, 0, ;, j, <, selectedColumns, ., length, ;, j, ++, ), {, destinationI]
[;, j, <, selectedColumns, ., length, ;, j, ++, ), {, destinationI, [, j, ], =, getEntry, (, selectedRows, []
[;, j, ++, ), {, destinationI, [, j, ], =, getEntry, (, selectedRows, [, i, ], ,, selectedColumns, [, j]
[<, selectedColumns, ., length, ;, j, ++, ), {, destinationI, [, j, ], =, getEntry, (, selectedRows, [, i, ]]
[;, j, ++, ), {, destinationI, [, j, ], =, getEntry, (, selectedRows, [, i, ], ,, selectedColumns, [, j]
[., length, ;, j, ++, ), {, destinationI, [, j, ], =, getEntry, (, selectedRows, [, i, ], ,, selectedColumns]
[), {, destinationI, [, j, ], =, getEntry, (, selectedRows, [, i, ], ,, selectedColumns, [, j, ], ), ;]
[++, ), {, destinationI, [, j, ], =, getEntry, (, selectedRows, [, i, ], ,, selectedColumns, [, j, ], )]
[=, getEntry, (, selectedRows, [, i, ], ,, selectedColumns, [, j, ], ), ;, }, }, }, public, void, setSubMatrix]
[[, j, ], =, getEntry, (, selectedRows, [, i, ], ,, selectedColumns, [, j, ], ), ;, }, }, }]
[], =, getEntry, (, selectedRows, [, i, ], ,, selectedColumns, [, j, ], ), ;, }, }, }, public, void]
[;, }, }, }, public, void, setSubMatrix, (, final, T, [, ], [, ], subMatrix, ,, final, int, row, ,]
[,, selectedColumns, [, j, ], ), ;, }, }, }, public, void, setSubMatrix, (, final, T, [, ], [, ]]
[[, i, ], ,, selectedColumns, [, j, ], ), ;, }, }, }, public, void, setSubMatrix, (, final, T, []
[], ,, selectedColumns, [, j, ], ), ;, }, }, }, public, void, setSubMatrix, (, final, T, [, ], []
[), ;, }, }, }, public, void, setSubMatrix, (, final, T, [, ], [, ], subMatrix, ,, final, int, row]
[[, j, ], ), ;, }, }, }, public, void, setSubMatrix, (, final, T, [, ], [, ], subMatrix, ,]
[], ), ;, }, }, }, public, void, setSubMatrix, (, final, T, [, ], [, ], subMatrix, ,, final, int]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =, subMatrix, ., length, ;, if]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows]
[;, }, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException]
[;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int]
[., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, [, 0, ]]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, []
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, [, 0, ]]
[;, }, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {]
[), ;, }, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==, 0, )]
[., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==]
[;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (]
[., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }]
[[, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN]
[], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;, r]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;, r]
[;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, ++, r, ), {, if, (, subMatrix]
[), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, ++, r, ), {, if, (]
[., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, ++, r, ), {]
[;, r, <, nRows, ;, ++, r, ), {, if, (, subMatrix, [, r, ], ., length, !=, nCols, )]
[;, ++, r, ), {, if, (, subMatrix, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException]
[<, nRows, ;, ++, r, ), {, if, (, subMatrix, [, r, ], ., length, !=, nCols, ), {, throw]
[;, ++, r, ), {, if, (, subMatrix, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException]
[), {, if, (, subMatrix, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,]
[), {, if, (, subMatrix, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,]
[), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, r, ], ., length, ), ;, }, }, checkRowIndex, (]
[!=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, r, ], ., length, ), ;, }, }]
[., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, r, ], ., length, ), ;]
[[, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, r, ], .]
[], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, r, ], ., length, )]
[), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, r, ], ., length, ), ;, }, }, checkRowIndex, (]
[;, }, }, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, checkRowIndex, (, nRows, +, row, -, 1]
[,, subMatrix, [, r, ], ., length, ), ;, }, }, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, )]
[), ;, }, }, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, checkRowIndex, (, nRows, +, row, -]
[., length, ), ;, }, }, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, checkRowIndex, (, nRows, +]
[[, r, ], ., length, ), ;, }, }, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, checkRowIndex]
[], ., length, ), ;, }, }, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, checkRowIndex, (, nRows]
[;, checkColumnIndex, (, column, ), ;, checkRowIndex, (, nRows, +, row, -, 1, ), ;, checkColumnIndex, (, nCols, +, column]
[), ;, checkColumnIndex, (, column, ), ;, checkRowIndex, (, nRows, +, row, -, 1, ), ;, checkColumnIndex, (, nCols, +]
[;, checkRowIndex, (, nRows, +, row, -, 1, ), ;, checkColumnIndex, (, nCols, +, column, -, 1, ), ;, for]
[), ;, checkRowIndex, (, nRows, +, row, -, 1, ), ;, checkColumnIndex, (, nCols, +, column, -, 1, ), ;]
[;, checkColumnIndex, (, nCols, +, column, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows]
[), ;, checkColumnIndex, (, nCols, +, column, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[-, 1, ), ;, checkColumnIndex, (, nCols, +, column, -, 1, ), ;, for, (, int, i, =, 0, ;]
[+, row, -, 1, ), ;, checkColumnIndex, (, nCols, +, column, -, 1, ), ;, for, (, int, i, =]
[-, 1, ), ;, checkColumnIndex, (, nCols, +, column, -, 1, ), ;, for, (, int, i, =, 0, ;]
[), ;, checkColumnIndex, (, nCols, +, column, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, for, (, int, j]
[), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, for, (, int]
[-, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, for]
[+, column, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, )]
[-, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, for]
[), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, for, (, int]
[;, i, <, nRows, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, nCols, ;]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, nCols, ;, ++, j, ), {]
[<, nRows, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, nCols, ;, ++, j]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, nCols, ;, ++, j, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, nCols, ;, ++, j, ), {, setEntry, (, row]
[), {, for, (, int, j, =, 0, ;, j, <, nCols, ;, ++, j, ), {, setEntry, (, row]
[;, j, <, nCols, ;, ++, j, ), {, setEntry, (, row, +, i, ,, column, +, j, ,, subMatrix]
[;, ++, j, ), {, setEntry, (, row, +, i, ,, column, +, j, ,, subMatrix, [, i, ], []
[<, nCols, ;, ++, j, ), {, setEntry, (, row, +, i, ,, column, +, j, ,, subMatrix, [, i]
[;, ++, j, ), {, setEntry, (, row, +, i, ,, column, +, j, ,, subMatrix, [, i, ], []
[), {, setEntry, (, row, +, i, ,, column, +, j, ,, subMatrix, [, i, ], [, j, ], )]
[), {, setEntry, (, row, +, i, ,, column, +, j, ,, subMatrix, [, i, ], [, j, ], )]
[;, }, }, }, public, FieldMatrix, <, T, >, getRowMatrix, (, final, int, row, ), throws, OutOfRangeException, {, checkRowIndex, (]
[,, column, +, j, ,, subMatrix, [, i, ], [, j, ], ), ;, }, }, }, public, FieldMatrix, <]
[+, i, ,, column, +, j, ,, subMatrix, [, i, ], [, j, ], ), ;, }, }, }, public]
[,, column, +, j, ,, subMatrix, [, i, ], [, j, ], ), ;, }, }, }, public, FieldMatrix, <]
[,, subMatrix, [, i, ], [, j, ], ), ;, }, }, }, public, FieldMatrix, <, T, >, getRowMatrix, (]
[+, j, ,, subMatrix, [, i, ], [, j, ], ), ;, }, }, }, public, FieldMatrix, <, T, >]
[,, subMatrix, [, i, ], [, j, ], ), ;, }, }, }, public, FieldMatrix, <, T, >, getRowMatrix, (]
[), ;, }, }, }, public, FieldMatrix, <, T, >, getRowMatrix, (, final, int, row, ), throws, OutOfRangeException, {, checkRowIndex]
[[, j, ], ), ;, }, }, }, public, FieldMatrix, <, T, >, getRowMatrix, (, final, int, row, ), throws]
[[, i, ], [, j, ], ), ;, }, }, }, public, FieldMatrix, <, T, >, getRowMatrix, (, final, int]
[], [, j, ], ), ;, }, }, }, public, FieldMatrix, <, T, >, getRowMatrix, (, final, int, row, )]
[], ), ;, }, }, }, public, FieldMatrix, <, T, >, getRowMatrix, (, final, int, row, ), throws, OutOfRangeException, {]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, final, FieldMatrix, <, T, >, out, =, createMatrix, (, 1, ,]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, final, FieldMatrix, <, T, >, out, =, createMatrix, (, 1]
[;, final, FieldMatrix, <, T, >, out, =, createMatrix, (, 1, ,, nCols, ), ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, out, ., setEntry, (]
[,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, out]
[), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, out, ., setEntry]
[;, i, <, nCols, ;, ++, i, ), {, out, ., setEntry, (, 0, ,, i, ,, getEntry, (, row]
[;, ++, i, ), {, out, ., setEntry, (, 0, ,, i, ,, getEntry, (, row, ,, i, ), )]
[<, nCols, ;, ++, i, ), {, out, ., setEntry, (, 0, ,, i, ,, getEntry, (, row, ,, i]
[;, ++, i, ), {, out, ., setEntry, (, 0, ,, i, ,, getEntry, (, row, ,, i, ), )]
[), {, out, ., setEntry, (, 0, ,, i, ,, getEntry, (, row, ,, i, ), ), ;, }, return]
[), {, out, ., setEntry, (, 0, ,, i, ,, getEntry, (, row, ,, i, ), ), ;, }, return]
[;, }, return, out, ;, }, public, void, setRowMatrix, (, final, int, row, ,, final, FieldMatrix, <, T, >, matrix]
[., setEntry, (, 0, ,, i, ,, getEntry, (, row, ,, i, ), ), ;, }, return, out, ;, }]
[,, i, ,, getEntry, (, row, ,, i, ), ), ;, }, return, out, ;, }, public, void, setRowMatrix, (]
[,, getEntry, (, row, ,, i, ), ), ;, }, return, out, ;, }, public, void, setRowMatrix, (, final, int]
[), ;, }, return, out, ;, }, public, void, setRowMatrix, (, final, int, row, ,, final, FieldMatrix, <, T, >]
[,, i, ), ), ;, }, return, out, ;, }, public, void, setRowMatrix, (, final, int, row, ,, final, FieldMatrix]
[), ), ;, }, return, out, ;, }, public, void, setRowMatrix, (, final, int, row, ,, final, FieldMatrix, <, T]
[;, }, public, void, setRowMatrix, (, final, int, row, ,, final, FieldMatrix, <, T, >, matrix, ), throws, OutOfRangeException, ,]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, 1, )]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, 1]
[;, if, (, (, matrix, ., getRowDimension, (, ), !=, 1, ), ||, (, matrix, ., getColumnDimension, (, ), !=]
[), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, 1, ,]
[||, (, matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (]
[), ||, (, matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension]
[!=, 1, ), ||, (, matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix]
[., getRowDimension, (, ), !=, 1, ), ||, (, matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw]
[), ||, (, matrix, ., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension]
[), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, 1, ,]
[), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, 1]
[!=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, )]
[., getColumnDimension, (, ), !=, nCols, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix]
[), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, 1]
[;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row]
[,, matrix, ., getColumnDimension, (, ), ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;]
[., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, 1, ,, nCols, ), ;, }, for, (, int]
[,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i]
[., getColumnDimension, (, ), ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (]
[;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,, matrix, ., getEntry, (, 0]
[;, ++, i, ), {, setEntry, (, row, ,, i, ,, matrix, ., getEntry, (, 0, ,, i, ), )]
[<, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,, matrix, ., getEntry, (, 0, ,, i]
[;, ++, i, ), {, setEntry, (, row, ,, i, ,, matrix, ., getEntry, (, 0, ,, i, ), )]
[), {, setEntry, (, row, ,, i, ,, matrix, ., getEntry, (, 0, ,, i, ), ), ;, }, }]
[), {, setEntry, (, row, ,, i, ,, matrix, ., getEntry, (, 0, ,, i, ), ), ;, }, }]
[;, }, }, public, FieldMatrix, <, T, >, getColumnMatrix, (, final, int, column, ), throws, OutOfRangeException, {, checkColumnIndex, (, column]
[,, i, ,, matrix, ., getEntry, (, 0, ,, i, ), ), ;, }, }, public, FieldMatrix, <, T, >]
[,, matrix, ., getEntry, (, 0, ,, i, ), ), ;, }, }, public, FieldMatrix, <, T, >, getColumnMatrix, (]
[), ;, }, }, public, FieldMatrix, <, T, >, getColumnMatrix, (, final, int, column, ), throws, OutOfRangeException, {, checkColumnIndex, (]
[., getEntry, (, 0, ,, i, ), ), ;, }, }, public, FieldMatrix, <, T, >, getColumnMatrix, (, final, int]
[,, i, ), ), ;, }, }, public, FieldMatrix, <, T, >, getColumnMatrix, (, final, int, column, ), throws, OutOfRangeException]
[), ), ;, }, }, public, FieldMatrix, <, T, >, getColumnMatrix, (, final, int, column, ), throws, OutOfRangeException, {, checkColumnIndex]
[;, final, int, nRows, =, getRowDimension, (, ), ;, final, FieldMatrix, <, T, >, out, =, createMatrix, (, nRows, ,]
[), ;, final, int, nRows, =, getRowDimension, (, ), ;, final, FieldMatrix, <, T, >, out, =, createMatrix, (, nRows]
[;, final, FieldMatrix, <, T, >, out, =, createMatrix, (, nRows, ,, 1, ), ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, out, ., setEntry, (]
[,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, out]
[), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, out, ., setEntry]
[;, i, <, nRows, ;, ++, i, ), {, out, ., setEntry, (, i, ,, 0, ,, getEntry, (, i]
[;, ++, i, ), {, out, ., setEntry, (, i, ,, 0, ,, getEntry, (, i, ,, column, ), )]
[<, nRows, ;, ++, i, ), {, out, ., setEntry, (, i, ,, 0, ,, getEntry, (, i, ,, column]
[;, ++, i, ), {, out, ., setEntry, (, i, ,, 0, ,, getEntry, (, i, ,, column, ), )]
[), {, out, ., setEntry, (, i, ,, 0, ,, getEntry, (, i, ,, column, ), ), ;, }, return]
[), {, out, ., setEntry, (, i, ,, 0, ,, getEntry, (, i, ,, column, ), ), ;, }, return]
[;, }, return, out, ;, }, public, void, setColumnMatrix, (, final, int, column, ,, final, FieldMatrix, <, T, >, matrix]
[., setEntry, (, i, ,, 0, ,, getEntry, (, i, ,, column, ), ), ;, }, return, out, ;, }]
[,, 0, ,, getEntry, (, i, ,, column, ), ), ;, }, return, out, ;, }, public, void, setColumnMatrix, (]
[,, getEntry, (, i, ,, column, ), ), ;, }, return, out, ;, }, public, void, setColumnMatrix, (, final, int]
[), ;, }, return, out, ;, }, public, void, setColumnMatrix, (, final, int, column, ,, final, FieldMatrix, <, T, >]
[,, column, ), ), ;, }, return, out, ;, }, public, void, setColumnMatrix, (, final, int, column, ,, final, FieldMatrix]
[), ), ;, }, return, out, ;, }, public, void, setColumnMatrix, (, final, int, column, ,, final, FieldMatrix, <, T]
[;, }, public, void, setColumnMatrix, (, final, int, column, ,, final, FieldMatrix, <, T, >, matrix, ), throws, OutOfRangeException, ,]
[;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, nRows, )]
[), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, (, matrix, ., getRowDimension, (, ), !=, nRows]
[;, if, (, (, matrix, ., getRowDimension, (, ), !=, nRows, ), ||, (, matrix, ., getColumnDimension, (, ), !=]
[), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, nRows, ,]
[||, (, matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (]
[), ||, (, matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension]
[!=, nRows, ), ||, (, matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix]
[., getRowDimension, (, ), !=, nRows, ), ||, (, matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw]
[), ||, (, matrix, ., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension]
[), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, nRows, ,]
[), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, nRows]
[!=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, )]
[., getColumnDimension, (, ), !=, 1, ), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix]
[), ), {, throw, new, MatrixDimensionMismatchException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, nRows]
[;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i]
[,, matrix, ., getColumnDimension, (, ), ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;]
[., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ,, nRows, ,, 1, ), ;, }, for, (, int]
[,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i]
[., getColumnDimension, (, ), ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (]
[;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,, matrix, ., getEntry, (, i]
[;, ++, i, ), {, setEntry, (, i, ,, column, ,, matrix, ., getEntry, (, i, ,, 0, ), )]
[<, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,, matrix, ., getEntry, (, i, ,, 0]
[;, ++, i, ), {, setEntry, (, i, ,, column, ,, matrix, ., getEntry, (, i, ,, 0, ), )]
[), {, setEntry, (, i, ,, column, ,, matrix, ., getEntry, (, i, ,, 0, ), ), ;, }, }]
[), {, setEntry, (, i, ,, column, ,, matrix, ., getEntry, (, i, ,, 0, ), ), ;, }, }]
[;, }, }, public, FieldVector, <, T, >, getRowVector, (, final, int, row, ), throws, OutOfRangeException, {, return, new, ArrayFieldVector]
[,, column, ,, matrix, ., getEntry, (, i, ,, 0, ), ), ;, }, }, public, FieldVector, <, T, >]
[,, matrix, ., getEntry, (, i, ,, 0, ), ), ;, }, }, public, FieldVector, <, T, >, getRowVector, (]
[), ;, }, }, public, FieldVector, <, T, >, getRowVector, (, final, int, row, ), throws, OutOfRangeException, {, return, new]
[., getEntry, (, i, ,, 0, ), ), ;, }, }, public, FieldVector, <, T, >, getRowVector, (, final, int]
[,, 0, ), ), ;, }, }, public, FieldVector, <, T, >, getRowVector, (, final, int, row, ), throws, OutOfRangeException]
[), ), ;, }, }, public, FieldVector, <, T, >, getRowVector, (, final, int, row, ), throws, OutOfRangeException, {, return]
[;, }, public, void, setRowVector, (, final, int, row, ,, final, FieldVector, <, T, >, vector, ), throws, OutOfRangeException, ,]
[,, getRow, (, row, ), ,, false, ), ;, }, public, void, setRowVector, (, final, int, row, ,, final, FieldVector]
[,, false, ), ;, }, public, void, setRowVector, (, final, int, row, ,, final, FieldVector, <, T, >, vector, )]
[), ,, false, ), ;, }, public, void, setRowVector, (, final, int, row, ,, final, FieldVector, <, T, >, vector]
[), ;, }, public, void, setRowVector, (, final, int, row, ,, final, FieldVector, <, T, >, vector, ), throws, OutOfRangeException]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, vector, ., getDimension, (, ), !=, nCols, ), {]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, vector, ., getDimension, (, ), !=, nCols, )]
[;, if, (, vector, ., getDimension, (, ), !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, vector, .]
[), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, vector, ., getDimension, (, ), ,, 1, ,, nCols, ), ;, }]
[!=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, vector, ., getDimension, (, ), ,, 1, ,, nCols, )]
[., getDimension, (, ), !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, vector, ., getDimension, (, ), ,]
[), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, vector, ., getDimension, (, ), ,, 1, ,, nCols, ), ;, }]
[;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row]
[,, vector, ., getDimension, (, ), ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;]
[,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i]
[., getDimension, (, ), ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (]
[;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,, vector, ., getEntry, (, i]
[;, ++, i, ), {, setEntry, (, row, ,, i, ,, vector, ., getEntry, (, i, ), ), ;, }]
[<, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,, vector, ., getEntry, (, i, ), )]
[;, ++, i, ), {, setEntry, (, row, ,, i, ,, vector, ., getEntry, (, i, ), ), ;, }]
[), {, setEntry, (, row, ,, i, ,, vector, ., getEntry, (, i, ), ), ;, }, }, public, FieldVector]
[), {, setEntry, (, row, ,, i, ,, vector, ., getEntry, (, i, ), ), ;, }, }, public, FieldVector]
[;, }, }, public, FieldVector, <, T, >, getColumnVector, (, final, int, column, ), throws, OutOfRangeException, {, return, new, ArrayFieldVector]
[,, i, ,, vector, ., getEntry, (, i, ), ), ;, }, }, public, FieldVector, <, T, >, getColumnVector, (]
[,, vector, ., getEntry, (, i, ), ), ;, }, }, public, FieldVector, <, T, >, getColumnVector, (, final, int]
[), ;, }, }, public, FieldVector, <, T, >, getColumnVector, (, final, int, column, ), throws, OutOfRangeException, {, return, new]
[., getEntry, (, i, ), ), ;, }, }, public, FieldVector, <, T, >, getColumnVector, (, final, int, column, )]
[), ), ;, }, }, public, FieldVector, <, T, >, getColumnVector, (, final, int, column, ), throws, OutOfRangeException, {, return]
[;, }, public, void, setColumnVector, (, final, int, column, ,, final, FieldVector, <, T, >, vector, ), throws, OutOfRangeException, ,]
[,, getColumn, (, column, ), ,, false, ), ;, }, public, void, setColumnVector, (, final, int, column, ,, final, FieldVector]
[,, false, ), ;, }, public, void, setColumnVector, (, final, int, column, ,, final, FieldVector, <, T, >, vector, )]
[), ,, false, ), ;, }, public, void, setColumnVector, (, final, int, column, ,, final, FieldVector, <, T, >, vector]
[), ;, }, public, void, setColumnVector, (, final, int, column, ,, final, FieldVector, <, T, >, vector, ), throws, OutOfRangeException]
[;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, vector, ., getDimension, (, ), !=, nRows, ), {]
[), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, vector, ., getDimension, (, ), !=, nRows, )]
[;, if, (, vector, ., getDimension, (, ), !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, vector, ., getDimension, (]
[), {, throw, new, MatrixDimensionMismatchException, (, vector, ., getDimension, (, ), ,, 1, ,, nRows, ,, 1, ), ;, }]
[!=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, vector, ., getDimension, (, ), ,, 1, ,, nRows, ,, 1, )]
[., getDimension, (, ), !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, vector, ., getDimension, (, ), ,, 1, ,]
[), {, throw, new, MatrixDimensionMismatchException, (, vector, ., getDimension, (, ), ,, 1, ,, nRows, ,, 1, ), ;, }]
[;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i]
[,, 1, ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[., getDimension, (, ), ,, 1, ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;]
[,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i]
[,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (]
[;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,, vector, ., getEntry, (, i]
[;, ++, i, ), {, setEntry, (, i, ,, column, ,, vector, ., getEntry, (, i, ), ), ;, }]
[<, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,, vector, ., getEntry, (, i, ), )]
[;, ++, i, ), {, setEntry, (, i, ,, column, ,, vector, ., getEntry, (, i, ), ), ;, }]
[), {, setEntry, (, i, ,, column, ,, vector, ., getEntry, (, i, ), ), ;, }, }, public, T]
[), {, setEntry, (, i, ,, column, ,, vector, ., getEntry, (, i, ), ), ;, }, }, public, T]
[;, }, }, public, T, [, ], getRow, (, final, int, row, ), throws, OutOfRangeException, {, checkRowIndex, (, row, )]
[,, column, ,, vector, ., getEntry, (, i, ), ), ;, }, }, public, T, [, ], getRow, (, final]
[,, vector, ., getEntry, (, i, ), ), ;, }, }, public, T, [, ], getRow, (, final, int, row]
[), ;, }, }, public, T, [, ], getRow, (, final, int, row, ), throws, OutOfRangeException, {, checkRowIndex, (, row]
[., getEntry, (, i, ), ), ;, }, }, public, T, [, ], getRow, (, final, int, row, ), throws]
[), ), ;, }, }, public, T, [, ], getRow, (, final, int, row, ), throws, OutOfRangeException, {, checkRowIndex, (]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, final, T, [, ], out, =, MathArrays, ., buildArray, (, field]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, final, T, [, ], out, =, MathArrays, ., buildArray, (]
[;, final, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, nCols, ), ;, for, (, int, i]
[;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, out, [, i, ]]
[., buildArray, (, field, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++]
[,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, out]
[), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, out, [, i]
[;, i, <, nCols, ;, ++, i, ), {, out, [, i, ], =, getEntry, (, row, ,, i, )]
[;, ++, i, ), {, out, [, i, ], =, getEntry, (, row, ,, i, ), ;, }, return, out]
[<, nCols, ;, ++, i, ), {, out, [, i, ], =, getEntry, (, row, ,, i, ), ;, }]
[;, ++, i, ), {, out, [, i, ], =, getEntry, (, row, ,, i, ), ;, }, return, out]
[), {, out, [, i, ], =, getEntry, (, row, ,, i, ), ;, }, return, out, ;, }, public]
[), {, out, [, i, ], =, getEntry, (, row, ,, i, ), ;, }, return, out, ;, }, public]
[=, getEntry, (, row, ,, i, ), ;, }, return, out, ;, }, public, void, setRow, (, final, int, row]
[[, i, ], =, getEntry, (, row, ,, i, ), ;, }, return, out, ;, }, public, void, setRow, (]
[], =, getEntry, (, row, ,, i, ), ;, }, return, out, ;, }, public, void, setRow, (, final, int]
[;, }, return, out, ;, }, public, void, setRow, (, final, int, row, ,, final, T, [, ], array, )]
[,, i, ), ;, }, return, out, ;, }, public, void, setRow, (, final, int, row, ,, final, T, []
[), ;, }, return, out, ;, }, public, void, setRow, (, final, int, row, ,, final, T, [, ], array]
[;, }, public, void, setRow, (, final, int, row, ,, final, T, [, ], array, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, array, ., length, !=, nCols, ), {, throw, new]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, array, ., length, !=, nCols, ), {, throw]
[;, if, (, array, ., length, !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,]
[), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,, 1, ,, nCols, ), ;, }, for, (]
[!=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,, 1, ,, nCols, ), ;, }]
[., length, !=, nCols, ), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,, 1, ,, nCols, )]
[), {, throw, new, MatrixDimensionMismatchException, (, 1, ,, array, ., length, ,, 1, ,, nCols, ), ;, }, for, (]
[;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row]
[,, array, ., length, ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i]
[., length, ,, 1, ,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;]
[,, nCols, ), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, setEntry, (]
[;, i, <, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,, array, [, i, ], )]
[;, ++, i, ), {, setEntry, (, row, ,, i, ,, array, [, i, ], ), ;, }, }, public]
[<, nCols, ;, ++, i, ), {, setEntry, (, row, ,, i, ,, array, [, i, ], ), ;, }]
[;, ++, i, ), {, setEntry, (, row, ,, i, ,, array, [, i, ], ), ;, }, }, public]
[), {, setEntry, (, row, ,, i, ,, array, [, i, ], ), ;, }, }, public, T, [, ]]
[), {, setEntry, (, row, ,, i, ,, array, [, i, ], ), ;, }, }, public, T, [, ]]
[;, }, }, public, T, [, ], getColumn, (, final, int, column, ), throws, OutOfRangeException, {, checkColumnIndex, (, column, )]
[,, i, ,, array, [, i, ], ), ;, }, }, public, T, [, ], getColumn, (, final, int, column]
[,, array, [, i, ], ), ;, }, }, public, T, [, ], getColumn, (, final, int, column, ), throws]
[), ;, }, }, public, T, [, ], getColumn, (, final, int, column, ), throws, OutOfRangeException, {, checkColumnIndex, (, column]
[[, i, ], ), ;, }, }, public, T, [, ], getColumn, (, final, int, column, ), throws, OutOfRangeException, {]
[], ), ;, }, }, public, T, [, ], getColumn, (, final, int, column, ), throws, OutOfRangeException, {, checkColumnIndex, (]
[;, final, int, nRows, =, getRowDimension, (, ), ;, final, T, [, ], out, =, MathArrays, ., buildArray, (, field]
[), ;, final, int, nRows, =, getRowDimension, (, ), ;, final, T, [, ], out, =, MathArrays, ., buildArray, (]
[;, final, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, nRows, ), ;, for, (, int, i]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, out, [, i, ]]
[., buildArray, (, field, ,, nRows, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++]
[,, nRows, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, out]
[), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, out, [, i]
[;, i, <, nRows, ;, ++, i, ), {, out, [, i, ], =, getEntry, (, i, ,, column, )]
[;, ++, i, ), {, out, [, i, ], =, getEntry, (, i, ,, column, ), ;, }, return, out]
[<, nRows, ;, ++, i, ), {, out, [, i, ], =, getEntry, (, i, ,, column, ), ;, }]
[;, ++, i, ), {, out, [, i, ], =, getEntry, (, i, ,, column, ), ;, }, return, out]
[), {, out, [, i, ], =, getEntry, (, i, ,, column, ), ;, }, return, out, ;, }, public]
[), {, out, [, i, ], =, getEntry, (, i, ,, column, ), ;, }, return, out, ;, }, public]
[=, getEntry, (, i, ,, column, ), ;, }, return, out, ;, }, public, void, setColumn, (, final, int, column]
[[, i, ], =, getEntry, (, i, ,, column, ), ;, }, return, out, ;, }, public, void, setColumn, (]
[], =, getEntry, (, i, ,, column, ), ;, }, return, out, ;, }, public, void, setColumn, (, final, int]
[;, }, return, out, ;, }, public, void, setColumn, (, final, int, column, ,, final, T, [, ], array, )]
[,, column, ), ;, }, return, out, ;, }, public, void, setColumn, (, final, int, column, ,, final, T, []
[), ;, }, return, out, ;, }, public, void, setColumn, (, final, int, column, ,, final, T, [, ], array]
[;, }, public, void, setColumn, (, final, int, column, ,, final, T, [, ], array, ), throws, OutOfRangeException, ,, MatrixDimensionMismatchException]
[;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, array, ., length, !=, nRows, ), {, throw, new]
[), ;, final, int, nRows, =, getRowDimension, (, ), ;, if, (, array, ., length, !=, nRows, ), {, throw]
[;, if, (, array, ., length, !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,]
[), {, throw, new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,, nRows, ,, 1, ), ;, }, for, (]
[!=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,, nRows, ,, 1, ), ;, }]
[., length, !=, nRows, ), {, throw, new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,, nRows, ,, 1, )]
[), {, throw, new, MatrixDimensionMismatchException, (, array, ., length, ,, 1, ,, nRows, ,, 1, ), ;, }, for, (]
[;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i]
[,, 1, ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[., length, ,, 1, ,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[,, nRows, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i]
[,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, setEntry, (]
[;, i, <, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,, array, [, i, ], )]
[;, ++, i, ), {, setEntry, (, i, ,, column, ,, array, [, i, ], ), ;, }, }, public]
[<, nRows, ;, ++, i, ), {, setEntry, (, i, ,, column, ,, array, [, i, ], ), ;, }]
[;, ++, i, ), {, setEntry, (, i, ,, column, ,, array, [, i, ], ), ;, }, }, public]
[), {, setEntry, (, i, ,, column, ,, array, [, i, ], ), ;, }, }, public, abstract, T, getEntry]
[), {, setEntry, (, i, ,, column, ,, array, [, i, ], ), ;, }, }, public, abstract, T, getEntry]
[;, }, }, public, abstract, T, getEntry, (, int, row, ,, int, column, ), throws, OutOfRangeException, ;, public, abstract, void]
[,, column, ,, array, [, i, ], ), ;, }, }, public, abstract, T, getEntry, (, int, row, ,, int]
[,, array, [, i, ], ), ;, }, }, public, abstract, T, getEntry, (, int, row, ,, int, column, )]
[), ;, }, }, public, abstract, T, getEntry, (, int, row, ,, int, column, ), throws, OutOfRangeException, ;, public, abstract]
[[, i, ], ), ;, }, }, public, abstract, T, getEntry, (, int, row, ,, int, column, ), throws, OutOfRangeException]
[], ), ;, }, }, public, abstract, T, getEntry, (, int, row, ,, int, column, ), throws, OutOfRangeException, ;, public]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, final, FieldMatrix, <, T, >, out, =, createMatrix, (, nCols, ,]
[;, final, FieldMatrix, <, T, >, out, =, createMatrix, (, nCols, ,, nRows, ), ;, walkInOptimizedOrder, (, new, DefaultFieldMatrixPreservingVisitor, <]
[;, walkInOptimizedOrder, (, new, DefaultFieldMatrixPreservingVisitor, <, T, >, (, field, ., getZero, (, ), ), {, @, Override, public, void]
[,, nRows, ), ;, walkInOptimizedOrder, (, new, DefaultFieldMatrixPreservingVisitor, <, T, >, (, field, ., getZero, (, ), ), {, @]
[), ;, walkInOptimizedOrder, (, new, DefaultFieldMatrixPreservingVisitor, <, T, >, (, field, ., getZero, (, ), ), {, @, Override, public]
[;, return, out, ;, }, public, boolean, isSquare, (, ), {, return, getColumnDimension, (, ), ==, getRowDimension, (, ), ;]
[), ;, return, out, ;, }, public, boolean, isSquare, (, ), {, return, getColumnDimension, (, ), ==, getRowDimension, (, )]
[), {, @, Override, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, T, value, )]
[., getZero, (, ), ), {, @, Override, public, void, visit, (, final, int, row, ,, final, int, column, ,]
[;, }, }, ), ;, return, out, ;, }, public, boolean, isSquare, (, ), {, return, getColumnDimension, (, ), ==]
[., setEntry, (, column, ,, row, ,, value, ), ;, }, }, ), ;, return, out, ;, }, public, boolean]
[,, row, ,, value, ), ;, }, }, ), ;, return, out, ;, }, public, boolean, isSquare, (, ), {]
[,, value, ), ;, }, }, ), ;, return, out, ;, }, public, boolean, isSquare, (, ), {, return, getColumnDimension]
[), ;, }, }, ), ;, return, out, ;, }, public, boolean, isSquare, (, ), {, return, getColumnDimension, (, )]
[;, }, public, boolean, isSquare, (, ), {, return, getColumnDimension, (, ), ==, getRowDimension, (, ), ;, }, public, abstract]
[;, }, public, abstract, int, getRowDimension, (, ), ;, public, abstract, int, getColumnDimension, (, ), ;, public, T, getTrace, (]
[==, getRowDimension, (, ), ;, }, public, abstract, int, getRowDimension, (, ), ;, public, abstract, int, getColumnDimension, (, ), ;]
[;, }, public, abstract, int, getRowDimension, (, ), ;, public, abstract, int, getColumnDimension, (, ), ;, public, T, getTrace, (]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, nRows, !=, nCols, ), {, throw, new, NonSquareMatrixException, (]
[;, if, (, nRows, !=, nCols, ), {, throw, new, NonSquareMatrixException, (, nRows, ,, nCols, ), ;, }, T, trace]
[), {, throw, new, NonSquareMatrixException, (, nRows, ,, nCols, ), ;, }, T, trace, =, field, ., getZero, (, )]
[!=, nCols, ), {, throw, new, NonSquareMatrixException, (, nRows, ,, nCols, ), ;, }, T, trace, =, field, ., getZero]
[), {, throw, new, NonSquareMatrixException, (, nRows, ,, nCols, ), ;, }, T, trace, =, field, ., getZero, (, )]
[;, }, T, trace, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[,, nCols, ), ;, }, T, trace, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0]
[), ;, }, T, trace, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, trace, =, trace, .]
[., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[;, i, <, nRows, ;, ++, i, ), {, trace, =, trace, ., add, (, getEntry, (, i, ,, i]
[;, ++, i, ), {, trace, =, trace, ., add, (, getEntry, (, i, ,, i, ), ), ;, }]
[<, nRows, ;, ++, i, ), {, trace, =, trace, ., add, (, getEntry, (, i, ,, i, ), )]
[;, ++, i, ), {, trace, =, trace, ., add, (, getEntry, (, i, ,, i, ), ), ;, }]
[), {, trace, =, trace, ., add, (, getEntry, (, i, ,, i, ), ), ;, }, return, trace, ;]
[), {, trace, =, trace, ., add, (, getEntry, (, i, ,, i, ), ), ;, }, return, trace, ;]
[=, trace, ., add, (, getEntry, (, i, ,, i, ), ), ;, }, return, trace, ;, }, public, T]
[;, }, return, trace, ;, }, public, T, [, ], operate, (, final, T, [, ], v, ), throws, DimensionMismatchException]
[., add, (, getEntry, (, i, ,, i, ), ), ;, }, return, trace, ;, }, public, T, [, ]]
[), ;, }, return, trace, ;, }, public, T, [, ], operate, (, final, T, [, ], v, ), throws]
[,, i, ), ), ;, }, return, trace, ;, }, public, T, [, ], operate, (, final, T, [, ]]
[), ), ;, }, return, trace, ;, }, public, T, [, ], operate, (, final, T, [, ], v, )]
[;, }, public, T, [, ], operate, (, final, T, [, ], v, ), throws, DimensionMismatchException, {, final, int, nRows]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=, nCols, ), {, throw, new]
[;, if, (, v, ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, )]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, T, [, ], out, =]
[!=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, T, [, ]]
[., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, T]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, T, [, ], out, =]
[;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, nRows, ), ;, for, (, int]
[,, nCols, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, nRows, ), ;]
[., length, ,, nCols, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, nRows]
[), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, nRows, ), ;, for, (]
[;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, T, sum, =, field]
[., buildArray, (, field, ,, nRows, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++]
[,, nRows, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, T]
[), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, T, sum, =]
[;, row, <, nRows, ;, ++, row, ), {, T, sum, =, field, ., getZero, (, ), ;, for, (]
[;, ++, row, ), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0]
[<, nRows, ;, ++, row, ), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i]
[;, ++, row, ), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0]
[), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, sum, =, sum, .]
[., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {]
[;, i, <, nCols, ;, ++, i, ), {, sum, =, sum, ., add, (, getEntry, (, row, ,, i]
[;, ++, i, ), {, sum, =, sum, ., add, (, getEntry, (, row, ,, i, ), ., multiply, (]
[<, nCols, ;, ++, i, ), {, sum, =, sum, ., add, (, getEntry, (, row, ,, i, ), .]
[;, ++, i, ), {, sum, =, sum, ., add, (, getEntry, (, row, ,, i, ), ., multiply, (]
[), {, sum, =, sum, ., add, (, getEntry, (, row, ,, i, ), ., multiply, (, v, [, i]
[), {, sum, =, sum, ., add, (, getEntry, (, row, ,, i, ), ., multiply, (, v, [, i]
[=, sum, ., add, (, getEntry, (, row, ,, i, ), ., multiply, (, v, [, i, ], ), )]
[;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }, public, FieldVector, <, T, >, operate]
[., add, (, getEntry, (, row, ,, i, ), ., multiply, (, v, [, i, ], ), ), ;, }]
[), ;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }, public, FieldVector, <, T, >]
[., multiply, (, v, [, i, ], ), ), ;, }, out, [, row, ], =, sum, ;, }, return]
[,, i, ), ., multiply, (, v, [, i, ], ), ), ;, }, out, [, row, ], =, sum]
[), ., multiply, (, v, [, i, ], ), ), ;, }, out, [, row, ], =, sum, ;, }]
[), ), ;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }, public, FieldVector, <, T]
[[, i, ], ), ), ;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }, public]
[], ), ), ;, }, out, [, row, ], =, sum, ;, }, return, out, ;, }, public, FieldVector, <]
[=, sum, ;, }, return, out, ;, }, public, FieldVector, <, T, >, operate, (, final, FieldVector, <, T, >]
[[, row, ], =, sum, ;, }, return, out, ;, }, public, FieldVector, <, T, >, operate, (, final, FieldVector]
[], =, sum, ;, }, return, out, ;, }, public, FieldVector, <, T, >, operate, (, final, FieldVector, <, T]
[;, }, return, out, ;, }, public, FieldVector, <, T, >, operate, (, final, FieldVector, <, T, >, v, )]
[;, }, public, FieldVector, <, T, >, operate, (, final, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, try]
[;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =]
[,, operate, (, (, (, ArrayFieldVector, <, T, >, ), v, ), ., getDataRef, (, ), ), ,, false, )]
[,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final]
[), ,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =, getRowDimension, (, ), ;]
[., getDataRef, (, ), ), ,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =]
[), ., getDataRef, (, ), ), ,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows]
[), ., getDataRef, (, ), ), ,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows]
[), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., getDimension, (, ), !=, nCols, ), {]
[;, if, (, v, ., getDimension, (, ), !=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (]
[), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (, ), ,, nCols, ), ;, }, final, T, [, ]]
[!=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (, ), ,, nCols, ), ;, }, final, T]
[., getDimension, (, ), !=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (, ), ,, nCols, )]
[), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (, ), ,, nCols, ), ;, }, final, T, [, ]]
[;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, nRows, ), ;, for, (, int]
[,, nCols, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, nRows, ), ;]
[., getDimension, (, ), ,, nCols, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, field]
[), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, nRows, ), ;, for, (]
[;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, T, sum, =, field]
[., buildArray, (, field, ,, nRows, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++]
[,, nRows, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, T]
[), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, T, sum, =]
[;, row, <, nRows, ;, ++, row, ), {, T, sum, =, field, ., getZero, (, ), ;, for, (]
[;, ++, row, ), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0]
[<, nRows, ;, ++, row, ), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i]
[;, ++, row, ), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0]
[), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, sum, =, sum, .]
[., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {]
[;, i, <, nCols, ;, ++, i, ), {, sum, =, sum, ., add, (, getEntry, (, row, ,, i]
[;, ++, i, ), {, sum, =, sum, ., add, (, getEntry, (, row, ,, i, ), ., multiply, (]
[<, nCols, ;, ++, i, ), {, sum, =, sum, ., add, (, getEntry, (, row, ,, i, ), .]
[;, ++, i, ), {, sum, =, sum, ., add, (, getEntry, (, row, ,, i, ), ., multiply, (]
[), {, sum, =, sum, ., add, (, getEntry, (, row, ,, i, ), ., multiply, (, v, ., getEntry]
[), {, sum, =, sum, ., add, (, getEntry, (, row, ,, i, ), ., multiply, (, v, ., getEntry]
[=, sum, ., add, (, getEntry, (, row, ,, i, ), ., multiply, (, v, ., getEntry, (, i, )]
[;, }, out, [, row, ], =, sum, ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out]
[., add, (, getEntry, (, row, ,, i, ), ., multiply, (, v, ., getEntry, (, i, ), ), )]
[), ;, }, out, [, row, ], =, sum, ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,]
[., multiply, (, v, ., getEntry, (, i, ), ), ), ;, }, out, [, row, ], =, sum, ;]
[,, i, ), ., multiply, (, v, ., getEntry, (, i, ), ), ), ;, }, out, [, row, ]]
[), ., multiply, (, v, ., getEntry, (, i, ), ), ), ;, }, out, [, row, ], =, sum]
[), ), ;, }, out, [, row, ], =, sum, ;, }, return, new, ArrayFieldVector, <, T, >, (, field]
[., getEntry, (, i, ), ), ), ;, }, out, [, row, ], =, sum, ;, }, return, new, ArrayFieldVector]
[), ), ), ;, }, out, [, row, ], =, sum, ;, }, return, new, ArrayFieldVector, <, T, >, (]
[=, sum, ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, }]
[[, row, ], =, sum, ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, )]
[], =, sum, ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }]
[;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, }, public, T]
[;, }, }, public, T, [, ], preMultiply, (, final, T, [, ], v, ), throws, DimensionMismatchException, {, final, int]
[,, out, ,, false, ), ;, }, }, public, T, [, ], preMultiply, (, final, T, [, ], v, )]
[,, false, ), ;, }, }, public, T, [, ], preMultiply, (, final, T, [, ], v, ), throws, DimensionMismatchException]
[), ;, }, }, public, T, [, ], preMultiply, (, final, T, [, ], v, ), throws, DimensionMismatchException, {, final]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=, nRows, ), {, throw, new]
[;, if, (, v, ., length, !=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, )]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, T, [, ], out, =]
[!=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, T, [, ]]
[., length, !=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, T]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, T, [, ], out, =]
[;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, nCols, ), ;, for, (, int]
[,, nRows, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, nCols, ), ;]
[., length, ,, nRows, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, nCols]
[), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, nCols, ), ;, for, (]
[;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, T, sum, =, field]
[., buildArray, (, field, ,, nCols, ), ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++]
[,, nCols, ), ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, T]
[), ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, T, sum, =]
[;, col, <, nCols, ;, ++, col, ), {, T, sum, =, field, ., getZero, (, ), ;, for, (]
[;, ++, col, ), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0]
[<, nCols, ;, ++, col, ), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i]
[;, ++, col, ), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0]
[), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, =, sum, .]
[., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[;, i, <, nRows, ;, ++, i, ), {, sum, =, sum, ., add, (, getEntry, (, i, ,, col]
[;, ++, i, ), {, sum, =, sum, ., add, (, getEntry, (, i, ,, col, ), ., multiply, (]
[<, nRows, ;, ++, i, ), {, sum, =, sum, ., add, (, getEntry, (, i, ,, col, ), .]
[;, ++, i, ), {, sum, =, sum, ., add, (, getEntry, (, i, ,, col, ), ., multiply, (]
[), {, sum, =, sum, ., add, (, getEntry, (, i, ,, col, ), ., multiply, (, v, [, i]
[), {, sum, =, sum, ., add, (, getEntry, (, i, ,, col, ), ., multiply, (, v, [, i]
[=, sum, ., add, (, getEntry, (, i, ,, col, ), ., multiply, (, v, [, i, ], ), )]
[;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }, public, FieldVector, <, T, >, preMultiply]
[., add, (, getEntry, (, i, ,, col, ), ., multiply, (, v, [, i, ], ), ), ;, }]
[), ;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }, public, FieldVector, <, T, >]
[., multiply, (, v, [, i, ], ), ), ;, }, out, [, col, ], =, sum, ;, }, return]
[,, col, ), ., multiply, (, v, [, i, ], ), ), ;, }, out, [, col, ], =, sum]
[), ., multiply, (, v, [, i, ], ), ), ;, }, out, [, col, ], =, sum, ;, }]
[), ), ;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }, public, FieldVector, <, T]
[[, i, ], ), ), ;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }, public]
[], ), ), ;, }, out, [, col, ], =, sum, ;, }, return, out, ;, }, public, FieldVector, <]
[=, sum, ;, }, return, out, ;, }, public, FieldVector, <, T, >, preMultiply, (, final, FieldVector, <, T, >]
[[, col, ], =, sum, ;, }, return, out, ;, }, public, FieldVector, <, T, >, preMultiply, (, final, FieldVector]
[], =, sum, ;, }, return, out, ;, }, public, FieldVector, <, T, >, preMultiply, (, final, FieldVector, <, T]
[;, }, return, out, ;, }, public, FieldVector, <, T, >, preMultiply, (, final, FieldVector, <, T, >, v, )]
[;, }, public, FieldVector, <, T, >, preMultiply, (, final, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, try]
[;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =]
[,, preMultiply, (, (, (, ArrayFieldVector, <, T, >, ), v, ), ., getDataRef, (, ), ), ,, false, )]
[,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final]
[), ,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =, getRowDimension, (, ), ;]
[., getDataRef, (, ), ), ,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =]
[), ., getDataRef, (, ), ), ,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows]
[), ., getDataRef, (, ), ), ,, false, ), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows]
[), ;, }, catch, (, ClassCastException, cce, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., getDimension, (, ), !=, nRows, ), {]
[;, if, (, v, ., getDimension, (, ), !=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (]
[), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (, ), ,, nRows, ), ;, }, final, T, [, ]]
[!=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (, ), ,, nRows, ), ;, }, final, T]
[., getDimension, (, ), !=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (, ), ,, nRows, )]
[), {, throw, new, DimensionMismatchException, (, v, ., getDimension, (, ), ,, nRows, ), ;, }, final, T, [, ]]
[;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, nCols, ), ;, for, (, int]
[,, nRows, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, nCols, ), ;]
[., getDimension, (, ), ,, nRows, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, field]
[), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, field, ,, nCols, ), ;, for, (]
[;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, T, sum, =, field]
[., buildArray, (, field, ,, nCols, ), ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++]
[,, nCols, ), ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, T]
[), ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, T, sum, =]
[;, col, <, nCols, ;, ++, col, ), {, T, sum, =, field, ., getZero, (, ), ;, for, (]
[;, ++, col, ), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0]
[<, nCols, ;, ++, col, ), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i]
[;, ++, col, ), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0]
[), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[), {, T, sum, =, field, ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, =, sum, .]
[., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[;, i, <, nRows, ;, ++, i, ), {, sum, =, sum, ., add, (, getEntry, (, i, ,, col]
[;, ++, i, ), {, sum, =, sum, ., add, (, getEntry, (, i, ,, col, ), ., multiply, (]
[<, nRows, ;, ++, i, ), {, sum, =, sum, ., add, (, getEntry, (, i, ,, col, ), .]
[;, ++, i, ), {, sum, =, sum, ., add, (, getEntry, (, i, ,, col, ), ., multiply, (]
[), {, sum, =, sum, ., add, (, getEntry, (, i, ,, col, ), ., multiply, (, v, ., getEntry]
[), {, sum, =, sum, ., add, (, getEntry, (, i, ,, col, ), ., multiply, (, v, ., getEntry]
[=, sum, ., add, (, getEntry, (, i, ,, col, ), ., multiply, (, v, ., getEntry, (, i, )]
[;, }, out, [, col, ], =, sum, ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out]
[., add, (, getEntry, (, i, ,, col, ), ., multiply, (, v, ., getEntry, (, i, ), ), )]
[), ;, }, out, [, col, ], =, sum, ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,]
[., multiply, (, v, ., getEntry, (, i, ), ), ), ;, }, out, [, col, ], =, sum, ;]
[,, col, ), ., multiply, (, v, ., getEntry, (, i, ), ), ), ;, }, out, [, col, ]]
[), ., multiply, (, v, ., getEntry, (, i, ), ), ), ;, }, out, [, col, ], =, sum]
[), ), ;, }, out, [, col, ], =, sum, ;, }, return, new, ArrayFieldVector, <, T, >, (, field]
[., getEntry, (, i, ), ), ), ;, }, out, [, col, ], =, sum, ;, }, return, new, ArrayFieldVector]
[), ), ), ;, }, out, [, col, ], =, sum, ;, }, return, new, ArrayFieldVector, <, T, >, (]
[=, sum, ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, }]
[[, col, ], =, sum, ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, )]
[], =, sum, ;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }]
[;, }, return, new, ArrayFieldVector, <, T, >, (, field, ,, out, ,, false, ), ;, }, }, public, T]
[;, }, }, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, final, int, rows, =, getRowDimension]
[,, out, ,, false, ), ;, }, }, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {]
[,, false, ), ;, }, }, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, final, int]
[), ;, }, }, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, final, int, rows, =]
[;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows]
[;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1]
[;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for, (, int, column]
[., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;]
[,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row]
[,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0]
[,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++]
[,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, )]
[), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for, (, int]
[-, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for]
[), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for, (, int]
[;, row, <, rows, ;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;]
[;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {]
[<, rows, ;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column]
[;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {]
[), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, final, T, oldValue]
[), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, final, T, oldValue]
[;, column, <, columns, ;, ++, column, ), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;]
[;, ++, column, ), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;, final, T, newValue, =]
[<, columns, ;, ++, column, ), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;, final, T]
[;, ++, column, ), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;, final, T, newValue, =]
[), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;, final, T, newValue, =, visitor, ., visit]
[), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;, final, T, newValue, =, visitor, ., visit]
[;, final, T, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,]
[,, column, ), ;, final, T, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry]
[), ;, final, T, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row]
[;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }]
[., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }]
[,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, .]
[,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (]
[), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;]
[;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >]
[,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInRowOrder, (]
[,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T]
[;, }, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, final, int, rows, =, getRowDimension, (]
[., end, (, ), ;, }, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, final, int]
[;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows]
[;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1]
[;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for, (, int, column]
[., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;]
[,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row]
[,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0]
[,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++]
[,, columns, -, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, )]
[), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for, (, int]
[-, 1, ), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for]
[), ;, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, for, (, int]
[;, row, <, rows, ;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;]
[;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {]
[<, rows, ;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column]
[;, ++, row, ), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {]
[), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, visitor, ., visit]
[), {, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, visitor, ., visit]
[;, column, <, columns, ;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row]
[;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), )]
[<, columns, ;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column]
[;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), )]
[), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }]
[), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }]
[;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >]
[., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, .]
[,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;]
[,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T]
[,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInRowOrder, (, final]
[), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <]
[;, }, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ,, final, int, startRow, ,, final, int, endRow]
[., end, (, ), ;, }, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ,, final, int, startRow]
[;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, for, (, int, column]
[., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=, endRow]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++]
[,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, )]
[,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, for]
[), ;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, for, (, int]
[;, row, <=, endRow, ;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;]
[;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {]
[<=, endRow, ;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column]
[;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {]
[), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, final, T, oldValue]
[), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, final, T, oldValue]
[;, column, <=, endColumn, ;, ++, column, ), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;]
[;, ++, column, ), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;, final, T, newValue, =]
[<=, endColumn, ;, ++, column, ), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;, final, T]
[;, ++, column, ), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;, final, T, newValue, =]
[), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;, final, T, newValue, =, visitor, ., visit]
[), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;, final, T, newValue, =, visitor, ., visit]
[;, final, T, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,]
[,, column, ), ;, final, T, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry]
[), ;, final, T, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row]
[;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }]
[., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }]
[,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, .]
[,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (]
[), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;]
[;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >]
[,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInRowOrder, (]
[,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T]
[;, }, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ,, final, int, startRow, ,, final, int, endRow]
[., end, (, ), ;, }, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ,, final, int, startRow]
[;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, for, (, int, column]
[., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=, endRow]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++]
[,, startColumn, ,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, )]
[,, endColumn, ), ;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, for]
[), ;, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, for, (, int]
[;, row, <=, endRow, ;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;]
[;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {]
[<=, endRow, ;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column]
[;, ++, row, ), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {]
[), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, visitor, ., visit]
[), {, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, visitor, ., visit]
[;, column, <=, endColumn, ;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row]
[;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), )]
[<=, endColumn, ;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column]
[;, ++, column, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), )]
[), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }]
[), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }]
[;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInColumnOrder, (, final, FieldMatrixChangingVisitor, <, T, >]
[., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, .]
[,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;]
[,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInColumnOrder, (, final, FieldMatrixChangingVisitor, <, T]
[,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInColumnOrder, (, final]
[), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInColumnOrder, (, final, FieldMatrixChangingVisitor, <]
[;, }, public, T, walkInColumnOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, final, int, rows, =, getRowDimension, (]
[., end, (, ), ;, }, public, T, walkInColumnOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, final, int]
[;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows]
[;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1]
[;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for, (, int, row]
[., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;]
[,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column]
[,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0]
[,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++]
[,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, )]
[), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for, (, int]
[-, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for]
[), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for, (, int]
[;, column, <, columns, ;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;]
[;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {]
[<, columns, ;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row]
[;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {]
[), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, final, T, oldValue]
[), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, final, T, oldValue]
[;, row, <, rows, ;, ++, row, ), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;]
[;, ++, row, ), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;, final, T, newValue, =]
[<, rows, ;, ++, row, ), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;, final, T]
[;, ++, row, ), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;, final, T, newValue, =]
[), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;, final, T, newValue, =, visitor, ., visit]
[), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;, final, T, newValue, =, visitor, ., visit]
[;, final, T, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,]
[,, column, ), ;, final, T, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry]
[), ;, final, T, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row]
[;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }]
[., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }]
[,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, .]
[,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (]
[), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;]
[;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInColumnOrder, (, final, FieldMatrixPreservingVisitor, <, T, >]
[,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInColumnOrder, (]
[,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInColumnOrder, (, final, FieldMatrixPreservingVisitor]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInColumnOrder, (, final, FieldMatrixPreservingVisitor, <, T]
[;, }, public, T, walkInColumnOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, final, int, rows, =, getRowDimension, (]
[., end, (, ), ;, }, public, T, walkInColumnOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, final, int]
[;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows]
[;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1]
[;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for, (, int, row]
[., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;]
[,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column]
[,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0]
[,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++]
[-, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++]
[,, columns, -, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, )]
[), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for, (, int]
[-, 1, ), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for]
[), ;, for, (, int, column, =, 0, ;, column, <, columns, ;, ++, column, ), {, for, (, int]
[;, column, <, columns, ;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;]
[;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {]
[<, columns, ;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row]
[;, ++, column, ), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {]
[), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, visitor, ., visit]
[), {, for, (, int, row, =, 0, ;, row, <, rows, ;, ++, row, ), {, visitor, ., visit]
[;, row, <, rows, ;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row]
[;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), )]
[<, rows, ;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column]
[;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), )]
[), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }]
[), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }]
[;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInColumnOrder, (, final, FieldMatrixChangingVisitor, <, T, >]
[., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, .]
[,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;]
[,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInColumnOrder, (, final, FieldMatrixChangingVisitor, <, T]
[,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInColumnOrder, (, final]
[), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInColumnOrder, (, final, FieldMatrixChangingVisitor, <]
[;, }, public, T, walkInColumnOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ,, final, int, startRow, ,, final, int, endRow]
[., end, (, ), ;, }, public, T, walkInColumnOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ,, final, int, startRow]
[;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, for, (, int, row]
[., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++]
[,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, )]
[,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, for]
[), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, for, (, int]
[;, column, <=, endColumn, ;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;]
[;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {]
[<=, endColumn, ;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row]
[;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {]
[), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, final, T, oldValue]
[), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, final, T, oldValue]
[;, row, <=, endRow, ;, ++, row, ), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;]
[;, ++, row, ), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;, final, T, newValue, =]
[<=, endRow, ;, ++, row, ), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;, final, T]
[;, ++, row, ), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;, final, T, newValue, =]
[), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;, final, T, newValue, =, visitor, ., visit]
[), {, final, T, oldValue, =, getEntry, (, row, ,, column, ), ;, final, T, newValue, =, visitor, ., visit]
[;, final, T, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,]
[,, column, ), ;, final, T, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry]
[), ;, final, T, newValue, =, visitor, ., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row]
[;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }]
[., visit, (, row, ,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }]
[,, column, ,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, .]
[,, oldValue, ), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (]
[), ;, setEntry, (, row, ,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;]
[;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInColumnOrder, (, final, FieldMatrixPreservingVisitor, <, T, >]
[,, column, ,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInColumnOrder, (]
[,, newValue, ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInColumnOrder, (, final, FieldMatrixPreservingVisitor]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInColumnOrder, (, final, FieldMatrixPreservingVisitor, <, T]
[;, }, public, T, walkInColumnOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ,, final, int, startRow, ,, final, int, endRow]
[., end, (, ), ;, }, public, T, walkInColumnOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ,, final, int, startRow]
[;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, for, (, int, row]
[., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++]
[,, startColumn, ,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, )]
[,, endColumn, ), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, for]
[), ;, for, (, int, column, =, startColumn, ;, column, <=, endColumn, ;, ++, column, ), {, for, (, int]
[;, column, <=, endColumn, ;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;]
[;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {]
[<=, endColumn, ;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row]
[;, ++, column, ), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {]
[), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, visitor, ., visit]
[), {, for, (, int, row, =, startRow, ;, row, <=, endRow, ;, ++, row, ), {, visitor, ., visit]
[;, row, <=, endRow, ;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row]
[;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), )]
[<=, endRow, ;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column]
[;, ++, row, ), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), )]
[), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }]
[), {, visitor, ., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }]
[;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInOptimizedOrder, (, final, FieldMatrixChangingVisitor, <, T, >]
[., visit, (, row, ,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, .]
[,, column, ,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;]
[,, getEntry, (, row, ,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public]
[), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInOptimizedOrder, (, final, FieldMatrixChangingVisitor, <, T]
[,, column, ), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInOptimizedOrder, (, final]
[), ), ;, }, }, return, visitor, ., end, (, ), ;, }, public, T, walkInOptimizedOrder, (, final, FieldMatrixChangingVisitor, <]
[;, }, public, T, walkInOptimizedOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, return, walkInRowOrder, (, visitor, ), ;]
[., end, (, ), ;, }, public, T, walkInOptimizedOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, return, walkInRowOrder]
[;, }, public, T, walkInOptimizedOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, return, walkInRowOrder, (, visitor, ), ;]
[), ;, }, public, T, walkInOptimizedOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, return, walkInRowOrder, (, visitor, )]
[;, }, public, T, walkInOptimizedOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ,, final, int, startRow, ,, final, int, endRow]
[), ;, }, public, T, walkInOptimizedOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ,, final, int, startRow, ,, final, int]
[;, }, public, T, walkInOptimizedOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ,, final, int, startRow, ,, final, int, endRow]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, }, public, T, walkInOptimizedOrder, (, final, FieldMatrixPreservingVisitor, <, T, >]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, }, public, T, walkInOptimizedOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ,]
[,, startColumn, ,, endColumn, ), ;, }, public, T, walkInOptimizedOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ,, final, int]
[,, endColumn, ), ;, }, public, T, walkInOptimizedOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ,, final, int, startRow, ,]
[), ;, }, public, T, walkInOptimizedOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ,, final, int, startRow, ,, final, int]
[;, }, @, Override, public, String, toString, (, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final, int]
[,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, }, @, Override, public, String, toString, (, ), {, final]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, }, @, Override, public, String, toString, (, ), {, final, int, nRows]
[,, startColumn, ,, endColumn, ), ;, }, @, Override, public, String, toString, (, ), {, final, int, nRows, =, getRowDimension]
[,, endColumn, ), ;, }, @, Override, public, String, toString, (, ), {, final, int, nRows, =, getRowDimension, (, )]
[), ;, }, @, Override, public, String, toString, (, ), {, final, int, nRows, =, getRowDimension, (, ), ;, final]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, final, StringBuffer, res, =, new, StringBuffer, (, ), ;, String, fullClassName]
[;, final, StringBuffer, res, =, new, StringBuffer, (, ), ;, String, fullClassName, =, getClass, (, ), ., getName, (, )]
[;, String, fullClassName, =, getClass, (, ), ., getName, (, ), ;, String, shortClassName, =, fullClassName, ., substring, (, fullClassName]
[;, String, shortClassName, =, fullClassName, ., substring, (, fullClassName, ., lastIndexOf, (, '.', ), +, 1, ), ;, res, .]
[., getName, (, ), ;, String, shortClassName, =, fullClassName, ., substring, (, fullClassName, ., lastIndexOf, (, '.', ), +, 1]
[;, res, ., append, (, shortClassName, ), ., append, (, "{", ), ;, for, (, int, i, =, 0, ;]
[., substring, (, fullClassName, ., lastIndexOf, (, '.', ), +, 1, ), ;, res, ., append, (, shortClassName, ), .]
[), ;, res, ., append, (, shortClassName, ), ., append, (, "{", ), ;, for, (, int, i, =, 0]
[+, 1, ), ;, res, ., append, (, shortClassName, ), ., append, (, "{", ), ;, for, (, int, i]
[., lastIndexOf, (, '.', ), +, 1, ), ;, res, ., append, (, shortClassName, ), ., append, (, "{", )]
[), +, 1, ), ;, res, ., append, (, shortClassName, ), ., append, (, "{", ), ;, for, (, int]
[), ;, res, ., append, (, shortClassName, ), ., append, (, "{", ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, if, (, i, >]
[., append, (, "{", ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, )]
[., append, (, shortClassName, ), ., append, (, "{", ), ;, for, (, int, i, =, 0, ;, i, <]
[), ., append, (, "{", ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i]
[), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, if, (, i]
[;, i, <, nRows, ;, ++, i, ), {, if, (, i, >, 0, ), {, res, ., append, (]
[;, ++, i, ), {, if, (, i, >, 0, ), {, res, ., append, (, ",", ), ;, }]
[<, nRows, ;, ++, i, ), {, if, (, i, >, 0, ), {, res, ., append, (, ",", )]
[;, ++, i, ), {, if, (, i, >, 0, ), {, res, ., append, (, ",", ), ;, }]
[), {, if, (, i, >, 0, ), {, res, ., append, (, ",", ), ;, }, res, ., append]
[), {, if, (, i, >, 0, ), {, res, ., append, (, ",", ), ;, }, res, ., append]
[), {, res, ., append, (, ",", ), ;, }, res, ., append, (, "{", ), ;, for, (, int]
[>, 0, ), {, res, ., append, (, ",", ), ;, }, res, ., append, (, "{", ), ;, for]
[), {, res, ., append, (, ",", ), ;, }, res, ., append, (, "{", ), ;, for, (, int]
[;, }, res, ., append, (, "{", ), ;, for, (, int, j, =, 0, ;, j, <, nCols, ;]
[., append, (, ",", ), ;, }, res, ., append, (, "{", ), ;, for, (, int, j, =, 0]
[), ;, }, res, ., append, (, "{", ), ;, for, (, int, j, =, 0, ;, j, <, nCols]
[;, for, (, int, j, =, 0, ;, j, <, nCols, ;, ++, j, ), {, if, (, j, >]
[., append, (, "{", ), ;, for, (, int, j, =, 0, ;, j, <, nCols, ;, ++, j, )]
[), ;, for, (, int, j, =, 0, ;, j, <, nCols, ;, ++, j, ), {, if, (, j]
[;, j, <, nCols, ;, ++, j, ), {, if, (, j, >, 0, ), {, res, ., append, (]
[;, ++, j, ), {, if, (, j, >, 0, ), {, res, ., append, (, ",", ), ;, }]
[<, nCols, ;, ++, j, ), {, if, (, j, >, 0, ), {, res, ., append, (, ",", )]
[;, ++, j, ), {, if, (, j, >, 0, ), {, res, ., append, (, ",", ), ;, }]
[), {, if, (, j, >, 0, ), {, res, ., append, (, ",", ), ;, }, res, ., append]
[), {, if, (, j, >, 0, ), {, res, ., append, (, ",", ), ;, }, res, ., append]
[), {, res, ., append, (, ",", ), ;, }, res, ., append, (, getEntry, (, i, ,, j, )]
[>, 0, ), {, res, ., append, (, ",", ), ;, }, res, ., append, (, getEntry, (, i, ,]
[), {, res, ., append, (, ",", ), ;, }, res, ., append, (, getEntry, (, i, ,, j, )]
[;, }, res, ., append, (, getEntry, (, i, ,, j, ), ), ;, }, res, ., append, (, "}"]
[., append, (, ",", ), ;, }, res, ., append, (, getEntry, (, i, ,, j, ), ), ;, }]
[), ;, }, res, ., append, (, getEntry, (, i, ,, j, ), ), ;, }, res, ., append, (]
[;, }, res, ., append, (, "}", ), ;, }, res, ., append, (, "}", ), ;, return, res, .]
[., append, (, getEntry, (, i, ,, j, ), ), ;, }, res, ., append, (, "}", ), ;, }]
[), ;, }, res, ., append, (, "}", ), ;, }, res, ., append, (, "}", ), ;, return, res]
[,, j, ), ), ;, }, res, ., append, (, "}", ), ;, }, res, ., append, (, "}", )]
[), ), ;, }, res, ., append, (, "}", ), ;, }, res, ., append, (, "}", ), ;, return]
[;, }, res, ., append, (, "}", ), ;, return, res, ., toString, (, ), ;, }, @, Override, public]
[., append, (, "}", ), ;, }, res, ., append, (, "}", ), ;, return, res, ., toString, (, )]
[), ;, }, res, ., append, (, "}", ), ;, return, res, ., toString, (, ), ;, }, @, Override]
[;, return, res, ., toString, (, ), ;, }, @, Override, public, boolean, equals, (, final, Object, object, ), {]
[., append, (, "}", ), ;, return, res, ., toString, (, ), ;, }, @, Override, public, boolean, equals, (]
[), ;, return, res, ., toString, (, ), ;, }, @, Override, public, boolean, equals, (, final, Object, object, )]
[;, }, @, Override, public, boolean, equals, (, final, Object, object, ), {, if, (, object, ==, this, ), {]
[., toString, (, ), ;, }, @, Override, public, boolean, equals, (, final, Object, object, ), {, if, (, object]
[), {, return, true, ;, }, if, (, object, instanceof, FieldMatrix, <, ?, >, ==, false, ), {, return, false]
[==, this, ), {, return, true, ;, }, if, (, object, instanceof, FieldMatrix, <, ?, >, ==, false, ), {]
[), {, return, true, ;, }, if, (, object, instanceof, FieldMatrix, <, ?, >, ==, false, ), {, return, false]
[;, }, if, (, object, instanceof, FieldMatrix, <, ?, >, ==, false, ), {, return, false, ;, }, FieldMatrix, <]
[), {, return, false, ;, }, FieldMatrix, <, ?, >, m, =, (, FieldMatrix, <, ?, >, ), object, ;]
[==, false, ), {, return, false, ;, }, FieldMatrix, <, ?, >, m, =, (, FieldMatrix, <, ?, >, )]
[instanceof, FieldMatrix, <, ?, >, ==, false, ), {, return, false, ;, }, FieldMatrix, <, ?, >, m, =, (]
[), {, return, false, ;, }, FieldMatrix, <, ?, >, m, =, (, FieldMatrix, <, ?, >, ), object, ;]
[;, }, FieldMatrix, <, ?, >, m, =, (, FieldMatrix, <, ?, >, ), object, ;, final, int, nRows, =]
[;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, m]
[;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, m]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, m, ., getColumnDimension, (, ), !=, nCols, ||, m]
[;, if, (, m, ., getColumnDimension, (, ), !=, nCols, ||, m, ., getRowDimension, (, ), !=, nRows, ), {]
[), {, return, false, ;, }, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, )]
[||, m, ., getRowDimension, (, ), !=, nRows, ), {, return, false, ;, }, for, (, int, row, =, 0]
[!=, nCols, ||, m, ., getRowDimension, (, ), !=, nRows, ), {, return, false, ;, }, for, (, int, row]
[., getColumnDimension, (, ), !=, nCols, ||, m, ., getRowDimension, (, ), !=, nRows, ), {, return, false, ;, }]
[||, m, ., getRowDimension, (, ), !=, nRows, ), {, return, false, ;, }, for, (, int, row, =, 0]
[), {, return, false, ;, }, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, )]
[!=, nRows, ), {, return, false, ;, }, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++]
[., getRowDimension, (, ), !=, nRows, ), {, return, false, ;, }, for, (, int, row, =, 0, ;, row]
[), {, return, false, ;, }, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, )]
[;, }, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int]
[;, row, <, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {]
[<, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {]
[), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, if, (, !]
[), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, if, (, !]
[;, col, <, nCols, ;, ++, col, ), {, if, (, !, getEntry, (, row, ,, col, ), ., equals]
[;, ++, col, ), {, if, (, !, getEntry, (, row, ,, col, ), ., equals, (, m, ., getEntry]
[<, nCols, ;, ++, col, ), {, if, (, !, getEntry, (, row, ,, col, ), ., equals, (, m]
[;, ++, col, ), {, if, (, !, getEntry, (, row, ,, col, ), ., equals, (, m, ., getEntry]
[), {, if, (, !, getEntry, (, row, ,, col, ), ., equals, (, m, ., getEntry, (, row, ,]
[), {, if, (, !, getEntry, (, row, ,, col, ), ., equals, (, m, ., getEntry, (, row, ,]
[), {, return, false, ;, }, }, }, return, true, ;, }, @, Override, public, int, hashCode, (, ), {]
[), {, return, false, ;, }, }, }, return, true, ;, }, @, Override, public, int, hashCode, (, ), {]
[., equals, (, m, ., getEntry, (, row, ,, col, ), ), ), {, return, false, ;, }, }, }]
[,, col, ), ., equals, (, m, ., getEntry, (, row, ,, col, ), ), ), {, return, false, ;]
[), ., equals, (, m, ., getEntry, (, row, ,, col, ), ), ), {, return, false, ;, }, }]
[), ), {, return, false, ;, }, }, }, return, true, ;, }, @, Override, public, int, hashCode, (, )]
[., getEntry, (, row, ,, col, ), ), ), {, return, false, ;, }, }, }, return, true, ;, }]
[,, col, ), ), ), {, return, false, ;, }, }, }, return, true, ;, }, @, Override, public, int]
[), ), ), {, return, false, ;, }, }, }, return, true, ;, }, @, Override, public, int, hashCode, (]
[;, }, }, }, return, true, ;, }, @, Override, public, int, hashCode, (, ), {, int, ret, =, 322562]
[;, }, @, Override, public, int, hashCode, (, ), {, int, ret, =, 322562, ;, final, int, nRows, =, getRowDimension]
[;, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, ret, =, ret]
[;, final, int, nCols, =, getColumnDimension, (, ), ;, ret, =, ret, *, 31, +, nRows, ;, ret, =, ret]
[;, ret, =, ret, *, 31, +, nRows, ;, ret, =, ret, *, 31, +, nCols, ;, for, (, int]
[=, ret, *, 31, +, nRows, ;, ret, =, ret, *, 31, +, nCols, ;, for, (, int, row, =]
[;, ret, =, ret, *, 31, +, nCols, ;, for, (, int, row, =, 0, ;, row, <, nRows, ;]
[+, nRows, ;, ret, =, ret, *, 31, +, nCols, ;, for, (, int, row, =, 0, ;, row, <]
[*, 31, +, nRows, ;, ret, =, ret, *, 31, +, nCols, ;, for, (, int, row, =, 0, ;]
[+, nRows, ;, ret, =, ret, *, 31, +, nCols, ;, for, (, int, row, =, 0, ;, row, <]
[;, ret, =, ret, *, 31, +, nCols, ;, for, (, int, row, =, 0, ;, row, <, nRows, ;]
[=, ret, *, 31, +, nCols, ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row]
[;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int, col]
[+, nCols, ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (]
[*, 31, +, nCols, ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {]
[+, nCols, ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (]
[;, for, (, int, row, =, 0, ;, row, <, nRows, ;, ++, row, ), {, for, (, int, col]
[;, row, <, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {]
[<, nRows, ;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col]
[;, ++, row, ), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {]
[), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, ret, =, ret]
[), {, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, ret, =, ret]
[;, col, <, nCols, ;, ++, col, ), {, ret, =, ret, *, 31, +, (, 11, *, (, row]
[;, ++, col, ), {, ret, =, ret, *, 31, +, (, 11, *, (, row, +, 1, ), +]
[<, nCols, ;, ++, col, ), {, ret, =, ret, *, 31, +, (, 11, *, (, row, +, 1]
[;, ++, col, ), {, ret, =, ret, *, 31, +, (, 11, *, (, row, +, 1, ), +]
[), {, ret, =, ret, *, 31, +, (, 11, *, (, row, +, 1, ), +, 17, *, (]
[), {, ret, =, ret, *, 31, +, (, 11, *, (, row, +, 1, ), +, 17, *, (]
[=, ret, *, 31, +, (, 11, *, (, row, +, 1, ), +, 17, *, (, col, +, 1]
[;, }, }, return, ret, ;, }, protected, void, checkRowIndex, (, final, int, row, ), throws, OutOfRangeException, {, if, (]
[+, (, 11, *, (, row, +, 1, ), +, 17, *, (, col, +, 1, ), ), *, getEntry]
[*, 31, +, (, 11, *, (, row, +, 1, ), +, 17, *, (, col, +, 1, ), )]
[+, (, 11, *, (, row, +, 1, ), +, 17, *, (, col, +, 1, ), ), *, getEntry]
[;, }, }, return, ret, ;, }, protected, void, checkRowIndex, (, final, int, row, ), throws, OutOfRangeException, {, if, (]
[*, getEntry, (, row, ,, col, ), ., hashCode, (, ), ;, }, }, return, ret, ;, }, protected, void]
[), *, getEntry, (, row, ,, col, ), ., hashCode, (, ), ;, }, }, return, ret, ;, }, protected]
[+, 17, *, (, col, +, 1, ), ), *, getEntry, (, row, ,, col, ), ., hashCode, (, )]
[*, (, row, +, 1, ), +, 17, *, (, col, +, 1, ), ), *, getEntry, (, row, ,]
[+, 17, *, (, col, +, 1, ), ), *, getEntry, (, row, ,, col, ), ., hashCode, (, )]
[), +, 17, *, (, col, +, 1, ), ), *, getEntry, (, row, ,, col, ), ., hashCode, (]
[+, 1, ), +, 17, *, (, col, +, 1, ), ), *, getEntry, (, row, ,, col, ), .]
[), +, 17, *, (, col, +, 1, ), ), *, getEntry, (, row, ,, col, ), ., hashCode, (]
[), *, getEntry, (, row, ,, col, ), ., hashCode, (, ), ;, }, }, return, ret, ;, }, protected]
[*, (, col, +, 1, ), ), *, getEntry, (, row, ,, col, ), ., hashCode, (, ), ;, }]
[), *, getEntry, (, row, ,, col, ), ., hashCode, (, ), ;, }, }, return, ret, ;, }, protected]
[), ), *, getEntry, (, row, ,, col, ), ., hashCode, (, ), ;, }, }, return, ret, ;, }]
[+, 1, ), ), *, getEntry, (, row, ,, col, ), ., hashCode, (, ), ;, }, }, return, ret]
[), ), *, getEntry, (, row, ,, col, ), ., hashCode, (, ), ;, }, }, return, ret, ;, }]
[;, }, }, return, ret, ;, }, protected, void, checkRowIndex, (, final, int, row, ), throws, OutOfRangeException, {, if, (]
[., hashCode, (, ), ;, }, }, return, ret, ;, }, protected, void, checkRowIndex, (, final, int, row, ), throws]
[,, col, ), ., hashCode, (, ), ;, }, }, return, ret, ;, }, protected, void, checkRowIndex, (, final, int]
[), ., hashCode, (, ), ;, }, }, return, ret, ;, }, protected, void, checkRowIndex, (, final, int, row, )]
[;, }, protected, void, checkRowIndex, (, final, int, row, ), throws, OutOfRangeException, {, if, (, row, <, 0, ||, row]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,, row, ,, 0, ,, getRowDimension, (, ), -, 1, )]
[||, row, >=, getRowDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,, row, ,, 0, ,]
[<, 0, ||, row, >=, getRowDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,, row, ,]
[||, row, >=, getRowDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,, row, ,, 0, ,]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,, row, ,, 0, ,, getRowDimension, (, ), -, 1, )]
[>=, getRowDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,, row, ,, 0, ,, getRowDimension, (]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,, row, ,, 0, ,, getRowDimension, (, ), -, 1, )]
[;, }, }, protected, void, checkColumnIndex, (, final, int, column, ), throws, OutOfRangeException, {, if, (, column, <, 0, ||]
[,, row, ,, 0, ,, getRowDimension, (, ), -, 1, ), ;, }, }, protected, void, checkColumnIndex, (, final, int]
[., ROW_INDEX, ,, row, ,, 0, ,, getRowDimension, (, ), -, 1, ), ;, }, }, protected, void, checkColumnIndex, (]
[,, 0, ,, getRowDimension, (, ), -, 1, ), ;, }, }, protected, void, checkColumnIndex, (, final, int, column, )]
[,, getRowDimension, (, ), -, 1, ), ;, }, }, protected, void, checkColumnIndex, (, final, int, column, ), throws, OutOfRangeException]
[), ;, }, }, protected, void, checkColumnIndex, (, final, int, column, ), throws, OutOfRangeException, {, if, (, column, <, 0]
[-, 1, ), ;, }, }, protected, void, checkColumnIndex, (, final, int, column, ), throws, OutOfRangeException, {, if, (, column]
[), ;, }, }, protected, void, checkColumnIndex, (, final, int, column, ), throws, OutOfRangeException, {, if, (, column, <, 0]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,, column, ,, 0, ,, getColumnDimension, (, ), -, 1, )]
[||, column, >=, getColumnDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,, column, ,, 0, ,]
[<, 0, ||, column, >=, getColumnDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,, column, ,]
[||, column, >=, getColumnDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,, column, ,, 0, ,]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,, column, ,, 0, ,, getColumnDimension, (, ), -, 1, )]
[>=, getColumnDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,, column, ,, 0, ,, getColumnDimension, (]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,, column, ,, 0, ,, getColumnDimension, (, ), -, 1, )]
[;, }, }, protected, void, checkSubMatrixIndex, (, final, int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final]
[,, column, ,, 0, ,, getColumnDimension, (, ), -, 1, ), ;, }, }, protected, void, checkSubMatrixIndex, (, final, int]
[., COLUMN_INDEX, ,, column, ,, 0, ,, getColumnDimension, (, ), -, 1, ), ;, }, }, protected, void, checkSubMatrixIndex, (]
[,, 0, ,, getColumnDimension, (, ), -, 1, ), ;, }, }, protected, void, checkSubMatrixIndex, (, final, int, startRow, ,]
[,, getColumnDimension, (, ), -, 1, ), ;, }, }, protected, void, checkSubMatrixIndex, (, final, int, startRow, ,, final, int]
[), ;, }, }, protected, void, checkSubMatrixIndex, (, final, int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,]
[-, 1, ), ;, }, }, protected, void, checkSubMatrixIndex, (, final, int, startRow, ,, final, int, endRow, ,, final, int]
[), ;, }, }, protected, void, checkSubMatrixIndex, (, final, int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,]
[;, checkRowIndex, (, endRow, ), ;, if, (, endRow, <, startRow, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW]
[), ;, checkRowIndex, (, endRow, ), ;, if, (, endRow, <, startRow, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, .]
[;, if, (, endRow, <, startRow, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, endRow, ,, startRow, ,]
[), ;, if, (, endRow, <, startRow, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, endRow, ,, startRow]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, endRow, ,, startRow, ,, true, ), ;, }, checkColumnIndex, (]
[<, startRow, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, endRow, ,, startRow, ,, true, ), ;, }]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, endRow, ,, startRow, ,, true, ), ;, }, checkColumnIndex, (]
[;, }, checkColumnIndex, (, startColumn, ), ;, checkColumnIndex, (, endColumn, ), ;, if, (, endColumn, <, startColumn, ), {, throw]
[,, endRow, ,, startRow, ,, true, ), ;, }, checkColumnIndex, (, startColumn, ), ;, checkColumnIndex, (, endColumn, ), ;, if]
[., INITIAL_ROW_AFTER_FINAL_ROW, ,, endRow, ,, startRow, ,, true, ), ;, }, checkColumnIndex, (, startColumn, ), ;, checkColumnIndex, (, endColumn, )]
[,, startRow, ,, true, ), ;, }, checkColumnIndex, (, startColumn, ), ;, checkColumnIndex, (, endColumn, ), ;, if, (, endColumn]
[,, true, ), ;, }, checkColumnIndex, (, startColumn, ), ;, checkColumnIndex, (, endColumn, ), ;, if, (, endColumn, <, startColumn]
[), ;, }, checkColumnIndex, (, startColumn, ), ;, checkColumnIndex, (, endColumn, ), ;, if, (, endColumn, <, startColumn, ), {]
[;, checkColumnIndex, (, endColumn, ), ;, if, (, endColumn, <, startColumn, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_COLUMN_AFTER_FINAL_COLUMN]
[), ;, checkColumnIndex, (, endColumn, ), ;, if, (, endColumn, <, startColumn, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, .]
[;, if, (, endColumn, <, startColumn, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_COLUMN_AFTER_FINAL_COLUMN, ,, endColumn, ,, startColumn, ,]
[), ;, if, (, endColumn, <, startColumn, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_COLUMN_AFTER_FINAL_COLUMN, ,, endColumn, ,, startColumn]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_COLUMN_AFTER_FINAL_COLUMN, ,, endColumn, ,, startColumn, ,, true, ), ;, }, }, protected]
[<, startColumn, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_COLUMN_AFTER_FINAL_COLUMN, ,, endColumn, ,, startColumn, ,, true, ), ;, }]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_COLUMN_AFTER_FINAL_COLUMN, ,, endColumn, ,, startColumn, ,, true, ), ;, }, }, protected]
[;, }, }, protected, void, checkSubMatrixIndex, (, final, int, [, ], selectedRows, ,, final, int, [, ], selectedColumns, ), throws]
[,, endColumn, ,, startColumn, ,, true, ), ;, }, }, protected, void, checkSubMatrixIndex, (, final, int, [, ], selectedRows, ,]
[., INITIAL_COLUMN_AFTER_FINAL_COLUMN, ,, endColumn, ,, startColumn, ,, true, ), ;, }, }, protected, void, checkSubMatrixIndex, (, final, int, [, ]]
[,, startColumn, ,, true, ), ;, }, }, protected, void, checkSubMatrixIndex, (, final, int, [, ], selectedRows, ,, final, int]
[,, true, ), ;, }, }, protected, void, checkSubMatrixIndex, (, final, int, [, ], selectedRows, ,, final, int, [, ]]
[), ;, }, }, protected, void, checkSubMatrixIndex, (, final, int, [, ], selectedRows, ,, final, int, [, ], selectedColumns, )]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, selectedRows, ., length, ==, 0, ||, selectedColumns, ., length]
[||, selectedColumns, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, selectedRows, ., length, ==, 0]
[==, null, ||, selectedColumns, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, selectedRows, ., length]
[||, selectedColumns, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, selectedRows, ., length, ==, 0]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, selectedRows, ., length, ==, 0, ||, selectedColumns, ., length]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, selectedRows, ., length, ==, 0, ||, selectedColumns]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, selectedRows, ., length, ==, 0, ||, selectedColumns, ., length]
[;, }, if, (, selectedRows, ., length, ==, 0, ||, selectedColumns, ., length, ==, 0, ), {, throw, new, NoDataException]
[), {, throw, new, NoDataException, (, ), ;, }, for, (, final, int, row, :, selectedRows, ), {, checkRowIndex, (]
[||, selectedColumns, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, for, (, final, int, row]
[==, 0, ||, selectedColumns, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, for, (, final]
[., length, ==, 0, ||, selectedColumns, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, for]
[||, selectedColumns, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, for, (, final, int, row]
[), {, throw, new, NoDataException, (, ), ;, }, for, (, final, int, row, :, selectedRows, ), {, checkRowIndex, (]
[==, 0, ), {, throw, new, NoDataException, (, ), ;, }, for, (, final, int, row, :, selectedRows, ), {]
[., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, for, (, final, int, row, :, selectedRows]
[), {, throw, new, NoDataException, (, ), ;, }, for, (, final, int, row, :, selectedRows, ), {, checkRowIndex, (]
[;, }, for, (, final, int, row, :, selectedRows, ), {, checkRowIndex, (, row, ), ;, }, for, (, final]
[), {, checkRowIndex, (, row, ), ;, }, for, (, final, int, column, :, selectedColumns, ), {, checkColumnIndex, (, column]
[;, }, for, (, final, int, column, :, selectedColumns, ), {, checkColumnIndex, (, column, ), ;, }, }, protected, void]
[), ;, }, for, (, final, int, column, :, selectedColumns, ), {, checkColumnIndex, (, column, ), ;, }, }, protected]
[), {, checkColumnIndex, (, column, ), ;, }, }, protected, void, checkAdditionCompatible, (, final, FieldMatrix, <, T, >, m, )]
[;, }, }, protected, void, checkAdditionCompatible, (, final, FieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {, if, (, (]
[), ;, }, }, protected, void, checkAdditionCompatible, (, final, FieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {, if, (]
[), {, throw, new, MatrixDimensionMismatchException, (, m, ., getRowDimension, (, ), ,, m, ., getColumnDimension, (, ), ,, getRowDimension, (]
[||, (, getColumnDimension, (, ), !=, m, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (, m, .]
[), ||, (, getColumnDimension, (, ), !=, m, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (, m]
[!=, m, ., getRowDimension, (, ), ), ||, (, getColumnDimension, (, ), !=, m, ., getColumnDimension, (, ), ), )]
[), ||, (, getColumnDimension, (, ), !=, m, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (, m]
[., getRowDimension, (, ), ), ||, (, getColumnDimension, (, ), !=, m, ., getColumnDimension, (, ), ), ), {, throw]
[), {, throw, new, MatrixDimensionMismatchException, (, m, ., getRowDimension, (, ), ,, m, ., getColumnDimension, (, ), ,, getRowDimension, (]
[), ), {, throw, new, MatrixDimensionMismatchException, (, m, ., getRowDimension, (, ), ,, m, ., getColumnDimension, (, ), ,, getRowDimension]
[!=, m, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (, m, ., getRowDimension, (, ), ,, m]
[), ), {, throw, new, MatrixDimensionMismatchException, (, m, ., getRowDimension, (, ), ,, m, ., getColumnDimension, (, ), ,, getRowDimension]
[., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (, m, ., getRowDimension, (, ), ,, m, ., getColumnDimension]
[;, }, }, protected, void, checkSubtractionCompatible, (, final, FieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {, if, (, (]
[,, m, ., getColumnDimension, (, ), ,, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, }, }, protected, void]
[., getRowDimension, (, ), ,, m, ., getColumnDimension, (, ), ,, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;]
[,, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, }, }, protected, void, checkSubtractionCompatible, (, final, FieldMatrix, <, T]
[., getColumnDimension, (, ), ,, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, }, }, protected, void, checkSubtractionCompatible, (]
[,, getColumnDimension, (, ), ), ;, }, }, protected, void, checkSubtractionCompatible, (, final, FieldMatrix, <, T, >, m, ), throws]
[), ;, }, }, protected, void, checkSubtractionCompatible, (, final, FieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {, if, (]
[), {, throw, new, MatrixDimensionMismatchException, (, m, ., getRowDimension, (, ), ,, m, ., getColumnDimension, (, ), ,, getRowDimension, (]
[||, (, getColumnDimension, (, ), !=, m, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (, m, .]
[), ||, (, getColumnDimension, (, ), !=, m, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (, m]
[!=, m, ., getRowDimension, (, ), ), ||, (, getColumnDimension, (, ), !=, m, ., getColumnDimension, (, ), ), )]
[), ||, (, getColumnDimension, (, ), !=, m, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (, m]
[., getRowDimension, (, ), ), ||, (, getColumnDimension, (, ), !=, m, ., getColumnDimension, (, ), ), ), {, throw]
[), {, throw, new, MatrixDimensionMismatchException, (, m, ., getRowDimension, (, ), ,, m, ., getColumnDimension, (, ), ,, getRowDimension, (]
[), ), {, throw, new, MatrixDimensionMismatchException, (, m, ., getRowDimension, (, ), ,, m, ., getColumnDimension, (, ), ,, getRowDimension]
[!=, m, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (, m, ., getRowDimension, (, ), ,, m]
[), ), {, throw, new, MatrixDimensionMismatchException, (, m, ., getRowDimension, (, ), ,, m, ., getColumnDimension, (, ), ,, getRowDimension]
[., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (, m, ., getRowDimension, (, ), ,, m, ., getColumnDimension]
[;, }, }, protected, void, checkMultiplicationCompatible, (, final, FieldMatrix, <, T, >, m, ), throws, DimensionMismatchException, {, if, (, getColumnDimension]
[,, m, ., getColumnDimension, (, ), ,, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, }, }, protected, void]
[., getRowDimension, (, ), ,, m, ., getColumnDimension, (, ), ,, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;]
[,, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, }, }, protected, void, checkMultiplicationCompatible, (, final, FieldMatrix, <, T]
[., getColumnDimension, (, ), ,, getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, }, }, protected, void, checkMultiplicationCompatible, (]
[,, getColumnDimension, (, ), ), ;, }, }, protected, void, checkMultiplicationCompatible, (, final, FieldMatrix, <, T, >, m, ), throws]
[), ;, }, }, protected, void, checkMultiplicationCompatible, (, final, FieldMatrix, <, T, >, m, ), throws, DimensionMismatchException, {, if, (]
[), {, throw, new, DimensionMismatchException, (, m, ., getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, }, }, }]
[!=, m, ., getRowDimension, (, ), ), {, throw, new, DimensionMismatchException, (, m, ., getRowDimension, (, ), ,, getColumnDimension, (]
[), {, throw, new, DimensionMismatchException, (, m, ., getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, }, }, }]
[., getRowDimension, (, ), ), {, throw, new, DimensionMismatchException, (, m, ., getRowDimension, (, ), ,, getColumnDimension, (, ), )]
[;, }, }, }]
[,, getColumnDimension, (, ), ), ;, }, }, }]
[., getRowDimension, (, ), ,, getColumnDimension, (, ), ), ;, }, }, }]
[), ;, }, }, }]
