[{, private, final, AbstractCompiler, compiler, ;, private, final, Set, <, Node, >, tryNodesContainingReturnStatements, ;, RemoveTryCatch, (, AbstractCompiler, compiler, ), {]
[{, private, final, AbstractCompiler, compiler, ;, private, final, Set, <, Node, >, tryNodesContainingReturnStatements, ;, RemoveTryCatch, (, AbstractCompiler, compiler, ), {]
[compiler, ;, private, final, Set, <, Node, >, tryNodesContainingReturnStatements, ;, RemoveTryCatch, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[private, final, Set, <, Node, >, tryNodesContainingReturnStatements, ;, RemoveTryCatch, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[private, final, Set, <, Node, >, tryNodesContainingReturnStatements, ;, RemoveTryCatch, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[Node, >, tryNodesContainingReturnStatements, ;, RemoveTryCatch, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., tryNodesContainingReturnStatements, =]
[<, Node, >, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[<, Node, >, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., TRY, :, JSDocInfo, info, =]
[parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., TRY, :, JSDocInfo, info, =]
[(, ), ), {, case, Token, ., TRY, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[(, ), ), {, case, Token, ., TRY, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[(, ), ), {, case, Token, ., TRY, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[), {, case, Token, ., TRY, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=]
[case, Token, ., TRY, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[case, Token, ., TRY, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[;, if, (, info, !=, null, &&, info, ., shouldPreserveTry, (, ), ), {, return, ;, }, Node, tryBlock, =]
[;, if, (, info, !=, null, &&, info, ., shouldPreserveTry, (, ), ), {, return, ;, }, Node, tryBlock, =]
[shouldPreserveTry, (, ), ), {, return, ;, }, Node, tryBlock, =, n, ., getFirstChild, (, ), ;, Node, catchBlock, =]
[shouldPreserveTry, (, ), ), {, return, ;, }, Node, tryBlock, =, n, ., getFirstChild, (, ), ;, Node, catchBlock, =]
[tryBlock, =, n, ., getFirstChild, (, ), ;, Node, catchBlock, =, tryBlock, ., getNext, (, ), ;, Node, finallyBlock, =]
[tryBlock, =, n, ., getFirstChild, (, ), ;, Node, catchBlock, =, tryBlock, ., getNext, (, ), ;, Node, finallyBlock, =]
[tryBlock, =, n, ., getFirstChild, (, ), ;, Node, catchBlock, =, tryBlock, ., getNext, (, ), ;, Node, finallyBlock, =]
[n, ., getFirstChild, (, ), ;, Node, catchBlock, =, tryBlock, ., getNext, (, ), ;, Node, finallyBlock, =, catchBlock, !=]
[getFirstChild, (, ), ;, Node, catchBlock, =, tryBlock, ., getNext, (, ), ;, Node, finallyBlock, =, catchBlock, !=, null, ?]
[getFirstChild, (, ), ;, Node, catchBlock, =, tryBlock, ., getNext, (, ), ;, Node, finallyBlock, =, catchBlock, !=, null, ?]
[=, tryBlock, ., getNext, (, ), ;, Node, finallyBlock, =, catchBlock, !=, null, ?, catchBlock, ., getNext, (, ), :]
[(, ), ;, Node, finallyBlock, =, catchBlock, !=, null, ?, catchBlock, ., getNext, (, ), :, null, ;, if, (]
[(, ), ;, Node, finallyBlock, =, catchBlock, !=, null, ?, catchBlock, ., getNext, (, ), :, null, ;, if, (]
[(, ), ;, Node, finallyBlock, =, catchBlock, !=, null, ?, catchBlock, ., getNext, (, ), :, null, ;, if, (]
[;, Node, finallyBlock, =, catchBlock, !=, null, ?, catchBlock, ., getNext, (, ), :, null, ;, if, (, finallyBlock, !=]
[finallyBlock, =, catchBlock, !=, null, ?, catchBlock, ., getNext, (, ), :, null, ;, if, (, finallyBlock, !=, null, &&]
[finallyBlock, =, catchBlock, !=, null, ?, catchBlock, ., getNext, (, ), :, null, ;, if, (, finallyBlock, !=, null, &&]
[null, ?, catchBlock, ., getNext, (, ), :, null, ;, if, (, finallyBlock, !=, null, &&, tryNodesContainingReturnStatements, ., contains, (]
[;, if, (, finallyBlock, !=, null, &&, tryNodesContainingReturnStatements, ., contains, (, n, ), ), {, return, ;, }, if, (]
[;, if, (, finallyBlock, !=, null, &&, tryNodesContainingReturnStatements, ., contains, (, n, ), ), {, return, ;, }, if, (]
[tryNodesContainingReturnStatements, ., contains, (, n, ), ), {, return, ;, }, if, (, catchBlock, ., hasOneChild, (, ), ), {]
[tryNodesContainingReturnStatements, ., contains, (, n, ), ), {, return, ;, }, if, (, catchBlock, ., hasOneChild, (, ), ), {]
[n, ), ), {, return, ;, }, if, (, catchBlock, ., hasOneChild, (, ), ), {, NodeUtil, ., redeclareVarsInsideBranch, (]
[return, ;, }, if, (, catchBlock, ., hasOneChild, (, ), ), {, NodeUtil, ., redeclareVarsInsideBranch, (, catchBlock, ), ;, }]
[return, ;, }, if, (, catchBlock, ., hasOneChild, (, ), ), {, NodeUtil, ., redeclareVarsInsideBranch, (, catchBlock, ), ;, }]
[{, NodeUtil, ., redeclareVarsInsideBranch, (, catchBlock, ), ;, }, n, ., detachChildren, (, ), ;, Node, block, ;, if, (]
[NodeUtil, ., redeclareVarsInsideBranch, (, catchBlock, ), ;, }, n, ., detachChildren, (, ), ;, Node, block, ;, if, (, !]
[NodeUtil, ., redeclareVarsInsideBranch, (, catchBlock, ), ;, }, n, ., detachChildren, (, ), ;, Node, block, ;, if, (, !]
[catchBlock, ), ;, }, n, ., detachChildren, (, ), ;, Node, block, ;, if, (, !, NodeUtil, ., isStatementBlock, (]
[n, ., detachChildren, (, ), ;, Node, block, ;, if, (, !, NodeUtil, ., isStatementBlock, (, parent, ), ), {]
[detachChildren, (, ), ;, Node, block, ;, if, (, !, NodeUtil, ., isStatementBlock, (, parent, ), ), {, block, =]
[detachChildren, (, ), ;, Node, block, ;, if, (, !, NodeUtil, ., isStatementBlock, (, parent, ), ), {, block, =]
[;, if, (, !, NodeUtil, ., isStatementBlock, (, parent, ), ), {, block, =, IR, ., block, (, ), ;]
[;, if, (, !, NodeUtil, ., isStatementBlock, (, parent, ), ), {, block, =, IR, ., block, (, ), ;]
[NodeUtil, ., isStatementBlock, (, parent, ), ), {, block, =, IR, ., block, (, ), ;, parent, ., replaceChild, (]
[isStatementBlock, (, parent, ), ), {, block, =, IR, ., block, (, ), ;, parent, ., replaceChild, (, n, ,]
[), ), {, block, =, IR, ., block, (, ), ;, parent, ., replaceChild, (, n, ,, block, ), ;]
[), ), {, block, =, IR, ., block, (, ), ;, parent, ., replaceChild, (, n, ,, block, ), ;]
[=, IR, ., block, (, ), ;, parent, ., replaceChild, (, n, ,, block, ), ;, block, ., addChildToFront, (]
[;, parent, ., replaceChild, (, n, ,, block, ), ;, block, ., addChildToFront, (, tryBlock, ), ;, }, else, {]
[;, parent, ., replaceChild, (, n, ,, block, ), ;, block, ., addChildToFront, (, tryBlock, ), ;, }, else, {]
[(, n, ,, block, ), ;, block, ., addChildToFront, (, tryBlock, ), ;, }, else, {, parent, ., replaceChild, (]
[,, block, ), ;, block, ., addChildToFront, (, tryBlock, ), ;, }, else, {, parent, ., replaceChild, (, n, ,]
[;, block, ., addChildToFront, (, tryBlock, ), ;, }, else, {, parent, ., replaceChild, (, n, ,, tryBlock, ), ;]
[., addChildToFront, (, tryBlock, ), ;, }, else, {, parent, ., replaceChild, (, n, ,, tryBlock, ), ;, block, =]
[;, }, else, {, parent, ., replaceChild, (, n, ,, tryBlock, ), ;, block, =, parent, ;, }, if, (]
[;, }, else, {, parent, ., replaceChild, (, n, ,, tryBlock, ), ;, block, =, parent, ;, }, if, (]
[else, {, parent, ., replaceChild, (, n, ,, tryBlock, ), ;, block, =, parent, ;, }, if, (, finallyBlock, !=]
[., replaceChild, (, n, ,, tryBlock, ), ;, block, =, parent, ;, }, if, (, finallyBlock, !=, null, ), {]
[., replaceChild, (, n, ,, tryBlock, ), ;, block, =, parent, ;, }, if, (, finallyBlock, !=, null, ), {]
[,, tryBlock, ), ;, block, =, parent, ;, }, if, (, finallyBlock, !=, null, ), {, block, ., addChildAfter, (]
[), ;, block, =, parent, ;, }, if, (, finallyBlock, !=, null, ), {, block, ., addChildAfter, (, finallyBlock, ,]
[parent, ;, }, if, (, finallyBlock, !=, null, ), {, block, ., addChildAfter, (, finallyBlock, ,, tryBlock, ), ;, }]
[parent, ;, }, if, (, finallyBlock, !=, null, ), {, block, ., addChildAfter, (, finallyBlock, ,, tryBlock, ), ;, }]
[{, block, ., addChildAfter, (, finallyBlock, ,, tryBlock, ), ;, }, compiler, ., reportCodeChange, (, ), ;, break, ;, case]
[{, block, ., addChildAfter, (, finallyBlock, ,, tryBlock, ), ;, }, compiler, ., reportCodeChange, (, ), ;, break, ;, case]
[tryBlock, ), ;, }, compiler, ., reportCodeChange, (, ), ;, break, ;, case, Token, ., RETURN, :, boolean, isInTryBlock, =]
[(, ), ;, break, ;, case, Token, ., RETURN, :, boolean, isInTryBlock, =, false, ;, for, (, Node, anc, =]
[;, break, ;, case, Token, ., RETURN, :, boolean, isInTryBlock, =, false, ;, for, (, Node, anc, =, parent, ;]
[;, break, ;, case, Token, ., RETURN, :, boolean, isInTryBlock, =, false, ;, for, (, Node, anc, =, parent, ;]
[;, break, ;, case, Token, ., RETURN, :, boolean, isInTryBlock, =, false, ;, for, (, Node, anc, =, parent, ;]
[;, case, Token, ., RETURN, :, boolean, isInTryBlock, =, false, ;, for, (, Node, anc, =, parent, ;, anc, !=]
[Token, ., RETURN, :, boolean, isInTryBlock, =, false, ;, for, (, Node, anc, =, parent, ;, anc, !=, null, &&]
[., RETURN, :, boolean, isInTryBlock, =, false, ;, for, (, Node, anc, =, parent, ;, anc, !=, null, &&, !]
[., RETURN, :, boolean, isInTryBlock, =, false, ;, for, (, Node, anc, =, parent, ;, anc, !=, null, &&, !]
[false, ;, for, (, Node, anc, =, parent, ;, anc, !=, null, &&, !, anc, ., isFunction, (, ), ;]
[for, (, Node, anc, =, parent, ;, anc, !=, null, &&, !, anc, ., isFunction, (, ), ;, anc, =]
[for, (, Node, anc, =, parent, ;, anc, !=, null, &&, !, anc, ., isFunction, (, ), ;, anc, =]
[null, &&, !, anc, ., isFunction, (, ), ;, anc, =, anc, ., getParent, (, ), ), {, if, (]
[null, &&, !, anc, ., isFunction, (, ), ;, anc, =, anc, ., getParent, (, ), ), {, if, (]
[), ;, anc, =, anc, ., getParent, (, ), ), {, if, (, anc, ., isTry, (, ), ), {]
[), ;, anc, =, anc, ., getParent, (, ), ), {, if, (, anc, ., isTry, (, ), ), {]
[anc, ., getParent, (, ), ), {, if, (, anc, ., isTry, (, ), ), {, tryNodesContainingReturnStatements, ., add, (]
