[MultivariateDifferentiableVectorFunction, problem, ;, public, StatisticalReferenceDataset, (, final, BufferedReader, in, ), throws, IOException, {, final, ArrayList, <, String, >, lines, =]
[final, ArrayList, <, String, >, lines, =, new, ArrayList, <, String, >, (, ), ;, for, (, String, line, =]
[final, ArrayList, <, String, >, lines, =, new, ArrayList, <, String, >, (, ), ;, for, (, String, line, =]
[=, new, ArrayList, <, String, >, (, ), ;, for, (, String, line, =, in, ., readLine, (, ), ;]
[=, new, ArrayList, <, String, >, (, ), ;, for, (, String, line, =, in, ., readLine, (, ), ;]
[ArrayList, <, String, >, (, ), ;, for, (, String, line, =, in, ., readLine, (, ), ;, line, !=]
[String, >, (, ), ;, for, (, String, line, =, in, ., readLine, (, ), ;, line, !=, null, ;]
[(, ), ;, for, (, String, line, =, in, ., readLine, (, ), ;, line, !=, null, ;, line, =]
[(, ), ;, for, (, String, line, =, in, ., readLine, (, ), ;, line, !=, null, ;, line, =]
[=, in, ., readLine, (, ), ;, line, !=, null, ;, line, =, in, ., readLine, (, ), ), {]
[=, in, ., readLine, (, ), ;, line, !=, null, ;, line, =, in, ., readLine, (, ), ), {]
[(, ), ;, line, !=, null, ;, line, =, in, ., readLine, (, ), ), {, lines, ., add, (]
[in, ., readLine, (, ), ), {, lines, ., add, (, line, ), ;, }, int, [, ], index, =]
[readLine, (, ), ), {, lines, ., add, (, line, ), ;, }, int, [, ], index, =, findLineNumbers, (]
[), ), {, lines, ., add, (, line, ), ;, }, int, [, ], index, =, findLineNumbers, (, "Data", ,]
[add, (, line, ), ;, }, int, [, ], index, =, findLineNumbers, (, "Data", ,, lines, ), ;, if, (]
[add, (, line, ), ;, }, int, [, ], index, =, findLineNumbers, (, "Data", ,, lines, ), ;, if, (]
[line, ), ;, }, int, [, ], index, =, findLineNumbers, (, "Data", ,, lines, ), ;, if, (, index, ==]
[int, [, ], index, =, findLineNumbers, (, "Data", ,, lines, ), ;, if, (, index, ==, null, ), {, throw]
[index, =, findLineNumbers, (, "Data", ,, lines, ), ;, if, (, index, ==, null, ), {, throw, new, AssertionError, (]
["Data", ,, lines, ), ;, if, (, index, ==, null, ), {, throw, new, AssertionError, (, "could not find line indices for data", ), ;, }]
["Data", ,, lines, ), ;, if, (, index, ==, null, ), {, throw, new, AssertionError, (, "could not find line indices for data", ), ;, }]
[;, if, (, index, ==, null, ), {, throw, new, AssertionError, (, "could not find line indices for data", ), ;, }, this, ., numObservations, =]
[;, if, (, index, ==, null, ), {, throw, new, AssertionError, (, "could not find line indices for data", ), ;, }, this, ., numObservations, =]
[;, if, (, index, ==, null, ), {, throw, new, AssertionError, (, "could not find line indices for data", ), ;, }, this, ., numObservations, =]
[;, if, (, index, ==, null, ), {, throw, new, AssertionError, (, "could not find line indices for data", ), ;, }, this, ., numObservations, =]
[(, index, ==, null, ), {, throw, new, AssertionError, (, "could not find line indices for data", ), ;, }, this, ., numObservations, =, index, []
[null, ), {, throw, new, AssertionError, (, "could not find line indices for data", ), ;, }, this, ., numObservations, =, index, [, 1, ], -]
[null, ), {, throw, new, AssertionError, (, "could not find line indices for data", ), ;, }, this, ., numObservations, =, index, [, 1, ], -]
[{, throw, new, AssertionError, (, "could not find line indices for data", ), ;, }, this, ., numObservations, =, index, [, 1, ], -, index, []
[AssertionError, (, "could not find line indices for data", ), ;, }, this, ., numObservations, =, index, [, 1, ], -, index, [, 0, ], +]
["could not find line indices for data", ), ;, }, this, ., numObservations, =, index, [, 1, ], -, index, [, 0, ], +, 1, ;]
["could not find line indices for data", ), ;, }, this, ., numObservations, =, index, [, 1, ], -, index, [, 0, ], +, 1, ;]
[this, ., numObservations, =, index, [, 1, ], -, index, [, 0, ], +, 1, ;, this, ., x, =]
[=, index, [, 1, ], -, index, [, 0, ], +, 1, ;, this, ., x, =, new, double, []
[=, index, [, 1, ], -, index, [, 0, ], +, 1, ;, this, ., x, =, new, double, []
[-, index, [, 0, ], +, 1, ;, this, ., x, =, new, double, [, this, ., numObservations, ], ;]
[-, index, [, 0, ], +, 1, ;, this, ., x, =, new, double, [, this, ., numObservations, ], ;]
[], +, 1, ;, this, ., x, =, new, double, [, this, ., numObservations, ], ;, this, ., y, =]
[;, this, ., x, =, new, double, [, this, ., numObservations, ], ;, this, ., y, =, new, double, []
[;, this, ., x, =, new, double, [, this, ., numObservations, ], ;, this, ., y, =, new, double, []
[numObservations, ], ;, this, ., y, =, new, double, [, this, ., numObservations, ], ;, for, (, int, i, =]
[;, this, ., y, =, new, double, [, this, ., numObservations, ], ;, for, (, int, i, =, 0, ;]
[;, this, ., y, =, new, double, [, this, ., numObservations, ], ;, for, (, int, i, =, 0, ;]
[., y, =, new, double, [, this, ., numObservations, ], ;, for, (, int, i, =, 0, ;, i, <]
[., y, =, new, double, [, this, ., numObservations, ], ;, for, (, int, i, =, 0, ;, i, <]
[double, [, this, ., numObservations, ], ;, for, (, int, i, =, 0, ;, i, <, this, ., numObservations, ;]
[double, [, this, ., numObservations, ], ;, for, (, int, i, =, 0, ;, i, <, this, ., numObservations, ;]
[(, int, i, =, 0, ;, i, <, this, ., numObservations, ;, i, ++, ), {, final, String, line, =]
[(, int, i, =, 0, ;, i, <, this, ., numObservations, ;, i, ++, ), {, final, String, line, =]
[0, ;, i, <, this, ., numObservations, ;, i, ++, ), {, final, String, line, =, lines, ., get, (]
[0, ;, i, <, this, ., numObservations, ;, i, ++, ), {, final, String, line, =, lines, ., get, (]
[0, ;, i, <, this, ., numObservations, ;, i, ++, ), {, final, String, line, =, lines, ., get, (]
[0, ;, i, <, this, ., numObservations, ;, i, ++, ), {, final, String, line, =, lines, ., get, (]
[i, <, this, ., numObservations, ;, i, ++, ), {, final, String, line, =, lines, ., get, (, index, []
[., numObservations, ;, i, ++, ), {, final, String, line, =, lines, ., get, (, index, [, 0, ], +]
[;, i, ++, ), {, final, String, line, =, lines, ., get, (, index, [, 0, ], +, i, -]
[lines, ., get, (, index, [, 0, ], +, i, -, 1, ), ;, final, String, [, ], tokens, =]
[lines, ., get, (, index, [, 0, ], +, i, -, 1, ), ;, final, String, [, ], tokens, =]
[lines, ., get, (, index, [, 0, ], +, i, -, 1, ), ;, final, String, [, ], tokens, =]
[+, i, -, 1, ), ;, final, String, [, ], tokens, =, line, ., trim, (, ), ., split, (]
[1, ), ;, final, String, [, ], tokens, =, line, ., trim, (, ), ., split, (, " ++", ), ;]
[1, ), ;, final, String, [, ], tokens, =, line, ., trim, (, ), ., split, (, " ++", ), ;]
[1, ), ;, final, String, [, ], tokens, =, line, ., trim, (, ), ., split, (, " ++", ), ;]
[String, [, ], tokens, =, line, ., trim, (, ), ., split, (, " ++", ), ;, this, ., y, []
[tokens, =, line, ., trim, (, ), ., split, (, " ++", ), ;, this, ., y, [, i, ], =]
[tokens, =, line, ., trim, (, ), ., split, (, " ++", ), ;, this, ., y, [, i, ], =]
[trim, (, ), ., split, (, " ++", ), ;, this, ., y, [, i, ], =, Double, ., parseDouble, (]
[trim, (, ), ., split, (, " ++", ), ;, this, ., y, [, i, ], =, Double, ., parseDouble, (]
[), ., split, (, " ++", ), ;, this, ., y, [, i, ], =, Double, ., parseDouble, (, tokens, []
[" ++", ), ;, this, ., y, [, i, ], =, Double, ., parseDouble, (, tokens, [, 0, ], ), ;]
[" ++", ), ;, this, ., y, [, i, ], =, Double, ., parseDouble, (, tokens, [, 0, ], ), ;]
[" ++", ), ;, this, ., y, [, i, ], =, Double, ., parseDouble, (, tokens, [, 0, ], ), ;]
[., y, [, i, ], =, Double, ., parseDouble, (, tokens, [, 0, ], ), ;, this, ., x, []
[i, ], =, Double, ., parseDouble, (, tokens, [, 0, ], ), ;, this, ., x, [, i, ], =]
[i, ], =, Double, ., parseDouble, (, tokens, [, 0, ], ), ;, this, ., x, [, i, ], =]
[., parseDouble, (, tokens, [, 0, ], ), ;, this, ., x, [, i, ], =, Double, ., parseDouble, (]
[., parseDouble, (, tokens, [, 0, ], ), ;, this, ., x, [, i, ], =, Double, ., parseDouble, (]
[(, tokens, [, 0, ], ), ;, this, ., x, [, i, ], =, Double, ., parseDouble, (, tokens, []
[), ;, this, ., x, [, i, ], =, Double, ., parseDouble, (, tokens, [, 1, ], ), ;, }]
[this, ., x, [, i, ], =, Double, ., parseDouble, (, tokens, [, 1, ], ), ;, }, index, =]
[x, [, i, ], =, Double, ., parseDouble, (, tokens, [, 1, ], ), ;, }, index, =, findLineNumbers, (]
[i, ], =, Double, ., parseDouble, (, tokens, [, 1, ], ), ;, }, index, =, findLineNumbers, (, "Starting Values", ,]
[parseDouble, (, tokens, [, 1, ], ), ;, }, index, =, findLineNumbers, (, "Starting Values", ,, lines, ), ;, if, (]
[parseDouble, (, tokens, [, 1, ], ), ;, }, index, =, findLineNumbers, (, "Starting Values", ,, lines, ), ;, if, (]
[tokens, [, 1, ], ), ;, }, index, =, findLineNumbers, (, "Starting Values", ,, lines, ), ;, if, (, index, ==]
[), ;, }, index, =, findLineNumbers, (, "Starting Values", ,, lines, ), ;, if, (, index, ==, null, ), {, throw]
[index, =, findLineNumbers, (, "Starting Values", ,, lines, ), ;, if, (, index, ==, null, ), {, throw, new, AssertionError, (]
["Starting Values", ,, lines, ), ;, if, (, index, ==, null, ), {, throw, new, AssertionError, (, "could not find line indices for starting values", ), ;, }]
["Starting Values", ,, lines, ), ;, if, (, index, ==, null, ), {, throw, new, AssertionError, (, "could not find line indices for starting values", ), ;, }]
[;, if, (, index, ==, null, ), {, throw, new, AssertionError, (, "could not find line indices for starting values", ), ;, }, this, ., numParameters, =]
[;, if, (, index, ==, null, ), {, throw, new, AssertionError, (, "could not find line indices for starting values", ), ;, }, this, ., numParameters, =]
[;, if, (, index, ==, null, ), {, throw, new, AssertionError, (, "could not find line indices for starting values", ), ;, }, this, ., numParameters, =]
[;, if, (, index, ==, null, ), {, throw, new, AssertionError, (, "could not find line indices for starting values", ), ;, }, this, ., numParameters, =]
[(, index, ==, null, ), {, throw, new, AssertionError, (, "could not find line indices for starting values", ), ;, }, this, ., numParameters, =, index, []
[null, ), {, throw, new, AssertionError, (, "could not find line indices for starting values", ), ;, }, this, ., numParameters, =, index, [, 1, ], -]
[null, ), {, throw, new, AssertionError, (, "could not find line indices for starting values", ), ;, }, this, ., numParameters, =, index, [, 1, ], -]
[{, throw, new, AssertionError, (, "could not find line indices for starting values", ), ;, }, this, ., numParameters, =, index, [, 1, ], -, index, []
[AssertionError, (, "could not find line indices for starting values", ), ;, }, this, ., numParameters, =, index, [, 1, ], -, index, [, 0, ], +]
[=, index, [, 1, ], -, index, [, 0, ], +, 1, ;, double, [, ], [, ], start, =]
[[, 1, ], -, index, [, 0, ], +, 1, ;, double, [, ], [, ], start, =, null, ;]
[[, 1, ], -, index, [, 0, ], +, 1, ;, double, [, ], [, ], start, =, null, ;]
[index, [, 0, ], +, 1, ;, double, [, ], [, ], start, =, null, ;, this, ., a, =]
[], +, 1, ;, double, [, ], [, ], start, =, null, ;, this, ., a, =, new, double, []
[;, double, [, ], [, ], start, =, null, ;, this, ., a, =, new, double, [, numParameters, ], ;]
[;, double, [, ], [, ], start, =, null, ;, this, ., a, =, new, double, [, numParameters, ], ;]
[[, ], start, =, null, ;, this, ., a, =, new, double, [, numParameters, ], ;, this, ., sigA, =]
[=, null, ;, this, ., a, =, new, double, [, numParameters, ], ;, this, ., sigA, =, new, double, []
[double, [, numParameters, ], ;, this, ., sigA, =, new, double, [, numParameters, ], ;, for, (, int, i, =]
[numParameters, ], ;, this, ., sigA, =, new, double, [, numParameters, ], ;, for, (, int, i, =, 0, ;]
[numParameters, ], ;, this, ., sigA, =, new, double, [, numParameters, ], ;, for, (, int, i, =, 0, ;]
[;, this, ., sigA, =, new, double, [, numParameters, ], ;, for, (, int, i, =, 0, ;, i, <]
[., sigA, =, new, double, [, numParameters, ], ;, for, (, int, i, =, 0, ;, i, <, numParameters, ;]
[., sigA, =, new, double, [, numParameters, ], ;, for, (, int, i, =, 0, ;, i, <, numParameters, ;]
[;, for, (, int, i, =, 0, ;, i, <, numParameters, ;, i, ++, ), {, final, String, line, =]
[;, for, (, int, i, =, 0, ;, i, <, numParameters, ;, i, ++, ), {, final, String, line, =]
[i, =, 0, ;, i, <, numParameters, ;, i, ++, ), {, final, String, line, =, lines, ., get, (]
[i, =, 0, ;, i, <, numParameters, ;, i, ++, ), {, final, String, line, =, lines, ., get, (]
[i, =, 0, ;, i, <, numParameters, ;, i, ++, ), {, final, String, line, =, lines, ., get, (]
[i, =, 0, ;, i, <, numParameters, ;, i, ++, ), {, final, String, line, =, lines, ., get, (]
[0, ;, i, <, numParameters, ;, i, ++, ), {, final, String, line, =, lines, ., get, (, index, []
[<, numParameters, ;, i, ++, ), {, final, String, line, =, lines, ., get, (, index, [, 0, ], +]
[;, i, ++, ), {, final, String, line, =, lines, ., get, (, index, [, 0, ], +, i, -]
[lines, ., get, (, index, [, 0, ], +, i, -, 1, ), ;, final, String, [, ], tokens, =]
[lines, ., get, (, index, [, 0, ], +, i, -, 1, ), ;, final, String, [, ], tokens, =]
[lines, ., get, (, index, [, 0, ], +, i, -, 1, ), ;, final, String, [, ], tokens, =]
[+, i, -, 1, ), ;, final, String, [, ], tokens, =, line, ., trim, (, ), ., split, (]
[;, final, String, [, ], tokens, =, line, ., trim, (, ), ., split, (, " ++", ), ;, if, (]
[;, final, String, [, ], tokens, =, line, ., trim, (, ), ., split, (, " ++", ), ;, if, (]
[String, [, ], tokens, =, line, ., trim, (, ), ., split, (, " ++", ), ;, if, (, start, ==]
[tokens, =, line, ., trim, (, ), ., split, (, " ++", ), ;, if, (, start, ==, null, ), {]
[line, ., trim, (, ), ., split, (, " ++", ), ;, if, (, start, ==, null, ), {, start, =]
[(, ), ., split, (, " ++", ), ;, if, (, start, ==, null, ), {, start, =, new, double, []
[(, ), ., split, (, " ++", ), ;, if, (, start, ==, null, ), {, start, =, new, double, []
[(, ), ., split, (, " ++", ), ;, if, (, start, ==, null, ), {, start, =, new, double, []
[(, " ++", ), ;, if, (, start, ==, null, ), {, start, =, new, double, [, tokens, ., length, -]
[;, if, (, start, ==, null, ), {, start, =, new, double, [, tokens, ., length, -, 4, ], []
[=, new, double, [, tokens, ., length, -, 4, ], [, numParameters, ], ;, }, for, (, int, j, =]
[double, [, tokens, ., length, -, 4, ], [, numParameters, ], ;, }, for, (, int, j, =, 2, ;]
[double, [, tokens, ., length, -, 4, ], [, numParameters, ], ;, }, for, (, int, j, =, 2, ;]
[tokens, ., length, -, 4, ], [, numParameters, ], ;, }, for, (, int, j, =, 2, ;, j, <]
[tokens, ., length, -, 4, ], [, numParameters, ], ;, }, for, (, int, j, =, 2, ;, j, <]
[tokens, ., length, -, 4, ], [, numParameters, ], ;, }, for, (, int, j, =, 2, ;, j, <]
[4, ], [, numParameters, ], ;, }, for, (, int, j, =, 2, ;, j, <, tokens, ., length, -]
[[, numParameters, ], ;, }, for, (, int, j, =, 2, ;, j, <, tokens, ., length, -, 2, ;]
[[, numParameters, ], ;, }, for, (, int, j, =, 2, ;, j, <, tokens, ., length, -, 2, ;]
[}, for, (, int, j, =, 2, ;, j, <, tokens, ., length, -, 2, ;, j, ++, ), {]
[}, for, (, int, j, =, 2, ;, j, <, tokens, ., length, -, 2, ;, j, ++, ), {]
[}, for, (, int, j, =, 2, ;, j, <, tokens, ., length, -, 2, ;, j, ++, ), {]
[(, int, j, =, 2, ;, j, <, tokens, ., length, -, 2, ;, j, ++, ), {, start, []
[(, int, j, =, 2, ;, j, <, tokens, ., length, -, 2, ;, j, ++, ), {, start, []
[j, =, 2, ;, j, <, tokens, ., length, -, 2, ;, j, ++, ), {, start, [, j, -]
[;, j, <, tokens, ., length, -, 2, ;, j, ++, ), {, start, [, j, -, 2, ], []
[tokens, ., length, -, 2, ;, j, ++, ), {, start, [, j, -, 2, ], [, i, ], =]
[tokens, ., length, -, 2, ;, j, ++, ), {, start, [, j, -, 2, ], [, i, ], =]
[2, ;, j, ++, ), {, start, [, j, -, 2, ], [, i, ], =, Double, ., parseDouble, (]
[2, ;, j, ++, ), {, start, [, j, -, 2, ], [, i, ], =, Double, ., parseDouble, (]
[j, ++, ), {, start, [, j, -, 2, ], [, i, ], =, Double, ., parseDouble, (, tokens, []
[[, j, -, 2, ], [, i, ], =, Double, ., parseDouble, (, tokens, [, j, ], ), ;, }]
[[, j, -, 2, ], [, i, ], =, Double, ., parseDouble, (, tokens, [, j, ], ), ;, }]
[[, j, -, 2, ], [, i, ], =, Double, ., parseDouble, (, tokens, [, j, ], ), ;, }]
[], [, i, ], =, Double, ., parseDouble, (, tokens, [, j, ], ), ;, }, this, ., a, []
[], =, Double, ., parseDouble, (, tokens, [, j, ], ), ;, }, this, ., a, [, i, ], =]
[], =, Double, ., parseDouble, (, tokens, [, j, ], ), ;, }, this, ., a, [, i, ], =]
[parseDouble, (, tokens, [, j, ], ), ;, }, this, ., a, [, i, ], =, Double, ., parseDouble, (]
[parseDouble, (, tokens, [, j, ], ), ;, }, this, ., a, [, i, ], =, Double, ., parseDouble, (]
[tokens, [, j, ], ), ;, }, this, ., a, [, i, ], =, Double, ., parseDouble, (, tokens, []
[tokens, [, j, ], ), ;, }, this, ., a, [, i, ], =, Double, ., parseDouble, (, tokens, []
[tokens, [, j, ], ), ;, }, this, ., a, [, i, ], =, Double, ., parseDouble, (, tokens, []
[), ;, }, this, ., a, [, i, ], =, Double, ., parseDouble, (, tokens, [, tokens, ., length, -]
[., a, [, i, ], =, Double, ., parseDouble, (, tokens, [, tokens, ., length, -, 2, ], ), ;]
[., a, [, i, ], =, Double, ., parseDouble, (, tokens, [, tokens, ., length, -, 2, ], ), ;]
[., a, [, i, ], =, Double, ., parseDouble, (, tokens, [, tokens, ., length, -, 2, ], ), ;]
[], =, Double, ., parseDouble, (, tokens, [, tokens, ., length, -, 2, ], ), ;, this, ., sigA, []
[., parseDouble, (, tokens, [, tokens, ., length, -, 2, ], ), ;, this, ., sigA, [, i, ], =]
[., parseDouble, (, tokens, [, tokens, ., length, -, 2, ], ), ;, this, ., sigA, [, i, ], =]
[[, tokens, ., length, -, 2, ], ), ;, this, ., sigA, [, i, ], =, Double, ., parseDouble, (]
[[, tokens, ., length, -, 2, ], ), ;, this, ., sigA, [, i, ], =, Double, ., parseDouble, (]
[., length, -, 2, ], ), ;, this, ., sigA, [, i, ], =, Double, ., parseDouble, (, tokens, []
[., length, -, 2, ], ), ;, this, ., sigA, [, i, ], =, Double, ., parseDouble, (, tokens, []
[., length, -, 2, ], ), ;, this, ., sigA, [, i, ], =, Double, ., parseDouble, (, tokens, []
[], ), ;, this, ., sigA, [, i, ], =, Double, ., parseDouble, (, tokens, [, tokens, ., length, -]
[i, ], =, Double, ., parseDouble, (, tokens, [, tokens, ., length, -, 1, ], ), ;, }, if, (]
[i, ], =, Double, ., parseDouble, (, tokens, [, tokens, ., length, -, 1, ], ), ;, }, if, (]
[=, Double, ., parseDouble, (, tokens, [, tokens, ., length, -, 1, ], ), ;, }, if, (, start, ==]
[(, tokens, [, tokens, ., length, -, 1, ], ), ;, }, if, (, start, ==, null, ), {, throw]
[tokens, ., length, -, 1, ], ), ;, }, if, (, start, ==, null, ), {, throw, new, IOException, (]
[1, ], ), ;, }, if, (, start, ==, null, ), {, throw, new, IOException, (, "could not find starting values", ), ;, }]
[1, ], ), ;, }, if, (, start, ==, null, ), {, throw, new, IOException, (, "could not find starting values", ), ;, }]
[}, if, (, start, ==, null, ), {, throw, new, IOException, (, "could not find starting values", ), ;, }, this, ., numStartingPoints, =]
[}, if, (, start, ==, null, ), {, throw, new, IOException, (, "could not find starting values", ), ;, }, this, ., numStartingPoints, =]
[==, null, ), {, throw, new, IOException, (, "could not find starting values", ), ;, }, this, ., numStartingPoints, =, start, ., length, ;]
[==, null, ), {, throw, new, IOException, (, "could not find starting values", ), ;, }, this, ., numStartingPoints, =, start, ., length, ;]
[throw, new, IOException, (, "could not find starting values", ), ;, }, this, ., numStartingPoints, =, start, ., length, ;, this, ., startingValues, =]
[), ;, }, this, ., numStartingPoints, =, start, ., length, ;, this, ., startingValues, =, start, ;, double, dummyDouble, =]
[), ;, }, this, ., numStartingPoints, =, start, ., length, ;, this, ., startingValues, =, start, ;, double, dummyDouble, =]
[start, ., length, ;, this, ., startingValues, =, start, ;, double, dummyDouble, =, Double, ., NaN, ;, String, dummyString, =]
[=, start, ;, double, dummyDouble, =, Double, ., NaN, ;, String, dummyString, =, null, ;, for, (, String, line, :]
[=, Double, ., NaN, ;, String, dummyString, =, null, ;, for, (, String, line, :, lines, ), {, if, (]
[=, Double, ., NaN, ;, String, dummyString, =, null, ;, for, (, String, line, :, lines, ), {, if, (]
[;, String, dummyString, =, null, ;, for, (, String, line, :, lines, ), {, if, (, line, ., contains, (]
[null, ;, for, (, String, line, :, lines, ), {, if, (, line, ., contains, (, "Dataset Name:", ), ), {]
[for, (, String, line, :, lines, ), {, if, (, line, ., contains, (, "Dataset Name:", ), ), {, dummyString, =]
[for, (, String, line, :, lines, ), {, if, (, line, ., contains, (, "Dataset Name:", ), ), {, dummyString, =]
[for, (, String, line, :, lines, ), {, if, (, line, ., contains, (, "Dataset Name:", ), ), {, dummyString, =]
[:, lines, ), {, if, (, line, ., contains, (, "Dataset Name:", ), ), {, dummyString, =, line, ., substring, (]
[:, lines, ), {, if, (, line, ., contains, (, "Dataset Name:", ), ), {, dummyString, =, line, ., substring, (]
[:, lines, ), {, if, (, line, ., contains, (, "Dataset Name:", ), ), {, dummyString, =, line, ., substring, (]
[if, (, line, ., contains, (, "Dataset Name:", ), ), {, dummyString, =, line, ., substring, (, line, ., indexOf, (]
[., contains, (, "Dataset Name:", ), ), {, dummyString, =, line, ., substring, (, line, ., indexOf, (, "Dataset Name:", ), +]
[(, "Dataset Name:", ), ), {, dummyString, =, line, ., substring, (, line, ., indexOf, (, "Dataset Name:", ), +, 13, ,]
[(, "Dataset Name:", ), ), {, dummyString, =, line, ., substring, (, line, ., indexOf, (, "Dataset Name:", ), +, 13, ,]
[{, dummyString, =, line, ., substring, (, line, ., indexOf, (, "Dataset Name:", ), +, 13, ,, line, ., indexOf, (]
["Dataset Name:", ), +, 13, ,, line, ., indexOf, (, "(", ), ), ., trim, (, ), ;, }, if, (]
["Dataset Name:", ), +, 13, ,, line, ., indexOf, (, "(", ), ), ., trim, (, ), ;, }, if, (]
[,, line, ., indexOf, (, "(", ), ), ., trim, (, ), ;, }, if, (, line, ., contains, (]
[(, ), ;, }, if, (, line, ., contains, (, "Residual Sum of Squares", ), ), {, final, String, [, ], tokens, =]
[(, ), ;, }, if, (, line, ., contains, (, "Residual Sum of Squares", ), ), {, final, String, [, ], tokens, =]
[if, (, line, ., contains, (, "Residual Sum of Squares", ), ), {, final, String, [, ], tokens, =, line, ., split, (]
[., contains, (, "Residual Sum of Squares", ), ), {, final, String, [, ], tokens, =, line, ., split, (, " ++", ), ;]
[(, "Residual Sum of Squares", ), ), {, final, String, [, ], tokens, =, line, ., split, (, " ++", ), ;, dummyDouble, =]
[(, "Residual Sum of Squares", ), ), {, final, String, [, ], tokens, =, line, ., split, (, " ++", ), ;, dummyDouble, =]
[{, final, String, [, ], tokens, =, line, ., split, (, " ++", ), ;, dummyDouble, =, Double, ., parseDouble, (]
[{, final, String, [, ], tokens, =, line, ., split, (, " ++", ), ;, dummyDouble, =, Double, ., parseDouble, (]
[{, final, String, [, ], tokens, =, line, ., split, (, " ++", ), ;, dummyDouble, =, Double, ., parseDouble, (]
[String, [, ], tokens, =, line, ., split, (, " ++", ), ;, dummyDouble, =, Double, ., parseDouble, (, tokens, []
[dummyDouble, =, Double, ., parseDouble, (, tokens, [, 4, ], ., trim, (, ), ), ;, }, }, if, (]
[dummyDouble, =, Double, ., parseDouble, (, tokens, [, 4, ], ., trim, (, ), ), ;, }, }, if, (]
[parseDouble, (, tokens, [, 4, ], ., trim, (, ), ), ;, }, }, if, (, Double, ., isNaN, (]
[], ., trim, (, ), ), ;, }, }, if, (, Double, ., isNaN, (, dummyDouble, ), ), {, throw]
[(, ), ), ;, }, }, if, (, Double, ., isNaN, (, dummyDouble, ), ), {, throw, new, IOException, (]
[}, }, if, (, Double, ., isNaN, (, dummyDouble, ), ), {, throw, new, IOException, (, "could not find certified value of residual sum of squares", ), ;, }]
[}, }, if, (, Double, ., isNaN, (, dummyDouble, ), ), {, throw, new, IOException, (, "could not find certified value of residual sum of squares", ), ;, }]
[Double, ., isNaN, (, dummyDouble, ), ), {, throw, new, IOException, (, "could not find certified value of residual sum of squares", ), ;, }, this, ., residualSumOfSquares, =]
[dummyDouble, ), ), {, throw, new, IOException, (, "could not find certified value of residual sum of squares", ), ;, }, this, ., residualSumOfSquares, =, dummyDouble, ;, if, (]
[dummyDouble, ), ), {, throw, new, IOException, (, "could not find certified value of residual sum of squares", ), ;, }, this, ., residualSumOfSquares, =, dummyDouble, ;, if, (]
[), {, throw, new, IOException, (, "could not find certified value of residual sum of squares", ), ;, }, this, ., residualSumOfSquares, =, dummyDouble, ;, if, (, dummyString, ==]
[IOException, (, "could not find certified value of residual sum of squares", ), ;, }, this, ., residualSumOfSquares, =, dummyDouble, ;, if, (, dummyString, ==, null, ), {, throw]
[), ;, }, this, ., residualSumOfSquares, =, dummyDouble, ;, if, (, dummyString, ==, null, ), {, throw, new, IOException, (]
[., residualSumOfSquares, =, dummyDouble, ;, if, (, dummyString, ==, null, ), {, throw, new, IOException, (, "could not find dataset name", ), ;, }]
[., residualSumOfSquares, =, dummyDouble, ;, if, (, dummyString, ==, null, ), {, throw, new, IOException, (, "could not find dataset name", ), ;, }]
[;, if, (, dummyString, ==, null, ), {, throw, new, IOException, (, "could not find dataset name", ), ;, }, this, ., name, =]
[(, dummyString, ==, null, ), {, throw, new, IOException, (, "could not find dataset name", ), ;, }, this, ., name, =, dummyString, ;]
[(, dummyString, ==, null, ), {, throw, new, IOException, (, "could not find dataset name", ), ;, }, this, ., name, =, dummyString, ;]
[), {, throw, new, IOException, (, "could not find dataset name", ), ;, }, this, ., name, =, dummyString, ;, this, ., problem, =]
[), {, public, double, [, ], value, (, final, double, [, ], a, ), {, DerivativeStructure, [, ], dsA, =]
[double, [, ], value, (, final, double, [, ], a, ), {, DerivativeStructure, [, ], dsA, =, new, DerivativeStructure, []
[double, [, ], value, (, final, double, [, ], a, ), {, DerivativeStructure, [, ], dsA, =, new, DerivativeStructure, []
[), {, DerivativeStructure, [, ], dsA, =, new, DerivativeStructure, [, a, ., length, ], ;, for, (, int, i, =]
[DerivativeStructure, [, ], dsA, =, new, DerivativeStructure, [, a, ., length, ], ;, for, (, int, i, =, 0, ;]
[DerivativeStructure, [, ], dsA, =, new, DerivativeStructure, [, a, ., length, ], ;, for, (, int, i, =, 0, ;]
[], dsA, =, new, DerivativeStructure, [, a, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[], dsA, =, new, DerivativeStructure, [, a, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[DerivativeStructure, [, a, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;]
[[, a, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, ++]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, ++, i, ), {]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, ++, i, ), {, dsA, []
[int, i, =, 0, ;, i, <, a, ., length, ;, ++, i, ), {, dsA, [, i, ], =]
[0, ;, i, <, a, ., length, ;, ++, i, ), {, dsA, [, i, ], =, new, DerivativeStructure, (]
[0, ;, i, <, a, ., length, ;, ++, i, ), {, dsA, [, i, ], =, new, DerivativeStructure, (]
[a, ., length, ;, ++, i, ), {, dsA, [, i, ], =, new, DerivativeStructure, (, a, ., length, ,]
[length, ;, ++, i, ), {, dsA, [, i, ], =, new, DerivativeStructure, (, a, ., length, ,, 0, ,]
[length, ;, ++, i, ), {, dsA, [, i, ], =, new, DerivativeStructure, (, a, ., length, ,, 0, ,]
[++, i, ), {, dsA, [, i, ], =, new, DerivativeStructure, (, a, ., length, ,, 0, ,, a, []
[new, DerivativeStructure, (, a, ., length, ,, 0, ,, a, [, i, ], ), ;, }, final, int, n, =]
[[, i, ], ), ;, }, final, int, n, =, getNumObservations, (, ), ;, final, double, [, ], yhat, =]
[), ;, }, final, int, n, =, getNumObservations, (, ), ;, final, double, [, ], yhat, =, new, double, []
[(, ), ;, final, double, [, ], yhat, =, new, double, [, n, ], ;, for, (, int, i, =]
[;, final, double, [, ], yhat, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[;, final, double, [, ], yhat, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], yhat, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[], yhat, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[], yhat, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, yhat, []
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, yhat, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, yhat, [, i, ], =]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, yhat, [, i, ], =, getModelValue, (]
[=, 0, ;, i, <, n, ;, i, ++, ), {, yhat, [, i, ], =, getModelValue, (, getX, (]
[i, <, n, ;, i, ++, ), {, yhat, [, i, ], =, getModelValue, (, getX, (, i, ), ,]
[[, i, ], =, getModelValue, (, getX, (, i, ), ,, dsA, ), ., getValue, (, ), ;, }, return]
[yhat, ;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, [, ], a, ), {, final, int, n, =]
[DerivativeStructure, [, ], a, ), {, final, int, n, =, getNumObservations, (, ), ;, final, DerivativeStructure, [, ], yhat, =]
[a, ), {, final, int, n, =, getNumObservations, (, ), ;, final, DerivativeStructure, [, ], yhat, =, new, DerivativeStructure, []
[(, ), ;, final, DerivativeStructure, [, ], yhat, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =]
[;, final, DerivativeStructure, [, ], yhat, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;]
[;, final, DerivativeStructure, [, ], yhat, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;]
[DerivativeStructure, [, ], yhat, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[], yhat, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[], yhat, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, yhat, []
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, yhat, [, i, ], =]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, yhat, [, i, ], =, getModelValue, (]
[=, 0, ;, i, <, n, ;, i, ++, ), {, yhat, [, i, ], =, getModelValue, (, getX, (]
[i, <, n, ;, i, ++, ), {, yhat, [, i, ], =, getModelValue, (, getX, (, i, ), ,]
[++, ), {, yhat, [, i, ], =, getModelValue, (, getX, (, i, ), ,, a, ), ;, }, return]
[), ,, a, ), ;, }, return, yhat, ;, }, }, ;, }, public, String, getName, (, ), {, return]
[}, ;, }, public, String, getName, (, ), {, return, name, ;, }, public, int, getNumObservations, (, ), {, return]
[int, getNumObservations, (, ), {, return, numObservations, ;, }, public, double, [, ], [, ], getData, (, ), {, return]
[numObservations, ;, }, public, double, [, ], [, ], getData, (, ), {, return, new, double, [, ], [, ]]
[;, }, public, double, [, ], [, ], getData, (, ), {, return, new, double, [, ], [, ], {]
[;, }, public, double, [, ], [, ], getData, (, ), {, return, new, double, [, ], [, ], {]
[[, ], [, ], getData, (, ), {, return, new, double, [, ], [, ], {, MathArrays, ., copyOf, (]
[], getData, (, ), {, return, new, double, [, ], [, ], {, MathArrays, ., copyOf, (, x, ), ,]
[], getData, (, ), {, return, new, double, [, ], [, ], {, MathArrays, ., copyOf, (, x, ), ,]
[{, return, new, double, [, ], [, ], {, MathArrays, ., copyOf, (, x, ), ,, MathArrays, ., copyOf, (]
[,, MathArrays, ., copyOf, (, y, ), }, ;, }, public, double, getX, (, final, int, i, ), {, return]
[,, MathArrays, ., copyOf, (, y, ), }, ;, }, public, double, getX, (, final, int, i, ), {, return]
[., copyOf, (, y, ), }, ;, }, public, double, getX, (, final, int, i, ), {, return, x, []
[i, ), {, return, x, [, i, ], ;, }, public, double, getY, (, final, int, i, ), {, return]
[i, ), {, return, x, [, i, ], ;, }, public, double, getY, (, final, int, i, ), {, return]
[{, return, x, [, i, ], ;, }, public, double, getY, (, final, int, i, ), {, return, y, []
[(, final, int, i, ), {, return, y, [, i, ], ;, }, public, int, getNumParameters, (, ), {, return]
[}, public, int, getNumParameters, (, ), {, return, numParameters, ;, }, public, double, [, ], getParameters, (, ), {, return]
[}, public, int, getNumParameters, (, ), {, return, numParameters, ;, }, public, double, [, ], getParameters, (, ), {, return]
[(, ), {, return, numParameters, ;, }, public, double, [, ], getParameters, (, ), {, return, MathArrays, ., copyOf, (]
[{, return, MathArrays, ., copyOf, (, a, ), ;, }, public, double, getParameter, (, final, int, i, ), {, return]
[{, return, MathArrays, ., copyOf, (, a, ), ;, }, public, double, getParameter, (, final, int, i, ), {, return]
[MathArrays, ., copyOf, (, a, ), ;, }, public, double, getParameter, (, final, int, i, ), {, return, a, []
[int, i, ), {, return, a, [, i, ], ;, }, public, double, [, ], getParametersStandardDeviations, (, ), {, return]
[int, i, ), {, return, a, [, i, ], ;, }, public, double, [, ], getParametersStandardDeviations, (, ), {, return]
[return, a, [, i, ], ;, }, public, double, [, ], getParametersStandardDeviations, (, ), {, return, MathArrays, ., copyOf, (]
[{, return, MathArrays, ., copyOf, (, sigA, ), ;, }, public, double, getParameterStandardDeviation, (, final, int, i, ), {, return]
[{, return, MathArrays, ., copyOf, (, sigA, ), ;, }, public, double, getParameterStandardDeviation, (, final, int, i, ), {, return]
[MathArrays, ., copyOf, (, sigA, ), ;, }, public, double, getParameterStandardDeviation, (, final, int, i, ), {, return, sigA, []
[(, final, int, i, ), {, return, sigA, [, i, ], ;, }, public, double, getResidualSumOfSquares, (, ), {, return]
[], ;, }, public, double, getResidualSumOfSquares, (, ), {, return, residualSumOfSquares, ;, }, public, int, getNumStartingPoints, (, ), {, return]
[getNumStartingPoints, (, ), {, return, numStartingPoints, ;, }, public, double, [, ], getStartingPoint, (, final, int, i, ), {, return]
[getNumStartingPoints, (, ), {, return, numStartingPoints, ;, }, public, double, [, ], getStartingPoint, (, final, int, i, ), {, return]
[return, numStartingPoints, ;, }, public, double, [, ], getStartingPoint, (, final, int, i, ), {, return, MathArrays, ., copyOf, (]
[return, numStartingPoints, ;, }, public, double, [, ], getStartingPoint, (, final, int, i, ), {, return, MathArrays, ., copyOf, (]
[;, }, public, double, [, ], getStartingPoint, (, final, int, i, ), {, return, MathArrays, ., copyOf, (, startingValues, []
[{, return, MathArrays, ., copyOf, (, startingValues, [, i, ], ), ;, }, public, MultivariateDifferentiableVectorFunction, getLeastSquaresProblem, (, ), {, return]
[], findLineNumbers, (, final, String, key, ,, final, Iterable, <, String, >, lines, ), {, for, (, String, text, :]
[,, final, Iterable, <, String, >, lines, ), {, for, (, String, text, :, lines, ), {, boolean, flag, =]
[,, final, Iterable, <, String, >, lines, ), {, for, (, String, text, :, lines, ), {, boolean, flag, =]
[,, final, Iterable, <, String, >, lines, ), {, for, (, String, text, :, lines, ), {, boolean, flag, =]
[,, final, Iterable, <, String, >, lines, ), {, for, (, String, text, :, lines, ), {, boolean, flag, =]
[,, final, Iterable, <, String, >, lines, ), {, for, (, String, text, :, lines, ), {, boolean, flag, =]
[String, >, lines, ), {, for, (, String, text, :, lines, ), {, boolean, flag, =, text, ., contains, (]
[), {, for, (, String, text, :, lines, ), {, boolean, flag, =, text, ., contains, (, key, ), &&]
[), {, for, (, String, text, :, lines, ), {, boolean, flag, =, text, ., contains, (, key, ), &&]
[String, text, :, lines, ), {, boolean, flag, =, text, ., contains, (, key, ), &&, text, ., contains, (]
[lines, ), {, boolean, flag, =, text, ., contains, (, key, ), &&, text, ., contains, (, "lines", ), &&]
[lines, ), {, boolean, flag, =, text, ., contains, (, key, ), &&, text, ., contains, (, "lines", ), &&]
[flag, =, text, ., contains, (, key, ), &&, text, ., contains, (, "lines", ), &&, text, ., contains, (]
[., contains, (, key, ), &&, text, ., contains, (, "lines", ), &&, text, ., contains, (, "to", ), &&]
[., contains, (, key, ), &&, text, ., contains, (, "lines", ), &&, text, ., contains, (, "to", ), &&]
[), &&, text, ., contains, (, "lines", ), &&, text, ., contains, (, "to", ), &&, text, ., contains, (]
[(, "lines", ), &&, text, ., contains, (, "to", ), &&, text, ., contains, (, ")", ), ;, if, (]
[), &&, text, ., contains, (, ")", ), ;, if, (, flag, ), {, final, int, [, ], numbers, =]
[., contains, (, ")", ), ;, if, (, flag, ), {, final, int, [, ], numbers, =, new, int, []
[(, flag, ), {, final, int, [, ], numbers, =, new, int, [, 2, ], ;, final, String, from, =]
[(, flag, ), {, final, int, [, ], numbers, =, new, int, [, 2, ], ;, final, String, from, =]
[final, int, [, ], numbers, =, new, int, [, 2, ], ;, final, String, from, =, text, ., substring, (]
[final, int, [, ], numbers, =, new, int, [, 2, ], ;, final, String, from, =, text, ., substring, (]
[final, int, [, ], numbers, =, new, int, [, 2, ], ;, final, String, from, =, text, ., substring, (]
[numbers, =, new, int, [, 2, ], ;, final, String, from, =, text, ., substring, (, text, ., indexOf, (]
[int, [, 2, ], ;, final, String, from, =, text, ., substring, (, text, ., indexOf, (, "lines", ), +]
[2, ], ;, final, String, from, =, text, ., substring, (, text, ., indexOf, (, "lines", ), +, 5, ,]
[2, ], ;, final, String, from, =, text, ., substring, (, text, ., indexOf, (, "lines", ), +, 5, ,]
[String, from, =, text, ., substring, (, text, ., indexOf, (, "lines", ), +, 5, ,, text, ., indexOf, (]
[., substring, (, text, ., indexOf, (, "lines", ), +, 5, ,, text, ., indexOf, (, "to", ), ), ;]
[., substring, (, text, ., indexOf, (, "lines", ), +, 5, ,, text, ., indexOf, (, "to", ), ), ;]
[(, text, ., indexOf, (, "lines", ), +, 5, ,, text, ., indexOf, (, "to", ), ), ;, numbers, []
[indexOf, (, "lines", ), +, 5, ,, text, ., indexOf, (, "to", ), ), ;, numbers, [, 0, ], =]
[indexOf, (, "lines", ), +, 5, ,, text, ., indexOf, (, "to", ), ), ;, numbers, [, 0, ], =]
[+, 5, ,, text, ., indexOf, (, "to", ), ), ;, numbers, [, 0, ], =, Integer, ., parseInt, (]
[+, 5, ,, text, ., indexOf, (, "to", ), ), ;, numbers, [, 0, ], =, Integer, ., parseInt, (]
[numbers, [, 0, ], =, Integer, ., parseInt, (, from, ., trim, (, ), ), ;, final, String, to, =]
[numbers, [, 0, ], =, Integer, ., parseInt, (, from, ., trim, (, ), ), ;, final, String, to, =]
[=, Integer, ., parseInt, (, from, ., trim, (, ), ), ;, final, String, to, =, text, ., substring, (]
[=, Integer, ., parseInt, (, from, ., trim, (, ), ), ;, final, String, to, =, text, ., substring, (]
[=, Integer, ., parseInt, (, from, ., trim, (, ), ), ;, final, String, to, =, text, ., substring, (]
[(, from, ., trim, (, ), ), ;, final, String, to, =, text, ., substring, (, text, ., indexOf, (]
[trim, (, ), ), ;, final, String, to, =, text, ., substring, (, text, ., indexOf, (, "to", ), +]
[), ), ;, final, String, to, =, text, ., substring, (, text, ., indexOf, (, "to", ), +, 2, ,]
[), ), ;, final, String, to, =, text, ., substring, (, text, ., indexOf, (, "to", ), +, 2, ,]
[String, to, =, text, ., substring, (, text, ., indexOf, (, "to", ), +, 2, ,, text, ., indexOf, (]
[., substring, (, text, ., indexOf, (, "to", ), +, 2, ,, text, ., indexOf, (, ")", ), ), ;]
[., substring, (, text, ., indexOf, (, "to", ), +, 2, ,, text, ., indexOf, (, ")", ), ), ;]
[(, text, ., indexOf, (, "to", ), +, 2, ,, text, ., indexOf, (, ")", ), ), ;, numbers, []
[indexOf, (, "to", ), +, 2, ,, text, ., indexOf, (, ")", ), ), ;, numbers, [, 1, ], =]
[indexOf, (, "to", ), +, 2, ,, text, ., indexOf, (, ")", ), ), ;, numbers, [, 1, ], =]
[+, 2, ,, text, ., indexOf, (, ")", ), ), ;, numbers, [, 1, ], =, Integer, ., parseInt, (]
[+, 2, ,, text, ., indexOf, (, ")", ), ), ;, numbers, [, 1, ], =, Integer, ., parseInt, (]
[), ), ;, numbers, [, 1, ], =, Integer, ., parseInt, (, to, ., trim, (, ), ), ;, return]
[1, ], =, Integer, ., parseInt, (, to, ., trim, (, ), ), ;, return, numbers, ;, }, }, return]
