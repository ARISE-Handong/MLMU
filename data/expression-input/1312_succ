[;, private, final, int, lower, ;, private, final, int, upper, ;, public, UniformIntegerDistribution, (, int, lower, ,, int, upper, )]
[,, lower, ,, upper, ), ;, }, public, UniformIntegerDistribution, (, RandomGenerator, rng, ,, int, lower, ,, int, upper, ), throws]
[,, upper, ), ;, }, public, UniformIntegerDistribution, (, RandomGenerator, rng, ,, int, lower, ,, int, upper, ), throws, NumberIsTooLargeException, {]
[), ;, }, public, UniformIntegerDistribution, (, RandomGenerator, rng, ,, int, lower, ,, int, upper, ), throws, NumberIsTooLargeException, {, super, (]
[), ;, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, this, .]
[>=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, this, .]
[;, }, this, ., lower, =, lower, ;, this, ., upper, =, upper, ;, }, public, double, probability, (, int]
[,, lower, ,, upper, ,, false, ), ;, }, this, ., lower, =, lower, ;, this, ., upper, =, upper]
[., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, this, ., lower, =, lower, ;, this, ., upper]
[,, upper, ,, false, ), ;, }, this, ., lower, =, lower, ;, this, ., upper, =, upper, ;, }]
[,, false, ), ;, }, this, ., lower, =, lower, ;, this, ., upper, =, upper, ;, }, public, double]
[), ;, }, this, ., lower, =, lower, ;, this, ., upper, =, upper, ;, }, public, double, probability, (]
[=, lower, ;, this, ., upper, =, upper, ;, }, public, double, probability, (, int, x, ), {, if, (]
[., lower, =, lower, ;, this, ., upper, =, upper, ;, }, public, double, probability, (, int, x, ), {]
[;, this, ., upper, =, upper, ;, }, public, double, probability, (, int, x, ), {, if, (, x, <]
[=, upper, ;, }, public, double, probability, (, int, x, ), {, if, (, x, <, lower, ||, x, >]
[., upper, =, upper, ;, }, public, double, probability, (, int, x, ), {, if, (, x, <, lower, ||]
[;, }, public, double, probability, (, int, x, ), {, if, (, x, <, lower, ||, x, >, upper, )]
[), {, return, 0, ;, }, return, 1.0, /, (, upper, -, lower, +, 1, ), ;, }, public, double]
[||, x, >, upper, ), {, return, 0, ;, }, return, 1.0, /, (, upper, -, lower, +, 1, )]
[<, lower, ||, x, >, upper, ), {, return, 0, ;, }, return, 1.0, /, (, upper, -, lower, +]
[||, x, >, upper, ), {, return, 0, ;, }, return, 1.0, /, (, upper, -, lower, +, 1, )]
[), {, return, 0, ;, }, return, 1.0, /, (, upper, -, lower, +, 1, ), ;, }, public, double]
[>, upper, ), {, return, 0, ;, }, return, 1.0, /, (, upper, -, lower, +, 1, ), ;, }]
[), {, return, 0, ;, }, return, 1.0, /, (, upper, -, lower, +, 1, ), ;, }, public, double]
[;, }, return, 1.0, /, (, upper, -, lower, +, 1, ), ;, }, public, double, cumulativeProbability, (, int, x]
[;, }, public, double, cumulativeProbability, (, int, x, ), {, if, (, x, <, lower, ), {, return, 0, ;]
[/, (, upper, -, lower, +, 1, ), ;, }, public, double, cumulativeProbability, (, int, x, ), {, if, (]
[;, }, public, double, cumulativeProbability, (, int, x, ), {, if, (, x, <, lower, ), {, return, 0, ;]
[), ;, }, public, double, cumulativeProbability, (, int, x, ), {, if, (, x, <, lower, ), {, return, 0]
[+, 1, ), ;, }, public, double, cumulativeProbability, (, int, x, ), {, if, (, x, <, lower, ), {]
[-, lower, +, 1, ), ;, }, public, double, cumulativeProbability, (, int, x, ), {, if, (, x, <, lower]
[+, 1, ), ;, }, public, double, cumulativeProbability, (, int, x, ), {, if, (, x, <, lower, ), {]
[), ;, }, public, double, cumulativeProbability, (, int, x, ), {, if, (, x, <, lower, ), {, return, 0]
[), {, return, 0, ;, }, if, (, x, >, upper, ), {, return, 1, ;, }, return, (, x]
[<, lower, ), {, return, 0, ;, }, if, (, x, >, upper, ), {, return, 1, ;, }, return]
[), {, return, 0, ;, }, if, (, x, >, upper, ), {, return, 1, ;, }, return, (, x]
[;, }, if, (, x, >, upper, ), {, return, 1, ;, }, return, (, x, -, lower, +, 1.0]
[), {, return, 1, ;, }, return, (, x, -, lower, +, 1.0, ), /, (, upper, -, lower, +]
[>, upper, ), {, return, 1, ;, }, return, (, x, -, lower, +, 1.0, ), /, (, upper, -]
[), {, return, 1, ;, }, return, (, x, -, lower, +, 1.0, ), /, (, upper, -, lower, +]
[;, }, return, (, x, -, lower, +, 1.0, ), /, (, upper, -, lower, +, 1.0, ), ;, }]
[;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (, lower, +, upper, ), ;, }, public, double]
[/, (, upper, -, lower, +, 1.0, ), ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (]
[), /, (, upper, -, lower, +, 1.0, ), ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *]
[+, 1.0, ), /, (, upper, -, lower, +, 1.0, ), ;, }, public, double, getNumericalMean, (, ), {, return]
[-, lower, +, 1.0, ), /, (, upper, -, lower, +, 1.0, ), ;, }, public, double, getNumericalMean, (, )]
[+, 1.0, ), /, (, upper, -, lower, +, 1.0, ), ;, }, public, double, getNumericalMean, (, ), {, return]
[), /, (, upper, -, lower, +, 1.0, ), ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *]
[;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (, lower, +, upper, ), ;, }, public, double]
[), ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (, lower, +, upper, ), ;, }, public]
[+, 1.0, ), ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (, lower, +, upper, ), ;]
[-, lower, +, 1.0, ), ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (, lower, +, upper]
[+, 1.0, ), ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (, lower, +, upper, ), ;]
[), ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (, lower, +, upper, ), ;, }, public]
[;, }, public, double, getNumericalVariance, (, ), {, double, n, =, upper, -, lower, +, 1, ;, return, (, n]
[*, (, lower, +, upper, ), ;, }, public, double, getNumericalVariance, (, ), {, double, n, =, upper, -, lower]
[;, }, public, double, getNumericalVariance, (, ), {, double, n, =, upper, -, lower, +, 1, ;, return, (, n]
[), ;, }, public, double, getNumericalVariance, (, ), {, double, n, =, upper, -, lower, +, 1, ;, return, (]
[+, upper, ), ;, }, public, double, getNumericalVariance, (, ), {, double, n, =, upper, -, lower, +, 1, ;]
[), ;, }, public, double, getNumericalVariance, (, ), {, double, n, =, upper, -, lower, +, 1, ;, return, (]
[;, return, (, n, *, n, -, 1, ), /, 12.0, ;, }, public, int, getSupportLowerBound, (, ), {, return]
[+, 1, ;, return, (, n, *, n, -, 1, ), /, 12.0, ;, }, public, int, getSupportLowerBound, (, )]
[-, lower, +, 1, ;, return, (, n, *, n, -, 1, ), /, 12.0, ;, }, public, int, getSupportLowerBound]
[+, 1, ;, return, (, n, *, n, -, 1, ), /, 12.0, ;, }, public, int, getSupportLowerBound, (, )]
[;, return, (, n, *, n, -, 1, ), /, 12.0, ;, }, public, int, getSupportLowerBound, (, ), {, return]
[;, }, public, int, getSupportLowerBound, (, ), {, return, lower, ;, }, public, int, getSupportUpperBound, (, ), {, return, upper]
[/, 12.0, ;, }, public, int, getSupportLowerBound, (, ), {, return, lower, ;, }, public, int, getSupportUpperBound, (, ), {]
[), /, 12.0, ;, }, public, int, getSupportLowerBound, (, ), {, return, lower, ;, }, public, int, getSupportUpperBound, (, )]
[-, 1, ), /, 12.0, ;, }, public, int, getSupportLowerBound, (, ), {, return, lower, ;, }, public, int, getSupportUpperBound]
[*, n, -, 1, ), /, 12.0, ;, }, public, int, getSupportLowerBound, (, ), {, return, lower, ;, }, public]
[-, 1, ), /, 12.0, ;, }, public, int, getSupportLowerBound, (, ), {, return, lower, ;, }, public, int, getSupportUpperBound]
[), /, 12.0, ;, }, public, int, getSupportLowerBound, (, ), {, return, lower, ;, }, public, int, getSupportUpperBound, (, )]
[;, }, public, int, getSupportLowerBound, (, ), {, return, lower, ;, }, public, int, getSupportUpperBound, (, ), {, return, upper]
[;, }, public, int, getSupportUpperBound, (, ), {, return, upper, ;, }, public, boolean, isSupportConnected, (, ), {, return, true]
[;, }, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, int, sample, (, ), {]
[;, }, @, Override, public, int, sample, (, ), {, final, int, max, =, (, upper, -, lower, ), +]
[;, if, (, max, <=, 0, ), {, while, (, true, ), {, final, int, r, =, random, ., nextInt]
[+, 1, ;, if, (, max, <=, 0, ), {, while, (, true, ), {, final, int, r, =, random]
[), +, 1, ;, if, (, max, <=, 0, ), {, while, (, true, ), {, final, int, r, =]
[-, lower, ), +, 1, ;, if, (, max, <=, 0, ), {, while, (, true, ), {, final, int]
[), +, 1, ;, if, (, max, <=, 0, ), {, while, (, true, ), {, final, int, r, =]
[;, if, (, max, <=, 0, ), {, while, (, true, ), {, final, int, r, =, random, ., nextInt]
[), {, while, (, true, ), {, final, int, r, =, random, ., nextInt, (, ), ;, if, (, r]
[<=, 0, ), {, while, (, true, ), {, final, int, r, =, random, ., nextInt, (, ), ;, if]
[), {, while, (, true, ), {, final, int, r, =, random, ., nextInt, (, ), ;, if, (, r]
[), {, final, int, r, =, random, ., nextInt, (, ), ;, if, (, r, >=, lower, &&, r, <=]
[;, if, (, r, >=, lower, &&, r, <=, upper, ), {, return, r, ;, }, }, }, else, {]
[., nextInt, (, ), ;, if, (, r, >=, lower, &&, r, <=, upper, ), {, return, r, ;, }]
[), {, return, r, ;, }, }, }, else, {, return, lower, +, random, ., nextInt, (, max, ), ;]
[&&, r, <=, upper, ), {, return, r, ;, }, }, }, else, {, return, lower, +, random, ., nextInt]
[>=, lower, &&, r, <=, upper, ), {, return, r, ;, }, }, }, else, {, return, lower, +, random]
[&&, r, <=, upper, ), {, return, r, ;, }, }, }, else, {, return, lower, +, random, ., nextInt]
[), {, return, r, ;, }, }, }, else, {, return, lower, +, random, ., nextInt, (, max, ), ;]
[<=, upper, ), {, return, r, ;, }, }, }, else, {, return, lower, +, random, ., nextInt, (, max]
[), {, return, r, ;, }, }, }, else, {, return, lower, +, random, ., nextInt, (, max, ), ;]
[;, }, }, }, else, {, return, lower, +, random, ., nextInt, (, max, ), ;, }, }, }]
[;, }, }, }]
[+, random, ., nextInt, (, max, ), ;, }, }, }]
[;, }, }, }]
[., nextInt, (, max, ), ;, }, }, }]
[), ;, }, }, }]
