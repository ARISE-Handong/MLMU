[;, }, public, static, BoxAndWhiskerItem, calculateBoxAndWhiskerStatistics, (, List, values, ,, boolean, stripNullAndNaNItems, ), {, if, (, values, ==, null, )]
[,, true, ), ;, }, public, static, BoxAndWhiskerItem, calculateBoxAndWhiskerStatistics, (, List, values, ,, boolean, stripNullAndNaNItems, ), {, if, (, values]
[), ;, }, public, static, BoxAndWhiskerItem, calculateBoxAndWhiskerStatistics, (, List, values, ,, boolean, stripNullAndNaNItems, ), {, if, (, values, ==, null]
[), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, List, vlist, ;, if, (, stripNullAndNaNItems, ), {, vlist, =]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, List, vlist, ;, if, (, stripNullAndNaNItems, ), {]
[), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, List, vlist, ;, if, (, stripNullAndNaNItems, ), {, vlist, =]
[;, }, List, vlist, ;, if, (, stripNullAndNaNItems, ), {, vlist, =, new, ArrayList, (, values, ., size, (, )]
[), ;, }, List, vlist, ;, if, (, stripNullAndNaNItems, ), {, vlist, =, new, ArrayList, (, values, ., size, (]
[), {, vlist, =, new, ArrayList, (, values, ., size, (, ), ), ;, Iterator, iterator, =, values, ., listIterator]
[=, new, ArrayList, (, values, ., size, (, ), ), ;, Iterator, iterator, =, values, ., listIterator, (, ), ;]
[;, Iterator, iterator, =, values, ., listIterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Object]
[), ;, Iterator, iterator, =, values, ., listIterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {]
[., size, (, ), ), ;, Iterator, iterator, =, values, ., listIterator, (, ), ;, while, (, iterator, ., hasNext]
[;, while, (, iterator, ., hasNext, (, ), ), {, Object, obj, =, iterator, ., next, (, ), ;, if]
[., listIterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Object, obj, =, iterator, ., next]
[), {, Object, obj, =, iterator, ., next, (, ), ;, if, (, obj, instanceof, Number, ), {, Number, n]
[., hasNext, (, ), ), {, Object, obj, =, iterator, ., next, (, ), ;, if, (, obj, instanceof, Number]
[;, if, (, obj, instanceof, Number, ), {, Number, n, =, (, Number, ), obj, ;, double, v, =, n]
[., next, (, ), ;, if, (, obj, instanceof, Number, ), {, Number, n, =, (, Number, ), obj, ;]
[), {, Number, n, =, (, Number, ), obj, ;, double, v, =, n, ., doubleValue, (, ), ;, if]
[instanceof, Number, ), {, Number, n, =, (, Number, ), obj, ;, double, v, =, n, ., doubleValue, (, )]
[;, double, v, =, n, ., doubleValue, (, ), ;, if, (, !, Double, ., isNaN, (, v, ), )]
[;, double, v, =, n, ., doubleValue, (, ), ;, if, (, !, Double, ., isNaN, (, v, ), )]
[;, if, (, !, Double, ., isNaN, (, v, ), ), {, vlist, ., add, (, n, ), ;, }]
[., doubleValue, (, ), ;, if, (, !, Double, ., isNaN, (, v, ), ), {, vlist, ., add, (]
[), {, vlist, ., add, (, n, ), ;, }, }, }, }, else, {, vlist, =, values, ;, }]
[), {, vlist, ., add, (, n, ), ;, }, }, }, }, else, {, vlist, =, values, ;, }]
[., isNaN, (, v, ), ), {, vlist, ., add, (, n, ), ;, }, }, }, }, else, {]
[), ), {, vlist, ., add, (, n, ), ;, }, }, }, }, else, {, vlist, =, values, ;]
[;, }, }, }, }, else, {, vlist, =, values, ;, }, Collections, ., sort, (, vlist, ), ;, double]
[., add, (, n, ), ;, }, }, }, }, else, {, vlist, =, values, ;, }, Collections, ., sort]
[), ;, }, }, }, }, else, {, vlist, =, values, ;, }, Collections, ., sort, (, vlist, ), ;]
[=, values, ;, }, Collections, ., sort, (, vlist, ), ;, double, mean, =, Statistics, ., calculateMean, (, vlist, ,]
[;, }, Collections, ., sort, (, vlist, ), ;, double, mean, =, Statistics, ., calculateMean, (, vlist, ,, false, )]
[;, double, mean, =, Statistics, ., calculateMean, (, vlist, ,, false, ), ;, double, median, =, Statistics, ., calculateMedian, (]
[., sort, (, vlist, ), ;, double, mean, =, Statistics, ., calculateMean, (, vlist, ,, false, ), ;, double, median]
[), ;, double, mean, =, Statistics, ., calculateMean, (, vlist, ,, false, ), ;, double, median, =, Statistics, ., calculateMedian]
[;, double, median, =, Statistics, ., calculateMedian, (, vlist, ,, false, ), ;, double, q1, =, calculateQ1, (, vlist, )]
[., calculateMean, (, vlist, ,, false, ), ;, double, median, =, Statistics, ., calculateMedian, (, vlist, ,, false, ), ;]
[,, false, ), ;, double, median, =, Statistics, ., calculateMedian, (, vlist, ,, false, ), ;, double, q1, =, calculateQ1]
[), ;, double, median, =, Statistics, ., calculateMedian, (, vlist, ,, false, ), ;, double, q1, =, calculateQ1, (, vlist]
[;, double, q1, =, calculateQ1, (, vlist, ), ;, double, q3, =, calculateQ3, (, vlist, ), ;, double, interQuartileRange, =]
[., calculateMedian, (, vlist, ,, false, ), ;, double, q1, =, calculateQ1, (, vlist, ), ;, double, q3, =, calculateQ3]
[,, false, ), ;, double, q1, =, calculateQ1, (, vlist, ), ;, double, q3, =, calculateQ3, (, vlist, ), ;]
[), ;, double, q1, =, calculateQ1, (, vlist, ), ;, double, q3, =, calculateQ3, (, vlist, ), ;, double, interQuartileRange]
[;, double, q3, =, calculateQ3, (, vlist, ), ;, double, interQuartileRange, =, q3, -, q1, ;, double, upperOutlierThreshold, =, q3]
[), ;, double, q3, =, calculateQ3, (, vlist, ), ;, double, interQuartileRange, =, q3, -, q1, ;, double, upperOutlierThreshold, =]
[;, double, interQuartileRange, =, q3, -, q1, ;, double, upperOutlierThreshold, =, q3, +, (, interQuartileRange, *, 1.5, ), ;, double]
[), ;, double, interQuartileRange, =, q3, -, q1, ;, double, upperOutlierThreshold, =, q3, +, (, interQuartileRange, *, 1.5, ), ;]
[;, double, upperOutlierThreshold, =, q3, +, (, interQuartileRange, *, 1.5, ), ;, double, lowerOutlierThreshold, =, q1, -, (, interQuartileRange, *]
[-, q1, ;, double, upperOutlierThreshold, =, q3, +, (, interQuartileRange, *, 1.5, ), ;, double, lowerOutlierThreshold, =, q1, -, (]
[;, double, upperOutlierThreshold, =, q3, +, (, interQuartileRange, *, 1.5, ), ;, double, lowerOutlierThreshold, =, q1, -, (, interQuartileRange, *]
[;, double, lowerOutlierThreshold, =, q1, -, (, interQuartileRange, *, 1.5, ), ;, double, upperFaroutThreshold, =, q3, +, (, interQuartileRange, *]
[+, (, interQuartileRange, *, 1.5, ), ;, double, lowerOutlierThreshold, =, q1, -, (, interQuartileRange, *, 1.5, ), ;, double, upperFaroutThreshold]
[;, double, lowerOutlierThreshold, =, q1, -, (, interQuartileRange, *, 1.5, ), ;, double, upperFaroutThreshold, =, q3, +, (, interQuartileRange, *]
[), ;, double, lowerOutlierThreshold, =, q1, -, (, interQuartileRange, *, 1.5, ), ;, double, upperFaroutThreshold, =, q3, +, (, interQuartileRange]
[*, 1.5, ), ;, double, lowerOutlierThreshold, =, q1, -, (, interQuartileRange, *, 1.5, ), ;, double, upperFaroutThreshold, =, q3, +]
[), ;, double, lowerOutlierThreshold, =, q1, -, (, interQuartileRange, *, 1.5, ), ;, double, upperFaroutThreshold, =, q3, +, (, interQuartileRange]
[;, double, upperFaroutThreshold, =, q3, +, (, interQuartileRange, *, 2.0, ), ;, double, lowerFaroutThreshold, =, q1, -, (, interQuartileRange, *]
[-, (, interQuartileRange, *, 1.5, ), ;, double, upperFaroutThreshold, =, q3, +, (, interQuartileRange, *, 2.0, ), ;, double, lowerFaroutThreshold]
[;, double, upperFaroutThreshold, =, q3, +, (, interQuartileRange, *, 2.0, ), ;, double, lowerFaroutThreshold, =, q1, -, (, interQuartileRange, *]
[), ;, double, upperFaroutThreshold, =, q3, +, (, interQuartileRange, *, 2.0, ), ;, double, lowerFaroutThreshold, =, q1, -, (, interQuartileRange]
[*, 1.5, ), ;, double, upperFaroutThreshold, =, q3, +, (, interQuartileRange, *, 2.0, ), ;, double, lowerFaroutThreshold, =, q1, -]
[), ;, double, upperFaroutThreshold, =, q3, +, (, interQuartileRange, *, 2.0, ), ;, double, lowerFaroutThreshold, =, q1, -, (, interQuartileRange]
[;, double, lowerFaroutThreshold, =, q1, -, (, interQuartileRange, *, 2.0, ), ;, double, minRegularValue, =, Double, ., POSITIVE_INFINITY, ;, double]
[+, (, interQuartileRange, *, 2.0, ), ;, double, lowerFaroutThreshold, =, q1, -, (, interQuartileRange, *, 2.0, ), ;, double, minRegularValue]
[;, double, lowerFaroutThreshold, =, q1, -, (, interQuartileRange, *, 2.0, ), ;, double, minRegularValue, =, Double, ., POSITIVE_INFINITY, ;, double]
[), ;, double, lowerFaroutThreshold, =, q1, -, (, interQuartileRange, *, 2.0, ), ;, double, minRegularValue, =, Double, ., POSITIVE_INFINITY, ;]
[*, 2.0, ), ;, double, lowerFaroutThreshold, =, q1, -, (, interQuartileRange, *, 2.0, ), ;, double, minRegularValue, =, Double, .]
[), ;, double, lowerFaroutThreshold, =, q1, -, (, interQuartileRange, *, 2.0, ), ;, double, minRegularValue, =, Double, ., POSITIVE_INFINITY, ;]
[;, double, minRegularValue, =, Double, ., POSITIVE_INFINITY, ;, double, maxRegularValue, =, Double, ., NEGATIVE_INFINITY, ;, double, minOutlier, =, Double, .]
[-, (, interQuartileRange, *, 2.0, ), ;, double, minRegularValue, =, Double, ., POSITIVE_INFINITY, ;, double, maxRegularValue, =, Double, ., NEGATIVE_INFINITY]
[;, double, minRegularValue, =, Double, ., POSITIVE_INFINITY, ;, double, maxRegularValue, =, Double, ., NEGATIVE_INFINITY, ;, double, minOutlier, =, Double, .]
[), ;, double, minRegularValue, =, Double, ., POSITIVE_INFINITY, ;, double, maxRegularValue, =, Double, ., NEGATIVE_INFINITY, ;, double, minOutlier, =, Double]
[*, 2.0, ), ;, double, minRegularValue, =, Double, ., POSITIVE_INFINITY, ;, double, maxRegularValue, =, Double, ., NEGATIVE_INFINITY, ;, double, minOutlier]
[), ;, double, minRegularValue, =, Double, ., POSITIVE_INFINITY, ;, double, maxRegularValue, =, Double, ., NEGATIVE_INFINITY, ;, double, minOutlier, =, Double]
[;, double, maxRegularValue, =, Double, ., NEGATIVE_INFINITY, ;, double, minOutlier, =, Double, ., POSITIVE_INFINITY, ;, double, maxOutlier, =, Double, .]
[., POSITIVE_INFINITY, ;, double, maxRegularValue, =, Double, ., NEGATIVE_INFINITY, ;, double, minOutlier, =, Double, ., POSITIVE_INFINITY, ;, double, maxOutlier, =]
[;, double, minOutlier, =, Double, ., POSITIVE_INFINITY, ;, double, maxOutlier, =, Double, ., NEGATIVE_INFINITY, ;, List, outliers, =, new, ArrayList]
[., NEGATIVE_INFINITY, ;, double, minOutlier, =, Double, ., POSITIVE_INFINITY, ;, double, maxOutlier, =, Double, ., NEGATIVE_INFINITY, ;, List, outliers, =]
[;, double, maxOutlier, =, Double, ., NEGATIVE_INFINITY, ;, List, outliers, =, new, ArrayList, (, ), ;, Iterator, iterator, =, vlist]
[., POSITIVE_INFINITY, ;, double, maxOutlier, =, Double, ., NEGATIVE_INFINITY, ;, List, outliers, =, new, ArrayList, (, ), ;, Iterator, iterator]
[;, List, outliers, =, new, ArrayList, (, ), ;, Iterator, iterator, =, vlist, ., iterator, (, ), ;, while, (]
[., NEGATIVE_INFINITY, ;, List, outliers, =, new, ArrayList, (, ), ;, Iterator, iterator, =, vlist, ., iterator, (, ), ;]
[;, Iterator, iterator, =, vlist, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Number]
[;, while, (, iterator, ., hasNext, (, ), ), {, Number, number, =, (, Number, ), iterator, ., next, (]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Number, number, =, (, Number, )]
[), {, Number, number, =, (, Number, ), iterator, ., next, (, ), ;, double, value, =, number, ., doubleValue]
[., hasNext, (, ), ), {, Number, number, =, (, Number, ), iterator, ., next, (, ), ;, double, value]
[;, double, value, =, number, ., doubleValue, (, ), ;, if, (, value, >, upperOutlierThreshold, ), {, outliers, ., add]
[;, double, value, =, number, ., doubleValue, (, ), ;, if, (, value, >, upperOutlierThreshold, ), {, outliers, ., add]
[., next, (, ), ;, double, value, =, number, ., doubleValue, (, ), ;, if, (, value, >, upperOutlierThreshold, )]
[;, if, (, value, >, upperOutlierThreshold, ), {, outliers, ., add, (, number, ), ;, if, (, value, >, maxOutlier]
[., doubleValue, (, ), ;, if, (, value, >, upperOutlierThreshold, ), {, outliers, ., add, (, number, ), ;, if]
[), {, outliers, ., add, (, number, ), ;, if, (, value, >, maxOutlier, &&, value, <=, upperFaroutThreshold, ), {]
[>, upperOutlierThreshold, ), {, outliers, ., add, (, number, ), ;, if, (, value, >, maxOutlier, &&, value, <=, upperFaroutThreshold]
[), {, outliers, ., add, (, number, ), ;, if, (, value, >, maxOutlier, &&, value, <=, upperFaroutThreshold, ), {]
[;, if, (, value, >, maxOutlier, &&, value, <=, upperFaroutThreshold, ), {, maxOutlier, =, value, ;, }, }, else, if]
[., add, (, number, ), ;, if, (, value, >, maxOutlier, &&, value, <=, upperFaroutThreshold, ), {, maxOutlier, =, value]
[), ;, if, (, value, >, maxOutlier, &&, value, <=, upperFaroutThreshold, ), {, maxOutlier, =, value, ;, }, }, else]
[), {, maxOutlier, =, value, ;, }, }, else, if, (, value, <, lowerOutlierThreshold, ), {, outliers, ., add, (]
[&&, value, <=, upperFaroutThreshold, ), {, maxOutlier, =, value, ;, }, }, else, if, (, value, <, lowerOutlierThreshold, ), {]
[>, maxOutlier, &&, value, <=, upperFaroutThreshold, ), {, maxOutlier, =, value, ;, }, }, else, if, (, value, <, lowerOutlierThreshold]
[&&, value, <=, upperFaroutThreshold, ), {, maxOutlier, =, value, ;, }, }, else, if, (, value, <, lowerOutlierThreshold, ), {]
[), {, maxOutlier, =, value, ;, }, }, else, if, (, value, <, lowerOutlierThreshold, ), {, outliers, ., add, (]
[<=, upperFaroutThreshold, ), {, maxOutlier, =, value, ;, }, }, else, if, (, value, <, lowerOutlierThreshold, ), {, outliers, .]
[), {, maxOutlier, =, value, ;, }, }, else, if, (, value, <, lowerOutlierThreshold, ), {, outliers, ., add, (]
[=, value, ;, }, }, else, if, (, value, <, lowerOutlierThreshold, ), {, outliers, ., add, (, number, ), ;]
[;, }, }, else, if, (, value, <, lowerOutlierThreshold, ), {, outliers, ., add, (, number, ), ;, if, (]
[), {, outliers, ., add, (, number, ), ;, if, (, value, <, minOutlier, &&, value, >=, lowerFaroutThreshold, ), {]
[<, lowerOutlierThreshold, ), {, outliers, ., add, (, number, ), ;, if, (, value, <, minOutlier, &&, value, >=, lowerFaroutThreshold]
[), {, outliers, ., add, (, number, ), ;, if, (, value, <, minOutlier, &&, value, >=, lowerFaroutThreshold, ), {]
[;, if, (, value, <, minOutlier, &&, value, >=, lowerFaroutThreshold, ), {, minOutlier, =, value, ;, }, }, else, {]
[., add, (, number, ), ;, if, (, value, <, minOutlier, &&, value, >=, lowerFaroutThreshold, ), {, minOutlier, =, value]
[), ;, if, (, value, <, minOutlier, &&, value, >=, lowerFaroutThreshold, ), {, minOutlier, =, value, ;, }, }, else]
[), {, minOutlier, =, value, ;, }, }, else, {, minRegularValue, =, Math, ., min, (, minRegularValue, ,, value, )]
[&&, value, >=, lowerFaroutThreshold, ), {, minOutlier, =, value, ;, }, }, else, {, minRegularValue, =, Math, ., min, (]
[<, minOutlier, &&, value, >=, lowerFaroutThreshold, ), {, minOutlier, =, value, ;, }, }, else, {, minRegularValue, =, Math, .]
[&&, value, >=, lowerFaroutThreshold, ), {, minOutlier, =, value, ;, }, }, else, {, minRegularValue, =, Math, ., min, (]
[), {, minOutlier, =, value, ;, }, }, else, {, minRegularValue, =, Math, ., min, (, minRegularValue, ,, value, )]
[>=, lowerFaroutThreshold, ), {, minOutlier, =, value, ;, }, }, else, {, minRegularValue, =, Math, ., min, (, minRegularValue, ,]
[), {, minOutlier, =, value, ;, }, }, else, {, minRegularValue, =, Math, ., min, (, minRegularValue, ,, value, )]
[=, value, ;, }, }, else, {, minRegularValue, =, Math, ., min, (, minRegularValue, ,, value, ), ;, maxRegularValue, =]
[;, }, }, else, {, minRegularValue, =, Math, ., min, (, minRegularValue, ,, value, ), ;, maxRegularValue, =, Math, .]
[=, Math, ., min, (, minRegularValue, ,, value, ), ;, maxRegularValue, =, Math, ., max, (, maxRegularValue, ,, value, )]
[;, maxRegularValue, =, Math, ., max, (, maxRegularValue, ,, value, ), ;, }, minOutlier, =, Math, ., min, (, minOutlier]
[., min, (, minRegularValue, ,, value, ), ;, maxRegularValue, =, Math, ., max, (, maxRegularValue, ,, value, ), ;, }]
[,, value, ), ;, maxRegularValue, =, Math, ., max, (, maxRegularValue, ,, value, ), ;, }, minOutlier, =, Math, .]
[), ;, maxRegularValue, =, Math, ., max, (, maxRegularValue, ,, value, ), ;, }, minOutlier, =, Math, ., min, (]
[=, Math, ., max, (, maxRegularValue, ,, value, ), ;, }, minOutlier, =, Math, ., min, (, minOutlier, ,, minRegularValue]
[;, }, minOutlier, =, Math, ., min, (, minOutlier, ,, minRegularValue, ), ;, maxOutlier, =, Math, ., max, (, maxOutlier]
[., max, (, maxRegularValue, ,, value, ), ;, }, minOutlier, =, Math, ., min, (, minOutlier, ,, minRegularValue, ), ;]
[,, value, ), ;, }, minOutlier, =, Math, ., min, (, minOutlier, ,, minRegularValue, ), ;, maxOutlier, =, Math, .]
[), ;, }, minOutlier, =, Math, ., min, (, minOutlier, ,, minRegularValue, ), ;, maxOutlier, =, Math, ., max, (]
[=, Math, ., min, (, minOutlier, ,, minRegularValue, ), ;, maxOutlier, =, Math, ., max, (, maxOutlier, ,, maxRegularValue, )]
[;, maxOutlier, =, Math, ., max, (, maxOutlier, ,, maxRegularValue, ), ;, }, return, new, BoxAndWhiskerItem, (, new, Double, (]
[., min, (, minOutlier, ,, minRegularValue, ), ;, maxOutlier, =, Math, ., max, (, maxOutlier, ,, maxRegularValue, ), ;, }]
[,, minRegularValue, ), ;, maxOutlier, =, Math, ., max, (, maxOutlier, ,, maxRegularValue, ), ;, }, return, new, BoxAndWhiskerItem, (]
[), ;, maxOutlier, =, Math, ., max, (, maxOutlier, ,, maxRegularValue, ), ;, }, return, new, BoxAndWhiskerItem, (, new, Double]
[=, Math, ., max, (, maxOutlier, ,, maxRegularValue, ), ;, }, return, new, BoxAndWhiskerItem, (, new, Double, (, mean, )]
[;, }, return, new, BoxAndWhiskerItem, (, new, Double, (, mean, ), ,, new, Double, (, median, ), ,, new, Double]
[., max, (, maxOutlier, ,, maxRegularValue, ), ;, }, return, new, BoxAndWhiskerItem, (, new, Double, (, mean, ), ,, new]
[,, maxRegularValue, ), ;, }, return, new, BoxAndWhiskerItem, (, new, Double, (, mean, ), ,, new, Double, (, median, )]
[), ;, }, return, new, BoxAndWhiskerItem, (, new, Double, (, mean, ), ,, new, Double, (, median, ), ,, new]
[;, }, public, static, double, calculateQ1, (, List, values, ), {, if, (, values, ==, null, ), {, throw, new]
[,, new, Double, (, median, ), ,, new, Double, (, q1, ), ,, new, Double, (, q3, ), ,, new]
[), ,, new, Double, (, median, ), ,, new, Double, (, q1, ), ,, new, Double, (, q3, ), ,]
[,, new, Double, (, q1, ), ,, new, Double, (, q3, ), ,, new, Double, (, minRegularValue, ), ,, new]
[), ,, new, Double, (, q1, ), ,, new, Double, (, q3, ), ,, new, Double, (, minRegularValue, ), ,]
[,, new, Double, (, q3, ), ,, new, Double, (, minRegularValue, ), ,, new, Double, (, maxRegularValue, ), ,, new]
[), ,, new, Double, (, q3, ), ,, new, Double, (, minRegularValue, ), ,, new, Double, (, maxRegularValue, ), ,]
[,, new, Double, (, minRegularValue, ), ,, new, Double, (, maxRegularValue, ), ,, new, Double, (, minOutlier, ), ,, new]
[), ,, new, Double, (, minRegularValue, ), ,, new, Double, (, maxRegularValue, ), ,, new, Double, (, minOutlier, ), ,]
[,, new, Double, (, maxRegularValue, ), ,, new, Double, (, minOutlier, ), ,, new, Double, (, maxOutlier, ), ,, outliers]
[), ,, new, Double, (, maxRegularValue, ), ,, new, Double, (, minOutlier, ), ,, new, Double, (, maxOutlier, ), ,]
[,, new, Double, (, minOutlier, ), ,, new, Double, (, maxOutlier, ), ,, outliers, ), ;, }, public, static, double]
[), ,, new, Double, (, minOutlier, ), ,, new, Double, (, maxOutlier, ), ,, outliers, ), ;, }, public, static]
[,, new, Double, (, maxOutlier, ), ,, outliers, ), ;, }, public, static, double, calculateQ1, (, List, values, ), {]
[), ,, new, Double, (, maxOutlier, ), ,, outliers, ), ;, }, public, static, double, calculateQ1, (, List, values, )]
[,, outliers, ), ;, }, public, static, double, calculateQ1, (, List, values, ), {, if, (, values, ==, null, )]
[), ,, outliers, ), ;, }, public, static, double, calculateQ1, (, List, values, ), {, if, (, values, ==, null]
[), ;, }, public, static, double, calculateQ1, (, List, values, ), {, if, (, values, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, double, result, =, Double, ., NaN, ;, int, count, =]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, double, result, =, Double, ., NaN, ;, int]
[), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, double, result, =, Double, ., NaN, ;, int, count, =]
[;, }, double, result, =, Double, ., NaN, ;, int, count, =, values, ., size, (, ), ;, if, (]
[), ;, }, double, result, =, Double, ., NaN, ;, int, count, =, values, ., size, (, ), ;, if]
[;, int, count, =, values, ., size, (, ), ;, if, (, count, >, 0, ), {, if, (, count]
[., NaN, ;, int, count, =, values, ., size, (, ), ;, if, (, count, >, 0, ), {, if]
[;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (, count]
[., size, (, ), ;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, )]
[), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {, result, =]
[>, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {]
[), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {, result, =]
[), {, if, (, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, count]
[==, 1, ), {, if, (, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (, values, ,, 0]
[%, 2, ==, 1, ), {, if, (, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (, values]
[==, 1, ), {, if, (, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (, values, ,, 0]
[), {, if, (, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, count]
[), {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, count, /, 2, ), ;, }, else, {]
[>, 1, ), {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, count, /, 2, ), ;, }]
[), {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, count, /, 2, ), ;, }, else, {]
[=, Statistics, ., calculateMedian, (, values, ,, 0, ,, count, /, 2, ), ;, }, else, {, result, =, Statistics]
[;, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, 0, ), ;, }, }, else]
[., calculateMedian, (, values, ,, 0, ,, count, /, 2, ), ;, }, else, {, result, =, Statistics, ., calculateMedian]
[,, 0, ,, count, /, 2, ), ;, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0]
[,, count, /, 2, ), ;, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, 0]
[), ;, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, 0, ), ;, }, }]
[/, 2, ), ;, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, 0, ), ;]
[), ;, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, 0, ), ;, }, }]
[=, Statistics, ., calculateMedian, (, values, ,, 0, ,, 0, ), ;, }, }, else, {, result, =, Statistics, .]
[;, }, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, count, /, 2, -, 1]
[., calculateMedian, (, values, ,, 0, ,, 0, ), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (]
[,, 0, ,, 0, ), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,]
[,, 0, ), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, count, /]
[), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, count, /, 2, -]
[=, Statistics, ., calculateMedian, (, values, ,, 0, ,, count, /, 2, -, 1, ), ;, }, }, return, result]
[;, }, }, return, result, ;, }, public, static, double, calculateQ3, (, List, values, ), {, if, (, values, ==]
[., calculateMedian, (, values, ,, 0, ,, count, /, 2, -, 1, ), ;, }, }, return, result, ;, }]
[,, 0, ,, count, /, 2, -, 1, ), ;, }, }, return, result, ;, }, public, static, double, calculateQ3]
[,, count, /, 2, -, 1, ), ;, }, }, return, result, ;, }, public, static, double, calculateQ3, (, List]
[), ;, }, }, return, result, ;, }, public, static, double, calculateQ3, (, List, values, ), {, if, (, values]
[-, 1, ), ;, }, }, return, result, ;, }, public, static, double, calculateQ3, (, List, values, ), {, if]
[/, 2, -, 1, ), ;, }, }, return, result, ;, }, public, static, double, calculateQ3, (, List, values, )]
[-, 1, ), ;, }, }, return, result, ;, }, public, static, double, calculateQ3, (, List, values, ), {, if]
[), ;, }, }, return, result, ;, }, public, static, double, calculateQ3, (, List, values, ), {, if, (, values]
[;, }, public, static, double, calculateQ3, (, List, values, ), {, if, (, values, ==, null, ), {, throw, new]
[), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, double, result, =, Double, ., NaN, ;, int, count, =]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, double, result, =, Double, ., NaN, ;, int]
[), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, double, result, =, Double, ., NaN, ;, int, count, =]
[;, }, double, result, =, Double, ., NaN, ;, int, count, =, values, ., size, (, ), ;, if, (]
[), ;, }, double, result, =, Double, ., NaN, ;, int, count, =, values, ., size, (, ), ;, if]
[;, int, count, =, values, ., size, (, ), ;, if, (, count, >, 0, ), {, if, (, count]
[., NaN, ;, int, count, =, values, ., size, (, ), ;, if, (, count, >, 0, ), {, if]
[;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (, count]
[., size, (, ), ;, if, (, count, >, 0, ), {, if, (, count, %, 2, ==, 1, )]
[), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {, result, =]
[>, 0, ), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {]
[), {, if, (, count, %, 2, ==, 1, ), {, if, (, count, >, 1, ), {, result, =]
[), {, if, (, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (, values, ,, count, /, 2]
[==, 1, ), {, if, (, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (, values, ,, count]
[%, 2, ==, 1, ), {, if, (, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (, values]
[==, 1, ), {, if, (, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (, values, ,, count]
[), {, if, (, count, >, 1, ), {, result, =, Statistics, ., calculateMedian, (, values, ,, count, /, 2]
[), {, result, =, Statistics, ., calculateMedian, (, values, ,, count, /, 2, ,, count, -, 1, ), ;, }]
[>, 1, ), {, result, =, Statistics, ., calculateMedian, (, values, ,, count, /, 2, ,, count, -, 1, )]
[), {, result, =, Statistics, ., calculateMedian, (, values, ,, count, /, 2, ,, count, -, 1, ), ;, }]
[=, Statistics, ., calculateMedian, (, values, ,, count, /, 2, ,, count, -, 1, ), ;, }, else, {, result]
[;, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, 0, ), ;, }, }, else]
[., calculateMedian, (, values, ,, count, /, 2, ,, count, -, 1, ), ;, }, else, {, result, =, Statistics]
[,, count, /, 2, ,, count, -, 1, ), ;, }, else, {, result, =, Statistics, ., calculateMedian, (, values]
[,, count, -, 1, ), ;, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, 0]
[/, 2, ,, count, -, 1, ), ;, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0]
[,, count, -, 1, ), ;, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, 0]
[), ;, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, 0, ), ;, }, }]
[-, 1, ), ;, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, 0, ), ;]
[), ;, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, 0, ,, 0, ), ;, }, }]
[=, Statistics, ., calculateMedian, (, values, ,, 0, ,, 0, ), ;, }, }, else, {, result, =, Statistics, .]
[;, }, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, count, /, 2, ,, count, -, 1]
[., calculateMedian, (, values, ,, 0, ,, 0, ), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (]
[,, 0, ,, 0, ), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, count, /]
[,, 0, ), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, count, /, 2, ,]
[), ;, }, }, else, {, result, =, Statistics, ., calculateMedian, (, values, ,, count, /, 2, ,, count, -]
[=, Statistics, ., calculateMedian, (, values, ,, count, /, 2, ,, count, -, 1, ), ;, }, }, return, result]
[;, }, }, return, result, ;, }, }]
[., calculateMedian, (, values, ,, count, /, 2, ,, count, -, 1, ), ;, }, }, return, result, ;, }]
[,, count, /, 2, ,, count, -, 1, ), ;, }, }, return, result, ;, }, }]
[,, count, -, 1, ), ;, }, }, return, result, ;, }, }]
[/, 2, ,, count, -, 1, ), ;, }, }, return, result, ;, }, }]
[,, count, -, 1, ), ;, }, }, return, result, ;, }, }]
[), ;, }, }, return, result, ;, }, }]
[-, 1, ), ;, }, }, return, result, ;, }, }]
[), ;, }, }, return, result, ;, }, }]
[;, }, }]
