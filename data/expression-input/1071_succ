[,, new, MustDefJoin, (, ), ), ;, this, ., jsScope, =, jsScope, ;, this, ., compiler, =, compiler, ;, this]
[), ;, this, ., jsScope, =, jsScope, ;, this, ., compiler, =, compiler, ;, this, ., escaped, =, Sets, .]
[=, jsScope, ;, this, ., compiler, =, compiler, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped]
[., jsScope, =, jsScope, ;, this, ., compiler, =, compiler, ;, this, ., escaped, =, Sets, ., newHashSet, (, )]
[;, this, ., compiler, =, compiler, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope]
[=, compiler, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,, escaped, ,, compiler]
[., compiler, =, compiler, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,, escaped]
[;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,, escaped, ,, compiler, ), ;]
[=, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,, escaped, ,, compiler, ), ;, }, static, class, Definition]
[., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,, escaped, ,, compiler, ), ;, }, static]
[;, computeEscaped, (, jsScope, ,, escaped, ,, compiler, ), ;, }, static, class, Definition, {, final, Node, node, ;, final]
[., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,, escaped, ,, compiler, ), ;, }, static, class, Definition, {, final]
[;, }, static, class, Definition, {, final, Node, node, ;, final, Set, <, Var, >, depends, =, Sets, ., newHashSet]
[,, escaped, ,, compiler, ), ;, }, static, class, Definition, {, final, Node, node, ;, final, Set, <, Var, >]
[,, compiler, ), ;, }, static, class, Definition, {, final, Node, node, ;, final, Set, <, Var, >, depends, =]
[), ;, }, static, class, Definition, {, final, Node, node, ;, final, Set, <, Var, >, depends, =, Sets, .]
[;, private, boolean, unknownDependencies, =, false, ;, Definition, (, Node, node, ), {, this, ., node, =, node, ;, }]
[., newHashSet, (, ), ;, private, boolean, unknownDependencies, =, false, ;, Definition, (, Node, node, ), {, this, ., node]
[;, Definition, (, Node, node, ), {, this, ., node, =, node, ;, }, @, Override, public, boolean, equals, (]
[=, node, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, !, (, other, instanceof]
[., node, =, node, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, !, (]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, !, (, other, instanceof, Definition, )]
[), {, return, false, ;, }, Definition, otherDef, =, (, Definition, ), other, ;, return, otherDef, ., node, ==, node]
[), {, return, false, ;, }, Definition, otherDef, =, (, Definition, ), other, ;, return, otherDef, ., node, ==, node]
[), ), {, return, false, ;, }, Definition, otherDef, =, (, Definition, ), other, ;, return, otherDef, ., node, ==]
[instanceof, Definition, ), ), {, return, false, ;, }, Definition, otherDef, =, (, Definition, ), other, ;, return, otherDef, .]
[;, }, Definition, otherDef, =, (, Definition, ), other, ;, return, otherDef, ., node, ==, node, ;, }, }, static]
[;, return, otherDef, ., node, ==, node, ;, }, }, static, final, class, MustDef, implements, LatticeElement, {, final, Map, <]
[;, return, otherDef, ., node, ==, node, ;, }, }, static, final, class, MustDef, implements, LatticeElement, {, final, Map, <]
[;, }, }, static, final, class, MustDef, implements, LatticeElement, {, final, Map, <, Var, ,, Definition, >, reachingDef, ;, public]
[==, node, ;, }, }, static, final, class, MustDef, implements, LatticeElement, {, final, Map, <, Var, ,, Definition, >, reachingDef]
[., node, ==, node, ;, }, }, static, final, class, MustDef, implements, LatticeElement, {, final, Map, <, Var, ,, Definition]
[;, }, }, static, final, class, MustDef, implements, LatticeElement, {, final, Map, <, Var, ,, Definition, >, reachingDef, ;, public]
[=, Maps, ., newHashMap, (, ), ;, }, public, MustDef, (, Iterator, <, Var, >, vars, ), {, this, (]
[;, }, public, MustDef, (, Iterator, <, Var, >, vars, ), {, this, (, ), ;, while, (, vars, .]
[., newHashMap, (, ), ;, }, public, MustDef, (, Iterator, <, Var, >, vars, ), {, this, (, ), ;]
[), {, Var, var, =, vars, ., next, (, ), ;, reachingDef, ., put, (, var, ,, new, Definition, (]
[., hasNext, (, ), ), {, Var, var, =, vars, ., next, (, ), ;, reachingDef, ., put, (, var]
[;, reachingDef, ., put, (, var, ,, new, Definition, (, var, ., scope, ., getRootNode, (, ), ), ), ;]
[., next, (, ), ;, reachingDef, ., put, (, var, ,, new, Definition, (, var, ., scope, ., getRootNode, (]
[;, }, }, public, MustDef, (, MustDef, other, ), {, reachingDef, =, Maps, ., newHashMap, (, other, ., reachingDef, )]
[., put, (, var, ,, new, Definition, (, var, ., scope, ., getRootNode, (, ), ), ), ;, }, }]
[,, new, Definition, (, var, ., scope, ., getRootNode, (, ), ), ), ;, }, }, public, MustDef, (, MustDef]
[), ;, }, }, public, MustDef, (, MustDef, other, ), {, reachingDef, =, Maps, ., newHashMap, (, other, ., reachingDef]
[), ), ;, }, }, public, MustDef, (, MustDef, other, ), {, reachingDef, =, Maps, ., newHashMap, (, other, .]
[., getRootNode, (, ), ), ), ;, }, }, public, MustDef, (, MustDef, other, ), {, reachingDef, =, Maps, .]
[., scope, ., getRootNode, (, ), ), ), ;, }, }, public, MustDef, (, MustDef, other, ), {, reachingDef, =]
[=, Maps, ., newHashMap, (, other, ., reachingDef, ), ;, }, @, Override, public, boolean, equals, (, Object, other, )]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, (, other, instanceof, MustDef, ), &&, (]
[., newHashMap, (, other, ., reachingDef, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return]
[), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, (, other, instanceof, MustDef, ), &&]
[., reachingDef, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, (, other, instanceof, MustDef]
[;, }, }, private, static, class, MustDefJoin, extends, JoinOp, ., BinaryJoinOp, <, MustDef, >, {, @, Override, public, MustDef, apply]
[&&, (, (, MustDef, ), other, ), ., reachingDef, ., equals, (, this, ., reachingDef, ), ;, }, }, private]
[), &&, (, (, MustDef, ), other, ), ., reachingDef, ., equals, (, this, ., reachingDef, ), ;, }, }]
[instanceof, MustDef, ), &&, (, (, MustDef, ), other, ), ., reachingDef, ., equals, (, this, ., reachingDef, ), ;]
[;, }, }, private, static, class, MustDefJoin, extends, JoinOp, ., BinaryJoinOp, <, MustDef, >, {, @, Override, public, MustDef, apply]
[., equals, (, this, ., reachingDef, ), ;, }, }, private, static, class, MustDefJoin, extends, JoinOp, ., BinaryJoinOp, <, MustDef]
[., reachingDef, ., equals, (, this, ., reachingDef, ), ;, }, }, private, static, class, MustDefJoin, extends, JoinOp, ., BinaryJoinOp]
[), ., reachingDef, ., equals, (, this, ., reachingDef, ), ;, }, }, private, static, class, MustDefJoin, extends, JoinOp, .]
[), ., reachingDef, ., equals, (, this, ., reachingDef, ), ;, }, }, private, static, class, MustDefJoin, extends, JoinOp, .]
[), ;, }, }, private, static, class, MustDefJoin, extends, JoinOp, ., BinaryJoinOp, <, MustDef, >, {, @, Override, public, MustDef]
[., reachingDef, ), ;, }, }, private, static, class, MustDefJoin, extends, JoinOp, ., BinaryJoinOp, <, MustDef, >, {, @, Override]
[;, Map, <, Var, ,, Definition, >, resultMap, =, result, ., reachingDef, ;, for, (, Map, ., Entry, <, Var]
[;, for, (, Map, ., Entry, <, Var, ,, Definition, >, varEntry, :, a, ., reachingDef, ., entrySet, (, )]
[., reachingDef, ;, for, (, Map, ., Entry, <, Var, ,, Definition, >, varEntry, :, a, ., reachingDef, ., entrySet]
[), {, Var, var, =, varEntry, ., getKey, (, ), ;, Definition, aDef, =, varEntry, ., getValue, (, ), ;]
[., entrySet, (, ), ), {, Var, var, =, varEntry, ., getKey, (, ), ;, Definition, aDef, =, varEntry, .]
[., reachingDef, ., entrySet, (, ), ), {, Var, var, =, varEntry, ., getKey, (, ), ;, Definition, aDef, =]
[;, Definition, aDef, =, varEntry, ., getValue, (, ), ;, if, (, aDef, ==, null, ), {, resultMap, ., put]
[., getKey, (, ), ;, Definition, aDef, =, varEntry, ., getValue, (, ), ;, if, (, aDef, ==, null, )]
[;, if, (, aDef, ==, null, ), {, resultMap, ., put, (, var, ,, null, ), ;, continue, ;, }]
[., getValue, (, ), ;, if, (, aDef, ==, null, ), {, resultMap, ., put, (, var, ,, null, )]
[), {, resultMap, ., put, (, var, ,, null, ), ;, continue, ;, }, Node, aNode, =, aDef, ., node]
[==, null, ), {, resultMap, ., put, (, var, ,, null, ), ;, continue, ;, }, Node, aNode, =, aDef]
[), {, resultMap, ., put, (, var, ,, null, ), ;, continue, ;, }, Node, aNode, =, aDef, ., node]
[;, continue, ;, }, Node, aNode, =, aDef, ., node, ;, if, (, b, ., reachingDef, ., containsKey, (, var]
[., put, (, var, ,, null, ), ;, continue, ;, }, Node, aNode, =, aDef, ., node, ;, if, (]
[,, null, ), ;, continue, ;, }, Node, aNode, =, aDef, ., node, ;, if, (, b, ., reachingDef, .]
[), ;, continue, ;, }, Node, aNode, =, aDef, ., node, ;, if, (, b, ., reachingDef, ., containsKey, (]
[;, if, (, b, ., reachingDef, ., containsKey, (, var, ), ), {, Definition, bDef, =, b, ., reachingDef, .]
[., node, ;, if, (, b, ., reachingDef, ., containsKey, (, var, ), ), {, Definition, bDef, =, b, .]
[), {, Definition, bDef, =, b, ., reachingDef, ., get, (, var, ), ;, if, (, aDef, ., equals, (]
[., containsKey, (, var, ), ), {, Definition, bDef, =, b, ., reachingDef, ., get, (, var, ), ;, if]
[., reachingDef, ., containsKey, (, var, ), ), {, Definition, bDef, =, b, ., reachingDef, ., get, (, var, )]
[), ), {, Definition, bDef, =, b, ., reachingDef, ., get, (, var, ), ;, if, (, aDef, ., equals]
[;, if, (, aDef, ., equals, (, bDef, ), ), {, resultMap, ., put, (, var, ,, aDef, ), ;]
[., get, (, var, ), ;, if, (, aDef, ., equals, (, bDef, ), ), {, resultMap, ., put, (]
[., reachingDef, ., get, (, var, ), ;, if, (, aDef, ., equals, (, bDef, ), ), {, resultMap, .]
[), ;, if, (, aDef, ., equals, (, bDef, ), ), {, resultMap, ., put, (, var, ,, aDef, )]
[), {, resultMap, ., put, (, var, ,, aDef, ), ;, }, else, {, resultMap, ., put, (, var, ,]
[., equals, (, bDef, ), ), {, resultMap, ., put, (, var, ,, aDef, ), ;, }, else, {, resultMap]
[), ), {, resultMap, ., put, (, var, ,, aDef, ), ;, }, else, {, resultMap, ., put, (, var]
[;, }, else, {, resultMap, ., put, (, var, ,, null, ), ;, }, }, else, {, resultMap, ., put]
[., put, (, var, ,, aDef, ), ;, }, else, {, resultMap, ., put, (, var, ,, null, ), ;]
[,, aDef, ), ;, }, else, {, resultMap, ., put, (, var, ,, null, ), ;, }, }, else, {]
[), ;, }, else, {, resultMap, ., put, (, var, ,, null, ), ;, }, }, else, {, resultMap, .]
[;, }, }, else, {, resultMap, ., put, (, var, ,, aDef, ), ;, }, }, for, (, Map, .]
[., put, (, var, ,, null, ), ;, }, }, else, {, resultMap, ., put, (, var, ,, aDef, )]
[,, null, ), ;, }, }, else, {, resultMap, ., put, (, var, ,, aDef, ), ;, }, }, for]
[), ;, }, }, else, {, resultMap, ., put, (, var, ,, aDef, ), ;, }, }, for, (, Map]
[;, }, }, for, (, Map, ., Entry, <, Var, ,, Definition, >, entry, :, b, ., reachingDef, ., entrySet]
[., put, (, var, ,, aDef, ), ;, }, }, for, (, Map, ., Entry, <, Var, ,, Definition, >]
[,, aDef, ), ;, }, }, for, (, Map, ., Entry, <, Var, ,, Definition, >, entry, :, b, .]
[), ;, }, }, for, (, Map, ., Entry, <, Var, ,, Definition, >, entry, :, b, ., reachingDef, .]
[), {, Var, var, =, entry, ., getKey, (, ), ;, if, (, !, a, ., reachingDef, ., containsKey, (]
[., entrySet, (, ), ), {, Var, var, =, entry, ., getKey, (, ), ;, if, (, !, a, .]
[., reachingDef, ., entrySet, (, ), ), {, Var, var, =, entry, ., getKey, (, ), ;, if, (, !]
[;, if, (, !, a, ., reachingDef, ., containsKey, (, var, ), ), {, resultMap, ., put, (, var, ,]
[., getKey, (, ), ;, if, (, !, a, ., reachingDef, ., containsKey, (, var, ), ), {, resultMap, .]
[), {, resultMap, ., put, (, var, ,, entry, ., getValue, (, ), ), ;, }, }, return, result, ;]
[), {, resultMap, ., put, (, var, ,, entry, ., getValue, (, ), ), ;, }, }, return, result, ;]
[., containsKey, (, var, ), ), {, resultMap, ., put, (, var, ,, entry, ., getValue, (, ), ), ;]
[., reachingDef, ., containsKey, (, var, ), ), {, resultMap, ., put, (, var, ,, entry, ., getValue, (, )]
[), ), {, resultMap, ., put, (, var, ,, entry, ., getValue, (, ), ), ;, }, }, return, result]
[;, }, }, return, result, ;, }, }, @, Override, boolean, isForward, (, ), {, return, true, ;, }, @]
[., put, (, var, ,, entry, ., getValue, (, ), ), ;, }, }, return, result, ;, }, }, @]
[,, entry, ., getValue, (, ), ), ;, }, }, return, result, ;, }, }, @, Override, boolean, isForward, (]
[), ;, }, }, return, result, ;, }, }, @, Override, boolean, isForward, (, ), {, return, true, ;, }]
[., getValue, (, ), ), ;, }, }, return, result, ;, }, }, @, Override, boolean, isForward, (, ), {]
[;, }, }, @, Override, boolean, isForward, (, ), {, return, true, ;, }, @, Override, MustDef, createEntryLattice, (, )]
[;, }, @, Override, MustDef, createEntryLattice, (, ), {, return, new, MustDef, (, jsScope, ., getVars, (, ), ), ;]
[;, }, @, Override, MustDef, createInitialEstimateLattice, (, ), {, return, new, MustDef, (, ), ;, }, @, Override, MustDef, flowThrough]
[), ;, }, @, Override, MustDef, createInitialEstimateLattice, (, ), {, return, new, MustDef, (, ), ;, }, @, Override, MustDef]
[., getVars, (, ), ), ;, }, @, Override, MustDef, createInitialEstimateLattice, (, ), {, return, new, MustDef, (, ), ;]
[;, }, @, Override, MustDef, flowThrough, (, Node, n, ,, MustDef, input, ), {, MustDef, output, =, new, MustDef, (]
[;, computeMustDef, (, n, ,, n, ,, output, ,, false, ), ;, return, output, ;, }, private, void, computeMustDef, (]
[), ;, computeMustDef, (, n, ,, n, ,, output, ,, false, ), ;, return, output, ;, }, private, void, computeMustDef]
[;, return, output, ;, }, private, void, computeMustDef, (, Node, n, ,, Node, cfgNode, ,, MustDef, output, ,, boolean, conditional]
[,, n, ,, output, ,, false, ), ;, return, output, ;, }, private, void, computeMustDef, (, Node, n, ,, Node]
[,, output, ,, false, ), ;, return, output, ;, }, private, void, computeMustDef, (, Node, n, ,, Node, cfgNode, ,]
[,, false, ), ;, return, output, ;, }, private, void, computeMustDef, (, Node, n, ,, Node, cfgNode, ,, MustDef, output]
[), ;, return, output, ;, }, private, void, computeMustDef, (, Node, n, ,, Node, cfgNode, ,, MustDef, output, ,, boolean]
[;, }, private, void, computeMustDef, (, Node, n, ,, Node, cfgNode, ,, MustDef, output, ,, boolean, conditional, ), {, switch]
[), {, case, Token, ., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case, Token, ., WHILE, :, case]
[., getType, (, ), ), {, case, Token, ., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case, Token]
[:, case, Token, ., FUNCTION, :, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token]
[., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :]
[:, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :, computeMustDef, (]
[., FUNCTION, :, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :]
[:, case, Token, ., DO, :, case, Token, ., IF, :, computeMustDef, (, NodeUtil, ., getConditionExpression, (, n, ), ,]
[., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :, computeMustDef, (, NodeUtil, ., getConditionExpression, (, n]
[:, case, Token, ., IF, :, computeMustDef, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional]
[., DO, :, case, Token, ., IF, :, computeMustDef, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output]
[:, computeMustDef, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case]
[., IF, :, computeMustDef, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return]
[;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, computeMustDef]
[,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, .]
[., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :]
[), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil]
[,, output, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (]
[,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, )]
[), ;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {]
[:, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, computeMustDef, (, NodeUtil, ., getConditionExpression, (, n, )]
[., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, computeMustDef, (, NodeUtil, ., getConditionExpression, (]
[), {, computeMustDef, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, }, else]
[), {, computeMustDef, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, }, else]
[., isForIn, (, n, ), ), {, computeMustDef, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,]
[), ), {, computeMustDef, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, }]
[;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (]
[,, cfgNode, ,, output, ,, conditional, ), ;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, ), ;]
[., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, }, else, {, Node, lhs, =, n]
[), ,, cfgNode, ,, output, ,, conditional, ), ;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, )]
[,, output, ,, conditional, ), ;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs]
[,, conditional, ), ;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs]
[), ;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext]
[;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, lhs, ., isVar, (, ), ), {, lhs]
[., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, lhs, ., isVar, (]
[;, if, (, lhs, ., isVar, (, ), ), {, lhs, =, lhs, ., getLastChild, (, ), ;, }, if]
[., getNext, (, ), ;, if, (, lhs, ., isVar, (, ), ), {, lhs, =, lhs, ., getLastChild, (]
[), {, lhs, =, lhs, ., getLastChild, (, ), ;, }, if, (, lhs, ., isName, (, ), ), {]
[., isVar, (, ), ), {, lhs, =, lhs, ., getLastChild, (, ), ;, }, if, (, lhs, ., isName]
[=, lhs, ., getLastChild, (, ), ;, }, if, (, lhs, ., isName, (, ), ), {, addToDefIfLocal, (, lhs]
[;, }, if, (, lhs, ., isName, (, ), ), {, addToDefIfLocal, (, lhs, ., getString, (, ), ,, cfgNode]
[., getLastChild, (, ), ;, }, if, (, lhs, ., isName, (, ), ), {, addToDefIfLocal, (, lhs, ., getString]
[), {, addToDefIfLocal, (, lhs, ., getString, (, ), ,, cfgNode, ,, rhs, ,, output, ), ;, }, }, return]
[., isName, (, ), ), {, addToDefIfLocal, (, lhs, ., getString, (, ), ,, cfgNode, ,, rhs, ,, output, )]
[;, }, }, return, ;, case, Token, ., AND, :, case, Token, ., OR, :, computeMustDef, (, n, ., getFirstChild]
[,, cfgNode, ,, rhs, ,, output, ), ;, }, }, return, ;, case, Token, ., AND, :, case, Token, .]
[., getString, (, ), ,, cfgNode, ,, rhs, ,, output, ), ;, }, }, return, ;, case, Token, ., AND]
[,, rhs, ,, output, ), ;, }, }, return, ;, case, Token, ., AND, :, case, Token, ., OR, :]
[,, output, ), ;, }, }, return, ;, case, Token, ., AND, :, case, Token, ., OR, :, computeMustDef, (]
[), ;, }, }, return, ;, case, Token, ., AND, :, case, Token, ., OR, :, computeMustDef, (, n, .]
[:, case, Token, ., OR, :, computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, )]
[., AND, :, case, Token, ., OR, :, computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,]
[:, computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, computeMustDef, (, n, .]
[., OR, :, computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, computeMustDef, (]
[;, computeMustDef, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, return, ;, case, Token]
[,, cfgNode, ,, output, ,, conditional, ), ;, computeMustDef, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,]
[., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, computeMustDef, (, n, ., getLastChild, (, ), ,]
[,, output, ,, conditional, ), ;, computeMustDef, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, )]
[,, conditional, ), ;, computeMustDef, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, return]
[), ;, computeMustDef, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, return, ;, case]
[;, return, ;, case, Token, ., HOOK, :, computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,]
[,, cfgNode, ,, output, ,, true, ), ;, return, ;, case, Token, ., HOOK, :, computeMustDef, (, n, ., getFirstChild]
[., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, return, ;, case, Token, ., HOOK, :, computeMustDef]
[,, output, ,, true, ), ;, return, ;, case, Token, ., HOOK, :, computeMustDef, (, n, ., getFirstChild, (, )]
[,, true, ), ;, return, ;, case, Token, ., HOOK, :, computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode]
[), ;, return, ;, case, Token, ., HOOK, :, computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output]
[:, computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, computeMustDef, (, n, .]
[., HOOK, :, computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, computeMustDef, (]
[;, computeMustDef, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,, output, ,, true, ), ;]
[,, cfgNode, ,, output, ,, conditional, ), ;, computeMustDef, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,]
[., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, computeMustDef, (, n, ., getFirstChild, (, ), .]
[,, output, ,, conditional, ), ;, computeMustDef, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,]
[,, conditional, ), ;, computeMustDef, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,, output, ,]
[), ;, computeMustDef, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,, output, ,, true, )]
[;, computeMustDef, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, return, ;, case, Token]
[,, cfgNode, ,, output, ,, true, ), ;, computeMustDef, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,]
[., getNext, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMustDef, (, n, ., getLastChild, (, ), ,]
[., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMustDef, (, n, .]
[,, output, ,, true, ), ;, computeMustDef, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, )]
[,, true, ), ;, computeMustDef, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, return]
[), ;, computeMustDef, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, return, ;, case]
[;, return, ;, case, Token, ., VAR, :, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c]
[,, cfgNode, ,, output, ,, true, ), ;, return, ;, case, Token, ., VAR, :, for, (, Node, c, =]
[., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, return, ;, case, Token, ., VAR, :, for]
[,, output, ,, true, ), ;, return, ;, case, Token, ., VAR, :, for, (, Node, c, =, n, .]
[,, true, ), ;, return, ;, case, Token, ., VAR, :, for, (, Node, c, =, n, ., getFirstChild, (]
[), ;, return, ;, case, Token, ., VAR, :, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[:, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, .]
[., VAR, :, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., hasChildren, (]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., hasChildren, (, ), ), {, computeMustDef]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., hasChildren, (, ), )]
[;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., hasChildren, (, ), ), {, computeMustDef]
[=, c, ., getNext, (, ), ), {, if, (, c, ., hasChildren, (, ), ), {, computeMustDef, (, c]
[), {, if, (, c, ., hasChildren, (, ), ), {, computeMustDef, (, c, ., getFirstChild, (, ), ,, cfgNode]
[., getNext, (, ), ), {, if, (, c, ., hasChildren, (, ), ), {, computeMustDef, (, c, ., getFirstChild]
[), {, computeMustDef, (, c, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, addToDefIfLocal, (, c]
[., hasChildren, (, ), ), {, computeMustDef, (, c, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, )]
[;, addToDefIfLocal, (, c, ., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,, c, ., getFirstChild, (, )]
[,, cfgNode, ,, output, ,, conditional, ), ;, addToDefIfLocal, (, c, ., getString, (, ), ,, conditional, ?, null, :]
[., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, addToDefIfLocal, (, c, ., getString, (, ), ,]
[,, output, ,, conditional, ), ;, addToDefIfLocal, (, c, ., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,]
[,, conditional, ), ;, addToDefIfLocal, (, c, ., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,, c, .]
[), ;, addToDefIfLocal, (, c, ., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,, c, ., getFirstChild, (]
[;, }, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, n, ), ), {, if, (, n]
[,, conditional, ?, null, :, cfgNode, ,, c, ., getFirstChild, (, ), ,, output, ), ;, }, }, return, ;]
[., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,, c, ., getFirstChild, (, ), ,, output, ), ;]
[,, c, ., getFirstChild, (, ), ,, output, ), ;, }, }, return, ;, default, :, if, (, NodeUtil, .]
[?, null, :, cfgNode, ,, c, ., getFirstChild, (, ), ,, output, ), ;, }, }, return, ;, default, :]
[:, cfgNode, ,, c, ., getFirstChild, (, ), ,, output, ), ;, }, }, return, ;, default, :, if, (]
[,, c, ., getFirstChild, (, ), ,, output, ), ;, }, }, return, ;, default, :, if, (, NodeUtil, .]
[,, output, ), ;, }, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, n, ), ), {]
[., getFirstChild, (, ), ,, output, ), ;, }, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (]
[), ;, }, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, n, ), ), {, if, (]
[), {, if, (, n, ., getFirstChild, (, ), ., isName, (, ), ), {, Node, name, =, n, .]
[., isAssignmentOp, (, n, ), ), {, if, (, n, ., getFirstChild, (, ), ., isName, (, ), ), {]
[), ), {, if, (, n, ., getFirstChild, (, ), ., isName, (, ), ), {, Node, name, =, n]
[), {, Node, name, =, n, ., getFirstChild, (, ), ;, computeMustDef, (, name, ., getNext, (, ), ,, cfgNode]
[., isName, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, computeMustDef, (, name, ., getNext]
[., getFirstChild, (, ), ., isName, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, computeMustDef]
[;, computeMustDef, (, name, ., getNext, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, addToDefIfLocal, (, name, .]
[., getFirstChild, (, ), ;, computeMustDef, (, name, ., getNext, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;]
[;, addToDefIfLocal, (, name, ., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,, n, ., getLastChild, (, )]
[,, cfgNode, ,, output, ,, conditional, ), ;, addToDefIfLocal, (, name, ., getString, (, ), ,, conditional, ?, null, :]
[., getNext, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, addToDefIfLocal, (, name, ., getString, (, ), ,]
[,, output, ,, conditional, ), ;, addToDefIfLocal, (, name, ., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,]
[,, conditional, ), ;, addToDefIfLocal, (, name, ., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,, n, .]
[), ;, addToDefIfLocal, (, name, ., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,, n, ., getLastChild, (]
[;, return, ;, }, else, if, (, NodeUtil, ., isGet, (, n, ., getFirstChild, (, ), ), ), {, Node]
[,, conditional, ?, null, :, cfgNode, ,, n, ., getLastChild, (, ), ,, output, ), ;, return, ;, }, else]
[., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,, n, ., getLastChild, (, ), ,, output, ), ;]
[,, n, ., getLastChild, (, ), ,, output, ), ;, return, ;, }, else, if, (, NodeUtil, ., isGet, (]
[?, null, :, cfgNode, ,, n, ., getLastChild, (, ), ,, output, ), ;, return, ;, }, else, if, (]
[:, cfgNode, ,, n, ., getLastChild, (, ), ,, output, ), ;, return, ;, }, else, if, (, NodeUtil, .]
[,, n, ., getLastChild, (, ), ,, output, ), ;, return, ;, }, else, if, (, NodeUtil, ., isGet, (]
[,, output, ), ;, return, ;, }, else, if, (, NodeUtil, ., isGet, (, n, ., getFirstChild, (, ), )]
[., getLastChild, (, ), ,, output, ), ;, return, ;, }, else, if, (, NodeUtil, ., isGet, (, n, .]
[), ;, return, ;, }, else, if, (, NodeUtil, ., isGet, (, n, ., getFirstChild, (, ), ), ), {]
[), {, Node, obj, =, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, if, (, obj, ., isName]
[., isGet, (, n, ., getFirstChild, (, ), ), ), {, Node, obj, =, n, ., getFirstChild, (, ), .]
[), ), {, Node, obj, =, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, if, (, obj, .]
[., getFirstChild, (, ), ), ), {, Node, obj, =, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;]
[;, if, (, obj, ., isName, (, ), &&, "arguments", ., equals, (, obj, ., getString, (, ), ), )]
[., getFirstChild, (, ), ;, if, (, obj, ., isName, (, ), &&, "arguments", ., equals, (, obj, ., getString]
[., getFirstChild, (, ), ., getFirstChild, (, ), ;, if, (, obj, ., isName, (, ), &&, "arguments", ., equals]
[), {, escapeParameters, (, output, ), ;, }, }, }, if, (, n, ., isName, (, ), &&, "arguments", .]
[&&, "arguments", ., equals, (, obj, ., getString, (, ), ), ), {, escapeParameters, (, output, ), ;, }, }]
[., isName, (, ), &&, "arguments", ., equals, (, obj, ., getString, (, ), ), ), {, escapeParameters, (, output]
[), {, escapeParameters, (, output, ), ;, }, }, }, if, (, n, ., isName, (, ), &&, "arguments", .]
[., equals, (, obj, ., getString, (, ), ), ), {, escapeParameters, (, output, ), ;, }, }, }, if]
[), ), {, escapeParameters, (, output, ), ;, }, }, }, if, (, n, ., isName, (, ), &&, "arguments"]
[., getString, (, ), ), ), {, escapeParameters, (, output, ), ;, }, }, }, if, (, n, ., isName]
[;, }, }, }, if, (, n, ., isName, (, ), &&, "arguments", ., equals, (, n, ., getString, (]
[), ;, }, }, }, if, (, n, ., isName, (, ), &&, "arguments", ., equals, (, n, ., getString]
[), {, escapeParameters, (, output, ), ;, }, if, (, n, ., isDec, (, ), ||, n, ., isInc, (]
[&&, "arguments", ., equals, (, n, ., getString, (, ), ), ), {, escapeParameters, (, output, ), ;, }, if]
[., isName, (, ), &&, "arguments", ., equals, (, n, ., getString, (, ), ), ), {, escapeParameters, (, output]
[), {, escapeParameters, (, output, ), ;, }, if, (, n, ., isDec, (, ), ||, n, ., isInc, (]
[., equals, (, n, ., getString, (, ), ), ), {, escapeParameters, (, output, ), ;, }, if, (, n]
[), ), {, escapeParameters, (, output, ), ;, }, if, (, n, ., isDec, (, ), ||, n, ., isInc]
[., getString, (, ), ), ), {, escapeParameters, (, output, ), ;, }, if, (, n, ., isDec, (, )]
[;, }, if, (, n, ., isDec, (, ), ||, n, ., isInc, (, ), ), {, Node, target, =]
[), ;, }, if, (, n, ., isDec, (, ), ||, n, ., isInc, (, ), ), {, Node, target]
[), {, Node, target, =, n, ., getFirstChild, (, ), ;, if, (, target, ., isName, (, ), ), {]
[||, n, ., isInc, (, ), ), {, Node, target, =, n, ., getFirstChild, (, ), ;, if, (, target]
[., isDec, (, ), ||, n, ., isInc, (, ), ), {, Node, target, =, n, ., getFirstChild, (, )]
[), {, Node, target, =, n, ., getFirstChild, (, ), ;, if, (, target, ., isName, (, ), ), {]
[., isInc, (, ), ), {, Node, target, =, n, ., getFirstChild, (, ), ;, if, (, target, ., isName]
[;, if, (, target, ., isName, (, ), ), {, addToDefIfLocal, (, target, ., getString, (, ), ,, conditional, ?]
[., getFirstChild, (, ), ;, if, (, target, ., isName, (, ), ), {, addToDefIfLocal, (, target, ., getString, (]
[), {, addToDefIfLocal, (, target, ., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,, null, ,, output, )]
[., isName, (, ), ), {, addToDefIfLocal, (, target, ., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,]
[;, return, ;, }, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[,, conditional, ?, null, :, cfgNode, ,, null, ,, output, ), ;, return, ;, }, }, for, (, Node, c]
[., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,, null, ,, output, ), ;, return, ;, }, }]
[,, null, ,, output, ), ;, return, ;, }, }, for, (, Node, c, =, n, ., getFirstChild, (, )]
[?, null, :, cfgNode, ,, null, ,, output, ), ;, return, ;, }, }, for, (, Node, c, =, n]
[:, cfgNode, ,, null, ,, output, ), ;, return, ;, }, }, for, (, Node, c, =, n, ., getFirstChild]
[,, null, ,, output, ), ;, return, ;, }, }, for, (, Node, c, =, n, ., getFirstChild, (, )]
[,, output, ), ;, return, ;, }, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c]
[), ;, return, ;, }, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, computeMustDef, (, c, ,, cfgNode, ,]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, computeMustDef, (]
[;, c, =, c, ., getNext, (, ), ), {, computeMustDef, (, c, ,, cfgNode, ,, output, ,, conditional, )]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, computeMustDef, (, c, ,, cfgNode, ,, output, ,]
[;, c, =, c, ., getNext, (, ), ), {, computeMustDef, (, c, ,, cfgNode, ,, output, ,, conditional, )]
[=, c, ., getNext, (, ), ), {, computeMustDef, (, c, ,, cfgNode, ,, output, ,, conditional, ), ;, }]
[), {, computeMustDef, (, c, ,, cfgNode, ,, output, ,, conditional, ), ;, }, }, }, private, void, addToDefIfLocal, (]
[., getNext, (, ), ), {, computeMustDef, (, c, ,, cfgNode, ,, output, ,, conditional, ), ;, }, }, }]
[;, }, }, }, private, void, addToDefIfLocal, (, String, name, ,, @, Nullable, Node, node, ,, @, Nullable, Node, rValue]
[,, cfgNode, ,, output, ,, conditional, ), ;, }, }, }, private, void, addToDefIfLocal, (, String, name, ,, @, Nullable]
[,, output, ,, conditional, ), ;, }, }, }, private, void, addToDefIfLocal, (, String, name, ,, @, Nullable, Node, node]
[,, conditional, ), ;, }, }, }, private, void, addToDefIfLocal, (, String, name, ,, @, Nullable, Node, node, ,, @]
[), ;, }, }, }, private, void, addToDefIfLocal, (, String, name, ,, @, Nullable, Node, node, ,, @, Nullable, Node]
[;, if, (, var, ==, null, ||, var, ., scope, !=, jsScope, ), {, return, ;, }, for, (, Var]
[., getVar, (, name, ), ;, if, (, var, ==, null, ||, var, ., scope, !=, jsScope, ), {, return]
[), ;, if, (, var, ==, null, ||, var, ., scope, !=, jsScope, ), {, return, ;, }, for, (]
[), {, return, ;, }, for, (, Var, other, :, def, ., reachingDef, ., keySet, (, ), ), {, Definition]
[||, var, ., scope, !=, jsScope, ), {, return, ;, }, for, (, Var, other, :, def, ., reachingDef, .]
[==, null, ||, var, ., scope, !=, jsScope, ), {, return, ;, }, for, (, Var, other, :, def, .]
[||, var, ., scope, !=, jsScope, ), {, return, ;, }, for, (, Var, other, :, def, ., reachingDef, .]
[), {, return, ;, }, for, (, Var, other, :, def, ., reachingDef, ., keySet, (, ), ), {, Definition]
[!=, jsScope, ), {, return, ;, }, for, (, Var, other, :, def, ., reachingDef, ., keySet, (, ), )]
[., scope, !=, jsScope, ), {, return, ;, }, for, (, Var, other, :, def, ., reachingDef, ., keySet, (]
[), {, return, ;, }, for, (, Var, other, :, def, ., reachingDef, ., keySet, (, ), ), {, Definition]
[), {, Definition, otherDef, =, def, ., reachingDef, ., get, (, other, ), ;, if, (, otherDef, ==, null, )]
[., keySet, (, ), ), {, Definition, otherDef, =, def, ., reachingDef, ., get, (, other, ), ;, if, (]
[., reachingDef, ., keySet, (, ), ), {, Definition, otherDef, =, def, ., reachingDef, ., get, (, other, ), ;]
[;, if, (, otherDef, ==, null, ), {, continue, ;, }, if, (, otherDef, ., depends, ., contains, (, var]
[., get, (, other, ), ;, if, (, otherDef, ==, null, ), {, continue, ;, }, if, (, otherDef, .]
[., reachingDef, ., get, (, other, ), ;, if, (, otherDef, ==, null, ), {, continue, ;, }, if, (]
[), ;, if, (, otherDef, ==, null, ), {, continue, ;, }, if, (, otherDef, ., depends, ., contains, (]
[), {, continue, ;, }, if, (, otherDef, ., depends, ., contains, (, var, ), ), {, def, ., reachingDef]
[==, null, ), {, continue, ;, }, if, (, otherDef, ., depends, ., contains, (, var, ), ), {, def]
[), {, continue, ;, }, if, (, otherDef, ., depends, ., contains, (, var, ), ), {, def, ., reachingDef]
[), {, def, ., reachingDef, ., put, (, other, ,, null, ), ;, }, }, if, (, !, escaped, .]
[., contains, (, var, ), ), {, def, ., reachingDef, ., put, (, other, ,, null, ), ;, }, }]
[., depends, ., contains, (, var, ), ), {, def, ., reachingDef, ., put, (, other, ,, null, ), ;]
[), ), {, def, ., reachingDef, ., put, (, other, ,, null, ), ;, }, }, if, (, !, escaped]
[;, }, }, if, (, !, escaped, ., contains, (, var, ), ), {, if, (, node, ==, null, )]
[., put, (, other, ,, null, ), ;, }, }, if, (, !, escaped, ., contains, (, var, ), )]
[., reachingDef, ., put, (, other, ,, null, ), ;, }, }, if, (, !, escaped, ., contains, (, var]
[,, null, ), ;, }, }, if, (, !, escaped, ., contains, (, var, ), ), {, if, (, node]
[), ;, }, }, if, (, !, escaped, ., contains, (, var, ), ), {, if, (, node, ==, null]
[), {, if, (, node, ==, null, ), {, def, ., reachingDef, ., put, (, var, ,, null, ), ;]
[), {, if, (, node, ==, null, ), {, def, ., reachingDef, ., put, (, var, ,, null, ), ;]
[., contains, (, var, ), ), {, if, (, node, ==, null, ), {, def, ., reachingDef, ., put, (]
[), ), {, if, (, node, ==, null, ), {, def, ., reachingDef, ., put, (, var, ,, null, )]
[), {, def, ., reachingDef, ., put, (, var, ,, null, ), ;, }, else, {, Definition, definition, =, new]
[==, null, ), {, def, ., reachingDef, ., put, (, var, ,, null, ), ;, }, else, {, Definition, definition]
[), {, def, ., reachingDef, ., put, (, var, ,, null, ), ;, }, else, {, Definition, definition, =, new]
[;, }, else, {, Definition, definition, =, new, Definition, (, node, ), ;, if, (, rValue, !=, null, ), {]
[., put, (, var, ,, null, ), ;, }, else, {, Definition, definition, =, new, Definition, (, node, ), ;]
[., reachingDef, ., put, (, var, ,, null, ), ;, }, else, {, Definition, definition, =, new, Definition, (, node]
[,, null, ), ;, }, else, {, Definition, definition, =, new, Definition, (, node, ), ;, if, (, rValue, !=]
[), ;, }, else, {, Definition, definition, =, new, Definition, (, node, ), ;, if, (, rValue, !=, null, )]
[;, if, (, rValue, !=, null, ), {, computeDependence, (, definition, ,, rValue, ), ;, }, def, ., reachingDef, .]
[), ;, if, (, rValue, !=, null, ), {, computeDependence, (, definition, ,, rValue, ), ;, }, def, ., reachingDef]
[), {, computeDependence, (, definition, ,, rValue, ), ;, }, def, ., reachingDef, ., put, (, var, ,, definition, )]
[!=, null, ), {, computeDependence, (, definition, ,, rValue, ), ;, }, def, ., reachingDef, ., put, (, var, ,]
[), {, computeDependence, (, definition, ,, rValue, ), ;, }, def, ., reachingDef, ., put, (, var, ,, definition, )]
[;, }, def, ., reachingDef, ., put, (, var, ,, definition, ), ;, }, }, }, private, void, escapeParameters, (]
[,, rValue, ), ;, }, def, ., reachingDef, ., put, (, var, ,, definition, ), ;, }, }, }, private]
[), ;, }, def, ., reachingDef, ., put, (, var, ,, definition, ), ;, }, }, }, private, void, escapeParameters]
[;, }, }, }, private, void, escapeParameters, (, MustDef, output, ), {, for, (, Iterator, <, Var, >, i, =]
[., put, (, var, ,, definition, ), ;, }, }, }, private, void, escapeParameters, (, MustDef, output, ), {, for]
[., reachingDef, ., put, (, var, ,, definition, ), ;, }, }, }, private, void, escapeParameters, (, MustDef, output, )]
[,, definition, ), ;, }, }, }, private, void, escapeParameters, (, MustDef, output, ), {, for, (, Iterator, <, Var]
[), ;, }, }, }, private, void, escapeParameters, (, MustDef, output, ), {, for, (, Iterator, <, Var, >, i]
[;, i, ., hasNext, (, ), ;, ), {, Var, v, =, i, ., next, (, ), ;, if, (]
[., getVars, (, ), ;, i, ., hasNext, (, ), ;, ), {, Var, v, =, i, ., next, (]
[;, ), {, Var, v, =, i, ., next, (, ), ;, if, (, isParameter, (, v, ), ), {]
[., hasNext, (, ), ;, ), {, Var, v, =, i, ., next, (, ), ;, if, (, isParameter, (]
[;, if, (, isParameter, (, v, ), ), {, output, ., reachingDef, ., put, (, v, ,, null, ), ;]
[., next, (, ), ;, if, (, isParameter, (, v, ), ), {, output, ., reachingDef, ., put, (, v]
[), {, output, ., reachingDef, ., put, (, v, ,, null, ), ;, }, }, for, (, Entry, <, Var]
[), ), {, output, ., reachingDef, ., put, (, v, ,, null, ), ;, }, }, for, (, Entry, <]
[;, }, }, for, (, Entry, <, Var, ,, Definition, >, pair, :, output, ., reachingDef, ., entrySet, (, )]
[., put, (, v, ,, null, ), ;, }, }, for, (, Entry, <, Var, ,, Definition, >, pair, :]
[., reachingDef, ., put, (, v, ,, null, ), ;, }, }, for, (, Entry, <, Var, ,, Definition, >]
[,, null, ), ;, }, }, for, (, Entry, <, Var, ,, Definition, >, pair, :, output, ., reachingDef, .]
[), ;, }, }, for, (, Entry, <, Var, ,, Definition, >, pair, :, output, ., reachingDef, ., entrySet, (]
[), {, Definition, value, =, pair, ., getValue, (, ), ;, if, (, value, ==, null, ), {, continue, ;]
[., entrySet, (, ), ), {, Definition, value, =, pair, ., getValue, (, ), ;, if, (, value, ==, null]
[., reachingDef, ., entrySet, (, ), ), {, Definition, value, =, pair, ., getValue, (, ), ;, if, (, value]
[;, if, (, value, ==, null, ), {, continue, ;, }, for, (, Var, dep, :, value, ., depends, )]
[., getValue, (, ), ;, if, (, value, ==, null, ), {, continue, ;, }, for, (, Var, dep, :]
[), {, continue, ;, }, for, (, Var, dep, :, value, ., depends, ), {, if, (, isParameter, (, dep]
[==, null, ), {, continue, ;, }, for, (, Var, dep, :, value, ., depends, ), {, if, (, isParameter]
[), {, continue, ;, }, for, (, Var, dep, :, value, ., depends, ), {, if, (, isParameter, (, dep]
[), {, if, (, isParameter, (, dep, ), ), {, output, ., reachingDef, ., put, (, pair, ., getKey, (]
[., depends, ), {, if, (, isParameter, (, dep, ), ), {, output, ., reachingDef, ., put, (, pair, .]
[), {, output, ., reachingDef, ., put, (, pair, ., getKey, (, ), ,, null, ), ;, }, }, }]
[), ), {, output, ., reachingDef, ., put, (, pair, ., getKey, (, ), ,, null, ), ;, }, }]
[;, }, }, }, }, private, boolean, isParameter, (, Var, v, ), {, return, v, ., getParentNode, (, ), .]
[., put, (, pair, ., getKey, (, ), ,, null, ), ;, }, }, }, }, private, boolean, isParameter, (]
[., reachingDef, ., put, (, pair, ., getKey, (, ), ,, null, ), ;, }, }, }, }, private, boolean]
[,, null, ), ;, }, }, }, }, private, boolean, isParameter, (, Var, v, ), {, return, v, ., getParentNode]
[., getKey, (, ), ,, null, ), ;, }, }, }, }, private, boolean, isParameter, (, Var, v, ), {]
[), ;, }, }, }, }, private, boolean, isParameter, (, Var, v, ), {, return, v, ., getParentNode, (, )]
[;, }, private, void, computeDependence, (, final, Definition, def, ,, Node, rValue, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[., isParamList, (, ), ;, }, private, void, computeDependence, (, final, Definition, def, ,, Node, rValue, ), {, NodeTraversal, .]
[., getParentNode, (, ), ., isParamList, (, ), ;, }, private, void, computeDependence, (, final, Definition, def, ,, Node, rValue]
[;, }, Definition, getDef, (, String, name, ,, Node, useNode, ), {, Preconditions, ., checkArgument, (, getCfg, (, ), .]
[., traverse, (, compiler, ,, rValue, ,, new, AbstractCfgNodeTraversalCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t]
[,, rValue, ,, new, AbstractCfgNodeTraversalCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[,, new, AbstractCfgNodeTraversalCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[), ;, }, Definition, getDef, (, String, name, ,, Node, useNode, ), {, Preconditions, ., checkArgument, (, getCfg, (, )]
[), {, Var, dep, =, jsScope, ., getVar, (, n, ., getString, (, ), ), ;, if, (, dep, ==]
[., isName, (, ), ), {, Var, dep, =, jsScope, ., getVar, (, n, ., getString, (, ), ), ;]
[;, if, (, dep, ==, null, ), {, def, ., unknownDependencies, =, true, ;, }, else, {, def, ., depends]
[., getVar, (, n, ., getString, (, ), ), ;, if, (, dep, ==, null, ), {, def, ., unknownDependencies]
[), ;, if, (, dep, ==, null, ), {, def, ., unknownDependencies, =, true, ;, }, else, {, def, .]
[., getString, (, ), ), ;, if, (, dep, ==, null, ), {, def, ., unknownDependencies, =, true, ;, }]
[), {, def, ., unknownDependencies, =, true, ;, }, else, {, def, ., depends, ., add, (, dep, ), ;]
[==, null, ), {, def, ., unknownDependencies, =, true, ;, }, else, {, def, ., depends, ., add, (, dep]
[), {, def, ., unknownDependencies, =, true, ;, }, else, {, def, ., depends, ., add, (, dep, ), ;]
[=, true, ;, }, else, {, def, ., depends, ., add, (, dep, ), ;, }, }, }, }, )]
[., unknownDependencies, =, true, ;, }, else, {, def, ., depends, ., add, (, dep, ), ;, }, }, }]
[;, }, else, {, def, ., depends, ., add, (, dep, ), ;, }, }, }, }, ), ;, }]
[;, }, }, }, }, ), ;, }, Definition, getDef, (, String, name, ,, Node, useNode, ), {, Preconditions, .]
[., add, (, dep, ), ;, }, }, }, }, ), ;, }, Definition, getDef, (, String, name, ,, Node]
[., depends, ., add, (, dep, ), ;, }, }, }, }, ), ;, }, Definition, getDef, (, String, name]
[), ;, }, }, }, }, ), ;, }, Definition, getDef, (, String, name, ,, Node, useNode, ), {, Preconditions]
[;, GraphNode, <, Node, ,, Branch, >, n, =, getCfg, (, ), ., getNode, (, useNode, ), ;, FlowState, <]
[., checkArgument, (, getCfg, (, ), ., hasNode, (, useNode, ), ), ;, GraphNode, <, Node, ,, Branch, >, n]
[), ;, GraphNode, <, Node, ,, Branch, >, n, =, getCfg, (, ), ., getNode, (, useNode, ), ;, FlowState]
[., hasNode, (, useNode, ), ), ;, GraphNode, <, Node, ,, Branch, >, n, =, getCfg, (, ), ., getNode]
[), ), ;, GraphNode, <, Node, ,, Branch, >, n, =, getCfg, (, ), ., getNode, (, useNode, ), ;]
[;, FlowState, <, MustDef, >, state, =, n, ., getAnnotation, (, ), ;, return, state, ., getIn, (, ), .]
[., getNode, (, useNode, ), ;, FlowState, <, MustDef, >, state, =, n, ., getAnnotation, (, ), ;, return, state]
[), ;, FlowState, <, MustDef, >, state, =, n, ., getAnnotation, (, ), ;, return, state, ., getIn, (, )]
[;, return, state, ., getIn, (, ), ., reachingDef, ., get, (, jsScope, ., getVar, (, name, ), ), ;]
[., getAnnotation, (, ), ;, return, state, ., getIn, (, ), ., reachingDef, ., get, (, jsScope, ., getVar, (]
[;, }, Node, getDefNode, (, String, name, ,, Node, useNode, ), {, Definition, def, =, getDef, (, name, ,, useNode]
[., get, (, jsScope, ., getVar, (, name, ), ), ;, }, Node, getDefNode, (, String, name, ,, Node, useNode]
[., reachingDef, ., get, (, jsScope, ., getVar, (, name, ), ), ;, }, Node, getDefNode, (, String, name, ,]
[., getIn, (, ), ., reachingDef, ., get, (, jsScope, ., getVar, (, name, ), ), ;, }, Node, getDefNode]
[), ;, }, Node, getDefNode, (, String, name, ,, Node, useNode, ), {, Definition, def, =, getDef, (, name, ,]
[., getVar, (, name, ), ), ;, }, Node, getDefNode, (, String, name, ,, Node, useNode, ), {, Definition, def]
[), ), ;, }, Node, getDefNode, (, String, name, ,, Node, useNode, ), {, Definition, def, =, getDef, (, name]
[;, return, def, ==, null, ?, null, :, def, ., node, ;, }, boolean, dependsOnOuterScopeVars, (, Definition, def, ), {]
[,, useNode, ), ;, return, def, ==, null, ?, null, :, def, ., node, ;, }, boolean, dependsOnOuterScopeVars, (, Definition]
[), ;, return, def, ==, null, ?, null, :, def, ., node, ;, }, boolean, dependsOnOuterScopeVars, (, Definition, def, )]
[;, }, boolean, dependsOnOuterScopeVars, (, Definition, def, ), {, if, (, def, ., unknownDependencies, ), {, return, true, ;, }]
[?, null, :, def, ., node, ;, }, boolean, dependsOnOuterScopeVars, (, Definition, def, ), {, if, (, def, ., unknownDependencies]
[==, null, ?, null, :, def, ., node, ;, }, boolean, dependsOnOuterScopeVars, (, Definition, def, ), {, if, (, def]
[?, null, :, def, ., node, ;, }, boolean, dependsOnOuterScopeVars, (, Definition, def, ), {, if, (, def, ., unknownDependencies]
[:, def, ., node, ;, }, boolean, dependsOnOuterScopeVars, (, Definition, def, ), {, if, (, def, ., unknownDependencies, ), {]
[;, }, boolean, dependsOnOuterScopeVars, (, Definition, def, ), {, if, (, def, ., unknownDependencies, ), {, return, true, ;, }]
[., node, ;, }, boolean, dependsOnOuterScopeVars, (, Definition, def, ), {, if, (, def, ., unknownDependencies, ), {, return, true]
[), {, return, true, ;, }, for, (, Var, s, :, def, ., depends, ), {, if, (, s, .]
[., unknownDependencies, ), {, return, true, ;, }, for, (, Var, s, :, def, ., depends, ), {, if, (]
[;, }, for, (, Var, s, :, def, ., depends, ), {, if, (, s, ., scope, !=, jsScope, )]
[), {, if, (, s, ., scope, !=, jsScope, ), {, return, true, ;, }, }, return, false, ;, }]
[., depends, ), {, if, (, s, ., scope, !=, jsScope, ), {, return, true, ;, }, }, return, false]
[), {, return, true, ;, }, }, return, false, ;, }, }]
[!=, jsScope, ), {, return, true, ;, }, }, return, false, ;, }, }]
[., scope, !=, jsScope, ), {, return, true, ;, }, }, return, false, ;, }, }]
[), {, return, true, ;, }, }, return, false, ;, }, }]
[;, }, }, return, false, ;, }, }]
[;, }, }]
