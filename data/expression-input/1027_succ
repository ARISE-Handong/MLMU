[;, private, final, Array2DRowRealMatrix, update, ;, private, final, double, [, ], c1, ;, private, AdamsNordsieckTransformer, (, final, int, nSteps, )]
[;, FieldDecompositionSolver, <, BigFraction, >, pSolver, =, new, FieldLUDecomposition, <, BigFraction, >, (, bigP, ), ., getSolver, (, ), ;]
[), ;, FieldDecompositionSolver, <, BigFraction, >, pSolver, =, new, FieldLUDecomposition, <, BigFraction, >, (, bigP, ), ., getSolver, (, )]
[;, BigFraction, [, ], u, =, new, BigFraction, [, nSteps, ], ;, Arrays, ., fill, (, u, ,, BigFraction, .]
[., getSolver, (, ), ;, BigFraction, [, ], u, =, new, BigFraction, [, nSteps, ], ;, Arrays, ., fill, (]
[), ., getSolver, (, ), ;, BigFraction, [, ], u, =, new, BigFraction, [, nSteps, ], ;, Arrays, ., fill]
[;, Arrays, ., fill, (, u, ,, BigFraction, ., ONE, ), ;, BigFraction, [, ], bigC1, =, pSolver, ., solve]
[], ;, Arrays, ., fill, (, u, ,, BigFraction, ., ONE, ), ;, BigFraction, [, ], bigC1, =, pSolver, .]
[;, BigFraction, [, ], bigC1, =, pSolver, ., solve, (, new, ArrayFieldVector, <, BigFraction, >, (, u, ,, false, )]
[., fill, (, u, ,, BigFraction, ., ONE, ), ;, BigFraction, [, ], bigC1, =, pSolver, ., solve, (, new]
[,, BigFraction, ., ONE, ), ;, BigFraction, [, ], bigC1, =, pSolver, ., solve, (, new, ArrayFieldVector, <, BigFraction, >]
[), ;, BigFraction, [, ], bigC1, =, pSolver, ., solve, (, new, ArrayFieldVector, <, BigFraction, >, (, u, ,, false]
[., ONE, ), ;, BigFraction, [, ], bigC1, =, pSolver, ., solve, (, new, ArrayFieldVector, <, BigFraction, >, (, u]
[;, BigFraction, [, ], [, ], shiftedP, =, bigP, ., getData, (, ), ;, for, (, int, i, =, shiftedP]
[., toArray, (, ), ;, BigFraction, [, ], [, ], shiftedP, =, bigP, ., getData, (, ), ;, for, (]
[., solve, (, new, ArrayFieldVector, <, BigFraction, >, (, u, ,, false, ), ), ., toArray, (, ), ;, BigFraction]
[), ., toArray, (, ), ;, BigFraction, [, ], [, ], shiftedP, =, bigP, ., getData, (, ), ;, for]
[,, false, ), ), ., toArray, (, ), ;, BigFraction, [, ], [, ], shiftedP, =, bigP, ., getData, (]
[), ), ., toArray, (, ), ;, BigFraction, [, ], [, ], shiftedP, =, bigP, ., getData, (, ), ;]
[;, for, (, int, i, =, shiftedP, ., length, -, 1, ;, i, >, 0, ;, --, i, ), {]
[., getData, (, ), ;, for, (, int, i, =, shiftedP, ., length, -, 1, ;, i, >, 0, ;]
[;, i, >, 0, ;, --, i, ), {, shiftedP, [, i, ], =, shiftedP, [, i, -, 1, ]]
[-, 1, ;, i, >, 0, ;, --, i, ), {, shiftedP, [, i, ], =, shiftedP, [, i, -]
[., length, -, 1, ;, i, >, 0, ;, --, i, ), {, shiftedP, [, i, ], =, shiftedP, []
[;, i, >, 0, ;, --, i, ), {, shiftedP, [, i, ], =, shiftedP, [, i, -, 1, ]]
[;, --, i, ), {, shiftedP, [, i, ], =, shiftedP, [, i, -, 1, ], ;, }, shiftedP, []
[>, 0, ;, --, i, ), {, shiftedP, [, i, ], =, shiftedP, [, i, -, 1, ], ;, }]
[;, --, i, ), {, shiftedP, [, i, ], =, shiftedP, [, i, -, 1, ], ;, }, shiftedP, []
[), {, shiftedP, [, i, ], =, shiftedP, [, i, -, 1, ], ;, }, shiftedP, [, 0, ], =]
[), {, shiftedP, [, i, ], =, shiftedP, [, i, -, 1, ], ;, }, shiftedP, [, 0, ], =]
[=, shiftedP, [, i, -, 1, ], ;, }, shiftedP, [, 0, ], =, new, BigFraction, [, nSteps, ], ;]
[[, i, ], =, shiftedP, [, i, -, 1, ], ;, }, shiftedP, [, 0, ], =, new, BigFraction, []
[], =, shiftedP, [, i, -, 1, ], ;, }, shiftedP, [, 0, ], =, new, BigFraction, [, nSteps, ]]
[;, }, shiftedP, [, 0, ], =, new, BigFraction, [, nSteps, ], ;, Arrays, ., fill, (, shiftedP, [, 0]
[[, i, -, 1, ], ;, }, shiftedP, [, 0, ], =, new, BigFraction, [, nSteps, ], ;, Arrays, .]
[], ;, }, shiftedP, [, 0, ], =, new, BigFraction, [, nSteps, ], ;, Arrays, ., fill, (, shiftedP, []
[-, 1, ], ;, }, shiftedP, [, 0, ], =, new, BigFraction, [, nSteps, ], ;, Arrays, ., fill, (]
[], ;, }, shiftedP, [, 0, ], =, new, BigFraction, [, nSteps, ], ;, Arrays, ., fill, (, shiftedP, []
[=, new, BigFraction, [, nSteps, ], ;, Arrays, ., fill, (, shiftedP, [, 0, ], ,, BigFraction, ., ZERO, )]
[[, 0, ], =, new, BigFraction, [, nSteps, ], ;, Arrays, ., fill, (, shiftedP, [, 0, ], ,, BigFraction]
[], =, new, BigFraction, [, nSteps, ], ;, Arrays, ., fill, (, shiftedP, [, 0, ], ,, BigFraction, ., ZERO]
[;, Arrays, ., fill, (, shiftedP, [, 0, ], ,, BigFraction, ., ZERO, ), ;, FieldMatrix, <, BigFraction, >, bigMSupdate]
[], ;, Arrays, ., fill, (, shiftedP, [, 0, ], ,, BigFraction, ., ZERO, ), ;, FieldMatrix, <, BigFraction, >]
[;, FieldMatrix, <, BigFraction, >, bigMSupdate, =, pSolver, ., solve, (, new, Array2DRowFieldMatrix, <, BigFraction, >, (, shiftedP, ,, false]
[., fill, (, shiftedP, [, 0, ], ,, BigFraction, ., ZERO, ), ;, FieldMatrix, <, BigFraction, >, bigMSupdate, =, pSolver]
[,, BigFraction, ., ZERO, ), ;, FieldMatrix, <, BigFraction, >, bigMSupdate, =, pSolver, ., solve, (, new, Array2DRowFieldMatrix, <, BigFraction]
[[, 0, ], ,, BigFraction, ., ZERO, ), ;, FieldMatrix, <, BigFraction, >, bigMSupdate, =, pSolver, ., solve, (, new]
[], ,, BigFraction, ., ZERO, ), ;, FieldMatrix, <, BigFraction, >, bigMSupdate, =, pSolver, ., solve, (, new, Array2DRowFieldMatrix, <]
[), ;, FieldMatrix, <, BigFraction, >, bigMSupdate, =, pSolver, ., solve, (, new, Array2DRowFieldMatrix, <, BigFraction, >, (, shiftedP, ,]
[., ZERO, ), ;, FieldMatrix, <, BigFraction, >, bigMSupdate, =, pSolver, ., solve, (, new, Array2DRowFieldMatrix, <, BigFraction, >, (]
[;, update, =, MatrixUtils, ., bigFractionMatrixToRealMatrix, (, bigMSupdate, ), ;, c1, =, new, double, [, nSteps, ], ;, for, (]
[., solve, (, new, Array2DRowFieldMatrix, <, BigFraction, >, (, shiftedP, ,, false, ), ), ;, update, =, MatrixUtils, ., bigFractionMatrixToRealMatrix]
[), ;, update, =, MatrixUtils, ., bigFractionMatrixToRealMatrix, (, bigMSupdate, ), ;, c1, =, new, double, [, nSteps, ], ;, for]
[,, false, ), ), ;, update, =, MatrixUtils, ., bigFractionMatrixToRealMatrix, (, bigMSupdate, ), ;, c1, =, new, double, [, nSteps]
[), ), ;, update, =, MatrixUtils, ., bigFractionMatrixToRealMatrix, (, bigMSupdate, ), ;, c1, =, new, double, [, nSteps, ], ;]
[=, MatrixUtils, ., bigFractionMatrixToRealMatrix, (, bigMSupdate, ), ;, c1, =, new, double, [, nSteps, ], ;, for, (, int, i]
[;, c1, =, new, double, [, nSteps, ], ;, for, (, int, i, =, 0, ;, i, <, nSteps, ;]
[., bigFractionMatrixToRealMatrix, (, bigMSupdate, ), ;, c1, =, new, double, [, nSteps, ], ;, for, (, int, i, =, 0]
[), ;, c1, =, new, double, [, nSteps, ], ;, for, (, int, i, =, 0, ;, i, <, nSteps]
[=, new, double, [, nSteps, ], ;, for, (, int, i, =, 0, ;, i, <, nSteps, ;, ++, i]
[;, for, (, int, i, =, 0, ;, i, <, nSteps, ;, ++, i, ), {, c1, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, nSteps, ;, ++, i, ), {, c1, [, i]
[;, i, <, nSteps, ;, ++, i, ), {, c1, [, i, ], =, bigC1, [, i, ], ., doubleValue]
[;, ++, i, ), {, c1, [, i, ], =, bigC1, [, i, ], ., doubleValue, (, ), ;, }]
[<, nSteps, ;, ++, i, ), {, c1, [, i, ], =, bigC1, [, i, ], ., doubleValue, (, )]
[;, ++, i, ), {, c1, [, i, ], =, bigC1, [, i, ], ., doubleValue, (, ), ;, }]
[), {, c1, [, i, ], =, bigC1, [, i, ], ., doubleValue, (, ), ;, }, }, public, static]
[), {, c1, [, i, ], =, bigC1, [, i, ], ., doubleValue, (, ), ;, }, }, public, static]
[=, bigC1, [, i, ], ., doubleValue, (, ), ;, }, }, public, static, AdamsNordsieckTransformer, getInstance, (, final, int, nSteps]
[[, i, ], =, bigC1, [, i, ], ., doubleValue, (, ), ;, }, }, public, static, AdamsNordsieckTransformer, getInstance, (]
[], =, bigC1, [, i, ], ., doubleValue, (, ), ;, }, }, public, static, AdamsNordsieckTransformer, getInstance, (, final, int]
[;, }, }, public, static, AdamsNordsieckTransformer, getInstance, (, final, int, nSteps, ), {, synchronized, (, CACHE, ), {, AdamsNordsieckTransformer, t]
[., doubleValue, (, ), ;, }, }, public, static, AdamsNordsieckTransformer, getInstance, (, final, int, nSteps, ), {, synchronized, (, CACHE]
[[, i, ], ., doubleValue, (, ), ;, }, }, public, static, AdamsNordsieckTransformer, getInstance, (, final, int, nSteps, ), {]
[], ., doubleValue, (, ), ;, }, }, public, static, AdamsNordsieckTransformer, getInstance, (, final, int, nSteps, ), {, synchronized, (]
[), {, AdamsNordsieckTransformer, t, =, CACHE, ., get, (, nSteps, ), ;, if, (, t, ==, null, ), {, t]
[;, if, (, t, ==, null, ), {, t, =, new, AdamsNordsieckTransformer, (, nSteps, ), ;, CACHE, ., put, (]
[., get, (, nSteps, ), ;, if, (, t, ==, null, ), {, t, =, new, AdamsNordsieckTransformer, (, nSteps, )]
[), ;, if, (, t, ==, null, ), {, t, =, new, AdamsNordsieckTransformer, (, nSteps, ), ;, CACHE, ., put]
[), {, t, =, new, AdamsNordsieckTransformer, (, nSteps, ), ;, CACHE, ., put, (, nSteps, ,, t, ), ;, }]
[==, null, ), {, t, =, new, AdamsNordsieckTransformer, (, nSteps, ), ;, CACHE, ., put, (, nSteps, ,, t, )]
[), {, t, =, new, AdamsNordsieckTransformer, (, nSteps, ), ;, CACHE, ., put, (, nSteps, ,, t, ), ;, }]
[=, new, AdamsNordsieckTransformer, (, nSteps, ), ;, CACHE, ., put, (, nSteps, ,, t, ), ;, }, return, t, ;]
[;, CACHE, ., put, (, nSteps, ,, t, ), ;, }, return, t, ;, }, }, public, int, getNSteps, (]
[), ;, CACHE, ., put, (, nSteps, ,, t, ), ;, }, return, t, ;, }, }, public, int, getNSteps]
[;, }, return, t, ;, }, }, public, int, getNSteps, (, ), {, return, c1, ., length, ;, }, private]
[., put, (, nSteps, ,, t, ), ;, }, return, t, ;, }, }, public, int, getNSteps, (, ), {]
[,, t, ), ;, }, return, t, ;, }, }, public, int, getNSteps, (, ), {, return, c1, ., length]
[), ;, }, return, t, ;, }, }, public, int, getNSteps, (, ), {, return, c1, ., length, ;, }]
[;, }, }, public, int, getNSteps, (, ), {, return, c1, ., length, ;, }, private, FieldMatrix, <, BigFraction, >]
[;, }, private, FieldMatrix, <, BigFraction, >, buildP, (, final, int, nSteps, ), {, final, BigFraction, [, ], [, ]]
[., length, ;, }, private, FieldMatrix, <, BigFraction, >, buildP, (, final, int, nSteps, ), {, final, BigFraction, [, ]]
[;, for, (, int, i, =, 0, ;, i, <, pData, ., length, ;, ++, i, ), {, final, BigFraction]
[], [, nSteps, ], ;, for, (, int, i, =, 0, ;, i, <, pData, ., length, ;, ++, i]
[], ;, for, (, int, i, =, 0, ;, i, <, pData, ., length, ;, ++, i, ), {, final]
[;, i, <, pData, ., length, ;, ++, i, ), {, final, BigFraction, [, ], pI, =, pData, [, i]
[;, ++, i, ), {, final, BigFraction, [, ], pI, =, pData, [, i, ], ;, final, int, factor, =]
[<, pData, ., length, ;, ++, i, ), {, final, BigFraction, [, ], pI, =, pData, [, i, ], ;]
[;, ++, i, ), {, final, BigFraction, [, ], pI, =, pData, [, i, ], ;, final, int, factor, =]
[., length, ;, ++, i, ), {, final, BigFraction, [, ], pI, =, pData, [, i, ], ;, final, int]
[), {, final, BigFraction, [, ], pI, =, pData, [, i, ], ;, final, int, factor, =, -, (, i]
[), {, final, BigFraction, [, ], pI, =, pData, [, i, ], ;, final, int, factor, =, -, (, i]
[;, final, int, factor, =, -, (, i, +, 1, ), ;, int, aj, =, factor, ;, for, (, int]
[[, i, ], ;, final, int, factor, =, -, (, i, +, 1, ), ;, int, aj, =, factor, ;]
[], ;, final, int, factor, =, -, (, i, +, 1, ), ;, int, aj, =, factor, ;, for, (]
[;, int, aj, =, factor, ;, for, (, int, j, =, 0, ;, j, <, pI, ., length, ;, ++]
[;, int, aj, =, factor, ;, for, (, int, j, =, 0, ;, j, <, pI, ., length, ;, ++]
[), ;, int, aj, =, factor, ;, for, (, int, j, =, 0, ;, j, <, pI, ., length, ;]
[+, 1, ), ;, int, aj, =, factor, ;, for, (, int, j, =, 0, ;, j, <, pI, .]
[), ;, int, aj, =, factor, ;, for, (, int, j, =, 0, ;, j, <, pI, ., length, ;]
[;, for, (, int, j, =, 0, ;, j, <, pI, ., length, ;, ++, j, ), {, pI, []
[;, j, <, pI, ., length, ;, ++, j, ), {, pI, [, j, ], =, new, BigFraction, (, aj]
[;, ++, j, ), {, pI, [, j, ], =, new, BigFraction, (, aj, *, (, j, +, 2, )]
[<, pI, ., length, ;, ++, j, ), {, pI, [, j, ], =, new, BigFraction, (, aj, *, (]
[;, ++, j, ), {, pI, [, j, ], =, new, BigFraction, (, aj, *, (, j, +, 2, )]
[., length, ;, ++, j, ), {, pI, [, j, ], =, new, BigFraction, (, aj, *, (, j, +]
[), {, pI, [, j, ], =, new, BigFraction, (, aj, *, (, j, +, 2, ), ), ;, aj]
[), {, pI, [, j, ], =, new, BigFraction, (, aj, *, (, j, +, 2, ), ), ;, aj]
[=, new, BigFraction, (, aj, *, (, j, +, 2, ), ), ;, aj, *=, factor, ;, }, }, return]
[[, j, ], =, new, BigFraction, (, aj, *, (, j, +, 2, ), ), ;, aj, *=, factor, ;]
[], =, new, BigFraction, (, aj, *, (, j, +, 2, ), ), ;, aj, *=, factor, ;, }, }]
[;, aj, *=, factor, ;, }, }, return, new, Array2DRowFieldMatrix, <, BigFraction, >, (, pData, ,, false, ), ;, }]
[), ;, aj, *=, factor, ;, }, }, return, new, Array2DRowFieldMatrix, <, BigFraction, >, (, pData, ,, false, ), ;]
[*, (, j, +, 2, ), ), ;, aj, *=, factor, ;, }, }, return, new, Array2DRowFieldMatrix, <, BigFraction, >]
[), ;, aj, *=, factor, ;, }, }, return, new, Array2DRowFieldMatrix, <, BigFraction, >, (, pData, ,, false, ), ;]
[), ), ;, aj, *=, factor, ;, }, }, return, new, Array2DRowFieldMatrix, <, BigFraction, >, (, pData, ,, false, )]
[+, 2, ), ), ;, aj, *=, factor, ;, }, }, return, new, Array2DRowFieldMatrix, <, BigFraction, >, (, pData, ,]
[), ), ;, aj, *=, factor, ;, }, }, return, new, Array2DRowFieldMatrix, <, BigFraction, >, (, pData, ,, false, )]
[*=, factor, ;, }, }, return, new, Array2DRowFieldMatrix, <, BigFraction, >, (, pData, ,, false, ), ;, }, public, Array2DRowRealMatrix]
[;, }, }, return, new, Array2DRowFieldMatrix, <, BigFraction, >, (, pData, ,, false, ), ;, }, public, Array2DRowRealMatrix, initializeHighOrderDerivatives, (]
[;, }, public, Array2DRowRealMatrix, initializeHighOrderDerivatives, (, final, double, h, ,, final, double, [, ], t, ,, final, double, [, ]]
[,, false, ), ;, }, public, Array2DRowRealMatrix, initializeHighOrderDerivatives, (, final, double, h, ,, final, double, [, ], t, ,, final]
[), ;, }, public, Array2DRowRealMatrix, initializeHighOrderDerivatives, (, final, double, h, ,, final, double, [, ], t, ,, final, double, []
[;, final, double, [, ], [, ], b, =, new, double, [, 2, *, (, y, ., length, -, 1]
[], [, c1, ., length, ], ;, final, double, [, ], [, ], b, =, new, double, [, 2, *]
[*, (, y, ., length, -, 1, ), ], [, c1, ., length, ], ;, final, double, [, ], []
[], [, c1, ., length, ], ;, final, double, [, ], [, ], b, =, new, double, [, 2, *]
[), ], [, c1, ., length, ], ;, final, double, [, ], [, ], b, =, new, double, [, 2]
[-, 1, ), ], [, c1, ., length, ], ;, final, double, [, ], [, ], b, =, new, double]
[., length, -, 1, ), ], [, c1, ., length, ], ;, final, double, [, ], [, ], b, =]
[), ], [, c1, ., length, ], ;, final, double, [, ], [, ], b, =, new, double, [, 2]
[], ;, final, double, [, ], [, ], b, =, new, double, [, 2, *, (, y, ., length, -]
[., length, ], ;, final, double, [, ], [, ], b, =, new, double, [, 2, *, (, y, .]
[;, final, double, [, ], y0, =, y, [, 0, ], ;, final, double, [, ], yDot0, =, yDot, []
[], [, y, [, 0, ], ., length, ], ;, final, double, [, ], y0, =, y, [, 0, ]]
[*, (, y, ., length, -, 1, ), ], [, y, [, 0, ], ., length, ], ;, final, double]
[], [, y, [, 0, ], ., length, ], ;, final, double, [, ], y0, =, y, [, 0, ]]
[), ], [, y, [, 0, ], ., length, ], ;, final, double, [, ], y0, =, y, [, 0]
[-, 1, ), ], [, y, [, 0, ], ., length, ], ;, final, double, [, ], y0, =, y]
[., length, -, 1, ), ], [, y, [, 0, ], ., length, ], ;, final, double, [, ], y0]
[), ], [, y, [, 0, ], ., length, ], ;, final, double, [, ], y0, =, y, [, 0]
[], ;, final, double, [, ], y0, =, y, [, 0, ], ;, final, double, [, ], yDot0, =, yDot]
[., length, ], ;, final, double, [, ], y0, =, y, [, 0, ], ;, final, double, [, ], yDot0]
[[, 0, ], ., length, ], ;, final, double, [, ], y0, =, y, [, 0, ], ;, final, double]
[], ., length, ], ;, final, double, [, ], y0, =, y, [, 0, ], ;, final, double, [, ]]
[;, final, double, [, ], yDot0, =, yDot, [, 0, ], ;, for, (, int, i, =, 1, ;, i]
[[, 0, ], ;, final, double, [, ], yDot0, =, yDot, [, 0, ], ;, for, (, int, i, =]
[], ;, final, double, [, ], yDot0, =, yDot, [, 0, ], ;, for, (, int, i, =, 1, ;]
[;, for, (, int, i, =, 1, ;, i, <, y, ., length, ;, ++, i, ), {, final, double]
[[, 0, ], ;, for, (, int, i, =, 1, ;, i, <, y, ., length, ;, ++, i, )]
[], ;, for, (, int, i, =, 1, ;, i, <, y, ., length, ;, ++, i, ), {, final]
[;, i, <, y, ., length, ;, ++, i, ), {, final, double, di, =, t, [, i, ], -]
[;, ++, i, ), {, final, double, di, =, t, [, i, ], -, t, [, 0, ], ;, final]
[<, y, ., length, ;, ++, i, ), {, final, double, di, =, t, [, i, ], -, t, []
[;, ++, i, ), {, final, double, di, =, t, [, i, ], -, t, [, 0, ], ;, final]
[., length, ;, ++, i, ), {, final, double, di, =, t, [, i, ], -, t, [, 0, ]]
[), {, final, double, di, =, t, [, i, ], -, t, [, 0, ], ;, final, double, ratio, =]
[), {, final, double, di, =, t, [, i, ], -, t, [, 0, ], ;, final, double, ratio, =]
[;, final, double, ratio, =, di, /, h, ;, double, dikM1Ohk, =, 1, /, h, ;, final, double, [, ]]
[-, t, [, 0, ], ;, final, double, ratio, =, di, /, h, ;, double, dikM1Ohk, =, 1, /, h]
[[, i, ], -, t, [, 0, ], ;, final, double, ratio, =, di, /, h, ;, double, dikM1Ohk, =]
[], -, t, [, 0, ], ;, final, double, ratio, =, di, /, h, ;, double, dikM1Ohk, =, 1, /]
[;, final, double, ratio, =, di, /, h, ;, double, dikM1Ohk, =, 1, /, h, ;, final, double, [, ]]
[[, 0, ], ;, final, double, ratio, =, di, /, h, ;, double, dikM1Ohk, =, 1, /, h, ;, final]
[], ;, final, double, ratio, =, di, /, h, ;, double, dikM1Ohk, =, 1, /, h, ;, final, double, []
[;, double, dikM1Ohk, =, 1, /, h, ;, final, double, [, ], aI, =, a, [, 2, *, i, -]
[/, h, ;, double, dikM1Ohk, =, 1, /, h, ;, final, double, [, ], aI, =, a, [, 2, *]
[;, double, dikM1Ohk, =, 1, /, h, ;, final, double, [, ], aI, =, a, [, 2, *, i, -]
[;, final, double, [, ], aI, =, a, [, 2, *, i, -, 2, ], ;, final, double, [, ]]
[/, h, ;, final, double, [, ], aI, =, a, [, 2, *, i, -, 2, ], ;, final, double]
[;, final, double, [, ], aI, =, a, [, 2, *, i, -, 2, ], ;, final, double, [, ]]
[;, final, double, [, ], aDotI, =, a, [, 2, *, i, -, 1, ], ;, for, (, int, j]
[[, 2, *, i, -, 2, ], ;, final, double, [, ], aDotI, =, a, [, 2, *, i, -]
[], ;, final, double, [, ], aDotI, =, a, [, 2, *, i, -, 1, ], ;, for, (, int]
[-, 2, ], ;, final, double, [, ], aDotI, =, a, [, 2, *, i, -, 1, ], ;, for]
[*, i, -, 2, ], ;, final, double, [, ], aDotI, =, a, [, 2, *, i, -, 1, ]]
[-, 2, ], ;, final, double, [, ], aDotI, =, a, [, 2, *, i, -, 1, ], ;, for]
[], ;, final, double, [, ], aDotI, =, a, [, 2, *, i, -, 1, ], ;, for, (, int]
[;, for, (, int, j, =, 0, ;, j, <, aI, ., length, ;, ++, j, ), {, dikM1Ohk, *=]
[[, 2, *, i, -, 1, ], ;, for, (, int, j, =, 0, ;, j, <, aI, ., length]
[], ;, for, (, int, j, =, 0, ;, j, <, aI, ., length, ;, ++, j, ), {, dikM1Ohk]
[-, 1, ], ;, for, (, int, j, =, 0, ;, j, <, aI, ., length, ;, ++, j, )]
[*, i, -, 1, ], ;, for, (, int, j, =, 0, ;, j, <, aI, ., length, ;, ++]
[-, 1, ], ;, for, (, int, j, =, 0, ;, j, <, aI, ., length, ;, ++, j, )]
[], ;, for, (, int, j, =, 0, ;, j, <, aI, ., length, ;, ++, j, ), {, dikM1Ohk]
[;, j, <, aI, ., length, ;, ++, j, ), {, dikM1Ohk, *=, ratio, ;, aI, [, j, ], =]
[;, ++, j, ), {, dikM1Ohk, *=, ratio, ;, aI, [, j, ], =, di, *, dikM1Ohk, ;, aDotI, []
[<, aI, ., length, ;, ++, j, ), {, dikM1Ohk, *=, ratio, ;, aI, [, j, ], =, di, *]
[;, ++, j, ), {, dikM1Ohk, *=, ratio, ;, aI, [, j, ], =, di, *, dikM1Ohk, ;, aDotI, []
[., length, ;, ++, j, ), {, dikM1Ohk, *=, ratio, ;, aI, [, j, ], =, di, *, dikM1Ohk, ;]
[), {, dikM1Ohk, *=, ratio, ;, aI, [, j, ], =, di, *, dikM1Ohk, ;, aDotI, [, j, ], =]
[), {, dikM1Ohk, *=, ratio, ;, aI, [, j, ], =, di, *, dikM1Ohk, ;, aDotI, [, j, ], =]
[*=, ratio, ;, aI, [, j, ], =, di, *, dikM1Ohk, ;, aDotI, [, j, ], =, (, j, +]
[;, aI, [, j, ], =, di, *, dikM1Ohk, ;, aDotI, [, j, ], =, (, j, +, 2, )]
[=, di, *, dikM1Ohk, ;, aDotI, [, j, ], =, (, j, +, 2, ), *, dikM1Ohk, ;, }, final]
[[, j, ], =, di, *, dikM1Ohk, ;, aDotI, [, j, ], =, (, j, +, 2, ), *, dikM1Ohk]
[], =, di, *, dikM1Ohk, ;, aDotI, [, j, ], =, (, j, +, 2, ), *, dikM1Ohk, ;, }]
[;, aDotI, [, j, ], =, (, j, +, 2, ), *, dikM1Ohk, ;, }, final, double, [, ], yI]
[*, dikM1Ohk, ;, aDotI, [, j, ], =, (, j, +, 2, ), *, dikM1Ohk, ;, }, final, double, []
[;, aDotI, [, j, ], =, (, j, +, 2, ), *, dikM1Ohk, ;, }, final, double, [, ], yI]
[=, (, j, +, 2, ), *, dikM1Ohk, ;, }, final, double, [, ], yI, =, y, [, i, ]]
[[, j, ], =, (, j, +, 2, ), *, dikM1Ohk, ;, }, final, double, [, ], yI, =, y]
[], =, (, j, +, 2, ), *, dikM1Ohk, ;, }, final, double, [, ], yI, =, y, [, i]
[;, }, final, double, [, ], yI, =, y, [, i, ], ;, final, double, [, ], yDotI, =, yDot]
[*, dikM1Ohk, ;, }, final, double, [, ], yI, =, y, [, i, ], ;, final, double, [, ], yDotI]
[), *, dikM1Ohk, ;, }, final, double, [, ], yI, =, y, [, i, ], ;, final, double, [, ]]
[+, 2, ), *, dikM1Ohk, ;, }, final, double, [, ], yI, =, y, [, i, ], ;, final, double]
[), *, dikM1Ohk, ;, }, final, double, [, ], yI, =, y, [, i, ], ;, final, double, [, ]]
[;, }, final, double, [, ], yI, =, y, [, i, ], ;, final, double, [, ], yDotI, =, yDot]
[;, final, double, [, ], yDotI, =, yDot, [, i, ], ;, final, double, [, ], bI, =, b, []
[[, i, ], ;, final, double, [, ], yDotI, =, yDot, [, i, ], ;, final, double, [, ], bI]
[], ;, final, double, [, ], yDotI, =, yDot, [, i, ], ;, final, double, [, ], bI, =, b]
[;, final, double, [, ], bI, =, b, [, 2, *, i, -, 2, ], ;, final, double, [, ]]
[[, i, ], ;, final, double, [, ], bI, =, b, [, 2, *, i, -, 2, ], ;, final]
[], ;, final, double, [, ], bI, =, b, [, 2, *, i, -, 2, ], ;, final, double, []
[;, final, double, [, ], bDotI, =, b, [, 2, *, i, -, 1, ], ;, for, (, int, j]
[[, 2, *, i, -, 2, ], ;, final, double, [, ], bDotI, =, b, [, 2, *, i, -]
[], ;, final, double, [, ], bDotI, =, b, [, 2, *, i, -, 1, ], ;, for, (, int]
[-, 2, ], ;, final, double, [, ], bDotI, =, b, [, 2, *, i, -, 1, ], ;, for]
[*, i, -, 2, ], ;, final, double, [, ], bDotI, =, b, [, 2, *, i, -, 1, ]]
[-, 2, ], ;, final, double, [, ], bDotI, =, b, [, 2, *, i, -, 1, ], ;, for]
[], ;, final, double, [, ], bDotI, =, b, [, 2, *, i, -, 1, ], ;, for, (, int]
[;, for, (, int, j, =, 0, ;, j, <, yI, ., length, ;, ++, j, ), {, bI, []
[[, 2, *, i, -, 1, ], ;, for, (, int, j, =, 0, ;, j, <, yI, ., length]
[], ;, for, (, int, j, =, 0, ;, j, <, yI, ., length, ;, ++, j, ), {, bI]
[-, 1, ], ;, for, (, int, j, =, 0, ;, j, <, yI, ., length, ;, ++, j, )]
[*, i, -, 1, ], ;, for, (, int, j, =, 0, ;, j, <, yI, ., length, ;, ++]
[-, 1, ], ;, for, (, int, j, =, 0, ;, j, <, yI, ., length, ;, ++, j, )]
[], ;, for, (, int, j, =, 0, ;, j, <, yI, ., length, ;, ++, j, ), {, bI]
[;, j, <, yI, ., length, ;, ++, j, ), {, bI, [, j, ], =, yI, [, j, ]]
[;, ++, j, ), {, bI, [, j, ], =, yI, [, j, ], -, y0, [, j, ], -]
[<, yI, ., length, ;, ++, j, ), {, bI, [, j, ], =, yI, [, j, ], -, y0]
[;, ++, j, ), {, bI, [, j, ], =, yI, [, j, ], -, y0, [, j, ], -]
[., length, ;, ++, j, ), {, bI, [, j, ], =, yI, [, j, ], -, y0, [, j]
[), {, bI, [, j, ], =, yI, [, j, ], -, y0, [, j, ], -, di, *, yDot0]
[), {, bI, [, j, ], =, yI, [, j, ], -, y0, [, j, ], -, di, *, yDot0]
[=, yI, [, j, ], -, y0, [, j, ], -, di, *, yDot0, [, j, ], ;, bDotI, []
[[, j, ], =, yI, [, j, ], -, y0, [, j, ], -, di, *, yDot0, [, j, ]]
[], =, yI, [, j, ], -, y0, [, j, ], -, di, *, yDot0, [, j, ], ;, bDotI]
[;, bDotI, [, j, ], =, yDotI, [, j, ], -, yDot0, [, j, ], ;, }, }, QRDecomposition, decomposition]
[-, di, *, yDot0, [, j, ], ;, bDotI, [, j, ], =, yDotI, [, j, ], -, yDot0, []
[-, y0, [, j, ], -, di, *, yDot0, [, j, ], ;, bDotI, [, j, ], =, yDotI, []
[[, j, ], -, y0, [, j, ], -, di, *, yDot0, [, j, ], ;, bDotI, [, j, ]]
[], -, y0, [, j, ], -, di, *, yDot0, [, j, ], ;, bDotI, [, j, ], =, yDotI]
[-, di, *, yDot0, [, j, ], ;, bDotI, [, j, ], =, yDotI, [, j, ], -, yDot0, []
[[, j, ], -, di, *, yDot0, [, j, ], ;, bDotI, [, j, ], =, yDotI, [, j, ]]
[], -, di, *, yDot0, [, j, ], ;, bDotI, [, j, ], =, yDotI, [, j, ], -, yDot0]
[;, bDotI, [, j, ], =, yDotI, [, j, ], -, yDot0, [, j, ], ;, }, }, QRDecomposition, decomposition]
[*, yDot0, [, j, ], ;, bDotI, [, j, ], =, yDotI, [, j, ], -, yDot0, [, j, ]]
[;, bDotI, [, j, ], =, yDotI, [, j, ], -, yDot0, [, j, ], ;, }, }, QRDecomposition, decomposition]
[[, j, ], ;, bDotI, [, j, ], =, yDotI, [, j, ], -, yDot0, [, j, ], ;, }]
[], ;, bDotI, [, j, ], =, yDotI, [, j, ], -, yDot0, [, j, ], ;, }, }, QRDecomposition]
[=, yDotI, [, j, ], -, yDot0, [, j, ], ;, }, }, QRDecomposition, decomposition, ;, decomposition, =, new, QRDecomposition]
[[, j, ], =, yDotI, [, j, ], -, yDot0, [, j, ], ;, }, }, QRDecomposition, decomposition, ;, decomposition]
[], =, yDotI, [, j, ], -, yDot0, [, j, ], ;, }, }, QRDecomposition, decomposition, ;, decomposition, =, new]
[;, }, }, QRDecomposition, decomposition, ;, decomposition, =, new, QRDecomposition, (, new, Array2DRowRealMatrix, (, a, ,, false, ), ), ;]
[-, yDot0, [, j, ], ;, }, }, QRDecomposition, decomposition, ;, decomposition, =, new, QRDecomposition, (, new, Array2DRowRealMatrix, (, a]
[[, j, ], -, yDot0, [, j, ], ;, }, }, QRDecomposition, decomposition, ;, decomposition, =, new, QRDecomposition, (, new]
[], -, yDot0, [, j, ], ;, }, }, QRDecomposition, decomposition, ;, decomposition, =, new, QRDecomposition, (, new, Array2DRowRealMatrix, (]
[;, }, }, QRDecomposition, decomposition, ;, decomposition, =, new, QRDecomposition, (, new, Array2DRowRealMatrix, (, a, ,, false, ), ), ;]
[[, j, ], ;, }, }, QRDecomposition, decomposition, ;, decomposition, =, new, QRDecomposition, (, new, Array2DRowRealMatrix, (, a, ,, false]
[], ;, }, }, QRDecomposition, decomposition, ;, decomposition, =, new, QRDecomposition, (, new, Array2DRowRealMatrix, (, a, ,, false, ), )]
[=, new, QRDecomposition, (, new, Array2DRowRealMatrix, (, a, ,, false, ), ), ;, RealMatrix, x, =, decomposition, ., getSolver, (]
[;, RealMatrix, x, =, decomposition, ., getSolver, (, ), ., solve, (, new, Array2DRowRealMatrix, (, b, ,, false, ), )]
[), ;, RealMatrix, x, =, decomposition, ., getSolver, (, ), ., solve, (, new, Array2DRowRealMatrix, (, b, ,, false, )]
[,, false, ), ), ;, RealMatrix, x, =, decomposition, ., getSolver, (, ), ., solve, (, new, Array2DRowRealMatrix, (, b]
[), ), ;, RealMatrix, x, =, decomposition, ., getSolver, (, ), ., solve, (, new, Array2DRowRealMatrix, (, b, ,, false]
[;, return, new, Array2DRowRealMatrix, (, x, ., getData, (, ), ,, false, ), ;, }, public, Array2DRowRealMatrix, updateHighOrderDerivativesPhase1, (, final]
[., solve, (, new, Array2DRowRealMatrix, (, b, ,, false, ), ), ;, return, new, Array2DRowRealMatrix, (, x, ., getData, (]
[., getSolver, (, ), ., solve, (, new, Array2DRowRealMatrix, (, b, ,, false, ), ), ;, return, new, Array2DRowRealMatrix, (]
[), ;, return, new, Array2DRowRealMatrix, (, x, ., getData, (, ), ,, false, ), ;, }, public, Array2DRowRealMatrix, updateHighOrderDerivativesPhase1, (]
[,, false, ), ), ;, return, new, Array2DRowRealMatrix, (, x, ., getData, (, ), ,, false, ), ;, }, public]
[), ), ;, return, new, Array2DRowRealMatrix, (, x, ., getData, (, ), ,, false, ), ;, }, public, Array2DRowRealMatrix, updateHighOrderDerivativesPhase1]
[;, }, public, Array2DRowRealMatrix, updateHighOrderDerivativesPhase1, (, final, Array2DRowRealMatrix, highOrder, ), {, return, update, ., multiply, (, highOrder, ), ;, }]
[,, false, ), ;, }, public, Array2DRowRealMatrix, updateHighOrderDerivativesPhase1, (, final, Array2DRowRealMatrix, highOrder, ), {, return, update, ., multiply, (, highOrder]
[., getData, (, ), ,, false, ), ;, }, public, Array2DRowRealMatrix, updateHighOrderDerivativesPhase1, (, final, Array2DRowRealMatrix, highOrder, ), {, return, update]
[), ;, }, public, Array2DRowRealMatrix, updateHighOrderDerivativesPhase1, (, final, Array2DRowRealMatrix, highOrder, ), {, return, update, ., multiply, (, highOrder, ), ;]
[;, }, public, void, updateHighOrderDerivativesPhase2, (, final, double, [, ], start, ,, final, double, [, ], end, ,, final, Array2DRowRealMatrix]
[., multiply, (, highOrder, ), ;, }, public, void, updateHighOrderDerivativesPhase2, (, final, double, [, ], start, ,, final, double, []
[), ;, }, public, void, updateHighOrderDerivativesPhase2, (, final, double, [, ], start, ,, final, double, [, ], end, ,, final]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double]
[., getDataRef, (, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i]
[;, i, <, data, ., length, ;, ++, i, ), {, final, double, [, ], dataI, =, data, [, i]
[;, ++, i, ), {, final, double, [, ], dataI, =, data, [, i, ], ;, final, double, c1I, =]
[<, data, ., length, ;, ++, i, ), {, final, double, [, ], dataI, =, data, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], dataI, =, data, [, i, ], ;, final, double, c1I, =]
[., length, ;, ++, i, ), {, final, double, [, ], dataI, =, data, [, i, ], ;, final, double]
[), {, final, double, [, ], dataI, =, data, [, i, ], ;, final, double, c1I, =, c1, [, i]
[), {, final, double, [, ], dataI, =, data, [, i, ], ;, final, double, c1I, =, c1, [, i]
[;, final, double, c1I, =, c1, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, dataI]
[[, i, ], ;, final, double, c1I, =, c1, [, i, ], ;, for, (, int, j, =, 0, ;]
[], ;, final, double, c1I, =, c1, [, i, ], ;, for, (, int, j, =, 0, ;, j, <]
[;, for, (, int, j, =, 0, ;, j, <, dataI, ., length, ;, ++, j, ), {, dataI, []
[[, i, ], ;, for, (, int, j, =, 0, ;, j, <, dataI, ., length, ;, ++, j, )]
[], ;, for, (, int, j, =, 0, ;, j, <, dataI, ., length, ;, ++, j, ), {, dataI]
[;, j, <, dataI, ., length, ;, ++, j, ), {, dataI, [, j, ], +=, c1I, *, (, start]
[;, ++, j, ), {, dataI, [, j, ], +=, c1I, *, (, start, [, j, ], -, end, []
[<, dataI, ., length, ;, ++, j, ), {, dataI, [, j, ], +=, c1I, *, (, start, [, j]
[;, ++, j, ), {, dataI, [, j, ], +=, c1I, *, (, start, [, j, ], -, end, []
[., length, ;, ++, j, ), {, dataI, [, j, ], +=, c1I, *, (, start, [, j, ], -]
[), {, dataI, [, j, ], +=, c1I, *, (, start, [, j, ], -, end, [, j, ], )]
[), {, dataI, [, j, ], +=, c1I, *, (, start, [, j, ], -, end, [, j, ], )]
[+=, c1I, *, (, start, [, j, ], -, end, [, j, ], ), ;, }, }, }, }]
[[, j, ], +=, c1I, *, (, start, [, j, ], -, end, [, j, ], ), ;, }, }]
[], +=, c1I, *, (, start, [, j, ], -, end, [, j, ], ), ;, }, }, }, }]
[;, }, }, }, }]
[*, (, start, [, j, ], -, end, [, j, ], ), ;, }, }, }, }]
[;, }, }, }, }]
[), ;, }, }, }, }]
[-, end, [, j, ], ), ;, }, }, }, }]
[[, j, ], -, end, [, j, ], ), ;, }, }, }, }]
[], -, end, [, j, ], ), ;, }, }, }, }]
[), ;, }, }, }, }]
[[, j, ], ), ;, }, }, }, }]
[], ), ;, }, }, }, }]
