[final, Supplier, <, String, >, nameSupplier, ;, private, final, boolean, removeUnused, ;, RenameLabels, (, AbstractCompiler, compiler, ), {, this, (]
[<, String, >, nameSupplier, ;, private, final, boolean, removeUnused, ;, RenameLabels, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,]
[private, final, boolean, removeUnused, ;, RenameLabels, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,, new, DefaultNameSupplier, (, ), ,]
[,, true, ), ;, }, RenameLabels, (, AbstractCompiler, compiler, ,, Supplier, <, String, >, supplier, ,, boolean, removeUnused, ), {]
[,, true, ), ;, }, RenameLabels, (, AbstractCompiler, compiler, ,, Supplier, <, String, >, supplier, ,, boolean, removeUnused, ), {]
[}, RenameLabels, (, AbstractCompiler, compiler, ,, Supplier, <, String, >, supplier, ,, boolean, removeUnused, ), {, this, ., compiler, =]
[(, AbstractCompiler, compiler, ,, Supplier, <, String, >, supplier, ,, boolean, removeUnused, ), {, this, ., compiler, =, compiler, ;]
[(, AbstractCompiler, compiler, ,, Supplier, <, String, >, supplier, ,, boolean, removeUnused, ), {, this, ., compiler, =, compiler, ;]
[Supplier, <, String, >, supplier, ,, boolean, removeUnused, ), {, this, ., compiler, =, compiler, ;, this, ., nameSupplier, =]
[String, >, supplier, ,, boolean, removeUnused, ), {, this, ., compiler, =, compiler, ;, this, ., nameSupplier, =, supplier, ;]
[String, >, supplier, ,, boolean, removeUnused, ), {, this, ., compiler, =, compiler, ;, this, ., nameSupplier, =, supplier, ;]
[boolean, removeUnused, ), {, this, ., compiler, =, compiler, ;, this, ., nameSupplier, =, supplier, ;, this, ., removeUnused, =]
[this, ., removeUnused, =, removeUnused, ;, }, static, class, DefaultNameSupplier, implements, Supplier, <, String, >, {, final, NameGenerator, nameGenerator, =]
[=, removeUnused, ;, }, static, class, DefaultNameSupplier, implements, Supplier, <, String, >, {, final, NameGenerator, nameGenerator, =, new, NameGenerator, (]
[Supplier, <, String, >, {, final, NameGenerator, nameGenerator, =, new, NameGenerator, (, new, HashSet, <, String, >, (, ), ,]
[String, >, {, final, NameGenerator, nameGenerator, =, new, NameGenerator, (, new, HashSet, <, String, >, (, ), ,, "", ,]
[<, String, >, (, ), ,, "", ,, null, ), ;, @, Override, public, String, get, (, ), {, return]
[<, String, >, (, ), ,, "", ,, null, ), ;, @, Override, public, String, get, (, ), {, return]
[), {, return, nameGenerator, ., generateNextName, (, ), ;, }, }, class, ProcessLabels, implements, ScopedCallback, {, ProcessLabels, (, ), {]
[), {, return, nameGenerator, ., generateNextName, (, ), ;, }, }, class, ProcessLabels, implements, ScopedCallback, {, ProcessLabels, (, ), {]
[., generateNextName, (, ), ;, }, }, class, ProcessLabels, implements, ScopedCallback, {, ProcessLabels, (, ), {, namespaceStack, ., push, (]
[), {, namespaceStack, ., push, (, new, LabelNamespace, (, ), ), ;, }, final, Deque, <, LabelNamespace, >, namespaceStack, =]
[), {, namespaceStack, ., push, (, new, LabelNamespace, (, ), ), ;, }, final, Deque, <, LabelNamespace, >, namespaceStack, =]
[final, Deque, <, LabelNamespace, >, namespaceStack, =, Lists, ., newLinkedList, (, ), ;, final, ArrayList, <, String, >, names, =]
[names, =, new, ArrayList, <, String, >, (, ), ;, @, Override, public, void, enterScope, (, NodeTraversal, nodeTraversal, ), {]
[names, =, new, ArrayList, <, String, >, (, ), ;, @, Override, public, void, enterScope, (, NodeTraversal, nodeTraversal, ), {]
[<, String, >, (, ), ;, @, Override, public, void, enterScope, (, NodeTraversal, nodeTraversal, ), {, namespaceStack, ., push, (]
[., push, (, new, LabelNamespace, (, ), ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, nodeTraversal, ), {]
[., push, (, new, LabelNamespace, (, ), ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, nodeTraversal, ), {]
[;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, node, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, node, ,, Node, parent, ), {, if, (]
[,, Node, node, ,, Node, parent, ), {, if, (, node, ., isLabel, (, ), ), {, LabelNamespace, current, =]
[,, Node, node, ,, Node, parent, ), {, if, (, node, ., isLabel, (, ), ), {, LabelNamespace, current, =]
[(, node, ., isLabel, (, ), ), {, LabelNamespace, current, =, namespaceStack, ., peek, (, ), ;, int, currentDepth, =]
[(, node, ., isLabel, (, ), ), {, LabelNamespace, current, =, namespaceStack, ., peek, (, ), ;, int, currentDepth, =]
[(, node, ., isLabel, (, ), ), {, LabelNamespace, current, =, namespaceStack, ., peek, (, ), ;, int, currentDepth, =]
[(, node, ., isLabel, (, ), ), {, LabelNamespace, current, =, namespaceStack, ., peek, (, ), ;, int, currentDepth, =]
[LabelNamespace, current, =, namespaceStack, ., peek, (, ), ;, int, currentDepth, =, current, ., renameMap, ., size, (, ), +]
[peek, (, ), ;, int, currentDepth, =, current, ., renameMap, ., size, (, ), +, 1, ;, String, name, =]
[peek, (, ), ;, int, currentDepth, =, current, ., renameMap, ., size, (, ), +, 1, ;, String, name, =]
[peek, (, ), ;, int, currentDepth, =, current, ., renameMap, ., size, (, ), +, 1, ;, String, name, =]
[), +, 1, ;, String, name, =, node, ., getFirstChild, (, ), ., getString, (, ), ;, LabelInfo, li, =]
[;, String, name, =, node, ., getFirstChild, (, ), ., getString, (, ), ;, LabelInfo, li, =, new, LabelInfo, (]
[=, node, ., getFirstChild, (, ), ., getString, (, ), ;, LabelInfo, li, =, new, LabelInfo, (, currentDepth, ), ;]
[=, node, ., getFirstChild, (, ), ., getString, (, ), ;, LabelInfo, li, =, new, LabelInfo, (, currentDepth, ), ;]
[(, ), ., getString, (, ), ;, LabelInfo, li, =, new, LabelInfo, (, currentDepth, ), ;, Preconditions, ., checkState, (]
[), ., getString, (, ), ;, LabelInfo, li, =, new, LabelInfo, (, currentDepth, ), ;, Preconditions, ., checkState, (, !]
[), ., getString, (, ), ;, LabelInfo, li, =, new, LabelInfo, (, currentDepth, ), ;, Preconditions, ., checkState, (, !]
[), ., getString, (, ), ;, LabelInfo, li, =, new, LabelInfo, (, currentDepth, ), ;, Preconditions, ., checkState, (, !]
[LabelInfo, li, =, new, LabelInfo, (, currentDepth, ), ;, Preconditions, ., checkState, (, !, current, ., renameMap, ., containsKey, (]
[LabelInfo, (, currentDepth, ), ;, Preconditions, ., checkState, (, !, current, ., renameMap, ., containsKey, (, name, ), ), ;]
[LabelInfo, (, currentDepth, ), ;, Preconditions, ., checkState, (, !, current, ., renameMap, ., containsKey, (, name, ), ), ;]
[LabelInfo, (, currentDepth, ), ;, Preconditions, ., checkState, (, !, current, ., renameMap, ., containsKey, (, name, ), ), ;]
[., checkState, (, !, current, ., renameMap, ., containsKey, (, name, ), ), ;, current, ., renameMap, ., put, (]
[(, !, current, ., renameMap, ., containsKey, (, name, ), ), ;, current, ., renameMap, ., put, (, name, ,]
[., containsKey, (, name, ), ), ;, current, ., renameMap, ., put, (, name, ,, li, ), ;, if, (]
[., containsKey, (, name, ), ), ;, current, ., renameMap, ., put, (, name, ,, li, ), ;, if, (]
[., containsKey, (, name, ), ), ;, current, ., renameMap, ., put, (, name, ,, li, ), ;, if, (]
[;, current, ., renameMap, ., put, (, name, ,, li, ), ;, if, (, names, ., size, (, ), <]
[renameMap, ., put, (, name, ,, li, ), ;, if, (, names, ., size, (, ), <, currentDepth, ), {]
[renameMap, ., put, (, name, ,, li, ), ;, if, (, names, ., size, (, ), <, currentDepth, ), {]
[name, ,, li, ), ;, if, (, names, ., size, (, ), <, currentDepth, ), {, names, ., add, (]
[name, ,, li, ), ;, if, (, names, ., size, (, ), <, currentDepth, ), {, names, ., add, (]
[), <, currentDepth, ), {, names, ., add, (, nameSupplier, ., get, (, ), ), ;, }, String, newName, =]
[currentDepth, ), {, names, ., add, (, nameSupplier, ., get, (, ), ), ;, }, String, newName, =, getNameForId, (]
[names, ., add, (, nameSupplier, ., get, (, ), ), ;, }, String, newName, =, getNameForId, (, currentDepth, ), ;]
[names, ., add, (, nameSupplier, ., get, (, ), ), ;, }, String, newName, =, getNameForId, (, currentDepth, ), ;]
[nameSupplier, ., get, (, ), ), ;, }, String, newName, =, getNameForId, (, currentDepth, ), ;, compiler, ., addToDebugLog, (]
[nameSupplier, ., get, (, ), ), ;, }, String, newName, =, getNameForId, (, currentDepth, ), ;, compiler, ., addToDebugLog, (]
[nameSupplier, ., get, (, ), ), ;, }, String, newName, =, getNameForId, (, currentDepth, ), ;, compiler, ., addToDebugLog, (]
[nameSupplier, ., get, (, ), ), ;, }, String, newName, =, getNameForId, (, currentDepth, ), ;, compiler, ., addToDebugLog, (]
[get, (, ), ), ;, }, String, newName, =, getNameForId, (, currentDepth, ), ;, compiler, ., addToDebugLog, (, "label renamed: ", +]
[), ), ;, }, String, newName, =, getNameForId, (, currentDepth, ), ;, compiler, ., addToDebugLog, (, "label renamed: ", +, name, +]
[;, }, String, newName, =, getNameForId, (, currentDepth, ), ;, compiler, ., addToDebugLog, (, "label renamed: ", +, name, +, " => ", +]
[getNameForId, (, currentDepth, ), ;, compiler, ., addToDebugLog, (, "label renamed: ", +, name, +, " => ", +, newName, ), ;, }, return]
[;, }, @, Override, public, void, visit, (, NodeTraversal, nodeTraversal, ,, Node, node, ,, Node, parent, ), {, switch, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, nodeTraversal, ,, Node, node, ,, Node, parent, ), {, switch, (]
[NodeTraversal, nodeTraversal, ,, Node, node, ,, Node, parent, ), {, switch, (, node, ., getType, (, ), ), {, case]
[NodeTraversal, nodeTraversal, ,, Node, node, ,, Node, parent, ), {, switch, (, node, ., getType, (, ), ), {, case]
[node, ,, Node, parent, ), {, switch, (, node, ., getType, (, ), ), {, case, Token, ., LABEL, :]
[Node, parent, ), {, switch, (, node, ., getType, (, ), ), {, case, Token, ., LABEL, :, visitLabel, (]
[), {, switch, (, node, ., getType, (, ), ), {, case, Token, ., LABEL, :, visitLabel, (, node, ,]
[getType, (, ), ), {, case, Token, ., LABEL, :, visitLabel, (, node, ,, parent, ), ;, break, ;, case]
[getType, (, ), ), {, case, Token, ., LABEL, :, visitLabel, (, node, ,, parent, ), ;, break, ;, case]
[case, Token, ., LABEL, :, visitLabel, (, node, ,, parent, ), ;, break, ;, case, Token, ., BREAK, :, case]
[case, Token, ., LABEL, :, visitLabel, (, node, ,, parent, ), ;, break, ;, case, Token, ., BREAK, :, case]
[:, visitLabel, (, node, ,, parent, ), ;, break, ;, case, Token, ., BREAK, :, case, Token, ., CONTINUE, :]
[(, node, ,, parent, ), ;, break, ;, case, Token, ., BREAK, :, case, Token, ., CONTINUE, :, visitBreakOrContinue, (]
[visitBreakOrContinue, (, node, ), ;, break, ;, }, }, private, void, visitBreakOrContinue, (, Node, node, ), {, Node, nameNode, =]
[visitBreakOrContinue, (, node, ), ;, break, ;, }, }, private, void, visitBreakOrContinue, (, Node, node, ), {, Node, nameNode, =]
[}, private, void, visitBreakOrContinue, (, Node, node, ), {, Node, nameNode, =, node, ., getFirstChild, (, ), ;, if, (]
[}, private, void, visitBreakOrContinue, (, Node, node, ), {, Node, nameNode, =, node, ., getFirstChild, (, ), ;, if, (]
[void, visitBreakOrContinue, (, Node, node, ), {, Node, nameNode, =, node, ., getFirstChild, (, ), ;, if, (, nameNode, !=]
[{, Node, nameNode, =, node, ., getFirstChild, (, ), ;, if, (, nameNode, !=, null, ), {, String, name, =]
[{, Node, nameNode, =, node, ., getFirstChild, (, ), ;, if, (, nameNode, !=, null, ), {, String, name, =]
[getFirstChild, (, ), ;, if, (, nameNode, !=, null, ), {, String, name, =, nameNode, ., getString, (, ), ;]
[getFirstChild, (, ), ;, if, (, nameNode, !=, null, ), {, String, name, =, nameNode, ., getString, (, ), ;]
[if, (, nameNode, !=, null, ), {, String, name, =, nameNode, ., getString, (, ), ;, Preconditions, ., checkState, (]
[if, (, nameNode, !=, null, ), {, String, name, =, nameNode, ., getString, (, ), ;, Preconditions, ., checkState, (]
[if, (, nameNode, !=, null, ), {, String, name, =, nameNode, ., getString, (, ), ;, Preconditions, ., checkState, (]
[{, String, name, =, nameNode, ., getString, (, ), ;, Preconditions, ., checkState, (, name, ., length, (, ), !=]
[getString, (, ), ;, Preconditions, ., checkState, (, name, ., length, (, ), !=, 0, ), ;, LabelInfo, li, =]
[), ;, Preconditions, ., checkState, (, name, ., length, (, ), !=, 0, ), ;, LabelInfo, li, =, getLabelInfo, (]
[(, name, ., length, (, ), !=, 0, ), ;, LabelInfo, li, =, getLabelInfo, (, name, ), ;, if, (]
[(, name, ., length, (, ), !=, 0, ), ;, LabelInfo, li, =, getLabelInfo, (, name, ), ;, if, (]
[., length, (, ), !=, 0, ), ;, LabelInfo, li, =, getLabelInfo, (, name, ), ;, if, (, li, !=]
[), ;, LabelInfo, li, =, getLabelInfo, (, name, ), ;, if, (, li, !=, null, ), {, String, newName, =]
[LabelInfo, li, =, getLabelInfo, (, name, ), ;, if, (, li, !=, null, ), {, String, newName, =, getNameForId, (]
[LabelInfo, li, =, getLabelInfo, (, name, ), ;, if, (, li, !=, null, ), {, String, newName, =, getNameForId, (]
[name, ), ;, if, (, li, !=, null, ), {, String, newName, =, getNameForId, (, li, ., id, ), ;]
[name, ), ;, if, (, li, !=, null, ), {, String, newName, =, getNameForId, (, li, ., id, ), ;]
[(, li, !=, null, ), {, String, newName, =, getNameForId, (, li, ., id, ), ;, li, ., referenced, =]
[), {, String, newName, =, getNameForId, (, li, ., id, ), ;, li, ., referenced, =, true, ;, if, (]
[{, String, newName, =, getNameForId, (, li, ., id, ), ;, li, ., referenced, =, true, ;, if, (, !]
[{, String, newName, =, getNameForId, (, li, ., id, ), ;, li, ., referenced, =, true, ;, if, (, !]
[getNameForId, (, li, ., id, ), ;, li, ., referenced, =, true, ;, if, (, !, name, ., equals, (]
[id, ), ;, li, ., referenced, =, true, ;, if, (, !, name, ., equals, (, newName, ), ), {]
[id, ), ;, li, ., referenced, =, true, ;, if, (, !, name, ., equals, (, newName, ), ), {]
[., referenced, =, true, ;, if, (, !, name, ., equals, (, newName, ), ), {, nameNode, ., setString, (]
[true, ;, if, (, !, name, ., equals, (, newName, ), ), {, nameNode, ., setString, (, newName, ), ;]
[true, ;, if, (, !, name, ., equals, (, newName, ), ), {, nameNode, ., setString, (, newName, ), ;]
[), ;, }, }, }, }, private, void, visitLabel, (, Node, node, ,, Node, parent, ), {, Node, nameNode, =]
[), ;, }, }, }, }, private, void, visitLabel, (, Node, node, ,, Node, parent, ), {, Node, nameNode, =]
[private, void, visitLabel, (, Node, node, ,, Node, parent, ), {, Node, nameNode, =, node, ., getFirstChild, (, ), ;]
[private, void, visitLabel, (, Node, node, ,, Node, parent, ), {, Node, nameNode, =, node, ., getFirstChild, (, ), ;]
[Node, node, ,, Node, parent, ), {, Node, nameNode, =, node, ., getFirstChild, (, ), ;, Preconditions, ., checkState, (]
[Node, node, ,, Node, parent, ), {, Node, nameNode, =, node, ., getFirstChild, (, ), ;, Preconditions, ., checkState, (]
[,, Node, parent, ), {, Node, nameNode, =, node, ., getFirstChild, (, ), ;, Preconditions, ., checkState, (, nameNode, !=]
[nameNode, =, node, ., getFirstChild, (, ), ;, Preconditions, ., checkState, (, nameNode, !=, null, ), ;, String, name, =]
[nameNode, =, node, ., getFirstChild, (, ), ;, Preconditions, ., checkState, (, nameNode, !=, null, ), ;, String, name, =]
[., checkState, (, nameNode, !=, null, ), ;, String, name, =, nameNode, ., getString, (, ), ;, LabelInfo, li, =]
[(, nameNode, !=, null, ), ;, String, name, =, nameNode, ., getString, (, ), ;, LabelInfo, li, =, getLabelInfo, (]
[;, String, name, =, nameNode, ., getString, (, ), ;, LabelInfo, li, =, getLabelInfo, (, name, ), ;, if, (]
[;, String, name, =, nameNode, ., getString, (, ), ;, LabelInfo, li, =, getLabelInfo, (, name, ), ;, if, (]
[;, String, name, =, nameNode, ., getString, (, ), ;, LabelInfo, li, =, getLabelInfo, (, name, ), ;, if, (]
[nameNode, ., getString, (, ), ;, LabelInfo, li, =, getLabelInfo, (, name, ), ;, if, (, li, ., referenced, ||]
[., getString, (, ), ;, LabelInfo, li, =, getLabelInfo, (, name, ), ;, if, (, li, ., referenced, ||, !]
[li, =, getLabelInfo, (, name, ), ;, if, (, li, ., referenced, ||, !, removeUnused, ), {, String, newName, =]
[getLabelInfo, (, name, ), ;, if, (, li, ., referenced, ||, !, removeUnused, ), {, String, newName, =, getNameForId, (]
[getLabelInfo, (, name, ), ;, if, (, li, ., referenced, ||, !, removeUnused, ), {, String, newName, =, getNameForId, (]
[li, ., referenced, ||, !, removeUnused, ), {, String, newName, =, getNameForId, (, li, ., id, ), ;, if, (]
[., referenced, ||, !, removeUnused, ), {, String, newName, =, getNameForId, (, li, ., id, ), ;, if, (, !]
[., referenced, ||, !, removeUnused, ), {, String, newName, =, getNameForId, (, li, ., id, ), ;, if, (, !]
[removeUnused, ), {, String, newName, =, getNameForId, (, li, ., id, ), ;, if, (, !, name, ., equals, (]
[newName, =, getNameForId, (, li, ., id, ), ;, if, (, !, name, ., equals, (, newName, ), ), {]
[newName, =, getNameForId, (, li, ., id, ), ;, if, (, !, name, ., equals, (, newName, ), ), {]
[li, ., id, ), ;, if, (, !, name, ., equals, (, newName, ), ), {, nameNode, ., setString, (]
[), ;, if, (, !, name, ., equals, (, newName, ), ), {, nameNode, ., setString, (, newName, ), ;]
[), ;, if, (, !, name, ., equals, (, newName, ), ), {, nameNode, ., setString, (, newName, ), ;]
[nameNode, ., setString, (, newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, {, Node, newChild, =]
[nameNode, ., setString, (, newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, {, Node, newChild, =]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, else, {, Node, newChild, =, node, ., getLastChild, (, ), ;]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, else, {, Node, newChild, =, node, ., getLastChild, (, ), ;]
[(, ), ;, }, }, else, {, Node, newChild, =, node, ., getLastChild, (, ), ;, node, ., removeChild, (]
[}, }, else, {, Node, newChild, =, node, ., getLastChild, (, ), ;, node, ., removeChild, (, newChild, ), ;]
[}, }, else, {, Node, newChild, =, node, ., getLastChild, (, ), ;, node, ., removeChild, (, newChild, ), ;]
[Node, newChild, =, node, ., getLastChild, (, ), ;, node, ., removeChild, (, newChild, ), ;, parent, ., replaceChild, (]
[=, node, ., getLastChild, (, ), ;, node, ., removeChild, (, newChild, ), ;, parent, ., replaceChild, (, node, ,]
[), ;, node, ., removeChild, (, newChild, ), ;, parent, ., replaceChild, (, node, ,, newChild, ), ;, if, (]
[), ;, node, ., removeChild, (, newChild, ), ;, parent, ., replaceChild, (, node, ,, newChild, ), ;, if, (]
[), ;, parent, ., replaceChild, (, node, ,, newChild, ), ;, if, (, newChild, ., isBlock, (, ), ), {]
[), ;, parent, ., replaceChild, (, node, ,, newChild, ), ;, if, (, newChild, ., isBlock, (, ), ), {]
[replaceChild, (, node, ,, newChild, ), ;, if, (, newChild, ., isBlock, (, ), ), {, NodeUtil, ., tryMergeBlock, (]
[newChild, ), ;, if, (, newChild, ., isBlock, (, ), ), {, NodeUtil, ., tryMergeBlock, (, newChild, ), ;, }]
[newChild, ), ;, if, (, newChild, ., isBlock, (, ), ), {, NodeUtil, ., tryMergeBlock, (, newChild, ), ;, }]
[isBlock, (, ), ), {, NodeUtil, ., tryMergeBlock, (, newChild, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }]
[isBlock, (, ), ), {, NodeUtil, ., tryMergeBlock, (, newChild, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }]
[isBlock, (, ), ), {, NodeUtil, ., tryMergeBlock, (, newChild, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }]
[isBlock, (, ), ), {, NodeUtil, ., tryMergeBlock, (, newChild, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, namespaceStack, ., peek, (, ), ., renameMap, ., remove, (]
[peek, (, ), ., renameMap, ., remove, (, name, ), ;, }, String, getNameForId, (, int, id, ), {, return]
[peek, (, ), ., renameMap, ., remove, (, name, ), ;, }, String, getNameForId, (, int, id, ), {, return]
[renameMap, ., remove, (, name, ), ;, }, String, getNameForId, (, int, id, ), {, return, names, ., get, (]
[renameMap, ., remove, (, name, ), ;, }, String, getNameForId, (, int, id, ), {, return, names, ., get, (]
[remove, (, name, ), ;, }, String, getNameForId, (, int, id, ), {, return, names, ., get, (, id, -]
[{, return, names, ., get, (, id, -, 1, ), ;, }, LabelInfo, getLabelInfo, (, String, name, ), {, return]
[{, return, names, ., get, (, id, -, 1, ), ;, }, LabelInfo, getLabelInfo, (, String, name, ), {, return]
[{, return, names, ., get, (, id, -, 1, ), ;, }, LabelInfo, getLabelInfo, (, String, name, ), {, return]
[{, return, names, ., get, (, id, -, 1, ), ;, }, LabelInfo, getLabelInfo, (, String, name, ), {, return]
[;, }, LabelInfo, getLabelInfo, (, String, name, ), {, return, namespaceStack, ., peek, (, ), ., renameMap, ., get, (]
[get, (, name, ), ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[get, (, name, ), ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[(, compiler, ,, root, ,, new, ProcessLabels, (, ), ), ;, }, private, static, class, LabelInfo, {, boolean, referenced, =]
[private, static, class, LabelInfo, {, boolean, referenced, =, false, ;, final, int, id, ;, LabelInfo, (, int, id, ), {]
[private, static, class, LabelInfo, {, boolean, referenced, =, false, ;, final, int, id, ;, LabelInfo, (, int, id, ), {]
[{, boolean, referenced, =, false, ;, final, int, id, ;, LabelInfo, (, int, id, ), {, this, ., id, =]
[id, =, id, ;, }, }, private, static, class, LabelNamespace, {, final, Map, <, String, ,, LabelInfo, >, renameMap, =]
