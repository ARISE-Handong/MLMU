[;, private, HorizontalAlignment, horizontalAlignment, ;, private, VerticalAlignment, verticalAlignment, ;, private, double, horizontalGap, ;, private, double, verticalGap, ;, public, ColumnArrangement, (]
[;, private, HorizontalAlignment, horizontalAlignment, ;, private, VerticalAlignment, verticalAlignment, ;, private, double, horizontalGap, ;, private, double, verticalGap, ;, public, ColumnArrangement, (]
[=, hAlign, ;, this, ., verticalAlignment, =, vAlign, ;, this, ., horizontalGap, =, hGap, ;, this, ., verticalGap, =, vGap]
[., horizontalAlignment, =, hAlign, ;, this, ., verticalAlignment, =, vAlign, ;, this, ., horizontalGap, =, hGap, ;, this, ., verticalGap]
[;, this, ., verticalAlignment, =, vAlign, ;, this, ., horizontalGap, =, hGap, ;, this, ., verticalGap, =, vGap, ;, }]
[=, vAlign, ;, this, ., horizontalGap, =, hGap, ;, this, ., verticalGap, =, vGap, ;, }, public, void, add, (]
[., verticalAlignment, =, vAlign, ;, this, ., horizontalGap, =, hGap, ;, this, ., verticalGap, =, vGap, ;, }, public, void]
[;, this, ., horizontalGap, =, hGap, ;, this, ., verticalGap, =, vGap, ;, }, public, void, add, (, Block, block]
[=, hGap, ;, this, ., verticalGap, =, vGap, ;, }, public, void, add, (, Block, block, ,, Object, key, )]
[., horizontalGap, =, hGap, ;, this, ., verticalGap, =, vGap, ;, }, public, void, add, (, Block, block, ,, Object]
[;, this, ., verticalGap, =, vGap, ;, }, public, void, add, (, Block, block, ,, Object, key, ), {, }]
[=, vGap, ;, }, public, void, add, (, Block, block, ,, Object, key, ), {, }, public, Size2D, arrange, (]
[., verticalGap, =, vGap, ;, }, public, void, add, (, Block, block, ,, Object, key, ), {, }, public, Size2D]
[;, }, public, void, add, (, Block, block, ,, Object, key, ), {, }, public, Size2D, arrange, (, BlockContainer, container]
[;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if]
[., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, .]
[;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return]
[., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, .]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }]
[==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }]
[., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, )]
[), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, )]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==]
[), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, )]
[., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }]
[,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented."]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;]
[), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {]
[==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType]
[), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {]
[., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE]
[;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;]
[), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, )]
[==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==]
[), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, )]
[., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, .]
[;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE]
[), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, .]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else]
[==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented."]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else]
[., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;]
[), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {]
[==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType]
[), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {]
[., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED]
[;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,, constraint]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,]
[), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented."]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;]
[), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, )]
[==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==]
[), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, )]
[., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, .]
[;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE]
[), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, .]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else]
[==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented."]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else]
[., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;]
[), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {]
[==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType]
[), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {]
[., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED]
[;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,]
[), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,, constraint]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,]
[), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, return, new, Size2D, (, ), ;]
[==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, return, new]
[), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, return, new, Size2D, (, ), ;]
[., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, return, new, Size2D, (]
[;, }, }, return, new, Size2D, (, ), ;, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,]
[,, g2, ,, constraint, ), ;, }, }, return, new, Size2D, (, ), ;, }, protected, Size2D, arrangeFF, (, BlockContainer]
[,, constraint, ), ;, }, }, return, new, Size2D, (, ), ;, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,]
[), ;, }, }, return, new, Size2D, (, ), ;, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2]
[;, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeNF, (, container]
[;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, List, blocks, =, container]
[,, g2, ,, constraint, ), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, )]
[,, constraint, ), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, List]
[), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, List, blocks, =]
[;, double, height, =, constraint, ., getHeight, (, ), ;, if, (, height, <=, 0.0, ), {, height, =, Double]
[., getBlocks, (, ), ;, double, height, =, constraint, ., getHeight, (, ), ;, if, (, height, <=, 0.0, )]
[;, if, (, height, <=, 0.0, ), {, height, =, Double, ., POSITIVE_INFINITY, ;, }, double, x, =, 0.0, ;]
[., getHeight, (, ), ;, if, (, height, <=, 0.0, ), {, height, =, Double, ., POSITIVE_INFINITY, ;, }, double]
[), {, height, =, Double, ., POSITIVE_INFINITY, ;, }, double, x, =, 0.0, ;, double, y, =, 0.0, ;, double]
[<=, 0.0, ), {, height, =, Double, ., POSITIVE_INFINITY, ;, }, double, x, =, 0.0, ;, double, y, =, 0.0]
[), {, height, =, Double, ., POSITIVE_INFINITY, ;, }, double, x, =, 0.0, ;, double, y, =, 0.0, ;, double]
[=, Double, ., POSITIVE_INFINITY, ;, }, double, x, =, 0.0, ;, double, y, =, 0.0, ;, double, maxWidth, =, 0.0]
[;, }, double, x, =, 0.0, ;, double, y, =, 0.0, ;, double, maxWidth, =, 0.0, ;, List, itemsInColumn, =]
[., POSITIVE_INFINITY, ;, }, double, x, =, 0.0, ;, double, y, =, 0.0, ;, double, maxWidth, =, 0.0, ;, List]
[;, double, y, =, 0.0, ;, double, maxWidth, =, 0.0, ;, List, itemsInColumn, =, new, ArrayList, (, ), ;, for]
[;, double, maxWidth, =, 0.0, ;, List, itemsInColumn, =, new, ArrayList, (, ), ;, for, (, int, i, =, 0]
[;, List, itemsInColumn, =, new, ArrayList, (, ), ;, for, (, int, i, =, 0, ;, i, <, blocks, .]
[;, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {]
[;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, ), blocks]
[;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, Size2D, size]
[<, blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get]
[;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, Size2D, size]
[., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i]
[), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, Size2D, size, =, block, .]
[++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, Size2D, size, =, block]
[;, Size2D, size, =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (, y, +, size]
[;, Size2D, size, =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (, y, +, size]
[., get, (, i, ), ;, Size2D, size, =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;]
[), ;, Size2D, size, =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (, y, +]
[;, if, (, y, +, size, ., height, <=, height, ), {, itemsInColumn, ., add, (, block, ), ;, block]
[., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (, y, +, size, ., height, <=, height, )]
[,, RectangleConstraint, ., NONE, ), ;, if, (, y, +, size, ., height, <=, height, ), {, itemsInColumn, ., add]
[), ;, if, (, y, +, size, ., height, <=, height, ), {, itemsInColumn, ., add, (, block, ), ;]
[., NONE, ), ;, if, (, y, +, size, ., height, <=, height, ), {, itemsInColumn, ., add, (, block]
[), {, itemsInColumn, ., add, (, block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,]
[<=, height, ), {, itemsInColumn, ., add, (, block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (]
[+, size, ., height, <=, height, ), {, itemsInColumn, ., add, (, block, ), ;, block, ., setBounds, (, new]
[<=, height, ), {, itemsInColumn, ., add, (, block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (]
[., height, <=, height, ), {, itemsInColumn, ., add, (, block, ), ;, block, ., setBounds, (, new, Rectangle2D, .]
[), {, itemsInColumn, ., add, (, block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,]
[;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, size, .]
[., add, (, block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size]
[), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, size]
[;, y, =, y, +, size, ., height, +, this, ., verticalGap, ;, maxWidth, =, Math, ., max, (, maxWidth]
[., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, size, ., height, )]
[), ;, y, =, y, +, size, ., height, +, this, ., verticalGap, ;, maxWidth, =, Math, ., max, (]
[,, y, ,, size, ., width, ,, size, ., height, ), ), ;, y, =, y, +, size, ., height]
[,, size, ., width, ,, size, ., height, ), ), ;, y, =, y, +, size, ., height, +, this]
[,, size, ., height, ), ), ;, y, =, y, +, size, ., height, +, this, ., verticalGap, ;, maxWidth]
[., width, ,, size, ., height, ), ), ;, y, =, y, +, size, ., height, +, this, ., verticalGap]
[), ), ;, y, =, y, +, size, ., height, +, this, ., verticalGap, ;, maxWidth, =, Math, ., max]
[., height, ), ), ;, y, =, y, +, size, ., height, +, this, ., verticalGap, ;, maxWidth, =, Math]
[=, y, +, size, ., height, +, this, ., verticalGap, ;, maxWidth, =, Math, ., max, (, maxWidth, ,, size]
[;, maxWidth, =, Math, ., max, (, maxWidth, ,, size, ., width, ), ;, }, else, {, if, (, itemsInColumn]
[+, this, ., verticalGap, ;, maxWidth, =, Math, ., max, (, maxWidth, ,, size, ., width, ), ;, }, else]
[+, size, ., height, +, this, ., verticalGap, ;, maxWidth, =, Math, ., max, (, maxWidth, ,, size, ., width]
[+, this, ., verticalGap, ;, maxWidth, =, Math, ., max, (, maxWidth, ,, size, ., width, ), ;, }, else]
[., height, +, this, ., verticalGap, ;, maxWidth, =, Math, ., max, (, maxWidth, ,, size, ., width, ), ;]
[;, maxWidth, =, Math, ., max, (, maxWidth, ,, size, ., width, ), ;, }, else, {, if, (, itemsInColumn]
[., verticalGap, ;, maxWidth, =, Math, ., max, (, maxWidth, ,, size, ., width, ), ;, }, else, {, if]
[=, Math, ., max, (, maxWidth, ,, size, ., width, ), ;, }, else, {, if, (, itemsInColumn, ., isEmpty]
[;, }, else, {, if, (, itemsInColumn, ., isEmpty, (, ), ), {, block, ., setBounds, (, new, Rectangle2D, .]
[., max, (, maxWidth, ,, size, ., width, ), ;, }, else, {, if, (, itemsInColumn, ., isEmpty, (, )]
[,, size, ., width, ), ;, }, else, {, if, (, itemsInColumn, ., isEmpty, (, ), ), {, block, .]
[), ;, }, else, {, if, (, itemsInColumn, ., isEmpty, (, ), ), {, block, ., setBounds, (, new, Rectangle2D]
[., width, ), ;, }, else, {, if, (, itemsInColumn, ., isEmpty, (, ), ), {, block, ., setBounds, (]
[), {, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, Math]
[., isEmpty, (, ), ), {, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size]
[;, y, =, 0.0, ;, x, =, x, +, size, ., width, +, this, ., horizontalGap, ;, }, else, {]
[., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, Math, ., min, (]
[), ;, y, =, 0.0, ;, x, =, x, +, size, ., width, +, this, ., horizontalGap, ;, }, else]
[,, y, ,, size, ., width, ,, Math, ., min, (, size, ., height, ,, height, -, y, ), )]
[,, size, ., width, ,, Math, ., min, (, size, ., height, ,, height, -, y, ), ), ), ;]
[,, Math, ., min, (, size, ., height, ,, height, -, y, ), ), ), ;, y, =, 0.0, ;]
[., width, ,, Math, ., min, (, size, ., height, ,, height, -, y, ), ), ), ;, y, =]
[), ), ;, y, =, 0.0, ;, x, =, x, +, size, ., width, +, this, ., horizontalGap, ;, }]
[., min, (, size, ., height, ,, height, -, y, ), ), ), ;, y, =, 0.0, ;, x, =]
[,, height, -, y, ), ), ), ;, y, =, 0.0, ;, x, =, x, +, size, ., width, +]
[., height, ,, height, -, y, ), ), ), ;, y, =, 0.0, ;, x, =, x, +, size, .]
[), ), ), ;, y, =, 0.0, ;, x, =, x, +, size, ., width, +, this, ., horizontalGap, ;]
[-, y, ), ), ), ;, y, =, 0.0, ;, x, =, x, +, size, ., width, +, this, .]
[), ), ), ;, y, =, 0.0, ;, x, =, x, +, size, ., width, +, this, ., horizontalGap, ;]
[=, 0.0, ;, x, =, x, +, size, ., width, +, this, ., horizontalGap, ;, }, else, {, itemsInColumn, .]
[;, x, =, x, +, size, ., width, +, this, ., horizontalGap, ;, }, else, {, itemsInColumn, ., clear, (]
[=, x, +, size, ., width, +, this, ., horizontalGap, ;, }, else, {, itemsInColumn, ., clear, (, ), ;]
[;, }, else, {, itemsInColumn, ., clear, (, ), ;, x, =, x, +, maxWidth, +, this, ., horizontalGap, ;]
[+, this, ., horizontalGap, ;, }, else, {, itemsInColumn, ., clear, (, ), ;, x, =, x, +, maxWidth, +]
[+, size, ., width, +, this, ., horizontalGap, ;, }, else, {, itemsInColumn, ., clear, (, ), ;, x, =]
[+, this, ., horizontalGap, ;, }, else, {, itemsInColumn, ., clear, (, ), ;, x, =, x, +, maxWidth, +]
[., width, +, this, ., horizontalGap, ;, }, else, {, itemsInColumn, ., clear, (, ), ;, x, =, x, +]
[;, }, else, {, itemsInColumn, ., clear, (, ), ;, x, =, x, +, maxWidth, +, this, ., horizontalGap, ;]
[., horizontalGap, ;, }, else, {, itemsInColumn, ., clear, (, ), ;, x, =, x, +, maxWidth, +, this, .]
[;, x, =, x, +, maxWidth, +, this, ., horizontalGap, ;, y, =, 0.0, ;, maxWidth, =, size, ., width]
[., clear, (, ), ;, x, =, x, +, maxWidth, +, this, ., horizontalGap, ;, y, =, 0.0, ;, maxWidth]
[=, x, +, maxWidth, +, this, ., horizontalGap, ;, y, =, 0.0, ;, maxWidth, =, size, ., width, ;, block]
[;, y, =, 0.0, ;, maxWidth, =, size, ., width, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (]
[+, this, ., horizontalGap, ;, y, =, 0.0, ;, maxWidth, =, size, ., width, ;, block, ., setBounds, (, new]
[+, maxWidth, +, this, ., horizontalGap, ;, y, =, 0.0, ;, maxWidth, =, size, ., width, ;, block, ., setBounds]
[+, this, ., horizontalGap, ;, y, =, 0.0, ;, maxWidth, =, size, ., width, ;, block, ., setBounds, (, new]
[;, y, =, 0.0, ;, maxWidth, =, size, ., width, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (]
[., horizontalGap, ;, y, =, 0.0, ;, maxWidth, =, size, ., width, ;, block, ., setBounds, (, new, Rectangle2D, .]
[=, 0.0, ;, maxWidth, =, size, ., width, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,]
[;, maxWidth, =, size, ., width, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,]
[=, size, ., width, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, .]
[;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, Math, .]
[., width, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,]
[;, y, =, size, ., height, +, this, ., verticalGap, ;, itemsInColumn, ., add, (, block, ), ;, }, }]
[., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, Math, ., min, (]
[), ;, y, =, size, ., height, +, this, ., verticalGap, ;, itemsInColumn, ., add, (, block, ), ;, }]
[,, y, ,, size, ., width, ,, Math, ., min, (, size, ., height, ,, height, ), ), ), ;]
[,, size, ., width, ,, Math, ., min, (, size, ., height, ,, height, ), ), ), ;, y, =]
[,, Math, ., min, (, size, ., height, ,, height, ), ), ), ;, y, =, size, ., height, +]
[., width, ,, Math, ., min, (, size, ., height, ,, height, ), ), ), ;, y, =, size, .]
[), ), ;, y, =, size, ., height, +, this, ., verticalGap, ;, itemsInColumn, ., add, (, block, ), ;]
[., min, (, size, ., height, ,, height, ), ), ), ;, y, =, size, ., height, +, this, .]
[,, height, ), ), ), ;, y, =, size, ., height, +, this, ., verticalGap, ;, itemsInColumn, ., add, (]
[., height, ,, height, ), ), ), ;, y, =, size, ., height, +, this, ., verticalGap, ;, itemsInColumn, .]
[), ), ), ;, y, =, size, ., height, +, this, ., verticalGap, ;, itemsInColumn, ., add, (, block, )]
[=, size, ., height, +, this, ., verticalGap, ;, itemsInColumn, ., add, (, block, ), ;, }, }, }, return]
[;, itemsInColumn, ., add, (, block, ), ;, }, }, }, return, new, Size2D, (, x, +, maxWidth, ,, constraint]
[+, this, ., verticalGap, ;, itemsInColumn, ., add, (, block, ), ;, }, }, }, return, new, Size2D, (, x]
[., height, +, this, ., verticalGap, ;, itemsInColumn, ., add, (, block, ), ;, }, }, }, return, new, Size2D]
[;, itemsInColumn, ., add, (, block, ), ;, }, }, }, return, new, Size2D, (, x, +, maxWidth, ,, constraint]
[., verticalGap, ;, itemsInColumn, ., add, (, block, ), ;, }, }, }, return, new, Size2D, (, x, +, maxWidth]
[;, }, }, }, return, new, Size2D, (, x, +, maxWidth, ,, constraint, ., getHeight, (, ), ), ;, }]
[., add, (, block, ), ;, }, }, }, return, new, Size2D, (, x, +, maxWidth, ,, constraint, ., getHeight]
[), ;, }, }, }, return, new, Size2D, (, x, +, maxWidth, ,, constraint, ., getHeight, (, ), ), ;]
[;, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN]
[,, constraint, ., getHeight, (, ), ), ;, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint]
[+, maxWidth, ,, constraint, ., getHeight, (, ), ), ;, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2]
[,, constraint, ., getHeight, (, ), ), ;, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint]
[), ;, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =]
[., getHeight, (, ), ), ;, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, )]
[;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, s1, ., height, ), ), {, return, s1, ;]
[,, g2, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, s1, ., height, ), ), {]
[), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, s1, ., height, ), ), {, return, s1]
[), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (, constraint, ., getHeightRange, (, )]
[., contains, (, s1, ., height, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, .]
[., getHeightRange, (, ), ., contains, (, s1, ., height, ), ), {, return, s1, ;, }, else, {, RectangleConstraint]
[), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (, constraint, ., getHeightRange, (]
[., height, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (, constraint, .]
[;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (, constraint, ., getHeightRange, (, ), ., getUpperBound, (, )]
[;, return, arrangeRF, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,]
[., toFixedHeight, (, constraint, ., getHeightRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeRF, (, container, ,, g2]
[), ;, return, arrangeRF, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container]
[., getUpperBound, (, ), ), ;, return, arrangeRF, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D]
[., getHeightRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeRF, (, container, ,, g2, ,, c, ), ;]
[;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =]
[,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint]
[,, c, ), ;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {]
[), ;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s]
[;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s, ., width, ), ), {, return, s, ;]
[,, g2, ,, constraint, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s, ., width, )]
[,, constraint, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s, ., width, ), ), {]
[), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s, ., width, ), ), {, return, s]
[), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, )]
[., contains, (, s, ., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, .]
[., getWidthRange, (, ), ., contains, (, s, ., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint]
[), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (]
[., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, .]
[;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., constrain, (, s]
[;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,]
[., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., constrain, (, s, ., getWidth, (, ), ), ), ;, return]
[), ;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container]
[., constrain, (, s, ., getWidth, (, ), ), ), ;, return, arrangeFF, (, container, ,, g2, ,, c, )]
[., getWidthRange, (, ), ., constrain, (, s, ., getWidth, (, ), ), ), ;, return, arrangeFF, (, container, ,]
[), ), ;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeNN, (, BlockContainer]
[., getWidth, (, ), ), ), ;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, }, protected]
[;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, double, y, =, 0.0, ;, double]
[,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, double]
[,, c, ), ;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, double, y, =]
[), ;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, double, y, =, 0.0, ;]
[;, double, height, =, 0.0, ;, double, maxWidth, =, 0.0, ;, List, blocks, =, container, ., getBlocks, (, ), ;]
[;, double, maxWidth, =, 0.0, ;, List, blocks, =, container, ., getBlocks, (, ), ;, int, blockCount, =, blocks, .]
[;, List, blocks, =, container, ., getBlocks, (, ), ;, int, blockCount, =, blocks, ., size, (, ), ;, if]
[;, int, blockCount, =, blocks, ., size, (, ), ;, if, (, blockCount, >, 0, ), {, Size2D, [, ]]
[., getBlocks, (, ), ;, int, blockCount, =, blocks, ., size, (, ), ;, if, (, blockCount, >, 0, )]
[;, if, (, blockCount, >, 0, ), {, Size2D, [, ], sizes, =, new, Size2D, [, blocks, ., size, (]
[., size, (, ), ;, if, (, blockCount, >, 0, ), {, Size2D, [, ], sizes, =, new, Size2D, []
[), {, Size2D, [, ], sizes, =, new, Size2D, [, blocks, ., size, (, ), ], ;, for, (, int]
[>, 0, ), {, Size2D, [, ], sizes, =, new, Size2D, [, blocks, ., size, (, ), ], ;, for]
[), {, Size2D, [, ], sizes, =, new, Size2D, [, blocks, ., size, (, ), ], ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i, ++, )]
[., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, )]
[;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, ), blocks]
[;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, sizes, []
[<, blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get]
[;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, sizes, []
[., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i]
[), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, sizes, [, i, ], =]
[++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, sizes, [, i, ]]
[;, sizes, [, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, height, =, height]
[;, sizes, [, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, height, =, height]
[., get, (, i, ), ;, sizes, [, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE]
[), ;, sizes, [, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, height, =]
[=, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, height, =, height, +, sizes, [, i, ]]
[[, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, height, =, height, +, sizes]
[], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, height, =, height, +, sizes, [, i]
[;, height, =, height, +, sizes, [, i, ], ., getHeight, (, ), ;, maxWidth, =, Math, ., max, (]
[., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, height, =, height, +, sizes, [, i, ], ., getHeight]
[,, RectangleConstraint, ., NONE, ), ;, height, =, height, +, sizes, [, i, ], ., getHeight, (, ), ;, maxWidth]
[), ;, height, =, height, +, sizes, [, i, ], ., getHeight, (, ), ;, maxWidth, =, Math, ., max]
[., NONE, ), ;, height, =, height, +, sizes, [, i, ], ., getHeight, (, ), ;, maxWidth, =, Math]
[=, height, +, sizes, [, i, ], ., getHeight, (, ), ;, maxWidth, =, Math, ., max, (, sizes, []
[;, maxWidth, =, Math, ., max, (, sizes, [, i, ], ., width, ,, maxWidth, ), ;, block, ., setBounds]
[+, sizes, [, i, ], ., getHeight, (, ), ;, maxWidth, =, Math, ., max, (, sizes, [, i, ]]
[;, maxWidth, =, Math, ., max, (, sizes, [, i, ], ., width, ,, maxWidth, ), ;, block, ., setBounds]
[., getHeight, (, ), ;, maxWidth, =, Math, ., max, (, sizes, [, i, ], ., width, ,, maxWidth, )]
[[, i, ], ., getHeight, (, ), ;, maxWidth, =, Math, ., max, (, sizes, [, i, ], ., width]
[], ., getHeight, (, ), ;, maxWidth, =, Math, ., max, (, sizes, [, i, ], ., width, ,, maxWidth]
[=, Math, ., max, (, sizes, [, i, ], ., width, ,, maxWidth, ), ;, block, ., setBounds, (, new]
[;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, y, ,, sizes, [, i, ], ., width]
[., max, (, sizes, [, i, ], ., width, ,, maxWidth, ), ;, block, ., setBounds, (, new, Rectangle2D, .]
[,, maxWidth, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, y, ,, sizes, [, i]
[., width, ,, maxWidth, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, y, ,, sizes]
[[, i, ], ., width, ,, maxWidth, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,]
[], ., width, ,, maxWidth, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, y, ,]
[), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, y, ,, sizes, [, i, ], .]
[;, y, =, y, +, sizes, [, i, ], ., height, +, this, ., verticalGap, ;, }, if, (, blockCount]
[., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, y, ,, sizes, [, i, ], ., width, ,, sizes]
[), ;, y, =, y, +, sizes, [, i, ], ., height, +, this, ., verticalGap, ;, }, if, (]
[,, y, ,, sizes, [, i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;, y]
[,, sizes, [, i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;, y, =, y]
[,, sizes, [, i, ], ., height, ), ), ;, y, =, y, +, sizes, [, i, ], ., height]
[., width, ,, sizes, [, i, ], ., height, ), ), ;, y, =, y, +, sizes, [, i, ]]
[[, i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;, y, =, y, +, sizes]
[], ., width, ,, sizes, [, i, ], ., height, ), ), ;, y, =, y, +, sizes, [, i]
[), ), ;, y, =, y, +, sizes, [, i, ], ., height, +, this, ., verticalGap, ;, }, if]
[., height, ), ), ;, y, =, y, +, sizes, [, i, ], ., height, +, this, ., verticalGap, ;]
[[, i, ], ., height, ), ), ;, y, =, y, +, sizes, [, i, ], ., height, +, this]
[], ., height, ), ), ;, y, =, y, +, sizes, [, i, ], ., height, +, this, ., verticalGap]
[=, y, +, sizes, [, i, ], ., height, +, this, ., verticalGap, ;, }, if, (, blockCount, >, 1]
[;, }, if, (, blockCount, >, 1, ), {, height, =, height, +, this, ., verticalGap, *, (, blockCount, -]
[+, this, ., verticalGap, ;, }, if, (, blockCount, >, 1, ), {, height, =, height, +, this, ., verticalGap]
[+, sizes, [, i, ], ., height, +, this, ., verticalGap, ;, }, if, (, blockCount, >, 1, ), {]
[+, this, ., verticalGap, ;, }, if, (, blockCount, >, 1, ), {, height, =, height, +, this, ., verticalGap]
[., height, +, this, ., verticalGap, ;, }, if, (, blockCount, >, 1, ), {, height, =, height, +, this]
[[, i, ], ., height, +, this, ., verticalGap, ;, }, if, (, blockCount, >, 1, ), {, height, =]
[], ., height, +, this, ., verticalGap, ;, }, if, (, blockCount, >, 1, ), {, height, =, height, +]
[;, }, if, (, blockCount, >, 1, ), {, height, =, height, +, this, ., verticalGap, *, (, blockCount, -]
[., verticalGap, ;, }, if, (, blockCount, >, 1, ), {, height, =, height, +, this, ., verticalGap, *, (]
[), {, height, =, height, +, this, ., verticalGap, *, (, blockCount, -, 1, ), ;, }, if, (, this]
[>, 1, ), {, height, =, height, +, this, ., verticalGap, *, (, blockCount, -, 1, ), ;, }, if]
[), {, height, =, height, +, this, ., verticalGap, *, (, blockCount, -, 1, ), ;, }, if, (, this]
[=, height, +, this, ., verticalGap, *, (, blockCount, -, 1, ), ;, }, if, (, this, ., horizontalAlignment, !=]
[;, }, if, (, this, ., horizontalAlignment, !=, HorizontalAlignment, ., LEFT, ), {, for, (, int, i, =, 0, ;]
[+, this, ., verticalGap, *, (, blockCount, -, 1, ), ;, }, if, (, this, ., horizontalAlignment, !=, HorizontalAlignment, .]
[;, }, if, (, this, ., horizontalAlignment, !=, HorizontalAlignment, ., LEFT, ), {, for, (, int, i, =, 0, ;]
[*, (, blockCount, -, 1, ), ;, }, if, (, this, ., horizontalAlignment, !=, HorizontalAlignment, ., LEFT, ), {, for]
[., verticalGap, *, (, blockCount, -, 1, ), ;, }, if, (, this, ., horizontalAlignment, !=, HorizontalAlignment, ., LEFT, )]
[;, }, if, (, this, ., horizontalAlignment, !=, HorizontalAlignment, ., LEFT, ), {, for, (, int, i, =, 0, ;]
[), ;, }, if, (, this, ., horizontalAlignment, !=, HorizontalAlignment, ., LEFT, ), {, for, (, int, i, =, 0]
[-, 1, ), ;, }, if, (, this, ., horizontalAlignment, !=, HorizontalAlignment, ., LEFT, ), {, for, (, int, i]
[), ;, }, if, (, this, ., horizontalAlignment, !=, HorizontalAlignment, ., LEFT, ), {, for, (, int, i, =, 0]
[), {, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i, ++, )]
[!=, HorizontalAlignment, ., LEFT, ), {, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, )]
[., horizontalAlignment, !=, HorizontalAlignment, ., LEFT, ), {, for, (, int, i, =, 0, ;, i, <, blocks, ., size]
[), {, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i, ++, )]
[., LEFT, ), {, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i]
[;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, if, (, this, ., horizontalAlignment, ==, HorizontalAlignment]
[;, i, ++, ), {, if, (, this, ., horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, }, else, if, (]
[<, blocks, ., size, (, ), ;, i, ++, ), {, if, (, this, ., horizontalAlignment, ==, HorizontalAlignment, ., CENTER]
[;, i, ++, ), {, if, (, this, ., horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, }, else, if, (]
[., size, (, ), ;, i, ++, ), {, if, (, this, ., horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {]
[), {, if, (, this, ., horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, }, else, if, (, this, ., horizontalAlignment]
[++, ), {, if, (, this, ., horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, }, else, if, (, this, .]
[), {, }, else, if, (, this, ., horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, ), {, }, }, }, }, return]
[==, HorizontalAlignment, ., CENTER, ), {, }, else, if, (, this, ., horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, ), {, }]
[., horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, }, else, if, (, this, ., horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, )]
[), {, }, else, if, (, this, ., horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, ), {, }, }, }, }, return]
[., CENTER, ), {, }, else, if, (, this, ., horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, ), {, }, }, }]
[), {, }, }, }, }, return, new, Size2D, (, maxWidth, ,, height, ), ;, }, public, void, clear, (]
[==, HorizontalAlignment, ., RIGHT, ), {, }, }, }, }, return, new, Size2D, (, maxWidth, ,, height, ), ;, }]
[., horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, ), {, }, }, }, }, return, new, Size2D, (, maxWidth, ,, height, )]
[), {, }, }, }, }, return, new, Size2D, (, maxWidth, ,, height, ), ;, }, public, void, clear, (]
[., RIGHT, ), {, }, }, }, }, return, new, Size2D, (, maxWidth, ,, height, ), ;, }, public, void]
[;, }, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj]
[,, height, ), ;, }, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {]
[), ;, }, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, ColumnArrangement, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, ColumnArrangement, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, ColumnArrangement, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, ColumnArrangement, ), ), {, return, false, ;, }, ColumnArrangement, that, =, (]
[), {, return, false, ;, }, ColumnArrangement, that, =, (, ColumnArrangement, ), obj, ;, if, (, this, ., horizontalAlignment, !=]
[), {, return, false, ;, }, ColumnArrangement, that, =, (, ColumnArrangement, ), obj, ;, if, (, this, ., horizontalAlignment, !=]
[), ), {, return, false, ;, }, ColumnArrangement, that, =, (, ColumnArrangement, ), obj, ;, if, (, this, ., horizontalAlignment]
[instanceof, ColumnArrangement, ), ), {, return, false, ;, }, ColumnArrangement, that, =, (, ColumnArrangement, ), obj, ;, if, (, this]
[;, }, ColumnArrangement, that, =, (, ColumnArrangement, ), obj, ;, if, (, this, ., horizontalAlignment, !=, that, ., horizontalAlignment, )]
[;, if, (, this, ., horizontalAlignment, !=, that, ., horizontalAlignment, ), {, return, false, ;, }, if, (, this, .]
[;, if, (, this, ., horizontalAlignment, !=, that, ., horizontalAlignment, ), {, return, false, ;, }, if, (, this, .]
[), {, return, false, ;, }, if, (, this, ., verticalAlignment, !=, that, ., verticalAlignment, ), {, return, false, ;]
[!=, that, ., horizontalAlignment, ), {, return, false, ;, }, if, (, this, ., verticalAlignment, !=, that, ., verticalAlignment, )]
[., horizontalAlignment, !=, that, ., horizontalAlignment, ), {, return, false, ;, }, if, (, this, ., verticalAlignment, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., verticalAlignment, !=, that, ., verticalAlignment, ), {, return, false, ;]
[., horizontalAlignment, ), {, return, false, ;, }, if, (, this, ., verticalAlignment, !=, that, ., verticalAlignment, ), {, return]
[;, }, if, (, this, ., verticalAlignment, !=, that, ., verticalAlignment, ), {, return, false, ;, }, if, (, this]
[), {, return, false, ;, }, if, (, this, ., horizontalGap, !=, that, ., horizontalGap, ), {, return, false, ;]
[!=, that, ., verticalAlignment, ), {, return, false, ;, }, if, (, this, ., horizontalGap, !=, that, ., horizontalGap, )]
[., verticalAlignment, !=, that, ., verticalAlignment, ), {, return, false, ;, }, if, (, this, ., horizontalGap, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., horizontalGap, !=, that, ., horizontalGap, ), {, return, false, ;]
[., verticalAlignment, ), {, return, false, ;, }, if, (, this, ., horizontalGap, !=, that, ., horizontalGap, ), {, return]
[;, }, if, (, this, ., horizontalGap, !=, that, ., horizontalGap, ), {, return, false, ;, }, if, (, this]
[), {, return, false, ;, }, if, (, this, ., verticalGap, !=, that, ., verticalGap, ), {, return, false, ;]
[!=, that, ., horizontalGap, ), {, return, false, ;, }, if, (, this, ., verticalGap, !=, that, ., verticalGap, )]
[., horizontalGap, !=, that, ., horizontalGap, ), {, return, false, ;, }, if, (, this, ., verticalGap, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., verticalGap, !=, that, ., verticalGap, ), {, return, false, ;]
[., horizontalGap, ), {, return, false, ;, }, if, (, this, ., verticalGap, !=, that, ., verticalGap, ), {, return]
[;, }, if, (, this, ., verticalGap, !=, that, ., verticalGap, ), {, return, false, ;, }, return, true, ;]
[), {, return, false, ;, }, return, true, ;, }, }]
[!=, that, ., verticalGap, ), {, return, false, ;, }, return, true, ;, }, }]
[., verticalGap, !=, that, ., verticalGap, ), {, return, false, ;, }, return, true, ;, }, }]
[), {, return, false, ;, }, return, true, ;, }, }]
[., verticalGap, ), {, return, false, ;, }, return, true, ;, }, }]
[;, }, return, true, ;, }, }]
[;, }, }]
