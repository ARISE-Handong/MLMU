[;, private, double, [, ], y0Dot, ;, private, double, [, ], y1, ;, private, double, [, ], y1Dot, ;, private]
[=, null, ;, y1, =, null, ;, y1Dot, =, null, ;, yMidDots, =, null, ;, resetTables, (, -, 1, )]
[;, y1, =, null, ;, y1Dot, =, null, ;, yMidDots, =, null, ;, resetTables, (, -, 1, ), ;, }]
[=, null, ;, y1Dot, =, null, ;, yMidDots, =, null, ;, resetTables, (, -, 1, ), ;, }, public, GraggBulirschStoerStepInterpolator]
[;, y1Dot, =, null, ;, yMidDots, =, null, ;, resetTables, (, -, 1, ), ;, }, public, GraggBulirschStoerStepInterpolator, (, final]
[=, null, ;, yMidDots, =, null, ;, resetTables, (, -, 1, ), ;, }, public, GraggBulirschStoerStepInterpolator, (, final, double, []
[;, yMidDots, =, null, ;, resetTables, (, -, 1, ), ;, }, public, GraggBulirschStoerStepInterpolator, (, final, double, [, ], y]
[=, null, ;, resetTables, (, -, 1, ), ;, }, public, GraggBulirschStoerStepInterpolator, (, final, double, [, ], y, ,, final]
[;, resetTables, (, -, 1, ), ;, }, public, GraggBulirschStoerStepInterpolator, (, final, double, [, ], y, ,, final, double, []
[;, }, public, GraggBulirschStoerStepInterpolator, (, final, double, [, ], y, ,, final, double, [, ], y0Dot, ,, final, double, []
[), ;, }, public, GraggBulirschStoerStepInterpolator, (, final, double, [, ], y, ,, final, double, [, ], y0Dot, ,, final, double]
[), ;, }, public, GraggBulirschStoerStepInterpolator, (, final, double, [, ], y, ,, final, double, [, ], y0Dot, ,, final, double]
[,, forward, ,, primaryMapper, ,, secondaryMappers, ), ;, this, ., y0Dot, =, y0Dot, ;, this, ., y1, =, y1, ;]
[,, primaryMapper, ,, secondaryMappers, ), ;, this, ., y0Dot, =, y0Dot, ;, this, ., y1, =, y1, ;, this, .]
[,, secondaryMappers, ), ;, this, ., y0Dot, =, y0Dot, ;, this, ., y1, =, y1, ;, this, ., y1Dot, =]
[), ;, this, ., y0Dot, =, y0Dot, ;, this, ., y1, =, y1, ;, this, ., y1Dot, =, y1Dot, ;]
[=, y0Dot, ;, this, ., y1, =, y1, ;, this, ., y1Dot, =, y1Dot, ;, this, ., yMidDots, =, yMidDots]
[., y0Dot, =, y0Dot, ;, this, ., y1, =, y1, ;, this, ., y1Dot, =, y1Dot, ;, this, ., yMidDots]
[;, this, ., y1, =, y1, ;, this, ., y1Dot, =, y1Dot, ;, this, ., yMidDots, =, yMidDots, ;, resetTables]
[=, y1, ;, this, ., y1Dot, =, y1Dot, ;, this, ., yMidDots, =, yMidDots, ;, resetTables, (, yMidDots, ., length]
[., y1, =, y1, ;, this, ., y1Dot, =, y1Dot, ;, this, ., yMidDots, =, yMidDots, ;, resetTables, (, yMidDots]
[;, this, ., y1Dot, =, y1Dot, ;, this, ., yMidDots, =, yMidDots, ;, resetTables, (, yMidDots, ., length, +, 4]
[=, y1Dot, ;, this, ., yMidDots, =, yMidDots, ;, resetTables, (, yMidDots, ., length, +, 4, ), ;, }, public]
[., y1Dot, =, y1Dot, ;, this, ., yMidDots, =, yMidDots, ;, resetTables, (, yMidDots, ., length, +, 4, ), ;]
[;, this, ., yMidDots, =, yMidDots, ;, resetTables, (, yMidDots, ., length, +, 4, ), ;, }, public, GraggBulirschStoerStepInterpolator, (]
[=, yMidDots, ;, resetTables, (, yMidDots, ., length, +, 4, ), ;, }, public, GraggBulirschStoerStepInterpolator, (, final, GraggBulirschStoerStepInterpolator, interpolator, )]
[., yMidDots, =, yMidDots, ;, resetTables, (, yMidDots, ., length, +, 4, ), ;, }, public, GraggBulirschStoerStepInterpolator, (, final, GraggBulirschStoerStepInterpolator]
[;, resetTables, (, yMidDots, ., length, +, 4, ), ;, }, public, GraggBulirschStoerStepInterpolator, (, final, GraggBulirschStoerStepInterpolator, interpolator, ), {, super]
[;, }, public, GraggBulirschStoerStepInterpolator, (, final, GraggBulirschStoerStepInterpolator, interpolator, ), {, super, (, interpolator, ), ;, final, int, dimension, =, currentState]
[), ;, }, public, GraggBulirschStoerStepInterpolator, (, final, GraggBulirschStoerStepInterpolator, interpolator, ), {, super, (, interpolator, ), ;, final, int, dimension, =]
[+, 4, ), ;, }, public, GraggBulirschStoerStepInterpolator, (, final, GraggBulirschStoerStepInterpolator, interpolator, ), {, super, (, interpolator, ), ;, final, int]
[., length, +, 4, ), ;, }, public, GraggBulirschStoerStepInterpolator, (, final, GraggBulirschStoerStepInterpolator, interpolator, ), {, super, (, interpolator, ), ;]
[), ;, }, public, GraggBulirschStoerStepInterpolator, (, final, GraggBulirschStoerStepInterpolator, interpolator, ), {, super, (, interpolator, ), ;, final, int, dimension, =]
[), ;, final, int, dimension, =, currentState, ., length, ;, y0Dot, =, null, ;, y1, =, null, ;, y1Dot, =]
[;, y0Dot, =, null, ;, y1, =, null, ;, y1Dot, =, null, ;, yMidDots, =, null, ;, if, (, interpolator]
[., length, ;, y0Dot, =, null, ;, y1, =, null, ;, y1Dot, =, null, ;, yMidDots, =, null, ;, if]
[=, null, ;, y1, =, null, ;, y1Dot, =, null, ;, yMidDots, =, null, ;, if, (, interpolator, ., polynomials]
[;, y1, =, null, ;, y1Dot, =, null, ;, yMidDots, =, null, ;, if, (, interpolator, ., polynomials, ==, null]
[=, null, ;, y1Dot, =, null, ;, yMidDots, =, null, ;, if, (, interpolator, ., polynomials, ==, null, ), {]
[;, y1Dot, =, null, ;, yMidDots, =, null, ;, if, (, interpolator, ., polynomials, ==, null, ), {, polynomials, =]
[=, null, ;, yMidDots, =, null, ;, if, (, interpolator, ., polynomials, ==, null, ), {, polynomials, =, null, ;]
[;, yMidDots, =, null, ;, if, (, interpolator, ., polynomials, ==, null, ), {, polynomials, =, null, ;, currentDegree, =]
[=, null, ;, if, (, interpolator, ., polynomials, ==, null, ), {, polynomials, =, null, ;, currentDegree, =, -, 1]
[;, if, (, interpolator, ., polynomials, ==, null, ), {, polynomials, =, null, ;, currentDegree, =, -, 1, ;, }]
[), {, polynomials, =, null, ;, currentDegree, =, -, 1, ;, }, else, {, resetTables, (, interpolator, ., currentDegree, )]
[==, null, ), {, polynomials, =, null, ;, currentDegree, =, -, 1, ;, }, else, {, resetTables, (, interpolator, .]
[., polynomials, ==, null, ), {, polynomials, =, null, ;, currentDegree, =, -, 1, ;, }, else, {, resetTables, (]
[), {, polynomials, =, null, ;, currentDegree, =, -, 1, ;, }, else, {, resetTables, (, interpolator, ., currentDegree, )]
[=, null, ;, currentDegree, =, -, 1, ;, }, else, {, resetTables, (, interpolator, ., currentDegree, ), ;, for, (]
[;, currentDegree, =, -, 1, ;, }, else, {, resetTables, (, interpolator, ., currentDegree, ), ;, for, (, int, i]
[=, -, 1, ;, }, else, {, resetTables, (, interpolator, ., currentDegree, ), ;, for, (, int, i, =, 0]
[;, }, else, {, resetTables, (, interpolator, ., currentDegree, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, }, else, {, resetTables, (, interpolator, ., currentDegree, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, polynomials, ., length, ;, ++, i, ), {, polynomials, []
[), ;, for, (, int, i, =, 0, ;, i, <, polynomials, ., length, ;, ++, i, ), {, polynomials]
[., currentDegree, ), ;, for, (, int, i, =, 0, ;, i, <, polynomials, ., length, ;, ++, i, )]
[;, i, <, polynomials, ., length, ;, ++, i, ), {, polynomials, [, i, ], =, new, double, [, dimension]
[;, ++, i, ), {, polynomials, [, i, ], =, new, double, [, dimension, ], ;, System, ., arraycopy, (]
[<, polynomials, ., length, ;, ++, i, ), {, polynomials, [, i, ], =, new, double, [, dimension, ], ;]
[;, ++, i, ), {, polynomials, [, i, ], =, new, double, [, dimension, ], ;, System, ., arraycopy, (]
[., length, ;, ++, i, ), {, polynomials, [, i, ], =, new, double, [, dimension, ], ;, System, .]
[), {, polynomials, [, i, ], =, new, double, [, dimension, ], ;, System, ., arraycopy, (, interpolator, ., polynomials]
[), {, polynomials, [, i, ], =, new, double, [, dimension, ], ;, System, ., arraycopy, (, interpolator, ., polynomials]
[=, new, double, [, dimension, ], ;, System, ., arraycopy, (, interpolator, ., polynomials, [, i, ], ,, 0, ,]
[[, i, ], =, new, double, [, dimension, ], ;, System, ., arraycopy, (, interpolator, ., polynomials, [, i, ]]
[], =, new, double, [, dimension, ], ;, System, ., arraycopy, (, interpolator, ., polynomials, [, i, ], ,, 0]
[;, System, ., arraycopy, (, interpolator, ., polynomials, [, i, ], ,, 0, ,, polynomials, [, i, ], ,, 0]
[], ;, System, ., arraycopy, (, interpolator, ., polynomials, [, i, ], ,, 0, ,, polynomials, [, i, ], ,]
[;, }, currentDegree, =, interpolator, ., currentDegree, ;, }, }, private, void, resetTables, (, final, int, maxDegree, ), {, if]
[., arraycopy, (, interpolator, ., polynomials, [, i, ], ,, 0, ,, polynomials, [, i, ], ,, 0, ,, dimension]
[,, 0, ,, polynomials, [, i, ], ,, 0, ,, dimension, ), ;, }, currentDegree, =, interpolator, ., currentDegree, ;]
[[, i, ], ,, 0, ,, polynomials, [, i, ], ,, 0, ,, dimension, ), ;, }, currentDegree, =, interpolator]
[., polynomials, [, i, ], ,, 0, ,, polynomials, [, i, ], ,, 0, ,, dimension, ), ;, }, currentDegree]
[], ,, 0, ,, polynomials, [, i, ], ,, 0, ,, dimension, ), ;, }, currentDegree, =, interpolator, ., currentDegree]
[,, polynomials, [, i, ], ,, 0, ,, dimension, ), ;, }, currentDegree, =, interpolator, ., currentDegree, ;, }, }]
[,, 0, ,, dimension, ), ;, }, currentDegree, =, interpolator, ., currentDegree, ;, }, }, private, void, resetTables, (, final]
[[, i, ], ,, 0, ,, dimension, ), ;, }, currentDegree, =, interpolator, ., currentDegree, ;, }, }, private, void]
[], ,, 0, ,, dimension, ), ;, }, currentDegree, =, interpolator, ., currentDegree, ;, }, }, private, void, resetTables, (]
[,, dimension, ), ;, }, currentDegree, =, interpolator, ., currentDegree, ;, }, }, private, void, resetTables, (, final, int, maxDegree]
[), ;, }, currentDegree, =, interpolator, ., currentDegree, ;, }, }, private, void, resetTables, (, final, int, maxDegree, ), {]
[=, interpolator, ., currentDegree, ;, }, }, private, void, resetTables, (, final, int, maxDegree, ), {, if, (, maxDegree, <]
[;, }, }, private, void, resetTables, (, final, int, maxDegree, ), {, if, (, maxDegree, <, 0, ), {, polynomials]
[., currentDegree, ;, }, }, private, void, resetTables, (, final, int, maxDegree, ), {, if, (, maxDegree, <, 0, )]
[), {, polynomials, =, null, ;, errfac, =, null, ;, currentDegree, =, -, 1, ;, }, else, {, final, double]
[<, 0, ), {, polynomials, =, null, ;, errfac, =, null, ;, currentDegree, =, -, 1, ;, }, else, {]
[), {, polynomials, =, null, ;, errfac, =, null, ;, currentDegree, =, -, 1, ;, }, else, {, final, double]
[=, null, ;, errfac, =, null, ;, currentDegree, =, -, 1, ;, }, else, {, final, double, [, ], []
[;, errfac, =, null, ;, currentDegree, =, -, 1, ;, }, else, {, final, double, [, ], [, ], newPols]
[=, null, ;, currentDegree, =, -, 1, ;, }, else, {, final, double, [, ], [, ], newPols, =, new]
[;, currentDegree, =, -, 1, ;, }, else, {, final, double, [, ], [, ], newPols, =, new, double, []
[=, -, 1, ;, }, else, {, final, double, [, ], [, ], newPols, =, new, double, [, maxDegree, +]
[;, }, else, {, final, double, [, ], [, ], newPols, =, new, double, [, maxDegree, +, 1, ], []
[;, }, else, {, final, double, [, ], [, ], newPols, =, new, double, [, maxDegree, +, 1, ], []
[;, if, (, polynomials, !=, null, ), {, System, ., arraycopy, (, polynomials, ,, 0, ,, newPols, ,, 0, ,]
[], [, ], ;, if, (, polynomials, !=, null, ), {, System, ., arraycopy, (, polynomials, ,, 0, ,, newPols]
[+, 1, ], [, ], ;, if, (, polynomials, !=, null, ), {, System, ., arraycopy, (, polynomials, ,, 0]
[], [, ], ;, if, (, polynomials, !=, null, ), {, System, ., arraycopy, (, polynomials, ,, 0, ,, newPols]
[), {, System, ., arraycopy, (, polynomials, ,, 0, ,, newPols, ,, 0, ,, polynomials, ., length, ), ;, for]
[!=, null, ), {, System, ., arraycopy, (, polynomials, ,, 0, ,, newPols, ,, 0, ,, polynomials, ., length, )]
[), {, System, ., arraycopy, (, polynomials, ,, 0, ,, newPols, ,, 0, ,, polynomials, ., length, ), ;, for]
[;, for, (, int, i, =, polynomials, ., length, ;, i, <, newPols, ., length, ;, ++, i, ), {]
[., arraycopy, (, polynomials, ,, 0, ,, newPols, ,, 0, ,, polynomials, ., length, ), ;, for, (, int, i]
[,, 0, ,, newPols, ,, 0, ,, polynomials, ., length, ), ;, for, (, int, i, =, polynomials, ., length]
[,, newPols, ,, 0, ,, polynomials, ., length, ), ;, for, (, int, i, =, polynomials, ., length, ;, i]
[,, 0, ,, polynomials, ., length, ), ;, for, (, int, i, =, polynomials, ., length, ;, i, <, newPols]
[,, polynomials, ., length, ), ;, for, (, int, i, =, polynomials, ., length, ;, i, <, newPols, ., length]
[), ;, for, (, int, i, =, polynomials, ., length, ;, i, <, newPols, ., length, ;, ++, i, )]
[., length, ), ;, for, (, int, i, =, polynomials, ., length, ;, i, <, newPols, ., length, ;, ++]
[;, i, <, newPols, ., length, ;, ++, i, ), {, newPols, [, i, ], =, new, double, [, currentState]
[., length, ;, i, <, newPols, ., length, ;, ++, i, ), {, newPols, [, i, ], =, new, double]
[;, ++, i, ), {, newPols, [, i, ], =, new, double, [, currentState, ., length, ], ;, }, }]
[<, newPols, ., length, ;, ++, i, ), {, newPols, [, i, ], =, new, double, [, currentState, ., length]
[;, ++, i, ), {, newPols, [, i, ], =, new, double, [, currentState, ., length, ], ;, }, }]
[., length, ;, ++, i, ), {, newPols, [, i, ], =, new, double, [, currentState, ., length, ], ;]
[), {, newPols, [, i, ], =, new, double, [, currentState, ., length, ], ;, }, }, else, {, for]
[), {, newPols, [, i, ], =, new, double, [, currentState, ., length, ], ;, }, }, else, {, for]
[=, new, double, [, currentState, ., length, ], ;, }, }, else, {, for, (, int, i, =, 0, ;]
[[, i, ], =, new, double, [, currentState, ., length, ], ;, }, }, else, {, for, (, int, i]
[], =, new, double, [, currentState, ., length, ], ;, }, }, else, {, for, (, int, i, =, 0]
[;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, newPols, ., length, ;, ++, i]
[], ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, newPols, ., length, ;, ++]
[., length, ], ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, newPols, ., length]
[;, i, <, newPols, ., length, ;, ++, i, ), {, newPols, [, i, ], =, new, double, [, currentState]
[;, ++, i, ), {, newPols, [, i, ], =, new, double, [, currentState, ., length, ], ;, }, }]
[<, newPols, ., length, ;, ++, i, ), {, newPols, [, i, ], =, new, double, [, currentState, ., length]
[;, ++, i, ), {, newPols, [, i, ], =, new, double, [, currentState, ., length, ], ;, }, }]
[., length, ;, ++, i, ), {, newPols, [, i, ], =, new, double, [, currentState, ., length, ], ;]
[), {, newPols, [, i, ], =, new, double, [, currentState, ., length, ], ;, }, }, polynomials, =, newPols]
[), {, newPols, [, i, ], =, new, double, [, currentState, ., length, ], ;, }, }, polynomials, =, newPols]
[=, new, double, [, currentState, ., length, ], ;, }, }, polynomials, =, newPols, ;, if, (, maxDegree, <=, 4]
[[, i, ], =, new, double, [, currentState, ., length, ], ;, }, }, polynomials, =, newPols, ;, if, (]
[], =, new, double, [, currentState, ., length, ], ;, }, }, polynomials, =, newPols, ;, if, (, maxDegree, <=]
[;, }, }, polynomials, =, newPols, ;, if, (, maxDegree, <=, 4, ), {, errfac, =, null, ;, }, else]
[], ;, }, }, polynomials, =, newPols, ;, if, (, maxDegree, <=, 4, ), {, errfac, =, null, ;, }]
[., length, ], ;, }, }, polynomials, =, newPols, ;, if, (, maxDegree, <=, 4, ), {, errfac, =, null]
[=, newPols, ;, if, (, maxDegree, <=, 4, ), {, errfac, =, null, ;, }, else, {, errfac, =, new]
[;, if, (, maxDegree, <=, 4, ), {, errfac, =, null, ;, }, else, {, errfac, =, new, double, []
[), {, errfac, =, null, ;, }, else, {, errfac, =, new, double, [, maxDegree, -, 4, ], ;, for]
[<=, 4, ), {, errfac, =, null, ;, }, else, {, errfac, =, new, double, [, maxDegree, -, 4, ]]
[), {, errfac, =, null, ;, }, else, {, errfac, =, new, double, [, maxDegree, -, 4, ], ;, for]
[=, null, ;, }, else, {, errfac, =, new, double, [, maxDegree, -, 4, ], ;, for, (, int, i]
[;, }, else, {, errfac, =, new, double, [, maxDegree, -, 4, ], ;, for, (, int, i, =, 0]
[=, new, double, [, maxDegree, -, 4, ], ;, for, (, int, i, =, 0, ;, i, <, errfac, .]
[;, for, (, int, i, =, 0, ;, i, <, errfac, ., length, ;, ++, i, ), {, final, int]
[], ;, for, (, int, i, =, 0, ;, i, <, errfac, ., length, ;, ++, i, ), {, final]
[-, 4, ], ;, for, (, int, i, =, 0, ;, i, <, errfac, ., length, ;, ++, i, )]
[], ;, for, (, int, i, =, 0, ;, i, <, errfac, ., length, ;, ++, i, ), {, final]
[;, i, <, errfac, ., length, ;, ++, i, ), {, final, int, ip5, =, i, +, 5, ;, errfac]
[;, ++, i, ), {, final, int, ip5, =, i, +, 5, ;, errfac, [, i, ], =, 1.0, /]
[<, errfac, ., length, ;, ++, i, ), {, final, int, ip5, =, i, +, 5, ;, errfac, [, i]
[;, ++, i, ), {, final, int, ip5, =, i, +, 5, ;, errfac, [, i, ], =, 1.0, /]
[., length, ;, ++, i, ), {, final, int, ip5, =, i, +, 5, ;, errfac, [, i, ], =]
[), {, final, int, ip5, =, i, +, 5, ;, errfac, [, i, ], =, 1.0, /, (, ip5, *]
[), {, final, int, ip5, =, i, +, 5, ;, errfac, [, i, ], =, 1.0, /, (, ip5, *]
[;, errfac, [, i, ], =, 1.0, /, (, ip5, *, ip5, ), ;, final, double, e, =, 0.5, *]
[+, 5, ;, errfac, [, i, ], =, 1.0, /, (, ip5, *, ip5, ), ;, final, double, e, =]
[;, errfac, [, i, ], =, 1.0, /, (, ip5, *, ip5, ), ;, final, double, e, =, 0.5, *]
[=, 1.0, /, (, ip5, *, ip5, ), ;, final, double, e, =, 0.5, *, FastMath, ., sqrt, (, (]
[[, i, ], =, 1.0, /, (, ip5, *, ip5, ), ;, final, double, e, =, 0.5, *, FastMath, .]
[], =, 1.0, /, (, ip5, *, ip5, ), ;, final, double, e, =, 0.5, *, FastMath, ., sqrt, (]
[;, final, double, e, =, 0.5, *, FastMath, ., sqrt, (, (, (, double, ), (, i, +, 1, )]
[/, (, ip5, *, ip5, ), ;, final, double, e, =, 0.5, *, FastMath, ., sqrt, (, (, (, double]
[;, final, double, e, =, 0.5, *, FastMath, ., sqrt, (, (, (, double, ), (, i, +, 1, )]
[), ;, final, double, e, =, 0.5, *, FastMath, ., sqrt, (, (, (, double, ), (, i, +, 1]
[*, ip5, ), ;, final, double, e, =, 0.5, *, FastMath, ., sqrt, (, (, (, double, ), (, i]
[), ;, final, double, e, =, 0.5, *, FastMath, ., sqrt, (, (, (, double, ), (, i, +, 1]
[;, for, (, int, j, =, 0, ;, j, <=, i, ;, ++, j, ), {, errfac, [, i, ]]
[*, FastMath, ., sqrt, (, (, (, double, ), (, i, +, 1, ), ), /, ip5, ), ;, for]
[;, for, (, int, j, =, 0, ;, j, <=, i, ;, ++, j, ), {, errfac, [, i, ]]
[., sqrt, (, (, (, double, ), (, i, +, 1, ), ), /, ip5, ), ;, for, (, int]
[), ;, for, (, int, j, =, 0, ;, j, <=, i, ;, ++, j, ), {, errfac, [, i]
[/, ip5, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;, ++, j, ), {, errfac]
[), /, ip5, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;, ++, j, ), {]
[), /, ip5, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;, ++, j, ), {]
[), ), /, ip5, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;, ++, j, )]
[+, 1, ), ), /, ip5, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;, ++]
[), ), /, ip5, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;, ++, j, )]
[), ;, for, (, int, j, =, 0, ;, j, <=, i, ;, ++, j, ), {, errfac, [, i]
[;, j, <=, i, ;, ++, j, ), {, errfac, [, i, ], *=, e, /, (, j, +, 1]
[;, ++, j, ), {, errfac, [, i, ], *=, e, /, (, j, +, 1, ), ;, }, }]
[<=, i, ;, ++, j, ), {, errfac, [, i, ], *=, e, /, (, j, +, 1, ), ;]
[;, ++, j, ), {, errfac, [, i, ], *=, e, /, (, j, +, 1, ), ;, }, }]
[), {, errfac, [, i, ], *=, e, /, (, j, +, 1, ), ;, }, }, }, currentDegree, =]
[), {, errfac, [, i, ], *=, e, /, (, j, +, 1, ), ;, }, }, }, currentDegree, =]
[*=, e, /, (, j, +, 1, ), ;, }, }, }, currentDegree, =, 0, ;, }, }, @, Override]
[[, i, ], *=, e, /, (, j, +, 1, ), ;, }, }, }, currentDegree, =, 0, ;, }]
[], *=, e, /, (, j, +, 1, ), ;, }, }, }, currentDegree, =, 0, ;, }, }, @]
[;, }, }, }, currentDegree, =, 0, ;, }, }, @, Override, protected, StepInterpolator, doCopy, (, ), {, return, new]
[/, (, j, +, 1, ), ;, }, }, }, currentDegree, =, 0, ;, }, }, @, Override, protected, StepInterpolator]
[;, }, }, }, currentDegree, =, 0, ;, }, }, @, Override, protected, StepInterpolator, doCopy, (, ), {, return, new]
[), ;, }, }, }, currentDegree, =, 0, ;, }, }, @, Override, protected, StepInterpolator, doCopy, (, ), {, return]
[+, 1, ), ;, }, }, }, currentDegree, =, 0, ;, }, }, @, Override, protected, StepInterpolator, doCopy, (, )]
[), ;, }, }, }, currentDegree, =, 0, ;, }, }, @, Override, protected, StepInterpolator, doCopy, (, ), {, return]
[=, 0, ;, }, }, @, Override, protected, StepInterpolator, doCopy, (, ), {, return, new, GraggBulirschStoerStepInterpolator, (, this, ), ;]
[;, }, }, @, Override, protected, StepInterpolator, doCopy, (, ), {, return, new, GraggBulirschStoerStepInterpolator, (, this, ), ;, }, public]
[;, }, public, void, computeCoefficients, (, final, int, mu, ,, final, double, h, ), {, if, (, (, polynomials, ==]
[), ;, }, public, void, computeCoefficients, (, final, int, mu, ,, final, double, h, ), {, if, (, (, polynomials]
[), {, resetTables, (, mu, +, 4, ), ;, }, currentDegree, =, mu, +, 4, ;, for, (, int, i]
[||, (, polynomials, ., length, <=, (, mu, +, 4, ), ), ), {, resetTables, (, mu, +, 4, )]
[), ||, (, polynomials, ., length, <=, (, mu, +, 4, ), ), ), {, resetTables, (, mu, +, 4]
[==, null, ), ||, (, polynomials, ., length, <=, (, mu, +, 4, ), ), ), {, resetTables, (, mu]
[), ||, (, polynomials, ., length, <=, (, mu, +, 4, ), ), ), {, resetTables, (, mu, +, 4]
[), {, resetTables, (, mu, +, 4, ), ;, }, currentDegree, =, mu, +, 4, ;, for, (, int, i]
[), ), {, resetTables, (, mu, +, 4, ), ;, }, currentDegree, =, mu, +, 4, ;, for, (, int]
[<=, (, mu, +, 4, ), ), ), {, resetTables, (, mu, +, 4, ), ;, }, currentDegree, =, mu]
[., length, <=, (, mu, +, 4, ), ), ), {, resetTables, (, mu, +, 4, ), ;, }, currentDegree]
[), ), {, resetTables, (, mu, +, 4, ), ;, }, currentDegree, =, mu, +, 4, ;, for, (, int]
[), ), ), {, resetTables, (, mu, +, 4, ), ;, }, currentDegree, =, mu, +, 4, ;, for, (]
[+, 4, ), ), ), {, resetTables, (, mu, +, 4, ), ;, }, currentDegree, =, mu, +, 4, ;]
[), ), ), {, resetTables, (, mu, +, 4, ), ;, }, currentDegree, =, mu, +, 4, ;, for, (]
[;, }, currentDegree, =, mu, +, 4, ;, for, (, int, i, =, 0, ;, i, <, currentState, ., length]
[), ;, }, currentDegree, =, mu, +, 4, ;, for, (, int, i, =, 0, ;, i, <, currentState, .]
[+, 4, ), ;, }, currentDegree, =, mu, +, 4, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, }, currentDegree, =, mu, +, 4, ;, for, (, int, i, =, 0, ;, i, <, currentState, .]
[=, mu, +, 4, ;, for, (, int, i, =, 0, ;, i, <, currentState, ., length, ;, ++, i]
[;, for, (, int, i, =, 0, ;, i, <, currentState, ., length, ;, ++, i, ), {, final, double]
[+, 4, ;, for, (, int, i, =, 0, ;, i, <, currentState, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, currentState, ., length, ;, ++, i, ), {, final, double]
[;, i, <, currentState, ., length, ;, ++, i, ), {, final, double, yp0, =, h, *, y0Dot, [, i]
[;, ++, i, ), {, final, double, yp0, =, h, *, y0Dot, [, i, ], ;, final, double, yp1, =]
[<, currentState, ., length, ;, ++, i, ), {, final, double, yp0, =, h, *, y0Dot, [, i, ], ;]
[;, ++, i, ), {, final, double, yp0, =, h, *, y0Dot, [, i, ], ;, final, double, yp1, =]
[., length, ;, ++, i, ), {, final, double, yp0, =, h, *, y0Dot, [, i, ], ;, final, double]
[), {, final, double, yp0, =, h, *, y0Dot, [, i, ], ;, final, double, yp1, =, h, *, y1Dot]
[), {, final, double, yp0, =, h, *, y0Dot, [, i, ], ;, final, double, yp1, =, h, *, y1Dot]
[;, final, double, yp1, =, h, *, y1Dot, [, i, ], ;, final, double, ydiff, =, y1, [, i, ]]
[*, y0Dot, [, i, ], ;, final, double, yp1, =, h, *, y1Dot, [, i, ], ;, final, double, ydiff]
[;, final, double, yp1, =, h, *, y1Dot, [, i, ], ;, final, double, ydiff, =, y1, [, i, ]]
[[, i, ], ;, final, double, yp1, =, h, *, y1Dot, [, i, ], ;, final, double, ydiff, =, y1]
[], ;, final, double, yp1, =, h, *, y1Dot, [, i, ], ;, final, double, ydiff, =, y1, [, i]
[;, final, double, ydiff, =, y1, [, i, ], -, currentState, [, i, ], ;, final, double, aspl, =, ydiff]
[*, y1Dot, [, i, ], ;, final, double, ydiff, =, y1, [, i, ], -, currentState, [, i, ], ;]
[;, final, double, ydiff, =, y1, [, i, ], -, currentState, [, i, ], ;, final, double, aspl, =, ydiff]
[[, i, ], ;, final, double, ydiff, =, y1, [, i, ], -, currentState, [, i, ], ;, final, double]
[], ;, final, double, ydiff, =, y1, [, i, ], -, currentState, [, i, ], ;, final, double, aspl, =]
[;, final, double, aspl, =, ydiff, -, yp1, ;, final, double, bspl, =, yp0, -, ydiff, ;, polynomials, [, 0]
[-, currentState, [, i, ], ;, final, double, aspl, =, ydiff, -, yp1, ;, final, double, bspl, =, yp0, -]
[[, i, ], -, currentState, [, i, ], ;, final, double, aspl, =, ydiff, -, yp1, ;, final, double, bspl]
[], -, currentState, [, i, ], ;, final, double, aspl, =, ydiff, -, yp1, ;, final, double, bspl, =, yp0]
[;, final, double, aspl, =, ydiff, -, yp1, ;, final, double, bspl, =, yp0, -, ydiff, ;, polynomials, [, 0]
[[, i, ], ;, final, double, aspl, =, ydiff, -, yp1, ;, final, double, bspl, =, yp0, -, ydiff, ;]
[], ;, final, double, aspl, =, ydiff, -, yp1, ;, final, double, bspl, =, yp0, -, ydiff, ;, polynomials, []
[;, final, double, bspl, =, yp0, -, ydiff, ;, polynomials, [, 0, ], [, i, ], =, currentState, [, i]
[-, yp1, ;, final, double, bspl, =, yp0, -, ydiff, ;, polynomials, [, 0, ], [, i, ], =, currentState]
[;, final, double, bspl, =, yp0, -, ydiff, ;, polynomials, [, 0, ], [, i, ], =, currentState, [, i]
[;, polynomials, [, 0, ], [, i, ], =, currentState, [, i, ], ;, polynomials, [, 1, ], [, i]
[-, ydiff, ;, polynomials, [, 0, ], [, i, ], =, currentState, [, i, ], ;, polynomials, [, 1, ]]
[;, polynomials, [, 0, ], [, i, ], =, currentState, [, i, ], ;, polynomials, [, 1, ], [, i]
[=, currentState, [, i, ], ;, polynomials, [, 1, ], [, i, ], =, ydiff, ;, polynomials, [, 2, ]]
[[, i, ], =, currentState, [, i, ], ;, polynomials, [, 1, ], [, i, ], =, ydiff, ;, polynomials]
[[, 0, ], [, i, ], =, currentState, [, i, ], ;, polynomials, [, 1, ], [, i, ], =]
[], [, i, ], =, currentState, [, i, ], ;, polynomials, [, 1, ], [, i, ], =, ydiff, ;]
[], =, currentState, [, i, ], ;, polynomials, [, 1, ], [, i, ], =, ydiff, ;, polynomials, [, 2]
[;, polynomials, [, 1, ], [, i, ], =, ydiff, ;, polynomials, [, 2, ], [, i, ], =, aspl]
[[, i, ], ;, polynomials, [, 1, ], [, i, ], =, ydiff, ;, polynomials, [, 2, ], [, i]
[], ;, polynomials, [, 1, ], [, i, ], =, ydiff, ;, polynomials, [, 2, ], [, i, ], =]
[=, ydiff, ;, polynomials, [, 2, ], [, i, ], =, aspl, ;, polynomials, [, 3, ], [, i, ]]
[[, i, ], =, ydiff, ;, polynomials, [, 2, ], [, i, ], =, aspl, ;, polynomials, [, 3, ]]
[[, 1, ], [, i, ], =, ydiff, ;, polynomials, [, 2, ], [, i, ], =, aspl, ;, polynomials]
[], [, i, ], =, ydiff, ;, polynomials, [, 2, ], [, i, ], =, aspl, ;, polynomials, [, 3]
[], =, ydiff, ;, polynomials, [, 2, ], [, i, ], =, aspl, ;, polynomials, [, 3, ], [, i]
[;, polynomials, [, 2, ], [, i, ], =, aspl, ;, polynomials, [, 3, ], [, i, ], =, bspl]
[=, aspl, ;, polynomials, [, 3, ], [, i, ], =, bspl, ;, if, (, mu, <, 0, ), {]
[[, i, ], =, aspl, ;, polynomials, [, 3, ], [, i, ], =, bspl, ;, if, (, mu, <]
[[, 2, ], [, i, ], =, aspl, ;, polynomials, [, 3, ], [, i, ], =, bspl, ;, if]
[], [, i, ], =, aspl, ;, polynomials, [, 3, ], [, i, ], =, bspl, ;, if, (, mu]
[], =, aspl, ;, polynomials, [, 3, ], [, i, ], =, bspl, ;, if, (, mu, <, 0, )]
[;, polynomials, [, 3, ], [, i, ], =, bspl, ;, if, (, mu, <, 0, ), {, return, ;]
[=, bspl, ;, if, (, mu, <, 0, ), {, return, ;, }, final, double, ph0, =, 0.5, *, (]
[[, i, ], =, bspl, ;, if, (, mu, <, 0, ), {, return, ;, }, final, double, ph0, =]
[[, 3, ], [, i, ], =, bspl, ;, if, (, mu, <, 0, ), {, return, ;, }, final]
[], [, i, ], =, bspl, ;, if, (, mu, <, 0, ), {, return, ;, }, final, double, ph0]
[], =, bspl, ;, if, (, mu, <, 0, ), {, return, ;, }, final, double, ph0, =, 0.5, *]
[;, if, (, mu, <, 0, ), {, return, ;, }, final, double, ph0, =, 0.5, *, (, currentState, []
[), {, return, ;, }, final, double, ph0, =, 0.5, *, (, currentState, [, i, ], +, y1, [, i]
[<, 0, ), {, return, ;, }, final, double, ph0, =, 0.5, *, (, currentState, [, i, ], +, y1]
[), {, return, ;, }, final, double, ph0, =, 0.5, *, (, currentState, [, i, ], +, y1, [, i]
[;, polynomials, [, 4, ], [, i, ], =, 16, *, (, yMidDots, [, 0, ], [, i, ], -]
[+, 0.125, *, (, aspl, +, bspl, ), ;, polynomials, [, 4, ], [, i, ], =, 16, *, (]
[*, (, currentState, [, i, ], +, y1, [, i, ], ), +, 0.125, *, (, aspl, +, bspl, )]
[+, 0.125, *, (, aspl, +, bspl, ), ;, polynomials, [, 4, ], [, i, ], =, 16, *, (]
[), +, 0.125, *, (, aspl, +, bspl, ), ;, polynomials, [, 4, ], [, i, ], =, 16, *]
[+, y1, [, i, ], ), +, 0.125, *, (, aspl, +, bspl, ), ;, polynomials, [, 4, ], []
[[, i, ], +, y1, [, i, ], ), +, 0.125, *, (, aspl, +, bspl, ), ;, polynomials, []
[], +, y1, [, i, ], ), +, 0.125, *, (, aspl, +, bspl, ), ;, polynomials, [, 4, ]]
[), +, 0.125, *, (, aspl, +, bspl, ), ;, polynomials, [, 4, ], [, i, ], =, 16, *]
[[, i, ], ), +, 0.125, *, (, aspl, +, bspl, ), ;, polynomials, [, 4, ], [, i, ]]
[], ), +, 0.125, *, (, aspl, +, bspl, ), ;, polynomials, [, 4, ], [, i, ], =, 16]
[;, polynomials, [, 4, ], [, i, ], =, 16, *, (, yMidDots, [, 0, ], [, i, ], -]
[*, (, aspl, +, bspl, ), ;, polynomials, [, 4, ], [, i, ], =, 16, *, (, yMidDots, []
[;, polynomials, [, 4, ], [, i, ], =, 16, *, (, yMidDots, [, 0, ], [, i, ], -]
[), ;, polynomials, [, 4, ], [, i, ], =, 16, *, (, yMidDots, [, 0, ], [, i, ]]
[+, bspl, ), ;, polynomials, [, 4, ], [, i, ], =, 16, *, (, yMidDots, [, 0, ], []
[), ;, polynomials, [, 4, ], [, i, ], =, 16, *, (, yMidDots, [, 0, ], [, i, ]]
[=, 16, *, (, yMidDots, [, 0, ], [, i, ], -, ph0, ), ;, if, (, mu, >, 0]
[[, i, ], =, 16, *, (, yMidDots, [, 0, ], [, i, ], -, ph0, ), ;, if, (]
[[, 4, ], [, i, ], =, 16, *, (, yMidDots, [, 0, ], [, i, ], -, ph0, )]
[], [, i, ], =, 16, *, (, yMidDots, [, 0, ], [, i, ], -, ph0, ), ;, if]
[], =, 16, *, (, yMidDots, [, 0, ], [, i, ], -, ph0, ), ;, if, (, mu, >]
[;, if, (, mu, >, 0, ), {, final, double, ph1, =, ydiff, +, 0.25, *, (, aspl, -, bspl]
[*, (, yMidDots, [, 0, ], [, i, ], -, ph0, ), ;, if, (, mu, >, 0, ), {]
[;, if, (, mu, >, 0, ), {, final, double, ph1, =, ydiff, +, 0.25, *, (, aspl, -, bspl]
[), ;, if, (, mu, >, 0, ), {, final, double, ph1, =, ydiff, +, 0.25, *, (, aspl, -]
[-, ph0, ), ;, if, (, mu, >, 0, ), {, final, double, ph1, =, ydiff, +, 0.25, *, (]
[[, i, ], -, ph0, ), ;, if, (, mu, >, 0, ), {, final, double, ph1, =, ydiff, +]
[[, 0, ], [, i, ], -, ph0, ), ;, if, (, mu, >, 0, ), {, final, double, ph1]
[], [, i, ], -, ph0, ), ;, if, (, mu, >, 0, ), {, final, double, ph1, =, ydiff]
[], -, ph0, ), ;, if, (, mu, >, 0, ), {, final, double, ph1, =, ydiff, +, 0.25, *]
[), ;, if, (, mu, >, 0, ), {, final, double, ph1, =, ydiff, +, 0.25, *, (, aspl, -]
[), {, final, double, ph1, =, ydiff, +, 0.25, *, (, aspl, -, bspl, ), ;, polynomials, [, 5, ]]
[>, 0, ), {, final, double, ph1, =, ydiff, +, 0.25, *, (, aspl, -, bspl, ), ;, polynomials, []
[), {, final, double, ph1, =, ydiff, +, 0.25, *, (, aspl, -, bspl, ), ;, polynomials, [, 5, ]]
[;, polynomials, [, 5, ], [, i, ], =, 16, *, (, yMidDots, [, 1, ], [, i, ], -]
[+, 0.25, *, (, aspl, -, bspl, ), ;, polynomials, [, 5, ], [, i, ], =, 16, *, (]
[;, polynomials, [, 5, ], [, i, ], =, 16, *, (, yMidDots, [, 1, ], [, i, ], -]
[*, (, aspl, -, bspl, ), ;, polynomials, [, 5, ], [, i, ], =, 16, *, (, yMidDots, []
[;, polynomials, [, 5, ], [, i, ], =, 16, *, (, yMidDots, [, 1, ], [, i, ], -]
[), ;, polynomials, [, 5, ], [, i, ], =, 16, *, (, yMidDots, [, 1, ], [, i, ]]
[-, bspl, ), ;, polynomials, [, 5, ], [, i, ], =, 16, *, (, yMidDots, [, 1, ], []
[), ;, polynomials, [, 5, ], [, i, ], =, 16, *, (, yMidDots, [, 1, ], [, i, ]]
[=, 16, *, (, yMidDots, [, 1, ], [, i, ], -, ph1, ), ;, if, (, mu, >, 1]
[[, i, ], =, 16, *, (, yMidDots, [, 1, ], [, i, ], -, ph1, ), ;, if, (]
[[, 5, ], [, i, ], =, 16, *, (, yMidDots, [, 1, ], [, i, ], -, ph1, )]
[], [, i, ], =, 16, *, (, yMidDots, [, 1, ], [, i, ], -, ph1, ), ;, if]
[], =, 16, *, (, yMidDots, [, 1, ], [, i, ], -, ph1, ), ;, if, (, mu, >]
[;, if, (, mu, >, 1, ), {, final, double, ph2, =, yp1, -, yp0, ;, polynomials, [, 6, ]]
[*, (, yMidDots, [, 1, ], [, i, ], -, ph1, ), ;, if, (, mu, >, 1, ), {]
[;, if, (, mu, >, 1, ), {, final, double, ph2, =, yp1, -, yp0, ;, polynomials, [, 6, ]]
[), ;, if, (, mu, >, 1, ), {, final, double, ph2, =, yp1, -, yp0, ;, polynomials, [, 6]
[-, ph1, ), ;, if, (, mu, >, 1, ), {, final, double, ph2, =, yp1, -, yp0, ;, polynomials]
[[, i, ], -, ph1, ), ;, if, (, mu, >, 1, ), {, final, double, ph2, =, yp1, -]
[[, 1, ], [, i, ], -, ph1, ), ;, if, (, mu, >, 1, ), {, final, double, ph2]
[], [, i, ], -, ph1, ), ;, if, (, mu, >, 1, ), {, final, double, ph2, =, yp1]
[], -, ph1, ), ;, if, (, mu, >, 1, ), {, final, double, ph2, =, yp1, -, yp0, ;]
[), ;, if, (, mu, >, 1, ), {, final, double, ph2, =, yp1, -, yp0, ;, polynomials, [, 6]
[), {, final, double, ph2, =, yp1, -, yp0, ;, polynomials, [, 6, ], [, i, ], =, 16, *]
[>, 1, ), {, final, double, ph2, =, yp1, -, yp0, ;, polynomials, [, 6, ], [, i, ], =]
[), {, final, double, ph2, =, yp1, -, yp0, ;, polynomials, [, 6, ], [, i, ], =, 16, *]
[;, polynomials, [, 6, ], [, i, ], =, 16, *, (, yMidDots, [, 2, ], [, i, ], -]
[-, yp0, ;, polynomials, [, 6, ], [, i, ], =, 16, *, (, yMidDots, [, 2, ], [, i]
[;, polynomials, [, 6, ], [, i, ], =, 16, *, (, yMidDots, [, 2, ], [, i, ], -]
[=, 16, *, (, yMidDots, [, 2, ], [, i, ], -, ph2, +, polynomials, [, 4, ], [, i]
[[, i, ], =, 16, *, (, yMidDots, [, 2, ], [, i, ], -, ph2, +, polynomials, [, 4]
[[, 6, ], [, i, ], =, 16, *, (, yMidDots, [, 2, ], [, i, ], -, ph2, +]
[], [, i, ], =, 16, *, (, yMidDots, [, 2, ], [, i, ], -, ph2, +, polynomials, []
[], =, 16, *, (, yMidDots, [, 2, ], [, i, ], -, ph2, +, polynomials, [, 4, ], []
[;, if, (, mu, >, 2, ), {, final, double, ph3, =, 6, *, (, bspl, -, aspl, ), ;]
[*, (, yMidDots, [, 2, ], [, i, ], -, ph2, +, polynomials, [, 4, ], [, i, ], )]
[;, if, (, mu, >, 2, ), {, final, double, ph3, =, 6, *, (, bspl, -, aspl, ), ;]
[), ;, if, (, mu, >, 2, ), {, final, double, ph3, =, 6, *, (, bspl, -, aspl, )]
[+, polynomials, [, 4, ], [, i, ], ), ;, if, (, mu, >, 2, ), {, final, double, ph3]
[-, ph2, +, polynomials, [, 4, ], [, i, ], ), ;, if, (, mu, >, 2, ), {, final]
[[, i, ], -, ph2, +, polynomials, [, 4, ], [, i, ], ), ;, if, (, mu, >, 2]
[[, 2, ], [, i, ], -, ph2, +, polynomials, [, 4, ], [, i, ], ), ;, if, (]
[], [, i, ], -, ph2, +, polynomials, [, 4, ], [, i, ], ), ;, if, (, mu, >]
[], -, ph2, +, polynomials, [, 4, ], [, i, ], ), ;, if, (, mu, >, 2, ), {]
[+, polynomials, [, 4, ], [, i, ], ), ;, if, (, mu, >, 2, ), {, final, double, ph3]
[), ;, if, (, mu, >, 2, ), {, final, double, ph3, =, 6, *, (, bspl, -, aspl, )]
[[, i, ], ), ;, if, (, mu, >, 2, ), {, final, double, ph3, =, 6, *, (, bspl]
[[, 4, ], [, i, ], ), ;, if, (, mu, >, 2, ), {, final, double, ph3, =, 6]
[], [, i, ], ), ;, if, (, mu, >, 2, ), {, final, double, ph3, =, 6, *, (]
[], ), ;, if, (, mu, >, 2, ), {, final, double, ph3, =, 6, *, (, bspl, -, aspl]
[), {, final, double, ph3, =, 6, *, (, bspl, -, aspl, ), ;, polynomials, [, 7, ], [, i]
[>, 2, ), {, final, double, ph3, =, 6, *, (, bspl, -, aspl, ), ;, polynomials, [, 7, ]]
[), {, final, double, ph3, =, 6, *, (, bspl, -, aspl, ), ;, polynomials, [, 7, ], [, i]
[;, polynomials, [, 7, ], [, i, ], =, 16, *, (, yMidDots, [, 3, ], [, i, ], -]
[*, (, bspl, -, aspl, ), ;, polynomials, [, 7, ], [, i, ], =, 16, *, (, yMidDots, []
[;, polynomials, [, 7, ], [, i, ], =, 16, *, (, yMidDots, [, 3, ], [, i, ], -]
[), ;, polynomials, [, 7, ], [, i, ], =, 16, *, (, yMidDots, [, 3, ], [, i, ]]
[-, aspl, ), ;, polynomials, [, 7, ], [, i, ], =, 16, *, (, yMidDots, [, 3, ], []
[), ;, polynomials, [, 7, ], [, i, ], =, 16, *, (, yMidDots, [, 3, ], [, i, ]]
[=, 16, *, (, yMidDots, [, 3, ], [, i, ], -, ph3, +, 3, *, polynomials, [, 5, ]]
[[, i, ], =, 16, *, (, yMidDots, [, 3, ], [, i, ], -, ph3, +, 3, *, polynomials]
[[, 7, ], [, i, ], =, 16, *, (, yMidDots, [, 3, ], [, i, ], -, ph3, +]
[], [, i, ], =, 16, *, (, yMidDots, [, 3, ], [, i, ], -, ph3, +, 3, *]
[], =, 16, *, (, yMidDots, [, 3, ], [, i, ], -, ph3, +, 3, *, polynomials, [, 5]
[;, for, (, int, j, =, 4, ;, j, <=, mu, ;, ++, j, ), {, final, double, fac1, =]
[*, (, yMidDots, [, 3, ], [, i, ], -, ph3, +, 3, *, polynomials, [, 5, ], [, i]
[;, for, (, int, j, =, 4, ;, j, <=, mu, ;, ++, j, ), {, final, double, fac1, =]
[), ;, for, (, int, j, =, 4, ;, j, <=, mu, ;, ++, j, ), {, final, double, fac1]
[+, 3, *, polynomials, [, 5, ], [, i, ], ), ;, for, (, int, j, =, 4, ;, j]
[-, ph3, +, 3, *, polynomials, [, 5, ], [, i, ], ), ;, for, (, int, j, =, 4]
[[, i, ], -, ph3, +, 3, *, polynomials, [, 5, ], [, i, ], ), ;, for, (, int]
[[, 3, ], [, i, ], -, ph3, +, 3, *, polynomials, [, 5, ], [, i, ], ), ;]
[], [, i, ], -, ph3, +, 3, *, polynomials, [, 5, ], [, i, ], ), ;, for, (]
[], -, ph3, +, 3, *, polynomials, [, 5, ], [, i, ], ), ;, for, (, int, j, =]
[+, 3, *, polynomials, [, 5, ], [, i, ], ), ;, for, (, int, j, =, 4, ;, j]
[), ;, for, (, int, j, =, 4, ;, j, <=, mu, ;, ++, j, ), {, final, double, fac1]
[*, polynomials, [, 5, ], [, i, ], ), ;, for, (, int, j, =, 4, ;, j, <=, mu]
[), ;, for, (, int, j, =, 4, ;, j, <=, mu, ;, ++, j, ), {, final, double, fac1]
[[, i, ], ), ;, for, (, int, j, =, 4, ;, j, <=, mu, ;, ++, j, ), {]
[[, 5, ], [, i, ], ), ;, for, (, int, j, =, 4, ;, j, <=, mu, ;, ++]
[], [, i, ], ), ;, for, (, int, j, =, 4, ;, j, <=, mu, ;, ++, j, )]
[], ), ;, for, (, int, j, =, 4, ;, j, <=, mu, ;, ++, j, ), {, final, double]
[;, j, <=, mu, ;, ++, j, ), {, final, double, fac1, =, 0.5, *, j, *, (, j, -]
[;, ++, j, ), {, final, double, fac1, =, 0.5, *, j, *, (, j, -, 1, ), ;, final]
[<=, mu, ;, ++, j, ), {, final, double, fac1, =, 0.5, *, j, *, (, j, -, 1, )]
[;, ++, j, ), {, final, double, fac1, =, 0.5, *, j, *, (, j, -, 1, ), ;, final]
[), {, final, double, fac1, =, 0.5, *, j, *, (, j, -, 1, ), ;, final, double, fac2, =]
[), {, final, double, fac1, =, 0.5, *, j, *, (, j, -, 1, ), ;, final, double, fac2, =]
[;, final, double, fac2, =, 2, *, fac1, *, (, j, -, 2, ), *, (, j, -, 3, )]
[*, (, j, -, 1, ), ;, final, double, fac2, =, 2, *, fac1, *, (, j, -, 2, )]
[*, j, *, (, j, -, 1, ), ;, final, double, fac2, =, 2, *, fac1, *, (, j, -]
[*, (, j, -, 1, ), ;, final, double, fac2, =, 2, *, fac1, *, (, j, -, 2, )]
[;, final, double, fac2, =, 2, *, fac1, *, (, j, -, 2, ), *, (, j, -, 3, )]
[), ;, final, double, fac2, =, 2, *, fac1, *, (, j, -, 2, ), *, (, j, -, 3]
[-, 1, ), ;, final, double, fac2, =, 2, *, fac1, *, (, j, -, 2, ), *, (, j]
[), ;, final, double, fac2, =, 2, *, fac1, *, (, j, -, 2, ), *, (, j, -, 3]
[;, polynomials, [, j, +, 4, ], [, i, ], =, 16, *, (, yMidDots, [, j, ], [, i]
[*, (, j, -, 3, ), ;, polynomials, [, j, +, 4, ], [, i, ], =, 16, *, (]
[*, (, j, -, 2, ), *, (, j, -, 3, ), ;, polynomials, [, j, +, 4, ], []
[*, fac1, *, (, j, -, 2, ), *, (, j, -, 3, ), ;, polynomials, [, j, +, 4]
[*, (, j, -, 2, ), *, (, j, -, 3, ), ;, polynomials, [, j, +, 4, ], []
[*, (, j, -, 3, ), ;, polynomials, [, j, +, 4, ], [, i, ], =, 16, *, (]
[), *, (, j, -, 3, ), ;, polynomials, [, j, +, 4, ], [, i, ], =, 16, *]
[-, 2, ), *, (, j, -, 3, ), ;, polynomials, [, j, +, 4, ], [, i, ], =]
[), *, (, j, -, 3, ), ;, polynomials, [, j, +, 4, ], [, i, ], =, 16, *]
[;, polynomials, [, j, +, 4, ], [, i, ], =, 16, *, (, yMidDots, [, j, ], [, i]
[), ;, polynomials, [, j, +, 4, ], [, i, ], =, 16, *, (, yMidDots, [, j, ], []
[-, 3, ), ;, polynomials, [, j, +, 4, ], [, i, ], =, 16, *, (, yMidDots, [, j]
[), ;, polynomials, [, j, +, 4, ], [, i, ], =, 16, *, (, yMidDots, [, j, ], []
[=, 16, *, (, yMidDots, [, j, ], [, i, ], +, fac1, *, polynomials, [, j, +, 2, ]]
[[, i, ], =, 16, *, (, yMidDots, [, j, ], [, i, ], +, fac1, *, polynomials, [, j]
[[, j, +, 4, ], [, i, ], =, 16, *, (, yMidDots, [, j, ], [, i, ], +]
[], [, i, ], =, 16, *, (, yMidDots, [, j, ], [, i, ], +, fac1, *, polynomials, []
[+, 4, ], [, i, ], =, 16, *, (, yMidDots, [, j, ], [, i, ], +, fac1, *]
[], [, i, ], =, 16, *, (, yMidDots, [, j, ], [, i, ], +, fac1, *, polynomials, []
[], =, 16, *, (, yMidDots, [, j, ], [, i, ], +, fac1, *, polynomials, [, j, +, 2]
[;, }, }, }, }, }, }, public, double, estimateError, (, final, double, [, ], scale, ), {, double, error]
[*, (, yMidDots, [, j, ], [, i, ], +, fac1, *, polynomials, [, j, +, 2, ], [, i]
[;, }, }, }, }, }, }, public, double, estimateError, (, final, double, [, ], scale, ), {, double, error]
[), ;, }, }, }, }, }, }, public, double, estimateError, (, final, double, [, ], scale, ), {, double]
[-, fac2, *, polynomials, [, j, ], [, i, ], ), ;, }, }, }, }, }, }, public, double]
[+, fac1, *, polynomials, [, j, +, 2, ], [, i, ], -, fac2, *, polynomials, [, j, ], []
[[, i, ], +, fac1, *, polynomials, [, j, +, 2, ], [, i, ], -, fac2, *, polynomials, []
[[, j, ], [, i, ], +, fac1, *, polynomials, [, j, +, 2, ], [, i, ], -, fac2]
[], [, i, ], +, fac1, *, polynomials, [, j, +, 2, ], [, i, ], -, fac2, *, polynomials]
[], +, fac1, *, polynomials, [, j, +, 2, ], [, i, ], -, fac2, *, polynomials, [, j, ]]
[-, fac2, *, polynomials, [, j, ], [, i, ], ), ;, }, }, }, }, }, }, public, double]
[*, polynomials, [, j, +, 2, ], [, i, ], -, fac2, *, polynomials, [, j, ], [, i, ]]
[-, fac2, *, polynomials, [, j, ], [, i, ], ), ;, }, }, }, }, }, }, public, double]
[[, i, ], -, fac2, *, polynomials, [, j, ], [, i, ], ), ;, }, }, }, }, }]
[[, j, +, 2, ], [, i, ], -, fac2, *, polynomials, [, j, ], [, i, ], ), ;]
[], [, i, ], -, fac2, *, polynomials, [, j, ], [, i, ], ), ;, }, }, }, }]
[+, 2, ], [, i, ], -, fac2, *, polynomials, [, j, ], [, i, ], ), ;, }, }]
[], [, i, ], -, fac2, *, polynomials, [, j, ], [, i, ], ), ;, }, }, }, }]
[], -, fac2, *, polynomials, [, j, ], [, i, ], ), ;, }, }, }, }, }, }, public]
[), ;, }, }, }, }, }, }, public, double, estimateError, (, final, double, [, ], scale, ), {, double]
[*, polynomials, [, j, ], [, i, ], ), ;, }, }, }, }, }, }, public, double, estimateError, (]
[), ;, }, }, }, }, }, }, public, double, estimateError, (, final, double, [, ], scale, ), {, double]
[[, i, ], ), ;, }, }, }, }, }, }, public, double, estimateError, (, final, double, [, ], scale]
[[, j, ], [, i, ], ), ;, }, }, }, }, }, }, public, double, estimateError, (, final, double]
[], [, i, ], ), ;, }, }, }, }, }, }, public, double, estimateError, (, final, double, [, ]]
[], ), ;, }, }, }, }, }, }, public, double, estimateError, (, final, double, [, ], scale, ), {]
[;, if, (, currentDegree, >=, 5, ), {, for, (, int, i, =, 0, ;, i, <, scale, ., length]
[), {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, final]
[>=, 5, ), {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, )]
[), {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, final]
[;, i, <, scale, ., length, ;, ++, i, ), {, final, double, e, =, polynomials, [, currentDegree, ], []
[;, ++, i, ), {, final, double, e, =, polynomials, [, currentDegree, ], [, i, ], /, scale, [, i]
[<, scale, ., length, ;, ++, i, ), {, final, double, e, =, polynomials, [, currentDegree, ], [, i, ]]
[;, ++, i, ), {, final, double, e, =, polynomials, [, currentDegree, ], [, i, ], /, scale, [, i]
[., length, ;, ++, i, ), {, final, double, e, =, polynomials, [, currentDegree, ], [, i, ], /, scale]
[), {, final, double, e, =, polynomials, [, currentDegree, ], [, i, ], /, scale, [, i, ], ;, error]
[), {, final, double, e, =, polynomials, [, currentDegree, ], [, i, ], /, scale, [, i, ], ;, error]
[;, error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error, /, scale, ., length, )]
[/, scale, [, i, ], ;, error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error]
[[, i, ], /, scale, [, i, ], ;, error, +=, e, *, e, ;, }, error, =, FastMath, .]
[[, currentDegree, ], [, i, ], /, scale, [, i, ], ;, error, +=, e, *, e, ;, }, error]
[], [, i, ], /, scale, [, i, ], ;, error, +=, e, *, e, ;, }, error, =, FastMath]
[], /, scale, [, i, ], ;, error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (]
[;, error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error, /, scale, ., length, )]
[[, i, ], ;, error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error, /, scale]
[], ;, error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error, /, scale, ., length]
[+=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error, /, scale, ., length, ), *, errfac]
[;, }, error, =, FastMath, ., sqrt, (, error, /, scale, ., length, ), *, errfac, [, currentDegree, -, 5]
[*, e, ;, }, error, =, FastMath, ., sqrt, (, error, /, scale, ., length, ), *, errfac, [, currentDegree]
[;, }, error, =, FastMath, ., sqrt, (, error, /, scale, ., length, ), *, errfac, [, currentDegree, -, 5]
[=, FastMath, ., sqrt, (, error, /, scale, ., length, ), *, errfac, [, currentDegree, -, 5, ], ;, }]
[;, }, return, error, ;, }, @, Override, protected, void, computeInterpolatedStateAndDerivatives, (, final, double, theta, ,, final, double, oneMinusThetaH, )]
[*, errfac, [, currentDegree, -, 5, ], ;, }, return, error, ;, }, @, Override, protected, void, computeInterpolatedStateAndDerivatives, (, final]
[., sqrt, (, error, /, scale, ., length, ), *, errfac, [, currentDegree, -, 5, ], ;, }, return, error]
[), *, errfac, [, currentDegree, -, 5, ], ;, }, return, error, ;, }, @, Override, protected, void, computeInterpolatedStateAndDerivatives, (]
[/, scale, ., length, ), *, errfac, [, currentDegree, -, 5, ], ;, }, return, error, ;, }, @, Override]
[), *, errfac, [, currentDegree, -, 5, ], ;, }, return, error, ;, }, @, Override, protected, void, computeInterpolatedStateAndDerivatives, (]
[., length, ), *, errfac, [, currentDegree, -, 5, ], ;, }, return, error, ;, }, @, Override, protected, void]
[;, }, return, error, ;, }, @, Override, protected, void, computeInterpolatedStateAndDerivatives, (, final, double, theta, ,, final, double, oneMinusThetaH, )]
[[, currentDegree, -, 5, ], ;, }, return, error, ;, }, @, Override, protected, void, computeInterpolatedStateAndDerivatives, (, final, double, theta]
[], ;, }, return, error, ;, }, @, Override, protected, void, computeInterpolatedStateAndDerivatives, (, final, double, theta, ,, final, double, oneMinusThetaH]
[-, 5, ], ;, }, return, error, ;, }, @, Override, protected, void, computeInterpolatedStateAndDerivatives, (, final, double, theta, ,, final]
[], ;, }, return, error, ;, }, @, Override, protected, void, computeInterpolatedStateAndDerivatives, (, final, double, theta, ,, final, double, oneMinusThetaH]
[;, }, @, Override, protected, void, computeInterpolatedStateAndDerivatives, (, final, double, theta, ,, final, double, oneMinusThetaH, ), {, final, int, dimension]
[;, final, double, oneMinusTheta, =, 1.0, -, theta, ;, final, double, theta05, =, theta, -, 0.5, ;, final, double, tOmT]
[., length, ;, final, double, oneMinusTheta, =, 1.0, -, theta, ;, final, double, theta05, =, theta, -, 0.5, ;, final]
[;, final, double, theta05, =, theta, -, 0.5, ;, final, double, tOmT, =, theta, *, oneMinusTheta, ;, final, double, t4]
[-, theta, ;, final, double, theta05, =, theta, -, 0.5, ;, final, double, tOmT, =, theta, *, oneMinusTheta, ;, final]
[;, final, double, theta05, =, theta, -, 0.5, ;, final, double, tOmT, =, theta, *, oneMinusTheta, ;, final, double, t4]
[;, final, double, tOmT, =, theta, *, oneMinusTheta, ;, final, double, t4, =, tOmT, *, tOmT, ;, final, double, t4Dot]
[-, 0.5, ;, final, double, tOmT, =, theta, *, oneMinusTheta, ;, final, double, t4, =, tOmT, *, tOmT, ;, final]
[;, final, double, tOmT, =, theta, *, oneMinusTheta, ;, final, double, t4, =, tOmT, *, tOmT, ;, final, double, t4Dot]
[;, final, double, t4, =, tOmT, *, tOmT, ;, final, double, t4Dot, =, 2, *, tOmT, *, (, 1, -]
[*, oneMinusTheta, ;, final, double, t4, =, tOmT, *, tOmT, ;, final, double, t4Dot, =, 2, *, tOmT, *, (]
[;, final, double, t4, =, tOmT, *, tOmT, ;, final, double, t4Dot, =, 2, *, tOmT, *, (, 1, -]
[;, final, double, t4Dot, =, 2, *, tOmT, *, (, 1, -, 2, *, theta, ), ;, final, double, dot1]
[*, tOmT, ;, final, double, t4Dot, =, 2, *, tOmT, *, (, 1, -, 2, *, theta, ), ;, final]
[;, final, double, t4Dot, =, 2, *, tOmT, *, (, 1, -, 2, *, theta, ), ;, final, double, dot1]
[;, final, double, dot1, =, 1.0, /, h, ;, final, double, dot2, =, theta, *, (, 2, -, 3, *]
[*, (, 1, -, 2, *, theta, ), ;, final, double, dot1, =, 1.0, /, h, ;, final, double, dot2]
[*, tOmT, *, (, 1, -, 2, *, theta, ), ;, final, double, dot1, =, 1.0, /, h, ;, final]
[*, (, 1, -, 2, *, theta, ), ;, final, double, dot1, =, 1.0, /, h, ;, final, double, dot2]
[;, final, double, dot1, =, 1.0, /, h, ;, final, double, dot2, =, theta, *, (, 2, -, 3, *]
[), ;, final, double, dot1, =, 1.0, /, h, ;, final, double, dot2, =, theta, *, (, 2, -, 3]
[-, 2, *, theta, ), ;, final, double, dot1, =, 1.0, /, h, ;, final, double, dot2, =, theta, *]
[), ;, final, double, dot1, =, 1.0, /, h, ;, final, double, dot2, =, theta, *, (, 2, -, 3]
[*, theta, ), ;, final, double, dot1, =, 1.0, /, h, ;, final, double, dot2, =, theta, *, (, 2]
[), ;, final, double, dot1, =, 1.0, /, h, ;, final, double, dot2, =, theta, *, (, 2, -, 3]
[;, final, double, dot2, =, theta, *, (, 2, -, 3, *, theta, ), /, h, ;, final, double, dot3]
[/, h, ;, final, double, dot2, =, theta, *, (, 2, -, 3, *, theta, ), /, h, ;, final]
[;, final, double, dot2, =, theta, *, (, 2, -, 3, *, theta, ), /, h, ;, final, double, dot3]
[;, final, double, dot3, =, (, (, 3, *, theta, -, 4, ), *, theta, +, 1, ), /, h]
[/, h, ;, final, double, dot3, =, (, (, 3, *, theta, -, 4, ), *, theta, +, 1, )]
[*, (, 2, -, 3, *, theta, ), /, h, ;, final, double, dot3, =, (, (, 3, *, theta]
[/, h, ;, final, double, dot3, =, (, (, 3, *, theta, -, 4, ), *, theta, +, 1, )]
[), /, h, ;, final, double, dot3, =, (, (, 3, *, theta, -, 4, ), *, theta, +, 1]
[-, 3, *, theta, ), /, h, ;, final, double, dot3, =, (, (, 3, *, theta, -, 4, )]
[), /, h, ;, final, double, dot3, =, (, (, 3, *, theta, -, 4, ), *, theta, +, 1]
[*, theta, ), /, h, ;, final, double, dot3, =, (, (, 3, *, theta, -, 4, ), *, theta]
[), /, h, ;, final, double, dot3, =, (, (, 3, *, theta, -, 4, ), *, theta, +, 1]
[;, final, double, dot3, =, (, (, 3, *, theta, -, 4, ), *, theta, +, 1, ), /, h]
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++, i, ), {, final, double, p0, =]
[/, h, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++, i, ), {, final, double]
[), /, h, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++, i, ), {, final]
[+, 1, ), /, h, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++, i, )]
[*, theta, +, 1, ), /, h, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++]
[), *, theta, +, 1, ), /, h, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[-, 4, ), *, theta, +, 1, ), /, h, ;, for, (, int, i, =, 0, ;, i, <]
[*, theta, -, 4, ), *, theta, +, 1, ), /, h, ;, for, (, int, i, =, 0, ;]
[-, 4, ), *, theta, +, 1, ), /, h, ;, for, (, int, i, =, 0, ;, i, <]
[), *, theta, +, 1, ), /, h, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[+, 1, ), /, h, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++, i, )]
[), /, h, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++, i, ), {, final]
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++, i, ), {, final, double, p0, =]
[;, i, <, dimension, ;, ++, i, ), {, final, double, p0, =, polynomials, [, 0, ], [, i, ]]
[;, ++, i, ), {, final, double, p0, =, polynomials, [, 0, ], [, i, ], ;, final, double, p1]
[<, dimension, ;, ++, i, ), {, final, double, p0, =, polynomials, [, 0, ], [, i, ], ;, final]
[;, ++, i, ), {, final, double, p0, =, polynomials, [, 0, ], [, i, ], ;, final, double, p1]
[), {, final, double, p0, =, polynomials, [, 0, ], [, i, ], ;, final, double, p1, =, polynomials, []
[), {, final, double, p0, =, polynomials, [, 0, ], [, i, ], ;, final, double, p1, =, polynomials, []
[;, final, double, p1, =, polynomials, [, 1, ], [, i, ], ;, final, double, p2, =, polynomials, [, 2]
[[, i, ], ;, final, double, p1, =, polynomials, [, 1, ], [, i, ], ;, final, double, p2, =]
[[, 0, ], [, i, ], ;, final, double, p1, =, polynomials, [, 1, ], [, i, ], ;, final]
[], [, i, ], ;, final, double, p1, =, polynomials, [, 1, ], [, i, ], ;, final, double, p2]
[], ;, final, double, p1, =, polynomials, [, 1, ], [, i, ], ;, final, double, p2, =, polynomials, []
[;, final, double, p2, =, polynomials, [, 2, ], [, i, ], ;, final, double, p3, =, polynomials, [, 3]
[[, i, ], ;, final, double, p2, =, polynomials, [, 2, ], [, i, ], ;, final, double, p3, =]
[[, 1, ], [, i, ], ;, final, double, p2, =, polynomials, [, 2, ], [, i, ], ;, final]
[], [, i, ], ;, final, double, p2, =, polynomials, [, 2, ], [, i, ], ;, final, double, p3]
[], ;, final, double, p2, =, polynomials, [, 2, ], [, i, ], ;, final, double, p3, =, polynomials, []
[;, final, double, p3, =, polynomials, [, 3, ], [, i, ], ;, interpolatedState, [, i, ], =, p0, +]
[[, i, ], ;, final, double, p3, =, polynomials, [, 3, ], [, i, ], ;, interpolatedState, [, i, ]]
[[, 2, ], [, i, ], ;, final, double, p3, =, polynomials, [, 3, ], [, i, ], ;, interpolatedState]
[], [, i, ], ;, final, double, p3, =, polynomials, [, 3, ], [, i, ], ;, interpolatedState, [, i]
[], ;, final, double, p3, =, polynomials, [, 3, ], [, i, ], ;, interpolatedState, [, i, ], =, p0]
[;, interpolatedState, [, i, ], =, p0, +, theta, *, (, p1, +, oneMinusTheta, *, (, p2, *, theta, +]
[[, i, ], ;, interpolatedState, [, i, ], =, p0, +, theta, *, (, p1, +, oneMinusTheta, *, (, p2]
[[, 3, ], [, i, ], ;, interpolatedState, [, i, ], =, p0, +, theta, *, (, p1, +, oneMinusTheta]
[], [, i, ], ;, interpolatedState, [, i, ], =, p0, +, theta, *, (, p1, +, oneMinusTheta, *, (]
[], ;, interpolatedState, [, i, ], =, p0, +, theta, *, (, p1, +, oneMinusTheta, *, (, p2, *, theta]
[=, p0, +, theta, *, (, p1, +, oneMinusTheta, *, (, p2, *, theta, +, p3, *, oneMinusTheta, ), )]
[[, i, ], =, p0, +, theta, *, (, p1, +, oneMinusTheta, *, (, p2, *, theta, +, p3, *]
[], =, p0, +, theta, *, (, p1, +, oneMinusTheta, *, (, p2, *, theta, +, p3, *, oneMinusTheta, )]
[;, interpolatedDerivatives, [, i, ], =, dot1, *, p1, +, dot2, *, p2, +, dot3, *, p3, ;, if, (]
[+, theta, *, (, p1, +, oneMinusTheta, *, (, p2, *, theta, +, p3, *, oneMinusTheta, ), ), ;, interpolatedDerivatives]
[;, interpolatedDerivatives, [, i, ], =, dot1, *, p1, +, dot2, *, p2, +, dot3, *, p3, ;, if, (]
[*, (, p1, +, oneMinusTheta, *, (, p2, *, theta, +, p3, *, oneMinusTheta, ), ), ;, interpolatedDerivatives, [, i]
[;, interpolatedDerivatives, [, i, ], =, dot1, *, p1, +, dot2, *, p2, +, dot3, *, p3, ;, if, (]
[), ;, interpolatedDerivatives, [, i, ], =, dot1, *, p1, +, dot2, *, p2, +, dot3, *, p3, ;, if]
[+, oneMinusTheta, *, (, p2, *, theta, +, p3, *, oneMinusTheta, ), ), ;, interpolatedDerivatives, [, i, ], =, dot1]
[), ;, interpolatedDerivatives, [, i, ], =, dot1, *, p1, +, dot2, *, p2, +, dot3, *, p3, ;, if]
[*, (, p2, *, theta, +, p3, *, oneMinusTheta, ), ), ;, interpolatedDerivatives, [, i, ], =, dot1, *, p1]
[), ;, interpolatedDerivatives, [, i, ], =, dot1, *, p1, +, dot2, *, p2, +, dot3, *, p3, ;, if]
[), ), ;, interpolatedDerivatives, [, i, ], =, dot1, *, p1, +, dot2, *, p2, +, dot3, *, p3, ;]
[+, p3, *, oneMinusTheta, ), ), ;, interpolatedDerivatives, [, i, ], =, dot1, *, p1, +, dot2, *, p2, +]
[*, theta, +, p3, *, oneMinusTheta, ), ), ;, interpolatedDerivatives, [, i, ], =, dot1, *, p1, +, dot2, *]
[+, p3, *, oneMinusTheta, ), ), ;, interpolatedDerivatives, [, i, ], =, dot1, *, p1, +, dot2, *, p2, +]
[), ), ;, interpolatedDerivatives, [, i, ], =, dot1, *, p1, +, dot2, *, p2, +, dot3, *, p3, ;]
[*, oneMinusTheta, ), ), ;, interpolatedDerivatives, [, i, ], =, dot1, *, p1, +, dot2, *, p2, +, dot3, *]
[), ), ;, interpolatedDerivatives, [, i, ], =, dot1, *, p1, +, dot2, *, p2, +, dot3, *, p3, ;]
[=, dot1, *, p1, +, dot2, *, p2, +, dot3, *, p3, ;, if, (, currentDegree, >, 3, ), {]
[[, i, ], =, dot1, *, p1, +, dot2, *, p2, +, dot3, *, p3, ;, if, (, currentDegree, >]
[], =, dot1, *, p1, +, dot2, *, p2, +, dot3, *, p3, ;, if, (, currentDegree, >, 3, )]
[;, if, (, currentDegree, >, 3, ), {, double, cDot, =, 0, ;, double, c, =, polynomials, [, currentDegree, ]]
[+, dot3, *, p3, ;, if, (, currentDegree, >, 3, ), {, double, cDot, =, 0, ;, double, c, =]
[+, dot2, *, p2, +, dot3, *, p3, ;, if, (, currentDegree, >, 3, ), {, double, cDot, =, 0]
[*, p1, +, dot2, *, p2, +, dot3, *, p3, ;, if, (, currentDegree, >, 3, ), {, double, cDot]
[+, dot2, *, p2, +, dot3, *, p3, ;, if, (, currentDegree, >, 3, ), {, double, cDot, =, 0]
[+, dot3, *, p3, ;, if, (, currentDegree, >, 3, ), {, double, cDot, =, 0, ;, double, c, =]
[*, p2, +, dot3, *, p3, ;, if, (, currentDegree, >, 3, ), {, double, cDot, =, 0, ;, double]
[+, dot3, *, p3, ;, if, (, currentDegree, >, 3, ), {, double, cDot, =, 0, ;, double, c, =]
[;, if, (, currentDegree, >, 3, ), {, double, cDot, =, 0, ;, double, c, =, polynomials, [, currentDegree, ]]
[*, p3, ;, if, (, currentDegree, >, 3, ), {, double, cDot, =, 0, ;, double, c, =, polynomials, []
[;, if, (, currentDegree, >, 3, ), {, double, cDot, =, 0, ;, double, c, =, polynomials, [, currentDegree, ]]
[), {, double, cDot, =, 0, ;, double, c, =, polynomials, [, currentDegree, ], [, i, ], ;, for, (]
[>, 3, ), {, double, cDot, =, 0, ;, double, c, =, polynomials, [, currentDegree, ], [, i, ], ;]
[), {, double, cDot, =, 0, ;, double, c, =, polynomials, [, currentDegree, ], [, i, ], ;, for, (]
[;, double, c, =, polynomials, [, currentDegree, ], [, i, ], ;, for, (, int, j, =, currentDegree, -, 1]
[;, for, (, int, j, =, currentDegree, -, 1, ;, j, >, 3, ;, --, j, ), {, final, double]
[[, i, ], ;, for, (, int, j, =, currentDegree, -, 1, ;, j, >, 3, ;, --, j, )]
[[, currentDegree, ], [, i, ], ;, for, (, int, j, =, currentDegree, -, 1, ;, j, >, 3, ;]
[], [, i, ], ;, for, (, int, j, =, currentDegree, -, 1, ;, j, >, 3, ;, --, j]
[], ;, for, (, int, j, =, currentDegree, -, 1, ;, j, >, 3, ;, --, j, ), {, final]
[;, j, >, 3, ;, --, j, ), {, final, double, d, =, 1.0, /, (, j, -, 3, )]
[-, 1, ;, j, >, 3, ;, --, j, ), {, final, double, d, =, 1.0, /, (, j, -]
[;, j, >, 3, ;, --, j, ), {, final, double, d, =, 1.0, /, (, j, -, 3, )]
[;, --, j, ), {, final, double, d, =, 1.0, /, (, j, -, 3, ), ;, cDot, =, d]
[>, 3, ;, --, j, ), {, final, double, d, =, 1.0, /, (, j, -, 3, ), ;, cDot]
[;, --, j, ), {, final, double, d, =, 1.0, /, (, j, -, 3, ), ;, cDot, =, d]
[), {, final, double, d, =, 1.0, /, (, j, -, 3, ), ;, cDot, =, d, *, (, theta05]
[), {, final, double, d, =, 1.0, /, (, j, -, 3, ), ;, cDot, =, d, *, (, theta05]
[;, cDot, =, d, *, (, theta05, *, cDot, +, c, ), ;, c, =, polynomials, [, j, ], []
[/, (, j, -, 3, ), ;, cDot, =, d, *, (, theta05, *, cDot, +, c, ), ;, c]
[;, cDot, =, d, *, (, theta05, *, cDot, +, c, ), ;, c, =, polynomials, [, j, ], []
[), ;, cDot, =, d, *, (, theta05, *, cDot, +, c, ), ;, c, =, polynomials, [, j, ]]
[-, 3, ), ;, cDot, =, d, *, (, theta05, *, cDot, +, c, ), ;, c, =, polynomials, []
[), ;, cDot, =, d, *, (, theta05, *, cDot, +, c, ), ;, c, =, polynomials, [, j, ]]
[=, d, *, (, theta05, *, cDot, +, c, ), ;, c, =, polynomials, [, j, ], [, i, ]]
[;, c, =, polynomials, [, j, ], [, i, ], +, c, *, d, *, theta05, ;, }, interpolatedState, []
[*, (, theta05, *, cDot, +, c, ), ;, c, =, polynomials, [, j, ], [, i, ], +, c]
[;, c, =, polynomials, [, j, ], [, i, ], +, c, *, d, *, theta05, ;, }, interpolatedState, []
[), ;, c, =, polynomials, [, j, ], [, i, ], +, c, *, d, *, theta05, ;, }, interpolatedState]
[+, c, ), ;, c, =, polynomials, [, j, ], [, i, ], +, c, *, d, *, theta05, ;]
[*, cDot, +, c, ), ;, c, =, polynomials, [, j, ], [, i, ], +, c, *, d, *]
[+, c, ), ;, c, =, polynomials, [, j, ], [, i, ], +, c, *, d, *, theta05, ;]
[), ;, c, =, polynomials, [, j, ], [, i, ], +, c, *, d, *, theta05, ;, }, interpolatedState]
[=, polynomials, [, j, ], [, i, ], +, c, *, d, *, theta05, ;, }, interpolatedState, [, i, ]]
[;, }, interpolatedState, [, i, ], +=, t4, *, c, ;, interpolatedDerivatives, [, i, ], +=, (, t4, *, cDot]
[+, c, *, d, *, theta05, ;, }, interpolatedState, [, i, ], +=, t4, *, c, ;, interpolatedDerivatives, [, i]
[[, i, ], +, c, *, d, *, theta05, ;, }, interpolatedState, [, i, ], +=, t4, *, c, ;]
[[, j, ], [, i, ], +, c, *, d, *, theta05, ;, }, interpolatedState, [, i, ], +=, t4]
[], [, i, ], +, c, *, d, *, theta05, ;, }, interpolatedState, [, i, ], +=, t4, *, c]
[], +, c, *, d, *, theta05, ;, }, interpolatedState, [, i, ], +=, t4, *, c, ;, interpolatedDerivatives, []
[;, }, interpolatedState, [, i, ], +=, t4, *, c, ;, interpolatedDerivatives, [, i, ], +=, (, t4, *, cDot]
[*, theta05, ;, }, interpolatedState, [, i, ], +=, t4, *, c, ;, interpolatedDerivatives, [, i, ], +=, (, t4]
[*, d, *, theta05, ;, }, interpolatedState, [, i, ], +=, t4, *, c, ;, interpolatedDerivatives, [, i, ], +=]
[*, theta05, ;, }, interpolatedState, [, i, ], +=, t4, *, c, ;, interpolatedDerivatives, [, i, ], +=, (, t4]
[;, }, interpolatedState, [, i, ], +=, t4, *, c, ;, interpolatedDerivatives, [, i, ], +=, (, t4, *, cDot]
[+=, t4, *, c, ;, interpolatedDerivatives, [, i, ], +=, (, t4, *, cDot, +, t4Dot, *, c, ), /]
[[, i, ], +=, t4, *, c, ;, interpolatedDerivatives, [, i, ], +=, (, t4, *, cDot, +, t4Dot, *]
[], +=, t4, *, c, ;, interpolatedDerivatives, [, i, ], +=, (, t4, *, cDot, +, t4Dot, *, c, )]
[;, interpolatedDerivatives, [, i, ], +=, (, t4, *, cDot, +, t4Dot, *, c, ), /, h, ;, }, }]
[*, c, ;, interpolatedDerivatives, [, i, ], +=, (, t4, *, cDot, +, t4Dot, *, c, ), /, h, ;]
[;, interpolatedDerivatives, [, i, ], +=, (, t4, *, cDot, +, t4Dot, *, c, ), /, h, ;, }, }]
[+=, (, t4, *, cDot, +, t4Dot, *, c, ), /, h, ;, }, }, if, (, h, ==, 0]
[[, i, ], +=, (, t4, *, cDot, +, t4Dot, *, c, ), /, h, ;, }, }, if, (]
[], +=, (, t4, *, cDot, +, t4Dot, *, c, ), /, h, ;, }, }, if, (, h, ==]
[;, }, }, if, (, h, ==, 0, ), {, System, ., arraycopy, (, yMidDots, [, 1, ], ,, 0]
[/, h, ;, }, }, if, (, h, ==, 0, ), {, System, ., arraycopy, (, yMidDots, [, 1, ]]
[), /, h, ;, }, }, if, (, h, ==, 0, ), {, System, ., arraycopy, (, yMidDots, [, 1]
[+, t4Dot, *, c, ), /, h, ;, }, }, if, (, h, ==, 0, ), {, System, ., arraycopy]
[*, cDot, +, t4Dot, *, c, ), /, h, ;, }, }, if, (, h, ==, 0, ), {, System]
[+, t4Dot, *, c, ), /, h, ;, }, }, if, (, h, ==, 0, ), {, System, ., arraycopy]
[), /, h, ;, }, }, if, (, h, ==, 0, ), {, System, ., arraycopy, (, yMidDots, [, 1]
[*, c, ), /, h, ;, }, }, if, (, h, ==, 0, ), {, System, ., arraycopy, (, yMidDots]
[), /, h, ;, }, }, if, (, h, ==, 0, ), {, System, ., arraycopy, (, yMidDots, [, 1]
[;, }, }, if, (, h, ==, 0, ), {, System, ., arraycopy, (, yMidDots, [, 1, ], ,, 0]
[), {, System, ., arraycopy, (, yMidDots, [, 1, ], ,, 0, ,, interpolatedDerivatives, ,, 0, ,, dimension, ), ;]
[==, 0, ), {, System, ., arraycopy, (, yMidDots, [, 1, ], ,, 0, ,, interpolatedDerivatives, ,, 0, ,, dimension]
[), {, System, ., arraycopy, (, yMidDots, [, 1, ], ,, 0, ,, interpolatedDerivatives, ,, 0, ,, dimension, ), ;]
[;, }, }, @, Override, public, void, writeExternal, (, final, ObjectOutput, out, ), throws, IOException, {, final, int, dimension, =]
[., arraycopy, (, yMidDots, [, 1, ], ,, 0, ,, interpolatedDerivatives, ,, 0, ,, dimension, ), ;, }, }, @]
[,, 0, ,, interpolatedDerivatives, ,, 0, ,, dimension, ), ;, }, }, @, Override, public, void, writeExternal, (, final, ObjectOutput]
[[, 1, ], ,, 0, ,, interpolatedDerivatives, ,, 0, ,, dimension, ), ;, }, }, @, Override, public, void, writeExternal]
[], ,, 0, ,, interpolatedDerivatives, ,, 0, ,, dimension, ), ;, }, }, @, Override, public, void, writeExternal, (, final]
[,, interpolatedDerivatives, ,, 0, ,, dimension, ), ;, }, }, @, Override, public, void, writeExternal, (, final, ObjectOutput, out, )]
[,, 0, ,, dimension, ), ;, }, }, @, Override, public, void, writeExternal, (, final, ObjectOutput, out, ), throws, IOException]
[,, dimension, ), ;, }, }, @, Override, public, void, writeExternal, (, final, ObjectOutput, out, ), throws, IOException, {, final]
[), ;, }, }, @, Override, public, void, writeExternal, (, final, ObjectOutput, out, ), throws, IOException, {, final, int, dimension]
[;, writeBaseExternal, (, out, ), ;, out, ., writeInt, (, currentDegree, ), ;, for, (, int, k, =, 0, ;]
[?, -, 1, :, currentState, ., length, ;, writeBaseExternal, (, out, ), ;, out, ., writeInt, (, currentDegree, ), ;]
[), ?, -, 1, :, currentState, ., length, ;, writeBaseExternal, (, out, ), ;, out, ., writeInt, (, currentDegree, )]
[==, null, ), ?, -, 1, :, currentState, ., length, ;, writeBaseExternal, (, out, ), ;, out, ., writeInt, (]
[), ?, -, 1, :, currentState, ., length, ;, writeBaseExternal, (, out, ), ;, out, ., writeInt, (, currentDegree, )]
[:, currentState, ., length, ;, writeBaseExternal, (, out, ), ;, out, ., writeInt, (, currentDegree, ), ;, for, (, int]
[:, currentState, ., length, ;, writeBaseExternal, (, out, ), ;, out, ., writeInt, (, currentDegree, ), ;, for, (, int]
[;, writeBaseExternal, (, out, ), ;, out, ., writeInt, (, currentDegree, ), ;, for, (, int, k, =, 0, ;]
[., length, ;, writeBaseExternal, (, out, ), ;, out, ., writeInt, (, currentDegree, ), ;, for, (, int, k, =]
[;, out, ., writeInt, (, currentDegree, ), ;, for, (, int, k, =, 0, ;, k, <=, currentDegree, ;, ++]
[), ;, out, ., writeInt, (, currentDegree, ), ;, for, (, int, k, =, 0, ;, k, <=, currentDegree, ;]
[;, for, (, int, k, =, 0, ;, k, <=, currentDegree, ;, ++, k, ), {, for, (, int, l]
[., writeInt, (, currentDegree, ), ;, for, (, int, k, =, 0, ;, k, <=, currentDegree, ;, ++, k, )]
[), ;, for, (, int, k, =, 0, ;, k, <=, currentDegree, ;, ++, k, ), {, for, (, int]
[;, k, <=, currentDegree, ;, ++, k, ), {, for, (, int, l, =, 0, ;, l, <, dimension, ;]
[;, ++, k, ), {, for, (, int, l, =, 0, ;, l, <, dimension, ;, ++, l, ), {]
[<=, currentDegree, ;, ++, k, ), {, for, (, int, l, =, 0, ;, l, <, dimension, ;, ++, l]
[;, ++, k, ), {, for, (, int, l, =, 0, ;, l, <, dimension, ;, ++, l, ), {]
[), {, for, (, int, l, =, 0, ;, l, <, dimension, ;, ++, l, ), {, out, ., writeDouble]
[), {, for, (, int, l, =, 0, ;, l, <, dimension, ;, ++, l, ), {, out, ., writeDouble]
[;, l, <, dimension, ;, ++, l, ), {, out, ., writeDouble, (, polynomials, [, k, ], [, l, ]]
[;, ++, l, ), {, out, ., writeDouble, (, polynomials, [, k, ], [, l, ], ), ;, }, }]
[<, dimension, ;, ++, l, ), {, out, ., writeDouble, (, polynomials, [, k, ], [, l, ], ), ;]
[;, ++, l, ), {, out, ., writeDouble, (, polynomials, [, k, ], [, l, ], ), ;, }, }]
[), {, out, ., writeDouble, (, polynomials, [, k, ], [, l, ], ), ;, }, }, }, @, Override]
[), {, out, ., writeDouble, (, polynomials, [, k, ], [, l, ], ), ;, }, }, }, @, Override]
[;, }, }, }, @, Override, public, void, readExternal, (, final, ObjectInput, in, ), throws, IOException, ,, ClassNotFoundException, {, final]
[., writeDouble, (, polynomials, [, k, ], [, l, ], ), ;, }, }, }, @, Override, public, void, readExternal]
[), ;, }, }, }, @, Override, public, void, readExternal, (, final, ObjectInput, in, ), throws, IOException, ,, ClassNotFoundException, {]
[[, l, ], ), ;, }, }, }, @, Override, public, void, readExternal, (, final, ObjectInput, in, ), throws, IOException]
[[, k, ], [, l, ], ), ;, }, }, }, @, Override, public, void, readExternal, (, final, ObjectInput, in]
[], [, l, ], ), ;, }, }, }, @, Override, public, void, readExternal, (, final, ObjectInput, in, ), throws]
[], ), ;, }, }, }, @, Override, public, void, readExternal, (, final, ObjectInput, in, ), throws, IOException, ,, ClassNotFoundException]
[;, final, int, dimension, =, (, currentState, ==, null, ), ?, -, 1, :, currentState, ., length, ;, final, int]
[), ;, final, int, dimension, =, (, currentState, ==, null, ), ?, -, 1, :, currentState, ., length, ;, final]
[;, final, int, degree, =, in, ., readInt, (, ), ;, resetTables, (, degree, ), ;, currentDegree, =, degree, ;]
[?, -, 1, :, currentState, ., length, ;, final, int, degree, =, in, ., readInt, (, ), ;, resetTables, (]
[), ?, -, 1, :, currentState, ., length, ;, final, int, degree, =, in, ., readInt, (, ), ;, resetTables]
[==, null, ), ?, -, 1, :, currentState, ., length, ;, final, int, degree, =, in, ., readInt, (, )]
[), ?, -, 1, :, currentState, ., length, ;, final, int, degree, =, in, ., readInt, (, ), ;, resetTables]
[:, currentState, ., length, ;, final, int, degree, =, in, ., readInt, (, ), ;, resetTables, (, degree, ), ;]
[:, currentState, ., length, ;, final, int, degree, =, in, ., readInt, (, ), ;, resetTables, (, degree, ), ;]
[;, final, int, degree, =, in, ., readInt, (, ), ;, resetTables, (, degree, ), ;, currentDegree, =, degree, ;]
[., length, ;, final, int, degree, =, in, ., readInt, (, ), ;, resetTables, (, degree, ), ;, currentDegree, =]
[;, resetTables, (, degree, ), ;, currentDegree, =, degree, ;, for, (, int, k, =, 0, ;, k, <=, currentDegree]
[., readInt, (, ), ;, resetTables, (, degree, ), ;, currentDegree, =, degree, ;, for, (, int, k, =, 0]
[;, currentDegree, =, degree, ;, for, (, int, k, =, 0, ;, k, <=, currentDegree, ;, ++, k, ), {]
[), ;, currentDegree, =, degree, ;, for, (, int, k, =, 0, ;, k, <=, currentDegree, ;, ++, k, )]
[=, degree, ;, for, (, int, k, =, 0, ;, k, <=, currentDegree, ;, ++, k, ), {, for, (]
[;, for, (, int, k, =, 0, ;, k, <=, currentDegree, ;, ++, k, ), {, for, (, int, l]
[;, k, <=, currentDegree, ;, ++, k, ), {, for, (, int, l, =, 0, ;, l, <, dimension, ;]
[;, ++, k, ), {, for, (, int, l, =, 0, ;, l, <, dimension, ;, ++, l, ), {]
[<=, currentDegree, ;, ++, k, ), {, for, (, int, l, =, 0, ;, l, <, dimension, ;, ++, l]
[;, ++, k, ), {, for, (, int, l, =, 0, ;, l, <, dimension, ;, ++, l, ), {]
[), {, for, (, int, l, =, 0, ;, l, <, dimension, ;, ++, l, ), {, polynomials, [, k]
[), {, for, (, int, l, =, 0, ;, l, <, dimension, ;, ++, l, ), {, polynomials, [, k]
[;, l, <, dimension, ;, ++, l, ), {, polynomials, [, k, ], [, l, ], =, in, ., readDouble]
[;, ++, l, ), {, polynomials, [, k, ], [, l, ], =, in, ., readDouble, (, ), ;, }]
[<, dimension, ;, ++, l, ), {, polynomials, [, k, ], [, l, ], =, in, ., readDouble, (, )]
[;, ++, l, ), {, polynomials, [, k, ], [, l, ], =, in, ., readDouble, (, ), ;, }]
[), {, polynomials, [, k, ], [, l, ], =, in, ., readDouble, (, ), ;, }, }, setInterpolatedTime, (]
[), {, polynomials, [, k, ], [, l, ], =, in, ., readDouble, (, ), ;, }, }, setInterpolatedTime, (]
[=, in, ., readDouble, (, ), ;, }, }, setInterpolatedTime, (, t, ), ;, }, }]
[[, l, ], =, in, ., readDouble, (, ), ;, }, }, setInterpolatedTime, (, t, ), ;, }, }]
[[, k, ], [, l, ], =, in, ., readDouble, (, ), ;, }, }, setInterpolatedTime, (, t, ), ;]
[], [, l, ], =, in, ., readDouble, (, ), ;, }, }, setInterpolatedTime, (, t, ), ;, }, }]
[], =, in, ., readDouble, (, ), ;, }, }, setInterpolatedTime, (, t, ), ;, }, }]
[;, }, }, setInterpolatedTime, (, t, ), ;, }, }]
[., readDouble, (, ), ;, }, }, setInterpolatedTime, (, t, ), ;, }, }]
[;, }, }]
[), ;, }, }]
