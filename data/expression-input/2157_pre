[math3, ., util, ., FastMath, ;, public, class, Sinc, implements, UnivariateDifferentiableFunction, ,, DifferentiableUnivariateFunction, {, private, static, final, double, SHORTCUT, =]
[private, static, final, double, SHORTCUT, =, 6.0e-3, ;, private, final, boolean, normalized, ;, public, Sinc, (, ), {, this, (]
[normalized, ;, public, Sinc, (, ), {, this, (, false, ), ;, }, public, Sinc, (, boolean, normalized, ), {]
[normalized, ;, public, Sinc, (, ), {, this, (, false, ), ;, }, public, Sinc, (, boolean, normalized, ), {]
[(, ), {, this, (, false, ), ;, }, public, Sinc, (, boolean, normalized, ), {, this, ., normalized, =]
[this, ., normalized, =, normalized, ;, }, public, double, value, (, final, double, x, ), {, final, double, scaledX, =]
[this, ., normalized, =, normalized, ;, }, public, double, value, (, final, double, x, ), {, final, double, scaledX, =]
[normalized, =, normalized, ;, }, public, double, value, (, final, double, x, ), {, final, double, scaledX, =, normalized, ?]
[normalized, =, normalized, ;, }, public, double, value, (, final, double, x, ), {, final, double, scaledX, =, normalized, ?]
[normalized, =, normalized, ;, }, public, double, value, (, final, double, x, ), {, final, double, scaledX, =, normalized, ?]
[}, public, double, value, (, final, double, x, ), {, final, double, scaledX, =, normalized, ?, FastMath, ., PI, *]
[double, value, (, final, double, x, ), {, final, double, scaledX, =, normalized, ?, FastMath, ., PI, *, x, :]
[double, x, ), {, final, double, scaledX, =, normalized, ?, FastMath, ., PI, *, x, :, x, ;, if, (]
[double, x, ), {, final, double, scaledX, =, normalized, ?, FastMath, ., PI, *, x, :, x, ;, if, (]
[double, x, ), {, final, double, scaledX, =, normalized, ?, FastMath, ., PI, *, x, :, x, ;, if, (]
[final, double, scaledX, =, normalized, ?, FastMath, ., PI, *, x, :, x, ;, if, (, FastMath, ., abs, (]
[=, normalized, ?, FastMath, ., PI, *, x, :, x, ;, if, (, FastMath, ., abs, (, scaledX, ), <=]
[x, :, x, ;, if, (, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, final, double, scaledX2, =]
[x, :, x, ;, if, (, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, final, double, scaledX2, =]
[x, ;, if, (, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, final, double, scaledX2, =, scaledX, *]
[(, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, final, double, scaledX2, =, scaledX, *, scaledX, ;, return]
[(, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, final, double, scaledX2, =, scaledX, *, scaledX, ;, return]
[FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, final, double, scaledX2, =, scaledX, *, scaledX, ;, return, (]
[FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, final, double, scaledX2, =, scaledX, *, scaledX, ;, return, (]
[FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, final, double, scaledX2, =, scaledX, *, scaledX, ;, return, (]
[., abs, (, scaledX, ), <=, SHORTCUT, ), {, final, double, scaledX2, =, scaledX, *, scaledX, ;, return, (, (]
[., abs, (, scaledX, ), <=, SHORTCUT, ), {, final, double, scaledX2, =, scaledX, *, scaledX, ;, return, (, (]
[(, scaledX, ), <=, SHORTCUT, ), {, final, double, scaledX2, =, scaledX, *, scaledX, ;, return, (, (, scaledX2, -]
[<=, SHORTCUT, ), {, final, double, scaledX2, =, scaledX, *, scaledX, ;, return, (, (, scaledX2, -, 20, ), *]
[), {, final, double, scaledX2, =, scaledX, *, scaledX, ;, return, (, (, scaledX2, -, 20, ), *, scaledX2, +]
[double, scaledX2, =, scaledX, *, scaledX, ;, return, (, (, scaledX2, -, 20, ), *, scaledX2, +, 120, ), /]
[;, return, (, (, scaledX2, -, 20, ), *, scaledX2, +, 120, ), /, 120, ;, }, else, {, return]
[;, return, (, (, scaledX2, -, 20, ), *, scaledX2, +, 120, ), /, 120, ;, }, else, {, return]
[;, return, (, (, scaledX2, -, 20, ), *, scaledX2, +, 120, ), /, 120, ;, }, else, {, return]
[scaledX2, -, 20, ), *, scaledX2, +, 120, ), /, 120, ;, }, else, {, return, FastMath, ., sin, (]
[), *, scaledX2, +, 120, ), /, 120, ;, }, else, {, return, FastMath, ., sin, (, scaledX, ), /]
[FastMath, ., sin, (, scaledX, ), /, scaledX, ;, }, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return]
[FastMath, ., sin, (, scaledX, ), /, scaledX, ;, }, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return]
[FastMath, ., sin, (, scaledX, ), /, scaledX, ;, }, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return]
[scaledX, ), /, scaledX, ;, }, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (]
[derivative, (, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, scaledX, =]
[derivative, (, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, scaledX, =]
[(, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, scaledX, =, (]
[(, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, scaledX, =, (]
[;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, scaledX, =, (, normalized, ?]
[;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, scaledX, =, (, normalized, ?]
[value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, scaledX, =, (, normalized, ?, FastMath, ., PI, :]
[DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, scaledX, =, (, normalized, ?, FastMath, ., PI, :, 1, ), *]
[DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, scaledX, =, (, normalized, ?, FastMath, ., PI, :, 1, ), *]
[(, normalized, ?, FastMath, ., PI, :, 1, ), *, t, ., getValue, (, ), ;, final, double, scaledX2, =]
[(, normalized, ?, FastMath, ., PI, :, 1, ), *, t, ., getValue, (, ), ;, final, double, scaledX2, =]
[?, FastMath, ., PI, :, 1, ), *, t, ., getValue, (, ), ;, final, double, scaledX2, =, scaledX, *]
[*, t, ., getValue, (, ), ;, final, double, scaledX2, =, scaledX, *, scaledX, ;, double, [, ], f, =]
[getValue, (, ), ;, final, double, scaledX2, =, scaledX, *, scaledX, ;, double, [, ], f, =, new, double, []
[getValue, (, ), ;, final, double, scaledX2, =, scaledX, *, scaledX, ;, double, [, ], f, =, new, double, []
[getValue, (, ), ;, final, double, scaledX2, =, scaledX, *, scaledX, ;, double, [, ], f, =, new, double, []
[scaledX2, =, scaledX, *, scaledX, ;, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +]
[;, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;, if, (]
[;, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;, if, (]
[;, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;, if, (]
[f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;, if, (, FastMath, ., abs, (]
[double, [, t, ., getOrder, (, ), +, 1, ], ;, if, (, FastMath, ., abs, (, scaledX, ), <=]
[1, ], ;, if, (, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, for, (, int, i, =]
[;, if, (, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, for, (, int, i, =, 0, ;]
[;, if, (, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, for, (, int, i, =, 0, ;]
[(, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, for, (, int, i, =, 0, ;, i, <]
[(, FastMath, ., abs, (, scaledX, ), <=, SHORTCUT, ), {, for, (, int, i, =, 0, ;, i, <]
[(, scaledX, ), <=, SHORTCUT, ), {, for, (, int, i, =, 0, ;, i, <, f, ., length, ;]
[scaledX, ), <=, SHORTCUT, ), {, for, (, int, i, =, 0, ;, i, <, f, ., length, ;, ++]
[(, int, i, =, 0, ;, i, <, f, ., length, ;, ++, i, ), {, final, int, k, =]
[(, int, i, =, 0, ;, i, <, f, ., length, ;, ++, i, ), {, final, int, k, =]
[i, =, 0, ;, i, <, f, ., length, ;, ++, i, ), {, final, int, k, =, i, /]
[i, <, f, ., length, ;, ++, i, ), {, final, int, k, =, i, /, 2, ;, if, (]
[i, <, f, ., length, ;, ++, i, ), {, final, int, k, =, i, /, 2, ;, if, (]
[<, f, ., length, ;, ++, i, ), {, final, int, k, =, i, /, 2, ;, if, (, (]
[<, f, ., length, ;, ++, i, ), {, final, int, k, =, i, /, 2, ;, if, (, (]
[., length, ;, ++, i, ), {, final, int, k, =, i, /, 2, ;, if, (, (, i, &]
[++, i, ), {, final, int, k, =, i, /, 2, ;, if, (, (, i, &, 0x1, ), ==]
[{, final, int, k, =, i, /, 2, ;, if, (, (, i, &, 0x1, ), ==, 0, ), {]
[{, final, int, k, =, i, /, 2, ;, if, (, (, i, &, 0x1, ), ==, 0, ), {]
[int, k, =, i, /, 2, ;, if, (, (, i, &, 0x1, ), ==, 0, ), {, f, []
[i, /, 2, ;, if, (, (, i, &, 0x1, ), ==, 0, ), {, f, [, i, ], =]
[i, /, 2, ;, if, (, (, i, &, 0x1, ), ==, 0, ), {, f, [, i, ], =]
[/, 2, ;, if, (, (, i, &, 0x1, ), ==, 0, ), {, f, [, i, ], =, (]
[/, 2, ;, if, (, (, i, &, 0x1, ), ==, 0, ), {, f, [, i, ], =, (]
[2, ;, if, (, (, i, &, 0x1, ), ==, 0, ), {, f, [, i, ], =, (, (]
[2, ;, if, (, (, i, &, 0x1, ), ==, 0, ), {, f, [, i, ], =, (, (]
[;, if, (, (, i, &, 0x1, ), ==, 0, ), {, f, [, i, ], =, (, (, (]
[;, if, (, (, i, &, 0x1, ), ==, 0, ), {, f, [, i, ], =, (, (, (]
[(, (, i, &, 0x1, ), ==, 0, ), {, f, [, i, ], =, (, (, (, k, &]
[&, 0x1, ), ==, 0, ), {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==]
[==, 0, ), {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?]
[), {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?, 1, :]
[{, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?, 1, :, -]
[i, ], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?, 1, :, -, 1, ), *]
[], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?, 1, :, -, 1, ), *, (]
[], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?, 1, :, -, 1, ), *, (]
[], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?, 1, :, -, 1, ), *, (]
[(, (, (, k, &, 0x1, ), ==, 0, ), ?, 1, :, -, 1, ), *, (, 1.0, /]
[(, (, k, &, 0x1, ), ==, 0, ), ?, 1, :, -, 1, ), *, (, 1.0, /, (]
[(, (, k, &, 0x1, ), ==, 0, ), ?, 1, :, -, 1, ), *, (, 1.0, /, (]
[k, &, 0x1, ), ==, 0, ), ?, 1, :, -, 1, ), *, (, 1.0, /, (, i, +]
[), ==, 0, ), ?, 1, :, -, 1, ), *, (, 1.0, /, (, i, +, 1, ), -]
[), ==, 0, ), ?, 1, :, -, 1, ), *, (, 1.0, /, (, i, +, 1, ), -]
[0, ), ?, 1, :, -, 1, ), *, (, 1.0, /, (, i, +, 1, ), -, scaledX2, *]
[), ?, 1, :, -, 1, ), *, (, 1.0, /, (, i, +, 1, ), -, scaledX2, *, (]
[), ?, 1, :, -, 1, ), *, (, 1.0, /, (, i, +, 1, ), -, scaledX2, *, (]
[), ?, 1, :, -, 1, ), *, (, 1.0, /, (, i, +, 1, ), -, scaledX2, *, (]
[1, :, -, 1, ), *, (, 1.0, /, (, i, +, 1, ), -, scaledX2, *, (, 1.0, /]
[:, -, 1, ), *, (, 1.0, /, (, i, +, 1, ), -, scaledX2, *, (, 1.0, /, (]
[:, -, 1, ), *, (, 1.0, /, (, i, +, 1, ), -, scaledX2, *, (, 1.0, /, (]
[:, -, 1, ), *, (, 1.0, /, (, i, +, 1, ), -, scaledX2, *, (, 1.0, /, (]
[1, ), *, (, 1.0, /, (, i, +, 1, ), -, scaledX2, *, (, 1.0, /, (, 2, *]
[*, (, 1.0, /, (, i, +, 1, ), -, scaledX2, *, (, 1.0, /, (, 2, *, i, +]
[/, (, i, +, 1, ), -, scaledX2, *, (, 1.0, /, (, 2, *, i, +, 6, ), -]
[/, (, i, +, 1, ), -, scaledX2, *, (, 1.0, /, (, 2, *, i, +, 6, ), -]
[i, +, 1, ), -, scaledX2, *, (, 1.0, /, (, 2, *, i, +, 6, ), -, scaledX2, /]
[+, 1, ), -, scaledX2, *, (, 1.0, /, (, 2, *, i, +, 6, ), -, scaledX2, /, (]
[+, 1, ), -, scaledX2, *, (, 1.0, /, (, 2, *, i, +, 6, ), -, scaledX2, /, (]
[+, 1, ), -, scaledX2, *, (, 1.0, /, (, 2, *, i, +, 6, ), -, scaledX2, /, (]
[), -, scaledX2, *, (, 1.0, /, (, 2, *, i, +, 6, ), -, scaledX2, /, (, 24, *]
[scaledX2, *, (, 1.0, /, (, 2, *, i, +, 6, ), -, scaledX2, /, (, 24, *, i, +]
[i, +, 6, ), -, scaledX2, /, (, 24, *, i, +, 120, ), ), ), ;, }, else, {]
[i, +, 6, ), -, scaledX2, /, (, 24, *, i, +, 120, ), ), ), ;, }, else, {]
[6, ), -, scaledX2, /, (, 24, *, i, +, 120, ), ), ), ;, }, else, {, f, []
[scaledX2, /, (, 24, *, i, +, 120, ), ), ), ;, }, else, {, f, [, i, ], =]
[scaledX2, /, (, 24, *, i, +, 120, ), ), ), ;, }, else, {, f, [, i, ], =]
[/, (, 24, *, i, +, 120, ), ), ), ;, }, else, {, f, [, i, ], =, (]
[/, (, 24, *, i, +, 120, ), ), ), ;, }, else, {, f, [, i, ], =, (]
[(, 24, *, i, +, 120, ), ), ), ;, }, else, {, f, [, i, ], =, (, (]
[(, 24, *, i, +, 120, ), ), ), ;, }, else, {, f, [, i, ], =, (, (]
[24, *, i, +, 120, ), ), ), ;, }, else, {, f, [, i, ], =, (, (, (]
[24, *, i, +, 120, ), ), ), ;, }, else, {, f, [, i, ], =, (, (, (]
[i, +, 120, ), ), ), ;, }, else, {, f, [, i, ], =, (, (, (, k, &]
[), ), ), ;, }, else, {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==]
[;, }, else, {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?]
[}, else, {, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?, -]
[{, f, [, i, ], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?, -, scaledX, :]
[i, ], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?, -, scaledX, :, scaledX, ), *]
[], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?, -, scaledX, :, scaledX, ), *, (]
[], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?, -, scaledX, :, scaledX, ), *, (]
[], =, (, (, (, k, &, 0x1, ), ==, 0, ), ?, -, scaledX, :, scaledX, ), *, (]
[(, (, (, k, &, 0x1, ), ==, 0, ), ?, -, scaledX, :, scaledX, ), *, (, 1.0, /]
[(, (, k, &, 0x1, ), ==, 0, ), ?, -, scaledX, :, scaledX, ), *, (, 1.0, /, (]
[(, (, k, &, 0x1, ), ==, 0, ), ?, -, scaledX, :, scaledX, ), *, (, 1.0, /, (]
[k, &, 0x1, ), ==, 0, ), ?, -, scaledX, :, scaledX, ), *, (, 1.0, /, (, i, +]
[), ==, 0, ), ?, -, scaledX, :, scaledX, ), *, (, 1.0, /, (, i, +, 2, ), -]
[), ==, 0, ), ?, -, scaledX, :, scaledX, ), *, (, 1.0, /, (, i, +, 2, ), -]
[0, ), ?, -, scaledX, :, scaledX, ), *, (, 1.0, /, (, i, +, 2, ), -, scaledX2, *]
[), ?, -, scaledX, :, scaledX, ), *, (, 1.0, /, (, i, +, 2, ), -, scaledX2, *, (]
[), ?, -, scaledX, :, scaledX, ), *, (, 1.0, /, (, i, +, 2, ), -, scaledX2, *, (]
[), ?, -, scaledX, :, scaledX, ), *, (, 1.0, /, (, i, +, 2, ), -, scaledX2, *, (]
[-, scaledX, :, scaledX, ), *, (, 1.0, /, (, i, +, 2, ), -, scaledX2, *, (, 1.0, /]
[scaledX, :, scaledX, ), *, (, 1.0, /, (, i, +, 2, ), -, scaledX2, *, (, 1.0, /, (]
[scaledX, :, scaledX, ), *, (, 1.0, /, (, i, +, 2, ), -, scaledX2, *, (, 1.0, /, (]
[scaledX, :, scaledX, ), *, (, 1.0, /, (, i, +, 2, ), -, scaledX2, *, (, 1.0, /, (]
[scaledX, ), *, (, 1.0, /, (, i, +, 2, ), -, scaledX2, *, (, 1.0, /, (, 6, *]
[*, (, 1.0, /, (, i, +, 2, ), -, scaledX2, *, (, 1.0, /, (, 6, *, i, +]
[/, (, i, +, 2, ), -, scaledX2, *, (, 1.0, /, (, 6, *, i, +, 24, ), -]
[/, (, i, +, 2, ), -, scaledX2, *, (, 1.0, /, (, 6, *, i, +, 24, ), -]
[i, +, 2, ), -, scaledX2, *, (, 1.0, /, (, 6, *, i, +, 24, ), -, scaledX2, /]
[+, 2, ), -, scaledX2, *, (, 1.0, /, (, 6, *, i, +, 24, ), -, scaledX2, /, (]
[+, 2, ), -, scaledX2, *, (, 1.0, /, (, 6, *, i, +, 24, ), -, scaledX2, /, (]
[+, 2, ), -, scaledX2, *, (, 1.0, /, (, 6, *, i, +, 24, ), -, scaledX2, /, (]
[), -, scaledX2, *, (, 1.0, /, (, 6, *, i, +, 24, ), -, scaledX2, /, (, 120, *]
[scaledX2, *, (, 1.0, /, (, 6, *, i, +, 24, ), -, scaledX2, /, (, 120, *, i, +]
[/, (, 120, *, i, +, 720, ), ), ), ;, }, }, }, else, {, final, double, inv, =]
[/, (, 120, *, i, +, 720, ), ), ), ;, }, }, }, else, {, final, double, inv, =]
[120, *, i, +, 720, ), ), ), ;, }, }, }, else, {, final, double, inv, =, 1, /]
[), ), ;, }, }, }, else, {, final, double, inv, =, 1, /, scaledX, ;, final, double, cos, =]
[), ), ;, }, }, }, else, {, final, double, inv, =, 1, /, scaledX, ;, final, double, cos, =]
[}, }, else, {, final, double, inv, =, 1, /, scaledX, ;, final, double, cos, =, FastMath, ., cos, (]
[=, 1, /, scaledX, ;, final, double, cos, =, FastMath, ., cos, (, scaledX, ), ;, final, double, sin, =]
[=, 1, /, scaledX, ;, final, double, cos, =, FastMath, ., cos, (, scaledX, ), ;, final, double, sin, =]
[;, final, double, cos, =, FastMath, ., cos, (, scaledX, ), ;, final, double, sin, =, FastMath, ., sin, (]
[cos, =, FastMath, ., cos, (, scaledX, ), ;, final, double, sin, =, FastMath, ., sin, (, scaledX, ), ;]
[cos, =, FastMath, ., cos, (, scaledX, ), ;, final, double, sin, =, FastMath, ., sin, (, scaledX, ), ;]
[FastMath, ., cos, (, scaledX, ), ;, final, double, sin, =, FastMath, ., sin, (, scaledX, ), ;, f, []
[(, scaledX, ), ;, final, double, sin, =, FastMath, ., sin, (, scaledX, ), ;, f, [, 0, ], =]
[(, scaledX, ), ;, final, double, sin, =, FastMath, ., sin, (, scaledX, ), ;, f, [, 0, ], =]
[), ;, final, double, sin, =, FastMath, ., sin, (, scaledX, ), ;, f, [, 0, ], =, inv, *]
[sin, (, scaledX, ), ;, f, [, 0, ], =, inv, *, sin, ;, final, double, [, ], sc, =]
[), ;, f, [, 0, ], =, inv, *, sin, ;, final, double, [, ], sc, =, new, double, []
[), ;, f, [, 0, ], =, inv, *, sin, ;, final, double, [, ], sc, =, new, double, []
[], =, inv, *, sin, ;, final, double, [, ], sc, =, new, double, [, f, ., length, ], ;]
[], =, inv, *, sin, ;, final, double, [, ], sc, =, new, double, [, f, ., length, ], ;]
[inv, *, sin, ;, final, double, [, ], sc, =, new, double, [, f, ., length, ], ;, sc, []
[;, final, double, [, ], sc, =, new, double, [, f, ., length, ], ;, sc, [, 0, ], =]
[sc, =, new, double, [, f, ., length, ], ;, sc, [, 0, ], =, 1, ;, double, coeff, =]
[length, ], ;, sc, [, 0, ], =, 1, ;, double, coeff, =, inv, ;, for, (, int, n, =]
[;, sc, [, 0, ], =, 1, ;, double, coeff, =, inv, ;, for, (, int, n, =, 1, ;]
[;, sc, [, 0, ], =, 1, ;, double, coeff, =, inv, ;, for, (, int, n, =, 1, ;]
[[, 0, ], =, 1, ;, double, coeff, =, inv, ;, for, (, int, n, =, 1, ;, n, <]
[[, 0, ], =, 1, ;, double, coeff, =, inv, ;, for, (, int, n, =, 1, ;, n, <]
[1, ;, double, coeff, =, inv, ;, for, (, int, n, =, 1, ;, n, <, f, ., length, ;]
[;, double, coeff, =, inv, ;, for, (, int, n, =, 1, ;, n, <, f, ., length, ;, ++]
[for, (, int, n, =, 1, ;, n, <, f, ., length, ;, ++, n, ), {, double, s, =]
[1, ;, n, <, f, ., length, ;, ++, n, ), {, double, s, =, 0, ;, double, c, =]
[++, n, ), {, double, s, =, 0, ;, double, c, =, 0, ;, final, int, kStart, ;, if, (]
[++, n, ), {, double, s, =, 0, ;, double, c, =, 0, ;, final, int, kStart, ;, if, (]
[n, ), {, double, s, =, 0, ;, double, c, =, 0, ;, final, int, kStart, ;, if, (, (]
[n, ), {, double, s, =, 0, ;, double, c, =, 0, ;, final, int, kStart, ;, if, (, (]
[{, double, s, =, 0, ;, double, c, =, 0, ;, final, int, kStart, ;, if, (, (, n, &]
[=, 0, ;, double, c, =, 0, ;, final, int, kStart, ;, if, (, (, n, &, 0x1, ), ==]
[double, c, =, 0, ;, final, int, kStart, ;, if, (, (, n, &, 0x1, ), ==, 0, ), {]
[double, c, =, 0, ;, final, int, kStart, ;, if, (, (, n, &, 0x1, ), ==, 0, ), {]
[=, 0, ;, final, int, kStart, ;, if, (, (, n, &, 0x1, ), ==, 0, ), {, sc, []
[final, int, kStart, ;, if, (, (, n, &, 0x1, ), ==, 0, ), {, sc, [, n, ], =]
[kStart, ;, if, (, (, n, &, 0x1, ), ==, 0, ), {, sc, [, n, ], =, 0, ;]
[if, (, (, n, &, 0x1, ), ==, 0, ), {, sc, [, n, ], =, 0, ;, kStart, =]
[0x1, ), ==, 0, ), {, sc, [, n, ], =, 0, ;, kStart, =, n, ;, }, else, {]
[0x1, ), ==, 0, ), {, sc, [, n, ], =, 0, ;, kStart, =, n, ;, }, else, {]
[==, 0, ), {, sc, [, n, ], =, 0, ;, kStart, =, n, ;, }, else, {, sc, []
[{, sc, [, n, ], =, 0, ;, kStart, =, n, ;, }, else, {, sc, [, n, ], =]
[{, sc, [, n, ], =, 0, ;, kStart, =, n, ;, }, else, {, sc, [, n, ], =]
[[, n, ], =, 0, ;, kStart, =, n, ;, }, else, {, sc, [, n, ], =, sc, []
[[, n, ], =, 0, ;, kStart, =, n, ;, }, else, {, sc, [, n, ], =, sc, []
[], =, 0, ;, kStart, =, n, ;, }, else, {, sc, [, n, ], =, sc, [, n, -]
[;, kStart, =, n, ;, }, else, {, sc, [, n, ], =, sc, [, n, -, 1, ], ;]
[=, n, ;, }, else, {, sc, [, n, ], =, sc, [, n, -, 1, ], ;, c, =]
[=, n, ;, }, else, {, sc, [, n, ], =, sc, [, n, -, 1, ], ;, c, =]
[;, }, else, {, sc, [, n, ], =, sc, [, n, -, 1, ], ;, c, =, sc, []
[{, sc, [, n, ], =, sc, [, n, -, 1, ], ;, c, =, sc, [, n, ], ;]
[[, n, ], =, sc, [, n, -, 1, ], ;, c, =, sc, [, n, ], ;, kStart, =]
[[, n, ], =, sc, [, n, -, 1, ], ;, c, =, sc, [, n, ], ;, kStart, =]
[], =, sc, [, n, -, 1, ], ;, c, =, sc, [, n, ], ;, kStart, =, n, -]
[;, c, =, sc, [, n, ], ;, kStart, =, n, -, 1, ;, }, for, (, int, k, =]
[=, sc, [, n, ], ;, kStart, =, n, -, 1, ;, }, for, (, int, k, =, kStart, ;]
[=, sc, [, n, ], ;, kStart, =, n, -, 1, ;, }, for, (, int, k, =, kStart, ;]
[[, n, ], ;, kStart, =, n, -, 1, ;, }, for, (, int, k, =, kStart, ;, k, >]
[], ;, kStart, =, n, -, 1, ;, }, for, (, int, k, =, kStart, ;, k, >, 1, ;]
[kStart, =, n, -, 1, ;, }, for, (, int, k, =, kStart, ;, k, >, 1, ;, k, -=]
[-, 1, ;, }, for, (, int, k, =, kStart, ;, k, >, 1, ;, k, -=, 2, ), {]
[-, 1, ;, }, for, (, int, k, =, kStart, ;, k, >, 1, ;, k, -=, 2, ), {]
[;, }, for, (, int, k, =, kStart, ;, k, >, 1, ;, k, -=, 2, ), {, sc, []
[(, int, k, =, kStart, ;, k, >, 1, ;, k, -=, 2, ), {, sc, [, k, ], =]
[(, int, k, =, kStart, ;, k, >, 1, ;, k, -=, 2, ), {, sc, [, k, ], =]
[(, int, k, =, kStart, ;, k, >, 1, ;, k, -=, 2, ), {, sc, [, k, ], =]
[int, k, =, kStart, ;, k, >, 1, ;, k, -=, 2, ), {, sc, [, k, ], =, (]
[int, k, =, kStart, ;, k, >, 1, ;, k, -=, 2, ), {, sc, [, k, ], =, (]
[=, kStart, ;, k, >, 1, ;, k, -=, 2, ), {, sc, [, k, ], =, (, k, -]
[k, >, 1, ;, k, -=, 2, ), {, sc, [, k, ], =, (, k, -, n, ), *]
[k, >, 1, ;, k, -=, 2, ), {, sc, [, k, ], =, (, k, -, n, ), *]
[1, ;, k, -=, 2, ), {, sc, [, k, ], =, (, k, -, n, ), *, sc, []
[-=, 2, ), {, sc, [, k, ], =, (, k, -, n, ), *, sc, [, k, ], -]
[-=, 2, ), {, sc, [, k, ], =, (, k, -, n, ), *, sc, [, k, ], -]
[), {, sc, [, k, ], =, (, k, -, n, ), *, sc, [, k, ], -, sc, []
[), {, sc, [, k, ], =, (, k, -, n, ), *, sc, [, k, ], -, sc, []
[sc, [, k, ], =, (, k, -, n, ), *, sc, [, k, ], -, sc, [, k, -]
[], =, (, k, -, n, ), *, sc, [, k, ], -, sc, [, k, -, 1, ], ;]
[(, k, -, n, ), *, sc, [, k, ], -, sc, [, k, -, 1, ], ;, s, =]
[(, k, -, n, ), *, sc, [, k, ], -, sc, [, k, -, 1, ], ;, s, =]
[(, k, -, n, ), *, sc, [, k, ], -, sc, [, k, -, 1, ], ;, s, =]
[-, n, ), *, sc, [, k, ], -, sc, [, k, -, 1, ], ;, s, =, s, *]
[), *, sc, [, k, ], -, sc, [, k, -, 1, ], ;, s, =, s, *, scaledX2, +]
[), *, sc, [, k, ], -, sc, [, k, -, 1, ], ;, s, =, s, *, scaledX2, +]
[sc, [, k, ], -, sc, [, k, -, 1, ], ;, s, =, s, *, scaledX2, +, sc, []
[], -, sc, [, k, -, 1, ], ;, s, =, s, *, scaledX2, +, sc, [, k, ], ;]
[], -, sc, [, k, -, 1, ], ;, s, =, s, *, scaledX2, +, sc, [, k, ], ;]
[sc, [, k, -, 1, ], ;, s, =, s, *, scaledX2, +, sc, [, k, ], ;, sc, []
[sc, [, k, -, 1, ], ;, s, =, s, *, scaledX2, +, sc, [, k, ], ;, sc, []
[k, -, 1, ], ;, s, =, s, *, scaledX2, +, sc, [, k, ], ;, sc, [, k, -]
[], ;, s, =, s, *, scaledX2, +, sc, [, k, ], ;, sc, [, k, -, 1, ], =]
[], ;, s, =, s, *, scaledX2, +, sc, [, k, ], ;, sc, [, k, -, 1, ], =]
[], ;, s, =, s, *, scaledX2, +, sc, [, k, ], ;, sc, [, k, -, 1, ], =]
[;, s, =, s, *, scaledX2, +, sc, [, k, ], ;, sc, [, k, -, 1, ], =, (]
[;, s, =, s, *, scaledX2, +, sc, [, k, ], ;, sc, [, k, -, 1, ], =, (]
[;, s, =, s, *, scaledX2, +, sc, [, k, ], ;, sc, [, k, -, 1, ], =, (]
[=, s, *, scaledX2, +, sc, [, k, ], ;, sc, [, k, -, 1, ], =, (, k, -]
[*, scaledX2, +, sc, [, k, ], ;, sc, [, k, -, 1, ], =, (, k, -, 1, -]
[sc, [, k, ], ;, sc, [, k, -, 1, ], =, (, k, -, 1, -, n, ), *]
[sc, [, k, ], ;, sc, [, k, -, 1, ], =, (, k, -, 1, -, n, ), *]
[k, ], ;, sc, [, k, -, 1, ], =, (, k, -, 1, -, n, ), *, sc, []
[k, ], ;, sc, [, k, -, 1, ], =, (, k, -, 1, -, n, ), *, sc, []
[;, sc, [, k, -, 1, ], =, (, k, -, 1, -, n, ), *, sc, [, k, -]
[k, -, 1, ], =, (, k, -, 1, -, n, ), *, sc, [, k, -, 1, ], +]
[k, -, 1, ], =, (, k, -, 1, -, n, ), *, sc, [, k, -, 1, ], +]
[1, ], =, (, k, -, 1, -, n, ), *, sc, [, k, -, 1, ], +, sc, []
[1, ], =, (, k, -, 1, -, n, ), *, sc, [, k, -, 1, ], +, sc, []
[=, (, k, -, 1, -, n, ), *, sc, [, k, -, 1, ], +, sc, [, k, -]
[-, 1, -, n, ), *, sc, [, k, -, 1, ], +, sc, [, k, -, 2, ], ;]
[-, n, ), *, sc, [, k, -, 1, ], +, sc, [, k, -, 2, ], ;, c, =]
[-, n, ), *, sc, [, k, -, 1, ], +, sc, [, k, -, 2, ], ;, c, =]
[-, n, ), *, sc, [, k, -, 1, ], +, sc, [, k, -, 2, ], ;, c, =]
[), *, sc, [, k, -, 1, ], +, sc, [, k, -, 2, ], ;, c, =, c, *]
[sc, [, k, -, 1, ], +, sc, [, k, -, 2, ], ;, c, =, c, *, scaledX2, +]
[sc, [, k, -, 1, ], +, sc, [, k, -, 2, ], ;, c, =, c, *, scaledX2, +]
[k, -, 1, ], +, sc, [, k, -, 2, ], ;, c, =, c, *, scaledX2, +, sc, []
[k, -, 1, ], +, sc, [, k, -, 2, ], ;, c, =, c, *, scaledX2, +, sc, []
[1, ], +, sc, [, k, -, 2, ], ;, c, =, c, *, scaledX2, +, sc, [, k, -]
[[, k, -, 2, ], ;, c, =, c, *, scaledX2, +, sc, [, k, -, 1, ], ;, }]
[[, k, -, 2, ], ;, c, =, c, *, scaledX2, +, sc, [, k, -, 1, ], ;, }]
[-, 2, ], ;, c, =, c, *, scaledX2, +, sc, [, k, -, 1, ], ;, }, sc, []
[;, c, =, c, *, scaledX2, +, sc, [, k, -, 1, ], ;, }, sc, [, 0, ], *=]
[c, =, c, *, scaledX2, +, sc, [, k, -, 1, ], ;, }, sc, [, 0, ], *=, -]
[c, *, scaledX2, +, sc, [, k, -, 1, ], ;, }, sc, [, 0, ], *=, -, n, ;]
[scaledX2, +, sc, [, k, -, 1, ], ;, }, sc, [, 0, ], *=, -, n, ;, s, =]
[scaledX2, +, sc, [, k, -, 1, ], ;, }, sc, [, 0, ], *=, -, n, ;, s, =]
[scaledX2, +, sc, [, k, -, 1, ], ;, }, sc, [, 0, ], *=, -, n, ;, s, =]
[sc, [, k, -, 1, ], ;, }, sc, [, 0, ], *=, -, n, ;, s, =, s, *]
[k, -, 1, ], ;, }, sc, [, 0, ], *=, -, n, ;, s, =, s, *, scaledX2, +]
[k, -, 1, ], ;, }, sc, [, 0, ], *=, -, n, ;, s, =, s, *, scaledX2, +]
[1, ], ;, }, sc, [, 0, ], *=, -, n, ;, s, =, s, *, scaledX2, +, sc, []
[}, sc, [, 0, ], *=, -, n, ;, s, =, s, *, scaledX2, +, sc, [, 0, ], ;]
[[, 0, ], *=, -, n, ;, s, =, s, *, scaledX2, +, sc, [, 0, ], ;, coeff, *=]
[], *=, -, n, ;, s, =, s, *, scaledX2, +, sc, [, 0, ], ;, coeff, *=, inv, ;]
[], *=, -, n, ;, s, =, s, *, scaledX2, +, sc, [, 0, ], ;, coeff, *=, inv, ;]
[-, n, ;, s, =, s, *, scaledX2, +, sc, [, 0, ], ;, coeff, *=, inv, ;, f, []
[s, =, s, *, scaledX2, +, sc, [, 0, ], ;, coeff, *=, inv, ;, f, [, n, ], =]
[s, =, s, *, scaledX2, +, sc, [, 0, ], ;, coeff, *=, inv, ;, f, [, n, ], =]
[s, *, scaledX2, +, sc, [, 0, ], ;, coeff, *=, inv, ;, f, [, n, ], =, coeff, *]
[*, scaledX2, +, sc, [, 0, ], ;, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, (]
[*, scaledX2, +, sc, [, 0, ], ;, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, (]
[*, scaledX2, +, sc, [, 0, ], ;, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, (]
[+, sc, [, 0, ], ;, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, (, s, *]
[[, 0, ], ;, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, (, s, *, sin, +]
[[, 0, ], ;, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, (, s, *, sin, +]
[[, 0, ], ;, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, (, s, *, sin, +]
[], ;, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, (, s, *, sin, +, c, *]
[coeff, *=, inv, ;, f, [, n, ], =, coeff, *, (, s, *, sin, +, c, *, scaledX, *]
[], =, coeff, *, (, s, *, sin, +, c, *, scaledX, *, cos, ), ;, }, }, if, (]
[*, sin, +, c, *, scaledX, *, cos, ), ;, }, }, if, (, normalized, ), {, double, scale, =]
[*, sin, +, c, *, scaledX, *, cos, ), ;, }, }, if, (, normalized, ), {, double, scale, =]
[;, }, }, if, (, normalized, ), {, double, scale, =, FastMath, ., PI, ;, for, (, int, i, =]
[}, if, (, normalized, ), {, double, scale, =, FastMath, ., PI, ;, for, (, int, i, =, 1, ;]
[}, if, (, normalized, ), {, double, scale, =, FastMath, ., PI, ;, for, (, int, i, =, 1, ;]
[(, normalized, ), {, double, scale, =, FastMath, ., PI, ;, for, (, int, i, =, 1, ;, i, <]
[(, normalized, ), {, double, scale, =, FastMath, ., PI, ;, for, (, int, i, =, 1, ;, i, <]
[double, scale, =, FastMath, ., PI, ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[scale, =, FastMath, ., PI, ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, ++]
[., PI, ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, ++, i, ), {]
[., PI, ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, ++, i, ), {, f, []
[int, i, =, 1, ;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], *=]
[=, 1, ;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], *=, scale, ;]
[;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], *=, scale, ;, scale, *=]
[;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], *=, scale, ;, scale, *=]
[++, i, ), {, f, [, i, ], *=, scale, ;, scale, *=, FastMath, ., PI, ;, }, }, return]
[++, i, ), {, f, [, i, ], *=, scale, ;, scale, *=, FastMath, ., PI, ;, }, }, return]
[f, [, i, ], *=, scale, ;, scale, *=, FastMath, ., PI, ;, }, }, return, t, ., compose, (]
