[math3, ., util, ., Precision, ;, @, Deprecated, public, class, SimplexSolver, extends, AbstractLinearOptimizer, {, private, static, final, double, DEFAULT_EPSILON, =]
[public, class, SimplexSolver, extends, AbstractLinearOptimizer, {, private, static, final, double, DEFAULT_EPSILON, =, 1.0e-6, ;, private, static, final, int, DEFAULT_ULPS, =]
[=, 10, ;, private, final, double, epsilon, ;, private, final, int, maxUlps, ;, public, SimplexSolver, (, ), {, this, (]
[;, private, final, double, epsilon, ;, private, final, int, maxUlps, ;, public, SimplexSolver, (, ), {, this, (, DEFAULT_EPSILON, ,]
[this, (, DEFAULT_EPSILON, ,, DEFAULT_ULPS, ), ;, }, public, SimplexSolver, (, final, double, epsilon, ,, final, int, maxUlps, ), {]
[this, (, DEFAULT_EPSILON, ,, DEFAULT_ULPS, ), ;, }, public, SimplexSolver, (, final, double, epsilon, ,, final, int, maxUlps, ), {]
[DEFAULT_ULPS, ), ;, }, public, SimplexSolver, (, final, double, epsilon, ,, final, int, maxUlps, ), {, this, ., epsilon, =]
[;, }, public, SimplexSolver, (, final, double, epsilon, ,, final, int, maxUlps, ), {, this, ., epsilon, =, epsilon, ;]
[;, }, public, SimplexSolver, (, final, double, epsilon, ,, final, int, maxUlps, ), {, this, ., epsilon, =, epsilon, ;]
[(, final, double, epsilon, ,, final, int, maxUlps, ), {, this, ., epsilon, =, epsilon, ;, this, ., maxUlps, =]
[epsilon, ;, this, ., maxUlps, =, maxUlps, ;, }, private, Integer, getPivotColumn, (, SimplexTableau, tableau, ), {, double, minValue, =]
[=, maxUlps, ;, }, private, Integer, getPivotColumn, (, SimplexTableau, tableau, ), {, double, minValue, =, 0, ;, Integer, minPos, =]
[(, SimplexTableau, tableau, ), {, double, minValue, =, 0, ;, Integer, minPos, =, null, ;, for, (, int, i, =]
[(, SimplexTableau, tableau, ), {, double, minValue, =, 0, ;, Integer, minPos, =, null, ;, for, (, int, i, =]
[minValue, =, 0, ;, Integer, minPos, =, null, ;, for, (, int, i, =, tableau, ., getNumObjectiveFunctions, (, ), ;]
[minValue, =, 0, ;, Integer, minPos, =, null, ;, for, (, int, i, =, tableau, ., getNumObjectiveFunctions, (, ), ;]
[0, ;, Integer, minPos, =, null, ;, for, (, int, i, =, tableau, ., getNumObjectiveFunctions, (, ), ;, i, <]
[0, ;, Integer, minPos, =, null, ;, for, (, int, i, =, tableau, ., getNumObjectiveFunctions, (, ), ;, i, <]
[0, ;, Integer, minPos, =, null, ;, for, (, int, i, =, tableau, ., getNumObjectiveFunctions, (, ), ;, i, <]
[;, for, (, int, i, =, tableau, ., getNumObjectiveFunctions, (, ), ;, i, <, tableau, ., getWidth, (, ), -]
[(, int, i, =, tableau, ., getNumObjectiveFunctions, (, ), ;, i, <, tableau, ., getWidth, (, ), -, 1, ;]
[(, int, i, =, tableau, ., getNumObjectiveFunctions, (, ), ;, i, <, tableau, ., getWidth, (, ), -, 1, ;]
[), ;, i, <, tableau, ., getWidth, (, ), -, 1, ;, i, ++, ), {, final, double, entry, =]
[), ;, i, <, tableau, ., getWidth, (, ), -, 1, ;, i, ++, ), {, final, double, entry, =]
[tableau, ., getWidth, (, ), -, 1, ;, i, ++, ), {, final, double, entry, =, tableau, ., getEntry, (]
[getWidth, (, ), -, 1, ;, i, ++, ), {, final, double, entry, =, tableau, ., getEntry, (, 0, ,]
[;, i, ++, ), {, final, double, entry, =, tableau, ., getEntry, (, 0, ,, i, ), ;, if, (]
[;, i, ++, ), {, final, double, entry, =, tableau, ., getEntry, (, 0, ,, i, ), ;, if, (]
[++, ), {, final, double, entry, =, tableau, ., getEntry, (, 0, ,, i, ), ;, if, (, entry, <]
[final, double, entry, =, tableau, ., getEntry, (, 0, ,, i, ), ;, if, (, entry, <, minValue, ), {]
[entry, =, tableau, ., getEntry, (, 0, ,, i, ), ;, if, (, entry, <, minValue, ), {, minValue, =]
[tableau, ., getEntry, (, 0, ,, i, ), ;, if, (, entry, <, minValue, ), {, minValue, =, entry, ;]
[getEntry, (, 0, ,, i, ), ;, if, (, entry, <, minValue, ), {, minValue, =, entry, ;, minPos, =]
[), ;, if, (, entry, <, minValue, ), {, minValue, =, entry, ;, minPos, =, i, ;, }, }, return]
[;, }, private, Integer, getPivotRow, (, SimplexTableau, tableau, ,, final, int, col, ), {, List, <, Integer, >, minRatioPositions, =]
[col, ), {, List, <, Integer, >, minRatioPositions, =, new, ArrayList, <, Integer, >, (, ), ;, double, minRatio, =]
[col, ), {, List, <, Integer, >, minRatioPositions, =, new, ArrayList, <, Integer, >, (, ), ;, double, minRatio, =]
[new, ArrayList, <, Integer, >, (, ), ;, double, minRatio, =, Double, ., MAX_VALUE, ;, for, (, int, i, =]
[new, ArrayList, <, Integer, >, (, ), ;, double, minRatio, =, Double, ., MAX_VALUE, ;, for, (, int, i, =]
[), ;, double, minRatio, =, Double, ., MAX_VALUE, ;, for, (, int, i, =, tableau, ., getNumObjectiveFunctions, (, ), ;]
[), ;, double, minRatio, =, Double, ., MAX_VALUE, ;, for, (, int, i, =, tableau, ., getNumObjectiveFunctions, (, ), ;]
[double, minRatio, =, Double, ., MAX_VALUE, ;, for, (, int, i, =, tableau, ., getNumObjectiveFunctions, (, ), ;, i, <]
[double, minRatio, =, Double, ., MAX_VALUE, ;, for, (, int, i, =, tableau, ., getNumObjectiveFunctions, (, ), ;, i, <]
[;, for, (, int, i, =, tableau, ., getNumObjectiveFunctions, (, ), ;, i, <, tableau, ., getHeight, (, ), ;]
[;, for, (, int, i, =, tableau, ., getNumObjectiveFunctions, (, ), ;, i, <, tableau, ., getHeight, (, ), ;]
[getNumObjectiveFunctions, (, ), ;, i, <, tableau, ., getHeight, (, ), ;, i, ++, ), {, final, double, rhs, =]
[getNumObjectiveFunctions, (, ), ;, i, <, tableau, ., getHeight, (, ), ;, i, ++, ), {, final, double, rhs, =]
[i, <, tableau, ., getHeight, (, ), ;, i, ++, ), {, final, double, rhs, =, tableau, ., getEntry, (]
[tableau, ., getHeight, (, ), ;, i, ++, ), {, final, double, rhs, =, tableau, ., getEntry, (, i, ,]
[tableau, ., getHeight, (, ), ;, i, ++, ), {, final, double, rhs, =, tableau, ., getEntry, (, i, ,]
[tableau, ., getHeight, (, ), ;, i, ++, ), {, final, double, rhs, =, tableau, ., getEntry, (, i, ,]
[i, ++, ), {, final, double, rhs, =, tableau, ., getEntry, (, i, ,, tableau, ., getWidth, (, ), -]
[=, tableau, ., getEntry, (, i, ,, tableau, ., getWidth, (, ), -, 1, ), ;, final, double, entry, =]
[=, tableau, ., getEntry, (, i, ,, tableau, ., getWidth, (, ), -, 1, ), ;, final, double, entry, =]
[(, i, ,, tableau, ., getWidth, (, ), -, 1, ), ;, final, double, entry, =, tableau, ., getEntry, (]
[,, tableau, ., getWidth, (, ), -, 1, ), ;, final, double, entry, =, tableau, ., getEntry, (, i, ,]
[), -, 1, ), ;, final, double, entry, =, tableau, ., getEntry, (, i, ,, col, ), ;, if, (]
[), -, 1, ), ;, final, double, entry, =, tableau, ., getEntry, (, i, ,, col, ), ;, if, (]
[), -, 1, ), ;, final, double, entry, =, tableau, ., getEntry, (, i, ,, col, ), ;, if, (]
[;, final, double, entry, =, tableau, ., getEntry, (, i, ,, col, ), ;, if, (, Precision, ., compareTo, (]
[double, entry, =, tableau, ., getEntry, (, i, ,, col, ), ;, if, (, Precision, ., compareTo, (, entry, ,]
[=, tableau, ., getEntry, (, i, ,, col, ), ;, if, (, Precision, ., compareTo, (, entry, ,, 0d, ,]
[getEntry, (, i, ,, col, ), ;, if, (, Precision, ., compareTo, (, entry, ,, 0d, ,, maxUlps, ), >]
[if, (, Precision, ., compareTo, (, entry, ,, 0d, ,, maxUlps, ), >, 0, ), {, final, double, ratio, =]
[if, (, Precision, ., compareTo, (, entry, ,, 0d, ,, maxUlps, ), >, 0, ), {, final, double, ratio, =]
[Precision, ., compareTo, (, entry, ,, 0d, ,, maxUlps, ), >, 0, ), {, final, double, ratio, =, rhs, /]
[0d, ,, maxUlps, ), >, 0, ), {, final, double, ratio, =, rhs, /, entry, ;, final, int, cmp, =]
[0d, ,, maxUlps, ), >, 0, ), {, final, double, ratio, =, rhs, /, entry, ;, final, int, cmp, =]
[>, 0, ), {, final, double, ratio, =, rhs, /, entry, ;, final, int, cmp, =, Double, ., compare, (]
[), {, final, double, ratio, =, rhs, /, entry, ;, final, int, cmp, =, Double, ., compare, (, ratio, ,]
[=, rhs, /, entry, ;, final, int, cmp, =, Double, ., compare, (, ratio, ,, minRatio, ), ;, if, (]
[=, rhs, /, entry, ;, final, int, cmp, =, Double, ., compare, (, ratio, ,, minRatio, ), ;, if, (]
[/, entry, ;, final, int, cmp, =, Double, ., compare, (, ratio, ,, minRatio, ), ;, if, (, cmp, ==]
[final, int, cmp, =, Double, ., compare, (, ratio, ,, minRatio, ), ;, if, (, cmp, ==, 0, ), {]
[final, int, cmp, =, Double, ., compare, (, ratio, ,, minRatio, ), ;, if, (, cmp, ==, 0, ), {]
[Double, ., compare, (, ratio, ,, minRatio, ), ;, if, (, cmp, ==, 0, ), {, minRatioPositions, ., add, (]
[), ;, if, (, cmp, ==, 0, ), {, minRatioPositions, ., add, (, i, ), ;, }, else, if, (]
[), ;, if, (, cmp, ==, 0, ), {, minRatioPositions, ., add, (, i, ), ;, }, else, if, (]
[if, (, cmp, ==, 0, ), {, minRatioPositions, ., add, (, i, ), ;, }, else, if, (, cmp, <]
[==, 0, ), {, minRatioPositions, ., add, (, i, ), ;, }, else, if, (, cmp, <, 0, ), {]
[), {, minRatioPositions, ., add, (, i, ), ;, }, else, if, (, cmp, <, 0, ), {, minRatio, =]
[minRatioPositions, ., add, (, i, ), ;, }, else, if, (, cmp, <, 0, ), {, minRatio, =, ratio, ;]
[add, (, i, ), ;, }, else, if, (, cmp, <, 0, ), {, minRatio, =, ratio, ;, minRatioPositions, =]
[(, cmp, <, 0, ), {, minRatio, =, ratio, ;, minRatioPositions, =, new, ArrayList, <, Integer, >, (, ), ;]
[(, cmp, <, 0, ), {, minRatio, =, ratio, ;, minRatioPositions, =, new, ArrayList, <, Integer, >, (, ), ;]
[), {, minRatio, =, ratio, ;, minRatioPositions, =, new, ArrayList, <, Integer, >, (, ), ;, minRatioPositions, ., add, (]
[new, ArrayList, <, Integer, >, (, ), ;, minRatioPositions, ., add, (, i, ), ;, }, }, }, if, (]
[new, ArrayList, <, Integer, >, (, ), ;, minRatioPositions, ., add, (, i, ), ;, }, }, }, if, (]
[new, ArrayList, <, Integer, >, (, ), ;, minRatioPositions, ., add, (, i, ), ;, }, }, }, if, (]
[), ;, minRatioPositions, ., add, (, i, ), ;, }, }, }, if, (, minRatioPositions, ., size, (, ), ==]
[add, (, i, ), ;, }, }, }, if, (, minRatioPositions, ., size, (, ), ==, 0, ), {, return]
[}, }, if, (, minRatioPositions, ., size, (, ), ==, 0, ), {, return, null, ;, }, else, if, (]
[}, }, if, (, minRatioPositions, ., size, (, ), ==, 0, ), {, return, null, ;, }, else, if, (]
[}, }, if, (, minRatioPositions, ., size, (, ), ==, 0, ), {, return, null, ;, }, else, if, (]
[size, (, ), ==, 0, ), {, return, null, ;, }, else, if, (, minRatioPositions, ., size, (, ), >]
[), {, return, null, ;, }, else, if, (, minRatioPositions, ., size, (, ), >, 1, ), {, if, (]
[), {, return, null, ;, }, else, if, (, minRatioPositions, ., size, (, ), >, 1, ), {, if, (]
[), {, return, null, ;, }, else, if, (, minRatioPositions, ., size, (, ), >, 1, ), {, if, (]
[else, if, (, minRatioPositions, ., size, (, ), >, 1, ), {, if, (, tableau, ., getNumArtificialVariables, (, ), >]
[>, 1, ), {, if, (, tableau, ., getNumArtificialVariables, (, ), >, 0, ), {, for, (, Integer, row, :]
[getNumArtificialVariables, (, ), >, 0, ), {, for, (, Integer, row, :, minRatioPositions, ), {, for, (, int, i, =]
[), >, 0, ), {, for, (, Integer, row, :, minRatioPositions, ), {, for, (, int, i, =, 0, ;]
[), >, 0, ), {, for, (, Integer, row, :, minRatioPositions, ), {, for, (, int, i, =, 0, ;]
[0, ), {, for, (, Integer, row, :, minRatioPositions, ), {, for, (, int, i, =, 0, ;, i, <]
[0, ), {, for, (, Integer, row, :, minRatioPositions, ), {, for, (, int, i, =, 0, ;, i, <]
[row, :, minRatioPositions, ), {, for, (, int, i, =, 0, ;, i, <, tableau, ., getNumArtificialVariables, (, ), ;]
[row, :, minRatioPositions, ), {, for, (, int, i, =, 0, ;, i, <, tableau, ., getNumArtificialVariables, (, ), ;]
[int, i, =, 0, ;, i, <, tableau, ., getNumArtificialVariables, (, ), ;, i, ++, ), {, int, column, =]
[int, i, =, 0, ;, i, <, tableau, ., getNumArtificialVariables, (, ), ;, i, ++, ), {, int, column, =]
[=, 0, ;, i, <, tableau, ., getNumArtificialVariables, (, ), ;, i, ++, ), {, int, column, =, i, +]
[=, 0, ;, i, <, tableau, ., getNumArtificialVariables, (, ), ;, i, ++, ), {, int, column, =, i, +]
[;, i, ++, ), {, int, column, =, i, +, tableau, ., getArtificialVariableOffset, (, ), ;, final, double, entry, =]
[;, i, ++, ), {, int, column, =, i, +, tableau, ., getArtificialVariableOffset, (, ), ;, final, double, entry, =]
[{, int, column, =, i, +, tableau, ., getArtificialVariableOffset, (, ), ;, final, double, entry, =, tableau, ., getEntry, (]
[column, =, i, +, tableau, ., getArtificialVariableOffset, (, ), ;, final, double, entry, =, tableau, ., getEntry, (, row, ,]
[., getArtificialVariableOffset, (, ), ;, final, double, entry, =, tableau, ., getEntry, (, row, ,, column, ), ;, if, (]
[., getArtificialVariableOffset, (, ), ;, final, double, entry, =, tableau, ., getEntry, (, row, ,, column, ), ;, if, (]
[., getArtificialVariableOffset, (, ), ;, final, double, entry, =, tableau, ., getEntry, (, row, ,, column, ), ;, if, (]
[;, final, double, entry, =, tableau, ., getEntry, (, row, ,, column, ), ;, if, (, Precision, ., equals, (]
[double, entry, =, tableau, ., getEntry, (, row, ,, column, ), ;, if, (, Precision, ., equals, (, entry, ,]
[=, tableau, ., getEntry, (, row, ,, column, ), ;, if, (, Precision, ., equals, (, entry, ,, 1d, ,]
[getEntry, (, row, ,, column, ), ;, if, (, Precision, ., equals, (, entry, ,, 1d, ,, maxUlps, ), &&]
[getEntry, (, row, ,, column, ), ;, if, (, Precision, ., equals, (, entry, ,, 1d, ,, maxUlps, ), &&]
[column, ), ;, if, (, Precision, ., equals, (, entry, ,, 1d, ,, maxUlps, ), &&, row, ., equals, (]
[column, ), ;, if, (, Precision, ., equals, (, entry, ,, 1d, ,, maxUlps, ), &&, row, ., equals, (]
[(, Precision, ., equals, (, entry, ,, 1d, ,, maxUlps, ), &&, row, ., equals, (, tableau, ., getBasicRow, (]
[,, 1d, ,, maxUlps, ), &&, row, ., equals, (, tableau, ., getBasicRow, (, column, ), ), ), {, return]
[equals, (, tableau, ., getBasicRow, (, column, ), ), ), {, return, row, ;, }, }, }, }, if, (]
[equals, (, tableau, ., getBasicRow, (, column, ), ), ), {, return, row, ;, }, }, }, }, if, (]
[getBasicRow, (, column, ), ), ), {, return, row, ;, }, }, }, }, if, (, getIterations, (, ), <]
[getBasicRow, (, column, ), ), ), {, return, row, ;, }, }, }, }, if, (, getIterations, (, ), <]
[), ), {, return, row, ;, }, }, }, }, if, (, getIterations, (, ), <, getMaxIterations, (, ), /]
[}, }, }, }, if, (, getIterations, (, ), <, getMaxIterations, (, ), /, 2, ), {, Integer, minRow, =]
[(, getIterations, (, ), <, getMaxIterations, (, ), /, 2, ), {, Integer, minRow, =, null, ;, int, minIndex, =]
[(, getIterations, (, ), <, getMaxIterations, (, ), /, 2, ), {, Integer, minRow, =, null, ;, int, minIndex, =]
[), {, Integer, minRow, =, null, ;, int, minIndex, =, tableau, ., getWidth, (, ), ;, final, int, varStart, =]
[), {, Integer, minRow, =, null, ;, int, minIndex, =, tableau, ., getWidth, (, ), ;, final, int, varStart, =]
[tableau, ., getWidth, (, ), ;, final, int, varStart, =, tableau, ., getNumObjectiveFunctions, (, ), ;, final, int, varEnd, =]
[tableau, ., getWidth, (, ), ;, final, int, varStart, =, tableau, ., getNumObjectiveFunctions, (, ), ;, final, int, varEnd, =]
[tableau, ., getWidth, (, ), ;, final, int, varStart, =, tableau, ., getNumObjectiveFunctions, (, ), ;, final, int, varEnd, =]
[final, int, varStart, =, tableau, ., getNumObjectiveFunctions, (, ), ;, final, int, varEnd, =, tableau, ., getWidth, (, ), -]
[(, ), ;, final, int, varEnd, =, tableau, ., getWidth, (, ), -, 1, ;, for, (, Integer, row, :]
[., getWidth, (, ), -, 1, ;, for, (, Integer, row, :, minRatioPositions, ), {, for, (, int, i, =]
[(, ), -, 1, ;, for, (, Integer, row, :, minRatioPositions, ), {, for, (, int, i, =, varStart, ;]
[(, ), -, 1, ;, for, (, Integer, row, :, minRatioPositions, ), {, for, (, int, i, =, varStart, ;]
[(, ), -, 1, ;, for, (, Integer, row, :, minRatioPositions, ), {, for, (, int, i, =, varStart, ;]
[-, 1, ;, for, (, Integer, row, :, minRatioPositions, ), {, for, (, int, i, =, varStart, ;, i, <]
[;, for, (, Integer, row, :, minRatioPositions, ), {, for, (, int, i, =, varStart, ;, i, <, varEnd, &&]
[for, (, Integer, row, :, minRatioPositions, ), {, for, (, int, i, =, varStart, ;, i, <, varEnd, &&, !]
[for, (, Integer, row, :, minRatioPositions, ), {, for, (, int, i, =, varStart, ;, i, <, varEnd, &&, !]
[:, minRatioPositions, ), {, for, (, int, i, =, varStart, ;, i, <, varEnd, &&, !, row, ., equals, (]
[{, for, (, int, i, =, varStart, ;, i, <, varEnd, &&, !, row, ., equals, (, minRow, ), ;]
[{, for, (, int, i, =, varStart, ;, i, <, varEnd, &&, !, row, ., equals, (, minRow, ), ;]
[i, <, varEnd, &&, !, row, ., equals, (, minRow, ), ;, i, ++, ), {, final, Integer, basicRow, =]
[i, <, varEnd, &&, !, row, ., equals, (, minRow, ), ;, i, ++, ), {, final, Integer, basicRow, =]
[!, row, ., equals, (, minRow, ), ;, i, ++, ), {, final, Integer, basicRow, =, tableau, ., getBasicRow, (]
[minRow, ), ;, i, ++, ), {, final, Integer, basicRow, =, tableau, ., getBasicRow, (, i, ), ;, if, (]
[minRow, ), ;, i, ++, ), {, final, Integer, basicRow, =, tableau, ., getBasicRow, (, i, ), ;, if, (]
[minRow, ), ;, i, ++, ), {, final, Integer, basicRow, =, tableau, ., getBasicRow, (, i, ), ;, if, (]
[minRow, ), ;, i, ++, ), {, final, Integer, basicRow, =, tableau, ., getBasicRow, (, i, ), ;, if, (]
[;, i, ++, ), {, final, Integer, basicRow, =, tableau, ., getBasicRow, (, i, ), ;, if, (, basicRow, !=]
[++, ), {, final, Integer, basicRow, =, tableau, ., getBasicRow, (, i, ), ;, if, (, basicRow, !=, null, &&]
[++, ), {, final, Integer, basicRow, =, tableau, ., getBasicRow, (, i, ), ;, if, (, basicRow, !=, null, &&]
[Integer, basicRow, =, tableau, ., getBasicRow, (, i, ), ;, if, (, basicRow, !=, null, &&, basicRow, ., equals, (]
[tableau, ., getBasicRow, (, i, ), ;, if, (, basicRow, !=, null, &&, basicRow, ., equals, (, row, ), &&]
[tableau, ., getBasicRow, (, i, ), ;, if, (, basicRow, !=, null, &&, basicRow, ., equals, (, row, ), &&]
[getBasicRow, (, i, ), ;, if, (, basicRow, !=, null, &&, basicRow, ., equals, (, row, ), &&, i, <]
[), ;, if, (, basicRow, !=, null, &&, basicRow, ., equals, (, row, ), &&, i, <, minIndex, ), {]
[if, (, basicRow, !=, null, &&, basicRow, ., equals, (, row, ), &&, i, <, minIndex, ), {, minIndex, =]
[basicRow, !=, null, &&, basicRow, ., equals, (, row, ), &&, i, <, minIndex, ), {, minIndex, =, i, ;]
[null, &&, basicRow, ., equals, (, row, ), &&, i, <, minIndex, ), {, minIndex, =, i, ;, minRow, =]
[row, ), &&, i, <, minIndex, ), {, minIndex, =, i, ;, minRow, =, row, ;, }, }, }, return]
[minIndex, ), {, minIndex, =, i, ;, minRow, =, row, ;, }, }, }, return, minRow, ;, }, }, return]
[minIndex, ), {, minIndex, =, i, ;, minRow, =, row, ;, }, }, }, return, minRow, ;, }, }, return]
[=, i, ;, minRow, =, row, ;, }, }, }, return, minRow, ;, }, }, return, minRatioPositions, ., get, (]
[., get, (, 0, ), ;, }, protected, void, doIteration, (, final, SimplexTableau, tableau, ), throws, MaxCountExceededException, ,, UnboundedSolutionException, {]
[protected, void, doIteration, (, final, SimplexTableau, tableau, ), throws, MaxCountExceededException, ,, UnboundedSolutionException, {, incrementIterationsCounter, (, ), ;, Integer, pivotCol, =]
[doIteration, (, final, SimplexTableau, tableau, ), throws, MaxCountExceededException, ,, UnboundedSolutionException, {, incrementIterationsCounter, (, ), ;, Integer, pivotCol, =, getPivotColumn, (]
[throws, MaxCountExceededException, ,, UnboundedSolutionException, {, incrementIterationsCounter, (, ), ;, Integer, pivotCol, =, getPivotColumn, (, tableau, ), ;, Integer, pivotRow, =]
[,, UnboundedSolutionException, {, incrementIterationsCounter, (, ), ;, Integer, pivotCol, =, getPivotColumn, (, tableau, ), ;, Integer, pivotRow, =, getPivotRow, (]
[{, incrementIterationsCounter, (, ), ;, Integer, pivotCol, =, getPivotColumn, (, tableau, ), ;, Integer, pivotRow, =, getPivotRow, (, tableau, ,]
[Integer, pivotCol, =, getPivotColumn, (, tableau, ), ;, Integer, pivotRow, =, getPivotRow, (, tableau, ,, pivotCol, ), ;, if, (]
[Integer, pivotCol, =, getPivotColumn, (, tableau, ), ;, Integer, pivotRow, =, getPivotRow, (, tableau, ,, pivotCol, ), ;, if, (]
[=, getPivotColumn, (, tableau, ), ;, Integer, pivotRow, =, getPivotRow, (, tableau, ,, pivotCol, ), ;, if, (, pivotRow, ==]
[), ;, Integer, pivotRow, =, getPivotRow, (, tableau, ,, pivotCol, ), ;, if, (, pivotRow, ==, null, ), {, throw]
[pivotCol, ), ;, if, (, pivotRow, ==, null, ), {, throw, new, UnboundedSolutionException, (, ), ;, }, double, pivotVal, =]
[pivotCol, ), ;, if, (, pivotRow, ==, null, ), {, throw, new, UnboundedSolutionException, (, ), ;, }, double, pivotVal, =]
[(, pivotRow, ==, null, ), {, throw, new, UnboundedSolutionException, (, ), ;, }, double, pivotVal, =, tableau, ., getEntry, (]
[==, null, ), {, throw, new, UnboundedSolutionException, (, ), ;, }, double, pivotVal, =, tableau, ., getEntry, (, pivotRow, ,]
[{, throw, new, UnboundedSolutionException, (, ), ;, }, double, pivotVal, =, tableau, ., getEntry, (, pivotRow, ,, pivotCol, ), ;]
[{, throw, new, UnboundedSolutionException, (, ), ;, }, double, pivotVal, =, tableau, ., getEntry, (, pivotRow, ,, pivotCol, ), ;]
[(, ), ;, }, double, pivotVal, =, tableau, ., getEntry, (, pivotRow, ,, pivotCol, ), ;, tableau, ., divideRow, (]
[;, }, double, pivotVal, =, tableau, ., getEntry, (, pivotRow, ,, pivotCol, ), ;, tableau, ., divideRow, (, pivotRow, ,]
[(, pivotRow, ,, pivotCol, ), ;, tableau, ., divideRow, (, pivotRow, ,, pivotVal, ), ;, for, (, int, i, =]
[,, pivotCol, ), ;, tableau, ., divideRow, (, pivotRow, ,, pivotVal, ), ;, for, (, int, i, =, 0, ;]
[,, pivotCol, ), ;, tableau, ., divideRow, (, pivotRow, ,, pivotVal, ), ;, for, (, int, i, =, 0, ;]
[), ;, tableau, ., divideRow, (, pivotRow, ,, pivotVal, ), ;, for, (, int, i, =, 0, ;, i, <]
[), ;, tableau, ., divideRow, (, pivotRow, ,, pivotVal, ), ;, for, (, int, i, =, 0, ;, i, <]
[pivotRow, ,, pivotVal, ), ;, for, (, int, i, =, 0, ;, i, <, tableau, ., getHeight, (, ), ;]
[pivotRow, ,, pivotVal, ), ;, for, (, int, i, =, 0, ;, i, <, tableau, ., getHeight, (, ), ;]
[(, int, i, =, 0, ;, i, <, tableau, ., getHeight, (, ), ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, tableau, ., getHeight, (, ), ;, i, ++, ), {, if, (]
[i, =, 0, ;, i, <, tableau, ., getHeight, (, ), ;, i, ++, ), {, if, (, i, !=]
[., getHeight, (, ), ;, i, ++, ), {, if, (, i, !=, pivotRow, ), {, final, double, multiplier, =]
[., getHeight, (, ), ;, i, ++, ), {, if, (, i, !=, pivotRow, ), {, final, double, multiplier, =]
[;, i, ++, ), {, if, (, i, !=, pivotRow, ), {, final, double, multiplier, =, tableau, ., getEntry, (]
[++, ), {, if, (, i, !=, pivotRow, ), {, final, double, multiplier, =, tableau, ., getEntry, (, i, ,]
[if, (, i, !=, pivotRow, ), {, final, double, multiplier, =, tableau, ., getEntry, (, i, ,, pivotCol, ), ;]
[if, (, i, !=, pivotRow, ), {, final, double, multiplier, =, tableau, ., getEntry, (, i, ,, pivotCol, ), ;]
[pivotRow, ), {, final, double, multiplier, =, tableau, ., getEntry, (, i, ,, pivotCol, ), ;, tableau, ., subtractRow, (]
[{, final, double, multiplier, =, tableau, ., getEntry, (, i, ,, pivotCol, ), ;, tableau, ., subtractRow, (, i, ,]
[double, multiplier, =, tableau, ., getEntry, (, i, ,, pivotCol, ), ;, tableau, ., subtractRow, (, i, ,, pivotRow, ,]
[}, }, }, protected, void, solvePhase1, (, final, SimplexTableau, tableau, ), throws, MaxCountExceededException, ,, UnboundedSolutionException, ,, NoFeasibleSolutionException, {, if, (]
[}, }, }, protected, void, solvePhase1, (, final, SimplexTableau, tableau, ), throws, MaxCountExceededException, ,, UnboundedSolutionException, ,, NoFeasibleSolutionException, {, if, (]
[}, }, }, protected, void, solvePhase1, (, final, SimplexTableau, tableau, ), throws, MaxCountExceededException, ,, UnboundedSolutionException, ,, NoFeasibleSolutionException, {, if, (]
[(, final, SimplexTableau, tableau, ), throws, MaxCountExceededException, ,, UnboundedSolutionException, ,, NoFeasibleSolutionException, {, if, (, tableau, ., getNumArtificialVariables, (, ), ==]
[UnboundedSolutionException, ,, NoFeasibleSolutionException, {, if, (, tableau, ., getNumArtificialVariables, (, ), ==, 0, ), {, return, ;, }, while, (]
[,, NoFeasibleSolutionException, {, if, (, tableau, ., getNumArtificialVariables, (, ), ==, 0, ), {, return, ;, }, while, (, !]
[,, NoFeasibleSolutionException, {, if, (, tableau, ., getNumArtificialVariables, (, ), ==, 0, ), {, return, ;, }, while, (, !]
[getNumArtificialVariables, (, ), ==, 0, ), {, return, ;, }, while, (, !, tableau, ., isOptimal, (, ), ), {]
[), ==, 0, ), {, return, ;, }, while, (, !, tableau, ., isOptimal, (, ), ), {, doIteration, (]
[;, }, while, (, !, tableau, ., isOptimal, (, ), ), {, doIteration, (, tableau, ), ;, }, if, (]
[}, while, (, !, tableau, ., isOptimal, (, ), ), {, doIteration, (, tableau, ), ;, }, if, (, !]
[}, while, (, !, tableau, ., isOptimal, (, ), ), {, doIteration, (, tableau, ), ;, }, if, (, !]
[tableau, ., isOptimal, (, ), ), {, doIteration, (, tableau, ), ;, }, if, (, !, Precision, ., equals, (]
[tableau, ., isOptimal, (, ), ), {, doIteration, (, tableau, ), ;, }, if, (, !, Precision, ., equals, (]
[), ), {, doIteration, (, tableau, ), ;, }, if, (, !, Precision, ., equals, (, tableau, ., getEntry, (]
[{, doIteration, (, tableau, ), ;, }, if, (, !, Precision, ., equals, (, tableau, ., getEntry, (, 0, ,]
[{, doIteration, (, tableau, ), ;, }, if, (, !, Precision, ., equals, (, tableau, ., getEntry, (, 0, ,]
[if, (, !, Precision, ., equals, (, tableau, ., getEntry, (, 0, ,, tableau, ., getRhsOffset, (, ), ), ,]
[!, Precision, ., equals, (, tableau, ., getEntry, (, 0, ,, tableau, ., getRhsOffset, (, ), ), ,, 0d, ,]
[tableau, ., getEntry, (, 0, ,, tableau, ., getRhsOffset, (, ), ), ,, 0d, ,, epsilon, ), ), {, throw]
[}, }, @, Override, public, PointValuePair, doOptimize, (, ), throws, MaxCountExceededException, ,, UnboundedSolutionException, ,, NoFeasibleSolutionException, {, final, SimplexTableau, tableau, =]
[Override, public, PointValuePair, doOptimize, (, ), throws, MaxCountExceededException, ,, UnboundedSolutionException, ,, NoFeasibleSolutionException, {, final, SimplexTableau, tableau, =, new, SimplexTableau, (]
[(, ), throws, MaxCountExceededException, ,, UnboundedSolutionException, ,, NoFeasibleSolutionException, {, final, SimplexTableau, tableau, =, new, SimplexTableau, (, getFunction, (, ), ,]
[,, UnboundedSolutionException, ,, NoFeasibleSolutionException, {, final, SimplexTableau, tableau, =, new, SimplexTableau, (, getFunction, (, ), ,, getConstraints, (, ), ,]
[{, final, SimplexTableau, tableau, =, new, SimplexTableau, (, getFunction, (, ), ,, getConstraints, (, ), ,, getGoalType, (, ), ,]
[=, new, SimplexTableau, (, getFunction, (, ), ,, getConstraints, (, ), ,, getGoalType, (, ), ,, restrictToNonNegative, (, ), ,]
[SimplexTableau, (, getFunction, (, ), ,, getConstraints, (, ), ,, getGoalType, (, ), ,, restrictToNonNegative, (, ), ,, epsilon, ,]
[(, ), ,, getConstraints, (, ), ,, getGoalType, (, ), ,, restrictToNonNegative, (, ), ,, epsilon, ,, maxUlps, ), ;]
[,, getConstraints, (, ), ,, getGoalType, (, ), ,, restrictToNonNegative, (, ), ,, epsilon, ,, maxUlps, ), ;, solvePhase1, (]
[), ,, getGoalType, (, ), ,, restrictToNonNegative, (, ), ,, epsilon, ,, maxUlps, ), ;, solvePhase1, (, tableau, ), ;]
[), ,, getGoalType, (, ), ,, restrictToNonNegative, (, ), ,, epsilon, ,, maxUlps, ), ;, solvePhase1, (, tableau, ), ;]
[), ,, epsilon, ,, maxUlps, ), ;, solvePhase1, (, tableau, ), ;, tableau, ., dropPhase1Objective, (, ), ;, while, (]
[,, epsilon, ,, maxUlps, ), ;, solvePhase1, (, tableau, ), ;, tableau, ., dropPhase1Objective, (, ), ;, while, (, !]
[,, epsilon, ,, maxUlps, ), ;, solvePhase1, (, tableau, ), ;, tableau, ., dropPhase1Objective, (, ), ;, while, (, !]
[(, tableau, ), ;, tableau, ., dropPhase1Objective, (, ), ;, while, (, !, tableau, ., isOptimal, (, ), ), {]
[), ;, tableau, ., dropPhase1Objective, (, ), ;, while, (, !, tableau, ., isOptimal, (, ), ), {, doIteration, (]
[(, ), ;, while, (, !, tableau, ., isOptimal, (, ), ), {, doIteration, (, tableau, ), ;, }, return]
[(, ), ;, while, (, !, tableau, ., isOptimal, (, ), ), {, doIteration, (, tableau, ), ;, }, return]
