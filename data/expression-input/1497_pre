[time, ., DateTimeFieldType, ;, import, org, ., joda, ., time, ., DurationField, ;, public, abstract, class, DecoratedDateTimeField, extends, BaseDateTimeField, {]
[;, import, org, ., joda, ., time, ., DurationField, ;, public, abstract, class, DecoratedDateTimeField, extends, BaseDateTimeField, {, @, SuppressWarnings, (]
[DurationField, ;, public, abstract, class, DecoratedDateTimeField, extends, BaseDateTimeField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long, serialVersionUID, =]
[=, 203115783733757597L, ;, private, final, DateTimeField, iField, ;, protected, DecoratedDateTimeField, (, DateTimeField, field, ,, DateTimeFieldType, type, ), {, super, (]
[DateTimeField, iField, ;, protected, DecoratedDateTimeField, (, DateTimeField, field, ,, DateTimeFieldType, type, ), {, super, (, type, ), ;, if, (]
[DateTimeField, iField, ;, protected, DecoratedDateTimeField, (, DateTimeField, field, ,, DateTimeFieldType, type, ), {, super, (, type, ), ;, if, (]
[;, protected, DecoratedDateTimeField, (, DateTimeField, field, ,, DateTimeFieldType, type, ), {, super, (, type, ), ;, if, (, field, ==]
[DateTimeField, field, ,, DateTimeFieldType, type, ), {, super, (, type, ), ;, if, (, field, ==, null, ), {, throw]
[DateTimeFieldType, type, ), {, super, (, type, ), ;, if, (, field, ==, null, ), {, throw, new, IllegalArgumentException, (]
[type, ), ;, if, (, field, ==, null, ), {, throw, new, IllegalArgumentException, (, "The field must not be null", ), ;, }, if, (]
[), ;, if, (, field, ==, null, ), {, throw, new, IllegalArgumentException, (, "The field must not be null", ), ;, }, if, (, !]
[), ;, if, (, field, ==, null, ), {, throw, new, IllegalArgumentException, (, "The field must not be null", ), ;, }, if, (, !]
[{, throw, new, IllegalArgumentException, (, "The field must not be null", ), ;, }, if, (, !, field, ., isSupported, (, ), ), {, throw]
[IllegalArgumentException, (, "The field must not be null", ), ;, }, if, (, !, field, ., isSupported, (, ), ), {, throw, new, IllegalArgumentException, (]
[;, }, if, (, !, field, ., isSupported, (, ), ), {, throw, new, IllegalArgumentException, (, "The field must be supported", ), ;, }]
[if, (, !, field, ., isSupported, (, ), ), {, throw, new, IllegalArgumentException, (, "The field must be supported", ), ;, }, iField, =]
[new, IllegalArgumentException, (, "The field must be supported", ), ;, }, iField, =, field, ;, }, public, final, DateTimeField, getWrappedField, (, ), {, return]
[;, }, public, final, DateTimeField, getWrappedField, (, ), {, return, iField, ;, }, public, boolean, isLenient, (, ), {, return]
[;, }, public, final, DateTimeField, getWrappedField, (, ), {, return, iField, ;, }, public, boolean, isLenient, (, ), {, return]
[(, ), {, return, iField, ., isLenient, (, ), ;, }, public, int, get, (, long, instant, ), {, return]
[(, ), {, return, iField, ., isLenient, (, ), ;, }, public, int, get, (, long, instant, ), {, return]
[iField, ., isLenient, (, ), ;, }, public, int, get, (, long, instant, ), {, return, iField, ., get, (]
[iField, ., get, (, instant, ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, return]
[iField, ., get, (, instant, ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, return]
[instant, ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, return, iField, ., set, (]
[;, }, public, long, set, (, long, instant, ,, int, value, ), {, return, iField, ., set, (, instant, ,]
[), {, return, iField, ., set, (, instant, ,, value, ), ;, }, public, DurationField, getDurationField, (, ), {, return]
[), {, return, iField, ., set, (, instant, ,, value, ), ;, }, public, DurationField, getDurationField, (, ), {, return]
[DurationField, getDurationField, (, ), {, return, iField, ., getDurationField, (, ), ;, }, public, DurationField, getRangeDurationField, (, ), {, return]
[DurationField, getDurationField, (, ), {, return, iField, ., getDurationField, (, ), ;, }, public, DurationField, getRangeDurationField, (, ), {, return]
[DurationField, getRangeDurationField, (, ), {, return, iField, ., getRangeDurationField, (, ), ;, }, public, int, getMinimumValue, (, ), {, return]
[DurationField, getRangeDurationField, (, ), {, return, iField, ., getRangeDurationField, (, ), ;, }, public, int, getMinimumValue, (, ), {, return]
[int, getMinimumValue, (, ), {, return, iField, ., getMinimumValue, (, ), ;, }, public, int, getMaximumValue, (, ), {, return]
[int, getMinimumValue, (, ), {, return, iField, ., getMinimumValue, (, ), ;, }, public, int, getMaximumValue, (, ), {, return]
[(, ), {, return, iField, ., getMaximumValue, (, ), ;, }, public, long, roundFloor, (, long, instant, ), {, return]
[(, ), {, return, iField, ., getMaximumValue, (, ), ;, }, public, long, roundFloor, (, long, instant, ), {, return]
[iField, ., getMaximumValue, (, ), ;, }, public, long, roundFloor, (, long, instant, ), {, return, iField, ., roundFloor, (]
