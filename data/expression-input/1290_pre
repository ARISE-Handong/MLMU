[math3, ., util, ., MathUtils, ;, public, class, SemiVariance, extends, AbstractUnivariateStatistic, implements, Serializable, {, public, static, final, Direction, UPSIDE_VARIANCE, =]
[math3, ., util, ., MathUtils, ;, public, class, SemiVariance, extends, AbstractUnivariateStatistic, implements, Serializable, {, public, static, final, Direction, UPSIDE_VARIANCE, =]
[AbstractUnivariateStatistic, implements, Serializable, {, public, static, final, Direction, UPSIDE_VARIANCE, =, Direction, ., UPSIDE, ;, public, static, final, Direction, DOWNSIDE_VARIANCE, =]
[AbstractUnivariateStatistic, implements, Serializable, {, public, static, final, Direction, UPSIDE_VARIANCE, =, Direction, ., UPSIDE, ;, public, static, final, Direction, DOWNSIDE_VARIANCE, =]
[Direction, ., UPSIDE, ;, public, static, final, Direction, DOWNSIDE_VARIANCE, =, Direction, ., DOWNSIDE, ;, private, static, final, long, serialVersionUID, =]
[., UPSIDE, ;, public, static, final, Direction, DOWNSIDE_VARIANCE, =, Direction, ., DOWNSIDE, ;, private, static, final, long, serialVersionUID, =, -]
[Direction, DOWNSIDE_VARIANCE, =, Direction, ., DOWNSIDE, ;, private, static, final, long, serialVersionUID, =, -, 2653430366886024994L, ;, private, boolean, biasCorrected, =]
[;, private, static, final, long, serialVersionUID, =, -, 2653430366886024994L, ;, private, boolean, biasCorrected, =, true, ;, private, Direction, varianceDirection, =]
[;, private, static, final, long, serialVersionUID, =, -, 2653430366886024994L, ;, private, boolean, biasCorrected, =, true, ;, private, Direction, varianceDirection, =]
[varianceDirection, =, Direction, ., DOWNSIDE, ;, public, SemiVariance, (, ), {, }, public, SemiVariance, (, final, boolean, biasCorrected, ), {]
[varianceDirection, =, Direction, ., DOWNSIDE, ;, public, SemiVariance, (, ), {, }, public, SemiVariance, (, final, boolean, biasCorrected, ), {]
[DOWNSIDE, ;, public, SemiVariance, (, ), {, }, public, SemiVariance, (, final, boolean, biasCorrected, ), {, this, ., biasCorrected, =]
[final, boolean, biasCorrected, ), {, this, ., biasCorrected, =, biasCorrected, ;, }, public, SemiVariance, (, final, Direction, direction, ), {]
[final, boolean, biasCorrected, ), {, this, ., biasCorrected, =, biasCorrected, ;, }, public, SemiVariance, (, final, Direction, direction, ), {]
[{, this, ., biasCorrected, =, biasCorrected, ;, }, public, SemiVariance, (, final, Direction, direction, ), {, this, ., varianceDirection, =]
[{, this, ., varianceDirection, =, direction, ;, }, public, SemiVariance, (, final, boolean, corrected, ,, final, Direction, direction, ), {]
[{, this, ., varianceDirection, =, direction, ;, }, public, SemiVariance, (, final, boolean, corrected, ,, final, Direction, direction, ), {]
[=, direction, ;, }, public, SemiVariance, (, final, boolean, corrected, ,, final, Direction, direction, ), {, this, ., biasCorrected, =]
[;, }, public, SemiVariance, (, final, boolean, corrected, ,, final, Direction, direction, ), {, this, ., biasCorrected, =, corrected, ;]
[;, }, public, SemiVariance, (, final, boolean, corrected, ,, final, Direction, direction, ), {, this, ., biasCorrected, =, corrected, ;]
[(, final, boolean, corrected, ,, final, Direction, direction, ), {, this, ., biasCorrected, =, corrected, ;, this, ., varianceDirection, =]
[=, corrected, ;, this, ., varianceDirection, =, direction, ;, }, public, SemiVariance, (, final, SemiVariance, original, ), throws, NullArgumentException, {]
[;, this, ., varianceDirection, =, direction, ;, }, public, SemiVariance, (, final, SemiVariance, original, ), throws, NullArgumentException, {, copy, (]
[., varianceDirection, =, direction, ;, }, public, SemiVariance, (, final, SemiVariance, original, ), throws, NullArgumentException, {, copy, (, original, ,]
[{, copy, (, original, ,, this, ), ;, }, @, Override, public, SemiVariance, copy, (, ), {, SemiVariance, result, =]
[this, ), ;, }, @, Override, public, SemiVariance, copy, (, ), {, SemiVariance, result, =, new, SemiVariance, (, ), ;]
[;, }, @, Override, public, SemiVariance, copy, (, ), {, SemiVariance, result, =, new, SemiVariance, (, ), ;, copy, (]
[@, Override, public, SemiVariance, copy, (, ), {, SemiVariance, result, =, new, SemiVariance, (, ), ;, copy, (, this, ,]
[copy, (, ), {, SemiVariance, result, =, new, SemiVariance, (, ), ;, copy, (, this, ,, result, ), ;, return]
[;, return, result, ;, }, public, static, void, copy, (, final, SemiVariance, source, ,, SemiVariance, dest, ), throws, NullArgumentException, {]
[;, return, result, ;, }, public, static, void, copy, (, final, SemiVariance, source, ,, SemiVariance, dest, ), throws, NullArgumentException, {]
[}, public, static, void, copy, (, final, SemiVariance, source, ,, SemiVariance, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[void, copy, (, final, SemiVariance, source, ,, SemiVariance, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;]
[void, copy, (, final, SemiVariance, source, ,, SemiVariance, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;]
[SemiVariance, source, ,, SemiVariance, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (]
[SemiVariance, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;]
[SemiVariance, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;]
[NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (]
[NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (]
[), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;]
[), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;]
[checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., biasCorrected, =]
[checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., biasCorrected, =]
[;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., biasCorrected, =, source, ., biasCorrected, ;]
[;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., biasCorrected, =, source, ., biasCorrected, ;]
[(, source, ., getDataRef, (, ), ), ;, dest, ., biasCorrected, =, source, ., biasCorrected, ;, dest, ., varianceDirection, =]
[(, source, ., getDataRef, (, ), ), ;, dest, ., biasCorrected, =, source, ., biasCorrected, ;, dest, ., varianceDirection, =]
[final, double, [, ], values, ,, final, int, start, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, m, =]
[final, double, [, ], values, ,, final, int, start, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, m, =]
[double, [, ], values, ,, final, int, start, ,, final, int, length, ), throws, MathIllegalArgumentException, {, double, m, =, (]
[,, final, int, length, ), throws, MathIllegalArgumentException, {, double, m, =, (, new, Mean, (, ), ), ., evaluate, (]
[int, length, ), throws, MathIllegalArgumentException, {, double, m, =, (, new, Mean, (, ), ), ., evaluate, (, values, ,]
[), throws, MathIllegalArgumentException, {, double, m, =, (, new, Mean, (, ), ), ., evaluate, (, values, ,, start, ,]
[double, m, =, (, new, Mean, (, ), ), ., evaluate, (, values, ,, start, ,, length, ), ;, return]
[=, (, new, Mean, (, ), ), ., evaluate, (, values, ,, start, ,, length, ), ;, return, evaluate, (]
[new, Mean, (, ), ), ., evaluate, (, values, ,, start, ,, length, ), ;, return, evaluate, (, values, ,]
[(, ), ), ., evaluate, (, values, ,, start, ,, length, ), ;, return, evaluate, (, values, ,, m, ,]
[), ., evaluate, (, values, ,, start, ,, length, ), ;, return, evaluate, (, values, ,, m, ,, varianceDirection, ,]
[evaluate, (, values, ,, start, ,, length, ), ;, return, evaluate, (, values, ,, m, ,, varianceDirection, ,, biasCorrected, ,]
[values, ,, start, ,, length, ), ;, return, evaluate, (, values, ,, m, ,, varianceDirection, ,, biasCorrected, ,, 0, ,]
[values, ,, start, ,, length, ), ;, return, evaluate, (, values, ,, m, ,, varianceDirection, ,, biasCorrected, ,, 0, ,]
[}, public, double, evaluate, (, final, double, [, ], values, ,, Direction, direction, ), throws, MathIllegalArgumentException, {, double, m, =]
[}, public, double, evaluate, (, final, double, [, ], values, ,, Direction, direction, ), throws, MathIllegalArgumentException, {, double, m, =]
[public, double, evaluate, (, final, double, [, ], values, ,, Direction, direction, ), throws, MathIllegalArgumentException, {, double, m, =, (]
[values, ,, Direction, direction, ), throws, MathIllegalArgumentException, {, double, m, =, (, new, Mean, (, ), ), ., evaluate, (]
[), throws, MathIllegalArgumentException, {, double, m, =, (, new, Mean, (, ), ), ., evaluate, (, values, ), ;, return]
[MathIllegalArgumentException, {, double, m, =, (, new, Mean, (, ), ), ., evaluate, (, values, ), ;, return, evaluate, (]
[double, m, =, (, new, Mean, (, ), ), ., evaluate, (, values, ), ;, return, evaluate, (, values, ,]
[=, (, new, Mean, (, ), ), ., evaluate, (, values, ), ;, return, evaluate, (, values, ,, m, ,]
[new, Mean, (, ), ), ., evaluate, (, values, ), ;, return, evaluate, (, values, ,, m, ,, direction, ,]
[(, ), ), ., evaluate, (, values, ), ;, return, evaluate, (, values, ,, m, ,, direction, ,, biasCorrected, ,]
[), ., evaluate, (, values, ), ;, return, evaluate, (, values, ,, m, ,, direction, ,, biasCorrected, ,, 0, ,]
[), ., evaluate, (, values, ), ;, return, evaluate, (, values, ,, m, ,, direction, ,, biasCorrected, ,, 0, ,]
[;, }, public, double, evaluate, (, final, double, [, ], values, ,, final, double, cutoff, ), throws, MathIllegalArgumentException, {, return]
[public, double, evaluate, (, final, double, [, ], values, ,, final, double, cutoff, ), throws, MathIllegalArgumentException, {, return, evaluate, (]
[evaluate, (, final, double, [, ], values, ,, final, double, cutoff, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,]
[final, double, [, ], values, ,, final, double, cutoff, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, cutoff, ,]
[[, ], values, ,, final, double, cutoff, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, cutoff, ,, varianceDirection, ,]
[values, ,, final, double, cutoff, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, cutoff, ,, varianceDirection, ,, biasCorrected, ,]
[final, double, cutoff, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, cutoff, ,, varianceDirection, ,, biasCorrected, ,, 0, ,]
[final, double, cutoff, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, cutoff, ,, varianceDirection, ,, biasCorrected, ,, 0, ,]
[evaluate, (, final, double, [, ], values, ,, final, double, cutoff, ,, final, Direction, direction, ), throws, MathIllegalArgumentException, {, return]
[final, double, [, ], values, ,, final, double, cutoff, ,, final, Direction, direction, ), throws, MathIllegalArgumentException, {, return, evaluate, (]
[[, ], values, ,, final, double, cutoff, ,, final, Direction, direction, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,]
[values, ,, final, double, cutoff, ,, final, Direction, direction, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, cutoff, ,]
[final, double, cutoff, ,, final, Direction, direction, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, cutoff, ,, direction, ,]
[cutoff, ,, final, Direction, direction, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, cutoff, ,, direction, ,, biasCorrected, ,]
[final, Direction, direction, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, cutoff, ,, direction, ,, biasCorrected, ,, 0, ,]
[final, Direction, direction, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, cutoff, ,, direction, ,, biasCorrected, ,, 0, ,]
[,, final, Direction, direction, ,, final, boolean, corrected, ,, final, int, start, ,, final, int, length, ), throws, MathIllegalArgumentException, {]
[Direction, direction, ,, final, boolean, corrected, ,, final, int, start, ,, final, int, length, ), throws, MathIllegalArgumentException, {, test, (]
[,, final, boolean, corrected, ,, final, int, start, ,, final, int, length, ), throws, MathIllegalArgumentException, {, test, (, values, ,]
[boolean, corrected, ,, final, int, start, ,, final, int, length, ), throws, MathIllegalArgumentException, {, test, (, values, ,, start, ,]
[start, ,, final, int, length, ), throws, MathIllegalArgumentException, {, test, (, values, ,, start, ,, length, ), ;, if, (]
[start, ,, final, int, length, ), throws, MathIllegalArgumentException, {, test, (, values, ,, start, ,, length, ), ;, if, (]
[start, ,, final, int, length, ), throws, MathIllegalArgumentException, {, test, (, values, ,, start, ,, length, ), ;, if, (]
[length, ), throws, MathIllegalArgumentException, {, test, (, values, ,, start, ,, length, ), ;, if, (, values, ., length, ==]
[{, test, (, values, ,, start, ,, length, ), ;, if, (, values, ., length, ==, 0, ), {, return]
[{, test, (, values, ,, start, ,, length, ), ;, if, (, values, ., length, ==, 0, ), {, return]
[;, if, (, values, ., length, ==, 0, ), {, return, Double, ., NaN, ;, }, else, {, if, (]
[;, if, (, values, ., length, ==, 0, ), {, return, Double, ., NaN, ;, }, else, {, if, (]
[;, if, (, values, ., length, ==, 0, ), {, return, Double, ., NaN, ;, }, else, {, if, (]
[., length, ==, 0, ), {, return, Double, ., NaN, ;, }, else, {, if, (, values, ., length, ==]
[), {, return, Double, ., NaN, ;, }, else, {, if, (, values, ., length, ==, 1, ), {, return]
[{, if, (, values, ., length, ==, 1, ), {, return, 0.0, ;, }, else, {, final, boolean, booleanDirection, =]
[{, if, (, values, ., length, ==, 1, ), {, return, 0.0, ;, }, else, {, final, boolean, booleanDirection, =]
[{, return, 0.0, ;, }, else, {, final, boolean, booleanDirection, =, direction, ., getDirection, (, ), ;, double, dev, =]
[else, {, final, boolean, booleanDirection, =, direction, ., getDirection, (, ), ;, double, dev, =, 0.0, ;, double, sumsq, =]
[., getDirection, (, ), ;, double, dev, =, 0.0, ;, double, sumsq, =, 0.0, ;, for, (, int, i, =]
[(, ), ;, double, dev, =, 0.0, ;, double, sumsq, =, 0.0, ;, for, (, int, i, =, start, ;]
[(, ), ;, double, dev, =, 0.0, ;, double, sumsq, =, 0.0, ;, for, (, int, i, =, start, ;]
[;, double, dev, =, 0.0, ;, double, sumsq, =, 0.0, ;, for, (, int, i, =, start, ;, i, <]
[dev, =, 0.0, ;, double, sumsq, =, 0.0, ;, for, (, int, i, =, start, ;, i, <, length, ;]
[dev, =, 0.0, ;, double, sumsq, =, 0.0, ;, for, (, int, i, =, start, ;, i, <, length, ;]
[=, 0.0, ;, for, (, int, i, =, start, ;, i, <, length, ;, i, ++, ), {, if, (]
[=, 0.0, ;, for, (, int, i, =, start, ;, i, <, length, ;, i, ++, ), {, if, (]
[0.0, ;, for, (, int, i, =, start, ;, i, <, length, ;, i, ++, ), {, if, (, (]
[0.0, ;, for, (, int, i, =, start, ;, i, <, length, ;, i, ++, ), {, if, (, (]
[0.0, ;, for, (, int, i, =, start, ;, i, <, length, ;, i, ++, ), {, if, (, (]
[for, (, int, i, =, start, ;, i, <, length, ;, i, ++, ), {, if, (, (, values, []
[i, =, start, ;, i, <, length, ;, i, ++, ), {, if, (, (, values, [, i, ], >]
[;, i, <, length, ;, i, ++, ), {, if, (, (, values, [, i, ], >, cutoff, ), ==]
[length, ;, i, ++, ), {, if, (, (, values, [, i, ], >, cutoff, ), ==, booleanDirection, ), {]
[i, ++, ), {, if, (, (, values, [, i, ], >, cutoff, ), ==, booleanDirection, ), {, dev, =]
[i, ++, ), {, if, (, (, values, [, i, ], >, cutoff, ), ==, booleanDirection, ), {, dev, =]
[i, ++, ), {, if, (, (, values, [, i, ], >, cutoff, ), ==, booleanDirection, ), {, dev, =]
[), {, if, (, (, values, [, i, ], >, cutoff, ), ==, booleanDirection, ), {, dev, =, values, []
[(, (, values, [, i, ], >, cutoff, ), ==, booleanDirection, ), {, dev, =, values, [, i, ], -]
[values, [, i, ], >, cutoff, ), ==, booleanDirection, ), {, dev, =, values, [, i, ], -, cutoff, ;]
[i, ], >, cutoff, ), ==, booleanDirection, ), {, dev, =, values, [, i, ], -, cutoff, ;, sumsq, +=]
[i, ], >, cutoff, ), ==, booleanDirection, ), {, dev, =, values, [, i, ], -, cutoff, ;, sumsq, +=]
[>, cutoff, ), ==, booleanDirection, ), {, dev, =, values, [, i, ], -, cutoff, ;, sumsq, +=, dev, *]
[{, dev, =, values, [, i, ], -, cutoff, ;, sumsq, +=, dev, *, dev, ;, }, }, if, (]
[[, i, ], -, cutoff, ;, sumsq, +=, dev, *, dev, ;, }, }, if, (, corrected, ), {, return]
[[, i, ], -, cutoff, ;, sumsq, +=, dev, *, dev, ;, }, }, if, (, corrected, ), {, return]
[], -, cutoff, ;, sumsq, +=, dev, *, dev, ;, }, }, if, (, corrected, ), {, return, sumsq, /]
[-, cutoff, ;, sumsq, +=, dev, *, dev, ;, }, }, if, (, corrected, ), {, return, sumsq, /, (]
[-, cutoff, ;, sumsq, +=, dev, *, dev, ;, }, }, if, (, corrected, ), {, return, sumsq, /, (]
[;, sumsq, +=, dev, *, dev, ;, }, }, if, (, corrected, ), {, return, sumsq, /, (, length, -]
[}, }, if, (, corrected, ), {, return, sumsq, /, (, length, -, 1.0, ), ;, }, else, {, return]
[}, }, if, (, corrected, ), {, return, sumsq, /, (, length, -, 1.0, ), ;, }, else, {, return]
[if, (, corrected, ), {, return, sumsq, /, (, length, -, 1.0, ), ;, }, else, {, return, sumsq, /]
[;, }, else, {, return, sumsq, /, length, ;, }, }, }, }, public, boolean, isBiasCorrected, (, ), {, return]
[}, }, public, boolean, isBiasCorrected, (, ), {, return, biasCorrected, ;, }, public, void, setBiasCorrected, (, boolean, biasCorrected, ), {]
[}, }, public, boolean, isBiasCorrected, (, ), {, return, biasCorrected, ;, }, public, void, setBiasCorrected, (, boolean, biasCorrected, ), {]
[isBiasCorrected, (, ), {, return, biasCorrected, ;, }, public, void, setBiasCorrected, (, boolean, biasCorrected, ), {, this, ., biasCorrected, =]
[setBiasCorrected, (, boolean, biasCorrected, ), {, this, ., biasCorrected, =, biasCorrected, ;, }, public, Direction, getVarianceDirection, (, ), {, return]
[;, }, public, Direction, getVarianceDirection, (, ), {, return, varianceDirection, ;, }, public, void, setVarianceDirection, (, Direction, varianceDirection, ), {]
[;, }, public, Direction, getVarianceDirection, (, ), {, return, varianceDirection, ;, }, public, void, setVarianceDirection, (, Direction, varianceDirection, ), {]
[getVarianceDirection, (, ), {, return, varianceDirection, ;, }, public, void, setVarianceDirection, (, Direction, varianceDirection, ), {, this, ., varianceDirection, =]
[UPSIDE, (, true, ), ,, DOWNSIDE, (, false, ), ;, private, boolean, direction, ;, Direction, (, boolean, b, ), {]
[true, ), ,, DOWNSIDE, (, false, ), ;, private, boolean, direction, ;, Direction, (, boolean, b, ), {, direction, =]
[boolean, direction, ;, Direction, (, boolean, b, ), {, direction, =, b, ;, }, boolean, getDirection, (, ), {, return]
[void, setVarianceDirection, (, Direction, varianceDirection, ), {, this, ., varianceDirection, =, varianceDirection, ;, }, public, enum, Direction, {, UPSIDE, (]
[), {, this, ., varianceDirection, =, varianceDirection, ;, }, public, enum, Direction, {, UPSIDE, (, true, ), ,, DOWNSIDE, (]
