[;, import, java, ., util, ., Set, ;, class, ReplaceStrings, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, BAD_REPLACEMENT_CONFIGURATION, =]
[;, import, java, ., util, ., Set, ;, class, ReplaceStrings, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, BAD_REPLACEMENT_CONFIGURATION, =]
[util, ., Set, ;, class, ReplaceStrings, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, BAD_REPLACEMENT_CONFIGURATION, =, DiagnosticType, ., warning, (]
[Set, ;, class, ReplaceStrings, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, BAD_REPLACEMENT_CONFIGURATION, =, DiagnosticType, ., warning, (, "JSC_BAD_REPLACEMENT_CONFIGURATION", ,]
[{, static, final, DiagnosticType, BAD_REPLACEMENT_CONFIGURATION, =, DiagnosticType, ., warning, (, "JSC_BAD_REPLACEMENT_CONFIGURATION", ,, "Bad replacement configuration.", ), ;, private, final, String, DEFAULT_PLACEHOLDER_TOKEN, =]
[), ;, private, final, String, DEFAULT_PLACEHOLDER_TOKEN, =, "`", ;, private, final, String, placeholderToken, ;, private, static, final, String, REPLACE_ONE_MARKER, =]
[;, private, final, String, placeholderToken, ;, private, static, final, String, REPLACE_ONE_MARKER, =, "?", ;, private, static, final, String, REPLACE_ALL_MARKER, =]
[private, final, AbstractCompiler, compiler, ;, private, final, JSTypeRegistry, registry, ;, private, final, Map, <, String, ,, Config, >, functions, =]
[private, final, AbstractCompiler, compiler, ;, private, final, JSTypeRegistry, registry, ;, private, final, Map, <, String, ,, Config, >, functions, =]
[Config, >, functions, =, Maps, ., newHashMap, (, ), ;, private, final, Multimap, <, String, ,, String, >, methods, =]
[Config, >, functions, =, Maps, ., newHashMap, (, ), ;, private, final, Multimap, <, String, ,, String, >, methods, =]
[., create, (, ), ;, private, final, NameGenerator, nameGenerator, ;, private, final, Map, <, String, ,, Result, >, results, =]
[., create, (, ), ;, private, final, NameGenerator, nameGenerator, ;, private, final, Map, <, String, ,, Result, >, results, =]
[(, ), ;, private, class, Config, {, final, String, name, ;, final, int, parameter, ;, static, final, int, REPLACE_ALL_VALUE, =]
[final, int, parameter, ;, static, final, int, REPLACE_ALL_VALUE, =, 0, ;, Config, (, String, name, ,, int, parameter, ), {]
[final, int, parameter, ;, static, final, int, REPLACE_ALL_VALUE, =, 0, ;, Config, (, String, name, ,, int, parameter, ), {]
[static, final, int, REPLACE_ALL_VALUE, =, 0, ;, Config, (, String, name, ,, int, parameter, ), {, this, ., name, =]
[int, REPLACE_ALL_VALUE, =, 0, ;, Config, (, String, name, ,, int, parameter, ), {, this, ., name, =, name, ;]
[int, REPLACE_ALL_VALUE, =, 0, ;, Config, (, String, name, ,, int, parameter, ), {, this, ., name, =, name, ;]
[;, Config, (, String, name, ,, int, parameter, ), {, this, ., name, =, name, ;, this, ., parameter, =]
[Result, {, public, final, String, original, ;, public, final, String, replacement, ;, public, final, List, <, Location, >, replacementLocations, =]
[Result, {, public, final, String, original, ;, public, final, String, replacement, ;, public, final, List, <, Location, >, replacementLocations, =]
[<, Location, >, replacementLocations, =, Lists, ., newLinkedList, (, ), ;, Result, (, String, original, ,, String, replacement, ), {]
[<, Location, >, replacementLocations, =, Lists, ., newLinkedList, (, ), ;, Result, (, String, original, ,, String, replacement, ), {]
[=, Lists, ., newLinkedList, (, ), ;, Result, (, String, original, ,, String, replacement, ), {, this, ., original, =]
[., newLinkedList, (, ), ;, Result, (, String, original, ,, String, replacement, ), {, this, ., original, =, original, ;]
[., newLinkedList, (, ), ;, Result, (, String, original, ,, String, replacement, ), {, this, ., original, =, original, ;]
[;, Result, (, String, original, ,, String, replacement, ), {, this, ., original, =, original, ;, this, ., replacement, =]
[this, ., original, =, original, ;, this, ., replacement, =, replacement, ;, }, void, addLocation, (, Node, n, ), {]
[this, ., original, =, original, ;, this, ., replacement, =, replacement, ;, }, void, addLocation, (, Node, n, ), {]
[original, ;, this, ., replacement, =, replacement, ;, }, void, addLocation, (, Node, n, ), {, replacementLocations, ., add, (]
[., replacement, =, replacement, ;, }, void, addLocation, (, Node, n, ), {, replacementLocations, ., add, (, new, Location, (]
[., replacement, =, replacement, ;, }, void, addLocation, (, Node, n, ), {, replacementLocations, ., add, (, new, Location, (]
[void, addLocation, (, Node, n, ), {, replacementLocations, ., add, (, new, Location, (, n, ., getSourceFileName, (, ), ,]
[void, addLocation, (, Node, n, ), {, replacementLocations, ., add, (, new, Location, (, n, ., getSourceFileName, (, ), ,]
[{, replacementLocations, ., add, (, new, Location, (, n, ., getSourceFileName, (, ), ,, n, ., getLineno, (, ), ,]
[{, replacementLocations, ., add, (, new, Location, (, n, ., getSourceFileName, (, ), ,, n, ., getLineno, (, ), ,]
[int, line, ;, public, final, int, column, ;, Location, (, String, sourceFile, ,, int, line, ,, int, column, ), {]
[int, line, ;, public, final, int, column, ;, Location, (, String, sourceFile, ,, int, line, ,, int, column, ), {]
[final, int, column, ;, Location, (, String, sourceFile, ,, int, line, ,, int, column, ), {, this, ., sourceFile, =]
[column, ;, Location, (, String, sourceFile, ,, int, line, ,, int, column, ), {, this, ., sourceFile, =, sourceFile, ;]
[column, ;, Location, (, String, sourceFile, ,, int, line, ,, int, column, ), {, this, ., sourceFile, =, sourceFile, ;]
[String, sourceFile, ,, int, line, ,, int, column, ), {, this, ., sourceFile, =, sourceFile, ;, this, ., line, =]
[,, int, line, ,, int, column, ), {, this, ., sourceFile, =, sourceFile, ;, this, ., line, =, line, ;]
[,, int, line, ,, int, column, ), {, this, ., sourceFile, =, sourceFile, ;, this, ., line, =, line, ;]
[int, column, ), {, this, ., sourceFile, =, sourceFile, ;, this, ., line, =, line, ;, this, ., column, =]
[,, String, placeholderToken, ,, List, <, String, >, functionsToInspect, ,, Set, <, String, >, blacklisted, ,, VariableMap, previousMappings, ), {]
[,, String, placeholderToken, ,, List, <, String, >, functionsToInspect, ,, Set, <, String, >, blacklisted, ,, VariableMap, previousMappings, ), {]
[List, <, String, >, functionsToInspect, ,, Set, <, String, >, blacklisted, ,, VariableMap, previousMappings, ), {, this, ., compiler, =]
[String, >, functionsToInspect, ,, Set, <, String, >, blacklisted, ,, VariableMap, previousMappings, ), {, this, ., compiler, =, compiler, ;]
[String, >, functionsToInspect, ,, Set, <, String, >, blacklisted, ,, VariableMap, previousMappings, ), {, this, ., compiler, =, compiler, ;]
[Set, <, String, >, blacklisted, ,, VariableMap, previousMappings, ), {, this, ., compiler, =, compiler, ;, this, ., placeholderToken, =]
[Set, <, String, >, blacklisted, ,, VariableMap, previousMappings, ), {, this, ., compiler, =, compiler, ;, this, ., placeholderToken, =]
[Set, <, String, >, blacklisted, ,, VariableMap, previousMappings, ), {, this, ., compiler, =, compiler, ;, this, ., placeholderToken, =]
[VariableMap, previousMappings, ), {, this, ., compiler, =, compiler, ;, this, ., placeholderToken, =, placeholderToken, ., isEmpty, (, ), ?]
[), {, this, ., compiler, =, compiler, ;, this, ., placeholderToken, =, placeholderToken, ., isEmpty, (, ), ?, DEFAULT_PLACEHOLDER_TOKEN, :]
[this, ., compiler, =, compiler, ;, this, ., placeholderToken, =, placeholderToken, ., isEmpty, (, ), ?, DEFAULT_PLACEHOLDER_TOKEN, :, placeholderToken, ;]
[this, ., compiler, =, compiler, ;, this, ., placeholderToken, =, placeholderToken, ., isEmpty, (, ), ?, DEFAULT_PLACEHOLDER_TOKEN, :, placeholderToken, ;]
[compiler, ;, this, ., placeholderToken, =, placeholderToken, ., isEmpty, (, ), ?, DEFAULT_PLACEHOLDER_TOKEN, :, placeholderToken, ;, this, ., registry, =]
[compiler, ;, this, ., placeholderToken, =, placeholderToken, ., isEmpty, (, ), ?, DEFAULT_PLACEHOLDER_TOKEN, :, placeholderToken, ;, this, ., registry, =]
[DEFAULT_PLACEHOLDER_TOKEN, :, placeholderToken, ;, this, ., registry, =, compiler, ., getTypeRegistry, (, ), ;, Iterable, <, String, >, reservedNames, =]
[this, ., registry, =, compiler, ., getTypeRegistry, (, ), ;, Iterable, <, String, >, reservedNames, =, blacklisted, ;, if, (]
[this, ., registry, =, compiler, ., getTypeRegistry, (, ), ;, Iterable, <, String, >, reservedNames, =, blacklisted, ;, if, (]
[registry, =, compiler, ., getTypeRegistry, (, ), ;, Iterable, <, String, >, reservedNames, =, blacklisted, ;, if, (, previousMappings, !=]
[<, String, >, reservedNames, =, blacklisted, ;, if, (, previousMappings, !=, null, ), {, Set, <, String, >, previous, =]
[<, String, >, reservedNames, =, blacklisted, ;, if, (, previousMappings, !=, null, ), {, Set, <, String, >, previous, =]
[<, String, >, reservedNames, =, blacklisted, ;, if, (, previousMappings, !=, null, ), {, Set, <, String, >, previous, =]
[!=, null, ), {, Set, <, String, >, previous, =, previousMappings, ., getOriginalNameToNewNameMap, (, ), ., keySet, (, ), ;]
[), {, Set, <, String, >, previous, =, previousMappings, ., getOriginalNameToNewNameMap, (, ), ., keySet, (, ), ;, reservedNames, =]
[), {, Set, <, String, >, previous, =, previousMappings, ., getOriginalNameToNewNameMap, (, ), ., keySet, (, ), ;, reservedNames, =]
[String, >, previous, =, previousMappings, ., getOriginalNameToNewNameMap, (, ), ., keySet, (, ), ;, reservedNames, =, Iterables, ., concat, (]
[previous, =, previousMappings, ., getOriginalNameToNewNameMap, (, ), ., keySet, (, ), ;, reservedNames, =, Iterables, ., concat, (, blacklisted, ,]
[., getOriginalNameToNewNameMap, (, ), ., keySet, (, ), ;, reservedNames, =, Iterables, ., concat, (, blacklisted, ,, previous, ), ;]
[(, ), ., keySet, (, ), ;, reservedNames, =, Iterables, ., concat, (, blacklisted, ,, previous, ), ;, initMapping, (]
[., keySet, (, ), ;, reservedNames, =, Iterables, ., concat, (, blacklisted, ,, previous, ), ;, initMapping, (, previousMappings, ,]
[;, reservedNames, =, Iterables, ., concat, (, blacklisted, ,, previous, ), ;, initMapping, (, previousMappings, ,, blacklisted, ), ;, }]
[;, reservedNames, =, Iterables, ., concat, (, blacklisted, ,, previous, ), ;, initMapping, (, previousMappings, ,, blacklisted, ), ;, }]
[., concat, (, blacklisted, ,, previous, ), ;, initMapping, (, previousMappings, ,, blacklisted, ), ;, }, this, ., nameGenerator, =]
[(, blacklisted, ,, previous, ), ;, initMapping, (, previousMappings, ,, blacklisted, ), ;, }, this, ., nameGenerator, =, createNameGenerator, (]
[previous, ), ;, initMapping, (, previousMappings, ,, blacklisted, ), ;, }, this, ., nameGenerator, =, createNameGenerator, (, reservedNames, ), ;]
[;, initMapping, (, previousMappings, ,, blacklisted, ), ;, }, this, ., nameGenerator, =, createNameGenerator, (, reservedNames, ), ;, parseConfiguration, (]
[initMapping, (, VariableMap, previousVarMap, ,, Set, <, String, >, reservedNames, ), {, Map, <, String, ,, String, >, previous, =]
[initMapping, (, VariableMap, previousVarMap, ,, Set, <, String, >, reservedNames, ), {, Map, <, String, ,, String, >, previous, =]
[previous, =, previousVarMap, ., getOriginalNameToNewNameMap, (, ), ;, for, (, Map, ., Entry, <, String, ,, String, >, entry, :]
[previous, =, previousVarMap, ., getOriginalNameToNewNameMap, (, ), ;, for, (, Map, ., Entry, <, String, ,, String, >, entry, :]
[Map, ., Entry, <, String, ,, String, >, entry, :, previous, ., entrySet, (, ), ), {, String, key, =]
[Map, ., Entry, <, String, ,, String, >, entry, :, previous, ., entrySet, (, ), ), {, String, key, =]
[entry, :, previous, ., entrySet, (, ), ), {, String, key, =, entry, ., getKey, (, ), ;, if, (]
[:, previous, ., entrySet, (, ), ), {, String, key, =, entry, ., getKey, (, ), ;, if, (, !]
[:, previous, ., entrySet, (, ), ), {, String, key, =, entry, ., getKey, (, ), ;, if, (, !]
[(, ), ), {, String, key, =, entry, ., getKey, (, ), ;, if, (, !, reservedNames, ., contains, (]
[entry, ., getKey, (, ), ;, if, (, !, reservedNames, ., contains, (, key, ), ), {, String, value, =]
[entry, ., getKey, (, ), ;, if, (, !, reservedNames, ., contains, (, key, ), ), {, String, value, =]
[if, (, !, reservedNames, ., contains, (, key, ), ), {, String, value, =, entry, ., getValue, (, ), ;]
[if, (, !, reservedNames, ., contains, (, key, ), ), {, String, value, =, entry, ., getValue, (, ), ;]
[., contains, (, key, ), ), {, String, value, =, entry, ., getValue, (, ), ;, results, ., put, (]
[(, key, ), ), {, String, value, =, entry, ., getValue, (, ), ;, results, ., put, (, value, ,]
[), {, String, value, =, entry, ., getValue, (, ), ;, results, ., put, (, value, ,, new, Result, (]
[String, value, =, entry, ., getValue, (, ), ;, results, ., put, (, value, ,, new, Result, (, value, ,]
[new, Result, (, value, ,, key, ), ), ;, }, }, }, static, final, Predicate, <, Result, >, USED_RESULTS, =]
[=, new, Predicate, <, Result, >, (, ), {, @, Override, public, boolean, apply, (, Result, result, ), {, return]
[new, Predicate, <, Result, >, (, ), {, @, Override, public, boolean, apply, (, Result, result, ), {, return, !]
[new, Predicate, <, Result, >, (, ), {, @, Override, public, boolean, apply, (, Result, result, ), {, return, !]
[new, Predicate, <, Result, >, (, ), {, @, Override, public, boolean, apply, (, Result, result, ), {, return, !]
[result, ., replacementLocations, ., isEmpty, (, ), ;, }, }, ;, List, <, Result, >, getResult, (, ), {, return]
[result, ., replacementLocations, ., isEmpty, (, ), ;, }, }, ;, List, <, Result, >, getResult, (, ), {, return]
[isEmpty, (, ), ;, }, }, ;, List, <, Result, >, getResult, (, ), {, return, ImmutableList, ., copyOf, (]
[isEmpty, (, ), ;, }, }, ;, List, <, Result, >, getResult, (, ), {, return, ImmutableList, ., copyOf, (]
[}, }, ;, List, <, Result, >, getResult, (, ), {, return, ImmutableList, ., copyOf, (, Iterables, ., filter, (]
[}, }, ;, List, <, Result, >, getResult, (, ), {, return, ImmutableList, ., copyOf, (, Iterables, ., filter, (]
[>, getResult, (, ), {, return, ImmutableList, ., copyOf, (, Iterables, ., filter, (, results, ., values, (, ), ,]
[USED_RESULTS, ), ), ;, }, VariableMap, getStringMap, (, ), {, ImmutableMap, ., Builder, <, String, ,, String, >, map, =]
[USED_RESULTS, ), ), ;, }, VariableMap, getStringMap, (, ), {, ImmutableMap, ., Builder, <, String, ,, String, >, map, =]
[., Builder, <, String, ,, String, >, map, =, ImmutableMap, ., builder, (, ), ;, for, (, Result, result, :]
[., Builder, <, String, ,, String, >, map, =, ImmutableMap, ., builder, (, ), ;, for, (, Result, result, :]
[,, String, >, map, =, ImmutableMap, ., builder, (, ), ;, for, (, Result, result, :, Iterables, ., filter, (]
[,, String, >, map, =, ImmutableMap, ., builder, (, ), ;, for, (, Result, result, :, Iterables, ., filter, (]
[., builder, (, ), ;, for, (, Result, result, :, Iterables, ., filter, (, results, ., values, (, ), ,]
[;, for, (, Result, result, :, Iterables, ., filter, (, results, ., values, (, ), ,, USED_RESULTS, ), ), {]
[;, for, (, Result, result, :, Iterables, ., filter, (, results, ., values, (, ), ,, USED_RESULTS, ), ), {]
[result, :, Iterables, ., filter, (, results, ., values, (, ), ,, USED_RESULTS, ), ), {, map, ., put, (]
[result, :, Iterables, ., filter, (, results, ., values, (, ), ,, USED_RESULTS, ), ), {, map, ., put, (]
[filter, (, results, ., values, (, ), ,, USED_RESULTS, ), ), {, map, ., put, (, result, ., replacement, ,]
[filter, (, results, ., values, (, ), ,, USED_RESULTS, ), ), {, map, ., put, (, result, ., replacement, ,]
[), ), {, map, ., put, (, result, ., replacement, ,, result, ., original, ), ;, }, VariableMap, stringMap, =]
[map, ., put, (, result, ., replacement, ,, result, ., original, ), ;, }, VariableMap, stringMap, =, new, VariableMap, (]
[map, ., put, (, result, ., replacement, ,, result, ., original, ), ;, }, VariableMap, stringMap, =, new, VariableMap, (]
[result, ., original, ), ;, }, VariableMap, stringMap, =, new, VariableMap, (, map, ., build, (, ), ), ;, return]
[), ), ;, return, stringMap, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[), ), ;, return, stringMap, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[stringMap, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NEW, :, case]
[,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NEW, :, case]
[n, ., getType, (, ), ), {, case, Token, ., NEW, :, case, Token, ., CALL, :, Node, calledFn, =]
[n, ., getType, (, ), ), {, case, Token, ., NEW, :, case, Token, ., CALL, :, Node, calledFn, =]
[., NEW, :, case, Token, ., CALL, :, Node, calledFn, =, n, ., getFirstChild, (, ), ;, String, name, =]
[., NEW, :, case, Token, ., CALL, :, Node, calledFn, =, n, ., getFirstChild, (, ), ;, String, name, =]
[Node, calledFn, =, n, ., getFirstChild, (, ), ;, String, name, =, calledFn, ., getQualifiedName, (, ), ;, if, (]
[Node, calledFn, =, n, ., getFirstChild, (, ), ;, String, name, =, calledFn, ., getQualifiedName, (, ), ;, if, (]
[=, n, ., getFirstChild, (, ), ;, String, name, =, calledFn, ., getQualifiedName, (, ), ;, if, (, name, !=]
[;, String, name, =, calledFn, ., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, Config, config, =]
[name, =, calledFn, ., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, Config, config, =, findMatching, (]
[(, ), ;, if, (, name, !=, null, ), {, Config, config, =, findMatching, (, name, ), ;, if, (]
[(, ), ;, if, (, name, !=, null, ), {, Config, config, =, findMatching, (, name, ), ;, if, (]
[;, if, (, name, !=, null, ), {, Config, config, =, findMatching, (, name, ), ;, if, (, config, !=]
[name, !=, null, ), {, Config, config, =, findMatching, (, name, ), ;, if, (, config, !=, null, ), {]
[null, ), {, Config, config, =, findMatching, (, name, ), ;, if, (, config, !=, null, ), {, doSubstitutions, (]
[{, Config, config, =, findMatching, (, name, ), ;, if, (, config, !=, null, ), {, doSubstitutions, (, t, ,]
[config, =, findMatching, (, name, ), ;, if, (, config, !=, null, ), {, doSubstitutions, (, t, ,, config, ,]
[config, !=, null, ), {, doSubstitutions, (, t, ,, config, ,, n, ), ;, return, ;, }, }, if, (]
[config, !=, null, ), {, doSubstitutions, (, t, ,, config, ,, n, ), ;, return, ;, }, }, if, (]
[{, doSubstitutions, (, t, ,, config, ,, n, ), ;, return, ;, }, }, if, (, NodeUtil, ., isGet, (]
[n, ), ;, return, ;, }, }, if, (, NodeUtil, ., isGet, (, calledFn, ), ), {, Node, rhs, =]
[n, ), ;, return, ;, }, }, if, (, NodeUtil, ., isGet, (, calledFn, ), ), {, Node, rhs, =]
[(, NodeUtil, ., isGet, (, calledFn, ), ), {, Node, rhs, =, calledFn, ., getLastChild, (, ), ;, if, (]
[(, NodeUtil, ., isGet, (, calledFn, ), ), {, Node, rhs, =, calledFn, ., getLastChild, (, ), ;, if, (]
[(, NodeUtil, ., isGet, (, calledFn, ), ), {, Node, rhs, =, calledFn, ., getLastChild, (, ), ;, if, (]
[), ), {, Node, rhs, =, calledFn, ., getLastChild, (, ), ;, if, (, rhs, ., isName, (, ), ||]
[), ), {, Node, rhs, =, calledFn, ., getLastChild, (, ), ;, if, (, rhs, ., isName, (, ), ||]
[), ;, if, (, rhs, ., isName, (, ), ||, rhs, ., isString, (, ), ), {, String, methodName, =]
[), ;, if, (, rhs, ., isName, (, ), ||, rhs, ., isString, (, ), ), {, String, methodName, =]
[isString, (, ), ), {, String, methodName, =, rhs, ., getString, (, ), ;, Collection, <, String, >, classes, =]
[isString, (, ), ), {, String, methodName, =, rhs, ., getString, (, ), ;, Collection, <, String, >, classes, =]
[{, String, methodName, =, rhs, ., getString, (, ), ;, Collection, <, String, >, classes, =, methods, ., get, (]
[., getString, (, ), ;, Collection, <, String, >, classes, =, methods, ., get, (, methodName, ), ;, if, (]
[., getString, (, ), ;, Collection, <, String, >, classes, =, methods, ., get, (, methodName, ), ;, if, (]
[(, ), ;, Collection, <, String, >, classes, =, methods, ., get, (, methodName, ), ;, if, (, classes, !=]
[>, classes, =, methods, ., get, (, methodName, ), ;, if, (, classes, !=, null, ), {, Node, lhs, =]
[>, classes, =, methods, ., get, (, methodName, ), ;, if, (, classes, !=, null, ), {, Node, lhs, =]
[), ;, if, (, classes, !=, null, ), {, Node, lhs, =, calledFn, ., getFirstChild, (, ), ;, if, (]
[), ;, if, (, classes, !=, null, ), {, Node, lhs, =, calledFn, ., getFirstChild, (, ), ;, if, (]
[), ;, if, (, classes, !=, null, ), {, Node, lhs, =, calledFn, ., getFirstChild, (, ), ;, if, (]
[null, ), {, Node, lhs, =, calledFn, ., getFirstChild, (, ), ;, if, (, lhs, ., getJSType, (, ), !=]
[calledFn, ., getFirstChild, (, ), ;, if, (, lhs, ., getJSType, (, ), !=, null, ), {, JSType, type, =]
[calledFn, ., getFirstChild, (, ), ;, if, (, lhs, ., getJSType, (, ), !=, null, ), {, JSType, type, =]
[calledFn, ., getFirstChild, (, ), ;, if, (, lhs, ., getJSType, (, ), !=, null, ), {, JSType, type, =]
[!=, null, ), {, JSType, type, =, lhs, ., getJSType, (, ), ., restrictByNotNullOrUndefined, (, ), ;, Config, config, =]
[), {, JSType, type, =, lhs, ., getJSType, (, ), ., restrictByNotNullOrUndefined, (, ), ;, Config, config, =, findMatchingClass, (]
[JSType, type, =, lhs, ., getJSType, (, ), ., restrictByNotNullOrUndefined, (, ), ;, Config, config, =, findMatchingClass, (, type, ,]
[getJSType, (, ), ., restrictByNotNullOrUndefined, (, ), ;, Config, config, =, findMatchingClass, (, type, ,, classes, ), ;, if, (]
[getJSType, (, ), ., restrictByNotNullOrUndefined, (, ), ;, Config, config, =, findMatchingClass, (, type, ,, classes, ), ;, if, (]
[), ., restrictByNotNullOrUndefined, (, ), ;, Config, config, =, findMatchingClass, (, type, ,, classes, ), ;, if, (, config, !=]
[(, ), ;, Config, config, =, findMatchingClass, (, type, ,, classes, ), ;, if, (, config, !=, null, ), {]
[;, Config, config, =, findMatchingClass, (, type, ,, classes, ), ;, if, (, config, !=, null, ), {, doSubstitutions, (]
[config, =, findMatchingClass, (, type, ,, classes, ), ;, if, (, config, !=, null, ), {, doSubstitutions, (, t, ,]
[findMatchingClass, (, type, ,, classes, ), ;, if, (, config, !=, null, ), {, doSubstitutions, (, t, ,, config, ,]
[}, }, }, }, }, break, ;, }, }, private, Config, findMatching, (, String, name, ), {, Config, config, =]
[}, }, }, }, }, break, ;, }, }, private, Config, findMatching, (, String, name, ), {, Config, config, =]
[}, break, ;, }, }, private, Config, findMatching, (, String, name, ), {, Config, config, =, functions, ., get, (]
[private, Config, findMatching, (, String, name, ), {, Config, config, =, functions, ., get, (, name, ), ;, if, (]
[private, Config, findMatching, (, String, name, ), {, Config, config, =, functions, ., get, (, name, ), ;, if, (]
[findMatching, (, String, name, ), {, Config, config, =, functions, ., get, (, name, ), ;, if, (, config, ==]
[name, ), {, Config, config, =, functions, ., get, (, name, ), ;, if, (, config, ==, null, ), {]
[{, Config, config, =, functions, ., get, (, name, ), ;, if, (, config, ==, null, ), {, name, =]
[{, Config, config, =, functions, ., get, (, name, ), ;, if, (, config, ==, null, ), {, name, =]
[functions, ., get, (, name, ), ;, if, (, config, ==, null, ), {, name, =, name, ., replace, (]
[get, (, name, ), ;, if, (, config, ==, null, ), {, name, =, name, ., replace, (, '$', ,]
[), ;, if, (, config, ==, null, ), {, name, =, name, ., replace, (, '$', ,, '.', ), ;]
[if, (, config, ==, null, ), {, name, =, name, ., replace, (, '$', ,, '.', ), ;, config, =]
[if, (, config, ==, null, ), {, name, =, name, ., replace, (, '$', ,, '.', ), ;, config, =]
[null, ), {, name, =, name, ., replace, (, '$', ,, '.', ), ;, config, =, functions, ., get, (]
[name, ., replace, (, '$', ,, '.', ), ;, config, =, functions, ., get, (, name, ), ;, }, return]
[return, config, ;, }, private, Config, findMatchingClass, (, JSType, callClassType, ,, Collection, <, String, >, declarationNames, ), {, if, (]
[return, config, ;, }, private, Config, findMatchingClass, (, JSType, callClassType, ,, Collection, <, String, >, declarationNames, ), {, if, (]
[config, ;, }, private, Config, findMatchingClass, (, JSType, callClassType, ,, Collection, <, String, >, declarationNames, ), {, if, (, !]
[config, ;, }, private, Config, findMatchingClass, (, JSType, callClassType, ,, Collection, <, String, >, declarationNames, ), {, if, (, !]
[(, JSType, callClassType, ,, Collection, <, String, >, declarationNames, ), {, if, (, !, callClassType, ., isNoObjectType, (, ), &&]
[JSType, callClassType, ,, Collection, <, String, >, declarationNames, ), {, if, (, !, callClassType, ., isNoObjectType, (, ), &&, !]
[JSType, callClassType, ,, Collection, <, String, >, declarationNames, ), {, if, (, !, callClassType, ., isNoObjectType, (, ), &&, !]
[!, callClassType, ., isNoObjectType, (, ), &&, !, callClassType, ., isUnknownType, (, ), ), {, for, (, String, declarationName, :]
[&&, !, callClassType, ., isUnknownType, (, ), ), {, for, (, String, declarationName, :, declarationNames, ), {, String, className, =]
[callClassType, ., isUnknownType, (, ), ), {, for, (, String, declarationName, :, declarationNames, ), {, String, className, =, getClassFromDeclarationName, (]
[{, for, (, String, declarationName, :, declarationNames, ), {, String, className, =, getClassFromDeclarationName, (, declarationName, ), ;, JSType, methodClassType, =]
[{, for, (, String, declarationName, :, declarationNames, ), {, String, className, =, getClassFromDeclarationName, (, declarationName, ), ;, JSType, methodClassType, =]
[declarationName, :, declarationNames, ), {, String, className, =, getClassFromDeclarationName, (, declarationName, ), ;, JSType, methodClassType, =, registry, ., getType, (]
[String, className, =, getClassFromDeclarationName, (, declarationName, ), ;, JSType, methodClassType, =, registry, ., getType, (, className, ), ;, if, (]
[String, className, =, getClassFromDeclarationName, (, declarationName, ), ;, JSType, methodClassType, =, registry, ., getType, (, className, ), ;, if, (]
[String, className, =, getClassFromDeclarationName, (, declarationName, ), ;, JSType, methodClassType, =, registry, ., getType, (, className, ), ;, if, (]
[=, getClassFromDeclarationName, (, declarationName, ), ;, JSType, methodClassType, =, registry, ., getType, (, className, ), ;, if, (, methodClassType, !=]
[(, declarationName, ), ;, JSType, methodClassType, =, registry, ., getType, (, className, ), ;, if, (, methodClassType, !=, null, &&]
[(, declarationName, ), ;, JSType, methodClassType, =, registry, ., getType, (, className, ), ;, if, (, methodClassType, !=, null, &&]
[JSType, methodClassType, =, registry, ., getType, (, className, ), ;, if, (, methodClassType, !=, null, &&, callClassType, ., isSubtype, (]
[getType, (, className, ), ;, if, (, methodClassType, !=, null, &&, callClassType, ., isSubtype, (, methodClassType, ), ), {, return]
[getType, (, className, ), ;, if, (, methodClassType, !=, null, &&, callClassType, ., isSubtype, (, methodClassType, ), ), {, return]
[;, if, (, methodClassType, !=, null, &&, callClassType, ., isSubtype, (, methodClassType, ), ), {, return, functions, ., get, (]
[callClassType, ., isSubtype, (, methodClassType, ), ), {, return, functions, ., get, (, declarationName, ), ;, }, }, }, return]
[}, }, return, null, ;, }, private, void, doSubstitutions, (, NodeTraversal, t, ,, Config, config, ,, Node, n, ), {]
[}, }, return, null, ;, }, private, void, doSubstitutions, (, NodeTraversal, t, ,, Config, config, ,, Node, n, ), {]
[;, }, private, void, doSubstitutions, (, NodeTraversal, t, ,, Config, config, ,, Node, n, ), {, Preconditions, ., checkState, (]
[;, }, private, void, doSubstitutions, (, NodeTraversal, t, ,, Config, config, ,, Node, n, ), {, Preconditions, ., checkState, (]
[;, }, private, void, doSubstitutions, (, NodeTraversal, t, ,, Config, config, ,, Node, n, ), {, Preconditions, ., checkState, (]
[NodeTraversal, t, ,, Config, config, ,, Node, n, ), {, Preconditions, ., checkState, (, n, ., isNew, (, ), ||]
[NodeTraversal, t, ,, Config, config, ,, Node, n, ), {, Preconditions, ., checkState, (, n, ., isNew, (, ), ||]
[{, Preconditions, ., checkState, (, n, ., isNew, (, ), ||, n, ., isCall, (, ), ), ;, if, (]
[{, Preconditions, ., checkState, (, n, ., isNew, (, ), ||, n, ., isCall, (, ), ), ;, if, (]
[{, Preconditions, ., checkState, (, n, ., isNew, (, ), ||, n, ., isCall, (, ), ), ;, if, (]
[(, n, ., isNew, (, ), ||, n, ., isCall, (, ), ), ;, if, (, config, ., parameter, !=]
[(, n, ., isNew, (, ), ||, n, ., isCall, (, ), ), ;, if, (, config, ., parameter, !=]
[., isCall, (, ), ), ;, if, (, config, ., parameter, !=, Config, ., REPLACE_ALL_VALUE, ), {, Node, arg, =]
[., isCall, (, ), ), ;, if, (, config, ., parameter, !=, Config, ., REPLACE_ALL_VALUE, ), {, Node, arg, =]
[), ;, if, (, config, ., parameter, !=, Config, ., REPLACE_ALL_VALUE, ), {, Node, arg, =, n, ., getChildAtIndex, (]
[), ;, if, (, config, ., parameter, !=, Config, ., REPLACE_ALL_VALUE, ), {, Node, arg, =, n, ., getChildAtIndex, (]
[!=, Config, ., REPLACE_ALL_VALUE, ), {, Node, arg, =, n, ., getChildAtIndex, (, config, ., parameter, ), ;, if, (]
[!=, Config, ., REPLACE_ALL_VALUE, ), {, Node, arg, =, n, ., getChildAtIndex, (, config, ., parameter, ), ;, if, (]
[., REPLACE_ALL_VALUE, ), {, Node, arg, =, n, ., getChildAtIndex, (, config, ., parameter, ), ;, if, (, arg, !=]
[{, Node, arg, =, n, ., getChildAtIndex, (, config, ., parameter, ), ;, if, (, arg, !=, null, ), {]
[arg, =, n, ., getChildAtIndex, (, config, ., parameter, ), ;, if, (, arg, !=, null, ), {, replaceExpression, (]
[n, ., getChildAtIndex, (, config, ., parameter, ), ;, if, (, arg, !=, null, ), {, replaceExpression, (, t, ,]
[getChildAtIndex, (, config, ., parameter, ), ;, if, (, arg, !=, null, ), {, replaceExpression, (, t, ,, arg, ,]
[!=, null, ), {, replaceExpression, (, t, ,, arg, ,, n, ), ;, }, }, else, {, Node, firstParam, =]
[!=, null, ), {, replaceExpression, (, t, ,, arg, ,, n, ), ;, }, }, else, {, Node, firstParam, =]
[!=, null, ), {, replaceExpression, (, t, ,, arg, ,, n, ), ;, }, }, else, {, Node, firstParam, =]
[else, {, Node, firstParam, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, for, (, Node, arg, =]
[Node, firstParam, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, for, (, Node, arg, =, firstParam, ;]
[Node, firstParam, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, for, (, Node, arg, =, firstParam, ;]
[=, n, ., getFirstChild, (, ), ., getNext, (, ), ;, for, (, Node, arg, =, firstParam, ;, arg, !=]
[., getFirstChild, (, ), ., getNext, (, ), ;, for, (, Node, arg, =, firstParam, ;, arg, !=, null, ;]
[(, ), ., getNext, (, ), ;, for, (, Node, arg, =, firstParam, ;, arg, !=, null, ;, arg, =]
[(, ), ., getNext, (, ), ;, for, (, Node, arg, =, firstParam, ;, arg, !=, null, ;, arg, =]
[for, (, Node, arg, =, firstParam, ;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {]
[Node, arg, =, firstParam, ;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {, arg, =]
[=, firstParam, ;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {, arg, =, replaceExpression, (]
[;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {, arg, =, replaceExpression, (, t, ,]
[!=, null, ;, arg, =, arg, ., getNext, (, ), ), {, arg, =, replaceExpression, (, t, ,, arg, ,]
[private, Node, replaceExpression, (, NodeTraversal, t, ,, Node, expr, ,, Node, parent, ), {, Node, replacement, ;, String, key, =]
[Node, expr, ,, Node, parent, ), {, Node, replacement, ;, String, key, =, null, ;, String, replacementString, ;, switch, (]
[Node, expr, ,, Node, parent, ), {, Node, replacement, ;, String, key, =, null, ;, String, replacementString, ;, switch, (]
[replacement, ;, String, key, =, null, ;, String, replacementString, ;, switch, (, expr, ., getType, (, ), ), {, case]
[replacement, ;, String, key, =, null, ;, String, replacementString, ;, switch, (, expr, ., getType, (, ), ), {, case]
[=, null, ;, String, replacementString, ;, switch, (, expr, ., getType, (, ), ), {, case, Token, ., STRING, :]
[;, String, replacementString, ;, switch, (, expr, ., getType, (, ), ), {, case, Token, ., STRING, :, key, =]
[;, String, replacementString, ;, switch, (, expr, ., getType, (, ), ), {, case, Token, ., STRING, :, key, =]
[expr, ., getType, (, ), ), {, case, Token, ., STRING, :, key, =, expr, ., getString, (, ), ;]
[getType, (, ), ), {, case, Token, ., STRING, :, key, =, expr, ., getString, (, ), ;, replacementString, =]
[), ), {, case, Token, ., STRING, :, key, =, expr, ., getString, (, ), ;, replacementString, =, getReplacement, (]
[case, Token, ., STRING, :, key, =, expr, ., getString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;]
[., STRING, :, key, =, expr, ., getString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;, replacement, =]
[., STRING, :, key, =, expr, ., getString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;, replacement, =]
[=, expr, ., getString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;, replacement, =, IR, ., string, (]
[;, replacementString, =, getReplacement, (, key, ), ;, replacement, =, IR, ., string, (, replacementString, ), ;, break, ;, case]
[;, replacementString, =, getReplacement, (, key, ), ;, replacement, =, IR, ., string, (, replacementString, ), ;, break, ;, case]
[;, replacement, =, IR, ., string, (, replacementString, ), ;, break, ;, case, Token, ., ADD, :, StringBuilder, keyBuilder, =]
[), ;, break, ;, case, Token, ., ADD, :, StringBuilder, keyBuilder, =, new, StringBuilder, (, ), ;, Node, keyNode, =]
[), ;, break, ;, case, Token, ., ADD, :, StringBuilder, keyBuilder, =, new, StringBuilder, (, ), ;, Node, keyNode, =]
[case, Token, ., ADD, :, StringBuilder, keyBuilder, =, new, StringBuilder, (, ), ;, Node, keyNode, =, IR, ., string, (]
[ADD, :, StringBuilder, keyBuilder, =, new, StringBuilder, (, ), ;, Node, keyNode, =, IR, ., string, (, "", ), ;]
[StringBuilder, keyBuilder, =, new, StringBuilder, (, ), ;, Node, keyNode, =, IR, ., string, (, "", ), ;, replacement, =]
[=, new, StringBuilder, (, ), ;, Node, keyNode, =, IR, ., string, (, "", ), ;, replacement, =, buildReplacement, (]
[StringBuilder, (, ), ;, Node, keyNode, =, IR, ., string, (, "", ), ;, replacement, =, buildReplacement, (, expr, ,]
[), ;, Node, keyNode, =, IR, ., string, (, "", ), ;, replacement, =, buildReplacement, (, expr, ,, keyNode, ,]
[keyNode, =, IR, ., string, (, "", ), ;, replacement, =, buildReplacement, (, expr, ,, keyNode, ,, keyBuilder, ), ;]
[IR, ., string, (, "", ), ;, replacement, =, buildReplacement, (, expr, ,, keyNode, ,, keyBuilder, ), ;, key, =]
[IR, ., string, (, "", ), ;, replacement, =, buildReplacement, (, expr, ,, keyNode, ,, keyBuilder, ), ;, key, =]
[;, replacement, =, buildReplacement, (, expr, ,, keyNode, ,, keyBuilder, ), ;, key, =, keyBuilder, ., toString, (, ), ;]
[=, buildReplacement, (, expr, ,, keyNode, ,, keyBuilder, ), ;, key, =, keyBuilder, ., toString, (, ), ;, replacementString, =]
[(, expr, ,, keyNode, ,, keyBuilder, ), ;, key, =, keyBuilder, ., toString, (, ), ;, replacementString, =, getReplacement, (]
[keyNode, ,, keyBuilder, ), ;, key, =, keyBuilder, ., toString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;]
[keyNode, ,, keyBuilder, ), ;, key, =, keyBuilder, ., toString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;]
[;, key, =, keyBuilder, ., toString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;, keyNode, ., setString, (]
[(, ), ;, replacementString, =, getReplacement, (, key, ), ;, keyNode, ., setString, (, replacementString, ), ;, break, ;, case]
[(, ), ;, replacementString, =, getReplacement, (, key, ), ;, keyNode, ., setString, (, replacementString, ), ;, break, ;, case]
[;, keyNode, ., setString, (, replacementString, ), ;, break, ;, case, Token, ., NAME, :, Scope, ., Var, var, =]
[;, keyNode, ., setString, (, replacementString, ), ;, break, ;, case, Token, ., NAME, :, Scope, ., Var, var, =]
[;, keyNode, ., setString, (, replacementString, ), ;, break, ;, case, Token, ., NAME, :, Scope, ., Var, var, =]
[break, ;, case, Token, ., NAME, :, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (]
[break, ;, case, Token, ., NAME, :, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, expr, ., getString, (, ), ), ;, if, (]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, expr, ., getString, (, ), ), ;, if, (]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, expr, ., getString, (, ), ), ;, if, (]
[=, t, ., getScope, (, ), ., getVar, (, expr, ., getString, (, ), ), ;, if, (, var, !=]
[., getScope, (, ), ., getVar, (, expr, ., getString, (, ), ), ;, if, (, var, !=, null, &&]
[., getScope, (, ), ., getVar, (, expr, ., getString, (, ), ), ;, if, (, var, !=, null, &&]
[(, ), ), ;, if, (, var, !=, null, &&, var, ., isConst, (, ), ), {, Node, value, =]
[(, ), ), ;, if, (, var, !=, null, &&, var, ., isConst, (, ), ), {, Node, value, =]
[null, &&, var, ., isConst, (, ), ), {, Node, value, =, var, ., getInitialValue, (, ), ;, if, (]
[null, &&, var, ., isConst, (, ), ), {, Node, value, =, var, ., getInitialValue, (, ), ;, if, (]
[null, &&, var, ., isConst, (, ), ), {, Node, value, =, var, ., getInitialValue, (, ), ;, if, (]
[var, ., isConst, (, ), ), {, Node, value, =, var, ., getInitialValue, (, ), ;, if, (, value, !=]
[isConst, (, ), ), {, Node, value, =, var, ., getInitialValue, (, ), ;, if, (, value, !=, null, &&]
[isConst, (, ), ), {, Node, value, =, var, ., getInitialValue, (, ), ;, if, (, value, !=, null, &&]
[=, var, ., getInitialValue, (, ), ;, if, (, value, !=, null, &&, value, ., isString, (, ), ), {]
[., getInitialValue, (, ), ;, if, (, value, !=, null, &&, value, ., isString, (, ), ), {, key, =]
[., getInitialValue, (, ), ;, if, (, value, !=, null, &&, value, ., isString, (, ), ), {, key, =]
[(, value, !=, null, &&, value, ., isString, (, ), ), {, key, =, value, ., getString, (, ), ;]
[!=, null, &&, value, ., isString, (, ), ), {, key, =, value, ., getString, (, ), ;, replacementString, =]
[&&, value, ., isString, (, ), ), {, key, =, value, ., getString, (, ), ;, replacementString, =, getReplacement, (]
[isString, (, ), ), {, key, =, value, ., getString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;]
[), ), {, key, =, value, ., getString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;, replacement, =]
[), ), {, key, =, value, ., getString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;, replacement, =]
[=, value, ., getString, (, ), ;, replacementString, =, getReplacement, (, key, ), ;, replacement, =, IR, ., string, (]
[=, getReplacement, (, key, ), ;, replacement, =, IR, ., string, (, replacementString, ), ;, break, ;, }, }, return]
[;, replacement, =, IR, ., string, (, replacementString, ), ;, break, ;, }, }, return, expr, ;, default, :, return]
[IR, ., string, (, replacementString, ), ;, break, ;, }, }, return, expr, ;, default, :, return, expr, ;, }]
[IR, ., string, (, replacementString, ), ;, break, ;, }, }, return, expr, ;, default, :, return, expr, ;, }]
[replacementString, ), ;, break, ;, }, }, return, expr, ;, default, :, return, expr, ;, }, Preconditions, ., checkNotNull, (]
[break, ;, }, }, return, expr, ;, default, :, return, expr, ;, }, Preconditions, ., checkNotNull, (, key, ), ;]
[break, ;, }, }, return, expr, ;, default, :, return, expr, ;, }, Preconditions, ., checkNotNull, (, key, ), ;]
[return, expr, ;, default, :, return, expr, ;, }, Preconditions, ., checkNotNull, (, key, ), ;, Preconditions, ., checkNotNull, (]
[default, :, return, expr, ;, }, Preconditions, ., checkNotNull, (, key, ), ;, Preconditions, ., checkNotNull, (, replacementString, ), ;]
[return, expr, ;, }, Preconditions, ., checkNotNull, (, key, ), ;, Preconditions, ., checkNotNull, (, replacementString, ), ;, recordReplacement, (]
[;, }, Preconditions, ., checkNotNull, (, key, ), ;, Preconditions, ., checkNotNull, (, replacementString, ), ;, recordReplacement, (, expr, ,]
[Preconditions, ., checkNotNull, (, key, ), ;, Preconditions, ., checkNotNull, (, replacementString, ), ;, recordReplacement, (, expr, ,, key, ,]
[(, key, ), ;, Preconditions, ., checkNotNull, (, replacementString, ), ;, recordReplacement, (, expr, ,, key, ,, replacementString, ), ;]
[(, key, ), ;, Preconditions, ., checkNotNull, (, replacementString, ), ;, recordReplacement, (, expr, ,, key, ,, replacementString, ), ;]
[Preconditions, ., checkNotNull, (, replacementString, ), ;, recordReplacement, (, expr, ,, key, ,, replacementString, ), ;, parent, ., replaceChild, (]
[checkNotNull, (, replacementString, ), ;, recordReplacement, (, expr, ,, key, ,, replacementString, ), ;, parent, ., replaceChild, (, expr, ,]
[), ;, recordReplacement, (, expr, ,, key, ,, replacementString, ), ;, parent, ., replaceChild, (, expr, ,, replacement, ), ;]
[), ;, recordReplacement, (, expr, ,, key, ,, replacementString, ), ;, parent, ., replaceChild, (, expr, ,, replacement, ), ;]
[,, replacementString, ), ;, parent, ., replaceChild, (, expr, ,, replacement, ), ;, compiler, ., reportCodeChange, (, ), ;, return]
[., reportCodeChange, (, ), ;, return, replacement, ;, }, private, String, getReplacement, (, String, key, ), {, Result, result, =]
[., reportCodeChange, (, ), ;, return, replacement, ;, }, private, String, getReplacement, (, String, key, ), {, Result, result, =]
[;, return, replacement, ;, }, private, String, getReplacement, (, String, key, ), {, Result, result, =, results, ., get, (]
[private, String, getReplacement, (, String, key, ), {, Result, result, =, results, ., get, (, key, ), ;, if, (]
[private, String, getReplacement, (, String, key, ), {, Result, result, =, results, ., get, (, key, ), ;, if, (]
[getReplacement, (, String, key, ), {, Result, result, =, results, ., get, (, key, ), ;, if, (, result, !=]
[), {, Result, result, =, results, ., get, (, key, ), ;, if, (, result, !=, null, ), {, return]
[), {, Result, result, =, results, ., get, (, key, ), ;, if, (, result, !=, null, ), {, return]
[(, key, ), ;, if, (, result, !=, null, ), {, return, result, ., replacement, ;, }, String, replacement, =]
[(, key, ), ;, if, (, result, !=, null, ), {, return, result, ., replacement, ;, }, String, replacement, =]
[result, !=, null, ), {, return, result, ., replacement, ;, }, String, replacement, =, nameGenerator, ., generateNextName, (, ), ;]
[null, ), {, return, result, ., replacement, ;, }, String, replacement, =, nameGenerator, ., generateNextName, (, ), ;, result, =]
[return, result, ., replacement, ;, }, String, replacement, =, nameGenerator, ., generateNextName, (, ), ;, result, =, new, Result, (]
[., replacement, ;, }, String, replacement, =, nameGenerator, ., generateNextName, (, ), ;, result, =, new, Result, (, key, ,]
[}, String, replacement, =, nameGenerator, ., generateNextName, (, ), ;, result, =, new, Result, (, key, ,, replacement, ), ;]
[}, String, replacement, =, nameGenerator, ., generateNextName, (, ), ;, result, =, new, Result, (, key, ,, replacement, ), ;]
[nameGenerator, ., generateNextName, (, ), ;, result, =, new, Result, (, key, ,, replacement, ), ;, results, ., put, (]
[generateNextName, (, ), ;, result, =, new, Result, (, key, ,, replacement, ), ;, results, ., put, (, key, ,]
[result, =, new, Result, (, key, ,, replacement, ), ;, results, ., put, (, key, ,, result, ), ;, return]
[replacement, ;, }, private, void, recordReplacement, (, Node, n, ,, String, key, ,, String, replacement, ), {, Result, result, =]
[replacement, ;, }, private, void, recordReplacement, (, Node, n, ,, String, key, ,, String, replacement, ), {, Result, result, =]
[void, recordReplacement, (, Node, n, ,, String, key, ,, String, replacement, ), {, Result, result, =, results, ., get, (]
[Node, n, ,, String, key, ,, String, replacement, ), {, Result, result, =, results, ., get, (, key, ), ;]
[Node, n, ,, String, key, ,, String, replacement, ), {, Result, result, =, results, ., get, (, key, ), ;]
[key, ,, String, replacement, ), {, Result, result, =, results, ., get, (, key, ), ;, Preconditions, ., checkState, (]
[key, ,, String, replacement, ), {, Result, result, =, results, ., get, (, key, ), ;, Preconditions, ., checkState, (]
[String, replacement, ), {, Result, result, =, results, ., get, (, key, ), ;, Preconditions, ., checkState, (, result, !=]
[{, Result, result, =, results, ., get, (, key, ), ;, Preconditions, ., checkState, (, result, !=, null, ), ;]
[{, Result, result, =, results, ., get, (, key, ), ;, Preconditions, ., checkState, (, result, !=, null, ), ;]
[results, ., get, (, key, ), ;, Preconditions, ., checkState, (, result, !=, null, ), ;, result, ., addLocation, (]
[n, ), ;, }, private, Node, buildReplacement, (, Node, expr, ,, Node, prefix, ,, StringBuilder, keyBuilder, ), {, switch, (]
[n, ), ;, }, private, Node, buildReplacement, (, Node, expr, ,, Node, prefix, ,, StringBuilder, keyBuilder, ), {, switch, (]
[Node, expr, ,, Node, prefix, ,, StringBuilder, keyBuilder, ), {, switch, (, expr, ., getType, (, ), ), {, case]
[Node, expr, ,, Node, prefix, ,, StringBuilder, keyBuilder, ), {, switch, (, expr, ., getType, (, ), ), {, case]
[keyBuilder, ), {, switch, (, expr, ., getType, (, ), ), {, case, Token, ., ADD, :, Node, left, =]
[keyBuilder, ), {, switch, (, expr, ., getType, (, ), ), {, case, Token, ., ADD, :, Node, left, =]
[), ), {, case, Token, ., ADD, :, Node, left, =, expr, ., getFirstChild, (, ), ;, Node, right, =]
[), ), {, case, Token, ., ADD, :, Node, left, =, expr, ., getFirstChild, (, ), ;, Node, right, =]
[ADD, :, Node, left, =, expr, ., getFirstChild, (, ), ;, Node, right, =, left, ., getNext, (, ), ;]
[Node, left, =, expr, ., getFirstChild, (, ), ;, Node, right, =, left, ., getNext, (, ), ;, prefix, =]
[=, expr, ., getFirstChild, (, ), ;, Node, right, =, left, ., getNext, (, ), ;, prefix, =, buildReplacement, (]
[., getFirstChild, (, ), ;, Node, right, =, left, ., getNext, (, ), ;, prefix, =, buildReplacement, (, left, ,]
[(, ), ;, Node, right, =, left, ., getNext, (, ), ;, prefix, =, buildReplacement, (, left, ,, prefix, ,]
[right, =, left, ., getNext, (, ), ;, prefix, =, buildReplacement, (, left, ,, prefix, ,, keyBuilder, ), ;, return]
[left, ., getNext, (, ), ;, prefix, =, buildReplacement, (, left, ,, prefix, ,, keyBuilder, ), ;, return, buildReplacement, (]
[getNext, (, ), ;, prefix, =, buildReplacement, (, left, ,, prefix, ,, keyBuilder, ), ;, return, buildReplacement, (, right, ,]
[), ;, prefix, =, buildReplacement, (, left, ,, prefix, ,, keyBuilder, ), ;, return, buildReplacement, (, right, ,, prefix, ,]
[buildReplacement, (, left, ,, prefix, ,, keyBuilder, ), ;, return, buildReplacement, (, right, ,, prefix, ,, keyBuilder, ), ;, case]
[buildReplacement, (, left, ,, prefix, ,, keyBuilder, ), ;, return, buildReplacement, (, right, ,, prefix, ,, keyBuilder, ), ;, case]
[prefix, ,, keyBuilder, ), ;, return, buildReplacement, (, right, ,, prefix, ,, keyBuilder, ), ;, case, Token, ., STRING, :]
[prefix, ,, keyBuilder, ), ;, return, buildReplacement, (, right, ,, prefix, ,, keyBuilder, ), ;, case, Token, ., STRING, :]
[;, return, buildReplacement, (, right, ,, prefix, ,, keyBuilder, ), ;, case, Token, ., STRING, :, keyBuilder, ., append, (]
[;, return, buildReplacement, (, right, ,, prefix, ,, keyBuilder, ), ;, case, Token, ., STRING, :, keyBuilder, ., append, (]
[keyBuilder, ), ;, case, Token, ., STRING, :, keyBuilder, ., append, (, expr, ., getString, (, ), ), ;, return]
[Token, ., STRING, :, keyBuilder, ., append, (, expr, ., getString, (, ), ), ;, return, prefix, ;, default, :]
[Token, ., STRING, :, keyBuilder, ., append, (, expr, ., getString, (, ), ), ;, return, prefix, ;, default, :]
[keyBuilder, ., append, (, expr, ., getString, (, ), ), ;, return, prefix, ;, default, :, keyBuilder, ., append, (]
[(, expr, ., getString, (, ), ), ;, return, prefix, ;, default, :, keyBuilder, ., append, (, placeholderToken, ), ;]
[., getString, (, ), ), ;, return, prefix, ;, default, :, keyBuilder, ., append, (, placeholderToken, ), ;, prefix, =]
[., getString, (, ), ), ;, return, prefix, ;, default, :, keyBuilder, ., append, (, placeholderToken, ), ;, prefix, =]
[), ;, return, prefix, ;, default, :, keyBuilder, ., append, (, placeholderToken, ), ;, prefix, =, IR, ., add, (]
[return, prefix, ;, default, :, keyBuilder, ., append, (, placeholderToken, ), ;, prefix, =, IR, ., add, (, prefix, ,]
[return, prefix, ;, default, :, keyBuilder, ., append, (, placeholderToken, ), ;, prefix, =, IR, ., add, (, prefix, ,]
[:, keyBuilder, ., append, (, placeholderToken, ), ;, prefix, =, IR, ., add, (, prefix, ,, IR, ., string, (]
[placeholderToken, ), ;, prefix, =, IR, ., add, (, prefix, ,, IR, ., string, (, placeholderToken, ), ), ;, return]
[placeholderToken, ), ;, prefix, =, IR, ., add, (, prefix, ,, IR, ., string, (, placeholderToken, ), ), ;, return]
[=, IR, ., add, (, prefix, ,, IR, ., string, (, placeholderToken, ), ), ;, return, IR, ., add, (]
[., add, (, prefix, ,, IR, ., string, (, placeholderToken, ), ), ;, return, IR, ., add, (, prefix, ,]
[., add, (, prefix, ,, IR, ., string, (, placeholderToken, ), ), ;, return, IR, ., add, (, prefix, ,]
[cloneTree, (, ), ), ;, }, }, private, String, getMethodFromDeclarationName, (, String, fullDeclarationName, ), {, String, [, ], parts, =]
[cloneTree, (, ), ), ;, }, }, private, String, getMethodFromDeclarationName, (, String, fullDeclarationName, ), {, String, [, ], parts, =]
[;, }, }, private, String, getMethodFromDeclarationName, (, String, fullDeclarationName, ), {, String, [, ], parts, =, fullDeclarationName, ., split, (]
[private, String, getMethodFromDeclarationName, (, String, fullDeclarationName, ), {, String, [, ], parts, =, fullDeclarationName, ., split, (, "\\.prototype\\.", ), ;]
[private, String, getMethodFromDeclarationName, (, String, fullDeclarationName, ), {, String, [, ], parts, =, fullDeclarationName, ., split, (, "\\.prototype\\.", ), ;]
[String, fullDeclarationName, ), {, String, [, ], parts, =, fullDeclarationName, ., split, (, "\\.prototype\\.", ), ;, Preconditions, ., checkState, (]
[String, fullDeclarationName, ), {, String, [, ], parts, =, fullDeclarationName, ., split, (, "\\.prototype\\.", ), ;, Preconditions, ., checkState, (]
[String, fullDeclarationName, ), {, String, [, ], parts, =, fullDeclarationName, ., split, (, "\\.prototype\\.", ), ;, Preconditions, ., checkState, (]
[String, fullDeclarationName, ), {, String, [, ], parts, =, fullDeclarationName, ., split, (, "\\.prototype\\.", ), ;, Preconditions, ., checkState, (]
[String, [, ], parts, =, fullDeclarationName, ., split, (, "\\.prototype\\.", ), ;, Preconditions, ., checkState, (, parts, ., length, ==]
[], parts, =, fullDeclarationName, ., split, (, "\\.prototype\\.", ), ;, Preconditions, ., checkState, (, parts, ., length, ==, 1, ||]
[], parts, =, fullDeclarationName, ., split, (, "\\.prototype\\.", ), ;, Preconditions, ., checkState, (, parts, ., length, ==, 1, ||]
[], parts, =, fullDeclarationName, ., split, (, "\\.prototype\\.", ), ;, Preconditions, ., checkState, (, parts, ., length, ==, 1, ||]
[., split, (, "\\.prototype\\.", ), ;, Preconditions, ., checkState, (, parts, ., length, ==, 1, ||, parts, ., length, ==]
[;, Preconditions, ., checkState, (, parts, ., length, ==, 1, ||, parts, ., length, ==, 2, ), ;, if, (]
[;, Preconditions, ., checkState, (, parts, ., length, ==, 1, ||, parts, ., length, ==, 2, ), ;, if, (]
[;, Preconditions, ., checkState, (, parts, ., length, ==, 1, ||, parts, ., length, ==, 2, ), ;, if, (]
[(, parts, ., length, ==, 1, ||, parts, ., length, ==, 2, ), ;, if, (, parts, ., length, ==]
[==, 1, ||, parts, ., length, ==, 2, ), ;, if, (, parts, ., length, ==, 2, ), {, return]
[==, 1, ||, parts, ., length, ==, 2, ), ;, if, (, parts, ., length, ==, 2, ), {, return]
[||, parts, ., length, ==, 2, ), ;, if, (, parts, ., length, ==, 2, ), {, return, parts, []
[2, ), ;, if, (, parts, ., length, ==, 2, ), {, return, parts, [, 1, ], ;, }, return]
[], ;, }, return, null, ;, }, private, String, getClassFromDeclarationName, (, String, fullDeclarationName, ), {, String, [, ], parts, =]
[], ;, }, return, null, ;, }, private, String, getClassFromDeclarationName, (, String, fullDeclarationName, ), {, String, [, ], parts, =]
[null, ;, }, private, String, getClassFromDeclarationName, (, String, fullDeclarationName, ), {, String, [, ], parts, =, fullDeclarationName, ., split, (]
[private, String, getClassFromDeclarationName, (, String, fullDeclarationName, ), {, String, [, ], parts, =, fullDeclarationName, ., split, (, "\\.prototype\\.", ), ;]
[private, String, getClassFromDeclarationName, (, String, fullDeclarationName, ), {, String, [, ], parts, =, fullDeclarationName, ., split, (, "\\.prototype\\.", ), ;]
[String, fullDeclarationName, ), {, String, [, ], parts, =, fullDeclarationName, ., split, (, "\\.prototype\\.", ), ;, Preconditions, ., checkState, (]
[String, fullDeclarationName, ), {, String, [, ], parts, =, fullDeclarationName, ., split, (, "\\.prototype\\.", ), ;, Preconditions, ., checkState, (]
[String, fullDeclarationName, ), {, String, [, ], parts, =, fullDeclarationName, ., split, (, "\\.prototype\\.", ), ;, Preconditions, ., checkState, (]
[String, fullDeclarationName, ), {, String, [, ], parts, =, fullDeclarationName, ., split, (, "\\.prototype\\.", ), ;, Preconditions, ., checkState, (]
[String, [, ], parts, =, fullDeclarationName, ., split, (, "\\.prototype\\.", ), ;, Preconditions, ., checkState, (, parts, ., length, ==]
[], parts, =, fullDeclarationName, ., split, (, "\\.prototype\\.", ), ;, Preconditions, ., checkState, (, parts, ., length, ==, 1, ||]
[], parts, =, fullDeclarationName, ., split, (, "\\.prototype\\.", ), ;, Preconditions, ., checkState, (, parts, ., length, ==, 1, ||]
[], parts, =, fullDeclarationName, ., split, (, "\\.prototype\\.", ), ;, Preconditions, ., checkState, (, parts, ., length, ==, 1, ||]
[., split, (, "\\.prototype\\.", ), ;, Preconditions, ., checkState, (, parts, ., length, ==, 1, ||, parts, ., length, ==]
[;, Preconditions, ., checkState, (, parts, ., length, ==, 1, ||, parts, ., length, ==, 2, ), ;, if, (]
[;, Preconditions, ., checkState, (, parts, ., length, ==, 1, ||, parts, ., length, ==, 2, ), ;, if, (]
[;, Preconditions, ., checkState, (, parts, ., length, ==, 1, ||, parts, ., length, ==, 2, ), ;, if, (]
[(, parts, ., length, ==, 1, ||, parts, ., length, ==, 2, ), ;, if, (, parts, ., length, ==]
[==, 1, ||, parts, ., length, ==, 2, ), ;, if, (, parts, ., length, ==, 2, ), {, return]
[==, 1, ||, parts, ., length, ==, 2, ), ;, if, (, parts, ., length, ==, 2, ), {, return]
[||, parts, ., length, ==, 2, ), ;, if, (, parts, ., length, ==, 2, ), {, return, parts, []
[2, ), ;, if, (, parts, ., length, ==, 2, ), {, return, parts, [, 0, ], ;, }, return]
[return, null, ;, }, private, void, parseConfiguration, (, List, <, String, >, functionsToInspect, ), {, for, (, String, function, :]
[parseConfiguration, (, List, <, String, >, functionsToInspect, ), {, for, (, String, function, :, functionsToInspect, ), {, Config, config, =]
[List, <, String, >, functionsToInspect, ), {, for, (, String, function, :, functionsToInspect, ), {, Config, config, =, parseConfiguration, (]
[>, functionsToInspect, ), {, for, (, String, function, :, functionsToInspect, ), {, Config, config, =, parseConfiguration, (, function, ), ;]
[>, functionsToInspect, ), {, for, (, String, function, :, functionsToInspect, ), {, Config, config, =, parseConfiguration, (, function, ), ;]
[for, (, String, function, :, functionsToInspect, ), {, Config, config, =, parseConfiguration, (, function, ), ;, functions, ., put, (]
[for, (, String, function, :, functionsToInspect, ), {, Config, config, =, parseConfiguration, (, function, ), ;, functions, ., put, (]
[:, functionsToInspect, ), {, Config, config, =, parseConfiguration, (, function, ), ;, functions, ., put, (, config, ., name, ,]
[=, parseConfiguration, (, function, ), ;, functions, ., put, (, config, ., name, ,, config, ), ;, String, method, =]
[(, function, ), ;, functions, ., put, (, config, ., name, ,, config, ), ;, String, method, =, getMethodFromDeclarationName, (]
[(, function, ), ;, functions, ., put, (, config, ., name, ,, config, ), ;, String, method, =, getMethodFromDeclarationName, (]
[(, config, ., name, ,, config, ), ;, String, method, =, getMethodFromDeclarationName, (, config, ., name, ), ;, if, (]
[(, config, ., name, ,, config, ), ;, String, method, =, getMethodFromDeclarationName, (, config, ., name, ), ;, if, (]
[., name, ,, config, ), ;, String, method, =, getMethodFromDeclarationName, (, config, ., name, ), ;, if, (, method, !=]
[config, ), ;, String, method, =, getMethodFromDeclarationName, (, config, ., name, ), ;, if, (, method, !=, null, ), {]
[config, ), ;, String, method, =, getMethodFromDeclarationName, (, config, ., name, ), ;, if, (, method, !=, null, ), {]
[method, =, getMethodFromDeclarationName, (, config, ., name, ), ;, if, (, method, !=, null, ), {, methods, ., put, (]
[getMethodFromDeclarationName, (, config, ., name, ), ;, if, (, method, !=, null, ), {, methods, ., put, (, method, ,]
[getMethodFromDeclarationName, (, config, ., name, ), ;, if, (, method, !=, null, ), {, methods, ., put, (, method, ,]
[,, config, ., name, ), ;, }, }, }, private, Config, parseConfiguration, (, String, function, ), {, int, first, =]
[,, config, ., name, ), ;, }, }, }, private, Config, parseConfiguration, (, String, function, ), {, int, first, =]
[), ;, }, }, }, private, Config, parseConfiguration, (, String, function, ), {, int, first, =, function, ., indexOf, (]
[Config, parseConfiguration, (, String, function, ), {, int, first, =, function, ., indexOf, (, '(', ), ;, int, last, =]
[Config, parseConfiguration, (, String, function, ), {, int, first, =, function, ., indexOf, (, '(', ), ;, int, last, =]
[function, ), {, int, first, =, function, ., indexOf, (, '(', ), ;, int, last, =, function, ., indexOf, (]
[int, first, =, function, ., indexOf, (, '(', ), ;, int, last, =, function, ., indexOf, (, ')', ), ;]
[int, first, =, function, ., indexOf, (, '(', ), ;, int, last, =, function, ., indexOf, (, ')', ), ;]
[., indexOf, (, '(', ), ;, int, last, =, function, ., indexOf, (, ')', ), ;, Preconditions, ., checkState, (]
[., indexOf, (, '(', ), ;, int, last, =, function, ., indexOf, (, ')', ), ;, Preconditions, ., checkState, (]
[., indexOf, (, '(', ), ;, int, last, =, function, ., indexOf, (, ')', ), ;, Preconditions, ., checkState, (]
[(, '(', ), ;, int, last, =, function, ., indexOf, (, ')', ), ;, Preconditions, ., checkState, (, first, !=]
['(', ), ;, int, last, =, function, ., indexOf, (, ')', ), ;, Preconditions, ., checkState, (, first, !=, -]
[;, int, last, =, function, ., indexOf, (, ')', ), ;, Preconditions, ., checkState, (, first, !=, -, 1, &&]
[;, int, last, =, function, ., indexOf, (, ')', ), ;, Preconditions, ., checkState, (, first, !=, -, 1, &&]
[last, =, function, ., indexOf, (, ')', ), ;, Preconditions, ., checkState, (, first, !=, -, 1, &&, last, !=]
[=, function, ., indexOf, (, ')', ), ;, Preconditions, ., checkState, (, first, !=, -, 1, &&, last, !=, -]
[), ;, Preconditions, ., checkState, (, first, !=, -, 1, &&, last, !=, -, 1, ), ;, String, name, =]
[), ;, Preconditions, ., checkState, (, first, !=, -, 1, &&, last, !=, -, 1, ), ;, String, name, =]
[checkState, (, first, !=, -, 1, &&, last, !=, -, 1, ), ;, String, name, =, function, ., substring, (]
[first, !=, -, 1, &&, last, !=, -, 1, ), ;, String, name, =, function, ., substring, (, 0, ,]
[!=, -, 1, ), ;, String, name, =, function, ., substring, (, 0, ,, first, ), ;, String, params, =]
[!=, -, 1, ), ;, String, name, =, function, ., substring, (, 0, ,, first, ), ;, String, params, =]
[;, String, name, =, function, ., substring, (, 0, ,, first, ), ;, String, params, =, function, ., substring, (]
[;, String, name, =, function, ., substring, (, 0, ,, first, ), ;, String, params, =, function, ., substring, (]
[name, =, function, ., substring, (, 0, ,, first, ), ;, String, params, =, function, ., substring, (, first, +]
[function, ., substring, (, 0, ,, first, ), ;, String, params, =, function, ., substring, (, first, +, 1, ,]
[first, ), ;, String, params, =, function, ., substring, (, first, +, 1, ,, last, ), ;, int, paramCount, =]
[=, function, ., substring, (, first, +, 1, ,, last, ), ;, int, paramCount, =, 0, ;, int, replacementParameter, =]
[function, ., substring, (, first, +, 1, ,, last, ), ;, int, paramCount, =, 0, ;, int, replacementParameter, =, -]
[,, last, ), ;, int, paramCount, =, 0, ;, int, replacementParameter, =, -, 1, ;, String, [, ], parts, =]
[,, last, ), ;, int, paramCount, =, 0, ;, int, replacementParameter, =, -, 1, ;, String, [, ], parts, =]
[int, paramCount, =, 0, ;, int, replacementParameter, =, -, 1, ;, String, [, ], parts, =, params, ., split, (]
[-, 1, ;, String, [, ], parts, =, params, ., split, (, ",", ), ;, for, (, String, param, :]
[String, [, ], parts, =, params, ., split, (, ",", ), ;, for, (, String, param, :, parts, ), {]
[String, [, ], parts, =, params, ., split, (, ",", ), ;, for, (, String, param, :, parts, ), {]
[params, ., split, (, ",", ), ;, for, (, String, param, :, parts, ), {, paramCount, ++, ;, if, (]
[params, ., split, (, ",", ), ;, for, (, String, param, :, parts, ), {, paramCount, ++, ;, if, (]
[",", ), ;, for, (, String, param, :, parts, ), {, paramCount, ++, ;, if, (, param, ., equals, (]
[(, String, param, :, parts, ), {, paramCount, ++, ;, if, (, param, ., equals, (, REPLACE_ALL_MARKER, ), ), {]
[(, String, param, :, parts, ), {, paramCount, ++, ;, if, (, param, ., equals, (, REPLACE_ALL_MARKER, ), ), {]
[parts, ), {, paramCount, ++, ;, if, (, param, ., equals, (, REPLACE_ALL_MARKER, ), ), {, Preconditions, ., checkState, (]
[parts, ), {, paramCount, ++, ;, if, (, param, ., equals, (, REPLACE_ALL_MARKER, ), ), {, Preconditions, ., checkState, (]
[parts, ), {, paramCount, ++, ;, if, (, param, ., equals, (, REPLACE_ALL_MARKER, ), ), {, Preconditions, ., checkState, (]
[{, paramCount, ++, ;, if, (, param, ., equals, (, REPLACE_ALL_MARKER, ), ), {, Preconditions, ., checkState, (, paramCount, ==]
[++, ;, if, (, param, ., equals, (, REPLACE_ALL_MARKER, ), ), {, Preconditions, ., checkState, (, paramCount, ==, 1, &&]
[++, ;, if, (, param, ., equals, (, REPLACE_ALL_MARKER, ), ), {, Preconditions, ., checkState, (, paramCount, ==, 1, &&]
[++, ;, if, (, param, ., equals, (, REPLACE_ALL_MARKER, ), ), {, Preconditions, ., checkState, (, paramCount, ==, 1, &&]
[param, ., equals, (, REPLACE_ALL_MARKER, ), ), {, Preconditions, ., checkState, (, paramCount, ==, 1, &&, parts, ., length, ==]
[(, REPLACE_ALL_MARKER, ), ), {, Preconditions, ., checkState, (, paramCount, ==, 1, &&, parts, ., length, ==, 1, ), ;]
[), ), {, Preconditions, ., checkState, (, paramCount, ==, 1, &&, parts, ., length, ==, 1, ), ;, replacementParameter, =]
[), ), {, Preconditions, ., checkState, (, paramCount, ==, 1, &&, parts, ., length, ==, 1, ), ;, replacementParameter, =]
[==, 1, &&, parts, ., length, ==, 1, ), ;, replacementParameter, =, Config, ., REPLACE_ALL_VALUE, ;, }, else, if, (]
[==, 1, &&, parts, ., length, ==, 1, ), ;, replacementParameter, =, Config, ., REPLACE_ALL_VALUE, ;, }, else, if, (]
[., length, ==, 1, ), ;, replacementParameter, =, Config, ., REPLACE_ALL_VALUE, ;, }, else, if, (, param, ., equals, (]
[), ;, replacementParameter, =, Config, ., REPLACE_ALL_VALUE, ;, }, else, if, (, param, ., equals, (, REPLACE_ONE_MARKER, ), ), {]
[), ;, replacementParameter, =, Config, ., REPLACE_ALL_VALUE, ;, }, else, if, (, param, ., equals, (, REPLACE_ONE_MARKER, ), ), {]
[Config, ., REPLACE_ALL_VALUE, ;, }, else, if, (, param, ., equals, (, REPLACE_ONE_MARKER, ), ), {, Preconditions, ., checkState, (]
[Config, ., REPLACE_ALL_VALUE, ;, }, else, if, (, param, ., equals, (, REPLACE_ONE_MARKER, ), ), {, Preconditions, ., checkState, (]
[REPLACE_ALL_VALUE, ;, }, else, if, (, param, ., equals, (, REPLACE_ONE_MARKER, ), ), {, Preconditions, ., checkState, (, replacementParameter, ==]
[;, }, else, if, (, param, ., equals, (, REPLACE_ONE_MARKER, ), ), {, Preconditions, ., checkState, (, replacementParameter, ==, -]
[if, (, param, ., equals, (, REPLACE_ONE_MARKER, ), ), {, Preconditions, ., checkState, (, replacementParameter, ==, -, 1, ), ;]
[param, ., equals, (, REPLACE_ONE_MARKER, ), ), {, Preconditions, ., checkState, (, replacementParameter, ==, -, 1, ), ;, replacementParameter, =]
[), ), {, Preconditions, ., checkState, (, replacementParameter, ==, -, 1, ), ;, replacementParameter, =, paramCount, ;, }, else, {]
[), ), {, Preconditions, ., checkState, (, replacementParameter, ==, -, 1, ), ;, replacementParameter, =, paramCount, ;, }, else, {]
[., checkState, (, replacementParameter, ==, -, 1, ), ;, replacementParameter, =, paramCount, ;, }, else, {, Preconditions, ., checkState, (]
[., checkState, (, replacementParameter, ==, -, 1, ), ;, replacementParameter, =, paramCount, ;, }, else, {, Preconditions, ., checkState, (]
[1, ), ;, replacementParameter, =, paramCount, ;, }, else, {, Preconditions, ., checkState, (, param, ., isEmpty, (, ), ,]
[;, replacementParameter, =, paramCount, ;, }, else, {, Preconditions, ., checkState, (, param, ., isEmpty, (, ), ,, "Unknown marker", ,]
[}, else, {, Preconditions, ., checkState, (, param, ., isEmpty, (, ), ,, "Unknown marker", ,, param, ), ;, }, }]
[}, else, {, Preconditions, ., checkState, (, param, ., isEmpty, (, ), ,, "Unknown marker", ,, param, ), ;, }, }]
[., checkState, (, param, ., isEmpty, (, ), ,, "Unknown marker", ,, param, ), ;, }, }, Preconditions, ., checkState, (]
[., checkState, (, param, ., isEmpty, (, ), ,, "Unknown marker", ,, param, ), ;, }, }, Preconditions, ., checkState, (]
[(, param, ., isEmpty, (, ), ,, "Unknown marker", ,, param, ), ;, }, }, Preconditions, ., checkState, (, replacementParameter, !=]
[param, ., isEmpty, (, ), ,, "Unknown marker", ,, param, ), ;, }, }, Preconditions, ., checkState, (, replacementParameter, !=, -]
[), ,, "Unknown marker", ,, param, ), ;, }, }, Preconditions, ., checkState, (, replacementParameter, !=, -, 1, ), ;, return]
[,, param, ), ;, }, }, Preconditions, ., checkState, (, replacementParameter, !=, -, 1, ), ;, return, new, Config, (]
[), ;, }, }, Preconditions, ., checkState, (, replacementParameter, !=, -, 1, ), ;, return, new, Config, (, name, ,]
[replacementParameter, ), ;, }, private, static, NameGenerator, createNameGenerator, (, Iterable, <, String, >, reserved, ), {, final, String, namePrefix, =]
[(, Iterable, <, String, >, reserved, ), {, final, String, namePrefix, =, "", ;, final, char, [, ], reservedChars, =]
[String, >, reserved, ), {, final, String, namePrefix, =, "", ;, final, char, [, ], reservedChars, =, new, char, []
[{, final, String, namePrefix, =, "", ;, final, char, [, ], reservedChars, =, new, char, [, 0, ], ;, return]
[namePrefix, =, "", ;, final, char, [, ], reservedChars, =, new, char, [, 0, ], ;, return, new, NameGenerator, (]
[namePrefix, =, "", ;, final, char, [, ], reservedChars, =, new, char, [, 0, ], ;, return, new, NameGenerator, (]
[final, char, [, ], reservedChars, =, new, char, [, 0, ], ;, return, new, NameGenerator, (, ImmutableSet, ., copyOf, (]
[], reservedChars, =, new, char, [, 0, ], ;, return, new, NameGenerator, (, ImmutableSet, ., copyOf, (, reserved, ), ,]
[=, new, char, [, 0, ], ;, return, new, NameGenerator, (, ImmutableSet, ., copyOf, (, reserved, ), ,, namePrefix, ,]
