[joda, ., time, ., format, ., DateTimeFormatter, ;, public, class, DateTimePerformance, {, private, static, class, Result, {, String, object, =]
[., DateTimeFormatter, ;, public, class, DateTimePerformance, {, private, static, class, Result, {, String, object, =, null, ;, String, name, =]
[DateTimePerformance, {, private, static, class, Result, {, String, object, =, null, ;, String, name, =, null, ;, long, time, =]
[Result, {, String, object, =, null, ;, String, name, =, null, ;, long, time, =, 0, ;, long, avg, =]
[null, ;, String, name, =, null, ;, long, time, =, 0, ;, long, avg, =, 0, ;, int, runs, =]
[time, =, 0, ;, long, avg, =, 0, ;, int, runs, =, 0, ;, }, private, static, int, AVERAGE, =]
[0, ;, int, runs, =, 0, ;, }, private, static, int, AVERAGE, =, 3, ;, private, static, int, COUNT_VERY_FAST, =]
[}, private, static, int, AVERAGE, =, 3, ;, private, static, int, COUNT_VERY_FAST, =, 5000000, ;, private, static, int, COUNT_FAST, =]
[;, private, static, int, COUNT_VERY_FAST, =, 5000000, ;, private, static, int, COUNT_FAST, =, 200000, ;, private, static, int, COUNT_SLOW, =]
[5000000, ;, private, static, int, COUNT_FAST, =, 200000, ;, private, static, int, COUNT_SLOW, =, 20000, ;, private, Map, results, =]
[private, static, int, COUNT_SLOW, =, 20000, ;, private, Map, results, =, new, HashMap, (, ), ;, private, List, resultList, =]
[results, =, new, HashMap, (, ), ;, private, List, resultList, =, new, ArrayList, (, ), ;, private, Result, result, =]
[;, private, List, resultList, =, new, ArrayList, (, ), ;, private, Result, result, =, null, ;, private, long, start, =]
[ArrayList, (, ), ;, private, Result, result, =, null, ;, private, long, start, =, 0, ;, private, long, end, =]
[;, private, long, end, =, 0, ;, public, static, void, main, (, String, [, ], args, ), {, try, {]
[String, [, ], args, ), {, try, {, new, DateTimePerformance, (, ), ;, }, catch, (, Throwable, th, ), {]
[String, [, ], args, ), {, try, {, new, DateTimePerformance, (, ), ;, }, catch, (, Throwable, th, ), {]
[(, Throwable, th, ), {, th, ., printStackTrace, (, ), ;, }, }, public, DateTimePerformance, (, ), throws, Exception, {]
[{, th, ., printStackTrace, (, ), ;, }, }, public, DateTimePerformance, (, ), throws, Exception, {, checkJodaConstructor1, (, ), ;]
[(, ), ;, }, }, public, DateTimePerformance, (, ), throws, Exception, {, checkJodaConstructor1, (, ), ;, checkJISOConstructor1, (, ), ;]
[}, public, DateTimePerformance, (, ), throws, Exception, {, checkJodaConstructor1, (, ), ;, checkJISOConstructor1, (, ), ;, checkGCalConstructor1, (, ), ;]
[), throws, Exception, {, checkJodaConstructor1, (, ), ;, checkJISOConstructor1, (, ), ;, checkGCalConstructor1, (, ), ;, checkDateConstructor1, (, ), ;]
[checkJodaConstructor1, (, ), ;, checkJISOConstructor1, (, ), ;, checkGCalConstructor1, (, ), ;, checkDateConstructor1, (, ), ;, checkJodaConstructor2, (, ), ;]
[checkJISOConstructor1, (, ), ;, checkGCalConstructor1, (, ), ;, checkDateConstructor1, (, ), ;, checkJodaConstructor2, (, ), ;, checkJISOConstructor2, (, ), ;]
[checkGCalConstructor1, (, ), ;, checkDateConstructor1, (, ), ;, checkJodaConstructor2, (, ), ;, checkJISOConstructor2, (, ), ;, checkGCalConstructor2, (, ), ;]
[checkDateConstructor1, (, ), ;, checkJodaConstructor2, (, ), ;, checkJISOConstructor2, (, ), ;, checkGCalConstructor2, (, ), ;, checkDateConstructor2, (, ), ;]
[checkJodaConstructor2, (, ), ;, checkJISOConstructor2, (, ), ;, checkGCalConstructor2, (, ), ;, checkDateConstructor2, (, ), ;, checkJodaConstructor3, (, ), ;]
[checkJISOConstructor2, (, ), ;, checkGCalConstructor2, (, ), ;, checkDateConstructor2, (, ), ;, checkJodaConstructor3, (, ), ;, checkJISOConstructor3, (, ), ;]
[checkGCalConstructor2, (, ), ;, checkDateConstructor2, (, ), ;, checkJodaConstructor3, (, ), ;, checkJISOConstructor3, (, ), ;, checkGCalConstructor3, (, ), ;]
[checkDateConstructor2, (, ), ;, checkJodaConstructor3, (, ), ;, checkJISOConstructor3, (, ), ;, checkGCalConstructor3, (, ), ;, checkDateConstructor3, (, ), ;]
[checkJodaConstructor3, (, ), ;, checkJISOConstructor3, (, ), ;, checkGCalConstructor3, (, ), ;, checkDateConstructor3, (, ), ;, checkJodaGetYear, (, ), ;]
[checkJISOConstructor3, (, ), ;, checkGCalConstructor3, (, ), ;, checkDateConstructor3, (, ), ;, checkJodaGetYear, (, ), ;, checkJISOGetYear, (, ), ;]
[checkGCalConstructor3, (, ), ;, checkDateConstructor3, (, ), ;, checkJodaGetYear, (, ), ;, checkJISOGetYear, (, ), ;, checkGCalGetYear, (, ), ;]
[checkDateConstructor3, (, ), ;, checkJodaGetYear, (, ), ;, checkJISOGetYear, (, ), ;, checkGCalGetYear, (, ), ;, checkDateGetYear, (, ), ;]
[checkJodaGetYear, (, ), ;, checkJISOGetYear, (, ), ;, checkGCalGetYear, (, ), ;, checkDateGetYear, (, ), ;, checkJodaGetHour, (, ), ;]
[checkJISOGetYear, (, ), ;, checkGCalGetYear, (, ), ;, checkDateGetYear, (, ), ;, checkJodaGetHour, (, ), ;, checkJISOGetHour, (, ), ;]
[checkGCalGetYear, (, ), ;, checkDateGetYear, (, ), ;, checkJodaGetHour, (, ), ;, checkJISOGetHour, (, ), ;, checkGCalGetHour, (, ), ;]
[checkDateGetYear, (, ), ;, checkJodaGetHour, (, ), ;, checkJISOGetHour, (, ), ;, checkGCalGetHour, (, ), ;, checkDateGetHour, (, ), ;]
[checkJodaGetHour, (, ), ;, checkJISOGetHour, (, ), ;, checkGCalGetHour, (, ), ;, checkDateGetHour, (, ), ;, checkJodaSetYear, (, ), ;]
[checkJISOGetHour, (, ), ;, checkGCalGetHour, (, ), ;, checkDateGetHour, (, ), ;, checkJodaSetYear, (, ), ;, checkJISOSetYear, (, ), ;]
[checkGCalGetHour, (, ), ;, checkDateGetHour, (, ), ;, checkJodaSetYear, (, ), ;, checkJISOSetYear, (, ), ;, checkGCalSetYear, (, ), ;]
[checkDateGetHour, (, ), ;, checkJodaSetYear, (, ), ;, checkJISOSetYear, (, ), ;, checkGCalSetYear, (, ), ;, checkDateSetYear, (, ), ;]
[checkJodaSetYear, (, ), ;, checkJISOSetYear, (, ), ;, checkGCalSetYear, (, ), ;, checkDateSetYear, (, ), ;, checkJodaSetGetYear, (, ), ;]
[checkJISOSetYear, (, ), ;, checkGCalSetYear, (, ), ;, checkDateSetYear, (, ), ;, checkJodaSetGetYear, (, ), ;, checkJISOSetGetYear, (, ), ;]
[checkGCalSetYear, (, ), ;, checkDateSetYear, (, ), ;, checkJodaSetGetYear, (, ), ;, checkJISOSetGetYear, (, ), ;, checkGCalSetGetYear, (, ), ;]
[checkDateSetYear, (, ), ;, checkJodaSetGetYear, (, ), ;, checkJISOSetGetYear, (, ), ;, checkGCalSetGetYear, (, ), ;, checkDateSetGetYear, (, ), ;]
[checkJodaSetGetYear, (, ), ;, checkJISOSetGetYear, (, ), ;, checkGCalSetGetYear, (, ), ;, checkDateSetGetYear, (, ), ;, checkJodaSetHour, (, ), ;]
[checkJISOSetGetYear, (, ), ;, checkGCalSetGetYear, (, ), ;, checkDateSetGetYear, (, ), ;, checkJodaSetHour, (, ), ;, checkJISOSetHour, (, ), ;]
[checkGCalSetGetYear, (, ), ;, checkDateSetGetYear, (, ), ;, checkJodaSetHour, (, ), ;, checkJISOSetHour, (, ), ;, checkGCalSetHour, (, ), ;]
[checkDateSetGetYear, (, ), ;, checkJodaSetHour, (, ), ;, checkJISOSetHour, (, ), ;, checkGCalSetHour, (, ), ;, checkDateSetHour, (, ), ;]
[checkJodaSetHour, (, ), ;, checkJISOSetHour, (, ), ;, checkGCalSetHour, (, ), ;, checkDateSetHour, (, ), ;, checkJodaSetGetHour, (, ), ;]
[checkJISOSetHour, (, ), ;, checkGCalSetHour, (, ), ;, checkDateSetHour, (, ), ;, checkJodaSetGetHour, (, ), ;, checkJISOSetGetHour, (, ), ;]
[checkGCalSetHour, (, ), ;, checkDateSetHour, (, ), ;, checkJodaSetGetHour, (, ), ;, checkJISOSetGetHour, (, ), ;, checkGCalSetGetHour, (, ), ;]
[checkDateSetHour, (, ), ;, checkJodaSetGetHour, (, ), ;, checkJISOSetGetHour, (, ), ;, checkGCalSetGetHour, (, ), ;, checkDateSetGetHour, (, ), ;]
[checkJodaSetGetHour, (, ), ;, checkJISOSetGetHour, (, ), ;, checkGCalSetGetHour, (, ), ;, checkDateSetGetHour, (, ), ;, checkJodaToString, (, ), ;]
[checkJISOSetGetHour, (, ), ;, checkGCalSetGetHour, (, ), ;, checkDateSetGetHour, (, ), ;, checkJodaToString, (, ), ;, checkJISOToString, (, ), ;]
[checkGCalSetGetHour, (, ), ;, checkDateSetGetHour, (, ), ;, checkJodaToString, (, ), ;, checkJISOToString, (, ), ;, checkGCalToString, (, ), ;]
[checkDateSetGetHour, (, ), ;, checkJodaToString, (, ), ;, checkJISOToString, (, ), ;, checkGCalToString, (, ), ;, checkDateToString, (, ), ;]
[checkDateSetGetHour, (, ), ;, checkJodaToString, (, ), ;, checkJISOToString, (, ), ;, checkGCalToString, (, ), ;, checkDateToString, (, ), ;]
[checkDateSetGetHour, (, ), ;, checkJodaToString, (, ), ;, checkJISOToString, (, ), ;, checkGCalToString, (, ), ;, checkDateToString, (, ), ;]
[), ;, checkJISOToString, (, ), ;, checkGCalToString, (, ), ;, checkDateToString, (, ), ;, System, ., out, ., println, (]
[checkGCalToString, (, ), ;, checkDateToString, (, ), ;, System, ., out, ., println, (, "", ), ;, long, jodaTotal, =]
[(, ), ;, System, ., out, ., println, (, "", ), ;, long, jodaTotal, =, 0, ;, long, jisoTotal, =]
[out, ., println, (, "", ), ;, long, jodaTotal, =, 0, ;, long, jisoTotal, =, 0, ;, long, gcalTotal, =]
[), ;, long, jodaTotal, =, 0, ;, long, jisoTotal, =, 0, ;, long, gcalTotal, =, 0, ;, long, dateTotal, =]
[long, jisoTotal, =, 0, ;, long, gcalTotal, =, 0, ;, long, dateTotal, =, 0, ;, for, (, Iterator, it, =]
[long, jisoTotal, =, 0, ;, long, gcalTotal, =, 0, ;, long, dateTotal, =, 0, ;, for, (, Iterator, it, =]
[gcalTotal, =, 0, ;, long, dateTotal, =, 0, ;, for, (, Iterator, it, =, resultList, ., iterator, (, ), ;]
[gcalTotal, =, 0, ;, long, dateTotal, =, 0, ;, for, (, Iterator, it, =, resultList, ., iterator, (, ), ;]
[Iterator, it, =, resultList, ., iterator, (, ), ;, it, ., hasNext, (, ), ;, ), {, Result, res, =]
[resultList, ., iterator, (, ), ;, it, ., hasNext, (, ), ;, ), {, Result, res, =, (, Result, )]
[resultList, ., iterator, (, ), ;, it, ., hasNext, (, ), ;, ), {, Result, res, =, (, Result, )]
[it, ., hasNext, (, ), ;, ), {, Result, res, =, (, Result, ), it, ., next, (, ), ;]
[it, ., hasNext, (, ), ;, ), {, Result, res, =, (, Result, ), it, ., next, (, ), ;]
[it, ., hasNext, (, ), ;, ), {, Result, res, =, (, Result, ), it, ., next, (, ), ;]
[), {, Result, res, =, (, Result, ), it, ., next, (, ), ;, System, ., out, ., println, (]
[), {, Result, res, =, (, Result, ), it, ., next, (, ), ;, System, ., out, ., println, (]
[), {, Result, res, =, (, Result, ), it, ., next, (, ), ;, System, ., out, ., println, (]
[), {, Result, res, =, (, Result, ), it, ., next, (, ), ;, System, ., out, ., println, (]
[), {, Result, res, =, (, Result, ), it, ., next, (, ), ;, System, ., out, ., println, (]
[), {, Result, res, =, (, Result, ), it, ., next, (, ), ;, System, ., out, ., println, (]
[), {, Result, res, =, (, Result, ), it, ., next, (, ), ;, System, ., out, ., println, (]
[=, (, Result, ), it, ., next, (, ), ;, System, ., out, ., println, (, res, ., object, +]
[Result, ), it, ., next, (, ), ;, System, ., out, ., println, (, res, ., object, +, ".", +]
[Result, ), it, ., next, (, ), ;, System, ., out, ., println, (, res, ., object, +, ".", +]
[next, (, ), ;, System, ., out, ., println, (, res, ., object, +, ".", +, res, ., name, +]
[), ;, System, ., out, ., println, (, res, ., object, +, ".", +, res, ., name, +, ": ", +]
[), ;, System, ., out, ., println, (, res, ., object, +, ".", +, res, ., name, +, ": ", +]
[out, ., println, (, res, ., object, +, ".", +, res, ., name, +, ": ", +, res, ., avg, +]
[., object, +, ".", +, res, ., name, +, ": ", +, res, ., avg, +, "ns", ), ;, if, (]
[., object, +, ".", +, res, ., name, +, ": ", +, res, ., avg, +, "ns", ), ;, if, (]
[., object, +, ".", +, res, ., name, +, ": ", +, res, ., avg, +, "ns", ), ;, if, (]
[., name, +, ": ", +, res, ., avg, +, "ns", ), ;, if, (, res, ., object, ., equals, (]
[+, res, ., avg, +, "ns", ), ;, if, (, res, ., object, ., equals, (, "Joda", ), ), {]
[., avg, +, "ns", ), ;, if, (, res, ., object, ., equals, (, "Joda", ), ), {, jodaTotal, +=]
[., avg, +, "ns", ), ;, if, (, res, ., object, ., equals, (, "Joda", ), ), {, jodaTotal, +=]
[res, ., object, ., equals, (, "Joda", ), ), {, jodaTotal, +=, res, ., avg, ;, }, else, if, (]
[res, ., object, ., equals, (, "Joda", ), ), {, jodaTotal, +=, res, ., avg, ;, }, else, if, (]
[res, ., object, ., equals, (, "Joda", ), ), {, jodaTotal, +=, res, ., avg, ;, }, else, if, (]
["Joda", ), ), {, jodaTotal, +=, res, ., avg, ;, }, else, if, (, res, ., object, ., equals, (]
[jodaTotal, +=, res, ., avg, ;, }, else, if, (, res, ., object, ., equals, (, "JISO", ), ), {]
[res, ., avg, ;, }, else, if, (, res, ., object, ., equals, (, "JISO", ), ), {, jisoTotal, +=]
[res, ., avg, ;, }, else, if, (, res, ., object, ., equals, (, "JISO", ), ), {, jisoTotal, +=]
[res, ., object, ., equals, (, "JISO", ), ), {, jisoTotal, +=, res, ., avg, ;, }, else, if, (]
[res, ., object, ., equals, (, "JISO", ), ), {, jisoTotal, +=, res, ., avg, ;, }, else, if, (]
[res, ., object, ., equals, (, "JISO", ), ), {, jisoTotal, +=, res, ., avg, ;, }, else, if, (]
["JISO", ), ), {, jisoTotal, +=, res, ., avg, ;, }, else, if, (, res, ., object, ., equals, (]
[jisoTotal, +=, res, ., avg, ;, }, else, if, (, res, ., object, ., equals, (, "GCal", ), ), {]
[res, ., avg, ;, }, else, if, (, res, ., object, ., equals, (, "GCal", ), ), {, gcalTotal, +=]
[res, ., avg, ;, }, else, if, (, res, ., object, ., equals, (, "GCal", ), ), {, gcalTotal, +=]
[res, ., object, ., equals, (, "GCal", ), ), {, gcalTotal, +=, res, ., avg, ;, }, else, if, (]
[res, ., object, ., equals, (, "GCal", ), ), {, gcalTotal, +=, res, ., avg, ;, }, else, if, (]
[res, ., object, ., equals, (, "GCal", ), ), {, gcalTotal, +=, res, ., avg, ;, }, else, if, (]
["GCal", ), ), {, gcalTotal, +=, res, ., avg, ;, }, else, if, (, res, ., object, ., equals, (]
[gcalTotal, +=, res, ., avg, ;, }, else, if, (, res, ., object, ., equals, (, "Date", ), ), {]
[res, ., avg, ;, }, else, if, (, res, ., object, ., equals, (, "Date", ), ), {, dateTotal, +=]
[res, ., avg, ;, }, else, if, (, res, ., object, ., equals, (, "Date", ), ), {, dateTotal, +=]
[}, else, if, (, res, ., object, ., equals, (, "Date", ), ), {, dateTotal, +=, res, ., avg, ;]
[}, else, if, (, res, ., object, ., equals, (, "Date", ), ), {, dateTotal, +=, res, ., avg, ;]
[}, else, if, (, res, ., object, ., equals, (, "Date", ), ), {, dateTotal, +=, res, ., avg, ;]
[object, ., equals, (, "Date", ), ), {, dateTotal, +=, res, ., avg, ;, System, ., out, ., println, (]
[), ), {, dateTotal, +=, res, ., avg, ;, System, ., out, ., println, (, "", ), ;, }, }]
[), ), {, dateTotal, +=, res, ., avg, ;, System, ., out, ., println, (, "", ), ;, }, }]
[), ), {, dateTotal, +=, res, ., avg, ;, System, ., out, ., println, (, "", ), ;, }, }]
[., avg, ;, System, ., out, ., println, (, "", ), ;, }, }, System, ., out, ., println, (]
[., avg, ;, System, ., out, ., println, (, "", ), ;, }, }, System, ., out, ., println, (]
[;, System, ., out, ., println, (, "", ), ;, }, }, System, ., out, ., println, (, "Joda: ", +]
[out, ., println, (, "", ), ;, }, }, System, ., out, ., println, (, "Joda: ", +, jodaTotal, ), ;]
[out, ., println, (, "", ), ;, }, }, System, ., out, ., println, (, "Joda: ", +, jodaTotal, ), ;]
[out, ., println, (, "", ), ;, }, }, System, ., out, ., println, (, "Joda: ", +, jodaTotal, ), ;]
[;, }, }, System, ., out, ., println, (, "Joda: ", +, jodaTotal, ), ;, System, ., out, ., println, (]
[;, }, }, System, ., out, ., println, (, "Joda: ", +, jodaTotal, ), ;, System, ., out, ., println, (]
[}, System, ., out, ., println, (, "Joda: ", +, jodaTotal, ), ;, System, ., out, ., println, (, "JISO: ", +]
[out, ., println, (, "Joda: ", +, jodaTotal, ), ;, System, ., out, ., println, (, "JISO: ", +, jisoTotal, ), ;]
[out, ., println, (, "Joda: ", +, jodaTotal, ), ;, System, ., out, ., println, (, "JISO: ", +, jisoTotal, ), ;]
[out, ., println, (, "Joda: ", +, jodaTotal, ), ;, System, ., out, ., println, (, "JISO: ", +, jisoTotal, ), ;]
[jodaTotal, ), ;, System, ., out, ., println, (, "JISO: ", +, jisoTotal, ), ;, System, ., out, ., println, (]
[jodaTotal, ), ;, System, ., out, ., println, (, "JISO: ", +, jisoTotal, ), ;, System, ., out, ., println, (]
[;, System, ., out, ., println, (, "JISO: ", +, jisoTotal, ), ;, System, ., out, ., println, (, "GCal: ", +]
[out, ., println, (, "JISO: ", +, jisoTotal, ), ;, System, ., out, ., println, (, "GCal: ", +, gcalTotal, ), ;]
[out, ., println, (, "JISO: ", +, jisoTotal, ), ;, System, ., out, ., println, (, "GCal: ", +, gcalTotal, ), ;]
[out, ., println, (, "JISO: ", +, jisoTotal, ), ;, System, ., out, ., println, (, "GCal: ", +, gcalTotal, ), ;]
[jisoTotal, ), ;, System, ., out, ., println, (, "GCal: ", +, gcalTotal, ), ;, System, ., out, ., println, (]
[jisoTotal, ), ;, System, ., out, ., println, (, "GCal: ", +, gcalTotal, ), ;, System, ., out, ., println, (]
[;, System, ., out, ., println, (, "GCal: ", +, gcalTotal, ), ;, System, ., out, ., println, (, "Date: ", +]
[., out, ., println, (, "Date: ", +, dateTotal, ), ;, }, private, void, checkJodaConstructor1, (, ), {, int, COUNT, =]
["Date: ", +, dateTotal, ), ;, }, private, void, checkJodaConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =]
[), ;, }, private, void, checkJodaConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (]
[), ;, }, private, void, checkJodaConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (]
[COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, int, count, =]
[new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, int, count, =, 0, ;, for, (, int, i, =]
[(, GJChronology, ., getInstance, (, ), ), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;]
[(, GJChronology, ., getInstance, (, ), ), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;]
[., getInstance, (, ), ), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[(, ), ), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[(, ), ), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "new()", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "new()", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "new()", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Joda", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Joda", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Joda", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["Joda", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =]
[for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (]
[for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (]
[COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, if, (]
[COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, if, (]
[COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, if, (]
[++, ), {, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, if, (, count, ++, <]
[dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, if, (, count, ++, <, 0, ), {]
[dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, if, (, count, ++, <, 0, ), {]
[dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, if, (, count, ++, <, 0, ), {]
[., getInstance, (, ), ), ;, if, (, count, ++, <, 0, ), {, System, ., out, ., println, (]
[;, if, (, count, ++, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[(, count, ++, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOConstructor1, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJISOConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =]
[checkJISOConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (, ), ;, int, count, =]
[COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (, ), ;, int, count, =, 0, ;, for, (, int, i, =]
[DateTime, dt, =, new, DateTime, (, ), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;]
[DateTime, dt, =, new, DateTime, (, ), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;]
[=, new, DateTime, (, ), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[DateTime, (, ), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[DateTime, (, ), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "new()", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "new()", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "new()", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "JISO", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "JISO", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "JISO", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["JISO", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, ), ;, if, (]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, ), ;, if, (]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, ), ;, if, (]
[j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, ), ;, if, (, count, ++, <]
[;, j, ++, ), {, dt, =, new, DateTime, (, ), ;, if, (, count, ++, <, 0, ), {]
[;, j, ++, ), {, dt, =, new, DateTime, (, ), ;, if, (, count, ++, <, 0, ), {]
[;, j, ++, ), {, dt, =, new, DateTime, (, ), ;, if, (, count, ++, <, 0, ), {]
[=, new, DateTime, (, ), ;, if, (, count, ++, <, 0, ), {, System, ., out, ., println, (]
[;, if, (, count, ++, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[(, count, ++, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalConstructor1, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkGCalConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =]
[checkGCalConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, int, count, =]
[COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, int, count, =, 0, ;, for, (, int, i, =]
[GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;]
[GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;]
[=, new, GregorianCalendar, (, ), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[GregorianCalendar, (, ), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[GregorianCalendar, (, ), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "new()", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "new()", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "new()", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "GCal", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "GCal", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "GCal", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["GCal", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar, (, ), ;, if, (]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar, (, ), ;, if, (]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar, (, ), ;, if, (]
[j, <, COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar, (, ), ;, if, (, count, ++, <]
[;, j, ++, ), {, dt, =, new, GregorianCalendar, (, ), ;, if, (, count, ++, <, 0, ), {]
[;, j, ++, ), {, dt, =, new, GregorianCalendar, (, ), ;, if, (, count, ++, <, 0, ), {]
[;, j, ++, ), {, dt, =, new, GregorianCalendar, (, ), ;, if, (, count, ++, <, 0, ), {]
[=, new, GregorianCalendar, (, ), ;, if, (, count, ++, <, 0, ), {, System, ., out, ., println, (]
[;, if, (, count, ++, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[(, count, ++, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateConstructor1, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkDateConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW, ;, Date, dt, =]
[checkDateConstructor1, (, ), {, int, COUNT, =, COUNT_SLOW, ;, Date, dt, =, new, Date, (, ), ;, int, count, =]
[COUNT_SLOW, ;, Date, dt, =, new, Date, (, ), ;, int, count, =, 0, ;, for, (, int, i, =]
[Date, dt, =, new, Date, (, ), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;]
[Date, dt, =, new, Date, (, ), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;]
[=, new, Date, (, ), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[Date, (, ), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[Date, (, ), ;, int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[int, count, =, 0, ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "new()", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "new()", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "new()", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Date", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Date", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Date", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["Date", ,, "new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["new()", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, Date, (, ), ;, if, (]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, Date, (, ), ;, if, (]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, Date, (, ), ;, if, (]
[j, <, COUNT, ;, j, ++, ), {, dt, =, new, Date, (, ), ;, if, (, count, ++, <]
[;, j, ++, ), {, dt, =, new, Date, (, ), ;, if, (, count, ++, <, 0, ), {]
[;, j, ++, ), {, dt, =, new, Date, (, ), ;, if, (, count, ++, <, 0, ), {]
[;, j, ++, ), {, dt, =, new, Date, (, ), ;, if, (, count, ++, <, 0, ), {]
[=, new, Date, (, ), ;, if, (, count, ++, <, 0, ), {, System, ., out, ., println, (]
[;, if, (, count, ++, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[(, count, ++, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaConstructor2, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJodaConstructor2, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =]
[;, }, }, private, void, checkJodaConstructor2, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (]
[}, private, void, checkJodaConstructor2, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, 12345L, ,]
[}, private, void, checkJodaConstructor2, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, 12345L, ,]
[DateTime, dt, =, new, DateTime, (, 12345L, ,, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =]
[=, new, DateTime, (, 12345L, ,, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;]
[=, new, DateTime, (, 12345L, ,, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;]
[DateTime, (, 12345L, ,, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[12345L, ,, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[12345L, ,, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "new(millis)", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Joda", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Joda", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Joda", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["Joda", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =]
[for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (]
[int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, 12345L, ,]
[int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, 12345L, ,]
[j, ++, ), {, dt, =, new, DateTime, (, 12345L, ,, GJChronology, ., getInstance, (, ), ), ;, if, (]
[j, ++, ), {, dt, =, new, DateTime, (, 12345L, ,, GJChronology, ., getInstance, (, ), ), ;, if, (]
[), {, dt, =, new, DateTime, (, 12345L, ,, GJChronology, ., getInstance, (, ), ), ;, if, (, dt, ==]
[=, new, DateTime, (, 12345L, ,, GJChronology, ., getInstance, (, ), ), ;, if, (, dt, ==, null, ), {]
[=, new, DateTime, (, 12345L, ,, GJChronology, ., getInstance, (, ), ), ;, if, (, dt, ==, null, ), {]
[=, new, DateTime, (, 12345L, ,, GJChronology, ., getInstance, (, ), ), ;, if, (, dt, ==, null, ), {]
[GJChronology, ., getInstance, (, ), ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOConstructor2, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJISOConstructor2, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =]
[;, }, }, private, void, checkJISOConstructor2, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (]
[{, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, 12345L, ), ;, for, (, int, i, =]
[COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, 12345L, ), ;, for, (, int, i, =, 0, ;]
[COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, 12345L, ), ;, for, (, int, i, =, 0, ;]
[COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, 12345L, ), ;, for, (, int, i, =, 0, ;, i, <]
[DateTime, dt, =, new, DateTime, (, 12345L, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[DateTime, dt, =, new, DateTime, (, 12345L, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[DateTime, (, 12345L, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[12345L, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "new(millis)", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "JISO", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "JISO", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "JISO", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["JISO", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =]
[for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (]
[0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, 12345L, ), ;, if, (]
[0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, 12345L, ), ;, if, (]
[j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, 12345L, ), ;, if, (, dt, ==]
[;, j, ++, ), {, dt, =, new, DateTime, (, 12345L, ), ;, if, (, dt, ==, null, ), {]
[;, j, ++, ), {, dt, =, new, DateTime, (, 12345L, ), ;, if, (, dt, ==, null, ), {]
[;, j, ++, ), {, dt, =, new, DateTime, (, 12345L, ), ;, if, (, dt, ==, null, ), {]
[=, new, DateTime, (, 12345L, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalConstructor2, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkGCalConstructor2, (, ), {, int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =]
[), {, int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "new(millis)", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "GCal", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "GCal", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "GCal", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["GCal", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =]
[int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar, (, ), ;]
[int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar, (, ), ;]
[;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar, (, ), ;, dt, ., setTime, (]
[COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar, (, ), ;, dt, ., setTime, (, new, Date, (]
[dt, =, new, GregorianCalendar, (, ), ;, dt, ., setTime, (, new, Date, (, 12345L, ), ), ;, if, (]
[dt, =, new, GregorianCalendar, (, ), ;, dt, ., setTime, (, new, Date, (, 12345L, ), ), ;, if, (]
[new, GregorianCalendar, (, ), ;, dt, ., setTime, (, new, Date, (, 12345L, ), ), ;, if, (, dt, ==]
[), ;, dt, ., setTime, (, new, Date, (, 12345L, ), ), ;, if, (, dt, ==, null, ), {]
[), ;, dt, ., setTime, (, new, Date, (, 12345L, ), ), ;, if, (, dt, ==, null, ), {]
[), ;, dt, ., setTime, (, new, Date, (, 12345L, ), ), ;, if, (, dt, ==, null, ), {]
[new, Date, (, 12345L, ), ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateConstructor2, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkDateConstructor2, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, Date, dt, =]
[), {, int, COUNT, =, COUNT_VERY_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_VERY_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_VERY_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_VERY_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "new(millis)", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Date", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Date", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Date", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["Date", ,, "new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["new(millis)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =]
[for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, Date, (]
[0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, Date, (, 12345L, ), ;, if, (]
[0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, Date, (, 12345L, ), ;, if, (]
[j, <, COUNT, ;, j, ++, ), {, dt, =, new, Date, (, 12345L, ), ;, if, (, dt, ==]
[;, j, ++, ), {, dt, =, new, Date, (, 12345L, ), ;, if, (, dt, ==, null, ), {]
[;, j, ++, ), {, dt, =, new, Date, (, 12345L, ), ;, if, (, dt, ==, null, ), {]
[;, j, ++, ), {, dt, =, new, Date, (, 12345L, ), ;, if, (, dt, ==, null, ), {]
[=, new, Date, (, 12345L, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaConstructor3, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJodaConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =]
[;, }, }, private, void, checkJodaConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (]
[}, private, void, checkJodaConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (, 1972, ,]
[void, checkJodaConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (, 1972, ,, 10, ,]
[(, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,]
[{, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,]
[COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,]
[COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,]
[DateTime, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[DateTime, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[0, ,, 0, ,, 0, ,, 0, ,, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =]
[0, ,, 0, ,, 0, ,, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;]
[0, ,, 0, ,, 0, ,, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;]
[0, ,, 0, ,, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[0, ,, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[0, ,, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "new(YMD)", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Joda", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Joda", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Joda", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["Joda", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =]
[for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (]
[int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, 1972, ,]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, 1972, ,, 10, ,]
[;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,]
[<, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,]
[;, j, ++, ), {, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,]
[++, ), {, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,]
[{, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[{, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, GJChronology, ., getInstance, (, ), ), ;, if, (]
[,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, GJChronology, ., getInstance, (, ), ), ;, if, (]
[,, 0, ,, 0, ,, 0, ,, 0, ,, GJChronology, ., getInstance, (, ), ), ;, if, (, dt, ==]
[0, ,, 0, ,, 0, ,, GJChronology, ., getInstance, (, ), ), ;, if, (, dt, ==, null, ), {]
[0, ,, 0, ,, 0, ,, GJChronology, ., getInstance, (, ), ), ;, if, (, dt, ==, null, ), {]
[0, ,, 0, ,, 0, ,, GJChronology, ., getInstance, (, ), ), ;, if, (, dt, ==, null, ), {]
[GJChronology, ., getInstance, (, ), ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOConstructor3, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJISOConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =]
[;, }, }, private, void, checkJISOConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (]
[}, private, void, checkJISOConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (, 1972, ,]
[void, checkJISOConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (, 1972, ,, 10, ,]
[(, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,]
[{, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,]
[COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,]
[COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,]
[1972, ,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ), ;, for, (, int, i, =]
[10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ), ;, for, (, int, i, =, 0, ;]
[10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ), ;, for, (, int, i, =, 0, ;]
[1, ,, 0, ,, 0, ,, 0, ,, 0, ), ;, for, (, int, i, =, 0, ;, i, <]
[0, ,, 0, ,, 0, ,, 0, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[0, ,, 0, ,, 0, ,, 0, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[0, ,, 0, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[0, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "new(YMD)", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "JISO", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "JISO", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "JISO", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["JISO", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =]
[for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (]
[int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, 1972, ,]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, 1972, ,, 10, ,]
[;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,]
[<, COUNT, ;, j, ++, ), {, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,]
[;, j, ++, ), {, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,]
[++, ), {, dt, =, new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,]
[new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ), ;, if, (]
[new, DateTime, (, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ), ;, if, (]
[(, 1972, ,, 10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ), ;, if, (, dt, ==]
[10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ), ;, if, (, dt, ==, null, ), {]
[10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ), ;, if, (, dt, ==, null, ), {]
[10, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ), ;, if, (, dt, ==, null, ), {]
[0, ,, 0, ,, 0, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalConstructor3, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkGCalConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =]
[;, }, }, private, void, checkGCalConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (]
[}, private, void, checkGCalConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, 1972, ,]
[void, checkGCalConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, 1972, ,, 10, ,]
[COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, 1972, ,, 10, ,, 1, ), ;, for, (, int, i, =]
[GregorianCalendar, dt, =, new, GregorianCalendar, (, 1972, ,, 10, ,, 1, ), ;, for, (, int, i, =, 0, ;]
[GregorianCalendar, dt, =, new, GregorianCalendar, (, 1972, ,, 10, ,, 1, ), ;, for, (, int, i, =, 0, ;]
[=, new, GregorianCalendar, (, 1972, ,, 10, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[GregorianCalendar, (, 1972, ,, 10, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[GregorianCalendar, (, 1972, ,, 10, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[10, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[1, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "new(YMD)", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "GCal", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "GCal", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "GCal", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["GCal", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =]
[for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar, (]
[int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar, (, 1972, ,]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar, (, 1972, ,, 10, ,]
[COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar, (, 1972, ,, 10, ,, 1, ), ;, if, (]
[COUNT, ;, j, ++, ), {, dt, =, new, GregorianCalendar, (, 1972, ,, 10, ,, 1, ), ;, if, (]
[j, ++, ), {, dt, =, new, GregorianCalendar, (, 1972, ,, 10, ,, 1, ), ;, if, (, dt, ==]
[{, dt, =, new, GregorianCalendar, (, 1972, ,, 10, ,, 1, ), ;, if, (, dt, ==, null, ), {]
[{, dt, =, new, GregorianCalendar, (, 1972, ,, 10, ,, 1, ), ;, if, (, dt, ==, null, ), {]
[{, dt, =, new, GregorianCalendar, (, 1972, ,, 10, ,, 1, ), ;, if, (, dt, ==, null, ), {]
[1972, ,, 10, ,, 1, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateConstructor3, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkDateConstructor3, (, ), {, int, COUNT, =, COUNT_SLOW, ;, Date, dt, =]
[), {, int, COUNT, =, COUNT_SLOW, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_SLOW, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_SLOW, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_SLOW, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "new(YMD)", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Date", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Date", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Date", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["Date", ,, "new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["new(YMD)", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =]
[for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, Date, (]
[int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, Date, (, 1972, ,]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, new, Date, (, 1972, ,, 10, ,]
[COUNT, ;, j, ++, ), {, dt, =, new, Date, (, 1972, ,, 10, ,, 1, ), ;, if, (]
[COUNT, ;, j, ++, ), {, dt, =, new, Date, (, 1972, ,, 10, ,, 1, ), ;, if, (]
[j, ++, ), {, dt, =, new, Date, (, 1972, ,, 10, ,, 1, ), ;, if, (, dt, ==]
[{, dt, =, new, Date, (, 1972, ,, 10, ,, 1, ), ;, if, (, dt, ==, null, ), {]
[{, dt, =, new, Date, (, 1972, ,, 10, ,, 1, ), ;, if, (, dt, ==, null, ), {]
[{, dt, =, new, Date, (, 1972, ,, 10, ,, 1, ), ;, if, (, dt, ==, null, ), {]
[1972, ,, 10, ,, 1, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaGetYear, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJodaGetYear, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =]
[;, }, }, private, void, checkJodaGetYear, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (]
[;, }, }, private, void, checkJodaGetYear, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (]
[COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =]
[DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;]
[DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;]
[=, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "getYear", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "getYear", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "getYear", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Joda", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Joda", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Joda", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==]
[j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==, 0, ), {]
[j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==, 0, ), {]
[j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==, 0, ), {]
[=, dt, ., getYear, (, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (]
[), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOGetYear, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJISOGetYear, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =]
[), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "getYear", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "getYear", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "getYear", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "JISO", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "JISO", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "JISO", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==]
[j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==, 0, ), {]
[j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==, 0, ), {]
[j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==, 0, ), {]
[=, dt, ., getYear, (, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (]
[), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalGetYear, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkGCalGetYear, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =]
[), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "getYear", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "getYear", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "getYear", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "GCal", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "GCal", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "GCal", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (]
[int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (]
[COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, ), ;, if, (]
[COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, ), ;, if, (]
[j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, ), ;, if, (, val, ==]
[{, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, ), ;, if, (, val, ==, 0, ), {]
[{, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, ), ;, if, (, val, ==, 0, ), {]
[{, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, ), ;, if, (, val, ==, 0, ), {]
[get, (, GregorianCalendar, ., YEAR, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (]
[), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateGetYear, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkDateGetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =]
[), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "getYear", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "getYear", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "getYear", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Date", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Date", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Date", ,, "getYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==]
[j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==, 0, ), {]
[j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==, 0, ), {]
[j, ++, ), {, int, val, =, dt, ., getYear, (, ), ;, if, (, val, ==, 0, ), {]
[=, dt, ., getYear, (, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (]
[), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaGetMonth, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJodaGetMonth, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =]
[;, }, }, private, void, checkJodaGetMonth, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (]
[;, }, }, private, void, checkJodaGetMonth, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (]
[COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =]
[DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;]
[DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;]
[=, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "getMonth", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Joda", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Joda", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Joda", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (, val, ==]
[j, ++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (, val, ==, 0, ), {]
[j, ++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (, val, ==, 0, ), {]
[j, ++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (, val, ==, 0, ), {]
[=, dt, ., getMonthOfYear, (, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (]
[), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOGetMonth, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJISOGetMonth, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =]
[), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "getMonth", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "JISO", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "JISO", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "JISO", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (, val, ==]
[j, ++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (, val, ==, 0, ), {]
[j, ++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (, val, ==, 0, ), {]
[j, ++, ), {, int, val, =, dt, ., getMonthOfYear, (, ), ;, if, (, val, ==, 0, ), {]
[=, dt, ., getMonthOfYear, (, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (]
[), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalGetMonth, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkGCalGetMonth, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =]
[), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "getMonth", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "GCal", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "GCal", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "GCal", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (]
[int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (]
[COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., MONTH, ), ;, if, (]
[COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., MONTH, ), ;, if, (]
[j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., MONTH, ), ;, if, (, val, ==]
[{, int, val, =, dt, ., get, (, GregorianCalendar, ., MONTH, ), ;, if, (, val, ==, 0, ), {]
[{, int, val, =, dt, ., get, (, GregorianCalendar, ., MONTH, ), ;, if, (, val, ==, 0, ), {]
[{, int, val, =, dt, ., get, (, GregorianCalendar, ., MONTH, ), ;, if, (, val, ==, 0, ), {]
[get, (, GregorianCalendar, ., MONTH, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (]
[), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateGetMonth, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkDateGetMonth, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =]
[), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "getMonth", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Date", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Date", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Date", ,, "getMonth", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getMonth, (, ), ;, if, (]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getMonth, (, ), ;, if, (]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getMonth, (, ), ;, if, (, val, ==]
[j, ++, ), {, int, val, =, dt, ., getMonth, (, ), ;, if, (, val, ==, 0, ), {]
[j, ++, ), {, int, val, =, dt, ., getMonth, (, ), ;, if, (, val, ==, 0, ), {]
[j, ++, ), {, int, val, =, dt, ., getMonth, (, ), ;, if, (, val, ==, 0, ), {]
[=, dt, ., getMonth, (, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (]
[), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaGetDay, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJodaGetDay, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =]
[;, }, }, private, void, checkJodaGetDay, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (]
[;, }, }, private, void, checkJodaGetDay, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (]
[COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =]
[DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;]
[DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;]
[=, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "getDay", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "getDay", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "getDay", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Joda", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Joda", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Joda", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (, val, ==]
[j, ++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (, val, ==, 0, ), {]
[j, ++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (, val, ==, 0, ), {]
[j, ++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (, val, ==, 0, ), {]
[=, dt, ., getDayOfMonth, (, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (]
[), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOGetDay, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJISOGetDay, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =]
[), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "getDay", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "getDay", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "getDay", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "JISO", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "JISO", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "JISO", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (, val, ==]
[j, ++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (, val, ==, 0, ), {]
[j, ++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (, val, ==, 0, ), {]
[j, ++, ), {, int, val, =, dt, ., getDayOfMonth, (, ), ;, if, (, val, ==, 0, ), {]
[=, dt, ., getDayOfMonth, (, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (]
[), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalGetDay, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkGCalGetDay, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =]
[), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "getDay", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "getDay", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "getDay", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "GCal", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "GCal", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "GCal", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (]
[int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (]
[COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., DAY_OF_MONTH, ), ;, if, (]
[COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., DAY_OF_MONTH, ), ;, if, (]
[j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., DAY_OF_MONTH, ), ;, if, (, val, ==]
[{, int, val, =, dt, ., get, (, GregorianCalendar, ., DAY_OF_MONTH, ), ;, if, (, val, ==, 0, ), {]
[{, int, val, =, dt, ., get, (, GregorianCalendar, ., DAY_OF_MONTH, ), ;, if, (, val, ==, 0, ), {]
[{, int, val, =, dt, ., get, (, GregorianCalendar, ., DAY_OF_MONTH, ), ;, if, (, val, ==, 0, ), {]
[get, (, GregorianCalendar, ., DAY_OF_MONTH, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (]
[), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateGetDay, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkDateGetDay, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =]
[), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "getDay", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "getDay", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "getDay", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Date", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Date", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Date", ,, "getDay", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getDate, (, ), ;, if, (]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getDate, (, ), ;, if, (]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getDate, (, ), ;, if, (, val, ==]
[j, ++, ), {, int, val, =, dt, ., getDate, (, ), ;, if, (, val, ==, 0, ), {]
[j, ++, ), {, int, val, =, dt, ., getDate, (, ), ;, if, (, val, ==, 0, ), {]
[j, ++, ), {, int, val, =, dt, ., getDate, (, ), ;, if, (, val, ==, 0, ), {]
[=, dt, ., getDate, (, ), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (]
[), ;, if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, val, ==, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaGetHour, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJodaGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =]
[;, }, }, private, void, checkJodaGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (]
[;, }, }, private, void, checkJodaGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (]
[COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =]
[DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;]
[DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;]
[=, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "getHour", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "getHour", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "getHour", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Joda", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Joda", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Joda", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, val, ==]
[COUNT, ;, j, ++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, val, ==, -]
[++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, val, ==, -, 1, ), {]
[++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, val, ==, -, 1, ), {]
[++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, val, ==, -, 1, ), {]
[dt, ., getHourOfDay, (, ), ;, if, (, val, ==, -, 1, ), {, System, ., out, ., println, (]
[;, if, (, val, ==, -, 1, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[(, val, ==, -, 1, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOGetHour, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJISOGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =]
[), {, int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_VERY_FAST, ;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "getHour", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "getHour", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "getHour", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "JISO", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "JISO", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "JISO", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, val, ==]
[COUNT, ;, j, ++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, val, ==, -]
[++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, val, ==, -, 1, ), {]
[++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, val, ==, -, 1, ), {]
[++, ), {, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, val, ==, -, 1, ), {]
[dt, ., getHourOfDay, (, ), ;, if, (, val, ==, -, 1, ), {, System, ., out, ., println, (]
[;, if, (, val, ==, -, 1, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[(, val, ==, -, 1, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalGetHour, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkGCalGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =]
[), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "getHour", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "getHour", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "getHour", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "GCal", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "GCal", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "GCal", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (]
[int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (]
[COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (]
[COUNT, ;, j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (]
[j, ++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (, val, ==]
[++, ), {, int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (, val, ==, -]
[int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (, val, ==, -, 1, ), {]
[int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (, val, ==, -, 1, ), {]
[int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (, val, ==, -, 1, ), {]
[(, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (, val, ==, -, 1, ), {, System, ., out, ., println, (]
[;, if, (, val, ==, -, 1, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[(, val, ==, -, 1, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateGetHour, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkDateGetHour, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =]
[), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "getHour", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "getHour", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "getHour", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Date", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Date", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Date", ,, "getHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, int, val, =]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getHours, (, ), ;, if, (]
[;, j, <, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getHours, (, ), ;, if, (]
[<, COUNT, ;, j, ++, ), {, int, val, =, dt, ., getHours, (, ), ;, if, (, val, ==]
[COUNT, ;, j, ++, ), {, int, val, =, dt, ., getHours, (, ), ;, if, (, val, ==, -]
[++, ), {, int, val, =, dt, ., getHours, (, ), ;, if, (, val, ==, -, 1, ), {]
[++, ), {, int, val, =, dt, ., getHours, (, ), ;, if, (, val, ==, -, 1, ), {]
[++, ), {, int, val, =, dt, ., getHours, (, ), ;, if, (, val, ==, -, 1, ), {]
[dt, ., getHours, (, ), ;, if, (, val, ==, -, 1, ), {, System, ., out, ., println, (]
[;, if, (, val, ==, -, 1, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[(, val, ==, -, 1, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaSetYear, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJodaSetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, MutableDateTime, dt, =]
[;, }, }, private, void, checkJodaSetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (]
[;, }, }, private, void, checkJodaSetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (]
[COUNT_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =]
[MutableDateTime, dt, =, new, MutableDateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;]
[MutableDateTime, dt, =, new, MutableDateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;]
[=, new, MutableDateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[MutableDateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[MutableDateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "setYear", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "setYear", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "setYear", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Joda", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Joda", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Joda", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["Joda", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["Joda", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (]
[;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==]
[COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {]
[COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {]
[COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {]
[dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOSetYear, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJISOSetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, MutableDateTime, dt, =]
[), {, int, COUNT, =, COUNT_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, MutableDateTime, dt, =, new, MutableDateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, MutableDateTime, dt, =, new, MutableDateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, MutableDateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "setYear", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "setYear", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "setYear", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "JISO", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "JISO", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "JISO", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["JISO", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["JISO", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (]
[;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==]
[COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {]
[COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {]
[COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {]
[dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalSetYear, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkGCalSetYear, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =]
[), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "setYear", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "setYear", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "setYear", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "GCal", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "GCal", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "GCal", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["GCal", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["GCal", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., set, (]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., set, (]
[j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,]
[<, COUNT, ;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, if, (]
[<, COUNT, ;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, if, (]
[;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, if, (, dt, ==]
[), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, if, (, dt, ==, null, ), {]
[), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, if, (, dt, ==, null, ), {]
[), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, if, (, dt, ==, null, ), {]
[GregorianCalendar, ., YEAR, ,, 1972, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateSetYear, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkDateSetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =]
[), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "setYear", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "setYear", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "setYear", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Date", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Date", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Date", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["Date", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["Date", ,, "setYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (]
[;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==]
[COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {]
[COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {]
[COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {]
[dt, ., setYear, (, 1972, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaSetGetYear, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJodaSetGetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, DateTime, dt, =]
[;, }, }, private, void, checkJodaSetGetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, DateTime, dt, =, new, DateTime, (]
[;, }, }, private, void, checkJodaSetGetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, DateTime, dt, =, new, DateTime, (]
[COUNT_FAST, ;, DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =]
[DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;]
[DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;]
[=, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[DateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "setGetYear", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Joda", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Joda", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Joda", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["Joda", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =]
["setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =]
["setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =]
[0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, dt, ., year, (, ), ., setCopy, (]
[j, ++, ), {, dt, =, dt, ., year, (, ), ., setCopy, (, 1972, ), ;, int, val, =]
[j, ++, ), {, dt, =, dt, ., year, (, ), ., setCopy, (, 1972, ), ;, int, val, =]
[year, (, ), ., setCopy, (, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (]
[year, (, ), ., setCopy, (, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (]
[), ., setCopy, (, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (, val, <]
[(, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (, val, <, 0, ), {]
[(, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (, val, <, 0, ), {]
[(, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (, val, <, 0, ), {]
[=, dt, ., getYear, (, ), ;, if, (, val, <, 0, ), {, System, ., out, ., println, (]
[), ;, if, (, val, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, val, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOSetGetYear, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJISOSetGetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, DateTime, dt, =]
[), {, int, COUNT, =, COUNT_FAST, ;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_FAST, ;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_FAST, ;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_FAST, ;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, DateTime, dt, =, new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, DateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "setGetYear", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "JISO", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "JISO", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "JISO", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["JISO", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =]
["setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =]
["setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =]
[0, ;, j, <, COUNT, ;, j, ++, ), {, dt, =, dt, ., year, (, ), ., setCopy, (]
[j, ++, ), {, dt, =, dt, ., year, (, ), ., setCopy, (, 1972, ), ;, int, val, =]
[j, ++, ), {, dt, =, dt, ., year, (, ), ., setCopy, (, 1972, ), ;, int, val, =]
[year, (, ), ., setCopy, (, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (]
[year, (, ), ., setCopy, (, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (]
[), ., setCopy, (, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (, val, <]
[(, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (, val, <, 0, ), {]
[(, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (, val, <, 0, ), {]
[(, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (, val, <, 0, ), {]
[=, dt, ., getYear, (, ), ;, if, (, val, <, 0, ), {, System, ., out, ., println, (]
[), ;, if, (, val, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, val, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalSetGetYear, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkGCalSetGetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, GregorianCalendar, dt, =]
[), {, int, COUNT, =, COUNT_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "setGetYear", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "GCal", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "GCal", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "GCal", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["GCal", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["GCal", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., set, (]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., set, (]
[j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,]
[COUNT, ;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, int, val, =]
[COUNT, ;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, int, val, =]
[), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, int, val, =, dt, ., get, (]
[), {, dt, ., set, (, GregorianCalendar, ., YEAR, ,, 1972, ), ;, int, val, =, dt, ., get, (]
[., YEAR, ,, 1972, ), ;, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, ), ;, if, (]
[., YEAR, ,, 1972, ), ;, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, ), ;, if, (]
[,, 1972, ), ;, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, ), ;, if, (, val, <]
[;, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, ), ;, if, (, val, <, 0, ), {]
[;, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, ), ;, if, (, val, <, 0, ), {]
[;, int, val, =, dt, ., get, (, GregorianCalendar, ., YEAR, ), ;, if, (, val, <, 0, ), {]
[get, (, GregorianCalendar, ., YEAR, ), ;, if, (, val, <, 0, ), {, System, ., out, ., println, (]
[), ;, if, (, val, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, val, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateSetGetYear, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkDateSetGetYear, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =]
[), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "setGetYear", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Date", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Date", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Date", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["Date", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["Date", ,, "setGetYear", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (]
[0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, int, val, =]
[0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setYear, (, 1972, ), ;, int, val, =]
[), {, dt, ., setYear, (, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (]
[), {, dt, ., setYear, (, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (]
[dt, ., setYear, (, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (, val, <]
[(, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (, val, <, 0, ), {]
[(, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (, val, <, 0, ), {]
[(, 1972, ), ;, int, val, =, dt, ., getYear, (, ), ;, if, (, val, <, 0, ), {]
[=, dt, ., getYear, (, ), ;, if, (, val, <, 0, ), {, System, ., out, ., println, (]
[), ;, if, (, val, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, val, <, 0, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaSetHour, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJodaSetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =]
[;, }, }, private, void, checkJodaSetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (]
[;, }, }, private, void, checkJodaSetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (]
[COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =]
[MutableDateTime, dt, =, new, MutableDateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;]
[MutableDateTime, dt, =, new, MutableDateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;]
[=, new, MutableDateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[MutableDateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[MutableDateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "setHour", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "setHour", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "setHour", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Joda", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Joda", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Joda", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["Joda", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["Joda", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (]
[;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==]
[COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==, null, ), {]
[COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==, null, ), {]
[COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==, null, ), {]
[dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOSetHour, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJISOSetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =]
[), {, int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, MutableDateTime, dt, =, new, MutableDateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, MutableDateTime, dt, =, new, MutableDateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, MutableDateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "setHour", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "setHour", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "setHour", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "JISO", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "JISO", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "JISO", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["JISO", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["JISO", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (]
[;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==]
[COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==, null, ), {]
[COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==, null, ), {]
[COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==, null, ), {]
[dt, ., setHourOfDay, (, 13, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalSetHour, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkGCalSetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =]
[), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "setHour", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "setHour", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "setHour", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "GCal", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "GCal", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "GCal", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["GCal", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["GCal", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., set, (]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., set, (]
[j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,]
[<, COUNT, ;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, if, (]
[<, COUNT, ;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, if, (]
[;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, if, (, dt, ==]
[), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, if, (, dt, ==, null, ), {]
[), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, if, (, dt, ==, null, ), {]
[), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, if, (, dt, ==, null, ), {]
[GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateSetHour, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkDateSetHour, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =]
[), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "setHour", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "setHour", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "setHour", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Date", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Date", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Date", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["Date", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["Date", ,, "setHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHours, (]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHours, (, 13, ), ;, if, (]
[=, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHours, (, 13, ), ;, if, (]
[;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHours, (, 13, ), ;, if, (, dt, ==]
[COUNT, ;, j, ++, ), {, dt, ., setHours, (, 13, ), ;, if, (, dt, ==, null, ), {]
[COUNT, ;, j, ++, ), {, dt, ., setHours, (, 13, ), ;, if, (, dt, ==, null, ), {]
[COUNT, ;, j, ++, ), {, dt, ., setHours, (, 13, ), ;, if, (, dt, ==, null, ), {]
[dt, ., setHours, (, 13, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaSetGetHour, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJodaSetGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =]
[;, }, }, private, void, checkJodaSetGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (]
[;, }, }, private, void, checkJodaSetGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (]
[COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =]
[MutableDateTime, dt, =, new, MutableDateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;]
[MutableDateTime, dt, =, new, MutableDateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;]
[=, new, MutableDateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[MutableDateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[MutableDateTime, (, GJChronology, ., getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[getInstance, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[), ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "setGetHour", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Joda", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Joda", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Joda", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["Joda", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["Joda", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (]
[0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, int, val, =]
[0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, int, val, =]
[), {, dt, ., setHourOfDay, (, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (]
[), {, dt, ., setHourOfDay, (, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (]
[dt, ., setHourOfDay, (, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, dt, ==]
[(, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, dt, ==, null, ), {]
[(, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, dt, ==, null, ), {]
[(, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, dt, ==, null, ), {]
[=, dt, ., getHourOfDay, (, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOSetGetHour, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJISOSetGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =]
[), {, int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_VERY_FAST, ;, MutableDateTime, dt, =, new, MutableDateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, MutableDateTime, dt, =, new, MutableDateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, MutableDateTime, dt, =, new, MutableDateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, MutableDateTime, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "setGetHour", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "JISO", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "JISO", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "JISO", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["JISO", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["JISO", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (]
[0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, int, val, =]
[0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHourOfDay, (, 13, ), ;, int, val, =]
[), {, dt, ., setHourOfDay, (, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (]
[), {, dt, ., setHourOfDay, (, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (]
[dt, ., setHourOfDay, (, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, dt, ==]
[(, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, dt, ==, null, ), {]
[(, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, dt, ==, null, ), {]
[(, 13, ), ;, int, val, =, dt, ., getHourOfDay, (, ), ;, if, (, dt, ==, null, ), {]
[=, dt, ., getHourOfDay, (, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalSetGetHour, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkGCalSetGetHour, (, ), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =]
[), {, int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_VERY_FAST, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "setGetHour", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "GCal", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "GCal", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "GCal", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["GCal", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["GCal", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., set, (]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., set, (]
[j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,]
[COUNT, ;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, int, val, =]
[COUNT, ;, j, ++, ), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, int, val, =]
[), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, int, val, =, dt, ., get, (]
[), {, dt, ., set, (, GregorianCalendar, ., HOUR_OF_DAY, ,, 13, ), ;, int, val, =, dt, ., get, (]
[., HOUR_OF_DAY, ,, 13, ), ;, int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (]
[., HOUR_OF_DAY, ,, 13, ), ;, int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (]
[,, 13, ), ;, int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (, dt, ==]
[;, int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (, dt, ==, null, ), {]
[;, int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (, dt, ==, null, ), {]
[;, int, val, =, dt, ., get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (, dt, ==, null, ), {]
[get, (, GregorianCalendar, ., HOUR_OF_DAY, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateSetGetHour, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkDateSetGetHour, (, ), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =]
[), {, int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_FAST, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "setGetHour", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Date", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Date", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Date", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
["Date", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
["Date", ,, "setGetHour", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {]
[;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHours, (]
[0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHours, (, 13, ), ;, int, val, =]
[0, ;, j, <, COUNT, ;, j, ++, ), {, dt, ., setHours, (, 13, ), ;, int, val, =]
[), {, dt, ., setHours, (, 13, ), ;, int, val, =, dt, ., getHours, (, ), ;, if, (]
[), {, dt, ., setHours, (, 13, ), ;, int, val, =, dt, ., getHours, (, ), ;, if, (]
[dt, ., setHours, (, 13, ), ;, int, val, =, dt, ., getHours, (, ), ;, if, (, dt, ==]
[(, 13, ), ;, int, val, =, dt, ., getHours, (, ), ;, if, (, dt, ==, null, ), {]
[(, 13, ), ;, int, val, =, dt, ., getHours, (, ), ;, if, (, dt, ==, null, ), {]
[(, 13, ), ;, int, val, =, dt, ., getHours, (, ), ;, if, (, dt, ==, null, ), {]
[=, dt, ., getHours, (, ), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, dt, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJodaToString, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJodaToString, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =]
[;, }, }, private, void, checkJodaToString, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (]
[;, }, }, private, void, checkJodaToString, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (]
[COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, DateTimeFormatter, f, =]
[COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, DateTimeFormatter, f, =]
[DateTime, dt, =, new, DateTime, (, GJChronology, ., getInstance, (, ), ), ;, DateTimeFormatter, f, =, DateTimeFormat, ., forPattern, (]
[getInstance, (, ), ), ;, DateTimeFormatter, f, =, DateTimeFormat, ., forPattern, (, "dd MMM yyyy", ), ;, for, (, int, i, =]
[), ), ;, DateTimeFormatter, f, =, DateTimeFormat, ., forPattern, (, "dd MMM yyyy", ), ;, for, (, int, i, =, 0, ;]
[), ), ;, DateTimeFormatter, f, =, DateTimeFormat, ., forPattern, (, "dd MMM yyyy", ), ;, for, (, int, i, =, 0, ;]
[;, DateTimeFormatter, f, =, DateTimeFormat, ., forPattern, (, "dd MMM yyyy", ), ;, for, (, int, i, =, 0, ;, i, <]
[f, =, DateTimeFormat, ., forPattern, (, "dd MMM yyyy", ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[f, =, DateTimeFormat, ., forPattern, (, "dd MMM yyyy", ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[forPattern, (, "dd MMM yyyy", ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
["dd MMM yyyy", ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "toString", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "toString", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Joda", ,, "toString", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Joda", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Joda", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Joda", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, String, str, =]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, String, str, =]
[int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, String, str, =, dt, ., toString, (]
[j, <, COUNT, ;, j, ++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (]
[j, <, COUNT, ;, j, ++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (]
[COUNT, ;, j, ++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (, str, ==]
[++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (, str, ==, null, ), {]
[++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (, str, ==, null, ), {]
[++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (, str, ==, null, ), {]
[dt, ., toString, (, "dd MMM yyyy", ), ;, if, (, str, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, str, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, str, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkJISOToString, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkJISOToString, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =]
[checkJISOToString, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (, ), ;, DateTimeFormatter, f, =]
[checkJISOToString, (, ), {, int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (, ), ;, DateTimeFormatter, f, =]
[int, COUNT, =, COUNT_SLOW, ;, DateTime, dt, =, new, DateTime, (, ), ;, DateTimeFormatter, f, =, DateTimeFormat, ., forPattern, (]
[new, DateTime, (, ), ;, DateTimeFormatter, f, =, DateTimeFormat, ., forPattern, (, "dd MMM yyyy", ), ;, for, (, int, i, =]
[(, ), ;, DateTimeFormatter, f, =, DateTimeFormat, ., forPattern, (, "dd MMM yyyy", ), ;, for, (, int, i, =, 0, ;]
[(, ), ;, DateTimeFormatter, f, =, DateTimeFormat, ., forPattern, (, "dd MMM yyyy", ), ;, for, (, int, i, =, 0, ;]
[;, DateTimeFormatter, f, =, DateTimeFormat, ., forPattern, (, "dd MMM yyyy", ), ;, for, (, int, i, =, 0, ;, i, <]
[f, =, DateTimeFormat, ., forPattern, (, "dd MMM yyyy", ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[f, =, DateTimeFormat, ., forPattern, (, "dd MMM yyyy", ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[forPattern, (, "dd MMM yyyy", ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
["dd MMM yyyy", ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "toString", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "toString", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "JISO", ,, "toString", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "JISO", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "JISO", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "JISO", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, String, str, =]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, String, str, =]
[int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, String, str, =, dt, ., toString, (]
[j, <, COUNT, ;, j, ++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (]
[j, <, COUNT, ;, j, ++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (]
[COUNT, ;, j, ++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (, str, ==]
[++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (, str, ==, null, ), {]
[++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (, str, ==, null, ), {]
[++, ), {, String, str, =, dt, ., toString, (, "dd MMM yyyy", ), ;, if, (, str, ==, null, ), {]
[dt, ., toString, (, "dd MMM yyyy", ), ;, if, (, str, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, str, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, str, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkGCalToString, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkGCalToString, (, ), {, int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =]
[), {, int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_SLOW, ;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, GregorianCalendar, dt, =, new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, GregorianCalendar, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "toString", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "toString", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "GCal", ,, "toString", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "GCal", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "GCal", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "GCal", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, SimpleDateFormat, sdf, =]
[(, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, SimpleDateFormat, sdf, =, new, SimpleDateFormat, (]
[j, <, COUNT, ;, j, ++, ), {, SimpleDateFormat, sdf, =, new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str, =]
[j, <, COUNT, ;, j, ++, ), {, SimpleDateFormat, sdf, =, new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str, =]
[j, ++, ), {, SimpleDateFormat, sdf, =, new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str, =, sdf, ., format, (]
[j, ++, ), {, SimpleDateFormat, sdf, =, new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str, =, sdf, ., format, (]
[(, "dd MMM yyyy", ), ;, String, str, =, sdf, ., format, (, dt, ., getTime, (, ), ), ;, if, (]
[(, "dd MMM yyyy", ), ;, String, str, =, sdf, ., format, (, dt, ., getTime, (, ), ), ;, if, (]
[), ;, String, str, =, sdf, ., format, (, dt, ., getTime, (, ), ), ;, if, (, str, ==]
[str, =, sdf, ., format, (, dt, ., getTime, (, ), ), ;, if, (, str, ==, null, ), {]
[str, =, sdf, ., format, (, dt, ., getTime, (, ), ), ;, if, (, str, ==, null, ), {]
[str, =, sdf, ., format, (, dt, ., getTime, (, ), ), ;, if, (, str, ==, null, ), {]
[dt, ., getTime, (, ), ), ;, if, (, str, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, str, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, str, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[), ;, }, }, end, (, COUNT, ), ;, }, }, private, void, checkDateToString, (, ), {, int, COUNT, =]
[(, COUNT, ), ;, }, }, private, void, checkDateToString, (, ), {, int, COUNT, =, COUNT_SLOW, ;, Date, dt, =]
[), {, int, COUNT, =, COUNT_SLOW, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =]
[int, COUNT, =, COUNT_SLOW, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[int, COUNT, =, COUNT_SLOW, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;]
[=, COUNT_SLOW, ;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[;, Date, dt, =, new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;]
[new, Date, (, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (]
[;, for, (, int, i, =, 0, ;, i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,]
[i, <, AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "toString", ), ;, for, (, int, j, =]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "toString", ), ;, for, (, int, j, =, 0, ;]
[AVERAGE, ;, i, ++, ), {, start, (, "Date", ,, "toString", ), ;, for, (, int, j, =, 0, ;]
[i, ++, ), {, start, (, "Date", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, start, (, "Date", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), {, start, (, "Date", ,, "toString", ), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;]
[), ;, for, (, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, SimpleDateFormat, sdf, =]
[(, int, j, =, 0, ;, j, <, COUNT, ;, j, ++, ), {, SimpleDateFormat, sdf, =, new, SimpleDateFormat, (]
[j, <, COUNT, ;, j, ++, ), {, SimpleDateFormat, sdf, =, new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str, =]
[j, <, COUNT, ;, j, ++, ), {, SimpleDateFormat, sdf, =, new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str, =]
[j, ++, ), {, SimpleDateFormat, sdf, =, new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str, =, sdf, ., format, (]
[sdf, =, new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str, =, sdf, ., format, (, dt, ), ;, if, (]
[sdf, =, new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str, =, sdf, ., format, (, dt, ), ;, if, (]
[new, SimpleDateFormat, (, "dd MMM yyyy", ), ;, String, str, =, sdf, ., format, (, dt, ), ;, if, (, str, ==]
["dd MMM yyyy", ), ;, String, str, =, sdf, ., format, (, dt, ), ;, if, (, str, ==, null, ), {]
["dd MMM yyyy", ), ;, String, str, =, sdf, ., format, (, dt, ), ;, if, (, str, ==, null, ), {]
["dd MMM yyyy", ), ;, String, str, =, sdf, ., format, (, dt, ), ;, if, (, str, ==, null, ), {]
[sdf, ., format, (, dt, ), ;, if, (, str, ==, null, ), {, System, ., out, ., println, (]
[), ;, if, (, str, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }]
[if, (, str, ==, null, ), {, System, ., out, ., println, (, "Anti optimise", ), ;, }, }, end, (]
[}, }, end, (, COUNT, ), ;, }, }, private, void, start, (, String, str1, ,, String, str2, ), {]
[end, (, COUNT, ), ;, }, }, private, void, start, (, String, str1, ,, String, str2, ), {, result, =]
[), ;, }, }, private, void, start, (, String, str1, ,, String, str2, ), {, result, =, (, Result, )]
[), ;, }, }, private, void, start, (, String, str1, ,, String, str2, ), {, result, =, (, Result, )]
[private, void, start, (, String, str1, ,, String, str2, ), {, result, =, (, Result, ), results, ., get, (]
[private, void, start, (, String, str1, ,, String, str2, ), {, result, =, (, Result, ), results, ., get, (]
[start, (, String, str1, ,, String, str2, ), {, result, =, (, Result, ), results, ., get, (, str1, +]
[String, str2, ), {, result, =, (, Result, ), results, ., get, (, str1, +, str2, ), ;, if, (]
[String, str2, ), {, result, =, (, Result, ), results, ., get, (, str1, +, str2, ), ;, if, (]
[), {, result, =, (, Result, ), results, ., get, (, str1, +, str2, ), ;, if, (, result, ==]
[=, (, Result, ), results, ., get, (, str1, +, str2, ), ;, if, (, result, ==, null, ), {]
[Result, ), results, ., get, (, str1, +, str2, ), ;, if, (, result, ==, null, ), {, result, =]
[(, str1, +, str2, ), ;, if, (, result, ==, null, ), {, result, =, new, Result, (, ), ;]
[(, str1, +, str2, ), ;, if, (, result, ==, null, ), {, result, =, new, Result, (, ), ;]
[), ;, if, (, result, ==, null, ), {, result, =, new, Result, (, ), ;, result, ., object, =]
[if, (, result, ==, null, ), {, result, =, new, Result, (, ), ;, result, ., object, =, str1, ;]
[if, (, result, ==, null, ), {, result, =, new, Result, (, ), ;, result, ., object, =, str1, ;]
[null, ), {, result, =, new, Result, (, ), ;, result, ., object, =, str1, ;, result, ., name, =]
[{, result, =, new, Result, (, ), ;, result, ., object, =, str1, ;, result, ., name, =, str2, ;]
[{, result, =, new, Result, (, ), ;, result, ., object, =, str1, ;, result, ., name, =, str2, ;]
[Result, (, ), ;, result, ., object, =, str1, ;, result, ., name, =, str2, ;, results, ., put, (]
[Result, (, ), ;, result, ., object, =, str1, ;, result, ., name, =, str2, ;, results, ., put, (]
[), ;, result, ., object, =, str1, ;, result, ., name, =, str2, ;, results, ., put, (, str1, +]
[result, ., object, =, str1, ;, result, ., name, =, str2, ;, results, ., put, (, str1, +, str2, ,]
[=, str1, ;, result, ., name, =, str2, ;, results, ., put, (, str1, +, str2, ,, result, ), ;]
[=, str1, ;, result, ., name, =, str2, ;, results, ., put, (, str1, +, str2, ,, result, ), ;]
[., name, =, str2, ;, results, ., put, (, str1, +, str2, ,, result, ), ;, resultList, ., add, (]
[;, results, ., put, (, str1, +, str2, ,, result, ), ;, resultList, ., add, (, result, ), ;, }]
[., put, (, str1, +, str2, ,, result, ), ;, resultList, ., add, (, result, ), ;, }, start, =]
[., put, (, str1, +, str2, ,, result, ), ;, resultList, ., add, (, result, ), ;, }, start, =]
[), ;, }, start, =, System, ., currentTimeMillis, (, ), ;, }, private, void, end, (, int, count, ), {]
[}, start, =, System, ., currentTimeMillis, (, ), ;, }, private, void, end, (, int, count, ), {, end, =]
[}, start, =, System, ., currentTimeMillis, (, ), ;, }, private, void, end, (, int, count, ), {, end, =]
[}, private, void, end, (, int, count, ), {, end, =, System, ., currentTimeMillis, (, ), ;, long, time, =]
[private, void, end, (, int, count, ), {, end, =, System, ., currentTimeMillis, (, ), ;, long, time, =, (]
[private, void, end, (, int, count, ), {, end, =, System, ., currentTimeMillis, (, ), ;, long, time, =, (]
[end, (, int, count, ), {, end, =, System, ., currentTimeMillis, (, ), ;, long, time, =, (, end, -]
[count, ), {, end, =, System, ., currentTimeMillis, (, ), ;, long, time, =, (, end, -, start, ), ;]
[count, ), {, end, =, System, ., currentTimeMillis, (, ), ;, long, time, =, (, end, -, start, ), ;]
[=, System, ., currentTimeMillis, (, ), ;, long, time, =, (, end, -, start, ), ;, result, ., time, =]
[=, System, ., currentTimeMillis, (, ), ;, long, time, =, (, end, -, start, ), ;, result, ., time, =]
[=, System, ., currentTimeMillis, (, ), ;, long, time, =, (, end, -, start, ), ;, result, ., time, =]
[(, ), ;, long, time, =, (, end, -, start, ), ;, result, ., time, =, result, ., time, +]
[;, long, time, =, (, end, -, start, ), ;, result, ., time, =, result, ., time, +, time, ;]
[;, long, time, =, (, end, -, start, ), ;, result, ., time, =, result, ., time, +, time, ;]
[(, end, -, start, ), ;, result, ., time, =, result, ., time, +, time, ;, result, ., runs, =]
[(, end, -, start, ), ;, result, ., time, =, result, ., time, +, time, ;, result, ., runs, =]
[(, end, -, start, ), ;, result, ., time, =, result, ., time, +, time, ;, result, ., runs, =]
[), ;, result, ., time, =, result, ., time, +, time, ;, result, ., runs, =, result, ., runs, +]
[result, ., time, =, result, ., time, +, time, ;, result, ., runs, =, result, ., runs, +, count, ;]
[result, ., time, =, result, ., time, +, time, ;, result, ., runs, =, result, ., runs, +, count, ;]
[result, ., time, +, time, ;, result, ., runs, =, result, ., runs, +, count, ;, result, ., avg, =]
[result, ., time, +, time, ;, result, ., runs, =, result, ., runs, +, count, ;, result, ., avg, =]
[., time, +, time, ;, result, ., runs, =, result, ., runs, +, count, ;, result, ., avg, =, (]
[., time, +, time, ;, result, ., runs, =, result, ., runs, +, count, ;, result, ., avg, =, (]
[., time, +, time, ;, result, ., runs, =, result, ., runs, +, count, ;, result, ., avg, =, (]
[;, result, ., runs, =, result, ., runs, +, count, ;, result, ., avg, =, (, result, ., time, *]
[runs, =, result, ., runs, +, count, ;, result, ., avg, =, (, result, ., time, *, 1000000, ), /]
[runs, =, result, ., runs, +, count, ;, result, ., avg, =, (, result, ., time, *, 1000000, ), /]
[runs, +, count, ;, result, ., avg, =, (, result, ., time, *, 1000000, ), /, result, ., runs, ;]
[runs, +, count, ;, result, ., avg, =, (, result, ., time, *, 1000000, ), /, result, ., runs, ;]
[runs, +, count, ;, result, ., avg, =, (, result, ., time, *, 1000000, ), /, result, ., runs, ;]
[avg, =, (, result, ., time, *, 1000000, ), /, result, ., runs, ;, System, ., out, ., print, (]
