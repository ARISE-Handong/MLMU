[,, new, SimpleValueChecker, (, ), ), ;, }, public, NonLinearConjugateGradientOptimizer, (, final, ConjugateGradientFormula, updateFormula, ,, ConvergenceChecker, <, PointValuePair, >, checker]
[), ;, }, public, NonLinearConjugateGradientOptimizer, (, final, ConjugateGradientFormula, updateFormula, ,, ConvergenceChecker, <, PointValuePair, >, checker, ), {, this, (, updateFormula]
[,, checker, ,, new, BrentSolver, (, ), ,, new, IdentityPreconditioner, (, ), ), ;, }, public, NonLinearConjugateGradientOptimizer, (, final, ConjugateGradientFormula]
[,, new, BrentSolver, (, ), ,, new, IdentityPreconditioner, (, ), ), ;, }, public, NonLinearConjugateGradientOptimizer, (, final, ConjugateGradientFormula, updateFormula, ,]
[,, new, IdentityPreconditioner, (, ), ), ;, }, public, NonLinearConjugateGradientOptimizer, (, final, ConjugateGradientFormula, updateFormula, ,, ConvergenceChecker, <, PointValuePair, >, checker]
[), ;, }, public, NonLinearConjugateGradientOptimizer, (, final, ConjugateGradientFormula, updateFormula, ,, ConvergenceChecker, <, PointValuePair, >, checker, ,, final, UnivariateSolver, lineSearchSolver, )]
[,, checker, ,, lineSearchSolver, ,, new, IdentityPreconditioner, (, ), ), ;, }, public, NonLinearConjugateGradientOptimizer, (, final, ConjugateGradientFormula, updateFormula, ,, ConvergenceChecker]
[,, lineSearchSolver, ,, new, IdentityPreconditioner, (, ), ), ;, }, public, NonLinearConjugateGradientOptimizer, (, final, ConjugateGradientFormula, updateFormula, ,, ConvergenceChecker, <, PointValuePair]
[,, new, IdentityPreconditioner, (, ), ), ;, }, public, NonLinearConjugateGradientOptimizer, (, final, ConjugateGradientFormula, updateFormula, ,, ConvergenceChecker, <, PointValuePair, >, checker]
[), ;, }, public, NonLinearConjugateGradientOptimizer, (, final, ConjugateGradientFormula, updateFormula, ,, ConvergenceChecker, <, PointValuePair, >, checker, ,, final, UnivariateSolver, lineSearchSolver, ,]
[), ;, this, ., updateFormula, =, updateFormula, ;, solver, =, lineSearchSolver, ;, this, ., preconditioner, =, preconditioner, ;, initialStep, =]
[=, updateFormula, ;, solver, =, lineSearchSolver, ;, this, ., preconditioner, =, preconditioner, ;, initialStep, =, 1.0, ;, }, public, void]
[., updateFormula, =, updateFormula, ;, solver, =, lineSearchSolver, ;, this, ., preconditioner, =, preconditioner, ;, initialStep, =, 1.0, ;, }]
[;, solver, =, lineSearchSolver, ;, this, ., preconditioner, =, preconditioner, ;, initialStep, =, 1.0, ;, }, public, void, setInitialStep, (]
[=, lineSearchSolver, ;, this, ., preconditioner, =, preconditioner, ;, initialStep, =, 1.0, ;, }, public, void, setInitialStep, (, final, double]
[;, this, ., preconditioner, =, preconditioner, ;, initialStep, =, 1.0, ;, }, public, void, setInitialStep, (, final, double, initialStep, )]
[=, preconditioner, ;, initialStep, =, 1.0, ;, }, public, void, setInitialStep, (, final, double, initialStep, ), {, if, (, initialStep]
[., preconditioner, =, preconditioner, ;, initialStep, =, 1.0, ;, }, public, void, setInitialStep, (, final, double, initialStep, ), {, if]
[;, initialStep, =, 1.0, ;, }, public, void, setInitialStep, (, final, double, initialStep, ), {, if, (, initialStep, <=, 0]
[=, 1.0, ;, }, public, void, setInitialStep, (, final, double, initialStep, ), {, if, (, initialStep, <=, 0, ), {]
[;, }, public, void, setInitialStep, (, final, double, initialStep, ), {, if, (, initialStep, <=, 0, ), {, this, .]
[), {, this, ., initialStep, =, 1.0, ;, }, else, {, this, ., initialStep, =, initialStep, ;, }, }, @]
[<=, 0, ), {, this, ., initialStep, =, 1.0, ;, }, else, {, this, ., initialStep, =, initialStep, ;, }]
[), {, this, ., initialStep, =, 1.0, ;, }, else, {, this, ., initialStep, =, initialStep, ;, }, }, @]
[=, 1.0, ;, }, else, {, this, ., initialStep, =, initialStep, ;, }, }, @, Override, protected, PointValuePair, doOptimize, (]
[., initialStep, =, 1.0, ;, }, else, {, this, ., initialStep, =, initialStep, ;, }, }, @, Override, protected, PointValuePair]
[;, }, else, {, this, ., initialStep, =, initialStep, ;, }, }, @, Override, protected, PointValuePair, doOptimize, (, ), {]
[=, initialStep, ;, }, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, final, ConvergenceChecker, <, PointValuePair, >, checker, =]
[., initialStep, =, initialStep, ;, }, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, final, ConvergenceChecker, <, PointValuePair, >]
[;, }, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, final, ConvergenceChecker, <, PointValuePair, >, checker, =, getConvergenceChecker, (]
[;, point, =, getStartPoint, (, ), ;, final, GoalType, goal, =, getGoalType, (, ), ;, final, int, n, =, point]
[=, getStartPoint, (, ), ;, final, GoalType, goal, =, getGoalType, (, ), ;, final, int, n, =, point, ., length]
[;, final, GoalType, goal, =, getGoalType, (, ), ;, final, int, n, =, point, ., length, ;, double, [, ]]
[;, final, int, n, =, point, ., length, ;, double, [, ], r, =, computeObjectiveGradient, (, point, ), ;, if]
[;, double, [, ], r, =, computeObjectiveGradient, (, point, ), ;, if, (, goal, ==, GoalType, ., MINIMIZE, ), {]
[., length, ;, double, [, ], r, =, computeObjectiveGradient, (, point, ), ;, if, (, goal, ==, GoalType, ., MINIMIZE]
[;, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, for, (, int, i, =, 0, ;, i, <, n]
[), ;, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, for, (, int, i, =, 0, ;, i, <]
[), {, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, r, [, i]
[==, GoalType, ., MINIMIZE, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, )]
[), {, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, r, [, i]
[., MINIMIZE, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, r]
[;, i, <, n, ;, ++, i, ), {, r, [, i, ], =, -, r, [, i, ], ;]
[;, ++, i, ), {, r, [, i, ], =, -, r, [, i, ], ;, }, }, double, []
[<, n, ;, ++, i, ), {, r, [, i, ], =, -, r, [, i, ], ;, }, }]
[;, ++, i, ), {, r, [, i, ], =, -, r, [, i, ], ;, }, }, double, []
[), {, r, [, i, ], =, -, r, [, i, ], ;, }, }, double, [, ], steepestDescent, =]
[), {, r, [, i, ], =, -, r, [, i, ], ;, }, }, double, [, ], steepestDescent, =]
[=, -, r, [, i, ], ;, }, }, double, [, ], steepestDescent, =, preconditioner, ., precondition, (, point, ,]
[[, i, ], =, -, r, [, i, ], ;, }, }, double, [, ], steepestDescent, =, preconditioner, ., precondition]
[], =, -, r, [, i, ], ;, }, }, double, [, ], steepestDescent, =, preconditioner, ., precondition, (, point]
[;, }, }, double, [, ], steepestDescent, =, preconditioner, ., precondition, (, point, ,, r, ), ;, double, [, ]]
[;, }, }, double, [, ], steepestDescent, =, preconditioner, ., precondition, (, point, ,, r, ), ;, double, [, ]]
[[, i, ], ;, }, }, double, [, ], steepestDescent, =, preconditioner, ., precondition, (, point, ,, r, ), ;]
[], ;, }, }, double, [, ], steepestDescent, =, preconditioner, ., precondition, (, point, ,, r, ), ;, double, []
[;, double, [, ], searchDirection, =, steepestDescent, ., clone, (, ), ;, double, delta, =, 0, ;, for, (, int]
[., precondition, (, point, ,, r, ), ;, double, [, ], searchDirection, =, steepestDescent, ., clone, (, ), ;, double]
[,, r, ), ;, double, [, ], searchDirection, =, steepestDescent, ., clone, (, ), ;, double, delta, =, 0, ;]
[), ;, double, [, ], searchDirection, =, steepestDescent, ., clone, (, ), ;, double, delta, =, 0, ;, for, (]
[;, double, delta, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, )]
[., clone, (, ), ;, double, delta, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, delta, +=, r, []
[;, i, <, n, ;, ++, i, ), {, delta, +=, r, [, i, ], *, searchDirection, [, i, ]]
[;, ++, i, ), {, delta, +=, r, [, i, ], *, searchDirection, [, i, ], ;, }, PointValuePair, current]
[<, n, ;, ++, i, ), {, delta, +=, r, [, i, ], *, searchDirection, [, i, ], ;, }]
[;, ++, i, ), {, delta, +=, r, [, i, ], *, searchDirection, [, i, ], ;, }, PointValuePair, current]
[), {, delta, +=, r, [, i, ], *, searchDirection, [, i, ], ;, }, PointValuePair, current, =, null, ;]
[), {, delta, +=, r, [, i, ], *, searchDirection, [, i, ], ;, }, PointValuePair, current, =, null, ;]
[+=, r, [, i, ], *, searchDirection, [, i, ], ;, }, PointValuePair, current, =, null, ;, int, iter, =]
[;, }, PointValuePair, current, =, null, ;, int, iter, =, 0, ;, int, maxEval, =, getMaxEvaluations, (, ), ;, while]
[*, searchDirection, [, i, ], ;, }, PointValuePair, current, =, null, ;, int, iter, =, 0, ;, int, maxEval, =]
[[, i, ], *, searchDirection, [, i, ], ;, }, PointValuePair, current, =, null, ;, int, iter, =, 0, ;]
[], *, searchDirection, [, i, ], ;, }, PointValuePair, current, =, null, ;, int, iter, =, 0, ;, int, maxEval]
[;, }, PointValuePair, current, =, null, ;, int, iter, =, 0, ;, int, maxEval, =, getMaxEvaluations, (, ), ;, while]
[[, i, ], ;, }, PointValuePair, current, =, null, ;, int, iter, =, 0, ;, int, maxEval, =, getMaxEvaluations, (]
[], ;, }, PointValuePair, current, =, null, ;, int, iter, =, 0, ;, int, maxEval, =, getMaxEvaluations, (, ), ;]
[;, int, iter, =, 0, ;, int, maxEval, =, getMaxEvaluations, (, ), ;, while, (, true, ), {, ++, iter]
[;, int, maxEval, =, getMaxEvaluations, (, ), ;, while, (, true, ), {, ++, iter, ;, final, double, objective, =]
[;, while, (, true, ), {, ++, iter, ;, final, double, objective, =, computeObjectiveValue, (, point, ), ;, PointValuePair, previous]
[), {, ++, iter, ;, final, double, objective, =, computeObjectiveValue, (, point, ), ;, PointValuePair, previous, =, current, ;, current]
[;, final, double, objective, =, computeObjectiveValue, (, point, ), ;, PointValuePair, previous, =, current, ;, current, =, new, PointValuePair, (]
[;, final, double, objective, =, computeObjectiveValue, (, point, ), ;, PointValuePair, previous, =, current, ;, current, =, new, PointValuePair, (]
[;, PointValuePair, previous, =, current, ;, current, =, new, PointValuePair, (, point, ,, objective, ), ;, if, (, previous, !=]
[), ;, PointValuePair, previous, =, current, ;, current, =, new, PointValuePair, (, point, ,, objective, ), ;, if, (, previous]
[;, current, =, new, PointValuePair, (, point, ,, objective, ), ;, if, (, previous, !=, null, &&, checker, ., converged]
[=, new, PointValuePair, (, point, ,, objective, ), ;, if, (, previous, !=, null, &&, checker, ., converged, (, iter]
[;, if, (, previous, !=, null, &&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, return]
[,, objective, ), ;, if, (, previous, !=, null, &&, checker, ., converged, (, iter, ,, previous, ,, current, )]
[), ;, if, (, previous, !=, null, &&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {]
[), {, return, current, ;, }, final, UnivariateFunction, lsf, =, new, LineSearchFunction, (, searchDirection, ), ;, final, double, uB, =]
[&&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, return, current, ;, }, final, UnivariateFunction, lsf]
[!=, null, &&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, return, current, ;, }, final]
[&&, checker, ., converged, (, iter, ,, previous, ,, current, ), ), {, return, current, ;, }, final, UnivariateFunction, lsf]
[), {, return, current, ;, }, final, UnivariateFunction, lsf, =, new, LineSearchFunction, (, searchDirection, ), ;, final, double, uB, =]
[., converged, (, iter, ,, previous, ,, current, ), ), {, return, current, ;, }, final, UnivariateFunction, lsf, =, new]
[,, previous, ,, current, ), ), {, return, current, ;, }, final, UnivariateFunction, lsf, =, new, LineSearchFunction, (, searchDirection, )]
[,, current, ), ), {, return, current, ;, }, final, UnivariateFunction, lsf, =, new, LineSearchFunction, (, searchDirection, ), ;, final]
[), ), {, return, current, ;, }, final, UnivariateFunction, lsf, =, new, LineSearchFunction, (, searchDirection, ), ;, final, double, uB]
[;, }, final, UnivariateFunction, lsf, =, new, LineSearchFunction, (, searchDirection, ), ;, final, double, uB, =, findUpperBound, (, lsf, ,]
[;, final, double, uB, =, findUpperBound, (, lsf, ,, 0, ,, initialStep, ), ;, final, double, step, =, solver, .]
[), ;, final, double, uB, =, findUpperBound, (, lsf, ,, 0, ,, initialStep, ), ;, final, double, step, =, solver]
[;, final, double, step, =, solver, ., solve, (, maxEval, ,, lsf, ,, 0, ,, uB, ,, 1e-15, ), ;]
[,, 0, ,, initialStep, ), ;, final, double, step, =, solver, ., solve, (, maxEval, ,, lsf, ,, 0, ,]
[,, initialStep, ), ;, final, double, step, =, solver, ., solve, (, maxEval, ,, lsf, ,, 0, ,, uB, ,]
[), ;, final, double, step, =, solver, ., solve, (, maxEval, ,, lsf, ,, 0, ,, uB, ,, 1e-15, )]
[;, maxEval, -=, solver, ., getEvaluations, (, ), ;, for, (, int, i, =, 0, ;, i, <, point, .]
[., solve, (, maxEval, ,, lsf, ,, 0, ,, uB, ,, 1e-15, ), ;, maxEval, -=, solver, ., getEvaluations, (]
[,, lsf, ,, 0, ,, uB, ,, 1e-15, ), ;, maxEval, -=, solver, ., getEvaluations, (, ), ;, for, (]
[,, 0, ,, uB, ,, 1e-15, ), ;, maxEval, -=, solver, ., getEvaluations, (, ), ;, for, (, int, i]
[,, uB, ,, 1e-15, ), ;, maxEval, -=, solver, ., getEvaluations, (, ), ;, for, (, int, i, =, 0]
[,, 1e-15, ), ;, maxEval, -=, solver, ., getEvaluations, (, ), ;, for, (, int, i, =, 0, ;, i]
[), ;, maxEval, -=, solver, ., getEvaluations, (, ), ;, for, (, int, i, =, 0, ;, i, <, point]
[-=, solver, ., getEvaluations, (, ), ;, for, (, int, i, =, 0, ;, i, <, point, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, point, ., length, ;, ++, i, ), {, point, []
[., getEvaluations, (, ), ;, for, (, int, i, =, 0, ;, i, <, point, ., length, ;, ++, i]
[;, i, <, point, ., length, ;, ++, i, ), {, point, [, i, ], +=, step, *, searchDirection, []
[;, ++, i, ), {, point, [, i, ], +=, step, *, searchDirection, [, i, ], ;, }, r, =]
[<, point, ., length, ;, ++, i, ), {, point, [, i, ], +=, step, *, searchDirection, [, i, ]]
[;, ++, i, ), {, point, [, i, ], +=, step, *, searchDirection, [, i, ], ;, }, r, =]
[., length, ;, ++, i, ), {, point, [, i, ], +=, step, *, searchDirection, [, i, ], ;, }]
[), {, point, [, i, ], +=, step, *, searchDirection, [, i, ], ;, }, r, =, computeObjectiveGradient, (, point]
[), {, point, [, i, ], +=, step, *, searchDirection, [, i, ], ;, }, r, =, computeObjectiveGradient, (, point]
[+=, step, *, searchDirection, [, i, ], ;, }, r, =, computeObjectiveGradient, (, point, ), ;, if, (, goal, ==]
[[, i, ], +=, step, *, searchDirection, [, i, ], ;, }, r, =, computeObjectiveGradient, (, point, ), ;, if]
[], +=, step, *, searchDirection, [, i, ], ;, }, r, =, computeObjectiveGradient, (, point, ), ;, if, (, goal]
[;, }, r, =, computeObjectiveGradient, (, point, ), ;, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, for, (]
[*, searchDirection, [, i, ], ;, }, r, =, computeObjectiveGradient, (, point, ), ;, if, (, goal, ==, GoalType, .]
[;, }, r, =, computeObjectiveGradient, (, point, ), ;, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, for, (]
[[, i, ], ;, }, r, =, computeObjectiveGradient, (, point, ), ;, if, (, goal, ==, GoalType, ., MINIMIZE, )]
[], ;, }, r, =, computeObjectiveGradient, (, point, ), ;, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, for]
[=, computeObjectiveGradient, (, point, ), ;, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, for, (, int, i, =]
[;, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, for, (, int, i, =, 0, ;, i, <, n]
[), ;, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, for, (, int, i, =, 0, ;, i, <]
[), {, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, r, [, i]
[==, GoalType, ., MINIMIZE, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, )]
[), {, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, r, [, i]
[., MINIMIZE, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, r]
[;, i, <, n, ;, ++, i, ), {, r, [, i, ], =, -, r, [, i, ], ;]
[;, ++, i, ), {, r, [, i, ], =, -, r, [, i, ], ;, }, }, final, double]
[<, n, ;, ++, i, ), {, r, [, i, ], =, -, r, [, i, ], ;, }, }]
[;, ++, i, ), {, r, [, i, ], =, -, r, [, i, ], ;, }, }, final, double]
[), {, r, [, i, ], =, -, r, [, i, ], ;, }, }, final, double, deltaOld, =, delta]
[), {, r, [, i, ], =, -, r, [, i, ], ;, }, }, final, double, deltaOld, =, delta]
[=, -, r, [, i, ], ;, }, }, final, double, deltaOld, =, delta, ;, final, double, [, ], newSteepestDescent]
[[, i, ], =, -, r, [, i, ], ;, }, }, final, double, deltaOld, =, delta, ;, final, double]
[], =, -, r, [, i, ], ;, }, }, final, double, deltaOld, =, delta, ;, final, double, [, ]]
[;, }, }, final, double, deltaOld, =, delta, ;, final, double, [, ], newSteepestDescent, =, preconditioner, ., precondition, (, point]
[;, }, }, final, double, deltaOld, =, delta, ;, final, double, [, ], newSteepestDescent, =, preconditioner, ., precondition, (, point]
[[, i, ], ;, }, }, final, double, deltaOld, =, delta, ;, final, double, [, ], newSteepestDescent, =, preconditioner, .]
[], ;, }, }, final, double, deltaOld, =, delta, ;, final, double, [, ], newSteepestDescent, =, preconditioner, ., precondition, (]
[;, final, double, [, ], newSteepestDescent, =, preconditioner, ., precondition, (, point, ,, r, ), ;, delta, =, 0, ;]
[;, delta, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[., precondition, (, point, ,, r, ), ;, delta, =, 0, ;, for, (, int, i, =, 0, ;, i]
[,, r, ), ;, delta, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[), ;, delta, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, )]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, delta, +=]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, delta, +=, r, []
[;, i, <, n, ;, ++, i, ), {, delta, +=, r, [, i, ], *, newSteepestDescent, [, i, ]]
[;, ++, i, ), {, delta, +=, r, [, i, ], *, newSteepestDescent, [, i, ], ;, }, final, double]
[<, n, ;, ++, i, ), {, delta, +=, r, [, i, ], *, newSteepestDescent, [, i, ], ;, }]
[;, ++, i, ), {, delta, +=, r, [, i, ], *, newSteepestDescent, [, i, ], ;, }, final, double]
[), {, delta, +=, r, [, i, ], *, newSteepestDescent, [, i, ], ;, }, final, double, beta, ;, if]
[), {, delta, +=, r, [, i, ], *, newSteepestDescent, [, i, ], ;, }, final, double, beta, ;, if]
[+=, r, [, i, ], *, newSteepestDescent, [, i, ], ;, }, final, double, beta, ;, if, (, updateFormula, ==]
[;, }, final, double, beta, ;, if, (, updateFormula, ==, ConjugateGradientFormula, ., FLETCHER_REEVES, ), {, beta, =, delta, /, deltaOld]
[*, newSteepestDescent, [, i, ], ;, }, final, double, beta, ;, if, (, updateFormula, ==, ConjugateGradientFormula, ., FLETCHER_REEVES, ), {]
[[, i, ], *, newSteepestDescent, [, i, ], ;, }, final, double, beta, ;, if, (, updateFormula, ==, ConjugateGradientFormula, .]
[], *, newSteepestDescent, [, i, ], ;, }, final, double, beta, ;, if, (, updateFormula, ==, ConjugateGradientFormula, ., FLETCHER_REEVES, )]
[;, }, final, double, beta, ;, if, (, updateFormula, ==, ConjugateGradientFormula, ., FLETCHER_REEVES, ), {, beta, =, delta, /, deltaOld]
[[, i, ], ;, }, final, double, beta, ;, if, (, updateFormula, ==, ConjugateGradientFormula, ., FLETCHER_REEVES, ), {, beta, =]
[], ;, }, final, double, beta, ;, if, (, updateFormula, ==, ConjugateGradientFormula, ., FLETCHER_REEVES, ), {, beta, =, delta, /]
[), {, beta, =, delta, /, deltaOld, ;, }, else, {, double, deltaMid, =, 0, ;, for, (, int, i]
[==, ConjugateGradientFormula, ., FLETCHER_REEVES, ), {, beta, =, delta, /, deltaOld, ;, }, else, {, double, deltaMid, =, 0, ;]
[), {, beta, =, delta, /, deltaOld, ;, }, else, {, double, deltaMid, =, 0, ;, for, (, int, i]
[., FLETCHER_REEVES, ), {, beta, =, delta, /, deltaOld, ;, }, else, {, double, deltaMid, =, 0, ;, for, (]
[=, delta, /, deltaOld, ;, }, else, {, double, deltaMid, =, 0, ;, for, (, int, i, =, 0, ;]
[;, }, else, {, double, deltaMid, =, 0, ;, for, (, int, i, =, 0, ;, i, <, r, .]
[/, deltaOld, ;, }, else, {, double, deltaMid, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[;, }, else, {, double, deltaMid, =, 0, ;, for, (, int, i, =, 0, ;, i, <, r, .]
[;, for, (, int, i, =, 0, ;, i, <, r, ., length, ;, ++, i, ), {, deltaMid, +=]
[;, i, <, r, ., length, ;, ++, i, ), {, deltaMid, +=, r, [, i, ], *, steepestDescent, []
[;, ++, i, ), {, deltaMid, +=, r, [, i, ], *, steepestDescent, [, i, ], ;, }, beta, =]
[<, r, ., length, ;, ++, i, ), {, deltaMid, +=, r, [, i, ], *, steepestDescent, [, i, ]]
[;, ++, i, ), {, deltaMid, +=, r, [, i, ], *, steepestDescent, [, i, ], ;, }, beta, =]
[., length, ;, ++, i, ), {, deltaMid, +=, r, [, i, ], *, steepestDescent, [, i, ], ;, }]
[), {, deltaMid, +=, r, [, i, ], *, steepestDescent, [, i, ], ;, }, beta, =, (, delta, -]
[), {, deltaMid, +=, r, [, i, ], *, steepestDescent, [, i, ], ;, }, beta, =, (, delta, -]
[+=, r, [, i, ], *, steepestDescent, [, i, ], ;, }, beta, =, (, delta, -, deltaMid, ), /]
[;, }, beta, =, (, delta, -, deltaMid, ), /, deltaOld, ;, }, steepestDescent, =, newSteepestDescent, ;, if, (, iter]
[*, steepestDescent, [, i, ], ;, }, beta, =, (, delta, -, deltaMid, ), /, deltaOld, ;, }, steepestDescent, =]
[[, i, ], *, steepestDescent, [, i, ], ;, }, beta, =, (, delta, -, deltaMid, ), /, deltaOld, ;]
[], *, steepestDescent, [, i, ], ;, }, beta, =, (, delta, -, deltaMid, ), /, deltaOld, ;, }, steepestDescent]
[;, }, beta, =, (, delta, -, deltaMid, ), /, deltaOld, ;, }, steepestDescent, =, newSteepestDescent, ;, if, (, iter]
[[, i, ], ;, }, beta, =, (, delta, -, deltaMid, ), /, deltaOld, ;, }, steepestDescent, =, newSteepestDescent, ;]
[], ;, }, beta, =, (, delta, -, deltaMid, ), /, deltaOld, ;, }, steepestDescent, =, newSteepestDescent, ;, if, (]
[=, (, delta, -, deltaMid, ), /, deltaOld, ;, }, steepestDescent, =, newSteepestDescent, ;, if, (, iter, %, n, ==]
[;, }, steepestDescent, =, newSteepestDescent, ;, if, (, iter, %, n, ==, 0, ||, beta, <, 0, ), {, searchDirection]
[/, deltaOld, ;, }, steepestDescent, =, newSteepestDescent, ;, if, (, iter, %, n, ==, 0, ||, beta, <, 0, )]
[), /, deltaOld, ;, }, steepestDescent, =, newSteepestDescent, ;, if, (, iter, %, n, ==, 0, ||, beta, <, 0]
[-, deltaMid, ), /, deltaOld, ;, }, steepestDescent, =, newSteepestDescent, ;, if, (, iter, %, n, ==, 0, ||, beta]
[), /, deltaOld, ;, }, steepestDescent, =, newSteepestDescent, ;, if, (, iter, %, n, ==, 0, ||, beta, <, 0]
[;, }, steepestDescent, =, newSteepestDescent, ;, if, (, iter, %, n, ==, 0, ||, beta, <, 0, ), {, searchDirection]
[=, newSteepestDescent, ;, if, (, iter, %, n, ==, 0, ||, beta, <, 0, ), {, searchDirection, =, steepestDescent, .]
[;, if, (, iter, %, n, ==, 0, ||, beta, <, 0, ), {, searchDirection, =, steepestDescent, ., clone, (]
[), {, searchDirection, =, steepestDescent, ., clone, (, ), ;, }, else, {, for, (, int, i, =, 0, ;]
[||, beta, <, 0, ), {, searchDirection, =, steepestDescent, ., clone, (, ), ;, }, else, {, for, (, int]
[==, 0, ||, beta, <, 0, ), {, searchDirection, =, steepestDescent, ., clone, (, ), ;, }, else, {, for]
[%, n, ==, 0, ||, beta, <, 0, ), {, searchDirection, =, steepestDescent, ., clone, (, ), ;, }, else]
[==, 0, ||, beta, <, 0, ), {, searchDirection, =, steepestDescent, ., clone, (, ), ;, }, else, {, for]
[||, beta, <, 0, ), {, searchDirection, =, steepestDescent, ., clone, (, ), ;, }, else, {, for, (, int]
[), {, searchDirection, =, steepestDescent, ., clone, (, ), ;, }, else, {, for, (, int, i, =, 0, ;]
[<, 0, ), {, searchDirection, =, steepestDescent, ., clone, (, ), ;, }, else, {, for, (, int, i, =]
[), {, searchDirection, =, steepestDescent, ., clone, (, ), ;, }, else, {, for, (, int, i, =, 0, ;]
[=, steepestDescent, ., clone, (, ), ;, }, else, {, for, (, int, i, =, 0, ;, i, <, n]
[;, }, else, {, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, searchDirection]
[., clone, (, ), ;, }, else, {, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[;, i, <, n, ;, ++, i, ), {, searchDirection, [, i, ], =, steepestDescent, [, i, ], +, beta]
[;, ++, i, ), {, searchDirection, [, i, ], =, steepestDescent, [, i, ], +, beta, *, searchDirection, [, i]
[<, n, ;, ++, i, ), {, searchDirection, [, i, ], =, steepestDescent, [, i, ], +, beta, *, searchDirection]
[;, ++, i, ), {, searchDirection, [, i, ], =, steepestDescent, [, i, ], +, beta, *, searchDirection, [, i]
[), {, searchDirection, [, i, ], =, steepestDescent, [, i, ], +, beta, *, searchDirection, [, i, ], ;, }]
[), {, searchDirection, [, i, ], =, steepestDescent, [, i, ], +, beta, *, searchDirection, [, i, ], ;, }]
[=, steepestDescent, [, i, ], +, beta, *, searchDirection, [, i, ], ;, }, }, }, }, private, double, findUpperBound]
[[, i, ], =, steepestDescent, [, i, ], +, beta, *, searchDirection, [, i, ], ;, }, }, }, }]
[], =, steepestDescent, [, i, ], +, beta, *, searchDirection, [, i, ], ;, }, }, }, }, private, double]
[;, }, }, }, }, private, double, findUpperBound, (, final, UnivariateFunction, f, ,, final, double, a, ,, final, double, h]
[+, beta, *, searchDirection, [, i, ], ;, }, }, }, }, private, double, findUpperBound, (, final, UnivariateFunction, f, ,]
[[, i, ], +, beta, *, searchDirection, [, i, ], ;, }, }, }, }, private, double, findUpperBound, (, final]
[], +, beta, *, searchDirection, [, i, ], ;, }, }, }, }, private, double, findUpperBound, (, final, UnivariateFunction, f]
[;, }, }, }, }, private, double, findUpperBound, (, final, UnivariateFunction, f, ,, final, double, a, ,, final, double, h]
[*, searchDirection, [, i, ], ;, }, }, }, }, private, double, findUpperBound, (, final, UnivariateFunction, f, ,, final, double]
[;, }, }, }, }, private, double, findUpperBound, (, final, UnivariateFunction, f, ,, final, double, a, ,, final, double, h]
[[, i, ], ;, }, }, }, }, private, double, findUpperBound, (, final, UnivariateFunction, f, ,, final, double, a, ,]
[], ;, }, }, }, }, private, double, findUpperBound, (, final, UnivariateFunction, f, ,, final, double, a, ,, final, double]
[;, double, yB, =, yA, ;, for, (, double, step, =, h, ;, step, <, Double, ., MAX_VALUE, ;, step]
[., value, (, a, ), ;, double, yB, =, yA, ;, for, (, double, step, =, h, ;, step, <]
[), ;, double, yB, =, yA, ;, for, (, double, step, =, h, ;, step, <, Double, ., MAX_VALUE, ;]
[;, for, (, double, step, =, h, ;, step, <, Double, ., MAX_VALUE, ;, step, *=, FastMath, ., max, (]
[;, step, <, Double, ., MAX_VALUE, ;, step, *=, FastMath, ., max, (, 2, ,, yA, /, yB, ), )]
[;, step, *=, FastMath, ., max, (, 2, ,, yA, /, yB, ), ), {, final, double, b, =, a]
[<, Double, ., MAX_VALUE, ;, step, *=, FastMath, ., max, (, 2, ,, yA, /, yB, ), ), {, final]
[;, step, *=, FastMath, ., max, (, 2, ,, yA, /, yB, ), ), {, final, double, b, =, a]
[., MAX_VALUE, ;, step, *=, FastMath, ., max, (, 2, ,, yA, /, yB, ), ), {, final, double, b]
[*=, FastMath, ., max, (, 2, ,, yA, /, yB, ), ), {, final, double, b, =, a, +, step]
[), {, final, double, b, =, a, +, step, ;, yB, =, f, ., value, (, b, ), ;, if]
[., max, (, 2, ,, yA, /, yB, ), ), {, final, double, b, =, a, +, step, ;, yB]
[,, yA, /, yB, ), ), {, final, double, b, =, a, +, step, ;, yB, =, f, ., value]
[), ), {, final, double, b, =, a, +, step, ;, yB, =, f, ., value, (, b, ), ;]
[/, yB, ), ), {, final, double, b, =, a, +, step, ;, yB, =, f, ., value, (, b]
[), ), {, final, double, b, =, a, +, step, ;, yB, =, f, ., value, (, b, ), ;]
[;, yB, =, f, ., value, (, b, ), ;, if, (, yA, *, yB, <=, 0, ), {, return]
[+, step, ;, yB, =, f, ., value, (, b, ), ;, if, (, yA, *, yB, <=, 0, )]
[;, yB, =, f, ., value, (, b, ), ;, if, (, yA, *, yB, <=, 0, ), {, return]
[=, f, ., value, (, b, ), ;, if, (, yA, *, yB, <=, 0, ), {, return, b, ;]
[;, if, (, yA, *, yB, <=, 0, ), {, return, b, ;, }, }, throw, new, MathIllegalStateException, (, LocalizedFormats]
[., value, (, b, ), ;, if, (, yA, *, yB, <=, 0, ), {, return, b, ;, }, }]
[), ;, if, (, yA, *, yB, <=, 0, ), {, return, b, ;, }, }, throw, new, MathIllegalStateException, (]
[), {, return, b, ;, }, }, throw, new, MathIllegalStateException, (, LocalizedFormats, ., UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH, ), ;, }, public, static, class]
[<=, 0, ), {, return, b, ;, }, }, throw, new, MathIllegalStateException, (, LocalizedFormats, ., UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH, ), ;, }, public]
[*, yB, <=, 0, ), {, return, b, ;, }, }, throw, new, MathIllegalStateException, (, LocalizedFormats, ., UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH, ), ;]
[<=, 0, ), {, return, b, ;, }, }, throw, new, MathIllegalStateException, (, LocalizedFormats, ., UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH, ), ;, }, public]
[), {, return, b, ;, }, }, throw, new, MathIllegalStateException, (, LocalizedFormats, ., UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH, ), ;, }, public, static, class]
[;, }, }, throw, new, MathIllegalStateException, (, LocalizedFormats, ., UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH, ), ;, }, public, static, class, IdentityPreconditioner, implements, Preconditioner, {]
[;, }, public, static, class, IdentityPreconditioner, implements, Preconditioner, {, public, double, [, ], precondition, (, double, [, ], variables, ,]
[), ;, }, public, static, class, IdentityPreconditioner, implements, Preconditioner, {, public, double, [, ], precondition, (, double, [, ], variables]
[., UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH, ), ;, }, public, static, class, IdentityPreconditioner, implements, Preconditioner, {, public, double, [, ], precondition, (, double, []
[;, }, }, private, class, LineSearchFunction, implements, UnivariateFunction, {, private, final, double, [, ], searchDirection, ;, public, LineSearchFunction, (, final]
[., clone, (, ), ;, }, }, private, class, LineSearchFunction, implements, UnivariateFunction, {, private, final, double, [, ], searchDirection, ;]
[=, searchDirection, ;, }, public, double, value, (, double, x, ), {, final, double, [, ], shiftedPoint, =, point, .]
[., searchDirection, =, searchDirection, ;, }, public, double, value, (, double, x, ), {, final, double, [, ], shiftedPoint, =]
[;, }, public, double, value, (, double, x, ), {, final, double, [, ], shiftedPoint, =, point, ., clone, (]
[;, for, (, int, i, =, 0, ;, i, <, shiftedPoint, ., length, ;, ++, i, ), {, shiftedPoint, []
[., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, shiftedPoint, ., length, ;, ++, i]
[;, i, <, shiftedPoint, ., length, ;, ++, i, ), {, shiftedPoint, [, i, ], +=, x, *, searchDirection, []
[;, ++, i, ), {, shiftedPoint, [, i, ], +=, x, *, searchDirection, [, i, ], ;, }, final, double]
[<, shiftedPoint, ., length, ;, ++, i, ), {, shiftedPoint, [, i, ], +=, x, *, searchDirection, [, i, ]]
[;, ++, i, ), {, shiftedPoint, [, i, ], +=, x, *, searchDirection, [, i, ], ;, }, final, double]
[., length, ;, ++, i, ), {, shiftedPoint, [, i, ], +=, x, *, searchDirection, [, i, ], ;, }]
[), {, shiftedPoint, [, i, ], +=, x, *, searchDirection, [, i, ], ;, }, final, double, [, ], gradient]
[), {, shiftedPoint, [, i, ], +=, x, *, searchDirection, [, i, ], ;, }, final, double, [, ], gradient]
[+=, x, *, searchDirection, [, i, ], ;, }, final, double, [, ], gradient, =, computeObjectiveGradient, (, shiftedPoint, ), ;]
[[, i, ], +=, x, *, searchDirection, [, i, ], ;, }, final, double, [, ], gradient, =, computeObjectiveGradient, (]
[], +=, x, *, searchDirection, [, i, ], ;, }, final, double, [, ], gradient, =, computeObjectiveGradient, (, shiftedPoint, )]
[;, }, final, double, [, ], gradient, =, computeObjectiveGradient, (, shiftedPoint, ), ;, double, dotProduct, =, 0, ;, for, (]
[*, searchDirection, [, i, ], ;, }, final, double, [, ], gradient, =, computeObjectiveGradient, (, shiftedPoint, ), ;, double, dotProduct]
[;, }, final, double, [, ], gradient, =, computeObjectiveGradient, (, shiftedPoint, ), ;, double, dotProduct, =, 0, ;, for, (]
[[, i, ], ;, }, final, double, [, ], gradient, =, computeObjectiveGradient, (, shiftedPoint, ), ;, double, dotProduct, =, 0]
[], ;, }, final, double, [, ], gradient, =, computeObjectiveGradient, (, shiftedPoint, ), ;, double, dotProduct, =, 0, ;, for]
[;, double, dotProduct, =, 0, ;, for, (, int, i, =, 0, ;, i, <, gradient, ., length, ;, ++]
[), ;, double, dotProduct, =, 0, ;, for, (, int, i, =, 0, ;, i, <, gradient, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, gradient, ., length, ;, ++, i, ), {, dotProduct, +=]
[;, i, <, gradient, ., length, ;, ++, i, ), {, dotProduct, +=, gradient, [, i, ], *, searchDirection, []
[;, ++, i, ), {, dotProduct, +=, gradient, [, i, ], *, searchDirection, [, i, ], ;, }, return, dotProduct]
[<, gradient, ., length, ;, ++, i, ), {, dotProduct, +=, gradient, [, i, ], *, searchDirection, [, i, ]]
[;, ++, i, ), {, dotProduct, +=, gradient, [, i, ], *, searchDirection, [, i, ], ;, }, return, dotProduct]
[., length, ;, ++, i, ), {, dotProduct, +=, gradient, [, i, ], *, searchDirection, [, i, ], ;, }]
[), {, dotProduct, +=, gradient, [, i, ], *, searchDirection, [, i, ], ;, }, return, dotProduct, ;, }, }]
[), {, dotProduct, +=, gradient, [, i, ], *, searchDirection, [, i, ], ;, }, return, dotProduct, ;, }, }]
[+=, gradient, [, i, ], *, searchDirection, [, i, ], ;, }, return, dotProduct, ;, }, }, }]
[;, }, return, dotProduct, ;, }, }, }]
[*, searchDirection, [, i, ], ;, }, return, dotProduct, ;, }, }, }]
[[, i, ], *, searchDirection, [, i, ], ;, }, return, dotProduct, ;, }, }, }]
[], *, searchDirection, [, i, ], ;, }, return, dotProduct, ;, }, }, }]
[;, }, return, dotProduct, ;, }, }, }]
[[, i, ], ;, }, return, dotProduct, ;, }, }, }]
[], ;, }, return, dotProduct, ;, }, }, }]
[;, }, }, }]
