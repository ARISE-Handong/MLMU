[., util, ., LocalizedFormats, ;, public, abstract, class, AbstractFormat, extends, NumberFormat, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[util, ., LocalizedFormats, ;, public, abstract, class, AbstractFormat, extends, NumberFormat, implements, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[serialVersionUID, =, -, 6981118387974191891L, ;, private, NumberFormat, denominatorFormat, ;, private, NumberFormat, numeratorFormat, ;, protected, AbstractFormat, (, ), {, this, (]
[), {, this, (, getDefaultNumberFormat, (, ), ), ;, }, protected, AbstractFormat, (, final, NumberFormat, format, ), {, this, (]
[this, (, getDefaultNumberFormat, (, ), ), ;, }, protected, AbstractFormat, (, final, NumberFormat, format, ), {, this, (, format, ,]
[(, ), ), ;, }, protected, AbstractFormat, (, final, NumberFormat, format, ), {, this, (, format, ,, (, NumberFormat, )]
[(, ), ), ;, }, protected, AbstractFormat, (, final, NumberFormat, format, ), {, this, (, format, ,, (, NumberFormat, )]
[format, ., clone, (, ), ), ;, }, protected, AbstractFormat, (, final, NumberFormat, numeratorFormat, ,, final, NumberFormat, denominatorFormat, ), {]
[format, ., clone, (, ), ), ;, }, protected, AbstractFormat, (, final, NumberFormat, numeratorFormat, ,, final, NumberFormat, denominatorFormat, ), {]
[), ), ;, }, protected, AbstractFormat, (, final, NumberFormat, numeratorFormat, ,, final, NumberFormat, denominatorFormat, ), {, this, ., numeratorFormat, =]
[;, }, protected, AbstractFormat, (, final, NumberFormat, numeratorFormat, ,, final, NumberFormat, denominatorFormat, ), {, this, ., numeratorFormat, =, numeratorFormat, ;]
[;, }, protected, AbstractFormat, (, final, NumberFormat, numeratorFormat, ,, final, NumberFormat, denominatorFormat, ), {, this, ., numeratorFormat, =, numeratorFormat, ;]
[(, final, NumberFormat, numeratorFormat, ,, final, NumberFormat, denominatorFormat, ), {, this, ., numeratorFormat, =, numeratorFormat, ;, this, ., denominatorFormat, =]
[., numeratorFormat, =, numeratorFormat, ;, this, ., denominatorFormat, =, denominatorFormat, ;, }, protected, static, NumberFormat, getDefaultNumberFormat, (, ), {, return]
[=, numeratorFormat, ;, this, ., denominatorFormat, =, denominatorFormat, ;, }, protected, static, NumberFormat, getDefaultNumberFormat, (, ), {, return, getDefaultNumberFormat, (]
[=, numeratorFormat, ;, this, ., denominatorFormat, =, denominatorFormat, ;, }, protected, static, NumberFormat, getDefaultNumberFormat, (, ), {, return, getDefaultNumberFormat, (]
[getDefault, (, ), ), ;, }, protected, static, NumberFormat, getDefaultNumberFormat, (, final, Locale, locale, ), {, final, NumberFormat, nf, =]
[getDefault, (, ), ), ;, }, protected, static, NumberFormat, getDefaultNumberFormat, (, final, Locale, locale, ), {, final, NumberFormat, nf, =]
[;, }, protected, static, NumberFormat, getDefaultNumberFormat, (, final, Locale, locale, ), {, final, NumberFormat, nf, =, NumberFormat, ., getNumberInstance, (]
[static, NumberFormat, getDefaultNumberFormat, (, final, Locale, locale, ), {, final, NumberFormat, nf, =, NumberFormat, ., getNumberInstance, (, locale, ), ;]
[static, NumberFormat, getDefaultNumberFormat, (, final, Locale, locale, ), {, final, NumberFormat, nf, =, NumberFormat, ., getNumberInstance, (, locale, ), ;]
[final, Locale, locale, ), {, final, NumberFormat, nf, =, NumberFormat, ., getNumberInstance, (, locale, ), ;, nf, ., setMaximumFractionDigits, (]
[), {, final, NumberFormat, nf, =, NumberFormat, ., getNumberInstance, (, locale, ), ;, nf, ., setMaximumFractionDigits, (, 0, ), ;]
[), {, final, NumberFormat, nf, =, NumberFormat, ., getNumberInstance, (, locale, ), ;, nf, ., setMaximumFractionDigits, (, 0, ), ;]
[nf, =, NumberFormat, ., getNumberInstance, (, locale, ), ;, nf, ., setMaximumFractionDigits, (, 0, ), ;, nf, ., setParseIntegerOnly, (]
[getNumberInstance, (, locale, ), ;, nf, ., setMaximumFractionDigits, (, 0, ), ;, nf, ., setParseIntegerOnly, (, true, ), ;, return]
[), ;, nf, ., setParseIntegerOnly, (, true, ), ;, return, nf, ;, }, public, NumberFormat, getDenominatorFormat, (, ), {, return]
[nf, ;, }, public, NumberFormat, getDenominatorFormat, (, ), {, return, denominatorFormat, ;, }, public, NumberFormat, getNumeratorFormat, (, ), {, return]
[NumberFormat, getNumeratorFormat, (, ), {, return, numeratorFormat, ;, }, public, void, setDenominatorFormat, (, final, NumberFormat, format, ), {, if, (]
[NumberFormat, getNumeratorFormat, (, ), {, return, numeratorFormat, ;, }, public, void, setDenominatorFormat, (, final, NumberFormat, format, ), {, if, (]
[(, ), {, return, numeratorFormat, ;, }, public, void, setDenominatorFormat, (, final, NumberFormat, format, ), {, if, (, format, ==]
[numeratorFormat, ;, }, public, void, setDenominatorFormat, (, final, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw]
[public, void, setDenominatorFormat, (, final, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw, new, NullArgumentException, (]
[public, void, setDenominatorFormat, (, final, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw, new, NullArgumentException, (]
[format, ), {, if, (, format, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., DENOMINATOR_FORMAT, ), ;, }]
[format, ), {, if, (, format, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., DENOMINATOR_FORMAT, ), ;, }]
[(, format, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., DENOMINATOR_FORMAT, ), ;, }, this, ., denominatorFormat, =]
[;, }, this, ., denominatorFormat, =, format, ;, }, public, void, setNumeratorFormat, (, final, NumberFormat, format, ), {, if, (]
[;, }, this, ., denominatorFormat, =, format, ;, }, public, void, setNumeratorFormat, (, final, NumberFormat, format, ), {, if, (]
[this, ., denominatorFormat, =, format, ;, }, public, void, setNumeratorFormat, (, final, NumberFormat, format, ), {, if, (, format, ==]
[format, ;, }, public, void, setNumeratorFormat, (, final, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw]
[public, void, setNumeratorFormat, (, final, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw, new, NullArgumentException, (]
[public, void, setNumeratorFormat, (, final, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw, new, NullArgumentException, (]
[format, ), {, if, (, format, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., NUMERATOR_FORMAT, ), ;, }]
[format, ), {, if, (, format, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., NUMERATOR_FORMAT, ), ;, }]
[(, format, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., NUMERATOR_FORMAT, ), ;, }, this, ., numeratorFormat, =]
[., numeratorFormat, =, format, ;, }, protected, static, void, parseAndIgnoreWhitespace, (, final, String, source, ,, final, ParsePosition, pos, ), {]
[=, format, ;, }, protected, static, void, parseAndIgnoreWhitespace, (, final, String, source, ,, final, ParsePosition, pos, ), {, parseNextCharacter, (]
[;, }, protected, static, void, parseAndIgnoreWhitespace, (, final, String, source, ,, final, ParsePosition, pos, ), {, parseNextCharacter, (, source, ,]
[static, void, parseAndIgnoreWhitespace, (, final, String, source, ,, final, ParsePosition, pos, ), {, parseNextCharacter, (, source, ,, pos, ), ;]
[static, void, parseAndIgnoreWhitespace, (, final, String, source, ,, final, ParsePosition, pos, ), {, parseNextCharacter, (, source, ,, pos, ), ;]
[final, String, source, ,, final, ParsePosition, pos, ), {, parseNextCharacter, (, source, ,, pos, ), ;, pos, ., setIndex, (]
[final, String, source, ,, final, ParsePosition, pos, ), {, parseNextCharacter, (, source, ,, pos, ), ;, pos, ., setIndex, (]
[final, String, source, ,, final, ParsePosition, pos, ), {, parseNextCharacter, (, source, ,, pos, ), ;, pos, ., setIndex, (]
[pos, ), {, parseNextCharacter, (, source, ,, pos, ), ;, pos, ., setIndex, (, pos, ., getIndex, (, ), -]
[), ;, }, protected, static, char, parseNextCharacter, (, final, String, source, ,, final, ParsePosition, pos, ), {, int, index, =]
[), ;, }, protected, static, char, parseNextCharacter, (, final, String, source, ,, final, ParsePosition, pos, ), {, int, index, =]
[source, ,, final, ParsePosition, pos, ), {, int, index, =, pos, ., getIndex, (, ), ;, final, int, n, =]
[source, ,, final, ParsePosition, pos, ), {, int, index, =, pos, ., getIndex, (, ), ;, final, int, n, =]
[=, pos, ., getIndex, (, ), ;, final, int, n, =, source, ., length, (, ), ;, char, ret, =]
[(, ), ;, final, int, n, =, source, ., length, (, ), ;, char, ret, =, 0, ;, if, (]
[(, ), ;, final, int, n, =, source, ., length, (, ), ;, char, ret, =, 0, ;, if, (]
[;, final, int, n, =, source, ., length, (, ), ;, char, ret, =, 0, ;, if, (, index, <]
[(, ), ;, char, ret, =, 0, ;, if, (, index, <, n, ), {, char, c, ;, do, {]
[;, char, ret, =, 0, ;, if, (, index, <, n, ), {, char, c, ;, do, {, c, =]
[;, char, ret, =, 0, ;, if, (, index, <, n, ), {, char, c, ;, do, {, c, =]
[0, ;, if, (, index, <, n, ), {, char, c, ;, do, {, c, =, source, ., charAt, (]
[0, ;, if, (, index, <, n, ), {, char, c, ;, do, {, c, =, source, ., charAt, (]
[), {, char, c, ;, do, {, c, =, source, ., charAt, (, index, ++, ), ;, }, while, (]
[), {, char, c, ;, do, {, c, =, source, ., charAt, (, index, ++, ), ;, }, while, (]
[), {, char, c, ;, do, {, c, =, source, ., charAt, (, index, ++, ), ;, }, while, (]
[;, do, {, c, =, source, ., charAt, (, index, ++, ), ;, }, while, (, Character, ., isWhitespace, (]
[c, =, source, ., charAt, (, index, ++, ), ;, }, while, (, Character, ., isWhitespace, (, c, ), &&]
[c, =, source, ., charAt, (, index, ++, ), ;, }, while, (, Character, ., isWhitespace, (, c, ), &&]
[source, ., charAt, (, index, ++, ), ;, }, while, (, Character, ., isWhitespace, (, c, ), &&, index, <]
[(, index, ++, ), ;, }, while, (, Character, ., isWhitespace, (, c, ), &&, index, <, n, ), ;]
[(, index, ++, ), ;, }, while, (, Character, ., isWhitespace, (, c, ), &&, index, <, n, ), ;]
[;, }, while, (, Character, ., isWhitespace, (, c, ), &&, index, <, n, ), ;, pos, ., setIndex, (]
[., isWhitespace, (, c, ), &&, index, <, n, ), ;, pos, ., setIndex, (, index, ), ;, if, (]
[., isWhitespace, (, c, ), &&, index, <, n, ), ;, pos, ., setIndex, (, index, ), ;, if, (]
[(, c, ), &&, index, <, n, ), ;, pos, ., setIndex, (, index, ), ;, if, (, index, <]
[&&, index, <, n, ), ;, pos, ., setIndex, (, index, ), ;, if, (, index, <, n, ), {]
[<, n, ), ;, pos, ., setIndex, (, index, ), ;, if, (, index, <, n, ), {, ret, =]
[., setIndex, (, index, ), ;, if, (, index, <, n, ), {, ret, =, c, ;, }, }, return]
[@, Override, public, StringBuffer, format, (, final, double, value, ,, final, StringBuffer, buffer, ,, final, FieldPosition, position, ), {, return]
[public, StringBuffer, format, (, final, double, value, ,, final, StringBuffer, buffer, ,, final, FieldPosition, position, ), {, return, format, (]
[public, StringBuffer, format, (, final, double, value, ,, final, StringBuffer, buffer, ,, final, FieldPosition, position, ), {, return, format, (]
[final, double, value, ,, final, StringBuffer, buffer, ,, final, FieldPosition, position, ), {, return, format, (, Double, ., valueOf, (]
[,, final, StringBuffer, buffer, ,, final, FieldPosition, position, ), {, return, format, (, Double, ., valueOf, (, value, ), ,]
[StringBuffer, buffer, ,, final, FieldPosition, position, ), {, return, format, (, Double, ., valueOf, (, value, ), ,, buffer, ,]
[@, Override, public, StringBuffer, format, (, final, long, value, ,, final, StringBuffer, buffer, ,, final, FieldPosition, position, ), {, return]
[public, StringBuffer, format, (, final, long, value, ,, final, StringBuffer, buffer, ,, final, FieldPosition, position, ), {, return, format, (]
[public, StringBuffer, format, (, final, long, value, ,, final, StringBuffer, buffer, ,, final, FieldPosition, position, ), {, return, format, (]
[final, long, value, ,, final, StringBuffer, buffer, ,, final, FieldPosition, position, ), {, return, format, (, Long, ., valueOf, (]
[,, final, StringBuffer, buffer, ,, final, FieldPosition, position, ), {, return, format, (, Long, ., valueOf, (, value, ), ,]
[StringBuffer, buffer, ,, final, FieldPosition, position, ), {, return, format, (, Long, ., valueOf, (, value, ), ,, buffer, ,]
