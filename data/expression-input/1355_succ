[;, private, static, final, long, serialVersionUID, =, 20120112, ;, private, static, final, double, SQRT2PI, =, FastMath, ., sqrt, (, 2]
[;, private, static, final, double, SQRT2PI, =, FastMath, ., sqrt, (, 2, *, FastMath, ., PI, ), ;, private, static]
[;, private, static, final, double, SQRT2, =, FastMath, ., sqrt, (, 2.0, ), ;, private, final, double, scale, ;, private]
[., sqrt, (, 2, *, FastMath, ., PI, ), ;, private, static, final, double, SQRT2, =, FastMath, ., sqrt, (]
[), ;, private, static, final, double, SQRT2, =, FastMath, ., sqrt, (, 2.0, ), ;, private, final, double, scale, ;]
[*, FastMath, ., PI, ), ;, private, static, final, double, SQRT2, =, FastMath, ., sqrt, (, 2.0, ), ;, private]
[), ;, private, static, final, double, SQRT2, =, FastMath, ., sqrt, (, 2.0, ), ;, private, final, double, scale, ;]
[., PI, ), ;, private, static, final, double, SQRT2, =, FastMath, ., sqrt, (, 2.0, ), ;, private, final, double]
[;, private, final, double, scale, ;, private, final, double, shape, ;, private, final, double, solverAbsoluteAccuracy, ;, public, LogNormalDistribution, (, )]
[., sqrt, (, 2.0, ), ;, private, final, double, scale, ;, private, final, double, shape, ;, private, final, double, solverAbsoluteAccuracy]
[), ;, private, final, double, scale, ;, private, final, double, shape, ;, private, final, double, solverAbsoluteAccuracy, ;, public, LogNormalDistribution, (]
[,, 1, ), ;, }, public, LogNormalDistribution, (, double, scale, ,, double, shape, ), throws, NotStrictlyPositiveException, {, this, (, scale]
[), ;, }, public, LogNormalDistribution, (, double, scale, ,, double, shape, ), throws, NotStrictlyPositiveException, {, this, (, scale, ,, shape]
[,, shape, ,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, LogNormalDistribution, (, double, scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws]
[,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, LogNormalDistribution, (, double, scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {]
[), ;, }, public, LogNormalDistribution, (, double, scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (]
[,, scale, ,, shape, ,, inverseCumAccuracy, ), ;, }, public, LogNormalDistribution, (, RandomGenerator, rng, ,, double, scale, ,, double, shape]
[,, shape, ,, inverseCumAccuracy, ), ;, }, public, LogNormalDistribution, (, RandomGenerator, rng, ,, double, scale, ,, double, shape, ,, double]
[,, inverseCumAccuracy, ), ;, }, public, LogNormalDistribution, (, RandomGenerator, rng, ,, double, scale, ,, double, shape, ,, double, inverseCumAccuracy, )]
[), ;, }, public, LogNormalDistribution, (, RandomGenerator, rng, ,, double, scale, ,, double, shape, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException]
[), ;, if, (, shape, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, this, ., scale, =, scale, ;]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, this, ., scale, =]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, this, ., scale, =, scale, ;]
[;, }, this, ., scale, =, scale, ;, this, ., shape, =, shape, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;]
[,, shape, ), ;, }, this, ., scale, =, scale, ;, this, ., shape, =, shape, ;, this, ., solverAbsoluteAccuracy]
[., SHAPE, ,, shape, ), ;, }, this, ., scale, =, scale, ;, this, ., shape, =, shape, ;, this]
[), ;, }, this, ., scale, =, scale, ;, this, ., shape, =, shape, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy]
[=, scale, ;, this, ., shape, =, shape, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getScale, (]
[., scale, =, scale, ;, this, ., shape, =, shape, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double]
[;, this, ., shape, =, shape, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getScale, (, ), {]
[=, shape, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getScale, (, ), {, return, scale, ;, }]
[., shape, =, shape, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getScale, (, ), {, return, scale]
[;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getScale, (, ), {, return, scale, ;, }, public, double]
[=, inverseCumAccuracy, ;, }, public, double, getScale, (, ), {, return, scale, ;, }, public, double, getShape, (, ), {]
[., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getScale, (, ), {, return, scale, ;, }, public, double, getShape, (]
[;, }, public, double, getScale, (, ), {, return, scale, ;, }, public, double, getShape, (, ), {, return, shape]
[;, }, public, double, getShape, (, ), {, return, shape, ;, }, public, double, density, (, double, x, ), {]
[;, }, public, double, density, (, double, x, ), {, if, (, x, <=, 0, ), {, return, 0, ;]
[), {, return, 0, ;, }, final, double, x0, =, FastMath, ., log, (, x, ), -, scale, ;, final]
[<=, 0, ), {, return, 0, ;, }, final, double, x0, =, FastMath, ., log, (, x, ), -, scale]
[), {, return, 0, ;, }, final, double, x0, =, FastMath, ., log, (, x, ), -, scale, ;, final]
[;, }, final, double, x0, =, FastMath, ., log, (, x, ), -, scale, ;, final, double, x1, =, x0]
[;, final, double, x1, =, x0, /, shape, ;, return, FastMath, ., exp, (, -, 0.5, *, x1, *, x1]
[-, scale, ;, final, double, x1, =, x0, /, shape, ;, return, FastMath, ., exp, (, -, 0.5, *, x1]
[., log, (, x, ), -, scale, ;, final, double, x1, =, x0, /, shape, ;, return, FastMath, ., exp]
[), -, scale, ;, final, double, x1, =, x0, /, shape, ;, return, FastMath, ., exp, (, -, 0.5, *]
[;, final, double, x1, =, x0, /, shape, ;, return, FastMath, ., exp, (, -, 0.5, *, x1, *, x1]
[;, return, FastMath, ., exp, (, -, 0.5, *, x1, *, x1, ), /, (, shape, *, SQRT2PI, *, x]
[/, shape, ;, return, FastMath, ., exp, (, -, 0.5, *, x1, *, x1, ), /, (, shape, *, SQRT2PI]
[;, return, FastMath, ., exp, (, -, 0.5, *, x1, *, x1, ), /, (, shape, *, SQRT2PI, *, x]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, 0, ), {, return, 0, ;]
[/, (, shape, *, SQRT2PI, *, x, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (]
[., exp, (, -, 0.5, *, x1, *, x1, ), /, (, shape, *, SQRT2PI, *, x, ), ;, }]
[), /, (, shape, *, SQRT2PI, *, x, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if]
[*, x1, ), /, (, shape, *, SQRT2PI, *, x, ), ;, }, public, double, cumulativeProbability, (, double, x, )]
[*, x1, *, x1, ), /, (, shape, *, SQRT2PI, *, x, ), ;, }, public, double, cumulativeProbability, (, double]
[*, x1, *, x1, ), /, (, shape, *, SQRT2PI, *, x, ), ;, }, public, double, cumulativeProbability, (, double]
[*, x1, ), /, (, shape, *, SQRT2PI, *, x, ), ;, }, public, double, cumulativeProbability, (, double, x, )]
[), /, (, shape, *, SQRT2PI, *, x, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, 0, ), {, return, 0, ;]
[), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, 0, ), {, return, 0]
[*, x, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, 0, ), {]
[*, SQRT2PI, *, x, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, 0]
[*, x, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, 0, ), {]
[), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, 0, ), {, return, 0]
[), {, return, 0, ;, }, final, double, dev, =, FastMath, ., log, (, x, ), -, scale, ;, if]
[<=, 0, ), {, return, 0, ;, }, final, double, dev, =, FastMath, ., log, (, x, ), -, scale]
[), {, return, 0, ;, }, final, double, dev, =, FastMath, ., log, (, x, ), -, scale, ;, if]
[;, }, final, double, dev, =, FastMath, ., log, (, x, ), -, scale, ;, if, (, FastMath, ., abs]
[;, if, (, FastMath, ., abs, (, dev, ), >, 40, *, shape, ), {, return, dev, <, 0, ?]
[-, scale, ;, if, (, FastMath, ., abs, (, dev, ), >, 40, *, shape, ), {, return, dev, <]
[., log, (, x, ), -, scale, ;, if, (, FastMath, ., abs, (, dev, ), >, 40, *, shape]
[), -, scale, ;, if, (, FastMath, ., abs, (, dev, ), >, 40, *, shape, ), {, return, dev]
[;, if, (, FastMath, ., abs, (, dev, ), >, 40, *, shape, ), {, return, dev, <, 0, ?]
[), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, +, 0.5, *, Erf, ., erf]
[>, 40, *, shape, ), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, +, 0.5]
[., abs, (, dev, ), >, 40, *, shape, ), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;]
[), >, 40, *, shape, ), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, +]
[), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, +, 0.5, *, Erf, ., erf]
[*, shape, ), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, +, 0.5, *, Erf]
[), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, +, 0.5, *, Erf, ., erf]
[;, }, return, 0.5, +, 0.5, *, Erf, ., erf, (, dev, /, (, shape, *, SQRT2, ), ), ;]
[?, 0.0d, :, 1.0d, ;, }, return, 0.5, +, 0.5, *, Erf, ., erf, (, dev, /, (, shape, *]
[<, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, +, 0.5, *, Erf, ., erf, (, dev, /, (]
[?, 0.0d, :, 1.0d, ;, }, return, 0.5, +, 0.5, *, Erf, ., erf, (, dev, /, (, shape, *]
[:, 1.0d, ;, }, return, 0.5, +, 0.5, *, Erf, ., erf, (, dev, /, (, shape, *, SQRT2, )]
[;, }, return, 0.5, +, 0.5, *, Erf, ., erf, (, dev, /, (, shape, *, SQRT2, ), ), ;]
[;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return]
[+, 0.5, *, Erf, ., erf, (, dev, /, (, shape, *, SQRT2, ), ), ;, }, @, Override, @]
[;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return]
[*, Erf, ., erf, (, dev, /, (, shape, *, SQRT2, ), ), ;, }, @, Override, @, Deprecated, public]
[;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return]
[., erf, (, dev, /, (, shape, *, SQRT2, ), ), ;, }, @, Override, @, Deprecated, public, double, cumulativeProbability]
[), ;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {]
[/, (, shape, *, SQRT2, ), ), ;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,]
[), ;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {]
[), ), ;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException]
[*, SQRT2, ), ), ;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, )]
[), ), ;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException]
[;, }, @, Override, public, double, probability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, if, (, x0]
[,, x1, ), ;, }, @, Override, public, double, probability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {]
[), ;, }, @, Override, public, double, probability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, if, (]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, if, (]
[>, x1, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, if, (]
[;, }, if, (, x0, <=, 0, ||, x1, <=, 0, ), {, return, super, ., probability, (, x0, ,]
[,, x0, ,, x1, ,, true, ), ;, }, if, (, x0, <=, 0, ||, x1, <=, 0, ), {]
[., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, if, (, x0, <=, 0, ||, x1, <=, 0]
[,, x1, ,, true, ), ;, }, if, (, x0, <=, 0, ||, x1, <=, 0, ), {, return, super]
[,, true, ), ;, }, if, (, x0, <=, 0, ||, x1, <=, 0, ), {, return, super, ., probability]
[), ;, }, if, (, x0, <=, 0, ||, x1, <=, 0, ), {, return, super, ., probability, (, x0]
[), {, return, super, ., probability, (, x0, ,, x1, ), ;, }, final, double, denom, =, shape, *, SQRT2]
[||, x1, <=, 0, ), {, return, super, ., probability, (, x0, ,, x1, ), ;, }, final, double, denom]
[<=, 0, ||, x1, <=, 0, ), {, return, super, ., probability, (, x0, ,, x1, ), ;, }, final]
[||, x1, <=, 0, ), {, return, super, ., probability, (, x0, ,, x1, ), ;, }, final, double, denom]
[), {, return, super, ., probability, (, x0, ,, x1, ), ;, }, final, double, denom, =, shape, *, SQRT2]
[<=, 0, ), {, return, super, ., probability, (, x0, ,, x1, ), ;, }, final, double, denom, =, shape]
[), {, return, super, ., probability, (, x0, ,, x1, ), ;, }, final, double, denom, =, shape, *, SQRT2]
[;, }, final, double, denom, =, shape, *, SQRT2, ;, final, double, v0, =, (, FastMath, ., log, (, x0]
[., probability, (, x0, ,, x1, ), ;, }, final, double, denom, =, shape, *, SQRT2, ;, final, double, v0]
[,, x1, ), ;, }, final, double, denom, =, shape, *, SQRT2, ;, final, double, v0, =, (, FastMath, .]
[), ;, }, final, double, denom, =, shape, *, SQRT2, ;, final, double, v0, =, (, FastMath, ., log, (]
[;, final, double, v0, =, (, FastMath, ., log, (, x0, ), -, scale, ), /, denom, ;, final, double]
[*, SQRT2, ;, final, double, v0, =, (, FastMath, ., log, (, x0, ), -, scale, ), /, denom, ;]
[;, final, double, v0, =, (, FastMath, ., log, (, x0, ), -, scale, ), /, denom, ;, final, double]
[;, final, double, v1, =, (, FastMath, ., log, (, x1, ), -, scale, ), /, denom, ;, return, 0.5]
[/, denom, ;, final, double, v1, =, (, FastMath, ., log, (, x1, ), -, scale, ), /, denom, ;]
[), /, denom, ;, final, double, v1, =, (, FastMath, ., log, (, x1, ), -, scale, ), /, denom]
[-, scale, ), /, denom, ;, final, double, v1, =, (, FastMath, ., log, (, x1, ), -, scale, )]
[., log, (, x0, ), -, scale, ), /, denom, ;, final, double, v1, =, (, FastMath, ., log, (]
[), -, scale, ), /, denom, ;, final, double, v1, =, (, FastMath, ., log, (, x1, ), -, scale]
[), /, denom, ;, final, double, v1, =, (, FastMath, ., log, (, x1, ), -, scale, ), /, denom]
[;, final, double, v1, =, (, FastMath, ., log, (, x1, ), -, scale, ), /, denom, ;, return, 0.5]
[;, return, 0.5, *, Erf, ., erf, (, v0, ,, v1, ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (]
[/, denom, ;, return, 0.5, *, Erf, ., erf, (, v0, ,, v1, ), ;, }, @, Override, protected, double]
[), /, denom, ;, return, 0.5, *, Erf, ., erf, (, v0, ,, v1, ), ;, }, @, Override, protected]
[-, scale, ), /, denom, ;, return, 0.5, *, Erf, ., erf, (, v0, ,, v1, ), ;, }, @]
[., log, (, x1, ), -, scale, ), /, denom, ;, return, 0.5, *, Erf, ., erf, (, v0, ,]
[), -, scale, ), /, denom, ;, return, 0.5, *, Erf, ., erf, (, v0, ,, v1, ), ;, }]
[), /, denom, ;, return, 0.5, *, Erf, ., erf, (, v0, ,, v1, ), ;, }, @, Override, protected]
[;, return, 0.5, *, Erf, ., erf, (, v0, ,, v1, ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (]
[;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {]
[*, Erf, ., erf, (, v0, ,, v1, ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return]
[;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {]
[., erf, (, v0, ,, v1, ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;]
[,, v1, ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean]
[), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, )]
[;, }, public, double, getNumericalMean, (, ), {, double, s, =, shape, ;, return, FastMath, ., exp, (, scale, +]
[;, return, FastMath, ., exp, (, scale, +, (, s, *, s, /, 2, ), ), ;, }, public, double]
[;, }, public, double, getNumericalVariance, (, ), {, final, double, s, =, shape, ;, final, double, ss, =, s, *]
[., exp, (, scale, +, (, s, *, s, /, 2, ), ), ;, }, public, double, getNumericalVariance, (, )]
[), ;, }, public, double, getNumericalVariance, (, ), {, final, double, s, =, shape, ;, final, double, ss, =, s]
[+, (, s, *, s, /, 2, ), ), ;, }, public, double, getNumericalVariance, (, ), {, final, double, s]
[), ;, }, public, double, getNumericalVariance, (, ), {, final, double, s, =, shape, ;, final, double, ss, =, s]
[), ), ;, }, public, double, getNumericalVariance, (, ), {, final, double, s, =, shape, ;, final, double, ss, =]
[/, 2, ), ), ;, }, public, double, getNumericalVariance, (, ), {, final, double, s, =, shape, ;, final, double]
[*, s, /, 2, ), ), ;, }, public, double, getNumericalVariance, (, ), {, final, double, s, =, shape, ;]
[/, 2, ), ), ;, }, public, double, getNumericalVariance, (, ), {, final, double, s, =, shape, ;, final, double]
[), ), ;, }, public, double, getNumericalVariance, (, ), {, final, double, s, =, shape, ;, final, double, ss, =]
[;, final, double, ss, =, s, *, s, ;, return, (, FastMath, ., exp, (, ss, ), -, 1, )]
[;, return, (, FastMath, ., exp, (, ss, ), -, 1, ), *, FastMath, ., exp, (, 2, *, scale]
[*, s, ;, return, (, FastMath, ., exp, (, ss, ), -, 1, ), *, FastMath, ., exp, (, 2]
[;, return, (, FastMath, ., exp, (, ss, ), -, 1, ), *, FastMath, ., exp, (, 2, *, scale]
[;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return, Double]
[*, FastMath, ., exp, (, 2, *, scale, +, ss, ), ;, }, public, double, getSupportLowerBound, (, ), {, return]
[), *, FastMath, ., exp, (, 2, *, scale, +, ss, ), ;, }, public, double, getSupportLowerBound, (, ), {]
[-, 1, ), *, FastMath, ., exp, (, 2, *, scale, +, ss, ), ;, }, public, double, getSupportLowerBound, (]
[., exp, (, ss, ), -, 1, ), *, FastMath, ., exp, (, 2, *, scale, +, ss, ), ;]
[), -, 1, ), *, FastMath, ., exp, (, 2, *, scale, +, ss, ), ;, }, public, double, getSupportLowerBound]
[), *, FastMath, ., exp, (, 2, *, scale, +, ss, ), ;, }, public, double, getSupportLowerBound, (, ), {]
[;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return, Double]
[., exp, (, 2, *, scale, +, ss, ), ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;]
[), ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[+, ss, ), ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, )]
[*, scale, +, ss, ), ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound]
[+, ss, ), ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, )]
[), ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[;, }, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {]
[;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false]
[., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {]
[;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportConnected, (, ), {, return, true]
[;, }, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, double, sample, (, ), {]
[;, }, @, Override, public, double, sample, (, ), {, final, double, n, =, random, ., nextGaussian, (, ), ;]
[;, return, FastMath, ., exp, (, scale, +, shape, *, n, ), ;, }, }]
[., nextGaussian, (, ), ;, return, FastMath, ., exp, (, scale, +, shape, *, n, ), ;, }, }]
[;, }, }]
[., exp, (, scale, +, shape, *, n, ), ;, }, }]
[), ;, }, }]
[+, shape, *, n, ), ;, }, }]
[), ;, }, }]
[*, n, ), ;, }, }]
[), ;, }, }]
