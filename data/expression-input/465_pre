[apache, ., commons, ., math3, ., util, ., MathUtils, ;, final, class, SaddlePointExpansion, {, private, static, final, double, HALF_LOG_2_PI, =]
[apache, ., commons, ., math3, ., util, ., MathUtils, ;, final, class, SaddlePointExpansion, {, private, static, final, double, HALF_LOG_2_PI, =]
[commons, ., math3, ., util, ., MathUtils, ;, final, class, SaddlePointExpansion, {, private, static, final, double, HALF_LOG_2_PI, =, 0.5, *]
[commons, ., math3, ., util, ., MathUtils, ;, final, class, SaddlePointExpansion, {, private, static, final, double, HALF_LOG_2_PI, =, 0.5, *]
[util, ., MathUtils, ;, final, class, SaddlePointExpansion, {, private, static, final, double, HALF_LOG_2_PI, =, 0.5, *, FastMath, ., log, (]
[util, ., MathUtils, ;, final, class, SaddlePointExpansion, {, private, static, final, double, HALF_LOG_2_PI, =, 0.5, *, FastMath, ., log, (]
[=, 0.5, *, FastMath, ., log, (, MathUtils, ., TWO_PI, ), ;, private, static, final, double, [, ], EXACT_STIRLING_ERRORS, =]
[0.5, *, FastMath, ., log, (, MathUtils, ., TWO_PI, ), ;, private, static, final, double, [, ], EXACT_STIRLING_ERRORS, =, {]
[FastMath, ., log, (, MathUtils, ., TWO_PI, ), ;, private, static, final, double, [, ], EXACT_STIRLING_ERRORS, =, {, 0.0, ,]
[log, (, MathUtils, ., TWO_PI, ), ;, private, static, final, double, [, ], EXACT_STIRLING_ERRORS, =, {, 0.0, ,, 0.1534264097200273452913848, ,]
[MathUtils, ., TWO_PI, ), ;, private, static, final, double, [, ], EXACT_STIRLING_ERRORS, =, {, 0.0, ,, 0.1534264097200273452913848, ,, 0.0810614667953272582196702, ,]
[TWO_PI, ), ;, private, static, final, double, [, ], EXACT_STIRLING_ERRORS, =, {, 0.0, ,, 0.1534264097200273452913848, ,, 0.0810614667953272582196702, ,, 0.0548141210519176538961390, ,]
[;, private, static, final, double, [, ], EXACT_STIRLING_ERRORS, =, {, 0.0, ,, 0.1534264097200273452913848, ,, 0.0810614667953272582196702, ,, 0.0548141210519176538961390, ,, 0.0413406959554092940938221, ,]
[static, final, double, [, ], EXACT_STIRLING_ERRORS, =, {, 0.0, ,, 0.1534264097200273452913848, ,, 0.0810614667953272582196702, ,, 0.0548141210519176538961390, ,, 0.0413406959554092940938221, ,, 0.03316287351993628748511048, ,]
[double, [, ], EXACT_STIRLING_ERRORS, =, {, 0.0, ,, 0.1534264097200273452913848, ,, 0.0810614667953272582196702, ,, 0.0548141210519176538961390, ,, 0.0413406959554092940938221, ,, 0.03316287351993628748511048, ,, 0.02767792568499833914878929, ,]
[], EXACT_STIRLING_ERRORS, =, {, 0.0, ,, 0.1534264097200273452913848, ,, 0.0810614667953272582196702, ,, 0.0548141210519176538961390, ,, 0.0413406959554092940938221, ,, 0.03316287351993628748511048, ,, 0.02767792568499833914878929, ,, 0.02374616365629749597132920, ,]
[=, {, 0.0, ,, 0.1534264097200273452913848, ,, 0.0810614667953272582196702, ,, 0.0548141210519176538961390, ,, 0.0413406959554092940938221, ,, 0.03316287351993628748511048, ,, 0.02767792568499833914878929, ,, 0.02374616365629749597132920, ,, 0.02079067210376509311152277, ,]
[0.0, ,, 0.1534264097200273452913848, ,, 0.0810614667953272582196702, ,, 0.0548141210519176538961390, ,, 0.0413406959554092940938221, ,, 0.03316287351993628748511048, ,, 0.02767792568499833914878929, ,, 0.02374616365629749597132920, ,, 0.02079067210376509311152277, ,, 0.01848845053267318523077934, ,]
[0.1534264097200273452913848, ,, 0.0810614667953272582196702, ,, 0.0548141210519176538961390, ,, 0.0413406959554092940938221, ,, 0.03316287351993628748511048, ,, 0.02767792568499833914878929, ,, 0.02374616365629749597132920, ,, 0.02079067210376509311152277, ,, 0.01848845053267318523077934, ,, 0.01664469118982119216319487, ,]
[0.0810614667953272582196702, ,, 0.0548141210519176538961390, ,, 0.0413406959554092940938221, ,, 0.03316287351993628748511048, ,, 0.02767792568499833914878929, ,, 0.02374616365629749597132920, ,, 0.02079067210376509311152277, ,, 0.01848845053267318523077934, ,, 0.01664469118982119216319487, ,, 0.01513497322191737887351255, ,]
[0.0548141210519176538961390, ,, 0.0413406959554092940938221, ,, 0.03316287351993628748511048, ,, 0.02767792568499833914878929, ,, 0.02374616365629749597132920, ,, 0.02079067210376509311152277, ,, 0.01848845053267318523077934, ,, 0.01664469118982119216319487, ,, 0.01513497322191737887351255, ,, 0.01387612882307074799874573, ,]
[0.0413406959554092940938221, ,, 0.03316287351993628748511048, ,, 0.02767792568499833914878929, ,, 0.02374616365629749597132920, ,, 0.02079067210376509311152277, ,, 0.01848845053267318523077934, ,, 0.01664469118982119216319487, ,, 0.01513497322191737887351255, ,, 0.01387612882307074799874573, ,, 0.01281046524292022692424986, ,]
[0.03316287351993628748511048, ,, 0.02767792568499833914878929, ,, 0.02374616365629749597132920, ,, 0.02079067210376509311152277, ,, 0.01848845053267318523077934, ,, 0.01664469118982119216319487, ,, 0.01513497322191737887351255, ,, 0.01387612882307074799874573, ,, 0.01281046524292022692424986, ,, 0.01189670994589177009505572, ,]
[0.02767792568499833914878929, ,, 0.02374616365629749597132920, ,, 0.02079067210376509311152277, ,, 0.01848845053267318523077934, ,, 0.01664469118982119216319487, ,, 0.01513497322191737887351255, ,, 0.01387612882307074799874573, ,, 0.01281046524292022692424986, ,, 0.01189670994589177009505572, ,, 0.01110455975820691732662991, ,]
[0.02374616365629749597132920, ,, 0.02079067210376509311152277, ,, 0.01848845053267318523077934, ,, 0.01664469118982119216319487, ,, 0.01513497322191737887351255, ,, 0.01387612882307074799874573, ,, 0.01281046524292022692424986, ,, 0.01189670994589177009505572, ,, 0.01110455975820691732662991, ,, 0.010411265261972096497478567, ,]
[0.02079067210376509311152277, ,, 0.01848845053267318523077934, ,, 0.01664469118982119216319487, ,, 0.01513497322191737887351255, ,, 0.01387612882307074799874573, ,, 0.01281046524292022692424986, ,, 0.01189670994589177009505572, ,, 0.01110455975820691732662991, ,, 0.010411265261972096497478567, ,, 0.009799416126158803298389475, ,]
[0.01848845053267318523077934, ,, 0.01664469118982119216319487, ,, 0.01513497322191737887351255, ,, 0.01387612882307074799874573, ,, 0.01281046524292022692424986, ,, 0.01189670994589177009505572, ,, 0.01110455975820691732662991, ,, 0.010411265261972096497478567, ,, 0.009799416126158803298389475, ,, 0.009255462182712732917728637, ,]
[0.01664469118982119216319487, ,, 0.01513497322191737887351255, ,, 0.01387612882307074799874573, ,, 0.01281046524292022692424986, ,, 0.01189670994589177009505572, ,, 0.01110455975820691732662991, ,, 0.010411265261972096497478567, ,, 0.009799416126158803298389475, ,, 0.009255462182712732917728637, ,, 0.008768700134139385462952823, ,]
[0.01513497322191737887351255, ,, 0.01387612882307074799874573, ,, 0.01281046524292022692424986, ,, 0.01189670994589177009505572, ,, 0.01110455975820691732662991, ,, 0.010411265261972096497478567, ,, 0.009799416126158803298389475, ,, 0.009255462182712732917728637, ,, 0.008768700134139385462952823, ,, 0.008330563433362871256469318, ,]
[0.01387612882307074799874573, ,, 0.01281046524292022692424986, ,, 0.01189670994589177009505572, ,, 0.01110455975820691732662991, ,, 0.010411265261972096497478567, ,, 0.009799416126158803298389475, ,, 0.009255462182712732917728637, ,, 0.008768700134139385462952823, ,, 0.008330563433362871256469318, ,, 0.007934114564314020547248100, ,]
[0.01281046524292022692424986, ,, 0.01189670994589177009505572, ,, 0.01110455975820691732662991, ,, 0.010411265261972096497478567, ,, 0.009799416126158803298389475, ,, 0.009255462182712732917728637, ,, 0.008768700134139385462952823, ,, 0.008330563433362871256469318, ,, 0.007934114564314020547248100, ,, 0.007573675487951840794972024, ,]
[0.01189670994589177009505572, ,, 0.01110455975820691732662991, ,, 0.010411265261972096497478567, ,, 0.009799416126158803298389475, ,, 0.009255462182712732917728637, ,, 0.008768700134139385462952823, ,, 0.008330563433362871256469318, ,, 0.007934114564314020547248100, ,, 0.007573675487951840794972024, ,, 0.007244554301320383179543912, ,]
[0.01110455975820691732662991, ,, 0.010411265261972096497478567, ,, 0.009799416126158803298389475, ,, 0.009255462182712732917728637, ,, 0.008768700134139385462952823, ,, 0.008330563433362871256469318, ,, 0.007934114564314020547248100, ,, 0.007573675487951840794972024, ,, 0.007244554301320383179543912, ,, 0.006942840107209529865664152, ,]
[0.010411265261972096497478567, ,, 0.009799416126158803298389475, ,, 0.009255462182712732917728637, ,, 0.008768700134139385462952823, ,, 0.008330563433362871256469318, ,, 0.007934114564314020547248100, ,, 0.007573675487951840794972024, ,, 0.007244554301320383179543912, ,, 0.006942840107209529865664152, ,, 0.006665247032707682442354394, ,]
[0.009799416126158803298389475, ,, 0.009255462182712732917728637, ,, 0.008768700134139385462952823, ,, 0.008330563433362871256469318, ,, 0.007934114564314020547248100, ,, 0.007573675487951840794972024, ,, 0.007244554301320383179543912, ,, 0.006942840107209529865664152, ,, 0.006665247032707682442354394, ,, 0.006408994188004207068439631, ,]
[0.009255462182712732917728637, ,, 0.008768700134139385462952823, ,, 0.008330563433362871256469318, ,, 0.007934114564314020547248100, ,, 0.007573675487951840794972024, ,, 0.007244554301320383179543912, ,, 0.006942840107209529865664152, ,, 0.006665247032707682442354394, ,, 0.006408994188004207068439631, ,, 0.006171712263039457647532867, ,]
[0.008768700134139385462952823, ,, 0.008330563433362871256469318, ,, 0.007934114564314020547248100, ,, 0.007573675487951840794972024, ,, 0.007244554301320383179543912, ,, 0.006942840107209529865664152, ,, 0.006665247032707682442354394, ,, 0.006408994188004207068439631, ,, 0.006171712263039457647532867, ,, 0.005951370112758847735624416, ,]
[0.008330563433362871256469318, ,, 0.007934114564314020547248100, ,, 0.007573675487951840794972024, ,, 0.007244554301320383179543912, ,, 0.006942840107209529865664152, ,, 0.006665247032707682442354394, ,, 0.006408994188004207068439631, ,, 0.006171712263039457647532867, ,, 0.005951370112758847735624416, ,, 0.005746216513010115682023589, ,]
[), {, super, (, ), ;, }, static, double, getStirlingError, (, double, z, ), {, double, ret, ;, if, (]
[), {, super, (, ), ;, }, static, double, getStirlingError, (, double, z, ), {, double, ret, ;, if, (]
[super, (, ), ;, }, static, double, getStirlingError, (, double, z, ), {, double, ret, ;, if, (, z, <]
[double, getStirlingError, (, double, z, ), {, double, ret, ;, if, (, z, <, 15.0, ), {, double, z2, =]
[double, getStirlingError, (, double, z, ), {, double, ret, ;, if, (, z, <, 15.0, ), {, double, z2, =]
[(, double, z, ), {, double, ret, ;, if, (, z, <, 15.0, ), {, double, z2, =, 2.0, *]
[{, double, ret, ;, if, (, z, <, 15.0, ), {, double, z2, =, 2.0, *, z, ;, if, (]
[{, double, ret, ;, if, (, z, <, 15.0, ), {, double, z2, =, 2.0, *, z, ;, if, (]
[{, double, ret, ;, if, (, z, <, 15.0, ), {, double, z2, =, 2.0, *, z, ;, if, (]
[if, (, z, <, 15.0, ), {, double, z2, =, 2.0, *, z, ;, if, (, FastMath, ., floor, (]
[<, 15.0, ), {, double, z2, =, 2.0, *, z, ;, if, (, FastMath, ., floor, (, z2, ), ==]
[{, double, z2, =, 2.0, *, z, ;, if, (, FastMath, ., floor, (, z2, ), ==, z2, ), {]
[z2, =, 2.0, *, z, ;, if, (, FastMath, ., floor, (, z2, ), ==, z2, ), {, ret, =]
[z2, =, 2.0, *, z, ;, if, (, FastMath, ., floor, (, z2, ), ==, z2, ), {, ret, =]
[2.0, *, z, ;, if, (, FastMath, ., floor, (, z2, ), ==, z2, ), {, ret, =, EXACT_STIRLING_ERRORS, []
[;, if, (, FastMath, ., floor, (, z2, ), ==, z2, ), {, ret, =, EXACT_STIRLING_ERRORS, [, (, int, )]
[(, z2, ), ==, z2, ), {, ret, =, EXACT_STIRLING_ERRORS, [, (, int, ), z2, ], ;, }, else, {]
[), ==, z2, ), {, ret, =, EXACT_STIRLING_ERRORS, [, (, int, ), z2, ], ;, }, else, {, ret, =]
[), ==, z2, ), {, ret, =, EXACT_STIRLING_ERRORS, [, (, int, ), z2, ], ;, }, else, {, ret, =]
[), ==, z2, ), {, ret, =, EXACT_STIRLING_ERRORS, [, (, int, ), z2, ], ;, }, else, {, ret, =]
[), ==, z2, ), {, ret, =, EXACT_STIRLING_ERRORS, [, (, int, ), z2, ], ;, }, else, {, ret, =]
[), ==, z2, ), {, ret, =, EXACT_STIRLING_ERRORS, [, (, int, ), z2, ], ;, }, else, {, ret, =]
[{, ret, =, EXACT_STIRLING_ERRORS, [, (, int, ), z2, ], ;, }, else, {, ret, =, Gamma, ., logGamma, (]
[{, ret, =, EXACT_STIRLING_ERRORS, [, (, int, ), z2, ], ;, }, else, {, ret, =, Gamma, ., logGamma, (]
[=, EXACT_STIRLING_ERRORS, [, (, int, ), z2, ], ;, }, else, {, ret, =, Gamma, ., logGamma, (, z, +]
[(, int, ), z2, ], ;, }, else, {, ret, =, Gamma, ., logGamma, (, z, +, 1.0, ), -]
[(, int, ), z2, ], ;, }, else, {, ret, =, Gamma, ., logGamma, (, z, +, 1.0, ), -]
[int, ), z2, ], ;, }, else, {, ret, =, Gamma, ., logGamma, (, z, +, 1.0, ), -, (]
[int, ), z2, ], ;, }, else, {, ret, =, Gamma, ., logGamma, (, z, +, 1.0, ), -, (]
[z2, ], ;, }, else, {, ret, =, Gamma, ., logGamma, (, z, +, 1.0, ), -, (, z, +]
[}, else, {, ret, =, Gamma, ., logGamma, (, z, +, 1.0, ), -, (, z, +, 0.5, ), *]
[}, else, {, ret, =, Gamma, ., logGamma, (, z, +, 1.0, ), -, (, z, +, 0.5, ), *]
[=, Gamma, ., logGamma, (, z, +, 1.0, ), -, (, z, +, 0.5, ), *, FastMath, ., log, (]
[logGamma, (, z, +, 1.0, ), -, (, z, +, 0.5, ), *, FastMath, ., log, (, z, ), +]
[z, +, 1.0, ), -, (, z, +, 0.5, ), *, FastMath, ., log, (, z, ), +, z, -]
[), *, FastMath, ., log, (, z, ), +, z, -, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =]
[), *, FastMath, ., log, (, z, ), +, z, -, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =]
[FastMath, ., log, (, z, ), +, z, -, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =, z, *]
[log, (, z, ), +, z, -, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =, z, *, z, ;]
[z, ), +, z, -, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =, z, *, z, ;, ret, =]
[z, ), +, z, -, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =, z, *, z, ;, ret, =]
[), +, z, -, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =, z, *, z, ;, ret, =, (]
[), +, z, -, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =, z, *, z, ;, ret, =, (]
[z, -, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =, z, *, z, ;, ret, =, (, 0.083333333333333333333, -]
[z, -, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =, z, *, z, ;, ret, =, (, 0.083333333333333333333, -]
[-, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =, z, *, z, ;, ret, =, (, 0.083333333333333333333, -, (]
[-, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =, z, *, z, ;, ret, =, (, 0.083333333333333333333, -, (]
[;, }, }, else, {, double, z2, =, z, *, z, ;, ret, =, (, 0.083333333333333333333, -, (, 0.00277777777777777777778, -]
[;, }, }, else, {, double, z2, =, z, *, z, ;, ret, =, (, 0.083333333333333333333, -, (, 0.00277777777777777777778, -]
[}, }, else, {, double, z2, =, z, *, z, ;, ret, =, (, 0.083333333333333333333, -, (, 0.00277777777777777777778, -, (]
[}, }, else, {, double, z2, =, z, *, z, ;, ret, =, (, 0.083333333333333333333, -, (, 0.00277777777777777777778, -, (]
[else, {, double, z2, =, z, *, z, ;, ret, =, (, 0.083333333333333333333, -, (, 0.00277777777777777777778, -, (, 0.00079365079365079365079365, -]
[else, {, double, z2, =, z, *, z, ;, ret, =, (, 0.083333333333333333333, -, (, 0.00277777777777777777778, -, (, 0.00079365079365079365079365, -]
[{, double, z2, =, z, *, z, ;, ret, =, (, 0.083333333333333333333, -, (, 0.00277777777777777777778, -, (, 0.00079365079365079365079365, -, (]
[{, double, z2, =, z, *, z, ;, ret, =, (, 0.083333333333333333333, -, (, 0.00277777777777777777778, -, (, 0.00079365079365079365079365, -, (]
[z2, =, z, *, z, ;, ret, =, (, 0.083333333333333333333, -, (, 0.00277777777777777777778, -, (, 0.00079365079365079365079365, -, (, 0.000595238095238095238095238, -]
[z2, =, z, *, z, ;, ret, =, (, 0.083333333333333333333, -, (, 0.00277777777777777777778, -, (, 0.00079365079365079365079365, -, (, 0.000595238095238095238095238, -]
[z, *, z, ;, ret, =, (, 0.083333333333333333333, -, (, 0.00277777777777777777778, -, (, 0.00079365079365079365079365, -, (, 0.000595238095238095238095238, -, 0.0008417508417508417508417508, /]
[;, ret, =, (, 0.083333333333333333333, -, (, 0.00277777777777777777778, -, (, 0.00079365079365079365079365, -, (, 0.000595238095238095238095238, -, 0.0008417508417508417508417508, /, z2, ), /]
[(, 0.083333333333333333333, -, (, 0.00277777777777777777778, -, (, 0.00079365079365079365079365, -, (, 0.000595238095238095238095238, -, 0.0008417508417508417508417508, /, z2, ), /, z2, ), /]
[(, 0.00277777777777777777778, -, (, 0.00079365079365079365079365, -, (, 0.000595238095238095238095238, -, 0.0008417508417508417508417508, /, z2, ), /, z2, ), /, z2, ), /]
[(, 0.00079365079365079365079365, -, (, 0.000595238095238095238095238, -, 0.0008417508417508417508417508, /, z2, ), /, z2, ), /, z2, ), /, z2, ), /]
[0.000595238095238095238095238, -, 0.0008417508417508417508417508, /, z2, ), /, z2, ), /, z2, ), /, z2, ), /, z, ;, }, return]
[return, ret, ;, }, static, double, getDeviancePart, (, double, x, ,, double, mu, ), {, double, ret, ;, if, (]
[return, ret, ;, }, static, double, getDeviancePart, (, double, x, ,, double, mu, ), {, double, ret, ;, if, (]
[return, ret, ;, }, static, double, getDeviancePart, (, double, x, ,, double, mu, ), {, double, ret, ;, if, (]
[static, double, getDeviancePart, (, double, x, ,, double, mu, ), {, double, ret, ;, if, (, FastMath, ., abs, (]
[static, double, getDeviancePart, (, double, x, ,, double, mu, ), {, double, ret, ;, if, (, FastMath, ., abs, (]
[getDeviancePart, (, double, x, ,, double, mu, ), {, double, ret, ;, if, (, FastMath, ., abs, (, x, -]
[x, ,, double, mu, ), {, double, ret, ;, if, (, FastMath, ., abs, (, x, -, mu, ), <]
[x, ,, double, mu, ), {, double, ret, ;, if, (, FastMath, ., abs, (, x, -, mu, ), <]
[double, mu, ), {, double, ret, ;, if, (, FastMath, ., abs, (, x, -, mu, ), <, 0.1, *]
[mu, ), {, double, ret, ;, if, (, FastMath, ., abs, (, x, -, mu, ), <, 0.1, *, (]
[mu, ), {, double, ret, ;, if, (, FastMath, ., abs, (, x, -, mu, ), <, 0.1, *, (]
[{, double, ret, ;, if, (, FastMath, ., abs, (, x, -, mu, ), <, 0.1, *, (, x, +]
[., abs, (, x, -, mu, ), <, 0.1, *, (, x, +, mu, ), ), {, double, d, =]
[., abs, (, x, -, mu, ), <, 0.1, *, (, x, +, mu, ), ), {, double, d, =]
[(, x, -, mu, ), <, 0.1, *, (, x, +, mu, ), ), {, double, d, =, x, -]
[<, 0.1, *, (, x, +, mu, ), ), {, double, d, =, x, -, mu, ;, double, v, =]
[<, 0.1, *, (, x, +, mu, ), ), {, double, d, =, x, -, mu, ;, double, v, =]
[*, (, x, +, mu, ), ), {, double, d, =, x, -, mu, ;, double, v, =, d, /]
[(, x, +, mu, ), ), {, double, d, =, x, -, mu, ;, double, v, =, d, /, (]
[(, x, +, mu, ), ), {, double, d, =, x, -, mu, ;, double, v, =, d, /, (]
[+, mu, ), ), {, double, d, =, x, -, mu, ;, double, v, =, d, /, (, x, +]
[d, =, x, -, mu, ;, double, v, =, d, /, (, x, +, mu, ), ;, double, s1, =]
[d, =, x, -, mu, ;, double, v, =, d, /, (, x, +, mu, ), ;, double, s1, =]
[x, -, mu, ;, double, v, =, d, /, (, x, +, mu, ), ;, double, s1, =, v, *]
[v, =, d, /, (, x, +, mu, ), ;, double, s1, =, v, *, d, ;, double, s, =]
[v, =, d, /, (, x, +, mu, ), ;, double, s1, =, v, *, d, ;, double, s, =]
[mu, ), ;, double, s1, =, v, *, d, ;, double, s, =, Double, ., NaN, ;, double, ej, =]
[mu, ), ;, double, s1, =, v, *, d, ;, double, s, =, Double, ., NaN, ;, double, ej, =]
[mu, ), ;, double, s1, =, v, *, d, ;, double, s, =, Double, ., NaN, ;, double, ej, =]
[;, double, s1, =, v, *, d, ;, double, s, =, Double, ., NaN, ;, double, ej, =, 2.0, *]
[s1, =, v, *, d, ;, double, s, =, Double, ., NaN, ;, double, ej, =, 2.0, *, x, *]
[v, *, d, ;, double, s, =, Double, ., NaN, ;, double, ej, =, 2.0, *, x, *, v, ;]
[d, ;, double, s, =, Double, ., NaN, ;, double, ej, =, 2.0, *, x, *, v, ;, v, =]
[d, ;, double, s, =, Double, ., NaN, ;, double, ej, =, 2.0, *, x, *, v, ;, v, =]
[double, s, =, Double, ., NaN, ;, double, ej, =, 2.0, *, x, *, v, ;, v, =, v, *]
[NaN, ;, double, ej, =, 2.0, *, x, *, v, ;, v, =, v, *, v, ;, int, j, =]
[=, 2.0, *, x, *, v, ;, v, =, v, *, v, ;, int, j, =, 1, ;, while, (]
[=, 2.0, *, x, *, v, ;, v, =, v, *, v, ;, int, j, =, 1, ;, while, (]
[*, x, *, v, ;, v, =, v, *, v, ;, int, j, =, 1, ;, while, (, s1, !=]
[v, ;, v, =, v, *, v, ;, int, j, =, 1, ;, while, (, s1, !=, s, ), {]
[v, =, v, *, v, ;, int, j, =, 1, ;, while, (, s1, !=, s, ), {, s, =]
[v, *, v, ;, int, j, =, 1, ;, while, (, s1, !=, s, ), {, s, =, s1, ;]
[v, ;, int, j, =, 1, ;, while, (, s1, !=, s, ), {, s, =, s1, ;, ej, *=]
[int, j, =, 1, ;, while, (, s1, !=, s, ), {, s, =, s1, ;, ej, *=, v, ;]
[=, 1, ;, while, (, s1, !=, s, ), {, s, =, s1, ;, ej, *=, v, ;, s1, =]
[=, 1, ;, while, (, s1, !=, s, ), {, s, =, s1, ;, ej, *=, v, ;, s1, =]
[;, while, (, s1, !=, s, ), {, s, =, s1, ;, ej, *=, v, ;, s1, =, s, +]
[;, while, (, s1, !=, s, ), {, s, =, s1, ;, ej, *=, v, ;, s1, =, s, +]
[(, s1, !=, s, ), {, s, =, s1, ;, ej, *=, v, ;, s1, =, s, +, ej, /]
[s1, !=, s, ), {, s, =, s1, ;, ej, *=, v, ;, s1, =, s, +, ej, /, (]
[s1, !=, s, ), {, s, =, s1, ;, ej, *=, v, ;, s1, =, s, +, ej, /, (]
[!=, s, ), {, s, =, s1, ;, ej, *=, v, ;, s1, =, s, +, ej, /, (, (]
[!=, s, ), {, s, =, s1, ;, ej, *=, v, ;, s1, =, s, +, ej, /, (, (]
[), {, s, =, s1, ;, ej, *=, v, ;, s1, =, s, +, ej, /, (, (, j, *]
[=, s1, ;, ej, *=, v, ;, s1, =, s, +, ej, /, (, (, j, *, 2, ), +]
[ej, *=, v, ;, s1, =, s, +, ej, /, (, (, j, *, 2, ), +, 1, ), ;]
[*=, v, ;, s1, =, s, +, ej, /, (, (, j, *, 2, ), +, 1, ), ;, ++]
[s1, =, s, +, ej, /, (, (, j, *, 2, ), +, 1, ), ;, ++, j, ;, }]
[s, +, ej, /, (, (, j, *, 2, ), +, 1, ), ;, ++, j, ;, }, ret, =]
[(, j, *, 2, ), +, 1, ), ;, ++, j, ;, }, ret, =, s1, ;, }, else, {]
[*, 2, ), +, 1, ), ;, ++, j, ;, }, ret, =, s1, ;, }, else, {, ret, =]
[*, 2, ), +, 1, ), ;, ++, j, ;, }, ret, =, s1, ;, }, else, {, ret, =]
[*, 2, ), +, 1, ), ;, ++, j, ;, }, ret, =, s1, ;, }, else, {, ret, =]
[*, 2, ), +, 1, ), ;, ++, j, ;, }, ret, =, s1, ;, }, else, {, ret, =]
[), +, 1, ), ;, ++, j, ;, }, ret, =, s1, ;, }, else, {, ret, =, x, *]
[), +, 1, ), ;, ++, j, ;, }, ret, =, s1, ;, }, else, {, ret, =, x, *]
[;, ++, j, ;, }, ret, =, s1, ;, }, else, {, ret, =, x, *, FastMath, ., log, (]
[;, ++, j, ;, }, ret, =, s1, ;, }, else, {, ret, =, x, *, FastMath, ., log, (]
[j, ;, }, ret, =, s1, ;, }, else, {, ret, =, x, *, FastMath, ., log, (, x, /]
[ret, =, s1, ;, }, else, {, ret, =, x, *, FastMath, ., log, (, x, /, mu, ), +]
[s1, ;, }, else, {, ret, =, x, *, FastMath, ., log, (, x, /, mu, ), +, mu, -]
[{, ret, =, x, *, FastMath, ., log, (, x, /, mu, ), +, mu, -, x, ;, }, return]
[logBinomialProbability, (, int, x, ,, int, n, ,, double, p, ,, double, q, ), {, double, ret, ;, if, (]
[logBinomialProbability, (, int, x, ,, int, n, ,, double, p, ,, double, q, ), {, double, ret, ;, if, (]
[int, x, ,, int, n, ,, double, p, ,, double, q, ), {, double, ret, ;, if, (, x, ==]
[,, double, p, ,, double, q, ), {, double, ret, ;, if, (, x, ==, 0, ), {, if, (]
[,, double, p, ,, double, q, ), {, double, ret, ;, if, (, x, ==, 0, ), {, if, (]
[p, ,, double, q, ), {, double, ret, ;, if, (, x, ==, 0, ), {, if, (, p, <]
[q, ), {, double, ret, ;, if, (, x, ==, 0, ), {, if, (, p, <, 0.1, ), {]
[{, double, ret, ;, if, (, x, ==, 0, ), {, if, (, p, <, 0.1, ), {, ret, =]
[{, double, ret, ;, if, (, x, ==, 0, ), {, if, (, p, <, 0.1, ), {, ret, =]
[double, ret, ;, if, (, x, ==, 0, ), {, if, (, p, <, 0.1, ), {, ret, =, -]
[;, if, (, x, ==, 0, ), {, if, (, p, <, 0.1, ), {, ret, =, -, getDeviancePart, (]
[(, x, ==, 0, ), {, if, (, p, <, 0.1, ), {, ret, =, -, getDeviancePart, (, n, ,]
[(, x, ==, 0, ), {, if, (, p, <, 0.1, ), {, ret, =, -, getDeviancePart, (, n, ,]
[==, 0, ), {, if, (, p, <, 0.1, ), {, ret, =, -, getDeviancePart, (, n, ,, n, *]
[{, if, (, p, <, 0.1, ), {, ret, =, -, getDeviancePart, (, n, ,, n, *, q, ), -]
[{, if, (, p, <, 0.1, ), {, ret, =, -, getDeviancePart, (, n, ,, n, *, q, ), -]
[(, p, <, 0.1, ), {, ret, =, -, getDeviancePart, (, n, ,, n, *, q, ), -, n, *]
[{, ret, =, -, getDeviancePart, (, n, ,, n, *, q, ), -, n, *, p, ;, }, else, {]
[=, -, getDeviancePart, (, n, ,, n, *, q, ), -, n, *, p, ;, }, else, {, ret, =]
[=, -, getDeviancePart, (, n, ,, n, *, q, ), -, n, *, p, ;, }, else, {, ret, =]
[getDeviancePart, (, n, ,, n, *, q, ), -, n, *, p, ;, }, else, {, ret, =, n, *]
[getDeviancePart, (, n, ,, n, *, q, ), -, n, *, p, ;, }, else, {, ret, =, n, *]
[n, *, q, ), -, n, *, p, ;, }, else, {, ret, =, n, *, FastMath, ., log, (]
[;, }, else, {, ret, =, n, *, FastMath, ., log, (, q, ), ;, }, }, else, if, (]
[;, }, else, {, ret, =, n, *, FastMath, ., log, (, q, ), ;, }, }, else, if, (]
[else, {, ret, =, n, *, FastMath, ., log, (, q, ), ;, }, }, else, if, (, x, ==]
[*, FastMath, ., log, (, q, ), ;, }, }, else, if, (, x, ==, n, ), {, if, (]
[*, FastMath, ., log, (, q, ), ;, }, }, else, if, (, x, ==, n, ), {, if, (]
[., log, (, q, ), ;, }, }, else, if, (, x, ==, n, ), {, if, (, q, <]
[q, ), ;, }, }, else, if, (, x, ==, n, ), {, if, (, q, <, 0.1, ), {]
[;, }, }, else, if, (, x, ==, n, ), {, if, (, q, <, 0.1, ), {, ret, =]
[;, }, }, else, if, (, x, ==, n, ), {, if, (, q, <, 0.1, ), {, ret, =]
[}, }, else, if, (, x, ==, n, ), {, if, (, q, <, 0.1, ), {, ret, =, -]
[else, if, (, x, ==, n, ), {, if, (, q, <, 0.1, ), {, ret, =, -, getDeviancePart, (]
[(, x, ==, n, ), {, if, (, q, <, 0.1, ), {, ret, =, -, getDeviancePart, (, n, ,]
[(, x, ==, n, ), {, if, (, q, <, 0.1, ), {, ret, =, -, getDeviancePart, (, n, ,]
[==, n, ), {, if, (, q, <, 0.1, ), {, ret, =, -, getDeviancePart, (, n, ,, n, *]
[{, if, (, q, <, 0.1, ), {, ret, =, -, getDeviancePart, (, n, ,, n, *, p, ), -]
[{, if, (, q, <, 0.1, ), {, ret, =, -, getDeviancePart, (, n, ,, n, *, p, ), -]
[(, q, <, 0.1, ), {, ret, =, -, getDeviancePart, (, n, ,, n, *, p, ), -, n, *]
[{, ret, =, -, getDeviancePart, (, n, ,, n, *, p, ), -, n, *, q, ;, }, else, {]
[=, -, getDeviancePart, (, n, ,, n, *, p, ), -, n, *, q, ;, }, else, {, ret, =]
[=, -, getDeviancePart, (, n, ,, n, *, p, ), -, n, *, q, ;, }, else, {, ret, =]
[getDeviancePart, (, n, ,, n, *, p, ), -, n, *, q, ;, }, else, {, ret, =, n, *]
[getDeviancePart, (, n, ,, n, *, p, ), -, n, *, q, ;, }, else, {, ret, =, n, *]
[n, *, p, ), -, n, *, q, ;, }, else, {, ret, =, n, *, FastMath, ., log, (]
[q, ;, }, else, {, ret, =, n, *, FastMath, ., log, (, p, ), ;, }, }, else, {]
[}, else, {, ret, =, n, *, FastMath, ., log, (, p, ), ;, }, }, else, {, ret, =]
[}, else, {, ret, =, n, *, FastMath, ., log, (, p, ), ;, }, }, else, {, ret, =]
[}, else, {, ret, =, n, *, FastMath, ., log, (, p, ), ;, }, }, else, {, ret, =]
[}, else, {, ret, =, n, *, FastMath, ., log, (, p, ), ;, }, }, else, {, ret, =]
[}, else, {, ret, =, n, *, FastMath, ., log, (, p, ), ;, }, }, else, {, ret, =]
[{, ret, =, n, *, FastMath, ., log, (, p, ), ;, }, }, else, {, ret, =, getStirlingError, (]
[n, *, FastMath, ., log, (, p, ), ;, }, }, else, {, ret, =, getStirlingError, (, n, ), -]
[FastMath, ., log, (, p, ), ;, }, }, else, {, ret, =, getStirlingError, (, n, ), -, getStirlingError, (]
[(, p, ), ;, }, }, else, {, ret, =, getStirlingError, (, n, ), -, getStirlingError, (, x, ), -]
[), ;, }, }, else, {, ret, =, getStirlingError, (, n, ), -, getStirlingError, (, x, ), -, getStirlingError, (]
[), ;, }, }, else, {, ret, =, getStirlingError, (, n, ), -, getStirlingError, (, x, ), -, getStirlingError, (]
[}, }, else, {, ret, =, getStirlingError, (, n, ), -, getStirlingError, (, x, ), -, getStirlingError, (, n, -]
[{, ret, =, getStirlingError, (, n, ), -, getStirlingError, (, x, ), -, getStirlingError, (, n, -, x, ), -]
[=, getStirlingError, (, n, ), -, getStirlingError, (, x, ), -, getStirlingError, (, n, -, x, ), -, getDeviancePart, (]
[(, n, ), -, getStirlingError, (, x, ), -, getStirlingError, (, n, -, x, ), -, getDeviancePart, (, x, ,]
[(, n, ), -, getStirlingError, (, x, ), -, getStirlingError, (, n, -, x, ), -, getDeviancePart, (, x, ,]
[), -, getStirlingError, (, x, ), -, getStirlingError, (, n, -, x, ), -, getDeviancePart, (, x, ,, n, *]
[(, x, ), -, getStirlingError, (, n, -, x, ), -, getDeviancePart, (, x, ,, n, *, p, ), -]
[), -, getStirlingError, (, n, -, x, ), -, getDeviancePart, (, x, ,, n, *, p, ), -, getDeviancePart, (]
[), -, getStirlingError, (, n, -, x, ), -, getDeviancePart, (, x, ,, n, *, p, ), -, getDeviancePart, (]
[getStirlingError, (, n, -, x, ), -, getDeviancePart, (, x, ,, n, *, p, ), -, getDeviancePart, (, n, -]
[n, -, x, ), -, getDeviancePart, (, x, ,, n, *, p, ), -, getDeviancePart, (, n, -, x, ,]
[n, -, x, ), -, getDeviancePart, (, x, ,, n, *, p, ), -, getDeviancePart, (, n, -, x, ,]
[x, ), -, getDeviancePart, (, x, ,, n, *, p, ), -, getDeviancePart, (, n, -, x, ,, n, *]
[,, n, *, p, ), -, getDeviancePart, (, n, -, x, ,, n, *, q, ), ;, double, f, =]
[,, n, *, p, ), -, getDeviancePart, (, n, -, x, ,, n, *, q, ), ;, double, f, =]
[n, *, p, ), -, getDeviancePart, (, n, -, x, ,, n, *, q, ), ;, double, f, =, (]
[n, *, p, ), -, getDeviancePart, (, n, -, x, ,, n, *, q, ), ;, double, f, =, (]
[n, *, p, ), -, getDeviancePart, (, n, -, x, ,, n, *, q, ), ;, double, f, =, (]
[n, *, p, ), -, getDeviancePart, (, n, -, x, ,, n, *, q, ), ;, double, f, =, (]
[-, getDeviancePart, (, n, -, x, ,, n, *, q, ), ;, double, f, =, (, MathUtils, ., TWO_PI, *]
[(, n, -, x, ,, n, *, q, ), ;, double, f, =, (, MathUtils, ., TWO_PI, *, x, *]
[n, -, x, ,, n, *, q, ), ;, double, f, =, (, MathUtils, ., TWO_PI, *, x, *, (]
[n, -, x, ,, n, *, q, ), ;, double, f, =, (, MathUtils, ., TWO_PI, *, x, *, (]
[x, ,, n, *, q, ), ;, double, f, =, (, MathUtils, ., TWO_PI, *, x, *, (, n, -]
[q, ), ;, double, f, =, (, MathUtils, ., TWO_PI, *, x, *, (, n, -, x, ), ), /]
[;, double, f, =, (, MathUtils, ., TWO_PI, *, x, *, (, n, -, x, ), ), /, n, ;]
[f, =, (, MathUtils, ., TWO_PI, *, x, *, (, n, -, x, ), ), /, n, ;, ret, =]
[f, =, (, MathUtils, ., TWO_PI, *, x, *, (, n, -, x, ), ), /, n, ;, ret, =]
[f, =, (, MathUtils, ., TWO_PI, *, x, *, (, n, -, x, ), ), /, n, ;, ret, =]
[=, (, MathUtils, ., TWO_PI, *, x, *, (, n, -, x, ), ), /, n, ;, ret, =, -]
[MathUtils, ., TWO_PI, *, x, *, (, n, -, x, ), ), /, n, ;, ret, =, -, 0.5, *]
[MathUtils, ., TWO_PI, *, x, *, (, n, -, x, ), ), /, n, ;, ret, =, -, 0.5, *]
[x, *, (, n, -, x, ), ), /, n, ;, ret, =, -, 0.5, *, FastMath, ., log, (]
[n, -, x, ), ), /, n, ;, ret, =, -, 0.5, *, FastMath, ., log, (, f, ), +]
[), /, n, ;, ret, =, -, 0.5, *, FastMath, ., log, (, f, ), +, ret, ;, }, return]
