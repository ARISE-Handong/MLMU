[import, java, ., util, ., Comparator, ;, public, abstract, class, JSType, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[;, public, abstract, class, JSType, implements, Serializable, {, private, static, final, long, serialVersionUID, =, 1L, ;, private, boolean, resolved, =]
[Serializable, {, private, static, final, long, serialVersionUID, =, 1L, ;, private, boolean, resolved, =, false, ;, private, JSType, resolveResult, =]
[private, final, ImmutableList, <, String, >, templateKeys, ;, private, final, ImmutableList, <, JSType, >, templatizedTypes, ;, private, boolean, inTemplatedCheckVisit, =]
[private, final, ImmutableList, <, JSType, >, templatizedTypes, ;, private, boolean, inTemplatedCheckVisit, =, false, ;, private, static, final, CanCastToVisitor, CAN_CAST_TO_VISITOR, =]
[=, false, ;, private, static, final, CanCastToVisitor, CAN_CAST_TO_VISITOR, =, new, CanCastToVisitor, (, ), ;, public, static, final, String, UNKNOWN_NAME, =]
[=, new, CanCastToVisitor, (, ), ;, public, static, final, String, UNKNOWN_NAME, =, "Unknown class name", ;, public, static, final, String, NOT_A_CLASS, =]
[final, String, UNKNOWN_NAME, =, "Unknown class name", ;, public, static, final, String, NOT_A_CLASS, =, "Not declared as a constructor", ;, public, static, final, String, NOT_A_TYPE, =]
[final, String, NOT_A_CLASS, =, "Not declared as a constructor", ;, public, static, final, String, NOT_A_TYPE, =, "Not declared as a type name", ;, public, static, final, String, EMPTY_TYPE_COMPONENT, =]
[NOT_A_TYPE, =, "Not declared as a type name", ;, public, static, final, String, EMPTY_TYPE_COMPONENT, =, "Named type with empty name component", ;, static, final, Comparator, <, JSType, >, ALPHA, =]
[<, JSType, >, (, ), {, @, Override, public, int, compare, (, JSType, t1, ,, JSType, t2, ), {, return]
[<, JSType, >, (, ), {, @, Override, public, int, compare, (, JSType, t1, ,, JSType, t2, ), {, return]
[<, JSType, >, (, ), {, @, Override, public, int, compare, (, JSType, t1, ,, JSType, t2, ), {, return]
[public, int, compare, (, JSType, t1, ,, JSType, t2, ), {, return, t1, ., toString, (, ), ., compareTo, (]
[public, int, compare, (, JSType, t1, ,, JSType, t2, ), {, return, t1, ., toString, (, ), ., compareTo, (]
[), ., compareTo, (, t2, ., toString, (, ), ), ;, }, }, ;, public, static, final, int, ENUMDECL, =]
[), ), ;, }, }, ;, public, static, final, int, ENUMDECL, =, 1, ;, public, static, final, int, NOT_ENUMDECL, =]
[public, static, final, int, NOT_ENUMDECL, =, 0, ;, final, JSTypeRegistry, registry, ;, JSType, (, JSTypeRegistry, registry, ), {, this, (]
[final, int, NOT_ENUMDECL, =, 0, ;, final, JSTypeRegistry, registry, ;, JSType, (, JSTypeRegistry, registry, ), {, this, (, registry, ,]
[NOT_ENUMDECL, =, 0, ;, final, JSTypeRegistry, registry, ;, JSType, (, JSTypeRegistry, registry, ), {, this, (, registry, ,, null, ,]
[;, }, JSType, (, JSTypeRegistry, registry, ,, ImmutableList, <, String, >, templateKeys, ,, ImmutableList, <, JSType, >, templatizedTypes, ), {]
[;, }, JSType, (, JSTypeRegistry, registry, ,, ImmutableList, <, String, >, templateKeys, ,, ImmutableList, <, JSType, >, templatizedTypes, ), {]
[JSTypeRegistry, registry, ,, ImmutableList, <, String, >, templateKeys, ,, ImmutableList, <, JSType, >, templatizedTypes, ), {, this, ., registry, =]
[String, >, templateKeys, ,, ImmutableList, <, JSType, >, templatizedTypes, ), {, this, ., registry, =, registry, ;, int, keysLength, =]
[String, >, templateKeys, ,, ImmutableList, <, JSType, >, templatizedTypes, ), {, this, ., registry, =, registry, ;, int, keysLength, =]
[String, >, templateKeys, ,, ImmutableList, <, JSType, >, templatizedTypes, ), {, this, ., registry, =, registry, ;, int, keysLength, =]
[templateKeys, ,, ImmutableList, <, JSType, >, templatizedTypes, ), {, this, ., registry, =, registry, ;, int, keysLength, =, templateKeys, ==]
[ImmutableList, <, JSType, >, templatizedTypes, ), {, this, ., registry, =, registry, ;, int, keysLength, =, templateKeys, ==, null, ?]
[JSType, >, templatizedTypes, ), {, this, ., registry, =, registry, ;, int, keysLength, =, templateKeys, ==, null, ?, 0, :]
[JSType, >, templatizedTypes, ), {, this, ., registry, =, registry, ;, int, keysLength, =, templateKeys, ==, null, ?, 0, :]
[registry, ;, int, keysLength, =, templateKeys, ==, null, ?, 0, :, templateKeys, ., size, (, ), ;, int, typesLength, =]
[registry, ;, int, keysLength, =, templateKeys, ==, null, ?, 0, :, templateKeys, ., size, (, ), ;, int, typesLength, =]
[registry, ;, int, keysLength, =, templateKeys, ==, null, ?, 0, :, templateKeys, ., size, (, ), ;, int, typesLength, =]
[int, keysLength, =, templateKeys, ==, null, ?, 0, :, templateKeys, ., size, (, ), ;, int, typesLength, =, templatizedTypes, ==]
[=, templateKeys, ==, null, ?, 0, :, templateKeys, ., size, (, ), ;, int, typesLength, =, templatizedTypes, ==, null, ?]
[==, null, ?, 0, :, templateKeys, ., size, (, ), ;, int, typesLength, =, templatizedTypes, ==, null, ?, 0, :]
[==, null, ?, 0, :, templateKeys, ., size, (, ), ;, int, typesLength, =, templatizedTypes, ==, null, ?, 0, :]
[(, ), ;, int, typesLength, =, templatizedTypes, ==, null, ?, 0, :, templatizedTypes, ., size, (, ), ;, if, (]
[(, ), ;, int, typesLength, =, templatizedTypes, ==, null, ?, 0, :, templatizedTypes, ., size, (, ), ;, if, (]
[;, int, typesLength, =, templatizedTypes, ==, null, ?, 0, :, templatizedTypes, ., size, (, ), ;, if, (, typesLength, >]
[templatizedTypes, ==, null, ?, 0, :, templatizedTypes, ., size, (, ), ;, if, (, typesLength, >, keysLength, ), {, throw]
[?, 0, :, templatizedTypes, ., size, (, ), ;, if, (, typesLength, >, keysLength, ), {, throw, new, IllegalArgumentException, (]
[), ;, if, (, typesLength, >, keysLength, ), {, throw, new, IllegalArgumentException, (, "Cannot have more templatized types than template keys", ), ;, }, else, if, (]
[), ;, if, (, typesLength, >, keysLength, ), {, throw, new, IllegalArgumentException, (, "Cannot have more templatized types than template keys", ), ;, }, else, if, (]
[if, (, typesLength, >, keysLength, ), {, throw, new, IllegalArgumentException, (, "Cannot have more templatized types than template keys", ), ;, }, else, if, (, typesLength, <]
["Cannot have more templatized types than template keys", ), ;, }, else, if, (, typesLength, <, keysLength, ), {, ImmutableList, ., Builder, <, JSType, >, builder, =]
["Cannot have more templatized types than template keys", ), ;, }, else, if, (, typesLength, <, keysLength, ), {, ImmutableList, ., Builder, <, JSType, >, builder, =]
[<, keysLength, ), {, ImmutableList, ., Builder, <, JSType, >, builder, =, ImmutableList, ., builder, (, ), ;, if, (]
[<, keysLength, ), {, ImmutableList, ., Builder, <, JSType, >, builder, =, ImmutableList, ., builder, (, ), ;, if, (]
[), {, ImmutableList, ., Builder, <, JSType, >, builder, =, ImmutableList, ., builder, (, ), ;, if, (, typesLength, >]
[., Builder, <, JSType, >, builder, =, ImmutableList, ., builder, (, ), ;, if, (, typesLength, >, 0, ), {]
[., Builder, <, JSType, >, builder, =, ImmutableList, ., builder, (, ), ;, if, (, typesLength, >, 0, ), {]
[>, builder, =, ImmutableList, ., builder, (, ), ;, if, (, typesLength, >, 0, ), {, builder, ., addAll, (]
[if, (, typesLength, >, 0, ), {, builder, ., addAll, (, templatizedTypes, ), ;, }, for, (, int, i, =]
[typesLength, >, 0, ), {, builder, ., addAll, (, templatizedTypes, ), ;, }, for, (, int, i, =, 0, ;]
[typesLength, >, 0, ), {, builder, ., addAll, (, templatizedTypes, ), ;, }, for, (, int, i, =, 0, ;]
[0, ), {, builder, ., addAll, (, templatizedTypes, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[0, ), {, builder, ., addAll, (, templatizedTypes, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[{, builder, ., addAll, (, templatizedTypes, ), ;, }, for, (, int, i, =, 0, ;, i, <, keysLength, -]
[., addAll, (, templatizedTypes, ), ;, }, for, (, int, i, =, 0, ;, i, <, keysLength, -, typesLength, ;]
[., addAll, (, templatizedTypes, ), ;, }, for, (, int, i, =, 0, ;, i, <, keysLength, -, typesLength, ;]
[), ;, }, for, (, int, i, =, 0, ;, i, <, keysLength, -, typesLength, ;, i, ++, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, keysLength, -, typesLength, ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, keysLength, -, typesLength, ;, i, ++, ), {, builder, ., add, (]
[(, int, i, =, 0, ;, i, <, keysLength, -, typesLength, ;, i, ++, ), {, builder, ., add, (]
[0, ;, i, <, keysLength, -, typesLength, ;, i, ++, ), {, builder, ., add, (, registry, ., getNativeType, (]
[0, ;, i, <, keysLength, -, typesLength, ;, i, ++, ), {, builder, ., add, (, registry, ., getNativeType, (]
[;, i, ++, ), {, builder, ., add, (, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }]
[++, ), {, builder, ., add, (, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }, templatizedTypes, =]
[++, ), {, builder, ., add, (, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }, templatizedTypes, =]
[(, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }, templatizedTypes, =, builder, ., build, (, ), ;, }, else, if, (]
[(, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }, templatizedTypes, =, builder, ., build, (, ), ;, }, else, if, (]
[(, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }, templatizedTypes, =, builder, ., build, (, ), ;, }, else, if, (]
[., UNKNOWN_TYPE, ), ), ;, }, templatizedTypes, =, builder, ., build, (, ), ;, }, else, if, (, keysLength, ==]
[), ), ;, }, templatizedTypes, =, builder, ., build, (, ), ;, }, else, if, (, keysLength, ==, 0, &&]
[), ), ;, }, templatizedTypes, =, builder, ., build, (, ), ;, }, else, if, (, keysLength, ==, 0, &&]
[;, }, templatizedTypes, =, builder, ., build, (, ), ;, }, else, if, (, keysLength, ==, 0, &&, typesLength, ==]
[=, builder, ., build, (, ), ;, }, else, if, (, keysLength, ==, 0, &&, typesLength, ==, 0, ), {]
[., build, (, ), ;, }, else, if, (, keysLength, ==, 0, &&, typesLength, ==, 0, ), {, templateKeys, =]
[., build, (, ), ;, }, else, if, (, keysLength, ==, 0, &&, typesLength, ==, 0, ), {, templateKeys, =]
[else, if, (, keysLength, ==, 0, &&, typesLength, ==, 0, ), {, templateKeys, =, ImmutableList, ., of, (, ), ;]
[(, keysLength, ==, 0, &&, typesLength, ==, 0, ), {, templateKeys, =, ImmutableList, ., of, (, ), ;, templatizedTypes, =]
[(, keysLength, ==, 0, &&, typesLength, ==, 0, ), {, templateKeys, =, ImmutableList, ., of, (, ), ;, templatizedTypes, =]
[0, ), {, templateKeys, =, ImmutableList, ., of, (, ), ;, templatizedTypes, =, ImmutableList, ., of, (, ), ;, }]
[0, ), {, templateKeys, =, ImmutableList, ., of, (, ), ;, templatizedTypes, =, ImmutableList, ., of, (, ), ;, }]
[=, ImmutableList, ., of, (, ), ;, templatizedTypes, =, ImmutableList, ., of, (, ), ;, }, this, ., templateKeys, =]
[., of, (, ), ;, templatizedTypes, =, ImmutableList, ., of, (, ), ;, }, this, ., templateKeys, =, templateKeys, ;]
[., of, (, ), ;, templatizedTypes, =, ImmutableList, ., of, (, ), ;, }, this, ., templateKeys, =, templateKeys, ;]
[;, templatizedTypes, =, ImmutableList, ., of, (, ), ;, }, this, ., templateKeys, =, templateKeys, ;, this, ., templatizedTypes, =]
[., templateKeys, =, templateKeys, ;, this, ., templatizedTypes, =, templatizedTypes, ;, }, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return]
[., templateKeys, =, templateKeys, ;, this, ., templatizedTypes, =, templatizedTypes, ;, }, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return]
[;, this, ., templatizedTypes, =, templatizedTypes, ;, }, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, registry, ., getNativeType, (]
[JSTypeNative, typeId, ), {, return, registry, ., getNativeType, (, typeId, ), ;, }, public, JSDocInfo, getJSDocInfo, (, ), {, return]
[), ;, }, public, JSDocInfo, getJSDocInfo, (, ), {, return, null, ;, }, public, String, getDisplayName, (, ), {, return]
[}, public, String, getDisplayName, (, ), {, return, null, ;, }, public, boolean, hasDisplayName, (, ), {, String, displayName, =]
[), {, return, null, ;, }, public, boolean, hasDisplayName, (, ), {, String, displayName, =, getDisplayName, (, ), ;, return]
[), {, return, null, ;, }, public, boolean, hasDisplayName, (, ), {, String, displayName, =, getDisplayName, (, ), ;, return]
[), {, return, null, ;, }, public, boolean, hasDisplayName, (, ), {, String, displayName, =, getDisplayName, (, ), ;, return]
[return, null, ;, }, public, boolean, hasDisplayName, (, ), {, String, displayName, =, getDisplayName, (, ), ;, return, displayName, !=]
[;, }, public, boolean, hasDisplayName, (, ), {, String, displayName, =, getDisplayName, (, ), ;, return, displayName, !=, null, &&]
[}, public, boolean, hasDisplayName, (, ), {, String, displayName, =, getDisplayName, (, ), ;, return, displayName, !=, null, &&, !]
[}, public, boolean, hasDisplayName, (, ), {, String, displayName, =, getDisplayName, (, ), ;, return, displayName, !=, null, &&, !]
[!=, null, &&, !, displayName, ., isEmpty, (, ), ;, }, public, boolean, hasProperty, (, String, pname, ), {, return]
[}, public, boolean, hasProperty, (, String, pname, ), {, return, false, ;, }, public, boolean, isNoType, (, ), {, return]
[false, ;, }, public, boolean, isNoType, (, ), {, return, false, ;, }, public, boolean, isNoResolvedType, (, ), {, return]
[false, ;, }, public, boolean, isNoResolvedType, (, ), {, return, false, ;, }, public, boolean, isNoObjectType, (, ), {, return]
[;, }, public, boolean, isNoObjectType, (, ), {, return, false, ;, }, public, final, boolean, isEmptyType, (, ), {, return]
[;, }, public, boolean, isNoObjectType, (, ), {, return, false, ;, }, public, final, boolean, isEmptyType, (, ), {, return]
[;, }, public, boolean, isNoObjectType, (, ), {, return, false, ;, }, public, final, boolean, isEmptyType, (, ), {, return]
[;, }, public, boolean, isNoObjectType, (, ), {, return, false, ;, }, public, final, boolean, isEmptyType, (, ), {, return]
[isNoObjectType, (, ), {, return, false, ;, }, public, final, boolean, isEmptyType, (, ), {, return, isNoType, (, ), ||]
[return, false, ;, }, public, final, boolean, isEmptyType, (, ), {, return, isNoType, (, ), ||, isNoObjectType, (, ), ||]
[public, final, boolean, isEmptyType, (, ), {, return, isNoType, (, ), ||, isNoObjectType, (, ), ||, isNoResolvedType, (, ), ||]
[final, boolean, isEmptyType, (, ), {, return, isNoType, (, ), ||, isNoObjectType, (, ), ||, isNoResolvedType, (, ), ||, (]
[final, boolean, isEmptyType, (, ), {, return, isNoType, (, ), ||, isNoObjectType, (, ), ||, isNoResolvedType, (, ), ||, (]
[final, boolean, isEmptyType, (, ), {, return, isNoType, (, ), ||, isNoObjectType, (, ), ||, isNoResolvedType, (, ), ||, (]
[), {, return, isNoType, (, ), ||, isNoObjectType, (, ), ||, isNoResolvedType, (, ), ||, (, registry, ., getNativeFunctionType, (]
[), {, return, isNoType, (, ), ||, isNoObjectType, (, ), ||, isNoResolvedType, (, ), ||, (, registry, ., getNativeFunctionType, (]
[), ||, isNoObjectType, (, ), ||, isNoResolvedType, (, ), ||, (, registry, ., getNativeFunctionType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ==]
[registry, ., getNativeFunctionType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ==, this, ), ;, }, public, boolean, isNumberObjectType, (, ), {, return]
[), ;, }, public, boolean, isNumberObjectType, (, ), {, return, false, ;, }, public, boolean, isNumberValueType, (, ), {, return]
[false, ;, }, public, boolean, isNumberValueType, (, ), {, return, false, ;, }, public, boolean, isFunctionPrototypeType, (, ), {, return]
[false, ;, }, public, boolean, isFunctionPrototypeType, (, ), {, return, false, ;, }, public, boolean, isStringObjectType, (, ), {, return]
[return, false, ;, }, public, boolean, isStringObjectType, (, ), {, return, false, ;, }, boolean, isTheObjectType, (, ), {, return]
[return, false, ;, }, boolean, isTheObjectType, (, ), {, return, false, ;, }, public, boolean, isStringValueType, (, ), {, return]
[;, }, public, boolean, isStringValueType, (, ), {, return, false, ;, }, public, final, boolean, isString, (, ), {, return]
[public, boolean, isStringValueType, (, ), {, return, false, ;, }, public, final, boolean, isString, (, ), {, return, isSubtype, (]
[isStringValueType, (, ), {, return, false, ;, }, public, final, boolean, isString, (, ), {, return, isSubtype, (, getNativeType, (]
[isStringValueType, (, ), {, return, false, ;, }, public, final, boolean, isString, (, ), {, return, isSubtype, (, getNativeType, (]
[return, isSubtype, (, getNativeType, (, JSTypeNative, ., STRING_VALUE_OR_OBJECT_TYPE, ), ), ;, }, public, final, boolean, isNumber, (, ), {, return]
[(, getNativeType, (, JSTypeNative, ., STRING_VALUE_OR_OBJECT_TYPE, ), ), ;, }, public, final, boolean, isNumber, (, ), {, return, isSubtype, (]
[(, JSTypeNative, ., STRING_VALUE_OR_OBJECT_TYPE, ), ), ;, }, public, final, boolean, isNumber, (, ), {, return, isSubtype, (, getNativeType, (]
[(, JSTypeNative, ., STRING_VALUE_OR_OBJECT_TYPE, ), ), ;, }, public, final, boolean, isNumber, (, ), {, return, isSubtype, (, getNativeType, (]
[{, return, isSubtype, (, getNativeType, (, JSTypeNative, ., NUMBER_VALUE_OR_OBJECT_TYPE, ), ), ;, }, public, boolean, isArrayType, (, ), {, return]
[), ;, }, public, boolean, isArrayType, (, ), {, return, false, ;, }, public, boolean, isBooleanObjectType, (, ), {, return]
[false, ;, }, public, boolean, isBooleanObjectType, (, ), {, return, false, ;, }, public, boolean, isBooleanValueType, (, ), {, return]
[false, ;, }, public, boolean, isBooleanValueType, (, ), {, return, false, ;, }, public, boolean, isRegexpType, (, ), {, return]
[false, ;, }, public, boolean, isRegexpType, (, ), {, return, false, ;, }, public, boolean, isDateType, (, ), {, return]
[false, ;, }, public, boolean, isDateType, (, ), {, return, false, ;, }, public, boolean, isNullType, (, ), {, return]
[false, ;, }, public, boolean, isNullType, (, ), {, return, false, ;, }, public, boolean, isVoidType, (, ), {, return]
[false, ;, }, public, boolean, isVoidType, (, ), {, return, false, ;, }, public, boolean, isAllType, (, ), {, return]
[false, ;, }, public, boolean, isAllType, (, ), {, return, false, ;, }, public, boolean, isUnknownType, (, ), {, return]
[false, ;, }, public, boolean, isUnknownType, (, ), {, return, false, ;, }, public, boolean, isCheckedUnknownType, (, ), {, return]
[;, }, public, boolean, isCheckedUnknownType, (, ), {, return, false, ;, }, public, final, boolean, isUnionType, (, ), {, return]
[;, }, public, boolean, isCheckedUnknownType, (, ), {, return, false, ;, }, public, final, boolean, isUnionType, (, ), {, return]
[isCheckedUnknownType, (, ), {, return, false, ;, }, public, final, boolean, isUnionType, (, ), {, return, toMaybeUnionType, (, ), !=]
[isUnionType, (, ), {, return, toMaybeUnionType, (, ), !=, null, ;, }, public, boolean, isStruct, (, ), {, if, (]
[!=, null, ;, }, public, boolean, isStruct, (, ), {, if, (, isObject, (, ), ), {, ObjectType, objType, =]
[(, ), {, if, (, isObject, (, ), ), {, ObjectType, objType, =, toObjectType, (, ), ;, ObjectType, iproto, =]
[(, ), {, if, (, isObject, (, ), ), {, ObjectType, objType, =, toObjectType, (, ), ;, ObjectType, iproto, =]
[), {, ObjectType, objType, =, toObjectType, (, ), ;, ObjectType, iproto, =, objType, ., getImplicitPrototype, (, ), ;, if, (]
[), {, ObjectType, objType, =, toObjectType, (, ), ;, ObjectType, iproto, =, objType, ., getImplicitPrototype, (, ), ;, if, (]
[), {, ObjectType, objType, =, toObjectType, (, ), ;, ObjectType, iproto, =, objType, ., getImplicitPrototype, (, ), ;, if, (]
[ObjectType, objType, =, toObjectType, (, ), ;, ObjectType, iproto, =, objType, ., getImplicitPrototype, (, ), ;, if, (, iproto, !=]
[=, toObjectType, (, ), ;, ObjectType, iproto, =, objType, ., getImplicitPrototype, (, ), ;, if, (, iproto, !=, null, &&]
[=, toObjectType, (, ), ;, ObjectType, iproto, =, objType, ., getImplicitPrototype, (, ), ;, if, (, iproto, !=, null, &&]
[objType, ., getImplicitPrototype, (, ), ;, if, (, iproto, !=, null, &&, iproto, ., isStruct, (, ), ), {, return]
[if, (, iproto, !=, null, &&, iproto, ., isStruct, (, ), ), {, return, true, ;, }, FunctionType, ctor, =]
[if, (, iproto, !=, null, &&, iproto, ., isStruct, (, ), ), {, return, true, ;, }, FunctionType, ctor, =]
[isStruct, (, ), ), {, return, true, ;, }, FunctionType, ctor, =, objType, ., getConstructor, (, ), ;, if, (]
[isStruct, (, ), ), {, return, true, ;, }, FunctionType, ctor, =, objType, ., getConstructor, (, ), ;, if, (]
[), ), {, return, true, ;, }, FunctionType, ctor, =, objType, ., getConstructor, (, ), ;, if, (, ctor, ==]
[}, FunctionType, ctor, =, objType, ., getConstructor, (, ), ;, if, (, ctor, ==, null, ), {, JSDocInfo, info, =]
[}, FunctionType, ctor, =, objType, ., getConstructor, (, ), ;, if, (, ctor, ==, null, ), {, JSDocInfo, info, =]
[(, ), ;, if, (, ctor, ==, null, ), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, ), ;, return]
[(, ), ;, if, (, ctor, ==, null, ), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, ), ;, return]
[(, ), ;, if, (, ctor, ==, null, ), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, ), ;, return]
[;, if, (, ctor, ==, null, ), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, ), ;, return, info, !=]
[(, ctor, ==, null, ), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, ), ;, return, info, !=, null, &&]
[(, ctor, ==, null, ), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, ), ;, return, info, !=, null, &&]
[., getJSDocInfo, (, ), ;, return, info, !=, null, &&, info, ., makesStructs, (, ), ;, }, else, {, return]
[., getJSDocInfo, (, ), ;, return, info, !=, null, &&, info, ., makesStructs, (, ), ;, }, else, {, return]
[&&, info, ., makesStructs, (, ), ;, }, else, {, return, ctor, ., makesStructs, (, ), ;, }, }, return]
[ctor, ., makesStructs, (, ), ;, }, }, return, false, ;, }, public, boolean, isDict, (, ), {, if, (]
[return, false, ;, }, public, boolean, isDict, (, ), {, if, (, isObject, (, ), ), {, ObjectType, objType, =]
[(, ), {, if, (, isObject, (, ), ), {, ObjectType, objType, =, toObjectType, (, ), ;, ObjectType, iproto, =]
[(, ), {, if, (, isObject, (, ), ), {, ObjectType, objType, =, toObjectType, (, ), ;, ObjectType, iproto, =]
[), {, ObjectType, objType, =, toObjectType, (, ), ;, ObjectType, iproto, =, objType, ., getImplicitPrototype, (, ), ;, if, (]
[), {, ObjectType, objType, =, toObjectType, (, ), ;, ObjectType, iproto, =, objType, ., getImplicitPrototype, (, ), ;, if, (]
[), {, ObjectType, objType, =, toObjectType, (, ), ;, ObjectType, iproto, =, objType, ., getImplicitPrototype, (, ), ;, if, (]
[ObjectType, objType, =, toObjectType, (, ), ;, ObjectType, iproto, =, objType, ., getImplicitPrototype, (, ), ;, if, (, iproto, !=]
[=, toObjectType, (, ), ;, ObjectType, iproto, =, objType, ., getImplicitPrototype, (, ), ;, if, (, iproto, !=, null, &&]
[=, toObjectType, (, ), ;, ObjectType, iproto, =, objType, ., getImplicitPrototype, (, ), ;, if, (, iproto, !=, null, &&]
[objType, ., getImplicitPrototype, (, ), ;, if, (, iproto, !=, null, &&, iproto, ., isDict, (, ), ), {, return]
[if, (, iproto, !=, null, &&, iproto, ., isDict, (, ), ), {, return, true, ;, }, FunctionType, ctor, =]
[if, (, iproto, !=, null, &&, iproto, ., isDict, (, ), ), {, return, true, ;, }, FunctionType, ctor, =]
[isDict, (, ), ), {, return, true, ;, }, FunctionType, ctor, =, objType, ., getConstructor, (, ), ;, if, (]
[isDict, (, ), ), {, return, true, ;, }, FunctionType, ctor, =, objType, ., getConstructor, (, ), ;, if, (]
[), ), {, return, true, ;, }, FunctionType, ctor, =, objType, ., getConstructor, (, ), ;, if, (, ctor, ==]
[}, FunctionType, ctor, =, objType, ., getConstructor, (, ), ;, if, (, ctor, ==, null, ), {, JSDocInfo, info, =]
[}, FunctionType, ctor, =, objType, ., getConstructor, (, ), ;, if, (, ctor, ==, null, ), {, JSDocInfo, info, =]
[(, ), ;, if, (, ctor, ==, null, ), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, ), ;, return]
[(, ), ;, if, (, ctor, ==, null, ), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, ), ;, return]
[(, ), ;, if, (, ctor, ==, null, ), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, ), ;, return]
[;, if, (, ctor, ==, null, ), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, ), ;, return, info, !=]
[(, ctor, ==, null, ), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, ), ;, return, info, !=, null, &&]
[(, ctor, ==, null, ), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, ), ;, return, info, !=, null, &&]
[., getJSDocInfo, (, ), ;, return, info, !=, null, &&, info, ., makesDicts, (, ), ;, }, else, {, return]
[., getJSDocInfo, (, ), ;, return, info, !=, null, &&, info, ., makesDicts, (, ), ;, }, else, {, return]
[&&, info, ., makesDicts, (, ), ;, }, else, {, return, ctor, ., makesDicts, (, ), ;, }, }, return]
[return, ctor, ., makesDicts, (, ), ;, }, }, return, false, ;, }, public, UnionType, toMaybeUnionType, (, ), {, return]
[;, }, public, UnionType, toMaybeUnionType, (, ), {, return, null, ;, }, public, final, boolean, isGlobalThisType, (, ), {, return]
[;, }, public, UnionType, toMaybeUnionType, (, ), {, return, null, ;, }, public, final, boolean, isGlobalThisType, (, ), {, return]
[public, UnionType, toMaybeUnionType, (, ), {, return, null, ;, }, public, final, boolean, isGlobalThisType, (, ), {, return, this, ==]
[public, UnionType, toMaybeUnionType, (, ), {, return, null, ;, }, public, final, boolean, isGlobalThisType, (, ), {, return, this, ==]
[), {, return, null, ;, }, public, final, boolean, isGlobalThisType, (, ), {, return, this, ==, registry, ., getNativeType, (]
[), {, return, null, ;, }, public, final, boolean, isGlobalThisType, (, ), {, return, this, ==, registry, ., getNativeType, (]
[this, ==, registry, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ;, }, public, final, boolean, isFunctionType, (, ), {, return]
[this, ==, registry, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ;, }, public, final, boolean, isFunctionType, (, ), {, return]
[getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ;, }, public, final, boolean, isFunctionType, (, ), {, return, toMaybeFunctionType, (, ), !=]
[boolean, isFunctionType, (, ), {, return, toMaybeFunctionType, (, ), !=, null, ;, }, public, FunctionType, toMaybeFunctionType, (, ), {, return]
[public, FunctionType, toMaybeFunctionType, (, ), {, return, null, ;, }, public, static, FunctionType, toMaybeFunctionType, (, JSType, type, ), {, return]
[public, FunctionType, toMaybeFunctionType, (, ), {, return, null, ;, }, public, static, FunctionType, toMaybeFunctionType, (, JSType, type, ), {, return]
[public, FunctionType, toMaybeFunctionType, (, ), {, return, null, ;, }, public, static, FunctionType, toMaybeFunctionType, (, JSType, type, ), {, return]
[toMaybeFunctionType, (, ), {, return, null, ;, }, public, static, FunctionType, toMaybeFunctionType, (, JSType, type, ), {, return, type, ==]
[), {, return, null, ;, }, public, static, FunctionType, toMaybeFunctionType, (, JSType, type, ), {, return, type, ==, null, ?]
[return, null, ;, }, public, static, FunctionType, toMaybeFunctionType, (, JSType, type, ), {, return, type, ==, null, ?, null, :]
[return, null, ;, }, public, static, FunctionType, toMaybeFunctionType, (, JSType, type, ), {, return, type, ==, null, ?, null, :]
[==, null, ?, null, :, type, ., toMaybeFunctionType, (, ), ;, }, public, final, boolean, isEnumElementType, (, ), {, return]
[==, null, ?, null, :, type, ., toMaybeFunctionType, (, ), ;, }, public, final, boolean, isEnumElementType, (, ), {, return]
[:, type, ., toMaybeFunctionType, (, ), ;, }, public, final, boolean, isEnumElementType, (, ), {, return, toMaybeEnumElementType, (, ), !=]
[boolean, isEnumElementType, (, ), {, return, toMaybeEnumElementType, (, ), !=, null, ;, }, public, EnumElementType, toMaybeEnumElementType, (, ), {, return]
[null, ;, }, public, EnumElementType, toMaybeEnumElementType, (, ), {, return, null, ;, }, public, boolean, isEnumType, (, ), {, return]
[null, ;, }, public, EnumElementType, toMaybeEnumElementType, (, ), {, return, null, ;, }, public, boolean, isEnumType, (, ), {, return]
[EnumElementType, toMaybeEnumElementType, (, ), {, return, null, ;, }, public, boolean, isEnumType, (, ), {, return, toMaybeEnumType, (, ), !=]
[boolean, isEnumType, (, ), {, return, toMaybeEnumType, (, ), !=, null, ;, }, public, EnumType, toMaybeEnumType, (, ), {, return]
[!=, null, ;, }, public, EnumType, toMaybeEnumType, (, ), {, return, null, ;, }, boolean, isNamedType, (, ), {, return]
[return, null, ;, }, boolean, isNamedType, (, ), {, return, false, ;, }, public, boolean, isRecordType, (, ), {, return]
[return, null, ;, }, boolean, isNamedType, (, ), {, return, false, ;, }, public, boolean, isRecordType, (, ), {, return]
[boolean, isNamedType, (, ), {, return, false, ;, }, public, boolean, isRecordType, (, ), {, return, toMaybeRecordType, (, ), !=]
[public, boolean, isRecordType, (, ), {, return, toMaybeRecordType, (, ), !=, null, ;, }, RecordType, toMaybeRecordType, (, ), {, return]
[null, ;, }, RecordType, toMaybeRecordType, (, ), {, return, null, ;, }, public, final, boolean, isParameterizedType, (, ), {, return]
[null, ;, }, RecordType, toMaybeRecordType, (, ), {, return, null, ;, }, public, final, boolean, isParameterizedType, (, ), {, return]
[toMaybeRecordType, (, ), {, return, null, ;, }, public, final, boolean, isParameterizedType, (, ), {, return, toMaybeParameterizedType, (, ), !=]
[boolean, isParameterizedType, (, ), {, return, toMaybeParameterizedType, (, ), !=, null, ;, }, public, ParameterizedType, toMaybeParameterizedType, (, ), {, return]
[public, ParameterizedType, toMaybeParameterizedType, (, ), {, return, null, ;, }, public, static, ParameterizedType, toMaybeParameterizedType, (, JSType, type, ), {, return]
[public, ParameterizedType, toMaybeParameterizedType, (, ), {, return, null, ;, }, public, static, ParameterizedType, toMaybeParameterizedType, (, JSType, type, ), {, return]
[public, ParameterizedType, toMaybeParameterizedType, (, ), {, return, null, ;, }, public, static, ParameterizedType, toMaybeParameterizedType, (, JSType, type, ), {, return]
[toMaybeParameterizedType, (, ), {, return, null, ;, }, public, static, ParameterizedType, toMaybeParameterizedType, (, JSType, type, ), {, return, type, ==]
[), {, return, null, ;, }, public, static, ParameterizedType, toMaybeParameterizedType, (, JSType, type, ), {, return, type, ==, null, ?]
[return, null, ;, }, public, static, ParameterizedType, toMaybeParameterizedType, (, JSType, type, ), {, return, type, ==, null, ?, null, :]
[return, null, ;, }, public, static, ParameterizedType, toMaybeParameterizedType, (, JSType, type, ), {, return, type, ==, null, ?, null, :]
[==, null, ?, null, :, type, ., toMaybeParameterizedType, (, ), ;, }, public, final, boolean, isTemplateType, (, ), {, return]
[==, null, ?, null, :, type, ., toMaybeParameterizedType, (, ), ;, }, public, final, boolean, isTemplateType, (, ), {, return]
[:, type, ., toMaybeParameterizedType, (, ), ;, }, public, final, boolean, isTemplateType, (, ), {, return, toMaybeTemplateType, (, ), !=]
[boolean, isTemplateType, (, ), {, return, toMaybeTemplateType, (, ), !=, null, ;, }, public, TemplateType, toMaybeTemplateType, (, ), {, return]
[public, TemplateType, toMaybeTemplateType, (, ), {, return, null, ;, }, public, static, TemplateType, toMaybeTemplateType, (, JSType, type, ), {, return]
[public, TemplateType, toMaybeTemplateType, (, ), {, return, null, ;, }, public, static, TemplateType, toMaybeTemplateType, (, JSType, type, ), {, return]
[public, TemplateType, toMaybeTemplateType, (, ), {, return, null, ;, }, public, static, TemplateType, toMaybeTemplateType, (, JSType, type, ), {, return]
[toMaybeTemplateType, (, ), {, return, null, ;, }, public, static, TemplateType, toMaybeTemplateType, (, JSType, type, ), {, return, type, ==]
[), {, return, null, ;, }, public, static, TemplateType, toMaybeTemplateType, (, JSType, type, ), {, return, type, ==, null, ?]
[return, null, ;, }, public, static, TemplateType, toMaybeTemplateType, (, JSType, type, ), {, return, type, ==, null, ?, null, :]
[return, null, ;, }, public, static, TemplateType, toMaybeTemplateType, (, JSType, type, ), {, return, type, ==, null, ?, null, :]
[==, null, ?, null, :, type, ., toMaybeTemplateType, (, ), ;, }, public, boolean, hasAnyTemplateTypes, (, ), {, if, (]
[null, ?, null, :, type, ., toMaybeTemplateType, (, ), ;, }, public, boolean, hasAnyTemplateTypes, (, ), {, if, (, !]
[null, ?, null, :, type, ., toMaybeTemplateType, (, ), ;, }, public, boolean, hasAnyTemplateTypes, (, ), {, if, (, !]
[., toMaybeTemplateType, (, ), ;, }, public, boolean, hasAnyTemplateTypes, (, ), {, if, (, !, this, ., inTemplatedCheckVisit, ), {]
[., toMaybeTemplateType, (, ), ;, }, public, boolean, hasAnyTemplateTypes, (, ), {, if, (, !, this, ., inTemplatedCheckVisit, ), {]
[;, }, public, boolean, hasAnyTemplateTypes, (, ), {, if, (, !, this, ., inTemplatedCheckVisit, ), {, this, ., inTemplatedCheckVisit, =]
[(, ), {, if, (, !, this, ., inTemplatedCheckVisit, ), {, this, ., inTemplatedCheckVisit, =, true, ;, boolean, result, =]
[(, !, this, ., inTemplatedCheckVisit, ), {, this, ., inTemplatedCheckVisit, =, true, ;, boolean, result, =, hasAnyTemplateTypesInternal, (, ), ;]
[(, !, this, ., inTemplatedCheckVisit, ), {, this, ., inTemplatedCheckVisit, =, true, ;, boolean, result, =, hasAnyTemplateTypesInternal, (, ), ;]
[inTemplatedCheckVisit, ), {, this, ., inTemplatedCheckVisit, =, true, ;, boolean, result, =, hasAnyTemplateTypesInternal, (, ), ;, this, ., inTemplatedCheckVisit, =]
[this, ., inTemplatedCheckVisit, =, true, ;, boolean, result, =, hasAnyTemplateTypesInternal, (, ), ;, this, ., inTemplatedCheckVisit, =, false, ;, return]
[boolean, result, =, hasAnyTemplateTypesInternal, (, ), ;, this, ., inTemplatedCheckVisit, =, false, ;, return, result, ;, }, else, {, return]
[false, ;, return, result, ;, }, else, {, return, false, ;, }, }, boolean, hasAnyTemplateTypesInternal, (, ), {, if, (]
[;, }, }, boolean, hasAnyTemplateTypesInternal, (, ), {, if, (, isTemplatized, (, ), ), {, for, (, JSType, templatizedType, :]
[(, ), {, if, (, isTemplatized, (, ), ), {, for, (, JSType, templatizedType, :, templatizedTypes, ), {, if, (]
[(, ), {, if, (, isTemplatized, (, ), ), {, for, (, JSType, templatizedType, :, templatizedTypes, ), {, if, (]
[), {, for, (, JSType, templatizedType, :, templatizedTypes, ), {, if, (, templatizedType, ., hasAnyTemplateTypes, (, ), ), {, return]
[:, templatizedTypes, ), {, if, (, templatizedType, ., hasAnyTemplateTypes, (, ), ), {, return, true, ;, }, }, }, return]
[), ), {, return, true, ;, }, }, }, return, false, ;, }, public, boolean, isTemplatized, (, ), {, return]
[), {, return, true, ;, }, }, }, return, false, ;, }, public, boolean, isTemplatized, (, ), {, return, !]
[), {, return, true, ;, }, }, }, return, false, ;, }, public, boolean, isTemplatized, (, ), {, return, !]
[{, return, !, templateKeys, ., isEmpty, (, ), ;, }, public, ImmutableList, <, String, >, getTemplateKeys, (, ), {, return]
[String, >, getTemplateKeys, (, ), {, return, templateKeys, ;, }, public, ImmutableList, <, JSType, >, getTemplatizedTypes, (, ), {, return]
[<, JSType, >, getTemplatizedTypes, (, ), {, return, templatizedTypes, ;, }, public, boolean, hasTemplatizedType, (, String, key, ), {, return]
[<, JSType, >, getTemplatizedTypes, (, ), {, return, templatizedTypes, ;, }, public, boolean, hasTemplatizedType, (, String, key, ), {, return]
[(, ), {, return, templatizedTypes, ;, }, public, boolean, hasTemplatizedType, (, String, key, ), {, return, templateKeys, ., contains, (]
[return, templateKeys, ., contains, (, key, ), ;, }, public, JSType, getTemplatizedType, (, String, key, ), {, int, index, =]
[return, templateKeys, ., contains, (, key, ), ;, }, public, JSType, getTemplatizedType, (, String, key, ), {, int, index, =]
[(, key, ), ;, }, public, JSType, getTemplatizedType, (, String, key, ), {, int, index, =, templateKeys, ., indexOf, (]
[public, JSType, getTemplatizedType, (, String, key, ), {, int, index, =, templateKeys, ., indexOf, (, key, ), ;, if, (]
[public, JSType, getTemplatizedType, (, String, key, ), {, int, index, =, templateKeys, ., indexOf, (, key, ), ;, if, (]
[getTemplatizedType, (, String, key, ), {, int, index, =, templateKeys, ., indexOf, (, key, ), ;, if, (, index, <]
[), {, int, index, =, templateKeys, ., indexOf, (, key, ), ;, if, (, index, <, 0, ), {, return]
[), {, int, index, =, templateKeys, ., indexOf, (, key, ), ;, if, (, index, <, 0, ), {, return]
[=, templateKeys, ., indexOf, (, key, ), ;, if, (, index, <, 0, ), {, return, registry, ., getNativeType, (]
[=, templateKeys, ., indexOf, (, key, ), ;, if, (, index, <, 0, ), {, return, registry, ., getNativeType, (]
[;, if, (, index, <, 0, ), {, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return]
[;, if, (, index, <, 0, ), {, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return]
[<, 0, ), {, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return, templatizedTypes, ., get, (]
[static, boolean, hasEquivalentTemplateTypes, (, JSType, type1, ,, JSType, type2, ,, EquivalenceMethod, eqMethod, ), {, ImmutableList, <, JSType, >, templatizedTypes1, =]
[static, boolean, hasEquivalentTemplateTypes, (, JSType, type1, ,, JSType, type2, ,, EquivalenceMethod, eqMethod, ), {, ImmutableList, <, JSType, >, templatizedTypes1, =]
[), {, ImmutableList, <, JSType, >, templatizedTypes1, =, type1, ., getTemplatizedTypes, (, ), ;, ImmutableList, <, JSType, >, templatizedTypes2, =]
[), {, ImmutableList, <, JSType, >, templatizedTypes1, =, type1, ., getTemplatizedTypes, (, ), ;, ImmutableList, <, JSType, >, templatizedTypes2, =]
[., getTemplatizedTypes, (, ), ;, ImmutableList, <, JSType, >, templatizedTypes2, =, type2, ., getTemplatizedTypes, (, ), ;, int, nTemplatizedTypes1, =]
[., getTemplatizedTypes, (, ), ;, ImmutableList, <, JSType, >, templatizedTypes2, =, type2, ., getTemplatizedTypes, (, ), ;, int, nTemplatizedTypes1, =]
[templatizedTypes2, =, type2, ., getTemplatizedTypes, (, ), ;, int, nTemplatizedTypes1, =, templatizedTypes1, ., size, (, ), ;, int, nTemplatizedTypes2, =]
[templatizedTypes2, =, type2, ., getTemplatizedTypes, (, ), ;, int, nTemplatizedTypes1, =, templatizedTypes1, ., size, (, ), ;, int, nTemplatizedTypes2, =]
[int, nTemplatizedTypes1, =, templatizedTypes1, ., size, (, ), ;, int, nTemplatizedTypes2, =, templatizedTypes2, ., size, (, ), ;, if, (]
[int, nTemplatizedTypes1, =, templatizedTypes1, ., size, (, ), ;, int, nTemplatizedTypes2, =, templatizedTypes2, ., size, (, ), ;, if, (]
[=, templatizedTypes1, ., size, (, ), ;, int, nTemplatizedTypes2, =, templatizedTypes2, ., size, (, ), ;, if, (, nTemplatizedTypes1, !=]
[(, ), ;, int, nTemplatizedTypes2, =, templatizedTypes2, ., size, (, ), ;, if, (, nTemplatizedTypes1, !=, nTemplatizedTypes2, ), {, return]
[size, (, ), ;, if, (, nTemplatizedTypes1, !=, nTemplatizedTypes2, ), {, return, false, ;, }, for, (, int, i, =]
[), ;, if, (, nTemplatizedTypes1, !=, nTemplatizedTypes2, ), {, return, false, ;, }, for, (, int, i, =, 0, ;]
[), ;, if, (, nTemplatizedTypes1, !=, nTemplatizedTypes2, ), {, return, false, ;, }, for, (, int, i, =, 0, ;]
[if, (, nTemplatizedTypes1, !=, nTemplatizedTypes2, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <]
[nTemplatizedTypes1, !=, nTemplatizedTypes2, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, nTemplatizedTypes1, ;]
[nTemplatizedTypes1, !=, nTemplatizedTypes2, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, nTemplatizedTypes1, ;]
[;, }, for, (, int, i, =, 0, ;, i, <, nTemplatizedTypes1, ;, i, ++, ), {, JSType, templatizedType1, =]
[;, }, for, (, int, i, =, 0, ;, i, <, nTemplatizedTypes1, ;, i, ++, ), {, JSType, templatizedType1, =]
[int, i, =, 0, ;, i, <, nTemplatizedTypes1, ;, i, ++, ), {, JSType, templatizedType1, =, templatizedTypes1, ., get, (]
[<, nTemplatizedTypes1, ;, i, ++, ), {, JSType, templatizedType1, =, templatizedTypes1, ., get, (, i, ), ;, JSType, templatizedType2, =]
[<, nTemplatizedTypes1, ;, i, ++, ), {, JSType, templatizedType1, =, templatizedTypes1, ., get, (, i, ), ;, JSType, templatizedType2, =]
[++, ), {, JSType, templatizedType1, =, templatizedTypes1, ., get, (, i, ), ;, JSType, templatizedType2, =, templatizedTypes2, ., get, (]
[=, templatizedTypes1, ., get, (, i, ), ;, JSType, templatizedType2, =, templatizedTypes2, ., get, (, i, ), ;, if, (]
[=, templatizedTypes1, ., get, (, i, ), ;, JSType, templatizedType2, =, templatizedTypes2, ., get, (, i, ), ;, if, (]
[(, i, ), ;, JSType, templatizedType2, =, templatizedTypes2, ., get, (, i, ), ;, if, (, templatizedType1, ., checkEquivalenceHelper, (]
[), ;, JSType, templatizedType2, =, templatizedTypes2, ., get, (, i, ), ;, if, (, templatizedType1, ., checkEquivalenceHelper, (, templatizedType2, ,]
[templatizedTypes2, ., get, (, i, ), ;, if, (, templatizedType1, ., checkEquivalenceHelper, (, templatizedType2, ,, eqMethod, ), ), {, return]
[), ;, if, (, templatizedType1, ., checkEquivalenceHelper, (, templatizedType2, ,, eqMethod, ), ), {, return, false, ;, }, }, return]
[eqMethod, ), ), {, return, false, ;, }, }, return, true, ;, }, public, boolean, isObject, (, ), {, return]
[true, ;, }, public, boolean, isObject, (, ), {, return, false, ;, }, public, boolean, isConstructor, (, ), {, return]
[false, ;, }, public, boolean, isConstructor, (, ), {, return, false, ;, }, public, boolean, isNominalType, (, ), {, return]
[}, public, boolean, isNominalType, (, ), {, return, false, ;, }, public, final, boolean, isNominalConstructor, (, ), {, if, (]
[}, public, boolean, isNominalType, (, ), {, return, false, ;, }, public, final, boolean, isNominalConstructor, (, ), {, if, (]
[(, ), {, return, false, ;, }, public, final, boolean, isNominalConstructor, (, ), {, if, (, isConstructor, (, ), ||]
[final, boolean, isNominalConstructor, (, ), {, if, (, isConstructor, (, ), ||, isInterface, (, ), ), {, FunctionType, fn, =]
[if, (, isConstructor, (, ), ||, isInterface, (, ), ), {, FunctionType, fn, =, toMaybeFunctionType, (, ), ;, if, (]
[if, (, isConstructor, (, ), ||, isInterface, (, ), ), {, FunctionType, fn, =, toMaybeFunctionType, (, ), ;, if, (]
[isConstructor, (, ), ||, isInterface, (, ), ), {, FunctionType, fn, =, toMaybeFunctionType, (, ), ;, if, (, fn, ==]
[isInterface, (, ), ), {, FunctionType, fn, =, toMaybeFunctionType, (, ), ;, if, (, fn, ==, null, ), {, return]
[FunctionType, fn, =, toMaybeFunctionType, (, ), ;, if, (, fn, ==, null, ), {, return, false, ;, }, if, (]
[FunctionType, fn, =, toMaybeFunctionType, (, ), ;, if, (, fn, ==, null, ), {, return, false, ;, }, if, (]
[FunctionType, fn, =, toMaybeFunctionType, (, ), ;, if, (, fn, ==, null, ), {, return, false, ;, }, if, (]
[;, if, (, fn, ==, null, ), {, return, false, ;, }, if, (, fn, ., getSource, (, ), !=]
[==, null, ), {, return, false, ;, }, if, (, fn, ., getSource, (, ), !=, null, ), {, return]
[return, false, ;, }, if, (, fn, ., getSource, (, ), !=, null, ), {, return, true, ;, }, return]
[return, false, ;, }, if, (, fn, ., getSource, (, ), !=, null, ), {, return, true, ;, }, return]
[getSource, (, ), !=, null, ), {, return, true, ;, }, return, fn, ., isNativeObjectType, (, ), ;, }, return]
[}, return, fn, ., isNativeObjectType, (, ), ;, }, return, false, ;, }, public, boolean, isInstanceType, (, ), {, return]
[false, ;, }, public, boolean, isInstanceType, (, ), {, return, false, ;, }, public, boolean, isInterface, (, ), {, return]
[false, ;, }, public, boolean, isInterface, (, ), {, return, false, ;, }, public, boolean, isOrdinaryFunction, (, ), {, return]
[public, boolean, isOrdinaryFunction, (, ), {, return, false, ;, }, public, final, boolean, isEquivalentTo, (, JSType, that, ), {, return]
[isOrdinaryFunction, (, ), {, return, false, ;, }, public, final, boolean, isEquivalentTo, (, JSType, that, ), {, return, checkEquivalenceHelper, (]
[), {, return, false, ;, }, public, final, boolean, isEquivalentTo, (, JSType, that, ), {, return, checkEquivalenceHelper, (, that, ,]
[), {, return, false, ;, }, public, final, boolean, isEquivalentTo, (, JSType, that, ), {, return, checkEquivalenceHelper, (, that, ,]
[checkEquivalenceHelper, (, that, ,, EquivalenceMethod, ., IDENTITY, ), ;, }, public, final, boolean, isInvariant, (, JSType, that, ), {, return]
[that, ,, EquivalenceMethod, ., IDENTITY, ), ;, }, public, final, boolean, isInvariant, (, JSType, that, ), {, return, checkEquivalenceHelper, (]
[EquivalenceMethod, ., IDENTITY, ), ;, }, public, final, boolean, isInvariant, (, JSType, that, ), {, return, checkEquivalenceHelper, (, that, ,]
[EquivalenceMethod, ., IDENTITY, ), ;, }, public, final, boolean, isInvariant, (, JSType, that, ), {, return, checkEquivalenceHelper, (, that, ,]
[checkEquivalenceHelper, (, that, ,, EquivalenceMethod, ., INVARIANT, ), ;, }, public, final, boolean, differsFrom, (, JSType, that, ), {, return]
[(, that, ,, EquivalenceMethod, ., INVARIANT, ), ;, }, public, final, boolean, differsFrom, (, JSType, that, ), {, return, !]
[,, EquivalenceMethod, ., INVARIANT, ), ;, }, public, final, boolean, differsFrom, (, JSType, that, ), {, return, !, checkEquivalenceHelper, (]
[., INVARIANT, ), ;, }, public, final, boolean, differsFrom, (, JSType, that, ), {, return, !, checkEquivalenceHelper, (, that, ,]
[., INVARIANT, ), ;, }, public, final, boolean, differsFrom, (, JSType, that, ), {, return, !, checkEquivalenceHelper, (, that, ,]
[that, ,, EquivalenceMethod, ., DATA_FLOW, ), ;, }, boolean, checkEquivalenceHelper, (, JSType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (]
[that, ,, EquivalenceMethod, ., DATA_FLOW, ), ;, }, boolean, checkEquivalenceHelper, (, JSType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (]
[EquivalenceMethod, ., DATA_FLOW, ), ;, }, boolean, checkEquivalenceHelper, (, JSType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (, this, ==]
[;, }, boolean, checkEquivalenceHelper, (, JSType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (, this, ==, that, ), {, return]
[that, ,, EquivalenceMethod, eqMethod, ), {, if, (, this, ==, that, ), {, return, true, ;, }, boolean, thisUnknown, =]
[(, this, ==, that, ), {, return, true, ;, }, boolean, thisUnknown, =, isUnknownType, (, ), ;, boolean, thatUnknown, =]
[(, this, ==, that, ), {, return, true, ;, }, boolean, thisUnknown, =, isUnknownType, (, ), ;, boolean, thatUnknown, =]
[;, }, boolean, thisUnknown, =, isUnknownType, (, ), ;, boolean, thatUnknown, =, that, ., isUnknownType, (, ), ;, if, (]
[;, }, boolean, thisUnknown, =, isUnknownType, (, ), ;, boolean, thatUnknown, =, that, ., isUnknownType, (, ), ;, if, (]
[boolean, thisUnknown, =, isUnknownType, (, ), ;, boolean, thatUnknown, =, that, ., isUnknownType, (, ), ;, if, (, thisUnknown, ||]
[), ;, boolean, thatUnknown, =, that, ., isUnknownType, (, ), ;, if, (, thisUnknown, ||, thatUnknown, ), {, if, (]
[), ;, boolean, thatUnknown, =, that, ., isUnknownType, (, ), ;, if, (, thisUnknown, ||, thatUnknown, ), {, if, (]
[boolean, thatUnknown, =, that, ., isUnknownType, (, ), ;, if, (, thisUnknown, ||, thatUnknown, ), {, if, (, eqMethod, ==]
[boolean, thatUnknown, =, that, ., isUnknownType, (, ), ;, if, (, thisUnknown, ||, thatUnknown, ), {, if, (, eqMethod, ==]
[(, ), ;, if, (, thisUnknown, ||, thatUnknown, ), {, if, (, eqMethod, ==, EquivalenceMethod, ., INVARIANT, ), {, return]
[||, thatUnknown, ), {, if, (, eqMethod, ==, EquivalenceMethod, ., INVARIANT, ), {, return, true, ;, }, else, if, (]
[||, thatUnknown, ), {, if, (, eqMethod, ==, EquivalenceMethod, ., INVARIANT, ), {, return, true, ;, }, else, if, (]
[), {, if, (, eqMethod, ==, EquivalenceMethod, ., INVARIANT, ), {, return, true, ;, }, else, if, (, eqMethod, ==]
[), {, if, (, eqMethod, ==, EquivalenceMethod, ., INVARIANT, ), {, return, true, ;, }, else, if, (, eqMethod, ==]
[EquivalenceMethod, ., INVARIANT, ), {, return, true, ;, }, else, if, (, eqMethod, ==, EquivalenceMethod, ., DATA_FLOW, ), {, return]
[EquivalenceMethod, ., INVARIANT, ), {, return, true, ;, }, else, if, (, eqMethod, ==, EquivalenceMethod, ., DATA_FLOW, ), {, return]
[INVARIANT, ), {, return, true, ;, }, else, if, (, eqMethod, ==, EquivalenceMethod, ., DATA_FLOW, ), {, return, thisUnknown, &&]
[}, else, if, (, eqMethod, ==, EquivalenceMethod, ., DATA_FLOW, ), {, return, thisUnknown, &&, thatUnknown, ;, }, else, if, (]
[}, else, if, (, eqMethod, ==, EquivalenceMethod, ., DATA_FLOW, ), {, return, thisUnknown, &&, thatUnknown, ;, }, else, if, (]
[}, else, if, (, eqMethod, ==, EquivalenceMethod, ., DATA_FLOW, ), {, return, thisUnknown, &&, thatUnknown, ;, }, else, if, (]
[if, (, eqMethod, ==, EquivalenceMethod, ., DATA_FLOW, ), {, return, thisUnknown, &&, thatUnknown, ;, }, else, if, (, thisUnknown, &&]
[eqMethod, ==, EquivalenceMethod, ., DATA_FLOW, ), {, return, thisUnknown, &&, thatUnknown, ;, }, else, if, (, thisUnknown, &&, thatUnknown, &&]
[==, EquivalenceMethod, ., DATA_FLOW, ), {, return, thisUnknown, &&, thatUnknown, ;, }, else, if, (, thisUnknown, &&, thatUnknown, &&, (]
[==, EquivalenceMethod, ., DATA_FLOW, ), {, return, thisUnknown, &&, thatUnknown, ;, }, else, if, (, thisUnknown, &&, thatUnknown, &&, (]
[), {, return, thisUnknown, &&, thatUnknown, ;, }, else, if, (, thisUnknown, &&, thatUnknown, &&, (, isNominalType, (, ), ^]
[), {, return, thisUnknown, &&, thatUnknown, ;, }, else, if, (, thisUnknown, &&, thatUnknown, &&, (, isNominalType, (, ), ^]
[if, (, thisUnknown, &&, thatUnknown, &&, (, isNominalType, (, ), ^, that, ., isNominalType, (, ), ), ), {, return]
[(, isNominalType, (, ), ^, that, ., isNominalType, (, ), ), ), {, return, false, ;, }, }, if, (]
[(, isNominalType, (, ), ^, that, ., isNominalType, (, ), ), ), {, return, false, ;, }, }, if, (]
[^, that, ., isNominalType, (, ), ), ), {, return, false, ;, }, }, if, (, isUnionType, (, ), &&]
[^, that, ., isNominalType, (, ), ), ), {, return, false, ;, }, }, if, (, isUnionType, (, ), &&]
[{, return, false, ;, }, }, if, (, isUnionType, (, ), &&, that, ., isUnionType, (, ), ), {, return]
[{, return, false, ;, }, }, if, (, isUnionType, (, ), &&, that, ., isUnionType, (, ), ), {, return]
[if, (, isUnionType, (, ), &&, that, ., isUnionType, (, ), ), {, return, toMaybeUnionType, (, ), ., checkUnionEquivalenceHelper, (]
[if, (, isUnionType, (, ), &&, that, ., isUnionType, (, ), ), {, return, toMaybeUnionType, (, ), ., checkUnionEquivalenceHelper, (]
[that, ., isUnionType, (, ), ), {, return, toMaybeUnionType, (, ), ., checkUnionEquivalenceHelper, (, that, ., toMaybeUnionType, (, ), ,]
[{, return, toMaybeUnionType, (, ), ., checkUnionEquivalenceHelper, (, that, ., toMaybeUnionType, (, ), ,, eqMethod, ), ;, }, if, (]
[{, return, toMaybeUnionType, (, ), ., checkUnionEquivalenceHelper, (, that, ., toMaybeUnionType, (, ), ,, eqMethod, ), ;, }, if, (]
[), ., checkUnionEquivalenceHelper, (, that, ., toMaybeUnionType, (, ), ,, eqMethod, ), ;, }, if, (, isFunctionType, (, ), &&]
[), ., checkUnionEquivalenceHelper, (, that, ., toMaybeUnionType, (, ), ,, eqMethod, ), ;, }, if, (, isFunctionType, (, ), &&]
[), ,, eqMethod, ), ;, }, if, (, isFunctionType, (, ), &&, that, ., isFunctionType, (, ), ), {, return]
[), ,, eqMethod, ), ;, }, if, (, isFunctionType, (, ), &&, that, ., isFunctionType, (, ), ), {, return]
[if, (, isFunctionType, (, ), &&, that, ., isFunctionType, (, ), ), {, return, toMaybeFunctionType, (, ), ., checkFunctionEquivalenceHelper, (]
[if, (, isFunctionType, (, ), &&, that, ., isFunctionType, (, ), ), {, return, toMaybeFunctionType, (, ), ., checkFunctionEquivalenceHelper, (]
[that, ., isFunctionType, (, ), ), {, return, toMaybeFunctionType, (, ), ., checkFunctionEquivalenceHelper, (, that, ., toMaybeFunctionType, (, ), ,]
[{, return, toMaybeFunctionType, (, ), ., checkFunctionEquivalenceHelper, (, that, ., toMaybeFunctionType, (, ), ,, eqMethod, ), ;, }, if, (]
[{, return, toMaybeFunctionType, (, ), ., checkFunctionEquivalenceHelper, (, that, ., toMaybeFunctionType, (, ), ,, eqMethod, ), ;, }, if, (]
[), ., checkFunctionEquivalenceHelper, (, that, ., toMaybeFunctionType, (, ), ,, eqMethod, ), ;, }, if, (, isRecordType, (, ), &&]
[), ., checkFunctionEquivalenceHelper, (, that, ., toMaybeFunctionType, (, ), ,, eqMethod, ), ;, }, if, (, isRecordType, (, ), &&]
[), ,, eqMethod, ), ;, }, if, (, isRecordType, (, ), &&, that, ., isRecordType, (, ), ), {, return]
[), ,, eqMethod, ), ;, }, if, (, isRecordType, (, ), &&, that, ., isRecordType, (, ), ), {, return]
[if, (, isRecordType, (, ), &&, that, ., isRecordType, (, ), ), {, return, toMaybeRecordType, (, ), ., checkRecordEquivalenceHelper, (]
[if, (, isRecordType, (, ), &&, that, ., isRecordType, (, ), ), {, return, toMaybeRecordType, (, ), ., checkRecordEquivalenceHelper, (]
[that, ., isRecordType, (, ), ), {, return, toMaybeRecordType, (, ), ., checkRecordEquivalenceHelper, (, that, ., toMaybeRecordType, (, ), ,]
[return, toMaybeRecordType, (, ), ., checkRecordEquivalenceHelper, (, that, ., toMaybeRecordType, (, ), ,, eqMethod, ), ;, }, ParameterizedType, thisParamType, =]
[that, ., toMaybeRecordType, (, ), ,, eqMethod, ), ;, }, ParameterizedType, thisParamType, =, toMaybeParameterizedType, (, ), ;, ParameterizedType, thatParamType, =]
[that, ., toMaybeRecordType, (, ), ,, eqMethod, ), ;, }, ParameterizedType, thisParamType, =, toMaybeParameterizedType, (, ), ;, ParameterizedType, thatParamType, =]
[;, }, ParameterizedType, thisParamType, =, toMaybeParameterizedType, (, ), ;, ParameterizedType, thatParamType, =, that, ., toMaybeParameterizedType, (, ), ;, if, (]
[;, }, ParameterizedType, thisParamType, =, toMaybeParameterizedType, (, ), ;, ParameterizedType, thatParamType, =, that, ., toMaybeParameterizedType, (, ), ;, if, (]
[;, }, ParameterizedType, thisParamType, =, toMaybeParameterizedType, (, ), ;, ParameterizedType, thatParamType, =, that, ., toMaybeParameterizedType, (, ), ;, if, (]
[ParameterizedType, thisParamType, =, toMaybeParameterizedType, (, ), ;, ParameterizedType, thatParamType, =, that, ., toMaybeParameterizedType, (, ), ;, if, (, thisParamType, !=]
[=, toMaybeParameterizedType, (, ), ;, ParameterizedType, thatParamType, =, that, ., toMaybeParameterizedType, (, ), ;, if, (, thisParamType, !=, null, ||]
[=, toMaybeParameterizedType, (, ), ;, ParameterizedType, thatParamType, =, that, ., toMaybeParameterizedType, (, ), ;, if, (, thisParamType, !=, null, ||]
[(, ), ;, ParameterizedType, thatParamType, =, that, ., toMaybeParameterizedType, (, ), ;, if, (, thisParamType, !=, null, ||, thatParamType, !=]
[that, ., toMaybeParameterizedType, (, ), ;, if, (, thisParamType, !=, null, ||, thatParamType, !=, null, ), {, boolean, paramsMatch, =]
[), ;, if, (, thisParamType, !=, null, ||, thatParamType, !=, null, ), {, boolean, paramsMatch, =, false, ;, if, (]
[), ;, if, (, thisParamType, !=, null, ||, thatParamType, !=, null, ), {, boolean, paramsMatch, =, false, ;, if, (]
[), ;, if, (, thisParamType, !=, null, ||, thatParamType, !=, null, ), {, boolean, paramsMatch, =, false, ;, if, (]
[if, (, thisParamType, !=, null, ||, thatParamType, !=, null, ), {, boolean, paramsMatch, =, false, ;, if, (, thisParamType, !=]
[thisParamType, !=, null, ||, thatParamType, !=, null, ), {, boolean, paramsMatch, =, false, ;, if, (, thisParamType, !=, null, &&]
[thisParamType, !=, null, ||, thatParamType, !=, null, ), {, boolean, paramsMatch, =, false, ;, if, (, thisParamType, !=, null, &&]
[null, ||, thatParamType, !=, null, ), {, boolean, paramsMatch, =, false, ;, if, (, thisParamType, !=, null, &&, thatParamType, !=]
[!=, null, ), {, boolean, paramsMatch, =, false, ;, if, (, thisParamType, !=, null, &&, thatParamType, !=, null, ), {]
[), {, boolean, paramsMatch, =, false, ;, if, (, thisParamType, !=, null, &&, thatParamType, !=, null, ), {, paramsMatch, =]
[), {, boolean, paramsMatch, =, false, ;, if, (, thisParamType, !=, null, &&, thatParamType, !=, null, ), {, paramsMatch, =]
[), {, boolean, paramsMatch, =, false, ;, if, (, thisParamType, !=, null, &&, thatParamType, !=, null, ), {, paramsMatch, =]
[(, thisParamType, !=, null, &&, thatParamType, !=, null, ), {, paramsMatch, =, thisParamType, ., getParameterType, (, ), ., checkEquivalenceHelper, (]
[(, thisParamType, !=, null, &&, thatParamType, !=, null, ), {, paramsMatch, =, thisParamType, ., getParameterType, (, ), ., checkEquivalenceHelper, (]
[!=, null, ), {, paramsMatch, =, thisParamType, ., getParameterType, (, ), ., checkEquivalenceHelper, (, thatParamType, ., getParameterType, (, ), ,]
[., getParameterType, (, ), ., checkEquivalenceHelper, (, thatParamType, ., getParameterType, (, ), ,, eqMethod, ), ;, }, else, if, (]
[., getParameterType, (, ), ., checkEquivalenceHelper, (, thatParamType, ., getParameterType, (, ), ,, eqMethod, ), ;, }, else, if, (]
[(, ), ., checkEquivalenceHelper, (, thatParamType, ., getParameterType, (, ), ,, eqMethod, ), ;, }, else, if, (, eqMethod, ==]
[(, ), ., checkEquivalenceHelper, (, thatParamType, ., getParameterType, (, ), ,, eqMethod, ), ;, }, else, if, (, eqMethod, ==]
[thatParamType, ., getParameterType, (, ), ,, eqMethod, ), ;, }, else, if, (, eqMethod, ==, EquivalenceMethod, ., IDENTITY, ), {]
[getParameterType, (, ), ,, eqMethod, ), ;, }, else, if, (, eqMethod, ==, EquivalenceMethod, ., IDENTITY, ), {, paramsMatch, =]
[), ;, }, else, if, (, eqMethod, ==, EquivalenceMethod, ., IDENTITY, ), {, paramsMatch, =, false, ;, }, else, {]
[}, else, if, (, eqMethod, ==, EquivalenceMethod, ., IDENTITY, ), {, paramsMatch, =, false, ;, }, else, {, paramsMatch, =]
[EquivalenceMethod, ., IDENTITY, ), {, paramsMatch, =, false, ;, }, else, {, paramsMatch, =, true, ;, }, JSType, thisRootType, =]
[EquivalenceMethod, ., IDENTITY, ), {, paramsMatch, =, false, ;, }, else, {, paramsMatch, =, true, ;, }, JSType, thisRootType, =]
[EquivalenceMethod, ., IDENTITY, ), {, paramsMatch, =, false, ;, }, else, {, paramsMatch, =, true, ;, }, JSType, thisRootType, =]
[IDENTITY, ), {, paramsMatch, =, false, ;, }, else, {, paramsMatch, =, true, ;, }, JSType, thisRootType, =, thisParamType, ==]
[{, paramsMatch, =, false, ;, }, else, {, paramsMatch, =, true, ;, }, JSType, thisRootType, =, thisParamType, ==, null, ?]
[=, false, ;, }, else, {, paramsMatch, =, true, ;, }, JSType, thisRootType, =, thisParamType, ==, null, ?, this, :]
[=, false, ;, }, else, {, paramsMatch, =, true, ;, }, JSType, thisRootType, =, thisParamType, ==, null, ?, this, :]
[;, }, JSType, thisRootType, =, thisParamType, ==, null, ?, this, :, thisParamType, ., getReferencedTypeInternal, (, ), ;, JSType, thatRootType, =]
[;, }, JSType, thisRootType, =, thisParamType, ==, null, ?, this, :, thisParamType, ., getReferencedTypeInternal, (, ), ;, JSType, thatRootType, =]
[;, }, JSType, thisRootType, =, thisParamType, ==, null, ?, this, :, thisParamType, ., getReferencedTypeInternal, (, ), ;, JSType, thatRootType, =]
[JSType, thisRootType, =, thisParamType, ==, null, ?, this, :, thisParamType, ., getReferencedTypeInternal, (, ), ;, JSType, thatRootType, =, thatParamType, ==]
[=, thisParamType, ==, null, ?, this, :, thisParamType, ., getReferencedTypeInternal, (, ), ;, JSType, thatRootType, =, thatParamType, ==, null, ?]
[==, null, ?, this, :, thisParamType, ., getReferencedTypeInternal, (, ), ;, JSType, thatRootType, =, thatParamType, ==, null, ?, that, :]
[==, null, ?, this, :, thisParamType, ., getReferencedTypeInternal, (, ), ;, JSType, thatRootType, =, thatParamType, ==, null, ?, that, :]
[getReferencedTypeInternal, (, ), ;, JSType, thatRootType, =, thatParamType, ==, null, ?, that, :, thatParamType, ., getReferencedTypeInternal, (, ), ;, return]
[getReferencedTypeInternal, (, ), ;, JSType, thatRootType, =, thatParamType, ==, null, ?, that, :, thatParamType, ., getReferencedTypeInternal, (, ), ;, return]
[), ;, JSType, thatRootType, =, thatParamType, ==, null, ?, that, :, thatParamType, ., getReferencedTypeInternal, (, ), ;, return, paramsMatch, &&]
[), ;, JSType, thatRootType, =, thatParamType, ==, null, ?, that, :, thatParamType, ., getReferencedTypeInternal, (, ), ;, return, paramsMatch, &&]
[=, thatParamType, ==, null, ?, that, :, thatParamType, ., getReferencedTypeInternal, (, ), ;, return, paramsMatch, &&, thisRootType, ., checkEquivalenceHelper, (]
[==, null, ?, that, :, thatParamType, ., getReferencedTypeInternal, (, ), ;, return, paramsMatch, &&, thisRootType, ., checkEquivalenceHelper, (, thatRootType, ,]
[., getReferencedTypeInternal, (, ), ;, return, paramsMatch, &&, thisRootType, ., checkEquivalenceHelper, (, thatRootType, ,, eqMethod, ), ;, }, if, (]
[., getReferencedTypeInternal, (, ), ;, return, paramsMatch, &&, thisRootType, ., checkEquivalenceHelper, (, thatRootType, ,, eqMethod, ), ;, }, if, (]
[;, return, paramsMatch, &&, thisRootType, ., checkEquivalenceHelper, (, thatRootType, ,, eqMethod, ), ;, }, if, (, isNominalType, (, ), &&]
[;, return, paramsMatch, &&, thisRootType, ., checkEquivalenceHelper, (, thatRootType, ,, eqMethod, ), ;, }, if, (, isNominalType, (, ), &&]
[thatRootType, ,, eqMethod, ), ;, }, if, (, isNominalType, (, ), &&, that, ., isNominalType, (, ), ), {, return]
[thatRootType, ,, eqMethod, ), ;, }, if, (, isNominalType, (, ), &&, that, ., isNominalType, (, ), ), {, return]
[thatRootType, ,, eqMethod, ), ;, }, if, (, isNominalType, (, ), &&, that, ., isNominalType, (, ), ), {, return]
[), &&, that, ., isNominalType, (, ), ), {, return, toObjectType, (, ), ., getReferenceName, (, ), ., equals, (]
[), &&, that, ., isNominalType, (, ), ), {, return, toObjectType, (, ), ., getReferenceName, (, ), ., equals, (]
[), &&, that, ., isNominalType, (, ), ), {, return, toObjectType, (, ), ., getReferenceName, (, ), ., equals, (]
[getReferenceName, (, ), ., equals, (, that, ., toObjectType, (, ), ., getReferenceName, (, ), ), ;, }, if, (]
[getReferenceName, (, ), ., equals, (, that, ., toObjectType, (, ), ., getReferenceName, (, ), ), ;, }, if, (]
[that, ., toObjectType, (, ), ., getReferenceName, (, ), ), ;, }, if, (, this, instanceof, ProxyObjectType, ), {, return]
[that, ., toObjectType, (, ), ., getReferenceName, (, ), ), ;, }, if, (, this, instanceof, ProxyObjectType, ), {, return]
[that, ., toObjectType, (, ), ., getReferenceName, (, ), ), ;, }, if, (, this, instanceof, ProxyObjectType, ), {, return]
[., toObjectType, (, ), ., getReferenceName, (, ), ), ;, }, if, (, this, instanceof, ProxyObjectType, ), {, return, (]
[), ., getReferenceName, (, ), ), ;, }, if, (, this, instanceof, ProxyObjectType, ), {, return, (, (, ProxyObjectType, )]
[(, this, instanceof, ProxyObjectType, ), {, return, (, (, ProxyObjectType, ), this, ), ., getReferencedTypeInternal, (, ), ., checkEquivalenceHelper, (]
[instanceof, ProxyObjectType, ), {, return, (, (, ProxyObjectType, ), this, ), ., getReferencedTypeInternal, (, ), ., checkEquivalenceHelper, (, that, ,]
[(, ProxyObjectType, ), this, ), ., getReferencedTypeInternal, (, ), ., checkEquivalenceHelper, (, that, ,, eqMethod, ), ;, }, if, (]
[(, ProxyObjectType, ), this, ), ., getReferencedTypeInternal, (, ), ., checkEquivalenceHelper, (, that, ,, eqMethod, ), ;, }, if, (]
[getReferencedTypeInternal, (, ), ., checkEquivalenceHelper, (, that, ,, eqMethod, ), ;, }, if, (, that, instanceof, ProxyObjectType, ), {, return]
[), ., checkEquivalenceHelper, (, that, ,, eqMethod, ), ;, }, if, (, that, instanceof, ProxyObjectType, ), {, return, checkEquivalenceHelper, (]
[), ., checkEquivalenceHelper, (, that, ,, eqMethod, ), ;, }, if, (, that, instanceof, ProxyObjectType, ), {, return, checkEquivalenceHelper, (]
[., checkEquivalenceHelper, (, that, ,, eqMethod, ), ;, }, if, (, that, instanceof, ProxyObjectType, ), {, return, checkEquivalenceHelper, (, (]
[that, ,, eqMethod, ), ;, }, if, (, that, instanceof, ProxyObjectType, ), {, return, checkEquivalenceHelper, (, (, (, ProxyObjectType, )]
[(, that, instanceof, ProxyObjectType, ), {, return, checkEquivalenceHelper, (, (, (, ProxyObjectType, ), that, ), ., getReferencedTypeInternal, (, ), ,]
[{, return, checkEquivalenceHelper, (, (, (, ProxyObjectType, ), that, ), ., getReferencedTypeInternal, (, ), ,, eqMethod, ), ;, }, return]
[{, return, checkEquivalenceHelper, (, (, (, ProxyObjectType, ), that, ), ., getReferencedTypeInternal, (, ), ,, eqMethod, ), ;, }, return]
[checkEquivalenceHelper, (, (, (, ProxyObjectType, ), that, ), ., getReferencedTypeInternal, (, ), ,, eqMethod, ), ;, }, return, this, ==]
[}, return, this, ==, that, ;, }, public, static, boolean, isEquivalent, (, JSType, typeA, ,, JSType, typeB, ), {, return]
[}, return, this, ==, that, ;, }, public, static, boolean, isEquivalent, (, JSType, typeA, ,, JSType, typeB, ), {, return]
[return, this, ==, that, ;, }, public, static, boolean, isEquivalent, (, JSType, typeA, ,, JSType, typeB, ), {, return, (]
[return, this, ==, that, ;, }, public, static, boolean, isEquivalent, (, JSType, typeA, ,, JSType, typeB, ), {, return, (]
[return, this, ==, that, ;, }, public, static, boolean, isEquivalent, (, JSType, typeA, ,, JSType, typeB, ), {, return, (]
[==, that, ;, }, public, static, boolean, isEquivalent, (, JSType, typeA, ,, JSType, typeB, ), {, return, (, typeA, ==]
[;, }, public, static, boolean, isEquivalent, (, JSType, typeA, ,, JSType, typeB, ), {, return, (, typeA, ==, null, ||]
[;, }, public, static, boolean, isEquivalent, (, JSType, typeA, ,, JSType, typeB, ), {, return, (, typeA, ==, null, ||]
[public, static, boolean, isEquivalent, (, JSType, typeA, ,, JSType, typeB, ), {, return, (, typeA, ==, null, ||, typeB, ==]
[isEquivalent, (, JSType, typeA, ,, JSType, typeB, ), {, return, (, typeA, ==, null, ||, typeB, ==, null, ), ?]
[isEquivalent, (, JSType, typeA, ,, JSType, typeB, ), {, return, (, typeA, ==, null, ||, typeB, ==, null, ), ?]
[JSType, typeA, ,, JSType, typeB, ), {, return, (, typeA, ==, null, ||, typeB, ==, null, ), ?, typeA, ==]
[,, JSType, typeB, ), {, return, (, typeA, ==, null, ||, typeB, ==, null, ), ?, typeA, ==, typeB, :]
[,, JSType, typeB, ), {, return, (, typeA, ==, null, ||, typeB, ==, null, ), ?, typeA, ==, typeB, :]
[{, return, (, typeA, ==, null, ||, typeB, ==, null, ), ?, typeA, ==, typeB, :, typeA, ., isEquivalentTo, (]
[:, typeA, ., isEquivalentTo, (, typeB, ), ;, }, @, Override, public, boolean, equals, (, Object, jsType, ), {, return]
[:, typeA, ., isEquivalentTo, (, typeB, ), ;, }, @, Override, public, boolean, equals, (, Object, jsType, ), {, return]
[typeA, ., isEquivalentTo, (, typeB, ), ;, }, @, Override, public, boolean, equals, (, Object, jsType, ), {, return, (]
[typeA, ., isEquivalentTo, (, typeB, ), ;, }, @, Override, public, boolean, equals, (, Object, jsType, ), {, return, (]
[), ;, }, @, Override, public, boolean, equals, (, Object, jsType, ), {, return, (, jsType, instanceof, JSType, ), ?]
[}, @, Override, public, boolean, equals, (, Object, jsType, ), {, return, (, jsType, instanceof, JSType, ), ?, isEquivalentTo, (]
[public, boolean, equals, (, Object, jsType, ), {, return, (, jsType, instanceof, JSType, ), ?, isEquivalentTo, (, (, JSType, )]
[(, Object, jsType, ), {, return, (, jsType, instanceof, JSType, ), ?, isEquivalentTo, (, (, JSType, ), jsType, ), :]
[isEquivalentTo, (, (, JSType, ), jsType, ), :, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[isEquivalentTo, (, (, JSType, ), jsType, ), :, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[), jsType, ), :, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, System, ., identityHashCode, (]
[(, ), {, return, System, ., identityHashCode, (, this, ), ;, }, public, final, boolean, matchesInt32Context, (, ), {, return]
[final, boolean, matchesInt32Context, (, ), {, return, matchesNumberContext, (, ), ;, }, public, final, boolean, matchesUint32Context, (, ), {, return]
[public, final, boolean, matchesUint32Context, (, ), {, return, matchesNumberContext, (, ), ;, }, public, boolean, matchesNumberContext, (, ), {, return]
[), ;, }, public, boolean, matchesNumberContext, (, ), {, return, false, ;, }, public, boolean, matchesStringContext, (, ), {, return]
[false, ;, }, public, boolean, matchesStringContext, (, ), {, return, false, ;, }, public, boolean, matchesObjectContext, (, ), {, return]
[boolean, matchesObjectContext, (, ), {, return, false, ;, }, public, JSType, findPropertyType, (, String, propertyName, ), {, ObjectType, autoboxObjType, =]
[boolean, matchesObjectContext, (, ), {, return, false, ;, }, public, JSType, findPropertyType, (, String, propertyName, ), {, ObjectType, autoboxObjType, =]
[{, return, false, ;, }, public, JSType, findPropertyType, (, String, propertyName, ), {, ObjectType, autoboxObjType, =, ObjectType, ., cast, (]
[findPropertyType, (, String, propertyName, ), {, ObjectType, autoboxObjType, =, ObjectType, ., cast, (, autoboxesTo, (, ), ), ;, if, (]
[findPropertyType, (, String, propertyName, ), {, ObjectType, autoboxObjType, =, ObjectType, ., cast, (, autoboxesTo, (, ), ), ;, if, (]
[String, propertyName, ), {, ObjectType, autoboxObjType, =, ObjectType, ., cast, (, autoboxesTo, (, ), ), ;, if, (, autoboxObjType, !=]
[ObjectType, autoboxObjType, =, ObjectType, ., cast, (, autoboxesTo, (, ), ), ;, if, (, autoboxObjType, !=, null, ), {, return]
[ObjectType, autoboxObjType, =, ObjectType, ., cast, (, autoboxesTo, (, ), ), ;, if, (, autoboxObjType, !=, null, ), {, return]
[., cast, (, autoboxesTo, (, ), ), ;, if, (, autoboxObjType, !=, null, ), {, return, autoboxObjType, ., findPropertyType, (]
[), ), ;, if, (, autoboxObjType, !=, null, ), {, return, autoboxObjType, ., findPropertyType, (, propertyName, ), ;, }, return]
[return, autoboxObjType, ., findPropertyType, (, propertyName, ), ;, }, return, null, ;, }, public, boolean, canBeCalled, (, ), {, return]
[}, public, boolean, canBeCalled, (, ), {, return, false, ;, }, public, boolean, canCastTo, (, JSType, that, ), {, return]
[}, public, boolean, canBeCalled, (, ), {, return, false, ;, }, public, boolean, canCastTo, (, JSType, that, ), {, return]
[(, ), {, return, false, ;, }, public, boolean, canCastTo, (, JSType, that, ), {, return, this, ., visit, (]
[{, return, false, ;, }, public, boolean, canCastTo, (, JSType, that, ), {, return, this, ., visit, (, CAN_CAST_TO_VISITOR, ,]
[), {, return, this, ., visit, (, CAN_CAST_TO_VISITOR, ,, that, ), ;, }, public, JSType, autoboxesTo, (, ), {, return]
[), ;, }, public, JSType, autoboxesTo, (, ), {, return, null, ;, }, public, JSType, unboxesTo, (, ), {, return]
[null, ;, }, public, JSType, unboxesTo, (, ), {, return, null, ;, }, public, ObjectType, toObjectType, (, ), {, return]
[null, ;, }, public, JSType, unboxesTo, (, ), {, return, null, ;, }, public, ObjectType, toObjectType, (, ), {, return]
[null, ;, }, public, JSType, unboxesTo, (, ), {, return, null, ;, }, public, ObjectType, toObjectType, (, ), {, return]
[JSType, unboxesTo, (, ), {, return, null, ;, }, public, ObjectType, toObjectType, (, ), {, return, this, instanceof, ObjectType, ?]
[), {, return, null, ;, }, public, ObjectType, toObjectType, (, ), {, return, this, instanceof, ObjectType, ?, (, ObjectType, )]
[return, null, ;, }, public, ObjectType, toObjectType, (, ), {, return, this, instanceof, ObjectType, ?, (, ObjectType, ), this, :]
[instanceof, ObjectType, ?, (, ObjectType, ), this, :, null, ;, }, public, JSType, autobox, (, ), {, JSType, restricted, =]
[:, null, ;, }, public, JSType, autobox, (, ), {, JSType, restricted, =, restrictByNotNullOrUndefined, (, ), ;, JSType, autobox, =]
[:, null, ;, }, public, JSType, autobox, (, ), {, JSType, restricted, =, restrictByNotNullOrUndefined, (, ), ;, JSType, autobox, =]
[(, ), {, JSType, restricted, =, restrictByNotNullOrUndefined, (, ), ;, JSType, autobox, =, restricted, ., autoboxesTo, (, ), ;, return]
[(, ), {, JSType, restricted, =, restrictByNotNullOrUndefined, (, ), ;, JSType, autobox, =, restricted, ., autoboxesTo, (, ), ;, return]
[(, ), {, JSType, restricted, =, restrictByNotNullOrUndefined, (, ), ;, JSType, autobox, =, restricted, ., autoboxesTo, (, ), ;, return]
[{, JSType, restricted, =, restrictByNotNullOrUndefined, (, ), ;, JSType, autobox, =, restricted, ., autoboxesTo, (, ), ;, return, autobox, ==]
[restricted, =, restrictByNotNullOrUndefined, (, ), ;, JSType, autobox, =, restricted, ., autoboxesTo, (, ), ;, return, autobox, ==, null, ?]
[restrictByNotNullOrUndefined, (, ), ;, JSType, autobox, =, restricted, ., autoboxesTo, (, ), ;, return, autobox, ==, null, ?, restricted, :]
[), ;, return, autobox, ==, null, ?, restricted, :, autobox, ;, }, public, final, ObjectType, dereference, (, ), {, return]
[), ;, return, autobox, ==, null, ?, restricted, :, autobox, ;, }, public, final, ObjectType, dereference, (, ), {, return]
[return, autobox, (, ), ., toObjectType, (, ), ;, }, public, final, boolean, canTestForEqualityWith, (, JSType, that, ), {, return]
[return, autobox, (, ), ., toObjectType, (, ), ;, }, public, final, boolean, canTestForEqualityWith, (, JSType, that, ), {, return]
[(, ), ., toObjectType, (, ), ;, }, public, final, boolean, canTestForEqualityWith, (, JSType, that, ), {, return, testForEquality, (]
[), ;, }, public, final, boolean, canTestForEqualityWith, (, JSType, that, ), {, return, testForEquality, (, that, ), ., equals, (]
[testForEquality, (, that, ), ., equals, (, UNKNOWN, ), ;, }, public, TernaryValue, testForEquality, (, JSType, that, ), {, return]
[that, ), ., equals, (, UNKNOWN, ), ;, }, public, TernaryValue, testForEquality, (, JSType, that, ), {, return, testForEqualityHelper, (]
[., equals, (, UNKNOWN, ), ;, }, public, TernaryValue, testForEquality, (, JSType, that, ), {, return, testForEqualityHelper, (, this, ,]
[testForEqualityHelper, (, this, ,, that, ), ;, }, TernaryValue, testForEqualityHelper, (, JSType, aType, ,, JSType, bType, ), {, if, (]
[testForEqualityHelper, (, this, ,, that, ), ;, }, TernaryValue, testForEqualityHelper, (, JSType, aType, ,, JSType, bType, ), {, if, (]
[testForEqualityHelper, (, this, ,, that, ), ;, }, TernaryValue, testForEqualityHelper, (, JSType, aType, ,, JSType, bType, ), {, if, (]
[testForEqualityHelper, (, this, ,, that, ), ;, }, TernaryValue, testForEqualityHelper, (, JSType, aType, ,, JSType, bType, ), {, if, (]
[testForEqualityHelper, (, this, ,, that, ), ;, }, TernaryValue, testForEqualityHelper, (, JSType, aType, ,, JSType, bType, ), {, if, (]
[testForEqualityHelper, (, this, ,, that, ), ;, }, TernaryValue, testForEqualityHelper, (, JSType, aType, ,, JSType, bType, ), {, if, (]
[testForEqualityHelper, (, this, ,, that, ), ;, }, TernaryValue, testForEqualityHelper, (, JSType, aType, ,, JSType, bType, ), {, if, (]
[;, }, TernaryValue, testForEqualityHelper, (, JSType, aType, ,, JSType, bType, ), {, if, (, bType, ., isAllType, (, ), ||]
[;, }, TernaryValue, testForEqualityHelper, (, JSType, aType, ,, JSType, bType, ), {, if, (, bType, ., isAllType, (, ), ||]
[aType, ,, JSType, bType, ), {, if, (, bType, ., isAllType, (, ), ||, bType, ., isUnknownType, (, ), ||]
[aType, ,, JSType, bType, ), {, if, (, bType, ., isAllType, (, ), ||, bType, ., isUnknownType, (, ), ||]
[if, (, bType, ., isAllType, (, ), ||, bType, ., isUnknownType, (, ), ||, bType, ., isNoResolvedType, (, ), ||]
[if, (, bType, ., isAllType, (, ), ||, bType, ., isUnknownType, (, ), ||, bType, ., isNoResolvedType, (, ), ||]
[), ||, bType, ., isUnknownType, (, ), ||, bType, ., isNoResolvedType, (, ), ||, aType, ., isAllType, (, ), ||]
[), ||, bType, ., isUnknownType, (, ), ||, bType, ., isNoResolvedType, (, ), ||, aType, ., isAllType, (, ), ||]
[), ||, bType, ., isNoResolvedType, (, ), ||, aType, ., isAllType, (, ), ||, aType, ., isUnknownType, (, ), ||]
[), ||, bType, ., isNoResolvedType, (, ), ||, aType, ., isAllType, (, ), ||, aType, ., isUnknownType, (, ), ||]
[aType, ., isAllType, (, ), ||, aType, ., isUnknownType, (, ), ||, aType, ., isNoResolvedType, (, ), ), {, return]
[aType, ., isUnknownType, (, ), ||, aType, ., isNoResolvedType, (, ), ), {, return, UNKNOWN, ;, }, boolean, aIsEmpty, =]
[aType, ., isUnknownType, (, ), ||, aType, ., isNoResolvedType, (, ), ), {, return, UNKNOWN, ;, }, boolean, aIsEmpty, =]
[(, ), ), {, return, UNKNOWN, ;, }, boolean, aIsEmpty, =, aType, ., isEmptyType, (, ), ;, boolean, bIsEmpty, =]
[(, ), ), {, return, UNKNOWN, ;, }, boolean, aIsEmpty, =, aType, ., isEmptyType, (, ), ;, boolean, bIsEmpty, =]
[boolean, aIsEmpty, =, aType, ., isEmptyType, (, ), ;, boolean, bIsEmpty, =, bType, ., isEmptyType, (, ), ;, if, (]
[boolean, aIsEmpty, =, aType, ., isEmptyType, (, ), ;, boolean, bIsEmpty, =, bType, ., isEmptyType, (, ), ;, if, (]
[=, aType, ., isEmptyType, (, ), ;, boolean, bIsEmpty, =, bType, ., isEmptyType, (, ), ;, if, (, aIsEmpty, ||]
[), ;, boolean, bIsEmpty, =, bType, ., isEmptyType, (, ), ;, if, (, aIsEmpty, ||, bIsEmpty, ), {, if, (]
[), ;, boolean, bIsEmpty, =, bType, ., isEmptyType, (, ), ;, if, (, aIsEmpty, ||, bIsEmpty, ), {, if, (]
[boolean, bIsEmpty, =, bType, ., isEmptyType, (, ), ;, if, (, aIsEmpty, ||, bIsEmpty, ), {, if, (, aIsEmpty, &&]
[., isEmptyType, (, ), ;, if, (, aIsEmpty, ||, bIsEmpty, ), {, if, (, aIsEmpty, &&, bIsEmpty, ), {, return]
[., isEmptyType, (, ), ;, if, (, aIsEmpty, ||, bIsEmpty, ), {, if, (, aIsEmpty, &&, bIsEmpty, ), {, return]
[||, bIsEmpty, ), {, if, (, aIsEmpty, &&, bIsEmpty, ), {, return, TernaryValue, ., TRUE, ;, }, else, {, return]
[aIsEmpty, &&, bIsEmpty, ), {, return, TernaryValue, ., TRUE, ;, }, else, {, return, UNKNOWN, ;, }, }, if, (]
[aIsEmpty, &&, bIsEmpty, ), {, return, TernaryValue, ., TRUE, ;, }, else, {, return, UNKNOWN, ;, }, }, if, (]
[aIsEmpty, &&, bIsEmpty, ), {, return, TernaryValue, ., TRUE, ;, }, else, {, return, UNKNOWN, ;, }, }, if, (]
[TernaryValue, ., TRUE, ;, }, else, {, return, UNKNOWN, ;, }, }, if, (, aType, ., isFunctionType, (, ), ||]
[TernaryValue, ., TRUE, ;, }, else, {, return, UNKNOWN, ;, }, }, if, (, aType, ., isFunctionType, (, ), ||]
[}, }, if, (, aType, ., isFunctionType, (, ), ||, bType, ., isFunctionType, (, ), ), {, JSType, otherType, =]
[}, }, if, (, aType, ., isFunctionType, (, ), ||, bType, ., isFunctionType, (, ), ), {, JSType, otherType, =]
[}, }, if, (, aType, ., isFunctionType, (, ), ||, bType, ., isFunctionType, (, ), ), {, JSType, otherType, =]
[isFunctionType, (, ), ||, bType, ., isFunctionType, (, ), ), {, JSType, otherType, =, aType, ., isFunctionType, (, ), ?]
[), ||, bType, ., isFunctionType, (, ), ), {, JSType, otherType, =, aType, ., isFunctionType, (, ), ?, bType, :]
[(, ), ), {, JSType, otherType, =, aType, ., isFunctionType, (, ), ?, bType, :, aType, ;, JSType, meet, =]
[(, ), ), {, JSType, otherType, =, aType, ., isFunctionType, (, ), ?, bType, :, aType, ;, JSType, meet, =]
[JSType, otherType, =, aType, ., isFunctionType, (, ), ?, bType, :, aType, ;, JSType, meet, =, otherType, ., getGreatestSubtype, (]
[=, aType, ., isFunctionType, (, ), ?, bType, :, aType, ;, JSType, meet, =, otherType, ., getGreatestSubtype, (, getNativeType, (]
[=, aType, ., isFunctionType, (, ), ?, bType, :, aType, ;, JSType, meet, =, otherType, ., getGreatestSubtype, (, getNativeType, (]
[:, aType, ;, JSType, meet, =, otherType, ., getGreatestSubtype, (, getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ;, if, (]
[:, aType, ;, JSType, meet, =, otherType, ., getGreatestSubtype, (, getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ;, if, (]
[:, aType, ;, JSType, meet, =, otherType, ., getGreatestSubtype, (, getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ;, if, (]
[otherType, ., getGreatestSubtype, (, getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ;, if, (, meet, ., isNoType, (, ), ||]
[otherType, ., getGreatestSubtype, (, getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ;, if, (, meet, ., isNoType, (, ), ||]
[OBJECT_TYPE, ), ), ;, if, (, meet, ., isNoType, (, ), ||, meet, ., isNoObjectType, (, ), ), {, return]
[OBJECT_TYPE, ), ), ;, if, (, meet, ., isNoType, (, ), ||, meet, ., isNoObjectType, (, ), ), {, return]
[isNoType, (, ), ||, meet, ., isNoObjectType, (, ), ), {, return, TernaryValue, ., FALSE, ;, }, else, {, return]
[isNoType, (, ), ||, meet, ., isNoObjectType, (, ), ), {, return, TernaryValue, ., FALSE, ;, }, else, {, return]
[), ), {, return, TernaryValue, ., FALSE, ;, }, else, {, return, TernaryValue, ., UNKNOWN, ;, }, }, if, (]
[), ), {, return, TernaryValue, ., FALSE, ;, }, else, {, return, TernaryValue, ., UNKNOWN, ;, }, }, if, (]
[), ), {, return, TernaryValue, ., FALSE, ;, }, else, {, return, TernaryValue, ., UNKNOWN, ;, }, }, if, (]
[FALSE, ;, }, else, {, return, TernaryValue, ., UNKNOWN, ;, }, }, if, (, bType, ., isEnumElementType, (, ), ||]
[FALSE, ;, }, else, {, return, TernaryValue, ., UNKNOWN, ;, }, }, if, (, bType, ., isEnumElementType, (, ), ||]
[UNKNOWN, ;, }, }, if, (, bType, ., isEnumElementType, (, ), ||, bType, ., isUnionType, (, ), ), {, return]
[UNKNOWN, ;, }, }, if, (, bType, ., isEnumElementType, (, ), ||, bType, ., isUnionType, (, ), ), {, return]
[if, (, bType, ., isEnumElementType, (, ), ||, bType, ., isUnionType, (, ), ), {, return, bType, ., testForEquality, (]
[(, ), ||, bType, ., isUnionType, (, ), ), {, return, bType, ., testForEquality, (, aType, ), ;, }, return]
[(, aType, ), ;, }, return, null, ;, }, public, final, boolean, canTestForShallowEqualityWith, (, JSType, that, ), {, if, (]
[(, aType, ), ;, }, return, null, ;, }, public, final, boolean, canTestForShallowEqualityWith, (, JSType, that, ), {, if, (]
[}, return, null, ;, }, public, final, boolean, canTestForShallowEqualityWith, (, JSType, that, ), {, if, (, isEmptyType, (, ), ||]
[}, return, null, ;, }, public, final, boolean, canTestForShallowEqualityWith, (, JSType, that, ), {, if, (, isEmptyType, (, ), ||]
[canTestForShallowEqualityWith, (, JSType, that, ), {, if, (, isEmptyType, (, ), ||, that, ., isEmptyType, (, ), ), {, return]
[canTestForShallowEqualityWith, (, JSType, that, ), {, if, (, isEmptyType, (, ), ||, that, ., isEmptyType, (, ), ), {, return]
[JSType, that, ), {, if, (, isEmptyType, (, ), ||, that, ., isEmptyType, (, ), ), {, return, isSubtype, (]
[{, if, (, isEmptyType, (, ), ||, that, ., isEmptyType, (, ), ), {, return, isSubtype, (, that, ), ||]
[{, if, (, isEmptyType, (, ), ||, that, ., isEmptyType, (, ), ), {, return, isSubtype, (, that, ), ||]
[(, ), ||, that, ., isEmptyType, (, ), ), {, return, isSubtype, (, that, ), ||, that, ., isSubtype, (]
[), ), {, return, isSubtype, (, that, ), ||, that, ., isSubtype, (, this, ), ;, }, JSType, inf, =]
[{, return, isSubtype, (, that, ), ||, that, ., isSubtype, (, this, ), ;, }, JSType, inf, =, getGreatestSubtype, (]
[that, ), ||, that, ., isSubtype, (, this, ), ;, }, JSType, inf, =, getGreatestSubtype, (, that, ), ;, return]
[that, ), ||, that, ., isSubtype, (, this, ), ;, }, JSType, inf, =, getGreatestSubtype, (, that, ), ;, return]
[), ||, that, ., isSubtype, (, this, ), ;, }, JSType, inf, =, getGreatestSubtype, (, that, ), ;, return, !]
[), ||, that, ., isSubtype, (, this, ), ;, }, JSType, inf, =, getGreatestSubtype, (, that, ), ;, return, !]
[this, ), ;, }, JSType, inf, =, getGreatestSubtype, (, that, ), ;, return, !, inf, ., isEmptyType, (, ), ||]
[this, ), ;, }, JSType, inf, =, getGreatestSubtype, (, that, ), ;, return, !, inf, ., isEmptyType, (, ), ||]
[;, }, JSType, inf, =, getGreatestSubtype, (, that, ), ;, return, !, inf, ., isEmptyType, (, ), ||, inf, ==]
[;, }, JSType, inf, =, getGreatestSubtype, (, that, ), ;, return, !, inf, ., isEmptyType, (, ), ||, inf, ==]
[=, getGreatestSubtype, (, that, ), ;, return, !, inf, ., isEmptyType, (, ), ||, inf, ==, registry, ., getNativeType, (]
[=, getGreatestSubtype, (, that, ), ;, return, !, inf, ., isEmptyType, (, ), ||, inf, ==, registry, ., getNativeType, (]
[||, inf, ==, registry, ., getNativeType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ;, }, public, boolean, isNullable, (, ), {, return]
[==, registry, ., getNativeType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ;, }, public, boolean, isNullable, (, ), {, return, isSubtype, (]
[., getNativeType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ;, }, public, boolean, isNullable, (, ), {, return, isSubtype, (, getNativeType, (]
[., getNativeType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ;, }, public, boolean, isNullable, (, ), {, return, isSubtype, (, getNativeType, (]
[{, return, isSubtype, (, getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ), ;, }, public, JSType, collapseUnion, (, ), {, return]
[public, JSType, collapseUnion, (, ), {, return, this, ;, }, public, JSType, getLeastSupertype, (, JSType, that, ), {, if, (]
[public, JSType, collapseUnion, (, ), {, return, this, ;, }, public, JSType, getLeastSupertype, (, JSType, that, ), {, if, (]
[;, }, public, JSType, getLeastSupertype, (, JSType, that, ), {, if, (, that, ., isUnionType, (, ), ), {, return]
[;, }, public, JSType, getLeastSupertype, (, JSType, that, ), {, if, (, that, ., isUnionType, (, ), ), {, return]
[;, }, public, JSType, getLeastSupertype, (, JSType, that, ), {, if, (, that, ., isUnionType, (, ), ), {, return]
[), {, if, (, that, ., isUnionType, (, ), ), {, return, that, ., toMaybeUnionType, (, ), ., getLeastSupertype, (]
[., isUnionType, (, ), ), {, return, that, ., toMaybeUnionType, (, ), ., getLeastSupertype, (, this, ), ;, }, return]
[(, ), ), {, return, that, ., toMaybeUnionType, (, ), ., getLeastSupertype, (, this, ), ;, }, return, getLeastSupertype, (]
[), {, return, that, ., toMaybeUnionType, (, ), ., getLeastSupertype, (, this, ), ;, }, return, getLeastSupertype, (, this, ,]
[this, ,, that, ), ;, }, static, JSType, getLeastSupertype, (, JSType, thisType, ,, JSType, thatType, ), {, boolean, areEquivalent, =]
[this, ,, that, ), ;, }, static, JSType, getLeastSupertype, (, JSType, thisType, ,, JSType, thatType, ), {, boolean, areEquivalent, =]
[;, }, static, JSType, getLeastSupertype, (, JSType, thisType, ,, JSType, thatType, ), {, boolean, areEquivalent, =, thisType, ., isEquivalentTo, (]
[getLeastSupertype, (, JSType, thisType, ,, JSType, thatType, ), {, boolean, areEquivalent, =, thisType, ., isEquivalentTo, (, thatType, ), ;, return]
[getLeastSupertype, (, JSType, thisType, ,, JSType, thatType, ), {, boolean, areEquivalent, =, thisType, ., isEquivalentTo, (, thatType, ), ;, return]
[JSType, thisType, ,, JSType, thatType, ), {, boolean, areEquivalent, =, thisType, ., isEquivalentTo, (, thatType, ), ;, return, areEquivalent, ?]
[,, JSType, thatType, ), {, boolean, areEquivalent, =, thisType, ., isEquivalentTo, (, thatType, ), ;, return, areEquivalent, ?, thisType, :]
[thatType, ), {, boolean, areEquivalent, =, thisType, ., isEquivalentTo, (, thatType, ), ;, return, areEquivalent, ?, thisType, :, filterNoResolvedType, (]
[thatType, ), {, boolean, areEquivalent, =, thisType, ., isEquivalentTo, (, thatType, ), ;, return, areEquivalent, ?, thisType, :, filterNoResolvedType, (]
[thatType, ), {, boolean, areEquivalent, =, thisType, ., isEquivalentTo, (, thatType, ), ;, return, areEquivalent, ?, thisType, :, filterNoResolvedType, (]
[thisType, ., isEquivalentTo, (, thatType, ), ;, return, areEquivalent, ?, thisType, :, filterNoResolvedType, (, thisType, ., registry, ., createUnionType, (]
[isEquivalentTo, (, thatType, ), ;, return, areEquivalent, ?, thisType, :, filterNoResolvedType, (, thisType, ., registry, ., createUnionType, (, thisType, ,]
[registry, ., createUnionType, (, thisType, ,, thatType, ), ), ;, }, public, JSType, getGreatestSubtype, (, JSType, that, ), {, return]
[createUnionType, (, thisType, ,, thatType, ), ), ;, }, public, JSType, getGreatestSubtype, (, JSType, that, ), {, return, getGreatestSubtype, (]
[thisType, ,, thatType, ), ), ;, }, public, JSType, getGreatestSubtype, (, JSType, that, ), {, return, getGreatestSubtype, (, this, ,]
[(, this, ,, that, ), ;, }, static, JSType, getGreatestSubtype, (, JSType, thisType, ,, JSType, thatType, ), {, if, (]
[(, this, ,, that, ), ;, }, static, JSType, getGreatestSubtype, (, JSType, thisType, ,, JSType, thatType, ), {, if, (]
[(, this, ,, that, ), ;, }, static, JSType, getGreatestSubtype, (, JSType, thisType, ,, JSType, thatType, ), {, if, (]
[}, static, JSType, getGreatestSubtype, (, JSType, thisType, ,, JSType, thatType, ), {, if, (, thisType, ., isFunctionType, (, ), &&]
[}, static, JSType, getGreatestSubtype, (, JSType, thisType, ,, JSType, thatType, ), {, if, (, thisType, ., isFunctionType, (, ), &&]
[JSType, thatType, ), {, if, (, thisType, ., isFunctionType, (, ), &&, thatType, ., isFunctionType, (, ), ), {, return]
[JSType, thatType, ), {, if, (, thisType, ., isFunctionType, (, ), &&, thatType, ., isFunctionType, (, ), ), {, return]
[JSType, thatType, ), {, if, (, thisType, ., isFunctionType, (, ), &&, thatType, ., isFunctionType, (, ), ), {, return]
[isFunctionType, (, ), &&, thatType, ., isFunctionType, (, ), ), {, return, thisType, ., toMaybeFunctionType, (, ), ., supAndInfHelper, (]
[isFunctionType, (, ), &&, thatType, ., isFunctionType, (, ), ), {, return, thisType, ., toMaybeFunctionType, (, ), ., supAndInfHelper, (]
[isFunctionType, (, ), ), {, return, thisType, ., toMaybeFunctionType, (, ), ., supAndInfHelper, (, thatType, ., toMaybeFunctionType, (, ), ,]
[., toMaybeFunctionType, (, ), ., supAndInfHelper, (, thatType, ., toMaybeFunctionType, (, ), ,, false, ), ;, }, else, if, (]
[., toMaybeFunctionType, (, ), ., supAndInfHelper, (, thatType, ., toMaybeFunctionType, (, ), ,, false, ), ;, }, else, if, (]
[., supAndInfHelper, (, thatType, ., toMaybeFunctionType, (, ), ,, false, ), ;, }, else, if, (, thisType, ., isEquivalentTo, (]
[toMaybeFunctionType, (, ), ,, false, ), ;, }, else, if, (, thisType, ., isEquivalentTo, (, thatType, ), ), {, return]
[;, }, else, if, (, thisType, ., isEquivalentTo, (, thatType, ), ), {, return, thisType, ;, }, else, if, (]
[;, }, else, if, (, thisType, ., isEquivalentTo, (, thatType, ), ), {, return, thisType, ;, }, else, if, (]
[;, }, else, if, (, thisType, ., isEquivalentTo, (, thatType, ), ), {, return, thisType, ;, }, else, if, (]
[., isEquivalentTo, (, thatType, ), ), {, return, thisType, ;, }, else, if, (, thisType, ., isUnknownType, (, ), ||]
[., isEquivalentTo, (, thatType, ), ), {, return, thisType, ;, }, else, if, (, thisType, ., isUnknownType, (, ), ||]
[thisType, ;, }, else, if, (, thisType, ., isUnknownType, (, ), ||, thatType, ., isUnknownType, (, ), ), {, return]
[thisType, ;, }, else, if, (, thisType, ., isUnknownType, (, ), ||, thatType, ., isUnknownType, (, ), ), {, return]
[thisType, ;, }, else, if, (, thisType, ., isUnknownType, (, ), ||, thatType, ., isUnknownType, (, ), ), {, return]
[if, (, thisType, ., isUnknownType, (, ), ||, thatType, ., isUnknownType, (, ), ), {, return, thisType, ., isEquivalentTo, (]
[., isUnknownType, (, ), ||, thatType, ., isUnknownType, (, ), ), {, return, thisType, ., isEquivalentTo, (, thatType, ), ?]
[(, ), ||, thatType, ., isUnknownType, (, ), ), {, return, thisType, ., isEquivalentTo, (, thatType, ), ?, thisType, :]
[(, ), ||, thatType, ., isUnknownType, (, ), ), {, return, thisType, ., isEquivalentTo, (, thatType, ), ?, thisType, :]
[., isUnknownType, (, ), ), {, return, thisType, ., isEquivalentTo, (, thatType, ), ?, thisType, :, thisType, ., getNativeType, (]
[., isUnknownType, (, ), ), {, return, thisType, ., isEquivalentTo, (, thatType, ), ?, thisType, :, thisType, ., getNativeType, (]
[isEquivalentTo, (, thatType, ), ?, thisType, :, thisType, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, else, if, (]
[isEquivalentTo, (, thatType, ), ?, thisType, :, thisType, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, else, if, (]
[., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, else, if, (, thisType, ., isUnionType, (, ), ), {, return]
[., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, else, if, (, thisType, ., isUnionType, (, ), ), {, return]
[., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, else, if, (, thisType, ., isUnionType, (, ), ), {, return]
[}, else, if, (, thisType, ., isUnionType, (, ), ), {, return, thisType, ., toMaybeUnionType, (, ), ., meet, (]
[(, ), ), {, return, thisType, ., toMaybeUnionType, (, ), ., meet, (, thatType, ), ;, }, else, if, (]
[(, ), ), {, return, thisType, ., toMaybeUnionType, (, ), ., meet, (, thatType, ), ;, }, else, if, (]
[(, ), ., meet, (, thatType, ), ;, }, else, if, (, thatType, ., isUnionType, (, ), ), {, return]
[(, ), ., meet, (, thatType, ), ;, }, else, if, (, thatType, ., isUnionType, (, ), ), {, return]
[(, ), ., meet, (, thatType, ), ;, }, else, if, (, thatType, ., isUnionType, (, ), ), {, return]
[}, else, if, (, thatType, ., isUnionType, (, ), ), {, return, thatType, ., toMaybeUnionType, (, ), ., meet, (]
[(, ), ), {, return, thatType, ., toMaybeUnionType, (, ), ., meet, (, thisType, ), ;, }, else, if, (]
[(, ), ), {, return, thatType, ., toMaybeUnionType, (, ), ., meet, (, thisType, ), ;, }, else, if, (]
[(, ), ., meet, (, thisType, ), ;, }, else, if, (, thisType, ., isParameterizedType, (, ), ), {, return]
[(, ), ., meet, (, thisType, ), ;, }, else, if, (, thisType, ., isParameterizedType, (, ), ), {, return]
[(, ), ., meet, (, thisType, ), ;, }, else, if, (, thisType, ., isParameterizedType, (, ), ), {, return]
[}, else, if, (, thisType, ., isParameterizedType, (, ), ), {, return, thisType, ., toMaybeParameterizedType, (, ), ., getGreatestSubtypeHelper, (]
[(, ), ), {, return, thisType, ., toMaybeParameterizedType, (, ), ., getGreatestSubtypeHelper, (, thatType, ), ;, }, else, if, (]
[(, ), ), {, return, thisType, ., toMaybeParameterizedType, (, ), ., getGreatestSubtypeHelper, (, thatType, ), ;, }, else, if, (]
[(, ), ., getGreatestSubtypeHelper, (, thatType, ), ;, }, else, if, (, thatType, ., isParameterizedType, (, ), ), {, return]
[(, ), ., getGreatestSubtypeHelper, (, thatType, ), ;, }, else, if, (, thatType, ., isParameterizedType, (, ), ), {, return]
[(, ), ., getGreatestSubtypeHelper, (, thatType, ), ;, }, else, if, (, thatType, ., isParameterizedType, (, ), ), {, return]
[}, else, if, (, thatType, ., isParameterizedType, (, ), ), {, return, thatType, ., toMaybeParameterizedType, (, ), ., getGreatestSubtypeHelper, (]
[(, ), ), {, return, thatType, ., toMaybeParameterizedType, (, ), ., getGreatestSubtypeHelper, (, thisType, ), ;, }, else, if, (]
[(, ), ), {, return, thatType, ., toMaybeParameterizedType, (, ), ., getGreatestSubtypeHelper, (, thisType, ), ;, }, else, if, (]
[return, thatType, ., toMaybeParameterizedType, (, ), ., getGreatestSubtypeHelper, (, thisType, ), ;, }, else, if, (, thisType, ., isSubtype, (]
[), ., getGreatestSubtypeHelper, (, thisType, ), ;, }, else, if, (, thisType, ., isSubtype, (, thatType, ), ), {, return]
[getGreatestSubtypeHelper, (, thisType, ), ;, }, else, if, (, thisType, ., isSubtype, (, thatType, ), ), {, return, filterNoResolvedType, (]
[if, (, thisType, ., isSubtype, (, thatType, ), ), {, return, filterNoResolvedType, (, thisType, ), ;, }, else, if, (]
[if, (, thisType, ., isSubtype, (, thatType, ), ), {, return, filterNoResolvedType, (, thisType, ), ;, }, else, if, (]
[isSubtype, (, thatType, ), ), {, return, filterNoResolvedType, (, thisType, ), ;, }, else, if, (, thatType, ., isSubtype, (]
[{, return, filterNoResolvedType, (, thisType, ), ;, }, else, if, (, thatType, ., isSubtype, (, thisType, ), ), {, return]
[filterNoResolvedType, (, thisType, ), ;, }, else, if, (, thatType, ., isSubtype, (, thisType, ), ), {, return, filterNoResolvedType, (]
[if, (, thatType, ., isSubtype, (, thisType, ), ), {, return, filterNoResolvedType, (, thatType, ), ;, }, else, if, (]
[if, (, thatType, ., isSubtype, (, thisType, ), ), {, return, filterNoResolvedType, (, thatType, ), ;, }, else, if, (]
[), {, return, filterNoResolvedType, (, thatType, ), ;, }, else, if, (, thisType, ., isRecordType, (, ), ), {, return]
[), {, return, filterNoResolvedType, (, thatType, ), ;, }, else, if, (, thisType, ., isRecordType, (, ), ), {, return]
[), {, return, filterNoResolvedType, (, thatType, ), ;, }, else, if, (, thisType, ., isRecordType, (, ), ), {, return]
[}, else, if, (, thisType, ., isRecordType, (, ), ), {, return, thisType, ., toMaybeRecordType, (, ), ., getGreatestSubtypeHelper, (]
[(, ), ), {, return, thisType, ., toMaybeRecordType, (, ), ., getGreatestSubtypeHelper, (, thatType, ), ;, }, else, if, (]
[(, ), ), {, return, thisType, ., toMaybeRecordType, (, ), ., getGreatestSubtypeHelper, (, thatType, ), ;, }, else, if, (]
[(, ), ., getGreatestSubtypeHelper, (, thatType, ), ;, }, else, if, (, thatType, ., isRecordType, (, ), ), {, return]
[(, ), ., getGreatestSubtypeHelper, (, thatType, ), ;, }, else, if, (, thatType, ., isRecordType, (, ), ), {, return]
[(, ), ., getGreatestSubtypeHelper, (, thatType, ), ;, }, else, if, (, thatType, ., isRecordType, (, ), ), {, return]
[}, else, if, (, thatType, ., isRecordType, (, ), ), {, return, thatType, ., toMaybeRecordType, (, ), ., getGreatestSubtypeHelper, (]
[isRecordType, (, ), ), {, return, thatType, ., toMaybeRecordType, (, ), ., getGreatestSubtypeHelper, (, thisType, ), ;, }, if, (]
[isRecordType, (, ), ), {, return, thatType, ., toMaybeRecordType, (, ), ., getGreatestSubtypeHelper, (, thisType, ), ;, }, if, (]
[), ., getGreatestSubtypeHelper, (, thisType, ), ;, }, if, (, thisType, ., isEnumElementType, (, ), ), {, JSType, inf, =]
[), ., getGreatestSubtypeHelper, (, thisType, ), ;, }, if, (, thisType, ., isEnumElementType, (, ), ), {, JSType, inf, =]
[), ., getGreatestSubtypeHelper, (, thisType, ), ;, }, if, (, thisType, ., isEnumElementType, (, ), ), {, JSType, inf, =]
[if, (, thisType, ., isEnumElementType, (, ), ), {, JSType, inf, =, thisType, ., toMaybeEnumElementType, (, ), ., meet, (]
[(, ), ), {, JSType, inf, =, thisType, ., toMaybeEnumElementType, (, ), ., meet, (, thatType, ), ;, if, (]
[(, ), ), {, JSType, inf, =, thisType, ., toMaybeEnumElementType, (, ), ., meet, (, thatType, ), ;, if, (]
[), {, JSType, inf, =, thisType, ., toMaybeEnumElementType, (, ), ., meet, (, thatType, ), ;, if, (, inf, !=]
[=, thisType, ., toMaybeEnumElementType, (, ), ., meet, (, thatType, ), ;, if, (, inf, !=, null, ), {, return]
[meet, (, thatType, ), ;, if, (, inf, !=, null, ), {, return, inf, ;, }, }, else, if, (]
[meet, (, thatType, ), ;, if, (, inf, !=, null, ), {, return, inf, ;, }, }, else, if, (]
[), {, return, inf, ;, }, }, else, if, (, thatType, ., isEnumElementType, (, ), ), {, JSType, inf, =]
[), {, return, inf, ;, }, }, else, if, (, thatType, ., isEnumElementType, (, ), ), {, JSType, inf, =]
[), {, return, inf, ;, }, }, else, if, (, thatType, ., isEnumElementType, (, ), ), {, JSType, inf, =]
[if, (, thatType, ., isEnumElementType, (, ), ), {, JSType, inf, =, thatType, ., toMaybeEnumElementType, (, ), ., meet, (]
[(, ), ), {, JSType, inf, =, thatType, ., toMaybeEnumElementType, (, ), ., meet, (, thisType, ), ;, if, (]
[(, ), ), {, JSType, inf, =, thatType, ., toMaybeEnumElementType, (, ), ., meet, (, thisType, ), ;, if, (]
[), {, JSType, inf, =, thatType, ., toMaybeEnumElementType, (, ), ., meet, (, thisType, ), ;, if, (, inf, !=]
[=, thatType, ., toMaybeEnumElementType, (, ), ., meet, (, thisType, ), ;, if, (, inf, !=, null, ), {, return]
[., meet, (, thisType, ), ;, if, (, inf, !=, null, ), {, return, inf, ;, }, }, if, (]
[., meet, (, thisType, ), ;, if, (, inf, !=, null, ), {, return, inf, ;, }, }, if, (]
[., meet, (, thisType, ), ;, if, (, inf, !=, null, ), {, return, inf, ;, }, }, if, (]
[if, (, inf, !=, null, ), {, return, inf, ;, }, }, if, (, thisType, ., isObject, (, ), &&]
[if, (, inf, !=, null, ), {, return, inf, ;, }, }, if, (, thisType, ., isObject, (, ), &&]
[inf, ;, }, }, if, (, thisType, ., isObject, (, ), &&, thatType, ., isObject, (, ), ), {, return]
[inf, ;, }, }, if, (, thisType, ., isObject, (, ), &&, thatType, ., isObject, (, ), ), {, return]
[if, (, thisType, ., isObject, (, ), &&, thatType, ., isObject, (, ), ), {, return, thisType, ., getNativeType, (]
[if, (, thisType, ., isObject, (, ), &&, thatType, ., isObject, (, ), ), {, return, thisType, ., getNativeType, (]
[&&, thatType, ., isObject, (, ), ), {, return, thisType, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, }, return]
[&&, thatType, ., isObject, (, ), ), {, return, thisType, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, }, return]
[(, ), ), {, return, thisType, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, }, return, thisType, ., getNativeType, (]
[(, ), ), {, return, thisType, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, }, return, thisType, ., getNativeType, (]
[thisType, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, }, static, JSType, filterNoResolvedType, (, JSType, type, ), {, if, (]
[thisType, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, }, static, JSType, filterNoResolvedType, (, JSType, type, ), {, if, (]
[;, }, static, JSType, filterNoResolvedType, (, JSType, type, ), {, if, (, type, ., isNoResolvedType, (, ), ), {, return]
[;, }, static, JSType, filterNoResolvedType, (, JSType, type, ), {, if, (, type, ., isNoResolvedType, (, ), ), {, return]
[filterNoResolvedType, (, JSType, type, ), {, if, (, type, ., isNoResolvedType, (, ), ), {, return, type, ., getNativeType, (]
[filterNoResolvedType, (, JSType, type, ), {, if, (, type, ., isNoResolvedType, (, ), ), {, return, type, ., getNativeType, (]
[., isNoResolvedType, (, ), ), {, return, type, ., getNativeType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ;, }, else, if, (]
[., isNoResolvedType, (, ), ), {, return, type, ., getNativeType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ;, }, else, if, (]
[(, JSTypeNative, ., NO_RESOLVED_TYPE, ), ;, }, else, if, (, type, ., isUnionType, (, ), ), {, UnionType, unionType, =]
[(, JSTypeNative, ., NO_RESOLVED_TYPE, ), ;, }, else, if, (, type, ., isUnionType, (, ), ), {, UnionType, unionType, =]
[(, type, ., isUnionType, (, ), ), {, UnionType, unionType, =, type, ., toMaybeUnionType, (, ), ;, boolean, needsFiltering, =]
[{, UnionType, unionType, =, type, ., toMaybeUnionType, (, ), ;, boolean, needsFiltering, =, false, ;, for, (, JSType, alt, :]
[{, UnionType, unionType, =, type, ., toMaybeUnionType, (, ), ;, boolean, needsFiltering, =, false, ;, for, (, JSType, alt, :]
[;, boolean, needsFiltering, =, false, ;, for, (, JSType, alt, :, unionType, ., getAlternates, (, ), ), {, if, (]
[;, boolean, needsFiltering, =, false, ;, for, (, JSType, alt, :, unionType, ., getAlternates, (, ), ), {, if, (]
[(, JSType, alt, :, unionType, ., getAlternates, (, ), ), {, if, (, alt, ., isNoResolvedType, (, ), ), {]
[alt, :, unionType, ., getAlternates, (, ), ), {, if, (, alt, ., isNoResolvedType, (, ), ), {, needsFiltering, =]
[{, if, (, alt, ., isNoResolvedType, (, ), ), {, needsFiltering, =, true, ;, break, ;, }, }, if, (]
[(, ), ), {, needsFiltering, =, true, ;, break, ;, }, }, if, (, needsFiltering, ), {, UnionTypeBuilder, builder, =]
[{, needsFiltering, =, true, ;, break, ;, }, }, if, (, needsFiltering, ), {, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (]
[{, needsFiltering, =, true, ;, break, ;, }, }, if, (, needsFiltering, ), {, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (]
[break, ;, }, }, if, (, needsFiltering, ), {, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (, type, ., registry, ), ;]
[break, ;, }, }, if, (, needsFiltering, ), {, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (, type, ., registry, ), ;]
[if, (, needsFiltering, ), {, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (, type, ., registry, ), ;, builder, ., addAlternate, (]
[if, (, needsFiltering, ), {, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (, type, ., registry, ), ;, builder, ., addAlternate, (]
[{, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (, type, ., registry, ), ;, builder, ., addAlternate, (, type, ., getNativeType, (]
[{, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (, type, ., registry, ), ;, builder, ., addAlternate, (, type, ., getNativeType, (]
[;, builder, ., addAlternate, (, type, ., getNativeType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ), ;, for, (, JSType, alt, :]
[;, builder, ., addAlternate, (, type, ., getNativeType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ), ;, for, (, JSType, alt, :]
[JSTypeNative, ., NO_RESOLVED_TYPE, ), ), ;, for, (, JSType, alt, :, unionType, ., getAlternates, (, ), ), {, if, (]
[., NO_RESOLVED_TYPE, ), ), ;, for, (, JSType, alt, :, unionType, ., getAlternates, (, ), ), {, if, (, !]
[., NO_RESOLVED_TYPE, ), ), ;, for, (, JSType, alt, :, unionType, ., getAlternates, (, ), ), {, if, (, !]
[JSType, alt, :, unionType, ., getAlternates, (, ), ), {, if, (, !, alt, ., isNoResolvedType, (, ), ), {]
[JSType, alt, :, unionType, ., getAlternates, (, ), ), {, if, (, !, alt, ., isNoResolvedType, (, ), ), {]
[., getAlternates, (, ), ), {, if, (, !, alt, ., isNoResolvedType, (, ), ), {, builder, ., addAlternate, (]
[if, (, !, alt, ., isNoResolvedType, (, ), ), {, builder, ., addAlternate, (, alt, ), ;, }, }, return]
[if, (, !, alt, ., isNoResolvedType, (, ), ), {, builder, ., addAlternate, (, alt, ), ;, }, }, return]
[{, builder, ., addAlternate, (, alt, ), ;, }, }, return, builder, ., build, (, ), ;, }, }, return]
[build, (, ), ;, }, }, return, type, ;, }, public, JSType, getRestrictedTypeGivenToBooleanOutcome, (, boolean, outcome, ), {, if, (]
[build, (, ), ;, }, }, return, type, ;, }, public, JSType, getRestrictedTypeGivenToBooleanOutcome, (, boolean, outcome, ), {, if, (]
[), ;, }, }, return, type, ;, }, public, JSType, getRestrictedTypeGivenToBooleanOutcome, (, boolean, outcome, ), {, if, (, outcome, &&]
[), ;, }, }, return, type, ;, }, public, JSType, getRestrictedTypeGivenToBooleanOutcome, (, boolean, outcome, ), {, if, (, outcome, &&]
[}, }, return, type, ;, }, public, JSType, getRestrictedTypeGivenToBooleanOutcome, (, boolean, outcome, ), {, if, (, outcome, &&, this, ==]
[return, type, ;, }, public, JSType, getRestrictedTypeGivenToBooleanOutcome, (, boolean, outcome, ), {, if, (, outcome, &&, this, ==, getNativeType, (]
[return, type, ;, }, public, JSType, getRestrictedTypeGivenToBooleanOutcome, (, boolean, outcome, ), {, if, (, outcome, &&, this, ==, getNativeType, (]
[(, boolean, outcome, ), {, if, (, outcome, &&, this, ==, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), {, return]
[outcome, ), {, if, (, outcome, &&, this, ==, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), {, return, getNativeType, (]
[outcome, ), {, if, (, outcome, &&, this, ==, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), {, return, getNativeType, (]
[getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), {, return, getNativeType, (, JSTypeNative, ., CHECKED_UNKNOWN_TYPE, ), ;, }, BooleanLiteralSet, literals, =]
[), {, return, getNativeType, (, JSTypeNative, ., CHECKED_UNKNOWN_TYPE, ), ;, }, BooleanLiteralSet, literals, =, getPossibleToBooleanOutcomes, (, ), ;, if, (]
[), {, return, getNativeType, (, JSTypeNative, ., CHECKED_UNKNOWN_TYPE, ), ;, }, BooleanLiteralSet, literals, =, getPossibleToBooleanOutcomes, (, ), ;, if, (]
[(, JSTypeNative, ., CHECKED_UNKNOWN_TYPE, ), ;, }, BooleanLiteralSet, literals, =, getPossibleToBooleanOutcomes, (, ), ;, if, (, literals, ., contains, (]
[;, }, BooleanLiteralSet, literals, =, getPossibleToBooleanOutcomes, (, ), ;, if, (, literals, ., contains, (, outcome, ), ), {, return]
[(, ), ;, if, (, literals, ., contains, (, outcome, ), ), {, return, this, ;, }, else, {, return]
[;, if, (, literals, ., contains, (, outcome, ), ), {, return, this, ;, }, else, {, return, getNativeType, (]
[;, if, (, literals, ., contains, (, outcome, ), ), {, return, this, ;, }, else, {, return, getNativeType, (]
[;, }, }, public, abstract, BooleanLiteralSet, getPossibleToBooleanOutcomes, (, ), ;, public, TypePair, getTypesUnderEquality, (, JSType, that, ), {, if, (]
[;, }, }, public, abstract, BooleanLiteralSet, getPossibleToBooleanOutcomes, (, ), ;, public, TypePair, getTypesUnderEquality, (, JSType, that, ), {, if, (]
[public, TypePair, getTypesUnderEquality, (, JSType, that, ), {, if, (, that, ., isUnionType, (, ), ), {, TypePair, p, =]
[public, TypePair, getTypesUnderEquality, (, JSType, that, ), {, if, (, that, ., isUnionType, (, ), ), {, TypePair, p, =]
[public, TypePair, getTypesUnderEquality, (, JSType, that, ), {, if, (, that, ., isUnionType, (, ), ), {, TypePair, p, =]
[if, (, that, ., isUnionType, (, ), ), {, TypePair, p, =, that, ., toMaybeUnionType, (, ), ., getTypesUnderEquality, (]
[isUnionType, (, ), ), {, TypePair, p, =, that, ., toMaybeUnionType, (, ), ., getTypesUnderEquality, (, this, ), ;, return]
[), {, TypePair, p, =, that, ., toMaybeUnionType, (, ), ., getTypesUnderEquality, (, this, ), ;, return, new, TypePair, (]
[), {, TypePair, p, =, that, ., toMaybeUnionType, (, ), ., getTypesUnderEquality, (, this, ), ;, return, new, TypePair, (]
[=, that, ., toMaybeUnionType, (, ), ., getTypesUnderEquality, (, this, ), ;, return, new, TypePair, (, p, ., typeB, ,]
[=, that, ., toMaybeUnionType, (, ), ., getTypesUnderEquality, (, this, ), ;, return, new, TypePair, (, p, ., typeB, ,]
[(, this, ), ;, return, new, TypePair, (, p, ., typeB, ,, p, ., typeA, ), ;, }, switch, (]
[), ;, return, new, TypePair, (, p, ., typeB, ,, p, ., typeA, ), ;, }, switch, (, testForEquality, (]
[(, p, ., typeB, ,, p, ., typeA, ), ;, }, switch, (, testForEquality, (, that, ), ), {, case]
[typeB, ,, p, ., typeA, ), ;, }, switch, (, testForEquality, (, that, ), ), {, case, FALSE, :, return]
[., typeA, ), ;, }, switch, (, testForEquality, (, that, ), ), {, case, FALSE, :, return, new, TypePair, (]
[), ;, }, switch, (, testForEquality, (, that, ), ), {, case, FALSE, :, return, new, TypePair, (, null, ,]
[(, testForEquality, (, that, ), ), {, case, FALSE, :, return, new, TypePair, (, null, ,, null, ), ;, case]
[that, ), ), {, case, FALSE, :, return, new, TypePair, (, null, ,, null, ), ;, case, TRUE, :, case]
[{, case, FALSE, :, return, new, TypePair, (, null, ,, null, ), ;, case, TRUE, :, case, UNKNOWN, :, return]
[:, return, new, TypePair, (, null, ,, null, ), ;, case, TRUE, :, case, UNKNOWN, :, return, new, TypePair, (]
[new, TypePair, (, null, ,, null, ), ;, case, TRUE, :, case, UNKNOWN, :, return, new, TypePair, (, this, ,]
[null, ), ;, case, TRUE, :, case, UNKNOWN, :, return, new, TypePair, (, this, ,, that, ), ;, }, throw]
[), ;, }, throw, new, IllegalStateException, (, ), ;, }, public, TypePair, getTypesUnderInequality, (, JSType, that, ), {, if, (]
[), ;, }, throw, new, IllegalStateException, (, ), ;, }, public, TypePair, getTypesUnderInequality, (, JSType, that, ), {, if, (]
[public, TypePair, getTypesUnderInequality, (, JSType, that, ), {, if, (, that, ., isUnionType, (, ), ), {, TypePair, p, =]
[public, TypePair, getTypesUnderInequality, (, JSType, that, ), {, if, (, that, ., isUnionType, (, ), ), {, TypePair, p, =]
[public, TypePair, getTypesUnderInequality, (, JSType, that, ), {, if, (, that, ., isUnionType, (, ), ), {, TypePair, p, =]
[if, (, that, ., isUnionType, (, ), ), {, TypePair, p, =, that, ., toMaybeUnionType, (, ), ., getTypesUnderInequality, (]
[isUnionType, (, ), ), {, TypePair, p, =, that, ., toMaybeUnionType, (, ), ., getTypesUnderInequality, (, this, ), ;, return]
[), {, TypePair, p, =, that, ., toMaybeUnionType, (, ), ., getTypesUnderInequality, (, this, ), ;, return, new, TypePair, (]
[), {, TypePair, p, =, that, ., toMaybeUnionType, (, ), ., getTypesUnderInequality, (, this, ), ;, return, new, TypePair, (]
[=, that, ., toMaybeUnionType, (, ), ., getTypesUnderInequality, (, this, ), ;, return, new, TypePair, (, p, ., typeB, ,]
[=, that, ., toMaybeUnionType, (, ), ., getTypesUnderInequality, (, this, ), ;, return, new, TypePair, (, p, ., typeB, ,]
[(, this, ), ;, return, new, TypePair, (, p, ., typeB, ,, p, ., typeA, ), ;, }, switch, (]
[), ;, return, new, TypePair, (, p, ., typeB, ,, p, ., typeA, ), ;, }, switch, (, testForEquality, (]
[(, p, ., typeB, ,, p, ., typeA, ), ;, }, switch, (, testForEquality, (, that, ), ), {, case]
[p, ., typeA, ), ;, }, switch, (, testForEquality, (, that, ), ), {, case, TRUE, :, JSType, noType, =]
[typeA, ), ;, }, switch, (, testForEquality, (, that, ), ), {, case, TRUE, :, JSType, noType, =, getNativeType, (]
[typeA, ), ;, }, switch, (, testForEquality, (, that, ), ), {, case, TRUE, :, JSType, noType, =, getNativeType, (]
[testForEquality, (, that, ), ), {, case, TRUE, :, JSType, noType, =, getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, return]
[), ), {, case, TRUE, :, JSType, noType, =, getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, return, new, TypePair, (]
[{, case, TRUE, :, JSType, noType, =, getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, return, new, TypePair, (, noType, ,]
[JSType, noType, =, getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, return, new, TypePair, (, noType, ,, noType, ), ;, case]
[getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, return, new, TypePair, (, noType, ,, noType, ), ;, case, FALSE, :, case]
[., NO_TYPE, ), ;, return, new, TypePair, (, noType, ,, noType, ), ;, case, FALSE, :, case, UNKNOWN, :, return]
[;, return, new, TypePair, (, noType, ,, noType, ), ;, case, FALSE, :, case, UNKNOWN, :, return, new, TypePair, (]
[new, TypePair, (, noType, ,, noType, ), ;, case, FALSE, :, case, UNKNOWN, :, return, new, TypePair, (, this, ,]
[noType, ), ;, case, FALSE, :, case, UNKNOWN, :, return, new, TypePair, (, this, ,, that, ), ;, }, throw]
[;, }, throw, new, IllegalStateException, (, ), ;, }, public, TypePair, getTypesUnderShallowEquality, (, JSType, that, ), {, JSType, commonType, =]
[throw, new, IllegalStateException, (, ), ;, }, public, TypePair, getTypesUnderShallowEquality, (, JSType, that, ), {, JSType, commonType, =, getGreatestSubtype, (]
[), ;, }, public, TypePair, getTypesUnderShallowEquality, (, JSType, that, ), {, JSType, commonType, =, getGreatestSubtype, (, that, ), ;, return]
[public, TypePair, getTypesUnderShallowEquality, (, JSType, that, ), {, JSType, commonType, =, getGreatestSubtype, (, that, ), ;, return, new, TypePair, (]
[getTypesUnderShallowEquality, (, JSType, that, ), {, JSType, commonType, =, getGreatestSubtype, (, that, ), ;, return, new, TypePair, (, commonType, ,]
[return, new, TypePair, (, commonType, ,, commonType, ), ;, }, public, TypePair, getTypesUnderShallowInequality, (, JSType, that, ), {, if, (]
[return, new, TypePair, (, commonType, ,, commonType, ), ;, }, public, TypePair, getTypesUnderShallowInequality, (, JSType, that, ), {, if, (]
[public, TypePair, getTypesUnderShallowInequality, (, JSType, that, ), {, if, (, that, ., isUnionType, (, ), ), {, TypePair, p, =]
[public, TypePair, getTypesUnderShallowInequality, (, JSType, that, ), {, if, (, that, ., isUnionType, (, ), ), {, TypePair, p, =]
[public, TypePair, getTypesUnderShallowInequality, (, JSType, that, ), {, if, (, that, ., isUnionType, (, ), ), {, TypePair, p, =]
[if, (, that, ., isUnionType, (, ), ), {, TypePair, p, =, that, ., toMaybeUnionType, (, ), ., getTypesUnderShallowInequality, (]
[isUnionType, (, ), ), {, TypePair, p, =, that, ., toMaybeUnionType, (, ), ., getTypesUnderShallowInequality, (, this, ), ;, return]
[), {, TypePair, p, =, that, ., toMaybeUnionType, (, ), ., getTypesUnderShallowInequality, (, this, ), ;, return, new, TypePair, (]
[), {, TypePair, p, =, that, ., toMaybeUnionType, (, ), ., getTypesUnderShallowInequality, (, this, ), ;, return, new, TypePair, (]
[=, that, ., toMaybeUnionType, (, ), ., getTypesUnderShallowInequality, (, this, ), ;, return, new, TypePair, (, p, ., typeB, ,]
[=, that, ., toMaybeUnionType, (, ), ., getTypesUnderShallowInequality, (, this, ), ;, return, new, TypePair, (, p, ., typeB, ,]
[(, this, ), ;, return, new, TypePair, (, p, ., typeB, ,, p, ., typeA, ), ;, }, if, (]
[(, this, ), ;, return, new, TypePair, (, p, ., typeB, ,, p, ., typeA, ), ;, }, if, (]
[(, this, ), ;, return, new, TypePair, (, p, ., typeB, ,, p, ., typeA, ), ;, }, if, (]
[return, new, TypePair, (, p, ., typeB, ,, p, ., typeA, ), ;, }, if, (, isNullType, (, ), &&]
[return, new, TypePair, (, p, ., typeB, ,, p, ., typeA, ), ;, }, if, (, isNullType, (, ), &&]
[typeB, ,, p, ., typeA, ), ;, }, if, (, isNullType, (, ), &&, that, ., isNullType, (, ), ||]
[typeB, ,, p, ., typeA, ), ;, }, if, (, isNullType, (, ), &&, that, ., isNullType, (, ), ||]
[typeA, ), ;, }, if, (, isNullType, (, ), &&, that, ., isNullType, (, ), ||, isVoidType, (, ), &&]
[typeA, ), ;, }, if, (, isNullType, (, ), &&, that, ., isNullType, (, ), ||, isVoidType, (, ), &&]
[), &&, that, ., isNullType, (, ), ||, isVoidType, (, ), &&, that, ., isVoidType, (, ), ), {, return]
[., isNullType, (, ), ||, isVoidType, (, ), &&, that, ., isVoidType, (, ), ), {, return, new, TypePair, (]
[(, ), ||, isVoidType, (, ), &&, that, ., isVoidType, (, ), ), {, return, new, TypePair, (, null, ,]
[that, ., isVoidType, (, ), ), {, return, new, TypePair, (, null, ,, null, ), ;, }, else, {, return]
[(, ), ), {, return, new, TypePair, (, null, ,, null, ), ;, }, else, {, return, new, TypePair, (]
[), {, return, new, TypePair, (, null, ,, null, ), ;, }, else, {, return, new, TypePair, (, this, ,]
[else, {, return, new, TypePair, (, this, ,, that, ), ;, }, }, public, JSType, restrictByNotNullOrUndefined, (, ), {, return]
[}, public, JSType, restrictByNotNullOrUndefined, (, ), {, return, this, ;, }, public, boolean, isSubtype, (, JSType, that, ), {, return]
[JSType, restrictByNotNullOrUndefined, (, ), {, return, this, ;, }, public, boolean, isSubtype, (, JSType, that, ), {, return, isSubtypeHelper, (]
[(, ), {, return, this, ;, }, public, boolean, isSubtype, (, JSType, that, ), {, return, isSubtypeHelper, (, this, ,]
[(, this, ,, that, ), ;, }, static, boolean, isSubtypeHelper, (, JSType, thisType, ,, JSType, thatType, ), {, if, (]
[(, this, ,, that, ), ;, }, static, boolean, isSubtypeHelper, (, JSType, thisType, ,, JSType, thatType, ), {, if, (]
[boolean, isSubtypeHelper, (, JSType, thisType, ,, JSType, thatType, ), {, if, (, thatType, ., isUnknownType, (, ), ), {, return]
[,, JSType, thatType, ), {, if, (, thatType, ., isUnknownType, (, ), ), {, return, true, ;, }, if, (]
[,, JSType, thatType, ), {, if, (, thatType, ., isUnknownType, (, ), ), {, return, true, ;, }, if, (]
[., isUnknownType, (, ), ), {, return, true, ;, }, if, (, thatType, ., isAllType, (, ), ), {, return]
[{, return, true, ;, }, if, (, thatType, ., isAllType, (, ), ), {, return, true, ;, }, if, (]
[{, return, true, ;, }, if, (, thatType, ., isAllType, (, ), ), {, return, true, ;, }, if, (]
[}, if, (, thatType, ., isAllType, (, ), ), {, return, true, ;, }, if, (, thisType, ., isEquivalentTo, (]
[isAllType, (, ), ), {, return, true, ;, }, if, (, thisType, ., isEquivalentTo, (, thatType, ), ), {, return]
[return, true, ;, }, if, (, thisType, ., isEquivalentTo, (, thatType, ), ), {, return, true, ;, }, if, (]
[return, true, ;, }, if, (, thisType, ., isEquivalentTo, (, thatType, ), ), {, return, true, ;, }, if, (]
[thatType, ), ), {, return, true, ;, }, if, (, thatType, ., isUnionType, (, ), ), {, UnionType, union, =]
[thatType, ), ), {, return, true, ;, }, if, (, thatType, ., isUnionType, (, ), ), {, UnionType, union, =]
[., isUnionType, (, ), ), {, UnionType, union, =, thatType, ., toMaybeUnionType, (, ), ;, for, (, JSType, element, :]
[., isUnionType, (, ), ), {, UnionType, union, =, thatType, ., toMaybeUnionType, (, ), ;, for, (, JSType, element, :]
[union, =, thatType, ., toMaybeUnionType, (, ), ;, for, (, JSType, element, :, union, ., alternates, ), {, if, (]
[union, =, thatType, ., toMaybeUnionType, (, ), ;, for, (, JSType, element, :, union, ., alternates, ), {, if, (]
[toMaybeUnionType, (, ), ;, for, (, JSType, element, :, union, ., alternates, ), {, if, (, thisType, ., isSubtype, (]
[(, JSType, element, :, union, ., alternates, ), {, if, (, thisType, ., isSubtype, (, element, ), ), {, return]
[., alternates, ), {, if, (, thisType, ., isSubtype, (, element, ), ), {, return, true, ;, }, }, return]
[(, thisType, ., isSubtype, (, element, ), ), {, return, true, ;, }, }, return, false, ;, }, if, (]
[(, thisType, ., isSubtype, (, element, ), ), {, return, true, ;, }, }, return, false, ;, }, if, (]
[{, return, true, ;, }, }, return, false, ;, }, if, (, thisType, ., isParameterizedType, (, ), ), {, return]
[{, return, true, ;, }, }, return, false, ;, }, if, (, thisType, ., isParameterizedType, (, ), ), {, return]
[{, return, true, ;, }, }, return, false, ;, }, if, (, thisType, ., isParameterizedType, (, ), ), {, return]
[;, }, if, (, thisType, ., isParameterizedType, (, ), ), {, return, thisType, ., toMaybeParameterizedType, (, ), ., isParameterizeSubtypeOf, (]
[isParameterizedType, (, ), ), {, return, thisType, ., toMaybeParameterizedType, (, ), ., isParameterizeSubtypeOf, (, thatType, ), ;, }, if, (]
[isParameterizedType, (, ), ), {, return, thisType, ., toMaybeParameterizedType, (, ), ., isParameterizeSubtypeOf, (, thatType, ), ;, }, if, (]
[thisType, ., toMaybeParameterizedType, (, ), ., isParameterizeSubtypeOf, (, thatType, ), ;, }, if, (, thatType, instanceof, ProxyObjectType, ), {, return]
[thisType, ., toMaybeParameterizedType, (, ), ., isParameterizeSubtypeOf, (, thatType, ), ;, }, if, (, thatType, instanceof, ProxyObjectType, ), {, return]
[), ., isParameterizeSubtypeOf, (, thatType, ), ;, }, if, (, thatType, instanceof, ProxyObjectType, ), {, return, thisType, ., isSubtype, (]
[), ., isParameterizeSubtypeOf, (, thatType, ), ;, }, if, (, thatType, instanceof, ProxyObjectType, ), {, return, thisType, ., isSubtype, (]
[., isParameterizeSubtypeOf, (, thatType, ), ;, }, if, (, thatType, instanceof, ProxyObjectType, ), {, return, thisType, ., isSubtype, (, (]
[thatType, ), ;, }, if, (, thatType, instanceof, ProxyObjectType, ), {, return, thisType, ., isSubtype, (, (, (, ProxyObjectType, )]
[{, return, thisType, ., isSubtype, (, (, (, ProxyObjectType, ), thatType, ), ., getReferencedTypeInternal, (, ), ), ;, }, return]
[), ;, public, final, JSType, forceResolve, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, ResolveMode, oldResolveMode, =]
[), ;, public, final, JSType, forceResolve, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, ResolveMode, oldResolveMode, =]
[(, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, ResolveMode, oldResolveMode, =, registry, ., getResolveMode, (, ), ;]
[(, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, ResolveMode, oldResolveMode, =, registry, ., getResolveMode, (, ), ;]
[StaticScope, <, JSType, >, scope, ), {, ResolveMode, oldResolveMode, =, registry, ., getResolveMode, (, ), ;, registry, ., setResolveMode, (]
[StaticScope, <, JSType, >, scope, ), {, ResolveMode, oldResolveMode, =, registry, ., getResolveMode, (, ), ;, registry, ., setResolveMode, (]
[oldResolveMode, =, registry, ., getResolveMode, (, ), ;, registry, ., setResolveMode, (, ResolveMode, ., IMMEDIATE, ), ;, JSType, result, =]
[registry, ., getResolveMode, (, ), ;, registry, ., setResolveMode, (, ResolveMode, ., IMMEDIATE, ), ;, JSType, result, =, resolve, (]
[getResolveMode, (, ), ;, registry, ., setResolveMode, (, ResolveMode, ., IMMEDIATE, ), ;, JSType, result, =, resolve, (, t, ,]
[;, registry, ., setResolveMode, (, ResolveMode, ., IMMEDIATE, ), ;, JSType, result, =, resolve, (, t, ,, scope, ), ;]
[;, registry, ., setResolveMode, (, ResolveMode, ., IMMEDIATE, ), ;, JSType, result, =, resolve, (, t, ,, scope, ), ;]
[(, ResolveMode, ., IMMEDIATE, ), ;, JSType, result, =, resolve, (, t, ,, scope, ), ;, registry, ., setResolveMode, (]
[), ;, JSType, result, =, resolve, (, t, ,, scope, ), ;, registry, ., setResolveMode, (, oldResolveMode, ), ;, return]
[result, ;, }, public, final, JSType, resolve, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, if, (]
[JSType, resolve, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, if, (, resolved, ), {, if, (]
[JSType, resolve, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, if, (, resolved, ), {, if, (]
[(, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, if, (, resolved, ), {, if, (, resolveResult, ==]
[StaticScope, <, JSType, >, scope, ), {, if, (, resolved, ), {, if, (, resolveResult, ==, null, ), {, return]
[StaticScope, <, JSType, >, scope, ), {, if, (, resolved, ), {, if, (, resolveResult, ==, null, ), {, return]
[scope, ), {, if, (, resolved, ), {, if, (, resolveResult, ==, null, ), {, return, registry, ., getNativeType, (]
[scope, ), {, if, (, resolved, ), {, if, (, resolveResult, ==, null, ), {, return, registry, ., getNativeType, (]
[{, if, (, resolveResult, ==, null, ), {, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return]
[resolveResult, ==, null, ), {, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return, resolveResult, ;, }]
[null, ), {, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return, resolveResult, ;, }, resolved, =]
[{, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return, resolveResult, ;, }, resolved, =, true, ;]
[registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return, resolveResult, ;, }, resolved, =, true, ;, resolveResult, =]
[getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return, resolveResult, ;, }, resolved, =, true, ;, resolveResult, =, resolveInternal, (]
[JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return, resolveResult, ;, }, resolved, =, true, ;, resolveResult, =, resolveInternal, (, t, ,]
[), ;, }, return, resolveResult, ;, }, resolved, =, true, ;, resolveResult, =, resolveInternal, (, t, ,, scope, ), ;]
[), ;, }, return, resolveResult, ;, }, resolved, =, true, ;, resolveResult, =, resolveInternal, (, t, ,, scope, ), ;]
[resolveResult, ;, }, resolved, =, true, ;, resolveResult, =, resolveInternal, (, t, ,, scope, ), ;, resolveResult, ., setResolvedTypeInternal, (]
[=, true, ;, resolveResult, =, resolveInternal, (, t, ,, scope, ), ;, resolveResult, ., setResolvedTypeInternal, (, resolveResult, ), ;, return]
[JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), ;, void, setResolvedTypeInternal, (, JSType, type, ), {]
[(, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), ;, void, setResolvedTypeInternal, (, JSType, type, ), {, resolveResult, =]
[t, ,, StaticScope, <, JSType, >, scope, ), ;, void, setResolvedTypeInternal, (, JSType, type, ), {, resolveResult, =, type, ;]
[StaticScope, <, JSType, >, scope, ), ;, void, setResolvedTypeInternal, (, JSType, type, ), {, resolveResult, =, type, ;, resolved, =]
[type, ), {, resolveResult, =, type, ;, resolved, =, true, ;, }, public, final, boolean, isResolved, (, ), {, return]
[;, }, public, final, boolean, isResolved, (, ), {, return, resolved, ;, }, public, final, void, clearResolved, (, ), {]
[public, final, boolean, isResolved, (, ), {, return, resolved, ;, }, public, final, void, clearResolved, (, ), {, resolved, =]
[boolean, isResolved, (, ), {, return, resolved, ;, }, public, final, void, clearResolved, (, ), {, resolved, =, false, ;]
[(, ), {, return, resolved, ;, }, public, final, void, clearResolved, (, ), {, resolved, =, false, ;, resolveResult, =]
[}, static, final, JSType, safeResolve, (, JSType, type, ,, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, return]
[}, static, final, JSType, safeResolve, (, JSType, type, ,, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, return]
[}, static, final, JSType, safeResolve, (, JSType, type, ,, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, return]
[final, JSType, safeResolve, (, JSType, type, ,, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, return, type, ==]
[safeResolve, (, JSType, type, ,, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, return, type, ==, null, ?]
[JSType, type, ,, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, return, type, ==, null, ?, null, :]
[JSType, type, ,, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, return, type, ==, null, ?, null, :]
[t, ,, StaticScope, <, JSType, >, scope, ), {, return, type, ==, null, ?, null, :, type, ., resolve, (]
[StaticScope, <, JSType, >, scope, ), {, return, type, ==, null, ?, null, :, type, ., resolve, (, t, ,]
[resolve, (, t, ,, scope, ), ;, }, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, return]
[resolve, (, t, ,, scope, ), ;, }, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, return]
[scope, ), ;, }, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, return, validator, ., apply, (]
[public, final, JSType, typeA, ;, public, final, JSType, typeB, ;, public, TypePair, (, JSType, typeA, ,, JSType, typeB, ), {]
[public, final, JSType, typeA, ;, public, final, JSType, typeB, ;, public, TypePair, (, JSType, typeA, ,, JSType, typeB, ), {]
[;, public, final, JSType, typeB, ;, public, TypePair, (, JSType, typeA, ,, JSType, typeB, ), {, this, ., typeA, =]
[final, JSType, typeB, ;, public, TypePair, (, JSType, typeA, ,, JSType, typeB, ), {, this, ., typeA, =, typeA, ;]
[final, JSType, typeB, ;, public, TypePair, (, JSType, typeA, ,, JSType, typeB, ), {, this, ., typeA, =, typeA, ;]
[public, TypePair, (, JSType, typeA, ,, JSType, typeB, ), {, this, ., typeA, =, typeA, ;, this, ., typeB, =]
[=, typeA, ;, this, ., typeB, =, typeB, ;, }, }, @, Override, public, String, toString, (, ), {, return]
[;, this, ., typeB, =, typeB, ;, }, }, @, Override, public, String, toString, (, ), {, return, toStringHelper, (]
[public, String, toString, (, ), {, return, toStringHelper, (, false, ), ;, }, public, String, toDebugHashCodeString, (, ), {, return]
[public, String, toString, (, ), {, return, toStringHelper, (, false, ), ;, }, public, String, toDebugHashCodeString, (, ), {, return]
[public, String, toString, (, ), {, return, toStringHelper, (, false, ), ;, }, public, String, toDebugHashCodeString, (, ), {, return]
[toString, (, ), {, return, toStringHelper, (, false, ), ;, }, public, String, toDebugHashCodeString, (, ), {, return, "{", +]
[return, toStringHelper, (, false, ), ;, }, public, String, toDebugHashCodeString, (, ), {, return, "{", +, hashCode, (, ), +]
[), {, return, "{", +, hashCode, (, ), +, "}", ;, }, public, final, String, toAnnotationString, (, ), {, return]
[return, "{", +, hashCode, (, ), +, "}", ;, }, public, final, String, toAnnotationString, (, ), {, return, toStringHelper, (]
