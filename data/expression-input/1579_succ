[;, private, final, Scope, parent, ;, private, final, int, depth, ;, private, final, Node, rootNode, ;, private, final, boolean, isBottom]
[;, public, static, class, Var, implements, StaticSlot, <, JSType, >, ,, StaticReference, <, JSType, >, {, final, String, name, ;]
[;, }, }, ;, public, static, class, Var, implements, StaticSlot, <, JSType, >, ,, StaticReference, <, JSType, >, {, final]
[&&, !, var, ., isExtern, (, ), ;, }, }, ;, public, static, class, Var, implements, StaticSlot, <, JSType, >]
[&&, var, ., getParentNode, (, ), ., isVar, (, ), &&, !, var, ., isExtern, (, ), ;, }, }]
[&&, var, ., getType, (, ), ==, null, &&, var, ., getParentNode, (, ), ., isVar, (, ), &&, !]
[!=, null, &&, var, ., getType, (, ), ==, null, &&, var, ., getParentNode, (, ), ., isVar, (, )]
[., getParentNode, (, ), !=, null, &&, var, ., getType, (, ), ==, null, &&, var, ., getParentNode, (, )]
[&&, var, ., getType, (, ), ==, null, &&, var, ., getParentNode, (, ), ., isVar, (, ), &&, !]
[&&, var, ., getParentNode, (, ), ., isVar, (, ), &&, !, var, ., isExtern, (, ), ;, }, }]
[==, null, &&, var, ., getParentNode, (, ), ., isVar, (, ), &&, !, var, ., isExtern, (, ), ;]
[., getType, (, ), ==, null, &&, var, ., getParentNode, (, ), ., isVar, (, ), &&, !, var, .]
[&&, var, ., getParentNode, (, ), ., isVar, (, ), &&, !, var, ., isExtern, (, ), ;, }, }]
[&&, !, var, ., isExtern, (, ), ;, }, }, ;, public, static, class, Var, implements, StaticSlot, <, JSType, >]
[., isVar, (, ), &&, !, var, ., isExtern, (, ), ;, }, }, ;, public, static, class, Var, implements]
[., getParentNode, (, ), ., isVar, (, ), &&, !, var, ., isExtern, (, ), ;, }, }, ;, public]
[;, }, }, ;, public, static, class, Var, implements, StaticSlot, <, JSType, >, ,, StaticReference, <, JSType, >, {, final]
[;, }, }, ;, public, static, class, Var, implements, StaticSlot, <, JSType, >, ,, StaticReference, <, JSType, >, {, final]
[., isExtern, (, ), ;, }, }, ;, public, static, class, Var, implements, StaticSlot, <, JSType, >, ,, StaticReference, <]
[;, private, boolean, markedAssignedExactlyOnce, =, false, ;, private, Var, (, boolean, inferred, ,, String, name, ,, Node, nameNode, ,, JSType]
[;, private, Var, (, boolean, inferred, ,, String, name, ,, Node, nameNode, ,, JSType, type, ,, Scope, scope, ,, int]
[=, name, ;, this, ., nameNode, =, nameNode, ;, this, ., type, =, type, ;, this, ., scope, =, scope]
[., name, =, name, ;, this, ., nameNode, =, nameNode, ;, this, ., type, =, type, ;, this, ., scope]
[;, this, ., nameNode, =, nameNode, ;, this, ., type, =, type, ;, this, ., scope, =, scope, ;, this]
[=, nameNode, ;, this, ., type, =, type, ;, this, ., scope, =, scope, ;, this, ., index, =, index]
[., nameNode, =, nameNode, ;, this, ., type, =, type, ;, this, ., scope, =, scope, ;, this, ., index]
[;, this, ., type, =, type, ;, this, ., scope, =, scope, ;, this, ., index, =, index, ;, this]
[=, type, ;, this, ., scope, =, scope, ;, this, ., index, =, index, ;, this, ., input, =, input]
[., type, =, type, ;, this, ., scope, =, scope, ;, this, ., index, =, index, ;, this, ., input]
[;, this, ., scope, =, scope, ;, this, ., index, =, index, ;, this, ., input, =, input, ;, this]
[=, scope, ;, this, ., index, =, index, ;, this, ., input, =, input, ;, this, ., typeInferred, =, inferred]
[., scope, =, scope, ;, this, ., index, =, index, ;, this, ., input, =, input, ;, this, ., typeInferred]
[;, this, ., index, =, index, ;, this, ., input, =, input, ;, this, ., typeInferred, =, inferred, ;, }]
[=, index, ;, this, ., input, =, input, ;, this, ., typeInferred, =, inferred, ;, }, @, Override, public, String]
[., index, =, index, ;, this, ., input, =, input, ;, this, ., typeInferred, =, inferred, ;, }, @, Override]
[;, this, ., input, =, input, ;, this, ., typeInferred, =, inferred, ;, }, @, Override, public, String, getName, (]
[=, input, ;, this, ., typeInferred, =, inferred, ;, }, @, Override, public, String, getName, (, ), {, return, name]
[., input, =, input, ;, this, ., typeInferred, =, inferred, ;, }, @, Override, public, String, getName, (, ), {]
[;, this, ., typeInferred, =, inferred, ;, }, @, Override, public, String, getName, (, ), {, return, name, ;, }]
[=, inferred, ;, }, @, Override, public, String, getName, (, ), {, return, name, ;, }, @, Override, public, Node]
[., typeInferred, =, inferred, ;, }, @, Override, public, String, getName, (, ), {, return, name, ;, }, @, Override]
[;, }, @, Override, public, String, getName, (, ), {, return, name, ;, }, @, Override, public, Node, getNode, (]
[;, }, @, Override, public, Node, getNode, (, ), {, return, nameNode, ;, }, CompilerInput, getInput, (, ), {, return]
[;, }, CompilerInput, getInput, (, ), {, return, input, ;, }, @, Override, public, StaticSourceFile, getSourceFile, (, ), {, return]
[;, }, @, Override, public, StaticSourceFile, getSourceFile, (, ), {, return, nameNode, ., getStaticSourceFile, (, ), ;, }, @, Override]
[;, }, @, Override, public, Var, getSymbol, (, ), {, return, this, ;, }, @, Override, public, Var, getDeclaration, (]
[., getStaticSourceFile, (, ), ;, }, @, Override, public, Var, getSymbol, (, ), {, return, this, ;, }, @, Override]
[;, }, @, Override, public, Var, getDeclaration, (, ), {, return, nameNode, ==, null, ?, null, :, this, ;, }]
[;, }, public, Node, getParentNode, (, ), {, return, nameNode, ==, null, ?, null, :, nameNode, ., getParent, (, )]
[?, null, :, this, ;, }, public, Node, getParentNode, (, ), {, return, nameNode, ==, null, ?, null, :, nameNode]
[==, null, ?, null, :, this, ;, }, public, Node, getParentNode, (, ), {, return, nameNode, ==, null, ?, null]
[?, null, :, this, ;, }, public, Node, getParentNode, (, ), {, return, nameNode, ==, null, ?, null, :, nameNode]
[:, this, ;, }, public, Node, getParentNode, (, ), {, return, nameNode, ==, null, ?, null, :, nameNode, ., getParent]
[;, }, public, Node, getParentNode, (, ), {, return, nameNode, ==, null, ?, null, :, nameNode, ., getParent, (, )]
[;, }, public, boolean, isBleedingFunction, (, ), {, return, NodeUtil, ., isFunctionExpression, (, getParentNode, (, ), ), ;, }, Scope]
[?, null, :, nameNode, ., getParent, (, ), ;, }, public, boolean, isBleedingFunction, (, ), {, return, NodeUtil, ., isFunctionExpression]
[==, null, ?, null, :, nameNode, ., getParent, (, ), ;, }, public, boolean, isBleedingFunction, (, ), {, return, NodeUtil]
[?, null, :, nameNode, ., getParent, (, ), ;, }, public, boolean, isBleedingFunction, (, ), {, return, NodeUtil, ., isFunctionExpression]
[:, nameNode, ., getParent, (, ), ;, }, public, boolean, isBleedingFunction, (, ), {, return, NodeUtil, ., isFunctionExpression, (, getParentNode]
[;, }, public, boolean, isBleedingFunction, (, ), {, return, NodeUtil, ., isFunctionExpression, (, getParentNode, (, ), ), ;, }, Scope]
[., getParent, (, ), ;, }, public, boolean, isBleedingFunction, (, ), {, return, NodeUtil, ., isFunctionExpression, (, getParentNode, (, )]
[;, }, Scope, getScope, (, ), {, return, scope, ;, }, public, boolean, isGlobal, (, ), {, return, scope, .]
[., isFunctionExpression, (, getParentNode, (, ), ), ;, }, Scope, getScope, (, ), {, return, scope, ;, }, public, boolean]
[), ;, }, Scope, getScope, (, ), {, return, scope, ;, }, public, boolean, isGlobal, (, ), {, return, scope]
[;, }, public, boolean, isGlobal, (, ), {, return, scope, ., isGlobal, (, ), ;, }, public, boolean, isLocal, (]
[;, }, public, boolean, isLocal, (, ), {, return, scope, ., isLocal, (, ), ;, }, boolean, isExtern, (, )]
[., isGlobal, (, ), ;, }, public, boolean, isLocal, (, ), {, return, scope, ., isLocal, (, ), ;, }]
[;, }, boolean, isExtern, (, ), {, return, input, ==, null, ||, input, ., isExtern, (, ), ;, }, public]
[., isLocal, (, ), ;, }, boolean, isExtern, (, ), {, return, input, ==, null, ||, input, ., isExtern, (]
[;, }, public, boolean, isConst, (, ), {, return, nameNode, !=, null, &&, NodeUtil, ., isConstantName, (, nameNode, ), ;]
[||, input, ., isExtern, (, ), ;, }, public, boolean, isConst, (, ), {, return, nameNode, !=, null, &&, NodeUtil]
[==, null, ||, input, ., isExtern, (, ), ;, }, public, boolean, isConst, (, ), {, return, nameNode, !=, null]
[||, input, ., isExtern, (, ), ;, }, public, boolean, isConst, (, ), {, return, nameNode, !=, null, &&, NodeUtil]
[;, }, public, boolean, isConst, (, ), {, return, nameNode, !=, null, &&, NodeUtil, ., isConstantName, (, nameNode, ), ;]
[., isExtern, (, ), ;, }, public, boolean, isConst, (, ), {, return, nameNode, !=, null, &&, NodeUtil, ., isConstantName]
[;, }, public, boolean, isDefine, (, ), {, JSDocInfo, info, =, getJSDocInfo, (, ), ;, return, info, !=, null, &&]
[&&, NodeUtil, ., isConstantName, (, nameNode, ), ;, }, public, boolean, isDefine, (, ), {, JSDocInfo, info, =, getJSDocInfo, (]
[!=, null, &&, NodeUtil, ., isConstantName, (, nameNode, ), ;, }, public, boolean, isDefine, (, ), {, JSDocInfo, info, =]
[&&, NodeUtil, ., isConstantName, (, nameNode, ), ;, }, public, boolean, isDefine, (, ), {, JSDocInfo, info, =, getJSDocInfo, (]
[;, }, public, boolean, isDefine, (, ), {, JSDocInfo, info, =, getJSDocInfo, (, ), ;, return, info, !=, null, &&]
[., isConstantName, (, nameNode, ), ;, }, public, boolean, isDefine, (, ), {, JSDocInfo, info, =, getJSDocInfo, (, ), ;]
[), ;, }, public, boolean, isDefine, (, ), {, JSDocInfo, info, =, getJSDocInfo, (, ), ;, return, info, !=, null]
[;, return, info, !=, null, &&, info, ., isDefine, (, ), ;, }, public, Node, getInitialValue, (, ), {, return]
[;, }, public, Node, getInitialValue, (, ), {, return, NodeUtil, ., getRValueOfLValue, (, nameNode, ), ;, }, @, Override, public]
[&&, info, ., isDefine, (, ), ;, }, public, Node, getInitialValue, (, ), {, return, NodeUtil, ., getRValueOfLValue, (, nameNode]
[!=, null, &&, info, ., isDefine, (, ), ;, }, public, Node, getInitialValue, (, ), {, return, NodeUtil, ., getRValueOfLValue]
[&&, info, ., isDefine, (, ), ;, }, public, Node, getInitialValue, (, ), {, return, NodeUtil, ., getRValueOfLValue, (, nameNode]
[;, }, public, Node, getInitialValue, (, ), {, return, NodeUtil, ., getRValueOfLValue, (, nameNode, ), ;, }, @, Override, public]
[., isDefine, (, ), ;, }, public, Node, getInitialValue, (, ), {, return, NodeUtil, ., getRValueOfLValue, (, nameNode, ), ;]
[;, }, @, Override, public, JSType, getType, (, ), {, return, type, ;, }, public, Node, getNameNode, (, ), {]
[., getRValueOfLValue, (, nameNode, ), ;, }, @, Override, public, JSType, getType, (, ), {, return, type, ;, }, public]
[), ;, }, @, Override, public, JSType, getType, (, ), {, return, type, ;, }, public, Node, getNameNode, (, )]
[;, }, public, Node, getNameNode, (, ), {, return, nameNode, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {]
[;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, nameNode, ==, null, ?, null, :, NodeUtil, ., getBestJSDocInfo]
[;, }, void, setType, (, JSType, type, ), {, Preconditions, ., checkState, (, isTypeInferred, (, ), ), ;, this, .]
[?, null, :, NodeUtil, ., getBestJSDocInfo, (, nameNode, ), ;, }, void, setType, (, JSType, type, ), {, Preconditions, .]
[==, null, ?, null, :, NodeUtil, ., getBestJSDocInfo, (, nameNode, ), ;, }, void, setType, (, JSType, type, ), {]
[?, null, :, NodeUtil, ., getBestJSDocInfo, (, nameNode, ), ;, }, void, setType, (, JSType, type, ), {, Preconditions, .]
[:, NodeUtil, ., getBestJSDocInfo, (, nameNode, ), ;, }, void, setType, (, JSType, type, ), {, Preconditions, ., checkState, (]
[;, }, void, setType, (, JSType, type, ), {, Preconditions, ., checkState, (, isTypeInferred, (, ), ), ;, this, .]
[., getBestJSDocInfo, (, nameNode, ), ;, }, void, setType, (, JSType, type, ), {, Preconditions, ., checkState, (, isTypeInferred, (]
[), ;, }, void, setType, (, JSType, type, ), {, Preconditions, ., checkState, (, isTypeInferred, (, ), ), ;, this]
[;, this, ., type, =, type, ;, }, void, resolveType, (, ErrorReporter, errorReporter, ), {, if, (, type, !=, null]
[., checkState, (, isTypeInferred, (, ), ), ;, this, ., type, =, type, ;, }, void, resolveType, (, ErrorReporter, errorReporter]
[), ;, this, ., type, =, type, ;, }, void, resolveType, (, ErrorReporter, errorReporter, ), {, if, (, type, !=]
[=, type, ;, }, void, resolveType, (, ErrorReporter, errorReporter, ), {, if, (, type, !=, null, ), {, type, =]
[., type, =, type, ;, }, void, resolveType, (, ErrorReporter, errorReporter, ), {, if, (, type, !=, null, ), {]
[;, }, void, resolveType, (, ErrorReporter, errorReporter, ), {, if, (, type, !=, null, ), {, type, =, type, .]
[), {, type, =, type, ., resolve, (, errorReporter, ,, scope, ), ;, }, }, @, Override, public, boolean, isTypeInferred]
[!=, null, ), {, type, =, type, ., resolve, (, errorReporter, ,, scope, ), ;, }, }, @, Override, public]
[), {, type, =, type, ., resolve, (, errorReporter, ,, scope, ), ;, }, }, @, Override, public, boolean, isTypeInferred]
[=, type, ., resolve, (, errorReporter, ,, scope, ), ;, }, }, @, Override, public, boolean, isTypeInferred, (, ), {]
[;, }, }, @, Override, public, boolean, isTypeInferred, (, ), {, return, typeInferred, ;, }, public, String, getInputName, (, )]
[., resolve, (, errorReporter, ,, scope, ), ;, }, }, @, Override, public, boolean, isTypeInferred, (, ), {, return, typeInferred]
[,, scope, ), ;, }, }, @, Override, public, boolean, isTypeInferred, (, ), {, return, typeInferred, ;, }, public, String]
[), ;, }, }, @, Override, public, boolean, isTypeInferred, (, ), {, return, typeInferred, ;, }, public, String, getInputName, (]
[;, }, public, String, getInputName, (, ), {, if, (, input, ==, null, ), return, "<non-file>", ;, else, return, input]
[), return, "<non-file>", ;, else, return, input, ., getName, (, ), ;, }, public, boolean, isNoShadow, (, ), {, JSDocInfo]
[==, null, ), return, "<non-file>", ;, else, return, input, ., getName, (, ), ;, }, public, boolean, isNoShadow, (, )]
[), return, "<non-file>", ;, else, return, input, ., getName, (, ), ;, }, public, boolean, isNoShadow, (, ), {, JSDocInfo]
[;, else, return, input, ., getName, (, ), ;, }, public, boolean, isNoShadow, (, ), {, JSDocInfo, info, =, getJSDocInfo]
[;, }, public, boolean, isNoShadow, (, ), {, JSDocInfo, info, =, getJSDocInfo, (, ), ;, return, info, !=, null, &&]
[., getName, (, ), ;, }, public, boolean, isNoShadow, (, ), {, JSDocInfo, info, =, getJSDocInfo, (, ), ;, return]
[;, return, info, !=, null, &&, info, ., isNoShadow, (, ), ;, }, @, Override, public, boolean, equals, (, Object]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, !, (, other, instanceof, Var, )]
[&&, info, ., isNoShadow, (, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[!=, null, &&, info, ., isNoShadow, (, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {]
[&&, info, ., isNoShadow, (, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, !, (, other, instanceof, Var, )]
[., isNoShadow, (, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, !, (]
[), {, return, false, ;, }, Var, otherVar, =, (, Var, ), other, ;, return, otherVar, ., nameNode, ==, nameNode]
[), {, return, false, ;, }, Var, otherVar, =, (, Var, ), other, ;, return, otherVar, ., nameNode, ==, nameNode]
[), ), {, return, false, ;, }, Var, otherVar, =, (, Var, ), other, ;, return, otherVar, ., nameNode, ==]
[instanceof, Var, ), ), {, return, false, ;, }, Var, otherVar, =, (, Var, ), other, ;, return, otherVar, .]
[;, }, Var, otherVar, =, (, Var, ), other, ;, return, otherVar, ., nameNode, ==, nameNode, ;, }, @, Override]
[;, return, otherVar, ., nameNode, ==, nameNode, ;, }, @, Override, public, int, hashCode, (, ), {, return, nameNode, .]
[;, return, otherVar, ., nameNode, ==, nameNode, ;, }, @, Override, public, int, hashCode, (, ), {, return, nameNode, .]
[;, }, @, Override, public, int, hashCode, (, ), {, return, nameNode, ., hashCode, (, ), ;, }, @, Override]
[==, nameNode, ;, }, @, Override, public, int, hashCode, (, ), {, return, nameNode, ., hashCode, (, ), ;, }]
[., nameNode, ==, nameNode, ;, }, @, Override, public, int, hashCode, (, ), {, return, nameNode, ., hashCode, (, )]
[;, }, @, Override, public, int, hashCode, (, ), {, return, nameNode, ., hashCode, (, ), ;, }, @, Override]
[;, }, @, Override, public, String, toString, (, ), {, return, "Scope.Var ", +, name, +, "{", +, type, +, "}"]
[., hashCode, (, ), ;, }, @, Override, public, String, toString, (, ), {, return, "Scope.Var ", +, name, +, "{"]
[;, }, void, markEscaped, (, ), {, markedEscaped, =, true, ;, }, boolean, isMarkedEscaped, (, ), {, return, markedEscaped, ;]
[+, "}", ;, }, void, markEscaped, (, ), {, markedEscaped, =, true, ;, }, boolean, isMarkedEscaped, (, ), {, return]
[+, type, +, "}", ;, }, void, markEscaped, (, ), {, markedEscaped, =, true, ;, }, boolean, isMarkedEscaped, (, )]
[+, "{", +, type, +, "}", ;, }, void, markEscaped, (, ), {, markedEscaped, =, true, ;, }, boolean, isMarkedEscaped]
[+, name, +, "{", +, type, +, "}", ;, }, void, markEscaped, (, ), {, markedEscaped, =, true, ;, }]
[+, "{", +, type, +, "}", ;, }, void, markEscaped, (, ), {, markedEscaped, =, true, ;, }, boolean, isMarkedEscaped]
[+, type, +, "}", ;, }, void, markEscaped, (, ), {, markedEscaped, =, true, ;, }, boolean, isMarkedEscaped, (, )]
[+, "}", ;, }, void, markEscaped, (, ), {, markedEscaped, =, true, ;, }, boolean, isMarkedEscaped, (, ), {, return]
[;, }, void, markEscaped, (, ), {, markedEscaped, =, true, ;, }, boolean, isMarkedEscaped, (, ), {, return, markedEscaped, ;]
[=, true, ;, }, boolean, isMarkedEscaped, (, ), {, return, markedEscaped, ;, }, void, markAssignedExactlyOnce, (, ), {, markedAssignedExactlyOnce, =]
[;, }, boolean, isMarkedEscaped, (, ), {, return, markedEscaped, ;, }, void, markAssignedExactlyOnce, (, ), {, markedAssignedExactlyOnce, =, true, ;]
[;, }, void, markAssignedExactlyOnce, (, ), {, markedAssignedExactlyOnce, =, true, ;, }, boolean, isMarkedAssignedExactlyOnce, (, ), {, return, markedAssignedExactlyOnce, ;]
[=, true, ;, }, boolean, isMarkedAssignedExactlyOnce, (, ), {, return, markedAssignedExactlyOnce, ;, }, }, public, static, class, Arguments, extends, Var]
[;, }, boolean, isMarkedAssignedExactlyOnce, (, ), {, return, markedAssignedExactlyOnce, ;, }, }, public, static, class, Arguments, extends, Var, {, Arguments]
[;, }, }, public, static, class, Arguments, extends, Var, {, Arguments, (, Scope, scope, ), {, super, (, false, ,]
[,, "arguments", ,, null, ,, null, ,, scope, ,, -, 1, ,, null, ), ;, }, @, Override, public, boolean]
[,, null, ,, null, ,, scope, ,, -, 1, ,, null, ), ;, }, @, Override, public, boolean, equals, (]
[,, null, ,, scope, ,, -, 1, ,, null, ), ;, }, @, Override, public, boolean, equals, (, Object, other]
[,, scope, ,, -, 1, ,, null, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {]
[,, -, 1, ,, null, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[,, null, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, !, (, other]
[,, null, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, !, (, other]
[), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, !, (, other, instanceof, Arguments]
[), {, return, false, ;, }, Arguments, otherVar, =, (, Arguments, ), other, ;, return, otherVar, ., scope, ., getRootNode]
[), {, return, false, ;, }, Arguments, otherVar, =, (, Arguments, ), other, ;, return, otherVar, ., scope, ., getRootNode]
[), ), {, return, false, ;, }, Arguments, otherVar, =, (, Arguments, ), other, ;, return, otherVar, ., scope, .]
[instanceof, Arguments, ), ), {, return, false, ;, }, Arguments, otherVar, =, (, Arguments, ), other, ;, return, otherVar, .]
[;, }, Arguments, otherVar, =, (, Arguments, ), other, ;, return, otherVar, ., scope, ., getRootNode, (, ), ==, scope]
[;, return, otherVar, ., scope, ., getRootNode, (, ), ==, scope, ., getRootNode, (, ), ;, }, @, Override, public]
[;, return, otherVar, ., scope, ., getRootNode, (, ), ==, scope, ., getRootNode, (, ), ;, }, @, Override, public]
[;, }, @, Override, public, int, hashCode, (, ), {, return, System, ., identityHashCode, (, this, ), ;, }, }]
[==, scope, ., getRootNode, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, System, ., identityHashCode]
[., getRootNode, (, ), ==, scope, ., getRootNode, (, ), ;, }, @, Override, public, int, hashCode, (, ), {]
[., scope, ., getRootNode, (, ), ==, scope, ., getRootNode, (, ), ;, }, @, Override, public, int, hashCode, (]
[;, }, @, Override, public, int, hashCode, (, ), {, return, System, ., identityHashCode, (, this, ), ;, }, }]
[., getRootNode, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, System, ., identityHashCode, (, this]
[;, }, }, Scope, (, Scope, parent, ,, Node, rootNode, ), {, Preconditions, ., checkNotNull, (, parent, ), ;, Preconditions]
[., identityHashCode, (, this, ), ;, }, }, Scope, (, Scope, parent, ,, Node, rootNode, ), {, Preconditions, ., checkNotNull]
[), ;, }, }, Scope, (, Scope, parent, ,, Node, rootNode, ), {, Preconditions, ., checkNotNull, (, parent, ), ;]
[;, Preconditions, ., checkArgument, (, rootNode, !=, parent, ., rootNode, ), ;, this, ., parent, =, parent, ;, this, .]
[., checkNotNull, (, parent, ), ;, Preconditions, ., checkArgument, (, rootNode, !=, parent, ., rootNode, ), ;, this, ., parent]
[), ;, Preconditions, ., checkArgument, (, rootNode, !=, parent, ., rootNode, ), ;, this, ., parent, =, parent, ;, this]
[;, this, ., parent, =, parent, ;, this, ., rootNode, =, rootNode, ;, this, ., isBottom, =, false, ;, this]
[., checkArgument, (, rootNode, !=, parent, ., rootNode, ), ;, this, ., parent, =, parent, ;, this, ., rootNode, =]
[), ;, this, ., parent, =, parent, ;, this, ., rootNode, =, rootNode, ;, this, ., isBottom, =, false, ;]
[!=, parent, ., rootNode, ), ;, this, ., parent, =, parent, ;, this, ., rootNode, =, rootNode, ;, this, .]
[), ;, this, ., parent, =, parent, ;, this, ., rootNode, =, rootNode, ;, this, ., isBottom, =, false, ;]
[., rootNode, ), ;, this, ., parent, =, parent, ;, this, ., rootNode, =, rootNode, ;, this, ., isBottom, =]
[=, parent, ;, this, ., rootNode, =, rootNode, ;, this, ., isBottom, =, false, ;, this, ., depth, =, parent]
[., parent, =, parent, ;, this, ., rootNode, =, rootNode, ;, this, ., isBottom, =, false, ;, this, ., depth]
[;, this, ., rootNode, =, rootNode, ;, this, ., isBottom, =, false, ;, this, ., depth, =, parent, ., depth]
[=, rootNode, ;, this, ., isBottom, =, false, ;, this, ., depth, =, parent, ., depth, +, 1, ;, }]
[., rootNode, =, rootNode, ;, this, ., isBottom, =, false, ;, this, ., depth, =, parent, ., depth, +, 1]
[;, this, ., isBottom, =, false, ;, this, ., depth, =, parent, ., depth, +, 1, ;, }, private, Scope]
[=, false, ;, this, ., depth, =, parent, ., depth, +, 1, ;, }, private, Scope, (, Node, rootNode, ,]
[., isBottom, =, false, ;, this, ., depth, =, parent, ., depth, +, 1, ;, }, private, Scope, (, Node]
[;, this, ., depth, =, parent, ., depth, +, 1, ;, }, private, Scope, (, Node, rootNode, ,, boolean, isBottom]
[=, parent, ., depth, +, 1, ;, }, private, Scope, (, Node, rootNode, ,, boolean, isBottom, ), {, this, .]
[., depth, =, parent, ., depth, +, 1, ;, }, private, Scope, (, Node, rootNode, ,, boolean, isBottom, ), {]
[;, }, private, Scope, (, Node, rootNode, ,, boolean, isBottom, ), {, this, ., parent, =, null, ;, this, .]
[+, 1, ;, }, private, Scope, (, Node, rootNode, ,, boolean, isBottom, ), {, this, ., parent, =, null, ;]
[., depth, +, 1, ;, }, private, Scope, (, Node, rootNode, ,, boolean, isBottom, ), {, this, ., parent, =]
[;, }, private, Scope, (, Node, rootNode, ,, boolean, isBottom, ), {, this, ., parent, =, null, ;, this, .]
[=, null, ;, this, ., rootNode, =, rootNode, ;, this, ., isBottom, =, isBottom, ;, this, ., depth, =, 0]
[., parent, =, null, ;, this, ., rootNode, =, rootNode, ;, this, ., isBottom, =, isBottom, ;, this, ., depth]
[;, this, ., rootNode, =, rootNode, ;, this, ., isBottom, =, isBottom, ;, this, ., depth, =, 0, ;, }]
[=, rootNode, ;, this, ., isBottom, =, isBottom, ;, this, ., depth, =, 0, ;, }, static, Scope, createGlobalScope, (]
[., rootNode, =, rootNode, ;, this, ., isBottom, =, isBottom, ;, this, ., depth, =, 0, ;, }, static, Scope]
[;, this, ., isBottom, =, isBottom, ;, this, ., depth, =, 0, ;, }, static, Scope, createGlobalScope, (, Node, rootNode]
[=, isBottom, ;, this, ., depth, =, 0, ;, }, static, Scope, createGlobalScope, (, Node, rootNode, ), {, return, new]
[., isBottom, =, isBottom, ;, this, ., depth, =, 0, ;, }, static, Scope, createGlobalScope, (, Node, rootNode, ), {]
[;, this, ., depth, =, 0, ;, }, static, Scope, createGlobalScope, (, Node, rootNode, ), {, return, new, Scope, (]
[=, 0, ;, }, static, Scope, createGlobalScope, (, Node, rootNode, ), {, return, new, Scope, (, rootNode, ,, false, )]
[., depth, =, 0, ;, }, static, Scope, createGlobalScope, (, Node, rootNode, ), {, return, new, Scope, (, rootNode, ,]
[;, }, static, Scope, createGlobalScope, (, Node, rootNode, ), {, return, new, Scope, (, rootNode, ,, false, ), ;, }]
[;, }, static, Scope, createLatticeBottom, (, Node, rootNode, ), {, return, new, Scope, (, rootNode, ,, true, ), ;, }]
[,, false, ), ;, }, static, Scope, createLatticeBottom, (, Node, rootNode, ), {, return, new, Scope, (, rootNode, ,, true]
[), ;, }, static, Scope, createLatticeBottom, (, Node, rootNode, ), {, return, new, Scope, (, rootNode, ,, true, ), ;]
[;, }, int, getDepth, (, ), {, return, depth, ;, }, boolean, isBottom, (, ), {, return, isBottom, ;, }]
[,, true, ), ;, }, int, getDepth, (, ), {, return, depth, ;, }, boolean, isBottom, (, ), {, return]
[), ;, }, int, getDepth, (, ), {, return, depth, ;, }, boolean, isBottom, (, ), {, return, isBottom, ;]
[;, }, boolean, isBottom, (, ), {, return, isBottom, ;, }, @, Override, public, Node, getRootNode, (, ), {, return]
[;, }, @, Override, public, Node, getRootNode, (, ), {, return, rootNode, ;, }, public, Scope, getParent, (, ), {]
[;, }, public, Scope, getParent, (, ), {, return, parent, ;, }, Scope, getGlobalScope, (, ), {, Scope, result, =]
[;, }, Scope, getGlobalScope, (, ), {, Scope, result, =, this, ;, while, (, result, ., getParent, (, ), !=]
[;, while, (, result, ., getParent, (, ), !=, null, ), {, result, =, result, ., getParent, (, ), ;]
[), {, result, =, result, ., getParent, (, ), ;, }, return, result, ;, }, @, Override, public, StaticScope, <]
[!=, null, ), {, result, =, result, ., getParent, (, ), ;, }, return, result, ;, }, @, Override, public]
[., getParent, (, ), !=, null, ), {, result, =, result, ., getParent, (, ), ;, }, return, result, ;]
[), {, result, =, result, ., getParent, (, ), ;, }, return, result, ;, }, @, Override, public, StaticScope, <]
[=, result, ., getParent, (, ), ;, }, return, result, ;, }, @, Override, public, StaticScope, <, JSType, >, getParentScope]
[;, }, return, result, ;, }, @, Override, public, StaticScope, <, JSType, >, getParentScope, (, ), {, return, parent, ;]
[., getParent, (, ), ;, }, return, result, ;, }, @, Override, public, StaticScope, <, JSType, >, getParentScope, (, )]
[;, }, @, Override, public, StaticScope, <, JSType, >, getParentScope, (, ), {, return, parent, ;, }, @, Override, public]
[;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, if, (, isGlobal, (, ), ), {, return, ObjectType, .]
[), {, return, ObjectType, ., cast, (, rootNode, ., getJSType, (, ), ), ;, }, Preconditions, ., checkState, (, rootNode]
[;, }, Preconditions, ., checkState, (, rootNode, ., isFunction, (, ), ), ;, JSType, nodeType, =, rootNode, ., getJSType, (]
[., cast, (, rootNode, ., getJSType, (, ), ), ;, }, Preconditions, ., checkState, (, rootNode, ., isFunction, (, )]
[), ;, }, Preconditions, ., checkState, (, rootNode, ., isFunction, (, ), ), ;, JSType, nodeType, =, rootNode, ., getJSType]
[., getJSType, (, ), ), ;, }, Preconditions, ., checkState, (, rootNode, ., isFunction, (, ), ), ;, JSType, nodeType]
[;, JSType, nodeType, =, rootNode, ., getJSType, (, ), ;, if, (, nodeType, !=, null, &&, nodeType, ., isFunctionType, (]
[., checkState, (, rootNode, ., isFunction, (, ), ), ;, JSType, nodeType, =, rootNode, ., getJSType, (, ), ;, if]
[), ;, JSType, nodeType, =, rootNode, ., getJSType, (, ), ;, if, (, nodeType, !=, null, &&, nodeType, ., isFunctionType]
[., isFunction, (, ), ), ;, JSType, nodeType, =, rootNode, ., getJSType, (, ), ;, if, (, nodeType, !=, null]
[;, if, (, nodeType, !=, null, &&, nodeType, ., isFunctionType, (, ), ), {, return, nodeType, ., toMaybeFunctionType, (, )]
[., getJSType, (, ), ;, if, (, nodeType, !=, null, &&, nodeType, ., isFunctionType, (, ), ), {, return, nodeType]
[), {, return, nodeType, ., toMaybeFunctionType, (, ), ., getTypeOfThis, (, ), ;, }, else, {, return, parent, ., getTypeOfThis]
[&&, nodeType, ., isFunctionType, (, ), ), {, return, nodeType, ., toMaybeFunctionType, (, ), ., getTypeOfThis, (, ), ;, }]
[!=, null, &&, nodeType, ., isFunctionType, (, ), ), {, return, nodeType, ., toMaybeFunctionType, (, ), ., getTypeOfThis, (, )]
[&&, nodeType, ., isFunctionType, (, ), ), {, return, nodeType, ., toMaybeFunctionType, (, ), ., getTypeOfThis, (, ), ;, }]
[), {, return, nodeType, ., toMaybeFunctionType, (, ), ., getTypeOfThis, (, ), ;, }, else, {, return, parent, ., getTypeOfThis]
[., isFunctionType, (, ), ), {, return, nodeType, ., toMaybeFunctionType, (, ), ., getTypeOfThis, (, ), ;, }, else, {]
[;, }, else, {, return, parent, ., getTypeOfThis, (, ), ;, }, }, Var, declare, (, String, name, ,, Node]
[., getTypeOfThis, (, ), ;, }, else, {, return, parent, ., getTypeOfThis, (, ), ;, }, }, Var, declare, (]
[., toMaybeFunctionType, (, ), ., getTypeOfThis, (, ), ;, }, else, {, return, parent, ., getTypeOfThis, (, ), ;, }]
[;, }, }, Var, declare, (, String, name, ,, Node, nameNode, ,, JSType, type, ,, CompilerInput, input, ), {, return]
[., getTypeOfThis, (, ), ;, }, }, Var, declare, (, String, name, ,, Node, nameNode, ,, JSType, type, ,, CompilerInput]
[;, }, Var, declare, (, String, name, ,, Node, nameNode, ,, JSType, type, ,, CompilerInput, input, ,, boolean, inferred, )]
[,, nameNode, ,, type, ,, input, ,, true, ), ;, }, Var, declare, (, String, name, ,, Node, nameNode, ,]
[,, type, ,, input, ,, true, ), ;, }, Var, declare, (, String, name, ,, Node, nameNode, ,, JSType, type]
[,, input, ,, true, ), ;, }, Var, declare, (, String, name, ,, Node, nameNode, ,, JSType, type, ,, CompilerInput]
[,, true, ), ;, }, Var, declare, (, String, name, ,, Node, nameNode, ,, JSType, type, ,, CompilerInput, input, ,]
[), ;, }, Var, declare, (, String, name, ,, Node, nameNode, ,, JSType, type, ,, CompilerInput, input, ,, boolean, inferred]
[;, Preconditions, ., checkState, (, vars, ., get, (, name, ), ==, null, ), ;, Var, var, =, new, Var]
[., checkState, (, name, !=, null, &&, name, ., length, (, ), >, 0, ), ;, Preconditions, ., checkState, (]
[), ;, Preconditions, ., checkState, (, vars, ., get, (, name, ), ==, null, ), ;, Var, var, =, new]
[&&, name, ., length, (, ), >, 0, ), ;, Preconditions, ., checkState, (, vars, ., get, (, name, )]
[!=, null, &&, name, ., length, (, ), >, 0, ), ;, Preconditions, ., checkState, (, vars, ., get, (]
[&&, name, ., length, (, ), >, 0, ), ;, Preconditions, ., checkState, (, vars, ., get, (, name, )]
[), ;, Preconditions, ., checkState, (, vars, ., get, (, name, ), ==, null, ), ;, Var, var, =, new]
[>, 0, ), ;, Preconditions, ., checkState, (, vars, ., get, (, name, ), ==, null, ), ;, Var, var]
[., length, (, ), >, 0, ), ;, Preconditions, ., checkState, (, vars, ., get, (, name, ), ==, null]
[), ;, Preconditions, ., checkState, (, vars, ., get, (, name, ), ==, null, ), ;, Var, var, =, new]
[;, Var, var, =, new, Var, (, inferred, ,, name, ,, nameNode, ,, type, ,, this, ,, vars, ., size]
[., checkState, (, vars, ., get, (, name, ), ==, null, ), ;, Var, var, =, new, Var, (, inferred]
[), ;, Var, var, =, new, Var, (, inferred, ,, name, ,, nameNode, ,, type, ,, this, ,, vars, .]
[==, null, ), ;, Var, var, =, new, Var, (, inferred, ,, name, ,, nameNode, ,, type, ,, this, ,]
[., get, (, name, ), ==, null, ), ;, Var, var, =, new, Var, (, inferred, ,, name, ,, nameNode]
[), ==, null, ), ;, Var, var, =, new, Var, (, inferred, ,, name, ,, nameNode, ,, type, ,, this]
[), ;, Var, var, =, new, Var, (, inferred, ,, name, ,, nameNode, ,, type, ,, this, ,, vars, .]
[;, vars, ., put, (, name, ,, var, ), ;, return, var, ;, }, void, undeclare, (, Var, var, )]
[,, name, ,, nameNode, ,, type, ,, this, ,, vars, ., size, (, ), ,, input, ), ;, vars, .]
[,, nameNode, ,, type, ,, this, ,, vars, ., size, (, ), ,, input, ), ;, vars, ., put, (]
[,, type, ,, this, ,, vars, ., size, (, ), ,, input, ), ;, vars, ., put, (, name, ,]
[,, this, ,, vars, ., size, (, ), ,, input, ), ;, vars, ., put, (, name, ,, var, )]
[,, vars, ., size, (, ), ,, input, ), ;, vars, ., put, (, name, ,, var, ), ;, return]
[,, input, ), ;, vars, ., put, (, name, ,, var, ), ;, return, var, ;, }, void, undeclare, (]
[., size, (, ), ,, input, ), ;, vars, ., put, (, name, ,, var, ), ;, return, var, ;]
[), ;, vars, ., put, (, name, ,, var, ), ;, return, var, ;, }, void, undeclare, (, Var, var]
[;, return, var, ;, }, void, undeclare, (, Var, var, ), {, Preconditions, ., checkState, (, var, ., scope, ==]
[., put, (, name, ,, var, ), ;, return, var, ;, }, void, undeclare, (, Var, var, ), {, Preconditions]
[,, var, ), ;, return, var, ;, }, void, undeclare, (, Var, var, ), {, Preconditions, ., checkState, (, var]
[), ;, return, var, ;, }, void, undeclare, (, Var, var, ), {, Preconditions, ., checkState, (, var, ., scope]
[;, }, void, undeclare, (, Var, var, ), {, Preconditions, ., checkState, (, var, ., scope, ==, this, ), ;]
[;, Preconditions, ., checkState, (, vars, ., get, (, var, ., name, ), ==, var, ), ;, vars, ., remove]
[., checkState, (, var, ., scope, ==, this, ), ;, Preconditions, ., checkState, (, vars, ., get, (, var, .]
[), ;, Preconditions, ., checkState, (, vars, ., get, (, var, ., name, ), ==, var, ), ;, vars, .]
[==, this, ), ;, Preconditions, ., checkState, (, vars, ., get, (, var, ., name, ), ==, var, ), ;]
[., scope, ==, this, ), ;, Preconditions, ., checkState, (, vars, ., get, (, var, ., name, ), ==, var]
[), ;, Preconditions, ., checkState, (, vars, ., get, (, var, ., name, ), ==, var, ), ;, vars, .]
[;, vars, ., remove, (, var, ., name, ), ;, }, @, Override, public, Var, getSlot, (, String, name, )]
[., checkState, (, vars, ., get, (, var, ., name, ), ==, var, ), ;, vars, ., remove, (, var]
[), ;, vars, ., remove, (, var, ., name, ), ;, }, @, Override, public, Var, getSlot, (, String, name]
[==, var, ), ;, vars, ., remove, (, var, ., name, ), ;, }, @, Override, public, Var, getSlot, (]
[., get, (, var, ., name, ), ==, var, ), ;, vars, ., remove, (, var, ., name, ), ;]
[), ==, var, ), ;, vars, ., remove, (, var, ., name, ), ;, }, @, Override, public, Var, getSlot]
[., name, ), ==, var, ), ;, vars, ., remove, (, var, ., name, ), ;, }, @, Override, public]
[), ;, vars, ., remove, (, var, ., name, ), ;, }, @, Override, public, Var, getSlot, (, String, name]
[;, }, @, Override, public, Var, getSlot, (, String, name, ), {, return, getVar, (, name, ), ;, }, @]
[., remove, (, var, ., name, ), ;, }, @, Override, public, Var, getSlot, (, String, name, ), {, return]
[), ;, }, @, Override, public, Var, getSlot, (, String, name, ), {, return, getVar, (, name, ), ;, }]
[., name, ), ;, }, @, Override, public, Var, getSlot, (, String, name, ), {, return, getVar, (, name, )]
[;, }, @, Override, public, Var, getOwnSlot, (, String, name, ), {, return, vars, ., get, (, name, ), ;]
[), ;, }, @, Override, public, Var, getOwnSlot, (, String, name, ), {, return, vars, ., get, (, name, )]
[;, }, public, Var, getVar, (, String, name, ), {, Var, var, =, vars, ., get, (, name, ), ;]
[., get, (, name, ), ;, }, public, Var, getVar, (, String, name, ), {, Var, var, =, vars, .]
[), ;, }, public, Var, getVar, (, String, name, ), {, Var, var, =, vars, ., get, (, name, )]
[;, if, (, var, !=, null, ), {, return, var, ;, }, else, if, (, parent, !=, null, ), {]
[., get, (, name, ), ;, if, (, var, !=, null, ), {, return, var, ;, }, else, if, (]
[), ;, if, (, var, !=, null, ), {, return, var, ;, }, else, if, (, parent, !=, null, )]
[), {, return, var, ;, }, else, if, (, parent, !=, null, ), {, return, parent, ., getVar, (, name]
[!=, null, ), {, return, var, ;, }, else, if, (, parent, !=, null, ), {, return, parent, ., getVar]
[), {, return, var, ;, }, else, if, (, parent, !=, null, ), {, return, parent, ., getVar, (, name]
[;, }, else, if, (, parent, !=, null, ), {, return, parent, ., getVar, (, name, ), ;, }, else]
[), {, return, parent, ., getVar, (, name, ), ;, }, else, {, return, null, ;, }, }, public, Var]
[!=, null, ), {, return, parent, ., getVar, (, name, ), ;, }, else, {, return, null, ;, }, }]
[), {, return, parent, ., getVar, (, name, ), ;, }, else, {, return, null, ;, }, }, public, Var]
[;, }, else, {, return, null, ;, }, }, public, Var, getArgumentsVar, (, ), {, if, (, arguments, ==, null]
[., getVar, (, name, ), ;, }, else, {, return, null, ;, }, }, public, Var, getArgumentsVar, (, ), {]
[), ;, }, else, {, return, null, ;, }, }, public, Var, getArgumentsVar, (, ), {, if, (, arguments, ==]
[;, }, }, public, Var, getArgumentsVar, (, ), {, if, (, arguments, ==, null, ), {, arguments, =, new, Arguments]
[), {, arguments, =, new, Arguments, (, this, ), ;, }, return, arguments, ;, }, public, boolean, isDeclared, (, String]
[==, null, ), {, arguments, =, new, Arguments, (, this, ), ;, }, return, arguments, ;, }, public, boolean, isDeclared]
[), {, arguments, =, new, Arguments, (, this, ), ;, }, return, arguments, ;, }, public, boolean, isDeclared, (, String]
[=, new, Arguments, (, this, ), ;, }, return, arguments, ;, }, public, boolean, isDeclared, (, String, name, ,, boolean]
[;, }, return, arguments, ;, }, public, boolean, isDeclared, (, String, name, ,, boolean, recurse, ), {, Scope, scope, =]
[), ;, }, return, arguments, ;, }, public, boolean, isDeclared, (, String, name, ,, boolean, recurse, ), {, Scope, scope]
[;, }, public, boolean, isDeclared, (, String, name, ,, boolean, recurse, ), {, Scope, scope, =, this, ;, if, (]
[;, if, (, scope, ., vars, ., containsKey, (, name, ), ), return, true, ;, if, (, scope, ., parent]
[), return, true, ;, if, (, scope, ., parent, !=, null, &&, recurse, ), {, return, scope, ., parent, .]
[., containsKey, (, name, ), ), return, true, ;, if, (, scope, ., parent, !=, null, &&, recurse, ), {]
[., vars, ., containsKey, (, name, ), ), return, true, ;, if, (, scope, ., parent, !=, null, &&, recurse]
[), ), return, true, ;, if, (, scope, ., parent, !=, null, &&, recurse, ), {, return, scope, ., parent]
[;, if, (, scope, ., parent, !=, null, &&, recurse, ), {, return, scope, ., parent, ., isDeclared, (, name]
[), {, return, scope, ., parent, ., isDeclared, (, name, ,, recurse, ), ;, }, return, false, ;, }, public]
[&&, recurse, ), {, return, scope, ., parent, ., isDeclared, (, name, ,, recurse, ), ;, }, return, false, ;]
[!=, null, &&, recurse, ), {, return, scope, ., parent, ., isDeclared, (, name, ,, recurse, ), ;, }, return]
[., parent, !=, null, &&, recurse, ), {, return, scope, ., parent, ., isDeclared, (, name, ,, recurse, ), ;]
[&&, recurse, ), {, return, scope, ., parent, ., isDeclared, (, name, ,, recurse, ), ;, }, return, false, ;]
[), {, return, scope, ., parent, ., isDeclared, (, name, ,, recurse, ), ;, }, return, false, ;, }, public]
[;, }, return, false, ;, }, public, Iterator, <, Var, >, getVars, (, ), {, return, vars, ., values, (]
[., isDeclared, (, name, ,, recurse, ), ;, }, return, false, ;, }, public, Iterator, <, Var, >, getVars, (]
[., parent, ., isDeclared, (, name, ,, recurse, ), ;, }, return, false, ;, }, public, Iterator, <, Var, >]
[,, recurse, ), ;, }, return, false, ;, }, public, Iterator, <, Var, >, getVars, (, ), {, return, vars]
[), ;, }, return, false, ;, }, public, Iterator, <, Var, >, getVars, (, ), {, return, vars, ., values]
[;, }, public, Iterator, <, Var, >, getVars, (, ), {, return, vars, ., values, (, ), ., iterator, (]
[;, }, Iterable, <, Var, >, getVarIterable, (, ), {, return, vars, ., values, (, ), ;, }, @, Override]
[., iterator, (, ), ;, }, Iterable, <, Var, >, getVarIterable, (, ), {, return, vars, ., values, (, )]
[., values, (, ), ., iterator, (, ), ;, }, Iterable, <, Var, >, getVarIterable, (, ), {, return, vars]
[;, }, @, Override, public, Iterable, <, Var, >, getReferences, (, Var, var, ), {, return, ImmutableList, ., of, (]
[., values, (, ), ;, }, @, Override, public, Iterable, <, Var, >, getReferences, (, Var, var, ), {, return]
[;, }, @, Override, public, StaticScope, <, JSType, >, getScope, (, Var, var, ), {, return, var, ., scope, ;]
[., of, (, var, ), ;, }, @, Override, public, StaticScope, <, JSType, >, getScope, (, Var, var, ), {]
[), ;, }, @, Override, public, StaticScope, <, JSType, >, getScope, (, Var, var, ), {, return, var, ., scope]
[;, }, @, Override, public, Iterable, <, Var, >, getAllSymbols, (, ), {, return, Collections, ., unmodifiableCollection, (, vars, .]
[., scope, ;, }, @, Override, public, Iterable, <, Var, >, getAllSymbols, (, ), {, return, Collections, ., unmodifiableCollection, (]
[;, }, public, int, getVarCount, (, ), {, return, vars, ., size, (, ), ;, }, public, boolean, isGlobal, (]
[., unmodifiableCollection, (, vars, ., values, (, ), ), ;, }, public, int, getVarCount, (, ), {, return, vars, .]
[), ;, }, public, int, getVarCount, (, ), {, return, vars, ., size, (, ), ;, }, public, boolean, isGlobal]
[., values, (, ), ), ;, }, public, int, getVarCount, (, ), {, return, vars, ., size, (, ), ;]
[;, }, public, boolean, isGlobal, (, ), {, return, parent, ==, null, ;, }, public, boolean, isLocal, (, ), {]
[., size, (, ), ;, }, public, boolean, isGlobal, (, ), {, return, parent, ==, null, ;, }, public, boolean]
[;, }, public, boolean, isLocal, (, ), {, return, !, isGlobal, (, ), ;, }, public, Iterator, <, Var, >]
[==, null, ;, }, public, boolean, isLocal, (, ), {, return, !, isGlobal, (, ), ;, }, public, Iterator, <]
[;, }, public, boolean, isLocal, (, ), {, return, !, isGlobal, (, ), ;, }, public, Iterator, <, Var, >]
[;, }, public, Iterator, <, Var, >, getDeclarativelyUnboundVarsWithoutTypes, (, ), {, return, Iterators, ., filter, (, getVars, (, ), ,]
[;, }, public, Iterator, <, Var, >, getDeclarativelyUnboundVarsWithoutTypes, (, ), {, return, Iterators, ., filter, (, getVars, (, ), ,]
[;, }, }]
[., filter, (, getVars, (, ), ,, DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES, ), ;, }, }]
[,, DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES, ), ;, }, }]
[), ;, }, }]
